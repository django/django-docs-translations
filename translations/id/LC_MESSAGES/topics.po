# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# adam_zvx <adammmfs@gmail.com>, 2020
# Adiyat Mubarak <adiyatmubarak@gmail.com>, 2016
# Claude Paroz <claude@2xlibre.net>, 2020
# Dimas Ari <dimas@inchidi.id>, 2018
# Fery Setiawan <gembelweb@gmail.com>, 2015-2022
# oon arfiandwi <oon.arfiandwi@gmail.com>, 2018
# Sutrisno Efendi <kangfend@gmail.com>, 2017
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-27 03:41-0500\n"
"PO-Revision-Date: 2022-04-02 20:02+0000\n"
"Last-Translator: Fery Setiawan <gembelweb@gmail.com>\n"
"Language-Team: Indonesian (http://www.transifex.com/django/django-docs/"
"language/id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Asynchronous support"
msgstr "Dukungan asinkronus"

msgid ""
"Django has support for writing asynchronous (\"async\") views, along with an "
"entirely async-enabled request stack if you are running under :doc:`ASGI </"
"howto/deployment/asgi/index>`. Async views will still work under WSGI, but "
"with performance penalties, and without the ability to have efficient long-"
"running requests."
msgstr ""

msgid ""
"We're still working on async support for the ORM and other parts of Django. "
"You can expect to see this in future releases. For now, you can use the :"
"func:`sync_to_async` adapter to interact with the sync parts of Django. "
"There is also a whole range of async-native Python libraries that you can "
"integrate with."
msgstr ""

msgid "Async views"
msgstr "Tampilan asinkron"

msgid ""
"Any view can be declared async by making the callable part of it return a "
"coroutine - commonly, this is done using ``async def``. For a function-based "
"view, this means declaring the whole view using ``async def``. For a class-"
"based view, this means making its ``__call__()`` method an ``async def`` "
"(not its ``__init__()`` or ``as_view()``)."
msgstr ""
"Tampilan apapun dapat dinyatakan asinkron dengan membuat bagian dapat "
"dipanggil dari itu mengembalikan coroutine - umumnya, ini dikerjakan "
"menggunakan ``async def``. Untuk tampilan berdasarkan-fungsi, ini berarti "
"menyatakan tampilan seluruhnya menggunakan ``async def``. Untuk tampilan "
"berdasarkan-kelas, ini berarti membuat metode ``__call__()`` sebagai ``async "
"def`` (bukan ``__init__()`` atau ``as_view()``)."

msgid ""
"Django uses ``asyncio.iscoroutinefunction`` to test if your view is "
"asynchronous or not. If you implement your own method of returning a "
"coroutine, ensure you set the ``_is_coroutine`` attribute of the view to "
"``asyncio.coroutines._is_coroutine`` so this function returns ``True``."
msgstr ""
"Django menggunakan ``asyncio.iscoroutinefunction`` untuk menguji jika "
"tampilan anda adalah asinkron atau bukan. Jika anda menerapkan metode anda "
"sendiri dari mengembalikan coroutine, pastikan anda menyetel atribut "
"``_is_coroutine`` pada tampilan menjadi ``asyncio.coroutines._is_coroutine`` "
"sehingga fungsi ini mengembalikan ``True``."

msgid ""
"Under a WSGI server, async views will run in their own, one-off event loop. "
"This means you can use async features, like concurrent async HTTP requests, "
"without any issues, but you will not get the benefits of an async stack."
msgstr ""

msgid ""
"The main benefits are the ability to service hundreds of connections without "
"using Python threads. This allows you to use slow streaming, long-polling, "
"and other exciting response types."
msgstr ""

msgid ""
"If you want to use these, you will need to deploy Django using :doc:`ASGI </"
"howto/deployment/asgi/index>` instead."
msgstr ""
"Jika anda ingin menggunakan ini, anda akan butuh mengembangkan Django "
"menggunakan :doc:`ASGI </howto/deployment/asgi/index>` instead."

msgid ""
"You will only get the benefits of a fully-asynchronous request stack if you "
"have *no synchronous middleware* loaded into your site. If there is a piece "
"of synchronous middleware, then Django must use a thread per request to "
"safely emulate a synchronous environment for it."
msgstr ""

msgid ""
"Middleware can be built to support :ref:`both sync and async <async-"
"middleware>` contexts. Some of Django's middleware is built like this, but "
"not all. To see what middleware Django has to adapt, you can turn on debug "
"logging for the ``django.request`` logger and look for log messages about *"
"\"Synchronous middleware ... adapted\"*."
msgstr ""

msgid ""
"In both ASGI and WSGI mode, you can still safely use asynchronous support to "
"run code concurrently rather than serially. This is especially handy when "
"dealing with external APIs or data stores."
msgstr ""

msgid ""
"If you want to call a part of Django that is still synchronous, like the "
"ORM, you will need to wrap it in a :func:`sync_to_async` call. For example::"
msgstr ""
"Jika anda ingin memanggil sebagian Django yang masih sinkron, seperti ORM, "
"anda akan butuh membungkusnya dalam panggilan :func:`sync_to_async`. Sebagai "
"contoh::"

msgid ""
"You may find it easier to move any ORM code into its own function and call "
"that entire function using :func:`sync_to_async`. For example::"
msgstr ""
"Anda mungkin menemukannya lebih mudah memindahkan kode ORM apapun kedalam "
"fungsinya dan memanggil keseluruhan fungsi itu menggunakan :func:"
"`sync_to_async`. Sebagai contoh::"

msgid ""
"If you accidentally try to call a part of Django that is still synchronous-"
"only from an async view, you will trigger Django's :ref:`asynchronous safety "
"protection <async-safety>` to protect your data from corruption."
msgstr ""

msgid "Performance"
msgstr "Penampilan"

msgid ""
"When running in a mode that does not match the view (e.g. an async view "
"under WSGI, or a traditional sync view under ASGI), Django must emulate the "
"other call style to allow your code to run. This context-switch causes a "
"small performance penalty of around a millisecond."
msgstr ""

msgid ""
"This is also true of middleware. Django will attempt to minimize the number "
"of context-switches between sync and async. If you have an ASGI server, but "
"all your middleware and views are synchronous, it will switch just once, "
"before it enters the middleware stack."
msgstr ""

msgid ""
"However, if you put synchronous middleware between an ASGI server and an "
"asynchronous view, it will have to switch into sync mode for the middleware "
"and then back to async mode for the view. Django will also hold the sync "
"thread open for middleware exception propagation. This may not be noticeable "
"at first, but adding this penalty of one thread per request can remove any "
"async performance advantage."
msgstr ""

msgid ""
"You should do your own performance testing to see what effect ASGI versus "
"WSGI has on your code. In some cases, there may be a performance increase "
"even for a purely synchronous codebase under ASGI because the request-"
"handling code is still all running asynchronously. In general you will only "
"want to enable ASGI mode if you have asynchronous code in your project."
msgstr ""

msgid "Async safety"
msgstr "Keamanan asinkronus"

msgid ""
"Certain key parts of Django are not able to operate safely in an async "
"environment, as they have global state that is not coroutine-aware. These "
"parts of Django are classified as \"async-unsafe\", and are protected from "
"execution in an async environment. The ORM is the main example, but there "
"are other parts that are also protected in this way."
msgstr ""

msgid ""
"If you try to run any of these parts from a thread where there is a *running "
"event loop*, you will get a :exc:`~django.core.exceptions."
"SynchronousOnlyOperation` error. Note that you don't have to be inside an "
"async function directly to have this error occur. If you have called a sync "
"function directly from an async function, without using :func:"
"`sync_to_async` or similar, then it can also occur. This is because your "
"code is still running in a thread with an active event loop, even though it "
"may not be declared as async code."
msgstr ""

msgid ""
"If you encounter this error, you should fix your code to not call the "
"offending code from an async context. Instead, write your code that talks to "
"async-unsafe functions in its own, sync function, and call that using :func:"
"`asgiref.sync.sync_to_async` (or any other way of running sync code in its "
"own thread)."
msgstr ""

msgid ""
"The async context can be imposed upon you by the environment in which you "
"are running your Django code. For example, Jupyter_ notebooks and IPython_ "
"interactive shells both transparently provide an active event loop so that "
"it is easier to interact with asynchronous APIs."
msgstr ""

msgid ""
"If you're using an IPython shell, you can disable this event loop by "
"running::"
msgstr ""

msgid ""
"as a command at the IPython prompt. This will allow you to run synchronous "
"code without generating :exc:`~django.core.exceptions."
"SynchronousOnlyOperation` errors; however, you also won't be able to "
"``await`` asynchronous APIs. To turn the event loop back on, run::"
msgstr ""

msgid ""
"If you're in an environment other than IPython (or you can't turn off "
"``autoawait`` in IPython for some reason), you are *certain* there is no "
"chance of your code being run concurrently, and you *absolutely* need to run "
"your sync code from an async context, then you can disable the warning by "
"setting the :envvar:`DJANGO_ALLOW_ASYNC_UNSAFE` environment variable to any "
"value."
msgstr ""

msgid ""
"If you enable this option and there is concurrent access to the async-unsafe "
"parts of Django, you may suffer data loss or corruption. Be very careful and "
"do not use this in production environments."
msgstr ""

msgid ""
"If you need to do this from within Python, do that with ``os.environ``::"
msgstr ""
"Jika anda buth melakukan ini dari dalam Python, lakukan dengan ``os."
"environ``::"

msgid "Async adapter functions"
msgstr "fungsi  adaptasi asingkronus"

msgid ""
"It is necessary to adapt the calling style when calling sync code from an "
"async context, or vice-versa. For this there are two adapter functions, from "
"the ``asgiref.sync`` module: :func:`async_to_sync` and :func:"
"`sync_to_async`. They are used to transition between the calling styles "
"while preserving compatibility."
msgstr ""

msgid ""
"These adapter functions are widely used in Django. The `asgiref`_ package "
"itself is part of the Django project, and it is automatically installed as a "
"dependency when you install Django with ``pip``."
msgstr ""

msgid "``async_to_sync()``"
msgstr "``async_to_sync()``"

msgid ""
"Takes an async function and returns a sync function that wraps it. Can be "
"used as either a direct wrapper or a decorator::"
msgstr ""

msgid ""
"The async function is run in the event loop for the current thread, if one "
"is present. If there is no current event loop, a new event loop is spun up "
"specifically for the single async invocation and shut down again once it "
"completes. In either situation, the async function will execute on a "
"different thread to the calling code."
msgstr ""

msgid ""
"Threadlocals and contextvars values are preserved across the boundary in "
"both directions."
msgstr ""

msgid ""
":func:`async_to_sync` is essentially a more powerful version of the :py:func:"
"`asyncio.run` function in Python's standard library. As well as ensuring "
"threadlocals work, it also enables the ``thread_sensitive`` mode of :func:"
"`sync_to_async` when that wrapper is used below it."
msgstr ""

msgid "``sync_to_async()``"
msgstr "``sync_to_async()``"

msgid ""
"Takes a sync function and returns an async function that wraps it. Can be "
"used as either a direct wrapper or a decorator::"
msgstr ""

msgid ""
"Sync functions tend to be written assuming they all run in the main thread, "
"so :func:`sync_to_async` has two threading modes:"
msgstr ""

msgid ""
"``thread_sensitive=True`` (the default): the sync function will run in the "
"same thread as all other ``thread_sensitive`` functions. This will be the "
"main thread, if the main thread is synchronous and you are using the :func:"
"`async_to_sync` wrapper."
msgstr ""

msgid ""
"``thread_sensitive=False``: the sync function will run in a brand new thread "
"which is then closed once the invocation completes."
msgstr ""

msgid ""
"``asgiref`` version 3.3.0 changed the default value of the "
"``thread_sensitive`` parameter to ``True``. This is a safer default, and in "
"many cases interacting with Django the correct value, but be sure to "
"evaluate uses of ``sync_to_async()`` if updating ``asgiref`` from a prior "
"version."
msgstr ""

msgid ""
"Thread-sensitive mode is quite special, and does a lot of work to run all "
"functions in the same thread. Note, though, that it *relies on usage of* :"
"func:`async_to_sync` *above it in the stack* to correctly run things on the "
"main thread. If you use ``asyncio.run()`` or similar, it will fall back to "
"running thread-sensitive functions in a single, shared thread, but this will "
"not be the main thread."
msgstr ""

msgid ""
"The reason this is needed in Django is that many libraries, specifically "
"database adapters, require that they are accessed in the same thread that "
"they were created in. Also a lot of existing Django code assumes it all runs "
"in the same thread, e.g. middleware adding things to a request for later use "
"in views."
msgstr ""

msgid ""
"Rather than introduce potential compatibility issues with this code, we "
"instead opted to add this mode so that all existing Django sync code runs in "
"the same thread and thus is fully compatible with async mode. Note that sync "
"code will always be in a *different* thread to any async code that is "
"calling it, so you should avoid passing raw database handles or other thread-"
"sensitive references around."
msgstr ""

msgid ""
"In practice this restriction means that you should not pass features of the "
"database ``connection`` object when calling ``sync_to_async()``. Doing so "
"will trigger the thread safety checks:"
msgstr ""

msgid ""
"Rather, you should encapsulate all database access within a helper function "
"that can be called with ``sync_to_async()`` without relying on the "
"connection object in the calling code."
msgstr ""

msgid "Customizing authentication in Django"
msgstr "Mengkostumisasi autentikasi di Django"

msgid ""
"The authentication that comes with Django is good enough for most common "
"cases, but you may have needs not met by the out-of-the-box defaults. "
"Customizing authentication in your projects requires understanding what "
"points of the provided system are extensible or replaceable. This document "
"provides details about how the auth system can be customized."
msgstr ""
"Autentikasi yang telah disediakan Django sudah cukup baik untuk kasus-kasus "
"pada umumnya, tetapi Anda mungkin memiliki kebutuhan yang tidak dipenuhi "
"oleh fitur bawaan. Mengkostumisasi otentikasi pada proyek-proyek anda "
"membutuhkan pengertian atas bagian-bagian tersedia yang dapat diturunkan "
"atau diubah. Dokumen ini menyediakan detil tentang bagaimana sitem "
"otentikasi dapat dikostumisasi."

msgid ""
":ref:`Authentication backends <authentication-backends>` provide an "
"extensible system for when a username and password stored with the user "
"model need to be authenticated against a different service than Django's "
"default."
msgstr ""
":ref:`Authentication backends <authentication-backends>` menyediakan sebuah "
"sistem yang dapat diperpanjang untuk ketika nama pengguna dan sandi disimpan "
"dengan model pengguna butuh untuk diotentifikasi terhadap layanan berbeda "
"dari awalan Django."

msgid ""
"You can give your models :ref:`custom permissions <custom-permissions>` that "
"can be checked through Django's authorization system."
msgstr ""
"Anda dapat memberikan model anda perizinan :ref:`custom permissions <custom-"
"permissions>` yang dapat diperiksa melalui sistem otorisasi Django."

msgid ""
"You can :ref:`extend <extending-user>` the default ``User`` model, or :ref:"
"`substitute <auth-custom-user>` a completely customized model."
msgstr ""
"Anda dapat :ref:`extend <extending-user>` awalan model ``User``, atau :ref:"
"`substitute <auth-custom-user>` sepenuhnya model disesuaikan."

msgid "Other authentication sources"
msgstr "Sumber pembuktian keaslian lain"

msgid ""
"There may be times you have the need to hook into another authentication "
"source -- that is, another source of usernames and passwords or "
"authentication methods."
msgstr ""
"Mungkin ada kali anda harus butuh mengait ke dalam sumber pembuktian "
"keaslian lain -- yaitu, sumber lain dari nama pengguna dan sandi atau metode "
"pembuktian keaslian."

msgid ""
"For example, your company may already have an LDAP setup that stores a "
"username and password for every employee. It'd be a hassle for both the "
"network administrator and the users themselves if users had separate "
"accounts in LDAP and the Django-based applications."
msgstr ""
"Sebagai contoh, perusahaan anda mungkin sudah mempunyai pengaturan LDAP yang "
"menyimpan nama pengguna dan sandi untuk setiap karyawan. Itu akan menjadi "
"cekcok untuk kedua administrator jaringan dan pengguna nya sendiri jika "
"pengguna mempunyai akun terpisah di LDAP dan aplikasi berbasis-Django."

msgid ""
"So, to handle situations like this, the Django authentication system lets "
"you plug in other authentication sources. You can override Django's default "
"database-based scheme, or you can use the default system in tandem with "
"other systems."
msgstr ""
"Jadi, untuk menangani keadaan seperti ini, sistem pembuktian keaslian Django "
"membiarkan anda memasang sumber pembuktian keaslian lain. Anda dapat menimpa "
"skema berbasis-basisdata awal Django, atau anda dapat menggunakan sistem "
"awal untuk dipasangkan dengan sistem lain."

msgid ""
"See the :ref:`authentication backend reference <authentication-backends-"
"reference>` for information on the authentication backends included with "
"Django."
msgstr ""
"Lihat :ref:`authentication backend reference <authentication-backends-"
"reference>` untuk informasi pada backend otentifikasi yang disertakan dengan "
"Django."

msgid "Specifying authentication backends"
msgstr "Menentukan backend pembuktian keaslian"

msgid ""
"Behind the scenes, Django maintains a list of \"authentication backends\" "
"that it checks for authentication. When somebody calls :func:`django.contrib."
"auth.authenticate()` -- as described in :ref:`How to log a user in <how-to-"
"log-a-user-in>` -- Django tries authenticating across all of its "
"authentication backends. If the first authentication method fails, Django "
"tries the second one, and so on, until all backends have been attempted."
msgstr ""
"Dibelakang layar, Django merawat daftar \"backend pembuktian keaslian\" yang "
"dia periksa untuk pembuktian keaslian. Ketika seseorang memanggil :func:"
"`django.contrib.auth.authenticate()` -- seperti digambarkan di :ref:`How to "
"log a user in <how-to-log-a-user-in>` -- Django mencoba membuktikan keaslian "
"disemua bakcend pembuktian keaslian itu. Jika metode pembuktian keaslian "
"pertama gagal, Django mencoba yang kedua, dan selanjutnya, sampai semua "
"backend telah dicoba."

msgid ""
"The list of authentication backends to use is specified in the :setting:"
"`AUTHENTICATION_BACKENDS` setting. This should be a list of Python path "
"names that point to Python classes that know how to authenticate. These "
"classes can be anywhere on your Python path."
msgstr ""
"Daftar backend pembuktian keaslian untuk digunakan ditentukan dalam "
"pengaturan :setting:`AUTHENTICATION_BACKENDS`. Ini seharusnya daftar nama "
"jalur Python yang menunjuk ke kelas Python yang mengetahui bagaimana "
"membuktikan keaslian. Kelas ini dapat berada dimanapun di jalur Python anda."

msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr "Secara awal, :setting:`AUTHENTICATION_BACKENDS` disetel ke::"

msgid ""
"That's the basic authentication backend that checks the Django users "
"database and queries the built-in permissions. It does not provide "
"protection against brute force attacks via any rate limiting mechanism. You "
"may either implement your own rate limiting mechanism in a custom auth "
"backend, or use the mechanisms provided by most web servers."
msgstr ""

msgid ""
"The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same "
"username and password is valid in multiple backends, Django will stop "
"processing at the first positive match."
msgstr ""
"Urutan masalah :setting:`AUTHENTICATION_BACKENDS`, jadi jika nama pengguna "
"dan sandi sama adalah sah di banyak backend, Django akan menghentikan "
"pengolahan pada pertama yang positif cocok."

msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception, authentication will immediately fail. Django won't check the "
"backends that follow."
msgstr ""
"Jika backend memunculkan pengecualian :class:`~django.core.exceptions."
"PermissionDenied`, pembuktian keaslian akan segera gagal. Django tidak akan "
"memeriksa backend yang mengikuti."

msgid ""
"Once a user has authenticated, Django stores which backend was used to "
"authenticate the user in the user's session, and re-uses the same backend "
"for the duration of that session whenever access to the currently "
"authenticated user is needed. This effectively means that authentication "
"sources are cached on a per-session basis, so if you change :setting:"
"`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if you need "
"to force users to re-authenticate using different methods. A simple way to "
"do that is to execute ``Session.objects.all().delete()``."
msgstr ""

msgid "Writing an authentication backend"
msgstr "Menulis backend pembuktian keaslian"

msgid ""
"An authentication backend is a class that implements two required methods: "
"``get_user(user_id)`` and ``authenticate(request, **credentials)``, as well "
"as a set of optional permission related :ref:`authorization methods "
"<authorization_methods>`."
msgstr ""
"Sebuah backend autentifikasi adalah sebuah kelas yang menerapkan dua metode "
"wajib: ``get_user(user_id)`` dan ``authenticate(request, **credentials)``, "
"dan juga kumpulan dari pilihan perizinan terhubung :ref:`authorization "
"methods <authorization_methods>`."

msgid ""
"The ``get_user`` method takes a ``user_id`` -- which could be a username, "
"database ID or whatever, but has to be the primary key of your user object "
"-- and returns a user object or ``None``."
msgstr ""

msgid ""
"The ``authenticate`` method takes a ``request`` argument and credentials as "
"keyword arguments. Most of the time, it'll look like this::"
msgstr ""
"Metode ``authenticate`` mengambil sebuah argumen ``request`` dan surat "
"pengenal sebagai argumen kata kunci. Sebagian besar waktu, akan terlihat "
"seperti ini ::"

msgid "But it could also authenticate a token, like so::"
msgstr ""
"Tetapi itu dapat juga membuktikan keaslian sebuah token, seperti begitu::"

msgid ""
"Either way, ``authenticate()`` should check the credentials it gets and "
"return a user object that matches those credentials if the credentials are "
"valid. If they're not valid, it should return ``None``."
msgstr ""
"Salah satu cara, ``authenticate()`` harus memeriksa mandat yang dia "
"dapatkan, dan dia harus mengembalikan obyek user yang cocok dengan mandat, "
"jika mandat sah. Jika mereka tidak sah, dia harus mengembalikan ``None``."

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` and may be ``None`` if "
"it wasn't provided to :func:`~django.contrib.auth.authenticate` (which "
"passes it on to the backend)."
msgstr ""
"``request`` adalah sebuah :class:`~django.http.HttpRequest` dan mungkin "
"berupa ``None`` jika itu tidak disediakan pada :func:`~django.contrib.auth."
"authenticate` (yang melewatkan itu ke backend)."

msgid ""
"The Django admin is tightly coupled to the Django :ref:`User object <user-"
"objects>`. The best way to deal with this is to create a Django ``User`` "
"object for each user that exists for your backend (e.g., in your LDAP "
"directory, your external SQL database, etc.) You can either write a script "
"to do this in advance, or your ``authenticate`` method can do it the first "
"time a user logs in."
msgstr ""
"Admin Django erat ke Django :ref:`User object <user-objects>`. Cara terbaik "
"berurusan dengna ini adalah membuat obyek ``user`` Django untuk setiap "
"pengguna yang ada untuk backend anda (sebagai contoh dalam direktori LDAP, "
"basisdata SQL eksternal anda, dll.) Anda dapat salah satu menulis tulisan "
"untuk melakukannya terlebih dahulu, atau metode ``authenticate`` anda dapat "
"melakukannya pertama kali pengguna masuk."

msgid ""
"Here's an example backend that authenticates against a username and password "
"variable defined in your ``settings.py`` file and creates a Django ``User`` "
"object the first time a user authenticates::"
msgstr ""
"Ini adalah sebuah contoh yang membuktikan keaslian variabel terhdap nama "
"pengguna dan sandi ditentukan dalam berkas ``settings.py`` anda dan membuat "
"sebuah obyek ``User`` Django pertama kali pengguna dibuktikan keaslian:"

msgid "Handling authorization in custom backends"
msgstr "Menangani otorisasi dalam backend penyesuaian"

msgid "Custom auth backends can provide their own permissions."
msgstr "Penyesuaian backend sah dapat menyediakan perizinan mereka sendiri."

msgid ""
"The user model and its manager will delegate permission lookup functions (:"
"meth:`~django.contrib.auth.models.User.get_user_permissions()`, :meth:"
"`~django.contrib.auth.models.User.get_group_permissions()`, :meth:`~django."
"contrib.auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth."
"models.User.has_perm()`, :meth:`~django.contrib.auth.models.User."
"has_module_perms()`, and :meth:`~django.contrib.auth.models.UserManager."
"with_perm()`) to any authentication backend that implements these functions."
msgstr ""
"Model pengguna dan pengelolanya akan melimpahkan fungsi pencarian perizinan "
"(:meth:`~django.contrib.auth.models.User.get_user_permissions()`, :meth:"
"`~django.contrib.auth.models.User.get_group_permissions()`, :meth:`~django."
"contrib.auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth."
"models.User.has_perm()`, :meth:`~django.contrib.auth.models.User."
"has_module_perms()`, dan :meth:`~django.contrib.auth.models.UserManager."
"with_perm()`) ke backend autentikasi apapun yang menerapkan fungsi ini."

msgid ""
"The permissions given to the user will be the superset of all permissions "
"returned by all backends. That is, Django grants a permission to a user that "
"any one backend grants."
msgstr ""
"Perizinan diberikan ke pengguna akan menjadi duperset dari semua perizinan "
"dikembalikan oleh semua backend. Yaitu, Django menghadiahkan sebuah "
"perizinan kepada pengguna bahwa tiap satu hadiah backend."

msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception in :meth:`~django.contrib.auth.models.User.has_perm()` or :meth:"
"`~django.contrib.auth.models.User.has_module_perms()`, the authorization "
"will immediately fail and Django won't check the backends that follow."
msgstr ""
"Jika backend memunculkan pengecualian :class:`~django.core.exceptions."
"PermissionDenied` di :meth:`~django.contrib.auth.models.User.has_perm()` "
"atau :meth:`~django.contrib.auth.models.User.has_module_perms()`, otorisasi "
"akan segera gagal dan Django tidak akan memeriksa backend yang mengikutinya."

msgid "A backend could implement permissions for the magic admin like this::"
msgstr ""
"Sebuah backend dapat menerapkan perizinan untuk admin sakti seperti ini::"

msgid ""
"This gives full permissions to the user granted access in the above example. "
"Notice that in addition to the same arguments given to the associated :class:"
"`django.contrib.auth.models.User` functions, the backend auth functions all "
"take the user object, which may be an anonymous user, as an argument."
msgstr ""
"Ini memberikan perizinan penuh kepada pengguna yang diberikan akses di "
"contoh diatas. Perhatikan bahwa di penambahan ke argumen sama diberikan ke "
"fungsi :class:`django.contrib.auth.models.User` terkait, fungsi pembuktian "
"keaslian backend semua mengambil obyek pengguna, yang mungkin menjadi "
"pengguna anonim, sebagai sebuah argumen."

msgid ""
"A full authorization implementation can be found in the ``ModelBackend`` "
"class in :source:`django/contrib/auth/backends.py`, which is the default "
"backend and queries the ``auth_permission`` table most of the time."
msgstr ""

msgid "Authorization for anonymous users"
msgstr "Otorisasi untuk pengguna anonim"

msgid ""
"An anonymous user is one that is not authenticated i.e. they have provided "
"no valid authentication details. However, that does not necessarily mean "
"they are not authorized to do anything. At the most basic level, most "
"websites authorize anonymous users to browse most of the site, and many "
"allow anonymous posting of comments etc."
msgstr ""
"Sebuah pengguna anonim adalah satu yang tidak dibuktikan keaslian yaitu "
"mereka menyediakan rincian pembuktian keaslian yang tidak sah. Bagaimanapun, "
"itu tidak dibutuhkan berarti mereka tidak diotorisasikan melakukan apapun. "
"Pada kebanyakan tingkatan dasar, kebanyakan situs jaringan mengotorisasi "
"pengguna anonim untuk menjelajahi kebanyakan situs, dan banyak mengizinkan "
"pengguna memasang komentar dll."

msgid ""
"Django's permission framework does not have a place to store permissions for "
"anonymous users. However, the user object passed to an authentication "
"backend may be an :class:`django.contrib.auth.models.AnonymousUser` object, "
"allowing the backend to specify custom authorization behavior for anonymous "
"users. This is especially useful for the authors of re-usable apps, who can "
"delegate all questions of authorization to the auth backend, rather than "
"needing settings, for example, to control anonymous access."
msgstr ""
"Kerangka perizinan Django tidak mempunyai tempat untuk menyimpan perizinan "
"untuk pengguna anonim. Bagaimanapun, obyek pengguna melewati backend "
"pembuktian keaslian mungkin obyek :class:`django.contrib.auth.models."
"AnonymousUser`, mengizinkan backend untuk menentukan kebiasaan otorisasi "
"penyesuaian untuk pengguna anonim. Ini khususnya berguna untuk penulis dari "
"aplikasi digunakan kembali, yang dapat menugaskan semua pertanyaan dan "
"otorisasi ke backend pembuktian keaslian, daripada membutuhkan pengaturan, "
"sebagai contoh, untuk mengendalikan akses anonim."

msgid "Authorization for inactive users"
msgstr "Otorisasi untuk pengguna tidak aktif"

msgid ""
"An inactive user is one that has its :attr:`~django.contrib.auth.models.User."
"is_active` field set to ``False``. The :class:`~django.contrib.auth.backends."
"ModelBackend` and :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"authentication backends prohibits these users from authenticating. If a "
"custom user model doesn't have an :attr:`~django.contrib.auth.models."
"CustomUser.is_active` field, all users will be allowed to authenticate."
msgstr ""
"Seorang pengguna tidak aktif adalah satu yang mempunyai bidang :attr:"
"`~django.contrib.auth.models.User.is_active` nya disetel menjadi ``False``. "
"Backend otentifikasi :class:`~django.contrib.auth.backends.ModelBackend` "
"dan :class:`~django.contrib.auth.backends.RemoteUserBackend` melarang "
"pengguna ini dari otentifikasi. Jika model pengguna penyesuaian tidak "
"mempunyai bidang :attr:`~django.contrib.auth.models.CustomUser.is_active`, "
"semua pengguna akan diizinkan untuk otentifikasi."

msgid ""
"You can use :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` "
"or :class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` if "
"you want to allow inactive users to authenticate."
msgstr ""
"Anda dapat menggunakan :class:`~django.contrib.auth.backends."
"AllowAllUsersModelBackend` atau :class:`~django.contrib.auth.backends."
"AllowAllUsersRemoteUserBackend` jika anda ingin mengizinkan pengguna tidak "
"aktif untuk diotentifikasi."

msgid ""
"The support for anonymous users in the permission system allows for a "
"scenario where anonymous users have permissions to do something while "
"inactive authenticated users do not."
msgstr ""
"Dukungan untuk pengguna anonim di sistem perizinan mengizinkan untuk sebuah "
"skenaria dimana pengguna anonim mempunyai perizinan untuk melakukan sesuatu "
"selama pengguna dibuktikan keaslian tidak aktif tidak. "

msgid ""
"Do not forget to test for the ``is_active`` attribute of the user in your "
"own backend permission methods."
msgstr ""
"Jangan lupa untuk mencoba untuk atribut ``is_active`` dari pengguna di cara "
"perizinan backend anda sendiri."

msgid "Handling object permissions"
msgstr "Penanganan perizinan obyek"

msgid ""
"Django's permission framework has a foundation for object permissions, "
"though there is no implementation for it in the core. That means that "
"checking for object permissions will always return ``False`` or an empty "
"list (depending on the check performed). An authentication backend will "
"receive the keyword parameters ``obj`` and ``user_obj`` for each object "
"related authorization method and can return the object level permission as "
"appropriate."
msgstr ""
"Kerangka perizinan Django mempunyai sebuahyayasan untuk perizinan obyek, "
"meskipun tidak ada penerapa untuknya didalam inti. Hal ini berarti bahwa "
"memeriksa untuk perizinan obyek akan selalu mengembalikan ``False`` atau "
"daftar kosong (tergantung pada penampilan pemeriksaan). Sebuah backend "
"pembuktian keaslian akan menerima parameter katakunci ``obj`` dan "
"``user_obj`` untuk setiap obyek terkait cara otorisasi dan dapat "
"mengembalikan tingkat perizinan obyek sewajarnya."

msgid "Custom permissions"
msgstr "Penyesuaian perizinan"

msgid ""
"To create custom permissions for a given model object, use the "
"``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""
"Untuk membuat perizinan penyesuaian untuk obyek model yang diberikan, "
"gunakan  ``permissions`` :ref:`model Meta attribute <meta-options>`."

msgid ""
"This example ``Task`` model creates two custom permissions, i.e., actions "
"users can or cannot do with ``Task`` instances, specific to your "
"application::"
msgstr ""
"Contoh ini model ``Task`` membuat dua penyesuaian perizinan, yaitu, tindakan "
"pengguna dapat atau tidak dapat dengan contoh-contoh ``Task``, khusus ke "
"aplikasi anda::"

msgid ""
"The only thing this does is create those extra permissions when you run :"
"djadmin:`manage.py migrate <migrate>` (the function that creates permissions "
"is connected to the :data:`~django.db.models.signals.post_migrate` signal). "
"Your code is in charge of checking the value of these permissions when a "
"user is trying to access the functionality provided by the application "
"(changing the status of tasks or closing tasks.) Continuing the above "
"example, the following checks if a user may close tasks::"
msgstr ""

msgid "Extending the existing ``User`` model"
msgstr "Memperpanjang model ``User`` yang ada"

msgid ""
"There are two ways to extend the default :class:`~django.contrib.auth.models."
"User` model without substituting your own model. If the changes you need are "
"purely behavioral, and don't require any change to what is stored in the "
"database, you can create a :ref:`proxy model <proxy-models>` based on :class:"
"`~django.contrib.auth.models.User`. This allows for any of the features "
"offered by proxy models including default ordering, custom managers, or "
"custom model methods."
msgstr ""
"Terdapat dua jalan untuk memperpanjang model :class:`~django.contrib.auth."
"models.User` awal tanpa mengganti model milik anda. Jika perubahan anda "
"butuhkan murni kebiasaan, dan tidak membutuhkan perubahan apapun ke apa ang "
"disimpan di basisdata, anda dapat membuat :ref:`proxy model <proxy-models>` "
"berdasarkan pada :class:`~django.contrib.auth.models.User`. Ini mengizinkan "
"fitur apapun ditawarkan oleh model proxy termasuk pemesanan awal, pengelola "
"penyesuaian, atau cara model penyesuaian."

msgid ""
"If you wish to store information related to ``User``, you can use a :class:"
"`~django.db.models.OneToOneField` to a model containing the fields for "
"additional information. This one-to-one model is often called a profile "
"model, as it might store non-auth related information about a site user. For "
"example you might create an Employee model::"
msgstr ""
"Jika anda berharap menyimpan informasi terkait ke ``User``, anda dapat "
"menggunakan :class:`~django.db.models.OneToOneField` pada sebuah model "
"mengandung bidang untuk informasi tambahan. Ini model satu-ke-satu selalu "
"memanggil model profil, karena dia akan menyimpan informasi terkait bukan-"
"asli tentang pengguna situs. Sebagai contoh anda mungkin membuat sebuah "
"model Employee::"

msgid ""
"Assuming an existing Employee Fred Smith who has both a User and Employee "
"model, you can access the related information using Django's standard "
"related model conventions::"
msgstr ""
"Mengganggap Pegawai Fred Smith yang ada yang mempunyai kedua model User dan "
"Employee, anda dapat mengakses informasi terkait menggunakan standar Django "
"ketentuan model terkait::"

msgid ""
"To add a profile model's fields to the user page in the admin, define an :"
"class:`~django.contrib.admin.InlineModelAdmin` (for this example, we'll use "
"a :class:`~django.contrib.admin.StackedInline`) in your app's ``admin.py`` "
"and add it to a ``UserAdmin`` class which is registered with the :class:"
"`~django.contrib.auth.models.User` class::"
msgstr ""
"Untuk menambahkan profil bidang model ke halaman pengguna dalam admin, "
"tentukan sebuah class:`~django.contrib.admin.InlineModelAdmin` (untuk contoh "
"ini, kami akan menggunakan :class:`~django.contrib.admin.StackedInline`) di "
"``admin.py`` aplikasi anda dan menambahkannya ke kelas ``UserAdmin`` yang "
"terdaftar dengan kelas :class:`~django.contrib.auth.models.User`::"

msgid ""
"These profile models are not special in any way - they are just Django "
"models that happen to have a one-to-one link with a user model. As such, "
"they aren't auto created when a user is created, but a :attr:`django.db."
"models.signals.post_save` could be used to create or update related models "
"as appropriate."
msgstr ""
"Model profil ini tidak khusus dengan cara apapun - mereka hanya model Django "
"yang terjadi untuk memiliki tautan one-to-one dengan model user. Dengan "
"demikian, mereka tidak dibuat otomatis ketika pengguna dibuat, tetapi :attr:"
"`django.db.models.signals.post_save` dapat digunakan untuk membuat atau "
"memperbaharui model sewajarnya."

msgid ""
"Using related models results in additional queries or joins to retrieve the "
"related data. Depending on your needs, a custom user model that includes the "
"related fields may be your better option, however, existing relations to the "
"default user model within your project's apps may justify the extra database "
"load."
msgstr ""
"menggunakan hasil model terkait di tambahan permintaan atau penggabungan "
"untuk mendapatkan data terkait. Tergantung pada kebutuhan anda, penyesuaian "
"model user yang menyertakan bidang terkait mungkin pilihan terbaik anda, "
"bagaimanapun hubungan yang ada pada model user awalan dalam aplikasi proyek "
"anda mungkin membenarkan muatan basisdata lebih."

msgid "Substituting a custom ``User`` model"
msgstr "Mengganti model ``User`` penyesuaian"

msgid ""
"Some kinds of projects may have authentication requirements for which "
"Django's built-in :class:`~django.contrib.auth.models.User` model is not "
"always appropriate. For instance, on some sites it makes more sense to use "
"an email address as your identification token instead of a username."
msgstr ""
"Beberapa macam proyek mungkin mempunyai persyaratan pembuktian keaslian "
"untuk dimana model :class:`~django.contrib.auth.models.User` siap-pakai "
"Django tidak selalu sesuai. Sebagai contoh, pada beberapa situs akan masuk "
"akal menggunakan sebuah alamat surel sebagai token pencirian daripada nama "
"pengguna."

msgid ""
"Django allows you to override the default user model by providing a value "
"for the :setting:`AUTH_USER_MODEL` setting that references a custom model::"
msgstr ""
"Django mengizinkan anda untuk menimpa model pengguna awalan dengan "
"menyediakan nilai untuk pengaturan :setting:`AUTH_USER_MODEL` yang mengacu "
"model penyesuaian::"

msgid ""
"This dotted pair describes the :attr:`~django.apps.AppConfig.label` of the "
"Django app (which must be in your :setting:`INSTALLED_APPS`), and the name "
"of the Django model that you wish to use as your user model."
msgstr ""

msgid "Using a custom user model when starting a project"
msgstr "Menggunakan model pengguna penyesuaian ketika memulai sebuah proyek"

msgid ""
"If you're starting a new project, it's highly recommended to set up a custom "
"user model, even if the default :class:`~django.contrib.auth.models.User` "
"model is sufficient for you. This model behaves identically to the default "
"user model, but you'll be able to customize it in the future if the need "
"arises::"
msgstr ""
"Jika anda sedang memulai proyek baru, sangat dianjurkan mengatur penyesuaian "
"model user, bahkan jika awalan model :class:`~django.contrib.auth.models."
"User` cukup untuk anda. Model kebiasaan ini mirip pada awalan model user, "
"tetapi anda akan dapat menyesuaikan nya di masa depan jika kebutuhan muncul::"

msgid ""
"Don't forget to point :setting:`AUTH_USER_MODEL` to it. Do this before "
"creating any migrations or running ``manage.py migrate`` for the first time."
msgstr ""
"Jangan lupa menunjuk :setting:`AUTH_USER_MODEL` ke itu. Lakukan ini sebelum "
"membuat perpindahan apapun atau menjalankan ``manage.py migrate`` untuk "
"pertama kalinya."

msgid "Also, register the model in the app's ``admin.py``::"
msgstr "Juga, daftar model dalam ``admin.py`` aplikasi::"

msgid "Changing to a custom user model mid-project"
msgstr "Merubah ke proyek-tengah penyesuaian model user"

msgid ""
"Changing :setting:`AUTH_USER_MODEL` after you've created database tables is "
"significantly more difficult since it affects foreign keys and many-to-many "
"relationships, for example."
msgstr ""
"Merubah :setting:`AUTH_USER_MODEL` setelah anda membuat tabel-tabel "
"basisdata adalah penting lebih sulit sejak itu mempengaruhi foreign key dan "
"hubungan many-to-many, sebagai contoh."

msgid ""
"This change can't be done automatically and requires manually fixing your "
"schema, moving your data from the old user table, and possibly manually "
"reapplying some migrations. See :ticket:`25313` for an outline of the steps."
msgstr ""
"Perubahan ini tidak dapat diselesaikan secara otomatis dan membutuhkan "
"perbaikan secara manual skema anda, memindahkan data anda dari tabel user "
"lama, dan kemungkinan secara manual memberlakukan kembali beberapa "
"perpindahan. Lihat :ticket:`25313` untuk ringkasan dari langkah-langkah."

msgid ""
"Due to limitations of Django's dynamic dependency feature for swappable "
"models, the model referenced by :setting:`AUTH_USER_MODEL` must be created "
"in the first migration of its app (usually called ``0001_initial``); "
"otherwise, you'll have dependency issues."
msgstr ""
"Karena pembatasan dari fitur ketergantungan dinamis Django untuk model-model "
"dapat ditukar, pengacuan model oleh :setting:`AUTH_USER_MODEL` harus dibuat "
"di perpindahan pertama dari aplikasinya (biasanya dipanggil "
"``0001_initial``); sebaliknya, anda akan mempunyai masalah ketergantungan."

msgid ""
"In addition, you may run into a ``CircularDependencyError`` when running "
"your migrations as Django won't be able to automatically break the "
"dependency loop due to the dynamic dependency. If you see this error, you "
"should break the loop by moving the models depended on by your user model "
"into a second migration. (You can try making two normal models that have a "
"``ForeignKey`` to each other and seeing how ``makemigrations`` resolves that "
"circular dependency if you want to see how it's usually done.)"
msgstr ""
"Sebagai tambahan, anda mungkin berjalan kedalam ``CircularDependencyError`` "
"ketika menjalankan perpindahan anda sebagai Django tidak akan dapat secara "
"otomatis memutus ketergantungan pada ketergantungan dinamis. Jika anda "
"melihat kesalahan ini, anda harus memutuskan perulangan dengan memindahkan "
"model bergantung pada model user anda kedalam perindahan kedua. (Anda dapat "
"mencoba membuat dua model biasa yang memiliki ``ForeignKey`` ke setiap "
"lainnya dan melihat bagaimana ``makemigrations`` mengatasi lingkaran "
"ketergantungan jika anda ingin melihat bagaimana itu biasanya diselesaikan.)"

msgid "Reusable apps and ``AUTH_USER_MODEL``"
msgstr "Aplikasi digunakan kembali ``AUTH_USER_MODEL``"

msgid ""
"Reusable apps shouldn't implement a custom user model. A project may use "
"many apps, and two reusable apps that implemented a custom user model "
"couldn't be used together. If you need to store per user information in your "
"app, use a :class:`~django.db.models.ForeignKey` or :class:`~django.db."
"models.OneToOneField` to ``settings.AUTH_USER_MODEL`` as described below."
msgstr ""
"Aplikasi dapat digunakan kembali tidak harus menerapkan penyesuaian model "
"user. Sebuah proyek mungkin menggunakan banyak aplikasi, dan dua aplikasi "
"dapat digunakan kembali yang menerapkan penyesuaian model user tidak dapat "
"digunakan bersama-sama. Jika anda butuh menyimpan per informasi pengguna di "
"aplikasi anda, gunakan :class:`~django.db.models.ForeignKey` atau :class:"
"`~django.db.models.OneToOneField` pada ``settings.AUTH_USER_MODEL`` seperti "
"yang digambarkan dibawah."

msgid "Referencing the ``User`` model"
msgstr "Mengacu model ``User``"

msgid ""
"If you reference :class:`~django.contrib.auth.models.User` directly (for "
"example, by referring to it in a foreign key), your code will not work in "
"projects where the :setting:`AUTH_USER_MODEL` setting has been changed to a "
"different user model."
msgstr ""
"Jika anda mengacu :class:`~django.contrib.auth.models.User` secara langsung "
"(sebagai contoh, dengan mengacu ke itu di foreign key), kode anda tidak akan "
"bekerja di proyek dimana pengaturan :setting:`AUTH_USER_MODEL` telah berubah "
"ke model user berbeda."

msgid ""
"Instead of referring to :class:`~django.contrib.auth.models.User` directly, "
"you should reference the user model using ``django.contrib.auth."
"get_user_model()``. This method will return the currently active user model "
"-- the custom user model if one is specified, or :class:`~django.contrib."
"auth.models.User` otherwise."
msgstr ""
"Daripada mengacu ke :class:`~django.contrib.auth.models.User` secara "
"langsung, anda harus mengacu modl user menggunakan ``django.contrib.auth."
"get_user_model()``. Metode ini akan mengembalikan model user aktif saat ini "
"-- penyesuaian model user jika satu adalah ditentukan, atau :class:`~django."
"contrib.auth.models.User` sebaliknya."

msgid ""
"When you define a foreign key or many-to-many relations to the user model, "
"you should specify the custom model using the :setting:`AUTH_USER_MODEL` "
"setting. For example::"
msgstr ""
"Ketika anda menentukan foreign key atau hubungan many-to-many pada model "
"pengguna, anda harus menentukan model penyesuaian menggunakan pengaturan :"
"setting:`AUTH_USER_MODEL`. Sebagai contoh::"

msgid ""
"When connecting to signals sent by the user model, you should specify the "
"custom model using the :setting:`AUTH_USER_MODEL` setting. For example::"
msgstr ""
"Ketika terhubung ke sinyal yang dikirim oleh model User. anda harus "
"menentukan penyesuaian model menggunakan pengaturan :setting:"
"`AUTH_USER_MODEL`. Sebagai contoh::"

msgid ""
"Generally speaking, it's easiest to refer to the user model with the :"
"setting:`AUTH_USER_MODEL` setting in code that's executed at import time, "
"however, it's also possible to call ``get_user_model()`` while Django is "
"importing models, so you could use ``models."
"ForeignKey(get_user_model(), ...)``."
msgstr ""
"Secara umum, itu paling mudah mengacu ke model user dengan pengaturan  :"
"setting:`AUTH_USER_MODEL`  dalam kode yang dijalankan pada waktu impor, "
"bagaimanapun, itu juga memungkinkan memanggil ``get_user_model()`` selagi "
"Django mengimpor model, jadi anda dapat menggunakan ``models."
"ForeignKey(get_user_model(), ...)``."

msgid ""
"If your app is tested with multiple user models, using "
"``@override_settings(AUTH_USER_MODEL=...)`` for example, and you cache the "
"result of ``get_user_model()`` in a module-level variable, you may need to "
"listen to the  :data:`~django.test.signals.setting_changed` signal to clear "
"the cache. For example::"
msgstr ""
"Jika aplikasi anda dicobakan dengan banyak model user, menggunakan "
"``@override_settings(AUTH_USER_MODEL=...)`` sebagai contoh, dan anda meng "
"cache hasil dari ``get_user_model()`` dalam sebuah variabel tingkat-"
"variabel, anda mungkin butuh mendengarkan pada sinyal :data:`~django.test."
"signals.setting_changed` untuk membersihkan cache. Sebagai contoh::"

msgid "Specifying a custom user model"
msgstr "Menentukan model pengguna penyesuaian"

msgid ""
"When you start your project with a custom user model, stop to consider if "
"this is the right choice for your project."
msgstr ""
"Ketika anda memulai proyek anda dengabn model user penyesuaian, hentikan "
"untuk mempertimbangkan jika ini pilihan tepat untuk proyek anda."

msgid ""
"Keeping all user related information in one model removes the need for "
"additional or more complex database queries to retrieve related models. On "
"the other hand, it may be more suitable to store app-specific user "
"information in a model that has a relation with your custom user model. That "
"allows each app to specify its own user data requirements without "
"potentially conflicting or breaking assumptions by other apps. It also means "
"that you would keep your user model as simple as possible, focused on "
"authentication, and following the minimum requirements Django expects custom "
"user models to meet."
msgstr ""

msgid ""
"If you use the default authentication backend, then your model must have a "
"single unique field that can be used for identification purposes. This can "
"be a username, an email address, or any other unique attribute. A non-unique "
"username field is allowed if you use a custom authentication backend that "
"can support it."
msgstr ""
"Jika anda menggunakan backend pembuktian keaslian awal, kemudian model anda "
"harus mempunyai bidang unik tunggal yang dapat digunakan untuk tujuan "
"pencirian. Ini dapat berupa nama pengguna, sebuah alamat surel, atau atribut "
"unik lainnya. Bidang nama pengguna tidak unik diizinkan jika anda "
"menggunakan penyesuaian backend pembuktian keaslian yang dapat mendukungnya."

msgid ""
"The easiest way to construct a compliant custom user model is to inherit "
"from :class:`~django.contrib.auth.models.AbstractBaseUser`. :class:`~django."
"contrib.auth.models.AbstractBaseUser` provides the core implementation of a "
"user model, including hashed passwords and tokenized password resets. You "
"must then provide some key implementation details:"
msgstr ""
"Cara termudah untuk membangun selalu tunduk penyesuaian model user adalah "
"mewarisi dari :class:`~django.contrib.auth.models.AbstractBaseUser`. :class:"
"`~django.contrib.auth.models.AbstractBaseUser` menyediakan inti penerapan "
"dari model user, termasuk sandi bercampur dan setel kembali sandi token. "
"Anda harus kemudian menyediakan beberapa kunci penerapan rincian:"

msgid ""
"A string describing the name of the field on the user model that is used as "
"the unique identifier. This will usually be a username of some kind, but it "
"can also be an email address, or any other unique identifier. The field "
"*must* be unique (i.e., have ``unique=True`` set in its definition), unless "
"you use a custom authentication backend that can support non-unique "
"usernames."
msgstr ""
"Deretan karakter menggambarkan nama dari bidang pada model user yang "
"digunakan sebagai penciri unik. Ini akan biasanya berupa nama pengguna dari "
"beberapa macam, tetapi itu dapat juga berupa alamat surel, atau apapun "
"penciri unik lainnya. Bidang *harus* berupa unik (yaitu, mempunyai setelan "
"``unique=True`` di pengertiannya), meskipun anda menggunakan penyesuaian "
"backend otentifikasi yang dapat mendukung nama pengguna bukan unik."

msgid ""
"In the following example, the field ``identifier`` is used as the "
"identifying field::"
msgstr ""
"Dalam contoh berikut, bidang ``identifier`` digunakan sebagai bidang "
"pengenal::"

msgid ""
"A string describing the name of the email field on the ``User`` model. This "
"value is returned by :meth:`~models.AbstractBaseUser.get_email_field_name`."
msgstr ""
"Sebuah string menggambarkan nama dari bidang surel pada model ``User``. "
"Nilai ini dikembalikan oleh :meth:`~models.AbstractBaseUser."
"get_email_field_name`."

msgid ""
"A list of the field names that will be prompted for when creating a user via "
"the :djadmin:`createsuperuser` management command. The user will be prompted "
"to supply a value for each of these fields. It must include any field for "
"which :attr:`~django.db.models.Field.blank` is ``False`` or undefined and "
"may include additional fields you want prompted for when a user is created "
"interactively. ``REQUIRED_FIELDS`` has no effect in other parts of Django, "
"like creating a user in the admin."
msgstr ""
"Sebuah daftar dari nama bidang yang akan diminta ketika membuat sebuah "
"pengguna melalui perintah pengelolaan :djadmin:`createsuperuser`. Pengguna "
"akan diminta untuk menyediakan nilai untuk setiap bidang ini. Itu harus "
"menyertakan bidang apapun yang :attr:`~django.db.models.Field.blank` adalah "
"``False`` atau tidak menentukan dan mungkin disertakan bidang tambahan anda "
"ingin minta ketika sebuah pengguna dibuat secara interaktif. "
"``REQUIRED_FIELDS`` tidak mempunyai efek di bagian lagi dari Django, seperti "
"membuat sebuah pengguna di admin."

msgid ""
"For example, here is the partial definition for a user model that defines "
"two required fields - a date of birth and height::"
msgstr ""
"Sebagai contoh, ini ada pengertian sebagian untuk model pengguna yang "
"menentukan dua bidang wajib- tanggal lahir dan tinggi::"

msgid ""
"``REQUIRED_FIELDS`` must contain all required fields on your user model, but "
"should *not* contain the ``USERNAME_FIELD`` or ``password`` as these fields "
"will always be prompted for."
msgstr ""
"``REQUIRED_FIELDS`` harus mengandung semua bidang diwajibkan pada model "
"pengguna anda, tetapi *tidak* mengandung ``USERNAME_FIELD`` atau "
"``password`` ketika bidang ini selalu diminta."

msgid ""
"A boolean attribute that indicates whether the user is considered \"active"
"\".  This attribute is provided as an attribute on ``AbstractBaseUser`` "
"defaulting to ``True``. How you choose to implement it will depend on the "
"details of your chosen auth backends. See the documentation of the :attr:"
"`is_active attribute on the built-in user model <django.contrib.auth.models."
"User.is_active>` for details."
msgstr ""
"Sebuah atribut boolean yang mengindikasikan apakah pengguna dianggap \"aktif"
"\". Atribut ini disediakan sebagai sebuah atribut pada ``AbstractBaseUser`` "
"awalan pada ``True``. Bagaimana anda memilih menerapkan itu akan tergantung "
"pada rincian dari backend otentifikasi yang anda pilih. Lihat dokumentasi "
"dari :attr:`is_active attribute on the built-in user model <django.contrib."
"auth.models.User.is_active>` untuk rincian."

msgid ""
"Optional. A longer formal identifier for the user such as their full name. "
"If implemented, this appears alongside the username in an object's history "
"in :mod:`django.contrib.admin`."
msgstr ""
"Pilihan. Penciri resmi lebih panjang untuk pengguna seperti nama penuh "
"mereka. Jika diterapkan, ini muncul disamping nama pengguna dalam riwayat "
"obyek dalam :mod:`django.contrib.admin`."

msgid ""
"Optional. A short, informal identifier for the user such as their first "
"name. If implemented, this replaces the username in the greeting to the user "
"in the header of :mod:`django.contrib.admin`."
msgstr ""
"Pilihan. Pendek, penciri tidak resmi untuk pengguna seperti nama pertama "
"mereka. Jika diterapkan, ini mengganti nama pengguna dalam salam sapa ke "
"pengguna di kepala dari :mod:`django.contrib.admin`."

msgid "Importing ``AbstractBaseUser``"
msgstr "Mengimpor ``AbstractBaseUser``"

msgid ""
"``AbstractBaseUser`` and ``BaseUserManager`` are importable from ``django."
"contrib.auth.base_user`` so that they can be imported without including "
"``django.contrib.auth`` in :setting:`INSTALLED_APPS`."
msgstr ""
"``AbstractBaseUser`` dan ``BaseUserManager`` dapat diimpor dari ``django."
"contrib.auth.base_user`` sehingga mereka dapat diimpor tanpa menyertakan "
"``django.contrib.auth`` di :setting:`INSTALLED_APPS`."

msgid ""
"The following attributes and methods are available on any subclass of :class:"
"`~django.contrib.auth.models.AbstractBaseUser`:"
msgstr ""
"Atribut dan cara berikut tersedia pada setiap subkelas dari :class:`~django."
"contrib.auth.models.AbstractBaseUser`:"

msgid "Returns the value of the field nominated by ``USERNAME_FIELD``."
msgstr "Mengembalikan nilai dari bidang dicalonkan oleh ``USERNAME_FIELD``."

msgid ""
"Normalizes the username by calling :meth:`normalize_username`. If you "
"override this method, be sure to call ``super()`` to retain the "
"normalization."
msgstr ""
"Normalisasikan nama pengguna dengan memanggil :meth:`normalize_username`. "
"Jika anda menimpa cara ini, pastikan memanggil ``super()`` untuk menahan "
"normalisasi."

msgid ""
"Returns the name of the email field specified by the :attr:`~models."
"CustomUser.EMAIL_FIELD` attribute. Defaults to ``'email'`` if "
"``EMAIL_FIELD`` isn't specified."
msgstr ""
"Mengembalikan nama dari bidang surel ditentukan oleh atribut :attr:`~models."
"CustomUser.EMAIL_FIELD`. Awalan pada ``'email'`` jika ``EMAIL_FIELD`` tidak "
"ditentukan."

msgid ""
"Applies NFKC Unicode normalization to usernames so that visually identical "
"characters with different Unicode code points are considered identical."
msgstr ""
"Memberlakukan normalisasi Unicode NFKC pada nama pengguna sehingga nampak "
"karakter mirip dengan titik kode Unicode berbeda dianggap mirip."

msgid ""
"Read-only attribute which is always ``True`` (as opposed to ``AnonymousUser."
"is_authenticated`` which is always ``False``). This is a way to tell if the "
"user has been authenticated. This does not imply any permissions and doesn't "
"check if the user is active or has a valid session. Even though normally you "
"will check this attribute on ``request.user`` to find out whether it has "
"been populated by the :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` (representing the currently logged-in user), you "
"should know this attribute is ``True`` for any :class:`~models.User` "
"instance."
msgstr ""
"Atribut hanya-baca yang selalu ``True`` (sebagai lawan ``AnonymousUser."
"is_authenticated`` yang selalu ``False``). Ini adalah cara untuk memberitahu "
"jika pengguna telah diotentifikasi. Ini tidak berarti perizinan apapun dan "
"tidak memeriksa jika pengguna adalah aktif atau mempunyai sesi sah. Meskipun "
"secara biasa anda akan memeriksa atribut ini pada ``request.user`` untuk "
"menemukan apakah itu telah dikumpulkan oleh :class:`~django.contrib.auth."
"middleware.AuthenticationMiddleware` (mewakili pengguna masuk saat ini), "
"anda harus mengetahui atribut ini adalah ``True`` untuk tiap instance :class:"
"`~models.User`."

msgid ""
"Read-only attribute which is always ``False``. This is a way of "
"differentiating :class:`~models.User` and :class:`~models.AnonymousUser` "
"objects. Generally, you should prefer using :attr:`~models.User."
"is_authenticated` to this attribute."
msgstr ""
"Atribut hanya-baca yaitu selalu ``False``. Ini adalah jalan untuk membedakan "
"obyek :class:`~models.User` and :class:`~models.AnonymousUser`. Umumnya, "
"anda harus memilih menggunakan :attr:`~models.User.is_authenticated` pada "
"atribut ini."

msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models."
"AbstractBaseUser` object."
msgstr ""
"Setel sandi pengguna ke deretan karakter mentah yang diberikan, merawat has "
"sandi. Tidak menyimpan obyek :class:`~django.contrib.auth.models."
"AbstractBaseUser`."

msgid ""
"When the raw_password is ``None``, the password will be set to an unusable "
"password, as if :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` were used."
msgstr ""
"Ketika sandi mentah adalah ``None``, sandi akan disetel ke sandi tidak "
"biasa, seolah-olah :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` digunakan."

msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""
"Mengembalikan ``True`` jika deretan karakter mentah yang diberikan adalah "
"sandi benar untuk pengguna. (Ini merawat hash sandi dalam membuat "
"perbandingan.)"

msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models."
"AbstractBaseUser.check_password()` for this user will never return ``True``. "
"Doesn't save the :class:`~django.contrib.auth.models.AbstractBaseUser` "
"object."
msgstr ""
"Tandai pengguna sebagai mempunyai sandi tidak disetel. Ini tidak sama "
"seperti memiliki deretan karakter kosong untuk sebuah sandi. :meth:`~django."
"contrib.auth.models.AbstractBaseUser.check_password()` untuk pengguna ini "
"tidak akan pernah mengembalikan ``True``. Tidak menyimpan obyek :class:"
"`~django.contrib.auth.models.AbstractBaseUser`."

msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""
"Anda mungkin butuh ini jika otentifikasi untuk aplikasi anda memakan tempat "
"terhadap sumber luar yang ada seperti pelipat LDAP."

msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` has been called for this user."
msgstr ""
"Mengembalikan ``False`` jika :meth:`~django.contrib.auth.models."
"AbstractBaseUser.set_unusable_password()` telah dipanggil untuk pengguna ini."

msgid ""
"Returns an HMAC of the password field. Used for :ref:`session-invalidation-"
"on-password-change`."
msgstr ""
"Mengembalikan nilai HMAC dari kolom kata sandi. Digunakan untuk  :ref:"
"`session-invalidation-on-password-change`."

msgid ""
":class:`~models.AbstractUser` subclasses :class:`~models.AbstractBaseUser`:"
msgstr ""
":class:`~models.AbstractUser` subkelas :class:`~models.AbstractBaseUser`:"

msgid ""
"Normalizes the email by calling :meth:`.BaseUserManager.normalize_email`. If "
"you override this method, be sure to call ``super()`` to retain the "
"normalization."
msgstr ""
"Normalisasikan surel dengan memanggil :meth:`BaseUserManager."
"normalize_email`. Jika anda menimpa cara ini, pastikan memanggil ``super()`` "
"untuk menahan normalisasi."

msgid "Writing a manager for a custom user model"
msgstr "Menulis sebuah pengelola untuk model pengguna penyesuaian"

msgid ""
"You should also define a custom manager for your user model. If your user "
"model defines ``username``, ``email``, ``is_staff``, ``is_active``, "
"``is_superuser``, ``last_login``, and ``date_joined`` fields the same as "
"Django's default user, you can install Django's :class:`~django.contrib.auth."
"models.UserManager`; however, if your user model defines different fields, "
"you'll need to define a custom manager that extends :class:`~django.contrib."
"auth.models.BaseUserManager` providing two additional methods:"
msgstr ""

msgid ""
"The prototype of ``create_user()`` should accept the username field, plus "
"all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_user`` should be defined as::"
msgstr ""
"Sifat dari ``create_user()`` harus menerima bidang nama pengguna, ditambah "
"semua bidang wajib sebagai argumen. Sebagai contoh, jika model pengguna anda "
"menggunakan ``email`` sebagai bidang nama pengguna, dan mempunyai "
"``date_of_birth`` sebagai bidang wajib, kemudian ``create_user`` harus "
"ditentukan sebagai::"

msgid ""
"The prototype of ``create_superuser()`` should accept the username field, "
"plus all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_superuser`` should be defined as::"
msgstr ""
"Sifat dari ``create_superuser()`` harus menerima bidang nama pengguna, "
"ditambah semua bidang wajib sebagai argumen. Sebagai contoh, jika model "
"pengguna anda menggunakan ``email`` sebagai bidang nama pengguna, dan "
"mempunyai ``date_of_birth`` sebagai bidang wajib, kemudian "
"``create_superuser`` harus ditentukan sebagai::"

msgid ""
"For a :class:`~.ForeignKey` in :attr:`.USERNAME_FIELD` or :attr:`."
"REQUIRED_FIELDS`, these methods receive the value of the :attr:`~.ForeignKey."
"to_field` (the :attr:`~django.db.models.Field.primary_key` by default) of an "
"existing instance."
msgstr ""

msgid ""
":class:`~django.contrib.auth.models.BaseUserManager` provides the following "
"utility methods:"
msgstr ""
":class:`~django.contrib.auth.models.BaseUserManager` menyediakan cara "
"kegunaan berikut:"

msgid ""
"Normalizes email addresses by lowercasing the domain portion of the email "
"address."
msgstr ""
"Menormalkan alamat surel dengan menghuruf kecilkan bagian ranah dari alamat "
"surel."

msgid ""
"Retrieves a user instance using the contents of the field nominated by "
"``USERNAME_FIELD``."
msgstr ""
"Mengambil instance pengguna menggunakan isi dari bidang dicalonkan oleh "
"``USERNAME_FIELD``."

msgid ""
"Returns a random password with the given length and given string of allowed "
"characters. Note that the default value of ``allowed_chars`` doesn't contain "
"letters that can cause user confusion, including:"
msgstr ""
"Mengembalikan sandi acak dengan panjang yang diberikan dan deretan karakter "
"yang diberikan dari karakter yang diizinkan. Catat bahwa nilai awal dari "
"``allowed_chars`` tidak mengandung huruf yang dapat menyebabkan pengguna "
"bingung, termasuk:"

msgid ""
"``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, "
"uppercase letter i, and the number one)"
msgstr ""
"``i``, ``l``, ``I``, and ``1`` (huruf kecil i, huruf kecil L, huruf besar i, "
"dan angka satu)"

msgid ""
"``o``, ``O``, and ``0`` (lowercase letter o, uppercase letter o, and zero)"
msgstr "``o``, ``O``, and ``0`` (huruf kecil o, huruf besar o, dan nol)"

msgid "Extending Django's default ``User``"
msgstr "Memperpanjang ``User`` awal Django"

msgid ""
"If you're entirely happy with Django's :class:`~django.contrib.auth.models."
"User` model, but you want to add some additional profile information, you "
"could subclass :class:`django.contrib.auth.models.AbstractUser` and add your "
"custom profile fields, although we'd recommend a separate model as described "
"in the \"Model design considerations\" note of :ref:`specifying-custom-user-"
"model`. ``AbstractUser`` provides the full implementation of the default :"
"class:`~django.contrib.auth.models.User` as an :ref:`abstract model "
"<abstract-base-classes>`."
msgstr ""

msgid "Custom users and the built-in auth forms"
msgstr "Penyesuaian pengguna dan formulir otentifikasi siap-pakai"

msgid ""
"Django's built-in :ref:`forms <built-in-auth-forms>` and :ref:`views <built-"
"in-auth-views>` make certain assumptions about the user model that they are "
"working with."
msgstr ""
"SIap-pakai Django :ref:`forms <built-in-auth-forms>` dan :ref:`views <built-"
"in-auth-views>` membuat pendapat tertentu tentang model user yang mereka "
"bekerja dengannya."

msgid ""
"The following forms are compatible with any subclass of :class:`~django."
"contrib.auth.models.AbstractBaseUser`:"
msgstr ""
"Bentuk berikut cocok dengan subkelas apapun dari :class:`~django.contrib."
"auth.models.AbstractBaseUser`:"

msgid ""
":class:`~django.contrib.auth.forms.AuthenticationForm`: Uses the username "
"field specified by :attr:`~models.CustomUser.USERNAME_FIELD`."
msgstr ""
":class:`~django.contrib.auth.forms.AuthenticationForm`: Menggunakan bidang "
"nama pengguna ditentukan oleh :attr:`~models.CustomUser.USERNAME_FIELD`."

msgid ":class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ":class:`~django.contrib.auth.forms.SetPasswordForm`"

msgid ":class:`~django.contrib.auth.forms.PasswordChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.PasswordChangeForm`"

msgid ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"

msgid ""
"The following forms make assumptions about the user model and can be used as-"
"is if those assumptions are met:"
msgstr ""
"Formulir berikut membuat pendapat tentang model user dan dapat digunakan "
"dengan adanya jika pendapat tersebut dipenuhi:"

msgid ""
":class:`~django.contrib.auth.forms.PasswordResetForm`: Assumes that the user "
"model has a field that stores the user's email address with the name "
"returned by :meth:`~models.AbstractBaseUser.get_email_field_name` (``email`` "
"by default) that can be used to identify the user and a boolean field named "
"``is_active`` to prevent password resets for inactive users."
msgstr ""
":class:`~django.contrib.auth.forms.PasswordResetForm`: Beranggapan bahwa "
"model user mempunyai sebuah bidang yang menyimpan alamat surel pengguna "
"dengan nama dikembalikan oleh :meth:`~models.AbstractBaseUser."
"get_email_field_name` (``email`` secara awalan) yang dapat digunakan untuk "
"mencirikan pengguna dan bidang boolean bernama ``is_active`` untuk mencegah "
"penyetelan kembali sandi untuk pengguna tidak aktif."

msgid ""
"Finally, the following forms are tied to :class:`~django.contrib.auth.models."
"User` and need to be rewritten or extended to work with a custom user model:"
msgstr ""
"Akhirnya, formulir berikut diikat pada :class:`~django.contrib.auth.models."
"User` dan butuh ditulis kembali atau diperpanjang untuk bekerja dengan "
"penyesuaian model user:"

msgid ":class:`~django.contrib.auth.forms.UserCreationForm`"
msgstr ":class:`~django.contrib.auth.forms.UserCreationForm`"

msgid ":class:`~django.contrib.auth.forms.UserChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.UserChangeForm`"

msgid ""
"If your custom user model is a subclass of ``AbstractUser``, then you can "
"extend these forms in this manner::"
msgstr ""

msgid "Custom users and :mod:`django.contrib.admin`"
msgstr "Penyesuaian pengguna dan :mod:`django.contrib.admin`"

msgid ""
"If you want your custom user model to also work with the admin, your user "
"model must define some additional attributes and methods. These methods "
"allow the admin to control access of the user to admin content:"
msgstr ""
"Jika anda ingin penyesuaian model user anda juga bekerja dengan admin, model "
"user anda harus menentukan beberapa atribut dan metode tambahan. Cara ini "
"mengizinkan admin mengendalikan akses user ke isi admin:"

msgid ""
"Returns ``True`` if the user is allowed to have access to the admin site."
msgstr ""
"Mengembalikan  ``True`` jika pengguna diizinkan mempunyai akses ke situs "
"admin"

msgid "Returns ``True`` if the user account is currently active."
msgstr "Mengembalikan ``True`` jika akun pengguna saat ini aktif."

msgid ""
"Returns ``True`` if the user has the named permission. If ``obj`` is "
"provided, the permission needs to be checked against a specific object "
"instance."
msgstr ""
"Mengembalikan ``True`` jika pengguna mempunyai perizinan nama. Jika ``obj`` "
"disediakan, perizinan butuh diperiksa terhadap instace obyek tertentu."

msgid ""
"Returns ``True`` if the user has permission to access models in the given "
"app."
msgstr ""
"Mengembalikan ``True`` jika pengguna mempunyai perizinan untuk mengakses "
"model pada aplikasi yang diberikan."

msgid ""
"You will also need to register your custom user model with the admin. If "
"your custom user model extends ``django.contrib.auth.models.AbstractUser``, "
"you can use Django's existing ``django.contrib.auth.admin.UserAdmin`` class. "
"However, if your user model extends :class:`~django.contrib.auth.models."
"AbstractBaseUser`, you'll need to define a custom ``ModelAdmin`` class. It "
"may be possible to subclass the default ``django.contrib.auth.admin."
"UserAdmin``; however, you'll need to override any of the definitions that "
"refer to fields on ``django.contrib.auth.models.AbstractUser`` that aren't "
"on your custom user class."
msgstr ""
"Anda akan juga butuh mendaftarkan model pengguna penyesuaian anda dengan "
"admin. Jika model pengguna penyesuaian anda memperpanjang ``django.contrib."
"auth.models.AbstractUser``, anda dapat menggunakan kelas ``django.contrib."
"auth.admin.UserAdmin`` yang ada dari Django. Bagaimanapun, jika model "
"pengguna anda memperpanjang :class:`~django.contrib.auth.models."
"AbstractBaseUser`, anda akan butuh menentukan kelas ``ModelAdmin`` "
"penyesuaian. Itu memungkinkan untuk mensubkelaskan awalan ``django.contrib."
"auth.admin.UserAdmin``; bagaimanapun, anda akan butuh menimpa tiap "
"pengertian yang mengacu ke bidang pada ``django.contrib.auth.models."
"AbstractUser`` yang tidak pada kelas pengguna penyesuaian anda."

msgid ""
"If you are using a custom ``ModelAdmin`` which is a subclass of ``django."
"contrib.auth.admin.UserAdmin``, then you need to add your custom fields to "
"``fieldsets`` (for fields to be used in editing users) and to "
"``add_fieldsets`` (for fields to be used when creating a user). For example::"
msgstr ""

msgid ""
"See :ref:`a full example <custom-users-admin-full-example>` for more details."
msgstr ""
"Lihat :ref:`a full example <custom-users-admin-full-example>` untuk rincian "
"lebih."

msgid "Custom users and permissions"
msgstr "Penyesuaian pengguna dan perizinan"

msgid ""
"To make it easy to include Django's permission framework into your own user "
"class, Django provides :class:`~django.contrib.auth.models."
"PermissionsMixin`. This is an abstract model you can include in the class "
"hierarchy for your user model, giving you all the methods and database "
"fields necessary to support Django's permission model."
msgstr ""
"Untuk membuatnya lebih mudah untuk menyertakan kerangka kerja perizinan "
"Django kedalam kelas user anda sendiri, Django menyediakan :class:`~django."
"contrib.auth.models.PermissionsMixin`. Ini adalah model abstrak anda dapat "
"sertakan di susunan tingkat kelas untuk model user anda. memberikan anda "
"semua metode dan bidang basisdata yang diperlukan untuk mendukung model "
"perizinan Django."

msgid ""
":class:`~django.contrib.auth.models.PermissionsMixin` provides the following "
"methods and attributes:"
msgstr ""
":class:`~django.contrib.auth.models.PermissionsMixin` menyediakan cara dan "
"atribut berikut:"

msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr ""
"Boolean. Menunjuk bahwa pengguna ini mempunyai semua perizinan tanpa secara "
"jelas menetapkan mereka."

msgid "Returns a set of permission strings that the user has directly."
msgstr ""
"Mengembalikan sekumpulan string perizinan yang pengguna miliki secara "
"langsung."

msgid ""
"If ``obj`` is passed in, only returns the user permissions for this specific "
"object."
msgstr ""
"Jika ``obj`` dilewatkan, hanya mengembalikan perizinan pengguna untuk objek "
"khusus ini."

msgid ""
"Returns a set of permission strings that the user has, through their groups."
msgstr ""
"Mengembalikan deretan karakter kumpulan perizinan yang pengguna punyai, "
"melalui kelompok mreka."

msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr ""
"Jika ``obj`` diloloskan, hanya mengembalikan perizinan kelompok untuk obyek "
"tertentu ini."

msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""
"Mengembalikan sekumpulan deretan karakter perizinan yang pengguna punyai, "
"kedua melalui perizinan kelompok dan pengguna."

msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr ""
"Jika ``obj`` diloloskan. hanya mengembalikan perizinan untuk obyek tertentu "
"ini."

msgid ""
"Returns ``True`` if the user has the specified permission, where ``perm`` is "
"in the format ``\"<app label>.<permission codename>\"`` (see :ref:"
"`permissions <topic-authorization>`). If :attr:`.User.is_active` and :attr:"
"`~.User.is_superuser` are both ``True``, this method always returns ``True``."
msgstr ""

msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""
"Jika ``obj`` diloloskan, metode ini tidak akan memeriksa untuk sebuah "
"perizinan untuk model, tetapi untuk obyek tertentu ini."

msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If :"
"attr:`.User.is_active` and :attr:`~.User.is_superuser` are both ``True``, "
"this method always returns ``True``."
msgstr ""

msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""
"Jika ``obj`` diloloskan, metode ini tidak akan memeriksa untuk perizinan-"
"perizinan  untuk model, tetapi untuk obyek tertentu."

msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If :attr:`.User.is_active` and :attr:`~.User."
"is_superuser` are both ``True``, this method always returns ``True``."
msgstr ""

msgid "``PermissionsMixin`` and ``ModelBackend``"
msgstr "``PermissionsMixin`` dan ``ModelBackend``"

msgid ""
"If you don't include the :class:`~django.contrib.auth.models."
"PermissionsMixin`, you must ensure you don't invoke the permissions methods "
"on ``ModelBackend``. ``ModelBackend`` assumes that certain fields are "
"available on your user model. If your user model doesn't provide  those "
"fields, you'll receive database errors when you check permissions."
msgstr ""
"Jika anda tidak menyertakan :class:`~django.contrib.auth.models."
"PermissionsMixin`, anda harus memastikan anda tidak meminta metode perizinan "
"pada ``ModelBackend``. ``ModelBackend`` menggangap bahwa bidang tertentu itu "
"tersedia di model user anda. Jika model user anda tidak menyediakan bidang "
"tersebut, anda akan menerima kesalahan basisdata ketika anda memeriksa "
"perizinan. "

msgid "Custom users and proxy models"
msgstr "Penyesuaian pengguna dan model proxy"

msgid ""
"One limitation of custom user models is that installing a custom user model "
"will break any proxy model extending :class:`~django.contrib.auth.models."
"User`. Proxy models must be based on a concrete base class; by defining a "
"custom user model, you remove the ability of Django to reliably identify the "
"base class."
msgstr ""
"Satu batasan dari penyesuaian model user adalah bahwa memasang penyesuaian "
"model user akan memutus tiap model proxy memperpanjang :class:`~django."
"contrib.auth.models.User`. Model proxy harus berdasarkan pada kelas dasar "
"nyata; dengan menentukan penyesuaian model user, anda memindah kemampuan "
"dari Django untuk menciri yang handal kelas dasar."

msgid ""
"If your project uses proxy models, you must either modify the proxy to "
"extend the user model that's in use in your project, or merge your proxy's "
"behavior into your :class:`~django.contrib.auth.models.User` subclass."
msgstr ""
"Jika proyek anda menggunakan model proxy, anda harus salah satu merubah "
"proxy untuk memperpanjang model yser yang digunakan di proyek anda, atau "
"menggabungkan kebiasaan proxy anda kedalam subkelas :class:`~django.contrib."
"auth.models.User`."

msgid "A full example"
msgstr "Sebuah contoh penuh"

msgid ""
"Here is an example of an admin-compliant custom user app. This user model "
"uses an email address as the username, and has a required date of birth; it "
"provides no permission checking beyond an ``admin`` flag on the user "
"account. This model would be compatible with all the built-in auth forms and "
"views, except for the user creation forms. This example illustrates how most "
"of the components work together, but is not intended to be copied directly "
"into projects for production use."
msgstr ""

msgid ""
"This code would all live in a ``models.py`` file for a custom authentication "
"app::"
msgstr ""
"Kode ini akan semua tinggal di berkas ``models.py`` untuk aplikasi "
"otentifikasi penyesuaian::"

msgid ""
"Then, to register this custom user model with Django's admin, the following "
"code would be required in the app's ``admin.py`` file::"
msgstr ""
"Kemudian, untuk mendaftar model pengguna penyesuaian dengan admin Django, "
"kode berikut akan diwajibkan di berkas ``admin.py`` aplikasi::"

msgid ""
"Finally, specify the custom model as the default user model for your project "
"using the :setting:`AUTH_USER_MODEL` setting in your ``settings.py``::"
msgstr ""
"Akhirnya, tentukan model penyesuaian sebagai model pengguna awal untuk "
"proyek anda menggunakan pengaturan :setting:`AUTH_USER_MODEL` di ``settings."
"py`` anda::"

msgid ""
"In older versions, ``ReadOnlyPasswordHashField`` is not :attr:`~django.forms."
"Field.disabled` by default and ``UserChangeForm.clean_password()`` is "
"required to return the initial value, whatever the user provides."
msgstr ""

msgid "Using the Django authentication system"
msgstr "Menggunakan sistem pembuktian keaslian Django"

msgid ""
"This document explains the usage of Django's authentication system in its "
"default configuration. This configuration has evolved to serve the most "
"common project needs, handling a reasonably wide range of tasks, and has a "
"careful implementation of passwords and permissions. For projects where "
"authentication needs differ from the default, Django supports extensive :doc:"
"`extension and customization </topics/auth/customizing>` of authentication."
msgstr ""
"Dokumen ini menjelaskan penggunaan dari sistem otentifikasi Django di "
"konfigurasi awalannya. Konfigurasi ini telah berkembang untuk melayani "
"kebutuhan proyek paling umum, menangani jangkauan luas beralasan dari tugas, "
"dan mempunyai penerapan cermat dari sandi dan perizinan. Untuk proyek dimana "
"otentifikasi butuh berbeda dari awalan, Django mendukung :doc:`extension and "
"customization </topics/auth/customizing>` luas dari otentifikasi."

msgid ""
"Django authentication provides both authentication and authorization "
"together and is generally referred to as the authentication system, as these "
"features are somewhat coupled."
msgstr ""
"Otentifikasi Django menyediakan kedua otentifikasi dan otorisasi bersama-"
"sama dan umumnya mengacu pada sebagai sistem otentifikasi, ketika fitur ini "
"agak digabungkan."

msgid "``User`` objects"
msgstr "Obyek ``User``"

msgid ""
":class:`~django.contrib.auth.models.User` objects are the core of the "
"authentication system. They typically represent the people interacting with "
"your site and are used to enable things like restricting access, registering "
"user profiles, associating content with creators etc. Only one class of user "
"exists in Django's authentication framework, i.e., :attr:`'superusers' "
"<django.contrib.auth.models.User.is_superuser>` or admin :attr:`'staff' "
"<django.contrib.auth.models.User.is_staff>` users are just user objects with "
"special attributes set, not different classes of user objects."
msgstr ""
"Obyek :class:`~django.contrib.auth.models.User` adalah inti dari sistem "
"autentifikasi. Mereka khususnya mewakili orang berinteraksi dengan situs "
"anda dan digunakan untuk mengadakan hal-hal seperti membatasi akses, "
"mendaftarkan profil pengguna, menyatukan isi dengan pembuat dll. Hanya satu "
"kelas dari pengguna yang ada di otentifikasi kerangka kerja Django, yaitu, :"
"attr:`'superusers' <django.contrib.auth.models.User.is_superuser>` atau "
"admin pengguna :attr:`'staff' <django.contrib.auth.models.User.is_staff>` "
"hanya obyek user dengan sekumpulan atribut khusus, bukan kelas-kelas berbeda "
"dari obyek user."

msgid "The primary attributes of the default user are:"
msgstr "Atribut utama dari pengguna awal adalah:"

msgid ":attr:`~django.contrib.auth.models.User.username`"
msgstr ":attr:`~django.contrib.auth.models.User.username`"

msgid ":attr:`~django.contrib.auth.models.User.password`"
msgstr ":attr:`~django.contrib.auth.models.User.password`"

msgid ":attr:`~django.contrib.auth.models.User.email`"
msgstr ":attr:`~django.contrib.auth.models.User.email`"

msgid ":attr:`~django.contrib.auth.models.User.first_name`"
msgstr ":attr:`~django.contrib.auth.models.User.first_name`"

msgid ":attr:`~django.contrib.auth.models.User.last_name`"
msgstr ":attr:`~django.contrib.auth.models.User.last_name`"

msgid ""
"See the :class:`full API documentation <django.contrib.auth.models.User>` "
"for full reference, the documentation that follows is more task oriented."
msgstr ""
"Lihat :class:`full API documentation <django.contrib.auth.models.User>`untuk "
"acuan penuh, dokumentasi yang mengikuti lebih berorientasi tugas."

msgid "Creating users"
msgstr "Membuat pengguna"

msgid ""
"The most direct way to create users is to use the included :meth:`~django."
"contrib.auth.models.UserManager.create_user` helper function::"
msgstr ""
"Cara paling langsung untuk membuat pengguna adalah menggunakan fungsi "
"pembantu :meth:`~django.contrib.auth.models.UserManager.create_user` yang "
"disertakan::"

msgid ""
"If you have the Django admin installed, you can also :ref:`create users "
"interactively <auth-admin>`."
msgstr ""
"Jika anda mempunai admin Django dipasang, anda dapat juga :ref:`create users "
"interactively <auth-admin>`."

msgid "Creating superusers"
msgstr "Membuat pengguna hebat"

msgid "Create superusers using the :djadmin:`createsuperuser` command::"
msgstr ""
"Membuat pengguna hebat menggunakan perintah :djadmin:`createsuperuser`::"

msgid ""
"You will be prompted for a password. After you enter one, the user will be "
"created immediately. If you leave off the :option:`--username "
"<createsuperuser --username>` or :option:`--email <createsuperuser --email>` "
"options, it will prompt you for those values."
msgstr ""
"Anda akan diminta untuk sandi. Setelah anda memasukkan satu, pengguna akan "
"membuat dengan segera. Jika anda membiarkan mati pilihan :option:`--username "
"<createsuperuser --username>` atau :option:`--email <createsuperuser --"
"email>`, itu akan meminta anda untuk nilai-nilai tersebut."

msgid "Changing passwords"
msgstr "Merubah sandi"

msgid ""
"Django does not store raw (clear text) passwords on the user model, but only "
"a hash (see :doc:`documentation of how passwords are managed </topics/auth/"
"passwords>` for full details). Because of this, do not attempt to manipulate "
"the password attribute of the user directly. This is why a helper function "
"is used when creating a user."
msgstr ""
"Django tidak menyimpan sandi (teks bersih) mentah pada model user, tetapi "
"hanya campuran (lihat :doc:`documentation of how passwords are managed </"
"topics/auth/passwords>` untuk rincian penuh). Karena dari ini, jangan "
"mencoba untuk mengubah atribut sanddi dari pengguna secara langsung. Ini "
"adalah mengapa fungsi pembantu digunakan ketika membuat pengguna."

msgid "To change a user's password, you have several options:"
msgstr "Untuk merubah sandi pengguna, anda mempunyai beebrapa pilihan:"

msgid ""
":djadmin:`manage.py changepassword *username* <changepassword>` offers a "
"method of changing a user's password from the command line. It prompts you "
"to change the password of a given user which you must enter twice. If they "
"both match, the new password will be changed immediately. If you do not "
"supply a user, the command will attempt to change the password whose "
"username matches the current system user."
msgstr ""
":djadmin:`manage.py changepassword *username* <changepassword>` menawarkan "
"metode dari merubah sandi pengguna dari baris perintah. Itu mendorong anda "
"merubah sandi dari pengguna yang diberikan yang anda harus masukkan dua "
"kali. Jika mereka kedua cocok, sandi baru akan berubah segera. Jika anda "
"tidak memasok pengguna, perintah akan berusaha merubah sandi yang nama "
"pengguna cocok dengan pengguna sistem saat ini."

msgid ""
"You can also change a password programmatically, using :meth:`~django."
"contrib.auth.models.User.set_password()`:"
msgstr ""
"Anda dapat juga merubah sandi secara program, menggunakan :meth:`~django."
"contrib.auth.models.User.set_password()`:"

msgid ""
"If you have the Django admin installed, you can also change user's passwords "
"on the :ref:`authentication system's admin pages <auth-admin>`."
msgstr ""
"Jika anda mempunyai admin Django terpasang, anda dapat juga merubah sandi "
"pengguna pada :ref:`halaman admin sistem pembuktian keaslian <auth-admin>`."

msgid ""
"Django also provides :ref:`views <built-in-auth-views>` and :ref:`forms "
"<built-in-auth-forms>` that may be used to allow users to change their own "
"passwords."
msgstr ""
"Django juga menyediakan :ref:`views <built-in-auth-views>` dan :ref:`forms "
"<built-in-auth-forms>` yang mungkin digunakan untuk mengizinkan pengguna "
"merubah sandi mereka sendiri."

msgid ""
"Changing a user's password will log out all their sessions. See :ref:"
"`session-invalidation-on-password-change` for details."
msgstr ""
"Merubah sandi pengguna akan keluar semua sesi mereka. Lihat :ref:`session-"
"invalidation-on-password-change` untuk rincian."

msgid "Authenticating users"
msgstr "Pembuktian keaslian pengguna"

msgid ""
"Use :func:`~django.contrib.auth.authenticate()` to verify a set of "
"credentials. It takes credentials as keyword arguments, ``username`` and "
"``password`` for the default case, checks them against each :ref:"
"`authentication backend <authentication-backends>`, and returns a :class:"
"`~django.contrib.auth.models.User` object if the credentials are valid for a "
"backend. If the credentials aren't valid for any backend or if a backend "
"raises :class:`~django.core.exceptions.PermissionDenied`, it returns "
"``None``. For example::"
msgstr ""
"Gunakan :func:`~django.contrib.auth.authenticate()` untuk memeriksa kumpulan "
"dari mandat. Itu mengambil mandat sebagai argumen kata kunci, ``username`` "
"dan ``password`` untuk kasus awal, periksa mereka kembali setiap :ref:"
"`authentication backend <authentication-backends>`, dan kembalikan obyek :"
"class:`~django.contrib.auth.models.User` jika mandat sah untuk backend. Jika "
"mandat tidak sah untuk setiap backend atau jika backend menampilkan :class:"
"`~django.core.exceptions.PermissionDenied`, itu mengembalikan ``None``. "
"Sebagai contoh::"

msgid ""
"``request`` is an optional :class:`~django.http.HttpRequest` which is passed "
"on the ``authenticate()`` method of the authentication backends."
msgstr ""
"``request`` adalah sebuah pilihan :class:`~django.http.HttpRequest` yang "
"dilewatkan pada metode ``authenticate()`` dari backend autentifikasi."

msgid ""
"This is a low level way to authenticate a set of credentials; for example, "
"it's used by the :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware`. Unless you are writing your own authentication "
"system, you probably won't use this. Rather if you're looking for a way to "
"login a user, use the :class:`~django.contrib.auth.views.LoginView`."
msgstr ""
"Ini adalah cara tingkat bawah untuk mengautentifikasi kumpulan dari "
"kepercayaan; sebagai contoh, itu digunakan oleh :class:`~django.contrib.auth."
"middleware.RemoteUserMiddleware`. Meskipun anda sedang menulis sisten "
"autentifikasi anda sendiri, anda mungkin tidak menggunakan ini. Daripada "
"jika anda sedang mencari cara untuk masuk seorang pengguna, gunakan :class:"
"`~django.contrib.auth.views.LoginView`."

msgid "Permissions and Authorization"
msgstr "Perizinan dan Pembuktian keaslian"

msgid ""
"Django comes with a built-in permissions system. It provides a way to assign "
"permissions to specific users and groups of users."
msgstr ""

msgid ""
"It's used by the Django admin site, but you're welcome to use it in your own "
"code."
msgstr ""
"Digunakan oleh situs admin Django, tetapi anda dipersilahkan menggunakannya "
"di kode anda sendiri."

msgid "The Django admin site uses permissions as follows:"
msgstr "Situs admin Django menggunakan perizinan sebagai berikut:"

msgid ""
"Access to view objects is limited to users with the \"view\" or \"change\" "
"permission for that type of object."
msgstr ""
"Akses untuk menampilkan obyek adalah terbatas pada pengguna dengan perizinan "
"\"view\" atau \"change\" untuk jenis itu dari obyek."

msgid ""
"Access to view the \"add\" form and add an object is limited to users with "
"the \"add\" permission for that type of object."
msgstr ""
"Akses ke tampilan formulir \"add\" dan menambah sebuah obyek adalah terbatas "
"untuk pengguna dengan perizinan \"add\" untuk jenis itu dari obyek."

msgid ""
"Access to view the change list, view the \"change\" form and change an "
"object is limited to users with the \"change\" permission for that type of "
"object."
msgstr ""
"Akses ke tampilan daftar perubahan, tampilan formulir \"change\" dan merubah "
"sebuah obyek adalah terbatas untuk pengguna dengan perizinan \"change\" "
"untuk jenis obyek itu."

msgid ""
"Access to delete an object is limited to users with the \"delete\" "
"permission for that type of object."
msgstr ""
"Akses untuk menghapus sebuah obyek adalah terbatas pada pengguna dengan "
"perizinan \"hapus\" untuk jenis itu dari obyek."

msgid ""
"Permissions can be set not only per type of object, but also per specific "
"object instance. By using the :meth:`~django.contrib.admin.ModelAdmin."
"has_view_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_change_permission` and :meth:`~django.contrib.admin.ModelAdmin."
"has_delete_permission` methods provided by the :class:`~django.contrib.admin."
"ModelAdmin` class, it is possible to customize permissions for different "
"object instances of the same type."
msgstr ""

msgid ""
":class:`~django.contrib.auth.models.User` objects have two many-to-many "
"fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth."
"models.User` objects can access their related objects in the same way as any "
"other :doc:`Django model </topics/db/models>`::"
msgstr ""
"Obyek :class:`~django.contrib.auth.models.User` mempunyai dua bidang many-to-"
"many: ``groups`` dan ``user_permissions``. Obyek :class:`~django.contrib."
"auth.models.User` dapat mengakses obyek terkait mereka di cara yang sama "
"seperti yang :doc:`Django model </topics/db/models>` lain::"

msgid "Default permissions"
msgstr "Perizinan pertama"

msgid ""
"When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` "
"setting, it will ensure that four default permissions -- add, change, "
"delete, and view -- are created for each Django model defined in one of your "
"installed applications."
msgstr ""

msgid ""
"These permissions will be created when you run :djadmin:`manage.py migrate "
"<migrate>`; the first time you run ``migrate`` after adding ``django.contrib."
"auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created "
"for all previously-installed models, as well as for any new models being "
"installed at that time. Afterward, it will create default permissions for "
"new models each time you run :djadmin:`manage.py migrate <migrate>` (the "
"function that creates permissions is connected to the :data:`~django.db."
"models.signals.post_migrate` signal)."
msgstr ""
"Perizinan ini akan dibuat ketika anda menjalankan :djadmin:`manage.py "
"migrate <migrate>`; pertama kali anda menjalankan ``migrate`` setelah "
"menambahkan ``django.contrib.auth`` pada :setting:`INSTALLED_APPS`, "
"perizinan awalan akan dibuat untuk semua model sebelumnya-terpasang, sama "
"halnya untuk tiap model baru sedang dipasang pada waktu itu. Kemudian, itu "
"akan membuat perizinan awalan untuk model baru setiap kali anda menjalankan :"
"djadmin:`manage.py migrate <migrate>` (fungsi yang membuat perizinan adalah "
"terhubung ke sinyal :data:`~django.db.models.signals.post_migrate`)."

msgid ""
"Assuming you have an application with an :attr:`~django.db.models.Options."
"app_label` ``foo`` and a model named ``Bar``, to test for basic permissions "
"you should use:"
msgstr ""
"Menganggap anda memiliki sebuah aplikasi dengan :attr:`~django.db.models."
"Options.app_label` ``foo`` dan model bernama ``Bar``, pada percobaan untuk "
"perizinan dasar anda harus gunakan:"

msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr "tambah: ``user.has_perm('foo.add_bar')``"

msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr "rubah: ``user.has_perm('foo.change_bar')``"

msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr "hapus: ``user.has_perm('foo.delete_bar')``"

msgid "view: ``user.has_perm('foo.view_bar')``"
msgstr "view: ``user.has_perm('foo.view_bar')``"

msgid ""
"The :class:`~django.contrib.auth.models.Permission` model is rarely accessed "
"directly."
msgstr ""
"Model :class:`~django.contrib.auth.models.Permission` jarang diakses secara "
"langsung."

msgid "Groups"
msgstr "Kelompok"

msgid ""
":class:`django.contrib.auth.models.Group` models are a generic way of "
"categorizing users so you can apply permissions, or some other label, to "
"those users. A user can belong to any number of groups."
msgstr ""
"Model :class:`django.contrib.auth.models.Group` adalah cara umum dari "
"mengkategorikan pengguna sehingga anda dapat memberlakukan perizinan, atau "
"beberapa label lain, ke penggun tersebut. Seorang pengguna dapat milik ke "
"tiap sejumlah kelompok."

msgid ""
"A user in a group automatically has the permissions granted to that group. "
"For example, if the group ``Site editors`` has the permission "
"``can_edit_home_page``, any user in that group will have that permission."
msgstr ""
"Seorang pengguna di kelompok secara otomatis mempunyai perizinan diberikan "
"ke kelompok itu. Sebagai contoh, jika kelompok ``Site editors`` mempunyai "
"perizinan ``can_edit_home_page``, tiap pengguna di kelompok itu akan "
"mempunyai perizinan itu."

msgid ""
"Beyond permissions, groups are a convenient way to categorize users to give "
"them some label, or extended functionality. For example, you could create a "
"group ``'Special users'``, and you could write code that could, say, give "
"them access to a members-only portion of your site, or send them members-"
"only email messages."
msgstr ""
"Diluar perizinan, kelompok adalah cara nyaman untuk mengkategorikan pengguna "
"untuk memberikan mereka beberapa label, atau memperpanjang kegunaan. Sebagai "
"contoh, anda dapat membuat kelompok ``'Special users'``, dan anda dapat "
"menulis kode yang dapat, katakan, memberikan mereka akses ke bagian hanya-"
"anggota dari situs anda, atau mengirim mereka pesan surel hanya-pesan."

msgid "Programmatically creating permissions"
msgstr "Pemrograman membuat perizinan"

msgid ""
"While :ref:`custom permissions <custom-permissions>` can be defined within a "
"model's ``Meta`` class, you can also create permissions directly. For "
"example, you can create the ``can_publish`` permission for a ``BlogPost`` "
"model in ``myapp``::"
msgstr ""
"Selagi :ref:`custom permissions <custom-permissions>` dapat ditentukan dalam "
"kelas ``Meta`` model, anda dapat juga membuat perizinan secara langsung. "
"Sebagai contoh, anda dapat membuat perizinan ``can_publish`` untuk model "
"``BlogPost`` di ``myapp``::"

msgid ""
"The permission can then be assigned to a :class:`~django.contrib.auth.models."
"User` via its ``user_permissions`` attribute or to a :class:`~django.contrib."
"auth.models.Group` via its ``permissions`` attribute."
msgstr ""
"Perizinan dapat kemudian diberikan pada :class:`~django.contrib.auth.models."
"User` melalui atribut ``user_permissions`` nya atau ke :class:`~django."
"contrib.auth.models.Group` melalui atribut ``permissions`` nya."

msgid "Proxy models need their own content type"
msgstr ""

msgid ""
"If you want to create :ref:`permissions for a proxy model <proxy-models-"
"permissions-topic>`, pass ``for_concrete_model=False`` to :meth:`."
"ContentTypeManager.get_for_model` to get the appropriate ``ContentType``::"
msgstr ""

msgid "Permission caching"
msgstr "Perizinan penyimpanan sementara"

msgid ""
"The :class:`~django.contrib.auth.backends.ModelBackend` caches permissions "
"on the user object after the first time they need to be fetched for a "
"permissions check. This is typically fine for the request-response cycle "
"since permissions aren't typically checked immediately after they are added "
"(in the admin, for example). If you are adding permissions and checking them "
"immediately afterward, in a test or view for example, the easiest solution "
"is to re-fetch the user from the database. For example::"
msgstr ""
"Perizinan tembolok :class:`~django.contrib.auth.backends.ModelBackend` pada "
"obyek user setelah pertama kali mereka butuh diambil untuk pemeriksaan "
"perizinan. Ini adalah khususnya baik untuk siklus tanggapan-permintaan sejak "
"perizinan tidak secara khusus memeriksa segera setelah mereka sitambahkan "
"(dalam admin, sebagai contoh). Jika anda menambahkan perizinan dan memeriksa "
"mereka segera setelahnya, dalam percobaan atau tampilan sebagai contoh, "
"pemecahan termudah adalah mengambil kembali dari basisdata. Sebagai contoh::"

msgid "Proxy models"
msgstr "Model proxy"

msgid ""
"Proxy models work exactly the same way as concrete models. Permissions are "
"created using the own content type of the proxy model. Proxy models don't "
"inherit the permissions of the concrete model they subclass::"
msgstr ""

msgid "Authentication in web requests"
msgstr ""

msgid ""
"Django uses :doc:`sessions </topics/http/sessions>` and middleware to hook "
"the authentication system into :class:`request objects <django.http."
"HttpRequest>`."
msgstr ""
"Django menggunakan :doc:`sessions </topics/http/sessions>` dan middleware "
"untuk menghubungkan sitem otentifikasi kedalam :class:`request objects "
"<django.http.HttpRequest>`."

msgid ""
"These provide a :attr:`request.user <django.http.HttpRequest.user>`  "
"attribute on every request which represents the current user. If the current "
"user has not logged in, this attribute will be set to an instance of :class:"
"`~django.contrib.auth.models.AnonymousUser`, otherwise it will be an "
"instance of :class:`~django.contrib.auth.models.User`."
msgstr ""
"Ini menyediakan sebuah atribut :attr:`request.user <django.http.HttpRequest."
"user>` pada setiap permintaan yang mewakili pengguna saat ini. Jika pengguna "
"saat ini belum masuk, atribut ini akan disetel ke sebuah instance dari :"
"class:`~django.contrib.auth.models.AnonymousUser`, sebaliknya itu akan "
"berupa sebuah instance dari :class:`~django.contrib.auth.models.User`."

msgid ""
"You can tell them apart with :attr:`~django.contrib.auth.models.User."
"is_authenticated`, like so::"
msgstr ""
"Anda dapat memberitahu mereka selain dengan :attr:`~django.contrib.auth."
"models.User.is_authenticated`, seperti begitu ::"

msgid "How to log a user in"
msgstr "Bagaimana cara masuk pengguna"

msgid ""
"If you have an authenticated user you want to attach to the current session "
"- this is done with a :func:`~django.contrib.auth.login` function."
msgstr ""
"Jika anda mempunyai pengguna terotentifikasi anda ingin lampirkan ke sesi "
"saat ini - ini dilakukan dengan fungsi :func:`~django.contrib.auth.login`."

msgid ""
"To log a user in, from a view, use :func:`~django.contrib.auth.login()`. It "
"takes an :class:`~django.http.HttpRequest` object and a :class:`~django."
"contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves "
"the user's ID in the session, using Django's session framework."
msgstr ""
"Untuk pengguna masuk, dari tampilan, gunakan :func:`~django.contrib.auth."
"login()`. Itu mengambil sebuah obyek :class:`~django.http.HttpRequest` dan "
"sebuah obyek :class:`~django.contrib.auth.models.User`. :func:`~django."
"contrib.auth.login()` menyimpan ID pengguna di sesi, menggunakan kerangka "
"kerja sesi Django."

msgid ""
"Note that any data set during the anonymous session is retained in the "
"session after a user logs in."
msgstr ""
"Catat bahwa tiap data disetel selama sesi anonim dipertahankan di sesi "
"setelah pengguna masuk."

msgid ""
"This example shows how you might use both :func:`~django.contrib.auth."
"authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""
"Contoh ini menunjukkan bagaimana anda mungkin menggunakan kedua :func:"
"`~django.contrib.auth.authenticate()` dan :func:`~django.contrib.auth."
"login()`::"

msgid "Selecting the authentication backend"
msgstr "Memilih backend otentifikasi"

msgid ""
"When a user logs in, the user's ID and the backend that was used for "
"authentication are saved in the user's session. This allows the same :ref:"
"`authentication backend <authentication-backends>` to fetch the user's "
"details on a future request. The authentication backend to save in the "
"session is selected as follows:"
msgstr ""
"Ketika seorang pengguna masuk, ID pengguna dan backend yang telah digunakan "
"untuk autentifikasi disimpan dalam sesi pengguna. Ini mengizinkan :ref:"
"`authentication backend <authentication-backends>` sama untuk mengambil "
"rincian pengguna pada permintaan akan datang. Backend autentifikasi untuk "
"menyimpan sesi dipilih sebagai berikut:"

msgid "Use the value of the optional ``backend`` argument, if provided."
msgstr "Gunakan nilai dai argumen ``backend`` pilihan, jika disediakan."

msgid ""
"Use the value of the ``user.backend`` attribute, if present. This allows "
"pairing :func:`~django.contrib.auth.authenticate()` and :func:`~django."
"contrib.auth.login()`: :func:`~django.contrib.auth.authenticate()` sets the "
"``user.backend`` attribute on the user object it returns."
msgstr ""
"Gunakan nilai dari atribut ``user.backend``, jika hadir. Ini mengizinkan "
"memasangkan :func:`~django.contrib.auth.authenticate()` dan :func:`~django."
"contrib.auth.login()`: :func:`~django.contrib.auth.authenticate()` menyetel "
"atribut  ``user.backend`` pada obyek user dia kembalikan."

msgid ""
"Use the ``backend`` in :setting:`AUTHENTICATION_BACKENDS`, if there is only "
"one."
msgstr ""
"Gunakan ``backend`` dalam :setting:`AUTHENTICATION_BACKENDS`, jika hanya ada "
"satu."

msgid "Otherwise, raise an exception."
msgstr "Sebaliknya, munculkan sebuah pengecualian."

msgid ""
"In cases 1 and 2, the value of the ``backend`` argument or the ``user."
"backend`` attribute should be a dotted import path string (like that found "
"in :setting:`AUTHENTICATION_BACKENDS`), not the actual backend class."
msgstr ""
"Di kasus 1 dan 2, nilai dari argumen ``backend`` atau atribut ``user."
"backend`` harus di impor bertitik jalur deretan karakter (seperti yang "
"ditemukan di :setting:`AUTHENTICATION_BACKENDS`), bukan kelas backend "
"sebenarnya."

msgid "How to log a user out"
msgstr "Bagaimana cara pengguna keluar"

msgid ""
"To log out a user who has been logged in via :func:`django.contrib.auth."
"login()`, use :func:`django.contrib.auth.logout()` within your view. It "
"takes an :class:`~django.http.HttpRequest` object and has no return value. "
"Example::"
msgstr ""
"Untuk keluar pengguna yang telah masuk melalui :func:`django.contrib.auth."
"login()`, gunakan :func:`django.contrib.auth.logout()` dalam tampilan anda. "
"Itu mengambil sebuah obyek :class:`~django.http.HttpRequest` dan tidak nilai "
"mempunyai kembalian. Contoh::"

msgid ""
"Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if "
"the user wasn't logged in."
msgstr ""
"Catat bahwa :func:`~django.contrib.auth.logout()` tidak melempar kesalahan "
"apapun jika pengguna tidak masuk."

msgid ""
"When you call :func:`~django.contrib.auth.logout()`, the session data for "
"the current request is completely cleaned out. All existing data is removed. "
"This is to prevent another person from using the same web browser to log in "
"and have access to the previous user's session data. If you want to put "
"anything into the session that will be available to the user immediately "
"after logging out, do that *after* calling :func:`django.contrib.auth."
"logout()`."
msgstr ""

msgid "Limiting access to logged-in users"
msgstr "Membatasi akses ke pengguna masuk"

msgid "The raw way"
msgstr "Cara mentah"

msgid ""
"The raw way to limit access to pages is to check :attr:`request.user."
"is_authenticated <django.contrib.auth.models.User.is_authenticated>` and "
"either redirect to a login page::"
msgstr ""

msgid "...or display an error message::"
msgstr "...atau menampilkan pesan kesalahan::"

msgid "The ``login_required`` decorator"
msgstr "Penghias ``login_required``"

msgid ""
"As a shortcut, you can use the convenient :func:`~django.contrib.auth."
"decorators.login_required` decorator::"
msgstr ""
"Sebagai jalan pintas, anda dapat menggunakan penghias :func:`~django.contrib."
"auth.decorators.login_required` yang cocok."

msgid ""
":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""
":func:`~django.contrib.auth.decorators.login_required` melakukan berikut:"

msgid ""
"If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, passing the current absolute path in the query string. "
"Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""
"Jika pengguna tidak masuk, alihkan ke :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, melewati jalur mutlak saat ini di permintaan deretan karakter. "
"Contoh: ``/accounts/login/?next=/polls/3/``."

msgid ""
"If the user is logged in, execute the view normally. The view code is free "
"to assume the user is logged in."
msgstr ""
"Jika pengguna masuk, jalankan tampilan secara biasa. Kode tampilan adalah "
"bebas untuk menganggap pengguna adalah masuk."

msgid ""
"By default, the path that the user should be redirected to upon successful "
"authentication is stored in a query string parameter called ``\"next\"``. If "
"you would prefer to use a different name for this parameter, :func:`~django."
"contrib.auth.decorators.login_required` takes an optional "
"``redirect_field_name`` parameter::"
msgstr ""
"Secara awalan, jalur yang pengguna harus dialihkan untuk atas keberhasilan "
"otentifikasi adalah disimpan di permintaan parameter deretan karakter "
"disebut ``\"next\"``. Jika anda akan memilih menggunakan nama berbeda untuk "
"parameter ini, :func:`~django.contrib.auth.decorators.login_required` "
"mengambil sebuah pilihan parameter ``redirect_field_name``."

msgid ""
"Note that if you provide a value to ``redirect_field_name``, you will most "
"likely need to customize your login template as well, since the template "
"context variable which stores the redirect path will use the value of "
"``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""
"Catat bahwa jika anda menyediakan nilai pada ``redirect_field_name``, anda "
"akan paling disukai butuh menyesuaikan cetakan masuk anda juga, sejak "
"cetakan varaibel konteks yang menyimpan jalur pengalihan akan menggunakan "
"nilai dari ``redirect_field_name``sebagai kuncinya daripada ``\"next\"`` "
"(awalan)."

msgid ""
":func:`~django.contrib.auth.decorators.login_required` also takes an "
"optional ``login_url`` parameter. Example::"
msgstr ""
":func:`~django.contrib.auth.decorators.login_required` juga mengambil sebuah "
"pilihan parameter ``login_url``. Contoh::"

msgid ""
"Note that if you don't specify the ``login_url`` parameter, you'll need to "
"ensure that the :setting:`settings.LOGIN_URL <LOGIN_URL>` and your login "
"view are properly associated. For example, using the defaults, add the "
"following lines to your URLconf::"
msgstr ""
"Catat bahwa jika anda tidak menentukan parameter ``login_url``, anda akan "
"butuh memastikan bahwa :setting:`settings.LOGIN_URL <LOGIN_URL>` dan "
"tampilan masuk anda benar terhubung. Sebagai contoh, menggunakan awalan, "
"tambah baris berikut ke URLconf anda::"

msgid ""
"The :setting:`settings.LOGIN_URL <LOGIN_URL>` also accepts view function "
"names and :ref:`named URL patterns <naming-url-patterns>`. This allows you "
"to freely remap your login view within your URLconf without having to update "
"the setting."
msgstr ""
":setting:`settings.LOGIN_URL <LOGIN_URL>` juga menerima nama-nama fungsi "
"tampilan dan :ref:`named URL patterns <naming-url-patterns>`. Ini "
"mengizinkan anda secara bebas memetakan kembali ke tampilan masuk anda dalam "
"URLconf tanpa harus memperbaharui pengaturan."

msgid ""
"The ``login_required`` decorator does NOT check the ``is_active`` flag on a "
"user, but the default :setting:`AUTHENTICATION_BACKENDS` reject inactive "
"users."
msgstr ""
"Penghias  ``login_required`` TIDAK memeriksa bendera ``is_active`` pada "
"pengguna, tetapi awalan :setting:`AUTHENTICATION_BACKENDS` menolak pengguna "
"tidak aktif."

msgid ""
"If you are writing custom views for Django's admin (or need the same "
"authorization check that the built-in views use), you may find the :func:"
"`django.contrib.admin.views.decorators.staff_member_required` decorator a "
"useful alternative to ``login_required()``."
msgstr ""
"Jika anda sedang menulis tampilan penyesuaian untuk Django admin (atau butuh "
"pemeriksaan otorisasi sama bahwa tampilan pasang-tetap digunakan), anda "
"mungkin menemukan penghias :func:`django.contrib.admin.views.decorators."
"staff_member_required` cara lain yang berguna pada ``login_required()``."

msgid "The ``LoginRequired`` mixin"
msgstr "Mixin ``LoginRequired``"

msgid ""
"When using :doc:`class-based views </topics/class-based-views/index>`, you "
"can achieve the same behavior as with ``login_required`` by using the "
"``LoginRequiredMixin``. This mixin should be at the leftmost position in the "
"inheritance list."
msgstr ""
"Ketika menggunakan :doc:`class-based views </topics/class-based-views/"
"index>`, anda dapat mencapai kebiasaan lama seperti dengan "
"``login_required`` dengan menggunakan ``LoginRequiredMixin``. Mixin harus di "
"tempat paling kanan di daftar warisan."

msgid ""
"If a view is using this mixin, all requests by non-authenticated users will "
"be redirected to the login page or shown an HTTP 403 Forbidden error, "
"depending on the :attr:`~django.contrib.auth.mixins.AccessMixin."
"raise_exception` parameter."
msgstr ""
"Jika sebuah tampilan menggunakan mixin ini, semua permintaan oleh pengguna "
"bukan-terotentifikasi akan dialihkan ke halaman masuk atau menampilkan "
"kesalahan HTTP 403 Forbidden, tergantung pada parameter :attr:`~django."
"contrib.auth.mixins.AccessMixin.raise_exception`."

msgid ""
"You can set any of the parameters of :class:`~django.contrib.auth.mixins."
"AccessMixin` to customize the handling of unauthorized users::"
msgstr ""
"Anda dapat menyetel tiap dari parameter dari :class:`~django.contrib.auth."
"mixins.AccessMixin` untuk menyesuaikan menangani dari pengguna tidak sah::"

msgid ""
"Just as the ``login_required`` decorator, this mixin does NOT check the "
"``is_active`` flag on a user, but the default :setting:"
"`AUTHENTICATION_BACKENDS` reject inactive users."
msgstr ""
"Seperti penghias ``login_required`` mixin ini TIDAK memeriksa bendera "
"``is_active`` pada pengguna, tetapi awalan :setting:"
"`AUTHENTICATION_BACKENDS` menolak pengguna tidak aktif.\t\t"

msgid "Limiting access to logged-in users that pass a test"
msgstr "Membatasi akses ke pengguna masuk yang melewatkan percobaan"

msgid ""
"To limit access based on certain permissions or some other test, you'd do "
"essentially the same thing as described in the previous section."
msgstr ""
"Untuk membatasi akses berdasarkan pada perizinan tertentu atau beberapa "
"percobaan lain, anda akan melakukan pada dasarnya hal sama seperti "
"digambarkan di bagian sebelumnya."

msgid ""
"You can run your test on :attr:`request.user <django.http.HttpRequest.user>` "
"in the view directly. For example, this view checks to make sure the user "
"has an email in the desired domain and if not, redirects to the login page::"
msgstr ""

msgid ""
"As a shortcut, you can use the convenient ``user_passes_test`` decorator "
"which performs a redirect when the callable returns ``False``::"
msgstr ""
"Sebagai sebuah jalan pintas, anda dapat menggunakan penghias "
"``user_passes_test`` yang cocok yang melakukan sebuah pengalihan ketika "
"callable mengembalikan ``False``::"

msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes a required "
"argument: a callable that takes a :class:`~django.contrib.auth.models.User` "
"object and returns ``True`` if the user is allowed to view the page. Note "
"that :func:`~django.contrib.auth.decorators.user_passes_test` does not "
"automatically check that the :class:`~django.contrib.auth.models.User` is "
"not anonymous."
msgstr ""
":func:`~django.contrib.auth.decorators.user_passes_test` mengambil argumen "
"wajib: sebuah callable yang mengambil obyek :class:`~django.contrib.auth."
"models.User` dan mengembalikan ``True`` jika pengguna diizinkan melihat "
"halaman. Catat bahwa :func:`~django.contrib.auth.decorators."
"user_passes_test` tidak secara otomatis memeriksa bahwa the :class:`~django."
"contrib.auth.models.User` bukan anonim."

msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes two optional "
"arguments:"
msgstr ""
":func:`~django.contrib.auth.decorators.user_passes_test` mengambil dua "
"argumen pilihan:"

msgid "``login_url``"
msgstr "``login_url``"

msgid ""
"Lets you specify the URL that users who don't pass the test will be "
"redirected to. It may be a login page and defaults to :setting:`settings."
"LOGIN_URL <LOGIN_URL>` if you don't specify one."
msgstr ""
"Biarkan anda menentukan URL yang pengguna tidak melewati percobaan akan "
"dialihkan. Itu mungkin halaman masuk dan awalan ke :setting:`settings."
"LOGIN_URL <LOGIN_URL>` jika anda tidak menentukan satu."

msgid "``redirect_field_name``"
msgstr "``redirect_field_name``"

msgid ""
"Same as for :func:`~django.contrib.auth.decorators.login_required`. Setting "
"it to ``None`` removes it from the URL, which you may want to do if you are "
"redirecting users that don't pass the test to a non-login page where there's "
"no \"next page\"."
msgstr ""
"Sama seperti :func:`~django.contrib.auth.decorators.login_required`. Atur "
"itu ke ``None`` memindahkannya dari URL, yang anda mungkin ingin "
"melakukannya jika anda mengalihkan pengguna yang tidak melewati percobaan ke "
"halaman bukan-masuk dimana tidak ada \"next page\"."

msgid "For example::"
msgstr "Sebagai contoh::"

msgid ""
"When using :doc:`class-based views </topics/class-based-views/index>`, you "
"can use the ``UserPassesTestMixin`` to do this."
msgstr ""
"Ketika menggunakan :doc:`class-based views </topics/class-based-views/"
"index>`, anda dapat menggunakan ``UserPassesTestMixin`` untuk melakukan ini."

msgid ""
"You have to override the ``test_func()`` method of the class to provide the "
"test that is performed. Furthermore, you can set any of the parameters of :"
"class:`~django.contrib.auth.mixins.AccessMixin` to customize the handling of "
"unauthorized users::"
msgstr ""
"Anda harus menimpa metode ``test_func()`` dari kelas untuk menyediakan "
"percobaan yang dilakukan. Lebih lanjut, anda dapat menyetel tiap parameter "
"dari :class:`~django.contrib.auth.mixins.AccessMixin` untuk menyesuaikan "
"penangangan dari pengguna tidak sah::"

msgid ""
"You can also override the ``get_test_func()`` method to have the mixin use a "
"differently named function for its checks (instead of :meth:`test_func`)."
msgstr ""
"Anda dapat juga menimpa metode ``get_test_func()`` untuk memiliki penggunaan "
"mixin fungsi bernama berbeda untuk pemeriksaannya (sebagai ganti :meth:"
"`test_func`)."

msgid "Stacking ``UserPassesTestMixin``"
msgstr "Menumpuk ``UserPassesTestMixin``"

msgid ""
"Due to the way ``UserPassesTestMixin`` is implemented, you cannot stack them "
"in your inheritance list. The following does NOT work::"
msgstr ""
"Diakrenakan cara ``UserPassesTestMixin`` diterapkan, anda tida dapat "
"menumpuk mereka di daftar warisan anda. Berikut TIDAK bekerja::"

msgid ""
"If ``TestMixin1`` would call ``super()`` and take that result into account, "
"``TestMixin1`` wouldn't work standalone anymore."
msgstr ""
"Jika ``TestMixin1`` akan memanggil ``super()`` dan mengambil hasi itu "
"kedalam akun, ``TestMixin1`` tidak akan bekerja berdiri sendiri lagi."

msgid "The ``permission_required`` decorator"
msgstr "Penghias ``permission_required``"

msgid ""
"It's a relatively common task to check whether a user has a particular "
"permission. For that reason, Django provides a shortcut for that case: the :"
"func:`~django.contrib.auth.decorators.permission_required()` decorator.::"
msgstr ""
"Itu adalah cara lain tugas umum untuk memeriksa apakah seorang pengguna "
"mempunyai perizinan khusus. Untuk alasan tersebut, Django menyediakan jalan "
"pintas untuk kasus itu: penghias the :func:`~django.contrib.auth.decorators."
"permission_required()`.::"

msgid ""
"Just like the :meth:`~django.contrib.auth.models.User.has_perm` method, "
"permission names take the form ``\"<app label>.<permission codename>\"`` (i."
"e. ``polls.add_choice`` for a permission on a model in the ``polls`` "
"application)."
msgstr ""

msgid ""
"The decorator may also take an iterable of permissions, in which case the "
"user must have all of the permissions in order to access the view."
msgstr ""
"Penghias mungkin juga mengambil perizinan berulang, dalam hal ini pengguna "
"harus memiliki semua perizinan untuk mengakses tampilan."

msgid ""
"Note that :func:`~django.contrib.auth.decorators.permission_required()` also "
"takes an optional ``login_url`` parameter::"
msgstr ""
"Catat bahwa :func:`~django.contrib.auth.decorators.permission_required()` "
"juga mengambil sebuah pilihan parameter ``login_url``:: "

msgid ""
"As in the :func:`~django.contrib.auth.decorators.login_required` decorator, "
"``login_url`` defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""
"Ketika di penghias :func:`~django.contrib.auth.decorators.login_required`, "
"awalan ``login_url``  ke :setting:`settings.LOGIN_URL <LOGIN_URL>`. "

msgid ""
"If the ``raise_exception`` parameter is given, the decorator will raise :exc:"
"`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP "
"Forbidden) view<http_forbidden_view>` instead of redirecting to the login "
"page."
msgstr ""
"Jika parameter ``raise_exception`` diberikan, penghias akan memunculkan :exc:"
"`~django.core.exceptions.PermissionDenied`, mendorong :ref:`the 403 (HTTP "
"Forbidden) view<http_forbidden_view>` daripada mengalihkan ke halaman masuk."

msgid ""
"If you want to use ``raise_exception`` but also give your users a chance to "
"login first, you can add the :func:`~django.contrib.auth.decorators."
"login_required` decorator::"
msgstr ""
"Jika anda ingin menggunakan ``raise_exception`` tetapi juga memberikan "
"pengguna anda kesempatan untuk masuk terlebih dahulu, anda dapat menambahkan "
"penghias :func:`~django.contrib.auth.decorators.login_required`:: "

msgid ""
"This also avoids a redirect loop when :class:`.LoginView`'s "
"``redirect_authenticated_user=True`` and the logged-in user doesn't have all "
"of the required permissions."
msgstr ""

msgid "The ``PermissionRequiredMixin`` mixin"
msgstr "Mixin ``PermissionRequiredMixin``"

msgid ""
"To apply permission checks to :doc:`class-based views </ref/class-based-"
"views/index>`, you can use the ``PermissionRequiredMixin``:"
msgstr ""
"Untuk memberlakukan pemeriksaan perizinan pada :doc:`class-based views </ref/"
"class-based-views/index>`, anda dapat menggunakan "
"``PermissionRequiredMixin``:"

msgid ""
"This mixin, just like the ``permission_required`` decorator, checks whether "
"the user accessing a view has all given permissions. You should specify the "
"permission (or an iterable of permissions) using the ``permission_required`` "
"parameter::"
msgstr ""
"Mixin ini, seperti penghias ``permission_required``, memeriksa apakah "
"pengguna mengakses sebuah tampilan mempunyai semua perizinan yang diberikan. "
"Anda harus menentukan perizinan (atau perulangan dari perizinan) menggunakan "
"parameter ``permission_required``::"

msgid ""
"You can set any of the parameters of :class:`~django.contrib.auth.mixins."
"AccessMixin` to customize the handling of unauthorized users."
msgstr ""
"Anda dapat menyetel tiap dari parameter dari :class:`~django.contrib.auth."
"mixins.AccessMixin` untuk menyesuaikan menangani dari pengguna tidak sah."

msgid "You may also override these methods:"
msgstr "Anda dapat juga menimpa metode ini:"

msgid ""
"Returns an iterable of permission names used by the mixin. Defaults to the "
"``permission_required`` attribute, converted to a tuple if necessary."
msgstr ""
"Mengembalikan perulangan dari nama perizinan digunakan oleh mixin. Awalan "
"pada atribut ``permission_required``, dirubah ke sebuah tuple juka "
"memungkinkan."

msgid ""
"Returns a boolean denoting whether the current user has permission to "
"execute the decorated view. By default, this returns the result of calling :"
"meth:`~django.contrib.auth.models.User.has_perms()` with the list of "
"permissions returned by :meth:`get_permission_required()`."
msgstr ""
"Mengembalikan sebuah boolean menunjukkan apakah pengguna saat ini mempunyai "
"perizinan untuk menjalankan tampilan dihiasi. Secara awalan, ini "
"mengembalikan hasil dari memanggil :meth:`~django.contrib.auth.models.User."
"has_perms()` dengan daftar perizinan dikembalikan oleh :meth:"
"`get_permission_required()`."

msgid "Redirecting unauthorized requests in class-based views"
msgstr "Mengalihkan permintaan tidak sah di tampilan berdasarkan-kelas"

msgid ""
"To ease the handling of access restrictions in :doc:`class-based views </ref/"
"class-based-views/index>`, the ``AccessMixin`` can be used to configure the "
"behavior of a view when access is denied. Authenticated users are denied "
"access with an HTTP 403 Forbidden response. Anonymous users are redirected "
"to the login page or shown an HTTP 403 Forbidden response, depending on the :"
"attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` attribute."
msgstr ""

msgid ""
"Default return value for :meth:`get_login_url`.  Defaults to ``None`` in "
"which case :meth:`get_login_url` falls back to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`."
msgstr ""
"Nilai balik awalan untuk :meth:`get_login_url`. Awalan pada ``None`` dalam "
"hal ini :meth:`get_login_url` jatuh kebelakang untuk :setting:`settings."
"LOGIN_URL <LOGIN_URL>`."

msgid ""
"Default return value for :meth:`get_permission_denied_message`. Defaults to "
"an empty string."
msgstr ""
"Nilai balik awalan untuk :meth:`get_permission_denied_message`. Awalan pada "
"sebuah deretan karakter kosong."

msgid ""
"Default return value for :meth:`get_redirect_field_name`. Defaults to ``"
"\"next\"``."
msgstr ""
"Nilai balikan awalan untuk :meth:`get_redirect_field_name`. Awalan ke ``"
"\"next\"``."

msgid ""
"If this attribute is set to ``True``, a :class:`~django.core.exceptions."
"PermissionDenied` exception is raised when the conditions are not met.  When "
"``False`` (the default), anonymous users are redirected to the login page."
msgstr ""

msgid ""
"Returns the URL that users who don't pass the test will be redirected to. "
"Returns :attr:`login_url` if set, or :setting:`settings.LOGIN_URL "
"<LOGIN_URL>` otherwise."
msgstr ""
"Mengembalikan URL yang pengguna tidak melewati percobaan akan dialihkan. "
"Mengembalikan :attr:`login_url` jika disetel, atau sebaliknya :setting:"
"`settings.LOGIN_URL <LOGIN_URL>`."

msgid ""
"When :attr:`raise_exception` is ``True``, this method can be used to control "
"the error message passed to the error handler for display to the user. "
"Returns the :attr:`permission_denied_message` attribute by default."
msgstr ""
"Ketika :attr:`raise_exception` adalah ``True``, metode ini dapat digunakan "
"untuk mengendalikan pesan kesalahan dilewatkan ke penangan kesalahan untuk "
"menampilkan ke pengguna. Mengembalikan atribut :attr:"
"`permission_denied_message` secara awalan."

msgid ""
"Returns the name of the query parameter that will contain the URL the user "
"should be redirected to after a successful login. If you set this to "
"``None``, a query parameter won't be added. Returns the :attr:"
"`redirect_field_name` attribute by default."
msgstr ""
"Mengembalikan nama dari permintaan parameter yang akan mengandung URL "
"pengguna harus dialihkan setelah berhasil masuk. Jika anda menyetel ini ke "
"``None``, sebuah permintaan parameter tidak akan ditambahkan. Mengembalikan "
"atribut :attr:`redirect_field_name` secara awalan."

msgid ""
"Depending on the value of ``raise_exception``, the method either raises a :"
"exc:`~django.core.exceptions.PermissionDenied` exception or redirects the "
"user to the ``login_url``, optionally including the ``redirect_field_name`` "
"if it is set."
msgstr ""
"Tergantung pada nilai dari ``raise_exception``, metode antara memunculkan "
"pengecualian :exc:`~django.core.exceptions.PermissionDenied` atau "
"mengalihkan pengguna ke ``login_url``, secara pilihan menyertakan "
"``redirect_field_name`` jika itu disetel."

msgid "Session invalidation on password change"
msgstr "Penghapusan sesi pada perubahan sandi"

msgid ""
"If your :setting:`AUTH_USER_MODEL` inherits from :class:`~django.contrib."
"auth.models.AbstractBaseUser` or implements its own :meth:`~django.contrib."
"auth.models.AbstractBaseUser.get_session_auth_hash()` method, authenticated "
"sessions will include the hash returned by this function. In the :class:"
"`~django.contrib.auth.models.AbstractBaseUser` case, this is an HMAC of the "
"password field. Django verifies that the hash in the session for each "
"request matches the one that's computed during the request. This allows a "
"user to log out all of their sessions by changing their password."
msgstr ""
"Jika :setting:`AUTH_USER_MODEL` anda warisan dari :class:`~django.contrib."
"auth.models.AbstractBaseUser` atau menerapkan metode :meth:`~django.contrib."
"auth.models.AbstractBaseUser.get_session_auth_hash()` miliknya, sesi "
"terotentifikasi akan menyertakan campuran dikembalikan oleh fungsi ini. Di "
"kasus :class:`~django.contrib.auth.models.AbstractBaseUser`, ini adalah HMAC "
"dari bidang sandi. Django memeriksa bahwa campuran di sesi untuk setiap "
"permintaan cocok satu yang dihitung selama permintaan. Ini mengizinkan "
"pengguna untuk keluar dari sesi mereka dengan merubah sandi mereka."

msgid ""
"The default password change views included with Django, :class:`~django."
"contrib.auth.views.PasswordChangeView` and the ``user_change_password`` view "
"in the :mod:`django.contrib.auth` admin, update the session with the new "
"password hash so that a user changing their own password won't log "
"themselves out. If you have a custom password change view and wish to have "
"similar behavior, use the :func:`update_session_auth_hash` function."
msgstr ""
"Tampilan rubah sandi awalan disertakan dengan Django, tampilan :class:"
"`~django.contrib.auth.views.PasswordChangeView` dan the "
"``user_change_password`` dalam admin :mod:`django.contrib.auth`, perbaharui "
"sesi dengan campuran sandi baru sehingga pengguna merubah sandi mereka "
"sendiri tidak keluar. Jika anda mempunyai tampilan rubah sandi penyesuaian "
"dan berharap memiliki perilaku sama, gunakan fungsi :func:"
"`update_session_auth_hash`."

msgid ""
"This function takes the current request and the updated user object from "
"which the new session hash will be derived and updates the session hash "
"appropriately. It also rotates the session key so that a stolen session "
"cookie will be invalidated."
msgstr ""
"Fungsi ini mengambil permintaan saat ini dan memperbaharui obyek user dari "
"dimana campuran sesi baru akan berasal dan memperbaharui campuran sesi "
"dengan benar. Itu juga memutar kunci sesi sehingga kue sesi tercuri akan "
"menjadi tidak sah."

msgid "Example usage::"
msgstr "Contoh penggunaan:"

msgid ""
"Since :meth:`~django.contrib.auth.models.AbstractBaseUser."
"get_session_auth_hash()` is based on :setting:`SECRET_KEY`, updating your "
"site to use a new secret will invalidate all existing sessions."
msgstr ""
"Sejak :meth:`~django.contrib.auth.models.AbstractBaseUser."
"get_session_auth_hash()` adalah berdasarkan pada :setting:`SECRET_KEY`, "
"memperbaharui situs anda untuk menggunakan rahasia baru akan menghapus semua "
"sesi yang ada."

msgid "Authentication Views"
msgstr "Tampilan Otentifikasi"

msgid ""
"Django provides several views that you can use for handling login, logout, "
"and password management. These make use of the :ref:`stock auth forms <built-"
"in-auth-forms>` but you can pass in your own forms as well."
msgstr ""
"Django menyediakan beberapa tampilan yang anda dapat gunakan untuk menangani "
"masuk, keluarm dan pengelolaan sandi. Ini menggunakan dari :ref:`stock auth "
"forms <built-in-auth-forms>` tetapi anda dapat melewatkan nya ke dalam "
"formulir anda sendiri juga."

msgid ""
"Django provides no default template for the authentication views. You should "
"create your own templates for the views you want to use. The template "
"context is documented in each view, see :ref:`all-authentication-views`."
msgstr ""
"Django menyediakan tidak ada awalan cetakan untuk tampilan otentifikasi. "
"Anda harus membuat cetakan anda sendiri untuk tampilan anda ingin gunakan. "
"Konteks cetakan adalah terdokumentasi di setiap tampilan, lihat :ref:`all-"
"authentication-views`."

msgid "Using the views"
msgstr "Menggunakan tamplian"

msgid ""
"There are different methods to implement these views in your project. The "
"easiest way is to include the provided URLconf in ``django.contrib.auth."
"urls`` in your own URLconf, for example::"
msgstr ""
"Ada perbedaan metode untuk menerapkan tampilan ini di proyek anda. Cara "
"termudah adalah menyertakan URLconf yang disediakan di ``django.contrib.auth."
"urls`` dalam URLConf anda sendiri, sebagai contoh::"

msgid "This will include the following URL patterns::"
msgstr "Ini akan menyertakan pola URL berikut::"

msgid ""
"The views provide a URL name for easier reference. See :doc:`the URL "
"documentation </topics/http/urls>` for details on using named URL patterns."
msgstr ""
"Tampilan menyediakan nama URL untuk acuan lebih mudah. Lihat :doc:`the URL "
"documentation </topics/http/urls>` untuk rincian pada menggunakan corak URL "
"bernama."

msgid ""
"If you want more control over your URLs, you can reference a specific view "
"in your URLconf::"
msgstr ""
"Jika anda ingin kendali lebih terhadap URL anda, anda dapat mengacu tampilan "
"khusus di URLconf::"

msgid ""
"The views have optional arguments you can use to alter the behavior of the "
"view. For example, if you want to change the template name a view uses, you "
"can provide the ``template_name`` argument. A way to do this is to provide "
"keyword arguments in the URLconf, these will be passed on to the view. For "
"example::"
msgstr ""
"Tampilan mempunyai argumen pilihan anda dapat gunakan untuk merubah "
"kebiasaan dari tampilan. Sebagai contoh, jika anda ingin merubah nama "
"cetakan tampilan kegunaan, anda dapat menyediakan argumen ``template_name``. "
"Sebuah cara untuk melakukan ini adalah menyediakan argumen kata kunci dalam "
"URLconf, ini akan dilewatkan ke tampilan. Sebagai contoh::"

msgid ""
"All views are :doc:`class-based </topics/class-based-views/index>`, which "
"allows you to easily customize them by subclassing."
msgstr ""
"Semua tampilan adalah :doc:`class-based </topics/class-based-views/index>`, "
"yang mengizinkan anda dengan mudah menyesuaikan mereka dengan mensubkelaskan."

msgid "All authentication views"
msgstr "Semua tempilan otentifikasi"

msgid ""
"This is a list with all the views ``django.contrib.auth`` provides. For "
"implementation details see :ref:`using-the-views`."
msgstr ""
"Ini adalah daftar dengan semua tamilan ``django.contrib.auth`` sediakan. "
"Untuk penerapan rincian lihat :ref:`using-the-views`."

msgid "**URL name:** ``login``"
msgstr "**Nama URL:** ``masuk``"

msgid ""
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""
"Lihat :doc:`the URL documentation </topics/http/urls>` untuk rincian pada "
"menggunakan corak URL bernama."

msgid "**Methods and Attributes**"
msgstr "**Cara dan Atribut**"

msgid ""
"The name of a template to display for the view used to log the user in. "
"Defaults to :file:`registration/login.html`."
msgstr ""

msgid ""
"The URL to redirect to after login. Defaults to :setting:"
"`LOGIN_REDIRECT_URL`."
msgstr ""

msgid ""
"The name of a ``GET`` field containing the URL to redirect to after login. "
"Defaults to ``next``. Overrides the :meth:`get_default_redirect_url` URL if "
"the given ``GET`` parameter is passed."
msgstr ""

msgid ""
"A callable (typically a form class) to use for authentication. Defaults to :"
"class:`~django.contrib.auth.forms.AuthenticationForm`."
msgstr ""

msgid ""
"A dictionary of context data that will be added to the default context data "
"passed to the template."
msgstr ""

msgid ""
"A boolean that controls whether or not authenticated users accessing the "
"login page will be redirected as if they had just successfully logged in. "
"Defaults to ``False``."
msgstr ""

msgid ""
"If you enable ``redirect_authenticated_user``, other websites will be able "
"to determine if their visitors are authenticated on your site by requesting "
"redirect URLs to image files on your website. To avoid this \"`social media "
"fingerprinting <https://robinlinus.github.io/socialmedia-leak/>`_\" "
"information leakage, host all images and your favicon on a separate domain."
msgstr ""
"Jika anda mengadakan ``redirect_authenticated_user``, jaringan situs lainnya "
"akan dapat menentukan jika pengunjung mereka adalah terotentifikasi pada "
"situs anda dengan meminta pengalihan URL ke berkas gambar pada situs "
"jaringan anda. Untuk menghindari ini \"`social media fingerprinting <https://"
"robinlinus.github.io/socialmedia-leak/>`_\" kebocoran informasi, simpan "
"semua gambar dan favicon anda pada ranah terpisah."

msgid ""
"Enabling ``redirect_authenticated_user`` can also result in a redirect loop "
"when using the :func:`.permission_required` decorator unless the "
"``raise_exception`` parameter is used."
msgstr ""

msgid ""
"A :class:`set` of hosts, in addition to :meth:`request.get_host() <django."
"http.HttpRequest.get_host>`, that are safe for redirecting after login. "
"Defaults to an empty :class:`set`."
msgstr ""

msgid ""
"Returns the URL to redirect to after login. The default implementation "
"resolves and returns :attr:`next_page` if set, or :setting:"
"`LOGIN_REDIRECT_URL` otherwise."
msgstr ""

msgid "Here's what ``LoginView`` does:"
msgstr "Ini adalah apa ``LoginView`` lakukan:"

msgid ""
"If called via ``GET``, it displays a login form that POSTs to the same URL. "
"More on this in a bit."
msgstr ""
"Jika dipanggil melalui ``GET``, itu menampilkan formulir masuk yang POST ke "
"URL sama.Lebih dari ini dalam bit."

msgid ""
"If called via ``POST`` with user submitted credentials, it tries to log the "
"user in. If login is successful, the view redirects to the URL specified in "
"``next``. If ``next`` isn't provided, it redirects to :setting:`settings."
"LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/"
"profile/``). If login isn't successful, it redisplays the login form."
msgstr ""
"Jika dipanggil melalui ``POST`` dengan pengguna mengajukan surat "
"kepercayaan, itu mencoba untuk masuk pengguna. Jika masuk berhasil, tampilan "
"mengalihkan ke URL ditentukan di ``next`` tidak menyediakan, itu mengalihkan "
"ke :setting:`settings.LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (yang awalan "
"menjadi  ``/accounts/profile/``). Jika masuk tidak berhasil, itu menampilkan "
"kembali formulir masuk."

msgid ""
"It's your responsibility to provide the html for the login template , called "
"``registration/login.html`` by default. This template gets passed four "
"template context variables:"
msgstr ""
"Itu adalah tanggung jawab anda untuk menyediakan html untuk cetakan masuk, "
"dipanggil ``registration/login.html`` secara awalan. Cetakan ini dilewatkan "
"empat cetakan variabel konteks:"

msgid ""
"``form``: A :class:`~django.forms.Form` object representing the :class:"
"`~django.contrib.auth.forms.AuthenticationForm`."
msgstr ""
"``form``: Sebuah obyek :class:`~django.forms.Form` mewakili :class:`~django."
"contrib.auth.forms.AuthenticationForm`."

msgid ""
"``next``: The URL to redirect to after successful login. This may contain a "
"query string, too."
msgstr ""
"``next``: URL untuk dialihkan setelah berhasil masuk. Ini mungkin mengandung "
"permintaan string, juga."

msgid ""
"``site``: The current :class:`~django.contrib.sites.models.Site`, according "
"to the :setting:`SITE_ID` setting. If you don't have the site framework "
"installed, this will be set to an instance of :class:`~django.contrib.sites."
"requests.RequestSite`, which derives the site name and domain from the "
"current :class:`~django.http.HttpRequest`."
msgstr ""
"``site``: :class:`~django.contrib.sites.models.Site`saat ini, menurut "
"pengaturan :setting:`SITE_ID`. Jika anda tidak mempunyai kerangka kerja "
"situs terpasang, ini akan disetel ke sebuah instance dari :class:`~django."
"contrib.sites.requests.RequestSite`, yang memperoleh nama situs dan ranah "
"dari :class:`~django.http.HttpRequest` saat ini."

msgid ""
"``site_name``: An alias for ``site.name``. If you don't have the site "
"framework installed, this will be set to the value of :attr:`request."
"META['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :"
"doc:`/ref/contrib/sites`."
msgstr ""
"``site_name``: Sebuah nama lain untuk ``site.name``. Jika anda tidak "
"mempunyai kerangka kerja situs terpasang, ini akan disetel ke nilai dari :"
"attr:`request.META['SERVER_NAME'] <django.http.HttpRequest.META>`. Untuk "
"lebih di situs, lihat :doc:`/ref/contrib/sites`."

msgid ""
"If you'd prefer not to call the template :file:`registration/login.html`, "
"you can pass the ``template_name`` parameter via the extra arguments to the "
"``as_view`` method in your URLconf. For example, this URLconf line would "
"use :file:`myapp/login.html` instead::"
msgstr ""
"Jika anda memilih tidak memanggil cetakan :file:`registration/login.html`, "
"anda dapat melewatkan parameter ``template_name`` melalui argumen tambahan "
"pada metode ``as_view`` dalam URLConf anda. Sebagai contoh, baris URLconf "
"ini akan menggunakan :file:`myapp/login.html` sebagai gantinya."

msgid ""
"You can also specify the name of the ``GET`` field which contains the URL to "
"redirect to after login using ``redirect_field_name``. By default, the field "
"is called ``next``."
msgstr ""
"Anda dapat juga menentukan nama dari bidang ``GET`` yang mengandung URL "
"untuk mengalihkan setelah masuk menggunakan ``redirect_field_name``. Secara "
"awalan, bidang dipanggil ``next``."

msgid ""
"Here's a sample :file:`registration/login.html` template you can use as a "
"starting point. It assumes you have a :file:`base.html` template that "
"defines a ``content`` block:"
msgstr ""
"Ini adalah sebuah contoh cetakan :file:`registration/login.html` anda dapat "
"gunakan sebagai titik awalan. Itu menganggap anda memiliki sebuah cetakan :"
"file:`base.html` yang menentukan sebuah blok ``content``."

msgid ""
"If you have customized authentication (see :doc:`Customizing Authentication "
"</topics/auth/customizing>`) you can use a custom authentication form by "
"setting the ``authentication_form`` attribute. This form must accept a "
"``request`` keyword argument in its ``__init__()`` method and provide a "
"``get_user()`` method which returns the authenticated user object (this "
"method is only ever called after successful form validation)."
msgstr ""
"Jika anda telah menyesuaiakan autentifikasi (lihat :doc:`Customizing "
"Authentication 1`) anda dapat menggunakan formulir autentifikasi penyesuaian "
"dengan mengatur atribut ``authentication_form``. Formulir ini harus menerima "
"sebuah argumen katakunci ``request`` dalam metode ``__init__()`` nya dan "
"menyediakan metode ``get_user()`` yang mengembalikan obyek pengguna "
"terautentifikasi (metode ini hanya dipanggil setelah keberhasilan formulir "
"pengesahan). "

msgid "Logs a user out."
msgstr "Pengguna keluar"

msgid "**URL name:** ``logout``"
msgstr "**Nama URL:** ``logout``"

msgid "**Attributes:**"
msgstr "**Atribut**"

msgid ""
"The URL to redirect to after logout. Defaults to :setting:"
"`LOGOUT_REDIRECT_URL`."
msgstr ""

msgid ""
"The full name of a template to display after logging the user out. Defaults "
"to :file:`registration/logged_out.html`."
msgstr ""

msgid ""
"The name of a ``GET`` field containing the URL to redirect to after log out. "
"Defaults to ``'next'``. Overrides the :attr:`next_page` URL if the given "
"``GET`` parameter is passed."
msgstr ""

msgid ""
"A :class:`set` of hosts, in addition to :meth:`request.get_host() <django."
"http.HttpRequest.get_host>`, that are safe for redirecting after logout. "
"Defaults to an empty :class:`set`."
msgstr ""

msgid "**Template context:**"
msgstr "**Kontek cetakan**"

msgid "``title``: The string \"Logged out\", localized."
msgstr "``title``: String \"Logged out\", lokalisasi."

msgid "Logs a user out, then redirects to the login page."
msgstr "Pengguna keluar, kemudian mengalihkan ke halaman masuk."

msgid "**URL name:** No default URL provided"
msgstr "**Nama URL:** Tidak ada URL awal disediakan"

msgid "**Optional arguments:**"
msgstr "**Argumen pilihan**"

msgid ""
"``login_url``: The URL of the login page to redirect to. Defaults to :"
"setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""
"``login_url``: URL dari halaman masuk untuk mengalihkan. Awalan menjadi :"
"setting:`settings.LOGIN_URL <LOGIN_URL>` jika tidak diberikan."

msgid "**URL name:** ``password_change``"
msgstr "**Nama URL:** ``password_change``"

msgid "Allows a user to change their password."
msgstr "Izinkan pengguna merubah sandi mereka."

msgid ""
"The full name of a template to use for displaying the password change form. "
"Defaults to :file:`registration/password_change_form.html` if not supplied."
msgstr ""

msgid ""
"The URL to redirect to after a successful password change. Defaults to "
"``'password_change_done'``."
msgstr ""

msgid ""
"A custom \"change password\" form which must accept a ``user`` keyword "
"argument. The form is responsible for actually changing the user's password. "
"Defaults to :class:`~django.contrib.auth.forms.PasswordChangeForm`."
msgstr ""

msgid "``form``: The password change form (see ``form_class`` above)."
msgstr "``form``: Formulir rubah sandi (lihat ``form_class`` diatas)."

msgid "**URL name:** ``password_change_done``"
msgstr "**Nama URL:** ``password_change_done``"

msgid "The page shown after a user has changed their password."
msgstr "Halaman muncul setelah pengguna telah merubah sandi mereka."

msgid ""
"The full name of a template to use. Defaults to :file:`registration/"
"password_change_done.html` if not supplied."
msgstr ""

msgid "**URL name:** ``password_reset``"
msgstr "**Nama URL:** ``password_reset``"

msgid ""
"Allows a user to reset their password by generating a one-time use link that "
"can be used to reset the password, and sending that link to the user's "
"registered email address."
msgstr ""
"Mengizinkan seorang pengguna menyetel kembali sandi dengan membangkitkan "
"satu-kali  penggunaan tautan yang dapat digunakan untuk menyetel kembali "
"sandi, dan mengirim tautan itu ke alamat surel pengguna terdaftar."

msgid "This view will send an email if the following conditions are met:"
msgstr ""

msgid "The email address provided exists in the system."
msgstr ""

msgid "The requested user is active (``User.is_active`` is ``True``)."
msgstr ""

msgid ""
"If the email address provided does not exist in the system, this view won't "
"send an email, but the user won't receive any error message either. This "
"prevents information leaking to potential attackers. If you want to provide "
"an error message in this case, you can subclass :class:`~django.contrib.auth."
"forms.PasswordResetForm` and use the ``form_class`` attribute."
msgstr ""
"Jika alamat sandi disediakan tidak ada dalam sistem, tampilan ini tidak akan "
"mengirim sebuah surel, tetapi pengguna tidak akan menerima pesan kesalahan "
"apapun juga. Ini mencegah kebocoran informasi pada penyerang potensial. Jika "
"anda ingin menyediakan sebuah pesan kesalahan dalam kasus ini, anda dapat "
"mensubkelaskan :class:`~django.contrib.auth.forms.PasswordResetForm` dan "
"menggunakan atribut ``form_class``."

msgid ""
"Be aware that sending an email costs extra time, hence you may be vulnerable "
"to an email address enumeration timing attack due to a difference between "
"the duration of a reset request for an existing email address and the "
"duration of a reset request for a nonexistent email address. To reduce the "
"overhead, you can use a 3rd party package that allows to send emails "
"asynchronously, e.g. `django-mailer <https://pypi.org/project/django-mailer/"
">`_."
msgstr ""

msgid ""
"Users flagged with an unusable password (see :meth:`~django.contrib.auth."
"models.User.set_unusable_password()` aren't allowed to request a password "
"reset to prevent misuse when using an external authentication source like "
"LDAP. Note that they won't receive any error message since this would expose "
"their account's existence but no mail will be sent either."
msgstr ""
"Pengguna ditandai dengan sandi tidak digunakan (lihat :meth:`~django.contrib."
"auth.models.User.set_unusable_password()` tidak diizinkan untuk meminta "
"menyetel kembali sandi untuk mencegah penyalahgunaan ketika menggunakan "
"sumber autentifikasi luar seperti LDAP. Catat bahwa mereka tidak akan "
"menerima pesan kesalahan apapun sejak ini akan membuat wujud akun mereka "
"tetapi tidak ada surat akan dikirim juga."

msgid ""
"The full name of a template to use for displaying the password reset form. "
"Defaults to :file:`registration/password_reset_form.html` if not supplied."
msgstr ""

msgid ""
"Form that will be used to get the email of the user to reset the password "
"for. Defaults to :class:`~django.contrib.auth.forms.PasswordResetForm`."
msgstr ""

msgid ""
"The full name of a template to use for generating the email with the reset "
"password link. Defaults to :file:`registration/password_reset_email.html` if "
"not supplied."
msgstr ""

msgid ""
"The full name of a template to use for the subject of the email with the "
"reset password link. Defaults to :file:`registration/password_reset_subject."
"txt` if not supplied."
msgstr ""

msgid ""
"Instance of the class to check the one time link. This will default to "
"``default_token_generator``, it's an instance of ``django.contrib.auth."
"tokens.PasswordResetTokenGenerator``."
msgstr ""

msgid ""
"The URL to redirect to after a successful password reset request. Defaults "
"to ``'password_reset_done'``."
msgstr ""

msgid ""
"A valid email address. By default Django uses the :setting:"
"`DEFAULT_FROM_EMAIL`."
msgstr ""

msgid ""
"The full name of a template to use for generating a :mimetype:`text/html` "
"multipart email with the password reset link. By default, HTML email is not "
"sent."
msgstr ""

msgid ""
"A dictionary of context data that will be available in the email template. "
"It can be used to override default template context values listed below e.g. "
"``domain``."
msgstr ""

msgid ""
"``form``: The form (see ``form_class`` above) for resetting the user's "
"password."
msgstr ""
"``form``: Formulir (lihat ``form_class`` diatas) untuk mengatur kembali "
"sandi pengguna."

msgid "**Email template context:**"
msgstr "**Konteks cetakan surel:**"

msgid "``email``: An alias for ``user.email``"
msgstr "``email``: Sebuah nama lain untuk ``user.email``"

msgid ""
"``user``: The current :class:`~django.contrib.auth.models.User`, according "
"to the ``email`` form field. Only active users are able to reset their "
"passwords (``User.is_active is True``)."
msgstr ""
"``user``: :class:`~django.contrib.auth.models.User` saat ini, menurut pada "
"bidang formulir ``email``. Hanya pengguna aktif yang dapa menyetel kembali "
"sandi mereka (``User.is_active adalah True``)."

msgid ""
"``domain``: An alias for ``site.domain``. If you don't have the site "
"framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""
"``domain``: Sebuah nama lain untuk ``site.domain``. Jika anda tidak "
"mempunyai kerangka kerja situs terpasang, ini akan disetel ke nilai dari "
"``request.get_host()``."

msgid "``protocol``: http or https"
msgstr "``protocol``: http atau https"

msgid "``uid``: The user's primary key encoded in base 64."
msgstr "``uid``: Primary key pengguna disandikan dalam base 64."

msgid "``token``: Token to check that the reset link is valid."
msgstr ""
"``token``: Token untuk memeriksa bahwa tautan menyetel kembali adalah sah."

msgid ""
"Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""
"Contoh ``registration/password_reset_email.html`` (cetakan badan email):"

msgid ""
"The same template context is used for subject template. Subject must be "
"single line plain text string."
msgstr ""
"Konteks cetakan sama digunakan untuk cetakan subyek. Subyek harus berupa "
"strng teks polosbaris tunggal."

msgid "**URL name:** ``password_reset_done``"
msgstr "**Nama URL:** ``password_reset_done``"

msgid ""
"The page shown after a user has been emailed a link to reset their password. "
"This view is called by default if the :class:`PasswordResetView` doesn't "
"have an explicit ``success_url`` URL set."
msgstr ""
"Halaman muncul setelah pengguna telah disurelkan sebuah tautan untuk "
"menyetel kembali sandi mereka. Tampilan ini dipanggil sebagai awalan jika :"
"class:`PasswordResetView` tidak mempunyai kumpulan URL ``success_url`` yang "
"jelas."

msgid ""
"If the email address provided does not exist in the system, the user is "
"inactive, or has an unusable password, the user will still be redirected to "
"this view but no email will be sent."
msgstr ""
"Jika alamat surel disediakan tidak ada di sistem, pengguna adalah tidak "
"aktif, atau mempunyai sebuah sandi tidak berguna, pengguna akan masih "
"dialihkan ke tampilan ini tetapi tidak ada surel yang akan dikirim."

msgid ""
"The full name of a template to use. Defaults to :file:`registration/"
"password_reset_done.html` if not supplied."
msgstr ""

msgid "**URL name:** ``password_reset_confirm``"
msgstr "**Nama URL:** ``password_reset_confirm``"

msgid "Presents a form for entering a new password."
msgstr "Mengajukan sebuah formulir untuk memasukkan sebuah sandi baru."

msgid "**Keyword arguments from the URL:**"
msgstr "**Argumen katakunci dari URL:**"

msgid "``uidb64``: The user's id encoded in base 64."
msgstr "``uidb64``: id pengguna disandikan dalam base 64."

msgid "``token``: Token to check that the password is valid."
msgstr "``token``: Token untuk memeriksa bahwa sandi adalah sah."

msgid ""
"The full name of a template to display the confirm password view. Default "
"value is :file:`registration/password_reset_confirm.html`."
msgstr ""

msgid ""
"Instance of the class to check the password. This will default to "
"``default_token_generator``, it's an instance of ``django.contrib.auth."
"tokens.PasswordResetTokenGenerator``."
msgstr ""

msgid ""
"A boolean indicating if the user should be automatically authenticated after "
"a successful password reset. Defaults to ``False``."
msgstr ""

msgid ""
"A dotted path to the authentication backend to use when authenticating a "
"user if ``post_reset_login`` is ``True``. Required only if you have "
"multiple :setting:`AUTHENTICATION_BACKENDS` configured. Defaults to ``None``."
msgstr ""

msgid ""
"Form that will be used to set the password. Defaults to :class:`~django."
"contrib.auth.forms.SetPasswordForm`."
msgstr ""

msgid ""
"URL to redirect after the password reset done. Defaults to "
"``'password_reset_complete'``."
msgstr ""

msgid ""
"Token parameter displayed as a component of password reset URLs. Defaults to "
"``'set-password'``."
msgstr ""

msgid ""
"``form``: The form (see ``form_class`` above) for setting the new user's "
"password."
msgstr ""
"``form``: Formulir (lihat ``form_class`` above) untuk pengaturan san "
"pengguna baru."

msgid ""
"``validlink``: Boolean, True if the link (combination of ``uidb64`` and "
"``token``) is valid or unused yet."
msgstr ""
"``validlink``: Boolean, True jika tautan (perpaduan dari ``uidb64`` dan "
"``token``) adalah sah atau tidak digunakan."

msgid "**URL name:** ``password_reset_complete``"
msgstr "**Nama URL:** ``password_reset_complete``"

msgid ""
"Presents a view which informs the user that the password has been "
"successfully changed."
msgstr ""
"Menghadirkan sebuah tampilan yang menginformasikan pengguna bahwa sandi "
"telah berhasil dirubah."

msgid ""
"The full name of a template to display the view. Defaults to :file:"
"`registration/password_reset_complete.html`."
msgstr ""

msgid "Helper functions"
msgstr "Fungsi pembantu"

msgid ""
"Redirects to the login page, and then back to another URL after a successful "
"login."
msgstr ""
"Dialihkan ke halaman masuk, dan kemudian kembali ke URL lain setelah "
"berhasil masuk."

msgid "**Required arguments:**"
msgstr "**Argumen diwajibkan:**"

msgid "``next``: The URL to redirect to after a successful login."
msgstr "``next``: URL untuk mengalihkan setelah berhasil masuk."

msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next`` if the given ``GET`` parameter "
"is passed."
msgstr ""
"``redirect_field_name``: Nama dari bidang ``GET`` mengandung URL untuk "
"mengalihkan ke setelah keluar. Menimpa ``next`` jika parameter ``GET`` yang "
"diberikan lolos."

msgid "Built-in forms"
msgstr "Formulir siap pakai"

msgid ""
"If you don't want to use the built-in views, but want the convenience of not "
"having to write forms for this functionality, the authentication system "
"provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""
"Jika anda tidak ingin menggunakan tampilan siap-pakai, tetapi ingin dengan "
"meyakinkan tidak menulis formulir untuk kegunaan ini, sistem autentifikasi "
"menyediakan beberapa formulir siap-pakai ditempatkan di :mod:`django.contrib."
"auth.forms`:"

msgid ""
"The built-in authentication forms make certain assumptions about the user "
"model that they are working with. If you're using a :ref:`custom user model "
"<auth-custom-user>`, it may be necessary to define your own forms for the "
"authentication system. For more information, refer to the documentation "
"about :ref:`using the built-in authentication forms with custom user models "
"<custom-users-and-the-built-in-auth-forms>`."
msgstr ""
"Formulir autentifikasi siap-pakai membuat pendapat tertentu tentang model "
"user yang mereka bekerja dengannya. Jika anda sedang menggunakan sebuah :ref:"
"`custom user model <auth-custom-user>`, itu mungkin diperlukan menentukan "
"formulir anda sendiri untuk sistem autentifikasi. Untuk informasi lebih, "
"mengacu pada dokumentasi tentang :ref:`using the built-in authentication "
"forms with custom user models <custom-users-and-the-built-in-auth-forms>`."

msgid "A form used in the admin interface to change a user's password."
msgstr ""
"Sebuah formulir digunakan di antarmuka admin untuk merubah sandi pengguna."

msgid "Takes the ``user`` as the first positional argument."
msgstr "Mengambil argumen ``user`` sebagai argumen penempatan pertama."

msgid "A form for logging a user in."
msgstr "Sebuah formulir untuk pengguna masuk."

msgid ""
"Takes ``request`` as its first positional argument, which is stored on the "
"form instance for use by sub-classes."
msgstr ""
"Mengambil ``request`` sebagai argumen penempatan pertama, yang disimpan pada "
"instance formulir untuk digunakan oleh sub-kelas."

msgid ""
"By default, ``AuthenticationForm`` rejects users whose ``is_active`` flag is "
"set to ``False``. You may override this behavior with a custom policy to "
"determine which users can log in. Do this with a custom form that subclasses "
"``AuthenticationForm`` and overrides the ``confirm_login_allowed()`` method. "
"This method should raise a :exc:`~django.core.exceptions.ValidationError` if "
"the given user may not log in."
msgstr ""
"Secara awalan, ``AuthenticationForm`` menolak pengguna yang bendera "
"``is_active`` disetel menjadi ``False``. Anda mungkin menimpa kebiasaan ini "
"dengan kebijakan penyesuaian untuk menentukan pengguna mana dapat masuk. "
"Lakukan ini dengan formulir penyesuaian yang mensubkelas "
"``AuthenticationForm`` dan menimpa metode ``confirm_login_allowed()``. "
"Metode ini harus memunculkan :exc:`~django.core.exceptions.ValidationError` "
"jika pengguna yang diberikan tidak masuk."

msgid ""
"For example, to allow all users to log in regardless of \"active\" status::"
msgstr ""
"Sebagai contoh, untuk mengizinkan semua pengguna masuk tanpa memperhatikan "
"keadaan \"active\"::"

msgid ""
"(In this case, you'll also need to use an authentication backend that allows "
"inactive users, such as :class:`~django.contrib.auth.backends."
"AllowAllUsersModelBackend`.)"
msgstr ""
"(Dalam kasus ini, anda akan butuh menggunakan sebuah backend autentifikasi "
"yang megnzinkan pengguna tidak aktif, seperti :class:`~django.contrib.auth."
"backends.AllowAllUsersModelBackend`.)"

msgid "Or to allow only some active users to log in::"
msgstr "Atau mengizinkan hanya beberapa pengguna aktif untuk masuk::"

msgid "A form for allowing a user to change their password."
msgstr ""
"Sebuah formulir untuk mengizinkan seorang pengguna merubah sandi mereka."

msgid ""
"A form for generating and emailing a one-time use link to reset a user's "
"password."
msgstr ""
"Sebuah formulir untuk membangkitkan dan mensurelkan tautan penggunaan satu-"
"kali untuk menyetel kembali sandi pengguna."

msgid ""
"Uses the arguments to send an ``EmailMultiAlternatives``. Can be overridden "
"to customize how the email is sent to the user."
msgstr ""
"Menggunakan argumen untuk mengirimkan sebuah ``EmailMultiAlternatives``. "
"Dapat ditimpa untuk menyesuaikan bagaimana surel dikirim ke pengguna."

msgid "Parameters"
msgstr "Parameter"

msgid "the template for the subject."
msgstr "cetakan untuk subyek."

msgid "the template for the email body."
msgstr "cetakan untuk badan surel."

msgid ""
"context passed to the ``subject_template``, ``email_template``, and "
"``html_email_template`` (if it is not ``None``)."
msgstr ""
"konteks dilewatkan ke ``subject_template``, ``email_template``, dan "
"``html_email_template`` (jika itu bukan ``None``)."

msgid "the sender's email."
msgstr "surel pengirim"

msgid "the email of the requester."
msgstr "surel dari peminta."

msgid ""
"the template for the HTML body; defaults to ``None``, in which case a plain "
"text email is sent."
msgstr ""
"cetakan untuk badan HTML; awalan menjadi ``None``, dimana kasus sebuah surel "
"teks polos dikirim."

msgid ""
"By default, ``save()`` populates the ``context`` with the same variables "
"that :class:`~django.contrib.auth.views.PasswordResetView` passes to its "
"email context."
msgstr ""
"Secara awalan, ``save()`` mengumpulkan ``context`` dengan variabel sama "
"yang :class:`~django.contrib.auth.views.PasswordResetView` melewatkan ke "
"konteks surelnya."

msgid ""
"A form that lets a user change their password without entering the old "
"password."
msgstr ""
"Formulir yang membiarkan pengguma merubah sandi mereka tanpa memasukkan "
"sandi lama."

msgid ""
"A form used in the admin interface to change a user's information and "
"permissions."
msgstr ""
"Sebuah formulir digunakan di antarmuka admin untuk merubah infromasi dan "
"perizinan pengguna."

msgid "A :class:`~django.forms.ModelForm` for creating a new user."
msgstr "Sebuah :class:`~django.forms.ModelForm` untuk membuat pengguna baru."

msgid ""
"It has three fields: ``username`` (from the user model), ``password1``, and "
"``password2``. It verifies that ``password1`` and ``password2`` match, "
"validates the password using :func:`~django.contrib.auth.password_validation."
"validate_password`, and sets the user's password using :meth:`~django."
"contrib.auth.models.User.set_password()`."
msgstr ""
"Itu mempunyai tiga bidang: ``username`` (dari model user), ``password1``, "
"dan ``password2``. Itu memeriksa bahwa ``password1`` dan ``password2`` "
"cocok, mensahkan sandi menggunakan :func:`~django.contrib.auth."
"password_validation.validate_password`, dan menyetel sandi pengguna "
"menggunakan :meth:`~django.contrib.auth.models.User.set_password()`."

msgid "Authentication data in templates"
msgstr "Pembuktian keaslian data di cetakan"

msgid ""
"The currently logged-in user and their permissions are made available in "
"the :doc:`template context </ref/templates/api>` when you use :class:"
"`~django.template.RequestContext`."
msgstr ""
"Pengguna masuk saat ini dan perizinan mereka dibuat tersedia di :doc:"
"`template context </ref/templates/api>` ketika anda menggunakan :class:"
"`~django.template.RequestContext`."

msgid "Technicality"
msgstr "Secara teknis"

msgid ""
"Technically, these variables are only made available in the template context "
"if you use :class:`~django.template.RequestContext` and the ``'django."
"contrib.auth.context_processors.auth'`` context processor is enabled. It is "
"in the default generated settings file. For more, see the :ref:"
"`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""
"Secara teknis, variabel-variabel ini hanya dibuat tersedia di konteks "
"cetakan jika anda menggunakan pengolah konteks :class:`~django.template."
"RequestContext` dan ``'django.contrib.auth.context_processors.auth'`` adalah "
"diadakan. Itu berada di berkas pengaturan dibangkitkan awalan. Untuk lebih, "
"lihat :ref:`RequestContext docs <subclassing-context-requestcontext>`."

msgid "Users"
msgstr "Pengguna"

msgid ""
"When rendering a template :class:`~django.template.RequestContext`, the "
"currently logged-in user, either a  :class:`~django.contrib.auth.models."
"User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` "
"instance, is stored in the template variable ``{{ user }}``:"
msgstr ""
"Ketika membangun sebuah cetakan :class:`~django.template.RequestContext`, "
"pengguna masuk saat ini, antara instance :class:`~django.contrib.auth.models."
"User` atau instance :class:`~django.contrib.auth.models.AnonymousUser`, "
"disimpan di variabel cetakan ``{{ user }}``:"

msgid ""
"This template context variable is not available if a ``RequestContext`` is "
"not being used."
msgstr ""
"Variabel konteks cetakan ini tidak tersedia jika sebuah ``RequestContext`` "
"tidak sedang digunakan."

msgid "Permissions"
msgstr "Hak akses"

msgid ""
"The currently logged-in user's permissions are stored in the template "
"variable ``{{ perms }}``. This is an instance of ``django.contrib.auth."
"context_processors.PermWrapper``, which is a template-friendly proxy of "
"permissions."
msgstr ""
"Perizinan pengguna masuk saat ini disimpan di variabel cetakan ``{{ perms }}"
"``. Ini adalah sebuah instance dari ``django.contrib.auth.context_processors."
"PermWrapper``, yaitu sebuah proxy cetakan-ramah dari perizinan."

msgid ""
"Evaluating a single-attribute lookup of ``{{ perms }}`` as a boolean is a "
"proxy to :meth:`User.has_module_perms() <django.contrib.auth.models.User."
"has_module_perms>`. For example, to check if the logged-in user has any "
"permissions in the ``foo`` app::"
msgstr ""
"Menilai pencarian atribut-tunggal dari ``{{ perms }}`` sebagai boolean "
"adalah wakil pada :meth:`User.has_module_perms() <django.contrib.auth.models."
"User.has_module_perms>`. Sebagai contoh, untuk memeriksa jika pengguna masuk "
"mempunyai perizinan apapun dalam aplikasi ``foo``::"

msgid ""
"Evaluating a two-level-attribute lookup as a boolean is a proxy to :meth:"
"`User.has_perm() <django.contrib.auth.models.User.has_perm>`. For example, "
"to check if the logged-in user has the permission ``foo.add_vote``::"
msgstr ""

msgid "Here's a more complete example of checking permissions in a template:"
msgstr ""
"Ini adalah beberapa contoh lengkap dari perizinan pemeriksaan dalam sebuah "
"cetakan:"

msgid ""
"It is possible to also look permissions up by ``{% if in %}`` statements. "
"For example:"
msgstr ""
"Itu memungkinkan juga mencari perizinan dengan pernyataan ``{% if in %}``. "
"Sebagai contoh:"

msgid "Managing users in the admin"
msgstr "Mengelola pengguna di admin"

msgid ""
"When you have both ``django.contrib.admin`` and ``django.contrib.auth`` "
"installed, the admin provides a convenient way to view and manage users, "
"groups, and permissions. Users can be created and deleted like any Django "
"model. Groups can be created, and permissions can be assigned to users or "
"groups. A log of user edits to models made within the admin is also stored "
"and displayed."
msgstr ""
"Ketika anda mempunyai kedua ``django.contrib.admin`` dan ``django.contrib."
"auth`` terpasang, admin menyediakan cara yang nyaman untuk menampilkan dan "
"mengelola pengguna, kelompok, dan perizinan. Pengguna dapat dibuat dan "
"dihapus seperti model Django apapun. Kelompok dapat dibuat, dan perizinan "
"dapat diberikan ke pengguna atau kelompok. Sebuah catatan dari pengguna "
"menyunting model dibuat dalam admin juga disimpan dan ditampilkan."

msgid ""
"You should see a link to \"Users\" in the \"Auth\" section of the main admin "
"index page. The \"Add user\" admin page is different than standard admin "
"pages in that it requires you to choose a username and password before "
"allowing you to edit the rest of the user's fields."
msgstr ""
"Anda harus melihat sebuah tautan pada \"Users\" di bagian \"Auth\" dari "
"halaman indeks admin utama. Halaman admin \"Add user\" adalah berbeda dari "
"halaman admin standar karena itu membutuhkan anda memilis sebuah nama "
"pengguna dan sandi sebelum mengizinkan anda menyunting sisa dari bidang "
"pengguna."

msgid ""
"Also note: if you want a user account to be able to create users using the "
"Django admin site, you'll need to give them permission to add users *and* "
"change users (i.e., the \"Add user\" and \"Change user\" permissions). If an "
"account has permission to add users but not to change them, that account "
"won't be able to add users. Why? Because if you have permission to add "
"users, you have the power to create superusers, which can then, in turn, "
"change other users. So Django requires add *and* change permissions as a "
"slight security measure."
msgstr ""
"Juga catat: jika anda ingin seorang akun pengguna dapat membuat pengguna "
"menggunakan situs admin Django, anda akan butuh memberikan mereka perizinan "
"untuk menambahkan pengguna *dan* merubah pengguna (yaitu, perizinan \"Add "
"user\" dan \"Change user\"). Jika sebuah akun mempunyai perizinan untuk "
"menambah pengguna tetapi tidak merubah mereka, yang akun tidak dapat "
"menambah pengguna. Kenapa, Karena jika anda mempunyai perizinan menambahkan "
"pengguna, anda mempunyai kekuasaan membuat superuser, yang dapat kemudian, "
"di gilirannya, rubah pengguna lain. Sehingga Django membuatuhkan tambah "
"*dan* merubah perizinan sebagai ukuran keamanan sedikit."

msgid ""
"Be thoughtful about how you allow users to manage permissions. If you give a "
"non-superuser the ability to edit users, this is ultimately the same as "
"giving them superuser status because they will be able to elevate "
"permissions of users including themselves!"
msgstr ""
"Bijaksanalah tentang bagaimana anda mengizinkan pengguna mengelola "
"perizinan. Jika anda memberikan bukan-superuser kemampuan menyunting "
"pengguna, ini adalah akhirnya sama seperti memberikan mereka keadaan "
"superuser karena mereka akan dapat memperbaiki perizinan dari pengguna "
"menyertakan mereka sendiri!"

msgid ""
"User passwords are not displayed in the admin (nor stored in the database), "
"but the :doc:`password storage details </topics/auth/passwords>` are "
"displayed. Included in the display of this information is a link to a "
"password change form that allows admins to change user passwords."
msgstr ""
"Sandi pengguna tidak diperlihatkan di admin (maupun disimpan di basisdata), "
"tetapi :doc:`password storage details </topics/auth/passwords>` "
"diperlihatkan. Disertakan di layar dari informasi ini adalah sebuah tautan "
"pada sebuah formulir rubah sandi yang mengizinkan admin merubah sandi "
"pengguna."

msgid "User authentication in Django"
msgstr "Otentifikasi pengguna di Django"

msgid ""
"Django comes with a user authentication system. It handles user accounts, "
"groups, permissions and cookie-based user sessions. This section of the "
"documentation explains how the default implementation works out of the box, "
"as well as how to :doc:`extend and customize </topics/auth/customizing>` it "
"to suit your project's needs."
msgstr ""
"Django datang dengan sistem otentifikasi pengguna. Dia menangani akun "
"pengguna, kelompok, perizinan dan sesi pengguna berbasis-kue. Bagian ini "
"dari dokumentasi menjelaskan bagaimana penerawan awal bekerja keluar dari "
"kotak, sama halnya bagaimana :doc:`extend and customize </topics/auth/"
"customizing>` dia untuk mencocokkan kebutuhan proyek anda."

msgid "Overview"
msgstr "Ikhtisar"

msgid ""
"The Django authentication system handles both authentication and "
"authorization. Briefly, authentication verifies a user is who they claim to "
"be, and authorization determines what an authenticated user is allowed to "
"do. Here the term authentication is used to refer to both tasks."
msgstr ""
"Sistem autentifikasi Django menangani kedua autentifikasi dan otentifikasi. "
"Secara singkat, autentifikasi memeriksa seorang pengguna yang menjadi "
"tuntutan mereka, dan otorisasi menentukan apa seorang pengguna "
"diautentifikasi diizinkan melakukan. Disini istilah autentifikasi digunakan "
"untuk mengacu kedua tugas."

msgid "The auth system consists of:"
msgstr "Sistem autentifikasi terdiri dari:"

msgid ""
"Permissions: Binary (yes/no) flags designating whether a user may perform a "
"certain task."
msgstr ""
"Perizinan: Bendera biner (ya/tidak) menandakan apakah seorang pengguna "
"mungkin melakukan tugas tertentu."

msgid ""
"Groups: A generic way of applying labels and permissions to more than one "
"user."
msgstr ""
"Kelompok: Sebuah cara umum dari memberlakukan label dan perizinan pada lebih "
"dari satu pengguna."

msgid "A configurable password hashing system"
msgstr "Sistem mencampur sandi dikonfigurasi"

msgid "Forms and view tools for logging in users, or restricting content"
msgstr ""
"Formulir dan alat-alat tampilan untuk pengguna masuk, atau membatasi isi"

msgid "A pluggable backend system"
msgstr "Sistem backend tertanam"

msgid ""
"The authentication system in Django aims to be very generic and doesn't "
"provide some features commonly found in web authentication systems. "
"Solutions for some of these common problems have been implemented in third-"
"party packages:"
msgstr ""
"Sistem autentifikasi di Django bertujuan untuk sangat umum dan tidak "
"menyediakan beberapa fitur umumnya ditemukan di sistem autentifikasi "
"jaringan. Pemecahan untuk beberapa dari masalah umum telah diterapkan di "
"paket-paket pihak-ketiga:"

msgid "Password strength checking"
msgstr "Pemeriksaan kekuatan sandi"

msgid "Throttling of login attempts"
msgstr "Mencengkik dari usaha masuk"

msgid "Authentication against third-parties (OAuth, for example)"
msgstr "Autentifikasi terhadap pihak-ketiga (OAuth, sebagai contoh) "

msgid "Object-level permissions"
msgstr "Tingkat-obyek perizinan"

msgid "Installation"
msgstr "Pemasangan"

msgid ""
"Authentication support is bundled as a Django contrib module in ``django."
"contrib.auth``. By default, the required configuration is already included "
"in the :file:`settings.py` generated by :djadmin:`django-admin startproject "
"<startproject>`, these consist of two items listed in your :setting:"
"`INSTALLED_APPS` setting:"
msgstr ""
"Dukungan autentifikasi digabung sebagai modul bantuan Django di ``django."
"contrib.auth``. Secara awalan, konfigurasi yang dibutuhkan sudah termasuk "
"di :file:`settings.py` dibangkitkan oleh :djadmin:`django-admin startproject "
"<startproject>`, ini terdiri dari dua barang terdaftar di pengaturan :"
"setting:`INSTALLED_APPS` anda:"

msgid ""
"``'django.contrib.auth'`` contains the core of the authentication framework, "
"and its default models."
msgstr ""
"``'django.contrib.auth'`` mengandung inti dari kerangka kerja autentifikasi, "
"dan model awalannya."

msgid ""
"``'django.contrib.contenttypes'`` is the Django :doc:`content type system </"
"ref/contrib/contenttypes>`, which allows permissions to be associated with "
"models you create."
msgstr ""
"``'django.contrib.contenttypes'`` adalah :doc:`content type system </ref/"
"contrib/contenttypes>` Django, yang mengizinkan perizinan untuk digabungkan "
"dengan model anda buat. "

msgid "and these items in your :setting:`MIDDLEWARE` setting:"
msgstr "dan barang-barang ini di pengaturan :setting:`MIDDLEWARE` anda:"

msgid ""
":class:`~django.contrib.sessions.middleware.SessionMiddleware` manages :doc:"
"`sessions </topics/http/sessions>` across requests."
msgstr ""
":class:`~django.contrib.sessions.middleware.SessionMiddleware` mengelola :"
"doc:`sessions </topics/http/sessions>` lintas permintaan."

msgid ""
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` associates "
"users with requests using sessions."
msgstr ""
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` "
"menggabungkan pengguna dengan permintaan menggunakan sesi."

msgid ""
"With these settings in place, running the command ``manage.py migrate`` "
"creates the necessary database tables for auth related models and "
"permissions for any models defined in your installed apps."
msgstr ""
"Dengan pengaturan ini di tempat, menjalankan perintah ``manage.py migrate`` "
"membuat tabel-tabel basisdata yang dibutuhkan untuk autentifikasi model "
"terkait dan perizinan untuk model apapun ditentukan di aplikasi terpasang "
"anda."

msgid "Usage"
msgstr "Penggunaan"

msgid ":doc:`Using Django's default implementation <default>`"
msgstr ":doc:`Using Django's default implementation <default>`"

msgid ":ref:`Working with User objects <user-objects>`"
msgstr ":ref:`Bekerja dengan Obyek Pengguna <user-objects>`"

msgid ":ref:`Permissions and authorization <topic-authorization>`"
msgstr ":ref:`Perizinan dan pembuktian keaslian <topic-authorization>`"

msgid ":ref:`Authentication in web requests <auth-web-requests>`"
msgstr ":ref:`Pembuktian keaslian di permintaan jaringan <auth-web-requests>`"

msgid ":ref:`Managing users in the admin <auth-admin>`"
msgstr ":ref:`Mengelola pengguna di admin <auth-admin>`"

msgid ":doc:`API reference for the default implementation </ref/contrib/auth>`"
msgstr ""
":doc:`API reference for the default implementation </ref/contrib/auth>`"

msgid ":doc:`Customizing Users and authentication <customizing>`"
msgstr ":doc:`Customizing Users and authentication <customizing>`"

msgid ":doc:`Password management in Django <passwords>`"
msgstr ":doc:`Password management in Django <passwords>`"

msgid "Password management in Django"
msgstr "Pengelolaan sandi di Django"

msgid ""
"Password management is something that should generally not be reinvented "
"unnecessarily, and Django endeavors to provide a secure and flexible set of "
"tools for managing user passwords. This document describes how Django stores "
"passwords, how the storage hashing can be configured, and some utilities to "
"work with hashed passwords."
msgstr ""
"Pengelolaan sandi adalah sesuatu yang harus secara umum tidak dibuat kembali "
"tida perlu, dan Django berusaha menyediakan kumpulan aman dan fleksibel dari "
"alat-alat untuk mengelola sandi pengguna. Dokumen ini menggambarkan "
"bagaimana Django menyimpan sandi, bagaimana campuran penyimpanan dapat "
"dikonfigurasikan, dan beberapa peralatan untuk bekerja dengan sandi dicampur."

msgid ""
"Even though users may use strong passwords, attackers might be able to "
"eavesdrop on their connections. Use :ref:`HTTPS <security-recommendation-"
"ssl>` to avoid sending passwords (or any other sensitive data) over plain "
"HTTP connections because they will be vulnerable to password sniffing."
msgstr ""
"Meskipun pengguna mungkin menggunakan sandi kuat, penyerang mungkin dapat "
"menguping pada hubungan mereka. Gunakan :ref:`HTTPS <security-recommendation-"
"ssl>` untuk menghindari mengirim sandi (atau data sensitif lain apapun) "
"terhadap hubungan HTTP polos karena merekan akan menjadi rentan pada "
"penciuman sandi."

msgid "How Django stores passwords"
msgstr "Bagaimana Django menyimpan sandi"

msgid ""
"Django provides a flexible password storage system and uses PBKDF2 by "
"default."
msgstr ""
"Django menyediakan sistem penyimpanan sandi fleksibel dan menggunakan PBKDF2 "
"secara awalan."

msgid ""
"The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:"
"`~django.contrib.auth.models.User` object is a string in this format::"
msgstr ""
"Atribut :attr:`~django.contrib.auth.models.User.password` dari sebuah obyek :"
"class:`~django.contrib.auth.models.User` adalah sebuah string di bentuk ini::"

msgid ""
"Those are the components used for storing a User's password, separated by "
"the dollar-sign character and consist of: the hashing algorithm, the number "
"of algorithm iterations (work factor), the random salt, and the resulting "
"password hash.  The algorithm is one of a number of one-way hashing or "
"password storage algorithms Django can use; see below. Iterations describe "
"the number of times the algorithm is run over the hash. Salt is the random "
"seed used and the hash is the result of the one-way function."
msgstr ""
"Mereka adalah komponen digunakan untuk menyimpan sandi User, dipisahkan oleh "
"karakter dolar dan terdiri dari campuran algoritma, sejumlah perulangan "
"algoritma (faktor kerja), garam acak, dan menghasilkan campuran sandi. "
"Algoritma adalah satu dari sejumlah dari campuran satu-cara atau algoritma "
"penyimpanan sandi Django dapat digunakan, lihat dibawah. Perulangan "
"menggambarkan sejumlah kali algoritma berjalan terhadap campuran. Garam "
"adalah benih acak digunakan dan campuran adalah hasil dari fungsi satu-cara."

msgid ""
"By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password "
"stretching mechanism recommended by NIST_. This should be sufficient for "
"most users: it's quite secure, requiring massive amounts of computing time "
"to break."
msgstr ""
"Secara awalan, Django menggunakan algoritma PBKDF2_ dengan campuran SHA256, "
"sebuah mekanisme perentangan sandi dianjurkan oleh NIST_. Ini harus cukup "
"untuk kebanyakan pengguna: itu sangat aman, membutuhkan jumlah besar waktu "
"untuk merusak."

msgid ""
"However, depending on your requirements, you may choose a different "
"algorithm, or even use a custom algorithm to match your specific security "
"situation. Again, most users shouldn't need to do this -- if you're not "
"sure, you probably don't.  If you do, please read on:"
msgstr ""
"Bagaimapun, tergantung pada persyaratan anda, anda mungkin memilih algoritma "
"berbeda, atau bahkan menggunakan penyesuaian algoritma untuk mencocokkan "
"keadaan keamanan khusus. Kembali, kebanyakan pengguna tidak butuh melakukan "
"ini -- jika anda tidak yakin, anda mungkin tidak. Jika anda melakukan, harap "
"membaca:"

msgid ""
"Django chooses the algorithm to use by consulting the :setting:"
"`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that "
"this Django installation supports. The first entry in this list (that is, "
"``settings.PASSWORD_HASHERS[0]``) will be used to store passwords, and all "
"the other entries are valid hashers that can be used to check existing "
"passwords.  This means that if you want to use a different algorithm, you'll "
"need to modify :setting:`PASSWORD_HASHERS` to list your preferred algorithm "
"first in the list."
msgstr ""
"Django memilih algoritma untuk digunakan dengan berkonsultasi pengaturan :"
"setting:`PASSWORD_HASHERS`. Ini adalah daftar dari campuran kelas-kelas "
"algoritma yang mendukung pemasangan Django ini. Masukan pertama di daftar "
"(yaitu, ``settings.PASSWORD_HASHERS[0]``) akan digunakan menyimpan sandi, "
"dan semua masukan lain adalah pencampur sah yang dapat digunakan memeriksa "
"sandi yang ada. Ini berarti bahwa anda ingin menggunakan algoritma berbeda, "
"anda akan butuh merubah :setting:`PASSWORD_HASHERS` ke daftar anda pertama "
"algoritma dipilih di daftar."

msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr "Nilai awal untuk :setting:`PASSWORD_HASHERS` adalah::"

msgid ""
"This means that Django will use PBKDF2_ to store all passwords but will "
"support checking passwords stored with PBKDF2SHA1, argon2_, and bcrypt_."
msgstr ""
"Ini berarti bahwa Django akan menggunakan PBKDF2_ menyimpan semua sandi "
"tetapi akan mendukung pemeriksaan sandi disimpan dengan PBKDF2SHA1, argon2_, "
"dan bcrypt_."

msgid ""
"The next few sections describe a couple of common ways advanced users may "
"want to modify this setting."
msgstr ""
"Sedikit bagian selanjutnya menggambarkan sepasang cara umum pengguna tingkat "
"lanjut mungkin ingin merubah pengaturan ini."

msgid "Using Argon2 with Django"
msgstr "Menggunakan Argon2 dengan Django"

msgid ""
"Argon2_ is the winner of the 2015 `Password Hashing Competition`_, a "
"community organized open competition to select a next generation hashing "
"algorithm. It's designed not to be easier to compute on custom hardware than "
"it is to compute on an ordinary CPU."
msgstr ""
"Argon2_ adalah pemenang dari `Password Hashing Competition`_ 2015, sebuah "
"komunitas mengorganisasikan pertandingan terbuka untuk memilih algoritma "
"campuran generasi selanjutnya. Itu dirancang tidak mudah dihitung pada "
"perangkat keras penyesuaian daripada itu dihitung pada CPU biasa. "

msgid ""
"Argon2_ is not the default for Django because it requires a third-party "
"library. The Password Hashing Competition panel, however, recommends "
"immediate use of Argon2 rather than the other algorithms supported by Django."
msgstr ""
"Argon2_ bukan awalan untuk Django karena itu membutuhkan pustaka pihak-"
"ketiga. Juri Password Hashing Competition, bagaimanapun, menganjurkan "
"penggunaan segera dari Argon2 daripada algoritma lain didukung oleh Django."

msgid "To use Argon2 as your default storage algorithm, do the following:"
msgstr ""
"Untuk menggunakan Argon2 sebagai algoritma penyimpanan awalan anda, lakukan "
"berikut:"

msgid ""
"Install the `argon2-cffi library`_.  This can be done by running ``python -m "
"pip install django[argon2]``, which is equivalent to ``python -m pip install "
"argon2-cffi`` (along with any version requirement from Django's ``setup."
"cfg``)."
msgstr ""

msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``Argon2PasswordHasher`` first. "
"That is, in your settings file, you'd put::"
msgstr ""
"Rubah :setting:`PASSWORD_HASHERS` pada daftar ``Argon2PasswordHasher`` "
"pertama. Yaitu, di berkas pengaturan anda, anda telah taruh::"

msgid ""
"Keep and/or add any entries in this list if you need Django to :ref:`upgrade "
"passwords <password-upgrades>`."
msgstr ""
"Jaga dan/atau tambah masukan apapun di daftar ini jika anda butuh Django "
"untuk :ref:`upgrade passwords <password-upgrades>`."

msgid "Using ``bcrypt`` with Django"
msgstr "Menggunakan ``bcrypt`` dengan Django"

msgid ""
"Bcrypt_ is a popular password storage algorithm that's specifically designed "
"for long-term password storage. It's not the default used by Django since it "
"requires the use of third-party libraries, but since many people may want to "
"use it Django supports bcrypt with minimal effort."
msgstr ""
"Bcrypt_ adalah algoritma penyimpanan sandi terkenal yang khususnya dirancang "
"untuk penyimpanan sandi jangka-panjang. Itu bukan awalan digunakan oleh "
"Django sejak itu membutuhkan menggunakan pustaka pihak-ketiga, tetapi sejak "
"banyak orang mungkin ingin menggunakan itu Django mendukung bcrypt dengan "
"usaha minimal."

msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""
"Untuk menggunakan Bcrypt sebagai algoritma penyimpanan awalan anda, lakukan "
"berikut:"

msgid ""
"Install the `bcrypt library`_. This can be done by running ``python -m pip "
"install django[bcrypt]``, which is equivalent to ``python -m pip install "
"bcrypt`` (along with any version requirement from Django's ``setup.cfg``)."
msgstr ""

msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``BCryptSHA256PasswordHasher`` "
"first. That is, in your settings file, you'd put::"
msgstr ""
"Rubah :setting:`PASSWORD_HASHERS` pada daftar ``BCryptSHA256PasswordHasher`` "
"pertama. Yaitu, di berkas pengaturan anda, anda telah taruh::"

msgid ""
"That's it -- now your Django install will use Bcrypt as the default storage "
"algorithm."
msgstr ""
"Yaitu -- sekarang Django memasang dengan menggunakan Bcrypt sebagai "
"algoritma penyimpanan awalan."

msgid "Using ``scrypt`` with Django"
msgstr ""

msgid ""
"scrypt_ is similar to PBKDF2 and bcrypt in utilizing a set number of "
"iterations to slow down brute-force attacks. However, because PBKDF2 and "
"bcrypt do not require a lot of memory, attackers with sufficient resources "
"can launch large-scale parallel attacks in order to speed up the attacking "
"process. scrypt_ is specifically designed to use more memory compared to "
"other password-based key derivation functions in order to limit the amount "
"of parallelism an attacker can use, see :rfc:`7914` for more details."
msgstr ""

msgid "To use scrypt_ as your default storage algorithm, do the following:"
msgstr ""

msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``ScryptPasswordHasher`` first. "
"That is, in your settings file::"
msgstr ""

msgid "``scrypt`` requires OpenSSL 1.1+."
msgstr ""

msgid "Increasing the salt entropy"
msgstr ""

msgid ""
"Most password hashes include a salt along with their password hash in order "
"to protect against rainbow table attacks. The salt itself is a random value "
"which increases the size and thus the cost of the rainbow table and is "
"currently set at 128 bits with the ``salt_entropy`` value in the "
"``BasePasswordHasher``. As computing and storage costs decrease this value "
"should be raised. When implementing your own password hasher you are free to "
"override this value in order to use a desired entropy level for your "
"password hashes. ``salt_entropy`` is measured in bits."
msgstr ""

msgid "Implementation detail"
msgstr "Rincian penerapan"

msgid ""
"Due to the method in which salt values are stored the ``salt_entropy`` value "
"is effectively a minimum value. For instance a value of 128 would provide a "
"salt which would actually contain 131 bits of entropy."
msgstr ""

msgid "Increasing the work factor"
msgstr "Meningkatkan faktor kerja"

msgid "PBKDF2 and bcrypt"
msgstr "PBKDF2 dan bcrypt"

msgid ""
"The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of "
"hashing. This deliberately slows down attackers, making attacks against "
"hashed passwords harder. However, as computing power increases, the number "
"of iterations needs to be increased. We've chosen a reasonable default (and "
"will increase it with each release of Django), but you may wish to tune it "
"up or down, depending on your security needs and available processing power. "
"To do so, you'll subclass the appropriate algorithm and override the "
"``iterations`` parameter (use the ``rounds`` parameter when subclassing a "
"bcrypt hasher). For example, to increase the number of iterations used by "
"the default PBKDF2 algorithm:"
msgstr ""

msgid ""
"Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""
"Membuat sebuah subkelas dari ``django.contrib.auth.hashers."
"PBKDF2PasswordHasher``::"

msgid ""
"Save this somewhere in your project. For example, you might put this in a "
"file like ``myproject/hashers.py``."
msgstr ""
"Simpan ini disuatu tempat di proyek anda. Sebagai contoh, anda mungkin "
"menaruh ini di sebuah berkas seperti ``myproject/hashers.py``."

msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""
"Tambah pencampur baru anda sebagai masukan pertama di :setting:"
"`PASSWORD_HASHERS`::"

msgid ""
"That's it -- now your Django install will use more iterations when it stores "
"passwords using PBKDF2."
msgstr ""
"Itu dia -- sekarang pemasangan Django anda akan menggunakan perulangan lebih "
"ketika itu menyimpan sandi menggunakan PBKDF2."

msgid ""
"bcrypt ``rounds`` is a logarithmic work factor, e.g. 12 rounds means ``2 ** "
"12`` iterations."
msgstr ""

msgid "Argon2"
msgstr "Argon2"

msgid "Argon2 has three attributes that can be customized:"
msgstr "Argon2 mempunyai tiga atribut yang dapat disesuaikan:"

msgid "``time_cost`` controls the number of iterations within the hash."
msgstr "``time_cost`` mengendalikan sejumlah perulangan dalam campuran."

msgid ""
"``memory_cost`` controls the size of memory that must be used during the "
"computation of the hash."
msgstr ""
"``memory_cost`` mengendalikan ukuran memori yang harus digunakan selama "
"perhitungan dari campuran."

msgid ""
"``parallelism`` controls how many CPUs the computation of the hash can be "
"parallelized on."
msgstr ""
"``parallelism`` mengendalikan berapa banyak CPU perhitungan dari campuran "
"dapat diparalelkan."

msgid ""
"The default values of these attributes are probably fine for you. If you "
"determine that the password hash is too fast or too slow, you can tweak it "
"as follows:"
msgstr ""
"Nilai-nilai awalan dari atribut ini mungkin baik untuk anda. Jika anda "
"menentukan bahwa campuran sandi terlalu cepat atau terlalu lambat, anda "
"dapat mengutik itu sebagai berikut:"

msgid ""
"Choose ``parallelism`` to be the number of threads you can spare computing "
"the hash."
msgstr ""
"Pilih ``parallelism`` untuk menjadi angka dari thread anda dapat hemat "
"menghitung campuran."

msgid "Choose ``memory_cost`` to be the KiB of memory you can spare."
msgstr "Pilih ``memory_cost`` menjadi KiB dari memori anda dapat hemat."

msgid ""
"Adjust ``time_cost`` and measure the time hashing a password takes. Pick a "
"``time_cost`` that takes an acceptable time for you. If ``time_cost`` set to "
"1 is unacceptably slow, lower ``memory_cost``."
msgstr ""
"Menyesuaikan ``time_cost`` dan ukuran waktu mencampur sebuah sandi yang "
"diambil. Ambil sebuah ``time_cost`` yang mengambil sebuah waktu yang dapat "
"diterima untuk anda. Jika ``time_cost`` disetel menjadi ` adalah tidak dapat "
"diterima lambat, ``memory_cost`` lebih rendah."

msgid "``memory_cost`` interpretation"
msgstr "tafsiran ``memory_cost``"

msgid ""
"The argon2 command-line utility and some other libraries interpret the "
"``memory_cost`` parameter differently from the value that Django uses. The "
"conversion is given by ``memory_cost == 2 ** memory_cost_commandline``."
msgstr ""
"Kegunaan baris-perintah dan beberapa pustaka lain menafsirkan parameter "
"``memory_cost`` berbeda dari nilai yang Django gunakan. Perubahan yang "
"diberikan oleh ``memory_cost == 2 ** memory_cost_commandline``."

msgid "``scrypt``"
msgstr ""

msgid "scrypt_ has four attributes that can be customized:"
msgstr ""

msgid "``work_factor`` controls the number of iterations within the hash."
msgstr ""

msgid "``block_size``"
msgstr ""

msgid "``parallelism`` controls how many threads will run in parallel."
msgstr ""

msgid ""
"``maxmem`` limits the maximum size of memory that can be used during the "
"computation of the hash. Defaults to ``0``, which means the default "
"limitation from the OpenSSL library."
msgstr ""

msgid ""
"We've chosen reasonable defaults, but you may wish to tune it up or down, "
"depending on your security needs and available processing power."
msgstr ""

msgid "Estimating memory usage"
msgstr ""

msgid "The minimum memory requirement of scrypt_ is::"
msgstr ""

msgid ""
"so you may need to tweak ``maxmem`` when changing the ``work_factor`` or "
"``block_size`` values."
msgstr ""

msgid "Password upgrading"
msgstr "Peningkatan sandi"

msgid ""
"When users log in, if their passwords are stored with anything other than "
"the preferred algorithm, Django will automatically upgrade the algorithm to "
"the preferred one. This means that old installs of Django will get "
"automatically more secure as users log in, and it also means that you can "
"switch to new (and better) storage algorithms as they get invented."
msgstr ""
"Ketika pengguna masuk, jika sandi mereka disimpan dengan apapun lain dari "
"algoritma yang dipilih, Django akan secara otomatis meningkatkan algoritma "
"ke satu yang dipilih. Ini berarti bahwa pemasangan lama dari Django akan "
"mendapatkan otomatis lebih aman ketika pengguna masuk, dan itu juga berarti "
"bahwa anda dapat berganti ke algoritma pentimpanan (dan lebih baik) baru "
"ketika mereka dibuat."

msgid ""
"However, Django can only upgrade passwords that use algorithms mentioned in :"
"setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make "
"sure never to *remove* entries from this list. If you do, users using "
"unmentioned algorithms won't be able to upgrade. Hashed passwords will be "
"updated when increasing (or decreasing) the number of PBKDF2 iterations, "
"bcrypt rounds, or argon2 attributes."
msgstr ""

msgid ""
"Be aware that if all the passwords in your database aren't encoded in the "
"default hasher's algorithm, you may be vulnerable to a user enumeration "
"timing attack due to a difference between the duration of a login request "
"for a user with a password encoded in a non-default algorithm and the "
"duration of a login request for a nonexistent user (which runs the default "
"hasher). You may be able to mitigate this by :ref:`upgrading older password "
"hashes <wrapping-password-hashers>`."
msgstr ""
"Waspada bahwa jika semua sandi di basisdata anda tidak dikodekan di "
"algoritma pencampur awalan, anda mungkin rentan pada serangan pewaktu "
"pencacahan pengguna karena perbedaan diantara lamanya dari permintaan masuk "
"untuk pengguna dengan sandi terkodekan di algoritma bukan-awalan dan lamanya "
"dari permintaan masuk untuk pengguna tidak ada (yang menjalankan pencampur "
"awalan). Anda mungkin dapat memperbaiki ini dengan :ref:`upgrading older "
"password hashes <wrapping-password-hashers>`."

msgid "Password upgrading without requiring a login"
msgstr "Meningkatkan sandi tanpa membutuhkan masuk"

msgid ""
"If you have an existing database with an older, weak hash such as MD5 or "
"SHA1, you might want to upgrade those hashes yourself instead of waiting for "
"the upgrade to happen when a user logs in (which may never happen if a user "
"doesn't return to your site). In this case, you can use a \"wrapped\" "
"password hasher."
msgstr ""
"Jika anda mempunyai basisdata yang ada dengan yang terlama, campuran lemah "
"seperti MD5 atau SHA1, anda mungkin ingin meningkatkan campuran tersebut "
"anda sendiri daripada menunggu peninggkatan terjadi ketika pengguna masuk "
"(yang mungkin tidak pernah terjadi jika pengguna tidak kembali ke situs "
"anda). Di kasus ini, anda dapat menggunakan pencampur sandi \"wrapped\"."

msgid ""
"For this example, we'll migrate a collection of SHA1 hashes to use "
"PBKDF2(SHA1(password)) and add the corresponding password hasher for "
"checking if a user entered the correct password on login. We assume we're "
"using the built-in ``User`` model and that our project has an ``accounts`` "
"app. You can modify the pattern to work with any algorithm or with a custom "
"user model."
msgstr ""
"Untuk contoh ini, kami akan memindahkan kumpulan dari campuran SHA1 untuk "
"menggunakan PBKDF2(SHA1(password)) dan menambah pencampur sandi sesuai untuk "
"memeriksa jika pengguna memasukkan sandi benar pada masuk. Kami menganggap "
"kami sedang menggunakan model ``User`` siap-pakai dan bahwa proyek kami "
"mempunyai sebuah aplikasi ``accounts``. Anda dapat merubah pola untuk "
"bekerja dengan algoritma apapun atau dengan penyesuaian model user."

msgid "First, we'll add the custom hasher:"
msgstr "Pertama, kami akan menambah penyesuaian pencampur:"

msgid "accounts/hashers.py"
msgstr "accounts/hashers.py"

msgid "The data migration might look something like:"
msgstr "Perpindahan data mungkin terlihat seperti:"

msgid "accounts/migrations/0002_migrate_sha1_passwords.py"
msgstr "accounts/migrations/0002_migrate_sha1_passwords.py"

msgid ""
"Be aware that this migration will take on the order of several minutes for "
"several thousand users, depending on the speed of your hardware."
msgstr ""
"Waspada bahwa perpindahan ini akan mengambil urutan dari beberapa menit "
"untuk beberapa ribuan pengguna, tergantung pada kecepatan perangkat keras "
"anda."

msgid "Finally, we'll add a :setting:`PASSWORD_HASHERS` setting:"
msgstr ""
"Akhirya, kami akan menambah sebuah pengaturan :setting:`PASSWORD_HASHERS`:"

msgid "mysite/settings.py"
msgstr "mysite/settings.py"

msgid "Include any other hashers that your site uses in this list."
msgstr "Sertakan pencampur lain apapun yang situs anda gunakan di daftar ini."

msgid "Included hashers"
msgstr "Disertakan pencampur"

msgid "The full list of hashers included in Django is::"
msgstr "Daftar penuh dari pencampur disertakan di Django adalah::"

msgid "The corresponding algorithm names are:"
msgstr "Nama-nama algoritma sesuai adalah:"

msgid "``pbkdf2_sha256``"
msgstr "``pbkdf2_sha256``"

msgid "``pbkdf2_sha1``"
msgstr "``pbkdf2_sha1``"

msgid "``argon2``"
msgstr "``argon2``"

msgid "``bcrypt_sha256``"
msgstr "``bcrypt_sha256``"

msgid "``bcrypt``"
msgstr "``bcrypt``"

msgid "``sha1``"
msgstr "``sha1``"

msgid "``md5``"
msgstr "``md5``"

msgid "``unsalted_sha1``"
msgstr "``unsalted_sha1``"

msgid "``unsalted_md5``"
msgstr "``unsalted_md5``"

msgid "``crypt``"
msgstr "``crypt``"

msgid "Writing your own hasher"
msgstr "Menulis pencampur anda sendiri"

msgid ""
"If you write your own password hasher that contains a work factor such as a "
"number of iterations, you should implement a ``harden_runtime(self, "
"password, encoded)`` method to bridge the runtime gap between the work "
"factor supplied in the ``encoded`` password and the default work factor of "
"the hasher. This prevents a user enumeration timing attack due to  "
"difference between a login request for a user with a password encoded in an "
"older number of iterations and a nonexistent user (which runs the default "
"hasher's default number of iterations)."
msgstr ""
"Jika anda menulis pencampur sandi anda sendiri yang mengandung faktor kerja "
"seperti sejumlah perulangan, anda harus menerapkan sebuah metode "
"``harden_runtime(self, password, encoded)`` untuk menjembatani celah waktu "
"jalan diantara faktor kerja disokong di sandi ``encoded`` dan faktor kerja "
"awalan dari pencampur. Ini mencegah serangan pewaktu pencacahan pengguna "
"pada perbedaan diantara permintaan masuk untuk pengguna baru dengan sandi "
"dikodekan di nomor terlama dari perulangan dan pengguna tidak ada (yang "
"menjalankan nomor awalan pencampur bawaan dari perulangan)."

msgid ""
"Taking PBKDF2 as example, if ``encoded`` contains 20,000 iterations and the "
"hasher's default ``iterations`` is 30,000, the method should run "
"``password`` through another 10,000 iterations of PBKDF2."
msgstr ""
"Mengambil PBKDF2 sebagai contoh, jika ``encoded`` mengandung 20,000 "
"perputaran dan ``iterations`` awalan pencampur adalah 30,000, metode harus "
"menjalankan ``password`` melalui perputaran 10,000 lain dari PBKDF2."

msgid ""
"If your hasher doesn't have a work factor, implement the method as a no-op "
"(``pass``)."
msgstr ""
"Jika pencampur anda tidak mempunyai faktor kerja, terapkan metode sebagai no-"
"op (``pass``)."

msgid "Manually managing a user's password"
msgstr "Manual mengelola sandi pengguna"

msgid ""
"The :mod:`django.contrib.auth.hashers` module provides a set of functions to "
"create and validate hashed passwords. You can use them independently from "
"the ``User`` model."
msgstr ""

msgid ""
"If you'd like to manually authenticate a user by comparing a plain-text "
"password to the hashed password in the database, use the convenience "
"function :func:`check_password`. It takes two arguments: the plain-text "
"password to check, and the full value of a user's ``password`` field in the "
"database to check against, and returns ``True`` if they match, ``False`` "
"otherwise."
msgstr ""
"Jika anda suka secara manual autentifikasi pengguna dengan membandingkan "
"sandi teks-polos pada sandi dicampur di basisdata, gunakan fungsi nyaman :"
"func:`check_password`. Itu mengambil dua argumen: sandi teks-polos untuk "
"memeriksa, dan nilai penuh dari bidang ``password`` pengguna di basisdata "
"untuk memeriksa terhadap, dan mengembalikan ``True`` jika mereka cocok, "
"``False`` sebaliknya."

msgid ""
"Creates a hashed password in the format used by this application. It takes "
"one mandatory argument: the password in plain-text (string or bytes). "
"Optionally, you can provide a salt and a hashing algorithm to use, if you "
"don't want to use the defaults (first entry of ``PASSWORD_HASHERS`` "
"setting). See :ref:`auth-included-hashers` for the algorithm name of each "
"hasher. If the password argument is ``None``, an unusable password is "
"returned (one that will never be accepted by :func:`check_password`)."
msgstr ""

msgid ""
"Returns ``False`` if the password is a result of :meth:`.User."
"set_unusable_password`."
msgstr ""
"Mengembalikan ``False`` jika sandi adalah hasil dari :meth:`.User."
"set_unusable_password`."

msgid "Password validation"
msgstr "Pengesahan sandi"

msgid ""
"Users often choose poor passwords. To help mitigate this problem, Django "
"offers pluggable password validation. You can configure multiple password "
"validators at the same time. A few validators are included in Django, but "
"you can write your own as well."
msgstr ""

msgid ""
"Each password validator must provide a help text to explain the requirements "
"to the user, validate a given password and return an error message if it "
"does not meet the requirements, and optionally receive passwords that have "
"been set. Validators can also have optional settings to fine tune their "
"behavior."
msgstr ""
"Setiap pengesah sandi harus menyediakan teks bantuan untuk menjelaskan "
"persyaratan ke pengguna, mensahkan sandi diberikan dan mengembalikan sebuah "
"pesan kesalahan jika itu tidak memenuhi persyaratan, dan pilihannya menerima "
"sandi yang telah disetel. Pengesah dapat juga mempunyai pengaturan pilihan "
"untuk mendenda menyesuaikan perilaku mereka."

msgid ""
"Validation is controlled by the :setting:`AUTH_PASSWORD_VALIDATORS` setting. "
"The default for the setting is an empty list, which means no validators are "
"applied. In new projects created with the default :djadmin:`startproject` "
"template, a set of validators is enabled by default."
msgstr ""

msgid ""
"By default, validators are used in the forms to reset or change passwords "
"and in the :djadmin:`createsuperuser` and :djadmin:`changepassword` "
"management commands. Validators aren't applied at the model level, for "
"example in ``User.objects.create_user()`` and ``create_superuser()``, "
"because we assume that developers, not users, interact with Django at that "
"level and also because model validation doesn't automatically run as part of "
"creating models."
msgstr ""
"Secara awalan, pengesah digunakan dalam formulir untuk menyetel kembali atau "
"merubah sandi dan di perintah pengelolaan :djadmin:`createsuperuser` dan :"
"djadmin:`changepassword`. Pengesah tidak diberlakukan pada tingkat model, "
"sebagai contoh di `User.objects.create_user()`` dan ``create_superuser()``, "
"karena kami mengaggap bahwa pengembang, bukan pengguna, interaksi dengan "
"Django pada tingkat itu dan juga karena pengesahan model tidak secara "
"otomatis berjalan sebagai bagian dari membuat model."

msgid ""
"Password validation can prevent the use of many types of weak passwords. "
"However, the fact that a password passes all the validators doesn't "
"guarantee that it is a strong password. There are many factors that can "
"weaken a password that are not detectable by even the most advanced password "
"validators."
msgstr ""
"Pengesah sandi dapat mencegah penggunaan dari banyak jenis dari sandi lemah. "
"Bagaimanapun, fakta bahwa sandi melewatkan semua pengesah tidak menjami "
"bahwa itu adalah sandi kuat. Ada banyak faktor yang dapat memperlemah sebuah "
"sandi yang tidak dikenali oleh bahkan pengesah sandi paling tingkat lanjut."

msgid "Enabling password validation"
msgstr "Adakan pengesahan sandi"

msgid ""
"Password validation is configured in the :setting:`AUTH_PASSWORD_VALIDATORS` "
"setting::"
msgstr ""
"Pengesahan sandi dikonfigurasikan di pengaturan :setting:"
"`AUTH_PASSWORD_VALIDATORS`::"

msgid "This example enables all four included validators:"
msgstr "Contoh ini mengadakan semua empat pengesah disertakan:"

msgid ""
"``UserAttributeSimilarityValidator``, which checks the similarity between "
"the password and a set of attributes of the user."
msgstr ""
"``UserAttributeSimilarityValidator``, yang memeriksa kemiripan diantara "
"sandi dan sekumpulan dari atribut dari pengguna."

msgid ""
"``MinimumLengthValidator``, which checks whether the password meets a "
"minimum length. This validator is configured with a custom option: it now "
"requires the minimum length to be nine characters, instead of the default "
"eight."
msgstr ""

msgid ""
"``CommonPasswordValidator``, which checks whether the password occurs in a "
"list of common passwords. By default, it compares to an included list of "
"20,000 common passwords."
msgstr ""

msgid ""
"``NumericPasswordValidator``, which checks whether the password isn't "
"entirely numeric."
msgstr ""
"``NumericPasswordValidator``, yang memeriksa apakah sandi tidak sepenuhnya "
"numerik."

msgid ""
"For ``UserAttributeSimilarityValidator`` and ``CommonPasswordValidator``, "
"we're using the default settings in this example. "
"``NumericPasswordValidator`` has no settings."
msgstr ""

msgid ""
"The help texts and any errors from password validators are always returned "
"in the order they are listed in :setting:`AUTH_PASSWORD_VALIDATORS`."
msgstr ""
"Teks bantuan dan kesalahan apapun dari pengesah sandi selalu dikembalikan "
"agar mereka didaftarkan di :setting:`AUTH_PASSWORD_VALIDATORS`."

msgid "Included validators"
msgstr "Disertakan pengesah"

msgid "Django includes four validators:"
msgstr "Django menyertakan empat pengesah:"

msgid ""
"Validates whether the password meets a minimum length. The minimum length "
"can be customized with the ``min_length`` parameter."
msgstr ""
"Mengesahkan apakah sandi memenuhi panjang minimal. Panjang minimal dapat "
"disesuaikan dengan parameter ``min_length``."

msgid ""
"Validates whether the password is sufficiently different from certain "
"attributes of the user."
msgstr ""
"Mengesahkan apakah sandi cukup berbeda dari atribut tertentu dari pengguna."

msgid ""
"The ``user_attributes`` parameter should be an iterable of names of user "
"attributes to compare to. If this argument is not provided, the default is "
"used: ``'username', 'first_name', 'last_name', 'email'``. Attributes that "
"don't exist are ignored."
msgstr ""
"Parameter ``user_attributes`` harus berupa sebuah perulangan dari nama-namad "
"dari atribut pengguna untuk dibandingkan. Jika argumen ini tidak disediakan, "
"awalan adalah digunakan: ``'username', 'first_name', 'last_name', 'email'``. "
"Atribut-atribut yang tidak ada adalah diabaikan."

msgid ""
"The maximum allowed similarity of passwords can be set on a scale of 0.1 to "
"1.0 with the ``max_similarity`` parameter. This is compared to the result "
"of :meth:`difflib.SequenceMatcher.quick_ratio`. A value of 0.1 rejects "
"passwords unless they are substantially different from the "
"``user_attributes``, whereas a value of 1.0 rejects only passwords that are "
"identical to an attribute's value."
msgstr ""

msgid "The ``max_similarity`` parameter was limited to a minimum value of 0.1."
msgstr ""

msgid ""
"Validates whether the password is not a common password. This converts the "
"password to lowercase (to do a case-insensitive comparison) and checks it "
"against a list of 20,000 common password created by `Royce Williams <https://"
"gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7>`_."
msgstr ""

msgid ""
"The ``password_list_path`` can be set to the path of a custom file of common "
"passwords. This file should contain one lowercase password per line and may "
"be plain text or gzipped."
msgstr ""
"``password_list_path`` dapat disetel ke jalur dari berkas penyesuaian dari "
"sandi umum. Berkas ini harus mengandung sandi satu huruf kecil per baris dan "
"mungkin berupa teks polos atau gzipped."

msgid "Validates whether the password is not entirely numeric."
msgstr "Mengesahkan apakah sandi tidak sepenuhnya numerik."

msgid "Integrating validation"
msgstr "Memadukan pengesahan"

msgid ""
"There are a few functions in ``django.contrib.auth.password_validation`` "
"that you can call from your own forms or other code to integrate password "
"validation. This can be useful if you use custom forms for password setting, "
"or if you have API calls that allow passwords to be set, for example."
msgstr ""
"Ada sedikit fungsi di ``django.contrib.auth.password_validation`` yang anda "
"dapat memanggil dari formulir anda sendiri atau kode lain untuk memadukan "
"pengesahan sandi. Ini dapat berguna jika anda menggunakan penyesuaian "
"formulir untuk pengaturan sandi, atau jika anda mempunyai panggilan API yang "
"mengizinkan sandi disetel, sebagai contoh."

msgid ""
"Validates a password. If all validators find the password valid, returns "
"``None``. If one or more validators reject the password, raises a :exc:"
"`~django.core.exceptions.ValidationError` with all the error messages from "
"the validators."
msgstr ""
"Mengesahkan sebuah sandi. Jika semua pengesah menemukan sandi sah, "
"mengembalikan ``None``. Jika satu atau lebih pengesah menolak sandi, "
"memunculkan sebuah :exc:`~django.core.exceptions.ValidationError` dengan "
"semua pesan-pesan kesalahan dari pengesah."

msgid ""
"The ``user`` object is optional: if it's not provided, some validators may "
"not be able to perform any validation and will accept any password."
msgstr ""
"Obyek ``user`` adalah pilihan: jika itu tidak disediakan, beberapa pengesah "
"mungkin tidak dapat melakukan pengesahan apapun dan akan menerima sandi "
"apapun."

msgid ""
"Informs all validators that the password has been changed. This can be used "
"by validators such as one that prevents password reuse. This should be "
"called once the password has been successfully changed."
msgstr ""
"Menginformasikan semua pengesah yang sandi telah berubah. Ini dapat "
"digunakan oleh pengesah seperti satu yang mencegah penggunaan kembali sandi. "
"Ini harus dipanggil sekali sandi telah berhasil dirubah."

msgid ""
"For subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser`, the "
"password field will be marked as \"dirty\" when calling :meth:`~django."
"contrib.auth.models.AbstractBaseUser.set_password` which triggers a call to "
"``password_changed()`` after the user is saved."
msgstr ""
"Untuk subkelas-subkelas dari :class:`~django.contrib.auth.models."
"AbstractBaseUser`, bidang sandi akan ditandai sebagai \"dirty\" ketika "
"memanggil :meth:`~django.contrib.auth.models.AbstractBaseUser.set_password` "
"yang memicu semua pada ``password_changed()`` setelah pengguna disimpan."

msgid ""
"Returns a list of the help texts of all validators. These explain the "
"password requirements to the user."
msgstr ""
"Mengembalikan daftar dari teks bantuan dari semua pengesah. Ini menjelaskan "
"persyaratan sandi ke pengguna."

msgid ""
"Returns an HTML string with all help texts in an ``<ul>``. This is helpful "
"when adding password validation to forms, as you can pass the output "
"directly to the ``help_text`` parameter of a form field."
msgstr ""
"Mengembalikan sebuah string HTML dengan semua bantuan teks di sebuah "
"``<ul>``. Ini sangat membantu ketika menambahkan pengesahan pada formulir, "
"ketika anda dapat melewatkan keluaran secara langsung ke parameter "
"``help_text`` dari bidang formulir."

msgid ""
"Returns a set of validator objects based on the ``validator_config`` "
"parameter. By default, all functions use the validators defined in :setting:"
"`AUTH_PASSWORD_VALIDATORS`, but by calling this function with an alternate "
"set of validators and then passing the result into the "
"``password_validators`` parameter of the other functions, your custom set of "
"validators will be used instead. This is useful when you have a typical set "
"of validators to use for most scenarios, but also have a special situation "
"that requires a custom set. If you always use the same set of validators, "
"there is no need to use this function, as the configuration from :setting:"
"`AUTH_PASSWORD_VALIDATORS` is used by default."
msgstr ""
"Mengembalikan sekelompok obyek pengesah berdasarkan pada parameter "
"``validator_config``. Secara awalan, semua fungsi menggunakan pengesah "
"ditentukan di :setting:`AUTH_PASSWORD_VALIDATORS`, tetapi dengan memanggil "
"fungsi ini dengan alternatif kumpulan dari pengesah dan kemudian melewatkan "
"hasil kedalam parameter ``password_validators`` dari fungsi lain, kumpulan "
"penyesuaian anda dari pengesah akan digunakan sebagai gantinya. Ini sangat "
"berguna ketika anda mempunyai kumpulan khusus dari pengesah untuk "
"menggunakan kebanyakan skenario, tetapi juga mempunyai keadaan khusus yang "
"membutuhkan penyesuaian kumpulan. Jika anda selalu menggunakan kumpulan sama "
"dari pengesah, tidak perlu menggunakan fungsi ini, ketika konfigurasi dari :"
"setting:`AUTH_PASSWORD_VALIDATORS` digunakan secara awalan."

msgid ""
"The structure of ``validator_config`` is identical to the structure of :"
"setting:`AUTH_PASSWORD_VALIDATORS`. The return value of this function can be "
"passed into the ``password_validators`` parameter of the functions listed "
"above."
msgstr ""
"Struktur dari ``validator_config``mirip pada struktur dari :setting:"
"`AUTH_PASSWORD_VALIDATORS`. Nilai kembalian dari fungsi ini dapat dilewatkan "
"kedalam parameter ``password_validators`` dari fungsi-fungsi terdaftar "
"diatas."

msgid ""
"Note that where the password is passed to one of these functions, this "
"should always be the clear text password - not a hashed password."
msgstr ""
"Catat bahwa dimana sandi dilewatkan ke satu dari fungsi-fungsi ini, ini "
"harus selalu sandi teks jelas - bukan sebuah sandi dicampur."

msgid "Writing your own validator"
msgstr "Menulis pengesah anda sendiri"

msgid ""
"If Django's built-in validators are not sufficient, you can write your own "
"password validators. Validators have a fairly small interface. They must "
"implement two methods:"
msgstr ""

msgid ""
"``validate(self, password, user=None)``: validate a password. Return "
"``None`` if the password is valid, or raise a :exc:`~django.core.exceptions."
"ValidationError` with an error message if the password is not valid. You "
"must be able to deal with ``user`` being ``None`` - if that means your "
"validator can't run, return ``None`` for no error."
msgstr ""

msgid ""
"``get_help_text()``: provide a help text to explain the requirements to the "
"user."
msgstr ""
"``get_help_text()``: menyediakan teks bantuan untuk menjelaskan persyaratan "
"ke pengguna."

msgid ""
"Any items in the ``OPTIONS`` in :setting:`AUTH_PASSWORD_VALIDATORS` for your "
"validator will be passed to the constructor. All constructor arguments "
"should have a default value."
msgstr ""
"Barang apapun di ``OPTIONS`` di :setting:`AUTH_PASSWORD_VALIDATORS` untuk "
"pengesah anda akan dilewatkan ke pembangun. Semua argumen pembangun harus "
"memiliki nilai awalan."

msgid "Here's a basic example of a validator, with one optional setting::"
msgstr ""
"Ini adalah contoh dasar dari pengecekan, dengan satu pilihan pengaturan::"

msgid ""
"You can also implement ``password_changed(password, user=None``), which will "
"be called after a successful password change. That can be used to prevent "
"password reuse, for example. However, if you decide to store a user's "
"previous passwords, you should never do so in clear text."
msgstr ""
"Anda dapat juga menerapkan ``password_changed(password, user=None``), yang "
"akan dipanggil setelah perubahan sandi berhasil. Itu dapat digunakan untuk "
"mencegah penggunaan kembali sandi, sebagai contoh. Bagaimanapun, jika anda "
"memutuskan menyimpan sandi pengguna sebelumnya, anda harus tidak pernah "
"melakukannya di pembersihan teks."

msgid "Django's cache framework"
msgstr "Kerangka kerja penyimpanan Django"

msgid ""
"A fundamental trade-off in dynamic websites is, well, they're dynamic. Each "
"time a user requests a page, the web server makes all sorts of calculations "
"-- from database queries to template rendering to business logic -- to "
"create the page that your site's visitor sees. This is a lot more expensive, "
"from a processing-overhead perspective, than your standard read-a-file-off-"
"the-filesystem server arrangement."
msgstr ""

msgid ""
"For most web applications, this overhead isn't a big deal. Most web "
"applications aren't ``washingtonpost.com`` or ``slashdot.org``; they're "
"small- to medium-sized sites with so-so traffic. But for medium- to high-"
"traffic sites, it's essential to cut as much overhead as possible."
msgstr ""

msgid "That's where caching comes in."
msgstr "Itu adalah dimana cache datang."

msgid ""
"To cache something is to save the result of an expensive calculation so that "
"you don't have to perform the calculation next time. Here's some pseudocode "
"explaining how this would work for a dynamically generated web page::"
msgstr ""

msgid ""
"Django comes with a robust cache system that lets you save dynamic pages so "
"they don't have to be calculated for each request. For convenience, Django "
"offers different levels of cache granularity: You can cache the output of "
"specific views, you can cache only the pieces that are difficult to produce, "
"or you can cache your entire site."
msgstr ""
"Django datang dengan sistem cache kuat yang membiarkan anda mentimpan "
"halaman-halaman dinamis sehingga mereka tidak harus dihitung untuk setiap "
"permintaan. Untuk kenyamanan, Django menawarkan tingkatan berbeda dari "
"butiran cache: Anda dapat cache keluaran dari tampilan khusus, anda dapat "
"cache hanya potongan-potongan yang sulit dihasilkan, atau anda dapat cache "
"kelesuruhan situs anda."

msgid ""
"Django also works well with \"downstream\" caches, such as `Squid <http://"
"www.squid-cache.org/>`_ and browser-based caches. These are the types of "
"caches that you don't directly control but to which you can provide hints "
"(via HTTP headers) about which parts of your site should be cached, and how."
msgstr ""

msgid ""
"The :ref:`Cache Framework design philosophy <cache-design-philosophy>` "
"explains a few of the design decisions of the framework."
msgstr ""
":ref:`Cache Framework design philosophy <cache-design-philosophy>` "
"menjelaskan sedikit dari keputusan rancangan dari kerangka kerja."

msgid "Setting up the cache"
msgstr "Mengatur tembolok"

msgid ""
"The cache system requires a small amount of setup. Namely, you have to tell "
"it where your cached data should live -- whether in a database, on the "
"filesystem or directly in memory. This is an important decision that affects "
"your cache's performance; yes, some cache types are faster than others."
msgstr ""
"Sistem cache membutuhkan sejumlah kecil pengaturan. Yaitu, anda harus "
"memberitahu itu dimana data cache anda harus tinggal -- apakah di basisdata, "
"pada sistem berkas atau langsung di memori. Ini adalah keputusan penting "
"yang mempengaruhi penampilan cache anda; ya beberapa jenis cache adalah "
"lebih cepat dari lainnya."

msgid ""
"Your cache preference goes in the :setting:`CACHES` setting in your settings "
"file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""
"Pilihan cache anda masuk di pengaturan :setting:`CACHES` di berkas "
"pengaturan anda. Ini adalah sebuah penjelasan dari semua nilai-nilai "
"tersedia untuk :setting:`CACHES`."

msgid "Memcached"
msgstr "Memcache"

msgid ""
"Memcached__ is an entirely memory-based cache server, originally developed "
"to handle high loads at LiveJournal.com and subsequently open-sourced by "
"Danga Interactive. It is used by sites such as Facebook and Wikipedia to "
"reduce database access and dramatically increase site performance."
msgstr ""

msgid ""
"Memcached runs as a daemon and is allotted a specified amount of RAM. All it "
"does is provide a fast interface for adding, retrieving and deleting data in "
"the cache. All data is stored directly in memory, so there's no overhead of "
"database or filesystem usage."
msgstr ""
"Memcached berjalan sebagai daemon dan memberikan sejumlah tertentu dari RAM. "
"Semua itu lakukan adalah menyediakan antarmuka cepat untuk menambah, "
"mengambil dan menghapus data di cache. Semua data disimpan secara langsung "
"di memori, sehingga tidak ada kelebihan dari basisdata atau penggunaan "
"sistem berkas."

msgid ""
"After installing Memcached itself, you'll need to install a Memcached "
"binding. There are several Python Memcached bindings available; the two "
"supported by Django are `pylibmc`_ and `pymemcache`_."
msgstr ""

msgid "To use Memcached with Django:"
msgstr "Untuk menggunakan Memcache dengan Django:"

msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends."
"memcached.PyMemcacheCache`` or ``django.core.cache.backends.memcached."
"PyLibMCCache`` (depending on your chosen memcached binding)"
msgstr ""

msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where "
"``ip`` is the IP address of the Memcached daemon and ``port`` is the port on "
"which Memcached is running, or to a ``unix:path`` value, where ``path`` is "
"the path to a Memcached Unix socket file."
msgstr ""
"Setel :setting:`LOCATION <CACHES-LOCATION>` menjadi nilai-nilai ``ip:port``, "
"dimana ``ip`` adalah alamat IP dari daemon memcache dan ``port`` adalah "
"pangkalan pada Memcache mana yang berjalan, atau menjadi nilai ``unix:"
"path``, dimana ``path`` adalah jalur ke berkas soket Unix Memcache. "

msgid ""
"In this example, Memcached is running on localhost (127.0.0.1) port 11211, "
"using the ``pymemcache`` binding::"
msgstr ""

msgid ""
"In this example, Memcached is available through a local Unix socket file :"
"file:`/tmp/memcached.sock` using the ``pymemcache`` binding::"
msgstr ""

msgid ""
"One excellent feature of Memcached is its ability to share a cache over "
"multiple servers. This means you can run Memcached daemons on multiple "
"machines, and the program will treat the group of machines as a *single* "
"cache, without the need to duplicate cache values on each machine. To take "
"advantage of this feature, include all server addresses in :setting:"
"`LOCATION <CACHES-LOCATION>`, either as a semicolon or comma delimited "
"string, or as a list."
msgstr ""
"Satu fitur yg hebar dari Memcache adalah kemampuannya berbagi sebuah cache "
"terhadap banyak peladen. Ini berarti anda dapat menjalankan daemon Memcache "
"pada banyak mesin, dan program akan memperlakukan kelompok mesin sebagai "
"cache *tunggal*, tanpa butuh menggandakan nilai-nilai cache pada setiap "
"mesin. Untuk mengambil keuntungan fitur ini, sertakan semua alamat peladen "
"dalam :setting:`LOCATION 1`,antara sebagai titik koma atau string dipisahkan "
"koma, atau sebagai sebuah daftar."

msgid ""
"In this example, the cache is shared over Memcached instances running on IP "
"address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""
"Di contoh ini, penyimpanan dibagi terhadao instance Memcache berjalan pada "
"alamat IP 172.19.26.240 dan 172.19.26.242, keduanya di port 11211::"

msgid ""
"In the following example, the cache is shared over Memcached instances "
"running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port "
"11212), and 172.19.26.244 (port 11213)::"
msgstr ""
"Di contoh berikut, cache dibagi terhadap instance Memcache berjalan pada "
"alamat IP 172.19.26.240 (port 11211), 172.19.26.242 (port 11212), dan "
"172.19.26.244 (port 11213)::"

msgid ""
"A final point about Memcached is that memory-based caching has a "
"disadvantage: because the cached data is stored in memory, the data will be "
"lost if your server crashes. Clearly, memory isn't intended for permanent "
"data storage, so don't rely on memory-based caching as your only data "
"storage. Without a doubt, *none* of the Django caching backends should be "
"used for permanent storage -- they're all intended to be solutions for "
"caching, not storage -- but we point this out here because memory-based "
"caching is particularly temporary."
msgstr ""
"Sebuah titik akhir tentang Memcached adalah cache berdasarkan-memori "
"mempunyai kerugian: karena data cache disimpan di memori, data akan hilang "
"jika peladen anda gagal. Jelasnya, memori tidak diperuntukkan untuk "
"penyimpanan data tetap, jadi jangan bergantung oada cache berdasarkan-memori "
"sebagai penyimpanan data anda satu-satunya -- mereka adalah diperuntukkan "
"pemecahan untuk cache, bukan penyimpanan -- tetapi kami menitikkan ini "
"disini karena cache berdasarkan-memori adalah khususnya sementara."

msgid "The ``PyMemcacheCache`` backend was added."
msgstr "Backend ``PyMemcacheCache`` telah ditambahkan."

msgid ""
"The ``MemcachedCache`` backend is deprecated as ``python-memcached`` has "
"some problems and seems to be unmaintained. Use ``PyMemcacheCache`` or "
"``PyLibMCCache`` instead."
msgstr ""

msgid "Redis"
msgstr ""

msgid ""
"Redis__ is an in-memory database that can be used for caching. To begin "
"you'll need a Redis server running either locally or on a remote machine."
msgstr ""

msgid ""
"After setting up the Redis server, you'll need to install Python bindings "
"for Redis. `redis-py`_ is the binding supported natively by Django. "
"Installing the additional `hiredis-py`_ package is also recommended."
msgstr ""

msgid "To use Redis as your cache backend with Django:"
msgstr ""

msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends."
"redis.RedisCache``."
msgstr ""

msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to the URL pointing to your Redis "
"instance, using the appropriate scheme. See the ``redis-py`` docs for "
"`details on the available schemes <https://redis-py.readthedocs.io/en/stable/"
"connections.html#redis.connection.ConnectionPool.from_url>`_."
msgstr ""

msgid "For example, if Redis is running on localhost (127.0.0.1) port 6379::"
msgstr ""

msgid ""
"Often Redis servers are protected with authentication. In order to supply a "
"username and password, add them in the ``LOCATION`` along with the URL::"
msgstr ""

msgid ""
"If you have multiple Redis servers set up in the replication mode, you can "
"specify the servers either as a semicolon or comma delimited string, or as a "
"list. While using multiple servers, write operations are performed on the "
"first server (leader). Read operations are performed on the other servers "
"(replicas) chosen at random::"
msgstr ""

msgid "Database caching"
msgstr "Menembolok basisdata"

msgid ""
"Django can store its cached data in your database. This works best if you've "
"got a fast, well-indexed database server."
msgstr ""
"Django dapat menyimpan data temboloknya dalam basisdata anda. Ini bekerja "
"baik jika anda mendapatkan cepat, peladen basisdata diindeks baik."

msgid "To use a database table as your cache backend:"
msgstr "Untuk menggunakan tabel basisdata sebagai backend tembolok anda:"

msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends.db."
"DatabaseCache``"
msgstr ""
"Setel :setting:`BACKEND <CACHES-BACKEND>` menjadi ``django.core.cache."
"backends.db.DatabaseCache``"

msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``tablename``, the name of the "
"database table. This name can be whatever you want, as long as it's a valid "
"table name that's not already being used in your database."
msgstr ""
"Setel :setting:`LOCATION <CACHES-LOCATION>` menjadi ``tablename``, nama dari "
"tabel basisdata. Nama ini dapat menjadi apapun anda inginkan, selama dia "
"adalah nama tabel yang sah yang tidak sedang digunakan dalam basisdata anda."

msgid "In this example, the cache table's name is ``my_cache_table``::"
msgstr "Dalam contoh ini, nama tabel tembolok adalah ``my_cache_table``::"

msgid ""
"Unlike other cache backends, the database cache does not support automatic "
"culling of expired entries at the database level. Instead, expired cache "
"entries are culled each time ``add()``, ``set()``, or ``touch()`` is called."
msgstr ""

msgid "Creating the cache table"
msgstr "Membuat tabel tembolok"

msgid ""
"Before using the database cache, you must create the cache table with this "
"command::"
msgstr ""
"Sebelum menggunakan basisdata tembolok, anda harus membuat tabel tembolok "
"dengan perintah ini::"

msgid ""
"This creates a table in your database that is in the proper format that "
"Django's database-cache system expects. The name of the table is taken from :"
"setting:`LOCATION <CACHES-LOCATION>`."
msgstr ""
"Ini membuat tabel di basisdata anda yaitu dalam bentuk sesuai yang sistem "
"tembolok-basidata harapkan. Nama dari tabel diambil dari :setting:`LOCATION "
"<CACHES-LOCATION>`."

msgid ""
"If you are using multiple database caches, :djadmin:`createcachetable` "
"creates one table for each cache."
msgstr ""
"Jika anda menggunakan banyak basisdata tembolok, :djadmin:`createcachetable` "
"membuat satu tabel untuk setiap tembolok."

msgid ""
"If you are using multiple databases, :djadmin:`createcachetable` observes "
"the ``allow_migrate()`` method of your database routers (see below)."
msgstr ""
"Jika anda menggunakan banyak basisdata, :djadmin:`createcachetable` "
"mengamati cara ``allow_migrate()`` dari perute basisdata anda (lihat "
"dibawah)."

msgid ""
"Like :djadmin:`migrate`, :djadmin:`createcachetable` won't touch an existing "
"table. It will only create missing tables."
msgstr ""
"Seperti :djadmin:`migrate`, :djadmin:`createcachetable` tidak akan menyentuh "
"tabel yang ada. Dia tidak akan membuat tabel-tabel hilang."

msgid ""
"To print the SQL that would be run, rather than run it, use the :option:"
"`createcachetable --dry-run` option."
msgstr ""
"Untuk mencetak SQL yang akan menjalankan, daripada menjalankannya, gunakan "
"pilihan :option:`createcachetable --dry-run`."

msgid "Multiple databases"
msgstr "Basisdata banyak"

msgid ""
"If you use database caching with multiple databases, you'll also need to set "
"up routing instructions for your database cache table. For the purposes of "
"routing, the database cache table appears as a model named ``CacheEntry``, "
"in an application named ``django_cache``. This model won't appear in the "
"models cache, but the model details can be used for routing purposes."
msgstr ""
"Jika anda menggunakan penembolokan basisdata dengan banyak basisdata, anda "
"akan juga butuh menyetel perintah perutean untuk tabel tembolok basisdata "
"anda. Untuk tujuan perutean, tabel tembolok basisdata muncul sebagai model "
"dinamai ``CacheEntry``, di aplikasi dinamai ``django_cache``. Model ini "
"tidak akan muncul dalam model tembolok, tetapi rincian model dapat digunakan "
"untuk tujuan perutean."

msgid ""
"For example, the following router would direct all cache read operations to "
"``cache_replica``, and all write operations to ``cache_primary``. The cache "
"table will only be synchronized onto ``cache_primary``::"
msgstr ""
"Sebagai contoh, perute berikut akan melangsungkan semua tindakan pembacaan "
"tembolok ke ``cache_replica``, dan semua tindakan penulisan ke "
"``cache_primary``. Tabel tembolok hanya disinkronisasikan kedalam  "
"``cache_primary``:: "

msgid ""
"If you don't specify routing directions for the database cache model, the "
"cache backend will use the ``default`` database."
msgstr ""
"Jika anda tidak menentukan arah perute untuk model cache basisdata, backend "
"cache akan menggunakan basisdata ``default``."

msgid ""
"And if you don't use the database cache backend, you don't need to worry "
"about providing routing instructions for the database cache model."
msgstr ""

msgid "Filesystem caching"
msgstr "Cache sistem berkas"

msgid ""
"The file-based backend serializes and stores each cache value as a separate "
"file. To use this backend set :setting:`BACKEND <CACHES-BACKEND>` to ``"
"\"django.core.cache.backends.filebased.FileBasedCache\"`` and :setting:"
"`LOCATION <CACHES-LOCATION>` to a suitable directory. For example, to store "
"cached data in ``/var/tmp/django_cache``, use this setting::"
msgstr ""
"Serial backend berdasarkan-berkas dan menyimpan setiap nilai cache sebagai "
"berkas terpisah. Untuk menggunakan backend ini setel :setting:`BACKEND "
"<CACHES-BACKEND>` menjadi ``\"django.core.cache.backends.filebased."
"FileBasedCache\"`` dan :setting:`LOCATION <CACHES-LOCATION>` menjadi "
"direktori yang cocok. Sebagai contoh, untuk menyimpan data di ``/var/tmp/"
"django_cache``, gunakan pengaturan ini::"

msgid ""
"If you're on Windows, put the drive letter at the beginning of the path, "
"like this::"
msgstr ""
"Jika anda berada di Windows, taruh huruf drive pada awal jalur, seperti ini::"

msgid ""
"The directory path should be absolute -- that is, it should start at the "
"root of your filesystem. It doesn't matter whether you put a slash at the "
"end of the setting."
msgstr ""
"Jalur direktori harus mutlak -- yaitu, itu harus dimulai pada induk dari "
"sistem berkas anda. Itu tidak mengapa apakah anda menaruh sebuah garis "
"miring pada akhir pengaturan."

msgid ""
"Make sure the directory pointed-to by this setting either exists and is "
"readable and writable, or that it can be created by the system user under "
"which your web server runs. Continuing the above example, if your server "
"runs as the user ``apache``, make sure the directory ``/var/tmp/"
"django_cache`` exists and is readable and writable by the user ``apache``, "
"or that it can be created by the user ``apache``."
msgstr ""

msgid ""
"When the cache :setting:`LOCATION <CACHES-LOCATION>` is contained within :"
"setting:`MEDIA_ROOT`, :setting:`STATIC_ROOT`, or :setting:"
"`STATICFILES_FINDERS`, sensitive data may be exposed."
msgstr ""

msgid ""
"An attacker who gains access to the cache file can not only falsify HTML "
"content, which your site will trust, but also remotely execute arbitrary "
"code, as the data is serialized using :mod:`pickle`."
msgstr ""

msgid "Local-memory caching"
msgstr "Cache memori-lokal"

msgid ""
"This is the default cache if another is not specified in your settings file. "
"If you want the speed advantages of in-memory caching but don't have the "
"capability of running Memcached, consider the local-memory cache backend. "
"This cache is per-process (see below) and thread-safe. To use it, set :"
"setting:`BACKEND <CACHES-BACKEND>` to ``\"django.core.cache.backends.locmem."
"LocMemCache\"``. For example::"
msgstr ""
"Ini adalah cache awalan jika lainnya tidak ditentukan di berkas pengaturan "
"anda. Jika anda ingin mempercepat keuntungan dari cace di-memori tetapi "
"tidak mempunyai kemampuan dari menjalankan Memcached, perimbangkan backend "
"cache memori-lokal. Cache ini adalah per-pengolahan (lihat dibawah) dan "
"thread-safe. Untuk menggunakan itu, setel :setting:`BACKEND <CACHES-"
"BACKEND>` menjadi ``\"django.core.cache.backends.locmem.LocMemCache\"``. "
"Sebagai contoh::"

msgid ""
"The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify "
"individual memory stores. If you only have one ``locmem`` cache, you can "
"omit the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more "
"than one local memory cache, you will need to assign a name to at least one "
"of them in order to keep them separate."
msgstr ""
"Cache :setting:`LOCATION <CACHES-LOCATION>` digunakan untuk mencirikan "
"penyimpanan memori tersendiri. Jika anda hanya mempunyai satu cache "
"``locmem``, anda dapat mengabaikan :setting:`LOCATION <CACHES-LOCATION>`; "
"bagaimanapun, jikla anda mempunyai lebih dari satu cache memori lokal, anda "
"akan butuh memberikan sebuah nama pada setidaknya satu dari mereka agar "
"menjaga mereka terpisah."

msgid "The cache uses a least-recently-used (LRU) culling strategy."
msgstr ""
"Penyimpanan sementara menggunakan strategi pemusnahan least-recently-used "
"(LRU)."

msgid ""
"Note that each process will have its own private cache instance, which means "
"no cross-process caching is possible. This also means the local memory cache "
"isn't particularly memory-efficient, so it's probably not a good choice for "
"production environments. It's nice for development."
msgstr ""

msgid "Dummy caching (for development)"
msgstr "Cache tiruan (untuk pengembangan)"

msgid ""
"Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- "
"it just implements the cache interface without doing anything."
msgstr ""
"Akhirnya, Django datang dengan cache \"dummy\" yang tidak sebenarnya cache "
"-- itu hanya menerapkan antarmuka cache tanpa melakukan apapun."

msgid ""
"This is useful if you have a production site that uses heavy-duty caching in "
"various places but a development/test environment where you don't want to "
"cache and don't want to have to change your code to special-case the latter. "
"To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like so::"
msgstr ""
"Ini adalah sangat berguna jika anda mempunyai situs produksi yang "
"menggunakan cache pekerjaan-berat di beragam tempat tetapi lingkungan "
"pengembangan/percobaan dimana anda tidak ingin cache dan tidak ingin merubah "
"kode anda pada kasus-khusus terakhir. Untuk mengaktifkan cache dummy, setel :"
"setting:`BACKEND <CACHES-BACKEND>` seperti begitu::"

msgid "Using a custom cache backend"
msgstr "Menggunakan backend cache penyesuaian"

msgid ""
"While Django includes support for a number of cache backends out-of-the-box, "
"sometimes you might want to use a customized cache backend. To use an "
"external cache backend with Django, use the Python import path as the :"
"setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like "
"so::"
msgstr ""
"Selagi Django menyertakan dukungan untuk sejumlah backend cache keluar-dari-"
"kotak, terkadang anda mungkin ingin menggunakan backend cache disesuaikan. "
"Untuk menggunakan backend cache luar dengan Django, gunakan jalur impor "
"Python sebagai :setting:`BACKEND <CACHES-BACKEND>` dari :setting:`CACHES` "
"setting, seperti begitu::"

msgid ""
"If you're building your own backend, you can use the standard cache backends "
"as reference implementations. You'll find the code in the ``django/core/"
"cache/backends/`` directory of the Django source."
msgstr ""
"Jika anda sedang membangun backend anda sendiri, anda dapat menggunakan "
"backend cache standar sebagai acuan penerapan. Anda akan menemukan kode di "
"direktori ``django/core/cache/backends/`` dari sumber Django."

msgid ""
"Note: Without a really compelling reason, such as a host that doesn't "
"support them, you should stick to the cache backends included with Django. "
"They've been well-tested and are well-documented."
msgstr ""

msgid "Cache arguments"
msgstr "Argumen cache"

msgid ""
"Each cache backend can be given additional arguments to control caching "
"behavior. These arguments are provided as additional keys in the :setting:"
"`CACHES` setting. Valid arguments are as follows:"
msgstr ""
"Setiap backend cache dapat memberikan argumen tambahan untuk mengendalikan "
"perilaku cache. Argumen-argumen ini disediakan sebagai kunci-kunci tambahan "
"di pengaturan :setting:`CACHES`. Argumen-argumen sah seperti berikut:"

msgid ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use "
"for the cache. This argument defaults to ``300`` seconds (5 minutes). You "
"can set ``TIMEOUT`` to ``None`` so that, by default, cache keys never "
"expire. A value of ``0`` causes keys to immediately expire (effectively "
"\"don't cache\")."
msgstr ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: Awalan waktu habis, dalam detik, untuk "
"digunakan untuk cache. Awalan argumen ini pada ``300`` detik (5 menit). Anda "
"dapat mensetel ``TIMEOUT`` menjadi ``None`` sehingga, secara awalan, kunci-"
"kunci cache tidak pernah kadaluarsa. Sebuah nilai ``0`` menyebabkan kunci "
"segera kadaluarsa (efektifnya \"don't cache\")."

msgid ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to "
"the cache backend. The list of valid options will vary with each backend, "
"and cache backends backed by a third-party library will pass their options "
"directly to the underlying cache library."
msgstr ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Pilihan apapun yang harus dilewatkan ke "
"backend cache. Daftar dari pilihan sah akan beragam dengan setiap backend, "
"dan backend cache oleh pustaka pihak-ketiga akan melewatkan pilihan mereka "
"langsung ke pustaka cache pokok."

msgid ""
"Cache backends that implement their own culling strategy (i.e., the "
"``locmem``, ``filesystem`` and ``database`` backends) will honor the "
"following options:"
msgstr ""
"Backend cache yang menerapkan strategi pemusnahan mereka sendiri (yaitu, "
"backend ``locmem``, ``filesystem`` dan ``database``) akan menghormati "
"pilihan-pilihan berikut:"

msgid ""
"``MAX_ENTRIES``: The maximum number of entries allowed in the cache before "
"old values are deleted. This argument defaults to ``300``."
msgstr ""
"``MAX_ENTRIES``: Nomor maksimal dari masukan diizinkan di cache sebelum "
"nilai-nilai lama dihapus. Argumen ini awalan pada ``300``."

msgid ""
"``CULL_FREQUENCY``: The fraction of entries that are culled when "
"``MAX_ENTRIES`` is reached. The actual ratio is ``1 / CULL_FREQUENCY``, so "
"set ``CULL_FREQUENCY`` to ``2`` to cull half the entries when "
"``MAX_ENTRIES`` is reached. This argument should be an integer and defaults "
"to ``3``."
msgstr ""
"`CULL_FREQUENCY``: Pecahan masukan yang dimusnahkan ketika ``MAX_ENTRIES`` "
"dicapai. Rasio sebenarnya adalah ``1 / CULL_FREQUENCY``, jadi menyetel "
"``CULL_FREQUENCY`` menjadi ``2`` pada pemusnahan setengah masukan ketika "
"``MAX_ENTRIES``dicapai. Argumen ini harus berupa integer dan awalan pada "
"``3``. "

msgid ""
"A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be "
"dumped when ``MAX_ENTRIES`` is reached. On some backends (``database`` in "
"particular) this makes culling *much* faster at the expense of more cache "
"misses."
msgstr ""
"Sebuah nilai dari ``0`` untuk ``CULL_FREQUENCY`` berarti bahwa keseluruhan "
"cache akan dibuang ketika ``MAX_ENTRIES`` dicapai. Pada beberapa backend "
"(``database`` khususnya) ini membuat pemusnahan *jauh* lebih cepat pada "
"pengeluaran dari lebih cache luput."

msgid ""
"The Memcached and Redis backends pass the contents of :setting:`OPTIONS "
"<CACHES-OPTIONS>` as keyword arguments to the client constructors, allowing "
"for more advanced control of client behavior. For example usage, see below."
msgstr ""

msgid ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be "
"automatically included (prepended by default) to all cache keys used by the "
"Django server."
msgstr ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: Sebuah string yang akan otomatis "
"disertakan (ditambahkan secara awalan) ke semua kunci-kunci cache digunakan "
"oleh peladen Django."

msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr ""
"Lihat :ref:`cache documentation <cache_key_prefixing>` untuk informasi lebih."

msgid ""
":setting:`VERSION <CACHES-VERSION>`: The default version number for cache "
"keys generated by the Django server."
msgstr ""
":setting:`VERSION <CACHES-VERSION>`: Nomor versi awalan untuk kunci-kunci "
"cache dibangkitkan oleh peladen Django."

msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""
"Lihat the :ref:`cache documentation <cache_versioning>` untuk informasi "
"lebih."

msgid ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted "
"path to a function that defines how to compose a prefix, version and key "
"into a final cache key."
msgstr ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` Sebuah string mengandung jalur "
"bertitik pada sebuah fungsi yang menentukan bagaimana menyusun sebuah "
"awalan, versi dan kunci kedalam kunci cache akhir."

msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr ""
"Lihat :ref:`cache documentation <cache_key_transformation>` untuk informasi "
"lebih."

msgid ""
"In this example, a filesystem backend is being configured with a timeout of "
"60 seconds, and a maximum capacity of 1000 items::"
msgstr ""
"Di contoh ini, backend sistem berkas sedang dikonfigurasikan dengan waktu "
"habis dari 60 detik, dan kapasitas maksimal dari 1000 barang::"

msgid ""
"Here's an example configuration for a ``pylibmc`` based backend that enables "
"the binary protocol, SASL authentication, and the ``ketama`` behavior mode::"
msgstr ""
"Ini adalah sebuah contoh konfigurasi untuk backend berdasarkan ``pylibmc`` "
"yang mengadakan protokol biner, autentifikasi SASL, dan suasana perilaku "
"``ketama``::"

msgid ""
"Here's an example configuration for a ``pymemcache`` based backend that "
"enables client pooling (which may improve performance by keeping clients "
"connected), treats memcache/network errors as cache misses, and sets the "
"``TCP_NODELAY`` flag on the connection's socket::"
msgstr ""

msgid ""
"Here's an example configuration for a ``redis`` based backend that selects "
"database ``10`` (by default Redis ships with 16 logical databases), "
"specifies a `parser class`_ (``redis.connection.HiredisParser`` will be used "
"by default if the ``hiredis-py`` package is installed), and sets a custom "
"`connection pool class`_ (``redis.ConnectionPool`` is used by default)::"
msgstr ""

msgid "The per-site cache"
msgstr "Cache per-site"

msgid ""
"Once the cache is set up, the simplest way to use caching is to cache your "
"entire site. You'll need to add ``'django.middleware.cache."
"UpdateCacheMiddleware'`` and ``'django.middleware.cache."
"FetchFromCacheMiddleware'`` to your :setting:`MIDDLEWARE` setting, as in "
"this example::"
msgstr ""
"Sekali cache disetel, cara termudah menggunakan cacge adalah cache situs "
"anda seluruhnya. Anda akan butuh menambahkan ``'django.middleware.cache."
"UpdateCacheMiddleware'`` dan ``'django.middleware.cache."
"FetchFromCacheMiddleware'`` ke pengaturan :setting:`MIDDLEWARE` anda, "
"seperti di contoh ini:: "

msgid ""
"No, that's not a typo: the \"update\" middleware must be first in the list, "
"and the \"fetch\" middleware must be last. The details are a bit obscure, "
"but see `Order of MIDDLEWARE`_ below if you'd like the full story."
msgstr ""
"Tidak, itu bukan salah ketik: middleware \"update\" harus pertama di daftar, "
"dan middleware \"fetch\" harus di terakhir. Rincian sedikit mengaburkan, "
"tetapi lihat `Order of MIDDLEWARE`_ dibawah jika anda ingin cerita penuh. "

msgid "Then, add the following required settings to your Django settings file:"
msgstr ""
"Kemudian, tambah pengaturan dibutuhkan berikut ke berkas pengaturan Django "
"anda:"

msgid ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- nama lain tembolok untuk digunakan "
"untuk penyimpanan."

msgid ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page "
"should be cached."
msgstr ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- Jumlah dari detik setiap halaman "
"harus disimpan."

msgid ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across "
"multiple sites using the same Django installation, set this to the name of "
"the site, or some other string that is unique to this Django instance, to "
"prevent key collisions. Use an empty string if you don't care."
msgstr ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- jika cacge dibagi lintas banyak "
"situs menggunakan pemasangan Django sama, setel ke nama dari situs, atau "
"beberapa string lain yang unik pada instance Django ini, untuk mencegah "
"tabrakan kunci. Gunakan sebuah string kosong jika anda tidak peduli."

msgid ""
"``FetchFromCacheMiddleware`` caches GET and HEAD responses with status 200, "
"where the request and response headers allow. Responses to requests for the "
"same URL with different query parameters are considered to be unique pages "
"and are cached separately. This middleware expects that a HEAD request is "
"answered with the same response headers as the corresponding GET request; in "
"which case it can return a cached GET response for HEAD request."
msgstr ""
"``FetchFromCacheMiddleware`` cache tanggapan GET dan HEAD dengan keadaan "
"200, dimana kepala permintaan dan tanggapan diizinkan. Tanggapan pada "
"permintaan untuk URL sama dengan parameter permintaan berbeda dianggap "
"menjadi halaman unik dan di cache terpisah. Middleware ini mengharapkan "
"bahwa sebuah permintaan HEAD dijawab dengan kepala tanggapan sesuai seperti "
"permintaan GET berkaitan; dalam hal ini itu dapat mengembalikan sebuah "
"tanggapan GET cache untuk permintaan HEAD."

msgid ""
"Additionally, ``UpdateCacheMiddleware`` automatically sets a few headers in "
"each :class:`~django.http.HttpResponse` which affect :ref:`downstream caches "
"<downstream-caches>`:"
msgstr ""

msgid ""
"Sets the ``Expires`` header to the current date/time plus the defined :"
"setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""
"Setel kepala ``Expires`` ke tanggal/waktu saat ini ditambah menentukan :"
"setting:`CACHE_MIDDLEWARE_SECONDS`."

msgid ""
"Sets the ``Cache-Control`` header to give a max age for the page -- again, "
"from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""
"Setel kepala ``Cache-Control`` untuk memberikan umur maksimal untuk halaman "
"-- kembali, dari pengaturan :setting:`CACHE_MIDDLEWARE_SECONDS`."

msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr "Lihat :doc:`/topics/http/middleware` untuk lebih pada middleware"

msgid ""
"If a view sets its own cache expiry time (i.e. it has a ``max-age`` section "
"in its ``Cache-Control`` header) then the page will be cached until the "
"expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the "
"decorators in ``django.views.decorators.cache`` you can easily set a view's "
"expiry time (using the :func:`~django.views.decorators.cache.cache_control` "
"decorator) or disable caching for a view (using the :func:`~django.views."
"decorators.cache.never_cache` decorator). See the `using other headers`__ "
"section for more on these decorators."
msgstr ""
"Jika sebuah tampilan menyetel waktu kadaluarsa cache nya sendiri (yaitu itu "
"mempunyai bagian ``max-age`` di kepala ``Cache-Control`` nya) kemudian "
"halaman akan di cache sampai waktu kadaluarsa, daripada :setting:"
"`CACHE_MIDDLEWARE_SECONDS`. menggunakan penghias di ``django.views."
"decorators.cache`` anda dapat dengan mudah mensetel sebuah waktu kadaluarsa "
"tampilan (menggunakan penghias :func:`~django.views.decorators.cache."
"cache_control`) atau meniadakan cache untuk sebuah tampilan (menggunakan "
"penghias :func:`~django.views.decorators.cache.never_cache` decorator). "
"Lihat bagian `using other headers`__ pada penghias ini."

msgid ""
"If :setting:`USE_I18N` is set to ``True`` then the generated cache key will "
"include the name of the active :term:`language<language code>` -- see also :"
"ref:`how-django-discovers-language-preference`). This allows you to easily "
"cache multilingual sites without having to create the cache key yourself."
msgstr ""
"Jika :setting:`USE_I18N`disetel menjadi ``True`` kemudian membangkitkan "
"kunci cache akan menyertakan nama dari :term:`language<language code>` aktif "
"-- lihat juga  :ref:`how-django-discovers-language-preference`). Ini "
"mengizinkan anda dengan mudah cache situs banyak bahasa tanpa harus membuat "
"kunci cache anda sendiri."

msgid ""
"Cache keys also include the :ref:`current time zone <default-current-time-"
"zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""

msgid "The per-view cache"
msgstr "Cache per-tampilan"

msgid ""
"A more granular way to use the caching framework is by caching the output of "
"individual views. ``django.views.decorators.cache`` defines a ``cache_page`` "
"decorator that will automatically cache the view's response for you::"
msgstr ""

msgid ""
"``cache_page`` takes a single argument: the cache timeout, in seconds. In "
"the above example, the result of the ``my_view()`` view will be cached for "
"15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of "
"readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes "
"multiplied by 60 seconds per minute.)"
msgstr ""
"``cache_page`` mengambil argumen tunggal: waktu habis cacge, dalam detik. Di "
"contoh diatas, hasil dari tampilan ``my_view()`` akan di cache untuk 15 "
"menit. (catah bahwa kami telah menulis itu sebagai ``60 * 15`` untuk tujuan "
"dapat dibaca. ``60 * 15`` akan di nilai menjadi ``900`` -- yaitu, 15 menit "
"dikalikan oleh 60 detik per menit.)"

msgid ""
"The cache timeout set by ``cache_page`` takes precedence over the ``max-"
"age`` directive from the ``Cache-Control`` header."
msgstr ""

msgid ""
"The per-view cache, like the per-site cache, is keyed off of the URL. If "
"multiple URLs point at the same view, each URL will be cached separately. "
"Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""
"Cache per-tampilan, seperti cache per-site, adalah diambil sebagai datum "
"masukan kendali dari URL. Jika banyak titik URL pada tampilan sama, setiap "
"URL akan di cache terpisah. Melanjutkan contoh ``my_view``, jika URLconf "
"anda terlihat seperti ini::"

msgid ""
"then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as "
"you may expect. But once a particular URL (e.g., ``/foo/23/``) has been "
"requested, subsequent requests to that URL will use the cache."
msgstr ""
"kemudian permintaan pada ``/foo/1/`` dan ``/foo/23/`` akan di cache "
"terpisah, seprti anda mungkin harapkan. Tetapi sekali URL tertentu (sebagai "
"contoh, ``/foo/23/``) telah diminta, permintaan berikut ke URL itu akan "
"menggunakan cache."

msgid ""
"``cache_page`` can also take an optional keyword argument, ``cache``, which "
"directs the decorator to use a specific cache (from your :setting:`CACHES` "
"setting) when caching view results. By default, the ``default`` cache will "
"be used, but you can specify any cache you want::"
msgstr ""
"``cache_page`` dapat juga mengambil sebuah argumen kata kunci pilihan, "
"``cache``, yang akan mengalihkan penghias menggunakan cache khusus (dari "
"pengaturan :setting:`CACHES` anda) ketika cache menampilkan hasil. Secara "
"awalan, cache ``default`` akan digunakan, tetapi anda dapat menentukan cache "
"apapun anda inginkan::"

msgid ""
"You can also override the cache prefix on a per-view basis. ``cache_page`` "
"takes an optional keyword argument, ``key_prefix``, which works in the same "
"way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the "
"middleware.  It can be used like this::"
msgstr ""
"Anda dapat juga menimpa awalan tembolok pada berdasarkan per-tampilan. "
"``cache_page`` mengambil sebuah pilihan argumen kata kunci, ``key_prefix``, "
"yang bekerja di cara yang sama seperti pengaturan :setting:"
"`CACHE_MIDDLEWARE_KEY_PREFIX` untuk middleware. Itu dapat digunakan seperti "
"ini::"

msgid ""
"The ``key_prefix`` and ``cache`` arguments may be specified together. The "
"``key_prefix`` argument and the :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` "
"specified under :setting:`CACHES` will be concatenated."
msgstr ""
"Argumen ``key_prefix`` dan ``cache`` mungkin ditentukan bersama-sama. "
"Argumen ``key_prefix`` dan :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` "
"ditentukan dibawah :setting:`CACHES` akan digabungkan."

msgid ""
"Additionally, ``cache_page`` automatically sets ``Cache-Control`` and "
"``Expires`` headers in the response which affect :ref:`downstream caches "
"<downstream-caches>`."
msgstr ""

msgid "Specifying per-view cache in the URLconf"
msgstr "Menentukan cache per-tampilan di URLconf"

msgid ""
"The examples in the previous section have hard-coded the fact that the view "
"is cached, because ``cache_page`` alters the ``my_view`` function in place. "
"This approach couples your view to the cache system, which is not ideal for "
"several reasons. For instance, you might want to reuse the view functions on "
"another, cache-less site, or you might want to distribute the views to "
"people who might want to use them without being cached. The solution to "
"these problems is to specify the per-view cache in the URLconf rather than "
"next to the view functions themselves."
msgstr ""
"Contoh-contoh di bagian sebelumnya telah di kode-keraskan fakta yang "
"tampilan di cache, karena ``cache_page`` merubah fungsi ``my_view`` di "
"tempat. Pendakan ini memasangkan tampilan anda ke sistem cache, yang tidak "
"sesuai untuk beberapa alasan. Sebagai contoh, anda mungkin ingin menggunakan "
"kembali fungsi tampilan pada lainnya, situs tidak-cache, atau anda mungkin "
"ingin menyebarkan tampilan pada orang yang mungkin ingin menggunakan mereka "
"tanpa sedang di cache. Pemecahan pada masalah ini adalah menentukan cache "
"per-tampilan di URLconf daripada dekat ke fungsi tampilan mereka sendiri."

msgid ""
"You can do so by wrapping the view function with ``cache_page`` when you "
"refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""

msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""
"Ini adalah hal yang sama, dengan ``my_view`` dibungkus di ``cache_page``::"

msgid "Template fragment caching"
msgstr "Cache bgian cetakan"

msgid ""
"If you're after even more control, you can also cache template fragments "
"using the ``cache`` template tag. To give your template access to this tag, "
"put ``{% load cache %}`` near the top of your template."
msgstr ""
"Jika anda sedang mengejar lebih kendali, anda dapat juga cache fragmen "
"cetakan menggunakan etiket cetakan ``cache``. Untuk memberikan akses cetakan "
"anda ke etiket ini, taruh ``{% load cache %}`` dekat atas dari cetakan anda."

msgid ""
"The ``{% cache %}`` template tag caches the contents of the block for a "
"given amount of time. It takes at least two arguments: the cache timeout, in "
"seconds, and the name to give the cache fragment. The fragment is cached "
"forever if timeout is ``None``. The name will be taken as is, do not use a "
"variable. For example:"
msgstr ""
"Etiket cetakan ``{% cache %}`` menyimpan isi dari blok untuk sejumlah waktu "
"yang diberikan. Itu mengambil setidaknya dua argumen: waktu habis cache, "
"dalam detik, dan nama untuk memberikan bagian cache. Bagian di simpan "
"selamanya jika waktu habis adalah ``None``. Nama akan diambil dengan adanya, "
"jangan menggunakan sebuah variabel. Sebagai contoh:"

msgid ""
"Sometimes you might want to cache multiple copies of a fragment depending on "
"some dynamic data that appears inside the fragment. For example, you might "
"want a separate cached copy of the sidebar used in the previous example for "
"every user of your site. Do this by passing one or more additional "
"arguments, which may be variables with or without filters, to the ``{% cache "
"%}`` template tag to uniquely identify the cache fragment:"
msgstr ""
"Terkadang anda mungkin ingin menyimpan banyak salinan dari bagian tergantung "
"pada beberapa dinamis data yang muncul didalam bagian. Sebagai contoh, anda "
"mungkin ingin memisahkan salinan tersimpan dari batang sisi digunakan dalam "
"contoh sebelumnya untuks etiap pengguna dari situs anda. Lakukan ini dengan "
"melewatkan satu atau lebih argumen tambahan, yang mungkin berupa variabel "
"dengan atau tanpa penyaring, pada etiket cetakan ``{% cache %}`` pada "
"mencirikan secara unik bagian cache:"

msgid ""
"If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache "
"will :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` "
"template tag you could use one of the :ref:`translation-specific "
"variables<template-translation-vars>` available in templates to achieve the "
"same result:"
msgstr ""
"Jika :setting:`USE_I18N` disetel menjadi ``True`` cache middleware per-situs "
"akan :ref:`respect the active language<i18n-cache-key>`. Untuk etiket "
"cetakan ``cache`` anda dapat menggunakan satu dari :ref:`translation-"
"specific variables<template-translation-vars>` tersedia di cetakan untuk "
"mencapai hasil sama:"

msgid ""
"The cache timeout can be a template variable, as long as the template "
"variable resolves to an integer value. For example, if the template variable "
"``my_timeout`` is set to the value ``600``, then the following two examples "
"are equivalent:"
msgstr ""
"Cache waktu habis dapat berupa sebuah variabel cetakan, selama variabel "
"cetakan mengatasi nilai integer. Sebagai contoh, jika variabel cetakan "
"``my_timeout`` disetel menjadi nilai ``600``, kemudian dua contoh berikut "
"adalah setara:"

msgid ""
"This feature is useful in avoiding repetition in templates. You can set the "
"timeout in a variable, in one place, and reuse that value."
msgstr ""

msgid ""
"By default, the cache tag will try to use the cache called "
"\"template_fragments\". If no such cache exists, it will fall back to using "
"the default cache. You may select an alternate cache backend to use with the "
"``using`` keyword argument, which must be the last argument to the tag."
msgstr ""
"Secara awalan, etiket cache akan mencoba menggunakan cache dipanggil "
"\"template_fragments\". Jika tidak ada cache seperti itu ada, itu akan "
"kembali menggunakan cache awalan. Anda mungkin memilih sebuah backend cache "
"bergantian untuk digunakan dengan argumen kata kunci ``using``, yang harus "
"berupa argumen terakhir ke etiket."

msgid ""
"It is considered an error to specify a cache name that is not configured."
msgstr ""
"Itu adalah dianggap sebuah kesalahan untuk menentukan sebuah nama cache yang "
"tidak dikonfigurasi."

msgid ""
"If you want to obtain the cache key used for a cached fragment, you can use "
"``make_template_fragment_key``. ``fragment_name`` is the same as second "
"argument to the ``cache`` template tag; ``vary_on`` is a list of all "
"additional arguments passed to the tag. This function can be useful for "
"invalidating or overwriting a cached item, for example:"
msgstr ""
"Jika anda ingin mengambil kunci cache digunakan untuk cache bagian, anda "
"dapat menggunakan ``make_template_fragment_key``. ``fragment_name`` adalah "
"sama sebagai argumen kedua pada etiket cetakan ``cache``; ``vary_on`` adalah "
"sebuah daftar dari semua argumen tambahan dilewatkan etiket. Fungsi ini "
"dapat berguna untuk membatalkan atau menimpa cache barang, sebagai contoh:"

msgid "The low-level cache API"
msgstr "API cache tingkat-bawah"

msgid ""
"Sometimes, caching an entire rendered page doesn't gain you very much and "
"is, in fact, inconvenient overkill."
msgstr ""
"Terkadang, cache sebuah seluruhnya halaman dibangun tidak mendapatkan anda "
"sangat banyak, faktanya, nyaman berlebihan."

msgid ""
"Perhaps, for instance, your site includes a view whose results depend on "
"several expensive queries, the results of which change at different "
"intervals. In this case, it would not be ideal to use the full-page caching "
"that the per-site or per-view cache strategies offer, because you wouldn't "
"want to cache the entire result (since some of the data changes often), but "
"you'd still want to cache the results that rarely change."
msgstr ""
"Mungkin, sebagai contoh, situs anda menyertakan sebuah tampilan yang "
"hasilnya bergantung pada beberpa permintaan mahal, hasil dari yang berubah "
"pada rentang berbeda. Dalam kasus ini, itu akan tidak sesuai menggunakan "
"cache halaman-penuh yang strategi cache per-situs atau per-tampilan "
"tawarkan, karena anda tidak ingin cache keseluruhan hasil (sejak beberapa "
"data sering berubah), tetapi anda akan masih ingin cache hasil yang jarang "
"berubah."

msgid ""
"For cases like this, Django exposes a low-level cache API. You can use this "
"API to store objects in the cache with any level of granularity you like.  "
"You can cache any Python object that can be pickled safely: strings, "
"dictionaries, lists of model objects, and so forth. (Most common Python "
"objects can be pickled; refer to the Python documentation for more "
"information about pickling.)"
msgstr ""

msgid "Accessing the cache"
msgstr "Mengakses cache"

msgid ""
"You can access the caches configured in the :setting:`CACHES` setting "
"through a dict-like object: ``django.core.cache.caches``. Repeated requests "
"for the same alias in the same thread will return the same object."
msgstr ""
"Anda dapat mengakses cache dikonfigurasikan di pengaturan :setting:`CACHES` "
"melalui obyek seperti-kamus: ``django.core.cache.caches``. Permintaan "
"berulang untuk nama lain sama di thread sama akan mengembalikab obyek sama."

msgid ""
"If the named key does not exist, ``InvalidCacheBackendError`` will be raised."
msgstr ""
"Jika kunci yang dinamai tidak ada, ``InvalidCacheBackendError``  akan muncul."

msgid ""
"To provide thread-safety, a different instance of the cache backend will be "
"returned for each thread."
msgstr ""
"Untuk menyediakan thread-safety, sebuah instance berbeda dari backend cache "
"akan dikembalikan untuk setiap thread."

msgid ""
"As a shortcut, the default cache is available as ``django.core.cache."
"cache``::"
msgstr ""
"Sebagai sebuah jalan pintas, cache awalan tersedia sebagai ``django.core."
"cache.cache``::"

msgid "This object is equivalent to ``caches['default']``."
msgstr "Obyek ini setara terhadap ``caches['default']``."

msgid "Basic usage"
msgstr "Penggunaan dasar"

msgid "The basic interface is:"
msgstr "Antarmuka dasar adalah:"

msgid ""
"``key`` should be a ``str``, and ``value`` can be any picklable Python "
"object."
msgstr ""
"``key`` harus berupa sebuah ``str``, dan ``value`` dapat berupa obyek Python "
"picklable."

msgid ""
"The ``timeout`` argument is optional and defaults to the ``timeout`` "
"argument of the appropriate backend in the :setting:`CACHES` setting "
"(explained above). It's the number of seconds the value should be stored in "
"the cache. Passing in ``None`` for ``timeout`` will cache the value forever. "
"A ``timeout`` of ``0`` won't cache the value."
msgstr ""
"Argumen ``timeout`` adalah pilihan dan awalan pada argumen ``timeout`` dari "
"backend sesuai di pengaturan :setting:`CACHES` (dijelaskan diatas). Itu "
"adalah jumlah nilai kedua harus disimpan di cache. Melewatkan di ``None`` "
"untuk ``timeout`` akan cache nilai selamanya. Sebuah ``timeout`` dari ``0`` "
"tidak akan cache nilai."

msgid ""
"If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""
"Jika obyek tidak ada di cache, ``cache.get()`` mengembalikan ``None``::"

msgid ""
"If you need to determine whether the object exists in the cache and you have "
"stored a literal value ``None``, use a sentinel object as the default::"
msgstr ""

msgid "``MemcachedCache``"
msgstr ""

msgid ""
"Due to a ``python-memcached`` limitation, it's not possible to distinguish "
"between stored ``None`` value and a cache miss signified by a return value "
"of ``None`` on the deprecated ``MemcachedCache`` backend."
msgstr ""

msgid ""
"``cache.get()`` can take a ``default`` argument. This specifies which value "
"to return if the object doesn't exist in the cache::"
msgstr ""
"``cache.get()`` dapat mengambil sebuah argumen ``default``. Ini menentukan "
"nilai mana untuk dikembalikan jika obyek tidak ada di cache::"

msgid ""
"To add a key only if it doesn't already exist, use the ``add()`` method. It "
"takes the same parameters as ``set()``, but it will not attempt to update "
"the cache if the key specified is already present::"
msgstr ""
"Untuk menambahkan sebuah kunci hanya jika itu tidak ada, gunakan metode "
"``add()``. Itu mengambil parameter sama seperti ``set()``, tetapi itu tidak "
"akan mencoba memperbaharui cache jika kunci ditentukan sudah ada::"

msgid ""
"If you need to know whether ``add()`` stored a value in the cache, you can "
"check the return value. It will return ``True`` if the value was stored, "
"``False`` otherwise."
msgstr ""
"Jika anda butuh mengetahui apakah ``add()`` menyimpan sebuah nilai di cache, "
"anda dapat memeriksa nilai kembalian. Itu akan mengembalikan ``True`` jika "
"nilai telah disimpan, ``False`` sebaliknya."

msgid ""
"If you want to get a key's value or set a value if the key isn't in the "
"cache, there is the ``get_or_set()`` method. It takes the same parameters as "
"``get()`` but the default is set as the new cache value for that key, rather "
"than returned::"
msgstr ""

msgid "You can also pass any callable as a *default* value::"
msgstr "Anda dapat juga melewatkan callable apapun sebagai nilai *awalan*::"

msgid ""
"There's also a ``get_many()`` interface that only hits the cache once. "
"``get_many()`` returns a dictionary with all the keys you asked for that "
"actually exist in the cache (and haven't expired)::"
msgstr ""
"Ada juga sebuah antarmuka ``get_many()`` yang hanya mengenai cache sekali. "
"``get_many()`` megnembalikan sebuah kamus dengan semua kunc-i-kunci anda "
"minta untuk yang sebenarnya ada di cache (dan belum kadaluarsa)::"

msgid ""
"To set multiple values more efficiently, use ``set_many()`` to pass a "
"dictionary of key-value pairs::"
msgstr ""
"Untuk menyetel banyak nilai lebih efesien, gunakan ``set_many()`` untuk "
"melewatkan sebuah kamus dari pasangan kunci-nilai:: "

msgid ""
"Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` parameter."
msgstr ""
"Seperti ``cache.set()``, ``set_many()`` mengambil sebuah pilihan parameter "
"``timeout``."

msgid ""
"On supported backends (memcached), ``set_many()`` returns a list of keys "
"that failed to be inserted."
msgstr ""
"Pada backend didukung (memcached), ``set_many()`` megnembalikan sebuah "
"daftar dari kunci-kunci yang gagal dimasukkan."

msgid ""
"You can delete keys explicitly with ``delete()`` to clear the cache for a "
"particular object::"
msgstr ""

msgid ""
"``delete()`` returns ``True`` if the key was successfully deleted, ``False`` "
"otherwise."
msgstr ""

msgid ""
"If you want to clear a bunch of keys at once, ``delete_many()`` can take a "
"list of keys to be cleared::"
msgstr ""
"Jika anda ingin membersihkan seikat kunci sekaligus, ``delete_many()`` dapat "
"mengambil sebuah daftar dari kunci untuk dibersihkan::"

msgid ""
"Finally, if you want to delete all the keys in the cache, use ``cache."
"clear()``.  Be careful with this; ``clear()`` will remove *everything* from "
"the cache, not just the keys set by your application. ::"
msgstr ""
"Akhirnya, jika anda ingin menghapus semua kunci di cache, gunakan ``cache."
"clear()``. Hati-hatilah dengan ini; ``clear()`` akan memindahkan *semua* "
"dari cache, bukan hanya kunci disetel oleh aplikasi anda. ::"

msgid ""
"``cache.touch()`` sets a new expiration for a key. For example, to update a "
"key to expire 10 seconds from now::"
msgstr ""
"``cache.touch()`` mensetel kadaluarsa baru untuk sebuah kunci. Sebagai "
"contoh, untuk memperbaharui sebuah kunci untuk kadaluarsa 10 detik dari "
"sekarang::"

msgid ""
"Like other methods, the ``timeout`` argument is optional and defaults to the "
"``TIMEOUT`` option of the appropriate backend in the :setting:`CACHES` "
"setting."
msgstr ""

msgid ""
"``touch()`` returns ``True`` if the key was successfully touched, ``False`` "
"otherwise."
msgstr ""
"``touch()`` mengembalikan ``True`` jika kunci berhasil disentuh, ``False`` "
"sebaliknya."

msgid ""
"You can also increment or decrement a key that already exists using the "
"``incr()`` or ``decr()`` methods, respectively. By default, the existing "
"cache value will be incremented or decremented by 1. Other increment/"
"decrement values can be specified by providing an argument to the increment/"
"decrement call. A ValueError will be raised if you attempt to increment or "
"decrement a nonexistent cache key.::"
msgstr ""
"Anda juga dapat menaikkan atau menurunkan kunci yang sudah ada menggunakan "
"metode ``incr()`` atau ``decr()``, masing-masing. Secara awalan, nilai cache "
"yang ada akan dinaikkan atau diturunkan oleh 1. Nilai-nilai menaikkan/"
"menurunkan lain dapat ditentukan dengan menyediakan sebuah argumen pada "
"panggilan menaik/menurun. Sebuah ValueError akan dimuncukan untuk menaik "
"atau menurun kunci cache tidak ada.::"

msgid ""
"``incr()``/``decr()`` methods are not guaranteed to be atomic. On those "
"backends that support atomic increment/decrement (most notably, the "
"memcached backend), increment and decrement operations will be atomic. "
"However, if the backend doesn't natively provide an increment/decrement "
"operation, it will be implemented using a two-step retrieve/update."
msgstr ""
"Metide ``incr()``/``decr()`` tidak menjamin menjadi atom, Pada backend itu "
"yang mendukung penaikan/penurunan atom (kebanyakan terutama backend "
"memcache), penaikan dan penurunan akan menjadi atom. Bagaimanapun, jika "
"backend tidak asli menyediakan sebuah tindakan penaikan/penurunan, itu akan "
"diterapkan menggunakan dua-langkah mengambil/memperbaharui."

msgid ""
"You can close the connection to your cache with ``close()`` if implemented "
"by the cache backend."
msgstr ""
"Anda dapat menutup hubungan ke cache anda dengan ``close()`` jika diterapkan "
"oleh backend cache."

msgid "For caches that don't implement ``close`` methods it is a no-op."
msgstr "Untuk cache yang tidak menerapkan metode ``close`` itu adalah no-op."

msgid ""
"The async variants of base methods are prefixed with ``a``, e.g. ``cache."
"aadd()`` or ``cache.adelete_many()``. See `Asynchronous support`_ for more "
"details."
msgstr ""

msgid "The async variants of methods were added to the ``BaseCache``."
msgstr ""

msgid "Cache key prefixing"
msgstr "Awalan kunci cache"

msgid ""
"If you are sharing a cache instance between servers, or between your "
"production and development environments, it's possible for data cached by "
"one server to be used by another server. If the format of cached data is "
"different between servers, this can lead to some very hard to diagnose "
"problems."
msgstr ""
"Jika anda sedang berbagi sebuah instance cache diantara peladen, atau "
"diantara lingkungan produksi dan pengembangan anda, itu memungkinkan untuk "
"data cache oleh satu peladen untuk digunakan oleh peladen lain. Jika bentuk "
"dari data cache berbeda diantara peladen, ini dapat membawa ke sangat keras "
"dari mengenal masalah-masalah."

msgid ""
"To prevent this, Django provides the ability to prefix all cache keys used "
"by a server. When a particular cache key is saved or retrieved, Django will "
"automatically prefix the cache key with the value of the :setting:"
"`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""
"Untuk mencegah ini, Django menyediakan kemampuan untuk mengawali semua kunci "
"cache digunakan oleh peladen. Ketika kunci cacge tertentu disimpan atau "
"diambil, Django akan secara otomatis mengawali kunci cache dengan nilai dari "
"pengaturan cache :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`."

msgid ""
"By ensuring each Django instance has a different :setting:`KEY_PREFIX "
"<CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in "
"cache values."
msgstr ""
"Dengan memastikan setiap instance Django mempunyai :setting:`KEY_PREFIX "
"<CACHES-KEY_PREFIX>` berbeda, anda dapat memastikan bahwa akan tidak ada "
"tubrukan di nilai-nilai cache."

msgid "Cache versioning"
msgstr "Memversikan cache"

msgid ""
"When you change running code that uses cached values, you may need to purge "
"any existing cached values. The easiest way to do this is to flush the "
"entire cache, but this can lead to the loss of cache values that are still "
"valid and useful."
msgstr ""
"Ketika anda merubah menjalankan kode yang menggunakan nilai cache, anda "
"mungkin butuh membersihkan nilai-nilai cache yang ada. Cara termudah "
"melakukan ini adalah membilas keseluruhan cache, tetapi ini dapat membawa ke "
"kehilangan nilai cache yang masih sah dan berguna."

msgid ""
"Django provides a better way to target individual cache values. Django's "
"cache framework has a system-wide version identifier, specified using the :"
"setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting "
"is automatically combined with the cache prefix and the user-provided cache "
"key to obtain the final cache key."
msgstr ""
"Django menyediakan cara terbaik pada nilai-nilai cache masing-masing "
"sasaran. Kerangka kerja cache Django mempunyai penciri versi lebar-sistem, "
"ditentukan menggunakan pengaturan cache :setting:`VERSION <CACHES-VERSION>`. "
"Nilai dari pengaturan ini secara otomatis dipadukan dengan awalan cache dan "
"kunci cache disediakan-pengguna untuk mendapatkan kunci cache akhir."

msgid ""
"By default, any key request will automatically include the site default "
"cache key version. However, the primitive cache functions all include a "
"``version`` argument, so you can specify a particular cache key version to "
"set or get. For example::"
msgstr ""
"Secara awalan, apapun permintaan kunci akan secara otomaris menyertakan "
"versi kunci cache awalan situs. Bagaimanapun, fungsi cache primitif semua "
"menyertakan sebuah argumen ``version``, jadi anda dapt menentukan versi "
"kunci cache tertentu untuk disetel atau didapatkan. Sebagai contoh::"

msgid ""
"The version of a specific key can be incremented and decremented using the "
"``incr_version()`` and ``decr_version()`` methods. This enables specific "
"keys to be bumped to a new version, leaving other keys unaffected. "
"Continuing our previous example::"
msgstr ""
"Versi dari kunci tertentu ini dapat dinaikkan dan diturunkan menggunakan "
"metode ``incr_version()`` dan ``decr_version()`` Ini mengadakan kunci-kunci "
"tertentu untuk bertemu ke versi baru, meminggalkan kunci-kunci lain tidak "
"terpengaruh. Melanjutkan contoh sebelumnya kami::"

msgid "Cache key transformation"
msgstr "Perubahan kunci cache"

msgid ""
"As described in the previous two sections, the cache key provided by a user "
"is not used verbatim -- it is combined with the cache prefix and key version "
"to provide a final cache key. By default, the three parts are joined using "
"colons to produce a final string::"
msgstr ""
"Seperti digambarkan di dua bagian sebelumnya, kunci cache disediakan oleh "
"seorang pengguna tidak digunakan secara harfiah -- itu dipadukan dengan "
"awalan cache dan versi kunci untuk menyediakan kunci cache akhir. Secara "
"awalan, tiga bagian digabungkan menggunakan titik dua untuk menghasilkan "
"string akhir::"

msgid ""
"If you want to combine the parts in different ways, or apply other "
"processing to the final key (e.g., taking a hash digest of the key parts), "
"you can provide a custom key function."
msgstr ""
"Jika anda ingin memadukan bagian-bagian di cara berbeda, atau memberlakukan "
"pengolahan lain menjadi kunci akhir (sebagai contoh, mengambil campuran inti "
"dari bagian-bagian kunci), anda daat menyediakan sebuah fungsi kunci "
"penyesuaian."

msgid ""
"The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a "
"dotted-path to a function matching the prototype of ``make_key()`` above. If "
"provided, this custom key function will be used instead of the default key "
"combining function."
msgstr ""
"Pengaturan cache :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` menentukan "
"jalur-bertitik pada sebuah fungsi mencocokan purwa-rupa dari ``make_key()`` "
"diatas. Jika disediakan, fungsi kunci penyesuaian ini akan digunakan sebagai "
"gantia dari kunci awalan memadukan fungsi."

msgid "Cache key warnings"
msgstr "Peringatan kunci cache"

msgid ""
"Memcached, the most commonly-used production cache backend, does not allow "
"cache keys longer than 250 characters or containing whitespace or control "
"characters, and using such keys will cause an exception. To encourage cache-"
"portable code and minimize unpleasant surprises, the other built-in cache "
"backends issue a warning (``django.core.cache.backends.base."
"CacheKeyWarning``) if a key is used that would cause an error on memcached."
msgstr ""
"Memcache, backend cache paling digunakan-umum produksi, tidak mengizinkan "
"kunci cache lebih panjang dari 250 karakter atau mengandung ruang kosong "
"atau kendali karakter, dan menggunakan kunci seperti itu akan menyebabkan "
"sebuah pengecualian. Untuk mendorong kode ringan-cache menerbitkan sebuah "
"peringatan (``django.core.cache.backends.base.CacheKeyWarning``) jika sebuah "
"kecil yang dapat menyebabkan sebuah kesalahan pada memcache."

msgid ""
"If you are using a production backend that can accept a wider range of keys "
"(a custom backend, or one of the non-memcached built-in backends), and want "
"to use this wider range without warnings, you can silence "
"``CacheKeyWarning`` with this code in the ``management`` module of one of "
"your :setting:`INSTALLED_APPS`::"
msgstr ""
"Jika anda sedang menggunakan backend produksi yang dapat menerima jangkauan "
"lebih luas dari kunci (backend penyesuaian, atau satu dari bukan-memcache "
"backend siap-pakai), dan ingin menggunakan jangkauan luas ini tanpa "
"peringatan, anda dapat mendiamkan ``CacheKeyWarning`` dengan kode ini di "
"modul ``management`` dari satu dari :setting:`INSTALLED_APPS` anda::"

msgid ""
"If you want to instead provide custom key validation logic for one of the "
"built-in backends, you can subclass it, override just the ``validate_key`` "
"method, and follow the instructions for `using a custom cache backend`_. For "
"instance, to do this for the ``locmem`` backend, put this code in a module::"
msgstr ""
"Jika anda ingin daripada menyediakan penyesuaian logika pengecekan kunci "
"untuk satu dari backend pasang-tetap, anda dapat mensubkelaskannya, timpa "
"hanya metode ``validate_key``, dan ikuti petunjuk untuk `using a custom "
"cache backend`_. Sebagai contoh, untuk melakukan ini untuk backend "
"``locmem``, taruh kode ini di modul::"

msgid ""
"...and use the dotted Python path to this class in the :setting:`BACKEND "
"<CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""
"...dan menggunakan jalur Python bertitik pada kelas ini di bagain :setting:"
"`BACKEND <CACHES-BACKEND>` dari pengaturan :setting:`CACHES`."

msgid ""
"Django has developing support for asynchronous cache backends, but does not "
"yet support asynchronous caching. It will be coming in a future release."
msgstr ""

msgid ""
"``django.core.cache.backends.base.BaseCache`` has async variants of :ref:"
"`all base methods <cache-basic-interface>`. By convention, the asynchronous "
"versions of all methods are prefixed with ``a``. By default, the arguments "
"for both variants are the same::"
msgstr ""

msgid "Downstream caches"
msgstr "Cache hilir"

msgid ""
"So far, this document has focused on caching your *own* data. But another "
"type of caching is relevant to web development, too: caching performed by "
"\"downstream\" caches. These are systems that cache pages for users even "
"before the request reaches your website."
msgstr ""

msgid "Here are a few examples of downstream caches:"
msgstr "Ini adalah sedikit contoh dari cache hilir:"

msgid ""
"When using HTTP, your :abbr:`ISP (Internet Service Provider)` may cache "
"certain pages, so if you requested a page from ``http://example.com/``, your "
"ISP would send you the page without having to access example.com directly. "
"The maintainers of example.com have no knowledge of this caching; the ISP "
"sits between example.com and your web browser, handling all of the caching "
"transparently. Such caching is not possible under HTTPS as it would "
"constitute a man-in-the-middle attack."
msgstr ""

msgid ""
"Your Django website may sit behind a *proxy cache*, such as Squid Web Proxy "
"Cache (http://www.squid-cache.org/), that caches pages for performance. In "
"this case, each request first would be handled by the proxy, and it would be "
"passed to your application only if needed."
msgstr ""
"Situs jaringan Django anda mungkin duduk dibelakang *cache proxy*, seperti "
"Squid Web Proxy Cache (http://www.squid-cache.org/), yang cache halaman "
"untuk penampilan. Dalam kasus ini, setiap permintaan pertama akan ditangani "
"oleh proxy, dan itu akan dilewatkan ke aplikasi anda jika dibutuhkan."

msgid ""
"Your web browser caches pages, too. If a web page sends out the appropriate "
"headers, your browser will use the local cached copy for subsequent requests "
"to that page, without even contacting the web page again to see whether it "
"has changed."
msgstr ""

msgid ""
"Downstream caching is a nice efficiency boost, but there's a danger to it: "
"Many web pages' contents differ based on authentication and a host of other "
"variables, and cache systems that blindly save pages based purely on URLs "
"could expose incorrect or sensitive data to subsequent visitors to those "
"pages."
msgstr ""

msgid ""
"For example, if you operate a web email system, then the contents of the "
"\"inbox\" page depend on which user is logged in. If an ISP blindly cached "
"your site, then the first user who logged in through that ISP would have "
"their user-specific inbox page cached for subsequent visitors to the site.  "
"That's not cool."
msgstr ""

msgid ""
"Fortunately, HTTP provides a solution to this problem. A number of HTTP "
"headers exist to instruct downstream caches to differ their cache contents "
"depending on designated variables, and to tell caching mechanisms not to "
"cache particular pages. We'll look at some of these headers in the sections "
"that follow."
msgstr ""
"Untungnya, HTTP menyediakan sebuah pemecahan pada masalah ini. Sejumlah "
"kepala HTTP ada untuk memberikan petunjuk cache hilir untuk membedakan isi "
"cache mereka bergantung pada variabel-variabel ditunjuk, dan memberitahu "
"mekanisme cache tidak meng cache halaman tertentu. Kami akan mencari "
"beberapa kepala ini di bagian-bagian yang mengikuti."

msgid "Using ``Vary`` headers"
msgstr "Menggunakan kepala ``Vary``"

msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key. For example, if the contents "
"of a web page depend on a user's language preference, the page is said to "
"\"vary on language.\""
msgstr ""

msgid ""
"By default, Django's cache system creates its cache keys using the requested "
"fully-qualified URL -- e.g., ``\"https://www.example.com/stories/2005/?"
"order_by=author\"``. This means every request to that URL will use the same "
"cached version, regardless of user-agent differences such as cookies or "
"language preferences. However, if this page produces different content based "
"on some difference in request headers -- such as a cookie, or a language, or "
"a user-agent -- you'll need to use the ``Vary`` header to tell caching "
"mechanisms that the page output depends on those things."
msgstr ""
"Secara awalan, sistem cache Django membuat kunci cache nya menggunakan URL "
"sepenuhnya-memenuhi syarat diminta -- sebagai contoh, ``\"https://www."
"example.com/stories/2005/?order_by=author\"``. Ini berarti setiap permintaan "
"ke URL itu akan menggunakan versi cache sama, tanpa memperhatikan dari "
"perbedaan agen-pengguna seperti kue atau pilihan bahasa. Bagaimanapun, jika "
"halaman ini menghasilkan isi berbeda berdasarkan pada beberapa perbedaan di "
"kepala permintaan -- seperti sebuah  kue, atau sebuah bahasa, atau agen-"
"pengguna -- anda akan butuh menggunakan kepala ``Vary`` untuk memberitahu "
"mekanisme cache yang keluaran halaman bergantung pada hal-hal tersebut."

msgid ""
"To do this in Django, use the convenient :func:`django.views.decorators.vary."
"vary_on_headers` view decorator, like so::"
msgstr ""
"Untuk melakukan ini di Django, gunakan penghias tampilan :func:`django.views."
"decorators.vary.vary_on_headers` nyaman, seperti begitu::"

msgid ""
"In this case, a caching mechanism (such as Django's own cache middleware) "
"will cache a separate version of the page for each unique user-agent."
msgstr ""
"Di kasus ini, mekanisme cache (seperti middleware cache sendiri Django) akan "
"cache sebuah versi terpisah dari halaman untuk setiap agen-pengguna unik."

msgid ""
"The advantage to using the ``vary_on_headers`` decorator rather than "
"manually setting the ``Vary`` header (using something like ``response."
"headers['Vary'] = 'user-agent'``) is that the decorator *adds* to the "
"``Vary`` header (which may already exist), rather than setting it from "
"scratch and potentially overriding anything that was already in there."
msgstr ""

msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr "Anda dapat melewatkan banyak kepala pada ``vary_on_headers()``::"

msgid ""
"This tells downstream caches to vary on *both*, which means each combination "
"of user-agent and cookie will get its own cache value. For example, a "
"request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` "
"will be considered different from a request with the user-agent ``Mozilla`` "
"and the cookie value ``foo=ham``."
msgstr ""
"Ini memberitahukan cache hilir untuk vary pada *kedua*, yang berarti setiap "
"perpaduan dari agen-pengguna dan kue akan mendapatkan nilai cache nya "
"sendiri. Sebagai contoh, sebuah permintaan dengan agen-pengguna ``Mozilla`` "
"dan nilai kue ``foo=bar`` akan dianggap berbeda dari permintaan dengan agen-"
"pengguna ``Mozilla`` dan nilai kue ``foo=ham``."

msgid ""
"Because varying on cookie is so common, there's a :func:`django.views."
"decorators.vary.vary_on_cookie` decorator. These two views are equivalent::"
msgstr ""
"Karena beragam pada kue adalah sangat umum, ada sebuah penghias :func:"
"`django.views.decorators.vary.vary_on_cookie`. Kedua tampilan ini adalah "
"setara::"

msgid ""
"The headers you pass to ``vary_on_headers`` are not case sensitive; ``\"User-"
"Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""
"Kepala anda lewatkan ke ``vary_on_headers`` tidak  hal-hal sensitif; ``"
"\"User-Agent\"`` adalah hal sama seperti ``\"user-agent\"``."

msgid ""
"You can also use a helper function, :func:`django.utils.cache."
"patch_vary_headers`, directly. This function sets, or adds to, the ``Vary "
"header``. For example::"
msgstr ""
"Anda dapat juga menggunakan fungsi pembantu, :func:`django.utils.cache."
"patch_vary_headers`, secara langsung. Fungsi ini menyetel, atau menambah ke, "
"``Vary header``. Sebagai contoh::"

msgid ""
"``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance "
"as its first argument and a list/tuple of case-insensitive header names as "
"its second argument."
msgstr ""
"``patch_vary_headers`` mengambil sebuah instance :class:`~django.http."
"HttpResponse` sebagai argumen pertamanya dan sebuah list/tuple dari nama-"
"nama kepala kasus-tidak-peka sebagai argumen keduanya."

msgid ""
"For more on Vary headers, see the :rfc:`official Vary spec "
"<7231#section-7.1.4>`."
msgstr ""
"Untuk lebih pada kepala Vary, lihat :rfc:`official Vary spec "
"<7231#section-7.1.4>`."

msgid "Controlling cache: Using other headers"
msgstr "Mengendalikan tembolok: Menggunakan kepala lainnya"

msgid ""
"Other problems with caching are the privacy of data and the question of "
"where data should be stored in a cascade of caches."
msgstr ""
"Masalah lain dengan cache adalah pribadi dari data dan pertanyaan dari "
"dimana data harus disimpan di cache urutan kebawah."

msgid ""
"A user usually faces two kinds of caches: their own browser cache (a private "
"cache) and their provider's cache (a public cache). A public cache is used "
"by multiple users and controlled by someone else. This poses problems with "
"sensitive data--you don't want, say, your bank account number stored in a "
"public cache. So web applications need a way to tell caches which data is "
"private and which is public."
msgstr ""

msgid ""
"The solution is to indicate a page's cache should be \"private.\" To do this "
"in Django, use the :func:`~django.views.decorators.cache.cache_control` view "
"decorator. Example::"
msgstr ""
"Pemecahannya adalah menunjukkan cache halaman harus berupa \"private\". "
"Untuk melakukan ini di Django, gunakan penghias tampilan :func:`~django."
"views.decorators.cache.cache_control`. Contoh::"

msgid ""
"This decorator takes care of sending out the appropriate HTTP header behind "
"the scenes."
msgstr ""
"Penghias ini merawat dari mengirim keluar kepala HTTP sesuai dibelakang "
"layar."

msgid ""
"Note that the cache control settings \"private\" and \"public\" are mutually "
"exclusive. The decorator ensures that the \"public\" directive is removed if "
"\"private\" should be set (and vice versa). An example use of the two "
"directives would be a blog site that offers both private and public entries. "
"Public entries may be cached on any shared cache. The following code uses :"
"func:`~django.utils.cache.patch_cache_control`, the manual way to modify the "
"cache control header (it is internally called by the :func:`~django.views."
"decorators.cache.cache_control` decorator)::"
msgstr ""
"Catat bahwa pengaturan kendali cache \"pribadi\" and \"umum\" adalah saling "
"eksklusif. Penghias memastikan bahwa petunjuk \"umum: dipindahkan jika "
"\"pribadi\" harus disetel (dan sebaliknya). Sebuah contoh penggunaan daro "
"dua petunjuk akan menjadi sebuah situs blog yang menawarkan kedua masukan "
"pribadi dan umum. Masukan umum mungkin di cache pada cache berbagi apapun. "
"Kode berikut menggunakan :func:`~django.utils.cache.patch_cache_control`, "
"cara manual untuk merubah kepala kendali cache (itu adalah secara internal "
"dipanggil oleh penghias :func:`~django.views.decorators.cache."
"cache_control`)::"

msgid ""
"You can control downstream caches in other ways as well (see :rfc:`7234` for "
"details on HTTP caching). For example, even if you don't use Django's server-"
"side cache framework, you can still tell clients to cache a view for a "
"certain amount of time with the :rfc:`max-age <7234#section-5.2.2.8>` "
"directive::"
msgstr ""
"Anda dapat mengendalikan cache hilir di cara lain demukian juga (lihat :rfc:"
"`7234` untuk rincian pada cache HTTP). Sebagai contoh, bahkan jika anda "
"tidak menggunakan kerangka kerja cache sisi-peladen, anda dapat masih "
"meberitahu klien untuk cache sebuah tampilan untuk sejumlah waktu tertentu "
"dengan petunjuk :rfc:`max-age <7234#section-5.2.2.8>`::"

msgid ""
"(If you *do* use the caching middleware, it already sets the ``max-age`` "
"with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. In that "
"case, the custom ``max_age`` from the :func:`~django.views.decorators.cache."
"cache_control` decorator will take precedence, and the header values will be "
"merged correctly.)"
msgstr ""
"(Jika anda *melakukan* menggunakan middleware cache, itu sudah disetel ``max-"
"age`` dengan nilai dari pengaturan :setting:`CACHE_MIDDLEWARE_SECONDS`. "
"Dalam kasus itu, penyesuaian ``max-age`` dari penghias :func:`~django.views."
"decorators.cache.cache_control` akan mengambil hak lebih tinggi, dan nilai-"
"nlai kepala akan digabung dengan benar.)"

msgid ""
"Any valid ``Cache-Control`` response directive is valid in "
"``cache_control()``. Here are some more examples:"
msgstr ""
"``Cache-Control`` sah apapun menangganpi petunjuk adalah sah di "
"``cache_control()``. Ini adalah beberapa contoh lebih:"

msgid "``no_transform=True``"
msgstr "``no_transform=True``"

msgid "``must_revalidate=True``"
msgstr "``must_revalidate=True``"

msgid "``stale_while_revalidate=num_seconds``"
msgstr "``stale_while_revalidate=num_seconds``"

msgid "``no_cache=True``"
msgstr "``no_cache=True``"

msgid ""
"The full list of known directives can be found in the `IANA registry`_ (note "
"that not all of them apply to responses)."
msgstr ""
"Daftar penuh dari arahan dikenal dapat ditemukan di `IANA registry`_ (catat "
"bahwa tidak semua dari mereka memberlakukan terhadap tanggapan)."

msgid ""
"If you want to use headers to disable caching altogether, :func:`~django."
"views.decorators.cache.never_cache` is a view decorator that adds headers to "
"ensure the response won't be cached by browsers or other caches. Example::"
msgstr ""
"Jika anda ingin menggunakan kepala untuk meniadakan cache sama sekali, :func:"
"`~django.views.decorators.cache.never_cache` adalah tampilan penghias yang "
"menambahkan kepala-kepala untuk memastikan tanggapan tidak akan di cache "
"oleh peramban atau cache lain. Contoh::"

msgid "Order of ``MIDDLEWARE``"
msgstr "urutan dari ``MIDDLEWARE``"

msgid ""
"If you use caching middleware, it's important to put each half in the right "
"place within the :setting:`MIDDLEWARE` setting. That's because the cache "
"middleware needs to know which headers by which to vary the cache storage. "
"Middleware always adds something to the ``Vary`` response header when it can."
msgstr ""
"Jika anda menggunakan middleware cache, itu adalah penting untuk menaruh "
"setiap setengah di tempat kanan dalam pengaturan :setting:`MIDDLEWARE`, Itu "
"karena middleware cache butuh mengetahui kepala-kepala mana yang digunakan "
"oleh cary pentimpan cache. Middleware selau menambahkan sesuatu ke kepala "
"tanggapan ``Vary`` ketika itu dapat."

msgid ""
"``UpdateCacheMiddleware`` runs during the response phase, where middleware "
"is run in reverse order, so an item at the top of the list runs *last* "
"during the response phase. Thus, you need to make sure that "
"``UpdateCacheMiddleware`` appears *before* any other middleware that might "
"add something to the ``Vary`` header. The following middleware modules do so:"
msgstr ""
"``UpdateCacheMiddleware`` berjalan selama fase tanggapan, dimana middleware "
"berjalan di membalikkan urutan, jadi sebuah barang pada teratas dari daftar "
"menjalankan *terakhir* selama fase tanggapan. Dengan demikian, anda butuh "
"memastikan bahwa ``UpdateCacheMiddleware`` muncul *sebelum* middleware lain "
"apapun yang mungkin menambahkan sesuatu ke kepala ``Vary``. Modul middleware "
"berikut melakukannya:"

msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr "``SessionMiddleware`` menambah ``Cookie``"

msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr "``GZipMiddleware`` menambah ``Accept-Encoding``"

msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr "``LocaleMiddleware`` menambah ``Accept-Language``"

msgid ""
"``FetchFromCacheMiddleware``, on the other hand, runs during the request "
"phase, where middleware is applied first-to-last, so an item at the top of "
"the list runs *first* during the request phase. The "
"``FetchFromCacheMiddleware`` also needs to run after other middleware "
"updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after* "
"any item that does so."
msgstr ""
"``FetchFromCacheMiddleware``, di sisi lain, berjalan selama fase permintaan, "
"dimana middleware diberlakukan pertama-ke-terakhir, jadi sebuah barang pada "
"teratas dari daftar berjalan *pertama* selama fase permintaan. "
"``FetchFromCacheMiddleware`` juga butuh menjalankan setelah middleware lain "
"memperbaharui kepala ``vary``, jadi ``FetchFromCacheMiddleware`` harus "
"berupa *setelah* barang apapun yang melakukannya."

msgid "System check framework"
msgstr "Kerangka sistem pemeriksaan"

msgid ""
"The system check framework is a set of static checks for validating Django "
"projects. It detects common problems and provides hints for how to fix them. "
"The framework is extensible so you can easily add your own checks."
msgstr ""
"Kerangka sistem pemeriksaan adalah kumpulan dari pemeriksaan tetap untuk "
"memeriksa kebenaran proyek Django. Dia menemukan masalah umum dan "
"menyediakan petunjuk untuk bagaimana memperbaiki mereka. Kerangka ini dapat "
"diperpanjang sehingga anda dapat dengan mudah menambahkan pemeriksaan anda "
"sendiri."

msgid ""
"Checks can be triggered explicitly via the :djadmin:`check` command. Checks "
"are triggered implicitly before most commands, including :djadmin:"
"`runserver` and :djadmin:`migrate`. For performance reasons, checks are not "
"run as part of the WSGI stack that is used in deployment. If you need to run "
"system checks on your deployment server, trigger them explicitly using :"
"djadmin:`check`."
msgstr ""
"Pemeriksaan dapat dibangkitkan jelas melalui perintah :djadmin:`check`. "
"Pemeriksaan dipicu tidak langsung sebelum kebanyakan perintah, termasuk :"
"djadmin:`runserver` dan :djadmin:`migrate`. Untuk alasan penampilan, "
"pemeriksaan tidak berjalan sebagai bagian dari tumpukan WSGI yang digunakan "
"dalam pengembangan. Jika anda butuh menjalankan pemeriksaan sistem pada "
"peladen pengembangan anda, picu mereka dengan jelas menggunakan :djadmin:"
"`check`."

msgid ""
"Serious errors will prevent Django commands (such as :djadmin:`runserver`) "
"from running at all. Minor problems are reported to the console. If you have "
"inspected the cause of a warning and are happy to ignore it, you can hide "
"specific warnings using the :setting:`SILENCED_SYSTEM_CHECKS` setting in "
"your project settings file."
msgstr ""
"Kesalahan-kesalahan serius akan mencegah perintah Django (seperti :djadmin:"
"`runserver`) dari menjalankan sama sekali. Masalah-masalah dilaporkan ke "
"konsol. Jika anda telah memeriksa penyebab dari peringatan dan senang "
"mengabaikan itu, anda dapat memyembunyikan peringatan khusus menggunakan "
"pengaturan :setting:`SILENCED_SYSTEM_CHECKS` di berkas pengaturan proyek "
"anda."

msgid ""
"A full list of all checks that can be raised by Django can be found in the :"
"doc:`System check reference </ref/checks>`."
msgstr ""
"Sebuah daftar penuh dari semua pemeriksaan yang dapat dimunculkan oleh "
"Django dapat ditemukan di :doc:`System check reference </ref/checks>`."

msgid "Writing your own checks"
msgstr "Menulis pemeriksaan anda sendiri"

msgid ""
"The framework is flexible and allows you to write functions that perform any "
"other kind of check you may require. The following is an example stub check "
"function::"
msgstr ""
"Kerangka kerja fleksibel dan mengizinkan anda menulis fungsi-fungsi yang "
"melakukan jenis lain pemeriksaan anda mungkin butuhkan. Berikut adalah "
"sebuah contoh potongan fungsi pemeriksaan::"

msgid ""
"The check function *must* accept an ``app_configs`` argument; this argument "
"is the list of applications that should be inspected. If ``None``, the check "
"must be run on *all* installed apps in the project."
msgstr ""

msgid ""
"The check will receive a ``databases`` keyword argument. This is a list of "
"database aliases whose connections may be used to inspect database level "
"configuration. If ``databases`` is ``None``, the check must not use any "
"database connections."
msgstr ""

msgid "The ``**kwargs`` argument is required for future expansion."
msgstr ""

msgid "Messages"
msgstr "Pesan"

msgid ""
"The function must return a list of messages. If no problems are found as a "
"result of the check, the check function must return an empty list."
msgstr ""
"Fungsi harus mengembalikan sebuah daftar pesan. Jika tidak ada masalah "
"ditemukan sebagai hasil dari pemeriksaan, fungsi pemeriksaaan harus "
"mengembalikan sebuah daftar kosong."

msgid ""
"The warnings and errors raised by the check method must be instances of :"
"class:`~django.core.checks.CheckMessage`. An instance of :class:`~django."
"core.checks.CheckMessage` encapsulates a single reportable error or warning. "
"It also provides context and hints applicable to the message, and a unique "
"identifier that is used for filtering purposes."
msgstr ""
"Peringatan dan kesalahan dimunculkan oleh metode pemeriksaan harus berupa "
"instance dari :class:`~django.core.checks.CheckMessage`. Sebuah instance "
"dari :class:`~django.core.checks.CheckMessage` membungkus kesalahan tunggal "
"dilaporkan atau peringatan. Itu juga menyediakan konteks dan petunjuk dapat "
"diterapkan ke pesan, dan penciri unik yang digunakan untuk tujuan "
"penyaringan."

msgid ""
"The concept is very similar to messages from the :doc:`message framework </"
"ref/contrib/messages>` or the :doc:`logging framework </topics/logging>`. "
"Messages are tagged with a ``level`` indicating the severity of the message."
msgstr ""
"Konsep sangat mirip ke pasan dari :doc:`message framework </ref/contrib/"
"messages>` atau the :doc:`logging framework </topics/logging>`. Pesan-pesan "
"dietiket dengan ``level`` menunjukkan kekerasan pesan."

msgid ""
"There are also shortcuts to make creating messages with common levels "
"easier. When using these classes you can omit the ``level`` argument because "
"it is implied by the class name."
msgstr ""
"Ada juga jalan pintas untuk membuat pesan dengan tingkatan umum lebih mudah. "
"Ketika menggunakan kelas-kelas ini anda dapat menghilangkan argumen "
"``level`` karena itu disisipkan oleh nama kelas."

msgid ":class:`Debug`"
msgstr ":class:`Debug`"

msgid ":class:`Info`"
msgstr ":class:`Info`"

msgid ":class:`Warning`"
msgstr ":class:`Warning`"

msgid ":class:`Error`"
msgstr ":class:`Error`"

msgid ":class:`Critical`"
msgstr ":class:`Critical`"

msgid "Registering and labeling checks"
msgstr "Mendaftarkan dan melabeli pemeriksaan"

msgid ""
"Lastly, your check function must be registered explicitly with system check "
"registry. Checks should be registered in a file that's loaded when your "
"application is loaded; for example, in the :meth:`AppConfig.ready() <django."
"apps.AppConfig.ready>` method."
msgstr ""
"Akhirnya, fungsi pemeriksaan anda harus terdaftar jelas dengan sistem "
"pemeriksaan regristrar. Pemeriksaan harus didaftarkan dalam sebuah berkas "
"yang dimuat ketika aplikasi anda dimuat; sebagai contoh, di metode :meth:"
"`AppConfig.ready() <django.apps.AppConfig.ready>`."

msgid ""
"You can pass as many tags to ``register`` as you want in order to label your "
"check. Tagging checks is useful since it allows you to run only a certain "
"group of checks. For example, to register a compatibility check, you would "
"make the following call::"
msgstr ""
"Anda dapat melewatkan sebanyak etiket ke ``register`` seperti anda inginkan "
"untuk melabelkan pemeriksaan anda. Pemeriksaan etiket sangat berguna sejak "
"itu mengizinkan anda menjalankan hanya kelompok tertentu dari pemeriksaan. "
"Sebagai contoh, untuk mendaftar pemeriksaan kesesuaian, anda akan membuat "
"panggilan berikut::"

msgid ""
"You can register \"deployment checks\" that are only relevant to a "
"production settings file like this::"
msgstr ""
"Anda dapat mendaftar \"deployment checks\" yang hanya bersangkutan pada "
"berkas pengaturan produksi seperti ini::"

msgid ""
"These checks will only be run if the :option:`check --deploy` option is used."
msgstr ""
"Pemeriksaan ini hanya akan dijalankan jika pilihan :option:`check --deploy` "
"digunakan."

msgid ""
"You can also use ``register`` as a function rather than a decorator by "
"passing a callable object (usually a function) as the first argument to "
"``register``."
msgstr ""
"Anda dapat juga menggunakan ``register`` sebagai sebuah fungsi daripada "
"sebuah penghias dengan melewatkan obyek callable (biasanya sebuah fungsi) "
"sebagai argumen pertama pada ``register``"

msgid "The code below is equivalent to the code above::"
msgstr "Kode dibawah ini setara dengan kode diatas::"

msgid "Field, model, manager, and database checks"
msgstr "Pemeriksaan bidang, model, pengelola, dan basisdata."

msgid ""
"In some cases, you won't need to register your check function -- you can "
"piggyback on an existing registration."
msgstr ""
"Dalam beberapa kasus, anda tidak butuh mendaftar fungsi pemeriksaan anda -- "
"anda dapat mendukung pada pendaftaran yang ada."

msgid ""
"Fields, models, model managers, and database backends all implement a "
"``check()`` method that is already registered with the check framework. If "
"you want to add extra checks, you can extend the implementation on the base "
"class, perform any extra checks you need, and append any messages to those "
"generated by the base class. It's recommended that you delegate each check "
"to separate methods."
msgstr ""
"Bidang, model, pengeloal model, dan backend basisdata semua menerapkan "
"metode ``check()`` yang sudah terdaftar dengan kerangka kerja pemeriksaan. "
"Jika anda ingin menambahkan pemeriksaan tambahan, anda dapat memperpanjang "
"penerapan pada berdasarkan kelas, lakukan pemeriksaan tambahan apapun anda "
"butuh, dan tambahkan pesan apapun ke itu dibangkitkan oleh kelas dasar. Itu "
"dianjurkan bahwa anda menugaskan setiap pemeriksaan untuk memisahkan metode."

msgid ""
"Consider an example where you are implementing a custom field named "
"``RangedIntegerField``. This field adds ``min`` and ``max`` arguments to the "
"constructor of ``IntegerField``. You may want to add a check to ensure that "
"users provide a min value that is less than or equal to the max value. The "
"following code snippet shows how you can implement this check::"
msgstr ""
"Pertimbangkan sebuah contoh dimana anda sedang menerapkan bidang penyesuaian "
"bernama ``RangedIntegerField``. Bidang ini menambahkan argumen ``min`` dan "
"``max`` pada pembangun dari ``IntegerField``. Anda mungkin ingin menambah "
"sebuah pemeriksaan untuk memastikan bahwa pengguna menyediakan nilai minimal "
"yang kurang atau setara pada nilai maksimal. Potongan kode berikut "
"menunjukkan anda dapat menerapkan pemeriksaan ini::"

msgid ""
"If you wanted to add checks to a model manager, you would take the same "
"approach on your subclass of :class:`~django.db.models.Manager`."
msgstr ""
"Jika anda ingin menambah pemeriksaan pada pengelola model, anda akan "
"mengambil pendekatan sama pada subkelas anda dari :class:`~django.db.models."
"Manager`."

msgid ""
"If you want to add a check to a model class, the approach is *almost* the "
"same: the only difference is that the check is a classmethod, not an "
"instance method::"
msgstr ""
"Jika anda ingin menambah sebuah pemeriksaan pada kelas model, pendekatan "
"adalah *hampir* sama: perbedaan hanya bahwa pemeriksaan adalah metode kelas, "
"bukan metode instance::"

msgid "Writing tests"
msgstr "Menulis percobaan"

msgid "Messages are comparable. That allows you to easily write tests::"
msgstr ""
"Pesan dapat dibandingkan. Itu mengizinakan anda dengan mudah menulis "
"percobaan::"

msgid "Built-in class-based generic views"
msgstr "Tampilan umum berdasarkan kelas siap-pakai"

msgid ""
"Writing web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at "
"the model and template layers, but web developers also experience this "
"boredom at the view level."
msgstr ""

msgid ""
"Django's *generic views* were developed to ease that pain. They take certain "
"common idioms and patterns found in view development and abstract them so "
"that you can quickly write common views of data without having to write too "
"much code."
msgstr ""
"*tampilan umum* Django dikembangkan untuk memudahkan sakit itu. Mereka "
"mengambil dialek umum tertentu dan pola ditemukan di pengembangan tampilan "
"dan meringkaskan mereka sehingga anda dapat dengan cepat menulis tampilan "
"umum dari data tanpa harus menulis  kode terlalu banyak."

msgid ""
"We can recognize certain common tasks, like displaying a list of objects, "
"and write code that displays a list of *any* object. Then the model in "
"question can be passed as an extra argument to the URLconf."
msgstr ""
"Kami dapat mengenali tugas-tugas umum, seperti memperlihatkan daftar dari "
"obyek, dan menulis kode yang memperlihatkan daftar dari obyek *apapun*. "
"Kemudian model di pertanyaan dapat dilewatkan sebagai sebuah argumen "
"tambahan pada URLconf."

msgid "Django ships with generic views to do the following:"
msgstr "Django dibungkus dengan tampilan umum untuk melakukan berikut:"

msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``TalkListView`` and a "
"``RegisteredUserListView`` would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""
"Memperlihatkan daftar dan halaman rincian untuk obyek tunggal. Jika kami "
"sedang membuat sebuah aplikasi untuk mengelola pertemuan kemudian "
"``TalkListView`` dan ``RegisteredUserListView`` akan menjadi contoh dari "
"daftar tampilan. Halaman percakapan tunggal adalah sebuah contoh dari apa "
"kami sebut tampilan \"detail\"."

msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages."
msgstr ""
"Obyek berdasarkan-tanggal sekarang di halaman arsip tahun/bulan/hari, "
"rincian terkait, dan halaman \"latest\"."

msgid ""
"Allow users to create, update, and delete objects -- with or without "
"authorization."
msgstr ""
"Mengizinkan untuk membuat, memperbaharui, dan menghapus obyek -- dengan atau "
"tanpa otorisasi."

msgid ""
"Taken together, these views provide interfaces to perform the most common "
"tasks developers encounter."
msgstr ""

msgid "Extending generic views"
msgstr "Memperpanjang tampilan umum"

msgid ""
"There's no question that using generic views can speed up development "
"substantially. In most projects, however, there comes a moment when the "
"generic views no longer suffice. Indeed, the most common question asked by "
"new Django developers is how to make generic views handle a wider array of "
"situations."
msgstr ""
"Tidak ada pertanyaan yang menggunakan tampilan umum yang dapat mempercepat "
"pengembangan besar. Dalam kebanyakan proyek, bagaimanapun, ada datang saat "
"ketika tampilan umum tidak lagi cukup. Memang, pertanyaan paling umum "
"ditanyakan oleh pengembang Django baru adalah bagaimana membuat tampilan "
"umum menangangi larik lebih lebar dari keadaan."

msgid ""
"This is one of the reasons generic views were redesigned for the 1.3 release "
"- previously, they were view functions with a bewildering array of options; "
"now, rather than passing in a large amount of configuration in the URLconf, "
"the recommended way to extend generic views is to subclass them, and "
"override their attributes or methods."
msgstr ""

msgid ""
"That said, generic views will have a limit. If you find you're struggling to "
"implement your view as a subclass of a generic view, then you may find it "
"more effective to write just the code you need, using your own class-based "
"or functional views."
msgstr ""
"Itu dikatakan, tampilan umum akan mempunyai sebuah batasan. Jika anda "
"menemukan anda sedang berjuang menerapkan tampilan anda sebagai sebuah "
"subkelas dari tampilan umum, kemudian anda mungkin menemukan itu lebih "
"efektif untuk menulis hanya kode anda butuhkan, menggunakan berdasarkan-"
"kelas anda sendiri atau tampilan kegunaan."

msgid ""
"More examples of generic views are available in some third party "
"applications, or you could write your own as needed."
msgstr ""
"Contoh-contoh lebih dari tampilan umum tersedia di beberapa aplikasi pihak "
"ketiga, atau anda dapat menulis anda sendiri sesuai kebutuhan."

msgid "Generic views of objects"
msgstr "Tampilan umum dari obyek"

msgid ""
":class:`~django.views.generic.base.TemplateView` certainly is useful, but "
"Django's generic views really shine when it comes to presenting views of "
"your database content. Because it's such a common task, Django comes with a "
"handful of built-in generic views to help generate list and detail views of "
"objects."
msgstr ""

msgid ""
"Let's start by looking at some examples of showing a list of objects or an "
"individual object."
msgstr ""
"Mari kita mulai dengan mencari beberapa contoh dari menunjukkan daftar dari "
"obyek atau obyek tersendiri."

msgid "We'll be using these models::"
msgstr "Kami akan menggunakan model ini ::"

msgid "Now we need to define a view::"
msgstr "Sekarang kami butuh menentukan sebuah tampilan::"

msgid "Finally hook that view into your urls::"
msgstr "Akhirnya kaitkan tampilan itu kedalam url anda ::"

msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the view which template to use "
"by adding a ``template_name`` attribute to the view, but in the absence of "
"an explicit template Django will infer one from the object's name. In this "
"case, the inferred template will be ``\"books/publisher_list.html\"`` -- the "
"\"books\" part comes from the name of the app that defines the model, while "
"the \"publisher\" bit is the lowercased version of the model's name."
msgstr ""

msgid ""
"Thus, when (for example) the ``APP_DIRS`` option of a ``DjangoTemplates`` "
"backend is set to True in :setting:`TEMPLATES`, a template location could "
"be: /path/to/project/books/templates/books/publisher_list.html"
msgstr ""
"Dengan demikian, ketika (sebagai contoh) pilihan ``APP_DIRS`` dari backend "
"``DjangoTemplates`` disetel menjadi True di :setting:`TEMPLATES`, tempat "
"cetakan dapat berupa: /path/to/project/books/templates/books/publisher_list."
"html"

msgid ""
"This template will be rendered against a context containing a variable "
"called ``object_list`` that contains all the publisher objects. A template "
"might look like this:"
msgstr ""

msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the attributes set on the generic view. The :doc:`generic "
"views reference</ref/class-based-views/index>` documents all the generic "
"views and their options in detail; the rest of this document will consider "
"some of the common ways you might customize and extend generic views."
msgstr ""
"Itu semua benar-benar ada adalah pada itu. Semua fitur-fitur keren dari "
"tampilan umum datang dari merubah atribut disetel pada tampilan umum. :doc:"
"`generic views reference</ref/class-based-views/index>` mendokumentasikan "
"semua tampilan umum dan pilihan mereka di rincian; sisa dari dokumen ini "
"akan dianggap beberapa dari cara umum anda mungkin menyesuaikan dan "
"memperpanjang tampilan umum."

msgid "Making \"friendly\" template contexts"
msgstr "Membuat konteks cetakan \"friendly\""

msgid ""
"You might have noticed that our sample publisher list template stores all "
"the publishers in a variable named ``object_list``. While this works just "
"fine, it isn't all that \"friendly\" to template authors: they have to "
"\"just know\" that they're dealing with publishers here."
msgstr ""
"Anda mungkin telah memperhatikan bahwa contoh cetakan daftar penerbit kami "
"menyimpan semua penerbit dalam sebuah variabel bernama ``object_list``. "
"Selagi ini bekerja baik, itu tidak semua yang \"friendly\" pada cetakan "
"penulis: mereka harus \"just know\" bahwa mereka sedang berurusan dengan "
"penerbit disini."

msgid ""
"Well, if you're dealing with a model object, this is already done for you. "
"When you are dealing with an object or queryset, Django is able to populate "
"the context using the lowercased version of the model class' name. This is "
"provided in addition to the default ``object_list`` entry, but contains "
"exactly the same data, i.e. ``publisher_list``."
msgstr ""

msgid ""
"If this still isn't a good match, you can manually set the name of the "
"context variable. The ``context_object_name`` attribute on a generic view "
"specifies the context variable to use::"
msgstr ""
"Jika ini masih tidak kecocokan baik, anda dapat manual menyetel nama dari "
"variabel konteks. Atribut ``context_object_name`` pada tampilan umum "
"menentukan variabel konteks untuk digunakan::"

msgid ""
"Providing a useful ``context_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""
"Menyediakan sebuah ``context_object_name`` berguna selalu ide bagus. Rekan "
"kerja anda yang merancang cetakan akan berterima kasih."

msgid "Adding extra context"
msgstr "Menambahkan konteks tambahan"

msgid ""
"Often you need to present some extra information beyond that provided by the "
"generic view. For example, think of showing a list of all the books on each "
"publisher detail page. The :class:`~django.views.generic.detail.DetailView` "
"generic view provides the publisher to the context, but how do we get "
"additional information in that template?"
msgstr ""

msgid ""
"The answer is to subclass :class:`~django.views.generic.detail.DetailView` "
"and provide your own implementation of the ``get_context_data`` method. The "
"default implementation adds the object being displayed to the template, but "
"you can override it to send more::"
msgstr ""

msgid ""
"Generally, ``get_context_data`` will merge the context data of all parent "
"classes with those of the current class. To preserve this behavior in your "
"own classes where you want to alter the context, you should be sure to call "
"``get_context_data`` on the super class. When no two classes try to define "
"the same key, this will give the expected results. However if any class "
"attempts to override a key after parent classes have set it (after the call "
"to super), any children of that class will also need to explicitly set it "
"after super if they want to be sure to override all parents. If you're "
"having trouble, review the method resolution order of your view."
msgstr ""
"Umumnya, ``get_context_data`` akan menggabungkan data konteks dari semua "
"induk kelas dengan mereka dari kelas saat ini. Untuk mempertahankan "
"kebiasaan ini di kelas milik anda sendiri dimana anda ingin merubah konteks, "
"anda harus pasti memanggil ``get_context_data`` pada super kelas. Ketika "
"tidak ada dua kelas mencoba menentukan kunci yang sama, ini akan memberikan "
"hasil yang diharapkan. Bagaimanapun jika tiap kelas mencoba menimpa kunci "
"setelah kelas induk menyetelnya (setelah panggilan pada super), tiap anak "
"dari kelas akan juga butuh secara eksplisit menyetelnya setelah super jika "
"mereka ingin memastikan untuk menimpa semua induk. Jika anda mempunyai "
"masalah, tinjau kembali urutan pemecahan metode dari tampilan anda."

msgid ""
"Another consideration is that the context data from class-based generic "
"views will override data provided by context processors; see :meth:`~django."
"views.generic.detail.SingleObjectMixin.get_context_data` for an example."
msgstr ""
"Pertimbangan lain adalah bahwa data konteks dari tampilan umum berdasarkan-"
"kelas akan menimpa data disediakan oleh pengolah konteks; lihat :meth:"
"`~django.views.generic.detail.SingleObjectMixin.get_context_data` untuk "
"sebuah contoh."

msgid "Viewing subsets of objects"
msgstr "Menampilkan subkumpulan dari obyek"

msgid ""
"Now let's take a closer look at the ``model`` argument we've been using all "
"along. The ``model`` argument, which specifies the database model that the "
"view will operate upon, is available on all the generic views that operate "
"on a single object or a collection of objects. However, the ``model`` "
"argument is not the only way to specify the objects that the view will "
"operate upon -- you can also specify the list of objects using the "
"``queryset`` argument::"
msgstr ""
"Sekarang mari kita lebih dekat melihat pada argumen ``model`` kami telah "
"sepanjang gunakan. Argumen ``model``, yang menentukan model basisdata yang "
"tampilan akan beroperasi, tersedia pada seua tampilan umum yang beroperasi "
"pada obyek tunggal atau kumpulan dari obyek. Bagaimanapun, argumen ``model`` "
"tidak hanya cara untuk menentukan obyek yang tampilan akan beroperasi -- "
"anda dapat juga menentukan daftar dari obyek menggunakan argumen "
"``queryset``::"

msgid ""
"Specifying ``model = Publisher`` is shorthand for saying ``queryset = "
"Publisher.objects.all()``. However, by using ``queryset`` to define a "
"filtered list of objects you can be more specific about the objects that "
"will be visible in the view (see :doc:`/topics/db/queries` for more "
"information about :class:`~django.db.models.query.QuerySet` objects, and see "
"the :doc:`class-based views reference </ref/class-based-views/index>` for "
"the complete details)."
msgstr ""

msgid ""
"To pick an example, we might want to order a list of books by publication "
"date, with the most recent first::"
msgstr ""
"Untuk mengambil sebuah contoh, kami mungkin ingin memesan buku berdasarkan "
"tanggal terbitan, dengan yang paling baru dahulu::"

msgid ""
"That's a pretty minimal example, but it illustrates the idea nicely. You'll "
"usually want to do more than just reorder objects. If you want to present a "
"list of books by a particular publisher, you can use the same technique::"
msgstr ""

msgid ""
"Notice that along with a filtered ``queryset``, we're also using a custom "
"template name. If we didn't, the generic view would use the same template as "
"the \"vanilla\" object list, which might not be what we want."
msgstr ""
"ikan bahwa selama dengan ``queryset`` disaring, kami juga menggunakan nama "
"cetakan penyesuaian. Jika kami tidak, tampilan umum akan menggunakan cetakan "
"sama seperti daftar obyek \"vanilla\", yang mungkin tidak kita inginkan."

msgid ""
"Also notice that this isn't a very elegant way of doing publisher-specific "
"books. If we want to add another publisher page, we'd need another handful "
"of lines in the URLconf, and more than a few publishers would get "
"unreasonable. We'll deal with this problem in the next section."
msgstr ""
"Juga perharikan bahwa ini bukan cara sangat elegan dari melakukan buku "
"khusus-penerbit. Jika kami ingin menambah halaman penerbit lain, kami butuh "
"bantuan lain dari baris di URLconf, dan lebih dari sedikit penerbit akan "
"mendapatkan alasan tidak masuk akal. Kami akan berurusan dengan masalah ini "
"di bagian selanjutnya."

msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-"
"views reference</ref/class-based-views/index>` for more details."
msgstr ""
"Jika anda mendapatkan sebuah 404 ketika meminta ``/books/acme/``, periksa "
"untuk memastikan anda sebenarnya mempunyai sebuah Publisher dengan nama "
"'ACME Publishing'. Tampilan umum mempunyai sebuah parameter ``allow_empty`` "
"untuk kasus ini. Lihat :doc:`class-based-views reference</ref/class-based-"
"views/index>` untuk rincian."

msgid "Dynamic filtering"
msgstr "Menyaring dinamis"

msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher?"
msgstr ""
"Kebutuhan umum lain adalah menyaring kebawah obyek yang diberikan di halaman "
"daftar dengan beberapa kunci di URL. Awalnya kami mengkode-keraskan nama "
"penerbit di URLconf, tetapi apa jika kami ingin menulis sebuah tampilan yang "
"menampilkan semua buku oleh beberapa penerbit berubah-ubah?"

msgid ""
"Handily, the ``ListView`` has a :meth:`~django.views.generic.list."
"MultipleObjectMixin.get_queryset` method we can override. By default, it "
"returns the value of the ``queryset`` attribute, but we can use it to add "
"more logic."
msgstr ""

msgid ""
"The key part to making this work is that when class-based views are called, "
"various useful things are stored on ``self``; as well as the request (``self."
"request``) this includes the positional (``self.args``) and name-based "
"(``self.kwargs``) arguments captured according to the URLconf."
msgstr ""
"Bagian kunci membiat ini bekerja adalah bahwa ketika tampilan berdasarkan-"
"kelas dipanggil, beragam hal-hal berguna disimpan di ``self``; sama halnya "
"permintaan (``self.request``) ini menyertakan penempatan (``self.args``) dan "
"argumen (``self.kwargs``) berdasarkan-nama menurut URLconf."

msgid "Here, we have a URLconf with a single captured group::"
msgstr "Disini, kami mempunyai URLconf dengan kelompok ditangkap tunggal::"

msgid "Next, we'll write the ``PublisherBookListView`` view itself::"
msgstr ""

msgid ""
"Using ``get_queryset`` to add logic to the queryset selection is as "
"convenient as it is powerful. For instance, if we wanted, we could use "
"``self.request.user`` to filter using the current user, or other more "
"complex logic."
msgstr ""

msgid ""
"We can also add the publisher into the context at the same time, so we can "
"use it in the template::"
msgstr ""
"Kami dapat juga menambahkan penerbit kedalam konteks pada waktu bersamaan, "
"jadi kami dapat menggunakannya di cetakan::"

msgid "Performing extra work"
msgstr "Melakukan pekerjaan tambahan"

msgid ""
"The last common pattern we'll look at involves doing some extra work before "
"or after calling the generic view."
msgstr ""
"Pola umum terakhir kami akan lihat pada melibatkan melakukan beberapa "
"pekerjaan tambahan sebelum atau sesudah memanggil tampilan umum."

msgid ""
"Imagine we had a ``last_accessed`` field on our ``Author`` model that we "
"were using to keep track of the last time anybody looked at that author::"
msgstr ""
"Bayangkan kami mempunyai sebuah bidang ``last_accessed`` di model ``Author`` "
"kami yang kami sedang gunakanuntuk menjaga lintas dari waktu terakhir "
"siapapun mencari penulis itu::"

msgid ""
"The generic ``DetailView`` class wouldn't know anything about this field, "
"but once again we could write a custom view to keep that field updated."
msgstr ""

msgid ""
"First, we'd need to add an author detail bit in the URLconf to point to a "
"custom view::"
msgstr ""
"Pertama, kami butuh menambah rincian seorang penulis sedikit dalam URLconf "
"untuk menunjuk pada tampilan penyesuaian::"

msgid ""
"Then we'd write our new view -- ``get_object`` is the method that retrieves "
"the object -- so we override it and wrap the call::"
msgstr ""

msgid ""
"The URLconf here uses the named group ``pk`` - this name is the default name "
"that ``DetailView`` uses to find the value of the primary key used to filter "
"the queryset."
msgstr ""
"URLconf disini menggunakan kelompok bernama ``pk`` - nama ini adalah nama "
"awalan yang ``DetailView`` menggunakan untuk menemukan nilai dari primary "
"key digunakan untuk menyaring queryset."

msgid ""
"If you want to call the group something else, you can set :attr:`~django."
"views.generic.detail.SingleObjectMixin.pk_url_kwarg` on the view."
msgstr ""

msgid "Form handling with class-based views"
msgstr "Menangani formulir dengan tampilan berdasarkan-kelas"

msgid "Form processing generally has 3 paths:"
msgstr "Pengolahan formulir umumnya mempunyai 3 jalur:"

msgid "Initial GET (blank or prepopulated form)"
msgstr "Inisial GET (kosong atau formulir diisi dimuka)"

msgid "POST with invalid data (typically redisplay form with errors)"
msgstr ""
"POST dengan data tidak sah (khususnya memperlihatkan kembali formulir dengan "
"kesalahan)"

msgid "POST with valid data (process the data and typically redirect)"
msgstr "POST dengan data sah (pengolahan data dan khususnya pengalihan)"

msgid ""
"Implementing this yourself often results in a lot of repeated boilerplate "
"code (see :ref:`Using a form in a view<using-a-form-in-a-view>`). To help "
"avoid this, Django provides a collection of generic class-based views for "
"form processing."
msgstr ""
"Menerapkan ini anda sendiri sering menghasilkan banyak perulangan kode "
"boilerplate (lihat :ref:`Using a form in a view<using-a-form-in-a-view>`). "
"Untuk menghindai ini, Django menyediakan kumpulan dari tampilan berdasarkan-"
"kelas umum untuk pengolahan formulir."

msgid "Basic forms"
msgstr "Formulir dasar"

msgid "Given a contact form:"
msgstr "Diberikan formulir kontak:"

msgid "forms.py"
msgstr "forms.py"

msgid "The view can be constructed using a ``FormView``:"
msgstr "Tampilan dapat dibangun menggunakan ``FormView``:"

msgid "views.py"
msgstr "views.py"

msgid "Notes:"
msgstr "Catatan:"

msgid ""
"FormView inherits :class:`~django.views.generic.base.TemplateResponseMixin` "
"so :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"can be used here."
msgstr ""
"FormView mewarisi :class:`~django.views.generic.base.TemplateResponseMixin` "
"jadi :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"dapat digunakan disini."

msgid ""
"The default implementation for :meth:`~django.views.generic.edit.FormMixin."
"form_valid` simply redirects to the :attr:`~django.views.generic.edit."
"FormMixin.success_url`."
msgstr ""
"Penerapan awalan untuk :meth:`~django.views.generic.edit.FormMixin."
"form_valid` cukup mengalihkan ke :attr:`~django.views.generic.edit.FormMixin."
"success_url`. "

msgid "Model forms"
msgstr "Formulir model"

msgid ""
"Generic views really shine when working with models.  These generic views "
"will automatically create a :class:`~django.forms.ModelForm`, so long as "
"they can work out which model class to use:"
msgstr ""
"Tampilan umum bersinar ketika bekerja dengan model. Tampilan umum ini akan "
"secara otomatis membuat sebuah :class:`~django.forms.ModelForm`, selama "
"mereka dapat bekerya kelas model mana digunakan:"

msgid ""
"If the :attr:`~django.views.generic.edit.ModelFormMixin.model` attribute is "
"given, that model class will be used."
msgstr ""
"Jika atribut :attr:`~django.views.generic.edit.ModelFormMixin.model` "
"diberikan, kelas model itu akan digunakan."

msgid ""
"If :meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` "
"returns an object, the class of that object will be used."
msgstr ""
"Jika :meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` "
"mengembalikan sebuah obyek, kelas dari obyek akan digunakan."

msgid ""
"If a :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` is "
"given, the model for that queryset will be used."
msgstr ""
"Jika sebuah :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` "
"diberikan, model untuk queryset itu akan digunakan."

msgid ""
"Model form views provide a :meth:`~django.views.generic.edit.ModelFormMixin."
"form_valid()` implementation that saves the model automatically.  You can "
"override this if you have any special requirements; see below for examples."
msgstr ""
"Tampilan formulir model menyediakan sebuah penerapan :meth:`~django.views."
"generic.edit.ModelFormMixin.form_valid()` yang menyimpan model secara "
"otomatis. Anda dapat menimpa ini jika anda mempunyai persyaratan khusus "
"lainnya; lihat dibawah untuk contoh."

msgid ""
"You don't even need to provide a ``success_url`` for :class:`~django.views."
"generic.edit.CreateView` or :class:`~django.views.generic.edit.UpdateView` - "
"they will use :meth:`~django.db.models.Model.get_absolute_url()` on the "
"model object if available."
msgstr ""
"Anda tidak perlu menyediakan sebuah ``success_url`` untuk :class:`~django."
"views.generic.edit.CreateView` atau :class:`~django.views.generic.edit."
"UpdateView` - mereka akan menggunakan :meth:`~django.db.models.Model."
"get_absolute_url()` pada obyek model jika tersedia."

msgid ""
"If you want to use a custom :class:`~django.forms.ModelForm` (for instance "
"to add extra validation), set :attr:`~django.views.generic.edit.FormMixin."
"form_class` on your view."
msgstr ""

msgid ""
"When specifying a custom form class, you must still specify the model, even "
"though the :attr:`~django.views.generic.edit.FormMixin.form_class` may be a :"
"class:`~django.forms.ModelForm`."
msgstr ""
"Ketika menentukan sebuah penyesuaian kelas formulir, anda harus masih "
"menentukan model, meskipun :attr:`~django.views.generic.edit.FormMixin."
"form_class` mungkin berupa sebuah :class:`~django.forms.ModelForm`."

msgid ""
"First we need to add :meth:`~django.db.models.Model.get_absolute_url()` to "
"our ``Author`` class:"
msgstr ""
"Pertama kami butuh menambahkan :meth:`~django.db.models.Model."
"get_absolute_url()` ke kelas ``Author`` kami:"

msgid "models.py"
msgstr "models.py"

msgid ""
"Then we can use :class:`CreateView` and friends to do the actual work. "
"Notice how we're just configuring the generic class-based views here; we "
"don't have to write any logic ourselves:"
msgstr ""
"Kemudian kami dapat menggunakan :class:`CreateView` dan teman-teman untuk "
"melakukan pekerjaan sebenarnya. Perhatikan bagaimana kami hanya "
"mengkonfigurasi tampilan berdasarkan-kelas umum disini; kami tidak harus "
"menulis logika apapun kami sendiri:"

msgid ""
"We have to use :func:`~django.urls.reverse_lazy` instead of ``reverse()``, "
"as the urls are not loaded when the file is imported."
msgstr ""
"Kami harus menggunakan :func:`~django.urls.reverse_lazy` daripada "
"``reverse()``, ketika url tidak dimuat ketika berkas diimpor."

msgid ""
"The ``fields`` attribute works the same way as the ``fields`` attribute on "
"the inner ``Meta`` class on :class:`~django.forms.ModelForm`. Unless you "
"define the form class in another way, the attribute is required and the view "
"will raise an :exc:`~django.core.exceptions.ImproperlyConfigured` exception "
"if it's not."
msgstr ""
"Atribut ``fields`` bekerja cara sama seperti atribut ``fields`` pada kelas "
"``Meta`` sebelah dalam pada :class:`~django.forms.ModelForm`. Meskipun anda "
"menentukan kelas formulir di cara lain, atribut dibutuhkan dan tampilan akan "
"munculkan sebuah pengecualian :exc:`~django.core.exceptions."
"ImproperlyConfigured` jika itu tidak."

msgid ""
"If you specify both the :attr:`~django.views.generic.edit.ModelFormMixin."
"fields` and :attr:`~django.views.generic.edit.FormMixin.form_class` "
"attributes, an :exc:`~django.core.exceptions.ImproperlyConfigured` exception "
"will be raised."
msgstr ""
"Jika anda menentukan kedua atribut :attr:`~django.views.generic.edit."
"ModelFormMixin.fields` dan :attr:`~django.views.generic.edit.FormMixin."
"form_class`, sebuah pengecualian :exc:`~django.core.exceptions."
"ImproperlyConfigured` akan dimunculkan."

msgid "Finally, we hook these new views into the URLconf:"
msgstr "Akhirnya, kami mengaitkan tampilan baru ini kedalam URLconf:"

msgid "urls.py"
msgstr "urls.py"

msgid ""
"These views inherit :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` which uses :attr:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin.template_name_suffix` to construct "
"the :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"based on the model."
msgstr ""
"Tampilan ini mewarisi class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` yang menggunakan :attr:`~django.views."
"generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` untuk "
"membangun :attr:`~django.views.generic.base.TemplateResponseMixin."
"template_name` berdasarkan pada model."

msgid "In this example:"
msgstr "Di contoh ini:"

msgid ""
":class:`CreateView` and :class:`UpdateView` use ``myapp/author_form.html``"
msgstr ""
":class:`CreateView` dan :class:`UpdateView` menggunakan ``myapp/author_form."
"html``"

msgid ":class:`DeleteView` uses ``myapp/author_confirm_delete.html``"
msgstr ":class:`DeleteView` menggunakan ``myapp/author_confirm_delete.html``"

msgid ""
"If you wish to have separate templates for :class:`CreateView` and :class:"
"`UpdateView`, you can set either :attr:`~django.views.generic.base."
"TemplateResponseMixin.template_name` or :attr:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin.template_name_suffix` on your view class."
msgstr ""
"Jika anda berharap untuk mempunyai cetakan terpisah untuk :class:"
"`CreateView` dan :class:`UpdateView`, anda dapat menyetel antara :attr:"
"`~django.views.generic.base.TemplateResponseMixin.template_name` atau :attr:"
"`~django.views.generic.detail.SingleObjectTemplateResponseMixin."
"template_name_suffix` pada kelas tampilan anda."

msgid "Models and ``request.user``"
msgstr "Models dan ``request.user``"

msgid ""
"To track the user that created an object using a :class:`CreateView`, you "
"can use a custom :class:`~django.forms.ModelForm` to do this. First, add the "
"foreign key relation to the model:"
msgstr ""
"Untuk melacak pengguna yang membuat sebuah obyek menggunakan sebuah :class:"
"`CreateView`, anda dapat menggunakan sebuah penyesuaian :class:`~django."
"forms.ModelForm` untuk melakukan ini. Pertama, tambah hubungan foreign key "
"pada model:"

msgid ""
"In the view, ensure that you don't include ``created_by`` in the list of "
"fields to edit, and override :meth:`~django.views.generic.edit."
"ModelFormMixin.form_valid()` to add the user:"
msgstr ""
"Di tampilan, pastikan bahwa anda tidak menyertakan ``created_by`` di daftar "
"dari bidang untuk menyunting, dan menimpa :meth:`~django.views.generic.edit."
"ModelFormMixin.form_valid()` untuk menambah pengguna: "

msgid ""
":class:`~django.contrib.auth.mixins.LoginRequiredMixin` prevents users who "
"aren't logged in from accessing the form. If you omit that, you'll need to "
"handle unauthorized users in :meth:`~.ModelFormMixin.form_valid()`."
msgstr ""

msgid "Content negotiation example"
msgstr ""

msgid ""
"Here is an example showing how you might go about implementing a form that "
"works with an API-based workflow as well as 'normal' form POSTs::"
msgstr ""

msgid "Class-based views"
msgstr "Tampilan berdasarkan-kelas"

msgid ""
"A view is a callable which takes a request and returns a response. This can "
"be more than just a function, and Django provides an example of some classes "
"which can be used as views. These allow you to structure your views and "
"reuse code by harnessing inheritance and mixins. There are also some generic "
"views for tasks which we'll get to later, but you may want to design your "
"own structure of reusable views which suits your use case. For full details, "
"see the :doc:`class-based views reference documentation</ref/class-based-"
"views/index>`."
msgstr ""

msgid "Basic examples"
msgstr "Contoh dasar"

msgid ""
"Django provides base view classes which will suit a wide range of "
"applications. All views inherit from the :class:`~django.views.generic.base."
"View` class, which handles linking the view into the URLs, HTTP method "
"dispatching and other common features. :class:`~django.views.generic.base."
"RedirectView` provides a HTTP redirect, and :class:`~django.views.generic."
"base.TemplateView` extends the base class to make it also render a template."
msgstr ""

msgid "Usage in your URLconf"
msgstr "Penggunaan dalam URLconf anda"

msgid ""
"The most direct way to use generic views is to create them directly in your "
"URLconf. If you're only changing a few attributes on a class-based view, you "
"can pass them into the :meth:`~django.views.generic.base.View.as_view` "
"method call itself::"
msgstr ""

msgid ""
"Any arguments passed to :meth:`~django.views.generic.base.View.as_view` will "
"override attributes set on the class. In this example, we set "
"``template_name`` on the ``TemplateView``. A similar overriding pattern can "
"be used for the ``url`` attribute on :class:`~django.views.generic.base."
"RedirectView`."
msgstr ""
"Apapun argumen dilewatkan ke :meth:`~django.views.generic.base.View.as_view` "
"akan menimpa atribut disetel pada kelas. Dalam contoh ini, kami menyetel "
"`template_name`` pada ``TemplateView``. Pola penibanan mirip dapat digunakan "
"untuk atribut ``url`` pada :class:`~django.views.generic.base.RedirectView`."

msgid "Subclassing generic views"
msgstr "Mensubkelaskan tampilan umum"

msgid ""
"The second, more powerful way to use generic views is to inherit from an "
"existing view and override attributes (such as the ``template_name``) or "
"methods (such as ``get_context_data``) in your subclass to provide new "
"values or methods. Consider, for example, a view that just displays one "
"template, ``about.html``. Django has a generic view to do this - :class:"
"`~django.views.generic.base.TemplateView` - so we can subclass it, and "
"override the template name::"
msgstr ""

msgid ""
"Then we need to add this new view into our URLconf. :class:`~django.views."
"generic.base.TemplateView` is a class, not a function, so we point the URL "
"to the :meth:`~django.views.generic.base.View.as_view` class method instead, "
"which provides a function-like entry to class-based views::"
msgstr ""

msgid ""
"For more information on how to use the built in generic views, consult the "
"next topic on :doc:`generic class-based views</topics/class-based-views/"
"generic-display>`."
msgstr ""
"Untuk informasi lebih pada bagaimana menggunakan tampilan umum siap pakai, "
"obrolkan topik selanjutnya di :doc:`generic class-based views</topics/class-"
"based-views/generic-display>`."

msgid "Supporting other HTTP methods"
msgstr "mendukung cara HTTP lain"

msgid ""
"Suppose somebody wants to access our book library over HTTP using the views "
"as an API. The API client would connect every now and then and download book "
"data for the books published since last visit. But if no new books appeared "
"since then, it is a waste of CPU time and bandwidth to fetch the books from "
"the database, render a full response and send it to the client. It might be "
"preferable to ask the API when the most recent book was published."
msgstr ""
"Misalkan seseorang ingin mengakses pustaka buku kami terhadap HTTP "
"menggunakan tampilan sebagai sebuah klien API akan terhubung setiap sekarang "
"kemudian dan mengunduh buku untuk buku diterbitkan sejak kunjugan terakhir. "
"Tetapi jika tidak ada buku baru muncul sejak itu, itu adalah pembuangan dari "
"waktu CPU dan lebar pita untuk mengambil buku-buku dari basisdata, mengirim "
"tanggapan penuh dan mengirim itu ke klien. Itu mungkin lebih baik untuk "
"menanyakan API ketika kebanyakan buku saat ini telah diterbitkan."

msgid "We map the URL to book list view in the URLconf::"
msgstr "Kami memetakan UTL pada tampilan daftar buku di URLconf::"

msgid "And the view::"
msgstr "Dan tampilan::"

msgid ""
"If the view is accessed from a ``GET`` request, an object list is returned "
"in the response (using the ``book_list.html`` template). But if the client "
"issues a ``HEAD`` request, the response has an empty body and the ``Last-"
"Modified`` header indicates when the most recent book was published.  Based "
"on this information, the client may or may not download the full object list."
msgstr ""

msgid "Introduction to class-based views"
msgstr "Perkenalan ke tampilan berdasarkan-kelas"

msgid ""
"Class-based views provide an alternative way to implement views as Python "
"objects instead of functions. They do not replace function-based views, but "
"have certain differences and advantages when compared to function-based "
"views:"
msgstr ""
"Tampilan berdasarkan-kelas menyediakan cara alternatif untuk menerapkan "
"tampilan sebagai obyek Python daripada fungsi. Mereka tidak mengganti "
"tampilan berdasarkan-fungsi, tetapi mempunyai perbedaan dan keuntungan "
"tertentu ketika dibandingkan pada tampilan berdasarkan-fungsi:"

msgid ""
"Organization of code related to specific HTTP methods (``GET``, ``POST``, "
"etc.) can be addressed by separate methods instead of conditional branching."
msgstr ""
"Kode organisasi terkait pada metode HTTP tertentu (``GET``, ``POST``, dll.) "
"dapat dialamatkan oleh metode terpisah sebagai gantinya dari percabangan "
"bersyarat."

msgid ""
"Object oriented techniques such as mixins (multiple inheritance) can be used "
"to factor code into reusable components."
msgstr ""
"Teknik-teknik berorientasi obyek seperti mixin (banyak warisan) dapat "
"digunakan pada kode faktor kedalam komponen digunakan kembali."

msgid ""
"The relationship and history of generic views, class-based views, and class-"
"based generic views"
msgstr ""
"Hubungan dan riwayat dari tampilan umum, tampilan berdasarkan-kelas, dan "
"tampilan umum berdasarkan-kelas"

msgid ""
"In the beginning there was only the view function contract, Django passed "
"your function an :class:`~django.http.HttpRequest` and expected back an :"
"class:`~django.http.HttpResponse`. This was the extent of what Django "
"provided."
msgstr ""
"Dalam permulaan ada hanya kontrak fungsi tampilan, Django melewatkan fungsi "
"anda sebuah :class:`~django.http.HttpRequest` dan berharap kembali sebuah :"
"class:`~django.http.HttpResponse`. Ini adalah perpanjangan dari apa Django "
"sediakan."

msgid ""
"Early on it was recognized that there were common idioms and patterns found "
"in view development. Function-based generic views were introduced to "
"abstract these patterns and ease view development for the common cases."
msgstr ""
"Lebih awal pada itu telah dikenali dimana ada dialek umum dan pola ditemukan "
"di pengembangan tampilan. Tampilan umum berdasarkan-fungsi telah "
"diperkenalkan untuk meringkas pola ini dan pengembangan tampilan mudah untuk "
"kasus-kasus umum."

msgid ""
"The problem with function-based generic views is that while they covered the "
"simple cases well, there was no way to extend or customize them beyond some "
"configuration options, limiting their usefulness in many real-world "
"applications."
msgstr ""

msgid ""
"Class-based generic views were created with the same objective as function-"
"based generic views, to make view development easier. However, the way the "
"solution is implemented, through the use of mixins, provides a toolkit that "
"results in class-based generic views being more extensible and flexible than "
"their function-based counterparts."
msgstr ""
"Tampilan umum berdasarkan-kelas telah dibuat dengan tujuan sama sebagai "
"tampilan umum berdasarkan-fungsi, untuk membuat tampilan pengembangan lebih "
"mudah. Bagaimanapun, cara pemecahan diterapkan, melalui penggunaan dari "
"mixin, menyediakan sebuah alat bantu yang menghasilkan di tampilan umum "
"berdasarkan-kelas menjadi lebih diperpanjang dan lentur daripada pasangan "
"berdasarkan-fungsi mereka."

msgid ""
"If you have tried function based generic views in the past and found them "
"lacking, you should not think of class-based generic views as a class-based "
"equivalent, but rather as a fresh approach to solving the original problems "
"that generic views were meant to solve."
msgstr ""

msgid ""
"The toolkit of base classes and mixins that Django uses to build class-based "
"generic views are built for maximum flexibility, and as such have many hooks "
"in the form of default method implementations and attributes that you are "
"unlikely to be concerned with in the simplest use cases. For example, "
"instead of limiting you to a class-based attribute for ``form_class``, the "
"implementation uses a ``get_form`` method, which calls a ``get_form_class`` "
"method, which in its default implementation returns the ``form_class`` "
"attribute of the class. This gives you several options for specifying what "
"form to use, from an attribute, to a fully dynamic, callable hook. These "
"options seem to add hollow complexity for simple situations, but without "
"them, more advanced designs would be limited."
msgstr ""

msgid "Using class-based views"
msgstr "Menggunakan tampilan berdasarkan-kelas"

msgid ""
"At its core, a class-based view allows you to respond to different HTTP "
"request methods with different class instance methods, instead of with "
"conditionally branching code inside a single view function."
msgstr ""
"Pada intinya, tampilan berdasarkan-kelas mengizinkan anda menanggapi ke "
"permintaan HTTP berbeda dengan metode instance kelas berbeda, daripada "
"dengan kode cabang bersyarat didalam fungsi tampilan tunggal."

msgid ""
"So where the code to handle HTTP ``GET`` in a view function would look "
"something like::"
msgstr ""
"Jadi dimana kode untuk menangani HTTP ``GET`` di sebuah fungsi tampilan akan "
"terlihat seperti::"

msgid "In a class-based view, this would become::"
msgstr "Di tampilan berdasarkan-kelas, ini akan menjadi::"

msgid ""
"Because Django's URL resolver expects to send the request and associated "
"arguments to a callable function, not a class, class-based views have an :"
"meth:`~django.views.generic.base.View.as_view` class method which returns a "
"function that can be called when a request arrives for a URL matching the "
"associated pattern. The function creates an instance of the class, calls :"
"meth:`~django.views.generic.base.View.setup` to initialize its attributes, "
"and then calls its :meth:`~django.views.generic.base.View.dispatch` method. "
"``dispatch`` looks at the request to determine whether it is a ``GET``, "
"``POST``, etc, and relays the request to a matching method if one is "
"defined, or raises :class:`~django.http.HttpResponseNotAllowed` if not::"
msgstr ""

msgid ""
"It is worth noting that what your method returns is identical to what you "
"return from a function-based view, namely some form of :class:`~django.http."
"HttpResponse`. This means that :doc:`http shortcuts </topics/http/"
"shortcuts>` or :class:`~django.template.response.TemplateResponse` objects "
"are valid to use inside a class-based view."
msgstr ""
"Itu perlu dicatat bahwa apa metode anda kembalikan mirip ke apa anda "
"kembalikan dari tampilan berdasarkan-fungsi, yaitu beberapa formulir dari :"
"class:`~django.http.HttpResponse`. Ini berarti bahwa obyek :doc:`http "
"shortcuts </topics/http/shortcuts>` atau :class:`~django.template.response."
"TemplateResponse` sah digunakan didalam tampilan berdasarkan-kelas."

msgid ""
"While a minimal class-based view does not require any class attributes to "
"perform its job, class attributes are useful in many class-based designs, "
"and there are two ways to configure or set class attributes."
msgstr ""
"Selagi tampilan berdasarkan-kelas paling rendah tidak membutuhkan atribut "
"kelas apapun untuk melakukan pekerjaannya, atribut kelas berguna di banyak "
"perancangan berdasarkan-kelas, dan ada dua cara mengkonfigurasi atau "
"mensetel atribut kelas."

msgid ""
"The first is the standard Python way of subclassing and overriding "
"attributes and methods in the subclass. So that if your parent class had an "
"attribute ``greeting`` like this::"
msgstr ""
"Pertama adalah cara Python standar dari mensubkelaskan dan menimpa atribut "
"dan metode di subkelas. Sehingga jika induk anda mempunyai sebuah atribut "
"``greeting`` seperti ini::"

msgid "You can override that in a subclass::"
msgstr "Anda dapat menimpa itu di subkelas::"

msgid ""
"Another option is to configure class attributes as keyword arguments to the :"
"meth:`~django.views.generic.base.View.as_view` call in the URLconf::"
msgstr ""
"Pilihan lain adalah mengkonfigurasi atribut kelas sebagai argumen kata kunci "
"pada panggailan :meth:`~django.views.generic.base.View.as_view` di URLconf::"

msgid ""
"While your class is instantiated for each request dispatched to it, class "
"attributes set through the :meth:`~django.views.generic.base.View.as_view` "
"entry point are configured only once at the time your URLs are imported."
msgstr ""
"Selagi kelas anda diinstasiasikan untuk setiap permintaan dikirimkan ke itu, "
"atribut kelas menyetel melalui titik masukan :meth:`~django.views.generic."
"base.View.as_view` dikonfigurasikan hanya sekali pada waktu URL anda diimpor."

msgid "Using mixins"
msgstr "Menggunakan mixin"

msgid ""
"Mixins are a form of multiple inheritance where behaviors and attributes of "
"multiple parent classes can be combined."
msgstr ""
"Mixin adalah sebuah formulit dari banyak warisan dimana perilaku dan atribut "
"dari banyak kelas-kelas induk dapat dipadukan"

msgid ""
"For example, in the generic class-based views there is a mixin called :class:"
"`~django.views.generic.base.TemplateResponseMixin` whose primary purpose is "
"to define the method :meth:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response`. When combined with the behavior of the :class:`~django."
"views.generic.base.View` base class, the result is a :class:`~django.views."
"generic.base.TemplateView` class that will dispatch requests to the "
"appropriate matching methods (a behavior defined in the ``View`` base "
"class), and that has a :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response` method that uses a :attr:`~django."
"views.generic.base.TemplateResponseMixin.template_name` attribute to return "
"a :class:`~django.template.response.TemplateResponse` object (a behavior "
"defined in the ``TemplateResponseMixin``)."
msgstr ""
"Sebagai contoh, di tampilan berdasarkan-kelas umum adalah sebuah mixin "
"dipanggil :class:`~django.views.generic.base.TemplateResponseMixin` yang "
"tujuan utamanya adalah menentukan metode :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response`. Ketika memadukan dengan perilaku "
"dari kelas dasar :class:`~django.views.generic.base.View`, hasil adalah "
"kelas :class:`~django.views.generic.base.TemplateView` yang akan mengirim "
"permintaan ke metode pencocokan sesuai (sebuah perilaku ditentukan di kelas "
"dasar ``View``), dan itu mempunyai sebuah metode :meth:`~django.views."
"generic.base.TemplateResponseMixin.render_to_response` yang menggunakan "
"sebuah atribut :attr:`~django.views.generic.base.TemplateResponseMixin."
"template_name` untuk mengembalikan sebuah obyek :class:`~django.template."
"response.TemplateResponse` (sebuah perilaku ditentukan di "
"``TemplateResponseMixin``)."

msgid ""
"Mixins are an excellent way of reusing code across multiple classes, but "
"they come with some cost. The more your code is scattered among mixins, the "
"harder it will be to read a child class and know what exactly it is doing, "
"and the harder it will be to know which methods from which mixins to "
"override if you are subclassing something that has a deep inheritance tree."
msgstr ""
"Mixin adalah sebuah cara istimewa dari menggunakan kembali kode terhadap "
"banyak kelas, tetapi mereka datang dengan beberapa biaya. Semakin kode anda "
"tersebar diantara mixin, semakin keras itu akan dibaca kelas anak dan "
"mengetahui apa yang sebenarnya itu lakukan, dan semakin keras itu akan "
"diketahui metode mana dari mixin mana untuk ditimpa jika anda mensubkelaskan "
"sesuatu yang mempunyai pohon warisan dalam."

msgid ""
"Note also that you can only inherit from one generic view - that is, only "
"one parent class may inherit from :class:`~django.views.generic.base.View` "
"and the rest (if any) should be mixins. Trying to inherit from more than one "
"class that inherits from ``View`` - for example, trying to use a form at the "
"top of a list and combining :class:`~django.views.generic.edit."
"ProcessFormView` and :class:`~django.views.generic.list.ListView` - won't "
"work as expected."
msgstr ""
"Catat juga bahwa anda dapat hanya mewarisi dari satu tampilan umum - yaitu, "
"hanya satu kelas induk mungkin mewarisi dari :class:`~django.views.generic."
"base.View` dan sisa (jika ada) harus berupa mixin. Mencoba mewarisi lebih "
"dari satu kelas yang mewarisi dari ``View`` - sebagai contoh, mencoba "
"menggunakan sebuah formulir pada atas dari daftar dan memadukan :class:"
"`~django.views.generic.edit.ProcessFormView` dan :class:`~django.views."
"generic.list.ListView` - tidak bekerja sesuai harapan."

msgid "Handling forms with class-based views"
msgstr "Menangani formulir dengan tampilan berdasarkan-kelas"

msgid ""
"A basic function-based view that handles forms may look something like this::"
msgstr ""
"Sebuah dasar tampilan berdasarkan-fungsi yang menangani formulir mungkin "
"terlihat sesuatu seperti ini::"

msgid "A similar class-based view might look like::"
msgstr "Tampilan berdasarkan-kelas yang mirip mungkin terlihat seperti::"

msgid ""
"This is a minimal case, but you can see that you would then have the option "
"of customizing this view by overriding any of the class attributes, e.g. "
"``form_class``, via URLconf configuration, or subclassing and overriding one "
"or more of the methods (or both!)."
msgstr ""

msgid "Decorating class-based views"
msgstr "Menghias tampilan berdasarkan-kelas"

msgid ""
"The extension of class-based views isn't limited to using mixins. You can "
"also use decorators. Since class-based views aren't functions, decorating "
"them works differently depending on if you're using ``as_view()`` or "
"creating a subclass."
msgstr ""
"Tambahan dari tampilan berdasarkan-kelas tidak terbatas menggunakan mixin. "
"Anda dapat juga menggunakan penghias. Sejak tampilan berdasarkan-kelas bukan "
"fungsi, mengias mereka bekerja secara berbeda tergantung pada jika anda "
"sedang menggunakan ``as_view()`` atau membuat sebuah subkelas."

msgid "Decorating in URLconf"
msgstr "Menghias URLconf"

msgid ""
"You can adjust class-based views by decorating the result of the :meth:"
"`~django.views.generic.base.View.as_view` method. The easiest place to do "
"this is in the URLconf where you deploy your view::"
msgstr ""

msgid ""
"This approach applies the decorator on a per-instance basis. If you want "
"every instance of a view to be decorated, you need to take a different "
"approach."
msgstr ""
"Pendekatan ini memberlakukan penghias pada dasar per-instance. Jika anda "
"ingin setiap instance dari tampilan dihias, anda butuh mengambil pendekatan "
"berbeda."

msgid "Decorating the class"
msgstr "Menghias kelas"

msgid ""
"To decorate every instance of a class-based view, you need to decorate the "
"class definition itself. To do this you apply the decorator to the :meth:"
"`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""
"Untuk menghias setiap instance dari tampilan berdasarkan-kelas, anda butuh "
"menghias pengertian kelas itu sendiri. Untuk melakukan ini anda berlakukan "
"penghias ke metode :meth:`~django.views.generic.base.View.dispatch` dari "
"kelas."

msgid ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform "
"it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. For example::"
msgstr ""
"Sebuah metode pada sebuah kelas tidak agak sama seperti fungsi berdiri "
"sendiri, jadi anda tidak hanya memberlakukan penghias fungsi ke metode -- "
"anda butuh merubah itu menjadi penghias metode dahulu. Penghias "
"``method_decorator`` merubah sebuah penghias  fungsi kedalam penghias metode "
"sehingga itu dapat digunakan pada metode instance. Sebagai contoh::"

msgid ""
"Or, more succinctly, you can decorate the class instead and pass the name of "
"the method to be decorated as the keyword argument ``name``::"
msgstr ""
"Atau, lebih ringkas, anda dapat menghias kelas dan melewatkan nama dari "
"metode untuk di hias sebagai argumen kata kunci ``name``::"

msgid ""
"If you have a set of common decorators used in several places, you can "
"define a list or tuple of decorators and use this instead of invoking "
"``method_decorator()`` multiple times. These two classes are equivalent::"
msgstr ""
"Jika anda mempunyai sekumpulan penghias umum digunakan di beberapa tempat, "
"anda dapat menentukan daftar atau tuple dari penghias dan menggunakan ini "
"sebagai gantinya meminta ``method_decorator()`` berulang kali. Kedua kelas "
"ini adalah setara::"

msgid ""
"The decorators will process a request in the order they are passed to the "
"decorator. In the example, ``never_cache()`` will process the request before "
"``login_required()``."
msgstr ""
"Penghias akan mengolah sebuah permintaan dalam urutan mereka dilewatkan ke "
"penghias. Dalam contoh, ``never_cache()`` akan mengolah permintaan sebelum "
"``login_required()``."

msgid ""
"In this example, every instance of ``ProtectedView`` will have login "
"protection. These examples use ``login_required``, however, the same "
"behavior can be obtained by using :class:`~django.contrib.auth.mixins."
"LoginRequiredMixin`."
msgstr ""

msgid ""
"``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the "
"decorated method on the class. If your method does not accept a compatible "
"set of parameters it will raise a ``TypeError`` exception."
msgstr ""
"``method_decorator`` melewatkan ``*args`` dan ``**kwargs`` sebagai parameter "
"untuk menghiasi metode pada kelas. Jika metode anda tidak menerima "
"sekumpulan cocok dari parameter itu akan memunculkan sebuah pengecualian "
"``TypeError``."

msgid "Using mixins with class-based views"
msgstr "Menggunakan mixin dengan tampilan berdasarkan-kelas"

msgid ""
"This is an advanced topic. A working knowledge of :doc:`Django's class-based "
"views<index>` is advised before exploring these techniques."
msgstr ""
"Ini adalah sebuah topik lanjut. Sebuah pengetahuan dari :doc:`Django's class-"
"based views<index>` disarankan sebelum menjelajahi teknik-teknis ini."

msgid ""
"Django's built-in class-based views provide a lot of functionality, but some "
"of it you may want to use separately. For instance, you may want to write a "
"view that renders a template to make the HTTP response, but you can't use :"
"class:`~django.views.generic.base.TemplateView`; perhaps you need to render "
"a template only on ``POST``, with ``GET`` doing something else entirely. "
"While you could use :class:`~django.template.response.TemplateResponse` "
"directly, this will likely result in duplicate code."
msgstr ""
"Tampilan berdasarkan-kelas siap-pakai Django menyediakan banyak "
"fungsionalitas, tetapi beberapa dari itu anda mungkin ingin menggunakannya "
"terpisah. Sebagai contoh, anda mungkin ingin menulis sebuah tampilan yang "
"membangun cetakan untuk membuat tanggapan HTTP, tetapi anda tidak dapat "
"menggunakan :class:`~django.views.generic.base.TemplateView`; mungkin anda "
"butuh membangun cetakan hanya pada ``POST``, dengan ``GET`` melakukan "
"sesuatu lain seluruhnya. Selagi anda dapat menggunakan :class:`~django."
"template.response.TemplateResponse` langsung, ini akan kemungkinan hasil di "
"kode ganda."

msgid ""
"For this reason, Django also provides a number of mixins that provide more "
"discrete functionality. Template rendering, for instance, is encapsulated in "
"the :class:`~django.views.generic.base.TemplateResponseMixin`. The Django "
"reference documentation contains :doc:`full documentation of all the mixins</"
"ref/class-based-views/mixins>`."
msgstr ""
"Untuk alasan ini, Django juga menyediakan sejumlah mixin yang menyediakan "
"fungsionalitas diskrit lebih. Pembangunan cetakan, sebagai contoh, "
"dienkapsulasi di :class:`~django.views.generic.base.TemplateResponseMixin`. "
"Dokumentasi acuan Django mengandung :doc:`full documentation of all the "
"mixins</ref/class-based-views/mixins>`."

msgid "Context and template responses"
msgstr "Tanggapan koteks dan cetakan"

msgid ""
"Two central mixins are provided that help in providing a consistent "
"interface to working with templates in class-based views."
msgstr ""
"Dua mixin pusat disediakan yang membantu dalam antarmuka tetap untuk bekerja "
"dengan cetakan di tampilan berdasarkan-kelas."

msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ":class:`~django.views.generic.base.TemplateResponseMixin`"

msgid ""
"Every built in view which returns a :class:`~django.template.response."
"TemplateResponse` will call the :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response()` method that "
"``TemplateResponseMixin`` provides. Most of the time this will be called for "
"you (for instance, it is called by the ``get()`` method implemented by both :"
"class:`~django.views.generic.base.TemplateView` and :class:`~django.views."
"generic.detail.DetailView`); similarly, it's unlikely that you'll need to "
"override it, although if you want your response to return something not "
"rendered via a Django template then you'll want to do it. For an example of "
"this, see the :ref:`JSONResponseMixin example <jsonresponsemixin-example>`."
msgstr ""
"Setiap tampilan siap pakai yang mengembalikan :class:`~django.template."
"response.TemplateResponse` akan memanggil metode :meth:`~django.views."
"generic.base.TemplateResponseMixin.render_to_response()` yang "
"``TemplateResponseMixin`` sediakan. Kebanyakan dari waktu ini akan dipanggil "
"untuk anda (sebagai contoh, itu dipanggil oleh metode ``get()`` diterapkan "
"oleh kedua :class:`~django.views.generic.base.TemplateView` and :class:"
"`~django.views.generic.detail.DetailView`); demikian pula, itu tidak mungkin "
"anda butuh menimpa itu, meskipun jika anda ingin tanggapan anda "
"mengembalikan sesuatu tidak dibangun melalui cetakan Django kemudian anda "
"akan ingin melakukan itu. Sebagai contoh dari ini, lihat :ref:"
"`JSONResponseMixin example <jsonresponsemixin-example>`."

msgid ""
"``render_to_response()`` itself calls :meth:`~django.views.generic.base."
"TemplateResponseMixin.get_template_names`, which by default will look up :"
"attr:`~django.views.generic.base.TemplateResponseMixin.template_name` on the "
"class-based view; two other mixins (:class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` and :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`) override this to provide more flexible "
"defaults when dealing with actual objects."
msgstr ""

msgid ":class:`~django.views.generic.base.ContextMixin`"
msgstr ":class:`~django.views.generic.base.ContextMixin`"

msgid ""
"Every built in view which needs context data, such as for rendering a "
"template (including ``TemplateResponseMixin`` above), should call :meth:"
"`~django.views.generic.base.ContextMixin.get_context_data()` passing any "
"data they want to ensure is in there as keyword arguments. "
"``get_context_data()`` returns a dictionary; in ``ContextMixin`` it returns "
"its keyword arguments, but it is common to override this to add more members "
"to the dictionary. You can also use the :attr:`~django.views.generic.base."
"ContextMixin.extra_context` attribute."
msgstr ""

msgid "Building up Django's generic class-based views"
msgstr "Membangun tampilan berdasarkan-kelas umum Django"

msgid ""
"Let's look at how two of Django's generic class-based views are built out of "
"mixins providing discrete functionality. We'll consider :class:`~django."
"views.generic.detail.DetailView`, which renders a \"detail\" view of an "
"object, and :class:`~django.views.generic.list.ListView`, which will render "
"a list of objects, typically from a queryset, and optionally paginate them. "
"This will introduce us to four mixins which between them provide useful "
"functionality when working with either a single Django object, or multiple "
"objects."
msgstr ""
"Mari kita lihat bagaimana tampilan berdasarkan-kelas umum Django adalah "
"membangun dari mixin disediakan fungsionalitas diskrit. Kami akan "
"mempertimbangkan :class:`~django.views.generic.detail.DetailView`, yang "
"membangun tampilan \"detail\" dari sebuah obyek, dan :class:`~django.views."
"generic.list.ListView`, yang akan membangun sebuah daftar dari obyek, "
"khususnya dari queryset, dan pilihannya memberi nomor mereka. Ini akan "
"memperkenalkan kita untuk empat mixin yang diantara mereka menyediakan "
"fungsionalitas berguna dengan antara obyek Django tunggal, atau banyak obyek."

msgid ""
"There are also mixins involved in the generic edit views (:class:`~django."
"views.generic.edit.FormView`, and the model-specific views :class:`~django."
"views.generic.edit.CreateView`, :class:`~django.views.generic.edit."
"UpdateView` and :class:`~django.views.generic.edit.DeleteView`), and in the "
"date-based generic views. These are covered in the :doc:`mixin reference "
"documentation</ref/class-based-views/mixins>`."
msgstr ""
"Ada juga mixin terlibat di tampilan sunting umum (:class:`~django.views."
"generic.edit.FormView`, dan tampilan model-tertentu :class:`~django.views."
"generic.edit.CreateView`, :class:`~django.views.generic.edit.UpdateView` "
"dan :class:`~django.views.generic.edit.DeleteView`), dan di tampilan umum "
"berdasarkan-tanggal. Ini dicakupi di :doc:`mixin reference documentation</"
"ref/class-based-views/mixins>`."

msgid "``DetailView``: working with a single Django object"
msgstr "``DetailView``: bekerja dengan obyek tunggal Django"

msgid ""
"To show the detail of an object, we basically need to do two things: we need "
"to look up the object and then we need to make a :class:`~django.template."
"response.TemplateResponse` with a suitable template, and that object as "
"context."
msgstr ""
"Untuk menunjukkan rincian dari sebuah obyek, kami dasarnya butuh melakukan "
"dua hal: kami butuh mencari obyek dan kemudian kami butuh membuat :class:"
"`~django.template.response.TemplateResponse` dengan cetakan yang cocok, dan "
"obyek itu sebagai konteks."

msgid ""
"To get the object, :class:`~django.views.generic.detail.DetailView` relies "
"on :class:`~django.views.generic.detail.SingleObjectMixin`, which provides "
"a :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` method "
"that figures out the object based on the URL of the request (it looks for "
"``pk`` and ``slug`` keyword arguments as declared in the URLConf, and looks "
"the object up either from the :attr:`~django.views.generic.detail."
"SingleObjectMixin.model` attribute on the view, or the :attr:`~django.views."
"generic.detail.SingleObjectMixin.queryset` attribute if that's provided). "
"``SingleObjectMixin`` also overrides :meth:`~django.views.generic.base."
"ContextMixin.get_context_data()`, which is used across all Django's built in "
"class-based views to supply context data for template renders."
msgstr ""
"Untuk mendapatkan obyek, :class:`~django.views.generic.detail.DetailView` "
"bergantung pada :class:`~django.views.generic.detail.SingleObjectMixin`, "
"yang menyediakan sebuah metode :meth:`~django.views.generic.detail."
"SingleObjectMixin.get_object` yang mencari tahu berdasarkan obyek pada URL "
"dari permintaan (itu sepertinya untuk argumen kata kunci ``pk`` dan ``slug`` "
"seperti dinyatakan di URLConf, dan mencari obyek antara dari atribut :attr:"
"`~django.views.generic.detail.SingleObjectMixin.model` pada tampilan, atau "
"atribut :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` jika "
"itu disediakan). ``SingleObjectMixin`` juga menimpa :meth:`~django.views."
"generic.base.ContextMixin.get_context_data()`, yang digunakan terhadap semua "
"tampilan siap-pakai Django untuk memasok data konteks untuk membangun "
"cetakan."

msgid ""
"To then make a :class:`~django.template.response.TemplateResponse`, :class:"
"`DetailView` uses :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`, which extends :class:`~django.views."
"generic.base.TemplateResponseMixin`, overriding :meth:`~django.views.generic."
"base.TemplateResponseMixin.get_template_names()` as discussed above. It "
"actually provides a fairly sophisticated set of options, but the main one "
"that most people are going to use is ``<app_label>/<model_name>_detail."
"html``. The ``_detail`` part can be changed by setting :attr:`~django.views."
"generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` on a "
"subclass to something else. (For instance, the :doc:`generic edit "
"views<generic-editing>` use ``_form`` for create and update views, and "
"``_confirm_delete`` for delete views.)"
msgstr ""
"Untuk kemudian sebuah :class:`~django.template.response.TemplateResponse`, :"
"class:`DetailView` menggunakan :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`, yang memperpanjang :class:`~django.views."
"generic.base.TemplateResponseMixin`, menimpa :meth:`~django.views.generic."
"base.TemplateResponseMixin.get_template_names()` seperti diobrolkan diatas. "
"Itu sebenarnya menyediakan kumpulan cukup canggih pilihan, tetapi satu utama "
"yang paling orang akan gunakan adalah ``<app_label>/<model_name>_detail."
"html``. Bagian ``_detail`` dapat dirubah dengan mengatur :attr:`~django."
"views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` "
"pada subkelas atau sesuatu lain. (Sebagai contoh,  :doc:`generic edit "
"views<generic-editing>` menggunakan ``_form`` untuk membuat dan "
"memperbaharui tampilan, dan ``_confirm_delete`` untuk tampilan menghapus.)"

msgid "``ListView``: working with many Django objects"
msgstr "``ListView``: bekerja dengan banyak obyek Django"

msgid ""
"Lists of objects follow roughly the same pattern: we need a (possibly "
"paginated) list of objects, typically a :class:`~django.db.models.query."
"QuerySet`, and then we need to make a :class:`~django.template.response."
"TemplateResponse` with a suitable template using that list of objects."
msgstr ""
"Daftar dari obyek mengikuti kurang lebih pola sama: kami butuh sebuah "
"(kemungkinan diberikan nomor) daftar obyek, khususnya sebuah :class:`~django."
"db.models.query.QuerySet`, dan kemudian kami butuh membuat sebuah :class:"
"`~django.template.response.TemplateResponse` dengan cetakan cocok "
"menggunakan daftar itu dari obyek."

msgid ""
"To get the objects, :class:`~django.views.generic.list.ListView` uses :class:"
"`~django.views.generic.list.MultipleObjectMixin`, which provides both :meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_queryset` and :meth:"
"`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`. Unlike "
"with :class:`~django.views.generic.detail.SingleObjectMixin`, there's no "
"need to key off parts of the URL to figure out the queryset to work with, so "
"the default uses the :attr:`~django.views.generic.list.MultipleObjectMixin."
"queryset` or :attr:`~django.views.generic.list.MultipleObjectMixin.model` "
"attribute on the view class. A common reason to override :meth:`~django."
"views.generic.list.MultipleObjectMixin.get_queryset` here would be to "
"dynamically vary the objects, such as depending on the current user or to "
"exclude posts in the future for a blog."
msgstr ""

msgid ""
":class:`~django.views.generic.list.MultipleObjectMixin` also overrides :meth:"
"`~django.views.generic.base.ContextMixin.get_context_data()` to include "
"appropriate context variables for pagination (providing dummies if "
"pagination is disabled). It relies on ``object_list`` being passed in as a "
"keyword argument, which :class:`ListView` arranges for it."
msgstr ""
":class:`~django.views.generic.list.MultipleObjectMixin` juga menimpa :meth:"
"`~django.views.generic.base.ContextMixin.get_context_data()` untuk "
"menyertakan variabel konteks sesuai untuk penomoran halaman (menyediakan "
"contoh jika penomoran halaman ditiadakan). Itu bergantung pada "
"11object_list`` dilewatkan di sebuah argumen kata kunci, yang :class:"
"`ListView` mengatur untuk itu."

msgid ""
"To make a :class:`~django.template.response.TemplateResponse`, :class:"
"`ListView` then uses :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`; as with :class:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin` above, this overrides "
"``get_template_names()`` to provide :meth:`a range of options <django.views."
"generic.list.MultipleObjectTemplateResponseMixin>`, with the most commonly-"
"used being ``<app_label>/<model_name>_list.html``, with the ``_list`` part "
"again being taken from the :attr:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin.template_name_suffix` attribute. (The "
"date based generic views use suffixes such as ``_archive``, "
"``_archive_year`` and so on to use different templates for the various "
"specialized date-based list views.)"
msgstr ""
"Untuk membuat sebuah :class:`~django.template.response.TemplateResponse`, :"
"class:`ListView` kemudian menggunakan :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`; seperti :class:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin` diatas, ini menimpa "
"``get_template_names()`` untuk menyediakan :meth:`a range of options <django."
"views.generic.list.MultipleObjectTemplateResponseMixin>`, yang paling "
"digunakan-umum berwujud ``<app_label>/<model_name>_list.html``, dengan "
"bagian ``_list`` kembali diambil dari atribut :attr:`~django.views.generic."
"list.MultipleObjectTemplateResponseMixin.template_name_suffix`. (Tampilan "
"umum berdasarkan tanggal menggunakan akhiran seperti ``_archive``, "
"``_archive_year`` dan sebagainya untuk menggunakan cetakan berbeda untuk "
"beragam tampilan daftar berdasarkan-tanggal khusus.)"

msgid "Using Django's class-based view mixins"
msgstr "Menggunakan mixin tampilan berdasarkan-kelas Django"

msgid ""
"Now we've seen how Django's generic class-based views use the provided "
"mixins, let's look at other ways we can combine them. We're still going to "
"be combining them with either built-in class-based views, or other generic "
"class-based views, but there are a range of rarer problems you can solve "
"than are provided for by Django out of the box."
msgstr ""

msgid ""
"Not all mixins can be used together, and not all generic class based views "
"can be used with all other mixins. Here we present a few examples that do "
"work; if you want to bring together other functionality then you'll have to "
"consider interactions between attributes and methods that overlap between "
"the different classes you're using, and how `method resolution order`_ will "
"affect which versions of the methods will be called in what order."
msgstr ""
"Tidak semua mixin dapat digunakan bersama-sama, dan tidak semua tampilan "
"berdasarkan kelas umum dapat digunakan dengan semua mixin lain. Disini kami "
"menghadirkan beberapa contoh yang melakukan pekerjaan; jika anda ingin "
"membawa bersama-sama fungsionalitas lain kemudian anda akan harus "
"mempertimbangkan interaksi diantara atribut dan metode yang tumpang tindih "
"diantara kelas-kelas berbeda anda sedang gunakan, dan bagaimana `method "
"resolution order`_ akan mempengaruhi versi mana dari metode akan dipanggil "
"di urutan apa."

msgid ""
"The reference documentation for Django's :doc:`class-based views</ref/class-"
"based-views/index>` and :doc:`class-based view mixins</ref/class-based-views/"
"mixins>` will help you in understanding which attributes and methods are "
"likely to cause conflict between different classes and mixins."
msgstr ""
"Acuan dokumentasi untuk :doc:`class-based views</ref/class-based-views/"
"index>` dan :doc:`class-based view mixins</ref/class-based-views/mixins>` "
"Django akan membantu anda dalam memahami atribut dan metode mana mungkin "
"menyebabkan pertentangan diantara kelas dan mixin berbeda."

msgid ""
"If in doubt, it's often better to back off and base your work on :class:"
"`View` or :class:`TemplateView`, perhaps with :class:`~django.views.generic."
"detail.SingleObjectMixin` and :class:`~django.views.generic.list."
"MultipleObjectMixin`. Although you will probably end up writing more code, "
"it is more likely to be clearly understandable to someone else coming to it "
"later, and with fewer interactions to worry about you will save yourself "
"some thinking. (Of course, you can always dip into Django's implementation "
"of the generic class-based views for inspiration on how to tackle problems.)"
msgstr ""
"Jika ragu, itu sering lebih baik mundur dan dasarkan pekerjaan anda pada :"
"class:`View` atau :class:`TemplateView`, mungkin dengan :class:`~django."
"views.generic.detail.SingleObjectMixin` dan :class:`~django.views.generic."
"list.MultipleObjectMixin`. Meskipun anda akan mungkin mengakhiri menulis "
"kode lebih, itu lebih mungkin jelas dapat dimengerti pada seseorang lain "
"datang ke itu kemudian, dan dengan sedikit interaksi untuk khawatir tentang "
"anda akan menyimpan beberapa pemikiran anda sendiri. (Tentu saja, anda dapat "
"selalu mempelajari kedalam penerapan Django dari tampilan berdasarkan-kelas "
"umum untuk ilham pada bagaimana memecahkan masalah.)"

msgid "Using ``SingleObjectMixin`` with View"
msgstr "Menggunakan ``SingleObjectMixin`` dengan View"

msgid ""
"If we want to write a class-based view that responds only to ``POST``, we'll "
"subclass :class:`~django.views.generic.base.View` and write a ``post()`` "
"method in the subclass. However if we want our processing to work on a "
"particular object, identified from the URL, we'll want the functionality "
"provided by :class:`~django.views.generic.detail.SingleObjectMixin`."
msgstr ""

msgid ""
"We'll demonstrate this with the ``Author`` model we used in the :doc:"
"`generic class-based views introduction<generic-display>`."
msgstr ""
"Kami akan mempertunjukkan ini dengan model ``Author`` kami gunakan di :doc:"
"`generic class-based views introduction<generic-display>`."

msgid ""
"In practice you'd probably want to record the interest in a key-value store "
"rather than in a relational database, so we've left that bit out. The only "
"bit of the view that needs to worry about using :class:`~django.views."
"generic.detail.SingleObjectMixin` is where we want to look up the author "
"we're interested in, which it does with a call to ``self.get_object()``. "
"Everything else is taken care of for us by the mixin."
msgstr ""

msgid "We can hook this into our URLs easily enough:"
msgstr "Kami dapat menghubungkan kedalam URL kami dengan cukup mudah:"

msgid ""
"Note the ``pk`` named group, which :meth:`~django.views.generic.detail."
"SingleObjectMixin.get_object` uses to look up the ``Author`` instance. You "
"could also use a slug, or any of the other features of :class:`~django.views."
"generic.detail.SingleObjectMixin`."
msgstr ""
"Catat kelompok bernama ``pk``, yang :meth:`~django.views.generic.detail."
"SingleObjectMixin.get_object` menggunakan untuk mencari instance ``Author``. "
"Anda dapat juga menggunakan sebuah keong, atau apapun dari fitur-fitur lain "
"dari :class:`~django.views.generic.detail.SingleObjectMixin`."

msgid "Using ``SingleObjectMixin`` with ``ListView``"
msgstr "Menggunakan ``SingleObjectMixin`` dengan ``ListView``"

msgid ""
":class:`~django.views.generic.list.ListView` provides built-in pagination, "
"but you might want to paginate a list of objects that are all linked (by a "
"foreign key) to another object. In our publishing example, you might want to "
"paginate through all the books by a particular publisher."
msgstr ""
":class:`~django.views.generic.list.ListView` menyediakan penomoran siap-"
"pakai, tetapi anda mungkin ingin memberi nomor daftar dari obyek yang semua "
"terkait (oleh foreign key) ke obyek lain. Di contoh penerbitan kami, anda "
"mungkin ingin memberi nomor melalui semua buku-buku oleh penerbit tertentu."

msgid ""
"One way to do this is to combine :class:`ListView` with :class:`~django."
"views.generic.detail.SingleObjectMixin`, so that the queryset for the "
"paginated list of books can hang off the publisher found as the single "
"object. In order to do this, we need to have two different querysets:"
msgstr ""
"Satu cara melakukan ini adalah memadukan :class:`ListView` dengan :class:"
"`~django.views.generic.detail.SingleObjectMixin`, sehingga queryset untuk "
"memberi nomor halaman dari buku dapat  menggantung penerbit ditemukan "
"sebagai obyek tunggal. Untuk melakukan ini, kami butuh memiliki dua queryset "
"berbeda:"

msgid ""
"``Book`` queryset for use by :class:`~django.views.generic.list.ListView`"
msgstr ""
"Queryset ``Book`` untuk digunakan oleh :class:`~django.views.generic.list."
"ListView`"

msgid ""
"Since we have access to the ``Publisher`` whose books we want to list, we "
"override ``get_queryset()`` and use the ``Publisher``’s :ref:`reverse "
"foreign key manager<backwards-related-objects>`."
msgstr ""

msgid ""
"``Publisher`` queryset for use in :meth:`~django.views.generic.detail."
"SingleObjectMixin.get_object()`"
msgstr ""
"Queryset ``Publisher`` untuk digunakan di :meth:`~django.views.generic."
"detail.SingleObjectMixin.get_object()`"

msgid ""
"We'll rely on the default implementation of ``get_object()`` to fetch the "
"correct ``Publisher`` object. However, we need to explicitly pass a "
"``queryset`` argument because otherwise the default implementation of "
"``get_object()`` would call ``get_queryset()`` which we have overridden to "
"return ``Book`` objects instead of ``Publisher`` ones."
msgstr ""
"Kami akan bergantung pada penerapan awalan dari ``get_object()`` untuk "
"mengambil obyek ``Publisher`` benar. Bagaimanapun, kami butuh jelas "
"melewatkan sebuah argumen ``queryset`` karena jika tidak penerapan awalan "
"dari ``get_object()`` akan memanggil ``get_queryset()`` yang kami telah "
"timpa untuk mengembalikan obyek ``Book`` daripada ``Publisher``."

msgid ""
"We have to think carefully about ``get_context_data()``. Since both :class:"
"`~django.views.generic.detail.SingleObjectMixin` and :class:`ListView` will "
"put things in the context data under the value of ``context_object_name`` if "
"it's set, we'll instead explicitly ensure the ``Publisher`` is in the "
"context data. :class:`ListView` will add in the suitable ``page_obj`` and "
"``paginator`` for us providing we remember to call ``super()``."
msgstr ""
"Kami harus berpikir hati-hati tentang ``get_context_data()``. Sejak kedua :"
"class:`~django.views.generic.detail.SingleObjectMixin` dan :class:`ListView` "
"akan menaruh hal-hal dalam data konteks dibawah nilai dari "
"``context_object_name`` jika itu disetel, kami akan jelas memastikan "
"``Publisher`` adalah dalam data konteks. :class:`ListView` akan menambah "
"dalam ``page_obj`` dan ``paginator`` cocok untuk kami menyediakan kami ingat "
"memanggil ``super()``."

msgid "Now we can write a new ``PublisherDetailView``::"
msgstr "Sekarang kami dapat menulis ``PublisherDetailView`` baru::"

msgid ""
"Notice how we set ``self.object`` within ``get()`` so we can use it again "
"later in ``get_context_data()`` and ``get_queryset()``. If you don't set "
"``template_name``, the template will default to the normal :class:`ListView` "
"choice, which in this case would be ``\"books/book_list.html\"`` because "
"it's a list of books; :class:`ListView` knows nothing about :class:`~django."
"views.generic.detail.SingleObjectMixin`, so it doesn't have any clue this "
"view is anything to do with a ``Publisher``."
msgstr ""
"Perhatikan bagaimana kami menyetel ``self.object`` dalam ``get()`` jadi kami "
"dapat menggunakan itu kembali kemudian dalam ``get_context_data()`` dan "
"``get_queryset()``. Jika anda tidak menyetel ``template_name``, cetakan akan "
"awalan menjadi pilihan :class:`ListView` biasa, yang dalam kasus ini akan "
"menjadi ``\"books/book_list.html\"`` karena itu adalah daftar dari buku-"
"buku; :class:`ListView` tidak mengetahui apapun tentang :class:`~django."
"views.generic.detail.SingleObjectMixin`, jadi itu tidak mempunyai petunjuk "
"tampilan ini adalah hubungannya dengan ``Publisher``. "

msgid ""
"The ``paginate_by`` is deliberately small in the example so you don't have "
"to create lots of books to see the pagination working! Here's the template "
"you'd want to use:"
msgstr ""
"``paginate_by`` sengaja kecil dalam contoh sehingga anda tidak perlu membuat "
"banyak buku untuk melihat penomoran halaman bekerja! Ini adalah cetakan anda "
"ingin gunakan:"

msgid "Avoid anything more complex"
msgstr "Hindari apapun lebih rumit"

msgid ""
"Generally you can use :class:`~django.views.generic.base."
"TemplateResponseMixin` and :class:`~django.views.generic.detail."
"SingleObjectMixin` when you need their functionality. As shown above, with a "
"bit of care you can even combine ``SingleObjectMixin`` with :class:`~django."
"views.generic.list.ListView`. However things get increasingly complex as you "
"try to do so, and a good rule of thumb is:"
msgstr ""
"Umumnya anda dapat gunakan :class:`~django.views.generic.base."
"TemplateResponseMixin` dan :class:`~django.views.generic.detail."
"SingleObjectMixin` ketika anda butuh fungsionalitas mereka. Seperti "
"ditunjukkan diatas, dengan sedikit perawatan anda dapat bahkan memadukan "
"``SingleObjectMixin`` dengan :class:`~django.views.generic.list.ListView`. "
"Bagaimanapun hal-hal meningkat semakin rumit ketika anda mencoba "
"melakukannya, dan aturan bagus dari ibu jari adalah:"

msgid ""
"Each of your views should use only mixins or views from one of the groups of "
"generic class-based views: :doc:`detail, list<generic-display>`, :doc:"
"`editing<generic-editing>` and date. For example it's fine to combine :class:"
"`TemplateView` (built in view) with :class:`~django.views.generic.list."
"MultipleObjectMixin` (generic list), but you're likely to have problems "
"combining ``SingleObjectMixin`` (generic detail) with "
"``MultipleObjectMixin`` (generic list)."
msgstr ""
"Setiap tampilan anda harus menggunakan hanya mixin atau tampilan dari saru "
"dari kelompok dari tampilan berdasarkan-kelas umum: :doc:`detail, "
"list<generic-display>`, :doc:`editing<generic-editing>` dan tanggal. Sebagai "
"contoh itu adalah baik memadukan :class:`TemplateView` (tampilan siap pakai) "
"dengan :class:`~django.views.generic.list.MultipleObjectMixin` (daftar "
"umum), tetapi anda mungkin memiliki masalah memadukan ``SingleObjectMixin`` "
"(rincian umum) dengan ``MultipleObjectMixin`` (daftar umum)."

msgid ""
"To show what happens when you try to get more sophisticated, we show an "
"example that sacrifices readability and maintainability when there is a "
"simpler solution. First, let's look at a naive attempt to combine :class:"
"`~django.views.generic.detail.DetailView` with :class:`~django.views.generic."
"edit.FormMixin` to enable us to ``POST`` a Django :class:`~django.forms."
"Form` to the same URL as we're displaying an object using :class:"
"`DetailView`."
msgstr ""
"Untuk menunjukkan apa yang terjadi ketika anda mencoba mendapatkan lebih "
"mutakhir, kami menunjukkan sebuah contoh yang mengorbankan kesiapan dan "
"rawatan ketika ada pemecahan termudah. Pertama, mari kita lihat usaha naif "
"untuk memadukan :class:`~django.views.generic.detail.DetailView` dengan :"
"class:`~django.views.generic.edit.FormMixin` untuk mengadakan kami pada "
"``POST`` sebuah :class:`~django.forms.Form` Django ke URL sama ketika kami "
"sedang memperlihatkan sebuah obyek menggunakan :class:`DetailView`."

msgid "Using ``FormMixin`` with ``DetailView``"
msgstr "Menggunakan ``FormMixin`` dengan ``DetailView``"

msgid ""
"Think back to our earlier example of using :class:`View` and :class:`~django."
"views.generic.detail.SingleObjectMixin` together. We were recording a user's "
"interest in a particular author; say now that we want to let them leave a "
"message saying why they like them. Again, let's assume we're not going to "
"store this in a relational database but instead in something more esoteric "
"that we won't worry about here."
msgstr ""
"Berpikir kembali ke contoh paling awal dari menggunakan :class:`View` dan :"
"class:`~django.views.generic.detail.SingleObjectMixin` bersama-sama. Kami "
"sedang merekam sebuah minat pengguna dalam penulis tertentu; katakan "
"sekarang yang kami ingin membiarkan mereka meninggalkan pesan mengatakan "
"mengapa mereka menyukainya. Kembali, mari kita anggap tidak menyimpan ini "
"dalam basisdata hubungan tetapi sebagai gantinya di lebih esoterik yang kami "
"tidak akan khawatir disini."

msgid ""
"At this point it's natural to reach for a :class:`~django.forms.Form` to "
"encapsulate the information sent from the user's browser to Django. Say also "
"that we're heavily invested in `REST`_, so we want to use the same URL for "
"displaying the author as for capturing the message from the user. Let's "
"rewrite our ``AuthorDetailView`` to do that."
msgstr ""
"Pada titik ini itu adalah alamiah mencapai untuk :class:`~django.forms.Form` "
"untuk mengenkapsulasi informasi dikirim dari peramban pengguna pada Django. "
"Katakan juga bahwa kami melakukan investasi di `REST`_, jadi kami ingin "
"menggunakan URL sama untuk memperlihatkan penulis sebagai untuk menangkap "
"pesan dar pengguna. Mari kita menulis kembali ``AuthorDetailView`` kami "
"untuk melakukan itu."

msgid ""
"We'll keep the ``GET`` handling from :class:`DetailView`, although we'll "
"have to add a :class:`~django.forms.Form` into the context data so we can "
"render it in the template. We'll also want to pull in form processing from :"
"class:`~django.views.generic.edit.FormMixin`, and write a bit of code so "
"that on ``POST`` the form gets called appropriately."
msgstr ""
"Kami akan menjaga penanganan ``GET`` dari :class:`DetailView`, meskipun kami "
"akan harus menambah :class:`~django.forms.Form` kedalam data konteks jadi "
"kami dapat mengirim itu dalam cetakan. Kami akan juga ingin menarik dalam "
"pengolahan formulir :class:`~django.views.generic.edit.FormMixin`, dan "
"menulis sedikit kode sehingga pada ``POST`` formulir mendapatkan panggilan "
"yang sesuai."

msgid ""
"We use :class:`~django.views.generic.edit.FormMixin` and implement "
"``post()`` ourselves rather than try to mix :class:`DetailView` with :class:"
"`FormView` (which provides a suitable ``post()`` already) because both of "
"the views implement ``get()``, and things would get much more confusing."
msgstr ""
"Kami menggunakan :class:`~django.views.generic.edit.FormMixin` dan "
"menerapkan ``post()`` kami sendiri daripada mencoba mencampur :class:"
"`DetailView` dengan :class:`FormView` (yang menyediakan sudah ``post()`` "
"cocok) karena kedua dari tampilan menerapkan ``get()``, dan hal-hal akan "
"menjadi lebih membingungkan."

msgid "Our new ``AuthorDetailView`` looks like this::"
msgstr "``AuthorDetailView`` kami yang baru terlihat seperti ini::"

msgid ""
"``get_success_url()`` provides somewhere to redirect to, which gets used in "
"the default implementation of ``form_valid()``. We have to provide our own "
"``post()`` as noted earlier."
msgstr ""

msgid "A better solution"
msgstr "Pemecahan terbaik"

msgid ""
"The number of subtle interactions between :class:`~django.views.generic.edit."
"FormMixin` and :class:`DetailView` is already testing our ability to manage "
"things. It's unlikely you'd want to write this kind of class yourself."
msgstr ""

msgid ""
"In this case, you could write the ``post()`` method yourself, keeping :class:"
"`DetailView` as the only generic functionality, although writing :class:"
"`~django.forms.Form` handling code involves a lot of duplication."
msgstr ""

msgid ""
"Alternatively, it would still be less work than the above approach to have a "
"separate view for processing the form, which could use :class:`~django.views."
"generic.edit.FormView` distinct from :class:`DetailView` without concerns."
msgstr ""

msgid "An alternative better solution"
msgstr "Sebuah pilihan lain pemecahan terbaik"

msgid ""
"What we're really trying to do here is to use two different class based "
"views from the same URL. So why not do just that? We have a very clear "
"division here: ``GET`` requests should get the :class:`DetailView` (with "
"the :class:`~django.forms.Form` added to the context data), and ``POST`` "
"requests should get the :class:`FormView`. Let's set up those views first."
msgstr ""
"Apa kami sedang coba lakukan disini adalah menggunakan dua kelas bebeda "
"berdasarkan tampilan dari URL sama. Jadi mengapa tidak lakukan hal itu? Kami "
"mempunyai pembagian sangat jelas disini: permintaan ``GET`` harus "
"mendapatkan :class:`DetailView` (dengan :class:`~django.forms.Form` "
"ditambahkan ke data konteks), dan permintaan ``POST`` harus mendapatkan :"
"class:`FormView`. Mari kita menyetek tampilan tersebut dahulu."

msgid ""
"The ``AuthorDetailView`` view is almost the same as :ref:`when we first "
"introduced AuthorDetailView<generic-views-extra-work>`; we have to write our "
"own ``get_context_data()`` to make the ``AuthorInterestForm`` available to "
"the template. We'll skip the ``get_object()`` override from before for "
"clarity::"
msgstr ""

msgid ""
"Then the ``AuthorInterestForm`` is a :class:`FormView`, but we have to bring "
"in :class:`~django.views.generic.detail.SingleObjectMixin` so we can find "
"the author we're talking about, and we have to remember to set "
"``template_name`` to ensure that form errors will render the same template "
"as ``AuthorDetailView`` is using on ``GET``::"
msgstr ""

msgid ""
"Finally we bring this together in a new ``AuthorView`` view. We already know "
"that calling :meth:`~django.views.generic.base.View.as_view()` on a class-"
"based view gives us something that behaves exactly like a function based "
"view, so we can do that at the point we choose between the two subviews."
msgstr ""

msgid ""
"You can pass through keyword arguments to :meth:`~django.views.generic.base."
"View.as_view()` in the same way you would in your URLconf, such as if you "
"wanted the ``AuthorInterestFormView`` behavior to also appear at another URL "
"but using a different template::"
msgstr ""

msgid ""
"This approach can also be used with any other generic class-based views or "
"your own class-based views inheriting directly from :class:`View` or :class:"
"`TemplateView`, as it keeps the different views as separate as possible."
msgstr ""
"Pendekatan ini dapat juga digunakan dengan tampilan berdasarkan-kelas umum "
"lainnya diwarisi langsung dari :class:`View` or :class:`TemplateView`, "
"ketika itu menjaga tampilan berbeda sebagai terpisah mungkin."

msgid "More than just HTML"
msgstr "Lebih dari hanya HTML"

msgid ""
"Where class-based views shine is when you want to do the same thing many "
"times. Suppose you're writing an API, and every view should return JSON "
"instead of rendered HTML."
msgstr ""
"Dimana bersinar tampilan berdasarkan-kelas adalah ketika anda ingin "
"melakukan hal sama sebanyak kali. Kiranya anda sedang menulis sebuah API, "
"dan setiap tampilan harus mengembalikan JSON daripada membangun HTML."

msgid ""
"We can create a mixin class to use in all of our views, handling the "
"conversion to JSON once."
msgstr ""
"Kami dapat membuat sebuah kelas mixin untuk digunakan di semua dari tampilan "
"kami, menangani perubahan pada JSON sekali."

msgid "For example, a JSON mixin might look something like this::"
msgstr "Sebagai contoh, mixin JSON mungkin terlihat seperti ini::"

msgid ""
"Check out the :doc:`/topics/serialization` documentation for more "
"information on how to correctly transform Django models and querysets into "
"JSON."
msgstr ""
"Periksa dokumentasi :doc:`/topics/serialization` untuk informasi lebih pada "
"bagaimana dengan benar merubah model Django dan queryset menjadi JSON."

msgid ""
"This mixin provides a ``render_to_json_response()`` method with the same "
"signature as :func:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response()`. To use it, we need to mix it into a ``TemplateView`` "
"for example, and override ``render_to_response()`` to call "
"``render_to_json_response()`` instead::"
msgstr ""

msgid ""
"Equally we could use our mixin with one of the generic views. We can make "
"our own version of :class:`~django.views.generic.detail.DetailView` by "
"mixing ``JSONResponseMixin`` with the :class:`~django.views.generic.detail."
"BaseDetailView` -- (the :class:`~django.views.generic.detail.DetailView` "
"before template rendering behavior has been mixed in)::"
msgstr ""

msgid ""
"This view can then be deployed in the same way as any other :class:`~django."
"views.generic.detail.DetailView`, with exactly the same behavior -- except "
"for the format of the response."
msgstr ""
"Tampilan ini dapat kemudian disebarkan dalam cara sama seperti lainnya :"
"class:`~django.views.generic.detail.DetailView`, dengan persi perilaku sama "
"-- kecuali untuk bentuk dari tanggapan."

msgid ""
"If you want to be really adventurous, you could even mix a :class:`~django."
"views.generic.detail.DetailView` subclass that is able to return *both* HTML "
"and JSON content, depending on some property of the HTTP request, such as a "
"query argument or an HTTP header. Mix in both the ``JSONResponseMixin`` and "
"a :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, "
"and override the implementation of :func:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response()` to defer to the appropriate "
"rendering method depending on the type of response that the user requested::"
msgstr ""

msgid ""
"Because of the way that Python resolves method overloading, the call to "
"``super().render_to_response(context)`` ends up calling the :meth:`~django."
"views.generic.base.TemplateResponseMixin.render_to_response()` "
"implementation of :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""
"Karena cara bahwa Python menyelesaikan metode melebihi batas, panggilan pada "
"``super().render_to_response(context)`` mengakhiri panggilan penerapan :meth:"
"`~django.views.generic.base.TemplateResponseMixin.render_to_response()` "
"dari :class:`~django.views.generic.base.TemplateResponseMixin`."

msgid "Conditional View Processing"
msgstr "Pengolahan Tampilan Bersyarat"

msgid ""
"HTTP clients can send a number of headers to tell the server about copies of "
"a resource that they have already seen. This is commonly used when "
"retrieving a web page (using an HTTP ``GET`` request) to avoid sending all "
"the data for something the client has already retrieved. However, the same "
"headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, "
"etc.)."
msgstr ""

msgid ""
"For each page (response) that Django sends back from a view, it might "
"provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` "
"header. These headers are optional on HTTP responses. They can be set by "
"your view function, or you can rely on the :class:`~django.middleware.http."
"ConditionalGetMiddleware` middleware to set the ``ETag`` header."
msgstr ""
"Untuk setiap halaman (tanggapan) yang Django kirim kembali dari tampilan, "
"itu mungkin menyediakan dua kepala HTTP: kepala ``ETag`` dan ``Last-"
"Modified``. Kepala-kepala ini pilihan pada tanggapan HTTP. Mereka dapat "
"disetel dengan fungsi tampilan anda, anda dapat bergantung pada middleware :"
"class:`~django.middleware.http.ConditionalGetMiddleware` untuk menyetel "
"kepala ``ETag``."

msgid ""
"When the client next requests the same resource, it might send along a "
"header such as either :rfc:`If-modified-since <7232#section-3.3>` or :rfc:"
"`If-unmodified-since <7232#section-3.4>`, containing the date of the last "
"modification time it was sent, or either :rfc:`If-match <7232#section-3.1>` "
"or :rfc:`If-none-match <7232#section-3.2>`, containing the last ``ETag`` it "
"was sent. If the current version of the page matches the ``ETag`` sent by "
"the client, or if the resource has not been modified, a 304 status code can "
"be sent back, instead of a full response, telling the client that nothing "
"has changed. Depending on the header, if the page has been modified or does "
"not match the ``ETag`` sent by the client, a 412 status code (Precondition "
"Failed) may be returned."
msgstr ""

msgid ""
"When you need more fine-grained control you may use per-view conditional "
"processing functions."
msgstr ""
"Ketika anda butuh lebih kendali lebih-halus anda mungkin menggunakan fungsi "
"pengolahan bersyarat per-tampilan."

msgid "The ``condition`` decorator"
msgstr "Penggias ``condition``"

msgid ""
"Sometimes (in fact, quite often) you can create functions to rapidly compute "
"the :rfc:`ETag <7232#section-2.3>` value or the last-modified time for a "
"resource, **without** needing to do all the computations needed to construct "
"the full view. Django can then use these functions to provide an \"early "
"bailout\" option for the view processing. Telling the client that the "
"content has not been modified since the last request, perhaps."
msgstr ""

msgid ""
"These two functions are passed as parameters to the ``django.views."
"decorators.http.condition`` decorator. This decorator uses the two functions "
"(you only need to supply one, if you can't compute both quantities easily "
"and quickly) to work out if the headers in the HTTP request match those on "
"the resource. If they don't match, a new copy of the resource must be "
"computed and your normal view is called."
msgstr ""
"Dua fungsi ini dilewatkan sebagai parameter pada penghias ``django.views."
"decorators.http.condition``. Penghias ini menggunakan dua fungsi (anda hanya "
"butuh menyokong satu, jika anda tidak dapat menghitung kedua jumlah dengan "
"mudah dan cepat) untuk bekerja jika kepala dalam permintaan HTTP cocok "
"dengan itu pada sumber daya. Jika mereka tidak cocok, sebuah salinan baru "
"dari sumber daya harus dihitung dan tampilan biasa anda dipanggil."

msgid "The ``condition`` decorator's signature looks like this::"
msgstr "Tanda tangan penghias ``condition`` terlihat seperti ini::"

msgid ""
"The two functions, to compute the ETag and the last modified time, will be "
"passed the incoming ``request`` object and the same parameters, in the same "
"order, as the view function they are helping to wrap. The function passed "
"``last_modified_func`` should return a standard datetime value specifying "
"the last time the resource was modified, or ``None`` if the resource doesn't "
"exist. The function passed to the ``etag`` decorator should return a string "
"representing the :rfc:`ETag <7232#section-2.3>` for the resource, or "
"``None`` if it doesn't exist."
msgstr ""

msgid ""
"The decorator sets the ``ETag`` and ``Last-Modified`` headers on the "
"response if they are not already set by the view and if the request's method "
"is safe (``GET`` or ``HEAD``)."
msgstr ""
"Penghias menyetel kepala ``ETag`` dan ``Last-Modified`` pada tanggapan jika "
"mereka tidak disetel oleh tampilan dan jika metode permintaan adalah aman "
"(``GET`` or ``HEAD``)."

msgid ""
"Using this feature usefully is probably best explained with an example. "
"Suppose you have this pair of models, representing a small blog system::"
msgstr ""

msgid ""
"If the front page, displaying the latest blog entries, only changes when you "
"add a new blog entry, you can compute the last modified time very quickly. "
"You need the latest ``published`` date for every entry associated with that "
"blog. One way to do this would be::"
msgstr ""
"Jika halaman depan, menampilkan masukan blog terakhir, hanya perubahan "
"ketika anda menambah masukan blog baru, anda dapat menghitung waktu terakhir "
"dirubah sangat cepat. Anda butuh tanggal ``published`` terakhir untuk setiap "
"masukan terkait dengan blog itu. Satu cara melakukan ini adalah::"

msgid ""
"You can then use this function to provide early detection of an unchanged "
"page for your front page view::"
msgstr ""
"Anda lalu dapat menggunakan fungsi ini untuk menyediakan pengenalan awal "
"dari halaman tidak berubah untuk tampilan halaman depan anda::"

msgid "Be careful with the order of decorators"
msgstr "Hati-hati dengan urutan dari penghias"

msgid ""
"When ``condition()`` returns a conditional response, any decorators below it "
"will be skipped and won't apply to the response. Therefore, any decorators "
"that need to apply to both the regular view response and a conditional "
"response must be above ``condition()``. In particular, :func:`~django.views."
"decorators.vary.vary_on_cookie`, :func:`~django.views.decorators.vary."
"vary_on_headers`, and :func:`~django.views.decorators.cache.cache_control` "
"should come first because :rfc:`RFC 7232 <7232#section-4.1>` requires that "
"the headers they set be present on 304 responses."
msgstr ""
"Ketika ``condition()`` mengembalikan tanggapan keadaan, penghias apapun "
"dibawah itu akan dilewati dan tidak akan diberlakukan ke tanggapan. Karena "
"itu, penghias apapun yang butuh diberlakukan ke kedua tanggapan tampilan "
"biasa dan tanggapan keadaan harus diatas ``condition()``. Khususnya, :func:"
"`~django.views.decorators.vary.vary_on_cookie`, :func:`~django.views."
"decorators.vary.vary_on_headers`, dan :func:`~django.views.decorators.cache."
"cache_control` harus datang pertama karena :rfc:`RFC 7232 "
"<7232#section-4.1>` membutuhkan yang kepala mereka set hadir pada 304 "
"tanggapan."

msgid "Shortcuts for only computing one value"
msgstr "Jalan pintas untuk hanya menghitung satu nilai"

msgid ""
"As a general rule, if you can provide functions to compute *both* the ETag "
"and the last modified time, you should do so. You don't know which headers "
"any given HTTP client will send you, so be prepared to handle both. However, "
"sometimes only one value is easy to compute and Django provides decorators "
"that handle only ETag or only last-modified computations."
msgstr ""
"Sebagai aturan umum, jika anda dapat menyediakan fngsi untuk menghitung "
"*kedua* ETag dan waktu perubahan terakhir, anda harus melakukannya. Anda "
"tidak mengetahui kepala klien HTTP diberikan akan mengirim anda, jadi "
"bersiap-siap untuk menangani keduanya, terkadang hanya satu nilai adalah "
"mudah untuk dihitung dan Django menyediakan penghias yang menangani hanya "
"ETag atau hanya perhitungan dirubah-terakhir."

msgid ""
"The ``django.views.decorators.http.etag`` and ``django.views.decorators.http."
"last_modified`` decorators are passed the same type of functions as the "
"``condition`` decorator. Their signatures are::"
msgstr ""
"Penghias ``django.views.decorators.http.etag`` dan ``django.views.decorators."
"http.last_modified`` dilewatkan jenis sama dari fungsi seperti penghias "
"``condition``. Tanda tangan mereka adalah::"

msgid ""
"We could write the earlier example, which only uses a last-modified "
"function, using one of these decorators::"
msgstr ""
"Kami dapat menulis contoh paling awal, yang hanya menggunakan fungsi dirubah-"
"terakhir, menggunakan satu dari penghias ini::"

msgid "...or::"
msgstr "...atau::"

msgid "Use ``condition`` when testing both conditions"
msgstr "Gunakan ``kondisi`` ketika menguji kedua kondisi"

msgid ""
"It might look nicer to some people to try and chain the ``etag`` and "
"``last_modified`` decorators if you want to test both preconditions. "
"However, this would lead to incorrect behavior."
msgstr ""
"Itu mungkin terlihat lebih baik bagi beberapa orang mencoba dan mengikat "
"penghias ``etag`` dan ``last_modified`` jika anda ingin mencoba kedua "
"prakeadaan. bagaimanapun, ini akan membawa perilaku tidak benar."

msgid ""
"The first decorator doesn't know anything about the second and might answer "
"that the response is not modified even if the second decorators would "
"determine otherwise. The ``condition`` decorator uses both callback "
"functions simultaneously to work out the right action to take."
msgstr ""
"Penghias pertama tidak mengetahui apapun tentang kedua dan mungkin menjawab "
"tanggapan itu tidak dirubah meskipun jika penghias kedua akan menentukan "
"sebaliknya. Penghias ``condition`` menggunakan kedua fugnsi callback secara "
"terus menerus untuk bekerja tindakan tepat diambil."

msgid "Using the decorators with other HTTP methods"
msgstr "Menggunakan penghias dengan metode HTTP lain"

msgid ""
"The ``condition`` decorator is useful for more than only ``GET`` and "
"``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this "
"situation). It can also be used to provide checking for ``POST``, ``PUT`` "
"and ``DELETE`` requests. In these situations, the idea isn't to return a "
"\"not modified\" response, but to tell the client that the resource they are "
"trying to change has been altered in the meantime."
msgstr ""
"Penghias ``condition`` berguna untuk lebih dari hanya permintaan ``GET`` dan "
"``HEAD`` (permintaan ``HEAD`` adalah sama seperti ``GET`` dalam keadaan "
"ini). Itu dapat juga digunakan untuk menyediakan pemeriksaan untuk perintaan "
"``POST``, ``PUT`` dan ``DELETE``. Dalam keadaan ini, ide bukan mengembalikan "
"sebuah tanggapan \"not modified\", tetapi memberitahu klien yang sumber daya "
"mereka sedang mencoba telah dirubah dalam sementara itu."

msgid ""
"For example, consider the following exchange between the client and server:"
msgstr ""
"Sebagai contoh, pertimbangkan pertukaran berikut diantara klien dan peladen:"

msgid "Client requests ``/foo/``."
msgstr "Permintaan klien ``/foo/``."

msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""
"Tanggapan peladen dengan beberapa isi dengan sebuah ETag dari ``"
"\"abcd1234\"``."

msgid ""
"Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It "
"also sends an ``If-Match: \"abcd1234\"`` header to specify the version it is "
"trying to update."
msgstr ""
"Klien mengirim sebuah permintaan ``PUT`` HTTP pada ``/foo/`` untuk "
"memperbaharui sumber daya. Itu juga mengirim sebuah kepala ``If-Match: "
"\"abcd1234\"`` untuk menentukan versi itu coba memperbaharui."

msgid ""
"Server checks to see if the resource has changed, by computing the ETag the "
"same way it does for a ``GET`` request (using the same function). If the "
"resource *has* changed, it will return a 412 status code, meaning "
"\"precondition failed\"."
msgstr ""
"Peladen memeriksa untuk melihat jika sumber daya telah berubah, dengan "
"menghitung ETag cara sama itu lakukan untuk permintaan ``GET`` (menggunakan "
"fungsi sama). Jika sumber data *telah* berubah, itu akan mengembalikan kode "
"keadaan 412, berarti \"Prasyarat gagal\"."

msgid ""
"Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response, "
"to retrieve an updated version of the content before updating it."
msgstr ""
"Klien mengirim sebuah permintaan ``GET`` pada ``/foo/``, setelah menerima "
"tanggapan 412, untuk mengambil sebuah versi terperbaharui dari isi sebelum "
"memperbaharui itu."

msgid ""
"The important thing this example shows is that the same functions can be "
"used to compute the ETag and last modification values in all situations. In "
"fact, you **should** use the same functions, so that the same values are "
"returned every time."
msgstr ""
"Hal terpenting contoh ini menunjukkan bahwa fungsi sama dapat digunakan "
"untuk menghitung ETAg dan nilai perubahan terakhir dalam semua keadaan. "
"Faktanya, anda *harus* menggunakan fungsi sama, sehingga nilai sama "
"dikembalikan setiap waktu."

msgid "Validator headers with non-safe request methods"
msgstr "Kepala-kepala pengesah dengan metode permintaan tidak-aman"

msgid ""
"The ``condition`` decorator only sets validator headers (``ETag`` and ``Last-"
"Modified``) for safe HTTP methods, i.e. ``GET`` and ``HEAD``. If you wish to "
"return them in other cases, set them in your view. See :rfc:"
"`7231#section-4.3.4` to learn about the distinction between setting a "
"validator header in response to requests made with ``PUT`` versus ``POST``."
msgstr ""
"Penghias ``condition`` hanya menyetel kepala-kepala pengesah (``ETag`` dan "
"``Last-Modified``) untuk metode-metode HTTP aman, yaitu ``GET`` and "
"``HEAD``. Jika anda berharap mengembalikan mereka di kasus lain, setel "
"mereka dalam tampilan anda. Lihat :rfc:`7231#section-4.3.4` untuk "
"mempelajari tentang perbedaan diantara menyetel sebuah kepala pengesah dalam "
"tanggapan pada permintaan dibuat dengan ``PUT`` lawan ``POST``."

msgid "Comparison with middleware conditional processing"
msgstr "Perbandingan dengan pengolahan bersyarat middleware"

msgid ""
"Django provides conditional ``GET`` handling via :class:`django.middleware."
"http.ConditionalGetMiddleware`. While being suitable for many situations, "
"the middleware has limitations for advanced usage:"
msgstr ""

msgid "It's applied globally to all views in your project."
msgstr "Itu diberlakukan secara global pada semua tampilan dalam proyek anda."

msgid ""
"It doesn't save you from generating the response, which may be expensive."
msgstr ""
"Itu tidak menyimpan anda dari membangkitkan tanggapan, yang mungkin mahal."

msgid "It's only appropriate for HTTP ``GET`` requests."
msgstr "Itu hanya sesuai untuk permintaan ``GET`` HTTP."

msgid ""
"You should choose the most appropriate tool for your particular problem "
"here. If you have a way to compute ETags and modification times quickly and "
"if some view takes a while to generate the content, you should consider "
"using the ``condition`` decorator described in this document. If everything "
"already runs fairly quickly, stick to using the middleware and the amount of "
"network traffic sent back to the clients will still be reduced if the view "
"hasn't changed."
msgstr ""
"Anda harus memilih alat paling sesuai untuk masalah tertentu anda disini. "
"Jika anda mempunyai cara menghitung ETags dan waktu perubahan sangat cepat "
"dan jika beberapa tampilan perlu waktu untuk membangkitkan isi, anda harus "
"mempertimbangkan menggunakan penghias ``decorator`` digambarkan dalam "
"dokumen ini. Jika semuanya sudah berjalan cukup cepat, lekatkan menggunakan "
"middleware dan sejumlah lalu lintas jaringan dikirim kembali ke klien akan "
"masih dikurangi jika tampilan belum berubah."

msgid "Aggregation"
msgstr "Pengumpulan"

msgid ""
"The topic guide on :doc:`Django's database-abstraction API </topics/db/"
"queries>` described the way that you can use Django queries that create, "
"retrieve, update and delete individual objects. However, sometimes you will "
"need to retrieve values that are derived by summarizing or *aggregating* a "
"collection of objects. This topic guide describes the ways that aggregate "
"values can be generated and returned using Django queries."
msgstr ""
"Panduan topik pada :doc:`Django's database-abstraction API </topics/db/"
"queries>` menggambarkan cara dimana anda dapat menggunakan permintaan Django "
"yang membuat, mengambil, memperbaharui dan menghapus obyek tersendiri. "
"Bagaimanapun, terkadang anda akan butuh mengambil nilai yang berasal oleh "
"meringkas atau*mengumpulkan* kumpulan dari obyek. Topik panduan ini "
"menggambarkan cara yang mengumpulkan nilai-nilai dapat dibangkitkan dan "
"dikembalikan menggunakan permintaan Django."

msgid ""
"Throughout this guide, we'll refer to the following models. These models are "
"used to track the inventory for a series of online bookstores:"
msgstr ""
"Sepanjang panduan ini, kami akan mengacu ke model berikut. Model-model ini "
"digunakan untuk melacak inventaris untuk rangkaian dari toko buku daring:"

msgid "Cheat sheet"
msgstr "Lembar curang"

msgid ""
"In a hurry? Here's how to do common aggregate queries, assuming the models "
"above::"
msgstr ""

msgid "Generating aggregates over a ``QuerySet``"
msgstr "Membangkitkan pengumpulan terhadap ``QuerySet``"

msgid ""
"Django provides two ways to generate aggregates. The first way is to "
"generate summary values over an entire ``QuerySet``. For example, say you "
"wanted to calculate the average price of all books available for sale. "
"Django's query syntax provides a means for describing the set of all books::"
msgstr ""
"Django menyediakan dua cara membangkitkan pengumpulan. Cara pertama adalah "
"membangkitkan nilai ringkasan terhadap keseluruhan ``QuerySet``. Sebagai "
"contoh, katakan anda ingin menghitung rata-rata harga dari semua buku "
"tersedia untuk dijual. Sintaksis permintaan Django menyediakan sarana untuk "
"menggambarkan kumpulan dari semua buku::"

msgid ""
"What we need is a way to calculate summary values over the objects that "
"belong to this ``QuerySet``. This is done by appending an ``aggregate()`` "
"clause onto the ``QuerySet``::"
msgstr ""
"Apa kami butuhkan adalah cara menghitung ringkasan nilai terhadap obyek yang "
"memiliki ``QuerySet`` ini. Ini diselesaikan dengan menambah sebuah klausa "
"``aggregate()`` kedalam ``QuerySet``::"

msgid ""
"The ``all()`` is redundant in this example, so this could be simplified to::"
msgstr ""
"``all()`` berulang di contoh ini, jadi ini dapat disederhanakan menjadi::"

msgid ""
"The argument to the ``aggregate()`` clause describes the aggregate value "
"that we want to compute - in this case, the average of the ``price`` field "
"on the ``Book`` model. A list of the aggregate functions that are available "
"can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""
"Argumen pada klausa ``aggregate()`` menggambarkan nilai pengumpulan yang "
"kami ingin hitung - dalam kasus ini, rata-rata dari bidang ``price`` pada "
"model ``Book``. Sebuah daftar dari fungsi pengumpulan yang tersedia dapat "
"ditemukan di :ref:`QuerySet reference <aggregation-functions>`."

msgid ""
"``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, "
"returns a dictionary of name-value pairs. The name is an identifier for the "
"aggregate value; the value is the computed aggregate. The name is "
"automatically generated from the name of the field and the aggregate "
"function. If you want to manually specify a name for the aggregate value, "
"you can do so by providing that name when you specify the aggregate clause::"
msgstr ""
"``aggregate()`` adalah klausa terminal untuk sebuah ``QuerySet`` yang, "
"ketika dipanggil, mengembalikan sebuah kamus dari pasangan nama-nilai. Nama "
"adalah sebuah penciri untuk nilai pengumpulan; nilai adalah pengumpulan yang "
"dihitung. Nama adalah otomatis dibangkitkan dari nama dari bidang dan fungsi "
"pengumpulan. Jika anda ingin manual menentukan nama untuk nilai pengumpulan, "
"anda dapat melakukannya dengan menyediakan nama itu ketika anda menentukan "
"klausa pengumpulan::"

msgid ""
"If you want to generate more than one aggregate, you add another argument to "
"the ``aggregate()`` clause. So, if we also wanted to know the maximum and "
"minimum price of all books, we would issue the query::"
msgstr ""

msgid "Generating aggregates for each item in a ``QuerySet``"
msgstr "Membangkitkan pengumpulan untuk setiap barang di ``QuerySet``"

msgid ""
"The second way to generate summary values is to generate an independent "
"summary for each object in a :class:`.QuerySet`. For example, if you are "
"retrieving a list of books, you may want to know how many authors "
"contributed to each book. Each Book has a many-to-many relationship with the "
"Author; we want to summarize this relationship for each book in the "
"``QuerySet``."
msgstr ""

msgid ""
"Per-object summaries can be generated using the :meth:`~.QuerySet.annotate` "
"clause. When an ``annotate()`` clause is specified, each object in the "
"``QuerySet`` will be annotated with the specified values."
msgstr ""

msgid ""
"The syntax for these annotations is identical to that used for the :meth:`~."
"QuerySet.aggregate` clause. Each argument to ``annotate()`` describes an "
"aggregate that is to be calculated. For example, to annotate books with the "
"number of authors::"
msgstr ""

msgid ""
"As with ``aggregate()``, the name for the annotation is automatically "
"derived from the name of the aggregate function and the name of the field "
"being aggregated. You can override this default name by providing an alias "
"when you specify the annotation::"
msgstr ""
"Seperti ``aggregate()``, nama untuk catatan otomatis berasal dari nama dari "
"fungsi pengumpulan dan nama dari bidang sedang dikumpulkan. Anda dapat "
"menimpa nama awalan ini dengan menyediakan sebuah nama lain ketika anda "
"menentukan catatan::"

msgid ""
"Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The "
"output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can "
"be modified using any other ``QuerySet`` operation, including ``filter()``, "
"``order_by()``, or even additional calls to ``annotate()``."
msgstr ""
"Tidak seperti ``aggregate()``, ``annotate()`` adalah *bukan* klausa "
"terminal. Keluaran dari klausa ``annotate()`` adalah sebuah ``QuerySet``; "
"``QuerySet`` ini dapat dirubah menggunakan apapun selain operasi "
"``QuerySet``, termasuk ``filter()``, ``order_by()``, atau bahkan tambahan "
"panggilan pada ``annotate()``."

msgid "Combining multiple aggregations"
msgstr "Memadukan banyak pengumpulan"

msgid ""
"Combining multiple aggregations with ``annotate()`` will :ticket:`yield the "
"wrong results <10060>` because joins are used instead of subqueries:"
msgstr ""

msgid ""
"For most aggregates, there is no way to avoid this problem, however, the :"
"class:`~django.db.models.Count` aggregate has a ``distinct`` parameter that "
"may help:"
msgstr ""
"Untuk kebanyakan pengumpulan, tidak ada jalan menghindari masalah ini, "
"bagaimanapun, pengumpulan :class:`~django.db.models.Count` mempunai sebuah "
"parameter ``distinct`` yang mungkin membantu:"

msgid "If in doubt, inspect the SQL query!"
msgstr "Jika ragu, periksa permintaan SQL!"

msgid ""
"In order to understand what happens in your query, consider inspecting the "
"``query`` property of your ``QuerySet``."
msgstr ""
"Untuk memahami apa yang terjadi di permintaan anda, pertimbangkan memeriksa "
"sifat ``query`` dari ``QuerySet`` anda."

msgid "Joins and aggregates"
msgstr "Gabung dan kumpulkan"

msgid ""
"So far, we have dealt with aggregates over fields that belong to the model "
"being queried. However, sometimes the value you want to aggregate will "
"belong to a model that is related to the model you are querying."
msgstr ""
"Sejauh ini, kami telah berurusan dengan pengumpulan terhadap bidang yang "
"milik ke model sedang diminta. Bagaimanapun, terkadang nilai anda ingin "
"kumpulkan akan milik ke model yang terkait ke model anda sedang meminta."

msgid ""
"When specifying the field to be aggregated in an aggregate function, Django "
"will allow you to use the same :ref:`double underscore notation <field-"
"lookups-intro>` that is used when referring to related fields in filters. "
"Django will then handle any table joins that are required to retrieve and "
"aggregate the related value."
msgstr ""
"Ketika anda menentukan bidang untuk dikumpulkan dalam sebuah fungsi "
"pengumpulan, Django akan mengizinkan anda menggunakan :ref:`double "
"underscore notation <field-lookups-intro>` sama yang digunakan ketika "
"mengacu ke bidang terkait dalam penyaring. Django akan kemudian menangani "
"gabungan table apapun yang dibutuhkan untuk mengambil dan mengumpulkan nilai "
"terkait."

msgid ""
"For example, to find the price range of books offered in each store, you "
"could use the annotation::"
msgstr ""
"Sebagai contoh, untuk menemukan jangkauan harga dari buku ditawarkan "
"disetiap toko, anda dapat menggunakan catatan::"

msgid ""
"This tells Django to retrieve the ``Store`` model, join (through the many-to-"
"many relationship) with the ``Book`` model, and aggregate on the price field "
"of the book model to produce a minimum and maximum value."
msgstr ""
"Ini memberitahu Django untuk mengambil model ``Store``, gabung (melalui "
"hubungan many-to-many) dengan model ``Book``, dan dikumpulkan pada bidang "
"harga dari model buku untuk menghasilkan sebuah nilai minimal dan maksimal."

msgid ""
"The same rules apply to the ``aggregate()`` clause. If you wanted to know "
"the lowest and highest price of any book that is available for sale in any "
"of the stores, you could use the aggregate::"
msgstr ""
"Aturan sama berlaku pada klausa ``aggregate()``. Jika anda ingin mengetahui "
"harga terendah dan tertinggi dari buku apapun yang tersedia untuk dijual di "
"toko apapun, anda dapat menggunakan pengumpulan::"

msgid ""
"Join chains can be as deep as you require. For example, to extract the age "
"of the youngest author of any book available for sale, you could issue the "
"query::"
msgstr ""
"Ikatan join dapat sedalam seperti anda minta. Sebagai contoh, untuk "
"mengeluarkan umur dari penulis termuda dari buku apapun yang tersedia untuk "
"dijual, anda dapat menerbitkan permintaan::"

msgid "Following relationships backwards"
msgstr "Mengikuti hubungan kebelakang"

msgid ""
"In a way similar to :ref:`lookups-that-span-relationships`, aggregations and "
"annotations on fields of models or models that are related to the one you "
"are querying can include traversing \"reverse\" relationships. The lowercase "
"name of related models and double-underscores are used here too."
msgstr ""
"Dalam sebuah cara mirip pada :ref:`lookups-that-span-relationships`, "
"pengumpulan dan catatan pada bidang dari model atau model yang terkait ke "
"satu anda sedang meminta dapat menyertakan lintasan hubungan \"reverse\". "
"Nama huruf kecil dari model terkait dan garis bawah ganda digunakan disini "
"juga."

msgid ""
"For example, we can ask for all publishers, annotated with their respective "
"total book stock counters (note how we use ``'book'`` to specify the "
"``Publisher`` -> ``Book`` reverse foreign key hop)::"
msgstr ""
"Sebagai contoh, kami dapat meminta untuk semua penerbit, dicatat dengan "
"masing-masing jumlah penghitung stok buku (catat bahwa kami menggunakan "
"``'book'`` untuk menentukan ``Publisher`` -> ``Book`` membalikkan lompatan "
"foreign key)::"

msgid ""
"(Every ``Publisher`` in the resulting ``QuerySet`` will have an extra "
"attribute called ``book__count``.)"
msgstr ""
"(Setiap ``Publisher`` dalam menghasilkan ``QuerySet`` akan mempunyai sebuah "
"atribut tambahan disebut ``book__count``.)"

msgid ""
"We can also ask for the oldest book of any of those managed by every "
"publisher::"
msgstr ""
"Kami dapat juga meminta untuk buku tertua dari setiap dari itu dikelola oleh "
"setiap penerbit::"

msgid ""
"(The resulting dictionary will have a key called ``'oldest_pubdate'``. If no "
"such alias were specified, it would be the rather long "
"``'book__pubdate__min'``.)"
msgstr ""
"(Hasil kamus akan mempunyai sebuah kunci dipanggil ``'oldest_pubdate'``. "
"Jika tidak ada nama lain seperti itu telah ditentukan, itu akan agak panjang "
"``'book__pubdate__min'``.)"

msgid ""
"This doesn't apply just to foreign keys. It also works with many-to-many "
"relations. For example, we can ask for every author, annotated with the "
"total number of pages considering all the books the author has (co-)authored "
"(note how we use ``'book'`` to specify the ``Author`` -> ``Book`` reverse "
"many-to-many hop)::"
msgstr ""
"Ini tidak berlaku hanya pada foreign key. Itu juga bekerja dengan hubungan "
"many-to-many. Sebagai contoh, kami dapat meminta untuk setiap penulis, "
"dicatat dengan jumlah nomor dari halaman mempertimbangkan semua buku penulis "
"mempunyai penulis(-bersama) (catat bagaimana menggunakan ``'book'`` untuk "
"menentukan ``Author`` -> ``Book`` membalikkan lompatan many-to-many)::"

msgid ""
"(Every ``Author`` in the resulting ``QuerySet`` will have an extra attribute "
"called ``total_pages``. If no such alias were specified, it would be the "
"rather long ``book__pages__sum``.)"
msgstr ""
"(Setiap ``Author`` dalam menghasilkan ``QuerySet`` akan mempunyai sebuah "
"atribut tambahan dipanggil ``total_pages``. Jika tidak ada nama lain itu, "
"itu akan menjadi agak panjang ``book__pages__sum``.)"

msgid ""
"Or ask for the average rating of all the books written by author(s) we have "
"on file::"
msgstr ""
"Atau minta untuk penilaian rata-rata dari semua buku ditulis oleh penulis "
"kami punyai pada berkas::"

msgid ""
"(The resulting dictionary will have a key called ``'average_rating'``. If no "
"such alias were specified, it would be the rather long "
"``'book__rating__avg'``.)"
msgstr ""
"(Hasil kamus akan mempunyai sebuah kunci dipanggil ``'average_rating'``. "
"Jika tidak ada nama lain seperti itu telah ditentukan, itu akan agak panjang "
"``'book__rating__avg'``.)"

msgid "Aggregations and other ``QuerySet`` clauses"
msgstr "Pengumpulan dan klausa ``QuerySet`` lain"

msgid "``filter()`` and ``exclude()``"
msgstr "``filter()`` dan ``exclude()``"

msgid ""
"Aggregates can also participate in filters. Any ``filter()`` (or "
"``exclude()``) applied to normal model fields will have the effect of "
"constraining the objects that are considered for aggregation."
msgstr ""
"Pengumpulan dapat juga ikut serta dalam penyaring. ``filter()`` "
"(atau``exclude()``) apapun berlaku pada bidang model biasa akan mempunyai "
"pengaruh dari membatasi obyek yang dianggap untuk pengumpulan."

msgid ""
"When used with an ``annotate()`` clause, a filter has the effect of "
"constraining the objects for which an annotation is calculated. For example, "
"you can generate an annotated list of all books that have a title starting "
"with \"Django\" using the query::"
msgstr ""
"Ketika digunakan dengan sebuah klausa ``annotate()``, sebuah penyaring "
"mempunyai pengaruh dari membatasi obyek untuk dimana sebuah catatan "
"dihitung. Sebagai contoh, anda dapat membangkitkan daftar dari semua buku "
"yang mempunyai sebuah judul dimulai dengan \"Django\"\" menggunakan "
"permintaan::"

msgid ""
"When used with an ``aggregate()`` clause, a filter has the effect of "
"constraining the objects over which the aggregate is calculated. For "
"example, you can generate the average price of all books with a title that "
"starts with \"Django\" using the query::"
msgstr ""
"Ketika digunakan dengan sebuah klausa ``aggregate()``, sebuah penyaring "
"mempunyai pengaruh dari membatasi obyek untuk dimana sebuah pengumpulan "
"dihitung. Sebagai contoh, anda dapat membangkitkan rata-rata harga dari "
"semua buku yang mempunyai sebuah judul dimulai dengan \"Django\"\" "
"menggunakan permintaan::"

msgid "Filtering on annotations"
msgstr "Penyaringan pada keterangan"

msgid ""
"Annotated values can also be filtered. The alias for the annotation can be "
"used in ``filter()`` and ``exclude()`` clauses in the same way as any other "
"model field."
msgstr ""
"Nilai dicatat dapat juga disaring. Nama lain untuk catatan dapat digunaan "
"dalam klausa ``filter()`` dan ``exclude()`` di cara sama seperti bidang "
"model lainnya apapun."

msgid ""
"For example, to generate a list of books that have more than one author, you "
"can issue the query::"
msgstr ""
"Sebagai contoh, untuk membangkitkan sebuah daftar buku yang mempunyai lebih "
"dari satu penulis, anda dapat menerbitkan permintaan::"

msgid ""
"This query generates an annotated result set, and then generates a filter "
"based upon that annotation."
msgstr ""
"Permintaan ini membangkitkan sebuah kumpulan hasil keterangan, dan kemudian "
"membangkitkan sebuah penyaring berdasarkan pada keterangan itu."

msgid ""
"If you need two annotations with two separate filters you can use the "
"``filter`` argument with any aggregate. For example, to generate a list of "
"authors with a count of highly rated books::"
msgstr ""
"Jika anda butuh dua keterangan dengan dua penyaring terpisah anda dapat "
"menggunakan argumen ``filter`` dengan pengumpulan apapun. Sebagai contoh, "
"untuk membangkitkan daftar dari penulis dengan jumlah peringkat buku "
"tertinggi::"

msgid ""
"Each ``Author`` in the result set will have the ``num_books`` and "
"``highly_rated_books`` attributes. See also :ref:`conditional-aggregation`."
msgstr ""

msgid "Choosing between ``filter`` and ``QuerySet.filter()``"
msgstr "Memilih diantara ``filter`` dan ``QuerySet.filter()``"

msgid ""
"Avoid using the ``filter`` argument with a single annotation or aggregation. "
"It's more efficient to use ``QuerySet.filter()`` to exclude rows. The "
"aggregation ``filter`` argument is only useful when using two or more "
"aggregations over the same relations with different conditionals."
msgstr ""
"Hidnari menggunakan argumen ``filter`` dengan keterangan atau pengumpulan "
"tunggal. Itu lebih efesien menggunakan ``QuerySet.filter()`` untuk tidak "
"menyertakan baris. Argumen pengumpulan ``filter`` hanya berguna ketika "
"menggunakan dua atau lebih pengumpulan terhadap hubungan sama dengan keadaan "
"berbeda."

msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr "Urutan dari klausa ``annotate()`` dan ``filter()``"

msgid ""
"When developing a complex query that involves both ``annotate()`` and "
"``filter()`` clauses, pay particular attention to the order in which the "
"clauses are applied to the ``QuerySet``."
msgstr ""
"Ketika mengembangkan sebuah permintaan rumit yang melibatkan kedua klausa "
"``annotate()`` dan ``filter()``, berikan perhatian khusus pada urutan dimana "
"klausa diberlakukan pada ``QuerySet``."

msgid ""
"When an ``annotate()`` clause is applied to a query, the annotation is "
"computed over the state of the query up to the point where the annotation is "
"requested. The practical implication of this is that ``filter()`` and "
"``annotate()`` are not commutative operations."
msgstr ""
"Ketika sebuah klausa ``annotate()`` diberlakukan pada sebuah permintaan, "
"catatan dihitung terhadap keadaan dari permintaan sampai titik dimana "
"catatan diminta. Impliaksi praktik dari ini adalah bahwa ``filter()`` dan "
"``annotate()`` bukan operasi komutatif."

msgid "Given:"
msgstr "Diberikan:"

msgid "Publisher A has two books with ratings 4 and 5."
msgstr "Penerbit A mempunyai dua buku dengan nilai 4 dan 5."

msgid "Publisher B has two books with ratings 1 and 4."
msgstr "Penerbit B mempunyai dua buku dengan nilai 1 dan 4."

msgid "Publisher C has one book with rating 1."
msgstr "Penerbit C mempunyai satu buku dengan penilaian 1."

msgid "Here's an example with the ``Count`` aggregate::"
msgstr "Ini adalah sebuah contoh dengan pengumpulan ``Count``::"

msgid ""
"Both queries return a list of publishers that have at least one book with a "
"rating exceeding 3.0, hence publisher C is excluded."
msgstr ""
"Kedua permintaan mengembalikan sebuah daftar dari penerbit yang mempunyai "
"setidaknya satu buku dengan penilaian melebihi 3.0, karenanya penerbit C "
"tidak disertakan."

msgid ""
"In the first query, the annotation precedes the filter, so the filter has no "
"effect on the annotation. ``distinct=True`` is required to avoid a :ref:"
"`query bug <combining-multiple-aggregations>`."
msgstr ""
"Dalam permintaan pertama, catatan mendahului penyaring, jadi penyaring tidak "
"mempunyai pengaruh pada catatan. ``distinct=True`` dibutuhkan untuk "
"menghindari :ref:`query bug <combining-multiple-aggregations>`."

msgid ""
"The second query counts the number of books that have a rating exceeding 3.0 "
"for each publisher. The filter precedes the annotation, so the filter "
"constrains the objects considered when calculating the annotation."
msgstr ""
"Permintaan kedua menghitung jumlah buku yang mempunyai nilai melebihi 3.0 "
"untuk setiap penerbit. Penyaring ini mendahului catatan, jadi batasan "
"penyaring obyek dianggap ketika menghitung catatan."

msgid "Here's another example with the ``Avg`` aggregate::"
msgstr "Ini adalah sebuah contoh lain dengan pengumpulan ``Avg``::"

msgid ""
"The first query asks for the average rating of all a publisher's books for "
"publisher's that have at least one book with a rating exceeding 3.0. The "
"second query asks for the average of a publisher's book's ratings for only "
"those ratings exceeding 3.0."
msgstr ""
"Permintaan pertama meminta untuk rata-rata penilaian dari semua penerbit "
"buku untuk penerbit yang mempunyai setidaknya satu buku ketika penilaian "
"melebihi 3.0. Permintaan kedua meminta untuk rata-rata dari penilaian buku "
"penerbit untuk hanya mereka penilaian melebihi 3.0."

msgid ""
"It's difficult to intuit how the ORM will translate complex querysets into "
"SQL queries so when in doubt, inspect the SQL with ``str(queryset.query)`` "
"and write plenty of tests."
msgstr ""
"Itu adalah sangat sulit memahami bahwa ORM akan menterjemahkan queryset "
"rumit kedalam permintaan SQL ketika dalam keraguan, periksa SQL dengan "
"``str(queryset.query)`` dan tulis jumlah besar percobaan."

msgid "``order_by()``"
msgstr "``order_by()``"

msgid ""
"Annotations can be used as a basis for ordering. When you define an "
"``order_by()`` clause, the aggregates you provide can reference any alias "
"defined as part of an ``annotate()`` clause in the query."
msgstr ""
"Catatan dapat digunakan sebagai dasar untuk pengurutan. Ketika anda "
"menentukan sebuah klausa ``order_by()``, pengumpulan anda sediakan dapat "
"mengacu nama lain apapun ditentukan sebagai bagian dari sebuah klausa "
"``annotate()`` dalam permintaan."

msgid ""
"For example, to order a ``QuerySet`` of books by the number of authors that "
"have contributed to the book, you could use the following query::"
msgstr ""
"Sebagai contoh, untuk mengurutkan ``QuerySet`` dari buku dengan jumlah dari "
"pengarang yang memiliki bantuan pada buku, anda dapat menggunakan permintaan "
"berikut::"

msgid "``values()``"
msgstr "``values()``"

msgid ""
"Ordinarily, annotations are generated on a per-object basis - an annotated "
"``QuerySet`` will return one result for each object in the original "
"``QuerySet``. However, when a ``values()`` clause is used to constrain the "
"columns that are returned in the result set, the method for evaluating "
"annotations is slightly different. Instead of returning an annotated result "
"for each result in the original ``QuerySet``, the original results are "
"grouped according to the unique combinations of the fields specified in the "
"``values()`` clause. An annotation is then provided for each unique group; "
"the annotation is computed over all members of the group."
msgstr ""
"Biasanya, catatan dibangkitkan pada dasar per-obyek - sebuah ``QuerySet`` "
"dicatat akan mengembalikan satu hasil untuk setiap obyek dalam ``QuerySet`` "
"asli. Bagaimanapun, ketika sebuah klausa ``values()`` digunakan untuk "
"membatasi kolom yang dikembalikan dalam kumpulan hasil, metode untuk menilai "
"catatan adak sedikit berbeda. Sebagai gantinya mengembalikan sebuah hasil "
"dicatat untuk setiap hasil dalam ``QuerySet`` asli, hasil asli dikelompokkan "
"menurut pada perpaduan unik dari bidang-bidang ditentukan dalam klausa "
"``values()``.  Sebuah catatam kemudian disediakan untuk setiap kelompok "
"unik; catatan dihitung terhadap semua anggota dari kelompok."

msgid ""
"For example, consider an author query that attempts to find out the average "
"rating of books written by each author:"
msgstr ""
"Untuk setiap contoh, pertimbangkan sebuah permintaan penulis yang berusaha "
"menemukan rata-rata penilaian dari buku ditulis oleh setiap penulis."

msgid ""
"This will return one result for each author in the database, annotated with "
"their average book rating."
msgstr ""
"Ini akan mengembalikan satu hasil untuk setiap penulis di basisdata, "
"diberikan keterangan dengan nilai buku rata-rata mereka."

msgid ""
"However, the result will be slightly different if you use a ``values()`` "
"clause::"
msgstr ""
"Bagaimanapun, hasil akan sedikit berbeda jika anda menggunakan kalusa "
"``values()``::"

msgid ""
"In this example, the authors will be grouped by name, so you will only get "
"an annotated result for each *unique* author name. This means if you have "
"two authors with the same name, their results will be merged into a single "
"result in the output of the query; the average will be computed as the "
"average over the books written by both authors."
msgstr ""
"Dalam contoh ini, penulis akan dikelompokkan berdasarkan nama, jadi anda "
"akan hanya mendapatkan sebuah hasil dicatata untuk setiap nama penulis "
"*unik*. Ini berarti jika anda mempunyai dua penulis dengan nama sama, hasil "
"mereka akan digabung kedalam hasil tunggal di keluaran dari permintaan; rata-"
"rata akan dihitung sebagai rata-rata terhadap buku ditulis oleh kedua "
"penulis."

msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr "Urutan dari klausa ``annotate()`` dan ``values()``"

msgid ""
"As with the ``filter()`` clause, the order in which ``annotate()`` and "
"``values()`` clauses are applied to a query is significant. If the "
"``values()`` clause precedes the ``annotate()``, the annotation will be "
"computed using the grouping described by the ``values()`` clause."
msgstr ""
"Seperti klausa ``filter()``, urutan dimana klausa ``annotate()`` dan "
"``values()`` diberlakukan pada sebuah permintaan adalah signifikan. Jika "
"klausa ``values()`` mendahului ``annotated()``, catatan akan dihitung "
"menggunakan pengelomppokan digambarkan oleh klausa ``values()``."

msgid ""
"However, if the ``annotate()`` clause precedes the ``values()`` clause, the "
"annotations will be generated over the entire query set. In this case, the "
"``values()`` clause only constrains the fields that are generated on output."
msgstr ""
"Bagaimanapun, jika klausa ``annotate()`` mendahului klausa ``values()``, "
"catatan akan dibangkitkan terhadap keseluruhan kumpulan permintaan. Dalam "
"kasus ini, klausa ``values()`` hanya membatasi bidang yang dibangkitkan pada "
"keluaran."

msgid ""
"For example, if we reverse the order of the ``values()`` and ``annotate()`` "
"clause from our previous example::"
msgstr ""
"Sebagai contoh, jika kami membalikkan urutan dari klausa ``values()`` dan "
"``annotate()`` dari contoh kami sebelumnya::"

msgid ""
"This will now yield one unique result for each author; however, only the "
"author's name and the ``average_rating`` annotation will be returned in the "
"output data."
msgstr ""
"Ini akan sekarang menghasilkan hasil unik untuk setiap penulis; "
"bagaimanapun, hanya nama penulis dan catatan ``average_rating`` akan "
"dikembalikan dalam data keluaran."

msgid ""
"You should also note that ``average_rating`` has been explicitly included in "
"the list of values to be returned. This is required because of the ordering "
"of the ``values()`` and ``annotate()`` clause."
msgstr ""
"Anda harus juga catat bahwa ``average_rating`` telah jelas disertakan dalam "
"daftar dari nilai-nilai untuk dikembalikan. Ini dibutuhkan karena dari "
"urutan dari klausa ``values()`` dan ``annotate()``."

msgid ""
"If the ``values()`` clause precedes the ``annotate()`` clause, any "
"annotations will be automatically added to the result set. However, if the "
"``values()`` clause is applied after the ``annotate()`` clause, you need to "
"explicitly include the aggregate column."
msgstr ""
"Jika klausa ``values()`` mendahului klausa ``annotate()``, setiap catatan "
"akan otomatis ditambahkan ke kumpulan hasil. Bagaimanapun, jika klausa "
"``values()`` diberlakukan setelah klausa ``annotate()``, anda butuh jelas "
"menyertakan kolom pengumpulan."

msgid "Interaction with ``order_by()``"
msgstr "Interaksi dengan ``order_by()``"

msgid ""
"Fields that are mentioned in the ``order_by()`` part of a queryset are used "
"when selecting the output data, even if they are not otherwise specified in "
"the ``values()`` call. These extra fields are used to group \"like\" results "
"together and they can make otherwise identical result rows appear to be "
"separate. This shows up, particularly, when counting things."
msgstr ""

msgid "By way of example, suppose you have a model like this::"
msgstr "Berdasarkan cara contoh, seharusnya anda mempunyai model seperti ini::"

msgid ""
"If you want to count how many times each distinct ``data`` value appears in "
"an ordered queryset, you might try this::"
msgstr ""

msgid ""
"...which will group the ``Item`` objects by their common ``data`` values and "
"then count the number of ``id`` values in each group. Except that it won't "
"quite work. The ordering by ``name`` will also play a part in the grouping, "
"so this query will group by distinct ``(data, name)`` pairs, which isn't "
"what you want. Instead, you should construct this queryset::"
msgstr ""

msgid ""
"...clearing any ordering in the query. You could also order by, say, "
"``data`` without any harmful effects, since that is already playing a role "
"in the query."
msgstr ""
"...membersihkan pengurutan apapun di permintaan. Anda dapat juga mengurutkan "
"berdasarkan, katakan, ``data`` tanpa pengaruh berbahaya apapun, sejak itu "
"sudah bermain sebuah peran dalam permintaan."

msgid ""
"This behavior is the same as that noted in the queryset documentation for :"
"meth:`~django.db.models.query.QuerySet.distinct` and the general rule is the "
"same: normally you won't want extra columns playing a part in the result, so "
"clear out the ordering, or at least make sure it's restricted only to those "
"fields you also select in a ``values()`` call."
msgstr ""
"Perilaku ini adalah sama seperti dicatat dalam dokumentasi queryset untuk :"
"meth:`~django.db.models.query.QuerySet.distinct` dan aturan umum adalah "
"sama: biasanya anda tidak ingin kolom tambahan bermain bagian dalam hasil, "
"jadi bersihkan pengurutan, atau setidaknya pastikan itu terbatas hanya "
"bidang-bidang tersebut anda juga pilih dalam sebuah panggilan ``values()``."

msgid ""
"You might reasonably ask why Django doesn't remove the extraneous columns "
"for you. The main reason is consistency with ``distinct()`` and other "
"places: Django **never** removes ordering constraints that you have "
"specified (and we can't change those other methods' behavior, as that would "
"violate our :doc:`/misc/api-stability` policy)."
msgstr ""
"Anda mungkin layak bertanya mengapa Django tidak memidnahkan kolom tidak ada "
"hubungannya untuk anda. Alasan utama adalah ketetapan dengan distinct()`` "
"dan tempat lain: Django *tidak pernah* memindahkan pengurutan yang anda "
"telah tentukan (dan kami tidak dapat merubah perilaku metode lain tersebut, "
"ketika itu akan melanggar kebijakan :doc:`/misc/api-stability` kami)."

msgid "Aggregating annotations"
msgstr "Pengumpulan catatan"

msgid ""
"You can also generate an aggregate on the result of an annotation. When you "
"define an ``aggregate()`` clause, the aggregates you provide can reference "
"any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""
"Anda dapat juga membangkitkan sebuah pengumpulan pada hasil dari sebuah "
"catatan. Ketika anda menentukan sebuah klausa ``aggregate()``, pengumpulan "
"anda sediakan dapat mengacu setiap nama lain ditentukan sebagai bagian dari "
"sebuah klausa ``annotated()`` dalam permintaan."

msgid ""
"For example, if you wanted to calculate the average number of authors per "
"book you first annotate the set of books with the author count, then "
"aggregate that author count, referencing the annotation field::"
msgstr ""
"Sebagai contoh, jika anda ingin menjumlahkan angka rata-rata dari penulis "
"per buku anda pertama membubuhi catatan kumpulan buku dengan jumlah penulis, "
"lalu kumpulkan jumlah penulis itu, mengacu bidang membubuhi catatan ::"

msgid "Examples of model relationship API usage"
msgstr "Contoh-contoh dari hubungan model penggunaan API"

msgid "Many-to-many relationships"
msgstr "Hubungan banyak-ke-banyak"

msgid ""
"To define a many-to-many relationship, use :class:`~django.db.models."
"ManyToManyField`."
msgstr ""
"Untuk menentukan hubungan many-to-many, gunakan :class:`~django.db.models."
"ManyToManyField`."

msgid ""
"In this example, an ``Article`` can be published in multiple ``Publication`` "
"objects, and a ``Publication`` has multiple ``Article`` objects:"
msgstr ""
"Dalam contoh ini, sebuah ``Article`` dapat diterbitkan dalam banyak obyek "
"``Publication``, dan sebuah ``Publication`` mempunyai banyak obyek "
"``Article``:"

msgid ""
"What follows are examples of operations that can be performed using the "
"Python API facilities."
msgstr ""
"Apa yang mengikuti adalah contoh-contoh dari tindakan yang dapat dilakukan "
"menggunakan fasilitas API Python."

msgid "Create a few ``Publications``::"
msgstr "Buat sedikit ``Publications``::"

msgid "Create an ``Article``::"
msgstr "Buat sebuah ``Artikel``::"

msgid "You can't associate it with a ``Publication`` until it's been saved::"
msgstr ""
"Anda tidak dapat mengkaitkan itu dengan ``Publication`` sampai itu telah "
"disimpan::"

msgid "Save it! ::"
msgstr "Simpan itu! ::"

msgid "Associate the ``Article`` with a ``Publication``::"
msgstr "Kaitkan ``Article`` dengan ``Publication``::"

msgid ""
"Create another ``Article``, and set it to appear in the ``Publications``::"
msgstr ""
"Buat ``Article`` baru, dan setel itu untuk memunculkan dalam "
"``Publications``::"

msgid "Adding a second time is OK, it will not duplicate the relation::"
msgstr ""
"Menambahkan waktu detik adalah OKE, itu tidak akan menggandakan hubungan::"

msgid "Adding an object of the wrong type raises :exc:`TypeError`::"
msgstr ""
"Menambahkan sebuah obyek dari jenis salah memunculkan :exc:`TypeError`:: "

msgid ""
"Create and add a ``Publication`` to an ``Article`` in one step using :meth:"
"`~django.db.models.fields.related.RelatedManager.create`::"
msgstr ""
"Buat dan tambah sebuah ``Publication`` pada sebuah ``Article`` di satu "
"langkah menggunakan :meth:`~django.db.models.fields.related.RelatedManager."
"create`:: "

msgid ""
"``Article`` objects have access to their related ``Publication`` objects::"
msgstr ""
"Obyek ``Article`` telah mengakses ke obyek ``Publication`` terhubung mereka::"

msgid ""
"``Publication`` objects have access to their related ``Article`` objects::"
msgstr ""
"Obyek ``Publication`` telah mengakses ke obyek ``Article`` terhubung mereka::"

msgid ""
"Many-to-many relationships can be queried using :ref:`lookups across "
"relationships <lookups-that-span-relationships>`::"
msgstr ""
"Hubungan many-to-many dapat diminta menggunakan :ref:`lookups across "
"relationships <lookups-that-span-relationships>`::"

msgid ""
"The :meth:`~django.db.models.query.QuerySet.count` function respects :meth:"
"`~django.db.models.query.QuerySet.distinct` as well::"
msgstr ""
"Fungsi :meth:`~django.db.models.query.QuerySet.count`  menghormati :meth:"
"`~django.db.models.query.QuerySet.distinct` juga::"

msgid ""
"Reverse m2m queries are supported (i.e., starting at the table that doesn't "
"have a :class:`~django.db.models.ManyToManyField`)::"
msgstr ""
"Membalikkan permintaan m2m didukung (yaitu, dimulai pada tabel yang tidak "
"mempunyai sebuah :class:`~django.db.models.ManyToManyField`)::"

msgid ""
"Excluding a related item works as you would expect, too (although the SQL "
"involved is a little complex)::"
msgstr ""
"Tidak termasuk barang terkait bekerja ketika anda akan mengharapkan, terlalu "
"(meskipun SQL terlibat adalah sedikit rumit)::"

msgid ""
"If we delete a ``Publication``, its ``Articles`` won't be able to access it::"
msgstr ""
"Jika kami menghapus ``Publication``, ``Articles`` nya tidak akan dapat "
"mengaksesnya::"

msgid ""
"If we delete an ``Article``, its ``Publications`` won't be able to access "
"it::"
msgstr ""
"Jika kami menghapus sebuah ``Article``, ``Publications`` nya tidak akan "
"dapat mengakses itu::"

msgid "Adding via the 'other' end of an m2m::"
msgstr "Menambahkan melalui akhiran 'other' dari sebuah m2m::"

msgid "Adding via the other end using keywords::"
msgstr "Menambahkan melalui akhiran lain menggunakan kata kunci::"

msgid "Removing ``Publication`` from an ``Article``::"
msgstr "Memindahkan ``Publication`` dari sebuah ``Article``::"

msgid "And from the other end::"
msgstr "Dan dari akhiran lain::"

msgid "Relation sets can be set::"
msgstr "Kumpulan hbungan dapat disetel::"

msgid "Relation sets can be cleared::"
msgstr "Kumpulan hubungan dapat dibersihkan::"

msgid "And you can clear from the other end::"
msgstr "Dan anda dapat membersihkan dari akhiran lain::"

msgid "Recreate the ``Article`` and ``Publication`` we have deleted::"
msgstr "Membuat kembali ``Article`` dan ``Publication`` kami telah hapus::"

msgid ""
"Bulk delete some ``Publications`` - references to deleted publications "
"should go::"
msgstr ""
"Menghapus massal beberaoa ``Publications`` - acuan pada untuk menghapus "
"penerbitan harus pergi::"

msgid "Bulk delete some articles - references to deleted objects should go::"
msgstr ""
"Menghapus massal beberapa artikel - acuan pada menghapus obyek harus pergi::"

msgid ""
"After the :meth:`~django.db.models.query.QuerySet.delete`, the :class:"
"`~django.db.models.query.QuerySet` cache needs to be cleared, and the "
"referenced objects should be gone::"
msgstr ""
"Setelah :meth:`~django.db.models.query.QuerySet.delete`, cache :class:"
"`~django.db.models.query.QuerySet` butuh dibersihkan, obyek acuan harus "
"hilang::"

msgid "Many-to-one relationships"
msgstr "Hubungan banyak-ke-satu"

msgid ""
"To define a many-to-one relationship, use :class:`~django.db.models."
"ForeignKey`::"
msgstr ""
"Untuk menentukan hubungan many-to-one, gunakan :class:`~django.db.models."
"ForeignKey`::"

msgid "Create a few Reporters::"
msgstr "Buat sedikir Reporter::"

msgid "Create an Article::"
msgstr "Buat sebuah Artikel::"

msgid ""
"Note that you must save an object before it can be assigned to a foreign key "
"relationship. For example, creating an ``Article`` with unsaved ``Reporter`` "
"raises ``ValueError``::"
msgstr ""
"Catat bahwa anda harus menyimpan sebuah obyek sebelum itu dapat diberikan ke "
"hubungan foreign key. Sebagai contoh, membuat ``Article`` dengan "
"``Reporter`` tidak disimpan memunculkan ``ValueError``::"

msgid "Article objects have access to their related Reporter objects::"
msgstr "Obyek artikel mempunyai akses ke obyek Reporter terkait::"

msgid "Create an Article via the Reporter object::"
msgstr "Buat sebuah Article melalui obyek Reporter::"

msgid "Create a new article::"
msgstr "Buat sebuah artikel baru::"

msgid "Add the same article to a different article set - check that it moves::"
msgstr ""
"Tambah artikel sama ke kumpulan artikel berbeda -  periksa bahwa itu "
"berpindah::"

msgid "Adding an object of the wrong type raises TypeError::"
msgstr "Menambahkan sebuah obyek dari jenis salah memunculkan TypeError::"

msgid "Note that in the last example the article has moved from John to Paul."
msgstr ""
"Catat bahwa di contoh terakhir artikel telah dipindahkan dari John ke Paul."

msgid ""
"Related managers support field lookups as well. The API automatically "
"follows relationships as far as you need. Use double underscores to separate "
"relationships. This works as many levels deep as you want. There's no limit. "
"For example::"
msgstr ""
"Pengelola terkait mendukung pencarian bidang-bidang juga. API otomatis "
"mengikuti hubungan sejauh anda butuhkan. Gunakan garis bawah ganda untuk "
"memisahkan hubungan. Ini bekerja sebanyak tingkatan yang anda inginkan. "
"Tidak ada batasan. Sebagai contoh::"

msgid "Exact match is implied here::"
msgstr "Benar-benar cocok tersirat disini::"

msgid ""
"Query twice over the related field. This translates to an AND condition in "
"the WHERE clause::"
msgstr ""
"Permintaan dua kali lebih bidang terkait. Ini menterjemahkan pada sebuah "
"keadaan AND dalam klausa WHERE::"

msgid ""
"For the related lookup you can supply a primary key value or pass the "
"related object explicitly::"
msgstr ""
"Untuk pencarian terkait anda dapat menyediakan sebuah nilai primary key atau "
"lewatkan obyek terkait dengan tegas::"

msgid "You can also use a queryset instead of a literal list of instances::"
msgstr ""
"Anda dapat juga menggunakan queryset daripada daftar harfiah dari instance::"

msgid "Querying in the opposite direction::"
msgstr "Meminta di arah berlawanan:"

msgid ""
"Counting in the opposite direction works in conjunction with distinct()::"
msgstr ""
"Menghitung dalam arah berlawanan bekerja dalam hubungan dengan distinct()::"

msgid "Queries can go round in circles::"
msgstr "Permintaan dapat berputar seperti lingkaran::"

msgid ""
"If you delete a reporter, their articles will be deleted (assuming that the "
"ForeignKey was defined with :attr:`django.db.models.ForeignKey.on_delete` "
"set to ``CASCADE``, which is the default)::"
msgstr ""

msgid "You can delete using a JOIN in the query::"
msgstr "Anda dapat menghapus menggunakan JOIN di permintaan::"

msgid "One-to-one relationships"
msgstr "Hubungan satu-ke-satu"

msgid ""
"To define a one-to-one relationship, use :class:`~django.db.models."
"OneToOneField`."
msgstr ""
"Untuk menentukan hubungan satu-ke-satu, gunakan :class:`~django.db.models."
"OneToOneField`."

msgid "In this example, a ``Place`` optionally can be a ``Restaurant``::"
msgstr ""
"Dalam contoh ini, sebuah pilihan ``Place`` dapat menjadi sebuah "
"``Restaurant``::"

msgid "Create a couple of Places::"
msgstr "Buat sepasang Place::"

msgid ""
"Create a Restaurant. Pass the \"parent\" object as this object's primary "
"key::"
msgstr ""

msgid "A Restaurant can access its place::"
msgstr "Sebuah Restaurant dapat mengakses tempatnya::"

msgid "A Place can access its restaurant, if available::"
msgstr "Sebuah Place dapat mengakses restorannya, jika tersedia::"

msgid "p2 doesn't have an associated restaurant::"
msgstr "p2 tidak mempunyai restoran terkait::"

msgid "You can also use ``hasattr`` to avoid the need for exception catching::"
msgstr ""
"Anda dapat juga menggunakan ``hasattr`` untuk menghindari kebutuhan untuk "
"menangkap pengecualian::"

msgid ""
"Set the place using assignment notation. Because place is the primary key on "
"Restaurant, the save will create a new restaurant::"
msgstr ""
"Setel tempat menggunakan penugasan catatan. Karena tempat adalah primary key "
"pada Restaurant, penyimpanan akan membuat sebuah restoran baru::"

msgid "Set the place back again, using assignment in the reverse direction::"
msgstr ""
"Setel tempat kembali lagi, menggunakan penugasan dalam membalikkan arah::"

msgid ""
"Note that you must save an object before it can be assigned to a one-to-one "
"relationship. For example, creating a ``Restaurant`` with unsaved ``Place`` "
"raises ``ValueError``::"
msgstr ""
"Catat bahwa anda harus menyimpan sebuah obyek sebelum itu dapat diberikan ke "
"hubungan one-to-one. Sebagai contoh, membuat ``Restaurant`` dengan ``Place`` "
"tidak disimpan memunculkan ``ValueError``::"

msgid ""
"Restaurant.objects.all() returns the Restaurants, not the Places. Note that "
"there are two restaurants - Ace Hardware the Restaurant was created in the "
"call to r.place = p2::"
msgstr ""

msgid ""
"Place.objects.all() returns all Places, regardless of whether they have "
"Restaurants::"
msgstr ""
"Place.objects.all() mengembalikan semua Places, tanpa memperhatikan apakah "
"mereka mempunyai Restaurants::"

msgid ""
"You can query the models using :ref:`lookups across relationships <lookups-"
"that-span-relationships>`::"
msgstr ""
"Anda dapat meminta model menggunakan :ref:`lookups across relationships "
"<lookups-that-span-relationships>`::"

msgid "This also works in reverse::"
msgstr "Ini juga bekerja pada kebalikannya::"

msgid "Add a Waiter to the Restaurant::"
msgstr "Tambah Waiter ke Restaurant::"

msgid "Query the waiters::"
msgstr "Meminta pelayan::"

msgid "Models and databases"
msgstr "Model dan basisdata"

msgid ""
"A model is the single, definitive source of information about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr ""
"Sebuah model adalah tunggal, sumber pasti dari informasi tentang data anda. "
"Itu mengandung bidang-bdiang penting dan perilaku dari data anda masih "
"sedang menyimpan. Umumnya, stiap model memetakan pada sebuah tabel basisdata "
"tunggal."

msgid "Database instrumentation"
msgstr "Peralatan basisdata"

msgid ""
"To help you understand and control the queries issued by your code, Django "
"provides a hook for installing wrapper functions around the execution of "
"database queries. For example, wrappers can count queries, measure query "
"duration, log queries, or even prevent query execution (e.g. to make sure "
"that no queries are issued while rendering a template with prefetched data)."
msgstr ""
"Untuk membantu anda memahami dan mengendalikan permintaan dengan kode anda, "
"Django menyediakan sebuah kaitan untuk memasang fungsi pembungkus disekitar "
"penjalanan dari permintaan basisdata. Sebagai contoh, pembungkus dapat "
"menghitung permintaan, mengukur lama permintaan, mencatat permintaan, atau "
"bahkan mencegah penjalanan permintaan (sebagai contoh memastikan bahwa tidak "
"ada permintaan diterbitkan selagi membangun cetakan dengan data pra "
"pengambilan)."

msgid ""
"The wrappers are modeled after :doc:`middleware </topics/http/middleware>` "
"-- they are callables which take another callable as one of their arguments. "
"They call that callable to invoke the (possibly wrapped) database query, and "
"they can do what they want around that call. They are, however, created and "
"installed by user code, and so don't need a separate factory like middleware "
"do."
msgstr ""
"Pembungkus-pembungkus dimodelkan setelah :doc:`middleware 1` -- mereka "
"adalah callable yang mengambil callable lain sebagai argumen mereka. Mereka "
"memanggil bahwa callable untuk meminta (kemungkinan dibungkus) permintaan "
"basisdata, dan mereka dapat melakukan apa mereka ingin disekitaran panggilan "
"itu. Mereka adalah, bagaimanapun, dibuat dan dipasang oleh kode pengguna, "
"dan jadi tidak butuh memisahkan factory seperti middleware lakukan."

msgid ""
"Installing a wrapper is done in a context manager -- so the wrappers are "
"temporary and specific to some flow in your code."
msgstr ""
"Memasang sebuah pembungkus selesai dalam sebuah pengelola konteks -- jadi "
"pembungkus adalah sementara dan tertentu pada beberapa alur di kode anda."

msgid ""
"As mentioned above, an example of a wrapper is a query execution blocker. It "
"could look like this::"
msgstr ""
"Seperti disebutkan diatas, sebuah contoh dari sebuah pembungkus adalah "
"penghadang penjalanan permintaan. Itu dapat terlihat seperti ini::"

msgid ""
"And it would be used in a view to block queries from the template like so::"
msgstr ""
"Dan itu akan digunakan dalam sebuah tampilan untuk menghadang permintaan "
"dari cetakan seperti berikut::"

msgid "The parameters sent to the wrappers are:"
msgstr "Parameter dikirim ke pembungkus adalah:"

msgid ""
"``execute`` -- a callable, which should be invoked with the rest of the "
"parameters in order to execute the query."
msgstr ""
":doc:`middleware 1` -- sebuah callable, yang harus diminta dengan sisa dari "
"parameter untuk menjalankan permintaan."

msgid "``sql`` -- a ``str``, the SQL query to be sent to the database."
msgstr "``sql`` -- sebuah ``str``, permintaan SQL dikirim ke basisdata."

msgid ""
"``params`` -- a list/tuple of parameter values for the SQL command, or a "
"list/tuple of lists/tuples if the wrapped call is ``executemany()``."
msgstr ""
"``params`` -- sebuah list/tuple dari nilai-nilai parameter untuk perintah "
"SQL, atau list/tuple dari list/tuple jika panggilan dibungkus adalah "
"``executemany()``."

msgid ""
"``many`` -- a ``bool`` indicating whether the ultimately invoked call is "
"``execute()`` or ``executemany()`` (and whether ``params`` is expected to be "
"a sequence of values, or a sequence of sequences of values)."
msgstr ""
"``many`` -- sebuah ``bool`` menunjukkan akhirnya panggilan dipangil adalah "
"``execute()`` atau ``executemany()`` (dan apakah ``params`` diharapkan "
"menjadi berurut dari nilai-nilai, atau urutan dari urutan-urutan dari nilai-"
"nilai)."

msgid ""
"``context`` -- a dictionary with further data about the context of "
"invocation. This includes the connection and cursor."
msgstr ""
"``context`` -- sebuah dictionary dengan data lebih lanjut tentang konteks "
"dari permohonan. Ini menyertakan hubungan dan kursor."

msgid ""
"Using the parameters, a slightly more complex version of the blocker could "
"include the connection name in the error message::"
msgstr ""
"Menggunakan parameter, versi sedikit lebih rumit dari penghadang dapat "
"menyertakan nama hubungan dalam pesan kesalahan::"

msgid "For a more complete example, a query logger could look like this::"
msgstr ""
"Untuk contoh lebih lengkap, sebuah pencatat permintaan dapat terlihat "
"seperti ini::"

msgid ""
"To use this, you would create a logger object and install it as a wrapper::"
msgstr ""
"Untuk menggunakan ini, anda dapat membuat sebuah obyek pencatat dan memasang "
"itu sebagai pembungkus::"

msgid "``connection.execute_wrapper()``"
msgstr "``connection.execute_wrapper()``"

msgid ""
"Returns a context manager which, when entered, installs a wrapper around "
"database query executions, and when exited, removes the wrapper. The wrapper "
"is installed on the thread-local connection object."
msgstr ""
"Mengembalikan pengeola konteks yang, ketika dimasukkan, memasang sebuah "
"pembungkus disekitar penjalanan permintaan basisdata, dan ketika keluar, "
"memindahkan pembungkus. Pembungkus dipasang pada obyek hubungan lokal-thread."

msgid ""
"``wrapper`` is a callable taking five arguments.  It is called for every "
"query execution in the scope of the context manager, with arguments "
"``execute``, ``sql``, ``params``, ``many``, and ``context`` as described "
"above. It's expected to call ``execute(sql, params, many, context)`` and "
"return the return value of that call."
msgstr ""
"``wrapper`` adalah sebuah callable mengambil lima argumen. Itu dipanggil "
"untuk setiap penjalanan permintaan dalam cakupan dari pengelola konteks, "
"dengan argumen ``execute``, ``sql``, ``params``, ``many``, dan "
"``context`` sebagai digambarkan diatas. Itu diharapkan memanggil "
"``execute(sql, params, many, context)`` dan mengembalikan nilai balikan dari "
"panggilan itu."

msgid "Managers"
msgstr "Pengelola"

msgid ""
"A ``Manager`` is the interface through which database query operations are "
"provided to Django models. At least one ``Manager`` exists for every model "
"in a Django application."
msgstr ""
"Sebuah ``manager`` adalah antarmuka melalui mana tindakan permintaan "
"basisdata disediakan pada model Django. Setidaknya satu ``Manager`` ada "
"untuk setiap model dalam sebuah apliaksi Django."

msgid ""
"The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`; "
"this document specifically touches on model options that customize "
"``Manager`` behavior."
msgstr ""
"Cara kelas-kelas ``Manager`` bekerja didokumentasikan dalam :doc:`/topics/db/"
"queries`; dokumen ini secara khusus menyentuh pada pilihan model yang "
"menyesuaikan perilaku ``Manager``."

msgid "Manager names"
msgstr "Nama pengelola"

msgid ""
"By default, Django adds a ``Manager`` with the name ``objects`` to every "
"Django model class. However, if you want to use ``objects`` as a field name, "
"or if you want to use a name other than ``objects`` for the ``Manager``, you "
"can rename it on a per-model basis. To rename the ``Manager`` for a given "
"class, define a class attribute of type ``models.Manager()`` on that model. "
"For example::"
msgstr ""
"Secara awalan, Django menambah sebuah ``Manager`` dengan nama ``objects`` "
"pada setiap kelas model Django. Bagaimanapun, jika anda ingin menggunakan "
"``objects`` sebagai sebuah nama bidang, atau jika anda ingin menggunakan "
"sebuah nama selain dari ``objects`` untuk ``Manager``, anda dapat menamai "
"kembali itu pada berdasarkan per-model. Untuk menamai kembali ``Manager`` "
"untuk kelas diberikan, tentukan sebuah atribut kelas dari jenis ``models."
"Manager()`` pada model itu. Sebagai contoh::"

msgid ""
"Using this example model, ``Person.objects`` will generate an "
"``AttributeError`` exception, but ``Person.people.all()`` will provide a "
"list of all ``Person`` objects."
msgstr ""
"Menggunakan model contoh ini, ``Person.objects`` akanmembangkitkan sebuah "
"pengecualian ``AttributeError``, tetapi ``Person.people.all()`` akan "
"menyediakan daftar dari semua obyek ``Person``."

msgid "Custom managers"
msgstr "Pengelolaan penyesuaian"

msgid ""
"You can use a custom ``Manager`` in a particular model by extending the base "
"``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""
"Anda dapat menggunakan sebuah penyesuaian ``Manager`` dalam model tertentu "
"dengan memperpanjang kelas ``Manager`` dasar dan menginstansiasi penyesuaian "
"``Manager`` anda dalam model anda."

msgid ""
"There are two reasons you might want to customize a ``Manager``: to add "
"extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the "
"``Manager`` returns."
msgstr ""
"Ada dua alasan anda mungkin ingin menyesuaikan sebuah ``Manager``: untuk "
"menambah metode ``Manager`` tambahan, dan/atau merubah ``QuerySet`` awal "
"kembalian ``Manager``."

msgid "Adding extra manager methods"
msgstr "Menambahkan metode pengelolaan tambahan"

msgid ""
"Adding extra ``Manager`` methods is the preferred way to add \"table-level\" "
"functionality to your models. (For \"row-level\" functionality -- i.e., "
"functions that act on a single instance of a model object -- use :ref:`Model "
"methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""
"Menambahkan metode ``Manager`` tambahan adalah cara disukai untuk menambah "
"fungsionalitas \"table-level\" pada model anda. (Untuk fungsionalitas \"row-"
"level\" -- yaitu yang bertindak pada sebuah instance tunggal dari sebuah "
"obyek model -- gunakan :ref:`Model methods <model-methods>`, bukan "
"penyesuaian metode ``Manager``.)"

msgid "For example, this custom ``Manager`` adds a method ``with_counts()``::"
msgstr ""
"Sebagai contoh,``Manager`` penyesuaian ini menambahkan sebuah metode "
"``with_counts()``::"

msgid ""
"With this example, you'd use ``OpinionPoll.objects.with_counts()`` to get a "
"``QuerySet`` of ``OpinionPoll`` objects with the extra ``num_responses`` "
"attribute attached."
msgstr ""

msgid ""
"A custom ``Manager`` method can return anything you want. It doesn't have to "
"return a ``QuerySet``."
msgstr ""
"Sebuah metode ``Manager`` penyesuaian dapat mengembalikan apapun anda "
"inginkan. Itu tidak harus mengembalikan sebuah ``QuerySet``."

msgid ""
"Another thing to note is that ``Manager`` methods can access ``self.model`` "
"to get the model class to which they're attached."
msgstr ""

msgid "Modifying a manager's initial ``QuerySet``"
msgstr "Merubah ``QuerySet`` awal pengelolaan"

msgid ""
"A ``Manager``’s base ``QuerySet`` returns all objects in the system. For "
"example, using this model::"
msgstr ""
"Dasar ``Manager`` ``QuerySet`` mengembalikan semua obyek-obyek di sistem. "
"Sebagai contoh, menggunakan model ini::"

msgid ""
"...the statement ``Book.objects.all()`` will return all books in the "
"database."
msgstr ""
"...pernyataan ``Book.objects.all()`` akan mengembalikan semua buku-buku di "
"basisdata. "

msgid ""
"You can override a ``Manager``’s base ``QuerySet`` by overriding the "
"``Manager.get_queryset()`` method. ``get_queryset()`` should return a "
"``QuerySet`` with the properties you require."
msgstr ""
"Anda dapat menimpa ``QuerySet`` dasar ``Manager`` dengan menimpa metode "
"``Manager.get_queryset()``. ``get_queryset()`` harus mengembalikan sebuah "
"``QuerySet`` dengan sifat-sifat anda butuhkan."

msgid ""
"For example, the following model has *two* ``Manager``\\s -- one that "
"returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""
"Sebagai contoh, model berikut mempunyai *dua* ``Manager`` -- satu yang "
"mengembalikan semua obyek, dan satu yang mengembalikan hanya buku-buku oleh "
"Roald Dahl::"

msgid ""
"With this sample model, ``Book.objects.all()`` will return all books in the "
"database, but ``Book.dahl_objects.all()`` will only return the ones written "
"by Roald Dahl."
msgstr ""
"Dengan model contoh ini, ``Book.objects.all()`` akan mengembalikan semua "
"buku-buku di basisdata, tetapi ``Book.dahl_objects.all()`` akan hanya "
"mengembalikan satu yang ditulis oleh Roald Dahl."

msgid ""
"Because ``get_queryset()`` returns a ``QuerySet`` object, you can use "
"``filter()``, ``exclude()`` and all the other ``QuerySet`` methods on it. So "
"these statements are all legal::"
msgstr ""

msgid ""
"This example also pointed out another interesting technique: using multiple "
"managers on the same model. You can attach as many ``Manager()`` instances "
"to a model as you'd like. This is a non-repetitive way to define common "
"\"filters\" for your models."
msgstr ""

msgid ""
"This example allows you to request ``Person.authors.all()``, ``Person."
"editors.all()``, and ``Person.people.all()``, yielding predictable results."
msgstr ""
"Contoh ini mengizinkan anda meminta `Person.authors.all()``, ``Person."
"editors.all()``, dan ``Person.people.all()``, menghasilkan hasil dapat "
"diramalkan."

msgid "Default managers"
msgstr "Pengelola awal"

msgid ""
"If you use custom ``Manager`` objects, take note that the first ``Manager`` "
"Django encounters (in the order in which they're defined in the model) has a "
"special status. Django interprets the first ``Manager`` defined in a class "
"as the \"default\" ``Manager``, and several parts of Django (including :"
"djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. As "
"a result, it's a good idea to be careful in your choice of default manager "
"in order to avoid a situation where overriding ``get_queryset()`` results in "
"an inability to retrieve objects you'd like to work with."
msgstr ""
"Jika anda menggunakan obyek ``Manager`` penyesuaian, ambil catatan bahwa "
"``Manager`` Django pertama hadapi (dalam urutan dimana mereka ditentukan "
"dalam model) mempunyai sebuah keadaan khusus. Django menafsirkan ``Manager`` "
"pertama ditentukan dalam sebuah kelas sebagai ``Manager`` \"default\", dan "
"beberapa bagian dari Django (termasuk :djadmin:`dumpdata`) akan menggunakan "
"yang ``Manager`` khusus untuk model itu. Sebagai sebuah hasil, itu adalah "
"ide bagus untuk hati-hati dalam pilihan anda dari pengelola awalan untuk "
"menghindari keadan dimana menimpa hasil ``get_queryset()`` dalam sebuah "
"ketidakmampuan mengambil obyek-obyek anda sukai bekerja dengannya."

msgid ""
"You can specify a custom default manager using :attr:`Meta."
"default_manager_name <django.db.models.Options.default_manager_name>`."
msgstr ""
"Anda dapat menentukan sebuah penyesuaian pengelolaan awalan menggunakan :"
"attr:`Meta.default_manager_name <django.db.models.Options."
"default_manager_name>`."

msgid ""
"If you're writing some code that must handle an unknown model, for example, "
"in a third-party app that implements a generic view, use this manager (or :"
"attr:`~Model._base_manager`) rather than assuming the model has an "
"``objects`` manager."
msgstr ""
"Jika anda sedang menulis beberapa kode yang harus menangani sebuah model "
"tidak dikenal, sebagai contoh, dalam sebuah aplikasi pihak-ketiga yang "
"menerapkan sebuah tampilan umum, gunakan pengelola ini (atau :attr:`~Model."
"_base_manager`) daripada beranggapan model mempunyai sebuah pengelola "
"``objects``."

msgid "Base managers"
msgstr "Pengelolaan dasar"

msgid "Using managers for related object access"
msgstr "Menggunakan pengelola untuk akses obyek terkait"

msgid ""
"By default, Django uses an instance of the ``Model._base_manager`` manager "
"class when accessing related objects (i.e. ``choice.question``), not the "
"``_default_manager`` on the related object. This is because Django needs to "
"be able to retrieve the related object, even if it would otherwise be "
"filtered out (and hence be inaccessible) by the default manager."
msgstr ""
"Secara awalan, Django menggunakan sebuah instance dari kelas pengelola "
"``Model._base_manager`` ketika mengakses obyek terkait (yaitu ``choice."
"question``), bukan ``_default_manager`` pada obyek terkait. Ini karena "
"Django butuh dapat mengambil obyek terkait, bahkan jika itu akan sebaliknya "
"disaring (dan karenanya tidak dapat diakses) oleh pengelola awalan."

msgid ""
"If the normal base manager class (:class:`django.db.models.Manager`) isn't "
"appropriate for your circumstances, you can tell Django which class to use "
"by setting :attr:`Meta.base_manager_name <django.db.models.Options."
"base_manager_name>`."
msgstr ""
"Jika kelas pengelola dasar biasa (:class:`django.db.models.Manager`) tidak "
"sesuai untuk keadaan anda, anda dapat memberitahu Django kelas mana "
"digunakan oleh pengaturan :attr:`Meta.base_manager_name <django.db.models."
"Options.base_manager_name>`."

msgid ""
"Base managers aren't used when querying on related models, or when :ref:"
"`accessing a one-to-many or many-to-many relationship <backwards-related-"
"objects>`. For example, if the ``Question`` model :ref:`from the tutorial "
"<creating-models>` had a ``deleted`` field and a base manager that filters "
"out instances with ``deleted=True``, a queryset like ``Choice.objects."
"filter(question__name__startswith='What')`` would include choices related to "
"deleted questions."
msgstr ""

msgid "Don't filter away any results in this type of manager subclass"
msgstr "Jangan menyaring hasil apapun dalam jenis ini dari pengelola subkelas"

msgid ""
"This manager is used to access objects that are related to from some other "
"model. In those situations, Django has to be able to see all the objects for "
"the model it is fetching, so that *anything* which is referred to can be "
"retrieved."
msgstr ""
"Pengelola ini digunakan untuk mengakses obyek yang terkait pada dari "
"beberapa model lain. Dalam keadaan tersebut, Django harus dapat melihat "
"semua obyek untuk model itu sedang diambil, sehingga *apapun* yang mengacu "
"dapat diambil."

msgid ""
"Therefore, you should not override ``get_queryset()`` to filter out any "
"rows. If you do so, Django will return incomplete results."
msgstr ""

msgid "Calling custom ``QuerySet`` methods from the manager"
msgstr "Memanggil metode ``QuerySet`` penyesuaian dari pengelola"

msgid ""
"While most methods from the standard ``QuerySet`` are accessible directly "
"from the ``Manager``, this is only the case for the extra methods defined on "
"a custom ``QuerySet`` if you also implement them on the ``Manager``::"
msgstr ""
"Selagi kebanyakan metode dari ``QuerySet`` standar dapat diakses langsung "
"dari ``Manager``, ini hanya kasus untuk metode tambahan ditentukan pada "
"sebuah penyesuaian ``QuerySet`` jika anda juga menerapkan mereka pada "
"``Manager``::"

msgid ""
"This example allows you to call both ``authors()`` and ``editors()`` "
"directly from the manager ``Person.people``."
msgstr ""
"Contoh ini mengizinkan anda memanggil kedua ``authors()`` dan ``editors()`` "
"secara langsung dari pengelola ``Person.people``."

msgid "Creating a manager with ``QuerySet`` methods"
msgstr "Membuat pengelola dengan cara ``QuerySet``"

msgid ""
"In lieu of the above approach which requires duplicating methods on both the "
"``QuerySet`` and the ``Manager``, :meth:`QuerySet.as_manager() <django.db."
"models.query.QuerySet.as_manager>` can be used to create an instance of "
"``Manager`` with a copy of a custom ``QuerySet``’s methods::"
msgstr ""
"Sebagai pengganti dari pendekatan diatas yang membutuhkan metode penggandaan "
"pada kedua ``QuerySet`` dan ``Manager``, :meth:`QuerySet.as_manager() "
"<django.db.models.query.QuerySet.as_manager>` dapat digunakan untuk membuat "
"sebuah instance dari ``Manager`` dengan salinan dari sebuah metode "
"``QuerySet`` penyesuaian::"

msgid ""
"The ``Manager`` instance created by :meth:`QuerySet.as_manager() <django.db."
"models.query.QuerySet.as_manager>` will be virtually identical to the "
"``PersonManager`` from the previous example."
msgstr ""
"Instance ``Manager`` dibuat oleh :meth:`QuerySet.as_manager() <django.db."
"models.query.QuerySet.as_manager>` akan secara virtual mirip pada "
"``PersonManager`` dari contoh sebelumnya."

msgid ""
"Not every ``QuerySet`` method makes sense at the ``Manager`` level; for "
"instance we intentionally prevent the :meth:`QuerySet.delete() <django.db."
"models.query.QuerySet.delete>` method from being copied onto the ``Manager`` "
"class."
msgstr ""
"Tidak setiap metode ``QuerySet`` masuk akal pada tingkat ``Manager``; "
"sebagai contoh kami sengaja mencegah metode :meth:`QuerySet.delete() <django."
"db.models.query.QuerySet.delete>` dari menjadi disalin ke atas kelas "
"``Manager``."

msgid "Methods are copied according to the following rules:"
msgstr "Cara disalin berdasarkan aturan berikut:"

msgid "Public methods are copied by default."
msgstr "Cara umum disalin secara awal."

msgid ""
"Private methods (starting with an underscore) are not copied by default."
msgstr ""
"Metode pribadi (mulai dengan sebuah garis bawah) tidak disalin secara awalan."

msgid ""
"Methods with a ``queryset_only`` attribute set to ``False`` are always "
"copied."
msgstr ""
"Metode dengan atribut ``queryset_only`` disetel menjadi ``False`` adalah "
"selalu disalin."

msgid ""
"Methods with a ``queryset_only`` attribute set to ``True`` are never copied."
msgstr ""
"Metode dengan atribut ``queryset_only`` disetel menjadi ``True`` adalah "
"tidak pernah disalin."

msgid "``from_queryset()``"
msgstr "``from_queryset()``"

msgid ""
"For advanced usage you might want both a custom ``Manager`` and a custom "
"``QuerySet``. You can do that by calling ``Manager.from_queryset()`` which "
"returns a *subclass* of your base ``Manager`` with a copy of the custom "
"``QuerySet`` methods::"
msgstr ""
"Untuk penggunaan lanjutan anda mungkin ingin kedua penyesuaian ``Manager`` "
"dan penyesuaian ``QuerySet``. Anda dapat melakukan itu dengan memanggil "
"``Manager.from_queryset()`` yang mengembalikan sebuah *subkelas* dari dasar "
"``Manager`` anda dengan salinan dari metode ``QuerySet`` penyesuaian::"

msgid "You may also store the generated class into a variable::"
msgstr ""
"Anda mungkin juga menyimpan kelas dibangkitkan kedalam sebuah variabel::"

msgid "Custom managers and model inheritance"
msgstr "Pengelolaan penyesuaian dan warisan model"

msgid ""
"Here's how Django handles custom managers and :ref:`model inheritance <model-"
"inheritance>`:"
msgstr ""
"Ini adalah bagaimana Django menangani pengelolaan penyesuaian dan :ref:"
"`model inheritance <model-inheritance>`:"

msgid ""
"Managers from base classes are always inherited by the child class, using "
"Python's normal name resolution order (names on the child class override all "
"others; then come names on the first parent class, and so on)."
msgstr ""
"Pengelola dari kelas-kelas dasar selalu diwarisi oleh anak kelas, "
"menggunakan urutan resolusi nama biasa Python (nama pada kelas anan menimpa "
"semua lainnya; kemudian datang nama pada kelas induk pertama, dan "
"seterusnya)."

msgid ""
"If no managers are declared on a model and/or its parents, Django "
"automatically creates the ``objects`` manager."
msgstr ""
"Jika tidak ada pengelola dinyatakan pada model dan/atau induknya, Django "
"secara otomatis membuat pengelola ``objects``."

msgid ""
"The default manager on a class is either the one chosen with :attr:`Meta."
"default_manager_name <django.db.models.Options.default_manager_name>`, or "
"the first manager declared on the model, or the default manager of the first "
"parent model."
msgstr ""
"Pengelola awalan pada sebuah kelas adalah antara satu dipilih dengan :attr:"
"`Meta.default_manager_name <django.db.models.Options.default_manager_name>`, "
"atau pengelola pertama dinyatakan pada model, atau pengelola awalan dari "
"model induk pertama."

msgid ""
"These rules provide the necessary flexibility if you want to install a "
"collection of custom managers on a group of models, via an abstract base "
"class, but still customize the default manager. For example, suppose you "
"have this base class::"
msgstr ""
"Aturan-aturan ini menyediakan keluwesan yang dibutuhkan jika anda ingin "
"memasang sebuah kumpulan dari penyesuaian pengelola pada sekelompok model, "
"melalui sebuah kelas dasar, tetapi masih menyesuaikan pengelola awalan. "
"Sebagai contoh, misalkan anda mempunyai kelas dasar ini::"

msgid ""
"If you use this directly in a subclass, ``objects`` will be the default "
"manager if you declare no managers in the base class::"
msgstr ""
"Jika anda menggunakan ini langsung di sebuah subkelas, ``objects`` akan "
"berupa pengelola awalan jika anda menyatakan tidak ada pengelola di kelas "
"dasar::"

msgid ""
"If you want to inherit from ``AbstractBase``, but provide a different "
"default manager, you can provide the default manager on the child class::"
msgstr ""
"Jika anda ingin mewarisi dari ``AbstractBase``, tetapi menyediakan pengelola "
"awalan berbeda, anda dapat menyediakan pengelola awalan pada kelas anak::"

msgid ""
"Here, ``default_manager`` is the default. The ``objects`` manager is still "
"available, since it's inherited, but isn't used as the default."
msgstr ""

msgid ""
"Finally for this example, suppose you want to add extra managers to the "
"child class, but still use the default from ``AbstractBase``. You can't add "
"the new manager directly in the child class, as that would override the "
"default and you would have to also explicitly include all the managers from "
"the abstract base class. The solution is to put the extra managers in "
"another base class and introduce it into the inheritance hierarchy *after* "
"the defaults::"
msgstr ""
"Akhirnya untuk contoh ini, misalkan anda ingin menambah pengelola tambahan "
"pada kelas anak, tetapi masih menggunakan awalan dari ``AbstractBase``. Anda "
"tidak dapat menambah pengelola baru langsung dalam kelas anak, seperti itu "
"akan menimpa awalan dan anda akan juga jelas menyertakan semua pengelola "
"dari kelas dasar abstrak. Pemecahannya adalah menaruh pengelola tambahan "
"dalam kelas dasar lain dan memperkenalkan itu kedalam hirarki warisan "
"*setelah* awalan::"

msgid ""
"Note that while you can *define* a custom manager on the abstract model, you "
"can't *invoke* any methods using the abstract model. That is::"
msgstr ""
"Catat bahwa selagi anda dapat *menentukan* pengelolaan penyesuaian pada "
"model abstrak, anda tidak dapat *meminta* metode apapun menggunakan model "
"abstrak. Yaitu::"

msgid "is legal, but::"
msgstr "legal, tetapi::"

msgid ""
"will raise an exception. This is because managers are intended to "
"encapsulate logic for managing collections of objects. Since you can't have "
"a collection of abstract objects, it doesn't make sense to be managing them. "
"If you have functionality that applies to the abstract model, you should put "
"that functionality in a ``staticmethod`` or ``classmethod`` on the abstract "
"model."
msgstr ""
"akan memunculkan sebuah pengecualian. Ini karena pengelola bermaksud untuk "
"mengenkapsulasi logika untuk mengelola kumpulan dari obyek. Sejak anda tidak "
"dapat mempunyai sebuah kumpulan dari obyek-obyek abstrak, itu tidak masuk "
"akal untuk mengelola mereka. Jika anda mempunyai fungsionalitas yang berlaku "
"pada model abstrak, anda harus menaruh fungsionalitas itu dalam sebuah "
"``staticmethod`` atau ``classmethod`` pada model abstrak."

msgid "Implementation concerns"
msgstr "Perhatian penerapan"

msgid ""
"Whatever features you add to your custom ``Manager``, it must be possible to "
"make a shallow copy of a ``Manager`` instance; i.e., the following code must "
"work::"
msgstr ""
"Fitur-fitur apapun anda tambahkan ke ``Manager`` penyesuaian anda, itu harus "
"mungkin untuk membuat salinan dangkal dari sebuah instance ``Manager``; "
"yaitu, kode berikut harus bekerja::"

msgid ""
"Django makes shallow copies of manager objects during certain queries; if "
"your Manager cannot be copied, those queries will fail."
msgstr ""
"Django membuat salinan dangkal dari obyek-obyek pengelola selama permintaan "
"tertentu; jika Manager anda tidak dapat disalin, permintaan itu akan gagal."

msgid ""
"This won't be an issue for most custom managers. If you are just adding "
"simple methods to your ``Manager``, it is unlikely that you will "
"inadvertently make instances of your ``Manager`` uncopyable. However, if "
"you're overriding ``__getattr__`` or some other private method of your "
"``Manager`` object that controls object state, you should ensure that you "
"don't affect the ability of your ``Manager`` to be copied."
msgstr ""
"Ini tidak akan menjadi sebuah masalah untuk kebanyakan pengelola "
"penyesuaian. Jika anda hanya menambahkan metode sederhana ke ``Manager`` "
"anda, itu tidak mungkin bahwa anda akan secara tidak sengaja membuat "
"instance-instance dari tidak dapat disalin ``Manager`` anda. Bagaimanapun, "
"jika anda menimpa ``__getattr__`` atau beberapa metode pribadi lain dari "
"obyek ``Manager`` anda yang mengendalikan keadaan obyek, anda harus "
"memastikan bahwa anda tidak mempengaruhi kemampuan dari ``Manager`` anda "
"untuk disalin."

msgid "Models"
msgstr "Model"

msgid "The basics:"
msgstr "Dasar:"

msgid ""
"Each model is a Python class that subclasses :class:`django.db.models.Model`."
msgstr ""
"Setiap model adalah kelas Python yang subkelas :class:`django.db.models."
"Model`. "

msgid "Each attribute of the model represents a database field."
msgstr "Setiap atribut dari model mewakili bidang basisdata."

msgid ""
"With all of this, Django gives you an automatically-generated database-"
"access API; see :doc:`/topics/db/queries`."
msgstr ""
"Dengan semua ini, Django memberikan API akses-basisdata dibangkitkan-"
"otomatis; lihat :doc:`/topics/db/queries`."

msgid "Quick example"
msgstr "Contoh cepat"

msgid ""
"This example model defines a ``Person``, which has a ``first_name`` and "
"``last_name``::"
msgstr ""
"Model contoh ini menentukan ``Person``, yang mempunyai ``first_name`` dan "
"``last_name``::"

msgid ""
"``first_name`` and ``last_name`` are fields_ of the model. Each field is "
"specified as a class attribute, and each attribute maps to a database column."
msgstr ""
"``first_name`` dan ``last_name`` adalah fields_ dari model. Setiap bidang "
"ditentukan sebagai atribut kelas, dan setiap atribut memetakan pada sebuah "
"kolom basisdata."

msgid "The above ``Person`` model would create a database table like this:"
msgstr ""
"Model ``Person`` diatas akan membuat sebuah tabel basisdata seperti ini::"

msgid "Some technical notes:"
msgstr "Beberapa catatan teknis:"

msgid ""
"The name of the table, ``myapp_person``, is automatically derived from some "
"model metadata but can be overridden. See :ref:`table-names` for more "
"details."
msgstr ""
"Nama dari tabel, ``myapp_person``, otomatis berasal dari beberapa metadata "
"model tetapi dapat ditimpa. Lihat :ref:`table-names` untuk rincian lebih."

msgid ""
"An ``id`` field is added automatically, but this behavior can be overridden. "
"See :ref:`automatic-primary-key-fields`."
msgstr ""
"Sebuah bidang ``id`` ditambahkan secara otomatis, tetapi perilaku ini dapat "
"dikesampingkan. Lihat :ref:`automatic-primary-key-fields`."

msgid ""
"The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL "
"syntax, but it's worth noting Django uses SQL tailored to the database "
"backend specified in your :doc:`settings file </topics/settings>`."
msgstr ""
"SQL ``CREATE TABLE`` dalam contoh ini dibentuk menggunakan sintaksis "
"PostgreSQL, tetapi itu perlu dicatat Django menggunakan SQL disesuaikan pada "
"backend basisdata ditentukan dalam :doc:`settings file </topics/settings>` "
"anda."

msgid "Using models"
msgstr "Menggunakan model"

msgid ""
"Once you have defined your models, you need to tell Django you're going to "
"*use* those models. Do this by editing your settings file and changing the :"
"setting:`INSTALLED_APPS` setting to add the name of the module that contains "
"your ``models.py``."
msgstr ""
"Sekali anda telah menentukan model anda, anda butuh memberitahu Django anda "
"sedang akan *menggunakan* model-model tersebut. Lakukan ini dengan "
"menyunting berkas pengaturan anda dan merubah pengaturan :setting:"
"`INSTALLED_APPS` untuk menambah nama dari modul yang mengandung ``models."
"py`` anda."

msgid ""
"For example, if the models for your application live in the module ``myapp."
"models`` (the package structure that is created for an application by the :"
"djadmin:`manage.py startapp <startapp>` script), :setting:`INSTALLED_APPS` "
"should read, in part::"
msgstr ""
"Sebagai contoh, jika model-model untuk aplikasi anda tinggal dalam modul "
"``myapp.models`` (struktur paket yang dibuat untuk sebuah aplikasi oleh "
"tulisan :djadmin:`manage.py startapp <startapp>`), :setting:`INSTALLED_APPS` "
"harus membaca, dalam bagian::"

msgid ""
"When you add new apps to :setting:`INSTALLED_APPS`, be sure to run :djadmin:"
"`manage.py migrate <migrate>`, optionally making migrations for them first "
"with :djadmin:`manage.py makemigrations <makemigrations>`."
msgstr ""
"Ketika anda menambah aplikasi baru pada :setting:`INSTALLED_APPS`, pastikan "
"menjalankan :djadmin:`manage.py migrate <migrate>`, pilihannya membuat "
"perpindahan untuk mereka dahulu dengan :djadmin:`manage.py makemigrations "
"<makemigrations>`."

msgid "Fields"
msgstr "Bidang"

msgid ""
"The most important part of a model -- and the only required part of a model "
"-- is the list of database fields it defines. Fields are specified by class "
"attributes. Be careful not to choose field names that conflict with the :doc:"
"`models API </ref/models/instances>` like ``clean``, ``save``, or ``delete``."
msgstr ""
"Bagian paling penting dari sebuah model -- dan hanya membutuhkan bagian dari "
"sebah model -- adalah daftar bidang basisdata itu tentukan. Bidang-bidang "
"ditentukan oleh atribut kelas. Hati-hati tidak memilih nama bidang yang "
"bertentangan dengan :doc:`models API </ref/models/instances>` seperti "
"``clean``, ``save``, atau ``delete``."

msgid "Example::"
msgstr "Contoh::"

msgid "Field types"
msgstr "Jenis bidang"

msgid ""
"Each field in your model should be an instance of the appropriate :class:"
"`~django.db.models.Field` class. Django uses the field class types to "
"determine a few things:"
msgstr ""
"Setiap bidang dalam model anda harus berupa sebuah instance dari kelas :"
"class:`~django.db.models.Field` sesuai. Django menggunakan jenis kelas "
"bidang untuk menentukan sedikit hal:"

msgid ""
"The column type, which tells the database what kind of data to store (e.g. "
"``INTEGER``, ``VARCHAR``, ``TEXT``)."
msgstr ""
"Jenis kolom, yang memberitahu basisdata maca apa dari data disimpan (sebagai "
"contoh ``INTEGER``, ``VARCHAR``, ``TEXT``)."

msgid ""
"The default HTML :doc:`widget </ref/forms/widgets>` to use when rendering a "
"form field (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr ""
"HTML awalan :doc:`widget </ref/forms/widgets>` untuk digunakan ketika "
"membangun sebuah bidang formulir (sebagai contoh ``<input type=\"text\">``, "
"``<select>``)."

msgid ""
"The minimal validation requirements, used in Django's admin and in "
"automatically-generated forms."
msgstr ""
"Persyaratan pengesahan minimal, digunakan di admin Django dan di formulir "
"dibangkitkan-otomatis."

msgid ""
"Django ships with dozens of built-in field types; you can find the complete "
"list in the :ref:`model field reference <model-field-types>`. You can easily "
"write your own fields if Django's built-in ones don't do the trick; see :doc:"
"`/howto/custom-model-fields`."
msgstr ""
"Django dibekali dengan lusinan dari jenis-jenis siap pakai; anda dapat "
"menemukan daftar lengkap dalam :ref:`model field reference <model-field-"
"types>`. Anda dapat dengan mudah menulis bidang-bidang anda sendiri jika "
"satu siap-pakai Django tidak melakukan trik; lihat :doc:`/howto/custom-model-"
"fields`."

msgid "Field options"
msgstr "Pilihan bidang"

msgid ""
"Each field takes a certain set of field-specific arguments (documented in "
"the :ref:`model field reference <model-field-types>`). For example, :class:"
"`~django.db.models.CharField` (and its subclasses) require a :attr:`~django."
"db.models.CharField.max_length` argument which specifies the size of the "
"``VARCHAR`` database field used to store the data."
msgstr ""
"Setiap bidang-bidang mengambil kumpulan tertentu dari argumen bidang-"
"tertentu (didokumentasikan dalam :ref:`model field reference <model-field-"
"types>`). Sebagai contoh, :class:`~django.db.models.CharField` (dan "
"subkelasnya) membutuhkan sebuah argumen :attr:`~django.db.models.CharField."
"max_length` yang menentukan ukuran dari bidang basisdata ``VARCHAR`` "
"digunakan untuk menyimpan data."

msgid ""
"There's also a set of common arguments available to all field types. All are "
"optional. They're fully explained in the :ref:`reference <common-model-field-"
"options>`, but here's a quick summary of the most often-used ones:"
msgstr ""
"Ada juga sekumpulan dari argumen umum tersedia pada semua jenis bidang. "
"Semua adalah pilihan. Mereka sepenuhnya dijelaskan dalam :ref:`reference "
"<common-model-field-options>`, tetapi ini adalah ringkasan cepat dari satu "
"kebanyakan sering-digunakan:"

msgid ":attr:`~Field.null`"
msgstr ":attr:`~Field.null`"

msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""
"Jika ``True``, Django akan menyimpan nilai-nilai kosong sebagai ``NULL`` di "
"basisdata. Awalan adalah ``False``."

msgid ":attr:`~Field.blank`"
msgstr ":attr:`~Field.blank`"

msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""
"Jika ``True``, bidang diizinkan menjadi kosong. Awalan adalah ``False``."

msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is "
"purely database-related, whereas :attr:`~Field.blank` is validation-related. "
"If a field has :attr:`blank=True <Field.blank>`, form validation will allow "
"entry of an empty value. If a field has :attr:`blank=False <Field.blank>`, "
"the field will be required."
msgstr ""
"Catat bahwa ini berbeda dari :attr:`~Field.null`. :attr:`~Field.null`murni "
"basisdata-terkait, dimana attr:`~Field.blank` adalah pengesahan-terkait. "
"Jika sebuah bidang mempunyai :attr:`blank=True <Field.blank>`, pengesahan "
"formulir akan mengizinkan masukan dari sebuah nilai kosong. Jika sebuah "
"bidang mempunyai :attr:`blank=False <Field.blank>`, bidang akan diwajibkan."

msgid ":attr:`~Field.choices`"
msgstr ":attr:`~Field.choices`"

msgid ""
"A :term:`sequence` of 2-tuples to use as choices for this field. If this is "
"given, the default form widget will be a select box instead of the standard "
"text field and will limit choices to the choices given."
msgstr ""

msgid "A choices list looks like this::"
msgstr "Daftar pilihan kelihatan seperti ini::"

msgid "A new migration is created each time the order of ``choices`` changes."
msgstr ""

msgid ""
"The first element in each tuple is the value that will be stored in the "
"database. The second element is displayed by the field's form widget."
msgstr ""
"Unsur pertama dalam setiap tuple adalah nilaiyang akan disimpan dalam "
"basisdata. Unsur kedua ditampilkan oleh widget formulir bidang."

msgid ""
"Given a model instance, the display value for a field with ``choices`` can "
"be accessed using the :meth:`~django.db.models.Model.get_FOO_display` "
"method. For example::"
msgstr ""
"Diberikan sebuah instance model, nilai tampilan untuk sebuah bidang dengan "
"``choices`` dapat diakses menggunakan metode :meth:`~django.db.models.Model."
"get_FOO_display`. Sebagai contoh::"

msgid ""
"You can also use enumeration classes to define ``choices`` in a concise way::"
msgstr ""

msgid ""
"Further examples are available in the :ref:`model field reference <field-"
"choices>`."
msgstr ""
"Contoh-contoh lebih jauh tersedia dalam :ref:`model field reference <field-"
"choices>`."

msgid ":attr:`~Field.default`"
msgstr ":attr:`~Field.default`"

msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""
"Nilai awalan untuk bidang. Ini dapat berupa nilai atau obyek callable. Jika "
"callable itu akan diapnggil setiap waktu obyek baru dibuat."

msgid ":attr:`~Field.help_text`"
msgstr ":attr:`~Field.help_text`"

msgid ""
"Extra \"help\" text to be displayed with the form widget. It's useful for "
"documentation even if your field isn't used on a form."
msgstr ""
"Teks \"help\" tambahan untuk ditampilkan dengan widget formulir. Itu sangat "
"berguna untuk dokumentasi bahkan jika bidang anda tidak digunakan pada "
"formulir."

msgid ":attr:`~Field.primary_key`"
msgstr ":attr:`~Field.primary_key`"

msgid "If ``True``, this field is the primary key for the model."
msgstr "Jika ``True``, bidang ini adalah primary key untuk model."

msgid ""
"If you don't specify :attr:`primary_key=True <Field.primary_key>` for any "
"fields in your model, Django will automatically add an :class:`IntegerField` "
"to hold the primary key, so you don't need to set :attr:`primary_key=True "
"<Field.primary_key>` on any of your fields unless you want to override the "
"default primary-key behavior. For more, see :ref:`automatic-primary-key-"
"fields`."
msgstr ""
"Jika anda tidak menentukan :attr:`primary_key=True <Field.primary_key>` "
"untuk tiap bidang di model anda, Django akan otomatis menambahkan sebuah :"
"class:`IntegerField` untuk menahan primary key, jadi anda tidak butuh "
"menyetel :attr:`primary_key=True <Field.primary_key>` pada tiap bidang anda "
"meskipun anda ingin menimpa kebiasaan primary-key awalan. Untuk lebih, "
"lihat :ref:`automatic-primary-key-fields`."

msgid ""
"The primary key field is read-only. If you change the value of the primary "
"key on an existing object and then save it, a new object will be created "
"alongside the old one. For example::"
msgstr ""
"Bidang kunci utama adalah hanya-baca. Jika anda merubah nilai dari primaru "
"key pada sebuah obyek yang ada dan kemudian menyimpan itu, sebuah obyek baru "
"akan dibuat bersama satu yang lama. Sebagai contoh::"

msgid ":attr:`~Field.unique`"
msgstr ":attr:`~Field.unique`"

msgid "If ``True``, this field must be unique throughout the table."
msgstr "Jika ``True``, bidang ini harus unik diseluruh tabel."

msgid ""
"Again, these are just short descriptions of the most common field options. "
"Full details can be found in the :ref:`common model field option reference "
"<common-model-field-options>`."
msgstr ""
"Lagi, ini hanya gambaran pendek dari kebanyakan pilihan bidang umum. Rincian "
"penuh dapat ditemukan di :ref:`common model field option reference <common-"
"model-field-options>`."

msgid "Automatic primary key fields"
msgstr "Bidang primary key otomatis"

msgid ""
"By default, Django gives each model an auto-incrementing primary key with "
"the type specified per app in :attr:`AppConfig.default_auto_field <django."
"apps.AppConfig.default_auto_field>` or globally in the :setting:"
"`DEFAULT_AUTO_FIELD` setting. For example::"
msgstr ""

msgid ""
"If you'd like to specify a custom primary key, specify :attr:"
"`primary_key=True <Field.primary_key>` on one of your fields. If Django sees "
"you've explicitly set :attr:`Field.primary_key`, it won't add the automatic "
"``id`` column."
msgstr ""

msgid ""
"Each model requires exactly one field to have :attr:`primary_key=True <Field."
"primary_key>` (either explicitly declared or automatically added)."
msgstr ""
"Setiap model membutuhkan setidaknya satu bidang untuk memiliki :attr:"
"`primary_key=True <Field.primary_key>` (antara dinyatakan jelas atau "
"ditambahkan otomatis)."

msgid ""
"In older versions, auto-created primary key fields were always :class:"
"`AutoField`\\s."
msgstr ""

msgid "Verbose field names"
msgstr "Nama-nama bidang bertele-tele"

msgid ""
"Each field type, except for :class:`~django.db.models.ForeignKey`, :class:"
"`~django.db.models.ManyToManyField` and :class:`~django.db.models."
"OneToOneField`, takes an optional first positional argument -- a verbose "
"name. If the verbose name isn't given, Django will automatically create it "
"using the field's attribute name, converting underscores to spaces."
msgstr ""
"Setiap jenis bidang, kecuali untuk :class:`~django.db.models.ForeignKey`, :"
"class:`~django.db.models.ManyToManyField` dan :class:`~django.db.models."
"OneToOneField`, mengambil sebuah pilihan argumen penempatan pertama -- "
"sebuah nama bertele-tele. Jika nama bertele-tele tidak diberikan, DJango "
"akan otomatis membuat itu menggunakan nama atribut bidang, merubah garis "
"bawah menjadi ruang."

msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr ""
"Dalam contoh ini, nama bertele-tele adalah ``\"person's first name\"``::"

msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr "Dalam contoh ini, nama bertele-tele adalah ``\"first name\"``::"

msgid ""
":class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` and :class:`~django.db.models.OneToOneField` require the "
"first argument to be a model class, so use the :attr:`~Field.verbose_name` "
"keyword argument::"
msgstr ""
":class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` dan :class:`~django.db.models.OneToOneField` membutuhkan "
"argumen pertama untuk jadi kelas model, jadi gunakan argumen kata kunci :"
"attr:`~Field.verbose_name`::"

msgid ""
"The convention is not to capitalize the first letter of the :attr:`~Field."
"verbose_name`. Django will automatically capitalize the first letter where "
"it needs to."
msgstr ""
"Kebiasaan tidak menghuruf besarkan huruf pertama dari :attr:`~Field."
"verbose_name`. Django akan otomatis menghuruf besarkan huruf pertama dimana "
"itu dibutuhkan."

msgid "Relationships"
msgstr "Hubungan"

msgid ""
"Clearly, the power of relational databases lies in relating tables to each "
"other. Django offers ways to define the three most common types of database "
"relationships: many-to-one, many-to-many and one-to-one."
msgstr ""
"Jelas, kekuatan dari hubungan basisdata bergantung dalam tabel berkaitan ke "
"setiap lainnya. Django menawarkan cara menentukan tiga jenis paling umum "
"dari hubungan basisdata: many-to-one, many-to-many dan one-to-one."

msgid ""
"To define a many-to-one relationship, use :class:`django.db.models."
"ForeignKey`. You use it just like any other :class:`~django.db.models.Field` "
"type: by including it as a class attribute of your model."
msgstr ""
"Untuk menentukan hubungan many-to-one, gunakan :class:`~django.db.models."
"ForeignKey`. Anda menggunakan itu seperti jenis :class:`~django.db.models."
"Field` lainnya: dengan menyertakan itu sebagai sebuah atribut kelas dari "
"model anda."

msgid ""
":class:`~django.db.models.ForeignKey` requires a positional argument: the "
"class to which the model is related."
msgstr ""
":class:`~django.db.models.ForeignKey` membutuhkan sebuah argumen penempatan: "
"kelas dimana model terkait."

msgid ""
"For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a "
"``Manufacturer`` makes multiple cars but each ``Car`` only has one "
"``Manufacturer`` -- use the following definitions::"
msgstr ""
"Sebagai contoh, jika sebuah model ``Car`` mempunyai ``Manufacturer`` -- "
"yaitu, ``Manufacturer`` membuat banyak mobil tetapi setiap ``car`` hanya "
"mempunyai satu ``Manufacturer`` -- gunakan pengertian berikut::"

msgid ""
"You can also create :ref:`recursive relationships <recursive-relationships>` "
"(an object with a many-to-one relationship to itself) and :ref:"
"`relationships to models not yet defined <lazy-relationships>`; see :ref:"
"`the model field reference <ref-foreignkey>` for details."
msgstr ""
"Anda dapat juga membuat :ref:`recursive relationships <recursive-"
"relationships>` (sebuah obyek dengan hubungan many-to-one ke diri sendiri) "
"dan :ref:`relationships to models not yet defined <lazy-relationships>`; "
"lihat :ref:`the model field reference <ref-foreignkey>` untuk rincian."

msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ForeignKey` field (``manufacturer`` in the example above) be the name "
"of the model, lowercase. You can call the field whatever you want. For "
"example::"
msgstr ""

msgid ""
":class:`~django.db.models.ForeignKey` fields accept a number of extra "
"arguments which are explained in :ref:`the model field reference <foreign-"
"key-arguments>`. These options help define how the relationship should work; "
"all are optional."
msgstr ""
"Bidang :class:`~django.db.models.ForeignKey` menerima sejumlah dari argumen "
"tambahan yang dijelaskan dalam :ref:`the model field reference <foreign-key-"
"arguments>`. Pilihan-pilihan ini membantu menentukan bagaimana hubungan "
"harus bekerja; semua adalah pilihan."

msgid ""
"For details on accessing backwards-related objects, see the :ref:`Following "
"relationships backward example <backwards-related-objects>`."
msgstr ""
"Untuk rincian pada mengakses obyek terkait-kebelakang, lihat :ref:`Following "
"relationships backward example <backwards-related-objects>`."

msgid ""
"For sample code, see the :doc:`Many-to-one relationship model example </"
"topics/db/examples/many_to_one>`."
msgstr ""
"Untuk kode contoh, lihat :doc:`Many-to-one relationship model example </"
"topics/db/examples/many_to_one>`."

msgid ""
"To define a many-to-many relationship, use :class:`~django.db.models."
"ManyToManyField`. You use it just like any other :class:`~django.db.models."
"Field` type: by including it as a class attribute of your model."
msgstr ""
"Untuk menentukan hubungan many-to-many, gunakan :class:`~django.db.models."
"ManyToManyField`. Anda menggunakan itu seperti jenis :class:`~django.db."
"models.Field` lainnya: dengan menyertakan itu sebagai sebuah atribut kelas "
"dari model anda."

msgid ""
":class:`~django.db.models.ManyToManyField` requires a positional argument: "
"the class to which the model is related."
msgstr ""
":class:`~django.db.models.ManyToManyField` membutuhkan argumen penempatan: "
"kelas pada yang model yang terkait."

msgid ""
"For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a "
"``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple "
"toppings -- here's how you'd represent that::"
msgstr ""
"Sebagai contoh, jika ``Pizza`` mempunyai banyak obyek ``Topping``--yaitu, "
"sebuah ``Topping`` dapat berupa pada banyak pizza dan setiap ``Pizza`` "
"mempunyai banyak taburan -- ini adalah bagaimana anda mewakili itu::"

msgid ""
"As with :class:`~django.db.models.ForeignKey`, you can also create :ref:"
"`recursive relationships <recursive-relationships>` (an object with a many-"
"to-many relationship to itself) and :ref:`relationships to models not yet "
"defined <lazy-relationships>`."
msgstr ""
"Seperti :class:`~django.db.models.ForeignKey`, anda dapat juga membuat :ref:"
"`recursive relationships <recursive-relationships>` (sebuah obyek dengan "
"hubungan many-to-many ke itu sendiri) dan :ref:`relationships to models not "
"yet defined <lazy-relationships>`."

msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ManyToManyField` (``toppings`` in the example above) be a plural "
"describing the set of related model objects."
msgstr ""
"Disarankan, tetapi tidak wajib, bahwa nama dari sebuah :class:`~django.db."
"models.ManyToManyField` (``toppings`` dalam contoh diatas) menjadi plural "
"menggambarkan kumpulan dari obyek model terkait."

msgid ""
"It doesn't matter which model has the :class:`~django.db.models."
"ManyToManyField`, but you should only put it in one of the models -- not "
"both."
msgstr ""
"Itu tidak masalah model mana mempunyai :class:`~django.db.models."
"ManyToManyField`, tetapi anda harus menaruh itu dalam satu dari model - "
"tidak keduanya."

msgid ""
"Generally, :class:`~django.db.models.ManyToManyField` instances should go in "
"the object that's going to be edited on a form. In the above example, "
"``toppings`` is in ``Pizza`` (rather than ``Topping`` having a ``pizzas`` :"
"class:`~django.db.models.ManyToManyField` ) because it's more natural to "
"think about a pizza having toppings than a topping being on multiple pizzas. "
"The way it's set up above, the ``Pizza`` form would let users select the "
"toppings."
msgstr ""
"Umumnya, instance :class:`~django.db.models.ManyToManyField` harus pergi ke "
"obyek yang  akan disunting pada sebuah formulir. Dalam contoh diatas, "
"``toppings``berada dalam ``Pizza`` (daripada ``toppings`` memiliki "
"``Pizza`` :class:`~django.db.models.ManyToManyField` ) karena itu lebih "
"alami untuk berpikir tentang sebuah pizza mempunyai taburan berada pada "
"banyak pizza. Cara itu menyetel diatas, formulir ``Pizza`` akan membiarkan "
"pengguna memilih taburan."

msgid ""
"See the :doc:`Many-to-many relationship model example </topics/db/examples/"
"many_to_many>` for a full example."
msgstr ""
"Lihat  :doc:`Many-to-many relationship model example </topics/db/examples/"
"many_to_many>` untuk contoh penuh."

msgid ""
":class:`~django.db.models.ManyToManyField` fields also accept a number of "
"extra arguments which are explained in :ref:`the model field reference "
"<manytomany-arguments>`. These options help define how the relationship "
"should work; all are optional."
msgstr ""
"Bidang :class:`~django.db.models.ManyToManyField` juga menerima sejumlah "
"dari argumen tambahan yang dijelaskan dalam :ref:`the model field reference "
"<manytomany-arguments>`. Pilihan-pilihan ini membantu menentukan bagaimana "
"hubungan harus bekerja; semua adalah pilihan."

msgid "Extra fields on many-to-many relationships"
msgstr "Bidang tambahan pada hubungan many-to-many"

msgid ""
"When you're only dealing with many-to-many relationships such as mixing and "
"matching pizzas and toppings, a standard :class:`~django.db.models."
"ManyToManyField` is all you need. However, sometimes you may need to "
"associate data with the relationship between two models."
msgstr ""

msgid ""
"For example, consider the case of an application tracking the musical groups "
"which musicians belong to. There is a many-to-many relationship between a "
"person and the groups of which they are a member, so you could use a :class:"
"`~django.db.models.ManyToManyField` to represent this relationship. However, "
"there is a lot of detail about the membership that you might want to "
"collect, such as the date at which the person joined the group."
msgstr ""
"Sebagai contoh, pertimbangkan kasus dari sebuah aplikasi melacak kelompok "
"musikal yang milik pemusik. Ada hubungan many-to-many diantara seorang dan "
"kelompok yang mereka adalah anggota, jadi anda dapat menggunakan sebuah :"
"class:`~django.db.models.ManyToManyField` untuk mewakili hubungan ini. "
"Bagaimanapun, ada banyak dari rincian tentang keanggotaan yang mungkin ingin "
"dikumpulkan, seperti tanggal dimana seseorang bergabung kelompok."

msgid ""
"For these situations, Django allows you to specify the model that will be "
"used to govern the many-to-many relationship. You can then put extra fields "
"on the intermediate model. The intermediate model is associated with the :"
"class:`~django.db.models.ManyToManyField` using the :attr:`through "
"<ManyToManyField.through>` argument to point to the model that will act as "
"an intermediary. For our musician example, the code would look something "
"like this::"
msgstr ""
"Untuk keadaan ini, Django mengizinkan anda menentukan model yang akan "
"digunakan untuk menentukan hubungan many-to-many. Anda dapat kemudian "
"menaruh bidang-bidang tambahan pada model menengah. Model menengah dikaitkan "
"dengan :class:`~django.db.models.ManyToManyField` menggunakan argumen :attr:"
"`through <ManyToManyField.through>` untuk menunjuk model yang akan bertindak "
"sebagai sebuah perantara. Untuk contoh pemusik kami, kode akan terlihat "
"sesuatu seperti ini::"

msgid ""
"When you set up the intermediary model, you explicitly specify foreign keys "
"to the models that are involved in the many-to-many relationship. This "
"explicit declaration defines how the two models are related."
msgstr ""
"Ketika anda menyetel model perantara, anda jelas menentukan foreign key pada "
"model-model yang terlibat dalam hubungan many-to-many. Pernyataan jelas ini "
"menentukan bagaimana dua model terkait."

msgid "There are a few restrictions on the intermediate model:"
msgstr "Ada beberapa batasan pada model menengah:"

msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the source model (this would be ``Group`` in our example), or you must "
"explicitly specify the foreign keys Django should use for the relationship "
"using :attr:`ManyToManyField.through_fields <ManyToManyField."
"through_fields>`. If you have more than one foreign key and "
"``through_fields`` is not specified, a validation error will be raised. A "
"similar restriction applies to the foreign key to the target model (this "
"would be ``Person`` in our example)."
msgstr ""
"Model perantara anda harus mengandung satu - dan *hanya` satu - foreign key "
"pada model sumber (ini akan berupa ``Group`` dalam contoh kami), atau anda "
"harus menentukan jelas foreign key Django harus gunakan untuk hubungan "
"menggunakan :attr:`ManyToManyField.through_fields <ManyToManyField."
"through_fields>`. Jika anda mempunyai lebih dari satu foreign key dan "
"``through_fields`` tidak ditentukan, kesalahan pengesahan akan dimunculkan. "
"Pembatasan yang mirip berlaku pada foreign key ke model sasaran (ini akan "
"berupa ``Person`` dalam contoh kami)."

msgid ""
"For a model which has a many-to-many relationship to itself through an "
"intermediary model, two foreign keys to the same model are permitted, but "
"they will be treated as the two (different) sides of the many-to-many "
"relationship. If there are *more* than two foreign keys though, you must "
"also specify ``through_fields`` as above, or a validation error will be "
"raised."
msgstr ""
"Untuk sebuah model yang mempunyai hubungan many-to-many ke itu sendiri "
"melalui sebuah model perantara, dua foreign key pada model sama diizinkan, "
"tetapi mereka akan diperlakukan sebagai dua sisi (berbeda) dari hubungan "
"many-to-many. Jika ada *lebih* dari dua foreign key, anda harus juga "
"menentukan ``through_fields`` seperti diatas, atau sebuah kesalahan "
"pengesahan akan dimunculkan."

msgid ""
"Now that you have set up your :class:`~django.db.models.ManyToManyField` to "
"use your intermediary model (``Membership``, in this case), you're ready to "
"start creating some many-to-many relationships. You do this by creating "
"instances of the intermediate model::"
msgstr ""
"Sekarang yang anda telah menyetel :class:`~django.db.models.ManyToManyField` "
"anda untuk menggunakan model pertengangan kami (``Membership``, dalam kasus "
"ini), anda siap mulai membuat beberapa hubungan many-to-many. Anda melakukan "
"ini dengan membuat instance-instance dari model pertengahan::"

msgid ""
"You can also use :meth:`~django.db.models.fields.related.RelatedManager."
"add`, :meth:`~django.db.models.fields.related.RelatedManager.create`, or :"
"meth:`~django.db.models.fields.related.RelatedManager.set` to create "
"relationships, as long as you specify ``through_defaults`` for any required "
"fields::"
msgstr ""

msgid "You may prefer to create instances of the intermediate model directly."
msgstr ""

msgid ""
"If the custom through table defined by the intermediate model does not "
"enforce uniqueness on the ``(model1, model2)`` pair, allowing multiple "
"values, the :meth:`~django.db.models.fields.related.RelatedManager.remove` "
"call will remove all intermediate model instances::"
msgstr ""

msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.clear` method can "
"be used to remove all many-to-many relationships for an instance::"
msgstr ""

msgid ""
"Once you have established the many-to-many relationships, you can issue "
"queries. Just as with normal many-to-many relationships, you can query using "
"the attributes of the many-to-many-related model::"
msgstr ""

msgid ""
"As you are using an intermediate model, you can also query on its "
"attributes::"
msgstr ""
"Ketika anda sedang menggunakan model menengah, anda dapat juga meminta pada "
"atributnya::"

msgid ""
"If you need to access a membership's information you may do so by directly "
"querying the ``Membership`` model::"
msgstr ""
"Jika anda butuh mengakses informasi keanggotaan anda mungkin melakukan itu "
"dengan langsung meminta model ``Membership``::"

msgid ""
"Another way to access the same information is by querying the :ref:`many-to-"
"many reverse relationship<m2m-reverse-relationships>` from a ``Person`` "
"object::"
msgstr ""
"cara lain mengakses informasi sama adalah dengan meminta :ref:`many-to-many "
"reverse relationship<m2m-reverse-relationships>` dari obyek ``Person``::"

msgid ""
"To define a one-to-one relationship, use :class:`~django.db.models."
"OneToOneField`. You use it just like any other ``Field`` type: by including "
"it as a class attribute of your model."
msgstr ""
"Untuk menentukan hubungan one-to-one, gunakan :class:`~django.db.models."
"OneToOneField`. Anda dapat menggunakan itu hanya seperti jenis ``Field`` "
"lainnya: dengan menyertakan itu sebagai sebuah atribut kelas dari model anda."

msgid ""
"This is most useful on the primary key of an object when that object "
"\"extends\" another object in some way."
msgstr ""
"Ini adalah paling berguna pada primaty key dari sebuah obyek ketika obyek "
"itu \"extends\" obyek lain di beberapa cara."

msgid ""
":class:`~django.db.models.OneToOneField` requires a positional argument: the "
"class to which the model is related."
msgstr ""
":class:`~django.db.models.OneToOneField` membutuhkan argumen penempatan: "
"kelas dimana model yang terkait."

msgid ""
"For example, if you were building a database of \"places\", you would build "
"pretty standard stuff such as address, phone number, etc. in the database. "
"Then, if you wanted to build a database of restaurants on top of the places, "
"instead of repeating yourself and replicating those fields in the "
"``Restaurant`` model, you could make ``Restaurant`` have a :class:`~django."
"db.models.OneToOneField` to ``Place`` (because a restaurant \"is a\" place; "
"in fact, to handle this you'd typically use :ref:`inheritance <model-"
"inheritance>`, which involves an implicit one-to-one relation)."
msgstr ""
"Sebagai contoh, jika anda sedang membangun sebuah basisdata dari \"places\", "
"anda akan membangun hal yang cukup standar seperti alamat, nomor telepon, "
"dll dalam basisdata. Kemudian, jika anda ingin membangun sebuah basisdata "
"restoran di atas tempat-tempat, daripada mengulangi anda sendiri dan meniru "
"bidang-bidang tersebut dalam model ``Restaurant``, anda dapat membuat "
"``Restaurant`` memiliki kelas :class:`~django.db.models.OneToOneField` pada "
"``Place`` (karena sebuah restauran \"adalah sebuah\" tempat; faktanya, untuk "
"menangani ini anda biasanya menggunakan :ref:`inheritance <model-"
"inheritance>`, yang melibatkan sebuah hubungan jelas one-to-one)."

msgid ""
"As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive "
"relationship <recursive-relationships>` can be defined and :ref:`references "
"to as-yet undefined models <lazy-relationships>` can be made."
msgstr ""
"Seperti :class:`~django.db.models.ForeignKey`, :ref:`recursive relationship "
"<recursive-relationships>` dapat ditentukan dan :ref:`references to as-yet "
"undefined models <lazy-relationships>` dapat dibuat."

msgid ""
"See the :doc:`One-to-one relationship model example </topics/db/examples/"
"one_to_one>` for a full example."
msgstr ""
"Lihat :doc:`One-to-one relationship model example </topics/db/examples/"
"one_to_one>` untuk contoh penuh."

msgid ""
":class:`~django.db.models.OneToOneField` fields also accept an optional :"
"attr:`~django.db.models.OneToOneField.parent_link` argument."
msgstr ""
"Bidang :class:`~django.db.models.OneToOneField` juga menerima sebuah argumen "
"pilihan :attr:`~django.db.models.OneToOneField.parent_link`. "

msgid ""
":class:`~django.db.models.OneToOneField` classes used to automatically "
"become the primary key on a model. This is no longer true (although you can "
"manually pass in the :attr:`~django.db.models.Field.primary_key` argument if "
"you like). Thus, it's now possible to have multiple fields of type :class:"
"`~django.db.models.OneToOneField` on a single model."
msgstr ""
":class:`~django.db.models.OneToOneField` digunakan untuk otomatis menjadi "
"primary key pada model. Ini tidak lagi benar (meskipun anda dapat manual "
"melewatkan dalam argumen :attr:`~django.db.models.Field.primary_key` jika "
"anda suka). Dengan demikian, itu sekarang memungkinkan memiliki banyak "
"bidang dari jenis :class:`~django.db.models.OneToOneField` pada model "
"tunggal."

msgid "Models across files"
msgstr "Model-model lintas berkas-berkas"

msgid ""
"It's perfectly OK to relate a model to one from another app. To do this, "
"import the related model at the top of the file where your model is defined. "
"Then, refer to the other model class wherever needed. For example::"
msgstr ""

msgid "Field name restrictions"
msgstr "Batasan bidang nama"

msgid "Django places some restrictions on model field names:"
msgstr "Django menempatkan beberapa pembatasan di nama bidang model:"

msgid ""
"A field name cannot be a Python reserved word, because that would result in "
"a Python syntax error. For example::"
msgstr ""
"Sebuah nama bidang tidak dapat berupa sebuah kata cadangan Python, karena "
"itu akan menghasilkan dalam kesalahan sintaksis. Sebagai contoh::"

msgid ""
"A field name cannot contain more than one underscore in a row, due to the "
"way Django's query lookup syntax works. For example::"
msgstr ""
"Sebuah nama bidang tidak dapat mengandung lebih dari satu garis bawah dalam "
"sebuah baris, karena cara bekerja sintaksis pencarian permintaan Django. "
"Sebagai contoh::"

msgid "A field name cannot end with an underscore, for similar reasons."
msgstr ""
"Sebuah nama bidang tidak dapat berakhir dengan sebuah garis bawah, untuk "
"alasan yang sama."

msgid ""
"These limitations can be worked around, though, because your field name "
"doesn't necessarily have to match your database column name. See the :attr:"
"`~Field.db_column` option."
msgstr ""
"Batasan-batasan ini dapat dipecahkan, meskipun, karena nama bidang anda "
"tidak butuh harus cocok nama kolom basisdata anda. Lihat pilihan :attr:"
"`~Field.db_column` ."

msgid ""
"SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed "
"as model field names, because Django escapes all database table names and "
"column names in every underlying SQL query. It uses the quoting syntax of "
"your particular database engine."
msgstr ""
"Kata-kata pemesan SQL, seperti ``join``, ``where`` atau ``select``, *adalah* "
"diizinkan sebagai nama bidang model, karena Django meloloskan semua nama-"
"nama tabel basisdata dan nama-nama kolom di setiap permintaan SQL pokok. Itu "
"menggunakan sintaksis mengutip dari mesin basisdata tertentu anda."

msgid "Custom field types"
msgstr "Jenis bidang penyesuaian"

msgid ""
"If one of the existing model fields cannot be used to fit your purposes, or "
"if you wish to take advantage of some less common database column types, you "
"can create your own field class. Full coverage of creating your own fields "
"is provided in :doc:`/howto/custom-model-fields`."
msgstr ""
"Jika satu dari bidang-bidang model yang ada tidak dapat digunakan untuk "
"memenuhi tujuan anda, atau jika anda berharap mengambil keuntungan dari "
"beberapa jenis kolom basisdata kurang umum, anda dapat membuat kelas bidang "
"anda sendiri. Cakupan penuh dari membuat bidang-bidang anda sendiri "
"disediakan dalam :doc:`/howto/custom-model-fields`."

msgid "``Meta`` options"
msgstr "Pilihan ``Meta``"

msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr ""
"Memberikan model anda metadata dengan menggunakan ``class Meta`` sebelah "
"dalam, seperti begitu::"

msgid ""
"Model metadata is \"anything that's not a field\", such as ordering options "
"(:attr:`~Options.ordering`), database table name (:attr:`~Options."
"db_table`), or human-readable singular and plural names (:attr:`~Options."
"verbose_name` and :attr:`~Options.verbose_name_plural`). None are required, "
"and adding ``class Meta`` to a model is completely optional."
msgstr ""
"Metadata model adalah \"apapun yang bukan sebuah bidang\", seperti pilihan "
"pengurutan (:attr:`~Options.ordering`), nama tabel basisdata (:attr:"
"`~Options.db_table`), atau nama-nama tunggal dan jamal dapat-dibaca-manusia "
"(:attr:`~Options.verbose_name` dan :attr:`~Options.verbose_name_plural`). "
"Tidak satupun diwajibkan, dan menambahkan ``class Meta`` pada sebuah model "
"adalah sepenuhnya pilihan."

msgid ""
"A complete list of all possible ``Meta`` options can be found in the :doc:"
"`model option reference </ref/models/options>`."
msgstr ""
"Daftar lengkap dar semua kemungkinan pilihan ``Meta`` dapat ditemukan dalam :"
"doc:`model option reference </ref/models/options>`."

msgid "Model attributes"
msgstr "Atribut model"

msgid "``objects``"
msgstr "``objects``"

msgid ""
"The most important attribute of a model is the :class:`~django.db.models."
"Manager`. It's the interface through which database query operations are "
"provided to Django models and is used to :ref:`retrieve the instances "
"<retrieving-objects>` from the database. If no custom ``Manager`` is "
"defined, the default name is :attr:`~django.db.models.Model.objects`. "
"Managers are only accessible via model classes, not the model instances."
msgstr ""
"Atribut paling penting dari sebuah model adalah :class:`~django.db.models."
"Manager`. Itu adalah antarmuka melalui tindakan permintaan basisdata mana "
"yang disediakan pada model-model dan digunakan pada :ref:`retrieve the "
"instances <retrieving-objects>` dari basisdata. Jika tidak ada penyesuaian "
"``Manager`` ditentukan, nama awalan adalah :attr:`~django.db.models.Model."
"objects`. Pengelola hanya dapat diakses melalui kelas-kelas model, bukan "
"instance-instance model."

msgid "Model methods"
msgstr "Cara model"

msgid ""
"Define custom methods on a model to add custom \"row-level\" functionality "
"to your objects. Whereas :class:`~django.db.models.Manager` methods are "
"intended to do \"table-wide\" things, model methods should act on a "
"particular model instance."
msgstr ""
"Tentukan metode penyesuaian pada sebuah model untuk menambah fungsionalitas "
"\"tingkat-baris\" pada obyek-obyek anda. Sedangkan metode :class:`~django.db."
"models.Manager` dimaksudkan melakukan hal-hal \"lebar-tabel\", metode model "
"harus bertindak pada instance model tertentu."

msgid ""
"This is a valuable technique for keeping business logic in one place -- the "
"model."
msgstr ""
"Ini adalah teknik bernilai untuk menjaga logika bisnis dalam satu tempat -- "
"model."

msgid "For example, this model has a few custom methods::"
msgstr "Sebagai contoh, model ini mempunyai beberapa cara penyesuaian::"

msgid "The last method in this example is a :term:`property`."
msgstr "Cara terakhir di contoh ini adalah :term:`property`."

msgid ""
"The :doc:`model instance reference </ref/models/instances>` has a complete "
"list of :ref:`methods automatically given to each model <model-instance-"
"methods>`. You can override most of these -- see `overriding predefined "
"model methods`_, below -- but there are a couple that you'll almost always "
"want to define:"
msgstr ""
":doc:`model instance reference </ref/models/instances>` mempunyai daftar "
"lengkap dari :ref:`methods automatically given to each model <model-instance-"
"methods>`. Anda dapat menimpa kebanyakan dari ini -- lihat `overriding "
"predefined model methods`_, dibawah -- tetapi ada sepasang yang anda akan "
"hampir selalu ingin tentukan:"

msgid ":meth:`~Model.__str__`"
msgstr ":meth:`~Model.__str__`"

msgid ""
"A Python \"magic method\" that returns a string representation of any "
"object. This is what Python and Django will use whenever a model instance "
"needs to be coerced and displayed as a plain string. Most notably, this "
"happens when you display an object in an interactive console or in the admin."
msgstr ""
"\"magic methode\" Python yang mengembalikan sebuah string mewakili obyek "
"apapun. Ini adalah apa Python dan Django akan gunakan ketika sebuah instance "
"model butuh  dipaksa dan ditampilkan sebagai sebuah string kosong. "
"Kebanyakan terutama, ini terjadi ketika anda menampilkan sebuah obyek dalam "
"sebuah konsol interaktif atau dalam admin."

msgid ""
"You'll always want to define this method; the default isn't very helpful at "
"all."
msgstr ""
"Anda akan selalu ingin menentukan cara ini; cara awal tidak membantu sama "
"sekali."

msgid ":meth:`~Model.get_absolute_url`"
msgstr ":meth:`~Model.get_absolute_url`"

msgid ""
"This tells Django how to calculate the URL for an object. Django uses this "
"in its admin interface, and any time it needs to figure out a URL for an "
"object."
msgstr ""
"Ini memberitahu Django bagaimana menghitung URL untuk sebuah obyek. Django "
"menggunakan ini dalam antarmuka adminnya, dan kapan pun itu butuh mencari "
"tahu untuk sebuah obyek."

msgid ""
"Any object that has a URL that uniquely identifies it should define this "
"method."
msgstr ""
"Obyek apapun yang mempunyai sebuah URL yang unik mencirikan itu harus "
"menentukan metode ini."

msgid "Overriding predefined model methods"
msgstr "Menimpa metode model yang detetapkan"

msgid ""
"There's another set of :ref:`model methods <model-instance-methods>` that "
"encapsulate a bunch of database behavior that you'll want to customize. In "
"particular you'll often want to change the way :meth:`~Model.save` and :meth:"
"`~Model.delete` work."
msgstr ""
"Ada kumpulan lain dari :ref:`model methods <model-instance-methods>` yang "
"mengenkapsulasi sekolompok perilaku basisdata yang anda akan ingin "
"sesuaikan. Khususnya anda akan sering ingin dirubah merubah cara :meth:"
"`~Model.save` dan :meth:`~Model.delete` bekerja."

msgid ""
"You're free to override these methods (and any other model method) to alter "
"behavior."
msgstr ""
"Anda bebas untuk menimpa metode ini (dan cara model lainnya) untuk merubah "
"perilaku."

msgid ""
"A classic use-case for overriding the built-in methods is if you want "
"something to happen whenever you save an object. For example (see :meth:"
"`~Model.save` for documentation of the parameters it accepts)::"
msgstr ""
"Sebuah penggunaan-kasus klasik untuk menimpa metode-metode siap pakai jika "
"anda ingin sesuatu terjadi ketika anda menyimpan sebuah obyek. Sebagai "
"contoh (lihat :meth:`~Model.save` untuk dokumentasi dari parameter-parameter "
"itu terima)::"

msgid "You can also prevent saving::"
msgstr "Anda dapat juga mencegah mengatakan::"

msgid ""
"It's important to remember to call the superclass method -- that's that "
"``super().save(*args, **kwargs)`` business -- to ensure that the object "
"still gets saved into the database. If you forget to call the superclass "
"method, the default behavior won't happen and the database won't get touched."
msgstr ""
"Itu adalah penting diingat untuk memanggil metode super kelas -- yaitu bahwa "
"bisnis ``super().save(*args, **kwargs)`` -- memastikan bahwa obyek masih "
"mendapatkan tersimpan kedalam basisdata. Jika anda lupa memanggil metode "
"superkelas, perilaku awalan tidak akan terjadi dan basisdata tidak akan "
"disentuh."

msgid ""
"It's also important that you pass through the arguments that can be passed "
"to the model method -- that's what the ``*args, **kwargs`` bit does. Django "
"will, from time to time, extend the capabilities of built-in model methods, "
"adding new arguments. If you use ``*args, **kwargs`` in your method "
"definitions, you are guaranteed that your code will automatically support "
"those arguments when they are added."
msgstr ""
"Itu juga penting bahwa anda melewati argumen yang dapat diloloskan ke metode "
"model -- yaitu apa ``*args, **kwargs`` sedikit lakukan, Django akan, dari "
"waktu ke waktu, memperpanjang kemampuan metode model siap-pakai, menambahkan "
"argumen-argumen baru. Jika anda menggunakan ``*args, **kwargs`` dalam "
"pengertian metode anda, anda dijamin bahwa kode anda akan otomatis mendukung "
"argumen-argumen tersebut ketika mereka ditambahkan."

msgid "Overridden model methods are not called on bulk operations"
msgstr "Menimpa metode-metode model tidak dipanggil pada tindakan massal"

msgid ""
"Note that the :meth:`~Model.delete()` method for an object is not "
"necessarily called when :ref:`deleting objects in bulk using a QuerySet "
"<topics-db-queries-delete>` or as a result of a :attr:`cascading delete "
"<django.db.models.ForeignKey.on_delete>`. To ensure customized delete logic "
"gets executed, you can use :data:`~django.db.models.signals.pre_delete` and/"
"or :data:`~django.db.models.signals.post_delete` signals."
msgstr ""
"Catat bahwa metode :meth:`~Model.delete()` untuk sebuah obyej tidak "
"dibutuhkan dipanggil ketika :ref:`deleting objects in bulk using a QuerySet "
"<topics-db-queries-delete>` atau sebagai sebuah hasil dari sebuah :attr:"
"`cascading delete <django.db.models.ForeignKey.on_delete>`. Untuk memastikan "
"penyesuaian logika hapus dijalankan, anda dapat menggunakan sinyal :data:"
"`~django.db.models.signals.pre_delete` dan/atau :data:`~django.db.models."
"signals.post_delete`."

msgid ""
"Unfortunately, there isn't a workaround when :meth:`creating<django.db."
"models.query.QuerySet.bulk_create>` or :meth:`updating<django.db.models."
"query.QuerySet.update>` objects in bulk, since none of :meth:`~Model."
"save()`, :data:`~django.db.models.signals.pre_save`, and :data:`~django.db."
"models.signals.post_save` are called."
msgstr ""
"Sayangnya tidak ada pemecahan ketika obyek :meth:`creating<django.db.models."
"query.QuerySet.bulk_create>` atau :meth:`updating<django.db.models.query."
"QuerySet.update>` dalam jumlah besar, sejak tidak satupun dari :meth:`~Model."
"save()`, :data:`~django.db.models.signals.pre_save`, dan :data:`~django.db."
"models.signals.post_save` dipanggil."

msgid "Executing custom SQL"
msgstr "Menjalankan penyesuaian SQL"

msgid ""
"Another common pattern is writing custom SQL statements in model methods and "
"module-level methods. For more details on using raw SQL, see the "
"documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr ""
"Pola umum lain sdang menulis pernyataan SQL penyesuaian dalam metode-metode "
"model dan metode-metode tingkat-modul. Untuk rincian lebih pada menggunakan "
"SQL mentah, lihat dokumentasi pada :doc:`using raw SQL</topics/db/sql>`."

msgid "Model inheritance"
msgstr "Model warisan"

msgid ""
"Model inheritance in Django works almost identically to the way normal class "
"inheritance works in Python, but the basics at the beginning of the page "
"should still be followed. That means the base class should subclass :class:"
"`django.db.models.Model`."
msgstr ""
"Warisan model dalam Django bekerja hampir sama pada cara biasa warisan kelas "
"bekerja dalam Python, tetapi dasar-dasar pada permulaan dari halaman harus "
"masih diikuti. Itu berarti kelas dasar harus mensubkelaskan :class:`django."
"db.models.Model`."

msgid ""
"The only decision you have to make is whether you want the parent models to "
"be models in their own right (with their own database tables), or if the "
"parents are just holders of common information that will only be visible "
"through the child models."
msgstr ""
"Satu-satunya keputusan yang anda punya untuk membuat apakah anda ingin model-"
"model induk menjadi model-model dalam hak mereka sendiri (dengan tabel-tabel "
"basisdata mereka sendiri), atau jika induk hanya menampung dari informasi "
"umum yang akan hanya nampak melalui model-model anak."

msgid "There are three styles of inheritance that are possible in Django."
msgstr "Ada tiga gaya warisan yang mungkin di Django."

msgid ""
"Often, you will just want to use the parent class to hold information that "
"you don't want to have to type out for each child model. This class isn't "
"going to ever be used in isolation, so :ref:`abstract-base-classes` are what "
"you're after."
msgstr ""
"Sering, anda akan hanya ingin menggunakan kelas induk untuk menampung "
"informasi yang anda tidak ingin miliki untuk mengetikkan setiap model anak. "
"Kelas ini tidak akan pernah digunakan dalam pengasingan, jadi :ref:`abstract-"
"base-classes` adalah apa yang anda kejar."

msgid ""
"If you're subclassing an existing model (perhaps something from another "
"application entirely) and want each model to have its own database table, :"
"ref:`multi-table-inheritance` is the way to go."
msgstr ""
"Jika anda sedang mensubkelaskan sebuah model yang ada (mungkin sesuatu dari "
"aplikasi lain seluruhnya) dan ingin setiap model memiliki tabel basisdata "
"itu sendiri, :ref:`multi-table-inheritance` adalah cara untuk pergi."

msgid ""
"Finally, if you only want to modify the Python-level behavior of a model, "
"without changing the models fields in any way, you can use :ref:`proxy-"
"models`."
msgstr ""
"Akhirnya, jika anda hanya ingin merubah perilaku tingkat-Python dari sebuah "
"model, tanpa merubah bidang-bidang model dalam cara apapun, anda dapat "
"menggunakan :ref:`proxy-models`."

msgid "Abstract base classes"
msgstr "Kelas-kelas dasar abstrak"

msgid ""
"Abstract base classes are useful when you want to put some common "
"information into a number of other models. You write your base class and put "
"``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will "
"then not be used to create any database table. Instead, when it is used as a "
"base class for other models, its fields will be added to those of the child "
"class."
msgstr ""

msgid "An example::"
msgstr "Sebuah contoh::"

msgid ""
"The ``Student`` model will have three fields: ``name``, ``age`` and "
"``home_group``. The ``CommonInfo`` model cannot be used as a normal Django "
"model, since it is an abstract base class. It does not generate a database "
"table or have a manager, and cannot be instantiated or saved directly."
msgstr ""
"Model ``Student`` akan mempunyai tiga bidang: ``name``, ``age`` dan "
"``home_group``. Model ``CommonInfo`` tidak dapat digunakan sebagai model "
"Django biasa, sejak itu adalah sebuah kelas dasar abstrak. Itu tidak "
"membangkitkan sebuah tabel basisdata atau mempunyai sebuah pengelola, dan "
"tidak dapat di instansiasikan atau disimpan langsung."

msgid ""
"Fields inherited from abstract base classes can be overridden with another "
"field or value, or be removed with ``None``."
msgstr ""

msgid ""
"For many uses, this type of model inheritance will be exactly what you want. "
"It provides a way to factor out common information at the Python level, "
"while still only creating one database table per child model at the database "
"level."
msgstr ""
"Untuk banyak penggunaan, jenis ini dari warisan model akan tepatnya apa yang "
"anda inginkan. Itu menyediakan sebuah cara untuk faktor luar informasi umum "
"pada tingkat Python, selagi masih hanya  membuat satu tabel basisdata per "
"model anak pada tingkat basisdata."

msgid "``Meta`` inheritance"
msgstr "``Meta`` warisan"

msgid ""
"When an abstract base class is created, Django makes any :ref:`Meta <meta-"
"options>` inner class you declared in the base class available as an "
"attribute. If a child class does not declare its own :ref:`Meta <meta-"
"options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If "
"the child wants to extend the parent's :ref:`Meta <meta-options>` class, it "
"can subclass it. For example::"
msgstr ""
"Ketika sebuah kelas dasar abstrak dibuat, Django membuat kelas sebelah "
"dalam :ref:`Meta <meta-options>` apapun anda nyatakan di kelas dasar "
"tersedia sebagai sebuah atribut. Jika sebuah kelas anak tidak menyatakan "
"kelas :ref:`Meta <meta-options>` nya sendiri, itu akan mewarisi :ref:`Meta "
"<meta-options>` induk. Jika anak ingin memperpanjang kelas :ref:`Meta <meta-"
"options>` induk, itu dapat mensubkelaskan itu. Sebagai contoh::"

msgid ""
"Django does make one adjustment to the :ref:`Meta <meta-options>` class of "
"an abstract base class: before installing the :ref:`Meta <meta-options>` "
"attribute, it sets ``abstract=False``. This means that children of abstract "
"base classes don't automatically become abstract classes themselves. To make "
"an abstract base class that inherits from another abstract base class, you "
"need to explicitly set ``abstract=True`` on the child."
msgstr ""

msgid ""
"Some attributes won't make sense to include in the :ref:`Meta <meta-"
"options>` class of an abstract base class. For example, including "
"``db_table`` would mean that all the child classes (the ones that don't "
"specify their own :ref:`Meta <meta-options>`) would use the same database "
"table, which is almost certainly not what you want."
msgstr ""
"Beberapa atribut tidak akan masuk akal untuk disertakan dalam kelas :ref:"
"`Meta <meta-options>` dari sebuah kelas dasar abstrak. Sebagai coontoh, "
"menyertakan ``db_table`` akan berarti bahwa semua kelas-kelas anak (satu "
"yang tidak menentukan milik mereka :ref:`Meta <meta-options>`) akan "
"menggunakan tabel basisdata sama, yang hampir pasti bukan yang anda inginkan."

msgid ""
"Due to the way Python inheritance works, if a child class inherits from "
"multiple abstract base classes, only the :ref:`Meta <meta-options>` options "
"from the first listed class will be inherited by default. To inherit :ref:"
"`Meta <meta-options>` options from multiple abstract base classes, you must "
"explicitly declare the :ref:`Meta <meta-options>` inheritance. For example::"
msgstr ""

msgid "Be careful with ``related_name`` and ``related_query_name``"
msgstr "Hati-hati dengan ``related_name`` dan ``related_query_name``"

msgid ""
"If you are using :attr:`~django.db.models.ForeignKey.related_name` or :attr:"
"`~django.db.models.ForeignKey.related_query_name` on a ``ForeignKey`` or "
"``ManyToManyField``, you must always specify a *unique* reverse name and "
"query name for the field. This would normally cause a problem in abstract "
"base classes, since the fields on this class are included into each of the "
"child classes, with exactly the same values for the attributes (including :"
"attr:`~django.db.models.ForeignKey.related_name` and :attr:`~django.db."
"models.ForeignKey.related_query_name`) each time."
msgstr ""
"Jika anda sedang menggunakan :attr:`~django.db.models.ForeignKey."
"related_name` atau :attr:`~django.db.models.ForeignKey.related_query_name` "
"pada ``ForeignKey`` atau ``ManyToManyField``, anda harus selalu menentukan "
"*unik* membalikkan nama dan permintaan nama untuk bidang. Ini akan biasanya "
"menyebabkan sebuah masalah dalam kelas-kelas berdasarkan abstrak, sejak "
"bidang-bidang pada kelas ini disertakan kedalam setiap kelas-kelas anak, "
"yang tepatnya nilai-nilai sama untuk atribut-atribut (termasuk :attr:"
"`~django.db.models.ForeignKey.related_name` dan :attr:`~django.db.models."
"ForeignKey.related_query_name`) setiap kali."

msgid ""
"To work around this problem, when you are using :attr:`~django.db.models."
"ForeignKey.related_name` or :attr:`~django.db.models.ForeignKey."
"related_query_name` in an abstract base class (only), part of the value "
"should contain ``'%(app_label)s'`` and ``'%(class)s'``."
msgstr ""
"Untuk pemecahan masalah ini, ketika anda sedang menggunakan :attr:`~django."
"db.models.ForeignKey.related_name` atau :attr:`~django.db.models.ForeignKey."
"related_query_name` dalam sebuah kelas dasar abstrak (hanya) bagian dari "
"nilai harus mengandung ``'%(app_label)s'`` dan ``'%(class)s'``."

msgid ""
"``'%(class)s'`` is replaced by the lowercased name of the child class that "
"the field is used in."
msgstr ""

msgid ""
"``'%(app_label)s'`` is replaced by the lowercased name of the app the child "
"class is contained within. Each installed application name must be unique "
"and the model class names within each app must also be unique, therefore the "
"resulting name will end up being different."
msgstr ""

msgid "For example, given an app ``common/models.py``::"
msgstr "Sebagai contoh, diberikan sebuah aplikasi ``common/models.py``::"

msgid "Along with another app ``rare/models.py``::"
msgstr "Bersama dengan aplikasi lainnya ``rare/models.py``::"

msgid ""
"The reverse name of the ``common.ChildA.m2m`` field will be "
"``common_childa_related`` and the reverse query name will be "
"``common_childas``. The reverse name of the ``common.ChildB.m2m`` field will "
"be ``common_childb_related`` and the reverse query name will be "
"``common_childbs``. Finally, the reverse name of the ``rare.ChildB.m2m`` "
"field will be ``rare_childb_related`` and the reverse query name will be "
"``rare_childbs``. It's up to you how you use the ``'%(class)s'`` and "
"``'%(app_label)s'`` portion to construct your related name or related query "
"name but if you forget to use it, Django will raise errors when you perform "
"system checks (or run :djadmin:`migrate`)."
msgstr ""
"Membalikkan nama dari bidang ``common.ChildA.m2m`` akan menjadi "
"``common_childa_related`` dan membalikkan permintaan nama akan menjadi "
"``common_childas``. Membalikkan nama dari bidang ``common.ChildB.m2m`` akan "
"menjadi ``common_childb_related`` dan membalikkan permintaan nama akan "
"menjadi ``common_childbs``. Akhirnya, membalikkan nama dari bidang ``rare."
"ChildB.m2m`` akan menjadi ``rare_childb_related`` dan membalikkan permintaan "
"nama akan menjadi ``rare_childbs``. Itu terserah anda bagaimana anda "
"menggunakan bagian ``'%(class)s'`` dan ``'%(app_label)s'`` untuk membangun "
"nama terhubung anda atau permintaan nama terhubung tetapi jika anda lupa "
"menggunakan itu, Django akan memunculkan kesalahan-kesalahan ketika anda "
"melalukan pemeriksaan sistem (atau menjalankan :djadmin:`migrate`)."

msgid ""
"If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` "
"attribute for a field in an abstract base class, the default reverse name "
"will be the name of the child class followed by ``'_set'``, just as it "
"normally would be if you'd declared the field directly on the child class. "
"For example, in the above code, if the :attr:`~django.db.models.ForeignKey."
"related_name` attribute was omitted, the reverse name for the ``m2m`` field "
"would be ``childa_set`` in the ``ChildA`` case and ``childb_set`` for the "
"``ChildB`` field."
msgstr ""
"Jika anda tidak menentukan sebuah atribut :attr:`~django.db.models."
"ForeignKey.related_name` untuk sebuah bidang dalam kelas dasar abstrak, "
"membalikkan nama awalan akan menjadi nama dari kelas anak diikuti oleh "
"``'_set'``, seperti itu biasanya akan menjadi jika anda telah menyatakan "
"bidang langsung pada kelas anak. Sebagai contoh, dalam kode diatas, jika "
"atribut :attr:`~django.db.models.ForeignKey.related_name` dihilangkan, "
"membalikkan nama untuk bidang ``m2m`` kan menjadi ``childa_set`` dalam kasus "
"``ChildA`` dan ``childb_set`` untuk bidang ``ChildB``. "

msgid "Multi-table inheritance"
msgstr "Warisan banyak-tabel"

msgid ""
"The second type of model inheritance supported by Django is when each model "
"in the hierarchy is a model all by itself. Each model corresponds to its own "
"database table and can be queried and created individually. The inheritance "
"relationship introduces links between the child model and each of its "
"parents (via an automatically-created :class:`~django.db.models."
"OneToOneField`). For example::"
msgstr ""
"Jenis kedua dari warisan model didukung oleh Django adalah ketika setiap "
"model dalam hirarki adalah sebuah model semua oleh itu sendiri. Setiap model "
"berhubungan ke tabel basisdata itu sendiri dan dapat diminta dan dibuat "
"sendiri-sendiri. Hubungan warisan memperkenalkan tautan diantara model anak "
"dan setiap dari induknya (melalui dibuat-otomatis :class:`~django.db.models."
"OneToOneField`). Sebagai contoh::"

msgid ""
"All of the fields of ``Place`` will also be available in ``Restaurant``, "
"although the data will reside in a different database table. So these are "
"both possible::"
msgstr ""
"Semua dari bidang-bidang dari ``Place`` akan juga tersedia dalam "
"``Restaurant``, meskipun data akan tinggal dalam tabel basisdata berbeda. "
"Jadi kedua ini memungkinkan::"

msgid ""
"If you have a ``Place`` that is also a ``Restaurant``, you can get from the "
"``Place`` object to the ``Restaurant`` object by using the lowercase version "
"of the model name::"
msgstr ""

msgid ""
"However, if ``p`` in the above example was *not* a ``Restaurant`` (it had "
"been created directly as a ``Place`` object or was the parent of some other "
"class), referring to ``p.restaurant`` would raise a ``Restaurant."
"DoesNotExist`` exception."
msgstr ""
"Bagaimanapun, jika ``p`` dalam contoh-contoh diatas *bukan* sebuah "
"``Restaurant`` (itu telah dibuat langsung sebagai sebuah obyek ``Place`` "
"atau induk dari beberapa kelas lain(, mengacu pada ``p.restaurant`` akan "
"memunculkan sebuah pengecualian ``Restaurant.DoesNotExist``."

msgid ""
"The automatically-created :class:`~django.db.models.OneToOneField` on "
"``Restaurant`` that links it to ``Place`` looks like this::"
msgstr ""
":class:`~django.db.models.OneToOneField` dibuat-otomatis pada ``Restaurant`` "
"yang mengkaitkan itu ke ``Place`` terlihat seperti ini:: "

msgid ""
"You can override that field by declaring your own :class:`~django.db.models."
"OneToOneField` with :attr:`parent_link=True <django.db.models.OneToOneField."
"parent_link>` on ``Restaurant``."
msgstr ""
"Anda dapat menimpa bidang itu dengan menyatakan :class:`~django.db.models."
"OneToOneField` anda sendiri dengan :attr:`parent_link=True <django.db.models."
"OneToOneField.parent_link>` pada ``Restaurant``."

msgid "``Meta`` and multi-table inheritance"
msgstr "``Meta`` dan warisan banyak-tabel"

msgid ""
"In the multi-table inheritance situation, it doesn't make sense for a child "
"class to inherit from its parent's :ref:`Meta <meta-options>` class. All "
"the :ref:`Meta <meta-options>` options have already been applied to the "
"parent class and applying them again would normally only lead to "
"contradictory behavior (this is in contrast with the abstract base class "
"case, where the base class doesn't exist in its own right)."
msgstr ""
"Dalam keadaan warisan banyak-tabel, itu tidak masuk akal untuk sebuah kelas "
"anak mewarisi dari kelas :ref:`Meta <meta-options>` induknya. Semua pilihan :"
"ref:`Meta <meta-options>` telah diberlakukan ke kelas induk dan "
"memberlakukan mereka kembali akan biasanya hanya membawa ke perilaku "
"bertentangan (ini adalah berlawanan dengan kasus kelas dasar abstrak, dimana "
"kelas dasar tidak ada dalam hak itu sendiri)."

msgid ""
"So a child model does not have access to its parent's :ref:`Meta <meta-"
"options>` class. However, there are a few limited cases where the child "
"inherits behavior from the parent: if the child does not specify an :attr:"
"`~django.db.models.Options.ordering` attribute or a :attr:`~django.db.models."
"Options.get_latest_by` attribute, it will inherit these from its parent."
msgstr ""
"Jadi sebuah model anak tidak mempunyai akses ke kelas :ref:`Meta <meta-"
"options>` induknya. Bagaimanapun, ada sedikit kasus terbatas ketika anak "
"mewarisi perilaku dari induk: jika anak tidak menentukan sebuah atribut :"
"attr:`~django.db.models.Options.ordering` atau sebuah atribut :attr:`~django."
"db.models.Options.get_latest_by`, itu akan mewarisi ini dari induknya."

msgid ""
"If the parent has an ordering and you don't want the child to have any "
"natural ordering, you can explicitly disable it::"
msgstr ""
"Jika induk mempunyai sebuah pengurutan dan anda tidak ingin anak mempunyai "
"pengurutan alami, anda dapat jelas meniadakan itu::"

msgid "Inheritance and reverse relations"
msgstr "Mewarisi dan membalikkan hubungan"

msgid ""
"Because multi-table inheritance uses an implicit :class:`~django.db.models."
"OneToOneField` to link the child and the parent, it's possible to move from "
"the parent down to the child, as in the above example. However, this uses up "
"the name that is the default :attr:`~django.db.models.ForeignKey."
"related_name` value for :class:`~django.db.models.ForeignKey` and :class:"
"`~django.db.models.ManyToManyField` relations.  If you are putting those "
"types of relations on a subclass of the parent model, you **must** specify "
"the :attr:`~django.db.models.ForeignKey.related_name` attribute on each such "
"field. If you forget, Django will raise a validation error."
msgstr ""
"Karena warisan banyak-tabel menggunakan sebuah :class:`~django.db.models."
"OneToOneField` ersirat pada tautan anak dan induk, itu memungkinkan "
"memindahkan dari induk turun ke anak, seperti dalam contoh diatas. "
"Bagaimanapun, ini menggunakan nama yang nilai :attr:`~django.db.models."
"ForeignKey.related_name` awalannya untuk hubungan :class:`~django.db.models."
"ForeignKey` dan :class:`~django.db.models.ManyToManyField`. Jika anda sedang "
"menaruh jenis itu dari hubungan pada sebuah subkelas dari model induk, anda "
"**harus** menentukan atribut :attr:`~django.db.models.ForeignKey."
"related_name` pada setiap bidang itu. Jika anda lupa, Django akan "
"memunculkan sebuah kesalahan pengesahan."

msgid ""
"For example, using the above ``Place`` class again, let's create another "
"subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr ""
"Sebagai contoh, menggunakan kelas ``Place`` diatas lagi, mari kita membuat "
"subkelas lain dengan sebuah :class:`~django.db.models.ManyToManyField`::"

msgid "This results in the error::"
msgstr "Ini hasil di kesalahan::"

msgid ""
"Adding ``related_name`` to the ``customers`` field as follows would resolve "
"the error: ``models.ManyToManyField(Place, related_name='provider')``."
msgstr ""
"Menambahkan ``related_name`` ke bidang ``customers`` seperti berikut akan "
"menyelesaikan kesalahan: ``models.ManyToManyField(Place, "
"related_name='provider')``."

msgid "Specifying the parent link field"
msgstr "Menentukan bidang tautan induk"

msgid ""
"As mentioned, Django will automatically create a :class:`~django.db.models."
"OneToOneField` linking your child class back to any non-abstract parent "
"models. If you want to control the name of the attribute linking back to the "
"parent, you can create your own :class:`~django.db.models.OneToOneField` and "
"set :attr:`parent_link=True <django.db.models.OneToOneField.parent_link>` to "
"indicate that your field is the link back to the parent class."
msgstr ""
"Sebagai disebutkan, Django akan otomatis membuat sebuah :class:`~django.db."
"models.OneToOneField` menghubungkan ke kelas anak anda kembali ke model "
"induk bukan-abtrak apapun. Jika anda ingin mengendalikan nama dari atribut "
"menghubungkan kembali ke induk, anda dapat membuat :class:`~django.db.models."
"OneToOneField` anda sendiri dan menyetel :attr:`parent_link=True <django.db."
"models.OneToOneField.parent_link>` untuk menunjukkan bahwa bidang anda "
"menghubungkan kembali ke kelas induk."

msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new "
"database table is created for each subclass of a model. This is usually the "
"desired behavior, since the subclass needs a place to store any additional "
"data fields that are not present on the base class. Sometimes, however, you "
"only want to change the Python behavior of a model -- perhaps to change the "
"default manager, or add a new method."
msgstr ""
"Ketika menggunakan :ref:`multi-table inheritance <multi-table-inheritance>`, "
"tabel basisdata baru dibuat untuk setiap subkelas dari model. Ini biasanya "
"keinginan kebiasaan, sejak subkelas butuh tempar menyimpan bidang data "
"tambahan apapun yang tidak hadir pada kelas dasar. Terkadang, bagaimanapun, "
"anda hanya ingin merubah kebiasaan Python dari model -- mungkin merubah "
"pengelola awalan, atau menambah metode baru."

msgid ""
"This is what proxy model inheritance is for: creating a *proxy* for the "
"original model. You can create, delete and update instances of the proxy "
"model and all the data will be saved as if you were using the original (non-"
"proxied) model. The difference is that you can change things like the "
"default model ordering or the default manager in the proxy, without having "
"to alter the original."
msgstr ""
"Ini adalah kegunaan warisan model proxy: membuat sebuah *proxy* untuk model "
"asli. Anda dapat membuat, menghapus dan memperbaharui instance-instance dari "
"model proxy dan semua data akan disimpan seperti jika anda sedang "
"menggunakan model (bukan-proxy) asli. Perbedaannya adalah bahwa anda dapat "
"merubah hal-hal seperti pengurutan model awalan atau pengelola awalan dalam "
"proxy, tanpa harus merubah aslinya."

msgid ""
"Proxy models are declared like normal models. You tell Django that it's a "
"proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute "
"of the ``Meta`` class to ``True``."
msgstr ""
"Model proxy dinyatakan seperti model-model biasa. Anda memberitahu Django "
"bahwa model proxynya dengan mengatur atribut :attr:`~django.db.models."
"Options.proxy` dari kelas ``Meta`` menjadi ``False``."

msgid ""
"For example, suppose you want to add a method to the ``Person`` model. You "
"can do it like this::"
msgstr ""
"Sebagai contoh, misalnya anda ingin menambahkan sebuah metode ke model "
"``Person``. Anda dapat melakukannya seperti ini::"

msgid ""
"The ``MyPerson`` class operates on the same database table as its parent "
"``Person`` class. In particular, any new instances of ``Person`` will also "
"be accessible through ``MyPerson``, and vice-versa::"
msgstr ""
"Kelas ``MyPerson`` berjalan pada tabel basisdata sama seperti induknya kelas "
"``Person``. Khususnya, instance baru apapun dari ``Person`` akan juga "
"diakses melalui ``MyPerson``, dan sebaliknya::"

msgid ""
"You could also use a proxy model to define a different default ordering on a "
"model. You might not always want to order the ``Person`` model, but "
"regularly order by the ``last_name`` attribute when you use the proxy::"
msgstr ""

msgid ""
"Now normal ``Person`` queries will be unordered and ``OrderedPerson`` "
"queries will be ordered by ``last_name``."
msgstr ""
"Sekarang permintaan ``Person`` biasa akan tidak diurutkan dan permintaan "
"``OrderedPerson`` akan diurutkan berdasarkan ``last_name``."

msgid ""
"Proxy models inherit ``Meta`` attributes :ref:`in the same way as regular "
"models <meta-and-multi-table-inheritance>`."
msgstr ""
"Model-model proxy mewarisi atribut ``Meta`` :ref:`in the same way as regular "
"models <meta-and-multi-table-inheritance>`."

msgid "``QuerySet``\\s still return the model that was requested"
msgstr "``QuerySet`` masih mengembalikan model yang telah diminta"

msgid ""
"There is no way to have Django return, say, a ``MyPerson`` object whenever "
"you query for ``Person`` objects. A queryset for ``Person`` objects will "
"return those types of objects. The whole point of proxy objects is that code "
"relying on the original ``Person`` will use those and your own code can use "
"the extensions you included (that no other code is relying on anyway). It is "
"not a way to replace the ``Person`` (or any other) model everywhere with "
"something of your own creation."
msgstr ""
"Tidak ada jalan Django kembali, katakan, sebuah obyek ``MyPerson`` kapanpun "
"anda meminta untuk obyek ``Person``. Sebuah queryset untuk obyek ``Person`` "
"akan mengembalikan jenis-jenis itu dari obyek. Titik keseluruhan dari obyek "
"proxy adalah bahwa kode bergantung pada ``Person`` asli akan menggunakan itu "
"dan kode anda sendiri dapat menggunakan perpanjangan anda sertakan (yang "
"tidak ada kode lain bergantung bagaimanapun) Itu bukan sebuah cara mengganti "
"``Person`` (atau model lain) dimanapun dengan sesuatu dari pembuatan anda "
"sendiri."

msgid "Base class restrictions"
msgstr "Batasan kelas dasar"

msgid ""
"A proxy model must inherit from exactly one non-abstract model class. You "
"can't inherit from multiple non-abstract models as the proxy model doesn't "
"provide any connection between the rows in the different database tables. A "
"proxy model can inherit from any number of abstract model classes, providing "
"they do *not* define any model fields. A proxy model may also inherit from "
"any number of proxy models that share a common non-abstract parent class."
msgstr ""
"Sebuah model proxy harus mewarisi dari tepatnya satu kelas model bukan-"
"abstrak. Anda tidak dapat mewarisi dari banyak model bukan-abstrak sebagai "
"model proxy tidak menyediakan hubungan apapun diantara baris-baris dalam "
"tabel-tabel basisdata berbeda. Sebuah model proxy dapat mewarisi dari angka "
"apapun dari kelas-kelas model abstrak, menyediakan mereka *tidak* menentukan "
"bidang-bidang model apapun. Sebuah model proxy mungkin juga mewarisi dari "
"angka apapun dari model-model proxy yang berbagi kelas induk bukan-abstrak "
"umum."

msgid "Proxy model managers"
msgstr "Pengelola model proxy"

msgid ""
"If you don't specify any model managers on a proxy model, it inherits the "
"managers from its model parents. If you define a manager on the proxy model, "
"it will become the default, although any managers defined on the parent "
"classes will still be available."
msgstr ""
"Jika anda tidak menentukan pengelola model apapun pada model proxy, itu "
"mewarisi pengelola dari induk modelnya. Jika anda menentukan sebuah "
"pengelola pada model proxy, itu akan menjadi awalan, meskipun pengelola "
"apapun ditentukan pada kelas-kelas induk akan masih tersedia."

msgid ""
"Continuing our example from above, you could change the default manager used "
"when you query the ``Person`` model like this::"
msgstr ""
"Melanjutkan contoh kami dari atas, anda dapat merubah pengelola awalan "
"digunakan ketika anda meminta model ``Person`` seperti ini::"

msgid ""
"If you wanted to add a new manager to the Proxy, without replacing the "
"existing default, you can use the techniques described in the :ref:`custom "
"manager <custom-managers-and-inheritance>` documentation: create a base "
"class containing the new managers and inherit that after the primary base "
"class::"
msgstr ""
"Jika anda ingin menambahkan sebuah pengelola baru pada Proxy, tanpa "
"mengganti awalan yang ada, anda dapat menggunakan teknik-teknik digambarkan "
"dalam dokumentasi :ref:`custom manager <custom-managers-and-inheritance>` : "
"buat sebuah kelas dasar mengandung pengelola baru dan mewarisi itu setelah "
"kelas dasar utama::"

msgid ""
"You probably won't need to do this very often, but, when you do, it's "
"possible."
msgstr ""
"Anda mungkin tidak butuh melakukan ini terlalu sering, tetapi, ketika anda "
"melakukan, sangat memungkinkan."

msgid "Differences between proxy inheritance and unmanaged models"
msgstr "Perbedaan diantara warisan proxy dan model tidak dikendalikan"

msgid ""
"Proxy model inheritance might look fairly similar to creating an unmanaged "
"model, using the :attr:`~django.db.models.Options.managed` attribute on a "
"model's ``Meta`` class."
msgstr ""
"Warisan model proxy mungkin terlihat cukup mirip untuk membuat sebuah model "
"tidak dikendalikan, menggunakan atribut :attr:`~django.db.models.Options."
"managed` pada kelas ``Meta`` model."

msgid ""
"With careful setting of :attr:`Meta.db_table <django.db.models.Options."
"db_table>` you could create an unmanaged model that shadows an existing "
"model and adds Python methods to it. However, that would be very repetitive "
"and fragile as you need to keep both copies synchronized if you make any "
"changes."
msgstr ""
"Dengan pengaturan hati-hati dari :attr:`Meta.db_table <django.db.models."
"Options.db_table>`  anda dapat membuat sebuah model tidak dikendalikan yang "
"membayangi sebuah model yang ada dan menambahkan metode-metode Python pada "
"itu. Bagaimanapun, bahwa akan menjadi berulang dan rentan ketika anda butuh "
"menjaga kedua salinan sinkronisasi jika anda membuat perubahan apapun."

msgid ""
"On the other hand, proxy models are intended to behave exactly like the "
"model they are proxying for. They are always in sync with the parent model "
"since they directly inherit its fields and managers."
msgstr ""
"Di sisi lain, model-model proxy berusaha untuk berperilaku tepatnya seperti "
"model mereka sedang memproxikan. Mereka selalu dalam sinkronisasi dengan "
"model induk sejak mereka langsung mewarisi bidang-bidang dan pengelolanya."

msgid "The general rules are:"
msgstr "Aturan-aturan umum adalah:"

msgid ""
"If you are mirroring an existing model or database table and don't want all "
"the original database table columns, use ``Meta.managed=False``. That option "
"is normally useful for modeling database views and tables not under the "
"control of Django."
msgstr ""
"Jika anda sedang mencerminkan model yang ada atau tabel basisdata dan tidak "
"ingin semua kotom tabel basisdata asli, gunakan ``Meta.managed=False``. "
"Pilihan itu biasanya berguna untuk permodelan tampilan basisdata dan tabel "
"tidak dibawah kendali Django."

msgid ""
"If you are wanting to change the Python-only behavior of a model, but keep "
"all the same fields as in the original, use ``Meta.proxy=True``. This sets "
"things up so that the proxy model is an exact copy of the storage structure "
"of the original model when data is saved."
msgstr ""
"Jika anda ingin merubah perilaku hanya-Python dari sebuah model, tetapi "
"menjaga semua bidang sama sebagai dalam aslinya, gunakan ``Meta."
"proxy=True``. Ini menyetel sehingga model proxy adalah sebuah salinan tepat "
"dari struktur penyimpanan dari model asli ketika data disimpan."

msgid "Multiple inheritance"
msgstr "Banyak warisan"

msgid ""
"Just as with Python's subclassing, it's possible for a Django model to "
"inherit from multiple parent models. Keep in mind that normal Python name "
"resolution rules apply. The first base class that a particular name (e.g. :"
"ref:`Meta <meta-options>`) appears in will be the one that is used; for "
"example, this means that if multiple parents contain a :ref:`Meta <meta-"
"options>` class, only the first one is going to be used, and all others will "
"be ignored."
msgstr ""
"Sama seperi pensubkelasan Python, itu memungkinkan untuk model Django untuk "
"mewarisi dari banyak model induk. Mengingat bahwa aturan keputusan nama "
"Python biasa berlaku. Kelas dasar pertama yang nama tertentu (sebagai "
"contoh :ref:`Meta 1`) muncul akan menjadi satu yang digunakan; sebagai "
"contoh, ini berarti bahwa jika banyak induk mengandung kelas  :ref:`Meta 2`, "
"hanya satu pertama yang akan digunakan, dan semua lainnya akan diabaikan."

msgid ""
"Generally, you won't need to inherit from multiple parents. The main use-"
"case where this is useful is for \"mix-in\" classes: adding a particular "
"extra field or method to every class that inherits the mix-in. Try to keep "
"your inheritance hierarchies as simple and straightforward as possible so "
"that you won't have to struggle to work out where a particular piece of "
"information is coming from."
msgstr ""
"Umumnya, anda tidak akan butuh mewarisi banyak induk. Kasus-kegunaan utama "
"dimana ini berguna adalah untuk kelas \"mix-in\": menambahkan bidang ekstra "
"tertentu atau metode pada setiap kelas yang mewarisi mix-in. Coba untuk "
"menjaga hirarki warisan anda sesederhana dan semudah mungkin sehingga anda "
"tidak harus berjuang bekerja diluar dimana potongan tertentu dari informasi "
"berasal."

msgid ""
"Note that inheriting from multiple models that have a common ``id`` primary "
"key field will raise an error. To properly use multiple inheritance, you can "
"use an explicit :class:`~django.db.models.AutoField` in the base models::"
msgstr ""
"Catat bahwa mewarisi dari banyak model yang mempunyai primary key ``id`` "
"umum akan memunculkan sebuah kesalahan. Untuk penggunaan benar warisan "
"banyak, anda dapat menggunakan :class:`~django.db.models.AutoField` jelas "
"dalam model dasar."

msgid ""
"Or use a common ancestor to hold the :class:`~django.db.models.AutoField`. "
"This requires using an explicit :class:`~django.db.models.OneToOneField` "
"from each parent model to the common ancestor to avoid a clash between the "
"fields that are automatically generated and inherited by the child::"
msgstr ""
"Atau gunakan leluhur paling umum untuk menahan :class:`~django.db.models."
"AutoField`. Ini mewajibkan menggunakan sebuah :class:`~django.db.models."
"OneToOneField` secara jelas dari setiap model induk pada leluhur umum untuk "
"menghindari bentrokan diantara bidang yang otomatis dibangkitkan dan "
"diwarisi oleh anak::"

msgid "Field name \"hiding\" is not permitted"
msgstr "Nama bidang \"hiding\" tidak diizinkan"

msgid ""
"In normal Python class inheritance, it is permissible for a child class to "
"override any attribute from the parent class. In Django, this isn't usually "
"permitted for model fields. If a non-abstract model base class has a field "
"called ``author``, you can't create another model field or define an "
"attribute called ``author`` in any class that inherits from that base class."
msgstr ""
"Dalam warisan kelas Python biasan itu diizinkan untuk kelas anak menimpa "
"atribut apapun dari kelas induk. Dalam Django, ini tidak biasanya diizinkan "
"untuk bidang model. Jika kelas dasar model bukan-abstrak mempunyai sebuah "
"bidang disebut ``author``, anda tidak dapat membuat bidang model lain atau "
"menentukan sebuah atribut disebut ``author`` dalam kelas apapun yang "
"mewarisi dari kelas dasar."

msgid ""
"This restriction doesn't apply to model fields inherited from an abstract "
"model. Such fields may be overridden with another field or value, or be "
"removed by setting ``field_name = None``."
msgstr ""
"Batasan ini tidak berlaku ke bidang model diwarisi dari sebuah model "
"abstrak. Bidang itu mungkin ditimpa dengan bidang atau nilai lain, atau "
"dipindahkan dengan mengatur ``field_name = None``."

msgid ""
"Model managers are inherited from abstract base classes. Overriding an "
"inherited field which is referenced by an inherited :class:`~django.db."
"models.Manager` may cause subtle bugs. See :ref:`custom managers and model "
"inheritance <custom-managers-and-inheritance>`."
msgstr ""
"Pengelola model diwarisi dari kelas-kelas dasar abstrak. menimpa sebuah "
"bidang warisan yang diacukan oleh sebuah :class:`~django.db.models.Manager` "
"warisan mungkin menyebabkan kesalahan halus. Lihat :ref:`custom managers and "
"model inheritance 1`."

msgid ""
"Some fields define extra attributes on the model, e.g. a :class:`~django.db."
"models.ForeignKey` defines an extra attribute with ``_id`` appended to the "
"field name, as well as ``related_name`` and ``related_query_name`` on the "
"foreign model."
msgstr ""
"Beberapa bidang-bidang menentukan tambahan atribut pada model, sebagai "
"contoh sebuah :class:`~django.db.models.ForeignKey` menentukan sebuah "
"tambahan atribut dengan ``_id`` ditambahkan pada nama bidang, sama halnya "
"``related_name`` dan ``related_query_name`` pada model asing."

msgid ""
"These extra attributes cannot be overridden unless the field that defines it "
"is changed or removed so that it no longer defines the extra attribute."
msgstr ""
"Atribut-atribut tambahan ini tidak dapat ditambahkan meskipun bidang yang "
"menentukan itu berubah atau dipindahkan sehingga itu tidak lagi menentukan "
"atribut tambahan."

msgid ""
"Overriding fields in a parent model leads to difficulties in areas such as "
"initializing new instances (specifying which field is being initialized in "
"``Model.__init__``) and serialization. These are features which normal "
"Python class inheritance doesn't have to deal with in quite the same way, so "
"the difference between Django model inheritance and Python class inheritance "
"isn't arbitrary."
msgstr ""
"Menimpa bidang-bidang dalam model induk membawa ke kesulitan dalam kawasan "
"seperti pengawalan instance baru (menentukan bidang mana sedang diawalkan "
"dalam ``Model.__init__``) dan serialisasi. Ini adalah fitur-fitur yang "
"warisan kelas Python biasa tidak harus berurusan dengan cara yang sama, jadi "
"perbedaan diantara kelas warisan model Django tidak berubah-ubah."

msgid ""
"This restriction only applies to attributes which are :class:`~django.db."
"models.Field` instances. Normal Python attributes can be overridden if you "
"wish. It also only applies to the name of the attribute as Python sees it: "
"if you are manually specifying the database column name, you can have the "
"same column name appearing in both a child and an ancestor model for multi-"
"table inheritance (they are columns in two different database tables)."
msgstr ""
"Pembatasan ini hanya berlaku pada atribut-atribut yang adalah instance :"
"class:`~django.db.models.Field`. Atribut Python biasa dapat ditimpa jika "
"anda harapkan. Itu juga hanya berlaku pada nama dari atribut seperti Python "
"lihat: jika anda sedang secara manual menentukan nama kolom basisdata, anda "
"dapat mempunyai nama kolom sama muncul di kedua model anak dan leluhur untuk "
"warisan banyak-tabel (mereka adalah kolom-kolom dalam dua tabel-tabel "
"basisdata berbeda)."

msgid ""
"Django will raise a :exc:`~django.core.exceptions.FieldError` if you "
"override any model field in any ancestor model."
msgstr ""
"Django akan memunculkan sebuah :exc:`~django.core.exceptions.FieldError` "
"jika anda menimpa bidang model apapun dalam model pendahulu apapun."

msgid ""
"Note that because of the way fields are resolved during class definition, "
"model fields inherited from multiple abstract parent models are resolved in "
"a strict depth-first order. This contrasts with standard Python MRO, which "
"is resolved breadth-first in cases of diamond shaped inheritance. This "
"difference only affects complex model hierarchies, which (as per the advice "
"above) you should try to avoid."
msgstr ""

msgid "Organizing models in a package"
msgstr "Mengorganisasikan model-model dalam sebuah paket"

msgid ""
"The :djadmin:`manage.py startapp <startapp>` command creates an application "
"structure that includes a ``models.py`` file. If you have many models, "
"organizing them in separate files may be useful."
msgstr ""
"Perintah :djadmin:`manage.py startapp <startapp>` membuat sebuah struktur "
"aplikasi yang menyertakan sebuah berkas ``models.py``. Jika anda mempunyai "
"banyak model, mengorganisasikan mereka dalam berkas-berkas terpisah mungkin "
"membantu."

msgid ""
"To do so, create a ``models`` package. Remove ``models.py`` and create a "
"``myapp/models/`` directory with an ``__init__.py`` file and the files to "
"store your models. You must import the models in the ``__init__.py`` file."
msgstr ""
"Untuk melakukannya, buat sebuah paket ``models``. Pindahkan ``models.py`` "
"dan buat sebuah direktori ``myapp/models/`` dengan sebuah berkas ``__init__."
"py`` dan berkas-berkas untuk menyimpan model-model anda. Anda harus "
"mengimpor model-model dalam berkas ``__init__.py``."

msgid ""
"For example, if you had ``organic.py`` and ``synthetic.py`` in the "
"``models`` directory:"
msgstr ""
"Sebagai contoh, jika anda mempunyai ``organic.py`` dan ``synthetic.py`` "
"dalam direktori ``models``:"

msgid "myapp/models/__init__.py"
msgstr "myapp/models/__init__.py"

msgid ""
"Explicitly importing each model rather than using ``from .models import *`` "
"has the advantages of not cluttering the namespace, making code more "
"readable, and keeping code analysis tools useful."
msgstr ""
"Jelas mengimpor setiap model daripada menggunakan ``from .models import *`` "
"mempunyai keuntungan dari tidak berantakan namespace, membuat kode lebih "
"dapat dibaca, dan menjaga alat analisa kode berguna."

msgid ":doc:`The Models Reference </ref/models/index>`"
msgstr ":doc:`Acuan Model </ref/models/index>`"

msgid ""
"Covers all the model related APIs including model fields, related objects, "
"and ``QuerySet``."
msgstr ""
"Meliputi semua API terkait model termasuk bidang-bidang model, obyek "
"terkait, dan ``QuerySet``."

msgid ""
"This topic guide describes Django's support for interacting with multiple "
"databases. Most of the rest of Django's documentation assumes you are "
"interacting with a single database. If you want to interact with multiple "
"databases, you'll need to take some additional steps."
msgstr ""
"Panduan topik ini menggambarkan dukungan Django untuk interaksi dengan "
"banyak basisdata. Kebanyakan dari sisa dokumentasi Djangomenganggap anda "
"berinteraksi dengan basisdata tunggal. Jika anda ingin berinteraksi dengan "
"banyak basisdata, anda akan butuh mengambil beberapa langkah-langkah "
"tambahan."

msgid ""
"See :ref:`testing-multi-db` for information about testing with multiple "
"databases."
msgstr ""
"Lihat :ref:`testing-multi-db` untuk informasi tentang percobaan dengan "
"banyak basisdata."

msgid "Defining your databases"
msgstr "Menentukan basisdata anda"

msgid ""
"The first step to using more than one database with Django is to tell Django "
"about the database servers you'll be using. This is done using the :setting:"
"`DATABASES` setting. This setting maps database aliases, which are a way to "
"refer to a specific database throughout Django, to a dictionary of settings "
"for that specific connection. The settings in the inner dictionaries are "
"described fully in the :setting:`DATABASES` documentation."
msgstr ""
"Langkah pertama untuk menggunakan lebih dari satu basisdata dengan Django "
"adalah memberitahu Django tentang peladen basisdata anda akan gunakan. Ini "
"dilakukan menggunakan pengaturan :setting:`DATABASES`. Pengaturan ini "
"memetakan nama lain basisdata, yang adalah cara mengacu ke basisdata "
"tertentu sepanjang Django, ke sebuah kamus dari pengaturan untuk hubungan "
"tertentu itu. Pengaturan di sebelah dalam kamus digambarkan sepenuhnya dalam "
"dokumentasi :setting:`DATABASES`."

msgid ""
"Databases can have any alias you choose. However, the alias ``default`` has "
"special significance. Django uses the database with the alias of ``default`` "
"when no other database has been selected."
msgstr ""
"Basisdata dapat mempunyai nama lain apapun anda pilih. Bagaimanapun, nama "
"lain ``default`` mempunyai makna khusus. Django menggunakan basisdata dengan "
"nama lain dari ``default`` ketika tidak ada lagi basisdata telah dipilih."

msgid ""
"The following is an example ``settings.py`` snippet defining two databases "
"-- a default PostgreSQL database and a MySQL database called ``users``::"
msgstr ""
"Berikut adalah sebuah contoh potongan ``settings.py`` menentukan dua "
"basisdata -- sebuah awalan basisdata PostgreSQL dan basisdata MySQL disebut "
"``users``::"

msgid ""
"If the concept of a ``default`` database doesn't make sense in the context "
"of your project, you need to be careful to always specify the database that "
"you want to use. Django requires that a ``default`` database entry be "
"defined, but the parameters dictionary can be left blank if it will not be "
"used. To do this, you must set up :setting:`DATABASE_ROUTERS` for all of "
"your apps' models, including those in any contrib and third-party apps "
"you're using, so that no queries are routed to the default database. The "
"following is an example ``settings.py`` snippet defining two non-default "
"databases, with the ``default`` entry intentionally left empty::"
msgstr ""
"Jika konsep dari basisdata ``default`` tidak masuk akal dalam konteks proyek "
"anda, anda butuh berhati-hati untuk selalu menentukan basisdata anda ingin "
"gunakan. Django membutuhkan masukan basisdata ``default`` untuk ditentukan, "
"tetapi parameter dictionary dapat berupa kosong jika itu akan tidak "
"digunakan. Untuk melakkukan ini, anda harus menyetel :setting:"
"`DATABASE_ROUTERS` untuk semua dari model aplikasi anda, termasuk itu dalam "
"bantuan dan aplikasi pihak-ketiga apapun anda sedang gunakan, sehingga tidak "
"ada permintaan ke basisdata awalan. Berikut adalah contoh potongan "
"``settings.py`` menentukan basisdata dua bukan-awalan, dengan masukan "
"``default`` sengaja dibiarkan kosong::"

msgid ""
"If you attempt to access a database that you haven't defined in your :"
"setting:`DATABASES` setting, Django will raise a ``django.utils.connection."
"ConnectionDoesNotExist`` exception."
msgstr ""

msgid "Synchronizing your databases"
msgstr "Sinkronisasi basisdata anda"

msgid ""
"The :djadmin:`migrate` management command operates on one database at a "
"time. By default, it operates on the ``default`` database, but by providing "
"the :option:`--database <migrate --database>` option, you can tell it to "
"synchronize a different database. So, to synchronize all models onto all "
"databases in the first example above, you would need to call::"
msgstr ""
"Perintah pengelolaan :djadmin:`migrate` berjalan pada satu basisdata pada "
"satu waktu. Secara awalan, itu berjalan pada basisdata ``default``, tetapi "
"dengan menyediakan pilihan :option:`--database 1`, anda dapat memberitahu "
"itu untuk mensinkronkan basisdata berbeda. Jadi, untuk mensinkronkan semua "
"kedalam semua basisdata dalam contoh pertama diatas, anda akan butuh "
"memanggil::"

msgid ""
"If you don't want every application to be synchronized onto a particular "
"database, you can define a :ref:`database router<topics-db-multi-db-"
"routing>` that implements a policy constraining the availability of "
"particular models."
msgstr ""
"Jika anda tidak ingin setiap aplikasi disinkronkan kedalam basisdata "
"tertentu, anda dapat menentukan :ref:`database router1` yang menerapkan "
"batasan kebijakan ketersediaan dari model tertentu."

msgid ""
"If, as in the second example above, you've left the ``default`` database "
"empty, you must provide a database name each time you run :djadmin:"
"`migrate`. Omitting the database name would raise an error. For the second "
"example::"
msgstr ""
"Jika, seperti dalam contoh kedua diatas, anda telah meninggalkan basisdata "
"``default`` kosong, anda harus menyediakan sebuah nama basisdata setiap "
"waktu anda menjalankan :djadmin:`migrate`. Menghilangkan nama basisdata akan "
"memunculkan sebuah kesalahan. Untuk contoh kedua::"

msgid "Using other management commands"
msgstr "Menggunakan perintah pengelolaan lain"

msgid ""
"Most other ``django-admin`` commands that interact with the database operate "
"in the same way as :djadmin:`migrate` -- they only ever operate on one "
"database at a time, using ``--database`` to control the database used."
msgstr ""
"Kebanyakan perintah ``django-admin`` lain yang berinteraksi dengan basisdata "
"berjalan dalam cara sama seperti :djadmin:`migrate` -- mereka hanya berjalan "
"pada satu basisdata pada satu waktu, menggunakan ``--database`` untuk "
"mengendalikan penggunaan basisdata."

msgid ""
"An exception to this rule is the :djadmin:`makemigrations` command. It "
"validates the migration history in the databases to catch problems with the "
"existing migration files (which could be caused by editing them) before "
"creating new migrations. By default, it checks only the ``default`` "
"database, but it consults the :meth:`allow_migrate` method of :ref:`routers "
"<topics-db-multi-db-routing>` if any are installed."
msgstr ""
"Sebuah pengecualian pada aturan ini adalah perintah :djadmin:"
"`makemigrations`. Itu mengecek riwayat perpindahan di basisdata untuk "
"menangkap masalah dengan berkas perpindahan yang ada (yang dapat disebabkan "
"dengan menyunting mereka) sebelum membuat perpindahan baru. Secara awalan, "
"itu memeriksa hanya basisdata ``default``, tetapi itu merundingkan metode :"
"meth:`allow_migrate` dari :ref:`routers <topics-db-multi-db-routing>` jika "
"apapun terpasang."

msgid "Automatic database routing"
msgstr "Perute basisdata otomatis"

msgid ""
"The easiest way to use multiple databases is to set up a database routing "
"scheme. The default routing scheme ensures that objects remain 'sticky' to "
"their original database (i.e., an object retrieved from the ``foo`` database "
"will be saved on the same database). The default routing scheme ensures that "
"if a database isn't specified, all queries fall back to the ``default`` "
"database."
msgstr ""
"Cara termudah menggunakan banyak basisdata adalah menyetel skema perutean "
"basisdata. Skema perutean awalan memastikan bahwa obyek tetap 'sticky' ke "
"basisdata aslinya (yaitu, obyek diambil dari basisdata ``foo`` akan disimpan "
"pada basisdata sama). Skema perute awalan memastikan bahwa jika sebuah "
"absisdata tidak ditentukan, semua permintaan kembali ke basisdata "
"``default``."

msgid ""
"You don't have to do anything to activate the default routing scheme -- it "
"is provided 'out of the box' on every Django project. However, if you want "
"to implement more interesting database allocation behaviors, you can define "
"and install your own database routers."
msgstr ""
"Anda tidak perlu melakukan apapun untuk mengaktifkan skema perutean awalan "
"-- itu disediakan 'beda dari biasanya' pada setiap proyek Django. "
"Bagaimanapun, jika anda ingin menerapkan lebih menarik perilaku peruntukan "
"basisdata, anda dapat menentukan dan memasang perute basisdata anda sendiri."

msgid "Database routers"
msgstr "Router basisdata"

msgid "A database Router is a class that provides up to four methods:"
msgstr "Perute basisdata adalah kelas yang menyediakan sampai empat metode:"

msgid ""
"Suggest the database that should be used for read operations for objects of "
"type ``model``."
msgstr ""
"Sarankan basisdata yang harus digunakan untuk membaca tindakan-tindakan "
"untuk obyek dari jenis ``model``."

msgid ""
"If a database operation is able to provide any additional information that "
"might assist in selecting a database, it will be provided in the ``hints`` "
"dictionary. Details on valid hints are provided :ref:`below <topics-db-multi-"
"db-hints>`."
msgstr ""
"Jika tindakan basisdata dapat menyediakan informasi tambahan apapun yang "
"mungkin membantu dalam memilih basisdata, itu akan menyediakan dalam "
"dictionary ``hints``. Rincian pada peunjuk sah disediakan :ref:`below 1`."

msgid "Returns ``None`` if there is no suggestion."
msgstr "Mengembalikan ``None`` jika tidak ada saran."

msgid ""
"Suggest the database that should be used for writes of objects of type Model."
msgstr ""
"Sarankan basisdata yang harus digunakan untuk menulis dari obyek dari jenis "
"Model."

msgid ""
"Return ``True`` if a relation between ``obj1`` and ``obj2`` should be "
"allowed, ``False`` if the relation should be prevented, or ``None`` if the "
"router has no opinion. This is purely a validation operation, used by "
"foreign key and many to many operations to determine if a relation should be "
"allowed between two objects."
msgstr ""
"Mengembalikan ``True`` jika sebuah hubungan diantara ``obj1`` dan ``obj2`` "
"harus diizinkan, ``False`` jika hubungan harus dicegah, atau ``None`` jika "
"perute tidak memiliki pendapat. Ini adalah murni tindakan pengesahan, "
"digunakan oleh foreign key dan tindakan many to many untuk menentukan jika "
"hubungan harus diizinkan diantara dua obyek."

msgid ""
"If no router has an opinion (i.e. all routers return ``None``), only "
"relations within the same database are allowed."
msgstr ""

msgid ""
"Determine if the migration operation is allowed to run on the database with "
"alias ``db``. Return ``True`` if the operation should run, ``False`` if it "
"shouldn't run, or ``None`` if the router has no opinion."
msgstr ""
"Tentukan jika tindakan perpindahan diizinkan untuk menjalankan pada "
"basisdata dengan nama lain ``db``. Mengembalikan ``True`` jika tindakan "
"harus berjalan, ``False`` jika itu tidak harus berjalan, atau ``None`` jika "
"perute tidak memiliki pendapat."

msgid ""
"The ``app_label`` positional argument is the label of the application being "
"migrated."
msgstr ""
"Argumen penempatan ``app_label`` adalah label untuk aplikasi sedang "
"dipindahkan."

msgid ""
"``model_name`` is set by most migration operations to the value of ``model."
"_meta.model_name`` (the lowercased version of the model ``__name__``) of the "
"model being migrated. Its value is ``None`` for the :class:`~django.db."
"migrations.operations.RunPython` and :class:`~django.db.migrations."
"operations.RunSQL` operations unless they provide it using hints."
msgstr ""
"``model_name`` disetel oleh kebanyakan tindakan perpindahan pada nilai dari "
"``model._meta.model_name`` (versi huruf kecil dari model ``__name__``) dari "
"model sedang dipindahkan. Nilai itu adalah ``None`` untuk tindakan :class:"
"`~django.db.migrations.operations.RunPython` dan :class:`~django.db."
"migrations.operations.RunSQL` meskipun mereka menyediakan itu menggunakan "
"petunjuk."

msgid ""
"``hints`` are used by certain operations to communicate additional "
"information to the router."
msgstr ""
"``hints`` digunakan oleh tindakan tertentu untuk berkomunikasi informasi "
"tambahan ke perute."

msgid ""
"When ``model_name`` is set, ``hints`` normally contains the model class "
"under the key ``'model'``. Note that it may be a :ref:`historical model "
"<historical-models>`, and thus not have any custom attributes, methods, or "
"managers. You should only rely on ``_meta``."
msgstr ""
"Ketika ``hints`` disetel, ``hints`` biasanya mengandung kelas model dibawah "
"kunci ``'model'``. Catat bahwa itu mungkin berupa :ref:`historical model 1`, "
"dan dengan demikian tidak mempunyai atribut penyesuaian apapun, metode, atau "
"pengelola. Anda harus hanya bergantung pada ``_meta``."

msgid ""
"This method can also be used to determine the availability of a model on a "
"given database."
msgstr ""
"Metode ini dapat juga digunakan untuk menentukan ketersediaan dari sebuah "
"model pada basisdata yang diberikan."

msgid ""
":djadmin:`makemigrations` always creates migrations for model changes, but "
"if ``allow_migrate()`` returns ``False``, any migration operations for the "
"``model_name`` will be silently skipped when running :djadmin:`migrate` on "
"the ``db``. Changing the behavior of ``allow_migrate()`` for models that "
"already have migrations may result in broken foreign keys, extra tables, or "
"missing tables. When :djadmin:`makemigrations` verifies the migration "
"history, it skips databases where no app is allowed to migrate."
msgstr ""
":djadmin:`makemigrations` selalu membuat perpindahan untuk perubahan model, "
"tetapi jika ``allow_migrate()`` mengembalikan ``False``, tindakan "
"perpindahan apapun untuk ``model_name`` akan secara diam dilewatkan ketika "
"menjalankan :djadmin:`migrate` pada ``db``. Merubah perilaku dari "
"``allow_migrate()`` untuk model yang sudah berpindah mungkin menghasilkan "
"rusak dalam foreign key, tabel tambahan, atau tabel hilang. Ketika :djadmin:"
"`makemigrations` memeriksa riwayat perpindahan, itu melewati basisdata "
"dimana tidak ada aplikasi diizinkan berpindah."

msgid ""
"A router doesn't have to provide *all* these methods -- it may omit one or "
"more of them. If one of the methods is omitted, Django will skip that router "
"when performing the relevant check."
msgstr ""
"Perute tidak harus menyediakan *semua* metode ini -- itu mungkin "
"menghilangkan satu atau lebih dari mereka. Jika satu dari metode ini "
"dihilangkan, Django akan melewati perute itu ketika melakukan pemeriksaan "
"terkait."

msgid "Hints"
msgstr "Petunjuk"

msgid ""
"The hints received by the database router can be used to decide which "
"database should receive a given request."
msgstr ""
"Petunjuk diterima oleh perute basisdata dapat digunakan untuk memutuskan "
"basisdata mana harus menerima permintaan yang diberikan."

msgid ""
"At present, the only hint that will be provided is ``instance``, an object "
"instance that is related to the read or write operation that is underway. "
"This might be the instance that is being saved, or it might be an instance "
"that is being added in a many-to-many relation. In some cases, no instance "
"hint will be provided at all. The router checks for the existence of an "
"instance hint, and determine if that hint should be used to alter routing "
"behavior."
msgstr ""
"Saat sekarang, petunjuk satu-satunya akan disediakan adalah ``instance``, "
"sebuah instance obyek yang terkait ke tindakan baca atau tulis yang "
"berlangsung. Ini mungkin instance yang sedang disimpan, atau itu mungkin "
"berupa sebuah instance yang sedang ditambahkan dalam hubungan many-to-many. "
"Dalam beberapa kasus, tidak ada petunjuk instance akan disediakan sama "
"sekali. Perute memeriksa untuk kehadiran dari sebuah petunjuk instance, dan "
"menentukan jika petunjuk itu harus digunakan untuk merubah perulaku perutean."

msgid "Using routers"
msgstr "Menggunakan router"

msgid ""
"Database routers are installed using the :setting:`DATABASE_ROUTERS` "
"setting. This setting defines a list of class names, each specifying a "
"router that should be used by the master router (``django.db.router``)."
msgstr ""
"Perute basisdata dipasang menggunakan pengaturan :setting:"
"`DATABASE_ROUTERS`. Pengaturan ini menentukan daftar dari nama-nama kelas, "
"setiap menentukan perute harus digunakan dengan perute master (``django.db."
"router``)."

msgid ""
"The master router is used by Django's database operations to allocate "
"database usage. Whenever a query needs to know which database to use, it "
"calls the master router, providing a model and a hint (if available). Django "
"then tries each router in turn until a database suggestion can be found. If "
"no suggestion can be found, it tries the current :attr:`instance._state.db "
"<django.db.models.Model._state>` of the hint instance. If a hint instance "
"wasn't provided, or :attr:`instance._state.db <django.db.models.Model."
"_state>` is ``None``, the master router will allocate the ``default`` "
"database."
msgstr ""

msgid "An example"
msgstr "Sebuah contoh"

msgid "Example purposes only!"
msgstr "Hanya bertujuan contoh!"

msgid ""
"This example is intended as a demonstration of how the router infrastructure "
"can be used to alter database usage. It intentionally ignores some complex "
"issues in order to demonstrate how routers are used."
msgstr ""
"Contoh ini dimaksudkan sebagai pertunjukan dari bagaimana infrastruktur "
"perute dapat digunakan untuk mengubah penggunaan basisdata. Itu sengaja "
"mengabaikan beberapa masalah rumit untuk mempertunjukkan bagaimana perute "
"digunakan."

msgid ""
"This example won't work if any of the models in ``myapp`` contain "
"relationships to models outside of the ``other`` database. :ref:`Cross-"
"database relationships <no_cross_database_relations>` introduce referential "
"integrity problems that Django can't currently handle."
msgstr ""
"Contoh ini tidak akan bekerja jika apapun dari model dalam ``myapp`` "
"mengandung hubungan pada model diluar dari basisdata ``other``. :ref:`Cross-"
"database relationships 1` memperkenalkan masalah kesatuan referensial yang "
"Django tidak dapat saat ini ditangani."

msgid ""
"The primary/replica (referred to as master/slave by some databases) "
"configuration described is also flawed -- it doesn't provide any solution "
"for handling replication lag (i.e., query inconsistencies introduced because "
"of the time taken for a write to propagate to the replicas). It also doesn't "
"consider the interaction of transactions with the database utilization "
"strategy."
msgstr ""
"Konfigurasi utama/tiruan (mengacu pada sebagai master/slave oleh beberapa "
"basisdata) digambarkan juga cacat -- itu tidak menyediakan pemecahan apapun "
"untuk menangani tiruan ketinggalan (yaitu permintaan ketidakkonsekuen "
"diperkenalkan karena dari waktu diambil untuk menulis untuk disebarkan ke "
"tiruan). Itu juga tidak mempertimbangkan timbal balik dari transaksi dengan "
"strategi penggunaan basisdata."

msgid ""
"So - what does this mean in practice? Let's consider another sample "
"configuration. This one will have several databases: one for the ``auth`` "
"application, and all other apps using a primary/replica setup with two read "
"replicas. Here are the settings specifying these databases::"
msgstr ""
"Jadi -  apa ini artinya dalam praktik? Mari kita pertimbangkan konfigurasi "
"contoh lain. Satu ini akan mempunyai beberapa basisdata: satu untuk aplikasi "
"``auth``, dan semua aplikasi lain menggunakan setelah utama/tiruan dengan "
"duatiruan baca. Ini adalah pengaturan menentukan basisdata ini::"

msgid ""
"Now we'll need to handle routing. First we want a router that knows to send "
"queries for the ``auth`` and ``contenttypes`` apps to ``auth_db`` (``auth`` "
"models are linked to ``ContentType``, so they must be stored in the same "
"database)::"
msgstr ""

msgid ""
"And we also want a router that sends all other apps to the primary/replica "
"configuration, and randomly chooses a replica to read from::"
msgstr ""
"Dan kami juga ingin sebuah perute yang mengirim semua aplikasi lain semua ke "
"konfigurasi utama/tiruan, dan secara acak memilih sebuah tiruan untuk "
"dibaca::"

msgid ""
"Finally, in the settings file, we add the following (substituting ``path.to."
"`` with the actual Python path to the module(s) where the routers are "
"defined)::"
msgstr ""
"Akhirnya, dalam berkas pengaturan, kami menambahkan berikut (mengganti "
"``path.to.`` dengan jalur Python sebenarnya pada modul dimana perute "
"ditentukan)::"

msgid ""
"The order in which routers are processed is significant. Routers will be "
"queried in the order they are listed in the :setting:`DATABASE_ROUTERS` "
"setting. In this example, the ``AuthRouter`` is processed before the "
"``PrimaryReplicaRouter``, and as a result, decisions concerning the models "
"in ``auth`` are processed before any other decision is made. If the :setting:"
"`DATABASE_ROUTERS` setting listed the two routers in the other order, "
"``PrimaryReplicaRouter.allow_migrate()`` would be processed first. The catch-"
"all nature of the PrimaryReplicaRouter implementation would mean that all "
"models would be available on all databases."
msgstr ""
"Urutan dimana perute diolah adalah penting. Perute akan diminta agar mereka "
"didaftarkan dalam pengaturan :setting:`DATABASE_ROUTERS`. Dalam contoh ini, "
"``AuthRouter`` diolah sebelum ``PrimaryReplicaRouter``, dan sebagai hasil, "
"keputusan tentang model-model dalam ``auth`` diolah sebelum keputusan lain "
"apapun dibuat. Jika pengaturan  :setting:`DATABASE_ROUTERS` mendaftarkan dua "
"perute dalam urutan lain, ``PrimaryReplicaRouter.allow_migrate()`` akan "
"diolah dahulu. Tangkap-semua alami dari penerapan PrimaryReplicaRouter akan "
"berarti bahwa semua model-model akan tersedia pada semua basisdata."

msgid ""
"With this setup installed, and all databases migrated as per :ref:"
"`synchronizing_multiple_databases`, lets run some Django code::"
msgstr ""

msgid ""
"This example defined a router to handle interaction with models from the "
"``auth`` app, and other routers to handle interaction with all other apps. "
"If you left your ``default`` database empty and don't want to define a catch-"
"all database router to handle all apps not otherwise specified, your routers "
"must handle the names of all apps in :setting:`INSTALLED_APPS` before you "
"migrate. See :ref:`contrib_app_multiple_databases` for information about "
"contrib apps that must be together in one database."
msgstr ""
"Contoh ini menentukan sebuah perute untuk menangani interaksi dengan model-"
"model dari aplikasi ``auth``, dan perute lain untuk mengangani interaksi "
"dengan semua aplikasi lain. Jika anda membiarkan basisdata ``default`` anda "
"kosong dan tidak ingin menentukan perute basisdata tangkap-semua untuk "
"mengangani semua aplikasi tidak sebaliknya ditentukan, perute anda harus "
"menangani nama-nama dari semua aplikasi dalam :setting:`INSTALLED_APPS` "
"sebelum anda berpindah. Lihat :ref:`contrib_app_multiple_databases` untuk "
"informasi tentang apliaksi bantuan yang harus bersama-sama dalam satu "
"basisdata."

msgid "Manually selecting a database"
msgstr "Manual memilih basisdata"

msgid ""
"Django also provides an API that allows you to maintain complete control "
"over database usage in your code. A manually specified database allocation "
"will take priority over a database allocated by a router."
msgstr ""
"Django juga menyediakan sebuah API yang mengizinkan anda merawat kendali "
"lengkap terhadap penggunaan basisdata dalam kode anda. Peruntukan basisdata "
"ditentukan manual terhadap basisdata diperuntukkan oleh sebuah perute."

msgid "Manually selecting a database for a ``QuerySet``"
msgstr "Secara manual memilih basisdata untuk ``QuerySet``"

msgid ""
"You can select the database for a ``QuerySet`` at any point in the "
"``QuerySet`` \"chain.\" Call ``using()`` on the ``QuerySet`` to get another "
"``QuerySet`` that uses the specified database."
msgstr ""

msgid ""
"``using()`` takes a single argument: the alias of the database on which you "
"want to run the query. For example::"
msgstr ""
"``using()`` mengambil argumen tunggal: nama lain dari basisdata pada dimana "
"anda ingin menjalankan permintaan. Sebagai contoh::"

msgid "Selecting a database for ``save()``"
msgstr "Memilih basisdata untuk ``save()``"

msgid ""
"Use the ``using`` keyword to ``Model.save()`` to specify to which database "
"the data should be saved."
msgstr ""
"Gunakan kata kunci ``using`` pada ``Model.save()`` untuk menentukan pada "
"basisdata mana data harus disimpan."

msgid ""
"For example, to save an object to the ``legacy_users`` database, you'd use "
"this::"
msgstr ""
"Sebagai contoh, untuk menyimpan sebuah obyek pada basisdata "
"``legacy_users``, anda akan menggunakan ini::"

msgid ""
"If you don't specify ``using``, the ``save()`` method will save into the "
"default database allocated by the routers."
msgstr ""
"Jika anda tidak menentukan ``using``, metode ``save()`` kan menyimpan "
"kedalam basisdata awalan ditempatkan oleh perute."

msgid "Moving an object from one database to another"
msgstr "Memindahkan sebuah obyek dari satu basisdata ke lainnya"

msgid ""
"If you've saved an instance to one database, it might be tempting to use "
"``save(using=...)`` as a way to migrate the instance to a new database. "
"However, if you don't take appropriate steps, this could have some "
"unexpected consequences."
msgstr ""
"Jika anda menyimpan sebuah instance pada satu basisdata, itu mungkin "
"menggoda untuk menggunakan ``save(using=...)`` sebagai sebuah cara berpindah "
"instance ke basisdata baru. Bagaimanapun, jika anda tidak mengambil langkah-"
"langkah yang sesuai, ini dapat memiliki beberapa konsekuensi tidak "
"diharapkan."

msgid "Consider the following example::"
msgstr "Pertimbangkan contoh berikut ::"

msgid ""
"In statement 1, a new ``Person`` object is saved to the ``first`` database. "
"At this time, ``p`` doesn't have a primary key, so Django issues an SQL "
"``INSERT`` statement. This creates a primary key, and Django assigns that "
"primary key to ``p``."
msgstr ""
"Dalam pernyataan 1, sebuah obyek ``Person`` baru disimpan ke basisdata "
"``first``. Pada saat ini, ``p`` tidak memiliki primary key, jadi Django "
"menerbitkan sebuah pernyataan SQL ``INSERT``. Ini membuat sebuah primary "
"key, dan Django memberikan primary key itu ke ``p``."

msgid ""
"When the save occurs in statement 2, ``p`` already has a primary key value, "
"and Django will attempt to use that primary key on the new database. If the "
"primary key value isn't in use in the ``second`` database, then you won't "
"have any problems -- the object will be copied to the new database."
msgstr ""
"Ketika penyimpanan muncul dalam pernyataan 2, ``p`` sudah mempunyai nilai "
"primary key, dan Django akan berusaha menggunakan primary key itu pada "
"basisdata baru. Jika nilai primary key tidak digunakan dalam basisdata "
"``second``, kemudian akdan tidak mempunyai masalah apapun -- obyek akan "
"disalin ke basisdata baru."

msgid ""
"However, if the primary key of ``p`` is already in use on the ``second`` "
"database, the existing object in the ``second`` database will be overridden "
"when ``p`` is saved."
msgstr ""
"Bagaimanapun, jika primary key dari ``p`` sudah digunakan pada basisdata "
"``second``, obyek yang ada dalam basisdata ``second`` akan ditimpan ketika "
"``p`` disimpan."

msgid ""
"You can avoid this in two ways. First, you can clear the primary key of the "
"instance. If an object has no primary key, Django will treat it as a new "
"object, avoiding any loss of data on the ``second`` database::"
msgstr ""
"Anda dapat menghindari ini dalam dua cara. Pertama, anda dapat membersihkan "
"primary key dari instance. Jika sebuah obyek tidak mempunyai primary key, "
"Django akan memperlakukan itu sebagai sebuah obyek baru, menghindari "
"kehilangan dari data pada basisdata ``second``::"

msgid ""
"The second option is to use the ``force_insert`` option to ``save()`` to "
"ensure that Django does an SQL ``INSERT``::"
msgstr ""
"Pilihan kedua adalah menggunakan pilihan ``force_insert`` pada ``save()`` "
"untuk memastikan Django melakukan ``INSERT`` SQL::"

msgid ""
"This will ensure that the person named ``Fred`` will have the same primary "
"key on both databases. If that primary key is already in use when you try to "
"save onto the ``second`` database, an error will be raised."
msgstr ""
"Ini akan memastikan bahwa seseorang bernama ``Fred`` akan mempunyai primary "
"key sama pada kedua basisdata. Jika primary key sudah digunakan ketika anda "
"mencoba menyimpan kedalam basisdata ``kedua``, sebuah kesalahan akan "
"dimunculkan."

msgid "Selecting a database to delete from"
msgstr "Memilih basisdata untuk menghapus dari"

msgid ""
"By default, a call to delete an existing object will be executed on the same "
"database that was used to retrieve the object in the first place::"
msgstr ""
"Secara awalan, sebuah panggilan untuk menghapus obyek yang ada akan "
"dijalankan pada basisdata sama yang digunakan untuk mengambil obyek dalam "
"tempat pertama::"

msgid ""
"To specify the database from which a model will be deleted, pass a ``using`` "
"keyword argument to the ``Model.delete()`` method. This argument works just "
"like the ``using`` keyword argument to ``save()``."
msgstr ""
"Untuk menentukan basisdata dari model mana akan dihapus, lewatkan sebuah "
"argumen kata kunci ``using`` pada metode ``Model.delete()``. Argumen ini "
"bekerja seperti argumen kata kunci ``using`` pada ``save()``."

msgid ""
"For example, if you're migrating a user from the ``legacy_users`` database "
"to the ``new_users`` database, you might use these commands::"
msgstr ""
"Sebagai contoh, jika anda sedang memindahkan pengguna dari basisdata "
"``legacy_users`` ke basisdata ``new_users``, anda mungkin menggunakan "
"perintah-perintah ini::"

msgid "Using managers with multiple databases"
msgstr "Menggunakan pengelola dengan banyak basisdata"

msgid ""
"Use the ``db_manager()`` method on managers to give managers access to a non-"
"default database."
msgstr ""
"Gunakan metode ``db_manager()`` pada pengelola untuk memberikan pengelola "
"mengakses ke basisdata bukan-awalan."

msgid ""
"For example, say you have a custom manager method that touches the database "
"-- ``User.objects.create_user()``. Because ``create_user()`` is a manager "
"method, not a ``QuerySet`` method, you can't do ``User.objects."
"using('new_users').create_user()``. (The ``create_user()`` method is only "
"available on ``User.objects``, the manager, not on ``QuerySet`` objects "
"derived from the manager.) The solution is to use ``db_manager()``, like "
"this::"
msgstr ""
"Sebagai contoh, katakan anda mempunyai metode pengelolaan penyesuaian yang "
"menyentuh basisdata -- ``User.objects.create_user()``. Karena "
"``create_user()`` adalah metode pengelola, bukan metode ``QuerySet``, anda "
"tidak dapat melakukan ``User.objects.using('new_users').create_user()``. "
"(Metode ``create_user()`` hanya tersedia pada ``User.objects``, pengelola, "
"bukan pada obyek ``QuerySet`` diturunkan dari pengelola.) Pemecahannya "
"adalah menggunakan ``db_manager()``, seperti ini::"

msgid ""
"``db_manager()`` returns a copy of the manager bound to the database you "
"specify."
msgstr ""
"``db_manager()`` mengembalikan sebuah salinan dari ikatan pengelola pada "
"basisdata anda tentukan."

msgid "Using ``get_queryset()`` with multiple databases"
msgstr "Menggunakan ``get_queryset()`` dengan basisdata banyak"

msgid ""
"If you're overriding ``get_queryset()`` on your manager, be sure to either "
"call the method on the parent (using ``super()``) or do the appropriate "
"handling of the ``_db`` attribute on the manager (a string containing the "
"name of the database to use)."
msgstr ""
"Jika anda menimpa ``get_queryset()`` pada pengelola anda, apstikan untuk "
"antara memanggil metode pada induk (menggunakan ``super()``) atau melakukan "
"penanganan sesuai dari atribut ``_db`` pada pengelola (sebuah string "
"mengandung nama dari basisdata untuk digunakan)."

msgid ""
"For example, if you want to return a custom ``QuerySet`` class from the "
"``get_queryset`` method, you could do this::"
msgstr ""
"Sebagai contoh, jika anda ingin mengembalikan penyesuaian kelas ``QuerySet`` "
"dari metode ``get_queryset``, anda dapat melakukan ini:: "

msgid "Exposing multiple databases in Django's admin interface"
msgstr "Memamerkan basisdata banyak di antarmuka admin Django"

msgid ""
"Django's admin doesn't have any explicit support for multiple databases. If "
"you want to provide an admin interface for a model on a database other than "
"that specified by your router chain, you'll need to write custom :class:"
"`~django.contrib.admin.ModelAdmin` classes that will direct the admin to use "
"a specific database for content."
msgstr ""
"Admin Django tidak mempunyai dukungan jelas untuk banyak basisdata. Jika "
"anda ingin menyediakan sebuah antarmuka admin untuk sebuah model pada sebuah "
"basisdata daripada selain ditentukan oleh rantai peute anda, anda akan butuh "
"menulis kelas-kelas :class:`~django.contrib.admin.ModelAdmin` penyesuaian "
"yang akan langsung ke admin untuk menggunakan basisdata khusus untuk isi."

msgid ""
"``ModelAdmin`` objects have five methods that require customization for "
"multiple-database support::"
msgstr ""
"Obyek ``ModelAdmin`` mempunyai lima metode yang membutuhkan penyesuaian "
"untuk dukungan banyak-basisdata::"

msgid ""
"The implementation provided here implements a multi-database strategy where "
"all objects of a given type are stored on a specific database (e.g., all "
"``User`` objects are in the ``other`` database). If your usage of multiple "
"databases is more complex, your ``ModelAdmin`` will need to reflect that "
"strategy."
msgstr ""
"Penerapan disediakan disini menerapkan strategi banyak-basisdata dimana "
"semua obyek dari jenis yang diberikan disimpan pada basisdata khusus "
"(sebagai contoh, semua obyek ``User`` dalam basisdata ``lain``). Jika "
"penggunaan anda dari banyak basisdata lebih rumit, ``ModelAdmin`` anda akan "
"butuh mencerminkan strategi itu."

msgid ""
":class:`~django.contrib.admin.InlineModelAdmin` objects can be handled in a "
"similar fashion. They require three customized methods::"
msgstr ""
"Obyek :class:`~django.contrib.admin.InlineModelAdmin` dapat ditangani di "
"gaya yang mirip. Mereka membutuhkan tiga metode penyesuaian::"

msgid ""
"Once you've written your model admin definitions, they can be registered "
"with any ``Admin`` instance::"
msgstr ""
"Sekali anda telah menulis pengertian admin model anda, mereka dapat "
"didaftarkan dengan instance ``Admin`` apapun::"

msgid ""
"This example sets up two admin sites. On the first site, the ``Author`` and "
"``Publisher`` objects are exposed; ``Publisher`` objects have a tabular "
"inline showing books published by that publisher. The second site exposes "
"just publishers, without the inlines."
msgstr ""
"Contoh ini menyetel dua situs admin. Pada situs pertama, obyek-obyek "
"``Author`` dan ``Publisher`` dibuka; obyek-obyek ``Publisher`` mempunyai "
"sebuah dibarisan datar menunjukkan buku-buku diterbitkan oleh penerbit. "
"Situs kedua membuka hanya penerbit, tanpa barisan."

msgid "Using raw cursors with multiple databases"
msgstr "Menggunakan kursor mentah dengan banyak basisdata"

msgid ""
"If you are using more than one database you can use ``django.db."
"connections`` to obtain the connection (and cursor) for a specific database. "
"``django.db.connections`` is a dictionary-like object that allows you to "
"retrieve a specific connection using its alias::"
msgstr ""
"Jika anda menggunakan lebih dari satu basisdata anda dapat menggunakan "
"``django.db.connections`` untuk mengambil hubungan (dan kursor) untuk "
"basisdata tertentu. ``django.db.connections`` adalah objek seperti-kamus "
"yang mengizinkan anda mengambil hubungan tertentu menggunakan nama lainnya:: "

msgid "Limitations of multiple databases"
msgstr "Batasan dari banyak basisdata"

msgid "Cross-database relations"
msgstr "Hubungan lintas-basisdata"

msgid ""
"Django doesn't currently provide any support for foreign key or many-to-many "
"relationships spanning multiple databases. If you have used a router to "
"partition models to different databases, any foreign key and many-to-many "
"relationships defined by those models must be internal to a single database."
msgstr ""
"Django saat ini tidak menyediakan dukungan apapun untuk foreign key atau "
"hubungan many-to-many menjangkau banyak basisdata. Jika anda telah "
"menggunakan sebuah perute pada model sebagian ke basisdata berbeda, foreign "
"key apapun dan hubungan many-to-many ditentukan oleh modek-model tersebut "
"harus secara internal pada basisdata tunggal."

msgid ""
"This is because of referential integrity. In order to maintain a "
"relationship between two objects, Django needs to know that the primary key "
"of the related object is valid. If the primary key is stored on a separate "
"database, it's not possible to easily evaluate the validity of a primary key."
msgstr ""
"Ini karena dari kesatuan referensial. Untuk merawat hubungan diantara dua "
"obyek, Django butuh mengetahui bahwa primary key dari obyek terkait adalah "
"sah. Jika primary key disimpan pada basisdata terpisah, itu tidak mungkin "
"dengan mudah menilai keabsahan primary key."

msgid ""
"If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at "
"the database integrity level -- database level key constraints prevent the "
"creation of relations that can't be validated."
msgstr ""
"Jika anda sedang menggunakan Postgres, Oracle, atau MySQL dengan InnoDB, ini "
"dipaksa pada tingkat kesatuan basisdata -- batasan kunci tingkatan basisdata "
"mencegah dari pembuatan dari hubungan yang tidak dapat disahkan."

msgid ""
"However, if you're using SQLite or MySQL with MyISAM tables, there is no "
"enforced referential integrity; as a result, you may be able to 'fake' cross "
"database foreign keys. However, this configuration is not officially "
"supported by Django."
msgstr ""
"Bagaimanapun, jika anda sedang menggunakan SQLite atay MySQL dengan tabel "
"MyISAM, tidak ada pemaksaan kesatuan referensial; sebagai hasil, anda "
"mungkin dapat me 'niru' foreign key basisdata. bagaimanapun, konfigurasi ini "
"tidak secara resmi didukung oleh Django."

msgid "Behavior of contrib apps"
msgstr "Perilaku dari aplikasi bantuan"

msgid ""
"Several contrib apps include models, and some apps depend on others. Since "
"cross-database relationships are impossible, this creates some restrictions "
"on how you can split these models across databases:"
msgstr ""
"Beberapa aplikasi bantuan termasuk model-model, dan beberapa aplikasi "
"bergantung pada lainnya. Sejak hubungan silang-basisdata tidak dimungkinkan, "
"ini membuat beberapa pembatasan pada bagaimana anda dapat memisahkan model-"
"model ini terhadap basisdata:"

msgid ""
"each one of ``contenttypes.ContentType``, ``sessions.Session`` and ``sites."
"Site`` can be stored in any database, given a suitable router."
msgstr ""
"setiap satu dari ``contenttypes.ContentType``, ``sessions.Session`` dan "
"``sites.Site`` dapat disimpan dalam basisdata apapun, diberikan perute yang "
"cocok."

msgid ""
"``auth`` models — ``User``, ``Group`` and ``Permission`` — are linked "
"together and linked to ``ContentType``, so they must be stored in the same "
"database as ``ContentType``."
msgstr ""
"Model-model ``auth`` — ``User``, ``Group`` dan ``Permission`` — dikaitkan "
"bersama-sama dan dikaitkan pada ``ContentType``, sehingga mereka harus "
"disimpan dalam basisdata sama sebagai ``ContentType``."

msgid ""
"``admin`` depends on ``auth``, so its models must be in the same database as "
"``auth``."
msgstr ""
"``admin`` bergantung pada ``auth``, jadi modelnya harus di basisdata sama "
"seperti ``auth``."

msgid ""
"``flatpages`` and ``redirects`` depend on ``sites``, so their models must be "
"in the same database as ``sites``."
msgstr ""
"``flatpages`` dan ``redirects`` bergantung pada ``sites``,jadi model-model "
"mereka harus di basisdata yang sama seperti ``sites``."

msgid ""
"In addition, some objects are automatically created just after :djadmin:"
"`migrate` creates a table to hold them in a database:"
msgstr ""
"Sebagai tambahan, beberapa obyek otomatis dibuat hanya setelah :djadmin:"
"`migrate` membuat tabel untuk menahan mereka dalam basisdata:"

msgid "a default ``Site``,"
msgstr "``Site`` awal,"

msgid ""
"a ``ContentType`` for each model (including those not stored in that "
"database),"
msgstr ""
"sebuah ``ContentType`` untuk setiap model (termasuk itu tidak disimpan di "
"basisdata itu),"

msgid ""
"the ``Permission``\\s for each model (including those not stored in that "
"database)."
msgstr ""

msgid ""
"For common setups with multiple databases, it isn't useful to have these "
"objects in more than one database. Common setups include primary/replica and "
"connecting to external databases. Therefore, it's recommended to write a :"
"ref:`database router<topics-db-multi-db-routing>` that allows synchronizing "
"these three models to only one database. Use the same approach for contrib "
"and third-party apps that don't need their tables in multiple databases."
msgstr ""
"Untuk pengaturan umum dengan banyak basisdata, itu tidak berguna memiliki "
"obyek-obyek ini dalam lebih dari satu basisdata. Pengaturan umum menyertakan "
"utama/tiruan dan menghubungkan ke basisdata luar. Karena itu, itu dianjurkan "
"untuk menulis :ref:`database router1` yang mengizinkan mensinkronkan ketiga "
"model ini pada hanya satu basisdata. Gunakan pendekatan sama untuk aplikasi "
"bantuan dan pihak-ketiga yang tidak butuh tabel mereka dalam banyak "
"basisdata."

msgid ""
"If you're synchronizing content types to more than one database, be aware "
"that their primary keys may not match across databases. This may result in "
"data corruption or data loss."
msgstr ""
"Jika anda sedang mensinkronkan jenis-jenis isi ke lebih dari satu basisdata, "
"waspada bahwa primary key mereka mungkin tidak cocok terhadap basisdata. Ini "
"mungkin menghasilkan kerusakan data atau kehilangan data."

msgid "Database access optimization"
msgstr "Optimisasi akses basisdata"

msgid ""
"Django's database layer provides various ways to help developers get the "
"most out of their databases. This document gathers together links to the "
"relevant documentation, and adds various tips, organized under a number of "
"headings that outline the steps to take when attempting to optimize your "
"database usage."
msgstr ""
"Lapisan basisdata Django menyediakan beragam cara membantu pengembang "
"mendapatkan sebagian dari basisdata mereka. DOkumen ini mengumpulkan bersama-"
"sama tautan ke dokumentasi bersangkutan, dan menambah beraagam tip, "
"mengorganisasikan dibawah sejumlah dari kepala yang meringkaskan langkah-"
"langkah diambil ketika berusaha mengoptimalkan penggunaan basisdata anda."

msgid "Profile first"
msgstr "Profil dahulu"

msgid ""
"As general programming practice, this goes without saying. Find out :ref:"
"`what queries you are doing and what they are costing you <faq-see-raw-sql-"
"queries>`. Use :meth:`.QuerySet.explain` to understand how specific "
"``QuerySet``\\s are executed by your database. You may also want to use an "
"external project like django-debug-toolbar_, or a tool that monitors your "
"database directly."
msgstr ""

msgid ""
"Remember that you may be optimizing for speed or memory or both, depending "
"on your requirements. Sometimes optimizing for one will be detrimental to "
"the other, but sometimes they will help each other. Also, work that is done "
"by the database process might not have the same cost (to you) as the same "
"amount of work done in your Python process. It is up to you to decide what "
"your priorities are, where the balance must lie, and profile all of these as "
"required since this will depend on your application and server."
msgstr ""
"Ingat bahwa anda mungkin dioptimalkan untuk kecepatan atau memori atau "
"keduanya, tergantung pada persyaraan anda. Terkadang mengoptimalkan untuk "
"satu akan merugikan ke yang lain, tetapi terkadang mereka akan membantu satu "
"sama lain. Juga, pekerjaan itu selesai oleh pengolahan basisdata mungkin "
"tidak mempunyai biaya sama (kepada anda) seperti sama banyak dari pekerjaan "
"selesai dalam pengolahan Python anda. Itu terserah anda memutuskan apa "
"prioritas anda, dimana keseimbangan harus berbohong, dan profil semua dari "
"ini seperti diwajibkan sejak ini akan bergantung pada aplikasi anda dan "
"peladen."

msgid ""
"With everything that follows, remember to profile after every change to "
"ensure that the change is a benefit, and a big enough benefit given the "
"decrease in readability of your code. **All** of the suggestions below come "
"with the caveat that in your circumstances the general principle might not "
"apply, or might even be reversed."
msgstr ""
"Dengan apapun yang mengikuti, ingat untuk menggambarkan raut muka setelah "
"setiap perubahan untuk memastikan bahwa perubahan adalah menguntungkan, dan "
"keuntungan cukup besar diberikan menurunkan dalam kesiapan kode anda. "
"**Semua** dari saran-saran dibawah datang dengan surat keberatan yang dalam "
"keadaan anda prinsip umum mungkin tidak berlaku, atau mungkin bahkan "
"dibalikkan."

msgid "Use standard DB optimization techniques"
msgstr "Gunakan teknik-teknik optimalisasi DB standar"

msgid "...including:"
msgstr "...termasuk:"

msgid ""
"Indexes_. This is a number one priority, *after* you have determined from "
"profiling what indexes should be added. Use :attr:`Meta.indexes <django.db."
"models.Options.indexes>` or :attr:`Field.db_index <django.db.models.Field."
"db_index>` to add these from Django. Consider adding indexes to fields that "
"you frequently query using :meth:`~django.db.models.query.QuerySet."
"filter()`, :meth:`~django.db.models.query.QuerySet.exclude()`, :meth:"
"`~django.db.models.query.QuerySet.order_by()`, etc. as indexes may help to "
"speed up lookups. Note that determining the best indexes is a complex "
"database-dependent topic that will depend on your particular application. "
"The overhead of maintaining an index may outweigh any gains in query speed."
msgstr ""

msgid "Appropriate use of field types."
msgstr "Penggunaan sesuai dari jenis-jenis bidang"

msgid ""
"We will assume you have done the things listed above. The rest of this "
"document focuses on how to use Django in such a way that you are not doing "
"unnecessary work. This document also does not address other optimization "
"techniques that apply to all expensive operations, such as :doc:`general "
"purpose caching </topics/cache>`."
msgstr ""

msgid "Understand ``QuerySet``\\s"
msgstr "Memahami ``QuerySet``"

msgid ""
"Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting "
"good performance with simple code. In particular:"
msgstr ""
"Memahami :doc:`QuerySets </ref/models/querysets>` adalah vital untuk "
"mendapatkan penampilan baik dengan kode sederhana. Khususnya:"

msgid "Understand ``QuerySet`` evaluation"
msgstr "Memahami penilaian ``QuerySet``"

msgid "To avoid performance problems, it is important to understand:"
msgstr "Untuk menghindari masalah penampilan, sangatlah penting memahami:"

msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr "itu :ref:`QuerySets malas <querysets-are-lazy>`."

msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr "ketika :ref:`mereka dinilai <when-querysets-are-evaluated>`."

msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr "bagaimana :ref:`data ditahan dalam memori <caching-and-querysets>`."

msgid "Understand cached attributes"
msgstr "Memahami atribut tembolok"

msgid ""
"As well as caching of the whole ``QuerySet``, there is caching of the result "
"of attributes on ORM objects. In general, attributes that are not callable "
"will be cached. For example, assuming the :ref:`example blog models "
"<queryset-model-example>`::"
msgstr ""

msgid "But in general, callable attributes cause DB lookups every time::"
msgstr ""
"Tetapi secara umum, atribut callable menyebabkan pencarian DB setiap waktu::"

msgid ""
"Be careful when reading template code - the template system does not allow "
"use of parentheses, but will call callables automatically, hiding the above "
"distinction."
msgstr ""
"Hati-hati ketika membaca kode cetakan - sistem cetakan tidak mengizinkan "
"penggunaan tanda kurun, tetapi akan memanggil callable secara otomatis, "
"memnyembunyikan perbedaan diatas."

msgid ""
"Be careful with your own custom properties - it is up to you to implement "
"caching when required, for example using the :class:`~django.utils."
"functional.cached_property` decorator."
msgstr ""
"Berhati-hatilan dengan sifat penyesuaian anda sendiri - itu terserah anda "
"menerapkan cache ketika dibutuhkan, sebagai contoh menggunakan penghias :"
"class:`~django.utils.functional.cached_property`."

msgid "Use the ``with`` template tag"
msgstr "Gunakan etiket cetakan ``with`` "

msgid ""
"To make use of the caching behavior of ``QuerySet``, you may need to use "
"the :ttag:`with` template tag."
msgstr ""
"Untuk menggunakan perilaku cache dari ``QuerySet``, anda mungkin butuh "
"menggunakan etiket cetakan  :ttag:`with`."

msgid "Use ``iterator()``"
msgstr "Gunakan ``iterator()``"

msgid ""
"When you have a lot of objects, the caching behavior of the ``QuerySet`` can "
"cause a large amount of memory to be used. In this case, :meth:`~django.db."
"models.query.QuerySet.iterator()` may help."
msgstr ""
"Ketika anda mempunyai banyak obyek, perilaku cache dari ``QuerySet`` dapat "
"menyebabkan sejumlah besar memori digunakan. Dalam kasus ini, :meth:`~django."
"db.models.query.QuerySet.iterator()` mungkin membantu."

msgid "Use ``explain()``"
msgstr "Gunakan ``explain()``"

msgid ""
":meth:`.QuerySet.explain` gives you detailed information about how the "
"database executes a query, including indexes and joins that are used. These "
"details may help you find queries that could be rewritten more efficiently, "
"or identify indexes that could be added to improve performance."
msgstr ""

msgid "Do database work in the database rather than in Python"
msgstr "Lakukan pekerjaan basisdata di basisdata daripada di Python"

msgid "For instance:"
msgstr "Sebagai contoh:"

msgid ""
"At the most basic level, use :ref:`filter and exclude <queryset-api>` to do "
"filtering in the database."
msgstr ""
"Pada paling tingkat dasar, gunakan :ref:`filter and exclude <queryset-api>` "
"melakukan penyaringan di basisdata"

msgid ""
"Use :class:`F expressions <django.db.models.F>` to filter based on other "
"fields within the same model."
msgstr ""
"Gunakan :class:`F expressions <django.db.models.F>` untukmenyaring "
"berdasarkan pada bidang-bidang lain dalam model sama."

msgid ""
"Use :doc:`annotate to do aggregation in the database </topics/db/"
"aggregation>`."
msgstr ""
"Gunakan :doc:`annotate to do aggregation in the database </topics/db/"
"aggregation>`."

msgid "If these aren't enough to generate the SQL you need:"
msgstr "Jika ini tidak cukup membangkitkan SQL yang anda butuhkan:"

msgid "Use ``RawSQL``"
msgstr "Gunakan ``RawSQL``"

msgid ""
"A less portable but more powerful method is the :class:`~django.db.models."
"expressions.RawSQL` expression, which allows some SQL to be explicitly added "
"to the query. If that still isn't powerful enough:"
msgstr ""
"Sedikit ringan tetapi metode lebih kuat adalah pernyataan :class:`~django.db."
"models.expressions.RawSQL`, yangmengizinkan beberapa SQL secara jelas "
"ditambahkan ke permintaan. Jika itu masih tidak cukup kuat:"

msgid "Use raw SQL"
msgstr "Gunakan SQL mentah"

msgid ""
"Write your own :doc:`custom SQL to retrieve data or populate models </topics/"
"db/sql>`. Use ``django.db.connection.queries`` to find out what Django is "
"writing for you and start from there."
msgstr ""
"Tulis :doc:`custom SQL to retrieve data or populate models 1` anda sendiri. "
"Gunakan ``django.db.connection.queries`` untuk menemukan apa yang Django "
"sedang tulis untuk anda dan mulai dari sana."

msgid "Retrieve individual objects using a unique, indexed column"
msgstr "Mengambil obyek tersendiri menggukan sebuah unik, kolom indeks"

msgid ""
"There are two reasons to use a column with :attr:`~django.db.models.Field."
"unique` or :attr:`~django.db.models.Field.db_index` when using :meth:"
"`~django.db.models.query.QuerySet.get` to retrieve individual objects. "
"First, the query will be quicker because of the underlying database index. "
"Also, the query could run much slower if multiple objects match the lookup; "
"having a unique constraint on the column guarantees this will never happen."
msgstr ""
"Ada dua alasan untuk menggunakan kolom dengan :attr:`~django.db.models.Field."
"unique` atau :attr:`~django.db.models.Field.db_index` ketika menggunakan :"
"meth:`~django.db.models.query.QuerySet.get` untuk mengambil obyek "
"tersendiri. Pertama, permintaan akan lebih cepat karena indeks basisdata "
"pokok. Juga, permintaan dapat berjalan lebih lambat jika banyak obyek "
"mencocokan pencarian; memiliki batasan unik pada kolom menjamin ini tidak "
"pernah terjadi."

msgid "So using the :ref:`example blog models <queryset-model-example>`::"
msgstr ""

msgid "will be quicker than:"
msgstr "akan lebih cepat daripada:"

msgid ""
"because ``id`` is indexed by the database and is guaranteed to be unique."
msgstr "karena ``id`` diindeks oleh basisdata dan dijamin menjadi unik."

msgid "Doing the following is potentially quite slow:"
msgstr "Melakukan berikut berpotensi sangat lambat:"

msgid ""
"First of all, ``headline`` is not indexed, which will make the underlying "
"database fetch slower."
msgstr ""
"Pertama-tama, ``headline`` tidak diindeks, yang akan membuat pengambilan "
"pokok basisdata lebih lambat."

msgid ""
"Second, the lookup doesn't guarantee that only one object will be returned. "
"If the query matches more than one object, it will retrieve and transfer all "
"of them from the database. This penalty could be substantial if hundreds or "
"thousands of records are returned. The penalty will be compounded if the "
"database lives on a separate server, where network overhead and latency also "
"play a factor."
msgstr ""
"Kedua, pencarian tidak menjamin hanya satu obyek akan dikembalikan. Jika "
"permintaan cocok lebih dari satu obyek, itu akan mengambil dan memindahkan "
"semua dari mereka dari basisdata. Hukuman ini dapat besar jika ratusan atau "
"ribuan dari rekaman dikembalikan. Hukuman akan digabungkan jika basisdata "
"berada pada peladen berbeda, dimana overhead jaringan dan latensi memainkan "
"faktor."

msgid "Retrieve everything at once if you know you will need it"
msgstr ""
"Mengambil semuanya sekaligus jika anda mengetahui anda akan membutuhkannya"

msgid ""
"Hitting the database multiple times for different parts of a single 'set' of "
"data that you will need all parts of is, in general, less efficient than "
"retrieving it all in one query. This is particularly important if you have a "
"query that is executed in a loop, and could therefore end up doing many "
"database queries, when only one was needed. So:"
msgstr ""
"Mengenai basisdata beberapa kali untuk bagian-bagian berbeda dari 'set' "
"tunggal data yang anda akan butuh semua bagian, secara umum, kurang efisien "
"dari mengambil itu semua dalam satu permintaan. Ini khususnya penting jika "
"anda mempunyai sebuah permintaan yang dijalankan dalam putaran, dan dapat "
"karena itu berakhir melakukan banyak permintaan basisdata, ketika hanya satu "
"dibutuhkan. Jadi:"

msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr "Gunakan ``QuerySet.select_related()`` dan ``prefetch_related()``"

msgid ""
"Understand :meth:`~django.db.models.query.QuerySet.select_related` and :meth:"
"`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and use them:"
msgstr ""
"Memahami :meth:`~django.db.models.query.QuerySet.select_related` dan :meth:"
"`~django.db.models.query.QuerySet.prefetch_related` sepenuhnya, dan "
"menggunakan mereka:"

msgid ""
"in :doc:`managers and default managers </topics/db/managers>` where "
"appropriate. Be aware when your manager is and is not used; sometimes this "
"is tricky so don't make assumptions."
msgstr ""
"dalam :doc:`managers and default managers 1` dimana sesuai. Waspada ketika "
"pengelola anda sedang dan tidak digunakan; terkadang ini rumit jadi jangan "
"membuat prasangka."

msgid ""
"in view code or other layers, possibly making use of :func:`~django.db."
"models.prefetch_related_objects` where needed."
msgstr ""
"dalam melihat kode atau lapisan-lapisan lain, kemungkinan membuat menggunaan "
"dari :func:`~django.db.models.prefetch_related_objects` ketika dibutuhkan."

msgid "Don't retrieve things you don't need"
msgstr "Jangan mengambil hal yang tidak anda butuhkan"

msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr "Gunakan ``QuerySet.values()`` dan ``values_list()``"

msgid ""
"When you only want a ``dict`` or ``list`` of values, and don't need ORM "
"model objects, make appropriate usage of :meth:`~django.db.models.query."
"QuerySet.values()`. These can be useful for replacing model objects in "
"template code - as long as the dicts you supply have the same attributes as "
"those used in the template, you are fine."
msgstr ""

msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr "Gunakan ``QuerySet.defer()`` dan ``only()``"

msgid ""
"Use :meth:`~django.db.models.query.QuerySet.defer()` and :meth:`~django.db."
"models.query.QuerySet.only()` if there are database columns you know that "
"you won't need (or won't need in most cases) to avoid loading them. Note "
"that if you *do* use them, the ORM will have to go and get them in a "
"separate query, making this a pessimization if you use it inappropriately."
msgstr ""
"Gunakan :meth:`~django.db.models.query.QuerySet.defer()` dan :meth:`~django."
"db.models.query.QuerySet.only()` jika ada kolom basisdata anda ketahui bahwa "
"anda tidak butuh (atau tidak butuh dalam kebanyakan kasus) untuk menghindari "
"memuatkan mereka. Catat bahwa jika anda *melakukan* menggunakan mereka, ORM "
"akan harus pergi dan mendapatkan mereka dalam permintaan terpisah, membuat "
"ini pesimis jika anda menggunakan itu secara tidak benar."

msgid ""
"Don't be too aggressive in deferring fields without profiling as the "
"database has to read most of the non-text, non-VARCHAR data from the disk "
"for a single row in the results, even if it ends up only using a few "
"columns. The ``defer()`` and ``only()`` methods are most useful when you can "
"avoid loading a lot of text data or for fields that might take a lot of "
"processing to convert back to Python. As always, profile first, then "
"optimize."
msgstr ""

msgid "Use ``QuerySet.contains(obj)``"
msgstr ""

msgid ""
"...if you only want to find out if ``obj`` is in the queryset, rather than "
"``if obj in queryset``."
msgstr ""

msgid "Use ``QuerySet.count()``"
msgstr "Gunakan ``QuerySet.count()``"

msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr ""
"..jika anda hanya ingin menghitung, daripada melakukan ``len(queryset)``."

msgid "Use ``QuerySet.exists()``"
msgstr "Gunakan ``QuerySet.exists()``"

msgid ""
"...if you only want to find out if at least one result exists, rather than "
"``if queryset``."
msgstr ""
"...jika anda hanya ingin menemukan jika setidaknya satu hasil ada, daripada "
"``if queryset``."

msgid "But:"
msgstr "Tetapi:"

msgid "Don't overuse ``count()`` and ``exists()``"
msgstr "Jangan berlebihan ``count()`` dan ``exists()``"

msgid ""
"If you are going to need other data from the QuerySet, evaluate it "
"immediately."
msgstr "Jika anda butuh data lain dari QuerySet, nilai itu segera."

msgid ""
"For example, assuming a ``Group`` model that has a many-to-many relation to "
"``User``, the following code is optimal::"
msgstr ""

msgid "It is optimal because:"
msgstr "DIa optimal karena:"

msgid ""
"Since QuerySets are lazy, this does no database queries if "
"``display_group_members`` is ``False``."
msgstr ""

msgid ""
"Storing ``group.members.all()`` in the ``members`` variable allows its "
"result cache to be re-used."
msgstr ""

msgid ""
"The line ``if members:`` causes ``QuerySet.__bool__()`` to be called, which "
"causes the ``group.members.all()`` query to be run on the database. If there "
"aren't any results, it will return ``False``, otherwise ``True``."
msgstr ""

msgid ""
"The line ``if current_user in members:`` checks if the user is in the result "
"cache, so no additional database queries are issued."
msgstr ""

msgid ""
"The use of ``len(members)`` calls ``QuerySet.__len__()``, reusing the result "
"cache, so again, no database queries are issued."
msgstr ""

msgid "The ``for member`` loop iterates over the result cache."
msgstr ""

msgid ""
"In total, this code does either one or zero database queries. The only "
"deliberate optimization performed is using the ``members`` variable. Using "
"``QuerySet.exists()`` for the ``if``, ``QuerySet.contains()`` for the "
"``in``, or ``QuerySet.count()`` for the count would each cause additional "
"queries."
msgstr ""

msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr "Gunakan ``QuerySet.update()`` dan ``delete()``"

msgid ""
"Rather than retrieve a load of objects, set some values, and save them "
"individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() "
"<topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-"
"queries-delete>` where possible."
msgstr ""
"Daripada mengambil memuat obyek, setel beberapa nilai, dan simpan mereka "
"masing-masing, gunakan pernyataan SQL UPDATE dalam jumlah besar, melalui :"
"ref:`QuerySet.update() 1`. Demikian pula, lakukan :ref:`bulk deletes 2` "
"dimana memungkinkan."

msgid ""
"Note, however, that these bulk update methods cannot call the ``save()`` or "
"``delete()`` methods of individual instances, which means that any custom "
"behavior you have added for these methods will not be executed, including "
"anything driven from the normal database object :doc:`signals </ref/"
"signals>`."
msgstr ""
"Catat, bagaimanapun, metode pembaharuan jumlah besar ini tidak dapat "
"memanggil metode ``save()`` atau ``delete()`` dari masing-masing instance, "
"yang berarti bahwa perilaku penyesuaian apapun anda telah tambahkan untuk "
"metode-metode ini tidak akan dijalankan, termasuk apapun didorong dari obyek "
"basisdata biasa :doc:`signals 1`."

msgid "Use foreign key values directly"
msgstr "Menggunakan nilai foreign key secara langsung"

msgid ""
"If you only need a foreign key value, use the foreign key value that is "
"already on the object you've got, rather than getting the whole related "
"object and taking its primary key. i.e. do::"
msgstr ""
"Jika anda hanya butuh nilai foreign key, gunakan nilai foreign key yang "
"sudah pada obyek anda telah dapatkan, daripada mendapatkan keseluruhan obyek "
"terkait dan mengambil primary key nya, yaitu. lakukan::"

msgid "instead of::"
msgstr "dari pada::"

msgid "Don't order results if you don't care"
msgstr "Jangan urutkan hasil jika anda tidak peduli"

msgid ""
"Ordering is not free; each field to order by is an operation the database "
"must perform. If a model has a default ordering (:attr:`Meta.ordering "
"<django.db.models.Options.ordering>`) and you don't need it, remove it on a "
"``QuerySet`` by calling :meth:`~django.db.models.query.QuerySet.order_by()` "
"with no parameters."
msgstr ""
"Pengurutan tidak bebas; setiap bidang yang diurutkan adalah sebuah operai "
"basisdata harus dilakukan. Jika sebuah model awal mengurutkan (:attr:`Meta."
"ordering <django.db.models.Options.ordering>`) dan anda tidak "
"membutuhkannya, pindahkan dia pada ``QuerySet`` dengan memanggil :meth:"
"`~django.db.models.query.QuerySet.order_by()` dengan tidak ada parameter."

msgid ""
"Adding an index to your database may help to improve ordering performance."
msgstr ""
"Menambahkan indeks ke basisdata anda mungkin membantu meningkatkan "
"penampilan pengurutan."

msgid "Use bulk methods"
msgstr ""

msgid "Use bulk methods to reduce the number of SQL statements."
msgstr ""

msgid "Create in bulk"
msgstr ""

msgid ""
"When creating objects, where possible, use the :meth:`~django.db.models."
"query.QuerySet.bulk_create()` method to reduce the number of SQL queries. "
"For example::"
msgstr ""
"Ketika membuat obyek-obyek, dimana memungkinkan, gunakan metode :meth:"
"`~django.db.models.query.QuerySet.bulk_create()` untuk mengurangi sejumlah "
"permintaan SQL. Sebagai contoh::"

msgid "...is preferable to::"
msgstr "...adalah lebih baik untuk::"

msgid ""
"Note that there are a number of :meth:`caveats to this method <django.db."
"models.query.QuerySet.bulk_create>`, so make sure it's appropriate for your "
"use case."
msgstr ""
"Catat bahwa ada angka dari :meth:`caveats to this method <django.db.models."
"query.QuerySet.bulk_create>`, jadi pastikan dia sesuai untuk kasus digunakan "
"anda."

msgid "Update in bulk"
msgstr ""

msgid ""
"When updating objects, where possible, use the :meth:`~django.db.models."
"query.QuerySet.bulk_update()` method to reduce the number of SQL queries. "
"Given a list or queryset of objects::"
msgstr ""

msgid "The following example::"
msgstr "Contoh berikut:"

msgid ""
"Note that there are a number of :meth:`caveats to this method <django.db."
"models.query.QuerySet.bulk_update>`, so make sure it's appropriate for your "
"use case."
msgstr ""

msgid "Insert in bulk"
msgstr "Masuk dalam bulk"

msgid ""
"When inserting objects into :class:`ManyToManyFields <django.db.models."
"ManyToManyField>`, use :meth:`~django.db.models.fields.related."
"RelatedManager.add` with multiple objects to reduce the number of SQL "
"queries. For example::"
msgstr ""

msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr "...dimana ``Bands`` dan ``Artists`` mempunyai hubungan many-to-many."

msgid ""
"When inserting different pairs of objects into :class:`~django.db.models."
"ManyToManyField` or when the custom :attr:`~django.db.models.ManyToManyField."
"through` table is defined, use :meth:`~django.db.models.query.QuerySet."
"bulk_create()` method to reduce the number of SQL queries. For example::"
msgstr ""

msgid ""
"...where ``Pizza`` and ``Topping`` have a many-to-many relationship. Note "
"that there are a number of :meth:`caveats to this method <django.db.models."
"query.QuerySet.bulk_create>`, so make sure it's appropriate for your use "
"case."
msgstr ""

msgid "Remove in bulk"
msgstr ""

msgid ""
"When removing objects from :class:`ManyToManyFields <django.db.models."
"ManyToManyField>`, use :meth:`~django.db.models.fields.related."
"RelatedManager.remove` with multiple objects to reduce the number of SQL "
"queries. For example::"
msgstr ""

msgid ""
"When removing different pairs of objects from :class:`ManyToManyFields "
"<django.db.models.ManyToManyField>`, use :meth:`~django.db.models.query."
"QuerySet.delete` on a :class:`~django.db.models.Q` expression with multiple :"
"attr:`~django.db.models.ManyToManyField.through`  model instances to reduce "
"the number of SQL queries. For example::"
msgstr ""

msgid "...where ``Pizza`` and ``Topping`` have a many-to-many relationship."
msgstr ""

msgid "Making queries"
msgstr "Membuat query"

msgid ""
"Once you've created your :doc:`data models </topics/db/models>`, Django "
"automatically gives you a database-abstraction API that lets you create, "
"retrieve, update and delete objects. This document explains how to use this "
"API. Refer to the :doc:`data model reference </ref/models/index>` for full "
"details of all the various model lookup options."
msgstr ""
"Sekali anda telah membuat :doc:`data models 1` anda, Django otomatis "
"memberikan anda pemisahan API yang membuat anda membuat, mengambil, "
"memperbaharui dan menghapus obyek. Dokumen ini menjelaskan bagaimana "
"menggunakan API ini. mengacu pada :doc:`data model reference 2` untuk "
"rincian penuh dari beragam pilihan pencarian model."

msgid ""
"Throughout this guide (and in the reference), we'll refer to the following "
"models, which comprise a blog application:"
msgstr ""

msgid "Creating objects"
msgstr "Membuat obyek"

msgid ""
"To represent database-table data in Python objects, Django uses an intuitive "
"system: A model class represents a database table, and an instance of that "
"class represents a particular record in the database table."
msgstr ""
"Untuk mewakili data tabel-basisdata dalam obyek Python, Django menggunakan "
"sistem intuitif: Sebuah kelas model mewakili sebuah tabel basisdata, dan "
"sebuah instance dari kelas itu mewakili rekaman tertentu dalam tabel "
"basisdata."

msgid ""
"To create an object, instantiate it using keyword arguments to the model "
"class, then call :meth:`~django.db.models.Model.save` to save it to the "
"database."
msgstr ""
"Untuk membuat sebuah obyek, instansiasi itu menggunakan argumen katakunci "
"pada kelas model, kemudian memanggil :meth:`~django.db.models.Model.save` "
"untuk menyimpan itu ke basisdata."

msgid ""
"Assuming models live in a file ``mysite/blog/models.py``, here's an example::"
msgstr ""
"Menganggap model tinggal di berkas ``mysite/blog/models.py``, ini adalah "
"sebuah contoh::"

msgid ""
"This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""
"Ini melakukan pernyataan SQL ``INSERT`` dibelakang layar. Django tidak "
"mengenai basisdata sampai anda secara jelas memanggil :meth:`~django.db."
"models.Model.save`."

msgid "The :meth:`~django.db.models.Model.save` method has no return value."
msgstr ""
"Cara :meth:`~django.db.models.Model.save` tidak mempunyai nilai kembalian."

msgid ""
":meth:`~django.db.models.Model.save` takes a number of advanced options not "
"described here. See the documentation for :meth:`~django.db.models.Model."
"save` for complete details."
msgstr ""
":meth:`~django.db.models.Model.save` mengambil sejumalh pilihan keuntungan "
"tidak digambarkan disini. Lihat dokumentasi untuk :meth:`~django.db.models."
"Model.save` untuk rincian lengkap."

msgid ""
"To create and save an object in a single step, use the :meth:`~django.db."
"models.query.QuerySet.create()` method."
msgstr ""
"Untuk membuat dan menyimpan sebuah obyek dalam langkah tunggal, gunakan "
"cara :meth:`~django.db.models.query.QuerySet.create()`."

msgid "Saving changes to objects"
msgstr "Menyimpan perubahan ke obyek"

msgid ""
"To save changes to an object that's already in the database, use :meth:"
"`~django.db.models.Model.save`."
msgstr ""
"Untuk menyimpan perubahan ke sebuah obyek yang sudah ada di basisdata "
"gunakan :meth:`~django.db.models.Model.save`."

msgid ""
"Given a ``Blog`` instance ``b5`` that has already been saved to the "
"database, this example changes its name and updates its record in the "
"database::"
msgstr ""
"Diberikan instance ``Blog`` ``b5`` yang telah disimpan ke basisdata, contoh "
"ini merubah namanya dan memperbaharui rekamannya dalam basisdata::"

msgid ""
"This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""
"Ini melakukan pernyataan SQL ``UPDATE`` dibelakang layar. Django tidak "
"mengenai basisdata sampai anda secara jelas memanggil :meth:`~django.db."
"models.Model.save`."

msgid "Saving ``ForeignKey`` and ``ManyToManyField`` fields"
msgstr "Menyimpan bidang ``ForeignKey`` dan ``ManyToManyField``"

msgid ""
"Updating a :class:`~django.db.models.ForeignKey` field works exactly the "
"same way as saving a normal field -- assign an object of the right type to "
"the field in question. This example updates the ``blog`` attribute of an "
"``Entry`` instance ``entry``, assuming appropriate instances of ``Entry`` "
"and ``Blog`` are already saved to the database (so we can retrieve them "
"below)::"
msgstr ""

msgid ""
"Updating a :class:`~django.db.models.ManyToManyField` works a little "
"differently -- use the :meth:`~django.db.models.fields.related."
"RelatedManager.add` method on the field to add a record to the relation. "
"This example adds the ``Author`` instance ``joe`` to the ``entry`` object::"
msgstr ""
"Memperbaharui sebuah :class:`~django.db.models.ManyToManyField` bekerja "
"sedikit berbeda -- gunakan metode :meth:`~django.db.models.fields.related."
"RelatedManager.add` pada bidang untuk menambahkan rekaman ke hubungan. "
"Contoh ini menambahkan instance ``Author`` ``joe`` ke obyek ``entry``::"

msgid ""
"To add multiple records to a :class:`~django.db.models.ManyToManyField` in "
"one go, include multiple arguments in the call to :meth:`~django.db.models."
"fields.related.RelatedManager.add`, like this::"
msgstr ""
"Untuk menambahkan banyak rekaman pada :class:`~django.db.models."
"ManyToManyField` dalam sekali pergi, sertakan banyak argumen dalam panggilan "
"pada :meth:`~django.db.models.fields.related.RelatedManager.add`, seperti "
"ini::"

msgid ""
"Django will complain if you try to assign or add an object of the wrong type."
msgstr ""
"Django akan mengeluh jika anda mencoba memberikan atau menambahkan sebuah "
"obyek dari jenis salah."

msgid "Retrieving objects"
msgstr "Mengambil obyek"

msgid ""
"To retrieve objects from your database, construct a :class:`~django.db."
"models.query.QuerySet` via a :class:`~django.db.models.Manager` on your "
"model class."
msgstr ""
"Untuk mengambil obyek-obyek dari basisdata anda, bangun sebuah :class:"
"`~django.db.models.query.QuerySet` melalui :class:`~django.db.models."
"Manager` pada kelas model anda."

msgid ""
"A :class:`~django.db.models.query.QuerySet` represents a collection of "
"objects from your database. It can have zero, one or many *filters*. Filters "
"narrow down the query results based on the given parameters. In SQL terms, "
"a :class:`~django.db.models.query.QuerySet` equates to a ``SELECT`` "
"statement, and a filter is a limiting clause such as ``WHERE`` or ``LIMIT``."
msgstr ""
"Sebuah :class:`~django.db.models.query.QuerySet` mewakili sebuah kumpulan "
"dari ibyek-obyek dari basisdata anda. itu dapat memiliki nol, satu atau "
"banyak *penyaring*. Penyaring mempersempit hasil permintaan berdasarkan pada "
"parameter yang diberikan. Dalam istilah SQL, :class:`~django.db.models.query."
"QuerySet` menyamakan pada pernyataan ``SELECT``, dan penyaring membatasi "
"klausa seperti ``WHERE`` atau ``LIMIT``."

msgid ""
"You get a :class:`~django.db.models.query.QuerySet` by using your model's :"
"class:`~django.db.models.Manager`. Each model has at least one :class:"
"`~django.db.models.Manager`, and it's called :attr:`~django.db.models.Model."
"objects` by default. Access it directly via the model class, like so::"
msgstr ""
"Anda mendapatkan :class:`~django.db.models.query.QuerySet` dengan "
"menggunakan :class:`~django.db.models.Manager` model anda. Setiap model "
"mempunyai setidaknya satu :class:`~django.db.models.Manager`, dan itu "
"memanggil :attr:`~django.db.models.Model.objects` secara awalan. Akses itu "
"langsung melalui kelas model, seperti itu::"

msgid ""
"``Managers`` are accessible only via model classes, rather than from model "
"instances, to enforce a separation between \"table-level\" operations and "
"\"record-level\" operations."
msgstr ""
"``Managers`` dapat diakses hanya melalui kelas-kelas model, daripada dari "
"instance model, untuk melaksanakan pemisahan diantara tindakan \"tingkat-"
"tabel\" dan tindakan \"tingkat-rekam\"."

msgid ""
"The :class:`~django.db.models.Manager` is the main source of ``QuerySets`` "
"for a model. For example, ``Blog.objects.all()`` returns a :class:`~django."
"db.models.query.QuerySet` that contains all ``Blog`` objects in the database."
msgstr ""
":class:`~django.db.models.Manager` adalah sumber utama dari ``QuerySets`` "
"untuk sebuah model. Sebagai contoh, ``Blog.objects.all()`` mengembalikan :"
"class:`~django.db.models.query.QuerySet` yang mengandung semua obyek "
"``Blog`` dalam basisdata."

msgid "Retrieving all objects"
msgstr "Mengambil semua obyek"

msgid ""
"The simplest way to retrieve objects from a table is to get all of them. To "
"do this, use the :meth:`~django.db.models.query.QuerySet.all` method on a :"
"class:`~django.db.models.Manager`::"
msgstr ""
"Cara termudah untuk mengambil obyek dari sebuah tabel adalah mendapatkan "
"semua dari mereka. Untuk melakukan ini, gunakan metode :meth:`~django.db."
"models.query.QuerySet.all` pada sebuah :class:`~django.db.models.Manager`::"

msgid ""
"The :meth:`~django.db.models.query.QuerySet.all` method returns a :class:"
"`~django.db.models.query.QuerySet` of all the objects in the database."
msgstr ""
"Metode :meth:`~django.db.models.query.QuerySet.all` mengembalikan semua :"
"class:`~django.db.models.query.QuerySet` dari semua obyek dalam basisdata."

msgid "Retrieving specific objects with filters"
msgstr "Mengambil obyek spesifik dengan menyaring"

msgid ""
"The :class:`~django.db.models.query.QuerySet` returned by :meth:`~django.db."
"models.query.QuerySet.all` describes all objects in the database table. "
"Usually, though, you'll need to select only a subset of the complete set of "
"objects."
msgstr ""
":class:`~django.db.models.query.QuerySet` dibalikkan oleh :meth:`~django.db."
"models.query.QuerySet.all` menggambarkan semua obyek-obyek dalam tabel "
"basisdata. Biasanya, meskipun, anda akan butuh memilih hanya sub kumpulan "
"dari kumpulan lengkap dari obyek."

msgid ""
"To create such a subset, you refine the initial :class:`~django.db.models."
"query.QuerySet`, adding filter conditions. The two most common ways to "
"refine a :class:`~django.db.models.query.QuerySet` are:"
msgstr ""
"Untuk membuat semacam sub kumpulan, anda menyaring  :class:`~django.db."
"models.query.QuerySet` awalan, menambahkan kondisi penyaringan. Dua cara "
"paling umum untuk menyaring :class:`~django.db.models.query.QuerySet` adalah:"

msgid "``filter(**kwargs)``"
msgstr "``filter(**kwargs)``"

msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that match the given lookup parameters."
msgstr ""
"Mengembalikan :class:`~django.db.models.query.QuerySet` baru mengandung "
"obyek-obyek yang cocok dari parameter pencarian yang diberikan."

msgid "``exclude(**kwargs)``"
msgstr "``exclude(**kwargs)``"

msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that do *not* match the given lookup parameters."
msgstr ""
"Mengembalikan :class:`~django.db.models.query.QuerySet` baru mengandung "
"obyek-obyek yang *tidak* cocok dari parameter pencarian yang diberikan."

msgid ""
"The lookup parameters (``**kwargs`` in the above function definitions) "
"should be in the format described in `Field lookups`_ below."
msgstr ""
"Parameter pencarian (``**kwargs`` dalam penertian fungsi diatas) harus "
"berupa dalam bentuk digambarkan dalam `Field lookups`_ dibawah."

msgid ""
"For example, to get a :class:`~django.db.models.query.QuerySet` of blog "
"entries from the year 2006, use :meth:`~django.db.models.query.QuerySet."
"filter` like so::"
msgstr ""
"Sebagai contoh, untuk mendapatkan :class:`~django.db.models.query."
"QuerySet` dari masukan blog dari tahun 2006, gunakan :meth:`~django.db."
"models.query.QuerySet.filter` seperti itu::"

msgid "With the default manager class, it is the same as::"
msgstr "Dengan kelas pengelola awalan, itu adalah sama seperti::"

msgid "Chaining filters"
msgstr "Menambatkan penyaringan"

msgid ""
"The result of refining a :class:`~django.db.models.query.QuerySet` is itself "
"a :class:`~django.db.models.query.QuerySet`, so it's possible to chain "
"refinements together. For example::"
msgstr ""
"Hasil dari pengilangan :class:`~django.db.models.query.QuerySet` adalah itu "
"sendiri :class:`~django.db.models.query.QuerySet`, jadi itu mungkin "
"menambatkan pengilangan bersama-sama. Sebagai contoh::"

msgid ""
"This takes the initial :class:`~django.db.models.query.QuerySet` of all "
"entries in the database, adds a filter, then an exclusion, then another "
"filter. The final result is a :class:`~django.db.models.query.QuerySet` "
"containing all entries with a headline that starts with \"What\", that were "
"published between January 30, 2005, and the current day."
msgstr ""
"Ini mengambil awal :class:`~django.db.models.query.QuerySet` dari semua "
"masukan dalam basisdata, tambah sebuah penyaring, kemudian sebuah "
"pengecualian, kemudian penyaring lain. Hasil akhir adalah sebuah :class:"
"`~django.db.models.query.QuerySet` mengandung semua masukan dengan judul "
"yang mulai dengan \"What\", yang diterbitkan diantara 30 Januari 2005, dan "
"hari saat ini."

msgid "Filtered ``QuerySet``\\s are unique"
msgstr "Disaring ``QuerySet`` adalah unik"

msgid ""
"Each time you refine a :class:`~django.db.models.query.QuerySet`, you get a "
"brand-new :class:`~django.db.models.query.QuerySet` that is in no way bound "
"to the previous :class:`~django.db.models.query.QuerySet`. Each refinement "
"creates a separate and distinct :class:`~django.db.models.query.QuerySet` "
"that can be stored, used and reused."
msgstr ""
"Setiap kali anda menyaring sebuah :class:`~django.db.models.query.QuerySet`, "
"anda mendapatkan :class:`~django.db.models.query.QuerySet` merek-baru yaitu "
"tidak ada cara mengikat ke :class:`~django.db.models.query.QuerySet` "
"sebelumnya. Setiap penyaringan membuat :class:`~django.db.models.query."
"QuerySet` terpisah dan berbeda yang dapat disimpan, digunakan dan digunakan "
"kembali."

msgid ""
"These three ``QuerySets`` are separate. The first is a base :class:`~django."
"db.models.query.QuerySet` containing all entries that contain a headline "
"starting with \"What\". The second is a subset of the first, with an "
"additional criteria that excludes records whose ``pub_date`` is today or in "
"the future. The third is a subset of the first, with an additional criteria "
"that selects only the records whose ``pub_date`` is today or in the future. "
"The initial :class:`~django.db.models.query.QuerySet` (``q1``) is unaffected "
"by the refinement process."
msgstr ""
"Ketiga ``QuerySets`` ini terpisah. Pertama adalah dasar :class:`~django.db."
"models.query.QuerySet` mengandung semua masukan yang mengandung judul "
"dimulai dengan \"What\". kedua adalah sub kumpulan dari pertama, dengan "
"sebuah tambahan kriteria yang tidak menyertakan rekaman yang ``pub_date`` "
"adalah hari ini atau di masa depan. Ketiga adalah sub kumpulan dari pertama, "
"dengan tambahan kriteria yang hanya memilih rekaman yang ``pub_date`` adalah "
"hari ini atau di masa depan. Awalan :class:`~django.db.models.query."
"QuerySet` (``q1``) tidak terpengaruh dengan pengolahan penyaringan."

msgid "``QuerySet``\\s are lazy"
msgstr "``QuerySet`` adalah lazy"

msgid ""
"``QuerySets`` are lazy -- the act of creating a :class:`~django.db.models."
"query.QuerySet` doesn't involve any database activity. You can stack filters "
"together all day long, and Django won't actually run the query until the :"
"class:`~django.db.models.query.QuerySet` is *evaluated*. Take a look at this "
"example::"
msgstr ""
"``QuerySets`` adalah lazy -- tindakan dari membuat :class:`~django.db.models."
"query.QuerySet` tidak melibatkan aktifitas basisdata apapun. Anda dapat "
"menumpuk penyaring bersama-sama sepanjang hari, dan Django tidak sebenarnya "
"menjalankan permintaan sampai :class:`~django.db.models.query."
"QuerySet` *dinilai*. Coba lihat contoh ini::"

msgid ""
"Though this looks like three database hits, in fact it hits the database "
"only once, at the last line (``print(q)``). In general, the results of a :"
"class:`~django.db.models.query.QuerySet` aren't fetched from the database "
"until you \"ask\" for them. When you do, the :class:`~django.db.models.query."
"QuerySet` is *evaluated* by accessing the database. For more details on "
"exactly when evaluation takes place, see :ref:`when-querysets-are-evaluated`."
msgstr ""
"Meskipun ini terlihat mengenai basisdata tiga kali, sebenarnya itu mengenai "
"basisdata hanya sekali, pada baris terakhir (``print(q)``). Secara umum, "
"hasil dari :class:`~django.db.models.query.QuerySet` tidak diambil dari "
"basisdata sampai anda \"meminta\" untuk mereka. Ketika anda melakukan, :"
"class:`~django.db.models.query.QuerySet` *dinilai* dengan mengakses "
"basisdata. Untuk rincian lebih pada sebenarnya ketika penilaian mengambil "
"tempat, lihat :ref:`when-querysets-are-evaluated`."

msgid "Retrieving a single object with ``get()``"
msgstr "Mengambil obyek tunggal dengan ``get()``"

msgid ""
":meth:`~django.db.models.query.QuerySet.filter` will always give you a :"
"class:`~django.db.models.query.QuerySet`, even if only a single object "
"matches the query - in this case, it will be a :class:`~django.db.models."
"query.QuerySet` containing a single element."
msgstr ""
":meth:`~django.db.models.query.QuerySet.filter` akan selalu memberikan anda :"
"class:`~django.db.models.query.QuerySet`, bahkan jika hanya obyek tunggal "
"yang cocok permintaan - dalam kasus ini, itu akan berupa :class:`~django.db."
"models.query.QuerySet` mengandung unsur tunggal."

msgid ""
"If you know there is only one object that matches your query, you can use "
"the :meth:`~django.db.models.query.QuerySet.get` method on a :class:`~django."
"db.models.Manager` which returns the object directly::"
msgstr ""
"Jika anda mengetahui hanya ada satu obyek yang cocok permintaan anda, anda "
"dapat menggunakan metode meth:`~django.db.models.query.QuerySet.get` pada "
"sebuah :class:`~django.db.models.Manager` yang mengembalikan obyek secara "
"langsung::"

msgid ""
"You can use any query expression with :meth:`~django.db.models.query."
"QuerySet.get`, just like with :meth:`~django.db.models.query.QuerySet."
"filter` - again, see `Field lookups`_ below."
msgstr ""
"Anda dapat menggunakan pernyataan permintaan apapun dengan :meth:`~django.db."
"models.query.QuerySet.get`, seperti dengan :meth:`~django.db.models.query."
"QuerySet.filter` - kembali, lihat `Field lookups`_ dibawah."

msgid ""
"Note that there is a difference between using :meth:`~django.db.models.query."
"QuerySet.get`, and using :meth:`~django.db.models.query.QuerySet.filter` "
"with a slice of ``[0]``. If there are no results that match the query, :meth:"
"`~django.db.models.query.QuerySet.get` will raise a ``DoesNotExist`` "
"exception. This exception is an attribute of the model class that the query "
"is being performed on - so in the code above, if there is no ``Entry`` "
"object with a primary key of 1, Django will raise ``Entry.DoesNotExist``."
msgstr ""
"Catat bahwa ada perbedaan diantara menggunakan :meth:`~django.db.models."
"query.QuerySet.get`, dan menggunakan :meth:`~django.db.models.query.QuerySet."
"filter` dengan potongan ``[0]``. Jika tidak ada hasil yang cocok dengan "
"permintaan, :meth:`~django.db.models.query.QuerySet.get` akan memunculkan "
"pengecualian ``DoesNotExist``. Pengecualian ini adalah sebuah atribut dari "
"kelas model yang permintaan sedang dilakukan - jadi dalam kode diatas, jika "
"tidak ada obyek ``Entry`` dengan primary key dari 1, Django akan memunculkan "
"``Entry.DoesNotExist``."

msgid ""
"Similarly, Django will complain if more than one item matches the :meth:"
"`~django.db.models.query.QuerySet.get` query. In this case, it will raise :"
"exc:`~django.core.exceptions.MultipleObjectsReturned`, which again is an "
"attribute of the model class itself."
msgstr ""
"Demikain pula, Django akan mengeluh jika lebih dari satu barang cocok "
"permintaan :meth:`~django.db.models.query.QuerySet.get`. Dalam kasus ini, "
"itu akan memunculkan :exc:`~django.core.exceptions."
"MultipleObjectsReturned`, yang kembali adalah sebuah atribut dari kelas "
"model itu sendiri."

msgid "Other ``QuerySet`` methods"
msgstr "Cara ``QuerySet`` lain"

msgid ""
"Most of the time you'll use :meth:`~django.db.models.query.QuerySet.all`, :"
"meth:`~django.db.models.query.QuerySet.get`, :meth:`~django.db.models.query."
"QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` when "
"you need to look up objects from the database. However, that's far from all "
"there is; see the :ref:`QuerySet API Reference <queryset-api>` for a "
"complete list of all the various :class:`~django.db.models.query.QuerySet` "
"methods."
msgstr ""
"Kebanyakan waktu anda akan gunakan :meth:`~django.db.models.query.QuerySet."
"all`, :meth:`~django.db.models.query.QuerySet.get`, :meth:`~django.db.models."
"query.QuerySet.filter` dan :meth:`~django.db.models.query.QuerySet.exclude` "
"ketika anda butuh mencari obyek-obyek dari basisdata. Bagaimanapun, itu jauh "
"dari semua yang ada; lihat :ref:`QuerySet API Reference <queryset-api>` "
"untuk daftar lengkap dari semua ragam metode :class:`~django.db.models.query."
"QuerySet`."

msgid "Limiting ``QuerySet``\\s"
msgstr "Membatasi ``QuerySet``"

msgid ""
"Use a subset of Python's array-slicing syntax to limit your :class:`~django."
"db.models.query.QuerySet` to a certain number of results. This is the "
"equivalent of SQL's ``LIMIT`` and ``OFFSET`` clauses."
msgstr ""
"Gunakan sub kumpulan dari sintaksis memotong-array Python untuk membatasi :"
"class:`~django.db.models.query.QuerySet` anda pada nomor tertentu dari "
"hasil. Ini adalah setara daro klausa ``LIMIT`` dan ``OFFSET`` SQL."

msgid "For example, this returns the first 5 objects (``LIMIT 5``)::"
msgstr "Sebagai contoh, ini mengembalikan 5 obyek pertama (``LIMIT 5``)::"

msgid "This returns the sixth through tenth objects (``OFFSET 5 LIMIT 5``)::"
msgstr "Ini mengembalikan enam dari 10 obyek (``OFFSET 5 LIMIT 5``)::"

msgid "Negative indexing (i.e. ``Entry.objects.all()[-1]``) is not supported."
msgstr ""
"Pengindeksan negatif (yaitu ``Entry.objects.all()[-1]``) tidak didukung."

msgid ""
"Generally, slicing a :class:`~django.db.models.query.QuerySet` returns a "
"new :class:`~django.db.models.query.QuerySet` -- it doesn't evaluate the "
"query. An exception is if you use the \"step\" parameter of Python slice "
"syntax. For example, this would actually execute the query in order to "
"return a list of every *second* object of the first 10::"
msgstr ""
"Umumnya, memotong :class:`~django.db.models.query.QuerySet` mengembalikan :"
"class:`~django.db.models.query.QuerySet` baru -- itu tidak menilai "
"permintaan. Sebuah pengevualian jika anda menggunakan parameter \"step\" "
"dari sintaksis potongan Python. Sebagai contoh, ini akan sebenarnya "
"menjalankan permintaan untuk menjalankan daftar dari setiap *detik* obyek "
"dari 10 pertama::"

msgid ""
"Further filtering or ordering of a sliced queryset is prohibited due to the "
"ambiguous nature of how that might work."
msgstr ""
"Penyaring atau pengurut lebih lanjut dari irisan queryset dilarang karena "
"sifat ambigu dari bagaimana itu mungkin bekerja."

msgid ""
"To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar "
"LIMIT 1``), use an index instead of a slice. For example, this returns the "
"first ``Entry`` in the database, after ordering entries alphabetically by "
"headline::"
msgstr ""

msgid "This is roughly equivalent to::"
msgstr "Ini kurang lebih setara pada::"

msgid ""
"Note, however, that the first of these will raise ``IndexError`` while the "
"second will raise ``DoesNotExist`` if no objects match the given criteria. "
"See :meth:`~django.db.models.query.QuerySet.get` for more details."
msgstr ""
"Catat, bagaimanapun, yang pertama dari ini akan memunculkan "
"``IndexError`` selagi kedua akan memunculkan ``DoesNotExist`` jika tidak ada "
"obyek cocok dari kriteria yang diberikan. Lihat :meth:`~django.db.models."
"query.QuerySet.get` untuk rincian lebih."

msgid "Field lookups"
msgstr "Bidang pencarian"

msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the :class:`~django.db.models."
"query.QuerySet` methods :meth:`~django.db.models.query.QuerySet.filter`, :"
"meth:`~django.db.models.query.QuerySet.exclude` and :meth:`~django.db.models."
"query.QuerySet.get`."
msgstr ""
"Pencarian bidang adalah bagaimana anda menentukan isi dari sebuah klausa SQL "
"``WHERE``. Mereka ditentukan sebagai argumen kata kunci pada :class:`~django."
"db.models.query.QuerySet` metode metode :meth:`~django.db.models.query."
"QuerySet.filter`, :meth:`~django.db.models.query.QuerySet.exclude` dan :meth:"
"`~django.db.models.query.QuerySet.get`."

msgid ""
"Basic lookups keyword arguments take the form ``field__lookuptype=value``. "
"(That's a double-underscore). For example::"
msgstr ""
"Argumen kata kunci pencarian dasar mengambil formulir "
"``field__lookuptype=value``. (Itu adalah garis bawah ganda). Sebagai contoh::"

msgid "translates (roughly) into the following SQL:"
msgstr "terjemahan (kurang lebih) ke dalam SQL berikut:"

msgid "How this is possible"
msgstr "Bagaimana ini mungkin"

msgid ""
"Python has the ability to define functions that accept arbitrary name-value "
"arguments whose names and values are evaluated at runtime. For more "
"information, see :ref:`tut-keywordargs` in the official Python tutorial."
msgstr ""
"Python mempunyai kemampuan untuk menentukan fungsi-fungsi yang menerima "
"argumen nilai-nama beruubah-ubah yang namanya dan nilainya dinilai pada "
"waktu berjalan. Untuk informasi lebih, lihat :ref:`tut-keywordargs` dalam "
"tutorial Python resmi."

msgid ""
"The field specified in a lookup has to be the name of a model field. There's "
"one exception though, in case of a :class:`~django.db.models.ForeignKey` you "
"can specify the field name suffixed with ``_id``. In this case, the value "
"parameter is expected to contain the raw value of the foreign model's "
"primary key. For example:"
msgstr ""
"Bidang ditentukan dalam pencarian harus berupa nama dari bidang model. "
"meskipun ada satu pengecualian, dalam kasus dari :class:`~django.db.models."
"ForeignKey` anda dapat menentukan nama bidang akhiran dengan ``_id``. Dalam "
"kasus ini, parameter nilai diharapkan mengandung nilai mentah dari foreign "
"primary key model. Sebagai contoh:"

msgid ""
"If you pass an invalid keyword argument, a lookup function will raise "
"``TypeError``."
msgstr ""
"Jika anda melewatkan argumen kata kunci tidak sah, fungsi pencarian akan "
"memunculkan ``TypeError``."

msgid ""
"The database API supports about two dozen lookup types; a complete reference "
"can be found in the :ref:`field lookup reference <field-lookups>`. To give "
"you a taste of what's available, here's some of the more common lookups "
"you'll probably use:"
msgstr ""
"API basisdata mendukung sekitar dua lusin jenis pencarian; acuan lengkap "
"dapat ditemukan dalam :ref:`field lookup reference 1`. Untuk memberikan anda "
"selera dari apa yang tersedia, ini adalah beberapa dari pencarian lebih umum "
"anda mungkin gunakan:"

msgid ":lookup:`exact`"
msgstr ":lookup:`exact`"

msgid "An \"exact\" match. For example::"
msgstr "Sebuah pencocokan \"tepat\". Sebagai contoh::"

msgid "Would generate SQL along these lines:"
msgstr "Akan membangkitkan SQL bersama baris ini:"

msgid ""
"If you don't provide a lookup type -- that is, if your keyword argument "
"doesn't contain a double underscore -- the lookup type is assumed to be "
"``exact``."
msgstr ""
"Jika anda tidak menyediakan jenis pencarian -- yaitu, jika argumen kata "
"kunci anda tidak mengandung garis bawah ganda -- jenis pencarian dianggap "
"``tepat``."

msgid "For example, the following two statements are equivalent::"
msgstr "Sebagai contoh, dua pernyataan berikut adalah setara::"

msgid "This is for convenience, because ``exact`` lookups are the common case."
msgstr ""
"Ini adalah untuk kenyamanan, karena pencarian ``exact`` adalah kasus umum."

msgid ":lookup:`iexact`"
msgstr ":lookup:`iexact`"

msgid "A case-insensitive match. So, the query::"
msgstr "Pencocokan kasus-tidak-peka. Jadi, permintaan::"

msgid ""
"Would match a ``Blog`` titled ``\"Beatles Blog\"``, ``\"beatles blog\"``, or "
"even ``\"BeAtlES blOG\"``."
msgstr ""
"Akan cocok ``Blog`` berjudul ``\"Beatles Blog\"``, ``\"beatles blog\"``, "
"atau bahkan ``\"BeAtlES blOG\"``."

msgid ":lookup:`contains`"
msgstr ":lookup:`contains`"

msgid "Case-sensitive containment test. For example::"
msgstr "Percobaan penahanan kasus-peka . Sebagai contoh::"

msgid "Roughly translates to this SQL:"
msgstr "Kurang lebih menterjemahkan ke SQL ini:"

msgid ""
"Note this will match the headline ``'Today Lennon honored'`` but not "
"``'today lennon honored'``."
msgstr ""
"Catat ini akan cocok dengan judul  ``'Today Lennon honored'`` tetapi tidak "
"``'today lennon honored'``."

msgid "There's also a case-insensitive version, :lookup:`icontains`."
msgstr "Ada juga versi kasus-tidak-peka,  :lookup:`icontains`."

msgid ":lookup:`startswith`, :lookup:`endswith`"
msgstr ":lookup:`startswith`, :lookup:`endswith`"

msgid ""
"Starts-with and ends-with search, respectively. There are also case-"
"insensitive versions called :lookup:`istartswith` and :lookup:`iendswith`."
msgstr ""
"Pencarian mulai-dengan dan berakhir-dengan, masing-masing. Ada juga versi "
"kasus-tidak-peka dipanggil :lookup:`istartswith` dan :lookup:`iendswith`."

msgid ""
"Again, this only scratches the surface. A complete reference can be found in "
"the :ref:`field lookup reference <field-lookups>`."
msgstr ""
"Kembali, ini hanya menggores permukaan. Acuan lengkap dapat ditemukan di :"
"ref:`field lookup reference 1`."

msgid "Lookups that span relationships"
msgstr "Pencarian yang menjangkau hubungan"

msgid ""
"Django offers a powerful and intuitive way to \"follow\" relationships in "
"lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind "
"the scenes. To span a relationship, use the field name of related fields "
"across models, separated by double underscores, until you get to the field "
"you want."
msgstr ""

msgid ""
"This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` "
"is ``'Beatles Blog'``::"
msgstr ""
"Contoh ini mengambil semua obyek ``Entry`` dengan ``Blog`` yang ``name`` "
"adalah ``'Beatles Blog'``::"

msgid "This spanning can be as deep as you'd like."
msgstr "Jangkauan ini dapat sedalam anda sukai."

msgid ""
"It works backwards, too. While it :attr:`can be customized <.ForeignKey."
"related_query_name>`, by default you refer to a \"reverse\" relationship in "
"a lookup using the lowercase name of the model."
msgstr ""
"Itu bekerja kebelakang, juga. Selagi itu :attr:`can be customized <."
"ForeignKey.related_query_name>`, secara awalan anda mengacu pada hubungan "
"\"reverse\" dalam pencarian menggunakan nama huruf kecil dari model."

msgid ""
"This example retrieves all ``Blog`` objects which have at least one "
"``Entry`` whose ``headline`` contains ``'Lennon'``::"
msgstr ""
"Contoh ini mengambil semua obyek ``Blog`` yang setidaknya saru ``Entry`` "
"yang ``headline`` mengandung ``'Lennon'``::"

msgid ""
"If you are filtering across multiple relationships and one of the "
"intermediate models doesn't have a value that meets the filter condition, "
"Django will treat it as if there is an empty (all values are ``NULL``), but "
"valid, object there. All this means is that no error will be raised. For "
"example, in this filter::"
msgstr ""
"Jika anda menyaring terhadap banyak hubungan dan satu dari model mengengah "
"tidak mempunyai nilai yang memenuhi kondisi penyaring, Django akan "
"memperlakukan itu sebagai jika sebuah kosong (semua nilai adalah ``NULL``), "
"tetapi obyek sah disana. Semua ini berarti bahwa tidak ada kesalahan akan "
"dimunculkan. Sebagi contoh, dalam penyaringan ini::"

msgid ""
"(if there was a related ``Author`` model), if there was no ``author`` "
"associated with an entry, it would be treated as if there was also no "
"``name`` attached, rather than raising an error because of the missing "
"``author``. Usually this is exactly what you want to have happen. The only "
"case where it might be confusing is if you are using :lookup:`isnull`. Thus::"
msgstr ""
"(jika ada model ``Author`` terkait), jika tidak ada ``author`` terkait "
"dengan sebuah masukan, itu akan diperlakukan seperti jika tidak ada juga "
"``name`` terlampir, daripada memunculkan kesalahan karena dari ``author`` "
"hilang. Biasanya ini adalah tepatnya apa anda ingin miliki terjadi. Kasus "
"satu-satunya dimana itu mungkin membingungkan adalah jika anda menggunakan :"
"lookup:`isnull`. Jadi::"

msgid ""
"will return ``Blog`` objects that have an empty ``name`` on the ``author`` "
"and also those which have an empty ``author`` on the ``entry``. If you don't "
"want those latter objects, you could write::"
msgstr ""
"akan mengembalikan obyek ``Blog`` yang mempunyai ``name`` kosong pada "
"``author`` dan juga itu yang mempunyai ``author`` kosong pada ``entry``. "
"Jika anda tidak ingin obyek terakhir itu, anda dapat menulis::"

msgid "Spanning multi-valued relationships"
msgstr "Membentangkan hubungan banyak-nilai"

msgid ""
"When spanning a :class:`~django.db.models.ManyToManyField` or a reverse :"
"class:`~django.db.models.ForeignKey` (such as from ``Blog`` to ``Entry``), "
"filtering on multiple attributes raises the question of whether to require "
"each attribute to coincide in the same related object. We might seek blogs "
"that have an entry from 2008 with *“Lennon”* in its headline, or we might "
"seek blogs that merely have any entry from 2008 as well as some newer or "
"older entry with *“Lennon”* in its headline."
msgstr ""

msgid ""
"To select all blogs containing at least one entry from 2008 having *\"Lennon"
"\"* in its headline (the same entry satisfying both conditions), we would "
"write::"
msgstr ""

msgid ""
"Otherwise, to perform a more permissive query selecting any blogs with "
"merely *some* entry with *\"Lennon\"* in its headline and *some* entry from "
"2008, we would write::"
msgstr ""

msgid ""
"Suppose there is only one blog that has both entries containing *\"Lennon\"* "
"and entries from 2008, but that none of the entries from 2008 contained *"
"\"Lennon\"*. The first query would not return any blogs, but the second "
"query would return that one blog. (This is because the entries selected by "
"the second filter may or may not be the same as the entries in the first "
"filter. We are filtering the ``Blog`` items with each filter statement, not "
"the ``Entry`` items.) In short, if each condition needs to match the same "
"related object, then each should be contained in a single :meth:`~django.db."
"models.query.QuerySet.filter` call."
msgstr ""

msgid ""
"As the second (more permissive) query chains multiple filters, it performs "
"multiple joins to the primary model, potentially yielding duplicates."
msgstr ""

msgid ""
"The behavior of :meth:`~django.db.models.query.QuerySet.filter` for queries "
"that span multi-value relationships, as described above, is not implemented "
"equivalently for :meth:`~django.db.models.query.QuerySet.exclude`. Instead, "
"the conditions in a single :meth:`~django.db.models.query.QuerySet.exclude` "
"call will not necessarily refer to the same item."
msgstr ""
"Perilaku dari :meth:`~django.db.models.query.QuerySet.filter` untuk "
"permintaan yang menjangkau hubungan banyak-nilai, seperti digambarkan "
"diatas, tidak diterapkan setara untuk :meth:`~django.db.models.query."
"QuerySet.exclude`. Malahan, keadaan dalam panggilan :meth:`~django.db.models."
"query.QuerySet.exclude` tunggal tidak akan butuh mengacu ke barang sama."

msgid ""
"For example, the following query would exclude blogs that contain *both* "
"entries with *\"Lennon\"* in the headline *and* entries published in 2008::"
msgstr ""
"Sebagai contoh, permintaan berikut akan tidak menyertakan blog-blog yang "
"mengandung *kedua* masukan dengan  *\"Lennon\"* di judul *dan* masukan "
"diterbitkan di 2008::"

msgid ""
"However, unlike the behavior when using :meth:`~django.db.models.query."
"QuerySet.filter`, this will not limit blogs based on entries that satisfy "
"both conditions. In order to do that, i.e. to select all blogs that do not "
"contain entries published with *\"Lennon\"* that were published in 2008, you "
"need to make two queries::"
msgstr ""
"Bagaimanapun, tidak seperti perilaku ketika menggunakan :meth:`~django.db."
"models.query.QuerySet.filter`,ini tidak akan membatasi blog-blog berdasarkan "
"pada masukan yang memuaskan kedua keadaan. Untuk melakukan itu, yaitu untuk "
"memilih semua blog yang tidak mengandung masukan diterbitkan dengan *\"Lennon"
"\"* yang telah diterbitkan di 2008, anda butuh membuat dua permintaan::"

msgid "Filters can reference fields on the model"
msgstr "Penyaring dapat mengacu bidang pada model"

msgid ""
"In the examples given so far, we have constructed filters that compare the "
"value of a model field with a constant. But what if you want to compare the "
"value of a model field with another field on the same model?"
msgstr ""
"Dalam contoh yang diberikan sejauh ini, kami telah membangun berkas-berkas "
"penyaring yang membandingkan nilai dari bidang model dengan ketetapan. "
"Tetapi apa jika anda ingin membandingkan nilai dai bidang model dengan "
"bidang lain pada model sama?"

msgid ""
"Django provides :class:`F expressions <django.db.models.F>` to allow such "
"comparisons. Instances of ``F()`` act as a reference to a model field within "
"a query. These references can then be used in query filters to compare the "
"values of two different fields on the same model instance."
msgstr ""
"Django menyediakan :class:`F expressions <django.db.models.F>` untuk "
"mengizinkan perbandingan. Instance dari ``F()`` bertindak sebagai sebuah "
"acuan pada model dalam permintaan. Acuan ini kemudian dapat digunakan dalam "
"penyaring permintaan untuk membandingkan nilai-nilai dari dua bidang berbeda "
"pada instance model sama."

msgid ""
"For example, to find a list of all blog entries that have had more comments "
"than pingbacks, we construct an ``F()`` object to reference the pingback "
"count, and use that ``F()`` object in the query::"
msgstr ""
"Sebagai contoh, untuk menemukan daftar dari semua masukan blog yang telah "
"mempunyai komentar lebih dari pingback, kami membangun obyek ``F()`` untuk "
"mengacu jumlah pingback, dan menggunakan obyek ``F()`` itu dalam permintaan::"

msgid ""
"Django supports the use of addition, subtraction, multiplication, division, "
"modulo, and power arithmetic with ``F()`` objects, both with constants and "
"with other ``F()`` objects. To find all the blog entries with more than "
"*twice* as many comments as pingbacks, we modify the query::"
msgstr ""
"Django mendukung penggunaan aritmatika penambahan, pengurangan, perkalian, "
"pembagian modulus, dan power dengan obyek ``F()``, kedua dengan ketetapan "
"dan dengan obyek ``F()`` lain. Untuk menemukan semua masukan blog dengan "
"lebih dari *dua kali* sebanyak komentar seperti pingback, kami merubah "
"permintaan::"

msgid ""
"To find all the entries where the rating of the entry is less than the sum "
"of the pingback count and comment count, we would issue the query::"
msgstr ""
"Untuk menemukan semua masukan dimana penilaian dari masukan sedikit dari "
"penjumlahan hitungan pingback dan hitungan komentar, kami akan menerbitkan "
"permintaan::"

msgid ""
"You can also use the double underscore notation to span relationships in an "
"``F()`` object. An ``F()`` object with a double underscore will introduce "
"any joins needed to access the related object. For example, to retrieve all "
"the entries where the author's name is the same as the blog name, we could "
"issue the query::"
msgstr ""
"Anda dapat juga menggunakan pernyataan garis bawah untuk menjangkau hubungan "
"dalam sebuah obyek ``F()``. Sebuah obyek ``F()`` dengan garis bawah ganda "
"akan memperkenalkan join apapun dibutuhkan untuk mengakses obyek terkait. "
"Sebagai contoh, untuk mengambil semua masukan dimana nama penulis sama "
"seperti nama blog, kami dapat menerbitkan permintaan::"

msgid ""
"For date and date/time fields, you can add or subtract a :class:`~datetime."
"timedelta` object. The following would return all entries that were modified "
"more than 3 days after they were published::"
msgstr ""
"Untuk bidang-bidang tanggal dan tanggal/waktu, anda dapat menambah atau "
"mengurangi obyek :class:`~datetime.timedelta`. Berikut akan mengembalikan "
"semua masukan yang telah diubah lebih dari 3 hari setelah mereka "
"diterbitkan. "

msgid ""
"The ``F()`` objects support bitwise operations by ``.bitand()``, ``."
"bitor()``, ``.bitxor()``, ``.bitrightshift()``, and ``.bitleftshift()``. For "
"example::"
msgstr ""

msgid "Oracle"
msgstr "Oracle"

msgid "Oracle doesn't support bitwise XOR operation."
msgstr "Oracle tidak mendukung tindakan bitwise XOR."

msgid "Expressions can reference transforms"
msgstr ""

msgid "Django supports using transforms in expressions."
msgstr ""

msgid ""
"For example, to find all ``Entry`` objects published in the same year as "
"they were last modified::"
msgstr ""

msgid ""
"To find the earliest year an entry was published, we can issue the query::"
msgstr ""

msgid ""
"This example finds the value of the highest rated entry and the total number "
"of comments on all entries for each year::"
msgstr ""

msgid "The ``pk`` lookup shortcut"
msgstr "Jalan pintas pencarian ``pk``"

msgid ""
"For convenience, Django provides a ``pk`` lookup shortcut, which stands for "
"\"primary key\"."
msgstr ""
"Untuk kemudahan, Django menyediakan jalan pintas pencarian ``pk``, yang "
"berdiri untuk \"primary key\"."

msgid ""
"In the example ``Blog`` model, the primary key is the ``id`` field, so these "
"three statements are equivalent::"
msgstr ""
"Dalam contoh model ``Blog``, primary key adalah bidang ``id``, jadi "
"pernyataan ini adalah setara::"

msgid ""
"The use of ``pk`` isn't limited to ``__exact`` queries -- any query term can "
"be combined with ``pk`` to perform a query on the primary key of a model::"
msgstr ""
"Penggunaan ``pk`` tidak terbatas pada permintaan ``__exact`` -- apapun "
"istilah permintaan dapat dipadukan dengan ``pk`` untuk melakukan sebuah "
"permintaan pada primary key pada model::"

msgid ""
"``pk`` lookups also work across joins. For example, these three statements "
"are equivalent::"
msgstr ""
"Pencarian ``pk`` juga bekerja liintas join. Sebagai contoh, tiga pernyataan "
"ini adalah setara::"

msgid "Escaping percent signs and underscores in ``LIKE`` statements"
msgstr "Meloloskan tanda persen dan garis bawah dalam pernyataan ``LIKE``"

msgid ""
"The field lookups that equate to ``LIKE`` SQL statements (``iexact``, "
"``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` "
"and ``iendswith``) will automatically escape the two special characters used "
"in ``LIKE`` statements -- the percent sign and the underscore. (In a "
"``LIKE`` statement, the percent sign signifies a multiple-character wildcard "
"and the underscore signifies a single-character wildcard.)"
msgstr ""
"Pencarian bidang yang menyerupai pernyataan SQL ``LIKE`` (``iexact``, "
"``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` "
"dan ``iendswith``) akan otomatis meloloskan dua karakter khusus digunakan "
"dalam pernyataan ``LIKE`` -- tanda persen dan garis bawah. (Dalam sebuah "
"pernyataan ``Like``, tanda persen menandakan wildcard banyak-karakter dan "
"garis bawah menandakan wildcard karakter-tunggal.)"

msgid ""
"This means things should work intuitively, so the abstraction doesn't leak. "
"For example, to retrieve all the entries that contain a percent sign, use "
"the percent sign as any other character::"
msgstr ""

msgid ""
"Django takes care of the quoting for you; the resulting SQL will look "
"something like this:"
msgstr ""
"Django menangani dari pengutipan untuk anda; menghasilkan SQL akan mencari "
"sesuatu seperti ini:"

msgid ""
"Same goes for underscores. Both percentage signs and underscores are handled "
"for you transparently."
msgstr ""
"Sama seperti garis bawah. Kedua tanda persen dan garis bawag ditangani untuk "
"anda secara transparan."

msgid "Caching and ``QuerySet``\\s"
msgstr "Cache dan ``QuerySet``"

msgid ""
"Each :class:`~django.db.models.query.QuerySet` contains a cache to minimize "
"database access. Understanding how it works will allow you to write the most "
"efficient code."
msgstr ""
"Setiap :class:`~django.db.models.query.QuerySet` mengandung sebuah tembolok "
"untuk meminimalkan akses basisdata. Pahami bagaimana dia bekerja akan "
"mengizinkan anda menulis kode paling efisien."

msgid ""
"In a newly created :class:`~django.db.models.query.QuerySet`, the cache is "
"empty. The first time a :class:`~django.db.models.query.QuerySet` is "
"evaluated -- and, hence, a database query happens -- Django saves the query "
"results in the :class:`~django.db.models.query.QuerySet`’s cache and returns "
"the results that have been explicitly requested (e.g., the next element, if "
"the :class:`~django.db.models.query.QuerySet` is being iterated over). "
"Subsequent evaluations of the :class:`~django.db.models.query.QuerySet` "
"reuse the cached results."
msgstr ""
"Dalam :class:`~django.db.models.query.QuerySet` baru dibuat, cache kosong. "
"Pertama kali sebuah :class:`~django.db.models.query.QuerySet` dinilai -- "
"dan, karena itu, sebuah permintaan basisdata terjadi -- Django menyimpan "
"hasil permintaan dalam cache :class:`~django.db.models.query.QuerySet` dan "
"mengembalikan hasil yang telah secara jelas diminta (sebagai contoh, unsur "
"selanjutnya, jika ada :class:`~django.db.models.query.QuerySet` sedang "
"diulang). Penilaian selanjutnya dari :class:`~django.db.models.query."
"QuerySet` menggunakan hasil ter cache."

msgid ""
"Keep this caching behavior in mind, because it may bite you if you don't use "
"your :class:`~django.db.models.query.QuerySet`\\s correctly. For example, "
"the following will create two :class:`~django.db.models.query.QuerySet`\\s, "
"evaluate them, and throw them away::"
msgstr ""
"Jaga perilaku cache ini dalam pikiran, karena itu mungkin mengigit anda jika "
"anda tidak menggunakan :class:`~django.db.models.query.QuerySet` anda dengan "
"benar. Sebagai contoh, berikut akan membuat dua :class:`~django.db.models."
"query.QuerySet`, nilai mereka, dan lemparkan mereka::"

msgid ""
"That means the same database query will be executed twice, effectively "
"doubling your database load. Also, there's a possibility the two lists may "
"not include the same database records, because an ``Entry`` may have been "
"added or deleted in the split second between the two requests."
msgstr ""
"Itu berarti permintaan absisdata sama akan dijalankan dua kali, berhasil "
"menggandakan muatan basisdata anda. Juga, ada kemungkinan dua daftar mungkin "
"tidak meneyrtakan rekaman basisdata sama, karena ``Entry`` telah ditambahkan "
"atau dihapus dalam pembagian kedua diantara dua permintaan."

msgid ""
"To avoid this problem, save the :class:`~django.db.models.query.QuerySet` "
"and reuse it::"
msgstr ""
"Untuk menghindati masalah, simpan :class:`~django.db.models.query.QuerySet` "
"dan gunakan itu::"

msgid "When ``QuerySet``\\s are not cached"
msgstr "Ketika ``QuerySet`` tidak di cache"

msgid ""
"Querysets do not always cache their results.  When evaluating only *part* of "
"the queryset, the cache is checked, but if it is not populated then the "
"items returned by the subsequent query are not cached. Specifically, this "
"means that :ref:`limiting the queryset <limiting-querysets>` using an array "
"slice or an index will not populate the cache."
msgstr ""
"Queryset tidak selalu cache hasil mereka. Ketika menilai hanya *bagian* dari "
"queryset, cache diperiksa, tetapi jika tidak dikumpulkan kemudian barang-"
"barang dikembalikan oleh permintaan selanjutnya tidak di cache. Secara "
"khusus, ini berarti bahwa :ref:`limiting the queryset 1` menggunakan "
"potongan senarai atau sebuah indeks tidak akan dikumpulkan cache."

msgid ""
"For example, repeatedly getting a certain index in a queryset object will "
"query the database each time::"
msgstr ""
"Sebagi contoh, secara berulang mendapatkan indeks tertentu di queryset obyek "
"akan meminta basisdata setiap waktu::"

msgid ""
"However, if the entire queryset has already been evaluated, the cache will "
"be checked instead::"
msgstr ""
"Bagaimanapun, jika keseluruhan queryset sudah dinilai, tembolok akan "
"diperiksa sebagai gantinya::"

msgid ""
"Here are some examples of other actions that will result in the entire "
"queryset being evaluated and therefore populate the cache::"
msgstr ""
"Ini adalah beberapa contoh dari tindakan lain yang akan menghasilkan "
"keseluruhan queryset yang sedang dinilai dan karena itu dikumpulkan "
"tembolok::"

msgid ""
"Simply printing the queryset will not populate the cache. This is because "
"the call to ``__repr__()`` only returns a slice of the entire queryset."
msgstr ""
"Mencetak sederhana queryset tidak akan mengumpulkan tembolok. Ini "
"dikarenakan panggilan pada ``__repr__()`` hanya mengembalikan potongan dari "
"keseluruhan queryset."

msgid "Querying ``JSONField``"
msgstr "Meminta ``JSONField``"

msgid ""
"Lookups implementation is different in :class:`~django.db.models.JSONField`, "
"mainly due to the existence of key transformations. To demonstrate, we will "
"use the following example model::"
msgstr ""

msgid "Storing and querying for ``None``"
msgstr "Menyimpan dan meminta untuk ``None``"

msgid ""
"As with other fields, storing ``None`` as the field's value will store it as "
"SQL ``NULL``. While not recommended, it is possible to store JSON scalar "
"``null`` instead of SQL ``NULL`` by using :class:`Value('null') <django.db."
"models.Value>`."
msgstr ""

msgid ""
"Whichever of the values is stored, when retrieved from the database, the "
"Python representation of the JSON scalar ``null`` is the same as SQL "
"``NULL``, i.e. ``None``. Therefore, it can be hard to distinguish between "
"them."
msgstr ""

msgid ""
"This only applies to ``None`` as the top-level value of the field. If "
"``None`` is inside a :py:class:`list` or :py:class:`dict`, it will always be "
"interpreted as JSON ``null``."
msgstr ""

msgid ""
"When querying, ``None`` value will always be interpreted as JSON ``null``. "
"To query for SQL ``NULL``, use :lookup:`isnull`::"
msgstr ""

msgid ""
"Unless you are sure you wish to work with SQL ``NULL`` values, consider "
"setting ``null=False`` and providing a suitable default for empty values, "
"such as ``default=dict``."
msgstr ""

msgid ""
"Storing JSON scalar ``null`` does not violate :attr:`null=False <django.db."
"models.Field.null>`."
msgstr ""
"Menyimpan skalar JSON ``null`` tidak melanggar :attr:`null=False <django.db."
"models.Field.null>`."

msgid "Key, index, and path transforms"
msgstr ""

msgid ""
"To query based on a given dictionary key, use that key as the lookup name::"
msgstr ""

msgid "Multiple keys can be chained together to form a path lookup::"
msgstr "Banyak kunci dapat diikat bersama untuk membentuk pencarian jalur::"

msgid ""
"If the key is an integer, it will be interpreted as an index transform in an "
"array::"
msgstr ""

msgid ""
"If the key you wish to query by clashes with the name of another lookup, use "
"the :lookup:`contains <jsonfield.contains>` lookup instead."
msgstr ""

msgid "To query for missing keys, use the ``isnull`` lookup::"
msgstr "Permintaan untuk kunci hilang, gunakan pencarian ``isnull``::"

msgid ""
"The lookup examples given above implicitly use the :lookup:`exact` lookup. "
"Key, index, and path transforms can also be chained with: :lookup:"
"`icontains`, :lookup:`endswith`, :lookup:`iendswith`, :lookup:`iexact`, :"
"lookup:`regex`, :lookup:`iregex`, :lookup:`startswith`, :lookup:"
"`istartswith`, :lookup:`lt`, :lookup:`lte`, :lookup:`gt`, and :lookup:`gte`, "
"as well as with :ref:`containment-and-key-lookups`."
msgstr ""

msgid ""
"Due to the way in which key-path queries work, :meth:`~django.db.models."
"query.QuerySet.exclude` and :meth:`~django.db.models.query.QuerySet.filter` "
"are not guaranteed to produce exhaustive sets. If you want to include "
"objects that do not have the path, add the ``isnull`` lookup."
msgstr ""

msgid ""
"Since any string could be a key in a JSON object, any lookup other than "
"those listed below will be interpreted as a key lookup. No errors are "
"raised. Be extra careful for typing mistakes, and always check your queries "
"work as you intend."
msgstr ""
"Sejak string apapun dapat berupa kunci dalam obyek JSON, pencarian apapun "
"selain dari mereka didaftarkan dibawah akan diterjemahkan sebagai pencarian "
"kunci. Tidak ada kesalahan dimunculkan. Waspadalah untuk mengetik kesalahan, "
"dan selalu memeriksa permintaan anda bekerja seperti anda hendaki. "

msgid "MariaDB and Oracle users"
msgstr "Pengguna MariaDB dan Oracle"

msgid ""
"Using :meth:`~django.db.models.query.QuerySet.order_by` on key, index, or "
"path transforms will sort the objects using the string representation of the "
"values. This is because MariaDB and Oracle Database do not provide a "
"function that converts JSON values into their equivalent SQL values."
msgstr ""

msgid "Oracle users"
msgstr "Pengguna Oracle"

msgid ""
"On Oracle Database, using ``None`` as the lookup value in an :meth:`~django."
"db.models.query.QuerySet.exclude` query will return objects that do not have "
"``null`` as the value at the given path, including objects that do not have "
"the path. On other database backends, the query will return objects that "
"have the path and the value is not ``null``."
msgstr ""

msgid "PostgreSQL users"
msgstr "Pengguna PostgreSQL"

msgid ""
"On PostgreSQL, if only one key or index is used, the SQL operator ``->`` is "
"used. If multiple operators are used then the ``#>`` operator is used."
msgstr ""

msgid "SQLite users"
msgstr "Pengguna SQLite "

msgid ""
"On SQLite, ``\"true\"``, ``\"false\"``, and ``\"null\"`` string values will "
"always be interpreted as ``True``, ``False``, and JSON ``null`` respectively."
msgstr ""

msgid "Containment and key lookups"
msgstr ""

msgid "``contains``"
msgstr "``contains``"

msgid ""
"The :lookup:`contains` lookup is overridden on ``JSONField``. The returned "
"objects are those where the given ``dict`` of key-value pairs are all "
"contained in the top-level of the field. For example::"
msgstr ""

msgid "Oracle and SQLite"
msgstr "Oracle dan SQLite"

msgid "``contains`` is not supported on Oracle and SQLite."
msgstr "``contains``tidak didukung pada Oracle dan SQLite."

msgid "``contained_by``"
msgstr "``contained_by``"

msgid ""
"This is the inverse of the :lookup:`contains <jsonfield.contains>` lookup - "
"the objects returned will be those where the key-value pairs on the object "
"are a subset of those in the value passed. For example::"
msgstr ""

msgid "``contained_by`` is not supported on Oracle and SQLite."
msgstr "``contained_by`` tidak didukung pada Oracle dan SQLite."

msgid "``has_key``"
msgstr "``has_key``"

msgid ""
"Returns objects where the given key is in the top-level of the data. For "
"example::"
msgstr ""
"Mengembalikan objek dimana kunci diberikan dalam tingkat-atas dari data. "
"Sebagai contoh::"

msgid "``has_keys``"
msgstr "``has_keys``"

msgid ""
"Returns objects where all of the given keys are in the top-level of the "
"data. For example::"
msgstr ""

msgid "``has_any_keys``"
msgstr "``has_any_keys``"

msgid ""
"Returns objects where any of the given keys are in the top-level of the "
"data. For example::"
msgstr ""

msgid "Complex lookups with ``Q`` objects"
msgstr "Pencarian rumit dengan obyek ``Q``"

msgid ""
"Keyword argument queries -- in :meth:`~django.db.models.query.QuerySet."
"filter`, etc. -- are \"AND\"ed together. If you need to execute more complex "
"queries (for example, queries with ``OR`` statements), you can use :class:`Q "
"objects <django.db.models.Q>`."
msgstr ""
"Permintaan argumen katakunci -- dalam :meth:`~django.db.models.query."
"QuerySet.filter`, dll. -- adalah \"AND\" bersama-sama. Jika anda buth "
"menjalankan permintaan lebih rumit (sebagai contoh, permintaan dengan "
"pernyataan ``OR``), anda dapat menggunakan :class:`Q objects <django.db."
"models.Q>`."

msgid ""
"A :class:`Q object <django.db.models.Q>` (``django.db.models.Q``) is an "
"object used to encapsulate a collection of keyword arguments. These keyword "
"arguments are specified as in \"Field lookups\" above."
msgstr ""
":class:`Q object <django.db.models.Q>` (``django.db.models.Q``) adalah "
"sebuah obyek digunakan untuk membungkus koleksi dari argumen katakunci. "
"Argumen katakunci ini ditentukan seperti dalam \"Pencarian bidang\" diatas."

msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""
"Sebagai contoh, obyek ``Q`` ini membungkus permintaan ``LIKE`` tunggal::"

msgid ""
"``Q`` objects can be combined using the ``&`` and ``|`` operators. When an "
"operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""
"Obyek ``Q`` dapat dipadukan menggunakan penghubung ``&`` dan ``|``. Ketika "
"sebuah penghubung digunakan pada dua obyek ``Q``, itu menghasilkan obyek "
"``Q`` baru."

msgid ""
"For example, this statement yields a single ``Q`` object that represents the "
"\"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""
"Sebagai contoh, pernyataan ini menghasilkan obyek ``Q`` tunggal yang "
"mewakili \"OR\" atau dua permintaan ``\"question__startswith\"`` ::"

msgid "This is equivalent to the following SQL ``WHERE`` clause::"
msgstr "Ini sama pada klausa SQL ``WHERE`` berikut::"

msgid ""
"You can compose statements of arbitrary complexity by combining ``Q`` "
"objects with the ``&`` and ``|`` operators and use parenthetical grouping. "
"Also, ``Q`` objects can be negated using the ``~`` operator, allowing for "
"combined lookups that combine both a normal query and a negated (``NOT``) "
"query::"
msgstr ""
"Anda dapat menyusun pernyataan dari kerumitan yang berubah-ubah dengan "
"memadukan obyek ``Q`` dengan penghubung ``&`` and ``|`` dan gunakan "
"pengelompokan yang disipkan. Juga, obyek ``Q`` dapat ditugaskan menggunakan "
"penghubung ``~``, mengizinkan perpaduan pencarian yang memadukan kedua "
"permintaan normal dan meniadakan permintaan (``NOT``)::"

msgid ""
"Each lookup function that takes keyword-arguments (e.g. :meth:`~django.db."
"models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet."
"exclude`, :meth:`~django.db.models.query.QuerySet.get`) can also be passed "
"one or more ``Q`` objects as positional (not-named) arguments. If you "
"provide multiple ``Q`` object arguments to a lookup function, the arguments "
"will be \"AND\"ed together. For example::"
msgstr ""
"Setiap fungsi pencarian yang mengambil argumen-kata kunci (sebagai contoh :"
"meth:`~django.db.models.query.QuerySet.filter`, :meth:`~django.db.models."
"query.QuerySet.exclude`, :meth:`~django.db.models.query.QuerySet.get`) dapat "
"juga melewatkan satu atau lebih obyek ``Q`` sebagai argumen (tidak-dinamai) "
"kedudukan. Jika anda menyediakan banyak argumen obyek ``Q`` pada fungsi "
"pencarian, argumen akan di \"AND\"kan bersama-sama. Sebagai contoh::"

msgid "... roughly translates into the SQL:"
msgstr "... kurang lebih diterjemahkan kedalam SQL:"

msgid ""
"Lookup functions can mix the use of ``Q`` objects and keyword arguments. All "
"arguments provided to a lookup function (be they keyword arguments or ``Q`` "
"objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it "
"must precede the definition of any keyword arguments. For example::"
msgstr ""
"Fungsi pencarian dapat mencampurkan penggunaan obyek ``Q`` dan argumen kata "
"kunci. Semua argumen disediakan untuk fungsi pencarian (menjadi mereka "
"argumen kata kunci atau obyek ``Q``) di \"AND\"kan bersama-sama. "
"Bagaimanapun, jika obyek ``Q`` disediakan, dia harus mendahului pengertian "
"dari argumen kata kunci apapun. Sebagai contoh::"

msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr "... akan menjadi permintaan sah, sama pada contoh sebelumnya; tetapi::"

msgid "... would not be valid."
msgstr "... tidak akan menjadi sah."

msgid ""
"The :source:`OR lookups examples <tests/or_lookups/tests.py>` in Django's "
"unit tests show some possible uses of ``Q``."
msgstr ""

msgid "Comparing objects"
msgstr "Membandingkan obyek"

msgid ""
"To compare two model instances, use the standard Python comparison operator, "
"the double equals sign: ``==``. Behind the scenes, that compares the primary "
"key values of two models."
msgstr ""

msgid ""
"Using the ``Entry`` example above, the following two statements are "
"equivalent::"
msgstr ""
"Menggunakan contoh ``Entry`` diatas, dua pernyataan berikut adalah setara::"

msgid ""
"If a model's primary key isn't called ``id``, no problem. Comparisons will "
"always use the primary key, whatever it's called. For example, if a model's "
"primary key field is called ``name``, these two statements are equivalent::"
msgstr ""
"Jika sebuah primary key model tidak memanggil ``id``, tidak masalah. "
"Perbandingan akan selalu menggunakan primary key, apapun itu memanggilnya. "
"Sebagai contoh, jika sebuah primary key model dipanggil ``name``, dua "
"pernyataan ini adalah setara::"

msgid "Deleting objects"
msgstr "menghapus obyek"

msgid ""
"The delete method, conveniently, is named :meth:`~django.db.models.Model."
"delete`. This method immediately deletes the object and returns the number "
"of objects deleted and a dictionary with the number of deletions per object "
"type. Example::"
msgstr ""
"Untuk menghapus metode, mudah, adalah bernama :meth:`~django.db.models.Model."
"delete`. Metode ini segera menghapus obyek dan mengembalikan sejumlah obyek "
"yang dihapus dan sebuah kamus dengan sejumlah penghapusan per jenis obyek. "
"Contoh::"

msgid ""
"You can also delete objects in bulk. Every :class:`~django.db.models.query."
"QuerySet` has a :meth:`~django.db.models.query.QuerySet.delete` method, "
"which deletes all members of that :class:`~django.db.models.query.QuerySet`."
msgstr ""
"Anda dapat juga menghapus obyek dalam jumlah besar. Setiap :class:`~django."
"db.models.query.QuerySet` mempunyai sebuah :meth:`~django.db.models.query."
"QuerySet.delete` method, yang menghapus semua anggota dari :class:`~django."
"db.models.query.QuerySet` tersebut."

msgid ""
"For example, this deletes all ``Entry`` objects with a ``pub_date`` year of "
"2005::"
msgstr ""
"Sebagai contoh, ini menghapus semua obyek ``Entry`` dengan tahun ``pub-"
"date`` dari 2005::"

msgid ""
"Keep in mind that this will, whenever possible, be executed purely in SQL, "
"and so the ``delete()`` methods of individual object instances will not "
"necessarily be called during the process. If you've provided a custom "
"``delete()`` method on a model class and want to ensure that it is called, "
"you will need to \"manually\" delete instances of that model (e.g., by "
"iterating over a :class:`~django.db.models.query.QuerySet` and calling "
"``delete()`` on each object individually) rather than using the bulk :meth:"
"`~django.db.models.query.QuerySet.delete` method of a :class:`~django.db."
"models.query.QuerySet`."
msgstr ""
"Ingat bahwa ini akan, ketika memungkinkan, akan dijalankan murni dalam SQL, "
"dan juga cara ``delete()`` dari instance tidak akan perlu dipanggil selama "
"pengolahan. Jika anda telah menyediakan cara ``delete()`` disesuaikan pada "
"sebuah kelas model dan ingin memastikan bahwa dia dipanggil, anda akan butuh "
"\"secara manual\" menghapus instance dari model tersebut (sebagai contoh, "
"dengan perulangan terhadap :class:`~django.db.models.query.QuerySet` dan "
"memanggil ``delete()`` pada setiap obyek secara tersendiri) daripada "
"menggunakan dalam jumlah besar cara :meth:`~django.db.models.query.QuerySet."
"delete` dari sebuah :class:`~django.db.models.query.QuerySet`."

msgid ""
"When Django deletes an object, by default it emulates the behavior of the "
"SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which "
"had foreign keys pointing at the object to be deleted will be deleted along "
"with it. For example::"
msgstr ""
"Ketika DJANGO menghapus sebuah obyek, secara awal dia meniru kebiasaan "
"batasan SQL ``ON DELETE CASCADE`` -- dalam kata lain, obyek apapun yang "
"mempunyai foreign key menunjuk pada obyek yang akan dihapus akan dihapus "
"bersama dengannya. Sebagai contoh::"

msgid ""
"This cascade behavior is customizable via the :attr:`~django.db.models."
"ForeignKey.on_delete` argument to the :class:`~django.db.models.ForeignKey`."
msgstr ""
"Kebiasaan turunan ini dapat di sesuaikan melalui argumen :attr:`~django.db."
"models.ForeignKey.on_delete` ke :class:`~django.db.models.ForeignKey`."

msgid ""
"Note that :meth:`~django.db.models.query.QuerySet.delete` is the only :class:"
"`~django.db.models.query.QuerySet` method that is not exposed on a :class:"
"`~django.db.models.Manager` itself. This is a safety mechanism to prevent "
"you from accidentally requesting ``Entry.objects.delete()``, and deleting "
"*all* the entries. If you *do* want to delete all the objects, then you have "
"to explicitly request a complete query set::"
msgstr ""
"Catat bahwa :meth:`~django.db.models.query.QuerySet.delete` adalah hanya "
"cara :class:`~django.db.models.query.QuerySet` yang tidak ditunjukkan pada :"
"class:`~django.db.models.Manager` itu sendiri. Ini adalah mekanisme aman "
"untuk mencegah anda dari kecelakaan permintaan ``Entry.objects.delete()``, "
"dan menghapus *semua* masukan. Jika anda ingin *melakukan* menghapus semua "
"obyek, kemudian anda harus secara jelas meminta kumpulan permintaan lengkap::"

msgid "Copying model instances"
msgstr "Menyalin instance model"

msgid ""
"Although there is no built-in method for copying model instances, it is "
"possible to easily create new instance with all fields' values copied. In "
"the simplest case, you can set ``pk`` to ``None`` and :attr:`_state.adding "
"<django.db.models.Model._state>` to ``True``. Using our blog example::"
msgstr ""

msgid ""
"Things get more complicated if you use inheritance. Consider a subclass of "
"``Blog``::"
msgstr ""
"Hal-hal dapat lebih rumit jika anda menggunakan warisan. Pertimbangkan "
"subkelas dari ``Blog``::"

msgid ""
"Due to how inheritance works, you have to set both ``pk`` and ``id`` to "
"``None``, and ``_state.adding`` to ``True``::"
msgstr ""

msgid ""
"This process doesn't copy relations that aren't part of the model's database "
"table. For example, ``Entry`` has a ``ManyToManyField`` to ``Author``. After "
"duplicating an entry, you must set the many-to-many relations for the new "
"entry::"
msgstr ""
"Pengolahan ini tidak menyalin hubungan yang bukan bagian dari tabel "
"basisdata model. Sebagai contoh, ``Entry`` mempunyai ``ManyToManyField`` "
"terhadap ``Author``. Setelah menggandakan sebuah masukan, anda harus "
"menyetel hubungan many-to-many untuk masukan baru::"

msgid ""
"For a ``OneToOneField``, you must duplicate the related object and assign it "
"to the new object's field to avoid violating the one-to-one unique "
"constraint. For example, assuming ``entry`` is already duplicated as above::"
msgstr ""
"Untuk ``OneToOneField``, anda harus menggandakan obyek terkait dan "
"memberikan itu ke bidang obyek baru untuk menghindari melanggar batasan "
"untuk one-to-one. Sebagai contoh, menganggap ``entry`` sudah digandakan "
"seperti diatas::"

msgid "Updating multiple objects at once"
msgstr "Memperbaharui banyak obyek sekaligus"

msgid ""
"Sometimes you want to set a field to a particular value for all the objects "
"in a :class:`~django.db.models.query.QuerySet`. You can do this with the :"
"meth:`~django.db.models.query.QuerySet.update` method. For example::"
msgstr ""
"Terkadang anda ingin menyetel sebuah bidang ke nilai tertentu untuk semua "
"obyek dalam :class:`~django.db.models.query.QuerySet`. Anda dapat melakukan "
"ini dengan cara :meth:`~django.db.models.query.QuerySet.update`. Sebagai "
"contoh::"

msgid ""
"You can only set non-relation fields and :class:`~django.db.models."
"ForeignKey` fields using this method. To update a non-relation field, "
"provide the new value as a constant. To update :class:`~django.db.models."
"ForeignKey` fields, set the new value to be the new model instance you want "
"to point to. For example::"
msgstr ""
"Anda dapat hanya menyetel bidang-bidang bukan-hubungan dan bidang-bidang :"
"class:`~django.db.models.ForeignKey` menggunakan metode ini. Untuk "
"memperbaharui bidang-bidang :class:`~django.db.models.ForeignKey`, setel "
"nilai baru ke instance model baru anda ingin tunjuk. Sebagai contoh:: "

msgid ""
"The ``update()`` method is applied instantly and returns the number of rows "
"matched by the query (which may not be equal to the number of rows updated "
"if some rows already have the new value). The only restriction on the :class:"
"`~django.db.models.query.QuerySet` being updated is that it can only access "
"one database table: the model's main table. You can filter based on related "
"fields, but you can only update columns in the model's main table. Example::"
msgstr ""
"Metode ``update()`` diberlakukan segera dan mengembalikan sejumlah baris "
"cocok oleh permintaan (yang mungkin tidak setara pada sejumlah baris "
"diperbaharui jika baris sudah mempunyai nilai baru). Hanya batasan pada :"
"class:`~django.db.models.query.QuerySet` sedang diperbaharui adalah itu "
"dapat hanya diakses pada tabel basisdata: tabel utama model. Anda dapat "
"menyaring pada bidang-bidang terkait, tetapi anda dapat hanya memperbaharui "
"kolom dalam tabel utama model. Contoh::"

msgid ""
"Be aware that the ``update()`` method is converted directly to an SQL "
"statement. It is a bulk operation for direct updates. It doesn't run any :"
"meth:`~django.db.models.Model.save` methods on your models, or emit the "
"``pre_save`` or ``post_save`` signals (which are a consequence of calling :"
"meth:`~django.db.models.Model.save`), or honor the :attr:`~django.db.models."
"DateField.auto_now` field option. If you want to save every item in a :class:"
"`~django.db.models.query.QuerySet` and make sure that the :meth:`~django.db."
"models.Model.save` method is called on each instance, you don't need any "
"special function to handle that. Loop over them and call :meth:`~django.db."
"models.Model.save`::"
msgstr ""

msgid ""
"Calls to update can also use :class:`F expressions <django.db.models.F>` to "
"update one field based on the value of another field in the model. This is "
"especially useful for incrementing counters based upon their current value. "
"For example, to increment the pingback count for every entry in the blog::"
msgstr ""
"Panggilan untuk memperbaharui juga menggunakan :class:`F expressions <django."
"db.models.F>` untuk memperbaharui satu bidang berdasarkan pada nilai dari "
"bidang lain dalam model. Ini adalah khususnya berguna untuk meningkatkan "
"hitungan berdasarkan pada nilai saat ini mereka. Sebagai contoh, untuk "
"menaikkan hitungan pingback untuk setiap masukan dalam blog::"

msgid ""
"However, unlike ``F()`` objects in filter and exclude clauses, you can't "
"introduce joins when you use ``F()`` objects in an update -- you can only "
"reference fields local to the model being updated. If you attempt to "
"introduce a join with an ``F()`` object, a ``FieldError`` will be raised::"
msgstr ""
"Bagaimanapun, tidak seperti obyek ``F()`` dalam penyaringan dan tidak "
"menyertakan klausa-klausa, anda tidak dapat memperkenalkan penggabungan "
"ketika anda menggunakan obyek ``F()`` dalam sebuah pembaharuan -- anda hanya "
"dapat mengacu bidang-bidang lokal ke model sedang diperbaharui. Jika anda "
"berusaha memperkenalkan penggabungan dengan sebuah obyek ``F()``, sebuah "
"``FieldError`` akan dimunculkan::"

msgid "Related objects"
msgstr "Obyek terkait"

msgid ""
"When you define a relationship in a model (i.e., a :class:`~django.db.models."
"ForeignKey`, :class:`~django.db.models.OneToOneField`, or :class:`~django.db."
"models.ManyToManyField`), instances of that model will have a convenient API "
"to access the related object(s)."
msgstr ""
"Ketika anda menentukan hubungan dalam sebuah model (yaitu, sebuah :class:"
"`~django.db.models.ForeignKey`, :class:`~django.db.models.OneToOneField`, "
"atau :class:`~django.db.models.ManyToManyField`), instance-instance dari "
"model itu akan mempunyai API cocok untuk mengakses obyek terkait."

msgid ""
"Using the models at the top of this page, for example, an ``Entry`` object "
"``e`` can get its associated ``Blog`` object by accessing the ``blog`` "
"attribute: ``e.blog``."
msgstr ""
"Menggunakan model-model diatas dari halaman ini, sebagai contoh, sebuah "
"obyek ``Entry`` ``c`` dapat mendapatkan obyek ``Blog`` berhubungan dengan "
"mengakses atribut ``blog``: ``e.blog``."

msgid ""
"(Behind the scenes, this functionality is implemented by Python :doc:"
"`descriptors <python:howto/descriptor>`. This shouldn't really matter to "
"you, but we point it out here for the curious.)"
msgstr ""

msgid ""
"Django also creates API accessors for the \"other\" side of the relationship "
"-- the link from the related model to the model that defines the "
"relationship. For example, a ``Blog`` object ``b`` has access to a list of "
"all related ``Entry`` objects via the ``entry_set`` attribute: ``b.entry_set."
"all()``."
msgstr ""
"Django juga membuat pengakses API untuk sisi \"lain\" dari hubungan -- "
"tautan dari model terkait ke model yang menentukan hubungan. Sebagai contoh, "
"obyek ``Blog`` ``b`` mempunyai akses ke daftar dari semua obyek ``Entry`` "
"terkait melalui atribut ``entry_set``: ``b.entry_set.all()``."

msgid ""
"All examples in this section use the sample ``Blog``, ``Author`` and "
"``Entry`` models defined at the top of this page."
msgstr ""
"Semua contoh dalam bagian ini menggunakan contoh model ``Blog``, ``Author`` "
"and ``Entry`` ditentukan pada atas dari halaman ini."

msgid "One-to-many relationships"
msgstr "Hubungan satu-ke-banyak"

msgid "Forward"
msgstr "Meneruskan"

msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of that "
"model will have access to the related (foreign) object via an attribute of "
"the model."
msgstr ""

msgid ""
"You can get and set via a foreign-key attribute. As you may expect, changes "
"to the foreign key aren't saved to the database until you call :meth:"
"`~django.db.models.Model.save`. Example::"
msgstr ""
"Anda daat mendapatkan dan menyetel melalui atribut foreign-key. Seperti anda "
"mungkin harapkan, perubahan pada foreign key tidak disimpan ke basisdata "
"sampai anda memanggil  :meth:`~django.db.models.Model.save`. Contoh::"

msgid ""
"If a :class:`~django.db.models.ForeignKey` field has ``null=True`` set (i."
"e., it allows ``NULL`` values), you can assign ``None`` to remove the "
"relation. Example::"
msgstr ""
"Jika sebuah bidang :class:`~django.db.models.ForeignKey` mempunyai "
"``null=True`` disetel (yaitu nilai ``NULL``), anda dapat memberikan ``None`` "
"untuk memindahkan hubungan. Contoh::"

msgid ""
"Forward access to one-to-many relationships is cached the first time the "
"related object is accessed. Subsequent accesses to the foreign key on the "
"same object instance are cached. Example::"
msgstr ""
"Akses mengirimkan ke hubungan one-to-many disimpan sementara pada kali "
"pertama obyek terkait diakses. Akses selanjutnya ke foreign key pada "
"instance obyek sama disimpan sementara. Contoh::"

msgid ""
"Note that the :meth:`~django.db.models.query.QuerySet.select_related` :class:"
"`~django.db.models.query.QuerySet` method recursively prepopulates the cache "
"of all one-to-many relationships ahead of time. Example::"
msgstr ""
"Catat bahwa :meth:`~django.db.models.query.QuerySet.select_related` metode :"
"class:`~django.db.models.query.QuerySet` berulang mengisi dimuka cache dari "
"semua hubungan one-to-many sebelumnya. Contoh::"

msgid "Following relationships \"backward\""
msgstr "Mengikuti hubungan \"\"ke belakang\""

msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of the "
"foreign-key model will have access to a :class:`~django.db.models.Manager` "
"that returns all instances of the first model. By default, this :class:"
"`~django.db.models.Manager` is named ``FOO_set``, where ``FOO`` is the "
"source model name, lowercased. This :class:`~django.db.models.Manager` "
"returns ``QuerySets``, which can be filtered and manipulated as described in "
"the \"Retrieving objects\" section above."
msgstr ""
"Jika model mempunyai :class:`~django.db.models.ForeignKey`, instance-"
"instance dari model foreign-key akan mempunyai akses ke :class:`~django.db."
"models.Manager` yang mengembalikan semua instance dari model pertama. Secara "
"awalan, :class:`~django.db.models.Manager` ini dinamai ``FOO_set``, dimana "
"``FOO`` adalah nama model sumber, huruf kecil. :class:`~django.db.models."
"Manager` ini mengembalikan ``QuerySets``, yang dapat disaring dan dirubah "
"seperti digambarkan dalam bagian \"Mengambil obyek\" diatas."

msgid ""
"You can override the ``FOO_set`` name by setting the :attr:`~django.db."
"models.ForeignKey.related_name` parameter in the :class:`~django.db.models."
"ForeignKey` definition. For example, if the ``Entry`` model was altered to "
"``blog = ForeignKey(Blog, on_delete=models.CASCADE, "
"related_name='entries')``, the above example code would look like this::"
msgstr ""
"Anda dapat menimpa nama ``FOO_set`` dengan mengatur parameter :attr:`~django."
"db.models.ForeignKey.related_name` dalam penentuan :class:`~django.db.models."
"ForeignKey` . Sebagai contoh, jika model ``Entry`` telah diubah pada ``blog "
"= ForeignKey(Blog, on_delete=models.CASCADE, related_name='entries')``, "
"contoh kode diatas akan terlihat seperti ini:: "

msgid "Using a custom reverse manager"
msgstr "Menggunakan sebuah penyesuaian pengelola membalikkan"

msgid ""
"By default the :class:`~django.db.models.fields.related.RelatedManager` used "
"for reverse relations is a subclass of the :ref:`default manager <manager-"
"names>` for that model. If you would like to specify a different manager for "
"a given query you can use the following syntax::"
msgstr ""
"Secara awalan :class:`~django.db.models.fields.related.RelatedManager` "
"digunakan untuk hubungan balikan adalah sebuah subkelas dari :ref:`default "
"manager 1` untuk model itu. Jika anda ingin menentukan pengelola berbeda "
"untuk permintaan yang diberikan anda dapat menggunakan sintaksis berikut::"

msgid ""
"If ``EntryManager`` performed default filtering in its ``get_queryset()`` "
"method, that filtering would apply to the ``all()`` call."
msgstr ""
"Jika ``EntryManager`` melakukan penyaringan awalan dalam metode "
"``get_queryset()`` nya, bahwa penyaring akan berlaku ke panggilan ``all()``."

msgid ""
"Specifying a custom reverse manager also enables you to call its custom "
"methods::"
msgstr ""

msgid "Additional methods to handle related objects"
msgstr "Cara tambahan untuk menangani obyek terkait"

msgid ""
"In addition to the :class:`~django.db.models.query.QuerySet` methods defined "
"in \"Retrieving objects\" above, the :class:`~django.db.models.ForeignKey` :"
"class:`~django.db.models.Manager` has additional methods used to handle the "
"set of related objects. A synopsis of each is below, and complete details "
"can be found in the :doc:`related objects reference </ref/models/relations>`."
msgstr ""
"Sebagai tambahan pada metode :class:`~django.db.models.query.QuerySet` "
"ditentukan dalam \"Mengambil obyek\" diatas, :class:`~django.db.models."
"ForeignKey` :class:`~django.db.models.Manager` mempunyai metode-metode "
"tambahan digunakan untuk menangangi kumpulan dari obyek-obyek terkait. "
"Sebuah ringkasan dari masing-masing dibawah, dan rincian lengkap dapat "
"ditemukan dalam :doc:`related objects reference 1`. "

msgid "``add(obj1, obj2, ...)``"
msgstr "``tambah(obj1, obj2, ...)``"

msgid "Adds the specified model objects to the related object set."
msgstr "Menambahkan obyek model ditentukan ke kumpulan obyek terkait."

msgid "``create(**kwargs)``"
msgstr "``buat(**kwargs)``"

msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object."
msgstr ""
"Membuat obyek baru, menyimpannya dan menaruhnya dalam kumpulan obyek "
"terkait. Mengembalikan obyek dibuat terbaru."

msgid "``remove(obj1, obj2, ...)``"
msgstr "``pindahkan(obj1, obj2, ...)``"

msgid "Removes the specified model objects from the related object set."
msgstr "Pindahkan obyek model ditentukan dari kumpulan obyek terkait."

msgid "``clear()``"
msgstr "``clear()``"

msgid "Removes all objects from the related object set."
msgstr "Pindahkan semua obyek dari kumpulan obyek terkait."

msgid "``set(objs)``"
msgstr "``set(objs)``"

msgid "Replace the set of related objects."
msgstr "Ganti kumpulan dari obyek terkait."

msgid ""
"To assign the members of a related set, use the ``set()`` method with an "
"iterable of object instances. For example, if ``e1`` and ``e2`` are "
"``Entry`` instances::"
msgstr ""

msgid ""
"If the ``clear()`` method is available, any pre-existing objects will be "
"removed from the ``entry_set`` before all objects in the iterable (in this "
"case, a list) are added to the set. If the ``clear()`` method is *not* "
"available, all objects in the iterable will be added without removing any "
"existing elements."
msgstr ""
"Jika metode ``clear()`` tersedia, apapun obyek pra-ada akan dipindahkan dari "
"``entry_set`` sebelum semua obyek dalam perulangan (dalam kasus ini, sebuah "
"daftar) ditambahkan ke kumpulan. Jika metode ``clear()`` *tidak* tersedia, "
"semua obyek dalam perulangan akan ditambahan tanpa memindahkan unsur-unsur "
"apapun yang ada."

msgid ""
"Each \"reverse\" operation described in this section has an immediate effect "
"on the database. Every addition, creation and deletion is immediately and "
"automatically saved to the database."
msgstr ""
"Setiap tindakan \"reverse\" digambarkan dalam bagian ini mempunyai pengaruh "
"segera pada basisdata. Setiap penambahan, pembuatan dan penghapusan segera "
"dan otomatis disimpan ke basisdata."

msgid ""
"Both ends of a many-to-many relationship get automatic API access to the "
"other end. The API works similar to a \"backward\" one-to-many relationship, "
"above."
msgstr ""

msgid ""
"One difference is in the attribute naming: The model that defines the :class:"
"`~django.db.models.ManyToManyField` uses the attribute name of that field "
"itself, whereas the \"reverse\" model uses the lowercased model name of the "
"original model, plus ``'_set'`` (just like reverse one-to-many "
"relationships)."
msgstr ""

msgid "An example makes this easier to understand::"
msgstr "Sebuah contoh membuatnya mudah untuk dipahami::"

msgid ""
"Like :class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` can specify :attr:`~django.db.models.ManyToManyField."
"related_name`. In the above example, if the :class:`~django.db.models."
"ManyToManyField` in ``Entry`` had specified ``related_name='entries'``, then "
"each ``Author`` instance would have an ``entries`` attribute instead of "
"``entry_set``."
msgstr ""
"Seeprti  :class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` dapat menentukan :attr:`~django.db.models.ManyToManyField."
"related_name`. Dalam contoh diatas, jika :class:`~django.db.models."
"ManyToManyField` di ``Entry`` telah menentukan "
"``related_name='entries'``, kemudian setiap instance ``Author`` akan "
"memiliki sebuah atribut ``entries`` daripada ``entry_set``."

msgid ""
"Another difference from one-to-many relationships is that in addition to "
"model instances,  the ``add()``, ``set()``, and ``remove()`` methods on many-"
"to-many relationships accept primary key values. For example, if ``e1`` and "
"``e2`` are ``Entry`` instances, then these ``set()`` calls work identically::"
msgstr ""

msgid ""
"One-to-one relationships are very similar to many-to-one relationships. If "
"you define a :class:`~django.db.models.OneToOneField` on your model, "
"instances of that model will have access to the related object via an "
"attribute of the model."
msgstr ""

msgid ""
"The difference comes in \"reverse\" queries. The related model in a one-to-"
"one relationship also has access to a :class:`~django.db.models.Manager` "
"object, but that :class:`~django.db.models.Manager` represents a single "
"object, rather than a collection of objects::"
msgstr ""
"Perbedaan datang dalam permintaan \"reverse\". Model terkait dalam hubungan "
"one-to-one juga mempunyai akses ke obyek :class:`~django.db.models.Manager`, "
"tetapi :class:`~django.db.models.Manager` itu mewakili obyek tunggal, "
"daripada sebuah kumpulan obyek-obyek::"

msgid ""
"If no object has been assigned to this relationship, Django will raise a "
"``DoesNotExist`` exception."
msgstr ""
"Jika tidak ada obyek diberikan ke hubungan ini, Django akan memunculkan "
"pengecualian ``DoesNotExist``."

msgid ""
"Instances can be assigned to the reverse relationship in the same way as you "
"would assign the forward relationship::"
msgstr ""
"Instance-instance dapat diberikan ke hubungan balikan dalam cara sama "
"seperti anda akan memberikan meneruskan hubungan::"

msgid "How are the backward relationships possible?"
msgstr "Bagaimana hubungan kebelakang dimungkinkan?"

msgid ""
"Other object-relational mappers require you to define relationships on both "
"sides. The Django developers believe this is a violation of the DRY (Don't "
"Repeat Yourself) principle, so Django only requires you to define the "
"relationship on one end."
msgstr ""
"Pemeta hubungan-obyek lainnya membutuhkan anda menentukan hubungan pada "
"kedua sisi. Pengembang Django percaya ini adalah pelanggaran dari prinsip "
"DRY (Don't Repeat Yourself), jadi Django hanya membutuhkan anda menentukan "
"hubungan pada satu akhiran. "

msgid ""
"But how is this possible, given that a model class doesn't know which other "
"model classes are related to it until those other model classes are loaded?"
msgstr ""
"Tetapi bagaimana ini mungkin, memberikan itu kelas model yang tidak "
"mengetahui mana kelas-kelas model lain terkait ke itu sampai kelas-kelas "
"model lain tersebut dimuat?"

msgid ""
"The answer lies in the :data:`app registry <django.apps.apps>`. When Django "
"starts, it imports each application listed in :setting:`INSTALLED_APPS`, and "
"then the ``models`` module inside each application. Whenever a new model "
"class is created, Django adds backward-relationships to any related models. "
"If the related models haven't been imported yet, Django keeps tracks of the "
"relationships and adds them when the related models eventually are imported."
msgstr ""
"Jawaban terletak di :data:`app registry <django.apps.apps>`. Ketika Django "
"mulai, itu mengimpor setiap aplikasi terdaftar di :setting:`INSTALLED_APPS`, "
"dan kemudian modul  ``models`` didalam setiap aplikasi. Kapanpun sebuah "
"kelas model dibuat, Django menambahkan hubungan-kebelakang ke setiap model "
"terkait. Jika model terkait belum diimpor, Django menjaga jalur dari "
"hubungan dan menambahkan mereka ketika model terkait akhirnya diimpor."

msgid ""
"For this reason, it's particularly important that all the models you're "
"using be defined in applications listed in :setting:`INSTALLED_APPS`. "
"Otherwise, backwards relations may not work properly."
msgstr ""
"Untuk alasan ini, itu adalah khususnya penting bahwa semua model anda sedang "
"gunakan ditentukan dalam aplikasi terdaftar dalam :setting:`INSTALLED_APPS`. "
"Sebaliknya, hubungan kebelakang mungkin tidak bekerja dengan benar."

msgid "Queries over related objects"
msgstr "Meminta terhadap obyek terkait"

msgid ""
"Queries involving related objects follow the same rules as queries involving "
"normal value fields. When specifying the value for a query to match, you may "
"use either an object instance itself, or the primary key value for the "
"object."
msgstr ""
"Permintaan melibatkan obyek-obyek terkait mengikuti aturan sama seperti "
"permintaan melibatkan bidang-bidang nilai biasa. Ketika menentukan nilai "
"untuk permintaan untuk pencocokan, anda mungkin menggunakan salah satu "
"instance obyek itu sendiri, atau nilai primary key untuk obyek."

msgid ""
"For example, if you have a Blog object ``b`` with ``id=5``, the following "
"three queries would be identical::"
msgstr ""
"Sebagai contoh, jika anda mempunyai sebuah obyek Blog ``b`` dengan ``id=5``, "
"tiga permintaan berikut akan mirip::"

msgid "Falling back to raw SQL"
msgstr "Kembali ke mentah SQL"

msgid ""
"If you find yourself needing to write an SQL query that is too complex for "
"Django's database-mapper to handle, you can fall back on writing SQL by "
"hand. Django has a couple of options for writing raw SQL queries; see :doc:`/"
"topics/db/sql`."
msgstr ""
"Jika anda menemukan anda sendiri butuh menulis permintaan SQL yang terlalu "
"rumit untuk pemetaan-basisdata Django untuk ditangani, anda dapat kembali "
"menulis SQL dengan tangan. Django mempunyai sepasang pilihan untuk menulis "
"permintaan SQL mentah; lihat :doc:`/topics/db/sql`. "

msgid ""
"Finally, it's important to note that the Django database layer is merely an "
"interface to your database. You can access your database via other tools, "
"programming languages or database frameworks; there's nothing Django-"
"specific about your database."
msgstr ""
"Akhirnya, itu penting dicatat bahwa lapisan basisdata Django hanya antarmuka "
"ke basisdata anda. Anda dapat mengakses basisdata anda melalui alat-alat "
"lain, bahasa pemrograman atau kerangka basisdata; tidak ada spesifik-Django "
"tentang basisdata anda."

msgid "Search"
msgstr "Cari"

msgid ""
"A common task for web applications is to search some data in the database "
"with user input. In a simple case, this could be filtering a list of objects "
"by a category. A more complex use case might require searching with "
"weighting, categorization, highlighting, multiple languages, and so on. This "
"document explains some of the possible use cases and the tools you can use."
msgstr ""
"Sebuah tugas umum untuk aplikasi jaringan adalah untuk mencari beberapa data "
"dalam basisdata dengan masukan pengguna. Dalam sebuah kasus sederhana, ini "
"dapat menyaring daftar dari obyek berdasarkan sebuah kategori. Kasus "
"penggunaan lebih rumit mungkin membutuhkan pencarian dengan berat, kategori, "
"penyorotan, banyak bahasa, dan seterusnya. Dokumen ini menjelaskan beberapa "
"dari kemungkinan kasus penggunaan dan alat-alat anda dapat gunakan."

msgid "We'll refer to the same models used in :doc:`/topics/db/queries`."
msgstr ""
"Kita akan mengacu model sama digunakan dalam :doc:`/topics/db/queries`."

msgid "Use Cases"
msgstr "Kasus Penggunaan"

msgid "Standard textual queries"
msgstr "Standar permintaan kata demi kata"

msgid ""
"Text-based fields have a selection of matching operations. For example, you "
"may wish to allow lookup up an author like so::"
msgstr ""

msgid ""
"This is a very fragile solution as it requires the user to know an exact "
"substring of the author's name. A better approach could be a case-"
"insensitive match (:lookup:`icontains`), but this is only marginally better."
msgstr ""
"Ini adalah pemecahan sangat rapuh ketika itu membutuhkan pengguna mengetahui "
"substring tepat dari nama penulis. Pendekatan terbaik berupa pencocokan "
"kasus-tidak-peka (:lookup:`icontains`), tetapi ini hanya sedikti lebih baik."

msgid "A database's more advanced comparison functions"
msgstr "Fungsi-fungsi perbandingan tingkat lanjut lebih banyak basisdata"

msgid ""
"If you're using PostgreSQL, Django provides :doc:`a selection of database "
"specific tools </ref/contrib/postgres/search>` to allow you to leverage more "
"complex querying options. Other databases have different selections of "
"tools, possibly via plugins or user-defined functions. Django doesn't "
"include any support for them at this time. We'll use some examples from "
"PostgreSQL to demonstrate the kind of functionality databases may have."
msgstr ""
"Jika anda sedang menggunakan PostgreSQL, Django menyediakan :doc:`a "
"selection of database specific tools 1` untuk mengizinkan anda mengungkit "
"lebih rumit pilihan permintaan. Basisdata lain mempunyai pemilihan berbeda "
"dari alat-alat, kemungkinan melalui plugin atau fungsi ditentukan-pengguna. "
"Django tidak menyertakan dukungan apapun untuk mereka pada saat ini. Kami "
"akan menggunakan beberapa contoh dari PostgreSQL untuk menunjukkan hal dari "
"kegunaan basisdata mungkin dimiliki."

msgid "Searching in other databases"
msgstr "Pencarian dalam basisdata lain"

msgid ""
"All of the searching tools provided by :mod:`django.contrib.postgres` are "
"constructed entirely on public APIs such as :doc:`custom lookups </ref/"
"models/lookups>` and :doc:`database functions </ref/models/database-"
"functions>`. Depending on your database, you should be able to construct "
"queries to allow similar APIs. If there are specific things which cannot be "
"achieved this way, please open a ticket."
msgstr ""
"Semua alat-alat pencarian disediakan oleh :mod:`django.contrib."
"postgres` dibangun seluruhnya pada API umum seperti  :doc:`custom lookups 1` "
"dan :doc:`database functions 2`. Bergantung pada basisdata anda, anda harus "
"dapat membangun permintaan untuk mengizinkan API yang mirip. Jika ada hal-"
"hal khususyang tidak dapat dicapai cara ini, harap buka sebuah tiket."

msgid ""
"In the above example, we determined that a case insensitive lookup would be "
"more useful. When dealing with non-English names, a further improvement is "
"to use :lookup:`unaccented comparison <unaccent>`::"
msgstr ""
"Dalam contoh diatas, kami menentukan bahwa pencarian kasus-tidak-peka akan "
"lebih berguna. Ketika berurusan dengan nama-nama bukan-Inggris, perbaikan "
"lebih lanjut adalah menggunakan :lookup:`unaccented comparison 1`::"

msgid ""
"This shows another issue, where we are matching against a different spelling "
"of the name. In this case we have an asymmetry though - a search for "
"``Helen`` will pick up ``Helena`` or ``Hélène``, but not the reverse. "
"Another option would be to use a :lookup:`trigram_similar` comparison, which "
"compares sequences of letters."
msgstr ""
"Ini menunjukkan masalah lain, dimana kami sedang mencocokkan terhadap "
"pengejaan berbeda dari nama. Dalam kasus ini kami mempunyai asimetris "
"sekalipun - sebuah pencarian untuk ``Helen`` akan mengambil ``Helena`` atau "
"``Hélène``, tetapi bukan kebalikannya. Pilihan lain akan menggunakan "
"perbandingan :lookup:`trigram_similar`, yang membandingkan urutan huruf. "

msgid ""
"Now we have a different problem - the longer name of \"Helena Bonham Carter"
"\" doesn't show up as it is much longer. Trigram searches consider all "
"combinations of three letters, and compares how many appear in both search "
"and source strings. For the longer name, there are more combinations that "
"don't appear in the source string, so it is no longer considered a close "
"match."
msgstr ""

msgid ""
"The correct choice of comparison functions here depends on your particular "
"data set, for example the language(s) used and the type of text being "
"searched. All of the examples we've seen are on short strings where the user "
"is likely to enter something close (by varying definitions) to the source "
"data."
msgstr ""
"Pilihan benar dari fungsi perbandingan disini tergantung pada kumpulan data "
"tertentu anda, sebagai contoh bahasa digunakan dan jenis dari teks sedang "
"diari Semua contoh-contoh kami telah lihat adalah pada string pendek dimana "
"pengguna mungkin memasukkan sesuatu mendekatkan (dengan meragamkan "
"pengertian) pada sumber data."

msgid "Document-based search"
msgstr "Pencarian berdasarkan-dokumen"

msgid ""
"Standard database operations stop being a useful approach when you start "
"considering large blocks of text. Whereas the examples above can be thought "
"of as operations on a string of characters, full text search looks at the "
"actual words. Depending on the system used, it's likely to use some of the "
"following ideas:"
msgstr ""

msgid "Ignoring \"stop words\" such as \"a\", \"the\", \"and\"."
msgstr "Mengabaikan \"kata berhenti\" seperti \"a\", \"the\", \"and\"."

msgid "Stemming words, so that \"pony\" and \"ponies\" are considered similar."
msgstr ""
"Menghentikan kata-kata, sehingga \"pony\" dan \"ponies\" dianggap sama."

msgid ""
"Weighting words based on different criteria such as how frequently they "
"appear in the text, or the importance of the fields, such as the title or "
"keywords, that they appear in."
msgstr ""
"Bobot kata-kata berdasarkan pada kriteria berbeda seperti sebagaimana sering "
"mereka muncul dalam teks, atau kepentingan dari bidang-bidang, seperti judul "
"atau katakunci, yang mereka muncul."

msgid ""
"There are many alternatives for using searching software, some of the most "
"prominent are Elastic_ and Solr_. These are full document-based search "
"solutions. To use them with data from Django models, you'll need a layer "
"which translates your data into a textual document, including back-"
"references to the database ids. When a search using the engine returns a "
"certain document, you can then look it up in the database. There are a "
"variety of third-party libraries which are designed to help with this "
"process."
msgstr ""
"Ada banyak cara lain untuk menggunakan perangkat lunak pencarian, beberapa "
"dari paling terkemuka adalah Elastic_ dan Solr_. Ini adalah pemecahan "
"pencarian berdasarkan-dokumen penuh. Untuk menggunakan mereka dengan data "
"dari model-model Django, anda akan butuh lapisan yang menterjemahkan data "
"anda kedalam dokumen tekstual, termasuk acuan-kembali ke id basisdata. "
"Ketika sebuah pencarian menggunakan mesin mengembalikan dokumen tertentu, "
"anda dapat kemudian melihat itu dalam basisdata. Ada beragam pustaka-pustaka "
"pihak-ketiga yang dirancang membantu dengan pengolahan ini."

msgid "PostgreSQL support"
msgstr "Dukungan PostgreSQL"

msgid ""
"PostgreSQL has its own full text search implementation built-in. While not "
"as powerful as some other search engines, it has the advantage of being "
"inside your database and so can easily be combined with other relational "
"queries such as categorization."
msgstr ""
"PostgreSQL mempunyai penerapan pencarian teks penuh siap pakai sendiri. "
"Selagi tidak sekuat beberapa mesin pencari lain, itu mempunyai keuntungan "
"dari menjadi didalam basisdata anda dan sehingga dapat dengan mudah "
"dipadukan dengan permintaan penghubung lain seperti kategorisasi."

msgid ""
"The :mod:`django.contrib.postgres` module provides some helpers to make "
"these queries. For example, a query might select all the blog entries which "
"mention \"cheese\"::"
msgstr ""

msgid "You can also filter on a combination of fields and on related models::"
msgstr ""
"Anda dapat juga menyaring pada perpaduan pada bidang dan pada model terkait::"

msgid ""
"See the ``contrib.postgres`` :doc:`/ref/contrib/postgres/search` document "
"for complete details."
msgstr ""
"Lihat dokumen ``contrib.postgres`` :doc:`/ref/contrib/postgres/search` untuk "
"rincian lengkap."

msgid "Performing raw SQL queries"
msgstr "Melakukan permintaan SQL mentah"

msgid ""
"Django gives you two ways of performing raw SQL queries: you can use :meth:"
"`Manager.raw()` to `perform raw queries and return model instances`__, or "
"you can avoid the model layer entirely and `execute custom SQL directly`__."
msgstr ""

msgid "Explore the ORM before using raw SQL!"
msgstr "Menjelajahi ORM sebelum menggunakan SQL mentah!"

msgid ""
"The Django ORM provides many tools to express queries without writing raw "
"SQL. For example:"
msgstr ""
"ORM Django menyediakan banyak alat-alat untuk menyatakan permintaan tanpa "
"menulis SQL mentah. Sebagai contoh:"

msgid "The :doc:`QuerySet API </ref/models/querysets>` is extensive."
msgstr ":doc:`QuerySet API </ref/models/querysets>` adalah luas."

msgid ""
"You can :meth:`annotate <.QuerySet.annotate>` and :doc:`aggregate </topics/"
"db/aggregation>` using many built-in :doc:`database functions </ref/models/"
"database-functions>`. Beyond those, you can create :doc:`custom query "
"expressions </ref/models/expressions/>`."
msgstr ""

msgid ""
"Before using raw SQL, explore :doc:`the ORM </topics/db/index>`. Ask on one "
"of :doc:`the support channels </faq/help>` to see if the ORM supports your "
"use case."
msgstr ""

msgid ""
"You should be very careful whenever you write raw SQL. Every time you use "
"it, you should properly escape any parameters that the user can control by "
"using ``params`` in order to protect against SQL injection attacks. Please "
"read more about :ref:`SQL injection protection <sql-injection-protection>`."
msgstr ""
"Anda harus berhati-hati ketika anda menulis SQL mentah. Setiap kali anda "
"menggunakan itu, anda harus dengan benar meloloskan parameter apapun yang "
"pengguna dapat mengendalikan menggunakan ``params`` untuk melindungi "
"terhadap serangan SQL injection. Harap membaca lebih tentang :ref:`SQL "
"injection protection 1`."

msgid "Performing raw queries"
msgstr "Melakukan permintaan mentah"

msgid ""
"The ``raw()`` manager method can be used to perform raw SQL queries that "
"return model instances:"
msgstr ""
"Metode pengelola ``raw()`` dapat digunakan untuk melakukan permintaan SQL "
"mentah yang mengembalikan instance model:"

msgid ""
"This method takes a raw SQL query, executes it, and returns a ``django.db."
"models.query.RawQuerySet`` instance. This ``RawQuerySet`` instance can be "
"iterated over like a normal :class:`~django.db.models.query.QuerySet` to "
"provide object instances."
msgstr ""

msgid ""
"This is best illustrated with an example. Suppose you have the following "
"model::"
msgstr ""
"Ini adalah terbaik digambarkan dengan sebuah contoh. Kiranya anda mempunyai "
"model berikut::"

msgid "You could then execute custom SQL like so::"
msgstr "Anda dapat kemudian menjalankan SQL penyesuaian seperti itu::"

msgid ""
"This example isn't very exciting -- it's exactly the same as running "
"``Person.objects.all()``. However, ``raw()`` has a bunch of other options "
"that make it very powerful."
msgstr ""

msgid "Model table names"
msgstr "Nama tabel model"

msgid "Where did the name of the ``Person`` table come from in that example?"
msgstr "Dimana nama dari tabel ``Person`` datang dalam contoh itu?"

msgid ""
"By default, Django figures out a database table name by joining the model's "
"\"app label\" -- the name you used in ``manage.py startapp`` -- to the "
"model's class name, with an underscore between them. In the example we've "
"assumed that the ``Person`` model lives in an app named ``myapp``, so its "
"table would be ``myapp_person``."
msgstr ""
"Secara awalan, Django mencari tahu nama tabel basisdata dengan menggabungkan "
"\"app label\" model -- nama anda gunakan dalam ``manage.py startapp`` -- "
"pada nama kelas model, dengan sebuah garis bawah diantara mereka. Dalam "
"contoh kami telah menganggap bahwa model ``Person`` tinggal dalam sebuah "
"aplikasi bernama ``myapp``, jadi tabelnya akan berupa ``myapp_person``."

msgid ""
"For more details check out the documentation for the :attr:`~Options."
"db_table` option, which also lets you manually set the database table name."
msgstr ""
"Untuk rincian lebih periksa dokumentasi untuk pilihan :attr:`~Options."
"db_table`, yang juga membiarkan anda secara manual menyetel nama tabel "
"basisdata."

msgid ""
"No checking is done on the SQL statement that is passed in to ``.raw()``. "
"Django expects that the statement will return a set of rows from the "
"database, but does nothing to enforce that. If the query does not return "
"rows, a (possibly cryptic) error will result."
msgstr ""
"Tidak ada pemeriksaan selesai pada pernyataan SQL yang dilewatkan ke ``."
"raw()``. Django mengharapkan pernyataan itu akan mengembalikan sekumpulan "
"baris dari basisdata, tetapi tidak melakukan apapun untuk memaksa itu. Jika "
"permintaan tidak mengembalikan baris, sebuah (kemungkinan samar) kesalahan "
"akan menghasilkan."

msgid ""
"If you are performing queries on MySQL, note that MySQL's silent type "
"coercion may cause unexpected results when mixing types. If you query on a "
"string type column, but with an integer value, MySQL will coerce the types "
"of all values in the table to an integer before performing the comparison. "
"For example, if your table contains the values ``'abc'``, ``'def'`` and you "
"query for ``WHERE mycolumn=0``, both rows will match. To prevent this, "
"perform the correct typecasting before using the value in a query."
msgstr ""
"Jika anda sedang melakukan permintaan pada MySQL, catat bahwa paksaan jenis "
"diam MySQL mungkin menyebabkan hasil tidak diharapkan ketika mencampur "
"jenis. Jika anda meminta pada sebuah kolom jenis string, tetapi dengan "
"sebuah nilai integer, MySQL akan memaksa jenis-jenis dari semua nilai dalam "
"tabel ke integer sebelum melakukan perbandingan. Sebagai contoh, jika tabel "
"anda mengandung nilai-nilai ``'abc'``, ``'def'`` dan anda meminta untuk "
"``WHERE mycolumn=0``, kedua baris akan cocok. Untuk mencegah ini, lakukan "
"pembenaran typecast sebelum menggunakan nilai dalam sebuah permintaan."

msgid ""
"The default value of the ``params`` argument was changed from ``None`` to an "
"empty tuple."
msgstr ""

msgid "Mapping query fields to model fields"
msgstr "Memetakan bidang permintaan ke bidang model"

msgid ""
"``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""
"``raw()`` secara otomatis memetakan bidang-bidang dalam permintaan ke bidang "
"pada model."

msgid ""
"The order of fields in your query doesn't matter. In other words, both of "
"the following queries work identically::"
msgstr ""
"Urutan dari bidang-bidang daam permintaan anda tidak masalah. Dengan kata "
"lain, kedua dari permintaan berikut bekerja mirip::"

msgid ""
"Matching is done by name. This means that you can use SQL's ``AS`` clauses "
"to map fields in the query to model fields. So if you had some other table "
"that had ``Person`` data in it, you could easily map it into ``Person`` "
"instances::"
msgstr ""
"Pencocokan selesai berdasarkan nama. Ini berarti bahwa anda dapat "
"menggunakan klausa ``AS`` SQL untuk memetakan bidang-bidang dalam permintaan "
"ke bidang-bidang model. Jadi jika anda mempunyai beberapa tabel lain yang "
"mempunyai data ``Person`` dalam nya, anda dapat dengan mudah memetakan itu "
"menjadi instance ``Person``::"

msgid ""
"As long as the names match, the model instances will be created correctly."
msgstr "Selama nama-nama cocok, instance model akan dibuat dengan benar."

msgid ""
"Alternatively, you can map fields in the query to model fields using the "
"``translations`` argument to ``raw()``. This is a dictionary mapping names "
"of fields in the query to names of fields on the model. For example, the "
"above query could also be written::"
msgstr ""
"Kalau tidak, anda dapat memetakan bidang-bidang dalam permintaan ke bidang-"
"bidang model menggunakan argumen ``translations`` pada ``raw()``. Ini adalah "
"nama-nama pemetaan dictionary dalam permintaan pada nama-nama dari bidang "
"pada model. Sebagai contoh, permintaan diatas dapat juga ditulis::"

msgid "Index lookups"
msgstr "Pencarian indeks"

msgid ""
"``raw()`` supports indexing, so if you need only the first result you can "
"write::"
msgstr ""
"``raw()`` mendukung pengindeksan, jadi jika anda butuh hanya hasil pertama "
"anda dapat menulis::"

msgid ""
"However, the indexing and slicing are not performed at the database level. "
"If you have a large number of ``Person`` objects in your database, it is "
"more efficient to limit the query at the SQL level::"
msgstr ""
"Bagaimanapun, pengindeksan dan pemotongan tidak dilakukan pada tingkat "
"basisdata. Jika anda mempunyai sejumlah besar obyek ``Person`` dalam "
"basisdata anda, itu lebih efesien membatasi permintaan pada tingkat SQL::"

msgid "Deferring model fields"
msgstr "Menangguhkan bidang-bidang model"

msgid "Fields may also be left out::"
msgstr "Bidang-bidang mungkin juga ditiadakan::"

msgid ""
"The ``Person`` objects returned by this query will be deferred model "
"instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means "
"that the fields that are omitted from the query will be loaded on demand. "
"For example::"
msgstr ""
"Obyek ``Person`` dikembalikan oleh permintaan ini akan meniadakan instance-"
"instance model (lihat :meth:`~django.db.models.query.QuerySet.defer()`). Ini "
"berarti bahwa bidang-bidang yang dihilangkan dari permintaan akan dimuat "
"pada permintaan. Sebagai contoh::"

msgid ""
"From outward appearances, this looks like the query has retrieved both the "
"first name and last name. However, this example actually issued 3 queries. "
"Only the first names were retrieved by the raw() query -- the last names "
"were both retrieved on demand when they were printed."
msgstr ""
"Dari penampilan luar, ini terlihat seperti permintaan telah mengambil kedua "
"nama pertama dan nama terakhir. Bagaimanapun, contoh ini sebenarnya "
"menerbitkan 3 permintaan. Hanya nama pertama yang diambil oleh permintaan "
"raw() -- nama terakhir keduanya diambil pada permintaan mereka telah cetak."

msgid ""
"There is only one field that you can't leave out - the primary key field. "
"Django uses the primary key to identify model instances, so it must always "
"be included in a raw query. A :class:`~django.core.exceptions."
"FieldDoesNotExist` exception will be raised if you forget to include the "
"primary key."
msgstr ""

msgid "Adding annotations"
msgstr "Menambahkan keterangan"

msgid ""
"You can also execute queries containing fields that aren't defined on the "
"model. For example, we could use `PostgreSQL's age() function`__ to get a "
"list of people with their ages calculated by the database::"
msgstr ""
"Anda dapat juga menjalankan permintaan mengandung bidang-bidang yang tidak "
"ditentukan pada model. Sebagai contoh, kami dapat menggunakan  `PostgreSQL's "
"age() function`__ untuk mendapatkan daftar orang dengan umur mereka dihitung "
"oleh basisdata::"

msgid ""
"You can often avoid using raw SQL to compute annotations by instead using a :"
"ref:`Func() expression <func-expressions>`."
msgstr ""
"Anda dapat sering menghindari penggunaan SQL mentah untuk menghitung "
"penjelasan dengan menggunakan :ref:`Func() expression <func-expressions>`."

msgid "Passing parameters into ``raw()``"
msgstr "Melewati parameter kedalam ``raw()``"

msgid ""
"If you need to perform parameterized queries, you can use the ``params`` "
"argument to ``raw()``::"
msgstr ""
"Jika anda butuh melakukan permintaan gambaran parameter, anda dapat "
"menggunakan argumen ``params`` pada ``raw()``::"

msgid ""
"``params`` is a list or dictionary of parameters. You'll use ``%s`` "
"placeholders in the query string for a list, or ``%(key)s`` placeholders for "
"a dictionary (where ``key`` is replaced by a dictionary key), regardless of "
"your database engine. Such placeholders will be replaced with parameters "
"from the ``params`` argument."
msgstr ""

msgid ""
"Dictionary params are not supported with the SQLite backend; with this "
"backend, you must pass parameters as a list."
msgstr ""
"Parameter dictionary tidak didukung dengan backend SQLite; dengan backend "
"ini, anda harus melewatkan parameter sebagai sebuah list."

msgid ""
"**Do not use string formatting on raw queries or quote placeholders in your "
"SQL strings!**"
msgstr ""
"**Jangan menggunakan string berbentuk pada permintaan mentah atau mengutip "
"placeholder dalam string-string SQL anda !**"

msgid "It's tempting to write the above query as::"
msgstr "Itu sangat menggoda menulis permintaan diatas sebagai::"

msgid ""
"You might also think you should write your query like this (with quotes "
"around ``%s``)::"
msgstr ""
"Anda mungkin juga berpikir anda harus menulis permintaan anda seperti ini "
"(dengan kutipan disekitar ``%s``)::"

msgid "**Don't make either of these mistakes.**"
msgstr "**Jangan membuat salah satu dari kesalahan-kesalahan ini.**"

msgid ""
"As discussed in :ref:`sql-injection-protection`, using the ``params`` "
"argument and leaving the placeholders unquoted protects you from `SQL "
"injection attacks`__, a common exploit where attackers inject arbitrary SQL "
"into your database. If you use string interpolation or quote the "
"placeholder, you're at risk for SQL injection."
msgstr ""
"Seperti diobrolkan dalam :ref:`sql-injection-protection`, menggunakan "
"argumen ``params`` dan membiarkan placeholder tidak dikutip melindungi anda "
"dari `SQL injection attacks`__, pemanfaatan umum dimana penyerang memasukkan "
"SQL berubah-ubah kedalam basisdata anda. Jika adan menggunakan penyisipan "
"string atau mengutip placeholder, anda sedang pada resiko untuk penyisipan "
"SQL."

msgid "Executing custom SQL directly"
msgstr "Menjalankan penyesuaian SQL langsung"

msgid ""
"Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to "
"perform queries that don't map cleanly to models, or directly execute "
"``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""
"Terkadang bahkan :meth:`Manager.raw` tidak cukup: anda mungkin butuh "
"melakukan permintaan yang tidak memetakan dengan bersih pada model, atau "
"langsung menjalankan permintaan ``UPDATE``, ``INSERT``, atau ``DELETE``. "

msgid ""
"In these cases, you can always access the database directly, routing around "
"the model layer entirely."
msgstr ""
"Dalam kasus-kasus ini, anda dapat selalu mengakses basisdata secara "
"langsung, fungsi disekitar lapisan model sepenuhnya."

msgid ""
"The object ``django.db.connection`` represents the default database "
"connection. To use the database connection, call ``connection.cursor()`` to "
"get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute "
"the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the "
"resulting rows."
msgstr ""
"Obyek ``django.db.connection`` mewakili hubungan basisdata awalan. Untuk "
"menggunakan hubungan basisdata, panggil ``connection.cursor()`` untuk "
"mendapatkan obyek kursor. Kemudian, panggil ``cursor.execute(sql, "
"[params])`` untuk menjalankan SQL dan ``cursor.fetchone()`` atau ``cursor."
"fetchall()`` untuk mengembalikan baris hasil. "

msgid ""
"To protect against SQL injection, you must not include quotes around the ``"
"%s`` placeholders in the SQL string."
msgstr ""
"Untuk melindungi terhadap penyuntikan SQL, anda tidak harus menyertakan "
"kutipan disekitar placeholder ``%s`` dalam string SQL."

msgid ""
"Note that if you want to include literal percent signs in the query, you "
"have to double them in the case you are passing parameters::"
msgstr ""
"Catat bahwa jika anda ingin menyertakan harfiah tanda persen dalam "
"permintaan, anda telah menggandakan mereka dalam kasus anda sedang "
"melewatkan parameter::"

msgid ""
"If you are using :doc:`more than one database </topics/db/multi-db>`, you "
"can use ``django.db.connections`` to obtain the connection (and cursor) for "
"a specific database. ``django.db.connections`` is a dictionary-like object "
"that allows you to retrieve a specific connection using its alias::"
msgstr ""
"Jika anda sedang menggunakan :doc:`more than one database 1`, anda dapat "
"menggunakan ``django.db.connections`` untuk mengambil hubungan (dan kursor ) "
"untuk basisdata khusus. ``django.db.connections`` adalah obyek seperti-"
"dictionary yang mengizinkan anda mengambil hubungan khusus menggunakan nama "
"lainnya::"

msgid ""
"By default, the Python DB API will return results without their field names, "
"which means you end up with a ``list`` of values, rather than a ``dict``. At "
"a small performance and memory cost, you can return results as a ``dict`` by "
"using something like this::"
msgstr ""
"Secara awalan, API DB Python akan mengembalikan hasil tanpa nama-nama bidang "
"mereka, yang berarti anda jadi ``list`` dari nilai, daripada ``dict``. Pada "
"penampilan kecil dan biaya memori, anda dapat mengembalikan hasil sebagai "
"``dict`` dengan menggunakan sesuatu seperti ini::"

msgid ""
"Another option is to use :func:`collections.namedtuple` from the Python "
"standard library. A ``namedtuple`` is a tuple-like object that has fields "
"accessible by attribute lookup; it's also indexable and iterable. Results "
"are immutable and accessible by field names or indices, which might be "
"useful::"
msgstr ""
"Pilihan lain adalah menggunakan :func:`collections.namedtuple` dari pustaka "
"standar Python. Sebuah ``namedtuple`` adalah obyek seperti-tuple yang "
"mempunyai bidang-bidang diakses oleh atribut pencarian; itu juga dapat "
"diindeks dan berulang. Hasilnya adalah tetap dan dapat diakses oleh bidang "
"nama atau indeks, yang mungkin berguna::"

msgid "Here is an example of the difference between the three::"
msgstr "Ini adalah sebuah contoh perbedaan diantara tiga::"

msgid "Connections and cursors"
msgstr "Hubungan dan kursor"

msgid ""
"``connection`` and ``cursor`` mostly implement the standard Python DB-API "
"described in :pep:`249` — except when it comes to :doc:`transaction handling "
"</topics/db/transactions>`."
msgstr ""
"``connection`` dan ``cursor`` kebanyakan menerapkan API-DB Python standar "
"digambarkan dalam pep:`249` — kecuali ketika itu datang pada :doc:"
"`transaction handling 1`."

msgid ""
"If you're not familiar with the Python DB-API, note that the SQL statement "
"in ``cursor.execute()`` uses placeholders, ``\"%s\"``, rather than adding "
"parameters directly within the SQL. If you use this technique, the "
"underlying database library will automatically escape your parameters as "
"necessary."
msgstr ""
"Jika anda akrab dengan DB-API Python, catat bahwa pernyataan SQL dalam "
"``cursor.execute()`` menggunakan placeholder, ``\"%s\"``, daripada "
"menambahkan parameter langsung dalam SQL. Jika anda menggunakan teknik ini, "
"pustaka basisdata pokok akan otomatis meloloskan parameter anda seperlunya. "

msgid ""
"Also note that Django expects the ``\"%s\"`` placeholder, *not* the ``\"?"
"\"`` placeholder, which is used by the SQLite Python bindings. This is for "
"the sake of consistency and sanity."
msgstr ""
"Juga catat bahwa Django mengharapkan placeholder ``\"%s\"``, *bukan* "
"placeholder ``\"?\"``, yang digunakan oleh pengikatan Python SQLite. Ini "
"adalah untuk kebaikan dari ketetapan dan kesegaran."

msgid "Using a cursor as a context manager::"
msgstr "Menggunakan sebuah kursor sebagai pengelola konteks::"

msgid "is equivalent to::"
msgstr "setara pada::"

msgid "Calling stored procedures"
msgstr "Memanggil prosedur penyimpanan"

msgid ""
"Calls a database stored procedure with the given name. A sequence "
"(``params``) or dictionary (``kparams``) of input parameters may be "
"provided. Most databases don't support ``kparams``. Of Django's built-in "
"backends, only Oracle supports it."
msgstr ""
"Panggilan sebuah store procedure dengan nama diberikan. Sebuah urutan "
"(``params``) atau dictionary (``kparams``) dari parameter masukan mungkin "
"disediakan. Kebanyakan basisdata tidak mendukung ``kparams``. Dari backend "
"siap-pakai Django, hanya Oracle mendukung itu."

msgid "For example, given this stored procedure in an Oracle database:"
msgstr ""
"Sebagai contoh, diberikan ini prosedur penyimpanan dalam sebuah basisdata "
"Oracle:"

msgid "This will call it::"
msgstr "Ini akan memanggil itu::"

msgid "Tablespaces"
msgstr "Tablespaces"

msgid ""
"A common paradigm for optimizing performance in database systems is the use "
"of `tablespaces`_ to organize disk layout."
msgstr ""
"Contoh umum untuk mengoptimalkan penampilan dalam sistem basisdata adalah "
"menggunakan `tablespaces`_ untuk mengorganisir tata letak cakram."

msgid ""
"Django does not create the tablespaces for you. Please refer to your "
"database engine's documentation for details on creating and managing "
"tablespaces."
msgstr ""
"Django tidak membuat tablespace untuk anda. Silahkan mengacu ke dokumentasi "
"mesis basisdata anda untuk rincian di membuat dan mengelola tablespace."

msgid "Declaring tablespaces for tables"
msgstr "Mengumumkan tablespace untuk table"

msgid ""
"A tablespace can be specified for the table generated by a model by "
"supplying the :attr:`~django.db.models.Options.db_tablespace` option inside "
"the model's ``class Meta``. This option also affects tables automatically "
"created for :class:`~django.db.models.ManyToManyField`\\ s in the model."
msgstr ""
"Sebuah tablespace dapat ditentukan untuk tabel dibangkitkan oleh model "
"dengan menyokong pilihan :attr:`~django.db.models.Options.db_tablespace` "
"didalam ``class Meta`` model. Pilihan ini juga mempengaruhi tabel-tabel "
"otomatis dibuat untuk :class:`~django.db.models.ManyToManyField` dalam "
"model. "

msgid ""
"You can use the :setting:`DEFAULT_TABLESPACE` setting to specify a default "
"value for :attr:`~django.db.models.Options.db_tablespace`. This is useful "
"for setting a tablespace for the built-in Django apps and other applications "
"whose code you cannot control."
msgstr ""
"Anda dapat menggunakan pengaturan :setting:`DEFAULT_TABLESPACE` untuk "
"menentukan nilai untuk :attr:`~django.db.models.Options.db_tablespace`. Ini "
"berguna untuk mengatur tablespace untuk aplikasi Django siap-pakai dan "
"aplikasi lain yang kodenya tidak dapat dikendalikan."

msgid "Declaring tablespaces for indexes"
msgstr "Mengumumkan tablespace untuk indeks"

msgid ""
"You can pass the :attr:`~django.db.models.Index.db_tablespace` option to an "
"``Index`` constructor to specify the name of a tablespace to use for the "
"index. For single field indexes, you can pass the :attr:`~django.db.models."
"Field.db_tablespace` option to a ``Field`` constructor to specify an "
"alternate tablespace for the field's column index. If the column doesn't "
"have an index, the option is ignored."
msgstr ""
"Anda dapat melewatkan pilihan :attr:`~django.db.models.Index."
"db_tablespace` ke sebuah pembangun ``Index`` untuk menentukan nama dari "
"tablespace untuk digunakan untuk indeks. Untuk pengindeksan bidang tunggal, "
"anda dapat melewatkan pilihan :attr:`~django.db.models.Field.db_tablespace` "
"ke sebuah pembangun ``Field`` untuk menentukan sebuah tablespace lain untuk "
"indeks kolom bidang. Jika kolom tidak memiliki sebuah indeks, pilihan "
"diabaikan."

msgid ""
"You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify a "
"default value for :attr:`~django.db.models.Field.db_tablespace`."
msgstr ""
"Anda dapat menggunakan pengaturan :setting:`DEFAULT_INDEX_TABLESPACE` untuk "
"menentukan nilai awalan untuk :attr:`~django.db.models.Field.db_tablespace`."

msgid ""
"If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you "
"didn't set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the "
"same tablespace as the tables."
msgstr ""
"Jika :attr:`~django.db.models.Field.db_tablespace` tidak ditentukan dan anda "
"tidak menyetel :setting:`DEFAULT_INDEX_TABLESPACE`, indeks dibuat dalam "
"tablespace sama seperti tabel-tabel."

msgid ""
"In this example, the tables generated by the ``TablespaceExample`` model (i."
"e. the model table and the many-to-many table) would be stored in the "
"``tables`` tablespace. The index for the name field and the indexes on the "
"many-to-many table would be stored in the ``indexes`` tablespace. The "
"``data`` field would also generate an index, but no tablespace for it is "
"specified, so it would be stored in the model tablespace ``tables`` by "
"default. The index for the ``shortcut`` field would be stored in the "
"``other_indexes`` tablespace."
msgstr ""
"Dalam contoh ini, tabel-tabel dibangkitkan oleh model ``TablespaceExample`` "
"(yaitu tabel model dan tabel many-to-many) akan disimpan dalam tablespace "
"``tables``. Indeks untuk bidang nama dan indeks-indeks pada tabel many-to-"
"many akan disimpan dalam tablespace ``indexes``. Bidang ``data`` akan juga "
"dibangkitkan dalam tablespace model ``tables`` secara awalan. Indeks untuk "
"bidang ``shortcut`` akan disimpan dalam tablespace ``other_indexes``."

msgid "Database support"
msgstr "Dukungan basisdata"

msgid ""
"PostgreSQL and Oracle support tablespaces. SQLite, MariaDB and MySQL don't."
msgstr ""
"PostgreSQL dan Oracle mendukung tablespaces. SQLite, MariaDB dan MySQL tidak."

msgid ""
"When you use a backend that lacks support for tablespaces, Django ignores "
"all tablespace-related options."
msgstr ""
"Ketika anda menggunakan backend yang kekurangan dukungan untuk tablespace, "
"Django mengabaikan semua pilihan terkait-tablespace."

msgid "Database transactions"
msgstr "Transaksi basisdata"

msgid ""
"Django gives you a few ways to control how database transactions are managed."
msgstr ""
"Django memberikan anda sedikit cara mengendalikan bagaimana transaksi "
"basisdata dikelola."

msgid "Managing database transactions"
msgstr "Mengelola transaksi basisdata"

msgid "Django's default transaction behavior"
msgstr "Kebiasaan transaksi awal Django"

msgid ""
"Django's default behavior is to run in autocommit mode. Each query is "
"immediately committed to the database, unless a transaction is active. :ref:"
"`See below for details <autocommit-details>`."
msgstr ""
"Kebiasaan awal Django adalah menjalankan suasana penyeraahn otomatis. Setiap "
"query segera diserahkan ke basisdata, meskipun transaksi adalah aktif. :ref:"
"`Lihat dibawah ini untuk rincian <autocommit-details>`."

msgid ""
"Django uses transactions or savepoints automatically to guarantee the "
"integrity of ORM operations that require multiple queries, especially :ref:"
"`delete() <topics-db-queries-delete>` and :ref:`update() <topics-db-queries-"
"update>` queries."
msgstr ""
"Django menggunakan transaksi atau titiksimpan otomatis untuk menjamin "
"kesatuan dari operasi ORM yang membutuhkan banyak query, khususnya query :"
"ref:`delete() <topics-db-queries-delete>` dan :ref:`update() <topics-db-"
"queries-update>`."

msgid ""
"Django's :class:`~django.test.TestCase` class also wraps each test in a "
"transaction for performance reasons."
msgstr ""
"Kelas :class:`~django.test.TestCase` Django juga membungkus setiap percobaan "
"dalam sebuah transaksi untuk alasan penampilan."

msgid "Tying transactions to HTTP requests"
msgstr "Mengikat transaksi pada permintaan HTTP"

msgid ""
"A common way to handle transactions on the web is to wrap each request in a "
"transaction. Set :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` to "
"``True`` in the configuration of each database for which you want to enable "
"this behavior."
msgstr ""
"Cara umum untuk menangani transaksi di jaringan adalah membungkus setiap "
"permintaan di transaksi. Setel :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` ke ``True`` di konfigurasi dari setiap basisdata untuk "
"anda ingin adakan kebiasaan ini."

msgid ""
"It works like this. Before calling a view function, Django starts a "
"transaction. If the response is produced without problems, Django commits "
"the transaction. If the view produces an exception, Django rolls back the "
"transaction."
msgstr ""
"Itu bekerja seperti ini. Sebelum memanggil fungsi tampilan, Django memulai "
"sebuah transaksi. Jika tanggapan adalah dihasilkan tanpa masalah, Django "
"melakukan transaksi. Jika tampilan menghasilkan sebuah pengecualian, Django "
"memutar kembali transaksi."

msgid ""
"You may perform subtransactions using savepoints in your view code, "
"typically with the :func:`atomic` context manager. However, at the end of "
"the view, either all or none of the changes will be committed."
msgstr ""
"Anda dapat melakukan subtransaksi menggunakan savepoint dalam kode tampilan "
"anda. khususnya dengan pengelola konteks :func:`atomic`. Bagaimanapun, pada "
"akhir tampilan, baik semua tau tidak satupun perubahan akan di jalankan."

msgid ""
"While the simplicity of this transaction model is appealing, it also makes "
"it inefficient when traffic increases. Opening a transaction for every view "
"has some overhead. The impact on performance depends on the query patterns "
"of your application and on how well your database handles locking."
msgstr ""
"Selagi kesederhanaan dari model transaksi ini menarik, itu juga membuat itu "
"tidak efesien ketika lalu lintas menarik. Membuka sebuah transaksi untuk "
"setiap tampilan dan beberapa overhead. Dampak pada penampilan bergantingan "
"pada pola permintaan dari aplikasi anda dan pada sebagaimana baik penanganan "
"basisdata anda mengunci."

msgid "Per-request transactions and streaming responses"
msgstr "Transaksi per-permintaan dan mengalirkan tanggapan"

msgid ""
"When a view returns a :class:`~django.http.StreamingHttpResponse`, reading "
"the contents of the response will often execute code to generate the "
"content. Since the view has already returned, such code runs outside of the "
"transaction."
msgstr ""
"Ketika tampilan mengembalikan sebuah :class:`~django.http."
"StreamingHttpResponse`, membaca isi dari tanggapan akan sering menjalankan "
"kode untuk membangkitkan isi. Sejak tampilan telah dikembalikan, kode "
"seperti itu berjalan diluar transaksi."

msgid ""
"Generally speaking, it isn't advisable to write to the database while "
"generating a streaming response, since there's no sensible way to handle "
"errors after starting to send the response."
msgstr ""
"Secara umum, itu tidak disarankan menulis ke basisdata selagi membangkitkan "
"aliran tanggapan, sejak tidak ada cara sepaham menangani kesalahan setelah "
"mulai mengirim tanggapan."

msgid ""
"In practice, this feature wraps every view function in the :func:`atomic` "
"decorator described below."
msgstr ""
"Dalam praktiknya, fitur ini membungkus setiap fungsi tampilan dalam :func:"
"`atomic` penghias digambarkan dibawah."

msgid ""
"Note that only the execution of your view is enclosed in the transactions. "
"Middleware runs outside of the transaction, and so does the rendering of "
"template responses."
msgstr ""
"Catat bahwa hanya penjalanan dari tampilan anda terlampir dalam transaksi, "
"Middleware berjalan diluar transaksi, dan begitu juga membangun tanggapan-"
"tanggapan cetakan."

msgid ""
"When :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` is enabled, it's "
"still possible to prevent views from running in a transaction."
msgstr ""
"Ketika :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` diadakan, itu "
"masih memungkinkan mencegah tampilan dari berjalan dalam sebuah transaksi."

msgid ""
"This decorator will negate the effect of :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` for a given view::"
msgstr ""
"Penghias ini akan meniadakan pengaruh dari :setting:`ATOMIC_REQUESTS "
"<DATABASE-ATOMIC_REQUESTS>` untuk tampilan yang diberikan::"

msgid "It only works if it's applied to the view itself."
msgstr "Itu hanya bekerja jika itu diberlakukan ke tampilan itu sendiri."

msgid "Controlling transactions explicitly"
msgstr "Mengendalikan transaksi secara eksplisit"

msgid "Django provides a single API to control database transactions."
msgstr ""
"Django menyediakan API tunggal untuk mengendalikan transaksi basisdata."

msgid ""
"Atomicity is the defining property of database transactions. ``atomic`` "
"allows us to create a block of code within which the atomicity on the "
"database is guaranteed. If the block of code is successfully completed, the "
"changes are committed to the database. If there is an exception, the changes "
"are rolled back."
msgstr ""
"Atomicity adalah penentuan sifat dari transaksi basisdata. ``atomic`` "
"mengizinkan kamu membuat blok dari kode dalam yang atomicity pada basisdata "
"dijaminkan. Jika blok dari kode berhasil lengkap, perubahan di perlakukan ke "
"basisdata. Jika ada sebuah pengecualian, perubahan diputar kembali."

msgid ""
"``atomic`` blocks can be nested. In this case, when an inner block completes "
"successfully, its effects can still be rolled back if an exception is raised "
"in the outer block at a later point."
msgstr ""
"Blok ``atomic`` dapat bersarang. Dalam kasus ini, ketika sebuah blok sebelah "
"dalam berhasil terpenuhi, pengaruhnya dapat masih di rollback jika sebuah "
"pengecualian dimunculkan di blok sebelah luar pada titik kemudian."

msgid ""
"It is sometimes useful to ensure an ``atomic`` block is always the outermost "
"``atomic`` block, ensuring that any database changes are committed when the "
"block is exited without errors. This is known as durability and can be "
"achieved by setting ``durable=True``. If the ``atomic`` block is nested "
"within another it raises a ``RuntimeError``."
msgstr ""

msgid "``atomic`` is usable both as a :py:term:`decorator`::"
msgstr "``atomic`` berguna baik sebagai  :py:term:`decorator`::"

msgid "and as a :py:term:`context manager`::"
msgstr "dan sebagai :py:term:`context manager`::"

msgid ""
"Wrapping ``atomic`` in a try/except block allows for natural handling of "
"integrity errors::"
msgstr ""
"Membungkus ``atomic`` dalam sebuah blok try/except mengizinkan untuk "
"penanganan alami dari kesalahan keutuhan::"

msgid ""
"In this example, even if ``generate_relationships()`` causes a database "
"error by breaking an integrity constraint, you can execute queries in "
"``add_children()``, and the changes from ``create_parent()`` are still there "
"and bound to the same transaction. Note that any operations attempted in "
"``generate_relationships()`` will already have been rolled back safely when "
"``handle_exception()`` is called, so the exception handler can also operate "
"on the database if necessary."
msgstr ""

msgid "Avoid catching exceptions inside ``atomic``!"
msgstr "Menghindari menangkap pengecualian didalam ``atomic``!"

msgid ""
"When exiting an ``atomic`` block, Django looks at whether it's exited "
"normally or with an exception to determine whether to commit or roll back. "
"If you catch and handle exceptions inside an ``atomic`` block, you may hide "
"from Django the fact that a problem has happened. This can result in "
"unexpected behavior."
msgstr ""
"Ketika mengeluarkan sebuah blok ``atomic``, Django mencari apakah itu keluar "
"secara biasa atau dengan sebuah pengecualian untuk menentukan apakah "
"memperlakukan atau memutar kembali. Jika anda menangkap dan menangani "
"pengecualian didalam blok ``atomic``, anda mungkin bersembunyi dari Django "
"kenyataan bahwa masalah telah terjadi. Ini dapat menghasilkan perilaku tidak "
"diharapkan."

msgid ""
"This is mostly a concern for :exc:`~django.db.DatabaseError` and its "
"subclasses such as :exc:`~django.db.IntegrityError`. After such an error, "
"the transaction is broken and Django will perform a rollback at the end of "
"the ``atomic`` block. If you attempt to run database queries before the "
"rollback happens, Django will raise a :class:`~django.db.transaction."
"TransactionManagementError`. You may also encounter this behavior when an "
"ORM-related signal handler raises an exception."
msgstr ""
"Ini kebanyakan perhatian untuk :exc:`~django.db.DatabaseError` dan subkelas-"
"subkelas nya seperti :exc:`~django.db.IntegrityError`. Setelah kesalahan "
"tersebut, transaksi rusak dan Django akan melakukan memutar kembali pada "
"akhir dari blok ``atomic``. Jika anda berusaha menjalankan permintaan "
"basisdata sebalum memutar kembali terjadi, Django akan memunculkan sebuah :"
"class:`~django.db.transaction.TransactionManagementError`. Anda mungkin juga "
"menghadapi perilaku ini ketika sinyal terkait-ORM memunculkan sebuah "
"pengecualian."

msgid ""
"The correct way to catch database errors is around an ``atomic`` block as "
"shown above. If necessary, add an extra ``atomic`` block for this purpose. "
"This pattern has another advantage: it delimits explicitly which operations "
"will be rolled back if an exception occurs."
msgstr ""
"Cara benar untuk menangkap kesalahan-kesalahan basisdata disekitar sebuah "
"blok ``atomic`` seperti ditunjukkan diatas. Jika dibutuhkan, tambah sebuah "
"blok ``atomic`` tambahan untuk tujuan ini. Pola ini mempunyai keuntungan "
"lain: itu membatasi jelas tindakan-tindakan maan akan diputar kembali jika "
"sebuah pengecualian muncul."

msgid ""
"If you catch exceptions raised by raw SQL queries, Django's behavior is "
"unspecified and database-dependent."
msgstr ""
"Jika anda menangkap pengecualian dimunculkan oleh permintaan SQL mentah, "
"perilaku Django tidak ditentukan dan tergantung-basisdata."

msgid ""
"You may need to manually revert model state when rolling back a transaction."
msgstr ""
"Anda mungkin butuh secara manual merubah keadaan model ketika memutar "
"kembali sebuah transaksi."

msgid ""
"The values of a model's fields won't be reverted when a transaction rollback "
"happens. This could lead to an inconsistent model state unless you manually "
"restore the original field values."
msgstr ""
"Nilai-nilai dari bidang-bidang model tidak akan dirubah ketika transaksi "
"memutar kembali terjadi. Ini dapat membawa pada keadaan model tidak tetap "
"meskipun anda secara manual menyimpan kembali nilai-nilai bidang asli."

msgid ""
"For example, given ``MyModel`` with an ``active`` field, this snippet "
"ensures that the ``if obj.active`` check at the end uses the correct value "
"if updating ``active`` to ``True`` fails in the transaction::"
msgstr ""
"Sebagai contoh, diberikan ``MyModel`` dengan sebuah bidang ``active``, "
"potongan ini memastikan bahwa ``if obj.active`` memeriksa pada akhir "
"penggunaan nilai benar jika memperbaharui ``active`` menjadi ``True`` gagal "
"dalam transaksi:: "

msgid ""
"In order to guarantee atomicity, ``atomic`` disables some APIs. Attempting "
"to commit, roll back, or change the autocommit state of the database "
"connection within an ``atomic`` block will raise an exception."
msgstr ""
"Untuk menjamin atomicity, ``atomic`` meniadakan beberapa API. Berusaha "
"memperlakukan, memutar kembali, atau merubah keadaan penjalanan otomatis "
"dari hubungan basisdata dalam sebuah blok ``atomic`` akan memunculkan sebuah "
"pengecualian."

msgid ""
"``atomic`` takes a ``using`` argument which should be the name of a "
"database. If this argument isn't provided, Django uses the ``\"default\"`` "
"database."
msgstr ""
"``atomic`` mengambil sebuah argumen ``using`` yang harus berupa nama dari "
"basisdata. Jika argumen ini tidak disediakan, Django menggunakan basisdata ``"
"\"default\"``."

msgid "Under the hood, Django's transaction management code:"
msgstr "Dibawah tenda, kode pengelolaan transaksi Django:"

msgid "opens a transaction when entering the outermost ``atomic`` block;"
msgstr ""
"membuka sebuah transaksi ketika memasukkan blok ``atomic`` paling luar;"

msgid "creates a savepoint when entering an inner ``atomic`` block;"
msgstr "membuat titik simpan ketika memasukkan blok ``atomic`` sebelah dalam;"

msgid "releases or rolls back to the savepoint when exiting an inner block;"
msgstr ""
"melepaskan atau digulung kembali ke titik simpan ketika keluar blok paling "
"dalam;"

msgid "commits or rolls back the transaction when exiting the outermost block."
msgstr ""
"menyerahkan atau gulung kembali transaksi ketika keluar blok paling luar"

msgid ""
"You can disable the creation of savepoints for inner blocks by setting the "
"``savepoint`` argument to ``False``. If an exception occurs, Django will "
"perform the rollback when exiting the first parent block with a savepoint if "
"there is one, and the outermost block otherwise. Atomicity is still "
"guaranteed by the outer transaction. This option should only be used if the "
"overhead of savepoints is noticeable. It has the drawback of breaking the "
"error handling described above."
msgstr ""
"Anda dapat meniadakan pembuatan dari titik simpan untuk blok sebelah dalam "
"dengan mengatur argumen ``savepoint`` ke ``False``. Jika sebuah pengecualian "
"muncul, Django akan melakukan gulunh kembali ketika keluar blok induk "
"pertama dengan sebuah titik simpan jika ada, dan blok paling luar jika "
"tidak. Atomicity masih dijamin oleh transaksi paling luar. Pilihan ini harus "
"hanya digunakan jika kelebihan dari titik simpan dapat dilihat. Itu "
"mempunyai kekurangan dari memecahkan penanganan kesalahan yang digambarkan "
"diatas."

msgid ""
"You may use ``atomic`` when autocommit is turned off. It will only use "
"savepoints, even for the outermost block."
msgstr ""
"Anda dapat menggunakan ``atomic`` ketika penyerahan otomatis dimatikan. Itu "
"akan hanya menggunakan titik simpan, bahkan untuk blok paling luar."

msgid "Performance considerations"
msgstr "Pertimbangan penampilan"

msgid ""
"Open transactions have a performance cost for your database server. To "
"minimize this overhead, keep your transactions as short as possible. This is "
"especially important if you're using :func:`atomic` in long-running "
"processes, outside of Django's request / response cycle."
msgstr ""
"Transaksi-transaksi terbuka mempunyai biaya penampilan untuk peladen "
"basisdata anda. Untuk meminimalkan overhead ini, jaga transaksi-transaksi "
"anda sependek mungkin. Ini adalah khususnya penting jika anda sedang "
"menggunakan :func:`atomic` dalamn pengolahan berjalan-panjang, diluar "
"permintaan Django / siklus tanggapan."

msgid ""
":class:`django.test.TestCase` disables the durability check to allow testing "
"durable atomic blocks in a transaction for performance reasons. Use :class:"
"`django.test.TransactionTestCase` for testing durability."
msgstr ""

msgid "The ``durable`` argument was added."
msgstr "Argumen ``durable`` telah ditambahkan."

msgid "Autocommit"
msgstr "Penyerahan otomatis"

msgid "Why Django uses autocommit"
msgstr "Kenapa Django menggunakan penyerahan otomatis"

msgid ""
"In the SQL standards, each SQL query starts a transaction, unless one is "
"already active. Such transactions must then be explicitly committed or "
"rolled back."
msgstr ""
"Dalam standar SQL, setiap permintaan SQL memulai sebuah transaksi, meskipun "
"satu sudah aktif. Transaksi tersebut harus secara eksplisit diserahkan dan "
"digulung kembali."

msgid ""
"This isn't always convenient for application developers. To alleviate this "
"problem, most databases provide an autocommit mode. When autocommit is "
"turned on and no transaction is active, each SQL query gets wrapped in its "
"own transaction. In other words, not only does each such query start a "
"transaction, but the transaction also gets automatically committed or rolled "
"back, depending on whether the query succeeded."
msgstr ""
"Ini tidak selalu mudah untuk pengembang aplikasi. Untuk meredakan masalah "
"ini, kebanyakan basisdata menyediakan sebuah suasana penyerahan otomatis. "
"Ketika penyerahan otomatis dinayalan dan tidak ada transaksi aktif, setiap "
"permintaan SQL dibungkus dalam transaksinya sendiri. Dengan kata lain, bukan "
"hanya melakukan setiap permintaan tersebut mulai sebuah transaksi, tetapi "
"transaksi juga mendapatkan otomatis diserahkan atau digulung kembali, "
"tergandunt pada apakah permintaan berhasil."

msgid ""
":pep:`249`, the Python Database API Specification v2.0, requires autocommit "
"to be initially turned off. Django overrides this default and turns "
"autocommit on."
msgstr ""
":pep:`249`, Spesifikasi API Basisdata Python v2.0, membutuhkan penjalanan "
"otomatis untuk diawalkan dimatikan. Django menimpa awalan ini dan menyalakan "
"penjalanan otomatis."

msgid ""
"To avoid this, you can :ref:`deactivate the transaction management "
"<deactivate-transaction-management>`, but it isn't recommended."
msgstr ""
"Untuk menghindari ini, anda dapat  :ref:`menonaktifkan pengelolaan transaksi "
"<deactivate-transaction-management>`, tetapi itu sangat tidak dianjurkan."

msgid "Deactivating transaction management"
msgstr "Menonaktifkan pengelolaan transaksi"

msgid ""
"You can totally disable Django's transaction management for a given database "
"by setting :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` to ``False`` in its "
"configuration. If you do this, Django won't enable autocommit, and won't "
"perform any commits. You'll get the regular behavior of the underlying "
"database library."
msgstr ""
"Anda dapat sama sekali meniadakan pengelolaan transaksi Django untuk basis "
"data diberikan dengan mengatur :setting:`AUTOCOMMIT 1` menjadi "
"``False`` dalam konfigurasinya. Jika anda melakukan ini, Django tidak akan "
"mengadakan autocommit, dan tidak akan melakukan penjalanan apapun. Anda akan "
"mendapatkan perilaku biasa dari pustaka basisdata pokok."

msgid ""
"This requires you to commit explicitly every transaction, even those started "
"by Django or by third-party libraries. Thus, this is best used in situations "
"where you want to run your own transaction-controlling middleware or do "
"something really strange."
msgstr ""
"Ini membutuhkan anda untuk menyerahkan secara eksplisit setiap transaksi, "
"bahkan yang dimulai oleh Django atau oleh pustaka pihak ketiga. Jadi, ini "
"adalah penggunaan terbaik dalam keadaan dimana anda ingin menjalankan "
"middleware pengendalian transaksi milik anda atau melakukan sesuatu yang "
"sangat aneh."

msgid "Performing actions after commit"
msgstr "Melakukan tindakan setelah penyerahan"

msgid ""
"Sometimes you need to perform an action related to the current database "
"transaction, but only if the transaction successfully commits. Examples "
"might include a `Celery`_ task, an email notification, or a cache "
"invalidation."
msgstr ""
"Terkadang anda butuh melakukan sebuah tindakan terkait pada transaksi "
"basisdata saat ini, tetapi hanya jika transaksi berhasil diserahkan. Contoh "
"mungkin termasuk tugas `Celery`_, sebuah pemberitahuan surel, atau "
"penghapusan tembolok"

msgid ""
"Django provides the :func:`on_commit` function to register callback "
"functions that should be executed after a transaction is successfully "
"committed:"
msgstr ""
"Django menyediakan fungsi :func:`on_commit` untuk mendaftarkan fungsi "
"panggil kembali yang harusnya dijalankan setelah transaksi berhasil "
"diserahkan:"

msgid "Pass any function (that takes no arguments) to :func:`on_commit`::"
msgstr ""
"Lewati fungsi apapun (yang tidak mengambil argumen) ke :func:`on_commit`::"

msgid "You can also wrap your function in a lambda::"
msgstr "Anda dapat juga membungkus fungsi anda dalam lambda::"

msgid ""
"The function you pass in will be called immediately after a hypothetical "
"database write made where ``on_commit()`` is called would be successfully "
"committed."
msgstr ""
"Fungsi anda lewati akan dipanggil segera setelah hipotetis penulisan "
"basisdata dibuat dimana ``on_commit()`` dipanggil akan berhasil diserahkan."

msgid ""
"If you call ``on_commit()`` while there isn't an active transaction, the "
"callback will be executed immediately."
msgstr ""
"Jika anda memanggil ``on_commit()`` selagi tidak ada sebiah transaksi aktif, "
"panggil kembali akan dijalankan segera."

msgid ""
"If that hypothetical database write is instead rolled back (typically when "
"an unhandled exception is raised in an :func:`atomic` block), your function "
"will be discarded and never called."
msgstr ""
"Jika hipotetis penulisan basisdata itu bukannya digulung kembali (khususnya "
"ketika sebuah pengecualian tidak tertangani dimunculkan dalam sebuah blok :"
"func:`atomic`), fungsi anda akan disingkirkan dan tidak pernah dipanggil."

msgid "Savepoints"
msgstr "Savepoint"

msgid ""
"Savepoints (i.e. nested :func:`atomic` blocks) are handled correctly. That "
"is, an :func:`on_commit` callable registered after a savepoint (in a nested :"
"func:`atomic` block) will be called after the outer transaction is "
"committed, but not if a rollback to that savepoint or any previous savepoint "
"occurred during the transaction::"
msgstr ""
"Titik simpan (yaitu blok  :func:`atomic` bersarang) ditangani dengan benar. "
"Yaitu, sebuah :func:`on_commit` callable terdaftar setelah sebuah titik "
"simpan (dalam blok  :func:`atomic` bersarang) akan dipanggil setelah "
"transaksi paling luar diserahkan, tetapi tidak jika disimpan kembali ke "
"titik simpan tersebut atau titik simpan sebelumnya yang muncul selama "
"transaksi::"

msgid ""
"On the other hand, when a savepoint is rolled back (due to an exception "
"being raised), the inner callable will not be called::"
msgstr ""
"Pada sisi lain, ketika sebuah titik simpan disimpan kembali (karena sebuah "
"pengecualian telah dimunculkan), sebe;ah dalam dapat dipanggil tidak akan "
"dipanggil::"

msgid "Order of execution"
msgstr "Urutan pelaksanaan"

msgid ""
"On-commit functions for a given transaction are executed in the order they "
"were registered."
msgstr ""

msgid "Exception handling"
msgstr "Penanganan pengecualian"

msgid ""
"If one on-commit function within a given transaction raises an uncaught "
"exception, no later registered functions in that same transaction will run. "
"This is the same behavior as if you'd executed the functions sequentially "
"yourself without :func:`on_commit`."
msgstr ""

msgid "Timing of execution"
msgstr "Waktu pelaksanaan"

msgid ""
"Your callbacks are executed *after* a successful commit, so a failure in a "
"callback will not cause the transaction to roll back. They are executed "
"conditionally upon the success of the transaction, but they are not *part* "
"of the transaction. For the intended use cases (mail notifications, Celery "
"tasks, etc.), this should be fine. If it's not (if your follow-up action is "
"so critical that its failure should mean the failure of the transaction "
"itself), then you don't want to use the :func:`on_commit` hook. Instead, you "
"may want `two-phase commit`_ such as the :ref:`psycopg Two-Phase Commit "
"protocol support <psycopg2:tpc>` and the :pep:`optional Two-Phase Commit "
"Extensions in the Python DB-API specification <249#optional-two-phase-commit-"
"extensions>`."
msgstr ""

msgid ""
"Callbacks are not run until autocommit is restored on the connection "
"following the commit (because otherwise any queries done in a callback would "
"open an implicit transaction, preventing the connection from going back into "
"autocommit mode)."
msgstr ""
"Callback tidak berjalan sampai perbaikan otomatis dipulihkan pada hubungan "
"perbaikan berikut (karena sebaliknya apapun permintaan selesai dalam sebuah "
"callback akan membuka sebuah transaksi tersirat, mencegah hubungan dari "
"kembali kedalam suasana perbaikan otomatis)."

msgid ""
"When in autocommit mode and outside of an :func:`atomic` block, the function "
"will run immediately, not on commit."
msgstr ""
"Ketika dalam suasana penjalan otomatis dan diluar dari blok :func:`atomic`, "
"fungsi akan berjalan segera tidak pada penjalanan."

msgid ""
"On-commit functions only work with :ref:`autocommit mode <managing-"
"autocommit>` and the :func:`atomic` (or :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>`) transaction API. Calling :func:`on_commit` when "
"autocommit is disabled and you are not within an atomic block will result in "
"an error."
msgstr ""

msgid "Use in tests"
msgstr "Digunakan dalam percobaan"

msgid ""
"Django's :class:`~django.test.TestCase` class wraps each test in a "
"transaction and rolls back that transaction after each test, in order to "
"provide test isolation. This means that no transaction is ever actually "
"committed, thus your :func:`on_commit` callbacks will never be run."
msgstr ""

msgid ""
"You can overcome this limitation by using :meth:`.TestCase."
"captureOnCommitCallbacks`. This captures your :func:`on_commit` callbacks in "
"a list, allowing you to make assertions on them, or emulate the transaction "
"committing by calling them."
msgstr ""

msgid ""
"Another way to overcome the limitation is to use :class:`~django.test."
"TransactionTestCase` instead of :class:`~django.test.TestCase`. This will "
"mean your transactions are committed, and the callbacks will run. However :"
"class:`~django.test.TransactionTestCase` flushes the database between tests, "
"which is significantly slower than :class:`~django.test.TestCase`\\'s "
"isolation."
msgstr ""

msgid "Why no rollback hook?"
msgstr ""

msgid ""
"A rollback hook is harder to implement robustly than a commit hook, since a "
"variety of things can cause an implicit rollback."
msgstr ""

msgid ""
"For instance, if your database connection is dropped because your process "
"was killed without a chance to shut down gracefully, your rollback hook will "
"never run."
msgstr ""
"Sebagai contoh, jika hubungan basisdata anda jatuh karena pengolahan anda "
"mati tanpa kesempatan dimatikan dengan anggun, hubungan memutar kembali anda "
"tidak pernah berjalan,"

msgid ""
"But there is a solution: instead of doing something during the atomic block "
"(transaction) and then undoing it if the transaction fails, use :func:"
"`on_commit` to delay doing it in the first place until after the transaction "
"succeeds. It's a lot easier to undo something you never did in the first "
"place!"
msgstr ""

msgid "Low-level APIs"
msgstr "API tingkat-rendah"

msgid ""
"Always prefer :func:`atomic` if possible at all. It accounts for the "
"idiosyncrasies of each database and prevents invalid operations."
msgstr ""
"Selalu memilih :func:`atomic` jika memungkan sama sekali. Itu menghitung "
"untuk keanehan dari setiap basisdata dan mecegah tindakan-tindakan tidak sah."

msgid ""
"The low level APIs are only useful if you're implementing your own "
"transaction management."
msgstr ""
"API tingkat rendah hanya berguna jika anda sedang menerapkan pengelolaan "
"transaksi anda sendiri."

msgid ""
"Django provides an API in the :mod:`django.db.transaction` module to manage "
"the autocommit state of each database connection."
msgstr ""

msgid ""
"These functions take a ``using`` argument which should be the name of a "
"database. If it isn't provided, Django uses the ``\"default\"`` database."
msgstr ""
"Fungsi-fungsi ini mengambil sebuah argumen ``using`` yang harus berupa nama "
"dari basisdata. Jika itu tidak disediakan, Django menggunakan basisdata ``"
"\"default\"``."

msgid ""
"Autocommit is initially turned on. If you turn it off, it's your "
"responsibility to restore it."
msgstr ""
"Autocommit awalannya dinyalakan. Jika anda mematikan itu, itu adalah "
"tanggungjawab anda menyimpan itu kembali."

msgid ""
"Once you turn autocommit off, you get the default behavior of your database "
"adapter, and Django won't help you. Although that behavior is specified in :"
"pep:`249`, implementations of adapters aren't always consistent with one "
"another. Review the documentation of the adapter you're using carefully."
msgstr ""
"Sekali anda mematikan autocommit, anda mendapatkan perilaku awalan dari "
"penyadur basisdata anda, dan Django tidak akan membantu anda. Meskipun "
"perilaku itu adalah ditentukan dalam :pep:`249`, penerapan dari penyadur "
"tidak selalu konsisten dengan satu lainnya. Tinjau kembali dari penyadur "
"anda sedang gunakan secara hati-hati."

msgid ""
"You must ensure that no transaction is active, usually by issuing a :func:"
"`commit` or a :func:`rollback`, before turning autocommit back on."
msgstr ""
"Anda harus memastikan bahwa tidak ada transaksi aktif, biasanya dengan "
"menerbitkan :func:`commit` or a :func:`rollback`, sebelum menyalakan "
"penjalanan otomatis."

msgid ""
"Django will refuse to turn autocommit off when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""
"Django akan menolak mematikan autocommit ketika blok :func:`atomic`  aktif, "
"karena itu akan merusak atomicity."

msgid "Transactions"
msgstr "Transaksi"

msgid ""
"A transaction is an atomic set of database queries. Even if your program "
"crashes, the database guarantees that either all the changes will be "
"applied, or none of them."
msgstr ""
"Sebuah transaksi adalah atomic kumpulan dari permintaan basisdata. Bahkan "
"jika program anda tabrakan, basisdata menjamin bahwa baik semua perubahan "
"akan diberlakukan, atau tidak dari mereka."

msgid ""
"Django doesn't provide an API to start a transaction. The expected way to "
"start a transaction is to disable autocommit with :func:`set_autocommit`."
msgstr ""
"Django tidak menyediakan sebuah API untuk memulai sebuah transaksi. Cara "
"diharapkan memulai sebuah transaksi adalah meniadakan autocommit dengan :"
"func:`set_autocommit`."

msgid ""
"Once you're in a transaction, you can choose either to apply the changes "
"you've performed until this point with :func:`commit`, or to cancel them "
"with :func:`rollback`. These functions are defined in :mod:`django.db."
"transaction`."
msgstr ""
"Sekali anda berada dalam transaksi, anda dapat memilih antara memberlakukan "
"perubahan anda telah lakukan sampai titik ini dengan :func:`commit`, atau "
"mmebatalkan mereka dengan :func:`rollback`. Fungsi-fungsi ini ditentukan "
"dalam :mod:`django.db.transaction`."

msgid ""
"Django will refuse to commit or to rollback when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""
"Django menolak commit atau rollback ketika sebuah blok :func:`atomic` aktif, "
"karena itu akan merusak atomicity. "

msgid ""
"A savepoint is a marker within a transaction that enables you to roll back "
"part of a transaction, rather than the full transaction. Savepoints are "
"available with the SQLite, PostgreSQL, Oracle, and MySQL (when using the "
"InnoDB storage engine) backends. Other backends provide the savepoint "
"functions, but they're empty operations -- they don't actually do anything."
msgstr ""

msgid ""
"Savepoints aren't especially useful if you are using autocommit, the default "
"behavior of Django. However, once you open a transaction with :func:"
"`atomic`, you build up a series of database operations awaiting a commit or "
"rollback. If you issue a rollback, the entire transaction is rolled back. "
"Savepoints provide the ability to perform a fine-grained rollback, rather "
"than the full rollback that would be performed by ``transaction.rollback()``."
msgstr ""
"Savepoint bukanlah khususnya berguna jika anda sedang menggunakan "
"autocommit, perilaku kebiasaan dari Django. Bagaimanapun, sekali anda "
"membuka sebuah transaksi dengan :func:`atomic`, anda membangun deretan "
"tindakan-tindakan basisdata menunggu sebuah commit atau rollback. Jika anda "
"menerbitkan sebuah rollback, transaksi keseluruhan diputar kembali yang akan "
"dilakukan dengan ``transaction.rollback()``."

msgid ""
"When the :func:`atomic` decorator is nested, it creates a savepoint to allow "
"partial commit or rollback. You're strongly encouraged to use :func:`atomic` "
"rather than the functions described below, but they're still part of the "
"public API, and there's no plan to deprecate them."
msgstr ""
"Ketika penghias  :func:`atomic` bersarang, itu membuat sebuah savepoint "
"untuk mengizinkan commit atau rollback sebagian. Anda sangat dianjurkan "
"menggunakan :func:`atomic` daripada fungsi-fungsi digambarkan dibawah, "
"tetapi mereka adalah masih bagian dari API umum, dan tidak ada rencana "
"mengusangkan mereka."

msgid ""
"Each of these functions takes a ``using`` argument which should be the name "
"of a database for which the behavior applies.  If no ``using`` argument is "
"provided then the ``\"default\"`` database is used."
msgstr ""
"Setiap fungsi-fungsi ini mengambil argumen ``using`` yang harus dinamai dari "
"basisdata untuk dimana perilaku diberlakukan. Jika tidak ada argumen "
"``using`` disediakan kemudian basisdata ``\"default\"`` digunakan."

msgid ""
"Savepoints are controlled by three functions in :mod:`django.db.transaction`:"
msgstr ""
"Savepoint dikendalikan oleh tiga fungsi dalam :mod:`django.db.transaction`:"

msgid ""
"Creates a new savepoint. This marks a point in the transaction that is known "
"to be in a \"good\" state. Returns the savepoint ID (``sid``)."
msgstr ""
"Membuat sebuah savepoint baru. Ini menandai sebuah titik dalam transaksi "
"yang dikenal sebagai keadaan \"good\". Mengembalikan ID savepoint (``sid``)."

msgid ""
"Releases savepoint ``sid``. The changes performed since the savepoint was "
"created become part of the transaction."
msgstr ""
"Bebaskan savepoint ``sid``. Perubahan dilakukan sejak savepoint dibuat "
"menjadi bagian dari transaksi."

msgid "Rolls back the transaction to savepoint ``sid``."
msgstr "Memutar kembali transaksi pada savepoint ``sid``."

msgid ""
"These functions do nothing if savepoints aren't supported or if the database "
"is in autocommit mode."
msgstr ""
"Fungsi-fungsi ini tidak melakukan apapun jika savepoint tidak didukung atau "
"jika basisdata dalam suasana penjalanan otomatis."

msgid "In addition, there's a utility function:"
msgstr "Sebagai tambahan, ada fungsi kegunaan:"

msgid "Resets the counter used to generate unique savepoint IDs."
msgstr ""
"Setel kembali penghitung digunakan untuk membangkitkan ID savepoint unik."

msgid "The following example demonstrates the use of savepoints::"
msgstr "Contoh berikut mempertunjukkan penggunaan dari savepoint::"

msgid ""
"Savepoints may be used to recover from a database error by performing a "
"partial rollback. If you're doing this inside an :func:`atomic` block, the "
"entire block will still be rolled back, because it doesn't know you've "
"handled the situation at a lower level! To prevent this, you can control the "
"rollback behavior with the following functions."
msgstr ""
"Savepoint dapat digunakan untuk memulihkan dari kesalahan basisdata dengan "
"melakukan rollback sebagian. Jika anda sedang melakukan ini didalam sebuah "
"blok :func:`atomic`, keseluruhan blok akan masih dapat di rollback, karena "
"itu tidak mengetahui anda telah menangani keadaan pada tingkatan terendah! "
"Untuk mencegah ini, anda dapat mengendalikan perilaku rollback dengan fungsi-"
"fungsi berikut."

msgid ""
"Setting the rollback flag to ``True`` forces a rollback when exiting the "
"innermost atomic block. This may be useful to trigger a rollback without "
"raising an exception."
msgstr ""
"Setel bendera rollback menjadi ``True`` memaksa sebuah rollback ketika "
"keluar blok atomik paling sebelah dalam. Ini mungkin berguna untuk memicu "
"sebuah rollback tanpa memunculkan sebuah pengecualian."

msgid ""
"Setting it to ``False`` prevents such a rollback. Before doing that, make "
"sure you've rolled back the transaction to a known-good savepoint within the "
"current atomic block! Otherwise you're breaking atomicity and data "
"corruption may occur."
msgstr ""
"Setel itu menjadi ``False`` mencegah rollback seperti itu. Sebelum melakukan "
"itu, pastikan anda telah rollback transaksi pada savepoint dikenal-baik "
"dalam blok atomic saat ini! Sebaliknya anda sedang merusak atomic dan "
"kerusakan data mungkin muncul."

msgid "Database-specific notes"
msgstr "Catatan khusus-basisdata"

msgid "Savepoints in SQLite"
msgstr "Savepoint di SQLite"

msgid ""
"While SQLite supports savepoints, a flaw in the design of the :mod:`sqlite3` "
"module makes them hardly usable."
msgstr ""

msgid ""
"When autocommit is enabled, savepoints don't make sense. When it's "
"disabled, :mod:`sqlite3` commits implicitly before savepoint statements. (In "
"fact, it commits before any statement other than ``SELECT``, ``INSERT``, "
"``UPDATE``, ``DELETE`` and ``REPLACE``.) This bug has two consequences:"
msgstr ""
"Ketika autocommit diadakan, savepoint tidak masuk akal. Ketika itu "
"ditiadakan, :mod:`sqlite3` commit secara mutlak sebelum pernyataan "
"savepoint. (Dalam faktanya, itu commit sebelum pernyataan apapun selain dari "
"``SELECT``, ``INSERT``, ``UPDATE``, ``DELETE`` dan ``REPLACE``.) Kesalahan "
"ini memiliki dua konsekuensi:"

msgid ""
"The low level APIs for savepoints are only usable inside a transaction ie. "
"inside an :func:`atomic` block."
msgstr ""
"API tingkat rendah untuk savepoint hanya berguna didalam transaksi yaitu "
"didalam blok :func:`atomic`."

msgid "It's impossible to use :func:`atomic` when autocommit is turned off."
msgstr ""
"Sangat tidak mungkin menggunakan :func:`atomic` ketika penjalan otomatis "
"dimatikan."

msgid "Transactions in MySQL"
msgstr "Transaksi di MySQL"

msgid ""
"If you're using MySQL, your tables may or may not support transactions; it "
"depends on your MySQL version and the table types you're using. (By \"table "
"types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction "
"peculiarities are outside the scope of this article, but the MySQL site has "
"`information on MySQL transactions`_."
msgstr ""
"Jika anda sedang menggunakan MySQL, tabel-tabel anda mungkin atau mungkin "
"tidak mendukung transaksi; itu tergantung pada versi MySQL anda dan jenis-"
"jenis tabel anda sedang gunakan. (Berdasarkan \"table types,\" kami artikan "
"sesuatu seperti \"InnoDB\" or \"MyISAM\".) Kekhasan transaksi MySQL adalah "
"diluar cakupan dari artikel ini, tetapi situs MySQL mempunyai `information "
"on MySQL transactions`_."

msgid ""
"If your MySQL setup does *not* support transactions, then Django will always "
"function in autocommit mode: statements will be executed and committed as "
"soon as they're called. If your MySQL setup *does* support transactions, "
"Django will handle transactions as explained in this document."
msgstr ""
"Jika pengaturan MySQL anda *tidak* mendukung transaksi, kemudian Django akan "
"selalu menggunakan suasana penjalan otomatis: pernyataan-pernyataan akan "
"dijalankan dan diperlakukan segera mereka dipanggil. Jika pengaturan MySQL "
"anda *melakukan* mendukung transaksi, Django akan menangani transaksi-"
"transaksi seperti dijelaskan dalam dokumen ini."

msgid "Handling exceptions within PostgreSQL transactions"
msgstr "Penanganan pengecualian dalam transaksi PostgreSQL"

msgid ""
"This section is relevant only if you're implementing your own transaction "
"management. This problem cannot occur in Django's default mode and :func:"
"`atomic` handles it automatically."
msgstr ""
"Bagian ini hanya bersangkut paut hanya jika anda sedang menerapkan "
"pengelolaan transaksi anda sendiri. Masalah ini tidak dapat muncul dalam "
"keadaan awalan Django dan :func:`atomic` menangani itu otomatis."

msgid ""
"Inside a transaction, when a call to a PostgreSQL cursor raises an exception "
"(typically ``IntegrityError``), all subsequent SQL in the same transaction "
"will fail with the error \"current transaction is aborted, queries ignored "
"until end of transaction block\". While the basic use of ``save()`` is "
"unlikely to raise an exception in PostgreSQL, there are more advanced usage "
"patterns which might, such as saving objects with unique fields, saving "
"using the force_insert/force_update flag, or invoking custom SQL."
msgstr ""

msgid "There are several ways to recover from this sort of error."
msgstr "Ada beberapa cara memulihkan dari urutan kesalahan ini."

msgid "Transaction rollback"
msgstr "Gulung kembali transaksi"

msgid "The first option is to roll back the entire transaction. For example::"
msgstr ""
"Pilihan pertama adalah memutar kembali transaksi keseluruhan. Sebagai "
"contoh::"

msgid ""
"Calling ``transaction.rollback()`` rolls back the entire transaction. Any "
"uncommitted database operations will be lost. In this example, the changes "
"made by ``a.save()`` would be lost, even though that operation raised no "
"error itself."
msgstr ""
"Memanggil memutar kembali ``transaction.rollback()`` keseluruhan transaksi. "
"Apapun tindakan basisdata tidak di commit akan hilang. Dalam contoh ini, "
"perubahan dibuat oleh ``a.save()`` akan hilang, meski pekerjaan itu tidak "
"memunculkan kesalahan itu sendiri."

msgid "Savepoint rollback"
msgstr "Memutar kembali savepoint"

msgid ""
"You can use :ref:`savepoints <topics-db-transactions-savepoints>` to control "
"the extent of a rollback. Before performing a database operation that could "
"fail, you can set or update the savepoint; that way, if the operation fails, "
"you can roll back the single offending operation, rather than the entire "
"transaction. For example::"
msgstr ""
"Anda dapat menggunakan :ref:`savepoints 1` untuk mengendalikan tingkat dari "
"memutar kembali. Sebelum melakukan tindakan basisdata yang dapat gagal, anda "
"dapat menyetel atau memperbaharui savepoint; cara itu, jika tindakan gagal, "
"anda dapat memutar kembali tindakan tunggal menyinggung, daripada transaksi "
"keseluruhan. Sebagai contoh::"

msgid ""
"In this example, ``a.save()`` will not be undone in the case where ``b."
"save()`` raises an exception."
msgstr ""
"Dalam contoh ini, ``a.save()`` tidak akan dilepas dalam kasus dimana ``b."
"save()`` memunculkan sebuah pengecualian."

msgid "Sending email"
msgstr "Mengirim surel"

msgid ""
"Although Python provides a mail sending interface via the :mod:`smtplib` "
"module, Django provides a couple of light wrappers over it. These wrappers "
"are provided to make sending email extra quick, to help test email sending "
"during development, and to provide support for platforms that can't use SMTP."
msgstr ""

msgid "The code lives in the ``django.core.mail`` module."
msgstr "Kode tinggal dalam modul ``django.core.mail``."

msgid "In two lines::"
msgstr "Dalam dua baris::"

msgid ""
"Mail is sent using the SMTP host and port specified in the :setting:"
"`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The :setting:"
"`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if set, are "
"used to authenticate to the SMTP server, and the :setting:`EMAIL_USE_TLS` "
"and :setting:`EMAIL_USE_SSL` settings control whether a secure connection is "
"used."
msgstr ""
"Surat dikirim menggunakan rumah SMTP dan port ditentukan dalam pengaturan :"
"setting:`EMAIL_HOST` dan :setting:`EMAIL_PORT`. Pengaturan :setting:"
"`EMAIL_HOST_USER` dan :setting:`EMAIL_HOST_PASSWORD` settings, jika disetel, "
"digunakan untuk mengotentifikasi pada peladen SMTP, dan pengaturan  :setting:"
"`EMAIL_USE_TLS` dan :setting:`EMAIL_USE_SSL` mengendalikan apakah hubungan "
"aman digunakan."

msgid ""
"The character set of email sent with ``django.core.mail`` will be set to the "
"value of your :setting:`DEFAULT_CHARSET` setting."
msgstr ""
"Kumpulan karakter dari surel dikirim dengan ``django.core.mail`` akan "
"disetel ke nilai dari pengaturan :setting:`DEFAULT_CHARSET` anda."

msgid "``send_mail()``"
msgstr "``send_mail()``"

msgid ""
"In most cases, you can send email using ``django.core.mail.send_mail()``."
msgstr ""
"Dalam kebanyakan kasus, anda dapat mengirim surel menggunakan ``django.core."
"mail.send_mail()``."

msgid ""
"The ``subject``, ``message``, ``from_email`` and ``recipient_list`` "
"parameters are required."
msgstr ""
"Parameter ``subject``, ``message``, ``from_email`` dan ``recipient_list`` "
"dibutuhkan."

msgid "``subject``: A string."
msgstr "``subject``: Sebuah string."

msgid "``message``: A string."
msgstr "``message``: Sebuah string."

msgid ""
"``from_email``: A string. If ``None``, Django will use the value of the :"
"setting:`DEFAULT_FROM_EMAIL` setting."
msgstr ""
"``from_email``: Sebuah string. Jika ``None``, Django aan menggunakan nilai "
"dari pengaturan :setting:`DEFAULT_FROM_EMAIL`."

msgid ""
"``recipient_list``: A list of strings, each an email address. Each member of "
"``recipient_list`` will see the other recipients in the \"To:\" field of the "
"email message."
msgstr ""
"``recipient_list``: Sebuah daftar dari string, setiap alamat surel. Setiap "
"anggota dari ``recipient_list`` akan melihat penerima lain dalam bidang \"To:"
"\" dari pesan surel. "

msgid ""
"``fail_silently``: A boolean. When it's ``False``, ``send_mail()`` will "
"raise an :exc:`smtplib.SMTPException` if an error occurs. See the :mod:"
"`smtplib` docs for a list of possible exceptions, all of which are "
"subclasses of :exc:`~smtplib.SMTPException`."
msgstr ""

msgid ""
"``auth_user``: The optional username to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_USER` setting."
msgstr ""
"``auth_user``: Pilihan nama pengguna untuk digunakan mengautentifikasi ke "
"peladen SMTP. Jika ini tidak disediakan, Django akan menggunakan nilai dari "
"pengaturan :setting:`EMAIL_HOST_USER`."

msgid ""
"``auth_password``: The optional password to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_PASSWORD` setting."
msgstr ""
"``auth_password``: Sandi pilihan digunakan untuk mengautentifikasi ke "
"peladen SMTP. Jika ini tidak disediakan, Django akan menggunakan nilai dari "
"pengaturan :setting:`EMAIL_HOST_PASSWORD` "

msgid ""
"``connection``: The optional email backend to use to send the mail. If "
"unspecified, an instance of the default backend will be used. See the "
"documentation on :ref:`Email backends <topic-email-backends>` for more "
"details."
msgstr ""
"``connection``: Backend surel pilihan digunakan untuk mengirim surat. Jika "
"tidak ditentukan, sebuah instance dari backend awalan akan digunakan. Lihat "
"dokumentasi pada :ref:`Email backends 1` untuk rincian lebih."

msgid ""
"``html_message``: If ``html_message`` is provided, the resulting email will "
"be a :mimetype:`multipart/alternative` email with ``message`` as the :"
"mimetype:`text/plain` content type and ``html_message`` as the :mimetype:"
"`text/html` content type."
msgstr ""
"``html_message``: Jika ``html_message`` disediakan, surel dihasilkan akan "
"berupa surel :mimetype:`multipart/alternative` dengan ``message`` sebagai "
"jenis isi  :mimetype:`text/plain` dan ``html_message`` sebagai  jenis isi :"
"mimetype:`text/html`."

msgid ""
"The return value will be the number of successfully delivered messages "
"(which can be ``0`` or ``1`` since it can only send one message)."
msgstr ""
"Nilai kembalian akan berupa angka dari pesan terkirim yang berhasil (yang "
"dapat berupa ``0`` atau ``1`` sejak itu hanya daoat mengirim satu pesan)."

msgid "``send_mass_mail()``"
msgstr "``send_mass_mail()``"

msgid ""
"``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr ""
"``django.core.mail.send_mass_mail()`` diperuntukkan untuk menangani "
"penyuratan elektronik masal."

msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr ""
"``datatuple`` adalah sebuah tuple yang setiap unsur adalah dalam bentuk ini::"

msgid ""
"``fail_silently``, ``auth_user`` and ``auth_password`` have the same "
"functions as in :meth:`~django.core.mail.send_mail()`."
msgstr ""
"``fail_silently``, ``auth_user`` dan ``auth_password`` mempunyai fungsi sama "
"seperti dalam :meth:`~django.core.mail.send_mail()`."

msgid ""
"Each separate element of ``datatuple`` results in a separate email message. "
"As in :meth:`~django.core.mail.send_mail()`, recipients in the same "
"``recipient_list`` will all see the other addresses in the email messages' "
"\"To:\" field."
msgstr ""
"Setiap unsur terpisah dari ``datatuple`` menghasilkan dalam pesan surel "
"terpisah. Seperti dalam :meth:`~django.core.mail.send_mail()`, penerima "
"dalam ``recipient_list`` sama akan semua melihat alamat-alamat lain dalam "
"pesan surel' bidang \"To:\"."

msgid ""
"For example, the following code would send two different messages to two "
"different sets of recipients; however, only one connection to the mail "
"server would be opened::"
msgstr ""
"Sebagai contoh, kode berikut akan mengirim dua pesan berbeda pada dua "
"kumpulan berbeda dari penerima; bagaimanapun, hanya satu hubungan ke peladen "
"surat akan dibuka::"

msgid "The return value will be the number of successfully delivered messages."
msgstr "Nilai kembalian akan berupa angka dari pesan terkirim berhasil."

msgid "``send_mass_mail()`` vs. ``send_mail()``"
msgstr "``send_mass_mail()`` x ``send_mail()``"

msgid ""
"The main difference between :meth:`~django.core.mail.send_mass_mail()` and :"
"meth:`~django.core.mail.send_mail()` is that :meth:`~django.core.mail."
"send_mail()` opens a connection to the mail server each time it's executed, "
"while :meth:`~django.core.mail.send_mass_mail()` uses a single connection "
"for all of its messages. This makes :meth:`~django.core.mail."
"send_mass_mail()` slightly more efficient."
msgstr ""
"Perbedaan utama diantara :meth:`~django.core.mail.send_mass_mail()` dan :"
"meth:`~django.core.mail.send_mail()` adalah bahwa :meth:`~django.core.mail."
"send_mail()` membuka sebuah hubungan ke peladen surel setiap itu dijalankan, "
"selagi :meth:`~django.core.mail.send_mass_mail()` menggunakan hubungan "
"tunggal untuk semua pesan-pesannya. Ini membuat :meth:`~django.core.mail."
"send_mass_mail()` sedikit lebih efesien."

msgid "``mail_admins()``"
msgstr "``mail_admins()``"

msgid ""
"``django.core.mail.mail_admins()`` is a shortcut for sending an email to the "
"site admins, as defined in the :setting:`ADMINS` setting."
msgstr ""
"``django.core.mail.mail_admins()`` adalah jalan pintas untuk mengirim sebuah "
"surel pada admin situs, seperti ditentukan dalam pengaturan :setting:"
"`ADMINS`."

msgid ""
"``mail_admins()`` prefixes the subject with the value of the :setting:"
"`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by default."
msgstr ""
"``mail_admins()`` mengawali subyek dengan nilai dari pengaturan :setting:"
"`EMAIL_SUBJECT_PREFIX`, yaitu ``\"[Django] \"`` secara awalan."

msgid ""
"The \"From:\" header of the email will be the value of the :setting:"
"`SERVER_EMAIL` setting."
msgstr ""
"Kepala \"From:\" dari surel akan berupa nilai dari pengaturan :setting:"
"`SERVER_EMAIL`."

msgid "This method exists for convenience and readability."
msgstr "Metode ini ada untuk kenyamanan dan kesiapan."

msgid ""
"If ``html_message`` is provided, the resulting email will be a :mimetype:"
"`multipart/alternative` email with ``message`` as the :mimetype:`text/plain` "
"content type and ``html_message`` as the :mimetype:`text/html` content type."
msgstr ""
"Jika ``html_message`` disediakan, surel dihasilkan akan berupa surel :"
"mimetype:`multipart/alternative` dengan ``message`` seperti jenis isi :"
"mimetype:`text/plain` dan ``html_message`` seperti jenis isi :mimetype:`text/"
"html`."

msgid "``mail_managers()``"
msgstr "``mail_managers()``"

msgid ""
"``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except "
"it sends an email to the site managers, as defined in the :setting:"
"`MANAGERS` setting."
msgstr ""
"``django.core.mail.mail_managers()`` seperti ``mail_admins()``, kecuali itu "
"mengirim sebuah surel ke pengelola situs, seperti ditentukan dalam "
"pengaturan :setting:`MANAGERS`."

msgid "Examples"
msgstr "Contoh"

msgid ""
"This sends a single email to john@example.com and jane@example.com, with "
"them both appearing in the \"To:\"::"
msgstr ""
"Ini mengirim surel tunggal kepada john@example.com dan jane@example.com, "
"dengan keduanya mereka muncul dalam \"To:\"::"

msgid ""
"This sends a message to john@example.com and jane@example.com, with them "
"both receiving a separate email::"
msgstr ""
"Ini mengirim sebuah pesan ke john@example.com dan jane@example.com, dengan "
"keduanya menerima surel terpisah::"

msgid "Preventing header injection"
msgstr "Mencegah penyuntikan kepala"

msgid ""
"`Header injection`_ is a security exploit in which an attacker inserts extra "
"email headers to control the \"To:\" and \"From:\" in email messages that "
"your scripts generate."
msgstr ""
"`Header injection`_ adalah memanfaatkan keamanan dimana seorang penyerang "
"memasukkan kepala surel tambahan untuk mengendalikan \"To:\" dan \"From:\" "
"dalam pesan-pesan surel yang tulisan-tulisan anda dibangkitkan."

msgid ""
"The Django email functions outlined above all protect against header "
"injection by forbidding newlines in header values. If any ``subject``, "
"``from_email`` or ``recipient_list`` contains a newline (in either Unix, "
"Windows or Mac style), the email function (e.g. :meth:`~django.core.mail."
"send_mail()`) will raise ``django.core.mail.BadHeaderError`` (a subclass of "
"``ValueError``) and, hence, will not send the email. It's your "
"responsibility to validate all data before passing it to the email functions."
msgstr ""
"Fungsi-fungsi surel Django diuraikan diatas semua dilindungi terhadap "
"suntukan kepala dengan melarang baris baru dalam nilai kepala. Jika ada "
"``subject``, ``from_email`` atau ``recepient_list`` mengandung sebuah baris "
"baru (dalam salah satu gaya Unix, Windows, atau Mac), fungsi surel (sebagai "
"contoh :meth:`~django.core.mail.send_mail()`) akan memunculkan ``django.core."
"mail.BadHeaderError`` (sebuah subkelas dari ``ValueError``) dan, karenanya, "
"tidak akan mengirim surel. Itu adalah tanggung jawab anda untuk mengesahkan "
"semua data sebelum melewatkan itu ke fungsi-fungsi surel."

msgid ""
"If a ``message`` contains headers at the start of the string, the headers "
"will be printed as the first bit of the email message."
msgstr ""

msgid ""
"Here's an example view that takes a ``subject``, ``message`` and "
"``from_email`` from the request's POST data, sends that to admin@example.com "
"and redirects to \"/contact/thanks/\" when it's done::"
msgstr ""
"Ini adalah sebuah contoh tampilan yang mengambil ``subject``, ``message`` "
"dan ``from_email`` dari data POST permintaan, mengirim itu ke admin@example."
"com dan mengalihkan ke \"/contact/thanks/\" ketika itu selesai::"

msgid "The ``EmailMessage`` class"
msgstr "Kelas ``EmailMessage``"

msgid ""
"Django's :meth:`~django.core.mail.send_mail()` and :meth:`~django.core.mail."
"send_mass_mail()` functions are actually thin wrappers that make use of the :"
"class:`~django.core.mail.EmailMessage` class."
msgstr ""
"Fungsi-fungsi :meth:`~django.core.mail.send_mail()` dan :meth:`~django.core."
"mail.send_mass_mail()` sebenarnya pembungkus kecil yang memanfaatkan dari "
"kelas :class:`~django.core.mail.EmailMessage`. "

msgid ""
"Not all features of the :class:`~django.core.mail.EmailMessage` class are "
"available through the :meth:`~django.core.mail.send_mail()` and related "
"wrapper functions. If you wish to use advanced features, such as BCC'ed "
"recipients, file attachments, or multi-part email, you'll need to create :"
"class:`~django.core.mail.EmailMessage` instances directly."
msgstr ""
"Tidak semua fitur dari kelas :class:`~django.core.mail."
"EmailMessage` tersedia melalui :meth:`~django.core.mail.send_mail()`  dan "
"fungsi-fungsi pembungkus terkait. Jika anda menginginkan menggunakan fitur-"
"fitur lanjutan, seperti penerima BCC, lampiran berkas, atau banyak-bagian "
"surel, anda akan butuh membuat instance :class:`~django.core.mail."
"EmailMessage` langsung."

msgid ""
"This is a design feature. :meth:`~django.core.mail.send_mail()` and related "
"functions were originally the only interface Django provided. However, the "
"list of parameters they accepted was slowly growing over time. It made sense "
"to move to a more object-oriented design for email messages and retain the "
"original functions only for backwards compatibility."
msgstr ""
"Ini adalah fitur rancangan. :meth:`~django.core.mail.send_mail()` dan fungsi-"
"fungsi terkait aslinya hanya antarmuka Django sediakan. Bagaimanapun, daftar "
"dari parameter mereka terima pelan-pelan tumbuh terhadap waktu. Itu masuk "
"akal memindahkan rancangan berorientasi-obyek untuk pesan-pesan surel dan "
"memelihara fungsi-fungsi asli hanya untuk kesesuaian kebelakang."

msgid ""
":class:`~django.core.mail.EmailMessage` is responsible for creating the "
"email message itself. The :ref:`email backend <topic-email-backends>` is "
"then responsible for sending the email."
msgstr ""
":class:`~django.core.mail.EmailMessage` bertanggungjawab untuk membuat pesan "
"surel itu sendiri. :ref:`email backend 1` kemudian bertanggungjawab untuk "
"mengirim surel."

msgid ""
"For convenience, :class:`~django.core.mail.EmailMessage` provides a "
"``send()`` method for sending a single email. If you need to send multiple "
"messages, the email backend API :ref:`provides an alternative <topics-"
"sending-multiple-emails>`."
msgstr ""

msgid "``EmailMessage`` Objects"
msgstr "Obyek ``EmailMessage``"

msgid ""
"The :class:`~django.core.mail.EmailMessage` class is initialized with the "
"following parameters (in the given order, if positional arguments are used). "
"All parameters are optional and can be set at any time prior to calling the "
"``send()`` method."
msgstr ""
"Kelas :class:`~django.core.mail.EmailMessage` diawalkan dengan parameter-"
"parameter berikut (dalam urutan diberikan, jika penempatan argumen-argumen "
"digunakan). Semua parameter adalah pilihan dan dapat disetel pada waktu "
"kapanpun sebelum memanggil metode ``send()``."

msgid "``subject``: The subject line of the email."
msgstr "``subject``: Pokok baris dari surel."

msgid "``body``: The body text. This should be a plain text message."
msgstr "``body``: Teks badan. Ini harus berupa pesan teks polos."

msgid ""
"``from_email``: The sender's address. Both ``fred@example.com`` and ``\"Fred"
"\" <fred@example.com>`` forms are legal. If omitted, the :setting:"
"`DEFAULT_FROM_EMAIL` setting is used."
msgstr ""

msgid "``to``: A list or tuple of recipient addresses."
msgstr "``to``: Sebuah list atau tuple dari alamat-alamat penerima."

msgid ""
"``bcc``: A list or tuple of addresses used in the \"Bcc\" header when "
"sending the email."
msgstr ""
"``bcc``: Sebuah list atau tuple dari alamat-alamat digunakan dalam kepala "
"\"Bcc\" ketika mengirim surel."

msgid ""
"``connection``: An email backend instance. Use this parameter if you want to "
"use the same connection for multiple messages. If omitted, a new connection "
"is created when ``send()`` is called."
msgstr ""
"``connection``: Sebuah instance backend surel. Gunakan parameter ini jika "
"anda ingin menggunakan hubungan sama untuk banyak pesan-pesan. Jika "
"dihilangkan, hubungan baru dibuat ketika ``send()`` dipanggil."

msgid ""
"``attachments``: A list of attachments to put on the message. These can be "
"either :class:`~email.mime.base.MIMEBase` instances, or ``(filename, "
"content, mimetype)`` triples."
msgstr ""

msgid ""
"``headers``: A dictionary of extra headers to put on the message. The keys "
"are the header name, values are the header values. It's up to the caller to "
"ensure header names and values are in the correct format for an email "
"message. The corresponding attribute is ``extra_headers``."
msgstr ""
"``header``: Sebuah dictionary dari kepala tambahan untuk menaruh pesan. "
"Kunci-kunci adalah nama kepala, nilai-nilai adalah nilai-nilai kepala. Itu "
"terserah pada pemanggil untuk memastikan nama=nama dan nilai-nilai dalam "
"bentuk benar untuk pesan surel. Atribut sesuai adalah ``extra_headers``."

msgid ""
"``cc``: A list or tuple of recipient addresses used in the \"Cc\" header "
"when sending the email."
msgstr ""
"``cc``: Sebuah list atau tuple dari alamat-alamat penerima digunakan dalam "
"kepala \"Cc\" ketika mengirim surel."

msgid ""
"``reply_to``: A list or tuple of recipient addresses used in the \"Reply-To"
"\" header when sending the email."
msgstr ""
"``reply_to``: Sebuah list atau tuple dari alamat-alamat penerima dalam "
"kepala \"Reply-To\" ketika mengirim surel."

msgid "The class has the following methods:"
msgstr "Kelas mempunyai cara berikut:"

msgid ""
"``send(fail_silently=False)`` sends the message. If a connection was "
"specified when the email was constructed, that connection will be used. "
"Otherwise, an instance of the default backend will be instantiated and used. "
"If the keyword argument ``fail_silently`` is ``True``, exceptions raised "
"while sending the message will be quashed. An empty list of recipients will "
"not raise an exception. It will return ``1`` if the message was sent "
"successfully, otherwise ``0``."
msgstr ""

msgid ""
"``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a "
"subclass of Python's :class:`~email.mime.text.MIMEText` class) or a ``django."
"core.mail.SafeMIMEMultipart`` object holding the message to be sent. If you "
"ever need to extend the :class:`~django.core.mail.EmailMessage` class, "
"you'll probably want to override this method to put the content you want "
"into the MIME object."
msgstr ""

msgid ""
"``recipients()`` returns a list of all the recipients of the message, "
"whether they're recorded in the ``to``, ``cc`` or ``bcc`` attributes. This "
"is another method you might need to override when subclassing, because the "
"SMTP server needs to be told the full list of recipients when the message is "
"sent. If you add another way to specify recipients in your class, they need "
"to be returned from this method as well."
msgstr ""
"``recipients()`` mengembalikan daftar dari semua penerima dari pesan, apakah "
"mereka adalah terekam dalam atribut ``to``, ``cc`` atau ``bcc``. Ini adalah "
"metode lain anda mungkin butuh untuk menimpa ketika mensubkelaskan, karena "
"peladen SMTP butuh diberitahu daftar penuh dari penerima ketika pesan "
"dikirim. Jika anda menambah cara lain untuk menentukan penerima dalam kelas "
"anda, mereka butuh dikembalikan dari metode ini juga."

msgid ""
"``attach()`` creates a new file attachment and adds it to the message. There "
"are two ways to call ``attach()``:"
msgstr ""
"``attach()`` membuat lampiran berkas baru dan menambahkan itu ke pesan. Ada "
"dua cara memanggil ``attach()``:"

msgid ""
"You can pass it a single argument that is a :class:`~email.mime.base."
"MIMEBase` instance. This will be inserted directly into the resulting "
"message."
msgstr ""

msgid ""
"Alternatively, you can pass ``attach()`` three arguments: ``filename``, "
"``content`` and ``mimetype``. ``filename`` is the name of the file "
"attachment as it will appear in the email, ``content`` is the data that will "
"be contained inside the attachment and ``mimetype`` is the optional MIME "
"type for the attachment. If you omit ``mimetype``, the MIME content type "
"will be guessed from the filename of the attachment."
msgstr ""
"Kalau tidak, anda dapat melewatkan tiga argumen ``attach()``: ``filename``, "
"``content`` dan ``mimetype``. ``filename`` adalah nama dari lampiran berkas "
"ketika itu muncul dalam surel, ``content`` adalah data yang akan di isi "
"didalam lampiran dan ``mimetype`` adalah jenis MIME untuk lampiran. Jika "
"anda menghilangkan ``mimetype``, jenis isi MIME akan ditebak dari nama "
"berkas dari lampiran."

msgid ""
"If you specify a ``mimetype`` of :mimetype:`message/rfc822`, it will also "
"accept :class:`django.core.mail.EmailMessage` and :py:class:`email.message."
"Message`."
msgstr ""

msgid ""
"For a ``mimetype`` starting with :mimetype:`text/`, content is expected to "
"be a string. Binary data will be decoded using UTF-8, and if that fails, the "
"MIME type will be changed to :mimetype:`application/octet-stream` and the "
"data will be attached unchanged."
msgstr ""

msgid ""
"In addition, :mimetype:`message/rfc822` attachments will no longer be base64-"
"encoded in violation of :rfc:`2046#section-5.2.1`, which can cause issues "
"with displaying the attachments in `Evolution`__ and `Thunderbird`__."
msgstr ""

msgid ""
"``attach_file()`` creates a new attachment using a file from your "
"filesystem. Call it with the path of the file to attach and, optionally, the "
"MIME type to use for the attachment. If the MIME type is omitted, it will be "
"guessed from the filename. You can use it like this::"
msgstr ""

msgid ""
"For MIME types starting with :mimetype:`text/`, binary data is handled as in "
"``attach()``."
msgstr ""

msgid "Sending alternative content types"
msgstr "Mengirim pilihan lain jenis isi"

msgid ""
"It can be useful to include multiple versions of the content in an email; "
"the classic example is to send both text and HTML versions of a message. "
"With Django's email library, you can do this using the "
"``EmailMultiAlternatives`` class. This subclass of :class:`~django.core.mail."
"EmailMessage` has an ``attach_alternative()`` method for including extra "
"versions of the message body in the email. All the other methods (including "
"the class initialization) are inherited directly from :class:`~django.core."
"mail.EmailMessage`."
msgstr ""
"Itu dapat sangat berguna untuk menyertakan banyak versi dari isi dalam "
"sebuah surel; contoh klasik adalah mengirimkan kedua versi teks dan HTML "
"dari pesan. Dengan pustaka surel Django, anda dapat melakukan ini "
"menggunakan kelas ``EmailMultiAlternatives``. Subkelas ini dari :class:"
"`~django.core.mail.EmailMessage` mempunyai sebuah metode "
"``attach_alternative()`` untuk meneyrtakan versi tambahan dari badan pesan "
"dalam surel. Semua metode lainnya (termasuk pengawalan kelas) diwariskan "
"langsung dari :class:`~django.core.mail.EmailMessage`."

msgid "To send a text and HTML combination, you could write::"
msgstr "Untuk mengirim perpaduan teks dan HTML, anda dapat menulis::"

msgid ""
"By default, the MIME type of the ``body`` parameter in an :class:`~django."
"core.mail.EmailMessage` is ``\"text/plain\"``. It is good practice to leave "
"this alone, because it guarantees that any recipient will be able to read "
"the email, regardless of their mail client. However, if you are confident "
"that your recipients can handle an alternative content type, you can use the "
"``content_subtype`` attribute on the :class:`~django.core.mail.EmailMessage` "
"class to change the main content type. The major type will always be ``\"text"
"\"``, but you can change the subtype. For example::"
msgstr ""
"Secara awalan, jenis MIME dari parameter ``body`` dalam sebuah :class:"
"`~django.core.mail.EmailMessage` adalah ``\"text/plain\"``. Itu adalah "
"praktik bagus untuk meninggalkan ini sendiri, karena itu menjamin penerima "
"manapun akan dapat membaca surel, tidak peduli dari surat klien mereka. "
"Bagaimanapun, jika anda sedang percaya diri bahwa penerima anda dapat "
"menangani sebuah jenis isi lain, anda dapat menggunakan atribut "
"``content_subtype`` pada kelas :class:`~django.core.mail.EmailMessage` untuk "
"merubah jenis isi utama. Jenis utama akan selalu ``\"text\"``, tetapi anda "
"dapat merubah subjenis. Sebagai contoh::"

msgid "Email backends"
msgstr "Backend email"

msgid "The actual sending of an email is handled by the email backend."
msgstr "Pengiriman sebenarnya dari sebuah surel ditangani oleh backend email."

msgid "The email backend class has the following methods:"
msgstr "Kelas backend surel mempunyai metode-metode berikut:"

msgid "``open()`` instantiates a long-lived email-sending connection."
msgstr ""

msgid "``close()`` closes the current email-sending connection."
msgstr "``close()`` menutup hubungan mengirim-surel saat ini."

msgid ""
"``send_messages(email_messages)`` sends a list of :class:`~django.core.mail."
"EmailMessage` objects. If the connection is not open, this call will "
"implicitly open the connection, and close the connection afterward. If the "
"connection is already open, it will be left open after mail has been sent."
msgstr ""

msgid ""
"It can also be used as a context manager, which will automatically call "
"``open()`` and ``close()`` as needed::"
msgstr ""
"Itu dapat juga digunakan sebagai pengelola konteks, yang akan otomatis "
"memanggil ``open()`` dan ``close()`` sesuai kebutuhan::"

msgid "Obtaining an instance of an email backend"
msgstr "Mengambil sebuah instance dari sebuah backend surel."

msgid ""
"The :meth:`get_connection` function in ``django.core.mail`` returns an "
"instance of the email backend that you can use."
msgstr ""
"Fungsi :meth:`get_connection` dalam ``django.core.mail`` mengembalikan "
"sebuah instance dari backend surel yang anda dapat gunakan. "

msgid ""
"By default, a call to ``get_connection()`` will return an instance of the "
"email backend specified in :setting:`EMAIL_BACKEND`. If you specify the "
"``backend`` argument, an instance of that backend will be instantiated."
msgstr ""
"Secara awalan, sebuah panggilan pada ``get_connection()`` akan mengembalikan "
"sebuah instance dari backend surel ditentukan dalam :setting:"
"`EMAIL_BACKEND`. Jika anda menentukan argumen ``backend``, sebuah instance "
"dari backend itu akan diinstasiasikan."

msgid ""
"The ``fail_silently`` argument controls how the backend should handle "
"errors. If ``fail_silently`` is True, exceptions during the email sending "
"process will be silently ignored."
msgstr ""
"Argumen ``fail_silently`` mengendalikan bagaimana backend harus menangani "
"kesalahan. Jika ``fail_silently`` adalah True, pengecualian selama "
"pengolahan mengirim surel akan secara diam diabaikan."

msgid ""
"All other arguments are passed directly to the constructor of the email "
"backend."
msgstr ""
"Semua argumen lain dilewatkan langsung ke pembangun dari backend surel."

msgid ""
"Django ships with several email sending backends. With the exception of the "
"SMTP backend (which is the default), these backends are only useful during "
"testing and development. If you have special email sending requirements, you "
"can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr ""
"Django dikirim dengan beberapa backend pengiriman surel. Dengan pengecualian "
"dari backend SMTP (yaitu awalan), backend ini hanya berguna selama percobaan "
"dan pengembangan. Jika anda mempunyai persyaratan mengirim surel khusus, "
"anda dapat :ref:`write your own email backend <topic-custom-email-backend>`."

msgid "SMTP backend"
msgstr "Backend SMTP"

msgid "This is the default backend. Email will be sent through a SMTP server."
msgstr "Ini adalah backend awalan. Surel akan dikirim melalui peladen SMTP."

msgid ""
"The value for each argument is retrieved from the matching setting if the "
"argument is ``None``:"
msgstr ""
"Nilai untuk setiap argumen diambil dari pencocokan pengaturan jika argumen "
"adalah ``None``:"

msgid "``host``: :setting:`EMAIL_HOST`"
msgstr "``host``: :setting:`EMAIL_HOST`"

msgid "``port``: :setting:`EMAIL_PORT`"
msgstr "``port``: :setting:`EMAIL_PORT`"

msgid "``username``: :setting:`EMAIL_HOST_USER`"
msgstr "``username``: :setting:`EMAIL_HOST_USER`"

msgid "``password``: :setting:`EMAIL_HOST_PASSWORD`"
msgstr "``password``: :setting:`EMAIL_HOST_PASSWORD`"

msgid "``use_tls``: :setting:`EMAIL_USE_TLS`"
msgstr "``use_tls``: :setting:`EMAIL_USE_TLS`"

msgid "``use_ssl``: :setting:`EMAIL_USE_SSL`"
msgstr "``use_ssl``: :setting:`EMAIL_USE_SSL`"

msgid "``timeout``: :setting:`EMAIL_TIMEOUT`"
msgstr "``timeout``: :setting:`EMAIL_TIMEOUT`"

msgid "``ssl_keyfile``: :setting:`EMAIL_SSL_KEYFILE`"
msgstr "``ssl_keyfile``: :setting:`EMAIL_SSL_KEYFILE`"

msgid "``ssl_certfile``: :setting:`EMAIL_SSL_CERTFILE`"
msgstr "``ssl_certfile``: :setting:`EMAIL_SSL_CERTFILE`"

msgid ""
"The SMTP backend is the default configuration inherited by Django. If you "
"want to specify it explicitly, put the following in your settings::"
msgstr ""
"Backend SMTP adalah konfigurasi awalan diwarisi oleh Django. Jika anda ingin "
"menentukan itu secara jelas, taruh berikut dalam pengaturan anda::"

msgid ""
"If unspecified, the default ``timeout`` will be the one provided by :func:"
"`socket.getdefaulttimeout()`, which defaults to ``None`` (no timeout)."
msgstr ""
"Jika tidak ditentukan, ``timeout`` awalan akan berupa satu disediakan oleh :"
"func:`socket.getdefaulttimeout()`, yang awalan pada ``None`` (tidak ada "
"waktu habis)."

msgid "Console backend"
msgstr "Backend konsol"

msgid ""
"Instead of sending out real emails the console backend just writes the "
"emails that would be sent to the standard output. By default, the console "
"backend writes to ``stdout``. You can use a different stream-like object by "
"providing the ``stream`` keyword argument when constructing the connection."
msgstr ""
"Daripada mengirim keluar surel asli backend konsol hanya menulis surel yang "
"akan dikirim ke keluaran standar. Secara awalan, backend konsol menulis ke "
"``stdout``. Anda dapat menggunakan obyek aliran-seperti berbeda dengan "
"menyediakan argumen katakunci ``stream`` ketika membangun hubungan. "

msgid "To specify this backend, put the following in your settings::"
msgstr "Untuk menentukan backend ini, taruh berikut dalam pengaturan anda::"

msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development."
msgstr ""
"Backend ini tidak diperuntukkan untuk penggunaan dalam produksi -- itu "
"disediakan sebagai kenyamanan yang dapat digunakan selama pengembangan."

msgid "File backend"
msgstr "Backend berkas"

msgid ""
"The file backend writes emails to a file. A new file is created for each new "
"session that is opened on this backend. The directory to which the files are "
"written is either taken from the :setting:`EMAIL_FILE_PATH` setting or from "
"the ``file_path`` keyword when creating a connection with :meth:`~django."
"core.mail.get_connection`."
msgstr ""
"Backend berkas menulis surel pada sebuah berkas. Sebuah berkas baru dibuat "
"untuk setiap sesi baru yang terbuka pada backend ini. Direktori dimana "
"berkas-berkas ditulis adalah baik diambil dari pengaturan :setting:"
"`EMAIL_FILE_PATH` atau dari katakunci ``file_path`` ketika membuat sebuah "
"hubungan dengan :meth:`~django.core.mail.get_connection`. "

msgid "In-memory backend"
msgstr "backend di-memory "

msgid ""
"The ``'locmem'`` backend stores messages in a special attribute of the "
"``django.core.mail`` module. The ``outbox`` attribute is created when the "
"first message is sent. It's a list with an :class:`~django.core.mail."
"EmailMessage` instance for each message that would be sent."
msgstr ""
"Backend ``'locmem'`` menyimpan pesan-pesan dalam atribut khusus dari modul "
"``django.core.mail``. Atribut ``outbox`` dibuat ketika pesan pertama "
"dikirim. Itu adalah daftar dalam sebuah instance :class:`~django.core.mail."
"EmailMessage` untuk setiap pesan yang akan dikirim. "

msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development and testing."
msgstr ""
"Backend ini tidak dimaksudkan untuk digunakan dalam produksi -- itu "
"disediakan sebagai kenyamanan yang dapat digunakan selama pengembangan dan "
"percobaan."

msgid ""
"Django's test runner :ref:`automatically uses this backend for testing "
"<topics-testing-email>`."
msgstr ""

msgid "Dummy backend"
msgstr "Backend tiruan"

msgid ""
"As the name suggests the dummy backend does nothing with your messages. To "
"specify this backend, put the following in your settings::"
msgstr ""
"Ketika nama menganjurkan backend tiruan tidak melakukan apapun dengan pesan-"
"pesan anda. Untuk menentukan backend ini, taruh berikut dalam pengaturan "
"anda::"

msgid "Defining a custom email backend"
msgstr "Menentukan penyesuaian backend surel"

msgid ""
"If you need to change how emails are sent you can write your own email "
"backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then "
"the Python import path for your backend class."
msgstr ""
"Jika anda butuh merubah bagaimana surel dikirim anda dapat menulis backend "
"surel anda sendiri. Pengaturan :setting:`EMAIL_BACKEND` dalam berkas "
"pengaturan anda adalah kemudian Pythn mengimpor jalur untuk kelas backend "
"anda."

msgid ""
"Custom email backends should subclass ``BaseEmailBackend`` that is located "
"in the ``django.core.mail.backends.base`` module. A custom email backend "
"must implement the ``send_messages(email_messages)`` method. This method "
"receives a list of :class:`~django.core.mail.EmailMessage` instances and "
"returns the number of successfully delivered messages. If your backend has "
"any concept of a persistent session or connection, you should also implement "
"the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for a "
"reference implementation."
msgstr ""
"Backend surel penyesuaian harus subkelas ``BaseEmailBackend`` yaitu "
"bertempat dalam modul ``django.core.mail.backends.base``. Sebuah backend "
"surel penyesuaian harus menerapkan metode ``send_messages(email_messages)``. "
"Metode ini menerima daftar dari instance :class:`~django.core.mail."
"EmailMessage` dan mengembalikan sejumlah dari pesan-pesan terkirim. Jika "
"backend anda mempunyai konsep apapun dari sesi atau hubungan yang gigih, "
"anda harus juga menerapkan metode ``open()`` dan ``close()``. Mengacu pada "
"``smtp.EmailBackend`` untuk penerapan acuan."

msgid "Sending multiple emails"
msgstr "Mengirim banyak surel"

msgid ""
"Establishing and closing an SMTP connection (or any other network "
"connection, for that matter) is an expensive process. If you have a lot of "
"emails to send, it makes sense to reuse an SMTP connection, rather than "
"creating and destroying a connection every time you want to send an email."
msgstr ""
"Membangun dan menutup hubungan SMTP (atau hubungan jaringan lain, untuk "
"masalah itu) adalah sebuah pengolahan yang mahal. Jika anda mempunyai banyak "
"surel untuk dikirim, itu masuk akal menggunakan kembali hubungan SMTP, "
"daripada membuat dan manghancurkan hubungan setiap kali anda ingin mengirim "
"surel."

msgid "There are two ways you tell an email backend to reuse a connection."
msgstr ""
"Ada dua cara memberitahu sebuah backend surel untuk menggunakan kembali "
"sebuah hubungan."

msgid ""
"Firstly, you can use the ``send_messages()`` method. ``send_messages()`` "
"takes a list of :class:`~django.core.mail.EmailMessage` instances (or "
"subclasses), and sends them all using a single connection."
msgstr ""
"Pertama-tama, anda dapat menggunakan metode ``send_messages()``. "
"``send_messages()`` mengambil daftar dari instance :class:`~django.core.mail."
"EmailMessage` (atau subkelas), dan mengirim mereka semua menggunakan "
"hubungan tunggal."

msgid ""
"For example, if you have a function called ``get_notification_email()`` that "
"returns a list of :class:`~django.core.mail.EmailMessage` objects "
"representing some periodic email you wish to send out, you could send these "
"emails using a single call to send_messages::"
msgstr ""
"Sebagai contoh, jika anda mempunyai sebuah fungsi dipanggil "
"``get_notification_email()`` yang mengembalikan daftar dari obyek :class:"
"`~django.core.mail.EmailMessage` mewakili beberapa surel berkala anda ingin "
"kirimkan, anda dapat mengirim surel ini menggunakan panggilan tunggal untuk "
"send_messages::"

msgid ""
"In this example, the call to ``send_messages()`` opens a connection on the "
"backend, sends the list of messages, and then closes the connection again."
msgstr ""
"Dalam contoh ini, panggilan pada ``send_messages()`` membuka hubungan pada "
"backend, mengirim daftar pesan-pesan, dan kemudian menutup hubungan kembali."

msgid ""
"The second approach is to use the ``open()`` and ``close()`` methods on the "
"email backend to manually control the connection. ``send_messages()`` will "
"not manually open or close the connection if it is already open, so if you "
"manually open the connection, you can control when it is closed. For "
"example::"
msgstr ""
"Pendekatan kedua adalah menggunakan metode ``open()`` dan ``close()`` pada "
"backend surel untuk secara manual mengendalikan hubungan. "
"``send_messages()`` tidak akan secara manual membuka atau menutup hubungan "
"jika itu sudah terbuka, jadi jika anda membuka secara munual hubungan, anda "
"dapat mengendalikan ketika itu tertutup. Sebagai contoh::"

msgid "Configuring email for development"
msgstr "Konfigurasi surel untuk pengembangan"

msgid ""
"There are times when you do not want Django to send emails at all. For "
"example, while developing a website, you probably don't want to send out "
"thousands of emails -- but you may want to validate that emails will be sent "
"to the right people under the right conditions, and that those emails will "
"contain the correct content."
msgstr ""
"Ada saatnya ketika anda tidak ingn Django mengirim surel sama sekali. "
"Sebagai contoh, selagi mengembangkan sebuah situs jaringan, anda mungkin "
"tidak ingin mengirim ribuan surel -- tetapi anda mungkin ingin mensahkan "
"surel akan dikirim ke orang benar dibawah suasana yang benar, dan surel itu "
"akan mengandung isi benar."

msgid ""
"The easiest way to configure email for local development is to use the :ref:"
"`console <topic-email-console-backend>` email backend. This backend "
"redirects all email to stdout, allowing you to inspect the content of mail."
msgstr ""
"Cara terbaik untuk mengkonfigurasi surel untuk pengembangan lokal adalah "
"menggunakan  :ref:`console <topic-email-console-backend>` backend surel. "
"Backend ini mengalihkan semua surel ke stdout, mengizinkan anda memeriksa "
"isi dari surel."

msgid ""
"The :ref:`file <topic-email-file-backend>` email backend can also be useful "
"during development -- this backend dumps the contents of every SMTP "
"connection to a file that can be inspected at your leisure."
msgstr ""
"Backend surel :ref:`file <topic-email-file-backend>` dapat berguna selama "
"pengembangan -- backend ini membuang isi dari setiap hubungan SMTP ke sebuah "
"berkas yang dapat diperiksa pada waktu luang anda."

msgid ""
"Another approach is to use a \"dumb\" SMTP server that receives the emails "
"locally and displays them to the terminal, but does not actually send "
"anything. The `aiosmtpd`_ package provides a way to accomplish this::"
msgstr ""

msgid ""
"This command will start a minimal SMTP server listening on port 8025 of "
"localhost. This server prints to standard output all email headers and the "
"email body. You then only need to set the :setting:`EMAIL_HOST` and :setting:"
"`EMAIL_PORT` accordingly. For a more detailed discussion of SMTP server "
"options, see the documentation of the `aiosmtpd`_ module."
msgstr ""

msgid ""
"For information about unit-testing the sending of emails in your "
"application, see the :ref:`topics-testing-email` section of the testing "
"documentation."
msgstr ""

msgid "External packages"
msgstr "Paket eksternal"

msgid ""
"Django ships with a variety of extra, optional tools that solve common "
"problems (``contrib.*``). For easier maintenance and to trim the size of the "
"codebase, a few of those applications have been moved out to separate "
"projects."
msgstr ""

msgid "Localflavor"
msgstr ""

msgid ""
"``django-localflavor`` is a collection of utilities for particular countries "
"and cultures."
msgstr ""
"``django-localflavor`` adalah kumpulan dari alat-alat untuk negara dan "
"budaya tertentu."

msgid "`GitHub <https://github.com/django/django-localflavor>`__"
msgstr "`GitHub <https://github.com/django/django-localflavor>`__"

msgid "`Documentation <https://django-localflavor.readthedocs.io/>`__"
msgstr "`Documentation <https://django-localflavor.readthedocs.io/>`__"

msgid "`PyPI <https://pypi.org/project/django-localflavor/>`__"
msgstr "`PyPI <https://pypi.org/project/django-localflavor/>`__"

msgid "Comments"
msgstr "Komentar"

msgid ""
"``django-contrib-comments`` can be used to attach comments to any model, so "
"you can use it for comments on blog entries, photos, book chapters, or "
"anything else. Most users will be better served with a custom solution, or a "
"hosted product like Disqus."
msgstr ""

msgid "`GitHub <https://github.com/django/django-contrib-comments>`__"
msgstr "`GitHub <https://github.com/django/django-contrib-comments>`__"

msgid "`Documentation <https://django-contrib-comments.readthedocs.io/>`__"
msgstr "`Documentation <https://django-contrib-comments.readthedocs.io/>`__"

msgid "`PyPI <https://pypi.org/project/django-contrib-comments/>`__"
msgstr "`PyPI <https://pypi.org/project/django-contrib-comments/>`__"

msgid "Formtools"
msgstr "Formtool"

msgid ""
"``django-formtools`` is a collection of assorted utilities to work with "
"forms."
msgstr ""
"``django-formtools`` adalah kumpulan dari berbagai macam keperluan untuk "
"bekerja dengan formulir."

msgid "`GitHub <https://github.com/jazzband/django-formtools/>`__"
msgstr ""

msgid "`Documentation <https://django-formtools.readthedocs.io/>`__"
msgstr "`Documentation <https://django-formtools.readthedocs.io/>`__"

msgid "`PyPI <https://pypi.org/project/django-formtools/>`__"
msgstr "`PyPI <https://pypi.org/project/django-formtools/>`__"

msgid "Managing files"
msgstr "Mengelola berkas"

msgid ""
"This document describes Django's file access APIs for files such as those "
"uploaded by a user. The lower level APIs are general enough that you could "
"use them for other purposes. If you want to handle \"static files\" (JS, "
"CSS, etc.), see :doc:`/howto/static-files/index`."
msgstr ""

msgid ""
"By default, Django stores files locally, using the :setting:`MEDIA_ROOT` "
"and :setting:`MEDIA_URL` settings. The examples below assume that you're "
"using these defaults."
msgstr ""
"Secara awalan, Django menyimpan berkas-berkas secara lokal, menggunakan "
"pengaturan :setting:`MEDIA_ROOT` dan :setting:`MEDIA_URL`. Contoh-contoh "
"dibawah menganggap bahwa anda sedang menggunakan awalan-awalan ini."

msgid ""
"However, Django provides ways to write custom `file storage systems`_ that "
"allow you to completely customize where and how Django stores files. The "
"second half of this document describes how these storage systems work."
msgstr ""

msgid "Using files in models"
msgstr "Menggunakan berkas dalam model"

msgid ""
"When you use a :class:`~django.db.models.FileField` or :class:`~django.db."
"models.ImageField`, Django provides a set of APIs you can use to deal with "
"that file."
msgstr ""
"Ketika anda menggunakan :class:`~django.db.models.FileField` atau :class:"
"`~django.db.models.ImageField`, Django menyediakan sekumpulan dari API anda "
"dapat gunakan untuk berhbungan dengan berkas itu."

msgid ""
"Consider the following model, using an :class:`~django.db.models.ImageField` "
"to store a photo::"
msgstr ""
"Pertimbangkan model berikut, menggunakan :class:`~django.db.models."
"ImageField` untuk menyimpan sebuah foto::"

msgid ""
"Any ``Car`` instance will have a ``photo`` attribute that you can use to get "
"at the details of the attached photo::"
msgstr ""
"Instance ``Car`` apapun akan mempunyai atribut ``photo`` yang anda dapat "
"gunakan untuk mendapatkan rincian dari foto terlampir::"

msgid ""
"This object -- ``car.photo`` in the example -- is a ``File`` object, which "
"means it has all the methods and attributes described below."
msgstr ""
"Obyek ini -- ``car.photo`` dalam contoh -- adalah obyek ``File``, yang "
"berarti itu mempunyai semua metode-metode dan atribut-atribut digambarkan "
"dibawah."

msgid ""
"The file is saved as part of saving the model in the database, so the actual "
"file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""
"Berkas disimpan sebagai bagian dari menyimpan model dalam basisdata, jadi "
"nama berkas sebenarnya digunakan pada cakram tidak dapat bergantung setelah "
"model disimpan."

msgid ""
"For example, you can change the file name by setting the file's :attr:"
"`~django.core.files.File.name` to a path relative to the file storage's "
"location (:setting:`MEDIA_ROOT` if you are using the default :class:`~django."
"core.files.storage.FileSystemStorage`)::"
msgstr ""
"Sebagai contoh, anda dapat merubah nama berkas dengan mengatur :attr:"
"`~django.core.files.File.name` berkas ke jalur relatif ke tempat penyimpanan "
"berkas (:setting:`MEDIA_ROOT` jika anda sedang menggunakan awalan :class:"
"`~django.core.files.storage.FileSystemStorage`)::"

msgid ""
"To save an existing file on disk to a :class:`~django.db.models.FileField`::"
msgstr ""
"Untuk menyimpan berkas yang ada pada cakram ke :class:`~django.db.models."
"FileField`::"

msgid ""
"While :class:`~django.db.models.ImageField` non-image data attributes, such "
"as ``height``, ``width``, and ``size`` are available on the instance, the "
"underlying image data cannot be used without reopening the image. For "
"example::"
msgstr ""

msgid "The ``File`` object"
msgstr "Obyek ``File``"

msgid ""
"Internally, Django uses a :class:`django.core.files.File` instance any time "
"it needs to represent a file."
msgstr ""
"Di bagian dalam, Django menggunakan sebuah instance :class:`django.core."
"files.File` kapanpun itu butuh untuk mewakili sebuah berkas."

msgid ""
"Most of the time you'll use a ``File`` that Django's given you (i.e. a file "
"attached to a model as above, or perhaps an uploaded file)."
msgstr ""

msgid ""
"If you need to construct a ``File`` yourself, the easiest way is to create "
"one using a Python built-in ``file`` object::"
msgstr ""
"Jika anda butuh membangun sebuah ``File`` anda sendiri, cara termudah adalah "
"membuat satu menggunakan Python obyek ``file`` siap-pakai::"

msgid ""
"Now you can use any of the documented attributes and methods of the :class:"
"`~django.core.files.File` class."
msgstr ""
"Sekarang anda dapat menggunakan atribut-atribut terdokumentasi apapun dan "
"metode-metode dari kelas :class:`~django.core.files.File`."

msgid ""
"Be aware that files created in this way are not automatically closed. The "
"following approach may be used to close files automatically::"
msgstr ""
"Waspada bahwa berkas-berkas yang dibuat dalam cara ini tidak otomatis "
"ditutup. Pendekatan berikut mungkin digunakan untuk menutup berkas-berkas "
"otomatis::"

msgid ""
"Closing files is especially important when accessing file fields in a loop "
"over a large number of objects. If files are not manually closed after "
"accessing them, the risk of running out of file descriptors may arise. This "
"may lead to the following error::"
msgstr ""

msgid "File storage"
msgstr "Penyimpanan berkas"

msgid ""
"Behind the scenes, Django delegates decisions about how and where to store "
"files to a file storage system. This is the object that actually understands "
"things like file systems, opening and reading files, etc."
msgstr ""

msgid ""
"Django's default file storage is given by the :setting:"
"`DEFAULT_FILE_STORAGE` setting; if you don't explicitly provide a storage "
"system, this is the one that will be used."
msgstr ""

msgid ""
"See below for details of the built-in default file storage system, and see :"
"doc:`/howto/custom-file-storage` for information on writing your own file "
"storage system."
msgstr ""
"Lihat dibawah untuk rincian dari sistem penyimpanan berkas awalan siap-"
"pakai, dan lihat :doc:`/howto/custom-file-storage` untuk informasi pada "
"menulis sistem penyimpanan berkas anda sendiri."

msgid "Storage objects"
msgstr "Obyek penyimpanan"

msgid ""
"Though most of the time you'll want to use a ``File`` object (which "
"delegates to the proper storage for that file), you can use file storage "
"systems directly. You can create an instance of some custom file storage "
"class, or -- often more useful -- you can use the global default storage "
"system::"
msgstr ""
"Meskipun kebanyakan waktu anda akan ingin menggunakan sebuah obyek ``File`` "
"(yang menunjukkan ke penyimpanan sesuai untuk berkas itu), anda dapat "
"menggunakan sistem penyimpanan berkas langsung. Anda dapat membuat sebuah "
"instance dari beberapa kelas penyimpanan berkas penyesuaian, atau -- sering "
"lebih berguna -- anda dapat menggunakan sistem penyimpanan awalan global::"

msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr "Lihat :doc:`/ref/files/storage` untuk API penyimpanan berkas."

msgid "The built-in filesystem storage class"
msgstr "Kelas penyimpanan sistem berkas siap-pakai"

msgid ""
"Django ships with a :class:`django.core.files.storage.FileSystemStorage` "
"class which implements basic local filesystem file storage."
msgstr ""
"Django dibekali dengan kelas :class:`django.core.files.storage."
"FileSystemStorage` yang menerapkan penyimpanan berkas sistem berkas lokal."

msgid ""
"For example, the following code will store uploaded files under ``/media/"
"photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""
"Sebagai contoh, kode berikut akan menyimpan berkas-berkas terunggah dibawah "
"``/media/photos`` meskipun dari apa pengaturan :setting:`MEDIA_ROOT`:: "

msgid ""
":doc:`Custom storage systems </howto/custom-file-storage>` work the same "
"way: you can pass them in as the ``storage`` argument to a :class:`~django."
"db.models.FileField`."
msgstr ""
":doc:`Custom storage systems 1` bekerja cara sama: anda dapat melewatkan "
"mereka sebagai argumen ``storage`` pada sebuah :class:`~django.db.models."
"FileField`. "

msgid "Using a callable"
msgstr ""

msgid ""
"You can use a callable as the :attr:`~django.db.models.FileField.storage` "
"parameter for :class:`~django.db.models.FileField` or :class:`~django.db."
"models.ImageField`. This allows you to modify the used storage at runtime, "
"selecting different storages for different environments, for example."
msgstr ""

msgid ""
"Your callable will be evaluated when your models classes are loaded, and "
"must return an instance of :class:`~django.core.files.storage.Storage`."
msgstr ""

msgid "Formsets"
msgstr "Formset"

msgid ""
"A formset is a layer of abstraction to work with multiple forms on the same "
"page. It can be best compared to a data grid. Let's say you have the "
"following form::"
msgstr ""

msgid ""
"You might want to allow the user to create several articles at once. To "
"create a formset out of an ``ArticleForm`` you would do::"
msgstr ""
"Anda mungkin mengizinkan pengguna membuat beberapa artikel sekaligus. untuk "
"membuat sebuah formset diluar ``ArticleForm`` anda akan melakukan::"

msgid ""
"You now have created a formset class named ``ArticleFormSet``. Instantiating "
"the formset gives you the ability to iterate over the forms in the formset "
"and display them as you would with a regular form::"
msgstr ""

msgid ""
"As you can see it only displayed one empty form. The number of empty forms "
"that is displayed is controlled by the ``extra`` parameter. By default, :"
"func:`~django.forms.formsets.formset_factory` defines one extra form; the "
"following example will create a formset class to display two blank forms::"
msgstr ""

msgid ""
"Iterating over a formset will render the forms in the order they were "
"created. You can change this order by providing an alternate implementation "
"for the ``__iter__()`` method."
msgstr ""

msgid ""
"Formsets can also be indexed into, which returns the corresponding form. If "
"you override ``__iter__``, you will need to also override ``__getitem__`` to "
"have matching behavior."
msgstr ""
"Formset juga dapat mengindeks, yang mengembalikan formulir sesuai. Jika ada "
"menimpa ``__iter__``, anda akan juga butuh menimpa ``__getitem__`` untuk "
"memiliki perilaku cocok."

msgid "Using initial data with a formset"
msgstr "Menggunakan data awalan dengan formset"

msgid ""
"Initial data is what drives the main usability of a formset. As shown above "
"you can define the number of extra forms. What this means is that you are "
"telling the formset how many additional forms to show in addition to the "
"number of forms it generates from the initial data. Let's take a look at an "
"example::"
msgstr ""

msgid ""
"There are now a total of three forms showing above. One for the initial data "
"that was passed in and two extra forms. Also note that we are passing in a "
"list of dictionaries as the initial data."
msgstr ""
"Sekarang ada jumlah tiga formulir menampilkan diatas. Satu untuk data awalan "
"yang dilewatkan dalam dan dua bentuk formulir tambahan. Juga catat bahwa "
"kami meleeatkan dalam sebuah daftar dictionary sebagai data awalan."

msgid ""
"If you use an ``initial`` for displaying a formset, you should pass the same "
"``initial`` when processing that formset's submission so that the formset "
"can detect which forms were changed by the user. For example, you might have "
"something like: ``ArticleFormSet(request.POST, initial=[...])``."
msgstr ""
"Jika anda menggunakan sebuah ``initial`` untuk menampilkan formset, anda "
"harus melewatkan ``initial`` sama ketika mengolah pengajuan formset itu "
"sehingga formset dapat mengenali formulir-formulir yang berubah oleh "
"pengguna. Sebagai contoh, anda mungkin memiliki sesuatu seperti: "
"``ArticleFormSet(request.POST, initial=[...])``.\n"
" "

msgid ""
":ref:`Creating formsets from models with model formsets <model-formsets>`."
msgstr ":ref:`Creating formsets from models with model formsets 1`."

msgid "Limiting the maximum number of forms"
msgstr "Membatasi nomor maksimal dari formulir"

msgid ""
"The ``max_num`` parameter to :func:`~django.forms.formsets.formset_factory` "
"gives you the ability to limit the number of forms the formset will display::"
msgstr ""
"Parameter ``max_num`` pada :func:`~django.forms.formsets.formset_factory` "
"memberikan anda kemampuan membatasi jumlah formulir formset yang akan "
"dimunculkan::"

msgid ""
"If the value of ``max_num`` is greater than the number of existing items in "
"the initial data, up to ``extra`` additional blank forms will be added to "
"the formset, so long as the total number of forms does not exceed "
"``max_num``. For example, if ``extra=2`` and ``max_num=2`` and the formset "
"is initialized with one ``initial`` item, a form for the initial item and "
"one blank form will be displayed."
msgstr ""

msgid ""
"If the number of items in the initial data exceeds ``max_num``, all initial "
"data forms will be displayed regardless of the value of ``max_num`` and no "
"extra forms will be displayed. For example, if ``extra=3`` and ``max_num=1`` "
"and the formset is initialized with two initial items, two forms with the "
"initial data will be displayed."
msgstr ""

msgid ""
"A ``max_num`` value of ``None`` (the default) puts a high limit on the "
"number of forms displayed (1000). In practice this is equivalent to no limit."
msgstr ""
"Sebuah nilai ``max_num`` dari ``None`` (awalan) menaruh batasan tinggi pada "
"sejumlah formulir-formulir ditampilkan (1000). Dalam praktiknya ini adalah "
"setara pada tidak ada batasan."

msgid ""
"By default, ``max_num`` only affects how many forms are displayed and does "
"not affect validation.  If ``validate_max=True`` is passed to the :func:"
"`~django.forms.formsets.formset_factory`, then ``max_num`` will affect "
"validation.  See :ref:`validate_max`."
msgstr ""

msgid "Limiting the maximum number of instantiated forms"
msgstr ""

msgid ""
"The ``absolute_max`` parameter to :func:`.formset_factory` allows limiting "
"the number of forms that can be instantiated when supplying ``POST`` data. "
"This protects against memory exhaustion attacks using forged ``POST`` "
"requests::"
msgstr ""

msgid ""
"When ``absolute_max`` is ``None``, it defaults to ``max_num + 1000``. (If "
"``max_num`` is ``None``, it defaults to ``2000``)."
msgstr ""

msgid ""
"If ``absolute_max`` is less than ``max_num``, a ``ValueError`` will be "
"raised."
msgstr ""

msgid "Formset validation"
msgstr "Pengesahan formset"

msgid ""
"Validation with a formset is almost identical to a regular ``Form``. There "
"is an ``is_valid`` method on the formset to provide a convenient way to "
"validate all forms in the formset::"
msgstr ""

msgid ""
"We passed in no data to the formset which is resulting in a valid form. The "
"formset is smart enough to ignore extra forms that were not changed. If we "
"provide an invalid article::"
msgstr ""

msgid ""
"As we can see, ``formset.errors`` is a list whose entries correspond to the "
"forms in the formset. Validation was performed for each of the two forms, "
"and the expected error message appears for the second item."
msgstr ""

msgid ""
"Just like when using a normal ``Form``, each field in a formset's forms may "
"include HTML attributes such as ``maxlength`` for browser validation. "
"However, form fields of formsets won't include the ``required`` attribute as "
"that validation may be incorrect when adding and deleting forms."
msgstr ""

msgid ""
"To check how many errors there are in the formset, we can use the "
"``total_error_count`` method::"
msgstr ""
"Untuk memerika seberapa banyak kesalahan ada dalam formset, kami dapat "
"menggunakan metode ``total_error_count``::"

msgid ""
"We can also check if form data differs from the initial data (i.e. the form "
"was sent without any data)::"
msgstr ""
"Kami dapat juga memeriksa jika formulir data berbeda dari data awalan (yaitu "
"formulir dikirim tanpa data apapun)::"

msgid "Understanding the ``ManagementForm``"
msgstr "Memahami ``ManagementForm``"

msgid ""
"You may have noticed the additional data (``form-TOTAL_FORMS``, ``form-"
"INITIAL_FORMS``) that was required in the formset's data above. This data is "
"required for the ``ManagementForm``. This form is used by the formset to "
"manage the collection of forms contained in the formset. If you don't "
"provide this management data, the formset will be invalid::"
msgstr ""

msgid ""
"It is used to keep track of how many form instances are being displayed. If "
"you are adding new forms via JavaScript, you should increment the count "
"fields in this form as well. On the other hand, if you are using JavaScript "
"to allow deletion of existing objects, then you need to ensure the ones "
"being removed are properly marked for deletion by including ``form-#-"
"DELETE`` in the ``POST`` data. It is expected that all forms are present in "
"the ``POST`` data regardless."
msgstr ""

msgid ""
"The management form is available as an attribute of the formset itself. When "
"rendering a formset in a template, you can include all the management data "
"by rendering ``{{ my_formset.management_form }}`` (substituting the name of "
"your formset as appropriate)."
msgstr ""

msgid ""
"As well as the ``form-TOTAL_FORMS`` and ``form-INITIAL_FORMS`` fields shown "
"in the examples here, the management form also includes ``form-"
"MIN_NUM_FORMS`` and ``form-MAX_NUM_FORMS`` fields. They are output with the "
"rest of the management form, but only for the convenience of client-side "
"code. These fields are not required and so are not shown in the example "
"``POST`` data."
msgstr ""

msgid ""
"``formset.is_valid()`` now returns ``False`` rather than raising an "
"exception when the management form is missing or has been tampered with."
msgstr ""

msgid "``total_form_count`` and ``initial_form_count``"
msgstr "``total_form_count`` dan ``initial_form_count``"

msgid ""
"``BaseFormSet`` has a couple of methods that are closely related to the "
"``ManagementForm``, ``total_form_count`` and ``initial_form_count``."
msgstr ""
"``BaseFormSet`` mempunyai sepasang metode yang erat terkait pada "
"``ManagementForm``, ``total_form_count`` dan ``initial_form_count``."

msgid ""
"``total_form_count`` returns the total number of forms in this formset. "
"``initial_form_count`` returns the number of forms in the formset that were "
"pre-filled, and is also used to determine how many forms are required. You "
"will probably never need to override either of these methods, so please be "
"sure you understand what they do before doing so."
msgstr ""

msgid "``empty_form``"
msgstr "``empty_form``"

msgid ""
"``BaseFormSet`` provides an additional attribute ``empty_form`` which "
"returns a form instance with a prefix of ``__prefix__`` for easier use in "
"dynamic forms with JavaScript."
msgstr ""

msgid "``error_messages``"
msgstr "``error_messages``"

msgid ""
"The ``error_messages`` argument lets you override the default messages that "
"the formset will raise. Pass in a dictionary with keys matching the error "
"messages you want to override. For example, here is the default error "
"message when the management form is missing::"
msgstr ""

msgid "And here is a custom error message::"
msgstr "Dan ini adalah pesan kesalahan penyesuaian::"

msgid "Custom formset validation"
msgstr "Penyesuaian pengesahan formset"

msgid ""
"A formset has a ``clean`` method similar to the one on a ``Form`` class. "
"This is where you define your own validation that works at the formset "
"level::"
msgstr ""

msgid ""
"The formset ``clean`` method is called after all the ``Form.clean`` methods "
"have been called. The errors will be found using the ``non_form_errors()`` "
"method on the formset."
msgstr ""

msgid ""
"Non-form errors will be rendered with an additional class of ``nonform`` to "
"help distinguish them from form-specific errors. For example, ``{{ formset."
"non_form_errors }}`` would look like:"
msgstr ""

msgid "The additional ``nonform`` class was added."
msgstr "Tambahan kelas ``nonform`` telah ditambahkan."

msgid "Validating the number of forms in a formset"
msgstr "Mensahkan sejumlah formulir dalam formset"

msgid ""
"Django provides a couple ways to validate the minimum or maximum number of "
"submitted forms. Applications which need more customizable validation of the "
"number of forms should use custom formset validation."
msgstr ""
"Django menyediakan sepasang cara untuk mensahkan angka minimal dan maksimal "
"dari formulir diajukan. Aplikasi yang butuh lebih pengesahan penyesuaian "
"dari sejumlah formulir harus menggunakan pengesahan formset penyesuaian."

msgid "``validate_max``"
msgstr "``validate_max``"

msgid ""
"If ``validate_max=True`` is passed to :func:`~django.forms.formsets."
"formset_factory`, validation will also check that the number of forms in the "
"data set, minus those marked for deletion, is less than or equal to "
"``max_num``."
msgstr ""
"Jika `Documentation <https://django-formtools.readthedocs.io/>`__ dilewatkan "
"ke :func:`~django.forms.formsets.formset_factory`, pengesahan akan juga "
"memeriksa itu sejumlah formulir dalam kumpulan data, dikurangi itu yang "
"ditandai untuk penghapusan, adalah kurang dari atau setara pada ``max_num``."

msgid ""
"``validate_max=True`` validates against ``max_num`` strictly even if "
"``max_num`` was exceeded because the amount of initial data supplied was "
"excessive."
msgstr ""
"``validate_max=True`` mensahkan terhadap ``max_num`` dengan ketat bahkan "
"jika ``max_num`` telah melampaui karena sejumlah data pertama disokong telah "
"berlebihan."

msgid ""
"Regardless of ``validate_max``, if the number of forms in a data set exceeds "
"``absolute_max``, then the form will fail to validate as if ``validate_max`` "
"were set, and additionally only the first ``absolute_max`` forms will be "
"validated. The remainder will be truncated entirely. This is to protect "
"against memory exhaustion attacks using forged POST requests. See :ref:"
"`formsets-absolute-max`."
msgstr ""

msgid "``validate_min``"
msgstr "``validate_min``"

msgid ""
"If ``validate_min=True`` is passed to :func:`~django.forms.formsets."
"formset_factory`, validation will also check that the number of forms in the "
"data set, minus those marked for deletion, is greater than or equal to "
"``min_num``."
msgstr ""

msgid ""
"Regardless of ``validate_min``, if a formset contains no data, then ``extra "
"+ min_num`` empty forms will be displayed."
msgstr ""

msgid "Dealing with ordering and deletion of forms"
msgstr "Berurusan dengan pengurutan dan penghapusan formulir"

msgid ""
"The :func:`~django.forms.formsets.formset_factory` provides two optional "
"parameters ``can_order`` and ``can_delete`` to help with ordering of forms "
"in formsets and deletion of forms from a formset."
msgstr ""

msgid "``can_order``"
msgstr "``can_order``"

msgid "Default: ``False``"
msgstr "Awal: ``False``"

msgid "Lets you create a formset with the ability to order::"
msgstr "Mari anda membuat sebuah formset dengan memampuan mengurutkan::"

msgid ""
"This adds an additional field to each form. This new field is named "
"``ORDER`` and is an ``forms.IntegerField``. For the forms that came from the "
"initial data it automatically assigned them a numeric value. Let's look at "
"what will happen when the user changes these values::"
msgstr ""

msgid ""
":class:`~django.forms.formsets.BaseFormSet` also provides an :attr:`~django."
"forms.formsets.BaseFormSet.ordering_widget` attribute and :meth:`~django."
"forms.formsets.BaseFormSet.get_ordering_widget` method that control the "
"widget used with :attr:`~django.forms.formsets.BaseFormSet.can_order`."
msgstr ""

msgid "``ordering_widget``"
msgstr "``ordering_widget``"

msgid "Default: :class:`~django.forms.NumberInput`"
msgstr "Awalan: :class:`~django.forms.NumberInput`"

msgid ""
"Set ``ordering_widget`` to specify the widget class to be used with "
"``can_order``::"
msgstr ""
"Setel ``ordering_widget`` untuk menentukan kelas widget untuk digunakan "
"dengan ``can_order``::"

msgid "``get_ordering_widget``"
msgstr "``get_ordering_widget``"

msgid ""
"Override ``get_ordering_widget()`` if you need to provide a widget instance "
"for use with ``can_order``::"
msgstr ""
"Timpa ``get_ordering_widget()`` jika anda butuh menyediakan instance widget "
"untuk digunakan dengan ``can_order``::"

msgid "``can_delete``"
msgstr "``can_delete``"

msgid ""
"Lets you create a formset with the ability to select forms for deletion::"
msgstr ""
"Mari anda membuat sebuah formset dengan kemampuan memilih formulir untuk "
"penghapusan::"

msgid ""
"Similar to ``can_order`` this adds a new field to each form named ``DELETE`` "
"and is a ``forms.BooleanField``. When data comes through marking any of the "
"delete fields you can access them with ``deleted_forms``::"
msgstr ""

msgid ""
"If you are using a :class:`ModelFormSet<django.forms.models."
"BaseModelFormSet>`, model instances for deleted forms will be deleted when "
"you call ``formset.save()``."
msgstr ""

msgid ""
"If you call ``formset.save(commit=False)``, objects will not be deleted "
"automatically.  You'll need to call ``delete()`` on each of the :attr:"
"`formset.deleted_objects <django.forms.models.BaseModelFormSet."
"deleted_objects>` to actually delete them::"
msgstr ""

msgid ""
"On the other hand, if you are using a plain ``FormSet``, it's up to you to "
"handle ``formset.deleted_forms``, perhaps in your formset's ``save()`` "
"method, as there's no general notion of what it means to delete a form."
msgstr ""

msgid ""
":class:`~django.forms.formsets.BaseFormSet` also provides a :attr:`~django."
"forms.formsets.BaseFormSet.deletion_widget` attribute and :meth:`~django."
"forms.formsets.BaseFormSet.get_deletion_widget` method that control the "
"widget used with :attr:`~django.forms.formsets.BaseFormSet.can_delete`."
msgstr ""

msgid "``deletion_widget``"
msgstr "``deletion_widget``"

msgid "Default: :class:`~django.forms.CheckboxInput`"
msgstr "Awalan: :class:`~django.forms.CheckboxInput`"

msgid ""
"Set ``deletion_widget`` to specify the widget class to be used with "
"``can_delete``::"
msgstr ""
"Setel ``deletion_widget`` untuk menentukan kelas widget untuk digunakan "
"dengan ``can_delete``::"

msgid "``get_deletion_widget``"
msgstr "``get_deletion_widget``"

msgid ""
"Override ``get_deletion_widget()`` if you need to provide a widget instance "
"for use with ``can_delete``::"
msgstr ""

msgid "``can_delete_extra``"
msgstr "``can_delete_extra``"

msgid "Default: ``True``"
msgstr "Awal: ``True``"

msgid ""
"While setting ``can_delete=True``, specifying ``can_delete_extra=False`` "
"will remove the option to delete extra forms."
msgstr ""

msgid "Adding additional fields to a formset"
msgstr "Menambahkan bidang-bidang tambahan pada sebuah formset"

msgid ""
"If you need to add additional fields to the formset this can be easily "
"accomplished. The formset base class provides an ``add_fields`` method. You "
"can override this method to add your own fields or even redefine the default "
"fields/attributes of the order and deletion fields::"
msgstr ""

msgid "Passing custom parameters to formset forms"
msgstr "Melewatkan parameter penyesuaian pada formulir formset"

msgid ""
"Sometimes your form class takes custom parameters, like ``MyArticleForm``. "
"You can pass this parameter when instantiating the formset::"
msgstr ""
"Terkadang kelas formulir anda mengambil parameter penyesuaian, seperti "
"``MyArticleForm``. Anda dapat melewatkan parameter ini ketika menginstasiasi "
"formset::"

msgid ""
"The ``form_kwargs`` may also depend on the specific form instance. The "
"formset base class provides a ``get_form_kwargs`` method. The method takes a "
"single argument - the index of the form in the formset. The index is "
"``None`` for the :ref:`empty_form`::"
msgstr ""

msgid "Customizing a formset's prefix"
msgstr "Menyesuaikan awalan formset"

msgid ""
"In the rendered HTML, formsets include a prefix on each field's name. By "
"default, the prefix is ``'form'``, but it can be customized using the "
"formset's ``prefix`` argument."
msgstr ""

msgid "For example, in the default case, you might see:"
msgstr "Sebagai contoh, dalam kasus awalan, anda mungkin melihat:"

msgid "But with ``ArticleFormset(prefix='article')`` that becomes:"
msgstr "Tetapi dengan ``ArticleFormset(prefix='article')`` yang menjadi:"

msgid ""
"This is useful if you want to :ref:`use more than one formset in a view "
"<multiple-formsets-in-view>`."
msgstr ""
"Ini berguna jika anda ingin  :ref:`use more than one formset in a view "
"<multiple-formsets-in-view>`."

msgid "Using a formset in views and templates"
msgstr "Menggunakan sebuah formset dalam tampilan dan cetakan"

msgid ""
"Formsets have five attributes and five methods associated with rendering."
msgstr ""

msgid ""
"Specifies the :doc:`renderer </ref/forms/renderers>` to use for the formset. "
"Defaults to the renderer specified by the :setting:`FORM_RENDERER` setting."
msgstr ""

msgid ""
"The name of the template used when calling ``__str__`` or :meth:`.render`. "
"This template renders the formset's management form and then each form in "
"the formset as per the template defined by the form's :attr:`~django.forms."
"Form.template_name`. This is a proxy of ``as_table`` by default."
msgstr ""

msgid ""
"The name of the template used when calling :meth:`.as_p`. By default this is "
"``'django/forms/formsets/p.html'``. This template renders the formset's "
"management form and then each form in the formset as per the form's :meth:"
"`~django.forms.Form.as_p` method."
msgstr ""

msgid ""
"The name of the template used when calling :meth:`.as_table`. By default "
"this is ``'django/forms/formsets/table.html'``. This template renders the "
"formset's management form and then each form in the formset as per the "
"form's :meth:`~django.forms.Form.as_table` method."
msgstr ""

msgid ""
"The name of the template used when calling :meth:`.as_ul`. By default this "
"is ``'django/forms/formsets/ul.html'``. This template renders the formset's "
"management form and then each form in the formset as per the form's :meth:"
"`~django.forms.Form.as_ul` method."
msgstr ""

msgid "Returns the context for rendering a formset in a template."
msgstr ""

msgid "The available context is:"
msgstr "Konteks yang tersedia adalah:"

msgid "``formset`` : The instance of the formset."
msgstr ""

msgid ""
"The render method is called by ``__str__`` as well as the :meth:`.as_p`, :"
"meth:`.as_ul`, and :meth:`.as_table` methods. All arguments are optional and "
"will default to:"
msgstr ""

msgid "``template_name``: :attr:`.template_name`"
msgstr "``template_name``: :attr:`.template_name`"

msgid "``context``: Value returned by :meth:`.get_context`"
msgstr "``context``: NIlai dikembalikan dengan :meth:`.get_context`"

msgid "``renderer``: Value returned by :attr:`.renderer`"
msgstr "``renderer``: Nilai dikembalikan dengan :attr:`.renderer`"

msgid "Renders the formset with the :attr:`.template_name_p` template."
msgstr ""

msgid "Renders the formset with the :attr:`.template_name_table` template."
msgstr ""

msgid "Renders the formset with the :attr:`.template_name_ul` template."
msgstr ""

msgid ""
"Using a formset inside a view is not very different from using a regular "
"``Form`` class. The only thing you will want to be aware of is making sure "
"to use the management form inside the template. Let's look at a sample view::"
msgstr ""

msgid "The ``manage_articles.html`` template might look like this:"
msgstr "Cetakan ``manage_articles.html`` mungkin kelihatan seperti ini:"

msgid ""
"However there's a slight shortcut for the above by letting the formset "
"itself deal with the management form:"
msgstr ""
"Bagaimanapun ada sedikit jalan pintas untuk diatas dengan membiarkan formset "
"itu sendiri berurusan dengan formulir pengelolaan:"

msgid ""
"The above ends up calling the :meth:`BaseFormSet.render` method on the "
"formset class. This renders the formset using the template specified by the :"
"attr:`~BaseFormSet.template_name` attribute. Similar to forms, by default "
"the formset will be rendered ``as_table``, with other helper methods of "
"``as_p`` and ``as_ul`` being available. The rendering of the formset can be "
"customized by specifying the ``template_name`` attribute, or more generally "
"by :ref:`overriding the default template <overriding-built-in-formset-"
"templates>`."
msgstr ""

msgid "Rendering of formsets was moved to the template engine."
msgstr ""

msgid "Manually rendered ``can_delete`` and ``can_order``"
msgstr "Secara manual membangun ``can_delete`` dan ``can_order``"

msgid ""
"If you manually render fields in the template, you can render ``can_delete`` "
"parameter with ``{{ form.DELETE }}``:"
msgstr ""
"Jika anda secara manual membangun bidang dalam cetakan, anda dapat membangun "
"parameter ``can_delete`` dengan ``{{ form.DELETE }}``:"

msgid ""
"Similarly, if the formset has the ability to order (``can_order=True``), it "
"is possible to render it with ``{{ form.ORDER }}``."
msgstr ""

msgid "Using more than one formset in a view"
msgstr "Menggunakan lebih dari satu formset dalam sebuah tampilan"

msgid ""
"You are able to use more than one formset in a view if you like. Formsets "
"borrow much of its behavior from forms. With that said you are able to use "
"``prefix`` to prefix formset form field names with a given value to allow "
"more than one formset to be sent to a view without name clashing. Let's take "
"a look at how this might be accomplished::"
msgstr ""

msgid ""
"You would then render the formsets as normal. It is important to point out "
"that you need to pass ``prefix`` on both the POST and non-POST cases so that "
"it is rendered and processed correctly."
msgstr ""

msgid ""
"Each formset's :ref:`prefix <formset-prefix>` replaces the default ``form`` "
"prefix that's added to each field's ``name`` and ``id`` HTML attributes."
msgstr ""

msgid "Working with forms"
msgstr "Bekerja dengan formulir"

msgid "About this document"
msgstr "Tentang dokumen ini"

msgid ""
"This document provides an introduction to the basics of web forms and how "
"they are handled in Django. For a more detailed look at specific areas of "
"the forms API, see :doc:`/ref/forms/api`, :doc:`/ref/forms/fields`, and :doc:"
"`/ref/forms/validation`."
msgstr ""

msgid ""
"Unless you're planning to build websites and applications that do nothing "
"but publish content, and don't accept input from your visitors, you're going "
"to need to understand and use forms."
msgstr ""

msgid ""
"Django provides a range of tools and libraries to help you build forms to "
"accept input from site visitors, and then process and respond to the input."
msgstr ""

msgid "HTML forms"
msgstr "Formulir HTML"

msgid ""
"In HTML, a form is a collection of elements inside ``<form>...</form>`` that "
"allow a visitor to do things like enter text, select options, manipulate "
"objects or controls, and so on, and then send that information back to the "
"server."
msgstr ""

msgid ""
"Some of these form interface elements - text input or checkboxes - are built "
"into HTML itself. Others are much more complex; an interface that pops up a "
"date picker or allows you to move a slider or manipulate controls will "
"typically use JavaScript and CSS as well as HTML form ``<input>`` elements "
"to achieve these effects."
msgstr ""

msgid "As well as its ``<input>`` elements, a form must specify two things:"
msgstr ""
"Sama halnya dengan unsur ``<input>``, sebuah formulir harus menentukan dua "
"hal:"

msgid ""
"*where*: the URL to which the data corresponding to the user's input should "
"be returned"
msgstr "*dimana* URL dimana data sesuai ke masukan pengguna harus kembali"

msgid "*how*: the HTTP method the data should be returned by"
msgstr "*bagaimana*: Metode HTTP data harus kembali"

msgid ""
"As an example, the login form for the Django admin contains several "
"``<input>`` elements: one of ``type=\"text\"`` for the username, one of "
"``type=\"password\"`` for the password, and one of ``type=\"submit\"`` for "
"the \"Log in\" button. It also contains some hidden text fields that the "
"user doesn't see, which Django uses to determine what to do next."
msgstr ""

msgid ""
"It also tells the browser that the form data should be sent to the URL "
"specified in the ``<form>``’s ``action`` attribute - ``/admin/`` - and that "
"it should be sent using the HTTP mechanism specified by the ``method`` "
"attribute - ``post``."
msgstr ""

msgid ""
"When the ``<input type=\"submit\" value=\"Log in\">`` element is triggered, "
"the data is returned to ``/admin/``."
msgstr "Ketika unsur ``1`` dipicu, data dikembalikan ke ``/admin``."

msgid "``GET`` and ``POST``"
msgstr "``GET`` dan ``POST``"

msgid ""
"``GET`` and ``POST`` are the only HTTP methods to use when dealing with "
"forms."
msgstr ""
"``GET`` dan ``POST`` adalah hanya cara HTTP digunakan untuk berhubungan "
"dengan formulir."

msgid ""
"Django's login form is returned using the ``POST`` method, in which the "
"browser bundles up the form data, encodes it for transmission, sends it to "
"the server, and then receives back its response."
msgstr ""

msgid ""
"``GET``, by contrast, bundles the submitted data into a string, and uses "
"this to compose a URL. The URL contains the address where the data must be "
"sent, as well as the data keys and values. You can see this in action if you "
"do a search in the Django documentation, which will produce a URL of the "
"form ``https://docs.djangoproject.com/search/?q=forms&release=1``."
msgstr ""

msgid "``GET`` and ``POST`` are typically used for different purposes."
msgstr "``GET`` and ``POST`` adalah khususnya digunakan untuk tujuan berbeda."

msgid ""
"Any request that could be used to change the state of the system - for "
"example, a request that makes changes in the database - should use ``POST``. "
"``GET`` should be used only for requests that do not affect the state of the "
"system."
msgstr ""

msgid ""
"``GET`` would also be unsuitable for a password form, because the password "
"would appear in the URL, and thus, also in browser history and server logs, "
"all in plain text. Neither would it be suitable for large quantities of "
"data, or for binary data, such as an image. A web application that uses "
"``GET`` requests for admin forms is a security risk: it can be easy for an "
"attacker to mimic a form's request to gain access to sensitive parts of the "
"system. ``POST``, coupled with other protections like Django's :doc:`CSRF "
"protection </ref/csrf/>` offers more control over access."
msgstr ""

msgid ""
"On the other hand, ``GET`` is suitable for things like a web search form, "
"because the URLs that represent a ``GET`` request can easily be bookmarked, "
"shared, or resubmitted."
msgstr ""

msgid "Django's role in forms"
msgstr "Peran Django di formulir"

msgid ""
"Handling forms is a complex business. Consider Django's admin, where "
"numerous items of data of several different types may need to be prepared "
"for display in a form, rendered as HTML, edited using a convenient "
"interface, returned to the server, validated and cleaned up, and then saved "
"or passed on for further processing."
msgstr ""

msgid ""
"Django's form functionality can simplify and automate vast portions of this "
"work, and can also do it more securely than most programmers would be able "
"to do in code they wrote themselves."
msgstr ""

msgid "Django handles three distinct parts of the work involved in forms:"
msgstr ""
"Django menangani tiga bagian berbeda dari pekerjaan melibatkan dalam "
"formulir-formulir:"

msgid "preparing and restructuring data to make it ready for rendering"
msgstr ""
"mempersiapkan dan menyusun kembali data untuk membuat itu untuk pengiriman"

msgid "creating HTML forms for the data"
msgstr "membuat formulir HTML untuk data"

msgid "receiving and processing submitted forms and data from the client"
msgstr "menerima dan mengolah formulir-formulir diajukan dan data dari klien"

msgid ""
"It is *possible* to write code that does all of this manually, but Django "
"can take care of it all for you."
msgstr ""
"Itu *memungkinkan* menulis kode yang melakukan semua ini secara manual, "
"tetapi Django dapat merawat itu semua untuk anda."

msgid "Forms in Django"
msgstr "Formulir di Django"

msgid ""
"We've described HTML forms briefly, but an HTML ``<form>`` is just one part "
"of the machinery required."
msgstr ""
"Kami telah menggambarkan formulir HTML dengan ringkas, tetapi sebuah HTML "
"``1`` hanya satu bagian dari mesin yang dibutuhkan."

msgid ""
"In the context of a web application, 'form' might refer to that HTML "
"``<form>``, or to the Django :class:`Form` that produces it, or to the "
"structured data returned when it is submitted, or to the end-to-end working "
"collection of these parts."
msgstr ""

msgid "The Django :class:`Form` class"
msgstr "Kelas :class:`Form` Django "

msgid ""
"At the heart of this system of components is Django's :class:`Form` class. "
"In much the same way that a Django model describes the logical structure of "
"an object, its behavior, and the way its parts are represented to us, a :"
"class:`Form` class describes a form and determines how it works and appears."
msgstr ""

msgid ""
"In a similar way that a model class's fields map to database fields, a form "
"class's fields map to HTML form ``<input>`` elements. (A :class:`ModelForm` "
"maps a model class's fields to HTML form ``<input>`` elements via a :class:"
"`Form`; this is what the Django admin is based upon.)"
msgstr ""

msgid ""
"A form's fields are themselves classes; they manage form data and perform "
"validation when a form is submitted. A :class:`DateField` and a :class:"
"`FileField` handle very different kinds of data and have to do different "
"things with it."
msgstr ""

msgid ""
"A form field is represented to a user in the browser as an HTML \"widget\" - "
"a piece of user interface machinery. Each field type has an appropriate "
"default :doc:`Widget class </ref/forms/widgets/>`, but these can be "
"overridden as required."
msgstr ""

msgid "Instantiating, processing, and rendering forms"
msgstr "Mengawali, mengolah, dan membangun formulir"

msgid "When rendering an object in Django, we generally:"
msgstr "Ketika membangun sebuah obyek di Django, kami umumnya:"

msgid "get hold of it in the view (fetch it from the database, for example)"
msgstr ""

msgid "pass it to the template context"
msgstr "lewatkan ke konteks cetakan"

msgid "expand it to HTML markup using template variables"
msgstr "perluas itu pada markah HTML menggunakan variabel cetakan"

msgid ""
"Rendering a form in a template involves nearly the same work as rendering "
"any other kind of object, but there are some key differences."
msgstr ""
"Membangun formulir dalam cetakan melibatkan hampir pekerjaan sama seperti "
"membangun jenis lain dari obyek, tetapi ada beberapa kunci perbedaan."

msgid ""
"In the case of a model instance that contained no data, it would rarely if "
"ever be useful to do anything with it in a template. On the other hand, it "
"makes perfect sense to render an unpopulated form - that's what we do when "
"we want the user to populate it."
msgstr ""

msgid ""
"So when we handle a model instance in a view, we typically retrieve it from "
"the database. When we're dealing with a form we typically instantiate it in "
"the view."
msgstr ""
"Jadi ketika kami menangani instance model dalam tampilan, kami khususnya "
"mengambil itu dari basisdata. Ketika kami sedang berhubungan dengan seuah "
"formulir kami khususnya menginstansiasi itu dalam tampilan."

msgid ""
"When we instantiate a form, we can opt to leave it empty or pre-populate it, "
"for example with:"
msgstr ""
"Ketika kami menginstansiasi sebuah formulir, kami dapat memilih meninggalkan "
"itu kosong atau itu sudah-terisi, sebagai contoh dengan:"

msgid ""
"data from a saved model instance (as in the case of admin forms for editing)"
msgstr ""
"data dari instance model tersimpan (seperti dalam kasus dari formulir admin "
"untuk penyuntingan)."

msgid "data that we have collated from other sources"
msgstr "data yang kami telah kumpulkan dari sumber lain"

msgid "data received from a previous HTML form submission"
msgstr "data diterima dari pengajuan formulir HTML sebelumnya"

msgid ""
"The last of these cases is the most interesting, because it's what makes it "
"possible for users not just to read a website, but to send information back "
"to it too."
msgstr ""
"Kasus terakhir ini paling menarik, karena itu memungkinkan untuk pengguna "
"tidak hanya membaca jaringan situs, tetapi juga mengirim informasi kembali "
"ke jaringan situs."

msgid "Building a form"
msgstr "Membangun formulir"

msgid "The work that needs to be done"
msgstr "Pekerjaan yang butuh diselesaikan"

msgid ""
"Suppose you want to create a simple form on your website, in order to obtain "
"the user's name. You'd need something like this in your template:"
msgstr ""
"Misalnya anda ingin membuat sebuah formulir sederhana pada situs jaringan "
"anda, untuk mendapatkan nama pengguna, anda akan butuh sesuatu seperti ini "
"di cetakan anda:"

msgid ""
"This tells the browser to return the form data to the URL ``/your-name/``, "
"using the ``POST`` method. It will display a text field, labeled \"Your name:"
"\", and a button marked \"OK\". If the template context contains a "
"``current_name`` variable, that will be used to pre-fill the ``your_name`` "
"field."
msgstr ""
"Ini memberitahukan perambah untuk mengembalikan data formulir ke URL ``/your-"
"name/``, menggunakan cara ``POST``. Dia akan menampilkan bidang teks, label "
"\"Nama anda:\", dan tombol ditandai \"OK\". Jika konteks cetakan mengandung "
"variabel ``current_name``, yang akan digunakan untuk pra-isian bidang "
"``your_name``."

msgid ""
"You'll need a view that renders the template containing the HTML form, and "
"that can supply the ``current_name`` field as appropriate."
msgstr ""
"Anda akan butuh sebuah tampilan yang membangun cetakan mengandung formulir "
"HTML, dan dapat mendukung bidang ``current_name`` sewajarnya."

msgid ""
"When the form is submitted, the ``POST`` request which is sent to the server "
"will contain the form data."
msgstr ""
"Ketika formulir diajukan, permintaan ``POST`` yang dikirim ke peladen akan "
"mengandung data formulir."

msgid ""
"Now you'll also need a view corresponding to that ``/your-name/`` URL which "
"will find the appropriate key/value pairs in the request, and then process "
"them."
msgstr ""
"Sekarang anda akan juga butuh sebuah tampilan sesuai ke URL ``/your-name/`` "
"yang akan menemukan pasangan kunci/nilai yang sesuai di permintaan, dan "
"kemudian mengolah mereka."

msgid ""
"This is a very simple form. In practice, a form might contain dozens or "
"hundreds of fields, many of which might need to be pre-populated, and we "
"might expect the user to work through the edit-submit cycle several times "
"before concluding the operation."
msgstr ""
"Ini adalah formulir sangat sederhana. Dalam praktiknya, sebuah formulir "
"mungkin mengandung lusinan atau ratusan bidang, banyak yang mungkin butuh "
"untuk di pra-kumpulkan, dan kami mungkin mengharapkan pengguna untuk bekerja "
"melalui lingkaran ajukan-sunting beberapa kali sebelum menutup tindakan."

msgid ""
"We might require some validation to occur in the browser, even before the "
"form is submitted; we might want to use much more complex fields, that allow "
"the user to do things like pick dates from a calendar and so on."
msgstr ""
"Kami mungkin membutuhkan beberapa pengesahan untuk muncul dalam peramban, "
"bahkan sebelum formulir diajukan; kami mungkin ingin menggunakan bidang-"
"bdiang lebih rumit, yang mengizinkan pengguna melakukan hal-hal seperti "
"mengambil tanggal dari kalender dan seterusnya."

msgid ""
"At this point it's much easier to get Django to do most of this work for us."
msgstr ""
"Pada titik ini itu lebih mudah mendapatkan Django melakukan kebanyakan dari "
"pekerjaan ini untuk kita."

msgid "Building a form in Django"
msgstr "Membangun formulir di Django"

msgid "The :class:`Form` class"
msgstr "Kelas :class:`Form`"

msgid ""
"We already know what we want our HTML form to look like. Our starting point "
"for it in Django is this:"
msgstr ""
"Kami sudah mengetahui apa kami inginkan formulir HTML kami terlihat seperti. "
"Titik mulai kami untuk itu di Django adalah ini:"

msgid ""
"This defines a :class:`Form` class with a single field (``your_name``). "
"We've applied a human-friendly label to the field, which will appear in the "
"``<label>`` when it's rendered (although in this case, the :attr:`~Field."
"label` we specified is actually the same one that would be generated "
"automatically if we had omitted it)."
msgstr ""
"Ini menentukan kelas :class:`Form` dengan bidang tunggal (``your_name``). "
"Kami telah berlakukan label ramah-manusia pada bidang, yang akan muncul "
"dalam ``1`` ketika itu dibangun (meskipun dalam kasus ini, :attr:`~Field."
"label` kami tentukan sebenarnya sama satu yang akan dibangkitkan otomatis "
"jika kami telah menghilangkan itu)."

msgid ""
"The field's maximum allowable length is defined by :attr:`~CharField."
"max_length`. This does two things. It puts a ``maxlength=\"100\"`` on the "
"HTML ``<input>`` (so the browser should prevent the user from entering more "
"than that number of characters in the first place). It also means that when "
"Django receives the form back from the browser, it will validate the length "
"of the data."
msgstr ""
"Panjang masimal bidang diizinkan ditentukan oleh :attr:`~CharField."
"max_length`. Ini melakukan dua hal. Itu menaruh ``maxlength=\"100\"`` pada "
"HTML ``1`` (jadi peramban harus mencegah pengguna dari memasuki ebih dari "
"sejumlah karakter dalam tempat pertama). Itu juga berarti bahwa ketika "
"Django menerima formulir kembali dari peramban, itu akan mensahkan panjang "
"dari data."

msgid ""
"A :class:`Form` instance has an :meth:`~Form.is_valid()` method, which runs "
"validation routines for all its fields. When this method is called, if all "
"fields contain valid data, it will:"
msgstr ""
"Sebuah instance :class:`Form` mempunyai sebuah metode :meth:`~Form."
"is_valid()`, yang menjalankan fungsi untuk semua bidang-bidangnya. Ketika "
"metode ini dipanggil, jika semua bidang mengadnung data sah, itu akan: "

msgid "return ``True``"
msgstr "kembali ``True``"

msgid "place the form's data in its :attr:`~Form.cleaned_data` attribute."
msgstr "tempatkan data formulir dalam atribut :attr:`~Form.cleaned_data` nya."

msgid "The whole form, when rendered for the first time, will look like:"
msgstr ""
"Formulir keseluruhan, ketika dibangun untuk pertama kali, akan kelihatan "
"seperti:"

msgid ""
"Note that it **does not** include the ``<form>`` tags, or a submit button. "
"We'll have to provide those ourselves in the template."
msgstr ""

msgid "The view"
msgstr "Tampilan"

msgid ""
"Form data sent back to a Django website is processed by a view, generally "
"the same view which published the form. This allows us to reuse some of the "
"same logic."
msgstr ""

msgid ""
"To handle the form we need to instantiate it in the view for the URL where "
"we want it to be published:"
msgstr ""

msgid ""
"If we arrive at this view with a ``GET`` request, it will create an empty "
"form instance and place it in the template context to be rendered. This is "
"what we can expect to happen the first time we visit the URL."
msgstr ""

msgid ""
"If the form is submitted using a ``POST`` request, the view will once again "
"create a form instance and populate it with data from the request: ``form = "
"NameForm(request.POST)`` This is called \"binding data to the form\" (it is "
"now a *bound* form)."
msgstr ""

msgid ""
"We call the form's ``is_valid()`` method; if it's not ``True``, we go back "
"to the template with the form. This time the form is no longer empty "
"(*unbound*) so the HTML form will be populated with the data previously "
"submitted, where it can be edited and corrected as required."
msgstr ""

msgid ""
"If ``is_valid()`` is ``True``, we'll now be able to find all the validated "
"form data in its ``cleaned_data`` attribute. We can use this data to update "
"the database or do other processing before sending an HTTP redirect to the "
"browser telling it where to go next."
msgstr ""

msgid "The template"
msgstr "Cetakan"

msgid "We don't need to do much in our ``name.html`` template:"
msgstr "Kami tidak perlu melakukan banyak dalam cetakan``name.html``kami:"

msgid ""
"All the form's fields and their attributes will be unpacked into HTML markup "
"from that ``{{ form }}`` by Django's template language."
msgstr ""
"Semua bidang formulir dan atribut mereka akan dikeluarkan kedalam markah "
"HTML dari ``{{ form }}`` itu dengan bahasa cetakan Django."

msgid "Forms and Cross Site Request Forgery protection"
msgstr "Perlindungan formulir dan pemalsuan Cross Site Request"

msgid ""
"Django ships with an easy-to-use :doc:`protection against Cross Site Request "
"Forgeries </ref/csrf>`. When submitting a form via ``POST`` with CSRF "
"protection enabled you must use the :ttag:`csrf_token` template tag as in "
"the preceding example. However, since CSRF protection is not directly tied "
"to forms in templates, this tag is omitted from the following examples in "
"this document."
msgstr ""

msgid "HTML5 input types and browser validation"
msgstr "jenis masukan HTML5 dan pengesahan perambah"

msgid ""
"If your form includes a :class:`~django.forms.URLField`, an :class:`~django."
"forms.EmailField` or any integer field type, Django will use the ``url``, "
"``email`` and ``number`` HTML5 input types. By default, browsers may apply "
"their own validation on these fields, which may be stricter than Django's "
"validation. If you would like to disable this behavior, set the "
"``novalidate`` attribute on the ``form`` tag, or specify a different widget "
"on the field, like :class:`TextInput`."
msgstr ""

msgid ""
"We now have a working web form, described by a Django :class:`Form`, "
"processed by a view, and rendered as an HTML ``<form>``."
msgstr ""
"Kami sekarang memiliki formulir jaringan yang bekerja, digambarkan oleh "
"Django :class:`Form`, diolah oleh tampilan, dan dibangun sebagai HTML "
"``<form>``."

msgid ""
"That's all you need to get started, but the forms framework puts a lot more "
"at your fingertips. Once you understand the basics of the process described "
"above, you should be prepared to understand other features of the forms "
"system and ready to learn a bit more about the underlying machinery."
msgstr ""

msgid "More about Django :class:`Form` classes"
msgstr "Lebih tentang kelas Django :class:`Form`."

msgid ""
"All form classes are created as subclasses of either :class:`django.forms."
"Form` or :class:`django.forms.ModelForm`. You can think of ``ModelForm`` as "
"a subclass of ``Form``. ``Form`` and ``ModelForm`` actually inherit common "
"functionality from a (private) ``BaseForm`` class, but this implementation "
"detail is rarely important."
msgstr ""

msgid "Models and Forms"
msgstr "Model dan Formulir"

msgid ""
"In fact if your form is going to be used to directly add or edit a Django "
"model, a :doc:`ModelForm </topics/forms/modelforms>` can save you a great "
"deal of time, effort, and code, because it will build a form, along with the "
"appropriate fields and their attributes, from a ``Model`` class."
msgstr ""

msgid "Bound and unbound form instances"
msgstr "Instance formulir terikat dan tidak terikat"

msgid ""
"The distinction between :ref:`ref-forms-api-bound-unbound` is important:"
msgstr "Perbedaan diantara :ref:`ref-forms-api-bound-unbound` adalah penting:"

msgid ""
"An unbound form has no data associated with it. When rendered to the user, "
"it will be empty or will contain default values."
msgstr ""
"Sebuah formulir tidak terikat tidak mempunyai data terkait dengan itu. "
"Ketika dibanguk ke pengguna, itu akan kosong atau mengandung nilai awalan."

msgid ""
"A bound form has submitted data, and hence can be used to tell if that data "
"is valid. If an invalid bound form is rendered, it can include inline error "
"messages telling the user what data to correct."
msgstr ""
"Sebuah formulir ikatan telah mengajukan data, dan kemudian dapat digunakan "
"untuk memberitahu jika data adalah sah. Jika sebuah ikatan tidak sah "
"dibangun, itu dapat menyertakan pesan-pesan kesalahan berderet mengatakan "
"pengguna apa yang data untuk diperbaiki."

msgid ""
"The form's :attr:`~Form.is_bound` attribute will tell you whether a form has "
"data bound to it or not."
msgstr ""
"Atribut formulir :attr:`~Form.is_bound` akan memberitahu anda apakah sebuah "
"formulir mempunyai data terikat ke itu atau tidak."

msgid "More on fields"
msgstr "Lebih pada bidang"

msgid ""
"Consider a more useful form than our minimal example above, which we could "
"use to implement \"contact me\" functionality on a personal website:"
msgstr ""
"Pertimbangkan formulir lebih berguna dari contoh minimal kami diatas, yang "
"kami dapat gunakan untuk menerapkan kegunaan \"hubungi kami\" pada situs "
"jaringan pribadi:"

msgid ""
"Our earlier form used a single field, ``your_name``, a :class:`CharField`. "
"In this case, our form has four fields: ``subject``, ``message``, ``sender`` "
"and ``cc_myself``. :class:`CharField`, :class:`EmailField` and :class:"
"`BooleanField` are just three of the available field types; a full list can "
"be found in :doc:`/ref/forms/fields`."
msgstr ""

msgid "Widgets"
msgstr "Widget"

msgid ""
"Each form field has a corresponding :doc:`Widget class </ref/forms/widgets/"
">`, which in turn corresponds to an HTML form widget such as ``<input type="
"\"text\">``."
msgstr ""
"Setiap bidang formulir mempunyai :doc:`Widget class 1` sesuai, yang "
"gilirannya sesuai pada sebuah widget formulir HMTL seperti ``2``."

msgid ""
"In most cases, the field will have a sensible default widget. For example, "
"by default, a :class:`CharField` will have a :class:`TextInput` widget, that "
"produces an ``<input type=\"text\">`` in the HTML. If you needed "
"``<textarea>`` instead, you'd specify the appropriate widget when defining "
"your form field, as we have done for the ``message`` field."
msgstr ""

msgid "Field data"
msgstr "Bidang data"

msgid ""
"Whatever the data submitted with a form, once it has been successfully "
"validated by calling ``is_valid()`` (and ``is_valid()`` has returned "
"``True``), the validated form data will be in the ``form.cleaned_data`` "
"dictionary. This data will have been nicely converted into Python types for "
"you."
msgstr ""

msgid ""
"You can still access the unvalidated data directly from ``request.POST`` at "
"this point, but the validated data is better."
msgstr ""
"Anda masih dapat mengakses data tidak tersahkan langsung dari ``request."
"POST`` pada titik ini, tetapi data tersahkan adalah lebih baik. "

msgid ""
"In the contact form example above, ``cc_myself`` will be a boolean value. "
"Likewise, fields such as :class:`IntegerField` and :class:`FloatField` "
"convert values to a Python ``int`` and ``float`` respectively."
msgstr ""

msgid ""
"Here's how the form data could be processed in the view that handles this "
"form:"
msgstr ""
"Ini adalah bagaimana formulir dapat dapat diolah dalam tampilan yang "
"menangani formulir ini:"

msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr ""
"Untuk lebih pada mengirim surel dari Django, lihat :doc:`/topics/email`."

msgid ""
"Some field types need some extra handling. For example, files that are "
"uploaded using a form need to be handled differently (they can be retrieved "
"from ``request.FILES``, rather than ``request.POST``). For details of how to "
"handle file uploads with your form, see :ref:`binding-uploaded-files`."
msgstr ""

msgid "Working with form templates"
msgstr "Bekerja dengan cetakan formulir"

msgid ""
"All you need to do to get your form into a template is to place the form "
"instance into the template context. So if your form is called ``form`` in "
"the context, ``{{ form }}`` will render its ``<label>`` and ``<input>`` "
"elements appropriately."
msgstr ""

msgid "Form rendering options"
msgstr "Formulir pilihan pembangunan"

msgid "Additional form template furniture"
msgstr "Tambahan formulir cetakan mebel"

msgid ""
"Don't forget that a form's output does *not* include the surrounding "
"``<form>`` tags, or the form's ``submit`` control. You will have to provide "
"these yourself."
msgstr ""

msgid ""
"There are other output options though for the ``<label>``/``<input>`` pairs:"
msgstr "Ada pilihan keluaran lain meskipun untuk pasangan ``1``/``2``:"

msgid ""
"``{{ form.as_table }}`` will render them as table cells wrapped in ``<tr>`` "
"tags"
msgstr ""
"``{{ form.as_table }}`` akan membangun mereka sebagai sel tabel terbungkus "
"dalam etiket ``<tr>``"

msgid "``{{ form.as_p }}`` will render them wrapped in ``<p>`` tags"
msgstr ""
"``{{ form.as_p }}`` akan membangun mereka terbungkus dalam etiket ``<p>``"

msgid "``{{ form.as_ul }}`` will render them wrapped in ``<li>`` tags"
msgstr ""
"``{{ form.as_ul }}`` akan membangun mereka terbungkus dalam etiket ``<li>``"

msgid ""
"Note that you'll have to provide the surrounding ``<table>`` or ``<ul>`` "
"elements yourself."
msgstr ""
"Catat bahwa anda harus menyediakan sekitarnya unsur ``1`` atau ``2`` anda "
"sendiri."

msgid ""
"Here's the output of ``{{ form.as_p }}`` for our ``ContactForm`` instance:"
msgstr ""
"Ini adalah keluaran dari ``{{ form.as_p }}`` untuk instance ``ContactForm`` "
"kami:"

msgid ""
"Note that each form field has an ID attribute set to ``id_<field-name>``, "
"which is referenced by the accompanying label tag. This is important in "
"ensuring that forms are accessible to assistive technology such as screen "
"reader software. You can also :ref:`customize the way in which labels and "
"ids are generated <ref-forms-api-configuring-label>`."
msgstr ""

msgid "See :ref:`ref-forms-api-outputting-html` for more on this."
msgstr "Lihat :ref:`ref-forms-api-outputting-html` untuk lebih pada ini."

msgid "Rendering fields manually"
msgstr "Membangun bidang manual"

msgid ""
"We don't have to let Django unpack the form's fields; we can do it manually "
"if we like (allowing us to reorder the fields, for example). Each field is "
"available as an attribute of the form using ``{{ form.name_of_field }}``, "
"and in a Django template, will be rendered appropriately. For example:"
msgstr ""

msgid ""
"Complete ``<label>`` elements can also be generated using the :meth:`~django."
"forms.BoundField.label_tag`. For example:"
msgstr ""

msgid "Rendering form error messages"
msgstr "Membangun formulir kesalahan pesan"

msgid ""
"The price of this flexibility is a bit more work. Until now we haven't had "
"to worry about how to display form errors, because that's taken care of for "
"us. In this example we have had to make sure we take care of any errors for "
"each field and any errors for the form as a whole. Note ``{{ form."
"non_field_errors }}`` at the top of the form and the template lookup for "
"errors on each field."
msgstr ""

msgid ""
"Using ``{{ form.name_of_field.errors }}`` displays a list of form errors, "
"rendered as an unordered list. This might look like:"
msgstr ""

msgid ""
"The list has a CSS class of ``errorlist`` to allow you to style its "
"appearance. If you wish to further customize the display of errors you can "
"do so by looping over them:"
msgstr ""

msgid ""
"Non-field errors (and/or hidden field errors that are rendered at the top of "
"the form when using helpers like ``form.as_p()``) will be rendered with an "
"additional class of ``nonfield`` to help distinguish them from field-"
"specific errors. For example, ``{{ form.non_field_errors }}`` would look "
"like:"
msgstr ""

msgid ""
"See :doc:`/ref/forms/api` for more on errors, styling, and working with form "
"attributes in templates."
msgstr ""
"Lihat :doc:`/ref/forms/api` untuk lebih pada kesalahan, gaya, dan bekerja "
"dengan atribut formulir dalam cetakan-cetakan. "

msgid "Looping over the form's fields"
msgstr "Memutar terhadap bidang-bidang formulir"

msgid ""
"If you're using the same HTML for each of your form fields, you can reduce "
"duplicate code by looping through each field in turn using a ``{% for %}`` "
"loop:"
msgstr ""
"Jika anda sedang menggunakan HTML sama untuk setiap bidang formulir anda, "
"anda dapat mengurangi kode ganda dengan memutari setiap bidang bergantian "
"menggunakan putaran ``{% for %}``:"

msgid "Useful attributes on ``{{ field }}`` include:"
msgstr "Atribut berguna pada ``{{ field }}`` termasuk:"

msgid "``{{ field.label }}``"
msgstr "``{{ field.label }}``"

msgid "The label of the field, e.g. ``Email address``."
msgstr "Label dari bidang, sebagai contoh ``Alamat surel``."

msgid "``{{ field.label_tag }}``"
msgstr "``{{ field.label_tag }}``"

msgid ""
"The field's label wrapped in the appropriate HTML ``<label>`` tag. This "
"includes the form's :attr:`~django.forms.Form.label_suffix`. For example, "
"the default ``label_suffix`` is a colon::"
msgstr ""

msgid "``{{ field.id_for_label }}``"
msgstr "``{{ field.id_for_label }}``"

msgid ""
"The ID that will be used for this field (``id_email`` in the example above). "
"If you are constructing the label manually, you may want to use this in lieu "
"of ``label_tag``. It's also useful, for example, if you have some inline "
"JavaScript and want to avoid hardcoding the field's ID."
msgstr ""
"ID yang akan digunakan untuk bidang ini (``id_email`` di contoh diatas). "
"Jika anda sedang membangun label secara manual, anda mungkin ingin "
"menggunakan ini sebagai pengganti ``label_tag``. Itu juga sangat berguna, "
"sebagai contoh, jika anda mempunyai beberapa JavaScript berderet dan ingin "
"menghindari kode keras ID bidang.  "

msgid "``{{ field.value }}``"
msgstr "``{{ field.value }}``"

msgid "The value of the field. e.g ``someone@example.com``."
msgstr "Nilai bidang sebagai contoh ``someone@example.com``."

msgid "``{{ field.html_name }}``"
msgstr "``{{ field.html_name }}``"

msgid ""
"The name of the field that will be used in the input element's name field. "
"This takes the form prefix into account, if it has been set."
msgstr ""

msgid "``{{ field.help_text }}``"
msgstr "``{{ field.help_text }}``"

msgid "Any help text that has been associated with the field."
msgstr "Teks bantuan apapun yang telah dikaitkan dengan bidang."

msgid "``{{ field.errors }}``"
msgstr "``{{ field.errors }}``"

msgid ""
"Outputs a ``<ul class=\"errorlist\">`` containing any validation errors "
"corresponding to this field. You can customize the presentation of the "
"errors with a ``{% for error in field.errors %}`` loop. In this case, each "
"object in the loop is a string containing the error message."
msgstr ""

msgid "``{{ field.is_hidden }}``"
msgstr "``{{ field.is_hidden }}``"

msgid ""
"This attribute is ``True`` if the form field is a hidden field and ``False`` "
"otherwise. It's not particularly useful as a template variable, but could be "
"useful in conditional tests such as:"
msgstr ""

msgid "``{{ field.field }}``"
msgstr "``{{ field.field }}``"

msgid ""
"The :class:`~django.forms.Field` instance from the form class that this :"
"class:`~django.forms.BoundField` wraps. You can use it to access :class:"
"`~django.forms.Field` attributes, e.g. ``{{ char_field.field.max_length }}``."
msgstr ""

msgid ""
"For a complete list of attributes and methods, see :class:`~django.forms."
"BoundField`."
msgstr ""
"Untuk daftar lengkap dari atribut dan cara, lihat :class:`~django.forms."
"BoundField`."

msgid "Looping over hidden and visible fields"
msgstr "Berputar terhadap bidang-bdaing sembunyi dan tampak"

msgid ""
"If you're manually laying out a form in a template, as opposed to relying on "
"Django's default form layout, you might want to treat ``<input type=\"hidden"
"\">`` fields differently from non-hidden fields. For example, because hidden "
"fields don't display anything, putting error messages \"next to\" the field "
"could cause confusion for your users -- so errors for those fields should be "
"handled differently."
msgstr ""

msgid ""
"Django provides two methods on a form that allow you to loop over the hidden "
"and visible fields independently: ``hidden_fields()`` and "
"``visible_fields()``. Here's a modification of an earlier example that uses "
"these two methods:"
msgstr ""

msgid ""
"This example does not handle any errors in the hidden fields. Usually, an "
"error in a hidden field is a sign of form tampering, since normal form "
"interaction won't alter them. However, you could easily insert some error "
"displays for those form errors, as well."
msgstr ""

msgid "Reusable form templates"
msgstr "Formulir cetakan-cetakan dapat digunakan kembali"

msgid ""
"If your site uses the same rendering logic for forms in multiple places, you "
"can reduce duplication by saving the form's loop in a standalone template "
"and overriding the forms :attr:`~django.forms.Form.template_name` attribute "
"to render the form using the custom template. The below example will result "
"in ``{{ form }}`` being rendered as the output of the ``form_snippet.html`` "
"template."
msgstr ""

msgid "In your templates:"
msgstr "Dalam cetakan anda:"

msgid "In your form::"
msgstr "Dalam formulir anda:"

msgid "Template rendering of forms was added."
msgstr "Membangun cetakan dari formulir telah ditambahkan."

msgid "Further topics"
msgstr "Topik lebih jauh"

msgid "This covers the basics, but forms can do a whole lot more:"
msgstr ""
"Ini mencangkup dasar, tetapi formulir dapat melakukan keseluruhan lebih "
"banyak:"

msgid ":doc:`The Forms Reference </ref/forms/index>`"
msgstr ":doc:`Acuan Formulir </ref/forms/index>`"

msgid ""
"Covers the full API reference, including form fields, form widgets, and form "
"and field validation."
msgstr ""
"Mencangkup acuan API penuh, termasuk bidang formulir, widget formulir, dan "
"pengesahan formulir dan bidang."

msgid "Form Assets (the ``Media`` class)"
msgstr "Aset Formulir (kelas ``Media``)"

msgid ""
"Rendering an attractive and easy-to-use web form requires more than just "
"HTML - it also requires CSS stylesheets, and if you want to use fancy "
"widgets, you may also need to include some JavaScript on each page. The "
"exact combination of CSS and JavaScript that is required for any given page "
"will depend upon the widgets that are in use on that page."
msgstr ""

msgid ""
"This is where asset definitions come in. Django allows you to associate "
"different files -- like stylesheets and scripts -- with the forms and "
"widgets that require those assets. For example, if you want to use a "
"calendar to render DateFields, you can define a custom Calendar widget. This "
"widget can then be associated with the CSS and JavaScript that is required "
"to render the calendar. When the Calendar widget is used on a form, Django "
"is able to identify the CSS and JavaScript files that are required, and "
"provide the list of file names in a form suitable for inclusion on your web "
"page."
msgstr ""

msgid "Assets and Django Admin"
msgstr "Admin Aset dan Django"

msgid ""
"The Django Admin application defines a number of customized widgets for "
"calendars, filtered selections, and so on. These widgets define asset "
"requirements, and the Django Admin uses the custom widgets in place of the "
"Django defaults. The Admin templates will only include those files that are "
"required to render the widgets on any given page."
msgstr ""

msgid ""
"If you like the widgets that the Django Admin application uses, feel free to "
"use them in your own application! They're all stored in ``django.contrib."
"admin.widgets``."
msgstr ""
"Jika anda suka widget-widget yang aplikasi Admin Django gunakan, merasa "
"bebas menggunakan mereka dalam aplikasi anda sendiri! Mereka semua disimpan "
"dalam ``django.contrib.admin.widgets``."

msgid "Which JavaScript toolkit?"
msgstr "Kumpulan alat Javascript yang mana?"

msgid ""
"Many JavaScript toolkits exist, and many of them include widgets (such as "
"calendar widgets) that can be used to enhance your application. Django has "
"deliberately avoided blessing any one JavaScript toolkit. Each toolkit has "
"its own relative strengths and weaknesses - use whichever toolkit suits your "
"requirements. Django is able to integrate with any JavaScript toolkit."
msgstr ""

msgid "Assets as a static definition"
msgstr "Aset sebagai pengertian tetap"

msgid ""
"The easiest way to define assets is as a static definition. Using this "
"method, the declaration is an inner ``Media`` class. The properties of the "
"inner class define the requirements."
msgstr ""
"Cara termudah menentukan aset adalah sebagai definisi tetap. Menggunakan "
"metode ini, pernyataan adalah sebuah kelas ``Media`` sebelah dalam. Sifat "
"dari kelas sebelah dalam menentukan persyaratan."

msgid "Here's an example::"
msgstr "Ini adalah sebuah contoh::"

msgid ""
"This code defines a ``CalendarWidget``, which will be based on "
"``TextInput``. Every time the CalendarWidget is used on a form, that form "
"will be directed to include the CSS file ``pretty.css``, and the JavaScript "
"files ``animations.js`` and ``actions.js``."
msgstr ""

msgid ""
"This static definition is converted at runtime into a widget property named "
"``media``. The list of assets for a ``CalendarWidget`` instance can be "
"retrieved through this property::"
msgstr ""

msgid ""
"Here's a list of all possible ``Media`` options. There are no required "
"options."
msgstr ""
"Ini adalah daftar dari semua kemungkinan pilihan ``Media``. Tidak ada "
"pilihan wajib."

msgid "``css``"
msgstr "``css``"

msgid ""
"A dictionary describing the CSS files required for various forms of output "
"media."
msgstr ""
"Sebuah dictionary menggambarkan berkas-berkas CSS untuk beragam formulir "
"dari keluaran media."

msgid ""
"The values in the dictionary should be a tuple/list of file names. See :ref:"
"`the section on paths <form-asset-paths>` for details of how to specify "
"paths to these files."
msgstr ""

msgid ""
"The keys in the dictionary are the output media types. These are the same "
"types accepted by CSS files in media declarations: 'all', 'aural', "
"'braille', 'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' "
"and 'tv'. If you need to have different stylesheets for different media "
"types, provide a list of CSS files for each output medium. The following "
"example would provide two CSS options -- one for the screen, and one for "
"print::"
msgstr ""

msgid ""
"If a group of CSS files are appropriate for multiple output media types, the "
"dictionary key can be a comma separated list of output media types. In the "
"following example, TV's and projectors will have the same media "
"requirements::"
msgstr ""

msgid ""
"If this last CSS definition were to be rendered, it would become the "
"following HTML::"
msgstr ""
"Jika pengertian CSS terakhir ini dibangun, itu akan menjadi HTML berikut::"

msgid "``js``"
msgstr "``js``"

msgid ""
"A tuple describing the required JavaScript files. See :ref:`the section on "
"paths <form-asset-paths>` for details of how to specify paths to these files."
msgstr ""

msgid "``extend``"
msgstr "``extend``"

msgid "A boolean defining inheritance behavior for ``Media`` declarations."
msgstr "Sebuah boolean menentukan perilaku warisan untuk pernyataan ``Media``."

msgid ""
"By default, any object using a static ``Media`` definition will inherit all "
"the assets associated with the parent widget. This occurs regardless of how "
"the parent defines its own requirements. For example, if we were to extend "
"our basic Calendar widget from the example above::"
msgstr ""

msgid ""
"The FancyCalendar widget inherits all the assets from its parent widget. If "
"you don't want ``Media`` to be inherited in this way, add an "
"``extend=False`` declaration to the ``Media`` declaration::"
msgstr ""

msgid ""
"If you require even more control over inheritance, define your assets using "
"a :ref:`dynamic property <dynamic-property>`. Dynamic properties give you "
"complete control over which files are inherited, and which are not."
msgstr ""

msgid "``Media`` as a dynamic property"
msgstr "``Media`` sebagai sifat dinamis"

msgid ""
"If you need to perform some more sophisticated manipulation of asset "
"requirements, you can define the ``media`` property directly. This is done "
"by defining a widget property that returns an instance of ``forms.Media``.  "
"The constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword "
"arguments in the same format as that used in a static media definition."
msgstr ""

msgid ""
"For example, the static definition for our Calendar Widget could also be "
"defined in a dynamic fashion::"
msgstr ""

msgid ""
"See the section on `Media objects`_ for more details on how to construct "
"return values for dynamic ``media`` properties."
msgstr ""

msgid "Paths in asset definitions"
msgstr "Jalur dalam pengertian aset"

msgid ""
"Paths used to specify assets can be either relative or absolute. If a path "
"starts with ``/``, ``http://`` or ``https://``, it will be interpreted as an "
"absolute path, and left as-is. All other paths will be prepended with the "
"value of the appropriate prefix. If the :mod:`django.contrib.staticfiles` "
"app is installed, it will be used to serve assets."
msgstr ""

msgid ""
"Whether or not you use :mod:`django.contrib.staticfiles`,  the :setting:"
"`STATIC_URL` and :setting:`STATIC_ROOT` settings are required to render a "
"complete web page."
msgstr ""
"Apakah atau tidak anda menggunakan :mod:`django.contrib.staticfiles`, "
"pengaturan :setting:`STATIC_URL` dan :setting:`STATIC_ROOT` diwajibkan untuk "
"membangun halaman jaringan lengkap."

msgid ""
"To find the appropriate prefix to use, Django will check if the :setting:"
"`STATIC_URL` setting is not ``None`` and automatically fall back to using :"
"setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for your site "
"was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL` was "
"``None``::"
msgstr ""

msgid "But if :setting:`STATIC_URL` is ``'http://static.example.com/'``::"
msgstr ""
"Tetapi jika :setting:`STATIC_URL` adalah ``'http://static.example.com/'``::"

msgid ""
"Or if :mod:`~django.contrib.staticfiles` is configured using the :class:"
"`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage`::"
msgstr ""
"Atau jika :mod:`~django.contrib.staticfiles` dikonfigurasikan menggunakan :"
"class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage`::"

msgid "``Media`` objects"
msgstr "Obyek ``Media``"

msgid ""
"When you interrogate the ``media`` attribute of a widget or form, the value "
"that is returned is a ``forms.Media`` object. As we have already seen, the "
"string representation of a ``Media`` object is the HTML required to include "
"the relevant files in the ``<head>`` block of your HTML page."
msgstr ""

msgid "However, ``Media`` objects have some other interesting properties."
msgstr "Bagaimanapun, obyek ``Media`` mempunyai beberapa milik menarik lain."

msgid "Subsets of assets"
msgstr "Himpunan bagian dari aset"

msgid ""
"If you only want files of a particular type, you can use the subscript "
"operator to filter out a medium of interest. For example::"
msgstr ""

msgid ""
"When you use the subscript operator, the value that is returned is a new "
"``Media`` object -- but one that only contains the media of interest."
msgstr ""

msgid "Combining ``Media`` objects"
msgstr "Memadukan obyek ``Media``"

msgid ""
"``Media`` objects can also be added together. When two ``Media`` objects are "
"added, the resulting ``Media`` object contains the union of the assets "
"specified by both::"
msgstr ""

msgid "Order of assets"
msgstr "Urutan dari aset"

msgid ""
"The order in which assets are inserted into the DOM is often important. For "
"example, you may have a script that depends on jQuery. Therefore, combining "
"``Media`` objects attempts to preserve the relative order in which assets "
"are defined in each ``Media`` class."
msgstr ""

msgid ""
"Combining ``Media`` objects with assets in a conflicting order results in a "
"``MediaOrderConflictWarning``."
msgstr ""

msgid "``Media`` on Forms"
msgstr "``Media`` pada Form"

msgid ""
"Widgets aren't the only objects that can have ``media`` definitions -- forms "
"can also define ``media``. The rules for ``media`` definitions on forms are "
"the same as the rules for widgets: declarations can be static or dynamic; "
"path and inheritance rules for those declarations are exactly the same."
msgstr ""

msgid ""
"Regardless of whether you define a ``media`` declaration, *all* Form objects "
"have a ``media`` property. The default value for this property is the result "
"of adding the ``media`` definitions for all widgets that are part of the "
"form::"
msgstr ""

msgid ""
"If you want to associate additional assets with a form -- for example, CSS "
"for form layout -- add a ``Media`` declaration to the form::"
msgstr ""

msgid "Creating forms from models"
msgstr "Membuat formulir dari model"

msgid "``ModelForm``"
msgstr "``ModelForm``"

msgid ""
"If you're building a database-driven app, chances are you'll have forms that "
"map closely to Django models. For instance, you might have a ``BlogComment`` "
"model, and you want to create a form that lets people submit comments. In "
"this case, it would be redundant to define the field types in your form, "
"because you've already defined the fields in your model."
msgstr ""

msgid ""
"For this reason, Django provides a helper class that lets you create a "
"``Form`` class from a Django model."
msgstr ""

msgid ""
"The generated ``Form`` class will have a form field for every model field "
"specified, in the order specified in the ``fields`` attribute."
msgstr ""

msgid ""
"Each model field has a corresponding default form field. For example, a "
"``CharField`` on a model is represented as a ``CharField`` on a form. A "
"model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here "
"is the full list of conversions:"
msgstr ""
"Setiap bidang model mempunyai biadng formulir awalan sesuai. Sebagai contoh, "
"sebuah ``CharField`` pada sebuah model adalah diwakili sebagai ``CharField`` "
"pada formulir. Sebuah model ``ManyToManyField`` diwakilkan sebagai sebuah "
"``MultipleChoiceField``. Ini adalah daftar penuh dari perubahan:"

msgid "Model field"
msgstr "Bidang Model"

msgid "Form field"
msgstr "Bidang Formulir"

msgid ":class:`AutoField`"
msgstr ":class:`AutoField`"

msgid "Not represented in the form"
msgstr "Tidak muncul di formulir"

msgid ":class:`BigAutoField`"
msgstr ":class:`BigAutoField`"

msgid ":class:`BigIntegerField`"
msgstr ":class:`BigIntegerField`"

msgid ""
":class:`~django.forms.IntegerField` with ``min_value`` set to "
"-9223372036854775808 and ``max_value`` set to 9223372036854775807."
msgstr ""
":class:`~django.forms.IntegerField` dengan ``min_value`` disetel ke "
"-9223372036854775808 dan ``max_value`` disetel ke 9223372036854775807."

msgid ":class:`BinaryField`"
msgstr ":class:`BinaryField`"

msgid ""
":class:`~django.forms.CharField`, if :attr:`~.Field.editable` is set to "
"``True`` on the model field, otherwise not represented in the form."
msgstr ""
":class:`~django.forms.CharField`, jika :attr:`~.Field.editable` disetel "
"menjadi ``True`` pada bidang model, sebaliknya tidak diwakilkan dalam "
"formulir."

msgid ":class:`BooleanField`"
msgstr ":class:`BooleanField`"

msgid ""
":class:`~django.forms.BooleanField`, or :class:`~django.forms."
"NullBooleanField` if ``null=True``."
msgstr ""
":class:`~django.forms.BooleanField`, atau :class:`~django.forms."
"NullBooleanField` jika ``null=True``."

msgid ":class:`CharField`"
msgstr ":class:`CharField`"

msgid ""
":class:`~django.forms.CharField` with ``max_length`` set to the model "
"field's ``max_length`` and :attr:`~django.forms.CharField.empty_value` set "
"to ``None`` if ``null=True``."
msgstr ""
":class:`~django.forms.CharField` with ``max_length`` mensetel pada "
"``max_length`` bidang model dan :attr:`~django.forms.CharField.empty_value` "
"disetel menjadi ``None`` jika ``null=True``."

msgid ":class:`DateField`"
msgstr ":class:`DateField`"

msgid ":class:`~django.forms.DateField`"
msgstr ":class:`~django.forms.DateField`"

msgid ":class:`DateTimeField`"
msgstr ":class:`DateTimeField`"

msgid ":class:`~django.forms.DateTimeField`"
msgstr ":class:`~django.forms.DateTimeField`"

msgid ":class:`DecimalField`"
msgstr ":class:`DecimalField`"

msgid ":class:`~django.forms.DecimalField`"
msgstr ":class:`~django.forms.DecimalField`"

msgid ":class:`DurationField`"
msgstr ":class:`DurationField`"

msgid ":class:`~django.forms.DurationField`"
msgstr ":class:`~django.forms.DurationField`"

msgid ":class:`EmailField`"
msgstr ":class:`EmailField`"

msgid ":class:`~django.forms.EmailField`"
msgstr ":class:`~django.forms.EmailField`"

msgid ":class:`FileField`"
msgstr ":class:`FileField`"

msgid ":class:`~django.forms.FileField`"
msgstr ":class:`~django.forms.FileField`"

msgid ":class:`FilePathField`"
msgstr ":class:`FilePathField`"

msgid ":class:`~django.forms.FilePathField`"
msgstr ":class:`~django.forms.FilePathField`"

msgid ":class:`FloatField`"
msgstr ":class:`FloatField`"

msgid ":class:`~django.forms.FloatField`"
msgstr ":class:`~django.forms.FloatField`"

msgid ":class:`ForeignKey`"
msgstr ":class:`ForeignKey`"

msgid ":class:`~django.forms.ModelChoiceField` (see below)"
msgstr ":class:`~django.forms.ModelChoiceField` (lihat dibawah)"

msgid ":class:`ImageField`"
msgstr ":class:`ImageField`"

msgid ":class:`~django.forms.ImageField`"
msgstr ":class:`~django.forms.ImageField`"

msgid ":class:`IntegerField`"
msgstr ":class:`IntegerField`"

msgid ":class:`~django.forms.IntegerField`"
msgstr ":class:`~django.forms.IntegerField`"

msgid "``IPAddressField``"
msgstr "``IPAddressField``"

msgid ":class:`GenericIPAddressField`"
msgstr ":class:`GenericIPAddressField`"

msgid ":class:`~django.forms.GenericIPAddressField`"
msgstr ":class:`~django.forms.GenericIPAddressField`"

msgid ":class:`JSONField`"
msgstr ":class:`JSONField`"

msgid ":class:`~django.forms.JSONField`"
msgstr ":class:`~django.forms.JSONField`"

msgid ":class:`ManyToManyField`"
msgstr ":class:`ManyToManyField`"

msgid ":class:`~django.forms.ModelMultipleChoiceField` (see below)"
msgstr ":class:`~django.forms.ModelMultipleChoiceField` (lihat dibawah)"

msgid ":class:`PositiveBigIntegerField`"
msgstr ":class:`PositiveBigIntegerField`"

msgid ":class:`PositiveIntegerField`"
msgstr ":class:`PositiveIntegerField`"

msgid ":class:`PositiveSmallIntegerField`"
msgstr ":class:`PositiveSmallIntegerField`"

msgid ":class:`SlugField`"
msgstr ":class:`SlugField`"

msgid ":class:`~django.forms.SlugField`"
msgstr ":class:`~django.forms.SlugField`"

msgid ":class:`SmallAutoField`"
msgstr ":class:`SmallAutoField`"

msgid ":class:`SmallIntegerField`"
msgstr ":class:`SmallIntegerField`"

msgid ":class:`TextField`"
msgstr ":class:`TextField`"

msgid ":class:`~django.forms.CharField` with ``widget=forms.Textarea``"
msgstr ":class:`~django.forms.CharField` dengan ``widget=forms.Textarea``"

msgid ":class:`TimeField`"
msgstr ":class:`TimeField`"

msgid ":class:`~django.forms.TimeField`"
msgstr ":class:`~django.forms.TimeField`"

msgid ":class:`URLField`"
msgstr ":class:`URLField`"

msgid ":class:`~django.forms.URLField`"
msgstr ":class:`~django.forms.URLField`"

msgid ":class:`UUIDField`"
msgstr ":class:`UUIDField`"

msgid ":class:`~django.forms.UUIDField`"
msgstr ":class:`~django.forms.UUIDField`"

msgid ""
"As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field "
"types are special cases:"
msgstr ""
"Seperti yang mungkin anda duga, jenis tipe model ``ForeignKey`` dan "
"``ManyToManyField`` adalah kasus-kasus berbeda:"

msgid ""
"``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is "
"a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""
"``ForeignKey`` diwakili oleh ``django.forms.ModelChoiceField``, yaitu sebuah "
"``ChoiceField`` yang pilihan-pilihan adalah sebuah model ``QuerySet``."

msgid ""
"``ManyToManyField`` is represented by ``django.forms."
"ModelMultipleChoiceField``, which is a ``MultipleChoiceField`` whose choices "
"are a model ``QuerySet``."
msgstr ""
"``ManyToManyField`` diwakili oleh ``django.forms.ModelMultipleChoiceField``, "
"dimana ``MultipleChoiceField`` yang pilihan-pilihannya adalah sebuah model "
"``QuerySet``."

msgid "In addition, each generated form field has attributes set as follows:"
msgstr ""
"Sebagai tambahan, setiap bidang formulir dibangkitkan mempunyai atribut "
"disetel sebagai berikut:"

msgid ""
"If the model field has ``blank=True``, then ``required`` is set to ``False`` "
"on the form field. Otherwise, ``required=True``."
msgstr ""
"Jika bidang model mempunyai ``blank=True``, maka ``required`` disetel ke "
"``False`` pada bidang formulir. Sebaliknya ``required=True``."

msgid ""
"The form field's ``label`` is set to the ``verbose_name`` of the model "
"field, with the first character capitalized."
msgstr ""

msgid ""
"The form field's ``help_text`` is set to the ``help_text`` of the model "
"field."
msgstr ""
"``help_text`` bidang formulir disetel pada ``help_text`` dari bidang model."

msgid ""
"If the model field has ``choices`` set, then the form field's ``widget`` "
"will be set to ``Select``, with choices coming from the model field's "
"``choices``. The choices will normally include the blank choice which is "
"selected by default. If the field is required, this forces the user to make "
"a selection. The blank choice will not be included if the model field has "
"``blank=False`` and an explicit ``default`` value (the ``default`` value "
"will be initially selected instead)."
msgstr ""

msgid ""
"Finally, note that you can override the form field used for a given model "
"field. See `Overriding the default fields`_ below."
msgstr ""
"Akhirnya, catat bahwa anda dapat menimpa bidang formulir digunakan untuk "
"bidang model diberikan. Lihat `Overriding the default fields`_ below."

msgid "Consider this set of models::"
msgstr "Pertimbangkan kumpulan model ini::"

msgid ""
"With these models, the ``ModelForm`` subclasses above would be roughly "
"equivalent to this (the only difference being the ``save()`` method, which "
"we'll discuss in a moment.)::"
msgstr ""

msgid "Validation on a ``ModelForm``"
msgstr "Pengesahan pada sebuah ``ModelForm``"

msgid "There are two main steps involved in validating a ``ModelForm``:"
msgstr "Terdapat dua langkah utama dilibatkan dalam ``ModelForm``:"

msgid ":doc:`Validating the form </ref/forms/validation>`"
msgstr ":doc:`Validating the form </ref/forms/validation>`"

msgid ":ref:`Validating the model instance <validating-objects>`"
msgstr ":ref:`Validating the model instance 1`"

msgid ""
"Just like normal form validation, model form validation is triggered "
"implicitly when calling :meth:`~django.forms.Form.is_valid()` or accessing "
"the :attr:`~django.forms.Form.errors` attribute and explicitly when calling "
"``full_clean()``, although you will typically not use the latter method in "
"practice."
msgstr ""

msgid ""
"``Model`` validation (:meth:`Model.full_clean() <django.db.models.Model."
"full_clean()>`) is triggered from within the form validation step, right "
"after the form's ``clean()`` method is called."
msgstr ""
"Pengesahan ``Model`` (:meth:`Model.full_clean() <django.db.models.Model."
"full_clean()>`) dibangkitkan dari dalam langkah formulir pengesahan, tepat "
"setelah metode formulir ``clean()`` dipanggil."

msgid ""
"The cleaning process modifies the model instance passed to the ``ModelForm`` "
"constructor in various ways. For instance, any date fields on the model are "
"converted into actual date objects. Failed validation may leave the "
"underlying model instance in an inconsistent state and therefore it's not "
"recommended to reuse it."
msgstr ""

msgid "Overriding the ``clean()`` method"
msgstr "Menimpa metode ``clean()``"

msgid ""
"You can override the ``clean()`` method on a model form to provide "
"additional validation in the same way you can on a normal form."
msgstr ""

msgid ""
"A model form instance attached to a model object will contain an "
"``instance`` attribute that gives its methods access to that specific model "
"instance."
msgstr ""

msgid ""
"The ``ModelForm.clean()`` method sets a flag that makes the :ref:`model "
"validation <validating-objects>` step validate the uniqueness of model "
"fields that are marked as ``unique``, ``unique_together`` or "
"``unique_for_date|month|year``."
msgstr ""

msgid ""
"If you would like to override the ``clean()`` method and maintain this "
"validation, you must call the parent class's ``clean()`` method."
msgstr ""

msgid "Interaction with model validation"
msgstr "Interaksi dengan pengecekan model"

msgid ""
"As part of the validation process, ``ModelForm`` will call the ``clean()`` "
"method of each field on your model that has a corresponding field on your "
"form. If you have excluded any model fields, validation will not be run on "
"those fields. See the :doc:`form validation </ref/forms/validation>` "
"documentation for more on how field cleaning and validation work."
msgstr ""
"Sebagai bagian dari pengolahan pengesahan. ``ModelForm`` akan memanggil "
"metode ``clean()`` untuk setiap bidang pada model anda yang mempunyai bidang "
"sesuai pada formulir anda. Jika anda telah tidak menyertakan bidang model "
"apapun, pengesahan tidak akan berjalan pada bidang-bidang tersebut. Lihat "
"dokumentasi :doc:`form validation 1` untuk lebih pada bagimana bidang "
"membersihkan dan pengesahan bekerja."

msgid ""
"The model's ``clean()`` method will be called before any uniqueness checks "
"are made. See :ref:`Validating objects <validating-objects>` for more "
"information on the model's ``clean()`` hook."
msgstr ""
"Metode ``clean()`` model akan dipanggil sebelum pemeriksanaan keunikan "
"apapun dibuat. Lihat :ref:`Validating objects <validating-objects>` untuk "
"informasi lebih pada tautan ``clean()`` model."

msgid "Considerations regarding model's ``error_messages``"
msgstr "Pertimbangan mengenai ``error_messages`` model"

msgid ""
"Error messages defined at the :attr:`form field <django.forms.Field."
"error_messages>` level or at the :ref:`form Meta <modelforms-overriding-"
"default-fields>` level always take precedence over the error messages "
"defined at the :attr:`model field <django.db.models.Field.error_messages>` "
"level."
msgstr ""

msgid ""
"Error messages  defined on :attr:`model fields <django.db.models.Field."
"error_messages>` are only used when the ``ValidationError`` is raised during "
"the :ref:`model validation <validating-objects>` step and no corresponding "
"error messages are defined at the form level."
msgstr ""
"Pesan-pesan kesalahan ditentukan pada :attr:`model fields <django.db.models."
"Field.error_messages>` hanya digunakan ketika ``ValidationError`` "
"dimunculkan selama langkah :ref:`model validation 1` dan tidak ada pesan "
"kesalahan sesuai ditentukan pada tingkatan formulir."

msgid ""
"You can override the error messages from ``NON_FIELD_ERRORS`` raised by "
"model validation by adding the :data:`~django.core.exceptions."
"NON_FIELD_ERRORS` key to the ``error_messages`` dictionary of the "
"``ModelForm``’s inner ``Meta`` class::"
msgstr ""

msgid "The ``save()`` method"
msgstr "Cara ``save()``"

msgid ""
"Every ``ModelForm`` also has a ``save()`` method. This method creates and "
"saves a database object from the data bound to the form. A subclass of "
"``ModelForm`` can accept an existing model instance as the keyword argument "
"``instance``; if this is supplied, ``save()`` will update that instance. If "
"it's not supplied, ``save()`` will create a new instance of the specified "
"model::"
msgstr ""

msgid ""
"Note that if the form :ref:`hasn't been validated <validation-on-"
"modelform>`, calling ``save()`` will do so by checking ``form.errors``. A "
"``ValueError`` will be raised if the data in the form doesn't validate -- i."
"e., if ``form.errors`` evaluates to ``True``."
msgstr ""

msgid ""
"If an optional field doesn't appear in the form's data, the resulting model "
"instance uses the model field :attr:`~django.db.models.Field.default`, if "
"there is one, for that field. This behavior doesn't apply to fields that "
"use :class:`~django.forms.CheckboxInput`, :class:`~django.forms."
"CheckboxSelectMultiple`, or :class:`~django.forms.SelectMultiple` (or any "
"custom widget whose :meth:`~django.forms.Widget.value_omitted_from_data` "
"method always returns ``False``) since an unchecked checkbox and unselected "
"``<select multiple>`` don't appear in the data of an HTML form submission. "
"Use a custom form field or widget if you're designing an API and want the "
"default fallback behavior for a field that uses one of these widgets."
msgstr ""

msgid ""
"This ``save()`` method accepts an optional ``commit`` keyword argument, "
"which accepts either ``True`` or ``False``. If you call ``save()`` with "
"``commit=False``, then it will return an object that hasn't yet been saved "
"to the database. In this case, it's up to you to call ``save()`` on the "
"resulting model instance. This is useful if you want to do custom processing "
"on the object before saving it, or if you want to use one of the "
"specialized :ref:`model saving options <ref-models-force-insert>`. "
"``commit`` is ``True`` by default."
msgstr ""

msgid ""
"Another side effect of using ``commit=False`` is seen when your model has a "
"many-to-many relation with another model. If your model has a many-to-many "
"relation and you specify ``commit=False`` when you save a form, Django "
"cannot immediately save the form data for the many-to-many relation. This is "
"because it isn't possible to save many-to-many data for an instance until "
"the instance exists in the database."
msgstr ""

msgid ""
"To work around this problem, every time you save a form using "
"``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` "
"subclass. After you've manually saved the instance produced by the form, you "
"can invoke ``save_m2m()`` to save the many-to-many form data. For example::"
msgstr ""

msgid ""
"Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. "
"When you use a ``save()`` on a form, all data -- including many-to-many data "
"-- is saved without the need for any additional method calls.  For example::"
msgstr ""

msgid ""
"Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works "
"exactly the same way as any other ``forms`` form. For example, the "
"``is_valid()`` method is used to check for validity, the ``is_multipart()`` "
"method is used to determine whether a form requires multipart file upload "
"(and hence whether ``request.FILES`` must be passed to the form), etc. See :"
"ref:`binding-uploaded-files` for more information."
msgstr ""

msgid "Selecting the fields to use"
msgstr "Memilih bidang untuk digunakan"

msgid ""
"It is strongly recommended that you explicitly set all fields that should be "
"edited in the form using the ``fields`` attribute. Failure to do so can "
"easily lead to security problems when a form unexpectedly allows a user to "
"set certain fields, especially when new fields are added to a model. "
"Depending on how the form is rendered, the problem may not even be visible "
"on the web page."
msgstr ""

msgid ""
"The alternative approach would be to include all fields automatically, or "
"remove only some. This fundamental approach is known to be much less secure "
"and has led to serious exploits on major websites (e.g. `GitHub <https://"
"github.blog/2012-03-04-public-key-security-vulnerability-and-mitigation/>`_)."
msgstr ""

msgid ""
"There are, however, two shortcuts available for cases where you can "
"guarantee these security concerns do not apply to you:"
msgstr ""

msgid ""
"Set the ``fields`` attribute to the special value ``'__all__'`` to indicate "
"that all fields in the model should be used. For example::"
msgstr ""
"Setel atribut ``fields`` ke nilai khusus ``'__all__'`` untuk menunjukkan "
"bahwa semua bidang-bidang dalam model harus digunakan. Sebagai contoh::"

msgid ""
"Set the ``exclude`` attribute of the ``ModelForm``’s inner ``Meta`` class to "
"a list of fields to be excluded from the form."
msgstr ""
"Setel atribut ``exclude`` dari kelas ``Meta`` sebelah dalam ``ModelForm`` "
"pada daftar dari bidang untuk tidak disertakan dari formulir."

msgid ""
"Since the ``Author`` model has the 3 fields ``name``, ``title`` and "
"``birth_date``, this will result in the fields ``name`` and ``birth_date`` "
"being present on the form."
msgstr ""

msgid ""
"If either of these are used, the order the fields appear in the form will be "
"the order the fields are defined in the model, with ``ManyToManyField`` "
"instances appearing last."
msgstr ""

msgid ""
"In addition, Django applies the following rule: if you set "
"``editable=False`` on the model field, *any* form created from the model via "
"``ModelForm`` will not include that field."
msgstr ""

msgid ""
"Any fields not included in a form by the above logic will not be set by the "
"form's ``save()`` method. Also, if you manually add the excluded fields back "
"to the form, they will not be initialized from the model instance."
msgstr ""

msgid ""
"Django will prevent any attempt to save an incomplete model, so if the model "
"does not allow the missing fields to be empty, and does not provide a "
"default value for the missing fields, any attempt to ``save()`` a "
"``ModelForm`` with missing fields will fail.  To avoid this failure, you "
"must instantiate your model with initial values for the missing, but "
"required fields::"
msgstr ""

msgid ""
"Alternatively, you can use ``save(commit=False)`` and manually set any extra "
"required fields::"
msgstr ""
"Cara lain, anda dapat menggunakan ``save(commit=False)`` dan secara manul "
"menyetel bidang lain yang dibutuhkan::"

msgid ""
"See the `section on saving forms`_ for more details on using "
"``save(commit=False)``."
msgstr ""
"Lihat `section on saving forms`_ untuk rincian lebih dalam menggunakan "
"``save(commit=False)``."

msgid "Overriding the default fields"
msgstr "Mengesampingan nilai awal"

msgid ""
"The default field types, as described in the `Field types`_ table above, are "
"sensible defaults. If you have a ``DateField`` in your model, chances are "
"you'd want that to be represented as a ``DateField`` in your form. But "
"``ModelForm`` gives you the flexibility of changing the form field for a "
"given model."
msgstr ""

msgid ""
"To specify a custom widget for a field, use the ``widgets`` attribute of the "
"inner ``Meta`` class. This should be a dictionary mapping field names to "
"widget classes or instances."
msgstr ""
"Untuk menentukan widget penyesuaian untuk bidang, gunakan atribut "
"``widgets`` dari kelas ``Meta`` sebelah dalam. Ini harus berupa nama bidang "
"pemetaan kamus pada kelas widget atau instance."

msgid ""
"For example, if you want the ``CharField`` for the ``name`` attribute of "
"``Author`` to be represented by a ``<textarea>`` instead of its default "
"``<input type=\"text\">``, you can override the field's widget::"
msgstr ""

msgid ""
"The ``widgets`` dictionary accepts either widget instances (e.g., "
"``Textarea(...)``) or classes (e.g., ``Textarea``). Note that the "
"``widgets`` dictionary is ignored for a model field with a non-empty "
"``choices`` attribute. In this case, you must override the form field to use "
"a different widget."
msgstr ""

msgid ""
"Similarly, you can specify the ``labels``, ``help_texts`` and "
"``error_messages`` attributes of the inner ``Meta`` class if you want to "
"further customize a field."
msgstr ""
"Demikian pula, anda dapat menentukan atribut ``labels``, ``help_texts`` dan "
"``error_messages`` dari kelas ``Meta`` sebelah dalam jika anda ingin lebih "
"lanjut menyesuaikan bidang."

msgid ""
"For example if you wanted to customize the wording of all user facing "
"strings for the ``name`` field::"
msgstr ""
"Sebagai contoh jika anda ingin menyesuaikan kata-kata dari semua pengguna "
"menghadai string untuk bidang ``name``::"

msgid ""
"You can also specify ``field_classes`` to customize the type of fields "
"instantiated by the form."
msgstr ""
"Anda dapat juga menentukan ``field_classes`` untuk menyesuaikan jenis dari "
"bidang terinstansiasi berdasarkan formulir."

msgid ""
"For example, if you wanted to use ``MySlugFormField`` for the ``slug`` "
"field, you could do the following::"
msgstr ""
"Sebagai contoh, jika anda ingin menggunakan ``MySlugFormField`` untuk bidang "
"``slug``, anda dapat melakukan berikut::"

msgid ""
"Finally, if you want complete control over of a field -- including its type, "
"validators, required, etc. -- you can do this by declaratively specifying "
"fields like you would in a regular ``Form``."
msgstr ""

msgid ""
"If you want to specify a field's validators, you can do so by defining the "
"field declaratively and setting its ``validators`` parameter::"
msgstr ""

msgid ""
"When you explicitly instantiate a form field like this, it is important to "
"understand how ``ModelForm`` and regular ``Form`` are related."
msgstr ""

msgid ""
"``ModelForm`` is a regular ``Form`` which can automatically generate certain "
"fields. The fields that are automatically generated depend on the content of "
"the ``Meta`` class and on which fields have already been defined "
"declaratively. Basically, ``ModelForm`` will **only** generate fields that "
"are **missing** from the form, or in other words, fields that weren't "
"defined declaratively."
msgstr ""

msgid ""
"Fields defined declaratively are left as-is, therefore any customizations "
"made to ``Meta`` attributes such as ``widgets``, ``labels``, ``help_texts``, "
"or ``error_messages`` are ignored; these only apply to fields that are "
"generated automatically."
msgstr ""

msgid ""
"Similarly, fields defined declaratively do not draw their attributes like "
"``max_length`` or ``required`` from the corresponding model. If you want to "
"maintain the behavior specified in the model, you must set the relevant "
"arguments explicitly when declaring the form field."
msgstr ""
"Mirip, bidang-bidang ditentukan menerangkan tidak menggambar atribut mereka "
"seperti ``max_length`` atau ``required`` dari model sesuai Jika anda ingin "
"merawat perilaku ditentukan dalam model, anda harus mensetel argumen terkait "
"secara jelas ketika menyatakan bidang formulir."

msgid "For example, if the ``Article`` model looks like this::"
msgstr "Sebagai contoh, jika model ``Article`` kelihatan seperti ini::"

msgid ""
"and you want to do some custom validation for ``headline``, while keeping "
"the ``blank`` and ``help_text`` values as specified, you might define "
"``ArticleForm`` like this::"
msgstr ""

msgid ""
"You must ensure that the type of the form field can be used to set the "
"contents of the corresponding model field. When they are not compatible, you "
"will get a ``ValueError`` as no implicit conversion takes place."
msgstr ""
"Anda harus memastikan bahwa jenis dari biadng formulir dapat digunakan "
"menyetel isi dari bidang model sesuai. Ketika mereka tidak sepadan, anda "
"akan mendapatkan ``ValueError`` sebagai  peruahan bukan tersirat berlangsung."

msgid ""
"See the :doc:`form field documentation </ref/forms/fields>` for more "
"information on fields and their arguments."
msgstr ""
"Lihat  :doc:`dokumentasi bidang formulir </ref/forms/fields>` untuk lebih "
"informasi pada bidang dan argumen mereka."

msgid "Enabling localization of fields"
msgstr "Mengadakan lokalisasi bidang"

msgid ""
"By default, the fields in a ``ModelForm`` will not localize their data. To "
"enable localization for fields, you can use the ``localized_fields`` "
"attribute on the ``Meta`` class."
msgstr ""

msgid ""
"If ``localized_fields`` is set to the special value ``'__all__'``, all "
"fields will be localized."
msgstr ""
"Jika ``localized_fields`` disetel menjadi nilai khusus ``'__all__'``, semua "
"bidang akan dilokalkan."

msgid "Form inheritance"
msgstr "Warisan formulir"

msgid ""
"As with basic forms, you can extend and reuse ``ModelForms`` by inheriting "
"them. This is useful if you need to declare extra fields or extra methods on "
"a parent class for use in a number of forms derived from models. For "
"example, using the previous ``ArticleForm`` class::"
msgstr ""

msgid ""
"This creates a form that behaves identically to ``ArticleForm``, except "
"there's some extra validation and cleaning for the ``pub_date`` field."
msgstr ""

msgid ""
"You can also subclass the parent's ``Meta`` inner class if you want to "
"change the ``Meta.fields`` or ``Meta.exclude`` lists::"
msgstr ""
"Anda dapat juga mensubkelaskan kelas sebelah dalam ``Meta`` induk jika anda "
"ingin merubah daftar ``Meta.fields`` atau ``Meta.exclude``::"

msgid ""
"This adds the extra method from the ``EnhancedArticleForm`` and modifies the "
"original ``ArticleForm.Meta`` to remove one field."
msgstr ""

msgid "There are a couple of things to note, however."
msgstr "Terdapat sepasang hal untuk dicatat, bagaimanapun."

msgid ""
"Normal Python name resolution rules apply. If you have multiple base classes "
"that declare a ``Meta`` inner class, only the first one will be used. This "
"means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the "
"first parent, etc."
msgstr ""

msgid ""
"It's possible to inherit from both ``Form`` and ``ModelForm`` "
"simultaneously, however, you must ensure that ``ModelForm`` appears first in "
"the MRO. This is because these classes rely on different metaclasses and a "
"class can only have one metaclass."
msgstr ""

msgid ""
"It's possible to declaratively remove a ``Field`` inherited from a parent "
"class by setting the name to be ``None`` on the subclass."
msgstr ""

msgid ""
"You can only use this technique to opt out from a field defined "
"declaratively by a parent class; it won't prevent the ``ModelForm`` "
"metaclass from generating a default field. To opt-out from default fields, "
"see :ref:`modelforms-selecting-fields`."
msgstr ""

msgid "Providing initial values"
msgstr "Menyediakan nilai awal"

msgid ""
"As with regular forms, it's possible to specify initial data for forms by "
"specifying an ``initial`` parameter when instantiating the form. Initial "
"values provided this way will override both initial values from the form "
"field and values from an attached model instance. For example::"
msgstr ""

msgid "ModelForm factory function"
msgstr "Fungsi pabrik ModelForm"

msgid ""
"You can create forms from a given model using the standalone function :func:"
"`~django.forms.models.modelform_factory`, instead of using a class "
"definition. This may be more convenient if you do not have many "
"customizations to make::"
msgstr ""
"Anda dapat membuat formulir dari model yang diberikan menggunakan fungsi "
"berdiri sendiri :func:`~django.forms.models.modelform_factory`, daripada "
"menggunakan pengertian kelas. Ini mungkin lebih nyaman jika anda tidak "
"memiliki banyak penyesuaian untuk dibuat::"

msgid ""
"This can also be used to make modifications to existing forms, for example "
"by specifying the widgets to be used for a given field::"
msgstr ""

msgid ""
"The fields to include can be specified using the ``fields`` and ``exclude`` "
"keyword arguments, or the corresponding attributes on the ``ModelForm`` "
"inner ``Meta`` class. Please see the ``ModelForm`` :ref:`modelforms-"
"selecting-fields` documentation."
msgstr ""
"Bidang-bidang untuk disertakan dapat ditentukan menggunakan argumen "
"katakunci ``fields`` dan ``exclude``, atau atribut-atribut sesuai pada "
"``ModelForm`` didalam kelas ``Meta``. Harap lihat dokumentasi :ref:"
"`modelforms-selecting-fields` ``ModelForm``."

msgid "... or enable localization for specific fields::"
msgstr "... atau adakan lokalisasi untuk bidang khusus::"

msgid "Model formsets"
msgstr ""

msgid ""
"Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a "
"couple of enhanced formset classes to make working with Django models more "
"convenient. Let's reuse the ``Author`` model from above::"
msgstr ""

msgid ""
"Using ``fields`` restricts the formset to use only the given fields. "
"Alternatively, you can take an \"opt-out\" approach, specifying which fields "
"to exclude::"
msgstr ""

msgid ""
"This will create a formset that is capable of working with the data "
"associated with the ``Author`` model. It works just like a regular formset::"
msgstr ""

msgid ""
":func:`~django.forms.models.modelformset_factory` uses :func:`~django.forms."
"formsets.formset_factory` to generate formsets. This means that a model "
"formset is an extension of a basic formset that knows how to interact with a "
"particular model."
msgstr ""
":func:`~django.forms.models.modelformset_factory` menggunakan :func:`~django."
"forms.formsets.formset_factory` untuk membangkitkan formset. Ini berarti "
"bahwa model formset adalah perpanjangan dari formset dasar yang mengetahui "
"bagaimana berinteraksi dengan model tertentu."

msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, forms "
"generated by a formset factory will contain a parent link field (by default "
"``<parent_model_name>_ptr``) instead of an ``id`` field."
msgstr ""

msgid "Changing the queryset"
msgstr "Merubah queryset"

msgid ""
"By default, when you create a formset from a model, the formset will use a "
"queryset that includes all objects in the model (e.g., ``Author.objects."
"all()``). You can override this behavior by using the ``queryset`` argument::"
msgstr ""

msgid ""
"Alternatively, you can create a subclass that sets ``self.queryset`` in "
"``__init__``::"
msgstr ""
"Alternatifnya, anda dapat membuat sub kelas yang mensetel ``self.queryset`` "
"dalam ``__init__``::"

msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function::"
msgstr "Kemudian, lewati kelas ``BaseAuthorFormSet`` anda ke fungsi pabrik::"

msgid ""
"If you want to return a formset that doesn't include *any* pre-existing "
"instances of the model, you can specify an empty QuerySet::"
msgstr ""

msgid "Changing the form"
msgstr "Merubah formulir"

msgid ""
"By default, when you use ``modelformset_factory``, a model form will be "
"created using :func:`~django.forms.models.modelform_factory`. Often, it can "
"be useful to specify a custom model form. For example, you can create a "
"custom model form that has custom validation::"
msgstr ""

msgid "Then, pass your model form to the factory function::"
msgstr "Kemudian, lewati formulir model anda ke fungsi pabrik::"

msgid ""
"It is not always necessary to define a custom model form. The "
"``modelformset_factory`` function has several arguments which are passed "
"through to ``modelform_factory``, which are described below."
msgstr ""

msgid "Specifying widgets to use in the form with ``widgets``"
msgstr "Menentukan widget yang digunakan dalam formulir dengan ``widgets``"

msgid ""
"Using the ``widgets`` parameter, you can specify a dictionary of values to "
"customize the ``ModelForm``’s widget class for a particular field. This "
"works the same way as the ``widgets`` dictionary on the inner ``Meta`` class "
"of a ``ModelForm`` works::"
msgstr ""

msgid "Enabling localization for fields with ``localized_fields``"
msgstr "Mengadakan lokalisasi untuk bidang dengan ``localized_fields``"

msgid ""
"Using the ``localized_fields`` parameter, you can enable localization for "
"fields in the form."
msgstr ""
"Menggunakan parameter ``localized_fields``, anda dapat mengadakan lokalisasi "
"untuk bidang ini dalam formulir."

msgid ""
"As with regular formsets, it's possible to :ref:`specify initial data "
"<formsets-initial-data>` for forms in the formset by specifying an "
"``initial`` parameter when instantiating the model formset class returned "
"by :func:`~django.forms.models.modelformset_factory`. However, with model "
"formsets, the initial values only apply to extra forms, those that aren't "
"attached to an existing model instance. If the length of ``initial`` exceeds "
"the number of extra forms, the excess initial data is ignored. If the extra "
"forms with initial data aren't changed by the user, they won't be validated "
"or saved."
msgstr ""

msgid "Saving objects in the formset"
msgstr ""

msgid ""
"As with a ``ModelForm``, you can save the data as a model object. This is "
"done with the formset's ``save()`` method::"
msgstr ""

msgid ""
"The ``save()`` method returns the instances that have been saved to the "
"database. If a given instance's data didn't change in the bound data, the "
"instance won't be saved to the database and won't be included in the return "
"value (``instances``, in the above example)."
msgstr ""

msgid ""
"When fields are missing from the form (for example because they have been "
"excluded), these fields will not be set by the ``save()`` method. You can "
"find more information about this restriction, which also holds for regular "
"``ModelForms``, in `Selecting the fields to use`_."
msgstr ""

msgid "Pass ``commit=False`` to return the unsaved model instances::"
msgstr ""
"Lewati ``commit=False`` untuk mengembalikan instance model tidak tersimpan::"

msgid ""
"This gives you the ability to attach data to the instances before saving "
"them to the database. If your formset contains a ``ManyToManyField``, you'll "
"also need to call ``formset.save_m2m()`` to ensure the many-to-many "
"relationships are saved properly."
msgstr ""

msgid ""
"After calling ``save()``, your model formset will have three new attributes "
"containing the formset's changes:"
msgstr ""

msgid "Limiting the number of editable objects"
msgstr "Membatasi angka dari obyek dapat di sunting"

msgid ""
"As with regular formsets, you can use the ``max_num`` and ``extra`` "
"parameters to :func:`~django.forms.models.modelformset_factory` to limit the "
"number of extra forms displayed."
msgstr ""

msgid "``max_num`` does not prevent existing objects from being displayed::"
msgstr "``max_num`` tidak mencegah obyek yang ada dari menjadi ditampilkan::"

msgid ""
"Also, ``extra=0`` doesn't prevent creation of new model instances as you "
"can :ref:`add additional forms with JavaScript <understanding-the-"
"managementform>` or send additional POST data. Formsets :ticket:`don't yet "
"provide functionality <26142>` for an \"edit only\" view that prevents "
"creation of new instances."
msgstr ""

msgid ""
"If the value of ``max_num`` is greater than the number of existing related "
"objects, up to ``extra`` additional blank forms will be added to the "
"formset, so long as the total number of forms does not exceed ``max_num``::"
msgstr ""

msgid "Using a model formset in a view"
msgstr ""

msgid ""
"Model formsets are very similar to formsets. Let's say we want to present a "
"formset to edit ``Author`` model instances::"
msgstr ""

msgid ""
"As you can see, the view logic of a model formset isn't drastically "
"different than that of a \"normal\" formset. The only difference is that we "
"call ``formset.save()`` to save the data into the database. (This was "
"described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""

msgid "Overriding ``clean()`` on a ``ModelFormSet``"
msgstr "Menimpa ``clean()`` pada sebuah ``ModelFormSet``"

msgid ""
"Just like with ``ModelForms``, by default the ``clean()`` method of a "
"``ModelFormSet`` will validate that none of the items in the formset violate "
"the unique constraints on your model (either ``unique``, ``unique_together`` "
"or ``unique_for_date|month|year``).  If you want to override the ``clean()`` "
"method on a ``ModelFormSet`` and maintain this validation, you must call the "
"parent class's ``clean`` method::"
msgstr ""

msgid ""
"Also note that by the time you reach this step, individual model instances "
"have already been created for each ``Form``. Modifying a value in ``form."
"cleaned_data`` is not sufficient to affect the saved value. If you wish to "
"modify a value in ``ModelFormSet.clean()`` you must modify ``form."
"instance``::"
msgstr ""

msgid "Using a custom queryset"
msgstr "Menggunakan queryset penyesuaian"

msgid ""
"As stated earlier, you can override the default queryset used by the model "
"formset::"
msgstr ""
"Seperti dinyatakan sebelumnya, anda dapat menimpa queryset awalan digunakan "
"oleh formset model::"

msgid ""
"Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET`` "
"cases in this example."
msgstr ""
"Catat bahwa kami melewatkan argumen ``queryset`` dalam kedua kasus ``POST`` "
"dan ``GET`` dalam contoh ini."

msgid "Using the formset in the template"
msgstr "Menggunakan formset dalam cetakan"

msgid "There are three ways to render a formset in a Django template."
msgstr ""
"Ada tiga cara untuk mengirim sebuah formset dalam sebuah cetakan Django."

msgid "First, you can let the formset do most of the work::"
msgstr ""
"Pertama, anda dapat membiarkan formset melakukan sebagian besar pekerjaan::"

msgid ""
"Second, you can manually render the formset, but let the form deal with "
"itself::"
msgstr ""
"Kedua, anda dapat secara manual membangun formset, tetapi membiarkan "
"formulir berurusan dengan itu sendiri::"

msgid ""
"When you manually render the forms yourself, be sure to render the "
"management form as shown above. See the :ref:`management form documentation "
"<understanding-the-managementform>`."
msgstr ""

msgid "Third, you can manually render each field::"
msgstr "Ketiga, anda dapat secara manual membangun setiap bidang::"

msgid ""
"If you opt to use this third method and you don't iterate over the fields "
"with a ``{% for %}`` loop, you'll need to render the primary key field. For "
"example, if you were rendering the ``name`` and ``age`` fields of a model::"
msgstr ""

msgid ""
"Notice how we need to explicitly render ``{{ form.id }}``. This ensures that "
"the model formset, in the ``POST`` case, will work correctly. (This example "
"assumes a primary key named ``id``. If you've explicitly defined your own "
"primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""

msgid "Inline formsets"
msgstr "Formset berderet"

msgid ""
"Inline formsets is a small abstraction layer on top of model formsets. These "
"simplify the case of working with related objects via a foreign key. Suppose "
"you have these two models::"
msgstr ""
"Formset berderet adalah lapisan abstraksi kecil pada atas formset model. Ini "
"menyederhanakan kasus dari bekerja dengan obyek-obyek terkait melalui sebuah "
"foreign key. Seandainya anda mempunyai dua model ini::"

msgid ""
"If you want to create a formset that allows you to edit books belonging to a "
"particular author, you could do this::"
msgstr ""

msgid ""
"``BookFormSet``'s :ref:`prefix <formset-prefix>` is ``'book_set'`` (``<model "
"name>_set`` ). If ``Book``'s ``ForeignKey`` to ``Author`` has a :attr:"
"`~django.db.models.ForeignKey.related_name`, that's used instead."
msgstr ""

msgid ""
":func:`~django.forms.models.inlineformset_factory` uses :func:`~django.forms."
"models.modelformset_factory` and marks ``can_delete=True``."
msgstr ""
":func:`~django.forms.models.inlineformset_factory` menggunakan :func:"
"`~django.forms.models.modelformset_factory` dan menandai ``can_delete=True``."

msgid ""
":ref:`Manually rendered can_delete and can_order <manually-rendered-can-"
"delete-and-can-order>`."
msgstr ""
":ref:`Manually rendered can_delete and can_order <manually-rendered-can-"
"delete-and-can-order>`."

msgid "Overriding methods on an ``InlineFormSet``"
msgstr "Metode menimpa pada ``InlineFormSet``"

msgid ""
"When overriding methods on ``InlineFormSet``, you should subclass :class:"
"`~models.BaseInlineFormSet` rather than :class:`~models.BaseModelFormSet`."
msgstr ""

msgid "For example, if you want to override ``clean()``::"
msgstr "Sebagai contoh, jika anda ingin menimpa ``clean()``::"

msgid "See also :ref:`model-formsets-overriding-clean`."
msgstr "Lihat juga :ref:`model-formsets-overriding-clean`."

msgid ""
"Then when you create your inline formset, pass in the optional argument "
"``formset``::"
msgstr ""
"Kemudian ketika anda membuat formset berderet anda, lewatkan di argumen "
"pilihan ``formset``::"

msgid "More than one foreign key to the same model"
msgstr "Lebih dari satu foreign key pada model sama"

msgid ""
"If your model contains more than one foreign key to the same model, you'll "
"need to resolve the ambiguity manually using ``fk_name``. For example, "
"consider the following model::"
msgstr ""

msgid ""
"To resolve this, you can use ``fk_name`` to :func:`~django.forms.models."
"inlineformset_factory`::"
msgstr ""
"Untuk mengatasi ini, anda dapat menggunakan ``fk_name`` pada :func:`~django."
"forms.models.inlineformset_factory`::"

msgid "Using an inline formset in a view"
msgstr "Menggunakan formset berderet di sebuah tampilan"

msgid ""
"You may want to provide a view that allows a user to edit the related "
"objects of a model. Here's how you can do that::"
msgstr ""

msgid "Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""
"Perhatikan bagaimana kami melewatkan ``instance`` dalam kedua kasus ``POST`` "
"dan ``GET``. "

msgid "Specifying widgets to use in the inline form"
msgstr "Menentukan widget-widget untuk digunakan di formulir berderet"

msgid ""
"``inlineformset_factory`` uses ``modelformset_factory`` and passes most of "
"its arguments to ``modelformset_factory``. This means you can use the "
"``widgets`` parameter in much the same way as passing it to "
"``modelformset_factory``. See `Specifying widgets to use in the form with "
"widgets`_ above."
msgstr ""
"``inlineformset_factory`` menggunakan  ``modelformset_factory`` dan "
"melewatkan kebanyakan argumennya ke ``modelformset_factory``. Ini berarti "
"anda dapat menggunakan parameter ``widgets`` dalam banyak cara yang sama "
"ketika melewatkan itu ke ``modelformset_factory``. Lihat `Specifying widgets "
"to use in the form with widgets`_ diatas."

msgid "View decorators"
msgstr "Tampilkan penghias"

msgid ""
"Django provides several decorators that can be applied to views to support "
"various HTTP features."
msgstr ""

msgid ""
"See :ref:`decorating-class-based-views` for how to use these decorators with "
"class-based views."
msgstr ""
"Lihat :ref:`decorating-class-based-views` untuk bagaimana menggunakan "
"penghias ini dengan tampilan berdasarkan-kelas."

msgid "Allowed HTTP methods"
msgstr "Cara HTTP yang diizinkan"

msgid ""
"The decorators in :mod:`django.views.decorators.http` can be used to "
"restrict access to views based on the request method. These decorators will "
"return a :class:`django.http.HttpResponseNotAllowed` if the conditions are "
"not met."
msgstr ""

msgid ""
"Decorator to require that a view only accepts particular request methods. "
"Usage::"
msgstr ""

msgid "Note that request methods should be in uppercase."
msgstr "Catat bahwa cara diminta harus dalam huruf besar."

msgid "Decorator to require that a view only accepts the GET method."
msgstr ""

msgid "Decorator to require that a view only accepts the POST method."
msgstr ""

msgid ""
"Decorator to require that a view only accepts the GET and HEAD methods. "
"These methods are commonly considered \"safe\" because they should not have "
"the significance of taking an action other than retrieving the requested "
"resource."
msgstr ""

msgid ""
"Web servers should automatically strip the content of responses to HEAD "
"requests while leaving the headers unchanged, so you may handle HEAD "
"requests exactly like GET requests in your views. Since some software, such "
"as link checkers, rely on HEAD requests, you might prefer using "
"``require_safe`` instead of ``require_GET``."
msgstr ""

msgid "Conditional view processing"
msgstr "Pengolahan tampilan bersyarat"

msgid ""
"The following decorators in :mod:`django.views.decorators.http` can be used "
"to control caching behavior on particular views."
msgstr ""

msgid ""
"These decorators can be used to generate ``ETag`` and ``Last-Modified`` "
"headers; see :doc:`conditional view processing </topics/conditional-view-"
"processing>`."
msgstr ""

msgid "GZip compression"
msgstr "Pemampatan GZip"

msgid ""
"The decorators in :mod:`django.views.decorators.gzip` control content "
"compression on a per-view basis."
msgstr ""

msgid ""
"This decorator compresses content if the browser allows gzip compression. It "
"sets the ``Vary`` header accordingly, so that caches will base their storage "
"on the ``Accept-Encoding`` header."
msgstr ""

msgid "Vary headers"
msgstr "Beragam kepala"

msgid ""
"The decorators in :mod:`django.views.decorators.vary` can be used to control "
"caching based on specific request headers."
msgstr ""
"Penghias dalam :mod:`django.views.decorators.vary` dapat digunakan untuk "
"mengendalikan cache berdasarkan pada kepala permintaan khusus."

msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key."
msgstr ""
"Kepala ``Vary`` menentukan kepala permintaan mana sebuah mekanisme cache "
"harus diperhitungkan ketika membangun kunci cachenya."

msgid "See :ref:`using vary headers <using-vary-headers>`."
msgstr "Lihat :ref:`menggunaan beragam kepala <using-vary-headers>`."

msgid "Caching"
msgstr "Menembolok"

msgid ""
"The decorators in :mod:`django.views.decorators.cache` control server and "
"client-side caching."
msgstr ""
"Penghias dalam :mod:`django.views.decorators.cache` mengendalikan cache "
"peladen dan sisi-klien."

msgid ""
"This decorator patches the response's ``Cache-Control`` header by adding all "
"of the keyword arguments to it. See :func:`~django.utils.cache."
"patch_cache_control` for the details of the transformation."
msgstr ""

msgid "This decorator adds an ``Expires`` header to the current date/time."
msgstr ""

msgid ""
"This decorator adds a ``Cache-Control: max-age=0, no-cache, no-store, must-"
"revalidate, private`` header to a response to indicate that a page should "
"never be cached."
msgstr ""

msgid "Each header is only added if it isn't already set."
msgstr "Setiap kepala hanya ditambahkan jika belum disetel."

msgid "Common"
msgstr "Umum"

msgid ""
"The decorators in :mod:`django.views.decorators.common` allow per-view "
"customization of :class:`~django.middleware.common.CommonMiddleware` "
"behavior."
msgstr ""

msgid ""
"This decorator allows individual views to be excluded from :setting:"
"`APPEND_SLASH` URL normalization."
msgstr ""

msgid "File Uploads"
msgstr "Unggah Berkas"

msgid ""
"When Django handles a file upload, the file data ends up placed in :attr:"
"`request.FILES <django.http.HttpRequest.FILES>` (for more on the ``request`` "
"object see the documentation for :doc:`request and response objects </ref/"
"request-response>`). This document explains how files are stored on disk and "
"in memory, and how to customize the default behavior."
msgstr ""

msgid ""
"There are security risks if you are accepting uploaded content from "
"untrusted users! See the security guide's topic on :ref:`user-uploaded-"
"content-security` for mitigation details."
msgstr ""
"Ada resiko keamanan jika anda menerima isi terunggah dari pengguna tidak "
"dipercaya! Lihat topik panduan keamanan pada :ref:`user-uploaded-content-"
"security` untuk rincian pengurangan."

msgid "Basic file uploads"
msgstr "Unggah berkas dasar"

msgid "Consider a form containing a :class:`~django.forms.FileField`:"
msgstr ""
"Pertimbangkan sebuah formulir mengandung :class:`~django.forms.FileField`:"

msgid ""
"A view handling this form will receive the file data in :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`, which is a dictionary containing a key for "
"each :class:`~django.forms.FileField` (or :class:`~django.forms.ImageField`, "
"or other :class:`~django.forms.FileField` subclass) in the form. So the data "
"from the above form would be accessible as ``request.FILES['file']``."
msgstr ""

msgid ""
"Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only "
"contain data if the request method was ``POST``, at least one file field was "
"actually posted, and the ``<form>`` that posted the request has the "
"attribute ``enctype=\"multipart/form-data\"``. Otherwise, ``request.FILES`` "
"will be empty."
msgstr ""

msgid ""
"Most of the time, you'll pass the file data from ``request`` into the form "
"as described in :ref:`binding-uploaded-files`. This would look something "
"like:"
msgstr ""

msgid ""
"Notice that we have to pass :attr:`request.FILES <django.http.HttpRequest."
"FILES>` into the form's constructor; this is how file data gets bound into a "
"form."
msgstr ""
"Melihat bahwa kita harus melewatkan :attr:`request.FILES <django.http."
"HttpRequest.FILES>` kedalam pembangun formulir; ini adalah bagaimana data "
"berkas dapat mengikat kedalam formulir."

msgid "Here's a common way you might handle an uploaded file::"
msgstr "Ini adalah cara umum anda mungkin menangani sebuah berkas terunggah::"

msgid ""
"Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures "
"that large files don't overwhelm your system's memory."
msgstr ""

msgid ""
"There are a few other methods and attributes available on ``UploadedFile`` "
"objects; see :class:`UploadedFile` for a complete reference."
msgstr ""

msgid "Handling uploaded files with a model"
msgstr "Penanganan berkas terunggah dengan model"

msgid ""
"If you're saving a file on a :class:`~django.db.models.Model` with a :class:"
"`~django.db.models.FileField`, using a :class:`~django.forms.ModelForm` "
"makes this process much easier. The file object will be saved to the "
"location specified by the :attr:`~django.db.models.FileField.upload_to` "
"argument of the corresponding :class:`~django.db.models.FileField` when "
"calling ``form.save()``::"
msgstr ""
"Jika anda sedang menyimpan sebuah berkas pada :class:`~django.db.models."
"Model` dengan :class:`~django.db.models.FileField`, menggunakan :class:"
"`~django.forms.ModelForm` memuat pengolahan ini lebih mudah. byek berkas "
"akan disimpan ke tempat ditentukan oleh argumen :attr:`~django.db.models."
"FileField.upload_to` dari :class:`~django.db.models.FileField`  sesuai "
"ketika memanggil ``form.save()``:: "

msgid ""
"If you are constructing an object manually, you can assign the file object "
"from :attr:`request.FILES <django.http.HttpRequest.FILES>` to the file field "
"in the model::"
msgstr ""

msgid ""
"If you are constructing an object manually outside of a request, you can "
"assign a :class:`~django.core.files.File` like object to the :class:`~django."
"db.models.FileField`::"
msgstr ""

msgid "Uploading multiple files"
msgstr "Mengunggah banyak berkas"

msgid ""
"If you want to upload multiple files using one form field, set the "
"``multiple`` HTML attribute of field's widget:"
msgstr ""

msgid ""
"Then override the ``post`` method of your :class:`~django.views.generic.edit."
"FormView` subclass to handle multiple file uploads:"
msgstr ""

msgid "Upload Handlers"
msgstr "Penanganan Unggah"

msgid ""
"When a user uploads a file, Django passes off the file data to an *upload "
"handler* -- a small class that handles file data as it gets uploaded. Upload "
"handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` "
"setting, which defaults to::"
msgstr ""

msgid ""
"Together :class:`MemoryFileUploadHandler` and :class:"
"`TemporaryFileUploadHandler` provide Django's default file upload behavior "
"of reading small files into memory and large ones onto disk."
msgstr ""

msgid ""
"You can write custom handlers that customize how Django handles files. You "
"could, for example, use custom handlers to enforce user-level quotas, "
"compress data on the fly, render progress bars, and even send data to "
"another storage location directly without storing it locally. See :ref:"
"`custom_upload_handlers` for details on how you can customize or completely "
"replace upload behavior."
msgstr ""

msgid "Where uploaded data is stored"
msgstr "Dimana data terunggah disimpan"

msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""
"Sebelum anda menyimpan berkas terunggah, data butuh disimpan di suatu tempat."

msgid ""
"By default, if an uploaded file is smaller than 2.5 megabytes, Django will "
"hold the entire contents of the upload in memory. This means that saving the "
"file involves only a read from memory and a write to disk and thus is very "
"fast."
msgstr ""

msgid ""
"However, if an uploaded file is too large, Django will write the uploaded "
"file to a temporary file stored in your system's temporary directory. On a "
"Unix-like platform this means you can expect Django to generate a file "
"called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large "
"enough, you can watch this file grow in size as Django streams the data onto "
"disk."
msgstr ""
"Bagaimanapun, jika sebuah berkas terunggah terlalu besar, Django akan "
"menulis berkas terunggah ke berkas sementara disimpan di sistem direktori "
"sementara. Pada serambi seperti-Unix ini berarti anda dapat mengharap Django "
"membangkitkan sebuah berkas dipanggil seperti sesuatu ``/tmp/tmpzfp6I6."
"upload``. Jika sebuah unggahan cukup besar, anda dapat melihat berkas ini "
"tumbuh dalam ukuran seperti Django mengalirkan data ke cakram."

msgid ""
"These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are \"reasonable defaults"
"\" which can be customized as described in the next section."
msgstr ""

msgid "Changing upload handler behavior"
msgstr "Merubah perilaku penanganan unggah"

msgid ""
"There are a few settings which control Django's file upload behavior. See :"
"ref:`File Upload Settings <file-upload-settings>` for details."
msgstr ""
"Ada sedikit pengaturan yang mengendalikan perilaku unggah berkas Django. "
"Lihat :ref:`File Upload Settings 1` untuk rincian."

msgid "Modifying upload handlers on the fly"
msgstr "Merubah penanganan unggah dengan cepat"

msgid ""
"Sometimes particular views require different upload behavior. In these "
"cases, you can override upload handlers on a per-request basis by modifying "
"``request.upload_handlers``. By default, this list will contain the upload "
"handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the "
"list as you would any other list."
msgstr ""

msgid ""
"For instance, suppose you've written a ``ProgressBarUploadHandler`` that "
"provides feedback on upload progress to some sort of AJAX widget. You'd add "
"this handler to your upload handlers like this::"
msgstr ""

msgid ""
"You'd probably want to use ``list.insert()`` in this case (instead of "
"``append()``) because a progress bar handler would need to run *before* any "
"other handlers. Remember, the upload handlers are processed in order."
msgstr ""

msgid ""
"If you want to replace the upload handlers completely, you can assign a new "
"list::"
msgstr ""

msgid ""
"You can only modify upload handlers *before* accessing ``request.POST`` or "
"``request.FILES`` -- it doesn't make sense to change upload handlers after "
"upload handling has already started. If you try to modify ``request."
"upload_handlers`` after reading from ``request.POST`` or ``request.FILES`` "
"Django will throw an error."
msgstr ""

msgid ""
"Thus, you should always modify uploading handlers as early in your view as "
"possible."
msgstr ""
"Dengan demikian, anda harus selalu merubah penanganan unggahan sedini "
"mungkin dalam tampilan anda."

msgid ""
"Also, ``request.POST`` is accessed by :class:`~django.middleware.csrf."
"CsrfViewMiddleware` which is enabled by default. This means you will need to "
"use :func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow "
"you to change the upload handlers.  You will then need to use :func:`~django."
"views.decorators.csrf.csrf_protect` on the function that actually processes "
"the request.  Note that this means that the handlers may start receiving the "
"file upload before the CSRF checks have been done. Example code::"
msgstr ""
"Juga, ``request.POST`` diakses oleh :class:`~django.middleware.csrf."
"CsrfViewMiddleware` yang diadakan secara awalan. Ini berarti anda akan butuh "
"menggunakan :func:`~django.views.decorators.csrf.csrf_exempt` pada tampilan "
"anda untuk mengizinkan anda merubah penangan unggahan. Anda kemudian akan "
"butuh menggunakan  :func:`~django.views.decorators.csrf.csrf_protect` pada "
"fungsi yang sebenarnya mengolah permintaan. Catat bahwa ini berarti bahwa "
"penangan mungkin mulai menerima berkas unggahan sebelum CSRF pemeriksaan "
"telah diselesaikan. Kode contoh::"

msgid ""
"If you are using a class-based view, you will need to use :func:`~django."
"views.decorators.csrf.csrf_exempt` on its :meth:`~django.views.generic.base."
"View.dispatch` method and :func:`~django.views.decorators.csrf.csrf_protect` "
"on the method that actually processes the request. Example code::"
msgstr ""

msgid "Generic views"
msgstr "Tampilan umum"

msgid "See :doc:`/ref/class-based-views/index`."
msgstr "Lihat :doc:`/ref/class-based-views/index`."

msgid "Handling HTTP requests"
msgstr "Penanganan permintaan HTTP"

msgid "Information on handling HTTP requests in Django:"
msgstr "Informasi pada penanganan permintaan HTTP di Django:"

msgid "Middleware"
msgstr "Middleware"

msgid ""
"Middleware is a framework of hooks into Django's request/response "
"processing. It's a light, low-level \"plugin\" system for globally altering "
"Django's input or output."
msgstr ""

msgid ""
"Each middleware component is responsible for doing some specific function. "
"For example, Django includes a middleware component, :class:`~django.contrib."
"auth.middleware.AuthenticationMiddleware`, that associates users with "
"requests using sessions."
msgstr ""

msgid ""
"This document explains how middleware works, how you activate middleware, "
"and how to write your own middleware. Django ships with some built-in "
"middleware you can use right out of the box. They're documented in the :doc:"
"`built-in middleware reference </ref/middleware>`."
msgstr ""

msgid "Writing your own middleware"
msgstr "Menulis middleware anda sendiri"

msgid ""
"A middleware factory is a callable that takes a ``get_response`` callable "
"and returns a middleware. A middleware is a callable that takes a request "
"and returns a response, just like a view."
msgstr ""
"Pabrik middleware adalah sebuah callable yang mengambil callable "
"``get_response`` dan mengembalikan middleware. Middleware adalah callable "
"yang mengambil permintaan dan mengembalikan tanggapan, seperti tampilan."

msgid "A middleware can be written as a function that looks like this::"
msgstr ""
"Sebuah middleware dapat ditulis sebagai sebuah fungsi yang terlihat seperti "
"ini::"

msgid ""
"Or it can be written as a class whose instances are callable, like this::"
msgstr ""
"Atau itu dapat ditulis sebagai sebuah kelas yang instancenya callable, "
"seperti ini::"

msgid ""
"The ``get_response`` callable provided by Django might be the actual view "
"(if this is the last listed middleware) or it might be the next middleware "
"in the chain. The current middleware doesn't need to know or care what "
"exactly it is, just that it represents whatever comes next."
msgstr ""
"Callable ``get_response`` disediakan oleh Django mungkin tampilan sebenarnya "
"(jika ini adalah middleware terdaftar terakhir) atau itu mungkin menjadi "
"middleware selanjutnya di rantai. Middleware sekarang tidak butuh mengetahui "
"atau peduli apa sebenarnya itu, cukup bahwa itu mewakili apapun datang "
"selanjutnya."

msgid ""
"The above is a slight simplification -- the ``get_response`` callable for "
"the last middleware in the chain won't be the actual view but rather a "
"wrapper method from the handler which takes care of applying :ref:`view "
"middleware <view-middleware>`, calling the view with appropriate URL "
"arguments, and applying :ref:`template-response <template-response-"
"middleware>` and :ref:`exception <exception-middleware>` middleware."
msgstr ""
"Diatas adalah sedikit penyerdahanaan -- callable ``get_response`` untuk "
"middleware akhir dalam rantai tidak akan berupa tampilan sebenarnya tetapi "
"daripada sebuah metode pembungkus dari penangan yang menangani dari "
"memberlakukan :ref:`view middleware 1`, memanggil tampilan dengan argumen-"
"argumen URL sesuai, dan memberlakukan middleware :ref:`template-response 2` "
"dan :ref:`exception 3`."

msgid ""
"Middleware can either support only synchronous Python (the default), only "
"asynchronous Python, or both. See :ref:`async-middleware` for details of how "
"to advertise what you support, and know what kind of request you are getting."
msgstr ""

msgid "Middleware can live anywhere on your Python path."
msgstr "Middleware dapat tinggal dimanapun pada jalur Python anda."

msgid "``__init__(get_response)``"
msgstr "``__init__(get_response)``"

msgid ""
"Middleware factories must accept a ``get_response`` argument. You can also "
"initialize some global state for the middleware. Keep in mind a couple of "
"caveats:"
msgstr ""

msgid ""
"Django initializes your middleware with only the ``get_response`` argument, "
"so you can't define ``__init__()`` as requiring any other arguments."
msgstr ""

msgid ""
"Unlike the ``__call__()`` method which is called once per request, "
"``__init__()`` is called only *once*, when the web server starts."
msgstr ""

msgid "Marking middleware as unused"
msgstr "Menandai middleware sebagai tidak digunakan"

msgid ""
"It's sometimes useful to determine at startup time whether a piece of "
"middleware should be used. In these cases, your middleware's ``__init__()`` "
"method may raise :exc:`~django.core.exceptions.MiddlewareNotUsed`. Django "
"will then remove that middleware from the middleware process and log a debug "
"message to the :ref:`django-request-logger` logger when :setting:`DEBUG` is "
"``True``."
msgstr ""

msgid "Activating middleware"
msgstr "Mengaktivasi middleware"

msgid ""
"To activate a middleware component, add it to the :setting:`MIDDLEWARE` list "
"in your Django settings."
msgstr ""
"Untuk mengaktifkan komponen middleware, tambah itu ke list :setting:"
"`MIDDLEWARE` dalam pengaturan Django anda."

msgid ""
"In :setting:`MIDDLEWARE`, each middleware component is represented by a "
"string: the full Python path to the middleware factory's class or function "
"name. For example, here's the default value created by :djadmin:`django-"
"admin startproject <startproject>`::"
msgstr ""

msgid ""
"A Django installation doesn't require any middleware — :setting:`MIDDLEWARE` "
"can be empty, if you'd like — but it's strongly suggested that you at least "
"use :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

msgid ""
"The order in :setting:`MIDDLEWARE` matters because a middleware can depend "
"on other middleware. For instance, :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` stores the authenticated user in the session; "
"therefore, it must run after :class:`~django.contrib.sessions.middleware."
"SessionMiddleware`. See :ref:`middleware-ordering` for some common hints "
"about ordering of Django middleware classes."
msgstr ""

msgid "Middleware order and layering"
msgstr "Urutan middleware dan pelapisan"

msgid ""
"During the request phase, before calling the view, Django applies middleware "
"in the order it's defined in :setting:`MIDDLEWARE`, top-down."
msgstr ""

msgid ""
"You can think of it like an onion: each middleware class is a \"layer\" that "
"wraps the view, which is in the core of the onion. If the request passes "
"through all the layers of the onion (each one calls ``get_response`` to pass "
"the request in to the next layer), all the way to the view at the core, the "
"response will then pass through every layer (in reverse order) on the way "
"back out."
msgstr ""

msgid ""
"If one of the layers decides to short-circuit and return a response without "
"ever calling its ``get_response``, none of the layers of the onion inside "
"that layer (including the view) will see the request or the response. The "
"response will only return through the same layers that the request passed in "
"through."
msgstr ""

msgid "Other middleware hooks"
msgstr ""

msgid ""
"Besides the basic request/response middleware pattern described earlier, you "
"can add three other special methods to class-based middleware:"
msgstr ""

msgid "``process_view()``"
msgstr "``process_view()``"

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is "
"the Python function that Django is about to use. (It's the actual function "
"object, not the name of the function as a string.) ``view_args`` is a list "
"of positional arguments that will be passed to the view, and ``view_kwargs`` "
"is a dictionary of keyword arguments that will be passed to the view. "
"Neither ``view_args`` nor ``view_kwargs`` include the first view argument "
"(``request``)."
msgstr ""

msgid "``process_view()`` is called just before Django calls the view."
msgstr "``process_view()`` dipanggil sebelum Django memanggil tampilan."

msgid ""
"It should return either ``None`` or an :class:`~django.http.HttpResponse` "
"object. If it returns ``None``, Django will continue processing this "
"request, executing any other ``process_view()`` middleware and, then, the "
"appropriate view. If it returns an :class:`~django.http.HttpResponse` "
"object, Django won't bother calling the appropriate view; it'll apply "
"response middleware to that :class:`~django.http.HttpResponse` and return "
"the result."
msgstr ""

msgid ""
"Accessing :attr:`request.POST <django.http.HttpRequest.POST>` inside "
"middleware before the view runs or in ``process_view()`` will prevent any "
"view running after the middleware from being able to :ref:`modify the upload "
"handlers for the request <modifying_upload_handlers_on_the_fly>`, and should "
"normally be avoided."
msgstr ""

msgid ""
"The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be "
"considered an exception, as it provides the :func:`~django.views.decorators."
"csrf.csrf_exempt` and :func:`~django.views.decorators.csrf.csrf_protect` "
"decorators which allow views to explicitly control at what point the CSRF "
"validation should occur."
msgstr ""

msgid "``process_exception()``"
msgstr "``process_exception()``"

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is "
"an ``Exception`` object raised by the view function."
msgstr ""
"``request`` adalah sebuah objek :class:`~django.http.HttpRequest`. "
"``exception`` adalah sebuah objek ``Exception`` dimunculkan oleh fungsi "
"tampilan."

msgid ""
"Django calls ``process_exception()`` when a view raises an exception. "
"``process_exception()`` should return either ``None`` or an :class:`~django."
"http.HttpResponse` object. If it returns an :class:`~django.http."
"HttpResponse` object, the template response and response middleware will be "
"applied and the resulting response returned to the browser. Otherwise, :ref:"
"`default exception handling <error-views>` kicks in."
msgstr ""

msgid ""
"Again, middleware are run in reverse order during the response phase, which "
"includes ``process_exception``. If an exception middleware returns a "
"response, the ``process_exception`` methods of the middleware classes above "
"that middleware won't be called at all."
msgstr ""

msgid "``process_template_response()``"
msgstr "``process_template_response()``"

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.template.response.TemplateResponse` object (or "
"equivalent) returned by a Django view or by a middleware."
msgstr ""

msgid ""
"``process_template_response()`` is called just after the view has finished "
"executing, if the response instance has a ``render()`` method, indicating "
"that it is a :class:`~django.template.response.TemplateResponse` or "
"equivalent."
msgstr ""

msgid ""
"It must return a response object that implements a ``render`` method. It "
"could alter the given ``response`` by changing ``response.template_name`` "
"and ``response.context_data``, or it could create and return a brand-new :"
"class:`~django.template.response.TemplateResponse` or equivalent."
msgstr ""

msgid ""
"You don't need to explicitly render responses -- responses will be "
"automatically rendered once all template response middleware has been called."
msgstr ""

msgid ""
"Middleware are run in reverse order during the response phase, which "
"includes ``process_template_response()``."
msgstr ""

msgid "Dealing with streaming responses"
msgstr "Berurusan dengan aliran tanggapan"

msgid ""
"Unlike :class:`~django.http.HttpResponse`, :class:`~django.http."
"StreamingHttpResponse` does not have a ``content`` attribute. As a result, "
"middleware can no longer assume that all responses will have a ``content`` "
"attribute. If they need access to the content, they must test for streaming "
"responses and adjust their behavior accordingly::"
msgstr ""

msgid ""
"``streaming_content`` should be assumed to be too large to hold in memory. "
"Response middleware may wrap it in a new generator, but must not consume it. "
"Wrapping is typically implemented as follows::"
msgstr ""

msgid ""
"Django automatically converts exceptions raised by the view or by middleware "
"into an appropriate HTTP response with an error status code. :ref:`Certain "
"exceptions <error-views>` are converted to 4xx status codes, while an "
"unknown exception is converted to a 500 status code."
msgstr ""

msgid ""
"This conversion takes place before and after each middleware (you can think "
"of it as the thin film in between each layer of the onion), so that every "
"middleware can always rely on getting some kind of HTTP response back from "
"calling its ``get_response`` callable. Middleware don't need to worry about "
"wrapping their call to ``get_response`` in a ``try/except`` and handling an "
"exception that might have been raised by a later middleware or the view. "
"Even if the very next middleware in the chain raises an :class:`~django.http."
"Http404` exception, for example, your middleware won't see that exception; "
"instead it will get an :class:`~django.http.HttpResponse` object with a :"
"attr:`~django.http.HttpResponse.status_code` of 404."
msgstr ""
"Perubahan ini mengambil tempat sebelum dan setelah setiap middleware (anda "
"dapat berpikir itu seperti film tipis dalam diantara setiap lapisan dari "
"onion), sehingga setiap middleware dapat selalu bergantung pada mendapatkan "
"sejenis tanggapan HTTP dari memanggil callable ``get_response`` nya. "
"Middleware tidak butuh  khawatir tentang membungkus panggilan mereka pada "
"``get_response`` dalam sebuah ``try/except`` dan menangani sebuah "
"pengecualian yang mungkin dimunculkan ole middleware akhir atau tampilan. "
"Bahkan jika middleware berikutnya dalam rantai memunculkan sebuah "
"pengecualian :class:`~django.http.Http404`, sebagai contoh, middleware anda "
"tidak melihat pengecualian itu; bahkan itu akan mendapatkan sebuah obyek :"
"class:`~django.http.HttpResponse` dengan sebuah :attr:`~django.http."
"HttpResponse.status_code` dari 404."

msgid ""
"You can set :setting:`DEBUG_PROPAGATE_EXCEPTIONS` to ``True`` to skip this "
"conversion and propagate exceptions upward."
msgstr ""

msgid ""
"Middleware can support any combination of synchronous and asynchronous "
"requests. Django will adapt requests to fit the middleware's requirements if "
"it cannot support both, but at a performance penalty."
msgstr ""

msgid ""
"By default, Django assumes that your middleware is capable of handling only "
"synchronous requests. To change these assumptions, set the following "
"attributes on your middleware factory function or class:"
msgstr ""

msgid ""
"``sync_capable`` is a boolean indicating if the middleware can handle "
"synchronous requests. Defaults to ``True``."
msgstr ""

msgid ""
"``async_capable`` is a boolean indicating if the middleware can handle "
"asynchronous requests. Defaults to ``False``."
msgstr ""

msgid ""
"If your middleware has both ``sync_capable = True`` and ``async_capable = "
"True``, then Django will pass it the request without converting it. In this "
"case, you can work out if your middleware will receive async requests by "
"checking if the ``get_response`` object you are passed is a coroutine "
"function, using :py:func:`asyncio.iscoroutinefunction`."
msgstr ""

msgid ""
"The ``django.utils.decorators`` module contains :func:`~django.utils."
"decorators.sync_only_middleware`, :func:`~django.utils.decorators."
"async_only_middleware`, and :func:`~django.utils.decorators."
"sync_and_async_middleware` decorators that allow you to apply these flags to "
"middleware factory functions."
msgstr ""

msgid ""
"The returned callable must match the sync or async nature of the "
"``get_response`` method. If you have an asynchronous ``get_response``, you "
"must return a coroutine function (``async def``)."
msgstr ""

msgid ""
"``process_view``, ``process_template_response`` and ``process_exception`` "
"methods, if they are provided, should also be adapted to match the sync/"
"async mode. However, Django will individually adapt them as required if you "
"do not, at an additional performance penalty."
msgstr ""

msgid ""
"Here's an example of how to create a middleware function that supports both::"
msgstr ""
"Ini adalah sebuah contoh bagaimana membuat sebuah fungsi middleware yang "
"mendukung keduanya::"

msgid ""
"If you declare a hybrid middleware that supports both synchronous and "
"asynchronous calls, the kind of call you get may not match the underlying "
"view. Django will optimize the middleware call stack to have as few sync/"
"async transitions as possible."
msgstr ""

msgid ""
"Thus, even if you are wrapping an async view, you may be called in sync mode "
"if there is other, synchronous middleware between you and the view."
msgstr ""

msgid "Upgrading pre-Django 1.10-style middleware"
msgstr "Meningkatkan middleware pre-Django 1.10-style"

msgid ""
"Django provides ``django.utils.deprecation.MiddlewareMixin`` to ease "
"creating middleware classes that are compatible with both :setting:"
"`MIDDLEWARE` and the old ``MIDDLEWARE_CLASSES``, and support synchronous and "
"asynchronous requests. All middleware classes included with Django are "
"compatible with both settings."
msgstr ""

msgid ""
"The mixin provides an ``__init__()`` method that requires a ``get_response`` "
"argument and stores it in ``self.get_response``."
msgstr ""

msgid "The ``__call__()`` method:"
msgstr "Metode ``__call__()``:"

msgid "Calls ``self.process_request(request)`` (if defined)."
msgstr "Memanggil ``self.process_request(request)`` (jika ditentukan)."

msgid ""
"Calls ``self.get_response(request)`` to get the response from later "
"middleware and the view."
msgstr ""

msgid "Calls ``self.process_response(request, response)`` (if defined)."
msgstr ""
"Memanggil ``self.process_response(request, response)`` (jika ditentukan)."

msgid "Returns the response."
msgstr "Mengembalikan tanggapan"

msgid ""
"If used with ``MIDDLEWARE_CLASSES``, the ``__call__()`` method will never be "
"used; Django calls ``process_request()`` and ``process_response()`` directly."
msgstr ""

msgid ""
"In most cases, inheriting from this mixin will be sufficient to make an old-"
"style middleware compatible with the new system with sufficient backwards-"
"compatibility. The new short-circuiting semantics will be harmless or even "
"beneficial to the existing middleware. In a few cases, a middleware class "
"may need some changes to adjust to the new semantics."
msgstr ""

msgid ""
"These are the behavioral differences between using :setting:`MIDDLEWARE` and "
"``MIDDLEWARE_CLASSES``:"
msgstr ""
"Ada perbedaan perilaku diantara menggunakan :setting:`MIDDLEWARE` dan "
"``MIDDLEWARE_CLASSES``:"

msgid ""
"Under ``MIDDLEWARE_CLASSES``, every middleware will always have its "
"``process_response`` method called, even if an earlier middleware short-"
"circuited by returning a response from its ``process_request`` method. "
"Under :setting:`MIDDLEWARE`, middleware behaves more like an onion: the "
"layers that a response goes through on the way out are the same layers that "
"saw the request on the way in. If a middleware short-circuits, only that "
"middleware and the ones before it in :setting:`MIDDLEWARE` will see the "
"response."
msgstr ""

msgid ""
"Under ``MIDDLEWARE_CLASSES``, ``process_exception`` is applied to exceptions "
"raised from a middleware ``process_request`` method. Under :setting:"
"`MIDDLEWARE`, ``process_exception`` applies only to exceptions raised from "
"the view (or from the ``render`` method of a :class:`~django.template."
"response.TemplateResponse`). Exceptions raised from a middleware are "
"converted to the appropriate HTTP response and then passed to the next "
"middleware."
msgstr ""

msgid ""
"Under ``MIDDLEWARE_CLASSES``, if a ``process_response`` method raises an "
"exception, the ``process_response`` methods of all earlier middleware are "
"skipped and a ``500 Internal Server Error`` HTTP response is always returned "
"(even if the exception raised was e.g. an :class:`~django.http.Http404`). "
"Under :setting:`MIDDLEWARE`, an exception raised from a middleware will "
"immediately be converted to the appropriate HTTP response, and then the next "
"middleware in line will see that response. Middleware are never skipped due "
"to a middleware raising an exception."
msgstr ""

msgid "How to use sessions"
msgstr "Bagaimana menggunakan sesi"

msgid ""
"Django provides full support for anonymous sessions. The session framework "
"lets you store and retrieve arbitrary data on a per-site-visitor basis. It "
"stores data on the server side and abstracts the sending and receiving of "
"cookies. Cookies contain a session ID -- not the data itself (unless you're "
"using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""

msgid "Enabling sessions"
msgstr "Mengadakan sesi"

msgid ""
"Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr "Sesi diterapkan melalui potongan :doc:`middleware 1`."

msgid "To enable session functionality, do the following:"
msgstr "Untuk mengadakan fungsi sesi, lakukan berikut:"

msgid ""
"Edit the :setting:`MIDDLEWARE` setting and make sure it contains ``'django."
"contrib.sessions.middleware.SessionMiddleware'``. The default ``settings."
"py`` created by ``django-admin startproject`` has ``SessionMiddleware`` "
"activated."
msgstr ""

msgid ""
"If you don't want to use sessions, you might as well remove the "
"``SessionMiddleware`` line from :setting:`MIDDLEWARE` and ``'django.contrib."
"sessions'`` from your :setting:`INSTALLED_APPS`. It'll save you a small bit "
"of overhead."
msgstr ""
"Jika anda tidak ingin menggunakan sesi, anda mungkin akan memindahkan baris "
"``SessionMiddleware`` dari :setting:`MIDDLEWARE` dan ``'django.contrib."
"sessions'`` dari  :setting:`INSTALLED_APPS` anda. Itu akan menyimpan anda "
"sedikit diatas."

msgid "Configuring the session engine"
msgstr "Konfigurasi mesin sesi"

msgid ""
"By default, Django stores sessions in your database (using the model "
"``django.contrib.sessions.models.Session``). Though this is convenient, in "
"some setups it's faster to store session data elsewhere, so Django can be "
"configured to store session data on your filesystem or in your cache."
msgstr ""

msgid "Using database-backed sessions"
msgstr "Menggunakan sesi didukung-basisdata"

msgid ""
"If you want to use a database-backed session, you need to add ``'django."
"contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

msgid ""
"Once you have configured your installation, run ``manage.py migrate`` to "
"install the single database table that stores session data."
msgstr ""

msgid "Using cached sessions"
msgstr "Menggunakan sesi tembolok"

msgid ""
"For better performance, you may want to use a cache-based session backend."
msgstr ""

msgid ""
"To store session data using Django's cache system, you'll first need to make "
"sure you've configured your cache; see the :doc:`cache documentation </"
"topics/cache>` for details."
msgstr ""

msgid ""
"You should only use cache-based sessions if you're using the Memcached or "
"Redis cache backend. The local-memory cache backend doesn't retain data long "
"enough to be a good choice, and it'll be faster to use file or database "
"sessions directly instead of sending everything through the file or database "
"cache backends. Additionally, the local-memory cache backend is NOT multi-"
"process safe, therefore probably not a good choice for production "
"environments."
msgstr ""

msgid ""
"If you have multiple caches defined in :setting:`CACHES`, Django will use "
"the default cache. To use another cache, set :setting:`SESSION_CACHE_ALIAS` "
"to the name of that cache."
msgstr ""
"Jika anda mempunyai banyak tembolok ditentukan di :setting:`CACHES`,Django "
"akan menggunakan tembolok awalan. Untuk menggunakan tembolok lain, setel :"
"setting:`SESSION_CACHE_ALIAS` ke nama dari tembolok tersebut."

msgid ""
"Once your cache is configured, you've got two choices for how to store data "
"in the cache:"
msgstr ""
"Sekali tembolok anda dikonfigurasi, anda telah mendapatkan dua pilihan untuk "
"bagaimana menyimpan data dalam tembolok:"

msgid ""
"Set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cache"
"\"`` for a simple caching session store. Session data will be stored "
"directly in your cache. However, session data may not be persistent: cached "
"data can be evicted if the cache fills up or if the cache server is "
"restarted."
msgstr ""

msgid ""
"For persistent, cached data, set :setting:`SESSION_ENGINE` to ``\"django."
"contrib.sessions.backends.cached_db\"``. This uses a write-through cache -- "
"every write to the cache will also be written to the database. Session reads "
"only use the database if the data is not already in the cache."
msgstr ""

msgid ""
"Both session stores are quite fast, but the simple cache is faster because "
"it disregards persistence. In most cases, the ``cached_db`` backend will be "
"fast enough, but if you need that last bit of performance, and are willing "
"to let session data be expunged from time to time, the ``cache`` backend is "
"for you."
msgstr ""

msgid ""
"If you use the ``cached_db`` session backend, you also need to follow the "
"configuration instructions for the `using database-backed sessions`_."
msgstr ""

msgid "Using file-based sessions"
msgstr "Menggunakan sesi berdasarkan-berkas"

msgid ""
"To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to ``"
"\"django.contrib.sessions.backends.file\"``."
msgstr ""
"Untuk menggunakan sesi berdasarkan-berkas, setel setelan :setting:"
"`SESSION_ENGINE` menjadi ``\"django.contrib.sessions.backends.file\"``."

msgid ""
"You might also want to set the :setting:`SESSION_FILE_PATH` setting (which "
"defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to "
"control where Django stores session files. Be sure to check that your web "
"server has permissions to read and write to this location."
msgstr ""

msgid "Using cookie-based sessions"
msgstr "Menggunakan sesi berdasarkan-kue"

msgid ""
"To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.signed_cookies\"``. The session data "
"will be stored using Django's tools for :doc:`cryptographic signing </topics/"
"signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""

msgid ""
"It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting on "
"``True`` to prevent access to the stored data from JavaScript."
msgstr ""
"Sangat dianjurkan meninggalkan pengaturan :setting:`SESSION_COOKIE_HTTPONLY` "
"pada ``True`` untuk mencegah akses ke data tersimpan dari JavaScript."

msgid ""
"**If the SECRET_KEY is not kept secret and you are using the** :class:"
"`~django.contrib.sessions.serializers.PickleSerializer`, **this can lead to "
"arbitrary remote code execution.**"
msgstr ""

msgid ""
"An attacker in possession of the :setting:`SECRET_KEY` can not only generate "
"falsified session data, which your site will trust, but also remotely "
"execute arbitrary code, as the data is serialized using pickle."
msgstr ""

msgid ""
"If you use cookie-based sessions, pay extra care that your secret key is "
"always kept completely secret, for any system which might be remotely "
"accessible."
msgstr ""

msgid "**The session data is signed but not encrypted**"
msgstr "**Data sesi ditandatangi tetapi tidak disandikan**"

msgid ""
"When using the cookies backend the session data can be read by the client."
msgstr ""

msgid ""
"A MAC (Message Authentication Code) is used to protect the data against "
"changes by the client, so that the session data will be invalidated when "
"being tampered with. The same invalidation happens if the client storing the "
"cookie (e.g. your user's browser) can't store all of the session cookie and "
"drops data. Even though Django compresses the data, it's still entirely "
"possible to exceed the :rfc:`common limit of 4096 bytes <2965#section-5.3>` "
"per cookie."
msgstr ""

msgid "**No freshness guarantee**"
msgstr "**Tidak ada jaminan kesegaran**"

msgid ""
"Note also that while the MAC can guarantee the authenticity of the data "
"(that it was generated by your site, and not someone else), and the "
"integrity of the data (that it is all there and correct), it cannot "
"guarantee freshness i.e. that you are being sent back the last thing you "
"sent to the client. This means that for some uses of session data, the "
"cookie backend might open you up to `replay attacks`_. Unlike other session "
"backends which keep a server-side record of each session and invalidate it "
"when a user logs out, cookie-based sessions are not invalidated when a user "
"logs out. Thus if an attacker steals a user's cookie, they can use that "
"cookie to login as that user even if the user logs out. Cookies will only be "
"detected as 'stale' if they are older than your :setting:"
"`SESSION_COOKIE_AGE`."
msgstr ""

msgid "**Performance**"
msgstr "**Penampilan**"

msgid ""
"Finally, the size of a cookie can have an impact on the speed of your site."
msgstr ""

msgid "Using sessions in views"
msgstr "Menggunakan sesi dalam tampilan"

msgid ""
"When ``SessionMiddleware`` is activated, each :class:`~django.http."
"HttpRequest` object -- the first argument to any Django view function -- "
"will have a ``session`` attribute, which is a dictionary-like object."
msgstr ""

msgid ""
"You can read it and write to ``request.session`` at any point in your view. "
"You can edit it multiple times."
msgstr ""

msgid ""
"This is the base class for all session objects. It has the following "
"standard dictionary methods:"
msgstr ""

msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr "Contoh: ``fav_color = request.session['fav_color']``"

msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr "Contoh: ``request.session['fav_color'] = 'blue'``"

msgid ""
"Example: ``del request.session['fav_color']``. This raises ``KeyError`` if "
"the given ``key`` isn't already in the session."
msgstr ""

msgid "Example: ``'fav_color' in request.session``"
msgstr "Contoh: ``'fav_color' dalam request.session``"

msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr "Contoh: ``fav_color = request.session.get('fav_color', 'red')``"

msgid "Example: ``fav_color = request.session.pop('fav_color', 'blue')``"
msgstr "Contoh: ``fav_color = request.session.pop('fav_color', 'blue')``"

msgid "It also has these methods:"
msgstr "Dia juga mempunyai cara ini:"

msgid ""
"Deletes the current session data from the session and deletes the session "
"cookie. This is used if you want to ensure that the previous session data "
"can't be accessed again from the user's browser (for example, the :func:"
"`django.contrib.auth.logout()` function calls it)."
msgstr ""

msgid ""
"Sets a test cookie to determine whether the user's browser supports cookies. "
"Due to the way cookies work, you won't be able to test this until the user's "
"next page request. See `Setting test cookies`_ below for more information."
msgstr ""

msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"browser accepted the test cookie. Due to the way cookies work, you'll have "
"to call ``set_test_cookie()`` on a previous, separate page request. See "
"`Setting test cookies`_ below for more information."
msgstr ""

msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""
"Menghapus kue percobaan. Gunakan ini untuk membersihkan diri anda sendiri."

msgid ""
"Returns the value of the setting :setting:`SESSION_COOKIE_AGE`. This can be "
"overridden in a custom session backend."
msgstr ""

msgid ""
"Sets the expiration time for the session. You can pass a number of different "
"values:"
msgstr ""
"Setel waktu kadaluarsa untuk sesi. Anda dapat melewatkan sejumlah nilai "
"berbeda:"

msgid ""
"If ``value`` is an integer, the session will expire after that many seconds "
"of inactivity. For example, calling ``request.session.set_expiry(300)`` "
"would make the session expire in 5 minutes."
msgstr ""

msgid ""
"If ``value`` is a ``datetime`` or ``timedelta`` object, the session will "
"expire at that specific date/time. Note that ``datetime`` and ``timedelta`` "
"values are only serializable if you are using the :class:`~django.contrib."
"sessions.serializers.PickleSerializer`."
msgstr ""

msgid ""
"If ``value`` is ``0``, the user's session cookie will expire when the user's "
"web browser is closed."
msgstr ""

msgid ""
"If ``value`` is ``None``, the session reverts to using the global session "
"expiry policy."
msgstr ""

msgid ""
"Reading a session is not considered activity for expiration purposes. "
"Session expiration is computed from the last time the session was *modified*."
msgstr ""

msgid ""
"Returns the number of seconds until this session expires. For sessions with "
"no custom expiration (or those set to expire at browser close), this will "
"equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

msgid "This function accepts two optional keyword arguments:"
msgstr "Fungsi ini menerima dua pilihan argumen katakunci:"

msgid ""
"``modification``: last modification of the session, as a :class:`~datetime."
"datetime` object. Defaults to the current time."
msgstr ""

msgid ""
"``expiry``: expiry information for the session, as a :class:`~datetime."
"datetime` object, an :class:`int` (in seconds), or ``None``. Defaults to the "
"value stored in the session by :meth:`set_expiry`, if there is one, or "
"``None``."
msgstr ""

msgid ""
"This method is used by session backends to determine the session expiry age "
"in seconds when saving the session. It is not really intended for usage "
"outside of that context."
msgstr ""

msgid ""
"In particular, while it is **possible** to determine the remaining lifetime "
"of a session **just when** you have the correct ``modification`` value "
"**and** the ``expiry`` is set as a ``datetime`` object, where you do have "
"the ``modification`` value, it is more straight-forward to calculate the "
"expiry by-hand::"
msgstr ""

msgid ""
"Returns the date this session will expire. For sessions with no custom "
"expiration (or those set to expire at browser close), this will equal the "
"date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

msgid ""
"This function accepts the same keyword arguments as :meth:`get_expiry_age`."
msgstr ""
"Fungsi ini menerima argumen kata kunci sama seperti :meth:`get_expiry_age`."

msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"session cookie will expire when the user's web browser is closed."
msgstr ""

msgid ""
"Removes expired sessions from the session store. This class method is called "
"by :djadmin:`clearsessions`."
msgstr ""
"Memindahkan sesi kadaluarsa dari penyimpanan sesi. Metode kelas ini "
"dipanggil oleh :djadmin:`clearsessions`."

msgid ""
"Creates a new session key while retaining the current session data. :func:"
"`django.contrib.auth.login()` calls this method to mitigate against session "
"fixation."
msgstr ""

msgid "Session serialization"
msgstr "Serialisasi sesi"

msgid ""
"By default, Django serializes session data using JSON. You can use the :"
"setting:`SESSION_SERIALIZER` setting to customize the session serialization "
"format. Even with the caveats described in :ref:`custom-serializers`, we "
"highly recommend sticking with JSON serialization *especially if you are "
"using the cookie backend*."
msgstr ""

msgid ""
"For example, here's an attack scenario if you use :mod:`pickle` to serialize "
"session data. If you're using the :ref:`signed cookie session backend "
"<cookie-session-backend>` and :setting:`SECRET_KEY` is known by an attacker "
"(there isn't an inherent vulnerability in Django that would cause it to "
"leak), the attacker could insert a string into their session which, when "
"unpickled, executes arbitrary code on the server. The technique for doing so "
"is simple and easily available on the internet. Although the cookie session "
"storage signs the cookie-stored data to prevent tampering, a :setting:"
"`SECRET_KEY` leak immediately escalates to a remote code execution "
"vulnerability."
msgstr ""

msgid "Bundled serializers"
msgstr ""

msgid ""
"A wrapper around the JSON serializer from :mod:`django.core.signing`. Can "
"only serialize basic data types."
msgstr ""

msgid ""
"In addition, as JSON supports only string keys, note that using non-string "
"keys in ``request.session`` won't work as expected::"
msgstr ""

msgid ""
"Similarly, data that can't be encoded in JSON, such as non-UTF8 bytes like "
"``'\\xd9'`` (which raises :exc:`UnicodeDecodeError`), can't be stored."
msgstr ""

msgid ""
"See the :ref:`custom-serializers` section for more details on limitations of "
"JSON serialization."
msgstr ""

msgid ""
"Supports arbitrary Python objects, but, as described above, can lead to a "
"remote code execution vulnerability if :setting:`SECRET_KEY` becomes known "
"by an attacker."
msgstr ""

msgid "Write your own serializer"
msgstr "Tulis serialisasi anda sendiri"

msgid ""
"Note that unlike :class:`~django.contrib.sessions.serializers."
"PickleSerializer`, the :class:`~django.contrib.sessions.serializers."
"JSONSerializer` cannot handle arbitrary Python data types. As is often the "
"case, there is a trade-off between convenience and security. If you wish to "
"store more advanced data types including ``datetime`` and ``Decimal`` in "
"JSON backed sessions, you will need to write a custom serializer (or convert "
"such values to a JSON serializable object before storing them in ``request."
"session``). While serializing these values is often straightforward (:class:"
"`~django.core.serializers.json.DjangoJSONEncoder` may be helpful), writing a "
"decoder that can reliably get back the same thing that you put in is more "
"fragile. For example, you run the risk of returning a ``datetime`` that was "
"actually a string that just happened to be in the same format chosen for "
"``datetime``\\s)."
msgstr ""

msgid ""
"Your serializer class must implement two methods, ``dumps(self, obj)`` and "
"``loads(self, data)``, to serialize and deserialize the dictionary of "
"session data, respectively."
msgstr ""

msgid "Session object guidelines"
msgstr "Panduan obyek sesi"

msgid ""
"Use normal Python strings as dictionary keys on ``request.session``. This is "
"more of a convention than a hard-and-fast rule."
msgstr ""

msgid ""
"Session dictionary keys that begin with an underscore are reserved for "
"internal use by Django."
msgstr ""
"Kunci dictionary sesi yang dimulai dengan garis bawah adalah dipesan untuk "
"penggunaan dalam oleh Django."

msgid ""
"Don't override ``request.session`` with a new object, and don't access or "
"set its attributes. Use it like a Python dictionary."
msgstr ""
"Jangan menimpa ``request.session`` dengan obyek baru, dan jangan mengakses "
"atau menyetel atributnya. Gunakan itu seperti dictionary Python."

msgid ""
"This simplistic view sets a ``has_commented`` variable to ``True`` after a "
"user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""
"Tampilan sederhana ini menyetel sebuah variabel ``has_commented`` menjadi "
"``True`` setelah pengguna menempatkan sebuah komentar. Itu tidak membuat "
"pengguna menempatkan komentar lebih dari satu::"

msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""
"...Dan satu ini mencatat anggota keluar, menurut pada ``login()`` diatas::"

msgid ""
"The standard :meth:`django.contrib.auth.logout` function actually does a bit "
"more than this to prevent inadvertent data leakage. It calls the :meth:"
"`~backends.base.SessionBase.flush` method of ``request.session``. We are "
"using this example as a demonstration of how to work with session objects, "
"not as a full ``logout()`` implementation."
msgstr ""

msgid "Setting test cookies"
msgstr "Mengatur kue percobaan"

msgid ""
"As a convenience, Django provides a way to test whether the user's browser "
"accepts cookies. Call the :meth:`~backends.base.SessionBase.set_test_cookie` "
"method of ``request.session`` in a view, and call :meth:`~backends.base."
"SessionBase.test_cookie_worked` in a subsequent view -- not in the same view "
"call."
msgstr ""

msgid ""
"This awkward split between ``set_test_cookie()`` and "
"``test_cookie_worked()`` is necessary due to the way cookies work. When you "
"set a cookie, you can't actually tell whether a browser accepted it until "
"the browser's next request."
msgstr ""

msgid ""
"It's good practice to use :meth:`~backends.base.SessionBase."
"delete_test_cookie()` to clean up after yourself. Do this after you've "
"verified that the test cookie worked."
msgstr ""

msgid "Here's a typical usage example::"
msgstr "Ini adalah contoh penggunaan khas::"

msgid "Using sessions out of views"
msgstr "Menggunakan sesi di luar tampilan"

msgid ""
"The examples in this section import the ``SessionStore`` object directly "
"from the ``django.contrib.sessions.backends.db`` backend. In your own code, "
"you should consider importing ``SessionStore`` from the session engine "
"designated by :setting:`SESSION_ENGINE`, as below:"
msgstr ""

msgid "An API is available to manipulate session data outside of a view::"
msgstr "Sebuah API tersedia untuk merubah data sesi diluar tampilan::"

msgid ""
"``SessionStore.create()`` is designed to create a new session (i.e. one not "
"loaded from the session store and with ``session_key=None``). ``save()`` is "
"designed to save an existing session (i.e. one loaded from the session "
"store). Calling ``save()`` on a new session may also work but has a small "
"chance of generating a ``session_key`` that collides with an existing one. "
"``create()`` calls ``save()`` and loops until an unused ``session_key`` is "
"generated."
msgstr ""

msgid ""
"If you're using the ``django.contrib.sessions.backends.db`` backend, each "
"session is a normal Django model. The ``Session`` model is defined in "
"``django/contrib/sessions/models.py``. Because it's a normal model, you can "
"access sessions using the normal Django database API::"
msgstr ""

msgid ""
"Note that you'll need to call :meth:`~base_session.AbstractBaseSession."
"get_decoded()` to get the session dictionary. This is necessary because the "
"dictionary is stored in an encoded format::"
msgstr ""

msgid "When sessions are saved"
msgstr "Ketika sesi disimpan"

msgid ""
"By default, Django only saves to the session database when the session has "
"been modified -- that is if any of its dictionary values have been assigned "
"or deleted::"
msgstr ""

msgid ""
"In the last case of the above example, we can tell the session object "
"explicitly that it has been modified by setting the ``modified`` attribute "
"on the session object::"
msgstr ""

msgid ""
"To change this default behavior, set the :setting:"
"`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to ``True``, "
"Django will save the session to the database on every single request."
msgstr ""

msgid ""
"Note that the session cookie is only sent when a session has been created or "
"modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session "
"cookie will be sent on every request."
msgstr ""

msgid ""
"Similarly, the ``expires`` part of a session cookie is updated each time the "
"session cookie is sent."
msgstr ""

msgid "The session is not saved if the response's status code is 500."
msgstr "Sesi tidak disimpan jika kode keadaan tanggapan adalah 500."

msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

msgid ""
"You can control whether the session framework uses browser-length sessions "
"vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting."
msgstr ""

msgid ""
"By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, "
"which means session cookies will be stored in users' browsers for as long "
"as :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have "
"to log in every time they open a browser."
msgstr ""

msgid ""
"If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django "
"will use browser-length cookies -- cookies that expire as soon as the user "
"closes their browser. Use this if you want people to have to log in every "
"time they open a browser."
msgstr ""

msgid ""
"This setting is a global default and can be overwritten at a per-session "
"level by explicitly calling the :meth:`~backends.base.SessionBase."
"set_expiry` method of ``request.session`` as described above in `using "
"sessions in views`_."
msgstr ""

msgid ""
"Some browsers (Chrome, for example) provide settings that allow users to "
"continue browsing sessions after closing and re-opening the browser. In some "
"cases, this can interfere with the :setting:"
"`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting and prevent sessions from expiring "
"on browser close. Please be aware of this while testing Django applications "
"which have the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting enabled."
msgstr ""

msgid "Clearing the session store"
msgstr "Membersihkan toko sesi"

msgid ""
"As users create new sessions on your website, session data can accumulate in "
"your session store. If you're using the database backend, the "
"``django_session`` database table will grow. If you're using the file "
"backend, your temporary directory will contain an increasing number of files."
msgstr ""

msgid ""
"To understand this problem, consider what happens with the database backend. "
"When a user logs in, Django adds a row to the ``django_session`` database "
"table. Django updates this row each time the session data changes. If the "
"user logs out manually, Django deletes the row. But if the user does *not* "
"log out, the row never gets deleted. A similar process happens with the file "
"backend."
msgstr ""

msgid ""
"Django does *not* provide automatic purging of expired sessions. Therefore, "
"it's your job to purge expired sessions on a regular basis. Django provides "
"a clean-up management command for this purpose: :djadmin:`clearsessions`. "
"It's recommended to call this command on a regular basis, for example as a "
"daily cron job."
msgstr ""

msgid ""
"Note that the cache backend isn't vulnerable to this problem, because caches "
"automatically delete stale data. Neither is the cookie backend, because the "
"session data is stored by the users' browsers."
msgstr ""

msgid "Settings"
msgstr "Pengaturan"

msgid ""
"A few :ref:`Django settings <settings-sessions>` give you control over "
"session behavior:"
msgstr ""
"Sedikit :ref:`Django settings 1` memberikan anda mengendalikan terhadap "
"perilaku sesi:"

msgid ":setting:`SESSION_CACHE_ALIAS`"
msgstr ":setting:`SESSION_CACHE_ALIAS`"

msgid ":setting:`SESSION_COOKIE_AGE`"
msgstr ":setting:`SESSION_COOKIE_AGE`"

msgid ":setting:`SESSION_COOKIE_DOMAIN`"
msgstr ":setting:`SESSION_COOKIE_DOMAIN`"

msgid ":setting:`SESSION_COOKIE_HTTPONLY`"
msgstr ":setting:`SESSION_COOKIE_HTTPONLY`"

msgid ":setting:`SESSION_COOKIE_NAME`"
msgstr ":setting:`SESSION_COOKIE_NAME`"

msgid ":setting:`SESSION_COOKIE_PATH`"
msgstr ":setting:`SESSION_COOKIE_PATH`"

msgid ":setting:`SESSION_COOKIE_SAMESITE`"
msgstr ":setting:`SESSION_COOKIE_SAMESITE`"

msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ":setting:`SESSION_COOKIE_SECURE`"

msgid ":setting:`SESSION_ENGINE`"
msgstr ":setting:`SESSION_ENGINE`"

msgid ":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE`"
msgstr ":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE`"

msgid ":setting:`SESSION_FILE_PATH`"
msgstr ":setting:`SESSION_FILE_PATH`"

msgid ":setting:`SESSION_SAVE_EVERY_REQUEST`"
msgstr ":setting:`SESSION_SAVE_EVERY_REQUEST`"

msgid ":setting:`SESSION_SERIALIZER`"
msgstr ":setting:`SESSION_SERIALIZER`"

msgid "Session security"
msgstr "Keamanan sesi"

msgid ""
"Subdomains within a site are able to set cookies on the client for the whole "
"domain. This makes session fixation possible if cookies are permitted from "
"subdomains not controlled by trusted users."
msgstr ""

msgid ""
"For example, an attacker could log into ``good.example.com`` and get a valid "
"session for their account. If the attacker has control over ``bad.example."
"com``, they can use it to send their session key to you since a subdomain is "
"permitted to set cookies on ``*.example.com``. When you visit ``good.example."
"com``, you'll be logged in as the attacker and might inadvertently enter "
"your sensitive personal data (e.g. credit card info) into the attacker's "
"account."
msgstr ""

msgid ""
"Another possible attack would be if ``good.example.com`` sets its :setting:"
"`SESSION_COOKIE_DOMAIN` to ``\"example.com\"`` which would cause session "
"cookies from that site to be sent to ``bad.example.com``."
msgstr ""

msgid "Technical details"
msgstr "Rincian teknik"

msgid ""
"The session dictionary accepts any :mod:`json` serializable value when "
"using :class:`~django.contrib.sessions.serializers.JSONSerializer` or any "
"picklable Python object when using :class:`~django.contrib.sessions."
"serializers.PickleSerializer`. See the :mod:`pickle` module for more "
"information."
msgstr ""

msgid "Session data is stored in a database table named ``django_session`` ."
msgstr "Data sesi disimpan dalam tabel basisdata bernama ``django_session`` ."

msgid ""
"Django only sends a cookie if it needs to. If you don't set any session "
"data, it won't send a session cookie."
msgstr ""
"Django hanya mengirim kue jika itu dibutuhkan. Jika anda tidak menyetel data "
"sesi, itu tidak akan mengirim kue sesi."

msgid "The ``SessionStore`` object"
msgstr "Obyek ``SessionStore``"

msgid ""
"When working with sessions internally, Django uses a session store object "
"from the corresponding session engine. By convention, the session store "
"object class is named ``SessionStore`` and is located in the module "
"designated by :setting:`SESSION_ENGINE`."
msgstr ""
"Ketika bekerja dengan sesi di dalam, Django menggunakan sebuah sesi "
"menyimpan obyek dari mesin sesi sesuai. Secara kebiasaan, sesi menyimpan "
"kelas obyek dinamai ``SessionStore`` dan ditempatkan dalam model dirancang "
"oleh :setting:`SESSION_ENGINE`."

msgid ""
"All ``SessionStore`` classes available in Django inherit from :class:"
"`~backends.base.SessionBase` and implement data manipulation methods, namely:"
msgstr ""

msgid "``exists()``"
msgstr "``exists()``"

msgid "``create()``"
msgstr "``create()``"

msgid "``save()``"
msgstr "``save()``"

msgid "``delete()``"
msgstr "``delete()``"

msgid "``load()``"
msgstr "``load()``"

msgid ":meth:`~backends.base.SessionBase.clear_expired`"
msgstr ":meth:`~backends.base.SessionBase.clear_expired`"

msgid ""
"In order to build a custom session engine or to customize an existing one, "
"you may create a new class inheriting from :class:`~backends.base."
"SessionBase` or any other existing ``SessionStore`` class."
msgstr ""

msgid ""
"You can extend the session engines, but doing so with database-backed "
"session engines generally requires some extra effort (see the next section "
"for details)."
msgstr ""

msgid "Extending database-backed session engines"
msgstr "Memperpanjang mesin sesi didukung-basisdata"

msgid ""
"Creating a custom database-backed session engine built upon those included "
"in Django (namely ``db`` and ``cached_db``) may be done by inheriting :class:"
"`~base_session.AbstractBaseSession` and either ``SessionStore`` class."
msgstr ""

msgid ""
"``AbstractBaseSession`` and ``BaseSessionManager`` are importable from "
"``django.contrib.sessions.base_session`` so that they can be imported "
"without including ``django.contrib.sessions`` in :setting:`INSTALLED_APPS`."
msgstr ""

msgid "The abstract base session model."
msgstr "Model sesi berdasarkan abstrak."

msgid ""
"Primary key. The field itself may contain up to 40 characters. The current "
"implementation generates a 32-character string (a random sequence of digits "
"and lowercase ASCII letters)."
msgstr ""

msgid "A string containing an encoded and serialized session dictionary."
msgstr ""
"String mengandung sebyag dictionary sesi disandikan dan diserialisasikan."

msgid "A datetime designating when the session expires."
msgstr "Menunjuk datetime ketika sesi kadaluarsa."

msgid ""
"Expired sessions are not available to a user, however, they may still be "
"stored in the database until the :djadmin:`clearsessions` management command "
"is run."
msgstr ""
"Sesi kadaluarsa tidak tersedia ke seorang pengguna, bagaimanapun, mereka "
"masih disimpan dalam basisdata sampai perintah pengelolaan :djadmin:"
"`clearsessions` berjalan."

msgid "Returns a session store class to be used with this session model."
msgstr ""
"Mengembalikan kelas penyimpanan sesi untuk digunakan dengan model sesi ini."

msgid "Returns decoded session data."
msgstr "Mengembalikan data sesi diterjemahkan."

msgid "Decoding is performed by the session store class."
msgstr "Penterjemahan dilakukan oleh kelas penyimpanan sesi."

msgid ""
"You can also customize the model manager by subclassing :class:`~django."
"contrib.sessions.base_session.BaseSessionManager`:"
msgstr ""
"Anda dapat juga menyesuaikan pengelola model dengan mensubkelaskan :class:"
"`~django.contrib.sessions.base_session.BaseSessionManager`:"

msgid ""
"Returns the given session dictionary serialized and encoded as a string."
msgstr ""
"Mengembalikan dictionary sesi diberikan terserialisasi dan disandikan "
"sebagai sebuah string."

msgid "Encoding is performed by the session store class tied to a model class."
msgstr ""
"Penyandian dialkukan oleh kelas penyimpanan sesi diikat ke kelas model."

msgid ""
"Saves session data for a provided session key, or deletes the session in "
"case the data is empty."
msgstr ""

msgid ""
"Customization of ``SessionStore`` classes is achieved by overriding methods "
"and properties described below:"
msgstr ""

msgid "Implements database-backed session store."
msgstr "Menerapkan penyimpanan sesi backend-basisdata."

msgid "Override this method to return a custom session model if you need one."
msgstr ""
"Kesampingkan metode ini untuk mengembalikan sebuah penyesuaian model sesi "
"jika anda butuh satu."

msgid ""
"Returns a new instance of the session model object, which represents the "
"current session state."
msgstr ""
"Mengembalikan sebuah instance baru dari obyek model sesi, yang mewakili "
"keadaan sesi saat ini."

msgid ""
"Overriding this method provides the ability to modify session model data "
"before it's saved to database."
msgstr ""
"Kesampingkan metode ini menyediakan kemampuan merubah data model sesi "
"sebelum itu disimpan ke basisdata."

msgid "Implements cached database-backed session store."
msgstr ""

msgid "A prefix added to a session key to build a cache key string."
msgstr ""
"Sebuah awalan ditambahkan ke kunci sesi untuk membangun string kunci cache."

msgid "Example"
msgstr "Contoh"

msgid ""
"The example below shows a custom database-backed session engine that "
"includes an additional database column to store an account ID (thus "
"providing an option to query the database for all active sessions for an "
"account)::"
msgstr ""

msgid ""
"If you are migrating from the Django's built-in ``cached_db`` session store "
"to a custom one based on ``cached_db``, you should override the cache key "
"prefix in order to prevent a namespace clash::"
msgstr ""
"Jika anda sedang berpindah dari sesi ``cached_db`` siap-pakai Django ke satu "
"penyesuaian berdasarkan pada ``cached_db``, anda harus menimpa awalan kunci "
"cache untuk mencegah bentrokan namespace:: "

msgid "Session IDs in URLs"
msgstr "ID Sesi dalam URL"

msgid ""
"The Django sessions framework is entirely, and solely, cookie-based. It does "
"not fall back to putting session IDs in URLs as a last resort, as PHP does. "
"This is an intentional design decision. Not only does that behavior make "
"URLs ugly, it makes your site vulnerable to session-ID theft via the "
"\"Referer\" header."
msgstr ""

msgid "Django shortcut functions"
msgstr "Fungsi jalan pintas Django"

msgid ""
"The package ``django.shortcuts`` collects helper functions and classes that "
"\"span\" multiple levels of MVC. In other words, these functions/classes "
"introduce controlled coupling for convenience's sake."
msgstr ""

msgid "``render()``"
msgstr "``render()``"

msgid ""
"Combines a given template with a given context dictionary and returns an :"
"class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

msgid ""
"Django does not provide a shortcut function which returns a :class:`~django."
"template.response.TemplateResponse` because the constructor of :class:"
"`~django.template.response.TemplateResponse` offers the same level of "
"convenience as :func:`render()`."
msgstr ""

msgid "Required arguments"
msgstr "Argumen dibutuhkan"

msgid "``request``"
msgstr "``request``"

msgid "The request object used to generate this response."
msgstr ""

msgid "``template_name``"
msgstr "``template_name``"

msgid ""
"The full name of a template to use or sequence of template names. If a "
"sequence is given, the first template that exists will be used. See the :ref:"
"`template loading documentation <template-loading>` for more information on "
"how templates are found."
msgstr ""

msgid "Optional arguments"
msgstr "Argumen pilihan"

msgid "``context``"
msgstr "``context``"

msgid ""
"A dictionary of values to add to the template context. By default, this is "
"an empty dictionary. If a value in the dictionary is callable, the view will "
"call it just before rendering the template."
msgstr ""
"Nilai kamus untuk ditambah ke konteks cetakan. Secara awalan, ini adalah "
"kamus kosong. Jika nilai di kamus adalah callable, tampilan akan "
"memanggilnya sesaat sebelum membangun cetakan."

msgid "``content_type``"
msgstr "``content_type``"

msgid ""
"The MIME type to use for the resulting document. Defaults to ``'text/html'``."
msgstr ""

msgid "``status``"
msgstr "``status``"

msgid "The status code for the response. Defaults to ``200``."
msgstr "Kode status untuk tanggapan. Awalan menjadi ``200``."

msgid "``using``"
msgstr "``using``"

msgid ""
"The :setting:`NAME <TEMPLATES-NAME>` of a template engine to use for loading "
"the template."
msgstr ""
":setting:`NAME <TEMPLATES-NAME>` dari mesin cetakan untuk digunakan untuk "
"memuat cetakan."

msgid ""
"The following example renders the template ``myapp/index.html`` with the "
"MIME type :mimetype:`application/xhtml+xml`::"
msgstr ""
"Contoh berikut membangun cetakan ``myapp/index.html`` dengan jenis MIME  :"
"mimetype:`application/xhtml+xml`::"

msgid "This example is equivalent to::"
msgstr "Contoh ini setara pada::"

msgid "``redirect()``"
msgstr "``redirect()``"

msgid ""
"Returns an :class:`~django.http.HttpResponseRedirect` to the appropriate URL "
"for the arguments passed."
msgstr ""
"Mengembalikan :class:`~django.http.HttpResponseRedirect` ke URL yang sesuai "
"untuk argument dilewatkan."

msgid "The arguments could be:"
msgstr "Argumen dapat menjadi:"

msgid ""
"A model: the model's :meth:`~django.db.models.Model.get_absolute_url()` "
"function will be called."
msgstr ""

msgid ""
"A view name, possibly with arguments: :func:`~django.urls.reverse` will be "
"used to reverse-resolve the name."
msgstr ""

msgid ""
"An absolute or relative URL, which will be used as-is for the redirect "
"location."
msgstr ""

msgid ""
"By default issues a temporary redirect; pass ``permanent=True`` to issue a "
"permanent redirect."
msgstr ""

msgid "You can use the :func:`redirect` function in a number of ways."
msgstr ""

msgid ""
"By passing some object; that object's :meth:`~django.db.models.Model."
"get_absolute_url` method will be called to figure out the redirect URL::"
msgstr ""

msgid ""
"By passing the name of a view and optionally some positional or keyword "
"arguments; the URL will be reverse resolved using the :func:`~django.urls."
"reverse` method::"
msgstr ""

msgid "By passing a hardcoded URL to redirect to::"
msgstr ""

msgid "This also works with full URLs::"
msgstr "Ini juga bekerja dengan URL penuh::"

msgid ""
"By default, :func:`redirect` returns a temporary redirect. All of the above "
"forms accept a ``permanent`` argument; if set to ``True`` a permanent "
"redirect will be returned::"
msgstr ""

msgid "``get_object_or_404()``"
msgstr "``get_object_or_404()``"

msgid ""
"Calls :meth:`~django.db.models.query.QuerySet.get()` on a given model "
"manager, but it raises :class:`~django.http.Http404` instead of the model's :"
"class:`~django.db.models.Model.DoesNotExist` exception."
msgstr ""

msgid "``klass``"
msgstr "``klass``"

msgid ""
"A :class:`~django.db.models.Model` class, a :class:`~django.db.models."
"Manager`, or a :class:`~django.db.models.query.QuerySet` instance from which "
"to get the object."
msgstr ""

msgid "``**kwargs``"
msgstr "``**kwargs``"

msgid ""
"Lookup parameters, which should be in the format accepted by ``get()`` and "
"``filter()``."
msgstr ""
"Parameter pencarian, yang harus berupa dalam bentuk diterima oleh ``get()`` "
"dan ``filter()``."

msgid ""
"The following example gets the object with the primary key of 1 from "
"``MyModel``::"
msgstr ""

msgid ""
"The most common use case is to pass a :class:`~django.db.models.Model`, as "
"shown above. However, you can also pass a :class:`~django.db.models.query."
"QuerySet` instance::"
msgstr ""

msgid "The above example is a bit contrived since it's equivalent to doing::"
msgstr ""

msgid ""
"but it can be useful if you are passed the ``queryset`` variable from "
"somewhere else."
msgstr ""
"tetapi itu dapat berguna jika anda melewati variabel ``queryset`` dari "
"tempat lain."

msgid ""
"Finally, you can also use a :class:`~django.db.models.Manager`. This is "
"useful for example if you have a :ref:`custom manager<custom-managers>`::"
msgstr ""
"Akhirnya, anda dapat juga menggunakan :class:`~django.db.models.Manager`. "
"Ini berguna untuk contoh jika anda mempunyai :ref:`custom manager<custom-"
"managers>`::"

msgid ""
"You can also use :class:`related managers<django.db.models.fields.related."
"RelatedManager>`::"
msgstr ""
"Anda dapat juga menggunakan :class:`related managers<django.db.models.fields."
"related.RelatedManager>`::"

msgid ""
"Note: As with ``get()``, a :class:`~django.core.exceptions."
"MultipleObjectsReturned` exception will be raised if more than one object is "
"found."
msgstr ""

msgid "``get_list_or_404()``"
msgstr "``get_list_or_404()``"

msgid ""
"Returns the result of :meth:`~django.db.models.query.QuerySet.filter()` on a "
"given model manager cast to a list, raising :class:`~django.http.Http404` if "
"the resulting list is empty."
msgstr ""

msgid ""
"A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :"
"class:`~django.db.models.query.QuerySet` instance from which to get the list."
msgstr ""

msgid "The following example gets all published objects from ``MyModel``::"
msgstr ""

msgid "URL dispatcher"
msgstr "Pengirim URL"

msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality web "
"application. Django lets you design URLs however you want, with no framework "
"limitations."
msgstr ""

msgid ""
"See `Cool URIs don't change`_, by World Wide Web creator Tim Berners-Lee, "
"for excellent arguments on why URLs should be clean and usable."
msgstr ""

msgid ""
"To design URLs for an app, you create a Python module informally called a "
"**URLconf** (URL configuration). This module is pure Python code and is a "
"mapping between URL path expressions to Python functions (your views)."
msgstr ""

msgid ""
"This mapping can be as short or as long as needed. It can reference other "
"mappings. And, because it's pure Python code, it can be constructed "
"dynamically."
msgstr ""

msgid ""
"Django also provides a way to translate URLs according to the active "
"language. See the :ref:`internationalization documentation <url-"
"internationalization>` for more information."
msgstr ""

msgid "How Django processes a request"
msgstr "Bagaimana Django mengolah permintaan"

msgid ""
"When a user requests a page from your Django-powered site, this is the "
"algorithm the system follows to determine which Python code to execute:"
msgstr ""

msgid ""
"Django determines the root URLconf module to use. Ordinarily, this is the "
"value of the :setting:`ROOT_URLCONF` setting, but if the incoming "
"``HttpRequest`` object has a :attr:`~django.http.HttpRequest.urlconf` "
"attribute (set by middleware), its value will be used in place of the :"
"setting:`ROOT_URLCONF` setting."
msgstr ""

msgid ""
"Django loads that Python module and looks for the variable ``urlpatterns``. "
"This should be a :term:`sequence` of :func:`django.urls.path` and/or :func:"
"`django.urls.re_path` instances."
msgstr ""

msgid ""
"Django runs through each URL pattern, in order, and stops at the first one "
"that matches the requested URL, matching against :attr:`~django.http."
"HttpRequest.path_info`."
msgstr ""

msgid ""
"Once one of the URL patterns matches, Django imports and calls the given "
"view, which is a Python function (or a :doc:`class-based view </topics/class-"
"based-views/index>`). The view gets passed the following arguments:"
msgstr ""

msgid "An instance of :class:`~django.http.HttpRequest`."
msgstr "Sebuah instance dari :class:`~django.http.HttpRequest`."

msgid ""
"If the matched URL pattern contained no named groups, then the matches from "
"the regular expression are provided as positional arguments."
msgstr ""

msgid ""
"The keyword arguments are made up of any named parts matched by the path "
"expression that are provided, overridden by any arguments specified in the "
"optional ``kwargs`` argument to :func:`django.urls.path` or :func:`django."
"urls.re_path`."
msgstr ""

msgid ""
"If no URL pattern matches, or if an exception is raised during any point in "
"this process, Django invokes an appropriate error-handling view. See `Error "
"handling`_ below."
msgstr ""

msgid "Here's a sample URLconf::"
msgstr "Ini adalah contoh URLconf::"

msgid "To capture a value from the URL, use angle brackets."
msgstr "Untuk menangkap nilai dari URL, gunakan kurung sudut."

msgid ""
"Captured values can optionally include a converter type. For example, use "
"``<int:name>`` to capture an integer parameter. If a converter isn't "
"included, any string, excluding a ``/`` character, is matched."
msgstr ""

msgid ""
"There's no need to add a leading slash, because every URL has that. For "
"example, it's ``articles``, not ``/articles``."
msgstr ""

msgid "Example requests:"
msgstr "Contoh permintaan:"

msgid ""
"A request to ``/articles/2005/03/`` would match the third entry in the list. "
"Django would call the function ``views.month_archive(request, year=2005, "
"month=3)``."
msgstr ""

msgid ""
"``/articles/2003/`` would match the first pattern in the list, not the "
"second one, because the patterns are tested in order, and the first one is "
"the first test to pass. Feel free to exploit the ordering to insert special "
"cases like this. Here, Django would call the function ``views."
"special_case_2003(request)``"
msgstr ""

msgid ""
"``/articles/2003`` would not match any of these patterns, because each "
"pattern requires that the URL end with a slash."
msgstr ""

msgid ""
"``/articles/2003/03/building-a-django-site/`` would match the final pattern. "
"Django would call the function ``views.article_detail(request, year=2003, "
"month=3, slug=\"building-a-django-site\")``."
msgstr ""

msgid "Path converters"
msgstr "Perubah jalur"

msgid "The following path converters are available by default:"
msgstr "Perubah jalur berikut tersedia secara awalan:"

msgid ""
"``str`` - Matches any non-empty string, excluding the path separator, "
"``'/'``. This is the default if a converter isn't included in the expression."
msgstr ""

msgid "``int`` - Matches zero or any positive integer. Returns an ``int``."
msgstr ""
"``int`` - Cocok nol atau integer positif apapun. Mengembalikan sebuah "
"``int``."

msgid ""
"``slug`` - Matches any slug string consisting of ASCII letters or numbers, "
"plus the hyphen and underscore characters. For example, ``building-your-1st-"
"django-site``."
msgstr ""

msgid ""
"``uuid`` - Matches a formatted UUID. To prevent multiple URLs from mapping "
"to the same page, dashes must be included and letters must be lowercase. For "
"example, ``075194d3-6885-417e-a8a8-6c931e272f00``. Returns a :class:`~uuid."
"UUID` instance."
msgstr ""

msgid ""
"``path`` - Matches any non-empty string, including the path separator, "
"``'/'``. This allows you to match against a complete URL path rather than a "
"segment of a URL path as with ``str``."
msgstr ""

msgid "Registering custom path converters"
msgstr ""

msgid ""
"For more complex matching requirements, you can define your own path "
"converters."
msgstr ""

msgid "A converter is a class that includes the following:"
msgstr ""

msgid "A ``regex`` class attribute, as a string."
msgstr "Atribut kelas ``regex``, sebagai string."

msgid ""
"A ``to_python(self, value)`` method, which handles converting the matched "
"string into the type that should be passed to the view function. It should "
"raise ``ValueError`` if it can't convert the given value. A ``ValueError`` "
"is interpreted as no match and as a consequence a 404 response is sent to "
"the user unless another URL pattern matches."
msgstr ""

msgid ""
"A ``to_url(self, value)`` method, which handles converting the Python type "
"into a string to be used in the URL. It should raise ``ValueError`` if it "
"can't convert the given value. A ``ValueError`` is interpreted as no match "
"and as a consequence :func:`~django.urls.reverse` will raise :class:`~django."
"urls.NoReverseMatch` unless another URL pattern matches."
msgstr ""

msgid ""
"Register custom converter classes in your URLconf using :func:`~django.urls."
"register_converter`::"
msgstr ""

msgid "Using regular expressions"
msgstr "Menggunakan regular expression"

msgid ""
"If the paths and converters syntax isn't sufficient for defining your URL "
"patterns, you can also use regular expressions. To do so, use :func:`~django."
"urls.re_path` instead of :func:`~django.urls.path`."
msgstr ""

msgid ""
"In Python regular expressions, the syntax for named regular expression "
"groups is ``(?P<name>pattern)``, where ``name`` is the name of the group and "
"``pattern`` is some pattern to match."
msgstr ""

msgid ""
"Here's the example URLconf from earlier, rewritten using regular "
"expressions::"
msgstr ""

msgid ""
"This accomplishes roughly the same thing as the previous example, except:"
msgstr ""

msgid ""
"The exact URLs that will match are slightly more constrained. For example, "
"the year 10000 will no longer match since the year integers are constrained "
"to be exactly four digits long."
msgstr ""

msgid ""
"Each captured argument is sent to the view as a string, regardless of what "
"sort of match the regular expression makes."
msgstr ""

msgid ""
"When switching from using :func:`~django.urls.path` to :func:`~django.urls."
"re_path` or vice versa, it's particularly important to be aware that the "
"type of the view arguments may change, and so you may need to adapt your "
"views."
msgstr ""

msgid "Using unnamed regular expression groups"
msgstr ""

msgid ""
"As well as the named group syntax, e.g. ``(?P<year>[0-9]{4})``, you can also "
"use the shorter unnamed group, e.g. ``([0-9]{4})``."
msgstr ""

msgid ""
"This usage isn't particularly recommended as it makes it easier to "
"accidentally introduce errors between the intended meaning of a match and "
"the arguments of the view."
msgstr ""

msgid ""
"In either case, using only one style within a given regex is recommended. "
"When both styles are mixed, any unnamed groups are ignored and only named "
"groups are passed to the view function."
msgstr ""

msgid "Nested arguments"
msgstr "Penjelasan bersarang"

msgid ""
"Regular expressions allow nested arguments, and Django will resolve them and "
"pass them to the view. When reversing, Django will try to fill in all outer "
"captured arguments, ignoring any nested captured arguments. Consider the "
"following URL patterns which optionally take a page argument::"
msgstr ""

msgid ""
"Both patterns use nested arguments and will resolve: for example, ``blog/"
"page-2/`` will result in a match to ``blog_articles`` with two positional "
"arguments: ``page-2/`` and ``2``. The second pattern for ``comments`` will "
"match ``comments/page-2/`` with keyword argument ``page_number`` set to 2. "
"The outer argument in this case is a non-capturing argument ``(?:...)``."
msgstr ""

msgid ""
"The ``blog_articles`` view needs the outermost captured argument to be "
"reversed, ``page-2/`` or no arguments in this case, while ``comments`` can "
"be reversed with either no arguments or a value for ``page_number``."
msgstr ""

msgid ""
"Nested captured arguments create a strong coupling between the view "
"arguments and the URL as illustrated by ``blog_articles``: the view receives "
"part of the URL (``page-2/``) instead of only the value the view is "
"interested in. This coupling is even more pronounced when reversing, since "
"to reverse the view we need to pass the piece of URL instead of the page "
"number."
msgstr ""

msgid ""
"As a rule of thumb, only capture the values the view needs to work with and "
"use non-capturing arguments when the regular expression needs an argument "
"but the view ignores it."
msgstr ""

msgid "What the URLconf searches against"
msgstr ""

msgid ""
"The URLconf searches against the requested URL, as a normal Python string. "
"This does not include GET or POST parameters, or the domain name."
msgstr ""

msgid ""
"For example, in a request to ``https://www.example.com/myapp/``, the URLconf "
"will look for ``myapp/``."
msgstr ""
"Sebagai contoh, dalam permintaan pada ``https://www.example.com/myapp/``, "
"URLconf akan mencari ``myapp/``."

msgid ""
"In a request to ``https://www.example.com/myapp/?page=3``, the URLconf will "
"look for ``myapp/``."
msgstr ""

msgid ""
"The URLconf doesn't look at the request method. In other words, all request "
"methods -- ``POST``, ``GET``, ``HEAD``, etc. -- will be routed to the same "
"function for the same URL."
msgstr ""

msgid "Specifying defaults for view arguments"
msgstr "Menentukan awalan untuk menampilkan argumen"

msgid ""
"A convenient trick is to specify default parameters for your views' "
"arguments. Here's an example URLconf and view::"
msgstr ""

msgid ""
"In the above example, both URL patterns point to the same view -- ``views."
"page`` -- but the first pattern doesn't capture anything from the URL. If "
"the first pattern matches, the ``page()`` function will use its default "
"argument for ``num``, ``1``. If the second pattern matches, ``page()`` will "
"use whatever ``num`` value was captured."
msgstr ""

msgid ""
"Each regular expression in a ``urlpatterns`` is compiled the first time it's "
"accessed. This makes the system blazingly fast."
msgstr ""

msgid "Syntax of the ``urlpatterns`` variable"
msgstr "Sintaksis dari variabel ``urlpatterns``"

msgid ""
"``urlpatterns`` should be a :term:`sequence` of :func:`~django.urls.path` "
"and/or :func:`~django.urls.re_path` instances."
msgstr ""

msgid "Error handling"
msgstr "Penanganan kesalahan"

msgid ""
"When Django can't find a match for the requested URL, or when an exception "
"is raised, Django invokes an error-handling view."
msgstr ""

msgid ""
"The views to use for these cases are specified by four variables. Their "
"default values should suffice for most projects, but further customization "
"is possible by overriding their default values."
msgstr ""

msgid ""
"See the documentation on :ref:`customizing error views <customizing-error-"
"views>` for the full details."
msgstr ""
"Lihat dokumentasi pada :ref:`customizing error views 1` untuk rincian penuh. "

msgid ""
"Such values can be set in your root URLconf. Setting these variables in any "
"other URLconf will have no effect."
msgstr ""
"Nilai-nilai itu dapat disetel dalam URLconf akar anda. Pengaturan variabel-"
"variabel ini dalam URLconf lain apapun tidak mempunyai pengaruh."

msgid ""
"Values must be callables, or strings representing the full Python import "
"path to the view that should be called to handle the error condition at hand."
msgstr ""
"Nilai-nilai harus callable, atau deretan karakter mewakili jalur impor Pythn "
"penuh pada tampilan yang harus dipanggil untuk menangani kondisi kesalahan "
"di tangan."

msgid "The variables are:"
msgstr "Variabel nya adalah:"

msgid "``handler400`` -- See :data:`django.conf.urls.handler400`."
msgstr "``handler400`` -- Lihat :data:`django.conf.urls.handler400`."

msgid "``handler403`` -- See :data:`django.conf.urls.handler403`."
msgstr "``handler403`` -- Lihat :data:`django.conf.urls.handler403`."

msgid "``handler404`` -- See :data:`django.conf.urls.handler404`."
msgstr "``handler404`` -- Lihat :data:`django.conf.urls.handler404`."

msgid "``handler500`` -- See :data:`django.conf.urls.handler500`."
msgstr "``handler500`` -- Lihat :data:`django.conf.urls.handler500`."

msgid "Including other URLconfs"
msgstr "Menyertakan URLconf lain"

msgid ""
"At any point, your ``urlpatterns`` can \"include\" other URLconf modules. "
"This essentially \"roots\" a set of URLs below other ones."
msgstr ""

msgid ""
"For example, here's an excerpt of the URLconf for the `Django website`_ "
"itself. It includes a number of other URLconfs::"
msgstr ""

msgid ""
"Whenever Django encounters :func:`~django.urls.include()`, it chops off "
"whatever part of the URL matched up to that point and sends the remaining "
"string to the included URLconf for further processing."
msgstr ""

msgid ""
"Another possibility is to include additional URL patterns by using a list "
"of :func:`~django.urls.path` instances. For example, consider this URLconf::"
msgstr ""

msgid ""
"In this example, the ``/credit/reports/`` URL will be handled by the "
"``credit_views.report()`` Django view."
msgstr ""

msgid ""
"This can be used to remove redundancy from URLconfs where a single pattern "
"prefix is used repeatedly. For example, consider this URLconf::"
msgstr ""

msgid ""
"We can improve this by stating the common path prefix only once and grouping "
"the suffixes that differ::"
msgstr ""
"Kami dapat meningkatkan dengan menyatakan awalan jalur umum hanya sekali dan "
"mengelompokkan akhiran yang beda::"

msgid "Captured parameters"
msgstr "Parameter tertangkap"

msgid ""
"An included URLconf receives any captured parameters from parent URLconfs, "
"so the following example is valid::"
msgstr ""

msgid ""
"In the above example, the captured ``\"username\"`` variable is passed to "
"the included URLconf, as expected."
msgstr ""

msgid "Passing extra options to view functions"
msgstr "Melewatkan pilihan tambahan untuk melihat fungsi"

msgid ""
"URLconfs have a hook that lets you pass extra arguments to your view "
"functions, as a Python dictionary."
msgstr ""

msgid ""
"The :func:`~django.urls.path` function can take an optional third argument "
"which should be a dictionary of extra keyword arguments to pass to the view "
"function."
msgstr ""

msgid ""
"In this example, for a request to ``/blog/2005/``, Django will call ``views."
"year_archive(request, year=2005, foo='bar')``."
msgstr ""

msgid ""
"This technique is used in the :doc:`syndication framework </ref/contrib/"
"syndication>` to pass metadata and options to views."
msgstr ""

msgid "Dealing with conflicts"
msgstr "Berurusan dengan pertentangan"

msgid ""
"It's possible to have a URL pattern which captures named keyword arguments, "
"and also passes arguments with the same names in its dictionary of extra "
"arguments. When this happens, the arguments in the dictionary will be used "
"instead of the arguments captured in the URL."
msgstr ""

msgid "Passing extra options to ``include()``"
msgstr "Melewatkan pilihan tambahan untuk  ``include()``"

msgid ""
"Similarly, you can pass extra options to :func:`~django.urls.include` and "
"each line in the included URLconf will be passed the extra options."
msgstr ""

msgid "For example, these two URLconf sets are functionally identical:"
msgstr "Sebagai contoh, kumpulan URLcond dua ini adalah kegunaannya mirip:"

msgid "Set one::"
msgstr "Setel satu::"

msgid "Set two::"
msgstr "Setel dua::"

msgid ""
"Note that extra options will *always* be passed to *every* line in the "
"included URLconf, regardless of whether the line's view actually accepts "
"those options as valid. For this reason, this technique is only useful if "
"you're certain that every view in the included URLconf accepts the extra "
"options you're passing."
msgstr ""

msgid "Reverse resolution of URLs"
msgstr ""

msgid ""
"A common need when working on a Django project is the possibility to obtain "
"URLs in their final forms either for embedding in generated content (views "
"and assets URLs, URLs shown to the user, etc.) or for handling of the "
"navigation flow on the server side (redirections, etc.)"
msgstr ""

msgid ""
"It is strongly desirable to avoid hard-coding these URLs (a laborious, non-"
"scalable and error-prone strategy). Equally dangerous is devising ad-hoc "
"mechanisms to generate URLs that are parallel to the design described by the "
"URLconf, which can result in the production of URLs that become stale over "
"time."
msgstr ""

msgid ""
"In other words, what's needed is a DRY mechanism. Among other advantages it "
"would allow evolution of the URL design without having to go over all the "
"project source code to search and replace outdated URLs."
msgstr ""
"Dengan kata lain, apa yang dibutuhkan adalah mekanisme DRY. Diantara "
"keuntungan lain itu akan mengizinkan evolusi dari rancangan URL tanpa harus "
"pergi ke semua kode sumber proyek untuk mencari dan mengganti URL usang."

msgid ""
"The primary piece of information we have available to get a URL is an "
"identification (e.g. the name) of the view in charge of handling it. Other "
"pieces of information that necessarily must participate in the lookup of the "
"right URL are the types (positional, keyword) and values of the view "
"arguments."
msgstr ""

msgid ""
"Django provides a solution such that the URL mapper is the only repository "
"of the URL design. You feed it with your URLconf and then it can be used in "
"both directions:"
msgstr ""

msgid ""
"Starting with a URL requested by the user/browser, it calls the right Django "
"view providing any arguments it might need with their values as extracted "
"from the URL."
msgstr ""

msgid ""
"Starting with the identification of the corresponding Django view plus the "
"values of arguments that would be passed to it, obtain the associated URL."
msgstr ""
"Dimulai dengan pencirian dari tampilan Django sesuai ditambah nilai-nilai "
"dari argumen yang akan dilewatkan ke itu, ambil URL terkait."

msgid ""
"The first one is the usage we've been discussing in the previous sections. "
"The second one is what is known as *reverse resolution of URLs*, *reverse "
"URL matching*, *reverse URL lookup*, or simply *URL reversing*."
msgstr ""

msgid ""
"Django provides tools for performing URL reversing that match the different "
"layers where URLs are needed:"
msgstr ""

msgid "In templates: Using the :ttag:`url` template tag."
msgstr "Dalam cetakan: Menggunakan etiket cetakan :ttag:`url`."

msgid "In Python code: Using the :func:`~django.urls.reverse` function."
msgstr "Dalam kode Python: Menggunakan fungsi :func:`~django.urls.reverse`."

msgid ""
"In higher level code related to handling of URLs of Django model instances: "
"The :meth:`~django.db.models.Model.get_absolute_url` method."
msgstr ""

msgid "Consider again this URLconf entry::"
msgstr "Pertimbangkan kembali masukan URLconf ini::"

msgid ""
"According to this design, the URL for the archive corresponding to year "
"*nnnn* is ``/articles/<nnnn>/``."
msgstr ""

msgid "You can obtain these in template code by using:"
msgstr "Anda dapat mendapatkan ini dalam kode cetakan dengan menggunakan:"

msgid "Or in Python code::"
msgstr "Atau di kode Phyton ::"

msgid ""
"If, for some reason, it was decided that the URLs where content for yearly "
"article archives are published at should be changed then you would only need "
"to change the entry in the URLconf."
msgstr ""

msgid ""
"In some scenarios where views are of a generic nature, a many-to-one "
"relationship might exist between URLs and views. For these cases the view "
"name isn't a good enough identifier for it when comes the time of reversing "
"URLs. Read the next section to know about the solution Django provides for "
"this."
msgstr ""

msgid "Naming URL patterns"
msgstr "Menamai pola URL"

msgid ""
"In order to perform URL reversing, you'll need to use **named URL patterns** "
"as done in the examples above. The string used for the URL name can contain "
"any characters you like. You are not restricted to valid Python names."
msgstr ""

msgid ""
"When naming URL patterns, choose names that are unlikely to clash with other "
"applications' choice of names. If you call your URL pattern ``comment`` and "
"another application does the same thing, the URL that :func:`~django.urls."
"reverse()` finds depends on whichever pattern is last in your project's "
"``urlpatterns`` list."
msgstr ""

msgid ""
"Putting a prefix on your URL names, perhaps derived from the application "
"name (such as ``myapp-comment`` instead of ``comment``), decreases the "
"chance of collision."
msgstr ""

msgid ""
"You can deliberately choose the *same URL name* as another application if "
"you want to override a view. For example, a common use case is to override "
"the :class:`~django.contrib.auth.views.LoginView`. Parts of Django and most "
"third-party apps assume that this view has a URL pattern with the name "
"``login``. If you have a custom login view and give its URL the name "
"``login``, :func:`~django.urls.reverse()` will find your custom view as long "
"as it's in ``urlpatterns`` after ``django.contrib.auth.urls`` is included "
"(if that's included at all)."
msgstr ""

msgid ""
"You may also use the same name for multiple URL patterns if they differ in "
"their arguments. In addition to the URL name, :func:`~django.urls.reverse()` "
"matches the number of arguments and the names of the keyword arguments. Path "
"converters can also raise ``ValueError`` to indicate no match, see :ref:"
"`registering-custom-path-converters` for details."
msgstr ""

msgid "URL namespaces"
msgstr "Namespace URL"

msgid "Introduction"
msgstr "Kata Pengantar"

msgid ""
"URL namespaces allow you to uniquely reverse :ref:`named URL patterns "
"<naming-url-patterns>` even if different applications use the same URL "
"names. It's a good practice for third-party apps to always use namespaced "
"URLs (as we did in the tutorial). Similarly, it also allows you to reverse "
"URLs if multiple instances of an application are deployed. In other words, "
"since multiple instances of a single application will share named URLs, "
"namespaces provide a way to tell these named URLs apart."
msgstr ""

msgid ""
"Django applications that make proper use of URL namespacing can be deployed "
"more than once for a particular site. For example :mod:`django.contrib."
"admin` has an :class:`~django.contrib.admin.AdminSite` class which allows "
"you to :ref:`deploy more than one instance of the admin <multiple-admin-"
"sites>`.  In a later example, we'll discuss the idea of deploying the polls "
"application from the tutorial in two different locations so we can serve the "
"same functionality to two different audiences (authors and publishers)."
msgstr ""

msgid "A URL namespace comes in two parts, both of which are strings:"
msgstr "Sebuah namespace URL datang dalam dua bagian, keduanya adalah string:"

msgid "application namespace"
msgstr "namespace aplikasi"

msgid ""
"This describes the name of the application that is being deployed. Every "
"instance of a single application will have the same application namespace. "
"For example, Django's admin application has the somewhat predictable "
"application namespace of ``'admin'``."
msgstr ""

msgid "instance namespace"
msgstr "namespace instance"

msgid ""
"This identifies a specific instance of an application. Instance namespaces "
"should be unique across your entire project. However, an instance namespace "
"can be the same as the application namespace. This is used to specify a "
"default instance of an application. For example, the default Django admin "
"instance has an instance namespace of ``'admin'``."
msgstr ""
"Ini mencirikan instance khusus dari sebuah aplikasi. Namespace-namespace "
"instance harus unik terhadap keseluruhan proyen anda. Bagaimanapun, sebuah "
"namespace instance dapat berupa sama seperti namespace aplikasi. Ini "
"digunakan untuk menentukan instance awalan dari sebuah aplikasi. Sebagai "
"contoh, instance admin Django awalan mempunyai sebuah namespace instance "
"dari ``'admin'``."

msgid ""
"Namespaced URLs are specified using the ``':'`` operator. For example, the "
"main index page of the admin application is referenced using ``'admin:"
"index'``. This indicates a namespace of ``'admin'``, and a named URL of "
"``'index'``."
msgstr ""
"URL namespace ditentukan menggunakan penghubung ``':'``. Sebagai contoh, "
"halaman indeks utama dari aplikasi admin diacukan menggunakan ``'admin:"
"index'``. Ini menunjukkan sebuah namespace dari ``'admin'``, dan sebuah URL "
"bernama dari ``'index'``."

msgid ""
"Namespaces can also be nested. The named URL ``'sports:polls:index'`` would "
"look for a pattern named ``'index'`` in the namespace ``'polls'`` that is "
"itself defined within the top-level namespace ``'sports'``."
msgstr ""
"Namespace juga dapat bersarang. URL bernama ``'sports:polls:index'`` akan "
"terlihat untuk sebuah pola bernama ``'index'`` dalam namespace ``'polls'`` "
"yag itu sendiri ditentukan dalam namespace tingkat-atas ``'sports'``."

msgid "Reversing namespaced URLs"
msgstr ""

msgid ""
"When given a namespaced URL (e.g. ``'polls:index'``) to resolve, Django "
"splits the fully qualified name into parts and then tries the following "
"lookup:"
msgstr ""

msgid ""
"First, Django looks for a matching :term:`application namespace` (in this "
"example, ``'polls'``). This will yield a list of instances of that "
"application."
msgstr ""
"Pertama, Django mencari untuk kecocokan :term:`application namespace` (dalam "
"contoh ini, ``'polls'``). Ini akan menghasilkan daftar dari instance dari "
"aplikasi itu."

msgid ""
"If there is a current application defined, Django finds and returns the URL "
"resolver for that instance. The current application can be specified with "
"the ``current_app`` argument to the :func:`~django.urls.reverse()` function."
msgstr ""
"Jika ada aplikasi saat ini ditentukan, Django menemukan dan mengembalikan "
"penyelesai URL untuk instance itu. Aplikasi saat ini dapat ditentukan dengan "
"argumen ``current_app`` ke fungsi :func:`~django.urls.reverse()`."

msgid ""
"The :ttag:`url` template tag uses the namespace of the currently resolved "
"view as the current application in a :class:`~django.template."
"RequestContext`. You can override this default by setting the current "
"application on the :attr:`request.current_app <django.http.HttpRequest."
"current_app>` attribute."
msgstr ""

msgid ""
"If there is no current application, Django looks for a default application "
"instance. The default application instance is the instance that has an :term:"
"`instance namespace` matching the :term:`application namespace` (in this "
"example, an instance of ``polls`` called ``'polls'``)."
msgstr ""

msgid ""
"If there is no default application instance, Django will pick the last "
"deployed instance of the application, whatever its instance name may be."
msgstr ""

msgid ""
"If the provided namespace doesn't match an :term:`application namespace` in "
"step 1, Django will attempt a direct lookup of the namespace as an :term:"
"`instance namespace`."
msgstr ""

msgid ""
"If there are nested namespaces, these steps are repeated for each part of "
"the namespace until only the view name is unresolved. The view name will "
"then be resolved into a URL in the namespace that has been found."
msgstr ""

msgid ""
"To show this resolution strategy in action, consider an example of two "
"instances of the ``polls`` application from the tutorial: one called "
"``'author-polls'`` and one called ``'publisher-polls'``. Assume we have "
"enhanced that application so that it takes the instance namespace into "
"consideration when creating and displaying polls."
msgstr ""

msgid "``polls/urls.py``"
msgstr ""

msgid "Using this setup, the following lookups are possible:"
msgstr "Menggunakan pengaturan ini, pencarian berikut adalah mungkin:"

msgid ""
"If one of the instances is current - say, if we were rendering the detail "
"page in the instance ``'author-polls'`` - ``'polls:index'`` will resolve to "
"the index page of the ``'author-polls'`` instance; i.e. both of the "
"following will result in ``\"/author-polls/\"``."
msgstr ""

msgid "In the method of a class-based view::"
msgstr "Dalam metode dari tampilan berdasarkan-kelas::"

msgid "and in the template:"
msgstr "dan di cetakan:"

msgid ""
"If there is no current instance - say, if we were rendering a page somewhere "
"else on the site - ``'polls:index'`` will resolve to the last registered "
"instance of ``polls``. Since there is no default instance (instance "
"namespace of ``'polls'``), the last instance of ``polls`` that is registered "
"will be used. This would be ``'publisher-polls'`` since it's declared last "
"in the ``urlpatterns``."
msgstr ""

msgid ""
"``'author-polls:index'`` will always resolve to the index page of the "
"instance ``'author-polls'`` (and likewise for ``'publisher-polls'``) ."
msgstr ""

msgid ""
"If there were also a default instance - i.e., an instance named ``'polls'`` "
"- the only change from above would be in the case where there is no current "
"instance (the second item in the list above). In this case ``'polls:index'`` "
"would resolve to the index page of the default instance instead of the "
"instance declared last in ``urlpatterns``."
msgstr ""

msgid "URL namespaces and included URLconfs"
msgstr "Namespace URL dan URLconf disertakan"

msgid ""
"Application namespaces of included URLconfs can be specified in two ways."
msgstr ""
"Namespace-namespace aplikasi dari URLconf disertakan dapat ditentukan dalam "
"dua cara."

msgid ""
"Firstly, you can set an ``app_name`` attribute in the included URLconf "
"module, at the same level as the ``urlpatterns`` attribute. You have to pass "
"the actual module, or a string reference to the module, to :func:`~django."
"urls.include`, not the list of ``urlpatterns`` itself."
msgstr ""

msgid ""
"The URLs defined in ``polls.urls`` will have an application namespace "
"``polls``."
msgstr ""
"URL ditentukan dalam ``polls.urls`` akan memiliki sebuah namespace aplikasi "
"``polls``."

msgid ""
"Secondly, you can include an object that contains embedded namespace data. "
"If you ``include()`` a list of :func:`~django.urls.path` or :func:`~django."
"urls.re_path` instances, the URLs contained in that object will be added to "
"the global namespace. However, you can also ``include()`` a 2-tuple "
"containing::"
msgstr ""

msgid ""
"This will include the nominated URL patterns into the given application "
"namespace."
msgstr ""
"Ini akan menyertakan pola URL ditunjuk kedalam namespace aplikasi diberikan."

msgid ""
"The instance namespace can be specified using the ``namespace`` argument to :"
"func:`~django.urls.include`. If the instance namespace is not specified, it "
"will default to the included URLconf's application namespace. This means it "
"will also be the default instance for that namespace."
msgstr ""

msgid "Writing views"
msgstr "Menulis tampilan"

msgid ""
"A view function, or *view* for short, is a Python function that takes a web "
"request and returns a web response. This response can be the HTML contents "
"of a web page, or a redirect, or a 404 error, or an XML document, or an "
"image . . . or anything, really. The view itself contains whatever arbitrary "
"logic is necessary to return that response. This code can live anywhere you "
"want, as long as it's on your Python path. There's no other requirement--no "
"\"magic,\" so to speak. For the sake of putting the code *somewhere*, the "
"convention is to put views in a file called ``views.py``, placed in your "
"project or application directory."
msgstr ""

msgid "A simple view"
msgstr "Tampilan sederhana"

msgid ""
"Here's a view that returns the current date and time, as an HTML document::"
msgstr ""
"Disini adalah tampilan yang mengembalikan data dan waktu saat ini, sebagai "
"sebuah dokumen HTML::"

msgid "Let's step through this code one line at a time:"
msgstr "Mari kita melangkah melalui kode ini satu baris pada saat bersamaan:"

msgid ""
"First, we import the class :class:`~django.http.HttpResponse` from the :mod:"
"`django.http` module, along with Python's ``datetime`` library."
msgstr ""
"Pertama, kami impor kelas :class:`~django.http.HttpResponse` dari modul :mod:"
"`django.http`, bersama dengan pustaka ``datetime`` Python."

msgid ""
"Next, we define a function called ``current_datetime``. This is the view "
"function. Each view function takes an :class:`~django.http.HttpRequest` "
"object as its first parameter, which is typically named ``request``."
msgstr ""

msgid ""
"Note that the name of the view function doesn't matter; it doesn't have to "
"be named in a certain way in order for Django to recognize it. We're calling "
"it ``current_datetime`` here, because that name clearly indicates what it "
"does."
msgstr ""

msgid ""
"The view returns an :class:`~django.http.HttpResponse` object that contains "
"the generated response. Each view function is responsible for returning an :"
"class:`~django.http.HttpResponse` object. (There are exceptions, but we'll "
"get to those later.)"
msgstr ""
"Tampilan mengembalikan sebuah obyek :class:`~django.http.HttpResponse` yang "
"mengandung tanggapan dibangkitkan. Setiap fungsi tampilan bertanggungjawab "
"untuk mengembalikan sebuah obyek :class:`~django.http.HttpResponse`. (ada "
"pengecualian, tetapi kita akan kesana nanti.) "

msgid "Django's Time Zone"
msgstr "Zona Waktu Django"

msgid ""
"Django includes a :setting:`TIME_ZONE` setting that defaults to ``America/"
"Chicago``. This probably isn't where you live, so you might want to change "
"it in your settings file."
msgstr ""
"Django menyertakan sebuah pengaturan :setting:`TIME_ZONE` yang awalan pada "
"``America/Chicago``. Ini mungkin bukan dimana anda tinggal, jadi anda "
"mungkin ingin merubah itu dalam berkas pengaturan anda."

msgid "Mapping URLs to views"
msgstr "Memetakan URL ke tampilan"

msgid ""
"So, to recap, this view function returns an HTML page that includes the "
"current date and time. To display this view at a particular URL, you'll need "
"to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""
"Jadi, untuk mengikhtisarkan, fungsi tampilan ini mengembalikan sebuah "
"halaman HTML yang menyertakan tanggal dan waktu saat ini. Untuk menampilkan "
"tampilan ini pada URL tertentu, anda akan butuh membuat sebuah *URLconf*; "
"lihat :doc:`/topics/http/urls` untuk petunjuk. "

msgid "Returning errors"
msgstr "Mengembalikan kesalahan"

msgid ""
"Django provides help for returning HTTP error codes. There are subclasses "
"of :class:`~django.http.HttpResponse` for a number of common HTTP status "
"codes other than 200 (which means *\"OK\"*). You can find the full list of "
"available subclasses in the :ref:`request/response <ref-httpresponse-"
"subclasses>` documentation. Return an instance of one of those subclasses "
"instead of a normal :class:`~django.http.HttpResponse` in order to signify "
"an error. For example::"
msgstr ""

msgid ""
"There isn't a specialized subclass for every possible HTTP response code, "
"since many of them aren't going to be that common. However, as documented in "
"the :class:`~django.http.HttpResponse` documentation, you can also pass the "
"HTTP status code into the constructor for :class:`~django.http.HttpResponse` "
"to create a return class for any status code you like. For example::"
msgstr ""
"Tidak ada subkelas khusus untuk setiap kemungkinan kode tanggapan HTTP, "
"sejak banyak dari mereka tidak akan menjadi yang umum. Bagaimanapun, seperti "
"didokumentasikan dalam dokumentasi :class:`~django.http.HttpResponse`, anda "
"dapat juga melewatkan kode keadaan HTTP kedalam pembangun untuk :class:"
"`~django.http.HttpResponse` untuk membuat kelas kembalian untuk kode keadaan "
"apapun anda sukai. Sebagai contoh::"

msgid ""
"Because 404 errors are by far the most common HTTP error, there's an easier "
"way to handle those errors."
msgstr ""
"Karena kesalahan 404 sejauh ini paling umum kesalahan HTTP, ada sebuah cara "
"paling mudah untuk menangani kesalahan-kesalahan tersebut."

msgid "The ``Http404`` exception"
msgstr "Pengecualian ``Http404``"

msgid ""
"When you return an error such as :class:`~django.http.HttpResponseNotFound`, "
"you're responsible for defining the HTML of the resulting error page::"
msgstr ""
"Ketika anda mengembalikan sebuah kesalahan seperti :class:`~django.http."
"HttpResponseNotFound`, anda bertanggung jawab untuk menentukan HTML dari "
"menghasilkan halaman kesalahan::"

msgid ""
"For convenience, and because it's a good idea to have a consistent 404 error "
"page across your site, Django provides an ``Http404`` exception. If you "
"raise ``Http404`` at any point in a view function, Django will catch it and "
"return the standard error page for your application, along with an HTTP "
"error code 404."
msgstr ""
"Untuk kenyamanan, dan karena itu adalah ide bagus untuk memiliki halaman "
"kesalahan 404 tetap terhadap situs anda, Django menyediakan sebuah "
"pengecualian ``Http404`` pada titik apapun dalam fungsi tampilan, Django "
"akan menangkap itu dan mengembalikan halaman kesalahan standar untuk "
"aplikasi anda, bersama dengan sebuah kode kesalahan HTTP 404."

msgid ""
"In order to show customized HTML when Django returns a 404, you can create "
"an HTML template named ``404.html`` and place it in the top level of your "
"template tree. This template will then be served when :setting:`DEBUG` is "
"set to ``False``."
msgstr ""
"Untuk menampilkan HTML disesuaikan ketika Django mengembalikan sebuah 404, "
"anda dapat membuat sebuah cetakan HTML bernama ``404.html`` dan menempatkan "
"itu dalam tingkat atas dari pohon cetakan anda. Cetakan anda kemudian akan "
"dilayani ketika :setting:`DEBUG` disetel menjadi ``False``."

msgid ""
"When :setting:`DEBUG` is ``True``, you can provide a message to ``Http404`` "
"and it will appear in the standard 404 debug template. Use these messages "
"for debugging purposes; they generally aren't suitable for use in a "
"production 404 template."
msgstr ""
"Ketika :setting:`DEBUG` adalah ``True``, anda dapat menyediakan sebuah pesan "
"pada ``Http404`` dan itu akan muncul dalam cetakan mencari kesalahan 404 "
"standar. Gunakan pesan-pesan ini untuk tujuan mencari kesalahan; mereka "
"umumnya tidak cocok untuk digunakan dalam produksi cetakan 404."

msgid "Customizing error views"
msgstr "Menyesuaikan tampilan kesalahan"

msgid ""
"The default error views in Django should suffice for most web applications, "
"but can easily be overridden if you need any custom behavior. Specify the "
"handlers as seen below in your URLconf (setting them anywhere else will have "
"no effect)."
msgstr ""

msgid ""
"The :func:`~django.views.defaults.page_not_found` view is overridden by :"
"data:`~django.conf.urls.handler404`::"
msgstr ""
"Tampilan :func:`~django.views.defaults.page_not_found` ditimpa oleh :data:"
"`~django.conf.urls.handler404`::"

msgid ""
"The :func:`~django.views.defaults.server_error` view is overridden by :data:"
"`~django.conf.urls.handler500`::"
msgstr ""
"Tampilan :func:`~django.views.defaults.server_error` ditimpa oleh :data:"
"`~django.conf.urls.handler500`::"

msgid ""
"The :func:`~django.views.defaults.permission_denied` view is overridden by :"
"data:`~django.conf.urls.handler403`::"
msgstr ""
"Tampilan :func:`~django.views.defaults.permission_denied` ditimpa oleh :data:"
"`~django.conf.urls.handler403`::"

msgid ""
"The :func:`~django.views.defaults.bad_request` view is overridden by :data:"
"`~django.conf.urls.handler400`::"
msgstr ""
"Tampilan :func:`~django.views.defaults.bad_request` ditimpa oleh :data:"
"`~django.conf.urls.handler400`::"

msgid ""
"Use the :setting:`CSRF_FAILURE_VIEW` setting to override the CSRF error view."
msgstr ""
"Gunakan pengaturan :setting:`CSRF_FAILURE_VIEW` untuk menimpa tampilan "
"kesalahan CSRF."

msgid "Testing custom error views"
msgstr "Menguji penyesuaian tampilan kesalahan"

msgid ""
"To test the response of a custom error handler, raise the appropriate "
"exception in a test view. For example::"
msgstr ""

msgid ""
"As well as being synchronous functions, views can also be asynchronous "
"(\"async\") functions, normally defined using Python's ``async def`` syntax. "
"Django will automatically detect these and run them in an async context. "
"However, you will need to use an async server based on ASGI to get their "
"performance benefits."
msgstr ""

msgid "Here's an example of an async view::"
msgstr "Ini adalah contoh tampilan asinkronus::"

msgid ""
"You can read more about Django's async support, and how to best use async "
"views, in :doc:`/topics/async`."
msgstr ""

msgid "Format localization"
msgstr "Bentuk lokalisasi"

msgid ""
"Django's formatting system is capable of displaying dates, times and numbers "
"in templates using the format specified for the current :term:`locale "
"<locale name>`. It also handles localized input in forms."
msgstr ""

msgid ""
"When it's enabled, two users accessing the same content may see dates, times "
"and numbers formatted in different ways, depending on the formats for their "
"current locale."
msgstr ""
"Ketika itu diadakan, dua pengguna mengakses isi sama mungkin melihat "
"tanggal, waktu dan ang berbentuk dalam cara berbeda, tergantung pada bentuk "
"untuk lokal saat ini."

msgid ""
"The formatting system is disabled by default. To enable it, it's necessary "
"to set :setting:`USE_L10N = True <USE_L10N>` in your settings file."
msgstr ""
"Sistem pembentukan ditiadakan secara awalan. Untuk mengadakan itu, itu "
"diperlukan untuk mengatur :setting:`USE_L10N = True 1` dalam berkas "
"pengaturan anda."

msgid ""
"To enable number formatting with thousand separators, it is necessary to "
"set :setting:`USE_THOUSAND_SEPARATOR = True <USE_THOUSAND_SEPARATOR>` in "
"your settings file. Alternatively, you could use :tfilter:`intcomma` to "
"format numbers in your template."
msgstr ""

msgid ""
"There is a related :setting:`USE_I18N` setting that controls if Django "
"should activate translation. See :doc:`/topics/i18n/translation` for more "
"details."
msgstr ""

msgid "Locale aware input in forms"
msgstr ""

msgid ""
"When formatting is enabled, Django can use localized formats when parsing "
"dates, times and numbers in forms. That means it tries different formats for "
"different locales when guessing the format used by the user when inputting "
"data on forms."
msgstr ""
"Ketika pembentukan diadakan, Django menggunakan bentuk lokalisasi ketika "
"mengurai tanggal, waktu dan sejumlah dalam formulir. Itu berarti itu mencoba "
"bentuk berbeda untuk lokal-lokal berbeda ketika menebak bentuk digunakan "
"oleh pengguna ketika memasukkan data pada formulir."

msgid ""
"Django uses different formats for displaying data to those it uses for "
"parsing data. Most notably, the formats for parsing dates can't use the ``"
"%a`` (abbreviated weekday name), ``%A`` (full weekday name), ``%b`` "
"(abbreviated month name), ``%B`` (full month name), or ``%p`` (AM/PM)."
msgstr ""
"Django menggunakan bentuk-bentuk berbeda untuk menampilkan data pada itu "
"digunakan untuk mengurai data. Kebanyakan terutama, bentuk-bentuk untuk "
"mengurai tanggal tidak dapat menggunakan ``%a`` (nama hari kerja disingkat), "
"``%A`` (nama hari kerja penuh), ``%b`` (nama bulan disingkat), ``%B`` (nama "
"bulan penuh), atau ``%p`` (AM/PM)."

msgid ""
"To enable a form field to localize input and output data use its "
"``localize`` argument::"
msgstr ""

msgid "Controlling localization in templates"
msgstr "Mengendalikan lokalisasi dalam cetakan-cetakan"

msgid ""
"When you have enabled formatting with :setting:`USE_L10N`, Django will try "
"to use a locale specific format whenever it outputs a value in a template."
msgstr ""
"Ketika anda mengadakan pembentukan dengan :setting:`USE_L10N`, Django akan "
"mencoba menggunakan bentuk khusus lokal kapanpun itu mengeluarkan sebuah "
"nilai dalam sebuah cetakan. "

msgid ""
"However, it may not always be appropriate to use localized values -- for "
"example, if you're outputting JavaScript or XML that is designed to be "
"machine-readable, you will always want unlocalized values. You may also want "
"to use localization in selected templates, rather than using localization "
"everywhere."
msgstr ""
"Bagaimanapun, itu mungkin tidak selalu sesuai untuk menggunakan nilai-nilai "
"lokal -- sebagai contoh, jika anda sedang mengeluarkan JavaScript atau XML "
"yang dirancang untuk menjadi dapat-dibaca-mesin, anda akan selalu ingin "
"nilai-nilai tidak terlokalisasi. Anda mungkin ingin juga menggunakan "
"lokalisasi dalam cetakan-cetakan terpilih, daripada menggunakan lokalisasi "
"dimanapun,"

msgid ""
"To allow for fine control over the use of localization, Django provides the "
"``l10n`` template library that contains the following tags and filters."
msgstr ""
"Untuk mengizinkan pengendalian baik terhadap penggunaan lokalisasi, Django "
"menyediakan pustaka cetakan ``l10n`` yang mengandung etiket-etiket dan "
"penyaring-penyaring berikut"

msgid "Template tags"
msgstr "Etiket cetakan"

msgid "``localize``"
msgstr "``localize``"

msgid ""
"Enables or disables localization of template variables in the contained "
"block."
msgstr ""
"Mengadakan atau meniadakan lokalisasi dari variabel-variabel cetakan dalam "
"blok terkandung."

msgid ""
"This tag allows a more fine grained control of localization than :setting:"
"`USE_L10N`."
msgstr ""
"Etiket ini mengizinkan pengendalian berkurai baik dari lokalisasi daripada :"
"setting:`USE_L10N`."

msgid "To activate or deactivate localization for a template block, use::"
msgstr ""
"Untuk mengaktifkan atau menonaktifkan lokalisasi untuk sebuah blok cetakan, "
"gunakan::"

msgid ""
"The value of :setting:`USE_L10N` isn't respected inside of a ``{% localize %}"
"`` block."
msgstr ""
"Nilai dari :setting:`USE_L10N` tidak dihormati dalam dari blok ``{% localize "
"%}``."

msgid ""
"See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that "
"will do the same job on a per-variable basis."
msgstr ""
"Lihat :tfilter:`localize` dan :tfilter:`unlocalize` untuk penyaring cetakan "
"yang akan melakukan pekerjaan sama pada dasar per-variabel."

msgid "Template filters"
msgstr "Filter templat"

msgid "Forces localization of a single value."
msgstr "memaksa lokalisasi pada sebuah nilai tunggal."

msgid ""
"To disable localization on a single value, use :tfilter:`unlocalize`. To "
"control localization over a large section of a template, use the :ttag:"
"`localize` template tag."
msgstr ""
"Untuk meniadakan lokalisasi pada sebuah nilai tunggal, gunakan :tfilter:"
"`unlocalize`. Untuk mengendalikan lokalisasi terhadap bagian besar dari "
"sebuah cetakan, gunakan etiket cetakan :ttag:`localize`."

msgid "``unlocalize``"
msgstr "``unlocalize``"

msgid "Forces a single value to be printed without localization."
msgstr "Memaksa sebuah nilai tunggal untuk dicetak tanpa lokalisasi."

msgid ""
"To force localization of a single value, use :tfilter:`localize`. To control "
"localization over a large section of a template, use the :ttag:`localize` "
"template tag."
msgstr ""
"Untuk memaksa lokalisasi pada sebuah nilai tunggal, gunakan :tfilter:"
"`localize`. Untuk mengendalikan lokalisasi terhadap bagian besar dari sebuah "
"cetakan, gunakan etiket cetakan :ttag:`localize`."

msgid ""
"Returns a string representation for unlocalized numbers  (``int``, "
"``float``, or ``Decimal``)."
msgstr ""

msgid "Creating custom format files"
msgstr "Membuat berkas bentuk disesuaikan"

msgid ""
"Django provides format definitions for many locales, but sometimes you might "
"want to create your own, because a format file doesn't exist for your "
"locale, or because you want to overwrite some of the values."
msgstr ""

msgid ""
"To use custom formats, specify the path where you'll place format files "
"first.  To do that, set your :setting:`FORMAT_MODULE_PATH` setting to the "
"package where format files will exist, for instance::"
msgstr ""

msgid ""
"Files are not placed directly in this directory, but in a directory named as "
"the locale, and must be named ``formats.py``. Be careful not to put "
"sensitive information in these files as values inside can be exposed if you "
"pass the string to ``django.utils.formats.get_format()`` (used by the :"
"tfilter:`date` template filter)."
msgstr ""
"Berkas-berkas tidak ditempatkan langsung dalam direktori ini, tetapi dalam "
"sebuah direktori bernama seperti lokal, dan harus dinamai ``formats.py``. "
"Waspadalah tidak menaruh informasi sensitif dalam berkas-berkas ini didalam "
"dapat dikeluarkan jika anda melewatkan string ``django.utils.formats."
"get_format()`` (digunakan oleh penyaring cetakan :tfilter:`date`)."

msgid ""
"To customize the English formats, a structure like this would be needed::"
msgstr ""
"Untuk menyesuaikan bentuk Inggris, sebuah struktur seperti ini akan "
"diperlukan::"

msgid ""
"where :file:`formats.py` contains custom format definitions. For example::"
msgstr ""
"Selagi :file:`formats.py` mengandung pengertian bentuk penyesuaian. Sebagai "
"contoh::"

msgid ""
"to use a non-breaking space (Unicode ``00A0``) as a thousand separator, "
"instead of the default for English, a comma."
msgstr ""

msgid "Limitations of the provided locale formats"
msgstr "Batasan-batasan dari bentuk lokal disediakan."

msgid ""
"Some locales use context-sensitive formats for numbers, which Django's "
"localization system cannot handle automatically."
msgstr ""

msgid "Switzerland (German)"
msgstr "Swis (Jerman)"

msgid ""
"The Swiss number formatting depends on the type of number that is being "
"formatted. For monetary values, a comma is used as the thousand separator "
"and a decimal point for the decimal separator. For all other numbers, a "
"comma is used as decimal separator and a space as thousand separator. The "
"locale format provided by Django uses the generic separators, a comma for "
"decimal and a space for thousand separators."
msgstr ""

msgid "Internationalization and localization"
msgstr "Internasionalisasi dan lokalisasi"

msgid ""
"The goal of internationalization and localization is to allow a single web "
"application to offer its content in languages and formats tailored to the "
"audience."
msgstr ""

msgid ""
"Django has full support for :doc:`translation of text </topics/i18n/"
"translation>`, :doc:`formatting of dates, times and numbers </topics/i18n/"
"formatting>`, and :doc:`time zones </topics/i18n/timezones>`."
msgstr ""

msgid "Essentially, Django does two things:"
msgstr "Pada dasarnya, Django melakukan dua hal:"

msgid ""
"It allows developers and template authors to specify which parts of their "
"apps should be translated or formatted for local languages and cultures."
msgstr ""

msgid ""
"It uses these hooks to localize web apps for particular users according to "
"their preferences."
msgstr ""

msgid ""
"Translation depends on the target language, and formatting usually depends "
"on the target country. This information is provided by browsers in the "
"``Accept-Language`` header. However, the time zone isn't readily available."
msgstr ""

msgid "Definitions"
msgstr "Penentuan"

msgid ""
"The words \"internationalization\" and \"localization\" often cause "
"confusion; here's a simplified definition:"
msgstr ""

msgid "internationalization"
msgstr "internasionalisasi"

msgid "Preparing the software for localization. Usually done by developers."
msgstr ""

msgid "localization"
msgstr "pelokalan"

msgid ""
"Writing the translations and local formats. Usually done by translators."
msgstr ""

msgid ""
"More details can be found in the `W3C Web Internationalization FAQ`_, the "
"`Wikipedia article`_ or the `GNU gettext documentation`_."
msgstr ""

msgid ""
"Translation and formatting are controlled by :setting:`USE_I18N` and :"
"setting:`USE_L10N` settings respectively. However, both features involve "
"internationalization and localization. The names of the settings are an "
"unfortunate result of Django's history."
msgstr ""

msgid ""
"Here are some other terms that will help us to handle a common language:"
msgstr ""
"Disini adalah beberapa ketentuan lain yang akan membantu kami menangani "
"bahasa umum:"

msgid "locale name"
msgstr "nama lokal"

msgid ""
"A locale name, either a language specification of the form ``ll`` or a "
"combined language and country specification of the form ``ll_CC``. Examples: "
"``it``, ``de_AT``, ``es``, ``pt_BR``, ``sr_Latn``. The language part is "
"always in lowercase. The country part is in titlecase if it has more than 2 "
"characters, otherwise it's in uppercase. The separator is an underscore."
msgstr ""

msgid "language code"
msgstr "kode bahasa"

msgid ""
"Represents the name of a language. Browsers send the names of the languages "
"they accept in the ``Accept-Language`` HTTP header using this format. "
"Examples: ``it``, ``de-at``, ``es``, ``pt-br``. Language codes are generally "
"represented in lowercase, but the HTTP ``Accept-Language`` header is case-"
"insensitive. The separator is a dash."
msgstr ""

msgid "message file"
msgstr "berkas pesan"

msgid ""
"A message file is a plain-text file, representing a single language, that "
"contains all available :term:`translation strings <translation string>` and "
"how they should be represented in the given language. Message files have a "
"``.po`` file extension."
msgstr ""

msgid "translation string"
msgstr "deretan kalimat terjemahan"

msgid "A literal that can be translated."
msgstr ""

msgid "format file"
msgstr "bentuk berkas"

msgid ""
"A format file is a Python module that defines the data formats for a given "
"locale."
msgstr ""

msgid "Time zones"
msgstr "Zona waktu"

msgid ""
"When support for time zones is enabled, Django stores datetime information "
"in UTC in the database, uses time-zone-aware datetime objects internally, "
"and translates them to the end user's time zone in templates and forms."
msgstr ""

msgid ""
"This is handy if your users live in more than one time zone and you want to "
"display datetime information according to each user's wall clock."
msgstr ""

msgid ""
"Even if your website is available in only one time zone, it's still good "
"practice to store data in UTC in your database. The main reason is daylight "
"saving time (DST). Many countries have a system of DST, where clocks are "
"moved forward in spring and backward in autumn. If you're working in local "
"time, you're likely to encounter errors twice a year, when the transitions "
"happen. This probably doesn't matter for your blog, but it's a problem if "
"you over bill or under bill your customers by one hour, twice a year, every "
"year. The solution to this problem is to use UTC in the code and use local "
"time only when interacting with end users."
msgstr ""

msgid ""
"Time zone support is disabled by default. To enable it, set :setting:`USE_TZ "
"= True <USE_TZ>` in your settings file."
msgstr ""

msgid "In Django 5.0, time zone support will be enabled by default."
msgstr "Di Django 5.0, dukungan zona waktu akan diadakan secara awalan."

msgid ""
"Time zone support uses :mod:`zoneinfo`, which is part of the Python standard "
"library from Python 3.9.  The ``backports.zoneinfo`` package is "
"automatically installed alongside Django if you are using Python 3.8."
msgstr ""

msgid "Support for non-``pytz`` timezone implementations was added."
msgstr ""

msgid ""
":mod:`zoneinfo` was made the default timezone implementation. You may "
"continue to use `pytz`_ during the 4.x release cycle via the :setting:"
"`USE_DEPRECATED_PYTZ` setting."
msgstr ""

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes :setting:`USE_TZ = True <USE_TZ>` for "
"convenience."
msgstr ""

msgid ""
"If you're wrestling with a particular problem, start with the :ref:`time "
"zone FAQ <time-zones-faq>`."
msgstr ""

msgid "Concepts"
msgstr "Konsep"

msgid "Naive and aware datetime objects"
msgstr ""

msgid ""
"Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that "
"can be used to store time zone information, represented as an instance of a "
"subclass of :class:`datetime.tzinfo`. When this attribute is set and "
"describes an offset, a datetime object is **aware**. Otherwise, it's "
"**naive**."
msgstr ""

msgid ""
"You can use :func:`~django.utils.timezone.is_aware` and :func:`~django.utils."
"timezone.is_naive` to determine whether datetimes are aware or naive."
msgstr ""

msgid ""
"When time zone support is disabled, Django uses naive datetime objects in "
"local time. This is sufficient for many use cases. In this mode, to obtain "
"the current time, you would write::"
msgstr ""

msgid ""
"When time zone support is enabled (:setting:`USE_TZ=True <USE_TZ>`), Django "
"uses time-zone-aware datetime objects. If your code creates datetime "
"objects, they should be aware too. In this mode, the example above becomes::"
msgstr ""

msgid ""
"Dealing with aware datetime objects isn't always intuitive. For instance, "
"the ``tzinfo`` argument of the standard datetime constructor doesn't work "
"reliably for time zones with DST. Using UTC is generally safe; if you're "
"using other time zones, you should review the :mod:`zoneinfo` documentation "
"carefully."
msgstr ""

msgid ""
"Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute, "
"and PostgreSQL has a matching ``time with time zone`` type. However, as "
"PostgreSQL's docs put it, this type \"exhibits properties which lead to "
"questionable usefulness\"."
msgstr ""

msgid ""
"Django only supports naive time objects and will raise an exception if you "
"attempt to save an aware time object, as a timezone for a time with no "
"associated date does not make sense."
msgstr ""

msgid "Interpretation of naive datetime objects"
msgstr ""

msgid ""
"When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime "
"objects, in order to preserve backwards-compatibility. When the database "
"layer receives one, it attempts to make it aware by interpreting it in the :"
"ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""

msgid ""
"Unfortunately, during DST transitions, some datetimes don't exist or are "
"ambiguous. That's why you should always create aware datetime objects when "
"time zone support is enabled. (See the :mod:`Using ZoneInfo section of the "
"zoneinfo docs <zoneinfo>` for examples using the ``fold`` attribute to "
"specify the offset that should apply to a datetime during a DST transition.)"
msgstr ""

msgid ""
"In practice, this is rarely an issue. Django gives you aware datetime "
"objects in the models and forms, and most often, new datetime objects are "
"created from existing ones through :class:`~datetime.timedelta` arithmetic. "
"The only datetime that's often created in application code is the current "
"time, and :func:`timezone.now() <django.utils.timezone.now>` automatically "
"does the right thing."
msgstr ""

msgid "Default time zone and current time zone"
msgstr "Zona waktu awal dan zona waktu saat ini"

msgid ""
"The **default time zone** is the time zone defined by the :setting:"
"`TIME_ZONE` setting."
msgstr ""
"**zona waktu awalan** adalah zona waktu ditentukan oleh pengaturan :setting:"
"`TIME_ZONE`."

msgid "The **current time zone** is the time zone that's used for rendering."
msgstr ""
"**zona waktu saat ini** adalah zona waktu yang digunakan untuk membangun."

msgid ""
"You should set the current time zone to the end user's actual time zone "
"with :func:`~django.utils.timezone.activate`. Otherwise, the default time "
"zone is used."
msgstr ""
"Anda harus mensetel zona waktu saat ini pada zona akhir saat ini pengguna "
"akhir dengan :func:`~django.utils.timezone.activate`. Sebaliknya, zona waktu "
"awalan digunakan."

msgid ""
"As explained in the documentation of :setting:`TIME_ZONE`, Django sets "
"environment variables so that its process runs in the default time zone. "
"This happens regardless of the value of :setting:`USE_TZ` and of the current "
"time zone."
msgstr ""

msgid ""
"When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-"
"compatibility with applications that still rely on local time. However, :ref:"
"`as explained above <naive-datetime-objects>`, this isn't entirely reliable, "
"and you should always work with aware datetimes in UTC in your own code. For "
"instance, use :meth:`~datetime.datetime.fromtimestamp` and set the ``tz`` "
"parameter to :data:`~django.utils.timezone.utc`."
msgstr ""

msgid "Selecting the current time zone"
msgstr "Memilih zona waktu saat ini"

msgid ""
"The current time zone is the equivalent of the current :term:`locale <locale "
"name>` for translations. However, there's no equivalent of the ``Accept-"
"Language`` HTTP header that Django could use to determine the user's time "
"zone automatically. Instead, Django provides :ref:`time zone selection "
"functions <time-zone-selection-functions>`. Use them to build the time zone "
"selection logic that makes sense for you."
msgstr ""

msgid ""
"Most websites that care about time zones ask users in which time zone they "
"live and store this information in the user's profile. For anonymous users, "
"they use the time zone of their primary audience or UTC. :func:`zoneinfo."
"available_timezones` provides a set of available timezones that you can use "
"to build a map from likely locations to time zones."
msgstr ""

msgid ""
"Here's an example that stores the current timezone in the session. (It skips "
"error handling entirely for the sake of simplicity.)"
msgstr ""

msgid "Add the following middleware to :setting:`MIDDLEWARE`::"
msgstr "Menambah middleware berikut ke :setting:`MIDDLEWARE`::"

msgid "Create a view that can set the current timezone::"
msgstr "Buat tampilan yang dapat mengatur zona waktu saat ini ::"

msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr ""
"Sertakan sebuah formulir dalam ``template.html`` yang akan ``POST`` ke "
"tampilan ini:"

msgid "Time zone aware input in forms"
msgstr "Zona waktu menyadari masukan dalam formulir"

msgid ""
"When you enable time zone support, Django interprets datetimes entered in "
"forms in the :ref:`current time zone <default-current-time-zone>` and "
"returns aware datetime objects in ``cleaned_data``."
msgstr ""

msgid ""
"Converted datetimes that don't exist or are ambiguous because they fall in a "
"DST transition will be reported as invalid values."
msgstr ""

msgid "Time zone aware output in templates"
msgstr "Zona waktu menyadari keluaran dalam cetakan"

msgid ""
"When you enable time zone support, Django converts aware datetime objects to "
"the :ref:`current time zone <default-current-time-zone>` when they're "
"rendered in templates. This behaves very much like :doc:`format localization "
"</topics/i18n/formatting>`."
msgstr ""

msgid ""
"Django doesn't convert naive datetime objects, because they could be "
"ambiguous, and because your code should never produce naive datetimes when "
"time zone support is enabled. However, you can force conversion with the "
"template filters described below."
msgstr ""

msgid ""
"Conversion to local time isn't always appropriate -- you may be generating "
"output for computers rather than for humans. The following filters and tags, "
"provided by the ``tz`` template tag library, allow you to control the time "
"zone conversions."
msgstr ""

msgid "``localtime``"
msgstr "``localtime``"

msgid ""
"Enables or disables conversion of aware datetime objects to the current time "
"zone in the contained block."
msgstr ""

msgid ""
"This tag has exactly the same effects as the :setting:`USE_TZ` setting as "
"far as the template engine is concerned. It allows a more fine grained "
"control of conversion."
msgstr ""

msgid "To activate or deactivate conversion for a template block, use::"
msgstr ""

msgid ""
"The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime %}"
"`` block."
msgstr ""

msgid "``timezone``"
msgstr "``timezone``"

msgid ""
"Sets or unsets the current time zone in the contained block. When the "
"current time zone is unset, the default time zone applies."
msgstr ""

msgid "``get_current_timezone``"
msgstr "``get_current_timezone``"

msgid ""
"You can get the name of the current time zone using the "
"``get_current_timezone`` tag::"
msgstr ""

msgid ""
"Alternatively, you can activate the :func:`~django.template."
"context_processors.tz` context processor and use the ``TIME_ZONE`` context "
"variable."
msgstr ""

msgid ""
"These filters accept both aware and naive datetimes. For conversion "
"purposes, they assume that naive datetimes are in the default time zone. "
"They always return aware datetimes."
msgstr ""

msgid "Forces conversion of a single value to the current time zone."
msgstr ""

msgid "``utc``"
msgstr "``utc``"

msgid "Forces conversion of a single value to UTC."
msgstr ""

msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr ""

msgid ""
"The argument must be an instance of a :class:`~datetime.tzinfo` subclass or "
"a time zone name."
msgstr ""

msgid "Migration guide"
msgstr "Panduan perpindahan"

msgid ""
"Here's how to migrate a project that was started before Django supported "
"time zones."
msgstr ""

msgid "Database"
msgstr "Basisdata"

msgid "PostgreSQL"
msgstr "PostgreSQL"

msgid ""
"The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In "
"practice, this means it converts datetimes from the connection's time zone "
"to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""

msgid ""
"As a consequence, if you're using PostgreSQL, you can switch between "
"``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's "
"time zone will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so "
"that Django obtains correct datetimes in all cases. You don't need to "
"perform any data conversions."
msgstr ""

msgid "Other databases"
msgstr "Basisdata lain"

msgid ""
"Other backends store datetimes without time zone information. If you switch "
"from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data "
"from local time to UTC -- which isn't deterministic if your local time has "
"DST."
msgstr ""

msgid "Code"
msgstr "Kode"

msgid ""
"The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings "
"file. At this point, things should mostly work. If you create naive datetime "
"objects in your code, Django makes them aware when necessary."
msgstr ""

msgid ""
"However, these conversions may fail around DST transitions, which means you "
"aren't getting the full benefits of time zone support yet. Also, you're "
"likely to run into a few problems because it's impossible to compare a naive "
"datetime with an aware datetime. Since Django now gives you aware datetimes, "
"you'll get exceptions wherever you compare a datetime that comes from a "
"model or a form with a naive datetime that you've created in your code."
msgstr ""

msgid ""
"So the second step is to refactor your code wherever you instantiate "
"datetime objects to make them aware. This can be done incrementally. :mod:"
"`django.utils.timezone` defines some handy helpers for compatibility code: :"
"func:`~django.utils.timezone.now`, :func:`~django.utils.timezone.is_aware`, :"
"func:`~django.utils.timezone.is_naive`, :func:`~django.utils.timezone."
"make_aware`, and :func:`~django.utils.timezone.make_naive`."
msgstr ""

msgid ""
"Finally, in order to help you locate code that needs upgrading, Django "
"raises a warning when you attempt to save a naive datetime to the database::"
msgstr ""

msgid ""
"During development, you can turn such warnings into exceptions and get a "
"traceback by adding the following to your settings file::"
msgstr ""
"Selama pengembangan, anda dapat merubah peringatan itu kedalam pengecualian "
"dan mendapatkan melacak kembali dengan menambahkan berikut pada berkas "
"pengaturan anda::"

msgid "Fixtures"
msgstr "Perlengkapan"

msgid ""
"When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""

msgid "While for a naive datetime, it isn't::"
msgstr ""

msgid ""
"For models with :class:`~django.db.models.DateTimeField`\\ s, this "
"difference makes it impossible to write a fixture that works both with and "
"without time zone support."
msgstr ""

msgid ""
"Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the "
"\"naive\" format. If your project contains such fixtures, after you enable "
"time zone support, you'll see :exc:`RuntimeWarning`\\ s when you load them. "
"To get rid of the warnings, you must convert your fixtures to the \"aware\" "
"format."
msgstr ""

msgid ""
"You can regenerate fixtures with :djadmin:`loaddata` then :djadmin:"
"`dumpdata`. Or, if they're small enough, you can edit them to add the UTC "
"offset that matches your :setting:`TIME_ZONE` to each serialized datetime."
msgstr ""

msgid "FAQ"
msgstr "FAQ"

msgid "Setup"
msgstr "Pengaturan"

msgid ""
"**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""
"**Saya tidak butuh banyak zona waktu. Haruskah saya mengadakan dukungan zona "
"waktu?**"

msgid ""
"Yes. When time zone support is enabled, Django uses a more accurate model of "
"local time. This shields you from subtle and unreproducible bugs around "
"daylight saving time (DST) transitions."
msgstr ""

msgid ""
"When you enable time zone support, you'll encounter some errors because "
"you're using naive datetimes where Django expects aware datetimes. Such "
"errors show up when running tests. You'll quickly learn how to avoid invalid "
"operations."
msgstr ""

msgid ""
"On the other hand, bugs caused by the lack of time zone support are much "
"harder to prevent, diagnose and fix. Anything that involves scheduled tasks "
"or datetime arithmetic is a candidate for subtle bugs that will bite you "
"only once or twice a year."
msgstr ""

msgid ""
"For these reasons, time zone support is enabled by default in new projects, "
"and you should keep it unless you have a very good reason not to."
msgstr ""

msgid "**I've enabled time zone support. Am I safe?**"
msgstr "**Saya telah mengadakan dukungan zona waktu. Apakah Saya aman?**"

msgid ""
"Maybe. You're better protected from DST-related bugs, but you can still "
"shoot yourself in the foot by carelessly turning naive datetimes into aware "
"datetimes, and vice-versa."
msgstr ""

msgid ""
"If your application connects to other systems -- for instance, if it queries "
"a web service -- make sure datetimes are properly specified. To transmit "
"datetimes safely, their representation should include the UTC offset, or "
"their values should be in UTC (or both!)."
msgstr ""

msgid ""
"Finally, our calendar system contains interesting edge cases. For example, "
"you can't always subtract one year directly from a given date::"
msgstr ""

msgid ""
"To implement such a function correctly, you must decide whether 2012-02-29 "
"minus one year is 2011-02-28 or 2011-03-01, which depends on your business "
"requirements."
msgstr ""

msgid ""
"**How do I interact with a database that stores datetimes in local time?**"
msgstr ""
"**Bagaimana Saya berinteraksi dengan basisdata yang menyimpan datetime dalam "
"waktu lokal?**"

msgid ""
"Set the :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` option to the appropriate "
"time zone for this database in the :setting:`DATABASES` setting."
msgstr ""
"Setel pilihan :setting:`TIME_ZONE 1` pada zona waktu yang sesuai untuk "
"basisdata ini dalam pengaturan :setting:`DATABASES`."

msgid ""
"This is useful for connecting to a database that doesn't support time zones "
"and that isn't managed by Django when :setting:`USE_TZ` is ``True``."
msgstr ""
"Ini berguna untuk menghubungkan ke basisdata yang tidak mendukung zona waktu "
"dan yang tidak dikelola oleh Django ketika :setting:`USE_TZ` adalah ``True``."

msgid "Troubleshooting"
msgstr "Menyelesaikan masalah"

msgid ""
"**My application crashes with** ``TypeError: can't compare offset-naive`` "
"``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""

msgid "Let's reproduce this error by comparing a naive and an aware datetime::"
msgstr ""

msgid ""
"If you encounter this error, most likely your code is comparing these two "
"things:"
msgstr ""

msgid ""
"a datetime provided by Django -- for instance, a value read from a form or a "
"model field. Since you enabled time zone support, it's aware."
msgstr ""

msgid ""
"a datetime generated by your code, which is naive (or you wouldn't be "
"reading this)."
msgstr ""

msgid ""
"Generally, the correct solution is to change your code to use an aware "
"datetime instead."
msgstr ""

msgid ""
"If you're writing a pluggable application that's expected to work "
"independently of the value of :setting:`USE_TZ`, you may find :func:`django."
"utils.timezone.now` useful. This function returns the current date and time "
"as a naive datetime when ``USE_TZ = False`` and as an aware datetime when "
"``USE_TZ = True``. You can add or subtract :class:`datetime.timedelta` as "
"needed."
msgstr ""

msgid ""
"**I see lots of** ``RuntimeWarning: DateTimeField received a naive "
"datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` "
"**-- is that bad?**"
msgstr ""

msgid ""
"When time zone support is enabled, the database layer expects to receive "
"only aware datetimes from your code. This warning occurs when it receives a "
"naive datetime. This indicates that you haven't finished porting your code "
"for time zone support. Please refer to the :ref:`migration guide <time-zones-"
"migration-guide>` for tips on this process."
msgstr ""

msgid ""
"In the meantime, for backwards compatibility, the datetime is considered to "
"be in the default time zone, which is generally what you expect."
msgstr ""

msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr "``now.date()`` ** adalah kemarin! (atau besok)**"

msgid ""
"If you've always used naive datetimes, you probably believe that you can "
"convert a datetime to a date by calling its :meth:`~datetime.datetime.date` "
"method. You also consider that a :class:`~datetime.date` is a lot like a :"
"class:`~datetime.datetime`, except that it's less accurate."
msgstr ""

msgid "None of this is true in a time zone aware environment::"
msgstr ""

msgid ""
"As this example shows, the same datetime has a different date, depending on "
"the time zone in which it is represented. But the real problem is more "
"fundamental."
msgstr ""

msgid ""
"A datetime represents a **point in time**. It's absolute: it doesn't depend "
"on anything. On the contrary, a date is a **calendaring concept**. It's a "
"period of time whose bounds depend on the time zone in which the date is "
"considered. As you can see, these two concepts are fundamentally different, "
"and converting a datetime to a date isn't a deterministic operation."
msgstr ""

msgid "What does this mean in practice?"
msgstr "Apa artinya ini dalam praktik?"

msgid ""
"Generally, you should avoid converting a :class:`~datetime.datetime` to :"
"class:`~datetime.date`. For instance, you can use the :tfilter:`date` "
"template filter to only show the date part of a datetime. This filter will "
"convert the datetime into the current time zone before formatting it, "
"ensuring the results appear correctly."
msgstr ""

msgid ""
"If you really need to do the conversion yourself, you must ensure the "
"datetime is converted to the appropriate time zone first. Usually, this will "
"be the current timezone::"
msgstr ""

msgid ""
"**I get an error** \"``Are time zone definitions for your database installed?"
"``\""
msgstr ""

msgid ""
"If you are using MySQL, see the :ref:`mysql-time-zone-definitions` section "
"of the MySQL notes for instructions on loading time zone definitions."
msgstr ""

msgid ""
"**I have a string** ``\"2012-02-21 10:28:45\"`` **and I know it's in the** ``"
"\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware datetime?"
"**"
msgstr ""

msgid ""
"Here you need to create the required ``ZoneInfo`` instance and attach it to "
"the naïve datetime::"
msgstr ""

msgid "**How can I obtain the local time in the current time zone?**"
msgstr ""

msgid "Well, the first question is, do you really need to?"
msgstr "Baik, pertanyaan pertama adalah, apakah anda sangat membutuhkannya?"

msgid ""
"You should only use local time when you're interacting with humans, and the "
"template layer provides :ref:`filters and tags <time-zones-in-templates>` to "
"convert datetimes to the time zone of your choice."
msgstr ""

msgid ""
"Furthermore, Python knows how to compare aware datetimes, taking into "
"account UTC offsets when necessary. It's much easier (and possibly faster) "
"to write all your model and view code in UTC. So, in most circumstances, the "
"datetime in UTC returned by :func:`django.utils.timezone.now` will be "
"sufficient."
msgstr ""

msgid ""
"For the sake of completeness, though, if you really want the local time in "
"the current time zone, here's how you can obtain it::"
msgstr ""
"Demi kelengkapan, meskipun, jika anda sangat ingin waktu lokal dalam zona "
"waktu saat ini, ini adalah bagaimana anda dapat mendapatkannya::"

msgid "In this example, the current time zone is ``\"Europe/Paris\"``."
msgstr "Calam contoh ini, zona waktu saat ini adalah ``\"Europe/Paris\"``."

msgid "**How can I see all available time zones?**"
msgstr "**Bagaimana dapat Saya melihat semua zona waktu?**"

msgid ""
":func:`zoneinfo.available_timezones` provides the set of all valid keys for "
"IANA time zones available to your system. See the docs for usage "
"considerations."
msgstr ""

msgid "Translation"
msgstr "Terjemahan"

msgid ""
"In order to make a Django project translatable, you have to add a minimal "
"number of hooks to your Python code and templates. These hooks are called :"
"term:`translation strings <translation string>`. They tell Django: \"This "
"text should be translated into the end user's language, if a translation for "
"this text is available in that language.\" It's your responsibility to mark "
"translatable strings; the system can only translate strings it knows about."
msgstr ""

msgid ""
"Django then provides utilities to extract the translation strings into a :"
"term:`message file`. This file is a convenient way for translators to "
"provide the equivalent of the translation strings in the target language. "
"Once the translators have filled in the message file, it must be compiled. "
"This process relies on the GNU gettext toolset."
msgstr ""

msgid ""
"Once this is done, Django takes care of translating web apps on the fly in "
"each available language, according to users' language preferences."
msgstr ""

msgid ""
"Django's internationalization hooks are on by default, and that means "
"there's a bit of i18n-related overhead in certain places of the framework. "
"If you don't use internationalization, you should take the two seconds to "
"set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then "
"Django will make some optimizations so as not to load the "
"internationalization machinery."
msgstr ""

msgid ""
"Make sure you've activated translation for your project (the fastest way is "
"to check if :setting:`MIDDLEWARE` includes :mod:`django.middleware.locale."
"LocaleMiddleware`). If you haven't yet, see :ref:`how-django-discovers-"
"language-preference`."
msgstr ""

msgid "Internationalization: in Python code"
msgstr "Internasionalisasi: dalam kode Python"

msgid "Standard translation"
msgstr "Terjemahan standar"

msgid ""
"Specify a translation string by using the function :func:`~django.utils."
"translation.gettext`. It's convention to import this as a shorter alias, "
"``_``, to save typing."
msgstr ""
"Tentukan string terjemahan dengan menggunakan fungsi :func:`~django.utils."
"translation.gettext`. Itu adalah kebiasaan untuk mengimpor ini sebagai nama "
"lain pendek, ``_``, untuk menyimpan pengetikan."

msgid ""
"Python's standard library ``gettext`` module installs ``_()`` into the "
"global namespace, as an alias for ``gettext()``. In Django, we have chosen "
"not to follow this practice, for a couple of reasons:"
msgstr ""

msgid ""
"Sometimes, you should use :func:`~django.utils.translation.gettext_lazy` as "
"the default translation method for a particular file. Without ``_()`` in the "
"global namespace, the developer has to think about which is the most "
"appropriate translation function."
msgstr ""

msgid ""
"The underscore character (``_``) is used to represent \"the previous result"
"\" in Python's interactive shell and doctest tests. Installing a global "
"``_()`` function causes interference. Explicitly importing ``gettext()`` as "
"``_()`` avoids this problem."
msgstr ""

msgid "What functions may be aliased as ``_``?"
msgstr "Fungsi-fungsi apa mungkin dinama lainkan sebagai ``_``?"

msgid ""
"Because of how ``xgettext`` (used by :djadmin:`makemessages`) works, only "
"functions that take a single string argument can be imported as ``_``:"
msgstr ""

msgid ":func:`~django.utils.translation.gettext`"
msgstr ":func:`~django.utils.translation.gettext`"

msgid ":func:`~django.utils.translation.gettext_lazy`"
msgstr ":func:`~django.utils.translation.gettext_lazy`"

msgid ""
"In this example, the text ``\"Welcome to my site.\"`` is marked as a "
"translation string::"
msgstr ""
"Di contoh ini, teks ``\"Welcome to my site.\"`` ditandai sebagai deretan "
"karakter terjemahan::"

msgid ""
"You could code this without using the alias. This example is identical to "
"the previous one::"
msgstr ""

msgid ""
"Translation works on computed values. This example is identical to the "
"previous two::"
msgstr ""
"Terjemahan bekerja pada nilai terhitung. Contoh ini adalah mirip pada dua "
"sebelumnya::"

msgid "Translation works on variables. Again, here's an identical example::"
msgstr ""
"Terjemahan bekerja pada variabel. Kembali, ini adalah contoh yang mirip::"

msgid ""
"(The caveat with using variables or computed values, as in the previous two "
"examples, is that Django's translation-string-detecting utility, :djadmin:"
"`django-admin makemessages <makemessages>`, won't be able to find these "
"strings. More on :djadmin:`makemessages` later.)"
msgstr ""

msgid ""
"The strings you pass to ``_()`` or ``gettext()`` can take placeholders, "
"specified with Python's standard named-string interpolation syntax. Example::"
msgstr ""

msgid ""
"This technique lets language-specific translations reorder the placeholder "
"text. For example, an English translation may be ``\"Today is November 26."
"\"``, while a Spanish translation may be ``\"Hoy es 26 de noviembre.\"`` -- "
"with the month and the day placeholders swapped."
msgstr ""

msgid ""
"For this reason, you should use named-string interpolation (e.g., ``"
"%(day)s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) "
"whenever you have more than a single parameter. If you used positional "
"interpolation, translations wouldn't be able to reorder placeholder text."
msgstr ""

msgid ""
"Since string extraction is done by the ``xgettext`` command, only syntaxes "
"supported by ``gettext`` are supported by Django. In particular, Python :py:"
"ref:`f-strings <f-strings>` are not yet supported by ``xgettext``, and "
"JavaScript template strings need ``gettext`` 0.21+."
msgstr ""

msgid "Comments for translators"
msgstr "Komentar untuk penterjemah"

msgid ""
"If you would like to give translators hints about a translatable string, you "
"can add a comment prefixed with the ``Translators`` keyword on the line "
"preceding the string, e.g.::"
msgstr ""
"Jika anda ingin membeirkan petunjuk penterjemah mengenai string dapat "
"diterjemahkan, anda dapat menambahkan awalan komentar dengan kata kunci "
"``Translators`` pada baris mendahului string, misalnya::"

msgid ""
"The comment will then appear in the resulting ``.po`` file associated with "
"the translatable construct located below it and should also be displayed by "
"most translation tools."
msgstr ""

msgid ""
"Just for completeness, this is the corresponding fragment of the resulting "
"``.po`` file:"
msgstr ""
"Hanya untuk kelengkapan, ini adalah fragmen sesuai dari menghasikan berkas "
"``.po``:"

msgid ""
"This also works in templates. See :ref:`translator-comments-in-templates` "
"for more details."
msgstr ""
"Ini juga bekerja dalam cetakan. Lihat :ref:`translator-comments-in-"
"templates` untuk rincian lebih."

msgid "Marking strings as no-op"
msgstr ""

msgid ""
"Use the function :func:`django.utils.translation.gettext_noop()` to mark a "
"string as a translation string without translating it. The string is later "
"translated from a variable."
msgstr ""

msgid ""
"Use this if you have constant strings that should be stored in the source "
"language because they are exchanged over systems or users -- such as strings "
"in a database -- but should be translated at the last possible point in "
"time, such as when the string is presented to the user."
msgstr ""

msgid "Pluralization"
msgstr "Pluralisasi"

msgid ""
"Use the function :func:`django.utils.translation.ngettext()` to specify "
"pluralized messages."
msgstr ""

msgid ""
"``ngettext()`` takes three arguments: the singular translation string, the "
"plural translation string and the number of objects."
msgstr ""

msgid ""
"This function is useful when you need your Django application to be "
"localizable to languages where the number and complexity of `plural forms "
"<https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is "
"greater than the two forms used in English ('object' for the singular and "
"'objects' for all the cases where ``count`` is different from one, "
"irrespective of its value.)"
msgstr ""

msgid ""
"In this example the number of objects is passed to the translation languages "
"as the ``count`` variable."
msgstr ""
"Dalam contoh ini sejumlah obyek dilewatkan ke bahasa terjemahan sebagai "
"variabel ``count``."

msgid ""
"Note that pluralization is complicated and works differently in each "
"language. Comparing ``count`` to 1 isn't always the correct rule. This code "
"looks sophisticated, but will produce incorrect results for some languages::"
msgstr ""

msgid ""
"Don't try to implement your own singular-or-plural logic; it won't be "
"correct. In a case like this, consider something like the following::"
msgstr ""

msgid ""
"When using ``ngettext()``, make sure you use a single name for every "
"extrapolated variable included in the literal. In the examples above, note "
"how we used the ``name`` Python variable in both translation strings. This "
"example, besides being incorrect in some languages as noted above, would "
"fail::"
msgstr ""

msgid ""
"You would get an error when running :djadmin:`django-admin compilemessages "
"<compilemessages>`::"
msgstr ""
"Anda akan mendapatkan sebuah kesalahan ketika menjalankan :djadmin:`django-"
"admin compilemessages 1`::"

msgid "Contextual markers"
msgstr ""

msgid ""
"Sometimes words have several meanings, such as ``\"May\"`` in English, which "
"refers to a month name and to a verb. To enable translators to translate "
"these words correctly in different contexts, you can use the :func:`django."
"utils.translation.pgettext()` function, or the :func:`django.utils."
"translation.npgettext()` function if the string needs pluralization. Both "
"take a context string as the first variable."
msgstr ""

msgid ""
"In the resulting ``.po`` file, the string will then appear as often as there "
"are different contextual markers for the same string (the context will "
"appear on the ``msgctxt`` line), allowing the translator to give a different "
"translation for each of them."
msgstr ""

msgid "or::"
msgstr "atau::"

msgid "will appear in the ``.po`` file as:"
msgstr "akan muncul di berkas  ``.po`` sebagai:"

msgid ""
"Contextual markers are also supported by the :ttag:`translate` and :ttag:"
"`blocktranslate` template tags."
msgstr ""

msgid "Lazy translation"
msgstr "Terjemahan lazy"

msgid ""
"Use the lazy versions of translation functions in :mod:`django.utils."
"translation` (easily recognizable by the ``lazy`` suffix in their names) to "
"translate strings lazily -- when the value is accessed rather than when "
"they're called."
msgstr ""

msgid ""
"These functions store a lazy reference to the string -- not the actual "
"translation. The translation itself will be done when the string is used in "
"a string context, such as in template rendering."
msgstr ""

msgid ""
"This is essential when calls to these functions are located in code paths "
"that are executed at module load time."
msgstr ""

msgid ""
"This is something that can easily happen when defining models, forms and "
"model forms, because Django implements these such that their fields are "
"actually class-level attributes. For that reason, make sure to use lazy "
"translations in the following cases:"
msgstr ""

msgid ""
"Model fields and relationships ``verbose_name`` and ``help_text`` option "
"values"
msgstr ""
"Bidang-bidang model dan hubungan nilai pilihan ``verbose_name`` dan "
"``help_text``"

msgid ""
"For example, to translate the help text of the *name* field in the following "
"model, do the following::"
msgstr ""
"Seabgai contoh, untuk menterjemahkan teks bantuan dari bidang *name* dalam "
"model berikut, lakukan berikut::"

msgid ""
"You can mark names of :class:`~django.db.models.ForeignKey`, :class:`~django."
"db.models.ManyToManyField` or :class:`~django.db.models.OneToOneField` "
"relationship as translatable by using their :attr:`~django.db.models.Options."
"verbose_name` options::"
msgstr ""

msgid ""
"Just like you would do in :attr:`~django.db.models.Options.verbose_name` you "
"should provide a lowercase verbose name text for the relation as Django will "
"automatically titlecase it when required."
msgstr ""

msgid "Model verbose names values"
msgstr ""

msgid ""
"It is recommended to always provide explicit :attr:`~django.db.models."
"Options.verbose_name` and :attr:`~django.db.models.Options."
"verbose_name_plural` options rather than relying on the fallback English-"
"centric and somewhat naïve determination of verbose names Django performs by "
"looking at the model's class name::"
msgstr ""

msgid "Model methods ``description`` argument to the ``@display`` decorator"
msgstr ""

msgid ""
"For model methods, you can provide translations to Django and the admin site "
"with the ``description`` argument to the :func:`~django.contrib.admin."
"display` decorator::"
msgstr ""

msgid "Working with lazy translation objects"
msgstr "Bekerja dengan obyek-obyek terjemahan lazy"

msgid ""
"The result of a ``gettext_lazy()`` call can be used wherever you would use a "
"string (a :class:`str` object) in other Django code, but it may not work "
"with arbitrary Python code. For example, the following won't work because "
"the `requests <https://pypi.org/project/requests/>`_ library doesn't handle "
"``gettext_lazy`` objects::"
msgstr ""

msgid ""
"You can avoid such problems by casting ``gettext_lazy()`` objects to text "
"strings before passing them to non-Django code::"
msgstr ""

msgid ""
"If you don't like the long ``gettext_lazy`` name, you can alias it as ``_`` "
"(underscore), like so::"
msgstr ""

msgid ""
"Using ``gettext_lazy()`` and ``ngettext_lazy()`` to mark strings in models "
"and utility functions is a common operation. When you're working with these "
"objects elsewhere in your code, you should ensure that you don't "
"accidentally convert them to strings, because they should be converted as "
"late as possible (so that the correct locale is in effect). This "
"necessitates the use of the helper function described next."
msgstr ""

msgid "Lazy translations and plural"
msgstr ""

msgid ""
"When using lazy translation for a plural string (``n[p]gettext_lazy``), you "
"generally don't know the ``number`` argument at the time of the string "
"definition. Therefore, you are authorized to pass a key name instead of an "
"integer as the ``number`` argument. Then ``number`` will be looked up in the "
"dictionary under that key during string interpolation. Here's example::"
msgstr ""

msgid ""
"If the string contains exactly one unnamed placeholder, you can interpolate "
"directly with the ``number`` argument::"
msgstr ""

msgid "Formatting strings: ``format_lazy()``"
msgstr "Membentuk string: ``format_lazy()``"

msgid ""
"Python's :meth:`str.format()` method will not work when either the "
"``format_string`` or any of the arguments to :meth:`str.format()` contains "
"lazy translation objects. Instead, you can use :func:`django.utils.text."
"format_lazy()`, which creates a lazy object that runs the ``str.format()`` "
"method only when the result is included in a string. For example::"
msgstr ""

msgid ""
"In this case, the lazy translations in ``result`` will only be converted to "
"strings when ``result`` itself is used in a string (usually at template "
"rendering time)."
msgstr ""

msgid "Other uses of lazy in delayed translations"
msgstr "Lainnya menggunakan lazy dalam terjemahan tertunda"

msgid ""
"For any other case where you would like to delay the translation, but have "
"to pass the translatable string as argument to another function, you can "
"wrap this function inside a lazy call yourself. For example::"
msgstr ""

msgid "And then later::"
msgstr "Dan lalu kemudian::"

msgid "Localized names of languages"
msgstr "Lokalisasi nama-nama dari bahasa"

msgid ""
"The ``get_language_info()`` function provides detailed information about "
"languages::"
msgstr ""
"Fungsi ``get_language_info()`` menyediakan informasi rinci tentang bahasa::"

msgid ""
"The ``name``, ``name_local``, and ``name_translated`` attributes of the "
"dictionary contain the name of the language in English, in the language "
"itself, and in your current active language respectively.  The ``bidi`` "
"attribute is True only for bi-directional languages."
msgstr ""

msgid ""
"The source of the language information is the ``django.conf.locale`` module. "
"Similar access to this information is available for template code. See below."
msgstr ""
"Sumber dari informasi bahasa adalah modul ``django.conf.locale`. Akses mirip "
"pada informasi ini tersedia untuk kode cetakan. Lihat dibawah."

msgid "Internationalization: in template code"
msgstr "Internasionalisasi: dalam kode cetakan"

msgid ""
"Translations in :doc:`Django templates </ref/templates/language>` uses two "
"template tags and a slightly different syntax than in Python code. To give "
"your template access to these tags, put ``{% load i18n %}`` toward the top "
"of your template. As with all template tags, this tag needs to be loaded in "
"all templates which use translations, even those templates that extend from "
"other templates which have already loaded the ``i18n`` tag."
msgstr ""

msgid ""
"Translated strings will not be escaped when rendered in a template. This "
"allows you to include HTML in translations, for example for emphasis, but "
"potentially dangerous characters (e.g. ``\"``) will also be rendered "
"unchanged."
msgstr ""

msgid "``translate`` template tag"
msgstr "Etiket cetakan ``translate``"

msgid ""
"The ``{% translate %}`` template tag translates either a constant string "
"(enclosed in single or double quotes) or variable content::"
msgstr ""

msgid ""
"If the ``noop`` option is present, variable lookup still takes place but the "
"translation is skipped. This is useful when \"stubbing out\" content that "
"will require translation in the future::"
msgstr ""

msgid ""
"Internally, inline translations use an :func:`~django.utils.translation."
"gettext` call."
msgstr ""
"Secara internal, terjemahan dibarisan menggunakan panggilan :func:`~django."
"utils.translation.gettext`."

msgid ""
"In case a template var (``myvar`` above) is passed to the tag, the tag will "
"first resolve such variable to a string at run-time and then look up that "
"string in the message catalogs."
msgstr ""

msgid ""
"It's not possible to mix a template variable inside a string within ``{% "
"translate %}``. If your translations require strings with variables "
"(placeholders), use :ttag:`{% blocktranslate %}<blocktranslate>` instead."
msgstr ""

msgid ""
"If you'd like to retrieve a translated string without displaying it, you can "
"use the following syntax::"
msgstr ""

msgid ""
"In practice you'll use this to get a string you can use in multiple places "
"in a template or so you can use the output as an argument for other template "
"tags or filters::"
msgstr ""

msgid ""
"``{% translate %}`` also supports :ref:`contextual markers<contextual-"
"markers>` using the ``context`` keyword:"
msgstr ""

msgid "``blocktranslate`` template tag"
msgstr "Etiket cetakan ``blocktranslate``"

msgid ""
"Contrarily to the :ttag:`translate` tag, the ``blocktranslate`` tag allows "
"you to mark complex sentences consisting of literals and variable content "
"for translation by making use of placeholders::"
msgstr ""

msgid ""
"To translate a template expression -- say, accessing object attributes or "
"using template filters -- you need to bind the expression to a local "
"variable for use within the translation block. Examples::"
msgstr ""

msgid ""
"You can use multiple expressions inside a single ``blocktranslate`` tag::"
msgstr ""

msgid ""
"The previous more verbose format is still supported: ``{% blocktranslate "
"with book|title as book_t and author|title as author_t %}``"
msgstr ""

msgid ""
"Other block tags (for example ``{% for %}`` or ``{% if %}``) are not allowed "
"inside a ``blocktranslate`` tag."
msgstr ""

msgid ""
"If resolving one of the block arguments fails, ``blocktranslate`` will fall "
"back to the default language by deactivating the currently active language "
"temporarily with the :func:`~django.utils.translation.deactivate_all` "
"function."
msgstr ""

msgid "This tag also provides for pluralization. To use it:"
msgstr ""

msgid ""
"Designate and bind a counter value with the name ``count``. This value will "
"be the one used to select the right plural form."
msgstr ""

msgid ""
"Specify both the singular and plural forms separating them with the ``{% "
"plural %}`` tag within the ``{% blocktranslate %}`` and ``{% "
"endblocktranslate %}`` tags."
msgstr ""

msgid "A more complex example::"
msgstr "Sebuah contoh lebih rumit::"

msgid ""
"When you use both the pluralization feature and bind values to local "
"variables in addition to the counter value, keep in mind that the "
"``blocktranslate`` construct is internally converted to an ``ngettext`` "
"call. This means the same :ref:`notes regarding ngettext variables "
"<pluralization-var-notes>` apply."
msgstr ""

msgid ""
"Reverse URL lookups cannot be carried out within the ``blocktranslate`` and "
"should be retrieved (and stored) beforehand::"
msgstr ""

msgid ""
"In practice you'll use this to get a string you can use in multiple places "
"in a template or so you can use the output as an argument for other template "
"tags or filters."
msgstr ""

msgid ""
"``{% blocktranslate %}`` also supports :ref:`contextual markers<contextual-"
"markers>` using the ``context`` keyword:"
msgstr ""

msgid ""
"Another feature ``{% blocktranslate %}`` supports is the ``trimmed`` option. "
"This option will remove newline characters from the beginning and the end of "
"the content of the ``{% blocktranslate %}`` tag, replace any whitespace at "
"the beginning and end of a line and merge all lines into one using a space "
"character to separate them. This is quite useful for indenting the content "
"of a ``{% blocktranslate %}`` tag without having the indentation characters "
"end up in the corresponding entry in the PO file, which makes the "
"translation process easier."
msgstr ""

msgid "For instance, the following ``{% blocktranslate %}`` tag::"
msgstr ""

msgid ""
"will result in the entry ``\"First sentence. Second paragraph.\"`` in the PO "
"file, compared to ``\"\\n  First sentence.\\n  Second paragraph.\\n\"``, if "
"the ``trimmed`` option had not been specified."
msgstr ""

msgid "String literals passed to tags and filters"
msgstr ""

msgid ""
"You can translate string literals passed as arguments to tags and filters by "
"using the familiar ``_()`` syntax::"
msgstr ""

msgid ""
"In this case, both the tag and the filter will see the translated string, so "
"they don't need to be aware of translations."
msgstr ""

msgid ""
"In this example, the translation infrastructure will be passed the string ``"
"\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The "
"translated string will need to contain the comma so that the filter parsing "
"code knows how to split up the arguments. For example, a German translator "
"might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the "
"comma intact)."
msgstr ""

msgid "Comments for translators in templates"
msgstr "Komentar untuk penterjemah dalam cetakan"

msgid ""
"Just like with :ref:`Python code <translator-comments>`, these notes for "
"translators can be specified using comments, either with the :ttag:`comment` "
"tag:"
msgstr ""

msgid ""
"or with the ``{#`` ... ``#}`` :ref:`one-line comment constructs <template-"
"comments>`:"
msgstr ""
"atau dengan ``{#`` ... ``#}`` :ref:`one-line comment constructs <template-"
"comments>`:"

msgid ""
"Just for completeness, these are the corresponding fragments of the "
"resulting ``.po`` file:"
msgstr ""
"Hanya untuk kelengkapan, ini semua adalah fragmen sesuai dari menghasikan "
"berkas ``.po``:"

msgid "Switching language in templates"
msgstr "Mengganti bahasa dalam cetakan"

msgid ""
"If you want to select a language within a template, you can use the "
"``language`` template tag:"
msgstr ""
"Jika anda ingin memilih sebuah bahasa dalam sebuah cetakan, anda dapat "
"menggunakan etiket cetakan ``language``:"

msgid ""
"While the first occurrence of \"Welcome to our page\" uses the current "
"language, the second will always be in English."
msgstr ""

msgid "Other tags"
msgstr "Etiket lain"

msgid "These tags also require a ``{% load i18n %}``."
msgstr "Etiket ini juga membutuhkan sebuah ``{% memuat i18n %}``."

msgid "``get_available_languages``"
msgstr "``get_available_languages``"

msgid ""
"``{% get_available_languages as LANGUAGES %}`` returns a list of tuples in "
"which the first element is the :term:`language code` and the second is the "
"language name (translated into the currently active locale)."
msgstr ""

msgid "``get_current_language``"
msgstr "``get_current_language``"

msgid ""
"``{% get_current_language as LANGUAGE_CODE %}`` returns the current user's "
"preferred language as a string. Example: ``en-us``. See :ref:`how-django-"
"discovers-language-preference`."
msgstr ""

msgid "``get_current_language_bidi``"
msgstr "``get_current_language_bidi``"

msgid ""
"``{% get_current_language_bidi as LANGUAGE_BIDI %}`` returns the current "
"locale's direction. If ``True``, it's a right-to-left language, e.g. Hebrew, "
"Arabic. If ``False`` it's a left-to-right language, e.g. English, French, "
"German, etc."
msgstr ""

msgid "``i18n`` context processor"
msgstr ""

msgid ""
"If you enable the :class:`django.template.context_processors.i18n` context "
"processor, then each ``RequestContext`` will have access to ``LANGUAGES``, "
"``LANGUAGE_CODE``, and ``LANGUAGE_BIDI`` as defined above."
msgstr ""

msgid "``get_language_info``"
msgstr "``get_language_info``"

msgid ""
"You can also retrieve information about any of the available languages using "
"provided template tags and filters. To get information about a single "
"language, use the ``{% get_language_info %}`` tag::"
msgstr ""

msgid "You can then access the information::"
msgstr "Anda dapat kemudian mengakses informasi::"

msgid "``get_language_info_list``"
msgstr "``get_language_info_list``"

msgid ""
"You can also use the ``{% get_language_info_list %}`` template tag to "
"retrieve information for a list of languages (e.g. active languages as "
"specified in :setting:`LANGUAGES`). See :ref:`the section about the "
"set_language redirect view <set_language-redirect-view>` for an example of "
"how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""

msgid ""
"In addition to :setting:`LANGUAGES` style list of tuples, ``{% "
"get_language_info_list %}`` supports lists of language codes. If you do this "
"in your view:"
msgstr ""

msgid "you can iterate over those languages in the template::"
msgstr "anda dapat mengulangi terhadap bahasa-bahasa tersebut dalam cetakan::"

msgid "There are also some filters available for convenience:"
msgstr ""

msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"

msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"

msgid "``{{ LANGUAGE_CODE|language_bidi }}`` (False)"
msgstr "``{{ LANGUAGE_CODE|language_bidi }}`` (False)"

msgid ""
"``{{ LANGUAGE_CODE|language_name_translated }}`` (\"německy\", when active "
"language is Czech)"
msgstr ""
"``{{ LANGUAGE_CODE|language_name_translated }}`` (\"německy\", ketika bahasa "
"aktif adalah Ceko)"

msgid "Internationalization: in JavaScript code"
msgstr "Internasionalisasi: dalam kode JavaScript"

msgid "Adding translations to JavaScript poses some problems:"
msgstr "Menambahkan terjemahan ke JavaScript menimbulkan beberapa masalah:"

msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr "Kode JavaScript  tidak mempunyai akses ke penerapan ``gettext``."

msgid ""
"JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need "
"to be delivered by the server."
msgstr ""
"Kode JavaScript tidak mempunyai akses ke berkas ``.po`` or ``.mo``; mereka "
"butuh untuk dikirimkan oleh peladen."

msgid ""
"The translation catalogs for JavaScript should be kept as small as possible."
msgstr "Katalog terjemahan untuk JavaScript harus disimpan sekecil mungkin."

msgid ""
"Django provides an integrated solution for these problems: It passes the "
"translations into JavaScript, so you can call ``gettext``, etc., from within "
"JavaScript."
msgstr ""

msgid ""
"The main solution to these problems is the following ``JavaScriptCatalog`` "
"view, which generates a JavaScript code library with functions that mimic "
"the ``gettext`` interface, plus an array of translation strings."
msgstr ""

msgid "The ``JavaScriptCatalog`` view"
msgstr "Tampilan ``JavaScriptCatalog``"

msgid ""
"A view that produces a JavaScript code library with functions that mimic the "
"``gettext`` interface, plus an array of translation strings."
msgstr ""

msgid "**Attributes**"
msgstr "**Atribut**"

msgid ""
"Translation domain containing strings to add in the view output. Defaults to "
"``'djangojs'``."
msgstr ""

msgid ""
"A list of :attr:`application names <django.apps.AppConfig.name>` among "
"installed applications. Those apps should contain a ``locale`` directory. "
"All those catalogs plus all catalogs found in :setting:`LOCALE_PATHS` (which "
"are always included) are merged into one catalog. Defaults to ``None``, "
"which means that all available translations from all :setting:"
"`INSTALLED_APPS` are provided in the JavaScript output."
msgstr ""

msgid "**Example with default values**::"
msgstr "**Contoh dengan nilai awalan**::"

msgid "**Example with custom packages**::"
msgstr "**Contoh dengan paket penyesuaian**::"

msgid ""
"If your root URLconf uses :func:`~django.conf.urls.i18n.i18n_patterns`, "
"``JavaScriptCatalog`` must also be wrapped by ``i18n_patterns()`` for the "
"catalog to be correctly generated."
msgstr ""

msgid "**Example with** ``i18n_patterns()``::"
msgstr "**Contoh dengan** ``i18n_patterns()``::"

msgid ""
"The precedence of translations is such that the packages appearing later in "
"the ``packages`` argument have higher precedence than the ones appearing at "
"the beginning. This is important in the case of clashing translations for "
"the same literal."
msgstr ""

msgid ""
"If you use more than one ``JavaScriptCatalog`` view on a site and some of "
"them define the same strings, the strings in the catalog that was loaded "
"last take precedence."
msgstr ""

msgid "Using the JavaScript translation catalog"
msgstr "Menggunakan katalog terjemahan JavaScript"

msgid "To use the catalog, pull in the dynamically generated script like this:"
msgstr ""

msgid ""
"This uses reverse URL lookup to find the URL of the JavaScript catalog view. "
"When the catalog is loaded, your JavaScript code can use the following "
"methods:"
msgstr ""

msgid "``gettext``"
msgstr "``gettext``"

msgid "``ngettext``"
msgstr "``ngettext``"

msgid "``interpolate``"
msgstr "``interpolate``"

msgid "``get_format``"
msgstr "``get_format``"

msgid "``gettext_noop``"
msgstr "``gettext_noop``"

msgid "``pgettext``"
msgstr "``pgettext``"

msgid "``npgettext``"
msgstr "``npgettext``"

msgid "``pluralidx``"
msgstr "``pluralidx``"

msgid ""
"The ``gettext`` function behaves similarly to the standard ``gettext`` "
"interface within your Python code::"
msgstr ""

msgid ""
"The ``ngettext`` function provides an interface to pluralize words and "
"phrases::"
msgstr ""

msgid ""
"The ``interpolate`` function supports dynamically populating a format "
"string. The interpolation syntax is borrowed from Python, so the "
"``interpolate`` function supports both positional and named interpolation:"
msgstr ""

msgid ""
"Positional interpolation: ``obj`` contains a JavaScript Array object whose "
"elements values are then sequentially interpolated in their corresponding "
"``fmt`` placeholders in the same order they appear. For example::"
msgstr ""
"Penempatan penambahan: ``obj`` mengandung obyek Senarai JavaScript yang "
"unsur-unsurnya kemudian berurutan ditambahkan dalam palceholder ``fmt`` "
"mereka yang sesuai dalam urutan sama mereka muncul. Sebagai contoh::"

msgid ""
"Named interpolation: This mode is selected by passing the optional boolean "
"``named`` parameter as ``true``. ``obj`` contains a JavaScript object or "
"associative array. For example::"
msgstr ""

msgid ""
"You shouldn't go over the top with string interpolation, though: this is "
"still JavaScript, so the code has to make repeated regular-expression "
"substitutions. This isn't as fast as string interpolation in Python, so keep "
"it to those cases where you really need it (for example, in conjunction with "
"``ngettext`` to produce proper pluralizations)."
msgstr ""

msgid ""
"The ``get_format`` function has access to the configured i18n formatting "
"settings and can retrieve the format string for a given setting name::"
msgstr ""
"Fungsi ``get_format`` mempunyai akses ke pengaturan pembentukan i18n "
"terkonfigurasi dan dapat mengambil bentuk string untuk nama pengaturan yang "
"diberikan::"

msgid "It has access to the following settings:"
msgstr "Itu mempunyai akses pada pengaturan berikut:"

msgid ":setting:`DATE_FORMAT`"
msgstr ":setting:`DATE_FORMAT`"

msgid ":setting:`DATE_INPUT_FORMATS`"
msgstr ":setting:`DATE_INPUT_FORMATS`"

msgid ":setting:`DATETIME_FORMAT`"
msgstr ":setting:`DATETIME_FORMAT`"

msgid ":setting:`DATETIME_INPUT_FORMATS`"
msgstr ":setting:`DATETIME_INPUT_FORMATS`"

msgid ":setting:`DECIMAL_SEPARATOR`"
msgstr ":setting:`DECIMAL_SEPARATOR`"

msgid ":setting:`FIRST_DAY_OF_WEEK`"
msgstr ":setting:`FIRST_DAY_OF_WEEK`"

msgid ":setting:`MONTH_DAY_FORMAT`"
msgstr ":setting:`MONTH_DAY_FORMAT`"

msgid ":setting:`NUMBER_GROUPING`"
msgstr ":setting:`NUMBER_GROUPING`"

msgid ":setting:`SHORT_DATE_FORMAT`"
msgstr ":setting:`SHORT_DATE_FORMAT`"

msgid ":setting:`SHORT_DATETIME_FORMAT`"
msgstr ":setting:`SHORT_DATETIME_FORMAT`"

msgid ":setting:`THOUSAND_SEPARATOR`"
msgstr ":setting:`THOUSAND_SEPARATOR`"

msgid ":setting:`TIME_FORMAT`"
msgstr ":setting:`TIME_FORMAT`"

msgid ":setting:`TIME_INPUT_FORMATS`"
msgstr ":setting:`TIME_INPUT_FORMATS`"

msgid ":setting:`YEAR_MONTH_FORMAT`"
msgstr ":setting:`YEAR_MONTH_FORMAT`"

msgid ""
"This is useful for maintaining formatting consistency with the Python-"
"rendered values."
msgstr ""
"Ini berguna untuk merawat ketetapan pembentukan dengan nilai-nilai dibangun-"
"Python."

msgid ""
"This emulates the ``gettext`` function but does nothing, returning whatever "
"is passed to it::"
msgstr ""
"Ini menandingin fungsi ``gettext`` tetapi tidak melakukan apapun, "
"mengembalikan apapun dilewatkan ke itu::"

msgid ""
"This is useful for stubbing out portions of the code that will need "
"translation in the future."
msgstr ""
"Ini adalah berguna untuk memberhentikan bagian-bagian dari kode akan butuh "
"diterjemahkan di masa akan datang."

msgid ""
"The ``pgettext`` function behaves like the Python variant (:func:`~django."
"utils.translation.pgettext()`), providing a contextually translated word::"
msgstr ""
"Fungsi ``pgettext`` berperilaku seperti ragam Python (:func:`~django.utils."
"translation.pgettext()`), menyediakan kata terjemahan kontekstual::"

msgid ""
"The ``npgettext`` function also behaves like the Python variant (:func:"
"`~django.utils.translation.npgettext()`), providing a **pluralized** "
"contextually translated word::"
msgstr ""
"Fungsi ``npgettext`` juga berperilaku seperti ragam Python (:func:`~django."
"utils.translation.npgettext()`), menyediakan **menjamakkan** kata terjemahan "
"kontekstual::"

msgid ""
"The ``pluralidx`` function works in a similar way to the :tfilter:"
"`pluralize` template filter, determining if a given ``count`` should use a "
"plural form of a word or not::"
msgstr ""
"Fungsi ``pluralidx`` bekerja dalam cara sama pada penyaring cetakan :tfilter:"
"`pluralize`, menentukan jika ``count`` diberikan harus menggunakan bentuk "
"jamak dari sebuah kata atau tidak::"

msgid ""
"In the simplest case, if no custom pluralization is needed, this returns "
"``false`` for the integer ``1`` and ``true`` for all other numbers."
msgstr ""
"Dalam kasis paling sederhana, jika tidak ada penyesuaian penjamakan "
"dibutuhkan, ini mengembalikan ``false`` untuk integer ``1`` dan ``true`` "
"untuk semua angka-angka lain."

msgid ""
"However, pluralization is not this simple in all languages. If the language "
"does not support pluralization, an empty value is provided."
msgstr ""
"Bagaimanapun, penjamakan tidak sesederhana ini dalam semua bahasa. Jika "
"bahasa tidak mendukung penjamakan, sebuah nilai kosong disediakan."

msgid ""
"Additionally, if there are complex rules around pluralization, the catalog "
"view will render a conditional expression. This will evaluate to either a "
"``true`` (should pluralize) or ``false`` (should **not** pluralize) value."
msgstr ""
"Tambahannya, jika ada aturan-aturan rumit sekitar penjamakan, tampilan "
"katalog akan membangun sebuah penyataan bersyarat. Ini akan menilai salah "
"satu nilai ``True`` (harus jamak) atau ``false`` (harus **tidak** jamak)."

msgid "The ``JSONCatalog`` view"
msgstr "Tampilan ``JSONCatalog``"

msgid ""
"In order to use another client-side library to handle translations, you may "
"want to take advantage of the ``JSONCatalog`` view. It's similar to :class:"
"`~django.views.i18n.JavaScriptCatalog` but returns a JSON response."
msgstr ""
"Untuk menggunakan pustaka sisi-klien lain untuk menangani terjemahan, anda "
"mungkin ingin mengambil keuntungan dari tampilan ``JSONCatalog``. Itu mirip "
"pada :class:`~django.views.i18n.JavaScriptCatalog` tetapi mengembalikan "
"sebuah tanggapan JSON."

msgid ""
"See the documentation for :class:`~django.views.i18n.JavaScriptCatalog` to "
"learn about possible values and use of the ``domain`` and ``packages`` "
"attributes."
msgstr ""
"Lihat dokumentasi untuk :class:`~django.views.i18n.JavaScriptCatalog` untuk "
"belajar tentang kemungkinan nilai-nilai dan penggunaan dari atribut-atribut "
"``domain`` dan ``packages``."

msgid "The response format is as follows:"
msgstr "Bentuk tanggapan sebagai berikut:"

msgid "Note on performance"
msgstr "Catatan pada penampilan"

msgid ""
"The various JavaScript/JSON i18n views generate the catalog from ``.mo`` "
"files on every request. Since its output is constant, at least for a given "
"version of a site, it's a good candidate for caching."
msgstr ""
"Tampilan beragam i18n JavaScript/JSON membangkitkan katalog dari berkas-"
"berkas ``.mo`` pada setiap permintaan. Sejak itu mengeluarkan sebuah "
"ketetapan, setidaknya untuk versi diberikan dari sebuah situs, itu adalah "
"calon bagus untuk caching."

msgid ""
"Server-side caching will reduce CPU load. It's easily implemented with the :"
"func:`~django.views.decorators.cache.cache_page` decorator. To trigger cache "
"invalidation when your translations change, provide a version-dependent key "
"prefix, as shown in the example below, or map the view at a version-"
"dependent URL::"
msgstr ""
"Caching sisi-peladen akan mengurangi beban CPU. Itu sangat mudah diterapkan "
"dengan penghias :func:`~django.views.decorators.cache.cache_page`. Untuk "
"memicu ketidakabsahan cache ketika terjemahan anda berubah, sediakan awalan "
"kunci versi-berdiri-sendiri, seperti ditunjukkan dalam contoh dibawah atau "
"tampilan peta pada URL versi-berdiri-sendiri::"

msgid ""
"Client-side caching will save bandwidth and make your site load faster. If "
"you're using ETags (:class:`~django.middleware.http."
"ConditionalGetMiddleware`), you're already covered. Otherwise, you can "
"apply :ref:`conditional decorators <conditional-decorators>`. In the "
"following example, the cache is invalidated whenever you restart your "
"application server::"
msgstr ""
"Caching sisi-klien akan menyimpan lebar pita dan membuat situs anda dimuat "
"lebih cepat. Jika anda sedang menggunakan ETag (:class:`~django.middleware."
"http.ConditionalGetMiddleware`), anda siap dicakupi. Sebaliknya, anda dapat "
"memberlakukan :ref:`conditional decorators 1`. Dalam contoh berikut, cache "
"tidak berlaku ketika anda memulai kembali peladen aplikasi anda::"

msgid ""
"You can even pre-generate the JavaScript catalog as part of your deployment "
"procedure and serve it as a static file. This radical technique is "
"implemented in django-statici18n_."
msgstr ""
"Anda dapat bahkan pra-membangkitkan katalog JavaScript sebagai bagian dari "
"prosedur pegembangan anda dan melayani itu sebagai berkas tetap. Teknik "
"radikal ini adalah diterapkan dalam django-statici18n_."

msgid "Internationalization: in URL patterns"
msgstr "Internasionalisasi: dalam pola URL"

msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr "Django menyediakan dua mekanisme pada pola URL internasionalisasi:"

msgid ""
"Adding the language prefix to the root of the URL patterns to make it "
"possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect "
"the language to activate from the requested URL."
msgstr ""
"Menambahkan awalan bahasa pada akar dari pola URL untuk membuat itu "
"memungkinkan untuk :class:`~django.middleware.locale.LocaleMiddleware` untuk "
"mengenali bahasa untuk diaktifkan dari URL diminta."

msgid ""
"Making URL patterns themselves translatable via the :func:`django.utils."
"translation.gettext_lazy()` function."
msgstr ""
"Membuat pola URL mereka sendiri dapat diterjemahkan melalui fungsi :func:"
"`django.utils.translation.gettext_lazy()`."

msgid ""
"Using either one of these features requires that an active language be set "
"for each request; in other words, you need to have :class:`django.middleware."
"locale.LocaleMiddleware` in your :setting:`MIDDLEWARE` setting."
msgstr ""
"Menggunakan salah satu dari fitur-fitur ini membutuhkan itu sebuah bahasa "
"aktif untuk disetel untuk setiap permintaan; dengan kata lain, anda butuh "
"harus :class:`django.middleware.locale.LocaleMiddleware` dalam pengaturan :"
"setting:`MIDDLEWARE` setting anda."

msgid "Language prefix in URL patterns"
msgstr "Awalan bahasa dalam pola URL"

msgid ""
"This function can be used in a root URLconf and Django will automatically "
"prepend the current active language code to all URL patterns defined within :"
"func:`~django.conf.urls.i18n.i18n_patterns`."
msgstr ""
"Fungsi ini dapat digunakan dalam URLconf akar dan Django akan otomatis "
"menambahkan kode bahasa aktif saat ini pada semua pola URL ditentukan dalam :"
"func:`~django.conf.urls.i18n.i18n_patterns`."

msgid ""
"Setting ``prefix_default_language`` to ``False`` removes the prefix from the "
"default language (:setting:`LANGUAGE_CODE`). This can be useful when adding "
"translations to existing site so that the current URLs won't change."
msgstr ""
"Mengatur ``prefix_default_language`` menjadi ``False`` memindahkan awalan "
"dari bahasa awalan (:setting:`LANGUAGE_CODE`). Ini dapat berguna ketika "
"menambahkan terjemahan pada situs yang ada sehingga URL saat ini tidak akan "
"berubah."

msgid "Example URL patterns::"
msgstr "Contoh pola URL::"

msgid ""
"After defining these URL patterns, Django will automatically add the "
"language prefix to the URL patterns that were added by the ``i18n_patterns`` "
"function. Example::"
msgstr ""
"Setelah menentukan pola URL ini, Django akan otomatis menambahkan awalan "
"bahasa ke pola URL yang telah ditambahkan oleh fungsi ``i18n_patterns``. "
"Contoh::"

msgid ""
"With ``prefix_default_language=False`` and  ``LANGUAGE_CODE='en'``, the URLs "
"will be::"
msgstr ""
"Dengan ``prefix_default_language=False`` dan ``LANGUAGE_CODE='en'``, URL "
"akan menjadi::"

msgid ""
":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in a root "
"URLconf. Using it within an included URLconf will throw an :exc:`~django."
"core.exceptions.ImproperlyConfigured` exception."
msgstr ""
":func:`~django.conf.urls.i18n.i18n_patterns` hanya diizinkan dalam akar "
"URLconf. Menggunakan itu dalam sebuah URLconf disertakan akan melempar "
"pengecualian :exc:`~django.core.exceptions.ImproperlyConfigured`."

msgid ""
"Ensure that you don't have non-prefixed URL patterns that might collide with "
"an automatically-added language prefix."
msgstr ""
"Memastikan bahwa anda tidak mempunyai pola URL bukan-awalan yang mungkin "
"bertabrakan dengan awalan bahasa otomatis-ditambahkan."

msgid "Translating URL patterns"
msgstr "Menterjemahkan pola URL"

msgid ""
"URL patterns can also be marked translatable using the :func:`~django.utils."
"translation.gettext_lazy` function. Example::"
msgstr ""
"Pola URL dapat juga ditandai dapat diterjemahkan menggunakan fungsi :func:"
"`~django.utils.translation.gettext_lazy`. Contoh::"

msgid ""
"After you've created the translations, the :func:`~django.urls.reverse` "
"function will return the URL in the active language. Example::"
msgstr ""
"Setelah anda telah membuat terjemahan, fungsi :func:`~django.urls.reverse` "
"akan mengembalikan URL dalam bahasa aktif. Contoh::"

msgid ""
"In most cases, it's best to use translated URLs only within a language code "
"prefixed block of patterns (using :func:`~django.conf.urls.i18n."
"i18n_patterns`), to avoid the possibility that a carelessly translated URL "
"causes a collision with a non-translated URL pattern."
msgstr ""

msgid "Reversing in templates"
msgstr "Membalikkan dalam cetakan-cetakan"

msgid ""
"If localized URLs get reversed in templates they always use the current "
"language. To link to a URL in another language use the :ttag:`language` "
"template tag. It enables the given language in the enclosed template section:"
msgstr ""
"Jika URL lokal mendapatkan terbalik dalam cetakan mereka selalu menggunakan "
"bahasa saat ini. Untuk menautkan ke sebuah URL dalam bahasa lain gunakan "
"etiket cetakan :ttag:`language`. Itu mengadakan bahasa yang diberikan dalam "
"bagian cetakan tertutup:"

msgid ""
"The :ttag:`language` tag expects the language code as the only argument."
msgstr ""
"Etiket :ttag:`language` mengharapkan kode bahasa sebagai hanya argumen."

msgid "Localization: how to create language files"
msgstr "Lokalisasi: bagaimana membuat berkas-berkas bahasa"

msgid ""
"Once the string literals of an application have been tagged for later "
"translation, the translation themselves need to be written (or obtained). "
"Here's how that works."
msgstr ""
"Setelah harfiah string dari sebuah aplikasi telah dietiketkan untuk "
"terjemahan akhir, terjemahan itu sendiri butuh ditulis (atau diambil). Ini "
"adalah bagaimana itu bekerja."

msgid "Message files"
msgstr "Berkas pesan"

msgid ""
"The first step is to create a :term:`message file` for a new language. A "
"message file is a plain-text file, representing a single language, that "
"contains all available translation strings and how they should be "
"represented in the given language. Message files have a ``.po`` file "
"extension."
msgstr ""
"langkah pertama adalah membuat sebuah :term:`message file` untuk bahasa "
"baru. Sebuah berkas pesan adalah sebuah berkas teks-polos, mewakili bahasa "
"tunggal, yang mengandung semua string terjemahan tersedia dan bagaimana "
"mereka harus dibawakan dalam bahasa diberikan. Berkas-berkas pesan mempunyai "
"ekstensi berkas ``.po``."

msgid ""
"Django comes with a tool, :djadmin:`django-admin makemessages "
"<makemessages>`, that automates the creation and upkeep of these files."
msgstr ""
"Django datang dengan sebuah alat, :djadmin:`django-admin makemessages "
"1`, yang mengotomatiskan pembuatan dan perawatan dari berkas-berkas ini."

msgid "Gettext utilities"
msgstr "Utilitas gettext"

msgid ""
"The ``makemessages`` command (and ``compilemessages`` discussed later) use "
"commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, "
"``msgmerge`` and ``msguniq``."
msgstr ""
"Perintah ``makemessages`` (dan ``compilemessages`` diobrolkan kemudian) "
"menggunakan perintah dari kumpulan alat gettext GNU: ``xgettext``, "
"``msgfmt``, ``msgmerge`` dan ``msguniq``."

msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr "Versi minimal dari utilitas ``gettext`` didukung adalah 0.15."

msgid "To create or update a message file, run this command::"
msgstr ""
"Untuk membuat atau memperbaharui sebuah berkas pesan, jalankan perintah ini::"

msgid ""
"...where ``de`` is the :term:`locale name` for the message file you want to "
"create. For example, ``pt_BR`` for Brazilian Portuguese, ``de_AT`` for "
"Austrian German or ``id`` for Indonesian."
msgstr ""
"...dimana ``de`` adalah :term:`locale name` untuk berkas pesan anda ingin "
"buat. Sebagai contoh, ``pt_BR`` untuk Brasil Portugis, ``de_AT`` untuk "
"Austria Jerman atau ``id`` untuk Indonesia."

msgid "The script should be run from one of two places:"
msgstr "Tulisan ini harus berjalan dari satu atau dua tempat:"

msgid ""
"The root directory of your Django project (the one that contains ``manage."
"py``)."
msgstr ""
"Direktori akar untuk proyek Django anda (satu yang mengandung ``manage.py``)."

msgid "The root directory of one of your Django apps."
msgstr "Direktori akar dari satu dari aplikasi Django anda."

msgid ""
"The script runs over your project source tree or your application source "
"tree and pulls out all strings marked for translation (see :ref:`how-django-"
"discovers-translations` and be sure :setting:`LOCALE_PATHS` is configured "
"correctly). It creates (or updates) a message file in the directory ``locale/"
"LANG/LC_MESSAGES``. In the ``de`` example, the file will be ``locale/de/"
"LC_MESSAGES/django.po``."
msgstr ""
"Tulisan berjalan terhadap pohon sumber proyek anda atau pohon sumber "
"aplikasi anda dan menarik semua string ditandai untuk terjemahan (lihat :ref:"
"`how-django-discovers-translations` dan pastikan :setting:`LOCALE_PATHS` "
"dikonfigurasi dengan benar). Itu membuat (atau memperbaharui) sebuah berkas "
"pesan dalam direktori ``locale/LANG/LC_MESSAGES``. Dalam contoh ``de``, "
"berkas akan berupa ``locale/de/LC_MESSAGES/django.po``."

msgid ""
"When you run ``makemessages`` from the root directory of your project, the "
"extracted strings will be automatically distributed to the proper message "
"files. That is, a string extracted from a file of an app containing a "
"``locale`` directory will go in a message file under that directory. A "
"string extracted from a file of an app without any ``locale`` directory will "
"either go in a message file under the directory listed first in :setting:"
"`LOCALE_PATHS` or will generate an error if :setting:`LOCALE_PATHS` is empty."
msgstr ""
"Ketika anda menjalankan ``makemessages`` dari direktori akar dari proyek "
"anda, string dikeluarkan akan secara otomatis disebarkan pada berkas-berkas "
"pesan yang sesuai. Yaitu, string dikeluarkan dari sebuah berkas dari sebuah "
"aplikasi mengandung direktori ``locale`` akan masuk dalam berkas pesan "
"dibawah direktori itu. Sebuah string dikeluarkan dari sebuah berkas dari "
"sebuah aplikasi tanpa direktori ``locale`` akan salah satu masuk dalam "
"berkas pesan dibawah direktori didaftar pertama dalam :setting:"
"`LOCALE_PATHS` atau akan membangkitkan sebuah kesalahan jika :setting:"
"`LOCALE_PATHS` adalah kosong."

msgid ""
"By default :djadmin:`django-admin makemessages <makemessages>` examines "
"every file that has the ``.html``, ``.txt`` or ``.py`` file extension. If "
"you want to override that default, use the :option:`--extension "
"<makemessages --extension>` or ``-e`` option to specify the file extensions "
"to examine::"
msgstr ""
"Secara awalan :djadmin:`django-admin makemessages 1` menguji setiap berkas "
"yang mempunyai ekstensi berkas ``.html``, ``.txt`` atau ``.py``. Jika anda "
"ingin menimpa awalan itu, gunakan pilihan :option:`--extension 2` atau ``-"
"e`` untuk menentukan ekstensi berkas untuk diuji::"

msgid ""
"Separate multiple extensions with commas and/or use ``-e`` or ``--"
"extension`` multiple times::"
msgstr ""
"Mmeisahkan banyak ekstensi dengan koma dan/atau menggunakan ``-e`` atau ``--"
"extension`` berkali-kali::"

msgid ""
"When :ref:`creating message files from JavaScript source code <creating-"
"message-files-from-js-code>` you need to use the special ``djangojs`` "
"domain, **not** ``-e js``."
msgstr ""
"Ketika :ref:`creating message files from JavaScript source code <creating-"
"message-files-from-js-code>` anda butuh menggunakan ranah khusus "
"``djangojs``, **bukan** ``-e js``."

msgid "Using Jinja2 templates?"
msgstr "Menggunakan cetakan Jinja2?"

msgid ""
":djadmin:`makemessages` doesn't understand the syntax of Jinja2 templates. "
"To extract strings from a project containing Jinja2 templates, use `Message "
"Extracting`_ from Babel_ instead."
msgstr ""
":djadmin:`makemessages` tidak memahami sintaksis dari cetakan-cetakan "
"Jinja2. Untuk mengeluarkan string dari sebuah proyek mengandung cetakan-"
"cetakan Jinja2, gunakan `Message Extracting`_ dari Babel_ sebagai gantinya."

msgid "Here's an example ``babel.cfg`` configuration file::"
msgstr "Ini adalah contoh berkas konfigurasi ``babel.cfg``::"

msgid ""
"Make sure you list all extensions you're using! Otherwise Babel won't "
"recognize the tags defined by these extensions and will ignore Jinja2 "
"templates containing them entirely."
msgstr ""
"Pastikan anda mendaftarkan semua ekstensi anda sedang gunakan! Sebaliknya "
"Babel tidak akan mengenali etiket-etiket ditentukan oleh ekstensi-ekstensi "
"ini dan akan mengabaikan cetakan-cetakan Jinja2 mengandung mereka sepenuhnya."

msgid ""
"Babel provides similar features to :djadmin:`makemessages`, can replace it "
"in general, and doesn't depend on ``gettext``. For more information, read "
"its documentation about `working with message catalogs`_."
msgstr ""
"Babel menyediakan fitur-fitur mirip pada :djadmin:`makemessages`, dapat "
"mengganti itu secara umum, dan tidak bergantung pada ``gettext``. Untuk "
"informasi lebih, baca dokumentasinya tentang `working with message "
"catalogs`_."

msgid "No gettext?"
msgstr "Tidak ada gettext?"

msgid ""
"If you don't have the ``gettext`` utilities installed, :djadmin:"
"`makemessages` will create empty files. If that's the case, either install "
"the ``gettext`` utilities or copy the English message file (``locale/en/"
"LC_MESSAGES/django.po``) if available and use it as a starting point, which "
"is an empty translation file."
msgstr ""

msgid "Working on Windows?"
msgstr "Bekerja pada WIndows?"

msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more "
"information."
msgstr ""
"Jika anda sedang menggunakan Windows dan butuh memasang utilitas gettext GNU "
"sehingga :djadmin:`makemessages` bekerja, lihat :ref:`gettext_on_windows` "
"untuk informasi lebih. "

msgid ""
"Each ``.po`` file contains a small bit of metadata, such as the translation "
"maintainer's contact information, but the bulk of the file is a list of "
"**messages** -- mappings between translation strings and the actual "
"translated text for the particular language."
msgstr ""

msgid ""
"For example, if your Django app contained a translation string for the text "
"``\"Welcome to my site.\"``, like so::"
msgstr ""
"Sebagai contoh, jika aplikasi Django anda mengandung string terjemahan untuk "
"teks ``\"Welcome to my site.\"``, seperti itu::"

msgid ""
"...then :djadmin:`django-admin makemessages <makemessages>` will have "
"created a ``.po`` file containing the following snippet -- a message:"
msgstr ""
"...kemudian :djadmin:`django-admin makemessages 1` akan membuat sebuah "
"berkas ``.po`` mengandung potongan berikut -- sebuah pesan:"

msgid "A quick explanation:"
msgstr "Penjelasan cepat:"

msgid ""
"``msgid`` is the translation string, which appears in the source. Don't "
"change it."
msgstr ""
"``msgid`` adalah string terjemahan, yang muncul dalam sumber. Jangan rubah "
"itu."

msgid ""
"``msgstr`` is where you put the language-specific translation. It starts out "
"empty, so it's your responsibility to change it. Make sure you keep the "
"quotes around your translation."
msgstr ""
"``msgstr`` adalah dimana anda menaruh terjemahan bahasa-khusus. Itu mulai "
"kosong, jadi itu adalah tanggungjawab anda merubah itu. pastikan anda "
"menjaga kutipan disekitar terjemahan anda."

msgid ""
"As a convenience, each message includes, in the form of a comment line "
"prefixed with ``#`` and located above the ``msgid`` line, the filename and "
"line number from which the translation string was gleaned."
msgstr ""
"Sebagai sebuah kenyamanan, setiap pesan termasuk, dalam bentuk dari baris "
"komentar diawali dengan ``#`` dan bertempat diatas baris ``msgid``, nama "
"berkas dan nomor baris dari mana string terjemahan telah dikumpulkan sedikit "
"demi sedikit."

msgid ""
"Long messages are a special case. There, the first string directly after the "
"``msgstr`` (or ``msgid``) is an empty string. Then the content itself will "
"be written over the next few lines as one string per line. Those strings are "
"directly concatenated. Don't forget trailing spaces within the strings; "
"otherwise, they'll be tacked together without whitespace!"
msgstr ""
"Pesan-pesan panjang adalah kasus khusus. Ada, string pertama secara langsung "
"setelah ``msgstr`` (atau ``msgid``) adalah string kosong. Kemudian isi itu "
"sendiri akan ditulis terhadap sedikit baris selanjutnya sebagai satu string "
"per baris. String-string tersebut secara langsung disatukan. Jangan lupa "
"buntutan ruang kosong dalam string; jika tidak, mereka akan dilekatkan "
"bersama-sama tanpa ruang kosong!"

msgid "Mind your charset"
msgstr "Pikirkan charset anda"

msgid ""
"Due to the way the ``gettext`` tools work internally and because we want to "
"allow non-ASCII source strings in Django's core and your applications, you "
"**must** use UTF-8 as the encoding for your PO files (the default when PO "
"files are created).  This means that everybody will be using the same "
"encoding, which is important when Django processes the PO files."
msgstr ""

msgid "Fuzzy entries"
msgstr ""

msgid ""
":djadmin:`makemessages` sometimes generates translation entries marked as "
"fuzzy, e.g. when translations are inferred from previously translated "
"strings. By default, fuzzy entries are **not** processed by :djadmin:"
"`compilemessages`."
msgstr ""

msgid ""
"To reexamine all source code and templates for new translation strings and "
"update all message files for **all** languages, run this::"
msgstr ""
"Untuk menguji kembali semua kode sumber da cetakan untuk string terjemahan "
"baru dan memperbaharui semua berkas pesan untuk *semua* bahasa, jalankan "
"ini::"

msgid "Compiling message files"
msgstr "Menyusun berkas-berkas pesan"

msgid ""
"After you create your message file -- and each time you make changes to it "
"-- you'll need to compile it into a more efficient form, for use by "
"``gettext``. Do this with the :djadmin:`django-admin compilemessages "
"<compilemessages>` utility."
msgstr ""
"Setelah anda membuat berkas pesan anda -- dan setiap kali anda membuat "
"perubahan ke itu -- anda akan butuh menyusun itu menjadi bentuk lebih "
"efesien, untuk digunakan oleh ``gettext``. Lakukan ini dengan alat :djadmin:"
"`django-admin compilemessages 1`."

msgid ""
"This tool runs over all available ``.po`` files and creates ``.mo`` files, "
"which are binary files optimized for use by ``gettext``. In the same "
"directory from which you ran :djadmin:`django-admin makemessages "
"<makemessages>`, run :djadmin:`django-admin compilemessages "
"<compilemessages>` like this::"
msgstr ""
"Alat ini berjalan terhadap semua berkas ``.po`` tersedia dan membuat berkas "
"``.mo``, yang adalah berkas biner dioptimalkan untu digunakan oleh "
"``gettext``. Dalam direktori sama dari mana anda menjalankan :djadmin:"
"`django-admin makemessages 1`, jalankan :djadmin:`django-admin "
"compilemessages 2` seperti ini::"

msgid "That's it. Your translations are ready for use."
msgstr "Itu dia, terjemahan anda siap digunakan."

msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`django-admin compilemessages <compilemessages>` works see :ref:"
"`gettext_on_windows` for more information."
msgstr ""
"Jika anda sedang menggunakan Windows dan butuh memasang alat gettext GNU "
"sehingga :djadmin:`django-admin compilemessages 1` bekerja lihat :ref:"
"`gettext_on_windows` untuk informasi lebih."

msgid ".po files: Encoding and BOM usage."
msgstr "berkas-berkas .po: Penggunaan penyandian dan BOM."

msgid ""
"Django only supports ``.po`` files encoded in UTF-8 and without any BOM "
"(Byte Order Mark) so if your text editor adds such marks to the beginning of "
"files by default then you will need to reconfigure it."
msgstr ""

msgid ""
"Troubleshooting: ``gettext()`` incorrectly detects ``python-format`` in "
"strings with percent signs"
msgstr ""
"Pemecahan masalah: ``gettext()`` tidak benar mengenali ``python-"
"format`` dalam string-string dengan tanda persen"

msgid ""
"In some cases, such as strings with a percent sign followed by a space and "
"a :ref:`string conversion type <old-string-formatting>` (e.g. ``_(\"10% "
"interest\")``), :func:`~django.utils.translation.gettext` incorrectly flags "
"strings with ``python-format``."
msgstr ""

msgid ""
"If you try to compile message files with incorrectly flagged strings, you'll "
"get an error message like ``number of format specifications in 'msgid' and "
"'msgstr' does not match`` or ``'msgstr' is not a valid Python format string, "
"unlike 'msgid'``."
msgstr ""

msgid ""
"To workaround this, you can escape percent signs by adding a second percent "
"sign::"
msgstr ""
"Untuk memecahkan ini, anda dapat meloloskan tanda persen dengan menambahkan "
"tanda persen kedua::"

msgid ""
"Or you can use ``no-python-format`` so that all percent signs are treated as "
"literals::"
msgstr ""
"Atau anda dapat menggunakan ``no-python-format`` sehingga semua tanda persen "
"diperlakukan sebagai harfiah."

msgid "Creating message files from JavaScript source code"
msgstr "Membuat berkas pesan dari kode sumber JavaScript"

msgid ""
"You create and update the message files the same way as the other Django "
"message files -- with the :djadmin:`django-admin makemessages "
"<makemessages>` tool. The only difference is you need to explicitly specify "
"what in gettext parlance is known as a domain in this case the ``djangojs`` "
"domain, by providing a ``-d djangojs`` parameter, like this::"
msgstr ""

msgid ""
"This would create or update the message file for JavaScript for German. "
"After updating message files, run :djadmin:`django-admin compilemessages "
"<compilemessages>` the same way as you do with normal Django message files."
msgstr ""

msgid "``gettext`` on Windows"
msgstr "``gettext`` pada Windows"

msgid ""
"This is only needed for people who either want to extract message IDs or "
"compile message files (``.po``). Translation work itself involves editing "
"existing files of this type, but if you want to create your own message "
"files, or want to test or compile a changed message file, download `a "
"precompiled binary installer <https://mlocati.github.io/articles/gettext-"
"iconv-windows.html>`_."
msgstr ""

msgid ""
"You may also use ``gettext`` binaries you have obtained elsewhere, so long "
"as the ``xgettext --version`` command works properly. Do not attempt to use "
"Django translation utilities with a ``gettext`` package if the command "
"``xgettext --version`` entered at a Windows command prompt causes a popup "
"window saying \"xgettext.exe has generated errors and will be closed by "
"Windows\"."
msgstr ""

msgid "Customizing the ``makemessages`` command"
msgstr "Menyesuaikan perintah ``makemessages``"

msgid ""
"If you want to pass additional parameters to ``xgettext``, you need to "
"create a custom :djadmin:`makemessages` command and override its "
"``xgettext_options`` attribute::"
msgstr ""
"Jika anda ingin melewatkan parameter tambahan pada ``xgettext``, anda butuh "
"membuat perintah :djadmin:`makemessages` penyesuaian dan menimpa atribut "
"``xgettext_options`` nya::"

msgid ""
"If you need more flexibility, you could also add a new argument to your "
"custom :djadmin:`makemessages` command::"
msgstr ""
"Jika anda butuh lebih keluwesan, anda dapat juga menambahkan argumen baru ke "
"perintah perintah :djadmin:`makemessages`  anda::"

msgid "Miscellaneous"
msgstr "Bermacam-macam"

msgid "The ``set_language`` redirect view"
msgstr "Tampilan mengalihkan ``set_language``"

msgid ""
"As a convenience, Django comes with a view, :func:`django.views.i18n."
"set_language`, that sets a user's language preference and redirects to a "
"given URL or, by default, back to the previous page."
msgstr ""

msgid "Activate this view by adding the following line to your URLconf::"
msgstr ""
"Aktifkan tampilan ini dengan menambahkan baris berikut ke URLconf anda::"

msgid ""
"(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""
"(Catat bahwa contoh ini membuat tampilan tersedia pada ``/i18n/setlang/``.)"

msgid ""
"Make sure that you don't include the above URL within :func:`~django.conf."
"urls.i18n.i18n_patterns` - it needs to be language-independent itself to "
"work correctly."
msgstr ""
"pastikan bahwa anda tidak menyertakan URL diatas dalam :func:`~django.conf."
"urls.i18n.i18n_patterns` - itu butuh menjadi bahasa-berdiri-sendiri untuk "
"bekerja dengan benar."

msgid ""
"The view expects to be called via the ``POST`` method, with a ``language`` "
"parameter set in request. If session support is enabled, the view saves the "
"language choice in the user's session. It also saves the language choice in "
"a cookie that is named ``django_language`` by default. (The name can be "
"changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""

msgid ""
"After setting the language choice, Django looks for a ``next`` parameter in "
"the ``POST`` or ``GET`` data. If that is found and Django considers it to be "
"a safe URL (i.e. it doesn't point to a different host and uses a safe "
"scheme), a redirect to that URL will be performed. Otherwise, Django may "
"fall back to redirecting the user to the URL from the ``Referer`` header or, "
"if it is not set, to ``/``, depending on the nature of the request:"
msgstr ""

msgid ""
"If the request accepts HTML content (based on its ``Accept`` HTTP header), "
"the fallback will always be performed."
msgstr ""

msgid ""
"If the request doesn't accept HTML, the fallback will be performed only if "
"the ``next`` parameter was set. Otherwise a 204 status code (No Content) "
"will be returned."
msgstr ""

msgid "Here's example HTML template code:"
msgstr "Ini adalah contoh kode cetakan HTML:"

msgid ""
"In this example, Django looks up the URL of the page to which the user will "
"be redirected in the ``redirect_to`` context variable."
msgstr ""
"Dalam contoh ini, Django mencari URL dari halaman pada dimana pengguna akan "
"dialihkan dalam variabel konteks ``redirect_to``."

msgid "Explicitly setting the active language"
msgstr "Secara jelas mengatur bahasa aktif"

msgid ""
"You may want to set the active language for the current session explicitly. "
"Perhaps a user's language preference is retrieved from another system, for "
"example. You've already been introduced to :func:`django.utils.translation."
"activate()`. That applies to the current thread only. To persist the "
"language for the entire session in a cookie, set the :setting:"
"`LANGUAGE_COOKIE_NAME` cookie on the response::"
msgstr ""

msgid ""
"You would typically want to use both: :func:`django.utils.translation."
"activate()` changes the language for this thread, and setting the cookie "
"makes this preference persist in future requests."
msgstr ""

msgid "Using translations outside views and templates"
msgstr "Menggunakan terjemahan diluar tampilan dan cetakan"

msgid ""
"While Django provides a rich set of i18n tools for use in views and "
"templates, it does not restrict the usage to Django-specific code. The "
"Django translation mechanisms can be used to translate arbitrary texts to "
"any language that is supported by Django (as long as an appropriate "
"translation catalog exists, of course). You can load a translation catalog, "
"activate it and translate text to language of your choice, but remember to "
"switch back to original language, as activating a translation catalog is "
"done on per-thread basis and such change will affect code running in the "
"same thread."
msgstr ""

msgid ""
"Calling this function with the value ``'de'`` will give you ``\"Willkommen"
"\"``, regardless of :setting:`LANGUAGE_CODE` and language set by middleware."
msgstr ""

msgid ""
"Functions of particular interest are :func:`django.utils.translation."
"get_language()` which returns the language used in the current thread, :func:"
"`django.utils.translation.activate()` which activates a translation catalog "
"for the current thread, and :func:`django.utils.translation."
"check_for_language()` which checks if the given language is supported by "
"Django."
msgstr ""
"Fungsi-fungsi untuk minat tertentu adalah :func:`django.utils.translation."
"get_language()` yang mengembalikan bahasa digunakan dalam thread saat ini, :"
"func:`django.utils.translation.activate()` yang mengaktifkan sebuah katalog "
"terjemahan untuk thread saat ini, dan :func:`django.utils.translation."
"check_for_language()` yang akan memeriksa jika bahasa diberikan adalah "
"didukung oleh Django."

msgid ""
"To help write more concise code, there is also a context manager :func:"
"`django.utils.translation.override()` that stores the current language on "
"enter and restores it on exit. With it, the above example becomes::"
msgstr ""
"Untuk membantu menulis lebih kode ringkas, ada juga sebuah pengelola "
"konteks :func:`django.utils.translation.override()` yang menyimpan bahasa "
"sat ini pada saat masuk dan menyimpan kembali itu pada saat keluar. Dengan "
"itu, contoh diatas menjadi::"

msgid "Language cookie"
msgstr "Cookie bahasa"

msgid "A number of settings can be used to adjust language cookie options:"
msgstr ""
"Sejumlah pengatuan dapat digunakan untuk menyesuaikan pilihan cookie bahasa:"

msgid ":setting:`LANGUAGE_COOKIE_NAME`"
msgstr ":setting:`LANGUAGE_COOKIE_NAME`"

msgid ":setting:`LANGUAGE_COOKIE_AGE`"
msgstr ":setting:`LANGUAGE_COOKIE_AGE`"

msgid ":setting:`LANGUAGE_COOKIE_DOMAIN`"
msgstr ":setting:`LANGUAGE_COOKIE_DOMAIN`"

msgid ":setting:`LANGUAGE_COOKIE_HTTPONLY`"
msgstr ":setting:`LANGUAGE_COOKIE_HTTPONLY`"

msgid ":setting:`LANGUAGE_COOKIE_PATH`"
msgstr ":setting:`LANGUAGE_COOKIE_PATH`"

msgid ":setting:`LANGUAGE_COOKIE_SAMESITE`"
msgstr ":setting:`LANGUAGE_COOKIE_SAMESITE`"

msgid ":setting:`LANGUAGE_COOKIE_SECURE`"
msgstr ":setting:`LANGUAGE_COOKIE_SECURE`"

msgid "Implementation notes"
msgstr "Catatan penerapan"

msgid "Specialties of Django translation"
msgstr "Keahlian khusus dari terjemahan Django"

msgid ""
"Django's translation machinery uses the standard ``gettext`` module that "
"comes with Python. If you know ``gettext``, you might note these specialties "
"in the way Django does translation:"
msgstr ""

msgid ""
"The string domain is ``django`` or ``djangojs``. This string domain is used "
"to differentiate between different programs that store their data in a "
"common message-file library (usually ``/usr/share/locale/``). The ``django`` "
"domain is used for Python and template translation strings and is loaded "
"into the global translation catalogs. The ``djangojs`` domain is only used "
"for JavaScript translation catalogs to make sure that those are as small as "
"possible."
msgstr ""

msgid ""
"Django doesn't use ``xgettext`` alone. It uses Python wrappers around "
"``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""
"Django tidak menggunakan ``xgettext`` sendiri. Itu menggunakan Python "
"dibungkus disekitar ``xgettext`` dan ``msgfmt``. Ini kebanyakan untuk "
"kenyamanan."

msgid "How Django discovers language preference"
msgstr "Bagaimana Django menemukan pilihan bahasa"

msgid ""
"Once you've prepared your translations -- or, if you want to use the "
"translations that come with Django -- you'll need to activate translation "
"for your app."
msgstr ""

msgid ""
"Behind the scenes, Django has a very flexible model of deciding which "
"language should be used -- installation-wide, for a particular user, or both."
msgstr ""
"Dbelakang layar, Django mempunyai model yang sagat elastis dari memutuskan "
"bahasa mana harus digunakan -- pemasangan-lebar, untuk pengguna tertentu, "
"atau keduanya."

msgid ""
"To set an installation-wide language preference, set :setting:"
"`LANGUAGE_CODE`. Django uses this language as the default translation -- the "
"final attempt if no better matching translation is found through one of the "
"methods employed by the locale middleware (see below)."
msgstr ""
"Untuk menyetel sebuah pilihan bahasa pemasangan-luas, setel :setting:"
"`LANGUAGE_CODE`. Django menggunakan bahasa ini sebagai terjemahan awalan -- "
"usaha akhir jika tidak ada terjemahan yang cocok ditemukan melalui satu dari "
"metode-metode dengan middleware lokal (lihat dibawah)."

msgid ""
"If all you want is to run Django with your native language all you need to "
"do is set :setting:`LANGUAGE_CODE` and make sure the corresponding :term:"
"`message files <message file>` and their compiled versions (``.mo``) exist."
msgstr ""
"Jika yang anda inginkan adalah menjalankan Django dengan bahasa asli anda "
"semua anda butuhkan untuk lakukan adalah menyetel :setting:"
"`LANGUAGE_CODE` dan memastikan :term:`message files 1` sesuai dan versi "
"tersusun mereka (``.mo``) ada."

msgid ""
"If you want to let each individual user specify which language they prefer, "
"then you also need to use the ``LocaleMiddleware``. ``LocaleMiddleware`` "
"enables language selection based on data from the request. It customizes "
"content for each user."
msgstr ""
"Jika anda ingin membiarkan setiap pengguna perorangan  menentukan bahasa "
"mana mereka pilih, kemudian anda juga butuh menggunakan "
"``LocaleMiddleware``. ``LocaleMiddleware`` mengadakan pilihan bahasa "
"berdasarkan pada data dari permintaan. Itu menyesuaikan isi untuk setiap "
"pengguna."

msgid ""
"To use ``LocaleMiddleware``, add ``'django.middleware.locale."
"LocaleMiddleware'`` to your :setting:`MIDDLEWARE` setting. Because "
"middleware order matters, follow these guidelines:"
msgstr ""
"Untuk menggunakan ``LocaleMiddleware``, tambah ``'django.middleware.locale."
"LocaleMiddleware'``  ke pengaturan :setting:`MIDDLEWARE` anda. Karena  "
"urutan middleware penting, ikuti panduan berikut:"

msgid "Make sure it's one of the first middleware installed."
msgstr "Pastikan itu adalah satu dari middleware pertama dipasang."

msgid ""
"It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` "
"makes use of session data. And it should come before ``CommonMiddleware`` "
"because ``CommonMiddleware`` needs an activated language in order to resolve "
"the requested URL."
msgstr ""

msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""
"Jika anda menggunakan ``CacheMiddleware``, taruh ``LocaleMiddleware`` "
"setelah itu."

msgid "For example, your :setting:`MIDDLEWARE` might look like this::"
msgstr ""
"Sebagai contoh, :setting:`MIDDLEWARE` anda mungkin terlihat seperti ini::"

msgid ""
"(For more on middleware, see the :doc:`middleware documentation </topics/"
"http/middleware>`.)"
msgstr ""
"(Untuk lebih pada middleware, lihat :doc:`middleware documentation 1`.)"

msgid ""
"``LocaleMiddleware`` tries to determine the user's language preference by "
"following this algorithm:"
msgstr ""
"``LocaleMiddleware`` mencoba menentukan pilihan bahasa pengguna dengan "
"mengikuti algoritma ini:"

msgid ""
"First, it looks for the language prefix in the requested URL.  This is only "
"performed when you are using the ``i18n_patterns`` function in your root "
"URLconf. See :ref:`url-internationalization` for more information about the "
"language prefix and how to internationalize URL patterns."
msgstr ""

msgid "Failing that, it looks for a cookie."
msgstr ""

msgid ""
"The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` "
"setting. (The default name is ``django_language``.)"
msgstr ""
"Nama dari cookie digunakan adalah disetel oleh pengaturan :setting:"
"`LANGUAGE_COOKIE_NAME`. (Nama awalan adalah ``django_language``.)"

msgid ""
"Failing that, it looks at the ``Accept-Language`` HTTP header. This header "
"is sent by your browser and tells the server which language(s) you prefer, "
"in order by priority. Django tries each language in the header until it "
"finds one with available translations."
msgstr ""

msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""

msgid ""
"In each of these places, the language preference is expected to be in the "
"standard :term:`language format<language code>`, as a string. For example, "
"Brazilian Portuguese is ``pt-br``."
msgstr ""

msgid ""
"If a base language is available but the sublanguage specified is not, Django "
"uses the base language. For example, if a user specifies ``de-at`` (Austrian "
"German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""

msgid ""
"Only languages listed in the :setting:`LANGUAGES` setting can be selected. "
"If you want to restrict the language selection to a subset of provided "
"languages (because your application doesn't provide all those languages), "
"set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""

msgid ""
"This example restricts languages that are available for automatic selection "
"to German and English (and any sublanguage, like ``de-ch`` or ``en-us``)."
msgstr ""

msgid ""
"If you define a custom :setting:`LANGUAGES` setting, as explained in the "
"previous bullet, you can mark the language names as translation strings -- "
"but use :func:`~django.utils.translation.gettext_lazy` instead of :func:"
"`~django.utils.translation.gettext` to avoid a circular import."
msgstr ""

msgid "Here's a sample settings file::"
msgstr "Ini adalah contoh sebuah berkas pengaturan::"

msgid ""
"Once ``LocaleMiddleware`` determines the user's preference, it makes this "
"preference available as ``request.LANGUAGE_CODE`` for each :class:`~django."
"http.HttpRequest`. Feel free to read this value in your view code. Here's an "
"example::"
msgstr ""

msgid ""
"Note that, with static (middleware-less) translation, the language is in "
"``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, "
"it's in ``request.LANGUAGE_CODE``."
msgstr ""
"Catat bahwa, dengan terjemahan tetap (tanpa-middleware), bahasa di "
"``settings.LANGUAGE_CODE``, selagi dengan terjemahan dinamis (middleware), "
"itu di ``request.LANGUAGE_CODE``."

msgid "How Django discovers translations"
msgstr "Bagaimana Django menemukan terjemahan"

msgid ""
"At runtime, Django builds an in-memory unified catalog of literals-"
"translations. To achieve this it looks for translations by following this "
"algorithm regarding the order in which it examines the different file paths "
"to load the compiled :term:`message files <message file>` (``.mo``) and the "
"precedence of multiple translations for the same literal:"
msgstr ""

msgid ""
"The directories listed in :setting:`LOCALE_PATHS` have the highest "
"precedence, with the ones appearing first having higher precedence than the "
"ones appearing later."
msgstr ""

msgid ""
"Then, it looks for and uses if it exists a ``locale`` directory in each of "
"the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing "
"first have higher precedence than the ones appearing later."
msgstr ""

msgid ""
"Finally, the Django-provided base translation in ``django/conf/locale`` is "
"used as a fallback."
msgstr ""
"Akhirnya, terjemahan dasar disediakan-Django dalam ``django/conf/locale`` "
"digunakan sebagai sebuah fallback."

msgid ""
"The translations for literals included in JavaScript assets are looked up "
"following a similar but not identical algorithm. See :class:`."
"JavaScriptCatalog` for more details."
msgstr ""

msgid ""
"You can also put :ref:`custom format files <custom-format-files>` in the :"
"setting:`LOCALE_PATHS` directories if you also set :setting:"
"`FORMAT_MODULE_PATH`."
msgstr ""

msgid ""
"In all cases the name of the directory containing the translation is "
"expected to be named using :term:`locale name` notation. E.g. ``de``, "
"``pt_BR``, ``es_AR``, etc. Untranslated strings for territorial language "
"variants use the translations of the generic language. For example, "
"untranslated ``pt_BR`` strings use ``pt`` translations."
msgstr ""

msgid ""
"This way, you can write applications that include their own translations, "
"and you can override base translations in your project. Or, you can build a "
"big project out of several apps and put all translations into one big common "
"message file specific to the project you are composing. The choice is yours."
msgstr ""

msgid "All message file repositories are structured the same way. They are:"
msgstr "Semua gudang berkas pesan tersusun cara sama. Mereka adalah:"

msgid ""
"All paths listed in :setting:`LOCALE_PATHS` in your settings file are "
"searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""
"Semua jalur-jalur terdaftar dalam :setting:`LOCALE_PATHS` di berkas "
"pengaturan anda adalah dicari untuk ``1/LC_MESSAGES/django.(po|mo)``"

msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr "$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"

msgid ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"

msgid ""
"To create message files, you use the :djadmin:`django-admin makemessages "
"<makemessages>` tool. And you use :djadmin:`django-admin compilemessages "
"<compilemessages>` to produce the binary ``.mo`` files that are used by "
"``gettext``."
msgstr ""
"Untuk membuat berkas pesan, anda menggunakan , anda menggunakan alat :"
"djadmin:`django-admin makemessages <makemessages>` . Dan anda menggunakan :"
"djadmin:`django-admin compilemessages <compilemessages>` untuk menghasilkan "
"berkas-berkas biner ``.mo`` yang digunakan oleh ``gettext``."

msgid ""
"You can also run :djadmin:`django-admin compilemessages --settings=path.to."
"settings <compilemessages>` to make the compiler process all the directories "
"in your :setting:`LOCALE_PATHS` setting."
msgstr ""
"Anda dapat juga menjalankan :djadmin:`django-admin compilemessages --"
"settings=path.to.settings 1` untuk membuat penyusun mengolah semua direktori "
"dalam pengaturan :setting:`LOCALE_PATHS` anda."

msgid "Using a non-English base language"
msgstr "Menggunakan bahasa dasar bukan-Inggris"

msgid ""
"Django makes the general assumption that the original strings in a "
"translatable project are written in English. You can choose another "
"language, but you must be aware of certain limitations:"
msgstr ""
"Django membuat anggapan umum bahwa string asli dalam proyek terjemahan "
"ditulis dalam Inggris. Anda dapat memilih bahasa lain, tetapi harus waspada "
"dari batasan tertentu:"

msgid ""
"``gettext`` only provides two plural forms for the original messages, so you "
"will also need to provide a translation for the base language to include all "
"plural forms if the plural rules for the base language are different from "
"English."
msgstr ""

msgid ""
"When an English variant is activated and English strings are missing, the "
"fallback language will not be the :setting:`LANGUAGE_CODE` of the project, "
"but the original strings. For example, an English user visiting a site with :"
"setting:`LANGUAGE_CODE` set to Spanish and original strings written in "
"Russian will see Russian text rather than Spanish."
msgstr ""

msgid "Using Django"
msgstr "Menggunakan Django"

msgid "Introductions to all the key parts of Django you'll need to know:"
msgstr "Perkenalan ke semua bagian kunci dari Django anda akan butuh ketahui:"

msgid "How to install Django"
msgstr "Bagaimana memasang Django"

msgid "This document will get you up and running with Django."
msgstr "Dokumen ini akan membangunkan anda dan berjalan dengan Django."

msgid "Install Python"
msgstr "Pasang Phyton"

msgid ""
"Django is a Python web framework. See :ref:`faq-python-version-support` for "
"details."
msgstr ""

msgid ""
"Get the latest version of Python at https://www.python.org/downloads/ or "
"with your operating system's package manager."
msgstr ""
"Dapatkan versi terakhir dari Python pada https://www.python.org/downloads/ "
"atau dengan pengelola paket sistem operasi anda. "

msgid "Python on Windows"
msgstr "Phyton di Windows"

msgid ""
"If you are just starting with Django and using Windows, you may find :doc:`/"
"howto/windows` useful."
msgstr ""
"Jika anda hanya memulai dengan Django dan menggunakan Windows, anda mungkin "
"menemukan :doc:`/howto/windows` berguna. "

msgid "Install Apache and ``mod_wsgi``"
msgstr "Pasang Apache dan ``mod_wsgi``"

msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight web server you can use for testing, so you "
"won't need to set up Apache until you're ready to deploy Django in "
"production."
msgstr ""
"Jika anda hanya ingin melakukan percobaan dengan Django, lewati bagian "
"selanjutnya; Django menyertakan peladen jaringan ringan anda dapat gunakan "
"untuk percobaan, jadi anda tidak butuh menyetel Apache sampai anda siap "
"menyebarkan Django dalam produksi."

msgid ""
"If you want to use Django on a production site, use `Apache`_ with "
"`mod_wsgi`_. mod_wsgi operates in one of two modes: embedded mode or daemon "
"mode. In embedded mode, mod_wsgi is similar to mod_perl -- it embeds Python "
"within Apache and loads Python code into memory when the server starts. Code "
"stays in memory throughout the life of an Apache process, which leads to "
"significant performance gains over other server arrangements. In daemon "
"mode, mod_wsgi spawns an independent daemon process that handles requests. "
"The daemon process can run as a different user than the web server, possibly "
"leading to improved security. The daemon process can be restarted without "
"restarting the entire Apache web server, possibly making refreshing your "
"codebase more seamless. Consult the mod_wsgi documentation to determine "
"which mode is right for your setup. Make sure you have Apache installed with "
"the mod_wsgi module activated. Django will work with any version of Apache "
"that supports mod_wsgi."
msgstr ""

msgid ""
"See :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` "
"for information on how to configure mod_wsgi once you have it installed."
msgstr ""
"Lihat :doc:`How to use Django with mod_wsgi 1` untuk informasi bagaimana "
"mengkonfigurasi mode_wsgi sekali anda telah memasang itu."

msgid ""
"If you can't use mod_wsgi for some reason, fear not: Django supports many "
"other deployment options. One is :doc:`uWSGI </howto/deployment/wsgi/"
"uwsgi>`; it works very well with `nginx`_. Additionally, Django follows the "
"WSGI spec (:pep:`3333`), which allows it to run on a variety of server "
"platforms."
msgstr ""
"Jika anda tidak dapat menggunakan mod_wsgi untuk beberapa alasan, jangan "
"takut: Django mendukung banyak pilihan penyebaran lain. Satu adalah :doc:"
"`uWSGI </howto/deployment/wsgi/uwsgi>`; itu bekerja sangat baik dengan "
"`nginx`_. Selain itu, Django mengikuti spesifikasi WSGI (:pep:`3333`), yang "
"mengizinkannya untuk berjalan pada seragam serambi peladen."

msgid "Get your database running"
msgstr "Dapatkan basisdata anda berjalan"

msgid ""
"If you plan to use Django's database API functionality, you'll need to make "
"sure a database server is running. Django supports many different database "
"servers and is officially supported with PostgreSQL_, MariaDB_, MySQL_, "
"Oracle_ and SQLite_."
msgstr ""

msgid ""
"If you are developing a small project or something you don't plan to deploy "
"in a production environment, SQLite is generally the best option as it "
"doesn't require running a separate server. However, SQLite has many "
"differences from other databases, so if you are working on something "
"substantial, it's recommended to develop with the same database that you "
"plan on using in production."
msgstr ""

msgid ""
"In addition to the officially supported databases, there are :ref:`backends "
"provided by 3rd parties <third-party-notes>` that allow you to use other "
"databases with Django."
msgstr ""
"Sebagai tambahan ke basisdata didukung resmi, ada :ref:`backends provided by "
"3rd parties 1` yang mengizinkan anda menggunakan basisdata lain dengan "
"Django."

msgid ""
"In addition to a database backend, you'll need to make sure your Python "
"database bindings are installed."
msgstr ""
"Sebagai tambahan ke backend basisdata, anda akan butuh memastikan pengikatan "
"basisdata Python anda terpasang."

msgid ""
"If you're using PostgreSQL, you'll need the `psycopg2`_ package. Refer to "
"the :ref:`PostgreSQL notes <postgresql-notes>` for further details."
msgstr ""
"Jika anda sedang menggunakan PostgreSQL, anda akan butuh paket `psycopg2`_. "
"Mengacu pada :ref:`PostgreSQL notes 1` untuk rincian lebih lanjut."

msgid ""
"If you're using MySQL or MariaDB, you'll need a :ref:`DB API driver <mysql-"
"db-api-drivers>` like ``mysqlclient``. See :ref:`notes for the MySQL backend "
"<mysql-notes>` for details."
msgstr ""

msgid ""
"If you're using SQLite you might want to read the :ref:`SQLite backend notes "
"<sqlite-notes>`."
msgstr ""
"Jika anda sedang menggunakan SQLite anda mungkin ingin membaca :ref:`SQLite "
"backend notes 1`. "

msgid ""
"If you're using Oracle, you'll need a copy of cx_Oracle_, but please read "
"the :ref:`notes for the Oracle backend <oracle-notes>` for details regarding "
"supported versions of both Oracle and ``cx_Oracle``."
msgstr ""
"Jika anda sedang menggunakan Oracle, anda akan butuh salinan dari "
"cx_Oracle_, tetapi harap membaca :ref:`notes for the Oracle backend 1` untuk "
"rincian mengenai versi didukung dari kedua Oracle dan ``cx_Oracle``."

msgid ""
"If you're using an unofficial 3rd party backend, please consult the "
"documentation provided for any additional requirements."
msgstr ""
"Jika anda sedang menggunakan backend pihak ke3 tidak resmi, harap "
"konsultasikan dokumentasi disediakan untuk persyaratan tambahan apapun."

msgid ""
"If you plan to use Django's ``manage.py migrate`` command to automatically "
"create database tables for your models (after first installing Django and "
"creating a project), you'll need to ensure that Django has permission to "
"create and alter tables in the database you're using; if you plan to "
"manually create the tables, you can grant Django ``SELECT``, ``INSERT``, "
"``UPDATE`` and ``DELETE`` permissions. After creating a database user with "
"these permissions, you'll specify the details in your project's settings "
"file, see :setting:`DATABASES` for details."
msgstr ""

msgid ""
"If you're using Django's :doc:`testing framework</topics/testing/index>` to "
"test database queries, Django will need permission to create a test database."
msgstr ""
"Jika anda sedang menggunakan :doc:`testing framework1` Django untuk mencoba "
"permintaan basisdata, Django akan butuh perizinan untuk membuat basisdata "
"percobaan."

msgid "Install the Django code"
msgstr "Pasang kode Django"

msgid ""
"Installation instructions are slightly different depending on whether you're "
"installing a distribution-specific package, downloading the latest official "
"release, or fetching the latest development version."
msgstr ""

msgid "Installing an official release with ``pip``"
msgstr "Memasang terbitan resmi dengan ``pip``"

msgid "This is the recommended way to install Django."
msgstr "Ini adalah cara yang dianjurkan untuk memasang Django."

msgid ""
"Install pip_. The easiest is to use the `standalone pip installer`_. If your "
"distribution already has ``pip`` installed, you might need to update it if "
"it's outdated. If it's outdated, you'll know because installation won't work."
msgstr ""
"Pasang pip_. Paling mudah adalah menggunakan `standalone pip installer`_. "
"Jika penyaluran anda sudah mempunyai ``pip`` terpasang, anda mungkin butuh "
"memperbaharui jika itu sudah usang. Jika itu sudah usang, anda akan tahu "
"karena pemasangan tidak akan bekerja."

msgid ""
"Take a look at :doc:`venv <python:tutorial/venv>`. This tool provides "
"isolated Python environments, which are more practical than installing "
"packages systemwide. It also allows installing packages without "
"administrator privileges. The :doc:`contributing tutorial </intro/"
"contributing>` walks through how to create a virtual environment."
msgstr ""

msgid ""
"After you've created and activated a virtual environment, enter the command:"
msgstr ""

msgid "Installing a distribution-specific package"
msgstr "Memasang paket penyebaran-tertentu"

msgid ""
"Check the :doc:`distribution specific notes </misc/distributions>` to see if "
"your platform/distribution provides official Django packages/installers. "
"Distribution-provided packages will typically allow for automatic "
"installation of dependencies and supported upgrade paths; however, these "
"packages will rarely contain the latest release of Django."
msgstr ""

msgid "Installing the development version"
msgstr "Memasang versi pengembangan"

msgid "Tracking Django development"
msgstr "Melacak pengembangan Django"

msgid ""
"If you decide to use the latest development version of Django, you'll want "
"to pay close attention to `the development timeline`_, and you'll want to "
"keep an eye on the :ref:`release notes for the upcoming release "
"<development_release_notes>`. This will help you stay on top of any new "
"features you might want to use, as well as any changes you'll need to make "
"to your code when updating your copy of Django. (For stable releases, any "
"necessary changes are documented in the release notes.)"
msgstr ""

msgid ""
"If you'd like to be able to update your Django code occasionally with the "
"latest bug fixes and improvements, follow these instructions:"
msgstr ""

msgid ""
"Make sure that you have Git_ installed and that you can run its commands "
"from a shell. (Enter ``git help`` at a shell prompt to test this.)"
msgstr ""
"Pastikan anda mempunyai Git_ terpasang dan anda dapat menjalankan perintah "
"nya dari shell. (masukkan ``git help`` pada shell prompt untuk mencoba ini.)"

msgid "Check out Django's main development branch like so:"
msgstr "Periksa cabang pengembangan Django seperti itu:"

msgid "This will create a directory ``django`` in your current directory."
msgstr ""
"Ini akan membuat sebuah direktori ``django`` dalam direktori anda saat ini."

msgid ""
"Make sure that the Python interpreter can load Django's code. The most "
"convenient way to do this is to use a virtual environment and pip_. The :doc:"
"`contributing tutorial </intro/contributing>` walks through how to create a "
"virtual environment."
msgstr ""

msgid ""
"After setting up and activating the virtual environment, run the following "
"command:"
msgstr ""

msgid ""
"This will make Django's code importable, and will also make the ``django-"
"admin`` utility command available. In other words, you're all set!"
msgstr ""

msgid ""
"When you want to update your copy of the Django source code, run the command "
"``git pull`` from within the ``django`` directory. When you do this, Git "
"will download any changes."
msgstr ""

msgid "Logging"
msgstr "Pencatatan"

msgid ":ref:`logging-how-to`"
msgstr ":ref:`logging-how-to`"

msgid ":ref:`Django logging reference <logging-ref>`"
msgstr ":ref:`Django logging reference <logging-ref>`"

msgid ""
"Python programmers will often use ``print()`` in their code as a quick and "
"convenient debugging tool. Using the logging framework is only a little more "
"effort than that, but it's much more elegant and flexible. As well as being "
"useful for debugging, logging can also provide you with more - and better "
"structured - information about the state and health of your application."
msgstr ""

msgid ""
"Django uses and extends Python's builtin :mod:`logging` module to perform "
"system logging. This module is discussed in detail in Python's own "
"documentation; this section provides a quick overview."
msgstr ""

msgid "The cast of players"
msgstr ""

msgid "A Python logging configuration consists of four parts:"
msgstr ""

msgid ":ref:`topic-logging-parts-loggers`"
msgstr ":ref:`topic-logging-parts-loggers`"

msgid ":ref:`topic-logging-parts-handlers`"
msgstr ":ref:`topic-logging-parts-handlers`"

msgid ":ref:`topic-logging-parts-filters`"
msgstr ":ref:`topic-logging-parts-filters`"

msgid ":ref:`topic-logging-parts-formatters`"
msgstr ":ref:`topic-logging-parts-formatters`"

msgid "Loggers"
msgstr "Pencatat"

msgid ""
"A *logger* is the entry point into the logging system. Each logger is a "
"named bucket to which messages can be written for processing."
msgstr ""

msgid ""
"A logger is configured to have a *log level*. This log level describes the "
"severity of the messages that the logger will handle. Python defines the "
"following log levels:"
msgstr ""

msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr ""
"``DEBUG``: Sistm informasi tingkat rendah untuk tujuan mencari kesalahan"

msgid "``INFO``: General system information"
msgstr "``INFO``: Informasi Sistem Umum"

msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr ""
"``PERINGATAN``: Informasi menggambarkan masalah kecil yang telah muncul."

msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr "``KESALAHAN``: Informasi menggambarkan masalah yang telah muncul."

msgid ""
"``CRITICAL``: Information describing a critical problem that has occurred."
msgstr "``KRITIS``: Informasi menggambarkan masalah kritis yang muncul."

msgid ""
"Each message that is written to the logger is a *Log Record*. Each log "
"record also has a *log level* indicating the severity of that specific "
"message. A log record can also contain useful metadata that describes the "
"event that is being logged. This can include details such as a stack trace "
"or an error code."
msgstr ""

msgid ""
"When a message is given to the logger, the log level of the message is "
"compared to the log level of the logger. If the log level of the message "
"meets or exceeds the log level of the logger itself, the message will "
"undergo further processing. If it doesn't, the message will be ignored."
msgstr ""

msgid ""
"Once a logger has determined that a message needs to be processed, it is "
"passed to a *Handler*."
msgstr ""

msgid "Handlers"
msgstr "Penangan"

msgid ""
"The *handler* is the engine that determines what happens to each message in "
"a logger. It describes a particular logging behavior, such as writing a "
"message to the screen, to a file, or to a network socket."
msgstr ""

msgid ""
"Like loggers, handlers also have a log level. If the log level of a log "
"record doesn't meet or exceed the level of the handler, the handler will "
"ignore the message."
msgstr ""

msgid ""
"A logger can have multiple handlers, and each handler can have a different "
"log level. In this way, it is possible to provide different forms of "
"notification depending on the importance of a message. For example, you "
"could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages "
"to a paging service, while a second handler logs all messages (including "
"``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""

msgid "Filters"
msgstr "Filter"

msgid ""
"A *filter* is used to provide additional control over which log records are "
"passed from logger to handler."
msgstr ""

msgid ""
"By default, any log message that meets log level requirements will be "
"handled. However, by installing a filter, you can place additional criteria "
"on the logging process. For example, you could install a filter that only "
"allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""

msgid ""
"Filters can also be used to modify the logging record prior to being "
"emitted. For example, you could write a filter that downgrades ``ERROR`` log "
"records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""

msgid ""
"Filters can be installed on loggers or on handlers; multiple filters can be "
"used in a chain to perform multiple filtering actions."
msgstr ""

msgid "Formatters"
msgstr "Pembentuk"

msgid ""
"Ultimately, a log record needs to be rendered as text. *Formatters* describe "
"the exact format of that text. A formatter usually consists of a Python "
"formatting string containing :ref:`LogRecord attributes <python:logrecord-"
"attributes>`; however, you can also write custom formatters to implement "
"specific formatting behavior."
msgstr ""

msgid "Security implications"
msgstr "Implikasi keamanan"

msgid ""
"The logging system handles potentially sensitive information. For example, "
"the log record may contain information about a web request or a stack trace, "
"while some of the data you collect in your own loggers may also have "
"security implications. You need to be sure you know:"
msgstr ""

msgid "what information is collected"
msgstr "informasi apa yang dikumpulkan"

msgid "where it will subsequently be stored"
msgstr "dimana selanjutnya akan disimpan"

msgid "how it will be transferred"
msgstr "bagaimana itu akan dipindahkan"

msgid "who might have access to it."
msgstr "siapa yang mungkin mengaksesnya"

msgid ""
"To help control the collection of sensitive information, you can explicitly "
"designate certain sensitive information to be filtered out of error reports "
"-- read more about how to :ref:`filter error reports <filtering-error-"
"reports>`."
msgstr ""

msgid "``AdminEmailHandler``"
msgstr "``AdminEmailHandler``"

msgid ""
"The built-in :class:`~django.utils.log.AdminEmailHandler` deserves a mention "
"in the context of security. If its ``include_html`` option is enabled, the "
"email message it sends will contain a full traceback, with names and values "
"of local variables at each level of the stack, plus the values of your "
"Django settings (in other words, the same level of detail that is exposed in "
"a web page when :setting:`DEBUG` is ``True``)."
msgstr ""

msgid ""
"It's generally not considered a good idea to send such potentially sensitive "
"information over email. Consider instead using one of the many third-party "
"services to which detailed logs can be sent to get the best of multiple "
"worlds -- the rich information of full tracebacks, clear management of who "
"is notified and has access to the information, and so on."
msgstr ""

msgid "Configuring logging"
msgstr "Mengkonfigurasi catatan"

msgid ""
"Python's logging library provides several techniques to configure logging, "
"ranging from a programmatic interface to configuration files. By default, "
"Django uses the :ref:`dictConfig format <logging-config-dictschema>`."
msgstr ""

msgid ""
"In order to configure logging, you use :setting:`LOGGING` to define a "
"dictionary of logging settings. These settings describe the loggers, "
"handlers, filters and formatters that you want in your logging setup, and "
"the log levels and other properties that you want those components to have."
msgstr ""

msgid ""
"By default, the :setting:`LOGGING` setting is merged with :ref:`Django's "
"default logging configuration <default-logging-configuration>` using the "
"following scheme."
msgstr ""

msgid ""
"If the ``disable_existing_loggers`` key in the :setting:`LOGGING` dictConfig "
"is set to ``True`` (which is the ``dictConfig`` default if the key is "
"missing) then all loggers from the default configuration will be disabled. "
"Disabled loggers are not the same as removed; the logger will still exist, "
"but will silently discard anything logged to it, not even propagating "
"entries to a parent logger. Thus you should be very careful using "
"``'disable_existing_loggers': True``; it's probably not what you want. "
"Instead, you can set ``disable_existing_loggers`` to ``False`` and redefine "
"some or all of the default loggers; or you can set :setting:`LOGGING_CONFIG` "
"to ``None`` and :ref:`handle logging config yourself <disabling-logging-"
"configuration>`."
msgstr ""

msgid ""
"Logging is configured as part of the general Django ``setup()`` function. "
"Therefore, you can be certain that loggers are always ready for use in your "
"project code."
msgstr ""

msgid ""
"The full documentation for :ref:`dictConfig format <logging-config-"
"dictschema>` is the best source of information about logging configuration "
"dictionaries. However, to give you a taste of what is possible, here are "
"several examples."
msgstr ""

msgid ""
"To begin, here's a small configuration that will allow you to output all log "
"messages to the console:"
msgstr ""

msgid "``settings.py``"
msgstr ""

msgid ""
"This configures the parent ``root`` logger to send messages with the "
"``WARNING`` level and higher to the console handler. By adjusting the level "
"to ``INFO`` or ``DEBUG`` you can display more messages. This may be useful "
"during development."
msgstr ""

msgid ""
"Next we can add more fine-grained logging. Here's an example of how to make "
"the logging system print more messages from just the :ref:`django-logger` "
"named logger:"
msgstr ""

msgid ""
"By default, this config sends messages from the ``django`` logger of level "
"``INFO`` or higher to the console. This is the same level as Django's "
"default logging config, except that the default config only displays log "
"records when ``DEBUG=True``. Django does not log many such ``INFO`` level "
"messages. With this config, however, you can also set the environment "
"variable ``DJANGO_LOG_LEVEL=DEBUG`` to see all of Django's debug logging "
"which is very verbose as it includes all database queries."
msgstr ""

msgid ""
"You don't have to log to the console. Here's a configuration which writes "
"all logging from the :ref:`django-logger` named logger to a local file:"
msgstr ""

msgid ""
"If you use this example, be sure to change the ``'filename'`` path to a "
"location that's writable by the user that's running the Django application."
msgstr ""

msgid "Finally, here's an example of a fairly complex logging setup:"
msgstr ""

msgid "This logging configuration does the following things:"
msgstr "Konfigurasi pencatatan ini melakukan hal-hal berikut::"

msgid ""
"Identifies the configuration as being in 'dictConfig version 1' format. At "
"present, this is the only dictConfig format version."
msgstr ""

msgid "Defines two formatters:"
msgstr "Menentukan dua pembentuk:"

msgid ""
"``simple``, that outputs the log level name (e.g., ``DEBUG``) and the log "
"message."
msgstr ""

msgid ""
"The ``format`` string is a normal Python formatting string describing the "
"details that are to be output on each logging line. The full list of detail "
"that can be output can be found in :ref:`formatter-objects`."
msgstr ""

msgid ""
"``verbose``, that outputs the log level name, the log message, plus the "
"time, process, thread and module that generate the log message."
msgstr ""

msgid "Defines two filters:"
msgstr "Menentukan dua penyaring:"

msgid ""
"``project.logging.SpecialFilter``, using the alias ``special``. If this "
"filter required additional arguments, they can be provided as additional "
"keys in the filter configuration dictionary. In this case, the argument "
"``foo`` will be given a value of ``bar`` when instantiating "
"``SpecialFilter``."
msgstr ""

msgid ""
"``django.utils.log.RequireDebugTrue``, which passes on records when :setting:"
"`DEBUG` is ``True``."
msgstr ""
"``django.utils.log.RequireDebugTrue``, yang melewatkan pada rekaman-rekaman "
"ketika :setting:`DEBUG` adalah ``True``."

msgid "Defines two handlers:"
msgstr "Menentukan dua penangan:"

msgid ""
"``console``, a :class:`~logging.StreamHandler`, which prints any ``INFO`` "
"(or higher) message to ``sys.stderr``. This handler uses the ``simple`` "
"output format."
msgstr ""
"``console``, sebuah :class:`~logging.StreamHandler`, yang mencetak pesan "
"``INFO`` apapun (atau lebih tinggi) ke ``sys.stderr``. Penangan ini "
"menggunakan bentuk keluaran ``simple``."

msgid ""
"``mail_admins``, an :class:`~django.utils.log.AdminEmailHandler`, which "
"emails any ``ERROR`` (or higher) message to the site :setting:`ADMINS`. This "
"handler uses the ``special`` filter."
msgstr ""

msgid "Configures three loggers:"
msgstr "Mengkonfigurasi tiga pencatat:"

msgid "``django``, which passes all messages to the ``console`` handler."
msgstr "``django``, yang melewatkan semua pesan-pesan ke penangan ``console``."

msgid ""
"``django.request``, which passes all ``ERROR`` messages to the "
"``mail_admins`` handler. In addition, this logger is marked to *not* "
"propagate messages. This means that log messages written to ``django."
"request`` will not be handled by the ``django`` logger."
msgstr ""

msgid ""
"``myproject.custom``, which passes all messages at ``INFO`` or higher that "
"also pass the ``special`` filter to two handlers -- the ``console``, and "
"``mail_admins``. This means that all ``INFO`` level messages (or higher) "
"will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will "
"also be output via email."
msgstr ""

msgid "Custom logging configuration"
msgstr "Konfigurasi pencatatan penyesuaian"

msgid ""
"If you don't want to use Python's dictConfig format to configure your "
"logger, you can specify your own configuration scheme."
msgstr ""
"Jika anda tidak ingin menggunakan bentuk dictConfig Python untuk "
"mengkonfigurasi pencatat anda, anda dapat menentukan skema konfigurasi anda "
"sendiri."

msgid ""
"The :setting:`LOGGING_CONFIG` setting defines the callable that will be used "
"to configure Django's loggers. By default, it points at Python's :func:"
"`logging.config.dictConfig()` function. However, if you want to use a "
"different configuration process, you can use any other callable that takes a "
"single argument. The contents of :setting:`LOGGING` will be provided as the "
"value of that argument when logging is configured."
msgstr ""

msgid "Disabling logging configuration"
msgstr "Meniadakan konfigurasi pencatatan"

msgid ""
"If you don't want to configure logging at all (or you want to manually "
"configure logging using your own approach), you can set :setting:"
"`LOGGING_CONFIG` to ``None``. This will disable the configuration process "
"for :ref:`Django's default logging <default-logging-configuration>`."
msgstr ""

msgid ""
"Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the automatic "
"configuration process is disabled, not logging itself. If you disable the "
"configuration process, Django will still make logging calls, falling back to "
"whatever default logging behavior is defined."
msgstr ""

msgid ""
"Here's an example that disables Django's logging configuration and then "
"manually configures logging:"
msgstr ""

msgid ""
"Note that the default configuration process only calls :setting:"
"`LOGGING_CONFIG` once settings are fully-loaded. In contrast, manually "
"configuring the logging in your settings file will load your logging config "
"immediately. As such, your logging config must appear *after* any settings "
"on which it depends."
msgstr ""

msgid "Migrations"
msgstr "Perpindahan"

msgid ""
"Migrations are Django's way of propagating changes you make to your models "
"(adding a field, deleting a model, etc.) into your database schema. They're "
"designed to be mostly automatic, but you'll need to know when to make "
"migrations, when to run them, and the common problems you might run into."
msgstr ""

msgid "The Commands"
msgstr "Perintah"

msgid ""
"There are several commands which you will use to interact with migrations "
"and Django's handling of database schema:"
msgstr ""

msgid ""
":djadmin:`migrate`, which is responsible for applying and unapplying "
"migrations."
msgstr ""
":djadmin:`migrate`, yang bertanggung jawab untuk memberlakukan dan tidak "
"memberlakukan perpindahan."

msgid ""
":djadmin:`makemigrations`, which is responsible for creating new migrations "
"based on the changes you have made to your models."
msgstr ""

msgid ""
":djadmin:`sqlmigrate`, which displays the SQL statements for a migration."
msgstr ""
":djadmin:`sqlmigrate`, yang menampilan pernyataan SQL untuk perpindahan."

msgid ""
":djadmin:`showmigrations`, which lists a project's migrations and their "
"status."
msgstr ""
":djadmin:`showmigrations`, yang menampilan perpindahan proyek dan keadaan "
"mereka."

msgid ""
"You should think of migrations as a version control system for your database "
"schema. ``makemigrations`` is responsible for packaging up your model "
"changes into individual migration files - analogous to commits - and "
"``migrate`` is responsible for applying those to your database."
msgstr ""

msgid ""
"The migration files for each app live in a \"migrations\" directory inside "
"of that app, and are designed to be committed to, and distributed as part "
"of, its codebase. You should be making them once on your development machine "
"and then running the same migrations on your colleagues' machines, your "
"staging machines, and eventually your production machines."
msgstr ""

msgid ""
"It is possible to override the name of the package which contains the "
"migrations on a per-app basis by modifying the :setting:`MIGRATION_MODULES` "
"setting."
msgstr ""

msgid ""
"Migrations will run the same way on the same dataset and produce consistent "
"results, meaning that what you see in development and staging is, under the "
"same circumstances, exactly what will happen in production."
msgstr ""

msgid ""
"Django will make migrations for any change to your models or fields - even "
"options that don't affect the database - as the only way it can reconstruct "
"a field correctly is to have all the changes in the history, and you might "
"need those options in some data migrations later on (for example, if you've "
"set custom validators)."
msgstr ""

msgid "Backend Support"
msgstr "Dukungan backend"

msgid ""
"Migrations are supported on all backends that Django ships with, as well as "
"any third-party backends if they have programmed in support for schema "
"alteration (done via the :doc:`SchemaEditor </ref/schema-editor>` class)."
msgstr ""

msgid ""
"However, some databases are more capable than others when it comes to schema "
"migrations; some of the caveats are covered below."
msgstr ""

msgid ""
"PostgreSQL is the most capable of all the databases here in terms of schema "
"support."
msgstr ""

msgid ""
"The only caveat is that prior to PostgreSQL 11, adding columns with default "
"values causes a full rewrite of the table, for a time proportional to its "
"size. For this reason, it's recommended you always create new columns with "
"``null=True``, as this way they will be added immediately."
msgstr ""

msgid "MySQL"
msgstr "MySQL"

msgid ""
"MySQL lacks support for transactions around schema alteration operations, "
"meaning that if a migration fails to apply you will have to manually unpick "
"the changes in order to try again (it's impossible to roll back to an "
"earlier point)."
msgstr ""

msgid ""
"In addition, MySQL will fully rewrite tables for almost every schema "
"operation and generally takes a time proportional to the number of rows in "
"the table to add or remove columns. On slower hardware this can be worse "
"than a minute per million rows - adding a few columns to a table with just a "
"few million rows could lock your site up for over ten minutes."
msgstr ""

msgid ""
"Finally, MySQL has relatively small limits on name lengths for columns, "
"tables and indexes, as well as a limit on the combined size of all columns "
"an index covers. This means that indexes that are possible on other backends "
"will fail to be created under MySQL."
msgstr ""

msgid "SQLite"
msgstr "SQLite"

msgid ""
"SQLite has very little built-in schema alteration support, and so Django "
"attempts to emulate it by:"
msgstr ""

msgid "Creating a new table with the new schema"
msgstr "Membuat tabel baru dengan skema baru"

msgid "Copying the data across"
msgstr "Menyalin data di seluruh"

msgid "Dropping the old table"
msgstr "Menghapus tabel lama"

msgid "Renaming the new table to match the original name"
msgstr "Menamai kembali tabel baru untuk cocok dengan nama asli"

msgid ""
"This process generally works well, but it can be slow and occasionally "
"buggy. It is not recommended that you run and migrate SQLite in a production "
"environment unless you are very aware of the risks and its limitations; the "
"support Django ships with is designed to allow developers to use SQLite on "
"their local machines to develop less complex Django projects without the "
"need for a full database."
msgstr ""

msgid "Workflow"
msgstr "Alur kerja"

msgid ""
"Django can create migrations for you. Make changes to your models - say, add "
"a field and remove a model - and then run :djadmin:`makemigrations`::"
msgstr ""

msgid ""
"Your models will be scanned and compared to the versions currently contained "
"in your migration files, and then a new set of migrations will be written "
"out. Make sure to read the output to see what ``makemigrations`` thinks you "
"have changed - it's not perfect, and for complex changes it might not be "
"detecting what you expect."
msgstr ""

msgid ""
"Once you have your new migration files, you should apply them to your "
"database to make sure they work as expected::"
msgstr ""

msgid ""
"Once the migration is applied, commit the migration and the models change to "
"your version control system as a single commit - that way, when other "
"developers (or your production servers) check out the code, they'll get both "
"the changes to your models and the accompanying migration at the same time."
msgstr ""

msgid ""
"If you want to give the migration(s) a meaningful name instead of a "
"generated one, you can use the :option:`makemigrations --name` option::"
msgstr ""

msgid "Version control"
msgstr "Kendali versi"

msgid ""
"Because migrations are stored in version control, you'll occasionally come "
"across situations where you and another developer have both committed a "
"migration to the same app at the same time, resulting in two migrations with "
"the same number."
msgstr ""

msgid ""
"Don't worry - the numbers are just there for developers' reference, Django "
"just cares that each migration has a different name. Migrations specify "
"which other migrations they depend on - including earlier migrations in the "
"same app - in the file, so it's possible to detect when there's two new "
"migrations for the same app that aren't ordered."
msgstr ""

msgid ""
"When this happens, Django will prompt you and give you some options. If it "
"thinks it's safe enough, it will offer to automatically linearize the two "
"migrations for you. If not, you'll have to go in and modify the migrations "
"yourself - don't worry, this isn't difficult, and is explained more in :ref:"
"`migration-files` below."
msgstr ""

msgid ""
"On databases that support DDL transactions (SQLite and PostgreSQL), all "
"migration operations will run inside a single transaction by default. In "
"contrast, if a database doesn't support DDL transactions (e.g. MySQL, "
"Oracle) then all operations will run without a transaction."
msgstr ""

msgid ""
"You can prevent a migration from running in a transaction by setting the "
"``atomic`` attribute to ``False``. For example::"
msgstr ""

msgid ""
"It's also possible to execute parts of the migration inside a transaction "
"using :func:`~django.db.transaction.atomic()` or by passing ``atomic=True`` "
"to :class:`~django.db.migrations.operations.RunPython`. See :ref:`non-atomic-"
"migrations` for more details."
msgstr ""

msgid "Dependencies"
msgstr "Ketergantungan"

msgid ""
"While migrations are per-app, the tables and relationships implied by your "
"models are too complex to be created for one app at a time. When you make a "
"migration that requires something else to run - for example, you add a "
"``ForeignKey`` in your ``books`` app to your ``authors`` app - the resulting "
"migration will contain a dependency on a migration in ``authors``."
msgstr ""

msgid ""
"This means that when you run the migrations, the ``authors`` migration runs "
"first and creates the table the ``ForeignKey`` references, and then the "
"migration that makes the ``ForeignKey`` column runs afterward and creates "
"the constraint. If this didn't happen, the migration would try to create the "
"``ForeignKey`` column without the table it's referencing existing and your "
"database would throw an error."
msgstr ""

msgid ""
"This dependency behavior affects most migration operations where you "
"restrict to a single app. Restricting to a single app (either in "
"``makemigrations`` or ``migrate``) is a best-efforts promise, and not a "
"guarantee; any other apps that need to be used to get dependencies correct "
"will be."
msgstr ""

msgid ""
"Apps without migrations must not have relations (``ForeignKey``, "
"``ManyToManyField``, etc.) to apps with migrations. Sometimes it may work, "
"but it's not supported."
msgstr ""

msgid "Migration files"
msgstr "Berkas perpindahan"

msgid ""
"Migrations are stored as an on-disk format, referred to here as \"migration "
"files\". These files are actually normal Python files with an agreed-upon "
"object layout, written in a declarative style."
msgstr ""

msgid "A basic migration file looks like this::"
msgstr "Sebuah berkas perpindahan terlihat seperti::"

msgid ""
"What Django looks for when it loads a migration file (as a Python module) is "
"a subclass of ``django.db.migrations.Migration`` called ``Migration``. It "
"then inspects this object for four attributes, only two of which are used "
"most of the time:"
msgstr ""

msgid "``dependencies``, a list of migrations this one depends on."
msgstr ""

msgid ""
"``operations``, a list of ``Operation`` classes that define what this "
"migration does."
msgstr ""

msgid ""
"The operations are the key; they are a set of declarative instructions which "
"tell Django what schema changes need to be made. Django scans them and "
"builds an in-memory representation of all of the schema changes to all apps, "
"and uses this to generate the SQL which makes the schema changes."
msgstr ""

msgid ""
"That in-memory structure is also used to work out what the differences are "
"between your models and the current state of your migrations; Django runs "
"through all the changes, in order, on an in-memory set of models to come up "
"with the state of your models last time you ran ``makemigrations``. It then "
"uses these models to compare against the ones in your ``models.py`` files to "
"work out what you have changed."
msgstr ""

msgid ""
"You should rarely, if ever, need to edit migration files by hand, but it's "
"entirely possible to write them manually if you need to. Some of the more "
"complex operations are not autodetectable and are only available via a hand-"
"written migration, so don't be scared about editing them if you have to."
msgstr ""

msgid "Custom fields"
msgstr "Bidang penyesuaian"

msgid ""
"You can't modify the number of positional arguments in an already migrated "
"custom field without raising a ``TypeError``. The old migration will call "
"the modified ``__init__`` method with the old signature. So if you need a "
"new argument, please create a keyword argument and add something like "
"``assert 'argument_name' in kwargs`` in the constructor."
msgstr ""
"Anda tidak dapat merubah argumen penempatan dalam bidang penyesuaian sudah "
"diminta tanpa memunculkan sebuah ``TypeError``. Perpindahan lama akan "
"memanggil metode ``__init__ yang telah dirubah dengan tanda tangan lama. "
"Jadi jika anda butuh argumen baru, harap membuat sebuah argumen kata kunci "
"dan menambahkan sesuatu seperti ``assert 'argument_name' in kwargs`` dalam "
"pembangun."

msgid "Model managers"
msgstr "Pengelola model"

msgid ""
"You can optionally serialize managers into migrations and have them "
"available in :class:`~django.db.migrations.operations.RunPython` operations. "
"This is done by defining a ``use_in_migrations`` attribute on the manager "
"class::"
msgstr ""

msgid ""
"If you are using the :meth:`~django.db.models.from_queryset` function to "
"dynamically generate a manager class, you need to inherit from the generated "
"class to make it importable::"
msgstr ""

msgid ""
"Please refer to the notes about :ref:`historical-models` in migrations to "
"see the implications that come along."
msgstr ""

msgid "Initial migrations"
msgstr "Perpindahan awal"

msgid ""
"The \"initial migrations\" for an app are the migrations that create the "
"first version of that app's tables. Usually an app will have one initial "
"migration, but in some cases of complex model interdependencies it may have "
"two or more."
msgstr ""

msgid ""
"Initial migrations are marked with an ``initial = True`` class attribute on "
"the migration class. If an ``initial`` class attribute isn't found, a "
"migration will be considered \"initial\" if it is the first migration in the "
"app (i.e. if it has no dependencies on any other migration in the same app)."
msgstr ""

msgid ""
"When the :option:`migrate --fake-initial` option is used, these initial "
"migrations are treated specially. For an initial migration that creates one "
"or more tables (``CreateModel`` operation), Django checks that all of those "
"tables already exist in the database and fake-applies the migration if so. "
"Similarly, for an initial migration that adds one or more fields "
"(``AddField`` operation), Django checks that all of the respective columns "
"already exist in the database and fake-applies the migration if so. Without "
"``--fake-initial``, initial migrations are treated no differently from any "
"other migration."
msgstr ""
"Ketika pilihan :option:`migrate --fake-initial` digunakan, perpindahan "
"inisial ini diperlakukan khusus. Untuk sebuah perpindahan inisial yang "
"membuat satu atau lebih tabel (tindakan ``CreateModel``), Django memeriksa "
"bahwa semua dari tabel-table tersebut sudah ada dalam basisdata dan "
"pemberlakukan-palsu perpindahan jika demikian. Demikian pula, untuk sebuah "
"perpindahan inisial yang menambahkan satu atau lebih bidang-bidang (tindakan "
"``AddField``), Django memeriksa bahwa semua dari masing-masing kolom sudah "
"ada dalam basisdata dan pemberlakukan-palsu perpindahan jika demikian. Tanpa "
"``--fake-initial``, perpindahan inisial diperlakukan tidak berbeda dari "
"perpindahan lain."

msgid "History consistency"
msgstr ""

msgid ""
"As previously discussed, you may need to linearize migrations manually when "
"two development branches are joined. While editing migration dependencies, "
"you can inadvertently create an inconsistent history state where a migration "
"has been applied but some of its dependencies haven't. This is a strong "
"indication that the dependencies are incorrect, so Django will refuse to run "
"migrations or make new migrations until it's fixed. When using multiple "
"databases, you can use the :meth:`allow_migrate` method of :ref:`database "
"routers <topics-db-multi-db-routing>` to control which databases :djadmin:"
"`makemigrations` checks for consistent history."
msgstr ""
"Seperti sebelumnya diobrolkan, anda mungkin butuh melinerarkan perpindahan "
"secara manual ketika dua cabang pengembangan digabungkan. Selagi menyunting "
"ketergantungan perpindahan, anda dapat secara tidak sengaja membuat sebuah "
"keadaan riwayat tidak tetap dimana sebuah perpindahan telah diberlakukan "
"tetapi beberapa ketergantungannya belum. Ini adalah indikasi kuat yang "
"ketergantungan adalah tidak benar, jadi Django akan menolak menjalankan "
"perpindahan atau membuat perpindahan baru sampai itu diperbaiki. Ketika "
"menggunakan banyak basisdata, anda dapat menggunakan metode :meth:"
"`allow_migrate` dari :ref:`database routers <topics-db-multi-db-routing>` "
"untuk mengendalikan pemeriksaan :djadmin:`makemigrations` basisdata mana "
"untuk riwayat ketetapan."

msgid "Adding migrations to apps"
msgstr "Menambahkan perpindahan ke aplikasi"

msgid ""
"New apps come preconfigured to accept migrations, and so you can add "
"migrations by running :djadmin:`makemigrations` once you've made some "
"changes."
msgstr ""

msgid ""
"If your app already has models and database tables, and doesn't have "
"migrations yet (for example, you created it against a previous Django "
"version), you'll need to convert it to use migrations by running::"
msgstr ""

msgid ""
"This will make a new initial migration for your app. Now, run ``python "
"manage.py migrate --fake-initial``, and Django will detect that you have an "
"initial migration *and* that the tables it wants to create already exist, "
"and will mark the migration as already applied. (Without the :option:"
"`migrate --fake-initial` flag, the command would error out because the "
"tables it wants to create already exist.)"
msgstr ""

msgid "Note that this only works given two things:"
msgstr "Catat bahwa ini hanya bekerja memberikan dua hal:"

msgid ""
"You have not changed your models since you made their tables. For migrations "
"to work, you must make the initial migration *first* and then make changes, "
"as Django compares changes against migration files, not the database."
msgstr ""

msgid ""
"You have not manually edited your database - Django won't be able to detect "
"that your database doesn't match your models, you'll just get errors when "
"migrations try to modify those tables."
msgstr ""

msgid "Reversing migrations"
msgstr ""

msgid ""
"Migrations can be reversed with :djadmin:`migrate` by passing the number of "
"the previous migration. For example, to reverse migration ``books.0003``:"
msgstr ""

msgid ""
"If you want to reverse all migrations applied for an app, use the name "
"``zero``:"
msgstr ""

msgid ""
"A migration is irreversible if it contains any irreversible operations. "
"Attempting to reverse such migrations will raise ``IrreversibleError``:"
msgstr ""

msgid "Historical models"
msgstr ""

msgid ""
"When you run migrations, Django is working from historical versions of your "
"models stored in the migration files. If you write Python code using the :"
"class:`~django.db.migrations.operations.RunPython` operation, or if you have "
"``allow_migrate`` methods on your database routers, you **need to use** "
"these historical model versions rather than importing them directly."
msgstr ""

msgid ""
"If you import models directly rather than using the historical models, your "
"migrations *may work initially* but will fail in the future when you try to "
"re-run old migrations (commonly, when you set up a new installation and run "
"through all the migrations to set up the database)."
msgstr ""

msgid ""
"This means that historical model problems may not be immediately obvious. If "
"you run into this kind of failure, it's OK to edit the migration to use the "
"historical models rather than direct imports and commit those changes."
msgstr ""

msgid ""
"Because it's impossible to serialize arbitrary Python code, these historical "
"models will not have any custom methods that you have defined. They will, "
"however, have the same fields, relationships, managers (limited to those "
"with ``use_in_migrations = True``) and ``Meta`` options (also versioned, so "
"they may be different from your current ones)."
msgstr ""
"Karena itu tidak mungkin menserialisasikan kode Python berubah-ubah, model-"
"model riwayat ini tidak akan mempunyai penyesuaian metode apapun yang anda "
"telah tentukan. Mereka akan, bagaimanapun, mempunyai bidang-bidang sama, "
"hubungan, pengelola (terbatas ke itu dengan ``use_in_migrations = True``) "
"dan pilihan ``Meta`` (juga berversi, jadi mereka mungkin berbeda dari satu "
"anda saat ini)."

msgid ""
"This means that you will NOT have custom ``save()`` methods called on "
"objects when you access them in migrations, and you will NOT have any custom "
"constructors or instance methods. Plan appropriately!"
msgstr ""
"Ini berarti bahwa anda TIDAK akan mempunyai metode ``save()`` penyesuaian "
"dipanggil ketika anda mengakses mereka dalam perpindahan, dan anda TIDAK "
"akan mempunyai pembangun penyesuaian apapun atau metode instance. Rencanakan "
"dengan tepat!"

msgid ""
"References to functions in field options such as ``upload_to`` and "
"``limit_choices_to`` and model manager declarations with managers having "
"``use_in_migrations = True`` are serialized in migrations, so the functions "
"and classes will need to be kept around for as long as there is a migration "
"referencing them. Any :doc:`custom model fields </howto/custom-model-"
"fields>` will also need to be kept, since these are imported directly by "
"migrations."
msgstr ""

msgid ""
"In addition, the concrete base classes of the model are stored as pointers, "
"so you must always keep base classes around for as long as there is a "
"migration that contains a reference to them. On the plus side, methods and "
"managers from these base classes inherit normally, so if you absolutely need "
"access to these you can opt to move them into a superclass."
msgstr ""

msgid ""
"To remove old references, you can :ref:`squash migrations <migration-"
"squashing>` or, if there aren't many references, copy them into the "
"migration files."
msgstr ""
"Untuk memindahkan acuan lama, anda dapat :ref:`squash migrations <migration-"
"squashing>` atau, jika tidak ada acuan, salin mereka kedalam berkas "
"perpindahan."

msgid "Considerations when removing model fields"
msgstr "Pertimbangkan ketika memindahkan bidang model"

msgid ""
"Similar to the \"references to historical functions\" considerations "
"described in the previous section, removing custom model fields from your "
"project or third-party app will cause a problem if they are referenced in "
"old migrations."
msgstr ""

msgid ""
"To help with this situation, Django provides some model field attributes to "
"assist with model field deprecation using the :doc:`system checks framework "
"</topics/checks>`."
msgstr ""
"Untuk membantu dengan keadaan ini, Django menyediakan beberapa atribut "
"bidang model untuk memandu dengan pengusangan bidang model menggunakan :doc:"
"`system checks framework </topics/checks>`."

msgid ""
"Add the ``system_check_deprecated_details`` attribute to your model field "
"similar to the following::"
msgstr ""
"Tambah atribut ``system_check_deprecated_details`` ke bidang model anda "
"mirip seperti berikut::"

msgid ""
"After a deprecation period of your choosing (two or three feature releases "
"for fields in Django itself), change the ``system_check_deprecated_details`` "
"attribute to ``system_check_removed_details`` and update the dictionary "
"similar to::"
msgstr ""

msgid ""
"You should keep the field's methods that are required for it to operate in "
"database migrations such as ``__init__()``, ``deconstruct()``, and "
"``get_internal_type()``. Keep this stub field for as long as any migrations "
"which reference the field exist. For example, after squashing migrations and "
"removing the old ones, you should be able to remove the field completely."
msgstr ""

msgid "Data Migrations"
msgstr "Perpindahan Data"

msgid ""
"As well as changing the database schema, you can also use migrations to "
"change the data in the database itself, in conjunction with the schema if "
"you want."
msgstr ""

msgid ""
"Migrations that alter data are usually called \"data migrations\"; they're "
"best written as separate migrations, sitting alongside your schema "
"migrations."
msgstr ""

msgid ""
"Django can't automatically generate data migrations for you, as it does with "
"schema migrations, but it's not very hard to write them. Migration files in "
"Django are made up of :doc:`Operations </ref/migration-operations>`, and the "
"main operation you use for data migrations is :class:`~django.db.migrations."
"operations.RunPython`."
msgstr ""

msgid ""
"To start, make an empty migration file you can work from (Django will put "
"the file in the right place, suggest a name, and add dependencies for you)::"
msgstr ""

msgid "Then, open up the file; it should look something like this::"
msgstr "Lalu, buka berkas; dia seharusnya kelihatan sesuatu sepert ini::"

msgid ""
"Now, all you need to do is create a new function and have :class:`~django.db."
"migrations.operations.RunPython` use it. :class:`~django.db.migrations."
"operations.RunPython` expects a callable as its argument which takes two "
"arguments - the first is an :doc:`app registry </ref/applications/>` that "
"has the historical versions of all your models loaded into it to match where "
"in your history the migration sits, and the second is a :doc:`SchemaEditor </"
"ref/schema-editor>`, which you can use to manually effect database schema "
"changes (but beware, doing this can confuse the migration autodetector!)"
msgstr ""
"Sekarang, semua yang perlu anda lakukan adalah membuat sebuah fungsi baru "
"dan memiliki :class:`~django.db.migrations.operations.RunPython` "
"menggunakannya. :class:`~django.db.migrations.operations.RunPython` "
"mengharapkan sebuah callable sebagai argumennya yang mengambil dua argumen - "
"pertama adalah sebuah :doc:`app registry </ref/applications/>` yang "
"mempunyai versi riwayat dari semua model anda dimuat kedalam itu untuk "
"mencocokkan dimana riwayat perpindahan anda berada, dan kedua adalah :doc:"
"`SchemaEditor </ref/schema-editor>`, yang dapat menggunakan secara manual "
"mempengaruhi perubahan skema basisdata (tetapi hati-hati, melakukan ini "
"dapat membingungkan pengenal otomatis perpindahan!)"

msgid ""
"Let's write a migration that populates our new ``name`` field with the "
"combined values of ``first_name`` and ``last_name`` (we've come to our "
"senses and realized that not everyone has first and last names). All we need "
"to do is use the historical model and iterate over the rows::"
msgstr ""

msgid ""
"Once that's done, we can run ``python manage.py migrate`` as normal and the "
"data migration will run in place alongside other migrations."
msgstr ""

msgid ""
"You can pass a second callable to :class:`~django.db.migrations.operations."
"RunPython` to run whatever logic you want executed when migrating backwards. "
"If this callable is omitted, migrating backwards will raise an exception."
msgstr ""

msgid "Accessing models from other apps"
msgstr "Mengakses model dari aplikasi lain"

msgid ""
"When writing a ``RunPython`` function that uses models from apps other than "
"the one in which the migration is located, the migration's ``dependencies`` "
"attribute should include the latest migration of each app that is involved, "
"otherwise you may get an error similar to: ``LookupError: No installed app "
"with label 'myappname'`` when you try to retrieve the model in the "
"``RunPython`` function using ``apps.get_model()``."
msgstr ""

msgid ""
"In the following example, we have a migration in ``app1`` which needs to use "
"models in ``app2``. We aren't concerned with the details of ``move_m1`` "
"other than the fact it will need to access models from both apps. Therefore "
"we've added a dependency that specifies the last migration of ``app2``::"
msgstr ""

msgid "More advanced migrations"
msgstr "Perpindahan lebih lanjut"

msgid ""
"If you're interested in the more advanced migration operations, or want to "
"be able to write your own, see the :doc:`migration operations reference </"
"ref/migration-operations>` and the \"how-to\" on :doc:`writing migrations </"
"howto/writing-migrations>`."
msgstr ""

msgid "Squashing migrations"
msgstr "Menginjak perpindahan"

msgid ""
"You are encouraged to make migrations freely and not worry about how many "
"you have; the migration code is optimized to deal with hundreds at a time "
"without much slowdown. However, eventually you will want to move back from "
"having several hundred migrations to just a few, and that's where squashing "
"comes in."
msgstr ""

msgid ""
"Squashing is the act of reducing an existing set of many migrations down to "
"one (or sometimes a few) migrations which still represent the same changes."
msgstr ""

msgid ""
"Django does this by taking all of your existing migrations, extracting their "
"``Operation``\\s and putting them all in sequence, and then running an "
"optimizer over them to try and reduce the length of the list - for example, "
"it knows that :class:`~django.db.migrations.operations.CreateModel` and :"
"class:`~django.db.migrations.operations.DeleteModel` cancel each other out, "
"and it knows that :class:`~django.db.migrations.operations.AddField` can be "
"rolled into :class:`~django.db.migrations.operations.CreateModel`."
msgstr ""

msgid ""
"Once the operation sequence has been reduced as much as possible - the "
"amount possible depends on how closely intertwined your models are and if "
"you have any :class:`~django.db.migrations.operations.RunSQL` or :class:"
"`~django.db.migrations.operations.RunPython` operations (which can't be "
"optimized through unless they are marked as ``elidable``) - Django will then "
"write it back out into a new set of migration files."
msgstr ""

msgid ""
"These files are marked to say they replace the previously-squashed "
"migrations, so they can coexist with the old migration files, and Django "
"will intelligently switch between them depending where you are in the "
"history. If you're still part-way through the set of migrations that you "
"squashed, it will keep using them until it hits the end and then switch to "
"the squashed history, while new installs will use the new squashed migration "
"and skip all the old ones."
msgstr ""

msgid ""
"This enables you to squash and not mess up systems currently in production "
"that aren't fully up-to-date yet. The recommended process is to squash, "
"keeping the old files, commit and release, wait until all systems are "
"upgraded with the new release (or if you're a third-party project, ensure "
"your users upgrade releases in order without skipping any), and then remove "
"the old files, commit and do a second release."
msgstr ""

msgid ""
"The command that backs all this is :djadmin:`squashmigrations` - pass it the "
"app label and migration name you want to squash up to, and it'll get to "
"work::"
msgstr ""

msgid ""
"Use the :option:`squashmigrations --squashed-name` option if you want to set "
"the name of the squashed migration rather than use an autogenerated one."
msgstr ""

msgid ""
"Note that model interdependencies in Django can get very complex, and "
"squashing may result in migrations that do not run; either mis-optimized (in "
"which case you can try again with ``--no-optimize``, though you should also "
"report an issue), or with a ``CircularDependencyError``, in which case you "
"can manually resolve it."
msgstr ""

msgid ""
"To manually resolve a ``CircularDependencyError``, break out one of the "
"ForeignKeys in the circular dependency loop into a separate migration, and "
"move the dependency on the other app with it. If you're unsure, see how :"
"djadmin:`makemigrations` deals with the problem when asked to create brand "
"new migrations from your models. In a future release of Django, :djadmin:"
"`squashmigrations` will be updated to attempt to resolve these errors itself."
msgstr ""

msgid ""
"Once you've squashed your migration, you should then commit it alongside the "
"migrations it replaces and distribute this change to all running instances "
"of your application, making sure that they run ``migrate`` to store the "
"change in their database."
msgstr ""

msgid ""
"You must then transition the squashed migration to a normal migration by:"
msgstr ""

msgid "Deleting all the migration files it replaces."
msgstr "Menghapus semua berkas perpindahan yang diganti"

msgid ""
"Updating all migrations that depend on the deleted migrations to depend on "
"the squashed migration instead."
msgstr ""

msgid ""
"Removing the ``replaces`` attribute in the ``Migration`` class of the "
"squashed migration (this is how Django tells that it is a squashed "
"migration)."
msgstr ""

msgid ""
"Once you've squashed a migration, you should not then re-squash that "
"squashed migration until you have fully transitioned it to a normal "
"migration."
msgstr ""

msgid "Serializing values"
msgstr ""

msgid ""
"Migrations are Python files containing the old definitions of your models - "
"thus, to write them, Django must take the current state of your models and "
"serialize them out into a file."
msgstr ""

msgid ""
"While Django can serialize most things, there are some things that we just "
"can't serialize out into a valid Python representation - there's no Python "
"standard for how a value can be turned back into code (``repr()`` only works "
"for basic values, and doesn't specify import paths)."
msgstr ""

msgid "Django can serialize the following:"
msgstr ""

msgid ""
"``int``, ``float``, ``bool``, ``str``, ``bytes``, ``None``, ``NoneType``"
msgstr ""
"``int``, ``float``, ``bool``, ``str``, ``bytes``, ``None``, ``NoneType``"

msgid "``list``, ``set``, ``tuple``, ``dict``, ``range``."
msgstr "``list``, ``set``, ``tuple``, ``dict``, ``range``."

msgid ""
"``datetime.date``, ``datetime.time``, and ``datetime.datetime`` instances "
"(include those that are timezone-aware)"
msgstr ""
"Instance ``datetime.date``, ``datetime.time``, dan ``datetime.datetime`` "
"(termasuk itu yang menyadari zona waktu)"

msgid "``decimal.Decimal`` instances"
msgstr "Instance ``decimal.Decimal``"

msgid "``enum.Enum`` instances"
msgstr "Instance ``enum.Enum``"

msgid "``uuid.UUID`` instances"
msgstr "Instance ``uuid.UUID``"

msgid ""
":func:`functools.partial` and :class:`functools.partialmethod` instances "
"which have serializable ``func``, ``args``, and ``keywords`` values."
msgstr ""

msgid ""
"Pure and concrete path objects from :mod:`pathlib`. Concrete paths are "
"converted to their pure path equivalent, e.g. :class:`pathlib.PosixPath` to :"
"class:`pathlib.PurePosixPath`."
msgstr ""

msgid ""
":class:`os.PathLike` instances, e.g. :class:`os.DirEntry`, which are "
"converted to ``str`` or ``bytes`` using :func:`os.fspath`."
msgstr ""

msgid "``LazyObject`` instances which wrap a serializable value."
msgstr ""

msgid ""
"Enumeration types (e.g. ``TextChoices`` or ``IntegerChoices``) instances."
msgstr ""

msgid "Any Django field"
msgstr "Bidang Django Apapun"

msgid ""
"Any function or method reference (e.g. ``datetime.datetime.today``) (must be "
"in module's top-level scope)"
msgstr ""

msgid "Unbound methods used from within the class body"
msgstr ""

msgid "Any class reference (must be in module's top-level scope)"
msgstr ""

msgid ""
"Anything with a custom ``deconstruct()`` method (:ref:`see below <custom-"
"deconstruct-method>`)"
msgstr ""

msgid ""
"Serialization support for pure and concrete path objects from :mod:"
"`pathlib`, and :class:`os.PathLike` instances was added."
msgstr ""

msgid "Django cannot serialize:"
msgstr "Django tidak dapat diserialkan:"

msgid "Nested classes"
msgstr "Kelas bersarang"

msgid "Arbitrary class instances (e.g. ``MyClass(4.3, 5.7)``)"
msgstr ""

msgid "Lambdas"
msgstr "Lambdas"

msgid "Custom serializers"
msgstr ""

msgid ""
"You can serialize other types by writing a custom serializer. For example, "
"if Django didn't serialize :class:`~decimal.Decimal` by default, you could "
"do this::"
msgstr ""

msgid ""
"The first argument of ``MigrationWriter.register_serializer()`` is a type or "
"iterable of types that should use the serializer."
msgstr ""

msgid ""
"The ``serialize()`` method of your serializer must return a string of how "
"the value should appear in migrations and a set of any imports that are "
"needed in the migration."
msgstr ""

msgid "Adding a ``deconstruct()`` method"
msgstr "Menambahkan cara ``deconstruct()`` "

msgid ""
"You can let Django serialize your own custom class instances by giving the "
"class a ``deconstruct()`` method. It takes no arguments, and should return a "
"tuple of three things ``(path, args, kwargs)``:"
msgstr ""

msgid ""
"``path`` should be the Python path to the class, with the class name "
"included as the last part (for example, ``myapp.custom_things.MyClass``). If "
"your class is not available at the top level of a module it is not "
"serializable."
msgstr ""

msgid ""
"``args`` should be a list of positional arguments to pass to your class' "
"``__init__`` method. Everything in this list should itself be serializable."
msgstr ""

msgid ""
"``kwargs`` should be a dict of keyword arguments to pass to your class' "
"``__init__`` method. Every value should itself be serializable."
msgstr ""

msgid ""
"This return value is different from the ``deconstruct()`` method :ref:`for "
"custom fields <custom-field-deconstruct-method>` which returns a tuple of "
"four items."
msgstr ""

msgid ""
"Django will write out the value as an instantiation of your class with the "
"given arguments, similar to the way it writes out references to Django "
"fields."
msgstr ""

msgid ""
"To prevent a new migration from being created each time :djadmin:"
"`makemigrations` is run, you should also add a ``__eq__()`` method to the "
"decorated class. This function will be called by Django's migration "
"framework to detect changes between states."
msgstr ""

msgid ""
"As long as all of the arguments to your class' constructor are themselves "
"serializable, you can use the ``@deconstructible`` class decorator from "
"``django.utils.deconstruct`` to add the ``deconstruct()`` method::"
msgstr ""

msgid ""
"The decorator adds logic to capture and preserve the arguments on their way "
"into your constructor, and then returns those arguments exactly when "
"deconstruct() is called."
msgstr ""

msgid "Supporting multiple Django versions"
msgstr "Mendukung banyak versi Django"

msgid ""
"If you are the maintainer of a third-party app with models, you may need to "
"ship migrations that support multiple Django versions. In this case, you "
"should always run :djadmin:`makemigrations` **with the lowest Django version "
"you wish to support**."
msgstr ""

msgid ""
"The migrations system will maintain backwards-compatibility according to the "
"same policy as the rest of Django, so migration files generated on Django X."
"Y should run unchanged on Django X.Y+1. The migrations system does not "
"promise forwards-compatibility, however. New features may be added, and "
"migration files generated with newer versions of Django may not work on "
"older versions."
msgstr ""

msgid ":doc:`The Migrations Operations Reference </ref/migration-operations>`"
msgstr ":doc:`The Migrations Operations Reference 1`"

msgid ""
"Covers the schema operations API, special operations, and writing your own "
"operations."
msgstr ""
"Menutupi skema API tindakan, tindakan khusus, dan menulis tindakan anda "
"sendiri."

msgid ":doc:`The Writing Migrations \"how-to\" </howto/writing-migrations>`"
msgstr ":doc:`Menulis Perpindahan \"how-to\" </howto/writing-migrations>`"

msgid ""
"Explains how to structure and write database migrations for different "
"scenarios you might encounter."
msgstr ""

msgid "Pagination"
msgstr "Halaman"

msgid ""
"Django provides high-level and low-level ways to help you manage paginated "
"data -- that is, data that's split across several pages, with \"Previous/Next"
"\" links."
msgstr ""

msgid "The ``Paginator`` class"
msgstr "Kelas ``Paginator``"

msgid ""
"Under the hood, all methods of pagination use the :class:`~django.core."
"paginator.Paginator` class. It does all the heavy lifting of actually "
"splitting a ``QuerySet`` into :class:`~django.core.paginator.Page` objects."
msgstr ""

msgid ""
"Give :class:`~django.core.paginator.Paginator` a list of objects, plus the "
"number of items you'd like to have on each page, and it gives you methods "
"for accessing the items for each page::"
msgstr ""

msgid ""
"Note that you can give ``Paginator`` a list/tuple, a Django ``QuerySet``, or "
"any other object with a ``count()`` or ``__len__()`` method. When "
"determining the number of objects contained in the passed object, "
"``Paginator`` will first try calling ``count()``, then fallback to using "
"``len()`` if the passed object has no ``count()`` method. This allows "
"objects such as Django's ``QuerySet`` to use a more efficient ``count()`` "
"method when available."
msgstr ""

msgid "Paginating a ``ListView``"
msgstr ""

msgid ""
":class:`django.views.generic.list.ListView` provides a builtin way to "
"paginate the displayed list. You can do this by adding a :attr:`~django."
"views.generic.list.MultipleObjectMixin.paginate_by` attribute to your view "
"class, for example::"
msgstr ""

msgid ""
"This limits the number of objects per page and adds a ``paginator`` and "
"``page_obj`` to the ``context``. To allow your users to navigate between "
"pages, add links to the next and previous page, in your template like this:"
msgstr ""

msgid "Using ``Paginator`` in a view function"
msgstr ""

msgid ""
"Here's an example using :class:`~django.core.paginator.Paginator` in a view "
"function to paginate a queryset::"
msgstr ""

msgid ""
"In the template :file:`list.html`, you can include navigation between pages "
"in the same way as in the template for the ``ListView`` above."
msgstr ""

msgid "Performance and optimization"
msgstr "Penampilan dan optimalisasi"

msgid ""
"This document provides an overview of techniques and tools that can help get "
"your Django code running more efficiently - faster, and using fewer system "
"resources."
msgstr ""

msgid ""
"Generally one's first concern is to write code that *works*, whose logic "
"functions as required to produce the expected output. Sometimes, however, "
"this will not be enough to make the code work as *efficiently* as one would "
"like."
msgstr ""

msgid ""
"In this case, what's needed is something - and in practice, often a "
"collection of things - to improve the code's performance without, or only "
"minimally, affecting its behavior."
msgstr ""

msgid "General approaches"
msgstr "Pendekatan umum"

msgid "What are you optimizing *for*?"
msgstr ""

msgid ""
"It's important to have a clear idea what you mean by 'performance'. There is "
"not just one metric of it."
msgstr ""

msgid ""
"Improved speed might be the most obvious aim for a program, but sometimes "
"other performance improvements might be sought, such as lower memory "
"consumption or fewer demands on the database or network."
msgstr ""

msgid ""
"Improvements in one area will often bring about improved performance in "
"another, but not always; sometimes one can even be at the expense of "
"another. For example, an improvement in a program's speed might cause it to "
"use more memory. Even worse, it can be self-defeating - if the speed "
"improvement is so memory-hungry that the system starts to run out of memory, "
"you'll have done more harm than good."
msgstr ""

msgid ""
"There are other trade-offs to bear in mind. Your own time is a valuable "
"resource, more precious than CPU time. Some improvements might be too "
"difficult to be worth implementing, or might affect the portability or "
"maintainability of the code. Not all performance improvements are worth the "
"effort."
msgstr ""

msgid ""
"So, you need to know what performance improvements you are aiming for, and "
"you also need to know that you have a good reason for aiming in that "
"direction - and for that you need:"
msgstr ""

msgid "Performance benchmarking"
msgstr "Penampilan pembandingan"

msgid ""
"It's no good just guessing or assuming where the inefficiencies lie in your "
"code."
msgstr ""

msgid "Django tools"
msgstr "Alat-alat Django"

msgid ""
"`django-debug-toolbar <https://github.com/jazzband/django-debug-toolbar/>`_ "
"is a very handy tool that provides insights into what your code is doing and "
"how much time it spends doing it. In particular it can show you all the SQL "
"queries your page is generating, and how long each one has taken."
msgstr ""

msgid ""
"Third-party panels are also available for the toolbar, that can (for "
"example) report on cache performance and template rendering times."
msgstr ""

msgid "Third-party services"
msgstr "Layanan pihak-ketiga"

msgid ""
"There are a number of free services that will analyze and report on the "
"performance of your site's pages from the perspective of a remote HTTP "
"client, in effect simulating the experience of an actual user."
msgstr ""

msgid ""
"These can't report on the internals of your code, but can provide a useful "
"insight into your site's overall performance, including aspects that can't "
"be adequately measured from within Django environment. Examples include:"
msgstr ""

msgid "`Yahoo's Yslow <http://yslow.org/>`_"
msgstr "`Yahoo's Yslow <http://yslow.org/>`_"

msgid "`Google PageSpeed <https://developers.google.com/speed/>`_"
msgstr "`Google PageSpeed <https://developers.google.com/speed/>`_"

msgid ""
"There are also several paid-for services that perform a similar analysis, "
"including some that are Django-aware and can integrate with your codebase to "
"profile its performance far more comprehensively."
msgstr ""

msgid "Get things right from the start"
msgstr "Mendapatkan hal yang benar dari awal"

msgid ""
"Some work in optimization involves tackling performance shortcomings, but "
"some of the work can be built-in to what you'd do anyway, as part of the "
"good practices you should adopt even before you start thinking about "
"improving performance."
msgstr ""

msgid ""
"In this respect Python is an excellent language to work with, because "
"solutions that look elegant and feel right usually are the best performing "
"ones. As with most skills, learning what \"looks right\" takes practice, but "
"one of the most useful guidelines is:"
msgstr ""

msgid "Work at the appropriate level"
msgstr "Bekerja pada tingkatan sesuai"

msgid ""
"Django offers many different ways of approaching things, but just because "
"it's possible to do something in a certain way doesn't mean that it's the "
"most appropriate way to do it. For example, you might find that you could "
"calculate the same thing - the number of items in a collection, perhaps - in "
"a ``QuerySet``, in Python, or in a template."
msgstr ""

msgid ""
"However, it will almost always be faster to do this work at lower rather "
"than higher levels. At higher levels the system has to deal with objects "
"through multiple levels of abstraction and layers of machinery."
msgstr ""

msgid ""
"That is, the database can typically do things faster than Python can, which "
"can do them faster than the template language can::"
msgstr ""

msgid ""
"Generally speaking, the most appropriate level for the job is the lowest-"
"level one that it is comfortable to code for."
msgstr ""

msgid "The example above is merely illustrative."
msgstr "Contoh di atas hanyalah ilustrasi."

msgid ""
"Firstly, in a real-life case you need to consider what is happening before "
"and after your count to work out what's an optimal way of doing it *in that "
"particular context*. The database optimization documents describes :ref:`a "
"case where counting in the template would be better "
"<overuse_of_count_and_exists>`."
msgstr ""

msgid ""
"Secondly, there are other options to consider: in a real-life case, "
"``{{ my_bicycles.count }}``, which invokes the ``QuerySet`` ``count()`` "
"method directly from the template, might be the most appropriate choice."
msgstr ""

msgid ""
"Often it is expensive (that is, resource-hungry and slow) to compute a "
"value, so there can be huge benefit in saving the value to a quickly "
"accessible cache, ready for the next time it's required."
msgstr ""

msgid ""
"It's a sufficiently significant and powerful technique that Django includes "
"a comprehensive caching framework, as well as other smaller pieces of "
"caching functionality."
msgstr ""

msgid ":doc:`The caching framework </topics/cache>`"
msgstr ":doc:`The caching framework 1`"

msgid ""
"Django's :doc:`caching framework </topics/cache>` offers very significant "
"opportunities for performance gains, by saving dynamic content so that it "
"doesn't need to be calculated for each request."
msgstr ""

msgid ""
"For convenience, Django offers different levels of cache granularity: you "
"can cache the output of specific views, or only the pieces that are "
"difficult to produce, or even an entire site."
msgstr ""

msgid ""
"Implementing caching should not be regarded as an alternative to improving "
"code that's performing poorly because it has been written badly. It's one of "
"the final steps toward producing well-performing code, not a shortcut."
msgstr ""

msgid ":class:`~django.utils.functional.cached_property`"
msgstr ":class:`~django.utils.functional.cached_property`"

msgid ""
"It's common to have to call a class instance's method more than once. If "
"that function is expensive, then doing so can be wasteful."
msgstr ""

msgid ""
"Using the :class:`~django.utils.functional.cached_property` decorator saves "
"the value returned by a property; the next time the function is called on "
"that instance, it will return the saved value rather than re-computing it. "
"Note that this only works on methods that take ``self`` as their only "
"argument and that it changes the method to a property."
msgstr ""

msgid ""
"Certain Django components also have their own caching functionality; these "
"are discussed below in the sections related to those components."
msgstr ""

msgid "Understanding laziness"
msgstr "Memahami laziness"

msgid ""
"*Laziness* is a strategy complementary to caching. Caching avoids "
"recomputation by saving results; laziness delays computation until it's "
"actually required."
msgstr ""

msgid ""
"Laziness allows us to refer to things before they are instantiated, or even "
"before it's possible to instantiate them. This has numerous uses."
msgstr ""

msgid ""
"For example, :ref:`lazy translation <lazy-translations>` can be used before "
"the target language is even known, because it doesn't take place until the "
"translated string is actually required, such as in a rendered template."
msgstr ""

msgid ""
"Laziness is also a way to save effort by trying to avoid work in the first "
"place. That is, one aspect of laziness is not doing anything until it has to "
"be done, because it may not turn out to be necessary after all. Laziness can "
"therefore have performance implications, and the more expensive the work "
"concerned, the more there is to gain through laziness."
msgstr ""

msgid ""
"Python provides a number of tools for lazy evaluation, particularly through "
"the :py:term:`generator` and :py:term:`generator expression` constructs. "
"It's worth reading up on laziness in Python to discover opportunities for "
"making use of lazy patterns in your code."
msgstr ""

msgid "Laziness in Django"
msgstr "Laziness di Django"

msgid ""
"Django is itself quite lazy. A good example of this can be found in the "
"evaluation of ``QuerySets``. :ref:`QuerySets are lazy <querysets-are-lazy>`. "
"Thus a ``QuerySet`` can be created, passed around and combined with other "
"``QuerySets``, without actually incurring any trips to the database to fetch "
"the items it describes. What gets passed around is the ``QuerySet`` object, "
"not the collection of items that - eventually - will be required from the "
"database."
msgstr ""

msgid ""
"On the other hand, :ref:`certain operations will force the evaluation of a "
"QuerySet <when-querysets-are-evaluated>`. Avoiding the premature evaluation "
"of a ``QuerySet`` can save making an expensive and unnecessary trip to the "
"database."
msgstr ""
"Di sisi lain, t:ref:`certain operations will force the evaluation of a "
"QuerySet 1`. Mengindari penilaian sebelum waktunya dri ``QuerySet`` dapat "
"menyimpan membuat perjalanan mahal dan tidak diperlukan pada basisdata."

msgid ""
"Django also offers a :meth:`~django.utils.functional.keep_lazy` decorator. "
"This allows a function that has been called with a lazy argument to behave "
"lazily itself, only being evaluated when it needs to be. Thus the lazy "
"argument - which could be an expensive one - will not be called upon for "
"evaluation until it's strictly required."
msgstr ""
"Django juga menawarkan penghias :meth:`~django.utils.functional.keep_lazy`. "
"Ini mengizinkan sebuah fungsi yang telah dipanggil dengan argumen lazy untuk "
"berperilaku malas itu sendiri, hanya sedang dinilai ketika itu dibutuhkan. "
"Dengan demikian argumen lazy - yang dapat sangat mahal -  tidak akan "
"dipanggil untuk penilaian sampai itu semata-mata diperlukan. "

msgid "Databases"
msgstr "Basisdata"

msgid "Database optimization"
msgstr "Optimasi basisdata"

msgid ""
"Django's database layer provides various ways to help developers get the "
"best performance from their databases. The :doc:`database optimization "
"documentation </topics/db/optimization>` gathers together links to the "
"relevant documentation and adds various tips that outline the steps to take "
"when attempting to optimize your database usage."
msgstr ""

msgid "Other database-related tips"
msgstr ""

msgid ""
"Enabling :ref:`persistent-database-connections` can speed up connections to "
"the database accounts for a significant part of the request processing time."
msgstr ""

msgid ""
"This helps a lot on virtualized hosts with limited network performance, for "
"example."
msgstr ""

msgid "HTTP performance"
msgstr "Penampilan HTTP"

msgid ""
"Django comes with a few helpful pieces of :doc:`middleware </ref/"
"middleware>` that can help optimize your site's performance. They include:"
msgstr ""

msgid ":class:`~django.middleware.http.ConditionalGetMiddleware`"
msgstr ":class:`~django.middleware.http.ConditionalGetMiddleware`"

msgid ""
"Adds support for modern browsers to conditionally GET responses based on the "
"``ETag`` and ``Last-Modified`` headers. It also calculates and sets an ETag "
"if needed."
msgstr ""

msgid ":class:`~django.middleware.gzip.GZipMiddleware`"
msgstr ":class:`~django.middleware.gzip.GZipMiddleware`"

msgid ""
"Compresses responses for all modern browsers, saving bandwidth and transfer "
"time. Note that GZipMiddleware is currently considered a security risk, and "
"is vulnerable to attacks that nullify the protection provided by TLS/SSL. "
"See the warning in :class:`~django.middleware.gzip.GZipMiddleware` for more "
"information."
msgstr ""

msgid "Sessions"
msgstr "Sesi"

msgid ""
":ref:`Using cached sessions <cached-sessions-backend>` may be a way to "
"increase performance by eliminating the need to load session data from a "
"slower storage source like the database and instead storing frequently used "
"session data in memory."
msgstr ""

msgid "Static files"
msgstr "Berkas statis"

msgid ""
"Static files, which by definition are not dynamic, make an excellent target "
"for optimization gains."
msgstr ""

msgid ":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage`"
msgstr ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage`"

msgid ""
"By taking advantage of web browsers' caching abilities, you can eliminate "
"network hits entirely for a given file after the initial download."
msgstr ""

msgid ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` "
"appends a content-dependent tag to the filenames of :doc:`static files </ref/"
"contrib/staticfiles>` to make it safe for browsers to cache them long-term "
"without missing future changes - when a file changes, so will the tag, so "
"browsers will reload the asset automatically."
msgstr ""

msgid "\"Minification\""
msgstr "\"Minifikasi\""

msgid ""
"Several third-party Django tools and packages provide the ability to \"minify"
"\" HTML, CSS, and JavaScript. They remove unnecessary whitespace, newlines, "
"and comments, and shorten variable names, and thus reduce the size of the "
"documents that your site publishes."
msgstr ""
"Beberapa alat-alat pihak-ketiga Django dan peket-paket menyediakan kemampuan "
"untuk \"minify\" HTML, CSS, dan JavaScript. Mereka memindahkan ruang kosong "
"yang tidak diperlukan, baris baru, dan komentar, dan memperpendek nama-nama "
"variabel, dan mengurangi ukuran dari dokumen-dokumen yang situs anda "
"terbitkan."

msgid "Template performance"
msgstr "Penampilan cetakan"

msgid "Note that:"
msgstr "Catat bahwa:"

msgid "using ``{% block %}`` is faster than using ``{% include %}``"
msgstr ""
"menggunakan ``{% block %}`` lebih cepat daripada menggunakan ``{% include %}"
"``"

msgid ""
"heavily-fragmented templates, assembled from many small pieces, can affect "
"performance"
msgstr ""

msgid "The cached template loader"
msgstr ""

msgid ""
"Enabling the :class:`cached template loader <django.template.loaders.cached."
"Loader>` often improves performance drastically, as it avoids compiling each "
"template every time it needs to be rendered."
msgstr ""

msgid "Using different versions of available software"
msgstr "Menggunakan versi berbeda dari perangkat lunak tersedia"

msgid ""
"It can sometimes be worth checking whether different and better-performing "
"versions of the software that you're using are available."
msgstr ""

msgid ""
"These techniques are targeted at more advanced users who want to push the "
"boundaries of performance of an already well-optimized Django site."
msgstr ""

msgid ""
"However, they are not magic solutions to performance problems, and they're "
"unlikely to bring better than marginal gains to sites that don't already do "
"the more basic things the right way."
msgstr ""

msgid ""
"It's worth repeating: **reaching for alternatives to software you're already "
"using is never the first answer to performance problems**. When you reach "
"this level of optimization, you need a formal benchmarking solution."
msgstr ""

msgid "Newer is often - but not always - better"
msgstr "Terbaru adalah sering - tetapi tidak selalu - terbaik"

msgid ""
"It's fairly rare for a new release of well-maintained software to be less "
"efficient, but the maintainers can't anticipate every possible use-case - so "
"while being aware that newer versions are likely to perform better, don't "
"assume that they always will."
msgstr ""

msgid ""
"This is true of Django itself. Successive releases have offered a number of "
"improvements across the system, but you should still check the real-world "
"performance of your application, because in some cases you may find that "
"changes mean it performs worse rather than better."
msgstr ""

msgid ""
"Newer versions of Python, and also of Python packages, will often perform "
"better too - but measure, rather than assume."
msgstr ""

msgid ""
"Unless you've encountered an unusual performance problem in a particular "
"version, you'll generally find better features, reliability, and security in "
"a new release and that these benefits are far more significant than any "
"performance you might win or lose."
msgstr ""

msgid "Alternatives to Django's template language"
msgstr "Jalan lain ke bahasa cetakan Django"

msgid ""
"For nearly all cases, Django's built-in template language is perfectly "
"adequate. However, if the bottlenecks in your Django project seem to lie in "
"the template system and you have exhausted other opportunities to remedy "
"this, a third-party alternative may be the answer."
msgstr ""

msgid ""
"Jinja2_ can offer performance improvements, particularly when it comes to "
"speed."
msgstr ""

msgid ""
"Alternative template systems vary in the extent to which they share Django's "
"templating language."
msgstr ""

msgid ""
"*If* you experience performance issues in templates, the first thing to do "
"is to understand exactly why. Using an alternative template system may prove "
"faster, but the same gains may also be available without going to that "
"trouble - for example, expensive processing and logic in your templates "
"could be done more efficiently in your views."
msgstr ""

msgid "Alternative software implementations"
msgstr "Jalan lain penerapan perangkat lunak"

msgid ""
"It may be worth checking whether Python software you're using has been "
"provided in a different implementation that can execute the same code faster."
msgstr ""

msgid ""
"However: most performance problems in well-written Django sites aren't at "
"the Python execution level, but rather in inefficient database querying, "
"caching, and templates. If you're relying on poorly-written Python code, "
"your performance problems are unlikely to be solved by having it execute "
"faster."
msgstr ""

msgid ""
"Using an alternative implementation may introduce compatibility, deployment, "
"portability, or maintenance issues. It goes without saying that before "
"adopting a non-standard implementation you should ensure it provides "
"sufficient performance gains for your application to outweigh the potential "
"risks."
msgstr ""

msgid "With these caveats in mind, you should be aware of:"
msgstr ""

msgid "`PyPy <https://www.pypy.org/>`_"
msgstr "`PyPy <https://www.pypy.org/>`_"

msgid ""
"`PyPy <https://www.pypy.org/>`_ is an implementation of Python in Python "
"itself (the 'standard' Python implementation is in C). PyPy can offer "
"substantial performance gains, typically for heavyweight applications."
msgstr ""

msgid ""
"A key aim of the PyPy project is `compatibility <https://www.pypy.org/compat."
"html>`_ with existing Python APIs and libraries. Django is compatible, but "
"you will need to check the compatibility of other libraries you rely on."
msgstr ""

msgid "C implementations of Python libraries"
msgstr "C menerapkan pustaka Python"

msgid ""
"Some Python libraries are also implemented in C, and can be much faster. "
"They aim to offer the same APIs. Note that compatibility issues and behavior "
"differences are not unknown (and not always immediately evident)."
msgstr ""
"Beberapa pustaka Python juga menerapkan di C, dan dapat lebih cepat. Mereka "
"bermaksud menawarkan API sama. Catat bahwa masalah kesesuaian dan perbedaan "
"kebiasaan tidak diketahui (dan tidak selalu segera jelas)."

msgid "Security in Django"
msgstr "Kemananan di Django"

msgid ""
"This document is an overview of Django's security features. It includes "
"advice on securing a Django-powered site."
msgstr ""

msgid "Cross site scripting (XSS) protection"
msgstr "Perlindungan cross site scripting (XSS)"

msgid ""
"XSS attacks allow a user to inject client side scripts into the browsers of "
"other users. This is usually achieved by storing the malicious scripts in "
"the database where it will be retrieved and displayed to other users, or by "
"getting users to click a link which will cause the attacker's JavaScript to "
"be executed by the user's browser. However, XSS attacks can originate from "
"any untrusted source of data, such as cookies or web services, whenever the "
"data is not sufficiently sanitized before including in a page."
msgstr ""

msgid ""
"Using Django templates protects you against the majority of XSS attacks. "
"However, it is important to understand what protections it provides and its "
"limitations."
msgstr ""

msgid ""
"Django templates :ref:`escape specific characters <automatic-html-escaping>` "
"which are particularly dangerous to HTML. While this protects users from "
"most malicious input, it is not entirely foolproof. For example, it will not "
"protect the following:"
msgstr ""

msgid ""
"If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can "
"result in unauthorized JavaScript execution, depending on how the browser "
"renders imperfect HTML. (Quoting the attribute value would fix this case.)"
msgstr ""

msgid ""
"It is also important to be particularly careful when using ``is_safe`` with "
"custom template tags, the :tfilter:`safe` template tag, :mod:`mark_safe "
"<django.utils.safestring>`, and when autoescape is turned off."
msgstr ""

msgid ""
"In addition, if you are using the template system to output something other "
"than HTML, there may be entirely separate characters and words which require "
"escaping."
msgstr ""
"Sebagai tambahan, jika anda sedang menggunakan sistem cetakan untuk "
"mengeluarkan sesuatu selain dari HTML, mungkin seluruhnya memisahkan "
"karakter dan kata yang membutuhkan pelolosan."

msgid ""
"You should also be very careful when storing HTML in the database, "
"especially when that HTML is retrieved and displayed."
msgstr ""
"Anda juga harus berhati-hati ketika menyimpan HTML dalam basisdata, "
"khususnya ketika HTML diambil dan ditampilkan."

msgid "Cross site request forgery (CSRF) protection"
msgstr "Perlindungan cross site request forgery (CSRF)"

msgid ""
"CSRF attacks allow a malicious user to execute actions using the credentials "
"of another user without that user's knowledge or consent."
msgstr ""

msgid ""
"Django has built-in protection against most types of CSRF attacks, providing "
"you have :ref:`enabled and used it <using-csrf>` where appropriate. However, "
"as with any mitigation technique, there are limitations. For example, it is "
"possible to disable the CSRF module globally or for particular views. You "
"should only do this if you know what you are doing. There are other :ref:"
"`limitations <csrf-limitations>` if your site has subdomains that are "
"outside of your control."
msgstr ""

msgid ""
":ref:`CSRF protection works <how-csrf-works>` by checking for a secret in "
"each POST request. This ensures that a malicious user cannot \"replay\" a "
"form POST to your website and have another logged in user unwittingly submit "
"that form. The malicious user would have to know the secret, which is user "
"specific (using a cookie)."
msgstr ""

msgid ""
"When deployed with :ref:`HTTPS <security-recommendation-ssl>`, "
"``CsrfViewMiddleware`` will check that the HTTP referer header is set to a "
"URL on the same origin (including subdomain and port). Because HTTPS "
"provides additional security, it is imperative to ensure connections use "
"HTTPS where it is available by forwarding insecure connection requests and "
"using HSTS for supported browsers."
msgstr ""

msgid ""
"Be very careful with marking views with the ``csrf_exempt`` decorator unless "
"it is absolutely necessary."
msgstr ""
"Waspada dengan tampilan dengan penghias ``csrf_exempt`` meskipun itu mutlak "
"dibutuhkan."

msgid "SQL injection protection"
msgstr "Perlindungan penyisipan SQL"

msgid ""
"SQL injection is a type of attack where a malicious user is able to execute "
"arbitrary SQL code on a database. This can result in records being deleted "
"or data leakage."
msgstr ""

msgid ""
"Django's querysets are protected from SQL injection since their queries are "
"constructed using query parameterization. A query's SQL code is defined "
"separately from the query's parameters. Since parameters may be user-"
"provided and therefore unsafe, they are escaped by the underlying database "
"driver."
msgstr ""

msgid ""
"Django also gives developers power to write :ref:`raw queries <executing-raw-"
"queries>` or execute :ref:`custom sql <executing-custom-sql>`. These "
"capabilities should be used sparingly and you should always be careful to "
"properly escape any parameters that the user can control. In addition, you "
"should exercise caution when using :meth:`~django.db.models.query.QuerySet."
"extra` and :class:`~django.db.models.expressions.RawSQL`."
msgstr ""

msgid "Clickjacking protection"
msgstr "Perlindungan clickjacking "

msgid ""
"Clickjacking is a type of attack where a malicious site wraps another site "
"in a frame. This attack can result in an unsuspecting user being tricked "
"into performing unintended actions on the target site."
msgstr ""

msgid ""
"Django contains :ref:`clickjacking protection <clickjacking-prevention>` in "
"the form of the :mod:`X-Frame-Options middleware <django.middleware."
"clickjacking.XFrameOptionsMiddleware>` which in a supporting browser can "
"prevent a site from being rendered inside a frame. It is possible to disable "
"the protection on a per view basis or to configure the exact header value "
"sent."
msgstr ""

msgid ""
"The middleware is strongly recommended for any site that does not need to "
"have its pages wrapped in a frame by third party sites, or only needs to "
"allow that for a small section of the site."
msgstr ""

msgid "SSL/HTTPS"
msgstr "SSL/HTTPS"

msgid ""
"It is always better for security to deploy your site behind HTTPS. Without "
"this, it is possible for malicious network users to sniff authentication "
"credentials or any other information transferred between client and server, "
"and in some cases -- **active** network attackers -- to alter data that is "
"sent in either direction."
msgstr ""

msgid ""
"If you want the protection that HTTPS provides, and have enabled it on your "
"server, there are some additional steps you may need:"
msgstr ""

msgid ""
"If necessary, set :setting:`SECURE_PROXY_SSL_HEADER`, ensuring that you have "
"understood the warnings there thoroughly. Failure to do this can result in "
"CSRF vulnerabilities, and failure to do it correctly can also be dangerous!"
msgstr ""

msgid ""
"Set :setting:`SECURE_SSL_REDIRECT` to ``True``, so that requests over HTTP "
"are redirected to HTTPS."
msgstr ""

msgid ""
"Please note the caveats under :setting:`SECURE_PROXY_SSL_HEADER`. For the "
"case of a reverse proxy, it may be easier or more secure to configure the "
"main web server to do the redirect to HTTPS."
msgstr ""

msgid "Use 'secure' cookies."
msgstr "Gunakan 'secure' cookie"

msgid ""
"If a browser connects initially via HTTP, which is the default for most "
"browsers, it is possible for existing cookies to be leaked. For this reason, "
"you should set your :setting:`SESSION_COOKIE_SECURE` and :setting:"
"`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser to "
"only send these cookies over HTTPS connections. Note that this will mean "
"that sessions will not work over HTTP, and the CSRF protection will prevent "
"any POST data being accepted over HTTP (which will be fine if you are "
"redirecting all HTTP traffic to HTTPS)."
msgstr ""

msgid "Use :ref:`http-strict-transport-security` (HSTS)"
msgstr "Gunakan :ref:`http-strict-transport-security` (HSTS)"

msgid ""
"HSTS is an HTTP header that informs a browser that all future connections to "
"a particular site should always use HTTPS. Combined with redirecting "
"requests over HTTP to HTTPS, this will ensure that connections always enjoy "
"the added security of SSL provided one successful connection has occurred. "
"HSTS may either be configured with :setting:`SECURE_HSTS_SECONDS`, :setting:"
"`SECURE_HSTS_INCLUDE_SUBDOMAINS`, and :setting:`SECURE_HSTS_PRELOAD`, or on "
"the web server."
msgstr ""

msgid "Host header validation"
msgstr ""

msgid ""
"Django uses the ``Host`` header provided by the client to construct URLs in "
"certain cases. While these values are sanitized to prevent Cross Site "
"Scripting attacks, a fake ``Host`` value can be used for Cross-Site Request "
"Forgery, cache poisoning attacks, and poisoning links in emails."
msgstr ""

msgid ""
"Because even seemingly-secure web server configurations are susceptible to "
"fake ``Host`` headers, Django validates ``Host`` headers against the :"
"setting:`ALLOWED_HOSTS` setting in the :meth:`django.http.HttpRequest."
"get_host()` method."
msgstr ""

msgid ""
"This validation only applies via :meth:`~django.http.HttpRequest."
"get_host()`; if your code accesses the ``Host`` header directly from "
"``request.META`` you are bypassing this security protection."
msgstr ""

msgid "For more details see the full :setting:`ALLOWED_HOSTS` documentation."
msgstr "Untuk lebih rinci lihat dokumentasi penuh :setting:`ALLOWED_HOSTS`."

msgid ""
"Previous versions of this document recommended configuring your web server "
"to ensure it validates incoming HTTP ``Host`` headers. While this is still "
"recommended, in many common web servers a configuration that seems to "
"validate the ``Host`` header may not in fact do so. For instance, even if "
"Apache is configured such that your Django site is served from a non-default "
"virtual host with the ``ServerName`` set, it is still possible for an HTTP "
"request to match this virtual host and supply a fake ``Host`` header. Thus, "
"Django now requires that you set :setting:`ALLOWED_HOSTS` explicitly rather "
"than relying on web server configuration."
msgstr ""

msgid ""
"Additionally, Django requires you to explicitly enable support for the ``X-"
"Forwarded-Host`` header (via the :setting:`USE_X_FORWARDED_HOST` setting) if "
"your configuration requires it."
msgstr ""

msgid "Referrer policy"
msgstr ""

msgid ""
"Browsers use the ``Referer`` header as a way to send information to a site "
"about how users got there. By setting a *Referrer Policy* you can help to "
"protect the privacy of your users, restricting under which circumstances the "
"``Referer`` header is set. See :ref:`the referrer policy section of the "
"security middleware reference <referrer-policy>` for details."
msgstr ""

msgid "Cross-origin opener policy"
msgstr ""

msgid ""
"The cross-origin opener policy (COOP) header allows browsers to isolate a "
"top-level window from other documents by putting them in a different context "
"group so that they cannot directly interact with the top-level window. If a "
"document protected by COOP opens a cross-origin popup window, the popup’s "
"``window.opener`` property will be ``null``. COOP protects against cross-"
"origin attacks. See :ref:`the cross-origin opener policy section of the "
"security middleware reference <cross-origin-opener-policy>` for details."
msgstr ""

msgid ""
"Similar to the :ref:`CSRF limitations <csrf-limitations>` requiring a site "
"to be deployed such that untrusted users don't have access to any "
"subdomains, :mod:`django.contrib.sessions` also has limitations. See :ref:"
"`the session topic guide section on security <topics-session-security>` for "
"details."
msgstr ""

msgid "User-uploaded content"
msgstr ""

msgid ""
"Consider :ref:`serving static files from a cloud service or CDN <staticfiles-"
"from-cdn>` to avoid some of these issues."
msgstr ""

msgid ""
"If your site accepts file uploads, it is strongly advised that you limit "
"these uploads in your web server configuration to a reasonable size in order "
"to prevent denial of service (DOS) attacks. In Apache, this can be easily "
"set using the LimitRequestBody_ directive."
msgstr ""

msgid ""
"If you are serving your own static files, be sure that handlers like "
"Apache's ``mod_php``, which would execute static files as code, are "
"disabled. You don't want users to be able to execute arbitrary code by "
"uploading and requesting a specially crafted file."
msgstr ""

msgid ""
"Django's media upload handling poses some vulnerabilities when that media is "
"served in ways that do not follow security best practices. Specifically, an "
"HTML file can be uploaded as an image if that file contains a valid PNG "
"header followed by malicious HTML. This file will pass verification of the "
"library that Django uses for :class:`~django.db.models.ImageField` image "
"processing (Pillow). When this file is subsequently displayed to a user, it "
"may be displayed as HTML depending on the type and configuration of your web "
"server."
msgstr ""

msgid ""
"No bulletproof technical solution exists at the framework level to safely "
"validate all user uploaded file content, however, there are some other steps "
"you can take to mitigate these attacks:"
msgstr ""

msgid ""
"One class of attacks can be prevented by always serving user uploaded "
"content from a distinct top-level or second-level domain. This prevents any "
"exploit blocked by `same-origin policy`_ protections such as cross site "
"scripting. For example, if your site runs on ``example.com``, you would want "
"to serve uploaded content (the :setting:`MEDIA_URL` setting) from something "
"like ``usercontent-example.com``. It's *not* sufficient to serve content "
"from a subdomain like ``usercontent.example.com``."
msgstr ""

msgid ""
"Beyond this, applications may choose to define a list of allowable file "
"extensions for user uploaded files and configure the web server to only "
"serve such files."
msgstr ""

msgid "Additional security topics"
msgstr "Topik keamanan tambahan"

msgid ""
"While Django provides good security protection out of the box, it is still "
"important to properly deploy your application and take advantage of the "
"security protection of the web server, operating system and other components."
msgstr ""

msgid ""
"Make sure that your Python code is outside of the web server's root. This "
"will ensure that your Python code is not accidentally served as plain text "
"(or accidentally executed)."
msgstr ""

msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""
"Hati-hati dengan :ref:`user uploaded files <file-upload-security>` apapun."

msgid ""
"Django does not throttle requests to authenticate users. To protect against "
"brute-force attacks against the authentication system, you may consider "
"deploying a Django plugin or web server module to throttle these requests."
msgstr ""

msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr "Jaga :setting:`SECRET_KEY` anda sebuah rahasia."

msgid ""
"It is a good idea to limit the accessibility of your caching system and "
"database using a firewall."
msgstr ""
"Itu adalah ide bagus untuk membatasi kemampuan akses dari sistem cache anda "
"dan basisdata menggunakan sebuah dinding api."

msgid ""
"Take a look at the Open Web Application Security Project (OWASP) `Top 10 "
"list`_ which identifies some common vulnerabilities in web applications. "
"While Django has tools to address some of the issues, other issues must be "
"accounted for in the design of your project."
msgstr ""

msgid ""
"Mozilla discusses various topics regarding `web security`_. Their pages also "
"include security principles that apply to any system."
msgstr ""

msgid "Serializing Django objects"
msgstr "Menserialkan obyek-obyek Django"

msgid ""
"Django's serialization framework provides a mechanism for \"translating\" "
"Django models into other formats. Usually these other formats will be text-"
"based and used for sending Django data over a wire, but it's possible for a "
"serializer to handle any format (text-based or not)."
msgstr ""

msgid ""
"If you just want to get some data from your tables into a serialized form, "
"you could use the :djadmin:`dumpdata` management command."
msgstr ""
"Jika anda hanya ingin mendapatkan beberapa data dari tabel-tabel anda "
"kedalam bentuk terserial, anda dapat menggunakan perintah pengelolaan :"
"djadmin:`dumpdata`."

msgid "Serializing data"
msgstr "Menserialkan data"

msgid "At the highest level, you can serialize data like this::"
msgstr ""

msgid ""
"The arguments to the ``serialize`` function are the format to serialize the "
"data to (see `Serialization formats`_) and a :class:`~django.db.models.query."
"QuerySet` to serialize. (Actually, the second argument can be any iterator "
"that yields Django model instances, but it'll almost always be a QuerySet)."
msgstr ""

msgid "You can also use a serializer object directly::"
msgstr "Anda dapat juga menserialkan obyek langsung::"

msgid ""
"This is useful if you want to serialize data directly to a file-like object "
"(which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""
"Ini sangat berguna jika anda ingin menserialkan data langsung ke obyek "
"seperti-berkas (yang menyertakan sebuah :class:`~django.http.HttpResponse`)::"

msgid ""
"Calling :func:`~django.core.serializers.get_serializer` with an unknown :ref:"
"`format <serialization-formats>` will raise a ``django.core.serializers."
"SerializerDoesNotExist`` exception."
msgstr ""
"Memanggil :func:`~django.core.serializers.get_serializer` dengan :ref:"
"`format 1` yang tidak diketahui akan memunculkan pengecualian ``django.core."
"serializers.SerializerDoesNotExist``."

msgid "Subset of fields"
msgstr "Subkumpulan dari bidang-bidang"

msgid ""
"If you only want a subset of fields to be serialized, you can specify a "
"``fields`` argument to the serializer::"
msgstr ""
"Jika anda hanya ingin subkumpulan dari bidang-bidang untuk diserialkan, anda "
"dapat menentukan argumen ``fields`` pada penserial::"

msgid ""
"In this example, only the ``name`` and ``size`` attributes of each model "
"will be serialized. The primary key is always serialized as the ``pk`` "
"element in the resulting output; it never appears in the ``fields`` part."
msgstr ""

msgid ""
"Depending on your model, you may find that it is not possible to deserialize "
"a model that only serializes a subset of its fields. If a serialized object "
"doesn't specify all the fields that are required by a model, the "
"deserializer will not be able to save deserialized instances."
msgstr ""

msgid "Inherited models"
msgstr "Model yang diwarisi"

msgid ""
"If you have a model that is defined using an :ref:`abstract base class "
"<abstract-base-classes>`, you don't have to do anything special to serialize "
"that model. Call the serializer on the object (or objects) that you want to "
"serialize, and the output will be a complete representation of the "
"serialized object."
msgstr ""

msgid ""
"However, if you have a model that uses :ref:`multi-table inheritance <multi-"
"table-inheritance>`, you also need to serialize all of the base classes for "
"the model. This is because only the fields that are locally defined on the "
"model will be serialized. For example, consider the following models::"
msgstr ""

msgid "If you only serialize the Restaurant model::"
msgstr "Jika anda hanya menserialkan model Restaurant::"

msgid ""
"the fields on the serialized output will only contain the "
"``serves_hot_dogs`` attribute. The ``name`` attribute of the base class will "
"be ignored."
msgstr ""

msgid ""
"In order to fully serialize your ``Restaurant`` instances, you will need to "
"serialize the ``Place`` models as well::"
msgstr ""

msgid "Deserializing data"
msgstr "Deserialisasi data"

msgid "Deserializing data is very similar to serializing it::"
msgstr ""

msgid ""
"As you can see, the ``deserialize`` function takes the same format argument "
"as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""
"Seperti anda dapat lihat, fungsi ``deserialize`` mengambil bentuk argumen "
"sala seperti ``serialize``, sebuah string atau aliran data, dan "
"mengembalikan sebuah perulangan."

msgid ""
"However, here it gets slightly complicated. The objects returned by the "
"``deserialize`` iterator *aren't* regular Django objects. Instead, they are "
"special ``DeserializedObject`` instances that wrap a created -- but unsaved "
"-- object and any associated relationship data."
msgstr ""

msgid "Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr "Memanggil ``DeserializedObject.save()`` menyimpan obyek ke basisdata."

msgid ""
"If the ``pk`` attribute in the serialized data doesn't exist or is null, a "
"new instance will be saved to the database."
msgstr ""

msgid ""
"This ensures that deserializing is a non-destructive operation even if the "
"data in your serialized representation doesn't match what's currently in the "
"database. Usually, working with these ``DeserializedObject`` instances looks "
"something like::"
msgstr ""

msgid ""
"In other words, the usual use is to examine the deserialized objects to make "
"sure that they are \"appropriate\" for saving before doing so. If you trust "
"your data source you can instead save the object directly and move on."
msgstr ""

msgid ""
"The Django object itself can be inspected as ``deserialized_object.object``. "
"If fields in the serialized data do not exist on a model, a "
"``DeserializationError`` will be raised unless the ``ignorenonexistent`` "
"argument is passed in as ``True``::"
msgstr ""

msgid "Serialization formats"
msgstr "Bentuk-bentuk serialisasi"

msgid ""
"Django supports a number of serialization formats, some of which require you "
"to install third-party Python modules:"
msgstr ""
"Django mendukung sejumlah bentuk serialisasi, beberapa yang membutuhkan anda "
"memasang modul Python pihak-ketiga:"

msgid "Identifier"
msgstr "Penciri"

msgid "Information"
msgstr "Informasi"

msgid "``xml``"
msgstr "``xml``"

msgid "Serializes to and from a simple XML dialect."
msgstr "Menserialisasikan ke dan dari logat XML sederhana."

msgid "``json``"
msgstr "``json``"

msgid "Serializes to and from JSON_."
msgstr "Menserialisasikan ke dan dari JSON_."

msgid "``jsonl``"
msgstr "``jsonl``"

msgid "Serializes to and from JSONL_."
msgstr ""

msgid "``yaml``"
msgstr "``yaml``"

msgid ""
"Serializes to YAML (YAML Ain't a Markup Language). This serializer is only "
"available if PyYAML_ is installed."
msgstr ""
"Menserialisasikan ke YAML (YAML Ain't a Markup Language). Penserial ini "
"hanya tersedia jika PyYAML_ terpasang."

msgid "XML"
msgstr "XML"

msgid "The basic XML serialization format looks like this::"
msgstr ""

msgid ""
"The whole collection of objects that is either serialized or deserialized is "
"represented by a ``<django-objects>``-tag which contains multiple "
"``<object>``-elements. Each such object has two attributes: \"pk\" and "
"\"model\", the latter being represented by the name of the app (\"sessions"
"\") and the lowercase name of the model (\"session\") separated by a dot."
msgstr ""

msgid ""
"Each field of the object is serialized as a ``<field>``-element sporting the "
"fields \"type\" and \"name\". The text content of the element represents the "
"value that should be stored."
msgstr ""

msgid ""
"Foreign keys and other relational fields are treated a little bit "
"differently::"
msgstr ""
"Foreign key dan bidang-bidang penghubung lain diperlakukan sedikit berbeda::"

msgid ""
"In this example we specify that the ``auth.Permission`` object with the PK "
"27 has a foreign key to the ``contenttypes.ContentType`` instance with the "
"PK 9."
msgstr ""

msgid ""
"ManyToMany-relations are exported for the model that binds them. For "
"instance, the ``auth.User`` model has such a relation to the ``auth."
"Permission`` model::"
msgstr ""

msgid ""
"This example links the given user with the permission models with PKs 46 and "
"47."
msgstr ""
"Contoh tautan ini memberikan pengguna dengan model perizinan dengan PK 46 "
"dan 47."

msgid "Control characters"
msgstr "Karakter kendali"

msgid ""
"If the content to be serialized contains control characters that are not "
"accepted in the XML 1.0 standard, the serialization will fail with a :exc:"
"`ValueError` exception. Read also the W3C's explanation of `HTML, XHTML, XML "
"and Control Codes <https://www.w3.org/International/questions/qa-controls>`_."
msgstr ""

msgid "JSON"
msgstr "JSON"

msgid ""
"When staying with the same example data as before it would be serialized as "
"JSON in the following way::"
msgstr ""

msgid ""
"The formatting here is a bit simpler than with XML. The whole collection is "
"just represented as an array and the objects are represented by JSON objects "
"with three properties: \"pk\", \"model\" and \"fields\". \"fields\" is again "
"an object containing each field's name and value as property and property-"
"value respectively."
msgstr ""

msgid ""
"Foreign keys have the PK of the linked object as property value. ManyToMany-"
"relations are serialized for the model that defines them and are represented "
"as a list of PKs."
msgstr ""

msgid ""
"Be aware that not all Django output can be passed unmodified to :mod:`json`. "
"For example, if you have some custom type in an object to be serialized, "
"you'll have to write a custom :mod:`json` encoder for it. Something like "
"this will work::"
msgstr ""

msgid ""
"You can then pass ``cls=LazyEncoder`` to the ``serializers.serialize()`` "
"function::"
msgstr ""
"Anda kemudian dapat melewatkan ``cls=LazyEncoder`` ke fungsi ``serializers."
"serialize()``::"

msgid ""
"Also note that GeoDjango provides a :doc:`customized GeoJSON serializer </"
"ref/contrib/gis/serializers>`."
msgstr ""
"Juga catat bahwa GeoDjango menyediakan sebuah :doc:`customized GeoJSON "
"serializer 1`. "

msgid "``DjangoJSONEncoder``"
msgstr "``DjangoJSONEncoder``"

msgid ""
"The JSON serializer uses ``DjangoJSONEncoder`` for encoding. A subclass of :"
"class:`~json.JSONEncoder`, it handles these additional types:"
msgstr ""

msgid ":class:`~datetime.datetime`"
msgstr ":class:`~datetime.datetime`"

msgid ""
"A string of the form ``YYYY-MM-DDTHH:mm:ss.sssZ`` or ``YYYY-MM-DDTHH:mm:ss."
"sss+HH:MM`` as defined in `ECMA-262`_."
msgstr ""
"Sebuah string dari bentuk ``YYYY-MM-DDTHH:mm:ss.sssZ`` atau ``YYYY-MM-DDTHH:"
"mm:ss.sss+HH:MM`` seeprti ditentukan dalam `ECMA-262`_."

msgid ":class:`~datetime.date`"
msgstr ":class:`~datetime.date`"

msgid "A string of the form ``YYYY-MM-DD`` as defined in `ECMA-262`_."
msgstr ""
"Sebuah string dari bentuk `YYYY-MM-DD`` seperti ditentukan dalam `ECMA-262`_."

msgid ":class:`~datetime.time`"
msgstr ":class:`~datetime.time`"

msgid "A string of the form ``HH:MM:ss.sss`` as defined in `ECMA-262`_."
msgstr ""
"Sebuah string dari bentuk ``HH:MM:ss.sss`` seperti ditentukan dalam "
"`ECMA-262`_."

msgid ":class:`~datetime.timedelta`"
msgstr ":class:`~datetime.timedelta`"

msgid ""
"A string representing a duration as defined in ISO-8601. For example, "
"``timedelta(days=1, hours=2, seconds=3.4)`` is represented as "
"``'P1DT02H00M03.400000S'``."
msgstr ""

msgid ""
":class:`~decimal.Decimal`, ``Promise`` (``django.utils.functional.lazy()`` "
"objects), :class:`~uuid.UUID`"
msgstr ""
":class:`~decimal.Decimal`, ``Promise`` (obyek ``django.utils.functional."
"lazy()``), :class:`~uuid.UUID`"

msgid "A string representation of the object."
msgstr "Sebuah string perwakilan dari obyek."

msgid "JSONL"
msgstr "JSONL"

msgid ""
"*JSONL* stands for *JSON Lines*. With this format, objects are separated by "
"new lines, and each line contains a valid JSON object. JSONL serialized data "
"looks like this::"
msgstr ""

msgid ""
"JSONL can be useful for populating large databases, since the data can be "
"processed line by line, rather than being loaded into memory all at once."
msgstr ""

msgid "YAML"
msgstr "YAML"

msgid ""
"YAML serialization looks quite similar to JSON. The object list is "
"serialized as a sequence mappings with the keys \"pk\", \"model\" and "
"\"fields\". Each field is again a mapping with the key being name of the "
"field and the value the value::"
msgstr ""

msgid "Referential fields are again represented by the PK or sequence of PKs."
msgstr ""

msgid "Natural keys"
msgstr "Kunci alami"

msgid ""
"The default serialization strategy for foreign keys and many-to-many "
"relations is to serialize the value of the primary key(s) of the objects in "
"the relation. This strategy works well for most objects, but it can cause "
"difficulty in some circumstances."
msgstr ""

msgid ""
"Consider the case of a list of objects that have a foreign key referencing :"
"class:`~django.contrib.contenttypes.models.ContentType`. If you're going to "
"serialize an object that refers to a content type, then you need to have a "
"way to refer to that content type to begin with. Since ``ContentType`` "
"objects are automatically created by Django during the database "
"synchronization process, the primary key of a given content type isn't easy "
"to predict; it will depend on how and when :djadmin:`migrate` was executed. "
"This is true for all models which automatically generate objects, notably "
"including :class:`~django.contrib.auth.models.Permission`, :class:`~django."
"contrib.auth.models.Group`, and :class:`~django.contrib.auth.models.User`."
msgstr ""

msgid ""
"You should never include automatically generated objects in a fixture or "
"other serialized data. By chance, the primary keys in the fixture may match "
"those in the database and loading the fixture will have no effect. In the "
"more likely case that they don't match, the fixture loading will fail with "
"an :class:`~django.db.IntegrityError`."
msgstr ""

msgid ""
"There is also the matter of convenience. An integer id isn't always the most "
"convenient way to refer to an object; sometimes, a more natural reference "
"would be helpful."
msgstr ""

msgid ""
"It is for these reasons that Django provides *natural keys*. A natural key "
"is a tuple of values that can be used to uniquely identify an object "
"instance without using the primary key value."
msgstr ""

msgid "Deserialization of natural keys"
msgstr "Deserialisasi dari kunci-kunci alami"

msgid "Consider the following two models::"
msgstr "Pertimbangkan dua model berikut::"

msgid ""
"Ordinarily, serialized data for ``Book`` would use an integer to refer to "
"the author. For example, in JSON, a Book might be serialized as::"
msgstr ""

msgid ""
"This isn't a particularly natural way to refer to an author. It requires "
"that you know the primary key value for the author; it also requires that "
"this primary key value is stable and predictable."
msgstr ""

msgid ""
"However, if we add natural key handling to Person, the fixture becomes much "
"more humane. To add natural key handling, you define a default Manager for "
"Person with a ``get_by_natural_key()`` method. In the case of a Person, a "
"good natural key might be the pair of first and last name::"
msgstr ""

msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""
"Sekarang buku dapat menggunakan kunci alami untuk mengacu pada obyek "
"``Person``::"

msgid ""
"When you try to load this serialized data, Django will use the "
"``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into "
"the primary key of an actual ``Person`` object."
msgstr ""

msgid ""
"Whatever fields you use for a natural key must be able to uniquely identify "
"an object. This will usually mean that your model will have a uniqueness "
"clause (either unique=True on a single field, or ``unique_together`` over "
"multiple fields) for the field or fields in your natural key. However, "
"uniqueness doesn't need to be enforced at the database level. If you are "
"certain that a set of fields will be effectively unique, you can still use "
"those fields as a natural key."
msgstr ""

msgid ""
"Deserialization of objects with no primary key will always check whether the "
"model's manager has a ``get_by_natural_key()`` method and if so, use it to "
"populate the deserialized object's primary key."
msgstr ""

msgid "Serialization of natural keys"
msgstr "Serialisasi dari kunci-kunci alami"

msgid ""
"So how do you get Django to emit a natural key when serializing an object? "
"Firstly, you need to add another method -- this time to the model itself::"
msgstr ""

msgid ""
"That method should always return a natural key tuple -- in this example, "
"``(first name, last name)``. Then, when you call ``serializers."
"serialize()``, you provide ``use_natural_foreign_keys=True`` or "
"``use_natural_primary_keys=True`` arguments::"
msgstr ""

msgid ""
"When ``use_natural_foreign_keys=True`` is specified, Django will use the "
"``natural_key()`` method to serialize any foreign key reference to objects "
"of the type that defines the method."
msgstr ""

msgid ""
"When ``use_natural_primary_keys=True`` is specified, Django will not provide "
"the primary key in the serialized data of this object since it can be "
"calculated during deserialization::"
msgstr ""

msgid ""
"This can be useful when you need to load serialized data into an existing "
"database and you cannot guarantee that the serialized primary key value is "
"not already in use, and do not need to ensure that deserialized objects "
"retain the same primary keys."
msgstr ""

msgid ""
"If you are using :djadmin:`dumpdata` to generate serialized data, use the :"
"option:`dumpdata --natural-foreign` and :option:`dumpdata --natural-primary` "
"command line flags to generate natural keys."
msgstr ""

msgid ""
"You don't need to define both ``natural_key()`` and "
"``get_by_natural_key()``. If you don't want Django to output natural keys "
"during serialization, but you want to retain the ability to load natural "
"keys, then you can opt to not implement the ``natural_key()`` method."
msgstr ""

msgid ""
"Conversely, if (for some strange reason) you want Django to output natural "
"keys during serialization, but *not* be able to load those key values, just "
"don't define the ``get_by_natural_key()`` method."
msgstr ""

msgid "Natural keys and forward references"
msgstr ""

msgid ""
"Sometimes when you use :ref:`natural foreign keys <topics-serialization-"
"natural-keys>` you'll need to deserialize data where an object has a foreign "
"key referencing another object that hasn't yet been deserialized. This is "
"called a \"forward reference\"."
msgstr ""

msgid "For instance, suppose you have the following objects in your fixture::"
msgstr ""

msgid ""
"In order to handle this situation, you need to pass "
"``handle_forward_references=True`` to ``serializers.deserialize()``. This "
"will set the ``deferred_fields`` attribute on the ``DeserializedObject`` "
"instances. You'll need to keep track of ``DeserializedObject`` instances "
"where this attribute isn't ``None`` and later call "
"``save_deferred_fields()`` on them."
msgstr ""

msgid "Typical usage looks like this::"
msgstr ""

msgid ""
"For this to work, the ``ForeignKey`` on the referencing model must have "
"``null=True``."
msgstr ""

msgid "Dependencies during serialization"
msgstr "Ketergantungan selama serialisasi"

msgid ""
"It's often possible to avoid explicitly having to handle forward references "
"by taking care with the ordering of objects within a fixture."
msgstr ""

msgid ""
"To help with this, calls to :djadmin:`dumpdata` that use the :option:"
"`dumpdata --natural-foreign` option will serialize any model with a "
"``natural_key()`` method before serializing standard primary key objects."
msgstr ""

msgid ""
"However, this may not always be enough. If your natural key refers to "
"another object (by using a foreign key or natural key to another object as "
"part of a natural key), then you need to be able to ensure that the objects "
"on which a natural key depends occur in the serialized data before the "
"natural key requires them."
msgstr ""

msgid ""
"To control this ordering, you can define dependencies on your "
"``natural_key()`` methods. You do this by setting a ``dependencies`` "
"attribute on the ``natural_key()`` method itself."
msgstr ""

msgid ""
"For example, let's add a natural key to the ``Book`` model from the example "
"above::"
msgstr ""

msgid ""
"The natural key for a ``Book`` is a combination of its name and its author. "
"This means that ``Person`` must be serialized before ``Book``. To define "
"this dependency, we add one extra line::"
msgstr ""

msgid ""
"This definition ensures that all ``Person`` objects are serialized before "
"any ``Book`` objects. In turn, any object referencing ``Book`` will be "
"serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""

msgid "Django settings"
msgstr "Pengaturan Django"

msgid ""
"A Django settings file contains all the configuration of your Django "
"installation. This document explains how settings work and which settings "
"are available."
msgstr ""

msgid "The basics"
msgstr "Dasar"

msgid "A settings file is just a Python module with module-level variables."
msgstr ""

msgid "Here are a couple of example settings::"
msgstr "Ini adalah sepasang contoh pengaturan::"

msgid ""
"If you set :setting:`DEBUG` to ``False``, you also need to properly set the :"
"setting:`ALLOWED_HOSTS` setting."
msgstr ""

msgid "Because a settings file is a Python module, the following apply:"
msgstr ""

msgid "It doesn't allow for Python syntax errors."
msgstr ""

msgid ""
"It can assign settings dynamically using normal Python syntax. For example::"
msgstr ""

msgid "It can import values from other settings files."
msgstr ""

msgid "Designating the settings"
msgstr ""

msgid ""
"When you use Django, you have to tell it which settings you're using. Do "
"this by using an environment variable, :envvar:`DJANGO_SETTINGS_MODULE`."
msgstr ""

msgid ""
"The value of :envvar:`DJANGO_SETTINGS_MODULE` should be in Python path "
"syntax, e.g. ``mysite.settings``. Note that the settings module should be on "
"the Python `import search path`_."
msgstr ""

msgid "The ``django-admin`` utility"
msgstr "Kegunaan ``django-admin``"

msgid ""
"When using :doc:`django-admin </ref/django-admin>`, you can either set the "
"environment variable once, or explicitly pass in the settings module each "
"time you run the utility."
msgstr ""

msgid "Example (Unix Bash shell)::"
msgstr "Contoh (Unix Bash shell)::"

msgid "Example (Windows shell)::"
msgstr "Contoh (Windows shell)::"

msgid ""
"Use the ``--settings`` command-line argument to specify the settings "
"manually::"
msgstr ""

msgid "On the server (``mod_wsgi``)"
msgstr ""

msgid ""
"In your live server environment, you'll need to tell your WSGI application "
"what settings file to use. Do that with ``os.environ``::"
msgstr ""

msgid ""
"Read the :doc:`Django mod_wsgi documentation </howto/deployment/wsgi/"
"modwsgi>` for more information and other common elements to a Django WSGI "
"application."
msgstr ""

msgid "Default settings"
msgstr "Pengaturan awal"

msgid ""
"A Django settings file doesn't have to define any settings if it doesn't "
"need to. Each setting has a sensible default value. These defaults live in "
"the module :file:`django/conf/global_settings.py`."
msgstr ""

msgid "Here's the algorithm Django uses in compiling settings:"
msgstr ""

msgid "Load settings from ``global_settings.py``."
msgstr "Memuat pengaturan dari ``global_settings.py``."

msgid ""
"Load settings from the specified settings file, overriding the global "
"settings as necessary."
msgstr ""

msgid ""
"Note that a settings file should *not* import from ``global_settings``, "
"because that's redundant."
msgstr ""

msgid "Seeing which settings you've changed"
msgstr "Melihat pengaturan mana anda telah rubah"

msgid ""
"The command ``python manage.py diffsettings`` displays differences between "
"the current settings file and Django's default settings."
msgstr ""

msgid "For more, see the :djadmin:`diffsettings` documentation."
msgstr "Untuk lebih, lihat dokumentasi :djadmin:`diffsettings`."

msgid "Using settings in Python code"
msgstr "Menggunakan pengaturan di kode Python"

msgid ""
"In your Django apps, use settings by importing the object ``django.conf."
"settings``. Example::"
msgstr ""
"Di aplikasi Django anda, gunakan pengaturan dengan mengimpor obyek ``django."
"conf.settings``. Contoh::"

msgid ""
"Note that ``django.conf.settings`` isn't a module -- it's an object. So "
"importing individual settings is not possible::"
msgstr ""
"Catat bahwa ``django.conf.settings`` bukanlah modul -- dia adalah sebuah "
"obyek. Jadi mengimpor pengaturan tunggal adalah tidak mungkin::"

msgid ""
"Also note that your code should *not* import from either ``global_settings`` "
"or your own settings file. ``django.conf.settings`` abstracts the concepts "
"of default settings and site-specific settings; it presents a single "
"interface. It also decouples the code that uses settings from the location "
"of your settings."
msgstr ""

msgid "Altering settings at runtime"
msgstr ""

msgid ""
"You shouldn't alter settings in your applications at runtime. For example, "
"don't do this in a view::"
msgstr ""

msgid "The only place you should assign to settings is in a settings file."
msgstr ""

msgid "Security"
msgstr "Keamanan"

msgid ""
"Because a settings file contains sensitive information, such as the database "
"password, you should make every attempt to limit access to it. For example, "
"change its file permissions so that only you and your web server's user can "
"read it. This is especially important in a shared-hosting environment."
msgstr ""

msgid "Available settings"
msgstr "Pengaturan tersedia"

msgid ""
"For a full list of available settings, see the :doc:`settings reference </"
"ref/settings>`."
msgstr ""

msgid "Creating your own settings"
msgstr "Membuat pengaturan anda sendiri"

msgid ""
"There's nothing stopping you from creating your own settings, for your own "
"Django apps, but follow these guidelines:"
msgstr ""

msgid "Setting names must be all uppercase."
msgstr ""

msgid "Don't reinvent an already-existing setting."
msgstr ""

msgid ""
"For settings that are sequences, Django itself uses lists, but this is only "
"a convention."
msgstr ""

msgid "Using settings without setting :envvar:`DJANGO_SETTINGS_MODULE`"
msgstr ""

msgid ""
"In some cases, you might want to bypass the :envvar:`DJANGO_SETTINGS_MODULE` "
"environment variable. For example, if you're using the template system by "
"itself, you likely don't want to have to set up an environment variable "
"pointing to a settings module."
msgstr ""

msgid ""
"In these cases, you can configure Django's settings manually. Do this by "
"calling:"
msgstr ""

msgid ""
"Pass ``configure()`` as many keyword arguments as you'd like, with each "
"keyword argument representing a setting and its value. Each argument name "
"should be all uppercase, with the same name as the settings described above. "
"If a particular setting is not passed to ``configure()`` and is needed at "
"some later point, Django will use the default setting value."
msgstr ""

msgid ""
"Configuring Django in this fashion is mostly necessary -- and, indeed, "
"recommended -- when you're using a piece of the framework inside a larger "
"application."
msgstr ""

msgid ""
"Consequently, when configured via ``settings.configure()``, Django will not "
"make any modifications to the process environment variables (see the "
"documentation of :setting:`TIME_ZONE` for why this would normally occur). "
"It's assumed that you're already in full control of your environment in "
"these cases."
msgstr ""

msgid "Custom default settings"
msgstr ""

msgid ""
"If you'd like default values to come from somewhere other than ``django.conf."
"global_settings``, you can pass in a module or class that provides the "
"default settings as the ``default_settings`` argument (or as the first "
"positional argument) in the call to ``configure()``."
msgstr ""

msgid ""
"In this example, default settings are taken from ``myapp_defaults``, and "
"the :setting:`DEBUG` setting is set to ``True``, regardless of its value in "
"``myapp_defaults``::"
msgstr ""

msgid ""
"The following example, which uses ``myapp_defaults`` as a positional "
"argument, is equivalent::"
msgstr ""

msgid ""
"Normally, you will not need to override the defaults in this fashion. The "
"Django defaults are sufficiently tame that you can safely use them. Be aware "
"that if you do pass in a new default module, it entirely *replaces* the "
"Django defaults, so you must specify a value for every possible setting that "
"might be used in that code you are importing. Check in ``django.conf."
"settings.global_settings`` for the full list."
msgstr ""

msgid "Either ``configure()`` or :envvar:`DJANGO_SETTINGS_MODULE` is required"
msgstr ""

msgid ""
"If you're not setting the :envvar:`DJANGO_SETTINGS_MODULE` environment "
"variable, you *must* call ``configure()`` at some point before using any "
"code that reads settings."
msgstr ""

msgid ""
"If you don't set :envvar:`DJANGO_SETTINGS_MODULE` and don't call "
"``configure()``, Django will raise an ``ImportError`` exception the first "
"time a setting is accessed."
msgstr ""

msgid ""
"If you set :envvar:`DJANGO_SETTINGS_MODULE`, access settings values somehow, "
"*then* call ``configure()``, Django will raise a ``RuntimeError`` indicating "
"that settings have already been configured. There is a property for this "
"purpose:"
msgstr ""

msgid ""
"Also, it's an error to call ``configure()`` more than once, or to call "
"``configure()`` after any setting has been accessed."
msgstr ""

msgid ""
"It boils down to this: Use exactly one of either ``configure()`` or :envvar:"
"`DJANGO_SETTINGS_MODULE`. Not both, and not neither."
msgstr ""

msgid "Calling ``django.setup()`` is required for \"standalone\" Django usage"
msgstr ""

msgid ""
"If you're using components of Django \"standalone\" -- for example, writing "
"a Python script which loads some Django templates and renders them, or uses "
"the ORM to fetch some data -- there's one more step you'll need in addition "
"to configuring settings."
msgstr ""

msgid ""
"After you've either set :envvar:`DJANGO_SETTINGS_MODULE` or called "
"``configure()``, you'll need to call :func:`django.setup()` to load your "
"settings and populate Django's application registry. For example::"
msgstr ""
"Setelah anda telah salah satu menyetel :envvar:`DJANGO_SETTINGS_MODULE` atau "
"memanggil ``configure()``, anda akan butuh memanggil :func:`django.setup()` "
"untuk memuat pengaturan anda dan mengumpulkan registrar aplikasi Django. "
"Sebagai contoh::"

msgid ""
"Note that calling ``django.setup()`` is only necessary if your code is truly "
"standalone. When invoked by your web server, or through :doc:`django-admin </"
"ref/django-admin>`, Django will handle this for you."
msgstr ""

msgid "``django.setup()`` may only be called once."
msgstr "``django.setup()`` hanya boleh dipanggil sekali."

msgid ""
"Therefore, avoid putting reusable application logic in standalone scripts so "
"that you have to import from the script elsewhere in your application. If "
"you can't avoid that, put the call to ``django.setup()`` inside an ``if`` "
"block::"
msgstr ""

msgid ":doc:`The Settings Reference </ref/settings>`"
msgstr ":doc:`Acuan Pengaturan </ref/settings>`"

msgid "Contains the complete list of core and contrib app settings."
msgstr ""

msgid "Signals"
msgstr "Sinyal"

msgid ""
"Django includes a \"signal dispatcher\" which helps decoupled applications "
"get notified when actions occur elsewhere in the framework. In a nutshell, "
"signals allow certain *senders* to notify a set of *receivers* that some "
"action has taken place. They're especially useful when many pieces of code "
"may be interested in the same events."
msgstr ""

msgid ""
"Django provides a :doc:`set of built-in signals </ref/signals>` that let "
"user code get notified by Django itself of certain actions. These include "
"some useful notifications:"
msgstr ""

msgid ""
":data:`django.db.models.signals.pre_save` & :data:`django.db.models.signals."
"post_save`"
msgstr ""
":data:`django.db.models.signals.pre_save` & :data:`django.db.models.signals."
"post_save`"

msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.save` method "
"is called."
msgstr ""
"Terkirim sebelum atau sesudah model cara :meth:`~django.db.models.Model."
"save` dipanggil."

msgid ""
":data:`django.db.models.signals.pre_delete` & :data:`django.db.models."
"signals.post_delete`"
msgstr ""
":data:`django.db.models.signals.pre_delete` & :data:`django.db.models."
"signals.post_delete`"

msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.delete` method "
"or queryset's :meth:`~django.db.models.query.QuerySet.delete` method is "
"called."
msgstr ""

msgid ":data:`django.db.models.signals.m2m_changed`"
msgstr ":data:`django.db.models.signals.m2m_changed`"

msgid ""
"Sent when a :class:`~django.db.models.ManyToManyField` on a model is changed."
msgstr ""

msgid ""
":data:`django.core.signals.request_started` & :data:`django.core.signals."
"request_finished`"
msgstr ""
":data:`django.core.signals.request_started` & :data:`django.core.signals."
"request_finished`"

msgid "Sent when Django starts or finishes an HTTP request."
msgstr ""

msgid ""
"See the :doc:`built-in signal documentation </ref/signals>` for a complete "
"list, and a complete explanation of each signal."
msgstr ""

msgid "You can also `define and send your own custom signals`_; see below."
msgstr ""

msgid "Listening to signals"
msgstr "Mendengarkan ke sinyal"

msgid ""
"To receive a signal, register a *receiver* function using the :meth:`Signal."
"connect` method. The receiver function is called when the signal is sent. "
"All of the signal's receiver functions are called one at a time, in the "
"order they were registered."
msgstr ""

msgid ""
"The callback function which will be connected to this signal. See :ref:"
"`receiver-functions` for more information."
msgstr ""

msgid ""
"Specifies a particular sender to receive signals from. See :ref:`connecting-"
"to-specific-signals` for more information."
msgstr ""

msgid ""
"Django stores signal handlers as weak references by default. Thus, if your "
"receiver is a local function, it may be garbage collected. To prevent this, "
"pass ``weak=False`` when you call the signal's ``connect()`` method."
msgstr ""

msgid ""
"A unique identifier for a signal receiver in cases where duplicate signals "
"may be sent. See :ref:`preventing-duplicate-signals` for more information."
msgstr ""

msgid ""
"Let's see how this works by registering a signal that gets called after each "
"HTTP request is finished. We'll be connecting to the :data:`~django.core."
"signals.request_finished` signal."
msgstr ""

msgid "Receiver functions"
msgstr "Fungsi penerima"

msgid ""
"First, we need to define a receiver function. A receiver can be any Python "
"function or method::"
msgstr ""
"Pertama, kami butuh menentukan fungsi penerima. Penerima dapat menjadi "
"fungsi Phyton apapun atau cara::"

msgid ""
"Notice that the function takes a ``sender`` argument, along with wildcard "
"keyword arguments (``**kwargs``); all signal handlers must take these "
"arguments."
msgstr ""

msgid ""
"We'll look at senders :ref:`a bit later <connecting-to-specific-signals>`, "
"but right now look at the ``**kwargs`` argument. All signals send keyword "
"arguments, and may change those keyword arguments at any time. In the case "
"of :data:`~django.core.signals.request_finished`, it's documented as sending "
"no arguments, which means we might be tempted to write our signal handling "
"as ``my_callback(sender)``."
msgstr ""

msgid ""
"This would be wrong -- in fact, Django will throw an error if you do so. "
"That's because at any point arguments could get added to the signal and your "
"receiver must be able to handle those new arguments."
msgstr ""

msgid "Connecting receiver functions"
msgstr "Menyambung fungsi penerima"

msgid ""
"There are two ways you can connect a receiver to a signal. You can take the "
"manual connect route::"
msgstr ""

msgid "Alternatively, you can use a :func:`receiver` decorator:"
msgstr "Cara lain, anda dapat menggunakan penghias  :func:`receiver`:"

msgid "A signal or a list of signals to connect a function to."
msgstr ""

msgid "Here's how you connect with the decorator::"
msgstr ""

msgid ""
"Now, our ``my_callback`` function will be called each time a request "
"finishes."
msgstr ""

msgid "Where should this code live?"
msgstr "Dimana seharusnya kode ini tinggal?"

msgid ""
"Strictly speaking, signal handling and registration code can live anywhere "
"you like, although it's recommended to avoid the application's root module "
"and its ``models`` module to minimize side-effects of importing code."
msgstr ""

msgid ""
"In practice, signal handlers are usually defined in a ``signals`` submodule "
"of the application they relate to. Signal receivers are connected in the :"
"meth:`~django.apps.AppConfig.ready` method of your application :ref:"
"`configuration class <configuring-applications-ref>`. If you're using the :"
"func:`receiver` decorator, import the ``signals`` submodule inside :meth:"
"`~django.apps.AppConfig.ready`, this will implicitly connect signal "
"handlers::"
msgstr ""

msgid ""
"The :meth:`~django.apps.AppConfig.ready` method may be executed more than "
"once during testing, so you may want to :ref:`guard your signals from "
"duplication <preventing-duplicate-signals>`, especially if you're planning "
"to send them within tests."
msgstr ""

msgid "Connecting to signals sent by specific senders"
msgstr ""

msgid ""
"Some signals get sent many times, but you'll only be interested in receiving "
"a certain subset of those signals. For example, consider the :data:`django."
"db.models.signals.pre_save` signal sent before a model gets saved. Most of "
"the time, you don't need to know when *any* model gets saved -- just when "
"one *specific* model is saved."
msgstr ""

msgid ""
"In these cases, you can register to receive signals sent only by particular "
"senders. In the case of :data:`django.db.models.signals.pre_save`, the "
"sender will be the model class being saved, so you can indicate that you "
"only want signals sent by some model::"
msgstr ""

msgid ""
"The ``my_handler`` function will only be called when an instance of "
"``MyModel`` is saved."
msgstr ""

msgid ""
"Different signals use different objects as their senders; you'll need to "
"consult the :doc:`built-in signal documentation </ref/signals>` for details "
"of each particular signal."
msgstr ""

msgid "Preventing duplicate signals"
msgstr "Mencegah sinyal rangkap"

msgid ""
"In some circumstances, the code connecting receivers to signals may run "
"multiple times. This can cause your receiver function to be registered more "
"than once, and thus called as many times for a signal event. For example, "
"the :meth:`~django.apps.AppConfig.ready` method may be executed more than "
"once during testing. More generally, this occurs everywhere your project "
"imports the module where you define the signals, because signal registration "
"runs as many times as it is imported."
msgstr ""

msgid ""
"If this behavior is problematic (such as when using signals to send an email "
"whenever a model is saved), pass a unique identifier as the ``dispatch_uid`` "
"argument to identify your receiver function. This identifier will usually be "
"a string, although any hashable object will suffice. The end result is that "
"your receiver function will only be bound to the signal once for each unique "
"``dispatch_uid`` value::"
msgstr ""
"Jika perilaku ini bermasalah (seperti ketika menggunakan sinyal mengirim "
"surel dimanapun model disimpan),  lewati penciri unik sebagai argumen "
"``dispatch_uid`` untuk mencirikan fungsi penerima anda. Penciri ini akan "
"biasanya berupa string, meskipun obyek apapun yang mampu akan cukup. Hasil "
"akhir adalah fungsi penerima anda akan hanya diikatkan ke sinyal sekali "
"untuk setiap nilai ``dispatch_uid`` unik::"

msgid "Defining and sending signals"
msgstr "Menentukan dan mengirim sinyal"

msgid ""
"Your applications can take advantage of the signal infrastructure and "
"provide its own signals."
msgstr ""
"Aplikasi anda dapat mengambil keuntungan dari infrastruktur sinyal dan "
"menyediakan sinyal sendiri."

msgid "When to use custom signals"
msgstr ""

msgid ""
"Signals are implicit function calls which make debugging harder. If the "
"sender and receiver of your custom signal are both within your project, "
"you're better off using an explicit function call."
msgstr ""

msgid "Defining signals"
msgstr "Menentukan sinyal"

msgid "All signals are :class:`django.dispatch.Signal` instances."
msgstr ""

msgid "This declares a ``pizza_done`` signal."
msgstr ""

msgid "Sending signals"
msgstr "Mengirim sinyal"

msgid "There are two ways to send signals in Django."
msgstr "Terdapat dua jalan mengirim sinyal di Django."

msgid ""
"To send a signal, call either :meth:`Signal.send` (all built-in signals use "
"this) or :meth:`Signal.send_robust`. You must provide the ``sender`` "
"argument (which is a class most of the time) and may provide as many other "
"keyword arguments as you like."
msgstr ""

msgid "For example, here's how sending our ``pizza_done`` signal might look::"
msgstr ""
"Sebagai contoh, ini adalah bagaimana mengirim sinyal ``pizza_done`` kami "
"mungkin terlihat::"

msgid ""
"Both ``send()`` and ``send_robust()`` return a list of tuple pairs "
"``[(receiver, response), ... ]``, representing the list of called receiver "
"functions and their response values."
msgstr ""

msgid ""
"``send()`` differs from ``send_robust()`` in how exceptions raised by "
"receiver functions are handled. ``send()`` does *not* catch any exceptions "
"raised by receivers; it simply allows errors to propagate. Thus not all "
"receivers may be notified of a signal in the face of an error."
msgstr ""

msgid ""
"``send_robust()`` catches all errors derived from Python's ``Exception`` "
"class, and ensures all receivers are notified of the signal. If an error "
"occurs, the error instance is returned in the tuple pair for the receiver "
"that raised the error."
msgstr ""

msgid ""
"The tracebacks are present on the ``__traceback__`` attribute of the errors "
"returned when calling ``send_robust()``."
msgstr ""

msgid "Disconnecting signals"
msgstr "Memutus sambungan sinyal"

msgid ""
"To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The "
"arguments are as described in :meth:`.Signal.connect`. The method returns "
"``True`` if a receiver was disconnected and ``False`` if not. When "
"``sender`` is passed as a lazy reference to ``<app label>.<model>``, this "
"method always returns ``None``."
msgstr ""

msgid ""
"The ``receiver`` argument indicates the registered receiver to disconnect. "
"It may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr ""
"Argumen ``receiver`` menunjukkan penerima terdaftar untuk tidak terhubung. "
"Itu mungkin ``None`` jika ``dispatch_uid`` digunakan untuk mencirikan "
"penerima."

msgid "Cryptographic signing"
msgstr "Penandatanganan Kriptrograpi"

msgid ""
"The golden rule of web application security is to never trust data from "
"untrusted sources. Sometimes it can be useful to pass data through an "
"untrusted medium. Cryptographically signed values can be passed through an "
"untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""

msgid ""
"Django provides both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in web applications."
msgstr ""

msgid "You may also find signing useful for the following:"
msgstr "Anda mungkin juga menemukan pensinyalan berguna untuk berikut:"

msgid ""
"Generating \"recover my account\" URLs for sending to users who have lost "
"their password."
msgstr ""

msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""

msgid ""
"Generating one-time secret URLs for allowing temporary access to a protected "
"resource, for example a downloadable file that a user has paid for."
msgstr ""

msgid "Protecting the ``SECRET_KEY``"
msgstr "Melindungi the ``SECRET_KEY``"

msgid ""
"When you create a new Django project using :djadmin:`startproject`, the "
"``settings.py`` file is generated automatically and gets a random :setting:"
"`SECRET_KEY` value. This value is the key to securing signed data -- it is "
"vital you keep this secure, or attackers could use it to generate their own "
"signed values."
msgstr ""

msgid "Using the low-level API"
msgstr "Menggunakan API tingkat-rendah"

msgid ""
"Django's signing methods live in the ``django.core.signing`` module. To sign "
"a value, first instantiate a ``Signer`` instance::"
msgstr ""

msgid ""
"The signature is appended to the end of the string, following the colon. You "
"can retrieve the original value using the ``unsign`` method::"
msgstr ""

msgid ""
"If you pass a non-string value to ``sign``, the value will be forced to "
"string before being signed, and the ``unsign`` result will give you that "
"string value::"
msgstr ""

msgid ""
"If you wish to protect a list, tuple, or dictionary you can do so using the "
"``sign_object()`` and ``unsign_object()`` methods::"
msgstr ""

msgid "See :ref:`signing-complex-data` for more details."
msgstr ""

msgid ""
"If the signature or value have been altered in any way, a ``django.core."
"signing.BadSignature`` exception will be raised::"
msgstr ""

msgid ""
"By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to "
"generate signatures. You can use a different secret by passing it to the "
"``Signer`` constructor::"
msgstr ""

msgid ""
"Returns a signer which uses ``key`` to generate signatures and ``sep`` to "
"separate values. ``sep`` cannot be in the :rfc:`URL safe base64 alphabet "
"<4648#section-5>`. This alphabet contains alphanumeric characters, hyphens, "
"and underscores. ``algorithm`` must be an algorithm supported by :py:mod:"
"`hashlib`, it defaults to ``'sha256'``."
msgstr ""

msgid "The ``sign_object()`` and ``unsign_object()`` methods were added."
msgstr ""

msgid "Using the ``salt`` argument"
msgstr "Menggunakan argumen ``salt``"

msgid ""
"If you do not wish for every occurrence of a particular string to have the "
"same signature hash, you can use the optional ``salt`` argument to the "
"``Signer`` class. Using a salt will seed the signing hash function with both "
"the salt and your :setting:`SECRET_KEY`::"
msgstr ""

msgid ""
"Using salt in this way puts the different signatures into different "
"namespaces.  A signature that comes from one namespace (a particular salt "
"value) cannot be used to validate the same plaintext string in a different "
"namespace that is using a different salt setting. The result is to prevent "
"an attacker from using a signed string generated in one place in the code as "
"input to another piece of code that is generating (and verifying) signatures "
"using a different salt."
msgstr ""

msgid ""
"Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay "
"secret."
msgstr ""

msgid "Verifying timestamped values"
msgstr "Memeriksa nilai timestamp"

msgid ""
"``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed "
"timestamp to the value. This allows you to confirm that a signed value was "
"created within a specified period of time::"
msgstr ""

msgid "Sign ``value`` and append current timestamp to it."
msgstr ""

msgid ""
"Checks if ``value`` was signed less than ``max_age`` seconds ago, otherwise "
"raises ``SignatureExpired``. The ``max_age`` parameter can accept an integer "
"or a :py:class:`datetime.timedelta` object."
msgstr ""
"Memeriksa jika ``value`` telah ditandai kurang dari ``max_age`` detik "
"lampau, sebalinya memunculkan ``SignatureExpired``. parameter ``max_age`` "
"dapat menerima sebuah integer atau sebuah obyek :py:class:`datetime."
"timedelta`."

msgid ""
"Encode, optionally compress, append current timestamp, and sign complex data "
"structure (e.g. list, tuple, or dictionary)."
msgstr ""

msgid ""
"Checks if ``signed_obj`` was signed less than ``max_age`` seconds ago, "
"otherwise raises ``SignatureExpired``. The ``max_age`` parameter can accept "
"an integer or a :py:class:`datetime.timedelta` object."
msgstr ""

msgid "Protecting complex data structures"
msgstr "Melindungi struktur data rumit"

msgid ""
"If you wish to protect a list, tuple or dictionary you can do so using the "
"``Signer.sign_object()`` and ``unsign_object()`` methods, or signing "
"module's ``dumps()`` or ``loads()`` functions (which are shortcuts for "
"``TimestampSigner(salt='django.core.signing').sign_object()/"
"unsign_object()``). These use JSON serialization under the hood. JSON "
"ensures that even if your :setting:`SECRET_KEY` is stolen an attacker will "
"not be able to execute arbitrary commands by exploiting the pickle format::"
msgstr ""

msgid ""
"Because of the nature of JSON (there is no native distinction between lists "
"and tuples) if you pass in a tuple, you will get a list from ``signing."
"loads(object)``::"
msgstr ""

msgid ""
"Returns URL-safe, signed base64 compressed JSON string. Serialized object is "
"signed using :class:`~TimestampSigner`."
msgstr ""

msgid ""
"Reverse of ``dumps()``, raises ``BadSignature`` if signature fails. Checks "
"``max_age`` (in seconds) if given."
msgstr ""
"Membalikkan ``dumps()``, memunculkan ``BadSignature`` jika tanda tangan "
"gagal. memeriksa ``max_age`` (dalam detik) jika diberikan. "

msgid "Templates"
msgstr "Cetakan"

msgid ""
"Being a web framework, Django needs a convenient way to generate HTML "
"dynamically. The most common approach relies on templates. A template "
"contains the static parts of the desired HTML output as well as some special "
"syntax describing how dynamic content will be inserted. For a hands-on "
"example of creating HTML pages with templates, see :doc:`Tutorial 3 </intro/"
"tutorial03>`."
msgstr ""

msgid ""
"A Django project can be configured with one or several template engines (or "
"even zero if you don't use templates). Django ships built-in backends for "
"its own template system, creatively called the Django template language "
"(DTL), and for the popular alternative Jinja2_. Backends for other template "
"languages may be available from third-parties. You can also write your own "
"custom backend, see :doc:`Custom template backend </howto/custom-template-"
"backend>`"
msgstr ""

msgid ""
"Django defines a standard API for loading and rendering templates regardless "
"of the backend. Loading consists of finding the template for a given "
"identifier and preprocessing it, usually compiling it to an in-memory "
"representation. Rendering means interpolating the template with context data "
"and returning the resulting string."
msgstr ""

msgid ""
"The :doc:`Django template language </ref/templates/language>` is Django's "
"own template system. Until Django 1.8 it was the only built-in option "
"available. It's a good template library even though it's fairly opinionated "
"and sports a few idiosyncrasies. If you don't have a pressing reason to "
"choose another backend, you should use the DTL, especially if you're writing "
"a pluggable application and you intend to distribute templates. Django's "
"contrib apps that include templates, like :doc:`django.contrib.admin </ref/"
"contrib/admin/index>`, use the DTL."
msgstr ""

msgid ""
"For historical reasons, both the generic support for template engines and "
"the implementation of the Django template language live in the ``django."
"template`` namespace."
msgstr ""

msgid ""
"The template system isn't safe against untrusted template authors. For "
"example, a site shouldn't allow its users to provide their own templates, "
"since template authors can do things like perform XSS attacks and access "
"properties of template variables that may contain sensitive information."
msgstr ""

msgid "The Django template language"
msgstr "Bahasa cetakan Django"

msgid "Syntax"
msgstr "Sintaksis"

msgid "About this section"
msgstr "Tentang bagian ini"

msgid ""
"This is an overview of the Django template language's syntax. For details "
"see the :doc:`language syntax reference </ref/templates/language>`."
msgstr ""

msgid ""
"A Django template is a text document or a Python string marked-up using the "
"Django template language. Some constructs are recognized and interpreted by "
"the template engine. The main ones are variables and tags."
msgstr ""

msgid ""
"A template is rendered with a context. Rendering replaces variables with "
"their values, which are looked up in the context, and executes tags. "
"Everything else is output as is."
msgstr ""

msgid "The syntax of the Django template language involves four constructs."
msgstr ""

msgid "Variables"
msgstr "Variabel"

msgid ""
"A variable outputs a value from the context, which is a dict-like object "
"mapping keys to values."
msgstr ""

msgid "Variables are surrounded by ``{{`` and ``}}`` like this::"
msgstr "Variabel dikelilingi oleh ``{{`` dan ``}}`` seperti ini::"

msgid ""
"With a context of ``{'first_name': 'John', 'last_name': 'Doe'}``, this "
"template renders to::"
msgstr ""

msgid ""
"Dictionary lookup, attribute lookup and list-index lookups are implemented "
"with a dot notation::"
msgstr ""

msgid ""
"If a variable resolves to a callable, the template system will call it with "
"no arguments and use its result instead of the callable."
msgstr ""

msgid "Tags"
msgstr "Tag"

msgid "Tags provide arbitrary logic in the rendering process."
msgstr ""

msgid ""
"This definition is deliberately vague. For example, a tag can output "
"content, serve as a control structure e.g. an \"if\" statement or a \"for\" "
"loop, grab content from a database, or even enable access to other template "
"tags."
msgstr ""

msgid "Tags are surrounded by ``{%`` and ``%}`` like this::"
msgstr "Etiket dikelilingi oleh ``{%`` and ``%}`` seperti ini::"

msgid "Most tags accept arguments::"
msgstr "Kebanyakan etiket menerima argumen::"

msgid "Some tags require beginning and ending tags::"
msgstr ""

msgid ""
"A :ref:`reference of built-in tags <ref-templates-builtins-tags>` is "
"available as well as :ref:`instructions for writing custom tags <howto-"
"writing-custom-template-tags>`."
msgstr ""

msgid "Filters transform the values of variables and tag arguments."
msgstr ""

msgid "They look like this::"
msgstr "Mereka kelihatan seperti ini::"

msgid ""
"With a context of ``{'django': 'the web framework for perfectionists with "
"deadlines'}``, this template renders to::"
msgstr ""

msgid "Some filters take an argument::"
msgstr "Beberapa saringan mengambil sebuah argumen::"

msgid ""
"A :ref:`reference of built-in filters <ref-templates-builtins-filters>` is "
"available as well as :ref:`instructions for writing custom filters <howto-"
"writing-custom-template-filters>`."
msgstr ""

msgid "Comments look like this::"
msgstr "Komentar kelihatan seperti ini::"

msgid "A :ttag:`{% comment %} <comment>` tag provides multi-line comments."
msgstr ""

msgid "Components"
msgstr "Komponen"

msgid ""
"This is an overview of the Django template language's APIs. For details see "
"the :doc:`API reference </ref/templates/api>`."
msgstr ""

msgid "Engine"
msgstr "Mesin"

msgid ""
":class:`django.template.Engine` encapsulates an instance of the Django "
"template system. The main reason for instantiating an :class:`~django."
"template.Engine` directly is to use the Django template language outside of "
"a Django project."
msgstr ""

msgid ""
":class:`django.template.backends.django.DjangoTemplates` is a thin wrapper "
"adapting :class:`django.template.Engine` to Django's template backend API."
msgstr ""

msgid "Template"
msgstr "Cetakan"

msgid ""
":class:`django.template.Template` represents a compiled template. Templates "
"are obtained with :meth:`.Engine.get_template` or :meth:`.Engine."
"from_string`."
msgstr ""

msgid ""
"Likewise ``django.template.backends.django.Template`` is a thin wrapper "
"adapting :class:`django.template.Template` to the common template API."
msgstr ""

msgid "Context"
msgstr "Konteks"

msgid ""
":class:`django.template.Context` holds some metadata in addition to the "
"context data. It is passed to :meth:`.Template.render` for rendering a "
"template."
msgstr ""

msgid ""
":class:`django.template.RequestContext` is a subclass of :class:`~django."
"template.Context` that stores the current :class:`~django.http.HttpRequest` "
"and runs template context processors."
msgstr ""

msgid ""
"The common API doesn't have an equivalent concept. Context data is passed in "
"a plain :class:`dict` and the current :class:`~django.http.HttpRequest` is "
"passed separately if needed."
msgstr ""

msgid "Loaders"
msgstr "Pemuat"

msgid ""
"Template loaders are responsible for locating templates, loading them, and "
"returning :class:`~django.template.Template` objects."
msgstr ""

msgid ""
"Django provides several :ref:`built-in template loaders <template-loaders>` "
"and supports :ref:`custom template loaders <custom-template-loaders>`."
msgstr ""

msgid "Context processors"
msgstr ""

msgid ""
"Context processors are functions that receive the current :class:`~django."
"http.HttpRequest` as an argument and return a :class:`dict` of data to be "
"added to the rendering context."
msgstr ""

msgid ""
"Their main use is to add common data shared by all templates to the context "
"without repeating code in every view."
msgstr ""

msgid ""
"Django provides many :ref:`built-in context processors <context-"
"processors>`, and you can implement your own additional context processors, "
"too."
msgstr ""

msgid "Support for template engines"
msgstr "Mendukung untuk mesin cetakan"

msgid "Configuration"
msgstr "Pengaturan"

msgid ""
"Templates engines are configured with the :setting:`TEMPLATES` setting. It's "
"a list of configurations, one for each engine. The default value is empty. "
"The ``settings.py`` generated by the :djadmin:`startproject` command defines "
"a more useful value::"
msgstr ""

msgid ""
":setting:`BACKEND <TEMPLATES-BACKEND>` is a dotted Python path to a template "
"engine class implementing Django's template backend API. The built-in "
"backends are :class:`django.template.backends.django.DjangoTemplates` and :"
"class:`django.template.backends.jinja2.Jinja2`."
msgstr ""

msgid ""
"Since most engines load templates from files, the top-level configuration "
"for each engine contains two common settings:"
msgstr ""

msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` defines a list of directories where the "
"engine should look for template source files, in search order."
msgstr ""

msgid ""
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>` tells whether the engine should "
"look for templates inside installed applications. Each backend defines a "
"conventional name for the subdirectory inside applications where its "
"templates should be stored."
msgstr ""

msgid ""
"While uncommon, it's possible to configure several instances of the same "
"backend with different options. In that case you should define a unique :"
"setting:`NAME <TEMPLATES-NAME>` for each engine."
msgstr ""

msgid ""
":setting:`OPTIONS <TEMPLATES-OPTIONS>` contains backend-specific settings."
msgstr ""

msgid ""
"The ``django.template.loader`` module defines two functions to load "
"templates."
msgstr ""

msgid ""
"This function loads the template with the given name and returns a "
"``Template`` object."
msgstr ""

msgid ""
"The exact type of the return value depends on the backend that loaded the "
"template. Each backend has its own ``Template`` class."
msgstr ""

msgid ""
"``get_template()`` tries each template engine in order until one succeeds. "
"If the template cannot be found, it raises :exc:`~django.template."
"TemplateDoesNotExist`. If the template is found but contains invalid syntax, "
"it raises :exc:`~django.template.TemplateSyntaxError`."
msgstr ""

msgid ""
"How templates are searched and loaded depends on each engine's backend and "
"configuration."
msgstr ""

msgid ""
"If you want to restrict the search to a particular template engine, pass the "
"engine's :setting:`NAME <TEMPLATES-NAME>` in the ``using`` argument."
msgstr ""

msgid ""
"``select_template()`` is just like ``get_template()``, except it takes a "
"list of template names. It tries each name in order and returns the first "
"template that exists."
msgstr ""

msgid ""
"If loading a template fails, the following two exceptions, defined in "
"``django.template``, may be raised:"
msgstr ""

msgid ""
"This exception is raised when a template cannot be found. It accepts the "
"following optional arguments for populating the :ref:`template postmortem "
"<template-postmortem>` on the debug page:"
msgstr ""

msgid "``backend``"
msgstr "``backend``"

msgid "The template backend instance from which the exception originated."
msgstr ""

msgid "``tried``"
msgstr "``tried``"

msgid ""
"A list of sources that were tried when finding the template. This is "
"formatted as a list of tuples containing ``(origin, status)``, where "
"``origin`` is an :ref:`origin-like <template-origin-api>` object and "
"``status`` is a string with the reason the template wasn't found."
msgstr ""

msgid "``chain``"
msgstr "``chain``"

msgid ""
"A list of intermediate :exc:`~django.template.TemplateDoesNotExist` "
"exceptions raised when trying to load a template. This is used by functions, "
"such as :func:`~django.template.loader.get_template`, that try to load a "
"given template from multiple engines."
msgstr ""

msgid "This exception is raised when a template was found but contains errors."
msgstr ""
"Pengecualian ini muncul ketika sebuah cetakan telah ditemukan tetapi "
"mengandung kesalahan."

msgid ""
"``Template`` objects returned by ``get_template()`` and "
"``select_template()`` must provide a ``render()`` method with the following "
"signature:"
msgstr ""

msgid "Renders this template with a given context."
msgstr ""

msgid ""
"If ``context`` is provided, it must be a :class:`dict`. If it isn't "
"provided, the engine will render the template with an empty context."
msgstr ""

msgid ""
"If ``request`` is provided, it must be an :class:`~django.http.HttpRequest`. "
"Then the engine must make it, as well as the CSRF token, available in the "
"template. How this is achieved is up to each backend."
msgstr ""

msgid ""
"Here's an example of the search algorithm. For this example the :setting:"
"`TEMPLATES` setting is::"
msgstr ""

msgid ""
"If you call ``get_template('story_detail.html')``, here are the files Django "
"will look for, in order:"
msgstr ""
"Jika anda memanggil ``get_template('story_detail.html')``, ini adalah berkas "
"Django akan mencari, agar:"

msgid "``/home/html/example.com/story_detail.html`` (``'django'`` engine)"
msgstr "``/home/html/example.com/story_detail.html`` (mesin ``'django'``)"

msgid "``/home/html/default/story_detail.html`` (``'django'`` engine)"
msgstr "``/home/html/default/story_detail.html`` (mesin ``'django'``)"

msgid "``/home/html/jinja2/story_detail.html`` (``'jinja2'`` engine)"
msgstr "``/home/html/jinja2/story_detail.html`` (mesin ``'jinja2'``)"

msgid ""
"If you call ``select_template(['story_253_detail.html', 'story_detail."
"html'])``, here's what Django will look for:"
msgstr ""

msgid "``/home/html/example.com/story_253_detail.html`` (``'django'`` engine)"
msgstr "``/home/html/example.com/story_253_detail.html`` (mesin ``'django'``)"

msgid "``/home/html/default/story_253_detail.html`` (``'django'`` engine)"
msgstr "``/home/html/default/story_253_detail.html`` (mesin ``'django'``)"

msgid "``/home/html/jinja2/story_253_detail.html`` (``'jinja2'`` engine)"
msgstr "``/home/html/jinja2/story_253_detail.html`` (mesin ``'jinja2'``)"

msgid "When Django finds a template that exists, it stops looking."
msgstr "Ketika Django menemukan cetakan yang ada, dia berhenti mencari."

msgid "Tip"
msgstr "Nasihat"

msgid ""
"You can use :func:`~django.template.loader.select_template()` for flexible "
"template loading. For example, if you've written a news story and want some "
"stories to have custom templates, use something like "
"``select_template(['story_%s_detail.html' % story.id, 'story_detail."
"html'])``. That'll allow you to use a custom template for an individual "
"story, with a fallback template for stories that don't have custom templates."
msgstr ""

msgid ""
"It's possible -- and preferable -- to organize templates in subdirectories "
"inside each directory containing templates. The convention is to make a "
"subdirectory for each Django app, with subdirectories within those "
"subdirectories as needed."
msgstr ""

msgid ""
"Do this for your own sanity. Storing all templates in the root level of a "
"single directory gets messy."
msgstr ""

msgid "To load a template that's within a subdirectory, use a slash, like so::"
msgstr ""

msgid ""
"Using the same :setting:`TEMPLATES` option as above, this will attempt to "
"load the following templates:"
msgstr ""

msgid "``/home/html/example.com/news/story_detail.html`` (``'django'`` engine)"
msgstr "``/home/html/example.com/news/story_detail.html`` (mesin ``'django'``)"

msgid "``/home/html/default/news/story_detail.html`` (``'django'`` engine)"
msgstr "``/home/html/default/news/story_detail.html`` (mesin ``'django'``)"

msgid "``/home/html/jinja2/news/story_detail.html`` (``'jinja2'`` engine)"
msgstr "``/home/html/jinja2/news/story_detail.html`` (mesin ``'jinja2'``)"

msgid ""
"In addition, to cut down on the repetitive nature of loading and rendering "
"templates, Django provides a shortcut function which automates the process."
msgstr ""

msgid ""
"``render_to_string()`` loads a template like :func:`get_template` and calls "
"its ``render()`` method immediately. It takes the following arguments."
msgstr ""

msgid ""
"The name of the template to load and render. If it's a list of template "
"names, Django uses :func:`select_template` instead of :func:`get_template` "
"to find the template."
msgstr ""

msgid "A :class:`dict` to be used as the template's context for rendering."
msgstr ""

msgid ""
"An optional :class:`~django.http.HttpRequest` that will be available during "
"the template's rendering process."
msgstr ""

msgid ""
"An optional template engine :setting:`NAME <TEMPLATES-NAME>`. The search for "
"the template will be restricted to that engine."
msgstr ""

msgid "Usage example::"
msgstr ""

msgid ""
"See also the :func:`~django.shortcuts.render()` shortcut which calls :func:"
"`render_to_string()` and feeds the result into an :class:`~django.http."
"HttpResponse` suitable for returning from a view."
msgstr ""

msgid "Finally, you can use configured engines directly:"
msgstr ""

msgid "Template engines are available in ``django.template.engines``::"
msgstr "Mesin cetakan tersedia dalam ``django.template.engines``::"

msgid ""
"The lookup key — ``'django'`` in this example — is the engine's :setting:"
"`NAME <TEMPLATES-NAME>`."
msgstr ""

msgid "Built-in backends"
msgstr ""

msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to ``'django.template.backends."
"django.DjangoTemplates'`` to configure a Django template engine."
msgstr ""

msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, "
"``DjangoTemplates`` engines look for templates in the ``templates`` "
"subdirectory of installed applications. This generic name was kept for "
"backwards-compatibility."
msgstr ""

msgid ""
"``DjangoTemplates`` engines accept the following :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>`:"
msgstr ""

msgid ""
"``'autoescape'``: a boolean that controls whether HTML autoescaping is "
"enabled."
msgstr ""

msgid "It defaults to ``True``."
msgstr "Itu awalan untuk ``True``."

msgid "Only set it to ``False`` if you're rendering non-HTML templates!"
msgstr ""
"Hanya disetel untuk ``False`` jika anda sedang membangun cetakan bukan-HTML!"

msgid ""
"``'context_processors'``: a list of dotted Python paths to callables that "
"are used to populate the context when a template is rendered with a request. "
"These callables take a request object as their argument and return a :class:"
"`dict` of items to be merged into the context."
msgstr ""

msgid "It defaults to an empty list."
msgstr "Itu awalan pada sebuah list kosong."

msgid "See :class:`~django.template.RequestContext` for more information."
msgstr "Lihat :class:`~django.template.RequestContext` untuk informasi lebih."

msgid ""
"``'debug'``: a boolean that turns on/off template debug mode. If it is "
"``True``, the fancy error page will display a detailed report for any "
"exception raised during template rendering. This report contains the "
"relevant snippet of the template with the appropriate line highlighted."
msgstr ""

msgid "It defaults to the value of the :setting:`DEBUG` setting."
msgstr ""

msgid ""
"``'loaders'``: a list of dotted Python paths to template loader classes. "
"Each ``Loader`` class knows how to import templates from a particular "
"source. Optionally, a tuple can be used instead of a string. The first item "
"in the tuple should be the ``Loader`` class name, and subsequent items are "
"passed to the ``Loader`` during initialization."
msgstr ""

msgid ""
"The default depends on the values of :setting:`DIRS <TEMPLATES-DIRS>` and :"
"setting:`APP_DIRS <TEMPLATES-APP_DIRS>`."
msgstr ""

msgid "See :ref:`template-loaders` for details."
msgstr "Lihat :ref:`template-loaders`  untuk lebih rinci."

msgid ""
"``'string_if_invalid'``: the output, as a string, that the template system "
"should use for invalid (e.g. misspelled) variables."
msgstr ""
"``'string_if_invalid'``: keluaran, sebagai sebuah string, yang sistem "
"cetakan harus digunakan untuk varaibel tidak sah (sebagai contoh salah eja)."

msgid "It defaults to an empty string."
msgstr "Itu awalan pada sebuah string kosong."

msgid "See :ref:`invalid-template-variables` for details."
msgstr "Lihat :ref:`invalid-template-variables` untuk rincian."

msgid "``'file_charset'``: the charset used to read template files on disk."
msgstr ""
"``'file_charset'``: charset digunakan untuk membaca cetakan berkas-berkas "
"pada cakram."

msgid "It defaults to ``'utf-8'``."
msgstr "Itu awalan untuk ``'utf-8'``."

msgid ""
"``'libraries'``: A dictionary of labels and dotted Python paths of template "
"tag modules to register with the template engine. This can be used to add "
"new libraries or provide alternate labels for existing ones. For example::"
msgstr ""

msgid ""
"Libraries can be loaded by passing the corresponding dictionary key to the :"
"ttag:`{% load %}<load>` tag."
msgstr ""
"Pustaka-pustaka dapat dimuat dengan melewatkan kunci dictionary sesuai ke "
"etiket :ttag:`{% load %}1`."

msgid ""
"``'builtins'``: A list of dotted Python paths of template tag modules to add "
"to :doc:`built-ins </ref/templates/builtins>`. For example::"
msgstr ""

msgid ""
"Tags and filters from built-in libraries can be used without first calling "
"the :ttag:`{% load %} <load>` tag."
msgstr ""

msgid "Requires Jinja2_ to be installed:"
msgstr "Membutuhkan Jinja2_ untuk dipasang:"

msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to ``'django.template.backends."
"jinja2.Jinja2'`` to configure a Jinja2_ engine."
msgstr ""
"Setel :setting:`BACKEND 1` pada ``'django.template.backends.jinja2."
"Jinja2'`` untuk mengkonfigurasi mesin Jinja2_."

msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, ``Jinja2`` "
"engines look for templates in the ``jinja2`` subdirectory of installed "
"applications."
msgstr ""
"Ketika :setting:`APP_DIRS 1` adalah ``True``, mesin-mesin ``Jinja2`` mencari "
"cetakan-cetakan dalam subdirektori ``jinja2`` dari aplikasi terpasang."

msgid ""
"The most important entry in :setting:`OPTIONS <TEMPLATES-OPTIONS>` is "
"``'environment'``. It's a dotted Python path to a callable returning a "
"Jinja2 environment. It defaults to ``'jinja2.Environment'``. Django invokes "
"that callable and passes other options as keyword arguments. Furthermore, "
"Django adds defaults that differ from Jinja2's for a few options:"
msgstr ""

msgid "``'autoescape'``: ``True``"
msgstr "``'autoescape'``: ``True``"

msgid ""
"``'loader'``: a loader configured for :setting:`DIRS <TEMPLATES-DIRS>` and :"
"setting:`APP_DIRS <TEMPLATES-APP_DIRS>`"
msgstr ""

msgid "``'auto_reload'``: ``settings.DEBUG``"
msgstr "``'auto_reload'``: ``settings.DEBUG``"

msgid "``'undefined'``: ``DebugUndefined if settings.DEBUG else Undefined``"
msgstr ""

msgid ""
"``Jinja2`` engines also accept the following :setting:`OPTIONS <TEMPLATES-"
"OPTIONS>`:"
msgstr ""

msgid "Using context processors with Jinja2 templates is discouraged."
msgstr ""

msgid ""
"Context processors are useful with Django templates because Django templates "
"don't support calling functions with arguments. Since Jinja2 doesn't have "
"that limitation, it's recommended to put the function that you would use as "
"a context processor in the global variables available to the template using "
"``jinja2.Environment`` as described below. You can then call that function "
"in the template:"
msgstr ""

msgid ""
"Some Django templates context processors return a fixed value. For Jinja2 "
"templates, this layer of indirection isn't necessary since you can add "
"constants directly in ``jinja2.Environment``."
msgstr ""

msgid ""
"The original use case for adding context processors for Jinja2 involved:"
msgstr ""

msgid "Making an expensive computation that depends on the request."
msgstr ""

msgid "Needing the result in every template."
msgstr ""

msgid "Using the result multiple times in each template."
msgstr ""

msgid ""
"Unless all of these conditions are met, passing a function to the template "
"is more in line with the design of Jinja2."
msgstr ""

msgid ""
"The default configuration is purposefully kept to a minimum. If a template "
"is rendered with a request (e.g. when using :py:func:`~django.shortcuts."
"render`), the ``Jinja2`` backend adds the globals ``request``, "
"``csrf_input``, and ``csrf_token`` to the context. Apart from that, this "
"backend doesn't create a Django-flavored environment. It doesn't know about "
"Django filters and tags. In order to use Django-specific APIs, you must "
"configure them into the environment."
msgstr ""

msgid "For example, you can create ``myproject/jinja2.py`` with this content::"
msgstr ""

msgid ""
"and set the ``'environment'`` option to ``'myproject.jinja2.environment'``."
msgstr ""

msgid "Then you could use the following constructs in Jinja2 templates:"
msgstr ""

msgid ""
"The concepts of tags and filters exist both in the Django template language "
"and in Jinja2 but they're used differently. Since Jinja2 supports passing "
"arguments to callables in templates, many features that require a template "
"tag or filter in Django templates can be achieved by calling a function in "
"Jinja2 templates, as shown in the example above. Jinja2's global namespace "
"removes the need for template context processors. The Django template "
"language doesn't have an equivalent of Jinja2 tests."
msgstr ""

msgid "Advanced testing topics"
msgstr ""

msgid "The request factory"
msgstr ""

msgid ""
"The :class:`~django.test.RequestFactory` shares the same API as the test "
"client. However, instead of behaving like a browser, the RequestFactory "
"provides a way to generate a request instance that can be used as the first "
"argument to any view. This means you can test a view function the same way "
"as you would test any other function -- as a black box, with exactly known "
"inputs, testing for specific outputs."
msgstr ""

msgid ""
"The API for the :class:`~django.test.RequestFactory` is a slightly "
"restricted subset of the test client API:"
msgstr ""

msgid ""
"It only has access to the HTTP methods :meth:`~Client.get()`, :meth:`~Client."
"post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, :meth:`~Client."
"head()`, :meth:`~Client.options()`, and :meth:`~Client.trace()`."
msgstr ""

msgid ""
"These methods accept all the same arguments *except* for ``follow``. Since "
"this is just a factory for producing requests, it's up to you to handle the "
"response."
msgstr ""

msgid ""
"It does not support middleware. Session and authentication attributes must "
"be supplied by the test itself if required for the view to function properly."
msgstr ""

msgid "The following is a unit test using the request factory::"
msgstr ""

msgid "AsyncRequestFactory"
msgstr ""

msgid ""
"``RequestFactory`` creates WSGI-like requests. If you want to create ASGI-"
"like requests, including having a correct ASGI ``scope``, you can instead "
"use ``django.test.AsyncRequestFactory``."
msgstr ""

msgid ""
"This class is directly API-compatible with ``RequestFactory``, with the only "
"difference being that it returns ``ASGIRequest`` instances rather than "
"``WSGIRequest`` instances. All of its methods are still synchronous "
"callables."
msgstr ""

msgid "Testing class-based views"
msgstr ""

msgid ""
"In order to test class-based views outside of the request/response cycle you "
"must ensure that they are configured correctly, by calling :meth:`~django."
"views.generic.base.View.setup` after instantiation."
msgstr ""

msgid "For example, assuming the following class-based view:"
msgstr ""

msgid ""
"You may directly test the ``get_context_data()`` method by first "
"instantiating the view, then passing a ``request`` to ``setup()``, before "
"proceeding with your test's code:"
msgstr ""

msgid "``tests.py``"
msgstr ""

msgid "Tests and multiple host names"
msgstr ""

msgid ""
"The :setting:`ALLOWED_HOSTS` setting is validated when running tests. This "
"allows the test client to differentiate between internal and external URLs."
msgstr ""

msgid ""
"Projects that support multitenancy or otherwise alter business logic based "
"on the request's host and use custom host names in tests must include those "
"hosts in :setting:`ALLOWED_HOSTS`."
msgstr ""

msgid ""
"The first option to do so is to add the hosts to your settings file. For "
"example, the test suite for docs.djangoproject.com includes the following::"
msgstr ""

msgid ""
"and the settings file includes a list of the domains supported by the "
"project::"
msgstr ""

msgid ""
"Another option is to add the required hosts to :setting:`ALLOWED_HOSTS` "
"using :meth:`~django.test.override_settings()` or :attr:`~django.test."
"SimpleTestCase.modify_settings()`. This option may be preferable in "
"standalone apps that can't package their own settings file or for projects "
"where the list of domains is not static (e.g., subdomains for multitenancy). "
"For example, you could write a test for the domain ``http://otherserver/`` "
"as follows::"
msgstr ""

msgid ""
"Disabling :setting:`ALLOWED_HOSTS` checking (``ALLOWED_HOSTS = ['*']``) when "
"running tests prevents the test client from raising a helpful error message "
"if you follow a redirect to an external URL."
msgstr ""

msgid "Tests and multiple databases"
msgstr "Uji coba  dan multi database"

msgid "Testing primary/replica configurations"
msgstr ""

msgid ""
"If you're testing a multiple database configuration with primary/replica "
"(referred to as master/slave by some databases) replication, this strategy "
"of creating test databases poses a problem. When the test databases are "
"created, there won't be any replication, and as a result, data created on "
"the primary won't be seen on the replica."
msgstr ""

msgid ""
"To compensate for this, Django allows you to define that a database is a "
"*test mirror*. Consider the following (simplified) example database "
"configuration::"
msgstr ""

msgid ""
"In this setup, we have two database servers: ``dbprimary``, described by the "
"database alias ``default``, and ``dbreplica`` described by the alias "
"``replica``. As you might expect, ``dbreplica`` has been configured by the "
"database administrator as a read replica of ``dbprimary``, so in normal "
"activity, any write to ``default`` will appear on ``replica``."
msgstr ""

msgid ""
"If Django created two independent test databases, this would break any tests "
"that expected replication to occur. However, the ``replica`` database has "
"been configured as a test mirror (using the :setting:`MIRROR <TEST_MIRROR>` "
"test setting), indicating that under testing, ``replica`` should be treated "
"as a mirror of ``default``."
msgstr ""

msgid ""
"When the test environment is configured, a test version of ``replica`` will "
"*not* be created. Instead the connection to ``replica`` will be redirected "
"to point at ``default``. As a result, writes to ``default`` will appear on "
"``replica`` -- but because they are actually the same database, not because "
"there is data replication between the two databases."
msgstr ""

msgid "Controlling creation order for test databases"
msgstr "Mengendalikan pembuatan urutan untuk basisdata percobaan"

msgid ""
"By default, Django will assume all databases depend on the ``default`` "
"database and therefore always create the ``default`` database first. "
"However, no guarantees are made on the creation order of any other databases "
"in your test setup."
msgstr ""

msgid ""
"If your database configuration requires a specific creation order, you can "
"specify the dependencies that exist using the :setting:`DEPENDENCIES "
"<TEST_DEPENDENCIES>` test setting. Consider the following (simplified) "
"example database configuration::"
msgstr ""

msgid ""
"Under this configuration, the ``diamonds`` database will be created first, "
"as it is the only database alias without dependencies. The ``default`` and "
"``clubs`` alias will be created next (although the order of creation of this "
"pair is not guaranteed), then ``hearts``, and finally ``spades``."
msgstr ""

msgid ""
"If there are any circular dependencies in the :setting:`DEPENDENCIES "
"<TEST_DEPENDENCIES>` definition, an :exc:`~django.core.exceptions."
"ImproperlyConfigured` exception will be raised."
msgstr ""

msgid "Advanced features of ``TransactionTestCase``"
msgstr "Fitus-fitur lanjutan dari ``TransactionTestCase``"

msgid ""
"This attribute is a private API. It may be changed or removed without a "
"deprecation period in the future, for instance to accommodate changes in "
"application loading."
msgstr ""
"Atribut ini adalah API pribadi. Itu mungkin berubah atau dipindahkan tanpa "
"masa pengusangan di masa datang, sebagai contoh untuk menampung perubahan-"
"perubahan dalam memuat aplikasi."

msgid ""
"It's used to optimize Django's own test suite, which contains hundreds of "
"models but no relations between models in different applications."
msgstr ""
"Itu digunakan untuk memaksimalkan deretan percobaan sendiri Djangom, yang "
"mengandung ratusan dari model-model tetapi tidak ada hubungan diantara model-"
"model dalam aplikasi berbeda."

msgid ""
"By default, ``available_apps`` is set to ``None``. After each test, Django "
"calls :djadmin:`flush` to reset the database state. This empties all tables "
"and emits the :data:`~django.db.models.signals.post_migrate` signal, which "
"recreates one content type and four permissions for each model. This "
"operation gets expensive proportionally to the number of models."
msgstr ""

msgid ""
"Setting ``available_apps`` to a list of applications instructs Django to "
"behave as if only the models from these applications were available. The "
"behavior of ``TransactionTestCase`` changes as follows:"
msgstr ""

msgid ""
":data:`~django.db.models.signals.post_migrate` is fired before each test to "
"create the content types and permissions for each model in available apps, "
"in case they're missing."
msgstr ""
":data:`~django.db.models.signals.post_migrate` dinyalakan sebelum setiap "
"percobaan membuat jenis-jenis isi dan perizinan untuk setiap model dalam "
"aplikasi tersedia, dalam kasus mereka hilang."

msgid ""
"After each test, Django empties only tables corresponding to models in "
"available apps. However, at the database level, truncation may cascade to "
"related models in unavailable apps. Furthermore :data:`~django.db.models."
"signals.post_migrate` isn't fired; it will be fired by the next "
"``TransactionTestCase``, after the correct set of applications is selected."
msgstr ""
"Setelah setiap percobaan, Django mengkosongkan hanya tabel-tabel sesuai ke "
"model dalam aplikasi tersedia. Bagaimanapun, pada tingkat basisdata, "
"pemotongan mungkin menurun pada model-model terkait dalam aplikasi tidak "
"tersedia. Lebih lanjut :data:`~django.db.models.signals.post_migrate` tidak "
"dinyalakan. Itu akan dinyalakan oleh ``TransactionTestCase`` selanjutnya, "
"setelah kumpulan benar dari aplikasi-aplikasi dipilih."

msgid ""
"Since the database isn't fully flushed, if a test creates instances of "
"models not included in ``available_apps``, they will leak and they may cause "
"unrelated tests to fail. Be careful with tests that use sessions; the "
"default session engine stores them in the database."
msgstr ""

msgid ""
"Since :data:`~django.db.models.signals.post_migrate` isn't emitted after "
"flushing the database, its state after a ``TransactionTestCase`` isn't the "
"same as after a ``TestCase``: it's missing the rows created by listeners to :"
"data:`~django.db.models.signals.post_migrate`. Considering the :ref:`order "
"in which tests are executed <order-of-tests>`, this isn't an issue, provided "
"either all ``TransactionTestCase`` in a given test suite declare "
"``available_apps``, or none of them."
msgstr ""

msgid "``available_apps`` is mandatory in Django's own test suite."
msgstr ""
"``available_apps`` adalah wajib dalam deretan percobaan Django sendiri."

msgid ""
"Setting ``reset_sequences = True`` on a ``TransactionTestCase`` will make "
"sure sequences are always reset before the test run::"
msgstr ""

msgid ""
"Unless you are explicitly testing primary keys sequence numbers, it is "
"recommended that you do not hard code primary key values in tests."
msgstr ""

msgid ""
"Using ``reset_sequences = True`` will slow down the test, since the primary "
"key reset is a relatively expensive database operation."
msgstr ""

msgid "Enforce running test classes sequentially"
msgstr ""

msgid ""
"If you have test classes that cannot be run in parallel (e.g. because they "
"share a common resource), you can use ``django.test.testcases."
"SerializeMixin`` to run them sequentially. This mixin uses a filesystem "
"``lockfile``."
msgstr ""

msgid ""
"For example, you can use ``__file__`` to determine that all test classes in "
"the same file that inherit from ``SerializeMixin`` will run sequentially::"
msgstr ""

msgid "Using the Django test runner to test reusable applications"
msgstr ""
"Menggunakan penjalan percobaan Django untuk menjalankan aplikasi digunakan "
"kembali"

msgid ""
"If you are writing a :doc:`reusable application </intro/reusable-apps>` you "
"may want to use the Django test runner to run your own test suite and thus "
"benefit from the Django testing infrastructure."
msgstr ""

msgid ""
"A common practice is a *tests* directory next to the application code, with "
"the following structure::"
msgstr ""

msgid "Let's take a look inside a couple of those files:"
msgstr "Mari kita lihat didalam sepasang berkas-berkas tersebut:"

msgid "``runtests.py``"
msgstr ""

msgid ""
"This is the script that you invoke to run the test suite. It sets up the "
"Django environment, creates the test database and runs the tests."
msgstr ""
"Ini adalah tulisan yang anda minta menjalankan deretan percobaan. itu "
"menyetel lingkungan Django, membuat basisdata percobaan dan menjalankan "
"percobaan."

msgid ""
"For the sake of clarity, this example contains only the bare minimum "
"necessary to use the Django test runner. You may want to add command-line "
"options for controlling verbosity, passing in specific test labels to run, "
"etc."
msgstr ""

msgid "``tests/test_settings.py``"
msgstr ""

msgid ""
"This file contains the :doc:`Django settings </topics/settings>` required to "
"run your app's tests."
msgstr ""
"Berkas ini mengandung :doc:`Django settings </topics/settings>` dibutuhkan "
"untuk menjalankan aplikasi percobaan anda."

msgid ""
"Again, this is a minimal example; your tests may require additional settings "
"to run."
msgstr ""
"Kembali, ini adalah cotoh minimal; percobaan anda mungkin membutuhkan "
"pengaturan tambahan untuk berjalan."

msgid ""
"Since the *tests* package is included in :setting:`INSTALLED_APPS` when "
"running your tests, you can define test-only models in its ``models.py`` "
"file."
msgstr ""

msgid "Using different testing frameworks"
msgstr "Menggunakan kerangka percobaan berbeda"

msgid ""
"Clearly, :mod:`unittest` is not the only Python testing framework. While "
"Django doesn't provide explicit support for alternative frameworks, it does "
"provide a way to invoke tests constructed for an alternative framework as if "
"they were normal Django tests."
msgstr ""

msgid ""
"When you run ``./manage.py test``, Django looks at the :setting:"
"`TEST_RUNNER` setting to determine what to do. By default, :setting:"
"`TEST_RUNNER` points to ``'django.test.runner.DiscoverRunner'``. This class "
"defines the default Django testing behavior. This behavior involves:"
msgstr ""

msgid "Performing global pre-test setup."
msgstr ""

msgid ""
"Looking for tests in any file below the current directory whose name matches "
"the pattern ``test*.py``."
msgstr ""

msgid "Creating the test databases."
msgstr "Membuat basisdata percobaan."

msgid ""
"Running ``migrate`` to install models and initial data into the test "
"databases."
msgstr ""

msgid "Running the :doc:`system checks </topics/checks>`."
msgstr "Menjalankan :doc:`system checks </topics/checks>`."

msgid "Running the tests that were found."
msgstr "Menjalankan percobaan yang ditemukan."

msgid "Destroying the test databases."
msgstr "Menghancurkan basisdata percobaan."

msgid "Performing global post-test teardown."
msgstr ""

msgid ""
"If you define your own test runner class and point :setting:`TEST_RUNNER` at "
"that class, Django will execute your test runner whenever you run ``./manage."
"py test``. In this way, it is possible to use any test framework that can be "
"executed from Python code, or to modify the Django test execution process to "
"satisfy whatever testing requirements you may have."
msgstr ""

msgid "Defining a test runner"
msgstr ""

msgid ""
"A test runner is a class defining a ``run_tests()`` method. Django ships "
"with a ``DiscoverRunner`` class that defines the default Django testing "
"behavior. This class defines the ``run_tests()`` entry point, plus a "
"selection of other methods that are used by ``run_tests()`` to set up, "
"execute and tear down the test suite."
msgstr ""

msgid ""
"``DiscoverRunner`` will search for tests in any file matching ``pattern``."
msgstr ""

msgid ""
"``top_level`` can be used to specify the directory containing your top-level "
"Python modules. Usually Django can figure this out automatically, so it's "
"not necessary to specify this option. If specified, it should generally be "
"the directory containing your ``manage.py`` file."
msgstr ""

msgid ""
"``verbosity`` determines the amount of notification and debug information "
"that will be printed to the console; ``0`` is no output, ``1`` is normal "
"output, and ``2`` is verbose output."
msgstr ""

msgid ""
"If ``interactive`` is ``True``, the test suite has permission to ask the "
"user for instructions when the test suite is executed. An example of this "
"behavior would be asking for permission to delete an existing test database. "
"If ``interactive`` is ``False``, the test suite must be able to run without "
"any manual intervention."
msgstr ""

msgid ""
"If ``failfast`` is ``True``, the test suite will stop running after the "
"first test failure is detected."
msgstr ""

msgid ""
"If ``keepdb`` is ``True``, the test suite will use the existing database, or "
"create one if necessary. If ``False``, a new database will be created, "
"prompting the user to remove the existing one, if present."
msgstr ""

msgid ""
"If ``reverse`` is ``True``, test cases will be executed in the opposite "
"order. This could be useful to debug tests that aren't properly isolated and "
"have side effects. :ref:`Grouping by test class <order-of-tests>` is "
"preserved when using this option. This option can be used in conjunction "
"with ``--shuffle`` to reverse the order for a particular random seed."
msgstr ""

msgid ""
"``debug_mode`` specifies what the :setting:`DEBUG` setting should be set to "
"prior to running tests."
msgstr ""

msgid ""
"``parallel`` specifies the number of processes.  If ``parallel`` is greater "
"than ``1``, the test suite will run in ``parallel`` processes. If there are "
"fewer test cases than configured processes, Django will reduce the number of "
"processes accordingly. Each process gets its own database. This option "
"requires the third-party ``tblib`` package to display tracebacks correctly."
msgstr ""

msgid ""
"``tags`` can be used to specify a set of :ref:`tags for filtering tests "
"<topics-tagging-tests>`. May be combined with ``exclude_tags``."
msgstr ""

msgid ""
"``exclude_tags`` can be used to specify a set of :ref:`tags for excluding "
"tests <topics-tagging-tests>`. May be combined with ``tags``."
msgstr ""

msgid ""
"If ``debug_sql`` is ``True``, failing test cases will output SQL queries "
"logged to the :ref:`django.db.backends logger <django-db-logger>` as well as "
"the traceback. If ``verbosity`` is ``2``, then queries in all tests are "
"output."
msgstr ""

msgid ""
"``test_name_patterns`` can be used to specify a set of patterns for "
"filtering test methods and classes by their names."
msgstr ""

msgid ""
"If ``pdb`` is ``True``, a debugger (``pdb`` or ``ipdb``) will be spawned at "
"each test error or failure."
msgstr ""

msgid ""
"If ``buffer`` is ``True``, outputs from passing tests will be discarded."
msgstr ""

msgid ""
"If ``enable_faulthandler`` is ``True``, :py:mod:`faulthandler` will be "
"enabled."
msgstr ""

msgid ""
"If ``timing`` is ``True``, test timings, including database setup and total "
"run time, will be shown."
msgstr ""

msgid ""
"If ``shuffle`` is an integer, test cases will be shuffled in a random order "
"prior to execution, using the integer as a random seed. If ``shuffle`` is "
"``None``, the seed will be generated randomly. In both cases, the seed will "
"be logged and set to ``self.shuffle_seed`` prior to running tests. This "
"option can be used to help detect tests that aren't properly isolated. :ref:"
"`Grouping by test class <order-of-tests>` is preserved when using this "
"option."
msgstr ""

msgid ""
"``logger`` can be used to pass a Python :py:ref:`Logger object <logger>`. If "
"provided, the logger will be used to log messages instead of printing to the "
"console. The logger object will respect its logging level rather than the "
"``verbosity``."
msgstr ""

msgid ""
"Django may, from time to time, extend the capabilities of the test runner by "
"adding new arguments. The ``**kwargs`` declaration allows for this "
"expansion. If you subclass ``DiscoverRunner`` or write your own test runner, "
"ensure it accepts ``**kwargs``."
msgstr ""

msgid ""
"Your test runner may also define additional command-line options. Create or "
"override an ``add_arguments(cls, parser)`` class method and add custom "
"arguments by calling ``parser.add_argument()`` inside the method, so that "
"the :djadmin:`test` command will be able to use those arguments."
msgstr ""

msgid "The ``enable_faulthandler`` and ``timing`` arguments were added."
msgstr ""

msgid "The ``logger`` and ``shuffle`` arguments were added."
msgstr ""

msgid "Attributes"
msgstr "Atribut"

msgid ""
"The class used to build the test suite. By default it is set to ``unittest."
"TestSuite``. This can be overridden if you wish to implement different logic "
"for collecting tests."
msgstr ""

msgid ""
"This is the class of the low-level test runner which is used to execute the "
"individual tests and format the results. By default it is set to ``unittest."
"TextTestRunner``. Despite the unfortunate similarity in naming conventions, "
"this is not the same type of class as ``DiscoverRunner``, which covers a "
"broader set of responsibilities. You can override this attribute to modify "
"the way tests are run and reported."
msgstr ""

msgid ""
"This is the class that loads tests, whether from TestCases or modules or "
"otherwise and bundles them into test suites for the runner to execute. By "
"default it is set to ``unittest.defaultTestLoader``. You can override this "
"attribute if your tests are going to be loaded in unusual ways."
msgstr ""

msgid "Methods"
msgstr "Cara"

msgid "Run the test suite."
msgstr "Jalankan deretan percobaan."

msgid ""
"``test_labels`` allows you to specify which tests to run and supports "
"several formats (see :meth:`DiscoverRunner.build_suite` for a list of "
"supported formats)."
msgstr ""

msgid ""
"``extra_tests`` is a list of extra ``TestCase`` instances to add to the "
"suite that is executed by the test runner. These extra tests are run in "
"addition to those discovered in the modules listed in ``test_labels``."
msgstr ""

msgid "This method should return the number of tests that failed."
msgstr "Cara ini harus mengembalikan angka dari percobaan yang gagal."

msgid ""
"Override this class method to add custom arguments accepted by the :djadmin:"
"`test` management command. See :py:meth:`argparse.ArgumentParser."
"add_argument()` for details about adding arguments to a parser."
msgstr ""

msgid ""
"Sets up the test environment by calling :func:`~django.test.utils."
"setup_test_environment` and setting :setting:`DEBUG` to ``self.debug_mode`` "
"(defaults to ``False``)."
msgstr ""

msgid "Constructs a test suite that matches the test labels provided."
msgstr ""
"Membangun rangkaian percobaan yang cocok dengan label percobaan disediakan."

msgid ""
"``test_labels`` is a list of strings describing the tests to be run. A test "
"label can take one of four forms:"
msgstr ""
"``test_labels`` adalah daftar dari string menggambarkan percobaan untuk "
"dijalankan. Sebuah label percobaan dapat mengambil satu dari empat bentuk:"

msgid ""
"``path.to.test_module.TestCase.test_method`` -- Run a single test method in "
"a test case."
msgstr ""
"``path.to.test_module.TestCase.test_method`` -- Jalankan metode percobaan "
"tunggal dalam kasus percobaan."

msgid ""
"``path.to.test_module.TestCase`` -- Run all the test methods in a test case."
msgstr ""
"``path.to.test_module.TestCase`` -- Jalankan semua metode percobaan dalam "
"kasus percobaan."

msgid ""
"``path.to.module`` -- Search for and run all tests in the named Python "
"package or module."
msgstr ""
"``path.to.module`` -- Cari dan jalankan semua percobaan yang bernama paket "
"atau modul Python."

msgid ""
"``path/to/directory`` -- Search for and run all tests below the named "
"directory."
msgstr ""
"``path/to/directory`` -- Cari dan jalankan semua percobaan dibawan direktori "
"dinamai."

msgid ""
"If ``test_labels`` has a value of ``None``, the test runner will search for "
"tests in all files below the current directory whose names match its "
"``pattern`` (see above)."
msgstr ""

msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr "Mengembalikan sebuah instance ``TestSuite`` untuk dijalankan."

msgid ""
"Creates the test databases by calling :func:`~django.test.utils."
"setup_databases`."
msgstr ""
"Membuat basisdata percobaan dengan memanggil :func:`~django.test.utils."
"setup_databases`."

msgid ""
"Runs the :doc:`system checks </topics/checks>` on the test ``databases``."
msgstr ""

msgid "Runs the test suite."
msgstr "Jalankan deretan percobaan."

msgid "Returns the result produced by the running the test suite."
msgstr "Mengembalikan hasil dihasilkan dari menjalankan deretan percobaan."

msgid ""
"Returns the keyword arguments to instantiate the ``DiscoverRunner."
"test_runner`` with."
msgstr ""
"Mengembalikan argumen kata kunci untuk menginstansiasi dengan "
"``DiscoverRunner.test_runner``."

msgid ""
"Destroys the test databases, restoring pre-test conditions by calling :func:"
"`~django.test.utils.teardown_databases`."
msgstr ""
"Menghancurkan basisdata percobaan, menyimpan kembali keadaan pra-percobaan "
"dengan memanggil :func:`~django.test.utils.teardown_databases`."

msgid "Restores the pre-test environment."
msgstr "Menyimpan kembali lingkungan pra-percobaan."

msgid ""
"Computes and returns a return code based on a test suite, and the result "
"from that test suite."
msgstr ""
"Menghitung dan mengembalikan kode balikan berdasarkan pada deretan "
"percobaan, dan hasil dari deretan percobaan itu."

msgid ""
"If a ``logger`` is set, logs the message at the given integer `logging "
"level`_ (e.g. ``logging.DEBUG``, ``logging.INFO``, or ``logging.WARNING``). "
"Otherwise, the message is printed to the console, respecting the current "
"``verbosity``. For example, no message will be printed if the ``verbosity`` "
"is 0, ``INFO`` and above will be printed if the ``verbosity`` is at least 1, "
"and ``DEBUG`` will be printed if it is at least 2. The ``level`` defaults to "
"``logging.INFO``."
msgstr ""

msgid "Testing utilities"
msgstr "Percobaan keperluan"

msgid "``django.test.utils``"
msgstr "``django.test.utils``"

msgid ""
"To assist in the creation of your own test runner, Django provides a number "
"of utility methods in the ``django.test.utils`` module."
msgstr ""
"Untuk membantu dalam pembuatan dari pejalan percobaan anda sendiri, Django "
"menyediakan sejumlah metode utilitas dalam modul ``django.test.utils``."

msgid ""
"Performs global pre-test setup, such as installing instrumentation for the "
"template rendering system and setting up the dummy email outbox."
msgstr ""

msgid ""
"If ``debug`` isn't ``None``, the :setting:`DEBUG` setting is updated to its "
"value."
msgstr ""
"Jika ``debug`` bukan ``None``, pengaturan :setting:`DEBUG` diperbaharui pada "
"nilainya."

msgid ""
"Performs global post-test teardown, such as removing instrumentation from "
"the template system and restoring normal email services."
msgstr ""

msgid "Creates the test databases."
msgstr "Membuat basisdata percobaan."

msgid ""
"Returns a data structure that provides enough detail to undo the changes "
"that have been made. This data will be provided to the :func:"
"`teardown_databases` function at the conclusion of testing."
msgstr ""

msgid ""
"The ``aliases`` argument determines which :setting:`DATABASES` aliases test "
"databases should be set up for. If it's not provided, it defaults to all of :"
"setting:`DATABASES` aliases."
msgstr ""

msgid ""
"The ``serialized_aliases`` argument determines what subset of ``aliases`` "
"test databases should have their state serialized to allow usage of the :ref:"
"`serialized_rollback <test-case-serialized-rollback>` feature. If it's not "
"provided, it defaults to ``aliases``."
msgstr ""

msgid ""
"The ``time_keeper`` kwarg was added, and all kwargs were made keyword-only."
msgstr ""

msgid "The ``serialized_aliases`` kwarg was added."
msgstr ""

msgid "Destroys the test databases, restoring pre-test conditions."
msgstr ""
"Menghancurkan basisdata percobaan, menyimpan kembali keadaan pra-pengujian."

msgid ""
"``old_config`` is a data structure defining the changes in the database "
"configuration that need to be reversed. It's the return value of the :meth:"
"`setup_databases` method."
msgstr ""
"``old_config`` adalah struktur data menentukan peribahan dalam konfigurasi "
"basisdata yang butuh di balik. Nilai kembaliannya dari metode :meth:"
"`setup_databases`."

msgid "``django.db.connection.creation``"
msgstr "`django.db.connection.creation``"

msgid ""
"The creation module of the database backend also provides some utilities "
"that can be useful during testing."
msgstr ""

msgid "Creates a new test database and runs ``migrate`` against it."
msgstr ""
"Membuat percobaan basisdata baru dan menjalankan ``migrate`` terhadapnya."

msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr "``verbosity`` mempunyai perilaku sama seperti dalam ``run_tests()``."

msgid ""
"``autoclobber`` describes the behavior that will occur if a database with "
"the same name as the test database is discovered:"
msgstr ""

msgid ""
"If ``autoclobber`` is ``False``, the user will be asked to approve "
"destroying the existing database. ``sys.exit`` is called if the user does "
"not approve."
msgstr ""

msgid ""
"If ``autoclobber`` is ``True``, the database will be destroyed without "
"consulting the user."
msgstr ""

msgid ""
"``serialize`` determines if Django serializes the database into an in-memory "
"JSON string before running tests (used to restore the database state between "
"tests if you don't have transactions). You can set this to ``False`` to "
"speed up creation time if you don't have any test classes with :ref:"
"`serialized_rollback=True <test-case-serialized-rollback>`."
msgstr ""
"``serialize`` menentukan jika Django serialkan basisdata menjadi sebuah "
"string JSON dalam-memori sebelum menjalankan percobaan (digunakan untuk "
"menyimpan kembali keadaan basisdata jika anda tidak mempunyai transaksi). "
"Anda dapat menyetel ini menjadi ``False`` untuk mempercepat waktu pembuatan "
"jika anda tidak mempunyai kelas-kelas percobaan dengan :ref:"
"`serialized_rollback=True 1`."

msgid ""
"If you are using the default test runner, you can control this with the the :"
"setting:`SERIALIZE <TEST_SERIALIZE>` entry in the :setting:`TEST <DATABASE-"
"TEST>` dictionary."
msgstr ""

msgid ""
"``keepdb`` determines if the test run should use an existing database, or "
"create a new one. If ``True``, the existing database will be used, or "
"created if not present. If ``False``, a new database will be created, "
"prompting the user to remove the existing one, if present."
msgstr ""

msgid "Returns the name of the test database that it created."
msgstr "Mengembalikan nama dari basisdata percobaan yang dia buat."

msgid ""
"``create_test_db()`` has the side effect of modifying the value of :setting:"
"`NAME` in :setting:`DATABASES` to match the name of the test database."
msgstr ""

msgid ""
"Destroys the database whose name is the value of :setting:`NAME` in :setting:"
"`DATABASES`, and sets :setting:`NAME` to the value of ``old_database_name``."
msgstr ""

msgid ""
"The ``verbosity`` argument has the same behavior as for :class:`~django.test."
"runner.DiscoverRunner`."
msgstr ""

msgid ""
"If the ``keepdb`` argument is ``True``, then the connection to the database "
"will be closed, but the database will not be destroyed."
msgstr ""

msgid "Integration with ``coverage.py``"
msgstr "Perpaduan dengan ``coverage.py``"

msgid ""
"Code coverage describes how much source code has been tested. It shows which "
"parts of your code are being exercised by tests and which are not. It's an "
"important part of testing applications, so it's strongly recommended to "
"check the coverage of your tests."
msgstr ""

msgid ""
"Django can be easily integrated with `coverage.py`_, a tool for measuring "
"code coverage of Python programs. First, `install coverage.py`_. Next, run "
"the following from your project folder containing ``manage.py``::"
msgstr ""

msgid ""
"This runs your tests and collects coverage data of the executed files in "
"your project. You can see a report of this data by typing following command::"
msgstr ""

msgid ""
"Note that some Django code was executed while running tests, but it is not "
"listed here because of the ``source`` flag passed to the previous command."
msgstr ""
"Catat bahwa beberapa kode Django telah dijalankan selagi menjalankan "
"percobaan, tetapi itu tidak didaftarkan disini karena bendera ``source`` "
"dilewatkan ke perintah sebelumnya."

msgid ""
"For more options like annotated HTML listings detailing missed lines, see "
"the `coverage.py`_ docs."
msgstr ""

msgid "Testing in Django"
msgstr "Percobaan di Django"

msgid ""
"Automated testing is an extremely useful bug-killing tool for the modern web "
"developer. You can use a collection of tests -- a **test suite** -- to "
"solve, or avoid, a number of problems:"
msgstr ""

msgid ""
"When you're writing new code, you can use tests to validate your code works "
"as expected."
msgstr ""
"Ketika anda sedang menulis kode baru, anda dapat menggunakan percobaan untuk "
"memeriksa kode anda bekerja sesuai harapan."

msgid ""
"When you're refactoring or modifying old code, you can use tests to ensure "
"your changes haven't affected your application's behavior unexpectedly."
msgstr ""

msgid ""
"Testing a web application is a complex task, because a web application is "
"made of several layers of logic -- from HTTP-level request handling, to form "
"validation and processing, to template rendering. With Django's test-"
"execution framework and assorted utilities, you can simulate requests, "
"insert test data, inspect your application's output and generally verify "
"your code is doing what it should be doing."
msgstr ""

msgid ""
"The preferred way to write tests in Django is using the :mod:`unittest` "
"module built-in to the Python standard library. This is covered in detail in "
"the :doc:`overview` document."
msgstr ""

msgid ""
"You can also use any *other* Python test framework; Django provides an API "
"and tools for that kind of integration. They are described in the :ref:"
"`other-testing-frameworks` section of :doc:`advanced`."
msgstr ""

msgid "Writing and running tests"
msgstr "Menulis dan menjalankan percobaan"

msgid ""
"The :doc:`testing tutorial </intro/tutorial05>`, the :doc:`testing tools "
"reference </topics/testing/tools>`, and the :doc:`advanced testing topics </"
"topics/testing/advanced>`."
msgstr ""
":doc:`testing tutorial </intro/tutorial05>`, the :doc:`testing tools "
"reference </topics/testing/tools>`, dan :doc:`advanced testing topics </"
"topics/testing/advanced>`."

msgid ""
"This document is split into two primary sections. First, we explain how to "
"write tests with Django. Then, we explain how to run them."
msgstr ""
"Dokumen ini dipisah menjadi dua bagian utama. Pertama, kami menjelaskan "
"bagaimana menulis percobaan dengan Django. Kemudian, kami menjelaskan "
"bagaimana menjalankan mereka."

msgid ""
"Django's unit tests use a Python standard library module: :mod:`unittest`. "
"This module defines tests using a class-based approach."
msgstr ""

msgid ""
"Here is an example which subclasses from :class:`django.test.TestCase`, "
"which is a subclass of :class:`unittest.TestCase` that runs each test inside "
"a transaction to provide isolation::"
msgstr ""

msgid ""
"When you :ref:`run your tests <running-tests>`, the default behavior of the "
"test utility is to find all the test cases (that is, subclasses of :class:"
"`unittest.TestCase`) in any file whose name begins with ``test``, "
"automatically build a test suite out of those test cases, and run that suite."
msgstr ""

msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr "Untuk lebih rinci tentang :mod:`unittest`, lihat dokumentasi Python."

msgid "Where should the tests live?"
msgstr "Dimana seharusnya percobaan berada?"

msgid ""
"The default :djadmin:`startapp` template creates a ``tests.py`` file in the "
"new application. This might be fine if you only have a few tests, but as "
"your test suite grows you'll likely want to restructure it into a tests "
"package so you can split your tests into different submodules such as "
"``test_models.py``, ``test_views.py``, ``test_forms.py``, etc. Feel free to "
"pick whatever organizational scheme you like."
msgstr ""

msgid "See also :ref:`testing-reusable-applications`."
msgstr "Lihat juga :ref:`testing-reusable-applications`."

msgid ""
"If your tests rely on database access such as creating or querying models, "
"be sure to create your test classes as subclasses of :class:`django.test."
"TestCase` rather than :class:`unittest.TestCase`."
msgstr ""

msgid ""
"Using :class:`unittest.TestCase` avoids the cost of running each test in a "
"transaction and flushing the database, but if your tests interact with the "
"database their behavior will vary based on the order that the test runner "
"executes them. This can lead to unit tests that pass when run in isolation "
"but fail when run in a suite."
msgstr ""

msgid "Running tests"
msgstr "Menjalankan percobaan"

msgid ""
"Once you've written tests, run them using the :djadmin:`test` command of "
"your project's ``manage.py`` utility::"
msgstr ""

msgid ""
"Test discovery is based on the unittest module's :py:ref:`built-in test "
"discovery <unittest-test-discovery>`.  By default, this will discover tests "
"in any file named \"test*.py\" under the current working directory."
msgstr ""

msgid ""
"You can specify particular tests to run by supplying any number of \"test "
"labels\" to ``./manage.py test``. Each test label can be a full Python "
"dotted path to a package, module, ``TestCase`` subclass, or test method. For "
"instance::"
msgstr ""

msgid ""
"You can also provide a path to a directory to discover tests below that "
"directory::"
msgstr ""
"Anda dapat juga menyediakan jalur ke direktori untuk menemukan percobaan "
"dibawah direktori itu::"

msgid ""
"You can specify a custom filename pattern match using the ``-p`` (or ``--"
"pattern``) option, if your test files are named differently from the ``test*."
"py`` pattern::"
msgstr ""

msgid ""
"If you press ``Ctrl-C`` while the tests are running, the test runner will "
"wait for the currently running test to complete and then exit gracefully. "
"During a graceful exit the test runner will output details of any test "
"failures, report on how many tests were run and how many errors and failures "
"were encountered, and destroy any test databases as usual. Thus pressing "
"``Ctrl-C`` can be very useful if you forget to pass the :option:`--failfast "
"<test --failfast>` option, notice that some tests are unexpectedly failing "
"and want to get details on the failures without waiting for the full test "
"run to complete."
msgstr ""

msgid ""
"If you do not want to wait for the currently running test to finish, you can "
"press ``Ctrl-C`` a second time and the test run will halt immediately, but "
"not gracefully. No details of the tests run before the interruption will be "
"reported, and any test databases created by the run will not be destroyed."
msgstr ""

msgid "Test with warnings enabled"
msgstr "Percobaan dengan peringatan diadakan"

msgid ""
"It's a good idea to run your tests with Python warnings enabled: ``python -"
"Wa manage.py test``. The ``-Wa`` flag tells Python to display deprecation "
"warnings. Django, like many other Python libraries, uses these warnings to "
"flag when features are going away. It also might flag areas in your code "
"that aren't strictly wrong but could benefit from a better implementation."
msgstr ""

msgid "The test database"
msgstr "Basisdata percobaan"

msgid ""
"Tests that require a database (namely, model tests) will not use your \"real"
"\" (production) database. Separate, blank databases are created for the "
"tests."
msgstr ""

msgid ""
"Regardless of whether the tests pass or fail, the test databases are "
"destroyed when all the tests have been executed."
msgstr ""

msgid ""
"You can prevent the test databases from being destroyed by using the :option:"
"`test --keepdb` option. This will preserve the test database between runs. "
"If the database does not exist, it will first be created. Any migrations "
"will also be applied in order to keep it up to date."
msgstr ""

msgid ""
"As described in the previous section, if a test run is forcefully "
"interrupted, the test database may not be destroyed. On the next run, you'll "
"be asked whether you want to reuse or destroy the database. Use the :option:"
"`test --noinput` option to suppress that prompt and automatically destroy "
"the database. This can be useful when running tests on a continuous "
"integration server where tests may be interrupted by a timeout, for example."
msgstr ""

msgid ""
"The default test database names are created by prepending ``test_`` to the "
"value of each :setting:`NAME` in :setting:`DATABASES`. When using SQLite, "
"the tests will use an in-memory database by default (i.e., the database will "
"be created in memory, bypassing the filesystem entirely!). The :setting:"
"`TEST <DATABASE-TEST>` dictionary in :setting:`DATABASES` offers a number of "
"settings to configure your test database. For example, if you want to use a "
"different database name, specify :setting:`NAME <TEST_NAME>` in the :setting:"
"`TEST <DATABASE-TEST>` dictionary for any given database in :setting:"
"`DATABASES`."
msgstr ""

msgid ""
"On PostgreSQL, :setting:`USER` will also need read access to the built-in "
"``postgres`` database."
msgstr ""

msgid ""
"Aside from using a separate database, the test runner will otherwise use all "
"of the same database settings you have in your settings file: :setting:"
"`ENGINE <DATABASE-ENGINE>`, :setting:`USER`, :setting:`HOST`, etc. The test "
"database is created by the user specified by :setting:`USER`, so you'll need "
"to make sure that the given user account has sufficient privileges to create "
"a new database on the system."
msgstr ""

msgid ""
"For fine-grained control over the character encoding of your test database, "
"use the :setting:`CHARSET <TEST_CHARSET>` TEST option. If you're using "
"MySQL, you can also use the :setting:`COLLATION <TEST_COLLATION>` option to "
"control the particular collation used by the test database. See the :doc:"
"`settings documentation </ref/settings>` for details of these and other "
"advanced settings."
msgstr ""

msgid ""
"If using an SQLite in-memory database with SQLite, `shared cache <https://"
"www.sqlite.org/sharedcache.html>`_ is enabled, so you can write tests with "
"ability to share the database between threads."
msgstr ""

msgid "Finding data from your production database when running tests?"
msgstr ""
"Menemukan data dari basisdata produksi anda ketika menjalankan percobaan?"

msgid ""
"If your code attempts to access the database when its modules are compiled, "
"this will occur *before* the test database is set up, with potentially "
"unexpected results. For example, if you have a database query in module-"
"level code and a real database exists, production data could pollute your "
"tests. *It is a bad idea to have such import-time database queries in your "
"code* anyway - rewrite your code so that it doesn't do this."
msgstr ""

msgid ""
"This also applies to customized implementations of :meth:`~django.apps."
"AppConfig.ready()`."
msgstr ""
"Ini juga berlaku pada penerapan disesuaikan dari :meth:`~django.apps."
"AppConfig.ready()`."

msgid ""
"The :ref:`advanced multi-db testing topics <topics-testing-advanced-"
"multidb>`."
msgstr ""
":ref:`advanced multi-db testing topics <topics-testing-advanced-multidb>`."

msgid "Order in which tests are executed"
msgstr "Urutkan dimana percobaan dijalankan"

msgid ""
"In order to guarantee that all ``TestCase`` code starts with a clean "
"database, the Django test runner reorders tests in the following way:"
msgstr ""

msgid "All :class:`~django.test.TestCase` subclasses are run first."
msgstr "Semua subkelas :class:`~django.test.TestCase` berjalan pertama."

msgid ""
"Then, all other Django-based tests (test cases based on :class:`~django.test."
"SimpleTestCase`, including :class:`~django.test.TransactionTestCase`) are "
"run with no particular ordering guaranteed nor enforced among them."
msgstr ""

msgid ""
"Then any other :class:`unittest.TestCase` tests (including doctests) that "
"may alter the database without restoring it to its original state are run."
msgstr ""

msgid ""
"The new ordering of tests may reveal unexpected dependencies on test case "
"ordering. This is the case with doctests that relied on state left in the "
"database by a given :class:`~django.test.TransactionTestCase` test, they "
"must be updated to be able to run independently."
msgstr ""

msgid ""
"Failures detected when loading tests are ordered before all of the above for "
"quicker feedback. This includes things like test modules that couldn't be "
"found or that couldn't be loaded due to syntax errors."
msgstr ""

msgid ""
"You may randomize and/or reverse the execution order inside groups using "
"the :option:`test --shuffle` and :option:`--reverse <test --reverse>` "
"options. This can help with ensuring your tests are independent from each "
"other."
msgstr ""

msgid ""
"In older versions, failures detected when loading tests were not ordered "
"first."
msgstr ""

msgid "Rollback emulation"
msgstr ""

msgid ""
"Any initial data loaded in migrations will only be available in ``TestCase`` "
"tests and not in ``TransactionTestCase`` tests, and additionally only on "
"backends where transactions are supported (the most important exception "
"being MyISAM). This is also true for tests which rely on "
"``TransactionTestCase`` such as :class:`LiveServerTestCase` and :class:"
"`~django.contrib.staticfiles.testing.StaticLiveServerTestCase`."
msgstr ""

msgid ""
"Django can reload that data for you on a per-testcase basis by setting the "
"``serialized_rollback`` option to ``True`` in the body of the ``TestCase`` "
"or ``TransactionTestCase``, but note that this will slow down that test "
"suite by approximately 3x."
msgstr ""

msgid ""
"Third-party apps or those developing against MyISAM will need to set this; "
"in general, however, you should be developing your own projects against a "
"transactional database and be using ``TestCase`` for most tests, and thus "
"not need this setting."
msgstr ""

msgid ""
"The initial serialization is usually very quick, but if you wish to exclude "
"some apps from this process (and speed up test runs slightly), you may add "
"those apps to :setting:`TEST_NON_SERIALIZED_APPS`."
msgstr ""

msgid ""
"To prevent serialized data from being loaded twice, setting "
"``serialized_rollback=True`` disables the :data:`~django.db.models.signals."
"post_migrate` signal when flushing the test database."
msgstr ""

msgid "Other test conditions"
msgstr "Kondisi percobaan lain"

msgid ""
"Regardless of the value of the :setting:`DEBUG` setting in your "
"configuration file, all Django tests run with :setting:`DEBUG`\\=False. This "
"is to ensure that the observed output of your code matches what will be seen "
"in a production setting."
msgstr ""

msgid ""
"Caches are not cleared after each test, and running \"manage.py test fooapp"
"\" can insert data from the tests into the cache of a live system if you run "
"your tests in production because, unlike databases, a separate \"test cache"
"\" is not used. This behavior :ticket:`may change <11505>` in the future."
msgstr ""

msgid "Understanding the test output"
msgstr "Memahami keluaran percobaan"

msgid ""
"When you run your tests, you'll see a number of messages as the test runner "
"prepares itself. You can control the level of detail of these messages with "
"the ``verbosity`` option on the command line::"
msgstr ""

msgid ""
"This tells you that the test runner is creating a test database, as "
"described in the previous section."
msgstr ""

msgid ""
"Once the test database has been created, Django will run your tests. If "
"everything goes well, you'll see something like this::"
msgstr ""
"Sekali basisdata telah dibuat, Django akan menjalankan percobaan anda. Jika "
"semuanya berjalan baik, anda akan melihat sesuatu seperti ini::"

msgid ""
"If there are test failures, however, you'll see full details about which "
"tests failed::"
msgstr ""
"Jika ada kegagalan percobaan, bagaimanapun, anda akan melihat rincian penuh "
"tetnang percobaan mana yang gagal::"

msgid ""
"A full explanation of this error output is beyond the scope of this "
"document, but it's pretty intuitive. You can consult the documentation of "
"Python's :mod:`unittest` library for details."
msgstr ""

msgid ""
"Note that the return code for the test-runner script is 1 for any number of "
"failed and erroneous tests. If all the tests pass, the return code is 0. "
"This feature is useful if you're using the test-runner script in a shell "
"script and need to test for success or failure at that level."
msgstr ""

msgid "Speeding up the tests"
msgstr "Mempercepat percobaan"

msgid "Running tests in parallel"
msgstr "Menjalankan percobaan secara sejalan"

msgid ""
"As long as your tests are properly isolated, you can run them in parallel to "
"gain a speed up on multi-core hardware. See :option:`test --parallel`."
msgstr ""

msgid "Password hashing"
msgstr "Campuran sandi"

msgid ""
"The default password hasher is rather slow by design. If you're "
"authenticating many users in your tests, you may want to use a custom "
"settings file and set the :setting:`PASSWORD_HASHERS` setting to a faster "
"hashing algorithm::"
msgstr ""

msgid ""
"Don't forget to also include in :setting:`PASSWORD_HASHERS` any hashing "
"algorithm used in fixtures, if any."
msgstr ""

msgid "Preserving the test database"
msgstr ""

msgid ""
"The :option:`test --keepdb` option preserves the test database between test "
"runs. It skips the create and destroy actions which can greatly decrease the "
"time to run tests."
msgstr ""

msgid "Testing tools"
msgstr "Alat percobaan"

msgid ""
"Django provides a small set of tools that come in handy when writing tests."
msgstr ""
"Django menyediakan kumpulan kecil alat yang datang dalam mudah ketika "
"menulis percobaan."

msgid "The test client"
msgstr "Klien percobaan"

msgid ""
"The test client is a Python class that acts as a dummy web browser, allowing "
"you to test your views and interact with your Django-powered application "
"programmatically."
msgstr ""

msgid "Some of the things you can do with the test client are:"
msgstr "Beberapa hal anda dapat lakukan dengan klien percobaan adalah:"

msgid ""
"Simulate GET and POST requests on a URL and observe the response -- "
"everything from low-level HTTP (result headers and status codes) to page "
"content."
msgstr ""

msgid ""
"See the chain of redirects (if any) and check the URL and status code at "
"each step."
msgstr ""

msgid ""
"Test that a given request is rendered by a given Django template, with a "
"template context that contains certain values."
msgstr ""

msgid ""
"Note that the test client is not intended to be a replacement for Selenium_ "
"or other \"in-browser\" frameworks. Django's test client has a different "
"focus. In short:"
msgstr ""

msgid ""
"Use Django's test client to establish that the correct template is being "
"rendered and that the template is passed the correct context data."
msgstr ""

msgid ""
"Use in-browser frameworks like Selenium_ to test *rendered* HTML and the "
"*behavior* of web pages, namely JavaScript functionality. Django also "
"provides special support for those frameworks; see the section on :class:"
"`~django.test.LiveServerTestCase` for more details."
msgstr ""

msgid "A comprehensive test suite should use a combination of both test types."
msgstr ""

msgid "Overview and a quick example"
msgstr "Ikhtisar dan contoh cepat"

msgid ""
"To use the test client, instantiate ``django.test.Client`` and retrieve web "
"pages::"
msgstr ""

msgid ""
"As this example suggests, you can instantiate ``Client`` from within a "
"session of the Python interactive interpreter."
msgstr ""

msgid "Note a few important things about how the test client works:"
msgstr ""
"Catatan sedikit hal-hal penting tentang bagaimana percobaan klien bekerja:"

msgid ""
"The test client does *not* require the web server to be running. In fact, it "
"will run just fine with no web server running at all! That's because it "
"avoids the overhead of HTTP and deals directly with the Django framework. "
"This helps make the unit tests run quickly."
msgstr ""

msgid ""
"When retrieving pages, remember to specify the *path* of the URL, not the "
"whole domain. For example, this is correct::"
msgstr ""

msgid "This is incorrect::"
msgstr "Ini tidak benar::"

msgid ""
"The test client is not capable of retrieving web pages that are not powered "
"by your Django project. If you need to retrieve other web pages, use a "
"Python standard library module such as :mod:`urllib`."
msgstr ""

msgid ""
"To resolve URLs, the test client uses whatever URLconf is pointed-to by "
"your :setting:`ROOT_URLCONF` setting."
msgstr ""

msgid ""
"Although the above example would work in the Python interactive interpreter, "
"some of the test client's functionality, notably the template-related "
"functionality, is only available *while tests are running*."
msgstr ""

msgid ""
"The reason for this is that Django's test runner performs a bit of black "
"magic in order to determine which template was loaded by a given view. This "
"black magic (essentially a patching of Django's template system in memory) "
"only happens during test running."
msgstr ""

msgid ""
"By default, the test client will disable any CSRF checks performed by your "
"site."
msgstr ""
"Secara awalan, klien percobaan akan meniadakan pemeriksaan CSRF apapun "
"dilakukan oleh situs anda."

msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks. To do "
"this, pass in the ``enforce_csrf_checks`` argument when you construct your "
"client::"
msgstr ""

msgid "Making requests"
msgstr "Membuat permintaan"

msgid "Use the ``django.test.Client`` class to make requests."
msgstr "Gunakan kelas ``django.test.Client`` untuk membuat permintaan."

msgid ""
"It requires no arguments at time of construction. However, you can use "
"keyword arguments to specify some default headers. For example, this will "
"send a ``User-Agent`` HTTP header in each request::"
msgstr ""

msgid ""
"The values from the ``extra`` keyword arguments passed to :meth:`~django."
"test.Client.get()`, :meth:`~django.test.Client.post()`, etc. have precedence "
"over the defaults passed to the class constructor."
msgstr ""

msgid ""
"The ``enforce_csrf_checks`` argument can be used to test CSRF protection "
"(see above)."
msgstr ""

msgid ""
"The ``json_encoder`` argument allows setting a custom JSON encoder for the "
"JSON serialization that's described in :meth:`post`."
msgstr ""

msgid ""
"The ``raise_request_exception`` argument allows controlling whether or not "
"exceptions raised during the request should also be raised in the test. "
"Defaults to ``True``."
msgstr ""

msgid ""
"Once you have a ``Client`` instance, you can call any of the following "
"methods:"
msgstr ""

msgid ""
"Makes a GET request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

msgid ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data "
"payload. For example::"
msgstr ""

msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

msgid ""
"The ``extra`` keyword arguments parameter can be used to specify headers to "
"be sent in the request. For example::"
msgstr ""

msgid ""
"...will send the HTTP header ``HTTP_ACCEPT`` to the details view, which is a "
"good way to test code paths that use the :meth:`django.http.HttpRequest."
"accepts()` method."
msgstr ""

msgid "CGI specification"
msgstr "spesifikasi CGI"

msgid ""
"The headers sent via ``**extra`` should follow CGI_ specification. For "
"example, emulating a different \"Host\" header as sent in the HTTP request "
"from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

msgid ""
"If you already have the GET arguments in URL-encoded form, you can use that "
"encoding instead of using the data argument. For example, the previous GET "
"request could also be posed as::"
msgstr ""

msgid ""
"If you provide a URL with both an encoded GET data and a data argument, the "
"data argument will take precedence."
msgstr ""

msgid ""
"If you set ``follow`` to ``True`` the client will follow any redirects and a "
"``redirect_chain`` attribute will be set in the response object containing "
"tuples of the intermediate urls and status codes."
msgstr ""

msgid ""
"If you had a URL ``/redirect_me/`` that redirected to ``/next/``, that "
"redirected to ``/final/``, this is what you'd see::"
msgstr ""

msgid ""
"If you set ``secure`` to ``True`` the client will emulate an HTTPS request."
msgstr ""

msgid ""
"Makes a POST request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

msgid ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data. "
"For example::"
msgstr ""

msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

msgid "...with this POST data::"
msgstr "...dengan data POST ini::"

msgid ""
"If you provide ``content_type`` as :mimetype:`application/json`, the "
"``data`` is serialized using :func:`json.dumps` if it's a dict, list, or "
"tuple. Serialization is performed with :class:`~django.core.serializers.json."
"DjangoJSONEncoder` by default, and can be overridden by providing a "
"``json_encoder`` argument to :class:`Client`. This serialization also "
"happens for :meth:`put`, :meth:`patch`, and :meth:`delete` requests."
msgstr ""

msgid ""
"If you provide any other ``content_type`` (e.g. :mimetype:`text/xml` for an "
"XML payload), the contents of ``data`` are sent as-is in the POST request, "
"using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

msgid ""
"If you don't provide a value for ``content_type``, the values in ``data`` "
"will be transmitted with a content type of :mimetype:`multipart/form-data`. "
"In this case, the key-value pairs in ``data`` will be encoded as a multipart "
"message and used to create the POST data payload."
msgstr ""

msgid ""
"To submit multiple values for a given key -- for example, to specify the "
"selections for a ``<select multiple>`` -- provide the values as a list or "
"tuple for the required key. For example, this value of ``data`` would submit "
"three selected values for the field named ``choices``::"
msgstr ""

msgid ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. For example::"
msgstr ""

msgid ""
"(The name ``attachment`` here is not relevant; use whatever name your file-"
"processing code expects.)"
msgstr ""

msgid ""
"You may also provide any file-like object (e.g., :class:`~io.StringIO` or :"
"class:`~io.BytesIO`) as a file handle. If you're uploading to an :class:"
"`~django.db.models.ImageField`, the object needs a ``name`` attribute that "
"passes the :data:`~django.core.validators.validate_image_file_extension` "
"validator. For example::"
msgstr ""

msgid ""
"Note that if you wish to use the same file handle for multiple ``post()`` "
"calls then you will need to manually reset the file pointer between posts. "
"The easiest way to do this is to manually close the file after it has been "
"provided to ``post()``, as demonstrated above."
msgstr ""

msgid ""
"You should also ensure that the file is opened in a way that allows the data "
"to be read. If your file contains binary data such as an image, this means "
"you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

msgid ""
"If the URL you request with a POST contains encoded parameters, these "
"parameters will be made available in the request.GET data. For example, if "
"you were to make the request::"
msgstr ""

msgid ""
"... the view handling this request could interrogate request.POST to "
"retrieve the username and password, and could interrogate request.GET to "
"determine if the user was a visitor."
msgstr ""

msgid ""
"Makes a HEAD request on the provided ``path`` and returns a ``Response`` "
"object. This method works just like :meth:`Client.get`, including the "
"``follow``, ``secure`` and ``extra`` arguments, except it does not return a "
"message body."
msgstr ""

msgid ""
"Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

msgid ""
"When ``data`` is provided, it is used as the request body, and a ``Content-"
"Type`` header is set to ``content_type``."
msgstr ""

msgid ""
"The ``follow``, ``secure`` and ``extra`` arguments act the same as for :meth:"
"`Client.get`."
msgstr ""
"Argumen-argumen ``follow``, ``secure`` dan ``extra`` bertindak sama seperti :"
"meth:`Client.get`. "

msgid ""
"Makes a PUT request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

msgid ""
"Makes a PATCH request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

msgid ""
"Makes a DELETE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

msgid ""
"Makes a TRACE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for simulating diagnostic probes."
msgstr ""

msgid ""
"Unlike the other request methods, ``data`` is not provided as a keyword "
"parameter in order to comply with :rfc:`7231#section-4.3.8`, which mandates "
"that TRACE requests must not have a body."
msgstr ""

msgid ""
"The ``follow``, ``secure``, and ``extra`` arguments act the same as for :"
"meth:`Client.get`."
msgstr ""

msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>` "
"and you deal with logging in users, you can use the test client's "
"``login()`` method to simulate the effect of a user logging into the site."
msgstr ""

msgid ""
"After you call this method, the test client will have all the cookies and "
"session data required to pass any login-based tests that may form part of a "
"view."
msgstr ""

msgid ""
"The format of the ``credentials`` argument depends on which :ref:"
"`authentication backend <authentication-backends>` you're using (which is "
"configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're "
"using the standard authentication backend provided by Django "
"(``ModelBackend``), ``credentials`` should be the user's username and "
"password, provided as keyword arguments::"
msgstr ""

msgid ""
"If you're using a different authentication backend, this method may require "
"different credentials. It requires whichever credentials are required by "
"your backend's ``authenticate()`` method."
msgstr ""

msgid ""
"``login()`` returns ``True`` if it the credentials were accepted and login "
"was successful."
msgstr ""

msgid ""
"Finally, you'll need to remember to create user accounts before you can use "
"this method. As we explained above, the test runner is executed using a test "
"database, which contains no users by default. As a result, user accounts "
"that are valid on your production site will not work under test conditions. "
"You'll need to create users as part of the test suite -- either manually "
"(using the Django model API) or with a test fixture. Remember that if you "
"want your test user to have a password, you can't set the user's password by "
"setting the password attribute directly -- you must use the :meth:`~django."
"contrib.auth.models.User.set_password()` function to store a correctly "
"hashed password. Alternatively, you can use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper method to create a new user with a "
"correctly hashed password."
msgstr ""
"Akhirnya, anda akan butuh mengingat untuk membuat akun pengguna sebelum anda "
"dapat menggunakan cara ini. Seperti kami jelaskan diatas, percobaan pelari "
"dijalankan menggunakan basisdata percobaan, yang mengandung tidak ada "
"pengguna secara awal. Sebagai hasilnya, akun pengguna sah pada situs "
"produksi anda tidak akan bekerja dibawah kondisi percobaan. Anda akan butuh "
"membuat pengguna sebagai bagian dari deretan percobaan -- salah satu secara "
"manual (menggunakan API model Django) atau dengan perbaikan percobaan. Ingat "
"bahwa jika anda ingin percobaan pengguna anda mempunyai sandi, anda tidak "
"dapat mengatur sandi pengguna dengan mengatur atribut sandi secara langsung "
"-- anda harus menggunakan fungsi :meth:`~django.contrib.auth.models.User."
"set_password()` untuk menyimpan sandi campuran dengan benar. Jalan lain, "
"anda dapat menggunakan cara pembantu :meth:`~django.contrib.auth.models."
"UserManager.create_user` untuk membuat sebuah pengguna baru dengan sandi "
"campuran dengan benar."

msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`, "
"you can use the ``force_login()`` method to simulate the effect of a user "
"logging into the site. Use this method instead of :meth:`login` when a test "
"requires a user be logged in and the details of how a user logged in aren't "
"important."
msgstr ""
"Jika situs anda menggunakan :doc:`sistem pembuktian keaslian</topics/auth/"
"index>` Django, anda dapat menggunakan cara ``force_login()`` untuk "
"menirukan pengaruh dari pengguna masuk kedalam situs. Gunakan cara ini "
"daripada :meth:`login` ketika sebuah percobaan membutuhkan pengguna untuk "
"masuk dan rincian bagaimana sebuah pengguna masuk tidaklah penting."

msgid ""
"Unlike ``login()``, this method skips the authentication and verification "
"steps: inactive users (:attr:`is_active=False <django.contrib.auth.models."
"User.is_active>`) are permitted to login and the user's credentials don't "
"need to be provided."
msgstr ""
"Tidak seperti ``login()``, cara ini melewati langkah pembuktian keaslian dan "
"pengecekan: pengguna tidak aktif (:attr:`is_active=False <django.contrib."
"auth.models.User.is_active>`) diizinkan untuk masuk dan mandat pengguna "
"tidak butuh disediakan."

msgid ""
"The user will have its ``backend`` attribute set to the value of the "
"``backend`` argument (which should be a dotted Python path string), or to "
"``settings.AUTHENTICATION_BACKENDS[0]`` if a value isn't provided. The :func:"
"`~django.contrib.auth.authenticate` function called by :meth:`login` "
"normally annotates the user like this."
msgstr ""

msgid ""
"This method is faster than ``login()`` since the expensive password hashing "
"algorithms are bypassed. Also, you can speed up ``login()`` by :ref:`using a "
"weaker hasher while testing <speeding-up-tests-auth-hashers>`."
msgstr ""

msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`, "
"the ``logout()`` method can be used to simulate the effect of a user logging "
"out of your site."
msgstr ""

msgid ""
"After you call this method, the test client will have all the cookies and "
"session data cleared to defaults. Subsequent requests will appear to come "
"from an :class:`~django.contrib.auth.models.AnonymousUser`."
msgstr ""

msgid "Testing responses"
msgstr "Tanggapan percobaan"

msgid ""
"The ``get()`` and ``post()`` methods both return a ``Response`` object. This "
"``Response`` object is *not* the same as the ``HttpResponse`` object "
"returned by Django views; the test response object has some additional data "
"useful for test code to verify."
msgstr ""

msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

msgid ""
"The test client that was used to make the request that resulted in the "
"response."
msgstr ""

msgid ""
"The body of the response, as a bytestring. This is the final page content as "
"rendered by the view, or any error message."
msgstr ""

msgid ""
"The template ``Context`` instance that was used to render the template that "
"produced the response content."
msgstr ""

msgid ""
"If the rendered page used multiple templates, then ``context`` will be a "
"list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

msgid ""
"Regardless of the number of templates used during rendering, you can "
"retrieve context values using the ``[]`` operator. For example, the context "
"variable ``name`` could be retrieved using::"
msgstr ""

msgid "Not using Django templates?"
msgstr "Tidak menggunakan cetakan Django?"

msgid ""
"This attribute is only populated when using the :class:`~django.template."
"backends.django.DjangoTemplates` backend. If you're using another template "
"engine, :attr:`~django.template.response.SimpleTemplateResponse."
"context_data` may be a suitable alternative on responses with that attribute."
msgstr ""

msgid ""
"A tuple of three values that provides information about the unhandled "
"exception, if any, that occurred during the view."
msgstr ""

msgid ""
"The values are (type, value, traceback), the same as returned by Python's :"
"func:`sys.exc_info`. Their meanings are:"
msgstr ""

msgid "*type*: The type of the exception."
msgstr ""

msgid "*value*: The exception instance."
msgstr ""

msgid ""
"*traceback*: A traceback object which encapsulates the call stack at the "
"point where the exception originally occurred."
msgstr ""

msgid "If no exception occurred, then ``exc_info`` will be ``None``."
msgstr ""

msgid ""
"The body of the response, parsed as JSON. Extra keyword arguments are passed "
"to :func:`json.loads`. For example::"
msgstr ""

msgid ""
"If the ``Content-Type`` header is not ``\"application/json\"``, then a :exc:"
"`ValueError` will be raised when trying to parse the response."
msgstr ""

msgid "The request data that stimulated the response."
msgstr "Data diminta yang merangsang tanggapan."

msgid ""
"The ``WSGIRequest`` instance generated by the test handler that generated "
"the response."
msgstr ""

msgid ""
"The HTTP status of the response, as an integer. For a full list of defined "
"codes, see the `IANA status code registry`_."
msgstr ""
"Keadaan HTTP dari tanggapan, sebagai sebuah integer. Untuk daftar penuh dari "
"kode yang ditentukan, lihat `IANA status code registry`_."

msgid ""
"A list of ``Template`` instances used to render the final content, in the "
"order they were rendered. For each template in the list, use ``template."
"name`` to get the template's file name, if the template was loaded from a "
"file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

msgid ""
"This attribute is only populated when using the :class:`~django.template."
"backends.django.DjangoTemplates` backend. If you're using another template "
"engine, :attr:`~django.template.response.SimpleTemplateResponse."
"template_name` may be a suitable alternative if you only need the name of "
"the template used for rendering."
msgstr ""

msgid ""
"An instance of :class:`~django.urls.ResolverMatch` for the response. You can "
"use the :attr:`~django.urls.ResolverMatch.func` attribute, for example, to "
"verify the view that served the response::"
msgstr ""

msgid ""
"If the given URL is not found, accessing this attribute will raise a :exc:"
"`~django.urls.Resolver404` exception."
msgstr ""
"Jika URL diberikan tidak ditemukan, mengakses atribut ini akan memunculkan "
"pengecualian :exc:`~django.urls.Resolver404`."

msgid ""
"As with a normal response, you can also access the headers through :attr:`."
"HttpResponse.headers`. For example, you could determine the content type of "
"a response using ``response.headers['Content-Type']``."
msgstr ""

msgid "Exceptions"
msgstr "Pengecualian"

msgid ""
"If you point the test client at a view that raises an exception and ``Client."
"raise_request_exception`` is ``True``, that exception will be visible in the "
"test case. You can then use a standard ``try ... except`` block or :meth:"
"`~unittest.TestCase.assertRaises` to test for exceptions."
msgstr ""

msgid ""
"The only exceptions that are not visible to the test client are :class:"
"`~django.http.Http404`, :class:`~django.core.exceptions.PermissionDenied`, :"
"exc:`SystemExit`, and :class:`~django.core.exceptions.SuspiciousOperation`. "
"Django catches these exceptions internally and converts them into the "
"appropriate HTTP response codes. In these cases, you can check ``response."
"status_code`` in your test."
msgstr ""

msgid ""
"If ``Client.raise_request_exception`` is ``False``, the test client will "
"return a 500 response as would be returned to a browser. The response has "
"the attribute :attr:`~Response.exc_info` to provide information about the "
"unhandled exception."
msgstr ""

msgid "Persistent state"
msgstr "Keadaan gigih"

msgid ""
"The test client is stateful. If a response returns a cookie, then that "
"cookie will be stored in the test client and sent with all subsequent "
"``get()`` and ``post()`` requests."
msgstr ""

msgid ""
"Expiration policies for these cookies are not followed. If you want a cookie "
"to expire, either delete it manually or create a new ``Client`` instance "
"(which will effectively delete all cookies)."
msgstr ""

msgid ""
"A test client has two attributes that store persistent state information. "
"You can access these properties as part of a test condition."
msgstr ""

msgid ""
"A Python :class:`~http.cookies.SimpleCookie` object, containing the current "
"values of all the client cookies. See the documentation of the :mod:`http."
"cookies` module for more."
msgstr ""

msgid ""
"A dictionary-like object containing session information. See the :doc:"
"`session documentation</topics/http/sessions>` for full details."
msgstr ""

msgid ""
"To modify the session and then save it, it must be stored in a variable "
"first (because a new ``SessionStore`` is created every time this property is "
"accessed)::"
msgstr ""

msgid "Setting the language"
msgstr "Mengatur bahasa"

msgid ""
"When testing applications that support internationalization and "
"localization, you might want to set the language for a test client request. "
"The method for doing so depends on whether or not the :class:`~django."
"middleware.locale.LocaleMiddleware` is enabled."
msgstr ""

msgid ""
"If the middleware is enabled, the language can be set by creating a cookie "
"with a name of :setting:`LANGUAGE_COOKIE_NAME` and a value of the language "
"code::"
msgstr ""

msgid "or by including the ``Accept-Language`` HTTP header in the request::"
msgstr ""
"atau dengan menyertakan kepala HTTP ``Accept-Language`` dalam permintaan::"

msgid "More details are in :ref:`how-django-discovers-language-preference`."
msgstr ""
"Lebih rinci adalah dalam :ref:`how-django-discovers-language-preference`."

msgid ""
"If the middleware isn't enabled, the active language may be set using :func:"
"`.translation.override`::"
msgstr ""
"Jika middleware tidak diadakan, bahasa aktif mungkin disetel menggunakan :"
"func:`.translation.override`::"

msgid "More details are in :ref:`explicitly-setting-the-active-language`."
msgstr "Lebih rinci adalah di :ref:`explicitly-setting-the-active-language`."

msgid "The following is a unit test using the test client::"
msgstr ""

msgid ":class:`django.test.RequestFactory`"
msgstr ":class:`django.test.RequestFactory`"

msgid "Provided test case classes"
msgstr "Disediakan kelas-kelas percobaan kasus"

msgid ""
"Normal Python unit test classes extend a base class of :class:`unittest."
"TestCase`. Django provides a few extensions of this base class:"
msgstr ""

msgid "Hierarchy of Django unit testing classes (TestCase subclasses)"
msgstr ""

msgid "Hierarchy of Django unit testing classes"
msgstr "Susunan dari satuan kelas-kelas percobaan Django"

msgid ""
"You can convert a normal :class:`unittest.TestCase` to any of the "
"subclasses: change the base class of your test from ``unittest.TestCase`` to "
"the subclass. All of the standard Python unit test functionality will be "
"available, and it will be augmented with some useful additions as described "
"in each section below."
msgstr ""

msgid "``SimpleTestCase``"
msgstr "``SimpleTestCase``"

msgid "A subclass of :class:`unittest.TestCase` that adds this functionality:"
msgstr ""
"Sebuah subkelas :class:`unittest.TestCase` yang menambahkan kegunaan ini:"

msgid "Some useful assertions like:"
msgstr "Beberapa penegasan berguna seperti:"

msgid ""
"Checking that a callable :meth:`raises a certain exception <SimpleTestCase."
"assertRaisesMessage>`."
msgstr ""
"Memeriksa bahwa sebuah callable :meth:`raises a certain exception "
"<SimpleTestCase.assertRaisesMessage>`."

msgid ""
"Checking that a callable :meth:`triggers a certain warning <SimpleTestCase."
"assertWarnsMessage>`."
msgstr ""

msgid ""
"Testing form field :meth:`rendering and error treatment <SimpleTestCase."
"assertFieldOutput>`."
msgstr ""
"Menguji bidang formulir :meth:`rendering and error treatment <SimpleTestCase."
"assertFieldOutput>`."

msgid ""
"Testing :meth:`HTML responses for the presence/lack of a given fragment "
"<SimpleTestCase.assertContains>`."
msgstr ""
"Menguji :meth:`HTML responses for the presence/lack of a given fragment "
"<SimpleTestCase.assertContains>`."

msgid ""
"Verifying that a template :meth:`has/hasn't been used to generate a given "
"response content <SimpleTestCase.assertTemplateUsed>`."
msgstr ""
"Memeriksa bahwa sebuah cetakan :meth:`has/hasn't been used to generate a "
"given response content <SimpleTestCase.assertTemplateUsed>`."

msgid ""
"Verifying that two :meth:`URLs <SimpleTestCase.assertURLEqual>` are equal."
msgstr ""

msgid ""
"Verifying an HTTP :meth:`redirect <SimpleTestCase.assertRedirects>` is "
"performed by the app."
msgstr ""

msgid ""
"Robustly testing two :meth:`HTML fragments <SimpleTestCase.assertHTMLEqual>` "
"for equality/inequality or :meth:`containment <SimpleTestCase.assertInHTML>`."
msgstr ""

msgid ""
"Robustly testing two :meth:`XML fragments <SimpleTestCase.assertXMLEqual>` "
"for equality/inequality."
msgstr ""

msgid ""
"Robustly testing two :meth:`JSON fragments <SimpleTestCase.assertJSONEqual>` "
"for equality."
msgstr ""
"Sangat kuat mencoba dua :meth:`JSON fragments <SimpleTestCase."
"assertJSONEqual>` untuk kesetaraan."

msgid ""
"The ability to run tests with :ref:`modified settings <overriding-settings>`."
msgstr "Kemampuan menjalankan percobaan dengan :ref:`modified settings 1`. "

msgid "Using the :attr:`~SimpleTestCase.client` :class:`~django.test.Client`."
msgstr ""
"Menggunakan :attr:`~SimpleTestCase.client` :class:`~django.test.Client`."

msgid ""
"If your tests make any database queries, use subclasses :class:`~django.test."
"TransactionTestCase` or :class:`~django.test.TestCase`."
msgstr ""

msgid ""
":class:`~SimpleTestCase` disallows database queries by default. This helps "
"to avoid executing write queries which will affect other tests since each "
"``SimpleTestCase`` test isn't run in a transaction. If you aren't concerned "
"about this problem, you can disable this behavior by setting the "
"``databases`` class attribute to ``'__all__'`` on your test class."
msgstr ""

msgid ""
"``SimpleTestCase`` and its subclasses (e.g. ``TestCase``, ...) rely on "
"``setUpClass()`` and ``tearDownClass()`` to perform some class-wide "
"initialization (e.g. overriding settings). If you need to override those "
"methods, don't forget to call the ``super`` implementation::"
msgstr ""

msgid ""
"Be sure to account for Python's behavior if an exception is raised during "
"``setUpClass()``. If that happens, neither the tests in the class nor "
"``tearDownClass()`` are run. In the case of :class:`django.test.TestCase`, "
"this will leak the transaction created in ``super()``  which results in "
"various symptoms including a segmentation fault on some platforms (reported "
"on macOS). If you want to intentionally raise an exception such as :exc:"
"`unittest.SkipTest` in ``setUpClass()``, be sure to do it before calling "
"``super()`` to avoid this."
msgstr ""

msgid "``TransactionTestCase``"
msgstr "``TransactionTestCase``"

msgid ""
"``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase` "
"to add some database-specific features:"
msgstr ""
"``TransactionTestCase`` mewarisi dari :class:`~django.test."
"SimpleTestCase` untuk menambah beberapa fitur-fitur khusus-basisdata:"

msgid ""
"Resetting the database to a known state at the beginning of each test to "
"ease testing and using the ORM."
msgstr ""

msgid "Database :attr:`~TransactionTestCase.fixtures`."
msgstr "Basisdata :attr:`~TransactionTestCase.fixtures`."

msgid ""
"Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr "Mencoba :class:`~django.test.SimpleTestCase` "

msgid ""
"The remaining specialized :meth:`assert* <TransactionTestCase."
"assertQuerysetEqual>` methods."
msgstr ""

msgid ""
"Django's :class:`TestCase` class is a more commonly used subclass of "
"``TransactionTestCase`` that makes use of database transaction facilities to "
"speed up the process of resetting the database to a known state at the "
"beginning of each test. A consequence of this, however, is that some "
"database behaviors cannot be tested within a Django ``TestCase`` class. For "
"instance, you cannot test that a block of code is executing within a "
"transaction, as is required when using :meth:`~django.db.models.query."
"QuerySet.select_for_update()`. In those cases, you should use "
"``TransactionTestCase``."
msgstr ""

msgid ""
"``TransactionTestCase`` and ``TestCase`` are identical except for the manner "
"in which the database is reset to a known state and the ability for test "
"code to test the effects of commit and rollback:"
msgstr ""

msgid ""
"A ``TransactionTestCase`` resets the database after the test runs by "
"truncating all tables. A ``TransactionTestCase`` may call commit and "
"rollback and observe the effects of these calls on the database."
msgstr ""

msgid ""
"A ``TestCase``, on the other hand, does not truncate tables after a test. "
"Instead, it encloses the test code in a database transaction that is rolled "
"back at the end of the test. This guarantees that the rollback at the end of "
"the test restores the database to its initial state."
msgstr ""

msgid ""
"``TestCase`` running on a database that does not support rollback (e.g. "
"MySQL with the MyISAM storage engine), and all instances of "
"``TransactionTestCase``, will roll back at the end of the test by deleting "
"all data from the test database."
msgstr ""

msgid ""
"Apps :ref:`will not see their data reloaded <test-case-serialized-"
"rollback>`; if you need this functionality (for example, third-party apps "
"should enable this) you can set ``serialized_rollback = True`` inside the "
"``TestCase`` body."
msgstr ""
"Aplikas-aplikasi :ref:`will not see their data reloaded 1`; jika anda butuh "
"kegunaan ini (sebagai contoh, aplikasi-aplikasi pihak-ketiga harus "
"mengadakan ini) anda dapat mensetel ``serialized_rollback = True`` didalam "
"badan ``TestCase``. "

msgid "``TestCase``"
msgstr "``TestCase``"

msgid ""
"This is the most common class to use for writing tests in Django. It "
"inherits from :class:`TransactionTestCase` (and by extension :class:"
"`SimpleTestCase`). If your Django application doesn't use a database, use :"
"class:`SimpleTestCase`."
msgstr ""

msgid "The class:"
msgstr ""

msgid ""
"Wraps the tests within two nested :func:`~django.db.transaction.atomic` "
"blocks: one for the whole class and one for each test. Therefore, if you "
"want to test some specific database transaction behavior, use :class:"
"`TransactionTestCase`."
msgstr ""

msgid "Checks deferrable database constraints at the end of each test."
msgstr ""

msgid "It also provides an additional method:"
msgstr "Itu juga menyediakan sebuah metode tambahan:"

msgid ""
"The class-level ``atomic`` block described above allows the creation of "
"initial data at the class level, once for the whole ``TestCase``. This "
"technique allows for faster tests as compared to using ``setUp()``."
msgstr ""

msgid ""
"Note that if the tests are run on a database with no transaction support "
"(for instance, MySQL with the MyISAM engine), ``setUpTestData()`` will be "
"called before each test, negating the speed benefits."
msgstr ""

msgid ""
"Objects assigned to class attributes in ``setUpTestData()`` must support "
"creating deep copies with :py:func:`copy.deepcopy` in order to isolate them "
"from alterations performed by each test methods. In previous versions of "
"Django these objects were reused and changes made to them were persisted "
"between test methods."
msgstr ""

msgid ""
"Returns a context manager that captures :func:`transaction.on_commit() "
"<django.db.transaction.on_commit>` callbacks for the given database "
"connection. It returns a list that contains, on exit of the context, the "
"captured callback functions. From this list you can make assertions on the "
"callbacks or call them to invoke their side effects, emulating a commit."
msgstr ""

msgid ""
"``using`` is the alias of the database connection to capture callbacks for."
msgstr ""

msgid ""
"If ``execute`` is ``True``, all the callbacks will be called as the context "
"manager exits, if no exception occurred. This emulates a commit after the "
"wrapped block of code."
msgstr ""

msgid ""
"In older versions, new callbacks added while executing :func:`.transaction."
"on_commit` callbacks were not captured."
msgstr ""

msgid "``LiveServerTestCase``"
msgstr "``LiveServerTestCase``"

msgid ""
"``LiveServerTestCase`` does basically the same as :class:`~django.test."
"TransactionTestCase` with one extra feature: it launches a live Django "
"server in the background on setup, and shuts it down on teardown. This "
"allows the use of automated test clients other than the :ref:`Django dummy "
"client <test-client>` such as, for example, the Selenium_ client, to execute "
"a series of functional tests inside a browser and simulate a real user's "
"actions."
msgstr ""

msgid ""
"The live server listens on ``localhost`` and binds to port 0 which uses a "
"free port assigned by the operating system. The server's URL can be accessed "
"with ``self.live_server_url`` during the tests."
msgstr ""

msgid ""
"To demonstrate how to use ``LiveServerTestCase``, let's write a Selenium "
"test. First of all, you need to install the `selenium package`_ into your "
"Python path:"
msgstr ""

msgid ""
"Then, add a ``LiveServerTestCase``-based test to your app's tests module "
"(for example: ``myapp/tests.py``). For this example, we'll assume you're "
"using the :mod:`~django.contrib.staticfiles` app and want to have static "
"files served during the execution of your tests similar to what we get at "
"development time with ``DEBUG=True``, i.e. without having to collect them "
"using :djadmin:`collectstatic`. We'll use the  :class:`~django.contrib."
"staticfiles.testing.StaticLiveServerTestCase` subclass which provides that "
"functionality. Replace it with ``django.test.LiveServerTestCase`` if you "
"don't need that."
msgstr ""

msgid "The code for this test may look as follows::"
msgstr "Kode untuk percobaan ini mungkin terlihat seperti berikut::"

msgid "Finally, you may run the test as follows:"
msgstr "Akhirnya, anda dapat menjalankan percobaan sebagai berikut:"

msgid ""
"This example will automatically open Firefox then go to the login page, "
"enter the credentials and press the \"Log in\" button. Selenium offers other "
"drivers in case you do not have Firefox installed or wish to use another "
"browser. The example above is just a tiny fraction of what the Selenium "
"client can do; check out the `full reference`_ for more details."
msgstr ""
"Contoh ini akan otomatis membuka Firefox kemudian pergi ke halaman masuk, "
"masuk mandat dan tekan tombol \"Log in\". Selenium menawarkan driver-driver "
"lain dalam kasus anda tidak mempunyai Firefox terpasang atau berharap "
"menggunakan peramban lain. Contoh diatas hanya bagian kecil dari apa klien "
"Selenium dapat lakukan; periksa `full reference`_ untuk rincian lebih."

msgid ""
"When using an in-memory SQLite database to run the tests, the same database "
"connection will be shared by two threads in parallel: the thread in which "
"the live server is run and the thread in which the test case is run. It's "
"important to prevent simultaneous database queries via this shared "
"connection by the two threads, as that may sometimes randomly cause the "
"tests to fail. So you need to ensure that the two threads don't access the "
"database at the same time. In particular, this means that in some cases (for "
"example, just after clicking a link or submitting a form), you might need to "
"check that a response is received by Selenium and that the next page is "
"loaded before proceeding with further test execution. Do this, for example, "
"by making Selenium wait until the ``<body>`` HTML tag is found in the "
"response (requires Selenium > 2.13)::"
msgstr ""

msgid ""
"The tricky thing here is that there's really no such thing as a \"page load,"
"\" especially in modern web apps that generate HTML dynamically after the "
"server generates the initial document. So, checking for the presence of "
"``<body>`` in the response might not necessarily be appropriate for all use "
"cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ for "
"more information."
msgstr ""

msgid "Test cases features"
msgstr "Fitur percobaan kasus"

msgid "Default test client"
msgstr "Percobaan klien awal"

msgid ""
"Every test case in a ``django.test.*TestCase`` instance has access to an "
"instance of a Django test client. This client can be accessed as ``self."
"client``. This client is recreated for each test, so you don't have to worry "
"about state (such as cookies) carrying over from one test to another."
msgstr ""

msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

msgid "...you can refer to ``self.client``, like so::"
msgstr ""

msgid "Customizing the test client"
msgstr "Menyesuaian klien percobaan"

msgid ""
"If you want to use a different ``Client`` class (for example, a subclass "
"with customized behavior), use the :attr:`~SimpleTestCase.client_class` "
"class attribute::"
msgstr ""

msgid "Fixture loading"
msgstr ""

msgid ""
"A test case for a database-backed website isn't much use if there isn't any "
"data in the database. Tests are more readable and it's more maintainable to "
"create objects using the ORM, for example in :meth:`TestCase.setUpTestData`, "
"however, you can also use fixtures."
msgstr ""

msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. For example, if your site has user accounts, you might set up a "
"fixture of fake user accounts in order to populate your database during "
"tests."
msgstr ""

msgid ""
"The most straightforward way of creating a fixture is to use the :djadmin:"
"`manage.py dumpdata <dumpdata>` command. This assumes you already have some "
"data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` "
"for more details."
msgstr ""

msgid ""
"Once you've created a fixture and placed it in a ``fixtures`` directory in "
"one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by "
"specifying a ``fixtures`` class attribute on your :class:`django.test."
"TestCase` subclass::"
msgstr ""

msgid "Here's specifically what will happen:"
msgstr "Ini adalah secara khusus apa yang akan terjadi:"

msgid ""
"At the start of each test, before ``setUp()`` is run, Django will flush the "
"database, returning the database to the state it was in directly after :"
"djadmin:`migrate` was called."
msgstr ""

msgid ""
"Then, all the named fixtures are installed. In this example, Django will "
"install any JSON fixture named ``mammals``, followed by any fixture named "
"``birds``. See the :djadmin:`loaddata` documentation for more details on "
"defining and installing fixtures."
msgstr ""

msgid ""
"For performance reasons, :class:`TestCase` loads fixtures once for the "
"entire test class, before :meth:`~TestCase.setUpTestData`, instead of before "
"each test, and it uses transactions to clean the database before each test. "
"In any case, you can be certain that the outcome of a test will not be "
"affected by another test or by the order of test execution."
msgstr ""

msgid ""
"By default, fixtures are only loaded into the ``default`` database. If you "
"are using multiple databases and set :attr:`TransactionTestCase.databases`, "
"fixtures will be loaded into all specified databases."
msgstr ""

msgid "URLconf configuration"
msgstr "Konfigurasi URLconf"

msgid ""
"If your application provides views, you may want to include tests that use "
"the test client to exercise those views. However, an end user is free to "
"deploy the views in your application at any URL of their choosing. This "
"means that your tests can't rely upon the fact that your views will be "
"available at a particular URL. Decorate your test class or test method with "
"``@override_settings(ROOT_URLCONF=...)`` for URLconf configuration."
msgstr ""

msgid "Multi-database support"
msgstr "Dukungan banyak-basisdata"

msgid ""
"Django sets up a test database corresponding to every database that is "
"defined in the :setting:`DATABASES` definition in your settings and referred "
"to by at least one test through ``databases``."
msgstr ""

msgid ""
"However, a big part of the time taken to run a Django ``TestCase`` is "
"consumed by the call to ``flush`` that ensures that you have a clean "
"database at the start of each test run. If you have multiple databases, "
"multiple flushes are required (one for each database), which can be a time "
"consuming activity -- especially if your tests don't need to test multi-"
"database activity."
msgstr ""

msgid ""
"As an optimization, Django only flushes the ``default`` database at the "
"start of each test run. If your setup contains multiple databases, and you "
"have a test that requires every database to be clean, you can use the "
"``databases`` attribute on the test suite to request extra databases to be "
"flushed."
msgstr ""

msgid ""
"This test case will flush the ``default`` and ``other`` test databases "
"before running ``test_index_page_view``. You can also use ``'__all__'`` to "
"specify that all of the test databases must be flushed."
msgstr ""

msgid ""
"The ``databases`` flag also controls which databases the :attr:"
"`TransactionTestCase.fixtures` are loaded into. By default, fixtures are "
"only loaded into the ``default`` database."
msgstr ""

msgid ""
"Queries against databases not in ``databases`` will give assertion errors to "
"prevent state leaking between tests."
msgstr ""

msgid ""
"By default, only the ``default`` database will be wrapped in a transaction "
"during a ``TestCase``'s execution and attempts to query other databases will "
"result in assertion errors to prevent state leaking between tests."
msgstr ""

msgid ""
"Use the ``databases`` class attribute on the test class to request "
"transaction wrapping against non-``default`` databases."
msgstr ""

msgid ""
"This test will only allow queries against the ``other`` database. Just like "
"for :attr:`SimpleTestCase.databases` and :attr:`TransactionTestCase."
"databases`, the ``'__all__'`` constant can be used to specify that the test "
"should allow queries to all databases."
msgstr ""

msgid "Overriding settings"
msgstr "Pengaturan utama"

msgid ""
"Use the functions below to temporarily alter the value of settings in tests. "
"Don't manipulate ``django.conf.settings`` directly as Django won't restore "
"the original values after such manipulations."
msgstr ""

msgid ""
"For testing purposes it's often useful to change a setting temporarily and "
"revert to the original value after running the testing code. For this use "
"case Django provides a standard Python context manager (see :pep:`343`) "
"called :meth:`~django.test.SimpleTestCase.settings`, which can be used like "
"this::"
msgstr ""

msgid ""
"This example will override the :setting:`LOGIN_URL` setting for the code in "
"the ``with`` block and reset its value to the previous state afterward."
msgstr ""

msgid ""
"It can prove unwieldy to redefine settings that contain a list of values. In "
"practice, adding or removing values is often sufficient. Django provides "
"the :meth:`~django.test.SimpleTestCase.modify_settings` context manager for "
"easier settings changes::"
msgstr ""

msgid ""
"For each action, you can supply either a list of values or a string. When "
"the value already exists in the list, ``append`` and ``prepend`` have no "
"effect; neither does ``remove`` when the value doesn't exist."
msgstr ""

msgid ""
"In case you want to override a setting for a test method, Django provides "
"the :func:`~django.test.override_settings` decorator (see :pep:`318`). It's "
"used like this::"
msgstr ""

msgid ""
"The decorator can also be applied to :class:`~django.test.TestCase` classes::"
msgstr ""

msgid ""
"Likewise, Django provides the :func:`~django.test.modify_settings` "
"decorator::"
msgstr ""

msgid "The decorator can also be applied to test case classes::"
msgstr ""

msgid ""
"When given a class, these decorators modify the class directly and return "
"it; they don't create and return a modified copy of it. So if you try to "
"tweak the above examples to assign the return value to a different name than "
"``LoginTestCase`` or ``MiddlewareTestCase``, you may be surprised to find "
"that the original test case classes are still equally affected by the "
"decorator. For a given class, :func:`~django.test.modify_settings` is always "
"applied after :func:`~django.test.override_settings`."
msgstr ""

msgid ""
"The settings file contains some settings that are only consulted during "
"initialization of Django internals. If you change them with "
"``override_settings``, the setting is changed if you access it via the "
"``django.conf.settings`` module, however, Django's internals access it "
"differently. Effectively, using :func:`~django.test.override_settings` or :"
"func:`~django.test.modify_settings` with these settings is probably not "
"going to do what you expect it to do."
msgstr ""

msgid ""
"We do not recommend altering the :setting:`DATABASES` setting. Altering the :"
"setting:`CACHES` setting is possible, but a bit tricky if you are using "
"internals that make using of caching, like :mod:`django.contrib.sessions`. "
"For example, you will have to reinitialize the session backend in a test "
"that uses cached sessions and overrides :setting:`CACHES`."
msgstr ""

msgid ""
"Finally, avoid aliasing your settings as module-level constants as "
"``override_settings()`` won't work on such values since they are only "
"evaluated the first time the module is imported."
msgstr ""

msgid ""
"You can also simulate the absence of a setting by deleting it after settings "
"have been overridden, like this::"
msgstr ""

msgid ""
"When overriding settings, make sure to handle the cases in which your app's "
"code uses a cache or similar feature that retains state even if the setting "
"is changed. Django provides the :data:`django.test.signals.setting_changed` "
"signal that lets you register callbacks to clean up and otherwise reset "
"state when settings are changed."
msgstr ""

msgid "Django itself uses this signal to reset various data:"
msgstr ""
"Django itu sendiri menggunakan sinyal ini untuk menyetel kembali beragam "
"data:"

msgid "Overridden settings"
msgstr "Pengaturan ditimpa"

msgid "Data reset"
msgstr "Setel kembali data"

msgid "USE_TZ, TIME_ZONE"
msgstr "USE_TZ, TIME_ZONE"

msgid "Databases timezone"
msgstr "Zona waktu basisdata"

msgid "TEMPLATES"
msgstr "TEMPLATES"

msgid "Template engines"
msgstr "Mesin cetakan"

msgid "SERIALIZATION_MODULES"
msgstr "SERIALIZATION_MODULES"

msgid "Serializers cache"
msgstr ""

msgid "LOCALE_PATHS, LANGUAGE_CODE"
msgstr "LOCALE_PATHS, LANGUAGE_CODE"

msgid "Default translation and loaded translations"
msgstr "Terjemahan awalan dan terjemahan dimuat"

msgid "MEDIA_ROOT, DEFAULT_FILE_STORAGE"
msgstr "MEDIA_ROOT, DEFAULT_FILE_STORAGE"

msgid "Default file storage"
msgstr "Penyimpanan berkas awal"

msgid "Emptying the test outbox"
msgstr ""

msgid ""
"If you use any of Django's custom ``TestCase`` classes, the test runner will "
"clear the contents of the test email outbox at the start of each test case."
msgstr ""

msgid ""
"For more detail on email services during tests, see `Email services`_ below."
msgstr ""
"Untuk lebih rincian pada layanan surel selama percobaan, lihat `Email "
"services`_ dibawah."

msgid "Assertions"
msgstr "Penegasan"

msgid ""
"As Python's normal :class:`unittest.TestCase` class implements assertion "
"methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest."
"TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a "
"number of custom assertion methods that are useful for testing web "
"applications:"
msgstr ""

msgid ""
"The failure messages given by most of these assertion methods can be "
"customized with the ``msg_prefix`` argument. This string will be prefixed to "
"any failure message generated by the assertion. This allows you to provide "
"additional details that may help you to identify the location and cause of a "
"failure in your test suite."
msgstr ""

msgid ""
"Asserts that execution of ``callable`` raises ``expected_exception`` and "
"that ``expected_message`` is found in the exception's message. Any other "
"outcome is reported as a failure. It's a simpler version of :meth:`unittest."
"TestCase.assertRaisesRegex` with the difference that ``expected_message`` "
"isn't treated as a regular expression."
msgstr ""

msgid ""
"If only the ``expected_exception`` and ``expected_message`` parameters are "
"given, returns a context manager so that the code being tested can be "
"written inline rather than as a function::"
msgstr ""
"Jika hanya parameter ``expected_exception`` dan ``expected_message`` "
"diberikan, mengembalikan sebuah pengelola konteks sehingga kode sedang "
"dicobakan dapat ditulir berderet daripada sebagai sebuah fungsi::"

msgid ""
"Analogous to :meth:`SimpleTestCase.assertRaisesMessage` but for :meth:"
"`~unittest.TestCase.assertWarnsRegex` instead of :meth:`~unittest.TestCase."
"assertRaisesRegex`."
msgstr ""

msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

msgid "the class of the field to be tested."
msgstr "kelas dari bidang yang akan dicoba."

msgid "a dictionary mapping valid inputs to their expected cleaned values."
msgstr ""

msgid ""
"a dictionary mapping invalid inputs to one or more raised error messages."
msgstr ""

msgid "the args passed to instantiate the field."
msgstr ""

msgid "the kwargs passed to instantiate the field."
msgstr ""

msgid "the expected clean output for inputs in ``empty_values``."
msgstr "keluaran bersih diharapkan untuk masukan dalam ``empty_values``."

msgid ""
"For example, the following code tests that an ``EmailField`` accepts ``a@a."
"com`` as a valid email address, but rejects ``aaa`` with a reasonable error "
"message::"
msgstr ""

msgid ""
"Asserts that a field on a form raises the provided list of errors when "
"rendered on the form."
msgstr ""

msgid ""
"``response`` must be a response instance returned by the :class:`test client "
"<django.test.Response>`."
msgstr ""

msgid ""
"``form`` is the name the ``Form`` instance was given in the template context "
"of the response."
msgstr ""

msgid ""
"``field`` is the name of the field on the form to check. If ``field`` has a "
"value of ``None``, non-field errors (errors you can access via :meth:`form."
"non_field_errors() <django.forms.Form.non_field_errors>`) will be checked."
msgstr ""

msgid ""
"``errors`` is an error string, or a list of error strings, that are expected "
"as a result of form validation."
msgstr ""

msgid ""
"Asserts that the ``formset`` raises the provided list of errors when "
"rendered."
msgstr ""

msgid ""
"``formset`` is the name the ``Formset`` instance was given in the template "
"context of the response."
msgstr ""

msgid ""
"``form_index`` is the number of the form within the ``Formset``.  If "
"``form_index`` has a value of ``None``, non-form errors (errors you can "
"access via ``formset.non_form_errors()``) will be checked."
msgstr ""

msgid ""
"Asserts that a :class:`response <django.http.HttpResponse>` produced the "
"given :attr:`~django.http.HttpResponse.status_code` and that ``text`` "
"appears in its :attr:`~django.http.HttpResponse.content`. If ``count`` is "
"provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

msgid ""
"Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the "
"response content will be based on HTML semantics instead of character-by-"
"character equality. Whitespace is ignored in most cases, attribute ordering "
"is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more "
"details."
msgstr ""
"Setel ``html`` menjadi ``True`` untuk menangani ``text`` sebagai HTML. "
"Perbandingan dengan tanggapan isi akan berdasarkan pada semantik HTML dari "
"kesetaraan karakter-demi-karakter. Ruang kosong adalah diabaikan pada banyak "
"kasus, urutan atribut tidak signifikan. Lihat :meth:`~SimpleTestCase."
"assertHTMLEqual` untuk rincian lebih."

msgid ""
"Asserts that a :class:`response <django.http.HttpResponse>` produced the "
"given :attr:`~django.http.HttpResponse.status_code` and that ``text`` does "
"*not* appear in its :attr:`~django.http.HttpResponse.content`."
msgstr ""

msgid ""
"Asserts that the template with the given name was used in rendering the "
"response."
msgstr ""
"Tegaskan bahwa cetakan dengan nama diberikan digunakan dalam membangun "
"tanggapan."

msgid "``template_name`` should be a string such as ``'admin/index.html'``."
msgstr ""

msgid ""
"The ``count`` argument is an integer indicating the number of times the "
"template should be rendered. Default is ``None``, meaning that the template "
"should be rendered one or more times."
msgstr ""

msgid "You can use this as a context manager, like this::"
msgstr "Anda dapat menggunakan ini sebagai pengelola konteks, seperti ini::"

msgid ""
"Asserts that the template with the given name was *not* used in rendering "
"the response."
msgstr ""
"Tegaskan bahwa cetakan dengan nama diberikan *tidak* digunakan dalam "
"membangun tanggapan."

msgid ""
"You can use this as a context manager in the same way as :meth:"
"`~SimpleTestCase.assertTemplateUsed`."
msgstr ""
"Anda dapat menggunakan ini sebagai pengelola konteks dalam cara sama "
"seperti :meth:`~SimpleTestCase.assertTemplateUsed`."

msgid ""
"Asserts that two URLs are the same, ignoring the order of query string "
"parameters except for parameters with the same name. For example, ``/path/?"
"x=1&y=2`` is equal to ``/path/?y=2&x=1``, but ``/path/?a=1&a=2`` isn't equal "
"to ``/path/?a=2&a=1``."
msgstr ""

msgid ""
"Asserts that the :class:`response <django.http.HttpResponse>` returned a :"
"attr:`~django.http.HttpResponse.status_code` redirect status, redirected to "
"``expected_url`` (including any ``GET`` data), and that the final page was "
"received with ``target_status_code``."
msgstr ""

msgid ""
"If your request used the ``follow`` argument, the ``expected_url`` and "
"``target_status_code`` will be the url and status code for the final point "
"of the redirect chain."
msgstr ""
"Jika permintaan anda menggunakan argumen ``follow``, ``expected_url`` dan "
"``target_status_code`` akan berupa url dan kode keadaan untuk titik akhir "
"dari rantai pengalihan."

msgid ""
"If ``fetch_redirect_response`` is ``False``, the final page won't be loaded. "
"Since the test client can't fetch external URLs, this is particularly useful "
"if ``expected_url`` isn't part of your Django app."
msgstr ""
"Jika ``fetch_redirect_response`` adalah ``False``, halaman akhir tidak akan "
"dimuat. Sejak klien percobaan tidak dapat mengambil URL luar, ini khususnya "
"berguna jika ``expected_url`` bukan bagian dari aplikasi Django anda."

msgid ""
"Scheme is handled correctly when making comparisons between two URLs. If "
"there isn't any scheme specified in the location where we are redirected to, "
"the original request's scheme is used. If present, the scheme in "
"``expected_url`` is the one used to make the comparisons to."
msgstr ""
"Skema ditangani dengan benar ketika membuat perbandingan diantara dua URL. "
"Jika tidak ada skema apapun ditentukan dalam tempat dimana kami mengalihkan, "
"skema permintaan asli digunakan. Jika hadir, skema dalam ``expected_url`` "
"adalah satu digunakan untuk membuat perbandingan."

msgid ""
"Asserts that the strings ``html1`` and ``html2`` are equal. The comparison "
"is based on HTML semantics. The comparison takes following things into "
"account:"
msgstr ""
"Tegaskan bahwa string ``html1`` dan ``html2`` adalah sama. Perbandingan "
"berdasarkan pada semantik HTML. Perbandingan mengambil hal-hal berikut "
"kedalam akun:"

msgid "Whitespace before and after HTML tags is ignored."
msgstr "Ruang kosong sebelum dan setelah etiket HTML diabaikan."

msgid "All types of whitespace are considered equivalent."
msgstr "Semua jenis ruang kosong dianggap setara."

msgid ""
"All open tags are closed implicitly, e.g. when a surrounding tag is closed "
"or the HTML document ends."
msgstr ""
"Semua etiket buka ditutup mutlak, yaitu ketika sekeliling etiket ditutup "
"atau dokumen HTML berakhir."

msgid "Empty tags are equivalent to their self-closing version."
msgstr "Etiket kosong adalah setara pada versi penutupan-sendiri mereka."

msgid "The ordering of attributes of an HTML element is not significant."
msgstr "Urutan dari atribut-atribut dari sebuah unsur HTML tidak signifikan."

msgid ""
"Boolean attributes (like ``checked``) without an argument are equal to "
"attributes that equal in name and value (see the examples)."
msgstr ""

msgid ""
"Text, character references, and entity references that refer to the same "
"character are equivalent."
msgstr ""

msgid ""
"The following examples are valid tests and don't raise any "
"``AssertionError``::"
msgstr ""
"Contoh-contoh berikut adalah percobaan sah dan tidak memunculkan "
"``AssertionError`` apapun::"

msgid ""
"``html1`` and ``html2`` must contain HTML. An ``AssertionError`` will be "
"raised if one of them cannot be parsed."
msgstr ""

msgid "Output in case of error can be customized with the ``msg`` argument."
msgstr ""
"Keluaran dalam rangka kesalahan dapat disesuaikan dengan argumen ``msg``."

msgid ""
"In older versions, any attribute (not only boolean attributes) without a "
"value was considered equal to an attribute with the same name and value."
msgstr ""

msgid ""
"Asserts that the strings ``html1`` and ``html2`` are *not* equal. The "
"comparison is based on HTML semantics. See :meth:`~SimpleTestCase."
"assertHTMLEqual` for details."
msgstr ""
"Tegaskan bahwa string ``html1`` dan ``html2`` *tidak* sama. Perbandingan "
"berdasarkan pada semantik HTML. Lihat :meth:`~SimpleTestCase."
"assertHTMLEqual` untuk rincian."

msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are equal. The comparison is "
"based on XML semantics. Similarly to :meth:`~SimpleTestCase."
"assertHTMLEqual`, the comparison is made on parsed content, hence only "
"semantic differences are considered, not syntax differences. When invalid "
"XML is passed in any parameter, an ``AssertionError`` is always raised, even "
"if both strings are identical."
msgstr ""

msgid ""
"XML declaration, document type, processing instructions, and comments are "
"ignored. Only the root element and its children are compared."
msgstr ""

msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are *not* equal. The "
"comparison is based on XML semantics. See :meth:`~SimpleTestCase."
"assertXMLEqual` for details."
msgstr ""
"Tegaskan bahwa string ``xml1`` dan ``xml2`` adalah *tidak* sama. "
"Perbandingan berdasarkan pada semantik XML. Lihat :meth:`~SimpleTestCase."
"assertXMLEqual` untuk rincian. "

msgid ""
"Asserts that the HTML fragment ``needle`` is contained in the ``haystack`` "
"one."
msgstr ""
"Tegaskan bahwa bagian HTML ``needle`` dikandung dalam satu di ``haystack``."

msgid ""
"If the ``count`` integer argument is specified, then additionally the number "
"of ``needle`` occurrences will be strictly verified."
msgstr ""
"Jika argumen integer ``count`` ditentukan, kemudian tambahannya sejumlah "
"dari kejadian ``needle`` akan diperiksa secara ketat."

msgid ""
"Whitespace in most cases is ignored, and attribute ordering is not "
"significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more details."
msgstr ""

msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are equal. "
"Usual JSON non-significant whitespace rules apply as the heavyweight is "
"delegated to the :mod:`json` library."
msgstr ""
"Menegaskan bahwa fragmen JSON ``raw`` dan ``expected_data`` adalah setara. "
"Aturan ruang kosong bukan-signifikan JSON biasa berlaku sebagai kelas berat "
"dilimpahkan ke pustaka :mod:`json`. "

msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are *not* "
"equal. See :meth:`~SimpleTestCase.assertJSONEqual` for further details."
msgstr ""

msgid ""
"Asserts that a queryset ``qs`` matches a particular iterable of values "
"``values``."
msgstr ""

msgid ""
"If ``transform`` is provided, ``values`` is compared to a list produced by "
"applying ``transform`` to each member of ``qs``."
msgstr ""

msgid ""
"By default, the comparison is also ordering dependent. If ``qs`` doesn't "
"provide an implicit ordering, you can set the ``ordered`` parameter to "
"``False``, which turns the comparison into a ``collections.Counter`` "
"comparison. If the order is undefined (if the given ``qs`` isn't ordered and "
"the comparison is against more than one ordered value), a ``ValueError`` is "
"raised."
msgstr ""

msgid "The default value of ``transform`` argument was changed to ``None``."
msgstr ""

msgid "Support for direct comparison between querysets was added."
msgstr ""

msgid ""
"If ``transform`` is not provided and ``values`` is a list of strings, it's "
"compared to a list produced by applying ``repr()`` to each member of ``qs``. "
"This behavior is deprecated and will be removed in Django 4.1. If you need "
"it, explicitly set ``transform`` to ``repr``."
msgstr ""

msgid ""
"Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that "
"``num`` database queries are executed."
msgstr ""
"Tegaskan itu ketika ``func`` dipanggil dengan ``*args`` dan ``**kwargs`` "
"yang permintaan basisdata ``num`` dijalankan."

msgid ""
"If a ``\"using\"`` key is present in ``kwargs`` it is used as the database "
"alias for which to check the number of queries::"
msgstr ""

msgid ""
"If you wish to call a function with a ``using`` parameter you can do it by "
"wrapping the call with a ``lambda`` to add an extra parameter::"
msgstr ""

msgid "You can also use this as a context manager::"
msgstr "Anda dapat juga menggunakan ini sebagai pengelola konteks::"

msgid "Tagging tests"
msgstr "Percobaan etiket"

msgid ""
"You can tag your tests so you can easily run a particular subset. For "
"example, you might label fast or slow tests::"
msgstr ""
"Anda dapat mengetiket percobaan anda sehingga anda dapat dengan mudah "
"menjalankan subset tertentu. Sebagai contoh, anda mungkin melabeli percobaan "
"cepat atau lambat::"

msgid "You can also tag a test case::"
msgstr "Anda dapat juga mengetiket sebuah kasus percobaan::"

msgid ""
"Subclasses inherit tags from superclasses, and methods inherit tags from "
"their class. Given::"
msgstr ""

msgid ""
"``SampleTestCaseChild.test`` will be labeled with ``'slow'``, ``'core'``, "
"``'bar'``, and ``'foo'``."
msgstr ""

msgid ""
"Then you can choose which tests to run. For example, to run only fast tests:"
msgstr ""
"Kemudian anda dapat memilih percobaan mana dijalankan. Sebagai contoh, untuk "
"hanya menjalankan percobaan cepat:"

msgid "Or to run fast tests and the core one (even though it's slow):"
msgstr ""
"Atau untuk menjalankan percobaan cepat dan satu ini (bahkan meskipun itu "
"lambat):"

msgid ""
"You can also exclude tests by tag. To run core tests if they are not slow:"
msgstr ""
"Anda dapat juga tidak menyertakan percobaan dengan etiket. Untuk menjalankan "
"percobaan inti jika mereka tidak lambat:"

msgid ""
":option:`test --exclude-tag` has precedence over :option:`test --tag`, so if "
"a test has two tags and you select one of them and exclude the other, the "
"test won't be run."
msgstr ""

msgid "Testing asynchronous code"
msgstr ""

msgid ""
"If you merely want to test the output of your asynchronous views, the "
"standard test client will run them inside their own asynchronous loop "
"without any extra work needed on your part."
msgstr ""

msgid ""
"However, if you want to write fully-asynchronous tests for a Django project, "
"you will need to take several things into account."
msgstr ""

msgid ""
"Firstly, your tests must be ``async def`` methods on the test class (in "
"order to give them an asynchronous context). Django will automatically "
"detect any ``async def`` tests and wrap them so they run in their own event "
"loop."
msgstr ""

msgid ""
"If you are testing from an asynchronous function, you must also use the "
"asynchronous test client. This is available as ``django.test.AsyncClient``, "
"or as ``self.async_client`` on any test."
msgstr ""

msgid ""
"``AsyncClient`` has the same methods and signatures as the synchronous "
"(normal) test client, with two exceptions:"
msgstr ""

msgid "The ``follow`` parameter is not supported."
msgstr ""

msgid ""
"Headers passed as ``extra`` keyword arguments should not have the ``HTTP_`` "
"prefix required by the synchronous client (see :meth:`Client.get`). For "
"example, here is how to set an HTTP ``Accept`` header::"
msgstr ""

msgid "Using ``AsyncClient`` any method that makes a request must be awaited::"
msgstr ""

msgid ""
"The asynchronous client can also call synchronous views; it runs through "
"Django's :doc:`asynchronous request path </topics/async>`, which supports "
"both. Any view called through the ``AsyncClient`` will get an "
"``ASGIRequest`` object for its ``request`` rather than the ``WSGIRequest`` "
"that the normal client creates."
msgstr ""

msgid ""
"If you are using test decorators, they must be async-compatible to ensure "
"they work correctly. Django's built-in decorators will behave correctly, but "
"third-party ones may appear to not execute (they will \"wrap\" the wrong "
"part of the execution flow and not your test)."
msgstr ""

msgid ""
"If you need to use these decorators, then you should decorate your test "
"methods with :func:`~asgiref.sync.async_to_sync` *inside* of them instead::"
msgstr ""

msgid "Email services"
msgstr "Layanan surel"

msgid ""
"If any of your Django views send email using :doc:`Django's email "
"functionality </topics/email>`, you probably don't want to send email each "
"time you run a test using that view. For this reason, Django's test runner "
"automatically redirects all Django-sent email to a dummy outbox. This lets "
"you test every aspect of sending email -- from the number of messages sent "
"to the contents of each message -- without actually sending the messages."
msgstr ""

msgid ""
"The test runner accomplishes this by transparently replacing the normal "
"email backend with a testing backend. (Don't worry -- this has no effect on "
"any other email senders outside of Django, such as your machine's mail "
"server, if you're running one.)"
msgstr ""

msgid ""
"During test running, each outgoing email is saved in ``django.core.mail."
"outbox``. This is a list of all :class:`~django.core.mail.EmailMessage` "
"instances that have been sent.  The ``outbox`` attribute is a special "
"attribute that is created *only* when the ``locmem`` email backend is used. "
"It doesn't normally exist as part of the :mod:`django.core.mail` module and "
"you can't import it directly. The code below shows how to access this "
"attribute correctly."
msgstr ""

msgid ""
"Here's an example test that examines ``django.core.mail.outbox`` for length "
"and contents::"
msgstr ""
"Ini adalah sebuah contoh percobaan yang menguji ``django.core.mail.outbox`` "
"untuk panjang dan isi::"

msgid ""
"As noted :ref:`previously <emptying-test-outbox>`, the test outbox is "
"emptied at the start of every test in a Django ``*TestCase``. To empty the "
"outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

msgid "Management Commands"
msgstr "Pengelolaan perintah"

msgid ""
"Management commands can be tested with the :func:`~django.core.management."
"call_command` function. The output can be redirected into a ``StringIO`` "
"instance::"
msgstr ""
"Perintah pengelolaan dapat dicobakan dengan fungsi :func:`~django.core."
"management.call_command`. Keluaran dapat dialihkan kedalam instance "
"``StringIO`` ::"

msgid "Skipping tests"
msgstr "Melewati percobaan"

msgid ""
"The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :"
"func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip "
"tests if you know ahead of time that those tests are going to fail under "
"certain conditions."
msgstr ""

msgid ""
"For example, if your test requires a particular optional library in order to "
"succeed, you could decorate the test case with :func:`@skipIf <unittest."
"skipIf>`. Then, the test runner will report that the test wasn't executed "
"and why, instead of failing the test or omitting the test altogether."
msgstr ""

msgid ""
"To supplement these test skipping behaviors, Django provides two additional "
"skip decorators. Instead of testing a generic boolean, these decorators "
"check the capabilities of the database, and skip the test if the database "
"doesn't support a specific named feature."
msgstr ""
"Untuk melengkapi perilaku melewati percobaan ini, Django menyediakan dua "
"tambahan penghias melewatkan. Daripada mencoba boolean umum, penghias ini "
"memeriksa kemampuan dari basisdata, dan melewati percobaan jika basisdata "
"tidak mendukung fitur bernama khusus."

msgid ""
"The decorators use a string identifier to describe database features. This "
"string corresponds to attributes of the database connection features class. "
"See :source:`django.db.backends.base.features.BaseDatabaseFeatures class "
"<django/db/backends/base/features.py>` for a full list of database features "
"that can be used as a basis for skipping tests."
msgstr ""

msgid ""
"Skip the decorated test or ``TestCase`` if all of the named database "
"features are supported."
msgstr ""

msgid ""
"For example, the following test will not be executed if the database "
"supports transactions (e.g., it would *not* run under PostgreSQL, but it "
"would under MySQL with MyISAM tables)::"
msgstr ""
"Sebagai contoh, percobaan berikut tidak akan dijalankan jika transaksi "
"dukungan basisdata (sebagai contoh, dia *tidak* akan berjalan dibawah "
"PostgreSQL, tetapi dia dibawah MySQL dengan tabel MyISAM)::"

msgid ""
"Skip the decorated test or ``TestCase`` if any of the named database "
"features are *not* supported."
msgstr ""
"Lewati percobaan penghias atau ``TestCase`` jika salah satu dari fitur "
"basisdata bernama *tidak* didukung."

msgid ""
"For example, the following test will only be executed if the database "
"supports transactions (e.g., it would run under PostgreSQL, but *not* under "
"MySQL with MyISAM tables)::"
msgstr ""
"Sebagai contoh, percobaan berikut hanya akan dijalankan jika transaksi "
"dukungan basisdata (sebagai contoh, dia akan berjalan dibawah PostgreSQL, "
"tetapi *bukan* dibawah MySQL dengan tabel MyISAM)::"
