# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# Bagus Aji Santoso <baguzzzaji@gmail.com>, 2015
# Claude Paroz <claude@2xlibre.net>, 2020
# Fery Setiawan <gembelweb@gmail.com>, 2015-2024
# Ichlasul Affan <ichlaffterlalu@gmail.com>, 2020
# oon arfiandwi (OonID) <oon.arfiandwi@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 10:19-0500\n"
"PO-Revision-Date: 2013-04-02 19:58+0000\n"
"Last-Translator: Fery Setiawan <gembelweb@gmail.com>, 2015-2024\n"
"Language-Team: Indonesian (http://app.transifex.com/django/django-docs/"
"language/id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "How to authenticate using ``REMOTE_USER``"
msgstr "Bagaimana mengotentikasi menggunakan ``REMOTE_USER``"

msgid ""
"This document describes how to make use of external authentication sources "
"(where the web server sets the ``REMOTE_USER`` environment variable) in your "
"Django applications.  This type of authentication solution is typically seen "
"on intranet sites, with single sign-on solutions such as IIS and Integrated "
"Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, `Cosign`_, "
"`WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""
"Dokumen in imenggambarkan bagaimana membuat sumber autentifikasi luar "
"(dimana peladen jaringan menyetel variabel lingkungan ``REMOTE_USER``) dalam "
"aplikasi Django anda.  Jenis solusi autentifikasi ini khususnya dilihat pada "
"situs intranet dengan solusi sistem masuk tunggal seperti IIS dan Integrated "
"Windows Authentication atau Apache dan `mod_authnz_ldap`_, `CAS`_, "
"`Cosign`_, `WebAuth`_, `mod_auth_sspi`_, dll."

msgid ""
"When the web server takes care of authentication it typically sets the "
"``REMOTE_USER`` environment variable for use in the underlying application.  "
"In Django, ``REMOTE_USER`` is made available in the :attr:`request.META "
"<django.http.HttpRequest.META>` attribute.  Django can be configured to make "
"use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` or "
"``PersistentRemoteUserMiddleware``, and :class:`~django.contrib.auth."
"backends.RemoteUserBackend` classes found in :mod:`django.contrib.auth`."
msgstr ""
"Ketika peladen jaringan mengurus autentifikasi dia khususnya menyetel "
"variabel lingkungan ``REMOTE_USER`` untuk digunakan dalam aplikasi pokok.  "
"Dalam Django, ``REMOTE_USER`` dibuat tersedia dalam atribut the :attr:"
"`request.META <django.http.HttpRequest.META>` .  Django dapat dikonfigurasi "
"untuk memanfaatkan nilai ``REMOTE_USER`` menggunakan "
"``RemoteUserMiddleware`` atau ``PersistentRemoteUserMiddleware``, dan kelas-"
"kelas :class:`~django.contrib.auth.backends.RemoteUserBackend` ditemukan "
"dalam :mod:`django.contrib.auth`."

msgid "Configuration"
msgstr "Pengaturan"

msgid ""
"First, you must add the :class:`django.contrib.auth.middleware."
"RemoteUserMiddleware` to the :setting:`MIDDLEWARE` setting **after** the :"
"class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""
"Pertama, andaharus menambahkan :class:`django.contrib.auth.middleware."
"RemoteUserMiddleware` pada pengaturan :setting:`MIDDLEWARE` **setelah** :"
"class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"

msgid ""
"Next, you must replace the :class:`~django.contrib.auth.backends."
"ModelBackend` with :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"in the :setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr ""
"Selanjutnya, anda harus mengganti :class:`~django.contrib.auth.backends."
"ModelBackend` dengan :class:`~django.contrib.auth.backends."
"RemoteUserBackend` di pengaturan :setting:`AUTHENTICATION_BACKENDS` ::"

msgid ""
"With this setup, ``RemoteUserMiddleware`` will detect the username in "
"``request.META['REMOTE_USER']`` and will authenticate and auto-login that "
"user using the :class:`~django.contrib.auth.backends.RemoteUserBackend`."
msgstr ""
"Dengan pengaturan ini, ``RemoteUserMiddleware`` akan mengenali nama pengguna "
"di ``request.META['REMOTE_USER']`` dan akan mengecek keasliannya dan masuk-"
"otomatis bagi pengguna menggunakan :class:`~django.contrib.auth.backends."
"RemoteUserBackend`."

msgid ""
"Be aware that this particular setup disables authentication with the default "
"``ModelBackend``. This means that if the ``REMOTE_USER`` value is not set "
"then the user is unable to log in, even using Django's admin interface. "
"Adding ``'django.contrib.auth.backends.ModelBackend'`` to the "
"``AUTHENTICATION_BACKENDS`` list will use ``ModelBackend`` as a fallback if "
"``REMOTE_USER`` is absent, which will solve these issues."
msgstr ""
"Waspada bahwa setelan khusus ini meniadakan pembuktian keaslian dengan awal "
"``ModelBackend``. Ini berarti bahwa jika nilai ``REMOTE_USER`` tidak disetel "
"kemudian pengguna tidak dapat masuk, bahkan menggunakan antarmuka admin "
"Django. Menambahkan ``'django.contrib.auth.backends.ModelBackend'`` pada "
"daftar ``AUTHENTICATION_BACKENDS`` akan menggunakan ``ModelBackend`` sebagai "
"alternatif jika ``REMOTE_USER`` tidak hadir, yang akan menyelesaikan masalah "
"ini."

msgid ""
"Django's user management, such as the views in ``contrib.admin`` and the :"
"djadmin:`createsuperuser` management command, doesn't integrate with remote "
"users. These interfaces work with users stored in the database regardless of "
"``AUTHENTICATION_BACKENDS``."
msgstr ""
"Pengelola pengguna Django, seperti tampilan dalam perintah pengelola "
"``contrib.admin`` dan the :djadmin:`createsuperuser`, tidak dipadukan dengan "
"pengguna kendali jauh. Antarmuka ini bekerja dengan pengguna disimpan dalam "
"basisdata tanpa memperhatikan ``AUTHENTICATION_BACKENDS``."

msgid ""
"Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will "
"still have all of the same permissions checking that is implemented in "
"``ModelBackend``."
msgstr ""
"Sejak ``RemoteUserBackend`` warisan dari ``ModelBackend``, anda akan masih "
"mempunyai semua pemeriksaan perizinan sama yang diterapkan dalam "
"``ModelBackend``."

msgid ""
"Users with :attr:`is_active=False <django.contrib.auth.models.User."
"is_active>` won't be allowed to authenticate. Use :class:`~django.contrib."
"auth.backends.AllowAllUsersRemoteUserBackend` if you want to allow them to."
msgstr ""
"Pengguna dengan :attr:`is_active=False <django.contrib.auth.models.User."
"is_active>` tidak akan diizinkan mengotentifikasi. Gunakan :class:`~django."
"contrib.auth.backends.AllowAllUsersRemoteUserBackend` jika anda ingin "
"mengizinkan mereka."

msgid ""
"If your authentication mechanism uses a custom HTTP header and not "
"``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the "
"``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""
"Jika mekanisme pembuktian keaslian anda menggunakan kepala HTTP penyesuaian "
"dan bukan ``REMOTE_USER``, anda dapat men subkelas kan "
"``RemoteUserMiddleware`` dan menyetel atribut ``header`` ke kunci ``request."
"META`` yang diinginkan. Sebagai contoh::"

msgid ""
"Be very careful if using a ``RemoteUserMiddleware`` subclass with a custom "
"HTTP header. You must be sure that your front-end web server always sets or "
"strips that header based on the appropriate authentication checks, never "
"permitting an end-user to submit a fake (or \"spoofed\") header value. Since "
"the HTTP headers ``X-Auth-User`` and ``X-Auth_User`` (for example) both "
"normalize to the ``HTTP_X_AUTH_USER`` key in ``request.META``, you must also "
"check that your web server doesn't allow a spoofed header using underscores "
"in place of dashes."
msgstr ""
"Sangat berhati-hatilah jika menggunakan subkelas ``RemoteUserMiddleware`` "
"dengan kepala HTTP penyesuaian. Anda harus pastikan bahwa peladen jaringan "
"paling depan anda selalu disetel atau memotong kepala itu berdasarkan pada "
"pemeriksaan pembuktian keaslian yang sesuai, jangan pernah mengizinkan "
"pengguna-akhir mengajukan nilai kepala tiruan (atau \"palse\"). Sejak kepala "
"HTTP ``X-Auth-User`` dan ``X-Auth_User`` (sebagai contoh) keduanya "
"menormalkan ke kunci ``HTTP_X_AUTH_USER`` dalam ``request.META``, anda harus "
"juga memeriksa bahwa peladen jaringan anda tidak mengizinkan kepala palsu "
"menggunakan garis bawah di tempat atau strip."

msgid ""
"This warning doesn't apply to ``RemoteUserMiddleware`` in its default "
"configuration with ``header = 'REMOTE_USER'``, since a key that doesn't "
"start with ``HTTP_`` in ``request.META`` can only be set by your WSGI "
"server, not directly from an HTTP request header."
msgstr ""
"Peringatan ini tidak berlaku pada ``RemoteUserMiddleware`` dalam konfigurasi "
"awalnya dengan ``header = 'REMOTE_USER'``, sejak sebuah kunci tidak dimulai "
"dengan ``HTTP_`` dalam ``request.META`` dapat hanya disetel dengan peladen "
"WSGI anda, bukan secara langsung dari kepala meminta HTTP."

msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"and override one or more of its attributes and methods."
msgstr ""
"Jika anda butuh lebih kendali, anda dapat membuat backend pembuktian "
"keaslian sendiri yang mewarisi dari :class:`~django.contrib.auth.backends."
"RemoteUserBackend` dan menimpa satu atau lebih atribut dan metodenya."

msgid "Using ``REMOTE_USER`` on login pages only"
msgstr "Menggunakan ``REMOTE_USER`` hanya pada halaman masuk"

msgid ""
"The ``RemoteUserMiddleware`` authentication middleware assumes that the HTTP "
"request header ``REMOTE_USER`` is present with all authenticated requests. "
"That might be expected and practical when Basic HTTP Auth with ``htpasswd`` "
"or similar mechanisms are used, but with Negotiate (GSSAPI/Kerberos) or "
"other resource intensive authentication methods, the authentication in the "
"front-end HTTP server is usually only set up for one or a few login URLs, "
"and after successful authentication, the application is supposed to maintain "
"the authenticated session itself."
msgstr ""
"Middleware autentifikasi ``RemoteUserMiddleware`` beranggapan bahwa kepala "
"peminta HTTP ``REMOTE_USE`` hadir dengan semua permintaan terautentifikasi. "
"Itu mungkin diharapkan dan praktis ketika Basic HTTP Auth dengan "
"``htpasswd`` atau mekanisme yang mirip digunakan, tetapi dengan Negotiate "
"(GSSAPI/Kerberos) atau metode otentikasi sumber daya intensif lainnya, "
"autentifikasi dalam peladen HTTP font-end biasanya hanya menyetel untuk satu "
"atau sedikit URL masuk, dan setelah autentifikasi berhasil, aplikasi "
"diharapkan merawat sesu autentifikasi itu sendiri."

msgid ""
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"provides support for this use case. It will maintain the authenticated "
"session until explicit logout by the user. The class can be used as a drop-"
"in replacement of :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware` in the documentation above."
msgstr ""
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"menyediakan dukungan untuk penggunaan kasus ini. Dia akan menjaga sesi "
"dibuktikan keasliannya sampai keluar oleh pengguna. Kelas dapat digunakan "
"sebagai pengganti dari :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware` dalam dokumentasi diatas."

msgid "How to use Django's CSRF protection"
msgstr "Bagaimana menggunakan perlindungan CSRF Django"

msgid "To take advantage of CSRF protection in your views, follow these steps:"
msgstr ""
"Untuk mengambil keuntungan dari perlindungan CSRF dalam tampilan anda, ikuti "
"langkah-langkah ini:"

msgid ""
"The CSRF middleware is activated by default in the :setting:`MIDDLEWARE` "
"setting. If you override that setting, remember that ``'django.middleware."
"csrf.CsrfViewMiddleware'`` should come before any view middleware that "
"assume that CSRF attacks have been dealt with."
msgstr ""
"Middleware CSRD diaktifkan secara awalan dalam pengaturan :setting:"
"`MIDDLEWARE`. Jika anda menimpa pengaturan itu, ingat bahwa ``'django."
"middleware.csrf.CsrfViewMiddleware'``  harys datang sebelum tampilan "
"middleware apapun yang menganggap bahwa serangan CSRF telah ditangani."

msgid ""
"If you disabled it, which is not recommended, you can use :func:`~django."
"views.decorators.csrf.csrf_protect` on particular views you want to protect "
"(see below)."
msgstr ""
"Jika anda meniadakan itu, yang tidak dianjurkan, anda dapat menggunakan :"
"func:`~django.views.decorators.csrf.csrf_protect` pada tampilan tertentu "
"anda ingin lindungi (lihat dibawah)."

msgid ""
"In any template that uses a POST form, use the :ttag:`csrf_token` tag inside "
"the ``<form>`` element if the form is for an internal URL, e.g.:"
msgstr ""
"Dalam cetakan manapun yang menggunakan formulir POST, gunakan etiket :ttag:"
"`csrf_token` didalam unsur ``<form>`` jika formulir adalah untuk "
"internalURL, misalnya:"

msgid ""
"This should not be done for POST forms that target external URLs, since that "
"would cause the CSRF token to be leaked, leading to a vulnerability."
msgstr ""
"Ini jangan diselesaikan untuk formulir POST yang sasaran external URL, sejak "
"itu akan menyebabkan token CSRF bocor, membawa pada kerentanan."

msgid ""
"In the corresponding view functions, ensure that :class:`~django.template."
"RequestContext` is used to render the response so that ``{% csrf_token %}`` "
"will work properly. If you're using the :func:`~django.shortcuts.render` "
"function, generic views, or contrib apps, you are covered already since "
"these all use ``RequestContext``."
msgstr ""
"Dalam fungsi tampilan sesuai, pastikan bahwa :class:`~django.template."
"RequestContext` digunakan untuk membangun tanggapan sehingga ``{% csrf_token "
"%}`` akan bekerja dengan benar. Jika anda sedang menggunakan fungsi :func:"
"`~django.shortcuts.render`, tampilan umum, atau aplikasi bantuan, anda sudah "
"dilindungi sejak ini semua menggunakan ``RequestContext``."

msgid "Using CSRF protection with AJAX"
msgstr "Menggunakan perlindungan CSRF dengan AJAX"

msgid ""
"While the above method can be used for AJAX POST requests, it has some "
"inconveniences: you have to remember to pass the CSRF token in as POST data "
"with every POST request. For this reason, there is an alternative method: on "
"each XMLHttpRequest, set a custom ``X-CSRFToken`` header (as specified by "
"the :setting:`CSRF_HEADER_NAME` setting) to the value of the CSRF token. "
"This is often easier because many JavaScript frameworks provide hooks that "
"allow headers to be set on every request."
msgstr ""
"Selagi metode diatas dapat digunakan untuk permintaan POST AJAX, itu "
"memiliki beberapa ketidaknyamanan: anda harus ingat melewatkan token CSRF "
"dalam sebuah data POST dengan setiap permintaan POST. Untuk alasan ini, ada "
"metode lain: pada setiap XMLHttpRequest, setel sebuah penyesuaian kepala ``X-"
"CSRFToken`` (seperti ditentukan oleh pengaturan :setting:`CSRF_HEADER_NAME`) "
"pada nilai dari token CSRF. Ini sering lebih mudah karena banyak kerangka "
"kerja JavaScript menyediakan kaitan yang mengizinkan kepala untuk disetel "
"pada setiap permintaan."

msgid ""
"First, you must get the CSRF token. How to do that depends on whether or not "
"the :setting:`CSRF_USE_SESSIONS` and :setting:`CSRF_COOKIE_HTTPONLY` "
"settings are enabled."
msgstr ""
"Pertama, anda harus mendapatkan token CSRF. Bagaimana melakukan itu "
"bergantung pada apakah atau tidak pengaturan :setting:`CSRF_USE_SESSIONS` "
"dan :setting:`CSRF_COOKIE_HTTPONLY` diadakan."

msgid ""
"Acquiring the token if :setting:`CSRF_USE_SESSIONS` and :setting:"
"`CSRF_COOKIE_HTTPONLY` are ``False``"
msgstr ""
"Memperoleh token jika :setting:`CSRF_USE_SESSIONS` atau :setting:"
"`CSRF_COOKIE_HTTPONLY` adalah ``False``"

msgid ""
"The recommended source for the token is the ``csrftoken`` cookie, which will "
"be set if you've enabled CSRF protection for your views as outlined above."
msgstr ""
"Sumber dianjurkan untuk token adalah kue ``csrftoken``, yang akan disetel "
"jika anda telah mengadakan perlindungan CSRF untuk tampilan anda seperti "
"diuraikan diatas."

msgid ""
"The CSRF token cookie is named ``csrftoken`` by default, but you can control "
"the cookie name via the :setting:`CSRF_COOKIE_NAME` setting."
msgstr ""
"Kue token CSRD dinamakan ``csrftoken`` secara awalan, tetapi anda dapat "
"mengendalikan nama kue melalui pengaturan :setting:`CSRF_COOKIE_NAME`."

msgid "You can acquire the token like this:"
msgstr "Anda bisa mendapatkan token seperti ini:"

msgid ""
"The above code could be simplified by using the `JavaScript Cookie library "
"<https://github.com/js-cookie/js-cookie/>`_ to replace ``getCookie``:"
msgstr ""
"Kode diatas dapat disederhanakan menggunakan  `JavaScript Cookie library "
"<https://github.com/js-cookie/js-cookie/>`_ untuk mengganti ``getCookie``:"

msgid ""
"The CSRF token is also present in the DOM in a masked form, but only if "
"explicitly included using :ttag:`csrf_token` in a template. The cookie "
"contains the canonical, unmasked token. The :class:`~django.middleware.csrf."
"CsrfViewMiddleware` will accept either. However, in order to protect against "
"`BREACH`_ attacks, it's recommended to use a masked token."
msgstr ""
"Token CSRF juga hadir dalam DOM dalam bentuk topeng, tetapi hanya jika "
"secara eksplisit disertakan menggunakan :ttag:`csrf_token` dalam cetakan. "
"Cookie mengandung resmi, token tidak bertopeng. :class:`~django.middleware."
"csrf.CsrfViewMiddleware` akan menerima baik. Bagaimanapun, agar terlindungi "
"terhadap `BREACH`_ attacks, dianjurkan untuk menggunakan token bertopeng."

msgid ""
"If your view is not rendering a template containing the :ttag:`csrf_token` "
"template tag, Django might not set the CSRF token cookie. This is common in "
"cases where forms are dynamically added to the page. To address this case, "
"Django provides a view decorator which forces setting of the cookie: :func:"
"`~django.views.decorators.csrf.ensure_csrf_cookie`."
msgstr ""
"Jika tampilan anda tidak membangun sebuah cetakan mengandung etiket cetakan :"
"ttag:`csrf_token`, Django mugkin tidak menyetel kue token CSRF. Ini adalah "
"umum dalam kasus-kasus dimana formulir secara dinamis ditambahkan ke "
"halaman. Untuk mengalamatkan ke kasus ini, Django menyediakan penghias "
"tampilan yang memaksa mengatur kue: :func:`~django.views.decorators.csrf."
"ensure_csrf_cookie`."

msgid ""
"Acquiring the token if :setting:`CSRF_USE_SESSIONS` or :setting:"
"`CSRF_COOKIE_HTTPONLY` is ``True``"
msgstr ""
"Memperoleh token jika :setting:`CSRF_USE_SESSIONS` atau :setting:"
"`CSRF_COOKIE_HTTPONLY` adalah ``True``"

msgid ""
"If you activate :setting:`CSRF_USE_SESSIONS` or :setting:"
"`CSRF_COOKIE_HTTPONLY`, you must include the CSRF token in your HTML and "
"read the token from the DOM with JavaScript:"
msgstr ""
"Jika anda mengkatifkan :setting:`CSRF_USE_SESSIONS` atau :setting:"
"`CSRF_COOKIE_HTTPONLY`, anda harus menyertakan token CSRF dalam HTML anda "
"dan baca token dari DOM dengan JavaScript:"

msgid "Setting the token on the AJAX request"
msgstr "Mengatur token pada permintaan AJAX"

msgid ""
"Finally, you'll need to set the header on your AJAX request. Using the "
"`fetch()`_ API:"
msgstr ""
"Akhirnya, anda akan butuh menyetel kepala pada permintaan AJAX anda. "
"Menggunakan `fetch()`_ API:"

msgid "Using CSRF protection in Jinja2 templates"
msgstr "Menggunakan perlindungan CSRF dalam cetakan Jinja2"

msgid ""
"Django's :class:`~django.template.backends.jinja2.Jinja2` template backend "
"adds ``{{ csrf_input }}`` to the context of all templates which is "
"equivalent to ``{% csrf_token %}`` in the Django template language. For "
"example:"
msgstr ""
"Backend cetakan :class:`~django.template.backends.jinja2.Jinja2` Django "
"menambahkan ``{{ csrf_input }}`` ke konteks dari semua cetakan yang setara "
"pada ``{% csrf_token %}`` dalam bahasa cetakan Django. Sebagai contoh:"

msgid "Using the decorator method"
msgstr "Menggunakan metode penghias"

msgid ""
"Rather than adding ``CsrfViewMiddleware`` as a blanket protection, you can "
"use the :func:`~django.views.decorators.csrf.csrf_protect` decorator, which "
"has exactly the same functionality, on particular views that need the "
"protection. It must be used **both** on views that insert the CSRF token in "
"the output, and on those that accept the POST form data. (These are often "
"the same view function, but not always)."
msgstr ""
"Daripada menambahkan ``CsrfViewMiddleware`` sebagai pelindung selimut, anda "
"dapat menggunakan penghias :func:`~django.views.decorators.csrf."
"csrf_protect`, yang mempunyai kegunaan yang sama, pada tampilan tertentu "
"yang butuh perlindungan. Itu harus digunakan **both** pada tampilan yang "
"memasukkan token CSRF dalam keluaran, danpada mereka itu menerima data "
"formulir POST. (Ini seringkali merupakan fungsi tampilan yang sama, tetapi "
"tidak selalu)."

msgid ""
"Use of the decorator by itself is **not recommended**, since if you forget "
"to use it, you will have a security hole. The 'belt and braces' strategy of "
"using both is fine, and will incur minimal overhead."
msgstr ""
"Gunakan dari penghias oleh itu sendiri adalah **not recommended**, sejak "
"jika anda melupakan itu, anda akan mempunyai sebuah lubang keamanan. "
"Strategi 'belt and braces' dari menggunakan keduanya adalah baik, dan akan "
"mendatangkan beban minimal."

msgid "Handling rejected requests"
msgstr "Menangani permintaan tertolak"

msgid ""
"By default, a '403 Forbidden' response is sent to the user if an incoming "
"request fails the checks performed by ``CsrfViewMiddleware``. This should "
"usually only be seen when there is a genuine Cross Site Request Forgery, or "
"when, due to a programming error, the CSRF token has not been included with "
"a POST form."
msgstr ""
"Secara awalan, tanggapan '403 Forbidden' dikirim ke pengguna jika sebuah "
"permintaan datang gagal memeriksa dilakukan oleh ``CsrfViewMiddleware``. Ini "
"seharusnya hanya terlihat ketika ada Cross Site Request Forgery asli, atau "
"ketika, karena kesalahan pemrograman, token CSRF tidak disertakan dalam "
"formulir POST."

msgid ""
"The error page, however, is not very friendly, so you may want to provide "
"your own view for handling this condition. To do this, set the :setting:"
"`CSRF_FAILURE_VIEW` setting."
msgstr ""
"Halaman kesalahan, bagaimanapun, sangat tidak ramah, sehingga anda ingin "
"menyediakan tampilan anda sendiri untuk menangani kondisi ini. Untuk "
"melakukan ini, setel pengaturan :setting:`CSRF_FAILURE_VIEW`."

msgid ""
"CSRF failures are logged as warnings to the :ref:`django.security.csrf "
"<django-security-logger>` logger."
msgstr ""
"Kegagalan CSRF adalah tercatat sebagai peringatan pada pencatat :ref:`django."
"security.csrf 1`."

msgid "Using CSRF protection with caching"
msgstr "Menggunakan perlindungan CSRF dengan caching"

msgid ""
"If the :ttag:`csrf_token` template tag is used by a template (or the "
"``get_token`` function is called some other way), ``CsrfViewMiddleware`` "
"will add a cookie and a ``Vary: Cookie`` header to the response. This means "
"that the middleware will play well with the cache middleware if it is used "
"as instructed (``UpdateCacheMiddleware`` goes before all other middleware)."
msgstr ""
"Jika etiket cetakan :ttag:`csrf_token` digunakan oleh cetakan (atau fungsi "
"``get_token`` dipanggil cara lain), ``CsrfViewMiddleware`` akan menambah "
"sebuah kue dan sebuah kepala ``Vary: Cookie`` ke tanggapan. Ini berarti "
"bahwa middleware akan bermain baik dengan  middleware cache jika itu "
"digunakan sesuai panduan (``UpdateCacheMiddleware`` berjalan sebelum semua "
"middleware lain)."

msgid ""
"However, if you use cache decorators on individual views, the CSRF "
"middleware will not yet have been able to set the Vary header or the CSRF "
"cookie, and the response will be cached without either one. In this case, on "
"any views that will require a CSRF token to be inserted you should use the :"
"func:`django.views.decorators.csrf.csrf_protect` decorator first::"
msgstr ""
"Bagaimanapun, jika anda menggunakan penghias cache pada tampilan masing-"
"masing, middleware CSRF belum bisa menyetel kepala Vary atau kue CSRF, dan "
"tanggapan akan di simpan sementara tanpa salah satu. Dalam kasus ini, pada "
"tampilan apapun yang akan membutuhkan token CSRF untuk dimasukkan anda harus "
"menggunakan penghias :func:`django.views.decorators.csrf.csrf_protect` "
"dahulu::"

msgid ""
"If you are using class-based views, you can refer to :ref:`Decorating class-"
"based views<decorating-class-based-views>`."
msgstr ""
"Jika anda sedang menggunakan tampilan berdasarkan-kelas, anda dapat mengacu "
"ke :ref:`Decorating class-based views1`."

msgid "Testing and CSRF protection"
msgstr "Pengujian dan perlindungan CSRF"

msgid ""
"The ``CsrfViewMiddleware`` will usually be a big hindrance to testing view "
"functions, due to the need for the CSRF token which must be sent with every "
"POST request. For this reason, Django's HTTP client for tests has been "
"modified to set a flag on requests which relaxes the middleware and the "
"``csrf_protect`` decorator so that they no longer rejects requests. In every "
"other respect (e.g. sending cookies etc.), they behave the same."
msgstr ""
"``CsrfViewMiddleware`` biasanya akan menjadi penghalang besar untuk menguji "
"fungsi tampilan, dikarenakan kebutuhan token CSRF yang harus dikirim setiap "
"permintaan POST. Untuk alasan ini, Klien HTTP Django untuk percobaan telah "
"dirubah untuk menyetel bendera pada permintaan middleware yang santai dan "
"penghias ``csrf_protect`` sehingga mereka tidak lagi menolak permintaan. "
"Dalam segala hal lainnya (misalnya mengirim cookies dll.), mereka "
"berperilaku sama."

msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks:"
msgstr ""
"Jika, untuk beberapa alasan, anda *ingin* menguji klien untuk melakukan "
"pemeriksaan CSRF, anda dapat membuat sebuah instance dari klien pengujian "
"yang memaksa pemeriksaan CSRF:"

msgid "Edge cases"
msgstr "Kasus tepi"

msgid ""
"Certain views can have unusual requirements that mean they don't fit the "
"normal pattern envisaged here. A number of utilities can be useful in these "
"situations. The scenarios they might be needed in are described in the "
"following section."
msgstr ""
"Tampilan-tampilan tertentu dapat memiliki persyaratan tidak biasa yang "
"berarti mereka tidak cocok pola biasa dipertimbangkan disini. Sejumlah "
"kegunaan dapat berguna dalam keadaan seperti ini. Skenario mereka mungkin "
"dibutuhkan digambarkan dalam bagian berikut."

msgid "Disabling CSRF protection for just a few views"
msgstr "Meniadakan perlindungan CSRF untuk hanya sedikit tampilan"

msgid "Most views requires CSRF protection, but a few do not."
msgstr ""
"Kebanyakan tampilan membutuhkan perlindungan CSRF, tetapi sedikit tidak."

msgid ""
"Solution: rather than disabling the middleware and applying ``csrf_protect`` "
"to all the views that need it, enable the middleware and use :func:`~django."
"views.decorators.csrf.csrf_exempt`."
msgstr ""
"Pemecahan: daripada meniadakan middleware dan memberlakukan ``csrf_protect`` "
"ke semua tampilan yang membutuhkan itu, adakan middleware dan gunakan :func:"
"`~django.views.decorators.csrf.csrf_exempt`."

msgid ""
"Setting the token when ``CsrfViewMiddleware.process_view()`` is not used"
msgstr ""
"Pengaturan token ketika ``CsrfViewMiddleware.process_view()`` tidak digunakan"

msgid ""
"There are cases when ``CsrfViewMiddleware.process_view`` may not have run "
"before your view is run - 404 and 500 handlers, for example - but you still "
"need the CSRF token in a form."
msgstr ""
"Ada kasus-kasus ketika ``CsrfViewMiddleware.process_view`` mungkin tidak "
"berjalan sebelum tampilan anda berjalan - penangan 404 dan 500, sebagai "
"contoh - tetapi anda masih butuh token CSRF dalam sebuah formulir."

msgid "Solution: use :func:`~django.views.decorators.csrf.requires_csrf_token`"
msgstr ""
"Pemecahan: gunakan :func:`~django.views.decorators.csrf.requires_csrf_token`"

msgid "Including the CSRF token in an unprotected view"
msgstr "Memasukkan token CSRF dalam tampilan tidak terlindungi"

msgid ""
"There may be some views that are unprotected and have been exempted by "
"``csrf_exempt``, but still need to include the CSRF token."
msgstr ""
"Mungkin ada beberapa tampilan yang tidak terlindungi dan telah dibebaskan "
"oleh ``csrf_exempt``, tetapi masih butuh disertakan token CSRF."

msgid ""
"Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` followed by :"
"func:`~django.views.decorators.csrf.requires_csrf_token`. (i.e. "
"``requires_csrf_token`` should be the innermost decorator)."
msgstr ""
"Pemecahan: gunakan :func:`~django.views.decorators.csrf.csrf_exempt` diikuti "
"oleh :func:`~django.views.decorators.csrf.requires_csrf_token`. (yaitu "
"``requires_csrf_token`` harus berupa penghias paling dalam)."

msgid "Protecting a view for only one path"
msgstr "Melindungi tampilan hanya untuk satu jalur"

msgid ""
"A view needs CSRF protection under one set of conditions only, and mustn't "
"have it for the rest of the time."
msgstr ""
"Sebuah tampilan butuh perlindungan CSRF dibawah hanya satu kumpulan dari "
"situasi, dan tidak boleh memilikinya untuk sisa waktu."

msgid ""
"Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` for the "
"whole view function, and :func:`~django.views.decorators.csrf.csrf_protect` "
"for the path within it that needs protection. Example::"
msgstr ""
"Pemecahan: gunakan :func:`~django.views.decorators.csrf.csrf_exempt` untuk "
"seluruh fungsi tampilan, dan :func:`~django.views.decorators.csrf."
"csrf_protect` untuk jalur dalam itu yang butuh perlindungan. Contoh::"

msgid "Protecting a page that uses AJAX without an HTML form"
msgstr "Melindungi halaman yang menggunakan AJAX tanpa formulir HTML"

msgid ""
"A page makes a POST request via AJAX, and the page does not have an HTML "
"form with a :ttag:`csrf_token` that would cause the required CSRF cookie to "
"be sent."
msgstr ""
"Sebuah halaman membuat permintaan POST melalui AJAX, dan halaman tidak "
"mempunyai formulir HTML dengan :ttag:`csrf_token` yang akan menyebabkan kue "
"CSRF diwajibkan dikirim."

msgid ""
"Solution: use :func:`~django.views.decorators.csrf.ensure_csrf_cookie` on "
"the view that sends the page."
msgstr ""
"Pemecahan: gunakan :func:`~django.views.decorators.csrf.ensure_csrf_cookie` "
"di tampilan yang mengirim halaman."

msgid "CSRF protection in reusable applications"
msgstr "Perlindungan CSRF dalam aplikasi digunakan kembali"

msgid ""
"Because it is possible for the developer to turn off the "
"``CsrfViewMiddleware``, all relevant views in contrib apps use the "
"``csrf_protect`` decorator to ensure the security of these applications "
"against CSRF. It is recommended that the developers of other reusable apps "
"that want the same guarantees also use the ``csrf_protect`` decorator on "
"their views."
msgstr ""
"Karena itu memungkinkan untuk pengembang mematikan ``CsrfViewMiddleware``, "
"semua tampilan terkait dalam kontribusi aplikasi menggunakan penghias "
"``csrf_protect`` untuk memastikan keamanan aplikasi ini terhadap CSRF. Itu "
"dianjurkan bahwa pengembang dari aplikasi yang digunakan kembali yang ingin "
"jaminan sama juga menggunakan penghias ``csrf_protect`` pada tampilan mereka."

msgid "How to write a custom storage class"
msgstr "Bagaimana menulis kelas penyimpanan disesuaikan"

msgid ""
"If you need to provide custom file storage -- a common example is storing "
"files on some remote system -- you can do so by defining a custom storage "
"class. You'll need to follow these steps:"
msgstr ""
"Jika anda butuh untuk menyediakan penyimpanan berkas disesuaikan -- contoh "
"umum adalah menyimpan berkas di beberapa sistem terpencil -- anda dapat "
"melakukannya dengan menentukan kelas penyimpanan disesuaikan. Anda akan "
"butuh mengikuti langkah-langkah ini:"

msgid ""
"Your custom storage system must be a subclass of ``django.core.files.storage."
"Storage``::"
msgstr ""
"Sistem penyimpanan disesuaikan anda harus subkelas dari ``django.core.files."
"storage.Storage``::"

msgid ""
"Django must be able to instantiate your storage system without any "
"arguments. This means that any settings should be taken from ``django.conf."
"settings``::"
msgstr ""
"Django harus dapat memberikan contoh sistem penyimanan disesuaikan anda "
"tanpa argumen apapun. Ini berarti bahwa setiap pengaturan harus diambil "
"dari  ``django.conf.settings``::"

msgid ""
"Your storage class must implement the :meth:`_open()` and :meth:`_save()` "
"methods, along with any other methods appropriate to your storage class. See "
"below for more on these methods."
msgstr ""
"Kelas penyimpanan anda harus menerapkan metode :meth:`_open()` dan :meth:"
"`_save()` , bersama dengan cara lainnya sesuai pada kelas penyimpanan anda. "
"Lihat dibawah untuk lebih pada cara ini."

msgid ""
"In addition, if your class provides local file storage, it must override the "
"``path()`` method."
msgstr ""
"Sebagai tambahan, jika kelas anda menyediakan penyimpanan berkas lokal, itu "
"harus menimpa metode ``path()``."

msgid ""
"Your storage class must be :ref:`deconstructible <custom-deconstruct-"
"method>` so it can be serialized when it's used on a field in a migration. "
"As long as your field has arguments that are themselves :ref:`serializable "
"<migration-serializing>`, you can use the ``django.utils.deconstruct."
"deconstructible`` class decorator for this (that's what Django uses on "
"FileSystemStorage)."
msgstr ""
"Kelas penyimpanan anda harus :ref:`deconstructible <custom-deconstruct-"
"method>` sehingga dia dapat di serialkan ketika digunakan pada bidang dalam "
"sebuah perpindahan. Selama bidang anda mempunyai argumen yang mereka "
"sendiri :ref:`serializable <migration-serializing>`, anda dapat menggunakan "
"kelas decorator untuk ini (itu mengapa Django digunakan pada "
"FileSystemStorage)."

msgid ""
"By default, the following methods raise ``NotImplementedError`` and will "
"typically have to be overridden:"
msgstr ""
"Secara awalan, metode berikut memunculkan ``NotImplementedError`` dan akan "
"khususnya ditimpa:"

msgid ":meth:`Storage.delete`"
msgstr ":meth:`Storage.delete`"

msgid ":meth:`Storage.exists`"
msgstr ":meth:`Storage.exists`"

msgid ":meth:`Storage.listdir`"
msgstr ":meth:`Storage.listdir`"

msgid ":meth:`Storage.size`"
msgstr ":meth:`Storage.size`"

msgid ":meth:`Storage.url`"
msgstr ":meth:`Storage.url`"

msgid ""
"Note however that not all these methods are required and may be deliberately "
"omitted. As it happens, it is possible to leave each method unimplemented "
"and still have a working Storage."
msgstr ""
"Catat bagaimanapun bahwa tidak semua metode ini diwajibkan dan mungkin "
"sengaja dihilangkan. Ketika itu terjadi, itu memungkinkan meninggalkan "
"setiap cara tidak diterapkan dan masih memiliki Penyimpanan bekerja."

msgid ""
"By way of example, if listing the contents of certain storage backends turns "
"out to be expensive, you might decide not to implement ``Storage.listdir()``."
msgstr ""
"Sebagai contoh, jika mencantumkan isi dari backend penyimpanan tertentu "
"ternyata mahal, anda mungkin memutuskan tidak menerapkan ``Storage."
"listdir()``."

msgid ""
"Another example would be a backend that only handles writing to files. In "
"this case, you would not need to implement any of the above methods."
msgstr ""
"Cara lain akan menjadi backend yang ahnya menangani penulisan ke berkas. "
"Dalam kasus ini, anda tidak akan butuh menerapkan apapun metode diatas."

msgid ""
"Ultimately, which of these methods are implemented is up to you. Leaving "
"some methods unimplemented will result in a partial (possibly broken) "
"interface."
msgstr ""
"Akhirnya, metode mana yang anda terapkan terserah anda. Meninggalkan "
"beberapa cara tidak diterapkan akan menghasilkan antarmuka sebagian "
"(kemungkinan rusak)."

msgid ""
"You'll also usually want to use hooks specifically designed for custom "
"storage objects. These are:"
msgstr ""
"Anda akan juga ingin menggunakan penghubung khususnya dirancang untuk obyek "
"penyimpanan disesuaikan. Ini adalah:"

msgid "**Required**."
msgstr "**Wajib**."

msgid ""
"Called by ``Storage.open()``, this is the actual mechanism the storage class "
"uses to open the file. This must return a ``File`` object, though in most "
"cases, you'll want to return some subclass here that implements logic "
"specific to the backend storage system. The :exc:`FileNotFoundError` "
"exception should be raised when a file doesn't exist."
msgstr ""
"DIpanggil oleh ``Storage.open()``, ini adalah mekanisme sebenarnya kelas "
"penyimpanan menggunakan untuk membuka berkas. Ini harus mengembalikan objek "
"``File``, meskipun dalam kebanyakan kasus, anda akan ingin mengembalikan "
"beberapa subkelas disini yang menerapkan logika khusus pada sistem "
"penyimpanan backend. Pengecualian :exc:`FileNotFoundError` harus dimunculkan "
"ketika berkas tidak ada."

msgid ""
"Called by ``Storage.save()``. The ``name`` will already have gone through "
"``get_valid_name()`` and ``get_available_name()``, and the ``content`` will "
"be a ``File`` object itself."
msgstr ""
"Dipanggil oleh ``Storage.save()``, ``name`` sudah telah melalui "
"``get_valid_name()`` dan ``get_available_name()``, dan ``content`` akan "
"menjadi obyek ``File`` itu sendiri."

msgid ""
"Should return the actual name of the file saved (usually the ``name`` passed "
"in, but if the storage needs to change the file name return the new name "
"instead)."
msgstr ""
"Harus mengembalikan nama sebenarnya dari berkas disimpan (biasanya ``name`` "
"dilewatkan, tetapi jika penyimpanan butuh merubah nama berkas mengembalikan "
"nama baru sebagai gantinya)."

msgid ""
"Returns a filename suitable for use with the underlying storage system. The "
"``name`` argument passed to this method is either the original filename sent "
"to the server or, if ``upload_to`` is a callable, the filename returned by "
"that method after any path information is removed. Override this to "
"customize how non-standard characters are converted to safe filenames."
msgstr ""
"Mengembalikan sebuah nama berkas yang cocok untuk digunakan dengan sistem "
"penyimpanan pokok. Argumen ``name`` dilewati ke cara ini antara berkas nama "
"asli dikirim ke peladen atau, jika ``upload_to`` adalah callable, nama "
"berkas dikembalikan oleh cara tersebut setelah informasi jalur dipindahkan. "
"Kesampingkan ini untuk menyesuaikan bagaimana karakter bukan-standar dirubah "
"ke nama berkas aman."

msgid ""
"The code provided on ``Storage`` retains only alpha-numeric characters, "
"periods and underscores from the original filename, removing everything else."
msgstr ""
"Kode disediakan di ``Storage`` hanya mempertahankan karakter alpanumerik, "
"titik dan garis bawah dari nama berkas asli, memindahkan semua yang lainnya."

msgid ""
"Returns an alternative filename based on the ``file_root`` and ``file_ext`` "
"parameters. By default, an underscore plus a random 7 character alphanumeric "
"string is appended to the filename before the extension."
msgstr ""
"Mengembalikan nama berkas lain berdasarkan pada parameter ``file_root`` dan "
"``file_ext``. Secara awalan, sebuah garis bawah ditambah 7 karakter string "
"alfanumerik acak ditambahkan ke nama berkas sebelum ekstensi."

msgid ""
"Returns a filename that is available in the storage mechanism, possibly "
"taking the provided filename into account. The ``name`` argument passed to "
"this method will have already cleaned to a filename valid for the storage "
"system, according to the ``get_valid_name()`` method described above."
msgstr ""
"Mengembalikan nama berkas yang tersedia di mekanisme penyimpanan, barangkali "
"mengambil nama berkas tersedia ke dalam akun. argumen ``name`` dilewati ke "
"cara ini akan sudah dibersihkan ke nama berkas sah untuk sistem penyimpanan, "
"menurut cara ``get_valid_name()`` digambarkan diatas."

msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a "
"free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception is raised."
msgstr ""
"Panjang dari nama berkas tidak melebihi ``max_length``, jika disediakan. "
"Jika nama berkas unik bebas tidak dapat ditemukan, sebuah pengecualian :exc:"
"`SuspiciousFileOperation <django.core.exceptions.SuspiciousOperation>` "
"muncul."

msgid ""
"If a file with ``name`` already exists, ``get_alternative_name()`` is called "
"to obtain an alternative name."
msgstr ""
"Jika sebuah berkas dengan ``name`` sudah ada, ``get_alternative_name()`` "
"dipanggil untuk mendapatkan nama alternatif."

msgid "Use your custom storage engine"
msgstr "Gunakan mesin penyimpanan penyesuaian anda"

msgid ""
"The first step to using your custom storage with Django is to tell Django "
"about the file storage backend you'll be using. This is done using the :"
"setting:`STORAGES` setting. This setting maps storage aliases, which are a "
"way to refer to a specific storage throughout Django, to a dictionary of "
"settings for that specific storage backend. The settings in the inner "
"dictionaries are described fully in the :setting:`STORAGES` documentation."
msgstr ""
"Langkah pertama untuk menggunakan penyimpanan penyesuaian anda dengan Django "
"adalah memberitahu Django tetnang berkas backend penyimpanan anda sedang "
"gunakan.. Ini dilakukan dengan pengaturan :setting:`STORAGES`. Pengaturan "
"ini memetakan nama lain penyimpanan, yang merupakan cara merujuk pada "
"penyumpanan khusus di Django, pada pengaturan dictionary untuk backend "
"penyimpanan khusus itu. Pengaturan dalam  dictionary terdalam digambarkan "
"sepenuhnya dalam dokumentasi :setting:`STORAGES`."

msgid ""
"Storages are then accessed by alias from the :data:`django.core.files."
"storage.storages` dictionary::"
msgstr ""
"Penyimpanan dapat diakses oleh nama lain dari dictionary :data:`django.core."
"files.storage.storages`::"

msgid "How to write custom lookups"
msgstr "Bagaimana menulis pencarian disesuaikan"

msgid ""
"Django offers a wide variety of :ref:`built-in lookups <field-lookups>` for "
"filtering (for example, ``exact`` and ``icontains``). This documentation "
"explains how to write custom lookups and how to alter the working of "
"existing lookups. For the API references of lookups, see the :doc:`/ref/"
"models/lookups`."
msgstr ""
"Django menawarkan beragam luas dari :ref:`built-in lookups <field-lookups>` "
"untuk penyaringan (sebagai contoh, ``exact`` dan ``icontains``). Dokumentasi "
"ini menjelaskan bagaimana menulis penyesuaian pencarian dan bagaimana "
"mengubah pekerjaan dari pencarian yang ada. Untuk acuan API dari pencarian, "
"lihat :doc:`/ref/models/lookups`."

msgid "A lookup example"
msgstr "Contoh pencarian"

msgid ""
"Let's start with a small custom lookup. We will write a custom lookup ``ne`` "
"which works opposite to ``exact``. ``Author.objects."
"filter(name__ne='Jack')`` will translate to the SQL:"
msgstr ""
"Mari kita mulai dengan pencarian penyesuaian kecil. Kami akan menulis "
"pencarian penyesuaian  ``ne`` yang bekerj aberlawanan terhadap ``exact``. "
"``Author.objects.filter(name__ne='Jack')`` akan menterjemahkan ke SQL:"

msgid ""
"This SQL is backend independent, so we don't need to worry about different "
"databases."
msgstr ""
"Backend SQL berdisi sendiri, sehingga kita tidak perlu khawatir tentang "
"basisdata berbeda."

msgid ""
"There are two steps to making this work. Firstly we need to implement the "
"lookup, then we need to tell Django about it::"
msgstr ""
"Ada dua langkah untuk membuatnya bekerja. Pertama kami butuh menerapkan "
"pencarian, kemudian kami butuh memberitahu Django mengenai itu::"

msgid ""
"To register the ``NotEqual`` lookup we will need to call ``register_lookup`` "
"on the field class we want the lookup to be available for. In this case, the "
"lookup makes sense on all ``Field`` subclasses, so we register it with "
"``Field`` directly::"
msgstr ""
"Untuk mendaftarkan pencarian ``NotEqual`` kami butuh memanggil "
"``register_lookup`` pada bidang kelas kami ingin cari agar tersedia. Dalam "
"kasus ini, pencarian masuk akal pada semua subkelas ``Field``, sehingga kami "
"mendaftarkan itu langsung dengan ``Field``::"

msgid "Lookup registration can also be done using a decorator pattern::"
msgstr ""
"Pendaftaran pencarian dapat juga dikerjakan menggunakan pola decorator::"

msgid ""
"We can now use ``foo__ne`` for any field ``foo``. You will need to ensure "
"that this registration happens before you try to create any querysets using "
"it. You could place the implementation in a ``models.py`` file, or register "
"the lookup in the ``ready()`` method of an ``AppConfig``."
msgstr ""
"Kami sekarang dapat menggunakan ``foo__ne`` untuk setiap bidang ``foo``. "
"Anda akan butuh memastikan bahwa pendaftaran ini terjadi sebelum anda "
"mencoba membuat kumpulan permintaan menggunakannya. Anda dapat menempatkan "
"penerapan dalam sebuah berkas ``models.py``, atau mendaftarkan pencarian "
"dalam cara ``ready()`` dari sebuah ``AppConfig``."

msgid ""
"Taking a closer look at the implementation, the first required attribute is "
"``lookup_name``. This allows the ORM to understand how to interpret "
"``name__ne`` and use ``NotEqual`` to generate the SQL. By convention, these "
"names are always lowercase strings containing only letters, but the only "
"hard requirement is that it must not contain the string ``__``."
msgstr ""
"Melihat lebih dekat pada penerapan, atribut dibutuhkan pertama adalah "
"``lookup_name``. Ini mengizinkan ORM untuk memahami bagaimana mengartikan "
"``name__ne`` dan menggunakan ``NotEqual`` untuk membangkitkan SQL. "
"Berdasarkan pemufakatan, nama-nama ini selalu deretan karakter huruf kecil "
"mengandung hanya huruf, tetapi persyaratan mutlak adalah bahwa itu harus "
"mengandung deretan karakter ``__``."

msgid ""
"We then need to define the ``as_sql`` method. This takes a ``SQLCompiler`` "
"object, called ``compiler``,  and the active database connection. "
"``SQLCompiler`` objects are not documented, but the only thing we need to "
"know about them is that they have a ``compile()`` method which returns a "
"tuple containing an SQL string, and the parameters to be interpolated into "
"that string. In most cases, you don't need to use it directly and can pass "
"it on to ``process_lhs()`` and ``process_rhs()``."
msgstr ""
"Kami lalu butuh menentukan cara ``as_sql``. Ini mengambil obyek "
"``SQLCompiler``, disebut ``compiler``, dan hubungan aktif basisdata. Obyek "
"``SQLCompiler`` tidak didokumentasikan, tetapi satu-satunya kami butuh "
"diketahui tentang mereka adalah bahwa mereka mempunyai cara ``compile()`` "
"yang mengemblikan sebuah tuple mengandung deretan karakter SQL, dan "
"parameter untuk disisipkan kedalam deretan karakter itu. Di kebanyakan "
"kasus, anda tidak butuh menggunakannya secara langsung dan dapat melewatinya "
"ke  ``process_lhs()`` dan ``process_rhs()``."

msgid ""
"A ``Lookup`` works against two values, ``lhs`` and ``rhs``, standing for "
"left-hand side and right-hand side. The left-hand side is usually a field "
"reference, but it can be anything implementing the :ref:`query expression "
"API <query-expression>`. The right-hand is the value given by the user. In "
"the example ``Author.objects.filter(name__ne='Jack')``, the left-hand side "
"is a reference to the ``name`` field of the ``Author`` model, and ``'Jack'`` "
"is the right-hand side."
msgstr ""
"Sebuah ``Lookup`` bekerja terhadap dua nilai, ``lhs`` dan ``rhs``, "
"kepanjangan dari left-hand side dan right-hand side. Left-hand side biasanya "
"acuan bidang, tetapi dia dapat menjadi apapun menerapkan :ref:`query "
"expression API <query-expression>`. Right-hand adalah nilai diberikan oleh "
"pengguna. Dalam contoh ``Author.objects.filter(name__ne='Jack')``, sisi "
"tangan-kanan adalah sebuah acuan pada bidang ``name`` dari model ``Author``, "
"dan ``'Jack'`` adalah the right-hand side."

msgid ""
"We call ``process_lhs`` and ``process_rhs`` to convert them into the values "
"we need for SQL using the ``compiler`` object described before. These "
"methods return tuples containing some SQL and the parameters to be "
"interpolated into that SQL, just as we need to return from our ``as_sql`` "
"method. In the above example, ``process_lhs`` returns ``('\"author\"."
"\"name\"', [])`` and ``process_rhs`` returns ``('\"%s\"', ['Jack'])``. In "
"this example there were no parameters for the left hand side, but this would "
"depend on the object we have, so we still need to include them in the "
"parameters we return."
msgstr ""
"Kami memanggil ``process_lhs`` dan ``process_rhs`` untuk merubah mereka "
"kedalam nilai-nilai kami butuh untuk SQL menggunakan obyek ``compiler`` "
"digambarkan sebelumnya. Cara ini mengembalikan tuple mengandung beberapa SQL "
"dan parameter untuk ditambahkan kedaam SQL itu, seperti yang kita perlu "
"untuk mengembalikan cara ``as_sql`` kami. Dalam contoh diatas, "
"``process_lhs`` mengembalikan ``('\"author\".\"name\"', [])`` dan "
"``process_rhs`` mengembalikan ``('\"%s\"', ['Jack'])``. Dalam contoh ini "
"tidak ada parameter untuk left hand side, tetapi ini akan tergantung pada "
"obyek kita punya, jadi jami masih butuh menyertakan merekan dalam parameter "
"kami kembalikan."

msgid ""
"Finally we combine the parts into an SQL expression with ``<>``, and supply "
"all the parameters for the query. We then return a tuple containing the "
"generated SQL string and the parameters."
msgstr ""
"Akhirnya kami menggabungkan bagian-bagian kedalam sebuah pernyataan SQL "
"dengan ``<>``, dan memasok semua parameter untuk permintaan. Kami lalu "
"mengambalikan sebuah tuple mengandung deretan karakter SQL dan parameter "
"yang dibangkitkan."

msgid "A transformer example"
msgstr "Contoh transformator"

msgid ""
"The custom lookup above is great, but in some cases you may want to be able "
"to chain lookups together. For example, let's suppose we are building an "
"application where we want to make use of the ``abs()`` operator. We have an "
"``Experiment`` model which records a start value, end value, and the change "
"(start - end). We would like to find all experiments where the change was "
"equal to a certain amount (``Experiment.objects.filter(change__abs=27)``), "
"or where it did not exceed a certain amount (``Experiment.objects."
"filter(change__abs__lt=27)``)."
msgstr ""
"Penyesuaian pencarian diatas adalah hebat, tetapi dalam beberapa kasus anda "
"mungkin ingin dapat merangkai pencarian bersama-sama. Sebagai contoh, mari "
"kita misalnya kami sedang membangun sebuah aplikasi dimana kami ingin "
"membuat penggunaan dari operator ``abs()``. Kami mempunyai sebuah model "
"``Experiment`` yang merekam sebuah nilai awal, nilai akhir, dan perubahan "
"(awal - akhir). Kami akan suka menemukan semua percobaan dimana perubahan "
"setara pada bilangan tertentu (``Experiment.objects."
"filter(change__abs=27)``), atau dimana itu tidak melebihi bilangan tertentu "
"(``Experiment.objects.filter(change__abs__lt=27)``)."

msgid ""
"This example is somewhat contrived, but it nicely demonstrates the range of "
"functionality which is possible in a database backend independent manner, "
"and without duplicating functionality already in Django."
msgstr ""
"Contoh ini agak dibikin, tetapi dia menunjukkan jangkauan fungsionalitas "
"yang memungkinkan dalam cara backend basisdata berdisi sendiri, tanpa "
"menggandakan fungsionalitas yang sudah ada di Django."

msgid ""
"We will start by writing an ``AbsoluteValue`` transformer. This will use the "
"SQL function ``ABS()`` to transform the value before comparison::"
msgstr ""
"Kami akan mulai dengan menulis sebuah perubahan ``AbsoluteValue``. Ini akan "
"menggunakan fungsi SQL ``ABS()`` untuk merubah nilai sebelum dibandingkan::"

msgid "Next, let's register it for ``IntegerField``::"
msgstr "Selanjutnya, mari kita daftarkan sebagai ``IntegerField``::"

msgid ""
"We can now run the queries we had before. ``Experiment.objects."
"filter(change__abs=27)`` will generate the following SQL:"
msgstr ""
"Kami dapat menjalankan permintaan kami miliki sebelumnya. ``Experiment."
"objects.filter(change__abs=27)`` akan membangkitkan SQL berikut:"

msgid ""
"By using ``Transform`` instead of ``Lookup`` it means we are able to chain "
"further lookups afterward. So ``Experiment.objects."
"filter(change__abs__lt=27)`` will generate the following SQL:"
msgstr ""
"Dengan menggunakan ``Transform`` instead of ``Lookup`` itu berarti kami "
"dapat rantai pencarian lebih lanjut sesudahnya. Sehingga``Experiment.objects."
"filter(change__abs__lt=27)`` akan membangkitkan SQL berikut:"

msgid ""
"Note that in case there is no other lookup specified, Django interprets "
"``change__abs=27`` as ``change__abs__exact=27``."
msgstr ""
"Catat bahwa dalam kasus terdapat tidak ada pencarian lain yang ditentukan, "
"Django menterjemahkan ``change__abs=27`` sebagai ``change__abs__exact=27``."

msgid ""
"This also allows the result to be used in ``ORDER BY`` and ``DISTINCT ON`` "
"clauses. For example ``Experiment.objects.order_by('change__abs')`` "
"generates:"
msgstr ""
"Ini juga mengizinkan hasil digunakan dalam klausa ``ORDER BY`` dan "
"``DISTINCT ON``. Sebagai contoh ``Experiment.objects."
"order_by('change__abs')`` membangkitkan:"

msgid ""
"And on databases that support distinct on fields (such as PostgreSQL), "
"``Experiment.objects.distinct('change__abs')`` generates:"
msgstr ""
"Dan pada basisdata yang mendukung distinct pada bidang (seperti PostgreSQL), "
"``Experiment.objects.distinct('change__abs')`` membangkitkan:"

msgid ""
"When looking for which lookups are allowable after the ``Transform`` has "
"been applied, Django uses the ``output_field`` attribute. We didn't need to "
"specify this here as it didn't change, but supposing we were applying "
"``AbsoluteValue`` to some field which represents a more complex type (for "
"example a point relative to an origin, or a complex number) then we may have "
"wanted to specify that the transform returns a ``FloatField`` type for "
"further lookups. This can be done by adding an ``output_field`` attribute to "
"the transform::"
msgstr ""
"Ketika mencari pencarian mana yang diizinkan setelah ``Transform`` "
"diberlakukan, Django menggunakan atribut ``output_field``. Kami tidak butuh "
"menentukan ini disini jika itu tidak berubah, tetapi seharusnya kami "
"memberlakukan ``AbsoluteValue`` pada beberapa bidang yang mewakili jenis "
"lebih rumit (sebagai contoh sebuah titik relatif ke yang asli, atau angka "
"rumit) kemudian kami mungkin ingin menentukan bahwa perubahan mengembalikan "
"jenis ``FloatField`` untuk pencarian lebih lanjut. Ini dapat dikerjakan "
"dengan menambahkan sebuah atribut ``output_field`` untuk perubahan::"

msgid ""
"This ensures that further lookups like ``abs__lte`` behave as they would for "
"a ``FloatField``."
msgstr ""
"Ini memastikan bahwa pencarian lebih lanjut seperti ``abs__lte`` berperilaku "
"seperti mereka lakukan untuk ``FloatField``."

msgid "Writing an efficient ``abs__lt`` lookup"
msgstr "Menulis sebuah pencarian ``abs__lt`` efisien"

msgid ""
"When using the above written ``abs`` lookup, the SQL produced will not use "
"indexes efficiently in some cases. In particular, when we use "
"``change__abs__lt=27``, this is equivalent to ``change__gt=-27`` AND "
"``change__lt=27``. (For the ``lte`` case we could use the SQL ``BETWEEN``)."
msgstr ""
"Ketika menggunakan penulisan diatas pencarian ``abs``, keluaran SQL tidak "
"menggunakan indeks secara efisien dalam beberapa kasus. Khususnya, ketika "
"kami menggunakan ``change__abs__lt=27``, ini setara pada ``change__gt=-27`` "
"AND ``change__lt=27``. (Untuk kasus ``lte`` kami akan menggunakan SQL "
"``BETWEEN``)."

msgid ""
"So we would like ``Experiment.objects.filter(change__abs__lt=27)`` to "
"generate the following SQL:"
msgstr ""
"Jadi kami ingin ``Experiment.objects.filter(change__abs__lt=27)`` "
"membangkitkan SQL berikut:"

msgid "The implementation is::"
msgstr "Peneprapannya adalah::"

msgid ""
"There are a couple of notable things going on. First, "
"``AbsoluteValueLessThan`` isn't calling ``process_lhs()``. Instead it skips "
"the transformation of the ``lhs`` done by ``AbsoluteValue`` and uses the "
"original ``lhs``. That is, we want to get ``\"experiments\".\"change\"`` not "
"``ABS(\"experiments\".\"change\")``. Referring directly to ``self.lhs.lhs`` "
"is safe as ``AbsoluteValueLessThan`` can be accessed only from the "
"``AbsoluteValue`` lookup, that is the ``lhs`` is always an instance of "
"``AbsoluteValue``."
msgstr ""
"Terdapat sepasang hal penting sedang terjadi. Pertama, "
"``AbsoluteValueLessThan`` tidak memanggil ``process_lhs()``. Malahan dia "
"melewati perubahan dari ``lhs`` dikerjakan oleh ``AbsoluteValue`` dan "
"menggunakan ``lhs`` asli. Yaitu, kami ingin mendapatkan ``\"experiments\"."
"\"change\"`` bukan ``ABS(\"experiments\".\"change\")``. Mengacu secara "
"langsung pada ``self.lhs.lhs`` adalah aman ``AbsoluteValueLessThan`` dapat "
"diakses hanya dari pencarian ``AbsoluteValue``, yaitu ``lhs`` selalu sebuah "
"instance dari ``AbsoluteValue``."

msgid ""
"Notice also that  as both sides are used multiple times in the query the "
"params need to contain ``lhs_params`` and ``rhs_params`` multiple times."
msgstr ""
"Perhaikan juga bahwa kedua sisi menggunakan banyak waktu dalam permintaan "
"parameter butuh untuk dikandung ``lhs_params`` dan ``rhs_params`` banyak "
"waktu."

msgid ""
"The final query does the inversion (``27`` to ``-27``) directly in the "
"database. The reason for doing this is that if the ``self.rhs`` is something "
"else than a plain integer value (for example an ``F()`` reference) we can't "
"do the transformations in Python."
msgstr ""
"Permintaan akhir melakukan pembalikan (``27`` ke ``-27``) secara langsung di "
"basisdata. Alasan untuk melakukan ini adalah bahwa jika ``self.rhs`` sesuatu "
"lain daripada nilai integer polos (sebagai contoh sebuah acuan ``F()``) kami "
"tidak dapat melakukan perubahan dalam Python."

msgid ""
"In fact, most lookups with ``__abs`` could be implemented as range queries "
"like this, and on most database backends it is likely to be more sensible to "
"do so as you can make use of the indexes. However with PostgreSQL you may "
"want to add an index on ``abs(change)`` which would allow these queries to "
"be very efficient."
msgstr ""
"Faktanya, kebanyakan pencarian dengan ``__abs`` dapat diterapkan sebagai "
"jangkauan permintaan seperti ini, dan pada kebanyakan backend basisdata "
"sepertinya lebih bijaksana untuk dilakukan sehingga anda dapat membuat "
"penggunaan indeks. Bagaimanapun dengan PostgreSQL anda mungkin ingin "
"menambahkan indeks pada ``abs(change)`` yang akan mengizinkan permintaan ini "
"menjadi lebih efisien."

msgid "A bilateral transformer example"
msgstr "Sebuah contoh perubahan timbal balik"

msgid ""
"The ``AbsoluteValue`` example we discussed previously is a transformation "
"which applies to the left-hand side of the lookup. There may be some cases "
"where you want the transformation to be applied to both the left-hand side "
"and the right-hand side. For instance, if you want to filter a queryset "
"based on the equality of the left and right-hand side insensitively to some "
"SQL function."
msgstr ""
"Contoh ``AbsoluteValue`` kami obrolkan sebelumnya adalah sebuah perubahan "
"yang berlaku pada left-hand side dari pencarian. Mungkin disana beberapa "
"kasus dimana anda ingin perubahan diberlakukan pada kedua left-hand side and "
"the right-hand side. Sebagai contoh, jika anda ingin menyaring kumpulan "
"permintaan berdasarkan pada persamaan left and right-hand side kebal pada "
"beberapa fungsi SQL."

msgid ""
"Let's examine case-insensitive transformations here. This transformation "
"isn't very useful in practice as Django already comes with a bunch of built-"
"in case-insensitive lookups, but it will be a nice demonstration of "
"bilateral transformations in a database-agnostic way."
msgstr ""
"Mari kita uji perubahan peka huruf besar-kecil disini. Perubahan ini tidak "
"berguna dalam praktiknya ketika Django datang dengan sekelompok pencarian "
"peka huruf besar-kecil siap pakai, tetapi itu akan menjadi pertunjukkan "
"bagus dari perubahan dua belah pihak dalam cara basisdata-agnostik."

msgid ""
"We define an ``UpperCase`` transformer which uses the SQL function "
"``UPPER()`` to transform the values before comparison. We define :attr:"
"`bilateral = True <django.db.models.Transform.bilateral>` to indicate that "
"this transformation should apply to both ``lhs`` and ``rhs``::"
msgstr ""
"Kami menentukan sebuab perubahan ``UpperCase`` yang menggunakan fungsi SQL "
"``UPPER()`` untuk merubah nilai sebelum dibandingkan. Kami menentukan :attr:"
"`bilateral = True <django.db.models.Transform.bilateral>` untuk "
"mengindikasikan bahwa perubahan ini harus berlaku pada kedua ``lhs`` and "
"``rhs``::"

msgid "Next, let's register it::"
msgstr "Selanjutnya, mari kita mendaftarkannya::"

msgid ""
"Now, the queryset ``Author.objects.filter(name__upper=\"doe\")`` will "
"generate a case insensitive query like this:"
msgstr ""
"Sekarang, queryset ``Author.objects.filter(name__upper=\"doe\")`` akan "
"membangkitkan permintaan tidak peka seperti ini:"

msgid "Writing alternative implementations for existing lookups"
msgstr "Menulis penerapan cara lain untuk pencarian yang ada"

msgid ""
"Sometimes different database vendors require different SQL for the same "
"operation. For this example we will rewrite a custom implementation for "
"MySQL for the NotEqual operator. Instead of ``<>`` we will be using ``!=`` "
"operator. (Note that in reality almost all databases support both, including "
"all the official databases supported by Django)."
msgstr ""
"Terkadang penjaja basisdata berbeda membutuhkan SQL berbeda untuk pekerjaan "
"yang sama. Untuk contoh ini kami akan menulis kembali sebuah penyesuaian "
"penerapan untuk MySQL untuk penghubung NotEqual. Dari pada ``<>`` kami akan "
"menggunakan penghubung ``!=``. (Catat bahwa dalam kenyataan hampir semua "
"basisdata mendukung keduanya, termasuk semua basisdata resmi didukung oleh "
"Django)."

msgid ""
"We can change the behavior on a specific backend by creating a subclass of "
"``NotEqual`` with an ``as_mysql`` method::"
msgstr ""
"Kami dapat merubah perilaku pada backend khusus dengan membuat subkelas dari "
"``NotEqual`` dengan sebuah metode ``as_mysql``::"

msgid ""
"We can then register it with ``Field``. It takes the place of the original "
"``NotEqual`` class as it has the same ``lookup_name``."
msgstr ""
"Kami dapat mendaftarkannya dengan ``Field``. Dia memakan tempat dari kelas "
"``NotEqual`` asli seperti dia mempunyai ``lookup_name`` sama."

msgid ""
"When compiling a query, Django first looks for ``as_%s % connection.vendor`` "
"methods, and then falls back to ``as_sql``. The vendor names for the in-"
"built backends are ``sqlite``, ``postgresql``, ``oracle`` and ``mysql``."
msgstr ""
"Ketika menyusun sebuah permintaan, Django pertama mencari cara ``as_%s % "
"connection.vendor``, dan kemudian kembali ke ``as_sql``. Nama penjaja untuk "
"membangun backend adalah ``sqlite``, ``postgresql``, ``oracle`` dan "
"``mysql``."

msgid "How Django determines the lookups and transforms which are used"
msgstr "Bagaimana Django menentuka pencarian dan merubah yang sedang digunakan"

msgid ""
"In some cases you may wish to dynamically change which ``Transform`` or "
"``Lookup`` is returned based on the name passed in, rather than fixing it. "
"As an example, you could have a field which stores coordinates or an "
"arbitrary dimension, and wish to allow a syntax like ``."
"filter(coords__x7=4)`` to return the objects where the 7th coordinate has "
"value 4. In order to do this, you would override ``get_lookup`` with "
"something like::"
msgstr ""
"Dalam beberapa kasus anda mungkin berharap untuk secara dinamis merubah "
"``Transform`` atau ``Lookup`` dikembalikan berdasarkan pada nama dilewatkan, "
"daripada memperbaikinya. Sebagai sebuah contoh, anda dapat mempunyai sebuah "
"bidang yang menyimpan kordinat atau dimensi berubah-ubah dan berharap untuk "
"mengizinkan sebuah sintaksis seperti ``.filter(coords__x7=4)`` untuk "
"mengembalikan obyek dimana kordinat 7 mempunyai nilai 4. Untuk melakukan "
"ini, anda akan menimpa  ``get_lookup`` dengan sesuatu seperti::"

msgid ""
"You would then define ``get_coordinate_lookup`` appropriately to return a "
"``Lookup`` subclass which handles the relevant value of ``dimension``."
msgstr ""
"Anda kemudian akan menentukan ``get_coordinate_lookup`` dengan benar untuk "
"mengembalikan sebuah subkelas ``Lookup`` yang menangani nilai yang terkait "
"dari ``dimension``."

msgid ""
"There is a similarly named method called ``get_transform()``. "
"``get_lookup()`` should always return a ``Lookup`` subclass, and "
"``get_transform()`` a ``Transform`` subclass. It is important to remember "
"that ``Transform`` objects can be further filtered on, and ``Lookup`` "
"objects cannot."
msgstr ""
"Ada cara yang dinamai mirip dipanggil ``get_transform()``. ``get_lookup()`` "
"harus selalu mengembalikan sebuah subkelas ``Lookup``, dan ``Lookup`` sebuah "
"subkelas ``Transform``. Itu sangat penting diingat bahwa obyek ``Transform`` "
"dapat lebih jauh disaring, dan obyek ``Lookup`` tidak dapat."

msgid ""
"When filtering, if there is only one lookup name remaining to be resolved, "
"we will look for a ``Lookup``. If there are multiple names, it will look for "
"a ``Transform``. In the situation where there is only one name and a "
"``Lookup`` is not found, we look for a ``Transform`` and then the ``exact`` "
"lookup on that ``Transform``. All call sequences always end with a "
"``Lookup``. To clarify:"
msgstr ""
"Ketika menyaring, jika hanya ada satu nama pencarian tersisa untuk "
"diselesaikan, kami akan mencari sebuah ``Lookup``. Jika ada banyak nama, dia "
"akan mencari sebuah ``Transform``. Dalam keadaan dimana hanya ada satu nama "
"dan sebuah ``Lookup`` tidak ditemukan, kami mencari sebuah ``Transform`` dan "
"kemudian pencarian ``exact`` pada ``Transform`` tersebut. Semua panggilan "
"selalu berurutan diakhiri dengan sebuah ``Lookup``. Untuk menjelaskan:"

msgid ""
"``.filter(myfield__mylookup)`` will call ``myfield.get_lookup('mylookup')``."
msgstr ""
"``.filter(myfield__mylookup)`` akan memanggil ``myfield."
"get_lookup('mylookup')``."

msgid ""
"``.filter(myfield__mytransform__mylookup)`` will call ``myfield."
"get_transform('mytransform')``, and then ``mytransform."
"get_lookup('mylookup')``."
msgstr ""
"``.filter(myfield__mytransform__mylookup)`` akan memanggil ``myfield."
"get_transform('mytransform')``, dan lalu ``mytransform."
"get_lookup('mylookup')``."

msgid ""
"``.filter(myfield__mytransform)`` will first call ``myfield."
"get_lookup('mytransform')``, which will fail, so it will fall back to "
"calling ``myfield.get_transform('mytransform')`` and then ``mytransform."
"get_lookup('exact')``."
msgstr ""
"``.filter(myfield__mytransform)`` akan memanggil pertama ``myfield."
"get_lookup('mytransform')``, yang akan gagal, sehingga dia akan gagal "
"kembali memanggil ``myfield.get_transform('mytransform')`` dan kemudian "
"``mytransform.get_lookup('exact')``."

msgid "How to create custom ``django-admin`` commands"
msgstr "Bagaimana membuat perintah ``django-admin`` yang disesuaikan"

msgid ""
"Applications can register their own actions with ``manage.py``. For example, "
"you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the :doc:`tutorial</intro/"
"tutorial01>`."
msgstr ""
"Aplikasi dapat mendaftarkan tindakan mereka sendiri dengan ``manage.py``. "
"Sebagai contoh, anda mungkin ingin menambahkan sebuah tindakan ``manage.py`` "
"untuk sebuah aplikasi Django yang anda sedang sebarkan. Dalam dokumen ini, "
"kami akan membangun sebuah penyesuaian perintah ``closepoll`` untuk aplikasi "
"``polls`` dari :doc:`tutorial</intro/tutorial01>`."

msgid ""
"To do this, add a ``management/commands`` directory to the application. "
"Django will register a ``manage.py`` command for each Python module in that "
"directory whose name doesn't begin with an underscore. For example:"
msgstr ""

msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""
"Dalam contoh ini, perintah ``closepoll`` akan dibuat tersedia pada setiap "
"proyek yang menyertakan aplikasi ``polls`` dalam :setting:`INSTALLED_APPS`."

msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr ""
"Modul ``_private.py`` tidak akan tersedia sebagai perintah pengelolaan."

msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"Modul ``closepoll.py`` mempunyai hanya satu persyaratan -- itu harus "
"ditentukan sebuah kelas ``Command`` yang memperpanjang :class:`BaseCommand` "
"atau satu dari :ref:`subclasses<ref-basecommand-subclasses>` nya."

msgid "Standalone scripts"
msgstr "Tulisan berdiri sendiri"

msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""
"Penyesuaian pengelolaan perintah adalah khususnya berguna untuk menjalankan "
"tulisan berdiri sendiri atau untuk tulisan yang secara berkala dijalankan "
"dari panel kendali UNIX crontab atau Windows  scheduled tasks."

msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to "
"look like this::"
msgstr ""
"Untuk menerapkan perintah, sunting ``polls/management/commands/closepoll."
"py`` untuk kelihatan seperti ini::"

msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing "
"to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command. Note also that you don't need to "
"end messages with a newline character, it will be added automatically, "
"unless you specify the ``ending`` parameter::"
msgstr ""
"Ketika anda menggunakan pengelolaan perintah dan berharap untuk menyediakan "
"keluaran tempat tuts, anda harus menulis ke ``self.stdout`` dan ``self."
"stderr``, daripada mencetak ke ``stdout`` and ``stderr`` secara langsung. "
"Dengan menggunakan proxi ini, dia menjadi lebih mudah untuk mencoba "
"penyesuaian perintah anda. Catat juga bahwa anda tidak butuh mengakhiri "
"pesan dengan karakter baris baru, dia akan ditambahkan otomatis, meskipun "
"anda menentukan parameter ``ending``::"

msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_ids>``."
msgstr ""
"Perintah baru penyesuaian dapat dipanggil menggunakan ``python manage.py "
"closepoll <poll_ids>``."

msgid ""
"The ``handle()`` method takes one or more ``poll_ids`` and sets ``poll."
"opened`` to ``False`` for each one. If the user referenced any nonexistent "
"polls, a :exc:`CommandError` is raised. The ``poll.opened`` attribute does "
"not exist in the :doc:`tutorial</intro/tutorial02>` and was added to ``polls."
"models.Question`` for this example."
msgstr ""
"Metode ``handle()`` mengambil satu atau lebih ``poll_ids`` dan mensetel "
"``poll.opened`` menjadi ``False`` untuk masing-masing. Jika pengguna "
"mereferensikan jajak pendapat yang tidak ada, sebuah :exc:`CommandError` "
"dimunculkan. Atribut ``poll.opened`` tidak ada dalam :doc:`tutorial</intro/"
"tutorial02>` dan telah ditambahkan pada ``polls.models.Question`` untuk "
"contoh ini."

msgid "Accepting optional arguments"
msgstr "Menerima argumen pilihan"

msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options can be added in the :meth:`~BaseCommand.add_arguments` method "
"like this::"
msgstr ""
"``closepoll`` yang sama dapat dengan mudah dirubah untuk menghapus jejak "
"pendapat yang diberikan daripada menutupnya dengan menerima tambahan pilihan "
"baris perintah. Penyesuaian pilihan ini dapat ditambahkan dalam cara :meth:"
"`~BaseCommand.add_arguments` seperti ini::"

msgid ""
"The option (``delete`` in our example) is available in the options dict "
"parameter of the handle method. See the :py:mod:`argparse` Python "
"documentation for more about ``add_argument`` usage."
msgstr ""
"Pilihan (``delete`` dalam contoh kami) tersedia dalam pilihan parameter "
"perintah dari cara penanganan. Lihat dokumentasi Python :py:mod:`argparse` "
"untuk lebih tentang penggunaan ``add_argument``."

msgid ""
"In addition to being able to add custom command line options, all :doc:"
"`management commands</ref/django-admin>` can accept some default options "
"such as :option:`--verbosity` and :option:`--traceback`."
msgstr ""
"Dalam tambahan untuk dapat menambahkan penyesuaian pilihan baris perintah, "
"semua :doc:`management commands</ref/django-admin>` dapat menerima beberapa "
"pilihan awal seperti :option:`--verbosity` dan :option:`--traceback`."

msgid "Management commands and locales"
msgstr "Pengelolaan perintah dan lokal"

msgid ""
"By default, management commands are executed with the current active locale."
msgstr ""
"Secara awalan, perintah pengelolaan dijalankan dengan lokal aktif saat ini."

msgid ""
"If, for some reason, your custom management command must run without an "
"active locale (for example, to prevent translated content from being "
"inserted into the database), deactivate translations using the "
"``@no_translations`` decorator on your :meth:`~BaseCommand.handle` method::"
msgstr ""
"Jika, untuk beberapa alasan, perintah pengelolaan penyesuaian anda harus "
"berjalan tanpa lokal aktif (sebagai contoh, untuk menghindari isi "
"diterjemahkan dari menjadi dimasukkan kedalam basisdata), non aktifkan "
"terjemahan menggunakan decorator ``@no_translations`` pada metode :meth:"
"`~BaseCommand.handle` anda::"

msgid ""
"Since translation deactivation requires access to configured settings, the "
"decorator can't be used for commands that work without configured settings."
msgstr ""
"Sejak penonaktifan terjemahan membutuhkan akses untuk mengkonfigurasi "
"pengaturan, decorator tidak dapat digunakan untuk perintah yang bekerja "
"tanpa pengaturan yang dikonfigurasikan."

msgid "Testing"
msgstr "Pengujian"

msgid ""
"Information on how to test custom management commands can be found in the :"
"ref:`testing docs <topics-testing-management-commands>`."
msgstr ""
"Informasi pada bagaimana untuk mencoba penyesuaian pengelolaan perintah "
"dapat ditemukan dalam :ref:`dokumen percobaan <topics-testing-management-"
"commands>`."

msgid "Overriding commands"
msgstr "Menimpa perintah"

msgid ""
"Django registers the built-in commands and then searches for commands in :"
"setting:`INSTALLED_APPS` in reverse. During the search, if a command name "
"duplicates an already registered command, the newly discovered command "
"overrides the first."
msgstr ""
"Django mendaftarkan perintah siap-pakai dan kemudian mencari untuk perintah "
"dalam :setting:`INSTALLED_APPS` secara memutar. Selama pencarian, jika "
"sebuah nama perintah menggandakan sebuah perintah sudah terdaftar, perintah "
"baru yang ditemukan ditimpa dahulu."

msgid ""
"In other words, to override a command, the new command must have the same "
"name and its app must be before the overridden command's app in :setting:"
"`INSTALLED_APPS`."
msgstr ""
"Dengan kata lain, untuk menimpa sebuah perintah, perintah baru harus "
"memiliki nama sama dan aplikasinya harus sebelum menimpa aplikasi perintah "
"dalam :setting:`INSTALLED_APPS`."

msgid ""
"Management commands from third-party apps that have been unintentionally "
"overridden can be made available under a new name by creating a new command "
"in one of your project's apps (ordered before the third-party app in :"
"setting:`INSTALLED_APPS`) which imports the ``Command`` of the overridden "
"command."
msgstr ""
"Perintah pengelolaan dari aplikasi pihak-ketiga yang telah tidak sengaja "
"ditimpa dapat dibuat tersedia dibawah sebuah nama baru dengan membuat "
"perintah baru di satu dari aplikasi proyek anda (diurutkan sebelum aplikasi "
"pihak-ketiga dalam :setting:`INSTALLED_APPS`) yang mengimpor ``Command`` "
"dari perintah ditimpa."

msgid "Command objects"
msgstr "Obyek perintah"

msgid "The base class from which all management commands ultimately derive."
msgstr "Kelas dasar dari mana semua pengelolaan perintah akhirnya berasal."

msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"Gunakan kelas ini jika anda ingin mengakses semua mekanisme yang mengurai "
"argumen baris perintah dan bekerja kode apa untuk dipanggil dalam tanggapan; "
"jika anda tidak butuh merubah kebiasaan apapun, pertimbangkan menggunakan "
"satu dari :ref:`subclasses<ref-basecommand-subclasses>` nya."

msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the :"
"meth:`~BaseCommand.handle` method."
msgstr ""
"Mensubkelaskan kelas :class:`BaseCommand` membutuhkan bahwa anda menerapkan "
"cara :meth:`~BaseCommand.handle`."

msgid "Attributes"
msgstr "Atribut"

msgid ""
"All attributes can be set in your derived class and can be used in :class:"
"`BaseCommand`’s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"Semua atribut dapat di setel dalam kelas turunan anda dan dapat digunakan "
"dalam :ref:`subclasses<ref-basecommand-subclasses>` :class:`BaseCommand`."

msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr ""
"Deskripsi singkat dari perintah, dimana akan ditampilkan di pesan bantuan "
"ketika pengguna eksekusi perintah ``python manage.py help <command>``."

msgid ""
"If your command defines mandatory positional arguments, you can customize "
"the message error returned in the case of missing arguments. The default is "
"output by :py:mod:`argparse` (\"too few arguments\")."
msgstr ""
"Jika perintah anda menentukan argumen penempatan wajib, anda dapat "
"menyesuaikan pesan kesalahan yang dikembalikan dalam kasus argumen yang "
"hilang. Awalnya adalah keluaran oleh :py:mod:`argparse` (\"terlalu sedikit "
"argumen\")."

msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""
"Sebuah boolean menunjukkan apakah perintah keluaran pernyataan SQL; jika "
"``True``, keluaran akan otomatis dibungkus dengan ``BEGIN;`` dan ``COMMIT;"
"``. Nilai awal adalah ``False``."

msgid ""
"A boolean; if ``True``, the command prints a warning if the set of "
"migrations on disk don't match the migrations in the database. A warning "
"doesn't prevent the command from executing. Default value is ``False``."
msgstr ""
"Sebuah boolean; jika ``True``, memerintahkan mencetak sebuah peringatan jika "
"pengaturan perpindahan pada cakram tidak cocok dengan perpindahan di "
"basisdata. Sebuah peringatan tidak mencegah perintah dari penjalanan. Nilai "
"awal adalah ``False``."

msgid ""
"A list or tuple of tags, e.g. ``[Tags.staticfiles, Tags.models]``. System "
"checks :ref:`registered in the chosen tags <registering-labeling-checks>` "
"will be checked for errors prior to executing the command. The value "
"``'__all__'`` can be used to specify that all system checks should be "
"performed. Default value is ``'__all__'``."
msgstr ""
"Sebuah etiket list atau tuple, misalnya ``[Tags.staticfiles, Tags.models]``. "
"Pemeriksaan sistem :ref:`registered in the chosen tags <registering-labeling-"
"checks>` akan diperiksa untuk kesalahan sebelum menjalankan perintah. Nilai "
"``'__all__'``dapat digunakan untuk menentukan bahwa semua pemeriksaan sustem "
"harus dilakukan. Nilai awalan adalah ``'__all__'``."

msgid ""
"An instance attribute that helps create colored output when writing to "
"``stdout`` or ``stderr``. For example::"
msgstr ""
"Sebuah atribut instance yang membantu membuat keluaran bewarna ketika "
"menulis ke ``stdout`` atau ``stderr``. Sebagai contoh::"

msgid ""
"See :ref:`syntax-coloring` to learn how to modify the color palette and to "
"see the available styles (use uppercased versions of the \"roles\" described "
"in that section)."
msgstr ""
"Lihat :ref:`syntax-coloring` untuk mempelajari bagaimana merubah papan warna "
"dan melihat gaya tersedia (gunakan versi huruf besar dari \"roles\" yang "
"digambarkan dalam bagian itu)."

msgid ""
"If you pass the :option:`--no-color` option when running your command, all "
"``self.style()`` calls will return the original string uncolored."
msgstr ""
"Jika anda melewati pilihan :option:`--no-color` ketika menjalankan perintah "
"anda, semua pemanggilan ``self.style()`` akan mengembalikan deretan karakter "
"asli tidak bewarna."

msgid ""
"The default command options to suppress in the help output. This should be a "
"set of option names (e.g. ``'--verbosity'``). The default values for the "
"suppressed options are still passed."
msgstr ""
"Pilihan perintah awalan untuk menekan keluaran bantuan. Ini harus berupa "
"kumpulan dari nama-nama pilihan (misalnya ``'--verbosity'``). Nilai awalan "
"untuk pilihan yang ditekankan masih bisa dilewati."

msgid "Methods"
msgstr "Cara"

msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the :"
"meth:`~BaseCommand.handle` method must be implemented."
msgstr ""
":class:`BaseCommand` mempunyai beberapa cara yang dapat dikesampingkan "
"tetapi hanya cara :meth:`~BaseCommand.handle` harus diterapkan."

msgid "Implementing a constructor in a subclass"
msgstr "Menerapkan constructor dalam subkelas"

msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`’s ``__init__``::"
msgstr ""
"Jika anda menerapkan ``__init__`` dalam subkelas anda dari :class:"
"`BaseCommand`, anda harus memanggil ``__init__`` dari :class:`BaseCommand::"

msgid ""
"Returns a ``CommandParser`` instance, which is an :class:`~argparse."
"ArgumentParser` subclass with a few customizations for Django."
msgstr ""
"Mengembalikan instance ``CommandParser``, yaitu sebuah subkelas :class:"
"`~argparse.ArgumentParser` dengan sedikit penyesuaian untuk Django."

msgid ""
"You can customize the instance by overriding this method and calling "
"``super()`` with ``kwargs`` of :class:`~argparse.ArgumentParser` parameters."
msgstr ""
"Anda dapat menyesuaikan instance dengan menimpa metode ini dan memanggil "
"``super()`` dengan ``kwargs`` dari parameter :class:`~argparse."
"ArgumentParser`."

msgid ""
"Entry point to add parser arguments to handle command line arguments passed "
"to the command. Custom commands should override this method to add both "
"positional and optional arguments accepted by the command. Calling "
"``super()`` is not needed when directly subclassing ``BaseCommand``."
msgstr ""
"Titik masukan untuk menambahkan pengurai argumen untuk menangani argumen "
"baris perintah dilewati ke perintah. Penyesuaian perintah harus menimpa "
"metode ini untuk menambah kedua argumen penempatan dan pilihan yang diterima "
"oleh perintah. Memanggil ``super()`` tidak dibutuhkan ketika pengsubkelasan "
"secara langsung ``BaseCommand``."

msgid ""
"Returns the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""
"Mengembalikan versi Django, yang seharusnya benar untuk semua perintah "
"Django siap pakai. Perintah pasokan-pengguna dapat menimpa metode ini untuk "
"mengembalikan versi mereka sendiri."

msgid ""
"Tries to execute this command, performing system checks if needed (as "
"controlled by the :attr:`requires_system_checks` attribute). If the command "
"raises a :exc:`CommandError`, it's intercepted and printed to ``stderr``."
msgstr ""
"Mencoba menjalankan perintaj ini, melakukan pemeriksaan sistem jika "
"diperlukan (seperti yang dikendalikan oleh atribut :attr:"
"`requires_system_checks`). Jika perintah memunculkan  :exc:`CommandError`, "
"itu dicegat dan dicetak ke ``stderr``."

msgid "Calling a management command in your code"
msgstr "Memanggil perintah pengelolaan di kode anda"

msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :func:`~django.core.management.call_command` instead."
msgstr ""
"``execute()`` jangan dipanggil secara langsung dari kode anda untuk "
"menjalankan sebuah perintah. Lebih baik gunakan :func:`~django.core."
"management.call_command`."

msgid "The actual logic of the command. Subclasses must implement this method."
msgstr "Logika sebenarnya dari perintah. Subkelas harus menerapkan cara ini."

msgid ""
"It may return a string which will be printed to ``stdout`` (wrapped by "
"``BEGIN;`` and ``COMMIT;`` if :attr:`output_transaction` is ``True``)."
msgstr ""
"Itu mungkin mengembalikan sebuah string yang akan dicetak pada ``stdout`` "
"(dibungkus oleh ``BEGIN;`` dan ``COMMIT;`` jika :attr:`output_transaction` "
"adalah ``True``)."

msgid ""
"Uses the system check framework to inspect the entire Django project for "
"potential problems. Serious problems are raised as a :exc:`CommandError`; "
"warnings are output to ``stderr``; minor notifications are output to "
"``stdout``."
msgstr ""
"Menggunakan kerangka kerja pemeriksaan sistem untuk memeriksa keseluruhan "
"proyek Django untuk potensi masalah. Masalah serius dimunculkan sebagai :exc:"
"`CommandError`; peringatan adalah keluaran ``stderr``; pemberitahuan kecil "
"adalah keluaran ``stdout``."

msgid ""
"If ``app_configs`` and ``tags`` are both ``None``, all system checks are "
"performed except deployment and database related checks. ``tags`` can be a "
"list of check tags, like ``compatibility`` or ``models``."
msgstr ""

msgid ""
"You can pass ``include_deployment_checks=True`` to also perform deployment "
"checks, and list of database aliases in the ``databases`` to run database "
"related checks against them."
msgstr ""

msgid "``BaseCommand`` subclasses"
msgstr "Subkelas ``BaseCommand``"

msgid ""
"A management command which takes one or more installed application labels as "
"arguments, and does something with each of them."
msgstr ""
"Sebuah pengelolaan perintah yang mengambil satu atau lebih label aplikasi "
"terpasang sebagai argumen, dan melakukan sesuatu dengan masing-masing dari "
"mereka."

msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app_config`, which will be called once "
"for each application."
msgstr ""
"Daripada menerapkan :meth:`~BaseCommand.handle`,  subkelas harus menerapkan :"
"meth:`~AppCommand.handle_app_config`, yang akan dipanggil sekali untuk "
"setiap aplikasi."

msgid ""
"Perform the command's actions for ``app_config``, which will be an :class:"
"`~django.apps.AppConfig` instance corresponding to an application label "
"given on the command line."
msgstr ""
"Melakukan tindakan perintah untuk ``app_config``, yang akan menjadi sebuah "
"instance :class:`~django.apps.AppConfig` terhubung ke sebuah label aplikasi "
"yang diberikan pada baris perintah."

msgid ""
"A management command which takes one or more arbitrary arguments (labels) on "
"the command line, and does something with each of them."
msgstr ""
"Sebuah pengelolaan perintah yang mengambil satu atau lebih argumen (label) "
"yang berubah-ubah pada baris perintah, dan melakukan sesuatu dengan masing-"
"masing dari mereka."

msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""
"Daripada menerapkan :meth:`~BaseCommand.handle`,  subkelas harus menerapkan :"
"meth:`~LabelCommand.handle_label`, yang akan dipanggil sekali untuk setiap "
"label."

msgid ""
"A string describing the arbitrary arguments passed to the command. The "
"string is used in the usage text and error messages of the command. Defaults "
"to ``'label'``."
msgstr ""
"Sebuah string menggambarkan argumenberubah-ubah dilewatkan ke perintah. "
"String digunakan dalam penggunaan teks dan pesan kesalahan dari perintah. "
"Awalan pada ``'label'``."

msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""
"Melakukan tindakan perintah untuk ``label``, yang akan menjadi deretan "
"karakter seperti yang diberikan pada baris perintah."

msgid "Command exceptions"
msgstr "Perintah pengecualian"

msgid ""
"Exception class indicating a problem while executing a management command."
msgstr ""
"Kelas pengecualian mengindikasikan sebuah masalah selama menjalankan "
"perintah pengelolaan."

msgid ""
"If this exception is raised during the execution of a management command "
"from a command line console, it will be caught and turned into a nicely-"
"printed error message to the appropriate output stream (i.e., ``stderr``); "
"as a result, raising this exception (with a sensible description of the "
"error) is the preferred way to indicate that something has gone wrong in the "
"execution of a command. It accepts the optional ``returncode`` argument to "
"customize the exit status for the management command to exit with, using :"
"func:`sys.exit`."
msgstr ""
"Jika pengecualian ini muncul selama menjalankan perintah pengelolaan dari "
"konsol baris perintah, itu akan ditangkap dan dirubah menjadi pesan "
"kesalahan tercetak-bagus untuk menyesuaikan aliran keluaran (yaitu, "
"``stderr``); sebagai hasilnya, memunculkan pengecualian ini (dengan "
"deskripsi kesalahan yang masuk akal) adalah cara yang dipilih untuk "
"mengunjukkan bahwa sesuatu telah salah dalam penjalanan program. Itu "
"menerima argumen pilihan ``returncode`` untuk menyesuaikan keadaan keluar "
"untuk perintah pengelolaan untuk keluar, menggunakan :func:`sys.exit`."

msgid ""
"If a management command is called from code through :func:`~django.core."
"management.call_command`, it's up to you to catch the exception when needed."
msgstr ""
"Jika sebuah pengelolaan perintah dipanggil dari kode melalui :func:`~django."
"core.management.call_command`, itu terserah kamu untuk menangkap "
"pengecualian ketika dibutuhkan."

msgid "How to create custom model fields"
msgstr "Bagaimana membuat bidang model disesuaikan"

msgid "Introduction"
msgstr "Kata Pengantar"

msgid ""
"The :doc:`model reference </topics/db/models>` documentation explains how to "
"use Django's standard field classes -- :class:`~django.db.models."
"CharField`, :class:`~django.db.models.DateField`, etc. For many purposes, "
"those classes are all you'll need. Sometimes, though, the Django version "
"won't meet your precise requirements, or you'll want to use a field that is "
"entirely different from those shipped with Django."
msgstr ""
"Dokumentasi :doc:`model reference </topics/db/models>` menjelaskan bagaimana "
"menggunakan kelas-kelas bidang standar Django -- :class:`~django.db.models."
"CharField`, :class:`~django.db.models.DateField`, dll. Untuk banyak tujuan, "
"kelas-kelas tersebut adalah yang anda akan butuhkan. Terkadang, meskipun, "
"versi Django tidak akan bertemu persyaratan tepat anda, atau anda akan "
"menggunakan sebuah bidang yang seluruhnya berbeda dari yang dikemas dengan "
"Django."

msgid ""
"Django's built-in field types don't cover every possible database column "
"type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more "
"obscure column types, such as geographic polygons or even user-created types "
"such as `PostgreSQL custom types`_, you can define your own Django ``Field`` "
"subclasses."
msgstr ""
"Jenis bidang siap pakai Django tidak mencangkup setiap jenis kolom basisdata "
"yang mungkin -- hanya jenis umum, seperti ``VARCHAR`` dan ``INTEGER``. Untuk "
"lebih mengaburkan jenis kolom, seperti poligon geografis atau bahkan jenis "
"dibuat-pengguna seperti `PostgreSQL custom types`_, anda dapat menentukan "
"subkelas-subkelas ``Field`` Django and sendiri."

msgid ""
"Alternatively, you may have a complex Python object that can somehow be "
"serialized to fit into a standard database column type. This is another case "
"where a ``Field`` subclass will help you use your object with your models."
msgstr ""
"Jalan lain, anda mungkin mempunyai obyek Python rumit yang dapat entah "
"bagaimana disambungkan untuk cocok kedalam jenis kolom basisdata standar. "
"Ini adalah kasus lain dimana sebuah subkelas ``Field`` akan membantu anda "
"menggunakan obyek anda dengan model anda."

msgid "Our example object"
msgstr "Obyek contoh kami"

msgid ""
"Creating custom fields requires a bit of attention to detail. To make things "
"easier to follow, we'll use a consistent example throughout this document: "
"wrapping a Python object representing the deal of cards in a hand of "
"Bridge_. Don't worry, you don't have to know how to play Bridge to follow "
"this example. You only need to know that 52 cards are dealt out equally to "
"four players, who are traditionally called *north*, *east*, *south* and "
"*west*.  Our class looks something like this::"
msgstr ""
"Membuat penyesuaian bidang membuatuhkan sedikit perhatian ke rincian. Untuk "
"membuat hal-hal lebih mudah untuk diikuti, kami akan menggunakan contoh "
"tetap melalui dokumen ini: membungkus sebuah obyek Python mewakili "
"persetujuan dari kartu-kartu dalam sebuah tangan dari Bridge_. Jangan "
"khawatir, anda tidak perlu mengetahui bagaimana bermain Bridge untuk "
"mengikuti contoh ini. Anda hanya perlu mengetahui bahwa 52 kartu dibagikan "
"sama ke empat pemain, yang secara tradisional dipanggil *utara*, *timur*, "
"*selatan* dan *barat*. Kelas kami kelihatan seperti ini::"

msgid ""
"This is an ordinary Python class, with nothing Django-specific about it. "
"We'd like to be able to do things like this in our models (we assume the "
"``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""
"Ini adalah kelas Python asli, dengan tidak ada Django-spesifik tentang itu. "
"Kami ingin dapat melakukan hal-hal seperti ini dalam model kami (kami "
"beranggapan atribut ``hand`` pada model adalah sebuah instance ``Hand``)::"

msgid ""
"We assign to and retrieve from the ``hand`` attribute in our model just like "
"any other Python class. The trick is to tell Django how to handle saving and "
"loading such an object."
msgstr ""
"Kami memberikan dan mengambil dari atribut ``hand`` dalam model kami seperti "
"kelas Python lainnya. Tipuannya adalah mengatakan Django bagaimana menangani "
"penyimpanan dan memuat sebuah obyek seperti itu."

msgid ""
"In order to use the ``Hand`` class in our models, we **do not** have to "
"change this class at all. This is ideal, because it means you can easily "
"write model support for existing classes where you cannot change the source "
"code."
msgstr ""
"Agar menggunakan kelas ``Hand`` di model kami, kami **tidak** harus merubah "
"kelas ini sama sekali. Ini adalah cocok, karena dia berarti anda dapat  "
"dengan mudah menulis model mendukung kelas-kelas yang ada dimana anda tidak "
"dapat merubah sumber kode."

msgid ""
"You might only be wanting to take advantage of custom database column types "
"and deal with the data as standard Python types in your models; strings, or "
"floats, for example. This case is similar to our ``Hand`` example and we'll "
"note any differences as we go along."
msgstr ""
"Anda mungkin hanya menginginkan untuk mengambil keuntungan dari penyesuaian "
"jenis kolom basisdata dan berhubungan dengan data sebagai jenis Python "
"standar dalam model anda; string, atau float, sebagai contoh. Kasus ini "
"mirip pada contoh ``hand`` kami dan kami akan mencatat perbedaan ketika kita "
"pergi bersama."

msgid "Background theory"
msgstr "Latar belakang teori"

msgid "Database storage"
msgstr "Penyimpanan basisdata"

msgid ""
"Let's start with model fields. If you break it down, a model field provides "
"a way to take a normal Python object -- string, boolean, ``datetime``, or "
"something more complex like ``Hand`` -- and convert it to and from a format "
"that is useful when dealing with the database. (Such a format is also useful "
"for serialization, but as we'll see later, that is easier once you have the "
"database side under control)."
msgstr ""
"Mari mulai dengan bidang model. Jika anda memecahnya, sebuah bidang model "
"menyediakan cara untuk mengambil objek Python biasa -- string, boolean, "
"``datetime``, atau sesuatu lebih rumit seperti ``Hand`` -- dan merubahnya "
"dan dari bentuk tersebut yang berguna ketika berhubungan dengan basisdata. "
"(Bentuk tersebut juga berguna untuk serialisasi, tapi seperti yang akan kita "
"lihat nanti, bahwa itu lebih mudah sekali anda memiliki sisi basisdata "
"dibawah kendali)."

msgid ""
"Fields in a model must somehow be converted to fit into an existing database "
"column type. Different databases provide different sets of valid column "
"types, but the rule is still the same: those are the only types you have to "
"work with. Anything you want to store in the database must fit into one of "
"those types."
msgstr ""
"Bidang dalam sebuah model harus bagaimanapun dipindahkan untuk cocok kedalam "
"jenis kolom basisdata yang ada. Basisdata yang berbeda menyediakan kumpulan "
"berbeda dari jenis kolom sah, tetapi aturan masih sama: yaitu hanya jenis "
"anda harus bekerja dengannya. Apapun anda ingin simpan dalam basisdata harus "
"cocok kedalam satu dari jenis itu."

msgid ""
"Normally, you're either writing a Django field to match a particular "
"database column type, or you will need a way to convert your data to, say, a "
"string."
msgstr ""
"Umumnya, anda apakah menulis bidang Django untuk mencocokkan bagian jenis "
"kolom basisdata, atau anda akan butuh merubah data anda, katakan, string."

msgid ""
"For our ``Hand`` example, we could convert the card data to a string of 104 "
"characters by concatenating all the cards together in a predetermined order "
"-- say, all the *north* cards first, then the *east*, *south* and *west* "
"cards. So ``Hand`` objects can be saved to text or character columns in the "
"database."
msgstr ""
"Untuk contoh kami ``Hand``, kami dapat merubah data kartu menjadi sebuah "
"string 104 karakter  dengan menambahkan semua kartu bersama-sama dalam "
"urutan ditentukan sebelumnya -- katakan, pertama semua kartu *north*, "
"kemudian kartu *east*, *south* dan *west*. Jadi obyek ``Hand`` dapat "
"disimpan ke kolom teks atau karakter di basisdata."

msgid "What does a field class do?"
msgstr "Apakah yang kelas bidang lakukan?"

msgid ""
"All of Django's fields (and when we say *fields* in this document, we always "
"mean model fields and not :doc:`form fields </ref/forms/fields>`) are "
"subclasses of :class:`django.db.models.Field`. Most of the information that "
"Django records about a field is common to all fields -- name, help text, "
"uniqueness and so forth. Storing all that information is handled by "
"``Field``. We'll get into the precise details of what ``Field`` can do later "
"on; for now, suffice it to say that everything descends from ``Field`` and "
"then customizes key pieces of the class behavior."
msgstr ""
"Semua bidang Django (dan ketika kami katakan *bidang* dalam dokumen ini, "
"kami selalu berarti bidang model dan bukan :doc:`form fields </ref/forms/"
"fields>`) adalah subkelas dari :class:`django.db.models.Field`. Kebanyakan "
"informasi yang Django rekam mengenai sebuah bidang adalah umum bagi semua "
"teman -- nama, bantuan, teks, keunikan dan sebagainya. Menyimpan semua "
"informasi itu yang ditangani oleh ``Field``. Kami akan memasuki rincian "
"tepat dari ``Field`` apa yang dapat dilakukan kemudian; untuk sekarang, "
"cukuplah untuk mengatakan bahwa segala sesuatu turun dari ``Field`` dan "
"kemudian menyesuaian potongan kunci dari kebiasaan kelas."

msgid ""
"It's important to realize that a Django field class is not what is stored in "
"your model attributes. The model attributes contain normal Python objects. "
"The field classes you define in a model are actually stored in the ``Meta`` "
"class when the model class is created (the precise details of how this is "
"done are unimportant here). This is because the field classes aren't "
"necessary when you're just creating and modifying attributes. Instead, they "
"provide the machinery for converting between the attribute value and what is "
"stored in the database or sent to the :doc:`serializer </topics/"
"serialization>`."
msgstr ""
"Adalah penting untuk menyadari bahwa sebuah kelas bidang Django bukan apa "
"yang disimpan dalam atribut model anda. Pengaturan model mengandung obyek "
"Python biasa. Kelas-kelas bidang yang anda tentukan dalam sebuah model "
"sebenarnya disimpan dalam kelas ``Meta`` ketika kelas model dibuat (rincian "
"tepatnya bagaimana ini dilakukan adalah tidak penting disini). Ini karena "
"kelas-kelas bidang tidak perlu ketika anda hanya membuat dan merubah "
"atribut. Sebagai gantinya, mereka menyediakan mesin-mesin untuk merubah "
"diantara nilai atribut dan apa yang disimpan dalam basisdata atau dikirim "
"ke :doc:`serializer </topics/serialization>`."

msgid ""
"Keep this in mind when creating your own custom fields. The Django ``Field`` "
"subclass you write provides the machinery for converting between your Python "
"instances and the database/serializer values in various ways (there are "
"differences between storing a value and using a value for lookups, for "
"example). If this sounds a bit tricky, don't worry -- it will become clearer "
"in the examples below. Just remember that you will often end up creating two "
"classes when you want a custom field:"
msgstr ""
"Ingatlah ini ketika membuat penyesuaian bidang sendiri. Subkelas ``Field`` "
"Django anda tulis menyediakan mesin-mesin untuk merubah diantara contoh "
"Python anda dan nilai database/serializer dalam beragam cara (ada perbedaan "
"diantara menyimpan sebuah nilai dan menggunakan sebuah nilai untuk "
"pencarian, sebagai contoh). Jika ini terdengar sedikit rumit, jangan "
"khawatir -- dia akan menjadi lebih jelas dalam contoh dibawah ini. Ingatlah "
"bahwa anda akan sering membuat dua kelas ketika anda ingin penyesuaian "
"bidang:"

msgid ""
"The first class is the Python object that your users will manipulate. They "
"will assign it to the model attribute, they will read from it for displaying "
"purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""
"Kelas pertama adalah obyek Python dimana pengguna anda akan merubah. Mereka "
"akan menetapkannya ke atribut model, mereka akan membaca darinya untuk "
"menampilkan tujuan, hal-hal seperti itu. ini adalah kelas ``hand`` dalam "
"contoh kami."

msgid ""
"The second class is the ``Field`` subclass. This is the class that knows how "
"to convert your first class back and forth between its permanent storage "
"form and the Python form."
msgstr ""
"Kelas kedua adalah subkelas ``Field``. Ini adalah kelas yang diketahui "
"bagaimana merubah kelas pertama anda ke belakang dan seterusnya diantara "
"bentuk penyimpanan tetap dan bentuk Python."

msgid "Writing a field subclass"
msgstr "Menulis sebuah subkelas bidang"

msgid ""
"When planning your :class:`~django.db.models.Field` subclass, first give "
"some thought to which existing :class:`~django.db.models.Field` class your "
"new field is most similar to. Can you subclass an existing Django field and "
"save yourself some work? If not, you should subclass the :class:`~django.db."
"models.Field` class, from which everything is descended."
msgstr ""
"Ketika merencanakan subkelas :class:`~django.db.models.Field` anda, pertama "
"berikan beberapa diduga yang mana ada kelas :class:`~django.db.models.Field` "
"bidang baru anda yang paling mirip. Dapatkah anda mensubkelaskan bidang "
"Django yang ada dan menyimpan diri anda beberapa pekerjaan? Jika tidak, anda "
"harus mensubkelaskan kelas :class:`~django.db.models.Field`, yang semuanya "
"turun."

msgid ""
"Initializing your new field is a matter of separating out any arguments that "
"are specific to your case from the common arguments and passing the latter "
"to the ``__init__()`` method of :class:`~django.db.models.Field` (or your "
"parent class)."
msgstr ""
"Inisialisasi bidang baru anda adalah sebuah masalah dari memisahkan argumen "
"apapun yang khusus pada kasus anda dari argumen umum dan melewatkannya ke "
"cara `__init__()`` dari :class:`~django.db.models.Field` (atau kelas induk "
"anda)."

msgid ""
"In our example, we'll call our field ``HandField``. (It's a good idea to "
"call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so "
"it's easily identifiable as a :class:`~django.db.models.Field` subclass.) It "
"doesn't behave like any existing field, so we'll subclass directly from :"
"class:`~django.db.models.Field`::"
msgstr ""
"Dalam contoh kami, kami akan memanggil bidang ``HandField``. (Adalah ide "
"bagus untuk memanggil subkelas :class:`~django.db.models.Field` anda "
"``<Something>Field``, sehingga sangat mudah dicirikan sebagai sebuah "
"subkelas :class:`~django.db.models.Field`.) Dia tidak berperilaku seperti "
"bidang lainnya yang ada, jadi kami akan mensubkelaskan secara langsung dari :"
"class:`~django.db.models.Field`::"

msgid ""
"Our ``HandField`` accepts most of the standard field options (see the list "
"below), but we ensure it has a fixed length, since it only needs to hold 52 "
"card values plus their suits; 104 characters in total."
msgstr ""
"``HandField`` kami menerima kebanyakan pilihan bidang standar (lihat daftar "
"dibawah ini), tetapi kami memastikan dia mempunyai panjang tetap, sejak dia "
"hanya butuh menampung 52 nilai kartu ditambah pasangan mereka; 104 karakter "
"jumlahnya."

msgid ""
"Many of Django's model fields accept options that they don't do anything "
"with. For example, you can pass both :attr:`~django.db.models.Field."
"editable` and :attr:`~django.db.models.DateField.auto_now` to a :class:"
"`django.db.models.DateField` and it will ignore the :attr:`~django.db.models."
"Field.editable` parameter (:attr:`~django.db.models.DateField.auto_now` "
"being set implies ``editable=False``). No error is raised in this case."
msgstr ""
"Banyak bidang model Django menerima pilihan bahwa mereka tidak melakukan "
"apapun. Sebagai contoh, anda dapat melewatkan kedua :attr:`~django.db.models."
"Field.editable` dan :attr:`~django.db.models.DateField.auto_now` pada :class:"
"`django.db.models.DateField` dan itu akan mengabaikan parameter :attr:"
"`~django.db.models.Field.editable` (:attr:`~django.db.models.DateField."
"auto_now` ditetapkan ``editable=False``). Tidak ada kesalahan dimunculkan "
"dalam kasus ini."

msgid ""
"This behavior simplifies the field classes, because they don't need to check "
"for options that aren't necessary. They pass all the options to the parent "
"class and then don't use them later on. It's up to you whether you want your "
"fields to be more strict about the options they select, or to use the more "
"permissive behavior of the current fields."
msgstr ""
"Perilaku ini menyederhanakan bidang kelas, karena mereka tidak butuh "
"mencentang pilihan yang tidak dibutuhkan. Mereka melewati semua pilihan ke "
"kelas induk dan mereka tidak menggunakan kemudian. Itu terserah anda apakah "
"anda ingin bidang anda menjadi lebih ketat tentang pilihan mereka pilih, "
"atau menggunakan perilaku lebih permisif dari bidang saat ini."

msgid "The ``Field.__init__()`` method takes the following parameters:"
msgstr "Cara ``Field.__init__()`` mengambil parameter berikut:"

msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ":attr:`~django.db.models.Field.verbose_name`"

msgid "``name``"
msgstr "``nama``"

msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ":attr:`~django.db.models.Field.primary_key`"

msgid ":attr:`~django.db.models.CharField.max_length`"
msgstr ":attr:`~django.db.models.CharField.max_length`"

msgid ":attr:`~django.db.models.Field.unique`"
msgstr ":attr:`~django.db.models.Field.unique`"

msgid ":attr:`~django.db.models.Field.blank`"
msgstr ":attr:`~django.db.models.Field.blank`"

msgid ":attr:`~django.db.models.Field.null`"
msgstr ":attr:`~django.db.models.Field.null`"

msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ":attr:`~django.db.models.Field.db_index`"

msgid ""
"``rel``: Used for related fields (like :class:`ForeignKey`). For advanced "
"use only."
msgstr ""
"``rel``: Digunakan untuk bidang terkait (seperti :class:`ForeignKey`). Hanya "
"untuk penggunaan lanjut."

msgid ":attr:`~django.db.models.Field.default`"
msgstr "attr:`~django.db.models.Field.default`"

msgid ":attr:`~django.db.models.Field.editable`"
msgstr ":attr:`~django.db.models.Field.editable`"

msgid ""
"``serialize``: If ``False``, the field will not be serialized when the model "
"is passed to Django's :doc:`serializers </topics/serialization>`. Defaults "
"to ``True``."
msgstr ""
"``serialize``: Jika ``False``, bidang tidak akan didisambungkan ketika model "
"dilewatkan ke :doc:`serializers </topics/serialization>` Django. Nilai awal "
"ke ``True``."

msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ":attr:`~django.db.models.Field.unique_for_date`"

msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ":attr:`~django.db.models.Field.unique_for_month`"

msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ":attr:`~django.db.models.Field.unique_for_year`"

msgid ":attr:`~django.db.models.Field.choices`"
msgstr ":attr:`~django.db.models.Field.choices`"

msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ":attr:`~django.db.models.Field.help_text`"

msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ":attr:`~django.db.models.Field.db_column`"

msgid ""
":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if "
"the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can "
"usually ignore this option."
msgstr ""
":attr:`~django.db.models.Field.db_tablespace`: hanya untuk pembuatan indeks, "
"jika dukungan backend :doc:`tablespaces </topics/db/tablespaces>`. Anda "
"dapat biasanya mengabaikan pilihan ini."

msgid ""
":attr:`~django.db.models.Field.auto_created`: ``True`` if the field was "
"automatically created, as for the :class:`~django.db.models.OneToOneField` "
"used by model inheritance. For advanced use only."
msgstr ""
":attr:`~django.db.models.Field.auto_created`: ``True`` jika bidang otomatis "
"telah dibuat, adapun :class:`~django.db.models.OneToOneField` digunakan oleh "
"warisan model. Untuk penggunaan hanya tingkat lanjut."

msgid ""
"All of the options without an explanation in the above list have the same "
"meaning they do for normal Django fields. See the :doc:`field documentation "
"</ref/models/fields>` for examples and details."
msgstr ""
"Semua pilihan tanpa sebuah penjelasan dalam daftar diatas mempunyai arti "
"yang sama mereka lakukan untuk bidang Django biasa. Lihat :doc:`field "
"documentation </ref/models/fields>` untuk contoh dan rincian."

msgid "Field deconstruction"
msgstr "Membongkar bidang"

msgid ""
"The counterpoint to writing your ``__init__()`` method is writing the :meth:"
"`~.Field.deconstruct` method. It's used during :doc:`model migrations </"
"topics/migrations>` to tell Django how to take an instance of your new field "
"and reduce it to a serialized form - in particular, what arguments to pass "
"to ``__init__()`` to recreate it."
msgstr ""
"Tandingan untuk menulis metode ``__init__()`` anda dalah menulis metode :"
"meth:`~.Field.deconstruct`. Itu digunakan selama :doc:`model migrations </"
"topics/migrations>` untuk memberitahu Django bgaimana mengambil sebuah "
"instance dari bidang baru dan menguranginya pada formulir serial - "
"khususnya, argumen apa yang dilewatkan ke ``__init__()`` untuk membuat ulang "
"kembali."

msgid ""
"If you haven't added any extra options on top of the field you inherited "
"from, then there's no need to write a new ``deconstruct()`` method. If, "
"however, you're changing the arguments passed in ``__init__()`` (like we are "
"in ``HandField``), you'll need to supplement the values being passed."
msgstr ""
"Jika anda belum menambahkan pilihan tambahan pada bagian atas bidang anda "
"warisi, lalu tidak perlu untuk menulis cara ``deconstruct()`` baru. Jika, "
"bagaimanapun, anda sedang merubah argumen dilewati dalam ``__init__()`` "
"(seperti kami dalam ``HandField``), anda akan butuh tambahan nilai yang "
"sedang dilewati."

msgid ""
"``deconstruct()`` returns a tuple of four items: the field's attribute name, "
"the full import path of the field class, the positional arguments (as a "
"list), and the keyword arguments (as a dict). Note this is different from "
"the ``deconstruct()`` method :ref:`for custom classes <custom-deconstruct-"
"method>` which returns a tuple of three things."
msgstr ""
"``deconstruct()`` mengembalikan sebuah tuple dari empat barang: nama atribut "
"bidang, jalur penuh impor dari kelas bidang, argumen penempatan (sebagai "
"sebuah list), dan argumen kata kunci (sebagai sebuah dict). Catat ini "
"berbeda dari metode ``deconstruct()``:ref:`for custom classes <custom-"
"deconstruct-method>` yang mengembalikan sebuah tuple dari tiga hal."

msgid ""
"As a custom field author, you don't need to care about the first two values; "
"the base ``Field`` class has all the code to work out the field's attribute "
"name and import path. You do, however, have to care about the positional and "
"keyword arguments, as these are likely the things you are changing."
msgstr ""
"Sebagai sebuah penyesuaian bidang penulis, anda tidak perlu memperhatikan "
"tentang dua nilai pertama; kelas ``Field`` dasar mempunyai semua kode untuk "
"bekerja nama atribut bidang dan mengimpor jalur. Anda, bagaimanapun, harus "
"memperhatikan tentang penempatan dan katakunci argumen, seperti ini mirip "
"hal-hal anda sedang rubah."

msgid ""
"For example, in our ``HandField`` class we're always forcibly setting "
"max_length in ``__init__()``. The ``deconstruct()`` method on the base "
"``Field`` class will see this and try to return it in the keyword arguments; "
"thus, we can drop it from the keyword arguments for readability::"
msgstr ""
"Sebagai contoh, dalam kelas ``HandField`` kami selalu memaksa menyetel "
"max_length dalam ``__init__()``. Cara ``deconstruct()`` dalam basis kelas "
"``Field`` akan melihat ini dan mencoba mengembalikannya dalam argumen "
"katakunci; demikian, kami dapat membuangnya dari argumen katakunci untuk "
"kesiapan::"

msgid ""
"If you add a new keyword argument, you need to write code in "
"``deconstruct()`` that puts its value into ``kwargs`` yourself. You should "
"also omit the value from ``kwargs`` when it isn't necessary to reconstruct "
"the state of the field, such as when the default value is being used::"
msgstr ""
"Jika anda menambahkan sebuah argumen kata kunci, anda butuh menulis kode "
"dalam ``deconstruct()`` yang menaruh nilainya kedalam ``kwargs`` anda "
"sendiri. Anda harus juga menghilangkan nilai dari ``kwargs`` ketika itu "
"tidak perlu dibangun kembali keadaan dari bidang, seperti ketika nilai "
"awalan sedang digunakan::"

msgid ""
"More complex examples are beyond the scope of this document, but remember - "
"for any configuration of your Field instance, ``deconstruct()`` must return "
"arguments that you can pass to ``__init__`` to reconstruct that state."
msgstr ""
"Contoh lebih rumit diluar cakupan dari dokumen ini, tetapi ingat - untuk "
"konfigurasi apapun dari instance Field anda, ``deconstruct()`` harus "
"mengembalikan argumen yang anda dapat lewati ke ``__init__`` untuk membangun "
"kembali keadaan tersebut."

msgid ""
"Pay extra attention if you set new default values for arguments in the "
"``Field`` superclass; you want to make sure they're always included, rather "
"than disappearing if they take on the old default value."
msgstr ""
"Beri perhatian lebih jika anda menyetel nilai baru awal untuk argumen dalam "
"super kelas ``Field``; anda ingin memastikan mereka selalu disertakan, "
"daripada  menghilang jika mereka mengambil nilai awal lama."

msgid ""
"In addition, try to avoid returning values as positional arguments; where "
"possible, return values as keyword arguments for maximum future "
"compatibility. If you change the names of things more often than their "
"position in the constructor's argument list, you might prefer positional, "
"but bear in mind that people will be reconstructing your field from the "
"serialized version for quite a while (possibly years), depending how long "
"your migrations live for."
msgstr ""
"Tambahan, coba hindari mengembalikan nilai sebagai argumen penempatan; jika "
"mungkin, mengembalikan nilai sebagai argumen kata kunci untuk maksimal "
"kesesuaian masa depan. Jika anda merubah nama-nama dari hal-hal lebih sering "
"dari posisi mereka dalam daftar argumen konstruktor, anda mungkin lebih suka "
"penempatan, tapi ingatlah bahwa orang akan membangun kembali bidang anda "
"dari versi terserialisasi cukup lama (mungkin tahunan), tergantung seberapa "
"lama perpindahan anda hidup."

msgid ""
"You can see the results of deconstruction by looking in migrations that "
"include the field, and you can test deconstruction in unit tests by "
"deconstructing and reconstructing the field::"
msgstr ""
"Anda dapat melihat hasil dari dekonstruksi dengan melihat dalam perpindahan "
"yang menyertakan bidang, dan anda dapat mencoba dekonstruksi dalam satuan "
"percobaan oleh dekonstruksi dan rekonstruksi bidang::"

msgid "Field attributes not affecting database column definition"
msgstr "Atribut bidang tidak mempengaruhi penentuan kolom basisdata"

msgid ""
"You can override ``Field.non_db_attrs`` to customize attributes of a field "
"that don't affect a column definition. It's used during model migrations to "
"detect no-op ``AlterField`` operations."
msgstr ""
"Anda dapat menimpa ``Field.non_db_attrs`` untuk menyesuaikan atribut dari "
"bidang yang tidak berpengaruh penentuan kolom. Itu digunakan selama "
"perpindahan model untuk mengenali tindakan tanpa-operasi ``AlterField``."

msgid "For example::"
msgstr "Sebagai contoh::"

msgid "Changing a custom field's base class"
msgstr "Merubah penyesuaian kelas dasar bidang"

msgid ""
"You can't change the base class of a custom field because Django won't "
"detect the change and make a migration for it. For example, if you start "
"with::"
msgstr ""
"Anda tidak dapat merubah kelas dasar dari penyesuaian bidang karena Django "
"tidak akan mengenali perubahan dan buat perpindahan untuknya. Sebagai "
"contoh, jika anda mulai dengan::"

msgid ""
"and then decide that you want to use ``TextField`` instead, you can't change "
"the subclass like this::"
msgstr ""
"dan kemudian ditentukan bahwa anda ingin menggunakan ``TextField`` sebagai "
"gantinya, anda tidak dapat merubah subkelas seperti ini::"

msgid ""
"Instead, you must create a new custom field class and update your models to "
"reference it::"
msgstr ""
"Sebagai gantinya, anda harus membuat kelas bidang penyesuaian baru dan "
"perbaharui model anda untuk mengacunya::"

msgid ""
"As discussed in :ref:`removing fields <migrations-removing-model-fields>`, "
"you must retain the original ``CustomCharField`` class as long as you have "
"migrations that reference it."
msgstr ""
"Seperti diobrolkan di :ref:`removing fields <migrations-removing-model-"
"fields>`, anda harus memelihara kelas ``CustomCharField`` asli selama anda "
"mempunyai perpindahan yang mengacunya."

msgid "Documenting your custom field"
msgstr "Mendokumentasikan bidang penyesuaian anda"

msgid ""
"As always, you should document your field type, so users will know what it "
"is. In addition to providing a docstring for it, which is useful for "
"developers, you can also allow users of the admin app to see a short "
"description of the field type via the :doc:`django.contrib.admindocs </ref/"
"contrib/admin/admindocs>` application. To do this provide descriptive text "
"in a :attr:`~Field.description` class attribute of your custom field. In the "
"above example, the description displayed by the ``admindocs`` application "
"for a ``HandField`` will be 'A hand of cards (bridge style)'."
msgstr ""
"Seperti biasa, anda harus mendokumentasikan jenis bidang anda, sehingga "
"pengguna mengetahui apa itu. Sebagai tambahan untuk menyediakan docstring "
"untuknya, yang sangat berguna bagi pengembang, anda dapat juga mengizinkan "
"pengguna dari aplikasi admin melihat keterangan ringkas dari jenis data "
"melalui atribut kelas :doc:`django.contrib.admindocs </ref/contrib/admin/"
"admindocs>` application. To do this provide descriptive text in a :attr:"
"`~Field.description` dari bidang penyesuaian anda. Pada contoh diatas, "
"gambaran ditampilkan oleh aplikasi ``admindocs`` untuk ``HandField`` berupa "
"'A hand of cards (bridge style)'."

msgid ""
"In the :mod:`django.contrib.admindocs` display, the field description is "
"interpolated with ``field.__dict__`` which allows the description to "
"incorporate arguments of the field. For example, the description for :class:"
"`~django.db.models.CharField` is::"
msgstr ""
"Dalam tampilan :mod:`django.contrib.admindocs`, gambaran bidang ditambahkan "
"dengan ``field.__dict__`` yang mengizinkan gambaran pada argumen yang "
"digabungkan dari bidang. Sebagai contoh, gambaran untuk :class:`~django.db."
"models.CharField` adalah::"

msgid "Useful methods"
msgstr "Cara berguna"

msgid ""
"Once you've created your :class:`~django.db.models.Field` subclass, you "
"might consider overriding a few standard methods, depending on your field's "
"behavior. The list of methods below is in approximately decreasing order of "
"importance, so start from the top."
msgstr ""
"Sekali anda telah membuat subkelas :class:`~django.db.models.Field` anda, "
"anda boleh mempertimbangkan mengutamakan sedikit metode standar, tergantung "
"pada perilaku bidang anda. Daftar dari cara dibawah ini adalah dalam lebih "
"kurang menurun urutan dari kepentingan, jadi mulai dari atas."

msgid "Custom database types"
msgstr "Jenis basisdata penyesuaian"

msgid ""
"Say you've created a PostgreSQL custom type called ``mytype``. You can "
"subclass ``Field`` and implement the :meth:`~Field.db_type` method, like so::"
msgstr ""
"Katakan anda telah membuat jenis penyesuaian PostgreSQL dipanggil ``mtype``. "
"Anda dapat mensubkelaskan ``Field`` dan menerapkan cara :meth:`~Field."
"db_type`, seperti begitu::"

msgid ""
"Once you have ``MytypeField``, you can use it in any model, just like any "
"other ``Field`` type::"
msgstr ""
"Sekali anda mempunyai ``MytypeField``, anda dapat menggunakannya di model "
"apapun, seperti jenis ``Field`` apapun lainnya ::"

msgid ""
"If you aim to build a database-agnostic application, you should account for "
"differences in database column types. For example, the date/time column type "
"in PostgreSQL is called ``timestamp``, while the same column in MySQL is "
"called ``datetime``. You can handle this in a :meth:`~Field.db_type` method "
"by checking the ``connection.vendor`` attribute. Current built-in vendor "
"names are: ``sqlite``, ``postgresql``, ``mysql``, and ``oracle``."
msgstr ""
"Jika anda bertujuan membangun aplikasi basisdata-agnostik, anda harus "
"memperhitungkan perbedaan dalam jenis kolom basisdata. Sebagai contoh, jenis "
"data date/time di PostgreSQL disebut ``timestamp``, sedangkan kolom yang "
"sama di MySQL disebut ``datetime``. Anda dapat menangani ini di metode a :"
"meth:`~Field.db_type` dengan memeriksa atribut ``connection.vendor``. Nama-"
"nama penjual siap-pakai saat ini adalah: ``sqlite``, ``postgresql``, "
"``mysql``, dan ``oracle``."

msgid ""
"The :meth:`~Field.db_type` and :meth:`~Field.rel_db_type` methods are called "
"by Django when the framework constructs the ``CREATE TABLE`` statements for "
"your application -- that is, when you first create your tables. The methods "
"are also called when constructing a ``WHERE`` clause that includes the model "
"field -- that is, when you retrieve data using QuerySet methods like "
"``get()``, ``filter()``, and ``exclude()`` and have the model field as an "
"argument."
msgstr ""

msgid ""
"Some database column types accept parameters, such as ``CHAR(25)``, where "
"the parameter ``25`` represents the maximum column length. In cases like "
"these, it's more flexible if the parameter is specified in the model rather "
"than being hard-coded in the ``db_type()`` method. For example, it wouldn't "
"make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""
"Beberapa jenis kolom basisdata menerima parameter, seperti ``CHAR(25)``, "
"dimana parameter ``25`` mewakili panjang kolom maksimum. Dalam kasus seperti "
"ini, dia lebih supel jika parameter ditentukan dalam model daripada menjadi "
"kode-keras dalam cara ``db_type()``. Sebagai contoh, dia tidak akan masuk "
"akan untuk mempunyai ``CharMaxlength25Field``, ditampilkan disini::"

msgid ""
"The better way of doing this would be to make the parameter specifiable at "
"run time -- i.e., when the class is instantiated. To do that, implement "
"``Field.__init__()``, like so::"
msgstr ""
"Cara terbaik melakukan ini akan membuat parameter ditentukan pada saat "
"dijalankan -- yaitu, ketika kelas diinstantiasikan. Untuk melakukan itu, "
"terapkan ``Field.__init__()``, seeprti itu::"

msgid ""
"Finally, if your column requires truly complex SQL setup, return ``None`` "
"from :meth:`.db_type`. This will cause Django's SQL creation code to skip "
"over this field. You are then responsible for creating the column in the "
"right table in some other way, but this gives you a way to tell Django to "
"get out of the way."
msgstr ""
"Akhirnya, jika kolom anda benar-benar membutuhkan pengaturan SQL rumit, "
"kembalikan ``None`` from :meth:`.db_type`. Ini akan menyebabkan kode "
"pembuatan SQL Django dilewati terhadap bidang ini. Anda kemudian "
"bertanggungjawab untuk membuat kolom di tabel yang benar dengan cara lain, "
"tetapi ini memberikan anda cara memberitahu Django untuk keluar dari jalan."

msgid ""
"The :meth:`~Field.rel_db_type` method is called by fields such as "
"``ForeignKey`` and ``OneToOneField`` that point to another field to "
"determine their database column data types. For example, if you have an "
"``UnsignedAutoField``, you also need the foreign keys that point to that "
"field to use the same data type::"
msgstr ""
"Cara :meth:`~Field.rel_db_type` dipanggil oleh bidang seperti ``ForeignKey`` "
"and ``OneToOneField`` yang menunjuk ke bidang lain untuk menentukan jenis "
"data kolom basisdata mereka. Sebagai contoh, jika anda mempunyai sebuah "
"``UnsignedAutoField``, anda juga butuh foreign key yang menunjuk ke bidang "
"itu untuk menggunakan jenis data yang sama::"

msgid "Converting values to Python objects"
msgstr "Mengubah nilai menjadi obyek Python"

msgid ""
"If your custom :class:`~Field` class deals with data structures that are "
"more complex than strings, dates, integers, or floats, then you may need to "
"override :meth:`~Field.from_db_value` and :meth:`~Field.to_python`."
msgstr ""
"Jika penyesuaian kelas :class:`~Field` anda berhubungan dengan struktur dara "
"yang lebih rumit daripada string, date, integer, atau float, kemudian anda "
"butuh untuk menimpa :meth:`~Field.from_db_value` dan :meth:`~Field."
"to_python`."

msgid ""
"If present for the field subclass, ``from_db_value()`` will be called in all "
"circumstances when the data is loaded from the database, including in "
"aggregates and :meth:`~django.db.models.query.QuerySet.values` calls."
msgstr ""
"Jika ada untuk bidang subkelas, ``from_db_value()`` akan dipanggil dalam "
"semua keadaan ketika data dimuat dari basisdata, termasuk dalam keseluruhan "
"dan panggilan :meth:`~django.db.models.query.QuerySet.values`."

msgid ""
"``to_python()`` is called by deserialization and during the :meth:`~django."
"db.models.Model.clean` method used from forms."
msgstr ""
"``to_python()`` dipanggil dengan memutuskan dan selama cara :meth:`~django."
"db.models.Model.clean` digunakan dari formulir."

msgid ""
"As a general rule, ``to_python()`` should deal gracefully with any of the "
"following arguments:"
msgstr ""
"Sebagai aturan umum, ``to_python()`` harus berurusan secara anggun dengan "
"salah satu dari argumen berikut:"

msgid ""
"An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr ""
"Sebuah contoh dari jenis yang benar (sebagai contoh, ``Hand`` dalam contoh "
"kami yang sedang berjalan)."

msgid "A string"
msgstr "Sebuah string"

msgid "``None`` (if the field allows ``null=True``)"
msgstr "``None`` (jika bidang mengizinkan ``null=True``)"

msgid ""
"In our ``HandField`` class, we're storing the data as a ``VARCHAR`` field in "
"the database, so we need to be able to process strings and ``None`` in the "
"``from_db_value()``. In ``to_python()``, we need to also handle ``Hand`` "
"instances::"
msgstr ""
"Dalam kelas ``HandField`` kami, kami menyimpan data sebagai bidang "
"``VARCHAR``di basisdata, jadi kita harus bisa mengolahnya strings dan "
"``None`` dalam ``from_db_value()``. Di ``to_python()``, kami juga butuh "
"menangani instance ``Hand``::"

msgid ""
"Notice that we always return a ``Hand`` instance from these methods. That's "
"the Python object type we want to store in the model's attribute."
msgstr ""
"Perhatikan bahwa kami selalu mengembalikan sebuah instance ``hand`` dari "
"cara ini. Itu adalah jenis obyek Python kami ingin simpan dalam atribut "
"model."

msgid ""
"For ``to_python()``, if anything goes wrong during value conversion, you "
"should raise a :exc:`~django.core.exceptions.ValidationError` exception."
msgstr ""
"Untuk ``to_python()``, jika apapun berjalan salah selama perubahan nilai, "
"anda harus memunculkan pengecualian :exc:`~django.core.exceptions."
"ValidationError`."

msgid "Converting Python objects to query values"
msgstr "Mengubah obyek Python ke nilai pencarian"

msgid ""
"Since using a database requires conversion in both ways, if you override :"
"meth:`~Field.from_db_value` you also have to override :meth:`~Field."
"get_prep_value` to convert Python objects back to query values."
msgstr ""
"Sejak menggunakan basisdata membutuhkan perubahan dalam kedua cara, jika "
"anda menimpa :meth:`~Field.from_db_value` anda juga harus menimpa :meth:"
"`~Field.get_prep_value` untuk merubah obyek Pythonkembali ke nilai "
"permintaan."

msgid ""
"If your custom field uses the ``CHAR``, ``VARCHAR`` or ``TEXT`` types for "
"MySQL, you must make sure that :meth:`.get_prep_value` always returns a "
"string type. MySQL performs flexible and unexpected matching when a query is "
"performed on these types and the provided value is an integer, which can "
"cause queries to include unexpected objects in their results. This problem "
"cannot occur if you always return a string type from :meth:`.get_prep_value`."
msgstr ""
"Jika bidang penyesuaian anda menggunakan jenis ``CHAR``, ``VARCHAR`` atau "
"``TEXT`` untuk MySQL, anda harus memastikan bahwa :meth:`.get_prep_value` "
"selalu mengembalikan jenis string. MySQL melakukan luwas dan pencocokan "
"tidak diharapkan ketika sebuah permintaan dilakukan pada jenis ini dan nilai "
"yang disediakan adalah sebuah integer, yang dapat menyebabkan permintaan "
"untuk menyertakan obyek tidak diharapkan dalam pencarian mereka. Masalah ini "
"tidak dapat timbul jika anda selalu mengembalikan jenis string dari :meth:`."
"get_prep_value`."

msgid "Converting query values to database values"
msgstr "Mengubah nilai pencarian ke nilai basisdata"

msgid ""
"Some data types (for example, dates) need to be in a specific format before "
"they can be used by a database backend. :meth:`~Field.get_db_prep_value` is "
"the method where those conversions should be made. The specific connection "
"that will be used for the query is passed as the ``connection`` parameter. "
"This allows you to use backend-specific conversion logic if it is required."
msgstr ""
"Beberapa jenis data (sebagai contoh, tanggal) butuh dalam bentuk yang khusus "
"sebelum mereka dapat digunakan oleh backend basisdata. :meth:`~Field."
"get_db_prep_value` adalah cara dimana perubahan tersebut harus dibuat. "
"Hubungan khusus yang akan digunakan untuk permintaan dilewati sebagai "
"parameter ``connection``. Ini mengizinkan anda menggunakan logika perubahan "
"khusus-backend jika dia diwajibkan."

msgid ""
"For example, Django uses the following method for its :class:`BinaryField`::"
msgstr ""
"Sebagai contoh, Django menggunakan cara berikut untuk :class:`BinaryField` "
"nya::"

msgid ""
"In case your custom field needs a special conversion when being saved that "
"is not the same as the conversion used for normal query parameters, you can "
"override :meth:`~Field.get_db_prep_save`."
msgstr ""
"Dalam kasus bidang penyesuaian anda butuh perubahan khusus ketika sedang "
"disimpan yang tidak sama seperti perubahan digunakan untuk parameter "
"permintaan biasa, anda dapat menimpa :meth:`~Field.get_db_prep_save`."

msgid "Preprocessing values before saving"
msgstr "Mengolah nilai sebelum menyimpan"

msgid ""
"If you want to preprocess the value just before saving, you can use :meth:"
"`~Field.pre_save`. For example, Django's :class:`~django.db.models."
"DateTimeField` uses this method to set the attribute correctly in the case "
"of :attr:`~django.db.models.DateField.auto_now` or :attr:`~django.db.models."
"DateField.auto_now_add`."
msgstr ""
"Jika anda ingin prapengolahan nilai sebelum menyimpan, anda dapat "
"menggunakan :meth:`~Field.pre_save`. Sebagai contoh, :class:`~django.db."
"models.DateTimeField` Django menggunakan cara ini untuk menyetel atribut "
"dengan benar dalam kasus dari :attr:`~django.db.models.DateField.auto_now` "
"atau :attr:`~django.db.models.DateField.auto_now_add`."

msgid ""
"If you do override this method, you must return the value of the attribute "
"at the end. You should also update the model's attribute if you make any "
"changes to the value so that code holding references to the model will "
"always see the correct value."
msgstr ""
"Jika anda melakukan menimpa metode ini, anda harus mengembalikan nilai dari "
"atribut di akhirnya. Anda harus juga memperbaharui atribut model jika anda "
"membuat perubahan apapun ke nilai sehingga kode menahan acuan ke model akan "
"selalu melihat nilai benar."

msgid "Specifying the form field for a model field"
msgstr "Menentukan bidang formulir untuk sebuah bidang model"

msgid ""
"To customize the form field used by :class:`~django.forms.ModelForm`, you "
"can override :meth:`~Field.formfield`."
msgstr ""
"Untuk menyesuaikan bidang formulir digunakan oleh :class:`~django.forms."
"ModelForm`, anda dapat menimpa :meth:`~Field.formfield`."

msgid ""
"The form field class can be specified via the ``form_class`` and "
"``choices_form_class`` arguments; the latter is used if the field has "
"choices specified, the former otherwise. If these arguments are not "
"provided, :class:`~django.forms.CharField` or :class:`~django.forms."
"TypedChoiceField` will be used."
msgstr ""
"Kelas bidang formulir dapat ditentukan melalui argumen ``form_class`` dan "
"``choices_form_class``; yang terakhir digunakan jika bidang mempunyai "
"pilihan yang ditentukan, yang depan kebalikannya. Jika argumen ini tidak "
"disediakan, :class:`~django.forms.CharField` atau :class:`~django.forms."
"TypedChoiceField` akan digunakan."

msgid ""
"All of the ``kwargs`` dictionary is passed directly to the form field's "
"``__init__()`` method. Normally, all you need to do is set up a good default "
"for the ``form_class`` (and maybe ``choices_form_class``) argument and then "
"delegate further handling to the parent class. This might require you to "
"write a custom form field (and even a form widget). See the :doc:`forms "
"documentation </topics/forms/index>` for information about this."
msgstr ""
"Semua kamus ``kwargs`` dilewatkan secara langsung ke formulir cara "
"``__init__()`` bidang. Biasanya, semua anda butuh lakukan adalah menyetel "
"nilai awal bagus untuk ``form_class`` argumen (dan mungkin "
"``choices_form_class``) dan kemudian mengutus penanganan lebih lanjut untuk "
"kelas induk. Ini mungkin membutuhkan anda menulis bidang formulir "
"penyesuaian (dan bahkan sebuah widget formulir). Lihat :doc:`forms "
"documentation </topics/forms/index>` untuk informasi tentang ini."

msgid ""
"Continuing our ongoing example, we can write the :meth:`~Field.formfield` "
"method as::"
msgstr ""
"Melanjutkan contoh berlangsung kita, kami dapat menulis cara :meth:`~Field."
"formfield` sebagai::"

msgid ""
"This assumes we've imported a ``MyFormField`` field class (which has its own "
"default widget). This document doesn't cover the details of writing custom "
"form fields."
msgstr ""
"Ini menganggap kami telah mengimpor kelas bidang ``MyFormField`` (yang "
"mempunyai widget awal sendiri). Dokumen ini tidak mencakup rincian dari "
"penulisan bidang formulir penyesuaian."

msgid "Emulating built-in field types"
msgstr "Menyamai jenis bidang siap pakai"

msgid ""
"If you have created a :meth:`.db_type` method, you don't need to worry "
"about :meth:`.get_internal_type` -- it won't be used much. Sometimes, "
"though, your database storage is similar in type to some other field, so you "
"can use that other field's logic to create the right column."
msgstr ""
"Jika anda telah membuat cara :meth:`.db_type`, anda tidak butuh khawatir "
"tentang :meth:`.get_internal_type` -- dia tidak akan digunakan. Terkadang, "
"meskipun, penyimpanan basisdata anda mirip dalam jenis pada beberapa bidang "
"lain, jadi anda dapat menggunakan logika bidang lain itu untuk membuat kolum "
"yang benar."

msgid ""
"No matter which database backend we are using, this will mean that :djadmin:"
"`migrate` and other SQL commands create the right column type for storing a "
"string."
msgstr ""
"Tidak penting backend basisdata anda kami gunakan, ini akan berarti bahwa :"
"djadmin:`migrate` dan perintah SQL lainnya membuat jenis kolom benar untuk "
"menyimpan sebuah deretan karakter."

msgid ""
"If :meth:`.get_internal_type` returns a string that is not known to Django "
"for the database backend you are using -- that is, it doesn't appear in "
"``django.db.backends.<db_name>.base.DatabaseWrapper.data_types`` -- the "
"string will still be used by the serializer, but the default :meth:`~Field."
"db_type` method will return ``None``. See the documentation of :meth:`~Field."
"db_type` for reasons why this might be useful. Putting a descriptive string "
"in as the type of the field for the serializer is a useful idea if you're "
"ever going to be using the serializer output in some other place, outside of "
"Django."
msgstr ""
"Jika :meth:`.get_internal_type` megembalikan sebuah deretan karakter yang "
"tidak diketahui ke Django untuk backend basisdata anda sedang gunakan -- "
"yaitu, dia tidak muncul dalam ``django.db.backends.<db_name>.base."
"DatabaseWrapper.data_types`` -- deretan karakter akan masih digunakan oleh "
"penyambung, tetapi cara :meth:`~Field.db_type` awal akan mengembalikan "
"``None``. Lihat dokumentasi dari :meth:`~Field.db_type` untuk alasan mengapa "
"ini mungkin berguna. menaruh sebuah gambaran deretan karakter kedalam "
"sebagai jenis dari bidang untuk penyambung adalah ide berguna jika anda "
"sedang akan menggunakan keluaran penyambung dalam beberapa tempat lainnya, "
"diluar Django."

msgid "Converting field data for serialization"
msgstr "Mengubah data field untuk serialisasi"

msgid ""
"To customize how the values are serialized by a serializer, you can "
"override :meth:`~Field.value_to_string`. Using :meth:`~Field."
"value_from_object` is the best way to get the field's value prior to "
"serialization. For example, since ``HandField`` uses strings for its data "
"storage anyway, we can reuse some existing conversion code::"
msgstr ""
"Untuk menyesuaikan bagaimana nilai diserialkan oleh penserial, anda dapat "
"menimpa :meth:`~Field.value_to_string`. menggunakan :meth:`~Field."
"value_from_object` adalah jalan terbaik untuk mendapatkan nilai bidang "
"sebelum serialisasi. Sebagai contoh, sejak ``HandField`` menggunakan string "
"untuk penyimpanan data, kami dapat menggunakan kembali beberapa kode "
"perubahan yang ada::"

msgid "Some general advice"
msgstr "Beberapa saran umum"

msgid ""
"Writing a custom field can be a tricky process, particularly if you're doing "
"complex conversions between your Python types and your database and "
"serialization formats. Here are a couple of tips to make things go more "
"smoothly:"
msgstr ""
"Menulis sebuah bidang penyesuaian dapat menjadi pengolahan yang rumit, "
"khususnya jika anda sedang melakukan perubahan rumit diantara jenis Python "
"anda dan basisdata anda dan bentuk penyambungan. Ini adalah sepasang tip "
"untuk membuat hal-hal berjalan lebih halus::"

msgid ""
"Look at the existing Django fields (in :source:`django/db/models/fields/"
"__init__.py`) for inspiration. Try to find a field that's similar to what "
"you want and extend it a little bit, instead of creating an entirely new "
"field from scratch."
msgstr ""

msgid ""
"Put a ``__str__()`` method on the class you're wrapping up as a field. There "
"are a lot of places where the default behavior of the field code is to call "
"``str()`` on the value. (In our examples in this document, ``value`` would "
"be a ``Hand`` instance, not a ``HandField``). So if your ``__str__()`` "
"method automatically converts to the string form of your Python object, you "
"can save yourself a lot of work."
msgstr ""
"Taruh sebuah metode ``__str__()`` pada kelas anda sedang bungkus sebagai "
"sebuah bidang. Ada banyak tempat-tempat dimana perilaku awalan dari kode "
"bidang adalah memanggil ``str()`` pada nilai. (Dalam contoh kami dalam "
"dokumen ini, ``value`` akan berupa instance ``handa``, bukan ``handField``). "
"Jadi jika metode ``__str__()`` anda secara otomatis merubah ke bentuk string "
"dari obyek Python anda, anda dapat menyimpan anda sendiri banyak pekerjaan."

msgid "Writing a ``FileField`` subclass"
msgstr "Menulis subkelas ``FileField``"

msgid ""
"In addition to the above methods, fields that deal with files have a few "
"other special requirements which must be taken into account. The majority of "
"the mechanics provided by ``FileField``, such as controlling database "
"storage and retrieval, can remain unchanged, leaving subclasses to deal with "
"the challenge of supporting a particular type of file."
msgstr ""
"Dalam tambahan pada cara diatas, bidang-bidang yang berurusan dengan berkas-"
"berkas mempunyai sedikit persyaratan khusus lainnya yang harus diambil "
"kedalam akun. Kebanyakan dari mekanisme disediakan oleh ``FileField``, "
"seperti mengendalikan penyimpanan basisdata dan pengambilan, dapat tetap "
"tidak berubah, meninggalkan subkelas-subkelas untuk berurusan dengan "
"tantangan dari mendukung jenis khusus dari berkas."

msgid ""
"Django provides a ``File`` class, which is used as a proxy to the file's "
"contents and operations. This can be subclassed to customize how the file is "
"accessed, and what methods are available. It lives at ``django.db.models."
"fields.files``, and its default behavior is explained in the :doc:`file "
"documentation </ref/files/file>`."
msgstr ""
"Django menyediakan sebuah kelas ``File``, yang digunakan sebagai sebuah "
"proxy pada isi berkas dan tindakan. Ini dapat disubkelaskan ke menyesuaikan "
"bagaimana berkas diakses, dan cara apa yang tersedia. Dia tinggal di "
"``django.db.models.fields.files``, dan kebiasaan awalnya adalah dijelaskan "
"dalam :doc:`file documentation </ref/files/file>`."

msgid ""
"Once a subclass of ``File`` is created, the new ``FileField`` subclass must "
"be told to use it. To do so, assign the new ``File`` subclass to the special "
"``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""
"Ketika sub kelas ``File`` dibuat, subkelas ``FileField`` harus diberitahu "
"menggunakannya. Untuk melakukannya, tugaskan subkelas ``File`` ke atribut "
"khusus ``attr_class`` dari subkelas ``FileField``."

msgid "A few suggestions"
msgstr "Sedikit saran"

msgid ""
"In addition to the above details, there are a few guidelines which can "
"greatly improve the efficiency and readability of the field's code."
msgstr ""
"Sebagai tambahan pada rincian diatas, terdapat sedikit panduan yang dapat "
"meningkatkan efisiensi dan kesiapan dari kode bidang."

msgid ""
"The source for Django's own ``ImageField`` (in :source:`django/db/models/"
"fields/files.py`) is a great example of how to subclass ``FileField`` to "
"support a particular type of file, as it incorporates all of the techniques "
"described above."
msgstr ""

msgid ""
"Cache file attributes wherever possible. Since files may be stored in remote "
"storage systems, retrieving them may cost extra time, or even money, that "
"isn't always necessary. Once a file is retrieved to obtain some data about "
"its content, cache as much of that data as possible to reduce the number of "
"times the file must be retrieved on subsequent calls for that information."
msgstr ""
"Menembolok atribut berkas dimanapaun memungkinkan. Sejak berkas-berkas "
"mungkin disimpan dalam sistem penyimpanan jauh, mengambil mereka mungkin "
"memakan waktu tambahan, atau bahkan uang, yang tidak selalu dibutuhkan. "
"Sekali sebuah berkas diambil untuk mendapatkan beberapa data tentang isinya, "
"simpan sebanyak mungkin data tersebut untuk mengurangi jumlah kali berkas "
"harus diambil pada pemanggilan berikut untuk informasi itu."

msgid "How to implement a custom template backend"
msgstr "Bagaimana menerapkan backend cetakan disesuaikan"

msgid "Custom backends"
msgstr "Backend penyesuaian"

msgid ""
"Here's how to implement a custom template backend in order to use another "
"template system. A template backend is a class that inherits ``django."
"template.backends.base.BaseEngine``. It must implement ``get_template()`` "
"and optionally ``from_string()``. Here's an example for a fictional "
"``foobar`` template library::"
msgstr ""
"Ini adalah bagaimana menerapkan backend cetakan penyesuaian untuk "
"menggunakan sistem cetakan lain. Sebuah backend cetakan adalah sebuah kelas "
"yang mewarisi ``django.template.backends.base.BaseEngine``. Itu harus "
"diterapkan ``get_template()`` dan pilihan ``from_string()``. Ini adalah "
"sebuah contoh untuk pustaka cetakan khayal ``foobar``::"

msgid "See `DEP 182`_ for more information."
msgstr "Lihat `DEP 182`_ untuk informasi lebih."

msgid "Debug integration for custom engines"
msgstr "Penyatuan mencari kesalahan untuk mesin disesuaikan"

msgid ""
"The Django debug page has hooks to provide detailed information when a "
"template error arises. Custom template engines can use these hooks to "
"enhance the traceback information that appears to users. The following hooks "
"are available:"
msgstr ""
"Halaman mencari kesalahan Django memiliki kait untuk menyediakan informasi "
"rinci ketika cetakan kesalahan muncul. Mesin penyesuaian cetakan dapat "
"menggunakan kait ini untuk meningkatkan lacak kembali informasi yang muncul "
"ke pengguna. Kait berikut tersedia:"

msgid "Template postmortem"
msgstr "Cetakan postmortem"

msgid ""
"The postmortem appears when :exc:`~django.template.TemplateDoesNotExist` is "
"raised. It lists the template engines and loaders that were used when trying "
"to find a given template. For example, if two Django engines are configured, "
"the postmortem will appear like:"
msgstr ""

msgid ""
"Custom engines can populate the postmortem by passing the ``backend`` and "
"``tried`` arguments when raising :exc:`~django.template."
"TemplateDoesNotExist`. Backends that use the postmortem :ref:`should specify "
"an origin <template-origin-api>` on the template object."
msgstr ""

msgid "Contextual line information"
msgstr "Informasi baris kontekstual"

msgid ""
"If an error happens during template parsing or rendering, Django can display "
"the line the error happened on. For example:"
msgstr ""
"Jika sebuah kesalahan terjadi selama mengurai cetakan atau sedang membangun, "
"Django dapat menampilkan baris dari kesalahan yang terjadi. Sebagai contoh:"

msgid ""
"Custom engines can populate this information by setting a ``template_debug`` "
"attribute on exceptions raised during parsing and rendering. This attribute "
"is a :class:`dict` with the following values:"
msgstr ""
"Mesin penyesuaian dapat mengumpulkan informasi ini dengan mengatur atribut "
"``template_debug`` pada pengecualian dimunculkan selama mengurai dan "
"membangun. Atribut ini adalah :class:`dict` dengan nilai berikut:"

msgid "``'name'``: The name of the template in which the exception occurred."
msgstr "``'name'``: Nama dari cetakan dimana pengecualian muncul."

msgid "``'message'``: The exception message."
msgstr "``'message'``: Pesan pengecualian."

msgid ""
"``'source_lines'``: The lines before, after, and including the line the "
"exception occurred on. This is for context, so it shouldn't contain more "
"than 20 lines or so."
msgstr ""
"``'source_lines'``: Baris sebelum, sesudah, dan termasuk baris pengecualian "
"yang muncul. Ini untuk konteks, jadi itu jangan mengandung lebih dari 20 "
"baris atau lebih."

msgid "``'line'``: The line number on which the exception occurred."
msgstr "``'line'``: Baris angka dimana pengecualian muncul."

msgid ""
"``'before'``: The content on the error line before the token that raised the "
"error."
msgstr ""
"``'before'``: Isi pada baris kesalahan sebelum token yang memunculkan "
"kesalahan."

msgid "``'during'``: The token that raised the error."
msgstr "``'during'``: Token yang memunculkan kesalahan."

msgid ""
"``'after'``: The content on the error line after the token that raised the "
"error."
msgstr ""
"``'after'``: Isi pada baris kesalahan setelah token yang memunculkan "
"kesalahan."

msgid "``'total'``: The number of lines in ``source_lines``."
msgstr "``'total'``: Jumlah baris dalam ``source_lines``."

msgid "``'top'``: The line number where ``source_lines`` starts."
msgstr "``'top'``: Baris angka dimana ``source_lines`` mulai."

msgid "``'bottom'``: The line number where ``source_lines`` ends."
msgstr "``'bottom'``: Baris angka dimana ``source_lines`` berakhir."

msgid "Given the above template error, ``template_debug`` would look like::"
msgstr ""
"Diberikan cetakan kesalahan diatas, ``template_debug`` akan berupa seperti::"

msgid "Origin API and 3rd-party integration"
msgstr "API asli dan penggabungan pihak-ketiga"

msgid ""
"Django templates have an :class:`~django.template.base.Origin` object "
"available through the ``template.origin`` attribute. This enables debug "
"information to be displayed in the :ref:`template postmortem <template-"
"postmortem>`, as well as in 3rd-party libraries, like the :pypi:`Django "
"Debug Toolbar <django-debug-toolbar>`."
msgstr ""

msgid ""
"Custom engines can provide their own ``template.origin`` information by "
"creating an object that specifies the following attributes:"
msgstr ""
"Mesin disesuaikan dapat menyediakan informasi ``template.origin`` milik "
"mereka sendiri dengan membuat sebuah obyek yang menentukan atribut berikut:"

msgid "``'name'``: The full path to the template."
msgstr "``'name'``: Jalur penih pada cetakan."

msgid ""
"``'template_name'``: The relative path to the template as passed into the "
"template loading methods."
msgstr ""
"``'template_name'``: Jalur relatif ke cetakan ketika dilewatkan kedalam "
"metode memuat cetakan."

msgid ""
"``'loader_name'``: An optional string identifying the function or class used "
"to load the template, e.g. ``django.template.loaders.filesystem.Loader``."
msgstr ""
"``'loader_name'``: Sebuah string pilihan mencirikan fungsi atau kelas "
"digunakan untuk memuat cetakan misalnya ``django.template.loaders.filesystem."
"Loader``."

msgid "How to create custom template tags and filters"
msgstr "Bagaimana membuat cetakan etiket dan saringan disesuaikan"

msgid ""
"Django's template language comes with a wide variety of :doc:`built-in tags "
"and filters </ref/templates/builtins>` designed to address the presentation "
"logic needs of your application. Nevertheless, you may find yourself needing "
"functionality that is not covered by the core set of template primitives. "
"You can extend the template engine by defining custom tags and filters using "
"Python, and then make them available to your templates using the :ttag:`{% "
"load %}<load>` tag."
msgstr ""
"Cetakan bahasa Django datang dengan beragam luas dari :doc:`built-in tags "
"and filters </ref/templates/builtins>` dirancang untuk megnalamatkan "
"kebutuhan pembawaan logis dari aplikasi anda. Namun, anda mungkin menemukan "
"diri anda sendiri membutuhkan fungsi yang tidak dicakupi oleh inti kumpulan "
"dari cetakan primitif. Anda dapat memperpanjang cetakan mesin dengan "
"menentukan penyesuaian etiket dan penyaring menggunakan Python, dan membuat "
"mereka tersedua pada cetakan anda menggunakan etiket :ttag:`{% load %}"
"<load>`."

msgid "Code layout"
msgstr "Tata letak kode"

msgid ""
"The most common place to specify custom template tags and filters is inside "
"a Django app. If they relate to an existing app, it makes sense to bundle "
"them there; otherwise, they can be added to a new app. When a Django app is "
"added to :setting:`INSTALLED_APPS`, any tags it defines in the conventional "
"location described below are automatically made available to load within "
"templates."
msgstr ""
"Tempat paling umum untuk menentukan cetakan etiket dan penyaring adalah "
"didalam aplikasi Django. Jika mereka terhubung pada aplikasi yang ada, dia "
"masuk akal untuk menggabungkan mereka; kalau tidak, mereka dapat ditambahkan "
"ke aplikasi baru. Ketika aplikasi Django ditambahkan ke :setting:"
"`INSTALLED_APPS`, etiket apapun dia tentukan dalam tempat biasa dibawah "
"otomatis dibuat tersedia untuk dimuat dengan cetakan."

msgid ""
"The app should contain a ``templatetags`` directory, at the same level as "
"``models.py``, ``views.py``, etc. If this doesn't already exist, create it - "
"don't forget the ``__init__.py`` file to ensure the directory is treated as "
"a Python package."
msgstr ""
"Aplikasi harus mengandung sebuah direktori ``templatetags``, pada tingkatan "
"sama seperti ``models.py``, ``views.py``, dll. Jika ini tidak ada, buat dia "
"- jangan lupakan berkas ``__init__.py`` untuk memastikan direktori "
"diperlakukan sebagai paket Python."

msgid "Development server won't automatically restart"
msgstr "Peladen pengembangan tidak akan otomatis nyala kembali"

msgid ""
"After adding the ``templatetags``  module, you will need to restart your "
"server before you can use the tags or filters in templates."
msgstr ""
"Setelah menambahkan modul  ``templatetags``, anda akan butuh memulai kembali "
"peladen anda sebelum anda dapat menggunakan etiket atau penyaring dalam "
"cetakan."

msgid ""
"Your custom tags and filters will live in a module inside the "
"``templatetags`` directory. The name of the module file is the name you'll "
"use to load the tags later, so be careful to pick a name that won't clash "
"with custom tags and filters in another app."
msgstr ""
"Penyesuaian etiket dan penyaring anda akan berada dalam sebuah modul didalam "
"direktori ``templatetags``. Nama dari berkas modul adalah nama anda akan "
"gunakan untuk memuat etiket kemudian, jadi berhati-hatilah untuk mengambil "
"sebuah nama yang tidak akan bentrok dengan penyesuaian etiket dan penyaring "
"di aplikasi lain."

msgid ""
"For example, if your custom tags/filters are in a file called ``poll_extras."
"py``, your app layout might look like this:"
msgstr ""

msgid "And in your template you would use the following:"
msgstr "Dan di cetakan anda, anda akan menggunakan berikut:"

msgid ""
"The app that contains the custom tags must be in :setting:`INSTALLED_APPS` "
"in order for the :ttag:`{% load %}<load>` tag to work. This is a security "
"feature: It allows you to host Python code for many template libraries on a "
"single host machine without enabling access to all of them for every Django "
"installation."
msgstr ""
"Aplikasi yang mengandung penyesuaian etiket harus berada dalam :setting:"
"`INSTALLED_APPS` agar etiket :ttag:`{% load %}<load>` bekerja. Ini adalah "
"fitur keamanan: Dia mengizinkan anda untuk menempatkan kode Python untuk "
"banyak cetakan pustaka pada sebuah mesin rumah tunggal tanpa mengadakan "
"akses ke semua dari mereka untuk setiap pemasangan Django."

msgid ""
"There's no limit on how many modules you put in the ``templatetags`` "
"package. Just keep in mind that a :ttag:`{% load %}<load>` statement will "
"load tags/filters for the given Python module name, not the name of the app."
msgstr ""
"Tidak ada batasan pada bagaimana banyak modul anda taruh dalam paket "
"``templatetags``. Hanya perlu diingat bahwa sebuah pernyataan :ttag:`{% load "
"%}<load>` akan memuatetiket/penyaring untuk nama modul Python yang "
"diberikan, bukan nama dari aplikasi."

msgid ""
"To be a valid tag library, the module must contain a module-level variable "
"named ``register`` that is a ``template.Library`` instance, in which all the "
"tags and filters are registered. So, near the top of your module, put the "
"following::"
msgstr ""
"Untuk menjadi pustaka sah, modul harus mengandung sebuah variabel tingkat-"
"modul yang dinamai ``register`` yaitu sebuah instance ``template.Library``, "
"dimana semua etiket dan penyaring didaftarkan. Jadi dekat diatas modul anda, "
"taruh berikut:"

msgid ""
"Alternatively, template tag modules can be registered through the "
"``'libraries'`` argument to :class:`~django.template.backends.django."
"DjangoTemplates`. This is useful if you want to use a different label from "
"the template tag module name when loading template tags. It also enables you "
"to register tags without installing an application."
msgstr ""
"Kalau tidak, cetakan modul etiket dapat didaftarkan melalui argumen "
"``'libraries'`` ke :class:`~django.template.backends.django."
"DjangoTemplates`. Ini berguna jika anda ingin menggunakan label berbeda dari "
"nama cetakan modul etiket ketika memuat cetakan etiket. Dia juga mengadakan "
"anda untuk mendaftar etiket tanpa memasang sebuah aplikasi."

msgid "Behind the scenes"
msgstr "Dibalik layar"

msgid ""
"For a ton of examples, read the source code for Django's default filters and "
"tags. They're in :source:`django/template/defaultfilters.py` and :source:"
"`django/template/defaulttags.py`, respectively."
msgstr ""
"Untuk contoh berton-ton, baca kode sumber untuk etiket dan saringan awalan "
"Django. Mereka ada di :source:`django/template/defaultfilters.py` and :"
"source:`django/template/defaulttags.py`, masing-masing."

msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr "Untuk informasi lebih pada etiket :ttag:`load`, baca dokumentasinya."

msgid "Writing custom template filters"
msgstr "Menulis saringan cetakan penyesuaian"

msgid "Custom filters are Python functions that take one or two arguments:"
msgstr ""
"Penyaring penyesuaian adalah fungsi Python yang mengambil satu atau dua "
"argumen:"

msgid "The value of the variable (input) -- not necessarily a string."
msgstr "Nilai dari variabel (masukan) -- tidak perlu deretan karakter."

msgid ""
"The value of the argument -- this can have a default value, or be left out "
"altogether."
msgstr ""
"Nilai dari argumen -- ini dapat mempunyai nilai awal, atau ditinggalkan sama "
"sekali."

msgid ""
"For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` "
"would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""
"Sebagai contoh, dalam saringan ``{{ var|foo:\"bar\" }}``, the filter ``foo`` "
"akan dilewatkan variabel ``var`` dan argumen ``''bar''``."

msgid ""
"Since the template language doesn't provide exception handling, any "
"exception raised from a template filter will be exposed as a server error. "
"Thus, filter functions should avoid raising exceptions if there is a "
"reasonable fallback value to return. In case of input that represents a "
"clear bug in a template, raising an exception may still be better than "
"silent failure which hides the bug."
msgstr ""
"Sejak cetakan bahasa tidak menyediakan penanganan pengecualian, setiap "
"pengecualian yang muncul dari sebuah cetakan saringan akan tidak terlindungi "
"sebagai sebuah kesalahan peladen. Dengan demikian, fungsi penyaring harus "
"menghindari memunculkan pengecualian jika ada alasan nilai mundur untuk "
"kembali. Dalam kasus dari masukan yang mewakili kesalahan jelas dalam sebuah "
"cetakan, menampilkan pencegualian mungkin masih lebih baik daripada "
"kegagalan diam yang menyembunyikan kesalahan."

msgid "Here's an example filter definition::"
msgstr "Ini adalah sebuah contoh pengertian saringan ::"

msgid "And here's an example of how that filter would be used:"
msgstr "Dan ini adalah sebuah contoh bagaimana saringan itu akan digunakan:"

msgid ""
"Most filters don't take arguments. In this case, leave the argument out of "
"your function::"
msgstr ""
"Kebanyakan penyaring tidak mengambil argumen. Dalam kasus ini, tinggalkan "
"argumen dari fungsi anda::"

msgid "Registering custom filters"
msgstr "Mendaftarkan saringan penyesuaian"

msgid ""
"Once you've written your filter definition, you need to register it with "
"your ``Library`` instance, to make it available to Django's template "
"language::"
msgstr ""
"Sekali anda telah menulis arti saringan anda, anda butuh mendaftarkannya "
"dengan instance ``Library`` anda, untuk membuatnya tersedia pada bahasa "
"cetakan Django::"

msgid "The ``Library.filter()`` method takes two arguments:"
msgstr "Cara ``Library.filter()`` mengambil dua argumen:"

msgid "The name of the filter -- a string."
msgstr "Nama dari saringan -- sebuah deretan karakter."

msgid ""
"The compilation function -- a Python function (not the name of the function "
"as a string)."
msgstr ""
"Fungsi himpunan -- Sebuah fungsi Python (bukan nama fungsi sebagai deretan "
"karakter)."

msgid "You can use ``register.filter()`` as a decorator instead::"
msgstr "Anda dapat menggunakan ``register.filter()`` sebagai penghias::"

msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the filter name."
msgstr ""
"Jika anda tidak mengubah argumen ``name``, seperti di contoh kedua di atas, "
"Django akan menggunakan nama fungsi sebagai nama filter."

msgid ""
"Finally, ``register.filter()`` also accepts three keyword arguments, "
"``is_safe``, ``needs_autoescape``, and ``expects_localtime``. These "
"arguments are described in :ref:`filters and auto-escaping <filters-auto-"
"escaping>` and :ref:`filters and time zones <filters-timezones>` below."
msgstr ""
"Akhirnya, ``register.filter()`` juga menerima tiga argumen katakunci, "
"``is_safe``, ``needs_autoescape``, dan ``expects_localtime``. Argumen ini "
"digambarkan dalam :ref:`penyaring dan pelolosan otomatis <filters-auto-"
"escaping>` dan :ref:`penyaring dan zona waktu <filters-timezones>` dibawah."

msgid "Template filters that expect strings"
msgstr "Cetakan penyaring yang mengharapkan deretan karakter"

msgid ""
"If you're writing a template filter that only expects a string as the first "
"argument, you should use the decorator ``stringfilter``. This will convert "
"an object to its string value before being passed to your function::"
msgstr ""
"Jika anda sedang menulis sebuah cetakan penyaring yang hanya menerima sebuah "
"deretan karakter sebagai argumen pertama, anda harus menggunakan decorator "
"``stringfilter``. Ini akan merubah sebuah obyek ke nilai deretan karakternya "
"sebelum dilewatkan ke fungsi anda::"

msgid ""
"This way, you'll be able to pass, say, an integer to this filter, and it "
"won't cause an ``AttributeError`` (because integers don't have ``lower()`` "
"methods)."
msgstr ""
"Jalan ini, anda akan dapat melewatkan, katakan, sebuah integer ke penyaring "
"ini, dan dia tidak menyebabkan sebuah ``AttributeError`` (karena integer "
"tidak mempunyai cara ``lower()``)."

msgid "Filters and auto-escaping"
msgstr "Penyaring dan pelolosan otomatis"

msgid ""
"When writing a custom filter, give some thought to how the filter will "
"interact with Django's auto-escaping behavior. Note that two types of "
"strings can be passed around inside the template code:"
msgstr ""
"Ketika menulis penyesuaian penyaring, berikan beberapa pemikiran bagaimana "
"penyaring akan berinteraksi dengan perilaku pelolosan-otomatis Django. Catat "
"bahwa dua jenis dari string dapat dilewatkan didalam sekitar kode cetakan:"

msgid ""
"**Raw strings** are the native Python strings. On output, they're escaped if "
"auto-escaping is in effect and presented unchanged, otherwise."
msgstr ""
"**Raw strings** adalah string Python asli. Pada keluaran, mereka diloloskan "
"jika pelolosan-otomatis dalam pengaruh dan dihadirkan tidak berubah, "
"sebaliknya."

msgid ""
"**Safe strings** are strings that have been marked safe from further "
"escaping at output time. Any necessary escaping has already been done. "
"They're commonly used for output that contains raw HTML that is intended to "
"be interpreted as-is on the client side."
msgstr ""
"**Safe strings** adalah deretan karakter yang telah ditandai aman dari "
"pelolosan lanjut pada waktu keluar. Apa saja yang diperlukan pelolosan telah "
"dilakukan. Mereka umumnya digunakan untuk keluaran yang mengandung HTML "
"mentah yang akan di ditafsirkan apa adanya pada sisi klien."

msgid ""
"Internally, these strings are of type :class:`~django.utils.safestring."
"SafeString`. You can test for them using code like::"
msgstr ""
"Secara internal, string ini adalah jenis :class:`~django.utils.safestring."
"SafeString`. Anda dapat mencoba mereka menggunakan kode seperti::"

msgid "Template filter code falls into one of two situations:"
msgstr "Kode cetakan penyaring gagal kedalam satu dari dua keadaan:"

msgid ""
"Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, "
"``'``, ``\"`` or ``&``) into the result that were not already present. In "
"this case, you can let Django take care of all the auto-escaping handling "
"for you. All you need to do is set the ``is_safe`` flag to ``True`` when you "
"register your filter function, like so::"
msgstr ""
"Penyaring anda tidak memperkenalkan salah satu karakter tidak aman (``<``, "
"``>``, ``'``, ``\"`` atau ``&``) kedalam hasil yang tidak hadir. Dalam kasus "
"ini, anda dapat membiarkan Django mengambil semua penanganan pelolosan "
"otomatis untuk anda. Semua anda butuh untuk dilakukan adalah menyetel "
"bendera ``is_safe`` ke ``True`` ketika anda mendaftar fungsi penyaringan, "
"seperti begitu:"

msgid ""
"This flag tells Django that if a \"safe\" string is passed into your filter, "
"the result will still be \"safe\" and if a non-safe string is passed in, "
"Django will automatically escape it, if necessary."
msgstr ""
"Bendera ini memberitahu Django bahwa jika sebuah deretan karakter \"safe\" "
"dilewatkan kedalam penyaring anda, hasil akan masih menjadi \"safe\" dan "
"jika sebuah deretan karakter tidak aman dilewatkan, Django akan otomatis "
"meloloskannya, jika diperlukan."

msgid ""
"You can think of this as meaning \"this filter is safe -- it doesn't "
"introduce any possibility of unsafe HTML.\""
msgstr ""
"Anda dapat berpikir dari ini sebagai berarti \"penyaring ini aman -- dia "
"tidak memperkenalkan kemungkinan apapun dari HTML tidak aman.\""

msgid ""
"The reason ``is_safe`` is necessary is because there are plenty of normal "
"string operations that will turn a ``SafeData`` object back into a normal "
"``str`` object and, rather than try to catch them all, which would be very "
"difficult, Django repairs the damage after the filter has completed."
msgstr ""
"Alasan ``is_safe`` perlu adalah karena ada banyak tindakan-tindakan string "
"biasa yang akan merubah sebuah obyek ``SafeData`` kembali ke obyek ``str`` "
"biasa dan, daripada mencoba menangkap mereka semua, yang akan sangat sulit, "
"Django memperbaiki kerusakan setelah penyaring lengkap."

msgid ""
"For example, suppose you have a filter that adds the string ``xx`` to the "
"end of any input. Since this introduces no dangerous HTML characters to the "
"result (aside from any that were already present), you should mark your "
"filter with ``is_safe``::"
msgstr ""
"Sebagi contoh, andaikan anda mempunyai sebuah penyaring yang menambahkan "
"deretan karakter ``xx`` ke akhir dari masukan. Sejak ini diperkenalkan "
"karakter HTML tidak berbahaya ke hasil (selain dari apapun itu sudah hadir), "
"anda harus menandai penyaring anda dengan ``is_safe``::"

msgid ""
"When this filter is used in a template where auto-escaping is enabled, "
"Django will escape the output whenever the input is not already marked as "
"\"safe\"."
msgstr ""
"Ketika penyaring ini digunakan dalam sebuah cetakan dimana pelolosan "
"otomatis diadakan, Django akan meloloskan keluaran ketika masukan belum "
"ditandai sebagai \"safe\"."

msgid ""
"By default, ``is_safe`` is ``False``, and you can omit it from any filters "
"where it isn't required."
msgstr ""
"Secara awalan, ``is_safe`` adalah ``False``, dan anda dapat menghilangkannya "
"dari saringan dimana dia tidak wajib."

msgid ""
"Be careful when deciding if your filter really does leave safe strings as "
"safe. If you're *removing* characters, you might inadvertently leave "
"unbalanced HTML tags or entities in the result. For example, removing a "
"``>`` from the input might turn ``<a>`` into ``<a``, which would need to be "
"escaped on output to avoid causing problems. Similarly, removing a semicolon "
"(``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity "
"and thus needs further escaping. Most cases won't be nearly this tricky, but "
"keep an eye out for any problems like that when reviewing your code."
msgstr ""
"Hati-hati ketika memutuskan jika penyaring anda sangat membiarkan deretan "
"karakter aman sebagai safe. Jika anda sedang *memidnahkan* karakter, anda "
"mungkin secara tidak sengaja membiarkan etiket HTML tidak seimbang atau "
"kesatuan dalam hasil. Sebagai contoh, memindahkan sebuah ``>`` dari masukan "
"mungkin mengubah ``<a>`` menjadi ``<a``, yang akan butuh diloloskan pada "
"keluaran untuk menghindari masalah. Demikian pula, memindahkan titik koma "
"(``;``) dapat merubah ``&amp;`` into ``&amp``, yang tidak lagi kesatuan sah "
"dan demikian butuh pelolosan. Kebanyakan kasus tidak dekat dengan trik ini, "
"tetapi jaga mata anda untuk masalah apapun seperti itu ketika meninjau kode "
"anda."

msgid ""
"Marking a filter ``is_safe`` will coerce the filter's return value to a "
"string.  If your filter should return a boolean or other non-string value, "
"marking it ``is_safe`` will probably have unintended consequences (such as "
"converting a boolean False to the string 'False')."
msgstr ""
"Menandai sebuah penyaring ``is_safe`` akan memaksa nilai kembalian penyaring "
"menjadi deretan karakter. Jika penyaring anda harus mengembalikan sebuah "
"boolean atau nilai bukan deretan karakter, tandai dia ``is_safe`` akan "
"mungkin mempunyai konsekuensi yang tidak diinginkan (seperti merubah boolean "
"False menjadi deretan karakter 'False')."

msgid ""
"Alternatively, your filter code can manually take care of any necessary "
"escaping. This is necessary when you're introducing new HTML markup into the "
"result. You want to mark the output as safe from further escaping so that "
"your HTML markup isn't escaped further, so you'll need to handle the input "
"yourself."
msgstr ""
"Kalau tidak, kode penyaring anda dapat secara manual merawat pelolosan "
"apapun yang dibutuhkan. Ini adalah penting ketika anda sedang memperkenalkan "
"markah HTML baru kedalam hasil. Anda ingin menandai keluaran sebagai aman "
"dari pelolosan lebih lanjut sehingga markah HTML anda tidak diloloskan lebih "
"lanjut, jadi anda akan butuh menangani masukan diri anda sendiri."

msgid ""
"To mark the output as a safe string, use :func:`django.utils.safestring."
"mark_safe`."
msgstr ""
"Untuk menandai keluaran sebagai deretan karakter aman, gunakan :func:`django."
"utils.safestring.mark_safe`."

msgid ""
"Be careful, though. You need to do more than just mark the output as safe. "
"You need to ensure it really *is* safe, and what you do depends on whether "
"auto-escaping is in effect. The idea is to write filters that can operate in "
"templates where auto-escaping is either on or off in order to make things "
"easier for your template authors."
msgstr ""
"Berhati-hatilah, meskipun. Anda butuh melakukan lagi daripada hanya menandai "
"keluaran sebagai aman. Anda butuh memastikan dia sangat *adalah* aman, dan "
"apa yang anda lakukan tergantung pada apakah pelolosan otomatis berpengaruh. "
"Idenya adalah menulis penyaring yang dapat berjalan dalam cetakan dimana "
"pelolosan otomatis salah satunya nyala atau mati agar membuat hal-hal "
"semakin mudah untuk cetakan penulis anda."

msgid ""
"In order for your filter to know the current auto-escaping state, set the "
"``needs_autoescape`` flag to ``True`` when you register your filter "
"function. (If you don't specify this flag, it defaults to ``False``). This "
"flag tells Django that your filter function wants to be passed an extra "
"keyword argument, called ``autoescape``, that is ``True`` if auto-escaping "
"is in effect and ``False`` otherwise. It is recommended to set the default "
"of the ``autoescape`` parameter to ``True``, so that if you call the "
"function from Python code it will have escaping enabled by default."
msgstr ""
"Agar penyaring anda mengetahui keadaan pelolosan otomatis saat ini, setel "
"bendera ``needs_autoescape`` ke ``True`` ketika anda mendaftar fungsi "
"penyaring anda. (Jika anda tidak menentukan bendera ini, dia awalnya adalah "
"``False``). Bendera ini mengatakan Django bahwa fungsi penyaring anda ingin "
"dilewatkan sebuah argumen katakunci tambahan, dipanggil ``autoescape``, "
"yaitu ``True`` jika pelolosan otomatis dalam efek dan ``False`` sebaliknya. "
"Sangat dianjurkan untuk menyetel parameter ``autoescape`` ke ``True``, "
"sehingga jika anda memanggil fungsi dari kode Python dia akan mempunyai "
"pelolosan diadakan secara awal."

msgid ""
"For example, let's write a filter that emphasizes the first character of a "
"string::"
msgstr ""
"Sebagai contoh, mari kita menulis penyaring yang menekankan karakter pertama "
"dari sebuah deretan karakter::"

msgid ""
"The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean "
"that our function will know whether automatic escaping is in effect when the "
"filter is called. We use ``autoescape`` to decide whether the input data "
"needs to be passed through ``django.utils.html.conditional_escape`` or not. "
"(In the latter case, we use the identity function as the \"escape\" "
"function.) The ``conditional_escape()`` function is like ``escape()`` except "
"it only escapes input that is **not** a ``SafeData`` instance. If a "
"``SafeData`` instance is passed to ``conditional_escape()``, the data is "
"returned unchanged."
msgstr ""
"Bendera ``needs_autoescape`` dan argumen kata kunci ``autoescape`` berarti "
"bahwa fungsi kami akan mengetahui apakah pelolosan otomatis berpengaruh "
"ketika saringan dipanggil. Kami menggunakan ``autoescape`` untuk memutuskan "
"apakah data masukan butuh dilewatkan melalui ``django.utils.html."
"conditional_escape`` atau tidak. (Dalam kasus terakhir, kami menggunakan "
"fungsi penciri sebagai fungsi \"escape\".) Fungsi ``conditional_escape()`` "
"seperti ``escape()`` kecuali itu hanya meloloskan masukan yang **not**  "
"instance ``SafeData``. Jika instance ``SafeData`` dilewatkan ke "
"``conditional_escape()``, data dikembalikan tidak berubah."

msgid ""
"Finally, in the above example, we remember to mark the result as safe so "
"that our HTML is inserted directly into the template without further "
"escaping."
msgstr ""
"Akhirnya, dalam contoh diatas, kami ingat untuk menandai hasil sebagai aman "
"sehingga HTML kami dimasukkan langsung kedalam cetakan tanpa pelolosan "
"lanjut."

msgid ""
"There's no need to worry about the ``is_safe`` flag in this case (although "
"including it wouldn't hurt anything). Whenever you manually handle the auto-"
"escaping issues and return a safe string, the ``is_safe`` flag won't change "
"anything either way."
msgstr ""
"Tidak perlu khawatir tentang bendera ``is_safe`` dalam kasus ini (meskipun "
"termasuknya tidak akaan melukai apapun). Kapanpun anda secara manual "
"menangani masalah pelolosan otomatis dan mengembalikan sebuah deretan "
"karakter aman, bendera ``is_safe`` tidak merubah apapun."

msgid "Avoiding XSS vulnerabilities when reusing built-in filters"
msgstr "Menghindari kerentanan XSS ketika menggunakan ulang filter bawaan"

msgid ""
"Django's built-in filters have ``autoescape=True`` by default in order to "
"get the proper autoescaping behavior and avoid a cross-site script "
"vulnerability."
msgstr ""
"Penyaring siap pakai Django mempunyai ``autoescape=True`` secara awal agar "
"mendapatkan kebiasaan pelolosan otomatis yang benar dan menghindari "
"kerentanan cross-site script."

msgid ""
"In older versions of Django, be careful when reusing Django's built-in "
"filters as ``autoescape`` defaults to ``None``. You'll need to pass "
"``autoescape=True`` to get autoescaping."
msgstr ""
"Dalam versi lama Django, berhati-hatilah ketika menggunakan penyaring pasang-"
"tetap Django sebagai ``autoescape`` nilai awal ke ``None``. Anda akan butuh "
"melewatkan ``autoescape=True`` untuk mendapatkan pelolosan otomatis."

msgid ""
"For example, if you wanted to write a custom filter called "
"``urlize_and_linebreaks`` that combined the :tfilter:`urlize` and :tfilter:"
"`linebreaksbr` filters, the filter would look like::"
msgstr ""
"Sebagai contoh, jika anda ingin menulis penyesuaian penyaring dipanggil "
"``urlize_and_linebreaks`` yang menggabungkan penyaring :tfilter:`urlize` "
"dan :tfilter:`linebreaksbr`, penyaring akan kelihatan seperti::"

msgid "Then:"
msgstr "Kemudian:"

msgid "would be equivalent to:"
msgstr "akan setara dengan:"

msgid "Filters and time zones"
msgstr "Saringan dan zona waktu"

msgid ""
"If you write a custom filter that operates on :class:`~datetime.datetime` "
"objects, you'll usually register it with the ``expects_localtime`` flag set "
"to ``True``::"
msgstr ""
"Jika anda menulis sebuah penyesuaian penyaring yang dijalankan pada obyek :"
"class:`~datetime.datetime`, anda akan biasanya mendaftarkannya dengan "
"bendera ``expects_localtime`` disetel ke ``True``::"

msgid ""
"When this flag is set, if the first argument to your filter is a time zone "
"aware datetime, Django will convert it to the current time zone before "
"passing it to your filter when appropriate, according to :ref:`rules for "
"time zones conversions in templates <time-zones-in-templates>`."
msgstr ""
"Ketika bendera ini disetel, jika argumen pertama pada penyaring anda adalah "
"zona waktu perhatikan datetime, Django akan merubahnya ke zona waktu saat "
"ini sebelum melewatkannya ke penyaring anda ketika sesuai, menurut pada :ref:"
"`aturan untuk perubahan zona waktu dalam cetakan <time-zones-in-templates>`."

msgid "Writing custom template tags"
msgstr "Menulis etiket cetakan penyesuaian"

msgid ""
"Tags are more complex than filters, because tags can do anything. Django "
"provides a number of shortcuts that make writing most types of tags easier. "
"First we'll explore those shortcuts, then explain how to write a tag from "
"scratch for those cases when the shortcuts aren't powerful enough."
msgstr ""
"Etiket lebih rumit daripada penyaring, karena etiket dapat melakukan apapun. "
"Django menyediakan sejumlah jalan pintas yang membuat penulisan kebanyakan "
"jenis etiket lebih mudah. Pertama kami akan menjelajahi jalan pintas "
"tersebut, kemudian menjelaskan bagaimana menulis sebuah etiket dari goresan "
"untuk kasus-kasus tersebut ketika jalan pintas tidak cukup kuat."

msgid "Simple tags"
msgstr "Etiket sederhana"

msgid ""
"Many template tags take a number of arguments -- strings or template "
"variables -- and return a result after doing some processing based solely on "
"the input arguments and some external information. For example, a "
"``current_time`` tag might accept a format string and return the time as a "
"string formatted accordingly."
msgstr ""
"Banyak cetakan etiket mengambil sejumlah argumen -- deretan karakter atau "
"cetakan variabel -- dan mengembalikan sebuah hasil setelah melakukan "
"beberapa pengolahan berdasarkan hanya pada masukan argumen dan beberapa "
"informasi luar. Sebagai contoh, sebuah etiket ``current_time`` mungkin "
"menerima sebuah bentuk deretan karakter dan mengembalikan waktu sebagai "
"bentuk deretan karakter."

msgid ""
"To ease the creation of these types of tags, Django provides a helper "
"function, ``simple_tag``. This function, which is a method of ``django."
"template.Library``, takes a function that accepts any number of arguments, "
"wraps it in a ``render`` function and the other necessary bits mentioned "
"above and registers it with the template system."
msgstr ""
"Untuk meringankan pembuatan dari jenis ini dari etiket, Django menyediakan "
"fungsi pembantu, ``simple_tag``. Fungsi ini, yaitu sebuah cara dari ``django."
"template.Library``, mengambil sebuah fungsi yang menerima angka apapun dari "
"argumen, membungkusnya dalam fungsi ``render`` dan bit-bit yang dibutuhkan "
"lainnya disebutkan diatas dan mendaftarkannya dengan cetakan sistem."

msgid "Our ``current_time`` function could thus be written like this::"
msgstr "Fungsi ``current_time`` kami dapat jadi ditulis seperti ini::"

msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr "Beberapa hal untuk dicatat tentang fungsi pembantu ``simple_tag``:"

msgid ""
"Checking for the required number of arguments, etc., has already been done "
"by the time our function is called, so we don't need to do that."
msgstr ""
"Memeriksa angka wajib dari argumen, dll., telah selesai dilakukan oleh waktu "
"fungsi kami dipanggil, jadi kami tidak butuh melakukan itu."

msgid ""
"The quotes around the argument (if any) have already been stripped away, so "
"we receive a plain string."
msgstr ""
"Kutipan sekitar argumen (jika ada) telah dihilangkan, jadi kami menerima "
"string polos."

msgid ""
"If the argument was a template variable, our function is passed the current "
"value of the variable, not the variable itself."
msgstr ""
"Jika argumen adalah cetakan variabel, fungsi kami dilewatkan nilai sast ini "
"dari variabel, bukan variabel itu sendiri."

msgid ""
"Unlike other tag utilities, ``simple_tag`` passes its output through :func:"
"`~django.utils.html.conditional_escape` if the template context is in "
"autoescape mode, to ensure correct HTML and protect you from XSS "
"vulnerabilities."
msgstr ""
"Tidak seperti peralatan etiket lain, ``simple_tag`` melewatkan keluarannya "
"melalui :func:`~django.utils.html.conditional_escape` jika konteks cetakan "
"dalam suasana pelolosan otomatis, untuk memastikan HTML benar dan melindungi "
"anda dari kerentanan XSS."

msgid ""
"If additional escaping is not desired, you will need to use :func:`~django."
"utils.safestring.mark_safe` if you are absolutely sure that your code does "
"not contain XSS vulnerabilities. For building small HTML snippets, use of :"
"func:`~django.utils.html.format_html` instead of ``mark_safe()`` is strongly "
"recommended."
msgstr ""
"Jika tambahan pelolosan tidak diharapkan, anda akan butuh menggunakan :func:"
"`~django.utils.safestring.mark_safe` jika anda sepenuhnya yakin bahwa kode "
"anda tidak mengandung kerentanan XSS. Untuk membangun potongan kecil HTML, "
"gunakan :func:`~django.utils.html.format_html` daripada ``mark_safe()`` "
"sangat kuat dianjurkan."

msgid ""
"If your template tag needs to access the current context, you can use the "
"``takes_context`` argument when registering your tag::"
msgstr ""
"Jika etiket cetakan anda butuh untuk mengakses konteks saat ini, anda dapat "
"menggunakan argumen ``takes_context`` ketika mendaftarkan etiket anda::"

msgid "Note that the first argument *must* be called ``context``."
msgstr "Catat bahwa argumen pertama *harus* dipanggil ``context``."

msgid ""
"For more information on how the ``takes_context`` option works, see the "
"section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""
"Untuk informasi lebih pada bagaimana pilihan ``takes_context`` bekerja, "
"lihat bagian pada :ref:`inclusion tags<howto-custom-template-tags-inclusion-"
"tags>`."

msgid "If you need to rename your tag, you can provide a custom name for it::"
msgstr ""
"Jika anda butuh menamai kembali etiket anda, anda dapat menyediakan nama "
"penyesuaian untuknya::"

msgid ""
"``simple_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""
"Fungsi ``simple_tag`` mungkin menerima angka apapun dari argumen terkait "
"atau kata kunci. Sebagai contoh::"

msgid ""
"Then in the template any number of arguments, separated by spaces, may be "
"passed to the template tag. Like in Python, the values for keyword arguments "
"are set using the equal sign (\"``=``\") and must be provided after the "
"positional arguments. For example:"
msgstr ""
"Kemudian dalam cetakan angka apapun dari argumen, dipisahkan oleh spasi, "
"mungkin dilewatkan ke cetakan etiket. Seperti dalam Python, nilai untuk "
"argumen katakunci disetel menggunakan tanda sama dengan (\"``=``\") dan "
"harus disediakan setelah penempatan argumen. Sebagai contoh:"

msgid ""
"It's possible to store the tag results in a template variable rather than "
"directly outputting it. This is done by using the ``as`` argument followed "
"by the variable name. Doing so enables you to output the content yourself "
"where you see fit:"
msgstr ""
"Itu dimungkinkan untuk menyimpan hasil etiket dalam sebuah cetakan variabel "
"daripada secara langsung mengeluarkannya. Ini dilakukan dengan menggunakan "
"argumen ``as`` diikuti oleh nama variabel. Melakukannya mengadakan anda "
"untuk mengeluarkan isi diri anda dimana anda melihatnya cocok:"

msgid "Inclusion tags"
msgstr "Penyertaaan etiket"

msgid ""
"Another common type of template tag is the type that displays some data by "
"rendering *another* template. For example, Django's admin interface uses "
"custom template tags to display the buttons along the bottom of the \"add/"
"change\" form pages. Those buttons always look the same, but the link "
"targets change depending on the object being edited -- so they're a perfect "
"case for using a small template that is filled with details from the current "
"object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""
"Jenis umum lainnya dari cetakan etiket adalah jenis yang menampilkan "
"beberapa data dengan membangun cetakan *lain*. Sebagai contoh, antarmuka "
"admin Django menggunakan penyesuaian etiket cetakan untuk menampilkan tombol "
"dibawah dari halaman formulir \"add/change\". Tombol-tombol tersebut selalu "
"terlihat sama, tetapi ssaran tautan berubah tergantung pada obyek yang "
"sedang disunting -- sehingga mereka kasus sempurna untuk menggunakan cetakan "
"kecil yang diisi dengan rincian dari obyek saat ini. (Dalam kasus admin, ini "
"adalah etiket ``submit_row``.)"

msgid "These sorts of tags are called \"inclusion tags\"."
msgstr "Urutan etiket ini dipanggil \"penyertaan etiket\"."

msgid ""
"Writing inclusion tags is probably best demonstrated by example. Let's write "
"a tag that outputs a list of choices for a given ``Poll`` object, such as "
"was created in the :ref:`tutorials <creating-models>`. We'll use the tag "
"like this:"
msgstr ""
"Menulis pencatuman etiket adalah mungkin pertunjukan terbaik dengan contoh. "
"Mari kita menulis sebuah etiket yang mengeluarkan daftar pilihan untuk obyek "
"``Poll`` yang diberikan, seperti dibuat dalam :ref:`tutorial <creating-"
"models>`. Kami akan menggunakan etiket seperti ini:"

msgid "...and the output will be something like this:"
msgstr "...dan keluaran akan kelihatan seperti ini:"

msgid ""
"First, define the function that takes the argument and produces a dictionary "
"of data for the result. The important point here is we only need to return a "
"dictionary, not anything more complex. This will be used as a template "
"context for the template fragment. Example::"
msgstr ""
"Pertama, tentukan fungsi yang mengambil argumen dan menghasulkan kamus dari "
"data untuk hasil. Titik terpenting disini adalah kami hanya butuh "
"mengembalikan sebuah kamus, bukan apapun lebih rumit. Ini akan digunakan "
"sebagai konteks cetakan untuk fragmen cetakan. Contoh::"

msgid ""
"Next, create the template used to render the tag's output. This template is "
"a fixed feature of the tag: the tag writer specifies it, not the template "
"designer. Following our example, the template is very short:"
msgstr ""
"Selanjutnya, buat cetakan digunakan untuk membangun keluaran etiket. Cetakan "
"ini adalah fitur tetap etiket: penulis etiket menentukannya, bukan perancang "
"cetakan. Mengikuti contoh kami, cetakan sangat pendek:"

msgid ""
"Now, create and register the inclusion tag by calling the "
"``inclusion_tag()`` method on a ``Library`` object. Following our example, "
"if the above template is in a file called ``results.html`` in a directory "
"that's searched by the template loader, we'd register the tag like this::"
msgstr ""
"Sekarang, buat dan daftar penyertaan etiket dengan memanggil cara "
"``inclusion_tag()`` pada sebuah obyek ``Library``. Mengikuti contoh kami, "
"jika cetakan diatas dalam sebuah berkas dipanggil ``results.html`` dalam "
"sebuah direktori yang dicari oleh pemuat cetakan, kami akan mendaftar etiket "
"seperti ini::"

msgid ""
"Alternatively it is possible to register the inclusion tag using a :class:"
"`django.template.Template` instance::"
msgstr ""
"Kemungkinan lain dia memungkinkan mendaftarkan pemasukan etiket menggunakan "
"instace :class:`django.template.Template`::"

msgid "...when first creating the function."
msgstr "...ketika pertama membuat fungsi."

msgid ""
"Sometimes, your inclusion tags might require a large number of arguments, "
"making it a pain for template authors to pass in all the arguments and "
"remember their order. To solve this, Django provides a ``takes_context`` "
"option for inclusion tags. If you specify ``takes_context`` in creating a "
"template tag, the tag will have no required arguments, and the underlying "
"Python function will have one argument -- the template context as of when "
"the tag was called."
msgstr ""
"Terkadang, penyertaan etiket anda mungkin membutuhkan sejumlah besar "
"argumen, membuatnya sakit untuk cetakan penulis melewatkan semua argumen dan "
"mengingat urutan mereka. Untuk mengatasi ini, Django menyediakan sebuah "
"pilihan ``takes_context`` untuk penyertaan etiket. Jika anda menentukan "
"``takes_context`` dalam sebuah cetakan etiket, etiket tidak akan mempunyai "
"argumen wajib, dan pokok fungsi Python akan mempunyai satu argumen -- "
"konteks cetakan mulai ketika etiket dipanggil."

msgid ""
"For example, say you're writing an inclusion tag that will always be used in "
"a context that contains ``home_link`` and ``home_title`` variables that "
"point back to the main page. Here's what the Python function would look "
"like::"
msgstr ""
"Sebagai contoh, katakan anda sedang menulis sebuah penyertaan etiket yang "
"akan selalu digunakan dalam sebuah konteks yang mengandung variabel "
"``home_link`` dan ``home_title`` yang menunjuk kembali ke halaman utama. "
"Disini fungsi Python akan kelihatan seperti::"

msgid ""
"Note that the first parameter to the function *must* be called ``context``."
msgstr ""
"Catat bahwa parameter pertama pada fungsi *harus* dipanggil ``context``."

msgid ""
"In that ``register.inclusion_tag()`` line, we specified "
"``takes_context=True`` and the name of the template. Here's what the "
"template ``link.html`` might look like:"
msgstr ""
"Dalam baris ``register.inclusion_tag()`` itu, kami mencirikan "
"``takes_context=True`` dan nama dari cetakan. Ini adalah cetakan ``link."
"html`` mungkin kelihatan seperti:"

msgid ""
"Then, any time you want to use that custom tag, load its library and call it "
"without any arguments, like so:"
msgstr ""
"Lalu, kapanpun anda ingin menggunakan tag tersuai, muat pustakanya dan "
"panggil tanpa argument, seperti:"

msgid ""
"Note that when you're using ``takes_context=True``, there's no need to pass "
"arguments to the template tag. It automatically gets access to the context."
msgstr ""
"Catat bahwa ketika anda menggunakan ``takes_context=True``, tidak perlu "
"melewatkan argumen ke etiket cetakan. Dia otomatis mendapatkan akses ke "
"konteks."

msgid ""
"The ``takes_context`` parameter defaults to ``False``. When it's set to "
"``True``, the tag is passed the context object, as in this example. That's "
"the only difference between this case and the previous ``inclusion_tag`` "
"example."
msgstr ""
"Parameter ``takes_context`` awalnya adalah ``False``. Ketika disetel ke "
"``True``, etiket melewatkan obyek konteks, seperti dalam contoh ini. Itu "
"hanya oerbedaan diantara kasus ini dan contoh ``inclusion_tag`` sebelumnya."

msgid ""
"``inclusion_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""
"Fungsi ``inclusion_tag`` mungkin menerima angka apapun dari penempatan atau "
"argumen kata kunci. Sebagai contoh::"

msgid "Advanced custom template tags"
msgstr "Etiket cetakan penyesuaian tingkat lanjut"

msgid ""
"Sometimes the basic features for custom template tag creation aren't enough. "
"Don't worry, Django gives you complete access to the internals required to "
"build a template tag from the ground up."
msgstr ""
"Terkadang fitur dasar untuk pembuatan etiket cetakan penyesuaian tidak "
"cukup. Jangan khawatir, Django memberikan anda akses lengkap ke internal "
"yang diwajibkan untuk membangun sebuah etiket cetakan dari bawah ke atas."

msgid "A quick overview"
msgstr "Ikhtisar cepat"

msgid ""
"The template system works in a two-step process: compiling and rendering. To "
"define a custom template tag, you specify how the compilation works and how "
"the rendering works."
msgstr ""
"Sistem cetakan bekerja dalam dua langkah pengolahan: menyusun dan membangun. "
"Untuk menentukan etiket cetakan penyesuaian, anda menentukan bagaimana "
"penyusunan bekerja dan bagaimana pembangunan bekerja."

msgid ""
"When Django compiles a template, it splits the raw template text into "
"''nodes''. Each node is an instance of ``django.template.Node`` and has a "
"``render()`` method. A compiled template is a list of ``Node`` objects. When "
"you call ``render()`` on a compiled template object, the template calls "
"``render()`` on each ``Node`` in its node list, with the given context.  The "
"results are all concatenated together to form the output of the template."
msgstr ""
"Ketika Django menyusun cetakan, itu membagi teks cetakan mentah menjadi "
"''nodes''. Setiap node adalah instance dari ``django.template.Node`` dan "
"memiliki metode ``render()``. Cetakan tersusun adalah daftar obyek ``Node``. "
"Ketika anda memanggil ``render()`` di obyek cetakan tersusun, cetakan "
"memanggil ``render()`` pada masing-masing ``Node`` dalam daftar nodenya, "
"dengan konteks yang diberikan.  Hasil adalah semua digabungkan bersama-sama "
"untuk membentuk keluaran cetakan."

msgid ""
"Thus, to define a custom template tag, you specify how the raw template tag "
"is converted into a ``Node`` (the compilation function), and what the node's "
"``render()`` method does."
msgstr ""
"Jadi, untuk menentukan penyesuaian cetakan etiket, anda menentukan bagaimana "
"cetakan etiket mentah dirubah kedalam ``Node`` (fungsi penyusunan), dan apa "
"cara ``render()`` node lakukan."

msgid "Writing the compilation function"
msgstr "Menulis fungsi himpunan"

msgid ""
"For each template tag the template parser encounters, it calls a Python "
"function with the tag contents and the parser object itself. This function "
"is responsible for returning a ``Node`` instance based on the contents of "
"the tag."
msgstr ""
"Untuk setiap etiket cetakan pertemuan pengurai cetakan, dia memanggil fungsi "
"Python dengan isi etiket dan pengurai obyek itu sendiri. Fungsi ini "
"bertanggung jawab untuk mengembalikan sebuah contoh ``Node`` berdasarkan "
"pada isi dari etiket."

msgid ""
"For example, let's write a full implementation of our template tag, ``{% "
"current_time %}``, that displays the current date/time, formatted according "
"to a parameter given in the tag, in :func:`~time.strftime` syntax. It's a "
"good idea to decide the tag syntax before anything else. In our case, let's "
"say the tag should be used like this:"
msgstr ""
"Sebagai contoh, mari kita menulis penerapan penuh dari etiket cetakan kami, "
"``{% current_time %}``, yang menampilkan tanggal/waktu saat ini, dibentuk "
"menurut parameter yang diberikan pada etiket, di sintaks :func:`~time."
"strftime`. Adalah ide bagus untuk memutuskan sintak etiket sebelum yang "
"lainnya. Pada kasus kamu, katakanlah etiket harus digunakan seperti ini:"

msgid ""
"The parser for this function should grab the parameter and create a ``Node`` "
"object::"
msgstr ""
"Pengurai untuk fungsi ini harus mengambil parameter dan membuat obyek "
"``Node``::"

msgid "Notes:"
msgstr "Catatan:"

msgid ""
"``parser`` is the template parser object. We don't need it in this example."
msgstr ""
"`parser`` adalah obyek pengurai cetakan. Kami tidak membutuhkannya dalam "
"contoh ini."

msgid ""
"``token.contents`` is a string of the raw contents of the tag. In our "
"example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""
"``token.contents`` adalah deretan karakter dari isi mentah dari etiket. "
"Dalam contoh kami, dia adalah ``'current_time \"%Y-%m-%d %I:%M %p\"'``."

msgid ""
"The ``token.split_contents()`` method separates the arguments on spaces "
"while keeping quoted strings together. The more straightforward ``token."
"contents.split()`` wouldn't be as robust, as it would naively split on *all* "
"spaces, including those within quoted strings. It's a good idea to always "
"use ``token.split_contents()``."
msgstr ""
"Cara ``token.split_contents()`` memisahkan argumen pada ruang selama menjaga "
"deretan karakter dikutip bersama. Lebih mudah ``token.contents.split()`` "
"tidak akan menjadi kuat, karena akan naif pisah pada *semua* ruang, termasuk "
"itu dalam deretan karakter dikutip. Adalah ide bagus untuk selalu "
"menggunakan ``token.split_contents()``."

msgid ""
"This function is responsible for raising ``django.template."
"TemplateSyntaxError``, with helpful messages, for any syntax error."
msgstr ""
"Fungsi ini bertanggungjawab untuk memunculkan ``django.template."
"TemplateSyntaxError``, dengan pesan membantu, untuk sintakses kesalahan "
"apapun."

msgid ""
"The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't "
"hard-code the tag's name in your error messages, because that couples the "
"tag's name to your function. ``token.contents.split()[0]`` will ''always'' "
"be the name of your tag -- even when the tag has no arguments."
msgstr ""
"Pengecualian ``TemplateSyntaxError`` menggunakan variabel ``tag_name``. "
"Jangan mengkode keraskan nama etiket dalam pesan-pesan kesalahan anda, "
"karena itu memasangkan nama etiket ke fungsi anda. ``token.contents.split()"
"[0]`` akan ''selalu'' menjadi nama dari etiket anda -- bahkan ketika etiket "
"tidak mempunyai argumen."

msgid ""
"The function returns a ``CurrentTimeNode`` with everything the node needs to "
"know about this tag. In this case, it passes the argument -- ``\"%Y-%m-%d %I:"
"%M %p\"``. The leading and trailing quotes from the template tag are removed "
"in ``format_string[1:-1]``."
msgstr ""
"Fungsi mengembalikan sebuah ``CurrentTimeNode`` dengan apapun node butuh "
"diketahui tentang etiket ini. Dalam kasus ini, itu melewatkan argumen -- "
"``\"%Y-%m-%d %I:%M %p\"``. Kutipan terkemuka dan tertinggal dari etiket "
"cetakan dipindahkan dalam ``format_string[1:-1]``."

msgid ""
"The parsing is very low-level. The Django developers have experimented with "
"writing small frameworks on top of this parsing system, using techniques "
"such as EBNF grammars, but those experiments made the template engine too "
"slow. It's low-level because that's fastest."
msgstr ""
"Penguraian adalah tingkat-rendah. Pengembang Django mempunyai percobaan "
"dengan menulis kerangka kecil diatas dari sistem penyurai ini, menggunakan "
"teknik seperti tata bahasa EBNF, tetapi percobaan tersebut membuat cetakan "
"mesin terlalu lambat. Dia adalah tingkat-rendah karena itu tercepat."

msgid "Writing the renderer"
msgstr "Menulis pembangun"

msgid ""
"The second step in writing custom tags is to define a ``Node`` subclass that "
"has a ``render()`` method."
msgstr ""
"Langkah kedua dalam menulis penyesuaian etiket adalah menentukan sebuah "
"subkelas ``Node`` yang mempunyai cara ``render()``."

msgid "Continuing the above example, we need to define ``CurrentTimeNode``::"
msgstr "Melanjutkan contoh diatas, kami butuh menentukan ``CurrentTimeNode``::"

msgid ""
"``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always "
"pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""
"``__init__()`` mendapatkan ``format_string`` dari ``do_current_time()``. "
"Selalu melewati options/parameters/arguments apapun ke ``Node`` melalui "
"``__init__()`` nya."

msgid "The ``render()`` method is where the work actually happens."
msgstr "Cara ``render()`` adalah dimana pekerjaan sebenarnya terjadi."

msgid ""
"``render()`` should generally fail silently, particularly in a production "
"environment. In some cases however, particularly if ``context.template."
"engine.debug`` is ``True``, this method may raise an exception to make "
"debugging easier. For example, several core tags raise ``django.template."
"TemplateSyntaxError`` if they receive the wrong number or type of arguments."
msgstr ""
"``render()`` harus pada umumnya gagal secara diam, khususnya dalam "
"lingkungan produksi. Dalam beberapa kasus bagaimanapun, khususnya jika "
"``context.template.engine.debug`` adalah ``True``, cara ini mungkin "
"memunculkan sebuah pengecualian untuk membuat mencari kesalahan lebih mudah. "
"Sebagai contoh, beberapa etiket inti memunculkan ``django.template."
"TemplateSyntaxError`` jika mereka menerima nomor atau jenis salah dari "
"argumen"

msgid ""
"Ultimately, this decoupling of compilation and rendering results in an "
"efficient template system, because a template can render multiple contexts "
"without having to be parsed multiple times."
msgstr ""
"Akhirnya, pemisahan ini dari hasil penyusunan dan pembangunan dalam sebuah "
"sistem cetakan efesien, karena sebuah cetakan dapat membangun banyak konteks "
"tanpa harus diuraikan banyak kali."

msgid "Auto-escaping considerations"
msgstr "Pertimbangan pelolosan otomatis"

msgid ""
"The output from template tags is **not** automatically run through the auto-"
"escaping filters (with the exception of :meth:`~django.template.Library."
"simple_tag` as described above). However, there are still a couple of things "
"you should keep in mind when writing a template tag."
msgstr ""
"Keluaran dari cetakan etiket *tidak** otomatis berjalan melalui penyaring "
"pelolosan otomatis (dengan pencegualian dari :meth:`~django.template.Library."
"simple_tag` seperti yang digambarkan diatas). Bagaimanapun, masih terdapat "
"sepasang hal anda harus ingat ketika menulis sebuah cetakan etiket."

msgid ""
"If the ``render()`` method of your template tag stores the result in a "
"context variable (rather than returning the result in a string), it should "
"take care to call ``mark_safe()`` if appropriate. When the variable is "
"ultimately rendered, it will be affected by the auto-escape setting in "
"effect at the time, so content that should be safe from further escaping "
"needs to be marked as such."
msgstr ""
"Jika metode ``render()`` dari etiket cetakan anda menyimpan hasil dalam "
"variabel konteks (daripada mengembalikan hasil dalam string), itu harus "
"berhati-hati untuk memanggil ``mark_safe()`` jika pantas. Ketika variabel "
"akhirnya dibangun, itu akan dipengaruhi oleh pengaturan pelolosan-otomatis "
"pada saat itu, sehingga isi yang harusnya aman dari pelolosan lebih lanjut "
"butuh ditandai begitu saja."

msgid ""
"Also, if your template tag creates a new context for performing some sub-"
"rendering, set the auto-escape attribute to the current context's value. The "
"``__init__`` method for the ``Context`` class takes a parameter called "
"``autoescape`` that you can use for this purpose. For example::"
msgstr ""
"Juga, jika cetakan etiket anda membuat konteks baru untuk melakukan beberapa "
"sub pembangunan, setel atribut pelolosan otomatis ke nilai konteks saat ini. "
"Cara ``__init__`` untuk kelas ``Context`` mengambil parameter dipanggil "
"``autoescape`` dimana anda dapat menggunakan untuk tujuan ini. Sebagai "
"contoh::"

msgid ""
"This is not a very common situation, but it's useful if you're rendering a "
"template yourself. For example::"
msgstr ""
"Ini bukan situasi paling umum, tetapi ini berguna jika anda membangun "
"cetakan anda sendiri. Sebagai contoh::"

msgid ""
"If we had neglected to pass in the current ``context.autoescape`` value to "
"our new ``Context`` in this example, the results would have *always* been "
"automatically escaped, which may not be the desired behavior if the template "
"tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""
"Jika kami mempunyai terlantar untuk dilewatkan dalam nilai ``context."
"autoescape`` saat ini ke ``Context`` baru kami dalam contoh ini, hasil akan "
"mempunyai *selalu* otomatis diloloskan, yang mungkin perilaku yang tidak "
"diinginkan jika cetakan etiket digunakan dalam sebuah blok :ttag:`{% "
"autoescape off %}<autoescape>`."

msgid "Thread-safety considerations"
msgstr "Pertimbangan Thread-safety"

msgid ""
"Once a node is parsed, its ``render`` method may be called any number of "
"times. Since Django is sometimes run in multi-threaded environments, a "
"single node may be simultaneously rendering with different contexts in "
"response to two separate requests. Therefore, it's important to make sure "
"your template tags are thread safe."
msgstr ""
"Sekali node diuraikan, cara ``render`` dia mungkin dipanggil sejumlah kali. "
"Sejak Django terkadang berjalan dalam lingkungan banyak-rangkaian, sebuah "
"node tunggal mungkin secara berkelanjutan membangun dengan konteks berbeda "
"dalam menjawab ke dua permintaan terpisah. Oleh sebab itu, sangat penting "
"untuk memastikan cetakan etiket anda adalah aman."

msgid ""
"To make sure your template tags are thread safe, you should never store "
"state information on the node itself. For example, Django provides a "
"builtin :ttag:`cycle` template tag that cycles among a list of given strings "
"each time it's rendered:"
msgstr ""
"Untuk memastikan cetakan etiket anda thread safe, anda harus jangan "
"menyimpan informasi keadaan pada node itu sendiri. Sebagai contoh, Django "
"menyediakan cetakan etiket :ttag:`cycle` siap pakai yang berputar terhadap "
"sebuah daftar dari deretan karakter yang diberikan setiap kali dia dibangun:"

msgid ""
"A naive implementation of ``CycleNode`` might look something like this::"
msgstr ""
"Sebuah penerapan yang dibuat-buat dari ``CycleNode`` mungkin kelihatan "
"kurang lebih seperti ini::"

msgid ""
"But, suppose we have two templates rendering the template snippet from above "
"at the same time:"
msgstr ""
"Tetapi, seandainya kami mempunyai dua cetakan membangun potongan cetakan "
"dari atas pada waktu bersamaan:"

msgid ""
"Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""
"Urutan 1 melakukan pengulangan pertamanya, ``CycleNode.render()`` "
"mengembalikan 'row1'"

msgid ""
"Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""
"Urutan 2 melakukan pengulangan pertamanya, ``CycleNode.render()`` "
"mengembalikan 'row2'"

msgid ""
"Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""
"Urutan 1 melakukan pengulangan keduanya, ``CycleNode.render()`` "
"mengembalikan 'row1'"

msgid ""
"Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""
"Urutan 2 melakukan pengulangan keduanya, ``CycleNode.render()`` "
"mengembalikan 'row2'"

msgid ""
"The CycleNode is iterating, but it's iterating globally. As far as Thread 1 "
"and Thread 2 are concerned, it's always returning the same value. This is "
"not what we want!"
msgstr ""
"CycleNode berulang, tetapi berulang secara global. Sejauh Thread 1 dan "
"Thread 2 terkait, itu selalu mengembalikan nilai yang sama. Ini bukan yang "
"kita inginkan!"

msgid ""
"To address this problem, Django provides a ``render_context`` that's "
"associated with the ``context`` of the template that is currently being "
"rendered. The ``render_context`` behaves like a Python dictionary, and "
"should be used to store ``Node`` state between invocations of the ``render`` "
"method."
msgstr ""
"Untuk mengalamatkan masalah ini, Django menyediakan sebuah "
"``render_context`` yang terhubung dengan ``context`` dari cetakan yang saat "
"ini sedang dibangun. ``render_context`` berperilaku seperti sebuah kamus "
"Python, dan harus digunakan untuk menyimpan keadaan ``Node`` diantara "
"permohonan dari cara ``render``."

msgid ""
"Let's refactor our ``CycleNode`` implementation to use the "
"``render_context``::"
msgstr ""
"Mari kita refactor penerapan ``CycleNode`` kami untuk menggunakan "
"``render_context``::"

msgid ""
"Note that it's perfectly safe to store global information that will not "
"change throughout the life of the ``Node`` as an attribute. In the case of "
"``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` "
"is instantiated, so we don't need to put it in the ``render_context``. But "
"state information that is specific to the template that is currently being "
"rendered, like the current iteration of the ``CycleNode``, should be stored "
"in the ``render_context``."
msgstr ""
"Catat bahwa ini sangat aman untuk menyimpan informasi umum yang tidak akan "
"merubah keseluruhan hidup dari ``Node`` sebagai sebuah atribut. Dalam kasus "
"``CycleNode``, argumen ``cyclevars`` tidak berubah setelah ``Node`` dipakai, "
"jadi kami tidak butuh menaruhnya ke dalam ``render_context``. Tetapi keadaan "
"informasi yang khusus pada cetakan yang saat ini sedang dibangun, seperti "
"putaran saat ini dari ``CycleNode``, harus disimpan dalam ``render_context``."

msgid ""
"Notice how we used ``self`` to scope the ``CycleNode`` specific information "
"within the ``render_context``. There may be multiple ``CycleNodes`` in a "
"given template, so we need to be careful not to clobber another node's state "
"information. The easiest way to do this is to always use ``self`` as the key "
"into ``render_context``. If you're keeping track of several state variables, "
"make ``render_context[self]`` a dictionary."
msgstr ""
"Perhatikan bagaimana kami menggunakan ``self`` untuk menjangkau "
"``CycleNode`` informasi tertentu dalam ``render_context``. Disana mungkin "
"banyak ``CycleNodes`` dalam cetakan yang diberikan, jadi kami butuh berhati-"
"hati tidak megnkritik informasi keadaan node lainnya. Cara termudah "
"melakukan ini adalah selalu menggunakan ``self`` sebagai kunci kedalam "
"``render_context``. Jika anda sedang menjaga jalur dari beberapa variabel "
"keadaan, buat ``render_context[self]`` sebuah kamus."

msgid "Registering the tag"
msgstr "Mendaftarkan etiket"

msgid ""
"Finally, register the tag with your module's ``Library`` instance, as "
"explained in :ref:`writing custom template tags<howto-writing-custom-"
"template-tags>` above. Example::"
msgstr ""
"Akhirnya, daftar etiket dengan instance ``Library`` modul anda, seperti "
"dijelaskan dalam :ref:`writing custom template tags<howto-writing-custom-"
"template-tags>` diatas. Contoh::"

msgid "The ``tag()`` method takes two arguments:"
msgstr "Cara ``tag()`` mengambil dua argumen:"

msgid ""
"The name of the template tag -- a string. If this is left out, the name of "
"the compilation function will be used."
msgstr ""
"Nama dari cetakan etiket -- sebuah deretan karakter. Jika ini dihilangkan "
"dari fungsi penyusunan akan digunakan."

msgid ""
"As with filter registration, it is also possible to use this as a decorator::"
msgstr ""
"Dengan pendaftaran penyaring, dia juga memungkinkan menggunakan ini sebagai "
"decorator::"

msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the tag name."
msgstr ""
"Jika anda meninggalkan argumen ``name``, seperti dalam contoh kedud diatas, "
"Django akan menggunakan nama fungsi sebagai nama etiket."

msgid "Passing template variables to the tag"
msgstr "Melewatkan variabel cetakan ke etiket"

msgid ""
"Although you can pass any number of arguments to a template tag using "
"``token.split_contents()``, the arguments are all unpacked as string "
"literals. A little more work is required in order to pass dynamic content (a "
"template variable) to a template tag as an argument."
msgstr ""
"Meskipun anda dapat melewatkan angka apapun dari argumen ke etiket cetakan "
"menggunakan ``token.split_contents()``, argumen semua tidak dipaketkan "
"sebagai harfiah string. Sedikit kerja lebih diwajibkan untuk melewatkan isi "
"dinamis (variabel cetakan) ke etiket cetakan sebagai sebuah argumen."

msgid ""
"While the previous examples have formatted the current time into a string "
"and returned the string, suppose you wanted to pass in a :class:`~django.db."
"models.DateTimeField` from an object and have the template tag format that "
"date-time:"
msgstr ""
"Selagi contoh sebelumnya telah membentuk waktu saat ini ke dalam string dan "
"mengembalikan string, misalkan anda ingin melewatkan di :class:`~django.db."
"models.DateTimeField` dari sebuah obyek dan mempunyai bentuk etiket cetakan "
"yang tanggal-waktu:"

msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr "Mulanya, ``token.split_contents()`` akan mengembalikan tiga nilai:"

msgid "The tag name ``format_time``."
msgstr "Nama etiket ``format_time``."

msgid ""
"The string ``'blog_entry.date_updated'`` (without the surrounding quotes)."
msgstr "String ``'blog_entry.date_updated'`` (tanpa dikelilingi kutip)."

msgid ""
"The formatting string ``'\"%Y-%m-%d %I:%M %p\"'``. The return value from "
"``split_contents()`` will include the leading and trailing quotes for string "
"literals like this."
msgstr ""
"Pembentukan deretan karakter ``'\"%Y-%m-%d %I:%M %p\"'``. Mengembalikan "
"nilai dari ``split_contents()`` akan menyertakan kutipan awal dan akhir "
"untuk deretan karakter persis seperti ini."

msgid "Now your tag should begin to look like this::"
msgstr "Sekarang etiket anda harus kelihatan seperti ini::"

msgid ""
"You also have to change the renderer to retrieve the actual contents of the "
"``date_updated`` property of the ``blog_entry`` object.  This can be "
"accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""
"Anda juga mempunyai kesemparan pembangun untuk mengambil isi sebenarnya dari "
"sifat ``date_updated`` dari obyek ``blog_entry``. Ini dapat diselesaikan "
"dengan menggunakan kelas ``Variable()`` dalam ``django.template``."

msgid ""
"To use the ``Variable`` class, instantiate it with the name of the variable "
"to be resolved, and then call ``variable.resolve(context)``. So, for "
"example::"
msgstr ""
"Untuk menggunakan kelas ``Variable``, instansiasikan itu dengan nama dari "
"variabel untuk diselesaikan, dan panggil ``variable.resolve(context)``. "
"Jadi, sebagai contoh::"

msgid ""
"Variable resolution will throw a ``VariableDoesNotExist`` exception if it "
"cannot resolve the string passed to it in the current context of the page."
msgstr ""
"Keputusan variabel akan melempar sebuah pengecualian "
"``VariableDoesNotExist`` jika dia tidak dapat menyelesaikan deretan karakter "
"dilewatkan ke dia dalam konteks saat ini dari halaman."

msgid "Setting a variable in the context"
msgstr "Menyetel sebuah variabel di konteks"

msgid ""
"The above examples output a value. Generally, it's more flexible if your "
"template tags set template variables instead of outputting values. That way, "
"template authors can reuse the values that your template tags create."
msgstr ""
"Contoh diatas mengengeluarkan nilai. Umumnya, itu lebih fleksibel jika "
"etiket cetakan anda mensetel variabel cetakan daripada mengeluarkan nilai. "
"Cara itu, penulis cetakan dapat menggunakan kembali nilai yang etiket "
"cetakan anda buat."

msgid ""
"To set a variable in the context, use dictionary assignment on the context "
"object in the ``render()`` method. Here's an updated version of "
"``CurrentTimeNode`` that sets a template variable ``current_time`` instead "
"of outputting it::"
msgstr ""
"Untuk mensetel variabel dalam konteks, gunakan penugasan dictionary pada "
"obyek konteks di metode ``render()``. Ini adalah versi terperbaharui dari "
"``CurrentTimeNode`` yang menyetel variabel cetakan ``current_time`` daripada "
"mengeluarkannya::"

msgid ""
"Note that ``render()`` returns the empty string. ``render()`` should always "
"return string output. If all the template tag does is set a variable, "
"``render()`` should return the empty string."
msgstr ""
"Catat bahwa ``render()`` mengembalikan deretan karakter kosong. ``render() "
"harus selalu mengembalikan keluaran deretan karakter. Jika semua cetakan "
"etiket disetel variabel, ``render()`` harus mengembalikan deretan karakter "
"kosong."

msgid "Here's how you'd use this new version of the tag:"
msgstr "Ini adalah bagaimana anda akan menggunakan versi baru dari etiket:"

msgid "Variable scope in context"
msgstr "Lingkup variabel di konteks"

msgid ""
"Any variable set in the context will only be available in the same ``block`` "
"of the template in which it was assigned. This behavior is intentional; it "
"provides a scope for variables so that they don't conflict with context in "
"other blocks."
msgstr ""
"Apapun kumpulan variabel dalam konteks akan hanya tersedua dalam ``block`` "
"yang sama dari cetakan dimana dia ditetapkan. Perilaku ini adalah disengaja; "
"dia menyediakan cakupan untuk variabel sehingga mereka tidak bertentangan "
"dengan konteks di blok lainnya."

msgid ""
"But, there's a problem with ``CurrentTimeNode2``: The variable name "
"``current_time`` is hard-coded. This means you'll need to make sure your "
"template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% "
"current_time %}`` will blindly overwrite that variable's value. A cleaner "
"solution is to make the template tag specify the name of the output "
"variable, like so:"
msgstr ""
"Tetapi, ada masalah dengan ``CurrentTimeNode2``: Nama variabel "
"``current_time`` adalah dikode keraskan. Ini berarti anda akan butuh untuk "
"memastikan cetakan anda tidak menggunakan ``{{ current_time }}`` dimanapun "
"juga, karena ``{% current_time %}`` akan membabi buta meniban nilai variabel "
"itu. Sebuah solusi pembersih adalah membuat cetakan etiket menentukan nama "
"dari variabel keluaran, seperti begitu:"

msgid ""
"To do that, you'll need to refactor both the compilation function and "
"``Node`` class, like so::"
msgstr ""
"Untuk melakukannya, anda akan butuh me refaktor kedua fungsi penyusun dan "
"kelas ``Node``, seperti begitu::"

msgid ""
"The difference here is that ``do_current_time()`` grabs the format string "
"and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""
"Perbedaan disini adalah bahwa ``do_current_time()`` mengambil bentuk deretan "
"karakter dan nama variabel, melewatkan keduanya ke ``CurrentTimeNode3``."

msgid ""
"Finally, if you only need to have a simple syntax for your custom context-"
"updating template tag, consider using the :meth:`~django.template.Library."
"simple_tag` shortcut, which supports assigning the tag results to a template "
"variable."
msgstr ""
"Akhirnya, jika anda hanya butuh mempunyai sintaksis sederhana untuk "
"penyesuaian pembaharuan-konteks cetakan etiket, pertimbangkan menggunakan "
"jalan pintas :meth:`~django.template.Library.simple_tag`, yang mendukung "
"menetapkan hasil etiket ke cetakan variabel."

msgid "Parsing until another block tag"
msgstr "Menguraikan sampai blok etiket lain"

msgid ""
"Template tags can work in tandem. For instance, the standard :ttag:`{% "
"comment %}<comment>` tag hides everything until ``{% endcomment %}``. To "
"create a template tag such as this, use ``parser.parse()`` in your "
"compilation function."
msgstr ""
"Cetakan etiket dapat bekerja dalam berduaan. Sebagai contoh, standar etiket :"
"ttag:`{% comment %}<comment>` menyembunyikan semua sampai ``{% endcomment %}"
"``. Untuk membuat sebuah cetakan etiket seperti ini, gunakan ``parser."
"parse()`` dalam fungsi penyusun anda "

msgid "Here's how a simplified ``{% comment %}`` tag might be implemented::"
msgstr ""
"Ini adalah bagaimana menyederhanakan etiket ``{% comment %}`` mungkin "
"diterapkan::"

msgid ""
"The actual implementation of :ttag:`{% comment %}<comment>` is slightly "
"different in that it allows broken template tags to appear between ``{% "
"comment %}`` and ``{% endcomment %}``. It does so by calling ``parser."
"skip_past('endcomment')`` instead of ``parser.parse(('endcomment',))`` "
"followed by ``parser.delete_first_token()``, thus avoiding the generation of "
"a node list."
msgstr ""
"Penerapan sebenarnya dari :ttag:`{% comment %}<comment>` adalah sedikit "
"berbeda dalam memungkinkan merusak cetakan etiket untuk muncul diantara ``{% "
"comment %}`` dan ``{% endcomment %}``. Dia melakukannya dengan memanggil "
"``parser.skip_past('endcomment')`` daripada ``parser."
"parse(('endcomment',))`` diikuti oleh ``parser.delete_first_token()``, jadi "
"menghindari generasi dari sebuah daftar node."

msgid ""
"``parser.parse()`` takes a tuple of names of block tags ''to parse until''. "
"It returns an instance of ``django.template.NodeList``, which is a list of "
"all ``Node`` objects that the parser encountered ''before'' it encountered "
"any of the tags named in the tuple."
msgstr ""
"``parser.parse()`` mengambil sebuah tuple dari nama dari blok etiket \"untuk "
"diurai sampai\". Dia mengembalikan sebuah contoh dari ``django.template."
"NodeList``, yaitu sebuah daftar dari semua obyek ``Node`` yang pengurai "
"jumpai \"sebelum\" dia menjumpai etiket dinamai apapun dalam tuple."

msgid ""
"In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, "
"``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% "
"endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` "
"themselves."
msgstr ""
"Dalam ``\"nodelist = parser.parse(('endcomment',))\"`` di contoh atas, "
"``nodelist`` adalah sebuah daftar dari semua node diantara ``{% comment %}`` "
"dan ``{% endcomment %}``, bukan menghitung ``{% comment %}`` dan ``{% "
"endcomment %}`` mereka sendiri."

msgid ""
"After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the "
"``{% endcomment %}`` tag, so the code needs to explicitly call ``parser."
"delete_first_token()``."
msgstr ""
"Setelah ``parser.parse()`` dipanggil, pengurai belum \"mengkonsumsi\" etiket "
"``{% endcomment %}``, jadi kode butuh  secara eksplisit memanggil ``parser."
"delete_first_token()``."

msgid ""
"``CommentNode.render()`` returns an empty string. Anything between ``{% "
"comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""
"``CommentNode.render()`` mengembalikan string kosong. Apapun diantara ``{% "
"comment %}`` dan ``{% endcomment %}`` diabaikan."

msgid "Parsing until another block tag, and saving contents"
msgstr "Mengurai sampai blok etiket lainnya, dan menyimpan isi"

msgid ""
"In the previous example, ``do_comment()`` discarded everything between ``{% "
"comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible "
"to do something with the code between block tags."
msgstr ""
"Di contoh sebelumnya, ``do_comment()`` menyingkirkan apapun diantara ``{% "
"comment %}`` and ``{% endcomment %}``. Daripada melakukan itu, dimungkinkan "
"untuk melakukan sesuatu dengan kode diantara blok etiket."

msgid ""
"For example, here's a custom template tag, ``{% upper %}``, that capitalizes "
"everything between itself and ``{% endupper %}``."
msgstr ""
"Sebagai contoh, ini adalah penyesuaian cetakan etiket, ``{% upper %}``, yang "
"menghuruf besarkan semuanya diantara dia sendiri dan ``{% endupper %}``.\n"
" "

msgid "Usage:"
msgstr "Penggunaan:"

msgid ""
"As in the previous example, we'll use ``parser.parse()``. But this time, we "
"pass the resulting ``nodelist`` to the ``Node``::"
msgstr ""
"Seperti di contoh sebelumnya, kami akan menggunakan ``parser.parse()``. "
"Tetapi kali ini, kami melewatkan hasil ``nodelist`` ke ``Node``::"

msgid ""
"The only new concept here is the ``self.nodelist.render(context)`` in "
"``UpperNode.render()``."
msgstr ""
"Satu-satunya konsep disini adalah ``self.nodelist.render(context)`` dalam "
"``UpperNode.render()``."

msgid ""
"For more examples of complex rendering, see the source code of :ttag:`{% for "
"%}<for>` in :source:`django/template/defaulttags.py` and :ttag:`{% if %}"
"<if>` in :source:`django/template/smartif.py`."
msgstr ""

msgid "How to delete a Django application"
msgstr ""

msgid ""
"Django provides the ability to group sets of features into Python packages "
"called :doc:`applications</ref/applications/>`. When requirements change, "
"apps may become obsolete or unnecessary. The following steps will help you "
"delete an application safely."
msgstr ""

msgid "Remove all references to the app (imports, foreign keys etc.)."
msgstr ""

msgid "Remove all models from the corresponding ``models.py`` file."
msgstr ""

msgid ""
"Create relevant migrations by running :djadmin:`makemigrations`. This step "
"generates a migration that deletes tables for the removed models, and any "
"other required migration for updating relationships connected to those "
"models."
msgstr ""

msgid ""
":ref:`Squash <migration-squashing>` out references to the app in other apps' "
"migrations."
msgstr ""

msgid ""
"Apply migrations locally, runs tests, and verify the correctness of your "
"project."
msgstr ""

msgid "Deploy/release your updated Django project."
msgstr ""

msgid "Remove the app from :setting:`INSTALLED_APPS`."
msgstr ""

msgid "Finally, remove the app's directory."
msgstr ""

msgid "How to use Django with Daphne"
msgstr "Bagaimana menggunakan Django dengan Daphne"

msgid ""
":pypi:`Daphne <daphne>` is a pure-Python ASGI server for UNIX, maintained by "
"members of the Django project. It acts as the reference server for ASGI."
msgstr ""

msgid "Installing Daphne"
msgstr "Memasang Daphne"

msgid "You can install Daphne with ``pip``:"
msgstr ""

msgid "Running Django in Daphne"
msgstr "Menjalankan Django di Daphne"

msgid ""
"When Daphne is installed, a ``daphne`` command is available which starts the "
"Daphne server process. At its simplest, Daphne needs to be called with the "
"location of a module containing an ASGI application object, followed by what "
"the application is called (separated by a colon)."
msgstr ""
"Ketika Daphne terpasang, perintah ``daphne`` tersedia yang memulai proses "
"peladen Daphne. Sederhananya, Daphne butuh dipanggil dengan lokasi dari "
"modul mengandung obyek aplikasi ASGI, diikuti dengan nama aplikasinya "
"(dipisahkan oleh titik dua)."

msgid "For a typical Django project, invoking Daphne would look like:"
msgstr ""

msgid ""
"This will start one process listening on ``127.0.0.1:8000``. It requires "
"that your project be on the Python path; to ensure that run this command "
"from the same directory as your ``manage.py`` file."
msgstr ""
"Ini akan memulai satu proses mendengarkan pada ``127.0.0.1:8000``.Itu "
"membutuhkan proyek Anda berada pada jalur Python; untuk memastikan bahwa "
"menjalankan perintah ini dari direktori sama seperti berkas ``manage.py`` "
"anda."

msgid "Integration with ``runserver``"
msgstr ""

msgid ""
"Daphne provides a :djadmin:`runserver` command to serve your site under ASGI "
"during development."
msgstr ""

msgid ""
"This can be enabled by adding ``daphne`` to the start of your :setting:"
"`INSTALLED_APPS` and adding an ``ASGI_APPLICATION`` setting pointing to your "
"ASGI application object::"
msgstr ""

msgid "How to use Django with Hypercorn"
msgstr "Bagaimana menggunakan Django dengan Hypercorn"

msgid ""
"Hypercorn_ is an ASGI server that supports HTTP/1, HTTP/2, and HTTP/3 with "
"an emphasis on protocol support."
msgstr ""
"Hypercorn_ adalah sebuah peladen ASGI yang mendukung HTTP/1, HTTP/2, and "
"HTTP/3 dengan bertujuan pada dukungan protokol."

msgid "Installing Hypercorn"
msgstr "Memasang Hypercorn"

msgid "You can install Hypercorn with ``pip``:"
msgstr ""

msgid "Running Django in Hypercorn"
msgstr "Menjalankan Django di Hypercorn"

msgid ""
"When Hypercorn is installed, a ``hypercorn`` command is available which runs "
"ASGI applications. Hypercorn needs to be called with the location of a "
"module containing an ASGI application object, followed by what the "
"application is called (separated by a colon)."
msgstr ""
"Ketika Hypercorn terpasang, perintah ``hypercorn`` tersedia yang memulai "
"menjalankan aplikasi ASGI. Hypercorn butuh dipanggil dengan lokasi dari "
"modul mengandung obyek aplikasi ASGI, diikuti dengan nama aplikasinya "
"(dipisahkan oleh titik dua)."

msgid "For a typical Django project, invoking Hypercorn would look like:"
msgstr ""

msgid ""
"For more advanced usage, please read the `Hypercorn documentation "
"<Hypercorn_>`_."
msgstr ""
"Untuk penggunaan lanjut, silahkan baca `Hypercorn documentation "
"<Hypercorn_>`_."

msgid "How to deploy with ASGI"
msgstr "Bagaimana mengembangkan dengan ASGI"

msgid ""
"As well as WSGI, Django also supports deploying on ASGI_, the emerging "
"Python standard for asynchronous web servers and applications."
msgstr ""
"Seperti WSGI, Django juga mendukung menyebarkan pada ASGI_, yang baru muncul "
"standar Python untuk peladen jaringan dan aplikasi asinkron."

msgid ""
"Django's :djadmin:`startproject` management command sets up a default ASGI "
"configuration for you, which you can tweak as needed for your project, and "
"direct any ASGI-compliant application server to use."
msgstr ""
"Perinta pengelolaan Django :djadmin:`startproject` mensetel konfigurasi "
"awalan ASGI untuk anda, dimana anda dapat merubah sesuai kebutuhan proyek "
"anda, dan langsung peladen aplikasi patuhASGI apapun untuk digunakan."

msgid ""
"Django includes getting-started documentation for the following ASGI servers:"
msgstr "Django menyertakan dokumentasi mulai untuk peladen ASGI berikut:"

msgid "The ``application`` object"
msgstr "Obyek ``aplikasi``"

msgid ""
"Like WSGI, ASGI has you supply an ``application`` callable which the "
"application server uses to communicate with your code. It's commonly "
"provided as an object named ``application`` in a Python module accessible to "
"the server."
msgstr ""

msgid ""
"The :djadmin:`startproject` command creates a file :file:`<project_name>/"
"asgi.py` that contains such an ``application`` callable."
msgstr ""
"Perintah :djadmin:`startproject` membuat sebuah berkas :file:`<project_name>/"
"asgi.py` yang mengandung seperti ``application`` dapat dipanggil."

msgid ""
"It's not used by the development server (``runserver``), but can be used by "
"any ASGI server either in development or in production."
msgstr ""
"Itu tidak digunakan oleh server pengembangan (``runserver``), tetapi anda "
"dapat digunakan oleh peladen ASGI apapun baik dalam pengembangan maupun "
"produksi."

msgid ""
"ASGI servers usually take the path to the application callable as a string; "
"for most Django projects, this will look like ``myproject.asgi:application``."
msgstr ""
"Peladen ASGI biasanya mengambil jalur ke aplikasi dapat dipanggil sebagai "
"string; untuk kebanyakan proyek Django, ini akan terlihat seperti "
"``myproject.asgi:application``."

msgid ""
"While Django's default ASGI handler will run all your code in a synchronous "
"thread, if you choose to run your own async handler you must be aware of "
"async-safety."
msgstr ""
"Selagi penangan ASGI awalan Django akan menjalankan semua kode anda dalam "
"antrian sinkronus, jika anda memilih menjalankan penangan asinkronus anda "
"waspada terhadap keamanan-asinkronus."

msgid ""
"Do not call blocking synchronous functions or libraries in any async code. "
"Django prevents you from doing this with the parts of Django that are not "
"async-safe, but the same may not be true of third-party apps or Python "
"libraries."
msgstr ""

msgid "Configuring the settings module"
msgstr "Konfigurasi modul pengaturan"

msgid ""
"When the ASGI server loads your application, Django needs to import the "
"settings module — that's where your entire application is defined."
msgstr ""
"Ketika peladen ASGI memuat aplikasi anda, Django butuh meng-impor modul "
"setelan — disitulah aplikasi keseluruhan anda ditentukan."

msgid ""
"Django uses the :envvar:`DJANGO_SETTINGS_MODULE` environment variable to "
"locate the appropriate settings module. It must contain the dotted path to "
"the settings module. You can use a different value for development and "
"production; it all depends on how you organize your settings."
msgstr ""
"Django menggunakan lingkungan variabel  :envvar:`DJANGO_SETTINGS_MODULE` "
"untuk menempatkan modul pengaturan yang sesuai. Dia harus mengandung jalur "
"titik pada modul pengaturan. Anda dapat menggunakan nilai berbeda untuk "
"pengembangan dan produksi; dia semua tergantung pada bagaimana anda "
"mengorganisasikan pengaturan anda."

msgid ""
"If this variable isn't set, the default :file:`asgi.py` sets it to ``mysite."
"settings``, where ``mysite`` is the name of your project."
msgstr ""
"Jika variabel ini tidak disetel, awalan :file:`asgi.py` mensetel itu menjadi "
"``mysite.settings``, dimana ``mysite`` adalah nama dari proyek anda."

msgid "Applying ASGI middleware"
msgstr "Memberlakukan middleware ASGI"

msgid ""
"To apply ASGI middleware, or to embed Django in another ASGI application, "
"you can wrap Django's ``application`` object in the ``asgi.py`` file. For "
"example::"
msgstr ""
"Untuk memberlakukan middleware ASGI, atau membungkus Django dalam aplikasi "
"ASGI lain, anda dapat membungkus objek ``application`` Django di berkas "
"``asgi.py``. Sebagai contoh::"

msgid "How to use Django with Uvicorn"
msgstr "Bagaimana menggunakan Django dengan Uvicorn"

msgid ""
"Uvicorn_ is an ASGI server based on ``uvloop`` and ``httptools``, with an "
"emphasis on speed."
msgstr ""
"Uvicorn_ adalah peladen ASGI berdasarkan pada ``uvloop`` dan ``httptools``, "
"dengan menekankan pada kecepatan."

msgid "Installing Uvicorn"
msgstr "Memasang Uvicorn"

msgid "You can install Uvicorn with ``pip``:"
msgstr ""

msgid "Running Django in Uvicorn"
msgstr "Menjalankan Django di Uvicorn"

msgid ""
"When Uvicorn is installed, a ``uvicorn`` command is available which runs "
"ASGI applications. Uvicorn needs to be called with the location of a module "
"containing an ASGI application object, followed by what the application is "
"called (separated by a colon)."
msgstr ""

msgid "For a typical Django project, invoking Uvicorn would look like:"
msgstr ""

msgid ""
"In development mode, you can add ``--reload`` to cause the server to reload "
"any time a file is changed on disk."
msgstr ""
"Dalam suasana pengembangan, anda dapat menambahkan ``--reload`` menyebabkan "
"peladen memuat uang kapanpun sebuah berkas berubah pada cakram."

msgid ""
"For more advanced usage, please read the `Uvicorn documentation <Uvicorn_>`_."
msgstr ""
"Untuk penggunaan lanjutan, harap baca `Uvicorn documentation <Uvicorn_>`_."

msgid "Deploying Django using Uvicorn and Gunicorn"
msgstr "Menyebarkan Django menggunakan Uvicorn dan Gunicorn"

msgid ""
"Gunicorn_ is a robust web server that implements process monitoring and "
"automatic restarts. This can be useful when running Uvicorn in a production "
"environment."
msgstr ""
"Gunicorn_ is adalah peladen jaringan yang kokoh yang menerapkan proses "
"pengawasan dan mulai kembali secara otomatis. Ini dapat berguna ketika "
"menjalankan Uvicorn dalam lingkungan produksi."

msgid "To install Uvicorn and Gunicorn, use the following:"
msgstr ""

msgid "Then start Gunicorn using the Uvicorn worker class like this:"
msgstr ""

msgid "Deployment checklist"
msgstr "Daftar centang penyebaran"

msgid ""
"The internet is a hostile environment. Before deploying your Django project, "
"you should take some time to review your settings, with security, "
"performance, and operations in mind."
msgstr ""
"Internet adalah lingkungan agresif. Sebelum mengembangkan proyek Django "
"anda, anda harus mengambil waktu untuk meninjau pengaturan anda, dengan "
"keamanan, penampilan, dan operasi dalam pikiran."

msgid ""
"Django includes many :doc:`security features </topics/security>`. Some are "
"built-in and always enabled. Others are optional because they aren't always "
"appropriate, or because they're inconvenient for development. For example, "
"forcing HTTPS may not be suitable for all websites, and it's impractical for "
"local development."
msgstr ""
"Django menyertakan banyak :doc:`fitur keamanan </topics/security>`. Beberapa "
"dibangun dan selalu tersedia. Lainnya pilihan karena mereka tidak selalu "
"sesuai, atau karena mereka susah untuk dikembangkan. Sebagai contoh, memaksa "
"HTTPS mungkin tidak cocok untuk semua situs jaringan, dan dia tidak berguna "
"untuk pengembangan lokal."

msgid ""
"Performance optimizations are another category of trade-offs with "
"convenience. For instance, caching is useful in production, less so for "
"local development. Error reporting needs are also widely different."
msgstr ""
"Optimalisasi penampilan adalah kategori lain dari penjualan dengan mudahnya. "
"Sebagai contoh, menembolok sangat berguna dalam produksi, sedikit juga untuk "
"pengembangan lokal. Kebutuhan pelaporan kesalahan sangat berbeda."

msgid "The following checklist includes settings that:"
msgstr "Daftar centang berikut menyertakan pengaturan yang:"

msgid ""
"must be set properly for Django to provide the expected level of security;"
msgstr ""
"harus di setel dengan benar untuk Django untuk menyediakan tingkatan "
"diharapkan dari keamanan;"

msgid "are expected to be different in each environment;"
msgstr "diharapkan menjadi berbeda dalam setiap lingkungan;"

msgid "enable optional security features;"
msgstr "adakan pilihan fitur keamanan;"

msgid "enable performance optimizations;"
msgstr "adakan optimalisasi penampilan;"

msgid "provide error reporting."
msgstr "menyediakan pelaporan kesalahan."

msgid ""
"Many of these settings are sensitive and should be treated as confidential. "
"If you're releasing the source code for your project, a common practice is "
"to publish suitable settings for development, and to use a private settings "
"module for production."
msgstr ""
"Banyak dari setelan ini adalah sesitif dan harus diperlakukan rahasia. Jika "
"anda sedang menerbitkan sumber kode untuk proyek anda, praktik umum adalah "
"menerbitkan pengaturan yang cocok untuk pengembangan, dan menggunakan modul "
"setelan pribadi untuk produksi."

msgid "Run ``manage.py check --deploy``"
msgstr "Jalankan ``manage.py check --deploy``"

msgid ""
"Some of the checks described below can be automated using the :option:`check "
"--deploy` option. Be sure to run it against your production settings file as "
"described in the option's documentation."
msgstr ""
"Beberapa pemeriksaan digambarkan dibawah dapat diotomatisasi menggunakan "
"pilihan :option:`check --deploy`. Pastikan menjalankannya terhadap berkas "
"pengaturan produksi anda seperti yang digambarkan dalam dokumentasi pilihan."

msgid "Switch away from ``manage.py runserver``"
msgstr ""

msgid ""
"The :djadmin:`runserver` command is not designed for a production setting. "
"Be sure to switch to a production-ready WSGI or ASGI server. For a few "
"common options, see :doc:`WSGI servers </howto/deployment/wsgi/index>` or :"
"doc:`ASGI servers </howto/deployment/asgi/index>`."
msgstr ""

msgid "Critical settings"
msgstr "Pengaturan kritis"

msgid ":setting:`SECRET_KEY`"
msgstr ":setting:`SECRET_KEY`"

msgid ""
"**The secret key must be a large random value and it must be kept secret.**"
msgstr "**Kunci rahasia harus nilai acak besar dan dia harus tetap rahasia.**"

msgid ""
"Make sure that the key used in production isn't used anywhere else and avoid "
"committing it to source control. This reduces the number of vectors from "
"which an attacker may acquire the key."
msgstr ""
"Pastikan bahwa kunci digunakan dalam produksi tidak digunakan dimanapun dan "
"hindari menyerahkannya ke sumber kendali. Ini mengurangi sejumlah vektor "
"dari yang sebuah penyerang mungkin mendapatkan kunci."

msgid ""
"Instead of hardcoding the secret key in your settings module, consider "
"loading it from an environment variable::"
msgstr ""
"Daripada kode keras kuncu rahasia dalam modul pengaturan anda, pertimbangkan "
"memuatnya dari sebuah variabel lingkungan::"

msgid "or from a file::"
msgstr "atau dari sebuah berkas::"

msgid "If rotating secret keys, you may use :setting:`SECRET_KEY_FALLBACKS`::"
msgstr ""
"Jika memutar kunci rahasia, anda mungkin menggunakan :setting:"
"`SECRET_KEY_FALLBACKS`::"

msgid ""
"Ensure that old secret keys are removed from ``SECRET_KEY_FALLBACKS`` in a "
"timely manner."
msgstr ""
"Pastikan bahwa kunci rahasia lama dipindahkan dari ``SECRET_KEY_FALLBACKS`` "
"pada waktu yang tepat.."

msgid ":setting:`DEBUG`"
msgstr ":setting:`DEBUG`"

msgid "**You must never enable debug in production.**"
msgstr "**Anda dilarang mengaktifkan debug di lingkungan produksi.**"

msgid ""
"You're certainly developing your project with :setting:`DEBUG = True "
"<DEBUG>`, since this enables handy features like full tracebacks in your "
"browser."
msgstr ""
"Anda pasti mengembangkan proyek anda dengan :setting:`DEBUG = True <DEBUG>`, "
"sejak ini mengadakan fitur mudah seperti pelacakan kembali penuh dalam "
"perambah anda."

msgid ""
"For a production environment, though, this is a really bad idea, because it "
"leaks lots of information about your project: excerpts of your source code, "
"local variables, settings, libraries used, etc."
msgstr ""
"Untuk sebuah lingkungan produksi, meskipun, ini adalah ide jelek, karena dia "
"membocorkan banyak informasi tentang proyek anda; kutipan dari kode sumber "
"anda, variabel lokal, pengaturan, pustaka-pustaka digunakan, dll."

msgid "Environment-specific settings"
msgstr "Pengaturan lingkungan-khusus"

msgid ":setting:`ALLOWED_HOSTS`"
msgstr ":setting:`ALLOWED_HOSTS`"

msgid ""
"When :setting:`DEBUG = False <DEBUG>`, Django doesn't work at all without a "
"suitable value for :setting:`ALLOWED_HOSTS`."
msgstr ""
"Ketika :setting:`DEBUG = False <DEBUG>`, Django tidak bekerja sama sekali "
"tanpa nilai cocok untuk :setting:`ALLOWED_HOSTS`."

msgid ""
"This setting is required to protect your site against some CSRF attacks. If "
"you use a wildcard, you must perform your own validation of the ``Host`` "
"HTTP header, or otherwise ensure that you aren't vulnerable to this category "
"of attacks."
msgstr ""
"Pengaturan ini diwajibkan untuk melindungi situs anda terhadap beberapa "
"serangan CSRF. Jika anda menggunakan wildcard, anda harus melakukan "
"pengecekan anda sendiri dari kepala ``Host`` HTTP, atau jika tidak pastikan "
"bahwa anda tidak rentan ke kategori serangan ini."

msgid ""
"You should also configure the web server that sits in front of Django to "
"validate the host. It should respond with a static error page or ignore "
"requests for incorrect hosts instead of forwarding the request to Django. "
"This way you'll avoid spurious errors in your Django logs (or emails if you "
"have error reporting configured that way). For example, on nginx you might "
"set up a default server to return \"444 No Response\" on an unrecognized "
"host:"
msgstr ""

msgid ":setting:`CACHES`"
msgstr ":setting:`CACHES`"

msgid ""
"If you're using a cache, connection parameters may be different in "
"development and in production. Django defaults to per-process :ref:`local-"
"memory caching <local-memory-caching>` which may not be desirable."
msgstr ""
"Jika anda sedang menggunakan penyimpanan sementara, parameter hubungan "
"mungkin berbeda dalam pengembangan dan di produksi. Awalan Django pada per-"
"pengolahan :ref:`local-memory caching <local-memory-caching>` yang mungkin "
"tidak diinginkan."

msgid ""
"Cache servers often have weak authentication. Make sure they only accept "
"connections from your application servers."
msgstr ""
"Server penyimpanan seringnya memiliki autentifikasi yang lemah. Pastikan "
"hanya menerima koneksi dari server aplikasi anda saja."

msgid ":setting:`DATABASES`"
msgstr ":setting:`DATABASES`"

msgid ""
"Database connection parameters are probably different in development and in "
"production."
msgstr ""
"Parameter hubungan basisdata kemungkinan berbeda di pengembangan dan di "
"produksi."

msgid ""
"Database passwords are very sensitive. You should protect them exactly like :"
"setting:`SECRET_KEY`."
msgstr ""
"Sandi basisdata sangat rahasia. Anda harus melindungi mereka persis seperti :"
"setting:`SECRET_KEY`."

msgid ""
"For maximum security, make sure database servers only accept connections "
"from your application servers."
msgstr ""
"Untuk keamanan maksimal, pastikan peladen basisdata hanya menerima hubungan "
"dari peladen aplikasi anda."

msgid "If you haven't set up backups for your database, do it right now!"
msgstr "Jika anda belum menyetel sokongan basisdata anda, lakukan sekarang!"

msgid ":setting:`EMAIL_BACKEND` and related settings"
msgstr ":setting:`EMAIL_BACKEND` dan pengaturan terkait"

msgid "If your site sends emails, these values need to be set correctly."
msgstr "Jika situs anda mengirim surel, nilai ini butuh disetel dengan benar."

msgid ""
"By default, Django sends email from webmaster@localhost and root@localhost. "
"However, some mail providers reject email from these addresses. To use "
"different sender addresses, modify the :setting:`DEFAULT_FROM_EMAIL` and :"
"setting:`SERVER_EMAIL` settings."
msgstr ""
"Secara awal, Django mengirim surel dari webmaster@localhost dan "
"root@localhost. Bagaimanapun, beberapa penyedia surat menolak surel dari "
"alamat ini. Untuk menggunakan alamat pengirim berbeda, rubah pengaturan :"
"setting:`DEFAULT_FROM_EMAIL` dan :setting:`SERVER_EMAIL`"

msgid ":setting:`STATIC_ROOT` and :setting:`STATIC_URL`"
msgstr ":setting:`STATIC_ROOT` dan :setting:`STATIC_URL`"

msgid ""
"Static files are automatically served by the development server. In "
"production, you must define a :setting:`STATIC_ROOT` directory where :"
"djadmin:`collectstatic` will copy them."
msgstr ""
"Berkas statis otomatis dilayani oleh peladen pengembangan. Di produksi, anda "
"harus menentukan direktori :setting:`STATIC_ROOT` dimana :djadmin:"
"`collectstatic` akan menyalin mereka."

msgid "See :doc:`/howto/static-files/index` for more information."
msgstr "Lihat :doc:`/howto/static-files/index` untuk informasi lebih."

msgid ":setting:`MEDIA_ROOT` and :setting:`MEDIA_URL`"
msgstr ":setting:`MEDIA_ROOT` dan :setting:`MEDIA_URL`"

msgid ""
"Media files are uploaded by your users. They're untrusted! Make sure your "
"web server never attempts to interpret them. For instance, if a user uploads "
"a ``.php`` file, the web server shouldn't execute it."
msgstr ""
"Berkas-berkas media diunggah oleh pengguna anda. Mereka adalah tidak dapat "
"dipercaya! Pastikan peladen jaringan anda tidak pernah berusaha "
"menterjemahkan mereka. Sebagai contoh, jika seorang pengguna mengunggah "
"berkas ``.php``, peladen jaringan jangan menjalankannya."

msgid "Now is a good time to check your backup strategy for these files."
msgstr ""
"Sekarang waktu tepat untuk memeriksa strategi sokongan anda untuk berkas ini."

msgid "HTTPS"
msgstr "HTTPS"

msgid ""
"Any website which allows users to log in should enforce site-wide HTTPS to "
"avoid transmitting access tokens in clear. In Django, access tokens include "
"the login/password, the session cookie, and password reset tokens. (You "
"can't do much to protect password reset tokens if you're sending them by "
"email.)"
msgstr ""
"Jaringan situs apapun yang mengizinkan pengguna untuk masuh harus "
"melaksanakan lebar-situs HTTPS untuk menghindari token transmisi akses "
"jelas. Di Django, token akses menyertakan masuk/sandi, sesi kue, dan setel "
"kembali sandi token. (Anda tidak dapat melakukan banyak untuk melindungi "
"sandi setel kembali token jika anda mengirim mereka dengan surel.)"

msgid ""
"Protecting sensitive areas such as the user account or the admin isn't "
"sufficient, because the same session cookie is used for HTTP and HTTPS. Your "
"web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS "
"requests to Django."
msgstr ""
"Melindungi kawasan sensitif seperti akun pengguna atau admin tidak cukuo, "
"karena sesi kue sama digunakan untuk HTTP dan HTTPS. Peladen jaringan anda "
"ahrus mengalihkan semua lalu lintas HTTP ke HTTPS, dan hanya mengirimkan "
"permintaan HTTPS ke Django."

msgid "Once you've set up HTTPS, enable the following settings."
msgstr "Sekali anda telah menyetel HTTPS, adakan pengaturan berikut."

msgid ":setting:`CSRF_COOKIE_SECURE`"
msgstr ":setting:`CSRF_COOKIE_SECURE`"

msgid ""
"Set this to ``True`` to avoid transmitting the CSRF cookie over HTTP "
"accidentally."
msgstr ""
"Setel ini menjadi  ``True`` untuk menghindari mengirimkan kue CSRF melalui "
"HTTP dengan tidak sengaja."

msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ":setting:`SESSION_COOKIE_SECURE`"

msgid ""
"Set this to ``True`` to avoid transmitting the session cookie over HTTP "
"accidentally."
msgstr ""
"Ubah jadi ``True`` untuk menghindari pengiriman cookie sesi melalui HTTP "
"secara tidak sengaja."

msgid "Performance optimizations"
msgstr "Optimalisasi penampilan"

msgid ""
"Setting :setting:`DEBUG = False <DEBUG>` disables several features that are "
"only useful in development. In addition, you can tune the following settings."
msgstr ""
"Pengaturan :setting:`DEBUG = False <DEBUG>` meniadakan beberapa fitur yang "
"hanya berguna dalam pengembangan. Dalam tambahan, anda dapat menyesuaikan "
"pengaturan berikut."

msgid "Sessions"
msgstr "Sesi"

msgid ""
"Consider using :ref:`cached sessions <cached-sessions-backend>` to improve "
"performance."
msgstr ""
"Pertimbangkan menggunakan :ref:`cached sessions <cached-sessions-backend>` "
"untuk meningkatkan penampilan."

msgid ""
"If using database-backed sessions, regularly :ref:`clear old sessions "
"<clearing-the-session-store>` to avoid storing unnecessary data."
msgstr ""
"Jika menggunakan sesi didukung-basisdata, secara teratur :ref:`clear old "
"sessions <clearing-the-session-store>` untuk menghindari menyimpan data yang "
"tidak diperlukan."

msgid ":setting:`CONN_MAX_AGE`"
msgstr ":setting:`CONN_MAX_AGE`"

msgid ""
"Enabling :ref:`persistent database connections <persistent-database-"
"connections>` can result in a nice speed-up when connecting to the database "
"accounts for a significant part of the request processing time."
msgstr ""
"Mengadakan :ref:`persistent database connections <persistent-database-"
"connections>` dapat menghasilkan sebuah kecepatan bagus ketika berhubung ke "
"akun basisdata untuk bagian khusus dari waktu pengolahan permintaan."

msgid "This helps a lot on virtualized hosts with limited network performance."
msgstr ""
"Ini membantu banyak pada rumah virtual dengan penampilan jaringan terbatas."

msgid ":setting:`TEMPLATES`"
msgstr ":setting:`TEMPLATES`"

msgid ""
"Enabling the cached template loader often improves performance drastically, "
"as it avoids compiling each template every time it needs to be rendered. "
"When :setting:`DEBUG = False <DEBUG>`, the cached template loader is enabled "
"automatically. See :class:`django.template.loaders.cached.Loader` for more "
"information."
msgstr ""

msgid "Error reporting"
msgstr "Pelaporan kesalahan"

msgid ""
"By the time you push your code to production, it's hopefully robust, but you "
"can't rule out unexpected errors. Thankfully, Django can capture errors and "
"notify you accordingly."
msgstr ""
"Seiring waktu anda mendorong kode anda ke produksi, semoga kuat, tetapi anda "
"tidak dapat menimpa kesalahan-kesalahan tidak diharapkan. Terima kasih, "
"Django dapat menangkap kesalahan-kesalahan dan memberitahu anda yang sesuai."

msgid ":setting:`LOGGING`"
msgstr ":setting:`LOGGING`"

msgid ""
"Review your logging configuration before putting your website in production, "
"and check that it works as expected as soon as you have received some "
"traffic."
msgstr ""
"Pratinjau konfigurasi pencatatan anda sebelum menaruh situs jaringan anda "
"dalam produksi, dan periksa bahwa dia bekerja seauai harapan setelah anda "
"menerima beberapa lalu lintas."

msgid "See :doc:`/topics/logging` for details on logging."
msgstr "Lihat :doc:`/topics/logging` untuk rincian pada tempuhan."

msgid ":setting:`ADMINS` and :setting:`MANAGERS`"
msgstr ":setting:`ADMINS` dan :setting:`MANAGERS`"

msgid ":setting:`ADMINS` will be notified of 500 errors by email."
msgstr ":setting:`ADMINS` akan diberitahu dari 500 kesalahan oleh surel."

msgid ""
":setting:`MANAGERS` will be notified of 404 errors. :setting:"
"`IGNORABLE_404_URLS` can help filter out spurious reports."
msgstr ""
":setting:`MANAGERS` akan diberitahu kesalahan 404. :setting:"
"`IGNORABLE_404_URLS` dapat membantu saringan laporan palsu."

msgid ""
"See :doc:`/howto/error-reporting` for details on error reporting by email."
msgstr ""
"Lihat :doc:`/howto/error-reporting` untuk rincian di pelaporan kesalahan "
"oleh email."

msgid "Error reporting by email doesn't scale very well"
msgstr ""
"Pelaporan error melalui surel tidak dapat dikembangkan pada skala lebih "
"lebih besar dengan baik"

msgid ""
"Consider using an error monitoring system such as Sentry_ before your inbox "
"is flooded by reports. Sentry can also aggregate logs."
msgstr ""
"Pertimbangkan menggunakan sistem pengamatan kesalahan seperti Sentry_ "
"sebelum kotak masuk anda dibanjiri oleh laporan. Sentry dapat juga "
"mengumpulkan catatan."

msgid "Customize the default error views"
msgstr "Sesuaikan tampilan kesalahan awal"

msgid ""
"Django includes default views and templates for several HTTP error codes. "
"You may want to override the default templates by creating the following "
"templates in your root template directory: ``404.html``, ``500.html``, ``403."
"html``, and ``400.html``. The :ref:`default error views <error-views>` that "
"use these templates should suffice for 99% of web applications, but you can :"
"ref:`customize them <customizing-error-views>` as well."
msgstr ""

msgid "How to deploy Django"
msgstr "Bagaimana menyebarkan Django"

msgid ""
"Django is full of shortcuts to make web developers' lives easier, but all "
"those tools are of no use if you can't easily deploy your sites. Since "
"Django's inception, ease of deployment has been a major goal."
msgstr ""

msgid ""
"There are many options for deploying your Django application, based on your "
"architecture or your particular business needs, but that discussion is "
"outside the scope of what Django can give you as guidance."
msgstr ""

msgid ""
"Django, being a web framework, needs a web server in order to operate. And "
"since most web servers don't natively speak Python, we need an interface to "
"make that communication happen. The :djadmin:`runserver` command starts a "
"lightweight development server, which is not suitable for production."
msgstr ""

msgid "Django currently supports two interfaces: WSGI and ASGI."
msgstr "Django saat ini mendukung dua antarmuka: WSGI dan ASGI. "

msgid ""
"`WSGI`_ is the main Python standard for communicating between web servers "
"and applications, but it only supports synchronous code."
msgstr ""
"`WSGI`_ adalah standar Python untuk berkomunikasi antara peladen jaringan "
"dan aplikasi, tetapi itu hanya mendukung kode sinkron."

msgid ""
"`ASGI`_ is the new, asynchronous-friendly standard that will allow your "
"Django site to use asynchronous Python features, and asynchronous Django "
"features as they are developed."
msgstr ""
"`ASGI`_ adalah baru, standar ramah-asinkron yang akan mengizinkan situs "
"Django anda menggunakan fitur asinkron Python, dan fitur asinkron Django "
"ketika dikembangkan."

msgid ""
"You should also consider how you will handle :doc:`static files </howto/"
"static-files/deployment>` for your application, and how to handle :doc:"
"`error reporting</howto/error-reporting>`."
msgstr ""
"Anda harus mempertimbangkan bagaimana anda akan menangani :doc:`static files "
"</howto/static-files/deployment>` untuk aplikasi anda, dan bagaimana "
"menangani :doc:`error reporting</howto/error-reporting>`."

msgid ""
"Finally, before you deploy your application to production, you should run "
"through our :doc:`deployment checklist<checklist>` to ensure that your "
"configurations are suitable."
msgstr ""
"Akhirnya, sebelum anda mengembangkan aplikasi anda ke produksi, anda harus "
"berjalan melalui :doc:`deployment checklist<checklist>` kami untuk "
"memastikan bahwa konfigurasi anda cocok."

msgid "How to authenticate against Django's user database from Apache"
msgstr ""
"Bagaimana mengautentifikasi terhadap basisdata pengguna Django dari Apache"

msgid ""
"Since keeping multiple authentication databases in sync is a common problem "
"when dealing with Apache, you can configure Apache to authenticate against "
"Django's :doc:`authentication system </topics/auth/index>` directly. This "
"requires Apache version >= 2.2 and mod_wsgi >= 2.0. For example, you could:"
msgstr ""
"Sejak menjaga banyak otentifikasi basisdata di sinkronasi adalah masalah "
"utama ketika berhadapan dengan Apache, anda dapat mengkonfigurasi Apache "
"untuk otentifikasi terhadap :doc:`authentication system </topics/auth/"
"index>` Django secara langsung. Ini membutuhkan Apache versi >= 2.2 dan "
"mod_wsgi >= 2.0. Sebagai contoh, anda dapat:"

msgid ""
"Serve static/media files directly from Apache only to authenticated users."
msgstr ""
"Melayani berkas statis/media secara langsung dari Apache hanya untuk "
"membuktikan keaslian pengguna."

msgid ""
"Authenticate access to a Subversion_ repository against Django users with a "
"certain permission."
msgstr ""
"Akses otentifikasi pada sebuah gudang Subversion_ terhadap pengguna Django "
"dengan perizinan tertentu."

msgid "Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""
"Mengizinkan pengguna tertentu untuk terhubung ke berbagi WebDAV dibuat "
"dengan mod_dav_."

msgid ""
"If you have installed a :ref:`custom user model <auth-custom-user>` and want "
"to use this default auth handler, it must support an ``is_active`` "
"attribute. If you want to use group based authorization, your custom user "
"must have a relation named 'groups', referring to a related object that has "
"a 'name' field. You can also specify your own custom mod_wsgi auth handler "
"if your custom cannot conform to these requirements."
msgstr ""
"Jika anda telah memasang :ref:`custom user model <auth-custom-user>` dan "
"ingin menggunakan awalan penangan kesahihan, itu harus mendukung atribut "
"``is_active``. Jika anda ingin menggunakan otorisasi berdasarkan kelompok, "
"pengguna penyesuaian anda harus mempunyai hubungan bernama 'groups', mengacu "
"ke obyek terkait yang mempunyai nama ''name''. Anda dapat juga menentukan "
"penangan otentifikasi mod_wsgi penyesuaian anda jika penyesuaian anda tidak "
"sesuai pada persyaratan ini."

msgid "Authentication with ``mod_wsgi``"
msgstr "Pembuktian keaslian dengan ``mod_wsgi``"

msgid ""
"The use of ``WSGIApplicationGroup %{GLOBAL}`` in the configurations below "
"presumes that your Apache instance is running only one Django application. "
"If you are running more than one Django application, please refer to the "
"`Defining Application Groups`_ section of the mod_wsgi docs for more "
"information about this setting."
msgstr ""
"Penggunaan dari ``WSGIApplicationGroup %{GLOBAL}`` di konfigurasi dibawah "
"menganggap bahwa instance Apache anda sedang menjalankan hanya satu aplikasi "
"Django. Jika anda sedang menjalankan lebih dari satu aplikasi Django, "
"silahkan mengacu pada bagian `Defining Application Groups`_ dari dokumen "
"mod_wsgi untuk informasi lebih tentang pengaturan ini."

msgid ""
"Make sure that mod_wsgi is installed and activated and that you have "
"followed the steps to set up :doc:`Apache with mod_wsgi </howto/deployment/"
"wsgi/modwsgi>`."
msgstr ""
"Pastikan bahwa mod_wsgi terpasang dan aktif dan anda telah mengikuti langkah-"
"langkah untuk menyetel :doc:`Apache with mod_wsgi </howto/deployment/wsgi/"
"modwsgi>`."

msgid ""
"Next, edit your Apache configuration to add a location that you want only "
"authenticated users to be able to view:"
msgstr ""
"Selanjutnya, sunting konfigurasi Apache anda untuk menambahkan tempat yang "
"anda ingin dibuktikan keaslian pengguna untuk dapat melihat:"

msgid ""
"The ``WSGIAuthUserScript`` directive tells mod_wsgi to execute the "
"``check_password`` function in specified wsgi script, passing the user name "
"and password that it receives from the prompt. In this example, the "
"``WSGIAuthUserScript`` is the same as the ``WSGIScriptAlias`` that defines "
"your application :doc:`that is created by django-admin startproject </howto/"
"deployment/wsgi/index>`."
msgstr ""
"``WSGIAuthUserScript`` yang memerintahkan memberitahu mod_wsgi untuk "
"menjalankan fungsi ``check_password`` di tulisan wsgi yang lebih khusus, "
"melewati nama pengguna dan sandi yang dia menerimanya dari prompt. Di contoh "
"ini, ``WSGIAuthUserScript`` adalah sama seperti ``WSGIScriptAlias`` yang "
"menentukan aplikasi anda :doc:`yang dibuat oleh django-admin startproject </"
"howto/deployment/wsgi/index>`."

msgid "Using Apache 2.2 with authentication"
msgstr "Menggunakan Apache 2.2 dengan pembuktian keaslian"

msgid "Make sure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded."
msgstr "Pastikan bahwa ``mod_auth_basic`` and ``mod_authz_user`` dimuat."

msgid ""
"These might be compiled statically into Apache, or you might need to use "
"LoadModule to load them dynamically in your ``httpd.conf``:"
msgstr ""
"Ini mungkin disusun secara tetap kedalam Apache, atau anda mungkin butuh "
"menggunakan LoadModule untuk memuat mereka secara dinamis dalam ``httpd."
"conf`` anda:"

msgid ""
"Finally, edit your WSGI script ``mysite.wsgi`` to tie Apache's "
"authentication to your site's authentication mechanisms by importing the "
"``check_password`` function::"
msgstr ""
"Akhirnya sunting tulisan WSGI anda ``mysite.wsgi`` ke pembuktian keaslian "
"Apache ke mekanisme pembuktian keaslian situs anda dengan mengimpor fungsi "
"``check_password``:: "

msgid ""
"Requests beginning with ``/secret/`` will now require a user to authenticate."
msgstr ""
"Permintaan dimulai dengan ``/secret/`` akan sekarang membutuhkan pengguna "
"untuk dibuktikan keasliannya."

msgid ""
"The mod_wsgi `access control mechanisms documentation`_ provides additional "
"details and information about alternative methods of authentication."
msgstr ""
"mod_wsgi `dokumentasi mekanisme kendali akses`_ menyediakan tambahan rincian "
"dan informasi tentang cara lain dari pembuktian keaslian."

msgid "Authorization with ``mod_wsgi`` and Django groups"
msgstr "Otorisasi dengan ``mod_wsgi`` dan kelompok Django"

msgid ""
"mod_wsgi also provides functionality to restrict a particular location to "
"members of a group."
msgstr ""
"mod_wsgi juga menyediakan fungsi untuk membatasi sebagian tempat untuk "
"anggota kelompok."

msgid "In this case, the Apache configuration should look like this:"
msgstr "Dalam kasus ini, konfigurasi Apache harus kelihatan seperti ini:"

msgid ""
"To support the ``WSGIAuthGroupScript`` directive, the same WSGI script "
"``mysite.wsgi`` must also import the ``groups_for_user`` function which "
"returns a list groups the given user belongs to."
msgstr ""
"Untuk mendukung perintah ``WSGIAuthGroupScript``, tulisan WSGI sama ``mysite."
"wsgi`` harus juga mengimpor fungsi ``groups_for_user`` yang mengembalikan "
"daftar kelompok milik pengguna yang diberikan."

msgid ""
"Requests for ``/secret/`` will now also require user to be a member of the "
"\"secret-agents\" group."
msgstr ""
"Permintaan untuk ``/secret/`` akan juga membutuhkan pengguna menjadi anggota "
"dari kelompok \"secret-agents\"."

msgid "How to use Django with Gunicorn"
msgstr "Bagaimana menggunakan Django dengan Gunicorn"

msgid ""
"Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no "
"dependencies and can be installed using ``pip``."
msgstr ""
"Gunicorn_ ('Green Unicorn') adalah peladen WSGI murni-Python untuk UNIX. Dia "
"tidak memiliki ketergantungan dan dapat dipasang menggunakan ``pip``."

msgid "Installing Gunicorn"
msgstr "Memasang Gunicorn"

msgid ""
"Install gunicorn by running ``python -m pip install gunicorn``. For more "
"details, see the `gunicorn documentation`_."
msgstr ""
"Pasang gunicorn dengan menjalankan ``python -m pip install gunicorn``. Untuk "
"rincian lebih, lihat `gunicorn documentation`_."

msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr "Menjalankan Django di Gunicorn sebagai aplikasi WSGI umum."

msgid ""
"When Gunicorn is installed, a ``gunicorn`` command is available which starts "
"the Gunicorn server process. The simplest invocation of gunicorn is to pass "
"the location of a module containing a WSGI application object named "
"``application``, which for a typical Django project would look like:"
msgstr ""

msgid ""
"This will start one process running one thread listening on "
"``127.0.0.1:8000``. It requires that your project be on the Python path; the "
"simplest way to ensure that is to run this command from the same directory "
"as your ``manage.py`` file."
msgstr ""
"Ini akan memulai satu pengolahan menjalankan satu rangkaian pada "
"``127.0.0.1:8000``. Dia mengharuskan bahwa proyek anda berada di jalur "
"Phyton; cara sederhana untuk memastikan bahwa menjalankan perintah ini dari "
"direktori sama seperti berkas ``manage.py`` anda."

msgid "See Gunicorn's `deployment documentation`_ for additional tips."
msgstr "Lihat `dokumentasi penyebaran`_ Gunicorn untuk tips tambahan."

msgid "How to deploy with WSGI"
msgstr "Bagaimana menyebarkan dengan WSGI"

msgid ""
"Django's primary deployment platform is WSGI_, the Python standard for web "
"servers and applications."
msgstr ""
"Serambi penyebaran utama Django adalah WSGI_, standar Phyton untuk peladen "
"jaringan dan aplikasi."

msgid ""
"Django's :djadmin:`startproject` management command sets up a minimal "
"default WSGI configuration for you, which you can tweak as needed for your "
"project, and direct any WSGI-compliant application server to use."
msgstr ""
"Perintah pengelolaan Django :djadmin:`startproject` mensetel konfigurasi "
"awalan minimal WSGI untuk anda, yang dapat anda atur sesuai kebutuhan untuk "
"proyek anda, dan melangsungkan peladen aplikasi patuh-WSGI apapun anda "
"gunakan."

msgid ""
"Django includes getting-started documentation for the following WSGI servers:"
msgstr "Django menyertakan dokumentasi mulai untuk peladen WSGI berikut:"

msgid ""
"The key concept of deploying with WSGI is the ``application`` callable which "
"the application server uses to communicate with your code. It's commonly "
"provided as an object named ``application`` in a Python module accessible to "
"the server."
msgstr ""
"Konsep kunci dari penyebaran dengan WSGI adalah ``application`` callable "
"dimana peladen aplikasi gunakan untuk komunikasi dengan kode anda. Dia "
"umumnya disediakan sebagai sebuah obyek dinamai ``application`` di modul "
"Phyton dapat diakses ke peladen."

msgid ""
"The :djadmin:`startproject` command creates a file :file:`<project_name>/"
"wsgi.py` that contains such an ``application`` callable."
msgstr ""
"Perintah :djadmin:`startproject` membuat sebuah berkas :file:`<project_name>/"
"wsgi.py` yang mengandung seperti callable ``aplication``."

msgid ""
"It's used both by Django's development server and in production WSGI "
"deployments."
msgstr ""
"Itu digunakan kedua oleh peladen pengembangan Django dan dalam produksi "
"penyebaran WSGI."

msgid ""
"WSGI servers obtain the path to the ``application`` callable from their "
"configuration. Django's built-in server, namely the :djadmin:`runserver` "
"command, reads it from the :setting:`WSGI_APPLICATION` setting. By default, "
"it's set to ``<project_name>.wsgi.application``, which points to the "
"``application`` callable in :file:`<project_name>/wsgi.py`."
msgstr ""
"Peladen WSGI mengambil jalur pada callable ``application`` dari konfigurasi "
"mereka. Peladen pasang tetap Django, yaitu perintah :djadmin:`runserver`, "
"membacanya dari pengaturan :setting:`WSGI_APPLICATION`. Secara awalan, dia "
"disetel ke ``<project_name>.wsgi.application``, yang menunjuk ke "
"``application`` dapat dipanggil dalam :file:`<project_name>/wsgi.py`."

msgid ""
"When the WSGI server loads your application, Django needs to import the "
"settings module — that's where your entire application is defined."
msgstr ""
"Ketika peladen WSGI memuat aplikasi anda, Django butuh mengimpor modul "
"pengaturan -- itu dimana aplikasi keseluruhan anda ditentukan."

msgid ""
"If this variable isn't set, the default :file:`wsgi.py` sets it to ``mysite."
"settings``, where ``mysite`` is the name of your project. That's how :"
"djadmin:`runserver` discovers the default settings file by default."
msgstr ""
"Jika variabel ini belum disetel, nilai awal :file:`wsgi.py` disetel ke "
"``mysite.settings``, dinama ``mysite`` adalah nama dari proyek anda. Itu "
"bagaimana :djadmin:`runserver` menemukan berkas pengaturan awal secara awal."

msgid ""
"Since environment variables are process-wide, this doesn't work when you run "
"multiple Django sites in the same process. This happens with mod_wsgi."
msgstr ""
"Sejak lingkungan variabel diproses luas, ini tidak bekerja ketika anda "
"menjalankan banyak situs Django dalam pengolahan yang sama. Ini terjadi "
"dengan mod_wsgi."

msgid ""
"To avoid this problem, use mod_wsgi's daemon mode with each site in its own "
"daemon process, or override the value from the environment by enforcing ``os."
"environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"`` in your :file:"
"`wsgi.py`."
msgstr ""
"Untuk menghindari masalah ini, gunakan suasana daemon wsgi dengan setiap "
"situs di pengolahan daemon itu sendiri, atau menimpa nilai dari lingkungan "
"dengan memaksa ``os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite."
"settings\"`` dalam :file:`wsgi.py` anda."

msgid "Applying WSGI middleware"
msgstr "Memberlakukan middleware WSGI"

msgid ""
"To apply :pep:`WSGI middleware <3333#middleware-components-that-play-both-"
"sides>` you can wrap the application object. For instance you could add "
"these lines at the bottom of :file:`wsgi.py`::"
msgstr ""
"Untuk memberlakukan :pep:`WSGI middleware <3333#middleware-components-that-"
"play-both-sides>` anda dapat membungkus obyek aplikasi. Contohnya anda dapat "
"menambah baris ini dibawah dari :file:`wsgi.py`::"

msgid ""
"You could also replace the Django WSGI application with a custom WSGI "
"application that later delegates to the Django WSGI application, if you want "
"to combine a Django application with a WSGI application of another framework."
msgstr ""
"Anda juga dapar mengganti aplikasi WSGI Django dengan penyesuaian aplikasi "
"WSGI yang diutuskan kemudian pada aplikasi WSGI Django, jika anda ingin "
"menggabungkan aplikasi Django dengan aplikasi WSGI dari kerangka lain."

msgid "How to use Django with Apache and ``mod_wsgi``"
msgstr "Bagaimana menggunakan Django dengan Apache dan ``mod_wsgi``"

msgid ""
"Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to "
"get Django into production."
msgstr ""
"Menyebarkan Django dengan Apache_ dan ``mod_wsgi`_ adalah jalan percobaan "
"dan pengujian untuk mendapatkan Django dalam produksi."

msgid ""
"mod_wsgi is an Apache module which can host any Python WSGI_ application, "
"including Django. Django will work with any version of Apache which supports "
"mod_wsgi."
msgstr ""
"mod_wsgi adalah sebuah modul Apache yang dapat merumahkan aplikasi "
"WSGI_Python apapun, termasuk Django. Django akan bekerja dengan versi apapun "
"dari Apache yang mendukung mod_wsgi."

msgid ""
"The `official mod_wsgi documentation`_ is your source for all the details "
"about how to use mod_wsgi. You'll probably want to start with the "
"`installation and configuration documentation`_."
msgstr ""
"`official mod_wsgi documentation`_ adalah sumber anda untuk semua rincian "
"tentang bagaimana menggunakan mod_wsgi. Anda akan mungkin ingin memulai "
"dengan `installation and configuration documentation`_."

msgid "Basic configuration"
msgstr "Konfigurasi dasar"

msgid ""
"Once you've got mod_wsgi installed and activated, edit your Apache server's "
"`httpd.conf`_ file and add the following."
msgstr ""
"Setelah anda punya mod_wsgi terpasang dan aktif, rubah berkas `httpd.conf`_ "
"peladen Apache dan tambahkan berikut."

msgid ""
"The first bit in the ``WSGIScriptAlias`` line is the base URL path you want "
"to serve your application at (``/`` indicates the root url), and the second "
"is the location of a \"WSGI file\" -- see below -- on your system, usually "
"inside of your project package (``mysite`` in this example). This tells "
"Apache to serve any request below the given URL using the WSGI application "
"defined in that file."
msgstr ""
"Bit pertama dalam baris ``WSGIScriptAlias`` adalah jalur URL dasar anda "
"ingin melayani aplikasi anda pada (``/`` mengindikasikan url akar), dan "
"kedua adalah tempat dari \"berkas WSGI\" -- lihat dibawa -- pada sistem "
"anda, biasanya didalam paket proyek anda (``mysite`` di contoh ini). Ini "
"memberitahu Apache untuk melayani setiap permintaan dibawah URL yang "
"diberikan menggunakan aplikasi WSGI yang ditentukan dalam berkas itu."

msgid ""
"If you install your project's Python dependencies inside a :mod:`virtual "
"environment <venv>`, add the path using ``WSGIPythonHome``. See the "
"`mod_wsgi virtual environment guide`_ for more details."
msgstr ""

msgid ""
"The ``WSGIPythonPath`` line ensures that your project package is available "
"for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""
"Baris ``WSGIPythonPath`` memastikan bahwa paket proyek anda tersedia untuk "
"diimpor pada jalur Python; dengan kata lain, bahwa ``import mysite`` bekerja."

msgid ""
"The ``<Directory>`` piece ensures that Apache can access your :file:`wsgi."
"py` file."
msgstr ""
"Potongan ``<Directory>`` memastikan bahwa Apache dapat mengakses berkas :"
"file:`wsgi.py` anda."

msgid ""
"Next we'll need to ensure this :file:`wsgi.py` with a WSGI application "
"object exists. As of Django version 1.4, :djadmin:`startproject` will have "
"created one for you; otherwise, you'll need to create it. See the :doc:`WSGI "
"overview documentation</howto/deployment/wsgi/index>` for the default "
"contents you should put in this file, and what else you can add to it."
msgstr ""
"Selanjutnya kami akan butuh memastikan berkas ini :file:`wsgi.py` dengan "
"obyek aplikasi WSGI ada. Sehingga Django versi 1.4, :djadmin:`startproject` "
"akan membuat satu untuk anda; jika tidak, anda akan butuh membuatnya. Lihat :"
"doc:`WSGI overview documentation</howto/deployment/wsgi/index>` untuk isi "
"awal anda harus tempatkan dalam berkas ini, dan apa lagi yang anda dapat "
"tambahkan."

msgid ""
"If multiple Django sites are run in a single mod_wsgi process, all of them "
"will use the settings of whichever one happens to run first. This can be "
"solved by changing::"
msgstr ""
"Jika situs Django banyak berjalan dalam pengolahan mod_wsgi tunggal, semua "
"dari mereka akan menggunakan pengaturan dari manasaja satu terjadi untuk "
"dijalankan pertama kali. Ini dapat diselesaikan dengan merubah::"

msgid "in ``wsgi.py``, to::"
msgstr "di ``wsgi.py``, untuk::"

msgid ""
"or by :ref:`using mod_wsgi daemon mode<daemon-mode>` and ensuring that each "
"site runs in its own daemon process."
msgstr ""
"atau dengan :ref:`using mod_wsgi daemon mode<daemon-mode>` dan memastikan "
"bahwa setiap situs berjalan dalam pengolahan daemon nya sendiri."

msgid "Fixing ``UnicodeEncodeError`` for file uploads"
msgstr "Memperbaiki ``UnicodeEncodeError`` untuk mengunggah berkas"

msgid ""
"If you get a ``UnicodeEncodeError`` when uploading or writing files with "
"file names or content that contains non-ASCII characters, make sure Apache "
"is configured to support UTF-8 encoding:"
msgstr ""

msgid ""
"A common location to put this configuration is ``/etc/apache2/envvars``."
msgstr ""
"Lokasi biasa tempat meletakkan konfigurasi ini di ``/etc/apache2/envvars``."

msgid ""
"Alternatively, if you are :ref:`using mod_wsgi daemon mode<daemon-mode>` you "
"can add ``lang`` and ``locale`` options to the ``WSGIDaemonProcess`` "
"directive:"
msgstr ""

msgid ""
"See the :ref:`unicode-files` section of the Unicode reference guide for "
"details."
msgstr ""
"Lihat bagian :ref:`unicode-files` dari panduan acuan Unicode untuk rincian."

msgid "Using ``mod_wsgi`` daemon mode"
msgstr "Menggunakan ``mod_wsgi`` mode daemon"

msgid ""
"\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows "
"platforms). To create the required daemon process group and delegate the "
"Django instance to run in it, you will need to add appropriate "
"``WSGIDaemonProcess`` and ``WSGIProcessGroup`` directives. A further change "
"required to the above configuration if you use daemon mode is that you can't "
"use ``WSGIPythonPath``; instead you should use the ``python-path`` option to "
"``WSGIDaemonProcess``, for example:"
msgstr ""
"\"Daemon mode\" adalah suasana yang dianjurkan untuk menjalankan mod_wsgi "
"(pada serambi bukan-Windows). Untuk membuat kelompok pengolahan daemon yang "
"dibutuhkan dan menugaskan instance Django untuk menjalankan di dalamnya, "
"anda akan butuh menambahkan arahan ``WSGIDaemonProcess`` dan "
"``WSGIProcessGroup`` sesuai. Perubahan lebih lanjut pada konfigurasi diatas "
"jika anda menggunakan suasana daemon adalah anda tidak dapat menggunakan "
"``WSGIPythonPath``; daripada anda harus menggunakan pilihan ``python-path`` "
"ke ``WSGIDaemonProcess``, sebagai contoh:"

msgid ""
"If you want to serve your project in a subdirectory (``https://example.com/"
"mysite`` in this example), you can add ``WSGIScriptAlias`` to the "
"configuration above:"
msgstr ""
"Jika anda ingin melayani proyek anda dalam subdirektori (``https://example."
"com/mysite`` dalam contoh ini), anda dapat menambahkan ``WSGIScriptAlias`` "
"pada konfigurasi diatas:  "

msgid ""
"See the official mod_wsgi documentation for `details on setting up daemon "
"mode`_."
msgstr ""
"Lihat dokumentasi mod_wsgi resmi untuk `details on setting up daemon mode`_."

msgid "Serving files"
msgstr "Melayani berkas"

msgid ""
"Django doesn't serve files itself; it leaves that job to whichever web "
"server you choose."
msgstr ""
"Django tidak melayani berkas-berkas dia sendiri; dia menyerahkan pekerjaan "
"itu ke apapun peladen yang anda pilih."

msgid ""
"We recommend using a separate web server -- i.e., one that's not also "
"running Django -- for serving media. Here are some good choices:"
msgstr ""
"Kami menganjurkan menggunakan peladen jaringan terpisah -- yaitu, satu yang "
"tidak menjalankan Django -- untuk melayani media. Ini ada beberapa pilihan "
"bagus:"

msgid "Nginx_"
msgstr "Nginx_"

msgid "A stripped-down version of Apache_"
msgstr "Versi ringkas dari Apache_"

msgid ""
"If, however, you have no option but to serve media files on the same Apache "
"``VirtualHost`` as Django, you can set up Apache to serve some URLs as "
"static media, and others using the mod_wsgi interface to Django."
msgstr ""
"Jika, bagaimanapun, anda tidak mempunyai pilihan tetapi untuk melayani "
"berkas-berkas media pada Apache ``VirtualHost`` sama sebagai Django, anda "
"dapat menyetel Apache untuk melayani beberapa URL sebagai media statis, dan "
"lainnya menggunakan antarmuka mod_wsgi ke Django."

msgid ""
"This example sets up Django at the site root, but serves ``robots.txt``, "
"``favicon.ico``, and anything in the ``/static/`` and ``/media/`` URL space "
"as a static file. All other URLs will be served using mod_wsgi:"
msgstr ""
"Contoh ini menyetel Django pada akar situs, tetapi melayani ``robots.txt``, "
"``favicon.ico``, dan apapun dalam ruang URL ``/static/`` dan ``/media/`` "
"sebagai berkas statis. Semua URL lain akan dilayani menggunakan mod_wsgi:"

msgid "Serving the admin files"
msgstr "Melayani berkas admin"

msgid ""
"When :mod:`django.contrib.staticfiles` is in :setting:`INSTALLED_APPS`, the "
"Django development server automatically serves the static files of the admin "
"app (and any other installed apps). This is however not the case when you "
"use any other server arrangement. You're responsible for setting up Apache, "
"or whichever web server you're using, to serve the admin files."
msgstr ""

msgid ""
"The admin files live in (:source:`django/contrib/admin/static/admin`) of the "
"Django distribution."
msgstr ""

msgid ""
"We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle "
"the admin files (along with a web server as outlined in the previous "
"section; this means using the :djadmin:`collectstatic` management command to "
"collect the static files in :setting:`STATIC_ROOT`, and then configuring "
"your web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), "
"but here are three other approaches:"
msgstr ""

msgid ""
"Create a symbolic link to the admin static files from within your document "
"root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""
"Buat sebuah tautan simbolis ke berkas statis admin dari dalam akar dokumen "
"anda (ini mungkin membutuhkan ``+FollowSymLinks`` dalam konfigurasi Apache "
"anda)."

msgid ""
"Use an ``Alias`` directive, as demonstrated above, to alias the appropriate "
"URL (probably :setting:`STATIC_URL` + ``admin/``) to the actual location of "
"the admin files."
msgstr ""
"Gunakan sebuah petunjuk ``Alias``, seperti yang ditampilkan diatas, untuk "
"alias URL yang sesuai (mungkin :setting:`STATIC_URL` + ``admin/``) ke tempat "
"sebenarnya dari berkas-berkas admin."

msgid ""
"Copy the admin static files so that they live within your Apache document "
"root."
msgstr ""
"Salin berkas tetap admin sehingga mereka berada dalam akar dokumen Apache "
"anda."

msgid "Authenticating against Django's user database from Apache"
msgstr "Otentifikasi terhadap pengguna basisdata Django dari Apache"

msgid ""
"Django provides a handler to allow Apache to authenticate users directly "
"against Django's authentication backends. See the :doc:`mod_wsgi "
"authentication documentation </howto/deployment/wsgi/apache-auth>`."
msgstr ""
"Django menyediakan sebuah penanganan untuk mengizinkan Apache untuk "
"membuktikan keaslian pengguna secara langsung terhadap backend pembuktian "
"keaslian Django. Lihat :doc:`mod_wsgi authentication documentation </howto/"
"deployment/wsgi/apache-auth>`."

msgid "How to use Django with uWSGI"
msgstr "Bagaimana menggunakan Django dengan uWSGI"

msgid ""
"uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application "
"container server coded in pure C."
msgstr ""
"uWSGI_ adalah cepat, menyembuhkan-sendiri dan wadah peladen  aplikasi "
"developer/sysadmin-friendly dikodekan dalam C murni."

msgid ""
"The uWSGI docs offer a `tutorial`_ covering Django, nginx, and uWSGI (one "
"possible deployment setup of many). The docs below are focused on how to "
"integrate Django with uWSGI."
msgstr ""
"Dokumen uWSGI menawarkan sebuah `tutorial`_ mencangkup Django, nginx, dan "
"uWSGI (satu kemungkinan penyebaran pengaturan dari banyak). Dokumen dibawah "
"fokus pada bagaimana menggabungkan Django dengan uWSGI."

msgid "Prerequisite: uWSGI"
msgstr "Prasyarat: uWSGI"

msgid ""
"The uWSGI wiki describes several `installation procedures`_. Using pip, the "
"Python package manager, you can install any uWSGI version with a single "
"command. For example:"
msgstr ""
"Wiki uWSGI menggambarkan beberapa `installation procedures`_. Menggunakan "
"pip, pengelola paket Python, anda dapat memasang versi uWSGI apapun dengan "
"perintah tunggal. Sebagai contoh:"

msgid "uWSGI model"
msgstr "Model uWSGI"

msgid ""
"uWSGI operates on a client-server model. Your web server (e.g., nginx, "
"Apache) communicates with a ``django-uwsgi`` \"worker\" process to serve "
"dynamic content."
msgstr ""
"uWSGI beroperasi pada model client-server. Peladen jaringan anda (misalnya, "
"nginx, Apache) berkomunikasi dengan proses ``django-uwsgi`` \"worker\" untuk "
"melayani isi dinamis."

msgid "Configuring and starting the uWSGI server for Django"
msgstr "Mengkonfigurasi dan memulai peladen uWSGI  untuk Django"

msgid ""
"uWSGI supports multiple ways to configure the process. See uWSGI's "
"`configuration documentation`_."
msgstr ""
"uWSGI mendukung banyak cara untuk mengkonfigurasi pengolahan. Lihat "
"`configuration documentation`_ uWSGI."

msgid "Here's an example command to start a uWSGI server:"
msgstr ""

msgid ""
"This assumes you have a top-level project package named ``mysite``, and "
"within it a module :file:`mysite/wsgi.py` that contains a WSGI "
"``application`` object. This is the layout you'll have if you ran ``django-"
"admin startproject mysite`` (using your own project name in place of "
"``mysite``) with a recent version of Django. If this file doesn't exist, "
"you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` "
"documentation for the default contents you should put in this file and what "
"else you can add to it."
msgstr ""
"Ini menganggap anda mempunyai paket proyek tingkat-tinggi bernama "
"``mysite``, dan dalamnya sebuah modul :file:`mysite/wsgi.py` yang mengandung "
"obyek ``application`` WSGI. Ini adalah tata letak anda akan punyai jika anda "
"menjalankan ``django-admin startproject mysite`` (menggunakan nama proyek "
"anda sendiri di tempat ``mysite``) dengan versi baru dari Django. Jika "
"berkas ini tidak ada, anda akan butuh membuatnya. Lihat dokumentasi :doc:`/"
"howto/deployment/wsgi/index` untuk isi awal anda harus taruh dalam berkas "
"ini dan apa lagi anda dapat tambahkan ke dia."

msgid "The Django-specific options here are:"
msgstr "Pilihan khusus-Django disini adalah:"

msgid ""
"``chdir``: The path to the directory that needs to be on Python's import "
"path -- i.e., the directory containing the ``mysite`` package."
msgstr ""
"``chdir``: Jalur ke direktori yang dibutuhkan berada di jalur impor Python "
"-- yaitu direktori mengandung paket ``mysite``."

msgid ""
"``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module "
"that :djadmin:`startproject` creates."
msgstr ""
"``module``: modul WSGI dogunakan -- mungkin modul  ``mysite.wsgi`` yang :"
"djadmin:`startproject` buat."

msgid ""
"``env``: Should probably contain at least :envvar:`DJANGO_SETTINGS_MODULE`."
msgstr ""
"``env``: Harus kemungkinan mengandung setidaknya :envvar:"
"`DJANGO_SETTINGS_MODULE`."

msgid "``home``: Optional path to your project virtual environment."
msgstr "``home``: Jalur pilihan pada proyek lingkungan maya anda."

msgid "Example ini configuration file:"
msgstr ""

msgid "Example ini configuration file usage:"
msgstr ""

msgid ""
"If you get a ``UnicodeEncodeError`` when uploading files with file names "
"that contain non-ASCII characters, make sure uWSGI is configured to accept "
"non-ASCII file names by adding this to your ``uwsgi.ini``:"
msgstr ""

msgid ""
"See the uWSGI docs on `managing the uWSGI process`_ for information on "
"starting, stopping and reloading the uWSGI workers."
msgstr ""
"Lihat dokumentasi uWSGI pada `managing the uWSGI process`_ untuk informasi "
"pada permulaan, pemberhentian dan memuat kembali pekerja-pekerja uWSGI."

msgid "How to manage error reporting"
msgstr "Bagaimana mengelola pelaporan kesalahan"

msgid ""
"When you're running a public site you should always turn off the :setting:"
"`DEBUG` setting. That will make your server run much faster, and will also "
"prevent malicious users from seeing details of your application that can be "
"revealed by the error pages."
msgstr ""
"Ketika anda sedang menjalankan situs umum anda harus selalu mematikan "
"pengaturan :setting:`DEBUG`. Itu akan membuat peladen anda berjalan lebih "
"cepat, dan juga akan mencegah pengguna hahat dari melihat rincian dari "
"aplikasi anda yang dapat diungkap dengan kesalahan halaman."

msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will instead see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr ""

msgid "Email reports"
msgstr "Surel laporan"

msgid "Server errors"
msgstr "Kesalahan peladen"

msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (strictly speaking, for "
"any response with an HTTP status code of 500 or greater). This gives the "
"administrators immediate notification of any errors. The :setting:`ADMINS` "
"will get a description of the error, a complete Python traceback, and "
"details about the HTTP request that caused the error."
msgstr ""

msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify :"
"setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and :setting:"
"`EMAIL_HOST_PASSWORD`, though other settings may be also required depending "
"on your mail server's configuration. Consult :doc:`the Django settings "
"documentation </ref/settings>` for a full list of email-related settings."
msgstr ""
"Agar mengirim surel, Django membutuhkan beberapa pengaturan mengatakannya "
"bagaimana terhubung ke peladen surat anda. Setidaknya, anda akan butuh "
"menentukan :setting:`EMAIL_HOST` dan kemungkinan :setting:`EMAIL_HOST_USER` "
"dan :setting:`EMAIL_HOST_PASSWORD`, meskipun pengaturan lainnya mungkin "
"tidak juga dibutuhkan tergantung pada konfigurasi peladen surat anda. "
"Rundingkan :doc:`the Django settings documentation </ref/settings>` untuk "
"daftar penuh dari pengaturan terkait-surel."

msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""
"Secara awal, Django akan mengirim surel dari root@localhost. Bagaimanapun, "
"beberapa penyedia surat menolak semua surel dari alamat ini. Untuk "
"menggunakan alamat pengirim berbeda, rubah pengaturan :setting:"
"`SERVER_EMAIL`."

msgid ""
"To activate this behavior, put the email addresses of the recipients in the :"
"setting:`ADMINS` setting."
msgstr ""
"Untuk mengaktifkan perilaku ini, masukkan alamat surel dari penerima di "
"bagian :setting:`ADMINS`."

msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration </"
"topics/logging>`."
msgstr ""
"Surel kesalahan peladen dikirim menggunakan kerangka pencatatan, jadi anda "
"dapat menyesuaikan perilaku ini dengan :doc:`customizing your logging "
"configuration </topics/logging>`. "

msgid "404 errors"
msgstr "kesalahan 404"

msgid ""
"Django can also be configured to email errors about broken links (404 \"page "
"not found\" errors). Django sends emails about 404 errors when:"
msgstr ""
"Django juga dapat dikonfirgasi untuk mengirimkan surel kesalahan tentang "
"tautan yang tidak ditemukan (404 \"page not found\" errors). Django mengirim "
"surel tentang error 404 ketika:"

msgid ":setting:`DEBUG` is ``False``;"
msgstr ":setting:`DEBUG` adalah ``False``;"

msgid ""
"Your :setting:`MIDDLEWARE` setting includes :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware`."
msgstr ""
"Pengaturan :setting:`MIDDLEWARE` anda termasuk :class:`django.middleware."
"common.BrokenLinkEmailsMiddleware`."

msgid ""
"If those conditions are met, Django will email the users listed in the :"
"setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. It doesn't bother to email for 404s that don't have a referer "
"-- those are usually people typing in broken URLs or broken web bots. It "
"also ignores 404s when the referer is equal to the requested URL, since this "
"behavior is from broken web bots too."
msgstr ""

msgid ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` must appear "
"before other middleware that intercepts 404 errors, such as :class:`~django."
"middleware.locale.LocaleMiddleware` or :class:`~django.contrib.flatpages."
"middleware.FlatpageFallbackMiddleware`. Put it toward the top of your :"
"setting:`MIDDLEWARE` setting."
msgstr ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` harus muncul "
"sebelum middleware lain yang memotong kesalahan 404, seperti :class:`~django."
"middleware.locale.LocaleMiddleware` atau :class:`~django.contrib.flatpages."
"middleware.FlatpageFallbackMiddleware`. Letakkan ke arah atas dari setelan :"
"setting:`MIDDLEWARE`."

msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the :"
"setting:`IGNORABLE_404_URLS` setting. It should be a list of compiled "
"regular expression objects. For example::"
msgstr ""
"Anda dapat memberitahu Django untuk menghentikan pelaporan tertentu 404 "
"dengan merubah pengaturan :setting:`IGNORABLE_404_URLS`. Dia harus menjadi "
"daftar dari obyek ungkapan biasa tersusun. Sebagai contoh::"

msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""
"Dalam contoh ini, sebuah 404 pada setiap URL berakhiran dengan ``.php`` atau "
"``.cgi`` akan *tidak* dilaporkan. Juga tidak akan URL apapun dimulai dengan "
"``/phpmyadmin/``."

msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr ""
"Contoh berikut menunjukkan bagaimana mengeluarkan beberapa URL biasa yang "
"perambah dan penjilat sering diminta::"

msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr ""
"(Perhatikan bahwa ini adalah regular expression, jadi kita tuliskan garis "
"miring terbalik di depan titik untuk melepaskannya)"

msgid ""
"If you'd like to customize the behavior of :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware` further (for example to ignore requests coming "
"from web crawlers), you should subclass it and override its methods."
msgstr ""
"Jika anda suka menyesuaikan perilaku dari :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware` lebih lanjut (sebagai contoh untuk mengabaikan "
"permintaan datang dari penjilat jaringan), anda harus mensubkelaskannya dan "
"menimpa caranya."

msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""
"Kesalahan 404 dicatat menggunakan kerangka pencatatan. Secara awal, rekaman "
"catatan ini diabaikan, tetapi anda dapat menggunakan mereka untuk kesalahan "
"pelaporan dengan menulis sebuah penanganan :doc:`configuring logging </"
"topics/logging>` dengan benar."

msgid "Filtering error reports"
msgstr "Menyaring laporan kesalahan"

msgid ""
"Filtering sensitive data is a hard problem, and it's nearly impossible to "
"guarantee that sensitive data won't leak into an error report. Therefore, "
"error reports should only be available to trusted team members and you "
"should avoid transmitting error reports unencrypted over the internet (such "
"as through email)."
msgstr ""

msgid "Filtering sensitive information"
msgstr "Menyaring informasi rahasia"

msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_’s local variables, and the :"
"class:`~django.http.HttpRequest`’s :ref:`attributes<httprequest-attributes>`."
msgstr ""
"Laporan kesalahan sangat membantu untuk memeriksa kesalahan, jadi dia "
"umumnya berguna untuk merekam informasi terkait tentang kesalahan-kesalahan "
"tersebut sebanyak mungkin. Sebagai contoh, secara awal rekaman Django `full "
"traceback`_ untuk dimunculkan pengecualian, setiap variabel lokal `full "
"traceback`_, dan :ref:`attributes<httprequest-attributes>` :class:`~django."
"http.HttpRequest`."

msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So in addition to filtering out settings "
"that appear to be sensitive as described in the :setting:`DEBUG` "
"documentation, Django offers a set of function decorators to help you "
"control which information should be filtered out of error reports in a "
"production environment (that is, where :setting:`DEBUG` is set to "
"``False``): :func:`sensitive_variables` and :func:"
"`sensitive_post_parameters`."
msgstr ""
"Bagaimanapun, terkadang jenis-jenis informasi tertentu mungkin terlalu "
"sensitif dan dengan demikian mungkin tidak sesuai untuk terus melacak, "
"sebagai contoh, sandi pengguna atau angka kartu kredit. Jadi di tambahaan "
"untuk menyaring pengaturan yang muncul menjadi sensitif seperti digambarkan "
"dalam dokumentasi :setting:`DEBUG`, Django menawarkan sekumpulan fungsi "
"penghias untuk membantu anda mengendalikan informasi mana harus disaring "
"dari laporan kesalahan dalam lingkungan produksi (yaitu, dimana :setting:"
"`DEBUG` disetel ke ``False``): :func:`sensitive_variables` dan :func:"
"`sensitive_post_parameters`."

msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr ""
"Jika sebuah fungsi (baik sebuah tampilan atau callback umum apapun) dalam "
"kode anda menggunakan variabel lokal rentan mengandung informasi sensitif, "
"anda mungkin mencegah nilai-nilai variabel tersebut dari menjadi disertakan "
"dalam laporan kesalahan menggunakan penghias ``sensitive_variables``::"

msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (``**********``) in the "
"error reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

msgid ""
"To systematically hide all local variables of a function from error logs, do "
"not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""
"Untuk secara sistematis menyembunyikan semua variabel lokal dari sebuah "
"fungsi dari laporan kesalahan, jangan menyediakan argumen apapun pada "
"decorator ``sensitive_variables``::"

msgid "When using multiple decorators"
msgstr "Ketika menggunakan sejumlah dekorator"

msgid ""
"If the variable you want to hide is also a function argument (e.g. "
"'``user``’ in the following example), and if the decorated function has "
"multiple decorators, then make sure to place ``@sensitive_variables`` at the "
"top of the decorator chain. This way it will also hide the function argument "
"as it gets passed through the other decorators::"
msgstr ""
"Jika variabel anda ingin sembunyikan adalah juga argumen fungsi (sebagai "
"contoh '``user``’ dalam contoh berikut), dan jika fungsi dihiasi mempunyai "
"banyak decorator, kemudian pastikan menempatkan ``@sensitive_variables`` pda "
"atas dari rantai decorator. Cara ini dia akan juga menyembunyikan argumen "
"fungsi ketika dia mendapatkan dilewati melalui decorator lain::"

msgid "Support for wrapping ``async`` functions was added."
msgstr ""

msgid ""
"If one of your views receives an :class:`~django.http.HttpRequest` object "
"with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to "
"contain sensitive information, you may prevent the values of those "
"parameters from being included in the error reports using the "
"``sensitive_post_parameters`` decorator::"
msgstr ""
"Jika satu dari tampilan anda menerima sebuah obyek :class:`~django.http."
"HttpRequest` dengan :attr:`POST parameters<django.http.HttpRequest.POST>` "
"rentan untuk mengandung informasi sensitif, anda mungkin mencegah nilai-"
"nilai dari parameter tersebut dari menjadi disertakan dalam laporan "
"kesalahan menggunakan penghias ``sensitive_post_parameters``::"

msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (``**********``) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

msgid ""
"To systematically hide all POST parameters of a request in error reports, do "
"not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""
"Untuk secara sistematis menyembunyikan semua parameter POST dari sebuah "
"permintaan dalam laporan kesalahan, jangan menyediakan argumen apapun pada "
"decorator ``sensitive_variables``::"

msgid ""
"All POST parameters are systematically filtered out of error reports for "
"certain :mod:`django.contrib.auth.views` views (``login``, "
"``password_reset_confirm``, ``password_change``, and ``add_view`` and "
"``user_change_password`` in the ``auth`` admin) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""
"Semua parameter POST adalah sistematis disaring keluar dari laporan "
"kesalahan untuk tampilan :mod:`django.contrib.auth.views` tertentu "
"(``login``, ``password_reset_confirm``, ``password_change``, dan "
"``add_view`` dan ``user_change_password`` dalam admin ``auth``) untuk "
"mencegah dari pembocoran dari informasi sensitif seperti sandi pengguna."

msgid "Custom error reports"
msgstr "Penyesuaian laporan kesalahan"

msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is, "
"respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: :class:`django.views.debug."
"SafeExceptionReporterFilter`. This filter uses the decorators' annotations "
"to replace the corresponding values with stars (``**********``) when the "
"error reports are produced. If you wish to override or customize this "
"default behavior for your entire site, you need to define your own filter "
"class and tell Django to use it via the :setting:"
"`DEFAULT_EXCEPTION_REPORTER_FILTER` setting::"
msgstr ""

msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``’s ``exception_reporter_filter`` "
"attribute::"
msgstr ""
"Anda dapat juga mengendalikan cara lebih kecil penyaring mana untuk "
"digunakan dalam tampilan yang diberikan oleh pengaturan atribut "
"``exception_reporter_filter`` ``HttpRequest``::"

msgid ""
"Your custom filter class needs to inherit from :class:`django.views.debug."
"SafeExceptionReporterFilter` and may override the following attributes and "
"methods:"
msgstr ""
"Kelas saringan penyesuaian anda perlu mewarisi dari :class:`django.views."
"debug.SafeExceptionReporterFilter` dan mungkin menimpa atribut dan metode "
"berikut:"

msgid ""
"The string value to replace sensitive value with. By default it replaces the "
"values of sensitive variables with stars (``**********``)."
msgstr ""
"Nilai string untuk mengganti nilai sensitif. Secara awalan itu mengganti "
"nilai dari variabel sensitif dengan bintang (``**********``)."

msgid ""
"A compiled regular expression object used to match settings and ``request."
"META`` values considered as sensitive. By default equivalent to::"
msgstr ""
"Sebuah obyek regular expression tersusun digunakan untuk mencocokkan "
"pengaturan dan nilai ``request.META`` yang dianggap sensitif. Secara awalan "
"setara pada::"

msgid ""
"Returns ``True`` to activate the filtering in :meth:`get_post_parameters` "
"and :meth:`get_traceback_frame_variables`. By default the filter is active "
"if :setting:`DEBUG` is ``False``. Note that sensitive ``request.META`` "
"values are always filtered along with sensitive setting values, as described "
"in the :setting:`DEBUG` documentation."
msgstr ""

msgid ""
"Returns the filtered dictionary of POST parameters. Sensitive values are "
"replaced with :attr:`cleansed_substitute`."
msgstr ""
"Mengembalikan dictionary yang disaring dari parameter POST. Nilai sensitif "
"diganti dengan :attr:`cleansed_substitute`."

msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. Sensitive values are replaced with :attr:`cleansed_substitute`."
msgstr ""
"Mengembalikan dictionary yang disaring dari variabel lokal untuk untuk "
"kerangka traceback yang diberikan. Nilai sensitif diganti dengan :attr:"
"`cleansed_substitute`."

msgid ""
"If you need to customize error reports beyond filtering you may specify a "
"custom error reporter class by defining the :setting:"
"`DEFAULT_EXCEPTION_REPORTER` setting::"
msgstr ""
"Jika anda butuh menyesuaikan laporan kesalahan melampaui penyaringan anda "
"mungkin menentukan kelas pelapor kesalahan disesuaikan dengan menentukan "
"pengaturan :setting:`DEFAULT_EXCEPTION_REPORTER`."

msgid ""
"The exception reporter is responsible for compiling the exception report "
"data, and formatting it as text or HTML appropriately. (The exception "
"reporter uses :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` when preparing "
"the exception report data.)"
msgstr ""

msgid ""
"Your custom reporter class needs to inherit from :class:`django.views.debug."
"ExceptionReporter`."
msgstr ""
"Kelas pelapor disesuaikan anda butuh diwarisi dari :class:`django.views."
"debug.ExceptionReporter`."

msgid ""
"Property that returns a :class:`pathlib.Path` representing the absolute "
"filesystem path to a template for rendering the HTML representation of the "
"exception. Defaults to the Django provided template."
msgstr ""

msgid ""
"Property that returns a :class:`pathlib.Path` representing the absolute "
"filesystem path to a template for rendering the plain-text representation of "
"the exception. Defaults to the Django provided template."
msgstr ""

msgid "Return a dictionary containing traceback information."
msgstr "Mengembalikan sebuah dictionary menanggung informasi melacak kembali."

msgid ""
"This is the main extension point for customizing exception reports, for "
"example::"
msgstr ""
"Ini adalah titik ekstensi utama untuk menyesuaikan laporan pengecualian, "
"sebagai contoh::"

msgid "Return HTML version of exception report."
msgstr "Mengembalikan versi HTML dari laporan pengecualian."

msgid "Used for HTML version of debug 500 HTTP error page."
msgstr ""
"Digunakan untuk versi HTML dari pengawakutu halaman kesalahan HTTP  500."

msgid "Return plain text version of exception report."
msgstr "Mengembalikan versi teks polis dari laporan pengecualian."

msgid ""
"Used for plain text version of debug 500 HTTP error page and email reports."
msgstr ""
"Digunakan untuk versi teks polos dari pengawakutu halaman kesalahan HTTP 500 "
"dan laporan surel."

msgid ""
"As with the filter class, you may control which exception reporter class to "
"use within any given view by setting the ``HttpRequest``’s "
"``exception_reporter_class`` attribute::"
msgstr ""

msgid ""
"You can also set up custom error reporting by writing a custom piece of :ref:"
"`exception middleware <exception-middleware>`. If you do write custom error "
"handling, it's a good idea to emulate Django's built-in error handling and "
"only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""
"Anda dapat juga mengatur penyesuaian pelaporan kesalahan dengan menulis "
"sebuah potongan penyesuaian dari :ref:`exception middleware <exception-"
"middleware>`. Jika anda melakukan menulis penyesuaian penanganan kesalahan, "
"adalah ide bagus untuk meniru penanganan kesalahan siap pakai Django dan "
"hanya laporan/catatan kesalahan jika setting:`DEBUG` adalah ``False``."

msgid "\"How-to\" guides"
msgstr "Panduan \"Bagaimana\""

msgid ""
"Here you'll find short answers to \"How do I....?\" types of questions. "
"These how-to guides don't cover topics in depth -- you'll find that material "
"in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these guides "
"will help you quickly accomplish common tasks."
msgstr ""
"Disini anda akan menemukan jawaban pendek pada jenis pertanyaan \"Bagaimana "
"Saya....?\". Panduanbagaimana-untuk ini tidak mencakupi topik lebih dalam -- "
"anda akan menemukan bahan tersebut di :doc:`/topics/index` dan the :doc:`/"
"ref/index`. Bagaimanapun, panduan ini akan membantu anda dengan cepat "
"menyelesaikan tugas-tugas umum."

msgid ""
"The `Django community aggregator`_, where we aggregate content from the "
"global Django community. Many writers in the aggregator write this sort of "
"how-to material."
msgstr ""
"`Django community aggregator`_, dimana kami mengumpulkan isi dari komunitas "
"Django keseluruhan. Banyak penulis di perkumpulan menulis bahan bagaimana-"
"untuk semacam ini."

msgid "How to provide initial data for models"
msgstr "Bagaimana menyediakan data awal untuk model"

msgid ""
"It's sometimes useful to prepopulate your database with hard-coded data when "
"you're first setting up an app. You can provide initial data with migrations "
"or fixtures."
msgstr ""
"Terkadang berguna mengisi terlebih dahulu basisdata anda dengan data berkode "
"keras ketika anda pertama kali mensetel aplikasi. Anda dapat menyediakan "
"data awal dengan perpindahan atau perlengkapan."

msgid "Provide initial data with migrations"
msgstr ""

msgid ""
"To automatically load initial data for an app, create a :ref:`data migration "
"<data-migrations>`. Migrations are run when setting up the test database, so "
"the data will be available there, subject to :ref:`some limitations <test-"
"case-serialized-rollback>`."
msgstr ""

msgid "Provide data with fixtures"
msgstr ""

msgid ""
"You can also provide data using :ref:`fixtures <fixtures-explanation>`, "
"however, this data isn't loaded automatically, except if you use :attr:`."
"TransactionTestCase.fixtures`."
msgstr ""

msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. The most straightforward way of creating a fixture if you've "
"already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>` "
"command. Or, you can write fixtures by hand; fixtures can be written as "
"JSON, XML or YAML (with PyYAML_ installed) documents. The :doc:"
"`serialization documentation </topics/serialization>` has more details about "
"each of these supported :ref:`serialization formats <serialization-formats>`."
msgstr ""
"Perlengkapan tetap adalah sebuah kumpulan dari data yang Django ketahui "
"bagaimana diimpor kedalam sebuah basisdata. Kebanyakan jalan mudah dari "
"pembuatan perlengkapan tetap jika anda telah mendapatkan beberapa data "
"adalah untuk menggunakan perintah  :djadmin:`manage.py dumpdata <dumpdata>`. "
"Atau, anda dapat menulis perlengkapan tetap dengan tangan; perlengkapan "
"tetap dapat ditulis sebagai dokumen JSON, XML atau YAML (dengan PyYAML_ "
"terpasang). :doc:`serialization documentation </topics/serialization>` "
"mempunyai lebih rincian tentang setiap dari ini :ref:`serialization formats "
"<serialization-formats>` yang didukung."

msgid ""
"As an example, though, here's what a fixture for a ``Person`` model might "
"look like in JSON:"
msgstr ""
"Sebagai contoh, meskipun, inilah yang perlengkapan untuk model ``Person`` "
"mungkin terlihat seperti dalam JSON:"

msgid "And here's that same fixture as YAML:"
msgstr "Dan ini adalah yang perlengkapan tetap sama seperti YAML:"

msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""
"Anda akan menyimpan data ini dalam sebuah direktori ``fixtures`` didalam "
"aplikasi anda."

msgid ""
"You can load data by calling :djadmin:`manage.py loaddata <loaddata>` "
"``<fixturename>``, where ``<fixturename>`` is the name of the fixture file "
"you've created. Each time you run :djadmin:`loaddata`, the data will be read "
"from the fixture and reloaded into the database. Note this means that if you "
"change one of the rows created by a fixture and then run :djadmin:`loaddata` "
"again, you'll wipe out any changes you've made."
msgstr ""

msgid "Tell Django where to look for fixture files"
msgstr "Beritahu Django dimana mencari untuk berkas perlengkapan"

msgid ""
"By default, Django looks for fixtures in the ``fixtures`` directory inside "
"each app, so the command ``loaddata sample`` will find the file ``my_app/"
"fixtures/sample.json``. This works with relative paths as well, so "
"``loaddata my_app/sample`` will find the file ``my_app/fixtures/my_app/"
"sample.json``."
msgstr ""

msgid ""
"Django also looks for fixtures in the list of directories provided in the :"
"setting:`FIXTURE_DIRS` setting."
msgstr ""
"Django juga mencari untuk perlengkapan dalam daftar direktori disediakan "
"dalam pengaturan :setting:`FIXTURE_DIRS`."

msgid ""
"To completely prevent default search from happening, use an absolute path to "
"specify the location of your fixture file, e.g. ``loaddata /path/to/sample``."
msgstr ""

msgid "Namespace your fixture files"
msgstr "Namespace berkas perlengkapan anda"

msgid ""
"Django will use the first fixture file it finds whose name matches, so if "
"you have fixture files with the same name in different applications, you "
"will be unable to distinguish between them in your ``loaddata`` commands. "
"The easiest way to avoid this problem is by *namespacing* your fixture "
"files. That is, by putting them inside a directory named for their "
"application, as in the relative path example above."
msgstr ""

msgid ""
"Fixtures are also used by the :ref:`testing framework <topics-testing-"
"fixtures>` to help set up a consistent test environment."
msgstr ""
"Perlengkapan tetap juga digunakan oleh :ref:`testing framework <topics-"
"testing-fixtures>` untuk membantu mengatur kelesarasan lingkungan percobaan."

msgid "How to integrate Django with a legacy database"
msgstr "Bagaimana menggabungkan Django dengan basisdata warisan"

msgid ""
"While Django is best suited for developing new applications, it's quite "
"possible to integrate it into legacy databases. Django includes a couple of "
"utilities to automate as much of this process as possible."
msgstr ""
"Selagi Django adalah terbaik cocok untuk pengembangan aplikasi baru, dia "
"sangat dimungkinkan untuk menggabungkan nya kedalam warisan basisdata. "
"Django menyertakan sepasang peralatan untuk mengotomatisasi sebanyak mungkin "
"proses ini."

msgid ""
"This document assumes you know the Django basics, as covered in the :doc:"
"`tutorial </intro/tutorial01>`."
msgstr ""
"Dokumen ini menganggap anda mengetahui dasar-dasar Django, seperti yang "
"tercakup dalam :doc:`tutorial </intro/tutorial01>`."

msgid ""
"Once you've got Django set up, you'll follow this general process to "
"integrate with an existing database."
msgstr ""
"Sekali anda telah menyetel Django, anda akan mengikuti pengolahan umum untuk "
"digabungkan dengan basisdata yang ada."

msgid "Give Django your database parameters"
msgstr "Berikan Django parameter basisdata anda"

msgid ""
"You'll need to tell Django what your database connection parameters are, and "
"what the name of the database is. Do that by editing the :setting:"
"`DATABASES` setting and assigning values to the following keys for the "
"``'default'`` connection:"
msgstr ""
"Anda akan butuh memberitahu Django apa parameter hubungan basisdata anda, "
"dan apa nama dari basisdatanya. Lakukan itu dengan menyunting pengaturan :"
"setting:`DATABASES` dan tetapkan nilai-nilai pada kunci-kunci berikut untuk "
"hubungan ``'default'``:"

msgid ":setting:`NAME`"
msgstr ":setting:`NAME`"

msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ":setting:`ENGINE <DATABASE-ENGINE>`"

msgid ":setting:`USER`"
msgstr ":setting:`USER`"

msgid ":setting:`PASSWORD`"
msgstr ":setting:`PASSWORD`"

msgid ":setting:`HOST`"
msgstr ":setting:`HOST`"

msgid ":setting:`PORT`"
msgstr ":setting:`PORT`"

msgid "Auto-generate the models"
msgstr "Model yang dibangun otomatis"

msgid ""
"Django comes with a utility called :djadmin:`inspectdb` that can create "
"models by introspecting an existing database. You can view the output by "
"running this command:"
msgstr ""

msgid "Save this as a file by using standard Unix output redirection:"
msgstr ""
"Simpan ini sebagai berkas dengan menggunakan pengalihan keluaran Unix "
"standar:"

msgid ""
"This feature is meant as a shortcut, not as definitive model generation. See "
"the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""
"Fitur ini berarti sebagai sebuah jalan pintas, bukan sebagai generasi model "
"tetap. Lihat :djadmin:`documentation of inspectdb <inspectdb>` untuk "
"informasi lebih."

msgid ""
"Once you've cleaned up your models, name the file ``models.py`` and put it "
"in the Python package that holds your app. Then add the app to your :setting:"
"`INSTALLED_APPS` setting."
msgstr ""
"Sekali anda telah membersihkan model anda, namai berkas ``models.py`` dan "
"taruh dia di paket Python yang menampung aplikasi anda. Kemudian tambah "
"aplikasi ke pengaturan :setting:`INSTALLED_APPS` anda."

msgid ""
"By default, :djadmin:`inspectdb` creates unmanaged models. That is, "
"``managed = False`` in the model's ``Meta`` class tells Django not to manage "
"each table's creation, modification, and deletion::"
msgstr ""
"Secara awal, djadmin:`inspectdb` membuat model tidak terkelola. Yaitu, "
"``managed = False`` dalam kelas ``Meta`` model memberitahu Django tidak "
"mengelola setiap pembuatan tabel, perubahan, dan penghapusan::"

msgid ""
"If you do want to allow Django to manage the table's lifecycle, you'll need "
"to change the :attr:`~django.db.models.Options.managed` option above to "
"``True`` (or remove it because ``True`` is its default value)."
msgstr ""
"Jika anda tidak ingin mengizinkan Django mengelola siklus hidup tabel, anda "
"butuh merubah pilihan :attr:`~django.db.models.Options.managed` diatas "
"menjadi ``True`` (atau memindahkannya karena ``True`` adalah nilai awal)."

msgid "Install the core Django tables"
msgstr "Pasang tabel inti Django"

msgid ""
"Next, run the :djadmin:`migrate` command to install any extra needed "
"database records such as admin permissions and content types:"
msgstr ""

msgid "Test and tweak"
msgstr "Uji dan ubah"

msgid ""
"Those are the basic steps -- from here you'll want to tweak the models "
"Django generated until they work the way you'd like. Try accessing your data "
"via the Django database API, and try editing objects via Django's admin "
"site, and edit the models file accordingly."
msgstr ""
"Itu adalah langkah-langkah awal -- dari sini anda akan ingin menyesuaikan "
"model DJango dibangkitkan sampai mereka bekerja dengan cara yang anda "
"inginkan. Coba mengakses data melalui API basisdata Django, dan coba "
"menyunting obyek melalui situs admin Django, dan menyunting berkas model."

msgid "How to configure and use logging"
msgstr "Bagaimana mengkonfigurasi dan menggunakan pencatatan"

msgid ":ref:`Django logging reference <logging-ref>`"
msgstr ":ref:`Django logging reference <logging-ref>`"

msgid ":ref:`Django logging overview <logging-explanation>`"
msgstr ":ref:`Django logging overview <logging-explanation>`"

msgid ""
"Django provides a working :ref:`default logging configuration <default-"
"logging-configuration>` that is readily extended."
msgstr ""
"Django menyediakan kerja :ref:`default logging configuration <default-"
"logging-configuration>` yang mudah diperpanjang."

msgid "Make a basic logging call"
msgstr "Membuat panggilan pencatatan dasar"

msgid ""
"To send a log message from within your code, you place a logging call into "
"it."
msgstr ""
"Untuk mengirim pesan catatan dari dalam kode anda, anda dapat menempatkan "
"panggilan pencatatan kedalamnya."

msgid "Don't be tempted to use logging calls in ``settings.py``."
msgstr ""
"Jangan tergoda untuk menggunakan panggilan pencatatan dalam ``settings.py``."

msgid ""
"The way that Django logging is configured as part of the ``setup()`` "
"function means that logging calls placed in ``settings.py`` may not work as "
"expected, because *logging will not be set up at that point*. To explore "
"logging, use a view function as suggested in the example below."
msgstr ""

msgid ""
"First, import the Python logging library, and then obtain a logger instance "
"with :py:func:`logging.getLogger`. Provide the ``getLogger()`` method with a "
"name to identify it and the records it emits. A good option is to use "
"``__name__`` (see :ref:`naming-loggers` below for more on this) which will "
"provide the name of the current Python module as a dotted path::"
msgstr ""

msgid "It's a good convention to perform this declaration at module level."
msgstr ""
"Merupakan konvensi yang baik untuk melakukan deklarasi ini pada tingkat "
"modul."

msgid ""
"And then in a function, for example in a view, send a record to the logger::"
msgstr ""
"Kemudian di dalam fungsi, sebagai contoh dalam tampilan, mengirimkan rekaman "
"ke pencatat::"

msgid ""
"When this code is executed, a :py:class:`~logging.LogRecord` containing that "
"message will be sent to the logger. If you're using Django's default logging "
"configuration, the message will appear in the console."
msgstr ""
"Ketika kode ini dijalankan, :py:class:`~logging.LogRecord` mengandung pesan "
"itu akan terkirim ke pencatat. Jika anda menggunakan konfigurasi pencatatan "
"awalan Django, pesan akan muncul di konsol."

msgid ""
"The ``WARNING`` level used in the example above is one of several :ref:"
"`logging severity levels <topic-logging-parts-loggers>`: ``DEBUG``, "
"``INFO``, ``WARNING``, ``ERROR``, ``CRITICAL``. So, another example might "
"be::"
msgstr ""
"Tingkatan ``WARNING`` digunakan dalam contoh diatas adalah satu dari "
"beberapa :ref:`logging severity levels <topic-logging-parts-loggers>`: "
"``DEBUG``, ``INFO``, ``WARNING``, ``ERROR``, ``CRITICAL``. Jadi, contoh lain "
"mungkin::"

msgid ""
"Records with a level lower than ``WARNING`` will not appear in the console "
"by default. Changing this behavior requires additional configuration."
msgstr ""
"Rekaman dengan tingkatan rendah daripada ``WARNING`` tidak akan muncul dalam "
"konsol secara awalan. Merubah perilaku ini membutuhkan konfigurasi tambahan."

msgid "Customize logging configuration"
msgstr "Menyesuaikan konfigurasi pencatatan"

msgid ""
"Although Django's logging configuration works out of the box, you can "
"control exactly how your logs are sent to various destinations - to log "
"files, external services, email and so on - with some additional "
"configuration."
msgstr ""

msgid "You can configure:"
msgstr "Anda dapat mengkonfigurasi"

msgid "logger mappings, to determine which records are sent to which handlers"
msgstr ""
"pencatatan pemetaan, untuk menentukan rekaman mana yang dikirim ke penangan "
"mana"

msgid "handlers, to determine what they do with the records they receive"
msgstr ""
"penangan, untuk menentukan apa yang mereka lakukan dengan rekaman mereka "
"terima"

msgid ""
"filters, to provide additional control over the transfer of records, and "
"even modify records in-place"
msgstr ""
"penyaring, untuk menyediakan kendali tambahan terhadap perpindahan rekaman, "
"dan bahkan merubah rekaman di tempat"

msgid ""
"formatters, to convert :class:`~logging.LogRecord` objects to a string or "
"other form for consumption by human beings or another system"
msgstr ""
"pembentuk, untuk merubah obyek :class:`~logging.LogRecord` menjadi string "
"atau bentuk lain untuk dikonsumsi oleh manusia atau sistem lain"

msgid ""
"There are various ways of configuring logging. In Django, the :setting:"
"`LOGGING` setting is most commonly used. The setting uses the :ref:"
"`dictConfig format <logging-config-dictschema>`, and extends the :ref:"
"`default logging configuration <default-logging-definition>`."
msgstr ""
"Ada beragam cara dari mengkonfigurasi pencatatan. Di Django, pengaturan :"
"setting:`LOGGING` adalah yang paling umum digunakan. Pengaturan menggunakan "
"the :ref:`dictConfig format <logging-config-dictschema>`, dan memperpanjang :"
"ref:`default logging configuration <default-logging-definition>`."

msgid ""
"See :ref:`configuring-logging` for an explanation of how your custom "
"settings are merged with Django's defaults."
msgstr ""
"Lihat :ref:`configuring-logging` untuk penjelasan bagaimana pengaturan "
"penyesuaian anda digabungkan dengan awalan Django."

msgid ""
"See the :mod:`Python logging documentation <python:logging.config>` for "
"details of other ways of configuring logging. For the sake of simplicity, "
"this documentation will only consider configuration via the ``LOGGING`` "
"setting."
msgstr ""
"Lihat :mod:`Python logging documentation <python:logging.config>` untuk "
"rincian cara lain dari konfigurasi pencatatan. Demi kesederhanaan, "
"dokumentasi ini hanya akan mempertimbangkan konfigurasi melalui pengaturan "
"``LOGGING``."

msgid "Basic logging configuration"
msgstr "Konfigurasi pencatatan dasar"

msgid "When configuring logging, it makes sense to"
msgstr "Ketika mengkonfigurasi pencatatan, itu masuk akal untuk"

msgid "Create a ``LOGGING`` dictionary"
msgstr "Membuat sebuah dictionary ``LOGGING`"

msgid "In your ``settings.py``::"
msgstr "Dalam ``settings.py`` anda::"

msgid ""
"It nearly always makes sense to retain and extend the default logging "
"configuration by setting ``disable_existing_loggers`` to ``False``."
msgstr ""
"Itu hampir selalu masuk akal untuk mempertahankan dan memperpanjang "
"konfigurasi pencatatan awalan dengan mengatur ``disable_existing_loggers`` "
"menjadi ``False``."

msgid "Configure a handler"
msgstr "Mengkonfigurasi penangan"

msgid ""
"This example configures a single handler named ``file``, that uses Python's :"
"class:`~logging.FileHandler` to save logs of level ``DEBUG`` and higher to "
"the file ``general.log`` (at the project root):"
msgstr ""
"Contoh ini mengkonfigurasikan penangan tunggal bernama ``file``, yang "
"menggunakan Python's :class:`~logging.FileHandler` untuk menyimpan catatan "
"tingkatan ``DEBUG`` dan tertinggi ke berkas ``general.log`` (di akar proyek):"

msgid ""
"Different handler classes take different configuration options. For more "
"information on available handler classes, see the :class:`~django.utils.log."
"AdminEmailHandler` provided by Django and the various :py:mod:`handler "
"classes <logging.handlers>` provided by Python."
msgstr ""
"Kelas-kelas penangan berbeda mengambil pilihan konfigurasi berbeda. Untuk "
"informasi lebih pada ketersediaan kelas-kelas penangan, lihat :class:"
"`~django.utils.log.AdminEmailHandler` disediakan oleh Django dan beragam :py:"
"mod:`handler classes <logging.handlers>` disediakan oleh Python."

msgid ""
"Logging levels can also be set on the handlers (by default, they accept log "
"messages of all levels). Using the example above, adding:"
msgstr ""
"Tingkat pencatatan dapat juga di setel pada penangan (secara awalan, mereka "
"menerima catatan pesan pada semua tingkatan). Menggunakan contoh diatas, "
"menambahkan:"

msgid ""
"would define a handler configuration that only accepts records of level "
"``DEBUG`` and higher."
msgstr ""
"akan menentukan sebuah konfigurasi penangan yang hanya menerima rekaman dari "
"tingkatan ``DEBUG`` dan lebih tinggi."

msgid "Configure a logger mapping"
msgstr "Mengkonfigurasi pemetaan pencatatan"

msgid ""
"To send records to this handler, configure a logger mapping to use it for "
"example:"
msgstr ""
"Untuk mengirim rekaman ke penangan ini, konfigurasikan pemetaan pencatatan "
"untuk menggunakannya sebagai contoh:"

msgid ""
"The mapping's name determines which log records it will process. This "
"configuration (``''``) is *unnamed*. That means that it will process records "
"from *all* loggers (see :ref:`naming-loggers` below on how to use the "
"mapping name to determine the loggers for which it will process records)."
msgstr ""

msgid ""
"It will forward messages of levels ``DEBUG`` and higher to the handler named "
"``file``."
msgstr ""
"Itu akan meneruskan pesan dari tingkatan ``DEBUG`` dan lebih tinggi ke "
"penangan bernama ``file``."

msgid ""
"Note that a logger can forward messages to multiple handlers, so the "
"relation between loggers and handlers is many-to-many."
msgstr ""
"Catat bahwa pencatat dapat meneruskan pesan ke banyan penangan, jadi "
"hubungan diantara pencatat dan penangan adalah many-to-many."

msgid "If you execute::"
msgstr "Jika anda menjalankan::"

msgid ""
"in your code, you will find that message in the file ``general.log`` in the "
"root of the project."
msgstr ""
"dalam kode anda, anda akan menemukan bahwa pesan dalam berkas ``general."
"log`` di akar dari proyek."

msgid "Configure a formatter"
msgstr "Konfigurasikan pemformat"

msgid ""
"By default, the final log output contains the message part of each :class:"
"`log record <logging.LogRecord>`. Use a formatter if you want to include "
"additional data. First name and define your formatters - this example "
"defines formatters named ``verbose`` and ``simple``:"
msgstr ""
"Secara awalan, keluaran catatan akhir mengandung pesan bagian dari tiap :"
"class:`log record <logging.LogRecord>`. Gunakan pembentuk jika anda ingin "
"menyertakan data tambahan. Nawa awal dan tentukan bentukan anda - contoh ini "
"menentukan nama bentukan ``verbose`` dan ``simple``:"

msgid ""
"The ``style`` keyword allows you to specify ``{`` for :meth:`str.format` or "
"``$`` for :class:`string.Template` formatting; the default is ``$``."
msgstr ""
"Katakunci ``style`` mengizinkan anda menentukan ``{`` for :meth:`str.format` "
"atau ``$`` untuk bentukan :class:`string.Template` ; awalan adalah ``$``."

msgid ""
"See :ref:`logrecord-attributes` for the :class:`~logging.LogRecord` "
"attributes you can include."
msgstr ""
"Lihat atribut :ref:`logrecord-attributes` for the :class:`~logging."
"LogRecord` anda dapat sertakan."

msgid ""
"To apply a formatter to a handler, add a ``formatter`` entry to the "
"handler's dictionary referring to the formatter by name, for example:"
msgstr ""
"Untuk memberlakukan pembentuk untuk penangan, tambah masukan ``formatter`` "
"pada dictionary penangan mengacu pada pembentuk berdasarkan nama, sebagai "
"contoh:"

msgid "Use logger namespacing"
msgstr "Gunakan namespace pencatat"

msgid ""
"The unnamed logging configuration ``''`` captures logs from any Python "
"application. A named logging configuration will capture logs only from "
"loggers with matching names."
msgstr ""

msgid ""
"The namespace of a logger instance is defined using :py:func:`~logging."
"getLogger`. For example in ``views.py`` of ``my_app``::"
msgstr ""
"Namespace dari instance pencatat ditentukan menggunakan :py:func:`~logging."
"getLogger`. Sebagai contoh dalam ``views.py`` dari ``my_app``::"

msgid ""
"will create a logger in the ``my_app.views`` namespace. ``__name__`` allows "
"you to organize log messages according to their provenance within your "
"project's applications automatically. It also ensures that you will not "
"experience name collisions."
msgstr ""

msgid ""
"A logger mapping named ``my_app.views`` will capture records from this "
"logger:"
msgstr ""
"Sebuah pemetaan pencatatan bernama ``my_app.views`` akan mengambil rekaman "
"dari pencatat ini:"

msgid ""
"A logger mapping named ``my_app`` will be more permissive, capturing records "
"from loggers anywhere within the ``my_app`` namespace (including ``my_app."
"views``, ``my_app.utils``, and so on):"
msgstr ""

msgid "You can also define logger namespacing explicitly::"
msgstr "Anda dapat juga menentukan namespace pencatat secara eksplisit::"

msgid "and set up logger mappings accordingly."
msgstr "dan atur pemetaan pencatatan yang sesuai."

msgid "Using logger hierarchies and propagation"
msgstr "Menggunakan hierarki dan propagasi pencatatan"

msgid ""
"Logger naming is *hierarchical*. ``my_app`` is the parent of ``my_app."
"views``, which is the parent of ``my_app.views.private``. Unless specified "
"otherwise, logger mappings will propagate the records they process to their "
"parents - a record from a logger in the ``my_app.views.private`` namespace "
"will be handled by a mapping for both ``my_app`` and ``my_app.views``."
msgstr ""

msgid ""
"To manage this behavior, set the propagation key on the mappings you define::"
msgstr ""
"Untuk mengelola perilaku ini, setel kunci propagasi pada pemetaan anda "
"tentukan::"

msgid ""
"``propagate`` defaults to ``True``. In this example, the logs from ``my_app."
"views.private`` will not be handled by the parent, but logs from ``my_app."
"views`` will."
msgstr ""
"``propagate`` awalan adalah ``True``. Di contoh ini, catatan dari ``my_app."
"views.private`` tidak akan ditangani oleh orang tua, tetapi catatan ``my_app."
"views`` akan."

msgid "Configure responsive logging"
msgstr "Mengkonfigurasikan pencatatan responsif"

msgid ""
"Logging is most useful when it contains as much information as possible, but "
"not information that you don't need - and how much you need depends upon "
"what you're doing. When you're debugging, you need a level of information "
"that would be excessive and unhelpful if you had to deal with it in "
"production."
msgstr ""

msgid ""
"You can configure logging to provide you with the level of detail you need, "
"when you need it. Rather than manually change configuration to achieve this, "
"a better way is to apply configuration automatically according to the "
"environment."
msgstr ""

msgid ""
"For example, you could set an environment variable ``DJANGO_LOG_LEVEL`` "
"appropriately in your development and staging environments, and make use of "
"it in a logger mapping thus::"
msgstr ""
"Sebagai contoh, anda dapat mensetel variabel lingkungan ``DJANGO_LOG_LEVEL`` "
"dengan tepat di lingkungan pengembangan dan pementasan, dan memanfaatkannya "
"di pemetaan pencatatan::"

msgid ""
"\\- so that unless the environment specifies a lower log level, this "
"configuration will only forward records of severity ``WARNING`` and above to "
"its handler."
msgstr ""
"\\- sehingga kecuali lingkungan menentukan tingkat catatan yang lebih "
"rendah, konfigurasi ini hanya akan meneruskan rekaman dari "
"kerasnya``WARNING`` dan diatasnya untuk penangannya."

msgid ""
"Other options in the configuration (such as the ``level`` or ``formatter`` "
"option of handlers) can be similarly managed."
msgstr ""
"Pilihan lain dalam konfigurasi (seperti pilihan ``level`` atau ``formatter`` "
"dari penangan) dapat dikelola dengan cara yang sama."

msgid "How to create CSV output"
msgstr "Bagaimana membuat keluaran CSV"

msgid ""
"This document explains how to output CSV (Comma Separated Values) "
"dynamically using Django views. To do this, you can either use the Python "
"CSV library or the Django template system."
msgstr ""
"Dokumen ini menjelaskan bagaimana keluaran CSV (Comma Separated Values) "
"secara dinamis menggunakan tampilan Django. Untuk melakukan ini, anda dapat "
"salah satu menggunakan pustaka CSV Python atau sistem cetakan Django."

msgid "Using the Python CSV library"
msgstr "Menggunakan pustaka CSV Python"

msgid ""
"Python comes with a CSV library, :mod:`csv`. The key to using it with Django "
"is that the :mod:`csv` module's CSV-creation capability acts on file-like "
"objects, and Django's :class:`~django.http.HttpResponse` objects are file-"
"like objects."
msgstr ""
"Python datang dengan pustaka CSV, :mod:`csv`. Kunci menggunakannya dengan "
"Django adalah :mod:`csv` kemampuan modul pembuatan-CSV bertindak pada obyek "
"seperti-berkas, dan obyek :class:`~django.http.HttpResponse` Django adalah "
"obyek seperti-berkas."

msgid "Here's an example::"
msgstr "Ini adalah sebuah contoh::"

msgid ""
"The code and comments should be self-explanatory, but a few things deserve a "
"mention:"
msgstr ""
"Kode dan komentar seharunya sudah cukup jelas, tetapi sedikit hal pantas "
"disebut:"

msgid ""
"The response gets a special MIME type, :mimetype:`text/csv`. This tells "
"browsers that the document is a CSV file, rather than an HTML file. If you "
"leave this off, browsers will probably interpret the output as HTML, which "
"will result in ugly, scary gobbledygook in the browser window."
msgstr ""
"Tanggapan mendapatkan jenis MIME khusus, mimetype:`text/csv`. Ini "
"memberitahu perambah bahwa dokumen adalah sebuah berkas CSV, daripada sebuah "
"berkas HTML. Jika anda mengosongkan ini, perambah akan kemungkinan "
"mentafsirkan keluaran sebagai HTML,  yang akan menghasilkan buruk, uraian "
"berbelit-belit yang menakutkan dalam jendela perambah."

msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the CSV file. This filename is arbitrary; call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialog, "
"etc."
msgstr ""
"Tanggapan mendapatkan sebuah kepala ``Content-Disposition`` tambahan, yang "
"mengandung nama dari berkas CSV. Berkas nama ini berubah-ubah; panggil dia "
"kapanpun anda inginkan. DIa akan digunakan oleh perambah dalam dialog \"Save "
"as...\", dll."

msgid ""
"You can hook into the CSV-generation API by passing ``response`` as the "
"first argument to ``csv.writer``. The ``csv.writer`` function expects a file-"
"like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""
"Anda bisa mengait kedalam API pembangkitan-CSV dengan melewatkan "
"``response`` sebagai argumen pertama pada ``csv.writer``. Fungsi ``csv."
"writer`` mengharapkan obyek seperti-berkas, dan obyek :class:`~django.http."
"HttpResponse` sesuai dengan tagihan."

msgid ""
"For each row in your CSV file, call ``writer.writerow``, passing it an :term:"
"`iterable`."
msgstr ""
"Untuk setiap baris dalam berkas CSV anda, panggil ``writer.writerow``, "
"melewati sebuah :term:`iterable`."

msgid ""
"The CSV module takes care of quoting for you, so you don't have to worry "
"about escaping strings with quotes or commas in them. Pass ``writerow()`` "
"your raw strings, and it'll do the right thing."
msgstr ""
"Modul CSV mengatasi kutipan untuk anda, sehingga anda tidak perlu khawatir "
"tentang pelolosan string dengan kutip atau koma. Lewati ``writerow()`` "
"string mentah anda, dan itu akan melakukan hal yang benar."

msgid "Streaming large CSV files"
msgstr "Mengalirkan berkas-berkas CSV besar"

msgid ""
"When dealing with views that generate very large responses, you might want "
"to consider using Django's :class:`~django.http.StreamingHttpResponse` "
"instead. For example, by streaming a file that takes a long time to generate "
"you can avoid a load balancer dropping a connection that might have "
"otherwise timed out while the server was generating the response."
msgstr ""
"Ketika berurusan dengan tampilan yang membangkitkan tanggapan yang sangat "
"besar, anda mungkin ingin mempertimbangkan menggunakan :class:`~django.http."
"StreamingHttpResponse` Django. Sebagai contoh, dengan mengalirkan sebuah "
"berkas yang memakan waktu lama untuk membangkitkan anda dapat menghindari "
"penyeimbang memuat menjatuhkan hubungan yang mungkin telah dinyatakan habis "
"selagi peladen membangkitkan tanggapan."

msgid ""
"In this example, we make full use of Python generators to efficiently handle "
"the assembly and transmission of a large CSV file::"
msgstr ""
"Dalam contoh ini, kami membuat penggunaan penuh dari pembangkit Python untuk "
"secara efisien menangani rakitan dan perpindahan dari berkas CSV besar::"

msgid "Using the template system"
msgstr "Menggunakan sistem cetakan"

msgid ""
"Alternatively, you can use the :doc:`Django template system </topics/"
"templates>` to generate CSV. This is lower-level than using the convenient "
"Python :mod:`csv` module, but the solution is presented here for "
"completeness."
msgstr ""
"Kalau tidak, anda dapat menggunakan :doc:`Django template system </topics/"
"templates>` untuk membangkitkan CSV. Ini adalah tingkatan lebih rendah "
"daripada menggunakan modul :mod:`csv` mudah Python, tetapi pemecahannya "
"adalah membawakannya kesini untuk kelengkapan."

msgid ""
"The idea here is to pass a list of items to your template, and have the "
"template output the commas in a :ttag:`for` loop."
msgstr ""
"Ide disini adalah melewatkan sebuah daftar dari barang-barang ke cetakan "
"anda, dan mempunyai keluaran cetakan koma di :ttag:`for` untuk berulang."

msgid "Here's an example, which generates the same CSV file as above::"
msgstr ""
"Ini adalah contoh, yang akan membangkitkan berkas CSV sama seperti diatas::"

msgid ""
"The only difference between this example and the previous example is that "
"this one uses template loading instead of the CSV module. The rest of the "
"code -- such as the ``content_type='text/csv'`` -- is the same."
msgstr ""
"Satu-satunya perbedaan diantara contoh ini dan contoh sebelumnya adalah "
"bahwa satu ini menggunakan cetakan memuat daripada modul CSV. Sisa dari kode "
"-- seperti ``content_type='text/csv'`` -- adalah sama."

msgid ""
"Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""
"Kemudian, buat cetakan ``my_template_name.txt``, dengan kode cetakan ini:"

msgid ""
"This short template iterates over the given data and displays a line of CSV "
"for each row. It uses the :tfilter:`addslashes` template filter to ensure "
"there aren't any problems with quotes."
msgstr ""
"Cetakan pendek ini berulang terhadap data diberikan dan menampilkan baris "
"CSV untuk setiap baris. Itu menggunakan penyaring cetakan :tfilter:"
"`addslashes` untuk memastikan tidak ada masalah dengan kutipan."

msgid "Other text-based formats"
msgstr "Format berbasis teks lainnya"

msgid ""
"Notice that there isn't very much specific to CSV here -- just the specific "
"output format. You can use either of these techniques to output any text-"
"based format you can dream of. You can also use a similar technique to "
"generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an "
"example."
msgstr ""
"Perhatikan bahwa tidak ada banyak spesifik pada CSV disini -- cukup bentuk "
"keluaran spesifik. Anda dapat menggunakan salah satu dari teknik ini untuk "
"mengeluarkan bentuk berdasarkan-teks apapun anda impikan. Anda dapat juga "
"menggunakan teknik yang mirip untuk membangkitkan data biner berubah-ubah; "
"lihat :doc:`/howto/outputting-pdf` untuk sebuah contoh. "

msgid "How to create PDF files"
msgstr "Bagaimana membuat berkas PDF"

msgid ""
"This document explains how to output PDF files dynamically using Django "
"views. This is made possible by the excellent, open-source ReportLab_ Python "
"PDF library."
msgstr ""
"Dokumen ini menjelaskan bagaimana mengeluarkan berkas-berkas PDF secara "
"dinamis menggunakan tampilan Django. Ini dibuat mungkin oleh istimewa, "
"sumber terbuka pustaka PDF Python ReportLab_."

msgid ""
"The advantage of generating PDF files dynamically is that you can create "
"customized PDFs for different purposes -- say, for different users or "
"different pieces of content."
msgstr ""
"Keuntungan dari membangkitkan berkas-berkas PDF secara dinamis adalah bahwa "
"anda dapat membuat penyesuaian PDF untuk tujuan berbeda -- katakan, untuk "
"pengguna berbeda atau potongan berbeda dari isi."

msgid ""
"For example, Django was used at kusports.com_ to generate customized, "
"printer-friendly NCAA tournament brackets, as PDF files, for people "
"participating in a March Madness contest."
msgstr ""
"Sebagai contoh, Django telah digunakan pada kusports.com_ untuk "
"membangkitkan penyesuaian, kurung turnamen NCAA ramah-mencetak, sebagai "
"berkas-berkas PDF, untuk orang yang ikut serta di perlombaan March Madness."

msgid "Install ReportLab"
msgstr "Pasang ReportLab"

msgid ""
"The ReportLab library is :pypi:`available on PyPI <reportlab>`. A `user "
"guide`_ (not coincidentally, a PDF file) is also available for download. You "
"can install ReportLab with ``pip``:"
msgstr ""
"Pustaka ReportLab adalah :pypi:`available on PyPI <reportlab>`. A `user "
"guide`_ (bukan secara kebetulan, berkas PDF) juga tersedia untuk unduh. Anda "
"dapat memasang ReportLab dengan ``pip``:"

msgid ""
"Test your installation by importing it in the Python interactive interpreter:"
msgstr ""
"Uji pemasangan anda dengan mengimpor kedalam penterjemah interaktif Python:"

msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""
"Jika perintah itu tidak menimbulkan kesalahan apapun, pemasangan bekerja."

msgid "Write your view"
msgstr "Tulis tampilan anda"

msgid ""
"The key to generating PDFs dynamically with Django is that the ReportLab API "
"acts on file-like objects, and Django's :class:`~django.http.FileResponse` "
"objects accept file-like objects."
msgstr ""
"Kunci untuk membangkitkan PDF secara dinamis dengan Django adalah bahwa API "
"ReportLab bertindak pada merasa-seperti obyek."

msgid "Here's a \"Hello World\" example::"
msgstr "Ini adalah contoh \"Hello World\" ::"

msgid ""
"The response will automatically set the MIME type :mimetype:`application/"
"pdf` based on the filename extension. This tells browsers that the document "
"is a PDF file, rather than an HTML file or a generic :mimetype:`application/"
"octet-stream` binary content."
msgstr ""
"Tanggapan akan otomatis menyetel jenis MIME :mimetype:`application/pdf` "
"berdasarkan pada ekstensi nama berkas. Ini memberitahu peramban bahwa "
"dokumen adalah berkas PDF, daripada berkas HTML atau isi biner umum :"
"mimetype:`application/octet-stream`."

msgid ""
"When ``as_attachment=True`` is passed to ``FileResponse``, it sets the "
"appropriate ``Content-Disposition`` header and that tells web browsers to "
"pop-up a dialog box prompting/confirming how to handle the document even if "
"a default is set on the machine. If the ``as_attachment`` parameter is "
"omitted, browsers will handle the PDF using whatever program/plugin they've "
"been configured to use for PDFs."
msgstr ""

msgid ""
"You can provide an arbitrary ``filename`` parameter. It'll be used by "
"browsers in the \"Save as...\" dialog."
msgstr ""
"Anda dapat menyediakan parameter ``filename`` yang berubah-ubah. Itu akan "
"digunakan oleh peramban dalam dialog \"Save as...\"."

msgid ""
"You can hook into the ReportLab API: The same buffer passed as the first "
"argument to ``canvas.Canvas`` can be fed to the :class:`~django.http."
"FileResponse` class."
msgstr ""
"Anda dapat mengkaitkan kedalam API ReportLab: Wadah sama dilewatkan sebagai "
"argumen pertama pada ``canvas.Canvas`` bisa diberi makan ke kelas the :class:"
"`~django.http.FileResponse`."

msgid ""
"Note that all subsequent PDF-generation methods are called on the PDF object "
"(in this case, ``p``) -- not on ``buffer``."
msgstr ""
"Catat bahwa semua cara pembangkitan-PDF berikutnya dipanggil pada obyek PDF "
"(dalam kasus ini, ``p``) -- bukan pada ``buffer``."

msgid ""
"Finally, it's important to call ``showPage()`` and ``save()`` on the PDF "
"file."
msgstr ""
"Akhirnya, sangatlah penting memanggil ``showPage()`` dan ``save()`` pada "
"berkas PDF."

msgid ""
"ReportLab is not thread-safe. Some of our users have reported odd issues "
"with building PDF-generating Django views that are accessed by many people "
"at the same time."
msgstr ""
"ReportLab tidak thread-safe. Beberapa dari pengguna kami telah melaporkan "
"masalah-masalah ganjil dengan membangun tampilan Django pembangkitan-PDF "
"yang diakses oleh banyak orang pada waktu yang sama."

msgid "Other formats"
msgstr "Bentuk lain"

msgid ""
"Notice that there isn't a lot in these examples that's PDF-specific -- just "
"the bits using ``reportlab``. You can use a similar technique to generate "
"any arbitrary format that you can find a Python library for. Also see :doc:`/"
"howto/outputting-csv` for another example and some techniques you can use "
"when generated text-based formats."
msgstr ""
"Perhatikan bahwa tidak ada banyak di contoh ini yaitu spesifik-PDF -- cukup "
"bit menggunakan ``reportlab``. Anda dapat menggunakan teknik mirip untuk "
"membangkitkan bentuk berubah-ubah yang anda dapat temukan pustaka Python. "
"Juga lihat :doc:`/howto/outputting-csv` untuk contoh lainnya dan beberapa "
"teknik anda dapat gunakan ketika membangkitkan bentuk berbasis-teks."

msgid ""
"Django Packages provides a `comparison of packages <https://djangopackages."
"org/grids/g/pdf/>`_ that help generate PDF files from Django."
msgstr ""
"Paket Django menyediakan `comparison of packages <https://djangopackages.org/"
"grids/g/pdf/>`_ yang membantu membangkitkan berkas PDF dari Django."

msgid "How to override templates"
msgstr "Bagaimana mengesampingkan cetakan"

msgid ""
"In your project, you might want to override a template in another Django "
"application, whether it be a third-party application or a contrib "
"application such as ``django.contrib.admin``. You can either put template "
"overrides in your project's templates directory or in an application's "
"templates directory."
msgstr ""
"Dalam proyek anda, anda mungkin ingin menimpa sebuah cetakan dalam aplikasi "
"Django lain, apakai itu berupa aplikasi pihak-ketiga atau aplikasi bantuan "
"seperti ``django.contrib.admin``. Anda dapat antara menaruh cetakan menimpa "
"dalam direktori cetakan proyek anda atau dalam sebuah direktori cetakan "
"aplikasi."

msgid ""
"If you have app and project templates directories that both contain "
"overrides, the default Django template loader will try to load the template "
"from the project-level directory first. In other words, :setting:`DIRS "
"<TEMPLATES-DIRS>` is searched before :setting:`APP_DIRS <TEMPLATES-"
"APP_DIRS>`."
msgstr ""
"Jika anda mempunyai aplikasi dan direktori cetakan proyek yang kedua "
"kandungan menimpa, pemuat cetakan Django awalan akan mencoba memuat cetakan "
"dari direktori tingkat-proyek dahulu. Dengan kata lain, :setting:`DIRS "
"1` dicari sebelum :setting:`APP_DIRS 2`."

msgid ""
"Read :ref:`overriding-built-in-widget-templates` if you're looking to do "
"that."
msgstr ""
"Baca :ref:`overriding-built-in-widget-templates` jika anda sedang mencari "
"untuk melakukannya."

msgid "Overriding from the project's templates directory"
msgstr "Menimpa dari direktori cetakan proyek"

msgid ""
"First, we'll explore overriding templates by creating replacement templates "
"in your project's templates directory."
msgstr ""
"Pertama, kami akan menjelajahi menimpa cetakan dengan membuat cetakan "
"pengganti dalam direktori cetakan proyek anda."

msgid ""
"Let's say you're trying to override the templates for a third-party "
"application called ``blog``, which provides the templates ``blog/post.html`` "
"and ``blog/list.html``. The relevant settings for your project would look "
"like::"
msgstr ""
"Mari kita katakan anda sedang mencoba menimpa cetakan untuk aplikasi pihak-"
"ketiga disebut ``blog``, yang menyediakan cetakan ``blog/post.html`` dan "
"``blog/list.html``. Pengaturan terkait untuk proyek anda akan terlihat "
"seperti:: "

msgid ""
"The :setting:`TEMPLATES` setting and ``BASE_DIR`` will already exist if you "
"created your project using the default project template. The setting that "
"needs to be modified is :setting:`DIRS<TEMPLATES-DIRS>`."
msgstr ""
"Pengaturan :setting:`TEMPLATES` dan ``BASE_DIR`` akan sudah ada jika anda "
"membuat proyek anda menggunakan cetakan proyek awalan. Pengaturan yang butuh "
"dirubah adalah :setting:`DIRS1`. "

msgid ""
"These settings assume you have a ``templates`` directory in the root of your "
"project. To override the templates for the ``blog`` app, create a folder in "
"the ``templates`` directory, and add the template files to that folder:"
msgstr ""
"Pengaturan ini menganggap anda mempunyai sebuah direktori ``templates`` "
"dalam akar dari proyek anda. Untuk menimpa cetakan untuk aplikasi ``blog``, "
"buat sebuah folder dalam direktori ``templates``, dan tambah berkas-berkas "
"cetakan ke folder itu."

msgid ""
"The template loader first looks for templates in the ``DIRS`` directory. "
"When the views in the ``blog`` app ask for the ``blog/post.html`` and ``blog/"
"list.html`` templates, the loader will return the files you just created."
msgstr ""
"Pemuat cetakan pertama mencari untuk cetakan dalam direktori ``DIRS``. "
"ketika tampilan dalam aplikasi ``blog`` untuk cetakan ``blog/post.html`` dan "
"``blog/list.html``, pemuat akan mengembalikan berkas-berkas anda telah buat."

msgid "Overriding from an app's template directory"
msgstr "Menimpa dari direktori cetakan aplikasi"

msgid ""
"Since you're overriding templates located outside of one of your project's "
"apps, it's more common to use the first method and put template overrides in "
"a project's templates folder. If you prefer, however, it's also possible to "
"put the overrides in an app's template directory."
msgstr ""
"Sejak anda sedang menimpa cetakan bertempat di luar dari satu dari aplikasi "
"proyek anda, itu adalah lebih umum menggunakan metode pertama dan menaruh "
"cetakan penimpaan dalam sebuah folder cetakan proyek. Jika anda memilih, "
"bagaimanapun, itu juga memungkinkan menaruh penimpaan dalam sebuah direktori "
"cetakan aplikasi."

msgid ""
"First, make sure your template settings are checking inside app directories::"
msgstr ""
"Pertama, pastikan pengaturan cetakan anda memeriksa didalam direktori "
"aplikasi::"

msgid ""
"If you want to put the template overrides in an app called ``myapp`` and the "
"templates to override are named ``blog/list.html`` and ``blog/post.html``, "
"then your directory structure will look like:"
msgstr ""
"Jika anda ingin menaruh cetakan penimpaan dalam sebuah aplikasi disebut "
"``myapp`` dan cetakan untuk menima bernama ``blog/list.html`` dan ``blog/"
"post.html``, kemudian struktur direktori anda akan terlihat seperti::"

msgid ""
"With :setting:`APP_DIRS<TEMPLATES-APP_DIRS>` set to ``True``, the template "
"loader will look in the app's templates directory and find the templates."
msgstr ""
"Dengan :setting:`APP_DIRS1` disetel menjadi ``True``, pemuat cetakan akan "
"terlihat dalam direktori cetakan aplikasi dan menemukan cetakan."

msgid "Extending an overridden template"
msgstr "Memperluas cetakan yang diganti"

msgid ""
"With your template loaders configured, you can extend a template using the :"
"ttag:`{% extends %}<extends>` template tag whilst at the same time "
"overriding it. This can allow you to make small customizations without "
"needing to reimplement the entire template."
msgstr ""

msgid ""
"For example, you can use this technique to add a custom logo to the ``admin/"
"base_site.html`` template:"
msgstr ""
"Sebagai contoh, anda dapat menggunakan teknik ini untuk menambahkan logo "
"penyesuaian pada cetakan ``admin/base_site.html``:"

msgid "``templates/admin/base_site.html``"
msgstr "``templates/admin/base_site.html``"

msgid "Key points to note:"
msgstr "Titik kunci pada catatan:"

msgid ""
"The example creates a file at ``templates/admin/base_site.html`` that uses "
"the configured project-level ``templates`` directory to override ``admin/"
"base_site.html``."
msgstr ""
"Contoh membuat sebuah berkas pada ``templates/admin/base_site.html`` yang "
"menggunakan tingkat-proyek dikonfigurasikan direktori ``templates`` "
"directory untuk menimpa ``admin/base_site.html``."

msgid ""
"The new template extends ``admin/base_site.html``, which is the same "
"template as is being overridden."
msgstr ""
"Cetakan baru meluas ``admin/base_site.html``, yang merupakan cetakan sama "
"seperti sedang ditimpa."

msgid ""
"The template replaces just the ``branding`` block, adding a custom logo, and "
"using ``block.super`` to retain the prior content."
msgstr ""
"Cetakan hanya mengganti blok ``branding``, menambahkan logo penyesuaian, dan "
"menggunakan ``block.super`` untuk mempertahankan konten sebelumnya."

msgid ""
"The rest of the template is inherited unchanged from ``admin/base_site."
"html``."
msgstr ""
"Sisa dari cetakan diturunkan tidak berubah dari ``admin/base_site.html``."

msgid ""
"This technique works because the template loader does not consider the "
"already loaded override template (at ``templates/admin/base_site.html``) "
"when resolving the ``extends`` tag. Combined with ``block.super`` it is a "
"powerful technique to make small customizations."
msgstr ""

msgid "How to deploy static files"
msgstr "Bagaimana menyebarkan berkas tetap"

msgid ""
"For an introduction to the use of :mod:`django.contrib.staticfiles`, see :"
"doc:`/howto/static-files/index`."
msgstr ""
"Untuk perkenalan ke penggunaan :mod:`django.contrib.staticfiles`, lihat :doc:"
"`/howto/static-files/index`."

msgid "Serving static files in production"
msgstr "Melayani berkas statis di produksi"

msgid ""
"The basic outline of putting static files into production consists of two "
"steps: run the :djadmin:`collectstatic` command when static files change, "
"then arrange for the collected static files directory (:setting:"
"`STATIC_ROOT`) to be moved to the static file server and served. Depending "
"the ``staticfiles`` :setting:`STORAGES` alias, files may need to be moved to "
"a new location manually or the :func:`post_process <django.contrib."
"staticfiles.storage.StaticFilesStorage.post_process>` method of the "
"``Storage`` class might take care of that."
msgstr ""

msgid ""
"As with all deployment tasks, the devil's in the details. Every production "
"setup will be a bit different, so you'll need to adapt the basic outline to "
"fit your needs. Below are a few common patterns that might help."
msgstr ""

msgid "Serving the site and your static files from the same server"
msgstr "Melayani situs dan berkas-berkas tetap anda dari peladen sama"

msgid ""
"If you want to serve your static files from the same server that's already "
"serving your site, the process may look something like:"
msgstr ""
"Jika anda ingin melayani berkas-berkas tetap anda dari peladen sama yang "
"sudah melayani situs anda, pengolahan mungkin terlihat sesuatu seperti:"

msgid "Push your code up to the deployment server."
msgstr "Dorong kode anda ke atas ke peladen penyebaran."

msgid ""
"On the server, run :djadmin:`collectstatic` to copy all the static files "
"into :setting:`STATIC_ROOT`."
msgstr ""
"Di peladen, jalankan :djadmin:`collectstatic` untuk menyalin semua berkas "
"statis kedalam :setting:`STATIC_ROOT`."

msgid ""
"Configure your web server to serve the files in :setting:`STATIC_ROOT` under "
"the URL :setting:`STATIC_URL`. For example, here's :ref:`how to do this with "
"Apache and mod_wsgi <serving-files>`."
msgstr ""
"Konfigurasikan peladen jaringan anda untuk melayani berkas-berkas dalam :"
"setting:`STATIC_ROOT` dibawah URL :setting:`STATIC_URL`. Sebagai contoh, "
"ini :ref:`how to do this with Apache and mod_wsgi <serving-files>`."

msgid ""
"You'll probably want to automate this process, especially if you've got "
"multiple web servers."
msgstr ""
"Anda mungkin akan ingin mengotomatisasi pengolahan ini, khususnya jika anda "
"mendapatkan banyak peladen jaringan."

msgid "Serving static files from a dedicated server"
msgstr "Melayani berkas statis dari sebuah server tersendiri"

msgid ""
"Most larger Django sites use a separate web server -- i.e., one that's not "
"also running Django -- for serving static files. This server often runs a "
"different type of web server -- faster but less full-featured. Some common "
"choices are:"
msgstr ""

msgid ""
"Configuring these servers is out of scope of this document; check each "
"server's respective documentation for instructions."
msgstr ""
"Konfigurasi peladen ini diluar cakupan dari dokumen ini; periksa setiap "
"dokumentasi masing-masing peladen untuk perintah."

msgid ""
"Since your static file server won't be running Django, you'll need to modify "
"the deployment strategy to look something like:"
msgstr ""
"Sejak peladen berkas tetap anda tidak akan menjalankan Django, anda akan "
"butuh merubah strategi penyebaran menjadi kelihatan sesuatu seperti:"

msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""
"Ketika berkas statis anda berubah, jalankan :djadmin:`collectstatic` secara "
"lokal."

msgid ""
"Push your local :setting:`STATIC_ROOT` up to the static file server into the "
"directory that's being served. `rsync <https://rsync.samba.org/>`_ is a "
"common choice for this step since it only needs to transfer the bits of "
"static files that have changed."
msgstr ""
"Dorong :setting:`STATIC_ROOT` lokal anda sampai pada peladen berkas tetap "
"kedalam direktori yang sedang dilayani. `rsync <https://rsync.samba.org/>`_ "
"adalah sebuah pilihan umum untuk langkah ini sejak dia hanya butuh "
"memindahkan bit ke berkas-berkas tetap yang telah berubah."

msgid "Serving static files from a cloud service or CDN"
msgstr "Melayani berkas statis dari layanan cloud atau CDN"

msgid ""
"Another common tactic is to serve static files from a cloud storage provider "
"like Amazon's S3 and/or a CDN (content delivery network). This lets you "
"ignore the problems of serving static files and can often make for faster-"
"loading web pages (especially when using a CDN)."
msgstr ""

msgid ""
"When using these services, the basic workflow would look a bit like the "
"above, except that instead of using ``rsync`` to transfer your static files "
"to the server you'd need to transfer the static files to the storage "
"provider or CDN."
msgstr ""
"Ketika menggunakan layanan ini, alurkerja dasar akan kelihatan sedikit "
"seperti diatas, kecuali bahwa daripada menggunakan ``rsync`` untuk "
"memindahkan berkas-berkas tetap anda ke peladen anda akan butuh untuk "
"memindahkan berkas-berkas tetap ke penyedia panyimpanan atau CDN."

msgid ""
"There's any number of ways you might do this, but if the provider has an "
"API, you can use a :doc:`custom file storage backend </howto/custom-file-"
"storage>` to integrate the CDN with your Django project. If you've written "
"or are using a 3rd party custom storage backend, you can tell :djadmin:"
"`collectstatic` to use it by setting ``staticfiles`` in :setting:`STORAGES`."
msgstr ""

msgid ""
"For example, if you've written an S3 storage backend in ``myproject.storage."
"S3Storage`` you could use it with::"
msgstr ""
"Sebagai contoh, jika anda telah menulis sebuah backend penyimpanan S3 dalam "
"``myproject.storage.S3Storage`` anda dapat menggunakannya dengan::"

msgid ""
"Once that's done, all you have to do is run :djadmin:`collectstatic` and "
"your static files would be pushed through your storage package up to S3. If "
"you later needed to switch to a different storage provider, you may only "
"have to change ``staticfiles`` in the :setting:`STORAGES` setting."
msgstr ""

msgid ""
"For details on how you'd write one of these backends, see :doc:`/howto/"
"custom-file-storage`. There are 3rd party apps available that provide "
"storage backends for many common file storage APIs. A good starting point is "
"the `overview at djangopackages.org <https://djangopackages.org/grids/g/"
"storage-backends/>`_."
msgstr ""
"Untuk rincian pada bagaimana anda menulis satu dari backend ini, lihat :doc:"
"`/howto/custom-file-storage`. Ada aplikasi pihak 3 tersedia yang menyediakan "
"backend penyimpanan untuk banyak API penyimpanan berkas umum. Titik awal "
"bagus adalah `overview at djangopackages.org <https://djangopackages.org/"
"grids/g/storage-backends/>`_."

msgid "Learn more"
msgstr "Pelajari lagi"

msgid ""
"For complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""
"Untuk rincian lengkap pada semua pengaturan, perintah, cetakan etiket, dan "
"potongan-potongan lainnya dalam :mod:`django.contrib.staticfiles`, lihat :"
"doc:`the staticfiles reference </ref/contrib/staticfiles>`."

msgid "How to manage static files (e.g. images, JavaScript, CSS)"
msgstr "Bagaimana mengelola berkas statik (misalnya gambar, JavaScript, CSS)"

msgid ""
"Websites generally need to serve additional files such as images, "
"JavaScript, or CSS. In Django, we refer to these files as \"static files\".  "
"Django provides :mod:`django.contrib.staticfiles` to help you manage them."
msgstr ""
"Situs jaringan pada umumnya butuh melayani tambahan berkas-berkas seperti "
"gambar, JavaScript, atau CSS. Di Django, kami mengacu pada berkas-berkas ini "
"sebagai \"berkas-berkas tetap\". Django menyediakan :mod:`django.contrib."
"staticfiles` untuk membantu anda mengelola mereka."

msgid "This page describes how you can serve these static files."
msgstr ""
"Halaman ini menggambarkan bagaimana anda dapat melayani berkas statis ini."

msgid "Configuring static files"
msgstr "Mengkonfigurasi berkas-berkas tetap"

msgid ""
"Make sure that ``django.contrib.staticfiles`` is included in your :setting:"
"`INSTALLED_APPS`."
msgstr ""
"Pastikan bahwa ``django.contrib.staticfiles`` disertakan dalam :setting:"
"`INSTALLED_APPS` anda."

msgid "In your settings file, define :setting:`STATIC_URL`, for example::"
msgstr ""
"Di berkas pengaturan anda, tentukan :setting:`STATIC_URL`, sebagai contoh::"

msgid ""
"In your templates, use the :ttag:`static` template tag to build the URL for "
"the given relative path using the configured ``staticfiles`` :setting:"
"`STORAGES` alias."
msgstr ""

msgid ""
"Store your static files in a folder called ``static`` in your app. For "
"example ``my_app/static/my_app/example.jpg``."
msgstr ""
"Simpan berkas tetap di pelipat disebut ``static`` di aplikasi anda. Sebagai "
"contoh ``my_app/static/my_app/example.jpg``."

msgid "Serving the files"
msgstr "Melayani berkas-berkas"

msgid ""
"In addition to these configuration steps, you'll also need to actually serve "
"the static files."
msgstr ""
"Dalam tambahan pada langkah-langkah konfigurasi ini, anda akan juga butuh "
"untuk melayani berkas-berkas tetap."

msgid ""
"During development, if you use :mod:`django.contrib.staticfiles`, this will "
"be done automatically by :djadmin:`runserver` when :setting:`DEBUG` is set "
"to ``True`` (see :func:`django.contrib.staticfiles.views.serve`)."
msgstr ""
"Selama pengembangan, jika anda menggunakan :mod:`django.contrib."
"staticfiles`, ini akan dilakukan otomatis oleh :djadmin:`runserver` ketika :"
"setting:`DEBUG` disetel ke ``True`` (lihat :func:`django.contrib.staticfiles."
"views.serve`)."

msgid ""
"This method is **grossly inefficient** and probably **insecure**, so it is "
"**unsuitable for production**."
msgstr ""
"Cara ini adalah **terlalu tidak efesien** dan mungkin **tidak aman**, jadi "
"dia **tidak cocok untuk produksi**."

msgid ""
"See :doc:`/howto/static-files/deployment` for proper strategies to serve "
"static files in production environments."
msgstr ""
"Lihat :doc:`/howto/static-files/deployment` untuk strategi yang sesuai untuk "
"melayani berkas-berkas tetap dalam lingkungan produksi."

msgid ""
"Your project will probably also have static assets that aren't tied to a "
"particular app. In addition to using a ``static/`` directory inside your "
"apps, you can define a list of directories (:setting:`STATICFILES_DIRS`) in "
"your settings file where Django will also look for static files. For "
"example::"
msgstr ""
"Proyek anda mungkin juga mempunyai aset tetap yang tidak diikat pada "
"aplikasi khusus. Dalam tambahan untuk menggunakan direktori ``static/`` "
"didalam aplikasi anda, anda dapat menentukan sebuah daftar direktori (:"
"setting:`STATICFILES_DIRS`)  di berkas pengaturan anda dimana Django akan "
"juga mencari untuk berkas-berkas tetap. Sebagai contoh::"

msgid ""
"See the documentation for the :setting:`STATICFILES_FINDERS` setting for "
"details on how ``staticfiles`` finds your files."
msgstr ""
"Lihat dokumentasi untuk pengaturan :setting:`STATICFILES_FINDERS` untuk "
"rincian pada bagaimana ``staticfiles`` menemukan berkas-berkas anda."

msgid "Static file namespacing"
msgstr "Namespacing berkas statis"

msgid ""
"Now we *might* be able to get away with putting our static files directly in "
"``my_app/static/`` (rather than creating another ``my_app`` subdirectory), "
"but it would actually be a bad idea. Django will use the first static file "
"it finds whose name matches, and if you had a static file with the same name "
"in a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the best way "
"to ensure this is by *namespacing* them. That is, by putting those static "
"files inside *another* directory named for the application itself."
msgstr ""
"Sekarang kami *mungkin* bisa lolos dengan menaruh berkas statis langsung "
"dalam ``my_app/static/`` (daripada membuat subdirektori `my_app`` lain), "
"tetapi itu merupakan ide buruk. Django akan menggunakan berkas statis "
"pertama menemukan nama yang cocok, dan jika anda memiliki berkas statis "
"dengan nama sama dalam aplikasi *berbeda*, Django tidak akan dapat "
"membedakan diantara mereka. Kami butuh dapat menunjuk Django pada satu yg "
"benar, dan cara terbaik memastikan ini dengan melakukan *namespace* mereka. "
"Itu dia, dengan menaruh berkas statis tersebut dalam direktori *lain* "
"dinamai untuk aplikasi itu sendiri."

msgid ""
"You can namespace static assets in :setting:`STATICFILES_DIRS` by "
"specifying :ref:`prefixes <staticfiles-dirs-prefixes>`."
msgstr ""
"Anda dapat me-namespace aset statis di :setting:`STATICFILES_DIRS` by "
"specifying :ref:`prefixes <staticfiles-dirs-prefixes>`."

msgid "Serving static files during development"
msgstr "Melayani berkas-berkas tetap selama pengembangan"

msgid ""
"If you use :mod:`django.contrib.staticfiles` as explained above, :djadmin:"
"`runserver` will do this automatically when :setting:`DEBUG` is set to "
"``True``. If you don't have ``django.contrib.staticfiles`` in :setting:"
"`INSTALLED_APPS`, you can still manually serve static files using the :func:"
"`django.views.static.serve` view."
msgstr ""
"Jika anda menggunakan :mod:`django.contrib.staticfiles` seperti yang "
"dijelaskan diatas, :djadmin:`runserver` akan melakukan ini secara otomatis "
"ketika :setting:`DEBUG` disetel ke ``True``. Jika anda tidak mempunyai "
"``django.contrib.staticfiles`` di :setting:`INSTALLED_APPS`,  anda dapat "
"masih secara manual melayani berkas-berkas tetap menggunakan tampilan :func:"
"`django.views.static.serve`."

msgid ""
"This is not suitable for production use! For some common deployment "
"strategies, see :doc:`/howto/static-files/deployment`."
msgstr ""
"Ini tidak cocok untuk penggunaan produksi! Untuk beberapa strategi "
"penyebaran umum, lihat :doc:`/howto/static-files/deployment`."

msgid ""
"For example, if your :setting:`STATIC_URL` is defined as ``static/``, you "
"can do this by adding the following snippet to your ``urls.py``::"
msgstr ""
"Sebagai contoh, jika :setting:`STATIC_URL` anda ditentukan sebagai ``static/"
"``, anda dapat melakukan ini dengan menambahkan potongan berikut ke ``urls."
"py`` anda::"

msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``static/``) and not a URL (e.g. ``http://static.example.com/"
"``)."
msgstr ""
"Fungsi pembantu ini hanya bekerja dalam suasana mencari kesalahan dan hanya "
"jika awalan diberikan adalah lokal (misalnya ``static/``) dan bukan URL "
"(misalnya ``http://static.example.com/``)."

msgid ""
"Also this helper function only serves the actual :setting:`STATIC_ROOT` "
"folder; it doesn't perform static files discovery like :mod:`django.contrib."
"staticfiles`."
msgstr ""
"Juga fungsi pembantu ini hanya melayani folder :setting:`STATIC_ROOT` "
"sebenarnya; dia tidak menampilkan berkas-berkas tetap seperti :mod:`django."
"contrib.staticfiles`."

msgid ""
"Finally, static files are served via a wrapper at the WSGI application "
"layer. As a consequence, static files requests do not pass through the "
"normal :doc:`middleware chain </topics/http/middleware>`."
msgstr ""
"Akhirnya, berkas status dilayani melalui pembungkus pada lapisan aplikasi "
"WSGI. Sebagai konsekuensinya, berkas statis meminta untuk tidak melewatkan "
"melalui :doc:`middleware chain </topics/http/middleware>` biasa."

msgid "Serving files uploaded by a user during development"
msgstr "Melayani berkas-berkas terunggah oleh pengguna selama pengembangan"

msgid ""
"During development, you can serve user-uploaded media files from :setting:"
"`MEDIA_ROOT` using the :func:`django.views.static.serve` view."
msgstr ""
"Selama pengembangan, anda dapat melayani berkas-berkas media diupload-"
"pengguna dari :setting:`MEDIA_ROOT` menggunakan tampilan :func:`django.views."
"static.serve`."

msgid ""
"For example, if your :setting:`MEDIA_URL` is defined as ``media/``, you can "
"do this by adding the following snippet to your :setting:`ROOT_URLCONF`::"
msgstr ""
"Sebagai contoh, jika :setting:`MEDIA_URL` anda ditentukan sebagai ``media/"
"``, anda dapat melakukan ini dengan menambahkan potongan berikut ke :setting:"
"`ROOT_URLCONF` anda::"

msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``media/``) and not a URL (e.g. ``http://media.example.com/"
"``)."
msgstr ""
"Fungsi pembantu ini hanya bekerja dalam suasana mencari kesalahan dan hanya "
"jika awalan diberikan adalah lokal (misalnya ``media/``) dan bukan URL "
"(misalnya ``http://media.example.com/``)."

msgid ""
"When running tests that use actual HTTP requests instead of the built-in "
"testing client (i.e. when using the built-in :class:`LiveServerTestCase "
"<django.test.LiveServerTestCase>`) the static assets need to be served along "
"the rest of the content so the test environment reproduces the real one as "
"faithfully as possible, but ``LiveServerTestCase`` has only very basic "
"static file-serving functionality: It doesn't know about the finders feature "
"of the ``staticfiles`` application and assumes the static content has "
"already been collected under :setting:`STATIC_ROOT`."
msgstr ""
"Ketika menjalankan percobaan yang menggunakan permintaan HTTP sebenarnya "
"daripada klien percobaan siap pakai (yaitu ketika menggunakan :class:"
"`LiveServerTestCase <django.test.LiveServerTestCase>` siap pakai) aset tetap "
"butuh dilayani bersama sisa dari isi sehingga lingkungan percobaan "
"memproduksi kembali satu yang asli setepat mungkin, tetapi "
"``LiveServerTestCase`` mempunyai hanya sangat dasar berkas tetap-melayani "
"fungsi: Dia tidak tahu bahwa penemu fitur dari aplikasi ``staticfiles`` dan "
"menganggap isi statis telah dikumpulkan dibawah :setting:`STATIC_ROOT`. "

msgid ""
"Because of this, ``staticfiles`` ships its own :class:`django.contrib."
"staticfiles.testing.StaticLiveServerTestCase`, a subclass of the built-in "
"one that has the ability to transparently serve all the assets during "
"execution of these tests in a way very similar to what we get at development "
"time with ``DEBUG = True``, i.e. without having to collect them using :"
"djadmin:`collectstatic` first."
msgstr ""
"Karena ini, ``staticfiles`` mengemas :class:`django.contrib.staticfiles."
"testing.StaticLiveServerTestCase` milik dia sendiri, sebuah subkelas dari "
"satu siap pakai yang mempunyai kemampuan untuk transparan melayani semua "
"aset selama pelaksanaan dari percobaan ini dengan cara sangat mirip pada apa "
"kami dapat di waktu pengembangan dengan ``DEBUG = True``, yaitu tanpa "
"mengumpulkan mereka menggunakan :djadmin:`collectstatic` pertama kali."

msgid "Deployment"
msgstr "Penyebaran"

msgid ""
":mod:`django.contrib.staticfiles` provides a convenience management command "
"for gathering static files in a single directory so you can serve them "
"easily."
msgstr ""
":mod:`django.contrib.staticfiles` menyediakan kenyamanan perintah "
"pengelolaan untuk mengumpulkan berkas-berkas tetap dalam direktori tunggal "
"sehingga anda dapat melayani mereka dengan mudah."

msgid ""
"Set the :setting:`STATIC_ROOT` setting to the directory from which you'd "
"like to serve these files, for example::"
msgstr ""
"Setel pengaturan :setting:`STATIC_ROOT` ke direktori dari dimana anda ingin "
"melayani berkas-berkas ini, sebagai contoh::"

msgid "Run the :djadmin:`collectstatic` management command:"
msgstr "Jalankan perintah pengelolaan :djadmin:`collectstatic`:"

msgid ""
"This will copy all files from your static folders into the :setting:"
"`STATIC_ROOT` directory."
msgstr ""
"Ini akan menyalin semua berkas dari pelipat tetap anda kedalam direktori :"
"setting:`STATIC_ROOT`."

msgid ""
"Use a web server of your choice to serve the files. :doc:`/howto/static-"
"files/deployment` covers some common deployment strategies for static files."
msgstr ""
"Gunakan sebuah peladen jaringan dari pilihan anda untuk melayani berkas-"
"berkas. :doc:`/howto/static-files/deployment` melingkupi beberapa strategi "
"penyebaran umum untuk berkas-berkas tetap."

msgid ""
"This document has covered the basics and some common usage patterns. For "
"complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""
"Dokumen ini melingkupi corak penggunaan dasar dan beberapa umum. Untuk "
"melengkapi rincian pada semua pengaturan, perintah, etiket cetakan, dan "
"potongan lainnya disertakan dalam :mod:`django.contrib.staticfiles`, lihat :"
"doc:`the acuan berkas tetap </ref/contrib/staticfiles>`."

msgid "How to upgrade Django to a newer version"
msgstr "Bagaimana meningkatkan Django ke versi terbaru"

msgid ""
"While it can be a complex process at times, upgrading to the latest Django "
"version has several benefits:"
msgstr ""
"Selama dia dapat menjadi pengolahan rumit terkadang, meningkatkan ke versi "
"Django terakhir mempunyai beberapa keuntungan:"

msgid "New features and improvements are added."
msgstr "Fitur baru dan perbaikan telah ditambahkan."

msgid "Bugs are fixed."
msgstr "Kesalahan diperbaiki."

msgid ""
"Older version of Django will eventually no longer receive security updates. "
"(see :ref:`supported-versions-policy`)."
msgstr ""
"Versi terlama Django akhirnya tidak lagi menerima pembaharuan keamanan. "
"(lihat :ref:`supported-versions-policy`)."

msgid ""
"Upgrading as each new Django release is available makes future upgrades less "
"painful by keeping your code base up to date."
msgstr ""
"Meningkatkan ketika setiap terbitan Django baru tersedia membuat peningkatan "
"masa depan sedikit menyakitkan dengan menjaga dasar kode anda terbaru."

msgid ""
"Here are some things to consider to help make your upgrade process as smooth "
"as possible."
msgstr ""
"Ini adalah beberapa hal untuk dipertimbangkan untuk membantu pengolahan "
"membuat peningkatan anda semulus mungkin."

msgid "Required Reading"
msgstr "Dibutuhkan Membaca"

msgid ""
"If it's your first time doing an upgrade, it is useful to read the :doc:"
"`guide on the different release processes </internals/release-process>`."
msgstr ""
"Jika ini adalah pertama kali melakukan peningkatan, adalah sangat berguna "
"untuk membaca :doc:`panduan dalam pengolahan terbitan berbeda </internals/"
"release-process>`."

msgid ""
"Afterward, you should familiarize yourself with the changes that were made "
"in the new Django version(s):"
msgstr ""
"Kemudian, anda harus mengakrabkan diri anda sendiri dengan perubahan yang "
"dibuat di Django versi terbaru:"

msgid ""
"Read the :doc:`release notes </releases/index>` for each 'final' release "
"from the one after your current Django version, up to and including the "
"version to which you plan to upgrade."
msgstr ""
"Baca :doc:`release notes </releases/index>` untuk setiap terbitan 'final' "
"dari satu setelah versi Django saat ini, sampai dan termasuk versi dimana "
"anda berencana untuk ditingkatkan."

msgid ""
"Look at the :doc:`deprecation timeline</internals/deprecation>` for the "
"relevant versions."
msgstr ""
"Lihat :doc:`deprecation timeline</internals/deprecation>` untuk versi "
"bersangkutan."

msgid ""
"Pay particular attention to backwards incompatible changes to get a clear "
"idea of what will be needed for a successful upgrade."
msgstr ""
"Bayar perhatian khusus untuk perubahan ketidaksesuaian kebelakang untuk "
"mendapatkan ide jelas dari apa akan dibutuhkan untuk peningkatan yang "
"berhasil."

msgid ""
"If you're upgrading through more than one feature version (e.g. 2.0 to 2.2), "
"it's usually easier to upgrade through each feature release incrementally "
"(2.0 to 2.1 to 2.2) rather than to make all the changes for each feature "
"release at once. For each feature release, use the latest patch release (e."
"g. for 2.1, use 2.1.15)."
msgstr ""

msgid ""
"The same incremental upgrade approach is recommended when upgrading from one "
"LTS to the next."
msgstr ""
"Pendekatan peningkatan menaik yang sama dianjurkan ketika meningkatkan dari "
"satu LTS ke selanjutnya."

msgid "Dependencies"
msgstr "Ketergantungan"

msgid ""
"In most cases it will be necessary to upgrade to the latest version of your "
"Django-related dependencies as well. If the Django version was recently "
"released or if some of your dependencies are not well-maintained, some of "
"your dependencies may not yet support the new Django version. In these cases "
"you may have to wait until new versions of your dependencies are released."
msgstr ""
"Dalam kebanyakan kasus-kasus dia akan butuh ditingkatkan sampai versi "
"terakhir dari ketergantungan hubungan-Django anda juga. Jika versi Django "
"saat ini diterbitkan atau jika beberapa dari ketergantungan tidak dirawat-"
"baik, beberapa dari ketergantungan mungkin tidak mendukung versi Django "
"baru. Dalam kasus ini anda mungkin harus menunggu sampai versi terbaru dari "
"ketergantungan anda diterbitkan."

msgid "Resolving deprecation warnings"
msgstr "Menjelaskan peringatan pengusangan"

msgid ""
"Before upgrading, it's a good idea to resolve any deprecation warnings "
"raised by your project while using your current version of Django. Fixing "
"these warnings before upgrading ensures that you're informed about areas of "
"the code that need altering."
msgstr ""
"Sebelum meningkatkan, adalah ide bagus untuk menyelesaikan tiap peringatan "
"pengusangan muncul oleh proyek anda selagi menggunakan versi Django anda "
"saat ini. Memperbaiki peringatan ini sebelum meningkatkan memastikan bahwa "
"anda telah diinformasikan tentang kawasan dari kode yang butuh di rubah."

msgid ""
"In Python, deprecation warnings are silenced by default. You must turn them "
"on using the ``-Wa`` Python command line option or the :envvar:"
"`PYTHONWARNINGS` environment variable. For example, to show warnings while "
"running tests:"
msgstr ""
"Dalam Python, peringatan pengusangan diam secara awal. Anda harus "
"mernyalakan mereka menggunakan pilihan baris perintah Python ``-Wa`` atau "
"variabel lingkungan :envvar:`PYTHONWARNINGS`. Sebagai contoh, untuk "
"menunjukkan peringatan selagi menjalankan percobaan:"

msgid ""
"If you're not using the Django test runner, you may need to also ensure that "
"any console output is not captured which would hide deprecation warnings. "
"For example, if you use `pytest <https://docs.pytest.org/>`__:"
msgstr ""
"Jika anda tidak menggunakan penjalan percobaan Django, anda mungkin butuh "
"memastikan bahwa keluaran konsol apapun tidak ditangkap yang akan "
"menyembunyikan peringatan pengusangan. Sebagai contoh, jika anda menggunakan "
"`pytest <https://docs.pytest.org/>`__:"

msgid ""
"Resolve any deprecation warnings with your current version of Django before "
"continuing the upgrade process."
msgstr ""
"Selesaikan peringatan pengusangan apa saja dengan versi anda saat ini dari "
"Django sebelum menaljutkan pengolahan peningkatan."

msgid ""
"Third party applications might use deprecated APIs in order to support "
"multiple versions of Django, so deprecation warnings in packages you've "
"installed don't necessarily indicate a problem. If a package doesn't support "
"the latest version of Django, consider raising an issue or sending a pull "
"request for it."
msgstr ""
"Aplikasi pihak ketiga mungkin menggunakan API pengusangan agar mendukung "
"versi banyak dari Django, jadi peringatan pengusangan di paket-paket anda "
"telah pasang tidak perlu menunjukkan sebuah masalah. Jika sebuah paket tidak "
"mendukung versi terakhir dari Django, pertimbangkan menampilkan sebuah "
"masalah atau mengirim pull request untuknya."

msgid "Installation"
msgstr "Pemasangan"

msgid ""
"Once you're ready, it is time to :doc:`install the new Django version </"
"topics/install>`. If you are using a :mod:`virtual environment <venv>` and "
"it is a major upgrade, you might want to set up a new environment with all "
"the dependencies first."
msgstr ""
"Ketika anda siap, waktunya :doc:`install the new Django version </topics/"
"install>`. Jika anda menggunakan :mod:`virtual environment <venv>` dand "
"peningkatan besarnya, anda mungkin ingin menyetel lingkungan baru dengan "
"semua ketergantungannya dahulu."

msgid ""
"If you installed Django with pip_, you can use the ``--upgrade`` or ``-U`` "
"flag:"
msgstr ""
"Jika anda memasang Django dengan pip_, anda dapat menggunakan bendera ``--"
"upgrade`` atau ``-U``"

msgid ""
"When the new environment is set up, :doc:`run the full test suite </topics/"
"testing/overview>` for your application. Again, it's useful to turn on "
"deprecation warnings on so they're shown in the test output (you can also "
"use the flag if you test your app manually using ``manage.py runserver``):"
msgstr ""
"Ketika lingkungan baru disetel, :doc:`run the full test suite </topics/"
"testing/overview>` untuk aplikasi anda. Kembali, dia sangat membantu untuk "
"menyalakan peringatan pengusangan sehingga mereka tampil dalam keluaran "
"percobaan (anda dapat juga menggunakan bendera jika anda mencoba aplikasi "
"anda secara manual menggunakan ``manage.py runserver``):"

msgid ""
"After you have run the tests, fix any failures. While you have the release "
"notes fresh in your mind, it may also be a good time to take advantage of "
"new features in Django by refactoring your code to eliminate any deprecation "
"warnings."
msgstr ""
"Setelah anda menjalankan percobaan, perbaiki setiap kegagalan. Selagi anda "
"telah menerbitkan catatan segar dalam pikiran anda, itu mungkin juga waktu "
"yang tepat untuk mengambil keuntungan dari fitur baru dalam Django dengan "
"merefaktor kode anda untuk mengurangi setiap peringatan pengusangan."

msgid ""
"When you are sufficiently confident your app works with the new version of "
"Django, you're ready to go ahead and :doc:`deploy </howto/deployment/index>` "
"your upgraded Django project."
msgstr ""
"Ketika anda cukup percaya diri aplikasi anda bekerja dengan versi baru dari "
"Django, anda siap melanjutkan dan :doc:`deploy </howto/deployment/index>` "
"proyek Django anda yang ditingkatkan."

msgid ""
"If you are using caching provided by Django, you should consider clearing "
"your cache after upgrading. Otherwise you may run into problems, for "
"example, if you are caching pickled objects as these objects are not "
"guaranteed to be pickle-compatible across Django versions. A past instance "
"of incompatibility was caching pickled :class:`~django.http.HttpResponse` "
"objects, either directly or indirectly via the :func:`~django.views."
"decorators.cache.cache_page` decorator."
msgstr ""
"Jika anda menggunakan penembolokan oleh Django, anda harus mempertimbangkan "
"membersihkan tembolok setelah meningkatkan. Jika tidak anda mungkin berjalan "
"kedalam masalah, sebagai contoh, jika anda sedang menembolok obyek pickle "
"dimana obyek ini tidak dijamin untuk menjadi pickle cocok terhadap versi "
"Django. Contoh lama dari ketidakcocokan adalah menembolok obyek :class:"
"`~django.http.HttpResponse` pickle, salah satu langsung atau tidak langsung "
"melalui decorator :func:`~django.views.decorators.cache.cache_page`."

msgid "How to install Django on Windows"
msgstr "Bagaimana memasang Django pada WIndows"

msgid ""
"This document will guide you through installing Python 3.13 and Django on "
"Windows. It also provides instructions for setting up a virtual environment, "
"which makes it easier to work on Python projects. This is meant as a "
"beginner's guide for users working on Django projects and does not reflect "
"how Django should be installed when developing changes for Django itself."
msgstr ""

msgid ""
"The steps in this guide have been tested with Windows 10. In other versions, "
"the steps would be similar. You will need to be familiar with using the "
"Windows command prompt."
msgstr ""
"Langkah-langkah dalam panduan ini telah diuji dengan Windows 10. Di versi "
"lainnya, langkah-langkah akan mirip. Anda harus terbiasa dengan dengan "
"menggunakan perintah prompt Windows."

msgid "Install Python"
msgstr "Pasang Phyton"

msgid ""
"Django is a Python web framework, thus requiring Python to be installed on "
"your machine. At the time of writing, Python 3.13 is the latest version."
msgstr ""

msgid ""
"To install Python on your machine go to https://www.python.org/downloads/. "
"The website should offer you a download button for the latest Python "
"version. Download the executable installer and run it. Check the boxes next "
"to \"Install launcher for all users (recommended)\" then click \"Install "
"Now\"."
msgstr ""

msgid ""
"After installation, open the command prompt and check that the Python "
"version matches the version you installed by executing:"
msgstr ""

msgid "``py`` is not recognized or found"
msgstr "``py`` tidak dikenali atau ditemukan"

msgid ""
"Depending on how you've installed Python (such as via the Microsoft Store), "
"``py`` may not be available in the command prompt."
msgstr ""
"Bergantung pada bagaimana anda memasang Python (seperti melalui Microsoft "
"Store), ``py`` mungkin tidak tersedia di prompt perintah."

msgid ""
"You will then need to use ``python`` instead of ``py`` when entering "
"commands."
msgstr ""
"Anda akan butuh menggunakan``python`` daripada ``py`` ketika memasukkan "
"perintah."

msgid "For more details, see :doc:`python:using/windows` documentation."
msgstr "Untuk rincian lebih,lihat dokumentasi :doc:`python:using/windows`."

msgid "About ``pip``"
msgstr "Tentang ``pip``"

msgid ""
":pypi:`pip` is a package manager for Python and is included by default with "
"the Python installer. It helps to install and uninstall Python packages "
"(such as Django!). For the rest of the installation, we'll use ``pip`` to "
"install Python packages from the command line."
msgstr ""

msgid "Setting up a virtual environment"
msgstr "Menyetel lingkungan maya"

msgid ""
"It is best practice to provide a dedicated environment for each Django "
"project you create. There are many options to manage environments and "
"packages within the Python ecosystem, some of which are recommended in the "
"`Python documentation <https://packaging.python.org/guides/tool-"
"recommendations/>`_. Python itself comes with :doc:`venv <python:tutorial/"
"venv>` for managing environments which we will use for this guide."
msgstr ""

msgid ""
"To create a virtual environment for your project, open a new command prompt, "
"navigate to the folder where you want to create your project and then enter "
"the following:"
msgstr ""

msgid ""
"This will create a folder called 'project-name' if it does not already exist "
"and set up the virtual environment. To activate the environment, run:"
msgstr ""

msgid ""
"The virtual environment will be activated and you'll see \"(project-name)\" "
"next to the command prompt to designate that. Each time you start a new "
"command prompt, you'll need to activate the environment again."
msgstr ""

msgid "Install Django"
msgstr "Pasang Django"

msgid ""
"Django can be installed easily using ``pip`` within your virtual environment."
msgstr ""
"Django dapat dipasang dengan mudah menggunakan ``pip`` dalam lingkungan maya "
"anda."

msgid ""
"In the command prompt, ensure your virtual environment is active, and "
"execute the following command:"
msgstr ""
"Dalam prompt perintah, pastikan anda memasukkan lingkungan maya aktif, dan "
"menjalankan perintah berikut:"

msgid "This will download and install the latest Django release."
msgstr "Ini akan mengunduh dan memasang terbitan Django terakhir."

msgid ""
"After the installation has completed, you can verify your Django "
"installation by executing ``django-admin --version`` in the command prompt."
msgstr ""
"Setelah pemasangan lengkap, anda dapat memeriksa pemasangan Django anda "
"dengan menjalankan ``django-admin --version`` di command prompt."

msgid ""
"See :ref:`database-installation` for information on database installation "
"with Django."
msgstr ""
"Lihat :ref:`database-installation` untuk informasi pada pemasangan basisdata "
"dengan Django."

msgid "Colored terminal output"
msgstr "Keluaran terminal bewarna"

msgid ""
"A quality-of-life feature adds colored (rather than monochrome) output to "
"the terminal. In modern terminals this should work for both CMD and "
"PowerShell. If for some reason this needs to be disabled, set the "
"environmental variable :envvar:`DJANGO_COLORS` to ``nocolor``."
msgstr ""

msgid ""
"On older Windows versions, or legacy terminals, :pypi:`colorama` 0.4.6+ must "
"be installed to enable syntax coloring:"
msgstr ""

msgid "See :ref:`syntax-coloring` for more information on color settings."
msgstr ""
"Lihat :ref:`syntax-coloring` untuk informasi lebih pada pengaturan warna."

msgid "Common pitfalls"
msgstr "Kesalahan umum"

msgid ""
"If ``django-admin`` only displays the help text no matter what arguments it "
"is given, there is probably a problem with the file association in Windows. "
"Check if there is more than one environment variable set for running Python "
"scripts in ``PATH``. This usually occurs when there is more than one Python "
"version installed."
msgstr ""
"Jika ``django-admin`` hanya menampilkan teks bantuan tidak perduli argumen "
"apa yang diberikan, ada kemungkinan masalah dengan berkas terkait di "
"Windows. Periksa jika ada lagi dari satu kumpulan lingkungan variabel untuk "
"menjalankan tulisan Python dalam  ``PATH``. Ini biasanya muncul ketika ada "
"lebih dari satu versi Python terpasang."

msgid ""
"If you are connecting to the internet behind a proxy, there might be "
"problems in running the command ``py -m pip install Django``. Set the "
"environment variables for proxy configuration in the command prompt as "
"follows:"
msgstr ""

msgid ""
"In general, Django assumes that ``UTF-8`` encoding is used for I/O. This may "
"cause problems if your system is set to use a different encoding. Recent "
"versions of Python allow setting the :envvar:`PYTHONUTF8` environment "
"variable in order to force a ``UTF-8`` encoding. Windows 10 also provides a "
"system-wide setting by checking ``Use Unicode UTF-8 for worldwide language "
"support`` in :menuselection:`Language --> Administrative Language Settings --"
"> Change system locale` in system settings."
msgstr ""
"Secara umum, Django beranggapan bahwa penyandian ``UTF-8`` digunakan untuk I/"
"O. Ini mungkin menyebabkan masalah jika sistem anda disetel menggunakan "
"penyandian berbeda. Versi terbaru Python mengizinkan menyetel variabel "
"lingkungan the :envvar:`PYTHONUTF8` untuk memaksa penyandian ``UTF-8``. "
"Windows 10 juga menyediakan pengaturqan lebar-sistem dengen memilih ``Use "
"Unicode UTF-8 for worldwide language support`` di :menuselection:`Language --"
"> Administrative Language Settings --> Change system locale` dalam "
"pengaturan sistem."

msgid "How to create database migrations"
msgstr "Bagaimana membuat perpindahan basisdata"

msgid ""
"This document explains how to structure and write database migrations for "
"different scenarios you might encounter. For introductory material on "
"migrations, see :doc:`the topic guide </topics/migrations>`."
msgstr ""
"Dokumen ini menjelaskan bagaimana menyusun dan menulis perpindahan basisdata "
"untuk skenario berbeda anda mungkin hadapi. Untuk bahan perkenalan pada "
"perpindahan, lihat :doc:`the topic guide </topics/migrations>`."

msgid "Data migrations and multiple databases"
msgstr "Perpindahan data dan banyak basisdata"

msgid ""
"When using multiple databases, you may need to figure out whether or not to "
"run a migration against a particular database. For example, you may want to "
"**only** run a migration on a particular database."
msgstr ""
"Ketika menggunakan banyak basisdata, anda mungkin butuh memahami apakat atau "
"tidak menjalankan perpindahan terhadap basisdata tertentu. Sebagai contoh, "
"anda ingin **hanya** menjalankan perpindahan pada basisdata tertentu."

msgid ""
"In order to do that you can check the database connection's alias inside a "
"``RunPython`` operation by looking at the ``schema_editor.connection.alias`` "
"attribute::"
msgstr ""
"Untuk melakukan itu anda dapat memeriksa nama lain hubungan basisdata "
"didalam operasi ``RunPython`` dengan mencari atribut ``schema_editor."
"connection.alias``::"

msgid ""
"You can also provide hints that will be passed to the :meth:"
"`allow_migrate()` method of database routers as ``**hints``:"
msgstr ""
"Anda dapat juga menyediakan bayangan yang akan dilewatkan ke cara :meth:"
"`allow_migrate()` dari router basisdata sebagai ``**hints``: "

msgid "``myapp/dbrouters.py``"
msgstr "``myapp/dbrouters.py``"

msgid "Then, to leverage this in your migrations, do the following::"
msgstr ""
"Kemudian, untuk mempengaruhi ini dalam pemindahan anda, lakukan berikut::"

msgid ""
"If your ``RunPython`` or ``RunSQL`` operation only affects one model, it's "
"good practice to pass ``model_name`` as a hint to make it as transparent as "
"possible to the router. This is especially important for reusable and third-"
"party apps."
msgstr ""
"Jika operasi ``RunPython`` atau ``RunSQL`` anda hanya berpengaruh pada satu "
"model, adalah   latihan bagus untuk melewatkan ``model_name`` sebagai sebuah "
"bayangan untuk membuatnya se transparan mungkin ke router. Ini khususnya "
"penting untuk aplikasi digunakan kembali dan pihak ketiga."

msgid "Migrations that add unique fields"
msgstr "Perpindahan yang menambah bidang unik"

msgid ""
"Applying a \"plain\" migration that adds a unique non-nullable field to a "
"table with existing rows will raise an error because the value used to "
"populate existing rows is generated only once, thus breaking the unique "
"constraint."
msgstr ""
"Memberlakukan perpindahan \"plain\" yang menambahkan bidang bukan null unik "
"ke sebuah tabel dengan baris yang ada akan menampilkan sebuah kesalahan "
"karena nilai digunakan untuk mengumpulkan baris-baris yang ada dibangkitkan "
"hanya sekali, demikian merusak pembatas unik."

msgid ""
"Therefore, the following steps should be taken. In this example, we'll add a "
"non-nullable :class:`~django.db.models.UUIDField` with a default value. "
"Modify the respective field according to your needs."
msgstr ""
"Karena itu, langkah-langkah berikut harus diambil. Dalam contoh ini, kami "
"akan menambahkan :class:`~django.db.models.UUIDField` bukan null dengan "
"nilai awal. Rubah bidang masing-masing menurut kebutuhan anda."

msgid ""
"Add the field on your model with ``default=uuid.uuid4`` and ``unique=True`` "
"arguments (choose an appropriate default for the type of the field you're "
"adding)."
msgstr ""
"Tambah bidang pada model anda dengan argumen ``default=uuid.uuid4`` dan "
"``unique=True``  (pilih awal yang sesuai untuk jenis dari bidang anda sedang "
"tambahkan)."

msgid ""
"Run the :djadmin:`makemigrations` command. This should generate a migration "
"with an ``AddField`` operation."
msgstr ""
"Jalankan perintah  :djadmin:`makemigrations`. Ini harus membangkitkan "
"perpindahan dengan tindakan ``AddField``."

msgid ""
"Generate two empty migration files for the same app by running "
"``makemigrations myapp --empty`` twice. We've renamed the migration files to "
"give them meaningful names in the examples below."
msgstr ""
"Bangkitkan dua berkas-berkas perpindahan kosong untuk aplikasi sama dengan "
"menjalankan ``makemigrations myapp --empty`` dua kali. Kami telah menamai "
"kembali berkas-berkas perpindahan untuk memberikan mereka nama berarti di "
"contoh dibawah."

msgid ""
"Copy the ``AddField`` operation from the auto-generated migration (the first "
"of the three new files) to the last migration, change ``AddField`` to "
"``AlterField``, and add imports of ``uuid`` and ``models``. For example:"
msgstr ""
"Salin operasi ``AddField`` dari perpindahan dibangkitkan otomatis (pertama "
"dari tiga berkas-berkas baru) ke perpindahan terakhir, rubah ``AddField`` ke "
"``AlterField``, dan impor dari ``uuid`` dan ``models``. Sebagai contoh: "

msgid "``0006_remove_uuid_null.py``"
msgstr "``0006_remove_uuid_null.py``"

msgid ""
"Edit the first migration file. The generated migration class should look "
"similar to this:"
msgstr ""
"Sunting berkas perpindahan pertama. Kelas perpindahan dibangkitkan harus "
"kelihatan mirip seperti ini:"

msgid "``0004_add_uuid_field.py``"
msgstr "``0004_add_uuid_field.py``"

msgid ""
"Change ``unique=True`` to ``null=True`` -- this will create the intermediary "
"null field and defer creating the unique constraint until we've populated "
"unique values on all the rows."
msgstr ""
"Rubah ``unique=True`` menjadi ``null=True`` -- ini akan membuat perantara "
"bidang null dan menunda pembuatan pembatas unik sampai kami telah "
"mengumpulkan nilai-nilai unik pada semua baris."

msgid ""
"In the first empty migration file, add a :class:`~django.db.migrations."
"operations.RunPython` or :class:`~django.db.migrations.operations.RunSQL` "
"operation to generate a unique value (UUID in the example) for each existing "
"row. Also add an import of ``uuid``. For example:"
msgstr ""
"Dalam berkas perpindahan kosong pertama, tambah sebuah tindakan :class:"
"`~django.db.migrations.operations.RunPython` atau :class:`~django.db."
"migrations.operations.RunSQL` untuk membangkitkan nilai unik (UUID dalam "
"contoh) untuk setiap baris yang yang ada. Juga tambah sebuah impor dari "
"``uuid``. Sebagai contoh:"

msgid "``0005_populate_uuid_values.py``"
msgstr "``0005_populate_uuid_values.py``"

msgid ""
"Now you can apply the migrations as usual with the :djadmin:`migrate` "
"command."
msgstr ""
"Sekarang anda dapat berlakukan perpindahan seperti biasa dengan perintah :"
"djadmin:`migrate`"

msgid ""
"Note there is a race condition if you allow objects to be created while this "
"migration is running. Objects created after the ``AddField`` and before "
"``RunPython`` will have their original ``uuid``’s overwritten."
msgstr ""
"Catat ada kondisi jarang jika anda mengizinkan obyek untuk dibuat selagi "
"perpindahan ini berjalan. Obyek dibuat setelah ``AddField`` dan sebelum "
"``RunPython`` akan mempunyai ``uuid`` asli mereka ditulis kembali."

msgid "Non-atomic migrations"
msgstr "Perpindahan Non-atomic"

msgid ""
"On databases that support DDL transactions (SQLite and PostgreSQL), "
"migrations will run inside a transaction by default. For use cases such as "
"performing data migrations on large tables, you may want to prevent a "
"migration from running in a transaction by setting the ``atomic`` attribute "
"to ``False``::"
msgstr ""
"Pada basisdata yang mendukung transaksi DDL (SQLite dan PostgreSQL), "
"perpindahan akan berjalan di dalam sebuah transaksi secara awal. Untuk "
"penggunakan kasus seperti melakukan perpindahan data pada tabel-tabel besar, "
"anda mungkin ingin mencegah perpindahan dari berjalan dalam sebuah transaksi "
"dengan mengatur atribut ``atomic`` menjadi ``False``::"

msgid ""
"Within such a migration, all operations are run without a transaction. It's "
"possible to execute parts of the migration inside a transaction using :func:"
"`~django.db.transaction.atomic()` or by passing ``atomic=True`` to "
"``RunPython``."
msgstr ""
"Dalam perpindahan seperti itu, semua tindakan berjalan tanpa sebuah "
"transaksi. Itu memungkinkan menjalankan bagian-bagian dari perpindahan "
"didalam sebuah transaksi menggunakan :func:`~django.db.transaction.atomic()` "
"atau dengan melewatkan ``atomic=True`` ke ``RunPython``."

msgid ""
"Here's an example of a non-atomic data migration that updates a large table "
"in smaller batches::"
msgstr ""
"Ini adalah sebuah contoh dari perpindahan data non-atomic yang memperbaharui "
"tabel besar dalam kumpulan-kumpulan kecil::"

msgid ""
"The ``atomic`` attribute doesn't have an effect on databases that don't "
"support DDL transactions (e.g. MySQL, Oracle). (MySQL's `atomic DDL "
"statement support <https://dev.mysql.com/doc/refman/en/atomic-ddl.html>`_ "
"refers to individual statements rather than multiple statements wrapped in a "
"transaction that can be rolled back.)"
msgstr ""
"Atribut ``atomic`` tidak mempunyai pengaruh pada basisdata yang tidak "
"mendukung transaksi DDL (yaitu MySQL, Oracle). (`atomic DDL statement "
"support <https://dev.mysql.com/doc/refman/en/atomic-ddl.html>`_  MySQL "
"mengacu pada pernyataan masing-masing daripada banyak pernyataan dibungkus "
"dalam sebuah transaksi yang dapat di kembalikan.)"

msgid "Controlling the order of migrations"
msgstr "Mengendalikan urutan dari pemindahan"

msgid ""
"Django determines the order in which migrations should be applied not by the "
"filename of each migration, but by building a graph using two properties on "
"the ``Migration`` class: ``dependencies`` and ``run_before``."
msgstr ""
"Django menentukan urutan dalam perpindahan mana harus diberlakukan tidak "
"berdasarkan nama berkas dari setiap perpindahan, tetapi dengan membangun "
"sebuah grafik menggunakan dua alat pada kelas ``Migration``: "
"``dependencies`` dan ``run_before``."

msgid ""
"If you've used the :djadmin:`makemigrations` command you've probably already "
"seen ``dependencies`` in action because auto-created migrations have this "
"defined as part of their creation process."
msgstr ""
"Jika anda telah menggunakan perintah :djadmin:`makemigrations` anda mungkin "
"seudah melihat ``dependencies`` dalam tindakan karena perpindahan dibuat-"
"otomatis mempunyai penentuan ini sebagai bagian dari pengolahan pembuatan "
"mereka."

msgid "The ``dependencies`` property is declared like this::"
msgstr "Properti ``dependencies`` diumumkan seperti ini::"

msgid ""
"Usually this will be enough, but from time to time you may need to ensure "
"that your migration runs *before* other migrations. This is useful, for "
"example, to make third-party apps' migrations run *after* your :setting:"
"`AUTH_USER_MODEL` replacement."
msgstr ""
"Biasanya ini akan cukup, tetapi dari waktu ke waktu anda mungkin butuh "
"memastikan bahwa perpindahan anda berjalan *sebelum* perpindahan lain. Ini "
"berguna, sebagai contoh, untuk membuat perpindahan aplikasi pihak ketiga "
"berjalan *setelah* pergantian :setting:`AUTH_USER_MODEL` anda."

msgid ""
"To achieve this, place all migrations that should depend on yours in the "
"``run_before`` attribute on your ``Migration`` class::"
msgstr ""
"Untuk mencapai ini, tempatkan semua perpindahan yang harus tergantung pada "
"diri anda dalam atribut ``run_before`` pada kelas ``Migration`` anda."

msgid ""
"Prefer using ``dependencies`` over ``run_before`` when possible. You should "
"only use ``run_before`` if it is undesirable or impractical to specify "
"``dependencies`` in the migration which you want to run after the one you "
"are writing."
msgstr ""
"Lebih suka menggunakan ``dependencies`` daripada ``run_before`` ketika "
"memungkinkan. Anda harus hanya menggunakan ``run_before`` jika dia tidak "
"diinginkan atau tidak praktis untuk menentukan ``dependencies`` dalam "
"perpindahan yang anda ingin jalankan setelah satu anda sedang tulis."

msgid "Migrating data between third-party apps"
msgstr "Memindahkan data diantara aplikasi pihak-ketiga"

msgid ""
"You can use a data migration to move data from one third-party application "
"to another."
msgstr ""
"Anda dapat menggunakan perpindahan data untuk memindahkan data dari satu "
"aplikasi pihak-ketiga ke lainnya."

msgid ""
"If you plan to remove the old app later, you'll need to set the "
"``dependencies`` property based on whether or not the old app is installed. "
"Otherwise, you'll have missing dependencies once you uninstall the old app. "
"Similarly, you'll need to catch :exc:`LookupError` in the ``apps."
"get_model()`` call that retrieves models from the old app. This approach "
"allows you to deploy your project anywhere without first installing and then "
"uninstalling the old app."
msgstr ""
"Jika anda berencana memindahkan aplikasi lama nanti, anda akan butuh "
"menyetel properti ``dependencies`` berdasarkan pada apakah atau tidak "
"aplikasi lama terpasang. Jika tidak, anda akan kehilangan ketergantungan "
"sekali anda melepas aplikasi lama. Sama halnya, anda akan butuh menangkap :"
"exc:`LookupError` di panggilan ``apps.get_model()`` yang mengambil model-"
"model dari aplikasi lama. Pendekatan ini mengizinkan anda menyebarkan proyek "
"anda dimanapun tanpa memasang dan melepas aplikasi lama terlebih dahulu."

msgid "Here's a sample migration:"
msgstr "Ini adalah contoh perpindahan:"

msgid "``myapp/migrations/0124_move_old_app_to_new_app.py``"
msgstr "``myapp/migrations/0124_move_old_app_to_new_app.py``"

msgid ""
"Also consider what you want to happen when the migration is unapplied. You "
"could either do nothing (as in the example above) or remove some or all of "
"the data from the new application. Adjust the second argument of the :mod:"
"`~django.db.migrations.operations.RunPython` operation accordingly."
msgstr ""
"Juga pertimbangkan apa anda inginkan terjadi ketika perpindahan tidak "
"diberlakukan. Anda dapat juga tidak melakukan apapun (seperti di contoh "
"diatas) atau memindahkan beberapa atau semua data dari apliaksi baru. "
"Sesuaikan argumen kedua dari operasi :mod:`~django.db.migrations.operations."
"RunPython` sesuai dengan itu."

msgid "Changing a ``ManyToManyField`` to use a ``through`` model"
msgstr "Mengubah ``ManyToManyField`` untuk menggunakan ``through`` model"

msgid ""
"If you change a :class:`~django.db.models.ManyToManyField` to use a "
"``through`` model, the default migration will delete the existing table and "
"create a new one, losing the existing relations. To avoid this, you can use :"
"class:`.SeparateDatabaseAndState` to rename the existing table to the new "
"table name while telling the migration autodetector that the new model has "
"been created. You can check the existing table name through :djadmin:"
"`sqlmigrate` or :djadmin:`dbshell`. You can check the new table name with "
"the through model's ``_meta.db_table`` property. Your new ``through`` model "
"should use the same names for the ``ForeignKey``\\s as Django did. Also if "
"it needs any extra fields, they should be added in operations after :class:`."
"SeparateDatabaseAndState`."
msgstr ""
"Jika anda merubah :class:`~django.db.models.ManyToManyField` menggunakan "
"model ``through``, perpindahan awal akan menghapus tabel yang ada dan "
"membuat satu yang baru, menghilangkan hubungan yang ada. Untuk menghindari "
"ini, anda dapat menggunakan :class:`.SeparateDatabaseAndState` menamai "
"kembali tabel yang ada ke tabel baru selagi memberitahu pendeteksi otomatis "
"perpindahan dimana model baru telah dibuat. Anda dapat memeriksa nama tabel "
"yang ada melalui :djadmin:`sqlmigrate` atau :djadmin:`dbshell`. Anda dapat "
"memeriksa nama tabel baru melalui properti model ``_meta.db_table``. Model "
"baru anda ``through`` harus menggunakan nama sama untuk ``ForeignKey`` "
"seperti Django lakukan. Juga jika dibutuhkan bidang tambahan, mereka harus "
"ditambahkan dalam tindakan setelah :class:`.SeparateDatabaseAndState`."

msgid ""
"For example, if we had a ``Book`` model with a ``ManyToManyField`` linking "
"to ``Author``, we could add a through model ``AuthorBook`` with a new field "
"``is_primary``, like so::"
msgstr ""
"Sebagai contoh, jika kita memiliki model ``Book`` dengan ``ManyToManyField`` "
"yang mengarah ke `Author`, kita bisa menambahkan model antara ``AuthorBook`` "
"dengan field baru ``is_primary``, seperti ini::"

msgid "Changing an unmanaged model to managed"
msgstr "Merubah model tidak dikendalikan menjadi dikendalikan"

msgid ""
"If you want to change an unmanaged model (:attr:`managed=False <django.db."
"models.Options.managed>`) to managed, you must remove ``managed=False`` and "
"generate a migration before making other schema-related changes to the "
"model, since schema changes that appear in the migration that contains the "
"operation to change ``Meta.managed`` may not be applied."
msgstr ""
"Jika anda ingin merubah sebuah model tidak dikendalikan (:attr:"
"`managed=False <django.db.models.Options.managed>`) menjadi dikendalikan, "
"anda harus memindahkan ``managed=False`` dan bangkitkan perpindahan sebelum "
"membuat perubahan skema-terhubung lainnya ke model, sejak perubahan skema "
"yang muncul di perpindahan yang mengandung tindakan untuk merubah ``Meta."
"managed`` mungkin tidak diberlakukan."
