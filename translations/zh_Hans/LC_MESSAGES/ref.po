# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# Dogify <595572594@qq.com>, 2018
# Fnanshan <634635262@qq.com>, 2019
# Arisaka97 <solitaire2312@gmail.com>, 2020
# Aris Chow <arischow@gmail.com>, 2018
# blacklin <chinalinzhijie@gmail.com>, 2020
# ChY Ma <Marsopera@163.com>, 2020
# CoMo <yi04188@gmail.com>, 2021
# Dogify <595572594@qq.com>, 2019
# flypopo <flypopo.reg@qq.com>, 2018
# cxgreat2014 <fwy1998@gmail.com>, 2018
# Hongjie Tian <tianhongjie07@gmail.com>, 2017
# Imken Luo, 2023
# Jason Ren, 2022
# JINGMING DAI <d664216@gmail.com>, 2018
# df2dc1c92e792f7ae8417c51df43db8f_594d92a <0f49be28017426edb1db1a2ab6e67088_717605>, 2020
# Junyu Li <junyu-li@outlook.com>, 2021
# Kaiqi Zhu, 2023
# Kane Shi, 2020
# Kevin Sze <leiarix@gmail.com>, 2014
# Kevin Zhang <kevinzh64@gmail.com>, 2018
# kkkkhu <tracis@wodiga.com>, 2017
# leafcoder zhang <leafcoder@gmail.com>, 2021-2022
# Liping Wang <lynn.config@gmail.com>, 2016
# Veoco <one@nomox.cn>, 2020
# Ronald White <tkliuxing@me.com>, 2013
# qiang wu <wuqiangroy@live.com>, 2018
# Qi Zhao <956361916@qq.com>, 2021
# Ray Wang <pivstone@gmail.com>, 2017
# Sean Chen <seanchen1023@gmail.com>, 2020
# Veoco <one@nomox.cn>, 2020-2022
# wades Wei <skyblue_mr@outlook.com>, 2017
# wolf ice <warwolf7677@163.com>, 2020
# XeRn <hfutxc.xern@gmail.com>, 2017
# Xiang Yu <bupt.aswmtjdsj@gmail.com>, 2014
# yhliyr <lokidri@outlook.com>, 2018
# YuJin Zhu <fxdjjn@163.com>, 2018
# Yuliang Zhang <alazyer@gmail.com>, 2018
# VinCiLord <lxfyok@gmail.com>, 2018
# hhelibeb <hhelibeb@foxmail.com>, 2019
# Zhibo Zhang <805960083@qq.com>, 2019
# z l <aikuuer@gmail.com>, 2018
# 书俭 岳 <479100885@qq.com>, 2018
# 锟斤拷 <xiake21x@qq.com>, 2016-2017
# 奈何 lee, 2023
# 志强 曾 <749970817@qq.com>, 2020
# 成林 武 <1085505179@qq.com>, 2021
# Yang,Zhou <bnm_965321@sina.com>, 2018
# 摸象 虾子 <86447840@qq.com>, 2019
# 旸珂 邵 <1052303323@qq.com>, 2020
# 春雷 董 <pipiccll@gmail.com>, 2018
# Dogify <595572594@qq.com>, 2019
# Ronald White <tkliuxing@me.com>, 2013
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-21 03:45-0500\n"
"PO-Revision-Date: 2013-04-02 20:01+0000\n"
"Last-Translator: 奈何 lee, 2023\n"
"Language-Team: Chinese (China) (http://app.transifex.com/django/django-docs/"
"language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Applications"
msgstr "应用程序"

msgid ""
"Django contains a registry of installed applications that stores "
"configuration and provides introspection. It also maintains a list of "
"available :doc:`models </topics/db/models>`."
msgstr ""
"Django 包含一个已安装应用程序的注册表，能够存储配置和内省。它还维护着一个可用"
"的 :doc:`模型 </topics/db/models>` 列表。"

msgid ""
"This registry is called :attr:`~django.apps.apps` and it's available in :mod:"
"`django.apps`:"
msgstr ""
"这个注册表叫做 :attr:`~django.app.app`，它在 :mod:`django.app` 中可用："

msgid "Projects and applications"
msgstr "项目和应用程序"

msgid ""
"The term **project** describes a Django web application. The project Python "
"package is defined primarily by a settings module, but it usually contains "
"other things. For example, when you run  ``django-admin startproject "
"mysite`` you'll get a ``mysite`` project directory that contains a "
"``mysite`` Python package with ``settings.py``, ``urls.py``, ``asgi.py`` and "
"``wsgi.py``. The project package is often extended to include things like "
"fixtures, CSS, and templates which aren't tied to a particular application."
msgstr ""
"术语 **项目** 描述了一个 Django 网络应用。项目的 Python 包主要是由一个配置模"
"块定义的，但它通常包含其他东西。例如，当你运行 ``django-admin startproject "
"mysite`` 时，你会得到一个 ``mysite`` 项目目录，其中包含一个 ``mysite`` 的 "
"Python 包，其中有 ``settings.py``、``urls.py``、``asgi.py`` 和 ``wsgi.py``。"
"该项目包经常被扩展到包括像辅助工具、CSS 和模板这样的东西，这些东西并不与特定"
"的应用程序相关。"

msgid ""
"A **project's root directory** (the one that contains ``manage.py``) is "
"usually the container for all of a project's applications which aren't "
"installed separately."
msgstr ""
"一个 **项目的根目录** （包含 ``manage.py`` 文件的目录）通常是项目中所有未单独"
"安装的应用程序的容器。"

msgid ""
"The term **application** describes a Python package that provides some set "
"of features. Applications :doc:`may be reused </intro/reusable-apps/>` in "
"various projects."
msgstr ""
"术语 **应用程序** 指的是提供了一些功能的 Python 包。应用程序 :doc:`可在多个项"
"目中重用 </intro/reusable-apps/>`。"

msgid ""
"Applications include some combination of models, views, templates, template "
"tags, static files, URLs, middleware, etc. They're generally wired into "
"projects with the :setting:`INSTALLED_APPS` setting and optionally with "
"other mechanisms such as URLconfs, the :setting:`MIDDLEWARE` setting, or "
"template inheritance."
msgstr ""
"应用程序包括模型，视图，模板，模板标签，静态文件，URL，中间件等的一些组合。它"
"们通常使用 :setting:`INSTALLED_APPS` 选项加入到项目中，也可以使用其他机制，"
"如 URLconf， :setting:`MIDDLEWARE` 配置或模板继承。"

msgid ""
"It is important to understand that a Django application is a set of code "
"that interacts with various parts of the framework. There's no such thing as "
"an ``Application`` object. However, there's a few places where Django needs "
"to interact with installed applications, mainly for configuration and also "
"for introspection. That's why the application registry maintains metadata in "
"an :class:`~django.apps.AppConfig` instance for each installed application."
msgstr ""
"重要的是要理解 Django 应用程序是一组与框架各部分交互的代码。并不存在 "
"``Application`` 对象这种东西。但是，在一些地方，Django 需要与已安装的应用进行"
"交互，主要是为了配置，也是为了自省。所以应用注册表为每个安装的应用在一个 :"
"class:`~django.apps.AppConfig` 实例中维护元数据。"

msgid ""
"There's no restriction that a project package can't also be considered an "
"application and have models, etc. (which would require adding it to :setting:"
"`INSTALLED_APPS`)."
msgstr ""
"一个项目包可以自由的作为一个应用程序并包含一些模型等（前提是，需要把它加入 :"
"setting:`INSTALLED_APPS`）。"

msgid "Configuring applications"
msgstr "配置应用程序"

msgid ""
"To configure an application, create an ``apps.py`` module inside the "
"application, then define a subclass of :class:`AppConfig` there."
msgstr ""
"要设置一个应用程序，在应用程序中创建一个 ``apps.py`` 模块，然后在那里定义一"
"个 :class:`AppConfig` 的子类。"

msgid ""
"When :setting:`INSTALLED_APPS` contains the dotted path to an application "
"module, by default, if Django finds exactly one :class:`AppConfig` subclass "
"in the ``apps.py`` submodule, it uses that configuration for the "
"application. This behavior may be disabled by setting :attr:`AppConfig."
"default` to ``False``."
msgstr ""
"当 :setting:`INSTALLED_APPS` 中包含一个应用程序模块的点分隔路径时，默认情况"
"下，如果 Django 在 ``apps.py`` 子模块中找到一个 :class:`AppConfig` 子类，它就"
"会将该配置用于应用程序。这个行为可以通过设置 :attr:`AppConfig.default` 为 "
"``False`` 来禁止。"

msgid ""
"If the ``apps.py`` module contains more than one :class:`AppConfig` "
"subclass, Django will look for a single one where :attr:`AppConfig.default` "
"is ``True``."
msgstr ""
"如果 ``apps.py`` 模块包含多个 :class:`AppConfig` 子类，Django 会寻找一个 :"
"attr:`AppConfig.default` 为 ``True`` 的子类。"

msgid ""
"If no :class:`AppConfig` subclass is found, the base :class:`AppConfig` "
"class will be used."
msgstr "如果没有找到 :class:`AppConfig` 子类，将使用 :class:`AppConfig` 基类。"

msgid ""
"Alternatively, :setting:`INSTALLED_APPS` may contain the dotted path to a "
"configuration class to specify it explicitly::"
msgstr ""
"另外，:setting:`INSTALLED_APPS` 也可以包含一个配置类的点分隔路径，以明确地指"
"定它："

msgid "For application authors"
msgstr "对于应用程序作者"

msgid ""
"If you're creating a pluggable app called \"Rock ’n’ roll\", here's how you "
"would provide a proper name for the admin::"
msgstr ""
"如果你正在创建一个名为 “Rock ’n’ roll” 的可插拔应用，那么这边将告诉你将如何为"
"管理后台提供一个合适的名称："

msgid ""
"``RockNRollConfig`` will be loaded automatically when :setting:"
"`INSTALLED_APPS` contains ``'rock_n_roll'``. If you need to prevent this, "
"set :attr:`~AppConfig.default` to ``False`` in the class definition."
msgstr ""
"当 :setting:`INSTALLED_APPS` 包含 ``'rock_n_roll'`` 时，``RockNRollConfig`` "
"将自动加载。如果需要防止这种情况发生，可以在类定义中把 :attr:`~AppConfig."
"default` 设置为 ``False``。"

msgid ""
"You can provide several :class:`AppConfig` subclasses with different "
"behaviors. To tell Django which one to use by default, set :attr:`~AppConfig."
"default` to ``True`` in its definition. If your users want to pick a non-"
"default configuration, they must replace ``'rock_n_roll'`` with the dotted "
"path to that specific class in their :setting:`INSTALLED_APPS` setting."
msgstr ""
"你可以提供多个 :class:`AppConfig` 子类来实现不同的行为。要告诉 Django 默认使"
"用哪一个，可以在定义中把 :attr:`~AppConfig.default` 设置为 ``True``。如果你的"
"用户想选择一个非默认的配置，他们必须在他们的 :setting:`INSTALLED_APPS` 配置中"
"用这个类的点分隔路径替换 ``'rock_n_roll'``。"

msgid ""
"The :attr:`AppConfig.name` attribute tells Django which application this "
"configuration applies to. You can define any other attribute documented in "
"the :class:`~django.apps.AppConfig` API reference."
msgstr ""
":attr:`AppConfig.name` 属性告诉 Django 这个配置适用于哪个应用。你可以定义在 :"
"class:`~django.app.AppConfig` API 参考中描述任何其他属性。"

msgid ""
":class:`AppConfig` subclasses may be defined anywhere. The ``apps.py`` "
"convention merely allows Django to load them automatically when :setting:"
"`INSTALLED_APPS` contains the path to an application module rather than the "
"path to a configuration class."
msgstr ""
":class:`AppConfig` 子类可以在任何地方定义。``apps.py`` 惯例只是允许 Django "
"在 :setting:`INSTALLED_APPS` 包含一个应用程序模块的路径而不是一个配置类的路径"
"时自动加载它们。"

msgid ""
"If your code imports the application registry in an application's ``__init__."
"py``, the name ``apps`` will clash with the ``apps`` submodule. The best "
"practice is to move that code to a submodule and import it. A workaround is "
"to import the registry under a different name::"
msgstr ""
"若你在应用的 ``__init__.py`` 中导入了应用注册信息，名称 ``apps`` 会与子模块 "
"``apps`` 冲突。最好的办法是将此段带入移入子模块，再导入它。折中方案是导入后取"
"个别名::"

msgid "For application users"
msgstr "对于应用程序使用者"

msgid ""
"If you're using \"Rock ’n’ roll\" in a project called ``anthology``, but you "
"want it to show up as \"Jazz Manouche\" instead, you can provide your own "
"configuration::"
msgstr ""
"项目中直接使用 “Rock ’n’ roll”，其名字会是 ``anthology``，但是你可能期望显示 "
"“Jazz Manouche”，这需要你提供自定义配置："

msgid ""
"This example shows project-specific configuration classes located in a "
"submodule called ``apps.py``. This is a convention, not a requirement. :"
"class:`AppConfig` subclasses may be defined anywhere."
msgstr ""
"这个例子显示了位于一个名为 ``apps.py`` 的子模块中的特定项目配置类。:class:"
"`AppConfig` 子类可以在任何地方定义。"

msgid ""
"In this situation, :setting:`INSTALLED_APPS` must contain the dotted path to "
"the configuration class because it lives outside of an application and thus "
"cannot be automatically detected."
msgstr ""
"在这种情况下，:setting:`INSTALLED_APPS` 必须包含配置类的点分隔路径，因为它位"
"于应用程序之外，因此无法自动检测。"

msgid "Application configuration"
msgstr "应用程序配置"

msgid ""
"Application configuration objects store metadata for an application. Some "
"attributes can be configured in :class:`~django.apps.AppConfig` subclasses. "
"Others are set by Django and read-only."
msgstr ""
"应用程序配置对象存储了应用的元数据。某些属性可以在 :class:`~django.apps."
"AppConfig` 的子类中配置。而其它 Django 设置好的配置是只读的。"

msgid "Configurable attributes"
msgstr "可配置属性"

msgid "Full Python path to the application, e.g. ``'django.contrib.admin'``."
msgstr ""
"指向此应用程序的完整的 Python 格式的路径，如 ``'django.contrib.admin'``。"

msgid ""
"This attribute defines which application the configuration applies to. It "
"must be set in all :class:`~django.apps.AppConfig` subclasses."
msgstr ""
"此属性定义配置适用的应用程序。每个 :class:`~django.apps.AppConfig` 子类都必须"
"包含此项。"

msgid "It must be unique across a Django project."
msgstr "它必须在整个 Django 项目中唯一。"

msgid "Short name for the application, e.g. ``'admin'``"
msgstr "应用程序简称，如 ``'admin'``"

msgid ""
"This attribute allows relabeling an application when two applications have "
"conflicting labels. It defaults to the last component of ``name``. It should "
"be a valid Python identifier."
msgstr ""
"此属性允许在两个应用标签冲突时重命名其中一个的标签名。默认是 ``name`` 的最后"
"一段。必须是一个有效的 Python 标识符。"

msgid "Human-readable name for the application, e.g. \"Administration\"."
msgstr "应用程序容易被人理解的名称，如 “Administration”。"

msgid "This attribute defaults to ``label.title()``."
msgstr "此属性默认值为 ``label.title()``。"

msgid ""
"Filesystem path to the application directory, e.g. ``'/usr/lib/pythonX.Y/"
"dist-packages/django/contrib/admin'``."
msgstr ""
"应用目录的文件系统路径，如 ``'/usr/lib/pythonX.Y/dist-packages/django/"
"contrib/admin'``。"

msgid ""
"In most cases, Django can automatically detect and set this, but you can "
"also provide an explicit override as a class attribute on your :class:"
"`~django.apps.AppConfig` subclass. In a few situations this is required; for "
"instance if the app package is a `namespace package`_ with multiple paths."
msgstr ""
"大多数情况下，Django 能自动检测并设置此属性，但你也能在 :class:`~django.apps."
"AppConfig` 子类中申明此属性，显式地重写它。很少情况下要这么做；例如，若应用包"
"是一个拥有多个路径的 `命名空间`_。"

msgid ""
"Set this attribute to ``False`` to prevent Django from selecting a "
"configuration class automatically. This is useful when ``apps.py`` defines "
"only one :class:`AppConfig` subclass but you don't want Django to use it by "
"default."
msgstr ""
"将此属性设置为 ``False`` 以防止 Django 自动选择配置类。当 ``apps.py`` 只定义"
"了一个 :class:`AppConfig` 子类，但你不想让 Django 默认使用它时，这个属性很有"
"用。"

msgid ""
"Set this attribute to ``True`` to tell Django to select a configuration "
"class automatically. This is useful when ``apps.py`` defines more than one :"
"class:`AppConfig` subclass and you want Django to use one of them by default."
msgstr ""
"将这个属性设置为 ``True`` 来告诉 Django 自动选择一个配置类。当 ``apps.py`` 定"
"义了多个 :class:`AppConfig` 子类，而你希望 Django 默认使用其中一个时，这个属"
"性很有用。"

msgid "By default, this attribute isn't set."
msgstr "默认情况下，这个属性没有设置。"

msgid ""
"The implicit primary key type to add to models within this app. You can use "
"this to keep :class:`~django.db.models.AutoField` as the primary key type "
"for third party applications."
msgstr ""
"隐式主键类型，用于添加到本应用中的模型。你可以用它来保持 :class:`~django.db."
"models.AutoField` 作为第三方应用的主键类型。"

msgid "By default, this is the value of :setting:`DEFAULT_AUTO_FIELD`."
msgstr "默认情况下，这是 :setting:`DEFAULT_AUTO_FIELD` 的值。"

msgid "Read-only attributes"
msgstr "只读属性"

msgid ""
"Root module for the application, e.g. ``<module 'django.contrib.admin' from "
"'django/contrib/admin/__init__.py'>``."
msgstr ""
"应用程序的根模块，如 ``<module 'django.contrib.admin' from 'django/contrib/"
"admin/__init__.py'>``。"

msgid ""
"Module containing the models, e.g. ``<module 'django.contrib.admin.models' "
"from 'django/contrib/admin/models.py'>``."
msgstr ""
"包含模型的模块，如 ``<module 'django.contrib.admin.models' from 'django/"
"contrib/admin/models.py'>``。"

msgid ""
"It may be ``None`` if the application doesn't contain a ``models`` module. "
"Note that the database related signals such as :data:`~django.db.models."
"signals.pre_migrate` and :data:`~django.db.models.signals.post_migrate` are "
"only emitted for applications that have a ``models`` module."
msgstr ""
"应用不包含 ``models`` 模块时，可能是 ``None``。注意，数据库关联的信号，例如 :"
"data:`~django.db.models.signals.pre_migrate` 和 :data:`~django.db.models."
"signals.post_migrate` 仅在应用有 ``models`` 模块时发出。"

msgid "Methods"
msgstr "方法"

msgid ""
"Returns an iterable of :class:`~django.db.models.Model` classes for this "
"application."
msgstr "为该应用返回一个可迭代的 :class:`~django.db.models.Model` 类。"

msgid "Requires the app registry to be fully populated."
msgstr "要求完整填写应用注册表。"

msgid ""
"Returns the :class:`~django.db.models.Model` with the given ``model_name``. "
"``model_name`` is case-insensitive."
msgstr ""
"返回给出的 ``model_name`` 的 :class:`~django.db.models.Model`。 "
"``model_name`` 是大小写敏感的。"

msgid "Raises :exc:`LookupError` if no such model exists in this application."
msgstr "如果应用程序中不存在此模块，则抛出 :exc:`LookupError` 异常。"

msgid ""
"Requires the app registry to be fully populated unless the ``require_ready`` "
"argument is set to ``False``. ``require_ready`` behaves exactly as in :meth:"
"`apps.get_model()`."
msgstr ""
"除 ``require_ready`` 参数为 ``False`` 的情况下，都必须完整设置注册信息。 "
"``require_ready`` 行为与 :meth:`apps.get_model()` 一致。"

msgid ""
"Subclasses can override this method to perform initialization tasks such as "
"registering signals. It is called as soon as the registry is fully populated."
msgstr ""
"子类可以重写此方法来执行类似注册信号的初始化任务。只要注册表被填满就会调用此"
"方法。"

msgid ""
"Although you can't import models at the module-level where :class:`~django."
"apps.AppConfig` classes are defined, you can import them in ``ready()``, "
"using either an ``import`` statement or :meth:`~AppConfig.get_model`."
msgstr ""
"虽然你不能在定义 :class:`~django.apps.AppConfig` 类的模型层导入模型，但可以"
"在 ``ready()`` 中导入，通过 ``import`` 语句或 :meth:`~AppConfig.get_model`。"

msgid ""
"If you're registering :mod:`model signals <django.db.models.signals>`, you "
"can refer to the sender by its string label instead of using the model class "
"itself."
msgstr ""
"若你正在注册 :mod:`model signals <django.db.models.signals>`，你可以通过字符"
"串标签追踪发信者，而不是用模型类。"

msgid "Example::"
msgstr "举例："

msgid ""
"Although you can access model classes as described above, avoid interacting "
"with the database in your :meth:`ready()` implementation. This includes "
"model methods that execute queries (:meth:`~django.db.models.Model.save()`, :"
"meth:`~django.db.models.Model.delete()`, manager methods etc.), and also raw "
"SQL queries via ``django.db.connection``. Your :meth:`ready()` method will "
"run during startup of every management command. For example, even though the "
"test database configuration is separate from the production settings, "
"``manage.py test`` would still execute some queries against your "
"**production** database!"
msgstr ""
"尽管可以向上面介绍的那样访问模型类，但是要避免在 :meth:`ready()` 实现中与数据"
"库交互。这包括了那些会通过 ``django.db.connection`` 执行查询 （:meth:"
"`~django.db.models.Model.save()`， :meth:`~django.db.models.Model.delete()`，"
"管理器方法，等等）和原生查询的模型方法。你的 :meth:`ready()` 方法会在每个管理"
"命令初始化阶段被执行。例如，虽然测试数据库的配置与生成环境配置是分开的， "
"``manager.py test`` 仍会对 **生产环境** 数据库执行一些查询操作。"

msgid ""
"In the usual initialization process, the ``ready`` method is only called "
"once by Django. But in some corner cases, particularly in tests which are "
"fiddling with installed applications, ``ready`` might be called more than "
"once. In that case, either write idempotent methods, or put a flag on your "
"``AppConfig`` classes to prevent rerunning code which should be executed "
"exactly one time."
msgstr ""
"在普通的初始化进程中， ``ready`` 方法仅被 Django 调用一次。但在一些特殊情况"
"下，特别是针对已安装应用的测试中，可以会多次调用 ``ready``。这种情况下，在 "
"``AppConfig`` 类中编写幂等方法或放入一个标志，避免那些只需运行一次的代码被多"
"次执行。"

msgid "Namespace packages as apps"
msgstr "命名空间包作为应用程序"

msgid ""
"Python packages without an ``__init__.py`` file are known as \"namespace "
"packages\" and may be spread across multiple directories at different "
"locations on ``sys.path`` (see :pep:`420`)."
msgstr ""
"没有 ``__init__.py`` 文件的 Python 包被称为 “命名空间包”，可以分布在 ``sys."
"path`` 上不同位置的多个目录中（见 :pep:`420`）。"

msgid ""
"Django applications require a single base filesystem path where Django "
"(depending on configuration) will search for templates, static assets, etc. "
"Thus, namespace packages may only be Django applications if one of the "
"following is true:"
msgstr ""
"Django 应用程序需要一个单一的基础文件系统路径，Django（取决于配置）将在其中搜"
"索模板、静态资产等。因此，只有在以下情况之一为真时，命名空间包才可能是 "
"Django 应用程序："

msgid ""
"The namespace package actually has only a single location (i.e. is not "
"spread across more than one directory.)"
msgstr "名称空间包实际上只有一个位置（即不分布在多个目录中）。"

msgid ""
"The :class:`~django.apps.AppConfig` class used to configure the application "
"has a :attr:`~django.apps.AppConfig.path` class attribute, which is the "
"absolute directory path Django will use as the single base path for the "
"application."
msgstr ""
"用于配置应用的 :class:`~django.apps.AppConfig` 类有一个 :attr:`~django.apps."
"AppConfig.path` 类属性，它是 Django 将作为应用的单一基础路径的绝对目录路径。"

msgid ""
"If neither of these conditions is met, Django will raise :exc:`~django.core."
"exceptions.ImproperlyConfigured`."
msgstr ""
"如果这些条件均不满足的话，Django 将抛出 :exc:`~django.core.exceptions."
"ImproperlyConfigured` 错误。"

msgid "Application registry"
msgstr "应用程序注册表"

msgid ""
"The application registry provides the following public API. Methods that "
"aren't listed below are considered private and may change without notice."
msgstr ""
"应用程序注册表提供以下公共 API。以下未列出的方法被视为私有方法，可能会更改，"
"恕不另行通知。"

msgid ""
"Boolean attribute that is set to ``True`` after the registry is fully "
"populated and all :meth:`AppConfig.ready` methods are called."
msgstr ""
"在注册表完全填充和调用所有 :meth:`AppConfig.ready` 方法后设置为 ``True`` 的布"
"尔属性。"

msgid "Returns an iterable of :class:`~django.apps.AppConfig` instances."
msgstr "返回一个由 :class:`~django.apps.AppConfig` 实例组成的可迭代对象"

msgid ""
"Returns an :class:`~django.apps.AppConfig` for the application with the "
"given ``app_label``. Raises :exc:`LookupError` if no such application exists."
msgstr ""
"返回给定 ``app_label`` 的应用程序的 :class:`~django.apps.AppConfig`。如果不存"
"在这样的应用程序，则会引发 :exc:`LookupError`。"

msgid ""
"Checks whether an application with the given name exists in the registry. "
"``app_name`` is the full name of the app, e.g. ``'django.contrib.admin'``."
msgstr ""
"检查注册表中是否存在给定名称的应用程序。``app_name`` 是应用程序的全名，例如 "
"``'django.contrib.admin'``。"

msgid ""
"Returns the :class:`~django.db.models.Model` with the given ``app_label`` "
"and ``model_name``. As a shortcut, this method also accepts a single "
"argument in the form ``app_label.model_name``. ``model_name`` is case-"
"insensitive."
msgstr ""
"返回 :class:`~django.db.models.Model` 于给定的 ``app_label`` 和 "
"``model_name``。作为快捷方式，本方法也接受一个单一参数，形式为 ``app_label."
"model_name``. ``model_name`` 不区分大小写。"

msgid ""
"Raises :exc:`LookupError` if no such application or model exists. Raises :"
"exc:`ValueError` when called with a single argument that doesn't contain "
"exactly one dot."
msgstr ""
"如果不存在这样的应用程序或模型，则引发 :exc:`LookupError`。当调用的单个参数不"
"包含一个点时，会引发 :exc:`ValueError`。"

msgid ""
"Requires the app registry to be fully populated unless the ``require_ready`` "
"argument is set to ``False``."
msgstr ""
"除非 ``require_ready`` 参数设置为 ``False``，否则要求应用注册表被完全填充。"

msgid ""
"Setting ``require_ready`` to ``False`` allows looking up models :ref:`while "
"the app registry is being populated <app-loading-process>`, specifically "
"during the second phase where it imports models. Then ``get_model()`` has "
"the same effect as importing the model. The main use case is to configure "
"model classes with settings, such as :setting:`AUTH_USER_MODEL`."
msgstr ""
"将 ``require_ready`` 设置为 ``False`` 允许 :ref:`在应用注册表被填充 <app-"
"loading-process>` 的时候，特别是在导入模型的第二阶段，查找模型。那么 "
"``get_model()`` 就和导入模型的效果一样。主要用例是用设置配置模型类，如  :"
"setting:`AUTH_USER_MODEL`。"

msgid ""
"When ``require_ready`` is ``False``, ``get_model()`` returns a model class "
"that may not be fully functional (reverse accessors may be missing, for "
"example) until the app registry is fully populated. For this reason, it's "
"best to leave ``require_ready`` to the default value of ``True`` whenever "
"possible."
msgstr ""
"当 ``require_ready`` 为 ``False`` 时，``get_model()`` 返回的模型类可能无法完"
"全发挥作用（例如，可能缺少反向访问器），直到应用程序注册表完全填充。因此，最"
"好尽可能将 ``require_ready`` 改为默认值 ``True``。"

msgid "Initialization process"
msgstr "初始化进程"

msgid "How applications are loaded"
msgstr "应用程序是如何被加载的"

msgid ""
"When Django starts, :func:`django.setup()` is responsible for populating the "
"application registry."
msgstr "Django 启动后， :func:`django.setup()` 负责配置应用注册信息。"

msgid "Configures Django by:"
msgstr "配置 Django："

msgid "Loading the settings."
msgstr "加载配置。"

msgid "Setting up logging."
msgstr "设置日志。"

msgid ""
"If ``set_prefix`` is True, setting the URL resolver script prefix to :"
"setting:`FORCE_SCRIPT_NAME` if defined, or ``/`` otherwise."
msgstr ""
"若 ``set_prefix`` 为 True，为 URL 处理器脚本增加前缀 :setting:"
"`FORCE_SCRIPT_NAME`，若未定义此项，则使用 ``/``。"

msgid "Initializing the application registry."
msgstr "初始化应用程序注册。"

msgid "This function is called automatically:"
msgstr "这个函数会被自动调用："

msgid "When running an HTTP server via Django's ASGI or WSGI support."
msgstr "当通过Django的ASGI或WSGI运行HTTP服务时。"

msgid "When invoking a management command."
msgstr "调用一个管理命令时。"

msgid ""
"It must be called explicitly in other cases, for instance in plain Python "
"scripts."
msgstr "在其他情况下，必须显式调用它，例如在纯 Python 脚本中。"

msgid ""
"The application registry is initialized in three stages. At each stage, "
"Django processes all applications in the order of :setting:`INSTALLED_APPS`."
msgstr ""
"应用注册的初始化过程分三个阶段完成。在每个阶段，Django 根据应用在 :setting:"
"`INSTALLED_APPS` 中的顺序依次处理。"

msgid "First Django imports each item in :setting:`INSTALLED_APPS`."
msgstr "首先，Django 导入 :setting:`INSTALLED_APPS` 中各项条目。"

msgid ""
"If it's an application configuration class, Django imports the root package "
"of the application, defined by its :attr:`~AppConfig.name` attribute. If "
"it's a Python package, Django looks for an application configuration in an "
"``apps.py`` submodule, or else creates a default application configuration."
msgstr ""
"如果是应用配置类，Django 导入应用的根包，由其 :attr:`~AppConfig.name` 属性定"
"义。如果是 Python 包，Django 会在 ``apps.py`` 子模块中寻找应用配置，否则会创"
"建一个默认的应用配置。"

msgid "*At this stage, your code shouldn't import any models!*"
msgstr "*在这情况下，你的代码不应该导入任何模型！*"

msgid ""
"In other words, your applications' root packages and the modules that define "
"your application configuration classes shouldn't import any models, even "
"indirectly."
msgstr ""
"换句话说，应用程序的根包和定义应用程序配置类的模块不能导入任何模型，即使是间"
"接导入。"

msgid ""
"Strictly speaking, Django allows importing models once their application "
"configuration is loaded. However, in order to avoid needless constraints on "
"the order of :setting:`INSTALLED_APPS`, it's strongly recommended not import "
"any models at this stage."
msgstr ""
"严格来说，一旦应用配置完成加载后，Django 是允许导入模型。然而为了避免不必要"
"的 :setting:`INSTALLED_APPS`, 顺序约束。强烈建议在这个阶段不要导入任何模型。"

msgid ""
"Once this stage completes, APIs that operate on application configurations "
"such as :meth:`~apps.get_app_config()` become usable."
msgstr ""
"一旦这个阶段完成，可以使用 API 对应用程序配置（如 :meth:`~apps."
"get_app_config()` ）进行操作。"

msgid ""
"Then Django attempts to import the ``models`` submodule of each application, "
"if there is one."
msgstr "然后 Django 会尝试导入每个应用程序的 ``models`` 子模块，如果有的话。"

msgid ""
"You must define or import all models in your application's ``models.py`` or "
"``models/__init__.py``. Otherwise, the application registry may not be fully "
"populated at this point, which could cause the ORM to malfunction."
msgstr ""
"你必须在你的应用程序的 ``models.py`` 或 ``models/__init__.py`` 中定义或导入所"
"有模型。否则，应用程序注册表可能在此时没有完全填充，这可能导致 ORM 失灵。"

msgid ""
"Once this stage completes, APIs that operate on models such as :meth:`~apps."
"get_model()` become usable."
msgstr ""
"此步骤完成后，操作模型的 API，例如 :meth:`~apps.get_model()`，就可以使用了。"

msgid ""
"Finally Django runs the :meth:`~AppConfig.ready()` method of each "
"application configuration."
msgstr "最后 Django 会运行每个应用配置的 :meth:`~AppConfig.ready()` 方法。"

msgid "Troubleshooting"
msgstr "错误调试"

msgid ""
"Here are some common problems that you may encounter during initialization:"
msgstr "在初始化期间，这里有一些常见的错误你可能会遇上。"

msgid ""
":class:`~django.core.exceptions.AppRegistryNotReady`: This happens when "
"importing an application configuration or a models module triggers code that "
"depends on the app registry."
msgstr ""
":class:`~django.core.exceptions.AppRegistryNotReady`。当导入应用程序配置或模"
"型模块触发依赖于应用程序注册表的代码时，会发生这种情况。"

msgid ""
"For example, :func:`~django.utils.translation.gettext()` uses the app "
"registry to look up translation catalogs in applications. To translate at "
"import time, you need :func:`~django.utils.translation.gettext_lazy()` "
"instead. (Using :func:`~django.utils.translation.gettext()` would be a bug, "
"because the translation would happen at import time, rather than at each "
"request depending on the active language.)"
msgstr ""
"例如， :func:`~django.utils.translation.gettext()` 使用应用程序注册表来查找应"
"用程序中的翻译目录。要在导入时进行翻译，你需要 :func:`~django.utils."
"translation.gettext_lazy()` 来代替。（使用 :func:`~django.utils.translation."
"gettext()` 会是一个 bug，因为翻译会在导入时进行，而不是在每次请求时根据活动语"
"言进行。）"

msgid ""
"Executing database queries with the ORM at import time in models modules "
"will also trigger this exception. The ORM cannot function properly until all "
"models are available."
msgstr ""
"在模型模块中导入时用 ORM 执行数据库查询也会触发此异常。在所有模型都可用之前，"
"ORM 无法正常工作。"

msgid ""
"This exception also happens if you forget to call :func:`django.setup()` in "
"a standalone Python script."
msgstr ""
"如果你忘记在一个单独的 Python 脚本中调用函数 `django.setup()`，也会发生异常。"

msgid ""
"``ImportError: cannot import name ...`` This happens if the import sequence "
"ends up in a loop."
msgstr ""
"``ImportError: cannot import name ...`` 如果导入序列陷入循环，就会发生这种情"
"况。"

msgid ""
"To eliminate such problems, you should minimize dependencies between your "
"models modules and do as little work as possible at import time. To avoid "
"executing code at import time, you can move it into a function and cache its "
"results. The code will be executed when you first need its results. This "
"concept is known as \"lazy evaluation\"."
msgstr ""
"为了消除这些问题，你应该最大限度地减少模型模块之间的依赖关系，并在导入时尽可"
"能减少复杂度。 为了避免在导入时执行代码，可以将其移入函数并缓存结果。 代码将"
"在你首次需要结果时执行。 这个概念被称为“惰性求值”。"

msgid ""
"``django.contrib.admin`` automatically performs autodiscovery of ``admin`` "
"modules in installed applications. To prevent it, change your :setting:"
"`INSTALLED_APPS` to contain ``'django.contrib.admin.apps."
"SimpleAdminConfig'`` instead of ``'django.contrib.admin'``."
msgstr ""
"``django.contrib.admin`` 会自动在已安装的应用程序中执行 ``admin`` 模块的自动"
"发现。为了防止这种情况发生，请将你的 :setting:`INSTALLED_APPS` 改为包含 "
"``'django.contrib.admin.app.SimpleAdminConfig'`` 而不是 ``'django.contrib."
"admin'``。"

msgid "System check framework"
msgstr "系统检查框架"

msgid ""
"The system check framework is a set of static checks for validating Django "
"projects. It detects common problems and provides hints for how to fix them. "
"The framework is extensible so you can easily add your own checks."
msgstr ""
"系统检查框架是一套用于验证 Django 项目的静态检查。它检测常见的问题，并提供如"
"何修复这些问题的提示。该框架是可扩展的，所以你可以很容易地添加自己的检查。"

msgid ""
"For details on how to add your own checks and integrate them with Django's "
"system checks, see the :doc:`System check topic guide </topics/checks>`."
msgstr ""
"关于如何添加自己的检查并与 Django 的系统检查集成的细节，请看 :doc:`系统检查主"
"题指南 </topics/checks>`。"

msgid "API reference"
msgstr "API 参考"

msgid "``CheckMessage``"
msgstr "``CheckMessage``"

msgid ""
"The warnings and errors raised by system checks must be instances of "
"``CheckMessage``. An instance encapsulates a single reportable error or "
"warning. It also provides context and hints applicable to the message, and a "
"unique identifier that is used for filtering purposes."
msgstr ""
"系统检查提出的警告和错误必须是 ``CheckMessage`` 的实例。一个实例封装了一个单"
"一的可报告的错误或警告。它还提供适用于该信息的上下文和提示，以及用于过滤目的"
"的唯一标识符。"

msgid "Constructor arguments are:"
msgstr "构造方法的参数："

msgid "``level``"
msgstr "``level``"

msgid ""
"The severity of the message. Use one of the predefined values: ``DEBUG``, "
"``INFO``, ``WARNING``, ``ERROR``, ``CRITICAL``. If the level is greater or "
"equal to ``ERROR``, then Django will prevent management commands from "
"executing. Messages with level lower than ``ERROR`` (i.e. warnings) are "
"reported to the console, but can be silenced."
msgstr ""
"消息的严重性。使用预定义的数值之一。``DEBUG``、``INFO``、``WARNING``、"
"``ERROR``、``CRITICAL``。如果级别大于或等于 ``ERROR``，那么 Django 将阻止管理"
"命令的执行。等级小于 ``ERROR```的消息（即警告）会被报告到控制台，但可以被静"
"默。"

msgid "``msg``"
msgstr "``msg``"

msgid ""
"A short (less than 80 characters) string describing the problem. The string "
"should *not* contain newlines."
msgstr "描述问题的简短（少于 80 个字符）字符串。该字符串 *不应* 包含换行符。"

msgid "``hint``"
msgstr "``hint``"

msgid ""
"A single-line string providing a hint for fixing the problem. If no hint can "
"be provided, or the hint is self-evident from the error message, the hint "
"can be omitted, or a value of ``None`` can be used."
msgstr ""
"一个单行字符串，提供解决问题的提示。如果不能提供任何提示，或者提示是错误信息"
"中不言自明的，可以省略提示，或者使用 ``None`` 值。"

msgid "``obj``"
msgstr "``obj``"

msgid ""
"Optional. An object providing context for the message (for example, the "
"model where the problem was discovered). The object should be a model, "
"field, or manager or any other object that defines a ``__str__()`` method. "
"The method is used while reporting all messages and its result precedes the "
"message."
msgstr ""
"可选的。为信息提供上下文的对象（例如，发现问题的模型）。该对象应该是一个模"
"型、字段、管理器或定义了 ``str__()`` 方法的任何其他对象。该方法在报告所有消息"
"时使用，其结果在消息之前。"

msgid "``id``"
msgstr "``id``"

msgid ""
"Optional string. A unique identifier for the issue. Identifiers should "
"follow the pattern ``applabel.X001``, where ``X`` is one of the letters "
"``CEWID``, indicating the message severity (``C`` for criticals, ``E`` for "
"errors and so). The number can be allocated by the application, but should "
"be unique within that application."
msgstr ""
"可选字符串。问题的唯一标识符。标识符应遵循 ``applabel.X001`` 的模式，其中 "
"``X`` 是字母 ``CEWID`` 中的一个，表示消息的严重性（``C`` 表示严重，``E`` 表示"
"错误等）。这个数字可由应用程序分配，但在该应用程序内应是唯一的。"

msgid ""
"There are subclasses to make creating messages with common levels easier. "
"When using them you can omit the ``level`` argument because it is implied by "
"the class name."
msgstr ""
"有一些子类可以使创建具有通用级别的消息更容易。当使用它们时，你可以省略 "
"``level`` 参数，因为它已被类名所隐含。"

msgid "Builtin tags"
msgstr "内置标签"

msgid "Django's system checks are organized using the following tags:"
msgstr "Django 的系统检查按以下标签组织："

msgid "``admin``: Checks of any admin site declarations."
msgstr "``admin``：检查所有管理站点的声明。"

msgid "``async_support``: Checks asynchronous-related configuration."
msgstr "``async_support``： 检查异步相关配置。"

msgid "``caches``: Checks cache related configuration."
msgstr "``caches``：检查缓存相关的配置。"

msgid "``compatibility``: Flags potential problems with version upgrades."
msgstr "``compatibility``：标记版本升级可能导致的问题。"

msgid ""
"``database``: Checks database-related configuration issues. Database checks "
"are not run by default because they do more than static code analysis as "
"regular checks do. They are only run by the :djadmin:`migrate` command or if "
"you specify configured database aliases using the ``--database`` option when "
"calling the :djadmin:`check` command."
msgstr ""
"``database``：检查与数据库有关的配置问题。默认情况下不运行数据库检查，因为数"
"据库检查的工作比普通检查的静态代码分析更多。只有通过 :djadmin:`migrate` 命令"
"或在调用 :djadmin:`check` 命令时使用 ``--database`` 选项指定配置的数据库别名"
"时，才会运行数据库检查。"

msgid "``files``: Checks files related configuration."
msgstr "``files`` ：检查文件的相关配置。"

msgid "``models``: Checks of model, field, and manager definitions."
msgstr "``models``：检查模型、字段和管理器定义。"

msgid "``security``: Checks security related configuration."
msgstr "``security``：检查安全相关配置。"

msgid "``signals``: Checks on signal declarations and handler registrations."
msgstr "``signals``：检查信号声明和处理器注册信息。"

msgid "``sites``: Checks :mod:`django.contrib.sites` configuration."
msgstr "``sites`` ： 检查 :mod:`django.contrib.sites` 配置。"

msgid ""
"``staticfiles``: Checks :mod:`django.contrib.staticfiles` configuration."
msgstr "``staticfiles``：检查 :mod:`django.contrib.staticfiles` 配置。"

msgid "``templates``: Checks template related configuration."
msgstr "``templates``：检查模板相关配置。"

msgid "``translation``: Checks translation related configuration."
msgstr "``translation``：检查翻译相关配置。"

msgid "``urls``: Checks URL configuration."
msgstr "``urls``：检查 URL 配置。"

msgid "Some checks may be registered with multiple tags."
msgstr "一些可能通过多个标签同时注册的检查项。"

msgid "Core system checks"
msgstr "核心系统检查"

msgid "Asynchronous support"
msgstr "异步支持"

msgid "The following checks verify your setup for :doc:`/topics/async`:"
msgstr "以下检查验证了你对 :doc:`/topics/async` 的配置："

msgid ""
"**async.E001**: You should not set the :envvar:`DJANGO_ALLOW_ASYNC_UNSAFE` "
"environment variable in deployment. This disables :ref:`async safety "
"protection <async-safety>`."
msgstr ""
"**async.E001**：你在部署时不应该设置 :envvar:`DJANGO_ALLOW_ASYNC_UNSAFE` 环境"
"变量。这将禁用 :ref:`异步安全保护 <async-safety>`。"

msgid "Backwards compatibility"
msgstr "向后兼容"

msgid ""
"Compatibility checks warn of potential problems that might occur after "
"upgrading Django."
msgstr "兼容性检查警告那些升级 Django 后可能出现的问题。"

msgid ""
"**2_0.W001**: Your URL pattern ``<pattern>`` has a ``route`` that contains "
"``(?P<``, begins with a ``^``, or ends with a ``$``. This was likely an "
"oversight when migrating from ``url()`` to :func:`~django.urls.path`."
msgstr ""
"**2_0.W001**：你的 URL 模式 ``<pattern>`` 有一个 ``route`` 包含 ``(?P<``、以 "
"``^`` 开始或以 ``$`` 结束。这可能是在从 ``url()`` 迁移到 :func:`~django.urls."
"path` 时的一个疏忽。"

msgid ""
"**4_0.E001**: As of Django 4.0, the values in the :setting:"
"`CSRF_TRUSTED_ORIGINS` setting must start with a scheme (usually ``http://`` "
"or ``https://``) but found ``<hostname>``."
msgstr ""
"**4_0.E001**:从Django 4.0开始， :setting:`CSRF_TRUSTED_ORIGINS`设置中的值必须"
"以一个形式开始（通常是``http://`或``https://`），但发现了``<hostname>``。"

msgid "Caches"
msgstr "缓存"

msgid ""
"The following checks verify that your :setting:`CACHES` setting is correctly "
"configured:"
msgstr "以下检查验证你的 :setting:`CACHES` 配置是否正确设置："

msgid ""
"**caches.E001**: You must define a ``'default'`` cache in your :setting:"
"`CACHES` setting."
msgstr ""
"**caches.E001**：你必须在你的 :setting:`CACHES` 配置中定义一个 ``'default'`` "
"缓存。"

msgid ""
"**caches.W002**: Your ``<cache>`` configuration might expose your cache or "
"lead to corruption of your data because its :setting:`LOCATION <CACHES-"
"LOCATION>` matches/is inside/contains :setting:`MEDIA_ROOT`/:setting:"
"`STATIC_ROOT`/:setting:`STATICFILES_DIRS`."
msgstr ""
"**caches.W002** ：你的 ``<cache>`` 配置可能会暴露你的缓存或导致你的数据损坏，"
"因为它的 :setting:`LOCATION <CACHES-LOCATION>` 匹配／是在／包含 :setting:"
"`MEDIA_ROOT` ／ :setting:`STATIC_ROOT` ／ :setting:`STATICFILES_DIRS`。"

msgid ""
"**caches.W003**: Your ``<cache>`` cache :setting:`LOCATION <CACHES-"
"LOCATION>` is relative. Use an absolute path instead."
msgstr ""
"**caches.W003** ： 你的 ``<cache>`` 缓存 :setting:`LOCATION <CACHES-"
"LOCATION>` 是相对路径。请使用绝对路径。"

msgid "Database"
msgstr "数据库"

msgid "MySQL and MariaDB"
msgstr "MySQL 和 MariaDB"

msgid ""
"If you're using MySQL or MariaDB, the following checks will be performed:"
msgstr "如果你使用的是 MySQL 或 MariaDB，将执行以下检查："

msgid ""
"**mysql.E001**: MySQL/MariaDB does not allow unique ``CharField``\\s to have "
"a ``max_length`` > 255. *This check was changed to* ``mysql.W003`` *in "
"Django 3.1 as the real maximum size depends on many factors.*"
msgstr ""
"**mysql.E001**：MySQL／MariaDB 不允许有唯一约束的 ``CharField`` 有一个 "
"``max_length`` > 255。这项检查在 Django 3.1 中 *被改为* ``mysql.W003``，因为"
"真正的最大尺寸取决于许多因素。"

msgid ""
"**mysql.W002**: MySQL/MariaDB Strict Mode is not set for database connection "
"``<alias>``. See also :ref:`mysql-sql-mode`."
msgstr ""
"**mysql.W002**：MySQL／MariaDB 数据库连接 ``<alias>`` 未设置为严格模式。另"
"见 :ref:`mysql-sql-mode`。"

msgid ""
"**mysql.W003**: MySQL/MariaDB may not allow unique ``CharField``\\s to have "
"a ``max_length`` > 255."
msgstr ""
"**mysql.W003**：MySQL／MariaDB 不允许有唯一约束的 ``CharField`` 有 "
"``max_length`` > 255。"

msgid "Managing files"
msgstr "管理文件"

msgid "The following checks verify your setup for :doc:`/topics/files`:"
msgstr "以下检查验证了你对 :doc:`/topics/files` 的配置："

msgid ""
"**files.E001**: The :setting:`FILE_UPLOAD_TEMP_DIR` setting refers to the "
"nonexistent directory ``<path>``."
msgstr ""

msgid "Model fields"
msgstr "模型字段"

msgid "**fields.E001**: Field names must not end with an underscore."
msgstr "**fields.E001**：字段名不能以下划线结尾。"

msgid "**fields.E002**: Field names must not contain ``\"__\"``."
msgstr "**fields.E002**：字段名不能有 ``\"__\"``。"

msgid ""
"**fields.E003**: ``pk`` is a reserved word that cannot be used as a field "
"name."
msgstr "**fields.E003**：``pk`` 是保留关键字，不能作为字段名使用。"

msgid ""
"**fields.E004**: ``choices`` must be an iterable (e.g., a list or tuple)."
msgstr "**fields.E004**：``choices`` 必须是可迭代对象（例如，列表或元组）。"

msgid ""
"**fields.E005**: ``choices`` must be an iterable containing ``(actual value, "
"human readable name)`` tuples."
msgstr ""

msgid "**fields.E006**: ``db_index`` must be ``None``, ``True`` or ``False``."
msgstr "**fields.E006**：``db_index`` 必须是 ``None``，``True`` 或 ``False``。"

msgid "**fields.E007**: Primary keys must not have ``null=True``."
msgstr "**fields.E007**：主键不能有 ``null = True``。"

msgid "**fields.E008**: All ``validators`` must be callable."
msgstr "**fields.E008**：所有 ``validators`` 必须都是可调用的。"

msgid ""
"**fields.E009**: ``max_length`` is too small to fit the longest value in "
"``choices`` (``<count>`` characters)."
msgstr ""
"**fields.E009**：``max_length`` 太小，无法容纳 ``choices`` 中的最长值"
"（``<count>`` 字符）。"

msgid ""
"**fields.E010**: ``<field>`` default should be a callable instead of an "
"instance so that it's not shared between all field instances."
msgstr ""
"**fields.E010**：``<field>`` 默认值应该是一个可调用对象，而不是一个实例，这样"
"就不会在所有字段实例之间共享。"

msgid "**fields.E100**: ``AutoField``\\s must set primary_key=True."
msgstr "**fields.E100**： ``AutoField`` 必须设置 primary_key=True。"

msgid ""
"**fields.E110**: ``BooleanField``\\s do not accept null values. *This check "
"appeared before support for null values was added in Django 2.1.*"
msgstr ""
"**fields.E110**：``BooleanField`` 不接受空值。*这项检查出现在 Django 2.1 中增"
"加对空值的支持之前*。"

msgid ""
"**fields.E120**: ``CharField``\\s must define a ``max_length`` attribute."
msgstr "**fields.E120**： ``CharField`` 必须定义一个 ``max_length`` 属性。"

msgid "**fields.E121**: ``max_length`` must be a positive integer."
msgstr "**fields.E121**： ``max_length`` 必须是个正整数。"

msgid ""
"**fields.W122**: ``max_length`` is ignored when used with ``<integer field "
"type>``."
msgstr ""
"**fields.W122**： ``max_length`` 在使用 ``<integer field type>`` 时会被忽略。"

msgid ""
"**fields.E130**: ``DecimalField``\\s must define a ``decimal_places`` "
"attribute."
msgstr ""
"**fields.E130**： ``DecimalField`` 必须定义一个 ``decimal_places`` 属性。"

msgid "**fields.E131**: ``decimal_places`` must be a non-negative integer."
msgstr "**fields.E131**： ``decimal_places`` 必须是个非负整数。"

msgid ""
"**fields.E132**: ``DecimalField``\\s must define a ``max_digits`` attribute."
msgstr "**fields.E132**： ``DecimalField`` 必须定义一个 ``max_digits`` 属性。"

msgid "**fields.E133**: ``max_digits`` must be a positive integer."
msgstr "**fields.E133**：``max_digits`` 必须是一个正整数。"

msgid ""
"**fields.E134**: ``max_digits`` must be greater or equal to "
"``decimal_places``."
msgstr "**fields.E134**： ``max_digits`` 必须大于或等于 ``decimal_places``。"

msgid ""
"**fields.E140**: ``FilePathField``\\s must have either ``allow_files`` or "
"``allow_folders`` set to True."
msgstr ""
"**fields.E140**： ``FilePathField`` 的 ``allow_files`` 或 ``allow_folders`` "
"必须有一个被设为 True。"

msgid ""
"**fields.E150**: ``GenericIPAddressField``\\s cannot have ``blank=True`` if "
"``null=False``, as blank values are stored as nulls."
msgstr ""

msgid ""
"**fields.E160**: The options ``auto_now``, ``auto_now_add``, and ``default`` "
"are mutually exclusive. Only one of these options may be present."
msgstr ""
"**fields.E160**：``auto_now``、``auto_now_add`` 和 ``default`` 等选项是相互排"
"斥的。这些选项只能有一个。"

msgid "**fields.W161**: Fixed default value provided."
msgstr "**fields.W161**：提供了固定的默认值。"

msgid ""
"**fields.W162**: ``<database>`` does not support a database index on "
"``<field data type>`` columns."
msgstr ""
"**fields.W162**： ``<database>`` 并不支持在 ``<field data type>`` 列上创建数"
"据库索引。"

msgid ""
"**fields.W163**: ``<database>`` does not support comments on columns "
"(``db_comment``)."
msgstr ""

msgid ""
"**fields.E170**: ``BinaryField``’s ``default`` cannot be a string. Use bytes "
"content instead."
msgstr ""
"**fields.E170**：``BinaryField`` 的 ``default`` 不能是字符串。使用字节内容代"
"替。"

msgid "**fields.E180**: ``<database>`` does not support ``JSONField``\\s."
msgstr "**fields.E180**：``<database>`` 不支持 ``JSONField``。"

msgid ""
"**fields.E190**: ``<database>`` does not support a database collation on "
"``<field_type>``\\s."
msgstr ""
"**fields.E190** ： ``<database>`` 不支持对 ``<field_type>`` 进行字符序设置。"

msgid ""
"**fields.E900**: ``IPAddressField`` has been removed except for support in "
"historical migrations."
msgstr "**fields.E900**：``IPAddressField`` 已被删除，但历史迁移中的支持除外。"

msgid ""
"**fields.W900**: ``IPAddressField`` has been deprecated. Support for it "
"(except in historical migrations) will be removed in Django 1.9. *This check "
"appeared in Django 1.7 and 1.8*."
msgstr ""
"**fields.W900**：``IPAddressField`` 已被废弃。在 Django 1.9 中，将取消对它的"
"支持（除了历史迁移）。*这个检查出现在 Django 1.7 和 1.8 中*。"

msgid ""
"**fields.W901**: ``CommaSeparatedIntegerField`` has been deprecated. Support "
"for it (except in historical migrations) will be removed in Django 2.0. "
"*This check appeared in Django 1.10 and 1.11*."
msgstr ""
"**fields.W901**：``CommaSeparatedIntegerField`` 已被废弃。在 Django 2.0 中，"
"对它的支持将被删除（除了在历史迁移中）。*这个检查出现在 Django 1.10 和 1.11 "
"中*。"

msgid ""
"**fields.E901**: ``CommaSeparatedIntegerField`` is removed except for "
"support in historical migrations."
msgstr ""
"**fields.E901**：``CommaSeparatedIntegerField`` 已被删除，但历史迁移中的支持"
"除外。"

msgid ""
"**fields.W902**: ``FloatRangeField`` is deprecated and will be removed in "
"Django 3.1. *This check appeared in Django 2.2 and 3.0*."
msgstr ""
"**fields.W902**：``FloatRangeField`` 已被废弃，将在 Django 3.1 中删除。*这项"
"检查出现在 Django 2.2 和 3.0 中*。"

msgid ""
"**fields.W903**: ``NullBooleanField`` is deprecated. Support for it (except "
"in historical migrations) will be removed in Django 4.0. *This check "
"appeared in Django 3.1 and 3.2*."
msgstr ""

msgid ""
"**fields.E903**: ``NullBooleanField`` is removed except for support in "
"historical migrations."
msgstr "**fields.E903**：“NullBooleanField” 已被删除，但历史迁移中的支持除外。"

msgid ""
"**fields.W904**: ``django.contrib.postgres.fields.JSONField`` is deprecated. "
"Support for it (except in historical migrations) will be removed in Django "
"4.0. *This check appeared in Django 3.1 and 3.2*."
msgstr ""

msgid ""
"**fields.E904**: ``django.contrib.postgres.fields.JSONField`` is removed "
"except for support in historical migrations."
msgstr ""

msgid ""
"**fields.W905**: ``django.contrib.postgres.fields.CICharField`` is "
"deprecated. Support for it (except in historical migrations) will be removed "
"in Django 5.1."
msgstr ""

msgid ""
"**fields.W906**: ``django.contrib.postgres.fields.CIEmailField`` is "
"deprecated. Support for it (except in historical migrations) will be removed "
"in Django 5.1."
msgstr ""

msgid ""
"**fields.W907**: ``django.contrib.postgres.fields.CITextField`` is "
"deprecated. Support for it (except in historical migrations) will be removed "
"in Django 5.1."
msgstr ""

msgid "File fields"
msgstr "文件字段"

msgid ""
"**fields.E200**: ``unique`` is not a valid argument for a ``FileField``. "
"*This check is removed in Django 1.11*."
msgstr ""
"**fields.E200**：``unique`` 不是 ``FileField`` 的有效参数。*这项检查在 "
"Django 1.11 中已被删除*。"

msgid ""
"**fields.E201**: ``primary_key`` is not a valid argument for a ``FileField``."
msgstr ""
"**fields.E201**： ``primary_key`` 对于 ``FileField`` 来说不是个有效的参数。"

msgid ""
"**fields.E202**: ``FileField``’s ``upload_to`` argument must be a relative "
"path, not an absolute path."
msgstr ""
"**fields.E202**： ``FileField`` 的 ``upload_to`` 参数必须是个相对路径，而不是"
"一个相对路径。"

msgid ""
"**fields.E210**: Cannot use ``ImageField`` because Pillow is not installed."
msgstr "**fields.E210**： 不能使用 ``ImageField``，因为未安装 Pillow。"

msgid "Related fields"
msgstr "关联字段"

msgid ""
"**fields.E300**: Field defines a relation with model ``<model>``, which is "
"either not installed, or is abstract."
msgstr ""
"**fields.E300**：字段定义了与模型 ``<model>``的关系，该模型要么没有安装，要么"
"是抽象的。"

msgid ""
"**fields.E301**: Field defines a relation with the model ``<app_label>."
"<model>`` which has been swapped out."
msgstr ""
"**fields.E301** ： 字段定义了一个与 ``<app_label>.<model>`` 模型的关系，该模"
"型已被替换。"

msgid ""
"**fields.E302**: Reverse accessor ``<related model>.<accessor name>`` for "
"``<app_label>.<model>.<field name>`` clashes with field name ``<app_label>."
"<model>.<field name>``."
msgstr ""

msgid ""
"**fields.E303**: Reverse query name for ``<app_label>.<model>.<field name>`` "
"clashes with field name ``<app_label>.<model>.<field name>``."
msgstr ""

msgid ""
"**fields.E304**: Reverse accessor ``<related model>.<accessor name>`` for "
"``<app_label>.<model>.<field name>`` clashes with reverse accessor for "
"``<app_label>.<model>.<field name>``."
msgstr ""

msgid ""
"**fields.E305**: Reverse query name for ``<app_label>.<model>.<field name>`` "
"clashes with reverse query name for ``<app_label>.<model>.<field name>``."
msgstr ""

msgid ""
"**fields.E306**: The name ``<name>`` is invalid ``related_name`` for field "
"``<model>.<field name>``."
msgstr ""

msgid ""
"**fields.E307**: The field ``<app label>.<model>.<field name>`` was declared "
"with a lazy reference to ``<app label>.<model>``, but app ``<app label>`` "
"isn't installed or doesn't provide model ``<model>``."
msgstr ""
"**fields.E307**：字段 ``<app label>.<model>.<field name>`` 被声明为对 ``<app "
"label>.<model>`` 的惰性引用，但应用程序 ``<app label>`` 没有安装或没有提供模"
"型 ``<model>``。"

msgid ""
"**fields.E308**: Reverse query name ``<related query name>`` must not end "
"with an underscore."
msgstr ""
"**fields.E308**：反向查询名称 ``<related query name>``，不得以下划线结束。"

msgid ""
"**fields.E309**: Reverse query name ``<related query name>`` must not "
"contain ``'__'``."
msgstr ""
"**fields.E309**：逆向查询名称 ``<related query name>``，不得包含 ``'__'``。"

msgid ""
"**fields.E310**: No subset of the fields ``<field1>``, ``<field2>``, ... on "
"model ``<model>`` is unique."
msgstr ""
"**fields.E310**：模型 ``<model>`` 上的 ``<field1>``、``<field2>`` 等字段的子"
"集没有唯一性。"

msgid ""
"**fields.E311**: ``<model>.<field name>`` must be unique because it is "
"referenced by a ``ForeignKey``."
msgstr ""
"**fields.E311**：``<model>.<field name>`` 必须是唯一的，因为它是由 "
"``ForeignKey`` 引用的。"

msgid ""
"**fields.E312**: The ``to_field`` ``<field name>`` doesn't exist on the "
"related model ``<app label>.<model>``."
msgstr ""
"**fields.E312**：``to_field`` ``<field name>`` 在相关模型 ``<app label>."
"<model>`` 上不存在。"

msgid ""
"**fields.E320**: Field specifies ``on_delete=SET_NULL``, but cannot be null."
msgstr "**fields.E320**：字段规定 ``on_delete=SET_NULL`，但不能为空。"

msgid ""
"**fields.E321**: The field specifies ``on_delete=SET_DEFAULT``, but has no "
"default value."
msgstr "**fields.E321**：该字段规定 ``on_delete=SET_DEFAULT``，但没有默认值。"

msgid "**fields.E330**: ``ManyToManyField``\\s cannot be unique."
msgstr "**fields.E330**：``ManyToManyField`` 不能是唯一的。"

msgid ""
"**fields.E331**: Field specifies a many-to-many relation through model "
"``<model>``, which has not been installed."
msgstr ""
"**fields.E331**：字段通过模型 ``<model>`` 具体说明多对多关系，该模型尚未安"
"装。"

msgid ""
"**fields.E332**: Many-to-many fields with intermediate tables must not be "
"symmetrical. *This check appeared before Django 3.0.*"
msgstr ""
"**fields.E332**：有中间表的多对多字段不得对称。*这项检查是在 Django 3.0 之前"
"出现的*。"

msgid ""
"**fields.E333**: The model is used as an intermediate model by ``<model>``, "
"but it has more than two foreign keys to ``<model>``, which is ambiguous. "
"You must specify which two foreign keys Django should use via the "
"``through_fields`` keyword argument."
msgstr ""
"**fields.E333**：该模型被 ``<model>`` 用作中间模型，但它有两个以上的外键到 "
"``<model>``，这是不明确的。你必须通过 ``through_fields`` 关键字参数指定 "
"Django 应该使用哪两个外键。"

msgid ""
"**fields.E334**: The model is used as an intermediate model by ``<model>``, "
"but it has more than one foreign key from ``<model>``, which is ambiguous. "
"You must specify which foreign key Django should use via the "
"``through_fields`` keyword argument."
msgstr ""
"**fields.E334**：该模型被 ``<model>`` 用作中间模型，但它有一个以上来自 "
"``<model>`` 的外键，这是不明确的。你必须通过 ``through_fields`` 关键字参数指"
"定 Django 应该使用哪个外键。"

msgid ""
"**fields.E335**: The model is used as an intermediate model by ``<model>``, "
"but it has more than one foreign key to ``<model>``, which is ambiguous. You "
"must specify which foreign key Django should use via the ``through_fields`` "
"keyword argument."
msgstr ""
"**fields.E335**：该模型被 ``<model>`` 用作中间模型，但它有一个以上的 "
"``<model>`` 外键，这是不明确的。你必须通过 ``through_fields`` 关键字参数指定 "
"Django 应该使用哪个外键。"

msgid ""
"**fields.E336**: The model is used as an intermediary model by ``<model>``, "
"but it does not have foreign key to ``<model>`` or ``<model>``."
msgstr ""
"**fields.E336**：该模型被 ``<model>`` 用作中介模型，但它没有 ``<model>`` 或 "
"``<model>`` 的外键。"

msgid ""
"**fields.E337**: Field specifies ``through_fields`` but does not provide the "
"names of the two link fields that should be used for the relation through "
"``<model>``."
msgstr ""
"**fields.E337**：字段规定了 ``through_fields``，但没有提供应通过 ``<model>`` "
"用于关系的两个链接字段的名称。"

msgid ""
"**fields.E338**: The intermediary model ``<through model>`` has no field "
"``<field name>``."
msgstr ""
"**fields.E338**：中间模型 ``<through model>``，没有字段 ``<field name>``。"

msgid ""
"**fields.E339**: ``<model>.<field name>`` is not a foreign key to "
"``<model>``."
msgstr "**fields.E339**：``<model>.<field name>`` 不是 ``<model>`` 的外键。"

msgid ""
"**fields.E340**: The field's intermediary table ``<table name>`` clashes "
"with the table name of ``<model>``/``<model>.<field name>``."
msgstr ""
"**fields.E340**：该字段的中间表 ``<table name>`` 与表名 ``<model>``/"
"``<model>.<field name>`` 相冲突。"

msgid "**fields.W340**: ``null`` has no effect on ``ManyToManyField``."
msgstr "**fields.W340**：``null`` 对 ``ManyToManyField`` 没有影响。"

msgid "**fields.W341**: ``ManyToManyField`` does not support ``validators``."
msgstr "**fields.W341**：``ManyToManyField`` 不支持 ``validators``。"

msgid ""
"**fields.W342**: Setting ``unique=True`` on a ``ForeignKey`` has the same "
"effect as using a ``OneToOneField``."
msgstr ""
"**fields.W342**：对 ``ForeignKey`` 设置 ``unique=True`` 与使用 "
"``OneToOneField`` 效果相同。"

msgid ""
"**fields.W343**: ``limit_choices_to`` has no effect on ``ManyToManyField`` "
"with a ``through`` model. *This check appeared before Django 4.0.*"
msgstr ""

msgid ""
"**fields.W344**: The field's intermediary table ``<table name>`` clashes "
"with the table name of ``<model>``/``<model>.<field name>``."
msgstr ""
"**fields.W344*：该字段的中间表 ``<table name>`` 与表名 ``<model>``/``<model>."
"<field name>``相冲突。"

msgid ""
"**fields.W345**: ``related_name`` has no effect on ``ManyToManyField`` with "
"a symmetrical relationship, e.g. to \"self\"."
msgstr ""

msgid "**fields.W346**: ``db_comment`` has no effect on ``ManyToManyField``."
msgstr ""

msgid "Models"
msgstr "模型"

msgid ""
"**models.E001**: ``<swappable>`` is not of the form ``app_label.app_name``."
msgstr "**models.E001**： ``<swappable>`` 不是表单 ``app_label.app_name``。"

msgid ""
"**models.E002**: ``<SETTING>`` references ``<model>``, which has not been "
"installed, or is abstract."
msgstr ""
"**models.E002**：``<SETTING>`` 引用了 ``<model>``，但该网站尚未安装，或者是抽"
"象的。"

msgid ""
"**models.E003**: The model has two identical many-to-many relations through "
"the intermediate model ``<app_label>.<model>``."
msgstr ""
"**models.E003**：该模型通过中间模型 ``<app_label>.<model>`` 有两个相同的多对"
"多关系。"

msgid ""
"**models.E004**: ``id`` can only be used as a field name if the field also "
"sets ``primary_key=True``."
msgstr ""
"**models.E004**：``id`` 只有在字段也设置了 ``primary_key=True`` 的情况下才能"
"用作字段名。"

msgid ""
"**models.E005**: The field ``<field name>`` from parent model ``<model>`` "
"clashes with the field ``<field name>`` from parent model ``<model>``."
msgstr ""
"**models.E005**：父模型 ``<model>`` 中的字段 ``<field name>`` 与父模型 "
"``<model>`` 中的字段 ``<field name>`` 发生冲突。"

msgid ""
"**models.E006**: The field ``<field name>`` clashes with the field ``<field "
"name>`` from model ``<model>``."
msgstr ""

msgid ""
"**models.E007**: Field ``<field name>`` has column name ``<column name>`` "
"that is used by another field."
msgstr ""
"**models.E007**： 列名 ``<column name>`` 被其它字段使用的字段 ``<field "
"name>`` 。"

msgid "**models.E008**: ``index_together`` must be a list or tuple."
msgstr "**models.E008**： ``index_together`` 必须是个列表或元组。"

msgid ""
"**models.E009**: All ``index_together`` elements must be lists or tuples."
msgstr "**models.E009**： 所有 ``index_together`` 元素都必须是列表或元组。"

msgid "**models.E010**: ``unique_together`` must be a list or tuple."
msgstr "**models.E010**： ``unique_together`` 必须是个列表或元组。"

msgid ""
"**models.E011**: All ``unique_together`` elements must be lists or tuples."
msgstr "**models.E011**： 所有 ``unique_together`` 元素都必须是列表或元组。"

msgid ""
"**models.E012**: ``constraints/indexes/index_together/unique_together`` "
"refers to the nonexistent field ``<field name>``."
msgstr ""
"**models.E012** ： ``constraints/indexes/index_together/unique_together`` 引"
"用了不存在的字段 ``<field name>``。"

msgid ""
"**models.E013**: ``constraints/indexes/index_together/unique_together`` "
"refers to a ``ManyToManyField`` ``<field name>``, but ``ManyToManyField``\\s "
"are not supported for that option."
msgstr ""
"**models.E013** ： ``constraints/indexes/index_together/unique_together`` 指"
"向一个 ``ManyToManyField`` ``<field name>``，但 ``ManyToManyField`` 不支持该"
"选项。"

msgid ""
"**models.E014**: ``ordering`` must be a tuple or list (even if you want to "
"order by only one field)."
msgstr ""
"**models.E014**： ``ordering`` 必须是个元组或列表（即便你只想按照一个字段进行"
"排序）。"

msgid ""
"**models.E015**: ``ordering`` refers to the nonexistent field, related "
"field, or lookup ``<field name>``."
msgstr ""
"**models.E015**：``ordering`` 指向是不存在的字段、相关字段或查找 ``<field "
"name>``。"

msgid ""
"**models.E016**: ``constraints/indexes/index_together/unique_together`` "
"refers to field ``<field_name>`` which is not local to model ``<model>``."
msgstr ""
"**models.E016** ： ``constraints/indexes/index_together/unique_together`` 指"
"的是字段 ``<field_name>``，该字段不在模型 ``<model>`` 的本地。"

msgid "**models.E017**: Proxy model ``<model>`` contains model fields."
msgstr "**models.E017**：代理模型 ``<model>``，包含模型字段。"

msgid ""
"**models.E018**: Autogenerated column name too long for field ``<field>``. "
"Maximum length is ``<maximum length>`` for database ``<alias>``."
msgstr ""
"**models.E018**：自动生成的列名对字段 ``<field>`` 来说太长。数据库 "
"``<alias>`` 的最大长度为 ``<maximum length>``。"

msgid ""
"**models.E019**: Autogenerated column name too long for M2M field ``<M2M "
"field>``. Maximum length is ``<maximum length>`` for database ``<alias>``."
msgstr ""
"**models.E019**：自动生成的列名对 M2M 字段 ``<M2M field>`` 来说太长。数据库 "
"``<alias>`` 的最大长度为 ``<maximum length>``。"

msgid ""
"**models.E020**: The ``<model>.check()`` class method is currently "
"overridden."
msgstr "**models.E020**：``<model>.check()`` 类方法目前被覆盖。"

msgid ""
"**models.E021**: ``ordering`` and ``order_with_respect_to`` cannot be used "
"together."
msgstr ""
"**models.E021**：``ordering`` 和 ``order_with_respect_to`` 不能一起使用。"

msgid ""
"**models.E022**: ``<function>`` contains a lazy reference to ``<app label>."
"<model>``, but app ``<app label>`` isn't installed or doesn't provide model "
"``<model>``."
msgstr ""
"**models.E022**：``<function>`` 包含对 ``<app label>.<model>`` 的惰性引用，但"
"应用 ``<app label>`` 没有安装或没有提供模型 ``<model>``。"

msgid ""
"**models.E023**: The model name ``<model>`` cannot start or end with an "
"underscore as it collides with the query lookup syntax."
msgstr ""
"**models.E023**：模型名称 ``<model>`` 不能以下划线开头或结尾，因为它与查找语"
"法相冲突。"

msgid ""
"**models.E024**: The model name ``<model>`` cannot contain double "
"underscores as it collides with the query lookup syntax."
msgstr ""
"**models.E024**：模型名称 ``<model>`` 不能包含双下划线，因为它与查找语法相冲"
"突。"

msgid ""
"**models.E025**: The property ``<property name>`` clashes with a related "
"field accessor."
msgstr "**models.E025**：``<property name>`` 属性与相关字段存取器发生冲突。"

msgid ""
"**models.E026**: The model cannot have more than one field with "
"``primary_key=True``."
msgstr "**models.E026**：该模型不能有一个以上的 ``primary_key=True`` 字段。"

msgid "**models.W027**: ``<database>`` does not support check constraints."
msgstr "**models.W027**：``<database>`` 不支持检查约束。"

msgid ""
"**models.E028**: ``db_table`` ``<db_table>`` is used by multiple models: "
"``<model list>``."
msgstr ""
"**models.E028**：``db_table`` ``<db_table>`` 被多个模型使用：``<model "
"list>``。"

msgid ""
"**models.E029**: index name ``<index>`` is not unique for model ``<model>``."
msgstr "**models.E029**：索引名 ``<index>`` 对模型 ``<model>`` 不是唯一的。"

msgid ""
"**models.E030**: index name ``<index>`` is not unique among models: ``<model "
"list>``."
msgstr ""
"**models.E030** ：索引名 ``<index>`` 在模型 ``<model list>`` 中不是唯一的。"

msgid ""
"**models.E031**: constraint name ``<constraint>`` is not unique for model "
"``<model>``."
msgstr ""
"**models.E031**：约束名称 ``<constraint>`` 对模型 ``<model>`` 不是唯一的。"

msgid ""
"**models.E032**: constraint name ``<constraint>`` is not unique among "
"models: ``<model list>``."
msgstr ""
"**models.E032** ： 约束名称 ``<constraint>`` 在模型 ``<model list>`` 中不是唯"
"一的。"

msgid ""
"**models.E033**: The index name ``<index>`` cannot start with an underscore "
"or a number."
msgstr "**models.E033**：索引名称 ``<index>`` 不能以下划线或数字开头。"

msgid ""
"**models.E034**: The index name ``<index>`` cannot be longer than "
"``<max_length>`` characters."
msgstr "**models.E034**：索引名称 ``<index>`` 不能长于 ``<max_length>`` 字符。"

msgid ""
"**models.W035**: ``db_table`` ``<db_table>`` is used by multiple models: "
"``<model list>``."
msgstr ""
"**models.W035**：``db_table`` ``<db_table>`` 被多个模型使用：``<model "
"list>``。"

msgid ""
"**models.W036**: ``<database>`` does not support unique constraints with "
"conditions."
msgstr "**models.W036**：``<database>`` 不支持带有条件的唯一约束。"

msgid ""
"**models.W037**: ``<database>`` does not support indexes with conditions."
msgstr "**models.W037**：``<database>`` 不支持有条件的索引。"

msgid ""
"**models.W038**: ``<database>`` does not support deferrable unique "
"constraints."
msgstr "**models.W038**：``<database>`` 不支持可推迟的唯一约束。"

msgid ""
"**models.W039**: ``<database>`` does not support unique constraints with non-"
"key columns."
msgstr "**models.W039** ： ``<database>`` 不支持非键列的唯一约束。"

msgid ""
"**models.W040**: ``<database>`` does not support indexes with non-key "
"columns."
msgstr "**models.W040** ： ``<database>`` 不支持带有非键列的索引。"

msgid ""
"**models.E041**: ``constraints`` refers to the joined field ``<field name>``."
msgstr "**models.E041** ： ``constraints`` 指向 join 字段 ``<field name>``。"

msgid ""
"**models.W042**: Auto-created primary key used when not defining a primary "
"key type, by default ``django.db.models.AutoField``."
msgstr ""
"**models.W042** ： 在没有定义主键类型时使用的自动创建的主键，默认为 ``django."
"db.models.AutoField``。"

msgid ""
"**models.W043**: ``<database>`` does not support indexes on expressions."
msgstr "**models.W043** ： ``<database>`` 不支持对表达式的索引。"

msgid ""
"**models.W044**: ``<database>`` does not support unique constraints on "
"expressions."
msgstr ""

msgid ""
"**models.W045**: Check constraint ``<constraint>`` contains ``RawSQL()`` "
"expression and won't be validated during the model ``full_clean()``."
msgstr ""

msgid ""
"**models.W046**: ``<database>`` does not support comments on tables "
"(``db_table_comment``)."
msgstr ""

msgid "Security"
msgstr "安全"

msgid ""
"The security checks do not make your site secure. They do not audit code, do "
"intrusion detection, or do anything particularly complex. Rather, they help "
"perform an automated, low-hanging-fruit checklist, that can help you to "
"improve your site's security."
msgstr ""
"安全检查并不能使你的网站安全。它们不会审计代码，进行入侵检测，或做任何特别复"
"杂的事情。相反，它们有助于执行一个自动化的、唾手可得的检查清单，可以帮助你提"
"高网站的安全性。"

msgid ""
"Some of these checks may not be appropriate for your particular deployment "
"configuration. For instance, if you do your HTTP to HTTPS redirection in a "
"load balancer, it'd be irritating to be constantly warned about not having "
"enabled :setting:`SECURE_SSL_REDIRECT`. Use :setting:"
"`SILENCED_SYSTEM_CHECKS` to silence unneeded checks."
msgstr ""
"其中一些检查可能不适合你的特定部署配置。例如，如果你在负载均衡器中进行 HTTP "
"到 HTTPS 的重定向，那么不断地被警告没有启用 :setting:`SECURE_SSL_REDIRECT` 会"
"很恼火。使用 :setting:`SILENCED_SYSTEM_CHECKS` 来关闭不需要的检查。"

msgid ""
"The following checks are run if you use the :option:`check --deploy` option:"
msgstr "如果使用 :option:`check --deploy` 选项，则会运行以下检查："

msgid ""
"**security.W001**: You do not have :class:`django.middleware.security."
"SecurityMiddleware` in your :setting:`MIDDLEWARE` so the :setting:"
"`SECURE_HSTS_SECONDS`, :setting:`SECURE_CONTENT_TYPE_NOSNIFF`, :setting:"
"`SECURE_REFERRER_POLICY`, :setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY`, and :"
"setting:`SECURE_SSL_REDIRECT` settings will have no effect."
msgstr ""

msgid ""
"**security.W002**: You do not have :class:`django.middleware.clickjacking."
"XFrameOptionsMiddleware` in your :setting:`MIDDLEWARE`, so your pages will "
"not be served with an ``'x-frame-options'`` header. Unless there is a good "
"reason for your site to be served in a frame, you should consider enabling "
"this header to help prevent clickjacking attacks."
msgstr ""
"**security.W002**：你的 :setting:`MIDDLEWARE` 中没有 :class:`django."
"middleware.clickjacking.XFrameOptionsMiddleware`，因此你的页面不会使用 ``'x-"
"frame-options'`` 头。除非有很好的理由让你的网站以框架形式提供服务，否则你应该"
"考虑启用这个头以帮助防止点击劫持攻击。"

msgid ""
"**security.W003**: You don't appear to be using Django's built-in cross-site "
"request forgery protection via the middleware (:class:`django.middleware."
"csrf.CsrfViewMiddleware` is not in your :setting:`MIDDLEWARE`). Enabling the "
"middleware is the safest approach to ensure you don't leave any holes."
msgstr ""
"**security.W003**：你似乎没有通过中间件使用 Django 内置的跨站请求伪造保护功能"
"（:class:`django.middleware.csrf.CsrfViewMiddleware` 不在你的 :setting:"
"`MIDDLEWARE` 中）。启用中间件是最安全的方法，以确保你不会留下任何漏洞。"

msgid ""
"**security.W004**: You have not set a value for the :setting:"
"`SECURE_HSTS_SECONDS` setting. If your entire site is served only over SSL, "
"you may want to consider setting a value and enabling :ref:`HTTP Strict "
"Transport Security <http-strict-transport-security>`. Be sure to read the "
"documentation first; enabling HSTS carelessly can cause serious, "
"irreversible problems."
msgstr ""
"**security.W004**：你没有为 :setting:`SECURE_HSTS_SECONDS` 配置设置一个值。如"
"果你的整个网站只通过 SSL 提供服务，你可能需要考虑设置一个值并启用 :ref:`HTTP "
"严格传输安全 <http-strict-transport-security>`。一定要先阅读文档，不小心启用 "
"HSTS 会导致严重的、不可逆转的问题"

msgid ""
"**security.W005**: You have not set the :setting:"
"`SECURE_HSTS_INCLUDE_SUBDOMAINS` setting to ``True``. Without this, your "
"site is potentially vulnerable to attack via an insecure connection to a "
"subdomain. Only set this to ``True`` if you are certain that all subdomains "
"of your domain should be served exclusively via SSL."
msgstr ""
"**security.W005**：你没有将 :setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS` 设置为 "
"``True``。如果没有这个设置，你的网站就有可能受到通过不安全连接到子域的攻击。"
"只有当你确定你的域名的所有子域都应该只通过 SSL 来提供服务时，才将此设置为 "
"``True``。"

msgid ""
"**security.W006**: Your :setting:`SECURE_CONTENT_TYPE_NOSNIFF` setting is "
"not set to ``True``, so your pages will not be served with an ``'X-Content-"
"Type-Options: nosniff'`` header. You should consider enabling this header to "
"prevent the browser from identifying content types incorrectly."
msgstr ""
"**security.W006**：你的 :setting:`SECURE_CONTENT_TYPE_NOSNIFF` 配置没有设置"
"为 ``True``，因此你的网页不会以 ``'X-Content-Type-Options: nosniff'`` 头提供"
"服务。你应该考虑启用这个头，以防止浏览器错误地识别内容类型。"

msgid ""
"**security.W007**: Your ``SECURE_BROWSER_XSS_FILTER`` setting is not set to "
"``True``, so your pages will not be served with an ``'X-XSS-Protection: 1; "
"mode=block'`` header. You should consider enabling this header to activate "
"the browser's XSS filtering and help prevent XSS attacks. *This check is "
"removed in Django 3.0 as the* ``X-XSS-Protection`` *header is no longer "
"honored by modern browsers.*"
msgstr ""

msgid ""
"**security.W008**: Your :setting:`SECURE_SSL_REDIRECT` setting is not set to "
"``True``. Unless your site should be available over both SSL and non-SSL "
"connections, you may want to either set this setting to ``True`` or "
"configure a load balancer or reverse-proxy server  to redirect all "
"connections to HTTPS."
msgstr ""
"**security.W008**：你的 :setting:`SECURE_SSL_REDIRECT` 配置没有设置为 "
"``True``。除非你的网站需要通过 SSL 和非 SSL 连接，否则你可能需要将此设置设置"
"为 ``True``，或者配置一个负载平衡器或反向代理服务器，将所有连接重定向到 "
"HTTPS。"

msgid ""
"**security.W009**: Your :setting:`SECRET_KEY` has less than 50 characters, "
"less than 5 unique characters, or it's prefixed with ``'django-insecure-'`` "
"indicating that it was generated automatically by Django. Please generate a "
"long and random value, otherwise many of Django's security-critical features "
"will be vulnerable to attack."
msgstr ""

msgid ""
"**security.W010**: You have :mod:`django.contrib.sessions` in your :setting:"
"`INSTALLED_APPS` but you have not set :setting:`SESSION_COOKIE_SECURE` to "
"``True``. Using a secure-only session cookie makes it more difficult for "
"network traffic sniffers to hijack user sessions."
msgstr ""
"**security.W010**：你的 :setting:`INSTALLED_APPS` 中有 :mod:`django.contrib."
"session`，但你没有将 :setting:`SESSION_COOKIE_SECURE` 设置为 ``True``。使用仅"
"安全的会话 cookie 可以使网络流量嗅探器更难劫持用户会话。"

msgid ""
"**security.W011**: You have :class:`django.contrib.sessions.middleware."
"SessionMiddleware` in your :setting:`MIDDLEWARE`, but you have not set :"
"setting:`SESSION_COOKIE_SECURE` to ``True``. Using a secure-only session "
"cookie makes it more difficult for network traffic sniffers to hijack user "
"sessions."
msgstr ""
"**security.W011**：您的 :setting:`MIDDLEWARE` 中有 :class:`django.contrib."
"session.middleware.SessionMiddleware`，但你没有将 :setting:"
"`SESSION_COOKIE_SECURE` 设置为 ``True``。使用仅安全的会话 cookie 可以使网络流"
"量嗅探器更难劫持用户会话"

msgid ""
"**security.W012**: :setting:`SESSION_COOKIE_SECURE` is not set to ``True``. "
"Using a secure-only session cookie makes it more difficult for network "
"traffic sniffers to hijack user sessions."
msgstr ""
"**security.W012**：:setting:`SESSION_COOKIE_SECURE` 未设置为 ``True``。使用仅"
"安全的会话 cookie 使网络流量嗅探者更难劫持用户会话。"

msgid ""
"**security.W013**: You have :mod:`django.contrib.sessions` in your :setting:"
"`INSTALLED_APPS`, but you have not set :setting:`SESSION_COOKIE_HTTPONLY` to "
"``True``. Using an ``HttpOnly`` session cookie makes it more difficult for "
"cross-site scripting attacks to hijack user sessions."
msgstr ""
"**security.W013**：你的 :setting:`INSTALLED_APPS` 中有 :mod:`django.contrib."
"session`，但你没有将 :setting:`SESSION_COOKIE_HTTPONLY` 设置为 ``True``。使"
"用 ``HttpOnly`` 的会话 cookie 可以使跨站脚本攻击更难劫持用户会话。"

msgid ""
"**security.W014**: You have :class:`django.contrib.sessions.middleware."
"SessionMiddleware` in your :setting:`MIDDLEWARE`, but you have not set :"
"setting:`SESSION_COOKIE_HTTPONLY` to ``True``. Using an ``HttpOnly`` session "
"cookie makes it more difficult for cross-site scripting attacks to hijack "
"user sessions."
msgstr ""
"**security.W014**：你的 :setting:`MIDDLEWARE` 中有 :class:`django.contrib."
"sessions.middleware.SessionMiddleware`，但你没有将 :setting:"
"`SESSION_COOKIE_HTTPONLY` 设置为 ``True``。使用 ``HttpOnly`` 的会话 cookie 可"
"以使跨站脚本攻击更难劫持用户会话。"

msgid ""
"**security.W015**: :setting:`SESSION_COOKIE_HTTPONLY` is not set to "
"``True``. Using an ``HttpOnly`` session cookie makes it more difficult for "
"cross-site scripting attacks to hijack user sessions."
msgstr ""
"**security.W015**：:setting:`SESSION_COOKIE_HTTPONLY` 未设置为 ``True``。使"
"用 ``HttpOnly`` 的会话 cookie 使跨站脚本攻击更难劫持用户会话。"

msgid ""
"**security.W016**: :setting:`CSRF_COOKIE_SECURE` is not set to ``True``. "
"Using a secure-only CSRF cookie makes it more difficult for network traffic "
"sniffers to steal the CSRF token."
msgstr ""
"**security.W016**：:setting:`CSRF_COOKIE_SECURE` 未设置为 ``True``。使用仅安"
"全的 CSRF cookie 会使网络流量嗅探者更难窃取 CSRF 令牌。"

msgid ""
"**security.W017**: :setting:`CSRF_COOKIE_HTTPONLY` is not set to ``True``. "
"Using an ``HttpOnly`` CSRF cookie makes it more difficult for cross-site "
"scripting attacks to steal the CSRF token. *This check is removed in Django "
"1.11 as the* :setting:`CSRF_COOKIE_HTTPONLY` *setting offers no practical "
"benefit.*"
msgstr ""
"**security.W017**：:setting:`CSRF_COOKIE_HTTPONLY` 未设置为 ``True``。使用 "
"``HttpOnly`` CSRF cookie 会使跨站脚本攻击更难窃取 CSRF 令牌。*这个检查在 "
"Django 1.11 中被删除了，因为 * :setting:`CSRF_COOKIE_HTTPONLY` * 配置没有实际"
"的好处*。"

msgid ""
"**security.W018**: You should not have :setting:`DEBUG` set to ``True`` in "
"deployment."
msgstr "**security.W018**：在部署时不应将 :setting:`DEBUG` 设置为 ``True``。"

msgid ""
"**security.W019**: You have :class:`django.middleware.clickjacking."
"XFrameOptionsMiddleware` in your :setting:`MIDDLEWARE`, but :setting:"
"`X_FRAME_OPTIONS` is not set to ``'DENY'``. Unless there is a good reason "
"for your site to serve other parts of itself in a frame, you should change "
"it to ``'DENY'``."
msgstr ""
"**security.W019**：在你的 :setting:`MIDDLEWARE` 中有 :class:`django."
"middleware.clickjacking.XFrameOptionsMiddleware`，但  :setting:"
"`X_FRAME_OPTIONS` 没有设置为 ``'DENY'``。除非有很好的理由让你的网站在一个框架"
"中为其他部分服务，否则你应该把它改为 ``'DENY'``。"

msgid ""
"**security.W020**: :setting:`ALLOWED_HOSTS` must not be empty in deployment."
msgstr "**security.W020**：:setting:`ALLOWED_HOSTS` 在部署时不得为空。"

msgid ""
"**security.W021**: You have not set the :setting:`SECURE_HSTS_PRELOAD` "
"setting to ``True``. Without this, your site cannot be submitted to the "
"browser preload list."
msgstr ""
"**security.W021**：你没有将 :setting:`SECURE_HSTS_PRELOAD` 设置为 ``True``。"
"否则，你的网站将无法提交到浏览器预加载列表。"

msgid ""
"**security.W022**: You have not set the :setting:`SECURE_REFERRER_POLICY` "
"setting. Without this, your site will not send a Referrer-Policy header. You "
"should consider enabling this header to protect user privacy."
msgstr ""
"**security.W022**：你没有设置 :setting:`SECURE_REFERRER_POLICY` 配置。如果没"
"有这个配置，你的网站将不会发送 Referrer-Policy 头。你应该考虑启用这个头以保护"
"用户隐私。"

msgid ""
"**security.E023**: You have set the :setting:`SECURE_REFERRER_POLICY` "
"setting to an invalid value."
msgstr ""
"**security.E023**：你的 :setting:`SECURE_REFERRER_POLICY` 配置为无效值。"

msgid ""
"**security.E024**: You have set the :setting:"
"`SECURE_CROSS_ORIGIN_OPENER_POLICY` setting to an invalid value."
msgstr ""

msgid ""
"**security.W025**: Your :setting:`SECRET_KEY_FALLBACKS[n] "
"<SECRET_KEY_FALLBACKS>` has less than 50 characters, less than 5 unique "
"characters, or it's prefixed with ``'django-insecure-'`` indicating that it "
"was generated automatically by Django. Please generate a long and random "
"value, otherwise many of Django's security-critical features will be "
"vulnerable to attack."
msgstr ""

msgid ""
"The following checks verify that your security-related settings are "
"correctly configured:"
msgstr "以下检查验证你的安全相关配置是否正确设置："

msgid ""
"**security.E100**: ``DEFAULT_HASHING_ALGORITHM`` must be ``'sha1'`` or "
"``'sha256'``. *This check appeared in Django 3.1 and 3.2*."
msgstr ""

msgid ""
"**security.E101**: The CSRF failure view ``'path.to.view'`` does not take "
"the correct number of arguments."
msgstr ""
"**security.E101** ： CSRF 失败视图 ``'path.to.view'`` 没有使用正确的参数个"
"数。"

msgid ""
"**security.E102**: The CSRF failure view ``'path.to.view'`` could not be "
"imported."
msgstr "**security.E102** ： 无法导入 CSRF 失败视图  ``'path.to.view'``。"

msgid "Signals"
msgstr "信号"

msgid ""
"**signals.E001**: ``<handler>`` was connected to the ``<signal>`` signal "
"with a lazy reference to the sender ``<app label>.<model>``, but app ``<app "
"label>`` isn't installed or doesn't provide model ``<model>``."
msgstr ""
"**signals.E001**：``<handler>`` 与 ``<signal>`` 信号连接，并惰性引用发送方 "
"``<app label>.<model>``，但应用 ``<app label>`` 没有安装或没有提供模型 "
"``<model>``。"

msgid "Templates"
msgstr "模板"

msgid ""
"The following checks verify that your :setting:`TEMPLATES` setting is "
"correctly configured:"
msgstr "以下检查验证你的 :setting:`TEMPLATES` 配置是否正确设置："

msgid ""
"**templates.E001**: You have ``'APP_DIRS': True`` in your :setting:"
"`TEMPLATES` but also specify ``'loaders'`` in ``OPTIONS``. Either remove "
"``APP_DIRS`` or remove the ``'loaders'`` option."
msgstr ""
"**templates.E001**：你在你的 :setting:`TEMPLATES` 中有  ``'APP_DIRS': "
"True`` ，但在 ``OPTIONS`` 中也指定了 ``'loaders'``。要么删除 ``APP_DIRS``，要"
"么删除 ``'loaders'`` 选项。"

msgid ""
"**templates.E002**: ``string_if_invalid`` in :setting:`TEMPLATES` :setting:"
"`OPTIONS <TEMPLATES-OPTIONS>` must be a string but got: ``{value}`` (``{type}"
"``)."
msgstr ""
"**templates.E002**：``string_if_invalid`` 在 :setting:`TEMPLATES` 的 :"
"setting:`OPTIONS <TEMPLATES-OPTIONS>` 必须是一个字符串，但得到：``{value}`` "
"（``{type}``）。"

msgid ""
"**templates.E003**:``<name>`` is used for multiple template tag modules: "
"``<module list>``. *This check was changed to* ``templates.W003`` *in Django "
"4.1.2*."
msgstr ""

msgid ""
"**templates.W003**:``<name>`` is used for multiple template tag modules: "
"``<module list>``."
msgstr ""

msgid "Translation"
msgstr "翻译"

msgid "The following checks are performed on your translation configuration:"
msgstr "以下是对你的翻译配置进行的检查："

msgid ""
"**translation.E001**: You have provided an invalid value for the :setting:"
"`LANGUAGE_CODE` setting: ``<value>``."
msgstr ""
"**translation.E001**:：你为 :setting:`LANGUAGE_CODE` 设置提供了一个无效值 "
"setting: ``<value>``。"

msgid ""
"**translation.E002**: You have provided an invalid language code in the :"
"setting:`LANGUAGES` setting: ``<value>``."
msgstr ""
"**translation.E002**：你在 :setting:`LANGUAGES` 配置中提供了无效的语言代码 "
"setting: ``<value>``。"

msgid ""
"**translation.E003**: You have provided an invalid language code in the :"
"setting:`LANGUAGES_BIDI` setting: ``<value>``."
msgstr ""
"**translation.E003**：你在 :setting:`LANGUAGES_BIDI` 设置中提供了一个无效的语"
"言代码 setting: ``<value>``。"

msgid ""
"**translation.E004**: You have provided a value for the :setting:"
"`LANGUAGE_CODE` setting that is not in the :setting:`LANGUAGES` setting."
msgstr ""
"**translation.E004**：你为 :setting:`LANGUAGE_CODE` 配置提供了一个不在 :"
"setting:`LANGUAGES` 配置中的值。"

msgid "URLs"
msgstr "URL"

msgid "The following checks are performed on your URL configuration:"
msgstr "以下检查项针对你的 URL 配置执行："

msgid ""
"**urls.W001**: Your URL pattern ``<pattern>`` uses :func:`~django.urls."
"include` with a ``route`` ending with a ``$``. Remove the dollar from the "
"``route`` to avoid problems including URLs."
msgstr ""
"**urls.W001**：你的 URL 模式 ``<pattern>`` 使用 :func:`~django.urls."
"include`，并以 ``$`` 结尾的 ``route``。把 ``route`` 中的美元符号去掉，以避免"
"包含 URL 的问题。"

msgid ""
"**urls.W002**: Your URL pattern ``<pattern>`` has a ``route`` beginning with "
"a ``/``. Remove this slash as it is unnecessary. If this pattern is targeted "
"in an :func:`~django.urls.include`, ensure the :func:`~django.urls.include` "
"pattern has a trailing ``/``."
msgstr ""
"**urls.W002**：你的 URL 模式 ``<pattern>`` 有一个以 ``/`` 开头的 ``route``。"
"请删除这个斜线，因为它是不必要的。如果这个模式是以 :func:`~django.urls."
"include` 为目标，请确保 :func:`~django.urls.include` 模式有一个尾部的 ``/``。"

msgid ""
"**urls.W003**: Your URL pattern ``<pattern>`` has a ``name`` including a ``:"
"``. Remove the colon, to avoid ambiguous namespace references."
msgstr ""
"**urls.W003**：你的 URL 模式 ``<pattern>`` 有一个 ``name``，包括一个 ``:``。"
"去掉冒号，以避免模糊的命名空间引用。"

msgid ""
"**urls.E004**: Your URL pattern ``<pattern>`` is invalid. Ensure that "
"``urlpatterns`` is a list of :func:`~django.urls.path` and/or :func:`~django."
"urls.re_path` instances."
msgstr ""
"**urls.E004**：你的 URL 模式 ``<pattern>`` 无效。确保 ``urlpatterns`` 是一"
"个 :func:`~django.urls.path` 和／或 :func:`~django.urls.re_path` 实例的列表。"

msgid ""
"**urls.W005**: URL namespace ``<namespace>`` isn't unique. You may not be "
"able to reverse all URLs in this namespace."
msgstr ""
"**urls.W005**：URL 命名空间 ``<namespace>`` 不是唯一的。你可能无法反查此命名"
"空间中的所有 URL。"

msgid ""
"**urls.E006**: The :setting:`MEDIA_URL`/ :setting:`STATIC_URL` setting must "
"end with a slash."
msgstr ""
"**urls.E006**：:setting:`MEDIA_URL` ／:setting:`STATIC_URL` 的配置必须以斜线"
"结束。"

msgid ""
"**urls.E007**: The custom ``handlerXXX`` view ``'path.to.view'`` does not "
"take the correct number of arguments (…)."
msgstr ""
"**urls.E007**：自定义 ``handlerXXX`` 视图 ``''path.to.view'`` 没有使用正确的"
"参数数（...）。"

msgid ""
"**urls.E008**: The custom ``handlerXXX`` view ``'path.to.view'`` could not "
"be imported."
msgstr "**urls.E008**：无法导入自定义 ``handlerXXX`` 视图 ``'path.to.view'``。"

msgid ""
"**urls.E009**: Your URL pattern ``<pattern>`` has an invalid view, pass "
"``<view>.as_view()`` instead of ``<view>``."
msgstr ""

msgid "``contrib`` app checks"
msgstr "``contrib`` 应用检查"

msgid "``admin``"
msgstr "``admin``"

msgid "Admin checks are all performed as part of the ``admin`` tag."
msgstr "后台检查项均作为 ``admin`` 标签的一部分执行。"

msgid ""
"The following checks are performed on any :class:`~django.contrib.admin."
"ModelAdmin` (or subclass) that is registered with the admin site:"
msgstr ""
"以下检查项在每个通过后台站点注册的 :class:`~django.contrib.admin.ModelAdmin` "
"（或其子类）上执行。"

msgid "**admin.E001**: The value of ``raw_id_fields`` must be a list or tuple."
msgstr "**admin.E001**： ``raw_id_fields`` 的值必须是个列表或元组。"

msgid ""
"**admin.E002**: The value of ``raw_id_fields[n]`` refers to ``<field "
"name>``, which is not a field of ``<model>``."
msgstr ""

msgid ""
"**admin.E003**: The value of ``raw_id_fields[n]`` must be a foreign key or a "
"many-to-many field."
msgstr ""
"**admin.E003**： ``raw_id_fields[n]`` 的值必须是个外键或一个多对多字段。"

msgid "**admin.E004**: The value of ``fields`` must be a list or tuple."
msgstr "**admin.E004**： ``fields`` 的值必须是列表或元组。"

msgid "**admin.E005**: Both ``fieldsets`` and ``fields`` are specified."
msgstr "**admin.E005**： ``fieldsets`` 和 ``fields`` 都是定制的。"

msgid "**admin.E006**: The value of ``fields`` contains duplicate field(s)."
msgstr "**admin.E006**： ``fields`` 的值包含了重复字段。"

msgid "**admin.E007**: The value of ``fieldsets`` must be a list or tuple."
msgstr "**admin.E007**： ``fieldsets`` 的值必须是个列表或元组。"

msgid "**admin.E008**: The value of ``fieldsets[n]`` must be a list or tuple."
msgstr "**admin.E008**： ``fieldsets[n]`` 的值必须是个列表或元组。"

msgid "**admin.E009**: The value of ``fieldsets[n]`` must be of length 2."
msgstr "**admin.E009**： ``fieldsets[n]`` 的值的长度必须是 2。"

msgid "**admin.E010**: The value of ``fieldsets[n][1]`` must be a dictionary."
msgstr "**admin.E010**： ``fieldsets[n][1]`` 的值必须是个字典。"

msgid ""
"**admin.E011**: The value of ``fieldsets[n][1]`` must contain the key "
"``fields``."
msgstr "**admin.E011**： ``fieldsets[n][1]`` 的值必须包含键 ``fields``。"

msgid "**admin.E012**: There are duplicate field(s) in ``fieldsets[n][1]``."
msgstr "**admin.E012**： ``fieldsets[n][1]`` 中有重复字段。"

msgid ""
"**admin.E013**: The value of ``fields[n]/fieldsets[n][m]`` cannot include "
"the ``ManyToManyField`` ``<field name>``, because that field manually "
"specifies a relationship model."
msgstr ""

msgid "**admin.E014**: The value of ``exclude`` must be a list or tuple."
msgstr "**admin.E014**： ``exclude`` 的值必须是个列表或元组。"

msgid "**admin.E015**: The value of ``exclude`` contains duplicate field(s)."
msgstr "**admin.E015**： ``exclude`` 的值必须包含重复字段。"

msgid ""
"**admin.E016**: The value of ``form`` must inherit from ``BaseModelForm``."
msgstr "**admin.E016**： ``form`` 的值必须继承自 ``BaseModelForm``。"

msgid ""
"**admin.E017**: The value of ``filter_vertical`` must be a list or tuple."
msgstr "**admin.E017**： ``filter_vertical`` 的值必须是个列表或元组。"

msgid ""
"**admin.E018**: The value of ``filter_horizontal`` must be a list or tuple."
msgstr "**admin.E018**： ``filter_horizontal`` 的值必须是个列表或元组。"

msgid ""
"**admin.E019**: The value of ``filter_vertical[n]/filter_horizontal[n]`` "
"refers to ``<field name>``, which is not a field of ``<model>``."
msgstr ""

msgid ""
"**admin.E020**: The value of ``filter_vertical[n]/filter_horizontal[n]`` "
"must be a many-to-many field."
msgstr ""
"**admin.E020**：``filter_vertical[n]/filter_horizontal[n]`` 的值必须是多对多"
"字段。"

msgid "**admin.E021**: The value of ``radio_fields`` must be a dictionary."
msgstr "**admin.E021**：``radio_fields`` 的值必须是一个字典。"

msgid ""
"**admin.E022**: The value of ``radio_fields`` refers to ``<field name>``, "
"which is not a field of ``<model>``."
msgstr ""

msgid ""
"**admin.E023**: The value of ``radio_fields`` refers to ``<field name>``, "
"which is not an instance of ``ForeignKey``, and does not have a ``choices`` "
"definition."
msgstr ""
"**admin.E023** : ``radio_fields`` 的值指的是 ``<field name>``，它不是 "
"``ForeignKey`` 的实例，也没有 ``choices`` 的定义。"

msgid ""
"**admin.E024**: The value of ``radio_fields[<field name>]`` must be either "
"``admin.HORIZONTAL`` or ``admin.VERTICAL``."
msgstr ""
"**admin.E024**：``radio_fields[<field name>]`` 的值必须是 ``admin."
"HORIZONTAL`` 或 ``admin.VERTICAL``。"

msgid ""
"**admin.E025**: The value of ``view_on_site`` must be either a callable or a "
"boolean value."
msgstr "**admin.E025**：``view_on_site`` 的值必须是可调用值或布尔值。"

msgid ""
"**admin.E026**: The value of ``prepopulated_fields`` must be a dictionary."
msgstr "**admin.E026**：``prepopulated_fields`` 的值必须是一个字典。"

msgid ""
"**admin.E027**: The value of ``prepopulated_fields`` refers to ``<field "
"name>``, which is not a field of ``<model>``."
msgstr ""

msgid ""
"**admin.E028**: The value of ``prepopulated_fields`` refers to ``<field "
"name>``, which must not be a ``DateTimeField``, a ``ForeignKey``, a "
"``OneToOneField``, or a ``ManyToManyField`` field."
msgstr ""
"**admin.E028**：``prepopulated_fields`` 的值指的是 ``<field name>``，它不得"
"是 ``DateTimeField``、``ForeignKey``、``OneToOneField`` 或 "
"``ManyToManyField`` 字段。"

msgid ""
"**admin.E029**: The value of ``prepopulated_fields[<field name>]`` must be a "
"list or tuple."
msgstr ""
"**admin.E029**：``prepopulated_fields[<field name>]`` 的值必须是一个列表或元"
"组。"

msgid ""
"**admin.E030**: The value of ``prepopulated_fields`` refers to ``<field "
"name>``, which is not a field of ``<model>``."
msgstr ""

msgid "**admin.E031**: The value of ``ordering`` must be a list or tuple."
msgstr "**admin.E031**：``ordering`` 的值必须是一个列表或元组。"

msgid ""
"**admin.E032**: The value of ``ordering`` has the random ordering marker ``?"
"``, but contains other fields as well."
msgstr ""
"**admin.E032**：``ordering`` 的值有随机排序标记 ``?``，但也有其他字段。"

msgid ""
"**admin.E033**: The value of ``ordering`` refers to ``<field name>``, which "
"is not a field of ``<model>``."
msgstr ""

msgid ""
"**admin.E034**: The value of ``readonly_fields`` must be a list or tuple."
msgstr "**admin.E034**：``readonly_fields`` 的值必须是一个列表或元组。"

msgid ""
"**admin.E035**: The value of ``readonly_fields[n]`` is not a callable, an "
"attribute of ``<ModelAdmin class>``, or an attribute of ``<model>``."
msgstr ""
"**admin.E035**：``readonly_fields[n]`` 的值不是可调用对象，不是 "
"``<ModelAdmin class>`` 的属性，也不是 ``<model>`` 的属性。"

msgid ""
"**admin.E036**: The value of ``autocomplete_fields`` must be a list or tuple."
msgstr "**admin.E036**：``autocomplete_fields`` 的值必须是一个列表或元组。"

msgid ""
"**admin.E037**: The value of ``autocomplete_fields[n]`` refers to ``<field "
"name>``, which is not a field of ``<model>``."
msgstr ""

msgid ""
"**admin.E038**: The value of ``autocomplete_fields[n]`` must be a foreign "
"key or a many-to-many field."
msgstr ""
"**admin.E038**：``autocomplete_fields[n]`` 的值必须是外键或多对多字段。"

msgid ""
"**admin.E039**: An admin for model ``<model>`` has to be registered to be "
"referenced by ``<modeladmin>.autocomplete_fields``."
msgstr ""
"**admin.E039**：模型 ``<model>`` 的管理必须注册，才能由 ``<modeladmin>."
"autocomplete_fields`` 引用。"

msgid ""
"**admin.E040**: ``<modeladmin>`` must define ``search_fields``, because it's "
"referenced by ``<other_modeladmin>.autocomplete_fields``."
msgstr ""
"**admin.E040**：``<modeladmin>`` 必须定义 ``search_fields``，因为 "
"``<other_modeladmin>.autocomplete_fields`` 引用了它。"

msgid "``ModelAdmin``"
msgstr "``ModelAdmin``"

msgid ""
"The following checks are performed on any :class:`~django.contrib.admin."
"ModelAdmin` that is registered with the admin site:"
msgstr ""
"对管理站点注册的任何 :class:`~django.contrib.admin.ModelAdmin` 进行以下检查："

msgid "**admin.E101**: The value of ``save_as`` must be a boolean."
msgstr "**admin.E101**： ``save_as`` 的值必须是个布尔值。"

msgid "**admin.E102**: The value of ``save_on_top`` must be a boolean."
msgstr "**admin.E102**： ``save_on_top`` 的值必须是个布尔值。"

msgid "**admin.E103**: The value of ``inlines`` must be a list or tuple."
msgstr "**admin.E103**： ``inlines`` 的值必须是个列表或元组。"

msgid ""
"**admin.E104**: ``<InlineModelAdmin class>`` must inherit from "
"``InlineModelAdmin``."
msgstr ""
"**admin.E104**： ``<InlineModelAdmin class>`` 必须继承自 "
"``InlineModelAdmin``。"

msgid ""
"**admin.E105**: ``<InlineModelAdmin class>`` must have a ``model`` attribute."
msgstr ""
"**admin.E105**： ``<InlineModelAdmin class>`` 必须有个 ``model`` 属性。"

msgid ""
"**admin.E106**: The value of ``<InlineModelAdmin class>.model`` must be a "
"``Model``."
msgstr ""
"**admin.E106**： ``<InlineModelAdmin class>.model`` 的值必须是个 ``Model``。"

msgid "**admin.E107**: The value of ``list_display`` must be a list or tuple."
msgstr "**admin.E107**： ``list_display`` 的值必须是个列表或元组。"

msgid ""
"**admin.E108**: The value of ``list_display[n]`` refers to ``<label>``, "
"which is not a callable, an attribute of ``<ModelAdmin class>``, or an "
"attribute or method on ``<model>``."
msgstr ""
"**admin.E108**：``list_display[n]`` 的值指的是 ``<label>``，而该值不是可调用"
"对象，不是 ``<ModelAdmin class>`` 的属性，也不是 ``<model>`` 的属性或方法。"

msgid ""
"**admin.E109**: The value of ``list_display[n]`` must not be a "
"``ManyToManyField`` field."
msgstr ""
"**admin.E109**： ``list_display[n]`` 的值绝对不能是个 ``ManyToManyField`` 字"
"段。"

msgid ""
"**admin.E110**: The value of ``list_display_links`` must be a list, a tuple, "
"or ``None``."
msgstr ""
"**admin.E110**：``list_display_links`` 的值必须是一个列表、一个元组或 "
"``None``。"

msgid ""
"**admin.E111**: The value of ``list_display_links[n]`` refers to "
"``<label>``, which is not defined in ``list_display``."
msgstr ""
"**admin.E111**：``list_display_links[n]`` 的值指的是 ``<label>``，而 "
"``list_display`` 中没有定义。"

msgid "**admin.E112**: The value of ``list_filter`` must be a list or tuple."
msgstr "**admin.E112**：``list_filter`` 的值必须是一个列表或元组。"

msgid ""
"**admin.E113**: The value of ``list_filter[n]`` must inherit from "
"``ListFilter``."
msgstr "**admin.E113**：``list_filter[n]`` 的值必须继承自 ``ListFilter``。"

msgid ""
"**admin.E114**: The value of ``list_filter[n]`` must not inherit from "
"``FieldListFilter``."
msgstr ""
"**admin.E114**：``list_filter[n]`` 的值不得继承于 ``FieldListFilter``。"

msgid ""
"**admin.E115**: The value of ``list_filter[n][1]`` must inherit from "
"``FieldListFilter``."
msgstr ""
"**admin.E115**：``list_filter[n][1]`` 的值必须继承自 ``FieldListFilter``。"

msgid ""
"**admin.E116**: The value of ``list_filter[n]`` refers to ``<label>``, which "
"does not refer to a Field."
msgstr ""
"**admin.E116**：``list_filter[n]`` 的值指的是 ``<label>``，而该值并不指一个字"
"段。"

msgid ""
"**admin.E117**: The value of ``list_select_related`` must be a boolean, "
"tuple or list."
msgstr "**admin.E117**：``list_select_related`` 的值必须是布尔值、元组或列表。"

msgid "**admin.E118**: The value of ``list_per_page`` must be an integer."
msgstr "**admin.E118**：``list_per_page`` 的值必须是一个整数。"

msgid "**admin.E119**: The value of ``list_max_show_all`` must be an integer."
msgstr "**admin.E119**：``list_max_show_all`` 的值必须是一个整数。"

msgid "**admin.E120**: The value of ``list_editable`` must be a list or tuple."
msgstr "**admin.E120**：``list_editable`` 的值必须是一个列表或元组。"

msgid ""
"**admin.E121**: The value of ``list_editable[n]`` refers to ``<label>``, "
"which is not a field of ``<model>``."
msgstr ""
"**admin.E121** ： ``list_editable[n]`` 的值指向是 ``<label>``，它不是 "
"``<model>`` 的一个字段。"

msgid ""
"**admin.E122**: The value of ``list_editable[n]`` refers to ``<label>``, "
"which is not contained in ``list_display``."
msgstr ""
"**admin.E122**：``list_editable[n]`` 的值指的是 ``<label>``，而 "
"``list_display`` 中并不包含该值。"

msgid ""
"**admin.E123**: The value of ``list_editable[n]`` cannot be in both "
"``list_editable`` and ``list_display_links``."
msgstr ""
"**admin.E123**：``list_editable[n]`` 的值不能同时出现在 ``list_editable`` 和 "
"``list_display_links`` 中。"

msgid ""
"**admin.E124**: The value of ``list_editable[n]`` refers to the first field "
"in ``list_display`` (``<label>``), which cannot be used unless "
"``list_display_links`` is set."
msgstr ""
"**admin.E124**：``list_editable[n]`` 的值是指 ``list_display`` "
"（``<label>``）中的第一个字段，除非设置 ``list_display_links``，否则不能使"
"用。"

msgid ""
"**admin.E125**: The value of ``list_editable[n]`` refers to ``<field "
"name>``, which is not editable through the admin."
msgstr ""
"**admin.E125**：``list_editable[n]`` 的值指的是 ``<field name>``，不能通过管"
"理编辑。"

msgid "**admin.E126**: The value of ``search_fields`` must be a list or tuple."
msgstr "**admin.E126**：``search_fields`` 的值必须是一个列表或元组。"

msgid ""
"**admin.E127**: The value of ``date_hierarchy`` refers to ``<field name>``, "
"which does not refer to a Field."
msgstr ""
"**admin.E127**：``date_hierarchy`` 的值指的是 ``<field name>``，而该值并不指"
"的是一个字段。"

msgid ""
"**admin.E128**: The value of ``date_hierarchy`` must be a ``DateField`` or "
"``DateTimeField``."
msgstr ""
"**admin.E128**：``date_hierarchy`` 的值必须是 ``DateField`` 或 "
"``DateTimeField``。"

msgid ""
"**admin.E129**: ``<modeladmin>`` must define a ``has_<foo>_permission()`` "
"method for the ``<action>`` action."
msgstr ""
"**admin.E129**：``<modeladmin>`` 必须为 ``<action>`` 动作定义一个 "
"``has_<foo>_permission()`` 方法。"

msgid ""
"**admin.E130**: ``__name__`` attributes of actions defined in "
"``<modeladmin>`` must be unique. Name ``<name>`` is not unique."
msgstr ""
"**admin.E130**：``<modeladmin>`` 中定义的行动的 ``__name__`` 属性必须是唯一"
"的。``<name>`` 这个名称不是唯一的。"

msgid "``InlineModelAdmin``"
msgstr "``InlineModelAdmin``"

msgid ""
"The following checks are performed on any :class:`~django.contrib.admin."
"InlineModelAdmin` that is registered as an inline on a :class:`~django."
"contrib.admin.ModelAdmin`."
msgstr ""
"对任何 :class:`~django.contrib.admin.InlineModelAdmin` 上注册为内联的 :class:"
"`~django.contrib.admin.ModelAdmin` 进行以下检查。"

msgid ""
"**admin.E201**: Cannot exclude the field ``<field name>``, because it is the "
"foreign key to the parent model ``<app_label>.<model>``."
msgstr ""
"**admin.E201**：不能排除字段 ``<field name>``，因为它是父模型 ``<app_label>."
"<model>`` 的外键。"

msgid ""
"**admin.E202**: ``<model>`` has no ``ForeignKey`` to ``<parent model>``./ "
"``<model>`` has more than one ``ForeignKey`` to ``<parent model>``. You must "
"specify a ``fk_name`` attribute."
msgstr ""
"**admin.E202**：``<model>`` 没有 ``ForeignKey`` 到 ``<parent model>``./ "
"``<model>`` 有一个以上 ``ForeignKey`` 到 ``<parent model>``。你必须指定一个 "
"``fk_name`` 属性。"

msgid "**admin.E203**: The value of ``extra`` must be an integer."
msgstr "**admin.E203**：``extra`` 的值必须是一个整数。"

msgid "**admin.E204**: The value of ``max_num`` must be an integer."
msgstr "**admin.E204**：``max_num`` 的值必须是一个整数。"

msgid "**admin.E205**: The value of ``min_num`` must be an integer."
msgstr "**admin.E205**：``min_num`` 的值必须是一个整数。"

msgid ""
"**admin.E206**: The value of ``formset`` must inherit from "
"``BaseModelFormSet``."
msgstr "**admin.E206**：``formset`` 的值必须继承自 ``BaseModelFormSet``。"

msgid "``GenericInlineModelAdmin``"
msgstr "``GenericInlineModelAdmin``"

msgid ""
"The following checks are performed on any :class:`~django.contrib."
"contenttypes.admin.GenericInlineModelAdmin` that is registered as an inline "
"on a :class:`~django.contrib.admin.ModelAdmin`."
msgstr ""
"以下检查将在任何 :class:`~django.contrib.contenttypes.admin."
"GenericInlineModelAdmin` 上作为内联注册的 :class:`~django.contrib.admin."
"ModelAdmin` 上执行。"

msgid ""
"**admin.E301**: ``'ct_field'`` references ``<label>``, which is not a field "
"on ``<model>``."
msgstr ""
"**admin.E301**：``'ct_field'`` 引用了 ``<label>``，这不是 ``<model>`` 上的一"
"个字段。"

msgid ""
"**admin.E302**: ``'ct_fk_field'`` references ``<label>``, which is not a "
"field on ``<model>``."
msgstr ""
"**admin.E302**：``'ct_fk_field'`` 引用了 ``<label>``，这不是 ``<model>`` 上的"
"一个字段。"

msgid "**admin.E303**: ``<model>`` has no ``GenericForeignKey``."
msgstr "**admin.E303**：``<model>`` 没有 ``GenericForeignKey``。"

msgid ""
"**admin.E304**: ``<model>`` has no ``GenericForeignKey`` using content type "
"field ``<field name>`` and object ID field ``<field name>``."
msgstr ""
"**admin.E304**：``<model>`` 没有 ``GenericForeignKey``，使用内容类型字段 "
"``<field name>`` 和对象 ID 字段 ``<field name>``。"

msgid "``AdminSite``"
msgstr "``AdminSite``"

msgid ""
"The following checks are performed on the default :class:`~django.contrib."
"admin.AdminSite`:"
msgstr "对默认的 :class:`~django.contrib.admin.AdminSite` 进行以下检查："

msgid ""
"**admin.E401**: :mod:`django.contrib.contenttypes` must be in :setting:"
"`INSTALLED_APPS` in order to use the admin application."
msgstr ""
"**admin.E401**： :mod:`django.contrib.contenttypes` 必须在 :setting:"
"`INSTALLED_APPS` 中才能使用管理应用程序。"

msgid ""
"**admin.E402**: :mod:`django.contrib.auth.context_processors.auth` must be "
"enabled in :class:`~django.template.backends.django.DjangoTemplates` (:"
"setting:`TEMPLATES`) if using the default auth backend in order to use the "
"admin application."
msgstr ""
"**admin.E402**：如果使用默认的认证后端，必须在 :class:`~django.template."
"backends.django.DjangoTemplates` （:setting:`TEMPLATES`）中启用 :mod:`django."
"contrib.auth.context_processors.auth`，才能使用管理程序。"

msgid ""
"**admin.E403**: A :class:`django.template.backends.django.DjangoTemplates` "
"instance must be configured in :setting:`TEMPLATES` in order to use the "
"admin application."
msgstr ""
"**admin.E403**：必须在 :setting:`TEMPLATES` 中配置一个 :class:`django."
"template.backends.django.DjangoTemplates` 实例，才能使用管理程序。"

msgid ""
"**admin.E404**: ``django.contrib.messages.context_processors.messages`` must "
"be enabled in :class:`~django.template.backends.django.DjangoTemplates` (:"
"setting:`TEMPLATES`) in order to use the admin application."
msgstr ""
"**admin.E404**：``django.contrib.message.context_processors.message`` 必须"
"在 :class:`~django.template.backends.django.DjangoTemplates` （:setting:"
"`TEMPLATES`）中启用，才能使用管理程序。"

msgid ""
"**admin.E405**: :mod:`django.contrib.auth` must be in :setting:"
"`INSTALLED_APPS` in order to use the admin application."
msgstr ""
"**admin.E405**： :mod:`django.contrib.auth` 必须在 :setting:`INSTALLED_APPS` "
"中才能使用管理程序。"

msgid ""
"**admin.E406**: :mod:`django.contrib.messages` must be in :setting:"
"`INSTALLED_APPS` in order to use the admin application."
msgstr ""
"**admin.E406**： :mod:`django.contrib.messages` 必须在 :setting:"
"`INSTALLED_APPS` 中才能使用管理程序。"

msgid ""
"**admin.E408**: :class:`django.contrib.auth.middleware."
"AuthenticationMiddleware` must be in :setting:`MIDDLEWARE` in order to use "
"the admin application."
msgstr ""
"**admin.E408**： :class:`django.contrib.auth.middleware."
"AuthenticationMiddleware` 必须在 :setting:`MIDDLEWARE` 中才能使用管理应用程"
"序。"

msgid ""
"**admin.E409**: :class:`django.contrib.messages.middleware."
"MessageMiddleware` must be in :setting:`MIDDLEWARE` in order to use the "
"admin application."
msgstr ""
"**admin.E409**： :class:`django.contrib.messages.middleware."
"MessageMiddleware` 必须在 :setting:`MIDDLEWARE` 中才能使用管理应用程序。"

msgid ""
"**admin.E410**: :class:`django.contrib.sessions.middleware."
"SessionMiddleware` must be in :setting:`MIDDLEWARE` in order to use the "
"admin application."
msgstr ""
"**admin.E410**： :class:`django.contrib.session.middleware."
"SessionMiddleware` 必须在 :setting:`MIDDLEWARE` 中才能使用管理应用程序。"

msgid ""
"**admin.W411**: ``django.template.context_processors.request`` must be "
"enabled in :class:`~django.template.backends.django.DjangoTemplates` (:"
"setting:`TEMPLATES`) in order to use the admin navigation sidebar."
msgstr ""
"**admin.W411**：必须在 :class:`~django.template.backends.django."
"DjangoTemplates` （:setting:`TEMPLATES`）中启用 ``django.template."
"context_processors.request`` 才能使用管理员导航侧栏。"

msgid "``auth``"
msgstr "``auth``"

msgid "**auth.E001**: ``REQUIRED_FIELDS`` must be a list or tuple."
msgstr "**auth.E001**：``REQUIRED_FIELDS`` 必须是一个列表或元组。"

msgid ""
"**auth.E002**: The field named as the ``USERNAME_FIELD`` for a custom user "
"model must not be included in ``REQUIRED_FIELDS``."
msgstr ""
"**auth.E002**：``REQUIRED_FIELDS`` 中不得包括名为 ``USERNAME_FIELD`` 的自定义"
"用户模型字段。"

msgid ""
"**auth.E003**: ``<field>`` must be unique because it is named as the "
"``USERNAME_FIELD``."
msgstr ""
"**auth.E003**：``<field>`` 必须是唯一的，因为它被命名为 ``USERNAME_FIELD``。"

msgid ""
"**auth.W004**: ``<field>`` is named as the ``USERNAME_FIELD``, but it is not "
"unique."
msgstr ""
"**auth.W004**：``<field>`` 被命名为 ``USERNAME_FIELD``，但它不是唯一的。"

msgid ""
"**auth.E005**: The permission codenamed ``<codename>`` clashes with a "
"builtin permission for model ``<model>``."
msgstr ""
"**auth.E005**：代号为 ``<codename>`` 的权限与模型 ``<model>`` 的内置权限发生"
"冲突。"

msgid ""
"**auth.E006**: The permission codenamed ``<codename>`` is duplicated for "
"model ``<model>``."
msgstr "**auth.E006**：代号为 ``<codename>`` 的权限与模型 ``<model>`` 重复。"

msgid ""
"**auth.E007**: The :attr:`verbose_name <django.db.models.Options."
"verbose_name>` of model ``<model>`` must be at most 244 characters for its "
"builtin permission names to be at most 255 characters."
msgstr ""
"**auth.E007**：模型 ``<model>`` 的 :attr:`verbose_name <django.db.models."
"Options.verbose_name>` 必须最多 244 个字符，其内置的权限名最多只能是 255 个字"
"符。"

msgid ""
"**auth.E008**: The permission named ``<name>`` of model ``<model>`` is "
"longer than 255 characters."
msgstr "**auth.E008**：模型 ``<model>`` 的权限名 ``<name>`` 超过 255 个字符。"

msgid ""
"**auth.C009**: ``<User model>.is_anonymous`` must be an attribute or "
"property rather than a method. Ignoring this is a security issue as "
"anonymous users will be treated as authenticated!"
msgstr ""
"**auth.C009**：``<User model>.is_anonymous`` 必须是一个属性或属性，而不是方"
"法。忽略这一点是一个安全问题，因为匿名用户将被视为经过认证的用户。"

msgid ""
"**auth.C010**: ``<User model>.is_authenticated`` must be an attribute or "
"property rather than a method. Ignoring this is a security issue as "
"anonymous users will be treated as authenticated!"
msgstr ""
"**auth.C010**：``<User model>.is_authenticated`` 必须是一个属性或属性，而不是"
"方法。忽略这一点是一个安全问题，因为匿名用户将被视为经过认证的用户。"

msgid ""
"**auth.E011**: The name of model ``<model>`` must be at most 93 characters "
"for its builtin permission names to be at most 100 characters."
msgstr ""
"**auth.E011**： 模型 ``<model>`` 的名称最多只能是 93 个字符，其内置的权限名称"
"最多只能是 100 个字符。"

msgid ""
"**auth.E012**: The permission codenamed ``<codename>`` of model ``<model>`` "
"is longer than 100 characters."
msgstr ""
"**auth.E012**：代号为 ``<codename>`` 的模型 ``<model>`` 的权限超过100个字符。"

msgid "``contenttypes``"
msgstr "``contenttypes``"

msgid ""
"The following checks are performed when a model contains a :class:`~django."
"contrib.contenttypes.fields.GenericForeignKey` or :class:`~django.contrib."
"contenttypes.fields.GenericRelation`:"
msgstr ""
"当一个模型包含 :class:`~django.contrib.contenttypes.field.GenericForeignKey` "
"或 :class:`~django.contrib.contenttypes.field.GenericRelation` 时，会进行以下"
"检查："

msgid ""
"**contenttypes.E001**: The ``GenericForeignKey`` object ID references the "
"nonexistent field ``<field>``."
msgstr ""
"**contenttypes.E001**：``GenericForeignKey`` 对象 ID 引用不存在的字段 "
"``<field>``。"

msgid ""
"**contenttypes.E002**: The ``GenericForeignKey`` content type references the "
"nonexistent field ``<field>``."
msgstr ""
"**contenttypes.E002**：``GenericForeignKey`` 内容类型引用不存在的字段 "
"``<field>``。"

msgid "**contenttypes.E003**: ``<field>`` is not a ``ForeignKey``."
msgstr "**contenttypes.E003**：``<field>`` 不是一个 ``ForeignKey``。"

msgid ""
"**contenttypes.E004**: ``<field>`` is not a ``ForeignKey`` to ``contenttypes."
"ContentType``."
msgstr ""
"**contenttypes.E004**：``<field>`` 不是一个指向 ``contenttypes.ContentType`` "
"的  ``ForeignKey`` 。"

msgid "**contenttypes.E005**: Model names must be at most 100 characters."
msgstr "**contenttypes.E005**：模型名称最多只能是 100 个字符。"

msgid "``postgres``"
msgstr "``postgres``"

msgid ""
"The following checks are performed on :mod:`django.contrib.postgres` model "
"fields:"
msgstr "对 :mod:`django.contrib.postgres` 模型字段进行以下检查："

msgid "**postgres.E001**: Base field for array has errors: ..."
msgstr "**postgres.E001**：数组的基础字段有错误：..."

msgid "**postgres.E002**: Base field for array cannot be a related field."
msgstr "**postgres.E002**：数组的基础字段不能是有关系的字段。"

msgid ""
"**postgres.E003**: ``<field>`` default should be a callable instead of an "
"instance so that it's not shared between all field instances. *This check "
"was changed to* ``fields.E010`` *in Django 3.1*."
msgstr ""
"**postgres.E003**：``<field>`` 缺省值应该是一个可调用对象，而不是一个实例，这"
"样它就不会被所有字段实例共享。*这个检查在 Django 3.1 中被改为 *``fields."
"E010``* *。"

msgid "**postgres.W004**: Base field for array has warnings: ..."
msgstr ""

msgid "``sites``"
msgstr "``sites``"

msgid ""
"The following checks are performed on any model using a :class:`~django."
"contrib.sites.managers.CurrentSiteManager`:"
msgstr ""
"对任何使用 :class:`~django.contrib.sites.manager.CurrentSiteManager` 的模型进"
"行以下检查："

msgid ""
"**sites.E001**: ``CurrentSiteManager`` could not find a field named ``<field "
"name>``."
msgstr ""
"**sites.E001**：``CurrentSiteManager`` 找不到名为 ``<field name>`` 的字段。"

msgid ""
"**sites.E002**: ``CurrentSiteManager`` cannot use ``<field>`` as it is not a "
"foreign key or a many-to-many field."
msgstr ""
"**sites.E002**：``CurrentSiteManager`` 不能使用 ``<field>``，因为它不是外键或"
"多对多字段。"

msgid ""
"The following checks verify that :mod:`django.contrib.sites` is correctly "
"configured:"
msgstr "以下检查验证 :mod:`django.contrib.sites` 是否正确配置："

msgid "**sites.E101**: The :setting:`SITE_ID` setting must be an integer."
msgstr "**sites.E101** ： :setting:`SITE_ID` 的配置必须是一个整数。"

msgid "``staticfiles``"
msgstr "``staticfiles``"

msgid ""
"The following checks verify that :mod:`django.contrib.staticfiles` is "
"correctly configured:"
msgstr "以下检查验证 :mod:`django.contrib.staticfiles` 是否正确配置："

msgid ""
"**staticfiles.E001**: The :setting:`STATICFILES_DIRS` setting is not a tuple "
"or list."
msgstr ""
"**staticfiles.E001**： :setting:`STATICFILES_DIRS` 配置不是元组或列表。"

msgid ""
"**staticfiles.E002**: The :setting:`STATICFILES_DIRS` setting should not "
"contain the :setting:`STATIC_ROOT` setting."
msgstr ""
"**staticfiles.E002**： :setting:`STATICFILES_DIRS` 配置不应包含 :setting:"
"`STATIC_ROOT` 配置。"

msgid ""
"**staticfiles.E003**: The prefix ``<prefix>`` in the :setting:"
"`STATICFILES_DIRS` setting must not end with a slash."
msgstr ""
"**staticfiles.E003**：:setting:`STATICFILES_DIRS` 设置中的前缀 ``<prefix>``，"
"不得以斜线结束。"

msgid ""
"**staticfiles.W004**: The directory ``<directory>`` in the :setting:"
"`STATICFILES_DIRS` does not exist."
msgstr ""
"**staticfiles.W004**： :setting:`STATICFILES_DIRS` 中的目录 ``<directory>`` "
"不存在。"

msgid "Base views"
msgstr "基础视图"

msgid ""
"The following three classes provide much of the functionality needed to "
"create Django views. You may think of them as *parent* views, which can be "
"used by themselves or inherited from. They may not provide all the "
"capabilities required for projects, in which case there are Mixins and "
"Generic class-based views."
msgstr ""
"以下三个类提供了创建 Django 视图所需的大部分功能。你可以把它们看作是 *父* 类"
"的视图，它们可以自己使用，也可以从父类继承。它们可能无法提供项目所需的所有功"
"能，在这种情况下，有基于类的混入和通用视图。"

msgid ""
"Many of Django's built-in class-based views inherit from other class-based "
"views or various mixins. Because this inheritance chain is very important, "
"the ancestor classes are  documented under the section title of **Ancestors "
"(MRO)**. MRO is an acronym for Method Resolution Order."
msgstr ""
"Django 内置的许多基于类的视图都是从其他基于类的视图或各种混入中继承过来的。因"
"为这个继承链非常重要，所以祖先类被记录在 **祖先（MRO）** 节标题下。MRO 是方法"
"解析顺序的缩写。"

msgid "``View``"
msgstr "``View``"

msgid ""
"The base view class. All other class-based views inherit from this base "
"class. It isn't strictly a generic view and thus can also be imported from "
"``django.views``."
msgstr ""
"对于基本视图类，所有的基于类的视图都要继承这个基类。它并不是严格意义上的通用"
"视图，因此也可以从``django.views``导入。"

msgid "**Method Flowchart**"
msgstr "**方法流程图**"

msgid ":meth:`setup()`"
msgstr ":meth:`setup()`"

msgid ":meth:`dispatch()`"
msgstr ":meth:`dispatch()`"

msgid ":meth:`http_method_not_allowed()`"
msgstr ":meth:`http_method_not_allowed()`"

msgid ":meth:`options()`"
msgstr ":meth:`options()`"

msgid "**Example views.py**::"
msgstr "**示例 views.py**："

msgid "**Example urls.py**::"
msgstr "**示例 urls.py**："

msgid "**Attributes**"
msgstr "**属性**"

msgid "The list of HTTP method names that this view will accept."
msgstr "此视图将接受的 HTT P方法名称列表。"

msgid "Default::"
msgstr "默认："

msgid "**Methods**"
msgstr "**方法**"

msgid "Returns a callable view that takes a request and returns a response::"
msgstr "返回一个接受请求并返回响应的可调用对象视图："

msgid ""
"The returned view has ``view_class`` and ``view_initkwargs`` attributes."
msgstr "返回的视图有 ``view_class`` 和 ``view_initkwargs`` 属性。"

msgid ""
"When the view is called during the request/response cycle, the :meth:`setup` "
"method assigns the :class:`~django.http.HttpRequest` to the view's "
"``request`` attribute, and any positional and/or keyword arguments :ref:"
"`captured from the URL pattern <how-django-processes-a-request>` to the "
"``args`` and ``kwargs`` attributes, respectively. Then :meth:`dispatch` is "
"called."
msgstr ""
"当视图在请求／响应周期中被调用时， :meth:`setup` 方法将 :class:`~django.http."
"HttpRequest` 分配给视图的 ``request`` 属性，将任何位置和／或关键字参数 :ref:`"
"从 URL 模式 <how-django-processes-a-request>` 中捕获的参数分别分配给 "
"``args`` 和 ``kwargs`` 属性。然后调用 :meth:`dispatch`。"

msgid ""
"If a ``View`` subclass defines asynchronous (``async def``) method handlers, "
"``as_view()`` will mark the returned callable as a coroutine function. An "
"``ImproperlyConfigured`` exception will be raised if both asynchronous "
"(``async def``) and synchronous (``def``) handlers are defined on a single "
"view-class."
msgstr ""

msgid ""
"Compatibility with asynchronous (``async def``) method handlers was added."
msgstr ""

msgid "Performs key view initialization prior to :meth:`dispatch`."
msgstr "在 :meth:`dispatch` 之前执行关键视图初始化。"

msgid "If overriding this method, you must call ``super()``."
msgstr "如果覆盖这个方法，必须调用 ``super()``。"

msgid ""
"The ``view`` part of the view -- the method that accepts a ``request`` "
"argument plus arguments, and returns an HTTP response."
msgstr ""
"视图的 ``view`` 部分 -- 接受 ``request`` 参数加参数的方法，并返回 HTTP 响应。"

msgid ""
"The default implementation will inspect the HTTP method and attempt to "
"delegate to a method that matches the HTTP method; a ``GET`` will be "
"delegated to ``get()``, a ``POST`` to ``post()``, and so on."
msgstr ""
"默认的实现将检查 HTTP 方法，并尝试委托给与 HTTP 方法相匹配的方法；``GET`` 将"
"委托给 ``get()``，``POST`` 将委托给 ``post()``，以此类推。"

msgid ""
"By default, a ``HEAD`` request will be delegated to ``get()``. If you need "
"to handle ``HEAD`` requests in a different way than ``GET``, you can "
"override the ``head()`` method. See :ref:`supporting-other-http-methods` for "
"an example."
msgstr ""
"默认情况下，``HEAD`` 请求将被委托给 ``get()``。如果你需要以不同于 ``GET`` 的"
"方式处理 ``HEAD`` 请求，你可以覆盖 ``head()`` 方法。参见 :ref:`supporting-"
"other-http-methods` 的例子。"

msgid ""
"If the view was called with an HTTP method it doesn't support, this method "
"is called instead."
msgstr "如果视图被调用的 HTTP 方法不支持，就会调用这个方法代替。"

msgid ""
"The default implementation returns ``HttpResponseNotAllowed`` with a list of "
"allowed methods in plain text."
msgstr ""
"默认的实现返回 ``HttpResponseNotAllowed``，其中包含一个纯文本的允许方法列表。"

msgid ""
"Handles responding to requests for the OPTIONS HTTP verb. Returns a response "
"with the ``Allow`` header containing a list of the view's allowed HTTP "
"method names."
msgstr ""
"处理响应 OPTIONS HTTP 动词的请求。返回一个包含 ``Allow`` 头的响应，该头包含一"
"个视图允许的 HTTP 方法名称列表。"

msgid ""
"If the other HTTP methods handlers on the class are asynchronous (``async "
"def``) then the response will be wrapped in a coroutine function for use "
"with ``await``."
msgstr ""

msgid ""
"Compatibility with classes defining asynchronous (``async def``) method "
"handlers was added."
msgstr ""

msgid "``TemplateView``"
msgstr "``TemplateView``"

msgid ""
"Renders a given template, with the context containing parameters captured in "
"the URL."
msgstr "渲染一个给定的模板，其上下文包含 URL 中捕获的参数。"

msgid "**Ancestors (MRO)**"
msgstr "**祖先（MRO）**"

msgid "This view inherits methods and attributes from the following views:"
msgstr "该视图从以下视图继承方法和属性。"

msgid ":class:`django.views.generic.base.TemplateResponseMixin`"
msgstr ":class:`django.views.generic.base.TemplateResponseMixin`"

msgid ":class:`django.views.generic.base.ContextMixin`"
msgstr ":class:`django.views.generic.base.ContextMixin`"

msgid ":class:`django.views.generic.base.View`"
msgstr ":class:`django.views.generic.base.View`"

msgid ":meth:`~django.views.generic.base.View.setup()`"
msgstr ":meth:`~django.views.generic.base.View.setup()`"

msgid ":meth:`~django.views.generic.base.View.dispatch()`"
msgstr ":meth:`~django.views.generic.base.View.dispatch()`"

msgid ":meth:`~django.views.generic.base.View.http_method_not_allowed()`"
msgstr ":meth:`~django.views.generic.base.View.http_method_not_allowed()`"

msgid ":meth:`~django.views.generic.base.ContextMixin.get_context_data()`"
msgstr ":meth:`~django.views.generic.base.ContextMixin.get_context_data()`"

msgid "**Context**"
msgstr "**上下文**"

msgid ""
"Populated (through :class:`~django.views.generic.base.ContextMixin`) with "
"the keyword arguments captured from the URL pattern that served the view."
msgstr ""
"填充（通过 :class:`~django.views.generic.base.ContextMixin`）从服务于视图的 "
"URL 模式中捕获的关键字参数。"

msgid ""
"You can also add context using the :attr:`~django.views.generic.base."
"ContextMixin.extra_context` keyword argument for :meth:`~django.views."
"generic.base.View.as_view`."
msgstr ""
"你也可以使用 :attr:`~django.views.generic.base.ContextMixin.extra_context` 关"
"键字参数为 :meth:`~django.views.generic.base.View.as_view` 添加上下文。"

msgid "``RedirectView``"
msgstr "``RedirectView``"

msgid "Redirects to a given URL."
msgstr "重定向到给定的 URL。"

msgid ""
"The given URL may contain dictionary-style string formatting, which will be "
"interpolated against the parameters captured in the URL. Because keyword "
"interpolation is *always* done (even if no arguments are passed in), any "
"``\"%\"`` characters in the URL must be written as ``\"%%\"`` so that Python "
"will convert them to a single percent sign on output."
msgstr ""
"给定的 URL 可能包含字典式的字符串格式，将对 URL 中捕获的参数进行插值。因为关"
"键字插值 *总是* 进行的（即使没有参数传递进来），URL 中的任何 ``\"%\"`` 字符必"
"须写成 ``\"%%\"``，这样 Python 就会在输出中把它们转换为一个百分号。"

msgid ""
"If the given URL is ``None``, Django will return an ``HttpResponseGone`` "
"(410)."
msgstr ""
"如果给定的 UR L是 ``None``，Django 将返回一个 ``HttpResponseGone`` （410）。"

msgid "This view inherits methods and attributes from the following view:"
msgstr "这个视图从以下的视图中继承了方法和属性："

msgid ":meth:`get_redirect_url()`"
msgstr ":meth:`get_redirect_url()`"

msgid ""
"The URL to redirect to, as a string. Or ``None`` to raise a 410 (Gone) HTTP "
"error."
msgstr ""
"要重定向到的 URL，作为一个字符串。或者 ``None`` 引发 410（Gone）HTTP 错误。"

msgid ""
"The name of the URL pattern to redirect to. Reversing will be done using the "
"same args and kwargs as are passed in for this view."
msgstr ""
"要重定向到的 URL 模式的名称。重定向将使用与此视图传递的相同的 args 和 kwargs "
"来完成。"

msgid ""
"Whether the redirect should be permanent. The only difference here is the "
"HTTP status code returned. If ``True``, then the redirect will use status "
"code 301. If ``False``, then the redirect will use status code 302. By "
"default, ``permanent`` is ``False``."
msgstr ""
"重定向是否应该是永久的。这里唯一的区别是返回的 HTTP 状态码。如果 ``True``，那"
"么重定向将使用状态码 301。如果 ``False``，那么重定向将使用状态码 302。默认情"
"况下，``permanent`` 是 ``False``。"

msgid ""
"Whether to pass along the GET query string to the new location. If ``True``, "
"then the query string is appended to the URL. If ``False``, then the query "
"string is discarded. By default, ``query_string`` is ``False``."
msgstr ""
"是否将 GET 查询字符串传递到新位置。如果 `True``，那么查询字符串将被附加到 "
"URL 中。如果 ``False``，那么查询字符串将被丢弃。默认情况下，``query_string`` "
"是 ``False``。"

msgid "Constructs the target URL for redirection."
msgstr "构建用于重定向的目标 URL。"

msgid ""
"The ``args`` and ``kwargs`` arguments are positional and/or keyword "
"arguments :ref:`captured from the URL pattern <how-django-processes-a-"
"request>`, respectively."
msgstr ""
"``args`` 和 ``kwargs`` 参数分别是位置参数和／或关键字参数 :ref:`从 URL 模式 "
"<how-django-processes-a-request>` 中获取。"

msgid ""
"The default implementation uses :attr:`url` as a starting string and "
"performs expansion of ``%`` named parameters in that string using the named "
"groups captured in the URL."
msgstr ""
"默认实现使用 :attr:`url` 作为起始字符串，并使用 URL 中捕获的命名组对该字符串"
"中的 ``%`` 命名参数进行扩展。"

msgid ""
"If :attr:`url` is not set, ``get_redirect_url()`` tries to reverse the :attr:"
"`pattern_name` using what was captured in the URL (both named and unnamed "
"groups are used)."
msgstr ""
"如果没有设置 :attr:`url`，``get_redirect_url()`` 尝试使用 URL 中捕获的内容来"
"反推 :attr:`pattern_name` （命名组和未命名组都会使用）。"

msgid ""
"If requested by :attr:`query_string`, it will also append the query string "
"to the generated URL. Subclasses may implement any behavior they wish, as "
"long as the method returns a redirect-ready URL string."
msgstr ""
"如果被 :attr:`query_string` 请求，它也会将查询字符串附加到生成的 URL 中。子类"
"可以实现任何他们想要的行为，只要该方法返回一个重定向就绪的 URL 字符串。"

msgid "Class-based generic views - flattened index"
msgstr "基于类的通用视图——扁平化索引"

msgid ""
"This index provides an alternate organization of the reference documentation "
"for class-based views. For each view, the effective attributes and methods "
"from the class tree are represented under that view. For the reference "
"documentation organized by the class which defines the behavior, see :doc:"
"`Class-based views</ref/class-based-views/index>`."
msgstr ""
"该索引提供了基于类的视图的参考文档的另一种组织形式。对于每个视图，类树中的有"
"效属性和方法都在该视图下表示。关于按定义行为的类组织的参考文档，见 :doc:`基于"
"类的视图 </ref/class-based-views/index>`。"

msgid ""
"`Classy Class-Based Views <https://ccbv.co.uk/>`_ provides a nice interface "
"to navigate the class hierarchy of the built-in class-based views."
msgstr ""
"`基于类的经典视图 <https://ccbv.co.uk/>`_ 提供了一个很好的界面来浏览内置的基"
"于类的视图的类层次结构。"

msgid "Simple generic views"
msgstr "简单的通用视图"

msgid "**Attributes** (with optional accessor):"
msgstr "**属性** （有可选的存取器）："

msgid ":attr:`~django.views.generic.base.View.http_method_names`"
msgstr ":attr:`~django.views.generic.base.View.http_method_names`"

msgid ":meth:`~django.views.generic.base.View.as_view`"
msgstr ":meth:`~django.views.generic.base.View.as_view`"

msgid ":meth:`~django.views.generic.base.View.dispatch`"
msgstr ":meth:`~django.views.generic.base.View.dispatch`"

msgid "``head()``"
msgstr "``head()``"

msgid ":meth:`~django.views.generic.base.View.http_method_not_allowed`"
msgstr ":meth:`~django.views.generic.base.View.http_method_not_allowed`"

msgid ":meth:`~django.views.generic.base.View.setup`"
msgstr ":meth:`~django.views.generic.base.View.setup`"

msgid ":attr:`~django.views.generic.base.TemplateResponseMixin.content_type`"
msgstr ":attr:`~django.views.generic.base.TemplateResponseMixin.content_type`"

msgid ":attr:`~django.views.generic.base.ContextMixin.extra_context`"
msgstr ":attr:`~django.views.generic.base.ContextMixin.extra_context`"

msgid ""
":attr:`~django.views.generic.base.TemplateResponseMixin.response_class` [:"
"meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`]"
msgstr ""
":attr:`~django.views.generic.base.TemplateResponseMixin.response_class` [:"
"meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`]"

msgid ""
":attr:`~django.views.generic.base.TemplateResponseMixin.template_engine`"
msgstr ""
":attr:`~django.views.generic.base.TemplateResponseMixin.template_engine`"

msgid ""
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` [:"
"meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names`]"
msgstr ""
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` [:"
"meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names`]"

msgid "``get()``"
msgstr "``get()``"

msgid ":meth:`~django.views.generic.base.ContextMixin.get_context_data`"
msgstr ":meth:`~django.views.generic.base.ContextMixin.get_context_data`"

msgid ""
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`"
msgstr ""
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`"

msgid ":attr:`~django.views.generic.base.RedirectView.pattern_name`"
msgstr ":attr:`~django.views.generic.base.RedirectView.pattern_name`"

msgid ":attr:`~django.views.generic.base.RedirectView.permanent`"
msgstr ":attr:`~django.views.generic.base.RedirectView.permanent`"

msgid ":attr:`~django.views.generic.base.RedirectView.query_string`"
msgstr ":attr:`~django.views.generic.base.RedirectView.query_string`"

msgid ""
":attr:`~django.views.generic.base.RedirectView.url` [:meth:`~django.views."
"generic.base.RedirectView.get_redirect_url`]"
msgstr ""
":attr:`~django.views.generic.base.RedirectView.url` [:meth:`~django.views."
"generic.base.RedirectView.get_redirect_url`]"

msgid "``delete()``"
msgstr "``delete()``"

msgid "``options()``"
msgstr "``options()``"

msgid "``post()``"
msgstr "``post()``"

msgid "``put()``"
msgstr "``put()``"

msgid "Detail Views"
msgstr "详情视图"

msgid "``DetailView``"
msgstr "``DetailView``"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectMixin.context_object_name` [:"
"meth:`~django.views.generic.detail.SingleObjectMixin."
"get_context_object_name`]"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectMixin.context_object_name` [:"
"meth:`~django.views.generic.detail.SingleObjectMixin."
"get_context_object_name`]"

msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.model`"
msgstr ":attr:`~django.views.generic.detail.SingleObjectMixin.model`"

msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.pk_url_kwarg`"
msgstr ":attr:`~django.views.generic.detail.SingleObjectMixin.pk_url_kwarg`"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectMixin.query_pk_and_slug`"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectMixin.query_pk_and_slug`"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectMixin.queryset` [:meth:"
"`~django.views.generic.detail.SingleObjectMixin.get_queryset`]"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectMixin.queryset` [:meth:"
"`~django.views.generic.detail.SingleObjectMixin.get_queryset`]"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectMixin.slug_field` [:meth:"
"`~django.views.generic.detail.SingleObjectMixin.get_slug_field`]"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectMixin.slug_field` [:meth:"
"`~django.views.generic.detail.SingleObjectMixin.get_slug_field`]"

msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.slug_url_kwarg`"
msgstr ":attr:`~django.views.generic.detail.SingleObjectMixin.slug_url_kwarg`"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin."
"template_name_field`"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin."
"template_name_field`"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin."
"template_name_suffix`"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin."
"template_name_suffix`"

msgid ":meth:`~django.views.generic.detail.BaseDetailView.get`"
msgstr ":meth:`~django.views.generic.detail.BaseDetailView.get`"

msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data`"
msgstr ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data`"

msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object`"
msgstr ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object`"

msgid "List Views"
msgstr "列表视图"

msgid "``ListView``"
msgstr "``ListView``"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_allow_empty`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_allow_empty`]"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.context_object_name` [:"
"meth:`~django.views.generic.list.MultipleObjectMixin."
"get_context_object_name`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.context_object_name` [:"
"meth:`~django.views.generic.list.MultipleObjectMixin."
"get_context_object_name`]"

msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.model`"
msgstr ":attr:`~django.views.generic.list.MultipleObjectMixin.model`"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.ordering` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_ordering`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.ordering` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_ordering`]"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_by` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_paginate_by`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_by` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_paginate_by`]"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_orphans` [:"
"meth:`~django.views.generic.list.MultipleObjectMixin.get_paginate_orphans`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_orphans` [:"
"meth:`~django.views.generic.list.MultipleObjectMixin.get_paginate_orphans`]"

msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.paginator_class`"
msgstr ":attr:`~django.views.generic.list.MultipleObjectMixin.paginator_class`"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.queryset` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_queryset`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.queryset` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_queryset`]"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectTemplateResponseMixin."
"template_name_suffix`"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectTemplateResponseMixin."
"template_name_suffix`"

msgid ":meth:`~django.views.generic.list.BaseListView.get`"
msgstr ":meth:`~django.views.generic.list.BaseListView.get`"

msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data`"
msgstr ""
":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data`"

msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_paginator`"
msgstr ":meth:`~django.views.generic.list.MultipleObjectMixin.get_paginator`"

msgid ""
":meth:`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`"
msgstr ""
":meth:`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`"

msgid "Editing views"
msgstr "编辑视图"

msgid "``FormView``"
msgstr "``FormView``"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.form_class` [:meth:`~django."
"views.generic.edit.FormMixin.get_form_class`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.form_class` [:meth:`~django."
"views.generic.edit.FormMixin.get_form_class`]"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.initial` [:meth:`~django.views."
"generic.edit.FormMixin.get_initial`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.initial` [:meth:`~django.views."
"generic.edit.FormMixin.get_initial`]"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.prefix` [:meth:`~django.views."
"generic.edit.FormMixin.get_prefix`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.prefix` [:meth:`~django.views."
"generic.edit.FormMixin.get_prefix`]"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.success_url` [:meth:`~django."
"views.generic.edit.FormMixin.get_success_url`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.success_url` [:meth:`~django."
"views.generic.edit.FormMixin.get_success_url`]"

msgid ":meth:`~django.views.generic.edit.FormMixin.form_invalid`"
msgstr ":meth:`~django.views.generic.edit.FormMixin.form_invalid`"

msgid ":meth:`~django.views.generic.edit.FormMixin.form_valid`"
msgstr ":meth:`~django.views.generic.edit.FormMixin.form_valid`"

msgid ":meth:`~django.views.generic.edit.ProcessFormView.get`"
msgstr ":meth:`~django.views.generic.edit.ProcessFormView.get`"

msgid ":meth:`~django.views.generic.edit.FormMixin.get_context_data`"
msgstr ":meth:`~django.views.generic.edit.FormMixin.get_context_data`"

msgid ":meth:`~django.views.generic.edit.FormMixin.get_form`"
msgstr ":meth:`~django.views.generic.edit.FormMixin.get_form`"

msgid ":meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`"
msgstr ":meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`"

msgid ":meth:`~django.views.generic.edit.ProcessFormView.post`"
msgstr ":meth:`~django.views.generic.edit.ProcessFormView.post`"

msgid ":meth:`~django.views.generic.edit.ProcessFormView.put`"
msgstr ":meth:`~django.views.generic.edit.ProcessFormView.put`"

msgid "``CreateView``"
msgstr "``CreateView``"

msgid ":attr:`~django.views.generic.edit.ModelFormMixin.fields`"
msgstr ":attr:`~django.views.generic.edit.ModelFormMixin.fields`"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.form_class` [:meth:`~django."
"views.generic.edit.ModelFormMixin.get_form_class`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.form_class` [:meth:`~django."
"views.generic.edit.ModelFormMixin.get_form_class`]"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.success_url` [:meth:`~django."
"views.generic.edit.ModelFormMixin.get_success_url`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.success_url` [:meth:`~django."
"views.generic.edit.ModelFormMixin.get_success_url`]"

msgid ":meth:`~django.views.generic.edit.ModelFormMixin.form_valid`"
msgstr ":meth:`~django.views.generic.edit.ModelFormMixin.form_valid`"

msgid ":meth:`~django.views.generic.edit.ModelFormMixin.get_form_kwargs`"
msgstr ":meth:`~django.views.generic.edit.ModelFormMixin.get_form_kwargs`"

msgid "``UpdateView``"
msgstr "``UpdateView``"

msgid "``DeleteView``"
msgstr "``DeleteView``"

msgid ""
":attr:`~django.views.generic.edit.DeletionMixin.success_url` [:meth:`~django."
"views.generic.edit.DeletionMixin.get_success_url`]"
msgstr ""
":attr:`~django.views.generic.edit.DeletionMixin.success_url` [:meth:`~django."
"views.generic.edit.DeletionMixin.get_success_url`]"

msgid "Date-based views"
msgstr "基于日期的视图"

msgid "``ArchiveIndexView``"
msgstr "``ArchiveIndexView``"

msgid ""
":attr:`~django.views.generic.dates.DateMixin.allow_future` [:meth:`~django."
"views.generic.dates.DateMixin.get_allow_future`]"
msgstr ""
":attr:`~django.views.generic.dates.DateMixin.allow_future` [:meth:`~django."
"views.generic.dates.DateMixin.get_allow_future`]"

msgid ""
":attr:`~django.views.generic.dates.DateMixin.date_field` [:meth:`~django."
"views.generic.dates.DateMixin.get_date_field`]"
msgstr ""
":attr:`~django.views.generic.dates.DateMixin.date_field` [:meth:`~django."
"views.generic.dates.DateMixin.get_date_field`]"

msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_date_list`"
msgstr ":meth:`~django.views.generic.dates.BaseDateListView.get_date_list`"

msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_dated_items`"
msgstr ":meth:`~django.views.generic.dates.BaseDateListView.get_dated_items`"

msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_dated_queryset`"
msgstr ""
":meth:`~django.views.generic.dates.BaseDateListView.get_dated_queryset`"

msgid "``YearArchiveView``"
msgstr "``YearArchiveView``"

msgid ""
":attr:`~django.views.generic.dates.YearArchiveView.make_object_list` [:meth:"
"`~django.views.generic.dates.YearArchiveView.get_make_object_list`]"
msgstr ""
":attr:`~django.views.generic.dates.YearArchiveView.make_object_list` [:meth:"
"`~django.views.generic.dates.YearArchiveView.get_make_object_list`]"

msgid ""
":attr:`~django.views.generic.dates.YearMixin.year` [:meth:`~django.views."
"generic.dates.YearMixin.get_year`]"
msgstr ""
":attr:`~django.views.generic.dates.YearMixin.year` [:meth:`~django.views."
"generic.dates.YearMixin.get_year`]"

msgid ""
":attr:`~django.views.generic.dates.YearMixin.year_format` [:meth:`~django."
"views.generic.dates.YearMixin.get_year_format`]"
msgstr ""
":attr:`~django.views.generic.dates.YearMixin.year_format` [:meth:`~django."
"views.generic.dates.YearMixin.get_year_format`]"

msgid "``MonthArchiveView``"
msgstr "``MonthArchiveView``"

msgid ""
":attr:`~django.views.generic.dates.MonthMixin.month` [:meth:`~django.views."
"generic.dates.MonthMixin.get_month`]"
msgstr ""
":attr:`~django.views.generic.dates.MonthMixin.month` [:meth:`~django.views."
"generic.dates.MonthMixin.get_month`]"

msgid ""
":attr:`~django.views.generic.dates.MonthMixin.month_format` [:meth:`~django."
"views.generic.dates.MonthMixin.get_month_format`]"
msgstr ""
":attr:`~django.views.generic.dates.MonthMixin.month_format` [:meth:`~django."
"views.generic.dates.MonthMixin.get_month_format`]"

msgid ":meth:`~django.views.generic.dates.MonthMixin.get_next_month`"
msgstr ":meth:`~django.views.generic.dates.MonthMixin.get_next_month`"

msgid ":meth:`~django.views.generic.dates.MonthMixin.get_previous_month`"
msgstr ":meth:`~django.views.generic.dates.MonthMixin.get_previous_month`"

msgid "``WeekArchiveView``"
msgstr "``WeekArchiveView``"

msgid ""
":attr:`~django.views.generic.dates.WeekMixin.week` [:meth:`~django.views."
"generic.dates.WeekMixin.get_week`]"
msgstr ""
":attr:`~django.views.generic.dates.WeekMixin.week` [:meth:`~django.views."
"generic.dates.WeekMixin.get_week`]"

msgid ""
":attr:`~django.views.generic.dates.WeekMixin.week_format` [:meth:`~django."
"views.generic.dates.WeekMixin.get_week_format`]"
msgstr ""
":attr:`~django.views.generic.dates.WeekMixin.week_format` [:meth:`~django."
"views.generic.dates.WeekMixin.get_week_format`]"

msgid "``DayArchiveView``"
msgstr "``DayArchiveView``"

msgid ""
":attr:`~django.views.generic.dates.DayMixin.day` [:meth:`~django.views."
"generic.dates.DayMixin.get_day`]"
msgstr ""
":attr:`~django.views.generic.dates.DayMixin.day` [:meth:`~django.views."
"generic.dates.DayMixin.get_day`]"

msgid ""
":attr:`~django.views.generic.dates.DayMixin.day_format` [:meth:`~django."
"views.generic.dates.DayMixin.get_day_format`]"
msgstr ""
":attr:`~django.views.generic.dates.DayMixin.day_format` [:meth:`~django."
"views.generic.dates.DayMixin.get_day_format`]"

msgid ":meth:`~django.views.generic.dates.DayMixin.get_next_day`"
msgstr ":meth:`~django.views.generic.dates.DayMixin.get_next_day`"

msgid ":meth:`~django.views.generic.dates.DayMixin.get_previous_day`"
msgstr ":meth:`~django.views.generic.dates.DayMixin.get_previous_day`"

msgid "``TodayArchiveView``"
msgstr "``TodayArchiveView``"

msgid "``DateDetailView``"
msgstr "``DateDetailView``"

msgid "Generic date views"
msgstr "通用日期视图"

msgid ""
"Date-based generic views, provided in :mod:`django.views.generic.dates`, are "
"views for displaying drilldown pages for date-based data."
msgstr ""
"基于日期的通用视图，提供在 :mod:`django.views.generic.dates` 中，是用于显示基"
"于日期数据的向下扩展页面的视图。"

msgid ""
"Some of the examples on this page assume that an ``Article`` model has been "
"defined as follows in ``myapp/models.py``::"
msgstr ""
"本页的一些例子假定 ``Article`` 模型已在 ``myapp/models.py`` 中定义如下："

msgid ""
"A top-level index page showing the \"latest\" objects, by date. Objects with "
"a date in the *future* are not included unless you set ``allow_future`` to "
"``True``."
msgstr ""
"一个按日期显示“最新”对象的顶层索引页。除非你将 ``allow_future`` 设置为 "
"``True``，否则不包含日期在 *未来* 的对象。"

msgid ":class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`"
msgstr ":class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`"

msgid ":class:`django.views.generic.dates.BaseArchiveIndexView`"
msgstr ":class:`django.views.generic.dates.BaseArchiveIndexView`"

msgid ":class:`django.views.generic.dates.BaseDateListView`"
msgstr ":class:`django.views.generic.dates.BaseDateListView`"

msgid ":class:`django.views.generic.list.MultipleObjectMixin`"
msgstr ":class:`django.views.generic.list.MultipleObjectMixin`"

msgid ":class:`django.views.generic.dates.DateMixin`"
msgstr ":class:`django.views.generic.dates.DateMixin`"

msgid ""
"In addition to the context provided by :class:`django.views.generic.list."
"MultipleObjectMixin` (via :class:`django.views.generic.dates."
"BaseDateListView`), the template's context will be:"
msgstr ""
"除了 :class:`django.views.generic.list.MultipleObjectMixin` （通过 :class:"
"`django.views.generic.dates.BaseDateListView`）提供的上下文外，模板的上下文将"
"是："

msgid ""
"``date_list``: A :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"object containing all years that have objects available according to "
"``queryset``, represented as :class:`datetime.datetime` objects, in "
"descending order."
msgstr ""
"``date_list``：一个 :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"对象，包含根据 ``queryset`` 有对象可用的所有年份，以 :class:`datetime."
"datetime` 对象表示，按降序排列。"

msgid "**Notes**"
msgstr "**注意**"

msgid "Uses a default ``context_object_name`` of ``latest``."
msgstr "使用默认为 ``latest`` 的 ``context_object_name``。"

msgid "Uses a default ``template_name_suffix`` of ``_archive``."
msgstr "使用默认为 ``_archive`` 的 ``template_name_suffix``。"

msgid ""
"Defaults to providing ``date_list`` by year, but this can be altered to "
"month or day using the attribute ``date_list_period``. This also applies to "
"all subclass views."
msgstr ""
"默认情况下，按年提供 ``date_list``，但可以使用 ``date_list_period`` 属性将其"
"改为月或日。这也适用于所有子类视图。"

msgid "**Example myapp/urls.py**::"
msgstr "**示例 myapp/urls.py**："

msgid "**Example myapp/article_archive.html**:"
msgstr "**示例 myapp/article_archive.html**："

msgid "This will output all articles."
msgstr "这将输出所有文章。"

msgid ""
"A yearly archive page showing all available months in a given year. Objects "
"with a date in the *future* are not displayed unless you set "
"``allow_future`` to ``True``."
msgstr ""
"每年的存档页，显示某一年的所有可用月份。除非你把 ``allow_future`` 设置为 "
"``True``，否则不显示日期在 *未来* 的对象。"

msgid ":class:`django.views.generic.dates.BaseYearArchiveView`"
msgstr ":class:`django.views.generic.dates.BaseYearArchiveView`"

msgid ":class:`django.views.generic.dates.YearMixin`"
msgstr ":class:`django.views.generic.dates.YearMixin`"

msgid ""
"A boolean specifying whether to retrieve the full list of objects for this "
"year and pass those to the template. If ``True``, the list of objects will "
"be made available to the context. If ``False``, the ``None`` queryset will "
"be used as the object list. By default, this is ``False``."
msgstr ""
"一个布尔值，用于指定是否检索今年的全部对象清单并将其传递给模板。如果 "
"``True``，将向上下文提供对象清单。如果 ``False``，将使用 ``None`` 查询集作为"
"对象列表。默认情况下，这是 ``False``。"

msgid ""
"Determine if an object list will be returned as part of the context. "
"Returns :attr:`~YearArchiveView.make_object_list` by default."
msgstr ""
"确定是否将对象列表作为上下文的一部分返回。默认返回 :attr:`~YearArchiveView."
"make_object_list`。"

msgid ""
"``date_list``: A :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"object containing all months that have objects available according to "
"``queryset``, represented as :class:`datetime.datetime` objects, in "
"ascending order."
msgstr ""
"``date_list``。一个 :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"对象，包含根据 ``queryset`` 有对象可用的所有月份，以 :class:`datetime."
"datetime` 对象表示，按升序排列。"

msgid "``year``: A :class:`~datetime.date` object representing the given year."
msgstr "``year``：一个 :class:`~datetime.date` 对象，代表特定年份。"

msgid ""
"``next_year``: A :class:`~datetime.date` object representing the first day "
"of the next year, according to :attr:`~BaseDateListView.allow_empty` and :"
"attr:`~DateMixin.allow_future`."
msgstr ""
"``next_year``： 一个:class:`~datetime.date` 对象，根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future`，表示下一"
"年的第一天。"

msgid ""
"``previous_year``: A :class:`~datetime.date` object representing the first "
"day of the previous year, according to :attr:`~BaseDateListView.allow_empty` "
"and :attr:`~DateMixin.allow_future`."
msgstr ""
"``previous_year``： 一个 :class:`~datetime.date` 对象，根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future`，表示前一"
"年的第一天。"

msgid "Uses a default ``template_name_suffix`` of ``_archive_year``."
msgstr "使用默认为 ``_archive_year`` 的 ``template_name_suffix``。"

msgid "**Example myapp/views.py**::"
msgstr "**示例 myapp/views.py**："

msgid "**Example myapp/article_archive_year.html**:"
msgstr "**示例 myapp/article_archive_year.html**："

msgid ""
"A monthly archive page showing all objects in a given month. Objects with a "
"date in the *future* are not displayed unless you set ``allow_future`` to "
"``True``."
msgstr ""
"每月的存档页，显示特定月份的所有对象。除非你把 ``allow_future`` 设置为 "
"``True``，否则不显示日期在 *未来* 的对象。"

msgid ":class:`django.views.generic.dates.BaseMonthArchiveView`"
msgstr ":class:`django.views.generic.dates.BaseMonthArchiveView`"

msgid ":class:`django.views.generic.dates.MonthMixin`"
msgstr ":class:`django.views.generic.dates.MonthMixin`"

msgid ""
"In addition to the context provided by :class:`~django.views.generic.list."
"MultipleObjectMixin` (via :class:`~django.views.generic.dates."
"BaseDateListView`), the template's context will be:"
msgstr ""
"除了 :class:`~django.views.generic.list.MultipleObjectMixin` （通过 :class:"
"`~django.views.generic.dates.BaseDateListView`）提供的上下文外，模板的上下文"
"将是："

msgid ""
"``date_list``: A :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"object containing all days that have objects available in the given month, "
"according to ``queryset``, represented as :class:`datetime.datetime` "
"objects, in ascending order."
msgstr ""
"``date_list``：一个 :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"对象，根据 ``queryset``，以 :class:`datetime.datetime` 对象的形式表示，按升序"
"排列，包含给定月份内有对象可用的所有日子。"

msgid ""
"``month``: A :class:`~datetime.date` object representing the given month."
msgstr "``month``：一个 :class:`~datetime.date` 对象，代表指定月份。"

msgid ""
"``next_month``: A :class:`~datetime.date` object representing the first day "
"of the next month, according to :attr:`~BaseDateListView.allow_empty` and :"
"attr:`~DateMixin.allow_future`."
msgstr ""
"``next_month``： 一个 :class:`~datetime.date` 对象，根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future`，表示下个"
"月的第一天。"

msgid ""
"``previous_month``: A :class:`~datetime.date` object representing the first "
"day of the previous month, according to :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"``previous_month``： 一个 :class:`~datetime.date` 对象，根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future`，表示前一"
"个月的第一天。"

msgid "Uses a default ``template_name_suffix`` of ``_archive_month``."
msgstr "使用默认为 ``_archive_month`` 的 ``template_name_suffix``。"

msgid "**Example myapp/article_archive_month.html**:"
msgstr "**示例 myapp/article_archive_month.html**："

msgid ""
"A weekly archive page showing all objects in a given week. Objects with a "
"date in the *future* are not displayed unless you set ``allow_future`` to "
"``True``."
msgstr ""
"每周的档案页，显示某一周的所有对象。除非你将 ``allow_future`` 设置为 "
"``True``，否则不显示日期在 *未来* 的对象。"

msgid ":class:`django.views.generic.dates.BaseWeekArchiveView`"
msgstr ":class:`django.views.generic.dates.BaseWeekArchiveView`"

msgid ":class:`django.views.generic.dates.WeekMixin`"
msgstr ":class:`django.views.generic.dates.WeekMixin`"

msgid ""
"``week``: A :class:`~datetime.date` object representing the first day of the "
"given week."
msgstr "``week``：一个 :class:`~datetime.date` 对象，表示指定星期的第一天。"

msgid ""
"``next_week``: A :class:`~datetime.date` object representing the first day "
"of the next week, according to :attr:`~BaseDateListView.allow_empty` and :"
"attr:`~DateMixin.allow_future`."
msgstr ""
"``next_week``：一个 :class:`~datetime.date` 对象，根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future`，表示下周"
"的第一天。"

msgid ""
"``previous_week``: A :class:`~datetime.date` object representing the first "
"day of the previous week, according to :attr:`~BaseDateListView.allow_empty` "
"and :attr:`~DateMixin.allow_future`."
msgstr ""
"``previous_week``：一个 :class:`~datetime.date` 对象，根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future`，表示前一"
"周的第一天。"

msgid "Uses a default ``template_name_suffix`` of ``_archive_week``."
msgstr "使用默认为 ``_archive_week`` 的 ``template_name_suffix``。"

msgid ""
"The ``week_format`` attribute is a :func:`~time.strptime` format string used "
"to parse the week number. The following values are supported:"
msgstr ""
"``week_format`` 属性是一个 :func:`~time.strptime` 格式字符串，用于解析星期"
"数。支持的值如下："

msgid ""
"``'%U'``: Based on the United States week system where the week begins on "
"Sunday. This is the default value."
msgstr "``'%U'``：根据美国的周制，一周从周日开始。这是默认值。"

msgid ""
"``'%W'``: Similar to ``'%U'``, except it assumes that the week begins on "
"Monday. This is not the same as the ISO 8601 week number."
msgstr ""
"``'%W'``：与 ``'%U'`` 类似，但它假定一周从星期一开始。这与 ISO 8601 周号不"
"同。"

msgid "``'%V'``: ISO 8601 week number where the week begins on Monday."
msgstr "``'%V'`` ： ISO 8601 周号，即一周开始于星期一。"

msgid "**Example myapp/article_archive_week.html**:"
msgstr "**示例 myapp/article_archive_week.html**："

msgid ""
"In this example, you are outputting the week number. Keep in mind that week "
"numbers computed by the :tfilter:`date` template filter with the ``'W'`` "
"format character are not always the same as those computed by :func:`~time."
"strftime` and :func:`~time.strptime` with the ``'%W'`` format string. For "
"year 2015, for example, week numbers output by :tfilter:`date` are higher by "
"one compared to those output by :func:`~time.strftime`. There isn't an "
"equivalent for the ``'%U'`` :func:`~time.strftime` format string in :tfilter:"
"`date`. Therefore, you should avoid using :tfilter:`date` to generate URLs "
"for ``WeekArchiveView``."
msgstr ""
"在这个例子中，你输出的是周数。请记住，由 :tfilter:`date` 模板过滤器用 "
"`'`W'`` 格式字符计算的星期数与 :func:`~time.strftime` 和 :func:`~time."
"strptime` 用 ``'%W'`` 格式字符串计算的星期数并不总是相同的。例如，对于 2015 "
"年， :tfilter:`date` 输出的周数比 :func:`~time.strftime` 输出的周数高 1。:"
"tfilter:`date` 中的 ``'%U'`` :func:`~time.strftime` 格式字符串没有等价物。因"
"此，你应该避免使用 :tfilter:`date` 为 ``WeekArchiveView`` 生成 URL。"

msgid ""
"A day archive page showing all objects in a given day. Days in the future "
"throw a 404 error, regardless of whether any objects exist for future days, "
"unless you set ``allow_future`` to ``True``."
msgstr ""
"一个显示某一天所有对象的日存档页面。未来的日子会抛出 404 错误，不管未来的日子"
"是否有任何对象存在，除非你把 ``allow_future`` 设置为 ``True``。"

msgid ":class:`django.views.generic.dates.BaseDayArchiveView`"
msgstr ":class:`django.views.generic.dates.BaseDayArchiveView`"

msgid ":class:`django.views.generic.dates.DayMixin`"
msgstr ":class:`django.views.generic.dates.DayMixin`"

msgid "``day``: A :class:`~datetime.date` object representing the given day."
msgstr "``day``：一个 :class:`~datetime.date` 对象，代表指定的一天。"

msgid ""
"``next_day``: A :class:`~datetime.date` object representing the next day, "
"according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin."
"allow_future`."
msgstr ""
"``next_day``：一个 :class:`~datetime.date` 对象，根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future` 表示第二"
"天。"

msgid ""
"``previous_day``: A :class:`~datetime.date` object representing the previous "
"day, according to :attr:`~BaseDateListView.allow_empty` and :attr:"
"`~DateMixin.allow_future`."
msgstr ""
"``previous_day``：一个 :class:`~datetime.date` 对象，根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future` 表示前一"
"天。"

msgid "Uses a default ``template_name_suffix`` of ``_archive_day``."
msgstr "使用默认为 ``_archive_day`` 的 ``template_name_suffix``。"

msgid "**Example myapp/article_archive_day.html**:"
msgstr "**示例 myapp/article_archive_day.html**："

msgid ""
"A day archive page showing all objects for *today*. This is exactly the same "
"as :class:`django.views.generic.dates.DayArchiveView`, except today's date "
"is used instead of the ``year``/``month``/``day`` arguments."
msgstr ""
"一个显示 *今天* 所有对象的日存档页面。这和 :class:`django.views.generic."
"dates.DayArchiveView` 完全一样，只是用今天的日期代替 ``year``／``month``／"
"``day`` 参数。"

msgid ":class:`django.views.generic.dates.BaseTodayArchiveView`"
msgstr ":class:`django.views.generic.dates.BaseTodayArchiveView`"

msgid "Uses a default ``template_name_suffix`` of ``_archive_today``."
msgstr "使用默认为 ``_archive_today`` 的 ``template_name_suffix``。"

msgid "Where is the example template for ``TodayArchiveView``?"
msgstr "``TodayArchiveView`` 的示例模板在哪里？"

msgid ""
"This view uses by default the same template as the :class:`~DayArchiveView`, "
"which is in the previous example. If you need a different template, set the "
"``template_name`` attribute to be the name of the new template."
msgstr ""
"该视图默认使用与前面例子中的 :class:`~DayArchiveView` 相同的模板。如果你需要"
"一个不同的模板，请将 ``template_name`` 属性设置为新模板的名称。"

msgid ""
"A page representing an individual object. If the object has a date value in "
"the future, the view will throw a 404 error by default, unless you set "
"``allow_future`` to ``True``."
msgstr ""
"一个页面代表一个单独的对象。如果对象有一个未来的日期值，除非你把 "
"``allow_future`` 设置为 ``True``，否则视图会默认抛出 404 错误。"

msgid ":class:`django.views.generic.detail.SingleObjectTemplateResponseMixin`"
msgstr ":class:`django.views.generic.detail.SingleObjectTemplateResponseMixin`"

msgid ":class:`django.views.generic.dates.BaseDateDetailView`"
msgstr ":class:`django.views.generic.dates.BaseDateDetailView`"

msgid ":class:`django.views.generic.detail.BaseDetailView`"
msgstr ":class:`django.views.generic.detail.BaseDetailView`"

msgid ":class:`django.views.generic.detail.SingleObjectMixin`"
msgstr ":class:`django.views.generic.detail.SingleObjectMixin`"

msgid ""
"Includes the single object associated with the ``model`` specified in the "
"``DateDetailView``."
msgstr "包括与 ``DateDetailView`` 中指定的 ``model`` 相关的单个对象。"

msgid "Uses a default ``template_name_suffix`` of ``_detail``."
msgstr "使用默认为 ``_detail`` 的 ``template_name_suffix``。"

msgid "**Example myapp/article_detail.html**:"
msgstr "**示例 myapp/article_detail.html**："

msgid ""
"All of the generic views listed above have matching ``Base`` views that only "
"differ in that they do not include the :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin` (for the archive views) or :class:"
"`~django.views.generic.detail.SingleObjectTemplateResponseMixin` (for the :"
"class:`DateDetailView`):"
msgstr ""
"上面列出的所有通用视图都有匹配的 ``Base`` 视图，唯一不同的是它们不包括 :"
"class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`）用于"
"存档视图）或 :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` （用于 :class:`DateDetailView`）。"

msgid "Generic display views"
msgstr "通用显示视图"

msgid ""
"The two following generic class-based views are designed to display data. On "
"many projects they are typically the most commonly used views."
msgstr ""
"以下两个基于类的通用视图旨在显示数据。在许多项目中，它们通常是最常用的视图。"

msgid ""
"While this view is executing, ``self.object`` will contain the object that "
"the view is operating upon."
msgstr "当该视图执行时，``self.object`` 将包含该视图正在操作的对象。"

msgid ""
":meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()`"
msgstr ""
":meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()`"

msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_slug_field()`"
msgstr ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_slug_field()`"

msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_queryset()`"
msgstr ":meth:`~django.views.generic.detail.SingleObjectMixin.get_queryset()`"

msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()`"
msgstr ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()`"

msgid ""
":meth:`~django.views.generic.detail.SingleObjectMixin."
"get_context_object_name()`"
msgstr ""
":meth:`~django.views.generic.detail.SingleObjectMixin."
"get_context_object_name()`"

msgid ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data()`"
msgstr ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data()`"

msgid ""
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"
msgstr ""
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"

msgid ""
"A base view for displaying a single object. It is not intended to be used "
"directly, but rather as a parent class of the :class:`django.views.generic."
"detail.DetailView` or other views representing details of a single object."
msgstr ""
"一个用于显示单个对象的基础视图。它不打算直接使用，而是作为 :class:`django."
"view.generic.detail.DetailView` 或其他表示单个对象细节的视图的父类。"

msgid "Adds ``object`` to the context."
msgstr "将 ``object`` 添加到上下文中。"

msgid "A page representing a list of objects."
msgstr "一个表示对象列表的页面。"

msgid ""
"While this view is executing, ``self.object_list`` will contain the list of "
"objects (usually, but not necessarily a queryset) that the view is operating "
"upon."
msgstr ""
"当该视图执行时，``self.object_list`` 将包含该视图正在操作的对象列表（通常，但"
"不一定是查询集）。"

msgid ":class:`django.views.generic.list.BaseListView`"
msgstr ":class:`django.views.generic.list.BaseListView`"

msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset()`"
msgstr ":meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset()`"

msgid ""
":meth:`~django.views.generic.list.MultipleObjectMixin."
"get_context_object_name()`"
msgstr ""
":meth:`~django.views.generic.list.MultipleObjectMixin."
"get_context_object_name()`"

msgid ""
":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data()`"
msgstr ""
":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data()`"

msgid "**Example myapp/article_list.html**:"
msgstr "**示例 myapp/article_list.html**："

msgid ""
"If you're using pagination, you can adapt the :ref:`example template from "
"the pagination docs <paginating-a-list-view>`."
msgstr ""

msgid ""
"A base view for displaying a list of objects. It is not intended to be used "
"directly, but rather as a parent class of the :class:`django.views.generic."
"list.ListView` or other views representing lists of objects."
msgstr ""
"一个用于显示对象列表的基础视图。它不打算直接使用，而是作为 :class:`django."
"view.generic.list.ListView` 或其他代表对象列表的视图的父类。"

msgid ""
"Adds ``object_list`` to the context. If :attr:`~django.views.generic.list."
"MultipleObjectMixin.allow_empty` is True then display an empty list. If :"
"attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` is False "
"then raise a 404 error."
msgstr ""
"添加 ``object_list`` 到上下文。如果 :attr:`~django.views.generic.list."
"MultipleObjectMixin.allow_empty` 为 True，则显示一个空列表。如果 :attr:"
"`~django.views.generic.list.MultipleObjectMixin.allow_empty` 为 False，则引发"
"一个 404 错误。"

msgid "Generic editing views"
msgstr "通用编辑视图"

msgid ""
"The following views are described on this page and provide a foundation for "
"editing content:"
msgstr "本页介绍了以下视图，为编辑内容奠定了基础。"

msgid ":class:`django.views.generic.edit.FormView`"
msgstr ":class:`django.views.generic.edit.FormView`"

msgid ":class:`django.views.generic.edit.CreateView`"
msgstr ":class:`django.views.generic.edit.CreateView`"

msgid ":class:`django.views.generic.edit.UpdateView`"
msgstr ":class:`django.views.generic.edit.UpdateView`"

msgid ":class:`django.views.generic.edit.DeleteView`"
msgstr ":class:`django.views.generic.edit.DeleteView`"

msgid ""
"The :doc:`messages framework </ref/contrib/messages>` contains :class:"
"`~django.contrib.messages.views.SuccessMessageMixin`, which facilitates "
"presenting messages about successful form submissions."
msgstr ""
":doc:`消息框架 </ref/contrib/messages>` 中包含了 :class:`~django.contrib."
"messages.views.SuccessMessageMixin`，它方便呈现关于成功提交表单的消息。"

msgid ""
"Some of the examples on this page assume that an ``Author`` model has been "
"defined as follows in ``myapp/models.py``::"
msgstr ""
"本页的一些例子假定 ``Author`` 模型已在 ``myapp/models.py`` 中定义如下："

msgid ""
"A view that displays a form. On error, redisplays the form with validation "
"errors; on success, redirects to a new URL."
msgstr ""
"一个显示表单的视图。错误时，重新显示验证错误的表单；成功时，重定向到一个新的 "
"URL。"

msgid ":class:`django.views.generic.edit.BaseFormView`"
msgstr ":class:`django.views.generic.edit.BaseFormView`"

msgid ":class:`django.views.generic.edit.FormMixin`"
msgstr ":class:`django.views.generic.edit.FormMixin`"

msgid ":class:`django.views.generic.edit.ProcessFormView`"
msgstr ":class:`django.views.generic.edit.ProcessFormView`"

msgid "**Example myapp/forms.py**::"
msgstr "**示例 myapp/forms.py**："

msgid "**Example myapp/contact.html**:"
msgstr "**示例 myapp/contact.html**："

msgid ""
"A base view for displaying a form. It is not intended to be used directly, "
"but rather as a parent class of the :class:`django.views.generic.edit."
"FormView` or other views displaying a form."
msgstr ""
"一个用于显示表单的基础视图。它不打算直接使用，而是作为 :class:`django.view."
"generic.edit.FormView` 或其他显示表单的视图的父类。"

msgid ""
"A view that displays a form for creating an object, redisplaying the form "
"with validation errors (if there are any) and saving the object."
msgstr ""
"一个显示表单的视图，用于创建对象，重新显示带有验证错误（如果有）的表单并保存"
"对象。"

msgid ":class:`django.views.generic.edit.BaseCreateView`"
msgstr ":class:`django.views.generic.edit.BaseCreateView`"

msgid ":class:`django.views.generic.edit.ModelFormMixin`"
msgstr ":class:`django.views.generic.edit.ModelFormMixin`"

msgid ""
"The ``CreateView`` page displayed to a ``GET`` request uses a "
"``template_name_suffix`` of ``'_form'``. For example, changing this "
"attribute to ``'_create_form'`` for a view creating objects for the example "
"``Author`` model would cause the default ``template_name`` to be ``'myapp/"
"author_create_form.html'``."
msgstr ""
"对 ``GET`` 请求显示的 ``CreateView`` 页面使用 ``'_form'`` 的 "
"``template_name_suffix``。例如，将这个属性改为 ``'_create_form'``，为 "
"``Author`` 模型创建对象的视图将导致默认的 ``template_name`` 为 ``'myapp/"
"author_create_form.html'``。"

msgid ""
"When using ``CreateView`` you have access to ``self.object``, which is the "
"object being created. If the object hasn't been created yet, the value will "
"be ``None``."
msgstr ""
"当使用 ``CreateView`` 时，你可以访问 ``self.object``，也就是正在创建的对象。"
"如果对象还没有被创建，其值将是 ``None``。"

msgid "**Example myapp/author_form.html**:"
msgstr "**示例 myapp/author_form.html**："

msgid ""
"A base view for creating a new object instance. It is not intended to be "
"used directly, but rather as a parent class of the :class:`django.views."
"generic.edit.CreateView`."
msgstr ""
"一个用于创建新对象实例的基础视图。它不打算直接使用，而是作为 :class:`django."
"view.generic.edit.CreateView` 的父类。"

msgid "Sets the current object instance (``self.object``) to ``None``."
msgstr "将当前对象实例（``self.object``）设置为 ``None``。"

msgid ""
"A view that displays a form for editing an existing object, redisplaying the "
"form with validation errors (if there are any) and saving changes to the "
"object. This uses a form automatically generated from the object's model "
"class (unless a form class is manually specified)."
msgstr ""
"显示用于编辑现有对象的表单视图，重新显示带有验证错误（如果有）的表单并保存对"
"对象的更改。该视图使用从对象的模型类自动生成的表单（除非手动指定了表单类）。"

msgid ":class:`django.views.generic.edit.BaseUpdateView`"
msgstr ":class:`django.views.generic.edit.BaseUpdateView`"

msgid ""
"The ``UpdateView`` page displayed to a ``GET`` request uses a "
"``template_name_suffix`` of ``'_form'``. For example, changing this "
"attribute to ``'_update_form'`` for a view updating objects for the example "
"``Author`` model would cause the default ``template_name`` to be ``'myapp/"
"author_update_form.html'``."
msgstr ""
"显示在 ``GET`` 请求中的 ``UpdateView`` 页面使用 ``'_form'`` 的 "
"``template_name_suffix``。例如，将这个属性改为 ``'_update_form'``，对于一个更"
"新对象的视图，例如 ``Author`` 模型，将导致默认的 ``template_name`` 为"
"``'myapp/author_update_form.html'``。"

msgid ""
"When using ``UpdateView`` you have access to ``self.object``, which is the "
"object being updated."
msgstr ""
"当使用 ``UpdateView`` 时，你可以访问 ``self.object``，也就是被更新的对象。"

msgid "**Example myapp/author_update_form.html**:"
msgstr "**示例 myapp/author_update_form.html**："

msgid ""
"A base view for updating an existing object instance. It is not intended to "
"be used directly, but rather as a parent class of the :class:`django.views."
"generic.edit.UpdateView`."
msgstr ""
"一个用于更新现有对象实例的基础视图。它不打算直接使用，而是作为 :class:"
"`django.view.generic.edit.UpdateView` 的父类"

msgid "Sets the current object instance (``self.object``)."
msgstr "设置当前对象实例（``self.object``）。"

msgid ""
"A view that displays a confirmation page and deletes an existing object. The "
"given object will only be deleted if the request method is ``POST``. If this "
"view is fetched via ``GET``, it will display a confirmation page that should "
"contain a form that POSTs to the same URL."
msgstr ""
"显示确认页面并删除现有对象的视图。只有当请求方法是 ``POST`` 时，给定的对象才"
"会被删除。如果这个视图是通过 ``GET`` 获取的，它将显示一个确认页面，该页面应该"
"包含一个 POST 到同一 URL 的表单。"

msgid ":class:`django.views.generic.edit.BaseDeleteView`"
msgstr ":class:`django.views.generic.edit.BaseDeleteView`"

msgid ":class:`django.views.generic.edit.DeletionMixin`"
msgstr ":class:`django.views.generic.edit.DeletionMixin`"

msgid ""
"Inherited from :class:`~django.views.generic.edit.BaseDeleteView`. The form "
"class that will be used to confirm the request. By default :class:`django."
"forms.Form`, resulting in an empty form that is always valid."
msgstr ""
"从 :class:`~django.view.generic.edit.BaseDeleteView` 继承而来。将用于确认请求"
"的表单类。默认 :class:`django.forms.Form`，结果是一个空的表单，总是有效的。"

msgid ""
"By providing your own ``Form`` subclass, you can add additional "
"requirements, such as a confirmation checkbox, for example."
msgstr ""
"通过提供你自己的 ``Form`` 子类，你可以添加额外的要求，比如说，确认复选框。"

msgid ""
"The ``DeleteView`` page displayed to a ``GET`` request uses a "
"``template_name_suffix`` of ``'_confirm_delete'``. For example, changing "
"this attribute to ``'_check_delete'`` for a view deleting objects for the "
"example ``Author`` model would cause the default ``template_name`` to be "
"``'myapp/author_check_delete.html'``."
msgstr ""
"对 ``GET`` 请求显示的 ``DeleteView`` 页面使用 ``'_confirm_delete'`` 的 "
"``template_name_suffix``。例如，将这个属性改为 ``'_check_delete'``，对于一个"
"为 ``Author`` 模型删除对象的视图，将导致默认的 ``template_name`` 为 ``'myapp/"
"author_check_delete.html'``。"

msgid "**Example myapp/author_confirm_delete.html**:"
msgstr "**示例 myapp/author_confirm_delete.html**："

msgid ""
"A base view for deleting an object instance. It is not intended to be used "
"directly, but rather as a parent class of the :class:`django.views.generic."
"edit.DeleteView`."
msgstr ""
"一个用于删除对象实例的基础视图。它不打算直接使用，而是作为 :class:`django."
"view.generic.edit.DeleteView` 的父类。"

msgid "Built-in class-based views API"
msgstr "内置基于类的视图 API"

msgid ""
"Class-based views API reference. For introductory material, see the :doc:`/"
"topics/class-based-views/index` topic guide."
msgstr ""
"基于类的视图 API 参考。关于介绍性材料，请参见 :doc:`/topics/class-based-"
"views/index` 主题指南。"

msgid "Specification"
msgstr "规范"

msgid ""
"Each request served by a class-based view has an independent state; "
"therefore, it is safe to store state variables on the instance (i.e., ``self."
"foo = 3`` is a thread-safe operation)."
msgstr ""
"基于类的视图所服务的每个请求都有一个独立的状态，因此，在实例上存储状态变量是"
"安全的（即，``self.foo = 3`` 是一个线程安全的操作）。"

msgid ""
"A class-based view is deployed into a URL pattern using the :meth:`~django."
"views.generic.base.View.as_view()` classmethod::"
msgstr ""
"基于类的视图使用 :meth:`~django.view.generic.base.View.as_view()` 类方法部署"
"到一个 URL 模式中。"

msgid "Thread safety with view arguments"
msgstr "线程安全与视图参数"

msgid ""
"Arguments passed to a view are shared between every instance of a view. This "
"means that you shouldn't use a list, dictionary, or any other mutable object "
"as an argument to a view. If you do and the shared object is modified, the "
"actions of one user visiting your view could have an effect on subsequent "
"users visiting the same view."
msgstr ""
"传递给视图的参数在视图的每个实例之间共享。这意味着你不应该使用列表、字典或任"
"何其他可更改的对象作为视图的参数。如果你这样做了，而共享对象又被修改了，那么"
"访问你视图的一个用户的行为可能会对访问同一视图的后续用户产生影响。"

msgid ""
"Arguments passed into :meth:`~django.views.generic.base.View.as_view()` will "
"be assigned onto the instance that is used to service a request. Using the "
"previous example, this means that every request on ``MyView`` is able to use "
"``self.size``. Arguments must correspond to attributes that already exist on "
"the class (return ``True`` on a ``hasattr`` check)."
msgstr ""
"传入 :meth:`~django.view.generic.base.View.as_view()` 的参数将被分配到用于服"
"务请求的实例上。使用前面的例子，这意味着在 ``MyView`` 上的每个请求都能够使用 "
"``self.size``。参数必须与类上已经存在的属性相对应（在 ``hasattr`` 检查时返回 "
"``True``）。"

msgid "Base vs Generic views"
msgstr "基础 vs 通用视图"

msgid ""
"Base class-based views can be thought of as *parent* views, which can be "
"used by themselves or inherited from. They may not provide all the "
"capabilities required for projects, in which case there are Mixins which "
"extend what base views can do."
msgstr ""
"基于类的基本视图可被视为 *父* 类视图，可自行使用或继承。它们可能无法提供项目"
"所需的所有功能，在这种情况下，有混入来扩展基本视图的功能。"

msgid ""
"Django's generic views are built off of those base views, and were developed "
"as a shortcut for common usage patterns such as displaying the details of an "
"object. They take certain common idioms and patterns found in view "
"development and abstract them so that you can quickly write common views of "
"data without having to repeat yourself."
msgstr ""
"Django 的通用视图是在这些基础视图的基础上建立起来的，是作为显示对象详情等常见"
"使用模式的快捷方式而开发的。它们采用了视图开发中的某些常见的习惯和模式，并将"
"其抽象化，这样你就可以快速编写数据的通用视图，而不必重复。"

msgid ""
"Most generic views require the ``queryset`` key, which is a ``QuerySet`` "
"instance; see :doc:`/topics/db/queries` for more information about "
"``QuerySet`` objects."
msgstr ""
"大多数通用视图需要使用 ``queryset`` 键，它是一个 ``QuerySet`` 实例；关于 "
"``QuerySet`` 对象的更多信息，请参见 :doc:`/topics/db/queries`。"

msgid "Class-based views mixins"
msgstr "基于类的视图混入"

msgid ""
"Class-based views API reference. For introductory material, see :doc:`/"
"topics/class-based-views/mixins`."
msgstr ""
"基于类的视图 API 参考。关于介绍性材料，请看 :doc:`/topics/class-based-views/"
"mixins`。"

msgid "Date-based mixins"
msgstr "基于日期的混入"

msgid ""
"All the date formatting attributes in these mixins use :func:`~time."
"strftime` format characters. Do not try to use the format characters from "
"the :ttag:`now` template tag as they are not compatible."
msgstr ""
"这些混入中的所有日期格式化属性都使用 :func:`~time.strftime` 格式字符，请不要"
"尝试使用 :ttag:`now` 模板标签的格式字符，因为它们不兼容。"

msgid "``YearMixin``"
msgstr "``YearMixin``"

msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"year component of a date."
msgstr "一个可用于检索和提供日期的年份成分解析信息的混入。"

msgid "**Methods and Attributes**"
msgstr "**方法和属性*"

msgid ""
"The :func:`~time.strftime` format to use when parsing the year. By default, "
"this is ``'%Y'``."
msgstr ":func:`~time.strftime` 格式，解析年份时使用。默认情况下，是 ``'%Y'``。"

msgid ""
"**Optional** The value for the year, as a string. By default, set to "
"``None``, which means the year will be determined using other means."
msgstr ""
"**可选的** 年数值，为字符串。默认情况下，设置为 ``None``，这意味着年份将通过"
"其他方式确定。"

msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the year. "
"Returns :attr:`~YearMixin.year_format` by default."
msgstr ""
"返回 :func:`~time.strftime` 在解析年份时使用的格式。默认返回 :attr:"
"`~YearMixin.year_format`。"

msgid ""
"Returns the year for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr "返回此视图将显示数据的年份，为一个字符串。按顺序尝试以下来源："

msgid "The value of the :attr:`YearMixin.year` attribute."
msgstr ":attr:`YearMixin.year` 属性的值。"

msgid "The value of the ``year`` argument captured in the URL pattern."
msgstr "URL 模式中捕获的 ``year`` 参数值。"

msgid "The value of the ``year`` ``GET`` query argument."
msgstr "``GET`` 查询  ``year`` 参数的值。"

msgid "Raises a 404 if no valid year specification can be found."
msgstr "如果找不到有效的年份规格，则引发 404。"

msgid ""
"Returns a date object containing the first day of the year after the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"返回一个日期对象，包含提供的日期后的第一年的第一天。根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future` 的值，该函"
"数也可以返回 ``None`` 或引发 :class:`~django.http.Http404` 异常。"

msgid ""
"Returns a date object containing the first day of the year before the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"返回一个日期对象，包含所提供日期前一年的第一天。根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future` 的值，该函"
"数也可以返回 ``None`` 或引发 :class:`~django.http.Http404` 异常。"

msgid "``MonthMixin``"
msgstr "``MonthMixin``"

msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"month component of a date."
msgstr "一个可用于检索并提供日期中月份成分的解析信息的混入。"

msgid ""
"The :func:`~time.strftime` format to use when parsing the month. By default, "
"this is ``'%b'``."
msgstr ":func:`~time.strftime` 格式在解析月份时使用。默认情况下，是 ``'%b'``。"

msgid ""
"**Optional** The value for the month, as a string. By default, set to "
"``None``, which means the month will be determined using other means."
msgstr ""
"**可选的** 月份数值，为字符串。默认情况下，设置为 ``None``，这意味着月份将通"
"过其他方式确定。"

msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the month. "
"Returns :attr:`~MonthMixin.month_format` by default."
msgstr ""
"返回 :func:`~time.strftime` 在解析月份时使用的格式。默认返回 :attr:"
"`~MonthMixin.month_format`。"

msgid ""
"Returns the month for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr "以字符串形式返回此视图将显示数据的月份。 按顺序尝试以下来源："

msgid "The value of the :attr:`MonthMixin.month` attribute."
msgstr ":attr:`MonthMixin.month` 属性的值。"

msgid "The value of the ``month`` argument captured in the URL pattern."
msgstr "URL 模式中捕获的 ``month`` 参数值。"

msgid "The value of the ``month`` ``GET`` query argument."
msgstr "``GET`` 查询  ``month`` 参数的值。"

msgid "Raises a 404 if no valid month specification can be found."
msgstr "如果找不到有效的月份规格，则引发 404。"

msgid ""
"Returns a date object containing the first day of the month after the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"返回一个日期对象，包含提供的日期后的第一个月的第一天。根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future` 的值，该函"
"数也可以返回 ``None`` 或引发 :class:`~django.http.Http404` 异常。"

msgid ""
"Returns a date object containing the first day of the month before the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"返回一个日期对象，包含所提供日期前一个月的第一天。根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future` 的值，该函"
"数也可以返回 ``None`` 或引发 :class:`~django.http.Http404` 异常。"

msgid "``DayMixin``"
msgstr "``DayMixin``"

msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"day component of a date."
msgstr "一个可用于检索并提供日期中的日期成分的解析信息的混入。"

msgid ""
"The :func:`~time.strftime` format to use when parsing the day. By default, "
"this is ``'%d'``."
msgstr ""
":func:`~time.strftime` 格式，在解析日期时使用。默认情况下，是 ``'%d'``。"

msgid ""
"**Optional** The value for the day, as a string. By default, set to "
"``None``, which means the day will be determined using other means."
msgstr ""
"**可选的** 日期的数值，为字符串。默认情况下，设置为 ``None``，这意味着将使用"
"其他方式确定日期。"

msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the day. "
"Returns :attr:`~DayMixin.day_format` by default."
msgstr ""
"返回 :func:`~time.strftime` 格式，用于解析当天的情况。默认返回 :attr:"
"`~DayMixin.day_format`。"

msgid ""
"Returns the day for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr "返回此视图将显示数据的日期，为一个字符串。按顺序尝试以下来源："

msgid "The value of the :attr:`DayMixin.day` attribute."
msgstr ":attr:`DayMixin.day` 属性的值。"

msgid "The value of the ``day`` argument captured in the URL pattern."
msgstr "URL 模式中捕获的 ``day`` 参数值。"

msgid "The value of the ``day`` ``GET`` query argument."
msgstr "``GET`` 查询  ``day`` 参数的值。"

msgid "Raises a 404 if no valid day specification can be found."
msgstr "如果找不到有效的日期规格，则引发 404。"

msgid ""
"Returns a date object containing the next valid day after the date provided. "
"This function can also return ``None`` or raise an :class:`~django.http."
"Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"返回一个日期对象，包含提供的日期后的下一个有效日期。根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future` 的值，该函"
"数也可以返回 ``None`` 或引发 :class:`~django.http.Http404` 异常。"

msgid ""
"Returns a date object containing the previous valid day. This function can "
"also return ``None`` or raise an :class:`~django.http.Http404` exception, "
"depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:"
"`~DateMixin.allow_future`."
msgstr ""
"返回一个包含前一天有效日期的日期对象。根据 :attr:`~BaseDateListView."
"allow_empty` 和 :attr:`~DateMixin.allow_future` 的值，该函数也可以返回 "
"``None`` 或引发 :class:`~django.http.Http404` 异常。"

msgid "``WeekMixin``"
msgstr "``WeekMixin``"

msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"week component of a date."
msgstr "一个可用于检索和提供日期的周成分的解析信息的混入。"

msgid ""
"The :func:`~time.strftime` format to use when parsing the week. By default, "
"this is ``'%U'``, which means the week starts on Sunday. Set it to ``'%W'`` "
"or ``'%V'`` (ISO 8601 week) if your week starts on Monday."
msgstr ""
":func:`~time.strftime` 格式，解析一周时使用。默认情况下，它是 ``'%U'``，这意"
"味着一周从周日开始。如果你的星期从周一开始，则设置为 ``'%W'``或 ``'%V'`` "
"（ISO 8601 星期）。"

msgid ""
"**Optional** The value for the week, as a string. By default, set to "
"``None``, which means the week will be determined using other means."
msgstr ""
"**可选的** 周数值，为字符串。默认情况下，设置为 ``None``，这意味着将使用其他"
"方式确定星期。"

msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the week. "
"Returns :attr:`~WeekMixin.week_format` by default."
msgstr ""
"返回 :func:`~time.strftime` 在解析星期时要使用的格式。默认返回 :attr:"
"`~WeekMixin.week_format`。"

msgid ""
"Returns the week for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr "返回此视图将显示数据的星期，为字符串。按顺序尝试以下来源："

msgid "The value of the :attr:`WeekMixin.week` attribute."
msgstr ":attr:`WeekMixin.week` 属性的值。"

msgid "The value of the ``week`` argument captured in the URL pattern"
msgstr "URL 模式中捕获的 ``week`` 参数值。"

msgid "The value of the ``week`` ``GET`` query argument."
msgstr "``GET`` 查询 ``week`` 参数的值。"

msgid "Raises a 404 if no valid week specification can be found."
msgstr "如果找不到有效的周数规格，则引发 404。"

msgid ""
"Returns a date object containing the first day of the week after the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"返回一个日期对象，包含提供的日期后的一周第一天。根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future` 的值，该函"
"数也可以返回 ``None`` 或引发 :class:`~django.http.Http404` 异常。"

msgid ""
"Returns a date object containing the first day of the week before the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"返回一个日期对象，包含提供的日期前一周的第一天。根据 :attr:"
"`~BaseDateListView.allow_empty` 和 :attr:`~DateMixin.allow_future` 的值，该函"
"数也可以返回 ``None`` 或引发 :class:`~django.http.Http404` 异常。"

msgid "``DateMixin``"
msgstr "``DateMixin``"

msgid "A mixin class providing common behavior for all date-based views."
msgstr "一个混入类，为所有基于日期的视图提供通用行为。"

msgid ""
"The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``’s "
"model that the date-based archive should use to determine the list of "
"objects to display on the page."
msgstr ""
"``QuerySet`` 模型中 ``DateField`` 或 ``DateTimeField`` 的名称，基于日期的档案"
"应使用该名称来确定页面上显示的对象列表。"

msgid ""
"When :doc:`time zone support </topics/i18n/timezones>` is enabled and "
"``date_field`` is a ``DateTimeField``, dates are assumed to be in the "
"current time zone. Otherwise, the queryset could include objects from the "
"previous or the next day in the end user's time zone."
msgstr ""
"当 :doc:`时区支持 </topics/i18n/timezones>` 被启用，并且 ``date_field`` 是 "
"``DateTimeField`` 时，日期被认为是在当前时区。否则，查询集可以包括最终用户时"
"区的前一天或第二天的对象。"

msgid ""
"In this situation, if you have implemented per-user time zone selection, the "
"same URL may show a different set of objects, depending on the end user's "
"time zone. To avoid this, you should use a ``DateField`` as the "
"``date_field`` attribute."
msgstr ""
"在这种情况下，如果你已经实现了每个用户的时区选择，那么根据最终用户的时区，同"
"一个 URL 可能会显示一组不同的对象。为了避免这种情况，你应该使用一个 "
"``DateField`` 作为 ``date_field`` 属性。"

msgid ""
"A boolean specifying whether to include \"future\" objects on this page, "
"where \"future\" means objects in which the field specified in "
"``date_field`` is greater than the current date/time. By default, this is "
"``False``."
msgstr ""
"一个布尔值，用于指定是否将“未来”对象列入本页，其中“未来”是指 ``date_field`` "
"中指定的字段大于当前日期／时间的对象。默认情况下，这是 ``False``。"

msgid ""
"Returns the name of the field that contains the date data that this view "
"will operate on. Returns :attr:`~DateMixin.date_field` by default."
msgstr ""
"返回包含日期数据的字段名，该字段将在此视图上操作。默认返回 :attr:`~DateMixin."
"date_field`。"

msgid ""
"Determine whether to include \"future\" objects on this page, where "
"\"future\" means objects in which the field specified in ``date_field`` is "
"greater than the current date/time. Returns :attr:`~DateMixin.allow_future` "
"by default."
msgstr ""
"确定是否将“未来”对象包含在本页中，“未来”是指在 ``date_field`` 中指定的字段大"
"于当前日期/时间的对象。默认返回 :attr:`~DateMixin.allow_future`。"

msgid "``BaseDateListView``"
msgstr "``BaseDateListView``"

msgid ""
"A base class that provides common behavior for all date-based views. There "
"won't normally be a reason to instantiate :class:`~django.views.generic."
"dates.BaseDateListView`; instantiate one of the subclasses instead."
msgstr ""
"一个为所有基于日期的视图提供通用行为的基类。通常没有理由实例化 :class:"
"`~django.views.generic.dates.BaseDateListView`; 实例化一个子类来代替。"

msgid ""
"While this view (and its subclasses) are executing, ``self.object_list`` "
"will contain the list of objects that the view is operating upon, and ``self."
"date_list`` will contain the list of dates for which data is available."
msgstr ""
"当这个视图（及其子类）执行时，``self.object_list`` 将包含该视图正在操作的对象"
"列表，``self.date_list`` 将包含可用数据的日期列表。"

msgid "**Mixins**"
msgstr "**混入**"

msgid ":class:`~django.views.generic.dates.DateMixin`"
msgstr ":class:`~django.views.generic.dates.DateMixin`"

msgid ":class:`~django.views.generic.list.MultipleObjectMixin`"
msgstr ":class:`~django.views.generic.list.MultipleObjectMixin`"

msgid ""
"A boolean specifying whether to display the page if no objects are "
"available. If this is ``True`` and no objects are available, the view will "
"display an empty page instead of raising a 404."
msgstr ""
"一个布尔值，用于指定是否在没有对象的情况下显示页面。如果这个值为 ``True``，并"
"且没有可用的对象，视图将显示一个空页面，而不是引发 404。"

msgid ""
"This is identical to :attr:`django.views.generic.list.MultipleObjectMixin."
"allow_empty`, except for the default value, which is ``False``."
msgstr ""
"这和 :attr:`django.views.generic.list.MultipleObjectMixin.allow_empty` 是一样"
"的，只是默认值是 ``False``。"

msgid ""
"**Optional** A string defining the aggregation period for ``date_list``. It "
"must be one of ``'year'`` (default), ``'month'``, or ``'day'``."
msgstr ""
"**可选的** 定义 ``date_list`` 的聚合周期的字符串。它必须是 ``'year'`` （默"
"认）、``'month'`` 或 ``'day'`` 之一。"

msgid ""
"Returns a 3-tuple containing (``date_list``, ``object_list``, "
"``extra_context``)."
msgstr ""
"返回一个包含 (``date_list``, ``object_list``, ``extra_context``) 的三元元组。"

msgid ""
"``date_list`` is the list of dates for which data is available. "
"``object_list`` is the list of objects. ``extra_context`` is a dictionary of "
"context data that will be added to any context data provided by the :class:"
"`~django.views.generic.list.MultipleObjectMixin`."
msgstr ""
"``date_list`` 是可用数据的日期列表。``object_list`` 是对象的列表。"
"``extra_context`` 是上下文数据的字典，它将被添加到由 :class:`~django.views."
"generic.list.MultipleObjectMixin` 提供的任何上下文数据中。"

msgid ""
"Returns a queryset, filtered using the query arguments defined by "
"``lookup``. Enforces any restrictions on the queryset, such as "
"``allow_empty`` and ``allow_future``."
msgstr ""
"返回使用 ``lookup`` 定义的查询参数过滤的查询集。强制执行对查询集的任何限制，"
"如 ``allow_empty`` 和 ``allow_future``。"

msgid ""
"Returns the aggregation period for ``date_list``. Returns :attr:"
"`~BaseDateListView.date_list_period` by default."
msgstr ""
"返回 ``date_list`` 的聚合周期。默认返回 :attr:`~BaseDateListView."
"date_list_period`。"

msgid ""
"Returns the list of dates of type ``date_type`` for which ``queryset`` "
"contains entries. For example, ``get_date_list(qs, 'year')`` will return the "
"list of years for which ``qs`` has entries. If ``date_type`` isn't provided, "
"the result of :meth:`~BaseDateListView.get_date_list_period` is used. "
"``date_type`` and ``ordering`` are passed to :meth:`QuerySet.dates()<django."
"db.models.query.QuerySet.dates>`."
msgstr ""
"返回 ``date_type`` 类型的日期列表，其中 ``queryset`` 包含条目。例如，"
"``get_date_list(qs, 'year')`` 将返回 ``qs`` 有条目的年份列表。如果没有提供 "
"``date_type``，则使用 :meth:`~BaseDateListView.get_date_list_period` 的结果。"
"``date_type`` 和 ``ordering`` 被传递给 :meth:`QuerySet.dates()<django.db."
"models.query.QuerySet.dates>`。"

msgid "Editing mixins"
msgstr "编辑混入"

msgid "The following mixins are used to construct Django's editing views:"
msgstr "以下混入用于构建 Django 的编辑视图。"

msgid ""
"Examples of how these are combined into editing views can be found at the "
"documentation on :doc:`/ref/class-based-views/generic-editing`."
msgstr ""
"如何将这些视图组合成编辑视图的例子可以在 :doc:`/ref/class-based-views/"
"generic-editing` 的文档中找到。"

msgid "``FormMixin``"
msgstr "``FormMixin``"

msgid ""
"A mixin class that provides facilities for creating and displaying forms."
msgstr "一个提供创建和显示表单的设施的混入类。"

msgid "A dictionary containing initial data for the form."
msgstr "包含表单初始数据的字典。"

msgid "The form class to instantiate."
msgstr "要实例化的表单类。"

msgid "The URL to redirect to when the form is successfully processed."
msgstr "表单处理成功后重定向到的 URL。"

msgid "The :attr:`~django.forms.Form.prefix` for the generated form."
msgstr "生成的表单的 :attr:`~django.forms.Form.prefix`。"

msgid ""
"Retrieve initial data for the form. By default, returns a copy of :attr:"
"`~django.views.generic.edit.FormMixin.initial`."
msgstr ""
"检索表单的初始数据。默认情况下，返回 :attr:`~django.views.generic.edit."
"FormMixin.initial` 的副本。"

msgid ""
"Retrieve the form class to instantiate. By default :attr:`~django.views."
"generic.edit.FormMixin.form_class`."
msgstr ""
"检索要实例化的表单类。默认 :attr:`~django.view.generic.edit.FormMixin."
"form_class`。"

msgid ""
"Instantiate an instance of ``form_class`` using :meth:`~django.views.generic."
"edit.FormMixin.get_form_kwargs`. If ``form_class`` isn't provided :meth:"
"`get_form_class` will be used."
msgstr ""
"使用 :meth:`~django.views.generic.edit.FormMixin.get_form_kwargs` 实例化 "
"``form_class``。如果没有提供 ``form_class``，将使用 :meth:`get_form_class`。"

msgid "Build the keyword arguments required to instantiate the form."
msgstr "构建实例化表单所需的关键字参数。"

msgid ""
"The ``initial`` argument is set to :meth:`.get_initial`. If the request is a "
"``POST`` or ``PUT``, the request data (``request.POST`` and ``request."
"FILES``) will also be provided."
msgstr ""
"``initial` `参数设置为 :meth:`.get_initial`。如果请求是 ``POST`` 或 ``PUT``，"
"还将提供请求数据（``request.POST`` 和 ``request.FILES``）。"

msgid ""
"Determine the :attr:`~django.forms.Form.prefix` for the generated form. "
"Returns :attr:`~django.views.generic.edit.FormMixin.prefix` by default."
msgstr ""
"为生成的表单确定 :attr:`~django.forms.Form.prefix`。默认返回 :attr:`~django."
"views.generic.edit.FormMixin.prefix`。"

msgid ""
"Determine the URL to redirect to when the form is successfully validated. "
"Returns :attr:`~django.views.generic.edit.FormMixin.success_url` by default."
msgstr ""
"当表单成功验证后，确定重定向到的 URL。默认返回 :attr:`~django.views.generic."
"edit.FormMixin.success_url`。"

msgid ""
"Redirects to :meth:`~django.views.generic.edit.FormMixin.get_success_url`."
msgstr ""
"重定向到 :meth:`~django.views.generic.edit.FormMixin.get_success_url`。"

msgid "Renders a response, providing the invalid form as context."
msgstr "渲染一个响应，提供无效的表单作为上下文。"

msgid ""
"Calls :meth:`get_form` and adds the result to the context data with the name "
"'form'."
msgstr "调用 :meth:`get_form` 并将结果添加到名为 'form' 的上下文数据中。"

msgid "``ModelFormMixin``"
msgstr "``ModelFormMixin``"

msgid ""
"A form mixin that works on ``ModelForms``, rather than a standalone form."
msgstr "一个在 ``ModelForms`` 上工作的表单混入，而不是一个独立的表单。"

msgid ""
"Since this is a subclass of :class:`~django.views.generic.detail."
"SingleObjectMixin`, instances of this mixin have access to the :attr:"
"`~django.views.generic.detail.SingleObjectMixin.model` and :attr:`~django."
"views.generic.detail.SingleObjectMixin.queryset` attributes, describing the "
"type of object that the ``ModelForm`` is manipulating."
msgstr ""
"由于这是 :class:`~django.views.generic.detail.SingleObjectMixin` 的一个子类，"
"所以这个混入的实例可以访问 :attr:`~django.views.generic.detail."
"SingleObjectMixin.model` 和 :attr:`~django.views.generic.detail."
"SingleObjectMixin.queryset` 属性，描述 ``ModelForm`` 所操纵的对象类型。"

msgid ""
"If you specify both the :attr:`~django.views.generic.edit.ModelFormMixin."
"fields` and :attr:`~django.views.generic.edit.FormMixin.form_class` "
"attributes, an :exc:`~django.core.exceptions.ImproperlyConfigured` exception "
"will be raised."
msgstr ""
"如果你同时指定了 :attr:`~django.views.generic.edit.ModelFormMixin.fields` "
"和 :attr:`~django.views.generic.edit.FormMixin.form_class` 属性，将引发 :exc:"
"`~django.core.exceptions.ImproperlyConfigured` 异常。"

msgid ""
"A model class. Can be explicitly provided, otherwise will be determined by "
"examining ``self.object`` or :attr:`~django.views.generic.detail."
"SingleObjectMixin.queryset`."
msgstr ""
"一个模型类。可以明确提供，否则将通过检查 ``self.object`` 或 :attr:`~django."
"views.generic.detail.SingleObjectMixin.queryset` 来确定。"

msgid ""
"A list of names of fields. This is interpreted the same way as the ``Meta."
"fields`` attribute of :class:`~django.forms.ModelForm`."
msgstr ""
"字段名的列表。这与 :class:`~django.forms.ModelForm` 的 ``Meta.fields`` 属性的"
"解释方式相同。"

msgid ""
"This is a required attribute if you are generating the form class "
"automatically (e.g. using ``model``). Omitting this attribute will result in "
"an :exc:`~django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""
"如果你是自动生成表单类，这个属性是必须的（比如使用 ``model``）。忽略这个属性"
"将导致 :exc:`~django.core.exceptions.ImproperlyConfigured` 异常。"

msgid ""
"``success_url`` may contain dictionary string formatting, which will be "
"interpolated against the object's field attributes. For example, you could "
"use ``success_url=\"/polls/{slug}/\"`` to redirect to a URL composed out of "
"the ``slug`` field on a model."
msgstr ""
"``success_url`` 可以包含字典字符串格式，它将被插入到对象的字段属性中。例如，"
"你可以使用 ``success_url=\"/polls/{slug}/\"`` 来重定向到一个由模型上的 "
"``slug`` 字段组成的 URL。"

msgid ""
"Retrieve the form class to instantiate. If :attr:`~django.views.generic.edit."
"FormMixin.form_class` is provided, that class will be used. Otherwise, a "
"``ModelForm`` will be instantiated using the model associated with the :attr:"
"`~django.views.generic.detail.SingleObjectMixin.queryset`, or with the :attr:"
"`~django.views.generic.detail.SingleObjectMixin.model`, depending on which "
"attribute is provided."
msgstr ""
"检索要实例化的表单类。如果提供了 :attr:`~django.views.generic.edit.FormMixin."
"form_class`，将使用该类。否则，将使用与 :attr:`~django.views.generic.detail."
"SingleObjectMixin.queryset` 相关联的模型，或与 :attr:`~django.views.generic."
"detail.SingleObjectMixin.model` 实例化，这取决于提供的属性。"

msgid ""
"Add the current instance (``self.object``) to the standard :meth:`~django."
"views.generic.edit.FormMixin.get_form_kwargs`."
msgstr ""
"将当前实例（``self.object``）添加到标准 :meth:`~django.views.generic.edit."
"FormMixin.get_form_kwargs` 中。"

msgid ""
"Determine the URL to redirect to when the form is successfully validated. "
"Returns :attr:`django.views.generic.edit.ModelFormMixin.success_url` if it "
"is provided; otherwise, attempts to use the ``get_absolute_url()`` of the "
"object."
msgstr ""
"当表单成功验证后，确定重定向到的 URL。如果提供了 :attr:`django.views.generic."
"edit.ModelFormMixin.success_url`，则返回 :attr:`django.views.generic.edit."
"ModelFormMixin.success_url`；否则，尝试使用对象的 ``get_absolute_url()``。"

msgid ""
"Saves the form instance, sets the current object for the view, and redirects "
"to :meth:`~django.views.generic.edit.FormMixin.get_success_url`."
msgstr ""
"保存表单实例，为视图设置当前对象，并重定向到 :meth:`~django.views.generic."
"edit.FormMixin.get_success_url`。"

msgid "``ProcessFormView``"
msgstr "``ProcessFormView``"

msgid "A mixin that provides basic HTTP GET and POST workflow."
msgstr "一个提供基本 HTTP GET 和 POST 工作流程的混入。"

msgid ""
"This is named 'ProcessFormView' and inherits directly from :class:`django."
"views.generic.base.View`, but breaks if used independently, so it is more of "
"a mixin."
msgstr ""
"这个命名为 'ProcessFormView'，直接继承自 :class:`django.view.generic.base."
"View`，但如果独立使用就会中断，所以它更像是一个混入。"

msgid "**Extends**"
msgstr "**扩展**"

msgid ""
"Renders a response using a context created with :meth:`~django.views.generic."
"edit.FormMixin.get_context_data`."
msgstr ""
"使用 :meth:`~django.views.generic.edit.FormMixin.get_context_data` 创建的上下"
"文来渲染响应。"

msgid ""
"Constructs a form, checks the form for validity, and handles it accordingly."
msgstr "构造一个表单，检查表单的有效性，并进行相应的处理。"

msgid ""
"The ``PUT`` action is also handled and passes all parameters through to :"
"meth:`post`."
msgstr "``PUT`` 动作也会被处理，并将所有参数传递给 :meth:`post`。"

msgid "``DeletionMixin``"
msgstr "``DeletionMixin``"

msgid "Enables handling of the ``DELETE`` HTTP action."
msgstr "启用对 ``DELETE`` HTTP 动作的处理。"

msgid ""
"The url to redirect to when the nominated object has been successfully "
"deleted."
msgstr "当指定对象被成功删除时，重定向到的网址。"

msgid ""
"``success_url`` may contain dictionary string formatting, which will be "
"interpolated against the object's field attributes. For example, you could "
"use ``success_url=\"/parent/{parent_id}/\"`` to redirect to a URL composed "
"out of the ``parent_id`` field on a model."
msgstr ""
"``success_url`` 可以包含字典字符串格式，它将被插入到对象的字段属性中。例如，"
"你可以使用 ``success_url=\"/parent/{parent_id}/\"`` 重定向到一个模型上由 "
"``parent_id`` 字段组成的 URL。"

msgid ""
"Retrieves the target object and calls its ``delete()`` method, then "
"redirects to the success URL."
msgstr "检索目标对象并调用其 ``delete()`` 方法，然后重定向到成功的 URL。"

msgid ""
"Returns the url to redirect to when the nominated object has been "
"successfully deleted. Returns :attr:`~django.views.generic.edit."
"DeletionMixin.success_url` by default."
msgstr ""
"当指定对象被成功删除时，返回重定向到的 url。默认返回 :attr:`~django.views."
"generic.edit.DeletionMixin.success_url`。"

msgid "Multiple object mixins"
msgstr "多对象混入"

msgid "``MultipleObjectMixin``"
msgstr "``MultipleObjectMixin``"

msgid "A mixin that can be used to display a list of objects."
msgstr "一个可以用来显示对象列表的混入。"

msgid ""
"If ``paginate_by`` is specified, Django will paginate the results returned "
"by this. You can specify the page number in the URL in one of two ways:"
msgstr ""
"如果指定了 ``paginate_by``，Django 会对返回的结果进行分页。你可以用两种方式之"
"一在 URL 中指定页码。"

msgid ""
"Use the ``page`` parameter in the URLconf. For example, this is what your "
"URLconf might look like::"
msgstr "在 URLconf 中使用 ``page`` 参数。例如，你的 URLconf 可能是这样的："

msgid ""
"Pass the page number via the ``page`` query-string parameter. For example, a "
"URL would look like this:"
msgstr ""

msgid ""
"These values and lists are 1-based, not 0-based, so the first page would be "
"represented as page ``1``."
msgstr ""
"这些数值和列表是以 1 为基础的，而不是以 0 为基础的，所以第一页将表示为 ``1`` "
"页。"

msgid ""
"For more on pagination, read the :doc:`pagination documentation </topics/"
"pagination>`."
msgstr "更多关于分页的内容，请阅读 :doc:`分页文档 </topics/pagination>`。"

msgid ""
"As a special case, you are also permitted to use ``last`` as a value for "
"``page``:"
msgstr ""

msgid ""
"This allows you to access the final page of results without first having to "
"determine how many pages there are."
msgstr "这允许你访问结果的最后一页，而不必首先确定有多少页。"

msgid ""
"Note that ``page`` *must* be either a valid page number or the value "
"``last``; any other value for ``page`` will result in a 404 error."
msgstr ""
"请注意，``page`` *必须* 是有效的页码或 ``last`` 值；``page`` 的任何其他值将导"
"致 404 错误。"

msgid ""
"A boolean specifying whether to display the page if no objects are "
"available. If this is ``False`` and no objects are available, the view will "
"raise a 404 instead of displaying an empty page. By default, this is "
"``True``."
msgstr ""
"一个布尔值，用于指定是否在没有对象的情况下显示页面。如果这个值是 ``False``，"
"并且没有可用的对象，视图将提出一个 404，而不是显示一个空的页面。默认情况下，"
"这是 ``True``。"

msgid ""
"The model that this view will display data for. Specifying ``model = Foo`` "
"is effectively the same as specifying ``queryset = Foo.objects.all()``, "
"where ``objects`` stands for ``Foo``’s :ref:`default manager <default-"
"managers>`."
msgstr ""
"该视图将显示数据的模型。指定 ``model = Foo`` 实际上等于指定 ``queryset = Foo."
"objects.all()``，其中 ``objects`` 代表 ``Foo``的 :ref:`默认管理器 <default-"
"managers>`。"

msgid ""
"A ``QuerySet`` that represents the objects. If provided, the value of "
"``queryset`` supersedes the value provided for :attr:`model`."
msgstr ""
"代表对象的 ``QuerySet``。如果提供，``queryset`` 的值将取代为 :attr:`model` 提"
"供的值。"

msgid ""
"``queryset`` is a class attribute with a *mutable* value so care must be "
"taken when using it directly. Before using it, either call its :meth:"
"`~django.db.models.query.QuerySet.all` method or retrieve it with :meth:"
"`get_queryset` which takes care of the cloning behind the scenes."
msgstr ""
"``queryset`` 是一个类属性，它的值是 *可变的*，所以直接使用它时一定要注意。在"
"使用它之前，要么调用它的 :meth:`~django.db.models.query.QuerySet.all` 方法，"
"要么用 :meth:`get_queryset` 检索它，它在幕后负责克隆。"

msgid ""
"A string or list of strings specifying the ordering to apply to the "
"``queryset``. Valid values are the same as those for :meth:`~django.db."
"models.query.QuerySet.order_by`."
msgstr ""
"一个字符串或字符串列表，指定应用于 ``queryset`` 的顺序。有效值与 :meth:"
"`~django.db.models.query.QuerySet.order_by` 的值相同。"

msgid ""
"An integer specifying how many objects should be displayed per page. If this "
"is given, the view will paginate objects with ``paginate_by`` objects per "
"page. The view will expect either a ``page`` query string parameter (via "
"``request.GET``) or a ``page`` variable specified in the URLconf."
msgstr ""
"一个整数，指定每页应显示多少对象。如果给定了这个值，视图将用 ``paginate_by`` "
"对象分页。视图将期待一个 ``page`` 查询字符串参数（通过 ``request.GET``）或一"
"个在 URLconf 中指定的 ``page`` 变量。"

msgid ""
"An integer specifying the number of \"overflow\" objects the last page can "
"contain. This extends the :attr:`paginate_by` limit on the last page by up "
"to ``paginate_orphans``, in order to keep the last page from having a very "
"small number of objects."
msgstr ""
"一个整数，指定最后一页可以包含的”溢出“对象的数量。这扩展了 :attr:"
"`paginate_by` 对最后一页的限制，最多可扩展到 ``paginate_orphans``，以防止最后"
"一页的对象数量非常少。"

msgid ""
"A string specifying the name to use for the page parameter. The view will "
"expect this parameter to be available either as a query string parameter "
"(via ``request.GET``) or as a kwarg variable specified in the URLconf. "
"Defaults to ``page``."
msgstr ""
"一个字符串，用于指定页面参数的名称。视图希望该参数可以作为查询字符串参数（通"
"过 ``request.GET``）或作为 URLconf 中指定的 kwarg 变量。默认为 ``page``。"

msgid ""
"The paginator class to be used for pagination. By default, :class:`django."
"core.paginator.Paginator` is used. If the custom paginator class doesn't "
"have the same constructor interface as :class:`django.core.paginator."
"Paginator`, you will also need to provide an implementation for :meth:"
"`get_paginator`."
msgstr ""
"用于分页的 paginator 类。默认情况下，使用 :class:`django.core.paginator."
"Paginator`。如果自定义的分页器类没有和 :class:`django.core.paginator."
"Paginator` 一样的构造函数接口，你还需要为 :meth:`get_paginator` 提供一个实"
"现。"

msgid "Designates the name of the variable to use in the context."
msgstr "指定在上下文中使用的变量名称。"

msgid ""
"Get the list of items for this view. This must be an iterable and may be a "
"queryset (in which queryset-specific behavior will be enabled)."
msgstr ""
"获取此视图的项目列表。这必须是一个可迭代对象，也可以是一个查询集（查询集特定"
"行为将被启用）。"

msgid ""
"Returns a string (or iterable of strings) that defines the ordering that "
"will be applied to the ``queryset``."
msgstr "返回定义应用于 ``queryset`` 的排序的字符串（或字符串的迭代）。"

msgid "Returns :attr:`ordering` by default."
msgstr "默认返回 :attr:`ordering`。"

msgid ""
"Returns a 4-tuple containing (``paginator``, ``page``, ``object_list``, "
"``is_paginated``)."
msgstr ""
"返回一个包含 (``paginator``, ``page``, ``object_list``, ``is_paginated``) 的"
"四元元组。"

msgid ""
"Constructed by paginating ``queryset`` into pages of size ``page_size``. If "
"the request contains a ``page`` argument, either as a captured URL argument "
"or as a GET argument, ``object_list`` will correspond to the objects from "
"that page."
msgstr ""
"通过将 ``queryset`` 分页成大小为 ``page_size`` 的页面来构建。如果请求中包含一"
"个 ``page`` 参数，无论是作为一个捕获的 URL 参数还是作为一个 GET 参数，"
"``object_list`` 将对应于该页的对象。"

msgid ""
"Returns the number of items to paginate by, or ``None`` for no pagination. "
"By default this returns the value of :attr:`paginate_by`."
msgstr ""
"返回要分页的项目数，如果没有分页，则返回 ``None``。默认情况下，返回 :attr:"
"`paginate_by` 的值。"

msgid ""
"Returns an instance of the paginator to use for this view. By default, "
"instantiates an instance of :attr:`paginator_class`."
msgstr ""
"返回要用于该视图的分页器实例。默认情况下，实例化一个 :attr:`paginator_class` "
"的实例。"

msgid ""
"An integer specifying the number of \"overflow\" objects the last page can "
"contain. By default this returns the value of :attr:`paginate_orphans`."
msgstr ""
"一个整数，指定最后一页可以包含的”溢出“对象的数量。默认情况下，返回 :attr:"
"`paginate_orphans` 的值。"

msgid ""
"Return a boolean specifying whether to display the page if no objects are "
"available. If this method returns ``False`` and no objects are available, "
"the view will raise a 404 instead of displaying an empty page. By default, "
"this is ``True``."
msgstr ""
"返回一个布尔值，指定是否在没有对象的情况下显示页面。如果本方法返回 "
"``False``，并且没有可用的对象，视图将引发 404，而不是显示一个空页面。默认情况"
"下，这个方法是 ``True``。"

msgid ""
"Return the context variable name that will be used to contain the list of "
"data that this view is manipulating. If ``object_list`` is a queryset of "
"Django objects and :attr:`context_object_name` is not set, the context name "
"will be the ``model_name`` of the model that the queryset is composed from, "
"with postfix ``'_list'`` appended. For example, the model ``Article`` would "
"have a context object named ``article_list``."
msgstr ""
"返回上下文变量名，该变量将用于包含该视图正在操作的数据列表。如果 "
"``object_list`` 是一个 Django 对象的查询集，并且 :attr:`context_object_name` "
"没有被设置，那么上下文名称将是该查询集组成的模型的 ``model_name``，并加上后"
"缀 ``'_list'``。例如，模型 ``Article`` 将有一个名为 ``article_list`` 的上下文"
"对象。"

msgid "Returns context data for displaying the list of objects."
msgstr "返回用于显示对象列表的上下文数据。"

msgid ""
"``object_list``: The list of objects that this view is displaying. If "
"``context_object_name`` is specified, that variable will also be set in the "
"context, with the same value as ``object_list``."
msgstr ""
"``object_list``：该视图正在显示的对象列表。如果指定了 "
"``context_object_name``，该变量也将在上下文中设置，其值与 ``object_list`` 相"
"同。"

msgid ""
"``is_paginated``: A boolean representing whether the results are paginated. "
"Specifically, this is set to ``False`` if no page size has been specified, "
"or if the available objects do not span multiple pages."
msgstr ""
"``is_paginated``：一个布尔值，表示结果是否分页。具体来说，如果没有指定页面大"
"小，或者如果可用的对象没有跨越多个页面，则设置为 ``False``。"

msgid ""
"``paginator``: An instance of :class:`django.core.paginator.Paginator`. If "
"the page is not paginated, this context variable will be ``None``."
msgstr ""
"``paginator``：一个 :class:`django.core.paginator.Paginator` 的实例。如果页面"
"没有分页，这个上下文变量将是 ``None``。"

msgid ""
"``page_obj``: An instance of :class:`django.core.paginator.Page`. If the "
"page is not paginated, this context variable will be ``None``."
msgstr ""
"``page_obj``：一个 :class:`django.core.paginator.Page` 的实例。如果页面没有被"
"分页，这个上下文变量将是 ``None``。"

msgid "``MultipleObjectTemplateResponseMixin``"
msgstr "``MultipleObjectTemplateResponseMixin``"

msgid ""
"A mixin class that performs template-based response rendering for views that "
"operate upon a list of object instances. Requires that the view it is mixed "
"with provides ``self.object_list``, the list of object instances that the "
"view is operating on. ``self.object_list`` may be, but is not required to "
"be, a :class:`~django.db.models.query.QuerySet`."
msgstr ""
"一个混入类，为对对象实例列表进行操作的视图执行基于模板的响应渲染。要求与之混"
"入的视图提供 ``self.object_list``，即该视图操作的对象实例列表。``self."
"object_list`` 可以是，但不要求是： :class:`~django.db.models.query."
"QuerySet`。"

msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ":class:`~django.views.generic.base.TemplateResponseMixin`"

msgid ""
"The suffix to append to the auto-generated candidate template name. Default "
"suffix is ``_list``."
msgstr "自动生成的候选模板名称的后缀。默认后缀是 ``_list``。"

msgid "Returns a list of candidate template names. Returns the following list:"
msgstr "返回候选模板名称的列表。返回以下列表："

msgid "the value of ``template_name`` on the view (if provided)"
msgstr "视图中 ``template_name`` 的值（如果提供）"

msgid "``<app_label>/<model_name><template_name_suffix>.html``"
msgstr "``<app_label>/<model_name><template_name_suffix>.html``"

msgid "Simple mixins"
msgstr "简单混入"

msgid "``ContextMixin``"
msgstr "``ContextMixin``"

msgid ""
"A dictionary to include in the context. This is a convenient way of "
"specifying some context in :meth:`~django.views.generic.base.View.as_view`. "
"Example usage::"
msgstr ""
"一个包含在上下文中的字典。这是在 :meth:`~django.view.generic.base.View."
"as_view` 中指定一些上下文的方便方法。使用示例："

msgid ""
"Returns a dictionary representing the template context. The keyword "
"arguments provided will make up the returned context. Example usage::"
msgstr ""
"返回一个代表模板上下文的字典。提供的关键字参数将构成返回的上下文。示例用法："

msgid ""
"The template context of all class-based generic views include a ``view`` "
"variable that points to the ``View`` instance."
msgstr ""
"所有基于类的通用视图的模板上下文包括一个指向 ``View`` 实例的 ``view`` 变量。"

msgid "Use ``alters_data`` where appropriate"
msgstr "酌情使用 ``alters_data``。"

msgid ""
"Note that having the view instance in the template context may expose "
"potentially hazardous methods to template authors.  To prevent methods like "
"this from being called in the template, set ``alters_data=True`` on those "
"methods.  For more information, read the documentation on :ref:`rendering a "
"template context <alters-data-description>`."
msgstr ""
"请注意，在模板上下文中使用视图实例可能会将潜在的危险方法暴露给模板作者。 为了"
"防止这样的方法在模板中被调用，请在这些方法上设置 ``alters_data=True``。 更多"
"信息，请阅读 :ref:`渲染一个模板的上下文 <alters-data-description>` 的文档。"

msgid "``TemplateResponseMixin``"
msgstr "``TemplateResponseMixin``"

msgid ""
"Provides a mechanism to construct a :class:`~django.template.response."
"TemplateResponse`, given suitable context. The template to use is "
"configurable and can be further customized by subclasses."
msgstr ""
"提供一个机制来构造一个 :class:`~django.template.response.TemplateResponse`，"
"给定合适的上下文。使用的模板是可配置的，可以通过子类进一步定制。"

msgid ""
"The full name of a template to use as defined by a string. Not defining a "
"``template_name`` will raise a :class:`django.core.exceptions."
"ImproperlyConfigured` exception."
msgstr ""
"要使用的模板的全称，由一个字符串定义。如果没有定义 ``template_name`` 将引发一"
"个 :class:`django.core.exceptions.ImproperlyConfigured` 异常。"

msgid ""
"The :setting:`NAME <TEMPLATES-NAME>` of a template engine to use for loading "
"the template. ``template_engine`` is passed as the ``using`` keyword "
"argument to ``response_class``. Default is ``None``, which tells Django to "
"search for the template in all configured engines."
msgstr ""
"用于加载模板的模板引擎的 :setting:`NAME <TEMPLATES-NAME>`。"
"``template_engine`` 作为 ``using`` 关键字参数传递给 ``response_class``。默认"
"值是 ``None``，它告诉 Django 在所有配置的引擎中搜索模板。"

msgid ""
"The response class to be returned by ``render_to_response`` method. Default "
"is :class:`TemplateResponse <django.template.response.TemplateResponse>`. "
"The template and context of ``TemplateResponse`` instances can be altered "
"later (e.g. in :ref:`template response middleware <template-response-"
"middleware>`)."
msgstr ""
"``render_to_response`` 方法要返回的响应类，默认为 :class:`TemplateResponse "
"<django.response.TemplateResponse>`。默认为 :class:`TemplateResponse <django."
"template.response.TemplateResponse>`。``TemplateResponse`` 实例的模板和上下文"
"可以在以后进行修改（例如在 :ref:`template response middleware `）。"

msgid ""
"If you need custom template loading or custom context object instantiation, "
"create a ``TemplateResponse`` subclass and assign it to ``response_class``."
msgstr ""
"如果你需要自定义模板加载或自定义上下文对象实例化，请创建一个 "
"``TemplateResponse`` 子类，并将其分配给 ``response_class``。"

msgid ""
"The content type to use for the response. ``content_type`` is passed as a "
"keyword argument to ``response_class``. Default is ``None`` -- meaning that "
"Django uses ``'text/html'``."
msgstr ""
"响应要使用的内容类型。``content_type`` 作为 ``response_class`` 的关键字参数传"
"递。默认值是 ``None``——意味着 Django 使用 ``'text/html'``。"

msgid "Returns a ``self.response_class`` instance."
msgstr "返回一个 ``self.response_class`` 实例。"

msgid ""
"If any keyword arguments are provided, they will be passed to the "
"constructor of the response class."
msgstr "如果提供任何关键字参数，它们将被传递给响应类的构造函数。"

msgid ""
"Calls :meth:`get_template_names()` to obtain the list of template names that "
"will be searched looking for an existent template."
msgstr ""
"调用 :meth:`get_template_names()` 来获取将被搜索的模板名称列表，以寻找存在的"
"模板。"

msgid ""
"Returns a list of template names to search for when rendering the template. "
"The first template that is found will be used."
msgstr "返回渲染模板时要搜索的模板名称列表。找到的第一个模板将被使用。"

msgid ""
"The default implementation will return a list containing :attr:"
"`template_name` (if it is specified)."
msgstr "默认的实现将返回一个包含 :attr:`template_name` 的列表（如果指定了）。"

msgid "Single object mixins"
msgstr "单对象混入"

msgid "``SingleObjectMixin``"
msgstr "``SingleObjectMixin``"

msgid ""
"Provides a mechanism for looking up an object associated with the current "
"HTTP request."
msgstr "提供一个查找与当前 HTTP 请求相关联的对象的机制。"

msgid ""
"The name of the field on the model that contains the slug. By default, "
"``slug_field`` is ``'slug'``."
msgstr "模型上包含 slug 的字段名称。默认情况下，``slug_field`` 是 ``'slug'``。"

msgid ""
"The name of the URLConf keyword argument that contains the slug. By default, "
"``slug_url_kwarg`` is ``'slug'``."
msgstr ""
"包含 slug 的 URLConf 关键字参数的名称。默认情况下，``slug_url_kwarg`` 是 "
"``'slug'``。"

msgid ""
"The name of the URLConf keyword argument that contains the primary key. By "
"default, ``pk_url_kwarg`` is ``'pk'``."
msgstr ""
"包含主键的 URLConf 关键字参数的名称，默认情况下，``pk_url_kwarg`` 是 "
"``'pk'``。"

msgid ""
"If ``True``, causes :meth:`get_object()` to perform its lookup using both "
"the primary key and the slug. Defaults to ``False``."
msgstr ""
"如果 ``True``，使 :meth:`get_object()` 使用主键和 slug 进行查找。默认值为 "
"``False``。"

msgid ""
"This attribute can help mitigate `insecure direct object reference`_ "
"attacks. When applications allow access to individual objects by a "
"sequential primary key, an attacker could brute-force guess all URLs; "
"thereby obtaining a list of all objects in the application. If users with "
"access to individual objects should be prevented from obtaining this list, "
"setting ``query_pk_and_slug`` to ``True`` will help prevent the guessing of "
"URLs as each URL will require two correct, non-sequential arguments. Using a "
"unique slug may serve the same purpose, but this scheme allows you to have "
"non-unique slugs."
msgstr ""
"这个属性可以帮助减轻 `不安全的直接对象引用`_ 攻击。当应用程序允许通过顺序主键"
"访问单个对象时，攻击者可以粗暴地强行猜测所有 URL，从而获得应用程序中所有对象"
"的列表。如果应该阻止访问单个对象的用户获得这个列表，将 ``query_pk_and_slug`` "
"设置为 ``True`` 将有助于防止URL的猜测，因为每个 URL 需要两个正确的、非顺序的"
"参数。使用唯一的 slug 可以达到同样的目的，但是这个方案允许你使用非唯一的 "
"slug。"

msgid ""
"Returns the single object that this view will display. If ``queryset`` is "
"provided, that queryset will be used as the source of objects; otherwise, :"
"meth:`get_queryset` will be used. ``get_object()`` looks for a :attr:"
"`pk_url_kwarg` argument in the arguments to the view; if this argument is "
"found, this method performs a primary-key based lookup using that value. If "
"this argument is not found, it looks for a :attr:`slug_url_kwarg` argument, "
"and performs a slug lookup using the :attr:`slug_field`."
msgstr ""
"返回该视图要显示的单个对象。如果提供了 ``queryset``，将使用该查询集作为对象的"
"来源；否则，将使用 :meth:`get_queryset`。``get_object()`` 在视图的参数中寻找"
"一个 :attr:`pk_url_kwarg` 参数；如果找到这个参数，这个方法就使用这个值执行基"
"于主键的查找。如果没有找到这个参数，则查找 :attr:`slug_url_kwarg` 参数，并使"
"用 :attr:`slug_field `执行 slug 查找。"

msgid ""
"When :attr:`query_pk_and_slug` is ``True``, ``get_object()`` will perform "
"its lookup using both the primary key and the slug."
msgstr ""
"当 :attr:`query_pk_and_slug` 为 ``True`` 时，``get_object()`` 将使用主键和 "
"slug 进行查找。"

msgid ""
"Returns the queryset that will be used to retrieve the object that this view "
"will display. By default, :meth:`get_queryset` returns the value of the :"
"attr:`queryset` attribute if it is set, otherwise it constructs a :class:"
"`~django.db.models.query.QuerySet` by calling the ``all()`` method on the :"
"attr:`model` attribute's default manager."
msgstr ""
"返回用于检索该视图将显示的对象的查询集。默认情况下， :meth:`get_queryset` 返"
"回 :attr:`queryset` 属性的值，如果它被设置，否则它通过调用 :attr:`model` 属性"
"的默认管理器上的 ``all()`` 方法来构造一个 :class:`~django.db.models."
"querySet`。"

msgid ""
"Return the context variable name that will be used to contain the data that "
"this view is manipulating. If :attr:`context_object_name` is not set, the "
"context name will be constructed from the ``model_name`` of the model that "
"the queryset is composed from. For example, the model ``Article`` would have "
"context object named ``'article'``."
msgstr ""
"返回上下文变量名，该变量将用于包含该视图正在操作的数据。如果 :attr:"
"`context_object_name` 没有被设置，上下文名称将由查询集组成的模型的 "
"``model_name`` 构建。例如，模型 ``Article`` 的上下文对象将命名为 "
"``'article'``。"

msgid "Returns context data for displaying the object."
msgstr "返回用于显示对象的上下文数据。"

msgid ""
"The base implementation of this method requires that the ``self.object`` "
"attribute be set by the view (even if ``None``). Be sure to do this if you "
"are using this mixin without one of the built-in views that does so."
msgstr ""
"该方法的基本实现要求视图设置 ``self.object`` 属性（即使 ``None``）。如果你在"
"使用这个混入时没有使用内置视图，请务必这样做。"

msgid "It returns a dictionary with these contents:"
msgstr "它返回一个包含这些内容的字典："

msgid "``object``: The object that this view is displaying (``self.object``)."
msgstr "``object``：该视图显示的对象（``self.object``）。"

msgid ""
"``context_object_name``: ``self.object`` will also be stored under the name "
"returned by :meth:`get_context_object_name`, which defaults to the "
"lowercased version of the model name."
msgstr ""
"``context_object_name``：``self.object`` 也将存储在 :meth:"
"`get_context_object_name` 返回的名称下，默认为模型名称的小写版本。"

msgid "Context variables override values from template context processors"
msgstr "上下文变量覆盖了模板上下文处理程序的值"

msgid ""
"Any variables from :meth:`get_context_data` take precedence over context "
"variables from :ref:`context processors <subclassing-context-"
"requestcontext>`. For example, if your view sets the :attr:`model` attribute "
"to :class:`~django.contrib.auth.models.User`, the default context object "
"name of ``user`` would override the ``user`` variable from the :func:`django."
"contrib.auth.context_processors.auth` context processor. Use :meth:"
"`get_context_object_name` to avoid a clash."
msgstr ""
"任何来自 :meth:`get_context_data` 的变量都优先于来自 :ref:`上下文处理器 "
"<subclassing-context-requestcontext>` 的上下文变量。例如，如果你的视图将 :"
"attr:`model` 属性设置为 :class:`~django.contrib.auth.models.User`，那么默认的"
"上下文对象名 ``user`` 将覆盖 :func:`django.contrib.auth.context_processors."
"auth` 上下文处理器中的 ``user`` 变量。使用 :meth:`get_context_object_name` 来"
"避免冲突。"

msgid ""
"Returns the name of a slug field to be used to look up by slug. By default "
"this returns the value of :attr:`slug_field`."
msgstr ""
"返回一个 slug 字段的名称，用于通过 slug 查找。默认情况下，返回 :attr:"
"`slug_field` 的值。"

msgid "``SingleObjectTemplateResponseMixin``"
msgstr "``SingleObjectTemplateResponseMixin``"

msgid ""
"A mixin class that performs template-based response rendering for views that "
"operate upon a single object instance. Requires that the view it is mixed "
"with provides ``self.object``, the object instance that the view is "
"operating on. ``self.object`` will usually be, but is not required to be, an "
"instance of a Django model. It may be ``None`` if the view is in the process "
"of constructing a new instance."
msgstr ""
"一个混入类，为对单个对象实例进行操作的视图执行基于模板的响应渲染。要求与之混"
"合的视图提供 ``self.object``，即该视图操作的对象实例。``self.object`` 通常"
"是，但不要求是 Django 模型的实例。如果视图正在构建一个新的实例，它可能是 "
"``None``。"

msgid ""
"The field on the current object instance that can be used to determine the "
"name of a candidate template. If either ``template_name_field`` itself or "
"the value of the ``template_name_field`` on the current object instance is "
"``None``, the object will not be used for a candidate template name."
msgstr ""
"当前对象实例上的字段，可用于确定候选模板的名称。如果 ``template_name_field`` "
"本身或当前对象实例上的 ``template_name_field`` 的值为 ``None``，则该对象不会"
"被用于候选模板名称。"

msgid ""
"The suffix to append to the auto-generated candidate template name. Default "
"suffix is ``_detail``."
msgstr "自动生成的候选模板名称的后缀。默认后缀是 ``_detail``。"

msgid ""
"the contents of the ``template_name_field`` field on the object instance "
"that the view is operating upon (if available)"
msgstr ""
"视图操作的对象实例上的 ``template_name_field`` 字段的内容（如果有的话）。"

msgid "Clickjacking Protection"
msgstr "点击劫持保护"

msgid ""
"The clickjacking middleware and decorators provide easy-to-use protection "
"against `clickjacking`_.  This type of attack occurs when a malicious site "
"tricks a user into clicking on a concealed element of another site which "
"they have loaded in a hidden frame or iframe."
msgstr ""
"点击劫持中间件和装饰器提供易于使用的保护，以防止 `点击劫持`_ 。 当恶意网站欺"
"骗用户点击另一个网站的隐藏元素时，就会发生这种类型的攻击，该元素已被加载到一"
"个隐藏的框架或 iframe 中。"

msgid "An example of clickjacking"
msgstr "点击劫持的一个例子"

msgid ""
"Suppose an online store has a page where a logged in user can click \"Buy "
"Now\" to purchase an item. A user has chosen to stay logged into the store "
"all the time for convenience. An attacker site might create an \"I Like "
"Ponies\" button on one of their own pages, and load the store's page in a "
"transparent iframe such that the \"Buy Now\" button is invisibly overlaid on "
"the \"I Like Ponies\" button. If the user visits the attacker's site, "
"clicking \"I Like Ponies\" will cause an inadvertent click on the \"Buy "
"Now\" button and an unknowing purchase of the item."
msgstr ""
"假设一家在线商店有一个页面，登录的用户可以点击“立即购买”来购买商品。用户为了"
"方便，选择了保持登录商店。攻击者网站可能会在自己的一个页面上创建一个“I Like "
"Ponies”按钮，并在一个透明的 iframe 中加载商店的页面，使“立即购买”按钮无形中覆"
"盖在“I Like Ponies”按钮上。如果用户访问攻击者的网站，点击“I Like Ponies”将导"
"致无意中点击“立即购买”按钮，并在不知情的情况下购买该商品。"

msgid "Preventing clickjacking"
msgstr "防止点击劫持"

msgid ""
"Modern browsers honor the `X-Frame-Options`_ HTTP header that indicates "
"whether or not a resource is allowed to load within a frame or iframe. If "
"the response contains the header with a value of ``SAMEORIGIN`` then the "
"browser will only load the resource in a frame if the request originated "
"from the same site. If the header is set to ``DENY`` then the browser will "
"block the resource from loading in a frame no matter which site made the "
"request."
msgstr ""
"现代浏览器尊重 `X-Frame-Options`_ HTTP 头，它表明是否允许在框架或 iframe 中加"
"载资源。如果响应包含值为 ``SAMEORIGIN`` 的头，那么只有当请求来自同一个网站"
"时，浏览器才会在框架中加载资源。如果头被设置为 ``DENY``，那么无论请求是由哪个"
"网站发出的，浏览器都会阻止资源在框架中加载。"

msgid ""
"Django provides a few ways to include this header in responses from your "
"site:"
msgstr "Django 提供了一些方法来在你的网站的响应中包含这个头："

msgid "A middleware that sets the header in all responses."
msgstr "一个在所有响应中设置头的中间件。"

msgid ""
"A set of view decorators that can be used to override the middleware or to "
"only set the header for certain views."
msgstr "一组可用于覆盖中间件或仅为某些视图设置头的视图装饰器。"

msgid ""
"The ``X-Frame-Options`` HTTP header will only be set by the middleware or "
"view decorators if it is not already present in the response."
msgstr ""
"``X-Frame-Options`` HTTP 头只有在响应中还没有出现的情况下，才会被中间件或视图"
"装饰者设置。"

msgid "How to use it"
msgstr "如何使用它"

msgid "Setting ``X-Frame-Options`` for all responses"
msgstr "为所有响应设置 ``X-Frame-Options``"

msgid ""
"To set the same ``X-Frame-Options`` value for all responses in your site, "
"put ``'django.middleware.clickjacking.XFrameOptionsMiddleware'`` to :setting:"
"`MIDDLEWARE`::"
msgstr ""
"要为你的网站的所有响应设置相同的 ``X-FrameOptions`` 值，把 ``'django."
"middleware.clickjacking.XFrameOptionsMiddleware'`` 放到 :setting:"
"`MIDDLEWARE`："

msgid ""
"This middleware is enabled in the settings file generated by :djadmin:"
"`startproject`."
msgstr "这个中间件在 :djadmin:`startproject` 生成的配置文件中启用了。"

msgid ""
"By default, the middleware will set the ``X-Frame-Options`` header to "
"``DENY`` for every outgoing ``HttpResponse``. If you want any other value "
"for this header instead, set the :setting:`X_FRAME_OPTIONS` setting::"
msgstr ""
"默认情况下，中间件将为每个传出的 ``HttpResponse`` 设置 ``X- Frame-Options`` "
"头为 ``DENY``。如果你想为这个头设置任何其他的值，可以设置 :setting:"
"`X_FRAME_OPTIONS` 配置："

msgid ""
"When using the middleware there may be some views where you do **not** want "
"the ``X-Frame-Options`` header set. For those cases, you can use a view "
"decorator that tells the middleware not to set the header::"
msgstr ""
"在使用中间件时，有些视图可能 **不希望** 设置 ``X- Frame-Options`` 头。对于这"
"些情况，你可以使用一个视图装饰器，告诉中间件不要设置头："

msgid ""
"If you want to submit a form or access a session cookie within a frame or "
"iframe, you may need to modify the :setting:`CSRF_COOKIE_SAMESITE` or :"
"setting:`SESSION_COOKIE_SAMESITE` settings."
msgstr ""
"如果你想在框架或 iframe 中提交表单或访问会话 cookie，你可能需要修改 :setting:"
"`CSRF_COOKIE_SAMESITE` 或 :setting:`SESSION_COOKIE_SAMESITE` 配置。"

msgid "Setting ``X-Frame-Options`` per view"
msgstr "为每个视图设置 ``X-Frame-Options``。"

msgid ""
"To set the ``X-Frame-Options`` header on a per view basis, Django provides "
"these decorators::"
msgstr "要在每个视图上设置 ``X-Frame-Options`` 头，Django 提供了这些装饰器："

msgid ""
"Note that you can use the decorators in conjunction with the middleware. Use "
"of a decorator overrides the middleware."
msgstr "请注意，你可以将装饰器与中间件一起使用。使用装饰器可以覆盖中间件。"

msgid "Limitations"
msgstr "限制"

msgid ""
"The ``X-Frame-Options`` header will only protect against clickjacking in a "
"modern browser. Older browsers will quietly ignore the header and need "
"`other clickjacking prevention techniques`_."
msgstr ""
"``X-Frame-Options`` 头只能在现代浏览器中防止点击劫持。旧的浏览器会悄悄地忽略"
"这个头，需要 `其他的防止点击劫持技术`_ 。"

msgid "Browsers that support ``X-Frame-Options``"
msgstr "支持 ``X-Frame-Options`` 的浏览器。"

msgid "Internet Explorer 8+"
msgstr "Internet Explorer 8+"

msgid "Edge"
msgstr "Edge"

msgid "Firefox 3.6.9+"
msgstr "Firefox 3.6.9+"

msgid "Opera 10.5+"
msgstr "Opera 10.5+"

msgid "Safari 4+"
msgstr "Safari 4+"

msgid "Chrome 4.1+"
msgstr "Chrome 4.1+"

msgid "See also"
msgstr "另见"

msgid "A `complete list`_ of browsers supporting ``X-Frame-Options``."
msgstr "支持 ``X-Frame-Options`` 的浏览器的 `完整列表`_ 。"

msgid "Admin actions"
msgstr "管理动作"

msgid ""
"The basic workflow of Django's admin is, in a nutshell, \"select an object, "
"then change it.\" This works well for a majority of use cases. However, if "
"you need to make the same change to many objects at once, this workflow can "
"be quite tedious."
msgstr ""
"Django 的管理员的基本工作流程，简而言之，就是“选择一个对象，然后更改它”。这对"
"于大多数用例来说都很好用。然而，如果你需要同时对许多对象进行相同的更改，这种"
"工作流程可能会相当乏味。"

msgid ""
"In these cases, Django's admin lets you write and register \"actions\" -- "
"functions that get called with a list of objects selected on the change list "
"page."
msgstr ""
"在这种情况下，Django 的管理可以让你编写和注册“动作”——即使用在变更列表页面上选"
"择的对象列表调用的函数。"

msgid ""
"If you look at any change list in the admin, you'll see this feature in "
"action; Django ships with a \"delete selected objects\" action available to "
"all models. For example, here's the user module from Django's built-in :mod:"
"`django.contrib.auth` app:"
msgstr ""
"如果你在管理中查看任何变化列表，你会看到这个功能的作用；Django 自带了一个“删"
"除选定对象”的动作，所有模型都可以使用。例如，这里是 Django 内置的用户模块 :"
"mod:`django.contrib.auth` 应用："

msgid ""
"The \"delete selected objects\" action uses :meth:`QuerySet.delete() <django."
"db.models.query.QuerySet.delete>` for efficiency reasons, which has an "
"important caveat: your model's ``delete()`` method will not be called."
msgstr ""
"“删除选定对象”动作使用 :meth:`QuerySet.delete() <django.db.models.query."
"QuerySet.delete>` 为了提高效率，它有一个重要的注意事项：你的模型的 "
"``delete()`` 方法将不会被调用。"

msgid ""
"If you wish to override this behavior, you can override :meth:`.ModelAdmin."
"delete_queryset` or write a custom action which does deletion in your "
"preferred manner -- for example, by calling ``Model.delete()`` for each of "
"the selected items."
msgstr ""
"如果你想覆盖这个行为，你可以覆盖 :meth:`.ModelAdmin.delete_queryset` 或者写一"
"个自定义的动作，以你喜欢的方式进行删除 -- 例如，通过为每个选定的项目调用 "
"``Model.delete()``。"

msgid ""
"For more background on bulk deletion, see the documentation on :ref:`object "
"deletion <topics-db-queries-delete>`."
msgstr ""
"关于批量删除的更多背景，请参见 :ref:`对象删除 <topics-db-queries-delete>` 的"
"文档。"

msgid "Read on to find out how to add your own actions to this list."
msgstr "请继续阅读，了解如何将自己的动作添加到此列表中。"

msgid "Writing actions"
msgstr "编写动作"

msgid "The easiest way to explain actions is by example, so let's dive in."
msgstr "解释动作的最简单的方法就是举例说明，所以让我们潜心研究。"

msgid ""
"A common use case for admin actions is the bulk updating of a model. Imagine "
"a news application with an ``Article`` model::"
msgstr ""
"管理动作的一个常见用例是模型的批量更新。想象一下，一个新闻应用程序有一个 "
"``Article`` 模型："

msgid ""
"A common task we might perform with a model like this is to update an "
"article's status from \"draft\" to \"published\". We could easily do this in "
"the admin one article at a time, but if we wanted to bulk-publish a group of "
"articles, it'd be tedious. So, let's write an action that lets us change an "
"article's status to \"published.\""
msgstr ""
"我们可能会用这样的模型来执行一个常见的任务，就是将一篇文章的状态从 “草稿” 更"
"新为 “已发布”。我们可以很容易地在管理员中一次只发布一篇文章，但如果我们想批量"
"发布一组文章，就会很繁琐。所以，让我们编写一个动作，让我们可以把一篇文章的状"
"态改为 “已发布”。"

msgid "Writing action functions"
msgstr "编写动作函数"

msgid ""
"First, we'll need to write a function that gets called when the action is "
"triggered from the admin. Action functions are regular functions that take "
"three arguments:"
msgstr ""
"首先，我们需要写一个函数，当管理触发动作时就会被调用。动作函数是常规函数，它"
"有三个参数："

msgid "The current :class:`ModelAdmin`"
msgstr "当前 :class:`ModelAdmin`"

msgid "An :class:`~django.http.HttpRequest` representing the current request,"
msgstr "一个代表当前请求的 :class:`~django.http.HttpRequest`，"

msgid ""
"A :class:`~django.db.models.query.QuerySet` containing the set of objects "
"selected by the user."
msgstr ""
"一个包含用户所选择的对象集合的 :class:`~django.db.models.query.QuerySet`。"

msgid ""
"Our publish-these-articles function won't need the :class:`ModelAdmin` or "
"the request object, but we will use the queryset::"
msgstr ""
"我们的 publish-these-articles 函数不需要 :class:`ModelAdmin` 或请求对象，但我"
"们将使用此查询集："

msgid ""
"For the best performance, we're using the queryset's :ref:`update method "
"<topics-db-queries-update>`. Other types of actions might need to deal with "
"each object individually; in these cases we'd iterate over the queryset::"
msgstr ""
"为了获得最佳性能，我们使用查询集的 :ref:`update 方法 <topics-db-queries-"
"update>`。其他类型的动作可能需要单独处理每个对象；在这种情况下，我们会在查询"
"集上进行迭代："

msgid ""
"That's actually all there is to writing an action! However, we'll take one "
"more optional-but-useful step and give the action a \"nice\" title in the "
"admin. By default, this action would appear in the action list as \"Make "
"published\" -- the function name, with underscores replaced by spaces. "
"That's fine, but we can provide a better, more human-friendly name by using "
"the :func:`~django.contrib.admin.action` decorator on the ``make_published`` "
"function::"
msgstr ""
"其实这就是写一个动作的全部内容了！然而，我们将再采取一个可选的但很有用的步"
"骤，在管理中给这个动作一个 “漂亮” 的标题。默认情况下，这个操作会在操作列表中"
"显示为 “Make published” —— 函数名称，下划线用空格代替。这很好，但我们可以通过"
"在 ``make_published`` 函数上使用 :func:`~django.contrib.admin.action` 装饰器"
"来提供一个更好的、更人性化的名称："

msgid ""
"This might look familiar; the admin's :attr:`~django.contrib.admin."
"ModelAdmin.list_display` option uses a similar technique with the :func:"
"`~django.contrib.admin.display` decorator to provide human-readable "
"descriptions for callback functions registered there, too."
msgstr ""
"这可能看起来很熟悉；管理的 :attr:`~django.contrib.admin.ModelAdmin."
"list_display` 选项与 :func:`~django.contrib.admin.display` 装饰器使用了类似的"
"技术，也为在那里注册的回调函数提供了人类可读的描述。"

msgid "Adding actions to the :class:`ModelAdmin`"
msgstr "在 :class:`ModelAdmin` 中添加动作"

msgid ""
"Next, we'll need to inform our :class:`ModelAdmin` of the action. This works "
"just like any other configuration option. So, the complete ``admin.py`` with "
"the action and its registration would look like::"
msgstr ""
"接下来，我们需要通知我们的 :class:`ModelAdmin` 的动作。这就像其他配置选项一"
"样。因此，完整的 ``admin.py`` 中包含了动作及其注册的内容，看起来是这样的："

msgid ""
"That code will give us an admin change list that looks something like this:"
msgstr "这段代码会给我们一个管理变更列表，看起来像这样："

msgid ""
"That's really all there is to it! If you're itching to write your own "
"actions, you now know enough to get started. The rest of this document "
"covers more advanced techniques."
msgstr ""
"这其实就是全部的内容了！如果你渴望编写自己的动作，你现在已经知道了足够的知"
"识，可以开始了。本文档的其余部分涵盖了更多的高级技术。"

msgid "Handling errors in actions"
msgstr "处理动作中的错误"

msgid ""
"If there are foreseeable error conditions that may occur while running your "
"action, you should gracefully inform the user of the problem. This means "
"handling exceptions and using :meth:`django.contrib.admin.ModelAdmin."
"message_user` to display a user friendly description of the problem in the "
"response."
msgstr ""
"如果在运行你的动作时可能出现可预见的错误情况，你应该优雅地告知用户问题。这意"
"味着处理异常，并使用 :meth:`django.contrib.admin.ModelAdmin.message_user` 在"
"响应中显示一个用户友好的问题描述。"

msgid "Advanced action techniques"
msgstr "进阶动作技巧"

msgid ""
"There's a couple of extra options and possibilities you can exploit for more "
"advanced options."
msgstr "有几个额外的选项和可能性，你可以利用它们实现更高级的选项。"

msgid "Actions as :class:`ModelAdmin` methods"
msgstr "作为 :class:`ModelAdmin` 方法的动作"

msgid ""
"The example above shows the ``make_published`` action defined as a function. "
"That's perfectly fine, but it's not perfect from a code design point of "
"view: since the action is tightly coupled to the ``Article`` object, it "
"makes sense to hook the action to the ``ArticleAdmin`` object itself."
msgstr ""
"上面的例子显示了 ``make_published`` 动作被定义为一个函数。这很好，但从代码设"
"计的角度来看并不完美：由于该动作与 ``Article`` 对象紧密耦合，因此将该动作挂"
"到 ``ArticleAdmin`` 对象本身是合理的。"

msgid "You can do it like this::"
msgstr "你可以这样做："

msgid ""
"Notice first that we've moved ``make_published`` into a method and renamed "
"the ``modeladmin`` parameter to ``self``, and second that we've now put the "
"string ``'make_published'`` in ``actions`` instead of a direct function "
"reference. This tells the :class:`ModelAdmin` to look up the action as a "
"method."
msgstr ""
"请注意，首先我们把 ``make_published`` 移到了一个方法中，并把 ``modeladmin`` "
"参数重命名为 ``self``，其次我们现在把字符串 ``'make_published'`` 放在了 "
"``actions`` 中，而不是直接的函数引用。这就告诉 :class:`ModelAdmin` 把动作作为"
"方法来查找。"

msgid ""
"Defining actions as methods gives the action more idiomatic access to the :"
"class:`ModelAdmin` itself, allowing the action to call any of the methods "
"provided by the admin."
msgstr ""
"将动作定义为方法，让动作对 :class:`ModelAdmin` 本身有更多的习惯用法，允许动作"
"调用管理提供的任何方法。"

msgid ""
"For example, we can use ``self`` to flash a message to the user informing "
"them that the action was successful::"
msgstr "例如，我们可以使用 ``self`` 向用户发送一条消息，通知他们操作成功："

msgid ""
"This make the action match what the admin itself does after successfully "
"performing an action:"
msgstr "这就使得在成功执行一个动作后，该动作与管理本身所做的动作相匹配。"

msgid "Actions that provide intermediate pages"
msgstr "提供中间页的动作"

msgid ""
"By default, after an action is performed the user is redirected back to the "
"original change list page. However, some actions, especially more complex "
"ones, will need to return intermediate pages. For example, the built-in "
"delete action asks for confirmation before deleting the selected objects."
msgstr ""
"默认情况下，在执行完一个操作后，用户会被重定向回原来的变更列表页面。但是，有"
"些操作，尤其是比较复杂的操作，需要返回中间页面。例如，内置的删除操作在删除所"
"选对象之前会要求确认。"

msgid ""
"To provide an intermediary page, return an :class:`~django.http."
"HttpResponse` (or subclass) from your action. For example, you might write "
"an export function that uses Django's :doc:`serialization functions </topics/"
"serialization>` to dump some selected objects as JSON::"
msgstr ""
"要提供一个中间页，从你的操作中返回一个 :class:`~django.http.HttpResponse` "
"（或子类）。例如，你可以写一个导出函数，使用 Django 的 :doc:`序列化函数 </"
"topics/serialization>` 将一些选定的对象转储为 JSON："

msgid ""
"Generally, something like the above isn't considered a great idea. Most of "
"the time, the best practice will be to return an :class:`~django.http."
"HttpResponseRedirect` and redirect the user to a view you've written, "
"passing the list of selected objects in the GET query string. This allows "
"you to provide complex interaction logic on the intermediary pages. For "
"example, if you wanted to provide a more complete export function, you'd "
"want to let the user choose a format, and possibly a list of fields to "
"include in the export. The best thing to do would be to write a small action "
"that redirects to your custom export view::"
msgstr ""
"一般来说，像上面这样的东西并不被认为是一个好主意。大多数时候，最好的做法是返"
"回一个 :class:`~django.http.HttpResponseRedirect`，并将用户重定向到你编写的视"
"图，在 GET 查询字符串中传递所选对象的列表。这样你就可以在中间页面上提供复杂的"
"交互逻辑。例如，如果你想提供一个更完整的导出功能，你会想让用户选择一种格式，"
"也可能是一个要包含在导出中的字段列表。最好的办法是写一个小的动作，重定向到你"
"的自定义导出视图："

msgid ""
"As you can see, the action is rather short; all the complex logic would "
"belong in your export view. This would need to deal with objects of any "
"type, hence the business with the ``ContentType``."
msgstr ""
"正如你所看到的，这个动作相当简短；所有复杂的逻辑都属于你的导出视图。这将需要"
"处理任何类型的对象，因此有 ``ContentType`` 的业务。"

msgid "Writing this view is left as an exercise to the reader."
msgstr "如何编写这个视图，就留给读者去练习。"

msgid "Making actions available site-wide"
msgstr "在整个站点提供动作"

msgid ""
"Some actions are best if they're made available to *any* object in the admin "
"site -- the export action defined above would be a good candidate. You can "
"make an action globally available using :meth:`AdminSite.add_action()`. For "
"example::"
msgstr ""
"有些动作最好是对管理员站点中的 *任何* 对象开放 —— 上面定义的导出动作就是一个"
"很好的选择。你可以使用 :meth:`AdminSite.add_action()` 使一个动作在全局范围内"
"可用。例如："

msgid ""
"This makes the ``export_selected_objects`` action globally available as an "
"action named \"export_selected_objects\". You can explicitly give the action "
"a name -- good if you later want to programmatically :ref:`remove the action "
"<disabling-admin-actions>` -- by passing a second argument to :meth:"
"`AdminSite.add_action()`::"
msgstr ""
"这使得 ``export_selected_objects`` 动作作为一个名为 "
"“export_selected_objects” 的动作在全站范围内可用。你可以通过向 :meth:"
"`AdminSite.add_action()` 传递第二个参数，来明确地给这个动作起一个名字 —— 如果"
"你以后想以编程方式 :ref:`移除此动作 <disabling-admin-actions>`。"

msgid "Disabling actions"
msgstr "禁用动作"

msgid ""
"Sometimes you need to disable certain actions -- especially those :ref:"
"`registered site-wide <adminsite-actions>` -- for particular objects. "
"There's a few ways you can disable actions:"
msgstr ""
"有时你需要针对特定对象禁用某些动作 —— 特别是那些 :ref:`全站点注册的 "
"<adminsite-actions>`。有几种方法可以禁用动作："

msgid "Disabling a site-wide action"
msgstr "禁用全站点动作"

msgid ""
"If you need to disable a :ref:`site-wide action <adminsite-actions>` you can "
"call :meth:`AdminSite.disable_action()`."
msgstr ""
"如果你需要禁用一个 :ref:`全站点动作 <adminsite-actions>` 你可以调用 :meth:"
"`AdminSite.disable_action()`。"

msgid ""
"For example, you can use this method to remove the built-in \"delete "
"selected objects\" action::"
msgstr "例如，你可以使用此方法来删除内置的 “删除选定对象” 动作："

msgid ""
"Once you've done the above, that action will no longer be available site-"
"wide."
msgstr "一旦你完成了上述操作，该动作将不再在全站范围内使用。"

msgid ""
"If, however, you need to reenable a globally-disabled action for one "
"particular model, list it explicitly in your ``ModelAdmin.actions`` list::"
msgstr ""

msgid "Disabling all actions for a particular :class:`ModelAdmin`"
msgstr "禁用特定 :class:`ModelAdmin` 的所有动作"

msgid ""
"If you want *no* bulk actions available for a given :class:`ModelAdmin`, "
"set :attr:`ModelAdmin.actions` to ``None``::"
msgstr ""
"如果你想让给定的 :class:`ModelAdmin` *没有* 批量操作，请将 :attr:`ModelAdmin."
"actions` 设置为 ``None`` ："

msgid ""
"This tells the :class:`ModelAdmin` to not display or allow any actions, "
"including any :ref:`site-wide actions <adminsite-actions>`."
msgstr ""
"这告诉 :class:`ModelAdmin` 不显示或允许任何操作，包括任何 :ref:`全站点动作 "
"<adminsite-actions>`。"

msgid "Conditionally enabling or disabling actions"
msgstr "有条件地启用或禁用动作"

msgid ""
"Finally, you can conditionally enable or disable actions on a per-request "
"(and hence per-user basis) by overriding :meth:`ModelAdmin.get_actions`."
msgstr ""
"最后，你可以通过覆盖 :meth:`ModelAdmin.get_actions` 来有条件地启用或禁用每个"
"请求（也就是每个用户）的动作。"

msgid ""
"This returns a dictionary of actions allowed. The keys are action names, and "
"the values are ``(function, name, short_description)`` tuples."
msgstr ""
"这将返回一个允许动作的字典。键是动作名称，值是 ``(function, name, "
"short_description)`` 元组。"

msgid ""
"For example, if you only want users whose names begin with 'J' to be able to "
"delete objects in bulk::"
msgstr "例如，如果你只想让名字以 “J” 开头的用户能够批量删除对象："

msgid "Setting permissions for actions"
msgstr "设置动作的权限"

msgid ""
"Actions may limit their availability to users with specific permissions by "
"wrapping the action function with the :func:`~django.contrib.admin.action` "
"decorator and passing the ``permissions`` argument::"
msgstr ""
"通过使用 :func:`~django.contrib.admin.action` 装饰器包装动作函数，并传递 "
"``permissions`` 参数：，动作可以限制其对具有特定权限的用户的可用性。"

msgid ""
"The ``make_published()`` action will only be available to users that pass "
"the :meth:`.ModelAdmin.has_change_permission` check."
msgstr ""
"``make_published()`` 行动将只提供给通过 :meth:`.ModelAdmin."
"has_change_permission` 检查的用户。"

msgid ""
"If ``permissions`` has more than one permission, the action will be "
"available as long as the user passes at least one of the checks."
msgstr ""
"如果 ``permissions`` 有一个以上的权限，只要用户至少通过了一项检查，该操作就可"
"以使用。"

msgid ""
"Available values for ``permissions`` and the corresponding method checks are:"
msgstr "``permissions`` 和相应的方法检查的可用值是："

msgid "``'add'``: :meth:`.ModelAdmin.has_add_permission`"
msgstr "``'add'``: :meth:`.ModelAdmin.has_add_permission`"

msgid "``'change'``: :meth:`.ModelAdmin.has_change_permission`"
msgstr "``'change'``: :meth:`.ModelAdmin.has_change_permission`"

msgid "``'delete'``: :meth:`.ModelAdmin.has_delete_permission`"
msgstr "``'delete'``: :meth:`.ModelAdmin.has_delete_permission`"

msgid "``'view'``: :meth:`.ModelAdmin.has_view_permission`"
msgstr "``'view'``: :meth:`.ModelAdmin.has_view_permission`"

msgid ""
"You can specify any other value as long as you implement a corresponding "
"``has_<value>_permission(self, request)`` method on the ``ModelAdmin``."
msgstr ""
"你可以指定任何其他的值，只要你在 ``ModelAdmin`` 上实现一个相应的 "
"``has_<value>_permission(self, request)`` 方法。"

msgid "For example::"
msgstr "例子："

msgid "The ``action`` decorator"
msgstr "``action`` 装饰器"

msgid ""
"This decorator can be used for setting specific attributes on custom action "
"functions that can be used with :attr:`~django.contrib.admin.ModelAdmin."
"actions`::"
msgstr ""
"这个装饰器可以用来设置自定义动作函数的特定属性，可以使用 :attr:`~django."
"contrib.admin.ModelAdmin.actions`  ："

msgid ""
"This is equivalent to setting some attributes (with the original, longer "
"names) on the function directly::"
msgstr "这就相当于直接在函数上设置一些属性（用原来的、较长的名字）："

msgid ""
"Use of this decorator is not compulsory to make an action function, but it "
"can be useful to use it without arguments as a marker in your source to "
"identify the purpose of the function::"
msgstr ""
"使用这个装饰器并不是制作一个动作函数的必要条件，但在你的源码中使用它而不使用"
"参数作为标记来识别函数的目的是很有用的："

msgid "In this case it will add no attributes to the function."
msgstr "在这种情况下，它将不会给函数添加任何属性。"

msgid ""
"Action descriptions are %-formatted and may contain ``'%(verbose_name)s'`` "
"and ``'%(verbose_name_plural)s'`` placeholders, which are replaced, "
"respectively, by the model's :attr:`~django.db.models.Options.verbose_name` "
"and :attr:`~django.db.models.Options.verbose_name_plural`."
msgstr ""

msgid "The Django admin documentation generator"
msgstr "Django 管理文档生成器"

msgid ""
"Django's :mod:`~django.contrib.admindocs` app pulls documentation from the "
"docstrings of models, views, template tags, and template filters for any app "
"in :setting:`INSTALLED_APPS` and makes that documentation available from "
"the :mod:`Django admin <django.contrib.admin>`."
msgstr ""
"Django 的 :mod:`~django.contrib.admindocs` 应用程序从 :setting:"
"`INSTALLED_APPS` 中的任何应用程序的模型、视图、模板标签和模板过滤器的 "
"docstrings 中提取文档，并在 :mod:`Django admin <django.contrib.admin>` 中提供"
"这些文档。"

msgid "Overview"
msgstr "概况"

msgid ""
"To activate the :mod:`~django.contrib.admindocs`, you will need to do the "
"following:"
msgstr "要激活 :mod:`~django.contrib.admindocs`，你需要执行以下操作："

msgid "Add :mod:`django.contrib.admindocs` to your :setting:`INSTALLED_APPS`."
msgstr ""
"将 :mod:`django.contrib.admindocs` 添加到你的 :setting:`INSTALLED_APPS` 中。"

msgid ""
"Add ``path('admin/doc/', include('django.contrib.admindocs.urls'))`` to your "
"``urlpatterns``. Make sure it's included *before* the ``'admin/'`` entry, so "
"that requests to ``/admin/doc/`` don't get handled by the latter entry."
msgstr ""
"将 ``path('admin/doc/', include('django.contrib.admindocs.urls'))`` 加入到你"
"的 ``urlpatterns`` 中。确保它被包含在 ``'admin/'`` 条目之前，这样对 ``/admin/"
"doc/`` 的请求就不会被后者处理。"

msgid "Install the docutils Python module (https://docutils.sourceforge.io/)."
msgstr "安装 docutils Python 模块（https://docutils.sourceforge.io/）。"

msgid ""
"**Optional:** Using the admindocs bookmarklets requires ``django.contrib."
"admindocs.middleware.XViewMiddleware`` to be installed."
msgstr ""
"**可选的：** 使用 admindocs 书签需要安装 ``django.contrib.admindocs."
"middleware.XViewMiddleware``。"

msgid ""
"Once those steps are complete, you can start browsing the documentation by "
"going to your admin interface and clicking the \"Documentation\" link in the "
"upper right of the page."
msgstr ""
"一旦这些步骤完成，你就可以进入你的管理界面，点击页面右上方的“文档”链接，开始"
"浏览文档。"

msgid "Documentation helpers"
msgstr "文件辅助功能"

msgid ""
"The following special markup can be used in your docstrings to easily create "
"hyperlinks to other components:"
msgstr ""
"下面的特殊标记可以在你的 docstrings 中使用，以方便创建超链接到其他组件。"

msgid "Django Component"
msgstr "Django 组件"

msgid "reStructuredText roles"
msgstr "reStructuredText 角色"

msgid "``:model:`app_label.ModelName```"
msgstr "``:model:`app_label.ModelName```"

msgid "Views"
msgstr "视图"

msgid "``:view:`app_label.view_name```"
msgstr "``:view:`app_label.view_name```"

msgid "Template tags"
msgstr "模板标签"

msgid "``:tag:`tagname```"
msgstr "``:tag:`tagname```"

msgid "Template filters"
msgstr "模板过滤器"

msgid "``:filter:`filtername```"
msgstr "``:filter:`filtername```"

msgid "``:template:`path/to/template.html```"
msgstr "``:template:`path/to/template.html```"

msgid "Model reference"
msgstr "模型参考"

msgid ""
"The **models** section of the ``admindocs`` page describes each model in the "
"system along with all the fields, properties, and methods available on it. "
"Relationships to other models appear as hyperlinks. Descriptions are pulled "
"from ``help_text`` attributes on fields or from docstrings on model methods."
msgstr ""
"``admindocs`` 页面的 **模型** 部分描述了系统中的每个模型及其所有字段、属性和"
"可用方法。与其他模型的关系以超链接形式出现。描述来自字段的 ``help_text`` 属性"
"或模型方法的 docstrings。"

msgid "A model with useful documentation might look like this::"
msgstr "一个具有有用文档的模型可能是这样的："

msgid "View reference"
msgstr "视图参考"

msgid ""
"Each URL in your site has a separate entry in the ``admindocs`` page, and "
"clicking on a given URL will show you the corresponding view. Helpful things "
"you can document in your view function docstrings include:"
msgstr ""
"在你的网站中，每个 URL 在 ``admindocs`` 页面中都有一个单独的条目，点击给定的 "
"URL 会显示相应的视图。你可以在视图函数 docstrings 中记录的有用内容包括："

msgid "A short description of what the view does."
msgstr "简要说明该视图的作用。"

msgid ""
"The **context**, or a list of variables available in the view's template."
msgstr "视图模板中的 **上下文**，或可用的变量列表。"

msgid "The name of the template or templates that are used for that view."
msgstr "用于该视图的一个或多个模板的名称。"

msgid "Template tags and filters reference"
msgstr "模板标签和过滤器参考"

msgid ""
"The **tags** and **filters** ``admindocs`` sections describe all the tags "
"and filters that come with Django (in fact, the :ref:`built-in tag reference "
"<ref-templates-builtins-tags>` and :ref:`built-in filter reference <ref-"
"templates-builtins-filters>` documentation come directly from those pages). "
"Any tags or filters that you create or are added by a third-party app will "
"show up in these sections as well."
msgstr ""
"**标签** 和 **过滤器** ``admindocs`` 部分描述了所有 Django 自带的标签和过滤器"
"（事实上， :ref:`内置标签参考 <ref-templates-builtins-tags>` 和 :ref:`内置过"
"滤器参考 <ref-templates-builtins-filters>` 文档直接来自这些页面）。任何你创建"
"的或由第三方应用添加的标签或过滤器也会出现在这些章节中。"

msgid "Template reference"
msgstr "模板参考"

msgid ""
"While ``admindocs`` does not include a place to document templates by "
"themselves, if you use the ``:template:`path/to/template.html``` syntax in a "
"docstring the resulting page will verify the path of that template with "
"Django's :ref:`template loaders <template-loaders>`. This can be a handy way "
"to check if the specified template exists and to show where on the "
"filesystem that template is stored."
msgstr ""
"虽然 ``admindocs`` 并不包含记录模板本身的地方，但如果你在 docstring 中使用 "
"``:template:`path/to/template.html`` 语法，生成的页面会用 Django 的 :ref:`模"
"板加载器 <template-loaders>` 验证模板的路径。这是个很方便的方法来检查指定的模"
"板是否存在，并显示该模板在文件系统中的位置。"

msgid "Included Bookmarklets"
msgstr "包含的书签"

msgid "One bookmarklet is available from the ``admindocs`` page:"
msgstr "在 ``admindocs`` 页面上有一个书签："

msgid "Documentation for this page"
msgstr "关于本页面的文档"

msgid ""
"Jumps you from any page to the documentation for the view that generates "
"that page."
msgstr "从任何页面跳转到生成该页面的视图文档。"

msgid ""
"Using this bookmarklet requires that ``XViewMiddleware`` is installed and "
"that you are logged into the :mod:`Django admin <django.contrib.admin>` as "
"a :class:`~django.contrib.auth.models.User` with :attr:`~django.contrib.auth."
"models.User.is_staff` set to ``True``."
msgstr ""
"使用这个书签需要安装 ``XViewMiddleware``，并且你以一个 :class:`~django."
"contrib.auth.models.User` 的身份登录到 :mod:`Django admin <django.contrib."
"admin>`，并且 :attr:`~django.contrib.auth.models.User.is_staff` 设置为 "
"``True``。"

msgid "``ModelAdmin`` List Filters"
msgstr ""

msgid ""
"``ModelAdmin`` classes can define list filters that appear in the right "
"sidebar of the change list page of the admin, as illustrated in the "
"following screenshot:"
msgstr ""

msgid ""
"To activate per-field filtering, set :attr:`ModelAdmin.list_filter` to a "
"list or tuple of elements, where each element is one of the following types:"
msgstr ""

msgid "A field name."
msgstr ""

msgid "A subclass of ``django.contrib.admin.SimpleListFilter``."
msgstr ""

msgid ""
"A 2-tuple containing a field name and a subclass of ``django.contrib.admin."
"FieldListFilter``."
msgstr ""

msgid ""
"See the examples below for discussion of each of these options for defining "
"``list_filter``."
msgstr ""

msgid "Using a field name"
msgstr ""

msgid ""
"The simplest option is to specify the required field names from your model."
msgstr ""

msgid ""
"Each specified field should be either a ``BooleanField``, ``CharField``, "
"``DateField``, ``DateTimeField``, ``IntegerField``, ``ForeignKey`` or "
"``ManyToManyField``, for example::"
msgstr ""

msgid ""
"Field names in ``list_filter`` can also span relations using the ``__`` "
"lookup, for example::"
msgstr "``list_filter`` 中的字段名也可以使用 ``__`` 查找来跨越关系，例如："

msgid "Using a ``SimpleListFilter``"
msgstr ""

msgid ""
"For custom filtering, you can define your own list filter by subclassing "
"``django.contrib.admin.SimpleListFilter``. You need to provide the ``title`` "
"and ``parameter_name`` attributes, and override the ``lookups`` and "
"``queryset`` methods, e.g.::"
msgstr ""

msgid ""
"As a convenience, the ``HttpRequest`` object is passed to the ``lookups`` "
"and ``queryset`` methods, for example::"
msgstr ""
"为方便起见，``HttpRequest`` 对象被传递给 ``lookups`` 和 ``queryset`` 方法，例"
"如："

msgid ""
"Also as a convenience, the ``ModelAdmin`` object is passed to the "
"``lookups`` method, for example if you want to base the lookups on the "
"available data::"
msgstr ""
"另外，为了方便起见，``ModelAdmin`` 对象被传递给 ``lookups`` 方法，例如，如果"
"你想根据现有数据进行查找："

msgid "Using a field name and an explicit ``FieldListFilter``"
msgstr ""

msgid ""
"Finally, if you wish to specify an explicit filter type to use with a field "
"you may provide a ``list_filter`` item as a 2-tuple, where the first element "
"is a field name and the second element is a class inheriting from ``django."
"contrib.admin.FieldListFilter``, for example::"
msgstr ""

msgid ""
"Here the ``is_staff`` field will use the ``BooleanFieldListFilter``. "
"Specifying only the field name, fields will automatically use the "
"appropriate filter for most cases, but this format allows you to control the "
"filter used."
msgstr ""
"这里\"is_staff\"字段将使用\"BooleanFieldListFilter\"。在大多数情况下，只指定"
"字段名的字段会自动使用适当的过滤器，但这种格式允许您控制所使用的过滤器。"

msgid ""
"The following examples show available filter classes that you need to opt-in "
"to use."
msgstr "下面的示例显示了您需要选择使用的可用过滤器类别。"

msgid ""
"You can limit the choices of a related model to the objects involved in that "
"relation using ``RelatedOnlyFieldListFilter``::"
msgstr ""
"你可以使用 ``RelatedOnlyFieldListFilter`` 将相关模型的选择限制在该关系所涉及"
"的对象上："

msgid ""
"Assuming ``author`` is a ``ForeignKey`` to a ``User`` model, this will limit "
"the ``list_filter`` choices to the users who have written a book, instead of "
"listing all users."
msgstr ""

msgid ""
"You can filter empty values using ``EmptyFieldListFilter``, which can filter "
"on both empty strings and nulls, depending on what the field allows to "
"store::"
msgstr ""
"你可以使用 ``EmptyFieldListFilter`` 来过滤空值，它既可以过滤空字符串也可以过"
"滤空值，这取决于字段允许存储的内容："

msgid ""
"By defining a filter using the ``__in`` lookup, it is possible to filter for "
"any of a group of values. You need to override the ``expected_parameters`` "
"method, and the specify the ``lookup_kwargs`` attribute with the appropriate "
"field name. By default, multiple values in the query string will be "
"separated with commas, but this can be customized via the ``list_separator`` "
"attribute. The following example shows such a filter using the vertical-pipe "
"character as the separator::"
msgstr ""

msgid ""
"The :class:`~django.contrib.contenttypes.fields.GenericForeignKey` field is "
"not supported."
msgstr ""
"不支持 :class:`~django.contrib.contenttypes.field.GenericForeignKey` 字段。"

msgid ""
"List filters typically appear only if the filter has more than one choice. A "
"filter's ``has_output()`` method controls whether or not it appears."
msgstr ""

msgid ""
"It is possible to specify a custom template for rendering a list filter::"
msgstr "可以指定一个自定义模板来呈现列表过滤器："

msgid ""
"See the default template provided by Django (``admin/filter.html``) for a "
"concrete example."
msgstr "具体的例子请看 Django 提供的默认模板（``admin/filter.html``）。"

msgid "The Django admin site"
msgstr "Django 管理站点"

msgid ""
"One of the most powerful parts of Django is the automatic admin interface. "
"It reads metadata from your models to provide a quick, model-centric "
"interface where trusted users can manage content on your site. The admin's "
"recommended use is limited to an organization's internal management tool. "
"It's not intended for building your entire front end around."
msgstr ""
"Django 最强大的部分之一是自动管理界面。它从你的模型中读取元数据，提供一个快速"
"的、以模型为中心的界面，受信任的用户可以管理你网站上的内容。管理的推荐使用范"
"围仅限于一个组织的内部管理工具。它不打算用于围绕你的整个前端构建。"

msgid ""
"The admin has many hooks for customization, but beware of trying to use "
"those hooks exclusively. If you need to provide a more process-centric "
"interface that abstracts away the implementation details of database tables "
"and fields, then it's probably time to write your own views."
msgstr ""
"管理有很多用于定制的钩子，但要注意不要试图专门使用这些钩子。如果你需要提供一"
"个更以流程为中心的接口，抽象掉数据库表和字段的实现细节，那么可能是时候编写自"
"己的视图了。"

msgid ""
"In this document we discuss how to activate, use, and customize Django's "
"admin interface."
msgstr "在本文档中，我们将讨论如何激活、使用和定制 Django 的管理界面。"

msgid ""
"The admin is enabled in the default project template used by :djadmin:"
"`startproject`."
msgstr "在 :djadmin:`startproject` 使用的默认项目模板中启用了管理。"

msgid ""
"If you're not using the default project template, here are the requirements:"
msgstr "如果你没有使用默认的项目模板，这里是要求："

msgid ""
"Add ``'django.contrib.admin'`` and its dependencies - :mod:`django.contrib."
"auth`, :mod:`django.contrib.contenttypes`, :mod:`django.contrib.messages`, "
"and :mod:`django.contrib.sessions` - to your :setting:`INSTALLED_APPS` "
"setting."
msgstr ""
"将 ``'django.contrib.admin'`` 和它的依赖关系 —— :mod:`django.contrib.auth`、:"
"mod:`django.contrib.contenttypes`、:mod:`django.contrib.messages` 和 :mod:"
"`django.contrib.session` 添加到你的 :setting:`INSTALLED_APPS` 配置中。"

msgid ""
"Configure a :class:`~django.template.backends.django.DjangoTemplates` "
"backend in your :setting:`TEMPLATES` setting with ``django.template."
"context_processors.request``, ``django.contrib.auth.context_processors."
"auth``, and ``django.contrib.messages.context_processors.messages`` in the "
"``'context_processors'`` option of :setting:`OPTIONS <TEMPLATES-OPTIONS>`."
msgstr ""
"在你的 :setting:`TEMPLATES` 配置中设置一个在 :setting:`OPTIONS <TEMPLATES-"
"OPTIONS>` 的 ``'context_processors'`` 选项中包含 ``django.template."
"context_processors.request``、``django.contrib.auth.context_processors."
"auth`` 和 ``django.contrib.messages.context_processors.messages`` 的 :class:"
"`~django.template.backends.django.DjangoTemplates` 后端："

msgid ""
"If you've customized the :setting:`MIDDLEWARE` setting, :class:`django."
"contrib.auth.middleware.AuthenticationMiddleware` and :class:`django.contrib."
"messages.middleware.MessageMiddleware` must be included."
msgstr ""
"如果你自定义了 :setting:`MIDDLEWARE` 设置，则必须包含 :class:`django.contrib."
"auth.middleware.AuthenticationMiddleware` 和 :class:`django.contrib.messages."
"middleware.MessageMiddleware`。"

msgid ""
":ref:`Hook the admin's URLs into your URLconf <hooking-adminsite-to-"
"urlconf>`."
msgstr ""
":ref:`把管理的网址挂到你的 URLconf 里 <hooking-adminsite-to-urlconf>`。"

msgid ""
"After you've taken these steps, you'll be able to use the admin site by "
"visiting the URL you hooked it into (``/admin/``, by default)."
msgstr ""
"在你采取了这些步骤之后，你就可以通过访问你挂接的 URL（默认是 ``/admin/``）来"
"使用管理站点。"

msgid ""
"If you need to create a user to login with, use the :djadmin:"
"`createsuperuser` command. By default, logging in to the admin requires that "
"the user has the :attr:`~.User.is_staff` attribute set to ``True``."
msgstr ""
"如果需要创建一个用户来登录，请使用 :djadmin:`createsuperuser` 命令。默认情况"
"下，登录管理需要用户的 :attr:`~.User.is_staff` 属性设置为 ``True``。"

msgid ""
"Finally, determine which of your application's models should be editable in "
"the admin interface. For each of those models, register them with the admin "
"as described in :class:`ModelAdmin`."
msgstr ""
"最后，确定你的应用程序的哪些模型应该在管理界面中是可编辑的。对于这些模型中的"
"每一个，按照 :class:`ModelAdmin` 中的描述，在管理处注册它们。"

msgid "Other topics"
msgstr "其他主题"

msgid ""
"For information about serving the static files (images, JavaScript, and CSS) "
"associated with the admin in production, see :ref:`serving-files`."
msgstr ""
"关于在生产中服务与管理相关的静态文件（图像、JavaScript 和 CSS）的信息，请参"
"见 :ref:`serving-files`。"

msgid "Having problems?  Try :doc:`/faq/admin`."
msgstr "有问题？ 试试 :doc:`/faq/admin`。"

msgid "``ModelAdmin`` objects"
msgstr "``ModelAdmin`` 对象"

msgid ""
"The ``ModelAdmin`` class is the representation of a model in the admin "
"interface. Usually, these are stored in a file named ``admin.py`` in your "
"application. Let's take a look at an example of the ``ModelAdmin``::"
msgstr ""
"``ModelAdmin`` 类是管理界面中模型的表示。通常，这些都存储在你的应用程序中一个"
"名为 ``admin.py`` 的文件中。让我们来看看 ``ModelAdmin`` 的一个例子："

msgid "Do you need a ``ModelAdmin`` object at all?"
msgstr "你是否需要一个 ``ModelAdmin`` 对象？"

msgid ""
"In the preceding example, the ``ModelAdmin`` class doesn't define any custom "
"values (yet). As a result, the default admin interface will be provided. If "
"you are happy with the default admin interface, you don't need to define a "
"``ModelAdmin`` object at all -- you can register the model class without "
"providing a ``ModelAdmin`` description. The preceding example could be "
"simplified to::"
msgstr ""
"在前面的例子中，``ModelAdmin`` 类没有定义任何自定义值（还没有）。因此，将提供"
"默认的管理界面。如果你对默认的管理界面满意，你根本不需要定义一个 "
"``ModelAdmin`` 对象 —— 你可以不提供 ``ModelAdmin`` 描述而注册模型类。前面的例"
"子可以简化为："

msgid "The ``register`` decorator"
msgstr "``register`` 装饰器"

msgid "There is also a decorator for registering your ``ModelAdmin`` classes::"
msgstr "还有一个装饰器用于注册你的 ``ModelAdmin`` 类："

msgid ""
"It's given one or more model classes to register with the ``ModelAdmin``. If "
"you're using a custom :class:`AdminSite`, pass it using the ``site`` keyword "
"argument::"
msgstr ""
"它接受一个或多个模型类，让它在 ``ModelAdmin`` 注册。如果你使用的是自定义的 :"
"class:`AdminSite`，请使用 ``site`` 关键字参数传递它："

msgid ""
"You can't use this decorator if you have to reference your model admin class "
"in its ``__init__()`` method, e.g. ``super(PersonAdmin, self)."
"__init__(*args, **kwargs)``. You can use ``super().__init__(*args, "
"**kwargs)``."
msgstr ""
"如果你必须在你的模型管理类的 ``__init__()`` 方法中引用你的模型管理类，例如 "
"``super(PersonAdmin, self).__init__(*args, **kwargs)``，你就不能使用这个装饰"
"器。你可以使用 ``super().__init__(*args, **kwargs)``。"

msgid "Discovery of admin files"
msgstr "发现管理文件"

msgid ""
"When you put ``'django.contrib.admin'`` in your :setting:`INSTALLED_APPS` "
"setting, Django automatically looks for an ``admin`` module in each "
"application and imports it."
msgstr ""
"当你在 :setting:`INSTALLED_APPS` 配置中放入 ``'django.contrib.admin'`` 时，"
"Django 会自动在每个应用程序中寻找 ``admin`` 模块并导入它。"

msgid ""
"This is the default :class:`~django.apps.AppConfig` class for the admin. It "
"calls :func:`~django.contrib.admin.autodiscover()` when Django starts."
msgstr ""
"这是管理员默认的 :class:`~django.apps.AppConfig` 类。当 Django 启动时，它会调"
"用 :func:`~django.contrib.admin.autodiscover()`。"

msgid ""
"This class works like :class:`~django.contrib.admin.apps.AdminConfig`, "
"except it doesn't call :func:`~django.contrib.admin.autodiscover()`."
msgstr ""
"这个类的工作原理和 :class:`~django.contrib.admin.apps.AdminConfig` 一样，只是"
"没有调用 :func:`~django.contrib.admin.autodiscover()`。"

msgid ""
"A dotted import path to the default admin site's class or to a callable that "
"returns a site instance. Defaults to ``'django.contrib.admin.sites."
"AdminSite'``. See :ref:`overriding-default-admin-site` for usage."
msgstr ""
"一个点分隔的导入路径，用于导入默认的管理站点类，或者导入一个返回站点实例的可"
"调用类。默认为 ``'django.contrib.admin.sites.AdminSite'``。使用方法参见 :ref:"
"`overriding-default-admin-site`。"

msgid ""
"This function attempts to import an ``admin`` module in each installed "
"application. Such modules are expected to register models with the admin."
msgstr ""
"该函数试图在每个已安装的应用程序中导入一个 ``admin`` 模块。这些模块将向管理注"
"册模型。"

msgid ""
"Typically you won't need to call this function directly as :class:`~django."
"contrib.admin.apps.AdminConfig` calls it when Django starts."
msgstr ""
"通常情况下，你不需要直接调用这个函数，因为 :class:`~django.contrib.admin."
"apps.AdminConfig` 会在 Django 启动时调用它。"

msgid ""
"If you are using a custom ``AdminSite``, it is common to import all of the "
"``ModelAdmin`` subclasses into your code and register them to the custom "
"``AdminSite``. In that case, in order to disable auto-discovery, you should "
"put ``'django.contrib.admin.apps.SimpleAdminConfig'`` instead of ``'django."
"contrib.admin'`` in your :setting:`INSTALLED_APPS` setting."
msgstr ""
"如果你使用的是自定义的 ``AdminSite``，通常会将所有的 ``ModelAdmin`` 子类导入"
"到你的代码中，并将它们注册到自定义的 ``AdminSite``。在这种情况下，为了禁止自"
"动发现，你应该在你的 :setting:`INSTALLED_APPS` 配置中加入 ``'django.contrib."
"admin.apps.SimpleAdminConfig'`` 而不是 ``'django.contrib.admin'``。"

msgid "``ModelAdmin`` options"
msgstr "``ModelAdmin`` 选项"

msgid ""
"The ``ModelAdmin`` is very flexible. It has several options for dealing with "
"customizing the interface. All options are defined on the ``ModelAdmin`` "
"subclass::"
msgstr ""
"``ModelAdmin`` 非常灵活。它有几个选项用于处理自定义界面。所有选项都在 "
"``ModelAdmin`` 子类中定义："

msgid ""
"A list of actions to make available on the change list page. See :doc:`/ref/"
"contrib/admin/actions` for details."
msgstr ""
"要在变更列表页上提供的动作列表。详见 :doc:`/ref/contrib/admin/actions`。"

msgid ""
"Controls where on the page the actions bar appears. By default, the admin "
"changelist displays actions at the top of the page (``actions_on_top = True; "
"actions_on_bottom = False``)."
msgstr ""
"控制动作栏在页面的哪个位置出现。默认情况下，管理员更改列表在页面顶部显示动作"
"（``actions_on_top = True; actions_on_bottom = False``）。"

msgid ""
"Controls whether a selection counter is displayed next to the action "
"dropdown. By default, the admin changelist will display it "
"(``actions_selection_counter = True``)."
msgstr ""
"控制是否在动作下拉菜单旁边显示选择计数器。默认情况下，管理员变更列表会显示它"
"（``actions_selection_counter = True``）。"

msgid ""
"Set ``date_hierarchy`` to the name of a ``DateField`` or ``DateTimeField`` "
"in your model, and the change list page will include a date-based drilldown "
"navigation by that field."
msgstr ""
"将 ``date_hierarchy`` 设置为你的模型中 ``DateField`` 或 ``DateTimeField`` 的"
"名称，变化列表页将包括一个基于日期的向下扩展。"

msgid ""
"You can also specify a field on a related model using the ``__`` lookup, for "
"example::"
msgstr "你也可以使用 ``__`` 查找来指定相关模型上的字段，例如："

msgid ""
"This will intelligently populate itself based on available data, e.g. if all "
"the dates are in one month, it'll show the day-level drill-down only."
msgstr ""
"这将根据可用的数据智能地填充自己，例如，如果所有的日期都在一个月内，它将只显"
"示日级的向下扩展。"

msgid ""
"``date_hierarchy`` uses :meth:`QuerySet.datetimes() <django.db.models.query."
"QuerySet.datetimes>` internally. Please refer to its documentation for some "
"caveats when time zone support is enabled (:setting:`USE_TZ = True "
"<USE_TZ>`)."
msgstr ""
"``date_hierarchy`` 内部使用 :meth:`QuerySet.datetimes() <django.db.models."
"query.QuerySet.datetimes>`。当启用时区支持时，请参考它的文档中的一些注意事项"
"（:setting:`USE_TZ = True <USE_TZ>`）。"

msgid ""
"This attribute overrides the default display value for record's fields that "
"are empty (``None``, empty string, etc.). The default value is ``-`` (a "
"dash). For example::"
msgstr ""
"该属性覆盖记录字段为空（``None``、空字符串等）的默认显示值。默认值是 ``-`` "
"（破折号）。例如："

msgid ""
"You can also override ``empty_value_display`` for all admin pages with :attr:"
"`AdminSite.empty_value_display`, or for specific fields like this::"
msgstr ""
"你也可以用 :attr:`AdminSite.empty_value_display` 覆盖所有管理页面的 "
"``empty_value_display``，或者像这样覆盖特定字段："

msgid ""
"This attribute, if given, should be a list of field names to exclude from "
"the form."
msgstr "如果给定了这个属性，那么这个属性应该是一个要从表单中排除的字段名列表。"

msgid "For example, let's consider the following model::"
msgstr "例如，我们考虑以下模型："

msgid ""
"If you want a form for the ``Author`` model that includes only the ``name`` "
"and ``title`` fields, you would specify ``fields`` or ``exclude`` like this::"
msgstr ""
"如果你想让 ``Author`` 模型的表格只包括 ``name`` 和 ``title`` 字段，你可以指"
"定 ``fields`` 或 ``exclude`` ，如："

msgid ""
"Since the Author model only has three fields, ``name``, ``title``, and "
"``birth_date``, the forms resulting from the above declarations will contain "
"exactly the same fields."
msgstr ""
"由于 Author 模型只有三个字段，即 ``name``、``title`` 和 ``birth_date``，因此"
"上述声明所产生的表单将包含完全相同的字段。"

msgid ""
"Use the ``fields`` option to make simple layout changes in the forms on the "
"\"add\" and \"change\" pages such as showing only a subset of available "
"fields, modifying their order, or grouping them into rows. For example, you "
"could define a simpler version of the admin form for the :class:`django."
"contrib.flatpages.models.FlatPage` model as follows::"
msgstr ""
"使用 ``fields`` 选项在 “添加” 和 “更改” 页面的表单中进行简单的布局修改，比如"
"只显示可用字段的子集，修改它们的顺序，或者将它们分成几行。例如，你可以为 :"
"class:`django.contrib.flatpages.models.FlatPage` 模型定义一个更简单的管理表单"
"版本，如下所示："

msgid ""
"In the above example, only the fields ``url``, ``title`` and ``content`` "
"will be displayed, sequentially, in the form. ``fields`` can contain values "
"defined in :attr:`ModelAdmin.readonly_fields` to be displayed as read-only."
msgstr ""
"在上面的例子中，只有 ``url``、``title`` 和 ``content`` 等字段会依次显示。"
"``fields`` 可以包含 :attr:`ModelAdmin.readonly_fields` 中定义的值，以只读方式"
"显示。"

msgid ""
"For more complex layout needs, see the :attr:`~ModelAdmin.fieldsets` option."
msgstr "对于更复杂的布局需求，请参阅 :attr:`~ModelAdmin.fieldets` 选项。"

msgid ""
"The ``fields`` option accepts the same types of values as :attr:`~ModelAdmin."
"list_display`, except that callables aren't accepted. Names of model and "
"model admin methods will only be used if they're listed in :attr:"
"`~ModelAdmin.readonly_fields`."
msgstr ""
"``fields`` 选项接受与 :attr:`~ModelAdmin.list_display` 相同类型的值，只是不接"
"受作为可调用对象的值。模型和模型管理方法的名称只有在 :attr:`~ModelAdmin."
"readonly_fields` 中列出时才会被使用。"

msgid ""
"To display multiple fields on the same line, wrap those fields in their own "
"tuple. In this example, the ``url`` and ``title`` fields will display on the "
"same line and the ``content`` field will be displayed below them on its own "
"line::"
msgstr ""
"要在同一行显示多个字段，将这些字段包在自己的元组中。在这个例子中，``url`` 和 "
"``title`` 字段将显示在同一行，``content`` 字段将显示在它们下面的一行："

msgid "Possible confusion with the ``ModelAdmin.fieldsets`` option"
msgstr ""

msgid ""
"This ``fields`` option should not be confused with the ``fields`` dictionary "
"key that is within the :attr:`~ModelAdmin.fieldsets` option, as described in "
"the next section."
msgstr ""
"这个 ``fields`` 选项不应与 :attr:`~ModelAdmin.fieldsets` 选项中的 ``fields`` "
"字典键混淆，下一节将介绍。"

msgid ""
"If neither ``fields`` nor :attr:`~ModelAdmin.fieldsets` options are present, "
"Django will default to displaying each field that isn't an ``AutoField`` and "
"has ``editable=True``, in a single fieldset, in the same order as the fields "
"are defined in the model."
msgstr ""
"如果 ``fields`` 或 :attr:`~ModelAdmin.fieldsets` 选项都不存在，Django 将默认"
"在一个单一的字段集中显示每个非 ``AutoField`` 且有 ``editable=True`` 的字段，"
"顺序与模型中定义的字段相同。"

msgid ""
"Set ``fieldsets`` to control the layout of admin \"add\" and \"change\" "
"pages."
msgstr "设置 ``fieldsets`` 来控制管理员 “添加” 和 “更改” 页面的布局。"

msgid ""
"``fieldsets`` is a list of two-tuples, in which each two-tuple represents a "
"``<fieldset>`` on the admin form page. (A ``<fieldset>`` is a \"section\" of "
"the form.)"
msgstr ""
"``fieldsets`` 是一个由两个元组组成的列表，其中每个元组代表管理表单页面上的一"
"个 ``<fieldset>``。（一个 ``<fieldset>`` 是表单的一个 “部分”。)"

msgid ""
"The two-tuples are in the format ``(name, field_options)``, where ``name`` "
"is a string representing the title of the fieldset and ``field_options`` is "
"a dictionary of information about the fieldset, including a list of fields "
"to be displayed in it."
msgstr ""
"这两个元组的格式是 ``(name, field_options)``，其中 ``name`` 是代表字段集标题"
"的字符串，``field_options`` 是关于字段集的信息字典，包括要在其中显示的字段列"
"表。"

msgid ""
"A full example, taken from the :class:`django.contrib.flatpages.models."
"FlatPage` model::"
msgstr ""
"一个完整的例子，取自 :class:`django.contrib.flatpages.models.FlatPage` 模型："

msgid "This results in an admin page that looks like:"
msgstr "这样一来，管理页面就变成了这样："

msgid ""
"If neither ``fieldsets`` nor :attr:`~ModelAdmin.fields` options are present, "
"Django will default to displaying each field that isn't an ``AutoField`` and "
"has ``editable=True``, in a single fieldset, in the same order as the fields "
"are defined in the model."
msgstr ""
"如果 ``fieldsets`` 或 :attr:`~ModelAdmin.fields` 选项都不存在，Django 将默认"
"在一个单一的表单集中显示每个非 ``AutoField`` 且有 ``editable=True`` 的字段，"
"顺序与模型中定义的字段相同。"

msgid "The ``field_options`` dictionary can have the following keys:"
msgstr "``field_options`` 字典可以有以下键："

msgid "``fields``"
msgstr "``fields``"

msgid ""
"A list or tuple of field names to display in this fieldset. This key is "
"required."
msgstr ""

msgid ""
"As with the :attr:`~ModelAdmin.fields` option, to display multiple fields on "
"the same line, wrap those fields in their own tuple. In this example, the "
"``first_name`` and ``last_name`` fields will display on the same line::"
msgstr ""
"与 :attr:`~ModelAdmin.fields` 选项一样，要在同一行显示多个字段，请将这些字段"
"封装在自己的元组中。在这个例子中，``first_name`` 和 ``last_name`` 字段将显示"
"在同一行："

msgid ""
"``fields`` can contain values defined in :attr:`~ModelAdmin.readonly_fields` "
"to be displayed as read-only."
msgstr ""
"``fields`` 可以包含 :attr:`~ModelAdmin.readonly_fields` 中定义的值，以只读方"
"式显示。"

msgid ""
"If you add the name of a callable to ``fields``, the same rule applies as "
"with the :attr:`~ModelAdmin.fields` option: the callable must be listed in :"
"attr:`~ModelAdmin.readonly_fields`."
msgstr ""
"如果你将可调用的名称添加到 ``fields`` 中，与 :attr:`~ModelAdmin.fields` 选项"
"的规则相同：可调用的名称必须列在 :attr:`~ModelAdmin.readonly_fields` 中。"

msgid "``classes``"
msgstr "``classes``"

msgid "A list or tuple containing extra CSS classes to apply to the fieldset."
msgstr "一个包含额外 CSS 类的列表或元组，用于应用到字段集。"

msgid ""
"Two useful classes defined by the default admin site stylesheet are "
"``collapse`` and ``wide``. Fieldsets with the ``collapse`` style will be "
"initially collapsed in the admin and replaced with a small \"click to "
"expand\" link. Fieldsets with the ``wide`` style will be given extra "
"horizontal space."
msgstr ""
"默认的管理网站样式表定义的两个有用的类是 ``collapse`` 和 ``wide``。"
"``collapse`` 风格的字段集将在管理中被初始折叠，并被一个小的 “点击展开” 链接所"
"取代；``wide`` 风格的字段集将被赋予额外的水平空间。``wide`` 风格的字段集将获"
"得额外的水平空间。"

msgid "``description``"
msgstr "``description``"

msgid ""
"A string of optional extra text to be displayed at the top of each fieldset, "
"under the heading of the fieldset. This string is not rendered for :class:"
"`~django.contrib.admin.TabularInline` due to its layout."
msgstr ""
"一串可选的额外文本，显示在每个字段集的顶部，在字段集的标题下。这个字符串在 :"
"class:`~django.contrib.admin.TabularInline` 中由于其布局的原因而无法显示。"

msgid ""
"Note that this value is *not* HTML-escaped when it's displayed in the admin "
"interface. This lets you include HTML if you so desire. Alternatively you "
"can use plain text and :func:`django.utils.html.escape` to escape any HTML "
"special characters."
msgstr ""
"请注意，当这个值在管理界面显示时，它不是 *HTML 转义后的*。如果你愿意的话，这"
"可以让你包含 HTML。或者你可以使用纯文本和 :func:`django.utils.html.escape` 来"
"转义任何 HTML 特殊字符。"

msgid ""
"By default, a :class:`~django.db.models.ManyToManyField` is displayed in the "
"admin site with a ``<select multiple>``. However, multiple-select boxes can "
"be difficult to use when selecting many items. Adding a :class:`~django.db."
"models.ManyToManyField` to this list will instead use a nifty unobtrusive "
"JavaScript \"filter\" interface that allows searching within the options. "
"The unselected and selected options appear in two boxes side by side. See :"
"attr:`~ModelAdmin.filter_vertical` to use a vertical interface."
msgstr ""
"默认情况下，在管理网站中显示一个 :class:`~django.db.models.ManyToManyField` "
"是 ``<select multiple>``。但是，多选框在选择很多项目时，会很难用。在这个列表"
"中添加一个 :class:`~django.db.models.ManyToManyField`，就可以改用一个不显眼"
"的 JavaScript “过滤器” 界面，在选项中进行搜索。未选择和选择的选项并排出现在两"
"个框中。参见 :attr:`~ModelAdmin.filter_vertical` 来使用垂直界面。"

msgid ""
"Same as :attr:`~ModelAdmin.filter_horizontal`, but uses a vertical display "
"of the filter interface with the box of unselected options appearing above "
"the box of selected options."
msgstr ""
"与 :attr:`~ModelAdmin.filter_horizontal` 相同，但使用垂直显示过滤界面，未选择"
"的选项框出现在选择选项框的上方。"

msgid ""
"By default a ``ModelForm`` is dynamically created for your model. It is used "
"to create the form presented on both the add/change pages. You can easily "
"provide your own ``ModelForm`` to override any default form behavior on the "
"add/change pages. Alternatively, you can customize the default form rather "
"than specifying an entirely new one by using the :meth:`ModelAdmin.get_form` "
"method."
msgstr ""
"默认情况下，会为你的模型动态创建一个 ``ModelForm``。它用于创建在添加／更改页"
"面上显示的表单。你可以很容易地提供你自己的 ``ModelForm`` 来覆盖添加／更改页面"
"上的任何默认表单行为。另外，你可以使用 :meth:`ModelAdmin.get_form` 方法来定制"
"默认的表单，而不是指定一个全新的表单。"

msgid "For an example see the section :ref:`admin-custom-validation`."
msgstr "示例请参见 :ref:`admin-custom-validation` 一节。"

msgid "Omit the ``Meta.model`` attribute"
msgstr ""

msgid ""
"If you define the ``Meta.model`` attribute on a :class:`~django.forms."
"ModelForm`, you must also define the ``Meta.fields`` attribute (or the "
"``Meta.exclude`` attribute). However, since the admin has its own way of "
"defining fields, the ``Meta.fields`` attribute will be ignored."
msgstr ""
"如果你在 :class:`~django.forms.ModelForm` 上定义了 ``Meta.model`` 属性，你也"
"必须定义 ``Meta.fields`` 属性（或 ``Meta.exclude`` 属性）。但是，由于管理有自"
"己定义字段的方式，所以 ``Meta.field`` 属性将被忽略。"

msgid ""
"If the ``ModelForm`` is only going to be used for the admin, the easiest "
"solution is to omit the ``Meta.model`` attribute, since ``ModelAdmin`` will "
"provide the correct model to use. Alternatively, you can set ``fields = []`` "
"in the ``Meta`` class to satisfy the validation on the ``ModelForm``."
msgstr ""
"如果 ``ModelForm`` 只用于管理，最简单的解决办法是省略 ``Meta.model`` 属性，因"
"为 ``ModelAdmin`` 将提供正确的模型。或者，你可以在 ``Meta`` 类中设置 "
"``fields = []`` 以满足 ``ModelForm`` 的验证。"

msgid "``ModelAdmin.exclude`` takes precedence"
msgstr ""

msgid ""
"If your ``ModelForm`` and ``ModelAdmin`` both define an ``exclude`` option "
"then ``ModelAdmin`` takes precedence::"
msgstr ""
"如果你的 ``ModelForm`` 和 ``ModelAdmin`` 都定义了 ``exclude`` 选项，那么 "
"``ModelAdmin`` 优先："

msgid ""
"In the above example, the \"age\" field will be excluded but the \"name\" "
"field will be included in the generated form."
msgstr ""
"在上面的例子中，“年龄” 字段将被排除，但 “姓名” 字段将被包含在生成的表单中。"

msgid ""
"This provides a quick-and-dirty way to override some of the :class:`~django."
"forms.Field` options for use in the admin. ``formfield_overrides`` is a "
"dictionary mapping a field class to a dict of arguments to pass to the field "
"at construction time."
msgstr ""
"这提供了一个快速而简单的方法来覆盖一些 :class:`~django.forms.Field` 选项，以"
"便在管理中使用。``formfield_overrides`` 是一个字典，它将字段类映射成一个参数"
"的字典，以便在构造时传递给字段。"

msgid ""
"Since that's a bit abstract, let's look at a concrete example. The most "
"common use of ``formfield_overrides`` is to add a custom widget for a "
"certain type of field. So, imagine we've written a ``RichTextEditorWidget`` "
"that we'd like to use for large text fields instead of the default "
"``<textarea>``. Here's how we'd do that::"
msgstr ""
"由于这有点抽象，我们来看一个具体的例子。``formfield_overrides`` 最常见的用法"
"是为某一类型的字段添加一个自定义部件。所以，想象一下，我们写了一个 "
"``RichTextEditorWidget``，我们想用于大文本字段，而不是默认的 ``<textarea>``。"
"下面是我们要做的："

msgid ""
"Note that the key in the dictionary is the actual field class, *not* a "
"string. The value is another dictionary; these arguments will be passed to "
"the form field's ``__init__()`` method. See :doc:`/ref/forms/api` for "
"details."
msgstr ""
"注意，字典中的键是实际的字段类，*不是* 字符串。值是另一个字典；这些参数将被传"
"递给表单字段的 ``__init__()`` 方法。详见 :doc:`/ref/forms/api`。"

msgid ""
"If you want to use a custom widget with a relation field (i.e. :class:"
"`~django.db.models.ForeignKey` or :class:`~django.db.models."
"ManyToManyField`), make sure you haven't included that field's name in "
"``raw_id_fields``, ``radio_fields``, or ``autocomplete_fields``."
msgstr ""
"如果你想使用一个带有关系字段的自定义部件（例如 :class:`~django.db.models."
"ForeignKey` 或 :class:`~django.db.models.ManyToManyField`），确保你没有在 "
"``raw_id_fields``、``radio_fields`` 或 ``autocomplete_fields`` 中包含该字段的"
"名称。"

msgid ""
"``formfield_overrides`` won't let you change the widget on relation fields "
"that have ``raw_id_fields``, ``radio_fields``, or ``autocomplete_fields`` "
"set. That's because ``raw_id_fields``, ``radio_fields``, and "
"``autocomplete_fields`` imply custom widgets of their own."
msgstr ""
"``formfield_overrides`` 不会让你改变有 ``raw_id_fields``、``radio_fields`` "
"或 ``autocomplete_fields`` 设置的关系字段上的部件。这是因为 "
"``raw_id_fields``、``radio_fields`` 和 ``autocomplete_fields`` 意味着自己的自"
"定义部件。"

msgid ""
"See :class:`InlineModelAdmin` objects below as well as :meth:`ModelAdmin."
"get_formsets_with_inlines`."
msgstr ""
"参见下面的 :class:`InlineModelAdmin` 对象以及 :meth:`ModelAdmin."
"get_formsets_with_inlines`。"

msgid ""
"Set ``list_display`` to control which fields are displayed on the change "
"list page of the admin."
msgstr "设置 ``list_display`` 来控制哪些字段显示在管理的变更列表页面。"

msgid ""
"If you don't set ``list_display``, the admin site will display a single "
"column that displays the ``__str__()`` representation of each object."
msgstr ""
"如果你不设置 ``list_display``，管理网站将显示一个单列，显示每个对象的 "
"``__str__()`` 表示。"

msgid ""
"There are four types of values that can be used in ``list_display``. All but "
"the simplest may use the  :func:`~django.contrib.admin.display` decorator, "
"which is used to customize how the field is presented:"
msgstr ""

msgid "The name of a model field. For example::"
msgstr "模型字段的名称。例如："

msgid "A callable that accepts one argument, the model instance. For example::"
msgstr "一个接受一个参数的可调用对象，即模型实例。例如："

msgid ""
"A string representing a ``ModelAdmin`` method that accepts one argument, the "
"model instance. For example::"
msgstr ""
"表示 ``ModelAdmin`` 方法的字符串，该方法接受一个参数，即模型实例。例如："

msgid ""
"A string representing a model attribute or method (without any required "
"arguments). For example::"
msgstr "代表模型属性或方法的字符串（没有任何必要的参数）。例如："

msgid "A few special cases to note about ``list_display``:"
msgstr "关于 ``list_display`` 要注意的几个特殊情况："

msgid ""
"If the field is a ``ForeignKey``, Django will display the ``__str__()`` of "
"the related object."
msgstr "如果字段是 ``ForeignKey``，Django 会显示相关对象的 ``__str__()``。"

msgid ""
"``ManyToManyField`` fields aren't supported, because that would entail "
"executing a separate SQL statement for each row in the table. If you want to "
"do this nonetheless, give your model a custom method, and add that method's "
"name to ``list_display``. (See below for more on custom methods in "
"``list_display``.)"
msgstr ""
"``ManyToManyField`` 字段不被支持，因为这需要为表中的每一行单独执行一条 SQL 语"
"句。如果你还是想这样做，请给你的模型一个自定义方法，并将该方法的名称添加到 "
"``list_display`` 中。（更多关于 ``list_display`` 中的自定义方法，请参见下"
"文）。"

msgid ""
"If the field is a ``BooleanField``, Django will display a pretty \"yes\", "
"\"no\", or \"unknown\" icon instead of ``True``, ``False``, or ``None``."
msgstr ""
"如果字段是 ``BooleanField``，Django 会显示一个漂亮的 “是”、“否” 或 “未知” 图"
"标，而不是 ``True``、``False`` 或 ``None``。"

msgid ""
"If the string given is a method of the model, ``ModelAdmin`` or a callable, "
"Django will HTML-escape the output by default. To escape user input and "
"allow your own unescaped tags, use :func:`~django.utils.html.format_html`."
msgstr ""
"如果给定的字符串是模型的一个方法，``ModelAdmin`` 或者是一个可调用的方法，"
"Django 默认会对输出进行 HTML 转义。如果要转义用户的输入，并允许你自己使用未转"
"义的标签，可以使用 :func:`~django.utils.html.format_html`。"

msgid "Here's a full example model::"
msgstr "下面是一个完整的示例模型："

msgid ""
"As some examples have already demonstrated, when using a callable, a model "
"method, or a ``ModelAdmin`` method, you can customize the column's title by "
"wrapping the callable with the :func:`~django.contrib.admin.display` "
"decorator and passing the ``description`` argument."
msgstr ""
"正如一些例子已经证明的那样，当使用一个可调用对象、一个模型方法或一个 "
"``ModelAdmin`` 方法时，你可以通过用 :func:`~django.contrib.admin.display` 装"
"饰器包装可调用对象，并传递 ``description`` 参数来自定义列的标题。"

msgid ""
"If the value of a field is ``None``, an empty string, or an iterable without "
"elements, Django will display ``-`` (a dash). You can override this with :"
"attr:`AdminSite.empty_value_display`::"
msgstr ""
"如果一个字段的值是 ``None``，一个空字符串，或者一个没有元素的可迭代字段，"
"Django 将显示 ``-`` （破折号）。你可以用 :attr:`AdminSite."
"empty_value_display` 来覆盖这一点："

msgid "You can also use :attr:`ModelAdmin.empty_value_display`::"
msgstr "你也可以使用 :attr:`ModelAdmin.empty_value_display` ："

msgid "Or on a field level::"
msgstr "或在字段级别："

msgid ""
"If the string given is a method of the model, ``ModelAdmin`` or a callable "
"that returns ``True``, ``False``, or ``None``, Django will display a pretty "
"\"yes\", \"no\", or \"unknown\" icon if you wrap the method with the :func:"
"`~django.contrib.admin.display` decorator passing the ``boolean`` argument "
"with the value set to ``True``::"
msgstr ""
"如果给定的字符串是模型的一个方法，``ModelAdmin`` 或一个返回 ``True``、"
"``False`` 或 ``None`` 的可调用对象，如果你用 :func:`~django.contrib.admin."
"display` 装饰器包装该方法，传递 ``boolean`` 参数，并将其值设置为 ``True`` ："

msgid ""
"The ``__str__()`` method is just as valid in ``list_display`` as any other "
"model method, so it's perfectly OK to do this::"
msgstr ""
"``__str__()`` 方法在 ``list_display`` 中和其他模型方法一样有效，所以完全可以"
"这样做："

msgid ""
"Usually, elements of ``list_display`` that aren't actual database fields "
"can't be used in sorting (because Django does all the sorting at the "
"database level)."
msgstr ""
"通常情况下，``list_display`` 的元素如果不是实际的数据库字段，就不能用于排序"
"（因为 Django 在数据库层面进行了所有的排序）。"

msgid ""
"However, if an element of ``list_display`` represents a certain database "
"field, you can indicate this fact by using the :func:`~django.contrib.admin."
"display` decorator on the method, passing the ``ordering`` argument::"
msgstr ""
"但是，如果 ``list_display`` 的元素代表某个数据库字段，你可以通过在方法上使"
"用 :func:`~django.contrib.admin.display` 装饰器，传递 ``ordering`` 参数来表明"
"这个事实："

msgid ""
"The above will tell Django to order by the ``first_name`` field when trying "
"to sort by ``colored_first_name`` in the admin."
msgstr ""
"上面会告诉 Django 在管理中按 ``colored_first_name`` 排序时，按 "
"``first_name`` 字段排序。"

msgid ""
"To indicate descending order with the ``ordering`` argument you can use a "
"hyphen prefix on the field name. Using the above example, this would look "
"like::"
msgstr ""
"要用 ``ordering`` 参数表示降序，可以在字段名上使用连字符前缀。使用上面的例"
"子，它看起来像："

msgid ""
"The ``ordering`` argument supports query lookups to sort by values on "
"related models. This example includes an \"author first name\" column in the "
"list display and allows sorting it by first name::"
msgstr ""
"``ordering`` 参数支持查询查找，在相关模型上按值排序。这个例子在列表显示中包含"
"了一个 “作者的姓” 列，并允许按姓排序："

msgid ""
":doc:`Query expressions </ref/models/expressions>` may be used with the "
"``ordering`` argument::"
msgstr ""
":doc:`查询表达式 </ref/models/expressions>` 可与 ``ordering`` 参数一起使用："

msgid "Elements of ``list_display`` can also be properties ::"
msgstr ""

msgid ""
"Note that ``@property`` must be above ``@display``. If you're using the old "
"way -- setting the display-related attributes directly rather than using "
"the :func:`~django.contrib.admin.display` decorator --  be aware that the "
"``property()`` function and **not** the ``@property`` decorator must be "
"used::"
msgstr ""
"注意 ``@property`` 必须在 ``@display`` 之上。如果你使用老方法 —— 直接设置与 "
"display 相关的属性，而不是使用 :func:`~django.contrib.admin.display` 装饰器 "
"—— 请注意，必须使用 ``property()`` 函数，而 **不是** ``@property`` 装饰器："

msgid ""
"The field names in ``list_display`` will also appear as CSS classes in the "
"HTML output, in the form of ``column-<field_name>`` on each ``<th>`` "
"element. This can be used to set column widths in a CSS file for example."
msgstr ""
"``list_display`` 中的字段名也会以 CSS 类的形式出现在 HTML 输出中，在每个 "
"``<th>`` 元素上以 ``column-<field_name>`` 的形式出现。例如，这可以用来在 CSS "
"文件中设置列宽。"

msgid ""
"Django will try to interpret every element of ``list_display`` in this order:"
msgstr "Django 会尝试按照这个顺序解释 ``list_display`` 的每个元素："

msgid "A field of the model."
msgstr "一个模型的字段。"

msgid "A callable."
msgstr "一个可调用对象。"

msgid "A string representing a ``ModelAdmin`` attribute."
msgstr "一个代表 ``ModelAdmin`` 属性的字符串。"

msgid "A string representing a model attribute."
msgstr "一个代表模型属性的字符串。"

msgid ""
"For example if you have ``first_name`` as a model field and as a "
"``ModelAdmin`` attribute, the model field will be used."
msgstr ""
"例如，如果你有 ``first_name`` 作为一个模型字段和 ``ModelAdmin`` 属性，将使用"
"模型字段。"

msgid ""
"Use ``list_display_links`` to control if and which fields in :attr:"
"`list_display` should be linked to the \"change\" page for an object."
msgstr ""
"使用 ``list_display_links`` 来控制 :attr:`list_display` 中的字段是否以及哪些"
"字段应该被链接到对象的 “更改” 页面。"

msgid ""
"By default, the change list page will link the first column -- the first "
"field specified in ``list_display`` -- to the change page for each item. But "
"``list_display_links`` lets you change this:"
msgstr ""
"默认情况下，更改列表页将把第一列 —— ``list_display`` 中指定的第一个字段 —— 链"
"接到每个项目的更改页面。但是 ``list_display_links`` 让你改变这一点："

msgid "Set it to ``None`` to get no links at all."
msgstr "将其设置为 ``None``，则完全没有链接。"

msgid ""
"Set it to a list or tuple of fields (in the same format as ``list_display``) "
"whose columns you want converted to links."
msgstr ""
"将它设置为一个列表或元组字段（格式与 ``list_display`` 相同），你希望将其列转"
"换为链接。"

msgid ""
"You can specify one or many fields. As long as the fields appear in "
"``list_display``, Django doesn't care how many (or how few) fields are "
"linked. The only requirement is that if you want to use "
"``list_display_links`` in this fashion, you must define ``list_display``."
msgstr ""
"你可以指定一个或多个字段。只要字段出现在 ``list_display`` 中，Django 就不会关"
"心链接了多少（或多少）字段。唯一的要求是，如果你想以这种方式使用 "
"``list_display_links``，你必须定义 ``list_display``。"

msgid ""
"In this example, the ``first_name`` and ``last_name`` fields will be linked "
"on the change list page::"
msgstr ""
"在这个例子中，``first_name`` 和 ``last_name`` 字段将在更改列表页面上被链接："

msgid "In this example, the change list page grid will have no links::"
msgstr "在这个例子中，更改列表页网格将没有链接："

msgid ""
"Set ``list_editable`` to a list of field names on the model which will allow "
"editing on the change list page. That is, fields listed in ``list_editable`` "
"will be displayed as form widgets on the change list page, allowing users to "
"edit and save multiple rows at once."
msgstr ""
"将 ``list_editable`` 设置为模型上允许在更改列表页上编辑的字段名称列表。也就是"
"说，在 ``list_editable`` 中列出的字段将作为表单部件显示在变更列表页上，允许用"
"户一次编辑和保存多行。"

msgid ""
"``list_editable`` interacts with a couple of other options in particular "
"ways; you should note the following rules:"
msgstr ""
"``list_editable`` 以特定方式与其他几个选项进行交互；你应该注意以下规则："

msgid ""
"Any field in ``list_editable`` must also be in ``list_display``. You can't "
"edit a field that's not displayed!"
msgstr ""
"``list_editable`` 中的任何字段都必须在 ``list_display`` 中。你不能编辑一个没"
"有显示的字段！"

msgid ""
"The same field can't be listed in both ``list_editable`` and "
"``list_display_links`` -- a field can't be both a form and a link."
msgstr ""
"同一字段不能同时列在 ``list_editable`` 和 ``list_display_links`` 中 —— 一个字"
"段不能既是表单又是链接。"

msgid "You'll get a validation error if either of these rules are broken."
msgstr "如果这些规则中的任何一条被破坏，你会得到一个验证错误。"

msgid ""
"Set ``list_filter`` to activate filters in the right sidebar of the change "
"list page of the admin."
msgstr ""

msgid ""
"At it's simplest ``list_filter`` takes a list or tuple of field names to "
"activate filtering upon, but several more advanced options as available. "
"See :ref:`modeladmin-list-filters` for the details."
msgstr ""

msgid ""
"Set ``list_max_show_all`` to control how many items can appear on a \"Show "
"all\" admin change list page. The admin will display a \"Show all\" link on "
"the change list only if the total result count is less than or equal to this "
"setting. By default, this is set to ``200``."
msgstr ""
"设置 ``list_max_show_all`` 来控制 “全部显示” 的管理员更改列表页面上可以出现多"
"少个项目。只有当总结果数小于或等于此配置时，管理才会在更改列表中显示 “全部显"
"示” 链接。默认情况下，这个配置为 ``200``。"

msgid ""
"Set ``list_per_page`` to control how many items appear on each paginated "
"admin change list page. By default, this is set to ``100``."
msgstr ""
"设置 ``list_per_page`` 来控制每个分页的管理变更列表页面上出现多少个项目。默认"
"情况下，设置为 ``100``。"

msgid ""
"Set ``list_select_related`` to tell Django to use :meth:`~django.db.models."
"query.QuerySet.select_related` in retrieving the list of objects on the "
"admin change list page. This can save you a bunch of database queries."
msgstr ""
"设置 ``list_select_related`` 告诉 Django 在检索管理变更列表页的对象列表时使"
"用 :meth:`~django.db.models.query.QuerySet.select_related`。这样可以省去一堆"
"数据库查询。"

msgid ""
"The value should be either a boolean, a list or a tuple. Default is "
"``False``."
msgstr "该值应是布尔值、列表或元组。默认值是 ``False``。"

msgid ""
"When value is ``True``, ``select_related()`` will always be called. When "
"value is set to ``False``, Django will look at ``list_display`` and call "
"``select_related()`` if any ``ForeignKey`` is present."
msgstr ""
"当值为 ``True`` 时，``select_related()`` 总是会被调用。当值设置为 ``False`` "
"时，Django 将查看 ``list_display``，如果有 ``ForeignKey``，则调用 "
"``select_related()``。"

msgid ""
"If you need more fine-grained control, use a tuple (or list) as value for "
"``list_select_related``. Empty tuple will prevent Django from calling "
"``select_related`` at all. Any other tuple will be passed directly to "
"``select_related`` as parameters. For example::"
msgstr ""
"如果你需要更精细的控制，可以使用元组（或列表）作为 ``list_select_related`` 的"
"值。空元组将阻止 Django 调用 ``select_related``。任何其他元组将直接传递给 "
"``select_related`` 作为参数。例如："

msgid "will call ``select_related('author', 'category')``."
msgstr "将调用 ``select_related('author', 'category')``。"

msgid ""
"If you need to specify a dynamic value based on the request, you can "
"implement a :meth:`~ModelAdmin.get_list_select_related` method."
msgstr ""
"如果需要根据请求指定一个动态值，可以实现一个 :meth:`~ModelAdmin."
"get_list_select_related` 方法。"

msgid ""
"``ModelAdmin`` ignores this attribute when :meth:`~django.db.models.query."
"QuerySet.select_related` was already called on the changelist's ``QuerySet``."
msgstr ""
"当 :meth:`~django.db.models.query.QuerySet.select_related` 已经在变更列表的 "
"``QuerySet`` 上被调用时，``ModelAdmin`` 会忽略这个属性。"

msgid ""
"Set ``ordering`` to specify how lists of objects should be ordered in the "
"Django admin views. This should be a list or tuple in the same format as a "
"model's :attr:`~django.db.models.Options.ordering` parameter."
msgstr ""
"设置 ``ordering`` 来指定对象列表在 Django 管理视图中的排序方式。这应该是一个"
"列表或元组，格式与模型的 :attr:`~django.db.models.Options.ordering` 参数相"
"同。"

msgid ""
"If this isn't provided, the Django admin will use the model's default "
"ordering."
msgstr "如果没有提供，Django 管理员将使用模型的默认排序。"

msgid ""
"If you need to specify a dynamic order (for example depending on user or "
"language) you can implement a :meth:`~ModelAdmin.get_ordering` method."
msgstr ""
"如果你需要指定一个动态的顺序（例如取决于用户或语言），你可以实现一个 :meth:"
"`~ModelAdmin.get_ordering` 方法。"

msgid "Performance considerations with ordering and sorting"
msgstr "排序和分类的性能考虑"

msgid ""
"To ensure a deterministic ordering of results, the changelist adds ``pk`` to "
"the ordering if it can't find a single or unique together set of fields that "
"provide total ordering."
msgstr ""
"为了确保结果的确定性排序，如果不能找到一个单一的或唯一的字段集，提供总的排"
"序，那么变更表就会在排序中增加 ``pk``。"

msgid ""
"For example, if the default ordering is by a non-unique ``name`` field, then "
"the changelist is sorted by ``name`` and ``pk``. This could perform poorly "
"if you have a lot of rows and don't have an index on ``name`` and ``pk``."
msgstr ""
"例如，如果默认的排序是按非唯一的 ``name`` 字段排序，那么更改列表就按 "
"``name`` 和 ``pk`` 排序。如果你有很多行，而且在 ``name`` 和 ``pk`` 上没有索"
"引，这可能会表现得很差。"

msgid ""
"The paginator class to be used for pagination. By default, :class:`django."
"core.paginator.Paginator` is used. If the custom paginator class doesn't "
"have the same constructor interface as :class:`django.core.paginator."
"Paginator`, you will also need to provide an implementation for :meth:"
"`ModelAdmin.get_paginator`."
msgstr ""
"用于分页的分页器类。默认情况下，使用 :class:`django.core.paginator."
"Paginator`。如果自定义的分页器类没有和 :class:`django.core.paginator."
"Paginator` 一样的构造函数接口，你还需要为 :meth:`ModelAdmin.get_paginator` 提"
"供一个实现。"

msgid ""
"Set ``prepopulated_fields`` to a dictionary mapping field names to the "
"fields it should prepopulate from::"
msgstr ""
"将 ``prepopulated_fields`` 设置为一个字典，将字段名称映射到它应该预先填充的字"
"段："

msgid ""
"When set, the given fields will use a bit of JavaScript to populate from the "
"fields assigned. The main use for this functionality is to automatically "
"generate the value for ``SlugField`` fields from one or more other fields. "
"The generated value is produced by concatenating the values of the source "
"fields, and then by transforming that result into a valid slug (e.g. "
"substituting dashes for spaces and lowercasing ASCII letters)."
msgstr ""
"当设置时，给定的字段将使用一点 JavaScript 从分配的字段中填充。这个功能的主要"
"用途是从一个或多个其他字段自动生成 ``SlugField`` 字段的值。生成的值是通过连接"
"源字段的值，然后将结果转化为有效的 slug（例如，用破折号代替空格，使用 ASCII "
"字母的小写字母）。"

msgid ""
"Prepopulated fields aren't modified by JavaScript after a value has been "
"saved. It's usually undesired that slugs change (which would cause an "
"object's URL to change if the slug is used in it)."
msgstr ""
"预填充的字段在保存值后不会被 JavaScript 修改。通常情况下，不希望 slug 发生变"
"化（如果对象中使用了 slug，会导致对象的 URL 发生变化）。"

msgid ""
"``prepopulated_fields`` doesn't accept ``DateTimeField``, ``ForeignKey``, "
"``OneToOneField``, and ``ManyToManyField`` fields."
msgstr ""
"``prepopulated_fields`` 不接受 ``DateTimeField``、``ForeignKey``、"
"``OneToOneField`` 和 ``ManyToManyField`` 字段。"

msgid ""
"By default, applied filters are preserved on the list view after creating, "
"editing, or deleting an object. You can have filters cleared by setting this "
"attribute to ``False``."
msgstr ""
"默认情况下，在创建、编辑或删除对象后，应用的过滤器会被保存在列表视图中。您可"
"以通过将此属性设置为 ``False`` 来清除过滤器。"

msgid ""
"By default, Django's admin uses a select-box interface (<select>) for fields "
"that are ``ForeignKey`` or have ``choices`` set. If a field is present in "
"``radio_fields``, Django will use a radio-button interface instead. Assuming "
"``group`` is a ``ForeignKey`` on the ``Person`` model::"
msgstr ""
"默认情况下，Django 的管理对于 ``ForeignKey`` 或设置了 ``choices`` 的字段使用"
"选择框界面（<select>）。如果字段存在于 ``radio_fields`` 中，Django 将使用单选"
"按钮接口代替。假设 ``group`` 是 ``Person`` 模型上的一个 ``ForeignKey`` ："

msgid ""
"You have the choice of using ``HORIZONTAL`` or ``VERTICAL`` from the "
"``django.contrib.admin`` module."
msgstr ""
"你可以在 ``django.contrib.admin`` 模块中选择使用 ``HORIZONTAL`` 或 "
"``VERTICAL``。"

msgid ""
"Don't include a field in ``radio_fields`` unless it's a ``ForeignKey`` or "
"has ``choices`` set."
msgstr ""
"不要在 ``radio_fields`` 中包含一个字段，除非它是 ``ForeignKey`` 或已设置 "
"``choices``。"

msgid ""
"``autocomplete_fields`` is a list of ``ForeignKey`` and/or "
"``ManyToManyField`` fields you would like to change to `Select2 <https://"
"select2.org/>`_ autocomplete inputs."
msgstr ""
"``autocomplete_fields`` 是一个 ``ForeignKey`` 和／或 ``ManyToManyField`` 字段"
"的列表，你想将其改为 `Select2 <https://select2.org/>`_ 自动完成输入。"

msgid ""
"By default, the admin uses a select-box interface (``<select>``) for those "
"fields. Sometimes you don't want to incur the overhead of selecting all the "
"related instances to display in the dropdown."
msgstr ""
"``autocomplete_fields`` 是一个 ``ForeignKey`` 和／或的列表，默认情况下，管理"
"对这些字段使用选择框接口（``<select>``）。有时你不想产生选择所有相关实例在下"
"拉中显示的开销。``ManyToManyField`` 字段你想改成 `Select2 <https://select2."
"org/>`_ 自动完成输入。"

msgid ""
"The Select2 input looks similar to the default input but comes with a search "
"feature that loads the options asynchronously. This is faster and more user-"
"friendly if the related model has many instances."
msgstr ""
"Select2 输入看起来与默认输入类似，但自带搜索功能，异步加载选项。如果相关模型"
"有很多实例，这样会更快、更方便用户使用。"

msgid ""
"You must define :attr:`~ModelAdmin.search_fields` on the related object's "
"``ModelAdmin`` because the autocomplete search uses it."
msgstr ""
"你必须在相关对象的 ``ModelAdmin`` 上定义 :attr:`~ModelAdmin.search_fields`，"
"因为自动完成搜索使用它。"

msgid ""
"To avoid unauthorized data disclosure, users must have the ``view`` or "
"``change`` permission to the related object in order to use autocomplete."
msgstr ""
"为了避免未经授权的数据泄露，用户必须拥有相关对象的 ``view`` 或 ``change`` 权"
"限才能使用自动完成。"

msgid ""
"Ordering and pagination of the results are controlled by the related "
"``ModelAdmin``'s :meth:`~ModelAdmin.get_ordering` and :meth:`~ModelAdmin."
"get_paginator` methods."
msgstr ""
"结果的排序和分页由相关的 ``ModelAdmin`` 的 :meth:`~ModelAdmin.get_ordering` "
"和 :meth:`~ModelAdmin.get_paginator` 方法控制。"

msgid ""
"In the following example, ``ChoiceAdmin`` has an autocomplete field for the "
"``ForeignKey`` to the ``Question``. The results are filtered by the "
"``question_text`` field and ordered by the ``date_created`` field::"
msgstr ""
"在下面的例子中，``ChoiceAdmin`` 对 ``Question`` 有一个 ``ForeignKey`` 的自动"
"完成字段。结果由 ``question_text`` 字段过滤，并由 ``date_created`` 字段排序："

msgid "Performance considerations for large datasets"
msgstr "大型数据集的性能考虑"

msgid ""
"Ordering using :attr:`ModelAdmin.ordering` may cause performance problems as "
"sorting on a large queryset will be slow."
msgstr ""
"使用 :attr:`ModelAdmin.ordering` 排序可能会导致性能问题，因为在一个大的查询集"
"上排序会很慢。"

msgid ""
"Also, if your search fields include fields that aren't indexed by the "
"database, you might encounter poor performance on extremely large tables."
msgstr ""
"此外，如果你的搜索字段包括没有被数据库索引的字段，你可能会在极大的表上遇到性"
"能不佳的情况。"

msgid ""
"For those cases, it's a good idea to write your own :func:`ModelAdmin."
"get_search_results` implementation using a full-text indexed search."
msgstr ""
"对于这些情况，最好是使用全文索引搜索来编写自己的 :func:`ModelAdmin."
"get_search_results` 实现。"

msgid ""
"You may also want to change the ``Paginator`` on very large tables as the "
"default paginator always performs a ``count()`` query. For example, you "
"could override the default implementation of the ``Paginator.count`` "
"property."
msgstr ""
"你可能还想改变非常大的表的 ``Paginator``，因为默认的分页器总是执行 "
"``count()`` 查询。例如，你可以覆盖 ``Paginator.count`` 属性的默认实现。"

msgid ""
"By default, Django's admin uses a select-box interface (<select>) for fields "
"that are ``ForeignKey``. Sometimes you don't want to incur the overhead of "
"having to select all the related instances to display in the drop-down."
msgstr ""
"默认情况下，Django 的管理员对 ``ForeignKey`` 的字段使用选择框接口"
"（<select>）。有时候，你不想产生必须选择所有相关的实例来显示在下拉框中的开"
"销。"

msgid ""
"``raw_id_fields`` is a list of fields you would like to change into an "
"``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""
"``raw_id_fields`` 是你想改变为 ``ForeignKey`` 或 ``ManyToManyField`` 的 "
"``Input`` 部件的字段列表："

msgid ""
"The ``raw_id_fields`` ``Input`` widget should contain a primary key if the "
"field is a ``ForeignKey`` or a comma separated list of values if the field "
"is a ``ManyToManyField``.  The ``raw_id_fields`` widget shows a magnifying "
"glass button next to the field which allows users to search for and select a "
"value:"
msgstr ""
"``raw_id_fields`` 的 ``Input`` 部件应该包含一个主键，如果该字段是 "
"```ForeignKey```。或者是一个逗号分隔的值列表，如果该字段是 "
"``ManyToManyField``。 ``raw_id_fields`` 部件在字段旁边显示一个放大镜按钮，允"
"许用户搜索和选择一个值："

msgid ""
"By default the admin shows all fields as editable. Any fields in this option "
"(which should be a ``list`` or ``tuple``) will display its data as-is and "
"non-editable; they are also excluded from the :class:`~django.forms."
"ModelForm` used for creating and editing. Note that when specifying :attr:"
"`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` the read-only fields "
"must be present to be shown (they are ignored otherwise)."
msgstr ""
"默认情况下，管理会将所有字段显示为可编辑。该选项中的任何字段（应该是 "
"``list`` 或 ``tuple``）将按原样显示其数据，不可编辑；它们也被排除在用于创建和"
"编辑的 :class:`~django.forms.ModelForm` 中。请注意，当指定 :attr:`ModelAdmin."
"fields` 或 :attr:`ModelAdmin.fieldsets` 时，只读字段必须存在才能显示（否则将"
"被忽略）。"

msgid ""
"If ``readonly_fields`` is used without defining explicit ordering through :"
"attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` they will be added "
"last after all editable fields."
msgstr ""
"如果没有通过 :attr:`ModelAdmin.fields` 或 :attr:`ModelAdmin.fielets` 定义明确"
"的顺序就使用 ``readonly_fields``，它们将在所有可编辑字段之后最后添加。"

msgid ""
"A read-only field can not only display data from a model's field, it can "
"also display the output of a model's method or a method of the "
"``ModelAdmin`` class itself. This is very similar to the way :attr:"
"`ModelAdmin.list_display` behaves. This provides a way to use the admin "
"interface to provide feedback on the status of the objects being edited, for "
"example::"
msgstr ""
"一个只读字段不仅可以显示模型字段的数据，还可以显示模型的方法或 "
"``ModelAdmin`` 类本身的方法的输出。这与 :attr:`ModelAdmin.list_display` 的行"
"为方式非常相似。这提供了一种方法来使用管理员接口来提供被编辑对象的状态反馈，"
"例如："

msgid ""
"Set ``save_as`` to enable a \"save as new\" feature on admin change forms."
msgstr "设置 ``save_as``，在管理更改表格时启用 “另存为新” 功能。"

msgid ""
"Normally, objects have three save options: \"Save\", \"Save and continue "
"editing\", and \"Save and add another\". If ``save_as`` is ``True``, \"Save "
"and add another\" will be replaced by a \"Save as new\" button that creates "
"a new object (with a new ID) rather than updating the existing object."
msgstr ""
"通常情况下，对象有三个保存选项。“保存”、“保存并继续编辑” 和 “保存并添加另一"
"个”。如果 ``save_as`` 为 ``True``，则 “保存并添加另一个” 将被 “另存为新” 按钮"
"所取代，该按钮将创建一个新的对象（具有新的 ID），而不是更新现有的对象。"

msgid "By default, ``save_as`` is set to ``False``."
msgstr "默认情况下，``save_as`` 被设置为 ``False``。"

msgid ""
"When :attr:`save_as=True <save_as>`, the default redirect after saving the "
"new object is to the change view for that object. If you set "
"``save_as_continue=False``, the redirect will be to the changelist view."
msgstr ""
"当 :attr:`save_as=True <save_as>` 时，保存新对象后默认重定向到该对象的变更视"
"图。如果设置 ``save_as_continue=False``，则重定向到变更列表视图。"

msgid "By default, ``save_as_continue`` is set to ``True``."
msgstr "默认情况下，``save_as_continue`` 被设置为 ``True``。"

msgid ""
"Set ``save_on_top`` to add save buttons across the top of your admin change "
"forms."
msgstr "设置 ``save_on_top`` 来在你的管理更改表格的顶部添加保存按钮。"

msgid ""
"Normally, the save buttons appear only at the bottom of the forms. If you "
"set ``save_on_top``, the buttons will appear both on the top and the bottom."
msgstr ""
"通常情况下，保存按钮只出现在表格的底部。如果设置 ``save_on_top``，按钮将同时"
"出现在顶部和底部。"

msgid "By default, ``save_on_top`` is set to ``False``."
msgstr "默认情况下，``save_on_top`` 被设置为 ``False``。"

msgid ""
"Set ``search_fields`` to enable a search box on the admin change list page. "
"This should be set to a list of field names that will be searched whenever "
"somebody submits a search query in that text box."
msgstr ""
"设置 ``search_fields``，在管理更改列表页面上启用搜索框。这应该被设置为字段名"
"的列表，每当有人在该文本框中提交搜索查询时，就会被搜索到。"

msgid ""
"These fields should be some kind of text field, such as ``CharField`` or "
"``TextField``. You can also perform a related lookup on a ``ForeignKey`` or "
"``ManyToManyField`` with the lookup API \"follow\" notation::"
msgstr ""
"这些字段应该是某种文本字段，如 ``CharField`` 或 ``TextField``。你也可以对 "
"``ForeignKey`` 或 ``ManyToManyField`` 进行相关查询，并使用查找 API “follow” "
"符号："

msgid ""
"For example, if you have a blog entry with an author, the following "
"definition would enable searching blog entries by the email address of the "
"author::"
msgstr ""
"例如，如果你有一个有作者的博客条目，下面的定义将可以通过作者的电子邮件地址搜"
"索博客条目："

msgid ""
"When somebody does a search in the admin search box, Django splits the "
"search query into words and returns all objects that contain each of the "
"words, case-insensitive (using the :lookup:`icontains` lookup), where each "
"word must be in at least one of ``search_fields``. For example, if "
"``search_fields`` is set to ``['first_name', 'last_name']`` and a user "
"searches for ``john lennon``, Django will do the equivalent of this SQL "
"``WHERE`` clause:"
msgstr ""
"当有人在管理搜索框中进行搜索时，Django 会将搜索查询拆分成多个词，并返回所有包"
"含这些词的对象，不区分大小写（使用 :lookup:`icontains` 查找），其中每个词必须"
"在 ``search_fields`` 中至少有一个。例如，如果 ``search_fields`` 设置为 "
"``['first_name', 'last_name']``，用户搜索 ``john lennon'``，Django 会做相当于"
"这个 SQL ``WHERE`` 子句。"

msgid ""
"The search query can contain quoted phrases with spaces. For example, if a "
"user searches for ``\"john winston\"`` or ``'john winston'``, Django will do "
"the equivalent of this SQL ``WHERE`` clause:"
msgstr ""
"搜索查询可以包含带空格的引号短语。例如，如果用户搜索 ``\"john winston\"`` 或 "
"``'john winston'``，Django 会做相当于这个 SQL 的 ``WHERE`` 子句："

msgid ""
"If you don't want to use ``icontains`` as the lookup, you can use any lookup "
"by appending it the field. For example, you could use :lookup:`exact` by "
"setting ``search_fields`` to ``['first_name__exact']``."
msgstr ""
"如果你不想使用 ``icontains`` 作为查找，你可以通过附加字段来使用任何查找。例"
"如，你可以通过设置 ``search_fields`` 为 ``['first_name__exact']`` 来使用 :"
"lookup:`exact`。"

msgid ""
"Some (older) shortcuts for specifying a field lookup are also available. You "
"can prefix a field in ``search_fields`` with the following characters and "
"it's equivalent to adding ``__<lookup>`` to the field:"
msgstr ""
"还可以使用一些（较老的）快捷方式来指定字段查找。你可以在 ``search_fields`` 中"
"的字段前加上以下字符，相当于在字段中加上 ``__<lookup>``。"

msgid "Prefix"
msgstr "前缀"

msgid "Lookup"
msgstr "查找"

msgid "^"
msgstr "^"

msgid ":lookup:`startswith`"
msgstr ":lookup:`startswith`"

msgid "="
msgstr "="

msgid ":lookup:`iexact`"
msgstr ":lookup:`iexact`"

msgid "@"
msgstr "@"

msgid ":lookup:`search`"
msgstr ":lookup:`search`"

msgid "None"
msgstr "None"

msgid ":lookup:`icontains`"
msgstr ":lookup:`icontains`"

msgid ""
"If you need to customize search you can use :meth:`ModelAdmin."
"get_search_results` to provide additional or alternate search behavior."
msgstr ""
"如果你需要自定义搜索，你可以使用 :meth:`ModelAdmin.get_search_results` 来提供"
"额外的或替代的搜索行为。"

msgid ""
"Searches using multiple search terms are now applied in a single call to "
"``filter()``, rather than in sequential ``filter()`` calls."
msgstr ""

msgid ""
"For multi-valued relationships, this means that rows from the related model "
"must match all terms rather than any term. For example, if ``search_fields`` "
"is set to ``['child__name', 'child__age']``, and a user searches for "
"``'Jamal 17'``, parent rows will be returned only if there is a relationship "
"to some 17-year-old child named Jamal, rather than also returning parents "
"who merely have a younger or older child named Jamal in addition to some "
"other 17-year-old."
msgstr ""

msgid ""
"See the :ref:`spanning-multi-valued-relationships` topic for more discussion "
"of this difference."
msgstr ""

msgid ""
"Set ``search_help_text`` to specify a descriptive text for the search box "
"which will be displayed below it."
msgstr ""
"设置 ``search_help_text``，为搜索框指定一个描述性文本，显示在它的下面。"

msgid ""
"Set ``show_full_result_count`` to control whether the full count of objects "
"should be displayed on a filtered admin page (e.g. ``99 results (103 "
"total)``). If this option is set to ``False``, a text like ``99 results "
"(Show all)`` is displayed instead."
msgstr ""
"设置 ``show_full_result_count`` 来控制是否应该在过滤后的管理页面上显示全部对"
"象的数量（例如： ``99 results (103 total)``）。如果这个选项被设置为 "
"``False``，则会显示 ``99 results (Show all)`` 这样的文字。"

msgid ""
"The default of ``show_full_result_count=True`` generates a query to perform "
"a full count on the table which can be expensive if the table contains a "
"large number of rows."
msgstr ""
"默认的 ``show_full_result_count=True`` 会生成一个对表进行完整计数的查询，如果"
"表包含大量的行，那么这个查询可能会很昂贵。"

msgid ""
"By default, the change list page allows sorting by all model fields (and "
"callables that use the ``ordering`` argument to the :func:`~django.contrib."
"admin.display` decorator or have the ``admin_order_field`` attribute) "
"specified in :attr:`list_display`."
msgstr ""
"默认情况下，变更列表页面允许按 :attr:`list_display` 中指定的所有模型字段（以"
"及使用 :func:`~django.contrib.admin.display` 装饰器的 ``ordering`` 参数或具"
"有 ``admin_order_field`` 属性的可调用对象）进行排序。"

msgid ""
"If you want to disable sorting for some columns, set ``sortable_by`` to a "
"collection (e.g. ``list``, ``tuple``, or ``set``) of the subset of :attr:"
"`list_display` that you want to be sortable. An empty collection disables "
"sorting for all columns."
msgstr ""
"如果你想禁止对某些列进行排序，请将 ``sortable_by`` 设置为你想排序的 :attr:"
"`list_display` 子集的一个集合（例如 ``list```、``tuple`` 或 ``set``）。一个空"
"的集合会禁用所有列的排序。"

msgid ""
"If you need to specify this list dynamically, implement a :meth:`~ModelAdmin."
"get_sortable_by` method instead."
msgstr ""
"如果你需要动态地指定这个列表，可以实现一个 :meth:`~ModelAdmin."
"get_sortable_by` 方法来代替。"

msgid ""
"Set ``view_on_site`` to control whether or not to display the \"View on "
"site\" link. This link should bring you to a URL where you can display the "
"saved object."
msgstr ""
"设置 ``view_on_site`` 来控制是否显示 “在站点上查看” 链接。这个链接应该把你带"
"到一个可以显示保存对象的 URL。"

msgid ""
"This value can be either a boolean flag or a callable. If ``True`` (the "
"default), the object's :meth:`~django.db.models.Model.get_absolute_url` "
"method will be used to generate the url."
msgstr ""
"这个值可以是一个布尔标志，也可以是一个可调用对象。如果 ``True`` （默认），对"
"象的 :meth:`~django.db.models.Model.get_absolute_url` 方法将被用来生成网址。"

msgid ""
"If your model has a :meth:`~django.db.models.Model.get_absolute_url` method "
"but you don't want the \"View on site\" button to appear, you only need to "
"set ``view_on_site`` to ``False``::"
msgstr ""
"如果你的模型有一个 :meth:`~django.db.models.Model.get_absolute_url` 方法，但"
"你不想让 “在站点上查看” 按钮出现，你只需要将 ``view_on_site`` 设置为 "
"``False`` ："

msgid ""
"In case it is a callable, it accepts the model instance as a parameter. For "
"example::"
msgstr "如果它是一个可调用对象，它接受模型实例作为参数。例如："

msgid "Custom template options"
msgstr "自定义模板选项"

msgid ""
"The :ref:`admin-overriding-templates` section describes how to override or "
"extend the default admin templates.  Use the following options to override "
"the default templates used by the :class:`ModelAdmin` views:"
msgstr ""
":ref:`admin-overriding-templates` 部分描述了如何覆盖或扩展默认的管理模板。 使"
"用以下选项来覆盖 :class:`ModelAdmin` 视图使用的默认模板。"

msgid "Path to a custom template, used by :meth:`add_view`."
msgstr "自定义模板的路径，由 :meth:`add_view` 使用。"

msgid "Path to a custom template, used by :meth:`change_view`."
msgstr "自定义模板的路径，由 :meth:`change_view` 使用。"

msgid "Path to a custom template, used by :meth:`changelist_view`."
msgstr "自定义模板的路径，由 :meth:`changelist_view` 使用。"

msgid ""
"Path to a custom template, used by :meth:`delete_view` for displaying a "
"confirmation page when deleting one or more objects."
msgstr ""
"自定义模板的路径，由 :meth:`delete_view` 用于在删除一个或多个对象时显示确认页"
"面。"

msgid ""
"Path to a custom template, used by the ``delete_selected`` action method for "
"displaying a confirmation page when deleting one or more objects. See the :"
"doc:`actions documentation</ref/contrib/admin/actions>`."
msgstr ""
"自定义模板的路径，由 ``delete_selected`` 动作方法使用，在删除一个或多个对象时"
"显示确认页面。参见 :doc:`动作文档 </ref/contrib/admin/actions>`。"

msgid "Path to a custom template, used by :meth:`history_view`."
msgstr "自定义模板的路径，由 :meth:`history_view` 使用。"

msgid ""
"Path to a custom template, used by :meth:`response_add`, :meth:"
"`response_change`, and :meth:`response_delete`."
msgstr ""
":meth:`response_add`、 :meth:`response_change` 和 :meth:`response_delete` 使"
"用的自定义模板的路径。"

msgid "``ModelAdmin`` methods"
msgstr "``ModelAdmin`` 方法"

msgid ""
"When overriding :meth:`ModelAdmin.save_model` and :meth:`ModelAdmin."
"delete_model`, your code must save/delete the object. They aren't meant for "
"veto purposes, rather they allow you to perform extra operations."
msgstr ""
"当覆盖 :meth:`ModelAdmin.save_model` 和 :meth:`ModelAdmin.delete_model` 时，"
"你的代码必须保存／删除对象。它们不是为了否决的目的，而是允许你执行额外的操"
"作。"

msgid ""
"The ``save_model`` method is given the ``HttpRequest``, a model instance, a "
"``ModelForm`` instance, and a boolean value based on whether it is adding or "
"changing the object. Overriding this method allows doing pre- or post-save "
"operations. Call ``super().save_model()`` to save the object using :meth:`."
"Model.save`."
msgstr ""
"``save_model`` 方法被赋予 ``HttpRequest``、一个模型实例、一个 ``ModelForm`` "
"实例和一个基于是否添加或更改对象的布尔值。覆盖这个方法可以进行保存前或保存后"
"的操作。调用 ``super().save_model()`` 使用 :meth:`.Model.save` 保存对象。"

msgid "For example to attach ``request.user`` to the object prior to saving::"
msgstr "例如，在保存之前将 ``request.user`` 附加到对象上："

msgid ""
"The ``delete_model`` method is given the ``HttpRequest`` and a model "
"instance. Overriding this method allows doing pre- or post-delete "
"operations. Call ``super().delete_model()`` to delete the object using :meth:"
"`.Model.delete`."
msgstr ""
"``delete_model`` 方法被赋予 ``HttpRequest`` 和一个模型实例。覆盖该方法可以进"
"行删除前或删除后的操作。调用 ``super().delete_model()`` 使用 :meth:`.Model."
"delete`` 删除对象。"

msgid ""
"The ``delete_queryset()`` method is given the ``HttpRequest`` and a "
"``QuerySet`` of objects to be deleted. Override this method to customize the "
"deletion process for the \"delete selected objects\" :doc:`action <actions>`."
msgstr ""
"``delete_queryset()`` 方法是给定 ``HttpRequest`` 和一个 ``QuerySet`` 要删除的"
"对象。重写该方法，可以自定义 “删除选定对象” 的删除过程 :doc:`动作 "
"<actions>`。"

msgid ""
"The ``save_formset`` method is given the ``HttpRequest``, the parent "
"``ModelForm`` instance and a boolean value based on whether it is adding or "
"changing the parent object."
msgstr ""
"``save_formset`` 方法被赋予 ``HttpRequest``、父 ``ModelForm`` 实例和一个基于"
"是否添加或更改父对象的布尔值。"

msgid ""
"For example, to attach ``request.user`` to each changed formset model "
"instance::"
msgstr "例如，将 ``request.user`` 附加到每一个改变了的表单集模型实例："

msgid "See also :ref:`saving-objects-in-the-formset`."
msgstr "另见 :ref:`saving-objects-in-the-formset`。"

msgid ""
"The ``get_ordering`` method takes a ``request`` as parameter and is expected "
"to return a ``list`` or ``tuple`` for ordering similar to the :attr:"
"`ordering` attribute. For example::"
msgstr ""
"``get_ordering`` 方法以 ``request`` 为参数，并期望返回一个类似于 :attr:"
"`ordering` 属性的 ``list`` 或 ``tuple`` 的排序。例如："

msgid ""
"The ``get_search_results`` method modifies the list of objects displayed "
"into those that match the provided search term. It accepts the request, a "
"queryset that applies the current filters, and the user-provided search "
"term. It returns a tuple containing a queryset modified to implement the "
"search, and a boolean indicating if the results may contain duplicates."
msgstr ""
"``get_search_results`` 方法将显示的对象列表修改为符合所提供的搜索词的对象。它"
"接受请求、应用当前过滤器的查询集和用户提供的搜索词。它返回一个元组，其中包含"
"一个修改后实现搜索的查询集，以及一个布尔值，表示结果是否包含重复。"

msgid ""
"The default implementation searches the fields named in :attr:`ModelAdmin."
"search_fields`."
msgstr "默认的实现是搜索 :attr:`ModelAdmin.search_fields` 中命名的字段。"

msgid ""
"This method may be overridden with your own custom search method. For "
"example, you might wish to search by an integer field, or use an external "
"tool such as `Solr`_ or `Haystack`_. You must establish if the queryset "
"changes implemented by your search method may introduce duplicates into the "
"results, and return ``True`` in the second element of the return value."
msgstr ""

msgid "For example, to search by ``name`` and ``age``, you could use::"
msgstr "例如，如果要按 ``name`` 和 ``age`` 进行搜索，你可以使用："

msgid ""
"This implementation is more efficient than ``search_fields = ('name', "
"'=age')`` which results in a string comparison for the numeric field, for "
"example ``... OR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4')`` on "
"PostgreSQL."
msgstr ""
"这个实现比 ``search_fields = ('name', '=age')`` 更有效，因为后者的结果是对数"
"字字段进行字符串比较，例如 ``... OR UPPER(\"polls_choice\".\"votes\"::text) "
"= UPPER('4')`` 在 PostgreSQL 上。"

msgid ""
"The ``save_related`` method is given the ``HttpRequest``, the parent "
"``ModelForm`` instance, the list of inline formsets and a boolean value "
"based on whether the parent is being added or changed. Here you can do any "
"pre- or post-save operations for objects related to the parent. Note that at "
"this point the parent object and its form have already been saved."
msgstr ""
"``save_related`` 方法被赋予 ``HttpRequest``、父 ``ModelForm`` 实例、内联表单"
"集列表和一个基于父对象是否被添加或更改的布尔值。在这里可以对父对象相关的对象"
"进行任何保存前或保存后的操作。请注意，此时父对象及其窗体已经被保存。"

msgid ""
"The ``get_autocomplete_fields()`` method is given the ``HttpRequest`` and is "
"expected to return a ``list`` or ``tuple`` of field names that will be "
"displayed with an autocomplete widget as described above in the :attr:"
"`ModelAdmin.autocomplete_fields` section."
msgstr ""
"``get_autocomplete_fields()`` 方法被赋予 ``HttpRequest``，预计将返回一个 "
"``list`` 或 ``tuple`` 字段名，这些字段名将与自动完成部件一起显示，如上面 :"
"attr:`ModelAdmin.autocomplete_fields` 部分所述。"

msgid ""
"The ``get_readonly_fields`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``list`` or ``tuple`` of field names that will be displayed as read-only, "
"as described above in the :attr:`ModelAdmin.readonly_fields` section."
msgstr ""
"``get_readonly_fields`` 方法是给定 ``HttpRequest`` 和被编辑的 ``obj``（或者在"
"添加表单中给定 ``None``），并期望返回一个 ``list`` 或 ``tuple`` 的字段名，这"
"些字段名将被显示为只读，如上面 :attr:`ModelAdmin.readonly_fields` 部分所述。"

msgid ""
"The ``get_prepopulated_fields`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``dictionary``, as described above in the :attr:`ModelAdmin."
"prepopulated_fields` section."
msgstr ""
"``get_prepopulated_fields`` 方法是给定 ``HttpRequest`` 和被编辑的 ``obj`` "
"（或者在添加表单中给定 ``None``），并期望返回一个 ``dictionary``，如上面 :"
"attr:`ModelAdmin.prepopulated_fields` 一节所述。"

msgid ""
"The ``get_list_display`` method is given the ``HttpRequest`` and is expected "
"to return a ``list`` or ``tuple`` of field names that will be displayed on "
"the changelist view as described above in the :attr:`ModelAdmin."
"list_display` section."
msgstr ""
"``get_list_display`` 方法被赋予 ``HttpRequest``，预计将返回一个 ``list`` 或 "
"``tuple`` 的字段名，这些字段名将显示在变更列表视图上，如上面 :attr:"
"`ModelAdmin.list_display` 一节所述。"

msgid ""
"The ``get_list_display_links`` method is given the ``HttpRequest`` and the "
"``list`` or ``tuple`` returned by :meth:`ModelAdmin.get_list_display`. It is "
"expected to return either ``None`` or a ``list`` or ``tuple`` of field names "
"on the changelist that will be linked to the change view, as described in "
"the :attr:`ModelAdmin.list_display_links` section."
msgstr ""
"``get_list_display_links`` 方法被赋予 ``HttpRequest`` 和由 :meth:`ModelAdmin."
"get_list_display` 返回的 ``list`` 或 ``tuple``。如 :attr:`ModelAdmin."
"list_display_links` 一节所述，预计它将返回变化列表中的 ``None`` 或 ``list`` "
"或 ``tuple`` 字段名，这些字段名将被链接到变化视图。"

msgid ""
"The ``get_exclude`` method is given the ``HttpRequest`` and the ``obj`` "
"being edited (or ``None`` on an add form) and is expected to return a list "
"of fields, as described in :attr:`ModelAdmin.exclude`."
msgstr ""
"``get_exclude`` 方法是给定 ``HttpRequest`` 和被编辑的 ``obj`` （或者在添加表"
"单中给定 ``None``），并期望返回一个字段列表，如 :attr:`ModelAdmin.exclude` 中"
"所述。"

msgid ""
"The ``get_fields`` method is given the ``HttpRequest`` and the ``obj`` being "
"edited (or ``None`` on an add form) and is expected to return a list of "
"fields, as described above in the :attr:`ModelAdmin.fields` section."
msgstr ""
"``get_fields`` 方法是给定 ``HttpRequest`` 和被编辑的 ``obj`` （或者在添加表单"
"中给定 ``None``），并期望返回一个字段列表，如上面 :attr:`ModelAdmin.fields` "
"一节所述。"

msgid ""
"The ``get_fieldsets`` method is given the ``HttpRequest`` and the ``obj`` "
"being edited (or ``None`` on an add form) and is expected to return a list "
"of two-tuples, in which each two-tuple represents a ``<fieldset>`` on the "
"admin form page, as described above in the :attr:`ModelAdmin.fieldsets` "
"section."
msgstr ""
"``get_fieldsets`` 方法是给定 ``HttpRequest`` 和被编辑的 ``obj`` （或者在添加"
"表单中给定 ``None``），预计将返回一个双元组列表，其中每个双元组代表管理表单页"
"面上的 ``<fieldset>``，如上面 :attr:`ModelAdmin.fieldsets` 部分所述。"

msgid ""
"The ``get_list_filter`` method is given the ``HttpRequest`` and is expected "
"to return the same kind of sequence type as for the :attr:`~ModelAdmin."
"list_filter` attribute."
msgstr ""
"``get_list_filter`` 方法被赋予 ``HttpRequest``，并期望返回与 :attr:"
"`~ModelAdmin.list_filter` 属性相同的序列类型。"

msgid ""
"The ``get_list_select_related`` method is given the ``HttpRequest`` and "
"should return a boolean or list as :attr:`ModelAdmin.list_select_related` "
"does."
msgstr ""
"``get_list_select_related`` 方法被赋予 ``HttpRequest``，应该像 :attr:"
"`ModelAdmin.list_select_related` 那样返回一个布尔值或列表。"

msgid ""
"The ``get_search_fields`` method is given the ``HttpRequest`` and is "
"expected to return the same kind of sequence type as for the :attr:"
"`~ModelAdmin.search_fields` attribute."
msgstr ""
"``get_search_fields`` 方法被赋予 ``HttpRequest``，并期望返回与 :attr:"
"`~ModelAdmin.search_fields` 属性相同的序列类型。"

msgid ""
"The ``get_sortable_by()`` method is passed the ``HttpRequest`` and is "
"expected to return a collection (e.g. ``list``, ``tuple``, or ``set``) of "
"field names that will be sortable in the change list page."
msgstr ""
"``get_sortable_by()`` 方法被传递给 ``HttpRequest``，并期望返回一个字段名的集"
"合（例如 ``list``、``tuple`` 或 ``set``），这些字段名将在更改列表页中被排序。"

msgid ""
"Its default implementation returns :attr:`sortable_by` if it's set, "
"otherwise it defers to :meth:`get_list_display`."
msgstr ""
"如果设置了，它的默认实现将返回 :attr:`sortable_by`，否则将服从 :meth:"
"`get_list_display`。"

msgid "For example, to prevent one or more columns from being sortable::"
msgstr "例如，要防止一列或多列无法排序："

msgid ""
"The ``get_inline_instances`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``list`` or ``tuple`` of :class:`~django.contrib.admin.InlineModelAdmin` "
"objects, as described below in the :class:`~django.contrib.admin."
"InlineModelAdmin` section. For example, the following would return inlines "
"without the default filtering based on add, change, delete, and view "
"permissions::"
msgstr ""
"``get_inline_instances`` 方法是给定 ``HttpRequest`` 和被编辑的 ``obj`` （或者"
"在添加表单中给定 ``None``），并期望返回一个 ``list`` 或 ``tuple`` 的 :class:"
"``~django.contrib.admin.InlineModelAdmin` 对象，如下文 :class:`~django."
"contrib.admin.InlineModelAdmin` 部分所述。例如，以下内容将返回没有基于添加、"
"更改、删除和查看权限的默认过滤的内联："

msgid ""
"If you override this method, make sure that the returned inlines are "
"instances of the classes defined in :attr:`inlines` or you might encounter a "
"\"Bad Request\" error when adding related objects."
msgstr ""
"如果你覆盖了这个方法，请确保返回的内联是 :attr:`inlines` 中定义的类的实例，否"
"则在添加相关对象时可能会遇到 “Bad Request” 错误。"

msgid ""
"The ``get_inlines`` method is given the ``HttpRequest`` and the ``obj`` "
"being edited (or ``None`` on an add form) and is expected to return an "
"iterable of inlines. You can override this method to dynamically add inlines "
"based on the request or model instance instead of specifying them in :attr:"
"`ModelAdmin.inlines`."
msgstr ""
"``get_inlines`` 方法是给定 ``HttpRequest`` 和被编辑的 ``obj`` （或在添加表单"
"中给定 ``None``），并期望返回一个可迭代对象的内联。你可以覆盖这个方法，根据请"
"求或模型实例动态添加内联，而不是在 :attr:`ModelAdmin.inlines` 中指定它们。"

msgid ""
"The ``get_urls`` method on a ``ModelAdmin`` returns the URLs to be used for "
"that ModelAdmin in the same way as a URLconf.  Therefore you can extend them "
"as documented in :doc:`/topics/http/urls`, using the ``AdminSite."
"admin_view()`` wrapper on your views::"
msgstr ""

msgid ""
"If you want to use the admin layout, extend from ``admin/base_site.html``:"
msgstr "如果你想使用管理布局，从 ``admin/base_site.html`` 扩展："

msgid ""
"Notice how the ``self.my_view`` function is wrapped in ``self.admin_site."
"admin_view``. This is important, since it ensures two things:"
msgstr ""

msgid ""
"Permission checks are run, ensuring only active staff users can access the "
"view."
msgstr ""

msgid ""
"The :func:`django.views.decorators.cache.never_cache` decorator is applied "
"to prevent caching, ensuring the returned information is up-to-date."
msgstr ""

msgid ""
"Notice that the custom patterns are included *before* the regular admin "
"URLs: the admin URL patterns are very permissive and will match nearly "
"anything, so you'll usually want to prepend your custom URLs to the built-in "
"ones."
msgstr ""
"请注意，自定义模式包含在常规的管理 URL *之前*：管理 URL 模式是非常宽松的，几"
"乎可以匹配任何东西，所以你通常会希望将你的自定义 URL 添加到内置的 URL 中。"

msgid ""
"In this example, ``my_view`` will be accessed at ``/admin/myapp/mymodel/"
"my_view/`` (assuming the admin URLs are included at ``/admin/``.)"
msgstr ""
"在这个例子中，``my_view`` 将在 ``/admin/myapp/mymodel/my_view/`` 中被访问（假"
"设在 ``/admin/`` 中包含了管理的 URL）。"

msgid ""
"If the page is cacheable, but you still want the permission check to be "
"performed, you can pass a ``cacheable=True`` argument to ``AdminSite."
"admin_view()``::"
msgstr ""
"如果页面是可缓存的，但你仍然希望进行权限检查，你可以传递一个 "
"``cacheable=True`` 参数到 ``AdminSite.admin_view()`` ："

msgid ""
"``ModelAdmin`` views have ``model_admin`` attributes. Other ``AdminSite`` "
"views have ``admin_site`` attributes."
msgstr ""
"``ModelAdmin`` 视图有 ``model_admin`` 属性。其他 ``AdminSite`` 视图有 "
"``admin_site`` 属性。"

msgid ""
"Returns a :class:`~django.forms.ModelForm` class for use in the admin add "
"and change views, see :meth:`add_view` and :meth:`change_view`."
msgstr ""
"返回一个 :class:`~django.forms.ModelForm` 类，用于管理员添加和更改视图，参"
"见 :meth:`add_view` 和 :meth:`change_view`。"

msgid ""
"The base implementation uses :func:`~django.forms.models.modelform_factory` "
"to subclass :attr:`~form`, modified by attributes such as :attr:`~fields` "
"and :attr:`~exclude`. So, for example, if you wanted to offer additional "
"fields to superusers, you could swap in a different base form like so::"
msgstr ""
"基本实现使用 :func:`~django.forms.models.modelform_factory` 来子类 :attr:"
"`~form`，通过 :attr:`~fields` 和 :attr:`~exclude` 等属性进行修改。所以，例"
"如，如果你想为超级用户提供额外的字段，你可以像这样换一个不同的基本表单："

msgid ""
"You may also return a custom :class:`~django.forms.ModelForm` class directly."
msgstr "你也可以直接返回一个自定义的 :class:`~django.forms.ModelForm` 类。"

msgid ""
"Yields (``FormSet``, :class:`InlineModelAdmin`) pairs for use in admin add "
"and change views."
msgstr ""
"产生 (``FormSet``, :class:`InlineModelAdmin`) 对，用于管理添加和更改视图。"

msgid ""
"For example if you wanted to display a particular inline only in the change "
"view, you could override ``get_formsets_with_inlines`` as follows::"
msgstr ""
"例如，如果你想只在变化视图中显示一个特定的内联，你可以覆盖 "
"``get_formsets_with_inlines`` 如下："

msgid ""
"The ``formfield_for_foreignkey`` method on a ``ModelAdmin`` allows you to "
"override the default formfield for a foreign keys field. For example, to "
"return a subset of objects for this foreign key field based on the user::"
msgstr ""
"``ModelAdmin`` 上的 ``formfield_for_foreignkey`` 方法允许你覆盖外键字段的默"
"认 formfield。例如，要根据用户返回这个外键字段的对象子集："

msgid ""
"This uses the ``HttpRequest`` instance to filter the ``Car`` foreign key "
"field to only display the cars owned by the ``User`` instance."
msgstr ""
"这使用 ``HttpRequest`` 实例过滤 ``Car`` 外键字段，只显示 ``User`` 实例拥有的"
"汽车。"

msgid ""
"For more complex filters, you can use ``ModelForm.__init__()`` method to "
"filter based on an ``instance`` of your model (see :ref:`fields-which-handle-"
"relationships`). For example::"
msgstr ""
"对于更复杂的过滤器，你可以使用 ``ModelForm.__init__()`` 方法来基于你的模型的 "
"``instance`` 进行过滤（参见 :ref:`fields-which-handle-relationships`）。例"
"如："

msgid ""
"Like the ``formfield_for_foreignkey`` method, the "
"``formfield_for_manytomany`` method can be overridden to change the default "
"formfield for a many to many field. For example, if an owner can own "
"multiple cars and cars can belong to multiple owners -- a many to many "
"relationship -- you could filter the ``Car`` foreign key field to only "
"display the cars owned by the ``User``::"
msgstr ""
"与 ``formfield_for_foreignkey`` 方法一样，``formfield_for_manytomany`` 方法也"
"可以被重写，以改变多对多字段的默认字段。例如，如果一个车主可以拥有多辆汽车，"
"而汽车可以属于多个车主 —— 多对多关系 —— 你可以过滤 ``Car`` 外键字段，只显示 "
"``User`` ："

msgid ""
"Like the ``formfield_for_foreignkey`` and ``formfield_for_manytomany`` "
"methods, the ``formfield_for_choice_field`` method can be overridden to "
"change the default formfield for a field that has declared choices. For "
"example, if the choices available to a superuser should be different than "
"those available to regular staff, you could proceed as follows::"
msgstr ""
"与 ``formfield_for_foreignkey`` 和 ``formfield_for_manytomany`` 方法一样，"
"``formfield_for_choice_field`` 方法可以被重写，以改变已声明选择的字段的默认字"
"段。例如，如果超级用户的选择与普通员工的选择不同，你可以按以下步骤进行："

msgid "``choices`` limitations"
msgstr ""

msgid ""
"Any ``choices`` attribute set on the formfield will be limited to the form "
"field only. If the corresponding field on the model has choices set, the "
"choices provided to the form must be a valid subset of those choices, "
"otherwise the form submission will fail with a :exc:`~django.core.exceptions."
"ValidationError` when the model itself is validated before saving."
msgstr ""
"任何在表单字段上设置的 ``choices`` 属性将只限于表单字段。如果模型上对应的字段"
"设置了选择，那么提供给表单的选择必须是这些选择的有效子集，否则在保存前对模型"
"本身进行验证时，表单提交将以一个 :exc:`~django.core.exceptions."
"ValidationError` 失败。"

msgid ""
"Returns the ``Changelist`` class to be used for listing. By default, "
"``django.contrib.admin.views.main.ChangeList`` is used. By inheriting this "
"class you can change the behavior of the listing."
msgstr ""
"返回用于列表的 ``Changelist`` 类。默认情况下，使用的是 ``django.contrib."
"admin.views.main.ChangeList``。通过继承这个类，你可以改变列表的行为。"

msgid ""
"Returns a :class:`~django.forms.ModelForm` class for use in the ``Formset`` "
"on the changelist page. To use a custom form, for example::"
msgstr ""
"返回一个 :class:`~django.forms.ModelForm` 类，供变更列表页面中的 ``Formset`` "
"使用。要使用一个自定义表单，例如："

msgid ""
"If you define the ``Meta.model`` attribute on a :class:`~django.forms."
"ModelForm`, you must also define the ``Meta.fields`` attribute (or the "
"``Meta.exclude`` attribute). However, ``ModelAdmin`` ignores this value, "
"overriding it with the :attr:`ModelAdmin.list_editable` attribute. The "
"easiest solution is to omit the ``Meta.model`` attribute, since "
"``ModelAdmin`` will provide the correct model to use."
msgstr ""
"如果你在 :class:`~django.forms.ModelForm` 上定义了 ``Meta.model`` 属性，你也"
"必须定义 ``Meta.fields`` 属性（或 ``Meta.exclude`` 属性）。然而，"
"``ModelAdmin`` 会忽略这个值，用 :attr:`ModelAdmin.list_editable` 属性来覆盖"
"它。最简单的解决办法是省略 ``Meta.model`` 属性，因为 ``ModelAdmin`` 将提供正"
"确的模型使用。"

msgid ""
"Returns a :ref:`ModelFormSet <model-formsets>` class for use on the "
"changelist page if :attr:`~ModelAdmin.list_editable` is used. To use a "
"custom formset, for example::"
msgstr ""
"如果使用了 :attr:`~ModelAdmin.list_editable`，则返回一个 :ref:`ModelFormSet "
"<model-formsets>` 类，供变更列表页面使用。要使用自定义表单集，例如："

msgid ""
"The objects in the changelist page can be filtered with lookups from the "
"URL's query string. This is how :attr:`list_filter` works, for example. The "
"lookups are similar to what's used in :meth:`.QuerySet.filter` (e.g. "
"``user__email=user@example.com``). Since the lookups in the query string can "
"be manipulated by the user, they must be sanitized to prevent unauthorized "
"data exposure."
msgstr ""
"变更列表页面中的对象可以通过 URL 的查询字符串进行过滤。例如 :attr:"
"`list_filter` 就是这样工作的。这些查询类似于 :meth:`.QuerySet.filter` （例如 "
"``user__email=user@example.com``）。由于用户可以对查询字符串中的查找进行操"
"作，因此必须对它们进行处理，以防止未经授权的数据暴露。"

msgid ""
"The ``lookup_allowed()`` method is given a lookup path from the query string "
"(e.g. ``'user__email'``) and the corresponding value (e.g. ``'user@example."
"com'``), and returns a boolean indicating whether filtering the changelist's "
"``QuerySet`` using the parameters is permitted. If ``lookup_allowed()`` "
"returns ``False``, ``DisallowedModelAdminLookup`` (subclass of :exc:`~django."
"core.exceptions.SuspiciousOperation`) is raised."
msgstr ""
"``lookup_allowed()`` 方法从查询字符串（如 ``'user__email'``）和相应的值（如"
"``'user@example.com'``）中得到一个查找路径，并返回一个布尔值，表示是否允许使"
"用参数过滤变更列表的 ``QuerySet``。如果 ``lookup_allowed()`` 返回 ``False``，"
"则会引发 ``DisallowedModelAdminLookup`` （:exc:`~django.core.exceptions."
"SuspiciousOperation` 的子类）。"

msgid ""
"By default, ``lookup_allowed()`` allows access to a model's local fields, "
"field paths used in :attr:`~ModelAdmin.list_filter` (but not paths from :"
"meth:`~ModelAdmin.get_list_filter`), and lookups required for :attr:`~django."
"db.models.ForeignKey.limit_choices_to` to function correctly in :attr:"
"`~django.contrib.admin.ModelAdmin.raw_id_fields`."
msgstr ""
"默认情况下，``lookup_allowed()`` 允许访问模型的本地字段、在 :attr:"
"`~ModelAdmin.list_filter` 中使用的字段路径（但不包括 :meth:`~ModelAdmin. "
"get_list_filter`）中使用的字段路径，以及 :attr:`~django.db.models.ForeignKey."
"limit_choices_to` 在 :attr:`~django.contrib.admin.ModelAdmin.raw_id_fields` "
"中正确运行所需的查找。"

msgid ""
"Override this method to customize the lookups permitted for your :class:"
"`~django.contrib.admin.ModelAdmin` subclass."
msgstr ""
"重写这个方法来定制你的 :class:`~django.contrib.admin.ModelAdmin` 子类允许的查"
"找。"

msgid ""
"Should return ``True`` if viewing ``obj`` is permitted, ``False`` otherwise. "
"If obj is ``None``, should return ``True`` or ``False`` to indicate whether "
"viewing of objects of this type is permitted in general (e.g., ``False`` "
"will be interpreted as meaning that the current user is not permitted to "
"view any object of this type)."
msgstr ""
"如果允许查看 ``obj``，应返回 ``True``，否则返回 ``False``。如果 obj 是 "
"``None``，应返回 ``True`` 或 ``False`` 表示是否允许查看该类型的对象（例如，"
"``False`` 将被解释为当前用户不允许查看该类型的任何对象）。"

msgid ""
"The default implementation returns ``True`` if the user has either the "
"\"change\" or \"view\" permission."
msgstr "如果用户有 “更改” 或 “查看” 权限，默认的实现将返回 ``True``。"

msgid ""
"Should return ``True`` if adding an object is permitted, ``False`` otherwise."
msgstr "如果允许添加对象，应返回 ``True``，否则返回 ``False``。"

msgid ""
"Should return ``True`` if editing ``obj`` is permitted, ``False`` otherwise. "
"If ``obj`` is ``None``, should return ``True`` or ``False`` to indicate "
"whether editing of objects of this type is permitted in general (e.g., "
"``False`` will be interpreted as meaning that the current user is not "
"permitted to edit any object of this type)."
msgstr ""
"如果允许编辑 ``obj``，应返回 ``True``，否则应返回 ``False``。如果 ``obj`` 是 "
"``None``，应返回 ``True`` 或 ``False`` 表示是否允许编辑该类型对象（例如，"
"``False`` 将被解释为当前用户不允许编辑该类型的任何对象）。"

msgid ""
"Should return ``True`` if deleting ``obj`` is permitted, ``False`` "
"otherwise. If ``obj`` is ``None``, should return ``True`` or ``False`` to "
"indicate whether deleting objects of this type is permitted in general (e."
"g., ``False`` will be interpreted as meaning that the current user is not "
"permitted to delete any object of this type)."
msgstr ""
"如果允许删除 ``obj``，应返回 ``True``，否则返回 ``False``。如果 ``obj`` 是 "
"``None``，应返回 ``True`` 或 ``False``，以表明是否允许删除该类型的对象（例"
"如，``False`` 将被解释为当前用户不允许删除该类型的任何对象）。"

msgid ""
"Should return ``True`` if displaying the module on the admin index page and "
"accessing the module's index page is permitted, ``False`` otherwise. Uses :"
"meth:`User.has_module_perms() <django.contrib.auth.models.User."
"has_module_perms>` by default. Overriding it does not restrict access to the "
"view, add, change, or delete views, :meth:`~ModelAdmin."
"has_view_permission`, :meth:`~ModelAdmin.has_add_permission`, :meth:"
"`~ModelAdmin.has_change_permission`, and :meth:`~ModelAdmin."
"has_delete_permission` should be used for that."
msgstr ""
"如果允许在管理员索引页上显示模块和访问模块的索引页，应该返回 ``True``，否则返"
"回 ``False``。默认使用 :meth:`User.has_module_perms() <django.contrib.auth."
"models.User.has_module_perms>`。覆盖它并不限制对视图的访问，添加、更改或删除"
"视图， :meth:`~ModelAdmin.has_view_permission`、 :meth:`~ModelAdmin."
"has_add_permission`、 :meth:`~ModelAdmin.has_change_permission` 和 :meth:"
"`~ModelAdmin.has_delete_permission` 应该用于此。"

msgid ""
"The ``get_queryset`` method on a ``ModelAdmin`` returns a :class:`~django.db."
"models.query.QuerySet` of all model instances that can be edited by the "
"admin site. One use case for overriding this method is to show objects owned "
"by the logged-in user::"
msgstr ""
"``ModelAdmin`` 上的 ``get_queryset`` 方法返回一个 :class:`~django.db.models."
"query.QuerySet` 的所有模型实例，这些实例可以被管理网站编辑。覆盖该方法的一个"
"用例是显示登录用户拥有的对象："

msgid ""
"Sends a message to the user using the :mod:`django.contrib.messages` "
"backend.  See the :ref:`custom ModelAdmin example <custom-admin-action>`."
msgstr ""
"使用 :mod:`django.contrib.messages` 后台向用户发送消息。 参见 :ref:`自定义 "
"ModelAdmin 示例 <custom-admin-action>`。"

msgid ""
"Keyword arguments allow you to change the message level, add extra CSS tags, "
"or fail silently if the ``contrib.messages`` framework is not installed. "
"These keyword arguments match those for :func:`django.contrib.messages."
"add_message`, see that function's documentation for more details. One "
"difference is that the level may be passed as a string label in addition to "
"integer/constant."
msgstr ""
"关键字参数允许你改变消息的级别，添加额外的 CSS 标签，或者在没有安装 "
"``contrib.messages`` 框架的情况下无声地失败。这些关键字参数与 :func:`django."
"contrib.messages.add_message` 的参数一致，更多细节请参见该函数的文档。一个不"
"同的地方是，除了整数／常量之外，级别还可以作为字符串标签传递。"

msgid ""
"Returns an instance of the paginator to use for this view. By default, "
"instantiates an instance of :attr:`paginator`."
msgstr ""
"返回要用于该视图的分页器实例。默认情况下，实例化一个 :attr:`paginator` 的实"
"例。"

msgid ""
"Determines the :class:`~django.http.HttpResponse` for the :meth:`add_view` "
"stage."
msgstr "确定 :meth:`add_view` 阶段的 :class:`~django.http.HttpResponse`。"

msgid ""
"``response_add`` is called after the admin form is submitted and just after "
"the object and all the related instances have been created and saved. You "
"can override it to change the default behavior after the object has been "
"created."
msgstr ""
"``response_add`` 在提交管理表单后，对象和所有相关实例被创建和保存后被调用。你"
"可以覆盖它来改变对象创建后的默认行为。"

msgid ""
"Determines the :class:`~django.http.HttpResponse` for the :meth:"
"`change_view` stage."
msgstr "确定 :meth:`change_view` 阶段的 :class:`~django.http.HttpResponse`。"

msgid ""
"``response_change`` is called after the admin form is submitted and just "
"after the object and all the related instances have been saved. You can "
"override it to change the default behavior after the object has been changed."
msgstr ""
"``response_change`` 在管理表单提交后，对象和所有相关实例被保存后被调用。你可"
"以覆盖它来改变对象被改变后的默认行为。"

msgid ""
"Determines the :class:`~django.http.HttpResponse` for the :meth:"
"`delete_view` stage."
msgstr "为 :meth:`delete_view` 阶段确定 :class:`~django.http.HttpResponse`。"

msgid ""
"``response_delete`` is called after the object has been deleted. You can "
"override it to change the default behavior after the object has been deleted."
msgstr ""
"``response_delete`` 在对象被删除后被调用。你可以覆盖它来改变对象被删除后的默"
"认行为。"

msgid "``obj_display`` is a string with the name of the deleted object."
msgstr "``obj_display`` 是删除对象名称的字符串。"

msgid ""
"``obj_id`` is the serialized identifier used to retrieve the object to be "
"deleted."
msgstr "``obj_id`` 是用于检索要删除的对象的序列化标识符。"

msgid ""
"A hook for customizing the keyword arguments passed to the constructor of a "
"formset. For example, to pass ``request`` to formset forms::"
msgstr ""
"一个用于自定义传递给表单集构造函数的关键字参数的钩子。例如，将 ``request`` 传"
"递给表单集表单："

msgid "You can also use it to set ``initial`` for formset forms."
msgstr ""

msgid ""
"A hook for the initial data on admin change forms. By default, fields are "
"given initial values from ``GET`` parameters. For instance, ``?"
"name=initial_value`` will set the ``name`` field's initial value to be "
"``initial_value``."
msgstr ""
"一个钩子，用于管理更改表格的初始数据。默认情况下，字段的初始值来自 ``GET`` 参"
"数。例如，``?name=initial_value`` 将把 ``name`` 字段的初始值设置为 "
"``initial_value``。"

msgid ""
"This method should return a dictionary in the form ``{'fieldname': "
"'fieldval'}``::"
msgstr "这个方法应该返回一个形式为 ``{'fieldname': 'fieldval'}`` 的字典："

msgid ""
"A hook for customizing the deletion process of the :meth:`delete_view` and "
"the \"delete selected\" :doc:`action <actions>`."
msgstr ""
"一个钩子，用于自定义 :meth:`delete_view` 和 “删除已选” :doc:`动作 <actions>` "
"的删除过程。"

msgid ""
"The ``objs`` argument is a homogeneous iterable of objects (a ``QuerySet`` "
"or a list of model instances) to be deleted, and ``request`` is the :class:"
"`~django.http.HttpRequest`."
msgstr ""
"``objs`` 参数是要删除的对象（一个 ``QuerySet`` 或模型实例列表）的等价可迭代对"
"象，``request`` 是 :class:`~django.http.HttpRequest`。"

msgid ""
"This method must return a 4-tuple of ``(deleted_objects, model_count, "
"perms_needed, protected)``."
msgstr ""
"这个方法必须返回一个四元元组 ``(delete_objects, model_count, perms_needed, "
"protected)``。"

msgid ""
"``deleted_objects`` is a list of strings representing all the objects that "
"will be deleted. If there are any related objects to be deleted, the list is "
"nested and includes those related objects. The list is formatted in the "
"template using the :tfilter:`unordered_list` filter."
msgstr ""
"``deleted_objects`` 是一个代表所有将被删除对象的字符串列表。如果有任何相关的"
"对象要删除，则列表是嵌套的，包括这些相关对象。该列表在模板中使用 :tfilter:"
"`unordered_list` 过滤器进行格式化。"

msgid ""
"``model_count`` is a dictionary mapping each model's :attr:`~django.db."
"models.Options.verbose_name_plural` to the number of objects that will be "
"deleted."
msgstr ""
"``model_count`` 是一个将每个模型的 :attr:`~django.db.models.Options."
"verbose_name_plural` 映射到将被删除的对象数量的字典。"

msgid ""
"``perms_needed`` is a set of :attr:`~django.db.models.Options."
"verbose_name`\\s of the models that the user doesn't have permission to "
"delete."
msgstr ""
"``perms_needed`` 是一组 :attr:`~django.db.models.Options.verbose_name` 的用户"
"没有权限删除的模型。"

msgid ""
"``protected`` is a list of strings representing of all the protected related "
"objects that can't be deleted. The list is displayed in the template."
msgstr ""
"``protected`` 是一个字符串列表，代表所有不能删除的受保护相关对象。该列表显示"
"在模板中。"

msgid "Other methods"
msgstr "其他方法"

msgid "Django view for the model instance addition page. See note below."
msgstr "模型实例添加页面的 Django 视图。见下面的说明。"

msgid "Django view for the model instance editing page. See note below."
msgstr "模型实例编辑页面的 Django 视图。见下面的说明。"

msgid ""
"Django view for the model instances change list/actions page. See note below."
msgstr "模型实例变更列表／动作页面的 Django 视图。见下面的说明。"

msgid ""
"Django view for the model instance(s) deletion confirmation page. See note "
"below."
msgstr "模型实例删除确认页面的 Django 视图。参见下面的说明。"

msgid ""
"Django view for the page that shows the modification history for a given "
"model instance."
msgstr "Django 视图用于显示给定模型实例的修改历史的页面。"

msgid "Pagination was added."
msgstr ""

msgid ""
"Unlike the hook-type ``ModelAdmin`` methods detailed in the previous "
"section, these five methods are in reality designed to be invoked as Django "
"views from the admin application URL dispatching handler to render the pages "
"that deal with model instances CRUD operations. As a result, completely "
"overriding these methods will significantly change the behavior of the admin "
"application."
msgstr ""
"与上一节中详细介绍的钩子类型的 ``ModelAdmin`` 方法不同，这五个方法实际上是被"
"设计成作为 Django 视图从管理应用的 URL 调度处理程序中调用，以渲染处理模型实"
"例 CRUD 操作的页面。因此，完全覆盖这些方法将显著改变管理员应用程序的行为。"

msgid ""
"One common reason for overriding these methods is to augment the context "
"data that is provided to the template that renders the view. In the "
"following example, the change view is overridden so that the rendered "
"template is provided some extra mapping data that would not otherwise be "
"available::"
msgstr ""
"覆盖这些方法的一个常见原因是为了增强提供给渲染视图的模板的上下文数据。在下面"
"的例子中，更改视图被覆盖，以便为渲染模板提供一些额外的映射数据，否则这些数据"
"将无法使用："

msgid ""
"These views return :class:`~django.template.response.TemplateResponse` "
"instances which allow you to easily customize the response data before "
"rendering. For more details, see the :doc:`TemplateResponse documentation </"
"ref/template-response>`."
msgstr ""
"这些视图返回 :class:`~django.template.response.TemplateResponse` 实例，允许你"
"在渲染前轻松定制响应数据。更多细节，请看 :doc:`TemplateResponse 文档 </ref/"
"template-response>`。"

msgid "``ModelAdmin`` asset definitions"
msgstr "``ModelAdmin`` 静态资源定义"

msgid ""
"There are times where you would like add a bit of CSS and/or JavaScript to "
"the add/change views. This can be accomplished by using a ``Media`` inner "
"class on your ``ModelAdmin``::"
msgstr ""
"有时你会想在添加／更改视图时添加一点 CSS 和／或 JavaScript。这可以通过在你的 "
"``ModelAdmin`` 上使用 ``Media`` 内类来实现："

msgid ""
"The :doc:`staticfiles app </ref/contrib/staticfiles>` prepends :setting:"
"`STATIC_URL` (or :setting:`MEDIA_URL` if :setting:`STATIC_URL` is ``None``) "
"to any asset paths. The same rules apply as :ref:`regular asset definitions "
"on forms <form-asset-paths>`."
msgstr ""
":doc:`staticfiles app </ref/contrib/staticfiles>` 将 :setting:`STATIC_URL` "
"（如果 :setting:`STATIC_URL` 是 ``None``，则 :setting:`MEDIA_URL`）预先加入任"
"何资产路径。同样的规则适用于:ref:`表单上定义的静态资源 <form-asset-paths>`。"

msgid "jQuery"
msgstr "jQuery"

msgid "Django admin JavaScript makes use of the `jQuery`_ library."
msgstr "Django 管理 JavaScript 使用了 `jQuery`_ 库。"

msgid ""
"To avoid conflicts with user-supplied scripts or libraries, Django's jQuery "
"(version 3.6.4) is namespaced as ``django.jQuery``. If you want to use "
"jQuery in your own admin JavaScript without including a second copy, you can "
"use the ``django.jQuery`` object on changelist and add/edit views. Also, "
"your own admin forms or widgets depending on ``django.jQuery`` must specify "
"``js=['admin/js/jquery.init.js', …]`` when :ref:`declaring form media assets "
"<assets-as-a-static-definition>`."
msgstr ""

msgid "jQuery was upgraded from 3.6.0 to 3.6.4."
msgstr ""

msgid ""
"The :class:`ModelAdmin` class requires jQuery by default, so there is no "
"need to add jQuery to your ``ModelAdmin``’s list of media resources unless "
"you have a specific need. For example, if you require the jQuery library to "
"be in the global namespace (for example when using third-party jQuery "
"plugins) or if you need a newer version of jQuery, you will have to include "
"your own copy."
msgstr ""
":class:`ModelAdmin` 类默认需要 jQuery，所以除非你有特殊需要，否则不需要将 "
"jQuery 添加到你的 ``ModelAdmin`` 的媒体资源列表中。例如，如果你要求 jQuery 库"
"在全局命名空间中（例如在使用第三方 jQuery 插件时），或者你需要一个较新版本的 "
"jQuery，你将不得不包含自己的副本。"

msgid ""
"Django provides both uncompressed and 'minified' versions of jQuery, as "
"``jquery.js`` and ``jquery.min.js`` respectively."
msgstr ""
"Django 提供了 jQuery 的非压缩和 “最小化” 版本，分别为 ``jquery.js`` 和 "
"``jquery.min.js``。"

msgid ""
":class:`ModelAdmin` and :class:`InlineModelAdmin` have a ``media`` property "
"that returns a list of ``Media`` objects which store paths to the JavaScript "
"files for the forms and/or formsets. If :setting:`DEBUG` is ``True`` it will "
"return the uncompressed versions of the various JavaScript files, including "
"``jquery.js``; if not, it will return the 'minified' versions."
msgstr ""
":class:`ModelAdmin` 和 :class:`InlineModelAdmin` 有一个 ``media`` 属性，它返"
"回一个 ``Media`` 对象的列表，其中存储了表单和／或表单集的 JavaScript 文件的路"
"径。如果 :setting:`DEBUG` 是 ``True``，它将返回各种 JavaScript 文件的未压缩版"
"本，包括 ``jquery.js``；如果不是，它将返回 “最小化” 版本。"

msgid "Adding custom validation to the admin"
msgstr "在管理中添加自定义验证"

msgid ""
"You can also add custom validation of data in the admin. The automatic admin "
"interface reuses :mod:`django.forms`, and the ``ModelAdmin`` class gives you "
"the ability to define your own form::"
msgstr ""
"你也可以在管理中添加自定义的数据验证。自动管理界面重用 :mod:`django.forms`，"
"``ModelAdmin`` 类让你能够定义你自己的表单："

msgid ""
"``MyArticleAdminForm`` can be defined anywhere as long as you import where "
"needed. Now within your form you can add your own custom validation for any "
"field::"
msgstr ""
"``MyArticleAdminForm`` 可以在任何地方定义，只要你在需要的地方导入。现在，在你"
"的表单中，你可以为任何字段添加自己的自定义验证："

msgid ""
"It is important you use a ``ModelForm`` here otherwise things can break. See "
"the :doc:`forms </ref/forms/index>` documentation on :doc:`custom validation "
"</ref/forms/validation>` and, more specifically, the :ref:`model form "
"validation notes <overriding-modelform-clean-method>` for more information."
msgstr ""
"在这里使用 ``ModelForm`` 是很重要的，否则可能会出问题。更多信息请参见 :doc:`"
"表单 </ref/forms/index>` 文档中的 :doc:`自定义验证器 </ref/forms/"
"validation>` 和 :ref:`验证器返回的模型注解 <overriding-modelform-clean-"
"method>`。"

msgid "``InlineModelAdmin`` objects"
msgstr "``InlineModelAdmin`` 对象"

msgid ""
"The admin interface has the ability to edit models on the same page as a "
"parent model. These are called inlines. Suppose you have these two models::"
msgstr ""
"管理界面可以在同一页面上与父模型编辑模型。这些被称为内联。假设你有这两个模"
"型："

msgid ""
"You can edit the books authored by an author on the author page. You add "
"inlines to a model by specifying them in a ``ModelAdmin.inlines``::"
msgstr ""
"你可以在作者页面上编辑作者撰写的书籍。你可以通过在 ``ModelAdmin.inlines`` 中"
"指定内联来添加到模型中："

msgid "Django provides two subclasses of ``InlineModelAdmin`` and they are:"
msgstr "Django 提供了两个 ``InlineModelAdmin`` 的子类，它们是："

msgid ":class:`~django.contrib.admin.TabularInline`"
msgstr ":class:`~django.contrib.admin.TabularInline`"

msgid ":class:`~django.contrib.admin.StackedInline`"
msgstr ":class:`~django.contrib.admin.StackedInline`"

msgid ""
"The difference between these two is merely the template used to render them."
msgstr "这两者之间的区别仅仅是用于呈现它们的模板。"

msgid "``InlineModelAdmin`` options"
msgstr "``InlineModelAdmin`` 选项"

msgid ""
"``InlineModelAdmin`` shares many of the same features as ``ModelAdmin``, and "
"adds some of its own (the shared features are actually defined in the "
"``BaseModelAdmin`` superclass). The shared features are:"
msgstr ""
"``InlineModelAdmin`` 与 ``ModelAdmin`` 共享许多相同的功能，并增加了一些自己的"
"功能（共享功能实际上是在 ``BaseModelAdmin`` 超级类中定义的）。共享的功能有："

msgid ":attr:`~InlineModelAdmin.form`"
msgstr ":attr:`~InlineModelAdmin.form`"

msgid ":attr:`~ModelAdmin.fieldsets`"
msgstr ":attr:`~ModelAdmin.fieldsets`"

msgid ":attr:`~ModelAdmin.fields`"
msgstr ":attr:`~ModelAdmin.fields`"

msgid ":attr:`~ModelAdmin.formfield_overrides`"
msgstr ":attr:`~ModelAdmin.formfield_overrides`"

msgid ":attr:`~ModelAdmin.exclude`"
msgstr ":attr:`~ModelAdmin.exclude`"

msgid ":attr:`~ModelAdmin.filter_horizontal`"
msgstr ":attr:`~ModelAdmin.filter_horizontal`"

msgid ":attr:`~ModelAdmin.filter_vertical`"
msgstr ":attr:`~ModelAdmin.filter_vertical`"

msgid ":attr:`~ModelAdmin.ordering`"
msgstr ":attr:`~ModelAdmin.ordering`"

msgid ":attr:`~ModelAdmin.prepopulated_fields`"
msgstr ":attr:`~ModelAdmin.prepopulated_fields`"

msgid ":meth:`~ModelAdmin.get_fieldsets`"
msgstr ":meth:`~ModelAdmin.get_fieldsets`"

msgid ":meth:`~ModelAdmin.get_queryset`"
msgstr ":meth:`~ModelAdmin.get_queryset`"

msgid ":attr:`~ModelAdmin.radio_fields`"
msgstr ":attr:`~ModelAdmin.radio_fields`"

msgid ":attr:`~ModelAdmin.readonly_fields`"
msgstr ":attr:`~ModelAdmin.readonly_fields`"

msgid ":attr:`~InlineModelAdmin.raw_id_fields`"
msgstr ":attr:`~InlineModelAdmin.raw_id_fields`"

msgid ":meth:`~ModelAdmin.formfield_for_choice_field`"
msgstr ":meth:`~ModelAdmin.formfield_for_choice_field`"

msgid ":meth:`~ModelAdmin.formfield_for_foreignkey`"
msgstr ":meth:`~ModelAdmin.formfield_for_foreignkey`"

msgid ":meth:`~ModelAdmin.formfield_for_manytomany`"
msgstr ":meth:`~ModelAdmin.formfield_for_manytomany`"

msgid ":meth:`~ModelAdmin.has_module_permission`"
msgstr ":meth:`~ModelAdmin.has_module_permission`"

msgid "The ``InlineModelAdmin`` class adds or customizes:"
msgstr "``InlineModelAdmin`` 类添加或自定义："

msgid "The model which the inline is using. This is required."
msgstr "内联使用的模型。这是必须的。"

msgid ""
"The name of the foreign key on the model. In most cases this will be dealt "
"with automatically, but ``fk_name`` must be specified explicitly if there "
"are more than one foreign key to the same parent model."
msgstr ""
"模型上外键的名称。在大多数情况下会自动处理，但如果同一父模型有多个外键，则必"
"须明确指定 ``fk_name``。"

msgid ""
"This defaults to :class:`~django.forms.models.BaseInlineFormSet`. Using your "
"own formset can give you many possibilities of customization. Inlines are "
"built around :ref:`model formsets <model-formsets>`."
msgstr ""
"默认为 :class:`~django.forms.models.BaseInlineFormSet`。使用你自己的表单集可"
"以给你提供很多定制的可能性。内联是围绕 :ref:`模型表单集 <model-formsets>` 建"
"立的。"

msgid ""
"The value for ``form`` defaults to ``ModelForm``. This is what is passed "
"through to :func:`~django.forms.models.inlineformset_factory` when creating "
"the formset for this inline."
msgstr ""
"``form`` 的值默认为 ``ModelForm``。当为这个内联创建表单集时，会通过 :func:"
"`~django.forms.models.inlineformset_factory` 传递这个值。"

msgid ""
"When writing custom validation for ``InlineModelAdmin`` forms, be cautious "
"of writing validation that relies on features of the parent model. If the "
"parent model fails to validate, it may be left in an inconsistent state as "
"described in the warning in :ref:`validation-on-modelform`."
msgstr ""
"当为 ``InlineModelAdmin`` 表单编写自定义验证时，要谨慎编写依赖于父模型特征的"
"验证。如果父模型未能验证，它可能会处于不一致的状态，如 :ref:`validation-on-"
"modelform` 中的警告所述。"

msgid ""
"A list or tuple containing extra CSS classes to apply to the fieldset that "
"is rendered for the inlines. Defaults to ``None``. As with classes "
"configured in :attr:`~ModelAdmin.fieldsets`, inlines with a ``collapse`` "
"class will be initially collapsed and their header will have a small "
"\"show\" link."
msgstr ""
"一个包含额外 CSS 类的列表或元组，应用于为内联渲染的字段集。默认值为 "
"``None``。如同在 :attr:`~ModelAdmin.fieldsets` 中配置的类一样，带有 "
"``collapse`` 类的内联将被初始折叠，并且它们的标题将有一个小的 “显示” 链接。"

msgid ""
"This controls the number of extra forms the formset will display in addition "
"to the initial forms. Defaults to 3. See the :doc:`formsets documentation </"
"topics/forms/formsets>` for more information."
msgstr ""
"控制表单集在初始表格之外显示的额外表单数量，默认为 3 个。更多信息请参见 :doc:"
"`表单集文档 </topics/forms/formsets>`。"

msgid ""
"For users with JavaScript-enabled browsers, an \"Add another\" link is "
"provided to enable any number of additional inlines to be added in addition "
"to those provided as a result of the ``extra`` argument."
msgstr ""
"对于使用支持 JavaScript 的浏览器的用户，提供了一个 “添加另一个” 的链接，以便"
"在 ``extra`` 参数提供的内联行之外，再添加任意数量的内联行。"

msgid ""
"The dynamic link will not appear if the number of currently displayed forms "
"exceeds ``max_num``, or if the user does not have JavaScript enabled."
msgstr ""
"如果当前显示的表单数量超过 ``max_num``，或者用户没有启用 JavaScript，动态链接"
"将不会出现。"

msgid ""
":meth:`InlineModelAdmin.get_extra` also allows you to customize the number "
"of extra forms."
msgstr ":meth:`InlineModelAdmin.get_extra` 还允许你自定义额外表格的数量。"

msgid ""
"This controls the maximum number of forms to show in the inline. This "
"doesn't directly correlate to the number of objects, but can if the value is "
"small enough. See :ref:`model-formsets-max-num` for more information."
msgstr ""
"这控制了内联中显示表单的最大数量。这并不直接与对象的数量相关，但如果该值足够"
"小，则可以。更多信息请参见 :ref:`model-formets-max-num`。"

msgid ""
":meth:`InlineModelAdmin.get_max_num` also allows you to customize the "
"maximum number of extra forms."
msgstr ""
":meth:`InlineModelAdmin.get_max_num` 还允许你自定义额外表单的最大数量。"

msgid ""
"This controls the minimum number of forms to show in the inline. See :func:"
"`~django.forms.models.modelformset_factory` for more information."
msgstr ""
"这控制了内联中要显示的表单的最少数量。更多信息请参见 :func:`~django.forms."
"models.modelformset_factory`。"

msgid ""
":meth:`InlineModelAdmin.get_min_num` also allows you to customize the "
"minimum number of displayed forms."
msgstr ""
":meth:`InlineModelAdmin.get_min_num` 还允许你自定义显示的最小表单数量。"

msgid "The template used to render the inline on the page."
msgstr "用于在页面上呈现内联的模板。"

msgid ""
"An override to the :attr:`~django.db.models.Options.verbose_name` from the "
"model's inner ``Meta`` class."
msgstr ""
"对模型内部 ``Meta`` 类中的 :attr:`~django.db.models.Options.verbose_name` 的"
"重写。"

msgid ""
"An override to the :attr:`~django.db.models.Options.verbose_name_plural` "
"from the model's inner ``Meta`` class. If this isn't given and the :attr:`."
"InlineModelAdmin.verbose_name` is defined, Django will use :attr:`."
"InlineModelAdmin.verbose_name` + ``'s'``."
msgstr ""
"对 :attr:`~django.db.models.Options.verbose_name_plural` 的重写，来自模型内部"
"的 ``Meta`` 类。如果这个没有给出，而 :attr:`.InlineModelAdmin.verbose_name` "
"被定义，Django 将使用 :attr:`.InlineModelAdmin.verbose_name` + ``'s'``。"

msgid ""
"Specifies whether or not inline objects can be deleted in the inline. "
"Defaults to ``True``."
msgstr "指定是否可以在内联中删除内联对象。默认为 ``True``。"

msgid ""
"Specifies whether or not inline objects that can be changed in the admin "
"have a link to the change form. Defaults to ``False``."
msgstr "指定在管理中可以更改的内联对象是否有更改表单的链接。默认为 ``False``。"

msgid ""
"Returns a :class:`~django.forms.models.BaseInlineFormSet` class for use in "
"admin add/change views. ``obj`` is the parent object being edited or "
"``None`` when adding a new parent. See the example for :class:`ModelAdmin."
"get_formsets_with_inlines`."
msgstr ""
"返回一个 :class:`~django.forms.models.BaseInlineFormSet` 类，用于管理添加／更"
"改视图。``obj`` 是被编辑的父对象，或者当添加一个新的父对象时，返回 ``None``。"
"参见 :class:`ModelAdmin.get_formsets_with_inlines` 的例子。"

msgid ""
"Returns the number of extra inline forms to use. By default, returns the :"
"attr:`InlineModelAdmin.extra` attribute."
msgstr ""
"返回要使用的额外内联表单的数量。默认情况下，返回 :attr:`InlineModelAdmin."
"extra` 属性。"

msgid ""
"Override this method to programmatically determine the number of extra "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)::"
msgstr ""
"重写此方法，以编程方式确定额外内联表格的数量。例如，可以根据模型实例（作为关"
"键字参数 ``obj`` 传递）："

msgid ""
"Returns the maximum number of extra inline forms to use. By default, returns "
"the :attr:`InlineModelAdmin.max_num` attribute."
msgstr ""
"返回要使用的额外内联表单的最大数量。默认情况下，返回 :attr:`InlineModelAdmin."
"max_num` 属性。"

msgid ""
"Override this method to programmatically determine the maximum number of "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)::"
msgstr ""
"重写此方法，以编程方式确定内联表格的最大数量。例如，可以根据模型实例（作为关"
"键字参数 ``obj`` 传递）："

msgid ""
"Returns the minimum number of inline forms to use. By default, returns the :"
"attr:`InlineModelAdmin.min_num` attribute."
msgstr ""
"返回要使用的内联表单的最小数量。默认情况下，返回 :attr:`InlineModelAdmin."
"min_num` 属性。"

msgid ""
"Override this method to programmatically determine the minimum number of "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)."
msgstr ""
"重写此方法，以编程方式确定内联表格的最少数量。例如，这可以基于模型实例（作为"
"关键字参数 ``obj`` 传递）。"

msgid ""
"Should return ``True`` if adding an inline object is permitted, ``False`` "
"otherwise. ``obj`` is the parent object being edited or ``None`` when adding "
"a new parent."
msgstr ""
"如果允许添加内联对象，应返回 ``True``，否则返回 ``False``。``obj`` 是被编辑的"
"父对象，或者当添加一个新的父对象时返回 ``None``。"

msgid ""
"Should return ``True`` if editing an inline object is permitted, ``False`` "
"otherwise. ``obj`` is the parent object being edited."
msgstr ""
"如果允许编辑内联对象，应返回 ``True``，否则返回 ``False``。``obj`` 是被编辑的"
"父对象。"

msgid ""
"Should return ``True`` if deleting an inline object is permitted, ``False`` "
"otherwise. ``obj`` is the parent object being edited."
msgstr ""
"如果允许删除内联对象，应返回 ``True``，否则返回 ``False``。``obj`` 是被编辑的"
"父对象。"

msgid ""
"The ``obj`` argument passed to ``InlineModelAdmin`` methods is the parent "
"object being edited or ``None`` when adding a new parent."
msgstr ""
"传递给 ``InlineModelAdmin`` 方法的 ``obj`` 参数是被编辑的父对象，或者在添加新"
"父对象时是 ``None``。"

msgid ""
"Working with a model with two or more foreign keys to the same parent model"
msgstr "与有两个或更多外键到同一父模型的模型一起工作"

msgid ""
"It is sometimes possible to have more than one foreign key to the same "
"model. Take this model for instance::"
msgstr "有时同一个模型可以有多个外键。以这个模型为例："

msgid ""
"If you wanted to display an inline on the ``Person`` admin add/change pages "
"you need to explicitly define the foreign key since it is unable to do so "
"automatically::"
msgstr ""
"如果你想在 ``Person`` 管理添加／更改页面上显示内联，你需要明确定义外键，因为"
"它不能自动这样做："

msgid "Working with many-to-many models"
msgstr "与多对多模型一起工作"

msgid ""
"By default, admin widgets for many-to-many relations will be displayed on "
"whichever model contains the actual reference to the :class:`~django.db."
"models.ManyToManyField`. Depending on your ``ModelAdmin`` definition, each "
"many-to-many field in your model will be represented by a standard HTML "
"``<select multiple>``, a horizontal or vertical filter, or a "
"``raw_id_fields`` widget. However, it is also possible to replace these "
"widgets with inlines."
msgstr ""
"默认情况下，多对多关系的管理部件将显示在哪个模型上，包含对 :class:`~django."
"db.models.ManyToManyField` 的实际引用。根据你的 ``ModelAdmin`` 定义，你模型中"
"的每个多对多字段将由一个标准的 HTML ``<select multiple>``，一个水平或垂直过滤"
"器，或一个 ``raw_id_fields`` 小部件来表示。然而，也可以用内联来代替这些部件。"

msgid "Suppose we have the following models::"
msgstr "假设我们有以下模型："

msgid ""
"If you want to display many-to-many relations using an inline, you can do so "
"by defining an ``InlineModelAdmin`` object for the relationship::"
msgstr ""
"如果你想使用内联显示多对多关系，你可以通过为关系定义一个 "
"``InlineModelAdmin`` 对象来实现："

msgid "There are two features worth noting in this example."
msgstr "在这个例子中，有两个特点值得注意。"

msgid ""
"Firstly - the ``MembershipInline`` class references ``Group.members."
"through``. The ``through`` attribute is a reference to the model that "
"manages the many-to-many relation. This model is automatically created by "
"Django when you define a many-to-many field."
msgstr ""
"首先 ``MembershipInline`` 类引用 ``Group.members.through``。``through`` 属性"
"是对管理多对多关系的模型的引用。当你定义一个多对多字段时，这个模型是由 "
"Django 自动创建的。"

msgid ""
"Secondly, the ``GroupAdmin`` must manually exclude the ``members`` field. "
"Django displays an admin widget for a many-to-many field on the model that "
"defines the relation (in this case, ``Group``). If you want to use an inline "
"model to represent the many-to-many relationship, you must tell Django's "
"admin to *not* display this widget - otherwise you will end up with two "
"widgets on your admin page for managing the relation."
msgstr ""
"其次，``GroupAdmin`` 必须手动排除 ``members`` 字段。Django 会在定义关系的模型"
"上显示一个多对多字段的管理部件（在本例中是 ``Group``）。如果你想使用一个内联"
"模型来表示多对多关系，你必须告诉 Django 的管理 *不要* 显示这个部件，否则你将"
"在你的管理页面上有两个部件来管理这个关系。"

msgid ""
"Note that when using this technique the :data:`~django.db.models.signals."
"m2m_changed` signals aren't triggered. This is because as far as the admin "
"is concerned, ``through`` is just a model with two foreign key fields rather "
"than a many-to-many relation."
msgstr ""
"请注意，当使用这种技术时， :data:`~django.db.models.signals.m2m_changed` 信号"
"并没有被触发。这是因为对于管理来说，``through`` 只是一个有两个外键字段的模"
"型，而不是一个多对多的关系。"

msgid ""
"In all other respects, the ``InlineModelAdmin`` is exactly the same as any "
"other. You can customize the appearance using any of the normal "
"``ModelAdmin`` properties."
msgstr ""
"在所有其他方面，``InlineModelAdmin`` 和其他的完全一样。你可以使用任何正常的 "
"``ModelAdmin`` 属性自定义外观。"

msgid "Working with many-to-many intermediary models"
msgstr "与多对多中间模型一起工作"

msgid ""
"When you specify an intermediary model using the ``through`` argument to a :"
"class:`~django.db.models.ManyToManyField`, the admin will not display a "
"widget by default. This is because each instance of that intermediary model "
"requires more information than could be displayed in a single widget, and "
"the layout required for multiple widgets will vary depending on the "
"intermediate model."
msgstr ""
"当你使用 :class:`~django.db.models.ManyToManyField`的``through` 参数指定一个"
"中介模型时，管理默认不会显示一个部件。这是因为该中介模型的每一个实例所需要的"
"信息比单个部件所能显示的信息要多，而且多个部件所需要的布局会根据中介模型的不"
"同而不同。"

msgid ""
"However, we still want to be able to edit that information inline. "
"Fortunately, we can do this with inline admin models. Suppose we have the "
"following models::"
msgstr ""
"然而，我们仍然希望能够在线编辑这些信息。幸运的是，我们可以通过内联管理模型来"
"实现这一点。假设我们有以下模型："

msgid ""
"The first step in displaying this intermediate model in the admin is to "
"define an inline class for the ``Membership`` model::"
msgstr ""
"在管理中显示这个中间模型的第一步是为 ``Membership`` 模型定义一个内联类："

msgid ""
"This example uses the default ``InlineModelAdmin`` values for the "
"``Membership`` model, and limits the extra add forms to one. This could be "
"customized using any of the options available to ``InlineModelAdmin`` "
"classes."
msgstr ""
"这个例子对 ``Membership`` 模型使用默认的 ``InlineModelAdmin`` 值，并将额外的"
"添加表单限制为一个。这可以使用 ``InlineModelAdmin`` 类的任何可用选项来定制。"

msgid "Now create admin views for the ``Person`` and ``Group`` models::"
msgstr "现在为 ``Person`` 和 ``Group`` 模型创建管理视图："

msgid ""
"Finally, register your ``Person`` and ``Group`` models with the admin site::"
msgstr "最后，在管理网站上注册你的 ``Person`` 和 ``Group`` 模型："

msgid ""
"Now your admin site is set up to edit ``Membership`` objects inline from "
"either the ``Person`` or the ``Group`` detail pages."
msgstr ""
"现在你的管理网站已经设置好了，可以在 ``Person`` 或 ``Group`` 的详情页中在线编"
"辑  ``Membership`` 对象。"

msgid "Using generic relations as an inline"
msgstr "使用通用关系作为内联"

msgid ""
"It is possible to use an inline with generically related objects. Let's say "
"you have the following models::"
msgstr "可以用一个内联与通用相关的对象。假设你有以下模型："

msgid ""
"If you want to allow editing and creating an ``Image`` instance on the "
"``Product``, add/change views you can use :class:`~django.contrib."
"contenttypes.admin.GenericTabularInline` or :class:`~django.contrib."
"contenttypes.admin.GenericStackedInline` (both subclasses of :class:`~django."
"contrib.contenttypes.admin.GenericInlineModelAdmin`) provided by :mod:"
"`~django.contrib.contenttypes.admin`. They implement tabular and stacked "
"visual layouts for the forms representing the inline objects, respectively, "
"just like their non-generic counterparts. They behave just like any other "
"inline. In your ``admin.py`` for this example app::"
msgstr ""
"如果你想允许在 ``Product``上编辑和创建一个 ``Image`` 实例，添加／更改视图，你"
"可以使用由 :mod:`~django.contrib.contenttypes.admin` 提供的 :class:`~django."
"contrib.contenttypes.admin.GenericTabularInline` 或 :class:`~django.contrib."
"contenttypes.admin.GenericStackedInline` （都是 :class:`~django.contrib."
"contenttypes.admin.GenericInlineModelAdmin` 的子类）。它们分别为代表内联对象"
"的表单实现了表格式和堆栈式的可视化布局，就像它们的非通用对应物一样。它们的行"
"为就像其他内联一样。在你的 ``admin.py`` 中，对于这个示例应用程序："

msgid ""
"See the :doc:`contenttypes documentation </ref/contrib/contenttypes>` for "
"more specific information."
msgstr ""
"更多具体信息请参见 :doc:`contenttypes 文档 </ref/contrib/contenttypes>`。"

msgid "Overriding admin templates"
msgstr "覆盖管理模板"

msgid ""
"You can override many of the templates which the admin module uses to "
"generate the various pages of an admin site. You can even override a few of "
"these templates for a specific app, or a specific model."
msgstr ""
"你可以覆盖许多模板，管理模块用于生成管理网站的各种页面。你甚至可以为特定的应"
"用程序或特定的模型覆盖其中的一些模板。"

msgid "Set up your projects admin template directories"
msgstr "设置你的项目管理模板目录"

msgid ""
"The admin template files are located in the :source:`django/contrib/admin/"
"templates/admin` directory."
msgstr ""

msgid ""
"In order to override one or more of them, first create an ``admin`` "
"directory in your project's ``templates`` directory. This can be any of the "
"directories you specified in the :setting:`DIRS <TEMPLATES-DIRS>` option of "
"the ``DjangoTemplates`` backend in the :setting:`TEMPLATES` setting. If you "
"have customized the ``'loaders'`` option, be sure ``'django.template.loaders."
"filesystem.Loader'`` appears before ``'django.template.loaders."
"app_directories.Loader'`` so that your custom templates will be found by the "
"template loading system before those that are included with :mod:`django."
"contrib.admin`."
msgstr ""
"为了覆盖其中的一个或多个目录，首先在你的项目的 ``templates`` 目录下创建一个 "
"``admin`` 目录。这个目录可以是你在 ``DjangoTemplates`` 后台的 :setting:`DIRS "
"<TEMPLATES-DIRS>` 选项中指定的任何一个目录。如果你自定义了 ``'loaders'`` 选"
"项，请确保 ``'django.template.loaders.filesystem.Loader'`` 出现在 ``'django."
"template.loaders.app_directories.Loader'`` 之前，这样你的自定义模板就会被模板"
"加载系统发现，而不是 :mod:`django.contrib.admin` 所包含的模板。"

msgid ""
"Within this ``admin`` directory, create sub-directories named after your "
"app. Within these app subdirectories create sub-directories named after your "
"models. Note, that the admin app will lowercase the model name when looking "
"for the directory, so make sure you name the directory in all lowercase if "
"you are going to run your app on a case-sensitive filesystem."
msgstr ""
"在这个 ``admin`` 目录中，创建以你的应用程序命名的子目录。在这些应用程序子目录"
"中，创建以你的模型命名的子目录。注意，管理员应用程序在查找目录时，会将模型名"
"称小写，所以如果你要在大小写敏感的文件系统上运行应用程序，请确保你将目录命名"
"为所有小写。"

msgid ""
"To override an admin template for a specific app, copy and edit the template "
"from the :source:`django/contrib/admin/templates/admin` directory, and save "
"it to one of the directories you just created."
msgstr ""

msgid ""
"For example, if we wanted to add a tool to the change list view for all the "
"models in an app named ``my_app``, we would copy ``contrib/admin/templates/"
"admin/change_list.html`` to the ``templates/admin/my_app/`` directory of our "
"project, and make any necessary changes."
msgstr ""
"例如，如果我们想在名为 ``my_app`` 的应用程序中的所有模型的变更列表视图中添加"
"一个工具，我们会将 ``contrib/admin/templates/admin/change_list.html`` 复制到"
"我们项目的 ``templates/admin/my_app/`` 目录下，并进行任何必要的更改。"

msgid ""
"If we wanted to add a tool to the change list view for only a specific model "
"named 'Page', we would copy that same file to the ``templates/admin/my_app/"
"page`` directory of our project."
msgstr ""
"如果我们想只为名为 ``Page`` 的特定模型在变更列表视图中添加一个工具，我们会将"
"同样的文件复制到项目的 ``templates/admin/my_app/page`` 目录下。"

msgid "Overriding vs. replacing an admin template"
msgstr "覆盖 vs. 替换管理模板"

msgid ""
"Because of the modular design of the admin templates, it is usually neither "
"necessary nor advisable to replace an entire template. It is almost always "
"better to override only the section of the template which you need to change."
msgstr ""
"由于管理模板的模块化设计，通常没有必要也不建议更换整个模板。最好是只覆盖你需"
"要更改的模板部分。"

msgid ""
"To continue the example above, we want to add a new link next to the "
"``History`` tool for the ``Page`` model. After looking at ``change_form."
"html`` we determine that we only need to override the ``object-tools-items`` "
"block. Therefore here is our new ``change_form.html`` :"
msgstr ""
"继续上面的例子，我们想在 ``History`` 工具旁边为 ``Page`` 模型添加一个新的链"
"接。在看了 ``change_form.html`` 后，我们确定我们只需要覆盖 ``object-tools-"
"items`` 块。因此这里是我们新的 ``change_form.html``。"

msgid ""
"And that's it! If we placed this file in the ``templates/admin/my_app`` "
"directory, our link would appear on the change form for all models within "
"my_app."
msgstr ""
"这就是了！如果我们把这个文件放在 ``templates/admin/my_app`` 目录下，我们的链"
"接就会出现在 my_app 内所有模型的更改表单中。"

msgid "Templates which may be overridden per app or model"
msgstr "每个应用或模型可覆盖的模板"

msgid ""
"Not every template in ``contrib/admin/templates/admin`` may be overridden "
"per app or per model. The following can:"
msgstr ""
"``contrib/admin/templates/admin`` 中的模板并非每个应用程序或每个模型都可以被"
"覆盖。以下情况可以："

msgid "``actions.html``"
msgstr "``actions.html``"

msgid "``app_index.html``"
msgstr "``app_index.html``"

msgid "``change_form.html``"
msgstr "``change_form.html``"

msgid "``change_form_object_tools.html``"
msgstr "``change_form_object_tools.html``"

msgid "``change_list.html``"
msgstr "``change_list.html``"

msgid "``change_list_object_tools.html``"
msgstr "``change_list_object_tools.html``"

msgid "``change_list_results.html``"
msgstr "``change_list_results.html``"

msgid "``date_hierarchy.html``"
msgstr "``date_hierarchy.html``"

msgid "``delete_confirmation.html``"
msgstr "``delete_confirmation.html``"

msgid "``object_history.html``"
msgstr "``object_history.html``"

msgid "``pagination.html``"
msgstr "``pagination.html``"

msgid "``popup_response.html``"
msgstr "``popup_response.html``"

msgid "``prepopulated_fields_js.html``"
msgstr "``prepopulated_fields_js.html``"

msgid "``search_form.html``"
msgstr "``search_form.html``"

msgid "``submit_line.html``"
msgstr "``submit_line.html``"

msgid ""
"For those templates that cannot be overridden in this way, you may still "
"override them for your entire project by placing the new version in your "
"``templates/admin`` directory. This is particularly useful to create custom "
"404 and 500 pages."
msgstr ""
"对于那些不能以这种方式覆盖的模板，你仍然可以通过将新版本放在你的 ``templates/"
"admin`` 目录下，为整个项目覆盖它们。这对于创建自定义 404 和 500 页面特别有"
"用。"

msgid ""
"Some of the admin templates, such as ``change_list_results.html`` are used "
"to render custom inclusion tags. These may be overridden, but in such cases "
"you are probably better off creating your own version of the tag in question "
"and giving it a different name. That way you can use it selectively."
msgstr ""
"一些管理模板，如 ``change_list_results.html`` 是用来呈现自定义包含标签的。这"
"些可以被覆盖，但在这种情况下，你可能最好创建你自己版本的标签，并给它一个不同"
"的名字。这样你就可以有选择地使用它。"

msgid "Root and login templates"
msgstr "根和登录模板"

msgid ""
"If you wish to change the index, login or logout templates, you are better "
"off creating your own ``AdminSite`` instance (see below), and changing the :"
"attr:`AdminSite.index_template` , :attr:`AdminSite.login_template` or :attr:"
"`AdminSite.logout_template` properties."
msgstr ""
"如果你想更改索引、登录或注销模板，你最好创建自己的 ``AdminSite`` 实例（见下"
"文），并更改 :attr:`AdminSite.index_template` 、:attr:`AdminSite."
"login_template` 或 :attr:`AdminSite.logout_template` 属性。"

msgid "Theming support"
msgstr "主题化支持"

msgid ""
"The admin uses CSS variables to define colors and fonts. This allows "
"changing themes without having to override many individual CSS rules. For "
"example, if you preferred purple instead of blue you could add a ``admin/"
"base.html`` template override to your project:"
msgstr ""

msgid ""
"The list of CSS variables are defined at :source:`django/contrib/admin/"
"static/admin/css/base.css`."
msgstr ""

msgid ""
"Dark mode variables, respecting the `prefers-color-scheme`_ media query, are "
"defined at :source:`django/contrib/admin/static/admin/css/dark_mode.css`. "
"This is linked to the document in ``{% block dark-mode-vars %}``."
msgstr ""

msgid ""
"The dark mode variables were moved to a separate stylesheet and template "
"block."
msgstr ""

msgid "``AdminSite`` objects"
msgstr "``AdminSite`` 对象"

msgid ""
"A Django administrative site is represented by an instance of ``django."
"contrib.admin.sites.AdminSite``; by default, an instance of this class is "
"created as ``django.contrib.admin.site`` and you can register your models "
"and ``ModelAdmin`` instances with it."
msgstr ""
"一个 Django 管理站点由 ``django.contrib.admin.sites.AdminSite`` 的实例来表"
"示；默认情况下，这个类的实例被创建为 ``django.contrib.admin.site``，你可以用"
"它来注册你的模型和 ``ModelAdmin`` 实例。"

msgid ""
"If you want to customize the default admin site, you can :ref:`override it "
"<overriding-default-admin-site>`."
msgstr ""
"如果你想自定义默认的管理站点，你可以 :ref:`覆盖它 <overriding-default-admin-"
"site>`。"

msgid ""
"When constructing an instance of an ``AdminSite``, you can provide a unique "
"instance name using the ``name`` argument to the constructor. This instance "
"name is used to identify the instance, especially when :ref:`reversing admin "
"URLs <admin-reverse-urls>`. If no instance name is provided, a default "
"instance name of ``admin`` will be used. See :ref:`customizing-adminsite` "
"for an example of customizing the :class:`AdminSite` class."
msgstr ""
"当构造一个 ``AdminSite`` 的实例时，你可以使用构造函数的 ``name`` 参数提供一个"
"唯一的实例名称。这个实例名是用来标识实例的，特别是在 :ref:`反查管理 URL "
"<admin-reverse-urls>` 时。如果没有提供实例名，将使用默认的实例名 ``admin``。"
"参见 :ref:`customizing-adminsite`，了解定制 :class:`AdminSite` 类的例子。"

msgid "A :class:`~weakref.WeakSet` contains all admin site instances."
msgstr ""

msgid "``AdminSite`` attributes"
msgstr "``AdminSite`` 属性"

msgid ""
"Templates can override or extend base admin templates as described in :ref:"
"`admin-overriding-templates`."
msgstr ""
"模板可以覆盖或扩展基本的管理模板，如 :ref:`admin-overriding-templates` 中所"
"述。"

msgid ""
"The text to put at the top of each admin page, as an ``<h1>`` (a string). By "
"default, this is \"Django administration\"."
msgstr ""
"要放在每个管理页面顶部的文字，作为 ``<h1>`` （一个字符串）。默认情况下，是 "
"“Django 管理”。"

msgid ""
"The text to put at the end of each admin page's ``<title>`` (a string). By "
"default, this is \"Django site admin\"."
msgstr ""
"在每个管理页面的 ``<title>`` （字符串）末尾放置的文字。默认情况下，是 "
"“Django 站点管理”。"

msgid ""
"The URL for the \"View site\" link at the top of each admin page. By "
"default, ``site_url`` is ``/``. Set it to ``None`` to remove the link."
msgstr ""
"每个管理页面顶部的 “查看网站” 链接的 URL。默认情况下，``site_url`` 是 ``/``。"
"将其设置为 ``None`` 以删除该链接。"

msgid ""
"For sites running on a subpath, the :meth:`each_context` method checks if "
"the current request has ``request.META['SCRIPT_NAME']`` set and uses that "
"value if ``site_url`` isn't set to something other than ``/``."
msgstr ""
"对于运行在子路径上的站点， :meth:`each_context` 方法会检查当前请求是否设置了 "
"``request.META['SCRIPT_NAME']``，如果 ``site_url`` 没有设置为 ``/`` 以外的内"
"容，则使用该值。"

msgid ""
"The text to put at the top of the admin index page (a string). By default, "
"this is \"Site administration\"."
msgstr "放在管理索引页顶部的文字（一个字符串）。默认情况下，是 “网站管理”。"

msgid ""
"Path to a custom template that will be used by the admin site main index "
"view."
msgstr "管理网站主索引视图将使用的自定义模板的路径。"

msgid ""
"Path to a custom template that will be used by the admin site app index view."
msgstr "管理网站应用索引视图将使用的自定义模板的路径。"

msgid ""
"The string to use for displaying empty values in the admin site's change "
"list. Defaults to a dash. The value can also be overridden on a per "
"``ModelAdmin`` basis and on a custom field within a ``ModelAdmin`` by "
"setting an ``empty_value_display`` attribute on the field. See :attr:"
"`ModelAdmin.empty_value_display` for examples."
msgstr ""
"用于在管理站点的更改列表中显示空值的字符串。默认值为破折号。该值也可以在每个 "
"``ModelAdmin`` 的基础上被覆盖，也可以在 ``ModelAdmin`` 内的自定义字段上设置 "
"``empty_value_display`` 属性。参见 :attr:`ModelAdmin.empty_value_display` 的"
"例子。"

msgid ""
"A boolean value that determines whether to show the navigation sidebar on "
"larger screens. By default, it is set to ``True``."
msgstr ""
"一个布尔值，决定是否在大屏幕上显示导航侧栏。默认情况下，它被设置为 ``True``。"

msgid ""
"A boolean value that determines whether to add a final catch-all view to the "
"admin that redirects unauthenticated users to the login page. By default, it "
"is set to ``True``."
msgstr ""
"一个布尔值，用于决定是否在管理员中添加一个最终的总括视图，将未认证的用户重定"
"向到登录页面。默认情况下，它被设置为 ``True``。"

msgid ""
"Setting this to ``False`` is not recommended as the view protects against a "
"potential model enumeration privacy issue."
msgstr "不建议将此设置为 ``False``，因为该视图可以保护潜在的模型枚举隐私问题。"

msgid ""
"Path to a custom template that will be used by the admin site login view."
msgstr "管理网站登录视图将使用的自定义模板的路径。"

msgid ""
"Subclass of :class:`~django.contrib.auth.forms.AuthenticationForm` that will "
"be used by the admin site login view."
msgstr ""
":class:`~django.contrib.auth.forms.AuthenticationForm` 的子类，将被管理网站登"
"录视图使用。"

msgid ""
"Path to a custom template that will be used by the admin site logout view."
msgstr "管理网站注销视图将使用的自定义模板的路径。"

msgid ""
"Path to a custom template that will be used by the admin site password "
"change view."
msgstr "管理网站密码修改视图将使用的自定义模板的路径。"

msgid ""
"Path to a custom template that will be used by the admin site password "
"change done view."
msgstr "自定义模板的路径，该模板将被管理员网站密码修改完成后的视图使用。"

msgid "``AdminSite`` methods"
msgstr "``AdminSite`` 方法"

msgid ""
"Returns a dictionary of variables to put in the template context for every "
"page in the admin site."
msgstr "返回一个变量字典，将其放入管理站点中每个页面的模板上下文中。"

msgid "Includes the following variables and values by default:"
msgstr "默认情况下包括以下变量和值："

msgid "``site_header``: :attr:`AdminSite.site_header`"
msgstr "``site_header`` ： :attr:`AdminSite.site_header`"

msgid "``site_title``: :attr:`AdminSite.site_title`"
msgstr "``site_title`` ：:attr:`AdminSite.site_title`"

msgid "``site_url``: :attr:`AdminSite.site_url`"
msgstr "``site_url`` ：:attr:`AdminSite.site_url`"

msgid "``has_permission``: :meth:`AdminSite.has_permission`"
msgstr "``has_permission`` ：:meth:`AdminSite.has_permission`"

msgid ""
"``available_apps``: a list of applications from the :doc:`application "
"registry </ref/applications/>` available for the current user. Each entry in "
"the list is a dict representing an application with the following keys:"
msgstr ""
"``available_apps`` ：当前用户可用的 :doc:`application registry` 中的应用程序"
"列表。列表中的每个条目都是一个代表应用程序的字典，其键如下："

msgid "``app_label``: the application label"
msgstr "``app_label`` ：应用程序标签"

msgid "``app_url``: the URL of the application index in the admin"
msgstr "``app_url`` ：管理中应用程序索引的 URL"

msgid ""
"``has_module_perms``: a boolean indicating if displaying and accessing of "
"the module's index page is permitted for the current user"
msgstr ""
"``has_module_perms`` ：一个布尔值，表示是否允许当前用户显示和访问模块的索引页"

msgid "``models``: a list of the models available in the application"
msgstr "``models`` ：应用程序中可用模型的清单"

msgid "Each model is a dict with the following keys:"
msgstr "每个模型都是一个带有以下键的字典"

msgid "``model``: the model class"
msgstr "`model`` ：模型类"

msgid "``object_name``: class name of the model"
msgstr "``object_name`` ：模型类名"

msgid "``name``: plural name of the model"
msgstr "``name`` ：模型的复数名"

msgid ""
"``perms``: a ``dict`` tracking ``add``, ``change``, ``delete``, and ``view`` "
"permissions"
msgstr ""
"``perms`` ：``dict`` 跟踪 ``add``、``change``、``delete`` 和 ``view`` 权限"

msgid "``admin_url``: admin changelist URL for the model"
msgstr "``admin_url`` ：模型的管理变更表 URL"

msgid "``add_url``: admin URL to add a new model instance"
msgstr "``add_url`` ：添加新模型实例的管理网址"

msgid "``is_popup``: whether the current page is displayed in a popup window"
msgstr ""

msgid "``is_nav_sidebar_enabled``: :attr:`AdminSite.enable_nav_sidebar`"
msgstr ""

msgid ""
"Returns a list of applications from the :doc:`application registry </ref/"
"applications/>` available for the current user. You can optionally pass an "
"``app_label`` argument to get details for a single app. Each entry in the "
"list is a dictionary representing an application with the following keys:"
msgstr ""

msgid "``name``: name of the application"
msgstr ""

msgid "Each model is a dictionary with the following keys:"
msgstr ""

msgid ""
"Lists of applications and models are sorted alphabetically by their names. "
"You can override this method to change the default order on the admin index "
"page."
msgstr ""

msgid "The ``app_label`` argument was added."
msgstr ""

msgid ""
"Returns ``True`` if the user for the given ``HttpRequest`` has permission to "
"view at least one page in the admin site. Defaults to requiring both :attr:"
"`User.is_active <django.contrib.auth.models.User.is_active>` and :attr:`User."
"is_staff <django.contrib.auth.models.User.is_staff>` to be ``True``."
msgstr ""
"如果给定的 ``HttpRequest`` 的用户有权限在管理站点中查看至少一个页面，则返回 "
"``True``。默认要求 :attr:`User.is_active <django.contrib.auth.models.User."
"is_active>` 和 :attr:`User.is_staff <django.contrib.auth.models.User."
"is_staff>` 都是 ``True``。"

msgid ""
"Registers the given model class (or iterable of classes) with the given "
"``admin_class``. ``admin_class`` defaults to :class:`~django.contrib.admin."
"ModelAdmin` (the default admin options). If keyword arguments are given -- e."
"g. ``list_display`` -- they'll be applied as options to the admin class."
msgstr ""
"用给定的 ``admin_class`` 注册给定的模型类（或类的迭代）。``admin_class`` 默认"
"为 :class:`~django.contrib.admin.ModelAdmin` （默认的管理选项）。如果给定了关"
"键字参数 —— 例如 ``list_display`` —— 它们将作为选项应用到管理类中。"

msgid ""
"Raises :class:`~django.core.exceptions.ImproperlyConfigured` if a model is "
"abstract. and ``django.contrib.admin.sites.AlreadyRegistered`` if a model is "
"already registered."
msgstr ""
"如果一个模型是抽象的，会引发 :class:`~django.core.exceptions."
"ImproperlyConfigured`，如果一个模型已经注册，会引发 ``django.contrib.admin."
"sites.AlreadyRegistered``。"

msgid "Unregisters the given model class (or iterable of classes)."
msgstr "取消注册给定的模型类（或类的可迭代对象）"

msgid ""
"Raises ``django.contrib.admin.sites.NotRegistered`` if a model isn't already "
"registered."
msgstr ""
"如果一个模型还没有注册，就会引发 ``django.contrib.admin.sites."
"NotRegistered``。"

msgid "Hooking ``AdminSite`` instances into your URLconf"
msgstr "将 ``AdminSite`` 实例挂到你的 URLconf 中"

msgid ""
"The last step in setting up the Django admin is to hook your ``AdminSite`` "
"instance into your URLconf. Do this by pointing a given URL at the "
"``AdminSite.urls`` method. It is not necessary to use :func:`~django.urls."
"include()`."
msgstr ""
"设置 Django 管理的最后一步是将你的 ``AdminSite`` 实例挂到你的 URLconf 中。通"
"过将一个给定的 URL 指向 ``AdminSite.urls`` 方法来实现。不需要使用 :func:"
"`~django.urls.include()`。"

msgid ""
"In this example, we register the default ``AdminSite`` instance ``django."
"contrib.admin.site`` at the URL ``/admin/`` ::"
msgstr ""
"在这个例子中，我们将默认的 ``AdminSite`` 实例 ``django.contrib.admin.site`` "
"注册到 URL ``/admin/`` ："

msgid "Customizing the :class:`AdminSite` class"
msgstr "自定义 :class:`AdminSite` 类"

msgid ""
"If you'd like to set up your own admin site with custom behavior, you're "
"free to subclass ``AdminSite`` and override or add anything you like. Then, "
"create an instance of your ``AdminSite`` subclass (the same way you'd "
"instantiate any other Python class) and register your models and "
"``ModelAdmin`` subclasses with it instead of with the default site. Finally, "
"update :file:`myproject/urls.py` to reference your :class:`AdminSite` "
"subclass."
msgstr ""
"如果你想用自定义行为设置你自己的管理站点，你可以自由地将 ``AdminSite`` 子类"
"化，并覆盖或添加任何你喜欢的内容。然后，创建一个你的 ``AdminSite`` 子类的实例"
"（与你实例化任何其他 Python 类的方式相同），并用它注册你的模型和 "
"``ModelAdmin`` 子类，而不是用默认站点。最后，更新 :file:`myproject/urls.py` "
"来引用你的 :class:`AdminSite` 子类。"

msgid "``myapp/admin.py``"
msgstr ""

msgid "``myproject/urls.py``"
msgstr ""

msgid ""
"Note that you may not want autodiscovery of ``admin`` modules when using "
"your own ``AdminSite`` instance since you will likely be importing all the "
"per-app ``admin`` modules in your ``myproject.admin`` module. This means you "
"need to put ``'django.contrib.admin.apps.SimpleAdminConfig'`` instead of "
"``'django.contrib.admin'`` in your :setting:`INSTALLED_APPS` setting."
msgstr ""
"请注意，当你使用自己的 ``AdminSite`` 实例时，你可能不希望自动发现 ``admin`` "
"模块，因为你可能会在你的 ``myproject.admin`` 模块中导入所有应用的 ``admin`` "
"模块。这意味着你需要在你的 :setting:`INSTALLED_APPS` 配置中加入 ``'django."
"contrib.admin.apps.SimpleAdminConfig'`` 而不是 ``'django.contrib.admin'``。"

msgid "Overriding the default admin site"
msgstr "覆盖默认的管理站点"

msgid ""
"You can override the default ``django.contrib.admin.site`` by setting the :"
"attr:`~.SimpleAdminConfig.default_site` attribute of a custom ``AppConfig`` "
"to the dotted import path of either a ``AdminSite`` subclass or a callable "
"that returns a site instance."
msgstr ""
"你可以通过设置自定义 ``AppConfig`` 的 :attr:`~.SimpleAdminConfig."
"default_site`` 属性来覆盖默认的 ``django.contrib.admin.site``，将其设置为一"
"个 ``AdminSite`` 子类或一个返回站点实例的可调用的点分隔导入路径。"

msgid "``myproject/admin.py``"
msgstr ""

msgid "``myproject/apps.py``"
msgstr ""

msgid "``myproject/settings.py``"
msgstr ""

msgid "Multiple admin sites in the same URLconf"
msgstr "同一个 URLconf 中的多个管理站点"

msgid ""
"You can create multiple instances of the admin site on the same Django-"
"powered website. Create multiple instances of ``AdminSite`` and place each "
"one at a different URL."
msgstr ""
"你可以在同一个 Django 驱动的网站上创建多个管理站点的实例。创建多个 "
"``AdminSite`` 的实例，并将每个实例放置在不同的 URL 中。"

msgid ""
"In this example, the URLs ``/basic-admin/`` and ``/advanced-admin/`` feature "
"separate versions of the admin site -- using the ``AdminSite`` instances "
"``myproject.admin.basic_site`` and ``myproject.admin.advanced_site``, "
"respectively::"
msgstr ""
"在这个例子中，URL ``/basic-admin/`` 和 ``/advanced-admin/`` 分别使用 "
"``AdminSite`` 实例 ``myproject.admin.basic_site`` 和 ``myproject.admin."
"advanced_site`` ："

msgid ""
"``AdminSite`` instances take a single argument to their constructor, their "
"name, which can be anything you like. This argument becomes the prefix to "
"the URL names for the purposes of :ref:`reversing them<admin-reverse-urls>`. "
"This is only necessary if you are using more than one ``AdminSite``."
msgstr ""
"``AdminSite`` 实例的构造函数只有一个参数，即名称，可以是任何你喜欢的名称。这"
"个参数成为 URL 名称的前缀，以便 :ref:`反查它们 <admin-reverse-urls>`。只有当"
"你使用一个以上的 ``AdminSite`` 时才需要这样做。"

msgid "Adding views to admin sites"
msgstr "在管理站点上添加视图"

msgid ""
"Just like :class:`ModelAdmin`, :class:`AdminSite` provides a :meth:`~django."
"contrib.admin.ModelAdmin.get_urls()` method that can be overridden to define "
"additional views for the site. To add a new view to your admin site, extend "
"the base :meth:`~django.contrib.admin.ModelAdmin.get_urls()` method to "
"include a pattern for your new view."
msgstr ""
"就像 :class:`ModelAdmin` 一样， :class:`AdminSite` 也提供了一个 :meth:"
"`~django.contrib.admin.ModelAdmin.get_urls()` 方法，它可以被重写来定义站点的"
"其他视图。要添加一个新的视图到你的管理站点，扩展基本的 :meth:`~django."
"contrib.admin.ModelAdmin.get_urls()` 方法来包含一个新视图的模式。"

msgid ""
"Any view you render that uses the admin templates, or extends the base admin "
"template, should set ``request.current_app`` before rendering the template. "
"It should be set to either ``self.name`` if your view is on an ``AdminSite`` "
"or ``self.admin_site.name`` if your view is on a ``ModelAdmin``."
msgstr ""
"任何使用管理模板或扩展基本管理模板的视图，都应该在渲染模板之前设置 ``request."
"current_app``。如果你的视图是在 ``AdminSite`` 上，它应该设置为 ``self."
"name``；如果你的视图是在 ``ModelAdmin`` 上，它应该设置为 ``self.admin_site."
"name``。"

msgid "Adding a password reset feature"
msgstr "增加密码重置功能"

msgid ""
"You can add a password reset feature to the admin site by adding a few lines "
"to your URLconf. Specifically, add these four patterns::"
msgstr ""
"你可以在你的 URLconf 中添加几行字，就可以给管理网站添加密码重置功能。具体来"
"说，添加以下四种模式："

msgid ""
"(This assumes you've added the admin at ``admin/`` and requires that you put "
"the URLs starting with ``^admin/`` before the line that includes the admin "
"app itself)."
msgstr ""
"（这假定你已经在 ``admin/`` 添加了管理员，并且要求你把以 ``^admin/`` 为开头"
"的 URL 放在包含管理程序本身的行之前）。"

msgid ""
"The presence of the ``admin_password_reset`` named URL will cause a "
"\"forgotten your password?\" link to appear on the default admin log-in page "
"under the password box."
msgstr ""
"``admin_password_reset`` 命名的 URL 的存在，会使默认的管理登录页面的密码框下"
"出现 “忘记密码了？” 的链接。"

msgid "``LogEntry`` objects"
msgstr "``LogEntry`` 对象"

msgid ""
"The ``LogEntry`` class tracks additions, changes, and deletions of objects "
"done through the admin interface."
msgstr "``LogEntry`` 类可以跟踪通过管理界面完成的对象的添加、更改和删除。"

msgid "``LogEntry`` attributes"
msgstr "``LogEntry`` 属性"

msgid "The date and time of the action."
msgstr "动作的日期和时间。"

msgid ""
"The user (an :setting:`AUTH_USER_MODEL` instance) who performed the action."
msgstr "执行操作的用户（一个 :setting:`AUTH_USER_MODEL` 实例）。"

msgid ""
"The :class:`~django.contrib.contenttypes.models.ContentType` of the modified "
"object."
msgstr "修改对象的 :class:`~django.contrib.contenttypes.models.ContentType` 。"

msgid "The textual representation of the modified object's primary key."
msgstr "修改对象主键的文字表示。"

msgid "The object`s ``repr()`` after the modification."
msgstr "修改后的对象 ``repr()``。"

msgid "The type of action logged: ``ADDITION``, ``CHANGE``, ``DELETION``."
msgstr "记录的动作类型： ``ADDITION``、``CHANGE``、``DELETION``。"

msgid "For example, to get a list of all additions done through the admin::"
msgstr "例如，要获取所有通过管理完成的添加列表："

msgid ""
"The detailed description of the modification. In the case of an edit, for "
"example, the message contains a list of the edited fields. The Django admin "
"site formats this content as a JSON structure, so that :meth:"
"`get_change_message` can recompose a message translated in the current user "
"language. Custom code might set this as a plain string though. You are "
"advised to use the :meth:`get_change_message` method to retrieve this value "
"instead of accessing it directly."
msgstr ""
"对修改的详细描述。例如，在编辑的情况下，消息中包含了被编辑的字段列表。Django "
"管理网站将这些内容格式化为 JSON 结构，这样 :meth:`get_change_message` 就可以"
"重新组成一个用当前用户语言翻译的消息。不过自定义代码可能会将其设置为纯字符"
"串。建议你使用 :meth:`get_change_message` 方法来检索这个值，而不是直接访问"
"它。"

msgid "``LogEntry`` methods"
msgstr "``LogEntry`` 方法"

msgid "A shortcut that returns the referenced object."
msgstr "返回被引用对象的快捷方式。"

msgid ""
"Formats and translates :attr:`change_message` into the current user "
"language. Messages created before Django 1.10 will always be displayed in "
"the language in which they were logged."
msgstr ""
"将 :attr:`change_message` 格式化并翻译成当前用户语言。在 Django 1.10 之前创建"
"的消息将始终以其登录时的语言显示。"

msgid "Reversing admin URLs"
msgstr "反查管理 URL"

msgid ""
"When an :class:`AdminSite` is deployed, the views provided by that site are "
"accessible using Django's :ref:`URL reversing system <naming-url-patterns>`."
msgstr ""
"当部署了一个 :class:`AdminSite` 时，可以使用 Django 的 :ref:`URL 反查系统 "
"<naming-url-patterns>` 访问该网站提供的视图。"

msgid "The :class:`AdminSite` provides the following named URL patterns:"
msgstr ":class:`AdminSite` 提供了以下命名的 URL 模式。"

msgid "Page"
msgstr "页面"

msgid "URL name"
msgstr "URL 名称"

msgid "Parameters"
msgstr "参数"

msgid "Index"
msgstr "索引"

msgid "``index``"
msgstr "``index``"

msgid "Login"
msgstr "登录"

msgid "``login``"
msgstr "``login``"

msgid "Logout"
msgstr "登出"

msgid "``logout``"
msgstr "``logout``"

msgid "Password change"
msgstr "密码更改"

msgid "``password_change``"
msgstr "``password_change``"

msgid "Password change done"
msgstr "密码更改完成"

msgid "``password_change_done``"
msgstr "``password_change_done``"

msgid "i18n JavaScript"
msgstr "i18n JavaScript"

msgid "``jsi18n``"
msgstr "``jsi18n``"

msgid "Application index page"
msgstr "应用索引页面"

msgid "``app_list``"
msgstr "``app_list``"

msgid "``app_label``"
msgstr "``app_label``"

msgid "Redirect to object's page"
msgstr "重定向到对象的页面"

msgid "``view_on_site``"
msgstr "``view_on_site``"

msgid "``content_type_id``, ``object_id``"
msgstr "``content_type_id``, ``object_id``"

msgid ""
"Each :class:`ModelAdmin` instance provides an additional set of named URLs:"
msgstr "每个 :class:`ModelAdmin` 实例都提供一组额外的命名 URL："

msgid "Changelist"
msgstr "变更列表"

msgid "``{{ app_label }}_{{ model_name }}_changelist``"
msgstr "``{{ app_label }}_{{ model_name }}_changelist``"

msgid "Add"
msgstr "增加"

msgid "``{{ app_label }}_{{ model_name }}_add``"
msgstr "``{{ app_label }}_{{ model_name }}_add``"

msgid "History"
msgstr "历史"

msgid "``{{ app_label }}_{{ model_name }}_history``"
msgstr "``{{ app_label }}_{{ model_name }}_history``"

msgid "``object_id``"
msgstr "``object_id``"

msgid "Delete"
msgstr "删除"

msgid "``{{ app_label }}_{{ model_name }}_delete``"
msgstr "``{{ app_label }}_{{ model_name }}_delete``"

msgid "Change"
msgstr "修改"

msgid "``{{ app_label }}_{{ model_name }}_change``"
msgstr "``{{ app_label }}_{{ model_name }}_change``"

msgid "The ``UserAdmin`` provides a named URL:"
msgstr "``UserAdmin`` 提供一个命名的 URL："

msgid "``auth_user_password_change``"
msgstr "``auth_user_password_change``"

msgid "``user_id``"
msgstr "``user_id``"

msgid ""
"These named URLs are registered with the application namespace ``admin``, "
"and with an instance namespace corresponding to the name of the Site "
"instance."
msgstr ""
"这些命名的 URL 在应用程序命名空间 ``admin`` 和与 Site 实例名称相对应的实例命"
"名空间中注册。"

msgid ""
"So - if you wanted to get a reference to the Change view for a particular "
"``Choice`` object (from the polls application) in the default admin, you "
"would call:"
msgstr ""

msgid ""
"This will find the first registered instance of the admin application "
"(whatever the instance name), and resolve to the view for changing ``poll."
"Choice`` instances in that instance."
msgstr ""
"这将找到管理应用程序的第一个注册实例（无论实例名称如何），并解析到该实例中改"
"变 ``poll.Choice`` 实例的视图。"

msgid ""
"If you want to find a URL in a specific admin instance, provide the name of "
"that instance as a ``current_app`` hint to the reverse call. For example, if "
"you specifically wanted the admin view from the admin instance named "
"``custom``, you would need to call:"
msgstr ""

msgid ""
"For more details, see the documentation on :ref:`reversing namespaced URLs "
"<topics-http-reversing-url-namespaces>`."
msgstr ""
"更多细节，请参见 :ref:`反查命名空间的 URL <topics-http-reversing-url-"
"namespaces>` 的文档。"

msgid ""
"To allow easier reversing of the admin urls in templates, Django provides an "
"``admin_urlname`` filter which takes an action as argument:"
msgstr ""
"为了让模板中的管理网址更容易反查，Django 提供了一个 ``admin_urlname`` 过滤"
"器，它的参数是一个动作："

msgid ""
"The action in the examples above match the last part of the URL names for :"
"class:`ModelAdmin` instances described above. The ``opts`` variable can be "
"any object which has an ``app_label`` and ``model_name`` attributes and is "
"usually supplied by the admin views for the current model."
msgstr ""
"上面例子中的操作与上面描述的 :class:`ModelAdmin` 实例的 URL 名称的最后一部分"
"相匹配。``opts`` 变量可以是任何具有 ``app_label`` 和 ``model_name`` 属性的对"
"象，通常由当前模型的管理视图提供。"

msgid "The ``display`` decorator"
msgstr "``display`` 装饰器"

msgid ""
"This decorator can be used for setting specific attributes on custom display "
"functions that can be used with :attr:`~django.contrib.admin.ModelAdmin."
"list_display` or :attr:`~django.contrib.admin.ModelAdmin.readonly_fields`::"
msgstr ""
"这个装饰器可以用来设置自定义显示函数的特定属性，可以用 :attr:`~django."
"contrib.admin.ModelAdmin.list_display` 或 :attr:`~django.contrib.admin."
"ModelAdmin.readonly_fields` ："

msgid ""
"Also note that the ``empty_value`` decorator parameter maps to the "
"``empty_value_display`` attribute assigned directly to the function. It "
"cannot be used in conjunction with ``boolean`` -- they are mutually "
"exclusive."
msgstr ""
"还请注意，``empty_value`` 装饰符参数映射到直接分配给函数的 "
"``empty_value_display`` 属性。它不能与 ``boolean`` 一起使用 —— 它们是相互排斥"
"的。"

msgid ""
"Use of this decorator is not compulsory to make a display function, but it "
"can be useful to use it without arguments as a marker in your source to "
"identify the purpose of the function::"
msgstr ""
"使用这个装饰器并不是制作一个显示函数的必经之路，但在你的源码中使用它而不使用"
"参数作为标记来识别函数的目的是很有用的："

msgid "The ``staff_member_required`` decorator"
msgstr "``staff_member_required`` 装饰器"

msgid ""
"This decorator is used on the admin views that require authorization. A view "
"decorated with this function will have the following behavior:"
msgstr "这个装饰器被用于需要授权的管理视图。用这个函数装饰的视图将有以下行为："

msgid ""
"If the user is logged in, is a staff member (``User.is_staff=True``), and is "
"active (``User.is_active=True``), execute the view normally."
msgstr ""
"如果用户已登录，是工作人员（``User.is_staff=True``），并且是活动的（``User."
"is_active=True``），则正常执行视图。"

msgid ""
"Otherwise, the request will be redirected to the URL specified by the "
"``login_url`` parameter, with the originally requested path in a query "
"string variable specified by ``redirect_field_name``. For example: ``/admin/"
"login/?next=/admin/polls/question/3/``."
msgstr ""
"否则，请求将被重定向到由 ``login_url`` 参数指定的 URL，并在由 "
"``redirect_field_name`` 指定的查询字符串变量中包含最初请求的路径。例如： ``/"
"admin/login/?next=/admin/polls/question/3/``。"

msgid "Example usage::"
msgstr "用法示例："

msgid "JavaScript customizations in the admin"
msgstr "管理的 JavaScript 自定义"

msgid "Inline form events"
msgstr "内联表单事件"

msgid ""
"You may want to execute some JavaScript when an inline form is added or "
"removed in the admin change form. The ``formset:added`` and ``formset:"
"removed`` events allow this. ``event.detail.formsetName`` is the formset the "
"row belongs to. For the ``formset:added`` event, ``event.target`` is the "
"newly added row."
msgstr ""

msgid ""
"In older versions, the event was a ``jQuery`` event with ``$row`` and "
"``formsetName`` parameters. It is now a JavaScript ``CustomEvent`` with "
"parameters set in ``event.detail``."
msgstr ""

msgid ""
"In your custom ``change_form.html`` template, extend the "
"``admin_change_form_document_ready`` block and add the event listener code:"
msgstr ""
"在你的自定义 ``change_form.html`` 模板中，扩展 "
"``admin_change_form_document_ready`` 块并添加事件监听器代码："

msgid "``app/static/app/formset_handlers.js``"
msgstr ""

msgid "Two points to keep in mind:"
msgstr "有两点需要注意："

msgid ""
"The JavaScript code must go in a template block if you are inheriting "
"``admin/change_form.html`` or it won't be rendered in the final HTML."
msgstr ""
"如果你继承了 ``admin/change_form.html``，JavaScript 代码必须放在模板块中，否"
"则它不会在最终的 HTML 中呈现。"

msgid ""
"``{{ block.super }}`` is added because Django's "
"``admin_change_form_document_ready`` block contains JavaScript code to "
"handle various operations in the change form and we need that to be rendered "
"too."
msgstr ""
"添加 ``{{ block.super }}`` 是因为 Django 的 "
"``admin_change_form_document_ready`` 块中包含了 JavaScript 代码，用于处理更改"
"表单中的各种操作，而我们也需要渲染这些代码。"

msgid "Supporting versions of Django older than 4.1"
msgstr ""

msgid ""
"If your event listener still has to support older versions of Django you "
"have to use jQuery to register your event listener. jQuery handles "
"JavaScript events but the reverse isn't true."
msgstr ""

msgid ""
"You could check for the presence of ``event.detail.formsetName`` and fall "
"back to the old listener signature as follows:"
msgstr ""

msgid "``django.contrib.auth``"
msgstr "``django.contrib.auth``"

msgid ""
"This document provides API reference material for the components of Django's "
"authentication system. For more details on the usage of these components or "
"how to customize authentication and authorization see the :doc:"
"`authentication topic guide </topics/auth/index>`."
msgstr ""
"该文档提供了 Django 认证系统组件的 API 。有关更多这些组件的用例，或需要自定义"
"认证与鉴权，请参阅 :doc:`认证主题指南 </topics/auth/index>`。"

msgid "``User`` model"
msgstr "``User`` 模型"

msgid "Fields"
msgstr "字段"

msgid ""
":class:`~django.contrib.auth.models.User` objects have the following fields:"
msgstr ":class:`~django.contrib.auth.models.User` 对象有如下字段："

msgid ""
"Required. 150 characters or fewer. Usernames may contain alphanumeric, "
"``_``, ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""
"必要的。150 个字符或以下。用户名可包含字母数字、``_``、``@``、``+``、``.`` "
"和 ``-`` 字符。"

msgid ""
"The ``max_length`` should be sufficient for many use cases. If you need a "
"longer length, please use a :ref:`custom user model <specifying-custom-user-"
"model>`. If you use MySQL with the ``utf8mb4`` encoding (recommended for "
"proper Unicode support), specify at most ``max_length=191`` because MySQL "
"can only create unique indexes with 191 characters in that case by default."
msgstr ""
"``max_length`` 对许多使用情况来说应该是足够的。如果你需要更长的长度，请使用 :"
"ref:`自定义用户模型 <specifying-custom-user-model>`。如果你使用的 MySQL 是 "
"``utf8mb4`` 编码（推荐用于适当的 Unicode 支持），最多指定 "
"``max_length=191``，因为在这种情况下，MySQL 默认只能创建 191 个字符的唯一索"
"引。"

msgid ""
"Optional (:attr:`blank=True <django.db.models.Field.blank>`). 150 characters "
"or fewer."
msgstr ""
"可选的（:attr:`blank=True <django.db.models.Field.blank>`）。150 个字符或更"
"少。"

msgid ""
"Optional (:attr:`blank=True <django.db.models.Field.blank>`). Email address."
msgstr ""
"可选的（:attr:`blank=True <django.db.models.Field.blank>`）。电子邮件地址。"

msgid ""
"Required. A hash of, and metadata about, the password. (Django doesn't store "
"the raw password.) Raw passwords can be arbitrarily long and can contain any "
"character. See the :doc:`password documentation </topics/auth/passwords>`."
msgstr ""
"需要。一个密码的哈希值和元数据。（Django 不存储原始密码。）原始密码可以任意"
"长，可以包含任何字符。参见 :doc:`密码文档 </topics/auth/passwords>`。"

msgid "Many-to-many relationship to :class:`~django.contrib.auth.models.Group`"
msgstr "多对多关系到 :class:`~django.contrib.auth.models.Group`"

msgid ""
"Many-to-many relationship to :class:`~django.contrib.auth.models.Permission`"
msgstr "多对多关系到 :class:`~django.contrib.auth.models.Permission`"

msgid "Boolean. Designates whether this user can access the admin site."
msgstr "布尔型。指定该用户是否可以访问管理站点。"

msgid ""
"Boolean. Designates whether this user account should be considered active. "
"We recommend that you set this flag to ``False`` instead of deleting "
"accounts; that way, if your applications have any foreign keys to users, the "
"foreign keys won't break."
msgstr ""
"布尔值。指定该用户账户是否应该被视为活跃账户。我们建议你把这个标志设置为 "
"``False``，而不是删除账户；这样，如果你的应用程序对用户有任何外键，外键就不会"
"被破坏。"

msgid ""
"This doesn't necessarily control whether or not the user can log in. "
"Authentication backends aren't required to check for the ``is_active`` flag "
"but the default backend (:class:`~django.contrib.auth.backends."
"ModelBackend`) and the :class:`~django.contrib.auth.backends."
"RemoteUserBackend` do. You can use :class:`~django.contrib.auth.backends."
"AllowAllUsersModelBackend` or :class:`~django.contrib.auth.backends."
"AllowAllUsersRemoteUserBackend` if you want to allow inactive users to "
"login. In this case, you'll also want to customize the :class:`~django."
"contrib.auth.forms.AuthenticationForm` used by the :class:`~django.contrib."
"auth.views.LoginView` as it rejects inactive users. Be aware that the "
"permission-checking methods such as :meth:`~django.contrib.auth.models.User."
"has_perm` and the authentication in the Django admin all return ``False`` "
"for inactive users."
msgstr ""
"这不一定能控制用户是否能登录。认证后端不一定需要检查 ``is_active`` 标志，但默"
"认的后端（:class:`~django.contrib.auth.backends.ModelBackend`）和 :class:"
"`~django.contrib.auth.backends.RemoteUserBackend` 会检查。如果你想允许不活跃"
"的用户登录，你可以使用 :class:`~django.contrib.auth.backends."
"AllowAllUsersModelBackend` 或者 :class:`~django.contrib.auth.backends."
"AllowAllUsersRemoteUserBackend`。在这种情况下，你还需要自定义 :class:"
"`~django.contrib.auth.forms.AuthenticationForm` 所使用的 :class:`~django."
"contrib.auth.view.LoginView`，因为它拒绝非活动用户。需要注意的是， :meth:"
"`~django.contrib.auth.models.User.has_perm` 等权限检查方法，以及 Django 管理"
"中的认证方法，都会对非活跃用户返回 ``False``。"

msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr "布尔值。指定该用户拥有所有权限，而不用一个个开启权限。"

msgid "A datetime of the user's last login."
msgstr "用户最后一次登录的日期时间。"

msgid ""
"A datetime designating when the account was created. Is set to the current "
"date/time by default when the account is created."
msgstr "指定账户创建时间的日期时间。帐户创建时，默认设置为当前日期／时间。"

msgid "Attributes"
msgstr "属性"

msgid ""
"Read-only attribute which is always ``True`` (as opposed to ``AnonymousUser."
"is_authenticated`` which is always ``False``). This is a way to tell if the "
"user has been authenticated. This does not imply any permissions and doesn't "
"check if the user is active or has a valid session. Even though normally you "
"will check this attribute on ``request.user`` to find out whether it has "
"been populated by the :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` (representing the currently logged-in user), you "
"should know this attribute is ``True`` for any :class:`~models.User` "
"instance."
msgstr ""
"只读属性，始终返回 ``True`` （匿名用户 ``AnonymousUser.is_authenticated``  始"
"终返回 ``False`` ）。这是一种判断用户是否已通过身份认证的方法。这并不意味着任"
"何权限，也不会检查用户是否处于活动状态或是否具有有效会话。即使通常你会根据 "
"``request.user`` 检查这个属性，以确定它是否被 :class:`~django.contrib.auth."
"middleware.AuthenticationMiddleware` 填充（表示当前登录的用户），但是你应该知"
"道该属性对于任何 :class:`~models.User` 实例都返回 ``True``。"

msgid ""
"Read-only attribute which is always ``False``. This is a way of "
"differentiating :class:`~models.User` and :class:`~models.AnonymousUser` "
"objects. Generally, you should prefer using :attr:`~django.contrib.auth."
"models.User.is_authenticated` to this attribute."
msgstr ""
"只读属性，总是 ``False``。这是区分 :class:`~models.User` 和 :class:`~models."
"AnonymousUser` 对象的一种方式。一般来说，你应该优先使用 :attr:`~django."
"contrib.auth.models.User.is_authenticated` 来代替这个属性。"

msgid ""
"Returns the username for the user. Since the ``User`` model can be swapped "
"out, you should use this method instead of referencing the username "
"attribute directly."
msgstr ""
"返回用户的用户名。由于 ``User`` 模型可以被替换，你应该使用这个方法而不是直接"
"引用用户名属性。"

msgid ""
"Returns the :attr:`~django.contrib.auth.models.User.first_name` plus the :"
"attr:`~django.contrib.auth.models.User.last_name`, with a space in between."
msgstr ""
"返回 :attr:`~django.contrib.auth.models.User.first_name` 加上 :attr:`~django."
"contrib.auth.models.User.last_name`，中间有一个空格。"

msgid "Returns the :attr:`~django.contrib.auth.models.User.first_name`."
msgstr "返回 :attr:`~django.contrib.auth.models.User.first_name`。"

msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models.User` "
"object."
msgstr ""
"将用户的密码设置为给定的原始字符串，并进行密码哈希处理。不保存 :class:"
"`~django.contrib.auth.models.User` 对象。"

msgid ""
"When the ``raw_password`` is ``None``, the password will be set to an "
"unusable password, as if :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` were used."
msgstr ""
"当 ``raw_password`` 为 ``None`` 时，密码将被设置为不可用的密码，就像 :meth:"
"`~django.contrib.auth.models.User.set_unusable_password()` 一样。"

msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""
"如果给定的原始字符串是用户的正确密码，返回 ``True``。（密码哈希值用于比较）"

msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models.User."
"check_password()` for this user will never return ``True``. Doesn't save "
"the :class:`~django.contrib.auth.models.User` object."
msgstr ""
"标记该用户没有设置密码。 :meth:`~django.contrib.auth.models.User."
"check_password()` 对这个用户的检查永远不会返回 ``True``。不会保存 :class:"
"`~django.contrib.auth.models.User` 对象。"

msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""
"如果针对现有外部源（例如 LDAP 目录）进行应用程序的身份认证，则可能需要这个功"
"能。"

msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` has been called for this user."
msgstr ""
"如果 :meth:`~django.contrib.uth.models.User.set_unusable_password()` 被调用，"
"返回 ``False``。"

msgid "Returns a set of permission strings that the user has directly."
msgstr "返回用户直接拥有的一组权限字符串。"

msgid ""
"If ``obj`` is passed in, only returns the user permissions for this specific "
"object."
msgstr "如果传入了 ``obj``，则只返回这个特定对象的用户权限。"

msgid ""
"Returns a set of permission strings that the user has, through their groups."
msgstr "返回用户通过他们的组拥有的一组权限字符串。"

msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr "如果传入了 ``obj``，则只返回这个特定对象的组权限。"

msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr "返回用户拥有的一组权限字符串，包括通过组和用户的权限。"

msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr "如果传入了 ``obj``，则只返回这个特定对象的权限。"

msgid ""
"Returns ``True`` if the user has the specified permission, where perm is in "
"the format ``\"<app label>.<permission codename>\"``. (see documentation on :"
"ref:`permissions <topic-authorization>`). If the user is inactive, this "
"method will always return ``False``. For an active superuser, this method "
"will always return ``True``."
msgstr ""
"如果用户拥有指定的权限，返回 ``True``，其中 perm 的格式是 ``\"<app label>."
"<permission codename>\"``。（参见 :ref:`权限 <topic-authorization>` 的文"
"档）。如果用户是不活跃的，这个方法将总是返回 ``False``。对于活跃的超级用户，"
"本方法将始终返回 ``True``。"

msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""
"如果传入了 ``obj``，这个方法不会检查模型的权限，而是检查这个特定对象的权限。"

msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If the "
"user is inactive, this method will always return ``False``. For an active "
"superuser, this method will always return ``True``."
msgstr ""
"如果用户拥有指定的每个权限，返回 ``True``，其中每个 perm 的格式为 ``\"<app "
"label>.<permission codename>\"``。如果用户不活跃，本方法将总是返回 "
"``False``。对于活跃的超级用户，本方法将始终返回 ``True``。"

msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""
"如果传入了 ``obj``，这个方法不会检查模型的权限，而是检查这个特定对象的权限。"

msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If the user is inactive, this method will always return "
"``False``. For an active superuser, this method will always return ``True``."
msgstr ""
"如果用户在给定的包（Django 应用标签）中有任何权限，则返回 ``True``。如果用户"
"不活跃，本方法将总是返回 ``False``。如果是活跃的超级用户，本方法将始终返回 "
"``True``。"

msgid ""
"Sends an email to the user. If ``from_email`` is ``None``, Django uses the :"
"setting:`DEFAULT_FROM_EMAIL`. Any ``**kwargs`` are passed to the underlying :"
"meth:`~django.core.mail.send_mail()` call."
msgstr ""
"向用户发送邮件。如果 ``from_email`` 是 ``None``，Django 使用 :setting:"
"`DEFAULT_FROM_EMAIL`。任何 ``**kwargs`` 都会传递给底层的 :meth:`~django.core."
"mail.send_mail()` 调用。"

msgid "Manager methods"
msgstr "管理器方法"

msgid ""
"The :class:`~django.contrib.auth.models.User` model has a custom manager "
"that has the following helper methods (in addition to the methods provided "
"by :class:`~django.contrib.auth.models.BaseUserManager`):"
msgstr ""
":class:`~django.contrib.autrib.models.User` 模型有一个自定义管理器，它有以下"
"辅助方法（除了 :class:`~django.contrib.autrib.models.BaseUserManager` 提供的"
"方法外）："

msgid "Creates, saves and returns a :class:`~django.contrib.auth.models.User`."
msgstr "创建、保存并返回一个 :class:`~django.contrib.auth.models.User`。"

msgid ""
"The :attr:`~django.contrib.auth.models.User.username` and :attr:`~django."
"contrib.auth.models.User.password` are set as given. The domain portion of :"
"attr:`~django.contrib.auth.models.User.email` is automatically converted to "
"lowercase, and the returned :class:`~django.contrib.auth.models.User` object "
"will have :attr:`~django.contrib.auth.models.User.is_active` set to ``True``."
msgstr ""
":attr:`~django.contrib.auth.models.User.username` 和 :attr:`~django.contrib."
"auth.models.User.password` 按给定设置。:attr:`~django.contrib.auth.models."
"User.email` 的域名部分会自动转换为小写，返回的 :class:`~django.contrib.auth."
"models.User` 对象的 :attr:`~django.contrib.auth.models.User.is_active` 设置"
"为 ``True``。"

msgid ""
"If no password is provided, :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` will be called."
msgstr ""
"如果没有提供密码， :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` 将被调用。"

msgid ""
"The ``extra_fields`` keyword arguments are passed through to the :class:"
"`~django.contrib.auth.models.User`’s ``__init__`` method to allow setting "
"arbitrary fields on a :ref:`custom user model <auth-custom-user>`."
msgstr ""
"``extra_fields`` 关键字参数被传递到 :class:`~django.contrib.auth.models."
"User` 的 ``__init__`` 方法中，允许在 :ref:`自定义用户模型 <auth-custom-"
"user>` 上设置任意字段。"

msgid ""
"See :ref:`Creating users <topics-auth-creating-users>` for example usage."
msgstr "使用方法参见 :ref:`创建用户 <topics-auth-creating-users>`。"

msgid ""
"Same as :meth:`create_user`, but sets :attr:`~models.User.is_staff` and :"
"attr:`~models.User.is_superuser` to ``True``."
msgstr ""
"与 :meth:`create_user` 相同，但将 :attr:`~models.User.is_staff` 和 :attr:"
"`~models.User.is_superuser` 设置为 ``True``。"

msgid ""
"Returns users that have the given permission ``perm`` either in the ``\"<app "
"label>.<permission codename>\"`` format or as a :class:`~django.contrib.auth."
"models.Permission` instance. Returns an empty queryset if no users who have "
"the ``perm`` found."
msgstr ""
"返回拥有给定权限 ``perm`` 的用户，可以是 ``\"<app label>.<permission "
"codename>\"`` 格式，也可以是 :class:`~django.contrib.auth.models.Permission` "
"实例。如果没有找到拥有 ``perm`` 的用户，返回一个空的查询集。"

msgid ""
"If ``is_active`` is ``True`` (default), returns only active users, or if "
"``False``, returns only inactive users. Use ``None`` to return all users "
"irrespective of active state."
msgstr ""
"如果 ``is_active`` 为 ``True`` （默认），则只返回活跃用户，如果 ``False``，则"
"只返回非活跃用户。使用 ``None`` 返回所有用户，无论其是否处于活跃状态。"

msgid ""
"If ``include_superusers`` is ``True`` (default), the result will include "
"superusers."
msgstr "如果 ``include_superusers`` 为 ``True`` （默认），结果将包括超级用户。"

msgid ""
"If ``backend`` is passed in and it's defined in :setting:"
"`AUTHENTICATION_BACKENDS`, then this method will use it. Otherwise, it will "
"use the ``backend`` in :setting:`AUTHENTICATION_BACKENDS`, if there is only "
"one, or raise an exception."
msgstr ""
"如果传入了 ``backend``，并且在 :setting:`AUTHENTICATION_BACKENDS` 中定义了，"
"那么本方法将使用它。否则，它将使用 :setting:`AUTHENTICATION_BACKENDS` 中的 "
"``backend``，如果只有一个的话，或者引发一个异常。"

msgid "``AnonymousUser`` object"
msgstr "``AnonymousUser`` 对象"

msgid ""
":class:`django.contrib.auth.models.AnonymousUser` is a class that implements "
"the :class:`django.contrib.auth.models.User` interface, with these "
"differences:"
msgstr ""
":class:`django.contrib.auth.models.AnonymousUser` 是一个实现了 :class:"
"`django.contrib.auth.models.User` 接口的类，有这些区别："

msgid ":ref:`id <automatic-primary-key-fields>` is always ``None``."
msgstr ":ref:`id <automatic-primary-key-fields>` 总是 ``None``。"

msgid ""
":attr:`~django.contrib.auth.models.User.username` is always the empty string."
msgstr ":attr:`~django.contrib.auth.models.User.username` 总是空字符串。"

msgid ""
":meth:`~django.contrib.auth.models.User.get_username()` always returns the "
"empty string."
msgstr ""
":meth:`~django.contrib.auth.models.User.get_username()` 总是返回空字符串。"

msgid ""
":attr:`~django.contrib.auth.models.User.is_anonymous` is ``True`` instead of "
"``False``."
msgstr ""
":attr:`~django.contrib.auth.models.User.is_anonymous` 是 ``True`` 而不是 "
"``False``。"

msgid ""
":attr:`~django.contrib.auth.models.User.is_authenticated` is ``False`` "
"instead of ``True``."
msgstr ""
":attr:`~django.contrib.auth.models.User.is_authenticated` 是 ``False`` 而不"
"是 ``True``。"

msgid ""
":attr:`~django.contrib.auth.models.User.is_staff` and :attr:`~django.contrib."
"auth.models.User.is_superuser` are always ``False``."
msgstr ""
":attr:`~django.contrib.auth.models.User.is_staff` 和 :attr:`~django.contrib."
"auth.models.User.is_superuser` 总是 ``False``。"

msgid ":attr:`~django.contrib.auth.models.User.is_active` is always ``False``."
msgstr ":attr:`~django.contrib.auth.models.User.is_active` 总是 ``False``。"

msgid ""
":attr:`~django.contrib.auth.models.User.groups` and :attr:`~django.contrib."
"auth.models.User.user_permissions` are always empty."
msgstr ""
":attr:`~django.contrib.auth.models.User.group` 和 :attr:`~django.contrib."
"auth.models.User.user_permissions` 总是空的。"

msgid ""
":meth:`~django.contrib.auth.models.User.set_password()`, :meth:`~django."
"contrib.auth.models.User.check_password()`, :meth:`~django.db.models.Model."
"save` and :meth:`~django.db.models.Model.delete()` raise :exc:"
"`NotImplementedError`."
msgstr ""
":meth:`~django.contrib.auth.models.User.set_password()`、:meth:`~django."
"contrib.auth.models.User.check_password()`、:meth:`~django.db.models.Model."
"save` 和 :meth:`~django.db.models.Model.delete()` 引发 :exc:"
"`NotImplementedError`。"

msgid ""
"In practice, you probably won't need to use :class:`~django.contrib.auth."
"models.AnonymousUser` objects on your own, but they're used by web requests, "
"as explained in the next section."
msgstr ""
"在实践中，你可能不需要自己使用 :class:`~django.contrib.auth.models."
"AnonymousUser` 对象，但它们会被网络请求使用，在下一节中解释。"

msgid "``Permission`` model"
msgstr "``Permission`` 模型"

msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the following "
"fields:"
msgstr ":class:`~django.contrib.auth.models.Permission` 对象有以下字段："

msgid "Required. 255 characters or fewer. Example: ``'Can vote'``."
msgstr "必要的。255 个字符或以下。例如：``'Can vote'``。"

msgid ""
"Required. A reference to the ``django_content_type`` database table, which "
"contains a record for each installed model."
msgstr ""
"必要的。对 ``django_content_type`` 数据库表的引用，该表包含每个已安装模型的记"
"录。"

msgid "Required. 100 characters or fewer. Example: ``'can_vote'``."
msgstr "必要的。100 个字符或以下。例如：``'can_vote'``。"

msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the standard "
"data-access methods like any other :doc:`Django model </ref/models/"
"instances>`."
msgstr ""
":class:`~django.contrib.auth.models.Permission` 对象和其他 :doc:`Django 模型 "
"</ref/models/instances>` 一样拥有标准的数据访问方法。"

msgid "``Group`` model"
msgstr "``Group`` 模型"

msgid ""
":class:`~django.contrib.auth.models.Group` objects have the following fields:"
msgstr ":class:`~django.contrib.auth.models.Group` 对象有以下字段："

msgid ""
"Required. 150 characters or fewer. Any characters are permitted. Example: "
"``'Awesome Users'``."
msgstr "要求： 150 个字符或以下。允许使用任何字符。例如：``'Awesome Users'``。"

msgid "Many-to-many field to :class:`~django.contrib.auth.models.Permission`::"
msgstr "多对多字段到 :class:`~django.contrib.auth.models.Permission`："

msgid "Validators"
msgstr "验证器"

msgid ""
"A field validator allowing only ASCII letters and numbers, in addition to "
"``@``, ``.``, ``+``, ``-``, and ``_``."
msgstr ""
"除了 ``@``、``.``、``+``、``-`` 和 ``_`` 之外，只允许使用 ASCII 字母和数字的"
"字段验证器。"

msgid ""
"A field validator allowing Unicode characters, in addition to ``@``, ``.``, "
"``+``, ``-``, and ``_``. The default validator for ``User.username``."
msgstr ""
"除了 ``@``、``.``、``+``、``-`` 和 ``_`` 之外，还允许使用 Unicode 字符的字段"
"验证器。``User.username`` 的默认验证器。"

msgid "Login and logout signals"
msgstr "登录和注销的信号"

msgid ""
"The auth framework uses the following :doc:`signals </topics/signals>` that "
"can be used for notification when a user logs in or out."
msgstr ""
"认证框架使用了以下的 :doc:`信号 </topics/signals>`，可以在用户登录或退出时用"
"于通知。"

msgid "Sent when a user logs in successfully."
msgstr "当用户成功登录时发送。"

msgid "Arguments sent with this signal:"
msgstr "用此信号发送的参数："

msgid "``sender``"
msgstr "``sender``"

msgid "The class of the user that just logged in."
msgstr "刚刚登录的用户的类。"

msgid "``request``"
msgstr "``request``"

msgid "The current :class:`~django.http.HttpRequest` instance."
msgstr "当前的 :class:`~django.http.HttpRequest` 实例。"

msgid "``user``"
msgstr "``user``"

msgid "The user instance that just logged in."
msgstr "刚刚登录的用户的实例。"

msgid "Sent when the logout method is called."
msgstr "调用注销方法时发送。"

msgid ""
"As above: the class of the user that just logged out or ``None`` if the user "
"was not authenticated."
msgstr "如上所述：刚刚注销的用户的类，如果用户没有经过认证，则为 ``None``。"

msgid ""
"The user instance that just logged out or ``None`` if the user was not "
"authenticated."
msgstr "刚刚注销的用户实例，如果用户没有经过认证，则为 ``None``。"

msgid "Sent when the user failed to login successfully"
msgstr "当用户未能成功登录时发送"

msgid "The name of the module used for authentication."
msgstr "用于认证的模块名称。"

msgid "``credentials``"
msgstr "``credentials``"

msgid ""
"A dictionary of keyword arguments containing the user credentials that were "
"passed to :func:`~django.contrib.auth.authenticate()` or your own custom "
"authentication backend. Credentials matching a set of 'sensitive' patterns, "
"(including password) will not be sent in the clear as part of the signal."
msgstr ""
"一个包含关键字参数的字典，其中包含传递给 :func:`~django.contrib.auth."
"authenticate()` 或你自己的自定义认证后端的用户凭证。匹配一组“敏感的”模式的凭"
"证（包括密码）将不会作为信号的一部分被发送。"

msgid ""
"The :class:`~django.http.HttpRequest` object, if one was provided to :func:"
"`~django.contrib.auth.authenticate`."
msgstr ""
":class:`~django.http.HttpRequest` 对象，如果有提供给 :func:`~django.contrib."
"auth.authenticate` 对象的话。"

msgid "Authentication backends"
msgstr "认证后端"

msgid ""
"This section details the authentication backends that come with Django. For "
"information on how to use them and how to write your own authentication "
"backends, see the :ref:`Other authentication sources section <authentication-"
"backends>` of the :doc:`User authentication guide </topics/auth/index>`."
msgstr ""
"本节详细介绍了 Django 自带的认证后端。关于如何使用它们以及如何编写你自己的认"
"证后端，请参阅 :doc:`用户认证指南 </topics/auth/index>` 中的 :ref:`其他认证"
"源 <authentication-backends>` 部分。"

msgid "Available authentication backends"
msgstr "可用的认证后端"

msgid ""
"The following backends are available in :mod:`django.contrib.auth.backends`:"
msgstr "在 :mod:`django.contrib.auth.backends` 中可以找到以下后端："

msgid ""
"A base class that provides default implementations for all required methods. "
"By default, it will reject any user and provide no permissions."
msgstr ""
"一个为所有所需方法提供默认实现的基类。默认情况下，它将拒绝任何用户并不提供任"
"何权限。"

msgid "Returns an empty set."
msgstr "返回一个空集。"

msgid ""
"Uses :meth:`get_user_permissions` and :meth:`get_group_permissions` to get "
"the set of permission strings the ``user_obj`` has."
msgstr ""
"使用 :meth:`get_user_permissions` 和 :meth:`get_group_permissions` 来获取 "
"``user_obj`` 所拥有的权限字符串。"

msgid ""
"Uses :meth:`get_all_permissions` to check if ``user_obj`` has the permission "
"string ``perm``."
msgstr ""
"使用 :meth:`get_all_permissions` 检查 ``user_obj`` 是否有 ``perm`` 的权限字符"
"串。"

msgid ""
"This is the default authentication backend used by Django.  It authenticates "
"using credentials consisting of a user identifier and password.  For "
"Django's default user model, the user identifier is the username, for custom "
"user models it is the field specified by USERNAME_FIELD (see :doc:"
"`Customizing Users and authentication </topics/auth/customizing>`)."
msgstr ""
"这是 Django 默认使用的认证后端。 它使用由用户标识符和密码组成的凭证进行认"
"证。 对于 Django 的默认用户模型来说，用户标识符是用户名，对于自定义用户模型来"
"说，它是 USERNAME_FIELD 指定的字段（参见 :doc:`自定义用户和身份认证 </topics/"
"auth/customizing>`）。"

msgid ""
"It also handles the default permissions model as defined for :class:`~django."
"contrib.auth.models.User` and :class:`~django.contrib.auth.models."
"PermissionsMixin`."
msgstr ""
"它还处理了为 :class:`~django.contrib.auth.models.User` 和 :class:`~django."
"contrib.auth.models.PermissionsMixin` 定义的默认权限模型。"

msgid ""
":meth:`has_perm`, :meth:`get_all_permissions`, :meth:`get_user_permissions`, "
"and :meth:`get_group_permissions` allow an object to be passed as a "
"parameter for object-specific permissions, but this backend does not "
"implement them other than returning an empty set of permissions if ``obj is "
"not None``."
msgstr ""
":meth:`has_perm`、 :meth:`get_all_permissions`、 :meth:"
"`get_user_permissions` 和 :meth:`get_group_permissions` 允许将对象作为参数传"
"递给特定对象的权限，但除了在 ``obj is not None`` 的情况下返回一个空的权限集"
"外，这个后端并没有实现它们。"

msgid ""
":meth:`with_perm` also allows an object to be passed as a parameter, but "
"unlike others methods it returns an empty queryset if ``obj is not None``."
msgstr ""
":meth:`with_perm` 也允许传递一个对象作为参数，但与其他方法不同的是，如果 "
"``obj is not None``，则返回一个空的查询集。"

msgid ""
"Tries to authenticate ``username`` with ``password`` by calling :meth:`User."
"check_password <django.contrib.auth.models.User.check_password>`. If no "
"``username`` is provided, it tries to fetch a username from ``kwargs`` using "
"the key :attr:`CustomUser.USERNAME_FIELD <django.contrib.auth.models."
"CustomUser.USERNAME_FIELD>`. Returns an authenticated user or ``None``."
msgstr ""
"通过调用 :meth:`User.check_password <django.contrib.auth.models.User."
"check_password>` 尝试用 ``password`` 认证 ``username``。如果没有提供 "
"``username``，则尝试使用键 :attr:`CustomUser.USERNAME_FIELD <django.contrib."
"auth.models.CustomUser.USERNAME_FIELD>` 从 ``kwargs`` 中获取一个用户名。返回"
"一个已认证的用户或 ``None``。"

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` and may be ``None`` if "
"it wasn't provided to :func:`~django.contrib.auth.authenticate` (which "
"passes it on to the backend)."
msgstr ""
"``request`` 是一个 :class:`~django.http.HttpRequest`，如果没有提供给 :func:"
"`~django.contrib.auth.authenticate` （将其传递给后端），则可能是 ``None``。"

msgid ""
"Returns the set of permission strings the ``user_obj`` has from their own "
"user permissions. Returns an empty set if :attr:`~django.contrib.auth.models."
"AbstractBaseUser.is_anonymous` or :attr:`~django.contrib.auth.models."
"CustomUser.is_active` is ``False``."
msgstr ""
"从他们自己的用户权限中返回 ``user_obj`` 拥有的权限字符串集。如果 :attr:"
"`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` 或 :attr:"
"`~django.contrib.auth.models.CustomUser.is_active` 是 ``False``，则返回空集。"

msgid ""
"Returns the set of permission strings the ``user_obj`` has from the "
"permissions of the groups they belong. Returns an empty set if :attr:"
"`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` or :attr:"
"`~django.contrib.auth.models.CustomUser.is_active`  is ``False``."
msgstr ""
"从他们自己的用户权限中返回 ``user_obj`` 拥有的权限字符串集。如果 :attr:"
"`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` 或 :attr:"
"`~django.contrib.auth.models.CustomUser.is_active` 是 ``False``，则返回空集。"

msgid ""
"Returns the set of permission strings the ``user_obj`` has, including both "
"user permissions and group permissions. Returns an empty set if :attr:"
"`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` or :attr:"
"`~django.contrib.auth.models.CustomUser.is_active` is ``False``."
msgstr ""
"从他们自己的用户权限中返回 ``user_obj`` 拥有的权限字符串集。如果 :attr:"
"`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` 或 :attr:"
"`~django.contrib.auth.models.CustomUser.is_active` 是 ``False``，则返回空集。"

msgid ""
"Uses :meth:`get_all_permissions` to check if ``user_obj`` has the permission "
"string ``perm``. Returns ``False`` if the user is not :attr:`~django.contrib."
"auth.models.CustomUser.is_active`."
msgstr ""
"使用 :meth:`get_all_permissions` 检查 ``user_obj`` 是否有 ``perm`` 的权限。如"
"果用户没有 :attr:`~django.contrib.auth.models.CustomUser.is_active`，则返回 "
"``False``。"

msgid ""
"Returns whether the ``user_obj`` has any permissions on the app "
"``app_label``."
msgstr "返回 ``user_obj`` 是否对应用 ``app_label`` 具有任何权限。"

msgid ""
"Returns whether the user is allowed to authenticate. To match the behavior "
"of :class:`~django.contrib.auth.forms.AuthenticationForm` which :meth:"
"`prohibits inactive users from logging in <django.contrib.auth.forms."
"AuthenticationForm.confirm_login_allowed>`, this method returns ``False`` "
"for users with :attr:`is_active=False <django.contrib.auth.models.User."
"is_active>`. Custom user models that don't have an :attr:`~django.contrib."
"auth.models.CustomUser.is_active` field are allowed."
msgstr ""
"返回是否允许用户进行认证。为了与 :class:`~django.contrib.auth.forms."
"AuthenticationForm` 中 :meth:`prohibits inactive users from logging in "
"<django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed>` 的行为"
"相匹配，对于有 :attr:`is_active=False <django.contrib.auth.models.User."
"is_active>` 的用户，本方法返回 ``False``。允许没有 :attr:`~django.contrib."
"auth.models.CustomUser.is_active` 字段的自定义用户模型。"

msgid ""
"Returns all active users who have the permission ``perm`` either in the form "
"of ``\"<app label>.<permission codename>\"`` or a :class:`~django.contrib."
"auth.models.Permission` instance. Returns an empty queryset if no users who "
"have the ``perm`` found."
msgstr ""
"返回所有拥有 ``perm`` 权限的活跃用户，可以是 ``\"<app label>.<permission "
"codename>\"`` 的形式，也可以是 :class:`~django.contrib.auth.models."
"Permission` 实例。如果没有找到拥有 ``perm`` 权限的用户，则返回一个空的查询"
"集。"

msgid ""
"Same as :class:`ModelBackend` except that it doesn't reject inactive users "
"because :meth:`~ModelBackend.user_can_authenticate` always returns ``True``."
msgstr ""
"与 :class:`ModelBackend` 一样，只是它不会拒绝非活动用户，因为 :meth:"
"`~ModelBackend.user_can_authenticate` 总是返回 ``True``。"

msgid ""
"When using this backend, you'll likely want to customize the :class:`~django."
"contrib.auth.forms.AuthenticationForm` used by the :class:`~django.contrib."
"auth.views.LoginView` by overriding the :meth:`~django.contrib.auth.forms."
"AuthenticationForm.confirm_login_allowed` method as it rejects inactive "
"users."
msgstr ""
"当使用这个后台时，你可能会想要自定义 :class:`~django.contrib.auth.forms."
"AuthenticationForm` 所使用的 :class:`~django.contrib.auth.views.LoginView`，"
"通过覆盖 :meth:`~django.contrib.auth.forms.AuthenticationForm."
"confirm_login_allowed` 方法，因为它拒绝非活动用户。"

msgid ""
"Use this backend to take advantage of external-to-Django-handled "
"authentication.  It authenticates using usernames passed in :attr:`request."
"META['REMOTE_USER'] <django.http.HttpRequest.META>`.  See the :doc:"
"`Authenticating against REMOTE_USER </howto/auth-remote-user>` documentation."
msgstr ""
"使用这个后端来利用外部对 Django 处理的认证。 它使用 :attr:`request."
"META['REMOTE_USER'] <django.http.HttpRequest.META>` 中传递的用户名进行认证。 "
"参见 :doc:`认证 REMOTE_USER </howto/auth-remote-user>` 文档。"

msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from this class and override these attributes or methods:"
msgstr ""
"如果你需要更多的控制，你可以创建自己的认证后端，继承这个类，并覆盖这些属性或"
"方法："

msgid ""
"``True`` or ``False``. Determines whether or not a user object is created if "
"not already in the database  Defaults to ``True``."
msgstr ""
"``True`` 或 ``False``。确定如果数据库中没有用户对象，是否创建用户对象。默认"
"为 ``True``。"

msgid ""
"The username passed as ``remote_user`` is considered trusted. This method "
"returns the user object with the given username, creating a new user object "
"if :attr:`~RemoteUserBackend.create_unknown_user` is ``True``."
msgstr ""
"作为 ``remote_user`` 传递的用户名被认为是可信的。如果 :attr:"
"`~RemoteUserBackend.create_unknown_user` 为 ``True``，则该方法返回给定用户名"
"的用户对象，创建一个新的用户对象。"

msgid ""
"Returns ``None`` if :attr:`~RemoteUserBackend.create_unknown_user` is "
"``False`` and a ``User`` object with the given username is not found in the "
"database."
msgstr ""
"如果 :attr:`~RemoteUserBackend.create_unknown_user` 为 ``False``，且数据库中"
"没有找到给定用户名的 ``User`` 对象，则返回 ``None``。"

msgid ""
"Performs any cleaning on the ``username`` (e.g. stripping LDAP DN "
"information) prior to using it to get or create a user object. Returns the "
"cleaned username."
msgstr ""
"在使用 ``username`` 获取或创建用户对象之前，对 ``username`` 进行任何清理（例"
"如剥离 LDAP DN 信息）。返回清理后的用户名。"

msgid ""
"Configures the user on each authentication attempt. This method is called "
"immediately after fetching or creating the user being authenticated, and can "
"be used to perform custom setup actions, such as setting the user's groups "
"based on attributes in an LDAP directory. Returns the user object."
msgstr ""

msgid ""
"The setup can be performed either once when the user is created (``created`` "
"is ``True``) or on existing users (``created`` is ``False``) as a way of "
"synchronizing attributes between the remote and the local systems."
msgstr ""

msgid "The ``created`` argument was added."
msgstr ""

msgid ""
"Returns whether the user is allowed to authenticate. This method returns "
"``False`` for users with :attr:`is_active=False <django.contrib.auth.models."
"User.is_active>`. Custom user models that don't have an :attr:`~django."
"contrib.auth.models.CustomUser.is_active` field are allowed."
msgstr ""
"返回是否允许用户进行身份认证。对于有 :attr:`is_active=False <django.contrib."
"auth.models.User.is_active>` 的用户，本方法返回 ``False``。允许没有 :attr:"
"`~django.contrib.auth.models.CustomUser.is_active` 字段的自定义用户模型。"

msgid ""
"Same as :class:`RemoteUserBackend` except that it doesn't reject inactive "
"users because :attr:`~RemoteUserBackend.user_can_authenticate` always "
"returns ``True``."
msgstr ""
"与 :class:`RemoteUserBackend` 相同，只是它不会拒绝非活动用户，因为 :attr:"
"`~RemoteUserBackend.user_can_authenticate` 总是返回 ``True``。"

msgid "Utility functions"
msgstr "实用工具函数"

msgid ""
"Returns the user model instance associated with the given ``request``’s "
"session."
msgstr "返回与给定 ``request`` 的会话相关联的用户模型实例。"

msgid ""
"It checks if the authentication backend stored in the session is present in :"
"setting:`AUTHENTICATION_BACKENDS`. If so, it uses the backend's "
"``get_user()`` method to retrieve the user model instance and then verifies "
"the session by calling the user model's :meth:`~django.contrib.auth.models."
"AbstractBaseUser.get_session_auth_hash` method. If the verification fails "
"and :setting:`SECRET_KEY_FALLBACKS` are provided, it verifies the session "
"against each fallback key using :meth:`~django.contrib.auth.models."
"AbstractBaseUser.\\ get_session_auth_fallback_hash`."
msgstr ""

msgid ""
"Returns an instance of :class:`~django.contrib.auth.models.AnonymousUser` if "
"the authentication backend stored in the session is no longer in :setting:"
"`AUTHENTICATION_BACKENDS`, if a user isn't returned by the backend's "
"``get_user()`` method, or if the session auth hash doesn't validate."
msgstr ""
"如果存储在会话中的认证后端不再在 :setting:`AUTHENTICATION_BACKENDS` 中，如果"
"后端的 ``get_user()`` 方法没有返回用户，或者会话认证的哈希没有认证，则返回一"
"个 :class:`~django.contrib.auth.models.AnonymousUser` 的实例。"

msgid "Fallback verification with :setting:`SECRET_KEY_FALLBACKS` was added."
msgstr ""

msgid "The contenttypes framework"
msgstr "内容类型框架"

msgid ""
"Django includes a :mod:`~django.contrib.contenttypes` application that can "
"track all of the models installed in your Django-powered project, providing "
"a high-level, generic interface for working with your models."
msgstr ""
"Django 包含了一个 :mod:`~django.contrib.contenttypes` 应用程序，它可以跟踪所"
"有安装在你的 Django 项目中的模型，为你的模型提供了一个高级的通用接口。"

msgid ""
"At the heart of the contenttypes application is the :class:`~django.contrib."
"contenttypes.models.ContentType` model, which lives at ``django.contrib."
"contenttypes.models.ContentType``. Instances of :class:`~django.contrib."
"contenttypes.models.ContentType` represent and store information about the "
"models installed in your project, and new instances of :class:`~django."
"contrib.contenttypes.models.ContentType` are automatically created whenever "
"new models are installed."
msgstr ""
"内容类型应用的核心是 :class:`~django.contrib.contenttypes.models."
"ContentType` 模型，它位于 ``django.contrib.contenttypes.models."
"ContentType``。:class:`~django.contrib.contenttypes.models.ContentType` 的实"
"例代表和存储了你项目中安装的模型的信息，每当有新的模型安装时，就会自动创建 :"
"class:`~django.contrib.contenttypes.models.ContentType` 的新实例。"

msgid ""
"Instances of :class:`~django.contrib.contenttypes.models.ContentType` have "
"methods for returning the model classes they represent and for querying "
"objects from those models. :class:`~django.contrib.contenttypes.models."
"ContentType` also has a :ref:`custom manager <custom-managers>` that adds "
"methods for working with :class:`~django.contrib.contenttypes.models."
"ContentType` and for obtaining instances of :class:`~django.contrib."
"contenttypes.models.ContentType` for a particular model."
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` 的实例有方法用于返回"
"它们所代表的模型类和查询这些模型中的对象。 :class:`~django.contrib."
"contenttypes.models.ContentType`  也有一个 :ref:`自定义管理器 <custom-"
"managers>`，它增加了一些方法，用于处理 :class:`~django.contrib.contenttypes."
"models.ContentType`，以及为特定模型获取 :class:`~django.contrib.contenttypes."
"models.ContentType` 的实例。"

msgid ""
"Relations between your models and :class:`~django.contrib.contenttypes."
"models.ContentType` can also be used to enable \"generic\" relationships "
"between an instance of one of your models and instances of any model you "
"have installed."
msgstr ""
"你的模型和 :class:`~django.contrib.contenttypes.models.ContentType` 之间的关"
"系也可以用来启用你的一个模型实例和你安装的任何模型实例之间的“通用 ”关系。"

msgid "Installing the contenttypes framework"
msgstr "安装内容类型框架"

msgid ""
"The contenttypes framework is included in the default :setting:"
"`INSTALLED_APPS` list created by ``django-admin startproject``, but if "
"you've removed it or if you manually set up your :setting:`INSTALLED_APPS` "
"list, you can enable it by adding ``'django.contrib.contenttypes'`` to your :"
"setting:`INSTALLED_APPS` setting."
msgstr ""
"内容类型框架包含在由 ``django-admin startproject`` 创建的默认的 :setting:"
"`INSTALLED_APPS` 列表中，但是如果你已经删除了它，或者你手动设置了 :setting:"
"`INSTALLED_APPS` 列表，你可以通过在 :setting:`INSTALLED_APPS` 配置中添加 "
"``'django.contrib.contenttypes'`` 来启用它。"

msgid ""
"It's generally a good idea to have the contenttypes framework installed; "
"several of Django's other bundled applications require it:"
msgstr ""
"一般来说，安装内容类型框架是个不错的主意；Django 的其他一些捆绑的应用程序都需"
"要它："

msgid ""
"The admin application uses it to log the history of each object added or "
"changed through the admin interface."
msgstr "管理应用程序使用它来记录通过管理界面添加或更改的每个对象的历史。"

msgid ""
"Django's :mod:`authentication framework <django.contrib.auth>` uses it to "
"tie user permissions to specific models."
msgstr ""
"Django 的 :mod:`认证框架 <django.contrib.auth>` 使用它将用户权限与特定模型绑"
"定。"

msgid "The ``ContentType`` model"
msgstr "``ContentType`` 模型"

msgid ""
"Each instance of :class:`~django.contrib.contenttypes.models.ContentType` "
"has two fields which, taken together, uniquely describe an installed model:"
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` 的每个实例都有两个字"
"段，这两个字段合在一起，唯一地描述了一个安装的模型。"

msgid ""
"The name of the application the model is part of. This is taken from the :"
"attr:`app_label` attribute of the model, and includes only the *last* part "
"of the application's Python import path; ``django.contrib.contenttypes``, "
"for example, becomes an :attr:`app_label` of ``contenttypes``."
msgstr ""
"模型所属应用程序的名称。这是从模型的 :attr:`app_label` 属性中提取的，并且只包"
"括应用程序的 Python 导入路径的 *最后* 一部分；例如，``django.contrib."
"contenttypes`` 就变成了 ``contenttypes`` 的 :attr:`app_label`。"

msgid "The name of the model class."
msgstr "模型类的名称。"

msgid "Additionally, the following property is available:"
msgstr "此外，还有以下属性："

msgid ""
"The human-readable name of the content type. This is taken from the :attr:"
"`verbose_name <django.db.models.Field.verbose_name>` attribute of the model."
msgstr ""
"内容类型的可读名称。这是从模型的 :attr:`verbose_name <django.db.models.Field."
"verbose_name>` 属性中提取的。"

msgid ""
"Let's look at an example to see how this works. If you already have the :mod:"
"`~django.contrib.contenttypes` application installed, and then add :mod:`the "
"sites application <django.contrib.sites>` to your :setting:`INSTALLED_APPS` "
"setting and run ``manage.py migrate`` to install it, the model :class:"
"`django.contrib.sites.models.Site` will be installed into your database. "
"Along with it a new instance of :class:`~django.contrib.contenttypes.models."
"ContentType` will be created with the following values:"
msgstr ""
"让我们看一个例子来了解它是如何工作的。如果你已经安装了 :mod:`~django.contrib."
"contenttypes` 应用程序，然后添加 :mod:`站点框架 <django.contrib.sites>` 到你"
"的 :setting:`INSTALLED_APPS` 配置中，并运行 ``manage.py migrate`` 来安装它，"
"模型 :class:`django.contrib.sites.models.Site` 将被安装到你的数据库中。与它一"
"起创建一个新的 :class:`~django.contrib.contenttypes.models.ContentType` 实"
"例，其值如下："

msgid ""
":attr:`~django.contrib.contenttypes.models.ContentType.app_label` will be "
"set to ``'sites'`` (the last part of the Python path ``django.contrib."
"sites``)."
msgstr ""
":attr:`~django.contrib.contenttypes.models.ContentType.app_label` 将被设置为 "
"``'sites'`` （Python 路径 ``django.contrib.sites`` 的最后一部分）。"

msgid ""
":attr:`~django.contrib.contenttypes.models.ContentType.model` will be set to "
"``'site'``."
msgstr ""
":attr:`~django.contrib.contenttypes.models.ContentType.model` 将被设置为 "
"``'site'``。"

msgid "Methods on ``ContentType`` instances"
msgstr "``ContentType`` 实例的方法"

msgid ""
"Each :class:`~django.contrib.contenttypes.models.ContentType` instance has "
"methods that allow you to get from a :class:`~django.contrib.contenttypes."
"models.ContentType` instance to the model it represents, or to retrieve "
"objects from that model:"
msgstr ""
"每个 :class:`~django.contrib.contenttypes.models.ContentType` 实例都有一些方"
"法，允许你从 :class:`~django.contrib.contenttypes.models.ContentType` 实例获"
"得它所代表的模型，或者从该模型中检索对象。"

msgid ""
"Takes a set of valid :ref:`lookup arguments <field-lookups-intro>` for the "
"model the :class:`~django.contrib.contenttypes.models.ContentType` "
"represents, and does :meth:`a get() lookup <django.db.models.query.QuerySet."
"get>` on that model, returning the corresponding object."
msgstr ""
"为 :class:`~django.contrib.contenttypes.models.ContentType` 所代表的模型获取"
"一组有效的 :ref:`查找参数 <field-lookups-intro>`，并对该模型进行 :meth:`一个 "
"get() 查找 <django.db.models.query.QuerySet.get>`，返回相应的对象。"

msgid ""
"Returns the model class represented by this :class:`~django.contrib."
"contenttypes.models.ContentType` instance."
msgstr ""
"返回这个 :class:`~django.contrib.contenttypes.models.ContentType` 实例所代表"
"的模型类。"

msgid ""
"For example, we could look up the :class:`~django.contrib.contenttypes."
"models.ContentType` for the :class:`~django.contrib.auth.models.User` model:"
msgstr ""

msgid ""
"And then use it to query for a particular :class:`~django.contrib.auth."
"models.User`, or to get access to the ``User`` model class:"
msgstr ""

msgid ""
"Together, :meth:`~django.contrib.contenttypes.models.ContentType."
"get_object_for_this_type` and :meth:`~django.contrib.contenttypes.models."
"ContentType.model_class` enable two extremely important use cases:"
msgstr ""
":meth:`~django.contrib.contenttypes.models.ContentType."
"get_object_for_this_type` 和 :meth:`~django.contrib.contenttypes.models."
"ContentType.model.model_model_class` 共同实现了两个极其重要的用例："

msgid ""
"Using these methods, you can write high-level generic code that performs "
"queries on any installed model -- instead of importing and using a single "
"specific model class, you can pass an ``app_label`` and ``model`` into a :"
"class:`~django.contrib.contenttypes.models.ContentType` lookup at runtime, "
"and then work with the model class or retrieve objects from it."
msgstr ""
"使用这些方法，你可以编写高级通用代码，在任何安装的模型上执行查询——而不是导入"
"和使用一个特定的模型类，你可以在运行时将 ``app_label`` 和 ``model`` 传递到一"
"个 :class:`~django.contrib.contenttypes.models.ContentType` 的查找中，然后与"
"模型类一起工作，或者从中检索对象。"

msgid ""
"You can relate another model to :class:`~django.contrib.contenttypes.models."
"ContentType` as a way of tying instances of it to particular model classes, "
"and use these methods to get access to those model classes."
msgstr ""
"你可以将另一个模型与 :class:`~django.contrib.contenttypes.models."
"ContentType` 相关联，以此将它的实例与特定的模型类绑定，并使用这些方法来获取对"
"这些模型类的访问。"

msgid ""
"Several of Django's bundled applications make use of the latter technique. "
"For example, :class:`the permissions system <django.contrib.auth.models."
"Permission>` in Django's authentication framework uses a :class:`~django."
"contrib.auth.models.Permission` model with a foreign key to :class:`~django."
"contrib.contenttypes.models.ContentType`; this lets :class:`~django.contrib."
"auth.models.Permission` represent concepts like \"can add blog entry\" or "
"\"can delete news story\"."
msgstr ""
"Django 的几个捆绑应用都使用了后一种技术。例如，Django 的认证框架中的 :class:"
"``权限系统 <django.contrib.auth.models.Permission>` 使用了一个 :class:"
"`~django.contrib.auth.models.Permission` 模型，该模型的外键为 :class:"
"`~django.contrib.contenttypes.models.ContentType`；这使得 :class:`~django."
"contrib.auth.models.Permission` 可以表示“可以添加博客条目”或“可以删除新闻报"
"道”等概念。"

msgid "The ``ContentTypeManager``"
msgstr "``ContentTypeManager``"

msgid ""
":class:`~django.contrib.contenttypes.models.ContentType` also has a custom "
"manager, :class:`~django.contrib.contenttypes.models.ContentTypeManager`, "
"which adds the following methods:"
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` 还有一个自定义管理"
"器， :class:`~django.contrib.contenttypes.models.ContentTypeManager`，它增加"
"了以下方法："

msgid ""
"Clears an internal cache used by :class:`~django.contrib.contenttypes.models."
"ContentType` to keep track of models for which it has created :class:"
"`~django.contrib.contenttypes.models.ContentType` instances. You probably "
"won't ever need to call this method yourself; Django will call it "
"automatically when it's needed."
msgstr ""
"清除 :class:`~django.contrib.contenttypes.models.ContentType` 内部的缓存，用"
"来跟踪已经创建了 :class:`~django.contrib.contenttypes.models.ContentType` 实"
"例的模型。你可能永远都不需要自己调用这个方法，Django 会在需要的时候自动调用"
"它。"

msgid ""
"Lookup a :class:`~django.contrib.contenttypes.models.ContentType` by ID. "
"Since this method uses the same shared cache as :meth:`~django.contrib."
"contenttypes.models.ContentTypeManager.get_for_model`, it's preferred to use "
"this method over the usual ``ContentType.objects.get(pk=id)``"
msgstr ""
"通过 ID 查找一个 :class:`~django.contrib.contenttypes.models.ContentType`。由"
"于该方法与 :meth:`~django.contrib.contenttypes.models.ContentTypeManager."
"get_for_model` 使用了相同的共享缓存，所以最好使用该方法，而不是通常的 "
"``ContentType.objects.get(pk=id)``。"

msgid ""
"Takes either a model class or an instance of a model, and returns the :class:"
"`~django.contrib.contenttypes.models.ContentType` instance representing that "
"model. ``for_concrete_model=False`` allows fetching the :class:`~django."
"contrib.contenttypes.models.ContentType` of a proxy model."
msgstr ""
"取一个模型类或一个模型的实例，并返回代表该模型的 :class:`~django.contrib."
"contenttypes.models.ContentType` 实例。``for_concrete_model=False`` 允许获取"
"代理模型的 :class:`~django.contrib.contenttypes.models.ContentType` 实例。"

msgid ""
"Takes a variadic number of model classes, and returns a dictionary mapping "
"the model classes to the :class:`~django.contrib.contenttypes.models."
"ContentType` instances representing them. ``for_concrete_models=False`` "
"allows fetching the :class:`~django.contrib.contenttypes.models.ContentType` "
"of proxy models."
msgstr ""
"取一个数量不等的模型类，并返回一个将模型类映射到代表它们的 :class:`~django."
"contrib.contenttypes.models.ContentType` 实例的字典。"
"``for_concrete_models=False`` 允许获取代理模型的 :class:`~django.contrib."
"contenttypes.models.ContentType` 实例。"

msgid ""
"Returns the :class:`~django.contrib.contenttypes.models.ContentType` "
"instance uniquely identified by the given application label and model name. "
"The primary purpose of this method is to allow :class:`~django.contrib."
"contenttypes.models.ContentType` objects to be referenced via a :ref:"
"`natural key<topics-serialization-natural-keys>` during deserialization."
msgstr ""
"返回由给定的应用程序标签和模型名称唯一标识的 :class:`~django.contrib."
"contenttypes.models.ContentType` 实例。本方法的主要目的是允许 :class:"
"`~django.contrib.contenttypes.models.ContentType` 对象在反序列化过程中通过 :"
"ref:`自然键 <topics-serialization-natural-keys>` 被引用。"

msgid ""
"The :meth:`~ContentTypeManager.get_for_model()` method is especially useful "
"when you know you need to work with a :class:`ContentType <django.contrib."
"contenttypes.models.ContentType>` but don't want to go to the trouble of "
"obtaining the model's metadata to perform a manual lookup:"
msgstr ""

msgid "Generic relations"
msgstr "通用关系"

msgid ""
"Adding a foreign key from one of your own models to :class:`~django.contrib."
"contenttypes.models.ContentType` allows your model to effectively tie itself "
"to another model class, as in the example of the :class:`~django.contrib."
"auth.models.Permission` model above. But it's possible to go one step "
"further and use :class:`~django.contrib.contenttypes.models.ContentType` to "
"enable truly generic (sometimes called \"polymorphic\") relationships "
"between models."
msgstr ""
"在 :class:`~django.contrib.contenttypes.models.ContentType` 中添加一个来自你"
"自己模型的外键，可以让你的模型有效地将自己与另一个模型类绑定，就像上面 :"
"class:`~django.contrib.autrib.h.models.Permission` 模型的例子一样。但也可以更"
"进一步，使用 :class:`~django.contrib.contract.contenttypes.models."
"ContentType` 来实现模型之间真正的通用（有时也称为 “多态”）关系。"

msgid "For example, it could be used for a tagging system like so::"
msgstr "例如，它可以用于这样的标签系统："

msgid ""
"A normal :class:`~django.db.models.ForeignKey` can only \"point to\" one "
"other model, which means that if the ``TaggedItem`` model used a :class:"
"`~django.db.models.ForeignKey` it would have to choose one and only one "
"model to store tags for. The contenttypes application provides a special "
"field type (``GenericForeignKey``) which works around this and allows the "
"relationship to be with any model:"
msgstr ""
"一个普通的 :class:`~django.db.models.ForeignKey` 只能 “指向” 一个其他模型，这"
"意味着如果 ``TaggedItem`` 模型使用 :class:`~django.db.models.ForeignKey`，它"
"将不得不选择一个且仅有一个模型来存储标签。contenttypes 应用程序提供了一个特殊"
"的字段类型 （``GenericForeignKey``），它可以解决这个问题，并允许与任何模型建"
"立关系："

msgid ""
"There are three parts to setting up a :class:`~django.contrib.contenttypes."
"fields.GenericForeignKey`:"
msgstr ""
"设置一个 :class:`~django.contrib.contenttypes.fields.GenericForeignKey` 分为"
"三步："

msgid ""
"Give your model a :class:`~django.db.models.ForeignKey` to :class:`~django."
"contrib.contenttypes.models.ContentType`. The usual name for this field is "
"\"content_type\"."
msgstr ""
"给你的模型一个 :class:`~django.db.models.ForeignKey` 到 :class:`~django."
"contrib.contenttypes.models.ContentType`。这个字段的通常名称是 "
"“content_type”。"

msgid ""
"Give your model a field that can store primary key values from the models "
"you'll be relating to. For most models, this means a :class:`~django.db."
"models.PositiveIntegerField`. The usual name for this field is \"object_id\"."
msgstr ""
"给你的模型一个字段，它可以存储你要关联的模型的主键值。对于大多数模型来说，这"
"意味着一个 :class:`~django.db.models.PositiveIntegerField`。这个字段的通常名"
"称是 “object_id”。"

msgid ""
"Give your model a :class:`~django.contrib.contenttypes.fields."
"GenericForeignKey`, and pass it the names of the two fields described above. "
"If these fields are named \"content_type\" and \"object_id\", you can omit "
"this -- those are the default field names :class:`~django.contrib."
"contenttypes.fields.GenericForeignKey` will look for."
msgstr ""
"给你的模型一个 :class:`~django.contrib.contenttypes.fields."
"GenericForeignKey`，并把上面描述的两个字段的名字传给它。如果这些字段的名字是 "
"“content_type” 和 “object_id”，你可以省略这一点 —— 这些是 :class:`~django."
"contrib.contrib.contenttypes.fields.GenericForeignKey` 会查找的默认字段名。"

msgid ""
"Unlike for the :class:`~django.db.models.ForeignKey`, a database index is "
"*not* automatically created on the :class:`~django.contrib.contenttypes."
"fields.GenericForeignKey`, so it's recommended that you use :attr:`Meta."
"indexes <django.db.models.Options.indexes>` to add your own multiple column "
"index. This behavior :ticket:`may change <23435>` in the future."
msgstr ""

msgid ""
"If ``False``, the field will be able to reference proxy models. Default is "
"``True``. This mirrors the ``for_concrete_model`` argument to :meth:`~django."
"contrib.contenttypes.models.ContentTypeManager.get_for_model`."
msgstr ""
"如果 ``False``，该字段将能够引用代理模型。默认值是 ``True``。这与 :meth:"
"`~django.contrib.contenttypes.models.ContentTypeManager.get_for_model` 的 "
"``for_concrete_model`` 参数一致。"

msgid "Primary key type compatibility"
msgstr "主键类型兼容性"

msgid ""
"The \"object_id\" field doesn't have to be the same type as the primary key "
"fields on the related models, but their primary key values must be coercible "
"to the same type as the \"object_id\" field by its :meth:`~django.db.models."
"Field.get_db_prep_value` method."
msgstr ""
"“object_id” 字段不一定要和相关模型上的主键字段是同一类型，但它们的主键值必须"
"通过其 :meth:`~django.db.models.Field.get_db_prep_value` 方法与 “object_id” "
"字段的类型一致。"

msgid ""
"For example, if you want to allow generic relations to models with either :"
"class:`~django.db.models.IntegerField` or :class:`~django.db.models."
"CharField` primary key fields, you can use :class:`~django.db.models."
"CharField` for the \"object_id\" field on your model since integers can be "
"coerced to strings by :meth:`~django.db.models.Field.get_db_prep_value`."
msgstr ""
"例如，如果你想允许通用关系到具有 :class:`~django.db.models.IntegerField`或 :"
"class:`~django.db.models.CharField` 主键字段的模型，你可以使用 :class:"
"`~django.db.models.CharField` 作为你的模型上的 “object_id” 字段，因为整数可以"
"通过 :meth:`~django.db.models.Field.get_db_prep_value` 强制转换成字符串。"

msgid ""
"For maximum flexibility you can use a :class:`~django.db.models.TextField` "
"which doesn't have a maximum length defined, however this may incur "
"significant performance penalties depending on your database backend."
msgstr ""
"为了获得最大的灵活性，你可以使用一个 :class:`~django.db.models.TextField`，它"
"没有定义最大的长度，但是这可能会根据你的数据库后端产生显著的性能惩罚。"

msgid ""
"There is no one-size-fits-all solution for which field type is best. You "
"should evaluate the models you expect to be pointing to and determine which "
"solution will be most effective for your use case."
msgstr ""
"对于哪种字段类型最好，没有一个放之四海而皆准的解决方案。你应该评估你期望指向"
"的模型，并确定哪种解决方案对你的用例最有效。"

msgid "Serializing references to ``ContentType`` objects"
msgstr "序列化对 ``ContentType`` 对象的引用"

msgid ""
"If you're serializing data (for example, when generating :class:`~django."
"test.TransactionTestCase.fixtures`) from a model that implements generic "
"relations, you should probably be using a natural key to uniquely identify "
"related :class:`~django.contrib.contenttypes.models.ContentType` objects. "
"See :ref:`natural keys<topics-serialization-natural-keys>` and :option:"
"`dumpdata --natural-foreign` for more information."
msgstr ""
"如果你正在从实现通用关系的模型中序列化数据（例如，在生成 :class:`~django."
"test.TransactionTestCase.fixtures` 时），你可能应该使用自然键来唯一地识别相关"
"的 :class:`~django.contrib.contenttypes.models.ContentType` 对象。参见 :ref:`"
"自然键 <topics-serialization-natural-keys>` 和 :option:`dumpdata --natural-"
"foreign` 了解更多信息。"

msgid ""
"This will enable an API similar to the one used for a normal :class:`~django."
"db.models.ForeignKey`; each ``TaggedItem`` will have a ``content_object`` "
"field that returns the object it's related to, and you can also assign to "
"that field or use it when creating a ``TaggedItem``:"
msgstr ""

msgid ""
"If the related object is deleted, the ``content_type`` and ``object_id`` "
"fields remain set to their original values and the ``GenericForeignKey`` "
"returns ``None``:"
msgstr ""

msgid ""
"Due to the way :class:`~django.contrib.contenttypes.fields."
"GenericForeignKey` is implemented, you cannot use such fields directly with "
"filters (``filter()`` and ``exclude()``, for example) via the database API. "
"Because a :class:`~django.contrib.contenttypes.fields.GenericForeignKey` "
"isn't a normal field object, these examples will *not* work:"
msgstr ""

msgid ""
"Likewise, :class:`~django.contrib.contenttypes.fields.GenericForeignKey`\\s "
"does not appear in :class:`~django.forms.ModelForm`\\s."
msgstr ""
"同样， :class:`~django.contrib.contenttypes.fields.GenericForeignKey` 也没有"
"出现在 :class:`~django.forms.ModelForm` 中。"

msgid "Reverse generic relations"
msgstr "反查通用关系"

msgid ""
"The relation on the related object back to this object doesn't exist by "
"default. Setting ``related_query_name`` creates a relation from the related "
"object back to this one. This allows querying and filtering from the related "
"object."
msgstr ""
"默认情况下，相关对象与本对象的关系并不存在。设置 ``related_query_name`` 创建"
"一个从相关对象到这个对象的关系。这样就可以从关联对象中进行查询和过滤。"

msgid ""
"If you know which models you'll be using most often, you can also add a "
"\"reverse\" generic relationship to enable an additional API. For example::"
msgstr ""
"如果你知道哪些模型你会最经常使用，你也可以添加一个 “反向” 的通用关系来启用一"
"个额外的 API。例如："

msgid ""
"``Bookmark`` instances will each have a ``tags`` attribute, which can be "
"used to retrieve their associated ``TaggedItems``:"
msgstr ""

msgid ""
"You can also use ``add()``, ``create()``, or ``set()`` to create "
"relationships:"
msgstr ""

msgid "The ``remove()`` call will bulk delete the specified model objects:"
msgstr ""

msgid ""
"The ``clear()`` method can be used to bulk delete all related objects for an "
"instance:"
msgstr ""

msgid ""
"Defining :class:`~django.contrib.contenttypes.fields.GenericRelation` with "
"``related_query_name`` set allows querying from the related object::"
msgstr ""
"定义 :class:`~django.contrib.contenttypes.fields.GenericRelation`，并设置 "
"``related_query_name`` 允许从相关对象查询："

msgid ""
"This enables filtering, ordering, and other query operations on ``Bookmark`` "
"from ``TaggedItem``:"
msgstr ""

msgid ""
"If you don't add the ``related_query_name``, you can do the same types of "
"lookups manually:"
msgstr ""

msgid ""
"Just as :class:`~django.contrib.contenttypes.fields.GenericForeignKey` "
"accepts the names of the content-type and object-ID fields as arguments, so "
"too does :class:`~django.contrib.contenttypes.fields.GenericRelation`; if "
"the model which has the generic foreign key is using non-default names for "
"those fields, you must pass the names of the fields when setting up a :class:"
"`.GenericRelation` to it. For example, if the ``TaggedItem`` model referred "
"to above used fields named ``content_type_fk`` and ``object_primary_key`` to "
"create its generic foreign key, then a :class:`.GenericRelation` back to it "
"would need to be defined like so::"
msgstr ""
"正如 :class:`~django.contrib.contenttypes.field.GenericForeignKey` 接受"
"content-type 和 object-ID 字段的名称作为参数一样， :class:`~django.contrib."
"contenttypes.field.GenericRelation` 也是如此；如果拥有通用外键的模型对这些字"
"段使用了非默认的名称，那么在给它设置 :class:`.GenericRelation` 时必须传递这些"
"字段的名称。例如，如果上面提到的 ``TaggedItem`` 模型使用了名为 "
"``content_type_fk`` 和 ``object_primary_key`` 的字段来创建它的通用外键，那么"
"回传给它的 :class:`.GenericRelation` 就需要这样定义："

msgid ""
"Note also, that if you delete an object that has a :class:`~django.contrib."
"contenttypes.fields.GenericRelation`, any objects which have a :class:"
"`~django.contrib.contenttypes.fields.GenericForeignKey` pointing at it will "
"be deleted as well. In the example above, this means that if a ``Bookmark`` "
"object were deleted, any ``TaggedItem`` objects pointing at it would be "
"deleted at the same time."
msgstr ""
"还要注意的是，如果你删除了一个有 :class:`~django.contrib.contenttypes.field."
"GenericRelation` 的对象，任何有 :class:`~django.contrib.contenttypes.field."
"GenericForeignKey` 指向它的对象也会被删除。在上面的例子中，这意味着如果一个 "
"``Bookmark`` 对象被删除，任何指向它的 ``TaggedItem`` 对象也会同时被删除。"

msgid ""
"Unlike :class:`~django.db.models.ForeignKey`, :class:`~django.contrib."
"contenttypes.fields.GenericForeignKey` does not accept an :attr:`~django.db."
"models.ForeignKey.on_delete` argument to customize this behavior; if "
"desired, you can avoid the cascade-deletion by not using :class:`~django."
"contrib.contenttypes.fields.GenericRelation`, and alternate behavior can be "
"provided via the :data:`~django.db.models.signals.pre_delete` signal."
msgstr ""
"与 :class:`~django.db.models.ForeignKey` 不同， :class:`~django.contrib."
"contenttypes.field.GenericForeignKey` 不接受 :attr:`~django.db.models."
"ForeignKey. on_delete` 参数来定制这个行为；如果需要，可以不使用 :class:"
"`~django.contrib.contrib.contenttypes.field.GenericRelation` 来避免级联删除，"
"可以通过 :data:`~django.db.models.signals.pre_delete` 信号来提供替代行为。"

msgid "Generic relations and aggregation"
msgstr "通用关系和聚合"

msgid ""
":doc:`Django's database aggregation API </topics/db/aggregation>` works with "
"a :class:`~django.contrib.contenttypes.fields.GenericRelation`. For example, "
"you can find out how many tags all the bookmarks have:"
msgstr ""

msgid "Generic relation in forms"
msgstr "表单中的通用关系"

msgid "The :mod:`django.contrib.contenttypes.forms` module provides:"
msgstr ":mod:`django.contrib.contenttypes.forms` 模块提供："

msgid ":class:`BaseGenericInlineFormSet`"
msgstr ":class:`BaseGenericInlineFormSet`"

msgid ""
"A formset factory, :func:`generic_inlineformset_factory`, for use with :"
"class:`~django.contrib.contenttypes.fields.GenericForeignKey`."
msgstr ""
"一个表单集工厂， :func:`generic_inlineformset_factory`，用于 :class:`~django."
"contrib.contenttypes.fields.GenericForeignKey`。"

msgid ""
"Returns a ``GenericInlineFormSet`` using :func:`~django.forms.models."
"modelformset_factory`."
msgstr ""
"使用 :func:`~django.forms.models.modelormset_factory` 返回一个 "
"``GenericInlineFormSet``。"

msgid ""
"You must provide ``ct_field`` and ``fk_field`` if they are different from "
"the defaults, ``content_type`` and ``object_id`` respectively. Other "
"parameters are similar to those documented in :func:`~django.forms.models."
"modelformset_factory` and :func:`~django.forms.models.inlineformset_factory`."
msgstr ""
"你必须提供 ``ct_field`` 和 ``fk_field``，如果它们与默认值 ``content_type`` "
"和 ``object_id`` 不同。其他参数与 :func:`~django.forms.models."
"modelselformset_factory` 和 :func:`~django.forms.models."
"inlineformset_factory` 中记载的类似。"

msgid ""
"The ``for_concrete_model`` argument corresponds to the :class:`~django."
"contrib.contenttypes.fields.GenericForeignKey.for_concrete_model` argument "
"on ``GenericForeignKey``."
msgstr ""
"``for_concrete_model`` 参数对应于 :class:`~django.contrib.contenttypes.field."
"GenericForeignKey.for_concrete_model`` 参数。"

msgid "Generic relations in admin"
msgstr "管理中的通用关系"

msgid ""
"The :mod:`django.contrib.contenttypes.admin` module provides :class:`~django."
"contrib.contenttypes.admin.GenericTabularInline` and :class:`~django.contrib."
"contenttypes.admin.GenericStackedInline` (subclasses of :class:`~django."
"contrib.contenttypes.admin.GenericInlineModelAdmin`)"
msgstr ""
":mod:`django.contrib.contenttypes.admin` 模块提供了 :class:`~django.contrib."
"contenttypes.admin.GenericTabularInline` 和 :class:`~django.contrib."
"contenttypes.admin.GenericStackedInline`（ :class:`~django.contrib."
"contenttypes.admin.GenericInlineModelAdmin` 的子类）。"

msgid ""
"These classes and functions enable the use of generic relations in forms and "
"the admin. See the :doc:`model formset </topics/forms/modelforms>` and :ref:"
"`admin <using-generic-relations-as-an-inline>` documentation for more "
"information."
msgstr ""
"这些类和函数可以在表单和管理中使用通用关系。更多信息请参见 :doc:`模型表单集 "
"</topics/forms/modelforms>` 和 :ref:`管理 <using-generic-relations-as-an-"
"inline>` 文档。"

msgid ""
"The :class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin` "
"class inherits all properties from an :class:`~django.contrib.admin."
"InlineModelAdmin` class. However, it adds a couple of its own for working "
"with the generic relation:"
msgstr ""
":class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin` 类继承"
"了 :class:`~django.contrib.admin.InlineModelAdmin` 类的所有属性。然而，它增加"
"了一些自己的属性来处理通用关系："

msgid ""
"The name of the :class:`~django.contrib.contenttypes.models.ContentType` "
"foreign key field on the model. Defaults to ``content_type``."
msgstr ""
"模型上的 :class:`~django.contrib.contenttypes.models.ContentType` 外键字段的"
"名称。默认为 ``content_type``。"

msgid ""
"The name of the integer field that represents the ID of the related object. "
"Defaults to ``object_id``."
msgstr "代表相关对象 ID 的整数字段的名称。默认值为 ``object_id``。"

msgid ""
"Subclasses of :class:`GenericInlineModelAdmin` with stacked and tabular "
"layouts, respectively."
msgstr ":class:`GenericInlineModelAdmin` 的子类，分别具有堆栈式和表格式布局。"

msgid "The flatpages app"
msgstr "简单页面应用"

msgid ""
"Django comes with an optional \"flatpages\" application. It lets you store "
"\"flat\" HTML content in a database and handles the management for you via "
"Django's admin interface and a Python API."
msgstr ""
"Django 自带一个可选的“简单页面”应用程序。它可以让你在数据库中存储“简单”的 "
"HTML 内容，并通过 Django 的管理界面和 Python API 为你处理管理。"

msgid ""
"A flatpage is an object with a URL, title and content. Use it for one-off, "
"special-case pages, such as \"About\" or \"Privacy Policy\" pages, that you "
"want to store in a database but for which you don't want to develop a custom "
"Django application."
msgstr ""

msgid ""
"A flatpage can use a custom template or a default, systemwide flatpage "
"template. It can be associated with one, or multiple, sites."
msgstr ""
"一个简单页面可以使用自定义模板，也可以使用系统默认的简单页面模板。它可以与一"
"个或多个网站关联。"

msgid ""
"The content field may optionally be left blank if you prefer to put your "
"content in a custom template."
msgstr "如果你想把你的内容放在一个自定义模板中，内容字段可以选择留空。"

msgid "Installation"
msgstr "安装"

msgid "To install the flatpages app, follow these steps:"
msgstr "要安装简单页面应用，请按照以下步骤操作："

msgid ""
"Install the :mod:`sites framework <django.contrib.sites>` by adding "
"``'django.contrib.sites'`` to your :setting:`INSTALLED_APPS` setting, if "
"it's not already in there."
msgstr ""
"安装 :mod:`站点框架 <django.contrib.sites>`，在 :setting:`INSTALLED_APPS` 设"
"置中添加 ``'django.contrib.sites'``，如果还没有的话。"

msgid ""
"Also make sure you've correctly set :setting:`SITE_ID` to the ID of the site "
"the settings file represents. This will usually be ``1`` (i.e. ``SITE_ID = "
"1``, but if you're using the sites framework to manage multiple sites, it "
"could be the ID of a different site."
msgstr ""
"同时确保你已经正确地设置 :setting:`SITE_ID` 为配置文件所代表的网站 ID。这通常"
"是 ``1`` （即 ``SITE_ID = 1``，但如果你使用网站框架来管理多个网站，它可能是不"
"同网站的 ID。"

msgid ""
"Add ``'django.contrib.flatpages'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
"将 ``'django.contrib.flatpages'`` 添加到你的 :setting:`INSTALLED_APPS` 配置"
"中。"

msgid "Then either:"
msgstr "那么无论是："

msgid "Add an entry in your URLconf. For example::"
msgstr "在你的 URLconf 中添加一个条目。例如："

msgid "or:"
msgstr "或："

msgid ""
"Add ``'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'`` to "
"your :setting:`MIDDLEWARE` setting."
msgstr ""
"将 ``'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'`` 添加"
"到你的 :setting:`MIDDLEWARE` 配置中。"

msgid "Run the command :djadmin:`manage.py migrate <migrate>`."
msgstr "运行命令 :djadmin:`manage.py migrate <migrate>`。"

msgid "How it works"
msgstr "工作方式"

msgid ""
"``manage.py migrate`` creates two tables in your database: "
"``django_flatpage`` and ``django_flatpage_sites``. ``django_flatpage`` is a "
"lookup table that maps a URL to a title and bunch of text content. "
"``django_flatpage_sites`` associates a flatpage with a site."
msgstr ""
"``manage.py migrate`` 在数据库中创建两个表。``django_flatpage`` 和 "
"``django_flatpage_sites``。``django_flatpage`` 是一个查找表，将一个 URL 映射"
"到标题和一堆文本内容。``django_flatpage_sites`` 将一个简单页面与一个网站关联"
"起来。"

msgid "Using the URLconf"
msgstr "使用 URLconf"

msgid ""
"There are several ways to include the flat pages in your URLconf. You can "
"dedicate a particular path to flat pages::"
msgstr ""
"有几种方法可以在你的 URLconf 中包含简单页面。你可以为简单页面指定一个特定的路"
"径："

msgid ""
"You can also set it up as a \"catchall\" pattern. In this case, it is "
"important to place the pattern at the end of the other urlpatterns::"
msgstr ""
"你也可以把它设置成一个“catchall”模式。在这种情况下，重要的是将该模式放在其他 "
"urlpatterns 的最后："

msgid ""
"If you set :setting:`APPEND_SLASH` to ``False``, you must remove the slash "
"in the catchall pattern or flatpages without a trailing slash will not be "
"matched."
msgstr ""
"如果你将 :setting:`APPEND_SLASH` 设置为 ``False``，你必须删除 catchall 模式中"
"的斜杠，否则没有尾部斜杠的简单页面将不会被匹配。"

msgid ""
"Another common setup is to use flat pages for a limited set of known pages "
"and to hard code the urls, so you can reference them with the :ttag:`url` "
"template tag::"
msgstr ""
"另一种常见的设置是对有限的已知页面集使用简单页面，并对网址进行硬编码，所以你"
"可以用 :ttag:`url` 模板标签来引用它们："

msgid "Using the middleware"
msgstr "使用中间件"

msgid ""
"The :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` "
"can do all of the work."
msgstr ""
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` 可以"
"完成所有的工作。"

msgid ""
"Each time any Django application raises a 404 error, this middleware checks "
"the flatpages database for the requested URL as a last resort. Specifically, "
"it checks for a flatpage with the given URL with a site ID that corresponds "
"to the :setting:`SITE_ID` setting."
msgstr ""
"每当任何 Django 应用出现 404 错误时，这个中间件都会检查简单页面数据库中所请求"
"的 URL，作为最后的手段。具体来说，它检查给定 URL 的简单页面，其网站 ID 对应"
"于:setting:`SITE_ID` 配置。"

msgid "If it finds a match, it follows this algorithm:"
msgstr "如果它找到了一个匹配，就按照这个算法："

msgid ""
"If the flatpage has a custom template, it loads that template. Otherwise, it "
"loads the template :file:`flatpages/default.html`."
msgstr ""
"如果简单页面有自定义模板，它就加载该模板。否则，它会加载模板 :file:"
"`flatpages/default.html`。"

msgid ""
"It passes that template a single context variable, ``flatpage``, which is "
"the flatpage object. It uses :class:`~django.template.RequestContext` in "
"rendering the template."
msgstr ""
"它给该模板传递了一个上下文变量 ``flatpage``，也就是简单页面对象。它使用 :"
"class:`~django.template.RequestContext` 来渲染模板。"

msgid ""
"The middleware will only add a trailing slash and redirect (by looking at "
"the :setting:`APPEND_SLASH` setting) if the resulting URL refers to a valid "
"flatpage. Redirects are permanent (301 status code)."
msgstr ""
"如果产生的 URL 指向有效的简单页面，中间件只会添加尾部的斜线和重定向（通过查"
"看 :setting:`APPEND_SLASH` 配置）。重定向是永久性的（301 状态码）。"

msgid ""
"If it doesn't find a match, the request continues to be processed as usual."
msgstr "如果没有找到匹配的请求，则继续照常处理。"

msgid ""
"The middleware only gets activated for 404s -- not for 500s or responses of "
"any other status code."
msgstr "中间件只有在 404 时才会被激活——而不是 500 或任何其他状态码的响应。"

msgid "Flatpages will not apply view middleware"
msgstr "简单页面不会应用视图中间件"

msgid ""
"Because the ``FlatpageFallbackMiddleware`` is applied only after URL "
"resolution has failed and produced a 404, the response it returns will not "
"apply any :ref:`view middleware <view-middleware>` methods. Only requests "
"which are successfully routed to a view via normal URL resolution apply view "
"middleware."
msgstr ""
"因为 ``FlatpageFallbackMiddleware`` 只有在 URL 解析失败并产生 404 之后才会应"
"用，所以它返回的响应不会应用任何 :ref:`视图中间件 <view-middleware>` 方法。只"
"有通过正常 URL 解析成功路由到视图的请求才会应用视图中间件。"

msgid ""
"Note that the order of :setting:`MIDDLEWARE` matters. Generally, you can "
"put :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` "
"at the end of the list. This means it will run first when processing the "
"response, and ensures that any other response-processing middleware see the "
"real flatpage response rather than the 404."
msgstr ""
"注意 :setting:`MIDDLEWARE` 的顺序很重要。一般来说，你可以把 :class:`~django."
"contrib.flatpages.middleware.FlatpageFallbackMiddleware` 放在列表的最后。这意"
"味着它将在处理响应时首先运行，并确保任何其他响应处理中间件看到的是真正的简单"
"页面响应而不是 404。"

msgid ""
"For more on middleware, read the :doc:`middleware docs </topics/http/"
"middleware>`."
msgstr ""
"关于中间件的更多内容，请阅读 :doc:`中间件文档 </topics/http/middleware>`。"

msgid "Ensure that your 404 template works"
msgstr "确保你的 404 模板工作"

msgid ""
"Note that the :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` only steps in once another view has successfully "
"produced a 404 response. If another view or middleware class attempts to "
"produce a 404 but ends up raising an exception instead, the response will "
"become an HTTP 500 (\"Internal Server Error\") and the :class:`~django."
"contrib.flatpages.middleware.FlatpageFallbackMiddleware` will not attempt to "
"serve a flat page."
msgstr ""
"请注意 :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` 只有在另一个视图成功产生 404 响应后才会介入。如果"
"另一个视图或中间件类试图产生 404，但最后却引发了一个异常，那么响应将变成 "
"HTTP 500（“内部服务器错误”），并且 :class:`~django.contrib.flatpages."
"middleware.FlatpageFallbackMiddleware` 将不会试图服务一个简单页面。"

msgid "How to add, change and delete flatpages"
msgstr "如何添加、更改和删除简单页面"

msgid ""
"Permissions to add or edit flatpages should be restricted to trusted users. "
"Flatpages are defined by raw HTML and are **not sanitized** by Django. As a "
"consequence, a malicious flatpage can lead to various security "
"vulnerabilities, including permission escalation."
msgstr ""

msgid "Via the admin interface"
msgstr "通过管理界面"

msgid ""
"If you've activated the automatic Django admin interface, you should see a "
"\"Flatpages\" section on the admin index page. Edit flatpages as you edit "
"any other object in the system."
msgstr ""
"如果你已经激活了 Django 的自动管理界面，你应该会在管理索引页上看到一个“简单页"
"面”栏目。编辑简单页面就像编辑系统中的其他对象一样。"

msgid ""
"The ``FlatPage`` model has an ``enable_comments`` field that isn't used by "
"``contrib.flatpages``, but that could be useful for your project or third-"
"party apps. It doesn't appear in the admin interface, but you can add it by "
"registering a custom ``ModelAdmin`` for ``FlatPage``::"
msgstr ""
"``FlatPage`` 模型有一个 ``enable_comments`` 字段，``contrib.flatpages`` 没有"
"使用，但对你的项目或第三方应用程序可能有用。它不会出现在管理界面中，但你可以"
"通过为 ``FlatPage`` 注册一个自定义的 ``ModelAdmin`` 来添加它："

msgid "Via the Python API"
msgstr "通过 Python API"

msgid ""
"Flatpages are represented by a standard :doc:`Django model </topics/db/"
"models>`, which lives in :source:`django/contrib/flatpages/models.py`. You "
"can access flatpage objects via the :doc:`Django database API </topics/db/"
"queries>`."
msgstr ""
"简单页面由一个标准的 :doc:`Django 模型 </topics/db/models>` 来表示，它位于 :"
"source:`django/contrib/flatpages/models.py` 中。你可以通过 :doc:`Django 数据"
"库 API </topics/db/queries>` 来访问简单页面对象。"

msgid "Check for duplicate flatpage URLs."
msgstr "检查是否有重复的简单页面网址。"

msgid ""
"If you add or modify flatpages via your own code, you will likely want to "
"check for duplicate flatpage URLs within the same site. The flatpage form "
"used in the admin performs this validation check, and can be imported from "
"``django.contrib.flatpages.forms.FlatpageForm`` and used in your own views."
msgstr ""
"如果你通过自己的代码来添加或修改简单页面，你很可能要检查同一站点内是否有重复"
"的简单页面 URL。管理中使用的简单页面表单可以执行这种验证检查，可以从 "
"``django.contrib.flatpages.forms.FlatpageForm`` 中导入，并在你自己的视图中使"
"用。"

msgid "Flatpage templates"
msgstr "简单页面模板"

msgid ""
"By default, flatpages are rendered via the template :file:`flatpages/default."
"html`, but you can override that for a particular flatpage: in the admin, a "
"collapsed fieldset titled \"Advanced options\" (clicking will expand it) "
"contains a field for specifying a template name. If you're creating a flat "
"page via the Python API you can set the template name as the field "
"``template_name`` on the ``FlatPage`` object."
msgstr ""
"默认情况下，简单页面是通过模板 :file:`flatpages/default.html` 来渲染的，但是"
"你可以为某个特定的简单页面覆盖这个模板：在管理中，一个名为“高级选项”的折叠式"
"字段集（点击可以展开）包含了一个指定模板名称的字段。如果你是通过 Python API "
"创建一个简单页面，你可以将模板名称设置为 ``template_name`` 对象上的字段 "
"``FlatPage``。"

msgid ""
"Creating the :file:`flatpages/default.html` template is your responsibility; "
"in your template directory, create a :file:`flatpages` directory containing "
"a file :file:`default.html`."
msgstr ""
"创建 :file:`flatpages/default.html` 模板是你的责任；在你的模板目录下，创建一"
"个 :file:`flatpages` 目录，其中包含一个文件 :file:`default.html`。"

msgid ""
"Flatpage templates are passed a single context variable, ``flatpage``, which "
"is the flatpage object."
msgstr "简单模板被传递一个单一的上下文变量 ``flatpage``，也就是简单页面对象。"

msgid "Here's a sample :file:`flatpages/default.html` template:"
msgstr "下面是一个示例 :file:`flatpages/default.html` 模板："

msgid ""
"Since you're already entering raw HTML into the admin page for a flatpage, "
"both ``flatpage.title`` and ``flatpage.content`` are marked as **not** "
"requiring :ref:`automatic HTML escaping <automatic-html-escaping>` in the "
"template."
msgstr ""
"由于你已经在管理页面中输入了原始 HTML，所以 ``flatpage.title`` 和 ``flatpage."
"content`` 都在模板中被标记为 **不需要** :ref:`自动 HTML 转义 <automatic-html-"
"escaping>`。"

msgid ""
"Getting a list of :class:`~django.contrib.flatpages.models.FlatPage` objects "
"in your templates"
msgstr ""
"获取模板中的 :class:`~django.contrib.flatpages.models.FlatPage` 对象列表"

msgid ""
"The flatpages app provides a template tag that allows you to iterate over "
"all of the available flatpages on the :ref:`current site <hooking-into-"
"current-site-from-views>`."
msgstr ""
"简单页面应用提供了一个模板标签，允许你在 :ref:`当前站点 <hooking-into-"
"current-site-from-views>`上迭代所有可用的简单应用。"

msgid ""
"Like all custom template tags, you'll need to :ref:`load its custom tag "
"library <loading-custom-template-libraries>` before you can use it. After "
"loading the library, you can retrieve all current flatpages via the :ttag:"
"`get_flatpages` tag:"
msgstr ""
"和所有的自定义模板标签一样，在使用它之前，你需要 :ref:`加载其自定义标签库 "
"<loading-custom-template-libraries>`。加载库后，你可以通过 :ttag:"
"`get_flatpages` 标签来检索当前所有的简单页面。"

msgid "Displaying ``registration_required`` flatpages"
msgstr "显示 ``registration_required`` 简单页面"

msgid ""
"By default, the :ttag:`get_flatpages` template tag will only show flatpages "
"that are marked ``registration_required = False``. If you want to display "
"registration-protected flatpages, you need to specify an authenticated user "
"using a ``for`` clause."
msgstr ""
"默认情况下，:ttag:`get_flatpages` 模板标签只显示标记为 "
"``registration_required = False`` 的页面。如果你想显示受注册保护的页面，你需"
"要使用 ``for`` 子句指定一个经过认证的用户。"

msgid "For example:"
msgstr "例如："

msgid ""
"If you provide an anonymous user, :ttag:`get_flatpages` will behave the same "
"as if you hadn't provided a user -- i.e., it will only show you public "
"flatpages."
msgstr ""
"如果你提供了一个匿名用户， :ttag:`get_flatpages` 将与你没有提供用户的行为相同"
"——即，它将只向你显示公共的简单页面。"

msgid "Limiting flatpages by base URL"
msgstr "通过基础 URL 限制简单页面"

msgid ""
"An optional argument, ``starts_with``, can be applied to limit the returned "
"pages to those beginning with a particular base URL. This argument may be "
"passed as a string, or as a variable to be resolved from the context."
msgstr ""
"一个可选的参数，``starts_with``，可以用来限制返回的页面以特定的基本 URL 开"
"头。这个参数可以以字符串的形式传递，也可以以一个变量的形式从上下文中解析。"

msgid "Integrating with :mod:`django.contrib.sitemaps`"
msgstr "与 :mod:`django.contrib.sitemaps` 整合"

msgid ""
"The :class:`sitemaps.FlatPageSitemap <django.contrib.flatpages.sitemaps."
"FlatPageSitemap>` class looks at all publicly visible :mod:`~django.contrib."
"flatpages` defined for the current :setting:`SITE_ID` (see the :mod:`sites "
"documentation <django.contrib.sites>`) and creates an entry in the sitemap. "
"These entries include only the :attr:`~django.contrib.sitemaps.Sitemap."
"location` attribute -- not :attr:`~django.contrib.sitemaps.Sitemap."
"lastmod`, :attr:`~django.contrib.sitemaps.Sitemap.changefreq` or :attr:"
"`~django.contrib.sitemaps.Sitemap.priority`."
msgstr ""
":class:`sitemaps.FlatPageSitemap <django.contrib.flatpages.sitemaps."
"FlatPageSitemap>` 类查看所有为当前 :setting:`SITE_ID` 定义的公开可见的 :mod:"
"`~django.contrib.flatpages` （参见 :mod:`站点文档 <django.contrib.sites>`），"
"并在站点地图中创建一个条目。这些条目只包括 :attr:`~django.contrib.sitemaps."
"Sitemap.location` 属性——不包括 :attr:`~django.contrib.sitemaps.Sitemap."
"lastmod`、 :attr:`~django.contrib.sitemaps.Sitemap.changefreq` 或 :attr:"
"`~django.contrib.sitemaps.Sitemap.priority`。"

msgid "Example"
msgstr "例如"

msgid "Here's an example of a URLconf using :class:`FlatPageSitemap`::"
msgstr "下面是一个使用 :class:`FlatPageSitemap` 的 URLconf 的例子："

msgid "GeoDjango's admin site"
msgstr "GeoDjango 的管理站点"

msgid "``GISModelAdmin``"
msgstr "``GISModelAdmin``"

msgid ""
"The widget class to be used for :class:`~django.contrib.gis.db.models."
"GeometryField`. Defaults to :class:`~django.contrib.gis.forms.widgets."
"OSMWidget`."
msgstr ""

msgid ""
"The keyword arguments that would be passed to the :attr:`gis_widget`. "
"Defaults to an empty dictionary."
msgstr ""

msgid "``GeoModelAdmin``"
msgstr "``GeoModelAdmin``"

msgid "The default center longitude."
msgstr ""

msgid "The default center latitude."
msgstr ""

msgid "The default zoom level to use.  Defaults to 4."
msgstr ""

msgid "Sequence of URLs to any extra JavaScript to include."
msgstr ""

msgid ""
"Override the template used to generate the JavaScript slippy map. Default is "
"``'gis/admin/openlayers.html'``."
msgstr ""

msgid "Width of the map, in pixels.  Defaults to 600."
msgstr ""

msgid "Height of the map, in pixels.  Defaults to 400."
msgstr ""

msgid ""
"Link to the URL of the OpenLayers JavaScript.  Defaults to ``'https://cdnjs."
"cloudflare.com/ajax/libs/openlayers/2.13.1/OpenLayers.js'``."
msgstr ""

msgid ""
"Defaults to ``True``.  When set to ``False``, disables editing of existing "
"geometry fields in the admin."
msgstr ""

msgid ""
"This is different from adding the geometry field to :attr:`~django.contrib."
"admin.ModelAdmin.readonly_fields`, which will only display the WKT of the "
"geometry. Setting ``modifiable=False``, actually displays the geometry in a "
"map, but disables the ability to edit its vertices."
msgstr ""

msgid ""
"This class is deprecated. Use :class:`~django.contrib.admin.ModelAdmin` "
"instead."
msgstr ""

msgid "``OSMGeoAdmin``"
msgstr "``OSMGeoAdmin``"

msgid ""
"A subclass of :class:`GeoModelAdmin` that uses a Spherical Mercator "
"projection with `OpenStreetMap <https://www.openstreetmap.org/>`_ street "
"data tiles."
msgstr ""

msgid "This class is deprecated. Use :class:`GISModelAdmin` instead."
msgstr ""

msgid "GeoDjango Management Commands"
msgstr ""

msgid "``inspectdb``"
msgstr "``inspectdb``"

msgid ""
"When :mod:`django.contrib.gis` is in your :setting:`INSTALLED_APPS`, the :"
"djadmin:`inspectdb` management command is overridden with one from "
"GeoDjango. The overridden command is spatially-aware, and places geometry "
"fields in the auto-generated model definition, where appropriate."
msgstr ""

msgid "``ogrinspect``"
msgstr "``ogrinspect``"

msgid ""
"The ``ogrinspect`` management command will inspect the given OGR-compatible :"
"class:`~django.contrib.gis.gdal.DataSource` (e.g., a shapefile) and will "
"output a GeoDjango model with the given model name.  There's a detailed "
"example of using ``ogrinspect`` :ref:`in the tutorial <ogrinspect-intro>`."
msgstr ""

msgid ""
"Use a comma separated list of OGR field names to add the ``blank=True`` "
"keyword option to the field definition.  Set with ``true`` to apply to all "
"applicable fields."
msgstr ""

msgid ""
"Use a comma separated list of OGR float fields to generate :class:`~django."
"db.models.DecimalField` instead of the default :class:`~django.db.models."
"FloatField`. Set to ``true`` to apply to all OGR float fields."
msgstr ""

msgid ""
"Specifies the model attribute name to use for the geometry field. Defaults "
"to ``'geom'``."
msgstr ""

msgid ""
"The key for specifying which layer in the OGR :class:`~django.contrib.gis."
"gdal.DataSource` source to use. Defaults to 0 (the first layer). May be an "
"integer or a string identifier for the :class:`~django.contrib.gis.gdal."
"Layer`. When inspecting databases, ``layer`` is generally the table name you "
"want to inspect."
msgstr ""

msgid ""
"Automatically generate a mapping dictionary for use with :class:`~django."
"contrib.gis.utils.LayerMapping`."
msgstr ""

msgid ""
"When generating the geometry field, treat it as a geometry collection. For "
"example, if this setting is enabled then a :class:`~django.contrib.gis.db."
"models.MultiPolygonField` will be placed in the generated model rather than :"
"class:`~django.contrib.gis.db.models.PolygonField`."
msgstr ""

msgid ""
"Generates a ``__str__()`` method on the model that returns the given field "
"name."
msgstr ""

msgid ""
"Suppresses the ``from django.contrib.gis.db import models`` import statement."
msgstr ""

msgid ""
"Use a comma separated list of OGR field names to add the ``null=True`` "
"keyword option to the field definition.  Set with ``true`` to apply to all "
"applicable fields."
msgstr ""

msgid ""
"The SRID to use for the geometry field.  If not set, ``ogrinspect`` attempts "
"to automatically determine of the SRID of the data source."
msgstr ""

msgid "GeoDjango Database API"
msgstr "GeoDjango 数据库 API"

msgid "Spatial Backends"
msgstr "空间后端"

msgid "GeoDjango currently provides the following spatial database backends:"
msgstr ""

msgid "``django.contrib.gis.db.backends.postgis``"
msgstr "``django.contrib.gis.db.backends.postgis``"

msgid "``django.contrib.gis.db.backends.mysql``"
msgstr "``django.contrib.gis.db.backends.mysql``"

msgid "``django.contrib.gis.db.backends.oracle``"
msgstr "``django.contrib.gis.db.backends.oracle``"

msgid "``django.contrib.gis.db.backends.spatialite``"
msgstr "``django.contrib.gis.db.backends.spatialite``"

msgid "MySQL Spatial Limitations"
msgstr "MySQL 的空间限制"

msgid ""
"Django supports spatial functions operating on real geometries available in "
"modern MySQL versions. However, the spatial functions are not as rich as "
"other backends like PostGIS."
msgstr ""

msgid "Raster Support"
msgstr "栅格支持"

msgid ""
"``RasterField`` is currently only implemented for the PostGIS backend. "
"Spatial lookups are available for raster fields, but spatial database "
"functions and aggregates aren't implemented for raster fields."
msgstr ""

msgid "Creating and Saving Models with Geometry Fields"
msgstr ""

msgid ""
"Here is an example of how to create a geometry object (assuming the "
"``Zipcode`` model):"
msgstr ""

msgid ""
":class:`~django.contrib.gis.geos.GEOSGeometry` objects may also be used to "
"save geometric models:"
msgstr ""

msgid ""
"Moreover, if the ``GEOSGeometry`` is in a different coordinate system (has a "
"different SRID value) than that of the field, then it will be implicitly "
"transformed into the SRID of the model's field, using the spatial database's "
"transform procedure:"
msgstr ""

msgid ""
"Thus, geometry parameters may be passed in using the ``GEOSGeometry`` "
"object, WKT (Well Known Text [#fnwkt]_), HEXEWKB (PostGIS specific -- a WKB "
"geometry in hexadecimal [#fnewkb]_), and GeoJSON (see :rfc:`7946`). "
"Essentially, if the input is not a ``GEOSGeometry`` object, the geometry "
"field will attempt to create a ``GEOSGeometry`` instance from the input."
msgstr ""

msgid ""
"For more information creating :class:`~django.contrib.gis.geos.GEOSGeometry` "
"objects, refer to the :ref:`GEOS tutorial <geos-tutorial>`."
msgstr ""

msgid "Creating and Saving Models with Raster Fields"
msgstr "使用栅格字段创建和保存模型"

msgid ""
"When creating raster models, the raster field will implicitly convert the "
"input into a :class:`~django.contrib.gis.gdal.GDALRaster` using lazy-"
"evaluation. The raster field will therefore accept any input that is "
"accepted by the :class:`~django.contrib.gis.gdal.GDALRaster` constructor."
msgstr ""

msgid ""
"Here is an example of how to create a raster object from a raster file "
"``volcano.tif`` (assuming the ``Elevation`` model):"
msgstr ""

msgid ""
":class:`~django.contrib.gis.gdal.GDALRaster` objects may also be used to "
"save raster models:"
msgstr ""

msgid "Note that this equivalent to:"
msgstr ""

msgid "Spatial Lookups"
msgstr "空间查找"

msgid ""
"GeoDjango's lookup types may be used with any manager method like "
"``filter()``, ``exclude()``, etc.  However, the lookup types unique to "
"GeoDjango are only available on spatial fields."
msgstr ""

msgid ""
"Filters on 'normal' fields (e.g. :class:`~django.db.models.CharField`) may "
"be chained with those on geographic fields. Geographic lookups accept "
"geometry and raster input on both sides and input types can be mixed freely."
msgstr ""

msgid ""
"The general structure of geographic lookups is described below. A complete "
"reference can be found in the :ref:`spatial lookup reference<spatial-"
"lookups>`."
msgstr ""

msgid "Geometry Lookups"
msgstr "空间查找"

msgid ""
"Geographic queries with geometries take the following general form (assuming "
"the ``Zipcode`` model used in the :doc:`model-api`):"
msgstr ""

msgid ""
"In this case, ``poly`` is the geographic field, :lookup:`contains <gis-"
"contains>` is the spatial lookup type, ``pnt`` is the parameter (which may "
"be a :class:`~django.contrib.gis.geos.GEOSGeometry` object or a string of "
"GeoJSON , WKT, or HEXEWKB), and ``rst`` is a :class:`~django.contrib.gis."
"gdal.GDALRaster` object."
msgstr ""

msgid "Raster Lookups"
msgstr "栅格查找"

msgid ""
"The raster lookup syntax is similar to the syntax for geometries. The only "
"difference is that a band index can be specified as additional input. If no "
"band index is specified, the first band is used by default (index ``0``). In "
"that case the syntax is identical to the syntax for geometry lookups."
msgstr ""

msgid ""
"To specify the band index, an additional parameter can be specified on both "
"sides of the lookup. On the left hand side, the double underscore syntax is "
"used to pass a band index. On the right hand side, a tuple of the raster and "
"band index can be specified."
msgstr ""

msgid ""
"This results in the following general form for lookups involving rasters "
"(assuming the ``Elevation`` model used in the :doc:`model-api`):"
msgstr ""

msgid ""
"On the left hand side of the example, ``rast`` is the geographic raster "
"field and :lookup:`contains <gis-contains>` is the spatial lookup type. On "
"the right hand side, ``geom`` is a geometry input and ``rst`` is a :class:"
"`~django.contrib.gis.gdal.GDALRaster` object. The band index defaults to "
"``0`` in the first two queries and is set to ``1`` on the others."
msgstr ""

msgid ""
"While all spatial lookups can be used with raster objects on both sides, not "
"all underlying operators natively accept raster input. For cases where the "
"operator expects geometry input, the raster is automatically converted to a "
"geometry. It's important to keep this in mind when interpreting the lookup "
"results."
msgstr ""

msgid ""
"The type of raster support is listed for all lookups in the :ref:"
"`compatibility table <spatial-lookup-compatibility>`. Lookups involving "
"rasters are currently only available for the PostGIS backend."
msgstr ""

msgid "Distance Queries"
msgstr "距离查询"

msgid "Introduction"
msgstr "介绍"

msgid ""
"Distance calculations with spatial data is tricky because, unfortunately, "
"the Earth is not flat.  Some distance queries with fields in a geographic "
"coordinate system may have to be expressed differently because of "
"limitations in PostGIS.  Please see the :ref:`selecting-an-srid` section in "
"the :doc:`model-api` documentation for more details."
msgstr ""

msgid "Distance Lookups"
msgstr "距离查找"

msgid ""
"*Availability*: PostGIS, MariaDB, MySQL, Oracle, SpatiaLite, PGRaster "
"(Native)"
msgstr ""
"*可用性* ：PostGIS, MariaDB, MySQL, Oracle, SpatiaLite, PGRaster (Native)"

msgid "The following distance lookups are available:"
msgstr "以下是可用的距离查找："

msgid ":lookup:`distance_lt`"
msgstr ":lookup:`distance_lt`"

msgid ":lookup:`distance_lte`"
msgstr ":lookup:`distance_lte`"

msgid ":lookup:`distance_gt`"
msgstr ":lookup:`distance_gt`"

msgid ":lookup:`distance_gte`"
msgstr ":lookup:`distance_gte`"

msgid ":lookup:`dwithin` (except MariaDB and MySQL)"
msgstr ":lookup:`dwithin` （除了 MariaDB 和 MySQL）"

msgid ""
"For *measuring*, rather than querying on distances, use the :class:`~django."
"contrib.gis.db.models.functions.Distance` function."
msgstr ""
"对于 *测量*，而不是查询距离，使用 :class:`~django.contrib.gis.db.models."
"function.Distance` 函数。"

msgid "Distance lookups take a tuple parameter comprising:"
msgstr "距离查找需要一个元组参数，包括："

msgid "A geometry or raster to base calculations from; and"
msgstr "用于计算的几何体或栅格；和"

msgid ""
"A number or :class:`~django.contrib.gis.measure.Distance` object containing "
"the distance."
msgstr ""
"一个数字或 :class:`~django.contrib.gis.measure.Distance` 对象，包含距离。"

msgid ""
"If a :class:`~django.contrib.gis.measure.Distance` object is used, it may be "
"expressed in any units (the SQL generated will use units converted to those "
"of the field); otherwise, numeric parameters are assumed to be in the units "
"of the field."
msgstr ""

msgid ""
"In PostGIS, ``ST_Distance_Sphere`` does *not* limit the geometry types "
"geographic distance queries are performed with. [#fndistsphere15]_  However, "
"these queries may take a long time, as great-circle distances must be "
"calculated on the fly for *every* row in the query.  This is because the "
"spatial index on traditional geometry fields cannot be used."
msgstr ""

msgid ""
"For much better performance on WGS84 distance queries, consider using :ref:"
"`geography columns <geography-type>` in your database instead because they "
"are able to use their spatial index in distance queries. You can tell "
"GeoDjango to use a geography column by setting ``geography=True`` in your "
"field definition."
msgstr ""

msgid ""
"For example, let's say we have a ``SouthTexasCity`` model (from the :source:"
"`GeoDjango distance tests <tests/gis_tests/distapp/models.py>` ) on a "
"*projected* coordinate system valid for cities in southern Texas::"
msgstr ""

msgid "Then distance queries may be performed as follows:"
msgstr ""

msgid ""
"Raster queries work the same way by replacing the geometry field ``point`` "
"with a raster field, or the ``pnt`` object with a raster object, or both. To "
"specify the band index of a raster input on the right hand side, a 3-tuple "
"can be passed to the lookup as follows:"
msgstr ""

msgid ""
"Where the band with index 2 (the third band) of the raster ``rst`` would be "
"used for the lookup."
msgstr ""

msgid "Compatibility Tables"
msgstr "兼容性表"

msgid ""
"The following table provides a summary of what spatial lookups are available "
"for each spatial database backend. The PostGIS Raster (PGRaster) lookups are "
"divided into the three categories described in the :ref:`raster lookup "
"details <spatial-lookup-raster>`: native support ``N``, bilateral native "
"support ``B``, and geometry conversion support ``C``."
msgstr ""

msgid "Lookup Type"
msgstr "查找类型"

msgid "PostGIS"
msgstr "PostGIS"

msgid "Oracle"
msgstr "Oracle"

msgid "MariaDB"
msgstr "MariaDB"

msgid "MySQL [#]_"
msgstr "MySQL [#]_"

msgid "SpatiaLite"
msgstr "SpatiaLite"

msgid "PGRaster"
msgstr "PGRaster"

msgid ":lookup:`bbcontains`"
msgstr ":lookup:`bbcontains`"

msgid "X"
msgstr "X"

msgid "N"
msgstr "N"

msgid ":lookup:`bboverlaps`"
msgstr ":lookup:`bboverlaps`"

msgid ":lookup:`contained`"
msgstr ":lookup:`contained`"

msgid ":lookup:`contains <gis-contains>`"
msgstr ":lookup:`contains <gis-contains>`"

msgid "B"
msgstr "B"

msgid ":lookup:`contains_properly`"
msgstr ":lookup:`contains_properly`"

msgid ":lookup:`coveredby`"
msgstr ":lookup:`coveredby`"

msgid ":lookup:`covers`"
msgstr ":lookup:`covers`"

msgid ":lookup:`crosses`"
msgstr ":lookup:`crosses`"

msgid "C"
msgstr "C"

msgid ":lookup:`disjoint`"
msgstr ":lookup:`disjoint`"

msgid ":lookup:`dwithin`"
msgstr ":lookup:`dwithin`"

msgid ":lookup:`equals`"
msgstr ":lookup:`equals`"

msgid ":lookup:`exact <same_as>`"
msgstr ":lookup:`exact <same_as>`"

msgid ":lookup:`intersects`"
msgstr ":lookup:`intersects`"

msgid ":lookup:`isempty`"
msgstr ""

msgid ":lookup:`isvalid`"
msgstr ":lookup:`isvalid`"

msgid ":lookup:`overlaps`"
msgstr ":lookup:`overlaps`"

msgid ":lookup:`relate`"
msgstr ":lookup:`relate`"

msgid ":lookup:`same_as`"
msgstr ":lookup:`same_as`"

msgid ":lookup:`touches`"
msgstr ":lookup:`touches`"

msgid ":lookup:`within`"
msgstr ":lookup:`within`"

msgid ":lookup:`left`"
msgstr ":lookup:`left`"

msgid ":lookup:`right`"
msgstr ":lookup:`right`"

msgid ":lookup:`overlaps_left`"
msgstr ":lookup:`overlaps_left`"

msgid ":lookup:`overlaps_right`"
msgstr ":lookup:`overlaps_right`"

msgid ":lookup:`overlaps_above`"
msgstr ":lookup:`overlaps_above`"

msgid ":lookup:`overlaps_below`"
msgstr ":lookup:`overlaps_below`"

msgid ":lookup:`strictly_above`"
msgstr ":lookup:`strictly_above`"

msgid ":lookup:`strictly_below`"
msgstr ":lookup:`strictly_below`"

msgid "Database functions"
msgstr "数据库函数"

msgid ""
"The following table provides a summary of what geography-specific database "
"functions are available on each spatial backend."
msgstr ""

msgid "Function"
msgstr "函数"

msgid "MySQL"
msgstr "MySQL"

msgid ":class:`Area`"
msgstr ":class:`Area`"

msgid ":class:`AsGeoJSON`"
msgstr ":class:`AsGeoJSON`"

msgid ":class:`AsGML`"
msgstr ":class:`AsGML`"

msgid ":class:`AsKML`"
msgstr ":class:`AsKML`"

msgid ":class:`AsSVG`"
msgstr ":class:`AsSVG`"

msgid ":class:`AsWKB`"
msgstr ":class:`AsWKB`"

msgid ":class:`AsWKT`"
msgstr ":class:`AsWKT`"

msgid ":class:`Azimuth`"
msgstr ":class:`Azimuth`"

msgid "X (LWGEOM/RTTOPO)"
msgstr ""

msgid ":class:`BoundingCircle`"
msgstr ":class:`BoundingCircle`"

msgid ":class:`Centroid`"
msgstr ":class:`Centroid`"

msgid ":class:`Difference`"
msgstr ":class:`Difference`"

msgid ":class:`Distance`"
msgstr ":class:`Distance`"

msgid ":class:`Envelope`"
msgstr ":class:`Envelope`"

msgid ":class:`ForcePolygonCW`"
msgstr ":class:`ForcePolygonCW`"

msgid ":class:`FromWKB`"
msgstr ""

msgid ":class:`FromWKT`"
msgstr ""

msgid ":class:`GeoHash`"
msgstr ":class:`GeoHash`"

msgid ":class:`Intersection`"
msgstr ":class:`Intersection`"

msgid ":class:`IsEmpty`"
msgstr ""

msgid ":class:`IsValid`"
msgstr ":class:`IsValid`"

msgid ":class:`Length`"
msgstr ":class:`Length`"

msgid ":class:`LineLocatePoint`"
msgstr ":class:`LineLocatePoint`"

msgid ":class:`MakeValid`"
msgstr ":class:`MakeValid`"

msgid ":class:`MemSize`"
msgstr ":class:`MemSize`"

msgid ":class:`NumGeometries`"
msgstr ":class:`NumGeometries`"

msgid ":class:`NumPoints`"
msgstr ":class:`NumPoints`"

msgid ":class:`Perimeter`"
msgstr ":class:`Perimeter`"

msgid ":class:`PointOnSurface`"
msgstr ":class:`PointOnSurface`"

msgid ":class:`Reverse`"
msgstr ":class:`Reverse`"

msgid ":class:`Scale`"
msgstr ":class:`Scale`"

msgid ":class:`SnapToGrid`"
msgstr ":class:`SnapToGrid`"

msgid ":class:`SymDifference`"
msgstr ":class:`SymDifference`"

msgid ":class:`Transform`"
msgstr ":class:`Transform`"

msgid ":class:`Translate`"
msgstr ":class:`Translate`"

msgid ":class:`Union`"
msgstr ":class:`Union`"

msgid "Aggregate Functions"
msgstr "聚合函数"

msgid ""
"The following table provides a summary of what GIS-specific aggregate "
"functions are available on each spatial backend. Please note that MySQL does "
"not support any of these aggregates, and is thus excluded from the table."
msgstr ""

msgid "Aggregate"
msgstr "聚合"

msgid ":class:`Collect`"
msgstr ":class:`Collect`"

msgid ":class:`Extent`"
msgstr ":class:`Extent`"

msgid ":class:`Extent3D`"
msgstr ":class:`Extent3D`"

msgid ":class:`MakeLine`"
msgstr ":class:`MakeLine`"

msgid "Footnotes"
msgstr "脚注"

msgid ""
"*See* Open Geospatial Consortium, Inc., `OpenGIS Simple Feature "
"Specification For SQL <https://portal.ogc.org/files/?artifact_id=829>`_, "
"Document 99-049 (May 5, 1999), at  Ch. 3.2.5, p. 3-11 (SQL Textual "
"Representation of Geometry)."
msgstr ""

msgid ""
"*See* `PostGIS EWKB, EWKT and Canonical Forms <https://postgis.net/docs/"
"using_postgis_dbmanagement.html#EWKB_EWKT>`_, PostGIS documentation at Ch. "
"4.1.2."
msgstr ""

msgid ""
"*See* `PostGIS documentation <https://postgis.net/docs/ST_DistanceSphere."
"html>`_ on ``ST_DistanceSphere``."
msgstr ""

msgid "Refer :ref:`mysql-spatial-limitations` section for more details."
msgstr "详情请参考 :ref:`mysql-spatial-limitations` 部分。"

msgid "Deploying GeoDjango"
msgstr "部署 GeoDjango"

msgid ""
"Basically, the deployment of a GeoDjango application is not different from "
"the deployment of a normal Django application. Please consult Django's :doc:"
"`deployment documentation </howto/deployment/index>`."
msgstr ""
"基本上，部署一个 GeoDjango 应用和部署一个普通的 Django 应用没有什么不同。请参"
"考 Django 的 :doc:`部署文档 </howto/deployment/index>`。"

msgid ""
"GeoDjango uses the GDAL geospatial library which is not thread safe at this "
"time.  Thus, it is *highly* recommended to not use threading when deploying "
"-- in other words, use an appropriate configuration of Apache."
msgstr ""
"GeoDjango 使用的 GDAL 地理空间库目前还不是线程安全的。 因此， *强烈* 建议在部"
"署时不要使用线程 —— 换句话说，使用适当的 Apache 配置。"

msgid ""
"For example, when configuring your application with ``mod_wsgi``, set the "
"``WSGIDaemonProcess`` attribute ``threads`` to ``1``, unless Apache may "
"crash when running your GeoDjango application.  Increase the number of "
"``processes`` instead."
msgstr ""
"例如，当用 ``mod_wsgi`` 配置你的应用程序时，将 ``WSGIDaemonProcess`` 属性 "
"``threads`` 设置为 ``1```，除非 Apache 在运行 GeoDjango 应用程序时可能会崩"
"溃。 转而增加 ``processes`` 的数量。"

msgid "Geographic Feeds"
msgstr "地理 Feed"

msgid ""
"GeoDjango has its own :class:`Feed` subclass that may embed location "
"information in RSS/Atom feeds formatted according to either the `Simple "
"GeoRSS`__ or `W3C Geo`_ standards.  Because GeoDjango's syndication API is a "
"superset of Django's, please consult :doc:`Django's syndication "
"documentation </ref/contrib/syndication>` for details on general usage."
msgstr ""

msgid "API Reference"
msgstr "API 参考"

msgid "``Feed`` Subclass"
msgstr "``Feed`` 子类"

msgid ""
"In addition to methods provided by the :class:`django.contrib.syndication."
"views.Feed` base class, GeoDjango's ``Feed`` class provides the following "
"overrides. Note that these overrides may be done in multiple ways::"
msgstr ""

msgid ""
"Takes the object returned by ``get_object()`` and returns the *feed's* "
"geometry. Typically this is a ``GEOSGeometry`` instance, or can be a tuple "
"to represent a point or a box. For example::"
msgstr ""

msgid ""
"Set this to return the geometry for each *item* in the feed. This can be a "
"``GEOSGeometry`` instance, or a tuple that represents a point coordinate or "
"bounding box. For example::"
msgstr ""

msgid "``SyndicationFeed`` Subclasses"
msgstr "``SyndicationFeed`` 子类"

msgid ""
"The following :class:`django.utils.feedgenerator.SyndicationFeed` subclasses "
"are available:"
msgstr ""

msgid ""
"`W3C Geo`_ formatted feeds only support :class:`~django.contrib.gis.db."
"models.PointField` geometries."
msgstr ""

msgid "GeoDjango Forms API"
msgstr "GeoDjango 表单 API"

msgid ""
"GeoDjango provides some specialized form fields and widgets in order to "
"visually display and edit geolocalized data on a map. By default, they use "
"`OpenLayers`_-powered maps, with a base WMS layer provided by `NASA`_."
msgstr ""

msgid "Field arguments"
msgstr "字段参数"

msgid ""
"In addition to the regular :ref:`form field arguments <core-field-"
"arguments>`, GeoDjango form fields take the following optional arguments."
msgstr ""

msgid "``srid``"
msgstr "``srid``"

msgid ""
"This is the SRID code that the field value should be transformed to. For "
"example, if the map widget SRID is different from the SRID more generally "
"used by your application or database, the field will automatically convert "
"input values into that SRID."
msgstr ""

msgid "``geom_type``"
msgstr "``geom_type``"

msgid ""
"You generally shouldn't have to set or change that attribute which should be "
"set up depending on the field class. It matches the OpenGIS standard "
"geometry name."
msgstr ""

msgid "Form field classes"
msgstr "表单字段类"

msgid "``GeometryField``"
msgstr "``GeometryField``"

msgid "``PointField``"
msgstr "``PointField``"

msgid "``LineStringField``"
msgstr "``LineStringField``"

msgid "``PolygonField``"
msgstr "``PolygonField``"

msgid "``MultiPointField``"
msgstr "``MultiPointField``"

msgid "``MultiLineStringField``"
msgstr "``MultiLineStringField``"

msgid "``MultiPolygonField``"
msgstr "``MultiPolygonField``"

msgid "``GeometryCollectionField``"
msgstr "``GeometryCollectionField``"

msgid "Form widgets"
msgstr "表单部件"

msgid ""
"GeoDjango form widgets allow you to display and edit geographic data on a "
"visual map. Note that none of the currently available widgets supports 3D "
"geometries, hence geometry fields will fallback using a ``Textarea`` widget "
"for such data."
msgstr ""

msgid "Widget attributes"
msgstr "表单属性"

msgid ""
"GeoDjango widgets are template-based, so their attributes are mostly "
"different from other Django widget attributes."
msgstr ""

msgid "The OpenGIS geometry type, generally set by the form field."
msgstr ""

msgid "Height and width of the widget map (default is 400x600)."
msgstr ""

msgid ""
"``map_height`` and ``map_width`` attributes are deprecated, use CSS to size "
"map widgets instead."
msgstr ""

msgid "SRID code used by the map (default is 4326)."
msgstr ""

msgid ""
"Boolean value specifying if a textarea input showing the serialized "
"representation of the current geometry is visible, mainly for debugging "
"purposes (default is ``False``)."
msgstr ""

msgid ""
"Indicates if the widget supports edition of 3D data (default is ``False``)."
msgstr ""

msgid "The template used to render the map widget."
msgstr ""

msgid ""
"You can pass widget attributes in the same manner that for any other Django "
"widget. For example::"
msgstr ""

msgid "Widget classes"
msgstr "部件类"

msgid "``BaseGeometryWidget``"
msgstr "``BaseGeometryWidget``"

msgid ""
"This is an abstract base widget containing the logic needed by subclasses. "
"You cannot directly use this widget for a geometry field. Note that the "
"rendering of GeoDjango widgets is based on a template, identified by the :"
"attr:`template_name` class attribute."
msgstr ""

msgid "``OpenLayersWidget``"
msgstr "``OpenLayersWidget``"

msgid ""
"This is the default widget used by all GeoDjango form fields. "
"``template_name`` is ``gis/openlayers.html``."
msgstr ""

msgid ""
"``OpenLayersWidget`` and :class:`OSMWidget` use the ``ol.js`` file hosted on "
"the ``cdn.jsdelivr.net`` content-delivery network. You can subclass these "
"widgets in order to specify your own version of the ``ol.js`` file in the "
"``js`` property of the inner ``Media`` class (see :ref:`assets-as-a-static-"
"definition`)."
msgstr ""

msgid "``OSMWidget``"
msgstr "``OSMWidget``"

msgid ""
"This widget uses an OpenStreetMap base layer to display geographic objects "
"on. Attributes are:"
msgstr ""

msgid "``gis/openlayers-osm.html``"
msgstr "``gis/openlayers-osm.html``"

msgid ""
"The default center latitude and longitude are ``47`` and ``5``, "
"respectively, which is a location in eastern France."
msgstr ""

msgid "The default map zoom is ``12``."
msgstr ""

msgid ""
"The :class:`OpenLayersWidget` note about JavaScript file hosting above also "
"applies here. See also this `FAQ answer`_ about ``https`` access to map "
"tiles."
msgstr ""

msgid "Geographic Database Functions"
msgstr "地理数据库函数"

msgid ""
"The functions documented on this page allow users to access geographic "
"database functions to be used in annotations, aggregations, or filters in "
"Django."
msgstr ""
"本页所描述的函数允许用户访问地理数据库函数，以便在 Django 中使用注释、聚合或"
"过滤器。"

msgid "Example:"
msgstr ""

msgid ""
"Not all backends support all functions, so refer to the documentation of "
"each function to see if your database backend supports the function you want "
"to use. If you call a geographic function on a backend that doesn't support "
"it, you'll get a ``NotImplementedError`` exception."
msgstr ""
"并非所有的后端都支持所有的函数，所以请参考每个函数的文档，看看你的数据库后端"
"是否支持你要使用的函数。如果你在一个不支持地理函数的后台调用该函数，你会得到"
"一个 ``NotImplementedError`` 异常。"

msgid "Function's summary:"
msgstr "函数的摘要："

msgid "Measurement"
msgstr "测量"

msgid "Relationships"
msgstr "关系映射"

msgid "Operations"
msgstr "操作"

msgid "Editors"
msgstr "编辑器"

msgid "Input format"
msgstr ""

msgid "Output format"
msgstr "输出格式"

msgid "Miscellaneous"
msgstr "杂项"

msgid ":class:`GeometryDistance`"
msgstr ":class:`GeometryDistance`"

msgid ":class:`LineLocatePoint` :class:`PointOnSurface`"
msgstr ""

msgid ":class:`SnapToGrid` :class:`Transform` :class:`Translate`"
msgstr ""

msgid ":class:`FromWKB` :class:`FromWKT`"
msgstr ""

msgid ":class:`AsWKB` :class:`AsWKT` :class:`GeoHash`"
msgstr ""

msgid "``Area``"
msgstr "``Area``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"polygon-property-functions.html#function_st-area>`_, Oracle, `PostGIS "
"<https://postgis.net/docs/ST_Area.html>`__, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns the area of the "
"field as an :class:`~django.contrib.gis.measure.Area` measure."
msgstr ""

msgid ""
"MySQL and SpatiaLite without LWGEOM/RTTOPO don't support area calculations "
"on geographic SRSes."
msgstr ""

msgid "``AsGeoJSON``"
msgstr "``AsGeoJSON``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"geojson-functions.html#function_st-asgeojson>`__, Oracle, `PostGIS <https://"
"postgis.net/docs/ST_AsGeoJSON.html>`__, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a `GeoJSON "
"<https://geojson.org/>`_ representation of the geometry. Note that the "
"result is not a complete GeoJSON structure but only the ``geometry`` key "
"content of a GeoJSON structure. See also :doc:`/ref/contrib/gis/serializers`."
msgstr ""

msgid "Keyword Argument"
msgstr "关键字参数"

msgid "Description"
msgstr "描述"

msgid "``bbox``"
msgstr "``bbox``"

msgid ""
"Set this to ``True`` if you want the bounding box to be included in the "
"returned GeoJSON. Ignored on Oracle."
msgstr ""

msgid "``crs``"
msgstr "``crs``"

msgid ""
"Set this to ``True`` if you want the coordinate reference system to be "
"included in the returned GeoJSON. Ignored on MySQL and Oracle."
msgstr ""

msgid "``precision``"
msgstr "``precision``"

msgid ""
"It may be used to specify the number of significant digits for the "
"coordinates in the GeoJSON representation -- the default value is 8. Ignored "
"on Oracle."
msgstr ""

msgid "``AsGML``"
msgstr "``AsGML``"

msgid ""
"*Availability*: Oracle, `PostGIS <https://postgis.net/docs/ST_AsGML."
"html>`__, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a `Geographic "
"Markup Language (GML)`__ representation of the geometry."
msgstr ""

msgid ""
"Specifies the number of significant digits for the coordinates in the GML "
"representation -- the default value is 8. Ignored on Oracle."
msgstr ""

msgid "``version``"
msgstr "``version``"

msgid "Specifies the GML version to use: 2 (default) or 3."
msgstr ""

msgid "``AsKML``"
msgstr "``AsKML``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_AsKML.html>`__, "
"SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a `Keyhole "
"Markup Language (KML)`__ representation of the geometry."
msgstr ""

msgid ""
"This keyword may be used to specify the number of significant digits for the "
"coordinates in the KML representation -- the default value is 8."
msgstr ""

msgid "``AsSVG``"
msgstr "``AsSVG``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_AsSVG.html>`__, "
"SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a `Scalable "
"Vector Graphics (SVG)`__ representation of the geometry."
msgstr ""

msgid "``relative``"
msgstr "``relative``"

msgid ""
"If set to ``True``, the path data will be implemented in terms of relative "
"moves. Defaults to ``False``, meaning that absolute moves are used instead."
msgstr ""

msgid ""
"This keyword may be used to specify the number of significant digits for the "
"coordinates in the SVG representation -- the default value is 8."
msgstr ""

msgid "``AsWKB``"
msgstr "``AsWKB``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"format-conversion-functions.html#function_st-asbinary>`__, Oracle, `PostGIS "
"<https://postgis.net/docs/ST_AsBinary.html>`__, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a `Well-known "
"binary (WKB)`_ representation of the geometry."
msgstr ""

msgid "``AsWKT``"
msgstr "``AsWKT``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"format-conversion-functions.html#function_st-astext>`__, Oracle, `PostGIS "
"<https://postgis.net/docs/ST_AsText.html>`__, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a `Well-known "
"text (WKT)`_ representation of the geometry."
msgstr ""

msgid "``Azimuth``"
msgstr "``Azimuth``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Azimuth.html>`__, "
"SpatiaLite (LWGEOM/RTTOPO)"
msgstr ""

msgid ""
"Returns the azimuth in radians of the segment defined by the given point "
"geometries, or ``None`` if the two points are coincident. The azimuth is "
"angle referenced from north and is positive clockwise: north = ``0``; east = "
"``π/2``; south = ``π``; west = ``3π/2``."
msgstr ""

msgid "``BoundingCircle``"
msgstr "``BoundingCircle``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_MinimumBoundingCircle."
"html>`__, `Oracle <https://docs.oracle.com/en/database/oracle/oracle-"
"database/21/spatl/ SDO_GEOM-reference.html#GUID-82A61626-BB64-4793-B53D-"
"A0DBEC91831A>`_"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns the smallest "
"circle polygon that can fully contain the geometry."
msgstr ""

msgid "The ``num_seg`` parameter is used only on PostGIS."
msgstr ""

msgid "``Centroid``"
msgstr "``Centroid``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"polygon-property-functions.html#function_st-centroid>`__, `PostGIS <https://"
"postgis.net/docs/ST_Centroid.html>`__, Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns the ``centroid`` "
"value of the geometry."
msgstr ""

msgid "``Difference``"
msgstr "``Difference``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-difference>`__, `PostGIS <https://"
"postgis.net/docs/ST_Difference.html>`__, Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts two geographic fields or expressions and returns the geometric "
"difference, that is the part of geometry A that does not intersect with "
"geometry B."
msgstr ""

msgid "``Distance``"
msgstr "``Distance``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"relation-functions-object-shapes.html#function_st-distance>`__, `PostGIS "
"<https://postgis.net/docs/ST_Distance.html>`__, Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts two geographic fields or expressions and returns the distance "
"between them, as a :class:`~django.contrib.gis.measure.Distance` object. On "
"MySQL, a raw float value is returned when the coordinates are geodetic."
msgstr ""

msgid ""
"On backends that support distance calculation on geodetic coordinates, the "
"proper backend function is automatically chosen depending on the SRID value "
"of the geometries (e.g. `ST_DistanceSphere <https://postgis.net/docs/"
"ST_DistanceSphere.html>`__ on PostGIS)."
msgstr ""

msgid ""
"When distances are calculated with geodetic (angular) coordinates, as is the "
"case with the default WGS84 (4326) SRID, you can set the ``spheroid`` "
"keyword argument to decide if the calculation should be based on a simple "
"sphere (less accurate, less resource-intensive) or on a spheroid (more "
"accurate, more resource-intensive)."
msgstr ""

msgid ""
"In the following example, the distance from the city of Hobart to every "
"other :class:`~django.contrib.gis.db.models.PointField` in the "
"``AustraliaCity`` queryset is calculated:"
msgstr ""

msgid ""
"Because the ``distance`` attribute is a :class:`~django.contrib.gis.measure."
"Distance` object, you can easily express the value in the units of your "
"choice. For example, ``city.distance.mi`` is the distance value in miles and "
"``city.distance.km`` is the distance value in kilometers. See :doc:`measure` "
"for usage details and the list of :ref:`supported_units`."
msgstr ""

msgid "``Envelope``"
msgstr "``Envelope``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"general-property-functions.html#function_st-envelope>`__, `Oracle <https://"
"docs.oracle.com/en/database/oracle/oracle-database/21/spatl/ spatial-"
"operators-reference.html#GUID-ACED800F-3435-44AA-9606-D40934A23ED0>`__, "
"`PostGIS <https://postgis.net/docs/ST_Envelope.html>`__, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns the geometry "
"representing the bounding box of the geometry."
msgstr ""

msgid "``ForcePolygonCW``"
msgstr "``ForcePolygonCW``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_ForcePolygonCW."
"html>`__, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a modified "
"version of the polygon/multipolygon in which all exterior rings are oriented "
"clockwise and all interior rings are oriented counterclockwise. Non-"
"polygonal geometries are returned unchanged."
msgstr ""

msgid "``FromWKB``"
msgstr ""

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-wkb-"
"functions.html#function_st-geomfromwkb>`__, Oracle, `PostGIS <https://"
"postgis.net/docs/ST_GeomFromWKB.html>`__, SpatiaLite"
msgstr ""

msgid "Creates geometry from `Well-known binary (WKB)`_ representation."
msgstr ""

msgid "``FromWKT``"
msgstr ""

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-wkt-"
"functions.html#function_st-geomfromtext>`__, Oracle, `PostGIS <https://"
"postgis.net/docs/ST_GeomFromText.html>`__, SpatiaLite"
msgstr ""

msgid "Creates geometry from `Well-known text (WKT)`_ representation."
msgstr ""

msgid "``GeoHash``"
msgstr "``GeoHash``"

msgid ""
"*Availability*: `MySQL <https://dev.mysql.com/doc/refman/en/spatial-geohash-"
"functions.html#function_st-geohash>`__, `PostGIS <https://postgis.net/docs/"
"ST_GeoHash.html>`__, SpatiaLite (LWGEOM/RTTOPO)"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a `GeoHash`__ "
"representation of the geometry."
msgstr ""

msgid ""
"The ``precision`` keyword argument controls the number of characters in the "
"result."
msgstr ""

msgid "``GeometryDistance``"
msgstr "``GeometryDistance``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/geometry_distance_knn."
"html>`__"
msgstr ""

msgid ""
"Accepts two geographic fields or expressions and returns the distance "
"between them. When used in an :meth:`~django.db.models.query.QuerySet."
"order_by` clause, it provides index-assisted nearest-neighbor result sets."
msgstr ""

msgid "``Intersection``"
msgstr "``Intersection``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-intersection>`__, `PostGIS <https://"
"postgis.net/docs/ST_Intersection.html>`__, Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts two geographic fields or expressions and returns the geometric "
"intersection between them."
msgstr ""

msgid "``IsEmpty``"
msgstr ""

msgid "*Availability*: `PostGIS <https://postgis.net/docs/ST_IsEmpty.html>`__"
msgstr ""

msgid ""
"Accepts a geographic field or expression and tests if the value is an empty "
"geometry. Returns ``True`` if its value is empty and ``False`` otherwise."
msgstr ""

msgid "``IsValid``"
msgstr "``IsValid``"

msgid ""
"*Availability*: `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"convenience-functions.html#function_st-isvalid>`__, `PostGIS <https://"
"postgis.net/docs/ST_IsValid.html>`__, Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts a geographic field or expression and tests if the value is well "
"formed. Returns ``True`` if its value is a valid geometry and ``False`` "
"otherwise."
msgstr ""

msgid "``Length``"
msgstr "``Length``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"linestring-property-functions.html#function_st-length>`__, Oracle, `PostGIS "
"<https://postgis.net/docs/ST_Length.html>`__, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic linestring or multilinestring field or "
"expression and returns its length as a :class:`~django.contrib.gis.measure."
"Distance` measure."
msgstr ""

msgid ""
"On PostGIS and SpatiaLite, when the coordinates are geodetic (angular), you "
"can specify if the calculation should be based on a simple sphere (less "
"accurate, less resource-intensive) or on a spheroid (more accurate, more "
"resource-intensive) with the ``spheroid`` keyword argument."
msgstr ""

msgid "MySQL doesn't support length calculations on geographic SRSes."
msgstr ""

msgid "``LineLocatePoint``"
msgstr "``LineLocatePoint``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_LineLocatePoint."
"html>`__, SpatiaLite"
msgstr ""

msgid ""
"Returns a float between 0 and 1 representing the location of the closest "
"point on ``linestring`` to the given ``point``, as a fraction of the 2D line "
"length."
msgstr ""

msgid "``MakeValid``"
msgstr "``MakeValid``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_MakeValid.html>`__, "
"SpatiaLite (LWGEOM/RTTOPO)"
msgstr ""

msgid ""
"Accepts a geographic field or expression and attempts to convert the value "
"into a valid geometry without losing any of the input vertices. Geometries "
"that are already valid are returned without changes. Simple polygons might "
"become a multipolygon and the result might be of lower dimension than the "
"input."
msgstr ""

msgid "``MemSize``"
msgstr "``MemSize``"

msgid "*Availability*: `PostGIS <https://postgis.net/docs/ST_MemSize.html>`__"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns the memory size "
"(number of bytes) that the geometry field takes."
msgstr ""

msgid "``NumGeometries``"
msgstr "``NumGeometries``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"geometrycollection-property-functions.html#function_st-numgeometries>`__, "
"`PostGIS <https://postgis.net/docs/ST_NumGeometries.html>`__, Oracle, "
"SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns the number of "
"geometries if the geometry field is a collection (e.g., a "
"``GEOMETRYCOLLECTION`` or ``MULTI*`` field). Returns 1 for single geometries."
msgstr ""

msgid "On MySQL, returns ``None`` for single geometries."
msgstr ""

msgid "``NumPoints``"
msgstr "``NumPoints``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"linestring-property-functions.html#function_st-numpoints>`__, `PostGIS "
"<https://postgis.net/docs/ST_NPoints.html>`__, Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns the number of "
"points in a geometry."
msgstr ""

msgid "On MySQL, returns ``None`` for any non-``LINESTRING`` geometry."
msgstr ""

msgid "``Perimeter``"
msgstr "``Perimeter``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Perimeter.html>`__, "
"Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns the perimeter of "
"the geometry field as a :class:`~django.contrib.gis.measure.Distance` object."
msgstr ""

msgid "``PointOnSurface``"
msgstr "``PointOnSurface``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_PointOnSurface."
"html>`__, MariaDB, Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a ``Point`` "
"geometry guaranteed to lie on the surface of the field; otherwise returns "
"``None``."
msgstr ""

msgid "``Reverse``"
msgstr "``Reverse``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Reverse.html>`__, "
"Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a geometry with "
"reversed coordinates."
msgstr ""

msgid "``Scale``"
msgstr "``Scale``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Scale.html>`__, "
"SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a geometry with "
"scaled coordinates by multiplying them with the ``x``, ``y``, and optionally "
"``z`` parameters."
msgstr ""

msgid "``SnapToGrid``"
msgstr "``SnapToGrid``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_SnapToGrid.html>`__, "
"SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a geometry with "
"all points snapped to the given grid.  How the geometry is snapped to the "
"grid depends on how many numeric (either float, integer, or long) arguments "
"are given."
msgstr ""

msgid "Number of Arguments"
msgstr ""

msgid "1"
msgstr "1"

msgid "A single size to snap both the X and Y grids to."
msgstr ""

msgid "2"
msgstr "2"

msgid "X and Y sizes to snap the grid to."
msgstr ""

msgid "4"
msgstr "4"

msgid "X, Y sizes and the corresponding X, Y origins."
msgstr ""

msgid "``SymDifference``"
msgstr "``SymDifference``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-symdifference>`__, `PostGIS <https://"
"postgis.net/docs/ST_SymDifference.html>`__, Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts two geographic fields or expressions and returns the geometric "
"symmetric difference (union without the intersection) between the given "
"parameters."
msgstr ""

msgid "``Transform``"
msgstr "``Transform``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Transform.html>`__, "
"Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts a geographic field or expression and a SRID integer code, and "
"returns the transformed geometry to the spatial reference system specified "
"by the ``srid`` parameter."
msgstr ""

msgid ""
"What spatial reference system an integer SRID corresponds to may depend on "
"the spatial database used.  In other words, the SRID numbers used for Oracle "
"are not necessarily the same as those used by PostGIS."
msgstr ""

msgid "``Translate``"
msgstr "``Translate``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Translate.html>`__, "
"SpatiaLite"
msgstr ""

msgid ""
"Accepts a single geographic field or expression and returns a geometry with "
"its coordinates offset by the ``x``, ``y``, and optionally ``z`` numeric "
"parameters."
msgstr ""

msgid "``Union``"
msgstr "``Union``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-union>`__, `PostGIS <https://postgis.net/"
"docs/ST_Union.html>`__, Oracle, SpatiaLite"
msgstr ""

msgid ""
"Accepts two geographic fields or expressions and returns the union of both "
"geometries."
msgstr ""

msgid "GDAL API"
msgstr "GDAL API"

msgid ""
"`GDAL`__ stands for **Geospatial Data Abstraction Library**, and is a "
"veritable \"Swiss army knife\" of GIS data functionality.  A subset of GDAL "
"is the `OGR`__ Simple Features Library, which specializes in reading and "
"writing vector geographic data in a variety of standard formats."
msgstr ""

msgid ""
"GeoDjango provides a high-level Python interface for some of the "
"capabilities of OGR, including the reading and coordinate transformation of "
"vector spatial data and minimal support for GDAL's features with respect to "
"raster (image) data."
msgstr ""

msgid ""
"Although the module is named ``gdal``, GeoDjango only supports some of the "
"capabilities of OGR and GDAL's raster features at this time."
msgstr ""

msgid "Sample Data"
msgstr "样本数据"

msgid ""
"The GDAL/OGR tools described here are designed to help you read in your "
"geospatial data, in order for most of them to be useful you have to have "
"some data to work with.  If you're starting out and don't yet have any data "
"of your own to use, GeoDjango tests contain a number of data sets that you "
"can use for testing. You can download them here:"
msgstr ""

msgid "Vector Data Source Objects"
msgstr "矢量数据源对象"

msgid "``DataSource``"
msgstr "``DataSource``"

msgid ""
":class:`DataSource` is a wrapper for the OGR data source object that "
"supports reading data from a variety of OGR-supported geospatial file "
"formats and data sources using a consistent interface.  Each data source is "
"represented by a :class:`DataSource` object which contains one or more "
"layers of data.  Each layer, represented by a :class:`Layer` object, "
"contains some number of geographic features (:class:`Feature`), information "
"about the type of features contained in that layer (e.g. points, polygons, "
"etc.), as well as the names and types of any additional fields (:class:"
"`Field`) of data that may be associated with each feature in that layer."
msgstr ""

msgid ""
"The constructor for ``DataSource`` only requires one parameter: the path of "
"the file you want to read. However, OGR also supports a variety of more "
"complex data sources, including databases, that may be accessed by passing a "
"special name string instead of a path. For more information, see the `OGR "
"Vector Formats`__ documentation. The :attr:`name` property of a "
"``DataSource`` instance gives the OGR name of the underlying data source "
"that it is using."
msgstr ""

msgid ""
"The optional ``encoding`` parameter allows you to specify a non-standard "
"encoding of the strings in the source. This is typically useful when you "
"obtain ``DjangoUnicodeDecodeError`` exceptions while reading field values."
msgstr ""

msgid ""
"Once you've created your ``DataSource``, you can find out how many layers of "
"data it contains by accessing the :attr:`layer_count` property, or "
"(equivalently) by using the ``len()`` function. For information on accessing "
"the layers of data themselves, see the next section:"
msgstr ""

msgid "Returns the number of layers in the data source."
msgstr ""

msgid "Returns the name of the data source."
msgstr ""

msgid "``Layer``"
msgstr "``Layer``"

msgid ""
"``Layer`` is a wrapper for a layer of data in a ``DataSource`` object. You "
"never create a ``Layer`` object directly. Instead, you retrieve them from a :"
"class:`DataSource` object, which is essentially a standard Python container "
"of ``Layer`` objects. For example, you can access a specific layer by its "
"index (e.g. ``ds[0]`` to access the first layer), or you can iterate over "
"all the layers in the container in a ``for`` loop. The ``Layer`` itself acts "
"as a container for geometric features."
msgstr ""

msgid ""
"Typically, all the features in a given layer have the same geometry type. "
"The :attr:`geom_type` property of a layer is an :class:`OGRGeomType` that "
"identifies the feature type. We can use it to print out some basic "
"information about each layer in a :class:`DataSource`:"
msgstr ""

msgid ""
"The example output is from the cities data source, loaded above, which "
"evidently contains one layer, called ``\"cities\"``, which contains three "
"point features. For simplicity, the examples below assume that you've stored "
"that layer in the variable ``layer``:"
msgstr ""

msgid "Returns the name of this layer in the data source."
msgstr ""

msgid "Returns the number of features in the layer. Same as ``len(layer)``:"
msgstr ""

msgid ""
"Returns the geometry type of the layer, as an :class:`OGRGeomType` object:"
msgstr ""

msgid ""
"Returns the number of fields in the layer, i.e the number of fields of data "
"associated with each feature in the layer:"
msgstr ""

msgid "Returns a list of the names of each of the fields in this layer:"
msgstr ""

msgid ""
"Returns a list of the data types of each of the fields in this layer. These "
"are subclasses of ``Field``, discussed below:"
msgstr ""

msgid ""
"Returns a list of the maximum field widths for each of the fields in this "
"layer:"
msgstr ""

msgid ""
"Returns a list of the numeric precisions for each of the fields in this "
"layer. This is meaningless (and set to zero) for non-numeric fields:"
msgstr ""

msgid ""
"Returns the spatial extent of this layer, as an :class:`Envelope` object:"
msgstr ""

msgid ""
"Property that returns the :class:`SpatialReference` associated with this "
"layer:"
msgstr ""

msgid ""
"If the :class:`Layer` has no spatial reference information associated with "
"it, ``None`` is returned."
msgstr ""

msgid ""
"Property that may be used to retrieve or set a spatial filter for this "
"layer. A spatial filter can only be set with an :class:`OGRGeometry` "
"instance, a 4-tuple extent, or ``None``. When set with something other than "
"``None``, only features that intersect the filter will be returned when "
"iterating over the layer:"
msgstr ""

msgid ""
"A method that returns a list of the values of a given field for each feature "
"in the layer:"
msgstr ""

msgid ""
"A method that returns a list containing the geometry of each feature in the "
"layer. If the optional argument ``geos`` is set to ``True`` then the "
"geometries are converted to :class:`~django.contrib.gis.geos.GEOSGeometry` "
"objects. Otherwise, they are returned as :class:`OGRGeometry` objects:"
msgstr ""

msgid ""
"Returns a boolean indicating whether this layer supports the given "
"capability (a string).  Examples of valid capability strings include: "
"``'RandomRead'``, ``'SequentialWrite'``, ``'RandomWrite'``, "
"``'FastSpatialFilter'``, ``'FastFeatureCount'``, ``'FastGetExtent'``, "
"``'CreateField'``, ``'Transactions'``, ``'DeleteFeature'``, and "
"``'FastSetNextByIndex'``."
msgstr ""

msgid "``Feature``"
msgstr "``Feature``"

msgid ""
"``Feature`` wraps an OGR feature. You never create a ``Feature`` object "
"directly. Instead, you retrieve them from a :class:`Layer` object. Each "
"feature consists of a geometry and a set of fields containing additional "
"properties. The geometry of a field is accessible via its ``geom`` property, "
"which returns an :class:`OGRGeometry` object. A ``Feature`` behaves like a "
"standard Python container for its fields, which it returns as :class:`Field` "
"objects: you can access a field directly by its index or name, or you can "
"iterate over a feature's fields, e.g. in a ``for`` loop."
msgstr ""

msgid "Returns the geometry for this feature, as an ``OGRGeometry`` object:"
msgstr ""

msgid ""
"A method that returns the value of the given field (specified by name) for "
"this feature, **not** a ``Field`` wrapper object:"
msgstr ""

msgid ""
"Returns the type of geometry for this feature, as an :class:`OGRGeomType` "
"object. This will be the same for all features in a given layer and is "
"equivalent to the :attr:`Layer.geom_type` property of the :class:`Layer` "
"object the feature came from."
msgstr ""

msgid ""
"Returns the number of fields of data associated with the feature. This will "
"be the same for all features in a given layer and is equivalent to the :attr:"
"`Layer.num_fields` property of the :class:`Layer` object the feature came "
"from."
msgstr ""

msgid ""
"Returns a list of the names of the fields of data associated with the "
"feature. This will be the same for all features in a given layer and is "
"equivalent to the :attr:`Layer.fields` property of the :class:`Layer` object "
"the feature came from."
msgstr ""

msgid "Returns the feature identifier within the layer:"
msgstr ""

msgid ""
"Returns the name of the :class:`Layer` that the feature came from. This will "
"be the same for all features in a given layer:"
msgstr ""

msgid ""
"A method that returns the index of the given field name. This will be the "
"same for all features in a given layer:"
msgstr ""

msgid "``Field``"
msgstr "``Field``"

msgid "Returns the name of this field:"
msgstr ""

msgid ""
"Returns the OGR type of this field, as an integer. The ``FIELD_CLASSES`` "
"dictionary maps these values onto subclasses of ``Field``:"
msgstr ""

msgid "Returns a string with the name of the data type of this field:"
msgstr ""

msgid ""
"Returns the value of this field. The ``Field`` class itself returns the "
"value as a string, but each subclass returns the value in the most "
"appropriate form:"
msgstr ""

msgid "Returns the width of this field:"
msgstr ""

msgid ""
"Returns the numeric precision of this field. This is meaningless (and set to "
"zero) for non-numeric fields:"
msgstr ""

msgid "Returns the value of the field as a double (float):"
msgstr ""

msgid "Returns the value of the field as an integer:"
msgstr ""

msgid "Returns the value of the field as a string:"
msgstr ""

msgid "Returns the value of the field as a tuple of date and time components:"
msgstr ""

msgid "``Driver``"
msgstr "``Driver``"

msgid ""
"The ``Driver`` class is used internally to wrap an OGR :class:`DataSource` "
"driver."
msgstr ""

msgid "Returns the number of OGR vector drivers currently registered."
msgstr ""

msgid "OGR Geometries"
msgstr ""

msgid "``OGRGeometry``"
msgstr "``OGRGeometry``"

msgid ""
":class:`OGRGeometry` objects share similar functionality with :class:"
"`~django.contrib.gis.geos.GEOSGeometry` objects and are thin wrappers around "
"OGR's internal geometry representation. Thus, they allow for more efficient "
"access to data when using :class:`DataSource`. Unlike its GEOS counterpart, :"
"class:`OGRGeometry` supports spatial reference systems and coordinate "
"transformation:"
msgstr ""

msgid ""
"This object is a wrapper for the `OGR Geometry`__ class. These objects are "
"instantiated directly from the given ``geom_input`` parameter, which may be "
"a string containing WKT, HEX, GeoJSON, a ``buffer`` containing WKB data, or "
"an :class:`OGRGeomType` object. These objects are also returned from the :"
"class:`Feature.geom` attribute, when reading vector data from :class:`Layer` "
"(which is in turn a part of a :class:`DataSource`)."
msgstr ""

msgid "Constructs an :class:`OGRGeometry` from the given GML string."
msgstr ""

msgid "Constructs a :class:`Polygon` from the given bounding-box (a 4-tuple)."
msgstr ""

msgid ""
"Returns the number of points in a :class:`LineString`, the number of rings "
"in a :class:`Polygon`, or the number of geometries in a :class:"
"`GeometryCollection`. Not applicable to other geometry types."
msgstr ""

msgid ""
"Iterates over the points in a :class:`LineString`, the rings in a :class:"
"`Polygon`, or the geometries in a :class:`GeometryCollection`. Not "
"applicable to other geometry types."
msgstr ""

msgid ""
"Returns the point at the specified index for a :class:`LineString`, the "
"interior ring at the specified index for a :class:`Polygon`, or the geometry "
"at the specified index in a :class:`GeometryCollection`. Not applicable to "
"other geometry types."
msgstr ""

msgid ""
"Returns the number of coordinated dimensions of the geometry, i.e. 0 for "
"points, 1 for lines, and so forth:"
msgstr ""

msgid ""
"Returns or sets the coordinate dimension of this geometry. For example, the "
"value would be 2 for two-dimensional geometries."
msgstr ""

msgid "Returns the number of elements in this geometry:"
msgstr ""

msgid "Returns the number of points used to describe this geometry:"
msgstr ""

msgid "Alias for :attr:`point_count`."
msgstr ""

msgid "Returns the type of this geometry, as an :class:`OGRGeomType` object."
msgstr ""

msgid "Returns the name of the type of this geometry:"
msgstr ""

msgid ""
"Returns the area of this geometry, or 0 for geometries that do not contain "
"an area:"
msgstr ""

msgid "Returns the envelope of this geometry, as an :class:`Envelope` object."
msgstr ""

msgid ""
"Returns the envelope of this geometry as a 4-tuple, instead of as an :class:"
"`Envelope` object:"
msgstr ""

msgid ""
"This property controls the spatial reference for this geometry, or ``None`` "
"if no spatial reference system has been assigned to it. If assigned, "
"accessing this property returns a :class:`SpatialReference` object.  It may "
"be set with another :class:`SpatialReference` object, or any input that :"
"class:`SpatialReference` accepts. Example:"
msgstr ""

msgid ""
"Returns or sets the spatial reference identifier corresponding to :class:"
"`SpatialReference` of this geometry.  Returns ``None`` if there is no "
"spatial reference information associated with this geometry, or if an SRID "
"cannot be determined."
msgstr ""

msgid ""
"Returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object "
"corresponding to this geometry."
msgstr ""

msgid "Returns a string representation of this geometry in GML format:"
msgstr ""

msgid "Returns a string representation of this geometry in HEX WKB format:"
msgstr ""

msgid "Returns a string representation of this geometry in JSON format:"
msgstr ""

msgid "Returns a string representation of this geometry in KML format."
msgstr ""

msgid ""
"Returns the size of the WKB buffer needed to hold a WKB representation of "
"this geometry:"
msgstr ""

msgid "Returns a ``buffer`` containing a WKB representation of this geometry."
msgstr ""

msgid "Returns a string representation of this geometry in WKT format."
msgstr ""

msgid "Returns the EWKT representation of this geometry."
msgstr ""

msgid "Returns a new :class:`OGRGeometry` clone of this geometry object."
msgstr ""

msgid ""
"If there are any rings within this geometry that have not been closed, this "
"routine will do so by adding the starting point to the end:"
msgstr ""

msgid ""
"Transforms this geometry to a different spatial reference system. May take "
"a :class:`CoordTransform` object, a :class:`SpatialReference` object, or any "
"other input accepted by :class:`SpatialReference` (including spatial "
"reference WKT and PROJ strings, or an integer SRID)."
msgstr ""

msgid ""
"By default nothing is returned and the geometry is transformed in-place. "
"However, if the ``clone`` keyword is set to ``True`` then a transformed "
"clone of this geometry is returned instead."
msgstr ""

msgid ""
"Returns ``True`` if this geometry intersects the other, otherwise returns "
"``False``."
msgstr ""

msgid ""
"Returns ``True`` if this geometry is equivalent to the other, otherwise "
"returns ``False``."
msgstr ""

msgid ""
"Returns ``True`` if this geometry is spatially disjoint to (i.e. does not "
"intersect) the other, otherwise returns ``False``."
msgstr ""

msgid ""
"Returns ``True`` if this geometry touches the other, otherwise returns "
"``False``."
msgstr ""

msgid ""
"Returns ``True`` if this geometry crosses the other, otherwise returns "
"``False``."
msgstr ""

msgid ""
"Returns ``True`` if this geometry is contained within the other, otherwise "
"returns ``False``."
msgstr ""

msgid ""
"Returns ``True`` if this geometry contains the other, otherwise returns "
"``False``."
msgstr ""

msgid ""
"Returns ``True`` if this geometry overlaps the other, otherwise returns "
"``False``."
msgstr ""

msgid "The boundary of this geometry, as a new :class:`OGRGeometry` object."
msgstr ""

msgid ""
"The smallest convex polygon that contains this geometry, as a new :class:"
"`OGRGeometry` object."
msgstr ""

msgid ""
"Returns the region consisting of the difference of this geometry and the "
"other, as a new :class:`OGRGeometry` object."
msgstr ""

msgid ""
"Returns the region consisting of the intersection of this geometry and the "
"other, as a new :class:`OGRGeometry` object."
msgstr ""

msgid ""
"Returns the region consisting of the symmetric difference of this geometry "
"and the other, as a new :class:`OGRGeometry` object."
msgstr ""

msgid ""
"Returns the region consisting of the union of this geometry and the other, "
"as a new :class:`OGRGeometry` object."
msgstr ""

msgid ""
"Returns the coordinates of a point geometry as a tuple, the coordinates of a "
"line geometry as a tuple of tuples, and so forth:"
msgstr ""

msgid "An alias for :attr:`tuple`."
msgstr ""

msgid "Returns the X coordinate of this point:"
msgstr ""

msgid "Returns the Y coordinate of this point:"
msgstr ""

msgid ""
"Returns the Z coordinate of this point, or ``None`` if the point does not "
"have a Z coordinate:"
msgstr ""

msgid "Returns a list of X coordinates in this line:"
msgstr ""

msgid "Returns a list of Y coordinates in this line:"
msgstr ""

msgid ""
"Returns a list of Z coordinates in this line, or ``None`` if the line does "
"not have Z coordinates:"
msgstr ""

msgid ""
"Returns the shell or exterior ring of this polygon, as a ``LinearRing`` "
"geometry."
msgstr ""

msgid "An alias for :attr:`shell`."
msgstr ""

msgid "Returns a :class:`Point` representing the centroid of this polygon."
msgstr ""

msgid ""
"Adds a geometry to this geometry collection. Not applicable to other "
"geometry types."
msgstr ""

msgid "``OGRGeomType``"
msgstr "``OGRGeomType``"

msgid ""
"This class allows for the representation of an OGR geometry type in any of "
"several ways:"
msgstr ""

msgid "Returns a short-hand string form of the OGR Geometry type:"
msgstr ""

msgid "Returns the number corresponding to the OGR geometry type:"
msgstr ""

msgid ""
"Returns the Django field type (a subclass of GeometryField) to use for "
"storing this OGR type, or ``None`` if there is no appropriate Django type:"
msgstr ""

msgid ""
"Represents an OGR Envelope structure that contains the minimum and maximum "
"X, Y coordinates for a rectangle bounding box. The naming of the variables "
"is compatible with the OGR Envelope C structure."
msgstr ""

msgid "The value of the minimum X coordinate."
msgstr ""

msgid "The value of the maximum X coordinate."
msgstr ""

msgid "The value of the minimum Y coordinate."
msgstr ""

msgid "The value of the maximum Y coordinate."
msgstr ""

msgid "The upper-right coordinate, as a tuple."
msgstr ""

msgid "The lower-left coordinate, as a tuple."
msgstr ""

msgid "A tuple representing the envelope."
msgstr ""

msgid "A string representing this envelope as a polygon in WKT format."
msgstr ""

msgid "Coordinate System Objects"
msgstr ""

msgid "``SpatialReference``"
msgstr "``SpatialReference``"

msgid ""
"Spatial reference objects are initialized on the given ``srs_input``, which "
"may be one of the following:"
msgstr ""

msgid "OGC Well Known Text (WKT) (a string)"
msgstr ""

msgid "EPSG code (integer or string)"
msgstr ""

msgid "PROJ string"
msgstr ""

msgid ""
"A shorthand string for well-known standards (``'WGS84'``, ``'WGS72'``, "
"``'NAD27'``, ``'NAD83'``)"
msgstr ""

msgid ""
"Returns the value of the given string attribute node, ``None`` if the node "
"doesn't exist. Can also take a tuple as a parameter, (target, child), where "
"child is the index of the attribute in the WKT. For example:"
msgstr ""

msgid ""
"The attribute value for the given target node (e.g. ``'PROJCS'``). The index "
"keyword specifies an index of the child node to return."
msgstr ""

msgid "Returns the authority name for the given string target node."
msgstr ""

msgid "Returns the authority code for the given string target node."
msgstr ""

msgid "Returns a clone of this spatial reference object."
msgstr ""

msgid ""
"This method inspects the WKT of this ``SpatialReference`` and will add EPSG "
"authority nodes where an EPSG identifier is applicable."
msgstr ""

msgid "Morphs this SpatialReference from ESRI's format to EPSG"
msgstr ""

msgid "Morphs this SpatialReference to ESRI's format."
msgstr ""

msgid ""
"Checks to see if the given spatial reference is valid, if not an exception "
"will be raised."
msgstr ""

msgid "Import spatial reference from EPSG code."
msgstr ""

msgid "Import spatial reference from PROJ string."
msgstr ""

msgid "Import spatial reference from WKT."
msgstr ""

msgid "Import spatial reference from XML."
msgstr ""

msgid "Returns the name of this Spatial Reference."
msgstr ""

msgid "Returns the SRID of top-level authority, or ``None`` if undefined."
msgstr ""

msgid "Returns the name of the linear units."
msgstr ""

msgid "Returns the value of the linear units."
msgstr ""

msgid "Returns the name of the angular units.\""
msgstr ""

msgid "Returns the value of the angular units."
msgstr ""

msgid ""
"Returns a 2-tuple of the units value and the units name and will "
"automatically determines whether to return the linear or angular units."
msgstr ""

msgid ""
"Returns a tuple of the ellipsoid parameters for this spatial reference: "
"(semimajor axis, semiminor axis, and inverse flattening)."
msgstr ""

msgid ""
"Returns the semi major axis of the ellipsoid for this spatial reference."
msgstr ""

msgid ""
"Returns the semi minor axis of the ellipsoid for this spatial reference."
msgstr ""

msgid ""
"Returns the inverse flattening of the ellipsoid for this spatial reference."
msgstr ""

msgid ""
"Returns ``True`` if this spatial reference is geographic (root node is "
"``GEOGCS``)."
msgstr ""

msgid ""
"Returns ``True`` if this spatial reference is local (root node is "
"``LOCAL_CS``)."
msgstr ""

msgid ""
"Returns ``True`` if this spatial reference is a projected coordinate system "
"(root node is ``PROJCS``)."
msgstr ""

msgid "Returns the WKT representation of this spatial reference."
msgstr ""

msgid "Returns the 'pretty' representation of the WKT."
msgstr ""

msgid "Returns the PROJ representation for this spatial reference."
msgstr ""

msgid "Alias for :attr:`SpatialReference.proj`."
msgstr ""

msgid "Returns the XML representation of this spatial reference."
msgstr ""

msgid "``CoordTransform``"
msgstr "``CoordTransform``"

msgid ""
"Represents a coordinate system transform. It is initialized with two :class:"
"`SpatialReference`, representing the source and target coordinate systems, "
"respectively. These objects should be used when performing the same "
"coordinate transformation repeatedly on different geometries:"
msgstr ""

msgid "Raster Data Objects"
msgstr ""

msgid "``GDALRaster``"
msgstr "``GDALRaster``"

msgid ""
":class:`GDALRaster` is a wrapper for the GDAL raster source object that "
"supports reading data from a variety of GDAL-supported geospatial file "
"formats and data sources using a consistent interface.  Each data source is "
"represented by a :class:`GDALRaster` object which contains one or more "
"layers of data named bands.  Each band, represented by a :class:`GDALBand` "
"object, contains georeferenced image data. For example, an RGB image is "
"represented as three bands: one for red, one for green, and one for blue."
msgstr ""

msgid ""
"For raster data there is no difference between a raster instance and its "
"data source. Unlike for the Geometry objects, :class:`GDALRaster` objects "
"are always a data source. Temporary rasters can be instantiated in memory "
"using the corresponding driver, but they will be of the same class as file-"
"based raster sources."
msgstr ""

msgid ""
"The constructor for ``GDALRaster`` accepts two parameters. The first "
"parameter defines the raster source, and the second parameter defines if a "
"raster should be opened in write mode. For newly-created rasters, the second "
"parameter is ignored and the new raster is always created in write mode."
msgstr ""

msgid ""
"The first parameter can take three forms: a string or :class:`~pathlib.Path` "
"representing a file path (filesystem or GDAL virtual filesystem), a "
"dictionary with values defining a new raster, or a bytes object representing "
"a raster file."
msgstr ""

msgid ""
"If the input is a file path, the raster is opened from there. If the input "
"is raw data in a dictionary, the parameters ``width``, ``height``, and "
"``srid`` are required. If the input is a bytes object, it will be opened "
"using a GDAL virtual filesystem."
msgstr ""

msgid ""
"For a detailed description of how to create rasters using dictionary input, "
"see :ref:`gdal-raster-ds-input`. For a detailed description of how to create "
"rasters in the virtual filesystem, see :ref:`gdal-raster-vsimem`."
msgstr ""

msgid ""
"The following example shows how rasters can be created from different input "
"sources (using the sample data from the GeoDjango tests; see also the :ref:"
"`gdal_sample_data` section)."
msgstr ""

msgid "Support for :class:`pathlib.Path` ``ds_input`` was added."
msgstr "增加了对 :class:`pathlib.Path` ``ds_input`` 的支持。"

msgid ""
"The name of the source which is equivalent to the input file path or the "
"name provided upon instantiation."
msgstr ""

msgid ""
"The name of the GDAL driver used to handle the input file. For "
"``GDALRaster``\\s created from a file, the driver type is detected "
"automatically. The creation of rasters from scratch is an in-memory raster "
"by default (``'MEM'``), but can be altered as needed. For instance, use "
"``GTiff`` for a ``GeoTiff`` file. For a list of file types, see also the "
"`GDAL Raster Formats`__ list."
msgstr ""

msgid "An in-memory raster is created through the following example:"
msgstr ""

msgid "A file based GeoTiff raster is created through the following example:"
msgstr ""

msgid "The width of the source in pixels (X-axis)."
msgstr ""

msgid "The height of the source in pixels (Y-axis)."
msgstr ""

msgid ""
"The spatial reference system of the raster, as a :class:`SpatialReference` "
"instance. The SRS can be changed by setting it to an other :class:"
"`SpatialReference` or providing any input that is accepted by the :class:"
"`SpatialReference` constructor."
msgstr ""

msgid ""
"The Spatial Reference System Identifier (SRID) of the raster. This property "
"is a shortcut to getting or setting the SRID through the :attr:`srs` "
"attribute."
msgstr ""

msgid ""
"The affine transformation matrix used to georeference the source, as a tuple "
"of six coefficients which map pixel/line coordinates into georeferenced "
"space using the following relationship::"
msgstr ""

msgid ""
"The same values can be retrieved by accessing the :attr:`origin` (indices 0 "
"and 3), :attr:`scale` (indices 1 and 5) and :attr:`skew` (indices 2 and 4) "
"properties."
msgstr ""

msgid "The default is ``[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]``."
msgstr ""

msgid ""
"Coordinates of the top left origin of the raster in the spatial reference "
"system of the source, as a point object with ``x`` and ``y`` members."
msgstr ""

msgid ""
"Pixel width and height used for georeferencing the raster, as a point object "
"with ``x`` and ``y``  members. See :attr:`geotransform` for more information."
msgstr ""

msgid ""
"Skew coefficients used to georeference the raster, as a point object with "
"``x`` and ``y``  members. In case of north up images, these coefficients are "
"both ``0``."
msgstr ""

msgid ""
"Extent (boundary values) of the raster source, as a 4-tuple ``(xmin, ymin, "
"xmax, ymax)`` in the spatial reference system of the source."
msgstr ""

msgid "List of all bands of the source, as :class:`GDALBand` instances."
msgstr ""

msgid "Returns a warped version of this raster."
msgstr ""

msgid ""
"The warping parameters can be specified through the ``ds_input`` argument. "
"The use of ``ds_input`` is analogous to the corresponding argument of the "
"class constructor. It is a dictionary with the characteristics of the target "
"raster. Allowed dictionary key values are width, height, SRID, origin, "
"scale, skew, datatype, driver, and name (filename)."
msgstr ""

msgid ""
"By default, the warp functions keeps most parameters equal to the values of "
"the original source raster, so only parameters that should be changed need "
"to be specified. Note that this includes the driver, so for file-based "
"rasters the warp function will create a new raster on disk."
msgstr ""

msgid ""
"The only parameter that is set differently from the source raster is the "
"name. The default value of the raster name is the name of the source raster "
"appended with ``'_copy' + source_driver_name``. For file-based rasters it is "
"recommended to provide the file path of the target raster."
msgstr ""

msgid ""
"The resampling algorithm used for warping can be specified with the "
"``resampling`` argument. The default is ``NearestNeighbor``, and the other "
"allowed values are ``Bilinear``, ``Cubic``, ``CubicSpline``, ``Lanczos``, "
"``Average``, and ``Mode``."
msgstr ""

msgid ""
"The ``max_error`` argument can be used to specify the maximum error measured "
"in input pixels that is allowed in approximating the transformation. The "
"default is 0.0 for exact calculations."
msgstr ""

msgid ""
"For users familiar with ``GDAL``, this function has a similar functionality "
"to the ``gdalwarp`` command-line utility."
msgstr ""

msgid ""
"For example, the warp function can be used for aggregating a raster to the "
"double of its original pixel scale:"
msgstr ""

msgid ""
"Transforms this raster to a different spatial reference system (``srs``), "
"which may be a :class:`SpatialReference` object, or any other input accepted "
"by :class:`SpatialReference` (including spatial reference WKT and PROJ "
"strings, or an integer SRID)."
msgstr ""

msgid ""
"It calculates the bounds and scale of the current raster in the new spatial "
"reference system and warps the raster using the :attr:`~GDALRaster.warp` "
"function."
msgstr ""

msgid ""
"By default, the driver of the source raster is used and the name of the "
"raster is the original name appended with ``'_copy' + source_driver_name``. "
"A different driver or name can be specified with the ``driver`` and ``name`` "
"arguments."
msgstr ""

msgid ""
"The default resampling algorithm is ``NearestNeighbour`` but can be changed "
"using the ``resampling`` argument. The default maximum allowed error for "
"resampling is 0.0 and can be changed using the ``max_error`` argument. "
"Consult the :attr:`~GDALRaster.warp` documentation for detail on those "
"arguments."
msgstr ""

msgid ""
"Returns a string with a summary of the raster. This is equivalent to the "
"`gdalinfo`__ command line utility."
msgstr ""

msgid ""
"The metadata of this raster, represented as a nested dictionary. The first-"
"level key is the metadata domain. The second-level contains the metadata "
"item names and values from each domain."
msgstr ""

msgid ""
"To set or update a metadata item, pass the corresponding metadata item to "
"the method using the nested structure described above. Only keys that are in "
"the specified dictionary are updated; the rest of the metadata remains "
"unchanged."
msgstr ""

msgid "To remove a metadata item, use ``None`` as the metadata value."
msgstr ""

msgid ""
"A ``bytes`` representation of this raster. Returns ``None`` for rasters that "
"are not stored in GDAL's virtual filesystem."
msgstr ""

msgid ""
"A boolean indicating if this raster is stored in GDAL's virtual filesystem."
msgstr ""

msgid "``GDALBand``"
msgstr "``GDALBand``"

msgid ""
"``GDALBand`` instances are not created explicitly, but rather obtained from "
"a :class:`GDALRaster` object, through its :attr:`~GDALRaster.bands` "
"attribute. The GDALBands contain the actual pixel values of the raster."
msgstr ""

msgid "The name or description of the band, if any."
msgstr ""

msgid "The width of the band in pixels (X-axis)."
msgstr ""

msgid "The height of the band in pixels (Y-axis)."
msgstr ""

msgid ""
"The total number of pixels in this band. Is equal to ``width * height``."
msgstr ""

msgid ""
"Compute statistics on the pixel values of this band. The return value is a "
"tuple with the following structure: ``(minimum, maximum, mean, standard "
"deviation)``."
msgstr ""

msgid ""
"If the ``approximate`` argument is set to ``True``, the statistics may be "
"computed based on overviews or a subset of image tiles."
msgstr ""

msgid ""
"If the ``refresh`` argument is set to ``True``, the statistics will be "
"computed from the data directly, and the cache will be updated with the "
"result."
msgstr ""

msgid ""
"If a persistent cache value is found, that value is returned. For raster "
"formats using Persistent Auxiliary Metadata (PAM) services, the statistics "
"might be cached in an auxiliary file. In some cases this metadata might be "
"out of sync with the pixel values or cause values from a previous call to be "
"returned which don't reflect the value of the ``approximate`` argument. In "
"such cases, use the ``refresh`` argument to get updated values and store "
"them in the cache."
msgstr ""

msgid ""
"For empty bands (where all pixel values are \"no data\"), all statistics are "
"returned as ``None``."
msgstr ""

msgid ""
"The statistics can also be retrieved directly by accessing the :attr:`min`, :"
"attr:`max`, :attr:`mean`, and :attr:`std` properties."
msgstr ""

msgid "The minimum pixel value of the band (excluding the \"no data\" value)."
msgstr ""

msgid "The maximum pixel value of the band (excluding the \"no data\" value)."
msgstr ""

msgid ""
"The mean of all pixel values of the band (excluding the \"no data\" value)."
msgstr ""

msgid ""
"The standard deviation of all pixel values of the band (excluding the \"no "
"data\" value)."
msgstr ""

msgid ""
"The \"no data\" value for a band is generally a special marker value used to "
"mark pixels that are not valid data. Such pixels should generally not be "
"displayed, nor contribute to analysis operations."
msgstr ""

msgid "To delete an existing \"no data\" value, set this property to ``None``."
msgstr ""

msgid ""
"The data type contained in the band, as an integer constant between 0 "
"(Unknown) and 11. If ``as_string`` is ``True``, the data type is returned as "
"a string with the following possible values: ``GDT_Unknown``, ``GDT_Byte``, "
"``GDT_UInt16``, ``GDT_Int16``, ``GDT_UInt32``, ``GDT_Int32``, "
"``GDT_Float32``, ``GDT_Float64``, ``GDT_CInt16``, ``GDT_CInt32``, "
"``GDT_CFloat32``, and ``GDT_CFloat64``."
msgstr ""

msgid ""
"The color interpretation for the band, as an integer between 0and 16. If "
"``as_string`` is ``True``, the data type is returned as a string with the "
"following possible values: ``GCI_Undefined``, ``GCI_GrayIndex``, "
"``GCI_PaletteIndex``, ``GCI_RedBand``, ``GCI_GreenBand``, ``GCI_BlueBand``, "
"``GCI_AlphaBand``, ``GCI_HueBand``, ``GCI_SaturationBand``, "
"``GCI_LightnessBand``, ``GCI_CyanBand``, ``GCI_MagentaBand``, "
"``GCI_YellowBand``, ``GCI_BlackBand``, ``GCI_YCbCr_YBand``, "
"``GCI_YCbCr_CbBand``, and ``GCI_YCbCr_CrBand``. ``GCI_YCbCr_CrBand`` also "
"represents ``GCI_Max`` because both correspond to the integer 16, but only "
"``GCI_YCbCr_CrBand`` is returned as a string."
msgstr ""

msgid ""
"The accessor to the pixel values of the ``GDALBand``. Returns the complete "
"data array if no parameters are provided. A subset of the pixel array can be "
"requested by specifying an offset and block size as tuples."
msgstr ""

msgid ""
"If NumPy is available, the data is returned as NumPy array. For performance "
"reasons, it is highly recommended to use NumPy."
msgstr ""

msgid ""
"Data is written to the ``GDALBand`` if the ``data`` parameter is provided. "
"The input can be of one of the following types - packed string, buffer, "
"list, array, and NumPy array. The number of items in the input should "
"normally correspond to the total number of pixels in the band, or to the "
"number of pixels for a specific block of pixel values if the ``offset`` and "
"``size`` parameters are provided."
msgstr ""

msgid ""
"If the number of items in the input is different from the target pixel "
"block, the ``shape`` parameter must be specified. The shape is a tuple that "
"specifies the width and height of the input data in pixels. The data is then "
"replicated to update the pixel values of the selected block. This is useful "
"to fill an entire band with a single value, for instance."
msgstr ""

msgid ""
"The metadata of this band. The functionality is identical to :attr:"
"`GDALRaster.metadata`."
msgstr ""

msgid "Creating rasters from data"
msgstr ""

msgid ""
"This section describes how to create rasters from scratch using the "
"``ds_input`` parameter."
msgstr ""

msgid ""
"A new raster is created when a ``dict`` is passed to the :class:`GDALRaster` "
"constructor. The dictionary contains defining parameters of the new raster, "
"such as the origin, size, or spatial reference system. The dictionary can "
"also contain pixel data and information about the format of the new raster. "
"The resulting raster can therefore be file-based or memory-based, depending "
"on the driver specified."
msgstr ""

msgid ""
"There's no standard for describing raster data in a dictionary or JSON "
"flavor. The definition of the dictionary input to the :class:`GDALRaster` "
"class is therefore specific to Django. It's inspired by the `geojson`__ "
"format, but the ``geojson`` standard is currently limited to vector formats."
msgstr ""

msgid ""
"Examples of using the different keys when creating rasters can be found in "
"the documentation of the corresponding attributes and methods of the :class:"
"`GDALRaster` and :class:`GDALBand` classes."
msgstr ""

msgid "The ``ds_input`` dictionary"
msgstr "``ds_input`` 字典"

msgid ""
"Only a few keys are required in the ``ds_input`` dictionary to create a "
"raster: ``width``, ``height``, and ``srid``. All other parameters have "
"default values (see the table below). The list of keys that can be passed in "
"the ``ds_input`` dictionary is closely related but not identical to the :"
"class:`GDALRaster` properties. Many of the parameters are mapped directly to "
"those properties; the others are described below."
msgstr ""

msgid ""
"The following table describes all keys that can be set in the ``ds_input`` "
"dictionary."
msgstr ""

msgid "Key"
msgstr "键"

msgid "Default"
msgstr "默认"

msgid "Usage"
msgstr "用法"

msgid "required"
msgstr "必须的"

msgid "Mapped to the :attr:`~GDALRaster.srid` attribute"
msgstr ""

msgid "``width``"
msgstr "``width``"

msgid "Mapped to the :attr:`~GDALRaster.width` attribute"
msgstr ""

msgid "``height``"
msgstr "``height``"

msgid "Mapped to the :attr:`~GDALRaster.height` attribute"
msgstr ""

msgid "``driver``"
msgstr "``driver``"

msgid "``MEM``"
msgstr "``MEM``"

msgid "Mapped to the :attr:`~GDALRaster.driver` attribute"
msgstr ""

msgid "``name``"
msgstr "``name``"

msgid "``''``"
msgstr "``''``"

msgid "See below"
msgstr "见以下"

msgid "``origin``"
msgstr "``origin``"

msgid "``0``"
msgstr "``0``"

msgid "Mapped to the :attr:`~GDALRaster.origin` attribute"
msgstr ""

msgid "``scale``"
msgstr "``scale``"

msgid "Mapped to the :attr:`~GDALRaster.scale` attribute"
msgstr ""

msgid "``skew``"
msgstr "``skew``"

msgid "``bands``"
msgstr "``bands``"

msgid "``[]``"
msgstr "``[]``"

msgid "``nr_of_bands``"
msgstr "``nr_of_bands``"

msgid "``datatype``"
msgstr "``datatype``"

msgid "``6``"
msgstr "``6``"

msgid "``papsz_options``"
msgstr "``papsz_options``"

msgid "``{}``"
msgstr "``{}``"

msgid ""
"String representing the name of the raster. When creating a file-based "
"raster, this parameter must be the file path for the new raster. If the name "
"starts with ``/vsimem/``, the raster is created in GDAL's virtual filesystem."
msgstr ""

msgid ""
"Integer representing the data type for all the bands. Defaults to ``6`` "
"(Float32). All bands of a new raster are required to have the same datatype. "
"The value mapping is:"
msgstr ""

msgid "Value"
msgstr "值"

msgid "GDAL Pixel Type"
msgstr ""

msgid "GDT_Byte"
msgstr "GDT_Byte"

msgid "Eight bit unsigned integer"
msgstr ""

msgid "GDT_UInt16"
msgstr "GDT_UInt16"

msgid "Sixteen bit unsigned integer"
msgstr ""

msgid "3"
msgstr "3"

msgid "GDT_Int16"
msgstr "GDT_Int16"

msgid "Sixteen bit signed integer"
msgstr ""

msgid "GDT_UInt32"
msgstr "GDT_UInt32"

msgid "Thirty-two bit unsigned integer"
msgstr ""

msgid "5"
msgstr "5"

msgid "GDT_Int32"
msgstr "GDT_Int32"

msgid "Thirty-two bit signed integer"
msgstr ""

msgid "6"
msgstr "6"

msgid "GDT_Float32"
msgstr "GDT_Float32"

msgid "Thirty-two bit floating point"
msgstr ""

msgid "7"
msgstr "7"

msgid "GDT_Float64"
msgstr "GDT_Float64"

msgid "Sixty-four bit floating point"
msgstr ""

msgid ""
"Integer representing the number of bands of the raster. A raster can be "
"created without passing band data upon creation. If the number of bands "
"isn't specified, it's automatically calculated from the length of the "
"``bands`` input. The number of bands can't be changed after creation."
msgstr ""

msgid ""
"A list of ``band_input`` dictionaries with band input data. The resulting "
"band indices are the same as in the list provided. The definition of the "
"band input dictionary is given below. If band data isn't provided, the "
"raster bands values are instantiated as an array of zeros and the \"no "
"data\" value is set to ``None``."
msgstr ""

msgid ""
"A dictionary with raster creation options. The key-value pairs of the input "
"dictionary are passed to the driver on creation of the raster."
msgstr ""

msgid ""
"The available options are driver-specific and are described in the "
"documentation of each driver."
msgstr ""

msgid ""
"The values in the dictionary are not case-sensitive and are automatically "
"converted to the correct string format upon creation."
msgstr ""

msgid ""
"The following example uses some of the options available for the `GTiff "
"driver`__. The result is a compressed signed byte raster with an internal "
"tiling scheme. The internal tiles have a block size of 23 by 23:"
msgstr ""

msgid "The ``band_input`` dictionary"
msgstr ""

msgid ""
"The ``bands`` key in the ``ds_input`` dictionary is a list of ``band_input`` "
"dictionaries. Each ``band_input`` dictionary can contain pixel values and "
"the \"no data\" value to be set on the bands of the new raster. The data "
"array can have the full size of the new raster or be smaller. For arrays "
"that are smaller than the full raster, the ``size``, ``shape``, and "
"``offset`` keys  control the pixel values. The corresponding keys are passed "
"to the :meth:`~GDALBand.data` method. Their functionality is the same as "
"setting the band data with that method. The following table describes the "
"keys that can be used."
msgstr ""

msgid "``nodata_value``"
msgstr "``nodata_value``"

msgid "``None``"
msgstr "``None``"

msgid "Mapped to the :attr:`~GDALBand.nodata_value` attribute"
msgstr ""

msgid "``data``"
msgstr "``data``"

msgid "Same as ``nodata_value`` or ``0``"
msgstr ""

msgid "Passed to the :meth:`~GDALBand.data` method"
msgstr ""

msgid "``size``"
msgstr "``size``"

msgid "``(with, height)`` of raster"
msgstr ""

msgid "``shape``"
msgstr "``shape``"

msgid "Same as size"
msgstr ""

msgid "``offset``"
msgstr "``offset``"

msgid "``(0, 0)``"
msgstr "``(0, 0)``"

msgid "Using GDAL's Virtual Filesystem"
msgstr ""

msgid ""
"GDAL can access files stored in the filesystem, but also supports virtual "
"filesystems to abstract accessing other kind of files, such as compressed, "
"encrypted, or remote files."
msgstr ""

msgid "Using memory-based Virtual Filesystem"
msgstr ""

msgid ""
"GDAL has an internal memory-based filesystem, which allows treating blocks "
"of memory as files. It can be used to read and write :class:`GDALRaster` "
"objects to and from binary file buffers."
msgstr ""

msgid ""
"This is useful in web contexts where rasters might be obtained as a buffer "
"from a remote storage or returned from a view without being written to disk."
msgstr ""

msgid ""
":class:`GDALRaster` objects are created in the virtual filesystem when a "
"``bytes`` object is provided as input, or when the file path starts with ``/"
"vsimem/``."
msgstr ""

msgid ""
"Input provided as ``bytes`` has to be a full binary representation of a "
"file. For instance:"
msgstr ""

msgid ""
"To create a new virtual file-based raster from scratch, use the ``ds_input`` "
"dictionary representation and provide a ``name`` argument that starts with "
"``/vsimem/`` (for detail of the dictionary representation, see :ref:`gdal-"
"raster-ds-input`). For virtual file-based rasters, the :attr:`~GDALRaster."
"vsi_buffer` attribute returns the ``bytes`` representation of the raster."
msgstr ""

msgid ""
"Here's how to create a raster and return it as a file in an :class:`~django."
"http.HttpResponse`:"
msgstr ""

msgid "Using other Virtual Filesystems"
msgstr ""

msgid ""
"Depending on the local build of GDAL other virtual filesystems may be "
"supported. You can use them by prepending the provided path with the "
"appropriate ``/vsi*/`` prefix. See the `GDAL Virtual Filesystems "
"documentation`_ for more details."
msgstr ""

msgid "Compressed rasters"
msgstr ""

msgid ""
"Instead decompressing the file and instantiating the resulting raster, GDAL "
"can directly access compressed files using the ``/vsizip/``, ``/vsigzip/``, "
"or ``/vsitar/`` virtual filesystems:"
msgstr ""

msgid "Network rasters"
msgstr ""

msgid ""
"GDAL can support online resources and storage providers transparently. As "
"long as it's built with such capabilities."
msgstr ""

msgid ""
"To access a public raster file with no authentication, you can use ``/"
"vsicurl/``:"
msgstr ""

msgid ""
"For commercial storage providers (e.g. ``/vsis3/``) the system should be "
"previously configured for authentication and possibly other settings (see "
"the `GDAL Virtual Filesystems documentation`_ for available options)."
msgstr ""

msgid "Settings"
msgstr "配置"

msgid "``GDAL_LIBRARY_PATH``"
msgstr "``GDAL_LIBRARY_PATH``"

msgid ""
"A string specifying the location of the GDAL library.  Typically, this "
"setting is only used if the GDAL library is in a non-standard location (e."
"g., ``/home/john/lib/libgdal.so``)."
msgstr ""

msgid "Exceptions"
msgstr "异常"

msgid "The base GDAL exception, indicating a GDAL-related error."
msgstr ""

msgid ""
"An exception raised when an error occurs when constructing or using a "
"spatial reference system object."
msgstr ""

msgid "Geolocation with GeoIP2"
msgstr "用 GeoIP2 进行地理定位"

msgid ""
"The :class:`GeoIP2` object is a wrapper for the `MaxMind geoip2 Python "
"library`__. [#]_"
msgstr ":class:`GeoIP2` 对象是对 `MaxMind geoip2 Python 库`__ 的包装。[#]_"

msgid ""
"In order to perform IP-based geolocation, the :class:`GeoIP2` object "
"requires the :pypi:`geoip2` Python package and the GeoIP ``Country`` and/or "
"``City`` datasets in binary format (the CSV files will not work!), "
"downloaded from e.g. `MaxMind`__ or `DB-IP`__ websites. Grab the ``GeoLite2-"
"Country.mmdb.gz`` and ``GeoLite2-City.mmdb.gz`` files and unzip them in a "
"directory corresponding to the :setting:`GEOIP_PATH` setting."
msgstr ""

msgid ""
"Additionally, it is recommended to install the `libmaxminddb C library`__, "
"so that ``geoip2`` can leverage the C library's faster speed."
msgstr ""
"另外，建议安装 `libmaxminddb C 库`__ ，这样 ``geoip2`` 就可以利用 C 库更快的"
"速度。"

msgid "Support for ``.mmdb`` files downloaded from DB-IP was added."
msgstr ""

msgid "Here is an example of its usage:"
msgstr ""

msgid ""
"The ``GeoIP`` object does not require any parameters to use the default "
"settings. However, at the very least the :setting:`GEOIP_PATH` setting "
"should be set with the path of the location of your GeoIP datasets. The "
"following initialization keywords may be used to customize any of the "
"defaults."
msgstr ""
"``GeoIP`` 对象不需要任何参数来使用默认设置。然而，至少 :setting:`GEOIP_PATH` "
"配置应该用你 GeoIP 数据集位置的路径来设置。以下初始化关键字可用于自定义任何默"
"认配置。"

msgid "Keyword Arguments"
msgstr "关键字参数"

msgid "``path``"
msgstr "``path``"

msgid ""
"Base directory to where GeoIP data is located or the full path to where the "
"city or country data files (``.mmdb``) are located. Assumes that both the "
"city and country datasets are located in this directory; overrides the :"
"setting:`GEOIP_PATH` setting."
msgstr ""
"GeoIP 数据所在的基本目录或城市或国家数据文件（``.mmdb``）所在的完整路径。假设"
"城市和国家数据集都在这个目录中；覆盖 :setting:`GEOIP_PATH` 配置。"

msgid "``cache``"
msgstr "``cache``"

msgid ""
"The cache settings when opening up the GeoIP datasets. May be an integer in "
"(0, 1, 2, 4, 8) corresponding to the ``MODE_AUTO``, ``MODE_MMAP_EXT``, "
"``MODE_MMAP``, and ``GEOIP_INDEX_CACHE`` ``MODE_MEMORY`` C API settings, "
"respectively. Defaults to 0 (``MODE_AUTO``)."
msgstr ""
"打开 GeoIP 数据集时的缓存配置。可以是（0、1、2、4、8）的整数，分别对应于 "
"``MODE_AUTO``、``MODE_MMAP_EXT``、``MODE_MMAP``、``GEOIP_INDEX_CACHE`` 和 "
"``MODE_MEMORY`` C API 配置。默认值为 0（``MODE_AUTO``）。"

msgid "``country``"
msgstr "``country``"

msgid ""
"The name of the GeoIP country data file. Defaults to ``GeoLite2-Country."
"mmdb``. Setting this keyword overrides the :setting:`GEOIP_COUNTRY` setting."
msgstr ""
"GeoIP 国家数据文件的名称。默认值为 ``GeoLite2-Country.mmdb``。设置这个关键字"
"会覆盖 :setting:`GEOIP_COUNTRY` 的配置。"

msgid "``city``"
msgstr "``city``"

msgid ""
"The name of the GeoIP city data file. Defaults to ``GeoLite2-City.mmdb``. "
"Setting this keyword overrides the :setting:`GEOIP_CITY` setting."
msgstr ""
"GeoIP 城市数据文件的名称。默认为 ``GeoLite2-City.mmdb``。设置这个关键字会覆"
"盖 :setting:`GEOIP_CITY` 的配置。"

msgid "Instantiating"
msgstr "实例化"

msgid ""
"This classmethod instantiates the GeoIP object from the given database path "
"and given cache setting."
msgstr "该类方法从给定的数据库路径和给定的缓存配置中实例化 GeoIP 对象。"

msgid "Querying"
msgstr "查询"

msgid ""
"All the following querying routines may take either a string IP address or a "
"fully qualified domain name (FQDN). For example, both ``'205.186.163.125'`` "
"and ``'djangoproject.com'`` would be valid query parameters."
msgstr ""
"以下所有的查询程序可以采用一个字符串 IP 地址或一个完全限定域名（FQDN）。例"
"如，``'205.186.163.125'`` 和 ``'djangoproject.com'`` 都是有效的查询参数。"

msgid ""
"Returns a dictionary of city information for the given query. Some of the "
"values in the dictionary may be undefined (``None``)."
msgstr "返回给定查询的城市信息字典。字典中的一些值可能是未定义的（``None``）。"

msgid ""
"Returns a dictionary with the country code and country for the given query."
msgstr "返回给定查询的国家代码和国家的字典。"

msgid "Returns the country code corresponding to the query."
msgstr "返回与查询对应的国家代码。"

msgid "Returns the country name corresponding to the query."
msgstr "返回与查询对应的国家名称。"

msgid "Coordinate Retrieval"
msgstr "坐标检索"

msgid "Returns a coordinate tuple of (longitude, latitude)."
msgstr "返回 (经度, 纬度) 的坐标元组。"

msgid "Returns a coordinate tuple of (latitude, longitude),"
msgstr "返回 (经度, 纬度) 的坐标元组，"

msgid ""
"Returns a :class:`~django.contrib.gis.geos.Point` object corresponding to "
"the query."
msgstr "返回与查询对应的 :class:`~django.contrib.gis.geos.Point` 对象。"

msgid "``GEOIP_PATH``"
msgstr "``GEOIP_PATH``"

msgid ""
"A string or :class:`pathlib.Path` specifying the directory where the GeoIP "
"data files are located. This setting is *required* unless manually specified "
"with ``path`` keyword when initializing the :class:`GeoIP2` object."
msgstr ""
"字符串或 :class:`pathlib.Path` 指定 GeoIP 数据文件所在的目录。除非在初始化 :"
"class:`GeoIP2` 对象时用 ``path`` 关键字手动指定，否则该配置是 *必须的*。"

msgid "``GEOIP_COUNTRY``"
msgstr "``GEOIP_COUNTRY``"

msgid ""
"The basename to use for the GeoIP country data file. Defaults to ``'GeoLite2-"
"Country.mmdb'``."
msgstr "GeoIP 国家数据文件的基名。默认为 ``'GeoLite2-Country.mmdb'``。"

msgid "``GEOIP_CITY``"
msgstr "``GEOIP_CITY``"

msgid ""
"The basename to use for the GeoIP city data file. Defaults to ``'GeoLite2-"
"City.mmdb'``."
msgstr "GeoIP 城市数据文件的基名。默认为 ``'GeoLite2-City.mmdb'``。"

msgid ""
"The exception raised when an error occurs in a call to the underlying "
"``geoip2`` library."
msgstr "当调用底层的 ``geoip2`` 库时发生错误而引发的异常。"

msgid "GeoIP(R) is a registered trademark of MaxMind, Inc."
msgstr "GeoIP(R) 是 MaxMind, Inc 的注册商标。"

msgid "GIS QuerySet API Reference"
msgstr ""

msgid ""
"The spatial lookups in this section are available for :class:`GeometryField` "
"and :class:`RasterField`."
msgstr ""

msgid ""
"For an introduction, see the :ref:`spatial lookups introduction <spatial-"
"lookups-intro>`.  For an overview of what lookups are compatible with a "
"particular spatial backend, refer to the :ref:`spatial lookup compatibility "
"table <spatial-lookup-compatibility>`."
msgstr ""

msgid "Lookups with rasters"
msgstr ""

msgid ""
"All examples in the reference below are given for geometry fields and "
"inputs, but the lookups can be used the same way with rasters on both sides. "
"Whenever a lookup doesn't support raster input, the input is automatically "
"converted to a geometry where necessary using the `ST_Polygon <https://"
"postgis.net/docs/RT_ST_Polygon.html>`_ function. See also the :ref:"
"`introduction to raster lookups <spatial-lookup-raster>`."
msgstr ""

msgid ""
"The database operators used by the lookups can be divided into three "
"categories:"
msgstr ""

msgid ""
"Native raster support ``N``: the operator accepts rasters natively on both "
"sides of the lookup, and raster input can be mixed with geometry inputs."
msgstr ""

msgid ""
"Bilateral raster support ``B``: the operator supports rasters only if both "
"sides of the lookup receive raster inputs. Raster data is automatically "
"converted to geometries for mixed lookups."
msgstr ""

msgid ""
"Geometry conversion support ``C``. The lookup does not have native raster "
"support, all raster data is automatically converted to geometries."
msgstr ""

msgid ""
"The examples below show the SQL equivalent for the lookups in the different "
"types of raster support. The same pattern applies to all spatial lookups."
msgstr ""

msgid "Case"
msgstr ""

msgid "SQL Equivalent"
msgstr ""

msgid "N, B"
msgstr "N, B"

msgid "``rast__contains=rst``"
msgstr "``rast__contains=rst``"

msgid "``ST_Contains(rast, rst)``"
msgstr "``ST_Contains(rast, rst)``"

msgid "``rast__1__contains=(rst, 2)``"
msgstr "``rast__1__contains=(rst, 2)``"

msgid "``ST_Contains(rast, 1, rst, 2)``"
msgstr "``ST_Contains(rast, 1, rst, 2)``"

msgid "B, C"
msgstr "B, C"

msgid "``rast__contains=geom``"
msgstr "``rast__contains=geom``"

msgid "``ST_Contains(ST_Polygon(rast), geom)``"
msgstr "``ST_Contains(ST_Polygon(rast), geom)``"

msgid "``rast__1__contains=geom``"
msgstr "``rast__1__contains=geom``"

msgid "``ST_Contains(ST_Polygon(rast, 1), geom)``"
msgstr "``ST_Contains(ST_Polygon(rast, 1), geom)``"

msgid "``poly__contains=rst``"
msgstr "``poly__contains=rst``"

msgid "``ST_Contains(poly, ST_Polygon(rst))``"
msgstr "``ST_Contains(poly, ST_Polygon(rst))``"

msgid "``poly__contains=(rst, 1)``"
msgstr "``poly__contains=(rst, 1)``"

msgid "``ST_Contains(poly, ST_Polygon(rst, 1))``"
msgstr "``ST_Contains(poly, ST_Polygon(rst, 1))``"

msgid "``rast__crosses=rst``"
msgstr "``rast__crosses=rst``"

msgid "``ST_Crosses(ST_Polygon(rast), ST_Polygon(rst))``"
msgstr "``ST_Crosses(ST_Polygon(rast), ST_Polygon(rst))``"

msgid "``rast__1__crosses=(rst, 2)``"
msgstr "``rast__1__crosses=(rst, 2)``"

msgid "``ST_Crosses(ST_Polygon(rast, 1), ST_Polygon(rst, 2))``"
msgstr "``ST_Crosses(ST_Polygon(rast, 1), ST_Polygon(rst, 2))``"

msgid "``rast__crosses=geom``"
msgstr "``rast__crosses=geom``"

msgid "``ST_Crosses(ST_Polygon(rast), geom)``"
msgstr "``ST_Crosses(ST_Polygon(rast), geom)``"

msgid "``poly__crosses=rst``"
msgstr "``poly__crosses=rst``"

msgid "``ST_Crosses(poly, ST_Polygon(rst))``"
msgstr "``ST_Crosses(poly, ST_Polygon(rst))``"

msgid ""
"Spatial lookups with rasters are only supported for PostGIS backends "
"(denominated as PGRaster in this section)."
msgstr ""

msgid "``bbcontains``"
msgstr "``bbcontains``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Contain."
"html>`__, MariaDB, MySQL, SpatiaLite, PGRaster (Native)"
msgstr ""

msgid ""
"Tests if the geometry or raster field's bounding box completely contains the "
"lookup geometry's bounding box."
msgstr ""

msgid "Backend"
msgstr "后端"

msgid "``poly ~ geom``"
msgstr "``poly ~ geom``"

msgid "``MBRContains(poly, geom)``"
msgstr "``MBRContains(poly, geom)``"

msgid "``MbrContains(poly, geom)``"
msgstr "``MbrContains(poly, geom)``"

msgid "``bboverlaps``"
msgstr "``bboverlaps``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/geometry_overlaps."
"html>`__, MariaDB, MySQL, SpatiaLite, PGRaster (Native)"
msgstr ""

msgid ""
"Tests if the geometry field's bounding box overlaps the lookup geometry's "
"bounding box."
msgstr ""

msgid "``poly && geom``"
msgstr "``poly && geom``"

msgid "``MBROverlaps(poly, geom)``"
msgstr "``MBROverlaps(poly, geom)``"

msgid "``MbrOverlaps(poly, geom)``"
msgstr "``MbrOverlaps(poly, geom)``"

msgid "``contained``"
msgstr "``contained``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Contained."
"html>`__, MariaDB, MySQL, SpatiaLite, PGRaster (Native)"
msgstr ""

msgid ""
"Tests if the geometry field's bounding box is completely contained by the "
"lookup geometry's bounding box."
msgstr ""

msgid "``poly @ geom``"
msgstr "``poly @ geom``"

msgid "``MBRWithin(poly, geom)``"
msgstr "``MBRWithin(poly, geom)``"

msgid "``MbrWithin(poly, geom)``"
msgstr "``MbrWithin(poly, geom)``"

msgid "``contains``"
msgstr "``contains``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Contains.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""

msgid "Tests if the geometry field spatially contains the lookup geometry."
msgstr ""

msgid "``ST_Contains(poly, geom)``"
msgstr "``ST_Contains(poly, geom)``"

msgid "``SDO_CONTAINS(poly, geom)``"
msgstr "``SDO_CONTAINS(poly, geom)``"

msgid "``Contains(poly, geom)``"
msgstr "``Contains(poly, geom)``"

msgid "``contains_properly``"
msgstr "``contains_properly``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_ContainsProperly."
"html>`__, PGRaster (Bilateral)"
msgstr ""

msgid ""
"Returns true if the lookup geometry intersects the interior of the geometry "
"field, but not the boundary (or exterior)."
msgstr ""

msgid "``ST_ContainsProperly(poly, geom)``"
msgstr "``ST_ContainsProperly(poly, geom)``"

msgid "``coveredby``"
msgstr "``coveredby``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_CoveredBy.html>`__, "
"Oracle, PGRaster (Bilateral), SpatiaLite"
msgstr ""

msgid ""
"Tests if no point in the geometry field is outside the lookup geometry. "
"[#fncovers]_"
msgstr ""

msgid "``ST_CoveredBy(poly, geom)``"
msgstr "``ST_CoveredBy(poly, geom)``"

msgid "``SDO_COVEREDBY(poly, geom)``"
msgstr "``SDO_COVEREDBY(poly, geom)``"

msgid "``CoveredBy(poly, geom)``"
msgstr "``CoveredBy(poly, geom)``"

msgid "``covers``"
msgstr "``covers``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Covers.html>`__, "
"Oracle, PGRaster (Bilateral), SpatiaLite"
msgstr ""

msgid ""
"Tests if no point in the lookup geometry is outside the geometry field. "
"[#fncovers]_"
msgstr ""

msgid "``ST_Covers(poly, geom)``"
msgstr "``ST_Covers(poly, geom)``"

msgid "``SDO_COVERS(poly, geom)``"
msgstr "``SDO_COVERS(poly, geom)``"

msgid "``Covers(poly, geom)``"
msgstr "``Covers(poly, geom)``"

msgid "``crosses``"
msgstr "``crosses``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Crosses.html>`__, "
"MariaDB, MySQL, SpatiaLite, PGRaster (Conversion)"
msgstr ""

msgid "Tests if the geometry field spatially crosses the lookup geometry."
msgstr ""

msgid "``ST_Crosses(poly, geom)``"
msgstr "``ST_Crosses(poly, geom)``"

msgid "``Crosses(poly, geom)``"
msgstr "``Crosses(poly, geom)``"

msgid "``disjoint``"
msgstr "``disjoint``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Disjoint.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""

msgid ""
"Tests if the geometry field is spatially disjoint from the lookup geometry."
msgstr ""

msgid "``ST_Disjoint(poly, geom)``"
msgstr "``ST_Disjoint(poly, geom)``"

msgid "``SDO_GEOM.RELATE(poly, 'DISJOINT', geom, 0.05)``"
msgstr "``SDO_GEOM.RELATE(poly, 'DISJOINT', geom, 0.05)``"

msgid "``Disjoint(poly, geom)``"
msgstr "``Disjoint(poly, geom)``"

msgid "``equals``"
msgstr "``equals``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Equals.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Conversion)"
msgstr ""

msgid "Tests if the geometry field is spatially equal to the lookup geometry."
msgstr ""

msgid "``ST_Equals(poly, geom)``"
msgstr "``ST_Equals(poly, geom)``"

msgid "``SDO_EQUAL(poly, geom)``"
msgstr "``SDO_EQUAL(poly, geom)``"

msgid "``Equals(poly, geom)``"
msgstr "``Equals(poly, geom)``"

msgid "``exact``, ``same_as``"
msgstr "``exact``, ``same_as``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Same."
"html>`__, Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""

msgid ""
"Tests if the geometry field is \"equal\" to the lookup geometry. On Oracle, "
"MySQL, and SpatiaLite, it tests spatial equality, while on PostGIS it tests "
"equality of bounding boxes."
msgstr ""

msgid "``poly ~= geom``"
msgstr "``poly ~= geom``"

msgid "``intersects``"
msgstr "``intersects``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Intersects.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""

msgid "Tests if the geometry field spatially intersects the lookup geometry."
msgstr ""

msgid "``ST_Intersects(poly, geom)``"
msgstr "``ST_Intersects(poly, geom)``"

msgid "``SDO_OVERLAPBDYINTERSECT(poly, geom)``"
msgstr "``SDO_OVERLAPBDYINTERSECT(poly, geom)``"

msgid "``Intersects(poly, geom)``"
msgstr "``Intersects(poly, geom)``"

msgid "``isempty``"
msgstr "``isempty``"

msgid "Tests if the geometry is empty."
msgstr ""

msgid "``isvalid``"
msgstr "``isvalid``"

msgid ""
"*Availability*: MySQL, `PostGIS <https://postgis.net/docs/ST_IsValid."
"html>`__, Oracle, SpatiaLite"
msgstr ""

msgid "Tests if the geometry is valid."
msgstr ""

msgid "MySQL, PostGIS, SpatiaLite"
msgstr "MySQL, PostGIS, SpatiaLite"

msgid "``ST_IsValid(poly)``"
msgstr "``ST_IsValid(poly)``"

msgid "``SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT(poly, 0.05) = 'TRUE'``"
msgstr "``SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT(poly, 0.05) = 'TRUE'``"

msgid "``overlaps``"
msgstr "``overlaps``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Overlaps.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""

msgid "Tests if the geometry field spatially overlaps the lookup geometry."
msgstr ""

msgid "``ST_Overlaps(poly, geom)``"
msgstr "``ST_Overlaps(poly, geom)``"

msgid "``SDO_OVERLAPS(poly, geom)``"
msgstr "``SDO_OVERLAPS(poly, geom)``"

msgid "``Overlaps(poly, geom)``"
msgstr "``Overlaps(poly, geom)``"

msgid "``relate``"
msgstr "``relate``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Relate.html>`__, "
"MariaDB, Oracle, SpatiaLite, PGRaster (Conversion)"
msgstr ""

msgid ""
"Tests if the geometry field is spatially related to the lookup geometry by "
"the values given in the given pattern.  This lookup requires a tuple "
"parameter, ``(geom, pattern)``; the form of ``pattern`` will depend on the "
"spatial backend:"
msgstr ""

msgid "MariaDB, PostGIS, and SpatiaLite"
msgstr ""

msgid ""
"On these spatial backends the intersection pattern is a string comprising "
"nine characters, which  define intersections between  the interior, "
"boundary, and exterior of the geometry field and the lookup geometry. The "
"intersection pattern matrix may only use the following characters: ``1``, "
"``2``, ``T``, ``F``, or ``*``.  This lookup type allows users to \"fine "
"tune\" a specific geometric relationship consistent with the DE-9IM model. "
"[#fnde9im]_"
msgstr ""

msgid "Geometry example::"
msgstr ""

msgid "PostGIS and MariaDB SQL equivalent:"
msgstr ""

msgid "SpatiaLite SQL equivalent:"
msgstr ""

msgid "Raster example::"
msgstr ""

msgid "PostGIS SQL equivalent:"
msgstr ""

msgid ""
"Here the relation pattern is comprised of at least one of the nine relation "
"strings: ``TOUCH``, ``OVERLAPBDYDISJOINT``, ``OVERLAPBDYINTERSECT``, "
"``EQUAL``, ``INSIDE``, ``COVEREDBY``, ``CONTAINS``, ``COVERS``, ``ON``, and "
"``ANYINTERACT``.   Multiple strings may be combined with the logical Boolean "
"operator OR, for example, ``'inside+touch'``. [#fnsdorelate]_  The relation "
"strings are case-insensitive."
msgstr ""

msgid "Oracle SQL equivalent:"
msgstr ""

msgid "``touches``"
msgstr "``touches``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Touches.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite"
msgstr ""

msgid "Tests if the geometry field spatially touches the lookup geometry."
msgstr ""

msgid "``ST_Touches(poly, geom)``"
msgstr "``ST_Touches(poly, geom)``"

msgid "``SDO_TOUCH(poly, geom)``"
msgstr "``SDO_TOUCH(poly, geom)``"

msgid "``Touches(poly, geom)``"
msgstr "``Touches(poly, geom)``"

msgid "``within``"
msgstr "``within``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Within.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""

msgid "Tests if the geometry field is spatially within the lookup geometry."
msgstr ""

msgid "``ST_Within(poly, geom)``"
msgstr "``ST_Within(poly, geom)``"

msgid "``SDO_INSIDE(poly, geom)``"
msgstr "``SDO_INSIDE(poly, geom)``"

msgid "``Within(poly, geom)``"
msgstr "``Within(poly, geom)``"

msgid "``left``"
msgstr "``left``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Left."
"html>`__, PGRaster (Conversion)"
msgstr ""

msgid ""
"Tests if the geometry field's bounding box is strictly to the left of the "
"lookup geometry's bounding box."
msgstr ""

msgid "PostGIS equivalent:"
msgstr ""

msgid "``right``"
msgstr "``right``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Right."
"html>`__, PGRaster (Conversion)"
msgstr ""

msgid ""
"Tests if the geometry field's bounding box is strictly to the right of the "
"lookup geometry's bounding box."
msgstr ""

msgid "``overlaps_left``"
msgstr "``overlaps_left``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overleft."
"html>`__, PGRaster (Bilateral)"
msgstr ""

msgid ""
"Tests if the geometry field's bounding box overlaps or is to the left of the "
"lookup geometry's bounding box."
msgstr ""

msgid "``overlaps_right``"
msgstr "``overlaps_right``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overright."
"html>`__, PGRaster (Bilateral)"
msgstr ""

msgid ""
"Tests if the geometry field's bounding box overlaps or is to the right of "
"the lookup geometry's bounding box."
msgstr ""

msgid "``overlaps_above``"
msgstr "``overlaps_above``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overabove."
"html>`__, PGRaster (Conversion)"
msgstr ""

msgid ""
"Tests if the geometry field's bounding box overlaps or is above the lookup "
"geometry's bounding box."
msgstr ""

msgid "``overlaps_below``"
msgstr "``overlaps_below``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overbelow."
"html>`__, PGRaster (Conversion)"
msgstr ""

msgid ""
"Tests if the geometry field's bounding box overlaps or is below the lookup "
"geometry's bounding box."
msgstr ""

msgid "``strictly_above``"
msgstr "``strictly_above``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Above."
"html>`__, PGRaster (Conversion)"
msgstr ""

msgid ""
"Tests if the geometry field's bounding box is strictly above the lookup "
"geometry's bounding box."
msgstr ""

msgid "``strictly_below``"
msgstr "``strictly_below``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Below."
"html>`__, PGRaster (Conversion)"
msgstr ""

msgid ""
"Tests if the geometry field's bounding box is strictly below the lookup "
"geometry's bounding box."
msgstr ""

msgid ""
"*Availability*: PostGIS, Oracle, MariaDB, MySQL, SpatiaLite, PGRaster "
"(Native)"
msgstr ""

msgid ""
"For an overview on performing distance queries, please refer to the :ref:"
"`distance queries introduction <distance-queries>`."
msgstr ""

msgid "Distance lookups take the following form:"
msgstr ""

msgid ""
"The value passed into a distance lookup is a tuple; the first two values are "
"mandatory, and are the geometry to calculate distances to, and a distance "
"value (either a number in units of the field, a :class:`~django.contrib.gis."
"measure.Distance` object, or a :doc:`query expression </ref/models/"
"expressions>`). To pass a band index to the lookup, use a 3-tuple where the "
"second entry is the band index."
msgstr ""

msgid ""
"On every distance lookup except :lookup:`dwithin`, an optional element, "
"``'spheroid'``, may be included to use the more accurate spheroid distance "
"calculation functions on fields with a geodetic coordinate system."
msgstr ""

msgid ""
"On PostgreSQL, the ``'spheroid'`` option uses `ST_DistanceSpheroid <https://"
"postgis.net/docs/ST_Distance_Spheroid.html>`__ instead of `ST_DistanceSphere "
"<https://postgis.net/docs/ST_DistanceSphere.html>`__. The simpler "
"`ST_Distance <https://postgis.net/docs/ST_Distance.html>`__ function is used "
"with projected coordinate systems. Rasters are converted to geometries for "
"spheroid based lookups."
msgstr ""

msgid "``distance_gt``"
msgstr "``distance_gt``"

msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is greater than the given distance value."
msgstr ""

msgid "``ST_Distance/ST_Distance_Sphere(poly, geom) > 5``"
msgstr "``ST_Distance/ST_Distance_Sphere(poly, geom) > 5``"

msgid "``ST_Distance(poly, geom) > 5``"
msgstr "``ST_Distance(poly, geom) > 5``"

msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) > 5``"
msgstr "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) > 5``"

msgid "``Distance(poly, geom) > 5``"
msgstr "``Distance(poly, geom) > 5``"

msgid "``distance_gte``"
msgstr "``distance_gte``"

msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is greater than or equal to the given distance value."
msgstr ""

msgid "``ST_Distance/ST_Distance_Sphere(poly, geom) >= 5``"
msgstr "``ST_Distance/ST_Distance_Sphere(poly, geom) >= 5``"

msgid "``ST_Distance(poly, geom) >= 5``"
msgstr "``ST_Distance(poly, geom) >= 5``"

msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) >= 5``"
msgstr "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) >= 5``"

msgid "``Distance(poly, geom) >= 5``"
msgstr "``Distance(poly, geom) >= 5``"

msgid "``distance_lt``"
msgstr "``distance_lt``"

msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is less than the given distance value."
msgstr ""

msgid "``ST_Distance/ST_Distance_Sphere(poly, geom) < 5``"
msgstr "``ST_Distance/ST_Distance_Sphere(poly, geom) < 5``"

msgid "``ST_Distance(poly, geom) < 5``"
msgstr "``ST_Distance(poly, geom) < 5``"

msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) < 5``"
msgstr "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) < 5``"

msgid "``Distance(poly, geom) < 5``"
msgstr "``Distance(poly, geom) < 5``"

msgid "``distance_lte``"
msgstr "``distance_lte``"

msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is less than or equal to the given distance value."
msgstr ""

msgid "``ST_Distance/ST_Distance_Sphere(poly, geom) <= 5``"
msgstr "``ST_Distance/ST_Distance_Sphere(poly, geom) <= 5``"

msgid "``ST_Distance(poly, geom) <= 5``"
msgstr "``ST_Distance(poly, geom) <= 5``"

msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) <= 5``"
msgstr "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) <= 5``"

msgid "``Distance(poly, geom) <= 5``"
msgstr "``Distance(poly, geom) <= 5``"

msgid "``dwithin``"
msgstr "``dwithin``"

msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry are within the given distance from one another. Note that you can "
"only provide :class:`~django.contrib.gis.measure.Distance` objects if the "
"targeted geometries are in a projected system. For geographic geometries, "
"you should use units of the geometry field (e.g. degrees for ``WGS84``) ."
msgstr ""

msgid "``ST_DWithin(poly, geom, 5)``"
msgstr "``ST_DWithin(poly, geom, 5)``"

msgid "``SDO_WITHIN_DISTANCE(poly, geom, 5)``"
msgstr "``SDO_WITHIN_DISTANCE(poly, geom, 5)``"

msgid "``PtDistWithin(poly, geom, 5)``"
msgstr "``PtDistWithin(poly, geom, 5)``"

msgid ""
"Django provides some GIS-specific aggregate functions. For details on how to "
"use these aggregate functions, see :doc:`the topic guide on aggregation </"
"topics/db/aggregation>`."
msgstr ""

msgid "``tolerance``"
msgstr "``tolerance``"

msgid ""
"This keyword is for Oracle only.  It is for the tolerance value used by the "
"``SDOAGGRTYPE`` procedure; the  `Oracle documentation`__ has more details."
msgstr ""

msgid "``Collect``"
msgstr "``Collect``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Collect.html>`__, "
"SpatiaLite"
msgstr ""

msgid ""
"Returns a ``GEOMETRYCOLLECTION`` or a ``MULTI`` geometry object from the "
"geometry column. This is analogous to a simplified version of the :class:"
"`Union` aggregate, except it can be several orders of magnitude faster than "
"performing a union because it rolls up geometries into a collection or multi "
"object, not caring about dissolving boundaries."
msgstr ""

msgid "``Extent``"
msgstr "``Extent``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Extent.html>`__, "
"Oracle, SpatiaLite"
msgstr ""

msgid ""
"Returns the extent of all ``geo_field`` in the ``QuerySet`` as a four-tuple, "
"comprising the lower left coordinate and the upper right coordinate."
msgstr ""

msgid "``Extent3D``"
msgstr "``Extent3D``"

msgid "*Availability*: `PostGIS <https://postgis.net/docs/ST_3DExtent.html>`__"
msgstr ""

msgid ""
"Returns the 3D extent of all ``geo_field`` in the ``QuerySet`` as a six-"
"tuple, comprising the lower left coordinate and upper right coordinate (each "
"with x, y, and z coordinates)."
msgstr ""

msgid "``MakeLine``"
msgstr "``MakeLine``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_MakeLine.html>`__, "
"SpatiaLite"
msgstr ""

msgid ""
"Returns a ``LineString`` constructed from the point field geometries in the "
"``QuerySet``. Currently, ordering the queryset has no effect."
msgstr ""

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Union.html>`__, "
"Oracle, SpatiaLite"
msgstr ""

msgid ""
"This method returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object "
"comprising the union of every geometry in the queryset. Please note that use "
"of ``Union`` is processor intensive and may take a significant amount of "
"time on large querysets."
msgstr ""

msgid ""
"If the computation time for using this method is too expensive, consider "
"using :class:`Collect` instead."
msgstr ""

msgid ""
"*See* `OpenGIS Simple Feature Specification For SQL <https://portal.ogc.org/"
"files/?artifact_id=829>`_, at Ch. 2.1.13.2, p. 2-13 (The Dimensionally "
"Extended Nine-Intersection Model)."
msgstr ""

msgid ""
"*See* `SDO_RELATE documentation <https://docs.oracle.com/en/ database/oracle/"
"oracle-database/18/spatl/spatial-operators-reference.html# GUID-97C17C18-"
"F05E-49B4-BE11-E89B972E2A02>`_, from the Oracle Spatial and Graph "
"Developer's Guide."
msgstr ""

msgid ""
"For an explanation of this routine, read `Quirks of the \"Contains\" Spatial "
"Predicate <https://lin-ear-th-inking.blogspot.com/2007/06/subtleties-of-ogc-"
"covers-spatial.html>`_ by Martin Davis (a PostGIS developer)."
msgstr ""

msgid "GEOS API"
msgstr ""

msgid "Background"
msgstr ""

msgid "What is GEOS?"
msgstr ""

msgid ""
"`GEOS`__ stands for **Geometry Engine - Open Source**, and is a C++ library, "
"ported from the  `Java Topology Suite`__.  GEOS implements the OpenGIS "
"`Simple Features for SQL`__ spatial predicate functions and spatial "
"operators. GEOS, now an OSGeo project, was initially developed and "
"maintained by `Refractions Research`__ of Victoria, Canada."
msgstr ""

msgid "Features"
msgstr ""

msgid ""
"GeoDjango implements a high-level Python wrapper for the GEOS library, its "
"features include:"
msgstr ""

msgid ""
"A BSD-licensed interface to the GEOS geometry routines, implemented purely "
"in Python using ``ctypes``."
msgstr ""

msgid ""
"Loosely-coupled to GeoDjango.  For example, :class:`GEOSGeometry` objects "
"may be used outside of a Django project/application.  In other words, no "
"need to have :envvar:`DJANGO_SETTINGS_MODULE` set or use a database, etc."
msgstr ""

msgid "Mutability: :class:`GEOSGeometry` objects may be modified."
msgstr ""

msgid ""
"Cross-platform and tested; compatible with Windows, Linux, Solaris, and "
"macOS platforms."
msgstr ""

msgid "Tutorial"
msgstr "教程"

msgid ""
"This section contains a brief introduction and tutorial to using :class:"
"`GEOSGeometry` objects."
msgstr ""

msgid "Creating a Geometry"
msgstr ""

msgid ""
":class:`GEOSGeometry` objects may be created in a few ways.  The first is to "
"simply instantiate the object on some spatial input -- the following are "
"examples of creating the same geometry from WKT, HEX, WKB, and GeoJSON:"
msgstr ""

msgid ""
"Another option is to use the constructor for the specific geometry type that "
"you wish to create.  For example, a :class:`Point` object may be created by "
"passing in the X and Y coordinates into its constructor:"
msgstr ""

msgid "All these constructors take the keyword argument ``srid``. For example:"
msgstr ""

msgid ""
"Finally, there is the :func:`fromfile` factory method which returns a :class:"
"`GEOSGeometry` object from a file:"
msgstr ""

msgid "My logs are filled with GEOS-related errors"
msgstr ""

msgid ""
"You find many ``TypeError`` or ``AttributeError`` exceptions filling your "
"web server's log files. This generally means that you are creating GEOS "
"objects at the top level of some of your Python modules. Then, due to a race "
"condition in the garbage collector, your module is garbage collected before "
"the GEOS object. To prevent this, create :class:`GEOSGeometry` objects "
"inside the local scope of your functions/methods."
msgstr ""

msgid "Geometries are Pythonic"
msgstr ""

msgid ""
":class:`GEOSGeometry` objects are 'Pythonic', in other words components may "
"be accessed, modified, and iterated over using standard Python conventions. "
"For example, you can iterate over the coordinates in a :class:`Point`:"
msgstr ""

msgid ""
"With any geometry object, the :attr:`GEOSGeometry.coords` property may be "
"used to get the geometry coordinates as a Python tuple:"
msgstr ""

msgid ""
"You can get/set geometry components using standard Python indexing "
"techniques.  However, what is returned depends on the geometry type of the "
"object.  For example, indexing on a :class:`LineString` returns a coordinate "
"tuple:"
msgstr ""

msgid ""
"Whereas indexing on a :class:`Polygon` will return the ring (a :class:"
"`LinearRing` object) corresponding to the index:"
msgstr ""

msgid ""
"In addition, coordinates/components of the geometry may added or modified, "
"just like a Python list:"
msgstr ""

msgid "Geometries support set-like operators:"
msgstr ""

msgid "Equality operator doesn't check spatial equality"
msgstr ""

msgid ""
"The :class:`~GEOSGeometry` equality operator uses :meth:`~GEOSGeometry."
"equals_exact`, not :meth:`~GEOSGeometry.equals`, i.e. it requires the "
"compared geometries to have the same coordinates in the same positions with "
"the same SRIDs:"
msgstr ""

msgid "Geometry Objects"
msgstr ""

msgid "``GEOSGeometry``"
msgstr "``GEOSGeometry``"

msgid "Geometry input value (string or :class:`memoryview`)"
msgstr ""

msgid "spatial reference identifier"
msgstr ""

msgid ""
"This is the base class for all GEOS geometry objects.  It initializes on the "
"given ``geo_input`` argument, and then assumes the proper geometry subclass "
"(e.g., ``GEOSGeometry('POINT(1 1)')`` will create a :class:`Point` object)."
msgstr ""

msgid ""
"The ``srid`` parameter, if given, is set as the SRID of the created geometry "
"if ``geo_input`` doesn't have an SRID. If different SRIDs are provided "
"through the ``geo_input`` and ``srid`` parameters, ``ValueError`` is raised:"
msgstr ""

msgid ""
"The following input formats, along with their corresponding Python types, "
"are accepted:"
msgstr ""

msgid "Format"
msgstr ""

msgid "Input Type"
msgstr ""

msgid "WKT / EWKT"
msgstr ""

msgid "``str``"
msgstr "``str``"

msgid "HEX / HEXEWKB"
msgstr ""

msgid "WKB / EWKB"
msgstr ""

msgid "``memoryview``"
msgstr ""

msgid ":rfc:`GeoJSON <7946>`"
msgstr ":rfc:`GeoJSON <7946>`"

msgid ""
"For the GeoJSON format, the SRID is set based on the ``crs`` member. If "
"``crs`` isn't provided, the SRID defaults to 4326."
msgstr ""

msgid "Constructs a :class:`GEOSGeometry` from the given GML string."
msgstr ""

msgid "Properties"
msgstr ""

msgid "Returns the coordinates of the geometry as a tuple."
msgstr ""

msgid "Returns the dimension of the geometry:"
msgstr ""

msgid "``0`` for :class:`Point`\\s and :class:`MultiPoint`\\s"
msgstr ""

msgid "``1`` for :class:`LineString`\\s and :class:`MultiLineString`\\s"
msgstr ""

msgid "``2`` for :class:`Polygon`\\s and :class:`MultiPolygon`\\s"
msgstr ""

msgid "``-1`` for empty :class:`GeometryCollection`\\s"
msgstr ""

msgid ""
"the maximum dimension of its elements for non-empty :class:"
"`GeometryCollection`\\s"
msgstr ""

msgid "Returns whether or not the set of points in the geometry is empty."
msgstr ""

msgid "Returns a string corresponding to the type of geometry.  For example:"
msgstr ""

msgid ""
"Returns the GEOS geometry type identification number.  The following table "
"shows the value for each geometry type:"
msgstr ""

msgid "Geometry"
msgstr ""

msgid "ID"
msgstr "ID"

msgid ":class:`Point`"
msgstr ":class:`Point`"

msgid "0"
msgstr "0"

msgid ":class:`LineString`"
msgstr ":class:`LineString`"

msgid ":class:`LinearRing`"
msgstr ":class:`LinearRing`"

msgid ":class:`Polygon`"
msgstr ":class:`Polygon`"

msgid ":class:`MultiPoint`"
msgstr ":class:`MultiPoint`"

msgid ":class:`MultiLineString`"
msgstr ":class:`MultiLineString`"

msgid ":class:`MultiPolygon`"
msgstr ":class:`MultiPolygon`"

msgid ":class:`GeometryCollection`"
msgstr ":class:`GeometryCollection`"

msgid "Returns the number of coordinates in the geometry."
msgstr ""

msgid ""
"Returns the number of geometries in this geometry.  In other words, will "
"return 1 on anything but geometry collections."
msgstr ""

msgid "Returns a boolean indicating whether the geometry is three-dimensional."
msgstr ""

msgid "Returns a boolean indicating whether the geometry is a ``LinearRing``."
msgstr ""

msgid ""
"Returns a boolean indicating whether the geometry is 'simple'. A geometry is "
"simple if and only if it does not intersect itself (except at boundary "
"points).  For example, a :class:`LineString` object is not simple if it "
"intersects itself. Thus, :class:`LinearRing` and :class:`Polygon` objects "
"are always simple because they do cannot intersect themselves, by definition."
msgstr ""

msgid "Returns a boolean indicating whether the geometry is valid."
msgstr ""

msgid "Returns a string describing the reason why a geometry is invalid."
msgstr ""

msgid ""
"Property that may be used to retrieve or set the SRID associated with the "
"geometry.  For example:"
msgstr ""

msgid "Output Properties"
msgstr ""

msgid ""
"The properties in this section export the :class:`GEOSGeometry` object into "
"a different.  This output may be in the form of a string, buffer, or even "
"another object."
msgstr ""

msgid ""
"Returns the \"extended\" Well-Known Text of the geometry.  This "
"representation is specific to PostGIS and is a superset of the OGC WKT "
"standard. [#fnogc]_ Essentially the SRID is prepended to the WKT "
"representation, for example ``SRID=4326;POINT(5 23)``."
msgstr ""

msgid ""
"The output from this property does not include the 3dm, 3dz, and 4d "
"information that PostGIS supports in its EWKT representations."
msgstr ""

msgid ""
"Returns the WKB of this Geometry in hexadecimal form.  Please note that the "
"SRID value is not included in this representation because it is not a part "
"of the OGC specification (use the :attr:`GEOSGeometry.hexewkb` property "
"instead)."
msgstr ""

msgid ""
"Returns the EWKB of this Geometry in hexadecimal form.  This is an extension "
"of the WKB specification that includes the SRID value that are a part of "
"this geometry."
msgstr ""

msgid ""
"Returns the GeoJSON representation of the geometry. Note that the result is "
"not a complete GeoJSON structure but only the ``geometry`` key content of a "
"GeoJSON structure. See also :doc:`/ref/contrib/gis/serializers`."
msgstr ""

msgid "Alias for :attr:`GEOSGeometry.json`."
msgstr ""

msgid ""
"Returns a `KML`__ (Keyhole Markup Language) representation of the geometry.  "
"This should only be used for geometries with an SRID of 4326 (WGS84), but "
"this restriction is not enforced."
msgstr ""

msgid ""
"Returns an :class:`~django.contrib.gis.gdal.OGRGeometry` object "
"corresponding to the GEOS geometry."
msgstr ""

msgid ""
"Returns the WKB (Well-Known Binary) representation of this Geometry as a "
"Python buffer.  SRID value is not included, use the :attr:`GEOSGeometry."
"ewkb` property instead."
msgstr ""

msgid ""
"Return the EWKB representation of this Geometry as a Python buffer. This is "
"an extension of the WKB specification that includes any SRID value that are "
"a part of this geometry."
msgstr ""

msgid "Returns the Well-Known Text of the geometry (an OGC standard)."
msgstr ""

msgid "Spatial Predicate Methods"
msgstr ""

msgid ""
"All of the following spatial predicate methods take another :class:"
"`GEOSGeometry` instance (``other``) as a parameter, and return a boolean."
msgstr ""

msgid ""
"Returns ``True`` if :meth:`other.within(this) <GEOSGeometry.within>` returns "
"``True``."
msgstr ""

msgid "Returns ``True`` if this geometry covers the specified geometry."
msgstr ""

msgid "The ``covers`` predicate has the following equivalent definitions:"
msgstr ""

msgid "Every point of the other geometry is a point of this geometry."
msgstr ""

msgid ""
"The `DE-9IM`_ Intersection Matrix for the two geometries is ``T*****FF*``, "
"``*T****FF*``, ``***T**FF*``, or ``****T*FF*``."
msgstr ""

msgid "If either geometry is empty, returns ``False``."
msgstr ""

msgid ""
"This predicate is similar to :meth:`GEOSGeometry.contains`, but is more "
"inclusive (i.e. returns ``True`` for more cases). In particular, unlike :"
"meth:`~GEOSGeometry.contains` it does not distinguish between points in the "
"boundary and in the interior of geometries. For most situations, "
"``covers()`` should be preferred to :meth:`~GEOSGeometry.contains`. As an "
"added benefit, ``covers()`` is more amenable to optimization and hence "
"should outperform :meth:`~GEOSGeometry.contains`."
msgstr ""

msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two Geometries is "
"``T*T******`` (for a point and a curve,a point and an area or a line and an "
"area) ``0********`` (for two curves)."
msgstr ""

msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is "
"``FF*FF****``."
msgstr ""

msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is "
"``T*F**FFF*``."
msgstr ""

msgid ""
"Returns true if the two geometries are exactly equal, up to a specified "
"tolerance.  The ``tolerance`` value should be a floating point number "
"representing the error tolerance in the comparison, e.g., ``poly1."
"equals_exact(poly2, 0.001)`` will compare equality to within one thousandth "
"of a unit."
msgstr ""

msgid "Returns ``True`` if :meth:`GEOSGeometry.disjoint` is ``False``."
msgstr ""

msgid ""
"Returns true if the DE-9IM intersection matrix for the two geometries is "
"``T*T***T**`` (for two points or two surfaces) ``1*T***T**`` (for two "
"curves)."
msgstr ""

msgid ""
"Returns ``True`` if the elements in the DE-9IM intersection matrix for this "
"geometry and the other matches the given ``pattern`` -- a string of nine "
"characters from the alphabet: {``T``, ``F``, ``*``, ``0``}."
msgstr ""

msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is "
"``FT*******``, ``F**T*****`` or ``F***T****``."
msgstr ""

msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is "
"``T*F**F***``."
msgstr ""

msgid "Topological Methods"
msgstr ""

msgid ""
"Returns a :class:`GEOSGeometry` that represents all points whose distance "
"from this geometry is less than or equal to the given ``width``. The "
"optional ``quadsegs`` keyword sets the number of segments used to "
"approximate a quarter circle (defaults is 8)."
msgstr ""

msgid "Same as :meth:`buffer`, but allows customizing the style of the buffer."
msgstr ""

msgid ""
"``end_cap_style`` can be round (``1``), flat (``2``), or square (``3``)."
msgstr ""

msgid "``join_style`` can be round (``1``), mitre (``2``), or bevel (``3``)."
msgstr ""

msgid "Mitre ratio limit (``mitre_limit``) only affects mitered join style."
msgstr ""

msgid ""
"Returns a :class:`GEOSGeometry` representing the points making up this "
"geometry that do not make up other."
msgstr ""

msgid ""
"Given a distance (float), returns the point (or closest point) within the "
"geometry (:class:`LineString` or :class:`MultiLineString`) at that distance. "
"The normalized version takes the distance as a float between 0 (origin) and "
"1 (endpoint)."
msgstr ""

msgid "Reverse of :meth:`GEOSGeometry.project`."
msgstr ""

msgid ""
"Returns a :class:`GEOSGeometry` representing the points shared by this "
"geometry and other."
msgstr ""

msgid ""
"Returns the distance (float) from the origin of the geometry (:class:"
"`LineString` or :class:`MultiLineString`) to the point projected on the "
"geometry (that is to a point of the line the closest to the given point). "
"The normalized version returns the distance as a float between 0 (origin) "
"and 1 (endpoint)."
msgstr ""

msgid "Reverse of :meth:`GEOSGeometry.interpolate`."
msgstr ""

msgid ""
"Returns the DE-9IM intersection matrix (a string) representing the "
"topological relationship between this geometry and the other."
msgstr ""

msgid ""
"Returns a new :class:`GEOSGeometry`, simplified to the specified tolerance "
"using the Douglas-Peucker algorithm. A higher tolerance value implies fewer "
"points in the output. If no tolerance is provided, it defaults to 0."
msgstr ""

msgid ""
"By default, this function does not preserve topology. For example, :class:"
"`Polygon` objects can be split, be collapsed into lines, or disappear. :"
"class:`Polygon` holes can be created or disappear, and lines may cross. By "
"specifying ``preserve_topology=True``, the result will have the same "
"dimension and number of components as the input; this is significantly "
"slower, however."
msgstr ""

msgid ""
"Returns a :class:`GEOSGeometry` combining the points in this geometry not in "
"other, and the points in other not in this geometry."
msgstr ""

msgid ""
"Returns a :class:`GEOSGeometry` representing all the points in this geometry "
"and the other."
msgstr ""

msgid "Topological Properties"
msgstr ""

msgid "Returns the boundary as a newly allocated Geometry object."
msgstr ""

msgid ""
"Returns a :class:`Point` object representing the geometric center of the "
"geometry.  The point is not guaranteed to be on the interior of the geometry."
msgstr ""

msgid ""
"Returns the smallest :class:`Polygon` that contains all the points in the "
"geometry."
msgstr ""

msgid ""
"Returns a :class:`Polygon` that represents the bounding envelope of this "
"geometry. Note that it can also return a :class:`Point` if the input "
"geometry is a point."
msgstr ""

msgid ""
"Computes and returns a :class:`Point` guaranteed to be on the interior of "
"this geometry."
msgstr ""

msgid "Computes the union of all the elements of this geometry."
msgstr ""

msgid "The result obeys the following contract:"
msgstr ""

msgid ""
"Unioning a set of :class:`LineString`\\s has the effect of fully noding and "
"dissolving the linework."
msgstr ""

msgid ""
"Unioning a set of :class:`Polygon`\\s will always return a :class:`Polygon` "
"or :class:`MultiPolygon` geometry (unlike :meth:`GEOSGeometry.union`, which "
"may return geometries of lower dimension if a topology collapse occurs)."
msgstr ""

msgid "Other Properties & Methods"
msgstr ""

msgid "This property returns the area of the Geometry."
msgstr ""

msgid ""
"This property returns the extent of this geometry as a 4-tuple, consisting "
"of ``(xmin, ymin, xmax, ymax)``."
msgstr ""

msgid ""
"This method returns a :class:`GEOSGeometry` that is a clone of the original."
msgstr ""

msgid ""
"Returns the distance between the closest points on this geometry and the "
"given ``geom`` (another :class:`GEOSGeometry` object)."
msgstr ""

msgid ""
"GEOS distance calculations are  linear -- in other words, GEOS does not "
"perform a spherical calculation even if the SRID specifies a geographic "
"coordinate system."
msgstr ""

msgid ""
"Returns the length of this geometry (e.g., 0 for a :class:`Point`, the "
"length of a :class:`LineString`, or the circumference of a :class:`Polygon`)."
msgstr ""

msgid ""
"Returns a GEOS ``PreparedGeometry`` for the contents of this geometry. "
"``PreparedGeometry`` objects are optimized for the contains, intersects, "
"covers, crosses, disjoint, overlaps, touches and within operations. Refer to "
"the :ref:`prepared-geometries` documentation for more information."
msgstr ""

msgid ""
"Returns a :class:`~django.contrib.gis.gdal.SpatialReference` object "
"corresponding to the SRID of the geometry or ``None``."
msgstr ""

msgid ""
"Transforms the geometry according to the given coordinate transformation "
"parameter (``ct``), which may be an integer SRID, spatial reference WKT "
"string, a PROJ string, a :class:`~django.contrib.gis.gdal.SpatialReference` "
"object, or a :class:`~django.contrib.gis.gdal.CoordTransform` object. By "
"default, the geometry is transformed in-place and nothing is returned. "
"However if the ``clone`` keyword is set, then the geometry is not modified "
"and a transformed clone of the geometry is returned instead."
msgstr ""

msgid ""
"Raises :class:`~django.contrib.gis.geos.GEOSException` if GDAL is not "
"available or if the geometry's SRID is ``None`` or less than 0. It doesn't "
"impose any constraints on the geometry's SRID if called with a :class:"
"`~django.contrib.gis.gdal.CoordTransform` object."
msgstr ""

msgid ""
"Returns a valid :class:`GEOSGeometry` equivalent, trying not to lose any of "
"the input vertices. If the geometry is already valid, it is returned "
"untouched. This is similar to the :class:`~django.contrib.gis.db.models."
"functions.MakeValid` database function. Requires GEOS 3.8."
msgstr ""

msgid ""
"Converts this geometry to canonical form. If the ``clone`` keyword is set, "
"then the geometry is not modified and a normalized clone of the geometry is "
"returned instead:"
msgstr ""

msgid "The ``clone`` argument was added."
msgstr ""

msgid "``Point``"
msgstr "``Point``"

msgid ""
"``Point`` objects are instantiated using arguments that represent the "
"component coordinates of the point or with a single sequence coordinates. "
"For example, the following are equivalent:"
msgstr ""

msgid ""
"Empty ``Point`` objects may be instantiated by passing no arguments or an "
"empty sequence. The following are equivalent:"
msgstr ""

msgid "``LineString``"
msgstr "``LineString``"

msgid ""
"``LineString`` objects are instantiated using arguments that are either a "
"sequence of coordinates or :class:`Point` objects. For example, the "
"following are equivalent:"
msgstr ""

msgid ""
"In addition, ``LineString`` objects may also be created by passing in a "
"single sequence of coordinate or :class:`Point` objects:"
msgstr ""

msgid ""
"Empty ``LineString`` objects may be instantiated by passing no arguments or "
"an empty sequence. The following are equivalent:"
msgstr ""

msgid "Returns whether or not this ``LineString`` is closed."
msgstr ""

msgid "``LinearRing``"
msgstr "``LinearRing``"

msgid ""
"``LinearRing`` objects are constructed in the exact same way as :class:"
"`LineString` objects, however the coordinates must be *closed*, in other "
"words, the first coordinates must be the same as the last coordinates. For "
"example:"
msgstr ""

msgid ""
"Notice that ``(0, 0)`` is the first and last coordinate -- if they were not "
"equal, an error would be raised."
msgstr ""

msgid "Returns whether this ``LinearRing`` is counterclockwise."
msgstr ""

msgid "``Polygon``"
msgstr "``Polygon``"

msgid ""
"``Polygon`` objects may be instantiated by passing in parameters that "
"represent the rings of the polygon.  The parameters must either be :class:"
"`LinearRing` instances, or a sequence that may be used to construct a :class:"
"`LinearRing`:"
msgstr ""

msgid ""
"Returns a polygon object from the given bounding-box, a 4-tuple comprising "
"``(xmin, ymin, xmax, ymax)``."
msgstr ""

msgid "Returns the number of interior rings in this geometry."
msgstr ""

msgid "Comparing Polygons"
msgstr ""

msgid ""
"Note that it is possible to compare ``Polygon`` objects directly with ``<`` "
"or ``>``, but as the comparison is made through Polygon's :class:"
"`LineString`, it does not mean much (but is consistent and quick). You can "
"always force the comparison with the :attr:`~GEOSGeometry.area` property:"
msgstr ""

msgid "Geometry Collections"
msgstr ""

msgid "``MultiPoint``"
msgstr "``MultiPoint``"

msgid ""
"``MultiPoint`` objects may be instantiated by passing in :class:`Point` "
"objects as arguments, or a single sequence of :class:`Point` objects:"
msgstr ""

msgid "``MultiLineString``"
msgstr "``MultiLineString``"

msgid ""
"``MultiLineString`` objects may be instantiated by passing in :class:"
"`LineString` objects as arguments, or a single sequence of :class:"
"`LineString` objects:"
msgstr ""

msgid ""
"Returns a :class:`LineString` representing the line merge of all the "
"components in this ``MultiLineString``."
msgstr ""

msgid "Returns ``True`` if and only if all elements are closed."
msgstr ""

msgid "``MultiPolygon``"
msgstr "``MultiPolygon``"

msgid ""
"``MultiPolygon`` objects may be instantiated by passing :class:`Polygon` "
"objects as arguments, or a single sequence of :class:`Polygon` objects:"
msgstr ""

msgid "``GeometryCollection``"
msgstr "``GeometryCollection``"

msgid ""
"``GeometryCollection`` objects may be instantiated by passing in other :"
"class:`GEOSGeometry` as arguments, or a single sequence of :class:"
"`GEOSGeometry` objects:"
msgstr ""

msgid "Prepared Geometries"
msgstr ""

msgid ""
"In order to obtain a prepared geometry, access the :attr:`GEOSGeometry."
"prepared` property.  Once you have a ``PreparedGeometry`` instance its "
"spatial predicate methods, listed below, may be used with other "
"``GEOSGeometry`` objects.  An operation with a prepared geometry can be "
"orders of magnitude faster -- the more complex the geometry that is "
"prepared, the larger the speedup in the operation.  For more information, "
"please consult the `GEOS wiki page on prepared geometries <https://trac."
"osgeo.org/geos/wiki/PreparedGeometry>`_."
msgstr ""

msgid "``PreparedGeometry``"
msgstr "``PreparedGeometry``"

msgid ""
"All methods on ``PreparedGeometry`` take an ``other`` argument, which must "
"be a :class:`GEOSGeometry` instance."
msgstr ""

msgid "Geometry Factories"
msgstr ""

msgid "input file that contains spatial data"
msgstr ""

msgid "Return type"
msgstr ""

msgid "a :class:`GEOSGeometry` corresponding to the spatial data in the file"
msgstr ""

msgid "string that contains spatial data"
msgstr ""

msgid "a :class:`GEOSGeometry` corresponding to the spatial data in the string"
msgstr ""

msgid ""
"``fromstr(string, srid)`` is equivalent to :class:`GEOSGeometry(string, "
"srid) <GEOSGeometry>`."
msgstr ""

msgid "I/O Objects"
msgstr ""

msgid "Reader Objects"
msgstr ""

msgid ""
"The reader I/O classes return a :class:`GEOSGeometry` instance from the WKB "
"and/or WKT input given to their ``read(geom)`` method."
msgstr ""

msgid "Writer Objects"
msgstr ""

msgid ""
"All writer objects have a ``write(geom)`` method that returns either the WKB "
"or WKT of the given geometry.  In addition, :class:`WKBWriter` objects also "
"have properties that may be used to change the byte order, and or include "
"the SRID value (in other words, EWKB)."
msgstr ""

msgid ""
"``WKBWriter`` provides the most control over its output.  By default it "
"returns OGC-compliant WKB when its ``write`` method is called.  However, it "
"has properties that allow for the creation of EWKB, a superset of the WKB "
"standard that includes additional information. See the :attr:`WKBWriter."
"outdim` documentation for more details about the ``dim`` argument."
msgstr ""

msgid ""
"Returns the WKB of the given geometry as a Python ``buffer`` object. Example:"
msgstr ""

msgid "Returns WKB of the geometry in hexadecimal.  Example:"
msgstr ""

msgid ""
"This property may be set to change the byte-order of the geometry "
"representation."
msgstr ""

msgid "Byteorder Value"
msgstr ""

msgid "Big Endian (e.g., compatible with RISC systems)"
msgstr ""

msgid "Little Endian (e.g., compatible with x86 systems)"
msgstr ""

msgid ""
"This property may be set to change the output dimension of the geometry "
"representation.  In other words, if you have a 3D geometry then set to 3 so "
"that the Z value is included in the WKB."
msgstr ""

msgid "Outdim Value"
msgstr ""

msgid "The default, output 2D WKB."
msgstr ""

msgid "Output 3D WKB."
msgstr ""

msgid ""
"Set this property with a boolean to indicate whether the SRID of the "
"geometry should be included with the WKB representation.  Example:"
msgstr ""

msgid ""
"This class allows outputting the WKT representation of a geometry. See the :"
"attr:`WKBWriter.outdim`, :attr:`trim`, and :attr:`precision` attributes for "
"details about the constructor arguments."
msgstr ""

msgid "Returns the WKT of the given geometry. Example:"
msgstr ""

msgid "See :attr:`WKBWriter.outdim`."
msgstr "查看 :attr:`WKBWriter.outdim` 。"

msgid ""
"This property is used to enable or disable trimming of unnecessary decimals."
msgstr ""

msgid ""
"This property controls the rounding precision of coordinates; if set to "
"``None`` rounding is disabled."
msgstr ""

msgid "``GEOS_LIBRARY_PATH``"
msgstr "``GEOS_LIBRARY_PATH``"

msgid ""
"A string specifying the location of the GEOS C library.  Typically, this "
"setting is only used if the GEOS C library is in a non-standard location (e."
"g., ``/home/bob/lib/libgeos_c.so``)."
msgstr ""

msgid ""
"The setting must be the *full* path to the **C** shared library; in other "
"words you want to use ``libgeos_c.so``, not ``libgeos.so``."
msgstr ""
"这个配置必须是 **C** 共享库的 *完整* 路径；换句话说，你要使用 ``libgeos_c."
"so``，而不是 ``libgeos.so``。"

msgid "The base GEOS exception, indicates a GEOS-related error."
msgstr ""

msgid "GeoDjango"
msgstr "GeoDjango"

msgid ""
"GeoDjango intends to be a world-class geographic web framework. Its goal is "
"to make it as easy as possible to build GIS web applications and harness the "
"power of spatially enabled data."
msgstr ""

msgid "Installing Geospatial libraries"
msgstr "安装地理空间库"

msgid ""
"GeoDjango uses and/or provides interfaces for the following open source "
"geospatial libraries:"
msgstr "GeoDjango 使用和／或提供以下开源地理空间库的接口："

msgid "Program"
msgstr "程序"

msgid "Required"
msgstr "必须的"

msgid "Supported Versions"
msgstr "支持的版本"

msgid ":doc:`GEOS <../geos>`"
msgstr ":doc:`GEOS <../geos>`"

msgid "Geometry Engine Open Source"
msgstr "几何引擎开源"

msgid "Yes"
msgstr "是"

msgid "3.11, 3.10, 3.9, 3.8, 3.7, 3.6"
msgstr ""

msgid "`PROJ`_"
msgstr "`PROJ`_"

msgid "Cartographic Projections library"
msgstr "制图投影库"

msgid "Yes (PostgreSQL and SQLite only)"
msgstr "是（仅 PostgreSQL 和 SQLite）"

msgid "9.x, 8.x, 7.x, 6.x, 5.x"
msgstr ""

msgid ":doc:`GDAL <../gdal>`"
msgstr ":doc:`GDAL <../gdal>`"

msgid "Geospatial Data Abstraction Library"
msgstr "地理空间数据抽象库"

msgid "3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.4, 2.3, 2.2"
msgstr ""

msgid ":doc:`GeoIP <../geoip2>`"
msgstr ":doc:`GeoIP <../geoip2>`"

msgid "IP-based geolocation library"
msgstr "基于 IP 的地理定位库"

msgid "No"
msgstr "否"

msgid "`PostGIS`__"
msgstr "`PostGIS`__"

msgid "Spatial extensions for PostgreSQL"
msgstr "PostgreSQL 的空间扩展"

msgid "Yes (PostgreSQL only)"
msgstr "是（仅 PostgreSQL）"

msgid "3.3, 3.2, 3.1, 3.0, 2.5"
msgstr ""

msgid "`SpatiaLite`__"
msgstr "`SpatiaLite`__"

msgid "Spatial extensions for SQLite"
msgstr "SQLite 的空间扩展"

msgid "Yes (SQLite only)"
msgstr "是（仅 SQLite）"

msgid "5.0, 4.3"
msgstr "5.0, 4.3"

msgid ""
"Note that older or more recent versions of these libraries *may* also work "
"totally fine with GeoDjango. Your mileage may vary."
msgstr ""
"请注意，这些库的老版本或最新版本可能也能与 GeoDjango 完全兼容。你的里程数可能"
"会有所不同。"

msgid ""
"The GeoDjango interfaces to GEOS, GDAL, and GeoIP may be used independently "
"of Django.  In other words, no database or settings file required -- import "
"them as normal from :mod:`django.contrib.gis`."
msgstr ""
"GeoDjango 的 GEOS、GDAL 和 GeoIP 接口可以独立于 Django 使用。 换句话说，不需"
"要数据库或配置文件 —— 像正常的那样从 :mod:`django.contrib.gis` 导入它们。"

msgid ""
"On Debian/Ubuntu, you are advised to install the following packages which "
"will install, directly or by dependency, the required geospatial libraries:"
msgstr ""
"在 Debian／Ubuntu 上，我们建议您安装以下软件包，它们将直接或通过依赖关系安装"
"所需的地理空间库："

msgid ""
"Please also consult platform-specific instructions if you are on :ref:"
"`macos` or :ref:`windows`."
msgstr ""
"如果你使用的是 :ref:`macos` 或 :ref:`windows`，也请参考特定平台的说明。"

msgid "Building from source"
msgstr "从源码构建"

msgid ""
"When installing from source on UNIX and GNU/Linux systems, please follow the "
"installation instructions carefully, and install the libraries in the given "
"order.  If using MySQL or Oracle as the spatial database, only GEOS is "
"required."
msgstr ""
"在 UNIX 和 GNU／Linux 系统上从源码安装时，请仔细按照安装说明，并按照给定的顺"
"序安装库。 如果使用 MySQL 或 Oracle 作为空间数据库，则只需要 GEOS。"

msgid ""
"On Linux platforms, it may be necessary to run the ``ldconfig`` command "
"after installing each library. For example:"
msgstr ""

msgid ""
"macOS users must install `Xcode`_ in order to compile software from source."
msgstr "macOS 用户必须安装 `Xcode`_ 才能从源码编译软件。"

msgid "GEOS"
msgstr "GEOS"

msgid ""
"GEOS is a C++ library for performing geometric operations, and is the "
"default internal geometry representation used by GeoDjango (it's behind the "
"\"lazy\" geometries).  Specifically, the C API library is called (e.g., "
"``libgeos_c.so``) directly from Python using ctypes."
msgstr ""
"GEOS 是一个用于执行几何运算的 C++ 库，是 GeoDjango 默认使用的内部几何表示法"
"（它的背后是 “惰性” 的几何图形）。 具体来说，在 Python 中使用 ctypes 直接调"
"用 C API 库（如 ``libgeos_c.so``）。"

msgid ""
"First, download GEOS from the GEOS website and untar the source archive:"
msgstr ""

msgid ""
"Then step into the GEOS directory, create a ``build`` folder, and step into "
"it:"
msgstr ""

msgid "Then build and install the package:"
msgstr ""

msgid "Can't find GEOS library"
msgstr "找不到 GEOS 库"

msgid "When GeoDjango can't find GEOS, this error is raised:"
msgstr "当 GeoDjango 找不到 GEOS 时，就会出现这个错误："

msgid ""
"The most common solution is to properly configure your :ref:`libsettings` "
"*or* set :ref:`geoslibrarypath` in your settings."
msgstr ""
"最常见的解决方案是正确配置你的 :ref:`libsettings` *或* 在你的配置中设置 :ref:"
"`geoslibrarypath`。"

msgid ""
"If using a binary package of GEOS (e.g., on Ubuntu), you may need to :ref:"
"`binutils`."
msgstr ""
"如果使用 GEOS 的二进制包（例如，在 Ubuntu 上），你可能需要 :ref:`binutils`。"

msgid ""
"If your GEOS library is in a non-standard location, or you don't want to "
"modify the system's library path then the :setting:`GEOS_LIBRARY_PATH` "
"setting may be added to your Django settings file with the full path to the "
"GEOS C library.  For example:"
msgstr ""

msgid ""
"See also :ref:`My logs are filled with GEOS-related errors <geos-exceptions-"
"in-logfile>`."
msgstr ""
"另见 :ref:`我的日志中充满了与 GEOS 有关的错误 <geos-exceptions-in-logfile>`。"

msgid "PROJ"
msgstr "PROJ"

msgid ""
"`PROJ`_ is a library for converting geospatial data to different coordinate "
"reference systems."
msgstr ""

msgid "First, download the PROJ source code:"
msgstr ""

msgid ""
"... and datum shifting files (download ``proj-datumgrid-X.Y.tar.gz`` for "
"PROJ < 7.x) [#]_:"
msgstr ""

msgid ""
"Next, untar the source code archive, and extract the datum shifting files in "
"the ``data`` subdirectory (use ``nad`` subdirectory for PROJ < 6.x). This "
"must be done *prior* to configuration:"
msgstr ""

msgid ""
"For PROJ 9.x and greater, releases only support builds using ``CMake`` (see "
"`PROJ RFC-7`_)."
msgstr ""

msgid ""
"To build with ``CMake`` ensure your system meets the `build requirements`_. "
"Then create a ``build`` folder in the PROJ directory, and step into it:"
msgstr ""

msgid "Finally, configure, make and install PROJ:"
msgstr ""

msgid "GDAL"
msgstr "GDAL"

msgid ""
"`GDAL`__ is an excellent open source geospatial library that has support for "
"reading most vector and raster spatial data formats.  Currently, GeoDjango "
"only supports :doc:`GDAL's vector data <../gdal>` capabilities [#]_. :ref:"
"`geosbuild` and :ref:`proj4` should be installed prior to building GDAL."
msgstr ""
"`GDAL`__ 是一个优秀的开源地理空间库，它支持读取大多数矢量和栅格空间数据格式。"
"目前 GeoDjango 只支持 :doc:`GDAL 的矢量数据 <./gdal>` 的功能 [#]_ 。 在构建 "
"GDAL 之前，应该安装 :ref:`geosbuild` 和 :ref:`proj4`。"

msgid "First download the latest GDAL release version and untar the archive:"
msgstr ""

msgid ""
"For GDAL 3.6.x and greater, releases only support builds using ``CMake``. To "
"build with ``CMake`` create a ``build`` folder in the GDAL directory, and "
"step into it:"
msgstr ""

msgid "Finally, configure, make and install GDAL:"
msgstr ""

msgid ""
"If you have any problems, please see the troubleshooting section below for "
"suggestions and solutions."
msgstr "如果你有任何问题，请参见下面的故障排除部分，以获得建议和解决方案。"

msgid "Can't find GDAL library"
msgstr "找不到 GDAL 库"

msgid ""
"When GeoDjango can't find the GDAL library, configure your :ref:"
"`libsettings` *or* set :ref:`gdallibrarypath` in your settings."
msgstr ""
"当 GeoDjango 找不到 GDAL 库时，在你的配置中设置你的 :ref:`libsettings` *或* :"
"ref:`gdallibrarypath`。"

msgid ""
"If your GDAL library is in a non-standard location, or you don't want to "
"modify the system's library path then the :setting:`GDAL_LIBRARY_PATH` "
"setting may be added to your Django settings file with the full path to the "
"GDAL library.  For example:"
msgstr ""

msgid ""
"The datum shifting files are needed for converting data to and from certain "
"projections. For example, the PROJ string for the `Google projection (900913 "
"or 3857) <https://spatialreference.org/ref/sr-org/6864/prj/>`_ requires the "
"``null`` grid file only included in the extra datum shifting files. It is "
"easier to install the shifting files now, then to have debug a problem "
"caused by their absence later."
msgstr ""

msgid ""
"Specifically, GeoDjango provides support for the `OGR <https://gdal.org/user/"
"vector_data_model.html>`_ library, a component of GDAL."
msgstr ""
"具体来说，GeoDjango 提供了对 `OGR <https://gdal.org/user/vector_data_model."
"html>`_ 库的支持，这是 GDAL 的一个组件。"

msgid "GeoDjango Installation"
msgstr "GeoDjango 安装"

msgid "In general, GeoDjango installation requires:"
msgstr "一般来说，GeoDjango 安装需要："

msgid ":ref:`Python and Django <django>`"
msgstr ":ref:`Python 和 Django <django>`"

msgid ":ref:`spatial_database`"
msgstr ":ref:`spatial_database`"

msgid ":doc:`geolibs`"
msgstr ":doc:`geolibs`"

msgid ""
"Details for each of the requirements and installation instructions are "
"provided in the sections below. In addition, platform-specific instructions "
"are available for:"
msgstr ""
"以下各节提供了每项要求的细节和安装说明。此外，还提供了以下平台的具体说明："

msgid ":ref:`macos`"
msgstr ":ref:`macos`"

msgid ":ref:`windows`"
msgstr ":ref:`windows`"

msgid "Use the Source"
msgstr "使用源码"

msgid ""
"Because GeoDjango takes advantage of the latest in the open source "
"geospatial software technology, recent versions of the libraries are "
"necessary. If binary packages aren't available for your platform, "
"installation from source may be required. When compiling the libraries from "
"source, please follow the directions closely, especially if you're a "
"beginner."
msgstr ""
"因为 GeoDjango 利用了最新的开源地理空间软件技术，所以需要最新版本的库。如果你"
"的平台没有二进制包，可能需要从源码安装。当从源码编译库时，请严格按照说明进"
"行，尤其是当你是初学者时。"

msgid "Requirements"
msgstr "依赖项"

msgid "Python and Django"
msgstr "Python 和 Django"

msgid ""
"Because GeoDjango is included with Django, please refer to Django's :ref:"
"`installation instructions <installing-official-release>` for details on how "
"to install."
msgstr ""
"因为 GeoDjango 是包含在 Django 中的，所以请参考 Django 的 :ref:`安装说明 "
"<installing-official-release>` 来详细了解如何安装。"

msgid "Spatial database"
msgstr "空间数据库"

msgid ""
"PostgreSQL (with PostGIS), MySQL, Oracle, and SQLite (with SpatiaLite) are "
"the spatial databases currently supported."
msgstr ""

msgid ""
"PostGIS is recommended, because it is the most mature and feature-rich open "
"source spatial database."
msgstr "推荐使用 PostGIS，因为它是最成熟、功能最丰富的开源空间数据库。"

msgid ""
"The geospatial libraries required for a GeoDjango installation depends on "
"the spatial database used.  The following lists the library requirements, "
"supported versions, and any notes for each of the supported database "
"backends:"
msgstr ""
"GeoDjango 安装所需的地理空间库取决于所使用的空间数据库。 下面列出了每个支持的"
"数据库后端的库需求、支持的版本和任何注释。"

msgid "Library Requirements"
msgstr "库依赖项"

msgid "Notes"
msgstr "注意"

msgid "PostgreSQL"
msgstr "PostgreSQL"

msgid "GEOS, GDAL, PROJ, PostGIS"
msgstr "GEOS, GDAL, PROJ, PostGIS"

msgid "12+"
msgstr ""

msgid "Requires PostGIS."
msgstr "需要 PostGIS。"

msgid "GEOS, GDAL"
msgstr "GEOS, GDAL"

msgid "8+"
msgstr ""

msgid ":ref:`Limited functionality <mysql-spatial-limitations>`."
msgstr ":ref:`功能受限 <mysql-spatial-limitations>`。"

msgid "19+"
msgstr "19+"

msgid "XE not supported."
msgstr "不支持 XE。"

msgid "SQLite"
msgstr "SQLite"

msgid "GEOS, GDAL, PROJ, SpatiaLite"
msgstr "GEOS, GDAL, PROJ, SpatiaLite"

msgid "3.21.0+"
msgstr ""

msgid "Requires SpatiaLite 4.3+"
msgstr "需要 SpatiaLite 4.3+"

msgid ""
"See also `this comparison matrix`__ on the OSGeo Wiki for PostgreSQL/PostGIS/"
"GEOS/GDAL possible combinations."
msgstr ""
"关于 PostgreSQL／PostGIS／GEOS／GDAL的可能组合，也请参见 OSGeo Wiki 上的 `这"
"个比较矩阵`__ 。"

msgid "Geospatial libraries"
msgstr "地理空间库"

msgid "Database installation"
msgstr "数据库安装"

msgid ":setting:`DATABASES` configuration"
msgstr ":setting:`DATABASES` 配置"

msgid ""
"Set the :setting:`ENGINE <DATABASE-ENGINE>` setting to one of the :ref:"
"`spatial backends <spatial-backends>`."
msgstr ""
"将 :setting:`ENGINE <DATABASE-ENGINE>` 设置为 :ref:`空间后端 <spatial-"
"backends>` 之一。"

msgid "Add ``django.contrib.gis`` to :setting:`INSTALLED_APPS`"
msgstr "添加 ``django.contrib.gis`` 到 :setting:`INSTALLED_APPS`"

msgid ""
"Like other Django contrib applications, you will *only* need to add :mod:"
"`django.contrib.gis` to :setting:`INSTALLED_APPS` in your settings. This is "
"so that the ``gis`` templates can be located -- if not done, then features "
"such as the geographic admin or KML sitemaps will not function properly."
msgstr ""
"和其他 Django contrib 应用一样，你只需要在配置中的 :setting:`INSTALLED_APPS` "
"中添加 :mod:`django.contrib.gis`。这是为了让 ``gis`` 模板能够被定位 —— 如果不"
"这样做，那么诸如地理管理或 KML 网站地图等功能将无法正常运行。"

msgid ""
"If you can't find the solution to your problem here then participate in the "
"community!  You can:"
msgstr "如果你在这里找不到解决问题的方法，那就参与社区吧！你可以："

msgid ""
"Join the ``#django-geo`` IRC channel on Libera.Chat. Please be patient and "
"polite -- while you may not get an immediate response, someone will attempt "
"to answer your question as soon as they see it."
msgstr ""

msgid "Ask your question on the `GeoDjango`__ forum."
msgstr ""

msgid ""
"File a ticket on the `Django trac`__ if you think there's a bug.  Make sure "
"to provide a complete description of the problem, versions used, and specify "
"the component as \"GIS\"."
msgstr ""
"如果你认为有 bug，请在 `Django trac`__ 上提交一个工单。 确保提供完整的问题描"
"述，使用的版本，并指定组件为 “GIS”。"

msgid "Library environment settings"
msgstr "库环境配置"

msgid ""
"By far, the most common problem when installing GeoDjango is that the "
"external shared libraries (e.g., for GEOS and GDAL) cannot be located. [#]_ "
"Typically, the cause of this problem is that the operating system isn't "
"aware of the directory where the libraries built from source were installed."
msgstr ""
"到目前为止，安装 GeoDjango 时最常见的问题是无法找到外部共享库（例如 GEOS 和 "
"GDAL）。[#]_ 通常情况下，造成这个问题的原因是操作系统不知道从源码建立的库的安"
"装目录。"

msgid ""
"In general, the library path may be set on a per-user basis by setting an "
"environment variable, or by configuring the library path for the entire "
"system."
msgstr ""
"一般情况下，库路径可以通过设置环境变量按每个用户来设置，也可以为整个系统配置"
"库路径。"

msgid "``LD_LIBRARY_PATH`` environment variable"
msgstr "``LD_LIBRARY_PATH`` 环境变量"

msgid ""
"A user may set this environment variable to customize the library paths they "
"want to use.  The typical library directory for software built from source "
"is ``/usr/local/lib``.  Thus, ``/usr/local/lib`` needs to be included in the "
"``LD_LIBRARY_PATH`` variable.  For example, the user could place the "
"following in their bash profile:"
msgstr ""

msgid "Setting system library path"
msgstr "设置系统库路径"

msgid ""
"On GNU/Linux systems, there is typically a file in ``/etc/ld.so.conf``, "
"which may include additional paths from files in another directory, such as "
"``/etc/ld.so.conf.d``. As the root user, add the custom library path (like "
"``/usr/local/lib``) on a new line in ``ld.so.conf``.  This is *one* example "
"of how to do so:"
msgstr ""

msgid ""
"For OpenSolaris users, the system library path may be modified using the "
"``crle`` utility.  Run ``crle`` with no options to see the current "
"configuration and use ``crle -l`` to set with the new library path.  Be "
"*very* careful when modifying the system library path:"
msgstr ""

msgid "Install ``binutils``"
msgstr "安装 ``binutils``"

msgid ""
"GeoDjango uses the ``find_library`` function (from the ``ctypes.util`` "
"Python module) to discover libraries.  The ``find_library`` routine uses a "
"program called ``objdump`` (part of the ``binutils`` package) to verify a "
"shared library on GNU/Linux systems.  Thus, if ``binutils`` is not installed "
"on your Linux system then Python's ctypes may not be able to find your "
"library even if your library path is set correctly and geospatial libraries "
"were built perfectly."
msgstr ""
"GeoDjango 使用 ``find_library`` 函数（来自 ``ctypes.util`` Python 模块）来发"
"现库。 ``find_library`` 例程使用一个叫做 ``objdump`` 的程序（``binutils`` 包"
"的一部分）来验证 GNU／Linux 系统的共享库。 因此，如果 ``binutils`` 没有安装在"
"你的 Linux 系统上，那么 Python 的 ctypes 可能无法找到你的库，即使你的库路径设"
"置正确，并且地理空间库建立得很完美。"

msgid ""
"The ``binutils`` package may be installed on Debian and Ubuntu systems using "
"the following command:"
msgstr ""

msgid "Similarly, on Red Hat and CentOS systems:"
msgstr ""

msgid "Platform-specific instructions"
msgstr "特定平台说明"

msgid "macOS"
msgstr "macOS"

msgid ""
"Because of the variety of packaging systems available for macOS, users have "
"several different options for installing GeoDjango. These options are:"
msgstr ""
"由于 macOS 的打包系统多种多样，用户在安装 GeoDjango 时有几种不同的选择。这些"
"选择是："

msgid ":ref:`postgresapp` (easiest and recommended)"
msgstr ":ref:`postgresapp` （最简易且推荐）"

msgid ":ref:`homebrew`"
msgstr ":ref:`homebrew`"

msgid ":ref:`fink`"
msgstr ":ref:`fink`"

msgid ":ref:`macports`"
msgstr ":ref:`macports`"

msgid ":ref:`build_from_source`"
msgstr ":ref:`build_from_source`"

msgid ""
"This section also includes instructions for installing an upgraded version "
"of :ref:`macos_python` from packages provided by the Python Software "
"Foundation, however, this is not required."
msgstr ""
"这一节还包含了从 Python 软件基金会提供的软件包中安装升级版 :ref:"
"`macos_python` 的说明，但是，这不是必须的。"

msgid "Python"
msgstr "Python"

msgid ""
"Although macOS comes with Python installed, users can use `framework "
"installers`__ provided by the Python Software Foundation.  An advantage to "
"using the installer is that macOS's Python will remain \"pristine\" for "
"internal operating system use."
msgstr ""
"虽然 macOS 安装了 Python，但用户可以使用 Python 软件基金会提供的 `框架安装程"
"序`__ 。 使用安装程序的一个好处是，macOS 的 Python 将保持 “原始” 状态，供操作"
"系统内部使用。"

msgid ""
"You will need to modify the ``PATH`` environment variable in your ``."
"profile`` file so that the new version of Python is used when ``python`` is "
"entered at the command-line:"
msgstr ""

msgid "Postgres.app"
msgstr "Postgres.app"

msgid ""
"`Postgres.app <https://postgresapp.com/>`_ is a standalone PostgreSQL server "
"that includes the PostGIS extension. You will also need to install ``gdal`` "
"and ``libgeoip`` with :ref:`homebrew`."
msgstr ""
"`Postgres.app <https://postgresapp.com/>`_ 是一个独立的 PostgreSQL 服务，包"
"括 PostGIS 扩展。你还需要安装 ``gdal`` 和 ``libgeoip``，并安装 :ref:"
"`homebrew`。"

msgid ""
"After installing Postgres.app, add the following to your ``.bash_profile`` "
"so you can run the package's programs from the command-line. Replace ``X.Y`` "
"with the version of PostgreSQL in the Postgres.app you installed:"
msgstr ""
"安装 Postgres.app 后，在你的 ``.bash_profile`` 中添加以下内容，这样你就可以在"
"命令行中运行软件包的程序。用你安装的 Postgres.app 中的 PostgreSQL 版本替换 "
"``X.Y``："

msgid ""
"You can check if the path is set up correctly by typing ``which psql`` at a "
"terminal prompt."
msgstr "你可以在终端提示符下输入 ``which psql`` 检查路径是否设置正确。"

msgid "Homebrew"
msgstr "Homebrew"

msgid ""
"`Homebrew`__ provides \"recipes\" for building binaries and packages from "
"source. It provides recipes for the GeoDjango prerequisites on Macintosh "
"computers running macOS. Because Homebrew still builds the software from "
"source, `Xcode`_ is required."
msgstr ""
"`Homebrew`__ 提供了从源码中构建二进制文件和软件包的 “菜谱”。它为运行 macOS "
"的 Macintosh 电脑提供了 GeoDjango 的先决条件。因为 Homebrew 仍然从源码构建软"
"件，所以需要使用 `Xcode`_ 。"

msgid "Summary:"
msgstr ""

msgid "Fink"
msgstr "Fink"

msgid ""
"`Kurt Schwehr`__ has been gracious enough to create GeoDjango packages for "
"users of the `Fink`__ package system. `Different packages are available`__ "
"(starting with ``django-gis``), depending on which version of Python you "
"want to use."
msgstr ""
"`Kurt Schwehr`__ 很慷慨地为 `Fink`__ 包系统的用户创建了 GeoDjango 包。根据你"
"想使用的 Python 版本，可以使用不同的包（从 ``django-gis`` 开始）。"

msgid "MacPorts"
msgstr "MacPorts"

msgid ""
"`MacPorts`__ may be used to install GeoDjango prerequisites on computers "
"running macOS.  Because MacPorts still builds the software from source, "
"`Xcode`_ is required."
msgstr ""
"`MacPorts`__ 可以用来在运行 macOS 的计算机上安装 GeoDjango 的先决条件。 因为 "
"MacPorts 仍然从源码构建软件，所以需要使用 `Xcode`_ 。"

msgid ""
"You will also have to modify the ``PATH`` in your ``.profile`` so that the "
"MacPorts programs are accessible from the command-line:"
msgstr ""

msgid ""
"In addition, add the ``DYLD_FALLBACK_LIBRARY_PATH`` setting so that the "
"libraries can be found by Python:"
msgstr ""

msgid "Windows"
msgstr "Windows"

msgid ""
"Proceed through the following sections sequentially in order to install "
"GeoDjango on Windows. In this tutorial we will install 64 bit versions of "
"each application."
msgstr ""
"为了在 Windows 上安装 GeoDjango，请依次完成以下章节。在本教程中，我们将安装每"
"个应用程序的 64 位版本。"

msgid ""
"Install a 64 bit version of Python. See :doc:`Install Python </howto/"
"windows>` for further information."
msgstr ""
"安装一个 64 位版本的 Python。更多信息请参见 :doc:`安装 Python </howto/"
"windows>`。"

msgid ""
"Download the latest `PostgreSQL 15.x installer`__ from the `EnterpriseDB`__ "
"website.  After downloading, run the installer, follow the on-screen "
"directions, and keep the default options unless you know the consequences of "
"changing them."
msgstr ""

msgid ""
"The PostgreSQL installer creates a new ``postgres`` database superuser You "
"will be prompted once to set the password -- make sure to remember it!"
msgstr ""
"PostgreSQL 安装程序会创建一个新的 ``postgres`` 数据库超级用户，你会被提示设置"
"一次密码 —— 一定要记住它！"

msgid ""
"When the installer completes, it will ask to \"Launch Stack Builder at exit?"
"\" -- keep this checked, as it is necessary to install :ref:`postgisasb`."
msgstr ""
"当安装程序完成时，它会询问 “在退出时启动 Stack Builder?” —— 请确定这个问题，"
"因为需要安装 :ref:`postgisasb`。"

msgid ""
"If installed successfully, the PostgreSQL server will run in the background "
"each time the system as started as a Windows service. A :menuselection:"
"`PostgreSQL 15` start menu group will created and contains shortcuts for the "
"Application Stack Builder (ASB) as well as the 'SQL Shell', which will "
"launch a ``psql`` command window."
msgstr ""

msgid ""
"From within the Stack Builder (to run outside of the installer, :"
"menuselection:`Start --> PostgreSQL 15 --> Application Stack Builder`), "
"select :menuselection:`PostgreSQL 15 (x64) on port 5432` from the drop down "
"menu and click next. Expand the :menuselection:`Categories --> Spatial "
"Extensions` menu tree and select :menuselection:`PostGIS X.Y for PostgreSQL "
"15`."
msgstr ""

msgid ""
"After clicking next, you will be prompted to confirm the selected package "
"and \"Download directory\". Click next again, this will download PostGIS and "
"you will be asked to click next to begin the PostGIS installer. Select the "
"default options during install. The install process includes four Yes/No "
"dialog boxes, the default option for all four is \"No\"."
msgstr ""

msgid "OSGeo4W"
msgstr "OSGeo4W"

msgid ""
"The `OSGeo4W installer`_ helps to install the PROJ, GDAL, and GEOS libraries "
"required by GeoDjango. First, download the `OSGeo4W installer`_, and run it. "
"Select :menuselection:`Express Web-GIS Install` and click next.  In the "
"'Select Packages' list, ensure that GDAL is selected. If any other packages "
"are enabled by default, they are not required by GeoDjango and may be "
"unchecked safely. After clicking next and accepting the license agreements, "
"the packages will be automatically downloaded and installed, after which you "
"may exit the installer."
msgstr ""

msgid "Modify Windows environment"
msgstr "修改 Windows 环境"

msgid ""
"In order to use GeoDjango, you will need to add your OSGeo4W directories to "
"your Windows system ``Path``, as well as create ``GDAL_DATA`` and "
"``PROJ_LIB`` environment variables.  The following set of commands, "
"executable with ``cmd.exe``, will set this up. Restart your device once this "
"is complete for new environment variables to be recognized:"
msgstr ""
"为了使用 GeoDjango，你需要将 OSGeo4W 目录添加到 Windows 系统的 ``Path`` 中，"
"并创建 ``GDAL_DATA`` 和 ``PROJ_LIB`` 环境变量。 下面这组命令可以用 ``cmd."
"exe`` 执行，用于设置。设置完成后，请重新启动设备，以便识别新的环境变量。"

msgid ""
"Administrator privileges are required to execute these commands. To do this, "
"run command prompt as administrator and enter the commands above. You need "
"to log out and log back in again for the settings to take effect."
msgstr ""
"执行这些命令需要管理员权限。要做到这一点，请以管理员身份运行命令提示符，并输"
"入上述命令。你需要注销并重新登录，设置才会生效。"

msgid ""
"If you customized the OSGeo4W installation directories, then you will need "
"to modify the ``OSGEO4W_ROOT`` variables accordingly."
msgstr ""
"如果你自定义了 OSGeo4W 的安装目录，那么你需要相应地修改 ``OSGEO4W_ROOT`` 变"
"量。"

msgid "Install Django and set up database"
msgstr "安装 Django 并建立数据库"

msgid ""
":ref:`Install Django <installing-official-release>` on your system. It is "
"recommended that you create a :doc:`virtual environment <python:tutorial/"
"venv>` for each project you create."
msgstr ""

msgid "psycopg"
msgstr ""

msgid ""
"The ``psycopg`` Python module provides the interface between Python and the "
"PostgreSQL database. ``psycopg`` can be installed via pip within your Python "
"virtual environment:"
msgstr ""

msgid ""
"GeoDjango uses the :func:`~ctypes.util.find_library` routine from ``ctypes."
"util`` to locate shared libraries."
msgstr ""
"GeoDjango 使用 ``ctypes.util`` 中的 :func:`~ctypes.util.find_library` 例程来"
"查找共享库。"

msgid "Installing PostGIS"
msgstr "安装 PostGIS"

msgid ""
"`PostGIS`_ adds geographic object support to PostgreSQL, turning it into a "
"spatial database. :ref:`geosbuild`, :ref:`proj4` and :ref:`gdalbuild` should "
"be installed prior to building PostGIS. You might also need additional "
"libraries, see `PostGIS requirements`_."
msgstr ""
":ref:`geosbuild`、:ref:`proj4` 和 :ref:`gdalbuild` 应在构建 PostGIS 之前安"
"装。你可能还需要额外的库，参见 `PostGIS 要求`_ 。"

msgid ""
"The `psycopg`_ or `psycopg2`_ module is required for use as the database "
"adapter when using GeoDjango with PostGIS."
msgstr ""

msgid ""
"On Debian/Ubuntu, you are advised to install the following packages: "
"``postgresql-x``, ``postgresql-x-postgis-3``, ``postgresql-server-dev-x``, "
"and ``python3-psycopg3`` (x matching the PostgreSQL version you want to "
"install). Alternately, you can `build from source`_. Consult the platform-"
"specific instructions if you are on :ref:`macos` or :ref:`windows`."
msgstr ""

msgid "Support for ``psycopg`` 3.1.8+ was added."
msgstr ""

msgid "Post-installation"
msgstr "安装后"

msgid "Creating a spatial database"
msgstr "创建一个空间数据库"

msgid ""
"PostGIS 2 includes an extension for PostgreSQL that's used to enable spatial "
"functionality:"
msgstr ""

msgid ""
"The database user must be a superuser in order to run ``CREATE EXTENSION "
"postgis;``. The command is run during the :djadmin:`migrate` process. An "
"alternative is to use a migration operation in your project::"
msgstr ""
"数据库用户必须是超级用户，才能运行 ``CREATE EXTENSION postgis;``。该命令是"
"在 :djadmin:`migrate` 过程中运行的。另一种方法是在项目中使用迁移操作："

msgid ""
"If you plan to use PostGIS raster functionality on PostGIS 3+, you should "
"also activate the ``postgis_raster`` extension. You can install the "
"extension using the :class:`~django.contrib.postgres.operations."
"CreateExtension` migration operation, or directly by running ``CREATE "
"EXTENSION postgis_raster;``."
msgstr ""
"如果打算在 PostGIS 3+ 上使用 PostGIS 栅格功能，还应该激活 ``postgis_raster`` "
"扩展。你可以使用 :class:`~django.contrib.postgres.operations."
"CreateExtension` 迁移操作来安装扩展，或者直接运行 ``CREATE EXTENSION "
"postgis_raster;``。"

msgid ""
"GeoDjango does not currently leverage any `PostGIS topology "
"functionality`__. If you plan to use those features at some point, you can "
"also install the ``postgis_topology`` extension by issuing ``CREATE "
"EXTENSION postgis_topology;``."
msgstr ""
"GeoDjango 目前没有利用任何 `PostGIS 拓扑功能`。如果你打算在某些时候使用这些功"
"能，你也可以通过发出 ``CREATE EXTENSION postgis_topology;`` 来安装 "
"``postgis_topology`` 扩展。"

msgid "Managing the database"
msgstr "管理数据库"

msgid ""
"To administer the database, you can either use the pgAdmin III program (:"
"menuselection:`Start --> PostgreSQL X --> pgAdmin III`) or the SQL Shell (:"
"menuselection:`Start --> PostgreSQL X --> SQL Shell`). For example, to "
"create a ``geodjango`` spatial database and user, the following may be "
"executed from the SQL Shell as the ``postgres`` user:"
msgstr ""

msgid "Installing SpatiaLite"
msgstr "安装 SpatiaLite"

msgid ""
"`SpatiaLite`__ adds spatial support to SQLite, turning it into a full-"
"featured spatial database."
msgstr ""
"`SpatiaLite`__ 为 SQLite 增加了空间支持，使其成为一个全功能的空间数据库。"

msgid ""
"First, check if you can install SpatiaLite from system packages or binaries."
msgstr "首先，检查是否可以从系统包或二进制文件中安装 SpatiaLite。"

msgid ""
"For example, on Debian-based distributions that package SpatiaLite 4.3+, try "
"to install the ``libsqlite3-mod-spatialite`` package. For older releases "
"install ``spatialite-bin``."
msgstr ""

msgid "For macOS, follow the :ref:`instructions below<spatialite_macos>`."
msgstr "对于 macOS，请按照 :ref:`下方的说明 <spatialite_macos>`。"

msgid "For Windows, you may find binaries on the `Gaia-SINS`__ home page."
msgstr "对于 Windows，你可以在 `Gaia-SINS`__ 主页上找到二进制文件。"

msgid ""
"In any case, you should always be able to :ref:`install from source "
"<spatialite_source>`."
msgstr "在任何情况下，你都应该能够 :ref:`从源码安装 <spatialite_source>`。"

msgid "Installing from source"
msgstr "从源码安装"

msgid ""
":doc:`GEOS and PROJ</ref/contrib/gis/install/geolibs>` should be installed "
"prior to building SpatiaLite."
msgstr ""

msgid ""
"Check first if SQLite is compiled with the `R*Tree module`__. Run the "
"sqlite3 command line interface and enter the following query:"
msgstr ""

msgid ""
"If you obtain an error, you will have to recompile SQLite from source. "
"Otherwise, skip this section."
msgstr ""
"如果你获得一个错误，你将不得不从源码重新编译 SQLite。否则，请跳过本节。"

msgid ""
"To install from sources, download the latest amalgamation source archive "
"from the `SQLite download page`__, and extract:"
msgstr ""

msgid ""
"Next, run the ``configure`` script -- however the ``CFLAGS`` environment "
"variable needs to be customized so that SQLite knows to build the R*Tree "
"module:"
msgstr ""

msgid "SpatiaLite library (``libspatialite``)"
msgstr "SpatiaLite 库（``libspatialite``）"

msgid ""
"Get the latest SpatiaLite library source bundle from the `download page`__:"
msgstr ""

msgid ""
"For macOS users building from source, the SpatiaLite library *and* tools "
"need to have their ``target`` configured:"
msgstr ""

msgid "macOS-specific instructions"
msgstr "macOS 特定说明"

msgid ""
"To install the SpatiaLite library and tools, macOS users can use `Homebrew`_."
msgstr ""

msgid ""
"`Homebrew`_ handles all the SpatiaLite related packages on your behalf, "
"including SQLite, SpatiaLite, PROJ, and GEOS. Install them like this:"
msgstr ""

msgid ""
"Finally, for GeoDjango to be able to find the SpatiaLite library, add the "
"following to your ``settings.py``::"
msgstr ""
"最后，为了让 GeoDjango 能够找到 SpatiaLite 库，在你的 ``settings.py`` 中添加"
"以下内容："

msgid "``LayerMapping`` data import utility"
msgstr ""

msgid ""
"The :class:`LayerMapping` class provides a way to map the contents of vector "
"spatial data files (e.g. shapefiles) into GeoDjango models."
msgstr ""

msgid ""
"This utility grew out of the author's personal needs to eliminate the code "
"repetition that went into pulling geometries and fields out of a vector "
"layer, converting to another coordinate system (e.g. WGS84), and then "
"inserting into a GeoDjango model."
msgstr ""

msgid "Use of :class:`LayerMapping` requires GDAL."
msgstr ""

msgid ""
"GIS data sources, like shapefiles, may be very large.  If you find that :"
"class:`LayerMapping` is using too much memory, set :setting:`DEBUG` to "
"``False`` in your settings.  When :setting:`DEBUG` is set to ``True``, "
"Django :ref:`automatically logs <faq-see-raw-sql-queries>` *every* SQL query "
"-- and when SQL statements contain geometries, this may consume more memory "
"than is typical."
msgstr ""

msgid ""
"You need a GDAL-supported data source, like a shapefile (here we're using a "
"simple polygon shapefile, ``test_poly.shp``, with three features):"
msgstr ""

msgid ""
"Now we define our corresponding Django model (make sure to use :djadmin:"
"`migrate`)::"
msgstr ""

msgid ""
"Use :class:`LayerMapping` to extract all the features and place them in the "
"database:"
msgstr ""

msgid ""
"Here, :class:`LayerMapping` transformed the three geometries from the "
"shapefile in their original spatial reference system (WGS84) to the spatial "
"reference system of the GeoDjango model (NAD83).  If no spatial reference "
"system is defined for the layer, use the ``source_srs`` keyword with a :"
"class:`~django.contrib.gis.gdal.SpatialReference` object to specify one."
msgstr ""

msgid "``LayerMapping`` API"
msgstr "``LayerMapping`` API"

msgid ""
"The following are the arguments and keywords that may be used during "
"instantiation of ``LayerMapping`` objects."
msgstr ""

msgid "Argument"
msgstr "参数"

msgid "``model``"
msgstr "``model``"

msgid "The geographic model, *not* an instance."
msgstr ""

msgid "``data_source``"
msgstr "``data_source``"

msgid ""
"The path to the OGR-supported data source file (e.g., a shapefile).  Also "
"accepts :class:`django.contrib.gis.gdal.DataSource` instances."
msgstr ""

msgid "``mapping``"
msgstr "``mapping``"

msgid ""
"A dictionary: keys are strings corresponding to the model field, and values "
"correspond to string field names for the OGR feature, or if the model field "
"is a geographic then it should correspond to the OGR geometry type, e.g., "
"``'POINT'``, ``'LINESTRING'``, ``'POLYGON'``."
msgstr ""

msgid "``layer``"
msgstr "``layer``"

msgid "The index of the layer to use from the Data Source (defaults to 0)"
msgstr ""

msgid "``source_srs``"
msgstr "``source_srs``"

msgid ""
"Use this to specify the source SRS manually (for example, some shapefiles "
"don't come with a ``'.prj'`` file).  An integer SRID, WKT or PROJ strings, "
"and :class:`django.contrib.gis.gdal.SpatialReference` objects are accepted."
msgstr ""

msgid "``encoding``"
msgstr "``encoding``"

msgid ""
"Specifies the character set encoding of the strings in the OGR data source.  "
"For example, ``'latin-1'``, ``'utf-8'``, and ``'cp437'`` are all valid "
"encoding parameters."
msgstr ""

msgid "``transaction_mode``"
msgstr "``transaction_mode``"

msgid "May be ``'commit_on_success'`` (default) or ``'autocommit'``."
msgstr ""

msgid "``transform``"
msgstr "``transform``"

msgid ""
"Setting this to False will disable coordinate transformations.  In other "
"words, geometries will be inserted into the database unmodified from their "
"original state in the data source."
msgstr ""

msgid "``unique``"
msgstr "``unique``"

msgid ""
"Setting this to the name, or a tuple of names, from the given  model will "
"create models unique only to the given name(s). Geometries from each feature "
"will be added into the collection associated with the unique model.  Forces "
"the transaction mode to be ``'autocommit'``."
msgstr ""

msgid "``using``"
msgstr "``using``"

msgid ""
"Sets the database to use when importing spatial data. Default is "
"``'default'``."
msgstr ""

msgid "``save()`` Keyword Arguments"
msgstr "``save()`` 关键字参数"

msgid ""
"The ``save()`` method also accepts keywords.  These keywords are used for "
"controlling output logging, error handling, and for importing specific "
"feature ranges."
msgstr ""

msgid "Save Keyword Arguments"
msgstr "保存关键字参数"

msgid "``fid_range``"
msgstr "``fid_range``"

msgid ""
"May be set with a slice or tuple of (begin, end) feature ID's to map from "
"the data source.  In other words, this keyword enables the user to "
"selectively import a subset range of features in the geographic data source."
msgstr ""

msgid "``progress``"
msgstr "``progress``"

msgid ""
"When this keyword is set, status information will be printed giving the "
"number of features processed and successfully saved.  By default, progress "
"information will be printed every 1000 features processed, however, this "
"default may be overridden by setting this keyword with an integer for the "
"desired interval."
msgstr ""

msgid "``silent``"
msgstr "``silent``"

msgid ""
"By default, non-fatal error notifications are printed to ``sys.stdout``, but "
"this keyword may be set to disable these notifications."
msgstr ""

msgid "``step``"
msgstr "``step``"

msgid ""
"If set with an integer, transactions will occur at every step interval. For "
"example, if ``step=1000``, a commit would occur after the 1,000th feature, "
"the 2,000th feature etc."
msgstr ""

msgid "``stream``"
msgstr "``stream``"

msgid ""
"Status information will be written to this file handle.  Defaults to using "
"``sys.stdout``, but any object with a ``write`` method is supported."
msgstr ""

msgid "``strict``"
msgstr "``strict``"

msgid ""
"Execution of the model mapping will cease upon the first error encountered.  "
"The default value (``False``) behavior is to attempt to continue."
msgstr ""

msgid "``verbose``"
msgstr "``verbose``"

msgid ""
"If set, information will be printed subsequent to each model save executed "
"on the database."
msgstr ""

msgid "Running out of memory"
msgstr ""

msgid ""
"As noted in the warning at the top of this section, Django stores all SQL "
"queries when ``DEBUG=True``.  Set ``DEBUG=False`` in your settings, and this "
"should stop excessive memory use when running ``LayerMapping`` scripts."
msgstr ""

msgid "MySQL: ``max_allowed_packet`` error"
msgstr ""

msgid ""
"If you encounter the following error when using ``LayerMapping`` and MySQL:"
msgstr ""

msgid ""
"Then the solution is to increase the value of the ``max_allowed_packet`` "
"setting in your MySQL configuration.  For example, the default value may be "
"something low like one megabyte -- the setting may be modified in MySQL's "
"configuration file (``my.cnf``) in the ``[mysqld]`` section:"
msgstr ""

msgid "Measurement Objects"
msgstr ""

msgid ""
"The :mod:`django.contrib.gis.measure` module contains objects that allow for "
"convenient representation of distance and area units of measure. [#]_ "
"Specifically, it implements two objects, :class:`Distance` and :class:`Area` "
"-- both of which may be accessed via the :class:`D` and :class:`A` "
"convenience aliases, respectively."
msgstr ""

msgid ""
":class:`Distance` objects may be instantiated using a keyword argument "
"indicating the context of the units.  In the example below, two different "
"distance objects are instantiated in units of kilometers (``km``) and miles "
"(``mi``):"
msgstr ""

msgid ""
"For conversions, access the preferred unit attribute to get a converted "
"distance quantity:"
msgstr ""

msgid ""
"Moreover, arithmetic operations may be performed between the distance "
"objects:"
msgstr ""

msgid ""
"Two :class:`Distance` objects multiplied together will yield an :class:"
"`Area` object, which uses squared units of measure:"
msgstr ""

msgid ""
"To determine what the attribute abbreviation of a unit is, the "
"``unit_attname`` class method may be used:"
msgstr ""

msgid "Supported units"
msgstr ""

msgid "Unit Attribute"
msgstr ""

msgid "Full name or alias(es)"
msgstr ""

msgid "``km``"
msgstr "``km``"

msgid "Kilometre, Kilometer"
msgstr ""

msgid "``mi``"
msgstr "``mi``"

msgid "Mile"
msgstr ""

msgid "``m``"
msgstr "``m``"

msgid "Meter, Metre"
msgstr ""

msgid "``yd``"
msgstr "``yd``"

msgid "Yard"
msgstr ""

msgid "``ft``"
msgstr "``ft``"

msgid "Foot, Foot (International)"
msgstr ""

msgid "``survey_ft``"
msgstr "``survey_ft``"

msgid "U.S. Foot, US survey foot"
msgstr ""

msgid "``inch``"
msgstr "``inch``"

msgid "Inches"
msgstr ""

msgid "``cm``"
msgstr "``cm``"

msgid "Centimeter"
msgstr ""

msgid "``mm``"
msgstr "``mm``"

msgid "Millimetre, Millimeter"
msgstr ""

msgid "``um``"
msgstr "``um``"

msgid "Micrometer, Micrometre"
msgstr ""

msgid "``british_ft``"
msgstr "``british_ft``"

msgid "British foot (Sears 1922)"
msgstr ""

msgid "``british_yd``"
msgstr "``british_yd``"

msgid "British yard (Sears 1922)"
msgstr ""

msgid "``british_chain_sears``"
msgstr "``british_chain_sears``"

msgid "British chain (Sears 1922)"
msgstr ""

msgid "``indian_yd``"
msgstr "``indian_yd``"

msgid "Indian yard, Yard (Indian)"
msgstr ""

msgid "``sears_yd``"
msgstr "``sears_yd``"

msgid "Yard (Sears)"
msgstr ""

msgid "``clarke_ft``"
msgstr "``clarke_ft``"

msgid "Clarke's Foot"
msgstr ""

msgid "``chain``"
msgstr "``chain``"

msgid "Chain"
msgstr ""

msgid "``chain_benoit``"
msgstr "``chain_benoit``"

msgid "Chain (Benoit)"
msgstr ""

msgid "``chain_sears``"
msgstr "``chain_sears``"

msgid "Chain (Sears)"
msgstr ""

msgid "``british_chain_benoit``"
msgstr "``british_chain_benoit``"

msgid "British chain (Benoit 1895 B)"
msgstr ""

msgid "``british_chain_sears_truncated``"
msgstr "``british_chain_sears_truncated``"

msgid "British chain (Sears 1922 truncated)"
msgstr ""

msgid "``gold_coast_ft``"
msgstr "``gold_coast_ft``"

msgid "Gold Coast foot"
msgstr ""

msgid "``link``"
msgstr "``link``"

msgid "Link"
msgstr "链接"

msgid "``link_benoit``"
msgstr "``link_benoit``"

msgid "Link (Benoit)"
msgstr ""

msgid "``link_sears``"
msgstr "``link_sears``"

msgid "Link (Sears)"
msgstr ""

msgid "``clarke_link``"
msgstr "``clarke_link``"

msgid "Clarke's link"
msgstr ""

msgid "``fathom``"
msgstr "``fathom``"

msgid "Fathom"
msgstr ""

msgid "``rod``"
msgstr "``rod``"

msgid "Rod"
msgstr ""

msgid "``furlong``"
msgstr "``furlong``"

msgid "Furlong, Furrow Long"
msgstr ""

msgid "``nm``"
msgstr "``nm``"

msgid "Nautical Mile"
msgstr ""

msgid "``nm_uk``"
msgstr "``nm_uk``"

msgid "Nautical Mile (UK)"
msgstr ""

msgid "``german_m``"
msgstr "``german_m``"

msgid "German legal metre"
msgstr ""

msgid ""
":class:`Area` attributes are the same as :class:`Distance` attributes, "
"except they are prefixed with ``sq_`` (area units are square in nature). For "
"example, ``Area(sq_m=2)`` creates an :class:`Area` object representing two "
"square meters."
msgstr ""

msgid "Measurement API"
msgstr ""

msgid ""
"To initialize a distance object, pass in a keyword corresponding to the "
"desired :ref:`unit attribute name <supported_units>` set with desired value. "
"For example, the following creates a distance object representing 5 miles:"
msgstr ""

msgid ""
"Returns the distance value in units corresponding to the given unit "
"attribute. For example:"
msgstr ""

msgid ""
"Returns the distance unit attribute name for the given full unit name. For "
"example:"
msgstr ""

msgid "Alias for :class:`Distance` class."
msgstr ""

msgid ""
"To initialize an area object, pass in a keyword corresponding to the "
"desired :ref:`unit attribute name <supported_units>` set with desired value. "
"For example, the following creates an area object representing 5 square "
"miles:"
msgstr ""

msgid ""
"Returns the area value in units corresponding to the given unit attribute. "
"For example:"
msgstr ""

msgid ""
"Returns the area unit attribute name for the given full unit name. For "
"example:"
msgstr ""

msgid "Alias for :class:`Area` class."
msgstr ""

msgid ""
"`Robert Coup <https://koordinates.com/>`_ is the initial author of the "
"measure objects, and was inspired by Brian Beck's work in `geopy <https://"
"github.com/geopy/geopy/>`_ and Geoff Biggs' PhD work on dimensioned units "
"for robotics."
msgstr ""

msgid "GeoDjango Model API"
msgstr ""

msgid ""
"This document explores the details of the GeoDjango Model API.  Throughout "
"this section, we'll be using the following geographic model of a `ZIP "
"code`__ and of a `Digital Elevation Model`__ as our examples::"
msgstr ""

msgid "Spatial Field Types"
msgstr ""

msgid ""
"Spatial fields consist of a series of geometry field types and one raster "
"field type. Each of the geometry field types correspond to the OpenGIS "
"Simple Features specification [#fnogc]_. There is no such standard for "
"raster data."
msgstr ""

msgid "The base class for geometry fields."
msgstr ""

msgid "Stores a :class:`~django.contrib.gis.geos.Point`."
msgstr ""

msgid "Stores a :class:`~django.contrib.gis.geos.LineString`."
msgstr ""

msgid "Stores a :class:`~django.contrib.gis.geos.Polygon`."
msgstr ""

msgid "Stores a :class:`~django.contrib.gis.geos.MultiPoint`."
msgstr ""

msgid "Stores a :class:`~django.contrib.gis.geos.MultiLineString`."
msgstr ""

msgid "Stores a :class:`~django.contrib.gis.geos.MultiPolygon`."
msgstr ""

msgid "Stores a :class:`~django.contrib.gis.geos.GeometryCollection`."
msgstr ""

msgid "``RasterField``"
msgstr ""

msgid "Stores a :class:`~django.contrib.gis.gdal.GDALRaster`."
msgstr ""

msgid "``RasterField`` is currently only implemented for the PostGIS backend."
msgstr ""

msgid "Spatial Field Options"
msgstr ""

msgid ""
"In addition to the regular :ref:`common-model-field-options` available for "
"Django model fields, spatial fields have the following additional options. "
"All are optional."
msgstr ""

msgid ""
"Sets the SRID [#fnogcsrid]_ (Spatial Reference System Identity) of the "
"geometry field to the given value. Defaults to 4326 (also known as "
"`WGS84`__, units are in degrees of longitude and latitude)."
msgstr ""

msgid "Selecting an SRID"
msgstr ""

msgid ""
"Choosing an appropriate SRID for your model is an important decision that "
"the developer should consider carefully.  The SRID is an integer specifier "
"that corresponds to the projection system that will be used to interpret the "
"data in the spatial database. [#fnsrid]_  Projection systems give the "
"context to the coordinates that specify a location.  Although the details of "
"`geodesy`__ are beyond the scope of this documentation, the general problem "
"is that the earth is spherical and representations of the earth (e.g., paper "
"maps, web maps) are not."
msgstr ""

msgid ""
"Most people are familiar with using latitude and longitude to reference a "
"location on the earth's surface.  However, latitude and longitude are "
"angles, not distances. In other words, while the shortest path between two "
"points on a flat surface is a straight line, the shortest path between two "
"points on a curved surface (such as the earth) is an *arc* of a `great "
"circle`__. [#fnthematic]_  Thus, additional computation is required to "
"obtain distances in planar units (e.g., kilometers and miles).  Using a "
"geographic coordinate system may introduce complications for the developer "
"later on. For example, SpatiaLite does not have the capability to perform "
"distance calculations between geometries using geographic coordinate "
"systems, e.g. constructing a query to  find all points within 5 miles of a "
"county boundary stored as WGS84. [#fndist]_"
msgstr ""

msgid ""
"Portions of the earth's surface may projected onto a two-dimensional, or "
"Cartesian, plane.  Projected coordinate systems are especially convenient "
"for region-specific applications, e.g., if you know that your database will "
"only cover geometries in `North Kansas`__, then you may consider using "
"projection system specific to that region.  Moreover, projected coordinate "
"systems are defined in Cartesian units (such as meters or feet), easing "
"distance calculations."
msgstr ""

msgid ""
"If you wish to perform arbitrary distance queries using non-point geometries "
"in WGS84 in PostGIS and you want decent performance, enable the :attr:"
"`GeometryField.geography` keyword so that :ref:`geography database type "
"<geography-type>` is used instead."
msgstr ""

msgid "Additional Resources:"
msgstr "其他资源："

msgid ""
"`spatialreference.org`__: A Django-powered database of spatial reference "
"systems."
msgstr ""

msgid ""
"`The State Plane Coordinate System`__: A website covering the various "
"projection systems used in the United States.  Much of the U.S. spatial data "
"encountered will be in one of these coordinate systems rather than in a "
"geographic coordinate system such as WGS84."
msgstr ""

msgid "``spatial_index``"
msgstr "``spatial_index``"

msgid ""
"Defaults to ``True``.  Creates a spatial index for the given geometry field."
msgstr ""

msgid ""
"This is different from the ``db_index`` field option because spatial indexes "
"are created in a different manner than regular database indexes.  "
"Specifically, spatial indexes are typically created using a variant of the R-"
"Tree, while regular database indexes typically use B-Trees."
msgstr ""

msgid "Geometry Field Options"
msgstr ""

msgid ""
"There are additional options available for Geometry fields. All the "
"following options are optional."
msgstr ""

msgid "``dim``"
msgstr "``dim``"

msgid ""
"This option may be used for customizing the coordinate dimension of the "
"geometry field.  By default, it is set to 2, for representing two-"
"dimensional geometries.  For spatial backends that support it, it may be set "
"to 3 for three-dimensional support."
msgstr ""

msgid ""
"At this time 3D support is limited to the PostGIS and SpatiaLite backends."
msgstr ""

msgid "``geography``"
msgstr "``geography``"

msgid ""
"If set to ``True``, this option will create a database column of type "
"geography, rather than geometry.  Please refer to the :ref:`geography type "
"<geography-type>` section below for more details."
msgstr ""

msgid ""
"Geography support is limited to PostGIS and will force the SRID to be 4326."
msgstr ""

msgid "Geography Type"
msgstr ""

msgid ""
"The geography type provides native support for spatial features represented "
"with geographic coordinates (e.g., WGS84 longitude/latitude). "
"[#fngeography]_ Unlike the plane used by a geometry type, the geography type "
"uses a spherical representation of its data.  Distance and measurement "
"operations performed on a geography column automatically employ great circle "
"arc calculations and return linear units.  In other words, when "
"``ST_Distance`` is called on two geographies, a value in meters is returned "
"(as opposed to degrees if called on a geometry column in WGS84)."
msgstr ""

msgid ""
"Because geography calculations involve more mathematics, only a subset of "
"the PostGIS spatial lookups are available for the geography type. "
"Practically, this means that in addition to the :ref:`distance lookups "
"<distance-lookups>` only the following additional :ref:`spatial lookups "
"<spatial-lookups>` are available for geography columns:"
msgstr ""

msgid ""
"If you need to use a spatial lookup or aggregate that doesn't support the "
"geography type as input, you can use the :class:`~django.db.models.functions."
"Cast` database function to convert the geography column to a geometry type "
"in the query::"
msgstr ""

msgid ""
"For more information, the PostGIS documentation contains a helpful section "
"on determining `when to use geography data type over geometry data type "
"<https://postgis.net/docs/using_postgis_dbmanagement."
"html#PostGIS_GeographyVSGeometry>`_."
msgstr ""

msgid ""
"OpenGIS Consortium, Inc., `Simple Feature Specification For SQL <https://www."
"ogc.org/standards/sfs>`_."
msgstr ""

msgid ""
"*See id.* at Ch. 2.3.8, p. 39 (Geometry Values and Spatial Reference "
"Systems)."
msgstr ""

msgid ""
"Typically, SRID integer corresponds to an EPSG (`European Petroleum Survey "
"Group <https://epsg.org/>`_) identifier.  However, it may also be associated "
"with custom projections defined in spatial database's spatial reference "
"systems table."
msgstr ""

msgid ""
"Terry A. Slocum, Robert B. McMaster, Fritz C. Kessler, & Hugh H. Howard, "
"*Thematic Cartography and Geographic Visualization* (Prentice Hall, 2nd "
"edition), at Ch. 7.1.3."
msgstr ""

msgid "This limitation does not apply to PostGIS."
msgstr ""

msgid ""
"Please refer to the `PostGIS Geography Type <https://postgis.net/docs/"
"using_postgis_dbmanagement.html#PostGIS_Geography>`_ documentation for more "
"details."
msgstr ""

msgid "OGR Inspection"
msgstr ""

msgid "``GeoJSON`` Serializer"
msgstr ""

msgid ""
"GeoDjango provides a specific serializer for the `GeoJSON`__ format. See :"
"doc:`/topics/serialization` for more information on serialization."
msgstr ""

msgid ""
"The ``geojson`` serializer is not meant for round-tripping data, as it has "
"no deserializer equivalent. For example, you cannot use :djadmin:`loaddata` "
"to reload the output produced by this serializer. If you plan to reload the "
"outputted data, use the plain :ref:`json serializer <serialization-formats-"
"json>` instead."
msgstr ""

msgid ""
"In addition to the options of the ``json`` serializer, the ``geojson`` "
"serializer accepts the following additional option when it is called by "
"``serializers.serialize()``:"
msgstr ""

msgid ""
"``geometry_field``: A string containing the name of a geometry field to use "
"for the ``geometry`` key of the GeoJSON feature. This is only needed when "
"you have a model with more than one geometry field and you don't want to use "
"the first defined geometry field (by default, the first geometry field is "
"picked)."
msgstr ""

msgid ""
"``id_field``: A string containing the name of a field to use for the ``id`` "
"key of the GeoJSON feature. By default, the primary key of objects is used."
msgstr ""

msgid ""
"``srid``: The SRID to use for the ``geometry`` content. Defaults to 4326 "
"(WGS 84)."
msgstr ""

msgid ""
"The :ref:`fields <subset-of-fields>` option can be used to limit fields that "
"will be present in the ``properties`` key, as it works with all other "
"serializers."
msgstr ""

msgid "Would output::"
msgstr "将会输出："

msgid ""
"When the ``fields`` parameter is not specified, the ``geojson`` serializer "
"adds a ``pk`` key to the ``properties`` dictionary with the primary key of "
"the object as the value."
msgstr ""

msgid ""
"The ``id`` key for serialized features was added. Also, the ``id_field`` "
"option was added to the ``geojson`` serializer."
msgstr ""

msgid "Geographic Sitemaps"
msgstr ""

msgid ""
"KML is an XML language focused on geographic visualization [#]_. "
"``KMLSitemap`` and its compressed counterpart ``KMZSitemap`` allow you to "
"present geolocated data in a machine-readable format."
msgstr ""

msgid "Reference"
msgstr "参考"

msgid "``KMLSitemap``"
msgstr "``KMLSitemap``"

msgid "``KMZSitemap``"
msgstr "``KMZSitemap``"

msgid "https://www.ogc.org/standards/kml"
msgstr ""

msgid "Testing GeoDjango apps"
msgstr ""

msgid ""
"Included in this documentation are some additional notes and settings for :"
"ref:`testing-postgis` users."
msgstr ""

msgid ""
"The settings below have sensible defaults, and shouldn't require manual "
"setting."
msgstr ""

msgid "``POSTGIS_VERSION``"
msgstr "``POSTGIS_VERSION``"

msgid ""
"When GeoDjango's spatial backend initializes on PostGIS, it has to perform "
"an SQL query to determine the version in order to figure out what features "
"are available. Advanced users wishing to prevent this additional query may "
"set the version manually using a 3-tuple of integers specifying the major, "
"minor, and micro version numbers for PostGIS. For example, to configure for "
"PostGIS X.Y.Z you would use::"
msgstr ""

msgid "Obtaining sufficient privileges"
msgstr ""

msgid ""
"Depending on your configuration, this section describes several methods to "
"configure a database user with sufficient privileges to run tests for "
"GeoDjango applications on PostgreSQL. If your :ref:`spatial database "
"template <spatialdb_template>` was created like in the instructions, then "
"your testing database user only needs to have the ability to create "
"databases. In other configurations, you may be required to use a database "
"superuser."
msgstr ""

msgid "Create database user"
msgstr "创建数据库普通用户"

msgid ""
"To make a database user with the ability to create databases, use the "
"following command:"
msgstr ""

msgid ""
"The ``-R -S`` flags indicate that we do not want the user to have the "
"ability to create additional users (roles) or to be a superuser, "
"respectively."
msgstr ""

msgid ""
"Alternatively, you may alter an existing user's role from the SQL shell "
"(assuming this is done from an existing superuser account):"
msgstr ""

msgid "Create database superuser"
msgstr "创建数据库超级用户"

msgid "This may be done at the time the user is created, for example:"
msgstr ""

msgid ""
"Or you may alter the user's role from the SQL shell (assuming this is done "
"from an existing superuser account):"
msgstr ""

msgid ""
"On Windows platforms you can use the pgAdmin III utility to add superuser "
"privileges to your database user."
msgstr ""

msgid ""
"By default, the PostGIS installer on Windows includes a template spatial "
"database entitled ``template_postgis``."
msgstr ""

msgid "GeoDjango tests"
msgstr ""

msgid ""
"To have the GeoDjango tests executed when :ref:`running the Django test "
"suite <running-unit-tests>` with ``runtests.py`` all of the databases in the "
"settings file must be using one of the :ref:`spatial database backends "
"<spatial-backends>`."
msgstr ""

msgid ""
"The following is an example bare-bones settings file with spatial backends "
"that can be used to run the entire Django test suite, including those in :"
"mod:`django.contrib.gis`::"
msgstr ""

msgid ""
"Assuming the settings above were in a ``postgis.py`` file in the same "
"directory as ``runtests.py``, then all Django and GeoDjango tests would be "
"performed when executing the command:"
msgstr ""

msgid "To run only the GeoDjango test suite, specify ``gis_tests``:"
msgstr ""

msgid "GeoDjango Tutorial"
msgstr "GeoDjango 教程"

msgid ""
"GeoDjango is an included contrib module for Django that turns it into a "
"world-class geographic web framework. GeoDjango strives to make it as simple "
"as possible to create geographic web applications, like location-based "
"services. Its features include:"
msgstr ""

msgid "Django model fields for `OGC`_ geometries and raster data."
msgstr "`OGC`_ 几何图形和光栅数据的 Django 模型字段。"

msgid "Extensions to Django's ORM for querying and manipulating spatial data."
msgstr "Django ORM 的扩展，用于查询和操作空间数据。"

msgid ""
"Loosely-coupled, high-level Python interfaces for GIS geometry and raster "
"operations and data manipulation in different formats."
msgstr ""
"松散耦合的高级 Python 接口，用于 GIS 几何和栅格操作以及不同格式的数据处理。"

msgid "Editing geometry fields from the admin."
msgstr "从管理界面编辑几何字段。"

msgid ""
"This tutorial assumes familiarity with Django; thus, if you're brand new to "
"Django, please read through the :doc:`regular tutorial </intro/tutorial01>` "
"to familiarize yourself with Django first."
msgstr ""
"本教程假设你对 Django 很熟悉，因此，如果你是一个全新的 Django 新手，请先阅"
"读 :doc:`常规教程 </intro/tutorial01>` 来熟悉 Django。"

msgid ""
"GeoDjango has additional requirements beyond what Django requires -- please "
"consult the :doc:`installation documentation <install/index>` for more "
"details."
msgstr ""
"GeoDjango 有一些额外的要求，超出了 Django 的要求——请查阅 :doc:`安装文档 "
"<install/index>` 了解更多细节。"

msgid ""
"This tutorial will guide you through the creation of a geographic web "
"application for viewing the `world borders`_. [#]_ Some of the code used in "
"this tutorial is taken from and/or inspired by the `GeoDjango basic apps`_ "
"project. [#]_"
msgstr ""
"本教程将指导你创建一个用于查看 `世界边界`_ 的地理网络应用。[#]_ 本教程中使用"
"的一些代码来自于“GeoDjango 基本应用”项目，或者说是受其启发。[#]_"

msgid ""
"Proceed through the tutorial sections sequentially for step-by-step "
"instructions."
msgstr "依次进行教程部分的步骤说明。"

msgid "Setting Up"
msgstr "设置"

msgid "Create a Spatial Database"
msgstr "创建一个空间数据库"

msgid ""
"Typically no special setup is required, so you can create a database as you "
"would for any other project. We provide some tips for selected databases:"
msgstr ""
"通常情况下，不需要特殊的设置，因此你可以像创建其他项目一样创建数据库。我们为"
"选定的数据库提供一些提示："

msgid ":doc:`install/postgis`"
msgstr ":doc:`install/postgis`"

msgid ":doc:`install/spatialite`"
msgstr ":doc:`install/spatialite`"

msgid "Create a New Project"
msgstr "创建一个新项目"

msgid ""
"Use the standard ``django-admin`` script to create a project called "
"``geodjango``:"
msgstr "使用标准的 ``django-admin`` 脚本创建一个名为 ``geodjango`` 的项目："

msgid ""
"This will initialize a new project. Now, create a ``world`` Django "
"application within the ``geodjango`` project:"
msgstr ""
"这将初始化一个新项目。现在，在 ``geodjango`` 项目中创建一个 ``world`` Django "
"应用程序："

msgid "Configure ``settings.py``"
msgstr "设置 ``settings.py``"

msgid ""
"The ``geodjango`` project settings are stored in the ``geodjango/settings."
"py`` file. Edit the database connection settings to match your setup::"
msgstr ""
"``geodjango`` 项目配置存储在 ``geodjango/settings.py`` 文件中。编辑数据库连接"
"配置以符合你的设置："

msgid ""
"In addition, modify the :setting:`INSTALLED_APPS` setting to include :mod:"
"`django.contrib.admin`, :mod:`django.contrib.gis`, and ``world`` (your newly "
"created application)::"
msgstr ""
"此外，修改 :setting:`INSTALLED_APPS` 设置，将 :mod:`django.contrib.admin`、 :"
"mod:`django.contrib.gis` 和 ``world`` （你新创建的应用程序）包含进去："

msgid "Geographic Data"
msgstr "地理数据"

msgid "World Borders"
msgstr "世界边界"

msgid ""
"The world borders data is available in this `zip file`__.  Create a ``data`` "
"directory in the ``world`` application, download the world borders data, and "
"unzip. On GNU/Linux platforms, use the following commands:"
msgstr ""
"世界边界数据就在这个 `zip file`__ 中。 在 ``world`` 应用程序中创建一个 "
"``data`` 目录，下载世界边界数据，然后解压。在 GNU/Linux 平台上，使用以下命"
"令："

msgid ""
"The world borders ZIP file contains a set of data files collectively known "
"as an `ESRI Shapefile`__, one of the most popular geospatial data formats.  "
"When unzipped, the world borders dataset includes files with the following "
"extensions:"
msgstr ""
"世界边界 ZIP 文件包含一组数据文件，统称为“ESRI Shapefile”，是最流行的地理空间"
"数据格式之一。 解压后，世界边界数据集包括以下扩展名的文件："

msgid "``.shp``: Holds the vector data for the world borders geometries."
msgstr "``.shp``：保存世界边界几何图形的向量数据。"

msgid "``.shx``: Spatial index file for geometries stored in the ``.shp``."
msgstr "``.shx``：``.shp`` 中存储的几何体空间索引文件。"

msgid ""
"``.dbf``: Database file for holding non-geometric attribute data (e.g., "
"integer and character fields)."
msgstr "``.dbf``：用于存放非几何属性数据（如整数和字符字段）的数据库文件。"

msgid ""
"``.prj``: Contains the spatial reference information for the geographic data "
"stored in the shapefile."
msgstr "``.prj``：包含形状文件中存储的地理数据的空间参考信息。"

msgid "Use ``ogrinfo`` to examine spatial data"
msgstr "使用 ``ogrinfo`` 检查空间数据"

msgid ""
"The GDAL ``ogrinfo`` utility allows examining the metadata of shapefiles or "
"other vector data sources:"
msgstr "GDAL ``ogrinfo`` 实用程序允许检查形状文件或其他矢量数据源的元数据："

msgid ""
"``ogrinfo`` tells us that the shapefile has one layer, and that this layer "
"contains polygon data.  To find out more, we'll specify the layer name and "
"use the ``-so`` option to get only the important summary information:"
msgstr ""
"``ogrinfo`` 告诉我们形状文件有一个图层，这个图层包含多边形数据。 为了了解更多"
"信息，我们将指定图层名称，并使用 ``so`` 选项只获取重要的摘要信息："

msgid ""
"This detailed summary information tells us the number of features in the "
"layer (246), the geographic bounds of the data, the spatial reference system "
"(\"SRS WKT\"), as well as type information for each attribute field. For "
"example, ``FIPS: String (2.0)`` indicates that the ``FIPS`` character field "
"has a maximum length of 2.  Similarly, ``LON: Real (8.3)`` is a floating-"
"point field that holds a maximum of 8 digits up to three decimal places."
msgstr ""
"这种详细的摘要信息告诉我们图层中特征的数量（246）、数据的地理界限、空间参考系"
"统（“SRS WKT”）以及每个属性字段的类型信息。例如，``FIPS: String (2.0)`` 表示 "
"``FIPS`` 字符域的最大长度为 2。同样，``LON: Real (8.3)`` 是一个浮点字段，最多"
"可容纳 8 位数字，最多可容纳 3 位小数。"

msgid "Geographic Models"
msgstr "地理模型"

msgid "Defining a Geographic Model"
msgstr "定义地理模型"

msgid ""
"Now that you've examined your dataset using ``ogrinfo``, create a GeoDjango "
"model to represent this data::"
msgstr ""
"现在你已经用 ``ogrinfo`` 检查了你的数据集，创建一个 GeoDjango 模型来表示这个"
"数据："

msgid ""
"Note that the ``models`` module is imported from ``django.contrib.gis.db``."
msgstr "请注意，``models`` 模块是从 ``django.contrib.gis.db`` 导入的。"

msgid ""
"The default spatial reference system for geometry fields is WGS84 (meaning "
"the `SRID`__ is 4326) -- in other words, the field coordinates are in "
"longitude, latitude pairs in units of degrees.  To use a different "
"coordinate system, set the SRID of the geometry field with the ``srid`` "
"argument. Use an integer representing the coordinate system's EPSG code."
msgstr ""
"几何场的默认空间参考系统是 WGS84（意味着 `SRID`__ 是 4326）——换句话说，场的坐"
"标是以经度和纬度对为单位的。 要使用不同的坐标系，可以用 ``srid`` 参数设置几何"
"字段的 SRID。使用一个整数代表坐标系的 EPSG 代码。"

msgid "Run ``migrate``"
msgstr "运行 ``migrate``"

msgid ""
"After defining your model, you need to sync it with the database. First, "
"create a database migration:"
msgstr "定义完模型后，你需要将其与数据库同步。首先，创建一个数据库迁移："

msgid ""
"Let's look at the SQL that will generate the table for the ``WorldBorder`` "
"model:"
msgstr "让我们看看将为 ``WorldBorder`` 模型生成表的 SQL："

msgid "This command should produce the following output:"
msgstr "该命令应产生以下输出："

msgid ""
"If this looks correct, run :djadmin:`migrate` to create this table in the "
"database:"
msgstr "如果这个看起来是正确的，运行 :djadmin:`migrate` 在数据库中创建这个表："

msgid "Importing Spatial Data"
msgstr "导入空间数据"

msgid ""
"This section will show you how to import the world borders shapefile into "
"the database via GeoDjango models using the :doc:`layermapping`."
msgstr ""
"本节将展示如何通过 GeoDjango 模型使用 :doc:`layermapping` 将世界边界形状文件"
"导入数据库。"

msgid ""
"There are many different ways to import data into a spatial database -- "
"besides the tools included within GeoDjango, you may also use the following:"
msgstr ""
"有许多不同的方法可以将数据导入空间数据库——除了 GeoDjango 中包含的工具外，你还"
"可以使用以下方法："

msgid ""
"`ogr2ogr`_: A command-line utility included with GDAL that can import many "
"vector data formats into PostGIS, MySQL, and Oracle databases."
msgstr ""
"`ogr2ogr`_ ：GDAL 包含的一个命令行实用程序，可将许多矢量数据格式导入 "
"PostGIS、MySQL 和 Oracle 数据库。"

msgid ""
"`shp2pgsql`_: This utility included with PostGIS imports ESRI shapefiles "
"into PostGIS."
msgstr "`shp2pgsql`_ ：PostGIS 所包含的这一工具将 ESRI 形状文件导入 PostGIS。"

msgid "GDAL Interface"
msgstr "GDAL 接口"

msgid ""
"Earlier, you used ``ogrinfo`` to examine the contents of the world borders "
"shapefile.  GeoDjango also includes a Pythonic interface to GDAL's powerful "
"OGR library that can work with all the vector data sources that OGR supports."
msgstr ""
"之前，你使用 ``ogrinfo`` 来检查世界边界形状文件的内容。 GeoDjango 还包含了一"
"个 Pythonic 接口，用于 GDAL 强大的 OGR 库，它可以与 OGR 支持的所有矢量数据源"
"一起工作。"

msgid "First, invoke the Django shell:"
msgstr "首先，调用 Django 命令行："

msgid ""
"If you downloaded the :ref:`worldborders` data earlier in the tutorial, then "
"you can determine its path using Python's :class:`pathlib.Path`:"
msgstr ""

msgid ""
"Now, open the world borders shapefile using GeoDjango's :class:`~django."
"contrib.gis.gdal.DataSource` interface:"
msgstr ""

msgid ""
"Data source objects can have different layers of geospatial features; "
"however, shapefiles are only allowed to have one layer:"
msgstr ""

msgid ""
"You can see the layer's geometry type and how many features it contains:"
msgstr ""

msgid ""
"Unfortunately, the shapefile data format does not allow for greater "
"specificity with regards to geometry types.  This shapefile, like many "
"others, actually includes ``MultiPolygon`` geometries, not Polygons. It's "
"important to use a more general field type in models: a GeoDjango "
"``MultiPolygonField`` will accept a ``Polygon`` geometry, but a "
"``PolygonField`` will not accept a ``MultiPolygon`` type geometry.  This is "
"why the ``WorldBorder`` model defined above uses a ``MultiPolygonField``."
msgstr ""
"遗憾的是，形状文件数据格式不允许在几何体类型方面有更大的特殊性。 这个形状文"
"件，和其他的形状一样，实际上包含了 ``MultiPolygon`` 的几何体，而不是多边形。"
"在模型中使用更通用的字段类型是很重要的：GeoDjango 的 ``MultiPolygonField`` 将"
"接受 ``Polygon`` 几何体，但 ``PolygonField`` 将不接受 ``MultiPolygon`` 类型的"
"几何体。 这就是为什么上面定义的 ``WorldBorder`` 模型使用 "
"``MultiPolygonField``。"

msgid ""
"The :class:`~django.contrib.gis.gdal.Layer` may also have a spatial "
"reference system associated with it.  If it does, the ``srs`` attribute will "
"return a :class:`~django.contrib.gis.gdal.SpatialReference` object:"
msgstr ""

msgid ""
"This shapefile is in the popular WGS84 spatial reference system -- in other "
"words, the data uses longitude, latitude pairs in units of degrees."
msgstr ""
"这个形状文件采用流行的 WGS84 空间参考系统——换句话说，数据使用经度、纬度对，单"
"位是度。"

msgid ""
"In addition, shapefiles also support attribute fields that may contain "
"additional data.  Here are the fields on the World Borders layer:"
msgstr ""
"此外，空间文件还支持可能包含附加数据的属性字段。 以下是世界边界图层上的字段："

msgid ""
"The following code will let you examine the OGR types (e.g. integer or "
"string) associated with each of the fields:"
msgstr "下面的代码将让你检查与每个字段相关联的 OGR 类型（如整数或字符串）："

msgid ""
"You can iterate over each feature in the layer and extract information from "
"both the feature's geometry (accessed via the ``geom`` attribute) as well as "
"the feature's attribute fields (whose **values** are accessed via ``get()`` "
"method):"
msgstr ""

msgid ":class:`~django.contrib.gis.gdal.Layer` objects may be sliced:"
msgstr ""

msgid "And individual features may be retrieved by their feature ID:"
msgstr ""

msgid "Boundary geometries may be exported as WKT and GeoJSON:"
msgstr ""

msgid "``LayerMapping``"
msgstr "``LayerMapping``"

msgid ""
"To import the data, use a ``LayerMapping`` in a Python script. Create a file "
"called ``load.py`` inside the ``world`` application, with the following "
"code::"
msgstr ""

msgid "A few notes about what's going on:"
msgstr "说说现在的情况："

msgid ""
"Each key in the ``world_mapping`` dictionary corresponds to a field in the "
"``WorldBorder`` model.  The value is the name of the shapefile field that "
"data will be loaded from."
msgstr ""
"``world_mapping`` 字典中的每个键对应 ``WorldBorder`` 模型中的一个字段。 其值"
"是数据将被载入的形状文件字段的名称。"

msgid ""
"The key ``mpoly`` for the geometry field is ``MULTIPOLYGON``, the geometry "
"type GeoDjango will import the field as.  Even simple polygons in the "
"shapefile will automatically be converted into collections prior to "
"insertion into the database."
msgstr ""
"几何字段的关键 ``mpoly`` 是 ``MULTIPOLYGON``，即 GeoDjango 将导入字段的几何类"
"型。 即使是形状文件中的简单多边形，也会在插入数据库之前自动转换为集合。"

msgid ""
"The path to the shapefile is not absolute -- in other words, if you move the "
"``world`` application (with ``data`` subdirectory) to a different location, "
"the script will still work."
msgstr ""
"形状文件的路径不是绝对的——换句话说，如果你把 ``world`` 应用程序（带 ``data`` "
"子目录）移到不同的位置，脚本仍然会工作。"

msgid ""
"The ``transform`` keyword is set to ``False`` because the data in the "
"shapefile does not need to be converted -- it's already in WGS84 (SRID=4326)."
msgstr ""
"``transform`` 关键字设置为 ``False``，因为形状文件中的数据不需要转换——它已经"
"是 WGS84 的数据（SRID=4326）。"

msgid ""
"Afterward, invoke the Django shell from the ``geodjango`` project directory:"
msgstr ""

msgid ""
"Next, import the ``load`` module, call the ``run`` routine, and watch "
"``LayerMapping`` do the work:"
msgstr ""

msgid "Try ``ogrinspect``"
msgstr "试试 ``ogrinspect``"

msgid ""
"Now that you've seen how to define geographic models and import data with "
"the :doc:`layermapping`, it's possible to further automate this process with "
"use of the :djadmin:`ogrinspect` management command.  The :djadmin:"
"`ogrinspect` command  introspects a GDAL-supported vector data source (e.g., "
"a shapefile) and generates a model definition and ``LayerMapping`` "
"dictionary automatically."
msgstr ""
"现在你已经看到了如何使用 :doc:`layermapping` 定义地理模型和导入数据，可以使"
"用 :djadmin:`ogrinspect` 管理命令进一步自动化这一过程。 :djadmin:"
"`ogrinspect` 命令对 GDAL 支持的矢量数据源（如形状文件）进行内省，并自动生成模"
"型定义和 ``LayerMapping`` 字典。"

msgid "The general usage of the command goes as follows:"
msgstr "该命令的一般用法如下："

msgid ""
"``data_source`` is the path to the GDAL-supported data source and "
"``model_name`` is the name to use for the model.  Command-line options may "
"be used to further define how the model is generated."
msgstr ""
"``data_source`` 是通往 GDAL 支持的数据源的路径，``model_name`` 是用于模型的名"
"称。 命令行选项可用于进一步定义模型的生成方式。"

msgid ""
"For example, the following command nearly reproduces the ``WorldBorder`` "
"model and mapping dictionary created above, automatically:"
msgstr ""
"例如，下面的命令几乎自动复制了上面创建的 ``WorldBorder`` 模型和映射字典："

msgid "A few notes about the command-line options given above:"
msgstr "关于上面给出的命令行选项的一些说明："

msgid "The ``--srid=4326`` option sets the SRID for the geographic field."
msgstr "``--srid=4326`` 选项设置地理区域的 SRID。"

msgid ""
"The ``--mapping`` option tells ``ogrinspect`` to also generate a mapping "
"dictionary for use with :class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""
"``--mapping`` 选项告诉 ``ogrinspect`` 也要生成一个映射字典，供 :class:"
"`~django.contrib.gis.utils.LayerMapping` 使用。"

msgid ""
"The ``--multi`` option is specified so that the geographic field is a :class:"
"`~django.contrib.gis.db.models.MultiPolygonField` instead of just a :class:"
"`~django.contrib.gis.db.models.PolygonField`."
msgstr ""
"指定了 ``--multi`` 选项，这样地理区域就是一个 :class:`~django.contrib.gis.db."
"models.MultiPolygonField` 而不是一个 :class:`~django.contrib.gis.db.models."
"PolygonField`。"

msgid ""
"The command produces the following output, which may be copied directly into "
"the ``models.py`` of a GeoDjango application::"
msgstr ""
"该命令产生以下输出，可以直接复制到 GeoDjango 应用程序的 ``models.py`` 中："

msgid "Spatial Queries"
msgstr "空间查询"

msgid ""
"GeoDjango adds spatial lookups to the Django ORM.  For example, you can find "
"the country in the ``WorldBorder`` table that contains a particular point.  "
"First, fire up the management shell:"
msgstr ""
"GeoDjango 在 Django ORM 中增加了空间查询功能。 例如，你可以在 "
"``WorldBorder`` 表中找到包含某个点的国家。 首先，启动管理 shell："

msgid "Now, define a point of interest [#]_:"
msgstr ""

msgid ""
"The ``pnt_wkt`` string represents the point at -95.3385 degrees longitude, "
"29.7245 degrees latitude.  The geometry is in a format known as Well Known "
"Text (WKT), a standard issued by the Open Geospatial Consortium (OGC). [#]_  "
"Import the ``WorldBorder`` model, and perform a ``contains`` lookup using "
"the ``pnt_wkt`` as the parameter:"
msgstr ""

msgid ""
"Here, you retrieved a ``QuerySet`` with only one model: the border of the "
"United States (exactly what you would expect)."
msgstr ""
"在这里，你检索到的 ``QuerySet`` 只有一个模型：美国的边界（正是你所期望的）。"

msgid ""
"Similarly, you may also use a :doc:`GEOS geometry object <geos>`. Here, you "
"can combine the ``intersects`` spatial lookup with the ``get`` method to "
"retrieve only the ``WorldBorder`` instance for San Marino instead of a "
"queryset:"
msgstr ""

msgid ""
"The ``contains`` and ``intersects`` lookups are just a subset of the "
"available queries -- the :doc:`db-api` documentation has more."
msgstr ""
"``contains`` 和 ``intersects`` 查询只是可用查询的一个子集 —— :doc:`db-api` 文"
"档中有更多的内容。"

msgid "Automatic Spatial Transformations"
msgstr "自动空间变换"

msgid ""
"When doing spatial queries, GeoDjango automatically transforms geometries if "
"they're in a different coordinate system.  In the following example, "
"coordinates will be expressed in `EPSG SRID 32140`__, a coordinate system "
"specific to south Texas **only** and in units of **meters**, not degrees:"
msgstr ""

msgid ""
"Note that ``pnt`` may also be constructed with EWKT, an \"extended\" form of "
"WKT that includes the SRID:"
msgstr ""

msgid ""
"GeoDjango's ORM will automatically wrap geometry values in transformation "
"SQL, allowing the developer to work at a higher level of abstraction:"
msgstr ""

msgid "Raw queries"
msgstr "原始查询"

msgid ""
"When using :doc:`raw queries </topics/db/sql>`, you must wrap your geometry "
"fields so that the field value can be recognized by GEOS:"
msgstr ""

msgid ""
"You should only use raw queries when you know exactly what you're doing."
msgstr "只有当你确切知道自己在做什么的时候，你才应该使用原始查询。"

msgid "Lazy Geometries"
msgstr "惰性几何"

msgid ""
"GeoDjango loads geometries in a standardized textual representation.  When "
"the geometry field is first accessed, GeoDjango creates a :class:`~django."
"contrib.gis.geos.GEOSGeometry` object, exposing powerful functionality, such "
"as serialization properties for popular geospatial formats:"
msgstr ""

msgid ""
"This includes access to all of the advanced geometric operations provided by "
"the GEOS library:"
msgstr ""

msgid "Geographic annotations"
msgstr "地理注解"

msgid ""
"GeoDjango also offers a set of geographic annotations to compute distances "
"and several other operations (intersection, difference, etc.). See the :doc:"
"`functions` documentation."
msgstr ""
"GeoDjango 还提供了一组地理注解来计算距离和其他一些操作（交点、差值等）。参"
"见 :doc:`functions` 文档。"

msgid "Putting your data on the map"
msgstr "将你的数据放在地图上"

msgid "Geographic Admin"
msgstr "地理管理"

msgid ""
":doc:`Django's admin application </ref/contrib/admin/index>` supports "
"editing geometry fields."
msgstr ""

msgid "Basics"
msgstr "基础"

msgid ""
"The Django admin allows users to create and modify geometries on a "
"JavaScript slippy map (powered by `OpenLayers`_)."
msgstr ""

msgid ""
"Let's dive right in. Create a file called ``admin.py`` inside the ``world`` "
"application with the following code::"
msgstr ""

msgid ""
"Next, edit your ``urls.py`` in the ``geodjango`` application folder as "
"follows::"
msgstr "接下来，在 ``geodjango`` 应用程序文件夹中编辑 ``urls.py`` 如下："

msgid "Create an admin user:"
msgstr "创建一个管理用户："

msgid "Next, start up the Django development server:"
msgstr "接下来，启动 Django 开发服务器："

msgid ""
"Finally, browse to ``http://localhost:8000/admin/``, and log in with the "
"user you just created. Browse to any of the ``WorldBorder`` entries -- the "
"borders may be edited by clicking on a polygon and dragging the vertices to "
"the desired position."
msgstr ""
"最后，浏览 ``http://localhost:8000/admin/``，用你刚刚创建的用户登录。浏览到任"
"何一个 ``WorldBorder`` 条目——通过点击多边形并将顶点拖到所需位置，可以编辑边"
"界。"

msgid ""
"With the :class:`~django.contrib.gis.admin.GISModelAdmin`, GeoDjango uses an "
"`OpenStreetMap`_ layer in the admin. This provides more context (including "
"street and thoroughfare details) than available with the :class:`~django."
"contrib.admin.ModelAdmin` (which uses the `Vector Map Level 0`_ WMS dataset "
"hosted at `OSGeo`_)."
msgstr ""

msgid ""
"The PROJ datum shifting files must be installed (see the :ref:`PROJ "
"installation instructions <proj4>` for more details)."
msgstr ""

msgid ""
"If you meet this requirement, then use the ``GISModelAdmin`` option class in "
"your ``admin.py`` file::"
msgstr ""

msgid ""
"Special thanks to Bjørn Sandvik of `thematicmapping.org <https://"
"thematicmapping.org/>`_ for providing and maintaining this dataset."
msgstr ""
"特别感谢 `thematicmapping.org <https://thematicmapping.org/>`_ 的Bjørn "
"Sandvik 提供和维护这一数据集。"

msgid ""
"GeoDjango basic apps was written by Dane Springmeyer, Josh Livni, and "
"Christopher Schmidt."
msgstr ""
"GeoDjango 基本应用由 Dane Springmeyer、Josh Livni 和 Christopher Schmidt 编"
"写。"

msgid ""
"This point is the `University of Houston Law Center <https://www.law.uh.edu/"
">`_."
msgstr "这一点是 `休斯顿大学法律中心 <https://www.law.uh.edu/>`_ 。"

msgid ""
"Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For "
"SQL <https://www.ogc.org/standards/sfs>`_."
msgstr ""

msgid "GeoDjango Utilities"
msgstr "GeoDjango 实用程序"

msgid ""
"The :mod:`django.contrib.gis.utils` module contains various utilities that "
"are useful in creating geospatial web applications."
msgstr ""

msgid "``django.contrib.humanize``"
msgstr "``django.contrib.humanize``"

msgid ""
"A set of Django template filters useful for adding a \"human touch\" to data."
msgstr "一套 Django 模板过滤器，用于为数据添加 “人情味”。"

msgid ""
"To activate these filters, add ``'django.contrib.humanize'`` to your :"
"setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load "
"humanize %}`` in a template, and you'll have access to the following filters."
msgstr ""
"要激活这些过滤器，请在你的 :setting:`INSTALLED_APPS` 配置中添加 ``'django."
"contrib.humanize'``。添加完毕后，在模板中使用 ``{% load humanize %}``，你就可"
"以使用以下过滤器了。"

msgid "``apnumber``"
msgstr "``apnumber``"

msgid ""
"For numbers 1-9, returns the number spelled out. Otherwise, returns the "
"number. This follows Associated Press style."
msgstr "对于数字 1-9，返回拼出的数字。否则，返回数字。这遵循了美联社的风格。"

msgid "Examples:"
msgstr "举例："

msgid "``1`` becomes ``one``."
msgstr "``1`` 变成 ``one``。"

msgid "``2`` becomes ``two``."
msgstr "``2`` 变成 ``two``。"

msgid "``10`` becomes ``10``."
msgstr "``10`` 变成 ``10``。"

msgid ""
"You can pass in either an integer or a string representation of an integer."
msgstr "你可以传入一个整数或整数的字符串表示。"

msgid "``intcomma``"
msgstr "``intcomma``"

msgid ""
"Converts an integer or float (or a string representation of either) to a "
"string containing commas every three digits."
msgstr ""
"将一个整数或浮点数（或其中之一的字符串表示法）转换为每三位数包含逗号的字符"
"串。"

msgid "``4500`` becomes ``4,500``."
msgstr "``4500`` 变成 ``4,500``。"

msgid "``4500.2`` becomes ``4,500.2``."
msgstr "``4500.2`` 变成 ``4,500.2``。"

msgid "``45000`` becomes ``45,000``."
msgstr "``45000`` 变成 ``45,000``。"

msgid "``450000`` becomes ``450,000``."
msgstr "``450000`` 变成 ``450,000``。"

msgid "``4500000`` becomes ``4,500,000``."
msgstr "``4500000`` 变成 ``4,500,000``。"

msgid ""
":doc:`/topics/i18n/formatting` will be respected if enabled, e.g. with the "
"``'de'`` language:"
msgstr ""
":doc:`/topics/i18n/formatting` 如果启用，例如使用 ``''de`` 语言，将得到尊重："

msgid "``45000`` becomes ``'45.000'``."
msgstr "``45000`` 变成 ``'45.000'``。"

msgid "``450000`` becomes ``'450.000'``."
msgstr "``450000`` 变成 ``'450.000'``。"

msgid "``intword``"
msgstr "``intword``"

msgid ""
"Converts a large integer (or a string representation of an integer) to a "
"friendly text representation. Translates ``1.0`` as a singular phrase and "
"all other numeric values as plural, this may be incorrect for some "
"languages. Works best for numbers over 1 million."
msgstr ""
"将大整数（或整数的字符串表示）转换为友好的文本表示。将 ``1.0`` 翻译成单数，将"
"所有其他数值翻译成复数，这对某些语言可能不正确。对于 100 万以上的数字效果最"
"好。"

msgid "``1000000`` becomes ``1.0 million``."
msgstr "``1000000`` 变成 ``1.0 million``。"

msgid "``1200000`` becomes ``1.2 million``."
msgstr "``1200000`` 变成 ``1.2 million``。"

msgid "``1200000000`` becomes ``1.2 billion``."
msgstr "``1200000000`` 变成 ``1.2 billion``。"

msgid "``-1200000000`` becomes ``-1.2 billion``."
msgstr "``-1200000000`` 变成 ``-1.2 billion``。"

msgid "Values up to 10^100 (Googol) are supported."
msgstr "支持最高 10^100（Googol）的数值。"

msgid "``1000000`` becomes ``'1,0 Million'``."
msgstr "``1000000`` 变成 ``'1,0 Million'``。"

msgid "``1200000`` becomes ``'1,2 Millionen'``."
msgstr "``1200000`` 变成 ``'1,2 Millionen'``。"

msgid "``1200000000`` becomes ``'1,2 Milliarden'``."
msgstr "``1200000000`` 变成 ``'1,2 Milliarden'``。"

msgid "``-1200000000`` becomes ``'-1,2 Milliarden'``."
msgstr "``-1200000000`` 变成 ``'-1,2 Milliarden'``。"

msgid "``naturalday``"
msgstr "``naturalday``"

msgid ""
"For dates that are the current day or within one day, return \"today\", "
"\"tomorrow\" or \"yesterday\", as appropriate. Otherwise, format the date "
"using the passed in format string."
msgstr ""
"对于当天或一天之内的日期，根据情况返回 “today”、“tomorrow” 或 “yesterday”。否"
"则，使用传入的格式字符串格式化日期。"

msgid ""
"**Argument:** Date formatting string as described in the :tfilter:`date` tag."
msgstr "**参数：**日期格式化字符串，如 :tfilter:`date` 标签所述。"

msgid "Examples (when 'today' is 17 Feb 2007):"
msgstr "例子（当 'today' 是 2007 年 2 月 17 日）："

msgid "``16 Feb 2007`` becomes ``yesterday``."
msgstr "``16 Feb 2007`` 变成 ``yesterday``。"

msgid "``17 Feb 2007`` becomes ``today``."
msgstr "``17 Feb 2007`` 变成 ``today``。"

msgid "``18 Feb 2007`` becomes ``tomorrow``."
msgstr "``18 Feb 2007`` 变成 ``tomorrow``。"

msgid ""
"Any other day is formatted according to given argument or the :setting:"
"`DATE_FORMAT` setting if no argument is given."
msgstr ""
"任何其他的日子都会根据给定的参数进行格式化，如果没有给定参数，则根据 :"
"setting:`DATE_FORMAT` 配置。"

msgid "``naturaltime``"
msgstr "``naturaltime``"

msgid ""
"For datetime values, returns a string representing how many seconds, minutes "
"or hours ago it was -- falling back to the :tfilter:`timesince` format if "
"the value is more than a day old. In case the datetime value is in the "
"future the return value will automatically use an appropriate phrase."
msgstr ""
"对于日期时间值，返回一个字符串，代表多少秒、多少分钟或多少小时前 —— 如果值超"
"过一天，则返回到 :tfilter:`timesince` 格式。如果日期时间值是在未来，返回值将"
"自动使用一个适当的短语。"

msgid "Examples (when 'now' is 17 Feb 2007 16:30:00):"
msgstr "例子（当 'now' 是 2007 年 2 月 17 日 16:30:00）："

msgid "``17 Feb 2007 16:30:00`` becomes ``now``."
msgstr "``17 Feb 2007 16:30:00`` 变成 ``now``。"

msgid "``17 Feb 2007 16:29:31`` becomes ``29 seconds ago``."
msgstr "``17 Feb 2007 16:29:31`` 变成 ``29 seconds ago``。"

msgid "``17 Feb 2007 16:29:00`` becomes ``a minute ago``."
msgstr "``17 Feb 2007 16:29:00`` 变成 ``a minute ago``。"

msgid "``17 Feb 2007 16:25:35`` becomes ``4 minutes ago``."
msgstr "``17 Feb 2007 16:25:35`` 变成 ``4 minutes ago``。"

msgid "``17 Feb 2007 15:30:29`` becomes ``59 minutes ago``."
msgstr "``17 Feb 2007 15:30:29`` 变成 ``59 minutes ago``。"

msgid "``17 Feb 2007 15:30:01`` becomes ``59 minutes ago``."
msgstr "``17 Feb 2007 15:30:01`` 变成 ``59 minutes ago``。"

msgid "``17 Feb 2007 15:30:00`` becomes ``an hour ago``."
msgstr "``17 Feb 2007 15:30:00`` 变成 ``an hour ago``。"

msgid "``17 Feb 2007 13:31:29`` becomes ``2 hours ago``."
msgstr "``17 Feb 2007 13:31:29`` 变成 ``2 hours ago``。"

msgid "``16 Feb 2007 13:31:29`` becomes ``1 day, 2 hours ago``."
msgstr "``16 Feb 2007 13:31:29`` 变成 ``1 day, 2 hours ago``。"

msgid "``16 Feb 2007 13:30:01`` becomes ``1 day, 2 hours ago``."
msgstr "``16 Feb 2007 13:30:01`` 变成 ``1 day, 2 hours ago``。"

msgid "``16 Feb 2007 13:30:00`` becomes ``1 day, 3 hours ago``."
msgstr "``16 Feb 2007 13:30:00`` 变成 ``1 day, 3 hours ago``。"

msgid "``17 Feb 2007 16:30:30`` becomes ``30 seconds from now``."
msgstr "``17 Feb 2007 16:30:30`` 变成 ``30 seconds from now``。"

msgid "``17 Feb 2007 16:30:29`` becomes ``29 seconds from now``."
msgstr "``17 Feb 2007 16:30:29`` 变成 ``29 seconds from now``。"

msgid "``17 Feb 2007 16:31:00`` becomes ``a minute from now``."
msgstr "``17 Feb 2007 16:31:00`` 变成 ``a minute from now``。"

msgid "``17 Feb 2007 16:34:35`` becomes ``4 minutes from now``."
msgstr "``17 Feb 2007 16:34:35`` 变成 ``4 minutes from now``。"

msgid "``17 Feb 2007 17:30:29`` becomes ``an hour from now``."
msgstr "``17 Feb 2007 17:30:29`` 变成 ``an hour from now``。"

msgid "``17 Feb 2007 18:31:29`` becomes ``2 hours from now``."
msgstr "``17 Feb 2007 18:31:29`` 变成 ``2 hours from now``。"

msgid "``18 Feb 2007 16:31:29`` becomes ``1 day from now``."
msgstr "``18 Feb 2007 16:31:29`` 变成 ``1 day from now``。"

msgid "``26 Feb 2007 18:31:29`` becomes ``1 week, 2 days from now``."
msgstr "``26 Feb 2007 18:31:29`` 变成 ``1 week, 2 days from now``。"

msgid "``ordinal``"
msgstr "``ordinal``"

msgid "Converts an integer to its ordinal as a string."
msgstr "将一个整数转换为字符串的序数。"

msgid "``1`` becomes ``1st``."
msgstr "``1`` 变成 ``1st``。"

msgid "``2`` becomes ``2nd``."
msgstr "``2`` 变成 ``2nd``。"

msgid "``3`` becomes ``3rd``."
msgstr "``3`` 变成 ``3rd``。"

msgid "``contrib`` packages"
msgstr "``contrib`` 包"

msgid ""
"Django aims to follow Python's :ref:`\"batteries included\" philosophy <tut-"
"batteries-included>`. It ships with a variety of extra, optional tools that "
"solve common web development problems."
msgstr ""

msgid ""
"This code lives in :source:`django/contrib` in the Django distribution. This "
"document gives a rundown of the packages in ``contrib``, along with any "
"dependencies those packages have."
msgstr ""

msgid "Including ``contrib`` packages in ``INSTALLED_APPS``"
msgstr ""

msgid ""
"For most of these add-ons -- specifically, the add-ons that include either "
"models or template tags -- you'll need to add the package name (e.g., "
"``'django.contrib.redirects'``) to your :setting:`INSTALLED_APPS` setting "
"and rerun ``manage.py migrate``."
msgstr ""

msgid ""
"The automatic Django administrative interface. For more information, see :"
"doc:`Tutorial 2 </intro/tutorial02>` and the :doc:`admin documentation </ref/"
"contrib/admin/index>`."
msgstr ""
"Django 自动管理界面。更多信息请参见 :doc:`教程 2 </intro/tutorial02>` 和 :"
"doc:`管理文档 </ref/contrib/admin/index>`。"

msgid "Requires the auth_ and contenttypes_ contrib packages to be installed."
msgstr "需要安装 auth_ 和 contenttypes_ contrib 包。"

msgid "Django's authentication framework."
msgstr "Django 的认证框架。"

msgid "See :doc:`/topics/auth/index`."
msgstr "参见 :doc:`/topics/auth/index`。"

msgid ""
"A light framework for hooking into \"types\" of content, where each "
"installed Django model is a separate content type."
msgstr ""
"一个轻量级的框架，用于钩入 “多种类型” 的内容，每个安装的 Django 模型都是一个"
"独立的内容类型。"

msgid "See the :doc:`contenttypes documentation </ref/contrib/contenttypes>`."
msgstr "参见 :doc:`contenttypes 文档 </ref/contrib/contenttypes>`。"

msgid "``flatpages``"
msgstr "``flatpages``"

msgid "A framework for managing \"flat\" HTML content in a database."
msgstr "一个在数据库中管理 “简单” HTML 内容的框架。"

msgid "See the :doc:`flatpages documentation </ref/contrib/flatpages>`."
msgstr "参见 :doc:`简单页面文档 </ref/contrib/flatpages>`。"

msgid "Requires the sites_ contrib package to be installed as well."
msgstr "需要同时安装 sites_ contrib 包。"

msgid "``gis``"
msgstr "``gis``"

msgid ""
"A world-class geospatial framework built on top of Django, that enables "
"storage, manipulation and display of spatial data."
msgstr ""
"一个建立在 Django 之上的世界级地理空间框架，可以实现空间数据的存储、操作和显"
"示。"

msgid "See the :doc:`/ref/contrib/gis/index` documentation for more."
msgstr "参见 :doc:`/ref/contrib/gis/index` 文档。"

msgid "``humanize``"
msgstr "``humanize``"

msgid "See the :doc:`humanize documentation </ref/contrib/humanize>`."
msgstr "参见 :doc:`人性化文档 </ref/contrib/humanize>`。"

msgid "``messages``"
msgstr "``messages``"

msgid ""
"A framework for storing and retrieving temporary cookie- or session-based "
"messages"
msgstr "一个存储和检索基于 cookie 或会话的临时消息的框架。"

msgid "See the :doc:`messages documentation </ref/contrib/messages>`."
msgstr "参见 :doc:`消息文档 </ref/contrib/messages>`。"

msgid "A collection of PostgreSQL specific features."
msgstr "一个 PostgreSQL 特定功能的集合。"

msgid ""
"See the :doc:`contrib.postgres documentation </ref/contrib/postgres/index>`."
msgstr "参见 :doc:`contrib.postgres 文档 </ref/contrib/postgres/index>`。"

msgid "``redirects``"
msgstr "``redirects``"

msgid "A framework for managing redirects."
msgstr "一个管理重定向的框架。"

msgid "See the :doc:`redirects documentation </ref/contrib/redirects>`."
msgstr "参见 :doc:`重定向文档 </ref/contrib/redirects>`。"

msgid "``sessions``"
msgstr "``sessions``"

msgid "A framework for storing data in anonymous sessions."
msgstr "一个在匿名会话中存储数据的框架。"

msgid "See the :doc:`sessions documentation </topics/http/sessions>`."
msgstr "参见 :doc:`会话文档 </topics/http/sessions>`。"

msgid ""
"A light framework that lets you operate multiple websites off of the same "
"database and Django installation. It gives you hooks for associating objects "
"to one or more sites."
msgstr ""
"一个轻量级的框架，可以让你在同一个数据库和 Django 安装下操作多个网站。它为你"
"提供了将对象关联到一个或多个网站的钩子。"

msgid "See the :doc:`sites documentation </ref/contrib/sites>`."
msgstr "参见 :doc:`站点文档 </ref/contrib/sites>`。"

msgid "``sitemaps``"
msgstr "``sitemaps``"

msgid "A framework for generating Google sitemap XML files."
msgstr "一个用于生成 Google 网站地图 XML 文件的框架。"

msgid "See the :doc:`sitemaps documentation </ref/contrib/sitemaps>`."
msgstr "参见 :doc:`站点地图文档 </ref/contrib/sitemaps>`。"

msgid "``syndication``"
msgstr "``syndication``"

msgid ""
"A framework for generating syndication feeds, in RSS and Atom, quite easily."
msgstr "以 RSS 和 Atom 形式很容易地生成聚合 feed 的框架。"

msgid "See the :doc:`syndication documentation </ref/contrib/syndication>`."
msgstr "参见 :doc:`聚合框架文档 </ref/contrib/syndication>`。"

msgid "Other add-ons"
msgstr "其他附加功能"

msgid ""
"If you have an idea for functionality to include in ``contrib``, let us "
"know! Code it up, and post it to the |django-users| mailing list."
msgstr ""
"如果你有一个关于 ``contrib`` 的功能的想法，请告诉我们！把它写成代码，并发布"
"到 |django-users| 邮件列表。"

msgid "The messages framework"
msgstr "消息框架"

msgid ""
"Quite commonly in web applications, you need to display a one-time "
"notification message (also known as \"flash message\") to the user after "
"processing a form or some other types of user input."
msgstr ""
"在网页应用中，相当常见的是，你需要在处理完一个表单或一些其他类型的用户输入"
"后，向用户显示一个一次性的通知消息（也称为“即时消息”）。"

msgid ""
"For this, Django provides full support for cookie- and session-based "
"messaging, for both anonymous and authenticated users. The messages "
"framework allows you to temporarily store messages in one request and "
"retrieve them for display in a subsequent request (usually the next one). "
"Every message is tagged with a specific ``level`` that determines its "
"priority (e.g., ``info``, ``warning``, or ``error``)."
msgstr ""
"为此，Django 为匿名用户和认证用户提供了对基于 cookie 和会话的消息传递的全面支"
"持。消息框架允许你在一个请求中临时存储消息，并在随后的请求（通常是下一个请"
"求）中检索显示。每条消息都有一个特定的 ``level`` 标签，以确定其优先级（例如，"
"``info``、``warning`` 或 ``error``）。"

msgid "Enabling messages"
msgstr "启用消息"

msgid ""
"Messages are implemented through a :doc:`middleware </ref/middleware>` class "
"and corresponding :doc:`context processor </ref/templates/api>`."
msgstr ""
"消息是通过一个 :doc:`中间件 </ref/middleware>` 类和相应的 :doc:`上下文处理器 "
"</ref/templates/api>` 来实现的。"

msgid ""
"The default ``settings.py`` created by ``django-admin startproject`` already "
"contains all the settings required to enable message functionality:"
msgstr ""
"由 ``django-admin startproject`` 创建的默认 ``settings.py`` 已经包含了启用消"
"息功能所需的所有配置："

msgid "``'django.contrib.messages'`` is in :setting:`INSTALLED_APPS`."
msgstr "``'django.contrib.messages'`` 在 :setting:`INSTALLED_APPS` 中。"

msgid ""
":setting:`MIDDLEWARE` contains ``'django.contrib.sessions.middleware."
"SessionMiddleware'`` and ``'django.contrib.messages.middleware."
"MessageMiddleware'``."
msgstr ""
":setting:`MIDDLEWARE` 包含 ``'django.contrib.session.middleware."
"SessionMiddleware'`` 和 ``'django.contrib.message.middleware."
"MessageMiddleware'``。"

msgid ""
"The default :ref:`storage backend <message-storage-backends>` relies on :doc:"
"`sessions </topics/http/sessions>`. That's why ``SessionMiddleware`` must be "
"enabled and appear before ``MessageMiddleware`` in :setting:`MIDDLEWARE`."
msgstr ""
"默认的 :ref:`存储后端 <message-storage-backends>` 依赖于 :doc:`会话 </topics/"
"http/sessions>`。这就是为什么 ``SessionMiddleware`` 必须被启用，并且出现在 :"
"setting:`MIDDLEWARE` 中 ``MessageMiddleware`` 之前。"

msgid ""
"The ``'context_processors'`` option of the ``DjangoTemplates`` backend "
"defined in your :setting:`TEMPLATES` setting contains ``'django.contrib."
"messages.context_processors.messages'``."
msgstr ""
"在你的 :setting:`TEMPLATES` 配置中定义的 ``DjangoTemplates`` 后端的 "
"``''context_processors'`` 选项中包含 ``'django.contrib.messages."
"context_processors.messages'``。"

msgid ""
"If you don't want to use messages, you can remove ``'django.contrib."
"messages'`` from your :setting:`INSTALLED_APPS`, the ``MessageMiddleware`` "
"line from :setting:`MIDDLEWARE`, and the ``messages`` context processor "
"from :setting:`TEMPLATES`."
msgstr ""
"如果你不想使用消息，你可以从你的 :setting:`INSTALLED_APPS` 中删除 ``'django."
"contrib.messages'``，从 :setting:`MIDDLEWARE` 中删除 ``MessageMiddleware`` "
"行，从 :setting:`TEMPLATES` 中删除 ``messages`` 上下文处理器。"

msgid "Configuring the message engine"
msgstr "设置消息引擎"

msgid "Storage backends"
msgstr "存储后端"

msgid ""
"The messages framework can use different backends to store temporary "
"messages."
msgstr "消息框架可以使用不同的后端来存储临时消息。"

msgid ""
"Django provides three built-in storage classes in :mod:`django.contrib."
"messages`:"
msgstr "Django 在 :mod:`django.contrib.messages` 中提供了三个内置的存储类。"

msgid ""
"This class stores all messages inside of the request's session. Therefore it "
"requires Django's ``contrib.sessions`` application."
msgstr ""
"这个类在请求的会话中存储所有的消息。因此它需要 Django 的 ``contrib.session`` "
"应用。"

msgid ""
"This class stores the message data in a cookie (signed with a secret hash to "
"prevent manipulation) to persist notifications across requests. Old messages "
"are dropped if the cookie data size would exceed 2048 bytes."
msgstr ""
"该类将消息数据存储在 cookie 中（用密钥哈希签名，以防止被篡改），以便在不同的"
"请求中持久保存通知。如果 cookie 数据大小超过 2048 字节，旧的消息就会被删除。"

msgid ""
"This class first uses ``CookieStorage``, and falls back to using "
"``SessionStorage`` for the messages that could not fit in a single cookie. "
"It also requires Django's ``contrib.sessions`` application."
msgstr ""
"这个类首先使用了 ``CookieStorage``，然后又回到了使用 ``SessionStorage`` 来处"
"理无法放入单个 cookie 的消息。它也需要 Django 的 ``contrib.session`` 应用。"

msgid ""
"This behavior avoids writing to the session whenever possible. It should "
"provide the best performance in the general case."
msgstr "这种行为尽可能避免向会话写入。在一般情况下，它应该提供最好的性能。"

msgid ""
":class:`~django.contrib.messages.storage.fallback.FallbackStorage` is the "
"default storage class. If it isn't suitable to your needs, you can select "
"another storage class by setting :setting:`MESSAGE_STORAGE` to its full "
"import path, for example::"
msgstr ""
":class:`~django.contrib.message.storage.fallback.FallbackStorage` 是默认的存"
"储类。如果它不适合你的需求，你可以通过设置 :setting:`MESSAGE_STORAGE` 到它的"
"完整导入路径来选择其他存储类，例如："

msgid ""
"To write your own storage class, subclass the ``BaseStorage`` class in "
"``django.contrib.messages.storage.base`` and implement the ``_get`` and "
"``_store`` methods."
msgstr ""
"要编写自己的存储类，请将 ``django.contrib.messages.storage.base`` 中的 "
"``BaseStorage`` 类子类化，并实现 ``_get`` 和 ``_store`` 方法。"

msgid "Message levels"
msgstr "消息级别"

msgid ""
"The messages framework is based on a configurable level architecture similar "
"to that of the Python logging module. Message levels allow you to group "
"messages by type so they can be filtered or displayed differently in views "
"and templates."
msgstr ""
"消息框架是基于一个类似于 Python 日志模块的可配置级别架构。消息级别允许你按类"
"型对消息进行分组，以便在视图和模板中以不同的方式对它们进行过滤或显示。"

msgid ""
"The built-in levels, which can be imported from ``django.contrib.messages`` "
"directly, are:"
msgstr "可以直接从 ``django.contrib.messages`` 导入的内置级别有："

msgid "Constant"
msgstr "常量"

msgid "Purpose"
msgstr "目的"

msgid "``DEBUG``"
msgstr "``DEBUG``"

msgid ""
"Development-related messages that will be ignored (or removed) in a "
"production deployment"
msgstr "与开发相关的消息，在生产部署中将被忽略（或删除）"

msgid "``INFO``"
msgstr "``INFO``"

msgid "Informational messages for the user"
msgstr "给用户的参考消息"

msgid "``SUCCESS``"
msgstr "``SUCCESS``"

msgid ""
"An action was successful, e.g. \"Your profile was updated successfully\""
msgstr "一个动作成功了，例如：“您的资料更新成功”"

msgid "``WARNING``"
msgstr "``WARNING``"

msgid "A failure did not occur but may be imminent"
msgstr "未发生的故障，但可能即将发生"

msgid "``ERROR``"
msgstr "``ERROR``"

msgid "An action was **not** successful or some other failure occurred"
msgstr "某项动作 **没有** 成功或发生了其他故障"

msgid ""
"The :setting:`MESSAGE_LEVEL` setting can be used to change the minimum "
"recorded level (or it can be `changed per request`_). Attempts to add "
"messages of a level less than this will be ignored."
msgstr ""
":setting:`MESSAGE_LEVEL` 的配置可以用来改变最小记录级别（或者可以 `按请求改变"
"`_ ）。试图添加小于这个级别的信息将被忽略。"

msgid "Message tags"
msgstr "消息标签"

msgid ""
"Message tags are a string representation of the message level plus any extra "
"tags that were added directly in the view (see `Adding extra message tags`_ "
"below for more details). Tags are stored in a string and are separated by "
"spaces. Typically, message tags are used as CSS classes to customize message "
"style based on message type. By default, each level has a single tag that's "
"a lowercase version of its own constant:"
msgstr ""
"消息标签是消息级别的字符串表示，加上任何直接在视图中添加的额外标签（更多细节"
"请参见下面的 `添加额外的消息标签`_ ）。标签存储在一个字符串中，并由空格分隔。"
"通常情况下，消息标签被用作 CSS 类，以根据消息类型自定义消息样式。默认情况下，"
"每个级别都有一个单独的标签，它是自己常量的小写版本。"

msgid "Level Constant"
msgstr "消息常量"

msgid "Tag"
msgstr "标签"

msgid "``debug``"
msgstr "``debug``"

msgid "``info``"
msgstr "``info``"

msgid "``success``"
msgstr "``success``"

msgid "``warning``"
msgstr "``warning``"

msgid "``error``"
msgstr "``error``"

msgid ""
"To change the default tags for a message level (either built-in or custom), "
"set the :setting:`MESSAGE_TAGS` setting to a dictionary containing the "
"levels you wish to change. As this extends the default tags, you only need "
"to provide tags for the levels you wish to override::"
msgstr ""
"要更改消息级别（内置或自定义）的默认标签，请将 :setting:`MESSAGE_TAGS` 设置为"
"包含你希望更改的级别的字典。由于这扩展了默认标签，你只需要为你希望覆盖的级别"
"提供标签："

msgid "Using messages in views and templates"
msgstr "在视图和模板中使用消息"

msgid "Adding a message"
msgstr "添加一个消息"

msgid "To add a message, call::"
msgstr "要添加一个消息，调用："

msgid ""
"Some shortcut methods provide a standard way to add messages with commonly "
"used tags (which are usually represented as HTML classes for the message)::"
msgstr ""
"一些快捷方法提供了一种添加消息的标准方法，常用的标签（通常表示为消息的 HTML "
"类）："

msgid "Displaying messages"
msgstr "显示消息"

msgid "**In your template**, use something like:"
msgstr ""

msgid ""
"If you're using the context processor, your template should be rendered with "
"a ``RequestContext``. Otherwise, ensure ``messages`` is available to the "
"template context."
msgstr ""
"如果你正在使用上下文处理器，你的模板应该用 ``RequestContext`` 来渲染。否则，"
"确保模板上下文有 ``messages`` 可用。"

msgid ""
"Even if you know there is only one message, you should still iterate over "
"the ``messages`` sequence, because otherwise the message storage will not be "
"cleared for the next request."
msgstr ""
"即使你知道只有一条消息，你仍然应该遍历 ``messages`` 序列，因为否则消息存储将"
"不会为下一个请求清除。"

msgid ""
"The context processor also provides a ``DEFAULT_MESSAGE_LEVELS`` variable "
"which is a mapping of the message level names to their numeric value:"
msgstr ""

msgid ""
"**Outside of templates**, you can use :func:`~django.contrib.messages."
"get_messages`::"
msgstr ""
"**在模板之外**，你可以使用 :func:`~django.contrib.messages.get_messages`："

msgid ""
"For instance, you can fetch all the messages to return them in a :ref:"
"`JSONResponseMixin <jsonresponsemixin-example>` instead of a :class:`~django."
"views.generic.base.TemplateResponseMixin`."
msgstr ""
"例如，你可以获取所有的消息，以一个 :ref:`JSONResponseMixin` 而不是一个 :"
"class:`~django.views.generic.base.TemplateResponseMixin` 来返回它们。"

msgid ""
":func:`~django.contrib.messages.get_messages` will return an instance of the "
"configured storage backend."
msgstr ""
":func:`~django.contrib.message.get_messages` 将返回一个配置好的存储后端的实"
"例。"

msgid "The ``Message`` class"
msgstr "``Message`` 类"

msgid ""
"When you loop over the list of messages in a template, what you get are "
"instances of the ``Message`` class. They have only a few attributes:"
msgstr ""
"当你循环浏览模板中的消息列表时，你得到的是 ``Message`` 类的实例。它们只有几个"
"属性。"

msgid "``message``: The actual text of the message."
msgstr "``message``：消息的实际内容。"

msgid ""
"``level``: An integer describing the type of the message (see the `message "
"levels`_ section above)."
msgstr "``level``：描述消息类型的整数（见上文 `消息级别`_ 一节）。"

msgid ""
"``tags``: A string combining all the message's tags (``extra_tags`` and "
"``level_tag``) separated by spaces."
msgstr ""
"``tags``：由消息的所有标签（``extra_tags`` 和 ``level_tag``）组成的字符串，用"
"空格分隔。"

msgid ""
"``extra_tags``: A string containing custom tags for this message, separated "
"by spaces. It's empty by default."
msgstr "``extra_tags``：包含该消息的自定义标签的字符串，用空格隔开。默认为空。"

msgid ""
"``level_tag``: The string representation of the level. By default, it's the "
"lowercase version of the name of the associated constant, but this can be "
"changed if you need by using the :setting:`MESSAGE_TAGS` setting."
msgstr ""
"``level_tag``：级别的字符串表示。默认情况下，它是相关常量名称的小写版本，但如"
"果需要的话，可以使用 :setting:`MESSAGE_TAGS` 配置来更改。"

msgid "Creating custom message levels"
msgstr "创建自定义消息级别"

msgid ""
"Messages levels are nothing more than integers, so you can define your own "
"level constants and use them to create more customized user feedback, e.g.::"
msgstr ""
"消息级别不过是整数，所以你可以定义自己的级别常数，并使用它们来创建更多定制化"
"的用户反馈，例如："

msgid ""
"When creating custom message levels you should be careful to avoid "
"overloading existing levels. The values for the built-in levels are:"
msgstr "当创建自定义消息级别时，你应该注意避免重载现有级别。内置级别的值是："

msgid "10"
msgstr "10"

msgid "20"
msgstr "20"

msgid "25"
msgstr "25"

msgid "30"
msgstr "30"

msgid "40"
msgstr "40"

msgid ""
"If you need to identify the custom levels in your HTML or CSS, you need to "
"provide a mapping via the :setting:`MESSAGE_TAGS` setting."
msgstr ""
"如果你需要在你的 HTML 或 CSS 中识别自定义级别，你需要通过 :setting:"
"`MESSAGE_TAGS` 配置提供一个映射。"

msgid ""
"If you are creating a reusable application, it is recommended to use only "
"the built-in `message levels`_ and not rely on any custom levels."
msgstr ""
"如果你正在创建一个可重用的应用程序，建议只使用内置的 `消息级别`_ ，而不要依赖"
"任何自定义级别。"

msgid "Changing the minimum recorded level per-request"
msgstr "改变每次请求的最低记录级别"

msgid ""
"The minimum recorded level can be set per request via the ``set_level`` "
"method::"
msgstr "可以通过 ``set_level`` 方法为每个请求设置最低记录级别："

msgid ""
"Similarly, the current effective level can be retrieved with ``get_level``::"
msgstr "同样，当前的有效级别可以用 ``get_level`` 检索："

msgid ""
"For more information on how the minimum recorded level functions, see "
"`Message levels`_ above."
msgstr "关于最低记录级别如何发挥作用的更多信息，请参见上文 `消息级别`_ 。"

msgid "Adding extra message tags"
msgstr "添加额外的消息标签"

msgid ""
"For more direct control over message tags, you can optionally provide a "
"string containing extra tags to any of the add methods::"
msgstr ""
"为了更直接地控制消息标签，你可以选择向任何一个添加方法提供一个包含额外标签的"
"字符串："

msgid ""
"Extra tags are added before the default tag for that level and are space "
"separated."
msgstr "额外的标签添加在该级别的默认标签之前，并以空格分隔。"

msgid "Failing silently when the message framework is disabled"
msgstr "当消息框架被禁用时静默的失败了"

msgid ""
"If you're writing a reusable app (or other piece of code) and want to "
"include messaging functionality, but don't want to require your users to "
"enable it if they don't want to, you may pass an additional keyword argument "
"``fail_silently=True`` to any of the ``add_message`` family of methods. For "
"example::"
msgstr ""
"如果你正在编写一个可重用的应用程序（或其他代码），并希望包含消息功能，但不想"
"要求用户在不愿意的情况下启用它，你可以传递一个额外的关键字参数 "
"``fail_silently=True`` 到任何 ``add_message`` 系列方法中。例如："

msgid ""
"Setting ``fail_silently=True`` only hides the ``MessageFailure`` that would "
"otherwise occur when the messages framework disabled and one attempts to use "
"one of the ``add_message`` family of methods. It does not hide failures that "
"may occur for other reasons."
msgstr ""
"设置 ``fail_silently=True`` 只隐藏 ``MessageFailure``，否则当消息框架被禁用，"
"人们试图使用 ``add_message`` 系列方法之一时，就会发生 ``MessageFailure``。它"
"不隐藏可能因其他原因而发生的失败。"

msgid "Adding messages in class-based views"
msgstr "在基于类的视图中添加消息"

msgid ""
"Adds a success message attribute to :class:`~django.views.generic.edit."
"FormView` based classes"
msgstr ""
"为 :class:`~django.view.generic.edit.FormView` 基础类添加成功消息属性。"

msgid ""
"``cleaned_data`` is the cleaned data from the form which is used for string "
"formatting"
msgstr "``cleaned_data`` 是指表单中干净的数据，用于字符串格式化。"

msgid ""
"The cleaned data from the ``form`` is available for string interpolation "
"using the ``%(field_name)s`` syntax. For ModelForms, if you need access to "
"fields from the saved ``object`` override the :meth:`~django.contrib."
"messages.views.SuccessMessageMixin.get_success_message` method."
msgstr ""
"从 ``form`` 中清理出来的数据可以使用 ``%(field_name)s`` 语法进行字符串插值。"
"对于模型表单，如果你需要访问保存的 ``object`` 中的字段，可以覆盖  :meth:"
"`~django.contrib.messages.views.SuccessMessageMixin.get_success_message` 方"
"法。"

msgid "**Example views.py for ModelForms**::"
msgstr "**模型表单的示例 views.py**："

msgid "Expiration of messages"
msgstr "消息过期"

msgid ""
"The messages are marked to be cleared when the storage instance is iterated "
"(and cleared when the response is processed)."
msgstr "这些消息被标记为在存储实例迭代时清除（在处理响应时清除）。"

msgid ""
"To avoid the messages being cleared, you can set the messages storage to "
"``False`` after iterating::"
msgstr "为了避免消息被清除，可以在迭代后将消息存储设置为 ``False``："

msgid "Behavior of parallel requests"
msgstr "并行请求的行为"

msgid ""
"Due to the way cookies (and hence sessions) work, **the behavior of any "
"backends that make use of cookies or sessions is undefined when the same "
"client makes multiple requests that set or get messages in parallel**. For "
"example, if a client initiates a request that creates a message in one "
"window (or tab) and then another that fetches any uniterated messages in "
"another window, before the first window redirects, the message may appear in "
"the second window instead of the first window where it may be expected."
msgstr ""
"由于 cookie（以及会话）的工作方式，**当同一客户端发出多个请求，并行设置或获取"
"消息时，任何使用 cookie 或会话的后端的行为都是未定义的**。例如，如果客户端发"
"起一个在一个窗口（或标签页）中创建消息的请求，然后在第一个窗口重定向之前发起"
"另一个在另一个窗口中获取任何单元化消息的请求，则消息可能会出现在第二个窗口"
"中，而不是在第一个窗口中。"

msgid ""
"In short, when multiple simultaneous requests from the same client are "
"involved, messages are not guaranteed to be delivered to the same window "
"that created them nor, in some cases, at all. Note that this is typically "
"not a problem in most applications and will become a non-issue in HTML5, "
"where each window/tab will have its own browsing context."
msgstr ""
"简而言之，当涉及来自同一客户端的多个同步请求时，不能保证将消息传递到创建这些"
"请求的同一个窗口，在某些情况下，也不能保证将消息传递到所有窗口。请注意，这在"
"大多数应用程序中通常不是问题，在 HTML5 中，这将成为不是问题，因为在 HTML5 "
"中，每个窗口／标签都有自己的浏览上下文。"

msgid ""
"A few :ref:`settings<settings-messages>` give you control over message "
"behavior:"
msgstr "一些 :ref:`配置 <settings-messages>` 给你控制消息行为。"

msgid ":setting:`MESSAGE_LEVEL`"
msgstr ":setting:`MESSAGE_LEVEL`"

msgid ":setting:`MESSAGE_STORAGE`"
msgstr ":setting:`MESSAGE_STORAGE`"

msgid ":setting:`MESSAGE_TAGS`"
msgstr ":setting:`MESSAGE_TAGS`"

msgid ""
"For backends that use cookies, the settings for the cookie are taken from "
"the session cookie settings:"
msgstr "对于使用 cookie 的后端，cookie 的配置来自会话 cookie 配置："

msgid ":setting:`SESSION_COOKIE_DOMAIN`"
msgstr ":setting:`SESSION_COOKIE_DOMAIN`"

msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ":setting:`SESSION_COOKIE_SECURE`"

msgid ":setting:`SESSION_COOKIE_HTTPONLY`"
msgstr ":setting:`SESSION_COOKIE_HTTPONLY`"

msgid "PostgreSQL specific aggregation functions"
msgstr "PostgreSQL 特有聚合函数"

msgid ""
"These functions are available from the ``django.contrib.postgres."
"aggregates`` module. They are described in more detail in the `PostgreSQL "
"docs <https://www.postgresql.org/docs/current/functions-aggregate.html>`_."
msgstr ""
"这些功能可以从 ``django.contrib.postgres.aggregates`` 模块中获得。在 "
"`PostgreSQL docs <https://www.postgresql.org/docs/current/functions-"
"aggregate.html>`_ 中对这些功能有更详细的描述。"

msgid ""
"All functions come without default aliases, so you must explicitly provide "
"one. For example:"
msgstr ""

msgid "Common aggregate options"
msgstr "通用聚合选项"

msgid ""
"All aggregates have the :ref:`filter <aggregate-filter>` keyword argument "
"and most also have the :ref:`default <aggregate-default>` keyword argument."
msgstr ""
"所有的聚合都有 :ref:`filter <aggregate-filter>` 关键字参数，大多数也有 :ref:"
"`default <aggregate-default>` 关键字参数。"

msgid "General-purpose aggregation functions"
msgstr "通用聚合函数"

msgid "``ArrayAgg``"
msgstr "``ArrayAgg``"

msgid ""
"Returns a list of values, including nulls, concatenated into an array, or "
"``default`` if there are no values."
msgstr ""
"返回一个值的列表，包括空值，串联成一个数组，如果没有值，则返回 ``default``。"

msgid ""
"An optional boolean argument that determines if array values will be "
"distinct. Defaults to ``False``."
msgstr "一个可选的布尔参数，用于确定数组值是否会被去重。默认值为 ``False``。"

msgid ""
"An optional string of a field name (with an optional ``\"-\"`` prefix which "
"indicates descending order) or an expression (or a tuple or list of strings "
"and/or expressions) that specifies the ordering of the elements in the "
"result list."
msgstr ""
"可选的字段名字符串（可选的 ``\"-\"`` 前缀表示降序）或表达式（或字符串和／或表"
"达式的元组或列表），指定结果列表中元素的顺序。"

msgid "Examples::"
msgstr "举例："

msgid ""
"If there are no rows and ``default`` is not provided, ``ArrayAgg`` returns "
"an empty list instead of ``None``. This behavior is deprecated and will be "
"removed in Django 5.0. If you need it, explicitly set ``default`` to "
"``Value([])``."
msgstr ""
"如果没有行，并且没有提供 ``default``，``ArrayAgg`` 会返回一个空列表，而不是 "
"``None``。这个行为已被废弃，并将在 Django 5.0 中被删除。如果你需要它，请明确"
"设置 ``default`` 为 ``Value([])``。"

msgid "``BitAnd``"
msgstr "``BitAnd``"

msgid ""
"Returns an ``int`` of the bitwise ``AND`` of all non-null input values, or "
"``default`` if all values are null."
msgstr ""
"返回所有非空输入值的位式 ``AND`` 的 ``int``，如果所有值为空，则返回 "
"``default``。"

msgid "``BitOr``"
msgstr "``BitOr``"

msgid ""
"Returns an ``int`` of the bitwise ``OR`` of all non-null input values, or "
"``default`` if all values are null."
msgstr ""
"返回所有非空输入值的位式 ``OR`` 的 ``int``，如果所有值为空，则返回 "
"``default``。"

msgid "``BitXor``"
msgstr ""

msgid ""
"Returns an ``int`` of the bitwise ``XOR`` of all non-null input values, or "
"``default`` if all values are null. It requires PostgreSQL 14+."
msgstr ""

msgid "``BoolAnd``"
msgstr "``BoolAnd``"

msgid ""
"Returns ``True``, if all input values are true, ``default`` if all values "
"are null or if there are no values, otherwise ``False``."
msgstr ""
"如果所有输入值为真，返回 ``True``，如果所有值为空或没有值，返回 ``default``，"
"否则返回 ``False``。"

msgid "Usage example::"
msgstr "使用实例："

msgid "``BoolOr``"
msgstr "``BoolOr``"

msgid ""
"Returns ``True`` if at least one input value is true, ``default`` if all "
"values are null or if there are no values, otherwise ``False``."
msgstr ""
"如果至少有一个输入值为真，则返回 ``True``，如果所有值都为空或没有值，则返回 "
"``default``，否则返回 ``False``。"

msgid "``JSONBAgg``"
msgstr "``JSONBAgg``"

msgid ""
"Returns the input values as a ``JSON`` array, or ``default`` if there are no "
"values. You can query the result using :lookup:`key and index lookups "
"<jsonfield.key>`."
msgstr ""
"返回输入值为 ``JSON`` 数组，如果没有值，则返回 ``default``。你可以使用 :"
"lookup:`key 和 index 查找 <jsonfield.key>` 来查询结果。"

msgid "Examples are the same as for :attr:`ArrayAgg.ordering`."
msgstr "例子与 :attr:`ArrayAgg.ordering` 相同。"

msgid ""
"If there are no rows and ``default`` is not provided, ``JSONBAgg`` returns "
"an empty list instead of ``None``. This behavior is deprecated and will be "
"removed in Django 5.0. If you need it, explicitly set ``default`` to "
"``Value('[]')``."
msgstr ""
"如果没有记录，并且没有提供 ``default``，``JSONBAgg`` 会返回一个空列表，而不"
"是 ``None``。这个行为已被废弃，并将在 Django 5.0 中删除。如果你需要它，请明确"
"设置 ``default`` 为 ``Value('[]')``。"

msgid "``StringAgg``"
msgstr "``StringAgg``"

msgid ""
"Returns the input values concatenated into a string, separated by the "
"``delimiter`` string, or ``default`` if there are no values."
msgstr ""
"返回输入值串联成的字符串，用 ``delimiter`` 字符串分隔，如果没有值，则返回 "
"``default``。"

msgid "Required argument. Needs to be a string."
msgstr "必要参数。需要是一个字符串。"

msgid ""
"An optional boolean argument that determines if concatenated values will be "
"distinct. Defaults to ``False``."
msgstr "一个可选的布尔参数，用于确定连接的值是否是不同的。默认值为 ``False``。"

msgid ""
"An optional string of a field name (with an optional ``\"-\"`` prefix which "
"indicates descending order) or an expression (or a tuple or list of strings "
"and/or expressions) that specifies the ordering of the elements in the "
"result string."
msgstr ""
"可选的字段名字符串（可选的 ``\"-\"`` 前缀表示降序）或表达式（或字符串和／或表"
"达式的元组或列表），指定结果字符串中元素的顺序。"

msgid ""
"If there are no rows and ``default`` is not provided, ``StringAgg`` returns "
"an empty string instead of ``None``. This behavior is deprecated and will be "
"removed in Django 5.0. If you need it, explicitly set ``default`` to "
"``Value('')``."
msgstr ""
"如果没有记录，并且没有提供 ``default``，``StringAgg`` 会返回一个空字符串，而"
"不是 ``None``。这个行为已经过时，在 Django 5.0 中会被删除。如果你需要它，请明"
"确设置 ``default`` 为 ``Value('')``。"

msgid "Aggregate functions for statistics"
msgstr "统计的聚合功能"

msgid "``y`` and ``x``"
msgstr "``y`` 和 ``x``"

msgid ""
"The arguments ``y`` and ``x`` for all these functions can be the name of a "
"field or an expression returning a numeric data. Both are required."
msgstr ""
"所有这些函数的参数 ``y`` 和 ``x`` 可以是字段名或返回数值数据的表达式。这两个"
"参数都是必须的。"

msgid "``Corr``"
msgstr "``Corr``"

msgid ""
"Returns the correlation coefficient as a ``float``, or ``default`` if there "
"aren't any matching rows."
msgstr "返回相关系数为 ``float``，如果没有任何匹配行，则返回 ``default``。"

msgid "``CovarPop``"
msgstr "``CovarPop``"

msgid ""
"Returns the population covariance as a ``float``, or ``default`` if there "
"aren't any matching rows."
msgstr "返回人口协方差为 ``float``，如果没有任何匹配的行，则返回 ``default``。"

msgid ""
"Optional. By default ``CovarPop`` returns the general population covariance. "
"However, if ``sample=True``, the return value will be the sample population "
"covariance."
msgstr ""

msgid "``RegrAvgX``"
msgstr "``RegrAvgX``"

msgid ""
"Returns the average of the independent variable (``sum(x)/N``) as a "
"``float``, or ``default`` if there aren't any matching rows."
msgstr ""
"返回自变量的平均数（``sum(x)/N``）为 ``float``，如果没有任何匹配的行，则返回 "
"``default``。"

msgid "``RegrAvgY``"
msgstr "``RegrAvgY``"

msgid ""
"Returns the average of the dependent variable (``sum(y)/N``) as a ``float``, "
"or ``default`` if there aren't any matching rows."
msgstr ""
"返回因变量的平均数（``sum(y)/N``）为 ``float``，如果没有匹配的行，则为 "
"``default``。"

msgid "``RegrCount``"
msgstr "``RegrCount``"

msgid ""
"Returns an ``int`` of the number of input rows in which both expressions are "
"not null."
msgstr "返回两个表达式都不为空的输入行数的 ``int``。"

msgid "The ``default`` argument is not supported."
msgstr "不支持 ``default`` 参数。"

msgid "``RegrIntercept``"
msgstr "``RegrIntercept``"

msgid ""
"Returns the y-intercept of the least-squares-fit linear equation determined "
"by the ``(x, y)`` pairs as a ``float``, or ``default`` if there aren't any "
"matching rows."
msgstr ""
"返回由 ``(x, y)`` 对确定的最小二乘法线性方程的 y 截距为 ``float``，如果没有任"
"何匹配行，则返回 ``default``。"

msgid "``RegrR2``"
msgstr "``RegrR2``"

msgid ""
"Returns the square of the correlation coefficient as a ``float``, or "
"``default`` if there aren't any matching rows."
msgstr ""
"返回相关系数的平方为 ``float``，如果没有任何匹配行，则返回 ``default``。"

msgid "``RegrSlope``"
msgstr "``RegrSlope``"

msgid ""
"Returns the slope of the least-squares-fit linear equation determined by the "
"``(x, y)`` pairs as a ``float``, or ``default`` if there aren't any matching "
"rows."
msgstr ""
"返回由 ``(x, y)`` 对确定的最小二乘法线性方程的斜率为 ``float``，如果没有任何"
"匹配行，则返回 ``default``。"

msgid "``RegrSXX``"
msgstr "``RegrSXX``"

msgid ""
"Returns ``sum(x^2) - sum(x)^2/N`` (\"sum of squares\" of the independent "
"variable) as a ``float``, or ``default`` if there aren't any matching rows."
msgstr ""
"返回 ``sum(x^2) - sum(x)^2/N``（自变量的 “平方之和”）为 ``float``，如果没有任"
"何匹配的行，则返回 ``default``。"

msgid "``RegrSXY``"
msgstr "``RegrSXY``"

msgid ""
"Returns ``sum(x*y) - sum(x) * sum(y)/N`` (\"sum of products\" of independent "
"times dependent variable) as a ``float``, or ``default`` if there aren't any "
"matching rows."
msgstr ""
"返回 ``sum(x*y) - sum(x) * sum(y)/N``（自变量与因变量的“乘积之和”）为 "
"``float``，如果没有任何匹配的行，则返回 ``default``。"

msgid "``RegrSYY``"
msgstr "``RegrSYY``"

msgid ""
"Returns ``sum(y^2) - sum(y)^2/N`` (\"sum of squares\" of the dependent "
"variable) as a ``float``, or ``default`` if there aren't any matching rows."
msgstr ""
"返回 ``sum(y^2) - sum(y)^2/N``（因变量的“平方之和”）为 ``float``，如果没有任"
"何匹配行，则返回 ``default``。"

msgid "Usage examples"
msgstr "使用实例："

msgid "We will use this example table:"
msgstr ""

msgid ""
"Here's some examples of some of the general-purpose aggregation functions:"
msgstr ""

msgid ""
"The next example shows the usage of statistical aggregate functions. The "
"underlying math will be not described (you can read about this, for example, "
"at `wikipedia <https://en.wikipedia.org/wiki/Regression_analysis>`_):"
msgstr ""

msgid "PostgreSQL specific database constraints"
msgstr "PostgreSQL 特有数据库约束"

msgid ""
"PostgreSQL supports additional data integrity constraints available from the "
"``django.contrib.postgres.constraints`` module. They are added in the model :"
"attr:`Meta.constraints <django.db.models.Options.constraints>` option."
msgstr ""
"PostgreSQL 支持额外的数据完整性约束，可从 ``django.contrib.postgres.cracks`` "
"模块中获得。它们被添加到模型 :attr:`Meta.constraints <django.db.models."
"Options.cracks>` 选项中。"

msgid "``ExclusionConstraint``"
msgstr "``ExclusionConstraint``"

msgid ""
"Creates an exclusion constraint in the database. Internally, PostgreSQL "
"implements exclusion constraints using indexes. The default index type is "
"`GiST <https://www.postgresql.org/docs/current/gist.html>`_. To use them, "
"you need to activate the `btree_gist extension <https://www.postgresql.org/"
"docs/current/btree-gist.html>`_ on PostgreSQL. You can install it using the :"
"class:`~django.contrib.postgres.operations.BtreeGistExtension` migration "
"operation."
msgstr ""
"在数据库中创建一个排除约束。在内部，PostgreSQL 使用索引来实现排除约束的功能。"
"默认的索引类型是 `GiST <https://www.postgresql.org/docs/current/gist."
"html>`_ 。要使用它们，你需要激活 PostgreSQL 上的 `btree_gist 扩展 <https://"
"www.postgresql.org/docs/current/btree-gist.html>`_ 。你可以使用 :class:"
"`~django.contrib.postgres.operations.BtreeGistExtension` 迁移操作来安装它。"

msgid ""
"If you attempt to insert a new row that conflicts with an existing row, an :"
"exc:`~django.db.IntegrityError` is raised. Similarly, when update conflicts "
"with an existing row."
msgstr ""
"如果你试图插入一条新的记录，而这条记录与现有的记录发生冲突，就会引发一个 :"
"exc:`~django.db.IntegrityError`。同样，当更新与现有的记录冲突时，也会发出 :"
"exc:`~django.db.IntegrityError`。"

msgid ""
"Exclusion constraints are checked during the :ref:`model validation "
"<validating-objects>`."
msgstr ""

msgid ""
"In older versions, exclusion constraints were not checked during model "
"validation."
msgstr ""

msgid "See :attr:`.BaseConstraint.name`."
msgstr ""

msgid "``expressions``"
msgstr "``expressions``"

msgid ""
"An iterable of 2-tuples. The first element is an expression or string. The "
"second element is an SQL operator represented as a string. To avoid typos, "
"you may use :class:`~django.contrib.postgres.fields.RangeOperators` which "
"maps the operators with strings. For example::"
msgstr ""
"一个二元元组的迭代。第一个元素是一个表达式或字符串。第二个元素是一个用字符串"
"表示的 SQL 操作符。为了避免错别字，你可以使用 :class:`~django.contrib."
"postgres.fields.RangeOperators` 将操作符与字符串进行映射。例如："

msgid "Restrictions on operators."
msgstr "对操作的限制。"

msgid "Only commutative operators can be used in exclusion constraints."
msgstr "只有交换运算符才能用于排除约束。"

msgid ""
"The :class:`OpClass() <django.contrib.postgres.indexes.OpClass>` expression "
"can be used to specify a custom `operator class`_ for the constraint "
"expressions. For example::"
msgstr ""

msgid "creates an exclusion constraint on ``circle`` using ``circle_ops``."
msgstr "使用 ``circle_ops`` 在 ``circle`` 上创建一个排除约束。"

msgid "Support for the ``OpClass()`` expression was added."
msgstr ""

msgid "``index_type``"
msgstr "``index_type``"

msgid ""
"The index type of the constraint. Accepted values are ``GIST`` or "
"``SPGIST``. Matching is case insensitive. If not provided, the default index "
"type is ``GIST``."
msgstr ""
"限制因素的索引类型。接受的值是 ``GIST`` 或 ``SPGIST``。匹配是不分大小写的。如"
"果没有提供，默认索引类型是 ``GIST``。"

msgid "``condition``"
msgstr "``condition``"

msgid ""
"A :class:`~django.db.models.Q` object that specifies the condition to "
"restrict a constraint to a subset of rows. For example, "
"``condition=Q(cancelled=False)``."
msgstr ""
"一个 :class:`~django.db.models.Q` 对象，用于指定将约束条件限制在行的子集上。"
"例如，``condition=Q(cancelled=False)``。"

msgid ""
"These conditions have the same database restrictions as :attr:`django.db."
"models.Index.condition`."
msgstr ""
"这些条件与 :attr:`django.db.models.Index.condition` 具有相同的数据库限制。"

msgid "``deferrable``"
msgstr "``deferrable``"

msgid ""
"Set this parameter to create a deferrable exclusion constraint. Accepted "
"values are ``Deferrable.DEFERRED`` or ``Deferrable.IMMEDIATE``. For example::"
msgstr ""
"设置这一参数，可创建一个可推迟的排除限制。接受的值是 ``Deferrable.DEFERRED`` "
"或 ``Deferrable.IMMEDIATE``。例如："

msgid ""
"By default constraints are not deferred. A deferred constraint will not be "
"enforced until the end of the transaction. An immediate constraint will be "
"enforced immediately after every command."
msgstr ""
"默认情况下，约束条件是不推迟的。推迟的约束条件在事务结束前不会被强制执行。即"
"时约束将在每条命令后立即执行。"

msgid ""
"Deferred exclusion constraints may lead to a `performance penalty <https://"
"www.postgresql.org/docs/current/sql-createtable.html#id-1.9.3.85.9.4>`_."
msgstr ""
"延迟排除约束可能导致 `性能惩罚 <https://www.postgresql.org/docs/current/sql-"
"createtable.html#id-1.9.3.85.9.4>`_ 。"

msgid "``include``"
msgstr "``include``"

msgid ""
"A list or tuple of the names of the fields to be included in the covering "
"exclusion constraint as non-key columns. This allows index-only scans to be "
"used for queries that select only included fields (:attr:"
"`~ExclusionConstraint.include`) and filter only by indexed fields (:attr:"
"`~ExclusionConstraint.expressions`)."
msgstr ""
"一个包含在覆盖排除约束中作为非键列的字段名称的列表或元组。这允许只用索引扫"
"描，用于只选择包含的字段（:attr:`~ExclusionConstraint.include`）和只通过索引"
"字段过滤（:attr:`~ExclusionConstraint.expressions`）的查询。"

msgid ""
"``include`` is supported for GiST indexes. PostgreSQL 14+ also supports "
"``include`` for SP-GiST indexes."
msgstr ""

msgid ""
"Support for covering exclusion constraints using SP-GiST indexes on "
"PostgreSQL 14+ was added."
msgstr ""

msgid "``opclasses``"
msgstr "``opclasses``"

msgid ""
"The names of the `PostgreSQL operator classes <https://www.postgresql.org/"
"docs/current/indexes-opclass.html>`_ to use for this constraint. If you "
"require a custom operator class, you must provide one for each expression in "
"the constraint."
msgstr ""
"用于此约束的 `PostgreSQL 运算符类的名称 <https://www.postgresql.org/docs/"
"current/indexes-opclass.html>`_ 。如果你需要一个自定义的运算符类，你必须为约"
"束中的每个表达式提供一个。"

msgid ""
"The ``opclasses`` parameter is deprecated in favor of using :class:"
"`OpClass() <django.contrib.postgres.indexes.OpClass>` in :attr:"
"`~ExclusionConstraint.expressions`."
msgstr ""

msgid "``violation_error_message``"
msgstr "``violation_error_message``"

msgid ""
"The error message used when ``ValidationError`` is raised during :ref:`model "
"validation <validating-objects>`. Defaults to :attr:`.BaseConstraint."
"violation_error_message`."
msgstr ""

msgid "Examples"
msgstr "例子"

msgid ""
"The following example restricts overlapping reservations in the same room, "
"not taking canceled reservations into account::"
msgstr "以下例子限制同一房间中的重复预订，而不考虑取消的预订："

msgid ""
"In case your model defines a range using two fields, instead of the native "
"PostgreSQL range types, you should write an expression that uses the "
"equivalent function (e.g. ``TsTzRange()``), and use the delimiters for the "
"field. Most often, the delimiters will be ``'[)'``, meaning that the lower "
"bound is inclusive and the upper bound is exclusive. You may use the :class:"
"`~django.contrib.postgres.fields.RangeBoundary` that provides an expression "
"mapping for the `range boundaries <https://www.postgresql.org/docs/ current/"
"rangetypes.html#RANGETYPES-INCLUSIVITY>`_. For example::"
msgstr ""
"如果你的模型使用两个字段定义了一个范围，而不是原生的 PostgreSQL 范围类型，你"
"应该写一个使用等价函数的表达式（例如 ``TsTzRange()``），并使用字段的定界符。"
"大多数情况下，定界符将是 ``'[)'``，这意味着下界是包含性的，上界是排他性的。你"
"可以使用 :class:`~django.contrib.postgres.fields.RangeBoundary`，它为 `range "
"boundaries <https://www.postgresql.org/docs/ current/rangetypes."
"html#RANGETYPES-INCLUSIVITY>`_ 提供了一个表达式映射。例如："

msgid "PostgreSQL specific query expressions"
msgstr "PostgreSQL 特有查询表达式"

msgid ""
"These expressions are available from the ``django.contrib.postgres."
"expressions`` module."
msgstr "这些表达式可以从 ``django.contrib.postgres.expressions`` 模块中获得。"

msgid "``ArraySubquery()`` expressions"
msgstr "``ArraySubquery()`` 表达式"

msgid ""
"``ArraySubquery`` is a :class:`~django.db.models.Subquery` that uses the "
"PostgreSQL ``ARRAY`` constructor to build a list of values from the "
"queryset, which must use :meth:`.QuerySet.values` to return only a single "
"column."
msgstr ""
"``ArraySubquery`` 是一个 :class:`~django.db.models.Subquery`，使用 "
"PostgreSQL 的 ``ARRAY`` 构造函数，从查询集中建立一个值列表，它必须使用 :meth:"
"`.QuerySet.values` 来只返回一个列。"

msgid ""
"This class differs from :class:`~django.contrib.postgres.aggregates."
"ArrayAgg` in the way that it does not act as an aggregate function and does "
"not require an SQL ``GROUP BY`` clause to build the list of values."
msgstr ""
"这个类与 :class:`~django.contrib.postgres.aggregates.ArrayAgg` 不同，它不作为"
"一个聚合函数，也不需要一个 SQL ``GROUP BY`` 子句来建立值的列表。"

msgid ""
"For example, if you want to annotate all related books to an author as JSON "
"objects:"
msgstr ""

msgid "PostgreSQL specific model fields"
msgstr "PostgreSQL 特有模型字段"

msgid ""
"All of these fields are available from the ``django.contrib.postgres."
"fields`` module."
msgstr "所有这些字段都可以从 ``django.contrib.postgres.field`` 模块中获得。"

msgid "Indexing these fields"
msgstr "对这些字段进行索引"

msgid ""
":class:`~django.db.models.Index` and :attr:`.Field.db_index` both create a B-"
"tree index, which isn't particularly helpful when querying complex data "
"types. Indexes such as :class:`~django.contrib.postgres.indexes.GinIndex` "
"and :class:`~django.contrib.postgres.indexes.GistIndex` are better suited, "
"though the index choice is dependent on the queries that you're using. "
"Generally, GiST may be a good choice for the :ref:`range fields <range-"
"fields>` and :class:`HStoreField`, and GIN may be helpful for :class:"
"`ArrayField`."
msgstr ""
":class:`~django.db.models.Index` 和 :attr:`.Field.db_index` 都创建了一个 B 树"
"索引，在查询复杂的数据类型时并不是特别有用。像 :class:`~django.contrib."
"postgres.indexes.GinIndex` 和 :class:`~django.contrib.postgres.indexes."
"GistIndex` 这样的索引比较适合，不过索引的选择取决于你使用的查询。一般来说，"
"GiST 可能是 :ref:`range 字段 <range-fields>` 和 :class:`HStoreField` 的好选"
"择，而 GIN 可能对 :class:`ArrayField` 有帮助。"

msgid "``ArrayField``"
msgstr "``ArrayField``"

msgid ""
"A field for storing lists of data. Most field types can be used, and you "
"pass another field instance as the :attr:`base_field <ArrayField."
"base_field>`. You may also specify a :attr:`size <ArrayField.size>`. "
"``ArrayField`` can be nested to store multi-dimensional arrays."
msgstr ""
"一个用于存储数据列表的字段。大多数字段类型都可以使用，你可以通过另一个字段实"
"例作为 :attr:`base_field <ArrayField.base_field>`。你也可以指定一个 :attr:"
"`size <ArrayField.size>`。``ArrayField`` 可以嵌套来存储多维数组。"

msgid ""
"If you give the field a :attr:`~django.db.models.Field.default`, ensure it's "
"a callable such as ``list`` (for an empty default) or a callable that "
"returns a list (such as a function). Incorrectly using ``default=[]`` "
"creates a mutable default that is shared between all instances of "
"``ArrayField``."
msgstr ""
"如果你给字段一个 :attr:`~django.db.models.Field.default`，确保它是一个可调用"
"对象，比如 ``list`` （对于一个空的默认值），或者一个返回一个列表的可调用对象"
"（比如一个函数）。错误地使用 ``default=[]`` 会创建一个可变的默认值，这个默认"
"值在 ``ArrayField`` 的所有实例之间共享。"

msgid "This is a required argument."
msgstr "这是一个必要的参数。"

msgid ""
"Specifies the underlying data type and behavior for the array. It should be "
"an instance of a subclass of :class:`~django.db.models.Field`. For example, "
"it could be an :class:`~django.db.models.IntegerField` or a :class:`~django."
"db.models.CharField`. Most field types are permitted, with the exception of "
"those handling relational data (:class:`~django.db.models.ForeignKey`, :"
"class:`~django.db.models.OneToOneField` and :class:`~django.db.models."
"ManyToManyField`) and file fields ( :class:`~django.db.models.FileField` "
"and :class:`~django.db.models.ImageField`)."
msgstr ""

msgid ""
"It is possible to nest array fields - you can specify an instance of "
"``ArrayField`` as the ``base_field``. For example::"
msgstr ""
"可以嵌套数组字段——你可以指定一个 ``ArrayField`` 的实例作为 ``base_field``。例"
"如："

msgid ""
"Transformation of values between the database and the model, validation of "
"data and configuration, and serialization are all delegated to the "
"underlying base field."
msgstr ""
"数据库和模型之间的值的转换、数据和配置的验证以及序列化都是委托给底层基础字段"
"的。"

msgid "This is an optional argument."
msgstr "这是一个可选的参数。"

msgid ""
"If passed, the array will have a maximum size as specified. This will be "
"passed to the database, although PostgreSQL at present does not enforce the "
"restriction."
msgstr ""
"如果传入，数组将有一个指定的最大大小。这将被传递给数据库，尽管 PostgreSQL 目"
"前并没有强制执行这个限制。"

msgid ""
"When nesting ``ArrayField``, whether you use the ``size`` parameter or not, "
"PostgreSQL requires that the arrays are rectangular::"
msgstr ""
"嵌套 ``ArrayField`` 时，无论是否使用 ``size`` 参数，PostgreSQL 都要求数组为矩"
"形："

msgid ""
"If irregular shapes are required, then the underlying field should be made "
"nullable and the values padded with ``None``."
msgstr ""
"如果需要不规则的形状，则应将底层字段设为 null，并将值用 ``None`` 填充。"

msgid "Querying ``ArrayField``"
msgstr "查询 ``ArrayField``"

msgid ""
"There are a number of custom lookups and transforms for :class:`ArrayField`. "
"We will use the following example model::"
msgstr ""
":class:`ArrayField` 有许多自定义的查找和转换。我们将使用下面的示例模型："

msgid ""
"The :lookup:`contains` lookup is overridden on :class:`ArrayField`. The "
"returned objects will be those where the values passed are a subset of the "
"data. It uses the SQL operator ``@>``. For example:"
msgstr ""

msgid "``contained_by``"
msgstr "``contained_by``"

msgid ""
"This is the inverse of the :lookup:`contains <arrayfield.contains>` lookup - "
"the objects returned will be those where the data is a subset of the values "
"passed. It uses the SQL operator ``<@``. For example:"
msgstr ""

msgid "``overlap``"
msgstr "``overlap``"

msgid ""
"Returns objects where the data shares any results with the values passed. "
"Uses the SQL operator ``&&``. For example:"
msgstr ""

msgid ""
"Support for ``QuerySet.values()`` and ``values_list()`` as a right-hand side "
"was added."
msgstr ""

msgid "``len``"
msgstr "``len``"

msgid ""
"Returns the length of the array. The lookups available afterward are those "
"available for :class:`~django.db.models.IntegerField`. For example:"
msgstr ""

msgid "Index transforms"
msgstr "索引转换"

msgid ""
"Index transforms index into the array. Any non-negative integer can be used. "
"There are no errors if it exceeds the :attr:`size <ArrayField.size>` of the "
"array. The lookups available after the transform are those from the :attr:"
"`base_field <ArrayField.base_field>`. For example:"
msgstr ""

msgid ""
"PostgreSQL uses 1-based indexing for array fields when writing raw SQL. "
"However these indexes and those used in :lookup:`slices <arrayfield.slice>` "
"use 0-based indexing to be consistent with Python."
msgstr ""
"PostgreSQL 在编写原始 SQL 时，对数组字段使用基于 1 的索引。然而这些索引和 :"
"lookup:`slices <arrayfield.slice>` 中使用的索引使用基于 0 的索引，以与 "
"Python 保持一致。"

msgid "Slice transforms"
msgstr "切片转换"

msgid ""
"Slice transforms take a slice of the array. Any two non-negative integers "
"can be used, separated by a single underscore. The lookups available after "
"the transform do not change. For example:"
msgstr ""

msgid ""
"PostgreSQL uses 1-based indexing for array fields when writing raw SQL. "
"However these slices and those used in :lookup:`indexes <arrayfield.index>` "
"use 0-based indexing to be consistent with Python."
msgstr ""
"PostgreSQL 在编写原始 SQL 时，对数组字段使用基于 1 的索引。然而这些分片和 :"
"lookup:`indexes <arrayfield.index>` 中使用的分片使用基于 0 的索引，以与 "
"Python 保持一致。"

msgid "Multidimensional arrays with indexes and slices"
msgstr "带索引和切片的多维数组"

msgid ""
"PostgreSQL has some rather esoteric behavior when using indexes and slices "
"on multidimensional arrays. It will always work to use indexes to reach down "
"to the final underlying data, but most other slices behave strangely at the "
"database level and cannot be supported in a logical, consistent fashion by "
"Django."
msgstr ""
"PostgreSQL 在多维数组上使用索引和切片时，有一些相当神秘的行为。使用索引向下到"
"达最终的底层数据总是可行的，但是大多数其他的切片在数据库层面的行为很奇怪，不"
"能被 Django 以逻辑的、一致的方式支持。"

msgid "``CIText`` fields"
msgstr "``CIText`` 字段"

msgid ""
"A mixin to create case-insensitive text fields backed by the citext_ type. "
"Read about `the performance considerations`_ prior to using it."
msgstr ""
"一个用于创建由 citext_ 类型支持的不区分大小写的文本字段的混入。在使用它之前，"
"请阅读 `性能考虑因素`_ 。"

msgid ""
"To use ``citext``, use the :class:`.CITextExtension` operation to :ref:`set "
"up the citext extension <create-postgresql-extensions>` in PostgreSQL before "
"the first ``CreateModel`` migration operation."
msgstr ""
"要使用 ``citext``，使用 :class:`.CITextExtension ` 操作，在第一次 "
"``CreateModel`` 迁移操作之前，在 PostgreSQL 中 :ref:`安装 citext 扩展 "
"<create-postgresql-extensions>`。"

msgid ""
"If you're using an :class:`~django.contrib.postgres.fields.ArrayField` of "
"``CIText`` fields, you must add ``'django.contrib.postgres'`` in your :"
"setting:`INSTALLED_APPS`, otherwise field values will appear as strings like "
"``'{thoughts,django}'``."
msgstr ""
"如果你使用的是 :class:`~django.contrib.postgres.fields.ArrayField` 的 "
"``CIText`` 字段，你必须在你的 :setting:`INSTALLED_APPS` 中添加 ``'django."
"contrib.postgres'``，否则字段值会以字符串形式出现，比如 ``'{thoughts,"
"django}'``。"

msgid "Several fields that use the mixin are provided:"
msgstr "提供了几个使用混入的字段："

msgid ""
"``CICharField`` is deprecated in favor of ``CharField(db_collation=\"…\")`` "
"with a case-insensitive non-deterministic collation."
msgstr ""

msgid ""
"``CIEmailField`` is deprecated in favor of ``EmailField(db_collation=\"…"
"\")`` with a case-insensitive non-deterministic collation."
msgstr ""

msgid ""
"``CITextField`` is deprecated in favor of ``TextField(db_collation=\"…\")`` "
"with a case-insensitive non-deterministic collation."
msgstr ""

msgid ""
"These fields subclass :class:`~django.db.models.CharField`, :class:`~django."
"db.models.EmailField`, and :class:`~django.db.models.TextField`, "
"respectively."
msgstr ""
"这些字段分别是 :class:`~django.db.models.CharField`、:class:`~django.db."
"models.EmailField` 和 :class:`~django.db.models.TextField` 的子类。"

msgid ""
"``max_length`` won't be enforced in the database since ``citext`` behaves "
"similar to PostgreSQL's ``text`` type."
msgstr ""
"``max_length`` 不会在数据库中强制执行，因为 ``citext`` 与 PostgreSQL 的 "
"``text`` 类型相似。"

msgid "Case-insensitive collations"
msgstr "不区分大小写的字节序"

msgid ""
"It's preferable to use non-deterministic collations instead of the "
"``citext`` extension. You can create them using the :class:`~django.contrib."
"postgres.operations.CreateCollation` migration operation. For more details, "
"see :ref:`manage-postgresql-collations` and the PostgreSQL documentation "
"about `non-deterministic collations`_."
msgstr ""

msgid "``HStoreField``"
msgstr "``HStoreField``"

msgid ""
"A field for storing key-value pairs. The Python data type used is a "
"``dict``. Keys must be strings, and values may be either strings or nulls "
"(``None`` in Python)."
msgstr ""
"一个用于存储键值对的字段。使用的 Python 数据类型是 ``dict``。键必须是字符串，"
"值可以是字符串或空值（Python 中的 ``None``）。"

msgid "To use this field, you'll need to:"
msgstr "要使用该字段，你需要："

msgid "Add ``'django.contrib.postgres'`` in your :setting:`INSTALLED_APPS`."
msgstr ""
"在你的 :setting:`INSTALLED_APPS` 中增加 ``'django.contrib.postgres'``。"

msgid ""
":ref:`Set up the hstore extension <create-postgresql-extensions>` in "
"PostgreSQL."
msgstr ""
"在 PostgreSQL 中 :ref:`安装 hstore 扩展 <create-postgresql-extensions>`。"

msgid ""
"You'll see an error like ``can't adapt type 'dict'`` if you skip the first "
"step, or ``type \"hstore\" does not exist`` if you skip the second."
msgstr ""
"如果你跳过第一步，你会看到一个错误，比如 ``can't adapt type 'dict'``，如果你"
"跳过第二步，你会看到 ``type \"hstore\" does not exist``。"

msgid ""
"On occasions it may be useful to require or restrict the keys which are "
"valid for a given field. This can be done using the :class:`~django.contrib."
"postgres.validators.KeysValidator`."
msgstr ""
"在某些情况下，可能需要要求或限制对某个字段有效的键。这可以使用 :class:"
"`~django.contrib.postgres.validators.KeysValidator` 来完成。"

msgid "Querying ``HStoreField``"
msgstr "查询 ``HStoreField``"

msgid ""
"In addition to the ability to query by key, there are a number of custom "
"lookups available for ``HStoreField``."
msgstr "除了按键查询的功能外，``HStoreField`` 还有一些自定义查询功能。"

msgid "We will use the following example model::"
msgstr "我们将使用以下示例模型："

msgid "Key lookups"
msgstr "键查找"

msgid "To query based on a given key, you can use that key as the lookup name:"
msgstr ""

msgid "You can chain other lookups after key lookups:"
msgstr ""

msgid "or use ``F()`` expressions to annotate a key value. For example:"
msgstr ""

msgid ""
"If the key you wish to query by clashes with the name of another lookup, you "
"need to use the :lookup:`hstorefield.contains` lookup instead."
msgstr ""
"如果你想查询的键与另一个查找的名称冲突，你需要使用 :lookup:`hstorefield."
"contains` 查找来代替。"

msgid ""
"Key transforms can also be chained with: :lookup:`contains`, :lookup:"
"`icontains`, :lookup:`endswith`, :lookup:`iendswith`, :lookup:`iexact`, :"
"lookup:`regex`, :lookup:`iregex`, :lookup:`startswith`, and :lookup:"
"`istartswith` lookups."
msgstr ""
"关键词转换也可以与以下链式进行： :lookup:`contains`、:lookup:`icontains`、:"
"lookup:`endswith`、:lookup:`iendswith`、:lookup:`iexact`、:lookup:`regex`、:"
"lookup:`iregex`、:lookup:`startswith` 和 :lookup:`istartswith` 查询。"

msgid ""
"Since any string could be a key in a hstore value, any lookup other than "
"those listed below will be interpreted as a key lookup. No errors are "
"raised. Be extra careful for typing mistakes, and always check your queries "
"work as you intend."
msgstr ""
"由于任何字符串都可能是 hstore 值中的一个键，因此除了下面列出的以外的任何查询"
"都将被解释为键查询。不会出现任何错误。要格外小心输入错误，并始终检查你的查询"
"是否按照你的意图工作。"

msgid ""
"The :lookup:`contains` lookup is overridden on :class:`~django.contrib."
"postgres.fields.HStoreField`. The returned objects are those where the given "
"``dict`` of key-value pairs are all contained in the field. It uses the SQL "
"operator ``@>``. For example:"
msgstr ""

msgid ""
"This is the inverse of the :lookup:`contains <hstorefield.contains>` lookup "
"- the objects returned will be those where the key-value pairs on the object "
"are a subset of those in the value passed. It uses the SQL operator ``<@``. "
"For example:"
msgstr ""

msgid "``has_key``"
msgstr "``has_key``"

msgid ""
"Returns objects where the given key is in the data. Uses the SQL operator ``?"
"``. For example:"
msgstr ""

msgid "``has_any_keys``"
msgstr "``has_any_keys``"

msgid ""
"Returns objects where any of the given keys are in the data. Uses the SQL "
"operator ``?|``. For example:"
msgstr ""

msgid "``has_keys``"
msgstr "``has_keys``"

msgid ""
"Returns objects where all of the given keys are in the data. Uses the SQL "
"operator ``?&``. For example:"
msgstr ""

msgid "``keys``"
msgstr "``keys``"

msgid ""
"Returns objects where the array of keys is the given value. Note that the "
"order is not guaranteed to be reliable, so this transform is mainly useful "
"for using in conjunction with lookups on :class:`~django.contrib.postgres."
"fields.ArrayField`. Uses the SQL function ``akeys()``. For example:"
msgstr ""

msgid "``values``"
msgstr "``values``"

msgid ""
"Returns objects where the array of values is the given value. Note that the "
"order is not guaranteed to be reliable, so this transform is mainly useful "
"for using in conjunction with lookups on :class:`~django.contrib.postgres."
"fields.ArrayField`. Uses the SQL function ``avals()``. For example:"
msgstr ""

msgid "Range Fields"
msgstr "范围字段"

msgid ""
"There are five range field types, corresponding to the built-in range types "
"in PostgreSQL. These fields are used to store a range of values; for example "
"the start and end timestamps of an event, or the range of ages an activity "
"is suitable for."
msgstr ""
"有五种范围字段类型，对应 PostgreSQL 中内置的范围类型。这些字段用来存储一个范"
"围的值，例如一个事件的开始和结束时间戳，或者一个活动适合的年龄范围。"

msgid ""
"All of the range fields translate to :ref:`psycopg Range objects <psycopg:"
"adapt-range>` in Python, but also accept tuples as input if no bounds "
"information is necessary. The default is lower bound included, upper bound "
"excluded, that is ``[)`` (see the PostgreSQL documentation for details about "
"`different bounds`_). The default bounds can be changed for non-discrete "
"range fields (:class:`.DateTimeRangeField` and :class:`.DecimalRangeField`) "
"by using the ``default_bounds`` argument."
msgstr ""

msgid "``IntegerRangeField``"
msgstr "``IntegerRangeField``"

msgid ""
"Stores a range of integers. Based on an :class:`~django.db.models."
"IntegerField`. Represented by an ``int4range`` in the database and a "
"``django.db.backends.postgresql.psycopg_any.NumericRange`` in Python."
msgstr ""

msgid ""
"Regardless of the bounds specified when saving the data, PostgreSQL always "
"returns a range in a canonical form that includes the lower bound and "
"excludes the upper bound, that is ``[)``."
msgstr ""
"无论在保存数据时指定的边界是什么，PostgreSQL 总是以规范的形式返回一个包括下限"
"和排除上限的范围，即 ``[)``。"

msgid "``BigIntegerRangeField``"
msgstr "``BigIntegerRangeField``"

msgid ""
"Stores a range of large integers. Based on a :class:`~django.db.models."
"BigIntegerField`. Represented by an ``int8range`` in the database and a "
"``django.db.backends.postgresql.psycopg_any.NumericRange`` in Python."
msgstr ""

msgid "``DecimalRangeField``"
msgstr "``DecimalRangeField``"

msgid ""
"Stores a range of floating point values. Based on a :class:`~django.db."
"models.DecimalField`. Represented by a ``numrange`` in the database and a "
"``django.db.backends.postgresql.psycopg_any.NumericRange`` in Python."
msgstr ""

msgid ""
"Optional. The value of ``bounds`` for list and tuple inputs. The default is "
"lower bound included, upper bound excluded, that is ``[)`` (see the "
"PostgreSQL documentation for details about `different bounds`_). "
"``default_bounds`` is not used for ``django.db.backends.postgresql."
"psycopg_any.NumericRange`` inputs."
msgstr ""

msgid "``DateTimeRangeField``"
msgstr "``DateTimeRangeField``"

msgid ""
"Stores a range of timestamps. Based on a :class:`~django.db.models."
"DateTimeField`. Represented by a ``tstzrange`` in the database and a "
"``django.db.backends.postgresql.psycopg_any.DateTimeTZRange`` in Python."
msgstr ""

msgid ""
"Optional. The value of ``bounds`` for list and tuple inputs. The default is "
"lower bound included, upper bound excluded, that is ``[)`` (see the "
"PostgreSQL documentation for details about `different bounds`_). "
"``default_bounds`` is not used for ``django.db.backends.postgresql."
"psycopg_any.DateTimeTZRange`` inputs."
msgstr ""

msgid "``DateRangeField``"
msgstr "``DateRangeField``"

msgid ""
"Stores a range of dates. Based on a :class:`~django.db.models.DateField`. "
"Represented by a ``daterange`` in the database and a ``django.db.backends."
"postgresql.psycopg_any.DateRange`` in Python."
msgstr ""

msgid "Querying Range Fields"
msgstr "查询范围字段"

msgid ""
"There are a number of custom lookups and transforms for range fields. They "
"are available on all the above fields, but we will use the following example "
"model::"
msgstr ""
"对于范围字段，有许多自定义查找和转换。它们适用于所有上述字段，但我们将使用以"
"下示例模型："

msgid "We will also use the following example objects:"
msgstr ""

msgid "and ``NumericRange``:"
msgstr "和 ``NumericRange``："

msgid "Containment functions"
msgstr "包含函数"

msgid ""
"As with other PostgreSQL fields, there are three standard containment "
"operators: ``contains``, ``contained_by`` and ``overlap``, using the SQL "
"operators ``@>``, ``<@``, and ``&&`` respectively."
msgstr ""
"与其他 PostgreSQL 字段一样，有三个标准的包含运算符。``contains``、"
"``contained_by`` 和 ``overlap``，分别使用 SQL 运算符 ``@>``、``<@`` 和 "
"``&&``。"

msgid ""
"The ``contained_by`` lookup is also available on the non-range field types: :"
"class:`~django.db.models.SmallAutoField`, :class:`~django.db.models."
"AutoField`, :class:`~django.db.models.BigAutoField`, :class:`~django.db."
"models.SmallIntegerField`, :class:`~django.db.models.IntegerField`, :class:"
"`~django.db.models.BigIntegerField`, :class:`~django.db.models."
"DecimalField`, :class:`~django.db.models.FloatField`, :class:`~django.db."
"models.DateField`, and :class:`~django.db.models.DateTimeField`. For example:"
msgstr ""

msgid "Comparison functions"
msgstr "比较函数"

msgid ""
"Range fields support the standard lookups: :lookup:`lt`, :lookup:`gt`, :"
"lookup:`lte` and :lookup:`gte`. These are not particularly helpful - they "
"compare the lower bounds first and then the upper bounds only if necessary. "
"This is also the strategy used to order by a range field. It is better to "
"use the specific range comparison operators."
msgstr ""
"范围字段支持标准查询：:lookup:`lt`、:lookup:`gt`、:lookup:`lte` 和 :lookup:"
"`gte`。这些并没有特别大的帮助——它们先比较下界，然后在必要时才比较上界。这也是"
"用于按范围字段排序的策略。最好是使用特定的范围比较运算符。"

msgid "``fully_lt``"
msgstr "``fully_lt``"

msgid ""
"The returned ranges are strictly less than the passed range. In other words, "
"all the points in the returned range are less than all those in the passed "
"range."
msgstr ""
"返回的范围严格小于传入的范围。换句话说，返回范围内的所有点都小于传入范围内的"
"所有点。"

msgid "``fully_gt``"
msgstr "``fully_gt``"

msgid ""
"The returned ranges are strictly greater than the passed range. In other "
"words, the all the points in the returned range are greater than all those "
"in the passed range."
msgstr ""
"返回的范围严格大于传入的范围。换句话说，返回范围内的所有点都大于传入范围内的"
"所有点。"

msgid "``not_lt``"
msgstr "``not_lt``"

msgid ""
"The returned ranges do not contain any points less than the passed range, "
"that is the lower bound of the returned range is at least the lower bound of "
"the passed range."
msgstr ""
"返回的范围不包含任何小于传入范围的点，即返回范围的下界至少是传入范围的下界。"

msgid "``not_gt``"
msgstr "``not_gt``"

msgid ""
"The returned ranges do not contain any points greater than the passed range, "
"that is the upper bound of the returned range is at most the upper bound of "
"the passed range."
msgstr ""
"返回的范围不包含任何大于传入范围的点，也就是说，返回的范围的上界最多就是传入"
"范围的上界。"

msgid "``adjacent_to``"
msgstr "``adjacent_to``"

msgid "The returned ranges share a bound with the passed range."
msgstr "返回的范围与传入的范围共享一个边界。"

msgid "Querying using the bounds"
msgstr "使用边界进行查询"

msgid "Range fields support several extra lookups."
msgstr "范围字段支持几个额外的查找。"

msgid "``startswith``"
msgstr "``startswith``"

msgid ""
"Returned objects have the given lower bound. Can be chained to valid lookups "
"for the base field."
msgstr "返回的对象具有给定的下界。可以链入基础字段的有效查找。"

msgid "``endswith``"
msgstr "``endswith``"

msgid ""
"Returned objects have the given upper bound. Can be chained to valid lookups "
"for the base field."
msgstr "返回的对象具有给定的上界。可以链入基础字段的有效查找。"

msgid ""
"Returned objects are empty ranges. Can be chained to valid lookups for a :"
"class:`~django.db.models.BooleanField`."
msgstr ""
"返回的对象是空的范围。可以链到有效的查找 :class:`~django.db.models."
"BooleanField`。"

msgid "``lower_inc``"
msgstr "``lower_inc``"

msgid ""
"Returns objects that have inclusive or exclusive lower bounds, depending on "
"the boolean value passed. Can be chained to valid lookups for a :class:"
"`~django.db.models.BooleanField`."
msgstr ""
"根据传递的布尔值，返回具有包含或不包含下界的对象。可以链到有效的查找 :class:"
"`~django.db.models.BooleanField` 的对象。"

msgid "``lower_inf``"
msgstr "``lower_inf``"

msgid ""
"Returns objects that have unbounded (infinite) or bounded lower bound, "
"depending on the boolean value passed. Can be chained to valid lookups for "
"a :class:`~django.db.models.BooleanField`."
msgstr ""
"根据传递的布尔值，返回具有无界（无限）或仅有下界的对象。可以链到有效的查找 :"
"class:`~django.db.models.BooleanField`。"

msgid "``upper_inc``"
msgstr "``upper_inc``"

msgid ""
"Returns objects that have inclusive or exclusive upper bounds, depending on "
"the boolean value passed. Can be chained to valid lookups for a :class:"
"`~django.db.models.BooleanField`."
msgstr ""
"根据传递的布尔值，返回具有包含或不包含上界的对象。可以链到有效的查找 :class:"
"`~django.db.models.BooleanField` 的对象。"

msgid "``upper_inf``"
msgstr "``upper_inf``"

msgid ""
"Returns objects that have unbounded (infinite) or bounded upper bound, "
"depending on the boolean value passed. Can be chained to valid lookups for "
"a :class:`~django.db.models.BooleanField`."
msgstr ""
"根据传递的布尔值，返回具有无界（无限）或仅有上界的对象。可以链到有效的查找 :"
"class:`~django.db.models.BooleanField`。"

msgid "Defining your own range types"
msgstr "定义自己的范围类型"

msgid ""
"PostgreSQL allows the definition of custom range types. Django's model and "
"form field implementations use base classes below, and ``psycopg`` provides "
"a :func:`~psycopg:psycopg.types.range.register_range` to allow use of custom "
"range types."
msgstr ""

msgid "Base class for model range fields."
msgstr "模型范围字段的基类。"

msgid "The model field class to use."
msgstr "要使用的模型字段类。"

msgid "The range type to use."
msgstr ""

msgid ""
"The form field class to use. Should be a subclass of :class:`django.contrib."
"postgres.forms.BaseRangeField`."
msgstr ""
"要使用的表单字段类。应该是 :class:`django.contrib.postgres.forms."
"BaseRangeField` 的子类。"

msgid "Base class for form range fields."
msgstr "表范围字段的基类。"

msgid "The form field to use."
msgstr "要使用的表字段。"

msgid "Range operators"
msgstr "范围操作"

msgid ""
"PostgreSQL provides a set of SQL operators that can be used together with "
"the range data types (see `the PostgreSQL documentation for the full details "
"of range operators <https://www.postgresql.org/docs/current/ functions-range."
"html#RANGE-OPERATORS-TABLE>`_). This class is meant as a convenient method "
"to avoid typos. The operator names overlap with the names of corresponding "
"lookups."
msgstr ""
"PostgreSQL 提供了一组 SQL 运算符，这些运算符可以和范围数据类型一起使用（参"
"见  `the PostgreSQL documentation for the full details of range operators "
"`_ ）。这个类的目的是作为一种方便的方法，以避免排版错误。运算符名称与相应的查"
"找名称重叠。"

msgid "RangeBoundary() expressions"
msgstr "RangeBoundary() 表达式"

msgid ""
"If ``True`` (default), the lower bound is inclusive ``'['``, otherwise it's "
"exclusive ``'('``."
msgstr "如果 ``True`` （默认），则下界为包含 ``'['``，否则为不包含 ``'('``。"

msgid ""
"If ``False`` (default), the upper bound is exclusive ``')'``, otherwise it's "
"inclusive ``']'``."
msgstr "如果 ``False`` （默认），则上界为包含 ``')'``，否则为不包含 ``']'``。"

msgid ""
"A ``RangeBoundary()`` expression represents the range boundaries. It can be "
"used with a custom range functions that expected boundaries, for example to "
"define :class:`~django.contrib.postgres.constraints.ExclusionConstraint`. "
"See `the PostgreSQL documentation for the full details <https://www."
"postgresql.org/ docs/current/rangetypes.html#RANGETYPES-INCLUSIVITY>`_."
msgstr ""
"``RangeBoundary()`` 表达式表示范围边界。它可以与自定义的范围函数一起使用，预"
"期边界，例如定义 :class:`~django.contrib.postgres.constraint."
"ExclusionConstraint`。参见 `the PostgreSQL documentation for the full "
"details `_ 。"

msgid "PostgreSQL specific form fields and widgets"
msgstr "PostgreSQL 特有表单字段和部件"

msgid ""
"All of these fields and widgets are available from the ``django.contrib."
"postgres.forms`` module."
msgstr ""
"所有这些字段和部件都可以从 ``django.contrib.postgres.forms`` 模块中获得。"

msgid "``SimpleArrayField``"
msgstr "``SimpleArrayField``"

msgid ""
"A field which maps to an array. It is represented by an HTML ``<input>``."
msgstr "一个映射到数组的字段。它由一个 HTML ``<input>`` 表示。"

msgid ""
"It specifies the underlying form field for the array. This is not used to "
"render any HTML, but it is used to process the submitted data and validate "
"it. For example:"
msgstr ""

msgid ""
"This is an optional argument which defaults to a comma: ``,``. This value is "
"used to split the submitted data. It allows you to chain "
"``SimpleArrayField`` for multidimensional data:"
msgstr ""

msgid ""
"The field does not support escaping of the delimiter, so be careful in cases "
"where the delimiter is a valid character in the underlying field. The "
"delimiter does not need to be only one character."
msgstr ""
"该字段不支持定界符的转义，所以当定界符是底层字段中的有效字符时，要小心。定界"
"符不需要只用一个字符。"

msgid ""
"This is an optional argument which validates that the array does not exceed "
"the stated length."
msgstr "这是一个可选的参数，用于验证数组的长度是否超过了规定的长度。"

msgid ""
"This is an optional argument which validates that the array reaches at least "
"the stated length."
msgstr "这是一个可选的参数，用于验证数组是否至少达到了指定的长度。"

msgid "User friendly forms"
msgstr "用户友好的表单"

msgid ""
"``SimpleArrayField`` is not particularly user friendly in most cases, "
"however it is a useful way to format data from a client-side widget for "
"submission to the server."
msgstr ""
"``SimpleArrayField`` 在大多数情况下并不是特别方便用户使用，但是它是一种有用的"
"方式来格式化来自客户端部件的数据以提交给服务器。"

msgid "``SplitArrayField``"
msgstr "``SplitArrayField``"

msgid ""
"This field handles arrays by reproducing the underlying field a fixed number "
"of times."
msgstr "这个字段通过重现底层字段固定的次数来处理数组。"

msgid ""
"This is a required argument. It specifies the form field to be repeated."
msgstr "这是一个必要的参数。它指定了要重复的表单字段。"

msgid "This is the fixed number of times the underlying field will be used."
msgstr "这是基础字段的固定使用次数。"

msgid ""
"By default, this is set to ``False``. When ``False``, each value from the "
"repeated fields is stored. When set to ``True``, any trailing values which "
"are blank will be stripped from the result. If the underlying field has "
"``required=True``, but ``remove_trailing_nulls`` is ``True``, then null "
"values are only allowed at the end, and will be stripped."
msgstr ""
"默认情况下，这被设置为 ``False``。当 ``False`` 时，重复字段的每个值都会被存"
"储。当设置为 ``True`` 时，任何尾部为空白的值将从结果中删除。如果底层字段有 "
"``required=True``，但 ``remove_trailing_nulls`` 是 ``True``，那么只有在最后才"
"允许有空值，并且空值会被消除。"

msgid "Some examples::"
msgstr "一些例子："

msgid ""
"A field which accepts JSON encoded data for an :class:`~django.contrib."
"postgres.fields.HStoreField`. It casts all values (except nulls) to strings. "
"It is represented by an HTML ``<textarea>``."
msgstr ""
"一个为 :class:`~django.contrib.postgres.fields.HStoreField` 接受 JSON 编码数"
"据的字段。它将所有的值（除了空值）转换为字符串。它由一个 HTML ``<textarea>`` "
"表示。"

msgid ""
"``HStoreField`` is not particularly user friendly in most cases, however it "
"is a useful way to format data from a client-side widget for submission to "
"the server."
msgstr ""
"``HStoreField`` 在大多数情况下对用户不是特别友好，但是它是一种有用的方式来格"
"式化来自客户端部件的数据以提交给服务器。"

msgid ""
"This group of fields all share similar functionality for accepting range "
"data. They are based on :class:`~django.forms.MultiValueField`. They treat "
"one omitted value as an unbounded range. They also validate that the lower "
"bound is not greater than the upper bound. All of these fields use :class:"
"`~django.contrib.postgres.forms.RangeWidget`."
msgstr ""
"这组字段在接受范围数据方面都有类似的功能。它们基于 :class:`~django.forms."
"MultiValueField`。它们将一个省略的值视为一个无边界的范围。它们还验证了下限不"
"大于上限。所有这些字段都使用 :class:`~django.contrib.postgres.forms."
"RangeWidget`。"

msgid ""
"Based on :class:`~django.forms.IntegerField` and translates its input into "
"``django.db.backends.postgresql.psycopg_any.NumericRange``. Default for :"
"class:`~django.contrib.postgres.fields.IntegerRangeField` and :class:"
"`~django.contrib.postgres.fields.BigIntegerRangeField`."
msgstr ""

msgid ""
"Based on :class:`~django.forms.DecimalField` and translates its input into "
"``django.db.backends.postgresql.psycopg_any.NumericRange``. Default for :"
"class:`~django.contrib.postgres.fields.DecimalRangeField`."
msgstr ""

msgid ""
"Based on :class:`~django.forms.DateTimeField` and translates its input into "
"``django.db.backends.postgresql.psycopg_any.DateTimeTZRange``. Default for :"
"class:`~django.contrib.postgres.fields.DateTimeRangeField`."
msgstr ""

msgid ""
"Based on :class:`~django.forms.DateField` and translates its input into "
"``django.db.backends.postgresql.psycopg_any.DateRange``. Default for :class:"
"`~django.contrib.postgres.fields.DateRangeField`."
msgstr ""

msgid "Widgets"
msgstr "部件"

msgid "``RangeWidget``"
msgstr "``RangeWidget``"

msgid ""
"Widget used by all of the range fields. Based on :class:`~django.forms."
"MultiWidget`."
msgstr "所有范围字段都使用的部件。基于 :class:`~django.forms.MultiWidget`。"

msgid ":class:`~RangeWidget` has one required argument:"
msgstr ":class:`~RangeWidget` 有一个必要的参数："

msgid "A :class:`~RangeWidget` comprises a 2-tuple of ``base_widget``."
msgstr "一个 :class:`~RangeWidget` 由 ``base_widget`` 的二元元组组成。"

msgid ""
"Takes a single \"compressed\" value of a field, for example a :class:"
"`~django.contrib.postgres.fields.DateRangeField`, and returns a tuple "
"representing a lower and upper bound."
msgstr ""
"取一个字段的单个“压缩”值，例如一个 :class:`~django.contrib.postgres.fields."
"DateRangeField`，并返回一个元组，代表一个下界和上界。"

msgid "PostgreSQL specific database functions"
msgstr "PostgreSQL 特有数据库函数"

msgid ""
"All of these functions are available from the ``django.contrib.postgres."
"functions`` module."
msgstr "所有这些函数都可以从 ``django.contrib.postgres.function`` 模块中获得。"

msgid "``RandomUUID``"
msgstr "``RandomUUID``"

msgid "Returns a version 4 UUID."
msgstr "返回一个版本 4 的 UUID。"

msgid ""
"On PostgreSQL < 13, the `pgcrypto extension`_ must be installed. You can use "
"the :class:`~django.contrib.postgres.operations.CryptoExtension` migration "
"operation to install it."
msgstr ""
"在 PostgreSQL < 13 上，必须安装 `pgcrypto extension`_ 。你可以使用 :class:"
"`~django.contrib.postgres.operations.CryptoExtension` 迁移操作来安装它。"

msgid "Usage example:"
msgstr ""

msgid "``TransactionNow``"
msgstr "``TransactionNow``"

msgid ""
"Returns the date and time on the database server that the current "
"transaction started. If you are not in a transaction it will return the date "
"and time of the current statement. This is a complement to :class:`django.db."
"models.functions.Now`, which returns the date and time of the current "
"statement."
msgstr ""
"返回数据库服务器上当前事务开始的日期和时间。如果你不在事务中，它将返回当前语"
"句的日期和时间。这是对 :class:`django.db.models.function.Now` 的补充，后者返"
"回当前语句的日期和时间。"

msgid ""
"Note that only the outermost call to :func:`~django.db.transaction.atomic()` "
"sets up a transaction and thus sets the time that ``TransactionNow()`` will "
"return; nested calls create savepoints which do not affect the transaction "
"time."
msgstr ""
"请注意，只有最外层的 :func:`~django.db.transaction.atomic()` 的调用才会设置事"
"务，从而设置 ``TransactionNow()`` 返回的时间；嵌套调用会创建不影响事务时间的"
"保存点。"

msgid "``django.contrib.postgres``"
msgstr "``django.contrib.postgres``"

msgid ""
"PostgreSQL has a number of features which are not shared by the other "
"databases Django supports. This optional module contains model fields and "
"form fields for a number of PostgreSQL specific data types."
msgstr ""
"PostgreSQL 有许多 Django 支持的数据库所不具备的特性。这个可选的模块包含了一"
"些 PostgreSQL 特有数据类型的模型字段和表单字段。"

msgid ""
"Django is, and will continue to be, a database-agnostic web framework. We "
"would encourage those writing reusable applications for the Django community "
"to write database-agnostic code where practical. However, we recognize that "
"real world projects written using Django need not be database-agnostic. In "
"fact, once a project reaches a given size changing the underlying data store "
"is already a significant challenge and is likely to require changing the "
"code base in some ways to handle differences between the data stores."
msgstr ""
"Django 是，并将继续是一个与数据库无关的网络框架。我们鼓励那些为 Django 社区编"
"写可重用的应用程序的人，在可行的情况下编写数据库无关的代码。然而，我们也认识"
"到，在现实世界中，使用 Django 编写的项目不一定是数据库无关的。事实上，一旦一"
"个项目达到一定的规模，改变底层数据存储已经是一个重大的挑战，很可能需要通过一"
"些方式改变代码库来处理数据存储之间的差异。"

msgid ""
"Django provides support for a number of data types which will only work with "
"PostgreSQL. There is no fundamental reason why (for example) a ``contrib."
"mysql`` module does not exist, except that PostgreSQL has the richest "
"feature set of the supported databases so its users have the most to gain."
msgstr ""
"Django 提供了对一些数据类型的支持，这些数据类型只能在 PostgreSQL 中使用。除"
"了 PostgreSQL 在支持的数据库中拥有最丰富的功能，所以它的用户可以获得最大的收"
"益之外，没有任何根本的原因（例如）不存在 ``contrib.mysql`` 模块。"

msgid "PostgreSQL specific model indexes"
msgstr "PostgreSQL 特有模型索引"

msgid ""
"The following are PostgreSQL specific :doc:`indexes </ref/models/indexes>` "
"available from the ``django.contrib.postgres.indexes`` module."
msgstr ""
"以下是 PostgreSQL 特有的 :doc:`索引 </ref/models/indexes>` 可以从 ``django."
"contrib.postgres.indexes`` 模块中获得。"

msgid "``BloomIndex``"
msgstr "``BloomIndex``"

msgid "Creates a bloom_ index."
msgstr "创建一个 bloom_ 索引。"

msgid ""
"To use this index access you need to activate the bloom_ extension on "
"PostgreSQL. You can install it using the :class:`~django.contrib.postgres."
"operations.BloomExtension` migration operation."
msgstr ""
"要使用这个索引访问，你需要激活 PostgreSQL 上的 bloom_ 扩展。你可以使用 :"
"class:`~django.contrib.postgres.operations.BloomExtension` 迁移操作来安装它。"

msgid ""
"Provide an integer number of bits from 1 to 4096 to the ``length`` parameter "
"to specify the length of each index entry. PostgreSQL's default is 80."
msgstr ""
"为 ``length`` 参数提供一个从 1 到 4096 的整数位，用于指定每个索引条目的长度。"
"PostgreSQL 的默认值是 80。"

msgid ""
"The ``columns`` argument takes a tuple or list of up to 32 values that are "
"integer number of bits from 1 to 4095."
msgstr ""
"``columns`` 参数取一个元组或最多 32 个值的列表，这些值是 1 到 4095 的整数位。"

msgid "``BrinIndex``"
msgstr "``BrinIndex``"

msgid ""
"Creates a `BRIN index <https://www.postgresql.org/docs/current/brin-intro."
"html>`_."
msgstr ""
"创建一个 `BRIN 索引 <https://www.postgresql.org/docs/current/brin-intro."
"html>`_ 。"

msgid ""
"Set the ``autosummarize`` parameter to ``True`` to enable `automatic "
"summarization`_ to be performed by autovacuum."
msgstr ""
"将 ``autosummarize`` 参数设置为 ``True``，启用 autovacuum 进行 `自动汇总`_ 。"

msgid "The ``pages_per_range`` argument takes a positive integer."
msgstr "``pages_per_range`` 参数取一个正整数。"

msgid "``BTreeIndex``"
msgstr "``BTreeIndex``"

msgid "Creates a B-Tree index."
msgstr "创建一个 B 树索引。"

msgid ""
"Provide an integer value from 10 to 100 to the fillfactor_ parameter to tune "
"how packed the index pages will be. PostgreSQL's default is 90."
msgstr ""
"为 fillfactor_ 参数提供一个从  10 到 100 的整数值，以调整索引页的打包程度。"
"PostgreSQL 的默认值是 90。"

msgid "``GinIndex``"
msgstr "``GinIndex``"

msgid ""
"Creates a `gin index <https://www.postgresql.org/docs/current/gin.html>`_."
msgstr ""
"创建一个 `gin 索引 <https://www.postgresql.org/docs/current/gin.html>`_ 。"

msgid ""
"To use this index on data types not in the `built-in operator classes "
"<https://www.postgresql.org/docs/current/gin-builtin-opclasses.html>`_, you "
"need to activate the `btree_gin extension <https://www.postgresql.org/docs/"
"current/btree-gin.html>`_ on PostgreSQL. You can install it using the :class:"
"`~django.contrib.postgres.operations.BtreeGinExtension` migration operation."
msgstr ""
"要想在不在 `内置运算符类 <https://www.postgresql.org/docs/current/gin-"
"builtin-opclasses.html>`_ 的数据类型上使用这个索引，需要在 PostgreSQL 上激活 "
"`btree_gin 扩展 <https://www.postgresql.org/docs/current/btree-gin.html>`_ 。"
"你可以使用 :class:`~django.contrib.postgres.operations.BtreeGinExtension` 迁"
"移操作来安装它。"

msgid ""
"Set the ``fastupdate`` parameter to ``False`` to disable the `GIN Fast "
"Update Technique`_ that's enabled by default in PostgreSQL."
msgstr ""
"将 ``fastupdate`` 参数设置为 ``False``，以禁用 PostgreSQL 中默认启用的 `GIN "
"快速更新技术`_ 。"

msgid ""
"Provide an integer number of kilobytes to the gin_pending_list_limit_ "
"parameter to tune the maximum size of the GIN pending list which is used "
"when ``fastupdate`` is enabled."
msgstr ""

msgid "``GistIndex``"
msgstr "``GistIndex``"

msgid ""
"Creates a `GiST index <https://www.postgresql.org/docs/current/gist.html>`_. "
"These indexes are automatically created on spatial fields with :attr:"
"`spatial_index=True <django.contrib.gis.db.models.BaseSpatialField."
"spatial_index>`. They're also useful on other types, such as :class:`~django."
"contrib.postgres.fields.HStoreField` or the :ref:`range fields <range-"
"fields>`."
msgstr ""
"创建一个 `GiST 索引 <https://www.postgresql.org/docs/current/gist.html>`_ 。"
"这些索引在空间字段上会自动创建 :attr:`spatial_index=True <django.contrib.gis."
"db.models.BaseSpatialField.spatial_index>`。它们在其他类型上也很有用，比如 :"
"class:`~django.contrib.postgres.field.HStoreField` 或者 :ref:`range fields`。"

msgid ""
"To use this index on data types not in the built-in `gist operator classes "
"<https://www.postgresql.org/docs/current/gist-builtin-opclasses.html>`_, you "
"need to activate the `btree_gist extension <https://www.postgresql.org/docs/"
"current/btree-gist.html>`_ on PostgreSQL. You can install it using the :"
"class:`~django.contrib.postgres.operations.BtreeGistExtension` migration "
"operation."
msgstr ""
"要在不在内置的 `gist 操作类 <https://www.postgresql.org/docs/current/gist-"
"builtin-opclasses.html>`_ 的数据类型上使用这个索引，需要在 PostgreSQL 上激活 "
"`btree_gist 扩展 <https://www.postgresql.org/docs/current/btree-gist."
"html>`_ 。你可以使用 :class:`~django.contrib.postgres.operations."
"BtreeGistExtension` 迁移操作来安装它。"

msgid ""
"Set the ``buffering`` parameter to ``True`` or ``False`` to manually enable "
"or disable `buffering build`_ of the index."
msgstr ""
"将 ``buffering`` 参数设置为 ``True`` 或 ``False``，手动启用或禁用索引的 "
"`buffering build`_ 。"

msgid "``HashIndex``"
msgstr "``HashIndex``"

msgid "Creates a hash index."
msgstr "创建一个哈希索引。"

msgid "``SpGistIndex``"
msgstr "``SpGistIndex``"

msgid ""
"Creates an `SP-GiST index <https://www.postgresql.org/docs/current/spgist."
"html>`_."
msgstr ""
"创建 `SP-GIST 索引 <https://www.postgresql.org/docs/current/spgist.html>`_ 。"

msgid "Support for covering SP-GiST indexes on PostgreSQL 14+ was added."
msgstr ""

msgid "``OpClass()`` expressions"
msgstr "``OpClass()`` 表达式"

msgid ""
"An ``OpClass()`` expression represents the ``expression`` with a custom "
"`operator class`_ that can be used to define functional indexes, functional "
"unique constraints, or exclusion constraints. To use it, you need to add "
"``'django.contrib.postgres'`` in your :setting:`INSTALLED_APPS`. Set the "
"``name`` parameter to the name of the `operator class`_."
msgstr ""

msgid ""
"creates an index on ``Lower('username')`` using ``varchar_pattern_ops``. ::"
msgstr ""

msgid ""
"creates a unique constraint on ``Upper('description')`` using "
"``text_pattern_ops``. ::"
msgstr ""

msgid "Support for exclusion constraints was added."
msgstr ""

msgid "PostgreSQL specific lookups"
msgstr "PostgreSQL 特有查找"

msgid "Trigram similarity"
msgstr "三元相似度"

msgid "``trigram_similar``"
msgstr ""

msgid ""
"The ``trigram_similar`` lookup allows you to perform trigram lookups, "
"measuring the number of trigrams (three consecutive characters) shared, "
"using a dedicated PostgreSQL extension. A trigram lookup is given an "
"expression and returns results that have a similarity measurement greater "
"than the current similarity threshold."
msgstr ""
"``trigram_similar`` 允许你使用专用的 PostgreSQL 扩展来执行三元查找，测量共享"
"的 trigram（三个连续字符）的数量。给定一个表达式进行三元查找，并返回相似度测"
"量大于当前相似度阈值的结果。"

msgid ""
"To use it, add ``'django.contrib.postgres'`` in your :setting:"
"`INSTALLED_APPS` and activate the `pg_trgm extension`_ on PostgreSQL. You "
"can install the extension using the :class:`~django.contrib.postgres."
"operations.TrigramExtension` migration operation."
msgstr ""
"要使用它，在你的 :setting:`INSTALLED_APPS` 中添加 ``'django.contrib."
"postgres'``，并在 PostgreSQL 上激活 `pg_trgm extension`_ 。你可以使用 :class:"
"`~django.contrib.postgres.operations.TrigramExtension` 迁移操作来安装这个扩"
"展。"

msgid ""
"The ``trigram_similar`` lookup can be used on :class:`~django.db.models."
"CharField` and :class:`~django.db.models.TextField`:"
msgstr ""

msgid "``trigram_word_similar``"
msgstr ""

msgid ""
"The ``trigram_word_similar`` lookup allows you to perform trigram word "
"similarity lookups using a dedicated PostgreSQL extension. It can be "
"approximately understood as measuring the greatest number of trigrams shared "
"between the parameter and any substring of the field. A trigram word lookup "
"is given an expression and returns results that have a word similarity "
"measurement greater than the current similarity threshold."
msgstr ""
"``trigram_word_similar`` 查询允许你使用专用的 PostgreSQL 扩展来进行三元词相似"
"性查询。它可以近似理解为测量参数和字段的任何子串之间共享的最大数量的三元组。"
"三元组词查找被赋予一个表达式并返回具有大于当前相似度阈值的词相似度度量的结"
"果。"

msgid ""
"The ``trigram_word_similar`` lookup can be used on :class:`~django.db.models."
"CharField` and :class:`~django.db.models.TextField`:"
msgstr ""

msgid "``trigram_strict_word_similar``"
msgstr ""

msgid ""
"Similar to :lookup:`trigram_word_similar`, except that it forces extent "
"boundaries to match word boundaries."
msgstr ""

msgid ""
"The ``trigram_strict_word_similar`` lookup can be used on :class:`~django.db."
"models.CharField` and :class:`~django.db.models.TextField`."
msgstr ""

msgid "``Unaccent``"
msgstr "``Unaccent``"

msgid ""
"The ``unaccent`` lookup allows you to perform accent-insensitive lookups "
"using a dedicated PostgreSQL extension."
msgstr ""
"``unaccent`` 查找允许你使用一个专门的 PostgreSQL 扩展来执行不区分重音的查找。"

msgid ""
"This lookup is implemented using :class:`~django.db.models.Transform`, so it "
"can be chained with other lookup functions. To use it, you need to add "
"``'django.contrib.postgres'`` in your :setting:`INSTALLED_APPS` and activate "
"the `unaccent extension on PostgreSQL`_. The :class:`~django.contrib."
"postgres.operations.UnaccentExtension` migration operation is available if "
"you want to perform this activation using migrations)."
msgstr ""
"这个查询是用 :class:`~django.db.models.Transform` 来实现的，所以它可以和其他"
"查询函数连锁使用。要使用它，你需要在你的 :setting:`INSTALLED_APPS` 中添加 "
"``'django.contrib.postgres'``，并激活 PostgreSQL 上的 `unaccent 扩展`_ 。如果"
"你想使用迁移来进行这个激活，可以使用 :class:`~django.contrib.postgres."
"operations.UnaccentExtension` 迁移操作。"

msgid ""
"The ``unaccent`` lookup can be used on :class:`~django.db.models.CharField` "
"and :class:`~django.db.models.TextField`:"
msgstr ""

msgid ""
"``unaccent`` lookups should perform fine in most use cases. However, queries "
"using this filter will generally perform full table scans, which can be slow "
"on large tables. In those cases, using dedicated full text indexing tools "
"might be appropriate."
msgstr ""
"``unaccent`` 查找在大多数使用情况下应该可以正常进行。但是，使用该过滤器的查询"
"一般会进行全表扫描，这对大表来说可能很慢。在这些情况下，使用专门的全文索引工"
"具可能是合适的。"

msgid "Database migration operations"
msgstr "数据库迁移操作"

msgid ""
"All of these :doc:`operations </ref/migration-operations>` are available "
"from the ``django.contrib.postgres.operations`` module."
msgstr ""
"所有这些 :doc:`操作 </ref/migration-operations>` 都可以从 ``django.contrib."
"postgres.operations`` 模块中获得。"

msgid "Creating extension using migrations"
msgstr "使用迁移创建扩展"

msgid ""
"You can create a PostgreSQL extension in your database using a migration "
"file. This example creates an hstore extension, but the same principles "
"apply for other extensions."
msgstr ""
"你可以使用迁移文件在数据库中创建一个 PostgreSQL 扩展。这个例子创建了一个 "
"hstore 扩展，但同样的原理也适用于其他扩展。"

msgid ""
"Set up the hstore extension in PostgreSQL before the first ``CreateModel`` "
"or ``AddField`` operation that involves :class:`~django.contrib.postgres."
"fields.HStoreField` by adding a migration with the :class:`~django.contrib."
"postgres.operations.HStoreExtension` operation. For example::"
msgstr ""
"在涉及到 :class:`~django.contrib.postgres.fields.HStoreField` 的第一个 "
"``CreateModel`` 或 ``AddField`` 操作之前，通过添加 :class:`~django.contrib."
"postgres.operations.HStoreExtension` 操作的迁移，在 PostgreSQL 中设置 hstore "
"扩展。例如："

msgid "The operation skips adding the extension if it already exists."
msgstr "如果扩展名已经存在，该操作会跳过添加。"

msgid ""
"For most extensions, this requires a database user with superuser "
"privileges. If the Django database user doesn't have the appropriate "
"privileges, you'll have to create the extension outside of Django migrations "
"with a user that has them. In that case, connect to your Django database and "
"run the query ``CREATE EXTENSION IF NOT EXISTS hstore;``."
msgstr ""
"对于大多数扩展来说，这需要一个具有超级用户权限的数据库用户。如果 Django 数据"
"库的用户没有相应的权限，你就必须在 Django 迁移之外用一个有权限的用户创建扩"
"展。在这种情况下，连接到你的 Django 数据库，并运行查询 ``CREATE EXTENSION IF "
"NOT EXISTS hstore;``。"

msgid "``CreateExtension``"
msgstr "``CreateExtension``"

msgid ""
"An ``Operation`` subclass which installs a PostgreSQL extension. For common "
"extensions, use one of the more specific subclasses below."
msgstr ""
"一个安装 PostgreSQL 扩展的 ``Operation`` 子类。对于普通的扩展，请使用下面一个"
"更具体的子类。"

msgid "This is a required argument. The name of the extension to be installed."
msgstr "这是一个必要的参数。要安装的扩展名。"

msgid "``BloomExtension``"
msgstr "``BloomExtension``"

msgid "Installs the ``bloom`` extension."
msgstr "安装 ``bloom`` 扩展。"

msgid "``BtreeGinExtension``"
msgstr "``BtreeGinExtension``"

msgid "Installs the ``btree_gin`` extension."
msgstr "安装 ``btree_gin`` 扩展。"

msgid "``BtreeGistExtension``"
msgstr "``BtreeGistExtension``"

msgid "Installs the ``btree_gist`` extension."
msgstr "安装 ``btree_gist`` 扩展。"

msgid "``CITextExtension``"
msgstr "``CITextExtension``"

msgid "Installs the ``citext`` extension."
msgstr "安装 ``citext`` 扩展。"

msgid "``CryptoExtension``"
msgstr "``CryptoExtension``"

msgid "Installs the ``pgcrypto`` extension."
msgstr "安装 ``pgcrypto`` 扩展。"

msgid "``HStoreExtension``"
msgstr "``HStoreExtension``"

msgid ""
"Installs the ``hstore`` extension and also sets up the connection to "
"interpret hstore data for possible use in subsequent migrations."
msgstr ""
"安装 ``hstore`` 扩展，并设置连接来解释 hstore 数据，以便在后续迁移中使用。"

msgid "``TrigramExtension``"
msgstr "``TrigramExtension``"

msgid "Installs the ``pg_trgm`` extension."
msgstr "安装 ``pg_trgm`` 扩展。"

msgid "``UnaccentExtension``"
msgstr "``UnaccentExtension``"

msgid "Installs the ``unaccent`` extension."
msgstr "安装 ``unaccent`` 扩展。"

msgid "Managing collations using migrations"
msgstr "使用迁移来管理整理"

msgid ""
"If you need to filter or order a column using a particular collation that "
"your operating system provides but PostgreSQL does not, you can manage "
"collations in your database using a migration file. These collations can "
"then be used with the ``db_collation`` parameter on :class:`~django.db."
"models.CharField`, :class:`~django.db.models.TextField`, and their "
"subclasses."
msgstr ""
"如果你需要使用你的操作系统提供的特定字节序来过滤或排序一个列，但 PostgreSQL "
"没有提供，你可以使用迁移文件来管理数据库中的字节序。然后，这些字节序可以在 :"
"class:`~django.db.models.CharField`、:class:`~django.db.models.TextField` 以"
"及它们的子类上使用 ``db_collation`` 参数。"

msgid "For example, to create a collation for German phone book ordering::"
msgstr "例如，为德国电话簿的排序创建一个字节序："

msgid ""
"Creates a collation with the given ``name``, ``locale`` and ``provider``."
msgstr "用给定的 ``name``、``locale`` 和 ``provider`` 创建一个字节序。"

msgid ""
"Set the ``deterministic`` parameter to ``False`` to create a non-"
"deterministic collation, such as for case-insensitive filtering."
msgstr ""
"将 ``deterministic`` 参数设置为 ``False`` 以创建一个非确定的字节序，例如用于"
"不区分大小写的过滤。"

msgid "Removes the collations named ``name``."
msgstr "移除名为 ``name`` 的字节序。"

msgid ""
"When reversed this is creating a collation with the provided ``locale``, "
"``provider``, and ``deterministic`` arguments. Therefore, ``locale`` is "
"required to make this operation reversible."
msgstr ""
"当反查时，这是用提供的 ``locale``、``provider`` 和 ``deterministic`` 参数创建"
"一个字节序。因此，需要 ``locale`` 来使这个操作可逆。"

msgid "Concurrent index operations"
msgstr "并发索引操作"

msgid ""
"PostgreSQL supports the ``CONCURRENTLY`` option to ``CREATE INDEX`` and "
"``DROP INDEX`` statements to add and remove indexes without locking out "
"writes. This option is useful for adding or removing an index in a live "
"production database."
msgstr ""
"PostgreSQL 支持 ``CREATE INDEX`` 和 ``DROP INDEX`` 语句中的 ``CONCURRENTLY`` "
"选项，以增加和删除索引而不锁定写入。这个选项对于在实际生产的数据库中添加或删"
"除索引非常有用。"

msgid ""
"Like :class:`~django.db.migrations.operations.AddIndex`, but creates an "
"index with the ``CONCURRENTLY`` option. This has a few caveats to be aware "
"of when using this option, see `the PostgreSQL documentation of building "
"indexes concurrently <https://www.postgresql.org/docs/current/ sql-"
"createindex.html#SQL-CREATEINDEX-CONCURRENTLY>`_."
msgstr ""
"就像 :class:`~django.db.migrations.operations.AddIndex` 一样，但是使用 "
"``CONCURRENTLY`` 选项创建索引。这在使用这个选项时有一些注意事项，参见 "
"`PostgreSQL 关于并发建立索引的文档 <https://www.postgresql.org/docs/current/ "
"sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY>`_ 。"

msgid ""
"Like :class:`~django.db.migrations.operations.RemoveIndex`, but removes the "
"index with the ``CONCURRENTLY`` option. This has a few caveats to be aware "
"of when using this option, see `the PostgreSQL documentation <https://www."
"postgresql.org/docs/current/sql-dropindex.html>`_."
msgstr ""
"就像 :class:`~django.db.migrations.operations.RemoveIndex` 一样，但是使用 "
"``CONCURRENTLY`` 选项来删除索引。这在使用这个选项时有一些注意事项，请看 "
"`PostgreSQL 文档 <https://www.postgresql.org/docs/current/sql-dropindex."
"html>`_ 。"

msgid ""
"The ``CONCURRENTLY`` option is not supported inside a transaction (see :ref:"
"`non-atomic migration <non-atomic-migrations>`)."
msgstr ""
"在事务中不支持 ``CONCURRENTLY`` 选项（见 :ref:`非原子性迁移 <non-atomic-"
"migrations>`）。"

msgid "Adding constraints without enforcing validation"
msgstr "添加约束条件而不强制执行验证"

msgid ""
"PostgreSQL supports the ``NOT VALID`` option with the ``ADD CONSTRAINT`` "
"statement to add check constraints without enforcing validation on existing "
"rows. This option is useful if you want to skip the potentially lengthy scan "
"of the table to verify that all existing rows satisfy the constraint."
msgstr ""
"PostgreSQL 支持 ``NOT VALID`` 选项和 ``ADD CONSTRAINT`` 语句来添加检查约束，"
"而不对现有记录进行验证。如果你想跳过潜在的冗长的表扫描来验证所有现有的记录是"
"否满足约束条件，这个选项很有用。"

msgid ""
"To validate check constraints created with the ``NOT VALID`` option at a "
"later point of time, use the :class:`~django.contrib.postgres.operations."
"ValidateConstraint` operation."
msgstr ""
"要在以后的时间点验证用 ``NOT VALID`` 选项创建的检查约束，请使用 :class:"
"`~django.contrib.postgres.operations.ValidateConstraint` 操作。"

msgid ""
"See `the PostgreSQL documentation <https://www.postgresql.org/docs/current/ "
"sql-altertable.html#SQL-ALTERTABLE-NOTES>`__ for more details."
msgstr ""
"更多细节请参见 `PostgreSQL 文档 <https://www.postgresql.org/docs/current/ "
"sql-altertable.html#SQL-ALTERTABLE-NOTES>`__ 。"

msgid ""
"Like :class:`~django.db.migrations.operations.AddConstraint`, but avoids "
"validating the constraint on existing rows."
msgstr ""
"就像 :class:`~django.db.migrations.operations.AddConstraint` 一样，但避免了对"
"现有记录进行验证约束。"

msgid ""
"Scans through the table and validates the given check constraint on existing "
"rows."
msgstr "扫描表并验证现有记录上给定的检查约束。"

msgid ""
"``AddConstraintNotValid`` and ``ValidateConstraint`` operations should be "
"performed in two separate migrations. Performing both operations in the same "
"atomic migration has the same effect as :class:`~django.db.migrations."
"operations.AddConstraint`, whereas performing them in a single non-atomic "
"migration, may leave your database in an inconsistent state if the "
"``ValidateConstraint`` operation fails."
msgstr ""
"``AddConstraintNotValid`` 和 ``ValidateConstraint`` 操作应该在两个独立的迁移"
"中执行。在同一个原子迁移中执行这两个操作的效果与 :class:`~django.db."
"migrations.operations.AddConstraint` 相同，而在一个非原子迁移中执行这两个操"
"作，如果 ``ValidateConstraint`` 操作失败，可能会使数据库处于不一致的状态。"

msgid "Full text search"
msgstr "全文搜索"

msgid ""
"The database functions in the ``django.contrib.postgres.search`` module ease "
"the use of PostgreSQL's `full text search engine <https://www.postgresql.org/"
"docs/current/textsearch.html>`_."
msgstr ""
"``django.contrib.postgres.search`` 模块中的数据库函数方便了 PostgreSQL 的 `全"
"文搜索引擎 <https://www.postgresql.org/docs/current/textsearch.html>`_ 的使"
"用。"

msgid ""
"For the examples in this document, we'll use the models defined in :doc:`/"
"topics/db/queries`."
msgstr "在本文档的例子中，我们将使用 :doc:`/topics/db/queries` 中定义的模型。"

msgid ""
"For a high-level overview of searching, see the :doc:`topic documentation </"
"topics/db/search>`."
msgstr "有关搜索的高级概述，请参见 :doc:`主题文档 </topics/db/search>`。"

msgid "The ``search`` lookup"
msgstr "``search`` 查找"

msgid ""
"A common way to use full text search is to search a single term against a "
"single column in the database. For example:"
msgstr ""

msgid ""
"This creates a ``to_tsvector`` in the database from the ``body_text`` field "
"and a ``plainto_tsquery`` from the search term ``'Cheese'``, both using the "
"default database search configuration. The results are obtained by matching "
"the query and the vector."
msgstr ""
"这将使用默认的数据库搜索配置，从 ``body_text`` 字段在数据库中创建一个 "
"``to_tsvector``，从搜索词 ``'Cheese'`` 中创建一个 ``plainto_tsquery``。通过匹"
"配查询和向量得到结果。"

msgid ""
"To use the ``search`` lookup, ``'django.contrib.postgres'`` must be in your :"
"setting:`INSTALLED_APPS`."
msgstr ""
"要使用 ``search`` 查找，``'django.contrib.postgres'`` 必须在你的 :setting:"
"`INSTALLED_APPS`。"

msgid "``SearchVector``"
msgstr "``SearchVector``"

msgid ""
"Searching against a single field is great but rather limiting. The ``Entry`` "
"instances we're searching belong to a ``Blog``, which has a ``tagline`` "
"field. To query against both fields, use a ``SearchVector``:"
msgstr ""

msgid ""
"The arguments to ``SearchVector`` can be any :class:`~django.db.models."
"Expression` or the name of a field. Multiple arguments will be concatenated "
"together using a space so that the search document includes them all."
msgstr ""
"``SearchVector`` 的参数可以是任何 :class:`~django.db.models.Expression` 或字"
"段名。多个参数将使用空格连接在一起，这样搜索文档就会包含所有参数。"

msgid ""
"``SearchVector`` objects can be combined together, allowing you to reuse "
"them. For example:"
msgstr ""

msgid ""
"See :ref:`postgresql-fts-search-configuration` and :ref:`postgresql-fts-"
"weighting-queries` for an explanation of the ``config`` and ``weight`` "
"parameters."
msgstr ""
"关于 ``config`` 和 ``weight`` 参数的解释，请参见 :ref:`postgresql-fts-search-"
"configuration` 和 :ref:`postgresql-fts-weighting-queries`。"

msgid "``SearchQuery``"
msgstr "``SearchQuery``"

msgid ""
"``SearchQuery`` translates the terms the user provides into a search query "
"object that the database compares to a search vector. By default, all the "
"words the user provides are passed through the stemming algorithms, and then "
"it looks for matches for all of the resulting terms."
msgstr ""
"``SearchQuery`` 将用户提供的术语转化为搜索查询对象，数据库将其与搜索向量进行"
"比较。默认情况下，用户提供的所有词语都会通过词干算法，然后寻找所有结果词语的"
"匹配。"

msgid ""
"If ``search_type`` is ``'plain'``, which is the default, the terms are "
"treated as separate keywords. If ``search_type`` is ``'phrase'``, the terms "
"are treated as a single phrase. If ``search_type`` is ``'raw'``, then you "
"can provide a formatted search query with terms and operators. If "
"``search_type`` is ``'websearch'``, then you can provide a formatted search "
"query, similar to the one used by web search engines. ``'websearch'`` "
"requires PostgreSQL ≥ 11. Read PostgreSQL's `Full Text Search docs`_ to "
"learn about differences and syntax. Examples:"
msgstr ""
"如果 ``search_type`` 是 ``'plain'``，即默认值，则将术语作为单独的关键字处理。"
"如果 ``search_type`` 是 ``'phrase'``，则将术语作为一个单一的短语处理。如果 "
"``search_type`` 是 ``'raw'``，那么你可以提供一个带有术语和运算符的格式化搜索"
"查询。如果 ``search_type`` 是 ``'websearch'``，那么你可以提供一个格式化的搜索"
"查询，类似于网络搜索引擎使用的格式。``'websearch'`` 需要 PostgreSQL ≥ 11。请"
"阅读 PostgreSQL 的 `全文搜索文档`_ 来了解两者的区别和语法。举例说明。"

msgid ""
"``SearchQuery`` terms can be combined logically to provide more flexibility:"
msgstr ""

msgid ""
"See :ref:`postgresql-fts-search-configuration` for an explanation of the "
"``config`` parameter."
msgstr ""
"参见 :ref:`postgresql-fts-search-configuration` 对 ``config`` 参数的解释。"

msgid "``SearchRank``"
msgstr "``SearchRank``"

msgid ""
"So far, we've returned the results for which any match between the vector "
"and the query are possible. It's likely you may wish to order the results by "
"some sort of relevancy. PostgreSQL provides a ranking function which takes "
"into account how often the query terms appear in the document, how close "
"together the terms are in the document, and how important the part of the "
"document is where they occur. The better the match, the higher the value of "
"the rank. To order by relevancy:"
msgstr ""

msgid ""
"See :ref:`postgresql-fts-weighting-queries` for an explanation of the "
"``weights`` parameter."
msgstr ""
"参见 :ref:`postgresql-fts-weighting-queries` 关于 ``weights`` 参数的解释。"

msgid ""
"Set the ``cover_density`` parameter to ``True`` to enable the cover density "
"ranking, which means that the proximity of matching query terms is taken "
"into account."
msgstr ""
"将 ``cover_density`` 参数设置为 ``True``，启用覆盖密度排序，即考虑匹配的查询"
"词的接近程度。"

msgid ""
"Provide an integer to the ``normalization`` parameter to control rank "
"normalization. This integer is a bit mask, so you can combine multiple "
"behaviors:"
msgstr ""

msgid ""
"The PostgreSQL documentation has more details about `different rank "
"normalization options`_."
msgstr "PostgreSQL 文档中有更多关于 `不同排序归一化选项`_ 的细节。"

msgid "``SearchHeadline``"
msgstr "``SearchHeadline``"

msgid ""
"Accepts a single text field or an expression, a query, a config, and a set "
"of options. Returns highlighted search results."
msgstr ""
"接受一个文本字段或一个表达式、一个查询、一个配置和一组选项。返回高亮显示的搜"
"索结果。"

msgid ""
"Set the ``start_sel`` and ``stop_sel`` parameters to the string values to be "
"used to wrap highlighted query terms in the document. PostgreSQL's defaults "
"are ``<b>`` and ``</b>``."
msgstr ""
"将 ``start_sel`` 和 ``stop_sel`` 参数设置为字符串值，用于在文档中高亮显示查询"
"词。PostgreSQL 的默认值是 ``<b>`` 和 ``</b>``。"

msgid ""
"Provide integer values to the ``max_words`` and ``min_words`` parameters to "
"determine the longest and shortest headlines. PostgreSQL's defaults are 35 "
"and 15."
msgstr ""
"为 ``max_words`` 和 ``min_words`` 参数提供整数值，以确定最长和最短的标题。"
"PostgreSQL 的默认值是 35 和 15。"

msgid ""
"Provide an integer value to the ``short_word`` parameter to discard words of "
"this length or less in each headline. PostgreSQL's default is 3."
msgstr ""
"为 ``short_word`` 参数提供一个整数值，以便在每个标题中丢弃这个长度或更少的"
"字。PostgreSQL 的默认值是 3。"

msgid ""
"Set the ``highlight_all`` parameter to ``True`` to use the whole document in "
"place of a fragment and ignore ``max_words``, ``min_words``, and "
"``short_word`` parameters. That's disabled by default in PostgreSQL."
msgstr ""
"将 ``highlight_all`` 参数设置为 ``True``，以使用整个文档来代替片段，并忽略 "
"``max_words``、``min_words`` 和 ``short_word`` 参数。这在 PostgreSQL 中是默认"
"禁用的。"

msgid ""
"Provide a non-zero integer value to the ``max_fragments`` to set the maximum "
"number of fragments to display. That's disabled by default in PostgreSQL."
msgstr ""
"为 ``max_fragments`` 提供一个非零的整数值，以设置要显示的最大片段数。在 "
"PostgreSQL 中默认是禁用的。"

msgid ""
"Set the ``fragment_delimiter`` string parameter to configure the delimiter "
"between fragments. PostgreSQL's default is ``\" ... \"``."
msgstr ""
"设置 ``fragment_delimiter`` 字符串参数来配置片段之间的定界符。PostgreSQL 的默"
"认值是 ``\" ... \"``。"

msgid ""
"The PostgreSQL documentation has more details on `highlighting search "
"results`_."
msgstr "PostgreSQL 文档中有更多关于 `高亮搜索结果`_ 的细节。"

msgid "Changing the search configuration"
msgstr "更改搜索配置"

msgid ""
"You can specify the ``config`` attribute to a :class:`SearchVector` and :"
"class:`SearchQuery` to use a different search configuration. This allows "
"using different language parsers and dictionaries as defined by the database:"
msgstr ""

msgid "The value of ``config`` could also be stored in another column:"
msgstr ""

msgid "Weighting queries"
msgstr "加权查询"

msgid ""
"Every field may not have the same relevance in a query, so you can set "
"weights of various vectors before you combine them:"
msgstr ""

msgid ""
"The weight should be one of the following letters: D, C, B, A. By default, "
"these weights refer to the numbers ``0.1``, ``0.2``, ``0.4``, and ``1.0``, "
"respectively. If you wish to weight them differently, pass a list of four "
"floats to :class:`SearchRank` as ``weights`` in the same order above:"
msgstr ""

msgid "Performance"
msgstr "性能"

msgid ""
"Special database configuration isn't necessary to use any of these "
"functions, however, if you're searching more than a few hundred records, "
"you're likely to run into performance problems. Full text search is a more "
"intensive process than comparing the size of an integer, for example."
msgstr ""
"使用这些函数都不需要特殊的数据库配置，但是，如果你搜索的记录超过几百条，你很"
"可能会遇到性能问题。例如，全文搜索是一个比比较整数大小更密集的过程。"

msgid ""
"In the event that all the fields you're querying on are contained within one "
"particular model, you can create a functional :class:`GIN <django.contrib."
"postgres.indexes.GinIndex>` or :class:`GiST <django.contrib.postgres.indexes."
"GistIndex>` index which matches the search vector you wish to use. For "
"example::"
msgstr ""

msgid ""
"The PostgreSQL documentation has details on `creating indexes for full text "
"search <https://www.postgresql.org/docs/current/textsearch-tables."
"html#TEXTSEARCH-TABLES-INDEX>`_."
msgstr ""

msgid "``SearchVectorField``"
msgstr "``SearchVectorField``"

msgid ""
"If this approach becomes too slow, you can add a ``SearchVectorField`` to "
"your model. You'll need to keep it populated with triggers, for example, as "
"described in the `PostgreSQL documentation`_. You can then query the field "
"as if it were an annotated ``SearchVector``:"
msgstr ""

msgid ""
"Another approach to searching is trigram similarity. A trigram is a group of "
"three consecutive characters. In addition to the :lookup:`trigram_similar`, :"
"lookup:`trigram_word_similar`, and :lookup:`trigram_strict_word_similar` "
"lookups, you can use a couple of other expressions."
msgstr ""

msgid ""
"To use them, you need to activate the `pg_trgm extension <https://www."
"postgresql.org/docs/current/pgtrgm.html>`_ on PostgreSQL. You can install it "
"using the :class:`~django.contrib.postgres.operations.TrigramExtension` "
"migration operation."
msgstr ""
"要使用它们，你需要激活 PostgreSQL 上的 `pg_trgm 扩展 <https://www.postgresql."
"org/docs/current/pgtrgm.html>`_ 。你可以使用 :class:`~django.contrib."
"postgres.operations.TrigramExtension` 迁移操作来安装它。"

msgid "``TrigramSimilarity``"
msgstr "``TrigramSimilarity``"

msgid ""
"Accepts a field name or expression, and a string or expression. Returns the "
"trigram similarity between the two arguments."
msgstr ""
"接受一个字段名或表达式，以及一个字符串或表达式。返回两个参数之间的三元相似"
"度。"

msgid "``TrigramWordSimilarity``"
msgstr "``TrigramWordSimilarity``"

msgid ""
"Accepts a string or expression, and a field name or expression. Returns the "
"trigram word similarity between the two arguments."
msgstr ""
"接受一个字符串或表达式，以及一个字段名或表达式。返回两个参数之间的三元相似"
"度。"

msgid "``TrigramStrictWordSimilarity``"
msgstr ""

msgid ""
"Accepts a string or expression, and a field name or expression. Returns the "
"trigram strict word similarity between the two arguments. Similar to :class:"
"`TrigramWordSimilarity() <TrigramWordSimilarity>`, except that it forces "
"extent boundaries to match word boundaries."
msgstr ""

msgid "``TrigramDistance``"
msgstr "``TrigramDistance``"

msgid ""
"Accepts a field name or expression, and a string or expression. Returns the "
"trigram distance between the two arguments."
msgstr ""
"接受一个字段名或表达式，以及一个字符串或表达式。返回两个参数之间的三元距离。"

msgid "``TrigramWordDistance``"
msgstr "``TrigramWordDistance``"

msgid ""
"Accepts a string or expression, and a field name or expression. Returns the "
"trigram word distance between the two arguments."
msgstr ""
"接受一个字符串或表达式，以及一个字段名或表达式。返回两个参数之间的三元字距"
"离。"

msgid "``TrigramStrictWordDistance``"
msgstr ""

msgid ""
"Accepts a string or expression, and a field name or expression. Returns the "
"trigram strict word distance between the two arguments."
msgstr ""

msgid ""
"These validators are available from the ``django.contrib.postgres."
"validators`` module."
msgstr "这些验证器可以在 ``django.contrib.postgres.validators`` 模块中找到。"

msgid "``KeysValidator``"
msgstr "``KeysValidator``"

msgid ""
"Validates that the given keys are contained in the value. If ``strict`` is "
"``True``, then it also checks that there are no other keys present."
msgstr ""
"验证值中是否包含给定的键。如果 ``strict`` 是 ``True``，那么它还检查是否有其他"
"键存在。"

msgid ""
"The ``messages`` passed should be a dict containing the keys "
"``missing_keys`` and/or ``extra_keys``."
msgstr ""
"传递的 ``messages`` 应该是包含 ``missing_keys`` 和／或 ``extra_keys`` 键的字"
"典。"

msgid ""
"Note that this checks only for the existence of a given key, not that the "
"value of a key is non-empty."
msgstr "注意，这只是检查给定的键的存在，而不是检查键的值是非空的。"

msgid "Range validators"
msgstr "范围验证器"

msgid "``RangeMaxValueValidator``"
msgstr "``RangeMaxValueValidator``"

msgid ""
"Validates that the upper bound of the range is not greater than "
"``limit_value``."
msgstr "验证范围的上界不大于 ``limit_value``。"

msgid "``RangeMinValueValidator``"
msgstr "``RangeMinValueValidator``"

msgid ""
"Validates that the lower bound of the range is not less than the "
"``limit_value``."
msgstr "验证范围的下界不小于 ``limit_value``。"

msgid "The redirects app"
msgstr "重定向应用"

msgid ""
"Django comes with an optional redirects application. It lets you store "
"redirects in a database and handles the redirecting for you. It uses the "
"HTTP response status code ``301 Moved Permanently`` by default."
msgstr ""
"Django 自带了一个可选的重定向应用程序。它可以让你在数据库中存储重定向，并为你"
"处理重定向。它默认使用 HTTP 响应状态码 ``301 Moved Permanently``。"

msgid "To install the redirects app, follow these steps:"
msgstr "要安装重定向应用程序，请按照这些步骤进行："

msgid ""
"Ensure that the ``django.contrib.sites`` framework :ref:`is installed "
"<enabling-the-sites-framework>`."
msgstr ""
"确保 ``django.contrib.sites`` 框架 :ref:`已安装 <enabling-the-sites-"
"framework>`。"

msgid ""
"Add ``'django.contrib.redirects'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
"将 ``'django.contrib.redirects'`` 添加到你的 :setting:`INSTALLED_APPS` 配置"
"中。"

msgid ""
"Add ``'django.contrib.redirects.middleware.RedirectFallbackMiddleware'`` to "
"your :setting:`MIDDLEWARE` setting."
msgstr ""
"在你的 :setting:`MIDDLEWARE` 配置中添加 ``'django.contrib.redirects."
"middleware.RedirectFallbackMiddleware'``。"

msgid ""
"``manage.py migrate`` creates a ``django_redirect`` table in your database. "
"This is a lookup table with ``site_id``, ``old_path`` and ``new_path`` "
"fields."
msgstr ""
"``manage.py migrate`` 在数据库中创建一个 ``django_redirect`` 表。这是一个有 "
"``site_id``、``old_path`` 和 ``new_path`` 字段的查询表。"

msgid ""
"The :class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` "
"does all of the work. Each time any Django application raises a 404 error, "
"this middleware checks the redirects database for the requested URL as a "
"last resort. Specifically, it checks for a redirect with the given "
"``old_path`` with a site ID that corresponds to the :setting:`SITE_ID` "
"setting."
msgstr ""
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` 完成"
"了所有的工作。每当任何 Django 应用出现 404 错误时，这个中间件都会检查重定向数"
"据库中请求的 URL，作为最后的手段。具体来说，它检查给定的 ``old_path`` 与站点 "
"ID 对应的 :setting:`SITE_ID` 设置的重定向。"

msgid ""
"If it finds a match, and ``new_path`` is not empty, it redirects to "
"``new_path`` using a 301 (\"Moved Permanently\") redirect. You can subclass :"
"class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` and "
"set :attr:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware."
"response_redirect_class` to :class:`django.http.HttpResponseRedirect` to use "
"a ``302 Moved Temporarily`` redirect instead."
msgstr ""
"如果它找到了一个匹配的对象，并且 ``new_path`` 不是空的，它就会使用 301"
"（“Moved Permanently”）重定向到 ``new_path``。你可以将 :class:`~django."
"contrib.redirects.middleware.RedirectFallbackMiddleware` 子类化，并将 :attr:"
"`~django.contrib.redirects.middleware.RedirectFallbackMiddleware."
"response_redirect_class` 设置为 :class:`django.http.HttpResponseRedirect` 以"
"使用 ``302 Moved Temporary`` 重定向。"

msgid ""
"If it finds a match, and ``new_path`` is empty, it sends a 410 (\"Gone\") "
"HTTP header and empty (content-less) response."
msgstr ""
"如果它找到了一个匹配，并且 ``new_path`` 是空的，它就会发送一个 410（“Gone”）"
"HTTP 头和空的（无内容）响应。"

msgid ""
"Note that the order of :setting:`MIDDLEWARE` matters. Generally, you can "
"put :class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` "
"at the end of the list, because it's a last resort."
msgstr ""
"注意 :setting:`MIDDLEWARE` 的顺序很重要。一般来说，你可以把 :class:`~django."
"contrib.redirects.middleware.RedirectFallbackMiddleware` 放在列表的最后，因为"
"这是最后的手段。"

msgid "How to add, change and delete redirects"
msgstr "如何添加、更改和删除重定向"

msgid ""
"If you've activated the automatic Django admin interface, you should see a "
"\"Redirects\" section on the admin index page. Edit redirects as you edit "
"any other object in the system."
msgstr ""
"如果你已经激活了 Django 的自动管理界面，你应该会在管理索引页上看到“重定向”部"
"分。像编辑系统中的其他对象一样编辑重定向。"

msgid ""
"Redirects are represented by a standard :doc:`Django model </topics/db/"
"models>`, which lives in :source:`django/contrib/redirects/models.py`. You "
"can access redirect objects via the :doc:`Django database API </topics/db/"
"queries>`. For example:"
msgstr ""

msgid "Middleware"
msgstr "中间件"

msgid ""
"You can change the :class:`~django.http.HttpResponse` classes used by the "
"middleware by creating a subclass of :class:`~django.contrib.redirects."
"middleware.RedirectFallbackMiddleware` and overriding "
"``response_gone_class`` and/or ``response_redirect_class``."
msgstr ""
"你可以通过创建一个 :class:`~django.contrib.redirects.middleware."
"RedirectFallbackMiddleware` 的子类，并覆盖 ``response_gone_class`` 和／或 "
"``response_redirect_class`` 来改变中间件使用的 :class:`~django.http."
"HttpResponse` 类。"

msgid ""
"The :class:`~django.http.HttpResponse` class used when a :class:`~django."
"contrib.redirects.models.Redirect` is not found for the requested path or "
"has a blank ``new_path`` value."
msgstr ""
"当在请求的路径上没有找到 :class:`~django.contrib.redirects.models.Redirect` "
"或有一个空的 ``new_path`` 值时使用的 :class:`~django.http.HttpResponse` 类。"

msgid "Defaults to :class:`~django.http.HttpResponseGone`."
msgstr "默认为 :class:`~django.http.HttpResponseGone`。"

msgid "The :class:`~django.http.HttpResponse` class that handles the redirect."
msgstr "处理重定向的 :class:`~django.http.HttpResponse` 类。"

msgid "Defaults to :class:`~django.http.HttpResponsePermanentRedirect`."
msgstr "默认为 :class:`~django.http.HttpResponsePermanentRedirect`。"

msgid "The sitemap framework"
msgstr "站点地图框架"

msgid ""
"Django comes with a high-level sitemap-generating framework to create "
"sitemap_ XML files."
msgstr "Django 自带了一个高级站点地图生成框架来创建 sitemap_ XML 文件。"

msgid ""
"A sitemap is an XML file on your website that tells search-engine indexers "
"how frequently your pages change and how \"important\" certain pages are in "
"relation to other pages on your site. This information helps search engines "
"index your site."
msgstr ""
"站点地图是你网站上的一个 XML 文件，它告诉搜索引擎索引器你页面的变化频率，以及"
"某些页面相对于你网站上其他页面的“重要性”。这些信息有助于搜索引擎对你的网站进"
"行索引。"

msgid ""
"The Django sitemap framework automates the creation of this XML file by "
"letting you express this information in Python code."
msgstr ""
"Django 站点地图框架通过让你用 Python 代码表达这些信息以自动创建这个 XML 文"
"件。"

msgid ""
"It works much like Django's :doc:`syndication framework </ref/contrib/"
"syndication>`. To create a sitemap, write a :class:`~django.contrib.sitemaps."
"Sitemap` class and point to it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""
"它的工作原理很像 Django 的 :doc:`联合框架 </ref/contrib/syndication>`。要创建"
"一个站点地图，写一个 :class:`~django.contrib.sitemaps.Sitemap` 类，并将其指向"
"你的 :doc:`URLconf </topics/http/urls>`。"

msgid "To install the sitemap app, follow these steps:"
msgstr "要安装站点地图应用，请按照以下步骤进行："

msgid ""
"Add ``'django.contrib.sitemaps'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
"将 ``'django.contrib.sitemaps'`` 添加到你的 :setting:`INSTALLED_APPS` 配置"
"中。"

msgid ""
"Make sure your :setting:`TEMPLATES` setting contains a ``DjangoTemplates`` "
"backend whose ``APP_DIRS`` options is set to ``True``. It's in there by "
"default, so you'll only need to change this if you've changed that setting."
msgstr ""
"确保你的 :setting:`TEMPLATES` 配置中包含一个 ``DjangoTemplates`` 后端，其 "
"``APP_DIRS`` 选项设置为 ``True``。默认有一个后端，所以你只需要改变这个配置就"
"可以了。"

msgid ""
"Make sure you've installed the :mod:`sites framework<django.contrib.sites>`."
msgstr "确保你已经安装了 :mod:`sites framework<django.contrib.sites>`。"

msgid ""
"(Note: The sitemap application doesn't install any database tables. The only "
"reason it needs to go into :setting:`INSTALLED_APPS` is so that the :func:"
"`~django.template.loaders.app_directories.Loader` template loader can find "
"the default templates.)"
msgstr ""
"（注意：站点地图应用不会安装任何数据库表。它需要进入 :setting:"
"`INSTALLED_APPS` 的唯一原因是为了让 :func:`~django.template.loaders."
"app_directories.Loader` 模板加载器能够找到默认模板。）"

msgid "Initialization"
msgstr "初始化"

msgid ""
"To activate sitemap generation on your Django site, add this line to your :"
"doc:`URLconf </topics/http/urls>`::"
msgstr ""
"要在你的 Django 网站上激活站点地图的生成，在你的 :doc:`URLconf </topics/http/"
"urls>` 中添加这一行："

msgid ""
"This tells Django to build a sitemap when a client accesses :file:`/sitemap."
"xml`."
msgstr "这告诉 Django 在客户端访问 :file:`/sitemap.xml` 时建立一个站点地图。"

msgid ""
"The name of the sitemap file is not important, but the location is. Search "
"engines will only index links in your sitemap for the current URL level and "
"below. For instance, if :file:`sitemap.xml` lives in your root directory, it "
"may reference any URL in your site. However, if your sitemap lives at :file:"
"`/content/sitemap.xml`, it may only reference URLs that begin with :file:`/"
"content/`."
msgstr ""
"站点地图文件的名称并不重要，但位置很重要。搜索引擎只对当前URL级别及以下的站点"
"地图链接进行索引。例如，如果 :file:`sitemap.xml` 位于你的根目录下，它可以引用"
"您网站中的任何URL。但是，如果您的站点地图位于 :file:`/content/sitemap.xml`，"
"则只能引用以 :file:`/content/` 开头的 URL。"

msgid ""
"The sitemap view takes an extra, required argument: ``{'sitemaps': sitemaps}"
"``. ``sitemaps`` should be a dictionary that maps a short section label (e."
"g., ``blog`` or ``news``) to its :class:`~django.contrib.sitemaps.Sitemap` "
"class (e.g., ``BlogSitemap`` or ``NewsSitemap``). It may also map to an "
"*instance* of a :class:`~django.contrib.sitemaps.Sitemap` class (e.g., "
"``BlogSitemap(some_var)``)."
msgstr ""
"sitemap 视图需要一个额外的、必要的参数：``{'sitemaps': sitemaps}``。"
"``sitemaps`` 应该是一个字典，它将一个简短的章节标签（例如，``blog`` 或 "
"``news``）映射到它的 :class:`~django.contrib.sitemaps.Sitemap` 类（例如，"
"``BlogSitemap`` 或 ``NewsSitemap``）。也可以映射到一个 :class:`~django."
"contrib.sitemaps.Sitemap` 类的 *实例* （例如，``BlogSitemap(some_var)``）。"

msgid "``Sitemap`` classes"
msgstr "``Sitemap`` 类"

msgid ""
"A :class:`~django.contrib.sitemaps.Sitemap` class is a Python class that "
"represents a \"section\" of entries in your sitemap. For example, one :class:"
"`~django.contrib.sitemaps.Sitemap` class could represent all the entries of "
"your blog, while another could represent all of the events in your events "
"calendar."
msgstr ""
":class:`~django.contrib.sitemaps.Sitemap` 类是一个 Python 类，在你的网站地图"
"中代表一个条目的“部分”。例如，一个 :class:`~django.contrib.sitemaps.Sitemap` "
"类可以代表你的博客的所有条目，而另一个则可以代表你的事件日历中的所有事件。"

msgid ""
"In the simplest case, all these sections get lumped together into one :file:"
"`sitemap.xml`, but it's also possible to use the framework to generate a "
"sitemap index that references individual sitemap files, one per section. "
"(See `Creating a sitemap index`_ below.)"
msgstr ""
"在最简单的情况下，所有这些部分都被归纳到一个 :file:`sitemap.xml` 中，但也可以"
"使用该框架生成一个站点地图索引来引用单个站点地图文件，每个部分一个。（参见下"
"面的 `创建一个站点地图索引`_ ）。"

msgid ""
":class:`~django.contrib.sitemaps.Sitemap` classes must subclass ``django."
"contrib.sitemaps.Sitemap``. They can live anywhere in your codebase."
msgstr ""
":class:`~django.contrib.sitemaps.Sitemap` 类必须是 ``django.contrib.sitemaps."
"Sitemap`` 子类。它们可以存在于你代码库的任何地方。"

msgid "An example"
msgstr "一个例子"

msgid ""
"Let's assume you have a blog system, with an ``Entry`` model, and you want "
"your sitemap to include all the links to your individual blog entries. "
"Here's how your sitemap class might look::"
msgstr ""
"让我们假设你有一个博客系统，有一个 ``Entry`` 模型，你希望你的网站地图包括所有"
"链接到你的个人博客条目。下面是你的网站地图类的样子："

msgid "Note:"
msgstr "注意："

msgid ""
":attr:`~Sitemap.changefreq` and :attr:`~Sitemap.priority` are class "
"attributes corresponding to ``<changefreq>`` and ``<priority>`` elements, "
"respectively. They can be made callable as functions, as :attr:`~Sitemap."
"lastmod` was in the example."
msgstr ""
":attr:`~Sitemap.changefreq` 和 :attr:`~Sitemap.priority` 分别是用作 "
"``<changefreq>`` 和 ``<priority>`` 元素的类属性。它们可以作为函数调用，就像本"
"例中的 :attr:`~Sitemap.lastmod` 一样。"

msgid ""
":attr:`~Sitemap.items()` is a method that returns a :term:`sequence` or "
"``QuerySet`` of objects. The objects returned will get passed to any "
"callable methods corresponding to a sitemap property (:attr:`~Sitemap."
"location`, :attr:`~Sitemap.lastmod`, :attr:`~Sitemap.changefreq`, and :attr:"
"`~Sitemap.priority`)."
msgstr ""
":attr:`~Sitemap.items()` 是一个返回 :term:`sequence` 或 ``QuerySet`` 对象的方"
"法。返回的对象将被传递给对应于站点地图属性的任何可调用方法（:attr:`~Sitemap."
"location`，:attr:`~Sitemap.lastmod`，:attr:`~Sitemap.changefreq` 和 :attr:"
"`~Sitemap.priority`）。"

msgid ":attr:`~Sitemap.lastmod` should return a :class:`~datetime.datetime`."
msgstr ":attr:`~Sitemap.lastmod` 应该返回一个 :class:`~datetime.datetime`。"

msgid ""
"There is no :attr:`~Sitemap.location` method in this example, but you can "
"provide it in order to specify the URL for your object. By default, :attr:"
"`~Sitemap.location()` calls ``get_absolute_url()`` on each object and "
"returns the result."
msgstr ""
"本例中没有 :attr:`~Sitemap.location` 方法，但你可以提供该方法来指定对象的 "
"URL。默认情况下，:attr:`~Sitemap.location()` 调用每个对象的 "
"``get_absolute_url()`` 并返回结果。"

msgid "``Sitemap`` class reference"
msgstr "``Sitemap`` 类参考"

msgid "A ``Sitemap`` class can define the following methods/attributes:"
msgstr "``Sitemap`` 类可以定义以下方法／属性。"

msgid ""
"**Required.** A method that returns a :term:`sequence` or ``QuerySet`` of "
"objects. The framework doesn't care what *type* of objects they are; all "
"that matters is that these objects get passed to the :attr:`~Sitemap."
"location()`, :attr:`~Sitemap.lastmod()`, :attr:`~Sitemap.changefreq()` and :"
"attr:`~Sitemap.priority()` methods."
msgstr ""
"**必须的。** 一个返回对象的 :term:`sequence` 或 ``QuerySet`` 的方法。框架并不"
"关心它们是什么类型的对象，重要的是这些对象被传递给 :attr:`~Sitemap."
"location()`、:attr:`~Sitemap.lastmod()`、:attr:`~Sitemap.changefreq()` 和 :"
"attr:`~Sitemap.priority()` 方法。"

msgid "**Optional.** Either a method or attribute."
msgstr "**可选的。** 方法或属性。"

msgid ""
"If it's a method, it should return the absolute path for a given object as "
"returned by :attr:`~Sitemap.items()`."
msgstr ""
"如果是方法，则应返回 :attr:`~Sitemap.items()` 返回的给定对象的绝对路径。"

msgid ""
"If it's an attribute, its value should be a string representing an absolute "
"path to use for *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""
"如果它是一个属性，它的值应该是一个字符串，代表一个绝对路径，用于 :attr:"
"`~Sitemap.items()` 返回的 *每一个* 对象。"

msgid ""
"In both cases, \"absolute path\" means a URL that doesn't include the "
"protocol or domain. Examples:"
msgstr "在这两种情况下，“绝对路径”指的是不包含协议或域名的 URL。例如："

msgid "Good: ``'/foo/bar/'``"
msgstr ""

msgid "Bad: ``'example.com/foo/bar/'``"
msgstr ""

msgid "Bad: ``'https://example.com/foo/bar/'``"
msgstr ""

msgid ""
"If :attr:`~Sitemap.location` isn't provided, the framework will call the "
"``get_absolute_url()`` method on each object as returned by :attr:`~Sitemap."
"items()`."
msgstr ""
"如果没有提供 :attr:`~Sitemap.location`，框架将调用 :attr:`~Sitemap.items()` "
"返回的每个对象的 ``get_absolute_url()`` 方法。"

msgid ""
"To specify a protocol other than ``'http'``, use :attr:`~Sitemap.protocol`."
msgstr "如果要指定 ``'http'`` 以外的协议，请使用 :attr:`~Sitemap.protocol`。"

msgid ""
"If it's a method, it should take one argument -- an object as returned by :"
"attr:`~Sitemap.items()` -- and return that object's last-modified date/time "
"as a :class:`~datetime.datetime`."
msgstr ""
"如果它是一个方法，它应该接受一个参数——一个由 :attr:`~Sitemap.items()` 返回的"
"对象——并以 :class:`~datetime.datetime` 返回该对象最后修改的日期／时间。"

msgid ""
"If it's an attribute, its value should be a :class:`~datetime.datetime` "
"representing the last-modified date/time for *every* object returned by :"
"attr:`~Sitemap.items()`."
msgstr ""
"如果是属性，其值应该是 :class:`~datetime.datetime`，代表 :attr:`~Sitemap."
"items()` 返回的 *每一个* 对象的最后修改日期／时间。"

msgid ""
"If all items in a sitemap have a :attr:`~Sitemap.lastmod`, the sitemap "
"generated by :func:`views.sitemap` will have a ``Last-Modified`` header "
"equal to the latest ``lastmod``. You can activate the :class:`~django."
"middleware.http.ConditionalGetMiddleware` to make Django respond "
"appropriately to requests with an ``If-Modified-Since`` header which will "
"prevent sending the sitemap if it hasn't changed."
msgstr ""
"如果站点地图中的所有项目都有一个 :attr:`~Sitemap.lastmod`，那么由 :func:"
"`views.sitemap` 生成的站点地图将有一个 ``Last-Modified`` 头，等于最新的 "
"``lastmod``。你可以激活 :class:`~django.middleware.http."
"ConditionalGetMiddleware`，让 Django 对请求做出适当的响应，并提供 ``If-"
"Modified-Since`` 头，防止发送没有变化的站点地图。"

msgid "**Optional.**"
msgstr "**可选的。**"

msgid ""
"This property returns a :class:`~django.core.paginator.Paginator` for :attr:"
"`~Sitemap.items()`. If you generate sitemaps in a batch you may want to "
"override this as a cached property in order to avoid multiple ``items()`` "
"calls."
msgstr ""
"这个属性返回一个 :class:`~django.core.paginator.Paginator` 的 :attr:"
"`~Sitemap.items()`。如果你批量生成网站地图，你可能想覆盖这个属性作为一个缓存"
"属性，以避免多次调用 ``items()``。"

msgid ""
"If it's a method, it should take one argument -- an object as returned by :"
"attr:`~Sitemap.items()` -- and return that object's change frequency as a "
"string."
msgstr ""
"如果它是一个方法，它应该接受一个参数——一个由 :attr:`~Sitemap.items()` 返回的"
"对象——并以字符串形式返回该对象的变化频率。"

msgid ""
"If it's an attribute, its value should be a string representing the change "
"frequency of *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""
"如果是属性，其值应该是一个字符串，代表 :attr:`~Sitemap.items()` 返回的 *每一"
"个* 对象的变化频率。"

msgid ""
"Possible values for :attr:`~Sitemap.changefreq`, whether you use a method or "
"attribute, are:"
msgstr ":attr:`~Sitemap.changefreq` 的可能值，无论你是使用方法还是属性，都是："

msgid "``'always'``"
msgstr "``'always'``"

msgid "``'hourly'``"
msgstr "``'hourly'``"

msgid "``'daily'``"
msgstr "``'daily'``"

msgid "``'weekly'``"
msgstr "``'weekly'``"

msgid "``'monthly'``"
msgstr "``'monthly'``"

msgid "``'yearly'``"
msgstr "``'yearly'``"

msgid "``'never'``"
msgstr "``'never'``"

msgid ""
"If it's a method, it should take one argument -- an object as returned by :"
"attr:`~Sitemap.items()` -- and return that object's priority as either a "
"string or float."
msgstr ""
"如果它是一个方法，它应该接受一个参数——一个由 :attr:`~Sitemap.items()` 返回的"
"对象——并以字符串或浮点数的形式返回该对象的优先级。"

msgid ""
"If it's an attribute, its value should be either a string or float "
"representing the priority of *every* object returned by :attr:`~Sitemap."
"items()`."
msgstr ""
"如果它是一个属性，它的值应该是一个字符串或浮点数，代表 :attr:`~Sitemap."
"items()` 返回的 *每一个* 对象的优先级。"

msgid ""
"Example values for :attr:`~Sitemap.priority`: ``0.4``, ``1.0``. The default "
"priority of a page is ``0.5``. See the `sitemaps.org documentation`_ for "
"more."
msgstr ""
":attr:`~Sitemap.priority` 的示例值：``0.4``，``1.0``。页面的默认优先级是 "
"``0.5``。更多信息请参见  `sitemaps.org documentation`_ 。"

msgid ""
"This attribute defines the protocol (``'http'`` or ``'https'``) of the URLs "
"in the sitemap. If it isn't set, the protocol with which the sitemap was "
"requested is used. If the sitemap is built outside the context of a request, "
"the default is ``'http'``."
msgstr ""
"该属性定义了网站地图中 URL 的协议（``'http'`` 或 ``'https'``）。如果没有设"
"置，则使用请求网站地图的协议。如果站点地图是在请求之外建立的，则默认为 "
"``'http'``。"

msgid ""
"The default protocol for sitemaps built outside the context of a request "
"will change from ``'http'`` to ``'https'`` in Django 5.0."
msgstr ""
"在 Django 5.0 中，在请求上下文之外建立的网站地图的默认协议将从 ``’http'``改"
"为 ``'https'``。"

msgid ""
"This attribute defines the maximum number of URLs included on each page of "
"the sitemap. Its value should not exceed the default value of ``50000``, "
"which is the upper limit allowed in the `Sitemaps protocol <https://www."
"sitemaps.org/protocol.html#index>`_."
msgstr ""
"该属性定义了网站地图每一页所包含的 URL 的最大数量。其值不应超过默认值 "
"``50000``，这是 `Sitemaps protocol <https://www.sitemaps.org/protocol."
"html#index>`_ 中允许的上限。"

msgid ""
"A boolean attribute that defines if the URLs of this sitemap should be "
"generated using all of your :setting:`LANGUAGES`. The default is ``False``."
msgstr ""
"一个布尔属性，用于定义该网站地图的 URL 是否应使用所有的 :setting:`LANGUAGES` "
"生成。默认值是 ``False``。"

msgid ""
"A :term:`sequence` of :term:`language codes<language code>` to use for "
"generating alternate links when :attr:`~Sitemap.i18n` is enabled. Defaults "
"to :setting:`LANGUAGES`."
msgstr ""
"启用 :attr:`~Sitemap.i18n` 时用于生成备用链接的 :term:`语言代码 <language "
"code>` :term:`sequence`。默认为 :setting:`LANGUAGES`。"

msgid ""
"A boolean attribute. When used in conjunction with :attr:`~Sitemap.i18n` "
"generated URLs will each have a list of alternate links pointing to other "
"language versions using the `hreflang attribute`_. The default is ``False``."
msgstr ""
"一个布尔属性。当与 :attr:`~Sitemap.i18n` 结合使用时，生成的 URL 将有一个备用"
"链接列表，使用 `hreflang attribute`_ 指向其他语言版本。默认为 ``False``。"

msgid ""
"A boolean attribute. When ``True`` the alternate links generated by :attr:"
"`~Sitemap.alternates` will contain a ``hreflang=\"x-default\"`` fallback "
"entry with a value of :setting:`LANGUAGE_CODE`. The default is ``False``."
msgstr ""
"一个布尔属性。当 ``True`` 时，由 :attr:`~Sitemap.alternates` 生成的备用链接将"
"包含一个 ``hreflang=\"x-default\"`` 回退条目，其值为 :setting:"
"`LANGUAGE_CODE`。默认值是 ``False``。"

msgid ""
"**Optional.** A method that returns the latest value returned by :attr:"
"`~Sitemap.lastmod`. This function is used to add the ``lastmod`` attribute "
"to :ref:`Sitemap index context variables<sitemap-index-context-variables>`."
msgstr ""

msgid "By default :meth:`~Sitemap.get_latest_lastmod` returns:"
msgstr ""

msgid "If :attr:`~Sitemap.lastmod` is an attribute: :attr:`~Sitemap.lastmod`."
msgstr ""

msgid ""
"If :attr:`~Sitemap.lastmod` is a method: The latest ``lastmod`` returned by "
"calling the method with all items returned by :meth:`Sitemap.items`."
msgstr ""

msgid ""
"**Optional.** A method that returns the sequence of language codes for which "
"the item is displayed. By default :meth:`~Sitemap.get_languages_for_item` "
"returns :attr:`~Sitemap.languages`."
msgstr ""

msgid "Shortcuts"
msgstr "捷径"

msgid "The sitemap framework provides a convenience class for a common case:"
msgstr "站点地图框架为常见的情况提供了一个方便的类："

msgid ""
"The :class:`django.contrib.sitemaps.GenericSitemap` class allows you to "
"create a sitemap by passing it a dictionary which has to contain at least a "
"``queryset`` entry. This queryset will be used to generate the items of the "
"sitemap. It may also have a ``date_field`` entry that specifies a date field "
"for objects retrieved from the ``queryset``. This will be used for the :attr:"
"`~Sitemap.lastmod` attribute and :meth:`~Sitemap.get_latest_lastmod` methods "
"in the in the generated sitemap."
msgstr ""

msgid ""
"The :attr:`~Sitemap.priority`, :attr:`~Sitemap.changefreq`, and :attr:"
"`~Sitemap.protocol` keyword arguments allow specifying these attributes for "
"all URLs."
msgstr ""
":attr:`~Sitemap.priority`、:attr:`~Sitemap.changefreq` 和 :attr:`~Sitemap."
"protocol` 关键字参数允许为所有 URL 指定这些属性。"

msgid ""
"Here's an example of a :doc:`URLconf </topics/http/urls>` using :class:"
"`GenericSitemap`::"
msgstr ""
"下面是一个使用 :class:`GenericSitemap` 的 :doc:`URLconf </topics/http/urls>` "
"例子："

msgid "Sitemap for static views"
msgstr "静态视图的站点地图"

msgid ""
"Often you want the search engine crawlers to index views which are neither "
"object detail pages nor flatpages. The solution is to explicitly list URL "
"names for these views in ``items`` and call :func:`~django.urls.reverse` in "
"the ``location`` method of the sitemap. For example::"
msgstr ""
"通常情况下，你希望搜索引擎爬虫能够索引那些既不是对象详情页也不是简单页面的视"
"图。解决的办法是在 ``items`` 中明确列出这些视图的 URL 名称，并在站点地图的 "
"``location`` 方法中调用 :func:`~django.urls.reverse`。例如："

msgid "Creating a sitemap index"
msgstr "创建站点地图索引"

msgid ""
"The sitemap framework also has the ability to create a sitemap index that "
"references individual sitemap files, one per each section defined in your "
"``sitemaps`` dictionary. The only differences in usage are:"
msgstr ""
"站点地图框架还能够创建一个站点地图索引，该索引能够引用单独的站点地图文件，每"
"个部分在你的 ``sitemaps`` 字典中定义一个。唯一不同的用法是："

msgid ""
"You use two views in your URLconf: :func:`django.contrib.sitemaps.views."
"index` and :func:`django.contrib.sitemaps.views.sitemap`."
msgstr ""
"你在 URLconf 中使用了两个视图： :func:`django.contrib.sitemaps.views.index` "
"和  :func:`django.contrib.sitemaps.views.sitemap`。"

msgid ""
"The :func:`django.contrib.sitemaps.views.sitemap` view should take a "
"``section`` keyword argument."
msgstr ""
":func:`django.contrib.sitemaps.views.sitemap` 视图应该采用 ``section`` 关键字"
"作为参数。"

msgid ""
"Here's what the relevant URLconf lines would look like for the example "
"above::"
msgstr "下面是上面例子的相关 URLconf 行的样子："

msgid ""
"This will automatically generate a :file:`sitemap.xml` file that references "
"both :file:`sitemap-flatpages.xml` and :file:`sitemap-blog.xml`. The :class:"
"`~django.contrib.sitemaps.Sitemap` classes and the ``sitemaps`` dict don't "
"change at all."
msgstr ""
"这将自动生成一个 :file:`sitemap.xml` 文件，同时引用 :file:`sitemap-flatpages."
"xml` 和 :file:`sitemap-blog.xml`。:class:`~django.contrib.sitemaps.Sitemap` "
"类和 ``sitemaps`` 字典完全没有变化。"

msgid ""
"If all sitemaps have a ``lastmod`` returned by :meth:`Sitemap."
"get_latest_lastmod` the sitemap index will have a ``Last-Modified`` header "
"equal to the latest ``lastmod``."
msgstr ""

msgid ""
"You should create an index file if one of your sitemaps has more than 50,000 "
"URLs. In this case, Django will automatically paginate the sitemap, and the "
"index will reflect that."
msgstr ""
"如果你的一个网站地图有超过 50,000 个 URL，你应该创建一个索引文件。在这种情况"
"下，Django 会自动对网站地图进行分页，索引也会反映出来。"

msgid ""
"If you're not using the vanilla sitemap view -- for example, if it's wrapped "
"with a caching decorator -- you must name your sitemap view and pass "
"``sitemap_url_name`` to the index view::"
msgstr ""
"如果你没有使用普通的站点地图视图——例如，如果它是用缓存装饰器包装的——你必须为"
"你的站点地图视图命名，并将 ``sitemap_url_name`` 传给索引视图："

msgid "Use of the ``Last-Modified`` header was added."
msgstr ""

msgid "Template customization"
msgstr "自定义模板"

msgid ""
"If you wish to use a different template for each sitemap or sitemap index "
"available on your site, you may specify it by passing a ``template_name`` "
"parameter to the ``sitemap`` and ``index`` views via the URLconf::"
msgstr ""
"如果你希望为网站上的每个站点地图或站点地图索引使用不同的模板，你可以通过 "
"URLconf 向 ``sitemap`` 和 ``index`` 视图传递一个 ``template_name`` 参数来指定"
"它。"

msgid "Context variables"
msgstr "上下文变量"

msgid ""
"When customizing the templates for the :func:`~django.contrib.sitemaps.views."
"index` and :func:`~django.contrib.sitemaps.views.sitemap` views, you can "
"rely on the following context variables."
msgstr ""
"在自定义 :func:`~django.contrib.sitemaps.views.index` 和 :func:`~django."
"contrib.sitemaps.views.sitemap` 视图的模板时，可以依赖以下上下文变量。"

msgid ""
"The variable ``sitemaps`` is a list of objects containing the ``location`` "
"and ``lastmod`` attribute for each of the sitemaps. Each URL exposes the "
"following attributes:"
msgstr ""

msgid "``location``: The location (url & page) of the sitemap."
msgstr ""

msgid ""
"``lastmod``: Populated by the :meth:`~Sitemap.get_latest_lastmod` method for "
"each sitemap."
msgstr ""

msgid ""
"The context was changed to a list of objects with ``location`` and optional "
"``lastmod`` attributes."
msgstr ""

msgid "Sitemap"
msgstr "Sitemap"

msgid ""
"The variable ``urlset`` is a list of URLs that should appear in the sitemap. "
"Each URL exposes attributes as defined in the :class:`~django.contrib."
"sitemaps.Sitemap` class:"
msgstr ""
"变量 ``urlset`` 是一个应该出现在站点地图中的 URL 列表，每个 URL 都会暴露出 :"
"class:`~django.contrib.sitemaps.Sitemap` 类中定义的属性。"

msgid "``alternates``"
msgstr "``alternates``"

msgid "``changefreq``"
msgstr "``changefreq``"

msgid "``item``"
msgstr "``item``"

msgid "``lastmod``"
msgstr "``lastmod``"

msgid "``location``"
msgstr "``location``"

msgid "``priority``"
msgstr "``priority``"

msgid ""
"The ``alternates`` attribute is available when :attr:`~Sitemap.i18n` and :"
"attr:`~Sitemap.alternates` are enabled. It is a list of other language "
"versions, including the optional :attr:`~Sitemap.x_default` fallback, for "
"each URL. Each alternate is a dictionary with ``location`` and ``lang_code`` "
"keys."
msgstr ""
"当 :attr:`~Sitemap.i18n` 和 :attr:`~Sitemap.alternates` 被启用时，"
"``alternates`` 属性可用。它是一个其他语言版本的列表，包括可选的 :attr:"
"`~Sitemap.x_default` 回退，对于每个 URL。每个候补是一个字典，有 ``location`` "
"和 ``lang_code`` 键。"

msgid ""
"The ``item`` attribute has been added for each URL to allow more flexible "
"customization of the templates, such as `Google news sitemaps`_. Assuming "
"Sitemap's :attr:`~Sitemap.items()` would return a list of items with "
"``publication_data`` and a ``tags`` field something like this would generate "
"a Google News compatible sitemap:"
msgstr ""
"为每个 URL 添加了 ``item`` 属性，以便更灵活地定制模板，如 `Google news "
"sitemaps`_ 。假设 Sitemap 的 :attr:`~Sitemap.items()` 会返回一个带有 "
"``publication_data`` 和 ``tags`` 字段的项目列表，类似这样就可以生成一个 "
"Google News 兼容的网站地图。"

msgid "Pinging Google"
msgstr "通知谷歌"

msgid ""
"You may want to \"ping\" Google when your sitemap changes, to let it know to "
"reindex your site. The sitemaps framework provides a function to do just "
"that: :func:`django.contrib.sitemaps.ping_google()`."
msgstr ""
"当你的网站地图发生变化时，你可能想“ping”一下谷歌，让它知道要重新索引你的网"
"站。站点地图框架提供了一个函数来实现这个功能： :func:`django.contrib."
"sitemaps.ping_google()`。"

msgid "``ping_google`` takes these optional arguments:"
msgstr "``ping_google`` 接受这些可选的参数："

msgid ""
"``sitemap_url`` - The absolute path to your site's sitemap (e.g., :file:`'/"
"sitemap.xml'`)."
msgstr ""
"``sitemap_url`` - 网站地图的绝对路径（例如：:file:`'/sitemap.xml'` ）。"

msgid ""
"If this argument isn't provided, ``ping_google`` will perform a reverse "
"lookup in your URLconf, for URLs named ``'django.contrib.sitemaps.views."
"index'`` and then ``'django.contrib.sitemaps.views.sitemap'`` (without "
"further arguments) to automatically determine the sitemap URL."
msgstr ""
"如果没有提供这个参数，``ping_google`` 将在你的 URLconf 中进行反向查找，查找名"
"为 ``'django.contrib.sitemaps.views.index'`` 的 URL，然后是 ``'django."
"contrib.sitemaps.views.sitemap'``（无需其他参数）来自动确定网站地图 URL。"

msgid ""
"``ping_url`` - Defaults to Google's Ping Tool: https://www.google.com/"
"webmasters/tools/ping."
msgstr ""
"``ping_url`` - 默认为谷歌的 Ping 工具：https://www.google.com/webmasters/"
"tools/ping。"

msgid ""
"``sitemap_uses_https`` - Set to ``False`` if your site uses ``http`` rather "
"than ``https``."
msgstr ""
"``sitemap_uses_https`` - 如果你的网站使用 ``http`` 而不是 ``https``，设置为 "
"``False``。"

msgid ""
":func:`ping_google` raises the exception ``django.contrib.sitemaps."
"SitemapNotFound`` if it cannot determine your sitemap URL."
msgstr ""
":func:`ping_google` 如果不能确定你的站点地图 URL，会引发异常 ``django."
"contrib.sitemaps.SitemapNotFound``。"

msgid "Register with Google first!"
msgstr "首先向谷歌注册！"

msgid ""
"The :func:`ping_google` command only works if you have registered your site "
"with `Google Search Console`_."
msgstr ""
":func:`ping_google` 命令只有在你在 `Google Search Console`_ 注册了你的网站时"
"才有效。"

msgid ""
"One useful way to call :func:`ping_google` is from a model's ``save()`` "
"method::"
msgstr "调用 :func:`ping_google` 的一个有用的方法是在模型的 ``save()`` 方法："

msgid ""
"A more efficient solution, however, would be to call :func:`ping_google` "
"from a cron script, or some other scheduled task. The function makes an HTTP "
"request to Google's servers, so you may not want to introduce that network "
"overhead each time you call ``save()``."
msgstr ""
"然而，一个更有效的解决方案是在定时脚本中调用 :func:`ping_google`，或者其他一"
"些预定任务。该函数向谷歌的服务器发出 HTTP 请求，所以你可能不想在每次调用 "
"``save()`` 时引入网络开销。"

msgid "Pinging Google via ``manage.py``"
msgstr "通过 ``manage.py`` 通知谷歌"

msgid ""
"Once the sitemaps application is added to your project, you may also ping "
"Google using the ``ping_google`` management command:"
msgstr ""

msgid "Use this option if your sitemap uses ``http`` rather than ``https``."
msgstr "如果你的网站地图使用 ``http`` 而不是 ``https``，请使用这个选项。"

msgid "The \"sites\" framework"
msgstr "“站点”框架"

msgid ""
"Django comes with an optional \"sites\" framework. It's a hook for "
"associating objects and functionality to particular websites, and it's a "
"holding place for the domain names and \"verbose\" names of your Django-"
"powered sites."
msgstr ""
"Django 自带了一个可选的“站点”框架。它是一个钩子，用于将对象和功能关联到特定的"
"网站上，它是你的 Django 驱动的网站的域名和“啰嗦”名称的保存地。"

msgid ""
"Use it if your single Django installation powers more than one site and you "
"need to differentiate between those sites in some way."
msgstr ""
"如果你的单个 Django 安装支持多个站点，并且你需要以某种方式区分这些站点，那么"
"就使用它。"

msgid "The sites framework is mainly based on this model:"
msgstr "站点框架主要基于这个模型："

msgid ""
"A model for storing the ``domain`` and ``name`` attributes of a website."
msgstr "储存网站 ``domain`` 和 ``name`` 属性的模型。"

msgid ""
"The fully qualified domain name associated with the website. For example, "
"``www.example.com``."
msgstr "与网站相关的完全合格域名。例如，``www.example.com``。"

msgid "A human-readable \"verbose\" name for the website."
msgstr "一个人类可读的“啰嗦”的网站名称。"

msgid ""
"The :setting:`SITE_ID` setting specifies the database ID of the :class:"
"`~django.contrib.sites.models.Site` object associated with that particular "
"settings file. If the setting is omitted, the :func:`~django.contrib.sites."
"shortcuts.get_current_site` function will try to get the current site by "
"comparing the :attr:`~django.contrib.sites.models.Site.domain` with the host "
"name from the :meth:`request.get_host() <django.http.HttpRequest.get_host>` "
"method."
msgstr ""
":setting:`SITE_ID` 配置指定与该特定配置文件相关联的 :class:`~django.contrib."
"sites.models.Site` 对象的数据库 ID。如果省略该设置，则 :func:`~django."
"contrib.sites.sites.shortcuts.get_current_site` 函数将尝试通过比较 :attr:"
"`~django.contrib.sites.models.Site.domain` 和 :meth:`request.get_host() "
"<django.http.HttpRequest.get_host>` 方法中的主机名来获取当前站点。"

msgid ""
"How you use this is up to you, but Django uses it in a couple of ways "
"automatically via a couple of conventions."
msgstr "如何使用这个功能由你决定，但 Django 通过几个约定自动使用它。"

msgid "Example usage"
msgstr "使用实例"

msgid "Why would you use sites? It's best explained through examples."
msgstr "为什么要用站点？通过例子来解释是最好的。"

msgid "Associating content with multiple sites"
msgstr "将内容与多个网站关联"

msgid ""
"The LJWorld.com_ and Lawrence.com_ sites are operated by the same news "
"organization -- the Lawrence Journal-World newspaper in Lawrence, Kansas. "
"LJWorld.com focused on news, while Lawrence.com focused on local "
"entertainment. But sometimes editors wanted to publish an article on *both* "
"sites."
msgstr ""
"LJWorld.com_ 和 Lawrence.com_ 网站由同一新闻组织——堪萨斯州劳伦斯市的《劳伦斯"
"世界报》经营。LJWorld.com 专注于新闻，而 Lawrence.com 则专注于本地娱乐。但有"
"时编辑们想 *同时* 在两个网站上发表一篇文章。"

msgid ""
"The naive way of solving the problem would be to require site producers to "
"publish the same story twice: once for LJWorld.com and again for Lawrence."
"com. But that's inefficient for site producers, and it's redundant to store "
"multiple copies of the same story in the database."
msgstr ""
"解决这个问题的天真方法是要求网站制作者将同一篇报道发布两次：一次发布在 "
"LJWorld.com，另一次发布在 Lawrence.com。但这对网站制作者来说效率很低，而且在"
"数据库中存储同一故事的多个副本是多余的。"

msgid ""
"A better solution removes the content duplication: Both sites use the same "
"article database, and an article is associated with one or more sites. In "
"Django model terminology, that's represented by a :class:`~django.db.models."
"ManyToManyField` in the ``Article`` model::"
msgstr ""
"更好的解决方案是去除内容重复。两个网站使用同一个文章数据库，一篇文章与一个或"
"多个网站相关联。用 Django 模型术语来说，就是用 ``Article`` 模型中的一个 :"
"class:`~django.db.models.ManyToManyField` 来表示："

msgid "This accomplishes several things quite nicely:"
msgstr "这就很好地完成了几件事："

msgid ""
"It lets the site producers edit all content -- on both sites -- in a single "
"interface (the Django admin)."
msgstr "它让网站制作者可以在一个界面（Django 管理）上编辑两个网站的所有内容。"

msgid ""
"It means the same story doesn't have to be published twice in the database; "
"it only has a single record in the database."
msgstr "这意味着同一个故事不必在数据库中发布两次，它在数据库中只有一条记录。"

msgid ""
"It lets the site developers use the same Django view code for both sites. "
"The view code that displays a given story checks to make sure the requested "
"story is on the current site. It looks something like this::"
msgstr ""
"它可以让网站开发者在两个网站上使用相同的 Django 视图代码。显示给定故事的视图"
"代码会检查确认所请求的故事是否在当前站点上。它看起来像这样："

msgid "Associating content with a single site"
msgstr "将内容与单一网站关联"

msgid ""
"Similarly, you can associate a model to the :class:`~django.contrib.sites."
"models.Site` model in a many-to-one relationship, using :class:`~django.db."
"models.ForeignKey`."
msgstr ""
"同样，你也可以用 :class:`~django.contrib.sites.models.Site` 模型与 :class:"
"`~django.db.models.ForeignKey` 以多对一的关系关联。"

msgid ""
"For example, if an article is only allowed on a single site, you'd use a "
"model like this::"
msgstr "例如，如果一篇文章只允许在一个网站上发表，你会使用这样的模型："

msgid "This has the same benefits as described in the last section."
msgstr "这与上一节所述的好处相同。"

msgid "Hooking into the current site from views"
msgstr "从视图连接到当前网站"

msgid ""
"You can use the sites framework in your Django views to do particular things "
"based on the site in which the view is being called. For example::"
msgstr ""
"你可以在你的 Django 视图中使用站点框架，根据视图被调用的站点来做特定的事情。"
"例如："

msgid ""
"It's fragile to hard-code the site IDs like that, in case they change. The "
"cleaner way of accomplishing the same thing is to check the current site's "
"domain::"
msgstr ""
"这样硬编码的网站 ID 很脆弱，万一变了呢。比较干净的方法是检查当前网站的域名："

msgid ""
"This has also the advantage of checking if the sites framework is installed, "
"and return a :class:`~django.contrib.sites.requests.RequestSite` instance if "
"it is not."
msgstr ""
"这样做的另一个好处是可以检查是否安装了站点框架，如果没有安装，则返回一个 :"
"class:`~django.contrib.sites.requests.RequestSite` 实例。"

msgid ""
"If you don't have access to the request object, you can use the "
"``get_current()`` method of the :class:`~django.contrib.sites.models.Site` "
"model's manager. You should then ensure that your settings file does contain "
"the :setting:`SITE_ID` setting. This example is equivalent to the previous "
"one::"
msgstr ""
"如果你没有访问请求对象的权限，你可以使用 :class:`~django.contrib.sites."
"models.Site` 模型的管理器的 ``get_current()`` 方法。然后你应该确保你的设置文"
"件确实包含了 :setting:`SITE_ID` 的配置。这个例子相当于前面的例子："

msgid "Getting the current domain for display"
msgstr "获取当前的显示域名"

msgid ""
"LJWorld.com and Lawrence.com both have email alert functionality, which lets "
"readers sign up to get notifications when news happens. It's pretty basic: A "
"reader signs up on a web form and immediately gets an email saying, \"Thanks "
"for your subscription.\""
msgstr ""
"LJWorld.com 和 Lawrence.com 都有电子邮件提醒功能，让读者在新闻发生时注册以获"
"得通知。这是很基本的：读者在一个网络表格上注册，并立即收到一封电子邮件说：“谢"
"谢你的订阅”。"

msgid ""
"It'd be inefficient and redundant to implement this sign up processing code "
"twice, so the sites use the same code behind the scenes. But the \"thank you "
"for signing up\" notice needs to be different for each site. By using :class:"
"`~django.contrib.sites.models.Site` objects, we can abstract the \"thank "
"you\" notice to use the values of the current site's :attr:`~django.contrib."
"sites.models.Site.name` and :attr:`~django.contrib.sites.models.Site.domain`."
msgstr ""
"如果把这个注册处理代码实现两次，那么效率就会很低，而且是多余的，所以各网站在"
"后台使用的是相同的代码。但是“感谢您的注册”的通知需要每个网站都不一样。通过使"
"用 :class:`~django.contrib.sites.models.Site` 对象，我们可以抽象出“感谢你”通"
"知，使用当前站点的 :attr:`~django.contrib.sites.models.Site.name` 和 :attr:"
"`~django.contrib.sites.models.Site.domain` 的值。"

msgid "Here's an example of what the form-handling view looks like::"
msgstr "下面是表单处理视图的一个例子："

msgid ""
"On Lawrence.com, this email has the subject line \"Thanks for subscribing to "
"lawrence.com alerts.\" On LJWorld.com, the email has the subject \"Thanks "
"for subscribing to LJWorld.com alerts.\" Same goes for the email's message "
"body."
msgstr ""
"在 Lawrence.com 上，这封邮件的主题是“感谢您订阅 Lawrence.com 的提醒”。在 "
"LJWorld.com 上，这封邮件的主题是“感谢您订阅 LJWorld.com 的提醒”。邮件的信息主"
"体也是如此。"

msgid ""
"Note that an even more flexible (but more heavyweight) way of doing this "
"would be to use Django's template system. Assuming Lawrence.com and LJWorld."
"com have different template directories (:setting:`DIRS <TEMPLATES-DIRS>`), "
"you could farm out to the template system like so::"
msgstr ""
"需要注意的是，一个更灵活（但更重量级）的方法是使用 Django 的模板系统。假设 "
"Lawrence.com 和 LJWorld.com 有不同的模板目录（:setting:`DIRS <TEMPLATES-"
"DIRS>`），你可以像这样向模板系统传递："

msgid ""
"In this case, you'd have to create :file:`subject.txt` and :file:`message."
"txt` template files for both the LJWorld.com and Lawrence.com template "
"directories. That gives you more flexibility, but it's also more complex."
msgstr ""
"在这种情况下，你必须为 LJWorld.com 和 Lawrence.com 模板目录创建 :file:"
"`subject.txt` 和 :file:`message.txt` 模板文件。这给你更多的灵活性，但也更复"
"杂。"

msgid ""
"It's a good idea to exploit the :class:`~django.contrib.sites.models.Site` "
"objects as much as possible, to remove unneeded complexity and redundancy."
msgstr ""
"尽量利用 :class:`~django.contrib.sites.models.Site` 对象是个好主意，以消除不"
"必要的复杂性和冗余。"

msgid "Getting the current domain for full URLs"
msgstr "获取当前域名的完整 URL"

msgid ""
"Django's ``get_absolute_url()`` convention is nice for getting your objects' "
"URL without the domain name, but in some cases you might want to display the "
"full URL -- with ``http://`` and the domain and everything -- for an object. "
"To do this, you can use the sites framework. An example:"
msgstr ""

msgid "Enabling the sites framework"
msgstr "启用站点框架"

msgid "To enable the sites framework, follow these steps:"
msgstr "要启用站点框架，请按照以下步骤进行："

msgid ""
"Add ``'django.contrib.sites'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
"将 ``'django.contrib.sites'`` 添加到你的 :setting:`INSTALLED_APPS` 配置中。"

msgid "Define a :setting:`SITE_ID` setting::"
msgstr "定义一个 :setting:`SITE_ID` 配置："

msgid "Run :djadmin:`migrate`."
msgstr "运行 :djadmin:`migrate`。"

msgid ""
"``django.contrib.sites`` registers a :data:`~django.db.models.signals."
"post_migrate` signal handler which creates a default site named ``example."
"com`` with the domain ``example.com``. This site will also be created after "
"Django creates the test database. To set the correct name and domain for "
"your project, you can use a :ref:`data migration <data-migrations>`."
msgstr ""
"``django.contrib.sites`` 注册了一个 :data:`~django.db.models.signals."
"post_migrate` 信号处理程序，该处理程序创建了一个名为 ``example.com`` 的默认站"
"点，域名为 ``example.com``。这个站点也将在 Django 创建测试数据库后被创建。要"
"为你的项目设置正确的名称和域名，你可以使用一个 :ref:`数据迁移 <data-"
"migrations>`。"

msgid ""
"In order to serve different sites in production, you'd create a separate "
"settings file with each ``SITE_ID`` (perhaps importing from a common "
"settings file to avoid duplicating shared settings) and then specify the "
"appropriate :envvar:`DJANGO_SETTINGS_MODULE` for each site."
msgstr ""
"为了在生产中为不同的站点提供服务，你会为每个 ``SITE_ID`` 创建一个单独的配置文"
"件（也许是从一个通用的配置文件中导入，以避免重复的共享设置），然后为每个站点"
"指定适当的 :envar:`DJANGO_SETTINGS_MODULE`。"

msgid "Caching the current ``Site`` object"
msgstr "缓存当前 ``Site`` 对象"

msgid ""
"As the current site is stored in the database, each call to ``Site.objects."
"get_current()`` could result in a database query. But Django is a little "
"cleverer than that: on the first request, the current site is cached, and "
"any subsequent call returns the cached data instead of hitting the database."
msgstr ""
"由于当前站点存储在数据库中，每次调用 ``Site.objects.get_current()`` 都可能导"
"致数据库查询。但 Django 比这更聪明：在第一次请求时，当前站点会被缓存，随后的"
"任何调用都会返回缓存的数据，而不是打到数据库。"

msgid ""
"If for any reason you want to force a database query, you can tell Django to "
"clear the cache using ``Site.objects.clear_cache()``::"
msgstr ""
"如果你出于任何原因想要强制查询数据库，你可以使用 ``Site.objects."
"clear_cache()`` 告诉 Django 清除缓存："

msgid "The ``CurrentSiteManager``"
msgstr "``CurrentSiteManager``"

msgid ""
"If :class:`~django.contrib.sites.models.Site` plays a key role in your "
"application, consider using the helpful :class:`~django.contrib.sites."
"managers.CurrentSiteManager` in your model(s). It's a model :doc:`manager </"
"topics/db/managers>` that automatically filters its queries to include only "
"objects associated with the current :class:`~django.contrib.sites.models."
"Site`."
msgstr ""
"如果 :class:`~django.contrib.sites.models.Site` 在你的应用中起着关键作用，请"
"考虑在你的模型中使用有用的 :class:`~django.contrib.sites.manager."
"CurrentSiteManager`。它是一个模型 :doc:`管理器 </topics/db/managers>`，可以自"
"动过滤查询，只包含与当前 :class:`~django.contrib.sites.models.Site` 相关的对"
"象。"

msgid "Mandatory :setting:`SITE_ID`"
msgstr "强制性 :setting:`SITE_ID`"

msgid ""
"The ``CurrentSiteManager`` is only usable when the :setting:`SITE_ID` "
"setting is defined in your settings."
msgstr ""
"``CurrentSiteManager`` 只有在你的配置中定义了 :setting:`SITE_ID` 配置时才能使"
"用。"

msgid ""
"Use :class:`~django.contrib.sites.managers.CurrentSiteManager` by adding it "
"to your model explicitly. For example::"
msgstr ""
"使用 :class:`~django.contrib.sites.manager.CurrentSiteManager`，将其显式添加"
"到你的模型中。例如："

msgid ""
"With this model, ``Photo.objects.all()`` will return all ``Photo`` objects "
"in the database, but ``Photo.on_site.all()`` will return only the ``Photo`` "
"objects associated with the current site, according to the :setting:"
"`SITE_ID` setting."
msgstr ""
"在这种模式下，``Photo.objects.all()`` 将返回数据库中的所有 ``Photo`` 对象，"
"但 ``Photo.on_site.all()`` 将根据 :setting:`SITE_ID` 设置，只返回与当前站点相"
"关的 ``Photo`` 对象。"

msgid "Put another way, these two statements are equivalent::"
msgstr "换个角度看，这两种说法是等价的："

msgid ""
"How did :class:`~django.contrib.sites.managers.CurrentSiteManager` know "
"which field of ``Photo`` was the :class:`~django.contrib.sites.models.Site`? "
"By default, :class:`~django.contrib.sites.managers.CurrentSiteManager` looks "
"for a either a :class:`~django.db.models.ForeignKey` called ``site`` or a :"
"class:`~django.db.models.ManyToManyField` called ``sites`` to filter on. If "
"you use a field named something other than ``site`` or ``sites`` to identify "
"which :class:`~django.contrib.sites.models.Site` objects your object is "
"related to, then you need to explicitly pass the custom field name as a "
"parameter to :class:`~django.contrib.sites.managers.CurrentSiteManager` on "
"your model. The following model, which has a field called ``publish_on``, "
"demonstrates this::"
msgstr ""
":class:`~django.contrib.sites.managers.CurrentSiteManager` 怎么知道 "
"``Photo`` 的哪个字段是 :class:`~django.contrib.sites.models.Site`？默认情况"
"下， :class:`~django.contrib.sites.managers.CurrentSiteManager` 会寻找一个名"
"为 ``site`` 的 :class:`~django.db.models.ForeignKey` 或者一个名为 ``sites`` "
"的 :class:`~django.db.models.ManyToManyField` 来进行过滤。如果你使用一个名为 "
"``site`` 或 ``sites`` 以外的字段来识别你的对象与哪些 :class:`~django.contrib."
"sites.models.Site` 对象相关，那么你需要显式地将自定义字段名作为参数传递给你的"
"模型上的 :class:`~django.contrib.sites.manager.CurrentSiteManager`。下面的模"
"型，它有一个叫做 ``publish_on`` 的字段，演示了这一点："

msgid ""
"If you attempt to use :class:`~django.contrib.sites.managers."
"CurrentSiteManager` and pass a field name that doesn't exist, Django will "
"raise a ``ValueError``."
msgstr ""
"如果你试图使用 :class:`~django.contrib.sites.manager.CurrentSiteManager` 并传"
"递一个不存在的字段名，Django 将引发一个 ``ValueError``。"

msgid ""
"Finally, note that you'll probably want to keep a normal (non-site-specific) "
"``Manager`` on your model, even if you use :class:`~django.contrib.sites."
"managers.CurrentSiteManager`. As explained in the :doc:`manager "
"documentation </topics/db/managers>`, if you define a manager manually, then "
"Django won't create the automatic ``objects = models.Manager()`` manager for "
"you. Also note that certain parts of Django -- namely, the Django admin site "
"and generic views -- use whichever manager is defined *first* in the model, "
"so if you want your admin site to have access to all objects (not just site-"
"specific ones), put ``objects = models.Manager()`` in your model, before you "
"define :class:`~django.contrib.sites.managers.CurrentSiteManager`."
msgstr ""
"最后，请注意，你可能会希望在你的模型上保留一个正常的（非特定站点的）"
"``Manager``，即使你使用 :class:`~django.contrib.sites.manager."
"CurrentSiteManager`。正如 :doc:`管理器文档 </topics/db/managers>` 中解释的那"
"样，如果你手动定义一个管理器，那么 Django 不会自动为你创建 ``objects = "
"models.Manager()`` 管理器。另外要注意的是，Django 的某些部分——即 Django 的管"
"理站点和通用视图——使用模型中 *先* 定义的管理器，所以如果你想让你的管理站点能"
"够访问所有的对象（不仅仅是站点特定的对象），请在定义 :class:`~django.contrib."
"sites.manager.CurrentSiteManager` 之前，把 ``objects = models.Manager()`` 放"
"在你的模型中。"

msgid "Site middleware"
msgstr "站点中间件"

msgid "If you often use this pattern::"
msgstr "如果你经常使用这种模式："

msgid ""
"To avoid repetitions, add :class:`django.contrib.sites.middleware."
"CurrentSiteMiddleware` to :setting:`MIDDLEWARE`. The middleware sets the "
"``site`` attribute on every request object, so you can use ``request.site`` "
"to get the current site."
msgstr ""
"为了避免重复，在 :setting:`MIDDLEWARE` 中添加 :class:`django.contrib.sites."
"middleware.CurrentSiteMiddleware`。中间件会在每个请求对象上设置 ``site`` 属"
"性，所以你可以使用 ``request.site`` 来获取当前站点。"

msgid "How Django uses the sites framework"
msgstr "Django 如何使用站点框架"

msgid ""
"Although it's not required that you use the sites framework, it's strongly "
"encouraged, because Django takes advantage of it in a few places. Even if "
"your Django installation is powering only a single site, you should take the "
"two seconds to create the site object with your ``domain`` and ``name``, and "
"point to its ID in your :setting:`SITE_ID` setting."
msgstr ""
"虽然不要求你使用站点框架，但强烈鼓励你使用，因为 Django 在一些地方利用了它。"
"即使你的 Django 只安装了一个站点，你也应该花两秒钟的时间用你的 ``domain`` 和 "
"``name`` 创建站点对象，并在你的 :setting:`SITE_ID` 配置中指向它的 ID。"

msgid "Here's how Django uses the sites framework:"
msgstr "下面是 Django 如何使用站点框架："

msgid ""
"In the :mod:`redirects framework <django.contrib.redirects>`, each redirect "
"object is associated with a particular site. When Django searches for a "
"redirect, it takes into account the current site."
msgstr ""
"在 :mod:`重定向框架 <django.contrib.redirects>` 中，每个重定向对象都与一个特"
"定的站点相关联。当 Django 搜索一个重定向时，它会考虑到当前的站点。"

msgid ""
"In the :mod:`flatpages framework <django.contrib.flatpages>`, each flatpage "
"is associated with a particular site. When a flatpage is created, you "
"specify its :class:`~django.contrib.sites.models.Site`, and the :class:"
"`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` checks the "
"current site in retrieving flatpages to display."
msgstr ""
"在 :mod:`简单页面框架 <django.contrib.flatpages>` 中，每个简单页面都与一个特"
"定的站点相关联。当创建一个简单页面时，你指定它的 :class:`~django.contrib."
"sites.models.Site`、:class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` 在检索要显示的简单页面时检查当前站点。"

msgid ""
"In the :mod:`syndication framework <django.contrib.syndication>`, the "
"templates for ``title`` and ``description`` automatically have access to a "
"variable ``{{ site }}``, which is the :class:`~django.contrib.sites.models."
"Site` object representing the current site. Also, the hook for providing "
"item URLs will use the ``domain`` from the current :class:`~django.contrib."
"sites.models.Site` object if you don't specify a fully-qualified domain."
msgstr ""
"在 :mod:`聚合框架 <django.contrib.syndication>` 中，``title`` 和 "
"`description`` 的模板会自动访问一个变量 ``{{ site }}``，它是代表当前站点的 :"
"class:`~django.contrib.sites.models.Site` 对象。另外，如果你没有指定一个完全"
"限定的域，提供项目 URL 的钩子将使用当前 :class:`~django.contrib.sites.models."
"Site` 对象中的 ``domain``。"

msgid ""
"In the :mod:`authentication framework <django.contrib.auth>`, :class:`django."
"contrib.auth.views.LoginView` passes the current :class:`~django.contrib."
"sites.models.Site` name to the template as ``{{ site_name }}``."
msgstr ""
"在 :mod:`认证框架 <django.contrib.auth>` 中， :class:`django.contrib.auth."
"views.LoginView` 将当前 :class:`~django.contrib.sites.models.Site` 名称作为 "
"``{{ site_name }}`` 传递给模板。"

msgid ""
"The shortcut view (``django.contrib.contenttypes.views.shortcut``) uses the "
"domain of the current :class:`~django.contrib.sites.models.Site` object when "
"calculating an object's URL."
msgstr ""
"便捷工具视图（``django.contrib.contenttypes.views.shortcut``）在计算对象的 "
"URL 时，使用当前 :class:`~django.contrib.sites.models.Site` 对象的域名。"

msgid ""
"In the admin framework, the \"view on site\" link uses the current :class:"
"`~django.contrib.sites.models.Site` to work out the domain for the site that "
"it will redirect to."
msgstr ""
"在管理框架中，“在站点上查看”链接使用当前的 :class:`~django.contrib.sites."
"models.Site` 来计算出它将重定向到的站点的域名。"

msgid "``RequestSite`` objects"
msgstr "``RequestSite`` 对象"

msgid ""
"Some :doc:`django.contrib </ref/contrib/index>` applications take advantage "
"of the sites framework but are architected in a way that doesn't *require* "
"the sites framework to be installed in your database. (Some people don't "
"want to, or just aren't *able* to install the extra database table that the "
"sites framework requires.) For those cases, the framework provides a :class:"
"`django.contrib.sites.requests.RequestSite` class, which can be used as a "
"fallback when the database-backed sites framework is not available."
msgstr ""
"有些 :doc:`django.contrib </ref/contrib/index>` 应用程序利用了站点框架的优"
"势，但其架构方式并不 *要求* 在数据库中安装网站框架。(有些人不想，或者只是不 *"
"能* 安装额外的数据库表，而这是网站框架所要求的。) 对于这些情况，框架提供了一"
"个 :class:`django.contrib.sites.requests.RequestSite` 类，当数据库支持的站点"
"框架不可用时，它可以作为后备。"

msgid ""
"A class that shares the primary interface of :class:`~django.contrib.sites."
"models.Site` (i.e., it has ``domain`` and ``name`` attributes) but gets its "
"data from a Django :class:`~django.http.HttpRequest` object rather than from "
"a database."
msgstr ""
"一个共享 :class:`~django.contrib.sites.models.Site` 的主要接口的类（即它有 "
"``domain`` 和 ``name`` 属性），但它的数据是从 Django :class:`~django.http."
"HttpRequest` 对象而不是数据库中获取的。"

msgid ""
"Sets the ``name`` and ``domain`` attributes to the value of :meth:`~django."
"http.HttpRequest.get_host`."
msgstr ""
"将 ``name`` 和 ``domain`` 属性配置为 :meth:`~django.http.HttpRequest."
"get_host` 的值。"

msgid ""
"A :class:`~django.contrib.sites.requests.RequestSite` object has a similar "
"interface to a normal :class:`~django.contrib.sites.models.Site` object, "
"except its :meth:`~django.contrib.sites.requests.RequestSite.__init__()` "
"method takes an :class:`~django.http.HttpRequest` object. It's able to "
"deduce the ``domain`` and ``name`` by looking at the request's domain. It "
"has ``save()`` and ``delete()`` methods to match the interface of :class:"
"`~django.contrib.sites.models.Site`, but the methods raise :exc:"
"`NotImplementedError`."
msgstr ""
"一个 :class:`~django.contrib.sites.requests.RequestSite` 对象的接口与普通的 :"
"class:`~django.contrib.sites.models.Site` 对象类似，只是它的 :meth:`~django."
"contrib.sites.requests.RequestSite.__init__()` 方法采用了一个 :class:"
"`~django.http.HttpRequest` 对象。它能够通过查看请求的域名来推断出 ``domain`` "
"和 ``name``。它有 ``save()`` 和 ``delete()`` 方法，与 :class:`~django."
"contrib.sites.models.Site` 的接口相匹配，但这些方法会引发 :exc:"
"`NotImplementedError`。"

msgid "``get_current_site`` shortcut"
msgstr "``get_current_site`` 便捷工具"

msgid ""
"Finally, to avoid repetitive fallback code, the framework provides a :func:"
"`django.contrib.sites.shortcuts.get_current_site` function."
msgstr ""
"最后，为了避免重复的回退代码，框架提供了一个 :func:`django.contrib.sites."
"shortcuts.get_current_site` 函数。"

msgid ""
"A function that checks if ``django.contrib.sites`` is installed and returns "
"either the current :class:`~django.contrib.sites.models.Site` object or a :"
"class:`~django.contrib.sites.requests.RequestSite` object based on the "
"request. It looks up the current site based on :meth:`request.get_host() "
"<django.http.HttpRequest.get_host>` if the :setting:`SITE_ID` setting is not "
"defined."
msgstr ""
"一个检查是否安装了 ``django.contrib.sites`` 的函数，并根据请求返回当前的 :"
"class:`~django.contrib.sites.models.Site` 对象或一个 :class:`~django.contrib."
"sites.requests.RequestSite` 对象。如果没有定义 :setting:`SITE_ID` 的配置，它"
"就会根据 :meth:`request.get_host() <django.http.HttpRequest.get_host>` 来查找"
"当前站点。"

msgid ""
"Both a domain and a port may be returned by :meth:`request.get_host() "
"<django.http.HttpRequest.get_host>` when the Host header has a port "
"explicitly specified, e.g. ``example.com:80``. In such cases, if the lookup "
"fails because the host does not match a record in the database, the port is "
"stripped and the lookup is retried with the domain part only. This does not "
"apply to :class:`~django.contrib.sites.requests.RequestSite` which will "
"always use the unmodified host."
msgstr ""
"当主机头有一个明确指定的端口时，例如 ``example.com:80``，域名和端口都可能被 :"
"meth:`request.get_host() <django.http.HttpRequest.get_host>` 返回。在这种情况"
"下，如果因为主机与数据库中的记录不匹配而导致查找失败，那么端口将被剥离，并且"
"只用域名部分重新进行查找。这不适用于 :class:`~django.contrib.sites.requests."
"RequestSite`，它将始终使用未修改的主机。"

msgid "The ``staticfiles`` app"
msgstr "``staticfiles`` 应用"

msgid ""
"``django.contrib.staticfiles`` collects static files from each of your "
"applications (and any other places you specify) into a single location that "
"can easily be served in production."
msgstr ""
"``django.contrib.staticfiles`` 从你的每一个应用程序（以及你指定的任何其他地"
"方）收集静态文件到一个单一的位置，可以很容易地在生产中服务。"

msgid ""
"For an introduction to the static files app and some usage examples, see :"
"doc:`/howto/static-files/index`. For guidelines on deploying static files, "
"see :doc:`/howto/static-files/deployment`."
msgstr ""
"关于静态文件应用的介绍和一些使用示例，请参见 :doc:`/howto/static-files/"
"index`。关于部署静态文件的指南，请参见 :doc:`/howto/static-files/"
"deployment`。"

msgid ""
"See :ref:`staticfiles settings <settings-staticfiles>` for details on the "
"following settings:"
msgstr "关于以下配置，请参见 :ref:`静态文件配置 <settings-staticfiles>`："

msgid ":setting:`STORAGES`"
msgstr ""

msgid ":setting:`STATIC_ROOT`"
msgstr ":setting:`STATIC_ROOT`"

msgid ":setting:`STATIC_URL`"
msgstr ":setting:`STATIC_URL`"

msgid ":setting:`STATICFILES_DIRS`"
msgstr ":setting:`STATICFILES_DIRS`"

msgid ":setting:`STATICFILES_STORAGE`"
msgstr ":setting:`STATICFILES_STORAGE`"

msgid ":setting:`STATICFILES_FINDERS`"
msgstr ":setting:`STATICFILES_FINDERS`"

msgid "Management Commands"
msgstr "管理命令"

msgid "``django.contrib.staticfiles`` exposes three management commands."
msgstr "``django.contrib.staticfiles`` 公开了三个管理命令。"

msgid "``collectstatic``"
msgstr "``collectstatic``"

msgid "Collects the static files into :setting:`STATIC_ROOT`."
msgstr "将静态文件收集到 :setting:`STATIC_ROOT` 中。"

msgid ""
"Duplicate file names are by default resolved in a similar way to how "
"template resolution works: the file that is first found in one of the "
"specified locations will be used. If you're confused, the :djadmin:"
"`findstatic` command can help show you which files are found."
msgstr ""
"重复的文件名默认的解析方式与模板解析的方式类似：首先在指定位置找到的文件将被"
"使用。如果你感到困惑， :djadmin:`findstatic` 命令可以帮助你显示哪些文件被找"
"到。"

msgid ""
"On subsequent ``collectstatic`` runs (if ``STATIC_ROOT`` isn't empty), files "
"are copied only if they have a modified timestamp greater than the timestamp "
"of the file in ``STATIC_ROOT``. Therefore if you remove an application from :"
"setting:`INSTALLED_APPS`, it's a good idea to use the :option:`collectstatic "
"--clear` option in order to remove stale static files."
msgstr ""
"在随后运行 ``collectstatic`` 时（如果 ``STATIC_ROOT`` 不是空的），只有当文件"
"的修改时间戳大于 ``STATIC_ROOT`` 中文件的时间戳时，才会被复制。因此，如果你"
"从 :setting:`INSTALLED_APPS` 中删除一个应用程序，最好使用 :option:"
"`collectstatic --clear` 选项来删除过时的静态文件。"

msgid ""
"Files are searched by using the :setting:`enabled finders "
"<STATICFILES_FINDERS>`. The default is to look in all locations defined in :"
"setting:`STATICFILES_DIRS` and in the ``'static'`` directory of apps "
"specified by the :setting:`INSTALLED_APPS` setting."
msgstr ""
"通过使用 :setting:`启用的查找器 <STATICFILES_FINDERS>` 搜索文件。默认情况是"
"在 :setting:`STATICFILES_DIRS` 中定义的所有位置和 :setting:`INSTALLED_APPS` "
"配置指定的应用程序的 ``'static'`` 目录中查找。"

msgid ""
"The :djadmin:`collectstatic` management command calls the :meth:`~django."
"contrib.staticfiles.storage.StaticFilesStorage.post_process` method of the "
"``staticfiles`` storage backend from :setting:`STORAGES` after each run and "
"passes a list of paths that have been found by the management command. It "
"also receives all command line options of :djadmin:`collectstatic`. This is "
"used by the :class:`~django.contrib.staticfiles.storage."
"ManifestStaticFilesStorage` by default."
msgstr ""

msgid ""
"By default, collected files receive permissions from :setting:"
"`FILE_UPLOAD_PERMISSIONS` and collected directories receive permissions "
"from :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS`. If you would like "
"different permissions for these files and/or directories, you can subclass "
"either of the :ref:`static files storage classes <staticfiles-storages>` and "
"specify the ``file_permissions_mode`` and/or ``directory_permissions_mode`` "
"parameters, respectively. For example::"
msgstr ""
"默认情况下，收集的文件从 :setting:`FILE_UPLOAD_PERMISSIONS` 中获得权限，收集"
"的目录从 :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS` 中获得权限。如果你希望"
"这些文件和／或目录有不同的权限，你可以将 :ref:`静态文件存储类 <staticfiles-"
"storages>` 中的任何一个子类化，并分别指定 ``file_permissions_mode`` 和／或 "
"``directory_permissions_mode`` 参数。例如："

msgid ""
"Then set the ``staticfiles`` storage backend in :setting:`STORAGES` setting "
"to ``'path.to.MyStaticFilesStorage'``."
msgstr ""

msgid "Some commonly used options are:"
msgstr "一些常用的选项是："

msgid "Do NOT prompt the user for input of any kind."
msgstr "不要提示用户进行任何形式的输入。"

msgid ""
"Ignore files, directories, or paths matching this glob-style pattern. Use "
"multiple times to ignore more. When specifying a path, always use forward "
"slashes, even on Windows."
msgstr ""
"忽略与此 glob 样式模式匹配的文件、目录或路径。多次使用可以忽略更多的文件、目"
"录或路径。当指定路径时，始终使用正斜线，即使在 Windows 上也是如此。"

msgid "Do everything except modify the filesystem."
msgstr "除了修改文件系统外，其他都要做。"

msgid ""
"Clear the existing files before trying to copy or link the original file."
msgstr "在尝试复制或链接原始文件之前，先清除现有文件。"

msgid "Create a symbolic link to each file instead of copying."
msgstr "为每个文件创建一个符号链接，而不是复制。"

msgid ""
"Don't call the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage."
"post_process` method of the configured ``staticfiles`` storage backend from :"
"setting:`STORAGES`."
msgstr ""

msgid ""
"Don't ignore the common private glob-style patterns ``'CVS'``, ``'.*'`` and "
"``'*~'``."
msgstr "不要忽视常见的私有 glob 样式模式 ``'CVS'``、``'.*'`` 和 ``'*~'``。"

msgid "For a full list of options, refer to the commands own help by running:"
msgstr "完整的选项列表，请参考命令本身的帮助，运行："

msgid "Customizing the ignored pattern list"
msgstr "自定义忽略的模式列表"

msgid ""
"The default ignored pattern list, ``['CVS', '.*', '*~']``, can be customized "
"in a more persistent way than providing the ``--ignore`` command option at "
"each ``collectstatic`` invocation. Provide a custom :class:`~django.apps."
"AppConfig` class, override the ``ignore_patterns`` attribute of this class "
"and replace ``'django.contrib.staticfiles'`` with that class path in your :"
"setting:`INSTALLED_APPS` setting::"
msgstr ""
"默认的忽略模式列表 ``['CVS', '.*', '*~']``，可以用比在每次 ``collectstatic`` "
"调用时提供 ``--ignore`` 命令选项更持久的方式进行自定义。提供一个自定义的 :"
"class:`~django.apps.AppConfig` 类，覆盖这个类的 ``ignore_patterns`` 属性，并"
"在你的 :setting:`INSTALLED_APPS` 设置中用该类路径替换 ``'django.contrib."
"staticfiles'``："

msgid "``findstatic``"
msgstr "``findstatic``"

msgid "Searches for one or more relative paths with the enabled finders."
msgstr "通过启用的查找器搜索一个或多个相对路径。"

msgid ""
"By default, all matching locations are found. To only return the first match "
"for each relative path, use the ``--first`` option:"
msgstr ""
"默认情况下，会找到所有匹配的位置。要只返回每个相对路径的第一个匹配点，请使用 "
"``--first`` 选项："

msgid ""
"This is a debugging aid; it'll show you exactly which static file will be "
"collected for a given path."
msgstr ""
"这是一个调试辅助工具，它会告诉你到底哪个静态文件会被收集到一个给定的路径。"

msgid ""
"By setting the ``--verbosity`` flag to 0, you can suppress the extra output "
"and just get the path names:"
msgstr ""
"通过将 ``--verbosity`` 标志设置为 0，你可以抑制额外的输出，只获取路径名："

msgid ""
"On the other hand, by setting the ``--verbosity`` flag to 2, you can get all "
"the directories which were searched:"
msgstr ""
"另一方面，通过将 ``--verbosity`` 标志设置为 2，可以得到所有被搜索的目录。"

msgid "``runserver``"
msgstr "``runserver``"

msgid ""
"Overrides the core :djadmin:`runserver` command if the ``staticfiles`` app "
"is :setting:`installed<INSTALLED_APPS>` and adds automatic serving of static "
"files. File serving doesn't run through :setting:`MIDDLEWARE`."
msgstr ""
"如果 ``staticfiles`` 应用程序被 :setting:`installed <INSTALLED_APPS>`，则覆盖"
"核心 :djadmin:`runserver` 命令，并增加静态文件的自动服务。文件服务不通过 :"
"setting:`MIDDLEWARE` 运行。"

msgid "The command adds these options:"
msgstr "该命令增加了这些选项："

msgid ""
"Use the ``--nostatic`` option to disable serving of static files with the :"
"doc:`staticfiles </ref/contrib/staticfiles>` app entirely. This option is "
"only available if the :doc:`staticfiles </ref/contrib/staticfiles>` app is "
"in your project's :setting:`INSTALLED_APPS` setting."
msgstr ""
"使用 ``--nostatic`` 选项来完全禁止使用 :doc:`静态文件 </ref/contrib/"
"staticfiles>` 应用程序提供静态文件。只有当 :doc:`静态文件 </ref/contrib/"
"staticfiles>` 应用在你的项目的 :setting:`INSTALLED_APPS` 配置中时，这个选项才"
"可用。"

msgid "Example usage:"
msgstr "使用实例："

msgid ""
"Use the ``--insecure`` option to force serving of static files with the :doc:"
"`staticfiles </ref/contrib/staticfiles>` app even if the :setting:`DEBUG` "
"setting is ``False``. By using this you acknowledge the fact that it's "
"**grossly inefficient** and probably **insecure**. This is only intended for "
"local development, should **never be used in production** and is only "
"available if the :doc:`staticfiles </ref/contrib/staticfiles>` app is in "
"your project's :setting:`INSTALLED_APPS` setting."
msgstr ""
"使用 ``--insecure`` 选项来强制使用 :doc:`静态文件 </ref/contrib/"
"staticfiles>` 应用服务静态文件，即使 :setting:`DEBUG` 设置为 ``False``。通过"
"使用这个选项，你承认了这样的事实，即这是 **效率低下的**，而且可能是 **不安全"
"的**。这仅用于本地开发，**不应在生产中使用**，并且只有当 :doc:`静态文件 </"
"ref/contrib/staticfiles>` 应用在你的项目的 :setting:`INSTALLED_APPS` 设置中时"
"才可用。"

msgid ""
"``--insecure`` doesn't work with :class:`~.storage."
"ManifestStaticFilesStorage`."
msgstr ""
"``--insecure`` 不能与 :class:`~.storage.ManifestStaticFilesStorage` 一起工"
"作。"

msgid "Storages"
msgstr "存储"

msgid "``StaticFilesStorage``"
msgstr "``StaticFilesStorage``"

msgid ""
"A subclass of the :class:`~django.core.files.storage.FileSystemStorage` "
"storage backend that uses the :setting:`STATIC_ROOT` setting as the base "
"file system location and the :setting:`STATIC_URL` setting respectively as "
"the base URL."
msgstr ""
":class:`~django.core.files.storage.FileSystemStorage` 存储后端的一个子类，分"
"别使用 :setting:`STATIC_ROOT` 配置作为基础文件系统位置和 :setting:"
"`STATIC_URL` 配置作为基础 URL。"

msgid ""
"If this method is defined on a storage, it's called by the :djadmin:"
"`collectstatic` management command after each run and gets passed the local "
"storages and paths of found files as a dictionary, as well as the command "
"line options. It yields tuples of three values: ``original_path, "
"processed_path, processed``. The path values are strings and ``processed`` "
"is a boolean indicating whether or not the value was post-processed, or an "
"exception if post-processing failed."
msgstr ""
"如果这个方法定义在一个存储上，那么在每次运行后都会被 :djadmin:"
"`collectstatic` 管理命令调用，并得到本地存储空间和找到的文件路径作为一个字"
"典，以及命令行选项。它产生的元组有三个值。``original_path, processed_path, "
"processed``。路径值是字符串，``processed`` 是一个布尔值，表示该值是否经过后处"
"理，如果后处理失败则表示异常。"

msgid ""
"The :class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` "
"uses this behind the scenes to replace the paths with their hashed "
"counterparts and update the cache appropriately."
msgstr ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` 在幕"
"后使用它将路径替换为它们的哈希对应物，并适当地更新缓存。"

msgid "``ManifestStaticFilesStorage``"
msgstr "``ManifestStaticFilesStorage``"

msgid ""
"A subclass of the :class:`~django.contrib.staticfiles.storage."
"StaticFilesStorage` storage backend which stores the file names it handles "
"by appending the MD5 hash of the file's content to the filename. For "
"example, the file ``css/styles.css`` would also be saved as ``css/"
"styles.55e7cbb9ba48.css``."
msgstr ""
":class:`~django.contrib.staticfiles.storage.StaticFilesStorage` 存储后台的一"
"个子类，它通过在文件名上附加文件内容的 MD5 哈希值来存储它处理的文件名。例如，"
"文件 ``css/styles.css`` 也会被保存为 ``css/styles.55e7cbb9ba48.css``。"

msgid ""
"The purpose of this storage is to keep serving the old files in case some "
"pages still refer to those files, e.g. because they are cached by you or a "
"3rd party proxy server. Additionally, it's very helpful if you want to apply "
"`far future Expires headers`_ to the deployed files to speed up the load "
"time for subsequent page visits."
msgstr ""
"这个存储的目的是为了继续服务于旧文件，以防某些页面仍然引用这些文件，例如，因"
"为它们被你或第三方代理服务器缓存了。此外，如果你想在部署的文件上应用 `远期失"
"效头信息`_ ，以加快后续页面访问的加载时间，它是非常有用的。"

msgid ""
"The storage backend automatically replaces the paths found in the saved "
"files matching other saved files with the path of the cached copy (using "
"the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage."
"post_process` method). The regular expressions used to find those paths "
"(``django.contrib.staticfiles.storage.HashedFilesMixin.patterns``) cover:"
msgstr ""
"存储后端会自动将保存的文件中发现的与其他保存的文件相匹配的路径替换为缓存副本"
"的路径（使用 :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage."
"post_process` 方法）。用于查找这些路径的正则表达式（ ``django.contrib."
"staticfiles.storage.HashedFilesMixin.pattern`` ）涵盖。"

msgid ""
"The `@import`_ rule and `url()`_ statement of `Cascading Style Sheets`_."
msgstr "层叠样式表的 `@import`_ 规则和 `url()`_ 语句。"

msgid "`Source map`_ comments in CSS and JavaScript files."
msgstr ""

msgid ""
"Subclass ``ManifestStaticFilesStorage`` and set the "
"``support_js_module_import_aggregation`` attribute to ``True``, if you want "
"to use the experimental regular expressions to cover:"
msgstr ""

msgid "The `modules import`_ in JavaScript."
msgstr ""

msgid "The `modules aggregation`_ in JavaScript."
msgstr ""

msgid "For example, the ``'css/styles.css'`` file with this content:"
msgstr "例如，``'css/styles.css'`` 文件有这样的内容："

msgid ""
"...would be replaced by calling the :meth:`~django.core.files.storage."
"Storage.url` method of the ``ManifestStaticFilesStorage`` storage backend, "
"ultimately saving a ``'css/styles.55e7cbb9ba48.css'`` file with the "
"following content:"
msgstr ""
"...将通过调用 ``ManifestStaticFilesStorage`` 存储后端的 :meth:`~django.core."
"files.storage.Storage.url` 方法来替代，最终保存一个 ``css/"
"styles.55e7cbb9ba48.css`` 文件，内容如下："

msgid ""
"You can change the location of the manifest file by using a custom "
"``ManifestStaticFilesStorage`` subclass that sets the ``manifest_storage`` "
"argument. For example::"
msgstr ""
"您可以通过使用自定义的 ``ManifestStaticFilesStorage`` 子类，设置 "
"``manifest_storage`` 参数来改变清单文件的位置。例如："

msgid "References in comments"
msgstr ""

msgid ""
"``ManifestStaticFilesStorage`` doesn't ignore paths in statements that are "
"commented out. This :ticket:`may crash on the nonexistent paths <21080>`. "
"You should check and eventually strip comments."
msgstr ""

msgid "Support for finding paths in CSS source map comments was added."
msgstr ""

msgid ""
"Experimental optional support for finding paths to JavaScript modules in "
"``import`` and ``export`` statements was added."
msgstr ""

msgid ""
"This attribute provides a single hash that changes whenever a file in the "
"manifest changes. This can be useful to communicate to SPAs that the assets "
"on the server have changed (due to a new deployment)."
msgstr ""

msgid ""
"Since static files might reference other static files that need to have "
"their paths replaced, multiple passes of replacing paths may be needed until "
"the file hashes converge. To prevent an infinite loop due to hashes not "
"converging (for example, if ``'foo.css'`` references ``'bar.css'`` which "
"references ``'foo.css'``) there is a maximum number of passes before post-"
"processing is abandoned. In cases with a large number of references, a "
"higher number of passes might be needed. Increase the maximum number of "
"passes by subclassing ``ManifestStaticFilesStorage`` and setting the "
"``max_post_process_passes`` attribute. It defaults to 5."
msgstr ""
"由于静态文件可能会引用其他需要替换路径的静态文件，因此可能需要多次替换路径，"
"直到文件哈希值收敛。为了防止由于哈希值不收敛而导致无限循环（例如，如果 "
"``'foo.css'`` 引用 ``'bar.css'``，而后者引用 ``'foo.css'``），在放弃后处理之"
"前有一个最大的传递次数。在引用数量较多的情况下，可能需要更多的传递次数。通过"
"子类 ``ManifestStaticFilesStorage`` 并设置 ``max_post_process_passes`` 属性来"
"增加最大传递次数。默认值为 5。"

msgid ""
"To enable the ``ManifestStaticFilesStorage`` you have to make sure the "
"following requirements are met:"
msgstr "要启用 ``ManifestStaticFilesStorage``，你必须确保满足以下要求："

msgid ""
"the ``staticfiles`` storage backend in :setting:`STORAGES` setting is set to "
"``'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'``"
msgstr ""

msgid "the :setting:`DEBUG` setting is set to ``False``"
msgstr ":setting:`DEBUG` 设置为 ``False``"

msgid ""
"you've collected all your static files by using the :djadmin:`collectstatic` "
"management command"
msgstr "通过使用 :djadmin:`collectstatic` 管理命令，你已经收集了所有静态文件"

msgid ""
"Since creating the MD5 hash can be a performance burden to your website "
"during runtime, ``staticfiles`` will automatically store the mapping with "
"hashed names for all processed files in a file called ``staticfiles.json``. "
"This happens once when you run the :djadmin:`collectstatic` management "
"command."
msgstr ""
"由于在运行时创建 MD5 哈希可能会给网站带来性能负担，``staticfiles`` 会自动将所"
"有处理过的文件的哈希名映射存储在一个名为 ``staticfiles.json`` 的文件中。当你"
"运行 :djadmin:`collectstatic` 管理命令时就会发生一次。"

msgid ""
"If a file isn't found in the ``staticfiles.json`` manifest at runtime, a "
"``ValueError`` is raised. This behavior can be disabled by subclassing "
"``ManifestStaticFilesStorage`` and setting the ``manifest_strict`` attribute "
"to ``False`` -- nonexistent paths will remain unchanged."
msgstr ""
"如果在运行时在 ``staticfiles.json`` 清单中没有找到文件，就会引发 "
"``ValueError``。这种行为可以通过子类 ``ManifestStaticFilesStorage`` 并将 "
"``manifest_strict`` 属性设置为 ``False`` 来禁止，不存在的路径将保持不变。"

msgid ""
"Due to the requirement of running :djadmin:`collectstatic`, this storage "
"typically shouldn't be used when running tests as ``collectstatic`` isn't "
"run as part of the normal test setup. During testing, ensure that "
"``staticfiles`` storage backend in the :setting:`STORAGES` setting is set to "
"something else like ``'django.contrib.staticfiles.storage."
"StaticFilesStorage'`` (the default)."
msgstr ""

msgid ""
"The method that is used when creating the hashed name of a file. Needs to "
"return a hash for the given file name and content. By default it calculates "
"a MD5 hash from the content's chunks as mentioned above. Feel free to "
"override this method to use your own hashing algorithm."
msgstr ""
"创建文件的哈希名时使用的方法。需要返回给定文件名和内容的哈希值。默认情况下，"
"它从上面提到的内容块中计算出一个 MD5 哈希。可以随意覆盖这个方法，使用自己的哈"
"希算法。"

msgid "``ManifestFilesMixin``"
msgstr "``ManifestFilesMixin``"

msgid ""
"Use this mixin with a custom storage to append the MD5 hash of the file's "
"content to the filename as :class:`~storage.ManifestStaticFilesStorage` does."
msgstr ""
"使用这个混入和一个自定义的存储来附加文件内容的 MD5 哈希到文件名中，就像 :"
"class:`~storage.ManifestStaticFilesStorage` 那样。"

msgid "Finders Module"
msgstr "查找器模块"

msgid ""
"``staticfiles`` finders has a ``searched_locations`` attribute which is a "
"list of directory paths in which the finders searched. Example usage::"
msgstr ""
"``staticfiles`` 查找器有一个 ``searched_locations`` 属性，是查找器搜索的目录"
"路径列表。使用示例："

msgid "Other Helpers"
msgstr "其他辅助功能"

msgid ""
"There are a few other helpers outside of the :mod:`staticfiles <django."
"contrib.staticfiles>` app to work with static files:"
msgstr ""
"在 :mod:`staticfiles <django.contrib.staticfiles>` 应用程序之外，还有一些其他"
"的辅助功能来处理静态文件。"

msgid ""
"The :func:`django.template.context_processors.static` context processor "
"which adds :setting:`STATIC_URL` to every template context rendered with :"
"class:`~django.template.RequestContext` contexts."
msgstr ""
":func:`django.template.context_processors.static` 上下文处理器，它为每个用  :"
"class:`~django.template.RequestContext` 上下文渲染的模板上下文添加 :setting:"
"`STATIC_URL`。"

msgid ""
"The builtin template tag :ttag:`static` which takes a path and urljoins it "
"with the static prefix :setting:`STATIC_URL`. If ``django.contrib."
"staticfiles`` is installed, the tag uses the ``url()`` method of the "
"``staticfiles`` storage backend from :setting:`STORAGES` instead."
msgstr ""

msgid ""
"The builtin template tag :ttag:`get_static_prefix` which populates a "
"template variable with the static prefix :setting:`STATIC_URL` to be used as "
"a variable or directly."
msgstr ""
"内置的模板标签 :ttag:`get_static_prefix`，将静态前缀 :setting:`STATIC_URL` 填"
"充到模板变量中，作为变量或直接使用。"

msgid ""
"The similar template tag :ttag:`get_media_prefix` which works like :ttag:"
"`get_static_prefix` but uses :setting:`MEDIA_URL`."
msgstr ""
"类似的模板标签 :ttag:`get_media_prefix`，其工作原理与 :ttag:"
"`get_static_prefix` 类似，但使用 :setting:`MEDIA_URL`。"

msgid ""
"The ``staticfiles`` key in :data:`django.core.files.storage.storages` "
"contains a ready-to-use instance of the staticfiles storage backend."
msgstr ""

msgid "Static file development view"
msgstr "静态文件开发视图"

msgid ""
"The static files tools are mostly designed to help with getting static files "
"successfully deployed into production. This usually means a separate, "
"dedicated static file server, which is a lot of overhead to mess with when "
"developing locally. Thus, the ``staticfiles`` app ships with a **quick and "
"dirty helper view** that you can use to serve files locally in development."
msgstr ""
"静态文件工具主要是为了帮助将静态文件成功部署到生产中。这通常意味着一个单独"
"的、专用的静态文件服务器，这在本地开发时是一个很大的开销。因此，"
"``staticfiles`` 应用程序中附带了一个 **快速和肮脏的辅助视图**，你可以在开发中"
"使用它在本地服务文件。"

msgid "This view function serves static files in development."
msgstr "该视图功能服务于开发中的静态文件。"

msgid "This view will only work if :setting:`DEBUG` is ``True``."
msgstr "只有当 :setting:`DEBUG` 为 ``True`` 时，该视图才会生效。"

msgid ""
"That's because this view is **grossly inefficient** and probably "
"**insecure**. This is only intended for local development, and should "
"**never be used in production**."
msgstr ""
"这是因为这个视图的 **效率很低**，而且可能 **不安全**。这只用于本地开发，**不"
"应该用于生产**。"

msgid ""
"To guess the served files' content types, this view relies on the :py:mod:"
"`mimetypes` module from the Python standard library, which itself relies on "
"the underlying platform's map files. If you find that this view doesn't "
"return proper content types for certain files, it is most likely that the "
"platform's map files are incorrect or need to be updated. This can be "
"achieved, for example, by installing or updating the ``mailcap`` package on "
"a Red Hat distribution, ``mime-support`` on a Debian distribution, or by "
"editing the keys under ``HKEY_CLASSES_ROOT`` in the Windows registry."
msgstr ""
"为了猜测服务文件的内容类型，这个视图依赖于 Python 标准库中的 :py:mod:"
"`mimetypes` 模块，它本身依赖于底层平台的映射文件。如果你发现这个视图没有为某"
"些文件返回正确的内容类型，很可能是平台的映射文件不正确或者需要更新。例如，可"
"以通过安装或更新 Red Hat 发行版上的 ``mailcap`` 包、Debian 发行版上的 ``mime-"
"support``，或编辑 Windows 注册表中 ``HKEY_CLASSES_ROOT`` 下的键来实现。"

msgid ""
"This view is automatically enabled by :djadmin:`runserver` (with a :setting:"
"`DEBUG` setting set to ``True``). To use the view with a different local "
"development server, add the following snippet to the end of your primary URL "
"configuration::"
msgstr ""
"该视图由 :djadmin:`runserver` 自动启用（将 :setting:`DEBUG` 设置为 "
"``True``）。要在不同的本地开发服务器上使用该视图，请在主 URL 配置的结尾添加以"
"下代码段："

msgid ""
"Note, the beginning of the pattern (``r'^static/'``) should be your :setting:"
"`STATIC_URL` setting."
msgstr ""
"注意，模式的开头（``r'^static/'``）应该是你的 :setting:`STATIC_URL` 配置。"

msgid ""
"Since this is a bit finicky, there's also a helper function that'll do this "
"for you:"
msgstr "因为这个有点细，所以还有一个辅助功能可以帮你完成这个任务："

msgid ""
"This will return the proper URL pattern for serving static files to your "
"already defined pattern list. Use it like this::"
msgstr ""
"这将返回适当的 URL 模式，用于向你已经定义的模式列表提供静态文件。像这样使用"
"它："

msgid ""
"This will inspect your :setting:`STATIC_URL` setting and wire up the view to "
"serve static files accordingly. Don't forget to set the :setting:"
"`STATICFILES_DIRS` setting appropriately to let ``django.contrib."
"staticfiles`` know where to look for files in addition to files in app "
"directories."
msgstr ""
"这将检查你的 :setting:`STATIC_URL` 配置，并相应地给视图设置静态文件。不要忘记"
"设置 :setting:`STATICFILES_DIRS` 配置，让 ``django.contrib.staticfiles`` 知道"
"除了应用程序目录中的文件外，还可以在哪里查找文件。"

msgid ""
"This helper function will only work if :setting:`DEBUG` is ``True`` and "
"your :setting:`STATIC_URL` setting is neither empty nor a full URL such as "
"``http://static.example.com/``."
msgstr ""
"只有当 :setting:`DEBUG` 是 ``True``，并且你的 :setting:`STATIC_URL` 的配置既"
"不是空的，也不是完整的 URL，比如 ``http://static.example.com/``，这个辅助函数"
"才会起作用。"

msgid "Specialized test case to support 'live testing'"
msgstr "支持“实时测试”的专门测试案例"

msgid ""
"This unittest TestCase subclass extends :class:`django.test."
"LiveServerTestCase`."
msgstr ""
"这个 untest TestCase 子类扩展了 :class:`django.test.LiveServerTestCase`。"

msgid ""
"Just like its parent, you can use it to write tests that involve running the "
"code under test and consuming it with testing tools through HTTP (e.g. "
"Selenium, PhantomJS, etc.), because of which it's needed that the static "
"assets are also published."
msgstr ""
"就像它的父类一样，你可以用它来编写测试，涉及到运行被测代码，并通过 HTTP 与测"
"试工具（如 Selenium、PhantomJS 等）进行消费，因为这需要静态资产也被发布。"

msgid ""
"But given the fact that it makes use of the :func:`django.contrib."
"staticfiles.views.serve` view described above, it can transparently overlay "
"at test execution-time the assets provided by the ``staticfiles`` finders. "
"This means you don't need to run :djadmin:`collectstatic` before or as a "
"part of your tests setup."
msgstr ""
"但是由于它使用了上面描述的 :func:`django.contrib.staticfiles.views.service` "
"视图，它可以在测试执行时透明地叠加 ``staticfiles`` 查找器提供的资产。这意味着"
"你不需要在测试配置之前或作为测试配置的一部分运行 :djadmin:`collectstatic`。"

msgid "The syndication feed framework"
msgstr "Feed 聚合框架"

msgid ""
"Django comes with a high-level syndication-feed-generating framework for "
"creating RSS_ and :rfc:`Atom <4287>` feeds."
msgstr ""
"Django 提供了一个高级的 feed 聚合生成框架来创建 RSS_ 和 :rfc:`Atom <4287>` "
"feed。"

msgid ""
"To create any syndication feed, all you have to do is write a short Python "
"class. You can create as many feeds as you want."
msgstr ""
"要创建任何聚合 feed，你只需要写一个简短的 Python 类。你可以创建任何你想要的 "
"feed。"

msgid ""
"Django also comes with a lower-level feed-generating API. Use this if you "
"want to generate feeds outside of a web context, or in some other lower-"
"level way."
msgstr ""
"Django 还提供了一个低级别的 feed 生成 API。如果你想在网络内容之外或以其他较低"
"级别的方式生成 feed，可以使用这个 API。"

msgid "The high-level framework"
msgstr "高级框架"

msgid ""
"The high-level feed-generating framework is supplied by the :class:`~django."
"contrib.syndication.views.Feed` class. To create a feed, write a :class:"
"`~django.contrib.syndication.views.Feed` class and point to an instance of "
"it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""
"高级 feed 生成框架由 :class:`~django.contrib.syndication.views.Feed` 类提供。"
"要创建一个 feed，需要写一个 :class:`~django.contrib.syndication.views.Feed` "
"类，并在你的 :doc:`URLconf </topics/http/urls>` 中指向它的一个实例。"

msgid "``Feed`` classes"
msgstr "``Feed`` 类"

msgid ""
"A :class:`~django.contrib.syndication.views.Feed` class is a Python class "
"that represents a syndication feed. A feed can be simple (e.g., a \"site "
"news\" feed, or a basic feed displaying the latest entries of a blog) or "
"more complex (e.g., a feed displaying all the blog entries in a particular "
"category, where the category is variable)."
msgstr ""
":class:`~django.contrib.syndication.views.Feed` 类是一个 Python 类，它表示一"
"个聚合 feed。Feed 可以是简单的（例如，一个“站点新闻”feed，或者一个显示博客最"
"新条目的基本 feed），也可以是更复杂的（例如，一个显示特定类别中所有博客条目"
"的 feed，其中类别是可变的）。"

msgid ""
"Feed classes subclass :class:`django.contrib.syndication.views.Feed`. They "
"can live anywhere in your codebase."
msgstr ""
"Feed 类子类 :class:`django.contrib.syndication.views.Feed`。它们可以存在于你"
"代码库的任何地方。"

msgid ""
"Instances of :class:`~django.contrib.syndication.views.Feed` classes are "
"views which can be used in your :doc:`URLconf </topics/http/urls>`."
msgstr ""
":class:`~django.contrib.syndication.views.Feed` 类的实例是可以在你的 :doc:"
"`URLconf </topics/http/urls>` 中使用的视图。"

msgid "A simple example"
msgstr "一个简单的例子"

msgid ""
"This simple example, taken from a hypothetical police beat news site "
"describes a feed of the latest five news items::"
msgstr ""
"这个简单的例子，取自于一个假设的警拍新闻网站，描述了一个最新的五个新闻项目的 "
"feed："

msgid ""
"To connect a URL to this feed, put an instance of the Feed object in your :"
"doc:`URLconf </topics/http/urls>`. For example::"
msgstr ""
"要连接到这个 feed 的 URL，在你的 :doc:`URLconf </topics/http/urls>` 中放入一"
"个 Feed 对象的实例。例如："

msgid ""
"The Feed class subclasses :class:`django.contrib.syndication.views.Feed`."
msgstr "Feed 类的子类 :class:`django.contrib.syndication.views.Feed`。"

msgid ""
"``title``, ``link`` and ``description`` correspond to the standard RSS "
"``<title>``, ``<link>`` and ``<description>`` elements, respectively."
msgstr ""
"``title``、``link`` 和 ``description`` 分别对应标准的 RSS ``<title>``、"
"``<link>`` 和 ``<description>`` 元素。"

msgid ""
"``items()`` is, a method that returns a list of objects that should be "
"included in the feed as ``<item>`` elements. Although this example returns "
"``NewsItem`` objects using Django's :doc:`object-relational mapper </ref/"
"models/querysets>`, ``items()`` doesn't have to return model instances. "
"Although you get a few bits of functionality \"for free\" by using Django "
"models, ``items()`` can return any type of object you want."
msgstr ""
"``items()`` 是一个返回一个应该作为 ``<item>`` 元素包含在 feed 中的对象列表的"
"方法。虽然这个例子使用 Django 的 :doc:`对象关系映射器 </ref/models/"
"querysets>` 返回 ``NewsItem`` 对象，但是 ``items()`` 并不是一定要返回模型实"
"例。虽然你通过使用Django模型得到了一些“免费”的功能，但 ``items()`` 可以返回任"
"何类型的对象。"

msgid ""
"If you're creating an Atom feed, rather than an RSS feed, set the "
"``subtitle`` attribute instead of the ``description`` attribute. See "
"`Publishing Atom and RSS feeds in tandem`_, later, for an example."
msgstr ""
"如果你正在创建一个 Atom feed，而不是 RSS feed，请设置 ``subtitle`` 属性而不"
"是 ``description`` 属性。参见后面的 `同时发布 Atom 和 RSS feeds`_ 的例子。"

msgid ""
"One thing is left to do. In an RSS feed, each ``<item>`` has a ``<title>``, "
"``<link>`` and ``<description>``. We need to tell the framework what data to "
"put into those elements."
msgstr ""
"还剩下一件事要做。在一个 RSS Feed 中，每个 ``<item>`` 都有一个 ``<title>``、"
"``<link>`` 和 ``<description>``。我们需要告诉框架在这些元素中放入哪些数据。"

msgid ""
"For the contents of ``<title>`` and ``<description>``, Django tries calling "
"the methods ``item_title()`` and ``item_description()`` on the :class:"
"`~django.contrib.syndication.views.Feed` class. They are passed a single "
"parameter, ``item``, which is the object itself. These are optional; by "
"default, the string representation of the object is used for both."
msgstr ""
"对于 ``<title>`` 和 ``<description>`` 的内容，Django 尝试在 :class:`~django."
"contrib.syndication.views.Feed` 类上调用方法 ``item_title()`` 和 "
"``item_description()``。它们会传递一个单一的参数 ``item``，也就是对象本身。这"
"些参数是可选的；默认情况下，两者都使用对象的字符串表示。"

msgid ""
"If you want to do any special formatting for either the title or "
"description, :doc:`Django templates </ref/templates/language>` can be used "
"instead. Their paths can be specified with the ``title_template`` and "
"``description_template`` attributes on the :class:`~django.contrib."
"syndication.views.Feed` class. The templates are rendered for each item and "
"are passed two template context variables:"
msgstr ""
"如果你想对标题或描述进行特定格式化，可以使用 :doc:`Django 模板 </ref/"
"templates/language>` 来代替。它们的路径可以通过 :class:`~django.contrib."
"syndication.views.Feed` 类中的 ``title_template`` 和 "
"``description_template`` 属性来指定。每个项目的模板都会被渲染，并传递两个模板"
"上下文变量。"

msgid ""
"``{{ obj }}`` -- The current object (one of whichever objects you returned "
"in ``items()``)."
msgstr "``{{ obj }}``——当前对象（你在 ``items()`` 中返回的对象之一）。"

msgid ""
"``{{ site }}`` -- A :class:`django.contrib.sites.models.Site` object "
"representing the current site. This is useful for ``{{ site.domain }}`` or "
"``{{ site.name }}``. If you do *not* have the Django sites framework "
"installed, this will be set to a :class:`~django.contrib.sites.requests."
"RequestSite` object. See the :ref:`RequestSite section of the sites "
"framework documentation <requestsite-objects>` for more."
msgstr ""
"``{{ site }}`` —— 代表当前站点的 :class:`django.contrib.sites.models.Site` 对"
"象。这对于 ``{ site.domain }}`` 或 ``{ site.name }}`` 是很有用的。如果你没有"
"安装 Django 站点框架，那么这个对象将被设置为一个 :class:`~django.contrib."
"sites.requests.RequestSite` 对象。更多内容请参考 :ref:`网站框架文档中的 "
"RequestSite 部分 <requestsite-objects>`。"

msgid "See `a complex example`_ below that uses a description template."
msgstr "请看下面使用描述模板的 `一个复杂的例子`_ 。"

msgid ""
"There is also a way to pass additional information to title and description "
"templates, if you need to supply more than the two variables mentioned "
"before. You can provide your implementation of ``get_context_data`` method "
"in your ``Feed`` subclass. For example::"
msgstr ""
"如果你需要提供比前面提到的两个变量更多的信息，还有一种方法可以向标题和描述模"
"板传递额外的信息。你可以在你的 ``Feed`` 子类中提供 ``get_context_data`` 方法"
"的实现。例如："

msgid "And the template:"
msgstr "还有模板："

msgid ""
"This method will be called once per each item in the list returned by "
"``items()`` with the following keyword arguments:"
msgstr ""
"本方法将对 ``items()`` 返回的列表中的每个项目调用一次，其关键字参数如下："

msgid ""
"``item``: the current item. For backward compatibility reasons, the name of "
"this context variable is ``{{ obj }}``."
msgstr ""
"``item``：当前项目。出于向后兼容的原因，这个上下文变量的名称是 ``{{ obj }}"
"``。"

msgid ""
"``obj``: the object returned by ``get_object()``. By default this is not "
"exposed to the templates to avoid confusion with ``{{ obj }}`` (see above), "
"but you can use it in your implementation of ``get_context_data()``."
msgstr ""
"``obj``：由 ``get_object()`` 返回的对象。默认情况下，它不会暴露在模板中，以避"
"免与 ``{{ obj }}`` 混淆（见上文），但你可以在实现 ``get_context_data()`` 时使"
"用它。"

msgid "``site``: current site as described above."
msgstr "``site``：如上所述的当前站点。"

msgid "``request``: current request."
msgstr "``request``：当前请求。"

msgid ""
"The behavior of ``get_context_data()`` mimics that of :ref:`generic views "
"<adding-extra-context>` - you're supposed to call ``super()`` to retrieve "
"context data from parent class, add your data and return the modified "
"dictionary."
msgstr ""
"``get_context_data()`` 的行为模仿 :ref:`通用视图 <adding-extra-context>`——你"
"应该调用 ``super()`` 从父类中获取上下文数据，添加你的数据并返回修改后的字典。"

msgid ""
"To specify the contents of ``<link>``, you have two options. For each item "
"in ``items()``, Django first tries calling the ``item_link()`` method on "
"the :class:`~django.contrib.syndication.views.Feed` class. In a similar way "
"to the title and description, it is passed it a single parameter, ``item``. "
"If that method doesn't exist, Django tries executing a "
"``get_absolute_url()`` method on that object. Both ``get_absolute_url()`` "
"and ``item_link()`` should return the item's URL as a normal Python string. "
"As with ``get_absolute_url()``, the result of ``item_link()`` will be "
"included directly in the URL, so you are responsible for doing all necessary "
"URL quoting and conversion to ASCII inside the method itself."
msgstr ""
"要指定 ``<link>`` 的内容，你有两个选择。对于 ``items()`` 中的每一个项目，"
"Django 首先尝试调用 :class:`~django.contrib.syndication.views.Feed` 类上的 "
"``item_link()`` 方法。以类似于标题和描述的方式，给它传递一个单一的参数，"
"``item``。如果该方法不存在，Django 会尝试在该对象上执行一个 "
"``get_absolute_url()`` 方法。``get_absolute_url()`` 和 ``item_link()`` 都应该"
"以普通 Python 字符串的形式返回项目的 URL。和 ``get_absolute_url()`` 一样，"
"``item_link()`` 的结果将直接包含在 URL 中，所以你要负责在方法本身内部进行所有"
"必要的 URL 引用和 ASCII 转换。"

msgid "A complex example"
msgstr "一个复杂的例子"

msgid "The framework also supports more complex feeds, via arguments."
msgstr "该框架还支持更复杂的 feed，通过参数。"

msgid ""
"For example, a website could offer an RSS feed of recent crimes for every "
"police beat in a city. It'd be silly to create a separate :class:`~django."
"contrib.syndication.views.Feed` class for each police beat; that would "
"violate the :ref:`DRY principle <dry>` and would couple data to programming "
"logic. Instead, the syndication framework lets you access the arguments "
"passed from your :doc:`URLconf </topics/http/urls>` so feeds can output "
"items based on information in the feed's URL."
msgstr ""
"例如，一个网站可以为一个城市的每一个警察局提供最近发生的犯罪行为的 RSS feed。"
"如果为每个警察巡逻创建一个单独的 :class:`~django.contrib.syndication.views."
"Feed` 类，那就太傻了；那会违反 :ref:`DRY 原则 <dry>`，并且会把数据和编程逻辑"
"联系起来。相反，聚合框架让你访问从你的 :doc:`URLconf </topics/http/urls>` 传"
"递的参数，这样 feed 就可以根据 URL 中的信息输出项目。"

msgid "The police beat feeds could be accessible via URLs like this:"
msgstr "可以通过这样的网址访问警察局 feed："

msgid "``/beats/613/rss/`` -- Returns recent crimes for beat 613."
msgstr ""

msgid "``/beats/1424/rss/`` -- Returns recent crimes for beat 1424."
msgstr ""

msgid ""
"These can be matched with a :doc:`URLconf </topics/http/urls>` line such as::"
msgstr "这些可以用 :doc:`URLconf </topics/http/urls>` 行来匹配，如："

msgid ""
"Like a view, the arguments in the URL are passed to the ``get_object()`` "
"method along with the request object."
msgstr "像视图一样，URL 中的参数和请求对象一起传递给 ``get_object()`` 方法。"

msgid "Here's the code for these beat-specific feeds::"
msgstr "以下是这些特定警察局 feed 的代码："

msgid ""
"To generate the feed's ``<title>``, ``<link>`` and ``<description>``, Django "
"uses the ``title()``, ``link()`` and ``description()`` methods. In the "
"previous example, they were string class attributes, but this example "
"illustrates that they can be either strings *or* methods. For each of "
"``title``, ``link`` and ``description``, Django follows this algorithm:"
msgstr ""
"为了生成 feed 的 ``<title>``、``<link>`` 和 ``<description>``，Django 使用了 "
"``title()``、``link()`` 和 ``description()`` 方法。在前面的例子中，它们是字符"
"串类属性，但这个例子说明它们可以是字符串 *或* 方法。对于每一个 ``title``、"
"``link`` 和``description``，Django 都遵循这个算法。"

msgid ""
"First, it tries to call a method, passing the ``obj`` argument, where "
"``obj`` is the object returned by ``get_object()``."
msgstr ""
"首先，它试图调用一个方法，传递 ``obj`` 参数，其中 ``obj`` 是 "
"``get_object()`` 返回的对象。"

msgid "Failing that, it tries to call a method with no arguments."
msgstr "如果失败了，它就会尝试调用一个没有参数的方法。"

msgid "Failing that, it uses the class attribute."
msgstr "如果失败了，它就会使用类属性。"

msgid ""
"Also note that ``items()`` also follows the same algorithm -- first, it "
"tries ``items(obj)``, then ``items()``, then finally an ``items`` class "
"attribute (which should be a list)."
msgstr ""
"还请注意，``items()`` 也遵循同样的算法——首先，它尝试 ``items(obj)``，然后是 "
"``items()``，最后是 ``items`` 类属性（应该是一个列表）。"

msgid ""
"We are using a template for the item descriptions. It can be as minimal as "
"this:"
msgstr "我们是用一个模板来描述项目。可以是这样的最小化："

msgid "However, you are free to add formatting as desired."
msgstr "但是，你可以根据需要自由添加格式。"

msgid ""
"The ``ExampleFeed`` class below gives full documentation on methods and "
"attributes of :class:`~django.contrib.syndication.views.Feed` classes."
msgstr ""
"下面的 ``ExampleFeed`` 类给出了关于 :class:`~django.contrib.syndication."
"views.Feed` 类的方法和属性的完整文档。"

msgid "Specifying the type of feed"
msgstr "指定 feed 的类型"

msgid "By default, feeds produced in this framework use RSS 2.0."
msgstr "默认情况下，这个框架中产生的 feed 使用 RSS 2.0。"

msgid ""
"To change that, add a ``feed_type`` attribute to your :class:`~django."
"contrib.syndication.views.Feed` class, like so::"
msgstr ""
"要改变这一点，可以在你的 :class:`~django.contrib.syndication.views.Feed` 类中"
"添加一个 ``feed_type`` 属性，像这样："

msgid "Note that you set ``feed_type`` to a class object, not an instance."
msgstr "请注意，你把 ``feed_type`` 设置为一个类对象，而不是一个实例。"

msgid "Currently available feed types are:"
msgstr "目前可用的 feed 类型有："

msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed` (RSS 2.01. Default.)"
msgstr ""
":class:`django.utils.feedgenerator.Rss201rev2Feed` （RSS 2.01。默认值。）"

msgid ":class:`django.utils.feedgenerator.RssUserland091Feed` (RSS 0.91.)"
msgstr ":class:`django.utils.feedgenerator.RssUserland091Feed` （RSS 0.91。）"

msgid ":class:`django.utils.feedgenerator.Atom1Feed` (Atom 1.0.)"
msgstr ":class:`django.utils.feedgenerator.Atom1Feed` （Atom 1.0。）"

msgid "Enclosures"
msgstr "封面"

msgid ""
"To specify enclosures, such as those used in creating podcast feeds, use the "
"``item_enclosures`` hook or, alternatively and if you only have a single "
"enclosure per item, the ``item_enclosure_url``, ``item_enclosure_length``, "
"and ``item_enclosure_mime_type`` hooks. See the ``ExampleFeed`` class below "
"for usage examples."
msgstr ""
"要指定封面，如创建播客 feed 时使用的封面，使用 ``item_enclosures`` 钩子，或"
"者，如果每个项目只有一个封面，则使用 ``item_enclosure_url``、"
"``item_enclosure_length`` 和 ``item_enclosure_mime_type``` 钩子。请看下面的 "
"``ExampleFeed`` 类的使用示例。"

msgid "Language"
msgstr "语言"

msgid ""
"Feeds created by the syndication framework automatically include the "
"appropriate ``<language>`` tag (RSS 2.0) or ``xml:lang`` attribute (Atom). "
"By default, this is :func:`django.utils.translation.get_language()`. You can "
"change it by setting the ``language`` class attribute."
msgstr ""
"由聚合框架创建的 Feed 会自动包含相应的 ``<language>`` 标签（RSS 2.0）或 "
"``xml:lang`` 属性（Atom）。默认情况下，这是 :func:`django.utils.translation."
"get_language()`。你可以通过设置 ``language`` 类属性来改变它。"

msgid ""
"The ``link`` method/attribute can return either an absolute path (e.g. ``\"/"
"blog/\"``) or a URL with the fully-qualified domain and protocol (e.g. "
"``\"https://www.example.com/blog/\"``). If ``link`` doesn't return the "
"domain, the syndication framework will insert the domain of the current "
"site, according to your :setting:`SITE_ID setting <SITE_ID>`."
msgstr ""

msgid ""
"Atom feeds require a ``<link rel=\"self\">`` that defines the feed's current "
"location. The syndication framework populates this automatically, using the "
"domain of the current site according to the :setting:`SITE_ID` setting."
msgstr ""
"Atom feeds 需要一个 ``<link rel=\"self\">``，定义 feed 的当前位置。聚合框架会"
"根据 :setting:`SITE_ID` 设置，使用当前网站的域名自动填充。"

msgid "Publishing Atom and RSS feeds in tandem"
msgstr "同时发布 Atom 和 RSS feed"

msgid ""
"Some developers like to make available both Atom *and* RSS versions of their "
"feeds. To do that, you can create a subclass of your :class:`~django.contrib."
"syndication.views.Feed` class and set the ``feed_type`` to something "
"different. Then update your URLconf to add the extra versions."
msgstr ""
"有些开发者喜欢同时提供 Atom 和 RSS 版本的 feed。要做到这一点，你可以创建一"
"个 :class:`~django.contrib.syndication.views.Feed` 类的子类，并将 "
"``feed_type`` 设置为不同的内容。然后更新你的 URLconf 来添加额外的版本。"

msgid "Here's a full example::"
msgstr "这有一个完整的例子："

msgid ""
"In this example, the RSS feed uses a ``description`` while the Atom feed "
"uses a ``subtitle``. That's because Atom feeds don't provide for a feed-"
"level \"description,\" but they *do* provide for a \"subtitle.\""
msgstr ""
"在这个例子中，RSS feed使用 ``description``，而 Atom feed 使用 ``subtitle``。"
"这是因为 Atom feed 不提供 feed 级别的“描述”，但它们 *提供* “副标题”。"

msgid ""
"If you provide a ``description`` in your :class:`~django.contrib.syndication."
"views.Feed` class, Django will *not* automatically put that into the "
"``subtitle`` element, because a subtitle and description are not necessarily "
"the same thing. Instead, you should define a ``subtitle`` attribute."
msgstr ""
"如果你在你的 :class:`~django.contrib.syndication.views.Feed` 类中提供了一个 "
"``description``，Django 不会自动将其放入 ``subtitle`` 元素中，因为副标题和描"
"述不一定是一回事。相反，你应该定义一个 ``subtitle`` 属性。"

msgid ""
"In the above example, we set the Atom feed's ``subtitle`` to the RSS feed's "
"``description``, because it's quite short already."
msgstr ""
"在上面的例子中，我们将 Atom feed 的 ``subtitle`` 设置为 RSS feed 的 "
"``description``，因为它已经很短了。"

msgid "And the accompanying URLconf::"
msgstr "并附带 URLconf："

msgid "``Feed`` class reference"
msgstr "``Feed`` 类参考"

msgid ""
"This example illustrates all possible attributes and methods for a :class:"
"`~django.contrib.syndication.views.Feed` class::"
msgstr ""
"这个例子说明了 :class:`~django.contrib.syndication.views.Feed` 类的所有可能的"
"属性和方法："

msgid "The low-level framework"
msgstr "低级框架"

msgid ""
"Behind the scenes, the high-level RSS framework uses a lower-level framework "
"for generating feeds' XML. This framework lives in a single module: :source:"
"`django/utils/feedgenerator.py`."
msgstr ""
"在幕后，高级 RSS 框架使用一个低级框架来生成 feed 的 XML。这个框架存在于一个模"
"块中：:source:`django/utils/feedgenerator.py`。"

msgid ""
"You use this framework on your own, for lower-level feed generation. You can "
"also create custom feed generator subclasses for use with the ``feed_type`` "
"``Feed`` option."
msgstr ""
"你可以自己使用这个框架，进行低级的 feed 生成。你也可以创建自定义的 feed 生成"
"器子类，用于 ``feed_type`` ``Feed`` 选项。"

msgid "``SyndicationFeed`` classes"
msgstr "``SyndicationFeed`` 类"

msgid "The :mod:`~django.utils.feedgenerator` module contains a base class:"
msgstr ":mod:`~django.utils.feedgenerator` 模块包含一个基类："

msgid ":class:`django.utils.feedgenerator.SyndicationFeed`"
msgstr ":class:`django.utils.feedgenerator.SyndicationFeed`"

msgid "and several subclasses:"
msgstr "和几个子类："

msgid ":class:`django.utils.feedgenerator.RssUserland091Feed`"
msgstr ":class:`django.utils.feedgenerator.RssUserland091Feed`"

msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed`"
msgstr ":class:`django.utils.feedgenerator.Rss201rev2Feed`"

msgid ":class:`django.utils.feedgenerator.Atom1Feed`"
msgstr ":class:`django.utils.feedgenerator.Atom1Feed`"

msgid ""
"Each of these three classes knows how to render a certain type of feed as "
"XML. They share this interface:"
msgstr ""
"这三个类中的每一个都知道如何将某种类型的 feed 渲染成 XML。它们共享这个接口："

msgid ":meth:`.SyndicationFeed.__init__`"
msgstr ":meth:`.SyndicationFeed.__init__`"

msgid ""
"Initialize the feed with the given dictionary of metadata, which applies to "
"the entire feed. Required keyword arguments are:"
msgstr ""
"用给定的元数据字典初始化 feed，该字典适用于整个 feed。所需的关键字参数有："

msgid "``title``"
msgstr "``title``"

msgid "There's also a bunch of other optional keywords:"
msgstr "还有一堆其他可选的关键词："

msgid "``language``"
msgstr "``language``"

msgid "``author_email``"
msgstr "``author_email``"

msgid "``author_name``"
msgstr "``author_name``"

msgid "``author_link``"
msgstr "``author_link``"

msgid "``subtitle``"
msgstr "``subtitle``"

msgid "``categories``"
msgstr "``categories``"

msgid "``feed_url``"
msgstr "``feed_url``"

msgid "``feed_copyright``"
msgstr "``feed_copyright``"

msgid "``feed_guid``"
msgstr "``feed_guid``"

msgid "``ttl``"
msgstr "``ttl``"

msgid ""
"Any extra keyword arguments you pass to ``__init__`` will be stored in "
"``self.feed`` for use with `custom feed generators`_."
msgstr ""
"你传递给 ``__init__`` 的任何额外的关键字参数将被存储在 ``self.feed`` 中，供 `"
"自定义 feed 生成器`_ 使用。"

msgid ""
"All parameters should be strings, except ``categories``, which should be a "
"sequence of strings. Beware that some control characters are `not allowed "
"<https://www.w3.org/International/questions/qa-controls>`_ in XML documents. "
"If your content has some of them, you might encounter a :exc:`ValueError` "
"when producing the feed."
msgstr ""
"所有参数都应该是字符串，但 ``categories`` 除外，它应该是一个字符串序列。请注"
"意，在 XML 文档中，有些控制字符是 `不允许的 <https://www.w3.org/"
"International/questions/qa-controls>`_ 。如果你的内容中有一些，你可能会在生"
"成 feed 时遇到一个 :exc:`ValueError`。"

msgid ":meth:`.SyndicationFeed.add_item`"
msgstr ":meth:`.SyndicationFeed.add_item`"

msgid "Add an item to the feed with the given parameters."
msgstr "用给定的参数将一个项目添加到 feed 中。"

msgid "Required keyword arguments are:"
msgstr "必须的关键字参数是："

msgid "Optional keyword arguments are:"
msgstr "可选的关键字参数是："

msgid "``pubdate``"
msgstr "``pubdate``"

msgid "``comments``"
msgstr "``comments``"

msgid "``unique_id``"
msgstr "``unique_id``"

msgid "``enclosures``"
msgstr "``enclosures``"

msgid "``item_copyright``"
msgstr "``item_copyright``"

msgid "``updateddate``"
msgstr "``updateddate``"

msgid "Extra keyword arguments will be stored for `custom feed generators`_."
msgstr "额外的关键字参数将被存储在 `自定义 feed 生成器`_ 。"

msgid "All parameters, if given, should be strings, except:"
msgstr "所有参数，如果给定，都应该是字符串，除了："

msgid "``pubdate`` should be a Python  :class:`~datetime.datetime` object."
msgstr "``pubdate`` 应该是一个 Python :class:`~datetime.datetime` 对象。"

msgid "``updateddate`` should be a Python  :class:`~datetime.datetime` object."
msgstr "``updateddate`` 应该是一个 Python :class:`~datetime.datetime` 对象。"

msgid ""
"``enclosures`` should be a list of :class:`django.utils.feedgenerator."
"Enclosure` instances."
msgstr ""
"``enclosures`` 应该是一个 :class:`django.utils.feedgenerator.Eclosure` 实例的"
"列表。"

msgid "``categories`` should be a sequence of strings."
msgstr "``categories`` 应是一个字符串序列。"

msgid ":meth:`.SyndicationFeed.write`"
msgstr ":meth:`.SyndicationFeed.write`"

msgid ""
"Outputs the feed in the given encoding to outfile, which is a file-like "
"object."
msgstr "将给定编码的 feed 输出到 outfile，一个类似文件的对象。"

msgid ":meth:`.SyndicationFeed.writeString`"
msgstr ":meth:`.SyndicationFeed.writeString`"

msgid "Returns the feed as a string in the given encoding."
msgstr "以给定编码的字符串形式返回 feed。"

msgid ""
"For example, to create an Atom 1.0 feed and print it to standard output:"
msgstr ""

msgid "Custom feed generators"
msgstr "自定义 feed 生成器"

msgid ""
"If you need to produce a custom feed format, you've got a couple of options."
msgstr "如果你需要制作一个自定义的 feed 格式，你有几个选择。"

msgid ""
"If the feed format is totally custom, you'll want to subclass "
"``SyndicationFeed`` and completely replace the ``write()`` and "
"``writeString()`` methods."
msgstr ""
"如果 feed 格式是完全自定义的，你会想要子类化 ``SyndicationFeed`` 并完全替换 "
"``write()`` 和 ``writeString()`` 方法。"

msgid ""
"However, if the feed format is a spin-off of RSS or Atom (i.e. GeoRSS_, "
"Apple's `iTunes podcast format`_, etc.), you've got a better choice. These "
"types of feeds typically add extra elements and/or attributes to the "
"underlying format, and there are a set of methods that ``SyndicationFeed`` "
"calls to get these extra attributes. Thus, you can subclass the appropriate "
"feed generator class (``Atom1Feed`` or ``Rss201rev2Feed``) and extend these "
"callbacks. They are:"
msgstr ""
"然而，如果 feed 格式是 RSS 或 Atom 的衍生产品（即 GeoRSS_ ，苹果的 `iTunes "
"podcast format`_ 等），你就有了更好的选择。这些类型的 feeds 通常会向底层格式"
"添加额外的元素和／或属性，而且 ``SyndicationFeed`` 调用一组方法来获取这些额外"
"的属性。因此，你可以子类化适当的 feed 生成器类（``Atom1Feed`` 或 "
"``Rss201rev2Feed``）并扩展这些回调。它们是："

msgid "``SyndicationFeed.root_attributes(self)``"
msgstr "``SyndicationFeed.root_attributes(self)``"

msgid ""
"Return a ``dict`` of attributes to add to the root feed element (``feed``/"
"``channel``)."
msgstr ""
"返回一个属性的 ``dict`` 以添加到根 feed 元素（``feed``／``channel``）。"

msgid "``SyndicationFeed.add_root_elements(self, handler)``"
msgstr "``SyndicationFeed.add_root_elements(self, handler)``"

msgid ""
"Callback to add elements inside the root feed element (``feed``/"
"``channel``). ``handler`` is an :class:`~xml.sax.saxutils.XMLGenerator` from "
"Python's built-in SAX library; you'll call methods on it to add to the XML "
"document in process."
msgstr ""
"回调以在根 feed 元素（``feed``／``channel``）中添加元素。``handler`` 是一个 :"
"class:`~xml.sax.saxutils.XMLGenerator`，来自 Python 内置的 SAX 库;你将调用它"
"上的方法来添加到正在处理的 XML 文档中。"

msgid "``SyndicationFeed.item_attributes(self, item)``"
msgstr "``SyndicationFeed.item_attributes(self, item)``"

msgid ""
"Return a ``dict`` of attributes to add to each item (``item``/``entry``) "
"element. The argument, ``item``, is a dictionary of all the data passed to "
"``SyndicationFeed.add_item()``."
msgstr ""
"返回要添加到每个项目（``item``／``entry``）元素的 ``dict`` 属性。参数 "
"``item`` 是传递给 ``SyndicationFeed.add_item()`` 的所有数据的字典。"

msgid "``SyndicationFeed.add_item_elements(self, handler, item)``"
msgstr "``SyndicationFeed.add_item_elements(self, handler, item)``"

msgid ""
"Callback to add elements to each item (``item``/``entry``) element. "
"``handler`` and ``item`` are as above."
msgstr ""
"回调为每个项目（``item``／``entry``）元素添加元素。``handler`` 和 ``item`` 同"
"上。"

msgid ""
"If you override any of these methods, be sure to call the superclass methods "
"since they add the required elements for each feed format."
msgstr ""
"如果你覆盖了这些方法中的任何一个，一定要调用超级类方法，因为它们为每种 feed "
"格式添加了所需的元素。"

msgid ""
"For example, you might start implementing an iTunes RSS feed generator like "
"so::"
msgstr "例如，你可以这样开始实现一个 iTunes RSS feed 生成器："

msgid ""
"There's a lot more work to be done for a complete custom feed class, but the "
"above example should demonstrate the basic idea."
msgstr ""
"对于一个完整的自定义 feed 类来说，还有很多工作要做，但上面的例子应该展示了基"
"本的想法。"

msgid "Cross Site Request Forgery protection"
msgstr "跨站请求伪造保护"

msgid ""
"The CSRF middleware and template tag provides easy-to-use protection against "
"`Cross Site Request Forgeries`_. This type of attack occurs when a malicious "
"website contains a link, a form button or some JavaScript that is intended "
"to perform some action on your website, using the credentials of a logged-in "
"user who visits the malicious site in their browser. A related type of "
"attack, 'login CSRF', where an attacking site tricks a user's browser into "
"logging into a site with someone else's credentials, is also covered."
msgstr ""

msgid ""
"The first defense against CSRF attacks is to ensure that GET requests (and "
"other 'safe' methods, as defined by :rfc:`9110#section-9.2.1`) are side "
"effect free. Requests via 'unsafe' methods, such as POST, PUT, and DELETE, "
"can then be protected by the steps outlined in :ref:`using-csrf`."
msgstr ""

msgid "The CSRF protection is based on the following things:"
msgstr "CSRF 保护是基于以下几点："

msgid ""
"A CSRF cookie that is a random secret value, which other sites will not have "
"access to."
msgstr ""

msgid ""
"``CsrfViewMiddleware`` sends this cookie with the response whenever ``django."
"middleware.csrf.get_token()`` is called. It can also send it in other cases. "
"For security reasons, the value of the secret is changed each time a user "
"logs in."
msgstr ""

msgid ""
"A hidden form field with the name 'csrfmiddlewaretoken', present in all "
"outgoing POST forms."
msgstr ""

msgid ""
"In order to protect against `BREACH`_ attacks, the value of this field is "
"not simply the secret. It is scrambled differently with each response using "
"a mask. The mask is generated randomly on every call to ``get_token()``, so "
"the form field value is different each time."
msgstr ""

msgid "This part is done by the template tag."
msgstr "这一部分是由模板标签来完成的。"

msgid ""
"For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or "
"TRACE, a CSRF cookie must be present, and the 'csrfmiddlewaretoken' field "
"must be present and correct. If it isn't, the user will get a 403 error."
msgstr ""
"对于所有不使用 HTTP GET、HEAD、OPTIONS 或 TRACE 的传入请求，必须存在一个 "
"CSRF cookie，并且“csrfmiddlewaretoken”字段必须存在且正确。如果不存在，用户将"
"得到一个 403 错误。"

msgid ""
"When validating the 'csrfmiddlewaretoken' field value, only the secret, not "
"the full token, is compared with the secret in the cookie value. This allows "
"the use of ever-changing tokens. While each request may use its own token, "
"the secret remains common to all."
msgstr ""
"当验证“csrfmiddlewaretoken”字段值时，只有密钥，而不是完整的令牌，会与 cookie "
"值中的密钥进行比较。这允许使用不断变化的令牌。虽然每个请求都可能使用自己的令"
"牌，但密钥对所有请求都是通用的。"

msgid "This check is done by ``CsrfViewMiddleware``."
msgstr "这个检查是由 ``CsrfViewMiddleware`` 完成的。"

msgid ""
"``CsrfViewMiddleware`` verifies the `Origin header`_, if provided by the "
"browser, against the current host and the :setting:`CSRF_TRUSTED_ORIGINS` "
"setting. This provides protection against cross-subdomain attacks."
msgstr ""
"``CsrfViewMiddleware`` 根据当前主机和 :setting:`CSRF_TRUSTED_ORIGINS` 的设"
"置，验证 `Origin header`_ ，如果是由浏览器提供的。这提供了对跨子域攻击的保"
"护。"

msgid ""
"In addition, for HTTPS requests, if the ``Origin`` header isn't provided, "
"``CsrfViewMiddleware`` performs strict referer checking. This means that "
"even if a subdomain can set or modify cookies on your domain, it can't force "
"a user to post to your application since that request won't come from your "
"own exact domain."
msgstr ""
"此外，对于 HTTPS 请求，如果没有提供 ``Origin`` 头，``CsrfViewMiddleware`` 会"
"执行严格的来源检查。这意味着，即使一个子域可以设置或修改你的域名上的 cookie，"
"它也不能强迫用户向你的应用程序发布，因为该请求不会来自你自己的确切域名。"

msgid ""
"This also addresses a man-in-the-middle attack that's possible under HTTPS "
"when using a session independent secret, due to the fact that HTTP ``Set-"
"Cookie`` headers are (unfortunately) accepted by clients even when they are "
"talking to a site under HTTPS. (Referer checking is not done for HTTP "
"requests because the presence of the ``Referer`` header isn't reliable "
"enough under HTTP.)"
msgstr ""
"这也解决了在 HTTPS 下使用独立于会话的密钥时可能出现的中间人攻击问题，这是因"
"为 HTTP ``Set-Cookie`` 头会被客户接受（不幸的是），即使他们在 HTTPS 下与一个"
"网站对话。对 HTTP 请求不进行 Referer 检查，因为 HTTP 下 ``Referer`` 头的存在"
"不够可靠）。"

msgid ""
"If the :setting:`CSRF_COOKIE_DOMAIN` setting is set, the referer is compared "
"against it. You can allow cross-subdomain requests by including a leading "
"dot. For example, ``CSRF_COOKIE_DOMAIN = '.example.com'`` will allow POST "
"requests from ``www.example.com`` and ``api.example.com``. If the setting is "
"not set, then the referer must match the HTTP ``Host`` header."
msgstr ""
"如果设置了 :setting:`CSRF_COOKIE_DOMAIN` 设置，则会将 referer 与之进行比较。"
"你可以通过包含一个前导点号来允许跨子域请求。例如，``CSRF_COOKIE_DOMAIN = '."
"example.com'`` 将允许来自 ``www.example.com`` 和 ``api.example.com`` 的 POST "
"请求。如果没有设置，那么 referer 必须与 HTTP ``Host`` 头匹配。"

msgid ""
"Expanding the accepted referers beyond the current host or cookie domain can "
"be done with the :setting:`CSRF_TRUSTED_ORIGINS` setting."
msgstr ""
"通过 :setting:`CSRF_TRUSTED_ORIGINS` 设置，可以将接受的 referer 扩展到当前主"
"机或 cookie 域之外。"

msgid "In older versions, the CSRF cookie value was masked."
msgstr ""

msgid ""
"This ensures that only forms that have originated from trusted domains can "
"be used to POST data back."
msgstr "这确保了只有源自受信任域的表单才能用于 POST 回数据。"

msgid ""
"It deliberately ignores GET requests (and other requests that are defined as "
"'safe' by :rfc:`9110#section-9.2.1`). These requests ought never to have any "
"potentially dangerous side effects, and so a CSRF attack with a GET request "
"ought to be harmless. :rfc:`9110#section-9.2.1` defines POST, PUT, and "
"DELETE as 'unsafe', and all other methods are also assumed to be unsafe, for "
"maximum protection."
msgstr ""

msgid ""
"The CSRF protection cannot protect against man-in-the-middle attacks, so "
"use :ref:`HTTPS <security-recommendation-ssl>` with :ref:`http-strict-"
"transport-security`. It also assumes :ref:`validation of the HOST header "
"<host-headers-virtual-hosting>` and that there aren't any :ref:`cross-site "
"scripting vulnerabilities <cross-site-scripting>` on your site (because XSS "
"vulnerabilities already let an attacker do anything a CSRF vulnerability "
"allows and much worse)."
msgstr ""
"CSRF 保护不能防止中间人攻击，所以使用 :ref:`HTTPS <security-recommendation-"
"ssl>` 与 :ref:`http-strict-transport-security`。它还假设 :ref:`验证 HOST 头 "
"<host-headers-virtual-hosting>` 和你的网站上没有任何 :ref:`跨站脚本漏洞 "
"<cross-site-scripting>` （因为 XSS 漏洞已经让攻击者做了 CSRF 漏洞允许的任何事"
"情，甚至更糟）。"

msgid "Removing the ``Referer`` header"
msgstr "删除 ``Referer`` 头"

msgid ""
"To avoid disclosing the referrer URL to third-party sites, you might want to "
"`disable the referer`_ on your site's ``<a>`` tags. For example, you might "
"use the ``<meta name=\"referrer\" content=\"no-referrer\">`` tag or include "
"the ``Referrer-Policy: no-referrer`` header. Due to the CSRF protection's "
"strict referer checking on HTTPS requests, those techniques cause a CSRF "
"failure on requests with 'unsafe' methods. Instead, use alternatives like "
"``<a rel=\"noreferrer\" ...>\"`` for links to third-party sites."
msgstr ""
"为了避免向第三方网站透露 referrer URL，你可能想在你的网站的 ``<a>`` 标签上 `"
"禁用 referrer`_ 。例如，你可以使用 ``<meta name=\"referrer\" content=\"no-"
"referrer\">`` 标签或包含 ``Referrer-Policy: no-referrer`` 头。由于 CSRF 保护"
"对 HTTPS 请求进行严格的 referer 检查，这些技术会在使用“不安全”方法的请求上导"
"致 CSRF 失败。取而代之的是，使用诸如 ``<a rel=\"noreferrer\" ...>\"`` 这样的"
"替代品来链接第三方网站。"

msgid ""
"Subdomains within a site will be able to set cookies on the client for the "
"whole domain. By setting the cookie and using a corresponding token, "
"subdomains will be able to circumvent the CSRF protection. The only way to "
"avoid this is to ensure that subdomains are controlled by trusted users (or, "
"are at least unable to set cookies). Note that even without CSRF, there are "
"other vulnerabilities, such as session fixation, that make giving subdomains "
"to untrusted parties a bad idea, and these vulnerabilities cannot easily be "
"fixed with current browsers."
msgstr ""

msgid "Utilities"
msgstr "实用程序"

msgid ""
"The examples below assume you are using function-based views. If you are "
"working with class-based views, you can refer to :ref:`Decorating class-"
"based views<decorating-class-based-views>`."
msgstr ""
"下面的例子假设你使用的是基于函数的视图。如果你正在使用基于类的视图，你可以参"
"考 :ref:`装饰基于类的视图 <decorating-class-based-views>`。"

msgid ""
"This decorator marks a view as being exempt from the protection ensured by "
"the middleware. Example::"
msgstr "该装饰器标记着一个视图被免除了中间件所确保的保护。例如："

msgid ""
"Decorator that provides the protection of ``CsrfViewMiddleware`` to a view."
msgstr "为视图提供 ``CsrfViewMiddleware`` 保护的装饰器。"

msgid "Usage::"
msgstr "用法："

msgid ""
"Normally the :ttag:`csrf_token` template tag will not work if "
"``CsrfViewMiddleware.process_view`` or an equivalent like ``csrf_protect`` "
"has not run. The view decorator ``requires_csrf_token`` can be used to "
"ensure the template tag does work. This decorator works similarly to "
"``csrf_protect``, but never rejects an incoming request."
msgstr ""
"通常情况下，如果 ``CsrfViewMiddleware.process_view`` 或类似 ``csrf_protect`` "
"这样的等价物没有运行， :ttag:`csrf_token` 模板标签将无法工作。视图装饰器 "
"``requires_csrf_token`` 可以用来确保模板标签工作。这个装饰器的工作原理与 "
"``csrf_protect`` 类似，但绝不会拒绝接收到的请求。"

msgid "This decorator forces a view to send the CSRF cookie."
msgstr "该装饰器强制视图发送 CSRF cookie。"

msgid "A number of settings can be used to control Django's CSRF behavior:"
msgstr "一些配置可以用来控制Django 的 CSRF 行为："

msgid ":setting:`CSRF_COOKIE_AGE`"
msgstr ":setting:`CSRF_COOKIE_AGE`"

msgid ":setting:`CSRF_COOKIE_DOMAIN`"
msgstr ":setting:`CSRF_COOKIE_DOMAIN`"

msgid ":setting:`CSRF_COOKIE_HTTPONLY`"
msgstr ":setting:`CSRF_COOKIE_HTTPONLY`"

msgid ":setting:`CSRF_COOKIE_NAME`"
msgstr ":setting:`CSRF_COOKIE_NAME`"

msgid ":setting:`CSRF_COOKIE_PATH`"
msgstr ":setting:`CSRF_COOKIE_PATH`"

msgid ":setting:`CSRF_COOKIE_SAMESITE`"
msgstr ":setting:`CSRF_COOKIE_SAMESITE`"

msgid ":setting:`CSRF_COOKIE_SECURE`"
msgstr ":setting:`CSRF_COOKIE_SECURE`"

msgid ":setting:`CSRF_FAILURE_VIEW`"
msgstr ":setting:`CSRF_FAILURE_VIEW`"

msgid ":setting:`CSRF_HEADER_NAME`"
msgstr ":setting:`CSRF_HEADER_NAME`"

msgid ":setting:`CSRF_TRUSTED_ORIGINS`"
msgstr ":setting:`CSRF_TRUSTED_ORIGINS`"

msgid ":setting:`CSRF_USE_SESSIONS`"
msgstr ":setting:`CSRF_USE_SESSIONS`"

msgid "Frequently Asked Questions"
msgstr "常问问题"

msgid ""
"Is posting an arbitrary CSRF token pair (cookie and POST data) a "
"vulnerability?"
msgstr "可以提交任意的 CSRF 令牌对（cookie 和 POST 数据）是漏洞吗？"

msgid ""
"No, this is by design. Without a man-in-the-middle attack, there is no way "
"for an attacker to send a CSRF token cookie to a victim's browser, so a "
"successful attack would need to obtain the victim's browser's cookie via XSS "
"or similar, in which case an attacker usually doesn't need CSRF attacks."
msgstr ""
"不，这是设计好的。如果没有中间人攻击，攻击者就没有办法向受害者的浏览器发送 "
"CSRF 令牌 cookie，所以成功的攻击需要通过 XSS 或类似的方式获得受害者浏览器的 "
"cookie，在这种情况下，攻击者通常不需要 CSRF 攻击。"

msgid ""
"Some security audit tools flag this as a problem but as mentioned before, an "
"attacker cannot steal a user's browser's CSRF cookie. \"Stealing\" or "
"modifying *your own* token using Firebug, Chrome dev tools, etc. isn't a "
"vulnerability."
msgstr ""
"一些安全审计工具将此标记为问题，但如前所述，攻击者无法窃取用户浏览器的 CSRF "
"cookie。使用 Firebug、Chrome 开发工具等“窃取”或修改 *自己的* 令牌并不是漏洞。"

msgid ""
"Is it a problem that Django's CSRF protection isn't linked to a session by "
"default?"
msgstr "Django 的 CSRF 保护默认不与会话关联，是不是有问题？"

msgid ""
"No, this is by design. Not linking CSRF protection to a session allows using "
"the protection on sites such as a *pastebin* that allow submissions from "
"anonymous users which don't have a session."
msgstr ""
"不，这是设计好的。不将 CSRF 保护与会话联系起来，就可以在诸如 *pastebin* 这样"
"允许匿名用户提交的网站上使用保护，而这些用户并没有会话。"

msgid ""
"If you wish to store the CSRF token in the user's session, use the :setting:"
"`CSRF_USE_SESSIONS` setting."
msgstr ""
"如果你希望在用户的会话中存储 CSRF 令牌，请使用 :setting:`CSRF_USE_SESSIONS` "
"设置。"

msgid "Why might a user encounter a CSRF validation failure after logging in?"
msgstr "为什么用户登录后会遇到 CSRF 验证失败？"

msgid ""
"For security reasons, CSRF tokens are rotated each time a user logs in. Any "
"page with a form generated before a login will have an old, invalid CSRF "
"token and need to be reloaded. This might happen if a user uses the back "
"button after a login or if they log in a different browser tab."
msgstr ""
"出于安全考虑，每次用户登录时，CSRF 令牌都会轮换。任何在登录前生成表单的页面都"
"会有一个旧的、无效的 CSRF 令牌，需要重新加载。如果用户在登录后使用后退按钮或"
"在不同的浏览器标签页中登录，可能会发生这种情况。"

msgid "Databases"
msgstr "数据库"

msgid "Django officially supports the following databases:"
msgstr "Django 官方支持以下数据库："

msgid ":ref:`PostgreSQL <postgresql-notes>`"
msgstr ":ref:`PostgreSQL <postgresql-notes>`"

msgid ":ref:`MariaDB <mariadb-notes>`"
msgstr ":ref:`MariaDB <mariadb-notes>`"

msgid ":ref:`MySQL <mysql-notes>`"
msgstr ":ref:`MySQL <mysql-notes>`"

msgid ":ref:`Oracle <oracle-notes>`"
msgstr ":ref:`Oracle <oracle-notes>`"

msgid ":ref:`SQLite <sqlite-notes>`"
msgstr ":ref:`SQLite <sqlite-notes>`"

msgid ""
"There are also a number of :ref:`database backends provided by third parties "
"<third-party-notes>`."
msgstr "还有一些第三方提供的 :ref:`数据库后端 <third-party-notes>`。"

msgid ""
"Django attempts to support as many features as possible on all database "
"backends. However, not all database backends are alike, and we've had to "
"make design decisions on which features to support and which assumptions we "
"can make safely."
msgstr ""
"Django 试图在所有数据库后端上支持尽可能多的功能。然而，并不是所有的数据库后端"
"都是一样的，我们不得不在设计上决定支持哪些功能，以及我们可以安全地做出哪些假"
"设。"

msgid ""
"This file describes some of the features that might be relevant to Django "
"usage. It is not intended as a replacement for server-specific documentation "
"or reference manuals."
msgstr ""
"该文件描述了一些可能与 Django 使用有关的功能。 它不能替代特定于服务器的文档或"
"参考手册。"

msgid "General notes"
msgstr "通用注意事项"

msgid "Persistent connections"
msgstr "持久连接"

msgid ""
"Persistent connections avoid the overhead of reestablishing a connection to "
"the database in each HTTP request. They're controlled by the :setting:"
"`CONN_MAX_AGE` parameter which defines the maximum lifetime of a connection. "
"It can be set independently for each database."
msgstr ""

msgid ""
"The default value is ``0``, preserving the historical behavior of closing "
"the database connection at the end of each request. To enable persistent "
"connections, set :setting:`CONN_MAX_AGE` to a positive integer of seconds. "
"For unlimited persistent connections, set it to ``None``."
msgstr ""
"默认值是 ``0``，保留了每次请求结束时关闭数据库连接的历史行为。要启用持久连"
"接，可将 :setting:`CONN_MAX_AGE` 设置为正整数秒。对于无限制的持久连接，将其设"
"置为 ``None``。"

msgid "Connection management"
msgstr "连接管理"

msgid ""
"Django opens a connection to the database when it first makes a database "
"query. It keeps this connection open and reuses it in subsequent requests. "
"Django closes the connection once it exceeds the maximum age defined by :"
"setting:`CONN_MAX_AGE` or when it isn't usable any longer."
msgstr ""
"当 Django 第一次进行数据库查询时，就会打开一个与数据库的连接。它保持这个连接"
"的开放性，并在以后的请求中重复使用。一旦连接超过了 :setting:`CONN_MAX_AGE` 所"
"定义的最大时长，或者当它不再可用时，Django 就会关闭这个连接。"

msgid ""
"In detail, Django automatically opens a connection to the database whenever "
"it needs one and doesn't have one already — either because this is the first "
"connection, or because the previous connection was closed."
msgstr ""
"详细来说，Django 每当需要连接数据库而又没有连接的时候，就会自动打开一个连接到"
"数据库——或者是因为这是第一个连接，或者是因为之前的连接被关闭。"

msgid ""
"At the beginning of each request, Django closes the connection if it has "
"reached its maximum age. If your database terminates idle connections after "
"some time, you should set :setting:`CONN_MAX_AGE` to a lower value, so that "
"Django doesn't attempt to use a connection that has been terminated by the "
"database server. (This problem may only affect very low traffic sites.)"
msgstr ""
"在每次请求开始时，如果连接已达到最大时长，Django 就会关闭连接。如果你的数据库"
"在一段时间后终止了空闲的连接，你应该将 :setting:`CONN_MAX_AGE` 设置为一个较低"
"的值，这样 Django 就不会尝试使用一个已经被数据库服务器终止的连接。（这个问题"
"可能只影响到流量很低的网站。）"

msgid ""
"At the end of each request, Django closes the connection if it has reached "
"its maximum age or if it is in an unrecoverable error state. If any database "
"errors have occurred while processing the requests, Django checks whether "
"the connection still works, and closes it if it doesn't. Thus, database "
"errors affect at most one request per each application's worker thread; if "
"the connection becomes unusable, the next request gets a fresh connection."
msgstr ""

msgid ""
"Setting :setting:`CONN_HEALTH_CHECKS` to ``True`` can be used to improve the "
"robustness of connection reuse and prevent errors when a connection has been "
"closed by the database server which is now ready to accept and serve new "
"connections, e.g. after database server restart. The health check is "
"performed only once per request and only if the database is being accessed "
"during the handling of the request."
msgstr ""

msgid "The :setting:`CONN_HEALTH_CHECKS` setting was added."
msgstr ""

msgid "Caveats"
msgstr "附加说明"

msgid ""
"Since each thread maintains its own connection, your database must support "
"at least as many simultaneous connections as you have worker threads."
msgstr ""
"由于每个线程都维护自己的连接，所以你的数据库必须支持至少与你的工作线程一样多"
"的同时连接。"

msgid ""
"Sometimes a database won't be accessed by the majority of your views, for "
"example because it's the database of an external system, or thanks to "
"caching. In such cases, you should set :setting:`CONN_MAX_AGE` to a low "
"value or even ``0``, because it doesn't make sense to maintain a connection "
"that's unlikely to be reused. This will help keep the number of simultaneous "
"connections to this database small."
msgstr ""
"有时，数据库不会被大多数视图访问，例如因为它是外部系统的数据库，或者由于缓存"
"的原因。在这种情况下，你应该将 :setting:`CONN_MAX_AGE` 设置为一个低值，甚至 "
"``0``，因为维护一个不太可能被重复使用的连接是没有意义的。这将有助于保持这个数"
"据库的同时连接数较少。"

msgid ""
"The development server creates a new thread for each request it handles, "
"negating the effect of persistent connections. Don't enable them during "
"development."
msgstr ""
"开发服务器每处理一个请求都会创建一个新的线程，消除了持久连接的影响。在开发过"
"程中不要启用它们。"

msgid ""
"When Django establishes a connection to the database, it sets up appropriate "
"parameters, depending on the backend being used. If you enable persistent "
"connections, this setup is no longer repeated every request. If you modify "
"parameters such as the connection's isolation level or time zone, you should "
"either restore Django's defaults at the end of each request, force an "
"appropriate value at the beginning of each request, or disable persistent "
"connections."
msgstr ""
"当 Django 建立与数据库的连接时，它会根据所使用的后端设置相应的参数。如果你启"
"用了持久化连接，就不再每次请求都重复这种设置。如果你修改了连接的隔离级别或时"
"区等参数，你应该在每次请求结束时恢复 Django 的默认值，在每次请求开始时强制设"
"置一个合适的值，或者禁用持久连接。"

msgid ""
"If a connection is created in a long-running process, outside of Django’s "
"request-response cycle, the connection will remain open until explicitly "
"closed, or timeout occurs."
msgstr ""

msgid "Encoding"
msgstr "编码"

msgid ""
"Django assumes that all databases use UTF-8 encoding. Using other encodings "
"may result in unexpected behavior such as \"value too long\" errors from "
"your database for data that is valid in Django. See the database specific "
"notes below for information on how to set up your database correctly."
msgstr ""
"Django 假设所有的数据库都使用 UTF-8 编码。使用其他编码可能会导致意外的行为，"
"比如数据库中的数据在 Django 中是有效的，却出现“value too long”的错误。关于如"
"何正确设置数据库，请参考下面的数据库具体说明。"

msgid "PostgreSQL notes"
msgstr "PostgreSQL 注意事项"

msgid ""
"Django supports PostgreSQL 12 and higher. `psycopg`_ 3.1.8+ or `psycopg2`_ "
"2.8.4+ is required, though the latest `psycopg`_ 3.1.8+ is recommended."
msgstr ""

msgid ""
"Support for ``psycopg2`` is likely to be deprecated and removed at some "
"point in the future."
msgstr ""

msgid "PostgreSQL connection settings"
msgstr "PostgreSQL 连接配置"

msgid "See :setting:`HOST` for details."
msgstr "详见 :setting:`HOST`。"

msgid ""
"To connect using a service name from the `connection service file`_ and a "
"password from the `password file`_, you must specify them in the :setting:"
"`OPTIONS` part of your database configuration in :setting:`DATABASES`:"
msgstr ""
"要使用 `连接服务文件`_ 中的服务名称和 `密码文件`_ 中的密码进行连接，你必须在"
"数据库配置中的 :settings:`OPTIONS` 部分指定它们。"

msgid "``settings.py``"
msgstr "``settings.py``"

msgid "``.pg_service.conf``"
msgstr "``.pg_service.conf``"

msgid "``.my_pgpass``"
msgstr "``.my_pgpass``"

msgid ""
"Using a service name for testing purposes is not supported. This :ticket:"
"`may be implemented later <33685>`."
msgstr ""

msgid "Optimizing PostgreSQL's configuration"
msgstr "优化 PostgreSQL 的配置"

msgid "Django needs the following parameters for its database connections:"
msgstr "Django 的数据库连接需要以下参数："

msgid "``client_encoding``: ``'UTF8'``,"
msgstr "``client_encoding``：``'UTF8'``，"

msgid ""
"``default_transaction_isolation``: ``'read committed'`` by default, or the "
"value set in the connection options (see below),"
msgstr ""
"``default_transaction_isolation``：``'read committed'`` 默认情况下，或在连接"
"选项中设置的值（见下文）。"

msgid "``timezone``:"
msgstr "``timezone``："

msgid ""
"when :setting:`USE_TZ` is ``True``, ``'UTC'`` by default, or the :setting:"
"`TIME_ZONE <DATABASE-TIME_ZONE>` value set for the connection,"
msgstr ""
"当 :setting:`USE_TZ` 为 ``True`` 时，默认为 ``'UTC``，或 :setting:"
"`TIME_ZONE` 为连接设置的值。"

msgid ""
"when :setting:`USE_TZ` is ``False``, the value of the global :setting:"
"`TIME_ZONE` setting."
msgstr ""
"当 :setting:`USE_TZ` 为 ``False`` 时，全局 :setting:`TIME_ZONE` 设置的值。"

msgid ""
"If these parameters already have the correct values, Django won't set them "
"for every new connection, which improves performance slightly. You can "
"configure them directly in :file:`postgresql.conf` or more conveniently per "
"database user with `ALTER ROLE`_."
msgstr ""
"如果这些参数已经有了正确的值，Django 就不会为每个新的连接设置这些参数，这样可"
"以稍微提高性能。你可以直接在 :file:`postgresql.conf` 中设置它们，或者更方便地"
"在每个数据库用户中用 `ALTER ROLE`_ 设置。"

msgid ""
"Django will work just fine without this optimization, but each new "
"connection will do some additional queries to set these parameters."
msgstr ""
"如果没有这个优化，Django 也能正常工作，但每个新的连接都会做一些额外的查询来设"
"置这些参数。"

msgid "Isolation level"
msgstr "隔离等级"

msgid ""
"Like PostgreSQL itself, Django defaults to the ``READ COMMITTED`` `isolation "
"level`_. If you need a higher isolation level such as ``REPEATABLE READ`` or "
"``SERIALIZABLE``, set it in the :setting:`OPTIONS` part of your database "
"configuration in :setting:`DATABASES`::"
msgstr ""
"和 PostgreSQL 本身一样，Django 默认为 ``READ COMMITTED`` `隔离级别`_ 。如果你"
"需要更高的隔离级别，比如 ``REPEATABLE READ`` 或者 ``SERIALIZABLE``，可以在数"
"据库配置的 :setting:`DATABASES` 中的 :setting:`OPTIONS` 部分进行设置："

msgid ""
"Under higher isolation levels, your application should be prepared to handle "
"exceptions raised on serialization failures. This option is designed for "
"advanced uses."
msgstr ""
"在更高的隔离级别下，你的应用程序应该准备好处理序列化失败时引发的异常。这个选"
"项是为进阶用途设计的。"

msgid "``IsolationLevel`` was added."
msgstr ""

msgid "Role"
msgstr ""

msgid ""
"If you need to use a different role for database connections than the role "
"use to establish the connection, set it in the :setting:`OPTIONS` part of "
"your database configuration in :setting:`DATABASES`::"
msgstr ""

msgid "Server-side parameters binding"
msgstr ""

msgid ""
"With `psycopg`_ 3.1.8+, Django defaults to the :ref:`client-side binding "
"cursors <psycopg:client-side-binding-cursors>`. If you want to use the :ref:"
"`server-side binding <psycopg:server-side-binding>` set it in the :setting:"
"`OPTIONS` part of your database configuration in :setting:`DATABASES`::"
msgstr ""

msgid "This option is ignored with ``psycopg2``."
msgstr ""

msgid "Indexes for ``varchar`` and ``text`` columns"
msgstr "``varchar`` 和 ``text`` 列的索引。"

msgid ""
"When specifying ``db_index=True`` on your model fields, Django typically "
"outputs a single ``CREATE INDEX`` statement.  However, if the database type "
"for the field is either ``varchar`` or ``text`` (e.g., used by "
"``CharField``, ``FileField``, and ``TextField``), then Django will create an "
"additional index that uses an appropriate `PostgreSQL operator class`_ for "
"the column.  The extra index is necessary to correctly perform lookups that "
"use the ``LIKE`` operator in their SQL, as is done with the ``contains`` and "
"``startswith`` lookup types."
msgstr ""
"当指定 ``db_index=True`` 时，Django 通常会输出一条 ``CREATE INDEX`` 语句。 但"
"是，如果字段的数据库类型是 ``varchar`` 或 ``text`` （例如，``CharField``、"
"``FileField`` 和 ``TextField``），那么 Django 将为该列创建一个额外的索引，使"
"用适当的 `PostgreSQL 操作类`_ 。 这个额外的索引对于正确执行在 SQL 中使用 "
"``LIKE`` 操作符的查询是必要的，就像 ``contains`` 和 ``startswith`` 查询类型一"
"样。"

msgid "Migration operation for adding extensions"
msgstr "添加扩展的迁移操作"

msgid ""
"If you need to add a PostgreSQL extension (like ``hstore``, ``postgis``, "
"etc.) using a migration, use the :class:`~django.contrib.postgres.operations."
"CreateExtension` operation."
msgstr ""
"如果你需要使用迁移来添加 PostgreSQL 扩展（如 ``hstore``、``postgis`` 等），请"
"使用 :class:`~django.contrib.postgres.operations.CreateExtension` 操作。"

msgid "Server-side cursors"
msgstr "服务器端游标"

msgid ""
"When using :meth:`QuerySet.iterator() <django.db.models.query.QuerySet."
"iterator>`, Django opens a :ref:`server-side cursor <psycopg:server-side-"
"cursors>`. By default, PostgreSQL assumes that only the first 10% of the "
"results of cursor queries will be fetched. The query planner spends less "
"time planning the query and starts returning results faster, but this could "
"diminish performance if more than 10% of the results are retrieved. "
"PostgreSQL's assumptions on the number of rows retrieved for a cursor query "
"is controlled with the `cursor_tuple_fraction`_ option."
msgstr ""

msgid "Transaction pooling and server-side cursors"
msgstr "事务池和服务器端游标"

msgid ""
"Using a connection pooler in transaction pooling mode (e.g. `PgBouncer`_) "
"requires disabling server-side cursors for that connection."
msgstr ""
"在事务池模式下使用连接池（如 `PgBouncer`_ ）需要禁用该连接的服务器端游标。"

msgid ""
"Server-side cursors are local to a connection and remain open at the end of "
"a transaction when :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` is ``True``. "
"A subsequent transaction may attempt to fetch more results from a server-"
"side cursor. In transaction pooling mode, there's no guarantee that "
"subsequent transactions will use the same connection. If a different "
"connection is used, an error is raised when the transaction references the "
"server-side cursor, because server-side cursors are only accessible in the "
"connection in which they were created."
msgstr ""
"服务器端游标是本地连接，当 :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` 为 "
"``True`` 时，服务器端游标在事务结束时保持开放。后续事务可能会尝试从服务器端游"
"标中获取更多的结果。在事务池模式下，不能保证后续事务会使用同一个连接。如果使"
"用了不同的连接，当事务引用服务器端游标时就会出现错误，因为服务器端游标只有在"
"创建它们的连接中才能访问。"

msgid ""
"One solution is to disable server-side cursors for a connection in :setting:"
"`DATABASES` by setting :setting:`DISABLE_SERVER_SIDE_CURSORS <DATABASE-"
"DISABLE_SERVER_SIDE_CURSORS>` to ``True``."
msgstr ""
"一种解决方案是在 :setting:`DATABASES` 中通过将 :setting:"
"`DISABLE_SERVER_SIDE_CURSORS <DATABASE-DISABLE_SERVER_SIDE_CURSORS>` 设置为 "
"``True`` 来禁用连接的服务器端游标。"

msgid ""
"To benefit from server-side cursors in transaction pooling mode, you could "
"set up :doc:`another connection to the database </topics/db/multi-db>` in "
"order to perform queries that use server-side cursors. This connection needs "
"to either be directly to the database or to a connection pooler in session "
"pooling mode."
msgstr ""
"为了从事务池模式下的服务器端游标中获益，你可以设置 :doc:`与数据库的另一个连"
"接 </topics/db/multi-db>`，以便执行使用服务器端游标的查询。这个连接需要直接连"
"接到数据库或者连接到会话池模式下的连接池。"

msgid ""
"Another option is to wrap each ``QuerySet`` using server-side cursors in an :"
"func:`~django.db.transaction.atomic` block, because it disables "
"``autocommit`` for the duration of the transaction. This way, the server-"
"side cursor will only live for the duration of the transaction."
msgstr ""
"另一种选择是将每个使用服务器端游标的 ``QuerySet`` 包裹在一个 :func:`~django."
"db.transaction.atomic` 块中，因为它在事务的持续时间内禁用 ``autocommit``。这"
"样一来，服务器端游标将只在事务持续时间内有效。"

msgid "Manually-specifying values of auto-incrementing primary keys"
msgstr "手动指定自增主键的值。"

msgid ""
"Django uses PostgreSQL's identity columns to store auto-incrementing primary "
"keys. An identity column is populated with values from a `sequence`_ that "
"keeps track of the next available value. Manually assigning a value to an "
"auto-incrementing field doesn't update the field's sequence, which might "
"later cause a conflict. For example:"
msgstr ""

msgid ""
"If you need to specify such values, reset the sequence afterward to avoid "
"reusing a value that's already in the table. The :djadmin:`sqlsequencereset` "
"management command generates the SQL statements to do that."
msgstr ""
"如果你需要指定这样的值，请在之后重置序列以避免重复使用已经在表中的值。:"
"djadmin:`sqlsequencereset` 管理命令会生成 SQL 语句来做到这一点。"

msgid ""
"In older versions, PostgreSQL’s ``SERIAL`` data type was used instead of "
"identity columns."
msgstr ""

msgid "Test database templates"
msgstr "测试数据库模板"

msgid ""
"You can use the :setting:`TEST['TEMPLATE'] <TEST_TEMPLATE>` setting to "
"specify a `template`_ (e.g. ``'template0'``) from which to create a test "
"database."
msgstr ""
"你可以使用 :setting:`TEST['TEMPLATE'] <TEST_TEMPLATE>` 配置来指定一个 "
"`template`_ （例如 ``'template0'``）来创建测试数据库。"

msgid "Speeding up test execution with non-durable settings"
msgstr "使用非持久设置加快测试执行速度。"

msgid ""
"You can speed up test execution times by `configuring PostgreSQL to be non-"
"durable <https://www.postgresql.org/docs/current/non-durability.html>`_."
msgstr ""
"你可以通过 `将 PostgreSQL 配置为非持久 <https://www.postgresql.org/docs/"
"current/non-durability.html>`_ 来加快测试执行时间。"

msgid ""
"This is dangerous: it will make your database more susceptible to data loss "
"or corruption in the case of a server crash or power loss. Only use this on "
"a development machine where you can easily restore the entire contents of "
"all databases in the cluster."
msgstr ""
"这是很危险的：它将使你的数据库在服务器崩溃或断电的情况下更容易发生数据丢失或"
"损坏。只有在开发机器上使用，在那里你可以轻松的恢复集群中所有数据库的全部内"
"容。"

msgid "MariaDB notes"
msgstr "MariaDB 注意事项"

msgid "Django supports MariaDB 10.4 and higher."
msgstr ""

msgid ""
"To use MariaDB, use the MySQL backend, which is shared between the two. See "
"the :ref:`MySQL notes <mysql-notes>` for more details."
msgstr ""
"要使用 MariaDB，请使用 MySQL 后端，两者共享。详情请看 :ref:`MySQL 注意事项 "
"<mysql-notes>`。"

msgid "MySQL notes"
msgstr "MySQL 注意事项"

msgid "Version support"
msgstr "版本支持"

msgid "Django supports MySQL 8 and higher."
msgstr ""

msgid ""
"Django's ``inspectdb`` feature uses the ``information_schema`` database, "
"which contains detailed data on all database schemas."
msgstr ""
"Django 的 ``inspectdb`` 功能使用 ``information_schema`` 数据库，其中包含所有"
"数据库架构的详细数据。"

msgid ""
"Django expects the database to support Unicode (UTF-8 encoding) and "
"delegates to it the task of enforcing transactions and referential "
"integrity. It is important to be aware of the fact that the two latter ones "
"aren't actually enforced by MySQL when using the MyISAM storage engine, see "
"the next section."
msgstr ""
"Django 希望数据库支持 Unicode（UTF-8 编码），并将执行事务和引用完整性的任务交"
"给它。需要注意的是，MySQL 在使用 MyISAM 存储引擎时，后两项其实并没有强制执"
"行，参见下一节。"

msgid "Storage engines"
msgstr "存储引擎"

msgid ""
"MySQL has several `storage engines`_. You can change the default storage "
"engine in the server configuration."
msgstr "MySQL 有几个 `存储引擎`_ 。你可以在服务器配置中更改默认的存储引擎。"

msgid ""
"MySQL's default storage engine is InnoDB_. This engine is fully "
"transactional and supports foreign key references. It's the recommended "
"choice. However, the InnoDB autoincrement counter is lost on a MySQL restart "
"because it does not remember the ``AUTO_INCREMENT`` value, instead "
"recreating it as \"max(id)+1\". This may result in an inadvertent reuse of :"
"class:`~django.db.models.AutoField` values."
msgstr ""
"MySQL 的默认存储引擎是 InnoDB_ 。这个引擎是完全事务性的，并且支持外键引用。这"
"是推荐的选择。然而，InnoDB 自动增量计数器在 MySQL 重启时丢失，因为它不记得 "
"``AUTO_INCREMENT`` 值，而是将其重新创建为 \"max(id)+1\"。这可能会导致无意中重"
"用 :class:`~django.db.models.AutoField` 值。"

msgid ""
"The main drawbacks of MyISAM_ are that it doesn't support transactions or "
"enforce foreign-key constraints."
msgstr "MyISAM_ 的主要缺点是不支持事务，也不执行外键约束。"

msgid "MySQL DB API Drivers"
msgstr "MySQL 数据库 API 驱动程序"

msgid ""
"MySQL has a couple drivers that implement the Python Database API described "
"in :pep:`249`:"
msgstr "MySQL 有几个驱动程序实现了 :pep:`249` 中描述的 Python 数据库 API。"

msgid ""
":pypi:`mysqlclient` is a native driver. It's **the recommended choice**."
msgstr ""

msgid ""
"`MySQL Connector/Python`_ is a pure Python driver from Oracle that does not "
"require the MySQL client library or any Python modules outside the standard "
"library."
msgstr ""
"`MySQL Connector/Python`_ 是一个来自 Oracle 的纯 Python 驱动，不需要 MySQL 客"
"户端库或标准库之外的任何 Python 模块。"

msgid "These drivers are thread-safe and provide connection pooling."
msgstr "这些驱动程序都是线程安全的，并提供连接池。"

msgid ""
"In addition to a DB API driver, Django needs an adapter to access the "
"database drivers from its ORM. Django provides an adapter for mysqlclient "
"while MySQL Connector/Python includes `its own`_."
msgstr ""
"除了数据库 API 驱动之外，Django 还需要一个适配器来从其 ORM 中访问数据库驱动。"
"Django 为 mysqlclient 提供了一个适配器，而 MySQL Connector/Python 则包含了 `"
"自己的`_ 。"

msgid "mysqlclient"
msgstr "mysqlclient"

msgid "Django requires `mysqlclient`_ 1.4.3 or later."
msgstr ""

msgid "MySQL Connector/Python"
msgstr "MySQL Connector/Python"

msgid ""
"MySQL Connector/Python is available from the `download page`_. The Django "
"adapter is available in versions 1.1.X and later. It may not support the "
"most recent releases of Django."
msgstr ""
"MySQL Connector/Python 可从 `下载页面`_ 。Django 适配器在 1.1.X 及以后的版本"
"中可用。它可能不支持最新版本的 Django。"

msgid "Time zone definitions"
msgstr "时区定义"

msgid ""
"If you plan on using Django's :doc:`timezone support </topics/i18n/"
"timezones>`, use `mysql_tzinfo_to_sql`_ to load time zone tables into the "
"MySQL database. This needs to be done just once for your MySQL server, not "
"per database."
msgstr ""
"如果你打算使用 Django 的 :doc:`时区支持 </topics/i18n/timezones>`，使用 "
"`mysql_tzinfo_to_sql`_ 将时区表加载到 MySQL 数据库中。这只需要为你的 MySQL 服"
"务器做一次，而不是每个数据库。"

msgid "Creating your database"
msgstr "创建你的数据库"

msgid ""
"You can `create your database`_ using the command-line tools and this SQL:"
msgstr ""

msgid "This ensures all tables and columns will use UTF-8 by default."
msgstr "这确保了所有的表和列默认使用 UTF-8。"

msgid "Collation settings"
msgstr "字符序配置"

msgid ""
"The collation setting for a column controls the order in which data is "
"sorted as well as what strings compare as equal. You can specify the "
"``db_collation`` parameter to set the collation name of the column for :attr:"
"`CharField <django.db.models.CharField.db_collation>` and :attr:`TextField "
"<django.db.models.TextField.db_collation>`."
msgstr ""
"一列的字符序配置控制了数据排序的顺序，以及哪些字符串被比较为相等。你可以指定 "
"``db_collation`` 参数来为 :attr:`CharField <django.db.models.CharField."
"db_collation>` 和 :attr:`TextField <django.db.models.TextField."
"db_collation>` 设置列的字符序名称。"

msgid ""
"The collation can also be set on a database-wide level and per-table. This "
"is `documented thoroughly`_ in the MySQL documentation. In such cases, you "
"must set the collation by directly manipulating the database settings or "
"tables. Django doesn't provide an API to change them."
msgstr ""
"字符序也可以在整个数据库层面和每张表上设置。这在 MySQL 文档中有详细的记录。在"
"这种情况下，你必须通过直接操作数据库配置或表来设置字符序。Django 并没有提供一"
"个 API 来改变它们。"

msgid ""
"By default, with a UTF-8 database, MySQL will use the ``utf8_general_ci`` "
"collation. This results in all string equality comparisons being done in a "
"*case-insensitive* manner. That is, ``\"Fred\"`` and ``\"freD\"`` are "
"considered equal at the database level. If you have a unique constraint on a "
"field, it would be illegal to try to insert both ``\"aa\"`` and ``\"AA\"`` "
"into the same column, since they compare as equal (and, hence, non-unique) "
"with the default collation. If you want case-sensitive comparisons on a "
"particular column or table, change the column or table to use the "
"``utf8_bin`` collation."
msgstr ""
"默认情况下，对于 UTF-8 数据库，MySQL 将使用 ``utf8_general_ci`` 字符序。这将"
"导致所有字符串的平等比较以一种 *不区分大小写* 的方式进行。也就是说，"
"``\"Fred\"`` 和 ``\"freD\"`` 在数据库级别被认为是相等的。如果你在一个字段上有"
"一个唯一的约束，那么试图将 ``\"aa\"`` 和 ``\"AA\"`` 插入到同一列中是不合法"
"的，因为它们与默认的字符序比较是相等的（因此，是非唯一的）。如果你想在某一列"
"或表上进行区分大小写的比较，请将该列或表改为使用 ``utf8_bin`` 字符序。"

msgid ""
"Please note that according to `MySQL Unicode Character Sets`_, comparisons "
"for the ``utf8_general_ci`` collation are faster, but slightly less correct, "
"than comparisons for ``utf8_unicode_ci``. If this is acceptable for your "
"application, you should use ``utf8_general_ci`` because it is faster. If "
"this is not acceptable (for example, if you require German dictionary "
"order), use ``utf8_unicode_ci`` because it is more accurate."
msgstr ""
"请注意，根据 `MySQL Unicode 字符集`_ ，``utf8_general_ci`` 的比较比 "
"``utf8_unicode_ci`` 的比较要快，但正确率略低。如果这对你的应用是可以接受的，"
"你应该使用 ``utf8_general_ci``，因为它更快。如果不能接受（例如，如果你需要德"
"语字典顺序），使用 ``utf8_unicode_ci``，因为它更准确。"

msgid ""
"Model formsets validate unique fields in a case-sensitive manner. Thus when "
"using a case-insensitive collation, a formset with unique field values that "
"differ only by case will pass validation, but upon calling ``save()``, an "
"``IntegrityError`` will be raised."
msgstr ""
"模型表格集以区分大小写的方式验证唯一字段。因此，当使用不区分大小写的字符序方"
"式时，一个具有唯一字段值的表单集，如果只因大小写不同，将通过验证，但在调用 "
"``save()`` 时，将引发 ``IntegrityError``。"

msgid "Connecting to the database"
msgstr "连接数据库"

msgid "Refer to the :doc:`settings documentation </ref/settings>`."
msgstr "参考 :doc:`配置文档 </ref/settings>`。"

msgid "Connection settings are used in this order:"
msgstr "连接配置应按此顺序使用"

msgid ":setting:`OPTIONS`."
msgstr ":setting:`OPTIONS`。"

msgid ""
":setting:`NAME`, :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST`, :"
"setting:`PORT`"
msgstr ""
":setting:`NAME`、:setting:`USER`、:setting:`PASSWORD`、:setting:`HOST`、:"
"setting:`PORT`"

msgid "MySQL option files."
msgstr "MySQL 选项文件。"

msgid ""
"In other words, if you set the name of the database in :setting:`OPTIONS`, "
"this will take precedence over :setting:`NAME`, which would override "
"anything in a `MySQL option file`_."
msgstr ""
"换句话说，如果你在 :setting:`OPTIONS` 中设置数据库的名称，这将优先于 :"
"setting:`NAME`，它将覆盖 `MySQL 选项文件`_ 中的任何内容。"

msgid "Here's a sample configuration which uses a MySQL option file::"
msgstr "下面是一个使用 MySQL 选项文件的配置示例："

msgid ""
"Several other `MySQLdb connection options`_ may be useful, such as ``ssl``, "
"``init_command``, and ``sql_mode``."
msgstr ""
"其他几个 `MySQLdb 连接选项`_ 可能会有用，比如 ``ssl``、``init_command`` 和 "
"``sql_mode``。"

msgid "Setting ``sql_mode``"
msgstr "设置 ``sql_mode``"

msgid ""
"The default value of the ``sql_mode`` option contains "
"``STRICT_TRANS_TABLES``. That option escalates warnings into errors when "
"data are truncated upon insertion, so Django highly recommends activating a "
"`strict mode`_ for MySQL to prevent data loss (either "
"``STRICT_TRANS_TABLES`` or ``STRICT_ALL_TABLES``)."
msgstr ""

msgid ""
"If you need to customize the SQL mode, you can set the ``sql_mode`` variable "
"like other MySQL options: either in a config file or with the entry "
"``'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"`` in the :setting:"
"`OPTIONS` part of your database configuration in :setting:`DATABASES`."
msgstr ""
"如果你需要自定义 SQL 模式，你可以像其他 MySQL 选项一样设置 ``sql_mode`` 变"
"量：可以在配置文件中设置，也可以在你的数据库配置的 :setting:`OPTIONS` 部分"
"的 :setting:`DATABASES` 中使用 ``'init_command': \"SET "
"sql_mode='STRICT_TRANS_TABLES'\"`` 配置。"

msgid ""
"When running concurrent loads, database transactions from different sessions "
"(say, separate threads handling different requests) may interact with each "
"other. These interactions are affected by each session's `transaction "
"isolation level`_. You can set a connection's isolation level with an "
"``'isolation_level'`` entry in the :setting:`OPTIONS` part of your database "
"configuration in :setting:`DATABASES`. Valid values for this entry are the "
"four standard isolation levels:"
msgstr ""
"当运行并发负载时，来自不同会话的数据库事务（例如，处理不同请求的独立线程）可"
"能会相互交互。这些交互受到每个会话的 `事务隔离级别`_ 的影响。你可以在数据库配"
"置的 :setting:`DATABASES` 中的 :setting:`OPTIONS` 部分设置连接的隔离级别，并"
"在其中设置一个 ``'isolation_level'`` 条目。这个条目的有效值是四个标准隔离级"
"别："

msgid "``'read uncommitted'``"
msgstr "``'read uncommitted'``"

msgid "``'read committed'``"
msgstr "``'read committed'``"

msgid "``'repeatable read'``"
msgstr "``'repeatable read'``"

msgid "``'serializable'``"
msgstr "``'serializable'``"

msgid ""
"or ``None`` to use the server's configured isolation level. However, Django "
"works best with and defaults to read committed rather than MySQL's default, "
"repeatable read. Data loss is possible with repeatable read. In particular, "
"you may see cases where :meth:`~django.db.models.query.QuerySet."
"get_or_create` will raise an :exc:`~django.db.IntegrityError` but the object "
"won't appear in a subsequent :meth:`~django.db.models.query.QuerySet.get` "
"call."
msgstr ""
"或 ``None`` 来使用服务器配置的隔离级别。然而，Django 的最佳工作方式和默认值"
"是 read committed，而不是 MySQL 的默认 repeatable read。在使用 repeatable "
"read 时，可能会出现数据丢失的情况。特别是，你可能会看到这样的情况：:meth:"
"`~django.db.models.querySet.get_or_create` 会引发一个 :exc:`~django.db."
"IntegrityError`，但在随后的 :meth:`~django.db.models.querySet.get` 调用中不会"
"出现该对象。"

msgid "Creating your tables"
msgstr "创建你的表"

msgid ""
"When Django generates the schema, it doesn't specify a storage engine, so "
"tables will be created with whatever default storage engine your database "
"server is configured for. The easiest solution is to set your database "
"server's default storage engine to the desired engine."
msgstr ""
"当 Django 生成架构时，它并没有指定存储引擎，所以无论你的数据库服务器配置了什"
"么默认的存储引擎，都会创建表。最简单的解决方案是将数据库服务器的默认存储引擎"
"设置为所需的引擎。"

msgid ""
"If you're using a hosting service and can't change your server's default "
"storage engine, you have a couple of options."
msgstr "如果你使用的是托管服务，无法更改服务器的默认存储引擎，你有几个选择。"

msgid ""
"After the tables are created, execute an ``ALTER TABLE`` statement to "
"convert a table to a new storage engine (such as InnoDB):"
msgstr ""

msgid "This can be tedious if you have a lot of tables."
msgstr "如果你有很多表，这可能会很繁琐。"

msgid ""
"Another option is to use the ``init_command`` option for MySQLdb prior to "
"creating your tables::"
msgstr "另一个选择是在创建表之前使用 MySQLdb 的 ``init_command`` 选项："

msgid ""
"This sets the default storage engine upon connecting to the database. After "
"your tables have been created, you should remove this option as it adds a "
"query that is only needed during table creation to each database connection."
msgstr ""
"这将设置连接到数据库时的默认存储引擎。在你的表创建后，你应该删除这个选项，因"
"为它为每个数据库连接添加了一个只在表创建期间需要的查询。"

msgid "Table names"
msgstr "表名称"

msgid ""
"There are `known issues`_ in even the latest versions of MySQL that can "
"cause the case of a table name to be altered when certain SQL statements are "
"executed under certain conditions. It is recommended that you use lowercase "
"table names, if possible, to avoid any problems that might arise from this "
"behavior. Django uses lowercase table names when it auto-generates table "
"names from models, so this is mainly a consideration if you are overriding "
"the table name via the :class:`~django.db.models.Options.db_table` parameter."
msgstr ""
"即使在最新版本的 MySQL 中，也有一些 `已知问题`_ ，当在某些条件下执行某些 SQL "
"语句时，可能会导致表名的大小写被改变。如果可能的话，建议你使用小写的表名，以"
"避免这种行为可能产生的任何问题。Django 在从模型中自动生成表名时使用小写表名，"
"所以这主要是考虑到如果你是通过 :class:`~django.db.models.Options.db_table` 参"
"数来覆盖表名。"

msgid "Savepoints"
msgstr "保存点"

msgid ""
"Both the Django ORM and MySQL (when using the InnoDB :ref:`storage engine "
"<mysql-storage-engines>`) support database :ref:`savepoints <topics-db-"
"transactions-savepoints>`."
msgstr ""
"Django ORM 和 MySQL（使用 InnoDB :ref:`存储引擎 <mysql-storage-engines>` 时）"
"都支持数据库 :ref:`保存点 <topics-db-transactions-savepoints>`。"

msgid ""
"If you use the MyISAM storage engine please be aware of the fact that you "
"will receive database-generated errors if you try to use the :ref:`savepoint-"
"related methods of the transactions API <topics-db-transactions-"
"savepoints>`. The reason for this is that detecting the storage engine of a "
"MySQL database/table is an expensive operation so it was decided it isn't "
"worth to dynamically convert these methods in no-op's based in the results "
"of such detection."
msgstr ""
"如果你使用 MyISAM 存储引擎，请注意，如果你试图使用 :ref:`事务 API 的保存点相"
"关方法 <topics-db-transactions-savepoints>`，你将收到数据库生成的错误。原因是"
"检测 MySQL 数据库／表的存储引擎是一个昂贵的操作，所以决定不值得在没有操作的情"
"况下动态转换这些方法，基于这种检测的结果。"

msgid "Notes on specific fields"
msgstr "特定字段的注意事项"

msgid "Character fields"
msgstr "字符字段"

msgid ""
"Any fields that are stored with ``VARCHAR`` column types may have their "
"``max_length`` restricted to 255 characters if you are using ``unique=True`` "
"for the field. This affects :class:`~django.db.models.CharField`, :class:"
"`~django.db.models.SlugField`. See `the MySQL documentation`_ for more "
"details."
msgstr ""
"如果你对字段使用了 ``unique=True``，那么任何以 ``VARCHAR`` 列类型存储的字段可"
"能会被 ``max_length`` 限制为255个字符。这将影响 :class:`~django.db.models."
"CharField`、:class:`~django.db.models.SlugField`。更多细节请看 `MySQL 文档"
"`_ 。"

msgid "``TextField`` limitations"
msgstr "``TextField`` 限制"

msgid ""
"MySQL can index only the first N chars of a ``BLOB`` or ``TEXT`` column. "
"Since ``TextField`` doesn't have a defined length, you can't mark it as "
"``unique=True``. MySQL will report: \"BLOB/TEXT column '<db_column>' used in "
"key specification without a key length\"."
msgstr ""
"MySQL 只能对 ``BLOB`` 或 ``TEXT`` 列的前 N 个字符进行索引。由于 "
"``TextField`` 没有定义的长度，所以不能将其标记为 ``unique=True``。MySQL 会报"
"告：\"BLOB/TEXT column '<db_column>' used in key specification without a key "
"length\"。"

msgid "Fractional seconds support for Time and DateTime fields"
msgstr "支持时间和 DateTime 字段的小数秒。"

msgid ""
"MySQL can store fractional seconds, provided that the column definition "
"includes a fractional indication (e.g. ``DATETIME(6)``)."
msgstr ""
"MySQL 可以存储小数秒，只要列的定义包括一个小数指示（例如 ``DATETIME(6)``）。"

msgid ""
"Django will not upgrade existing columns to include fractional seconds if "
"the database server supports it. If you want to enable them on an existing "
"database, it's up to you to either manually update the column on the target "
"database, by executing a command like:"
msgstr ""

msgid ""
"or using a :class:`~django.db.migrations.operations.RunSQL` operation in a :"
"ref:`data migration <data-migrations>`."
msgstr ""
"或在 :ref:`数据迁移 <data-migrations>` 中使用 :class:`~django.db.migrations."
"operations.RunSQL` 操作。"

msgid "``TIMESTAMP`` columns"
msgstr "``TIMESTAMP`` 列"

msgid ""
"If you are using a legacy database that contains ``TIMESTAMP`` columns, you "
"must set :setting:`USE_TZ = False <USE_TZ>` to avoid data corruption. :"
"djadmin:`inspectdb` maps these columns to :class:`~django.db.models."
"DateTimeField` and if you enable timezone support, both MySQL and Django "
"will attempt to convert the values from UTC to local time."
msgstr ""
"如果你使用的是包含 ``TIMESTAMP`` 列的遗留数据库，你必须设置 :setting:`USE_TZ "
"= False <USE_TZ>` 以避免数据损坏。 :djadmin:`inspectdb` 将这些列映射到 :"
"class:`~django.db.models.DateTimeField`，如果你启用了时区支持，MySQL 和 "
"Django 都会尝试将值从 UTC 转换为当地时间。"

msgid "Row locking with ``QuerySet.select_for_update()``"
msgstr "用 ``QuerySet.select_for_update()`` 锁定行"

msgid ""
"MySQL and MariaDB do not support some options to the ``SELECT ... FOR "
"UPDATE`` statement. If ``select_for_update()`` is used with an unsupported "
"option, then a :exc:`~django.db.NotSupportedError` is raised."
msgstr ""
"MySQL 和 MariaDB 不支持 ``SELECT ... FOR UPDATE`` 语句的某些选项。如果 "
"``select_for_update()`` 与一个不支持的选项一起使用，那么就会引发一个 :exc:"
"`~django.db.NotSupportedError`。"

msgid "Option"
msgstr "选项"

msgid "``SKIP LOCKED``"
msgstr "``SKIP LOCKED``"

msgid "X (≥10.6)"
msgstr "X (≥10.6)"

msgid "X (≥8.0.1)"
msgstr "X (≥8.0.1)"

msgid "``NOWAIT``"
msgstr "``NOWAIT``"

msgid "``OF``"
msgstr "``OF``"

msgid "``NO KEY``"
msgstr "``NO KEY``"

msgid ""
"When using ``select_for_update()`` on MySQL, make sure you filter a queryset "
"against at least a set of fields contained in unique constraints or only "
"against fields covered by indexes. Otherwise, an exclusive write lock will "
"be acquired over the full table for the duration of the transaction."
msgstr ""
"当在 MySQL 上使用 ``select_for_update()`` 时，确保你至少针对唯一约束中包含的"
"一组字段或仅针对索引覆盖的字段过滤查询集。否则，在事务过程中，将对整个表获得"
"一个独占的写锁。"

msgid "Automatic typecasting can cause unexpected results"
msgstr "自动排版会造成意想不到的结果"

msgid ""
"When performing a query on a string type, but with an integer value, MySQL "
"will coerce the types of all values in the table to an integer before "
"performing the comparison. If your table contains the values ``'abc'``, "
"``'def'`` and you query for ``WHERE mycolumn=0``, both rows will match. "
"Similarly, ``WHERE mycolumn=1`` will match the value ``'abc1'``. Therefore, "
"string type fields included in Django will always cast the value to a string "
"before using it in a query."
msgstr ""
"当对字符串类型执行查询，但有一个整数值时，MySQL 会在执行比较之前将表中所有值"
"的类型强制为整数。如果你的表中包含值 ``'abc'``、``'def'``，而你查询 ``WHERE "
"mycolumn=0``，两行都会匹配。同理，``WHERE mycolumn=1`` 将匹配值 ``'abc1'``。"
"因此，Django 中包含的字符串类型字段在查询中使用之前，总是会先将值转换为字符"
"串。"

msgid ""
"If you implement custom model fields that inherit from :class:`~django.db."
"models.Field` directly, are overriding :meth:`~django.db.models.Field."
"get_prep_value`, or use :class:`~django.db.models.expressions.RawSQL`, :meth:"
"`~django.db.models.query.QuerySet.extra`, or :meth:`~django.db.models."
"Manager.raw`, you should ensure that you perform appropriate typecasting."
msgstr ""
"如果你实现的自定义模型字段直接继承自 :class:`~django.db.models.Field`，覆盖 :"
"meth:`~django.db.models.Field.get_prep_value` 或者使用 :class:`~django. db."
"models.expressions.RawSQL`、:meth:`~django.db.models.querySet.extra` 或者 :"
"meth:`~django.db.models.Manager.raw`，你应该确保你执行了适当的类型化。"

msgid "SQLite notes"
msgstr "SQLite 注意事项"

msgid "Django supports SQLite 3.21.0 and later."
msgstr ""

msgid ""
"SQLite_ provides an excellent development alternative for applications that "
"are predominantly read-only or require a smaller installation footprint. As "
"with all database servers, though, there are some differences that are "
"specific to SQLite that you should be aware of."
msgstr ""
"SQLite_ 为以只读为主或需要较小安装空间的应用程序提供了一个很好的开发选择。不"
"过，与所有数据库服务器一样，SQLite 也有一些特定的差异，你应该注意。"

msgid "Substring matching and case sensitivity"
msgstr "子串匹配和大小写敏感性"

msgid ""
"For all SQLite versions, there is some slightly counter-intuitive behavior "
"when attempting to match some types of strings.  These are triggered when "
"using the :lookup:`iexact` or :lookup:`contains` filters in Querysets. The "
"behavior splits into two cases:"
msgstr ""
"对于所有的 SQLite 版本，当尝试匹配某些类型的字符串时，会出现一些略微反直觉的"
"行为。 当在查询中使用 :lookup:`iexact` 或 :lookup:`contains` 过滤器时，这些行"
"为会被触发。这种行为分为两种情况："

msgid ""
"1. For substring matching, all matches are done case-insensitively. That is "
"a filter such as ``filter(name__contains=\"aa\")`` will match a name of "
"``\"Aabb\"``."
msgstr ""
"1. 对于子串匹配，所有匹配都是不区分大小写的。也就是说，像 "
"``filter(name__contains=\"aa\")`` 这样的过滤器将匹配 ``\"Aabb\"`` 的名字。"

msgid ""
"2. For strings containing characters outside the ASCII range, all exact "
"string matches are performed case-sensitively, even when the case-"
"insensitive options are passed into the query. So the :lookup:`iexact` "
"filter will behave exactly the same as the :lookup:`exact` filter in these "
"cases."
msgstr ""
"2. 对于含有 ASCII 码范围以外的字符的字符串，所有精确的字符串匹配都是区分大小"
"写的，即使在查询中传递了不区分大小写的选项。因此，在这些情况下，:lookup:"
"`iexact` 过滤器的行为与 :lookup:`exact` 过滤器完全相同。"

msgid ""
"Some possible workarounds for this are `documented at sqlite.org`_, but they "
"aren't utilized by the default SQLite backend in Django, as incorporating "
"them would be fairly difficult to do robustly. Thus, Django exposes the "
"default SQLite behavior and you should be aware of this when doing case-"
"insensitive or substring filtering."
msgstr ""
"一些可能的变通方法在 `sqlite.org 有记载`_ ，但是 Django 的默认 SQLite 后端并"
"没有利用这些方法，因为将它们整合起来是相当困难的。因此，Django 暴露了默认的 "
"SQLite 行为，当你进行大小写不敏感或子串过滤时，你应该注意这一点。"

msgid "Decimal handling"
msgstr "小数处理"

msgid ""
"SQLite has no real decimal internal type. Decimal values are internally "
"converted to the ``REAL`` data type (8-byte IEEE floating point number), as "
"explained in the `SQLite datatypes documentation`__, so they don't support "
"correctly-rounded decimal floating point arithmetic."
msgstr ""
"SQLite 没有真正的小数内部类型。小数值在内部转换为 ``REAL`` 数据类型（8 字节"
"的 IEEE 浮点数），正如 `SQLite 数据类型文档`__ 中所解释的那样，所以它们不支持"
"正确舍入的小数浮点运算。"

msgid "\"Database is locked\" errors"
msgstr "“Database is locked”错误"

msgid ""
"SQLite is meant to be a lightweight database, and thus can't support a high "
"level of concurrency. ``OperationalError: database is locked`` errors "
"indicate that your application is experiencing more concurrency than "
"``sqlite`` can handle in default configuration. This error means that one "
"thread or process has an exclusive lock on the database connection and "
"another thread timed out waiting for the lock the be released."
msgstr ""
"SQLite 是一个轻量级数据库，因此不能支持高并发。``OperationalError: database "
"is locked`` 错误表明你的应用程序遇到的并发量超过了 ``sqlite`` 在默认配置下所"
"能处理的范围。这个错误意味着一个线程或进程在数据库连接上有一个独占锁，另一个"
"线程超时等待锁被释放。"

msgid ""
"Python's SQLite wrapper has a default timeout value that determines how long "
"the second thread is allowed to wait on the lock before it times out and "
"raises the ``OperationalError: database is locked`` error."
msgstr ""
"Python 的 SQLite 包装器有一个默认的超时值，这个超时值决定了第二个线程在超时并"
"引发 ``OperationalError: database is locked`` 错误之前允许在锁上等待多长时"
"间。"

msgid "If you're getting this error, you can solve it by:"
msgstr "如果你遇到这种错误，你可以通过以下方式解决："

msgid ""
"Switching to another database backend. At a certain point SQLite becomes too "
"\"lite\" for real-world applications, and these sorts of concurrency errors "
"indicate you've reached that point."
msgstr ""
"切换到另一个数据库后端。到了一定程度，SQLite 对于现实世界的应用来说就会变得过"
"于“精简”，这类并发错误表明你已经达到了这个程度。"

msgid ""
"Rewriting your code to reduce concurrency and ensure that database "
"transactions are short-lived."
msgstr "重写你的代码以减少并发性，并确保数据库事务是短暂的。"

msgid ""
"Increase the default timeout value by setting the ``timeout`` database "
"option::"
msgstr "通过设置 ``timeout`` 数据库选项增加默认超时值："

msgid ""
"This will make SQLite wait a bit longer before throwing \"database is "
"locked\" errors; it won't really do anything to solve them."
msgstr ""
"这将使 SQLite 在抛出 “database is locked” 的错误之前等待更长的时间；它不会真"
"正起到任何解决这些问题的作用。"

msgid "``QuerySet.select_for_update()`` not supported"
msgstr "不支持 ``QuerySet.select_for_update()``"

msgid ""
"SQLite does not support the ``SELECT ... FOR UPDATE`` syntax. Calling it "
"will have no effect."
msgstr "SQLite 不支持 ``SELECT ... FOR UPDATE`` 语法。调用它不会有任何效果。"

msgid "Isolation when using ``QuerySet.iterator()``"
msgstr "使用 ``QuerySet.iterator()`` 时的隔离"

msgid ""
"There are special considerations described in `Isolation In SQLite`_ when "
"modifying a table while iterating over it using :meth:`.QuerySet.iterator`. "
"If a row is added, changed, or deleted within the loop, then that row may or "
"may not appear, or may appear twice, in subsequent results fetched from the "
"iterator. Your code must handle this."
msgstr ""
"当使用 :meth:`.QuerySet.iterator` 在迭代表时修改表，有一些特殊的注意事项在 "
"`SQLite 的隔离`_ 中描述。如果一条记录在循环中被添加、更改或删除，那么这条记录"
"可能会出现，也可能不会出现，或者可能会在后续从迭代器中获取的结果中出现两次。"
"你的代码必须处理这个问题。"

msgid "Enabling JSON1 extension on SQLite"
msgstr "在 SQLite 上启用 JSON1 扩展"

msgid ""
"To use :class:`~django.db.models.JSONField` on SQLite, you need to enable "
"the `JSON1 extension`_ on Python's :py:mod:`sqlite3` library. If the "
"extension is not enabled on your installation, a system error (``fields."
"E180``) will be raised."
msgstr ""
"要在 SQLite 上使用 :class:`~django.db.models.JSONField`，你需要在 Python 的 :"
"py:mod:`sqlite3` 库中启用 `JSON1 扩展`_ 。如果在你的安装中没有启用扩展，系统"
"会产生一个错误（``fields.E180``）。"

msgid ""
"To enable the JSON1 extension you can follow the instruction on `the wiki "
"page`_."
msgstr "要启用 JSON1 扩展，你可以按照 `wiki 页面`_ 上的说明进行操作。"

msgid "The JSON1 extension is enabled by default on SQLite 3.38+."
msgstr ""

msgid "Oracle notes"
msgstr "Oracle 注意事项"

msgid ""
"Django supports `Oracle Database Server`_ versions 19c and higher. Version "
"7.0 or higher of the `cx_Oracle`_ Python driver is required."
msgstr ""
"Django 支持 `Oracle 数据库服务器`_ 19c 及以上版本。需要 7.0 或更高版本的 "
"`cx_Oracle`_ Python 驱动。"

msgid ""
"In order for the ``python manage.py migrate`` command to work, your Oracle "
"database user must have privileges to run the following commands:"
msgstr ""
"为了使 ``python manage.py migrate`` 命令有效，你的 Oracle 数据库用户必须拥有"
"运行以下命令的权限："

msgid "CREATE TABLE"
msgstr "CREATE TABLE"

msgid "CREATE SEQUENCE"
msgstr "CREATE SEQUENCE"

msgid "CREATE PROCEDURE"
msgstr "CREATE PROCEDURE"

msgid "CREATE TRIGGER"
msgstr "CREATE TRIGGER"

msgid ""
"To run a project's test suite, the user usually needs these *additional* "
"privileges:"
msgstr "要运行一个项目的测试套件，用户通常需要这些 *额外* 的权限："

msgid "CREATE USER"
msgstr "CREATE USER"

msgid "ALTER USER"
msgstr "ALTER USER"

msgid "DROP USER"
msgstr "DROP USER"

msgid "CREATE TABLESPACE"
msgstr "CREATE TABLESPACE"

msgid "DROP TABLESPACE"
msgstr "DROP TABLESPACE"

msgid "CREATE SESSION WITH ADMIN OPTION"
msgstr "CREATE SESSION WITH ADMIN OPTION"

msgid "CREATE TABLE WITH ADMIN OPTION"
msgstr "CREATE TABLE WITH ADMIN OPTION"

msgid "CREATE SEQUENCE WITH ADMIN OPTION"
msgstr "CREATE SEQUENCE WITH ADMIN OPTION"

msgid "CREATE PROCEDURE WITH ADMIN OPTION"
msgstr "CREATE PROCEDURE WITH ADMIN OPTION"

msgid "CREATE TRIGGER WITH ADMIN OPTION"
msgstr "CREATE TRIGGER WITH ADMIN OPTION"

msgid ""
"While the ``RESOURCE`` role has the required ``CREATE TABLE``, ``CREATE "
"SEQUENCE``, ``CREATE PROCEDURE``, and ``CREATE TRIGGER`` privileges, and a "
"user granted ``RESOURCE WITH ADMIN OPTION`` can grant ``RESOURCE``, such a "
"user cannot grant the individual privileges (e.g. ``CREATE TABLE``), and "
"thus ``RESOURCE WITH ADMIN OPTION`` is not usually sufficient for running "
"tests."
msgstr ""
"虽然 ``RESOURCE`` 角色具有所需的 ``CREATE TABLE``、``CREATE SEQUENCE``、"
"``CREATE PROCEDURE`` 和 ``CREATE TRIGGER`` 特权，被授予 ``RESOURCE WITH "
"ADMIN OPTION`` 的用户可以授予 ``RESOURCE``，但这样的用户不能授予单个特权（如 "
"``CREATE TABLE``），因此 ``RESOURCE WITH ADMIN OPTION`` 通常不足以运行测试。"

msgid ""
"Some test suites also create views or materialized views; to run these, the "
"user also needs ``CREATE VIEW WITH ADMIN OPTION`` and ``CREATE MATERIALIZED "
"VIEW WITH ADMIN OPTION`` privileges. In particular, this is needed for "
"Django's own test suite."
msgstr ""
"有些测试套件还可以创建视图或实体化视图；要运行这些视图，用户还需要 ``CREATE "
"VIEW WITH ADMIN OPTION`` 和 ``CREATE MATERIALIZED VIEW WITH ADMIN OPTION`` 权"
"限。尤其是 Django 自己的测试套件，更是需要这样的权限。"

msgid ""
"All of these privileges are included in the DBA role, which is appropriate "
"for use on a private developer's database."
msgstr "这些权限都包含在 DBA 角色中，适合在个人开发者的数据库上使用。"

msgid ""
"The Oracle database backend uses the ``SYS.DBMS_LOB`` and ``SYS."
"DBMS_RANDOM`` packages, so your user will require execute permissions on it. "
"It's normally accessible to all users by default, but in case it is not, "
"you'll need to grant permissions like so:"
msgstr ""
"Oracle 数据库后台使用 ``SYS.DBMS_LOB`` 和 ``SYS.DBMS_RANDOM`` 包，所以你的用"
"户需要对它有执行权限。一般情况下，所有用户都可以访问它，但如果不是，你需要授"
"予这样的权限。"

msgid ""
"To connect using the service name of your Oracle database, your ``settings."
"py`` file should look something like this::"
msgstr ""
"要使用 Oracle 数据库的服务名进行连接，你的 ``settings.py`` 文件应该像这样："

msgid ""
"In this case, you should leave both :setting:`HOST` and :setting:`PORT` "
"empty. However, if you don't use a ``tnsnames.ora`` file or a similar naming "
"method and want to connect using the SID (\"xe\" in this example), then fill "
"in both :setting:`HOST` and :setting:`PORT` like so::"
msgstr ""
"在这种情况下，你应该把 :setting:`HOST` 和 :setting:`PORT` 都留空。但是，如果"
"你不使用 ``tnsnames.ora`` 文件或类似的命名方法，而想使用 SID（本例中的“xe”）"
"进行连接，则应像这样填写 :setting:`HOST` 和 :setting:`PORT`。"

msgid ""
"You should either supply both :setting:`HOST` and :setting:`PORT`, or leave "
"both as empty strings. Django will use a different connect descriptor "
"depending on that choice."
msgstr ""
"你应该同时提供 :setting:`HOST` 和 :setting:`PORT`，或者把这两个字符串都留为"
"空。Django 会根据这个选择使用不同的连接描述符。"

msgid "Full DSN and Easy Connect"
msgstr "完整的 DSN 和 Easy Connect"

msgid ""
"A Full DSN or Easy Connect string can be used in :setting:`NAME` if both :"
"setting:`HOST` and :setting:`PORT` are empty. This format is required when "
"using RAC or pluggable databases without ``tnsnames.ora``, for example."
msgstr ""
"如果 :setting:`HOST` 和 :setting:`PORT` 都是空的，可以在 :setting:`NAME` 中使"
"用完整的 DSN 或 Easy Connect 字符串。例如，在使用 RAC 或没有 ``tnsnames."
"ora`` 的可插拔数据库时，需要使用这种格式。"

msgid "Example of an Easy Connect string::"
msgstr "一个 Easy Connect 字符串的例子："

msgid "Example of a full DSN string::"
msgstr "一个完整 DSN 字符串的例子："

msgid "Threaded option"
msgstr "线程选项"

msgid ""
"If you plan to run Django in a multithreaded environment (e.g. Apache using "
"the default MPM module on any modern operating system), then you **must** "
"set the ``threaded`` option of your Oracle database configuration to "
"``True``::"
msgstr ""
"如果你打算在多线程环境中运行 Django（例如 Apache 在任何现代操作系统中使用默认"
"的 MPM 模块），那么你 **必须** 将 Oracle 数据库配置中的 ``threaded`` 选项设置"
"为 ``True``："

msgid "Failure to do this may result in crashes and other odd behavior."
msgstr "如果不这样做，可能会导致崩溃和其他奇怪的行为。"

msgid "INSERT ... RETURNING INTO"
msgstr "INSERT ... RETURNING INTO"

msgid ""
"By default, the Oracle backend uses a ``RETURNING INTO`` clause to "
"efficiently retrieve the value of an ``AutoField`` when inserting new rows.  "
"This behavior may result in a ``DatabaseError`` in certain unusual setups, "
"such as when inserting into a remote table, or into a view with an ``INSTEAD "
"OF`` trigger. The ``RETURNING INTO`` clause can be disabled by setting the "
"``use_returning_into`` option of the database configuration to ``False``::"
msgstr ""
"默认情况下，当插入新行时，Oracle 后端使用 ``RETURNING INTO`` 子句来有效地检"
"索 ``AutoField`` 的值。 这种行为可能会在某些不寻常的设置中导致 "
"``DatabaseError``，例如当插入到远程表中，或插入到具有 ``INSTEAD OF`` 触发器的"
"视图中。可以通过将数据库配置中的 ``use_returning_into`` 选项设置为 ``False`` "
"来禁用 ``RETURNING INTO`` 子句："

msgid ""
"In this case, the Oracle backend will use a separate ``SELECT`` query to "
"retrieve ``AutoField`` values."
msgstr ""
"在这种情况下，Oracle 后端将使用一个单独的 ``SELECT`` 查询来检索 "
"``AutoField`` 值。"

msgid "Naming issues"
msgstr "命名问题"

msgid ""
"Oracle imposes a name length limit of 30 characters. To accommodate this, "
"the backend truncates database identifiers to fit, replacing the final four "
"characters of the truncated name with a repeatable MD5 hash value. "
"Additionally, the backend turns database identifiers to all-uppercase."
msgstr ""
"Oracle 规定名称长度限制为 30 个字符。为了适应这一限制，后端对数据库标识符进行"
"截断以适应，用一个可重复的 MD5 哈希值替换截断后的名称的最后四个字符。此外，后"
"端将数据库标识符变成全大写。"

msgid ""
"To prevent these transformations (this is usually required only when dealing "
"with legacy databases or accessing tables which belong to other users), use "
"a quoted name as the value for ``db_table``::"
msgstr ""
"为了防止这些转换（通常只有在处理遗留数据库或访问属于其他用户的表时才需要这样"
"做），使用加引号的名称作为 ``db_table``："

msgid ""
"Quoted names can also be used with Django's other supported database "
"backends; except for Oracle, however, the quotes have no effect."
msgstr ""
"引用的名字也可以用在 Django 的其他支持的数据库后端；但是，除了 Oracle，引用没"
"有任何效果。"

msgid ""
"When running ``migrate``, an ``ORA-06552`` error may be encountered if "
"certain Oracle keywords are used as the name of a model field or the value "
"of a ``db_column`` option.  Django quotes all identifiers used in queries to "
"prevent most such problems, but this error can still occur when an Oracle "
"datatype is used as a column name.  In particular, take care to avoid using "
"the names ``date``, ``timestamp``, ``number`` or ``float`` as a field name."
msgstr ""
"当运行 ``migrate`` 时，如果将某些 Oracle 关键字用作模型字段的名称或 "
"``db_column`` 选项的值，可能会遇到 ``ORA-06552`` 错误。 Django 引用了查询中使"
"用的所有标识符，以防止大多数这样的问题，但当使用 Oracle 数据类型作为列名时，"
"仍然会出现这个错误。 特别是要注意避免使用 ``date``、``timestamp``、"
"``number`` 或 ``float`` 作为字段名。"

msgid "NULL and empty strings"
msgstr "NULL 和空字符串"

msgid ""
"Django generally prefers to use the empty string (``''``) rather than "
"``NULL``, but Oracle treats both identically. To get around this, the Oracle "
"backend ignores an explicit ``null`` option on fields that have the empty "
"string as a possible value and generates DDL as if ``null=True``. When "
"fetching from the database, it is assumed that a ``NULL`` value in one of "
"these fields really means the empty string, and the data is silently "
"converted to reflect this assumption."
msgstr ""
"Django 通常更喜欢使用空字符串（``''``）而不是 ``NULL``，但 Oracle 对两者的处"
"理是一样的。为了解决这个问题，Oracle 后端会忽略字段上显式的 ``null`` 选项，并"
"将 ``null=True`` 生成 DDL。当从数据库中获取数据时，假定这些字段中的 ``null`` "
"值确实意味着空字符串，数据被默默地转换以反映这一假设。"

msgid ""
"The Oracle backend stores ``TextFields`` as ``NCLOB`` columns. Oracle "
"imposes some limitations on the usage of such LOB columns in general:"
msgstr ""
"Oracle 后台将 ``TextFields`` 存储为 ``NCLOB`` 列。Oracle 对这种 LOB 列的使用"
"一般有一些限制："

msgid "LOB columns may not be used as primary keys."
msgstr "LOB 列不可作为主键使用。"

msgid "LOB columns may not be used in indexes."
msgstr "LOB 列不可用于索引中。"

msgid ""
"LOB columns may not be used in a ``SELECT DISTINCT`` list. This means that "
"attempting to use the ``QuerySet.distinct`` method on a model that includes "
"``TextField`` columns will result in an ``ORA-00932`` error when run against "
"Oracle. As a workaround, use the ``QuerySet.defer`` method in conjunction "
"with ``distinct()`` to prevent ``TextField`` columns from being included in "
"the ``SELECT DISTINCT`` list."
msgstr ""
"LOB 列不能用于 ``SELECT DISTINCT`` 列表中。这意味着，当与 Oracle 运行时，试图"
"在包含 ``TextField`` 列的模型上使用 ``QuerySet.distinct`` 方法将导致 "
"``ORA-00932`` 错误。作为一个变通办法，使用 ``QuerySet.defer`` 方法与 "
"``distinct()`` 结合使用，以防止 ``TextField`` 列被包含在 ``SELECT DISTINCT`` "
"列表中。"

msgid "Subclassing the built-in database backends"
msgstr "子类化内置数据库后端"

msgid ""
"Django comes with built-in database backends. You may subclass an existing "
"database backends to modify its behavior, features, or configuration."
msgstr ""
"Django 有内置的数据库后端，你可以对现有的数据库后端进行子类化来修改它的行为、"
"功能或配置。"

msgid ""
"Consider, for example, that you need to change a single database feature. "
"First, you have to create a new directory with a ``base`` module in it. For "
"example:"
msgstr ""

msgid ""
"The ``base.py`` module must contain a class named ``DatabaseWrapper`` that "
"subclasses an existing engine from the ``django.db.backends`` module. Here's "
"an example of subclassing the PostgreSQL engine to change a feature class "
"``allows_group_by_selected_pks_on_model``:"
msgstr ""
"``base.py`` 模块必须包含一个名为 ``DatabaseWrapper`` 的类，它从 ``django.db."
"backends`` 模块中子类化了一个现有的引擎。下面是一个子类化 PostgreSQL 引擎的例"
"子，用来改变一个特征类 ``allows_group_by_selected_pks_on_model``。"

msgid "``mysite/mydbengine/base.py``"
msgstr "``mysite/mydbengine/base.py``"

msgid ""
"Finally, you must specify a :setting:`DATABASE-ENGINE` in your ``settings."
"py`` file::"
msgstr ""
"最后，你必须在你的 ``settings.py`` 文件中指定一个 :setting:`DATABASE-"
"ENGINE`："

msgid ""
"You can see the current list of database engines by looking in :source:"
"`django/db/backends`."
msgstr "你可以在 :source:`django/db/backends` 中查看当前的数据库引擎列表。"

msgid "Using a 3rd-party database backend"
msgstr "使用第三方数据库后端"

msgid ""
"In addition to the officially supported databases, there are backends "
"provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""
"除了官方支持的数据库外，还有第三方提供的后端，允许你在 Django 中使用其他数据"
"库。"

msgid ":pypi:`CockroachDB <django-cockroachdb>`"
msgstr ""

msgid ":pypi:`Firebird <django-firebird>`"
msgstr ""

msgid ":pypi:`Google Cloud Spanner <django-google-spanner>`"
msgstr ""

msgid ":pypi:`Microsoft SQL Server <mssql-django>`"
msgstr ""

msgid ":pypi:`Snowflake <django-snowflake>`"
msgstr ""

msgid ":pypi:`TiDB <django-tidb>`"
msgstr ""

msgid ":pypi:`YugabyteDB <django-yugabytedb>`"
msgstr ""

msgid ""
"The Django versions and ORM features supported by these unofficial backends "
"vary considerably. Queries regarding the specific capabilities of these "
"unofficial backends, along with any support queries, should be directed to "
"the support channels provided by each 3rd party project."
msgstr ""
"这些非官方后端所支持的 Django 版本和 ORM 功能有很大的不同。关于这些非官方后端"
"的具体功能的查询，以及任何支持的查询，都应该通过每个第三方项目提供的支持渠道"
"进行。"

msgid "``django-admin`` and ``manage.py``"
msgstr "``django-admin`` 和 ``manage.py``"

msgid ""
"``django-admin`` is Django's command-line utility for administrative tasks. "
"This document outlines all it can do."
msgstr ""
"``django admin`` 是 Django 用于管理任务的命令行实用程序。这份文件概述了它所能"
"做的一切。"

msgid ""
"In addition, ``manage.py`` is automatically created in each Django project. "
"It does the same thing as ``django-admin`` but also sets the :envvar:"
"`DJANGO_SETTINGS_MODULE` environment variable so that it points to your "
"project's ``settings.py`` file."
msgstr ""
"此外，``manage.py`` 会在每个 Django 项目中自动创建。它做的事情和 ``django-"
"admin`` 一样，但也设置了 :envvar:`DJANGO_SETTINGS_MODULE` 环境变量，使其指向"
"你的项目的 ``settings.py`` 文件。"

msgid ""
"The ``django-admin`` script should be on your system path if you installed "
"Django via ``pip``. If it's not in your path, ensure you have your virtual "
"environment activated."
msgstr ""
"如果你通过 ``pip`` 安装 Django，``django-admin`` 脚本应该在你的系统路径中。如"
"果它不在你的系统路径中，请确保你的虚拟环境已经被激活。"

msgid ""
"Generally, when working on a single Django project, it's easier to use "
"``manage.py`` than ``django-admin``. If you need to switch between multiple "
"Django settings files, use ``django-admin`` with :envvar:"
"`DJANGO_SETTINGS_MODULE` or the :option:`--settings` command line option."
msgstr ""
"一般来说，当你在一个 Django 项目中工作时，使用 ``manage.py`` 比使用 ``django-"
"admin`` 更容易。如果你需要在多个 Django 配置文件之间切换，可以使用 ``django-"
"admin`` 与 :envvar:`DJANGO_SETTINGS_MODULE` 或 :option:`--settings` 命令行选"
"项。"

msgid ""
"The command-line examples throughout this document use ``django-admin`` to "
"be consistent, but any example can use ``manage.py`` or ``python -m django`` "
"just as well."
msgstr ""
"为了保持一致，本文中的命令行例子都使用了 ``django-admin``，但任何例子都可以使"
"用 ``manage.py`` 或 ``python -m django``。"

msgid ""
"``command`` should be one of the commands listed in this document. "
"``options``, which is optional, should be zero or more of the options "
"available for the given command."
msgstr ""
"``command`` 应是本文件所列的命令之一。``options`` 是可选的，应该是 0 个或更多"
"可用于指定命令的选项。"

msgid "Getting runtime help"
msgstr "获得运行时帮助"

msgid ""
"Run ``django-admin help`` to display usage information and a list of the "
"commands provided by each application."
msgstr ""
"运行 ``django-admin help`` 来显示使用信息和每个应用程序提供的命令列表。"

msgid ""
"Run ``django-admin help --commands`` to display a list of all available "
"commands."
msgstr "运行 ``django-admin help --commands`` 来显示所有可用命令的列表。"

msgid ""
"Run ``django-admin help <command>`` to display a description of the given "
"command and a list of its available options."
msgstr ""
"运行 ``django-admin help <command>`` 来显示命令的描述和可用选项的列表。"

msgid "App names"
msgstr "应用名称"

msgid ""
"Many commands take a list of \"app names.\" An \"app name\" is the basename "
"of the package containing your models. For example, if your :setting:"
"`INSTALLED_APPS` contains the string ``'mysite.blog'``, the app name is "
"``blog``."
msgstr ""
"许多命令都需要一个“应用名称”的列表。一个“应用名称”是包含你模型的包的基名。例"
"如，如果你的 :setting:`INSTALLED_APPS` 包含字符串 ``'mysite.blog'``，则应用名"
"称为 ``blog``。"

msgid "Determining the version"
msgstr "确定版本"

msgid "Run ``django-admin version`` to display the current Django version."
msgstr "运行 ``django-admin version`` 来显示当前的 Django 版本。"

msgid "The output follows the schema described in :pep:`440`:"
msgstr ""

msgid "Displaying debug output"
msgstr "显示 debug 输出"

msgid ""
"Use :option:`--verbosity`, where it is supported, to specify the amount of "
"notification and debug information that ``django-admin`` prints to the "
"console."
msgstr ""
"使用 :option:`--verbosity`，如果支持的话，可以指定 ``django-admin`` 打印到控"
"制台的通知和调试信息的数量。"

msgid "Available commands"
msgstr "可用命令"

msgid "``check``"
msgstr "``check``"

msgid ""
"Uses the :doc:`system check framework </ref/checks>` to inspect the entire "
"Django project for common problems."
msgstr ""
"使用 :doc:`系统检查框架 </ref/checks>` 来检查整个 Django 项目的常见问题。"

msgid ""
"By default, all apps will be checked. You can check a subset of apps by "
"providing a list of app labels as arguments:"
msgstr ""

msgid ""
"The system check framework performs many different types of checks that are :"
"ref:`categorized with tags <system-check-builtin-tags>`. You can use these "
"tags to restrict the checks performed to just those in a particular "
"category. For example, to perform only models and compatibility checks, run:"
msgstr ""

msgid "Specifies the database to run checks requiring database access:"
msgstr ""

msgid "By default, these checks will not be run."
msgstr "默认情况下，这些检查不会被运行。"

msgid "Lists all available tags."
msgstr "列出所有可用的标签。"

msgid ""
"Activates some additional checks that are only relevant in a deployment "
"setting."
msgstr "激活一些仅在部署环境中相关的附加检查。"

msgid ""
"You can use this option in your local development environment, but since "
"your local development settings module may not have many of your production "
"settings, you will probably want to point the ``check`` command at a "
"different settings module, either by setting the :envvar:"
"`DJANGO_SETTINGS_MODULE` environment variable, or by passing the ``--"
"settings`` option:"
msgstr ""

msgid ""
"Or you could run it directly on a production or staging deployment to verify "
"that the correct settings are in use (omitting ``--settings``). You could "
"even make it part of your integration test suite."
msgstr ""
"或者你可以直接在生产或暂存部署上运行它，以验证是否使用了正确的配置（省略 ``--"
"settings``）。你甚至可以把它作为集成测试套件的一部分。"

msgid ""
"Specifies the message level that will cause the command to exit with a non-"
"zero status. Default is ``ERROR``."
msgstr "指定导致命令以非零状态退出的消息级别。默认值是 ``ERROR``。"

msgid "``compilemessages``"
msgstr "``compilemessages``"

msgid ""
"Compiles ``.po`` files created by :djadmin:`makemessages` to ``.mo`` files "
"for use with the built-in gettext support. See :doc:`/topics/i18n/index`."
msgstr ""
"将 :djadmin:`makemessages` 创建的 ``.po`` 文件编译成 ``.mo`` 文件，以用于内置"
"的 gettext 支持。参见 :doc:`/topics/i18n/index`。"

msgid ""
"Specifies the locale(s) to process. If not provided, all locales are "
"processed."
msgstr "指定要处理的 locale。如果没有提供，则会处理所有的 locale。"

msgid ""
"Specifies the locale(s) to exclude from processing. If not provided, no "
"locales are excluded."
msgstr "指定要从处理中排除的 locale。如果没有提供，则不排除任何 locale。"

msgid "Includes `fuzzy translations`_ into compiled files."
msgstr "包括 `fuzzy 翻译`_ 到编译文件。"

msgid ""
"Ignores directories matching the given :mod:`glob`-style pattern. Use "
"multiple times to ignore more."
msgstr ""
"忽略与给定 :mod:`glob` 风格的模式相匹配的目录。使用多次可以忽略更多的目录。"

msgid "``createcachetable``"
msgstr "``createcachetable``"

msgid ""
"Creates the cache tables for use with the database cache backend using the "
"information from your settings file. See :doc:`/topics/cache` for more "
"information."
msgstr ""
"使用你的配置文件中的信息创建用于数据库缓存后台的缓存表。更多信息请参见 :doc:"
"`/topics/cache`。"

msgid ""
"Specifies the database in which the cache table(s) will be created. Defaults "
"to ``default``."
msgstr "指定创建缓存表的数据库。默认值为 ``default``。"

msgid ""
"Prints the SQL that would be run without actually running it, so you can "
"customize it or use the migrations framework."
msgstr "打印无需实际运行的 SQL，所以你可以自定义它或使用迁移框架。"

msgid "``dbshell``"
msgstr "``dbshell``"

msgid ""
"Runs the command-line client for the database engine specified in your :"
"setting:`ENGINE <DATABASE-ENGINE>` setting, with the connection parameters "
"specified in your :setting:`USER`, :setting:`PASSWORD`, etc., settings."
msgstr ""
"运行你的 :setting:`ENGINE <DATABASE-ENGINE>` 配置中指定的数据库引擎的命令行客"
"户端，连接参数在你的 :setting:`USER`、 :setting:`PASSWORD` 等配置中指定。"

msgid "For PostgreSQL, this runs the ``psql`` command-line client."
msgstr "对于 PostgreSQL 来说，这将运行 ``psql`` 命令行客户端。"

msgid "For MySQL, this runs the ``mysql`` command-line client."
msgstr "对于 MySQL 来说，这将运行 ``mysql`` 命令行客户端。"

msgid "For SQLite, this runs the ``sqlite3`` command-line client."
msgstr "对于 SQLite 来说，这将运行 ``sqlite3`` 命令行客户端。"

msgid "For Oracle, this runs the ``sqlplus`` command-line client."
msgstr "对于 Oracle 来说，这将运行 ``sqlplus`` 命令行客户端。"

msgid ""
"This command assumes the programs are on your ``PATH`` so that a call to the "
"program name (``psql``, ``mysql``, ``sqlite3``, ``sqlplus``) will find the "
"program in the right place. There's no way to specify the location of the "
"program manually."
msgstr ""
"这个命令假设程序在你的 ``PATH`` 上，这样调用程序名（``psql``、``mysql``、"
"``sqlite3``、``sqlplus``）就能在正确的地方找到程序。没有办法手动指定程序的位"
"置。"

msgid ""
"Specifies the database onto which to open a shell. Defaults to ``default``."
msgstr "指定打开命令行的数据库。默认为 ``default``。"

msgid ""
"Any arguments following a ``--`` divider will be passed on to the underlying "
"command-line client. For example, with PostgreSQL you can use the ``psql`` "
"command's ``-c`` flag to execute a raw SQL query directly:"
msgstr ""
"``--`` 分界线后的任何参数都会被传递给底层的命令行客户端。例如，对于 "
"PostgreSQL，你可以使用 ``psql`` 命令的 ``-c`` 标志直接执行一个原始 SQL 查询："

msgid ""
"On MySQL/MariaDB, you can do this with the ``mysql`` command's ``-e`` flag:"
msgstr "在 MySQL／MariaDB 上，你可以用 ``mysql`` 命令的 ``-e`` 标志来实现："

msgid ""
"Be aware that not all options set in the :setting:`OPTIONS` part of your "
"database configuration in :setting:`DATABASES` are passed to the command-"
"line client, e.g. ``'isolation_level'``."
msgstr ""
"要注意的是，在数据库配置的 :setting:`OPTIONS` 部分的 :setting:`DATABASES` "
"中，并不是所有的选项都会传递给命令行客户端，例如 ``'isolation_level'``。"

msgid "``diffsettings``"
msgstr "``diffsettings``"

msgid ""
"Displays differences between the current settings file and Django's default "
"settings (or another settings file specified by :option:`--default`)."
msgstr ""
"显示当前设置文件与 Django 默认配置（或由 :option:`--default` 指定的其他配置文"
"件）之间的差异。"

msgid ""
"Settings that don't appear in the defaults are followed by ``\"###\"``. For "
"example, the default settings don't define :setting:`ROOT_URLCONF`, so :"
"setting:`ROOT_URLCONF` is followed by ``\"###\"`` in the output of "
"``diffsettings``."
msgstr ""
"默认配置中没有出现的配置，后面都是 ``\"##\"``。例如，默认配置没有定义 :"
"setting:`ROOT_URLCONF`，所以 :setting:`ROOT_URLCONF` 在 ``diffsettings`` 的输"
"出中，后面跟了 ``\"##\"``。"

msgid ""
"Displays all settings, even if they have Django's default value. Such "
"settings are prefixed by ``\"###\"``."
msgstr ""
"显示所有的配置，即使它们有 Django 的默认值。这些配置的前缀是 ``\"##\"``。"

msgid ""
"The settings module to compare the current settings against. Leave empty to "
"compare against Django's default settings."
msgstr "要与当前配置进行比较的配置模块。留空以便与 Django 的默认配置进行比较。"

msgid ""
"Specifies the output format. Available values are ``hash`` and ``unified``. "
"``hash`` is the default mode that displays the output that's described "
"above. ``unified`` displays the output similar to ``diff -u``. Default "
"settings are prefixed with a minus sign, followed by the changed setting "
"prefixed with a plus sign."
msgstr ""
"指定输出格式。可用值是 ``hash`` 和 ``unified``。``hash`` 是默认模式，显示上述"
"的输出。``unified`` 显示的输出类似于 ``diff -u``。缺省配置的前面是减号，后面"
"是改变后的配置，前面是加号。"

msgid "``dumpdata``"
msgstr "``dumpdata``"

msgid ""
"Outputs to standard output all data in the database associated with the "
"named application(s)."
msgstr "将数据库中与指定应用程序相关联的所有数据输出到标准输出。"

msgid ""
"If no application name is provided, all installed applications will be "
"dumped."
msgstr "如果没有提供应用程序名称，所有安装的应用程序将被转储。"

msgid ""
"The output of ``dumpdata`` can be used as input for :djadmin:`loaddata`."
msgstr "``dumpdata`` 的输出可以作为 :djadmin:`loaddata` 的输入。"

msgid ""
"When result of ``dumpdata`` is saved as a file, it can serve as a :ref:"
"`fixture <fixtures-explanation>` for :ref:`tests <topics-testing-fixtures>` "
"or as an :ref:`initial data <initial-data-via-fixtures>`."
msgstr ""

msgid ""
"Note that ``dumpdata`` uses the default manager on the model for selecting "
"the records to dump. If you're using a :ref:`custom manager <custom-"
"managers>` as the default manager and it filters some of the available "
"records, not all of the objects will be dumped."
msgstr ""
"注意 ``dumpdata`` 使用模型上的默认管理器来选择要转储的记录。如果你使用 :ref:`"
"自定义管理器 <custom-managers>` 作为默认管理器，并且它过滤了一些可用的记录，"
"那么并非所有的对象都会被转储。"

msgid ""
"Uses Django's base manager, dumping records which might otherwise be "
"filtered or modified by a custom manager."
msgstr "使用 Django 的基础管理器，转储那些可能被自定义管理器过滤或修改的记录。"

msgid ""
"Specifies the serialization format of the output. Defaults to JSON. "
"Supported formats are listed in :ref:`serialization-formats`."
msgstr ""
"指定输出的序列化格式。默认为 JSON。支持的格式在 :ref:`serialization-formats` "
"中列出。"

msgid ""
"Specifies the number of indentation spaces to use in the output. Defaults to "
"``None`` which displays all data on single line."
msgstr "指定输出中使用的缩进空格数。默认值为 ``None``，在单行上显示所有数据。"

msgid ""
"Prevents specific applications or models (specified in the form of "
"``app_label.ModelName``) from being dumped. If you specify a model name, "
"then only that model will be excluded, rather than the entire application. "
"You can also mix application names and model names."
msgstr ""
"防止特定的应用程序或模型（以 ``app_label.ModelName`` 的形式指定）被转储。如果"
"你指定一个模型名称，那么只有该模型将被排除，而不是整个应用程序。你也可以混合"
"应用程序名称和模型名称。"

msgid ""
"If you want to exclude multiple applications, pass ``--exclude`` more than "
"once:"
msgstr ""

msgid ""
"Specifies the database from which data will be dumped. Defaults to "
"``default``."
msgstr "指定转储数据的数据库。默认值为 ``default``。"

msgid ""
"Uses the ``natural_key()`` model method to serialize any foreign key and "
"many-to-many relationship to objects of the type that defines the method. If "
"you're dumping ``contrib.auth`` ``Permission`` objects or ``contrib."
"contenttypes`` ``ContentType`` objects, you should probably use this flag. "
"See the :ref:`natural keys <topics-serialization-natural-keys>` "
"documentation for more details on this and the next option."
msgstr ""
"使用 ``natural_key()`` 模型方法将任何外键和多对多关系序列化到定义该方法的类型"
"的对象。 请参阅 :ref:`自然键 <topics-serialization-natural-keys>` 文档，了解"
"更多关于这个和下一个选项的细节。"

msgid ""
"Omits the primary key in the serialized data of this object since it can be "
"calculated during deserialization."
msgstr "省略该对象序列化数据中的主键，因为它可以在反序列化过程中计算。"

msgid ""
"Outputs only the objects specified by a comma separated list of primary "
"keys. This is only available when dumping one model. By default, all the "
"records of the model are output."
msgstr ""
"只输出由逗号分隔的主键列表指定的对象。这仅在转储一个模型时可用。默认情况下，"
"输出模型的所有记录。"

msgid ""
"Specifies a file to write the serialized data to. By default, the data goes "
"to standard output."
msgstr "指定要将序列化数据写入的文件。默认情况下，数据将被写入标准输出。"

msgid ""
"When this option is set and ``--verbosity`` is greater than 0 (the default), "
"a progress bar is shown in the terminal."
msgstr ""
"当设置了这个选项，并且 ``--verbosity`` 大于 0（默认值）时，终端会显示一个进度"
"条。"

msgid "Fixtures compression"
msgstr "固定数据压缩"

msgid ""
"The output file can be compressed with one of the ``bz2``, ``gz``, ``lzma``, "
"or ``xz`` formats by ending the filename with the corresponding extension. "
"For example, to output the data as a compressed JSON file:"
msgstr ""

msgid "``flush``"
msgstr "``flush``"

msgid ""
"Removes all data from the database and re-executes any post-synchronization "
"handlers. The table of which migrations have been applied is not cleared."
msgstr ""
"从数据库中删除所有数据，并重新执行任何同步后处理程序。已应用迁移的表不会被清"
"除。"

msgid ""
"If you would rather start from an empty database and rerun all migrations, "
"you should drop and recreate the database and then run :djadmin:`migrate` "
"instead."
msgstr ""

msgid "Suppresses all user prompts."
msgstr "禁止所有的用户提示。"

msgid "Specifies the database to flush. Defaults to ``default``."
msgstr "指定要刷新的数据库。默认为 ``default``。"

msgid ""
"Introspects the database tables in the database pointed-to by the :setting:"
"`NAME` setting and outputs a Django model module (a ``models.py`` file) to "
"standard output."
msgstr ""
"对 :setting:`NAME` 配置指向的数据库中的数据库表进行检查，并将一个 Django 模型"
"模块（``models.py`` 文件）输出到标准输出。"

msgid ""
"You may choose what tables or views to inspect by passing their names as "
"arguments. If no arguments are provided, models are created for views only "
"if the :option:`--include-views` option is used. Models for partition tables "
"are created on PostgreSQL if the :option:`--include-partitions` option is "
"used."
msgstr ""
"你可以通过传递表或视图的名称作为参数来选择要检查的表或视图。如果没有提供参"
"数，只有在使用 :option:`--include-views` 选项时，才会为视图创建模型。如果使用"
"了 :option:`--include-partitions` 选项，则会在 PostgreSQL 上为分区表创建模"
"型。"

msgid ""
"Use this if you have a legacy database with which you'd like to use Django. "
"The script will inspect the database and create a model for each table "
"within it."
msgstr ""
"如果你有一个遗留的数据库，并且你想使用 Django，那么就使用这个脚本。脚本将检查"
"数据库，并为其中的每个表创建一个模型。"

msgid ""
"As you might expect, the created models will have an attribute for every "
"field in the table. Note that ``inspectdb`` has a few special cases in its "
"field-name output:"
msgstr ""
"正如你所期望的那样，创建的模型将为表中的每个字段提供一个属性。请注意，"
"``inspectdb`` 在其字段名输出中有一些特殊情况："

msgid ""
"If ``inspectdb`` cannot map a column's type to a model field type, it'll use "
"``TextField`` and will insert the Python comment ``'This field type is a "
"guess.'`` next to the field in the generated model. The recognized fields "
"may depend on apps listed in :setting:`INSTALLED_APPS`. For example, :mod:"
"`django.contrib.postgres` adds recognition for several PostgreSQL-specific "
"field types."
msgstr ""
"如果 ``inspectdb`` 不能将列的类型映射到模型字段类型，它将使用 ``TextField``，"
"并在生成的模型中的字段旁边插入 Python 注释 ``'This field type is a "
"guess.'``。识别的字段可能取决于 :setting:`INSTALLED_APPS` 中列出的应用程序。"
"例如，:mod:`django.contrib.postgres` 增加了对几个 PostgreSQL 特定字段类型的识"
"别。"

msgid ""
"If the database column name is a Python reserved word (such as ``'pass'``, "
"``'class'`` or ``'for'``), ``inspectdb`` will append ``'_field'`` to the "
"attribute name. For example, if a table has a column ``'for'``, the "
"generated model will have a field ``'for_field'``, with the ``db_column`` "
"attribute set to ``'for'``. ``inspectdb`` will insert the Python comment "
"``'Field renamed because it was a Python reserved word.'`` next to the field."
msgstr ""
"如果数据库列名是 Python 的保留字（如 ``'pass'``、``'class'`` 或 ``'for'``），"
"``inspectdb`` 将在属性名后面附加 ``'_field'``。例如，如果一个表有一列 "
"``'for'``，生成的模型将有一个字段 ``'for_field'``，``db_column`` 属性设置为 "
"``'for'``。``inspectdb`` 将在字段旁边插入 Python 注释 ``'Field renamed "
"because it was a Python reserved word.'``。"

msgid ""
"This feature is meant as a shortcut, not as definitive model generation. "
"After you run it, you'll want to look over the generated models yourself to "
"make customizations. In particular, you'll need to rearrange models' order, "
"so that models that refer to other models are ordered properly."
msgstr ""
"这个功能是作为一个快捷方式，而不是作为明确的模型生成。在你运行它之后，你将希"
"望自己查看生成的模型以进行自定义。特别是，你需要重新安排模型的顺序，使引用其"
"他模型的模型正确排序。"

msgid ""
"Django doesn't create database defaults when a :attr:`~django.db.models."
"Field.default` is specified on a model field. Similarly, database defaults "
"aren't translated to model field defaults or detected in any fashion by "
"``inspectdb``."
msgstr ""
"当在模型字段上指定了 :attr:`~django.db.models.Field.default` 时，Django 不会"
"创建数据库默认值。同样，数据库默认值也不会转化为模型字段默认值，也不会被 "
"``inspectdb`` 以任何方式检测到。"

msgid ""
"By default, ``inspectdb`` creates unmanaged models. That is, ``managed = "
"False`` in the model's ``Meta`` class tells Django not to manage each "
"table's creation, modification, and deletion. If you do want to allow Django "
"to manage the table's lifecycle, you'll need to change the :attr:`~django.db."
"models.Options.managed` option to ``True`` (or remove it because ``True`` is "
"its default value)."
msgstr ""
"默认情况下，``inspectdb`` 创建的是未管理的模型。也就是说，模型的 ``Meta`` 类"
"中的 ``managed = False`` 告诉 Django 不要管理每个表的创建、修改和删除。如果你"
"确实想让 Django 管理表的生命周期，你需要将 :attr:`~django.db.models.Options."
"managed` 选项改为 ``True`` （或者将其删除，因为 ``True`` 是其默认值）。"

msgid "Database-specific notes"
msgstr "特定于数据库的注释"

msgid ""
"Models are created for materialized views if :option:`--include-views` is "
"used."
msgstr "如果使用 :option:`--includ-views`，则会为物化视图创建模型。"

msgid "Models are created for foreign tables."
msgstr "为外部表创建模型。"

msgid ""
"Models are created for partition tables if :option:`--include-partitions` is "
"used."
msgstr "如果使用 :option:`--include-partitions`，则为分区表创建模型。"

msgid "Specifies the database to introspect. Defaults to ``default``."
msgstr "指定要检查的数据库。默认为 ``default``。"

msgid "If this option is provided, models are also created for partitions."
msgstr "如果提供了这个选项，也会为分区创建模型。"

msgid "Only support for PostgreSQL is implemented."
msgstr "只实现了对 PostgreSQL 的支持。"

msgid "If this option is provided, models are also created for database views."
msgstr "如果提供了这个选项，也会为数据库视图创建模型。"

msgid "``loaddata``"
msgstr "``loaddata``"

msgid ""
"Searches for and loads the contents of the named :ref:`fixture <fixtures-"
"explanation>` into the database."
msgstr ""

msgid ""
"Specifies the database into which the data will be loaded. Defaults to "
"``default``."
msgstr "指定数据将被载入的数据库。默认值为 ``default``。"

msgid ""
"Ignores fields and models that may have been removed since the fixture was "
"originally generated."
msgstr "忽略自固定数据最初生成以来可能已经被删除的字段和模型。"

msgid ""
"Specifies a single app to look for fixtures in rather than looking in all "
"apps."
msgstr "指定一个单一的应用来寻找固定数据，而不是在所有的应用程序中寻找。"

msgid ""
"Specifies the :ref:`serialization format <serialization-formats>` (e.g., "
"``json`` or ``xml``) for fixtures :ref:`read from stdin <loading-fixtures-"
"stdin>`."
msgstr ""
"为 :ref:`从标准输入中读取 <loading-fixtures-stdin>` 的固定数据指定 :ref:`序列"
"化格式 <serialization-formats>` （例如，``json`` 或 ``xml``）。"

msgid ""
"Excludes loading the fixtures from the given applications and/or models (in "
"the form of ``app_label`` or ``app_label.ModelName``). Use the option "
"multiple times to exclude more than one app or model."
msgstr ""
"排除从给定的应用程序和／或模型加载固定数据（以 ``app_label`` 或 ``app_label."
"ModelName`` 的形式）。多次使用该选项以排除一个以上的应用程序或模型。"

msgid "Loading fixtures from ``stdin``"
msgstr "从 ``stdin`` 加载固定数据"

msgid ""
"You can use a dash as the fixture name to load input from ``sys.stdin``. For "
"example:"
msgstr ""

msgid ""
"When reading from ``stdin``, the :option:`--format <loaddata --format>` "
"option is required to specify the :ref:`serialization format <serialization-"
"formats>` of the input (e.g., ``json`` or ``xml``)."
msgstr ""
"当从 ``stdin`` 读取时，需要使用 :option:`--format <loaddata --format>` 选项来"
"指定输入的 :ref:`序列化格式 <serialization-formats>` （例如 ``json`` 或 "
"``xml``）。"

msgid ""
"Loading from ``stdin`` is useful with standard input and output "
"redirections. For example:"
msgstr ""

msgid ""
"The :djadmin:`dumpdata` command can be used to generate input for "
"``loaddata``."
msgstr ":djadmin:`dumpdata` 命令可以用来生成 ``loaddata`` 的输入。"

msgid ""
"For more detail about fixtures see the :ref:`fixtures-explanation` topic."
msgstr ""

msgid "``makemessages``"
msgstr "``makemessages``"

msgid ""
"Runs over the entire source tree of the current directory and pulls out all "
"strings marked for translation. It creates (or updates) a message file in "
"the conf/locale (in the Django tree) or locale (for project and application) "
"directory. After making changes to the messages files you need to compile "
"them with :djadmin:`compilemessages` for use with the builtin gettext "
"support. See the :ref:`i18n documentation <how-to-create-language-files>` "
"for details."
msgstr ""
"遍历当前目录下的整个源码树，并提取所有标记为翻译的字符串，并在 conf/locale"
"（在 Django 树中）或 locale（对于项目和应用程序）目录下创建（或更新）一个消息"
"文件。在对消息文件进行修改后，你需要使用 :djadmin:`compilemessages` 来编译它"
"们，以便使用内置的 gettext 支持。详情请看 :ref:`i18n 文档 <how-to-create-"
"language-files>`。"

msgid ""
"This command doesn't require configured settings. However, when settings "
"aren't configured, the command can't ignore the :setting:`MEDIA_ROOT` and :"
"setting:`STATIC_ROOT` directories or include :setting:`LOCALE_PATHS`."
msgstr ""
"该命令不需要设置配置。但是，当配置没有设置时，命令不能忽略 :setting:"
"`MEDIA_ROOT` 和 :setting:`STATIC_ROOT` 目录，也不能包含 :setting:"
"`LOCALE_PATHS`。"

msgid "Updates the message files for all available languages."
msgstr "更新所有可用语言的消息文件。"

msgid ""
"Specifies a list of file extensions to examine (default: ``html``, ``txt``, "
"``py`` or ``js`` if :option:`--domain` is ``js``)."
msgstr ""
"指定要检查的文件扩展名列表（默认：``html``、``txt``、``py`` 或 ``js`` 如果 :"
"option:`--domain` 是 ``js``）。"

msgid ""
"Separate multiple extensions with commas or use ``-e`` or ``--extension`` "
"multiple times:"
msgstr ""

msgid "Specifies the locale(s) to process."
msgstr "指定要处理的 locale。"

msgid "Specifies the domain of the messages files. Supported options are:"
msgstr "指定消息文件的域。支持的选项有："

msgid "``django`` for all ``*.py``, ``*.html`` and ``*.txt`` files (default)"
msgstr "``django`` 适用于所有 ``*.py``、``*.html`` 和 ``*.txt`` 文件（默认）"

msgid "``djangojs`` for ``*.js`` files"
msgstr "``djangojs`` 适用于 ``*.js`` 文件"

msgid ""
"Follows symlinks to directories when looking for new translation strings."
msgstr "在寻找新的翻译字符串时，跟踪指向目录的符号链接。"

msgid ""
"Ignores files or directories matching the given :mod:`glob`-style pattern. "
"Use multiple times to ignore more."
msgstr ""
"忽略与给定的 :mod:`glob` 风格模式匹配的文件或目录。多次使用可以忽略更多的文件"
"或目录。"

msgid ""
"These patterns are used by default: ``'CVS'``, ``'.*'``, ``'*~'``, ``'*."
"pyc'``."
msgstr "这些模式默认使用：``'CVS'``、``'.*'``、``'*~'``、``'*.pyc'``。"

msgid "Disables the default values of ``--ignore``."
msgstr "禁用 ``--ignore`` 的默认值。"

msgid ""
"Disables breaking long message lines into several lines in language files."
msgstr "禁用将语言文件中的长消息行分成几行。"

msgid ""
"Suppresses writing '``#: filename:line``’ comment lines in language files. "
"Using this option makes it harder for technically skilled translators to "
"understand each message's context."
msgstr ""
"禁止在语言文件中写 '``#: filename:line``' 注释行。使用该选项会使技术熟练的译"
"者更难理解每条消息的上下文。"

msgid ""
"Controls ``#: filename:line`` comment lines in language files. If the option "
"is:"
msgstr "控制语言文件中的 ``#: filename:line`` 注释行。如果该选项是："

msgid ""
"``full`` (the default if not given): the lines include both file name and "
"line number."
msgstr "``full`` （如果没有给出，则为默认值）：行中包括文件名和行号。"

msgid "``file``: the line number is omitted."
msgstr "``file`` ：省略行号。"

msgid "``never``: the lines are suppressed (same as :option:`--no-location`)."
msgstr "``never`` ：压制行数（与 :option:`--no-location` 相同）。"

msgid "Requires ``gettext`` 0.19 or newer."
msgstr "需要 ``gettext`` 0.19 或更新版本。"

msgid ""
"Prevents deleting the temporary ``.pot`` files generated before creating the "
"``.po`` file. This is useful for debugging errors which may prevent the "
"final language files from being created."
msgstr ""
"防止删除在创建 ``.po`` 文件之前生成的临时 ``.pot`` 文件。这对调试可能妨碍最终"
"语言文件创建的错误很有用。"

msgid ""
"See :ref:`customizing-makemessages` for instructions on how to customize the "
"keywords that :djadmin:`makemessages` passes to ``xgettext``."
msgstr ""
"关于如何自定义 :djadmin:`makemessages` 传递给 ``xgettext`` 的关键字，请参见 :"
"ref:`customizing-makemessages` 的说明。"

msgid "``makemigrations``"
msgstr "``makemigrations``"

msgid ""
"Creates new migrations based on the changes detected to your models. "
"Migrations, their relationship with apps and more are covered in depth in :"
"doc:`the migrations documentation</topics/migrations>`."
msgstr ""
"根据检测到的模型变化创建新的迁移。迁移，它们与应用程序的关系以及更多的内容"
"在 :doc:`迁移文档 </topics/migrations>` 中深入介绍。"

msgid ""
"Providing one or more app names as arguments will limit the migrations "
"created to the app(s) specified and any dependencies needed (the table at "
"the other end of a ``ForeignKey``, for example)."
msgstr ""
"提供一个或多个应用名称作为参数，将把创建的迁移限制在指定的应用和任何所需的依"
"赖关系上（例如，``ForeignKey`` 的另一端的表）。"

msgid ""
"To add migrations to an app that doesn't have a ``migrations`` directory, "
"run ``makemigrations`` with the app's ``app_label``."
msgstr ""
"要将迁移添加到没有 ``migrations`` 目录的应用中，运行 ``makemigrations``，并使"
"用应用的 ``app_label``。"

msgid ""
"Suppresses all user prompts. If a suppressed prompt cannot be resolved "
"automatically, the command will exit with error code 3."
msgstr ""
"压制所有用户提示。如果不能自动解决被抑制的提示，命令将以 error code 3 退出。"

msgid ""
"Outputs an empty migration for the specified apps, for manual editing. This "
"is for advanced users and should not be used unless you are familiar with "
"the migration format, migration operations, and the dependencies between "
"your migrations."
msgstr ""
"为指定的应用程序输出一个空的迁移，用于手动编辑。这是为高级用户准备的，除非你"
"熟悉迁移格式、迁移操作和迁移之间的依赖关系，否则不应使用。"

msgid ""
"Shows what migrations would be made without actually writing any migrations "
"files to disk. Using this option along with ``--verbosity 3`` will also show "
"the complete migrations files that would be written."
msgstr ""
"显示在不向磁盘写入任何迁移文件的情况下进行的迁移。使用这个选项和 ``--"
"verbosity 3`` 也会显示将被写入的完整迁移文件。"

msgid "Enables fixing of migration conflicts."
msgstr "可以解决迁移冲突。"

msgid ""
"Allows naming the generated migration(s) instead of using a generated name. "
"The name must be a valid Python :ref:`identifier <python:identifiers>`."
msgstr ""
"允许对生成的迁移进行命名，而不是使用生成的名称。名称必须是有效的 Python :ref:"
"`标识符 <python:identifiers>`。"

msgid "Generate migration files without Django version and timestamp header."
msgstr "生成没有 Django 版本和时间戳头的迁移文件。"

msgid ""
"Makes ``makemigrations`` exit with a non-zero status when model changes "
"without migrations are detected."
msgstr "当检测到没有迁移的模型变化时，使 ``makemigrations`` 以非零状态退出。"

msgid ""
"In older versions, the missing migrations were also created when using the "
"``--check`` option."
msgstr ""

msgid ""
"Diverts log output and input prompts to ``stderr``, writing only paths of "
"generated migration files to ``stdout``."
msgstr ""

msgid ""
"Merges model changes into the latest migration and optimize the resulting "
"operations."
msgstr ""

msgid ""
"The updated migration will have a generated name. In order to preserve the "
"previous name, set it using ``--name``."
msgstr ""

msgid "``migrate``"
msgstr "``migrate``"

msgid ""
"Synchronizes the database state with the current set of models and "
"migrations. Migrations, their relationship with apps and more are covered in "
"depth in :doc:`the migrations documentation</topics/migrations>`."
msgstr ""
"将数据库状态与当前的模型集和迁移同步。在 :doc:`迁移文档 </topics/"
"migrations>` 中深入介绍了迁移，它们与应用的关系等。"

msgid ""
"The behavior of this command changes depending on the arguments provided:"
msgstr "该命令的行为根据提供的参数而改变："

msgid "No arguments: All apps have all of their migrations run."
msgstr "没有参数：运行所有的应用程序的所有迁移。"

msgid ""
"``<app_label>``: The specified app has its migrations run, up to the most "
"recent migration. This may involve running other apps' migrations too, due "
"to dependencies."
msgstr ""
"``<app_label>`` ：指定的应用程序将运行其迁移，直至其最近的迁移。由于依赖关"
"系，这可能涉及到运行其他应用的迁移。"

msgid ""
"``<app_label> <migrationname>``: Brings the database schema to a state where "
"the named migration is applied, but no later migrations in the same app are "
"applied. This may involve unapplying migrations if you have previously "
"migrated past the named migration. You can use a prefix of the migration "
"name, e.g. ``0001``, as long as it's unique for the given app name. Use the "
"name ``zero`` to migrate all the way back i.e. to revert all applied "
"migrations for an app."
msgstr ""
"``<app_label> <migrationname>``: 将数据库模式调整到适用指定迁移的状态，但不适"
"用同一应用程序中后来的迁移。如果你之前已经迁移过命名的迁移，这可能涉及到取消"
"应用迁移。你可以使用迁移名称的前缀，例如 ``0001``，只要它对给定的应用程序名称"
"是唯一的。使用名称 ``zero`` 来回溯所有的迁移，即恢复一个应用的所有已应用迁"
"移。"

msgid ""
"When unapplying migrations, all dependent migrations will also be unapplied, "
"regardless of ``<app_label>``. You can use ``--plan`` to check which "
"migrations will be unapplied."
msgstr ""
"当取消应用迁移时，所有依赖的迁移也将被取消应用，无论 ``<app_label>``。你可以"
"使用 ``--plan`` 来检查哪些迁移将被取消应用。"

msgid "Specifies the database to migrate. Defaults to ``default``."
msgstr "指定要迁移的数据库。默认值为 ``default``。"

msgid ""
"Marks the migrations up to the target one (following the rules above) as "
"applied, but without actually running the SQL to change your database schema."
msgstr ""
"标记目标的迁移（按照上面的规则）已应用，但没有实际运行 SQL 来改变你的数据库架"
"构。"

msgid ""
"This is intended for advanced users to manipulate the current migration "
"state directly if they're manually applying changes; be warned that using "
"``--fake`` runs the risk of putting the migration state table into a state "
"where manual recovery will be needed to make migrations run correctly."
msgstr ""
"这是为高级用户准备的，如果他们要手动应用更改，可以直接操作当前的迁移状态；要"
"注意的是，使用 ``--fake`` 会有将迁移状态表置于需要手动恢复才能使迁移正确运行"
"的状态的风险。"

msgid ""
"Allows Django to skip an app's initial migration if all database tables with "
"the names of all models created by all :class:`~django.db.migrations."
"operations.CreateModel` operations in that migration already exist. This "
"option is intended for use when first running migrations against a database "
"that preexisted the use of migrations. This option does not, however, check "
"for matching database schema beyond matching table names and so is only safe "
"to use if you are confident that your existing schema matches what is "
"recorded in your initial migration."
msgstr ""
"允许 Django 在迁移中所有 :class:`~django.db.migrations.operations."
"CreateModel` 操作创建的所有模型名称的数据库表已经存在的情况下，跳过应用的初始"
"迁移。这个选项是为了在第一次针对一个在使用 migrations 之前就存在的数据库运行"
"迁移时使用。但是，除了匹配表名之外，这个选项并不检查数据库架构是否匹配，因此"
"只有当你确信你现有的架构与初始迁移中记录的内容相匹配时，才可以安全使用。"

msgid ""
"Shows the migration operations that will be performed for the given "
"``migrate`` command."
msgstr "显示对给定的 ``migrate`` 命令将进行的迁移操作。"

msgid ""
"Allows creating tables for apps without migrations. While this isn't "
"recommended, the migrations framework is sometimes too slow on large "
"projects with hundreds of models."
msgstr ""
"允许在没有迁移的情况下为应用创建表。虽然不推荐这样做，但在有数百个模型的大型"
"项目中，迁移框架有时太慢。"

msgid ""
"Suppresses all user prompts. An example prompt is asking about removing "
"stale content types."
msgstr "压制所有用户提示。一个例子是询问有关删除陈旧内容类型的提示。"

msgid ""
"Makes ``migrate`` exit with a non-zero status when unapplied migrations are "
"detected."
msgstr "当检测到未应用的迁移时，使 ``migrate`` 以非零状态退出。"

msgid ""
"Deletes nonexistent migrations from the ``django_migrations`` table. This is "
"useful when migration files replaced by a squashed migration have been "
"removed. See :ref:`migration-squashing` for more details."
msgstr ""

msgid "``optimizemigration``"
msgstr "``optimizemigration``"

msgid ""
"Optimizes the operations for the named migration and overrides the existing "
"file. If the migration contains functions that must be manually copied, the "
"command creates a new migration file suffixed with ``_optimized`` that is "
"meant to replace the named migration."
msgstr ""

msgid ""
"Makes ``optimizemigration`` exit with a non-zero status when a migration can "
"be optimized."
msgstr ""

msgid ""
"Starts a lightweight development web server on the local machine. By "
"default, the server runs on port 8000 on the IP address ``127.0.0.1``. You "
"can pass in an IP address and port number explicitly."
msgstr ""
"在本地机器上启动一个轻量级的开发网络服务器。默认情况下，该服务器在 IP 地址 "
"`127.0.0.1` 的 8000 端口上运行。你可以明确地传递一个 IP 地址和端口号。"

msgid ""
"If you run this script as a user with normal privileges (recommended), you "
"might not have access to start a port on a low port number. Low port numbers "
"are reserved for the superuser (root)."
msgstr ""
"如果你以普通用户的身份运行这个脚本 (推荐)， 你可能无法在低端口号上启动一个端"
"口。低端口号是为超级用户（root）保留的。"

msgid ""
"This server uses the WSGI application object specified by the :setting:"
"`WSGI_APPLICATION` setting."
msgstr "本服务器使用 :setting:`WSGI_APPLICATION` 配置中指定的 WSGI 应用对象。"

msgid ""
"DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through "
"security audits or performance tests. (And that's how it's gonna stay. We're "
"in the business of making web frameworks, not web servers, so improving this "
"server to be able to handle a production environment is outside the scope of "
"Django.)"
msgstr ""
"**请勿在生产环境中使用本服务器**。它没有经过安全审计或性能测试。（这也是它将"
"会一直存在的原因。我们的业务是制作网络框架，而不是网络服务器，所以改进这个服"
"务器使其能够处理生产环境不在 Django 的范围之内。)"

msgid ""
"The development server automatically reloads Python code for each request, "
"as needed. You don't need to restart the server for code changes to take "
"effect. However, some actions like adding files don't trigger a restart, so "
"you'll have to restart the server in these cases."
msgstr ""
"开发服务器会根据需要为每个请求自动重新加载 Python 代码。你不需要重新启动服务"
"器以使代码更改生效。然而，有些操作，如添加文件不会触发重启，所以在这些情况下"
"你必须重启服务器。"

msgid ""
"If you're using Linux or MacOS and install both :pypi:`pywatchman` and the "
"`Watchman`_ service, kernel signals will be used to autoreload the server "
"(rather than polling file modification timestamps each second). This offers "
"better performance on large projects, reduced response time after code "
"changes, more robust change detection, and a reduction in power usage. "
"Django supports ``pywatchman`` 1.2.0 and higher."
msgstr ""

msgid "Large directories with many files may cause performance issues"
msgstr "有许多文件的大目录可能会导致性能问题。"

msgid ""
"When using Watchman with a project that includes large non-Python "
"directories like ``node_modules``, it's advisable to ignore this directory "
"for optimal performance. See the `watchman documentation`_ for information "
"on how to do this."
msgstr ""
"当使用 Watchman 时，如果项目中包含大的非 Python 目录，比如 ``node_modules``，"
"建议忽略这个目录以获得最佳性能。关于如何做到这一点，请参见 `watchman文档`_ 。"

msgid "Watchman timeout"
msgstr "Watchman 超时"

msgid ""
"The default timeout of ``Watchman`` client is 5 seconds. You can change it "
"by setting the :envvar:`DJANGO_WATCHMAN_TIMEOUT` environment variable."
msgstr ""
"``Watchman`` 客户端的默认超时时间是 5 秒。你可以通过设置 :envvar:"
"`DJANGO_WATCHMAN_TIMEOUT` 环境变量来改变它。"

msgid ""
"When you start the server, and each time you change Python code while the "
"server is running, the system check framework will check your entire Django "
"project for some common errors (see the :djadmin:`check` command). If any "
"errors are found, they will be printed to standard output. You can use the "
"``--skip-checks`` option to skip running system checks."
msgstr ""
"当你启动服务器时，以及每次在服务器运行时修改 Python 代码时，系统检查框架会检"
"查你的整个 Django 项目是否存在一些常见的错误（参见 :djadmin:`check` 命令）。"
"如果发现任何错误，它们将被打印到标准输出。 你可以使用 ``--skip-checks`` 选项"
"来跳过运行系统检查。"

msgid ""
"You can run as many concurrent servers as you want, as long as they're on "
"separate ports by executing ``django-admin runserver`` more than once."
msgstr ""
"您可以根据需要运行任意数量的并发服务器,只要它们通过多次执行 django-admin "
"runserver 运行在不同的端口上即可。"

msgid ""
"Note that the default IP address, ``127.0.0.1``, is not accessible from "
"other machines on your network. To make your development server viewable to "
"other machines on the network, use its own IP address (e.g. "
"``192.168.2.1``), ``0`` (shortcut for ``0.0.0.0``), ``0.0.0.0``, or ``::`` "
"(with IPv6 enabled)."
msgstr ""
"请注意，默认 IP 地址 ``127.0.0.1`` 无法从您网络上的其他计算机访问。为了使您的"
"开发服务器对网络上的其他机器可见，请使用它自己的 IP 地址（例如 "
"``192.168.2.1``）、``0``（``0.0.0.0`` 的快捷方式）、``0.0. 0.0`` 或 ``::``"
"（启用 IPv6）。"

msgid ""
"You can provide an IPv6 address surrounded by brackets (e.g. "
"``[200a::1]:8000``). This will automatically enable IPv6 support."
msgstr ""
"你可以提供一个用括号包围的 IPv6 地址（例如 ``[200a::1]:8000``）。这将自动启"
"用 IPv6 支持。"

msgid "A hostname containing ASCII-only characters can also be used."
msgstr "也可以使用只包含 ASCII 字符的主机名。"

msgid ""
"If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled "
"(default in new projects) the :djadmin:`runserver` command will be "
"overridden with its own :ref:`runserver<staticfiles-runserver>` command."
msgstr ""
"如果 :doc:`staticfiles </ref/contrib/staticfiles>` contrib 应用被启用（新项目"
"中的默认值）， :djadmin:`runserver` 命令将被它自己的 :ref:`runserver "
"<staticfiles-runserver>` 命令覆盖。"

msgid ""
"Logging of each request and response of the server is sent to the :ref:"
"`django-server-logger` logger."
msgstr ""
"服务器的每个请求和响应的日志都会被发送到 :ref:`django-server-logger` 日志器。"

msgid ""
"Disables the auto-reloader. This means any Python code changes you make "
"while the server is running will *not* take effect if the particular Python "
"modules have already been loaded into memory."
msgstr ""
"禁用自动加载器。这意味着，如果特定的 Python 模块已经被加载到内存中，那么你在"
"服务器运行时所做的任何 Python 代码更改将 *不会* 生效。"

msgid ""
"Disables use of threading in the development server. The server is "
"multithreaded by default."
msgstr "在开发服务器中禁止使用线程。默认情况下，服务器是多线程的。"

msgid ""
"Uses IPv6 for the development server. This changes the default IP address "
"from ``127.0.0.1`` to ``::1``."
msgstr "开发服务器使用 IPv6。这将默认 IP 地址从 ``127.0.0.1`` 改为 ``::1``。"

msgid "Examples of using different ports and addresses"
msgstr "使用不同端口和地址的例子"

msgid "Port 8000 on IP address ``127.0.0.1``:"
msgstr ""

msgid "Port 8000 on IP address ``1.2.3.4``:"
msgstr ""

msgid "Port 7000 on IP address ``127.0.0.1``:"
msgstr ""

msgid "Port 7000 on IP address ``1.2.3.4``:"
msgstr ""

msgid "Port 8000 on IPv6 address ``::1``:"
msgstr ""

msgid "Port 7000 on IPv6 address ``::1``:"
msgstr ""

msgid "Port 7000 on IPv6 address ``2001:0db8:1234:5678::9``:"
msgstr ""

msgid "Port 8000 on IPv4 address of host ``localhost``:"
msgstr ""

msgid "Port 8000 on IPv6 address of host ``localhost``:"
msgstr ""

msgid "Serving static files with the development server"
msgstr "用开发服务器服务静态文件"

msgid ""
"By default, the development server doesn't serve any static files for your "
"site (such as CSS files, images, things under :setting:`MEDIA_URL` and so "
"forth). If you want to configure Django to serve static media, read :doc:`/"
"howto/static-files/index`."
msgstr ""
"默认情况下，开发服务器不会为你的网站提供任何静态文件（比如 CSS 文件、图片、 :"
"setting:`MEDIA_URL` 下的东西等等）。如果你想设置 Django 为服务静态媒体，请阅"
"读 :doc:`/howto/static-files/index`。"

msgid "Serving with ASGI in development"
msgstr ""

msgid ""
"Django's ``runserver`` command provides a WSGI server. In order to run under "
"ASGI you will need to use an :doc:`ASGI server </howto/deployment/asgi/"
"index>`. The Django Daphne project provides :ref:`daphne-runserver` that you "
"can use."
msgstr ""

msgid "``sendtestemail``"
msgstr "``sendtestemail``"

msgid ""
"Sends a test email (to confirm email sending through Django is working) to "
"the recipient(s) specified. For example:"
msgstr ""

msgid ""
"There are a couple of options, and you may use any combination of them "
"together:"
msgstr "有几个选项，你可以将它们任意组合在一起使用："

msgid ""
"Mails the email addresses specified in :setting:`MANAGERS` using :meth:"
"`~django.core.mail.mail_managers()`."
msgstr ""
"使用 :meth:`~django.core.mail.mail_managers()` 向 :setting:`MANAGERS` 中指定"
"的邮件地址发送邮件。"

msgid ""
"Mails the email addresses specified in :setting:`ADMINS` using :meth:"
"`~django.core.mail.mail_admins()`."
msgstr ""
"使用 :meth:`~django.core.mail.mail_admins()` 向 :setting:`ADMINS` 中指定的邮"
"件地址发送邮件。"

msgid "``shell``"
msgstr "``shell``"

msgid "Starts the Python interactive interpreter."
msgstr "启动 Python 交互式解释器。"

msgid ""
"Specifies the shell to use. By default, Django will use IPython_ or bpython_ "
"if either is installed. If both are installed, specify which one you want "
"like so:"
msgstr ""
"指定要使用的命令行。默认情况下，Django 会使用安装了的 IPython_ 或 bpython_ 。"
"如果两者都安装了，请指定使用哪一个："

msgid "IPython:"
msgstr ""

msgid "bpython:"
msgstr ""

msgid ""
"If you have a \"rich\" shell installed but want to force use of the "
"\"plain\" Python interpreter, use ``python`` as the interface name, like so:"
msgstr ""

msgid ""
"Disables reading the startup script for the \"plain\" Python interpreter. By "
"default, the script pointed to by the :envvar:`PYTHONSTARTUP` environment "
"variable or the ``~/.pythonrc.py`` script is read."
msgstr ""
"禁止读取“纯\" Python 解释器的启动脚本。默认情况下，读取 :envvar:"
"`PYTHONSTARTUP` 环境变量或 ``~/.pythonrc.py`` 脚本所指向的脚本。"

msgid "Lets you pass a command as a string to execute it as Django, like so:"
msgstr ""

msgid "You can also pass code in on standard input to execute it. For example:"
msgstr "你也可以在标准输入上传入代码来执行。例如："

msgid ""
"On Windows, the REPL is output due to implementation limits of :func:`select."
"select` on that platform."
msgstr ""
"在 Windows 上，由于 :func:`select.select` 在该平台上的实现限制，REPL 被输出。"

msgid "``showmigrations``"
msgstr "``showmigrations``"

msgid ""
"Shows all migrations in a project. You can choose from one of two formats:"
msgstr "显示一个项目中的所有迁移。你可以从两种格式中选择一种："

msgid ""
"Lists all of the apps Django knows about, the migrations available for each "
"app, and whether or not each migration is applied (marked by an ``[X]`` next "
"to the migration name). For a ``--verbosity`` of 2 and above, the applied "
"datetimes are also shown."
msgstr ""
"列出 Django 知道的所有应用，每个应用的可用迁移，以及每个迁移是否被应用（在迁"
"移名称旁边用 ``[X]`` 标记）。对于 ``--verbosity`` 2 及以上的应用，也会显示应"
"用的日期时间。"

msgid ""
"Apps without migrations are also listed, but have ``(no migrations)`` "
"printed under them."
msgstr "没有迁移的应用程序也在列表中，但下面印有 ``(no migrations)``。"

msgid "This is the default output format."
msgstr "这是默认的输出格式。"

msgid ""
"Shows the migration plan Django will follow to apply migrations. Like ``--"
"list``, applied migrations are marked by an ``[X]``. For a ``--verbosity`` "
"of 2 and above, all dependencies of a migration will also be shown."
msgstr ""
"显示 Django 将遵循的迁移计划。和 ``--list`` 一样，应用的迁移也用 ``[X]`` 标"
"记。对于 ``--verbosity`` 2 以上，也会显示迁移的所有依赖关系。"

msgid ""
"``app_label``\\s arguments limit the output, however, dependencies of "
"provided apps may also be included."
msgstr ""
"``app_label`` 参数限制了输出，但是，所提供的应用的依赖也可能被包括在内。"

msgid "Specifies the database to examine. Defaults to ``default``."
msgstr "指定要检查的数据库。默认为 ``default``。"

msgid "``sqlflush``"
msgstr "``sqlflush``"

msgid ""
"Prints the SQL statements that would be executed for the :djadmin:`flush` "
"command."
msgstr "打印 :djadmin:`flush` 命令执行的 SQL 语句。"

msgid ""
"Specifies the database for which to print the SQL. Defaults to ``default``."
msgstr "指定要打印 SQL 的数据库。默认值为 ``default``。"

msgid "``sqlmigrate``"
msgstr "``sqlmigrate``"

msgid ""
"Prints the SQL for the named migration. This requires an active database "
"connection, which it will use to resolve constraint names; this means you "
"must generate the SQL against a copy of the database you wish to later apply "
"it on."
msgstr ""
"打印指定迁移的 SQL。这需要一个活动的数据库连接，它将用来解析约束名；这意味着"
"你必须针对你希望以后应用它的数据库副本生成 SQL。"

msgid "Note that ``sqlmigrate`` doesn't colorize its output."
msgstr "请注意，``sqlmigrate`` 不会对其输出进行着色。"

msgid ""
"Generates the SQL for unapplying the migration. By default, the SQL created "
"is for running the migration in the forwards direction."
msgstr ""
"生成用于解除应用迁移的 SQL。默认情况下，所创建的 SQL 是用于向前运行迁移。"

msgid ""
"Specifies the database for which to generate the SQL. Defaults to "
"``default``."
msgstr "指定要生成 SQL 的数据库。默认值为 ``default``。"

msgid "``sqlsequencereset``"
msgstr "``sqlsequencereset``"

msgid ""
"Prints the SQL statements for resetting sequences for the given app name(s)."
msgstr "打印用于重置给定应用名称序列的 SQL 语句。"

msgid ""
"Sequences are indexes used by some database engines to track the next "
"available number for automatically incremented fields."
msgstr "序列是一些数据库引擎用来跟踪自动递增字段的下一个可用数字的索引。"

msgid ""
"Use this command to generate SQL which will fix cases where a sequence is "
"out of sync with its automatically incremented field data."
msgstr "使用此命令生成 SQL，它将修复序列与其自动递增的字段数据不同步的情况。"

msgid "``squashmigrations``"
msgstr "``squashmigrations``"

msgid ""
"Squashes the migrations for ``app_label`` up to and including "
"``migration_name`` down into fewer migrations, if possible. The resulting "
"squashed migrations can live alongside the unsquashed ones safely. For more "
"information, please read :ref:`migration-squashing`."
msgstr ""
"如果可能的话，将 ``app_label`` 的迁移（包括 ``migration_name``）压缩成较少的"
"迁移。压制后的迁移可以和未压制的迁移安全地并存。更多信息，请阅读 :ref:"
"`migration-squashing`。"

msgid ""
"When ``start_migration_name`` is given, Django will only include migrations "
"starting from and including this migration. This helps to mitigate the "
"squashing limitation of :class:`~django.db.migrations.operations.RunPython` "
"and :class:`django.db.migrations.operations.RunSQL` migration operations."
msgstr ""
"当给定 ``start_migration_name`` 时，Django 将只包含从这个迁移开始的迁移。这有"
"助于减少 :class:`~django.db.migrations.operations.RunPython` 和 :class:"
"`django.db.migrations.operations.RunSQL` 迁移操作的限制。"

msgid ""
"Disables the optimizer when generating a squashed migration. By default, "
"Django will try to optimize the operations in your migrations to reduce the "
"size of the resulting file. Use this option if this process is failing or "
"creating incorrect migrations, though please also file a Django bug report "
"about the behavior, as optimization is meant to be safe."
msgstr ""
"当生成一个压缩的迁移时，禁用优化器。默认情况下，Django 会尝试优化迁移中的操"
"作，以减少生成文件的大小。如果这个过程失败或创建不正确的迁移，请使用这个选"
"项，不过也请提交一个 Django 的 bug 报告来说明这个行为，因为优化的目的是为了安"
"全。"

msgid ""
"Sets the name of the squashed migration. When omitted, the name is based on "
"the first and last migration, with ``_squashed_`` in between."
msgstr ""
"设置被压缩的迁移的名称。当省略时，名称以第一次和最后一次迁移为基础，中间为 "
"``_squashed_``。"

msgid ""
"Generate squashed migration file without Django version and timestamp header."
msgstr "生成没有 Django 版本和时间戳头的压缩迁移文件。"

msgid "``startapp``"
msgstr "``startapp``"

msgid ""
"Creates a Django app directory structure for the given app name in the "
"current directory or the given destination."
msgstr ""
"在当前目录或给定的目标目录中为给定的应用名创建一个 Django 应用目录结构。"

msgid ""
"By default, :source:`the new directory <django/conf/app_template>` contains "
"a ``models.py`` file and other app template files. If only the app name is "
"given, the app directory will be created in the current working directory."
msgstr ""
"默认情况下，:source:`新目录 <django/conf/app_template>` 包含 ``models.py`` 文"
"件和其他应用模板文件。如果只给出应用名称，应用目录将被创建在当前工作目录下。"

msgid ""
"If the optional destination is provided, Django will use that existing "
"directory rather than creating a new one. You can use '.' to denote the "
"current working directory."
msgstr ""
"如果提供了可选的目的地，Django 将使用现有的目录，而不是创建一个新的目录。你可"
"以使用 '.' 来表示当前的工作目录。"

msgid ""
"Provides the path to a directory with a custom app template file, or a path "
"to an uncompressed archive (``.tar``) or a compressed archive (``.tar.gz``, "
"``.tar.bz2``, ``.tar.xz``, ``.tar.lzma``, ``.tgz``, ``.tbz2``, ``.txz``, ``."
"tlz``, ``.zip``) containing the app template files."
msgstr ""
"提供指向自定义应用模板文件目录的路径，或指向未压缩档案（``.tar``）或压缩档案"
"（``. tar.gz``、``.tar.bz2``、``.tar.xz``、``.tar.lzma``、``.tgz``、``."
"tbz2``、``.txz``、``.tlz``、``.zip``）的路径。"

msgid ""
"For example, this would look for an app template in the given directory when "
"creating the ``myapp`` app:"
msgstr ""

msgid ""
"Django will also accept URLs (``http``, ``https``, ``ftp``) to compressed "
"archives with the app template files, downloading and extracting them on the "
"fly."
msgstr ""
"Django 还将接受 URL（``http``、``https``、``ftp``）与应用模板文件一起压缩归"
"档，即时下载并解压。"

msgid ""
"For example, taking advantage of GitHub's feature to expose repositories as "
"zip files, you can use a URL like:"
msgstr ""

msgid ""
"Specifies which file extensions in the app template should be rendered with "
"the template engine. Defaults to ``py``."
msgstr "指定应用模板中的哪些文件扩展名应该用模板引擎渲染。默认值为 ``py``。"

msgid ""
"Specifies which files in the app template (in addition to those matching ``--"
"extension``) should be rendered with the template engine. Defaults to an "
"empty list."
msgstr ""
"指定应用模板中的哪些文件（除了那些匹配 ``--extension`` 的文件外）应该用模板引"
"擎渲染。默认为空列表。"

msgid ""
"Specifies which directories in the app template should be excluded, in "
"addition to ``.git`` and ``__pycache__``. If this option is not provided, "
"directories named ``__pycache__`` or starting with ``.`` will be excluded."
msgstr ""
"指定除了 ``.git`` 和 ``__pycache__`` 之外，应用模板中的哪些目录应该被排除。如"
"果没有提供这个选项，名为 ``__pycache__`` 或以 ``.`` 开头的目录将被排除。"

msgid ""
"The :class:`template context <django.template.Context>` used for all "
"matching files is:"
msgstr ""
"所有匹配文件使用的 :class:`template context <django.template.Context>` 是："

msgid ""
"Any option passed to the ``startapp`` command (among the command's supported "
"options)"
msgstr "传递给 ``startapp`` 命令的任何选项（在命令行支持的选项中）"

msgid "``app_name`` -- the app name as passed to the command"
msgstr "``app_name`` ——传递给命令的应用名称"

msgid "``app_directory`` -- the full path of the newly created app"
msgstr "``app_directory`` ——新创建的应用的完整路径"

msgid "``camel_case_app_name`` -- the app name in camel case format"
msgstr "``camel_case_app_name`` ——驼峰大小写格式的应用名称"

msgid ""
"``docs_version`` -- the version of the documentation: ``'dev'`` or ``'1.x'``"
msgstr "``docs_version`` ——文档的版本： ``'dev'`` 或 ``'1.x'``。"

msgid "``django_version`` -- the version of Django, e.g. ``'2.0.3'``"
msgstr "``django_version`` ——Django 的版本，例如 ``'2.0.3'``。"

msgid ""
"When the app template files are rendered with the Django template engine (by "
"default all ``*.py`` files), Django will also replace all stray template "
"variables contained. For example, if one of the Python files contains a "
"docstring explaining a particular feature related to template rendering, it "
"might result in an incorrect example."
msgstr ""
"当应用模板文件用 Django 模板引擎渲染时（默认是所有 ``*.py`` 文件），Django 也"
"会替换掉所有包含的游离模板变量。例如，如果其中一个 Python 文件中包含了解释与"
"模板渲染相关的特定功能的 docstring，可能会导致一个错误的例子。"

msgid ""
"To work around this problem, you can use the :ttag:`templatetag` template "
"tag to \"escape\" the various parts of the template syntax."
msgstr ""
"为了解决这个问题，你可以使用 :ttag:`templatetag` 模板标签来”转义“模板语法的各"
"个部分。"

msgid ""
"In addition, to allow Python template files that contain Django template "
"language syntax while also preventing packaging systems from trying to byte-"
"compile invalid ``*.py`` files, template files ending with ``.py-tpl`` will "
"be renamed to ``.py``."
msgstr ""
"此外，为了允许包含 Django 模板语言语法的 Python 模板文件，同时也为了防止打包"
"系统试图对无效的 ``*.py`` 文件进行字节编译，以 ``.py-tpl`` 结尾的模板文件将改"
"名为 ``.py``。"

msgid ""
"The contents of custom app (or project) templates should always be audited "
"before use: Such templates define code that will become part of your "
"project, and this means that such code will be trusted as much as any app "
"you install, or code you write yourself. Further, even rendering the "
"templates is, effectively, executing code that was provided as input to the "
"management command. The Django template language may provide wide access "
"into the system, so make sure any custom template you use is worthy of your "
"trust."
msgstr ""

msgid "``startproject``"
msgstr "``startproject``"

msgid ""
"Creates a Django project directory structure for the given project name in "
"the current directory or the given destination."
msgstr ""
"在当前目录或给定的目标目录中为给定的项目名称创建一个 Django 项目目录结构。"

msgid ""
"By default, :source:`the new directory <django/conf/project_template>` "
"contains ``manage.py`` and a project package (containing a ``settings.py`` "
"and other files)."
msgstr ""
"默认情况下，:source:`新目录 <django/conf/project_template>` 包含 ``manage."
"py`` 和一个项目包（包含 ``settings.py`` 和其他文件）。"

msgid ""
"If only the project name is given, both the project directory and project "
"package will be named ``<projectname>`` and the project directory will be "
"created in the current working directory."
msgstr ""
"如果只给出项目名称，则项目目录和项目包都将命名为 ``<projectname>``，并在当前"
"工作目录下创建项目目录。"

msgid ""
"If the optional destination is provided, Django will use that existing "
"directory as the project directory, and create ``manage.py`` and the project "
"package within it. Use '.' to denote the current working directory."
msgstr ""
"如果提供了可选的目的地，Django 将使用该已有目录作为项目目录，并在其中创建 "
"``manage.py`` 和项目包。用 '.' 表示当前的工作目录。"

msgid ""
"Specifies a directory, file path, or URL of a custom project template. See "
"the :option:`startapp --template` documentation for examples and usage."
msgstr ""
"指定一个自定义项目模板的目录、文件路径或 URL。参见 :option:`startapp --"
"template` 文档中的例子和用法。"

msgid ""
"Specifies which file extensions in the project template should be rendered "
"with the template engine. Defaults to ``py``."
msgstr "指定项目模板中的哪些文件扩展名应该用模板引擎渲染。默认值为 ``py``。"

msgid ""
"Specifies which files in the project template (in addition to those matching "
"``--extension``) should be rendered with the template engine. Defaults to an "
"empty list."
msgstr ""
"指定项目模板中的哪些文件（除了那些匹配 ``--extension`` 的文件外）应该用模板引"
"擎渲染。默认为空列表。"

msgid ""
"Specifies which directories in the project template should be excluded, in "
"addition to ``.git`` and ``__pycache__``. If this option is not provided, "
"directories named ``__pycache__`` or starting with ``.`` will be excluded."
msgstr ""
"指定除了 ``.git`` 和 ``__pycache__`` 之外，项目模板中哪些目录应该被排除。如果"
"没有提供这个选项，名为 ``__pycache__`` 或以 ``.`` 开头的目录将被排除。"

msgid "The :class:`template context <django.template.Context>` used is:"
msgstr "使用的 :class:`template context <django.template.Context>` 是："

msgid ""
"Any option passed to the ``startproject`` command (among the command's "
"supported options)"
msgstr "传递给 ``startproject`` 命令的任何选项（在命令支持的选项中）"

msgid "``project_name`` -- the project name as passed to the command"
msgstr "``project_name`` ——传给命令的项目名称"

msgid "``project_directory`` -- the full path of the newly created project"
msgstr "``project_directory`` ——新创建项目的完整路径"

msgid "``secret_key`` -- a random key for the :setting:`SECRET_KEY` setting"
msgstr "``secret_key`` —— :setting:`SECRET_KEY` 设置的随机密钥"

msgid ""
"Please also see the :ref:`rendering warning <render_warning>` and :ref:"
"`trusted code warning <trusted_code_warning>` as mentioned for :djadmin:"
"`startapp`."
msgstr ""

msgid "``test``"
msgstr "``test``"

msgid ""
"Runs tests for all installed apps. See :doc:`/topics/testing/index` for more "
"information."
msgstr ""
"为所有安装的应用运行测试。参见 :doc:`/topics/testing/index` 获取更多信息。"

msgid ""
"Stops running tests and reports the failure immediately after a test fails."
msgstr "测试失败后立即停止运行测试并报告失败。"

msgid ""
"Controls the test runner class that is used to execute tests. This value "
"overrides the value provided by the :setting:`TEST_RUNNER` setting."
msgstr ""
"控制用于执行测试的测试运行器类。这个值会覆盖 :setting:`TEST_RUNNER` 配置提供"
"的值。"

msgid ""
"Suppresses all user prompts. A typical prompt is a warning about deleting an "
"existing test database."
msgstr "压制所有用户提示。一个典型的提示是关于删除现有测试数据库的警告。"

msgid "Test runner options"
msgstr "测试运行器选项"

msgid ""
"The ``test`` command receives options on behalf of the specified :option:`--"
"testrunner`. These are the options of the default test runner: :class:"
"`~django.test.runner.DiscoverRunner`."
msgstr ""
"``test`` 命令代表指定的 :option:`--testrunner` 接收选项。这些是默认测试运行器"
"的选项： :class:`~django.test.runner.DiscoverRunner`。"

msgid ""
"Preserves the test database between test runs. This has the advantage of "
"skipping both the create and destroy actions which can greatly decrease the "
"time to run tests, especially those in a large test suite. If the test "
"database does not exist, it will be created on the first run and then "
"preserved for each subsequent run. Unless the :setting:`MIGRATE "
"<TEST_MIGRATE>` test setting is ``False``, any unapplied migrations will "
"also be applied to the test database before running the test suite."
msgstr ""
"在测试运行之间保留测试数据库。这样做的好处是可以跳过创建和销毁这两个动作，从"
"而大大缩短测试运行的时间，尤其是在大型测试套件中。如果测试数据库不存在，将在"
"第一次运行时创建，然后在以后的每次运行中保留。除非 :setting:`MIGRATE "
"<TEST_MIGRATE>` 测试配置为 ``False``，否则任何未应用的迁移也会在运行测试套件"
"之前应用到测试数据库。"

msgid ""
"Randomizes the order of tests before running them. This can help detect "
"tests that aren't properly isolated. The test order generated by this option "
"is a deterministic function of the integer seed given. When no seed is "
"passed, a seed is chosen randomly and printed to the console. To repeat a "
"particular test order, pass a seed. The test orders generated by this option "
"preserve Django's :ref:`guarantees on test order <order-of-tests>`. They "
"also keep tests grouped by test case class."
msgstr ""
"在运行测试之前，随机化测试的顺序。这可以帮助发现那些没有正确隔离的测试。这个"
"选项产生的测试顺序是给定的整数种子的一个确定性函数。当没有传递种子时，会随机"
"选择一个种子并打印到控制台。要重复一个特定的测试顺序，需要传递一个种子。这个"
"选项生成的测试顺序保留了 Django 的 :ref:`测试顺序的保证 <order-of-tests>`。它"
"们还保持了测试案例类别的测试分组。"

msgid ""
"The shuffled orderings also have a special consistency property useful when "
"narrowing down isolation issues. Namely, for a given seed and when running a "
"subset of tests, the new order will be the original shuffling restricted to "
"the smaller set. Similarly, when adding tests while keeping the seed the "
"same, the order of the original tests will be the same in the new order."
msgstr ""
"在缩小隔离问题时，洗牌后的顺序也有一个特殊的一致性属性。也就是说，对于一个给"
"定的种子，当运行一个测试子集时，新的顺序将是限制在较小的集合上的原始洗牌。同"
"样地，在保持种子不变的情况下增加测试时，原始测试的顺序在新的顺序中也是一样"
"的。"

msgid ""
"Sorts test cases in the opposite execution order. This may help in debugging "
"the side effects of tests that aren't properly isolated. :ref:`Grouping by "
"test class <order-of-tests>` is preserved when using this option. This can "
"be used in conjunction with ``--shuffle`` to reverse the order for a "
"particular seed."
msgstr ""
"将测试案例以相反的执行顺序排序。这可能有助于调试没有正确隔离的测试的副作"
"用。 :ref:`按测试类别分组 <order-of-tests>` 在使用此选项时被保留下来。这可以"
"和 ``--shuffle`` 一起使用，以扭转特定种子的顺序。"

msgid ""
"Sets the :setting:`DEBUG` setting to ``True`` prior to running tests. This "
"may help troubleshoot test failures."
msgstr ""
"在运行测试之前，将 :setting:`DEBUG` 设置为 ``True``。这可能有助于解决测试失败"
"的问题。"

msgid ""
"Enables :ref:`SQL logging <django-db-logger>` for failing tests. If ``--"
"verbosity`` is ``2``, then queries in passing tests are also output."
msgstr ""
"对失败的测试启用 :ref:`SQL 日志 <django-db-logger>`。如果 ``--verbosity`` 是 "
"``2``，那么通过测试的查询也会被输出。"

msgid ""
"Runs tests in separate parallel processes. Since modern processors have "
"multiple cores, this allows running tests significantly faster."
msgstr ""
"在单独的并行进程中运行测试。由于现代处理器拥有多个内核，这使得运行测试的速度"
"大大加快。"

msgid ""
"Using ``--parallel`` without a value, or with the value ``auto``, runs one "
"test process per core according to :func:`multiprocessing.cpu_count()`. You "
"can override this by passing the desired number of processes, e.g. ``--"
"parallel 4``, or by setting the :envvar:`DJANGO_TEST_PROCESSES` environment "
"variable."
msgstr ""
"使用 ``--parallel`` 不加值，或使用 ``auto`` 值，根据 :func:`multiprocessing."
"cpu_count()` 每个核心运行一个测试进程。你可以通过传递所需的进程数来覆盖这一"
"点，例如：``--parallel 4``，或者通过设置 :envvar:`DJANGO_TEST_PROCESSES` 环境"
"变量。"

msgid ""
"Django distributes test cases — :class:`unittest.TestCase` subclasses — to "
"subprocesses. If there are fewer test cases than configured processes, "
"Django will reduce the number of processes accordingly."
msgstr ""
"Django 将测试用例—— :class:`unittest.TestCase` 子类——分配给子进程。如果测试用"
"例比配置的进程少，Django 会相应减少进程的数量。"

msgid ""
"Each process gets its own database. You must ensure that different test "
"cases don't access the same resources. For instance, test cases that touch "
"the filesystem should create a temporary directory for their own use."
msgstr ""
"每个进程都会得到它们自己的数据库。你必须确保不同的测试用例不会访问相同的资"
"源。例如，接触文件系统的测试用例应该创建一个临时目录供自己使用。"

msgid ""
"If you have test classes that cannot be run in parallel, you can use "
"``SerializeMixin`` to run them sequentially. See :ref:`Enforce running test "
"classes sequentially <topics-testing-enforce-run-sequentially>`."
msgstr ""
"如果你有不能并行运行的测试类，你可以使用 ``SerializeMixin`` 按顺序运行它们。"
"参见 :ref:`强制按顺序运行测试类 <topics-testing-enforce-run-sequentially>`。"

msgid ""
"This option requires the third-party ``tblib`` package to display tracebacks "
"correctly:"
msgstr "这个选项需要第三方的 ``tlib`` 包才能正确显示回溯。"

msgid ""
"This feature isn't available on Windows. It doesn't work with the Oracle "
"database backend either."
msgstr "这个功能在 Windows 上无法使用。它也不能与 Oracle 数据库后端一起工作。"

msgid ""
"If you want to use :mod:`pdb` while debugging tests, you must disable "
"parallel execution (``--parallel=1``). You'll see something like ``bdb."
"BdbQuit`` if you don't."
msgstr ""
"如果你想在调试测试时使用 :mod:`pdb`，你必须禁用并行执行（``-parallel=1``）。"
"如果不这样做，你会看到类似 ``bdb.BdbQuit`` 的东西。"

msgid ""
"When test parallelization is enabled and a test fails, Django may be unable "
"to display the exception traceback. This can make debugging difficult. If "
"you encounter this problem, run the affected test without parallelization to "
"see the traceback of the failure."
msgstr ""
"当启用测试并行化后，测试失败时，Django 可能无法显示异常回溯。这可能会给调试带"
"来困难。如果你遇到这个问题，请在不并行的情况下运行受影响的测试，以查看失败的"
"回溯。"

msgid ""
"This is a known limitation. It arises from the need to serialize objects in "
"order to exchange them between processes. See :ref:`python:pickle-picklable` "
"for details."
msgstr ""
"这是一个众所周知的限制。这是因为需要对对象进行序列化，以便在进程间进行交换。"
"详见 :ref:`python:pickle-picklable`。"

msgid ""
"Runs only tests :ref:`marked with the specified tags <topics-tagging-"
"tests>`. May be specified multiple times and combined with :option:`test --"
"exclude-tag`."
msgstr ""
"只运行 :ref:`特定标签标记 <topics-tagging-tests>` 的测试。可多次指定，并与 :"
"option:`test --exclud-tag` 结合使用。"

msgid "Tests that fail to load are always considered matching."
msgstr "未能加载的测试总是被认为是匹配的。"

msgid ""
"Excludes tests :ref:`marked with the specified tags <topics-tagging-tests>`. "
"May be specified multiple times and combined with :option:`test --tag`."
msgstr ""
"不包括 :ref:`特定标签标记的 <topics-tagging-tests>` 测试。可多次指定，并与 :"
"option:`test --tag` 结合使用。"

msgid ""
"Runs test methods and classes matching test name patterns, in the same way "
"as :option:`unittest's -k option<unittest.-k>`. Can be specified multiple "
"times."
msgstr ""
"运行与测试名称模式相匹配的测试方法和类，与 :option:`unittest's -k "
"option<unittest.-k>` 一样。可以指定多次。"

msgid ""
"Spawns a ``pdb`` debugger at each test error or failure. If you have it "
"installed, ``ipdb`` is used instead."
msgstr ""
"在每次测试错误或失败时，都会产生一个 ``pdb`` 调试器。如果你安装了 ``ipdb``，"
"则使用其代替。"

msgid ""
"Discards output (``stdout`` and ``stderr``) for passing tests, in the same "
"way as :option:`unittest's --buffer option<unittest.-b>`."
msgstr ""
"丢弃通过测试的输出（``stdout`` 和 ``stderr``），与 :option:`unittest's --"
"buffer option<unittest.-b>` 一样。"

msgid ""
"Django automatically calls :func:`faulthandler.enable()` when starting the "
"tests, which allows it to print a traceback if the interpreter crashes. Pass "
"``--no-faulthandler`` to disable this behavior."
msgstr ""
"Django 在启动测试时自动调用 :func:`faulthandler.enable()`，这允许它在解释器崩"
"溃时打印一个回溯信息。传递 ``--no-faulthandler`` 来禁止这种行为。"

msgid "Outputs timings, including database setup and total run time."
msgstr "输出时间，包括数据库设置和总运行时间。"

msgid "``testserver``"
msgstr "``testserver``"

msgid ""
"Runs a Django development server (as in :djadmin:`runserver`) using data "
"from the given fixture(s)."
msgstr ""
"使用给定固定数据中的数据运行一个 Django 开发服务器（如 :djadmin:"
"`runserver`）。"

msgid "For example, this command:"
msgstr ""

msgid "...would perform the following steps:"
msgstr "...将执行以下步骤："

msgid "Create a test database, as described in :ref:`the-test-database`."
msgstr "按照 :ref:`the-test-database` 中的描述，创建一个测试数据库。"

msgid ""
"Populate the test database with fixture data from the given fixtures. (For "
"more on fixtures, see the documentation for :djadmin:`loaddata` above.)"
msgstr ""
"用给定固定数据的数据填充测试数据库。关于固定数据的更多信息，请参见上面的 :"
"djadmin:`loaddata` 的文档）。"

msgid ""
"Runs the Django development server (as in :djadmin:`runserver`), pointed at "
"this newly created test database instead of your production database."
msgstr ""
"运行 Django 开发服务器（如 :djadmin:`runserver`），指向这个新创建的测试数据"
"库，而不是你的生产数据库。"

msgid "This is useful in a number of ways:"
msgstr "这在很多方面都很有用："

msgid ""
"When you're writing :doc:`unit tests </topics/testing/overview>` of how your "
"views act with certain fixture data, you can use ``testserver`` to interact "
"with the views in a web browser, manually."
msgstr ""
"当你在写 :doc:`单元测试 </topics/testing/overview>` 时，你的视图如何与某些固"
"定数据一起行动，你可以使用 ``testserver`` 在网络浏览器中手动与视图互动。"

msgid ""
"Let's say you're developing your Django application and have a \"pristine\" "
"copy of a database that you'd like to interact with. You can dump your "
"database to a :ref:`fixture <fixtures-explanation>` (using the :djadmin:"
"`dumpdata` command, explained above), then use ``testserver`` to run your "
"web application with that data.  With this arrangement, you have the "
"flexibility of messing up your data in any way, knowing that whatever data "
"changes you're making are only being made to a test database."
msgstr ""

msgid ""
"Note that this server does *not* automatically detect changes to your Python "
"source code (as :djadmin:`runserver` does). It does, however, detect changes "
"to templates."
msgstr ""
"请注意，这个服务器 *不会* 自动检测你的 Python 源代码的变化（就像 :djadmin:"
"`srunerver` 那样)。但是，它可以检测到对模板的更改。"

msgid ""
"Specifies a different port, or IP address and port, from the default of "
"``127.0.0.1:8000``. This value follows exactly the same format and serves "
"exactly the same function as the argument to the :djadmin:`runserver` "
"command."
msgstr ""
"指定与默认的 ``127.0.0.1:8000`` 不同的端口或 IP 地址和端口。这个值的格式和作"
"用与 :djadmin:`runserver` 命令的参数完全相同。"

msgid "To run the test server on port 7000 with ``fixture1`` and ``fixture2``:"
msgstr ""

msgid ""
"(The above statements are equivalent. We include both of them to demonstrate "
"that it doesn't matter whether the options come before or after the fixture "
"arguments.)"
msgstr ""
"（上面的语句是等价的。我们把这两句话都包括在内，是为了证明选项是在固定数据参"
"数之前还是之后并不重要。）"

msgid "To run on 1.2.3.4:7000 with a ``test`` fixture:"
msgstr ""

msgid "Commands provided by applications"
msgstr "应用程序提供的命令"

msgid ""
"Some commands are only available when the ``django.contrib`` application "
"that :doc:`implements </howto/custom-management-commands>` them has been :"
"setting:`enabled <INSTALLED_APPS>`. This section describes them grouped by "
"their application."
msgstr ""
"有些命令只有 :setting:`enabled <INSTALLED_APPS>` :doc:`实现 </howto/custom-"
"management-commands>` 它们的 ``django.contrib`` 应用程序时才可用。本节将按照"
"应用来介绍这些命令。"

msgid "``changepassword``"
msgstr "``changepassword``"

msgid ""
"This command is only available if Django's :doc:`authentication system </"
"topics/auth/index>` (``django.contrib.auth``) is installed."
msgstr ""
"只有安装了 Django 的 :doc:`认证系统 </topics/auth/index>` （``django.contrib."
"auth``），这个命令才有效。"

msgid ""
"Allows changing a user's password. It prompts you to enter a new password "
"twice for the given user. If the entries are identical, this immediately "
"becomes the new password. If you do not supply a user, the command will "
"attempt to change the password whose username matches the current user."
msgstr ""
"允许更改用户的密码。它提示你为给定的用户输入两次新密码。如果输入的密码相同，"
"则立即成为新密码。如果你没有提供用户，命令将尝试更改与当前用户用户名匹配的密"
"码。"

msgid "Specifies the database to query for the user. Defaults to ``default``."
msgstr "指定要为用户查询的数据库。默认为 ``default``。"

msgid "``createsuperuser``"
msgstr "``createsuperuser``"

msgid ""
"Creates a superuser account (a user who has all permissions). This is useful "
"if you need to create an initial superuser account or if you need to "
"programmatically generate superuser accounts for your site(s)."
msgstr ""
"创建一个超级用户账户（拥有所有权限的用户）。如果你需要创建一个初始的超级用户"
"账户，或者你需要为你的网站程序化地生成超级用户账户，这很有用。"

msgid ""
"When run interactively, this command will prompt for a password for the new "
"superuser account. When run non-interactively, you can provide a password by "
"setting the :envvar:`DJANGO_SUPERUSER_PASSWORD` environment variable. "
"Otherwise, no password will be set, and the superuser account will not be "
"able to log in until a password has been manually set for it."
msgstr ""
"当交互式运行时，该命令将提示为新的超级用户账户提供密码。非交互式运行时，可以"
"通过设置 :envvar:`DJANGO_SUPERUSER_PASSWORD` 环境变量提供密码。否则，将不设置"
"密码，超级用户账户将无法登录，直到手动为其设置密码。"

msgid ""
"In non-interactive mode, the :attr:`~django.contrib.auth.models.CustomUser."
"USERNAME_FIELD` and required fields (listed in :attr:`~django.contrib.auth."
"models.CustomUser.REQUIRED_FIELDS`) fall back to "
"``DJANGO_SUPERUSER_<uppercase_field_name>`` environment variables, unless "
"they are overridden by a command line argument. For example, to provide an "
"``email`` field, you can use ``DJANGO_SUPERUSER_EMAIL`` environment variable."
msgstr ""
"在非交互模式下， :attr:`~django.contrib.auth.models.CustomUser."
"USERNAME_FIELD` 和必填字段（列在 :attr:`~django.contrib.auth.models."
"CustomUser.REQUIRED_FIELDS` 中）回落到 "
"``DJANGO_SUPERUSER_<uppercase_field_name>`` 环境变量，除非它们被命令行参数覆"
"盖。例如，要提供一个 ``email`` 字段，你可以使用 ``DJANGO_SUPERUSER_EMAIL`` 环"
"境变量。"

msgid ""
"Suppresses all user prompts. If a suppressed prompt cannot be resolved "
"automatically, the command will exit with error code 1."
msgstr ""
"压制所有用户提示。如果被抑制的提示不能自动解决，命令将以 error code 1 退出。"

msgid ""
"The username and email address for the new account can be supplied by using "
"the ``--username`` and ``--email`` arguments on the command line. If either "
"of those is not supplied, ``createsuperuser`` will prompt for it when "
"running interactively."
msgstr ""
"新账户的用户名和电子邮件地址可以通过使用命令行中的 ``--username`` 和 ``--"
"email`` 参数来提供。如果没有提供这两个参数中的任何一个，``createsuperuser`` "
"将在交互式运行时提示输入。"

msgid "Specifies the database into which the superuser object will be saved."
msgstr "指定保存超级用户对象的数据库。"

msgid ""
"You can subclass the management command and override ``get_input_data()`` if "
"you want to customize data input and validation. Consult the source code for "
"details on the existing implementation and the method's parameters. For "
"example, it could be useful if you have a ``ForeignKey`` in :attr:`~django."
"contrib.auth.models.CustomUser.REQUIRED_FIELDS` and want to allow creating "
"an instance instead of entering the primary key of an existing instance."
msgstr ""
"如果你想自定义数据输入和验证，可以子类管理命令，并覆盖 ``get_input_data()``。"
"关于现有的实现和方法的参数，请查阅源代码。例如，如果你在 :attr:`~django."
"contrib.auth.models.CustomUser.REQUIRED_FIELDS` 中有一个 ``ForeignKey``，并且"
"希望允许创建一个实例，而不是输入现有实例的主键，这可能是有用的。"

msgid "``django.contrib.contenttypes``"
msgstr "``django.contrib.contenttypes``"

msgid "``remove_stale_contenttypes``"
msgstr "``remove_stale_contenttypes``"

msgid ""
"This command is only available if Django's :doc:`contenttypes app </ref/"
"contrib/contenttypes>` (:mod:`django.contrib.contenttypes`) is installed."
msgstr ""
"只有安装了 Django 的 :doc:`contenttypes 应用 </ref/contrib/contenttypes>` "
"（ :mod:`django.contrib.contenttypes`），这个命令才有效。"

msgid ""
"Deletes stale content types (from deleted models) in your database. Any "
"objects that depend on the deleted content types will also be deleted. A "
"list of deleted objects will be displayed before you confirm it's okay to "
"proceed with the deletion."
msgstr ""
"删除数据库中陈旧的内容类型（来自已删除的模型）。依赖于已删除内容类型的任何对"
"象也将被删除。在你确认可以继续删除之前，将显示一个已删除对象的列表。"

msgid "Specifies the database to use. Defaults to ``default``."
msgstr "指定要使用的数据库。默认为 ``default``。"

msgid ""
"Deletes stale content types including ones from previously installed apps "
"that have been removed from :setting:`INSTALLED_APPS`. Defaults to ``False``."
msgstr ""
"删除陈旧的内容类型，包括以前安装的应用程序的内容类型，这些内容类型已经从 :"
"setting:`INSTALLED_APPS` 中删除。默认值为 ``False``。"

msgid "``django.contrib.gis``"
msgstr "``django.contrib.gis``"

msgid ""
"This command is only available if :doc:`GeoDjango </ref/contrib/gis/index>` "
"(``django.contrib.gis``) is installed."
msgstr ""
"只有在安装了 :doc:`GeoDjango </ref/contrib/gis/index>` （``django.contrib."
"gis``）的情况下，该命令才可用。"

msgid ""
"Please refer to its :djadmin:`description <ogrinspect>` in the GeoDjango "
"documentation."
msgstr "请参考 GeoDjango 文档中它的 :djadmin:`描述 <ogrinspect>`。"

msgid "``django.contrib.sessions``"
msgstr "``django.contrib.sessions``"

msgid "``clearsessions``"
msgstr "``clearsessions``"

msgid "Can be run as a cron job or directly to clean out expired sessions."
msgstr "可以以定时任务的形式运行，也可以直接清理过期会话。"

msgid "``django.contrib.sitemaps``"
msgstr "``django.contrib.sitemaps``"

msgid "``ping_google``"
msgstr "``ping_google``"

msgid ""
"This command is only available if the :doc:`Sitemaps framework </ref/contrib/"
"sitemaps>` (``django.contrib.sitemaps``) is installed."
msgstr ""
"只有安装了 :doc:`站点地图框架 </ref/contrib/sitemaps>` （``django.contrib."
"sitemaps``），该命令才可用。"

msgid ""
"Please refer to its :djadmin:`description <ping_google>` in the Sitemaps "
"documentation."
msgstr "请参考站点地图文档中的 :djadmin:`描述 <ping_google>`。"

msgid "``django.contrib.staticfiles``"
msgstr "``django.contrib.staticfiles``"

msgid ""
"This command is only available if the :doc:`static files application </howto/"
"static-files/index>` (``django.contrib.staticfiles``) is installed."
msgstr ""
"只有安装了 :doc:`静态文件应用程序 </howto/static-files/index>` （``django."
"contrib.staticfiles``），该命令才可用。"

msgid ""
"Please refer to its :djadmin:`description <collectstatic>` in the :doc:"
"`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""
"请参考它的 :doc:`静态文件 </ref/contrib/staticfiles>` 文档中的 :djadmin:`描"
"述 <collectstatic>`。"

msgid ""
"Please refer to its :djadmin:`description <findstatic>` in the :doc:"
"`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""
"请参考它的 :doc:`静态文件 </ref/contrib/staticfiles>` 文档中的 :djadmin:`描"
"述 <findstatic>`。"

msgid "Default options"
msgstr "默认选项"

msgid ""
"Although some commands may allow their own custom options, every command "
"allows for the following options by default:"
msgstr "尽管有些命令可能允许自己的自定义选项，但每个命令都默认允许以下选项："

msgid ""
"Adds the given filesystem path to the Python `import search path`_. If this "
"isn't provided, ``django-admin`` will use the :envvar:`PYTHONPATH` "
"environment variable."
msgstr ""
"将给定的文件系统路径添加到 Python `import 搜索路径`_ 中。如果没有提供，"
"``django-admin`` 将使用 :envvar:`PYTHONPATH` 环境变量。"

msgid ""
"This option is unnecessary in ``manage.py``, because it takes care of "
"setting the Python path for you."
msgstr "这个选项在 ``manage.py`` 中是不必要的，因为它为你设置了 Python 路径。"

msgid ""
"Specifies the settings module to use. The settings module should be in "
"Python package syntax, e.g. ``mysite.settings``. If this isn't provided, "
"``django-admin`` will use the :envvar:`DJANGO_SETTINGS_MODULE` environment "
"variable."
msgstr ""
"指定要使用的配置模块。配置模块应该使用 Python 包语法，例如 ``mysite."
"settings``。如果没有提供，``django-admin`` 将使用 :envvar:"
"`DJANGO_SETTINGS_MODULE` 环境变量。"

msgid ""
"This option is unnecessary in ``manage.py``, because it uses ``settings.py`` "
"from the current project by default."
msgstr ""
"这个选项在 ``manage.py`` 中是不必要的，因为它默认使用当前项目中的 ``settings."
"py``。"

msgid ""
"Displays a full stack trace when a :exc:`~django.core.management."
"CommandError` is raised. By default, ``django-admin`` will show an error "
"message when a ``CommandError`` occurs and a full stack trace for any other "
"exception."
msgstr ""
"当发生 :exc:`~django.core.management.CommandError` 时，显示完整的堆栈跟踪。默"
"认情况下，``django-admin`` 将在发生 ``CommandError`` 时显示一个错误信息，并对"
"任何其他异常显示一个完整的堆栈跟踪。"

msgid "This option is ignored by :djadmin:`runserver`."
msgstr "这个选项被 :djadmin:`runserver` 忽略。"

msgid ""
"Specifies the amount of notification and debug information that a command "
"should print to the console."
msgstr "指定命令应打印到控制台的通知和调试信息的数量。"

msgid "``0`` means no output."
msgstr "``0`` 表示没有输出。"

msgid "``1`` means normal output (default)."
msgstr "``1`` 表示正常输出（默认）。"

msgid "``2`` means verbose output."
msgstr "``2`` 表示详细输出。"

msgid "``3`` means *very* verbose output."
msgstr "``3`` 表示 *非常* 详细输出。"

msgid ""
"Disables colorized command output.  Some commands format their output to be "
"colorized. For example, errors will be printed to the console in red and SQL "
"statements will be syntax highlighted."
msgstr ""
"禁用彩色化的命令输出。 有些命令会将其输出格式化为彩色。例如，错误将以红色打印"
"到控制台，SQL 语句将以语法高亮显示。"

msgid ""
"Forces colorization of the command output if it would otherwise be disabled "
"as discussed in :ref:`syntax-coloring`. For example, you may want to pipe "
"colored output to another command."
msgstr ""
"强制对命令输出进行着色，如果不这样做的话，就会像 :ref:`syntax-coloring` 中所"
"讨论的那样被禁用。例如，你可能希望将彩色输出管道到另一个命令。"

msgid ""
"Skips running system checks prior to running the command. This option is "
"only available if the :attr:`~django.core.management.BaseCommand."
"requires_system_checks` command attribute is not an empty list or tuple."
msgstr ""
"在运行命令之前，跳过运行系统检查。这个选项只有在 :attr:`~django.core."
"management.BaseCommand.required_system_checks` 命令属性不是一个空列表或元组时"
"才可用。"

msgid "Extra niceties"
msgstr "额外的细节"

msgid "Syntax coloring"
msgstr "语法着色"

msgid ""
"The ``django-admin`` / ``manage.py`` commands will use pretty color-coded "
"output if your terminal supports ANSI-colored output. It won't use the color "
"codes if you're piping the command's output to another program unless the :"
"option:`--force-color` option is used."
msgstr ""
"``django-admin`` ／ ``manage.py`` 命令会使用漂亮的彩色编码输出，如果你的终端"
"支持 ANSI 彩色输出的话。如果你把命令的输出用管道传送到另一个程序，它不会使用"
"颜色代码，除非使用 :option:`--force-color` 选项。"

msgid "Windows support"
msgstr "Windows 支持"

msgid ""
"On Windows 10, the `Windows Terminal`_ application, `VS Code`_, and "
"PowerShell (where virtual terminal processing is enabled) allow colored "
"output, and are supported by default."
msgstr ""
"在 Windows 10 上，`Windows Terminal`_ 应用程序、`VS Code`_ 和 PowerShell（启"
"用虚拟终端处理）允许彩色输出，并且默认支持。"

msgid ""
"Under Windows, the legacy ``cmd.exe`` native console doesn't support ANSI "
"escape sequences so by default there is no color output. In this case either "
"of two third-party libraries are needed:"
msgstr ""
"在 Windows 下，传统的 ``cmd.exe`` 本地控制台不支持 ANSI 转义序列，所以默认情"
"况下没有彩色输出。在这种情况下，需要两个第三方库中的一个："

msgid ""
"Install :pypi:`colorama`, a Python package that translates ANSI color codes "
"into Windows API calls. Django commands will detect its presence and will "
"make use of its services to color output just like on Unix-based platforms. "
"``colorama`` can be installed via pip:"
msgstr ""

msgid ""
"Install `ANSICON`_, a third-party tool that allows ``cmd.exe`` to process "
"ANSI color codes. Django commands will detect its presence and will make use "
"of its services to color output just like on Unix-based platforms."
msgstr ""
"安装 `ANSICON`_ ，一个第三方工具，允许 ``cmd.exe`` 处理 ANSI 颜色代码。"
"Django 命令会检测到它的存在，并利用它的服务为输出着色，就像在基于 Unix 的平台"
"上一样。"

msgid ""
"Other modern terminal environments on Windows, that support terminal colors, "
"but which are not automatically detected as supported by Django, may "
"\"fake\" the installation of ``ANSICON`` by setting the appropriate "
"environmental variable, ``ANSICON=\"on\"``."
msgstr ""
"在 Windows 上的其他现代终端环境，支持终端颜色，但没有被 Django 自动检测到，可"
"以通过设置适当的环境变量 ``ANSICON=\"on\"`` 来 “假装” 安装 ``ANSICON``。"

msgid "Custom colors"
msgstr "自定义颜色"

msgid ""
"The colors used for syntax highlighting can be customized. Django ships with "
"three color palettes:"
msgstr "语法高亮的颜色是可以自定义的。Django 有三种调色板："

msgid ""
"``dark``, suited to terminals that show white text on a black background. "
"This is the default palette."
msgstr "``dark``，适合在黑色背景上显示白色文字的终端。这是默认的调色板。"

msgid ""
"``light``, suited to terminals that show black text on a white background."
msgstr "``light``，适用于白底黑字的终端。"

msgid "``nocolor``, which disables syntax highlighting."
msgstr "``nocolor``，禁用语法高亮。"

msgid ""
"You select a palette by setting a :envvar:`DJANGO_COLORS` environment "
"variable to specify the palette you want to use. For example, to specify the "
"``light`` palette under a Unix or OS/X BASH shell, you would run the "
"following at a command prompt:"
msgstr ""

msgid ""
"You can also customize the colors that are used. Django specifies a number "
"of roles in which color is used:"
msgstr "你也可以自定义使用的颜色。Django 指定了一些使用颜色的角色："

msgid "``error`` - A major error."
msgstr "``error`` - 一个重大错误。"

msgid "``notice`` - A minor error."
msgstr "``notice`` - 一个小错误。"

msgid "``success`` - A success."
msgstr "``success`` - 成功。"

msgid "``warning`` - A warning."
msgstr "``warning`` - 警告。"

msgid "``sql_field`` - The name of a model field in SQL."
msgstr "``sql_field`` - SQL 中模型字段的名称。"

msgid "``sql_coltype`` - The type of a model field in SQL."
msgstr "``sql_coltype`` - SQL 中模型字段的类型。"

msgid "``sql_keyword`` - An SQL keyword."
msgstr "``sql_keyword`` - 一个 SQL 关键字。"

msgid "``sql_table`` - The name of a model in SQL."
msgstr "``sql_table`` - SQL 中的模型名称。"

msgid "``http_info`` - A 1XX HTTP Informational server response."
msgstr "``http_info`` - 一个 1XX 的 HTTP Informational 服务器响应。"

msgid "``http_success`` - A 2XX HTTP Success server response."
msgstr "``http_success`` - 一个 2XX 的 HTTP Success 服务器响应。"

msgid "``http_not_modified`` - A 304 HTTP Not Modified server response."
msgstr "``http_not_modified`` - 一个 304 HTTP Not Modified 服务器响应。"

msgid "``http_redirect`` - A 3XX HTTP Redirect server response other than 304."
msgstr "``http_redirect`` - 一个除 304 之外的 3XX HTTP 重定向服务器响应。"

msgid "``http_not_found`` - A 404 HTTP Not Found server response."
msgstr "``http_not_found`` - 一个 404 HTTP Not Found 服务器响应。"

msgid ""
"``http_bad_request`` - A 4XX HTTP Bad Request server response other than 404."
msgstr ""
"``http_bad_request`` - 一个除了 404 之外的 4XX HTTP Bad Request 服务器响应。"

msgid "``http_server_error`` - A 5XX HTTP Server Error response."
msgstr "``http_server_error`` - 5XX HTTP 服务器错误响应。"

msgid "``migrate_heading`` - A heading in a migrations management command."
msgstr "``migrate_heading`` - 迁移管理命令中的标题。"

msgid "``migrate_label`` - A migration name."
msgstr "``migrate_label`` - 迁移名称。"

msgid ""
"Each of these roles can be assigned a specific foreground and background "
"color, from the following list:"
msgstr "这些角色中的每一个都可以从以下列表中指定特定的前景和背景颜色："

msgid "``black``"
msgstr "``black``"

msgid "``red``"
msgstr "``red``"

msgid "``green``"
msgstr "``green``"

msgid "``yellow``"
msgstr "``yellow``"

msgid "``blue``"
msgstr "``blue``"

msgid "``magenta``"
msgstr "``magenta``"

msgid "``cyan``"
msgstr "``cyan``"

msgid "``white``"
msgstr "``white``"

msgid ""
"Each of these colors can then be modified by using the following display "
"options:"
msgstr "然后可以通过使用以下显示选项来修改这些颜色："

msgid "``bold``"
msgstr "``bold``"

msgid "``underscore``"
msgstr "``underscore``"

msgid "``blink``"
msgstr "``blink``"

msgid "``reverse``"
msgstr "``reverse``"

msgid "``conceal``"
msgstr "``conceal``"

msgid "A color specification follows one of the following patterns:"
msgstr "颜色规格遵循以下模式之一："

msgid "``role=fg``"
msgstr "``role=fg``"

msgid "``role=fg/bg``"
msgstr "``role=fg/bg``"

msgid "``role=fg,option,option``"
msgstr "``role=fg,option,option``"

msgid "``role=fg/bg,option,option``"
msgstr "``role=fg/bg,option,option``"

msgid ""
"where ``role`` is the name of a valid color role, ``fg`` is the foreground "
"color, ``bg`` is the background color and each ``option`` is one of the "
"color modifying options. Multiple color specifications are then separated by "
"a semicolon. For example:"
msgstr ""

msgid ""
"would specify that errors be displayed using blinking yellow on blue, and "
"notices displayed using magenta. All other color roles would be left "
"uncolored."
msgstr ""
"将指定使用蓝色上闪烁的黄色显示错误，使用洋红色显示通知。所有其他颜色角色将不"
"着色。"

msgid ""
"Colors can also be specified by extending a base palette. If you put a "
"palette name in a color specification, all the colors implied by that "
"palette will be loaded. So:"
msgstr ""

msgid ""
"would specify the use of all the colors in the light color palette, *except* "
"for the colors for errors and notices which would be overridden as specified."
msgstr ""
"将指定使用浅色调色板中的所有颜色，*除了* 错误和通知的颜色，这些颜色将被覆盖。"

msgid "Bash completion"
msgstr "Bash 补全"

msgid ""
"If you use the Bash shell, consider installing the Django bash completion "
"script, which lives in :source:`extras/django_bash_completion` in the Django "
"source distribution. It enables tab-completion of ``django-admin`` and "
"``manage.py`` commands, so you can, for instance..."
msgstr ""

msgid "Type ``django-admin``."
msgstr "输入 ``django-admin``。"

msgid "Press [TAB] to see all available options."
msgstr "按 [TAB] 查看所有可用选项。"

msgid ""
"Type ``sql``, then [TAB], to see all available options whose names start "
"with ``sql``."
msgstr "输入 ``sql``，然后输入 [TAB]，查看所有名称以 ``sql`` 开头的可用选项。"

msgid ""
"See :doc:`/howto/custom-management-commands` for how to add customized "
"actions."
msgstr ""
"关于如何添加自定义动作，请参见 :doc:`/howto/custom-management-commands`。"

msgid "Black formatting"
msgstr ""

msgid ""
"The Python files created by :djadmin:`startproject`, :djadmin:`startapp`, :"
"djadmin:`optimizemigration`, :djadmin:`makemigrations`, and :djadmin:"
"`squashmigrations` are formatted using the ``black`` command if it is "
"present on your ``PATH``."
msgstr ""

msgid ""
"If you have ``black`` globally installed, but do not wish it used for the "
"current project, you can set the ``PATH`` explicitly:"
msgstr ""

msgid ""
"For commands using ``stdout`` you can pipe the output to ``black`` if needed:"
msgstr ""

msgid "Running management commands from your code"
msgstr "从你的代码中运行管理命令"

msgid "To call a management command from code use ``call_command``."
msgstr "要从代码中调用管理命令，使用 ``call_command``。"

msgid ""
"the name of the command to call or a command object. Passing the name is "
"preferred unless the object is required for testing."
msgstr ""
"要调用的命令名称或命令对象的名称。除非测试时需要该对象，否则最好传递名称。"

msgid "``*args``"
msgstr "``*args``"

msgid ""
"a list of arguments accepted by the command. Arguments are passed to the "
"argument parser, so you can use the same style as you would on the command "
"line. For example, ``call_command('flush', '--verbosity=0')``."
msgstr ""
"命令接受的参数列表。参数被传递给参数解析器，所以你可以使用与命令行相同的风"
"格。例如，``call_command('flush', '--verbosity=0')``。"

msgid "``**options``"
msgstr "``**options``"

msgid ""
"named options accepted on the command-line. Options are passed to the "
"command without triggering the argument parser, which means you'll need to "
"pass the correct type. For example, ``call_command('flush', verbosity=0)`` "
"(zero must be an integer rather than a string)."
msgstr ""
"在命令行中接受的命名选项。选项传递给命令时不会触发参数解析器，这意味着你需要"
"传递正确的类型。例如，``call_command('flush', verbosity=0)`` （0 必须是一个整"
"数而不是字符串）。"

msgid ""
"Note that command options that take no arguments are passed as keywords with "
"``True`` or ``False``, as you can see with the ``interactive`` option above."
msgstr ""
"需要注意的是，没有参数的命令选项是以关键字 ``True`` 或 ``False`` 的形式传递"
"的，如上面的 ``interactive`` 选项。"

msgid ""
"Named arguments can be passed by using either one of the following syntaxes::"
msgstr "命名的参数可以通过使用以下任何一种语法来传递："

msgid ""
"Some command options have different names when using ``call_command()`` "
"instead of ``django-admin`` or ``manage.py``. For example, ``django-admin "
"createsuperuser --no-input`` translates to ``call_command('createsuperuser', "
"interactive=False)``. To find what keyword argument name to use for "
"``call_command()``, check the command's source code for the ``dest`` "
"argument passed to ``parser.add_argument()``."
msgstr ""
"当使用 ``call_command()`` 而不是 ``django-admin`` 或 ``manage.py`` 时，一些命"
"令选项有不同的名称。例如，``django-admin createsuperuser --no-input`` 翻译成 "
"``call_command('creasuperuser', interactive=False)``。要找到 "
"``call_command()`` 的关键字参数名，请检查命令的源代码中传递给 ``parser."
"add_argument()`` 的 ``dest`` 参数。"

msgid "Command options which take multiple options are passed a list::"
msgstr "取多个选项的命令选项会通过一个列表："

msgid ""
"The return value of the ``call_command()`` function is the same as the "
"return value of the ``handle()`` method of the command."
msgstr ""
"``call_command()`` 函数的返回值与命令的 ``handle()`` 方法的返回值相同。"

msgid "Output redirection"
msgstr "输出重定向"

msgid ""
"Note that you can redirect standard output and error streams as all commands "
"support the ``stdout`` and ``stderr`` options. For example, you could write::"
msgstr ""
"注意，你可以重定向标准输出和错误流，因为所有命令都支持 ``stdout`` 和 "
"``stderr`` 选项。例如，你可以写："

msgid "Django Exceptions"
msgstr "Django 异常"

msgid ""
"Django raises some of its own exceptions as well as standard Python "
"exceptions."
msgstr "Django 会引发一些自己的异常以及标准的 Python 异常。"

msgid "Django Core Exceptions"
msgstr "Django 核心异常"

msgid ""
"Django core exception classes are defined in ``django.core.exceptions``."
msgstr "Django 核心异常类定义在 ``django.core.exceptions`` 中。"

msgid "``AppRegistryNotReady``"
msgstr "``AppRegistryNotReady``"

msgid ""
"This exception is raised when attempting to use models before the :ref:`app "
"loading process <app-loading-process>`, which initializes the ORM, is "
"complete."
msgstr ""
"当在初始化 ORM 的 :ref:`应用加载过程 <app-loading-process>` 完成之前，试图使"
"用模型时，就会引发这个异常。"

msgid "``ObjectDoesNotExist``"
msgstr "``ObjectDoesNotExist``"

msgid ""
"The base class for :exc:`Model.DoesNotExist <django.db.models.Model."
"DoesNotExist>` exceptions. A ``try/except`` for ``ObjectDoesNotExist`` will "
"catch :exc:`~django.db.models.Model.DoesNotExist` exceptions for all models."
msgstr ""
":exc:`Model.DoesNotExist <django.db.models.Model.DoesNotExist>` 异常的基类。"
"一个对 ``ObjectDoesNotExist`` 的 ``try/except`` 将捕获对所有模型的 :exc:"
"`~django.db.models.Model.DoesNotExist` 异常。"

msgid "See :meth:`~django.db.models.query.QuerySet.get()`."
msgstr "参见 :meth:`~django.db.models.query.QuerySet.get()`。"

msgid "``EmptyResultSet``"
msgstr "``EmptyResultSet``"

msgid ""
"``EmptyResultSet`` may be raised during query generation if a query won't "
"return any results. Most Django projects won't encounter this exception, but "
"it might be useful for implementing custom lookups and expressions."
msgstr ""
"如果一个查询不返回任何结果，那么 ``EmptyResultSet`` 可能会在生成查询的过程中"
"被触发。大多数 Django 项目不会遇到这个异常，但它可能对实现自定义查找和表达式"
"很有用。"

msgid "``FullResultSet``"
msgstr ""

msgid ""
"``FullResultSet`` may be raised during query generation if a query will "
"match everything. Most Django projects won't encounter this exception, but "
"it might be useful for implementing custom lookups and expressions."
msgstr ""

msgid "``FieldDoesNotExist``"
msgstr "``FieldDoesNotExist``"

msgid ""
"The ``FieldDoesNotExist`` exception is raised by a model's ``_meta."
"get_field()`` method when the requested field does not exist on the model or "
"on the model's parents."
msgstr ""
"当请求的字段在模型或模型的父类上不存在时，模型的 ``_meta.get_field()`` 方法会"
"引发 ``FieldDoesNotExist`` 异常。"

msgid "``MultipleObjectsReturned``"
msgstr "``MultipleObjectsReturned``"

msgid ""
"The base class for :exc:`Model.MultipleObjectsReturned <django.db.models."
"Model.MultipleObjectsReturned>` exceptions. A ``try/except`` for "
"``MultipleObjectsReturned`` will catch :exc:`~django.db.models.Model."
"MultipleObjectsReturned` exceptions for all models."
msgstr ""
":exc:`Model.MultipleObjectsReturned <django.db.models.Model."
"MultipleObjectsReturned>` 异常的基类。一个对 ``MultipleObjectsReturned`` 的 "
"``try/except`` 将捕获对所有模型的 :exc:`~django.db.models.Model."
"MultipleObjectsReturned` 异常。"

msgid "``SuspiciousOperation``"
msgstr "``SuspiciousOperation``"

msgid ""
"The :exc:`SuspiciousOperation` exception is raised when a user has performed "
"an operation that should be considered suspicious from a security "
"perspective, such as tampering with a session cookie. Subclasses of "
"``SuspiciousOperation`` include:"
msgstr ""
":exc:`SuspiciousOperation` 异常是在用户进行了从安全角度看应该被认为是可疑的操"
"作时产生的，例如篡改会话 cookie。``SuspiciousOperation`` 的子类包括："

msgid "``DisallowedHost``"
msgstr "``DisallowedHost``"

msgid "``DisallowedModelAdminLookup``"
msgstr "``DisallowedModelAdminLookup``"

msgid "``DisallowedModelAdminToField``"
msgstr "``DisallowedModelAdminToField``"

msgid "``DisallowedRedirect``"
msgstr "``DisallowedRedirect``"

msgid "``InvalidSessionKey``"
msgstr "``InvalidSessionKey``"

msgid "``RequestDataTooBig``"
msgstr "``RequestDataTooBig``"

msgid "``SuspiciousFileOperation``"
msgstr "``SuspiciousFileOperation``"

msgid "``SuspiciousMultipartForm``"
msgstr "``SuspiciousMultipartForm``"

msgid "``SuspiciousSession``"
msgstr "``SuspiciousSession``"

msgid "``TooManyFieldsSent``"
msgstr "``TooManyFieldsSent``"

msgid "``TooManyFilesSent``"
msgstr ""

msgid ""
"If a ``SuspiciousOperation`` exception reaches the ASGI/WSGI handler level "
"it is logged at the ``Error`` level and results in a :class:`~django.http."
"HttpResponseBadRequest`. See the :doc:`logging documentation </topics/"
"logging/>` for more information."
msgstr ""
"如果一个 ``SuspiciousOperation`` 异常达到 ASGI／WSGI 处理程序级别，它将被记录"
"在 ``Error`` 级别，并导致一个 :class:`~django.http.HttpResponseBadRequest`。"
"更多信息请参见 :doc:`日志文档 `。"

msgid "``SuspiciousOperation`` is raised when too many files are submitted."
msgstr ""

msgid "``PermissionDenied``"
msgstr "``PermissionDenied``"

msgid ""
"The :exc:`PermissionDenied` exception is raised when a user does not have "
"permission to perform the action requested."
msgstr ":exc:`PermissionDenied` 异常是在用户没有权限执行所请求的操作时发生的。"

msgid "``ViewDoesNotExist``"
msgstr "``ViewDoesNotExist``"

msgid ""
"The :exc:`ViewDoesNotExist` exception is raised by :mod:`django.urls` when a "
"requested view does not exist."
msgstr ""
"当请求的视图不存在时， :exc:`ViewDoesNotExist` 异常由 :mod:`django.urls` 引"
"发。"

msgid "``MiddlewareNotUsed``"
msgstr "``MiddlewareNotUsed``"

msgid ""
"The :exc:`MiddlewareNotUsed` exception is raised when a middleware is not "
"used in the server configuration."
msgstr "当服务器配置中没有使用中间件时，会引发 :exc:`MiddlewareNotUsed` 异常。"

msgid "``ImproperlyConfigured``"
msgstr "``ImproperlyConfigured``"

msgid ""
"The :exc:`ImproperlyConfigured` exception is raised when Django is somehow "
"improperly configured -- for example, if a value in ``settings.py`` is "
"incorrect or unparseable."
msgstr ""
":exc:`ImproperlyConfigured` 异常是在 Django 配置不当的情况下产生的，例如，"
"``settings.py`` 中的一个值不正确或无法解析。"

msgid "``FieldError``"
msgstr "``FieldError``"

msgid ""
"The :exc:`FieldError` exception is raised when there is a problem with a "
"model field. This can happen for several reasons:"
msgstr ""
":exc:`FieldError` 异常是在模型字段出现问题时引发的。发生这种情况有几种原因："

msgid ""
"A field in a model clashes with a field of the same name from an abstract "
"base class"
msgstr "模型中的一个字段与抽象基类中的同名字段发生冲突"

msgid "An infinite loop is caused by ordering"
msgstr "无限循环是由排序引起的"

msgid "A keyword cannot be parsed from the filter parameters"
msgstr "不能从过滤器参数中解析关键字"

msgid "A field cannot be determined from a keyword in the query parameters"
msgstr "一个字段不能通过查询参数中的关键字来确定"

msgid "A join is not permitted on the specified field"
msgstr "不允许在指定字段上进行 join"

msgid "A field name is invalid"
msgstr "字段名无效"

msgid "A query contains invalid order_by arguments"
msgstr "查询包含无效的 order_by 参数"

msgid "``ValidationError``"
msgstr "``ValidationError``"

msgid ""
"The :exc:`ValidationError` exception is raised when data fails form or model "
"field validation. For more information about validation, see :doc:`Form and "
"Field Validation </ref/forms/validation>`, :ref:`Model Field Validation "
"<validating-objects>` and the :doc:`Validator Reference </ref/validators>`."
msgstr ""
"当数据未能通过表单或模型字段验证时，会引发 :exc:`ValidationError` 异常。关于"
"验证的更多信息，请参见 :doc:`表单和字段验证 </ref/forms/validation>`、 :ref:`"
"模型字段验证 <validating-objects>` 和 :doc:`验证器参考 </ref/validators>`。"

msgid "``NON_FIELD_ERRORS``"
msgstr "``NON_FIELD_ERRORS``"

msgid ""
"``ValidationError``\\s that don't belong to a particular field in a form or "
"model are classified as ``NON_FIELD_ERRORS``. This constant is used as a key "
"in dictionaries that otherwise map fields to their respective list of errors."
msgstr ""
"``ValidationError`` 不属于表格或模型中某一特定字段的错误被归类为 "
"``NON_FIELD_ERRORS``。这个常量在字典中被用作键，否则就会将字段映射到它们各自"
"的错误列表中。"

msgid "``BadRequest``"
msgstr "``BadRequest``"

msgid ""
"The :exc:`BadRequest` exception is raised when the request cannot be "
"processed due to a client error. If a ``BadRequest`` exception reaches the "
"ASGI/WSGI handler level it results in a :class:`~django.http."
"HttpResponseBadRequest`."
msgstr ""
":exc:`BadRequest` 异常是在请求由于客户端错误而不能被处理时引发的。如果一个 "
"``BadRequest`` 异常到达 ASGI／WSGI 处理程序级别，它会导致一个 :class:"
"`~django.http.HttpResponseBadRequest`。"

msgid "``RequestAborted``"
msgstr "``RequestAborted``"

msgid ""
"The :exc:`RequestAborted` exception is raised when an HTTP body being read "
"in by the handler is cut off midstream and the client connection closes, or "
"when the client does not send data and hits a timeout where the server "
"closes the connection."
msgstr ""
":exc:`RequestAborted` 异常是在处理程序正在读入的 HTTP 主体被中途切断和客户端"
"连接关闭时，或者在客户端没有发送数据和遇到服务器关闭连接的超时时引发的。"

msgid ""
"It is internal to the HTTP handler modules and you are unlikely to see it "
"elsewhere. If you are modifying HTTP handling code, you should raise this "
"when you encounter an aborted request to make sure the socket is closed "
"cleanly."
msgstr ""
"它是 HTTP 处理模块内部的，你不太可能在其他地方看到它。如果你正在修改 HTTP 处"
"理代码，你应该在遇到一个中止的请求时提出这个问题，以确保 socket 被干净地关"
"闭。"

msgid "``SynchronousOnlyOperation``"
msgstr "``SynchronousOnlyOperation``"

msgid ""
"The :exc:`SynchronousOnlyOperation` exception is raised when code that is "
"only allowed in synchronous Python code is called from an asynchronous "
"context (a thread with a running asynchronous event loop). These parts of "
"Django are generally heavily reliant on thread-safety to function and don't "
"work correctly under coroutines sharing the same thread."
msgstr ""
"当只有在同步 Python 代码中才允许的代码被从异步上下文（一个有正在运行的异步事"
"件循环的线程）中调用时，会引发 :exc:`SynchronousOnlyOperation` 异常。Django "
"的这些部分一般都严重依赖线程安全来运行，在协程共享同一个线程的情况下无法正常"
"工作。"

msgid ""
"If you are trying to call code that is synchronous-only from an asynchronous "
"thread, then create a synchronous thread and call it in that. You can "
"accomplish this is with :func:`asgiref.sync.sync_to_async`."
msgstr ""
"如果你想从一个异步线程中调用只用于同步的代码，那么就创建一个同步线程并在该线"
"程中调用它。你可以通过 :func:`asgiref.sync.sync_to_async` 来实现。"

msgid "URL Resolver exceptions"
msgstr "URL 解析器异常"

msgid "URL Resolver exceptions are defined in ``django.urls``."
msgstr "URL 解析器异常定义在 ``django.urls`` 中。"

msgid "``Resolver404``"
msgstr "``Resolver404``"

msgid ""
"The :exc:`Resolver404` exception is raised by :func:`~django.urls.resolve()` "
"if the path passed to ``resolve()`` doesn't map to a view. It's a subclass "
"of :class:`django.http.Http404`."
msgstr ""
":exc:`~django.urls.resolve()` 如果传递给 ``resolve()`` 的路径没有映射到视图，"
"那么 :exc:`Resolver404` 异常就会被 :func:`~django.urls.resolve()` 引发。这"
"是 :class:`django.http.Http404` 的一个子类。"

msgid "``NoReverseMatch``"
msgstr "``NoReverseMatch``"

msgid ""
"The :exc:`NoReverseMatch` exception is raised by :mod:`django.urls` when a "
"matching URL in your URLconf cannot be identified based on the parameters "
"supplied."
msgstr ""
":exc:`NoReverseMatch` 异常是由 :mod:`django.urls` 引发的，当你的 URLconf 中不"
"能根据提供的参数识别出一个匹配的 URL 时会引发。"

msgid "Database Exceptions"
msgstr "数据库异常"

msgid "Database exceptions may be imported from ``django.db``."
msgstr "数据库异常可以从 ``django.db`` 导入。"

msgid ""
"Django wraps the standard database exceptions so that your Django code has a "
"guaranteed common implementation of these classes."
msgstr ""
"Django 封装了标准的数据库异常，这样你的 Django 代码就可以保证这些类的通用实"
"现。"

msgid ""
"The Django wrappers for database exceptions behave exactly the same as the "
"underlying database exceptions. See :pep:`249`, the Python Database API "
"Specification v2.0, for further information."
msgstr ""
"数据库异常的 Django 包装器的行为与底层数据库异常完全相同。更多信息请参见 :"
"pep:`249`，Python 数据库 API 规范 v2.0。"

msgid ""
"As per :pep:`3134`, a ``__cause__`` attribute is set with the original "
"(underlying) database exception, allowing access to any additional "
"information provided."
msgstr ""
"根据 :pep:`3134`，``__cause__`` 属性与原始（基础）数据库异常一起设置，允许访"
"问提供的任何附加信息。"

msgid ""
"Raised to prevent deletion of referenced objects when using :attr:`django.db."
"models.PROTECT`. :exc:`models.ProtectedError` is a subclass of :exc:"
"`IntegrityError`."
msgstr ""
"当使用 :attr:`django.db.models.PROTECT` 时，为了防止删除引用对象而引发的 :"
"exc:`models.ProtectedError` 是 :exc:`IntegrityError` 的子类。"

msgid ""
"Raised to prevent deletion of referenced objects when using :attr:`django.db."
"models.RESTRICT`. :exc:`models.RestrictedError` is a subclass of :exc:"
"`IntegrityError`."
msgstr ""
"当使用 :attr:`django.db.models.RESTRICT` 时，为了防止删除引用对象而引发的 :"
"exc:`models.RestrictedError` 是 :exc:`IntegrityError` 的子类。"

msgid "HTTP Exceptions"
msgstr "HTTP 异常"

msgid "HTTP exceptions may be imported from ``django.http``."
msgstr "HTTP 异常可以从 ``django.http`` 导入。"

msgid "``UnreadablePostError``"
msgstr "``UnreadablePostError``"

msgid ":exc:`UnreadablePostError` is raised when a user cancels an upload."
msgstr ":exc:`UnreadablePostError` 在用户取消上传时引发。"

msgid "Sessions Exceptions"
msgstr "会话异常"

msgid ""
"Sessions exceptions are defined in ``django.contrib.sessions.exceptions``."
msgstr "会话异常在 ``django.contrib.session.exceptions`` 中定义。"

msgid "``SessionInterrupted``"
msgstr "``SessionInterrupted``"

msgid ""
":exc:`SessionInterrupted` is raised when a session is destroyed in a "
"concurrent request. It's a subclass of :exc:`~django.core.exceptions."
"BadRequest`."
msgstr ""
":exc:`SessionInterrupted` 是当一个会话在一个并发请求中被破坏时引发的。它是 :"
"exc:`~django.core.exceptions.BadRequest` 的一个子类。"

msgid "Transaction Exceptions"
msgstr "事务异常"

msgid "Transaction exceptions are defined in ``django.db.transaction``."
msgstr "事务异常在 ``django.db.transaction`` 中定义。"

msgid "``TransactionManagementError``"
msgstr "``TransactionManagementError``"

msgid ""
":exc:`TransactionManagementError` is raised for any and all problems related "
"to database transactions."
msgstr ""
":exc:`TransactionManagementError` 是针对与数据库事务有关的任何和所有问题提出"
"的。"

msgid "Testing Framework Exceptions"
msgstr "测试框架异常"

msgid "Exceptions provided by the ``django.test`` package."
msgstr "``django.test`` 包提供的异常。"

msgid "``RedirectCycleError``"
msgstr "``RedirectCycleError``"

msgid ""
":exc:`~client.RedirectCycleError` is raised when the test client detects a "
"loop or an overly long chain of redirects."
msgstr ""
":exc:`~client.RedirectCycleError` 当测试客户端检测到一个循环或过长的重定向链"
"时，就会引发。"

msgid "Python Exceptions"
msgstr "Python 异常"

msgid ""
"Django raises built-in Python exceptions when appropriate as well. See the "
"Python documentation for further information on the :ref:`bltin-exceptions`."
msgstr ""
"Django 也会在适当的时候引发内置的 Python 异常。更多关于 :ref:`bltin-"
"exceptions` 的信息请参见 Python 文档。"

msgid "The ``File`` object"
msgstr "``File`` 对象"

msgid ""
"The :mod:`django.core.files` module and its submodules contain built-in "
"classes for basic file handling in Django."
msgstr ""
":mod:`django.core.files` 模块及其子模块包含了 Django 中基本的文件处理的内置"
"类。"

msgid "The ``File`` class"
msgstr "``File`` 类"

msgid ""
"The :class:`File` class is a thin wrapper around a Python :py:term:`file "
"object` with some Django-specific additions. Internally, Django uses this "
"class when it needs to represent a file."
msgstr ""
":class:`File` 类是对 Python :py:term:`file object` 的一个简单的封装，并增加了"
"一些 Django 特有的功能。在内部，当 Django 需要表示一个文件时，会使用这个类。"

msgid ":class:`File` objects have the following attributes and methods:"
msgstr ":class:`File` 对象具有以下属性和方法："

msgid ""
"The name of the file including the relative path from :setting:`MEDIA_ROOT`."
msgstr "文件名，包括 :setting:`MEDIA_ROOT` 的相对路径。"

msgid "The size of the file in bytes."
msgstr "文件的大小，单位为字节。"

msgid "The underlying :py:term:`file object` that this class wraps."
msgstr "该类封装的底层 :py:term:`file object`。"

msgid "Be careful with this attribute in subclasses."
msgstr "在子类中要小心这个属性。"

msgid ""
"Some subclasses of :class:`File`, including :class:`~django.core.files.base."
"ContentFile` and :class:`~django.db.models.fields.files.FieldFile`, may "
"replace this attribute with an object other than a Python :py:term:`file "
"object`. In these cases, this attribute may itself be a :class:`File` "
"subclass (and not necessarily the same subclass). Whenever possible, use the "
"attributes and methods of the subclass itself rather than the those of the "
"subclass's ``file`` attribute."
msgstr ""
"一些 :class:`File` 的子类，包括 :class:`~django.core.files.base.ContentFile` "
"和 :class:`~django.db.models.fields.fields.files.FieldFile`，可以用 Python :"
"py:term:`file object` 以外的对象来替换这个属性。在这些情况下，这个属性本身可"
"能是一个 :class:`File` 子类（而且不一定是同一个子类）。只要有可能，就使用子类"
"本身的属性和方法，而不是子类的 ``file`` 属性。"

msgid "The read/write mode for the file."
msgstr "文件的读／写模式。"

msgid ""
"Open or reopen the file (which also does ``File.seek(0)``). The ``mode`` "
"argument allows the same values as Python's built-in :func:`python:open()`."
msgstr ""
"打开或重新打开文件（它也做 ``File.seek(0)``）。``mode`` 参数允许的值与 "
"Python 内置的 :func:`python:open()` 相同。"

msgid ""
"When reopening a file, ``mode`` will override whatever mode the file was "
"originally opened with; ``None`` means to reopen with the original mode."
msgstr ""
"当重新打开一个文件时，``mode`` 将覆盖文件原来打开的任何模式；``None`` 表示用"
"原来的模式重新打开。"

msgid "It can be used as a context manager, e.g. ``with file.open() as f:``."
msgstr "它可以作为一个上下文管理器使用，例如 ``with file.open() as f:``。"

msgid "Iterate over the file yielding one line at a time."
msgstr "在文件上迭代，每次只产生一行。"

msgid ""
"Iterate over the file yielding \"chunks\" of a given size. ``chunk_size`` "
"defaults to 64 KB."
msgstr "对文件进行迭代，产生给定大小的“块”。``chunk_size`` 默认为 64KB。"

msgid ""
"This is especially useful with very large files since it allows them to be "
"streamed off disk and avoids storing the whole file in memory."
msgstr ""
"这对非常大的文件特别有用，因为它允许将它们从磁盘上串联起来，避免将整个文件存"
"储在内存中。"

msgid ""
"Returns ``True`` if the file is large enough to require multiple chunks to "
"access all of its content give some ``chunk_size``."
msgstr "如果文件足够大，需要多个分块才能访问其所有内容，则返回 ``True``。"

msgid "Close the file."
msgstr "关闭文件。"

msgid ""
"In addition to the listed methods, :class:`~django.core.files.File` exposes "
"the following attributes and methods of its ``file`` object: ``encoding``, "
"``fileno``, ``flush``, ``isatty``, ``newlines``, ``read``, ``readinto``, "
"``readline``, ``readlines``, ``seek``, ``tell``, ``truncate``, ``write``, "
"``writelines``, ``readable()``, ``writable()``, and ``seekable()``."
msgstr ""
"除了列出的方法外，:class:`~django.core.files.File` 还暴露了它的 ``file`` 对象"
"的以下属性和方法：``encoding``、``fileno``、``flush``、``isat``。"
"``encoding``、``fileno``、``flush``、``isatty``、``newlines``、``read``、"
"``readinto``、``readline``、``readlines``、``seek``、``tell``、``truncate``、"
"``write``、``writelines``、``readable()``、``writable()`` 和 ``seekable()``。"

msgid "The ``ContentFile`` class"
msgstr "``ContentFile`` 类"

msgid ""
"The ``ContentFile`` class inherits from :class:`~django.core.files.File`, "
"but unlike :class:`~django.core.files.File` it operates on string content "
"(bytes also supported), rather than an actual file. For example::"
msgstr ""
"``ContentFile`` 类继承自 :class:`~django.core.files.File`，但与 :class:"
"`~django.core.files.File` 不同的是，它操作的是字符串内容（也支持字节），而不"
"是实际的文件。例如："

msgid "The ``ImageFile`` class"
msgstr "``ImageFile`` 类"

msgid ""
"Django provides a built-in class specifically for images. :class:`django."
"core.files.images.ImageFile` inherits all the attributes and methods of :"
"class:`~django.core.files.File`, and additionally provides the following:"
msgstr ""
"Django 提供了一个专门针对图片的内置类。 :class:`django.core.files.images."
"ImageFile` 继承了 :class:`~django.core.files.File` 的所有属性和方法，并额外提"
"供了以下内容。"

msgid "Width of the image in pixels."
msgstr "图像的宽度，单位为像素。"

msgid "Height of the image in pixels."
msgstr "图像的高度，单位为像素。"

msgid "Additional methods on files attached to objects"
msgstr "附加在对象上的文件方法"

msgid ""
"Any :class:`File` that is associated with an object (as with ``Car.photo``, "
"below) will also have a couple of extra methods:"
msgstr ""
"任何与对象相关联的 :class:`File` （如下面的 ``Car.photo``）也会有几个额外的方"
"法："

msgid ""
"Saves a new file with the file name and contents provided. This will not "
"replace the existing file, but will create a new file and update the object "
"to point to it. If ``save`` is ``True``, the model's ``save()`` method will "
"be called once the file is saved. That is, these two lines:"
msgstr ""

msgid "are equivalent to:"
msgstr ""

msgid ""
"Note that the ``content`` argument must be an instance of either :class:"
"`File` or of a subclass of :class:`File`, such as :class:`~django.core.files."
"base.ContentFile`."
msgstr ""
"请注意，``content`` 参数必须是 :class:`File` 或 :class:`File` 的子类的实例，"
"如 :class:`~django.core.files.base.ContentFile`。"

msgid ""
"Removes the file from the model instance and deletes the underlying file. If "
"``save`` is ``True``, the model's ``save()`` method will be called once the "
"file is deleted."
msgstr ""
"从模型实例中删除文件并删除底层文件。如果 ``save`` 是 ``True``，一旦文件被删"
"除，模型的 ``save()`` 方法将被调用。"

msgid "File handling"
msgstr "文件处理"

msgid "File storage API"
msgstr "文件存储 API"

msgid "Getting the default storage class"
msgstr ""

msgid "Django provides convenient ways to access the default storage class:"
msgstr ""

msgid "Storage instances as defined by :setting:`STORAGES`."
msgstr ""

msgid ""
":class:`~django.core.files.storage.DefaultStorage` provides lazy access to "
"the default storage system as defined by ``default`` key in :setting:"
"`STORAGES`. :class:`DefaultStorage` uses :data:`~django.core.files.storage."
"storages` internally."
msgstr ""

msgid ""
":data:`~django.core.files.storage.default_storage` is an instance of the :"
"class:`~django.core.files.storage.DefaultStorage`."
msgstr ""

msgid "Returns a class or module which implements the storage API."
msgstr "返回一个实现存储 API 的类或模块。"

msgid ""
"When called without the ``import_path`` parameter ``get_storage_class`` will "
"return the default storage system as defined by ``default`` key in :setting:"
"`STORAGES`. If ``import_path`` is provided, ``get_storage_class`` will "
"attempt to import the class or module from the given path and will return it "
"if successful. An exception will be raised if the import is unsuccessful."
msgstr ""

msgid ""
"The ``get_storage_class()`` function is deprecated. Use :data:`storages` "
"instead"
msgstr ""

msgid "The ``FileSystemStorage`` class"
msgstr "``FileSystemStorage`` 类"

msgid ""
"The :class:`~django.core.files.storage.FileSystemStorage` class implements "
"basic file storage on a local filesystem. It inherits from :class:`~django."
"core.files.storage.Storage` and provides implementations for all the public "
"methods thereof."
msgstr ""
":class:`~django.core.files.storage.FileSystemStorage` 类实现了本地文件系统的"
"基本文件存储。它继承自 :class:`~django.core.files.storage.Storage` 类，并提供"
"了其中所有公开方法的实现。"

msgid ""
"Absolute path to the directory that will hold the files. Defaults to the "
"value of your :setting:`MEDIA_ROOT` setting."
msgstr "存放文件的目录的绝对路径。 默认为你的 :setting:`MEDIA_ROOT` 配置的值。"

msgid ""
"URL that serves the files stored at this location. Defaults to the value of "
"your :setting:`MEDIA_URL` setting."
msgstr ""
"为存储在此位置的文件提供服务的 URL。默认为你的 :setting:`MEDIA_URL` 配置的"
"值。"

msgid ""
"The file system permissions that the file will receive when it is saved. "
"Defaults to :setting:`FILE_UPLOAD_PERMISSIONS`."
msgstr ""
"保存文件时，文件系统将获得的权限。默认为 :setting:`FILE_UPLOAD_PERMISSIONS`。"

msgid ""
"The file system permissions that the directory will receive when it is "
"saved. Defaults to :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS`."
msgstr ""
"保存目录时，该目录将获得的文件系统权限，默认为 :setting:"
"`FILE_UPLOAD_DIRECTORY_PERMISSIONS`。"

msgid ""
"The ``FileSystemStorage.delete()`` method will not raise an exception if the "
"given file name does not exist."
msgstr ""
"如果给定的文件名不存在，``FileSystemStorage.delete()`` 方法不会引发异常。"

msgid ""
"Returns a :class:`~datetime.datetime` of the system's ctime, i.e. :func:`os."
"path.getctime`. On some systems (like Unix), this is the time of the last "
"metadata change, and on others (like Windows), it's the creation time of the "
"file."
msgstr ""
"返回系统 ctime 的 :class:`~datetime.datetime`，即 :func:`os.path.getctime`。"
"在某些系统上（如 Unix），这是最后一次修改元数据的时间，而在其他系统上（如 "
"Windows），这是文件的创建时间。"

msgid "The ``InMemoryStorage`` class"
msgstr ""

msgid ""
"The :class:`~django.core.files.storage.InMemoryStorage` class implements a "
"memory-based file storage. It has no persistence, but can be useful for "
"speeding up tests by avoiding disk access."
msgstr ""

msgid ""
"Absolute path to the directory name assigned to files. Defaults to the value "
"of your :setting:`MEDIA_ROOT` setting."
msgstr ""

msgid ""
"The file system permissions assigned to files, provided for compatibility "
"with ``FileSystemStorage``. Defaults to :setting:`FILE_UPLOAD_PERMISSIONS`."
msgstr ""

msgid ""
"The file system permissions assigned to directories, provided for "
"compatibility with ``FileSystemStorage``. Defaults to :setting:"
"`FILE_UPLOAD_DIRECTORY_PERMISSIONS`."
msgstr ""

msgid "The ``Storage`` class"
msgstr "``Storage`` 类"

msgid ""
"The :class:`~django.core.files.storage.Storage` class provides a "
"standardized API for storing files, along with a set of default behaviors "
"that all other storage systems can inherit or override as necessary."
msgstr ""
":class:`~django.core.files.storage.Storage` 类为存储文件提供了一个标准化的 "
"API，以及一组默认行为，所有其他存储系统可以根据需要继承或覆盖。"

msgid ""
"When methods return naive ``datetime`` objects, the effective timezone used "
"will be the current value of ``os.environ['TZ']``; note that this is usually "
"set from Django's :setting:`TIME_ZONE`."
msgstr ""
"当方法返回未处理的 ``datetime`` 对象时，所使用的有效时区将是 ``os."
"environ['TZ']`` 的当前值；注意，这通常是由 Django 的 :setting:`TIME_ZONE` 设"
"置的。"

msgid ""
"Deletes the file referenced by ``name``. If deletion is not supported on the "
"target storage system this will raise ``NotImplementedError`` instead."
msgstr ""
"删除 ``name`` 引用的文件。如果目标存储系统不支持删除，这将引发 "
"``NotImplementedError``。"

msgid ""
"Returns ``True`` if a file referenced by the given name already exists in "
"the storage system, or ``False`` if the name is available for a new file."
msgstr ""
"如果给定名称所引用的文件已经存在于存储系统中，则返回 ``True``；如果该名称可用"
"于新文件，则返回 ``False``。"

msgid ""
"Returns a :class:`~datetime.datetime` of the last accessed time of the file. "
"For storage systems unable to return the last accessed time this will raise :"
"exc:`NotImplementedError`."
msgstr ""
"返回文件最后访问时间的 :class:`~datetime.datetime`。对于不能返回最后访问时间"
"的存储系统，将引发 :exc:`NotImplementedError`。"

msgid ""
"If :setting:`USE_TZ` is ``True``, returns an aware ``datetime``, otherwise "
"returns a naive ``datetime`` in the local timezone."
msgstr ""
"如果 :setting:`USE_TZ` 为 ``True``，则返回一个处理过的 ``datetime``，否则返回"
"一个当地时区的未处理的 ``datetime``。"

msgid ""
"Returns an alternative filename based on the ``file_root`` and ``file_ext`` "
"parameters, an underscore plus a random 7 character alphanumeric string is "
"appended to the filename before the extension."
msgstr ""
"根据 ``file_root`` 和 ``file_ext`` 参数返回一个替代的文件名，一个下划线加上一"
"个随机的 7 个字符的字母数字字符串被附加到文件名的扩展名之前。"

msgid ""
"Returns a filename based on the ``name`` parameter that's free and available "
"for new content to be written to on the target storage system."
msgstr ""
"返回一个基于 ``name`` 参数的文件名，该文件名在目标存储系统中是空闲的，可供新"
"内容写入。"

msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a "
"free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception will be raised."
msgstr ""
"文件名的长度不会超过 ``max_length``，如果提供的话。如果不能找到一个空闲的唯一"
"文件名，将引发一个 :exc:`SuspiciousFileOperation <django.core.exceptions."
"SuspiciousOperation>` 异常。"

msgid ""
"If a file with ``name`` already exists, :meth:`get_alternative_name` is "
"called to obtain an alternative name."
msgstr ""
"如果一个带有 ``name`` 的文件已经存在，则调用 :meth:`get_alternative_name` 来"
"获得一个替代名称。"

msgid ""
"Returns a :class:`~datetime.datetime` of the creation time of the file. For "
"storage systems unable to return the creation time this will raise :exc:"
"`NotImplementedError`."
msgstr ""
"返回文件的创建时间的 :class:`~datetime.datetime`。对于不能返回创建时间的存储"
"系统，将引发 :exc:`NotImplementedError`。"

msgid ""
"Returns a :class:`~datetime.datetime` of the last modified time of the file. "
"For storage systems unable to return the last modified time this will raise :"
"exc:`NotImplementedError`."
msgstr ""
"返回文件最后修改时间的 :class:`~datetime.datetime`。对于不能返回最后修改时间"
"的存储系统，将引发 :exc:`NotImplementedError`。"

msgid ""
"Returns a filename based on the ``name`` parameter that's suitable for use "
"on the target storage system."
msgstr "根据 ``name`` 参数返回一个适合在目标存储系统中使用的文件名。"

msgid ""
"Validates the ``filename`` by calling :attr:`get_valid_name()` and returns a "
"filename to be passed to the :meth:`save` method."
msgstr ""
"通过调用 :attr:`get_valid_name()` 验证 ``文件名``，并返回一个文件名传给 :"
"meth:`save` 方法。"

msgid ""
"The ``filename`` argument may include a path as returned by :attr:`FileField."
"upload_to <django.db.models.FileField.upload_to>`. In that case, the path "
"won't be passed to :attr:`get_valid_name()` but will be prepended back to "
"the resulting name."
msgstr ""
"``filename`` 参数可能包含 :attr:`FileField.upload_to <django.db.models."
"FileField.upload_to>` 返回的路径。在这种情况下，路径不会被传递给 :attr:"
"`get_valid_name()`，而是会被预输入到结果的名称中。"

msgid ""
"The default implementation uses :mod:`os.path` operations. Override this "
"method if that's not appropriate for your storage."
msgstr "默认实现使用 :mod:`os.path` 操作。如果不适合你的存储，请重写这个方法。"

msgid ""
"Lists the contents of the specified path, returning a 2-tuple of lists; the "
"first item being directories, the second item being files. For storage "
"systems that aren't able to provide such a listing, this will raise a "
"``NotImplementedError`` instead."
msgstr ""
"列出指定路径的内容，返回一个二元元组列表，第一项是目录，第二项是文件。对于不"
"能提供这种列表的存储系统，这将引发一个 ``NotImplementedError``。"

msgid ""
"Opens the file given by ``name``. Note that although the returned file is "
"guaranteed to be a ``File`` object, it might actually be some subclass. In "
"the case of remote file storage this means that reading/writing could be "
"quite slow, so be warned."
msgstr ""
"打开由 ``name`` 给出的文件。请注意，虽然返回的文件保证是一个 ``File`` 对象，"
"但实际上它可能是某个子类。在远程文件存储的情况下，这意味着读／写可能会很慢，"
"所以要注意。"

msgid ""
"The local filesystem path where the file can be opened using Python's "
"standard ``open()``. For storage systems that aren't accessible from the "
"local filesystem, this will raise ``NotImplementedError`` instead."
msgstr ""
"本地文件系统路径，在这里可以使用 Python 的标准 ``open()`` 打开文件。对于不能"
"从本地文件系统访问的存储系统，这将引发 ``NotImplementedError``。"

msgid ""
"Saves a new file using the storage system, preferably with the name "
"specified. If there already exists a file with this name ``name``, the "
"storage system may modify the filename as necessary to get a unique name. "
"The actual name of the stored file will be returned."
msgstr ""
"使用存储系统保存一个新的文件，最好使用指定的名称。如果已经存在一个带有这个名"
"字 ``name`` 的文件，存储系统可以根据需要修改文件名以获得一个唯一的名字。将返"
"回存储文件的实际名称。"

msgid ""
"The ``max_length`` argument is passed along to :meth:`get_available_name`."
msgstr "``max_length`` 参数被传递给 :meth:`get_available_name`。"

msgid ""
"The ``content`` argument must be an instance of :class:`django.core.files."
"File` or a file-like object that can be wrapped in ``File``."
msgstr ""
"``content`` 参数必须是 :class:`django.core.files.File` 的实例，或者是一个可以"
"用 ``File`` 包装的类文件对象。"

msgid ""
"Returns the total size, in bytes, of the file referenced by ``name``. For "
"storage systems that aren't able to return the file size this will raise "
"``NotImplementedError`` instead."
msgstr ""
"返回 ``name`` 引用的文件的总大小，以字节为单位。对于不能返回文件大小的存储系"
"统，将引发 ``NotImplementedError``。"

msgid ""
"Returns the URL where the contents of the file referenced by ``name`` can be "
"accessed. For storage systems that don't support access by URL this will "
"raise ``NotImplementedError`` instead."
msgstr ""
"返回可以访问 ``name`` 引用的文件内容的URL。对于不支持通过 URL 访问的存储系"
"统，这将引发 ``NotImplementedError``。"

msgid "Uploaded Files and Upload Handlers"
msgstr "上传的文件和上传处理程序"

msgid "Uploaded files"
msgstr "上传的文件"

msgid ""
"During file uploads, the actual file data is stored in :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`. Each entry in this dictionary is an "
"``UploadedFile`` object (or a subclass) -- a wrapper around an uploaded "
"file. You'll usually use one of these methods to access the uploaded content:"
msgstr ""
"在文件上传过程中，实际的文件数据存储在 :attr:`request.FILES <django.http."
"HttpRequest.FILES>` 中。这个字典中的每一个条目都是一个 ``UploadedFile`` 对象"
"（或一个子类）—— 一个所上传文件的包装器。你通常会使用这些方法之一来访问上传的"
"内容："

msgid ""
"Read the entire uploaded data from the file. Be careful with this method: if "
"the uploaded file is huge it can overwhelm your system if you try to read it "
"into memory. You'll probably want to use ``chunks()`` instead; see below."
msgstr ""
"从文件中读取整个上传的数据。小心使用这个方法：如果上传的文件很大，如果你试图"
"把它读到内存中，它可能会让你的系统不堪重负。你可能会想使用 ``chunks()`` 来代"
"替；见下文。"

msgid ""
"Returns ``True`` if the uploaded file is big enough to require reading in "
"multiple chunks. By default this will be any file larger than 2.5 megabytes, "
"but that's configurable; see below."
msgstr ""
"如果上传的文件足够大，需要分块读取，返回 ``True``。默认情况下是大于 2.5 兆字"
"节的文件，但这是可以配置的，见下文。"

msgid ""
"A generator returning chunks of the file. If ``multiple_chunks()`` is "
"``True``, you should use this method in a loop instead of ``read()``."
msgstr ""
"一个生成器，返回文件的块。如果 ``multiple_chunks()`` 是 ``True``，你应该在循"
"环中使用这个方法而不是 ``read()``。"

msgid ""
"In practice, it's often easiest to use ``chunks()`` all the time. Looping "
"over ``chunks()`` instead of using ``read()`` ensures that large files don't "
"overwhelm your system's memory."
msgstr ""
"在实践中，通常最简单的做法是一直使用 ``chunks()``。循环使用 ``chunks()`` 而不"
"是使用 ``read()`` 可以确保大文件不会过度占用系统的内存。"

msgid "Here are some useful attributes of ``UploadedFile``:"
msgstr "以下是 ``UploadedFile`` 的一些有用属性："

msgid "The name of the uploaded file (e.g. ``my_file.txt``)."
msgstr "上传的文件名称（如 ``my_file.txt``）。"

msgid "The size, in bytes, of the uploaded file."
msgstr "上传文件的大小，以字节为单位。"

msgid ""
"The content-type header uploaded with the file (e.g. :mimetype:`text/plain` "
"or :mimetype:`application/pdf`). Like any data supplied by the user, you "
"shouldn't trust that the uploaded file is actually this type. You'll still "
"need to validate that the file contains the content that the content-type "
"header claims -- \"trust but verify.\""
msgstr ""
"与文件一起上传的内容类型头（例如 :mimetype:`text/plain` 或 :mimetype:"
"`application/pdf`）。就像用户提供的任何数据一样，你不应该相信上传的文件实际上"
"是这种类型。你仍然需要验证该文件是否包含内容类型头所声称的内容 —— “信任但验"
"证”。"

msgid ""
"A dictionary containing extra parameters passed to the ``content-type`` "
"header. This is typically provided by services, such as Google App Engine, "
"that intercept and handle file uploads on your behalf. As a result your "
"handler may not receive the uploaded file content, but instead a URL or "
"other pointer to the file (see :rfc:`RFC 2388 <2388#section-5.3>`)."
msgstr ""
"包含传递给 ``content-type`` 头的额外参数的字典。这通常是由服务提供的，比如 "
"Google App Engine，它代表你拦截和处理文件上传。因此，您的处理程序可能不会收到"
"上传的文件内容，而是收到一个 URL 或其他指向文件的指针（参见 :rfc:`RFC 2388 "
"<2388#section-5.3>`）。"

msgid ""
"For :mimetype:`text/*` content-types, the character set (i.e. ``utf8``) "
"supplied by the browser. Again, \"trust but verify\" is the best policy here."
msgstr ""
"对于 :mimetype:`text/*` 内容类型，浏览器提供的字符集（即 ``utf8``）。同"
"样，“信任但验证” 是这里的最佳政策。"

msgid ""
"Like regular Python files, you can read the file line-by-line by iterating "
"over the uploaded file::"
msgstr "像普通的 Python 文件一样，你可以通过迭代上传的文件来逐行读取文件："

msgid ""
"Lines are split using :pep:`universal newlines <278>`. The following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention ``'\\r'``."
msgstr ""
"使用 :pep:`通用换行符 <278>` 来分割行。以下是公认的行结束方式：Unix 的行末约"
"定 ``'\\n'``，Windows 的约定 ``'\\r\\n'``，以及旧的 Macintosh 约定 "
"``'\\r'``。"

msgid "Subclasses of ``UploadedFile`` include:"
msgstr "``UploadedFile`` 的子类包括："

msgid ""
"A file uploaded to a temporary location (i.e. stream-to-disk). This class is "
"used by the :class:`~django.core.files.uploadhandler."
"TemporaryFileUploadHandler`. In addition to the methods from :class:"
"`UploadedFile`, it has one additional method:"
msgstr ""
"一个文件上传到一个临时位置（即传输到磁盘）。这个类被 :class:`~django.core."
"files.uploadhandler.TemporaryFileUploadHandler` 使用。除了 :class:"
"`UploadedFile` 的方法外，它还有一个额外的方法："

msgid "Returns the full path to the temporary uploaded file."
msgstr "返回临时上传文件的完整路径。"

msgid ""
"A file uploaded into memory (i.e. stream-to-memory). This class is used by "
"the :class:`~django.core.files.uploadhandler.MemoryFileUploadHandler`."
msgstr ""
"一个上传到内存中的文件（即传输到内存）。这个类被 :class:`~django.core.files."
"uploadhandler.MemoryFileUploadHandler` 使用。"

msgid "Built-in upload handlers"
msgstr "内置上传处理程序"

msgid ""
"Together the :class:`MemoryFileUploadHandler` and :class:"
"`TemporaryFileUploadHandler` provide Django's default file upload behavior "
"of reading small files into memory and large ones onto disk. They are "
"located in ``django.core.files.uploadhandler``."
msgstr ""
":class:`MemoryFileUploadHandler` 和 :class:`TemporaryFileUploadHandler` 共同"
"提供了 Django 默认的文件上传行为，即向内存中读取小文件，向磁盘中读取大文件。"
"它们位于 ``django.core.files.uploadhandler`` 中。"

msgid ""
"File upload handler to stream uploads into memory (used for small files)."
msgstr "文件上传处理程序，将上传的文件以流式传输到内存中（用于小文件）。"

msgid ""
"Upload handler that streams data into a temporary file using :class:`~django."
"core.files.uploadedfile.TemporaryUploadedFile`."
msgstr ""
"使用 :class:`~django.core.files.uploadfile.TemporaryUploadedFile` 将数据流式"
"传输到临时文件的上传处理程序。"

msgid "Writing custom upload handlers"
msgstr "编写自定义上传处理程序"

msgid ""
"All file upload handlers should be subclasses of ``django.core.files."
"uploadhandler.FileUploadHandler``. You can define upload handlers wherever "
"you wish."
msgstr ""
"所有的文件上传处理程序应该是 ``django.core.files.uploadhandler."
"FileUploadHandler`` 的子类。你可以在任何地方定义上传处理程序。"

msgid "Required methods"
msgstr "必要方法"

msgid "Custom file upload handlers **must** define the following methods:"
msgstr "自定义文件上传处理程序 **必须** 定义以下方法："

msgid "Receives a \"chunk\" of data from the file upload."
msgstr "接收文件上传的 “块” 数据。"

msgid "``raw_data`` is a bytestring containing the uploaded data."
msgstr "``raw_data`` 是一个包含上传数据的字节字符串。"

msgid ""
"``start`` is the position in the file where this ``raw_data`` chunk begins."
msgstr "``start`` 是文件中 ``raw_data`` 块开始的位置。"

msgid ""
"The data you return will get fed into the subsequent upload handlers' "
"``receive_data_chunk`` methods. In this way, one handler can be a \"filter\" "
"for other handlers."
msgstr ""
"你返回的数据将被输入到后续的上传处理程序的 ``receive_data_chunk`` 方法中。通"
"过这种方式，一个处理程序可以成为其他处理程序的 “过滤器”。"

msgid ""
"Return ``None`` from ``receive_data_chunk`` to short-circuit remaining "
"upload handlers from getting this chunk. This is useful if you're storing "
"the uploaded data yourself and don't want future handlers to store a copy of "
"the data."
msgstr ""
"从 ``receive_data_chunk`` 中返回 ``None``，以短路剩余的上传处理程序。如果你自"
"己存储上传的数据，并且不希望后续的处理程序存储数据的副本，这很有用。"

msgid ""
"If you raise a ``StopUpload`` or a ``SkipFile`` exception, the upload will "
"abort or the file will be completely skipped."
msgstr ""
"如果引发一个 ``StopUpload`` 或 ``SkipFile`` 异常，上传将被中止或文件将被完全"
"跳过。"

msgid "Called when a file has finished uploading."
msgstr "当文件上传完毕时调用。"

msgid ""
"The handler should return an ``UploadedFile`` object that will be stored in "
"``request.FILES``. Handlers may also return ``None`` to indicate that the "
"``UploadedFile`` object should come from subsequent upload handlers."
msgstr ""
"处理程序应返回一个 ``UploadedFile`` 对象，该对象将存储在 ``request.FILES`` "
"中。处理程序也可以返回 ``None`` 以表明 ``UploadedFile`` 对象应来自后续的上传"
"处理程序。"

msgid "Optional methods"
msgstr "可选方法"

msgid ""
"Custom upload handlers may also define any of the following optional methods "
"or attributes:"
msgstr "自定义上传处理程序也可以定义以下任何一个可选方法或属性："

msgid ""
"Size, in bytes, of the \"chunks\" Django should store into memory and feed "
"into the handler. That is, this attribute controls the size of chunks fed "
"into ``FileUploadHandler.receive_data_chunk``."
msgstr ""
"Django 应该存储到内存中并反馈给处理程序的 “块” 的大小，以字节为单位。也就是"
"说，这个属性控制了输入到 ``FileUploadHandler.receive_data_chunk`` 的数据块的"
"大小。"

msgid ""
"For maximum performance the chunk sizes should be divisible by ``4`` and "
"should not exceed 2 GB (2\\ :sup:`31` bytes) in size. When there are "
"multiple chunk sizes provided by multiple handlers, Django will use the "
"smallest chunk size defined by any handler."
msgstr ""
"为了获得最大的性能，分块大小应该被 ``4`` 整除，并且大小不能超过 2GB（2\\ :"
"sup:`31` 字节）。当有多个处理程序提供的多个分块大小时，Django 将使用任何处理"
"程序定义的最小分块大小。"

msgid "The default is 64*2\\ :sup:`10` bytes, or 64 KB."
msgstr "默认为 64*2\\ :sup:`10` 字节，即 64KB。"

msgid ""
"Callback signaling that a new file upload is starting. This is called before "
"any data has been fed to any upload handlers."
msgstr ""
"回调信号，表示一个新的文件上传开始。在任何数据被送入任何上传处理程序之前，这"
"个回调被调用。"

msgid "``field_name`` is a string name of the file ``<input>`` field."
msgstr "``field_name`` 是文件 ``<input>`` 字段的字符串名称。"

msgid "``file_name`` is the filename provided by the browser."
msgstr "``file_name`` 是浏览器提供的文件名。"

msgid ""
"``content_type`` is the MIME type provided by the browser -- E.g. ``'image/"
"jpeg'``."
msgstr "``content_type`` 是浏览器提供的 MIME 类型 —— 例如 ``'image/jpeg'``。"

msgid ""
"``content_length`` is the length of the image given by the browser. "
"Sometimes this won't be provided and will be ``None``."
msgstr ""
"``content_length`` 是浏览器给出的图像长度。有时不会提供，而是 ``None``。"

msgid ""
"``charset`` is the character set (i.e. ``utf8``) given by the browser. Like "
"``content_length``, this sometimes won't be provided."
msgstr ""
"``charset`` 是浏览器提供的字符集（即 ``utf8``）。与 ``content_length`` 一样，"
"有时不会提供。"

msgid ""
"``content_type_extra`` is extra information about the file from the "
"``content-type`` header. See :attr:`UploadedFile.content_type_extra <django."
"core.files.uploadedfile.UploadedFile.content_type_extra>`."
msgstr ""
"``content_type_extra`` 是关于文件的 ``content-type`` 头的额外信息。参见 :"
"attr:`UploadedFile.content_type_extra <django.core.files.uploadedfile."
"UploadedFile.content_type_extra>`。"

msgid ""
"This method may raise a ``StopFutureHandlers`` exception to prevent future "
"handlers from handling this file."
msgstr ""
"这个方法可能会引发一个 ``StopFutureHandlers`` 异常，以防止后续处理程序处理这"
"个文件。"

msgid "Callback signaling that the entire upload (all files) has completed."
msgstr "回调信号，表示整个上传（所有文件）已经完成。"

msgid ""
"Callback signaling that the upload was interrupted, e.g. when the user "
"closed their browser during file upload."
msgstr ""
"回调信号，表明上传被中断，例如，当用户在文件上传过程中关闭他们的浏览器。"

msgid ""
"Allows the handler to completely override the parsing of the raw HTTP input."
msgstr "允许处理程序完全覆盖原始 HTTP 输入的解析。"

msgid "``input_data`` is a file-like object that supports ``read()``-ing."
msgstr "``input_data`` 是一个支持 ``read()``-ing 的类文件对象。"

msgid "``META`` is the same object as ``request.META``."
msgstr "``META`` 与 ``request.META`` 是同一个对象。"

msgid ""
"``content_length`` is the length of the data in ``input_data``. Don't read "
"more than ``content_length`` bytes from ``input_data``."
msgstr ""
"``content_length`` 是 ``input_data`` 中数据的长度。不要从 ``input_data`` 中读"
"取超过 ``content_length`` 的字节。"

msgid "``boundary`` is the MIME boundary for this request."
msgstr "``boundary`` 是本次请求的 MIME 边界。"

msgid "``encoding`` is the encoding of the request."
msgstr "``encoding`` 是请求的编码。"

msgid ""
"Return ``None`` if you want upload handling to continue, or a tuple of "
"``(POST, FILES)`` if you want to return the new data structures suitable for "
"the request directly."
msgstr ""
"如果想继续上传处理，则返回 ``None``，如果想直接返回适合请求的新数据结构，则返"
"回 ``(POST，FILES)`` 的元组。"

msgid "The Forms API"
msgstr "表单 API"

msgid "About this document"
msgstr "关于此文档"

msgid ""
"This document covers the gritty details of Django's forms API. You should "
"read the :doc:`introduction to working with forms </topics/forms/index>` "
"first."
msgstr ""
"本文档介绍了 Django 的表单 API 的具体细节。你应该先阅读 :doc:`使用表单的介绍 "
"</topics/forms/index>`。"

msgid "Bound and unbound forms"
msgstr "绑定和非绑定表单"

msgid ""
"A :class:`Form` instance is either **bound** to a set of data, or "
"**unbound**."
msgstr "一个 :class:`Form` 实例要么是 **绑定** 到一组数据，要么是 **未绑定**。"

msgid ""
"If it's **bound** to a set of data, it's capable of validating that data and "
"rendering the form as HTML with the data displayed in the HTML."
msgstr ""
"如果是 **绑定** 了一组数据，它就能够验证这些数据，并将表单渲染成 HTML，并在 "
"HTML 中显示数据。"

msgid ""
"If it's **unbound**, it cannot do validation (because there's no data to "
"validate!), but it can still render the blank form as HTML."
msgstr ""
"如果是 **未绑定**，它就不能进行验证（因为没有数据可验证！），但它仍然可以将空"
"白表单渲染为 HTML。"

msgid "To create an unbound :class:`Form` instance, instantiate the class:"
msgstr ""

msgid ""
"To bind data to a form, pass the data as a dictionary as the first parameter "
"to your :class:`Form` class constructor:"
msgstr ""

msgid ""
"In this dictionary, the keys are the field names, which correspond to the "
"attributes in your :class:`Form` class. The values are the data you're "
"trying to validate. These will usually be strings, but there's no "
"requirement that they be strings; the type of data you pass depends on the :"
"class:`Field`, as we'll see in a moment."
msgstr ""
"在这个字典中，键是字段名，对应于 :class:`Form` 类中的属性。值是你要验证的数"
"据。这些数据通常是字符串，但不要求它们是字符串；你传递的数据类型取决于 :"
"class:`Field`，我们稍后会看到。"

msgid ""
"If you need to distinguish between bound and unbound form instances at "
"runtime, check the value of the form's :attr:`~Form.is_bound` attribute:"
msgstr ""

msgid ""
"Note that passing an empty dictionary creates a *bound* form with empty data:"
msgstr ""

msgid ""
"If you have a bound :class:`Form` instance and want to change the data "
"somehow, or if you want to bind an unbound :class:`Form` instance to some "
"data, create another :class:`Form` instance. There is no way to change data "
"in a :class:`Form` instance. Once a :class:`Form` instance has been created, "
"you should consider its data immutable, whether it has data or not."
msgstr ""
"如果你有一个绑定的 :class:`Form` 实例，并想以某种方式改变数据，或者你想将一个"
"未绑定的 :class:`Form` 实例绑定到一些数据，请创建另一个 :class:`Form` 实例。"
"没有办法改变一个 :class:`Form` 实例中的数据。一旦创建了一个 :class:`Form` 实"
"例，你应该认为它的数据是不可改变的，不管它是否有数据。"

msgid "Using forms to validate data"
msgstr "使用表单来验证数据"

msgid ""
"Implement a ``clean()`` method on your ``Form`` when you must add custom "
"validation for fields that are interdependent. See :ref:`validating-fields-"
"with-clean` for example usage."
msgstr ""
"当你必须为相互依赖的字段添加自定义验证时，在你的 ``Form`` 上实现一个 "
"``clean()`` 方法。参见 :ref:`validating-fields-with-clean` 的用法示例。"

msgid ""
"The primary task of a :class:`Form` object is to validate data. With a "
"bound :class:`Form` instance, call the :meth:`~Form.is_valid` method to run "
"validation and return a boolean designating whether the data was valid:"
msgstr ""

msgid ""
"Let's try with some invalid data. In this case, ``subject`` is blank (an "
"error, because all fields are required by default) and ``sender`` is not a "
"valid email address:"
msgstr ""

msgid ""
"Access the :attr:`~Form.errors` attribute to get a dictionary of error "
"messages:"
msgstr ""

msgid ""
"In this dictionary, the keys are the field names, and the values are lists "
"of strings representing the error messages. The error messages are stored in "
"lists because a field can have multiple error messages."
msgstr ""
"在这个字典中，键是字段名，值是代表错误信息的字符串列表。错误信息存储在列表"
"中，因为一个字段可以有多个错误信息。"

msgid ""
"You can access :attr:`~Form.errors` without having to call :meth:`~Form."
"is_valid` first. The form's data will be validated the first time either you "
"call :meth:`~Form.is_valid` or access :attr:`~Form.errors`."
msgstr ""
"你可以访问 :attr:`~Form.errors`，而不必先调用 :meth:`~Form.is_valid`。无论是"
"调用 :meth:`~Form.is_valid` 还是访问 :attr:`~Form.errors`，表单的数据都会首先"
"被验证。"

msgid ""
"The validation routines will only get called once, regardless of how many "
"times you access :attr:`~Form.errors` or call :meth:`~Form.is_valid`. This "
"means that if validation has side effects, those side effects will only be "
"triggered once."
msgstr ""
"验证例程只会被调用一次，无论你访问 :attr:`~Form.errors` 或调用 :meth:`~Form."
"is_valid` 多少次。这意味着，如果验证有副作用，这些副作用将只被触发一次。"

msgid ""
"Returns a ``dict`` that maps fields to their original ``ValidationError`` "
"instances."
msgstr "返回一个 ``dict``，将字段映射到它们的原始 ``ValidationError`` 实例。"

msgid ""
"Use this method anytime you need to identify an error by its ``code``. This "
"enables things like rewriting the error's message or writing custom logic in "
"a view when a given error is present. It can also be used to serialize the "
"errors in a custom format (e.g. XML); for instance, :meth:`~Form.errors."
"as_json()` relies on ``as_data()``."
msgstr ""
"当你需要通过错误 ``code`` 来识别错误时，请使用此方法。这样就可以在给定的错误"
"出现时，重写错误信息或在视图中编写自定义逻辑。它还可以用来以自定义格式（如 "
"XML）将错误序列化；例如， :meth:`~Form. errors.as_json()` 依赖于 "
"``as_data()``。"

msgid ""
"The need for the ``as_data()`` method is due to backwards compatibility. "
"Previously ``ValidationError`` instances were lost as soon as their "
"**rendered** error messages were added to the ``Form.errors`` dictionary. "
"Ideally ``Form.errors`` would have stored ``ValidationError`` instances and "
"methods with an ``as_`` prefix could render them, but it had to be done the "
"other way around in order not to break code that expects rendered error "
"messages in ``Form.errors``."
msgstr ""
"需要使用 ``as_data()`` 方法是由于向后兼容性。以前，``ValidationError`` 实例一"
"旦被添加到 ``Form.errors`` 字典中，其 **渲染的** 错误信息就会丢失。理想情况"
"下，``Form.errors`` 会存储 ``ValidationError`` 实例，并且带有 ``as_`` 前缀的"
"方法可以渲染它们，但为了不破坏那些期望在 ``Form.errors`` 中渲染错误信息的代"
"码，必须反过来做。"

msgid "Returns the errors serialized as JSON."
msgstr "返回以 JSON 格式序列化的错误。"

msgid ""
"By default, ``as_json()`` does not escape its output. If you are using it "
"for something like AJAX requests to a form view where the client interprets "
"the response and inserts errors into the page, you'll want to be sure to "
"escape the results on the client-side to avoid the possibility of a cross-"
"site scripting attack. You can do this in JavaScript with ``element."
"textContent = errorText`` or with jQuery's ``$(el).text(errorText)`` (rather "
"than its ``.html()`` function)."
msgstr ""
"默认情况下，``as_json()`` 不会转义其输出。如果你使用它来处理类似 AJAX 请求的"
"表单视图，客户端解释响应并将错误插入到页面中，你会希望确保在客户端转义结果，"
"以避免跨站点脚本攻击的可能性。你可以在 JavaScript 中使用 ``element."
"textContent = errorText`` 或者使用 jQuery 的 ``$(el).text(errorText)`` （而不"
"是它的 ``.html()`` 函数）来实现。"

msgid ""
"If for some reason you don't want to use client-side escaping, you can also "
"set ``escape_html=True`` and error messages will be escaped so you can use "
"them directly in HTML."
msgstr ""
"如果出于某些原因你不想使用客户端转义，你也可以设置 ``escape_html=True``，错误"
"信息将被转义，这样你就可以直接在 HTML 中使用它们。"

msgid ""
"Returns the errors as a dictionary suitable for serializing to JSON. :meth:"
"`Form.errors.as_json()` returns serialized JSON, while this returns the "
"error data before it's serialized."
msgstr ""
":meth:`Form. errors.as_json()` 将返回序列化的 JSON，而这个则是返回序列化之前"
"的错误数据。"

msgid ""
"The ``escape_html`` parameter behaves as described in :meth:`Form.errors."
"as_json()`."
msgstr "``escape_html`` 参数的行为如 :meth:`Form.errors.as_json()` 中所述。"

msgid ""
"This method allows adding errors to specific fields from within the ``Form."
"clean()`` method, or from outside the form altogether; for instance from a "
"view."
msgstr ""
"该方法允许在 ``Form.clean()`` 方法中添加错误到特定字段，或者从表单外部添加错"
"误，例如从视图中添加。"

msgid ""
"The ``field`` argument is the name of the field to which the errors should "
"be added. If its value is ``None`` the error will be treated as a non-field "
"error as returned by :meth:`Form.non_field_errors() <django.forms.Form."
"non_field_errors>`."
msgstr ""
"``field`` 参数是应该添加错误的字段名。如果它的值是 ``None``，错误将被视为非字"
"段错误，就像 :meth:`Form.non_field_errors() <django.forms.Form."
"non_field_errors>` 返回的那样。"

msgid ""
"The ``error`` argument can be a string, or preferably an instance of "
"``ValidationError``. See :ref:`raising-validation-error` for best practices "
"when defining form errors."
msgstr ""
"``error`` 参数可以是一个字符串，或者最好是 ``ValidationError`` 的实例。关于定"
"义表单错误的最佳做法，请参见 :ref:`raising-validation-error`。"

msgid ""
"Note that ``Form.add_error()`` automatically removes the relevant field from "
"``cleaned_data``."
msgstr "注意，``Form.add_error()`` 会自动从 ``cleaned_data`` 中删除相关字段。"

msgid ""
"This method returns a boolean designating whether a field has an error with "
"a specific error ``code``. If ``code`` is ``None``, it will return ``True`` "
"if the field contains any errors at all."
msgstr ""
"本方法返回一个布尔值，表示一个字段是否有特定错误 ``code`` 的错误。如果 "
"``code`` 是 ``None``，如果字段包含任何错误，它将返回 ``True``。"

msgid ""
"To check for non-field errors use :data:`~django.core.exceptions."
"NON_FIELD_ERRORS` as the ``field`` parameter."
msgstr ""
"要检查非字段错误，使用 :data:`~django.core.exceptions.NON_FIELD_ERRORS` 作为 "
"``field`` 参数。"

msgid ""
"This method returns the list of errors from :attr:`Form.errors <django.forms."
"Form.errors>`  that aren't associated with a particular field. This includes "
"``ValidationError``\\s that are raised in :meth:`Form.clean() <django.forms."
"Form.clean>` and errors added using :meth:`Form.add_error(None, \"...\") "
"<django.forms.Form.add_error>`."
msgstr ""
"这个方法从 :attr:`Form.errors <django.forms.Form.errors>` 中返回没有与特定字"
"段关联的错误列表。这包括在 :meth:`Form.clean() <django.forms.Form.clean>` 中"
"引发的 ``ValidationError`` 和使用 :meth:`Form.add_error(None, \"...\") "
"<django.forms.Form.add_error>` 添加的错误。"

msgid "Behavior of unbound forms"
msgstr "非绑定表单的行为"

msgid ""
"It's meaningless to validate a form with no data, but, for the record, "
"here's what happens with unbound forms:"
msgstr ""

msgid "Initial form values"
msgstr "初始表单值"

msgid ""
"Use :attr:`~Form.initial` to declare the initial value of form fields at "
"runtime. For example, you might want to fill in a ``username`` field with "
"the username of the current session."
msgstr ""
"使用 :attr:`~Form.initial` 在运行时声明表单字段的初始值。例如，你可能想用当前"
"会话的用户名来填写 ``username`` 字段。"

msgid ""
"To accomplish this, use the :attr:`~Form.initial` argument to a :class:"
"`Form`. This argument, if given, should be a dictionary mapping field names "
"to initial values. Only include the fields for which you're specifying an "
"initial value; it's not necessary to include every field in your form. For "
"example:"
msgstr ""

msgid ""
"These values are only displayed for unbound forms, and they're not used as "
"fallback values if a particular value isn't provided."
msgstr ""
"这些值只对未绑定的表单显示，如果没有提供特定的值，它们不会被用作后备值。"

msgid ""
"If a :class:`~django.forms.Field` defines :attr:`~Field.initial` *and* you "
"include :attr:`~Form.initial` when instantiating the ``Form``, then the "
"latter ``initial`` will have precedence. In this example, ``initial`` is "
"provided both at the field level and at the form instance level, and the "
"latter gets precedence:"
msgstr ""

msgid ""
"Returns the initial data for a form field. It retrieves the data from :attr:"
"`Form.initial` if present, otherwise trying :attr:`Field.initial`. Callable "
"values are evaluated."
msgstr ""
"返回一个表单字段的初始数据。如果存在的话，它从 :attr:`Form.initial` 检索数"
"据，否则尝试 :attr:`Field.initial`。可调用的值将被执行。"

msgid ""
"It is recommended to use :attr:`BoundField.initial` over :meth:`~Form."
"get_initial_for_field()` because ``BoundField.initial`` has a simpler "
"interface. Also, unlike :meth:`~Form.get_initial_for_field()`, :attr:"
"`BoundField.initial` caches its values. This is useful especially when "
"dealing with callables whose return values can change (e.g. ``datetime.now`` "
"or ``uuid.uuid4``):"
msgstr ""

msgid "Checking which form data has changed"
msgstr "检查哪些表格数据已经改变"

msgid ""
"Use the ``has_changed()`` method on your ``Form`` when you need to check if "
"the form data has been changed from the initial data."
msgstr ""
"当你需要检查表单数据是否与初始数据发生变化时，请使用 ``has_changed()`` 方法。"

msgid ""
"When the form is submitted, we reconstruct it and provide the original data "
"so that the comparison can be done:"
msgstr "当表单提交后，我们会重新构建表单，并提供原始数据，以便进行对比。"

msgid ""
"``has_changed()`` will be ``True`` if the data from ``request.POST`` differs "
"from what was provided in :attr:`~Form.initial` or ``False`` otherwise. The "
"result is computed by calling :meth:`Field.has_changed` for each field in "
"the form."
msgstr ""
"如果来自 ``request.POST`` 的数据与 :attr:`~Form.initial` 中提供的数据不同，那"
"么 ``has_changed()`` 将为 ``True``，否则为 ``False``。结果是通过调用 :meth:"
"`Field.has_changed` 对表单中的每个字段进行计算。"

msgid ""
"The ``changed_data`` attribute returns a list of the names of the fields "
"whose values in the form's bound data (usually ``request.POST``) differ from "
"what was provided in :attr:`~Form.initial`. It returns an empty list if no "
"data differs."
msgstr ""
"``changed_data`` 属性返回表单绑定数据（通常是 ``request.POST``）中与 :attr:"
"`~Form.initial` 中提供的数据不同的字段名列表。如果没有不同的数据，则返回一个"
"空列表。"

msgid "Accessing the fields from the form"
msgstr "访问表单中的字段"

msgid ""
"You can access the fields of :class:`Form` instance from its ``fields`` "
"attribute:"
msgstr ""

msgid ""
"You can alter the field and :class:`.BoundField` of :class:`Form` instance "
"to change the way it is presented in the form:"
msgstr ""

msgid ""
"Beware not to alter the ``base_fields`` attribute because this modification "
"will influence all subsequent ``ContactForm`` instances within the same "
"Python process:"
msgstr ""

msgid "Accessing \"clean\" data"
msgstr "访问“干净的”数据"

msgid ""
"Each field in a :class:`Form` class is responsible not only for validating "
"data, but also for \"cleaning\" it -- normalizing it to a consistent format. "
"This is a nice feature, because it allows data for a particular field to be "
"input in a variety of ways, always resulting in consistent output."
msgstr ""
":class:`Form` 类中的每个字段不仅负责验证数据，还负责“清理”数据——将其规范为一"
"致的格式。这是一个很好的功能，因为它允许以各种方式输入特定字段的数据，并总是"
"产生一致的输出。"

msgid ""
"For example, :class:`~django.forms.DateField` normalizes input into a Python "
"``datetime.date`` object. Regardless of whether you pass it a string in the "
"format ``'1994-07-15'``, a ``datetime.date`` object, or a number of other "
"formats, ``DateField`` will always normalize it to a ``datetime.date`` "
"object as long as it's valid."
msgstr ""
"例如， :class:`~django.forms.DateField` 将输入规范化为 Python 的 ``datetime."
"date`` 对象。无论你传递给它的是格式为 ``'1994-07-15'`` 的字符串，还是 "
"``datetime.date`` 对象，或者其他一些格式，只要它是有效的，``DateField`` 都会"
"将它规范化为 ``datetime.date`` 对象。"

msgid ""
"Once you've created a :class:`~Form` instance with a set of data and "
"validated it, you can access the clean data via its ``cleaned_data`` "
"attribute:"
msgstr ""

msgid ""
"Note that any text-based field -- such as ``CharField`` or ``EmailField`` -- "
"always cleans the input into a string. We'll cover the encoding implications "
"later in this document."
msgstr ""
"请注意，任何基于文本的字段——如 ``CharField`` 或 ``EmailField``——总是将输入清"
"理成一个字符串。我们将在本文档后面介绍编码的含义。"

msgid ""
"If your data does *not* validate, the ``cleaned_data`` dictionary contains "
"only the valid fields:"
msgstr ""

msgid ""
"``cleaned_data`` will always *only* contain a key for fields defined in the "
"``Form``, even if you pass extra data when you define the ``Form``. In this "
"example, we pass a bunch of extra fields to the ``ContactForm`` constructor, "
"but ``cleaned_data`` contains only the form's fields:"
msgstr ""

msgid ""
"When the ``Form`` is valid, ``cleaned_data`` will include a key and value "
"for *all* its fields, even if the data didn't include a value for some "
"optional fields. In this example, the data dictionary doesn't include a "
"value for the ``nick_name`` field, but ``cleaned_data`` includes it, with an "
"empty value:"
msgstr ""

msgid ""
"In this above example, the ``cleaned_data`` value for ``nick_name`` is set "
"to an empty string, because ``nick_name`` is ``CharField``, and "
"``CharField``\\s treat empty values as an empty string. Each field type "
"knows what its \"blank\" value is -- e.g., for ``DateField``, it's ``None`` "
"instead of the empty string. For full details on each field's behavior in "
"this case, see the \"Empty value\" note for each field in the \"Built-in "
"``Field`` classes\" section below."
msgstr ""
"在上面这个例子中，``nick_name`` 的 ``cleaned_data`` 值被设置为一个空字符串，"
"因为 ``nick_name`` 是 ``CharField``，而 ``CharField`` 将空值视为空字符串。每"
"个字段类型都知道它的“空”值是什么——例如，对于 ``DateField``，它是 ``None`` 而"
"不是空字符串。关于每个字段在这种情况下的行为的全部细节，请参阅下面“内置 "
"``Field`` 类”一节中每个字段的“空值”说明。"

msgid ""
"You can write code to perform validation for particular form fields (based "
"on their name) or for the form as a whole (considering combinations of "
"various fields). More information about this is in :doc:`/ref/forms/"
"validation`."
msgstr ""
"你可以编写代码来对特定的表单字段（基于其名称）或整个表单（考虑各种字段的组"
"合）进行验证。更多关于这方面的信息请参见 :doc:`/ref/forms/validation`。"

msgid "Outputting forms as HTML"
msgstr "将表单输出为 HTML"

msgid ""
"The second task of a ``Form`` object is to render itself as HTML. To do so, "
"``print`` it:"
msgstr ""

msgid ""
"If the form is bound to data, the HTML output will include that data "
"appropriately. For example, if a field is represented by an ``<input "
"type=\"text\">``, the data will be in the ``value`` attribute. If a field is "
"represented by an ``<input type=\"checkbox\">``, then that HTML will include "
"``checked`` if appropriate:"
msgstr ""

msgid ""
"This default output is a two-column HTML table, with a ``<tr>`` for each "
"field. Notice the following:"
msgstr ""
"这个默认输出是一个两列的 HTML 表单，每个字段都有一个 ``<tr>``。请注意以下几"
"点："

msgid ""
"For flexibility, the output does *not* include the ``<table>`` and ``</"
"table>`` tags, nor does it include the ``<form>`` and ``</form>`` tags or an "
"``<input type=\"submit\">`` tag. It's your job to do that."
msgstr ""
"为灵活起见，输出 *不* 包括 ``<table>`` 和 ``</table>`` 标签，也不包括 "
"``<form>`` 和 ``</form>`` 标签或 ``<input type=\"submit\">`` 标签。这是你的工"
"作。"

msgid ""
"Each field type has a default HTML representation. ``CharField`` is "
"represented by an ``<input type=\"text\">`` and ``EmailField`` by an "
"``<input type=\"email\">``. ``BooleanField(null=False)`` is represented by "
"an ``<input type=\"checkbox\">``. Note these are merely sensible defaults; "
"you can specify which HTML to use for a given field by using widgets, which "
"we'll explain shortly."
msgstr ""
"每个字段类型都有一个默认的 HTML 表示。``CharField`` 用 ``<input "
"type=\"text\">`` 表示，``EmailField`` 用 ``<input type=\"email\">`` 表示。"
"``BooleanField(null=False)`` 由一个 ``<input type=\"checkbox\">``。请注意，这"
"些只是合理的默认值；你可以通过使用部件来指定一个给定字段使用的 HTML，我们将在"
"后面解释。"

msgid ""
"The HTML ``name`` for each tag is taken directly from its attribute name in "
"the ``ContactForm`` class."
msgstr "每个标签的 HTML ``name`` 直接从 ``ContactForm`` 类中的属性名中提取。"

msgid ""
"The text label for each field -- e.g. ``'Subject:'``, ``'Message:'`` and "
"``'Cc myself:'`` is generated from the field name by converting all "
"underscores to spaces and upper-casing the first letter. Again, note these "
"are merely sensible defaults; you can also specify labels manually."
msgstr ""
"每个字段的文本标签——例如 ``'Subject:'``、``'Message:'`` 和 ``'Cc myself:'``，"
"是根据字段名将所有下划线转换为空格并将第一个字母大写而产生的。同样，请注意这"
"些只是合理的默认值；你也可以手动指定标签。"

msgid ""
"Each text label is surrounded in an HTML ``<label>`` tag, which points to "
"the appropriate form field via its ``id``. Its ``id``, in turn, is generated "
"by prepending ``'id_'`` to the field name. The ``id`` attributes and "
"``<label>`` tags are included in the output by default, to follow best "
"practices, but you can change that behavior."
msgstr ""
"每个文本标签都被一个 HTML ``<label>`` 标签包围，该标签通过其 ``id`` 指向相应"
"的表格字段。而它的 ``id`` 则是通过在字段名前加上 ``'id_'`` 生成的。``id`` 属"
"性和 ``<label>`` 标签默认包含在输出中，以遵循最佳实践，但你可以改变这种行为。"

msgid ""
"The output uses HTML5 syntax, targeting ``<!DOCTYPE html>``. For example, it "
"uses boolean attributes such as ``checked`` rather than the XHTML style of "
"``checked='checked'``."
msgstr ""
"输出使用 HTML5 语法，目标是 ``<!DOCTYPE html>``。例如，它使用布尔属性，如 "
"``checked`` 而不是 XHTML 风格的 ``checked='checked'``。"

msgid ""
"Although ``<table>`` output is the default output style when you ``print`` a "
"form, other output styles are available. Each style is available as a method "
"on a form object, and each rendering method returns a string."
msgstr ""
"虽然当你 ``print`` 表单时，``<table>`` 输出是默认的输出样式，但还有其他的输出"
"样式。每种样式都可以作为表单对象的一个方法，每个渲染方法都返回一个字符串。"

msgid "Default rendering"
msgstr ""

msgid ""
"The default rendering when you ``print`` a form uses the following methods "
"and attributes."
msgstr ""

msgid "``template_name``"
msgstr "``template_name``"

msgid ""
"The name of the template rendered if the form is cast into a string, e.g. "
"via ``print(form)`` or in a template via ``{{ form }}``."
msgstr ""

msgid ""
"By default, a property returning the value of the renderer's :attr:`~django."
"forms.renderers.BaseRenderer.form_template_name`. You may set it as a string "
"template name in order to override that for a particular form class."
msgstr ""

msgid ""
"In older versions ``template_name`` defaulted to the string value ``'django/"
"forms/default.html'``."
msgstr ""

msgid "``render()``"
msgstr "``render()``"

msgid ""
"The render method is called by ``__str__`` as well as the :meth:`.Form."
"as_table`, :meth:`.Form.as_p`, and :meth:`.Form.as_ul` methods. All "
"arguments are optional and default to:"
msgstr ""
"渲染方法被 ``__str__`` 以及 :meth:`.Form.as_table`、:meth:`.Form.as_p` 和 :"
"meth:`.Form.as_ul` 方法调用。所有的参数都是可选的，默认为："

msgid "``template_name``: :attr:`.Form.template_name`"
msgstr "``template_name``： :attr:`.Form.template_name`"

msgid "``context``: Value returned by :meth:`.Form.get_context`"
msgstr "``context``：由 :meth:`.Form.get_context` 返回的值"

msgid "``renderer``: Value returned by :attr:`.Form.default_renderer`"
msgstr "``renderer``： 由 :attr:`.Form.default_renderer` 返回的值"

msgid ""
"By passing ``template_name`` you can customize the template used for just a "
"single call."
msgstr ""

msgid "``get_context()``"
msgstr "``get_context()``"

msgid "Return the template context for rendering the form."
msgstr ""

msgid "The available context is:"
msgstr "可用的上下文："

msgid "``form``: The bound form."
msgstr "``form``: 绑定表单"

msgid "``fields``: All bound fields, except the hidden fields."
msgstr "``fields``： 所有绑定字段，除了隐藏字段。"

msgid "``hidden_fields``: All hidden bound fields."
msgstr "`·hidden_fields``： 所有隐藏的绑定字段。"

msgid "``errors``: All non field related or hidden field related form errors."
msgstr "``errors``： 所有与字段无关的或与隐藏字段有关的表单错误。"

msgid "``template_name_label``"
msgstr "``template_name_label``"

msgid ""
"The template used to render a field's ``<label>``, used when calling :meth:"
"`BoundField.label_tag`/:meth:`~BoundField.legend_tag`. Can be changed per "
"form by overriding this attribute or more generally by overriding the "
"default template, see also :ref:`overriding-built-in-form-templates`."
msgstr ""

msgid "Output styles"
msgstr ""

msgid ""
"As well as rendering the form directly, such as in a template with "
"``{{ form }}``, the following helper functions serve as a proxy to :meth:"
"`Form.render` passing a particular ``template_name`` value."
msgstr ""

msgid ""
"These helpers are most useful in a template, where you need to override the "
"form renderer or form provided value but cannot pass the additional "
"parameter to :meth:`~Form.render`. For example, you can render a form as an "
"unordered list using ``{{ form.as_ul }}``."
msgstr ""

msgid ""
"Each helper pairs a form method with an attribute giving the appropriate "
"template name."
msgstr ""

msgid "``as_div()``"
msgstr "``as_div()``"

msgid ""
"The template used by ``as_div()``. Default: ``'django/forms/div.html'``."
msgstr "``as_div()`` 使用的模板。默认值：``'django/forms/div.html'``。"

msgid ""
"``as_div()`` renders the form as a series of ``<div>`` elements, with each "
"``<div>`` containing one field, such as:"
msgstr ""
"``as_div()`` 将表单呈现为一系列 ``<div>`` 元素，每个 ``<div>`` 包含一个字段，"
"例如："

msgid "… gives HTML like:"
msgstr ""

msgid ""
"Of the framework provided templates and output styles, ``as_div()`` is "
"recommended over the ``as_p()``, ``as_table()``, and ``as_ul()`` versions as "
"the template implements ``<fieldset>`` and ``<legend>`` to group related "
"inputs and is easier for screen reader users to navigate."
msgstr ""

msgid "``as_p()``"
msgstr "``as_p()``"

msgid "The template used by ``as_p()``. Default: ``'django/forms/p.html'``."
msgstr ""

msgid ""
"``as_p()`` renders the form as a series of ``<p>`` tags, with each ``<p>`` "
"containing one field:"
msgstr ""

msgid "``as_ul()``"
msgstr "``as_ul()``"

msgid "The template used by ``as_ul()``. Default: ``'django/forms/ul.html'``."
msgstr ""

msgid ""
"``as_ul()`` renders the form as a series of ``<li>`` tags, with each "
"``<li>`` containing one field. It does *not* include the ``<ul>`` or ``</"
"ul>``, so that you can specify any HTML attributes on the ``<ul>`` for "
"flexibility:"
msgstr ""

msgid "``as_table()``"
msgstr "``as_table()``"

msgid ""
"The template used by ``as_table()``. Default: ``'django/forms/table.html'``."
msgstr ""

msgid "``as_table()`` renders the form as an HTML ``<table>``:"
msgstr ""

msgid "Styling required or erroneous form rows"
msgstr "样式化必填或错误的表单行"

msgid ""
"It's pretty common to style form rows and fields that are required or have "
"errors. For example, you might want to present required form rows in bold "
"and highlight errors in red."
msgstr ""
"对必填或有错误的表单行和字段进行样式设计是很常见的。例如，你可能想用粗体显示"
"必填的表格行，用红色突出显示错误。"

msgid ""
"The :class:`Form` class has a couple of hooks you can use to add ``class`` "
"attributes to required rows or to rows with errors: set the :attr:`Form."
"error_css_class` and/or :attr:`Form.required_css_class` attributes::"
msgstr ""
":class:`Form` 类有几个钩子，你可以用来给必填行或有错误的行添加 ``class`` 属"
"性：设置 :attr:`Form.error_css_class` 和／或 :attr:`Form.required_css_class` "
"属性："

msgid ""
"Once you've done that, rows will be given ``\"error\"`` and/or "
"``\"required\"`` classes, as needed. The HTML will look something like:"
msgstr ""

msgid "Configuring form elements' HTML ``id`` attributes and ``<label>`` tags"
msgstr "设置表单元素的 HTML ``id`` 属性和 ``<label>`` 标签。"

msgid "By default, the form rendering methods include:"
msgstr "默认情况下，表单渲染方法包括："

msgid "HTML ``id`` attributes on the form elements."
msgstr "表单元素的 HTML ``id`` 属性。"

msgid ""
"The corresponding ``<label>`` tags around the labels. An HTML ``<label>`` "
"tag designates which label text is associated with which form element. This "
"small enhancement makes forms more usable and more accessible to assistive "
"devices. It's always a good idea to use ``<label>`` tags."
msgstr ""
"标签周围对应的 ``<label>`` 标签。HTML ``<label>`` 标签指定了哪个标签文本与哪"
"个表单元素相关联。这个小小的改进使表单更加可用，也更容易被辅助设备访问。使用 "
"``<label>`` 标签总是一个好主意。"

msgid ""
"The ``id`` attribute values are generated by prepending ``id_`` to the form "
"field names.  This behavior is configurable, though, if you want to change "
"the ``id`` convention or remove HTML ``id`` attributes and ``<label>`` tags "
"entirely."
msgstr ""
"``id`` 属性值是通过将 ``id_`` 预置到表单字段名后生成的。 如果你想改变 ``id`` "
"惯例或完全删除 HTML ``id`` 属性和 ``<label>`` 标签，这种行为是可以设置的。"

msgid ""
"Use the ``auto_id`` argument to the ``Form`` constructor to control the "
"``id`` and label behavior. This argument must be ``True``, ``False`` or a "
"string."
msgstr ""
"使用 ``Form`` 构造函数的 ``auto_id`` 参数来控制 ``id`` 和标签行为。这个参数必"
"须是 ``True``、``False`` 或一个字符串。"

msgid ""
"If ``auto_id`` is ``False``, then the form output will not include "
"``<label>`` tags nor ``id`` attributes:"
msgstr ""

msgid ""
"If ``auto_id`` is set to ``True``, then the form output *will* include "
"``<label>`` tags and will use the field name as its ``id`` for each form "
"field:"
msgstr ""

msgid ""
"If ``auto_id`` is set to a string containing the format character ``'%s'``, "
"then the form output will include ``<label>`` tags, and will generate ``id`` "
"attributes based on the format string. For example, for a format string "
"``'field_%s'``, a field named ``subject`` will get the ``id`` value "
"``'field_subject'``. Continuing our example:"
msgstr ""

msgid ""
"If ``auto_id`` is set to any other true value -- such as a string that "
"doesn't include ``%s`` -- then the library will act as if ``auto_id`` is "
"``True``."
msgstr ""
"如果 ``auto_id`` 被设置为任何其他的真值——比如一个不包含 ``%s`` 的字符串——那么"
"该库就会像 ``auto_id`` 是 ``True`` 一样。"

msgid "By default, ``auto_id`` is set to the string ``'id_%s'``."
msgstr "默认情况下，``auto_id`` 被设置为字符串 ``'id_%s'``。"

msgid ""
"A translatable string (defaults to a colon (``:``) in English) that will be "
"appended after any label name when a form is rendered."
msgstr ""
"一个可翻译的字符串（英文默认为冒号（``:``）），将在渲染表格时附加在任何标签名"
"称之后。"

msgid ""
"It's possible to customize that character, or omit it entirely, using the "
"``label_suffix`` parameter:"
msgstr ""

msgid ""
"Note that the label suffix is added only if the last character of the label "
"isn't a punctuation character (in English, those are ``.``, ``!``, ``?`` or "
"``:``)."
msgstr ""
"请注意，只有当标签的最后一个字符不是标点符号时，才会加上标签后缀（在英文中，"
"这些字符是 ``.``、``!``、``?`` 或 ``:``）。"

msgid ""
"Fields can also define their own :attr:`~django.forms.Field.label_suffix`. "
"This will take precedence over :attr:`Form.label_suffix <django.forms.Form."
"label_suffix>`. The suffix can also be overridden at runtime using the "
"``label_suffix`` parameter to :meth:`~django.forms.BoundField.label_tag`/ :"
"meth:`~django.forms.BoundField.legend_tag`."
msgstr ""

msgid ""
"When set to ``True`` (the default), required form fields will have the "
"``required`` HTML attribute."
msgstr ""
"当设置为 ``True`` （默认）时，必填表单字段将有 ``required`` HTML 属性。"

msgid ""
":doc:`Formsets </topics/forms/formsets>` instantiate forms with "
"``use_required_attribute=False`` to avoid incorrect browser validation when "
"adding and deleting forms from a formset."
msgstr ""
":doc:`表单集 </topics/forms/formsets>` 实例化表单时使用 "
"``use_required_attribute=False`` 以避免从表单集中添加和删除表单时浏览器验证错"
"误。"

msgid "Configuring the rendering of a form's widgets"
msgstr "设置表单组件的渲染方式"

msgid ""
"Specifies the :doc:`renderer <renderers>` to use for the form. Defaults to "
"``None`` which means to use the default renderer specified by the :setting:"
"`FORM_RENDERER` setting."
msgstr ""
"指定 :doc:`渲染器 <renderers>` 用于表单的渲染。默认值为 ``None``，表示使用 :"
"setting:`FORM_RENDERER` 设置中指定的默认渲染器。"

msgid ""
"You can set this as a class attribute when declaring your form or use the "
"``renderer`` argument to ``Form.__init__()``. For example::"
msgstr ""
"你可以在声明你的表单时将其设置为一个类属性，或者使用 ``Form.__init__()`` 的 "
"``renderer`` 参数。例如："

msgid "or::"
msgstr "或者："

msgid "Notes on field ordering"
msgstr "字段顺序的注意事项"

msgid ""
"In the ``as_p()``, ``as_ul()`` and ``as_table()`` shortcuts, the fields are "
"displayed in the order in which you define them in your form class. For "
"example, in the ``ContactForm`` example, the fields are defined in the order "
"``subject``, ``message``, ``sender``, ``cc_myself``. To reorder the HTML "
"output, change the order in which those fields are listed in the class."
msgstr ""
"在 ``as_p()``、``as_ul()`` 和 ``as_table()`` 快捷方式中，字段是按照你在表单类"
"中定义的顺序显示的。例如，在 ``ContactForm`` 的例子中，字段是按照 "
"``subject``、``message``、``sender``、``cc_myself`` 的顺序定义的。要调整 "
"HTML 输出的顺序，改变这些字段在类中的排列顺序。"

msgid "There are several other ways to customize the order:"
msgstr "还有其他几种方式可以自定义顺序："

msgid ""
"By default ``Form.field_order=None``, which retains the order in which you "
"define the fields in your form class. If ``field_order`` is a list of field "
"names, the fields are ordered as specified by the list and remaining fields "
"are appended according to the default order. Unknown field names in the list "
"are ignored. This makes it possible to disable a field in a subclass by "
"setting it to ``None`` without having to redefine ordering."
msgstr ""
"默认情况下 ``Form.field_order=None``，它保留了你在表单类中定义字段的顺序。如"
"果 ``field_order`` 是一个字段名的列表，则字段按列表指定的顺序排列，其余字段按"
"默认顺序追加。列表中未知的字段名将被忽略。这使得在子类中可以通过将字段设置为 "
"``None`` 来禁用字段，而不必重新定义排序。"

msgid ""
"You can also use the ``Form.field_order`` argument to a :class:`Form` to "
"override the field order. If a :class:`~django.forms.Form` defines :attr:"
"`~Form.field_order` *and* you include ``field_order`` when instantiating the "
"``Form``, then the latter ``field_order`` will have precedence."
msgstr ""
"你也可以使用 :class:`Form` 的 ``Form.field_order`` 参数来覆盖字段顺序。如果一"
"个 :class:`~django.forms.Form` 定义了 :attr:`~Form.field_order`，*并且* 你在"
"实例化 ``Form`` 时包含了 ``field_order``，那么后者的 ``field_order`` 将具有优"
"先权。"

msgid ""
"You may rearrange the fields any time using ``order_fields()`` with a list "
"of field names as in :attr:`~django.forms.Form.field_order`."
msgstr ""
"你可以在任何时候使用 ``order_fields()`` 对字段进行重新排列，字段名列表如 :"
"attr:`~django.forms.Form.field_order`。"

msgid "How errors are displayed"
msgstr "如何显示错误"

msgid ""
"If you render a bound ``Form`` object, the act of rendering will "
"automatically run the form's validation if it hasn't already happened, and "
"the HTML output will include the validation errors as a ``<ul "
"class=\"errorlist\">`` near the field. The particular positioning of the "
"error messages depends on the output method you're using:"
msgstr ""

msgid "Customizing the error list format"
msgstr "自定义错误列表格式"

msgid ""
"By default, forms use ``django.forms.utils.ErrorList`` to format validation "
"errors. ``ErrorList`` is a list like object where ``initlist`` is the list "
"of errors. In addition this class has the following attributes and methods."
msgstr ""
"默认情况下，表单使用 ``django.forms.utils.ErrorList`` 来格式化验证错误。"
"``ErrorList`` 是一个类似列表的对象，其中 ``initlist`` 是错误列表。此外，这个"
"类有以下属性和方法。"

msgid ""
"The CSS classes to be used when rendering the error list. Any provided "
"classes are added to the default ``errorlist`` class."
msgstr ""
"渲染错误列表时要使用的 CSS 类。任何提供的类将被添加到默认的 ``errorlist`` 类"
"中。"

msgid ""
"Specifies the :doc:`renderer <renderers>` to use for ``ErrorList``. Defaults "
"to ``None`` which means to use the default renderer specified by the :"
"setting:`FORM_RENDERER` setting."
msgstr ""
"指定 :doc:`渲染器 <renderers>` 用于 ``ErrorList``。默认为 ``None``，即使用"
"由 :setting:`FORM_RENDER` 配置指定的默认渲染器。"

msgid ""
"The name of the template used when calling ``__str__`` or :meth:`render`. By "
"default this is ``'django/forms/errors/list/default.html'`` which is a proxy "
"for the ``'ul.html'`` template."
msgstr ""
"调用 ``__str__`` 或 :meth:`render` 时使用的模板名称。默认情况下，这是 "
"``'django/forms/errors/list/default.html'``，它是 ``'ul.html'`` 模板的代理。"

msgid ""
"The name of the template used when calling :meth:`.as_text`. By default this "
"is ``'django/forms/errors/list/text.html'``. This template renders the "
"errors as a list of bullet points."
msgstr ""
"调用 :meth:`.as_text` 时使用的模板名称。默认是 ``'django/forms/errors/list/"
"text.html'``。该模板将错误显示为一个列表，其中包含了一些要点。"

msgid ""
"The name of the template used when calling :meth:`.as_ul`. By default this "
"is ``'django/forms/errors/list/ul.html'``. This template renders the errors "
"in ``<li>`` tags with a wrapping ``<ul>`` with the CSS classes as defined "
"by :attr:`.error_class`."
msgstr ""
"调用 :meth:`.as_ul` 时使用的模板名称。默认情况下，这是 ``'django/forms/"
"errors/list/ul.html'``。这个模板在 ``<li>`` 标签中渲染错误，并使用 :attr:`."
"error_class` 所定义的 CSS 类来包装 ``<ul>``。"

msgid "Return context for rendering of errors in a template."
msgstr "返回模板中渲染错误的上下文。"

msgid "``errors`` : A list of the errors."
msgstr "``errors``： 一个错误列表。"

msgid "``error_class`` : A string of CSS classes."
msgstr "``error_class``：一个 CSS 类的字符串。"

msgid ""
"The render method is called by ``__str__`` as well as by the :meth:`.as_ul` "
"method."
msgstr "渲染方法被 ``__str__`` 以及 :meth:`.as_ul` 方法所调用。"

msgid "All arguments are optional and will default to:"
msgstr "所有参数都是可选的，将默认为："

msgid "``template_name``: Value returned by :attr:`.template_name`"
msgstr "``template_name``：由 :attr:`.template_name` 返回的值。"

msgid "``context``: Value returned by :meth:`.get_context`"
msgstr "``context``： 由 :meth:`.get_context` 返回的值"

msgid "``renderer``: Value returned by :attr:`.renderer`"
msgstr "``renderer``： 由 :attr:`.renderer` 返回的值"

msgid ""
"Renders the error list using the template defined by :attr:`."
"template_name_text`."
msgstr "使用由 :attr:`.template_name_text` 定义的模板渲染错误列表。"

msgid ""
"Renders the error list using the template defined by :attr:`."
"template_name_ul`."
msgstr "使用由 :attr:`.template_name_ul` 定义的模板渲染错误列表。"

msgid ""
"If you'd like to customize the rendering of errors this can be achieved by "
"overriding the :attr:`.template_name` attribute or more generally by "
"overriding the default template, see also :ref:`overriding-built-in-form-"
"templates`."
msgstr ""
"如果你想自定义错误的渲染，这可以通过覆盖 :attr:`.template_name` 属性来实现，"
"或者更普遍地通过覆盖默认模板来实现，也可以参见 :ref:`overriding-built-in-"
"form-templates`。"

msgid ""
"The ability to return a ``str`` when calling the ``__str__`` method is "
"deprecated. Use the template engine instead which returns a ``SafeString``."
msgstr ""
"当调用 ``__str__`` 方法时，返回 ``str`` 的能力已被弃用。使用模板引擎代替，它"
"返回一个 ``SafeString``。"

msgid "More granular output"
msgstr "更精细的输出"

msgid ""
"The ``as_p()``, ``as_ul()``, and ``as_table()`` methods are shortcuts -- "
"they're not the only way a form object can be displayed."
msgstr ""
"``as_p()``、``as_ul()`` 和 ``as_table()`` 方法都是快捷方式——它们并不是显示表"
"单对象的唯一方式。"

msgid ""
"Used to display HTML or access attributes for a single field of a :class:"
"`Form` instance."
msgstr "用于显示 :class:`Form` 实例的单个字段的 HTML 或访问属性。"

msgid ""
"The ``__str__()`` method of this object displays the HTML for this field."
msgstr "该对象的 ``__str__()`` 方法显示该字段的 HTML。"

msgid ""
"To retrieve a single ``BoundField``, use dictionary lookup syntax on your "
"form using the field's name as the key:"
msgstr ""

msgid "To retrieve all ``BoundField`` objects, iterate the form:"
msgstr ""

msgid "The field-specific output honors the form object's ``auto_id`` setting:"
msgstr ""

msgid "Attributes of ``BoundField``"
msgstr "``BoundField`` 的属性"

msgid ""
"The HTML ID attribute for this ``BoundField``. Returns an empty string if :"
"attr:`Form.auto_id` is ``False``."
msgstr ""
"``BoundField`` 的 HTML ID 属性。如果 :attr:`Form.auto_id` 是 ``False``，则返"
"回一个空字符串。"

msgid ""
"This property returns the data for this :class:`~django.forms.BoundField` "
"extracted by the widget's :meth:`~django.forms.Widget.value_from_datadict` "
"method, or ``None`` if it wasn't given:"
msgstr ""

msgid ""
"A :ref:`list-like object <ref-forms-error-list-format>` that is displayed as "
"an HTML ``<ul class=\"errorlist\">`` when printed:"
msgstr ""

msgid ""
"The form :class:`~django.forms.Field` instance from the form class that "
"this :class:`~django.forms.BoundField` wraps."
msgstr ""
"这个 :class:`~django.forms.Field` 封装的表单类中的表单 :class:`~django.forms."
"BoundField` 实例。"

msgid ""
"The :class:`~django.forms.Form` instance this :class:`~django.forms."
"BoundField` is bound to."
msgstr ""
"这个 :class:`~django.forms.Form` 实例与这个 :class:`~django.forms."
"BoundField` 绑定。"

msgid "The :attr:`~django.forms.Field.help_text` of the field."
msgstr "字段的 :attr:`~django.forms.Field.help_text`。"

msgid ""
"The name that will be used in the widget's HTML ``name`` attribute. It takes "
"the form :attr:`~django.forms.Form.prefix` into account."
msgstr ""
"部件的 HTML ``name`` 属性中使用的名称。它考虑到了 :attr:`~django.forms.Form."
"prefix` 的形式。"

msgid ""
"Use this property to render the ID of this field. For example, if you are "
"manually constructing a ``<label>`` in your template (despite the fact that :"
"meth:`~BoundField.label_tag`/:meth:`~BoundField.legend_tag` will do this for "
"you):"
msgstr ""

msgid ""
"By default, this will be the field's name prefixed by ``id_`` "
"(\"``id_my_field``\" for the example above). You may modify the ID by "
"setting :attr:`~django.forms.Widget.attrs` on the field's widget. For "
"example, declaring a field like this::"
msgstr ""
"默认情况下，这将是字段的名称，前缀为 ``id_`` （上面的例子为 "
"\"``id_my_field``\"）。你可以通过设置 :attr:`~django.forms.Widget.attrs` 对字"
"段的部件进行修改。例如，声明一个字段是这样的："

msgid "and using the template above, would render something like:"
msgstr "并使用上面的模板，会呈现出这样的效果："

msgid ""
"Use :attr:`BoundField.initial` to retrieve initial data for a form field. It "
"retrieves the data from :attr:`Form.initial` if present, otherwise trying :"
"attr:`Field.initial`. Callable values are evaluated. See :ref:`ref-forms-"
"initial-form-values` for more examples."
msgstr ""
"使用 :attr:`BoundField.initial` 来检索一个表单字段的初始数据。如果存在，它"
"从 :attr:`Form.initial` 检索数据，否则尝试 :attr:`Field.initial`。值为可调用"
"对象将被执行。参见 :ref:`ref-forms-initial-form-values` 获取更多的例子。"

msgid ""
":attr:`BoundField.initial` caches its return value, which is useful "
"especially when dealing with callables whose return values can change (e.g. "
"``datetime.now`` or ``uuid.uuid4``):"
msgstr ""

msgid ""
"Using :attr:`BoundField.initial` is recommended over :meth:`~Form."
"get_initial_for_field()`."
msgstr ""
"建议使用 :attr:`BoundField.initial` 而不是 :meth:`~Form."
"get_initial_for_field()`。"

msgid ""
"Returns ``True`` if this :class:`~django.forms.BoundField`'s widget is "
"hidden."
msgstr ""
"如果这个 :class:`~django.forms.BoundField` 的部件被隐藏，返回 ``True``。"

msgid ""
"The :attr:`~django.forms.Field.label` of the field. This is used in :meth:"
"`~BoundField.label_tag`/:meth:`~BoundField.legend_tag`."
msgstr ""

msgid "The name of this field in the form:"
msgstr ""

msgid ""
"Returns the value of this BoundField widget's ``use_fieldset`` attribute."
msgstr ""

msgid ""
"Returns the lowercased class name of the wrapped field's widget, with any "
"trailing ``input`` or ``widget`` removed. This may be used when building "
"forms where the layout is dependent upon the widget type. For example:"
msgstr ""

msgid "Methods of ``BoundField``"
msgstr "``BoundField`` 方法"

msgid ""
"Returns a string of HTML for representing this as an ``<input "
"type=\"hidden\">``."
msgstr "返回将其表示为 ``<input type=\"hidden\">`` 的 HTML 字符串。"

msgid "``**kwargs`` are passed to :meth:`~django.forms.BoundField.as_widget`."
msgstr "``**kwargs`` 传递给 :meth:`~django.forms.BoundField.as_widget`。"

msgid ""
"This method is primarily used internally. You should use a widget instead."
msgstr "这个方法主要在内部使用。你应该使用部件来代替。"

msgid ""
"Renders the field by rendering the passed widget, adding any HTML attributes "
"passed as ``attrs``.  If no widget is specified, then the field's default "
"widget will be used."
msgstr ""
"通过渲染通过的部件来渲染该字段，并添加作为 ``attrs`` 传递的任何 HTML 属性。 "
"如果没有指定部件，那么将使用该字段的默认部件。"

msgid ""
"``only_initial`` is used by Django internals and should not be set "
"explicitly."
msgstr "``only_initial`` 是 Django 内部使用的，不应该明确设置。"

msgid ""
"When you use Django's rendering shortcuts, CSS classes are used to indicate "
"required form fields or fields that contain errors. If you're manually "
"rendering a form, you can access these CSS classes using the ``css_classes`` "
"method:"
msgstr ""

msgid ""
"If you want to provide some additional classes in addition to the error and "
"required classes that may be required, you can provide those classes as an "
"argument:"
msgstr ""

msgid ""
"Renders a label tag for the form field using the template specified by :attr:"
"`.Form.template_name_label`."
msgstr ""
"使用 :attr:`.Form.template_name_label` 指定的模板，为表单字段渲染一个标签。"

msgid "``field``: This instance of the :class:`BoundField`."
msgstr "``field``：这个 :class:`BoundField` 的实例。"

msgid ""
"``contents``: By default a concatenated string of :attr:`BoundField.label` "
"and :attr:`Form.label_suffix` (or :attr:`Field.label_suffix`, if set). This "
"can be overridden by the ``contents`` and ``label_suffix`` arguments."
msgstr ""
"``contents``：默认是 :attr:`BoundField.label` 和 :attr:`Form.label_suffix` "
"（或者 :attr:`Field.label_suffix`, 如果设置的话）的连接字符串。这可以被 "
"``contents`` 和 ``label_suffix`` 参数所覆盖。"

msgid ""
"``attrs``: A ``dict`` containing ``for``, :attr:`Form.required_css_class`, "
"and ``id``. ``id`` is generated by the field's widget ``attrs`` or :attr:"
"`BoundField.auto_id`. Additional attributes can be provided by the ``attrs`` "
"argument."
msgstr ""
"``attrs``：一个包含 ``for``、:attr:`Form.required_css_class` 和 ``id`` 的 "
"``dict``。``id`` 是由字段的部件 ``attrs`` 或 :attr:`BoundField.auto_id` 产生"
"的。其他的属性可以由 ``attrs`` 参数提供。"

msgid ""
"``use_tag``: A boolean which is ``True`` if the label has an ``id``. If "
"``False`` the default template omits the ``tag``."
msgstr ""

msgid ""
"``tag``: An optional string to customize the tag, defaults to ``label``."
msgstr ""

msgid ""
"In your template ``field`` is the instance of the ``BoundField``. Therefore "
"``field.field`` accesses :attr:`BoundField.field` being the field you "
"declare, e.g. ``forms.CharField``."
msgstr ""
"在你的模板中 ``field`` 是 ``BoundField`` 的实例。因此 ``field.field`` 访问 :"
"attr:`BoundField.field` 是你声明的字段，例如 ``forms.CharField``。"

msgid ""
"To separately render the label tag of a form field, you can call its "
"``label_tag()`` method:"
msgstr ""

msgid ""
"If you'd like to customize the rendering this can be achieved by overriding "
"the :attr:`.Form.template_name_label` attribute or more generally by "
"overriding the default template, see also :ref:`overriding-built-in-form-"
"templates`."
msgstr ""
"如果你想自定义渲染，这可以通过覆盖 :attr:`.Form.template_name_label` 属性来实"
"现，或者更普遍地通过覆盖默认模板来实现，也可以参见 :ref:`overriding-built-in-"
"form-templates`。"

msgid "The ``tag`` argument was added."
msgstr "添加了 ``tag`` 参数。"

msgid ""
"Calls :meth:`.label_tag` with ``tag='legend'`` to render the label with "
"``<legend>`` tags. This is useful when rendering radio and multiple checkbox "
"widgets where ``<legend>`` may be more appropriate than a ``<label>``."
msgstr ""

msgid ""
"Use this method to render the raw value of this field as it would be "
"rendered by a ``Widget``:"
msgstr ""

msgid "Customizing ``BoundField``"
msgstr "自定义 ``BoundField``"

msgid ""
"If you need to access some additional information about a form field in a "
"template and using a subclass of :class:`~django.forms.Field` isn't "
"sufficient, consider also customizing :class:`~django.forms.BoundField`."
msgstr ""
"如果你需要访问模板中表单字段的一些附加信息，而使用 :class:`~django.forms."
"Field` 的子类还不够，也可以考虑自定义 :class:`~django.forms.BoundField`。"

msgid "A custom form field can override ``get_bound_field()``:"
msgstr "自定义表单字段可以覆盖 ``get_bound_field()``。"

msgid ""
"Takes an instance of :class:`~django.forms.Form` and the name of the field. "
"The return value will be used when accessing the field in a template. Most "
"likely it will be an instance of a subclass of :class:`~django.forms."
"BoundField`."
msgstr ""
"取一个 :class:`~django.forms.Form` 的实例和字段名。当在模板中访问该字段时，将"
"使用返回值。它很可能是 :class:`~django.forms.BoundField` 的一个子类的实例。"

msgid ""
"If you have a ``GPSCoordinatesField``, for example, and want to be able to "
"access additional information about the coordinates in a template, this "
"could be implemented as follows::"
msgstr ""
"例如，如果你有一个 ``GPSCoordinatesField``，并希望能够在模板中访问关于坐标的"
"附加信息，可以按以下方式实现："

msgid ""
"Now you can access the country in a template with ``{{ form.coordinates."
"country }}``."
msgstr "现在你可以在模板中使用 ``{{form.coordinates.country }}`` 访问国家。"

msgid "Binding uploaded files to a form"
msgstr "将上传的文件绑定到表单中"

msgid ""
"Dealing with forms that have ``FileField`` and ``ImageField`` fields is a "
"little more complicated than a normal form."
msgstr ""
"处理有 ``FileField`` 和 ``ImageField`` 字段的表单比普通表单要复杂一些。"

msgid ""
"Firstly, in order to upload files, you'll need to make sure that your "
"``<form>`` element correctly defines the ``enctype`` as ``\"multipart/form-"
"data\"``:"
msgstr ""

msgid ""
"Secondly, when you use the form, you need to bind the file data. File data "
"is handled separately to normal form data, so when your form contains a "
"``FileField`` and ``ImageField``, you will need to specify a second argument "
"when you bind your form. So if we extend our ContactForm to include an "
"``ImageField`` called ``mugshot``, we need to bind the file data containing "
"the mugshot image:"
msgstr ""

msgid ""
"In practice, you will usually specify ``request.FILES`` as the source of "
"file data (just like you use ``request.POST`` as the source of form data):"
msgstr ""

msgid ""
"Constructing an unbound form is the same as always -- omit both form data "
"*and* file data:"
msgstr ""

msgid "Testing for multipart forms"
msgstr "多部分表格的测试"

msgid ""
"If you're writing reusable views or templates, you may not know ahead of "
"time whether your form is a multipart form or not. The ``is_multipart()`` "
"method tells you whether the form requires multipart encoding for submission:"
msgstr ""

msgid "Here's an example of how you might use this in a template:"
msgstr ""

msgid "Subclassing forms"
msgstr "子类化表单"

msgid ""
"If you have multiple ``Form`` classes that share fields, you can use "
"subclassing to remove redundancy."
msgstr "如果你有多个共享字段的 ``Form`` 类，你可以使用子类来消除冗余。"

msgid ""
"When you subclass a custom ``Form`` class, the resulting subclass will "
"include all fields of the parent class(es), followed by the fields you "
"define in the subclass."
msgstr ""
"当你将一个自定义的 ``Form`` 类子类化时，生成的子类将包括父类的所有字段，然后"
"是你在子类中定义的字段。"

msgid ""
"In this example, ``ContactFormWithPriority`` contains all the fields from "
"``ContactForm``, plus an additional field, ``priority``. The ``ContactForm`` "
"fields are ordered first:"
msgstr ""

msgid ""
"It's possible to subclass multiple forms, treating forms as mixins. In this "
"example, ``BeatleForm`` subclasses both ``PersonForm`` and "
"``InstrumentForm`` (in that order), and its field list includes the fields "
"from the parent classes:"
msgstr ""

msgid ""
"It's possible to declaratively remove a ``Field`` inherited from a parent "
"class by setting the name of the field to ``None`` on the subclass. For "
"example:"
msgstr ""

msgid "Prefixes for forms"
msgstr "表单前缀"

msgid ""
"You can put several Django forms inside one ``<form>`` tag. To give each "
"``Form`` its own namespace, use the ``prefix`` keyword argument:"
msgstr ""

msgid "The prefix can also be specified on the form class:"
msgstr ""

msgid "Form fields"
msgstr "表单字段"

msgid ""
"When you create a ``Form`` class, the most important part is defining the "
"fields of the form. Each field has custom validation logic, along with a few "
"other hooks."
msgstr ""
"当你创建一个 ``Form`` 类时，最重要的部分是定义表单的字段。每个字段都有自定义"
"的验证逻辑，以及其他一些钩子。"

msgid ""
"Although the primary way you'll use ``Field`` classes is in ``Form`` "
"classes, you can also instantiate them and use them directly to get a better "
"idea of how they work. Each ``Field`` instance has a ``clean()`` method, "
"which takes a single argument and either raises a ``django.core.exceptions."
"ValidationError`` exception or returns the clean value:"
msgstr ""

msgid "Core field arguments"
msgstr "核心字段参数"

msgid ""
"Each ``Field`` class constructor takes at least these arguments. Some "
"``Field`` classes take additional, field-specific arguments, but the "
"following should *always* be accepted:"
msgstr ""
"每个 ``Field`` 类的构造函数至少需要这些参数。有些 ``Field`` 类需要额外的、特"
"定的字段参数，但以下参数应 *始终* 接受："

msgid "``required``"
msgstr "``required``"

msgid ""
"By default, each ``Field`` class assumes the value is required, so if you "
"pass an empty value -- either ``None`` or the empty string (``\"\"``) -- "
"then ``clean()`` will raise a ``ValidationError`` exception:"
msgstr ""

msgid ""
"To specify that a field is *not* required, pass ``required=False`` to the "
"``Field`` constructor:"
msgstr ""

msgid ""
"If a ``Field`` has ``required=False`` and you pass ``clean()`` an empty "
"value, then ``clean()`` will return a *normalized* empty value rather than "
"raising ``ValidationError``. For ``CharField``, this will return :attr:"
"`~CharField.empty_value` which defaults to an empty string. For other "
"``Field`` classes, it might be ``None``. (This varies from field to field.)"
msgstr ""
"如果一个 ``Field`` 有 ``required=False``，而你给 ``clean()`` 传递一个空值，那"
"么 ``clean()`` 将返回一个 *规范化* 的空值，而不是引发 ``ValidationError``。对"
"于 ``CharField``，将返回 :attr:`~CharField.empty_value`，默认为一个空字符串。"
"对于其他 ``Field`` 类，它可能是 ``None``。（这因字段而异。）"

msgid ""
"Widgets of required form fields have the ``required`` HTML attribute. Set "
"the :attr:`Form.use_required_attribute` attribute to ``False`` to disable "
"it. The ``required`` attribute isn't included on forms of formsets because "
"the browser validation may not be correct when adding and deleting formsets."
msgstr ""
"必填表单字段的部件有 ``required`` HTML 属性。将 :attr:`Form."
"use_required_attribute` 属性设置为 ``False`` 就可以禁用。由于在添加和删除表单"
"集时，浏览器的验证可能不正确，所以表单集的表单中不包含 ``required`` 属性。"

msgid "``label``"
msgstr "``label``"

msgid ""
"The ``label`` argument lets you specify the \"human-friendly\" label for "
"this field. This is used when the ``Field`` is displayed in a ``Form``."
msgstr ""
"``label`` 参数让你指定该字段的“人类友好”标签。当 ``Field`` 在 ``Form`` 中显示"
"时，会用到这个标签。"

msgid ""
"As explained in \"Outputting forms as HTML\" above, the default label for a "
"``Field`` is generated from the field name by converting all underscores to "
"spaces and upper-casing the first letter. Specify ``label`` if that default "
"behavior doesn't result in an adequate label."
msgstr ""
"如上文“将表格输出为 HTML”中所解释的，``Field`` 的默认标签是由字段名通过将所有"
"下划线转换为空格并将第一个字母大写而生成的。如果默认行为不能产生一个适当的标"
"签，请指定 ``label``。"

msgid ""
"Here's a full example ``Form`` that implements ``label`` for two of its "
"fields. We've specified ``auto_id=False`` to simplify the output:"
msgstr ""

msgid "``label_suffix``"
msgstr "``label_suffix``"

msgid ""
"The ``label_suffix`` argument lets you override the form's :attr:`~django."
"forms.Form.label_suffix` on a per-field basis:"
msgstr ""

msgid "``initial``"
msgstr "``initial``"

msgid ""
"The ``initial`` argument lets you specify the initial value to use when "
"rendering this ``Field`` in an unbound ``Form``."
msgstr ""
"``initial`` 参数让你指定在未绑定的 ``Form`` 中渲染这个 ``Field`` 时要使用的初"
"始值。"

msgid ""
"To specify dynamic initial data, see the :attr:`Form.initial` parameter."
msgstr "要指定动态初始数据，请参见 :attr:`Form.initial` 参数。"

msgid ""
"The use-case for this is when you want to display an \"empty\" form in which "
"a field is initialized to a particular value. For example:"
msgstr ""

msgid ""
"You may be thinking, why not just pass a dictionary of the initial values as "
"data when displaying the form? Well, if you do that, you'll trigger "
"validation, and the HTML output will include any validation errors:"
msgstr ""

msgid ""
"This is why ``initial`` values are only displayed for unbound forms. For "
"bound forms, the HTML output will use the bound data."
msgstr ""
"这就是为什么 ``initial`` 值只在未绑定的表单中显示。对于绑定的表格，HTML 输出"
"将使用绑定的数据。"

msgid ""
"Also note that ``initial`` values are *not* used as \"fallback\" data in "
"validation if a particular field's value is not given. ``initial`` values "
"are *only* intended for initial form display:"
msgstr ""

msgid "Instead of a constant, you can also pass any callable:"
msgstr ""

msgid ""
"The callable will be evaluated only when the unbound form is displayed, not "
"when it is defined."
msgstr ""
"只有在显示未绑定的表单时，而不是在定义表单时，才会对可调用对象表单执行。"

msgid "``widget``"
msgstr "``widget``"

msgid ""
"The ``widget`` argument lets you specify a ``Widget`` class to use when "
"rendering this ``Field``. See :doc:`/ref/forms/widgets` for more information."
msgstr ""
"``widget`` 参数让你指定一个 ``Widget`` 类，以便在渲染这个 ``Field`` 时使用。"
"参见 :doc:`/ref/forms/widgets` 了解更多信息。"

msgid "``help_text``"
msgstr "``help_text``"

msgid ""
"The ``help_text`` argument lets you specify descriptive text for this "
"``Field``. If you provide ``help_text``, it will be displayed next to the "
"``Field`` when the ``Field`` is rendered by one of the convenience ``Form`` "
"methods (e.g., ``as_ul()``)."
msgstr ""
"``help_text`` 参数让你为这个 ``Field`` 指定描述性文本。如果你提供了 "
"``help_text``，当 ``Field`` 被一个方便的 ``Form`` 方法（例如 ``as_ul()``）渲"
"染时，它将显示在 ``Field``` 旁边。"

msgid ""
"Like the model field's :attr:`~django.db.models.Field.help_text`, this value "
"isn't HTML-escaped in automatically-generated forms."
msgstr ""
"就像模型字段的 :attr:`~django.db.models.Field.help_text` 一样，这个值在自动生"
"成的表单中并没有被 HTML 封装。"

msgid ""
"Here's a full example ``Form`` that implements ``help_text`` for two of its "
"fields. We've specified ``auto_id=False`` to simplify the output:"
msgstr ""

msgid "``error_messages``"
msgstr "``error_messages``"

msgid ""
"The ``error_messages`` argument lets you override the default messages that "
"the field will raise. Pass in a dictionary with keys matching the error "
"messages you want to override. For example, here is the default error "
"message:"
msgstr ""

msgid "And here is a custom error message:"
msgstr ""

msgid ""
"In the `built-in Field classes`_ section below, each ``Field`` defines the "
"error message keys it uses."
msgstr ""
"在下面的 `内置字段类`_ 一节中，每个 ``Field`` 定义了它所使用的错误信息键。"

msgid "``validators``"
msgstr "``validators``"

msgid ""
"The ``validators`` argument lets you provide a list of validation functions "
"for this field."
msgstr "``validators`` 参数让你为这个字段提供一个验证函数列表。"

msgid ""
"See the :doc:`validators documentation </ref/validators>` for more "
"information."
msgstr "更多信息请参见 :doc:`验证器文档 </ref/validators>`。"

msgid "``localize``"
msgstr "``localize``"

msgid ""
"The ``localize`` argument enables the localization of form data input, as "
"well as the rendered output."
msgstr "``localize`` 参数可以实现表单数据输入和渲染输出的本地化。"

msgid ""
"See the :doc:`format localization </topics/i18n/formatting>` documentation "
"for more information."
msgstr "更多信息请参见 :doc:`格式本地化 </topics/i18n/formatting>` 文档。"

msgid "``disabled``"
msgstr "``disabled``"

msgid ""
"The ``disabled`` boolean argument, when set to ``True``, disables a form "
"field using the ``disabled`` HTML attribute so that it won't be editable by "
"users. Even if a user tampers with the field's value submitted to the "
"server, it will be ignored in favor of the value from the form's initial "
"data."
msgstr ""
"``disabled`` 布尔参数设置为 ``True`` 时，使用 ``disabled`` HTML 属性禁用表单"
"字段，使其不能被用户编辑。即使用户篡改了提交给服务器的字段值，也会被忽略，而"
"采用表单初始数据的值。"

msgid "Checking if the field data has changed"
msgstr "检查字段数据是否有变化"

msgid "``has_changed()``"
msgstr "``has_changed()``"

msgid ""
"The ``has_changed()`` method is used to determine if the field value has "
"changed from the initial value. Returns ``True`` or ``False``."
msgstr ""
"``has_changed()`` 方法用于确定字段值是否与初始值发生了变化。返回 ``True`` 或 "
"``False``。"

msgid "See the :class:`Form.has_changed()` documentation for more information."
msgstr "更多信息请参见 :class:`Form.has_changed()` 文档。"

msgid "Built-in ``Field`` classes"
msgstr "内置 ``Field`` 类"

msgid ""
"Naturally, the ``forms`` library comes with a set of ``Field`` classes that "
"represent common validation needs. This section documents each built-in "
"field."
msgstr ""
"当然，``forms`` 库附带了一组 ``Field`` 类，代表了常见的验证需求。本节将对每个"
"内置字段进行说明。"

msgid ""
"For each field, we describe the default widget used if you don't specify "
"``widget``. We also specify the value returned when you provide an empty "
"value (see the section on ``required`` above to understand what that means)."
msgstr ""
"对于每个字段，我们描述了在你没有指定 ``widget`` 时使用的默认部件。我们还指定"
"了当你提供一个空值时返回的值（参见上文 ``required`` 一节以了解其含义）。"

msgid "``BooleanField``"
msgstr "``BooleanField``"

msgid "Default widget: :class:`CheckboxInput`"
msgstr "默认部件：:class:`CheckboxInput`"

msgid "Empty value: ``False``"
msgstr "空值：``False``"

msgid "Normalizes to: A Python ``True`` or ``False`` value."
msgstr "规范化为：Python 的 ``True`` 或 ``False`` 值。"

msgid ""
"Validates that the value is ``True`` (e.g. the check box is checked) if the "
"field has ``required=True``."
msgstr ""
"如果字段有 ``required=True``，则验证该值是否为 ``True`` （例如，复选框被选"
"中）。"

msgid "Error message keys: ``required``"
msgstr "错误信息键：``required``"

msgid ""
"Since all ``Field`` subclasses have ``required=True`` by default, the "
"validation condition here is important. If you want to include a boolean in "
"your form that can be either ``True`` or ``False`` (e.g. a checked or "
"unchecked checkbox), you must remember to pass in ``required=False`` when "
"creating the ``BooleanField``."
msgstr ""
"由于所有 ``Field`` 子类默认都有 ``required=True``，这里的验证条件很重要。如果"
"你想在你的表单中包含一个布尔值，这个布尔值可以是 ``True`` 或 ``False`` （例如"
"一个选中或未选中的复选框），你必须记得在创建 ``BooleanField`` 时传递 "
"``required=False``。"

msgid "``CharField``"
msgstr "``CharField``"

msgid "Default widget: :class:`TextInput`"
msgstr "默认部件：:class:`TextInput`"

msgid "Empty value: Whatever you've given as :attr:`empty_value`."
msgstr "空值：不管你给 :attr:`empty_value` 的是什么。"

msgid "Normalizes to: A string."
msgstr "规范化为：一个字符串。"

msgid ""
"Uses :class:`~django.core.validators.MaxLengthValidator` and :class:`~django."
"core.validators.MinLengthValidator` if ``max_length`` and ``min_length`` are "
"provided. Otherwise, all inputs are valid."
msgstr ""
"如果提供了 ``max_length`` 和 ``min_length``，则使用 :class:`~django.core."
"validators.MaxLengthValidator` 和 :class:`~django.core.validators."
"MinLengthValidator`。否则，所有输入都有效。"

msgid "Error message keys: ``required``, ``max_length``, ``min_length``"
msgstr "错误信息键：``required``、``max_length``、``min_length``"

msgid "Has the following optional arguments for validation:"
msgstr ""

msgid ""
"If provided, these arguments ensure that the string is at most or at least "
"the given length."
msgstr "如果提供了这些参数，这些参数确保字符串的长度最多或至少是给定的长度。"

msgid ""
"If ``True`` (default), the value will be stripped of leading and trailing "
"whitespace."
msgstr "如果 ``True`` （默认），该值将被去掉前导和尾部的空白。"

msgid "The value to use to represent \"empty\". Defaults to an empty string."
msgstr "用来表示“空”的值。默认为空字符串。"

msgid "``ChoiceField``"
msgstr "``ChoiceField``"

msgid "Default widget: :class:`Select`"
msgstr "默认部件：:class:`Select`"

msgid "Empty value: ``''`` (an empty string)"
msgstr "空值：``''`` （空字符串）"

msgid "Validates that the given value exists in the list of choices."
msgstr "验证给定值是否存在于选择列表中。"

msgid "Error message keys: ``required``, ``invalid_choice``"
msgstr "错误信息键：``required``、``invalid_choice``"

msgid ""
"The ``invalid_choice`` error message may contain ``%(value)s``, which will "
"be replaced with the selected choice."
msgstr ""
"``invalid_choice`` 错误信息可能包含 ``%(value)s``，该信息将被替换为选定的选"
"择。"

msgid "Takes one extra argument:"
msgstr "需要一个额外的参数："

msgid ""
"Either an :term:`iterable` of 2-tuples to use as choices for this field, :"
"ref:`enumeration <field-choices-enum-types>` choices, or a callable that "
"returns such an iterable. This argument accepts the same formats as the "
"``choices`` argument to a model field. See the :ref:`model field reference "
"documentation on choices <field-choices>` for more details. If the argument "
"is a callable, it is evaluated each time the field's form is initialized, in "
"addition to during rendering. Defaults to an empty list."
msgstr ""
"或者是一个 :term:`iterable` 的二元元组作为这个字段的选择，或者是一个 :ref:"
"`enumeration <field-choices-enum-types>` 的选择，或者是一个返回这样一个迭代器"
"的可调用对象。这个参数接受的格式与模型字段的 ``choices`` 参数相同。更多细节请"
"参见 :ref:`模型字段引用文档中的选择 <field-choices>`。如果这个参数是可调用"
"的，那么除了在渲染过程中，每次初始化字段的表单时，它都会被执行。默认为空列"
"表。"

msgid "Choice type"
msgstr ""

msgid ""
"This field normalizes choices to strings, so if choices are required in "
"other data types, such as integers or booleans, consider using :class:"
"`TypedChoiceField` instead."
msgstr ""

msgid "``DateField``"
msgstr "``DateField``"

msgid "Default widget: :class:`DateInput`"
msgstr "默认部件：:class:`DateInput`"

msgid "Empty value: ``None``"
msgstr "空值：``None``"

msgid "Normalizes to: A Python ``datetime.date`` object."
msgstr "规范化为：Python 的 ``datetime.date`` 对象。"

msgid ""
"Validates that the given value is either a ``datetime.date``, ``datetime."
"datetime`` or string formatted in a particular date format."
msgstr ""
"验证给定值是 ``datetime.date``、``datetime.datetime`` 或以特定日期格式化的字"
"符串。"

msgid "Error message keys: ``required``, ``invalid``"
msgstr "错误信息键：``required``、``invalid``"

msgid "Takes one optional argument:"
msgstr "需要一个可选的参数："

msgid ""
"An iterable of formats used to attempt to convert a string to a valid "
"``datetime.date`` object."
msgstr ""

msgid ""
"If no ``input_formats`` argument is provided, the default input formats are "
"taken from :setting:`DATE_INPUT_FORMATS` if :setting:`USE_L10N` is "
"``False``, or from the active locale format ``DATE_INPUT_FORMATS`` key if "
"localization is enabled. See also :doc:`format localization </topics/i18n/"
"formatting>`."
msgstr ""
"如果没有提供 ``input_formats`` 参数，如果 :setting:`USE_L10N` 为 ``False``，"
"则默认输入格式来自 :setting:`DATE_INPUT_FORMATS`，如果启用了本地化，则默认输"
"入格式来自激活的的本地格式 ``DATE_INPUT_FORMATS`` 键。也请参见 :doc:`格式本地"
"化 </topics/i18n/formatting>`。"

msgid "``DateTimeField``"
msgstr "``DateTimeField``"

msgid "Default widget: :class:`DateTimeInput`"
msgstr "默认部件：:class:`DateTimeInput`"

msgid "Normalizes to: A Python ``datetime.datetime`` object."
msgstr "规范化为：Python 的 ``datetime.datetime`` 对象。"

msgid ""
"Validates that the given value is either a ``datetime.datetime``, ``datetime."
"date`` or string formatted in a particular datetime format."
msgstr ""
"验证给定的值是 ``datetime.datetime``、``datetime.date`` 或以特定日期时间格式"
"化的字符串。"

msgid ""
"An iterable of formats used to attempt to convert a string to a valid "
"``datetime.datetime`` object, in addition to ISO 8601 formats."
msgstr ""

msgid ""
"The field always accepts strings in ISO 8601 formatted dates or similar "
"recognized by :func:`~django.utils.dateparse.parse_datetime`. Some examples "
"are:"
msgstr ""

msgid "``'2006-10-25 14:30:59'``"
msgstr ""

msgid "``'2006-10-25T14:30:59'``"
msgstr ""

msgid "``'2006-10-25 14:30'``"
msgstr ""

msgid "``'2006-10-25T14:30'``"
msgstr ""

msgid "``'2006-10-25T14:30Z'``"
msgstr ""

msgid "``'2006-10-25T14:30+02:00'``"
msgstr ""

msgid "``'2006-10-25'``"
msgstr ""

msgid ""
"If no ``input_formats`` argument is provided, the default input formats are "
"taken from :setting:`DATETIME_INPUT_FORMATS` and :setting:"
"`DATE_INPUT_FORMATS` if :setting:`USE_L10N` is ``False``, or from the active "
"locale format ``DATETIME_INPUT_FORMATS`` and ``DATE_INPUT_FORMATS`` keys if "
"localization is enabled. See also :doc:`format localization </topics/i18n/"
"formatting>`."
msgstr ""
"如果没有提供 ``input_formats`` 参数，默认的输入格式来自 :setting:"
"`DATETIME_INPUT_FORMATS` 和 :setting:`DATE_INPUT_FORMATS`，如果: setting:"
"`USE_L10N` 为 ``False``，如果启用了本地化，则从激活的本地格式 "
"``DATETIME_INPUT_FORMATS`` 和 ``DATE_INPUT_FORMATS`` 键中获取。也请参见 :doc:"
"`格式本地化 </topics/i18n/formatting>`。"

msgid "``DecimalField``"
msgstr "``DecimalField``"

msgid ""
"Default widget: :class:`NumberInput` when :attr:`Field.localize` is "
"``False``, else :class:`TextInput`."
msgstr ""
"当 :attr:`Field.localize` 为 ``False`` 时是 :class:`NumberInput` 否则，该字段"
"的默认表单部件是 :class:`TextInput`。"

msgid "Normalizes to: A Python ``decimal``."
msgstr "规范化为：Python 的 ``decimal``。"

msgid ""
"Validates that the given value is a decimal. Uses :class:`~django.core."
"validators.MaxValueValidator` and :class:`~django.core.validators."
"MinValueValidator` if ``max_value`` and ``min_value`` are provided. Uses :"
"class:`~django.core.validators.StepValueValidator` if ``step_size`` is "
"provided. Leading and trailing whitespace is ignored."
msgstr ""

msgid ""
"Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``, "
"``max_digits``, ``max_decimal_places``, ``max_whole_digits``, ``step_size``."
msgstr ""

msgid ""
"The ``max_value`` and ``min_value`` error messages may contain "
"``%(limit_value)s``, which will be substituted by the appropriate limit. "
"Similarly, the ``max_digits``, ``max_decimal_places`` and "
"``max_whole_digits`` error messages may contain ``%(max)s``."
msgstr ""
"``max_value`` 和 ``min_value`` 错误信息可能包含 ``%(limit_value)s``，将用适当"
"的限制代替。同样，``max_digits``、``max_decimal_places`` 和 "
"``max_whole_digits`` 错误信息可能包含 ``%(max)s``。"

msgid "Takes five optional arguments:"
msgstr ""

msgid ""
"These control the range of values permitted in the field, and should be "
"given as ``decimal.Decimal`` values."
msgstr ""
"这些控制着字段中允许的数值范围，应以 ``decimal.Decimal`` 值的形式给出。"

msgid ""
"The maximum number of digits (those before the decimal point plus those "
"after the decimal point, with leading zeros stripped) permitted in the value."
msgstr "值中允许的最大数字（小数点前的数字加上小数点后的数字，去掉前导零）。"

msgid "The maximum number of decimal places permitted."
msgstr "允许的最大小数位数。"

msgid "Limit valid inputs to an integral multiple of ``step_size``."
msgstr ""

msgid "The ``step_size`` argument was added."
msgstr ""

msgid "``DurationField``"
msgstr "``DurationField``"

msgid "Normalizes to: A Python :class:`~python:datetime.timedelta`."
msgstr "规范化为：Python 的 :class:`~python:datetime.timedelta`。"

msgid ""
"Validates that the given value is a string which can be converted into a "
"``timedelta``. The value must be between :attr:`datetime.timedelta.min` and :"
"attr:`datetime.timedelta.max`."
msgstr ""
"验证给定值是否是一个字符串，可以转换成 ``timedelta``。该值必须在 :attr:"
"`datetime.timedelta.min` 和 :attr:`datetime.timedelta.max` 之间。"

msgid "Error message keys: ``required``, ``invalid``, ``overflow``."
msgstr "错误信息键：``required``、``invalid``、``overflow``"

msgid ""
"Accepts any format understood by :func:`~django.utils.dateparse."
"parse_duration`."
msgstr "接受 :func:`~django.utils.dateparse.parse_duration` 理解的任何格式。"

msgid "``EmailField``"
msgstr "``EmailField``"

msgid "Default widget: :class:`EmailInput`"
msgstr "默认部件：:class:`EmailInput`"

msgid "Empty value: Whatever you've given as ``empty_value``."
msgstr "空值：不管你给 :attr:`empty_value` 的是什么。"

msgid ""
"Uses :class:`~django.core.validators.EmailValidator` to validate that the "
"given value is a valid email address, using a moderately complex regular "
"expression."
msgstr ""
"使用 :class:`~django.core.validators.EmailValidator` 来验证给定的值是一个有效"
"的电子邮件地址，使用一个适度复杂的正则表达式。"

msgid ""
"Has the optional arguments ``max_length``, ``min_length``, and "
"``empty_value`` which work just as they do for :class:`CharField`. The "
"``max_length`` argument defaults to 320 (see :rfc:`3696#section-3`)."
msgstr ""

msgid "The default value for ``max_length`` was changed to 320 characters."
msgstr ""

msgid "``FileField``"
msgstr "``FileField``"

msgid "Default widget: :class:`ClearableFileInput`"
msgstr "默认部件：:class:`ClearableFileInput`"

msgid ""
"Normalizes to: An ``UploadedFile`` object that wraps the file content and "
"file name into a single object."
msgstr ""
"规范化为：一个 ``UploadedFile`` 对象，它将文件内容和文件名包装成一个单一对"
"象。"

msgid "Can validate that non-empty file data has been bound to the form."
msgstr "可以验证非空文件数据已经绑定到表单中。"

msgid ""
"Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, "
"``max_length``"
msgstr ""
"错误信息键：``required``、``invalid``、``missing``、``empty``、``max_length``"

msgid ""
"Has the optional arguments for validation: ``max_length`` and "
"``allow_empty_file``. If provided, these ensure that the file name is at "
"most the given length, and that validation will succeed even if the file "
"content is empty."
msgstr ""

msgid ""
"To learn more about the ``UploadedFile`` object, see the :doc:`file uploads "
"documentation </topics/http/file-uploads>`."
msgstr ""
"要了解更多关于 ``UploadedFile`` 对象的信息，请看 :doc:`文件上传文档 </topics/"
"http/file-uploads>`。"

msgid ""
"When you use a ``FileField`` in a form, you must also remember to :ref:`bind "
"the file data to the form <binding-uploaded-files>`."
msgstr ""
"当你在表单中使用 ``FileField`` 时，你还必须记住 :ref:`将文件数据绑定到表单中 "
"<binding-uploaded-files>`。"

msgid ""
"The ``max_length`` error refers to the length of the filename. In the error "
"message for that key, ``%(max)d`` will be replaced with the maximum filename "
"length and ``%(length)d`` will be replaced with the current filename length."
msgstr ""
"``max_length`` 错误指的是文件名的长度。在该键的错误信息中，``%(max)d`` 将被替"
"换为最大文件名长度，``%(length)d`` 将被替换为当前文件名长度。"

msgid "``FilePathField``"
msgstr "``FilePathField``"

msgid "Validates that the selected choice exists in the list of choices."
msgstr "验证选择是否存在于选择列表中。"

msgid ""
"The field allows choosing from files inside a certain directory. It takes "
"five extra arguments; only ``path`` is required:"
msgstr ""
"该字段允许从某个目录内的文件中选择。它需要五个额外的参数；只有 ``path`` 是必"
"须的。"

msgid ""
"The absolute path to the directory whose contents you want listed. This "
"directory must exist."
msgstr "你想要列出的内容的目录的绝对路径。该目录必须存在。"

msgid ""
"If ``False`` (the default) only the direct contents of ``path`` will be "
"offered as choices. If ``True``, the directory will be descended into "
"recursively and all descendants will be listed as choices."
msgstr ""
"如果 ``False`` （默认），只提供 ``path`` 的直接内容作为选择。如果 ``True``，"
"目录将被递归递进，所有的子目录将被列为选择。"

msgid ""
"A regular expression pattern; only files with names matching this expression "
"will be allowed as choices."
msgstr "正则表达式模式；只允许将名称与此表达式相匹配的文件作为选择。"

msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``True``.  Specifies "
"whether files in the specified location should be included.  Either this or :"
"attr:`allow_folders` must be ``True``."
msgstr ""
"可选。 可选 ``True`` 或 ``False``。 默认值是 ``True``。 指定是否应该包含指定"
"位置的文件。 此项或 :attr:`allow_folders` 必须为 ``True``。"

msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``False``.  Specifies "
"whether folders in the specified location should be included.  Either this "
"or :attr:`allow_files` must be ``True``."
msgstr ""
"可选。 可选 ``True`` 或 ``False``。 默认为 ``False``。 指定是否应包括指定位置"
"的文件夹。 此项或 :attr:`allow_files` 必须为 ``True``。"

msgid "``FloatField``"
msgstr "``FloatField``"

msgid "Normalizes to: A Python float."
msgstr "规范化为：Python 的浮点数。"

msgid ""
"Validates that the given value is a float. Uses :class:`~django.core."
"validators.MaxValueValidator` and :class:`~django.core.validators."
"MinValueValidator` if ``max_value`` and ``min_value`` are provided. Uses :"
"class:`~django.core.validators.StepValueValidator` if ``step_size`` is "
"provided. Leading and trailing whitespace is allowed, as in Python's "
"``float()`` function."
msgstr ""

msgid ""
"Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``, "
"``step_size``."
msgstr ""

msgid "Takes three optional arguments:"
msgstr ""

msgid "These control the range of values permitted in the field."
msgstr "这些控制了该字段允许的数值范围。"

msgid "``GenericIPAddressField``"
msgstr "``GenericIPAddressField``"

msgid "A field containing either an IPv4 or an IPv6 address."
msgstr "一个包含 IPv4 或 IPv6地址 的字段。"

msgid ""
"Normalizes to: A string. IPv6 addresses are normalized as described below."
msgstr "规范化为：一个字符串。IPv6 地址的规范化如下所述。"

msgid "Validates that the given value is a valid IP address."
msgstr "验证给定的值是一个有效的 IP 地址。"

msgid ""
"The IPv6 address normalization follows :rfc:`4291#section-2.2` section 2.2, "
"including using the IPv4 format suggested in paragraph 3 of that section, "
"like ``::ffff:192.0.2.0``. For example, ``2001:0::0:01`` would be normalized "
"to ``2001::1``, and ``::ffff:0a0a:0a0a`` to ``::ffff:10.10.10.10``. All "
"characters are converted to lowercase."
msgstr ""
"IPv6 地址规范化遵循 :rfc:`4291#section-2.2` 第 2.2 节，包括使用该节第 3 段建"
"议的 IPv4 格式，如 ``::fffff:192.0.2.0``。例如，``2001:0::0:01`` 将被标准化"
"为 ``2001::1``，``::fffff:0a0a:0a0a`` 将被标准化为 ``::fffff:10.10.10.10``。"
"所有字符都转换为小写。"

msgid "Takes two optional arguments:"
msgstr "需要两个可选的参数："

msgid ""
"Limits valid inputs to the specified protocol. Accepted values are ``both`` "
"(default), ``IPv4`` or ``IPv6``. Matching is case insensitive."
msgstr ""
"将有效输入限制为指定协议。接受的值是 ``both`` （默认）、``IPv4`` 或 "
"``IPv6``。匹配是不区分大小写的。"

msgid ""
"Unpacks IPv4 mapped addresses like ``::ffff:192.0.2.1``. If this option is "
"enabled that address would be unpacked to ``192.0.2.1``. Default is "
"disabled. Can only be used when ``protocol`` is set to ``'both'``."
msgstr ""
"解压 IPv4 映射地址，如 ``::fffff:192.0.2.1``。如果启用该选项，该地址将被解压"
"为 ``192.0.2.1``。默认为禁用。只有当 ``protocol`` 设置为 ``'both'`` 时才会启"
"用。"

msgid "``ImageField``"
msgstr "``ImageField``"

msgid ""
"Validates that file data has been bound to the form. Also uses :class:"
"`~django.core.validators.FileExtensionValidator` to validate that the file "
"extension is supported by Pillow."
msgstr ""
"验证文件数据是否已经绑定到表单中。同时使用 :class:`~django.core.validators."
"FileExtensionValidator` 来验证 Pillow 是否支持文件扩展名。"

msgid ""
"Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, "
"``invalid_image``"
msgstr ""
"错误信息键：``required``、``invalid``、``missing``、``empty``、"
"``invalid_image``"

msgid ""
"Using an ``ImageField`` requires that `Pillow`_ is installed with support "
"for the image formats you use. If you encounter a ``corrupt image`` error "
"when you upload an image, it usually means that Pillow doesn't understand "
"its format. To fix this, install the appropriate library and reinstall "
"Pillow."
msgstr ""
"使用 ``ImageField`` 需要安装的 `Pillow`_ 支持你使用的图片格式。如果你在上传图"
"片时遇到 ``corrupt image`` 错误，通常意味着 Pillow 不理解图片格式。要解决这个"
"问题，请安装相应的库并重新安装 Pillow。"

msgid ""
"When you use an ``ImageField`` on a form, you must also remember to :ref:"
"`bind the file data to the form <binding-uploaded-files>`."
msgstr ""
"当你在表单中使用 ``ImageField`` 时，你还必须记住 :ref:`将文件数据绑定到表单 "
"<binding-uploaded-files>`。"

msgid ""
"After the field has been cleaned and validated, the ``UploadedFile`` object "
"will have an additional ``image`` attribute containing the Pillow `Image`_ "
"instance used to check if the file was a valid image. Pillow closes the "
"underlying file descriptor after verifying an image, so while non-image data "
"attributes, such as ``format``, ``height``, and ``width``, are available, "
"methods that access the underlying image data, such as ``getdata()`` or "
"``getpixel()``, cannot be used without reopening the file. For example:"
msgstr ""

msgid ""
"Additionally, ``UploadedFile.content_type`` will be updated with the image's "
"content type if Pillow can determine it, otherwise it will be set to "
"``None``."
msgstr ""
"此外，``UploadedFile.content_type`` 如果 Pillow 能够确定图片的内容类型，则会"
"以图片的内容类型进行更新，否则会设置为 ``None``。"

msgid "``IntegerField``"
msgstr "``IntegerField``"

msgid "Normalizes to: A Python integer."
msgstr "规范化为：Python 的整数。"

msgid ""
"Validates that the given value is an integer. Uses :class:`~django.core."
"validators.MaxValueValidator` and :class:`~django.core.validators."
"MinValueValidator` if ``max_value`` and ``min_value`` are provided. Uses :"
"class:`~django.core.validators.StepValueValidator` if ``step_size`` is "
"provided. Leading and trailing whitespace is allowed, as in Python's "
"``int()`` function."
msgstr ""

msgid ""
"Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``, "
"``step_size``"
msgstr ""

msgid ""
"The ``max_value``, ``min_value`` and ``step_size`` error messages may "
"contain ``%(limit_value)s``, which will be substituted by the appropriate "
"limit."
msgstr ""

msgid "Takes three optional arguments for validation:"
msgstr ""

msgid "``JSONField``"
msgstr "``JSONField``"

msgid ""
"A field which accepts JSON encoded data for a :class:`~django.db.models."
"JSONField`."
msgstr "一个接受 JSON 编码数据的字段 :class:`~django.db.models.JSONField`。"

msgid "Default widget: :class:`Textarea`"
msgstr "默认部件：:class:`Textarea`"

msgid ""
"Normalizes to: A Python representation of the JSON value (usually as a "
"``dict``, ``list``, or ``None``), depending on :attr:`JSONField.decoder`."
msgstr ""
"规范化为：JSON 值的 Python 表示（通常为 ``dict``、``list`` 或 ``None``），取"
"决于 :attr:`JSONField.decoder`。"

msgid "Validates that the given value is a valid JSON."
msgstr "验证给定值是否为有效的 JSON。"

msgid ""
"A :py:class:`json.JSONEncoder` subclass to serialize data types not "
"supported by the standard JSON serializer (e.g. ``datetime.datetime`` or :"
"class:`~python:uuid.UUID`). For example, you can use the :class:`~django."
"core.serializers.json.DjangoJSONEncoder` class."
msgstr ""
"一个 :py:class:`json.JSONEncoder` 子类，用于序列化标准 JSON 序列器不支持的数"
"据类型（例如 ``datetime.datetime`` 或 :class:`~python:uuid.UUID`）。例如，你"
"可以使用 :class:`~django.core.serializers.json.DjangoJSONEncoder` 类。"

msgid "Defaults to ``json.JSONEncoder``."
msgstr "默认为 ``json.JSONEncoder``。"

msgid ""
"A :py:class:`json.JSONDecoder` subclass to deserialize the input. Your "
"deserialization may need to account for the fact that you can't be certain "
"of the input type. For example, you run the risk of returning a ``datetime`` "
"that was actually a string that just happened to be in the same format "
"chosen for ``datetime``\\s."
msgstr ""
"一个 :py:class:`json.JSONDecoder` 子类来反序列化输入。你的反序列化可能需要考"
"虑到你无法确定输入类型的事实。例如，你有可能返回一个 ``datetime``，但实际上是"
"一个字符串，而这个字符串恰好与 ``datetime`` 的格式相同。"

msgid ""
"The ``decoder`` can be used to validate the input. If :py:class:`json."
"JSONDecodeError` is raised during the deserialization, a ``ValidationError`` "
"will be raised."
msgstr ""
"``decoder`` 可用于验证输入。如果在反序列化过程中出现 :py:class:`json."
"JSONONDecodeError`，则会出现 ``ValidationError``。"

msgid "Defaults to ``json.JSONDecoder``."
msgstr "默认为 ``json.JSONDecoder``。"

msgid ""
"If you use a :class:`ModelForm <django.forms.ModelForm>`, the ``encoder`` "
"and ``decoder`` from :class:`~django.db.models.JSONField` will be used."
msgstr ""
"如果你使用 :class:`ModelForm <django.forms.ModelForm>`，将使用 :class:"
"`~django.db.models.JSONField` 中的 ``encoder`` 和 ``decoder``。"

msgid ""
"``JSONField`` is not particularly user friendly in most cases. However, it "
"is a useful way to format data from a client-side widget for submission to "
"the server."
msgstr ""
"``JSONField`` 在大多数情况下不是特别方便用户使用。但是，它是一种有用的方式，"
"可以将客户端部件的数据格式化，以便提交给服务器。"

msgid "``MultipleChoiceField``"
msgstr "``MultipleChoiceField``"

msgid "Default widget: :class:`SelectMultiple`"
msgstr "默认部件：:class:`SelectMultiple`"

msgid "Empty value: ``[]`` (an empty list)"
msgstr "空值：``[]`` （空列表）"

msgid "Normalizes to: A list of strings."
msgstr "规范化为：一个字符串列表。"

msgid ""
"Validates that every value in the given list of values exists in the list of "
"choices."
msgstr "验证给定值列表中的每个值是否存在于选择列表中。"

msgid "Error message keys: ``required``, ``invalid_choice``, ``invalid_list``"
msgstr "错误信息键：``required``、``invalid_choice``、``invalid_list``"

msgid ""
"Takes one extra required argument, ``choices``, as for :class:`ChoiceField`."
msgstr "与 :class:`ChoiceField` 一样，多了一个必要参数 ``choices``。"

msgid "``NullBooleanField``"
msgstr "``NullBooleanField``"

msgid "Default widget: :class:`NullBooleanSelect`"
msgstr "默认部件：:class:`NullBooleanSelect`"

msgid "Normalizes to: A Python ``True``, ``False`` or ``None`` value."
msgstr "规范化为：Python 的 ``True``、``False`` 或 ``None`` 值。"

msgid "Validates nothing (i.e., it never raises a ``ValidationError``)."
msgstr "不验证任何东西（也就是说，它从不引起 ``ValidationError``）。"

msgid ""
"``NullBooleanField`` may be used with widgets such as :class:`~django.forms."
"Select` or :class:`~django.forms.RadioSelect` by providing the widget "
"``choices``::"
msgstr ""
"``NullBooleanField`` 可以通过提供部件 ``choices`` 来与诸如 :class:`~django."
"forms.Select` 或 :class:`~django.forms.RadioSelect` 等部件一起使用。"

msgid "``RegexField``"
msgstr "``RegexField``"

msgid ""
"Uses :class:`~django.core.validators.RegexValidator` to validate that the "
"given value matches a certain regular expression."
msgstr ""
"使用 :class:`~django.core.validators.RegexValidator` 来验证给定的值是否匹配某"
"个正则表达式。"

msgid "Takes one required argument:"
msgstr "需要一个额外的参数："

msgid ""
"A regular expression specified either as a string or a compiled regular "
"expression object."
msgstr "一个正则表达式，可以是字符串，也可以是编译后的正则表达式对象。"

msgid ""
"Also takes ``max_length``, ``min_length``, ``strip``, and ``empty_value`` "
"which work just as they do for :class:`CharField`."
msgstr ""
"也接受 ``max_length``、``min_length``、``strip`` 和 ``empty_value``，它们的工"
"作原理和 :class:`CharField` 一样。"

msgid ""
"Defaults to ``False``. If enabled, stripping will be applied before the "
"regex validation."
msgstr "默认值为 ``False``。如果启用，将在验证正则表达式之前进行 strip。"

msgid "``SlugField``"
msgstr "``SlugField``"

msgid ""
"Uses :class:`~django.core.validators.validate_slug` or :class:`~django.core."
"validators.validate_unicode_slug` to validate that the given value contains "
"only letters, numbers, underscores, and hyphens."
msgstr ""
"使用 :class:`~django.core.validators.validate_slug` 或 :class:`~django.core."
"validators.validate_unicode_slug` 来验证给定值是否只包含字母、数字、下划线和"
"连字符。"

msgid "Error messages: ``required``, ``invalid``"
msgstr "错误信息键：``required``、``invalid``"

msgid ""
"This field is intended for use in representing a model :class:`~django.db."
"models.SlugField` in forms."
msgstr ""
"这个字段用于在表单中表示一个模型 :class:`~django.db.models.SlugField`。"

msgid "Takes two optional parameters:"
msgstr "需要两个可选的参数："

msgid ""
"A boolean instructing the field to accept Unicode letters in addition to "
"ASCII letters. Defaults to ``False``."
msgstr ""
"一个布尔值，指示该字段除了接受 ASCII 字母外，还接受 Unicode 字母。默认值为 "
"``False``。"

msgid "``TimeField``"
msgstr "``TimeField``"

msgid "Default widget: :class:`TimeInput`"
msgstr "默认部件：:class:`TimeInput`"

msgid "Normalizes to: A Python ``datetime.time`` object."
msgstr "规范化为：Python 的 ``datetime.time`` 对象。"

msgid ""
"Validates that the given value is either a ``datetime.time`` or string "
"formatted in a particular time format."
msgstr "验证给定值是 ``datetime.time`` 或以特定时间格式化的字符串。"

msgid ""
"An iterable of formats used to attempt to convert a string to a valid "
"``datetime.time`` object."
msgstr ""

msgid ""
"If no ``input_formats`` argument is provided, the default input formats are "
"taken from :setting:`TIME_INPUT_FORMATS` if :setting:`USE_L10N` is "
"``False``, or from the active locale format ``TIME_INPUT_FORMATS`` key if "
"localization is enabled. See also :doc:`format localization </topics/i18n/"
"formatting>`."
msgstr ""
"如果没有提供 ``input_formats`` 参数，如果 :setting:`USE_L10N` 为 ``False``，"
"则默认输入格式来自 :setting:`TIME_INPUT_FORMATS``，如果启用了本地化，则来自激"
"活的本地格式 ``TIME_INPUT_FORMATS`` 键。也请参见 :doc:`格式本地化 </topics/"
"i18n/formatting>`。"

msgid "``TypedChoiceField``"
msgstr "``TypedChoiceField``"

msgid ""
"Just like a :class:`ChoiceField`, except :class:`TypedChoiceField` takes two "
"extra arguments, :attr:`coerce` and :attr:`empty_value`."
msgstr ""
"就像 :class:`ChoiceField` 一样，除了 :class:`TypedChoiceField` 需要两个额外的"
"参数 :attr:`coerce` 和 :attr:`empty_value`。"

msgid ""
"Normalizes to: A value of the type provided by the :attr:`coerce` argument."
msgstr "规范化为：:attr:`coerce` 参数提供的类型的值。"

msgid ""
"Validates that the given value exists in the list of choices and can be "
"coerced."
msgstr "验证给定的值是否存在于选择列表中，并且可以被强制执行。"

msgid "Takes extra arguments:"
msgstr "需要额外的参数："

msgid ""
"A function that takes one argument and returns a coerced value. Examples "
"include the built-in ``int``, ``float``, ``bool`` and other types. Defaults "
"to an identity function. Note that coercion happens after input validation, "
"so it is possible to coerce to a value not present in ``choices``."
msgstr ""
"接受一个参数并返回一个强制值的函数。例子包括内置的 ``int``、``float``、"
"``bool`` 和其他类型。默认为身份函数。请注意，强制执行发生在输入验证之后，所以"
"可以强制执行到一个不存在于``choices``中的值。"

msgid ""
"The value to use to represent \"empty.\" Defaults to the empty string; "
"``None`` is another common choice here. Note that this value will not be "
"coerced by the function given in the ``coerce`` argument, so choose it "
"accordingly."
msgstr ""
"用来表示“空”的值。默认为空字符串；``None`` 是另一种常见的选择。请注意，这个值"
"不会被 ``coerce`` 参数中给出的函数强制执行，所以要据此选择。"

msgid "``TypedMultipleChoiceField``"
msgstr "``TypedMultipleChoiceField``"

msgid ""
"Just like a :class:`MultipleChoiceField`, except :class:"
"`TypedMultipleChoiceField` takes two extra arguments, ``coerce`` and "
"``empty_value``."
msgstr ""
"就像 :class:`MultipleChoiceField` 一样，只是 :class:"
"`TypedMultipleChoiceField` 需要两个额外的参数：``coerce`` 和 "
"``empty_value``。"

msgid "Empty value: Whatever you've given as ``empty_value``"
msgstr "空值：不管你给 :attr:`empty_value` 的是什么。"

msgid ""
"Normalizes to: A list of values of the type provided by the ``coerce`` "
"argument."
msgstr "归法化为：``coerce`` 参数提供的类型值列表。"

msgid ""
"Validates that the given values exists in the list of choices and can be "
"coerced."
msgstr "验证给定的值是否存在于选择列表中，并且可以被强制执行。"

msgid ""
"Takes two extra arguments, ``coerce`` and ``empty_value``, as for :class:"
"`TypedChoiceField`."
msgstr ""
"需要两个额外的参数，``coerce`` 和 ``empty_value``，如 :class:"
"`TypedChoiceField`。"

msgid "``URLField``"
msgstr "``URLField``"

msgid "Default widget: :class:`URLInput`"
msgstr "默认部件：:class:`URLInput`"

msgid ""
"Uses :class:`~django.core.validators.URLValidator` to validate that the "
"given value is a valid URL."
msgstr ""
"使用 :class:`~django.core.validators.URLValidator` 来验证给定值是一个有效的 "
"URL。"

msgid ""
"Has the optional arguments ``max_length``, ``min_length``, and "
"``empty_value`` which work just as they do for :class:`CharField`."
msgstr ""

msgid "``UUIDField``"
msgstr "``UUIDField``"

msgid "Normalizes to: A :class:`~python:uuid.UUID` object."
msgstr "规范化为：:class:`~python:uuid.UUID` 对象。"

msgid ""
"This field will accept any string format accepted as the ``hex`` argument to "
"the :class:`~python:uuid.UUID` constructor."
msgstr ""
"该字段将接受作为 :class:`~python:uuid.UUID` 构造函数的 ``hex`` 参数的任何字符"
"串格式。"

msgid "Slightly complex built-in ``Field`` classes"
msgstr "稍复杂的内置 ``Field`` 类"

msgid "``ComboField``"
msgstr "``ComboField``"

msgid ""
"Validates the given value against each of the fields specified as an "
"argument to the ``ComboField``."
msgstr "根据 ``ComboField`` 参数指定的每个字段验证给定值。"

msgid "Takes one extra required argument:"
msgstr "需要一个额外的必要参数。"

msgid ""
"The list of fields that should be used to validate the field's value (in the "
"order in which they are provided)."
msgstr "应该用来验证字段值的字段列表（按照提供的顺序）。"

msgid "``MultiValueField``"
msgstr "``MultiValueField``"

msgid ""
"Normalizes to: the type returned by the ``compress`` method of the subclass."
msgstr "规范化为：子类的 ``compress`` 方法返回的类型。"

msgid ""
"Validates the given value against each of the fields specified as an "
"argument to the ``MultiValueField``."
msgstr "根据作为 ``MultiValueField`` 参数指定的每个字段验证给定值。"

msgid "Error message keys: ``required``, ``invalid``, ``incomplete``"
msgstr "错误信息键：``required``、``invalid``、``incomplete``"

msgid ""
"Aggregates the logic of multiple fields that together produce a single value."
msgstr "将多个字段的逻辑聚合在一起产生一个值。"

msgid ""
"This field is abstract and must be subclassed. In contrast with the single-"
"value fields, subclasses of :class:`MultiValueField` must not implement :"
"meth:`~django.forms.Field.clean` but instead - implement :meth:"
"`~MultiValueField.compress`."
msgstr ""
"这个字段是抽象的，必须被子类化。与单值字段相反， :class:`MultiValueField` 的"
"子类不能实现 :meth:`~django.forms.Field.clean`，而是——实现 :meth:"
"`~MultiValueField.compress`。"

msgid ""
"A tuple of fields whose values are cleaned and subsequently combined into a "
"single value.  Each value of the field is cleaned by the corresponding field "
"in ``fields`` -- the first value is cleaned by the first field, the second "
"value is cleaned by the second field, etc. Once all fields are cleaned, the "
"list of clean values is combined into a single value by :meth:"
"`~MultiValueField.compress`."
msgstr ""
"字段组成的元组，其值经清理后合并为一个值。 字段的每个值都由 ``fields`` 中的相"
"应字段进行清理——第一个值由第一个字段清理，第二个值由第二个字段清理，等等。当"
"所有字段清理完毕后，通过 :meth:`~MultiValueField.compress` 将清理后的值列表合"
"并为一个值。"

msgid "Also takes some optional arguments:"
msgstr "还需要一些可选的参数："

msgid ""
"Defaults to ``True``, in which case a ``required`` validation error will be "
"raised if no value is supplied for any field."
msgstr ""
"默认值为 ``True``，在这种情况下，如果没有为任何字段提供值，就会出现 "
"``required`` 验证错误。"

msgid ""
"When set to ``False``, the :attr:`Field.required` attribute can be set to "
"``False`` for individual fields to make them optional. If no value is "
"supplied for a required field, an ``incomplete`` validation error will be "
"raised."
msgstr ""
":attr:`Field.required` 属性设置为 ``False`` 时，可将单个字段设置为 "
"``False``，使其成为可选字段。如果没有为必填字段提供任何值，就会出现 "
"``incomplete`` 的验证错误。"

msgid ""
"A default ``incomplete`` error message can be defined on the :class:"
"`MultiValueField` subclass, or different messages can be defined on each "
"individual field. For example::"
msgstr ""
"可以在 :class:`MultiValueField` 子类上定义一个默认的 ``incomplete`` 错误信"
"息，也可以在每个单独的字段上定义不同的信息。例如："

msgid ""
"Must be a subclass of :class:`django.forms.MultiWidget`. Default value is :"
"class:`~django.forms.TextInput`, which probably is not very useful in this "
"case."
msgstr ""
"必须是 :class:`django.forms.MultiWidget` 的子类。默认值是 :class:`~django."
"forms.TextInput`，在这种情况下可能不是很有用。"

msgid ""
"Takes a list of valid values and returns  a \"compressed\" version of those "
"values -- in a single value. For example, :class:`SplitDateTimeField` is a "
"subclass which combines a time field and a date field into a ``datetime`` "
"object."
msgstr ""
"取一个有效值的列表，并返回这些值的“压缩”版本——在一个单一值中。例如，:class:"
"`SplitDateTimeField` 是一个子类，它将一个时间字段和一个日期字段合并成一个 "
"``datetime`` 对象。"

msgid "This method must be implemented in the subclasses."
msgstr "这个方法必须在子类中实现。"

msgid "``SplitDateTimeField``"
msgstr "``SplitDateTimeField``"

msgid "Default widget: :class:`SplitDateTimeWidget`"
msgstr "默认部件：:class:`SplitDateTimeWidget`"

msgid ""
"Validates that the given value is a ``datetime.datetime`` or string "
"formatted in a particular datetime format."
msgstr "验证给定值是 ``datetime.datetime`` 或以特定日期时间格式化的字符串。"

msgid ""
"Error message keys: ``required``, ``invalid``, ``invalid_date``, "
"``invalid_time``"
msgstr ""
"错误信息键：``required``、``invalid``、``invalid_date``、``invalid_time``"

msgid ""
"A list of formats used to attempt to convert a string to a valid ``datetime."
"date`` object."
msgstr "用于将字符串转换为有效的 ``datetime.date`` 对象的格式列表。"

msgid ""
"If no ``input_date_formats`` argument is provided, the default input formats "
"for :class:`DateField` are used."
msgstr ""
"如果没有提供 ``input_date_formats`` 参数，则使用 :class:`DateField` 的默认输"
"入格式。"

msgid ""
"A list of formats used to attempt to convert a string to a valid ``datetime."
"time`` object."
msgstr "用于将字符串转换为有效的 ``datetime.time`` 对象的格式列表。"

msgid ""
"If no ``input_time_formats`` argument is provided, the default input formats "
"for :class:`TimeField` are used."
msgstr ""
"如果没有提供 ``input_time_formats`` 参数，则使用 :class:`TimeField` 的默认输"
"入格式。"

msgid "Fields which handle relationships"
msgstr "处理关系的字段"

msgid ""
"Two fields are available for representing relationships between models: :"
"class:`ModelChoiceField` and :class:`ModelMultipleChoiceField`.  Both of "
"these fields require a single ``queryset`` parameter that is used to create "
"the choices for the field.  Upon form validation, these fields will place "
"either one model object (in the case of ``ModelChoiceField``) or multiple "
"model objects (in the case of ``ModelMultipleChoiceField``) into the "
"``cleaned_data`` dictionary of the form."
msgstr ""
"有两个字段可用于表示模型之间的关系： :class:`ModelChoiceField` 和 :class:"
"`ModelMultipleChoiceField`。 这两个字段都需要一个 ``queryset`` 参数，用于创建"
"字段的选择。 在表单验证后，这些字段将把一个模型对象（对于 "
"``ModelChoiceField``）或多个模型对象（对于 ``ModelMultipleChoiceField``）放入"
"表单的 ``cleaned_data`` 字典中。"

msgid ""
"For more complex uses, you can specify ``queryset=None`` when declaring the "
"form field and then populate the ``queryset`` in the form's ``__init__()`` "
"method::"
msgstr ""
"对于更复杂的用途，你可以在声明表单字段时指定 ``queryset=None``，然后在表单的 "
"``__init__()`` 方法中填充 ``queryset``："

msgid ""
"Both ``ModelChoiceField`` and ``ModelMultipleChoiceField`` have an "
"``iterator`` attribute which specifies the class used to iterate over the "
"queryset when generating choices. See :ref:`iterating-relationship-choices` "
"for details."
msgstr ""
"``ModelChoiceField`` 和 ``ModelMultipleChoiceField`` 都有一个 ``iterator`` 属"
"性，它指定了在生成选择时用于迭代查询集的类。详见 :ref:`iterating-"
"relationship-choices`。"

msgid "``ModelChoiceField``"
msgstr "``ModelChoiceField``"

msgid "Normalizes to: A model instance."
msgstr "规范化为：一个模型实例。"

msgid "Validates that the given id exists in the queryset."
msgstr "验证给定的 id 是否存在于查询集中。"

msgid ""
"Allows the selection of a single model object, suitable for representing a "
"foreign key. Note that the default widget for ``ModelChoiceField`` becomes "
"impractical when the number of entries increases. You should avoid using it "
"for more than 100 items."
msgstr ""
"允许选择一个单一的模型对象，适合代表一个外键。请注意，当条目数量增加时，"
"``ModelChoiceField`` 的默认部件变得不实用。你应该避免将其用于超过 100 个项"
"目。"

msgid "A single argument is required:"
msgstr "需要一个参数："

msgid ""
"A ``QuerySet`` of model objects from which the choices for the field are "
"derived and which is used to validate the user's selection. It's evaluated "
"when the form is rendered."
msgstr ""
"由模型对象组成的 ``QuerySet``，从中得出字段的选择，用于验证用户的选择。它在表"
"单渲染时被执行。"

msgid "``ModelChoiceField`` also takes several optional arguments:"
msgstr ""

msgid ""
"By default the ``<select>`` widget used by ``ModelChoiceField`` will have an "
"empty choice at the top of the list. You can change the text of this label "
"(which is ``\"---------\"`` by default) with the ``empty_label`` attribute, "
"or you can disable the empty label entirely by setting ``empty_label`` to "
"``None``::"
msgstr ""
"默认情况下，``ModelChoiceField`` 使用的 ``<select>`` 小组件将在列表顶部有一个"
"空的选择。你可以用 ``empty_label`` 属性来改变这个标签的文本（默认是 "
"``\"---------\"``），或者你可以通过将 ``empty_label`` 设置为 ``None`` 来完全"
"禁用空标签。"

msgid ""
"Note that no empty choice is created (regardless of the value of "
"``empty_label``) if a ``ModelChoiceField`` is required and has a default "
"initial value, or a ``widget`` is set to :class:`~django.forms.RadioSelect` "
"and the :attr:`~ModelChoiceField.blank` argument is ``False``."
msgstr ""

msgid ""
"This optional argument is used to specify the field to use as the value of "
"the choices in the field's widget. Be sure it's a unique field for the "
"model, otherwise the selected value could match more than one object. By "
"default it is set to ``None``, in which case the primary key of each object "
"will be used. For example::"
msgstr ""
"这个可选参数用于指定字段，作为字段的小组件中选择的值。请确保它是模型的唯一字"
"段，否则所选的值可能会匹配多个对象。默认情况下，它被设置为 ``None``，在这种情"
"况下，将使用每个对象的主键。例如："

msgid "would yield:"
msgstr "会产生："

msgid "and::"
msgstr "和："

msgid ""
"When using the :class:`~django.forms.RadioSelect` widget, this optional "
"boolean argument determines whether an empty choice is created. By default, "
"``blank`` is ``False``, in which case no empty choice is created."
msgstr ""

msgid "``ModelChoiceField`` also has the attribute:"
msgstr "``ModelChoiceField`` 也有属性："

msgid ""
"The iterator class used to generate field choices from ``queryset``. By "
"default, :class:`ModelChoiceIterator`."
msgstr ""
"用于从 ``queryset`` 中生成字段选择的迭代器类。默认情况下， :class:"
"`ModelChoiceIterator`。"

msgid ""
"The ``__str__()`` method of the model will be called to generate string "
"representations of the objects for use in the field's choices. To provide "
"customized representations, subclass ``ModelChoiceField`` and override "
"``label_from_instance``. This method will receive a model object and should "
"return a string suitable for representing it. For example::"
msgstr ""
"模型的 ``__str__()`` 方法将被调用，以生成用于字段选择的对象的字符串表示。要提"
"供自定义的表示，请将 ``ModelChoiceField`` 子类化，并覆盖 "
"``label_from_instance``。该方法将接收一个模型对象，并应返回一个适合表示它的字"
"符串。例如："

msgid "``ModelMultipleChoiceField``"
msgstr "``ModelMultipleChoiceField``"

msgid "Empty value: An empty ``QuerySet`` (``self.queryset.none()``)"
msgstr "空值：一个空的 ``QuerySet`` （``self.queryset.none()``）。"

msgid "Normalizes to: A ``QuerySet`` of model instances."
msgstr "规范化为：一个模型实例的 ``QuerySet``。"

msgid ""
"Validates that every id in the given list of values exists in the queryset."
msgstr "验证给定值列表中的每个 id 是否存在于查询集中。"

msgid ""
"Error message keys: ``required``, ``invalid_list``, ``invalid_choice``, "
"``invalid_pk_value``"
msgstr ""
"错误信息键：``required``、``invalid_list``、``invalid_choice``、"
"``invalid_pk_value``"

msgid ""
"The ``invalid_choice`` message may contain ``%(value)s`` and the "
"``invalid_pk_value`` message may contain ``%(pk)s``, which will be "
"substituted by the appropriate values."
msgstr ""
"``invalid_choice`` 信息可能包含 ``%(value)s``，``invalid_pk_value`` 信息可能"
"包含 ``%(pk)s``，将用适当的值代替。"

msgid ""
"Allows the selection of one or more model objects, suitable for representing "
"a many-to-many relation. As with :class:`ModelChoiceField`, you can use "
"``label_from_instance`` to customize the object representations."
msgstr ""
"允许选择一个或多个模型对象，适合表示多对多关系。与 :class:`ModelChoiceField` "
"一样，你可以使用 ``label_from_instance`` 来自定义对象的表示。"

msgid "Same as :class:`ModelChoiceField.queryset`."
msgstr "与 :class:`ModelChoiceField.queryset` 相同。"

msgid "Same as :class:`ModelChoiceField.to_field_name`."
msgstr "与 :class:`ModelChoiceField.to_field_name` 相同。"

msgid "``ModelMultipleChoiceField`` also has the attribute:"
msgstr "``ModelMultipleChoiceField`` 也有属性："

msgid "Same as :class:`ModelChoiceField.iterator`."
msgstr "与 :class:`ModelChoiceField.iterator` 相同。"

msgid "Iterating relationship choices"
msgstr "迭代关系选择"

msgid ""
"By default, :class:`ModelChoiceField` and :class:`ModelMultipleChoiceField` "
"use :class:`ModelChoiceIterator` to generate their field ``choices``."
msgstr ""
"默认情况下， :class:`ModelChoiceField` 和 :class:`ModelMultipleChoiceField` "
"使用 :class:`ModelChoiceIterator` 来生成它们的字段 ``choices``。"

msgid ""
"When iterated, ``ModelChoiceIterator`` yields 2-tuple choices containing :"
"class:`ModelChoiceIteratorValue` instances as the first ``value`` element in "
"each choice. ``ModelChoiceIteratorValue`` wraps the choice value while "
"maintaining a reference to the source model instance that can be used in "
"custom widget implementations, for example, to add `data-* attributes`_ to "
"``<option>`` elements."
msgstr ""
"当迭代时，``ModelChoiceIterator`` 产生一个二元元组选择，包含 :class:"
"`ModelChoiceIteratorValue` 实例作为每个选择的第一个 ``value`` 元素。"
"``ModelChoiceIteratorValue`` 封装了选择值，同时保持了对源模型实例的引用，可用"
"于自定义部件的实现，例如，将 `data-* attributes`_ 添加到 ``<option>``。"

msgid "For example, consider the following models::"
msgstr "例如，考虑以下模型："

msgid ""
"You can use a :class:`~django.forms.Select` widget subclass to include the "
"value of ``Topping.price`` as the HTML attribute ``data-price`` for each "
"``<option>`` element::"
msgstr ""
"你可以使用 :class:`~django.forms.Select` 部件子类将 ``Topping.price`` 的值作"
"为 HTML 属性 ``data-price``，包含在每个 ``<option>`` 元素中："

msgid "This will render the ``Pizza.topping`` select as:"
msgstr "这将使 ``Pizza.topping`` 选择为："

msgid ""
"For more advanced usage you may subclass ``ModelChoiceIterator`` in order to "
"customize the yielded 2-tuple choices."
msgstr ""
"对于更高级的用法，你可以将 ``ModelChoiceIterator`` 子类化，以自定义产生的二元"
"元组选择。"

msgid "``ModelChoiceIterator``"
msgstr "``ModelChoiceIterator``"

msgid ""
"The default class assigned to the ``iterator`` attribute of :class:"
"`ModelChoiceField` and :class:`ModelMultipleChoiceField`. An iterable that "
"yields 2-tuple choices from the queryset."
msgstr ""
"指定给 :class:`ModelChoiceField`和:class:`ModelMultipleChoiceField` 的 "
"``iterator`` 属性的默认类。迭代器，从查询集中产生二元元组选择。"

msgid ""
"The instance of ``ModelChoiceField`` or ``ModelMultipleChoiceField`` to "
"iterate and yield choices."
msgstr ""
"``ModelChoiceField`` 或 ``ModelMultipleChoiceField`` 的实例来迭代和产生选择。"

msgid "``ModelChoiceIterator`` has the following method:"
msgstr "``ModelChoiceIter`` 有以下方法："

msgid ""
"Yields 2-tuple choices, in the ``(value, label)`` format used by :attr:"
"`ChoiceField.choices`. The first ``value`` element is a :class:"
"`ModelChoiceIteratorValue` instance."
msgstr ""
"产生二元元组选择，格式为 :attr:`ChoiceField.chips` 使用的 ``(value, "
"label)``。第一个 ``value`` 元素是一个 :class:`ModelChoiceIteratorValue` 实"
"例。"

msgid "``ModelChoiceIteratorValue``"
msgstr "``ModelChoiceIteratorValue``"

msgid "Two arguments are required:"
msgstr "需要两个参数："

msgid ""
"The value of the choice. This value is used to render the ``value`` "
"attribute of an HTML ``<option>`` element."
msgstr "选择的值。该值用于呈现 HTML ``<option>`` 元素的 ``value`` 属性。"

msgid ""
"The model instance from the queryset. The instance can be accessed in custom "
"``ChoiceWidget.create_option()`` implementations to adjust the rendered HTML."
msgstr ""
"来自查询集的模型实例。该实例可以在自定义的 ``ChoiceWidget.create_option()`` "
"实现中被访问，以调整渲染的 HTML。"

msgid "``ModelChoiceIteratorValue`` has the following method:"
msgstr "``ModelChoiceIteratorValue`` 有以下方法："

msgid "Return ``value`` as a string to be rendered in HTML."
msgstr "返回 ``value`` 作为一个字符串在 HTML 中显示。"

msgid "Creating custom fields"
msgstr "创建自定义字段"

msgid ""
"If the built-in ``Field`` classes don't meet your needs, you can create "
"custom ``Field`` classes. To do this, create a subclass of ``django.forms."
"Field``. Its only requirements are that it implement a ``clean()`` method "
"and that its ``__init__()`` method accept the core arguments mentioned above "
"(``required``, ``label``, ``initial``, ``widget``, ``help_text``)."
msgstr ""
"如果内置的 ``Field`` 类不能满足你的需求，你可以创建自定义的 ``Field`` 类。为"
"此，创建一个 ``django.forms.Field`` 的子类。它唯一的要求是实现一个 "
"``clean()`` 方法，并且它的 ``__init__()`` 方法接受上面提到的核心参数 "
"(``required``, ``label``, ``initial``, ``widget``, ``help_text``)。"

msgid ""
"You can also customize how a field will be accessed by overriding :meth:"
"`~django.forms.Field.get_bound_field()`."
msgstr ""
"你也可以通过覆盖 :meth:`~django.forms.Field.get_bound_field()` 来自定义字段的"
"访问方式。"

msgid "Formset Functions"
msgstr "表单集函数"

msgid ""
"Formset API reference. For introductory material about formsets, see the :"
"doc:`/topics/forms/formsets` topic guide."
msgstr ""
"表单集 API 参考。关于表单集的介绍材料，请参见 :doc:`/topics/forms/formsets` "
"主题指南。"

msgid "``formset_factory``"
msgstr "``formset_factory``"

msgid "Returns a ``FormSet`` class for the given ``form`` class."
msgstr "返回给定 ``form`` 类的 ``FormSet`` 类。"

msgid "See :doc:`formsets </topics/forms/formsets>` for example usage."
msgstr "参见 :doc:`表单集 </topics/forms/formsets>` 的用法示例。"

msgid "Forms"
msgstr "表单"

msgid ""
"Detailed form API reference. For introductory material, see the :doc:`/"
"topics/forms/index` topic guide."
msgstr ""
"详细的表单 API 参考。关于介绍性材料，请参见 :doc:`/topics/forms/index` 主题指"
"南。"

msgid "Model Form Functions"
msgstr "模型表单函数"

msgid ""
"Model Form API reference. For introductory material about model forms, see "
"the :doc:`/topics/forms/modelforms` topic guide."
msgstr ""
"模型表单 API 参考。关于模型表单的介绍材料，请参见 :doc:`/topics/forms/"
"modelforms` 主题指南。"

msgid "``modelform_factory``"
msgstr "``modelform_factory``"

msgid ""
"Returns a :class:`~django.forms.ModelForm` class for the given ``model``. "
"You can optionally pass a ``form`` argument to use as a starting point for "
"constructing the ``ModelForm``."
msgstr ""
"为给定的 ``model`` 返回一个 :class:`~django.forms.ModelForm` 类。你可以选择性"
"地传递一个 ``form`` 参数作为构建 ``ModelForm`` 的起点。"

msgid ""
"``fields`` is an optional list of field names. If provided, only the named "
"fields will be included in the returned fields."
msgstr ""
"``fields`` 是一个可选的字段名列表。如果提供，返回的字段中只包括命名的字段。"

msgid ""
"``exclude`` is an optional list of field names. If provided, the named "
"fields will be excluded from the returned fields, even if they are listed in "
"the ``fields`` argument."
msgstr ""
"``exclude`` 是一个可选的字段名列表。如果提供了这个列表，指定的字段将被排除在"
"返回的字段之外，即使这些字段被列在 ``fields`` 参数中。"

msgid ""
"``formfield_callback`` is a callable that takes a model field and returns a "
"form field."
msgstr ""
"``formfield_callback`` 是一个可调用的函数，它接收一个模型字段并返回一个表单字"
"段。"

msgid "``widgets`` is a dictionary of model field names mapped to a widget."
msgstr "``widgets`` 是一个映射到部件的模型字段名的字典。"

msgid ""
"``localized_fields`` is a list of names of fields which should be localized."
msgstr "``localized_fields`` 是一个应本地化的字段名称列表。"

msgid "``labels`` is a dictionary of model field names mapped to a label."
msgstr "``labels`` 是一个映射到标签的模型字段名的字典。"

msgid ""
"``help_texts`` is a dictionary of model field names mapped to a help text."
msgstr "``help_texts`` 是一个映射到帮助文本的模型字段名的字典。"

msgid ""
"``error_messages`` is a dictionary of model field names mapped to a "
"dictionary of error messages."
msgstr "``error_messages`` 是一个模型字段名的字典，映射到错误信息的字典。"

msgid ""
"``field_classes`` is a dictionary of model field names mapped to a form "
"field class."
msgstr "``field_classes`` 是映射到表单字段类的模型字段名的字典。"

msgid "See :ref:`modelforms-factory` for example usage."
msgstr "见 :ref:`modelforms-factory` 的用法示例。"

msgid ""
"You must provide the list of fields explicitly, either via keyword arguments "
"``fields`` or ``exclude``, or the corresponding attributes on the form's "
"inner ``Meta`` class. See :ref:`modelforms-selecting-fields` for more "
"information. Omitting any definition of the fields to use will result in an :"
"exc:`~django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""
"你必须通过关键字参数 ``fields`` 或 ``exclude`` 或表单内部 ``Meta`` 类的相应属"
"性，明确地提供字段列表。更多信息参见 :ref:`modelforms-selecting-fields`。忽略"
"任何要使用的字段定义将引发 :exc:`~django.core.exceptions."
"ImproperlyConfigured` 异常。"

msgid "``modelformset_factory``"
msgstr "``modelformset_factory``"

msgid "Returns a ``FormSet`` class for the given ``model`` class."
msgstr "返回给定 ``model`` 类的 ``FormSet`` 类。"

msgid ""
"Arguments ``model``, ``form``, ``fields``, ``exclude``, "
"``formfield_callback``, ``widgets``, ``localized_fields``, ``labels``, "
"``help_texts``, ``error_messages``, and ``field_classes`` are all passed "
"through to :func:`~django.forms.models.modelform_factory`."
msgstr ""
"参数 ``model``、``form``、``fields``、``exclude``、``formfield_callback``、"
"``widgets``、``localized_fields``、``labels``、``help_texts``、"
"``error_messages``、``field_classes`` 都传给 :func:`~django.forms.models."
"modelform_factory`。"

msgid ""
"Arguments ``formset``, ``extra``, ``can_delete``, ``can_order``, "
"``max_num``, ``validate_max``, ``min_num``, ``validate_min``, "
"``absolute_max``, ``can_delete_extra``, and ``renderer`` are passed through "
"to :func:`~django.forms.formsets.formset_factory`. See :doc:`formsets </"
"topics/forms/formsets>` for details."
msgstr ""
"参数 ``formset``、``extra``、``can_delete``、``can_order``、``max_num``、"
"``validate_max``、``min_num``、``validate_min``、``absolute_max``、"
"``can_delete_extra`` 和 ``renderer`` 被传递给 :func:`~django.forms.formsets."
"formset_factory`。详情请见 :doc:`表单集 </topics/forms/formsets>`。"

msgid ""
"The ``edit_only`` argument allows :ref:`preventing new objects creation "
"<model-formsets-edit-only>`."
msgstr ""

msgid "See :ref:`model-formsets` for example usage."
msgstr "见 :ref:`model-formsets` 的用法示例。"

msgid "The ``edit_only`` argument was added."
msgstr "添加了 ``edit_only`` 参数。"

msgid "``inlineformset_factory``"
msgstr "``inlineformset_factory``"

msgid ""
"Returns an ``InlineFormSet`` using :func:`modelformset_factory` with "
"defaults of ``formset=``:class:`~django.forms.models.BaseInlineFormSet`, "
"``can_delete=True``, and ``extra=3``."
msgstr ""
"使用 :func:`modelformset_factory` 返回一个 ``InlineFormSet``，默认值为 "
"``formset=``:class:`~django.forms.models.BaseInlineFormSet`、"
"``can_delete=True`` 和 ``extra=3``。"

msgid ""
"If your model has more than one :class:`~django.db.models.ForeignKey` to the "
"``parent_model``, you must specify a ``fk_name``."
msgstr ""
"如果你的模型有多个 :class:`~django.db.models.ForeignKey` 到 "
"``parent_model``，你必须指定一个 ``fk_name``。"

msgid "See :ref:`inline-formsets` for example usage."
msgstr "参见 :ref:`inline-formsets` 的用法示例。"

msgid "The form rendering API"
msgstr "表单渲染 API"

msgid ""
"Django's form widgets are rendered using Django's :doc:`template engines "
"system </topics/templates>`."
msgstr ""
"Django 的表单部件是使用 Django 的 :doc:`模板引擎系统 </topics/templates>` 渲"
"染的。"

msgid "The form rendering process can be customized at several levels:"
msgstr "表单渲染过程可以在几个层次上进行定制："

msgid "Widgets can specify custom template names."
msgstr "部件可以指定自定义模板名称。"

msgid "Forms and widgets can specify custom renderer classes."
msgstr "表单和部件可以指定自定义渲染器类。"

msgid ""
"A widget's template can be overridden by a project. (Reusable applications "
"typically shouldn't override built-in templates because they might conflict "
"with a project's custom templates.)"
msgstr ""
"组件的模板可以被项目覆盖。（可重用的应用程序通常不应该覆盖内置模板，因为它们"
"可能与项目的自定义模板相冲突。）"

msgid "The low-level render API"
msgstr "低级渲染 API"

msgid ""
"The rendering of form templates is controlled by a customizable renderer "
"class. A custom renderer can be specified by updating the :setting:"
"`FORM_RENDERER` setting. It defaults to ``'``:class:`django.forms.renderers."
"DjangoTemplates`\\ ``'``."
msgstr ""
"表单模板的渲染是由一个可定制的渲染器类控制的。可以通过更新 :setting:"
"`FORM_RENDERER` 配置来指定自定义渲染器。它的默认值是 ``'``:class:`django."
"forms.renderers.DjangoTemplates`\\ ``'``。"

msgid ""
"By specifying a custom form renderer and overriding :attr:`~.BaseRenderer."
"form_template_name` you can adjust the default form markup across your "
"project from a single place."
msgstr ""

msgid ""
"You can also provide a custom renderer per-form or per-widget by setting "
"the :attr:`.Form.default_renderer` attribute or by using the ``renderer`` "
"argument of :meth:`.Form.render`, or :meth:`.Widget.render`."
msgstr ""

msgid ""
"Matching points apply to formset rendering. See :ref:`formset-rendering` for "
"discussion."
msgstr ""

msgid ""
"Use one of the :ref:`built-in template form renderers <built-in-template-"
"form-renderers>` or implement your own. Custom renderers must implement a "
"``render(template_name, context, request=None)`` method. It should return a "
"rendered templates (as a string) or raise :exc:`~django.template."
"TemplateDoesNotExist`."
msgstr ""
"使用 :ref:`内置模板表单渲染器 <built-in-template-form-renderers>` 或实现你自"
"己的模板表单渲染器。自定义渲染器必须实现一个 ``render(template_name, "
"context, request=None)`` 方法。它应该返回一个已渲染的模板（作为一个字符串）或"
"引发 :exc:`~django.template.TemplateDoesNotExist`。"

msgid "The base class for the built-in form renderers."
msgstr ""

msgid "The default name of the template to use to render a form."
msgstr ""

msgid ""
"Defaults to ``\"django/forms/default.html\"``, which is a proxy for "
"``\"django/forms/table.html\"``."
msgstr ""
"默认为``\"django/forms/default.html\"``，是``\"django/forms/table.html\"``的"
"代理。"

msgid ""
"The ``\"django/forms/default.html\"`` template is deprecated and will be "
"removed in Django 5.0. The default will become ``\"django/forms/div.html\"`` "
"at that time."
msgstr ""

msgid "The default name of the template to use to render a formset."
msgstr ""

msgid ""
"Defaults to ``\"django/forms/formsets/default.html\"``, which is a proxy for "
"``\"django/forms/formsets/table.html\"``."
msgstr ""

msgid ""
"The ``\"django/forms/formset/default.html\"`` template is deprecated and "
"will be removed in Django 5.0. The default will become ``\"django/forms/"
"formset/div.html\"`` template."
msgstr ""

msgid ""
"Subclasses must implement this method with the appropriate template finding "
"logic."
msgstr ""

msgid ""
"Renders the given template, or raises :exc:`~django.template."
"TemplateDoesNotExist`."
msgstr ""

msgid "Built-in-template form renderers"
msgstr "内置模板表单渲染器"

msgid "``DjangoTemplates``"
msgstr "``DjangoTemplates``"

msgid ""
"This renderer uses a standalone :class:`~django.template.backends.django."
"DjangoTemplates` engine (unconnected to what you might have configured in "
"the :setting:`TEMPLATES` setting). It loads templates first from the built-"
"in form templates directory in :source:`django/forms/templates` and then "
"from the installed apps' templates directories using the :class:"
"`app_directories <django.template.loaders.app_directories.Loader>` loader."
msgstr ""

msgid ""
"If you want to render templates with customizations from your :setting:"
"`TEMPLATES` setting, such as context processors for example, use the :class:"
"`TemplatesSetting` renderer."
msgstr ""
"如果你想用你的 :setting:`TEMPLATES` 配置中的自定义配置来渲染模板，例如上下文"
"处理器，使用 :class:`TemplatesSetting` 渲染器。"

msgid ""
"Subclass of :class:`DjangoTemplates` that specifies :attr:`~BaseRenderer."
"form_template_name` and :attr:`~BaseRenderer.formset_template_name` as "
"``\"django/forms/div.html\"`` and ``\"django/forms/formset/div.html\"`` "
"respectively."
msgstr ""

msgid ""
"This is a transitional renderer for opt-in to the new ``<div>`` based "
"templates, which are the default from Django 5.0."
msgstr ""

msgid "Apply this via the :setting:`FORM_RENDERER` setting::"
msgstr ""

msgid ""
"Once the ``<div>`` templates are the default, this transitional renderer "
"will be deprecated, for removal in Django 6.0. The ``FORM_RENDERER`` "
"declaration can be removed at that time."
msgstr ""

msgid "``Jinja2``"
msgstr "``Jinja2``"

msgid ""
"This renderer is the same as the :class:`DjangoTemplates` renderer except "
"that it uses a :class:`~django.template.backends.jinja2.Jinja2` backend. "
"Templates for the built-in widgets are located in :source:`django/forms/"
"jinja2` and installed apps can provide templates in a ``jinja2`` directory."
msgstr ""

msgid ""
"To use this backend, all the forms and widgets in your project and its third-"
"party apps must have Jinja2 templates. Unless you provide your own Jinja2 "
"templates for widgets that don't have any, you can't use this renderer. For "
"example, :mod:`django.contrib.admin` doesn't include Jinja2 templates for "
"its widgets due to their usage of Django template tags."
msgstr ""
"要使用这个后端，你的项目及其第三方应用程序中的所有表单和部件必须有 Jinja2 模"
"板。除非你为那些没有 Jinja2 模板的部件提供自己的 Jinja2 模板，否则你不能使用"
"这个渲染器。例如， :mod:`django.contrib.admin` 由于使用了 Django 模板标签，所"
"以它的部件不包含 Jinja2 模板。"

msgid ""
"A transitional renderer as per :class:`DjangoDivFormRenderer` above, but "
"subclassing :class:`Jinja2` for use with the Jinja2 backend."
msgstr ""

msgid "``TemplatesSetting``"
msgstr "``TemplatesSetting``"

msgid ""
"This renderer gives you complete control of how form and widget templates "
"are sourced. It uses :func:`~django.template.loader.get_template` to find "
"templates based on what's configured in the :setting:`TEMPLATES` setting."
msgstr ""
"这个渲染器让你完全控制表单和小工具模板的来源。它使用 :func:`~django.template."
"loader.get_template` 来查找基于 :setting:`TEMPLATES` 配置中所设置的模板。"

msgid "Using this renderer along with the built-in templates requires either:"
msgstr "使用该渲染器和内置模板需要以下两种方法之一："

msgid ""
"``'django.forms'`` in :setting:`INSTALLED_APPS` and at least one engine "
"with :setting:`APP_DIRS=True <TEMPLATES-APP_DIRS>`."
msgstr ""
"``'django.forms'`` 在 :setting:`INSTALLED_APPS` 和至少一个引擎有 :setting:"
"`APP_DIRS=True <TEMPLATES-APP_DIRS>`。"

msgid ""
"Adding the built-in templates directory in :setting:`DIRS <TEMPLATES-DIRS>` "
"of one of your template engines. To generate that path::"
msgstr ""
"在你的一个模板引擎的 :setting:`DIRS <TEMPLATES-DIRS>` 中添加内置模板目录。要"
"生成该路径："

msgid ""
"Using this renderer requires you to make sure the form templates your "
"project needs can be located."
msgstr "使用这个渲染器需要你确保你的项目所需的表单模板可以被找到。"

msgid "Context available in formset templates"
msgstr "表单集模板中可用的上下文"

msgid ""
"Formset templates receive a context from :meth:`.BaseFormSet.get_context`. "
"By default, formsets receive a dictionary with the following values:"
msgstr ""
"表单集模板从 :meth:`.BaseFormSet.get_context` 接收一个上下文。默认情况下，表"
"单集接收一个具有以下值的字典："

msgid "``formset``: The formset instance."
msgstr "``formset``：表单集实例。"

msgid "Context available in form templates"
msgstr "表单模板中可用的上下文"

msgid ""
"Form templates receive a context from :meth:`.Form.get_context`. By default, "
"forms receive a dictionary with the following values:"
msgstr ""
"表单模板从 :meth:`.Form.get_context` 接收一个上下文。默认情况下，表单接收一个"
"具有以下值的字典："

msgid "Context available in widget templates"
msgstr "部件模板中可用的上下文"

msgid ""
"Widget templates receive a context from :meth:`.Widget.get_context`. By "
"default, widgets receive a single value in the context, ``widget``. This is "
"a dictionary that contains values like:"
msgstr ""
"部件模板从 :meth:`.Widget.get_context` 中接收一个上下文。默认情况下，部件在上"
"下文中只接收一个值，``widget``。这是一个字典，其中包含的值如："

msgid "``value``"
msgstr "``value``"

msgid "``attrs``"
msgstr "``attrs``"

msgid "``is_hidden``"
msgstr "``is_hidden``"

msgid ""
"Some widgets add further information to the context. For instance, all "
"widgets that subclass ``Input`` defines ``widget['type']`` and :class:`."
"MultiWidget` defines ``widget['subwidgets']`` for looping purposes."
msgstr ""
"有些部件会给上下文添加更多信息。例如，所有子类 ``Input`` 定义了 "
"``widget['type']`` 和 :class:`.MultiWidget` 定义了 ``widget['subwidgets']`` "
"用于循环。"

msgid "Overriding built-in formset templates"
msgstr "覆盖内置的表单集模板"

msgid ":attr:`.BaseFormSet.template_name`"
msgstr ":attr:`.BaseFormSet.template_name`"

msgid ""
"To override formset templates, you must use the :class:`TemplatesSetting` "
"renderer. Then overriding formset templates works :doc:`the same as </howto/"
"overriding-templates>` overriding any other template in your project."
msgstr ""

msgid "Overriding built-in form templates"
msgstr "覆盖内置表单模板"

msgid ":attr:`.Form.template_name`"
msgstr ":attr:`.Form.template_name`"

msgid ""
"To override form templates, you must use the :class:`TemplatesSetting` "
"renderer. Then overriding form templates works :doc:`the same as </howto/"
"overriding-templates>` overriding any other template in your project."
msgstr ""

msgid "Overriding built-in widget templates"
msgstr "覆盖内置部件模板"

msgid ""
"Each widget has a ``template_name`` attribute with a value such as ``input."
"html``. Built-in widget templates are stored in the ``django/forms/widgets`` "
"path. You can provide a custom template for ``input.html`` by defining "
"``django/forms/widgets/input.html``, for example. See :ref:`built-in "
"widgets` for the name of each widget's template."
msgstr ""
"每个部件都有一个 ``template_name`` 属性，其值如 ``input.html``。内建的部件模"
"板存储在 ``django/forms/widgets`` 路径中，你可以为 ``input.html`` 提供一个自"
"定义模板。你可以通过定义 ``django/forms/widgets/input.html`` 来为 ``input."
"html`` 提供一个自定义模板，例如。参见 :ref:`built-in widgets` 了解每个部件的"
"模板名称。"

msgid ""
"To override widget templates, you must use the :class:`TemplatesSetting` "
"renderer. Then overriding widget templates works :doc:`the same as </howto/"
"overriding-templates>` overriding any other template in your project."
msgstr ""
"要覆盖部件模板，你必须使用 :class:`TemplatesSetting` 渲染器。然后覆盖部件模板"
"的工作原理 :doc:`和覆盖项目中的任何其他模板一样 </howto/overriding-"
"templates>`。"

msgid "Form and field validation"
msgstr "表单和字段验证"

msgid ""
"Form validation happens when the data is cleaned. If you want to customize "
"this process, there are various places to make changes, each one serving a "
"different purpose. Three types of cleaning methods are run during form "
"processing. These are normally executed when you call the ``is_valid()`` "
"method on a form. There are other things that can also trigger cleaning and "
"validation (accessing the ``errors`` attribute or calling ``full_clean()`` "
"directly), but normally they won't be needed."
msgstr ""
"表单验证发生在清理数据的时候。如果你想自定义这个过程，有各种地方可以进行更"
"改，每个地方都有不同的目的。在表单处理过程中会运行三种类型的清理方法。这些方"
"法通常在调用表单上的 ``is_valid()`` 方法时执行。还有其他一些事情也可以触发清"
"理和验证（访问 ``errors`` 属性或直接调用 ``full_clean()``），但通常不需要。"

msgid ""
"In general, any cleaning method can raise ``ValidationError`` if there is a "
"problem with the data it is processing, passing the relevant information to "
"the ``ValidationError`` constructor. :ref:`See below <raising-validation-"
"error>` for the best practice in raising ``ValidationError``. If no "
"``ValidationError`` is raised, the method should return the cleaned "
"(normalized) data as a Python object."
msgstr ""
"一般来说，任何清理方法都可以在处理的数据出现问题时引发 ``ValidationError``，"
"将相关信息传递给 ``ValidationError`` 构造函数。 :ref:`参见下文 <raising-"
"validation-error>` `关于引发 ``ValidationError`` 的最佳实践。如果没有引发 "
"``ValidationError``，该方法应该将清理后（规范化）的数据作为 Python 对象返回。"

msgid ""
"Most validation can be done using `validators`_ - helpers that can be "
"reused. Validators are functions (or callables) that take a single argument "
"and raise ``ValidationError`` on invalid input. Validators are run after the "
"field's ``to_python`` and ``validate`` methods have been called."
msgstr ""
"大多数验证可以使用 `validators`_ —— 可以重复使用的辅助功能来完成。验证器是函"
"数（或可调用对象），它只接受一个参数，并在无效输入时引发 "
"``ValidationError``。验证器在字段的 ``to_python`` 和 ``validate`` 方法被调用"
"后运行。"

msgid ""
"Validation of a form is split into several steps, which can be customized or "
"overridden:"
msgstr "表单的验证分为几个步骤，可以自定义或覆盖："

msgid ""
"The ``to_python()`` method on a ``Field`` is the first step in every "
"validation. It coerces the value to a correct datatype and raises "
"``ValidationError`` if that is not possible. This method accepts the raw "
"value from the widget and returns the converted value. For example, a "
"``FloatField`` will turn the data into a Python ``float`` or raise a "
"``ValidationError``."
msgstr ""
"``Field`` 上的 ``to_python()`` 方法是每次验证的第一步。它强制将值转换为正确的"
"数据类型，并在不可能的情况下引发 ``ValidationError``。该方法接受来自部件的原"
"始值并返回转换后的值。例如，一个 ``FloatField`` 将把数据变成 Python "
"``float`` 或引发 ``ValidationError``。"

msgid ""
"The ``validate()`` method on a ``Field`` handles field-specific validation "
"that is not suitable for a validator. It takes a value that has been coerced "
"to a correct datatype and raises ``ValidationError`` on any error. This "
"method does not return anything and shouldn't alter the value. You should "
"override it to handle validation logic that you can't or don't want to put "
"in a validator."
msgstr ""
"``Field`` 上的 ``validate()`` 方法处理不适合验证器的特定字段验证。它接受一个"
"被强制为正确数据类型的值，并在任何错误时引发 ``ValidationError``。这个方法不"
"会返回任何东西，也不应该改变值。你应该覆盖它来处理你不能或不想放在验证器中的"
"验证逻辑。"

msgid ""
"The ``run_validators()`` method on a ``Field`` runs all of the field's "
"validators and aggregates all the errors into a single ``ValidationError``. "
"You shouldn't need to override this method."
msgstr ""
"``Field`` 上的 ``run_validators()`` 方法会运行该字段的所有验证器，并将所有错"
"误汇总到一个 ``ValidationError``。你不应该需要覆盖这个方法。"

msgid ""
"The ``clean()`` method on a ``Field`` subclass is responsible for running "
"``to_python()``, ``validate()``, and ``run_validators()`` in the correct "
"order and propagating their errors. If, at any time, any of the methods "
"raise ``ValidationError``, the validation stops and that error is raised. "
"This method returns the clean data, which is then inserted into the "
"``cleaned_data`` dictionary of the form."
msgstr ""
"``Field`` 子类上的 ``clean()`` 方法负责以正确的顺序运行 ``to_python()``、"
"``validate()`` 和 ``run_validators()`` 并传播它们的错误。如果在任何时候，任何"
"一个方法引发了 ``ValidationError``，验证就会停止，并引发该错误。该方法返回干"
"净的数据，然后将其插入到表单的 ``cleaned_data`` 字典中。"

msgid ""
"The ``clean_<fieldname>()`` method is called on a form subclass -- where "
"``<fieldname>`` is replaced with the name of the form field attribute. This "
"method does any cleaning that is specific to that particular attribute, "
"unrelated to the type of field that it is. This method is not passed any "
"parameters. You will need to look up the value of the field in ``self."
"cleaned_data`` and remember that it will be a Python object at this point, "
"not the original string submitted in the form (it will be in "
"``cleaned_data`` because the general field ``clean()`` method, above, has "
"already cleaned the data once)."
msgstr ""
"``clean_<fieldname>()`` 方法是在表单子类上调用的——其中 ``<fieldname>`` 被替换"
"为表单字段属性的名称。这个方法做任何特定属性的清理工作，与字段的类型无关。这"
"个方法不传递任何参数。你需要在 ``self.cleaned_data`` 中查找字段的值，并且记"
"住，此时它将是一个 Python 对象，而不是在表单中提交的原始字符串（它将在 "
"``cleaned_data`` 中，因为上面的一般字段 ``clean()`` 方法已经清理了一次数"
"据）。"

msgid ""
"For example, if you wanted to validate that the contents of a ``CharField`` "
"called ``serialnumber`` was unique, ``clean_serialnumber()`` would be the "
"right place to do this. You don't need a specific field (it's a "
"``CharField``), but you want a formfield-specific piece of validation and, "
"possibly, cleaning/normalizing the data."
msgstr ""
"例如，如果你想验证一个叫 ``serialnumber`` 的 ``CharField`` 的内容是唯一的，"
"``clean_serialnumber()`` 就可以做这件事。你不需要一个特定的字段（它是一个 "
"``CharField``），但你需要一个特定字段的验证，可能的话，清理／规范数据。"

msgid ""
"The return value of this method replaces the existing value in "
"``cleaned_data``, so it must be the field's value from ``cleaned_data`` "
"(even if this method didn't change it) or a new cleaned value."
msgstr ""
"这个方法的返回值会替换 ``cleaned_data`` 中的现有值，所以它必须是 "
"``cleaned_data`` 中的字段值（即使这个方法没有改变它）或一个新的干净值。"

msgid ""
"The form subclass's ``clean()`` method can perform validation that requires "
"access to multiple form fields. This is where you might put in checks such "
"as \"if field ``A`` is supplied, field ``B`` must contain a valid email "
"address\". This method can return a completely different dictionary if it "
"wishes, which will be used as the ``cleaned_data``."
msgstr ""
"表单子类的 ``clean()`` 方法可以执行需要访问多个表单字段的验证。在这里，你可以"
"放入诸如“如果提供了字段 ``A``，字段 ``B`` 必须包含一个有效的电子邮件地址”这样"
"的检查。如果你愿意，这个方法可以返回一个完全不同的字典，这个字典将被用作 "
"``cleaned_data``。"

msgid ""
"Since the field validation methods have been run by the time ``clean()`` is "
"called, you also have access to the form's ``errors`` attribute which "
"contains all the errors raised by cleaning of individual fields."
msgstr ""
"因为在调用 ``clean()`` 时，字段验证方法已经运行，所以你也可以访问表单的 "
"``errors`` 属性，它包含了所有清理单个字段时产生的错误。"

msgid ""
"Note that any errors raised by your :meth:`Form.clean()` override will not "
"be associated with any field in particular. They go into a special "
"\"field\" (called ``__all__``), which you can access via the :meth:`~django."
"forms.Form.non_field_errors` method if you need to. If you want to attach "
"errors to a specific field in the form, you need to call :meth:`~django."
"forms.Form.add_error()`."
msgstr ""
"请注意，任何由 :meth:`Form.clean()` 覆盖引起的错误都不会与任何特定的字段相关"
"联。它们会进入一个特殊的“字段”（称为 ``__all__``），如果需要的话，你可以通"
"过 :meth:`~django.forms.Form.non_field_errors` 方法来访问。如果你想将错误附加"
"到表单中的某个特定字段，你需要调用 :meth:`~django.forms.Form.add_error()`。"

msgid ""
"Also note that there are special considerations when overriding the "
"``clean()`` method of a ``ModelForm`` subclass. (see the :ref:`ModelForm "
"documentation <overriding-modelform-clean-method>` for more information)"
msgstr ""
"还需要注意的是，当覆盖 ``ModelForm`` 子类的 ``clean()`` 方法时，有一些特殊的"
"注意事项。（更多信息见 :ref:`模型表单文档 <overriding-modelform-clean-"
"method>`）"

msgid ""
"These methods are run in the order given above, one field at a time.  That "
"is, for each field in the form (in the order they are declared in the form "
"definition), the ``Field.clean()`` method (or its override) is run, then "
"``clean_<fieldname>()``. Finally, once those two methods are run for every "
"field, the :meth:`Form.clean()` method, or its override, is executed whether "
"or not the previous methods have raised errors."
msgstr ""
"这些方法按上述顺序运行，每次只运行一个字段。 也就是说，对于表单中的每一个字段"
"（按照表单定义中声明的顺序），先运行 ``Field.clean()`` 方法（或其覆盖），然后"
"运行 ``clean_()``。最后，一旦这两个方法对每个字段都被运行，无论前面的方法是否"
"出错，都会执行 :meth:`Form.clean()`` 方法或其覆盖。"

msgid "Examples of each of these methods are provided below."
msgstr "以下是这些方法的例子。"

msgid ""
"As mentioned, any of these methods can raise a ``ValidationError``. For any "
"field, if the ``Field.clean()`` method raises a ``ValidationError``, any "
"field-specific cleaning method is not called. However, the cleaning methods "
"for all remaining fields are still executed."
msgstr ""
"如上所述，这些方法中的任何一种都可能引起 ``ValidationError``。对于任何字段，"
"如果 ``Field.clean()`` 方法引起 ``ValidationError``，则不调用任何特定字段的清"
"理方法。但是，所有其余字段的清理方法仍然会被执行。"

msgid "Raising ``ValidationError``"
msgstr "引发 ``ValidationError``"

msgid ""
"In order to make error messages flexible and easy to override, consider the "
"following guidelines:"
msgstr "为了使错误信息灵活且易于覆盖，请考虑以下准则："

msgid "Provide a descriptive error ``code`` to the constructor::"
msgstr "为构造函数提供一个描述性错误 ``code``："

msgid ""
"Don't coerce variables into the message; use placeholders and the ``params`` "
"argument of the constructor::"
msgstr "不要在信息中强行加入变量；使用占位符和构造函数的 ``params`` 参数："

msgid ""
"Use mapping keys instead of positional formatting. This enables putting the "
"variables in any order or omitting them altogether when rewriting the "
"message::"
msgstr ""
"使用映射键代替位置格式化。这样可以在重写信息时，将变量按任何顺序排列或完全省"
"略："

msgid "Wrap the message with ``gettext`` to enable translation::"
msgstr "用 ``gettext`` 包装信息，以启用翻译："

msgid "Putting it all together::"
msgstr "把它放在一起："

msgid ""
"Following these guidelines is particularly necessary if you write reusable "
"forms, form fields, and model fields."
msgstr ""
"如果你写的是可重用的表单、表单字段和模型字段，那么遵循这些准则是特别必要的。"

msgid ""
"While not recommended, if you are at the end of the validation chain (i.e. "
"your form ``clean()`` method) and you know you will *never* need to override "
"your error message you can still opt for the less verbose::"
msgstr ""
"虽然不建议使用，但如果你处于验证链的末端（即你的表单 ``clean()`` 方法），并且"
"你知道你将永远不需要覆盖你的错误信息，你仍然可以选择不那么啰嗦的："

msgid ""
"The :meth:`Form.errors.as_data() <django.forms.Form.errors.as_data()>` and :"
"meth:`Form.errors.as_json() <django.forms.Form.errors.as_json()>` methods "
"greatly benefit from fully featured ``ValidationError``\\s (with a ``code`` "
"name and a ``params`` dictionary)."
msgstr ""
":meth:`Form.errors.as_data() <django.forms.Form.errors.as_data()>` 和 :meth:"
"`Form.errors.as_json() <django.forms.Form.errors.as_json()>` 方法极大地受益于"
"功能齐全的 ``ValidationError`` （带有 ``code`` 名称和 ``params`` 字典）。"

msgid "Raising multiple errors"
msgstr "引发多个错误"

msgid ""
"If you detect multiple errors during a cleaning method and wish to signal "
"all of them to the form submitter, it is possible to pass a list of errors "
"to the ``ValidationError`` constructor."
msgstr ""
"如果在清理方法中检测到多个错误，并希望向表单提交者发出所有错误信号，可以将错"
"误列表传递给 ``ValidationError`` 构造函数。"

msgid ""
"As above, it is recommended to pass a list of ``ValidationError`` instances "
"with ``code``\\s and ``params`` but a list of strings will also work::"
msgstr ""
"如上所述，建议传递一个带有 ``code`` 和 ``params`` 的 ``ValidationError`` 实例"
"列表，但一个字符串列表也可以："

msgid "Using validation in practice"
msgstr "在实践中使用验证"

msgid ""
"The previous sections explained how validation works in general for forms. "
"Since it can sometimes be easier to put things into place by seeing each "
"feature in use, here are a series of small examples that use each of the "
"previous features."
msgstr ""
"前面的章节解释了一般表单的验证是如何工作的。由于有时通过看到每个功能的使用，"
"可以更容易地将事情落实到位，这里有一系列使用前面每个功能的小例子。"

msgid "Using validators"
msgstr "使用验证器"

msgid ""
"Django's form (and model) fields support use of utility functions and "
"classes known as validators. A validator is a callable object or function "
"that takes a value and returns nothing if the value is valid or raises a :"
"exc:`~django.core.exceptions.ValidationError` if not. These can be passed to "
"a field's constructor, via the field's ``validators`` argument, or defined "
"on the :class:`~django.forms.Field` class itself with the "
"``default_validators`` attribute."
msgstr ""
"Django 的表单（和模型）字段支持使用被称为验证器的实用函数和类。验证器是一个可"
"调用对象或函数，它接收一个值，如果该值有效则不返回任何内容，如果无效则引发一"
"个 :exc:`~django.core.exceptions.ValidationError`。这些可以通过字段的 "
"``validators`` 参数传递给字段的构造函数，或者在 :class:`~django.forms.Field` "
"类本身的 ``default_validators`` 属性中定义。"

msgid ""
"Validators can be used to validate values inside the field, let's have a "
"look at Django's ``SlugField``::"
msgstr "验证器可以用来验证字段内部的值，我们来看看 Django 的 ``SlugField``："

msgid ""
"As you can see, ``SlugField`` is a ``CharField`` with a customized validator "
"that validates that submitted text obeys to some character rules. This can "
"also be done on field definition so::"
msgstr ""
"正如你所看到的，``SlugField`` 是一个带有自定义验证器的 ``CharField``，它可以"
"验证提交的文本是否符合某些字符规则。这也可以在字段定义中完成："

msgid "is equivalent to::"
msgstr "相当于："

msgid ""
"Common cases such as validating against an email or a regular expression can "
"be handled using existing validator classes available in Django. For "
"example, ``validators.validate_slug`` is an instance of a :class:`~django."
"core.validators.RegexValidator` constructed with the first argument being "
"the pattern: ``^[-a-zA-Z0-9_]+$``. See the section on :doc:`writing "
"validators </ref/validators>` to see a list of what is already available and "
"for an example of how to write a validator."
msgstr ""
"常见的情况下，如对电子邮件或正则表达式进行验证，可以使用 Django 中现有的验证"
"器类来处理。例如，``validators.validate_slug`` 是一个 :class:`~django.core."
"validators.RegexValidator` 的实例，它的第一个参数是模式：``^[-a-zA-Z0-9_]+"
"$```。参见 :doc:`编写验证器 </ref/validators>` 一节，查看已有验证器的列表，以"
"及如何编写验证器的例子。"

msgid "Form field default cleaning"
msgstr "表单字段默认清理"

msgid ""
"Let's first create a custom form field that validates its input is a string "
"containing comma-separated email addresses. The full class looks like this::"
msgstr ""
"首先让我们创建一个自定义表单字段，验证其输入是包含逗号分隔的电子邮件地址的字"
"符串。完整的类是这样的："

msgid ""
"Every form that uses this field will have these methods run before anything "
"else can be done with the field's data. This is cleaning that is specific to "
"this type of field, regardless of how it is subsequently used."
msgstr ""
"每个使用该字段的表单在对字段的数据进行任何操作之前，都会运行这些方法。这是专"
"门针对这种类型的字段进行的清理，不管它随后如何使用。"

msgid ""
"Let's create a ``ContactForm`` to demonstrate how you'd use this field::"
msgstr "让我们创建一个 ``ContactForm`` 来演示如何使用这个字段："

msgid ""
"Use ``MultiEmailField`` like any other form field. When the ``is_valid()`` "
"method is called on the form, the ``MultiEmailField.clean()`` method will be "
"run as part of the cleaning process and it will, in turn, call the custom "
"``to_python()`` and ``validate()`` methods."
msgstr ""
"像使用其他表单字段一样使用 ``MultiEmailField``。当在表单上调用 "
"``is_valid()`` 方法时，``MultiEmailField.clean()`` 方法将作为清理过程的一部分"
"被运行，它将反过来调用自定义的 ``to_python()`` 和 ``validate()`` 方法。"

msgid "Cleaning a specific field attribute"
msgstr "清理一个特定的字段属性"

msgid ""
"Continuing on from the previous example, suppose that in our "
"``ContactForm``, we want to make sure that the ``recipients`` field always "
"contains the address ``\"fred@example.com\"``. This is validation that is "
"specific to our form, so we don't want to put it into the general "
"``MultiEmailField`` class. Instead, we write a cleaning method that operates "
"on the ``recipients`` field, like so::"
msgstr ""
"继续上一个例子，假设在我们的 ``ContactForm`` 中，我们想确保 ``recipients`` 字"
"段总是包含地址 ``\"fred@example.com\"``。这是我们的表单所特有的验证，所以我们"
"不想把它放到一般的 ``MultiEmailField`` 类中。取而代之的是，我们写了一个清理方"
"法，对 ``recipients`` 字段进行操作，就像这样："

msgid "Cleaning and validating fields that depend on each other"
msgstr "清理和验证相互依赖的字段"

msgid ""
"Suppose we add another requirement to our contact form: if the ``cc_myself`` "
"field is ``True``, the ``subject`` must contain the word ``\"help\"``. We "
"are performing validation on more than one field at a time, so the form's :"
"meth:`~Form.clean()` method is a good spot to do this. Notice that we are "
"talking about the ``clean()`` method on the form here, whereas earlier we "
"were writing a ``clean()`` method on a field. It's important to keep the "
"field and form difference clear when working out where to validate things. "
"Fields are single data points, forms are a collection of fields."
msgstr ""
"假设我们在联系表单中添加了另一个要求：如果 ``cc_myself`` 字段为 ``True``，则 "
"``subject`` 必须包含 ``\"help\"`` 一词。我们同时对多个字段进行验证，所以表单"
"的 :meth:`~Form.clean()` 方法是一个很好的地方。注意，我们这里说的是表单上的 "
"``clean()`` 方法，而前面我们是在一个字段上写一个 ``clean()`` 方法。在研究验证"
"东西的位置时，明确字段和表单的区别是很重要的。字段是单个数据点，表单是字段的"
"集合。"

msgid ""
"By the time the form's ``clean()`` method is called, all the individual "
"field clean methods will have been run (the previous two sections), so "
"``self.cleaned_data`` will be populated with any data that has survived so "
"far. So you also need to remember to allow for the fact that the fields you "
"are wanting to validate might not have survived the initial individual field "
"checks."
msgstr ""
"当表单的 ``clean()`` 方法被调用时，所有的单独字段清理方法都会被运行（前面两"
"节），所以 ``self.cleaned_data`` 将被填充到目前为止存活的任何数据中。所以你还"
"需要记住，要验证的字段可能没有通过最初的单个字段检查。"

msgid ""
"There are two ways to report any errors from this step. Probably the most "
"common method is to display the error at the top of the form. To create such "
"an error, you can raise a ``ValidationError`` from the ``clean()`` method. "
"For example::"
msgstr ""
"有两种方法可以报告这一步的任何错误。最常见的方法可能是在表单顶部显示错误。要"
"创建这样一个错误，你可以从 ``clean()`` 方法中引发一个 ``ValidationError``。例"
"如："

msgid ""
"In this code, if the validation error is raised, the form will display an "
"error message at the top of the form (normally) describing the problem. Such "
"errors are non-field errors, which are displayed in the template with "
"``{{ form.non_field_errors }}``."
msgstr ""
"在这段代码中，如果出现验证错误，表单将在表单顶部显示错误信息（通常），描述问"
"题。这种错误属于非字段错误，在模板中用 ``{form.non_field_errors }}`` 显示。"

msgid ""
"The call to ``super().clean()`` in the example code ensures that any "
"validation logic in parent classes is maintained. If your form inherits "
"another that doesn't return a ``cleaned_data`` dictionary in its ``clean()`` "
"method (doing so is optional), then don't assign ``cleaned_data`` to the "
"result of the ``super()`` call and use ``self.cleaned_data`` instead::"
msgstr ""
"示例代码中对 ``super().clean()`` 的调用确保了父类中的任何验证逻辑得到了维护。"
"如果你的表单继承了另一个没有在其 ``clean()`` 方法中返回 ``cleaned_data`` 字典"
"的表单（这样做是可选的），那么不要给 ``super()`` 调用的结果分配 "
"``cleaned_data``，而使用 ``self.cleaned_data`` 来代替："

msgid ""
"The second approach for reporting validation errors might involve assigning "
"the error message to one of the fields. In this case, let's assign an error "
"message to both the \"subject\" and \"cc_myself\" rows in the form display. "
"Be careful when doing this in practice, since it can lead to confusing form "
"output. We're showing what is possible here and leaving it up to you and "
"your designers to work out what works effectively in your particular "
"situation. Our new code (replacing the previous sample) looks like this::"
msgstr ""
"第二种报告验证错误的方法可能涉及到将错误信息分配给其中一个字段。在这种情况"
"下，让我们为表单显示中的“subject”和“cc_myself”行分配一条错误信息。在实际操作"
"时要小心，因为这会导致混乱的表单输出。我们在这里展示的是可能的情况，而让你和"
"你的设计师们自己去研究在你的特定情况下如何有效地工作。我们的新代码（替换了之"
"前的示例）看起来像这样："

msgid ""
"The second argument of ``add_error()`` can be a string, or preferably an "
"instance of ``ValidationError``. See :ref:`raising-validation-error` for "
"more details. Note that ``add_error()`` automatically removes the field from "
"``cleaned_data``."
msgstr ""
"``add_error()`` 的第二个参数可以是一个字符串，或者最好是 ``ValidationError`` "
"的一个实例。更多细节请参见 :ref:`raising-validation-error`。请注意，"
"``add_error()`` 会自动从 ``cleaned_data`` 中删除该字段。"

msgid ""
"A widget is Django's representation of an HTML input element. The widget "
"handles the rendering of the HTML, and the extraction of data from a GET/"
"POST dictionary that corresponds to the widget."
msgstr ""
"部件是 Django 对 HTML 输入元素的表示。部件处理 HTML 的渲染，以及从对应于部件"
"的 GET／POST 字典中提取数据。"

msgid ""
"The HTML generated by the built-in widgets uses HTML5 syntax, targeting ``<!"
"DOCTYPE html>``. For example, it uses boolean attributes such as ``checked`` "
"rather than the XHTML style of ``checked='checked'``."
msgstr ""
"内置部件生成的 HTML 使用 HTML5 语法，目标是 ``<!DOCTYPE html>``。例如，它使用"
"布尔属性，如 ``checked`` 而不是 XHTML 风格的 ``checked='checked'``。"

msgid ""
"Widgets should not be confused with the :doc:`form fields </ref/forms/"
"fields>`. Form fields deal with the logic of input validation and are used "
"directly in templates. Widgets deal with rendering of HTML form input "
"elements on the web page and extraction of raw submitted data. However, "
"widgets do need to be :ref:`assigned <widget-to-field>` to form fields."
msgstr ""
"部件不应该与 :doc:`表单字段 </ref/forms/fields>` 混淆。表单字段处理输入验证的"
"逻辑，直接在模板中使用。小组件处理 HTML 表单输入元素在网页上的渲染和原始提交"
"数据的提取。然而，部件确实需要 :ref:`分配 <widget-to-field>` 到表单字段。"

msgid "Specifying widgets"
msgstr "指定部件"

msgid ""
"Whenever you specify a field on a form, Django will use a default widget "
"that is appropriate to the type of data that is to be displayed. To find "
"which widget is used on which field, see the documentation about :ref:`built-"
"in-fields`."
msgstr ""
"每当你在表单中指定一个字段时，Django 会使用一个默认的部件来显示数据类型。要想"
"知道哪个字段使用的是哪个部件，请看 :ref:`built-in-fields` 的文档。"

msgid ""
"However, if you want to use a different widget for a field, you can use the :"
"attr:`~Field.widget` argument on the field definition. For example::"
msgstr ""
"但是，如果你想为一个字段使用不同的部件，你可以在字段定义中使用 :attr:`~Field."
"widget` 参数。例如："

msgid ""
"This would specify a form with a comment that uses a larger :class:"
"`Textarea` widget, rather than the default :class:`TextInput` widget."
msgstr ""
"这将指定一个带有注释的表单，该表单使用一个较大的 :class:`Textarea` 部件，而不"
"是默认的 :class:`TextInput` 部件。"

msgid "Setting arguments for widgets"
msgstr "为部件设置参数"

msgid ""
"Many widgets have optional extra arguments; they can be set when defining "
"the widget on the field. In the following example, the :attr:`~django.forms."
"SelectDateWidget.years` attribute is set for a :class:`~django.forms."
"SelectDateWidget`::"
msgstr ""
"许多部件都有可选的额外参数；它们可以在字段上定义部件时进行设置。在下面的例子"
"中， :attr:`~django.forms.SelectDateWidget.years` 属性被设置为 :class:"
"`~django.forms.SelectDateWidget`："

msgid ""
"See the :ref:`built-in widgets` for more information about which widgets are "
"available and which arguments they accept."
msgstr ""
"请参阅 :ref:`built-in widgets`，了解更多关于哪些部件可用以及它们接受哪些参数"
"的信息。"

msgid "Widgets inheriting from the ``Select`` widget"
msgstr "继承自 ``Select`` 部件的部件。"

msgid ""
"Widgets inheriting from the :class:`Select` widget deal with choices. They "
"present the user with a list of options to choose from. The different "
"widgets present this choice differently; the :class:`Select` widget itself "
"uses a ``<select>`` HTML list representation, while :class:`RadioSelect` "
"uses radio buttons."
msgstr ""
"继承自 :class:`Select` 部件的部件处理选择。它们向用户提供了一个可供选择的选项"
"列表。不同的部件以不同的方式呈现这种选择；:class:`Select` 部件本身使用 "
"``<select>`` HTML 列表表示，而 :class:`RadioSelect` 使用单选按钮。"

msgid ""
":class:`Select` widgets are used by default on :class:`ChoiceField` fields. "
"The choices displayed on the widget are inherited from the :class:"
"`ChoiceField` and changing :attr:`ChoiceField.choices` will update :attr:"
"`Select.choices`. For example:"
msgstr ""

msgid ""
"Widgets which offer a :attr:`~Select.choices` attribute can however be used "
"with fields which are not based on choice -- such as a :class:`CharField` -- "
"but it is recommended to use a :class:`ChoiceField`-based field when the "
"choices are inherent to the model and not just the representational widget."
msgstr ""
"然而，提供 :attr:`~Select.chips` 属性的部件可以与非基于选择的字段一起使用——例"
"如 :class:`CharField`——但当选择是模型固有的，而不仅仅是表示部件时，建议使用 :"
"class:`ChoiceField` 为基础的字段。"

msgid "Customizing widget instances"
msgstr "自定义部件实例"

msgid ""
"When Django renders a widget as HTML, it only renders very minimal markup - "
"Django doesn't add class names, or any other widget-specific attributes. "
"This means, for example, that all :class:`TextInput` widgets will appear the "
"same on your web pages."
msgstr ""
"当 Django 将一个部件渲染成 HTML 时，它只渲染了非常少的标记——Django 不会添加类"
"名，或任何其他部件的特定属性。这意味着，例如，所有的 :class:`TextInput` 部件"
"在你的网页上看起来都是一样的。"

msgid ""
"There are two ways to customize widgets: :ref:`per widget instance <styling-"
"widget-instances>` and :ref:`per widget class <styling-widget-classes>`."
msgstr ""
"有两种方法来定制部件： :ref:`每个部件实例 <styling-widget-instances>` 和 :"
"ref:`每个部件类 <styling-widget-classes>`。"

msgid "Styling widget instances"
msgstr "样式化部件实例"

msgid ""
"If you want to make one widget instance look different from another, you "
"will need to specify additional attributes at the time when the widget "
"object is instantiated and assigned to a form field (and perhaps add some "
"rules to your CSS files)."
msgstr ""
"如果你想让一个部件实例看起来与另一个不同，你需要在实例化部件对象并将其分配给"
"表单字段时指定额外的属性（也许还需要在你的 CSS 文件中添加一些规则）。"

msgid "For example, take the following form::"
msgstr "例如，采取以下表单："

msgid ""
"This form will include three default :class:`TextInput` widgets, with "
"default rendering -- no CSS class, no extra attributes. This means that the "
"input boxes provided for each widget will be rendered exactly the same:"
msgstr ""

msgid ""
"On a real web page, you probably don't want every widget to look the same. "
"You might want a larger input element for the comment, and you might want "
"the 'name' widget to have some special CSS class. It is also possible to "
"specify the 'type' attribute to take advantage of the new HTML5 input "
"types.  To do this, you use the :attr:`Widget.attrs` argument when creating "
"the widget::"
msgstr ""
"在一个真正的网页上，你可能不希望每个部件看起来都一样。你可能想要一个更大的评"
"论输入元素，你可能想要 “姓名” 部件有一些特殊的 CSS 类。也可以指定“type”属性以"
"利用新的 HTML5 输入类型。 要做到这一点，你在创建部件时使用 :attr:`Widget."
"attrs` 参数："

msgid "You can also modify a widget in the form definition::"
msgstr "你也可以在表单定义中修改一个部件："

msgid ""
"Or if the field isn't declared directly on the form (such as model form "
"fields), you can use the :attr:`Form.fields` attribute::"
msgstr ""
"或者如果该字段没有直接在表单上声明（比如模型表单字段），可以使用 :attr:`Form."
"fields` 属性："

msgid "Django will then include the extra attributes in the rendered output:"
msgstr "Django 会将额外的属性包含在渲染的输出中："

msgid ""
"You can also set the HTML ``id`` using :attr:`~Widget.attrs`. See :attr:"
"`BoundField.id_for_label` for an example."
msgstr ""
"你也可以使用 :attr:`~Widget.attrs` 设置 HTML ``id``。参见 :attr:`BoundField."
"id_for_label` 的例子。"

msgid "Styling widget classes"
msgstr "样式化部件类"

msgid ""
"With widgets, it is possible to add assets (``css`` and ``javascript``) and "
"more deeply customize their appearance and behavior."
msgstr ""
"有了部件，就可以添加静态资源（``css`` 和 ``javascript``）并更深入地定制它们的"
"外观和行为。"

msgid ""
"In a nutshell, you will need to subclass the widget and either :ref:`define "
"a \"Media\" inner class  <assets-as-a-static-definition>` or :ref:`create a "
"\"media\" property <dynamic-property>`."
msgstr ""
"简而言之，你需要对部件进行子类化，并且 :ref:`定义一个内部“Media”类 <assets-"
"as-a-static-definition>` 或者 :ref:`创建一个\"media\"属性 <dynamic-"
"property>`。"

msgid ""
"These methods involve somewhat advanced Python programming and are described "
"in detail in the :doc:`Form Assets </topics/forms/media>` topic guide."
msgstr ""
"这些方法涉及到一些高级的 Python 编程，在 :doc:`表单静态资源 </topics/forms/"
"media>` 主题指南中有详细描述。"

msgid "Base widget classes"
msgstr "基础部件类"

msgid ""
"Base widget classes :class:`Widget` and :class:`MultiWidget` are subclassed "
"by all the :ref:`built-in widgets <built-in widgets>` and may serve as a "
"foundation for custom widgets."
msgstr ""
"基础部件类 :class:`Widget` 和 :class:`MultiWidget` 被所有的 :ref:`内置部件 "
"<built-in widgets>` 子类化，可以作为自定义部件的基础。"

msgid "``Widget``"
msgstr "``Widget``"

msgid ""
"This abstract class cannot be rendered, but provides the basic attribute :"
"attr:`~Widget.attrs`.  You may also implement or override the :meth:`~Widget."
"render()` method on custom widgets."
msgstr ""
"这个抽象类不能被渲染，但提供了基本属性 :attr:`~Widget.attrs`。 你也可以在自定"
"义部件上实现或重写 :meth:`~Widget.render()` 方法。"

msgid ""
"A dictionary containing HTML attributes to be set on the rendered widget."
msgstr "包含要在渲染的部件上设置的 HTML 属性的字典。"

msgid ""
"If you assign a value of ``True`` or ``False`` to an attribute, it will be "
"rendered as an HTML5 boolean attribute:"
msgstr ""

msgid ""
"An attribute that defaults to ``True``. If set to ``False``, the "
"microseconds part of :class:`~datetime.datetime` and :class:`~datetime.time` "
"values will be set to ``0``."
msgstr ""
"属性，默认为 ``True``。如果设置为 ``False``，则 :class:`~datetime.datetime` "
"和 :class:`~datetime.time` 值的微秒部分将被设置为 ``0``。"

msgid ""
"Cleans and returns a value for use in the widget template. ``value`` isn't "
"guaranteed to be valid input, therefore subclass implementations should "
"program defensively."
msgstr ""
"清理并返回一个值，供部件模板使用。``value`` 并不能保证是有效的输入，因此子类"
"的实现应该是防御性的。"

msgid ""
"Returns a dictionary of values to use when rendering the widget template. By "
"default, the dictionary contains a single key, ``'widget'``, which is a "
"dictionary representation of the widget containing the following keys:"
msgstr ""
"返回渲染部件模板时要使用的值的字典。默认情况下，该字典包含一个键，"
"``'widget'``，它是一个包含以下键的部件的字典表示："

msgid "``'name'``: The name of the field from the ``name`` argument."
msgstr "``'name'``：``name`` 参数中的字段名称。"

msgid ""
"``'is_hidden'``: A boolean indicating whether or not this widget is hidden."
msgstr "``'is_hidden'``：表示该部件是否被隐藏的布尔值。"

msgid ""
"``'required'``: A boolean indicating whether or not the field for this "
"widget is required."
msgstr "``'required'``：表示该部件是否需要该字段的布尔值。"

msgid "``'value'``: The value as returned by :meth:`format_value`."
msgstr "``'value'``：:meth:`format_value' 返回的值。"

msgid ""
"``'attrs'``: HTML attributes to be set on the rendered widget. The "
"combination of the :attr:`attrs` attribute and the ``attrs`` argument."
msgstr ""
"``'attrs'``：拟在渲染的部件上设置的 HTML 属性。:attr:`attrs` 属性和 "
"``attrs`` 参数的组合。"

msgid "``'template_name'``: The value of ``self.template_name``."
msgstr "``''template_name'``：``self.template_name`` 的值。"

msgid ""
"``Widget`` subclasses can provide custom context values by overriding this "
"method."
msgstr "``Widget`` 子类可以通过覆盖该方法提供自定义上下文值。"

msgid ""
"Returns the HTML ID attribute of this widget for use by a ``<label>``, given "
"the ID of the field. Returns an empty string if an ID isn't available."
msgstr ""

msgid ""
"This hook is necessary because some widgets have multiple HTML elements and, "
"thus, multiple IDs. In that case, this method should return an ID value that "
"corresponds to the first ID in the widget's tags."
msgstr ""
"这个钩子是必要的，因为一些部件有多个 HTML 元素，因此有多个 ID。在这种情况下，"
"这个方法应该返回一个与部件标签中第一个 ID 对应的 ID 值。"

msgid ""
"Renders a widget to HTML using the given renderer. If ``renderer`` is "
"``None``, the renderer from the :setting:`FORM_RENDERER` setting is used."
msgstr ""
"使用给定的渲染器将部件渲染成 HTML。如果 ``renderer`` 为 ``None``，则使用 :"
"setting:`FORM_RENDERER` 设置中的渲染器。"

msgid ""
"Given a dictionary of data and this widget's name, returns the value of this "
"widget. ``files`` may contain data coming from :attr:`request.FILES <django."
"http.HttpRequest.FILES>`. Returns ``None`` if a value wasn't provided. Note "
"also that ``value_from_datadict`` may be called more than once during "
"handling of form data, so if you customize it and add expensive processing, "
"you should implement some caching mechanism yourself."
msgstr ""
"给定一个数据字典和这个部件的名称，返回这个部件的值。``files`` 可能包含来自 :"
"attr:`request.FILES <django.http.HttpRequest.FILES>` 的数据。如果没有提供值，"
"则返回 ``None``。还需要注意的是，在处理表单数据的过程中，"
"``value_from_datadict`` 可能会被调用不止一次，所以如果你自定义它并添加昂贵的"
"处理，你应该自己实现一些缓存机制。"

msgid ""
"Given ``data`` and ``files`` dictionaries and this widget's name, returns "
"whether or not there's data or files for the widget."
msgstr ""
"给定 ``data`` 和 ``files`` 字典和这个部件的名称，返回该部件是否有数据或文件。"

msgid ""
"The method's result affects whether or not a field in a model form :ref:"
"`falls back to its default <topics-modelform-save>`."
msgstr ""
"该方法的结果会影响模型表单中的字段 :ref:`是否回到默认 <topics-modelform-"
"save>`。"

msgid ""
"Special cases are :class:`~django.forms.CheckboxInput`, :class:`~django."
"forms.CheckboxSelectMultiple`, and :class:`~django.forms.SelectMultiple`, "
"which always return ``False`` because an unchecked checkbox and unselected "
"``<select multiple>`` don't appear in the data of an HTML form submission, "
"so it's unknown whether or not the user submitted a value."
msgstr ""
"特殊情况有 :class:`~django.forms.CheckboxInput`、:class:`~django.forms."
"CheckboxSelectMultiple` 和 :class:`~django.forms.SelectMultiple`，它们总是返"
"回 ``False``，因为未选中的复选框和未选择的 ``<select multiple>``，不会出现在 "
"HTML 表单提交的数据中，所以不知道用户是否提交了一个值。"

msgid ""
"An attribute to identify if the widget should be grouped in a ``<fieldset>`` "
"with a ``<legend>`` when rendered. Defaults to ``False`` but is ``True`` "
"when the widget contains multiple ``<input>`` tags such as :class:`~django."
"forms.CheckboxSelectMultiple`, :class:`~django.forms.RadioSelect`, :class:"
"`~django.forms.MultiWidget`, :class:`~django.forms.SplitDateTimeWidget`, "
"and :class:`~django.forms.SelectDateWidget`."
msgstr ""

msgid ""
"Given a form field's ``initial`` value, returns whether or not the widget "
"can be rendered with the ``required`` HTML attribute. Forms use this method "
"along with :attr:`Field.required <django.forms.Field.required>` and :attr:"
"`Form.use_required_attribute <django.forms.Form.use_required_attribute>` to "
"determine whether or not to display the ``required`` attribute for each "
"field."
msgstr ""
"给定一个表单字段的 ``initial`` 值，返回是否可以用 ``required`` HTML 属性来渲"
"染部件。表单使用这个方法与 :attr:`Field.required <django.forms.Field."
"required>` 和 :attr:`Form.use_required_attribute <django.forms."
"use_required_attribute>` 一起决定是否为每个字段显示 ``required`` 属性。"

msgid ""
"By default, returns ``False`` for hidden widgets and ``True`` otherwise. "
"Special cases are :class:`~django.forms.FileInput` and :class:`~django.forms."
"ClearableFileInput`, which return ``False`` when ``initial`` is set, and :"
"class:`~django.forms.CheckboxSelectMultiple`, which always returns ``False`` "
"because browser validation would require all checkboxes to be checked "
"instead of at least one."
msgstr ""
"默认情况下，对隐藏的部件返回 ``False``，否则返回 ``True``。特殊情况是 :class:"
"`~django.forms.FileInput` 和 :class:`~django.forms.ClearableFileInput`，当设"
"置了 ``initial`` 时，返回 ``False``；还有 :class:`~django.forms."
"CheckboxSelectMultiple`，总是返回 ``False``，因为浏览器验证需要选中所有的复选"
"框，而不是至少一个。"

msgid ""
"Override this method in custom widgets that aren't compatible with browser "
"validation. For example, a WSYSIWG text editor widget backed by a hidden "
"``textarea`` element may want to always return ``False`` to avoid browser "
"validation on the hidden field."
msgstr ""
"在与浏览器验证不兼容的自定义部件中覆盖此方法。例如，一个由隐藏的 "
"``textarea`` 元素支持的 WSYSIWG 文本编辑部件可能希望总是返回 ``False`` 以避免"
"浏览器对隐藏字段的验证。"

msgid "``MultiWidget``"
msgstr "``MultiWidget``"

msgid ""
"A widget that is composed of multiple widgets. :class:`~django.forms."
"MultiWidget` works hand in hand with the :class:`~django.forms."
"MultiValueField`."
msgstr ""
":class:`~django.forms.MultiWidget` 与 :class:`~django.forms.MultiValueField` "
"携手合作。"

msgid ":class:`MultiWidget` has one required argument:"
msgstr ":class:`MultiWidget` 有一个必要的参数："

msgid "An iterable containing the widgets needed. For example:"
msgstr ""

msgid ""
"You may provide a dictionary in order to specify custom suffixes for the "
"``name`` attribute on each subwidget. In this case, for each ``(key, "
"widget)`` pair, the key will be appended to the ``name`` of the widget in "
"order to generate the attribute value. You may provide the empty string "
"(``''``) for a single key, in order to suppress the suffix for one widget. "
"For example:"
msgstr ""

msgid "And one required method:"
msgstr "还有一个必要的方法："

msgid ""
"This method takes a single \"compressed\" value from the field and returns a "
"list of \"decompressed\" values. The input value can be assumed valid, but "
"not necessarily non-empty."
msgstr ""
"这个方法从字段中获取一个“压缩”值，然后返回一个“解压缩”值的列表。可以假定输入"
"值有效，但不一定是非空的。"

msgid ""
"This method **must be implemented** by the subclass, and since the value may "
"be empty, the implementation must be defensive."
msgstr ""
"这个方法 **必须由子类实现**，由于值可能是空的，所以实现必须是防御性的。"

msgid ""
"The rationale behind \"decompression\" is that it is necessary to \"split\" "
"the combined value of the form field into the values for each widget."
msgstr "“解压”背后的原理是，需要将表单字段的组合值“拆分”成每个部件的值。"

msgid ""
"An example of this is how :class:`SplitDateTimeWidget` turns a :class:"
"`~datetime.datetime` value into a list with date and time split into two "
"separate values::"
msgstr ""
"一个例子是 :class:`SplitDateTimeWidget` 如何将一个 :class:`~datetime."
"datetime` 值变成一个列表，将日期和时间分成两个独立的值："

msgid ""
"Note that :class:`~django.forms.MultiValueField` has a complementary method :"
"meth:`~django.forms.MultiValueField.compress` with the opposite "
"responsibility - to combine cleaned values of all member fields into one."
msgstr ""
"请注意 :class:`~django.forms.MultiValueField` 有一个补充方法 :meth:`~django."
"forms.MultiValueField.compress`，其职责与之相反——将所有成员字段的清理值合并为"
"一个。"

msgid "It provides some custom context:"
msgstr "它提供了一些自定义上下文："

msgid ""
"In addition to the ``'widget'`` key described in :meth:`Widget.get_context`, "
"``MultiWidget`` adds a ``widget['subwidgets']`` key."
msgstr ""
"除了:meth:`Widget.get_context` 中描述的 ``'widget'`` 键之外，``MultiWidget`` "
"还增加了一个 ``widget['subwidgets']`` 键。"

msgid "These can be looped over in the widget template:"
msgstr "这些可以在部件模板中循环使用："

msgid ""
"Here's an example widget which subclasses :class:`MultiWidget` to display a "
"date with the day, month, and year in different select boxes. This widget is "
"intended to be used with a :class:`~django.forms.DateField` rather than a :"
"class:`~django.forms.MultiValueField`, thus we have implemented :meth:"
"`~Widget.value_from_datadict`::"
msgstr ""
"下面是一个例子，它子类为 :class:`MultiWidget`，用于在不同的选择框中显示日期和"
"年、月、日。这个部件的目的是与 :class:`~django.forms.DateField` 而不是 :"
"class:`~django.forms.MultiValueField` 一起使用，因此我们实现了 :meth:"
"`~Widget.value_from_datadict`："

msgid ""
"The constructor creates several :class:`Select` widgets in a list. The "
"``super()`` method uses this list to set up the widget."
msgstr ""
"构造函数在一个列表中创建了几个 :class:`Select` 部件。``super()`` 方法使用这个"
"列表来建立部件。"

msgid ""
"The required method :meth:`~MultiWidget.decompress` breaks up a ``datetime."
"date`` value into the day, month, and year values corresponding to each "
"widget. If an invalid date was selected, such as the non-existent 30th "
"February, the :class:`~django.forms.DateField` passes this method a string "
"instead, so that needs parsing. The final ``return`` handles when ``value`` "
"is ``None``, meaning we don't have any defaults for our subwidgets."
msgstr ""
"所需的方法 :meth:`~MultiWidget.decompress` 将一个 ``datetime.date`` 的值分解"
"成对应于每个部件的日、月、年的值。如果选择了一个无效的日期，比如不存在的 2 "
"月 30 日，那么 :class:`~django.forms.DateField` 就会把这个方法传给一个字符串"
"代替，所以需要进行解析。最后的 ``return`` 处理的是 ``value`` 是 ``None`` 的时"
"候，也就是说我们的子部件没有任何默认值。"

msgid ""
"The default implementation of :meth:`~Widget.value_from_datadict` returns a "
"list of values corresponding to each ``Widget``. This is appropriate when "
"using a ``MultiWidget`` with a :class:`~django.forms.MultiValueField`. But "
"since we want to use this widget with a :class:`~django.forms.DateField`, "
"which takes a single value, we have overridden this method. The "
"implementation here combines the data from the subwidgets into a string in "
"the format that :class:`~django.forms.DateField` expects."
msgstr ""
":meth:`~Widget.value_from_datadict` 的默认实现是返回一个与每个 ``Widget`` 对"
"应的值列表。这在使用 ``MultiWidget`` 与 :class:`~django.forms."
"MultiValueField`` 时是合适的。但由于我们想将这个部件与一个 :class:`~django."
"forms.DateField` 一起使用，它只取一个值，我们已经覆盖了这个方法。这里的实现将"
"来自子部件的数据组合成一个字符串，其格式为 :class:`~django.forms.DateField` "
"所期望的格式。"

msgid "Built-in widgets"
msgstr "内置部件"

msgid ""
"Django provides a representation of all the basic HTML widgets, plus some "
"commonly used groups of widgets in the ``django.forms.widgets`` module, "
"including :ref:`the input of text <text-widgets>`, :ref:`various checkboxes "
"and selectors <selector-widgets>`, :ref:`uploading files <file-upload-"
"widgets>`, and :ref:`handling of multi-valued input <composite-widgets>`."
msgstr ""
"Django 在 ``django.forms.widgets`` 模块中提供了所有基本的 HTML 部件，以及一些"
"常用的部件组，包括 :ref:`文本输入 <text-widgets>`、:ref:`各种复选框和选择器 "
"<selector-widgets>`、:ref:`上传文件 <file-upload-widgets>` 和 :ref:`处理多值"
"输入 <composite-widgets>`。"

msgid "Widgets handling input of text"
msgstr "处理文本输入的部件"

msgid "These widgets make use of the HTML elements ``input`` and ``textarea``."
msgstr "这些部件使用了 HTML 元素 ``input`` 和 ``textarea``。"

msgid "``TextInput``"
msgstr "``TextInput``"

msgid "``input_type``: ``'text'``"
msgstr "``input_type``：``'text'``"

msgid "``template_name``: ``'django/forms/widgets/text.html'``"
msgstr "``template_name``：``'django/forms/widgets/text.html'``"

msgid "Renders as: ``<input type=\"text\" ...>``"
msgstr "渲染为：``<input type=\"text\" ...>``"

msgid "``NumberInput``"
msgstr "``NumberInput``"

msgid "``input_type``: ``'number'``"
msgstr "``input_type``：``'number'``"

msgid "``template_name``: ``'django/forms/widgets/number.html'``"
msgstr "``template_name``：``'django/forms/widgets/number.html'``"

msgid "Renders as: ``<input type=\"number\" ...>``"
msgstr "渲染为：``<input type=\"number\" ...>``"

msgid ""
"Beware that not all browsers support entering localized numbers in "
"``number`` input types. Django itself avoids using them for fields having "
"their :attr:`~django.forms.Field.localize` property set to ``True``."
msgstr ""
"请注意，并不是所有的浏览器都支持在 ``number`` 输入类型中输入本地化的数字。"
"Django 本身就避免在 :attr:`~django.forms.Field.localize` 属性设置为 ``True`` "
"的字段中使用它们。"

msgid "``EmailInput``"
msgstr "``EmailInput``"

msgid "``input_type``: ``'email'``"
msgstr "``input_type``：``'email'``"

msgid "``template_name``: ``'django/forms/widgets/email.html'``"
msgstr "``template_name``：``'django/forms/widgets/email.html'``"

msgid "Renders as: ``<input type=\"email\" ...>``"
msgstr "渲染为：``<input type=\"email\" ...>``"

msgid "``URLInput``"
msgstr "``URLInput``"

msgid "``input_type``: ``'url'``"
msgstr "``input_type``：``'url'``"

msgid "``template_name``: ``'django/forms/widgets/url.html'``"
msgstr "``template_name``：``'django/forms/widgets/url.html'``"

msgid "Renders as: ``<input type=\"url\" ...>``"
msgstr "渲染为：``<input type=\"url\" ...>``"

msgid "``PasswordInput``"
msgstr "``PasswordInput``"

msgid "``input_type``: ``'password'``"
msgstr "``input_type``：``'password'``"

msgid "``template_name``: ``'django/forms/widgets/password.html'``"
msgstr "``template_name``：``'django/forms/widgets/password.html'``"

msgid "Renders as: ``<input type=\"password\" ...>``"
msgstr "渲染为：``<input type=\"password\" ...>``"

msgid ""
"Determines whether the widget will have a value filled in when the form is "
"re-displayed after a validation error (default is ``False``)."
msgstr ""
"确定当验证错误后重新显示表格时，部件是否会有一个值被填入（默认为 "
"``False``）。"

msgid "``HiddenInput``"
msgstr "``HiddenInput``"

msgid "``input_type``: ``'hidden'``"
msgstr "``input_type``：``'hidden'``"

msgid "``template_name``: ``'django/forms/widgets/hidden.html'``"
msgstr "``template_name``：``'django/forms/widgets/hidden.html'``"

msgid "Renders as: ``<input type=\"hidden\" ...>``"
msgstr "渲染为：``<input type=\"hidden\" ...>``"

msgid ""
"Note that there also is a :class:`MultipleHiddenInput` widget that "
"encapsulates a set of hidden input elements."
msgstr ""
"请注意，还有一个 :class:`MultipleHiddenInput` 部件，封装了一组隐藏的输入元"
"素。"

msgid "``DateInput``"
msgstr "``DateInput``"

msgid "``template_name``: ``'django/forms/widgets/date.html'``"
msgstr "``template_name``：``'django/forms/widgets/date.html'``"

msgid ""
"Takes same arguments as :class:`TextInput`, with one more optional argument:"
msgstr "采用与 :class:`TextInput` 相同的参数，多一个可选参数："

msgid "The format in which this field's initial value will be displayed."
msgstr "显示该字段初始值的格式。"

msgid ""
"If no ``format`` argument is provided, the default format is the first "
"format found in :setting:`DATE_INPUT_FORMATS` and respects :doc:`/topics/"
"i18n/formatting`."
msgstr ""
"如果没有提供 ``format`` 参数，默认的格式是 :setting:`DATE_INPUT_FORMATS` 中找"
"到的第一种格式，并且尊重 :doc:`/topics/i18n/formatting`。"

msgid "``DateTimeInput``"
msgstr "``DateTimeInput``"

msgid "``template_name``: ``'django/forms/widgets/datetime.html'``"
msgstr "``template_name``：``'django/forms/widgets/datetime.html'``"

msgid ""
"If no ``format`` argument is provided, the default format is the first "
"format found in :setting:`DATETIME_INPUT_FORMATS` and respects :doc:`/topics/"
"i18n/formatting`."
msgstr ""
"如果没有提供 ``format`` 参数，默认的格式是 :setting:`DATETIME_INPUT_FORMATS` "
"中找到的第一种格式，并且尊重 :doc:`/topics/i18n/formatting`。"

msgid ""
"By default, the microseconds part of the time value is always set to ``0``. "
"If microseconds are required, use a subclass with the :attr:`~Widget."
"supports_microseconds` attribute set to ``True``."
msgstr ""
"默认情况下，时间值的微秒部分总是设置为 ``0``。如果需要微秒，则使用 :attr:"
"`~Widget.supports_microseconds` 属性设置为 ``True`` 的子类。"

msgid "``TimeInput``"
msgstr "``TimeInput``"

msgid "``template_name``: ``'django/forms/widgets/time.html'``"
msgstr "``template_name``：``'django/forms/widgets/time.html'``"

msgid ""
"If no ``format`` argument is provided, the default format is the first "
"format found in :setting:`TIME_INPUT_FORMATS` and respects :doc:`/topics/"
"i18n/formatting`."
msgstr ""
"如果没有提供 ``format`` 参数，默认的格式是 :setting:`TIME_INPUT_FORMATS` 中找"
"到的第一种格式，并且尊重 :doc:`/topics/i18n/formatting`。"

msgid "For the treatment of microseconds, see :class:`DateTimeInput`."
msgstr "关于微秒的处理，请参见 :class:`DateTimeInput`。"

msgid "``Textarea``"
msgstr "``Textarea``"

msgid "``template_name``: ``'django/forms/widgets/textarea.html'``"
msgstr "``template_name``：``'django/forms/widgets/textarea.html'``"

msgid "Renders as: ``<textarea>...</textarea>``"
msgstr "渲染为：``<textarea>...</textarea>``"

msgid "Selector and checkbox widgets"
msgstr "选择器和复选框部件"

msgid ""
"These widgets make use of the HTML elements ``<select>``, ``<input "
"type=\"checkbox\">``, and ``<input type=\"radio\">``."
msgstr ""
"这些部件使用了 HTML 元素 ``<select>``、``<input type=\"checkbox\">`` 和 "
"``<input type=\"radio\">``。"

msgid ""
"Widgets that render multiple choices have an ``option_template_name`` "
"attribute that specifies the template used to render each choice. For "
"example, for the :class:`Select` widget, ``select_option.html`` renders the "
"``<option>`` for a ``<select>``."
msgstr ""
"呈现多个选择的部件有一个 ``option_template_name`` 属性，指定用于渲染每个选择"
"的模板。例如，对于 :class:`Select` 部件，``select_option.html`` 会为  "
"``<select>`` 渲染 ``<option>``。"

msgid "``CheckboxInput``"
msgstr "``CheckboxInput``"

msgid "``input_type``: ``'checkbox'``"
msgstr "``input_type``：``'checkbox'``"

msgid "``template_name``: ``'django/forms/widgets/checkbox.html'``"
msgstr "``template_name``：``'django/forms/widgets/checkbox.html'``"

msgid "Renders as: ``<input type=\"checkbox\" ...>``"
msgstr "渲染为：``<input type=\"checkbox\" ...>``"

msgid ""
"A callable that takes the value of the ``CheckboxInput`` and returns "
"``True`` if the checkbox should be checked for that value."
msgstr ""
"一个可调用对象，它接受 ``CheckboxInput`` 的值，并返回 ``True``，如果该复选框"
"应检查该值。"

msgid "``Select``"
msgstr "``Select``"

msgid "``template_name``: ``'django/forms/widgets/select.html'``"
msgstr "``template_name``：``'django/forms/widgets/select.html'``"

msgid "``option_template_name``: ``'django/forms/widgets/select_option.html'``"
msgstr ""
"``option_template_name``：``'django/forms/widgets/select_option.html'``"

msgid "Renders as: ``<select><option ...>...</select>``"
msgstr "渲染为：``<select><option ...>...</select>``"

msgid ""
"This attribute is optional when the form field does not have a ``choices`` "
"attribute. If it does, it will override anything you set here when the "
"attribute is updated on the :class:`Field`."
msgstr ""
"当表单字段没有 ``choices`` 属性时，这个属性是可选的。如果有，当 :class:"
"`Field` 属性更新时，它将覆盖你在这里设置的任何属性。"

msgid "``NullBooleanSelect``"
msgstr "``NullBooleanSelect``"

msgid "Select widget with options 'Unknown', 'Yes' and 'No'"
msgstr "选择“未知”、“是”和“否”选项的小组件。"

msgid "``SelectMultiple``"
msgstr "``SelectMultiple``"

msgid ""
"Similar to :class:`Select`, but allows multiple selection: ``<select "
"multiple>...</select>``"
msgstr ""
"类似于 :class:`Select`，但允许多选：``<select multiple>...</select>``。"

msgid "``RadioSelect``"
msgstr "``RadioSelect``"

msgid "``template_name``: ``'django/forms/widgets/radio.html'``"
msgstr "``template_name``：``'django/forms/widgets/radio.html'``"

msgid "``option_template_name``: ``'django/forms/widgets/radio_option.html'``"
msgstr "``option_template_name``：``'django/forms/widgets/radio_option.html'``"

msgid ""
"Similar to :class:`Select`, but rendered as a list of radio buttons within "
"``<div>`` tags:"
msgstr ""
"类似于 :class:`Select`，但在 ``<div>`` 标签中呈现为一个单选按钮的列表："

msgid ""
"For more granular control over the generated markup, you can loop over the "
"radio buttons in the template. Assuming a form ``myform`` with a field "
"``beatles`` that uses a ``RadioSelect`` as its widget:"
msgstr ""
"为了对生成的标记进行更精细的控制，你可以在模板中循环使用单选按钮。假设一个表"
"单 ``myform`` 有一个字段 ``beatles``，使用 ``RadioSelect`` 作为它的部件。"

msgid "This would generate the following HTML:"
msgstr "这将产生以下 HTML："

msgid ""
"That included the ``<label>`` tags. To get more granular, you can use each "
"radio button's ``tag``, ``choice_label`` and ``id_for_label`` attributes. "
"For example, this template..."
msgstr ""
"这包括 ``<label>`` 标签。为了得到更多的细节，你可以使用每个单选按钮的 "
"``tag``、``choice_label`` 和 ``id_for_label`` 属性。例如，这个模板..."

msgid "...will result in the following HTML:"
msgstr "...将导致以下 HTML："

msgid ""
"If you decide not to loop over the radio buttons -- e.g., if your template "
"includes ``{{ myform.beatles }}`` -- they'll be output in a ``<div>`` with "
"``<div>`` tags, as above."
msgstr ""
"如果你决定不对单选按钮进行循环处理——例如，如果你的模板包括 ``{{ myform."
"beatles }}`` ——它们将在一个 ``<div>`` 中输出，并带有 ``<div>`` 标签，如上所"
"述。"

msgid ""
"The outer ``<div>`` container receives the ``id`` attribute of the widget, "
"if defined, or :attr:`BoundField.auto_id` otherwise."
msgstr ""
"外部 ``<div>`` 容器接收部件的 ``id`` 属性（如果定义了），否则是 :attr:"
"`BoundField.auto_id`。"

msgid ""
"When looping over the radio buttons, the ``label`` and ``input`` tags "
"include ``for`` and ``id`` attributes, respectively. Each radio button has "
"an ``id_for_label`` attribute to output the element's ID."
msgstr ""
"在循环单选按钮时，``label`` 和 ``input`` 标签分别包含 ``for`` 和 ``id`` 属"
"性。每个单选按钮都有一个 ``id_for_label`` 属性来输出元素的 ID。"

msgid "``CheckboxSelectMultiple``"
msgstr "``CheckboxSelectMultiple``"

msgid "``template_name``: ``'django/forms/widgets/checkbox_select.html'``"
msgstr "``template_name``：``'django/forms/widgets/checkbox_select.html'``"

msgid ""
"``option_template_name``: ``'django/forms/widgets/checkbox_option.html'``"
msgstr ""
"``option_template_name``：``'django/forms/widgets/checkbox_option.html'``"

msgid ""
"Similar to :class:`SelectMultiple`, but rendered as a list of checkboxes:"
msgstr "类似于 :class:`SelectMultiple`，但渲染为一个复选框列表。"

msgid ""
"Like :class:`RadioSelect`, you can loop over the individual checkboxes for "
"the widget's choices. Unlike :class:`RadioSelect`, the checkboxes won't "
"include the ``required`` HTML attribute if the field is required because "
"browser validation would require all checkboxes to be checked instead of at "
"least one."
msgstr ""
"像 :class:`RadioSelect` 一样，你可以循环使用各个复选框来进行部件的选择。与 :"
"class:`RadioSelect` 不同的是，如果字段是必填的，则复选框不会包含 "
"``required`` HTML 属性，因为浏览器验证会要求选中所有复选框，而不是至少一个。"

msgid ""
"When looping over the checkboxes, the ``label`` and ``input`` tags include "
"``for`` and ``id`` attributes, respectively. Each checkbox has an "
"``id_for_label`` attribute to output the element's ID."
msgstr ""
"在循环复选框时，``label`` 和 ``input`` 标签分别包含 ``for`` 和 ``id`` 属性。"
"每个复选框都有一个 ``id_for_label`` 属性来输出元素的 ID。"

msgid "File upload widgets"
msgstr "文件上传部件"

msgid "``FileInput``"
msgstr "``FileInput``"

msgid "``template_name``: ``'django/forms/widgets/file.html'``"
msgstr "``template_name``：``'django/forms/widgets/file.html'``"

msgid "Renders as: ``<input type=\"file\" ...>``"
msgstr "渲染为：``<input type=\"file\" ...>``"

msgid "``ClearableFileInput``"
msgstr "``ClearableFileInput``"

msgid "``template_name``: ``'django/forms/widgets/clearable_file_input.html'``"
msgstr ""
"``template_name``：``'django/forms/widgets/clearable_file_input.html'``"

msgid ""
"Renders as: ``<input type=\"file\" ...>`` with an additional checkbox input "
"to clear the field's value, if the field is not required and has initial "
"data."
msgstr ""
"渲染为 ``<input type=\"file\" ...>``，如果该字段不需要且有初始数据，则增加一"
"个复选框输入，以清除该字段的值。"

msgid "Composite widgets"
msgstr "复合部件"

msgid "``MultipleHiddenInput``"
msgstr "``MultipleHiddenInput``"

msgid "``template_name``: ``'django/forms/widgets/multiple_hidden.html'``"
msgstr "``template_name``：``'django/forms/widgets/multiple_hidden.html'``"

msgid "Renders as: multiple ``<input type=\"hidden\" ...>`` tags"
msgstr "渲染为：多个 ``<input type=\"hidden\" ...>`` 标签"

msgid ""
"A widget that handles multiple hidden widgets for fields that have a list of "
"values."
msgstr "一个处理具有值列表的字段的多个隐藏部件。"

msgid "``SplitDateTimeWidget``"
msgstr "``SplitDateTimeWidget``"

msgid "``template_name``: ``'django/forms/widgets/splitdatetime.html'``"
msgstr "``template_name``：``'django/forms/widgets/splitdatetime.html'``"

msgid ""
"Wrapper (using :class:`MultiWidget`) around two widgets: :class:`DateInput` "
"for the date, and :class:`TimeInput` for the time. Must be used with :class:"
"`SplitDateTimeField` rather than :class:`DateTimeField`."
msgstr ""
"围绕两个小组件的封装器（使用 :class:`MultiWidget`）： :class:`DateInput` 代表"
"日期， :class:`TimeInput` 代表时间。必须使用 :class:`SplitDateTimeField` 而不"
"是 :class:`DateTimeField`。"

msgid "``SplitDateTimeWidget`` has several optional arguments:"
msgstr "``SplitDateTimeWidget`` 有几个可选参数："

msgid "Similar to :attr:`DateInput.format`"
msgstr "类似于 :attr:`DateInput.format`"

msgid "Similar to :attr:`TimeInput.format`"
msgstr "类似于 :attr:`TimeInput.format`"

msgid ""
"Similar to :attr:`Widget.attrs`. A dictionary containing HTML attributes to "
"be set on the rendered :class:`DateInput` and :class:`TimeInput` widgets, "
"respectively. If these attributes aren't set, :attr:`Widget.attrs` is used "
"instead."
msgstr ""
"类似于 :attr:`Widget.attrs`。一个包含 HTML 属性的字典，要分别在渲染的 :class:"
"`DateInput` 和 :class:`TimeInput` 部件上设置。如果没有设置这些属性，则使用 :"
"attr:`Widget.attrs` 代替。"

msgid "``SplitHiddenDateTimeWidget``"
msgstr "``SplitHiddenDateTimeWidget``"

msgid "``template_name``: ``'django/forms/widgets/splithiddendatetime.html'``"
msgstr "``template_name``：``'django/forms/widgets/splithiddendatetime.html'``"

msgid ""
"Similar to :class:`SplitDateTimeWidget`, but uses :class:`HiddenInput` for "
"both date and time."
msgstr ""
"类似于 :class:`SplitDateTimeWidget`，但对日期和时间使用 :class:"
"`HiddenInput`。"

msgid "``SelectDateWidget``"
msgstr "``SelectDateWidget``"

msgid "``template_name``: ``'django/forms/widgets/select_date.html'``"
msgstr "``template_name``：``'django/forms/widgets/select_date.html'``"

msgid ""
"Wrapper around three :class:`~django.forms.Select` widgets: one each for "
"month, day, and year."
msgstr ""
"围绕三个 :class:`~django.forms.Select` 部件的封装器：月、日、年各一个。"

msgid "Takes several optional arguments:"
msgstr "需要几个可选的参数："

msgid ""
"An optional list/tuple of years to use in the \"year\" select box. The "
"default is a list containing the current year and the next 9 years."
msgstr ""
"在“年份”选择框中使用的可选年份列表／年份组。默认值是包含当前年份和未来 9 年的"
"列表。"

msgid "An optional dict of months to use in the \"months\" select box."
msgstr "在“月份”选择框中可选择使用的月份。"

msgid ""
"The keys of the dict correspond to the month number (1-indexed) and the "
"values are the displayed months::"
msgstr "字典的键与月数相对应（1 开头索引），其值是显示的月份："

msgid ""
"If the :class:`~django.forms.DateField` is not required, :class:"
"`SelectDateWidget` will have an empty choice at the top of the list (which "
"is ``---`` by default). You can change the text of this label with the "
"``empty_label`` attribute. ``empty_label`` can be a ``string``, ``list``, or "
"``tuple``. When a string is used, all select boxes will each have an empty "
"choice with this label. If ``empty_label`` is a ``list`` or ``tuple`` of 3 "
"string elements, the select boxes will have their own custom label. The "
"labels should be in this order ``('year_label', 'month_label', "
"'day_label')``."
msgstr ""
"如果 :class:`~django.forms.DateField` 不是必需的， :class:`SelectDateWidget` "
"将在列表顶部有一个空的选择（默认是 ``--````）。你可以通过 ``empty_label`` 属"
"性来改变这个标签的文本。``empty_label`` 可以是 ``string``、``list`` 或者 "
"``tuple``。当使用字符串时，所有的选择框都会有一个带这个标签的空选择。如果 "
"``empty_label`` 是一个由 3 个字符串元素组成的 ``list`` 或 ``tuple``，选择框将"
"有自己的自定义标签。标签的顺序应该是 ``('year_label', 'month_label', "
"'day_label')``。"

msgid "Logging"
msgstr "日志"

msgid ":ref:`logging-how-to`"
msgstr ":ref:`logging-how-to`"

msgid ":ref:`Django logging overview <logging-explanation>`"
msgstr ":ref:`Django 日志概览 <logging-explanation>`"

msgid "Django's logging module extends Python's builtin :mod:`logging`."
msgstr ""

msgid ""
"Logging is configured as part of the general Django :func:`django.setup` "
"function, so it's always available unless explicitly disabled."
msgstr ""

msgid "Django's default logging configuration"
msgstr "Django 的默认日志配置"

msgid ""
"By default, Django uses Python's :ref:`logging.config.dictConfig format "
"<logging-config-dictschema>`."
msgstr ""

msgid "Default logging conditions"
msgstr ""

msgid "The full set of default logging conditions are:"
msgstr ""

msgid "When :setting:`DEBUG` is ``True``:"
msgstr "当 :setting:`DEBUG` 为 ``True`` 时："

msgid ""
"The ``django`` logger sends messages in the ``django`` hierarchy (except "
"``django.server``) at the ``INFO`` level or higher to the console."
msgstr ""
"``django`` 记录器将 ``django`` 层次结构（``django.server`` 除外）中的 "
"``INFO`` 级别或更高的消息发送到控制台。"

msgid "When :setting:`DEBUG` is ``False``:"
msgstr "当 :setting:`DEBUG` 为 ``False`` 时："

msgid ""
"The ``django`` logger sends messages in the ``django`` hierarchy (except "
"``django.server``)  with ``ERROR`` or ``CRITICAL`` level to :class:"
"`AdminEmailHandler`."
msgstr ""
"``django`` 记录器将 ``django`` 层次结构（``django.server`` 除外）中带有 "
"``ERROR`` 或 ``CRITICAL`` 级别的消息发送到 :class:`AdminEmailHandler`。"

msgid "Independently of the value of :setting:`DEBUG`:"
msgstr ""

msgid ""
"The :ref:`django-server-logger` logger sends messages at the ``INFO`` level "
"or higher to the console."
msgstr ""
":ref:`django-server-logger` 记录器向控制台发送 ``INFO`` 或更高等级的消息。"

msgid ""
"All loggers except :ref:`django-server-logger` propagate logging to their "
"parents, up to the root ``django`` logger. The ``console`` and "
"``mail_admins`` handlers are attached to the root logger to provide the "
"behavior described above."
msgstr ""
"除了 :ref:`django-server-logger` 之外，所有的日志记录器都会将日志记录传播给它"
"们的父辈，直到 ``django`` 的根日志记录器。``console`` 和 ``mail_admins`` 处理"
"程序被附加到根记录器上，以提供上述行为。"

msgid ""
"Python's own defaults send records of level ``WARNING`` and higher to the "
"console."
msgstr ""

msgid "Default logging definition"
msgstr ""

msgid ""
"Django's default logging configuration inherits Python's defaults. It's "
"available as ``django.utils.log.DEFAULT_LOGGING`` and defined in :source:"
"`django/utils/log.py`::"
msgstr ""

msgid ""
"See :ref:`configuring-logging` on how to complement or replace this default "
"logging configuration."
msgstr ""

msgid "Django logging extensions"
msgstr ""

msgid ""
"Django provides a number of utilities to handle the particular requirements "
"of logging in a web server environment."
msgstr ""

msgid "Loggers"
msgstr "Loggers"

msgid "Django provides several built-in loggers."
msgstr "Django 提供了几种内置的记录器。"

msgid "``django``"
msgstr "``django``"

msgid ""
"The parent logger for messages in the ``django`` :ref:`named logger "
"hierarchy <naming-loggers-hierarchy>`. Django does not post messages using "
"this name. Instead, it uses one of the loggers below."
msgstr ""

msgid "``django.request``"
msgstr "``django.request``"

msgid ""
"Log messages related to the handling of requests. 5XX responses are raised "
"as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages. "
"Requests that are logged to the ``django.security`` logger aren't logged to "
"``django.request``."
msgstr ""
"记录与处理请求有关的信息。5XX 的响应以 ``ERROR`` 消息的形式出现；4XX 的响应"
"以 ``WARNING`` 消息的形式出现。记录在 ``django.security`` 记录器中的请求不会"
"记录在 ``django.request`` 中。"

msgid "Messages to this logger have the following extra context:"
msgstr "发送给此记录器的消息有以下额外的上下文："

msgid "``status_code``: The HTTP response code associated with the request."
msgstr "``status_code``：与请求相关的 HTTP 响应代码。"

msgid "``request``: The request object that generated the logging message."
msgstr "``request``：产生记录信息的请求对象。"

msgid "``django.server``"
msgstr "``django.server``"

msgid ""
"Log messages related to the handling of requests received by the server "
"invoked by the :djadmin:`runserver` command. HTTP 5XX responses are logged "
"as ``ERROR`` messages, 4XX responses are logged as ``WARNING`` messages, and "
"everything else is logged as ``INFO``."
msgstr ""
"记录与处理由 :djadmin:`runserver` 命令调用的服务器收到的请求有关的消息。HTTP "
"5XX 响应被记录为 ``ERROR`` 消息，4XX 响应被记录为 ``WARNING`` 消息，其他所有"
"消息被记录为 ``INFO``。"

msgid ""
"``request``: The request object (a :py:class:`socket.socket`) that generated "
"the logging message."
msgstr ""

msgid "``django.template``"
msgstr "``django.template``"

msgid "Log messages related to the rendering of templates."
msgstr "记录与模板渲染相关的消息。"

msgid "Missing context variables are logged as ``DEBUG`` messages."
msgstr "缺少的上下文变量会被记录为 ``DEBUG`` 消息。"

msgid "``django.db.backends``"
msgstr "``django.db.backends``"

msgid ""
"Messages relating to the interaction of code with the database. For example, "
"every application-level SQL statement executed by a request is logged at the "
"``DEBUG`` level to this logger."
msgstr ""
"与代码与数据库互动有关的信息。例如，请求执行的每一条应用程序级别的 SQL 语句都"
"会以 ``DEBUG`` 级别记录到这个记录器。"

msgid "``duration``: The time taken to execute the SQL statement."
msgstr "``duration``：执行 SQL 语句所需时间。"

msgid "``sql``: The SQL statement that was executed."
msgstr "``sql``：所执行的 SQL 语句。"

msgid "``params``: The parameters that were used in the SQL call."
msgstr "``params``：SQL 调用中使用的参数。"

msgid "``alias``: The alias of the database used in the SQL call."
msgstr ""

msgid ""
"For performance reasons, SQL logging is only enabled when ``settings.DEBUG`` "
"is set to ``True``, regardless of the logging level or handlers that are "
"installed."
msgstr ""
"出于性能考虑，只有当 ``settings.DEBUG`` 设置为 ``True`` 时，才会启用 SQL 日志"
"记录，而不考虑日志级别或安装的处理程序。"

msgid ""
"This logging does not include framework-level initialization (e.g. ``SET "
"TIMEZONE``). Turn on query logging in your database if you wish to view all "
"database queries."
msgstr ""

msgid ""
"Support for logging transaction management queries (``BEGIN``, ``COMMIT``, "
"and ``ROLLBACK``) was added."
msgstr ""

msgid "``django.security.*``"
msgstr "``django.security.*``"

msgid ""
"The security loggers will receive messages on any occurrence of :exc:"
"`~django.core.exceptions.SuspiciousOperation` and other security-related "
"errors. There is a sub-logger for each subtype of security error, including "
"all ``SuspiciousOperation``\\s. The level of the log event depends on where "
"the exception is handled.  Most occurrences are logged as a warning, while "
"any ``SuspiciousOperation`` that reaches the WSGI handler will be logged as "
"an error. For example, when an HTTP ``Host`` header is included in a request "
"from a client that does not match :setting:`ALLOWED_HOSTS`, Django will "
"return a 400 response, and an error message will be logged to the ``django."
"security.DisallowedHost`` logger."
msgstr ""
"安全记录器将接收任何发生 :exc:`~django.core.exceptions.SuspiciousOperation` "
"和其他安全相关错误的消息。每个子类型的安全错误都有一个子记录器，包括所有 "
"``SuspiciousOperation``\\s。日志事件的级别取决于异常处理的位置。 大多数发生的"
"事件被记录为警告，而任何到达 WSGI 处理程序的 ``SuspiciousOperation`` 将被记录"
"为错误。例如，当客户端的请求中包含一个 HTTP ``Host`` 头，而这个头不符合 :"
"setting:`ALLOWED_HOSTS` 时，Django 会返回一个 400 的响应，并且错误信息会被记"
"录到 ``django.security.DisallowedHost`` 记录器中。"

msgid ""
"These log events will reach the ``django`` logger by default, which mails "
"error events to admins when ``DEBUG=False``. Requests resulting in a 400 "
"response due to a ``SuspiciousOperation`` will not be logged to the ``django."
"request`` logger, but only to the ``django.security`` logger."
msgstr ""
"这些日志事件默认会到达 ``django`` 日志器，当 ``DEBUG=False`` 时，记录器会将错"
"误事件发送给管理员。由于 ``SuspiciousOperation`` 导致 400 响应的请求不会被记"
"录到 ``django.request`` 记录器，而只会记录到 ``django.security`` 记录器。"

msgid ""
"To silence a particular type of ``SuspiciousOperation``, you can override "
"that specific logger following this example::"
msgstr ""
"要使某一特定类型的 ``SuspiciousOperation`` 保持沉默，你可以按照以下示例覆盖该"
"特定的记录器："

msgid ""
"Other ``django.security`` loggers not based on ``SuspiciousOperation`` are:"
msgstr "其他不基于 ``SuspiciousOperation`` 的 ``django.security`` 记录器是："

msgid ""
"``django.security.csrf``: For :ref:`CSRF failures <csrf-rejected-requests>`."
msgstr ""
"``django.security.csrf``：用于 :ref:`CSRF 错误 <csrf-rejected-requests>`。"

msgid "``django.db.backends.schema``"
msgstr "``django.db.backends.schema``"

msgid ""
"Logs the SQL queries that are executed during schema changes to the database "
"by the :doc:`migrations framework </topics/migrations>`. Note that it won't "
"log the queries executed by :class:`~django.db.migrations.operations."
"RunPython`. Messages to this logger have ``params`` and ``sql`` in their "
"extra context (but unlike ``django.db.backends``, not duration). The values "
"have the same meaning as explained in :ref:`django-db-logger`."
msgstr ""
"记录 :doc:`migrations framework </topics/migrations>` 对数据库进行模式变更时"
"执行的 SQL 查询。请注意，它不会记录 :class:`~django.db.migrations.operations."
"RunPython` 执行的查询。给这个记录器的消息在其额外的上下文中有 ``params`` 和 "
"``sql`` （但与 ``django.db.backends`` 不同，不是 duration）。这些值的含义与 :"
"ref:`django-db-logger` 中的解释相同。"

msgid "Handlers"
msgstr "Handlers"

msgid ""
"Django provides one log handler in addition to :mod:`those provided by the "
"Python logging module <python:logging.handlers>`."
msgstr ""

msgid ""
"This handler sends an email to the site :setting:`ADMINS` for each log "
"message it receives."
msgstr ""
"该处理程序对收到的每条日志消息都会向站点 :setting:`ADMINS` 发送一封邮件。"

msgid ""
"If the log record contains a ``request`` attribute, the full details of the "
"request will be included in the email. The email subject will include the "
"phrase \"internal IP\" if the client's IP address is in the :setting:"
"`INTERNAL_IPS` setting; if not, it will include \"EXTERNAL IP\"."
msgstr ""
"如果日志记录中包含 ``request`` 属性，电子邮件中会包含请求的全部细节。如果客户"
"的 IP 地址在 :setting:`INTERNAL_IPS` 设置中，电子邮件主题将包括“内部 IP”；如"
"果没有，则包括“外部 IP”。"

msgid ""
"If the log record contains stack trace information, that stack trace will be "
"included in the email."
msgstr "如果日志记录中包含堆栈跟踪信息，该堆栈跟踪信息将包含在电子邮件中。"

msgid ""
"The ``include_html`` argument of ``AdminEmailHandler`` is used to control "
"whether the traceback email includes an HTML attachment containing the full "
"content of the debug web page that would have been produced if :setting:"
"`DEBUG` were ``True``. To set this value in your configuration, include it "
"in the handler definition for ``django.utils.log.AdminEmailHandler``, like "
"this::"
msgstr ""

msgid ""
"Be aware of the :ref:`security implications of logging <logging-security-"
"implications>` when using the ``AdminEmailHandler``."
msgstr ""

msgid ""
"By setting the ``email_backend`` argument of ``AdminEmailHandler``, the :ref:"
"`email backend <topic-email-backends>` that is being used by the handler can "
"be overridden, like this::"
msgstr ""
"通过设置 ``AdminEmailHandler`` 的 ``email_backend`` 参数，处理程序使用的 :"
"ref:`email 后端 <topic-email-backends>` 可以被覆盖，就像这样："

msgid ""
"By default, an instance of the email backend specified in :setting:"
"`EMAIL_BACKEND` will be used."
msgstr "默认情况下，将使用 :setting:`EMAIL_BACKEND` 中指定的电子邮件后端实例。"

msgid ""
"The ``reporter_class`` argument of ``AdminEmailHandler`` allows providing an "
"``django.views.debug.ExceptionReporter`` subclass to customize the traceback "
"text sent in the email body. You provide a string import path to the class "
"you wish to use, like this::"
msgstr ""
"``AdminEmailHandler`` 的 ``reporter_class`` 参数允许提供一个 ``django.view."
"debug.ExceptionReporter`` 子类来自定义邮件正文中发送的回溯文本。你提供一个字"
"符串的导入路径到你想使用的类，像这样："

msgid ""
"Sends emails to admin users. To customize this behavior, you can subclass "
"the :class:`~django.utils.log.AdminEmailHandler` class and override this "
"method."
msgstr ""
"向管理员用户发送邮件。要自定义这个行为，你可以将 :class:`~django.utils.log."
"AdminEmailHandler` 类子类化，并覆盖这个方法。"

msgid "Filters"
msgstr "过滤器"

msgid ""
"Django provides some log filters in addition to those provided by the Python "
"logging module."
msgstr ""
"除了 Python 日志模块提供的日志过滤器外，Django 还提供了一些日志过滤器。"

msgid ""
"This filter accepts a callback function (which should accept a single "
"argument, the record to be logged), and calls it for each record that passes "
"through the filter. Handling of that record will not proceed if the callback "
"returns False."
msgstr ""
"这个过滤器接受一个回调函数（它应该接受一个单一的参数，即要记录的记录），并对"
"每个通过过滤器的记录进行调用。如果回调函数返回 False，则不会对该记录进行处"
"理。"

msgid ""
"For instance, to filter out :exc:`~django.http.UnreadablePostError` (raised "
"when a user cancels an upload) from the admin emails, you would create a "
"filter function::"
msgstr ""
"例如，要从管理员邮件中过滤掉 :exc:`~django.http.UnreadablePostError` （当用户"
"取消上传时引发），你可以创建一个过滤函数："

msgid "and then add it to your logging config::"
msgstr "然后将其添加到你的日志记录配置中："

msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr "只有当 settings.DEBUG 为 False 时，该过滤器才会传递记录。"

msgid ""
"This filter is used as follows in the default :setting:`LOGGING` "
"configuration to ensure that the :class:`AdminEmailHandler` only sends error "
"emails to admins when :setting:`DEBUG` is ``False``::"
msgstr ""
"该过滤器在默认的 :setting:`logging` 配置中使用如下，以确保 :class:"
"`AdminEmailHandler` 只在 :setting:`DEBUG` 为 ``False`` 时向管理员发送错误邮"
"件："

msgid ""
"This filter is similar to :class:`RequireDebugFalse`, except that records "
"are passed only when :setting:`DEBUG` is ``True``."
msgstr ""
"该过滤器类似于 :class:`RequireDebugFalse`，但只有当 :setting:`DEBUG` 为 "
"``True`` 时才会传递记录。"

msgid ""
"This document explains all middleware components that come with Django. For "
"information on how to use them and how to write your own middleware, see "
"the :doc:`middleware usage guide </topics/http/middleware>`."
msgstr ""
"这篇文档解释了所有 Django 自带的中间件组件。关于如何使用它们以及如何编写自己"
"的中间件，请参见 :doc:`中间件使用指南 </topics/http/middleware>`。"

msgid "Available middleware"
msgstr "可用的中间件"

msgid "Cache middleware"
msgstr "缓存中间件"

msgid ""
"Enable the site-wide cache. If these are enabled, each Django-powered page "
"will be cached for as long as the :setting:`CACHE_MIDDLEWARE_SECONDS` "
"setting defines. See the :doc:`cache documentation </topics/cache>`."
msgstr ""
"启用全站缓存。如果启用了这些功能，那么每一个 Django 驱动的页面都会在 :"
"setting:`CACHE_MIDDLEWARE_SECONDS` 配置定义的时间内被缓存。参见 :doc:`缓存文"
"档 </topics/cache>`。"

msgid "\"Common\" middleware"
msgstr "“通用”中间件"

msgid "Adds a few conveniences for perfectionists:"
msgstr "为完美主义者增加了一些便利："

msgid ""
"Forbids access to user agents in the :setting:`DISALLOWED_USER_AGENTS` "
"setting, which should be a list of compiled regular expression objects."
msgstr ""
"禁止 :setting:`DISALLOWED_USER_AGENTS` 配置中的用户代理访问，它应该是一个编译"
"的正则表达式对象列表。"

msgid ""
"Performs URL rewriting based on the :setting:`APPEND_SLASH` and :setting:"
"`PREPEND_WWW` settings."
msgstr ""
"根据 :setting:`APPEND_SLASH` 和 :setting:`PREPEND_WWW` 的配置进行 URL 重写。"

msgid ""
"If :setting:`APPEND_SLASH` is ``True`` and the initial URL doesn't end with "
"a slash, and it is not found in the URLconf, then a new URL is formed by "
"appending a slash at the end. If this new URL is found in the URLconf, then "
"Django redirects the request to this new URL. Otherwise, the initial URL is "
"processed as usual."
msgstr ""
"如果 :setting:`APPEND_SLASH` 为 ``True``，并且初始的 URL 没有以斜线结尾，而且"
"在 URLconf 中也没有找到，那么就会在最后附加一个斜线形成一个新的 URL。如果在 "
"URLconf 中找到了这个新的 URL，那么 Django 会将请求重定向到这个新的 URL。否"
"则，初始的 URL 就会被照常处理。"

msgid ""
"For example, ``foo.com/bar`` will be redirected to ``foo.com/bar/`` if you "
"don't have a valid URL pattern for ``foo.com/bar`` but *do* have a valid "
"pattern for ``foo.com/bar/``."
msgstr ""
"例如，``foo.com/bar`` 将被重定向到 ``foo.com/bar/``，如果你没有 ``foo.com/"
"bar`` 的有效 URL 模式，但 *有* ``foo.com/bar/`` 的有效模式。"

msgid ""
"If :setting:`PREPEND_WWW` is ``True``, URLs that lack a leading \"www.\" "
"will be redirected to the same URL with a leading \"www.\""
msgstr ""
"如果 :setting:`PREPEND_WWW` 为 ``True``，缺乏前导“www. ”的 URL 将被重定向到带"
"有前导“www. ”的同一 URL。"

msgid ""
"Both of these options are meant to normalize URLs. The philosophy is that "
"each URL should exist in one, and only one, place. Technically a URL ``foo."
"com/bar`` is distinct from ``foo.com/bar/`` -- a search-engine indexer would "
"treat them as separate URLs -- so it's best practice to normalize URLs."
msgstr ""
"这两个选项都是为了规范 URL。其理念是，每个 URL 应该存在于一个地方，而且只有一"
"个地方。从技术上讲，URL ``foo.com/bar`` 与 ``foo.com/bar/`` 是不同的——搜索引"
"擎索引器会将它们视为单独的 URL——所以最好的做法是将 URL 规范化。"

msgid ""
"If necessary, individual views may be excluded from the ``APPEND_SLASH`` "
"behavior using the :func:`~django.views.decorators.common.no_append_slash` "
"decorator::"
msgstr ""
"如果有必要，可以使用 :func:`~django.views.decorators.common.no_append_slash` "
"装饰器将个别视图从 ``APPEND_SLASH`` 行为中排除："

msgid "Sets the ``Content-Length`` header for non-streaming responses."
msgstr "设置非流响应的 ``Content-Length`` 头。"

msgid ""
"Defaults to :class:`~django.http.HttpResponsePermanentRedirect`. Subclass "
"``CommonMiddleware`` and override the attribute to customize the redirects "
"issued by the middleware."
msgstr ""
"默认为 :class:`~django.http.HttpResponsePermanentRedirect`。子类化 "
"``CommonMiddleware``，并重写该属性来定制中间件发出的重定向。"

msgid ""
"Sends broken link notification emails to :setting:`MANAGERS` (see :doc:`/"
"howto/error-reporting`)."
msgstr ""
"向 :setting:`manager` 发送失效链接通知邮件（参见 :doc:`/howto/error-"
"reporting`）。"

msgid "GZip middleware"
msgstr "GZip 中间件"

msgid ""
"Defaults to 100. Subclass ``GZipMiddleware`` and override the attribute to "
"change the maximum number of random bytes that is included with compressed "
"responses."
msgstr ""

msgid ""
"Security researchers revealed that when compression techniques (including "
"``GZipMiddleware``) are used on a website, the site may become exposed to a "
"number of possible attacks."
msgstr ""

msgid ""
"To mitigate attacks, Django implements a technique called *Heal The Breach "
"(HTB)*. It adds up to 100 bytes (see :attr:`.max_random_bytes`) of random "
"bytes to each response to make the attacks less effective."
msgstr ""

msgid ""
"For more details, see the `BREACH paper (PDF)`_, `breachattack.com`_, and "
"the `Heal The Breach (HTB) paper`_."
msgstr ""

msgid "Mitigation for the BREACH attack was added."
msgstr ""

msgid ""
"The ``django.middleware.gzip.GZipMiddleware`` compresses content for "
"browsers that understand GZip compression (all modern browsers)."
msgstr ""
"``django.middleware.gzip.GZipMiddleware`` 为能理解 GZip 压缩的浏览器（所有现"
"代浏览器）压缩内容。"

msgid ""
"This middleware should be placed before any other middleware that need to "
"read or write the response body so that compression happens afterward."
msgstr ""
"这个中间件应该放在任何其他需要读取或写入响应体的中间件之前，这样压缩就会在之"
"后发生。"

msgid "It will NOT compress content if any of the following are true:"
msgstr "如果以下任何一项为真，它将不会压缩内容："

msgid "The content body is less than 200 bytes long."
msgstr "内容主体长度小于 200 字节。"

msgid "The response has already set the ``Content-Encoding`` header."
msgstr "响应已经设置了 ``Content-Encoding`` 头。"

msgid ""
"The request (the browser) hasn't sent an ``Accept-Encoding`` header "
"containing ``gzip``."
msgstr "请求（浏览器）没有发送包含 ``gzip`` 的 ``Accept-Encoding`` 头。"

msgid ""
"If the response has an ``ETag`` header, the ETag is made weak to comply "
"with :rfc:`9110#section-8.8.1`."
msgstr ""

msgid ""
"You can apply GZip compression to individual views using the :func:`~django."
"views.decorators.gzip.gzip_page()` decorator."
msgstr ""
"你可以使用 :func:`~django.views.decorators.gzip.gzip_page()` 装饰器对单个视图"
"应用 GZip 压缩。"

msgid "Conditional GET middleware"
msgstr "条件 GET 中间件"

msgid ""
"Handles conditional GET operations. If the response doesn't have an ``ETag`` "
"header, the middleware adds one if needed. If the response has an ``ETag`` "
"or ``Last-Modified`` header, and the request has ``If-None-Match`` or ``If-"
"Modified-Since``, the response is replaced by an :class:`~django.http."
"HttpResponseNotModified`."
msgstr ""
"处理有条件的 GET 操作。如果响应没有 ``ETag`` 头，中间件会根据需要添加一个。如"
"果响应有 ``ETag`` 或 ``Last-Modified`` 头，而请求有 ``If-None-Match`` 或 "
"``If-Modified-Since``，则响应被一个 :class:`~django.http."
"HttpResponseNotModified` 替换。"

msgid "Locale middleware"
msgstr "本地化中间件"

msgid ""
"Enables language selection based on data from the request. It customizes "
"content for each user. See the :doc:`internationalization documentation </"
"topics/i18n/translation>`."
msgstr ""
"可以根据请求的数据选择语言。它为每个用户定制内容。请参阅 :doc:`国际化文档 </"
"topics/i18n/translation>`。"

msgid ""
"Defaults to :class:`~django.http.HttpResponseRedirect`. Subclass "
"``LocaleMiddleware`` and override the attribute to customize the redirects "
"issued by the middleware."
msgstr ""
"默认为 :class:`~django.http.HttpResponseRedirect`。子类化 "
"``LocaleMiddleware`` 并重写该属性，以自定义中间件发出的重定向。"

msgid "Message middleware"
msgstr "消息中间件"

msgid ""
"Enables cookie- and session-based message support. See the :doc:`messages "
"documentation </ref/contrib/messages>`."
msgstr ""
"启用基于 cookie 和会话的消息支持。参见 :doc:`消息文档 </ref/contrib/"
"messages>`。"

msgid "Security middleware"
msgstr "安全中间件"

msgid ""
"If your deployment situation allows, it's usually a good idea to have your "
"front-end web server perform the functionality provided by the "
"``SecurityMiddleware``. That way, if there are requests that aren't served "
"by Django (such as static media or user-uploaded files), they will have the "
"same protections as requests to your Django application."
msgstr ""

msgid ""
"The ``django.middleware.security.SecurityMiddleware`` provides several "
"security enhancements to the request/response cycle. Each one can be "
"independently enabled or disabled with a setting."
msgstr ""
"``django.middleware.security.SecurityMiddleware`` 为请求／响应周期提供了若干"
"安全增强功能。每一项都可以通过设置独立地启用或禁用。"

msgid ":setting:`SECURE_CONTENT_TYPE_NOSNIFF`"
msgstr ":setting:`SECURE_CONTENT_TYPE_NOSNIFF`"

msgid ":setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY`"
msgstr ":setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY`"

msgid ":setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS`"
msgstr ":setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS`"

msgid ":setting:`SECURE_HSTS_PRELOAD`"
msgstr ":setting:`SECURE_HSTS_PRELOAD`"

msgid ":setting:`SECURE_HSTS_SECONDS`"
msgstr ":setting:`SECURE_HSTS_SECONDS`"

msgid ":setting:`SECURE_REDIRECT_EXEMPT`"
msgstr ":setting:`SECURE_REDIRECT_EXEMPT`"

msgid ":setting:`SECURE_REFERRER_POLICY`"
msgstr ":setting:`SECURE_REFERRER_POLICY`"

msgid ":setting:`SECURE_SSL_HOST`"
msgstr ":setting:`SECURE_SSL_HOST`"

msgid ":setting:`SECURE_SSL_REDIRECT`"
msgstr ":setting:`SECURE_SSL_REDIRECT`"

msgid "HTTP Strict Transport Security"
msgstr "HTTP 严格传输安全"

msgid ""
"For sites that should only be accessed over HTTPS, you can instruct modern "
"browsers to refuse to connect to your domain name via an insecure connection "
"(for a given period of time) by setting the `\"Strict-Transport-Security\" "
"header`__. This reduces your exposure to some SSL-stripping man-in-the-"
"middle (MITM) attacks."
msgstr ""
"对于只能通过 HTTPS 访问的网站，你可以通过设置 `\"Strict-Transport-Security\" "
"头`__ 来指示现代浏览器拒绝通过不安全的连接连接到你的域名（在给定的时间内）。"
"这可以减少你受到一些 SSL 剥离中间人（MITM）的攻击。"

msgid ""
"``SecurityMiddleware`` will set this header for you on all HTTPS responses "
"if you set the :setting:`SECURE_HSTS_SECONDS` setting to a non-zero integer "
"value."
msgstr ""
"如果你将 :setting:`SECURE_HSTS_SECONDS` 设置为一个非零的整数值，"
"``SecurityMiddleware`` 将为你在所有 HTTPS 响应中设置这个头。"

msgid ""
"When enabling HSTS, it's a good idea to first use a small value for testing, "
"for example, :setting:`SECURE_HSTS_SECONDS = 3600<SECURE_HSTS_SECONDS>` for "
"one hour. Each time a web browser sees the HSTS header from your site, it "
"will refuse to communicate non-securely (using HTTP) with your domain for "
"the given period of time. Once you confirm that all assets are served "
"securely on your site (i.e. HSTS didn't break anything), it's a good idea to "
"increase this value so that infrequent visitors will be protected (31536000 "
"seconds, i.e. 1 year, is common)."
msgstr ""

msgid ""
"Additionally, if you set the :setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS` "
"setting to ``True``, ``SecurityMiddleware`` will add the "
"``includeSubDomains`` directive to the ``Strict-Transport-Security`` header. "
"This is recommended (assuming all subdomains are served exclusively using "
"HTTPS), otherwise your site may still be vulnerable via an insecure "
"connection to a subdomain."
msgstr ""
"此外，如果你将 :setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS` 设置为 ``True``，"
"``SecurityMiddleware`` 将在 ``Strict-Transport-Security`` 头中添加 "
"``includeSubDomains`` 指令。建议这样做（假设所有的子域都只使用 HTTPS 服务），"
"否则你的网站仍然可能通过不安全的连接到子域而受到攻击。"

msgid ""
"If you wish to submit your site to the `browser preload list`_, set the :"
"setting:`SECURE_HSTS_PRELOAD` setting to ``True``. That appends the "
"``preload`` directive to the ``Strict-Transport-Security`` header."
msgstr ""
"如果你希望将你的网站提交到 `浏览器预加载列表`_ ，请将 :setting:"
"`SECURE_HSTS_PRELOAD` 设置为 ``True``。这样就会把 ``preload`` 指令附加到 "
"``Strict-Transport-Security`` 头。"

msgid ""
"The HSTS policy applies to your entire domain, not just the URL of the "
"response that you set the header on. Therefore, you should only use it if "
"your entire domain is served via HTTPS only."
msgstr ""
"HSTS 策略适用于你的整个域，而不仅仅是你设置响应头的 URL。因此，你应该只在你的"
"整个域名只通过 HTTPS 服务时使用它。"

msgid ""
"Browsers properly respecting the HSTS header will refuse to allow users to "
"bypass warnings and connect to a site with an expired, self-signed, or "
"otherwise invalid SSL certificate. If you use HSTS, make sure your "
"certificates are in good shape and stay that way!"
msgstr ""
"适当尊重 HSTS 头的浏览器将拒绝允许用户绕过警告，并连接到使用过期、自签名或其"
"他无效 SSL 证书的网站。如果你使用 HSTS，请确保你的证书处于良好状态，并保持这"
"种状态！"

msgid ""
"If you are deployed behind a load-balancer or reverse-proxy server, and the "
"``Strict-Transport-Security`` header is not being added to your responses, "
"it may be because Django doesn't realize that it's on a secure connection; "
"you may need to set the :setting:`SECURE_PROXY_SSL_HEADER` setting."
msgstr ""
"如果你部署在负载平衡器或反向代理服务器后面，而 ``Strict-Transport-Security`` "
"头没有被添加到你的响应中，这可能是因为 Django 没有意识到它是在一个安全的连接"
"上；你可能需要设置 :setting:`SECURE_PROXY_SSL_HEADER` 设置。"

msgid "Referrer Policy"
msgstr "Referrer 政策"

msgid ""
"Browsers use `the Referer header`__ as a way to send information to a site "
"about how users got there. When a user clicks a link, the browser will send "
"the full URL of the linking page as the referrer. While this can be useful "
"for some purposes -- like figuring out who's linking to your site -- it also "
"can cause privacy concerns by informing one site that a user was visiting "
"another site."
msgstr ""
"浏览器使用 `referer 头`__ 作为向网站发送关于用户如何到达那里的信息的一种方"
"式。当用户点击一个链接时，浏览器将发送链接页面的完整 URL 作为 referrer。虽然"
"这对某些目的来说可能很有用——例如查明谁在链接到你的网站——但它也可能引起隐私问"
"题，因为它告诉一个网站，一个用户正在访问另一个网站。"

msgid ""
"Some browsers have the ability to accept hints about whether they should "
"send the HTTP ``Referer`` header when a user clicks a link; this hint is "
"provided via `the Referrer-Policy header`__. This header can suggest any of "
"three behaviors to browsers:"
msgstr ""
"一些浏览器能够接受关于是否应该在用户点击链接时发送 HTTP ``Referer`` 头的提"
"示；这种提示通过 `Referrer-Policy 头`__ 提供。这个头可以向浏览器建议三种行为"
"中的任何一种："

msgid ""
"Full URL: send the entire URL in the ``Referer`` header. For example, if the "
"user is visiting ``https://example.com/page.html``, the ``Referer`` header "
"would contain ``\"https://example.com/page.html\"``."
msgstr ""
"完整 URL：在 ``Referer`` 头中发送整个URL。例如，如果用户访问 ``https://"
"example.com/page.html``，``Referer`` 头将包含 ``\"https://example.com/page."
"html\"``。"

msgid ""
"Origin only: send only the \"origin\" in the referrer. The origin consists "
"of the scheme, host and (optionally) port number. For example, if the user "
"is visiting ``https://example.com/page.html``, the origin would be ``https://"
"example.com/``."
msgstr ""
"仅起源：只发送 referrer 中的“起源”。起源由方案、主机和（可选）端口号组成。例"
"如，如果用户访问的是 ``https://example.com/page.html``，起源就是 ``https://"
"example.com/``。"

msgid "No referrer: do not send a ``Referer`` header at all."
msgstr "无 referrer：完全不发送 ``Referer`` 头。"

msgid ""
"There are two types of conditions this header can tell a browser to watch "
"out for:"
msgstr "有两种类型的情况，这个头可以告诉浏览器要注意："

msgid ""
"Same-origin versus cross-origin: a link from ``https://example.com/1.html`` "
"to ``https://example.com/2.html`` is same-origin. A link from ``https://"
"example.com/page.html`` to ``https://not.example.com/page.html`` is cross-"
"origin."
msgstr ""
"同源与跨源：从 ``https://example.com/1.html`` 到 ``https://example.com/2."
"html`` 的链接为同源链接。从 ``https://example.com/page.html`` 到 ``https://"
"not.example.com/page.html`` 的链接为跨源链接。"

msgid ""
"Protocol downgrade: a downgrade occurs if the page containing the link is "
"served via HTTPS, but the page being linked to is not served via HTTPS."
msgstr ""
"协议降级：如果包含链接的页面是通过 HTTPS 服务的，但被链接的页面不是通过 "
"HTTPS 服务的，就会发生降级。"

msgid ""
"When your site is served via HTTPS, :ref:`Django's CSRF protection system "
"<how-csrf-works>` requires the ``Referer`` header to be present, so "
"completely disabling the ``Referer`` header will interfere with CSRF "
"protection. To gain most of the benefits of disabling ``Referer`` headers "
"while also keeping CSRF protection, consider enabling only same-origin "
"referrers."
msgstr ""

msgid ""
"``SecurityMiddleware`` can set the ``Referrer-Policy`` header for you, based "
"on the :setting:`SECURE_REFERRER_POLICY` setting (note spelling: browsers "
"send a ``Referer`` header when a user clicks a link, but the header "
"instructing a browser whether to do so is spelled ``Referrer-Policy``). The "
"valid values for this setting are:"
msgstr ""
"``SecurityMiddleware`` 可以根据 :setting:`SECURE_REFERRER_POLICY` 设置，为你"
"设置 ``Referrer-Policy`` 头（注意拼写：当用户点击链接时，浏览器会发送一个 "
"``Referer`` 头，但指示浏览器是否这样做的头是拼写为 ``Referrer-Policy``）。该"
"设置的有效值为："

msgid "``no-referrer``"
msgstr "``no-referrer``"

msgid ""
"Instructs the browser to send no referrer for links clicked on this site."
msgstr "指示浏览器对在本网站上点击的链接不发送 referrer。"

msgid "``no-referrer-when-downgrade``"
msgstr "``no-referrer-when-downgrade``"

msgid ""
"Instructs the browser to send a full URL as the referrer, but only when no "
"protocol downgrade occurs."
msgstr ""
"指示浏览器发送完整的 URL 作为 referrer，但只有在没有发生协议降级的情况下。"

msgid ""
"Instructs the browser to send only the origin, not the full URL, as the "
"referrer."
msgstr "指示浏览器只发送起源，而不是完整的 URL 作为 referrer。"

msgid "``origin-when-cross-origin``"
msgstr "``origin-when-cross-origin``"

msgid ""
"Instructs the browser to send the full URL as the referrer for same-origin "
"links, and only the origin for cross-origin links."
msgstr ""
"指示浏览器发送完整的 URL 作为同源链接的 referrer，而只发送起源给跨源链接。"

msgid "``same-origin``"
msgstr "``same-origin``"

msgid ""
"Instructs the browser to send a full URL, but only for same-origin links. No "
"referrer will be sent for cross-origin links."
msgstr ""
"指示浏览器发送完整的 URL，但只针对同源链接。对于跨源链接，将不发送 referrer。"

msgid "``strict-origin``"
msgstr "``strict-origin``"

msgid ""
"Instructs the browser to send only the origin, not the full URL, and to send "
"no referrer when a protocol downgrade occurs."
msgstr ""
"指示浏览器只发送起源，而不是完整的 URL，并在协议降级时不发送 referrer。"

msgid "``strict-origin-when-cross-origin``"
msgstr "``strict-origin-when-cross-origin``"

msgid ""
"Instructs the browser to send the full URL when the link is same-origin and "
"no protocol downgrade occurs; send only the origin when the link is cross-"
"origin and no protocol downgrade occurs; and no referrer when a protocol "
"downgrade occurs."
msgstr ""
"当链接为同源且不发生协议降级时，指示浏览器发送完整的 URL；当链接为跨源且不发"
"生协议降级时，只发送起源；当发生协议降级时，不发送 referrer。"

msgid "``unsafe-url``"
msgstr "``unsafe-url``"

msgid "Instructs the browser to always send the full URL as the referrer."
msgstr "指示浏览器始终发送完整的 URL 作为 referrer。"

msgid "Unknown Policy Values"
msgstr "未知政策值"

msgid ""
"Where a policy value is `unknown`__ by a user agent, it is possible to "
"specify multiple policy values to provide a fallback. The last specified "
"value that is understood takes precedence. To support this, an iterable or "
"comma-separated string can be used with :setting:`SECURE_REFERRER_POLICY`."
msgstr ""
"当一个策略值被用户代理认为 `未知`__ 时，可以指定多个策略值以提供后备。最后一"
"个被理解的指定值优先。为了支持这一点，可以在 :setting:"
"`SECURE_REFERRER_POLICY` 中使用一个可迭代对象或逗号分隔的字符串。"

msgid "Cross-Origin Opener Policy"
msgstr ""

msgid ""
"Some browsers have the ability to isolate top-level windows from other "
"documents by putting them in a separate browsing context group based on the "
"value of the `Cross-Origin Opener Policy`__ (COOP) header. If a document "
"that is isolated in this way opens a cross-origin popup window, the popup’s "
"``window.opener`` property will be ``null``. Isolating windows using COOP is "
"a defense-in-depth protection against cross-origin attacks, especially those "
"like Spectre which allowed exfiltration of data loaded into a shared "
"browsing context."
msgstr ""

msgid ""
"``SecurityMiddleware`` can set the ``Cross-Origin-Opener-Policy`` header for "
"you, based on the :setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY` setting. The "
"valid values for this setting are:"
msgstr ""

msgid ""
"Isolates the browsing context exclusively to same-origin documents. Cross-"
"origin documents are not loaded in the same browsing context. This is the "
"default and most secure option."
msgstr ""

msgid "``same-origin-allow-popups``"
msgstr "``same-origin-allow-popups``"

msgid ""
"Isolates the browsing context to same-origin documents or those which either "
"don't set COOP or which opt out of isolation by setting a COOP of ``unsafe-"
"none``."
msgstr ""

msgid "``unsafe-none``"
msgstr "``unsafe-none``"

msgid ""
"Allows the document to be added to its opener's browsing context group "
"unless the opener itself has a COOP of ``same-origin`` or ``same-origin-"
"allow-popups``."
msgstr ""

msgid "``X-Content-Type-Options: nosniff``"
msgstr "``X-Content-Type-Options: nosniff``"

msgid ""
"Some browsers will try to guess the content types of the assets that they "
"fetch, overriding the ``Content-Type`` header. While this can help display "
"sites with improperly configured servers, it can also pose a security risk."
msgstr ""
"一些浏览器会试图猜测它们获取的资源的内容类型，覆盖 ``Content-Type`` 头。虽然"
"这可以帮助显示配置不当的服务器的网站，但也会带来安全风险。"

msgid ""
"If your site serves user-uploaded files, a malicious user could upload a "
"specially-crafted file that would be interpreted as HTML or JavaScript by "
"the browser when you expected it to be something harmless."
msgstr ""
"如果你的网站提供用户上传的文件，恶意用户可能会上传一个特制的文件，当你认为它"
"是无害的东西时，该文件会被浏览器解释为 HTML 或 JavaScript。"

msgid ""
"To prevent the browser from guessing the content type and force it to always "
"use the type provided in the ``Content-Type`` header, you can pass the `X-"
"Content-Type-Options: nosniff`__ header.  ``SecurityMiddleware`` will do "
"this for all responses if the :setting:`SECURE_CONTENT_TYPE_NOSNIFF` setting "
"is ``True``."
msgstr ""
"为了防止浏览器猜测内容类型，并迫使它总是使用 ``Content-Type`` 头中提供的类"
"型，你可以传递 `X-Content-Type-Options: nosniff`__ 头。 如果 :setting:"
"`SECURE_CONTENT_TYPE_NOSNIFF` 设置为 ``True``，``SecurityMiddleware`` 将对所"
"有的响应进行这样的操作。"

msgid ""
"Note that in most deployment situations where Django isn't involved in "
"serving user-uploaded files, this setting won't help you. For example, if "
"your :setting:`MEDIA_URL` is served directly by your front-end web server "
"(nginx, Apache, etc.) then you'd want to set this header there. On the other "
"hand, if you are using Django to do something like require authorization in "
"order to download files and you cannot set the header using your web server, "
"this setting will be useful."
msgstr ""

msgid "SSL Redirect"
msgstr "SSL 重定向"

msgid ""
"If your site offers both HTTP and HTTPS connections, most users will end up "
"with an unsecured connection by default. For best security, you should "
"redirect all HTTP connections to HTTPS."
msgstr ""
"如果你的网站同时提供 HTTP 和 HTTPS 连接，大多数用户最终会默认使用不安全的连"
"接。为了达到最佳的安全性，你应该将所有的 HTTP 连接重定向到 HTTPS。"

msgid ""
"If you set the :setting:`SECURE_SSL_REDIRECT` setting to True, "
"``SecurityMiddleware`` will permanently (HTTP 301) redirect all HTTP "
"connections to HTTPS."
msgstr ""
"如果你将 :setting:`SECURE_SSL_REDIRECT` 设置为 True，``SecurityMiddleware`` "
"将永久（HTTP 301）重定向所有 HTTP 连接到 HTTPS。"

msgid ""
"For performance reasons, it's preferable to do these redirects outside of "
"Django, in a front-end load balancer or reverse-proxy server such as "
"`nginx`_. :setting:`SECURE_SSL_REDIRECT` is intended for the deployment "
"situations where this isn't an option."
msgstr ""
"出于性能方面的考虑，最好在 Django 之外，在前端负载均衡器或反向代理服务器（如 "
"nginx_ ）中做这些重定向。 :setting:`SECURE_SSL_REDIRECT` 是为了在部署情况下，"
"这不是一个选项。"

msgid ""
"If the :setting:`SECURE_SSL_HOST` setting has a value, all redirects will be "
"sent to that host instead of the originally-requested host."
msgstr ""
"如果 :setting:`SECURE_SSL_HOST` 设置有一个值，所有的重定向将被发送到该主机，"
"而不是最初要求的主机。"

msgid ""
"If there are a few pages on your site that should be available over HTTP, "
"and not redirected to HTTPS, you can list regular expressions to match those "
"URLs in the :setting:`SECURE_REDIRECT_EXEMPT` setting."
msgstr ""
"如果你的网站上有几个页面应该通过 HTTP 提供，而不是重定向到 HTTPS，你可以在 :"
"setting:`SECURE_REDIRECT_EXEMPT` 设置中列出正则表达式来匹配这些 URL。"

msgid ""
"If you are deployed behind a load-balancer or reverse-proxy server and "
"Django can't seem to tell when a request actually is already secure, you may "
"need to set the :setting:`SECURE_PROXY_SSL_HEADER` setting."
msgstr ""
"如果你部署在负载均衡器或反向代理服务器后面，而 Django 似乎无法判断一个请求是"
"否真的已经安全，你可能需要设置 :setting:`SECURE_PROXY_SSL_HEADER` 配置。"

msgid "Session middleware"
msgstr "会话中间件"

msgid ""
"Enables session support. See the :doc:`session documentation </topics/http/"
"sessions>`."
msgstr "启用会话支持。参见 :doc:`会话文档 </topics/http/sessions>`。"

msgid ""
"Adds the ``site`` attribute representing the current site to every incoming "
"``HttpRequest`` object. See the :ref:`sites documentation <site-middleware>`."
msgstr ""
"将代表当前站点的 ``site`` 属性添加到每个传入的 ``HttpRequest`` 对象中。参见 :"
"ref:`站点文档 <site-middleware>`。"

msgid "Authentication middleware"
msgstr "验证中间件"

msgid ""
"Adds the ``user`` attribute, representing the currently-logged-in user, to "
"every incoming ``HttpRequest`` object. See :ref:`Authentication in web "
"requests <auth-web-requests>`."
msgstr ""

msgid ""
"Middleware for utilizing web server provided authentication. See :doc:`/"
"howto/auth-remote-user` for usage details."
msgstr ""

msgid ""
"Middleware for utilizing web server provided authentication when enabled "
"only on the login page. See :ref:`persistent-remote-user-middleware-howto` "
"for usage details."
msgstr ""

msgid "CSRF protection middleware"
msgstr "CSRF 保护中间件"

msgid ""
"Adds protection against Cross Site Request Forgeries by adding hidden form "
"fields to POST forms and checking requests for the correct value. See the :"
"doc:`Cross Site Request Forgery protection documentation </ref/csrf>`."
msgstr ""
"通过在 POST 表单中添加隐藏的表单字段，并检查请求的正确值，增加对跨站点伪造请"
"求的保护。请参阅 :doc:`跨站点伪造请求保护文档 </ref/csrf>`。"

msgid "``X-Frame-Options`` middleware"
msgstr "``X-Frame-Options`` 中间件"

msgid ""
"Simple :doc:`clickjacking protection via the X-Frame-Options header </ref/"
"clickjacking/>`."
msgstr ""
"简单的 :doc:`通过 X-Frame-Options 头的点击劫持保护 </ref/clickjacking/>`。"

msgid "Middleware ordering"
msgstr "中间件顺序"

msgid ""
"Here are some hints about the ordering of various Django middleware classes:"
msgstr "下面是关于各种 Django 中间件类的排序的一些提示："

msgid ":class:`~django.middleware.security.SecurityMiddleware`"
msgstr ":class:`~django.middleware.security.SecurityMiddleware`"

msgid ""
"It should go near the top of the list if you're going to turn on the SSL "
"redirect as that avoids running through a bunch of other unnecessary "
"middleware."
msgstr ""
"如果你要开启 SSL 重定向，它应该排在列表的最前面，因为这样可以避免运行一堆其他"
"不必要的中间件。"

msgid ":class:`~django.middleware.cache.UpdateCacheMiddleware`"
msgstr ":class:`~django.middleware.cache.UpdateCacheMiddleware`"

msgid ""
"Before those that modify the ``Vary`` header (``SessionMiddleware``, "
"``GZipMiddleware``, ``LocaleMiddleware``)."
msgstr ""
"在修改 ``Vary`` 头（``SessionMiddleware``、``GZipMiddleware``、"
"``LocaleMiddleware``）之前。"

msgid ":class:`~django.middleware.gzip.GZipMiddleware`"
msgstr ":class:`~django.middleware.gzip.GZipMiddleware`"

msgid "Before any middleware that may change or use the response body."
msgstr "在任何可能改变或使用响应体的中间件之前。"

msgid "After ``UpdateCacheMiddleware``: Modifies ``Vary`` header."
msgstr "在 ``UpdateCacheMiddleware`` 之后：修改 ``Vary`` 头。"

msgid ":class:`~django.contrib.sessions.middleware.SessionMiddleware`"
msgstr ":class:`~django.contrib.sessions.middleware.SessionMiddleware`"

msgid ""
"Before any middleware that may raise an exception to trigger an error view "
"(such as :exc:`~django.core.exceptions.PermissionDenied`) if you're using :"
"setting:`CSRF_USE_SESSIONS`."
msgstr ""
"在任何可能引发异常触发错误视图的中间件之前（如 :exc:`~django.core.exceptions."
"PermissionDenied`），如果你使用的是 :setting:`CSRF_USE_SESSIONS`。"

msgid ":class:`~django.middleware.http.ConditionalGetMiddleware`"
msgstr ":class:`~django.middleware.http.ConditionalGetMiddleware`"

msgid ""
"Before any middleware that may change the response (it sets the ``ETag`` "
"header)."
msgstr "在任何可能改变响应的中间件之前（它设置 ``ETag`` 头）。"

msgid ""
"After ``GZipMiddleware`` so it won't calculate an ``ETag`` header on gzipped "
"contents."
msgstr ""
"在 ``GZipMiddleware`` 之后，这样它就不会在 gzip 压缩后的内容上计算 ``ETag`` "
"头。"

msgid ":class:`~django.middleware.locale.LocaleMiddleware`"
msgstr ":class:`~django.middleware.locale.LocaleMiddleware`"

msgid ""
"One of the topmost, after ``SessionMiddleware`` (uses session data) and "
"``UpdateCacheMiddleware`` (modifies ``Vary`` header)."
msgstr ""
"最上面的一个，仅次于 ``SessionMiddleware`` （使用会话数据）和 "
"``UpdateCacheMiddleware`` （修改 ``Vary`` 头）。"

msgid ":class:`~django.middleware.common.CommonMiddleware`"
msgstr ":class:`~django.middleware.common.CommonMiddleware`"

msgid ""
"Before any middleware that may change the response (it sets the ``Content-"
"Length`` header). A middleware that appears before ``CommonMiddleware`` and "
"changes the response must reset ``Content-Length``."
msgstr ""
"在任何可能改变响应的中间件之前（它设置 ``Content-Length`` 头）。出现在 "
"``CommonMiddleware`` 之前并改变响应的中间件必须重置 ``Content-Length``。"

msgid ""
"Close to the top: it redirects when :setting:`APPEND_SLASH` or :setting:"
"`PREPEND_WWW` are set to ``True``."
msgstr ""
"靠近顶部：当 :setting:`APPEND_SLASH` 或 :setting:`PREPEND_WWW` 设置为 "
"``True`` 时，它会重定向。"

msgid ""
"After ``SessionMiddleware`` if you're using :setting:`CSRF_USE_SESSIONS`."
msgstr ""
"在 ``SessionMiddleware`` 之后，如果你使用 :setting:`CSRF_USE_SESSIONS`。"

msgid ":class:`~django.middleware.csrf.CsrfViewMiddleware`"
msgstr ":class:`~django.middleware.csrf.CsrfViewMiddleware`"

msgid ""
"Before any view middleware that assumes that CSRF attacks have been dealt "
"with."
msgstr "在任何假设 CSRF 攻击已经被处理的视图中间件之前。"

msgid ""
"Before :class:`~django.contrib.auth.middleware.RemoteUserMiddleware`, or any "
"other authentication middleware that may perform a login, and hence rotate "
"the CSRF token, before calling down the middleware chain."
msgstr ""
"在 :class:`~django.contrib.auth.middleware.RemoteUserMiddleware`，或任何其他"
"可能执行登录的认证中间件，从而旋转 CSRF 令牌，然后再向下调用中间件链。"

msgid ":class:`~django.contrib.auth.middleware.AuthenticationMiddleware`"
msgstr ":class:`~django.contrib.auth.middleware.AuthenticationMiddleware`"

msgid "After ``SessionMiddleware``: uses session storage."
msgstr "``SessionMiddleware`` 之后：使用会话存储。"

msgid ":class:`~django.contrib.messages.middleware.MessageMiddleware`"
msgstr ":class:`~django.contrib.messages.middleware.MessageMiddleware`"

msgid "After ``SessionMiddleware``: can use session-based storage."
msgstr "``SessionMiddleware`` 之后：可以使用基于会话的存储。"

msgid ":class:`~django.middleware.cache.FetchFromCacheMiddleware`"
msgstr ":class:`~django.middleware.cache.FetchFromCacheMiddleware`"

msgid ""
"After any middleware that modifies the ``Vary`` header: that header is used "
"to pick a value for the cache hash-key."
msgstr "在任何修改 ``Vary`` 头的中间件之后：该头用于为缓存哈希键选取一个值。"

msgid ""
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`"
msgstr ""
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`"

msgid "Should be near the bottom as it's a last-resort type of middleware."
msgstr "应该是接近底部，因为这是一种最后的中间件。"

msgid ""
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware`"
msgstr ""
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware`"

msgid "Migration Operations"
msgstr "迁移操作"

msgid ""
"Migration files are composed of one or more ``Operation``\\s, objects that "
"declaratively record what the migration should do to your database."
msgstr ""
"迁移文件由一个或多个 ``Operation`` 组成，这些对象声明性地记录了迁移对数据库的"
"作用。"

msgid ""
"Django also uses these ``Operation`` objects to work out what your models "
"looked like historically, and to calculate what changes you've made to your "
"models since the last migration so it can automatically write your "
"migrations; that's why they're declarative, as it means Django can easily "
"load them all into memory and run through them without touching the database "
"to work out what your project should look like."
msgstr ""
"Django 也使用这些 ``Operation`` 对象来计算出你的模型在历史上的样子，并计算出"
"自上次迁移以来你对模型做了哪些改变，这样它就可以自动写出你的迁移；这就是为什"
"么它们是声明式的，因为这意味着 Django 可以很容易地将它们全部加载到内存中，并"
"在不接触数据库的情况下运行它们，以计算出你的项目应该是什么样子。"

msgid ""
"There are also more specialized ``Operation`` objects which are for things "
"like :ref:`data migrations <data-migrations>` and for advanced manual "
"database manipulation. You can also write your own ``Operation`` classes if "
"you want to encapsulate a custom change you commonly make."
msgstr ""
"还有更专业的 ``Operation`` 对象，用于诸如 :ref:`数据迁移 <data-migrations>` "
"和进阶的手动数据库操作。如果你想封装你经常进行的自定义更改，你也可以编写自己"
"的 ``Operation`` 类。"

msgid ""
"If you need an empty migration file to write your own ``Operation`` objects "
"into, use ``python manage.py makemigrations --empty yourappname``, but be "
"aware that manually adding schema-altering operations can confuse the "
"migration autodetector and make resulting runs of :djadmin:`makemigrations` "
"output incorrect code."
msgstr ""
"如果你需要一个空的迁移文件来编写你自己的 ``Operation`` 对象，使用 ``python "
"manage.py makemigrations --empty yourappname``，但是要注意手动添加架构变化的"
"操作会混淆迁移自动检测器，使 :djadmin:`makemigrations` 的运行结果输出错误的代"
"码。"

msgid ""
"All of the core Django operations are available from the ``django.db."
"migrations.operations`` module."
msgstr ""
"所有的 Django 核心操作都可以在 ``django.db.migrations.options`` 模块中找到。"

msgid ""
"For introductory material, see the :doc:`migrations topic guide </topics/"
"migrations>`."
msgstr "关于介绍性材料，见 :doc:`迁移专题指南 </topics/migrations>`。"

msgid "Schema Operations"
msgstr "架构操作"

msgid "``CreateModel``"
msgstr "``CreateModel``"

msgid ""
"Creates a new model in the project history and a corresponding table in the "
"database to match it."
msgstr "在项目历史中创建一个新的模型，并在数据库中创建与之匹配的相应表。"

msgid ""
"``name`` is the model name, as would be written in the ``models.py`` file."
msgstr "``name`` 是模型名称，如在 ``models.py`` 文件中写的那样。"

msgid ""
"``fields`` is a list of 2-tuples of ``(field_name, field_instance)``. The "
"field instance should be an unbound field (so just ``models."
"CharField(...)``, rather than a field taken from another model)."
msgstr ""
"``fields`` 是一个由 ``(field_name, field_instance)`` 组成的2二元元组的列表。"
"字段实例应该是一个未绑定的字段（所以只是 ``models.CharField(...)``，而不是取"
"自另一个模型的字段）。"

msgid ""
"``options`` is an optional dictionary of values from the model's ``Meta`` "
"class."
msgstr "``options`` 是模型 ``Meta`` 类的可选值字典。"

msgid ""
"``bases`` is an optional list of other classes to have this model inherit "
"from; it can contain both class objects as well as strings in the format "
"``\"appname.ModelName\"`` if you want to depend on another model (so you "
"inherit from the historical version). If it's not supplied, it defaults to "
"inheriting from the standard ``models.Model``."
msgstr ""
"``bases`` 是一个可选的其他类的列表，让这个模型继承；它既可以包含类对象，也可"
"以包含格式为 ``\"appname.ModelName\"`` 的字符串，如果你想依赖另一个模型（所以"
"你继承了历史版本）。如果没有提供，它默认为从标准的 ``models.Model`` 继承。"

msgid ""
"``managers`` takes a list of 2-tuples of ``(manager_name, "
"manager_instance)``. The first manager in the list will be the default "
"manager for this model during migrations."
msgstr ""
"``managers`` 需要一个由 ``(manager_name, manager_instance)`` 组成的二元元组的"
"列表。在迁移过程中，列表中的第一个管理器将是这个模型的默认管理器。"

msgid "``DeleteModel``"
msgstr "``DeleteModel``"

msgid ""
"Deletes the model from the project history and its table from the database."
msgstr "从项目历史中删除模型，并从数据库中删除它的表。"

msgid "``RenameModel``"
msgstr "``RenameModel``"

msgid "Renames the model from an old name to a new one."
msgstr "将模型从旧名称改名为新名称。"

msgid ""
"You may have to manually add this if you change the model's name and quite a "
"few of its fields at once; to the autodetector, this will look like you "
"deleted a model with the old name and added a new one with a different name, "
"and the migration it creates will lose any data in the old table."
msgstr ""
"如果你一次更改了模型的名称和相当多的字段，你可能必须手动添加这个；对自动检测"
"器来说，这看起来就像你删除了一个使用旧名称的模型，并添加了一个使用不同名称的"
"新模型，它创建的迁移将丢失旧表中的任何数据。"

msgid "``AlterModelTable``"
msgstr "``AlterModelTable``"

msgid ""
"Changes the model's table name (the :attr:`~django.db.models.Options."
"db_table` option on the ``Meta`` subclass)."
msgstr ""
"更改模型的表名（``Meta`` 子类上的 :attr:`~django.db.models.Options.db_table` "
"选项）。"

msgid "``AlterModelTableComment``"
msgstr ""

msgid ""
"Changes the model's table comment (the :attr:`~django.db.models.Options."
"db_table_comment` option on the ``Meta`` subclass)."
msgstr ""

msgid "``AlterUniqueTogether``"
msgstr "``AlterUniqueTogether``"

msgid ""
"Changes the model's set of unique constraints (the :attr:`~django.db.models."
"Options.unique_together` option on the ``Meta`` subclass)."
msgstr ""
"改变模型的唯一约束集（``Meta`` 子类上的 :attr:`~django.db.models.Options."
"unique_together` 选项）。"

msgid "``AlterIndexTogether``"
msgstr "``AlterIndexTogether``"

msgid ""
"Changes the model's set of custom indexes (the ``index_together`` option on "
"the ``Meta`` subclass)."
msgstr ""

msgid ""
"``AlterIndexTogether`` is officially supported only for pre-Django 4.2 "
"migration files. For backward compatibility reasons, it's still part of the "
"public API, and there's no plan to deprecate or remove it, but it should not "
"be used for new migrations. Use :class:`~django.db.migrations.operations."
"AddIndex` and :class:`~django.db.migrations.operations.RemoveIndex` "
"operations instead."
msgstr ""

msgid "``AlterOrderWithRespectTo``"
msgstr "``AlterOrderWithRespectTo``"

msgid ""
"Makes or deletes the ``_order`` column needed for the :attr:`~django.db."
"models.Options.order_with_respect_to` option on the ``Meta`` subclass."
msgstr ""
"生成或删除 ``Meta`` 子类上的 :attr:`~django.db.models.Options."
"order_with_respect_to` 选项所需的 ``_order`` 列。"

msgid "``AlterModelOptions``"
msgstr "``AlterModelOptions``"

msgid ""
"Stores changes to miscellaneous model options (settings on a model's "
"``Meta``) like ``permissions`` and ``verbose_name``. Does not affect the "
"database, but persists these changes for :class:`RunPython` instances to "
"use. ``options`` should be a dictionary mapping option names to values."
msgstr ""
"存储对各种模型选项的更改（模型 ``Meta`` 上的设置），如 ``permissions`` 和 "
"``verbose_name``。不影响数据库，但会将这些更改持久化，供 :class:`RunPython` "
"实例使用。``options`` 应该是一个将选项名映射到值的字典。"

msgid "``AlterModelManagers``"
msgstr "``AlterModelManagers``"

msgid "Alters the managers that are available during migrations."
msgstr "改变迁移期间可用的管理器。"

msgid "``AddField``"
msgstr "``AddField``"

msgid ""
"Adds a field to a model. ``model_name`` is the model's name, ``name`` is the "
"field's name, and ``field`` is an unbound Field instance (the thing you "
"would put in the field declaration in ``models.py`` - for example, ``models."
"IntegerField(null=True)``."
msgstr ""
"为模型添加一个字段。``model_name`` 是模型的名称，``name`` 是字段的名称，"
"``field`` 是一个未绑定的字段实例（你会在 ``models.py`` 中的字段声明中放入的东"
"西——例如，``models.IntegerField(null=True)``）。"

msgid ""
"The ``preserve_default`` argument indicates whether the field's default "
"value is permanent and should be baked into the project state (``True``), or "
"if it is temporary and just for this migration (``False``) - usually because "
"the migration is adding a non-nullable field to a table and needs a default "
"value to put into existing rows. It does not affect the behavior of setting "
"defaults in the database directly - Django never sets database defaults and "
"always applies them in the Django ORM code."
msgstr ""
"``preserve_default`` 参数表示字段的默认值是否是永久的，应该被内置到项目状态中"
"（``True``），或者它是否是临时的，只适用于这次迁移（``False``）——通常是因为迁"
"移在表中添加一个不可空的字段，需要一个默认值放到现有的行中。它不影响直接在数"
"据库中设置默认值的行为——Django 从不设置数据库默认值，而总是在 Django ORM 代码"
"中应用。"

msgid ""
"On older databases, adding a field with a default value may cause a full "
"rewrite of the table. This happens even for nullable fields and may have a "
"negative performance impact. To avoid that, the following steps should be "
"taken."
msgstr ""
"在旧的数据库中，添加一个具有默认值的字段可能会导致表的完全重写。即使是对于可"
"空字段，也会发生这种情况，可能会对性能产生负面影响。为了避免这种情况，应采取"
"以下步骤。"

msgid ""
"Add the nullable field without the default value and run the :djadmin:"
"`makemigrations` command. This should generate a migration with an "
"``AddField`` operation."
msgstr ""
"添加可空字段，不含默认值，并运行 :djadmin:`makemigrations` 命令。这应该会产生"
"一个带有 ``AddField`` 操作的迁移。"

msgid ""
"Add the default value to your field and run the :djadmin:`makemigrations` "
"command. This should generate a migration with an ``AlterField`` operation."
msgstr ""
"将默认值添加到你的字段中，然后运行:djadmin:`makemigrations` 命令。这应该会生"
"成一个带有 ``AlterField`` 操作的迁移。"

msgid "``RemoveField``"
msgstr "``RemoveField``"

msgid "Removes a field from a model."
msgstr "从模型中删除一个字段。"

msgid ""
"Bear in mind that when reversed, this is actually adding a field to a model. "
"The operation is reversible (apart from any data loss, which is "
"irreversible) if the field is nullable or if it has a default value that can "
"be used to populate the recreated column. If the field is not nullable and "
"does not have a default value, the operation is irreversible."
msgstr ""
"请记住，当反向迁移时，这实际上是向模型添加一个字段。如果字段是可空的，或者它"
"有一个默认值，可以用来填充重新创建的列，那么这个操作是可逆的（除了任何数据损"
"失，这是不可逆的）。如果字段不可为空，也没有默认值，则该操作是不可逆的。"

msgid "``AlterField``"
msgstr "``AlterField``"

msgid ""
"Alters a field's definition, including changes to its type, :attr:`~django."
"db.models.Field.null`, :attr:`~django.db.models.Field.unique`, :attr:"
"`~django.db.models.Field.db_column` and other field attributes."
msgstr ""
"改变字段的定义，包括改变其类型、:attr:`~django.db.models.Field.null`、:attr:"
"`~django.db.models.Field.unique`、:attr:`~django.db.models.Field.db_column` "
"等字段属性。"

msgid ""
"The ``preserve_default`` argument indicates whether the field's default "
"value is permanent and should be baked into the project state (``True``), or "
"if it is temporary and just for this migration (``False``) - usually because "
"the migration is altering a nullable field to a non-nullable one and needs a "
"default value to put into existing rows. It does not affect the behavior of "
"setting defaults in the database directly - Django never sets database "
"defaults and always applies them in the Django ORM code."
msgstr ""
"``preserve_default`` 参数表示字段的默认值是否是永久的，应该被内置到项目状态中"
"（``True``），或者它是否是临时的，只适用于这次迁移（``False``）——通常是因为迁"
"移将一个可空的字段改变为不可空的字段，需要一个默认值放到现有的行中。它不影响"
"直接在数据库中设置默认值的行为——Django 从不设置数据库默认值，而总是在 Django "
"ORM 代码中应用。"

msgid ""
"Note that not all changes are possible on all databases - for example, you "
"cannot change a text-type field like ``models.TextField()`` into a number-"
"type field like ``models.IntegerField()`` on most databases."
msgstr ""
"请注意，并不是所有的数据库都可以进行所有的更改——例如，在大多数数据库中，你不"
"能将像 ``models.TextField()`` 这样的文本型字段改为像 ``models."
"IntegerField()`` 这样的数字型字段。"

msgid "``RenameField``"
msgstr "``RenameField``"

msgid ""
"Changes a field's name (and, unless :attr:`~django.db.models.Field."
"db_column` is set, its column name)."
msgstr ""
"改变一个字段的名称（除非设置了 :attr:`~django.db.models.Field.db_column`，否"
"则改变其列名）。"

msgid "``AddIndex``"
msgstr "``AddIndex``"

msgid ""
"Creates an index in the database table for the model with ``model_name``. "
"``index`` is an instance of the :class:`~django.db.models.Index` class."
msgstr ""
"在数据库表中为模型创建一个带有 ``model_name`` 的索引。`index` 是 :class:"
"`~django.db.models.Index` 类的一个实例。"

msgid "``RemoveIndex``"
msgstr "``RemoveIndex``"

msgid "Removes the index named ``name`` from the model with ``model_name``."
msgstr "从带有 ``model_name`` 的模型中删除名为 ``name`` 的索引。"

msgid "``RenameIndex``"
msgstr "``RenameIndex``"

msgid ""
"Renames an index in the database table for the model with ``model_name``. "
"Exactly one of ``old_name`` and ``old_fields`` can be provided. "
"``old_fields`` is an iterable of the strings, often corresponding to fields "
"of :attr:`~django.db.models.Options.index_together`."
msgstr ""

msgid ""
"On databases that don't support an index renaming statement (SQLite and "
"MariaDB < 10.5.2), the operation will drop and recreate the index, which can "
"be expensive."
msgstr ""

msgid "``AddConstraint``"
msgstr "``AddConstraint``"

msgid ""
"Creates a :doc:`constraint </ref/models/constraints>` in the database table "
"for the model with ``model_name``."
msgstr ""
"在数据库表中为带有 ``model_name`` 的模型创建一个 :doc:`约束 </ref/models/"
"constraints>`。"

msgid "``RemoveConstraint``"
msgstr "``RemoveConstraint``"

msgid ""
"Removes the constraint named ``name`` from the model with ``model_name``."
msgstr "从带有 ``model_name`` 的模型中删除名为 ``name`` 的约束。"

msgid "Special Operations"
msgstr "特殊操作"

msgid "``RunSQL``"
msgstr "``RunSQL``"

msgid ""
"Allows running of arbitrary SQL on the database - useful for more advanced "
"features of database backends that Django doesn't support directly."
msgstr ""
"允许在数据库上运行任意 SQL——这对于 Django 不直接支持的数据库后端高级功能非常"
"有用。"

msgid ""
"``sql``, and ``reverse_sql`` if provided, should be strings of SQL to run on "
"the database. On most database backends (all but PostgreSQL), Django will "
"split the SQL into individual statements prior to executing them."
msgstr ""
"``sql`` 和 ``reverse_sql`` （如果提供），应该是要在数据库中运行的 SQL 字符"
"串。在大多数数据库后端（除了 PostgreSQL），Django 会在执行 SQL 语句之前将其分"
"割成独立的语句。"

msgid ""
"On PostgreSQL and SQLite, only use ``BEGIN`` or ``COMMIT`` in your SQL in :"
"ref:`non-atomic migrations <non-atomic-migrations>`, to avoid breaking "
"Django's transaction state."
msgstr ""
"在 PostgreSQL 和 SQLite上，只有在 :ref:`非原子性迁移 <non-atomic-"
"migrations>` 中的 SQL 中使用 ``BEGIN`` 或 ``COMMIT``，才能避免破坏 Django 的"
"事务状态。"

msgid ""
"You can also pass a list of strings or 2-tuples. The latter is used for "
"passing queries and parameters in the same way as :ref:`cursor.execute() "
"<executing-custom-sql>`. These three operations are equivalent::"
msgstr ""
"你也可以传递一个字符串或二元元组的列表。后者与 :ref:`cursor.execute() "
"<executing-custom-sql>` 一样，用于传递查询和参数。这三种操作是等价的："

msgid ""
"If you want to include literal percent signs in the query, you have to "
"double them if you are passing parameters."
msgstr ""
"如果你想在查询中包含字面的百分号，如果你传递的是参数，你必须将它们翻倍。"

msgid ""
"The ``reverse_sql`` queries are executed when the migration is unapplied. "
"They should undo what is done by the ``sql`` queries. For example, to undo "
"the above insertion with a deletion::"
msgstr ""
"``reverse_sql`` 查询是在未应用迁移时执行的。它们应该撤销 ``sql`` 查询所做的事"
"情。例如，要撤销上面的插入与删除："

msgid ""
"If ``reverse_sql`` is ``None`` (the default), the ``RunSQL`` operation is "
"irreversible."
msgstr ""
"如果 ``reverse_sql`` 是 ``None`` （默认），则 ``RunSQL`` 操作是不可逆的。"

msgid ""
"The ``state_operations`` argument allows you to supply operations that are "
"equivalent to the SQL in terms of project state. For example, if you are "
"manually creating a column, you should pass in a list containing an "
"``AddField`` operation here so that the autodetector still has an up-to-date "
"state of the model. If you don't, when you next run ``makemigrations``, it "
"won't see any operation that adds that field and so will try to run it "
"again. For example::"
msgstr ""
"``state_operations`` 参数允许你提供在项目状态方面相当于 SQL 的操作。例如，如"
"果你正在手动创建一个列，你应该在这里传递一个包含 ``AddField`` 操作的列表，这"
"样自动检测器仍然有一个最新的模型状态。如果你不这样做，当你下次运行 "
"``makemigrations`` 时，它不会看到任何添加该字段的操作，所以会尝试再次运行它。"
"例如："

msgid ""
"The optional ``hints`` argument will be passed as ``**hints`` to the :meth:"
"`allow_migrate` method of database routers to assist them in making routing "
"decisions. See :ref:`topics-db-multi-db-hints` for more details on database "
"hints."
msgstr ""
"可选的 ``hints`` 参数将作为 ``**hints`` 传递给数据库路由器的 :meth:"
"`allow_migrate` 方法，以帮助它们做出路由决策。参见 :ref:`topics-db-multi-db-"
"hints` 了解更多关于数据库提示的细节。"

msgid ""
"The optional ``elidable`` argument determines whether or not the operation "
"will be removed (elided) when :ref:`squashing migrations <migration-"
"squashing>`."
msgstr ""
"可选的 ``elidable`` 参数决定了当 :ref:`压缩迁移 <migration-squashing>` 时，是"
"否会删除（elided）该操作。"

msgid ""
"Pass the ``RunSQL.noop`` attribute to ``sql`` or ``reverse_sql`` when you "
"want the operation not to do anything in the given direction. This is "
"especially useful in making the operation reversible."
msgstr ""
"当你希望操作在给定的方向上不做任何事情时，将 ``RunSQL.noop`` 属性传递给 "
"``sql`` 或 ``reverse_sql``。这在使操作可逆时特别有用。"

msgid "``RunPython``"
msgstr "``RunPython``"

msgid ""
"Runs custom Python code in a historical context. ``code`` (and "
"``reverse_code`` if supplied) should be callable objects that accept two "
"arguments; the first is an instance of ``django.apps.registry.Apps`` "
"containing historical models that match the operation's place in the project "
"history, and the second is an instance of :class:`SchemaEditor <django.db."
"backends.base.schema.BaseDatabaseSchemaEditor>`."
msgstr ""
"在历史上下文中运行自定义 Python 代码。``code`` （如果提供了 "
"``reverse_code``）应该是可调用的对象，接受两个参数；第一个是 ``django.app."
"registry.Apps`` 的实例，包含与操作在项目历史中的位置相匹配的历史模型，第二个"
"是 :class:`SchemaEditor <django.db.backends.base.schema."
"BaseDatabaseSchemaEditor>` 的实例。"

msgid ""
"The ``reverse_code`` argument is called when unapplying migrations. This "
"callable should undo what is done in the ``code`` callable so that the "
"migration is reversible. If ``reverse_code`` is ``None`` (the default), the "
"``RunPython`` operation is irreversible."
msgstr ""
"``reverse_code`` 参数在取消应用迁移时被调用。这个可调用对象参数应该撤销在 "
"``code`` 可调用对象参数中所做的事情，这样迁移才是可逆的。如果 "
"``reverse_code`` 是``None`` （默认），则 ``RunPython`` 操作是不可逆的。"

msgid ""
"The optional ``hints`` argument will be passed as ``**hints`` to the :meth:"
"`allow_migrate` method of database routers to assist them in making a "
"routing decision. See :ref:`topics-db-multi-db-hints` for more details on "
"database hints."
msgstr ""
"可选的 ``hints`` 参数将作为 ``**hints`` 传递给数据库路由器的 :meth:"
"`allow_migrate` 方法，以帮助它们做出路由决策。参见 :ref:`topics-db-multi-db-"
"hints` 了解更多关于数据库提示的细节。"

msgid ""
"You are advised to write the code as a separate function above the "
"``Migration`` class in the migration file, and pass it to ``RunPython``. "
"Here's an example of using ``RunPython`` to create some initial objects on a "
"``Country`` model::"
msgstr ""
"建议你把这些代码写成一个单独的函数，放在迁移文件中的 ``Migration`` 类上面，然"
"后传递给 ``RunPython``。下面是一个使用 ``RunPython`` 在 ``Country`` 模型上创"
"建一些初始对象的例子："

msgid ""
"This is generally the operation you would use to create :ref:`data "
"migrations <data-migrations>`, run custom data updates and alterations, and "
"anything else you need access to an ORM and/or Python code for."
msgstr ""
"这通常是你用来创建 :ref:`数据迁移 <data-migrations>` 的操作，运行自定义数据更"
"新和更改，以及其他任何你需要访问 ORM 和／或 Python 代码的操作。"

msgid ""
"Much like :class:`RunSQL`, ensure that if you change schema inside here "
"you're either doing it outside the scope of the Django model system (e.g. "
"triggers) or that you use :class:`SeparateDatabaseAndState` to add in "
"operations that will reflect your changes to the model state - otherwise, "
"the versioned ORM and the autodetector will stop working correctly."
msgstr ""
"就像 :class:`RunSQL` 一样，确保如果你在这里改变模式，你要么是在 Django 模型系"
"统的范围外进行（例如触发器），要么你使用 :class:`SeparateDatabaseAndState` 来"
"添加操作，以反映你对模型状态的改变——否则，过时的 ORM 和自动检测器将停止正常工"
"作。"

msgid ""
"By default, ``RunPython`` will run its contents inside a transaction on "
"databases that do not support DDL transactions (for example, MySQL and "
"Oracle). This should be safe, but may cause a crash if you attempt to use "
"the ``schema_editor`` provided on these backends; in this case, pass "
"``atomic=False`` to the ``RunPython`` operation."
msgstr ""
"默认情况下，``RunPython`` 将在不支持 DDL 事务的数据库（例如 MySQL 和 Oracle）"
"的事务中运行其内容。这应该是安全的，但如果你试图使用这些后端提供的 "
"``schema_editor`` 可能会导致崩溃；在这种情况下，将 ``atomic=False`` 传递给 "
"``RunPython`` 操作。"

msgid ""
"On databases that do support DDL transactions (SQLite and PostgreSQL), "
"``RunPython`` operations do not have any transactions automatically added "
"besides the transactions created for each migration. Thus, on PostgreSQL, "
"for example, you should avoid combining schema changes and ``RunPython`` "
"operations in the same migration or you may hit errors like "
"``OperationalError: cannot ALTER TABLE \"mytable\" because it has pending "
"trigger events``."
msgstr ""
"在支持 DDL 事务的数据库上（SQLite 和 PostgreSQL），``RunPython`` 操作除了为每"
"次迁移创建的事务外，不会自动添加任何事务。因此，例如在 PostgreSQL 上，你应该"
"避免在同一个迁移中把架构变化和 ``RunPython`` 操作结合起来，否则你可能会遇到 "
"``OperationalError: cannot ALTER TABLE \"mytable\" because it has pending "
"trigger events`` 这样的错误。"

msgid ""
"If you have a different database and aren't sure if it supports DDL "
"transactions, check the ``django.db.connection.features.can_rollback_ddl`` "
"attribute."
msgstr ""
"如果你有一个不同的数据库，并且不确定它是否支持 DDL 事务，检查 ``django.db."
"connection.features.can_rollback_ddl`` 属性。"

msgid ""
"If the ``RunPython`` operation is part of a :ref:`non-atomic migration <non-"
"atomic-migrations>`, the operation will only be executed in a transaction if "
"``atomic=True`` is passed to the ``RunPython`` operation."
msgstr ""
"如果 ``RunPython`` 操作是 :ref:`非原子性的迁移 <non-atomic-migrations>` 的一"
"部分，那么只有当 ``atomic=True`` 传递给 ``RunPython`` 操作时，该操作才会在事"
"务中执行。"

msgid ""
"``RunPython`` does not magically alter the connection of the models for you; "
"any model methods you call will go to the default database unless you give "
"them the current database alias (available from ``schema_editor.connection."
"alias``, where ``schema_editor`` is the second argument to your function)."
msgstr ""
"``RunPython`` 不会为你神奇地改变模型的连接；你调用的任何模型方法将转到默认的"
"数据库，除非你给它们当前的数据库别名（可从 ``schema_editor.connection."
"alias`` 中获得，其中 ``schema_editor`` 是你函数的第二个参数）。"

msgid ""
"Pass the ``RunPython.noop`` method to ``code`` or ``reverse_code`` when you "
"want the operation not to do anything in the given direction. This is "
"especially useful in making the operation reversible."
msgstr ""
"当你希望操作在给定的方向上不做任何事情时，将 ``RunPython.noop`` 方法传递给 "
"``code`` 或 ``reverse_code``。这在使操作可逆时特别有用。"

msgid "``SeparateDatabaseAndState``"
msgstr "``SeparateDatabaseAndState``"

msgid ""
"A highly specialized operation that lets you mix and match the database "
"(schema-changing) and state (autodetector-powering) aspects of operations."
msgstr ""
"一个高度专业化的操作，让你混合和匹配数据库（架构改变）和状态（自动检测器支"
"持）方面的操作。"

msgid ""
"It accepts two lists of operations. When asked to apply state, it will use "
"the ``state_operations`` list (this is a generalized version of :class:"
"`RunSQL`'s ``state_operations`` argument). When asked to apply changes to "
"the database, it will use the ``database_operations`` list."
msgstr ""
"它接受两个操作列表。当要求它应用状态时，它将使用 ``state_operations`` 列表"
"（这是 :class:`RunSQL` 的 ``state_operations`` 参数的通用版本）。当要求它对数"
"据库进行更改时，它将使用 ``database_operations`` 列表。"

msgid ""
"If the actual state of the database and Django's view of the state get out "
"of sync, this can break the migration framework, even leading to data loss. "
"It's worth exercising caution and checking your database and state "
"operations carefully. You can use :djadmin:`sqlmigrate` and :djadmin:"
"`dbshell` to check your database operations. You can use :djadmin:"
"`makemigrations`, especially with :option:`--dry-run<makemigrations --dry-"
"run>`, to check your state operations."
msgstr ""
"如果数据库的实际状态和 Django 的状态视图不同步，就会破坏迁移框架，甚至导致数"
"据丢失。值得谨慎行事，仔细检查你的数据库和状态操作。你可以使用 :djadmin:"
"`sqlmigrate` 和 :djadmin:`dbshell` 来检查你的数据库操作。你可以使用 :djadmin:"
"`makemigrations`，特别是使用 :option:`--dry-run<makemigrations --dry-run>`，"
"来检查你的状态操作。"

msgid ""
"For an example using ``SeparateDatabaseAndState``, see :ref:`changing-a-"
"manytomanyfield-to-use-a-through-model`."
msgstr ""
"关于使用 ``SeparateDatabaseAndState`` 的例子，请参见 :ref:`changing-a-"
"manytomanyfield to use-a-through-model`。"

msgid "Writing your own"
msgstr "自己写"

msgid ""
"Operations have a relatively simple API, and they're designed so that you "
"can easily write your own to supplement the built-in Django ones. The basic "
"structure of an ``Operation`` looks like this::"
msgstr ""
"操作有一个相对简单的 API，而且它们被设计成可以让你很容易地编写自己的 API 来补"
"充内置的 Django 的 API。一个 ``Operation`` 的基本结构是这样的："

msgid ""
"You can take this template and work from it, though we suggest looking at "
"the built-in Django operations in ``django.db.migrations.operations`` - they "
"cover a lot of the example usage of semi-internal aspects of the migration "
"framework like ``ProjectState`` and the patterns used to get historical "
"models, as well as ``ModelState`` and the patterns used to mutate historical "
"models in ``state_forwards()``."
msgstr ""
"你可以使用这个模板，并在此基础上进行工作，不过我们建议查看 ``django.db."
"migrations.options`` 中内置的 Django 操作——它们涵盖了很多迁移框架半内部方面的"
"例子，比如 ``ProjectState`` 和用于获取历史模型的模式，以及 ``ModelState`` 和 "
"``state_forwards()`` 中用于突变历史模型的模式。"

msgid "Some things to note:"
msgstr "注意事项："

msgid ""
"You don't need to learn too much about ``ProjectState`` to write migrations; "
"just know that it has an ``apps`` property that gives access to an app "
"registry (which you can then call ``get_model`` on)."
msgstr ""
"你不需要学习太多关于 ``ProjectState`` 的知识来编写迁移；只需要知道它有一个 "
"``apps`` 属性，它提供了对应用程序注册表的访问（然后你可以调用 "
"``get_model``）。"

msgid ""
"``database_forwards`` and ``database_backwards`` both get two states passed "
"to them; these represent the difference the ``state_forwards`` method would "
"have applied, but are given to you for convenience and speed reasons."
msgstr ""
"``database_forwards`` 和 ``database_backwards`` 都有两个状态传递给它们；这些"
"状态代表了 ``state_forwards`` 方法本会应用的差异，但为了方便和速度的原因，给"
"了你。"

msgid ""
"If you want to work with model classes or model instances from the "
"``from_state`` argument in ``database_forwards()`` or "
"``database_backwards()``, you must render model states using the "
"``clear_delayed_apps_cache()`` method to make related models available::"
msgstr ""
"如果你想从 ``database_forwards()`` 或 ``database_backwards()`` 中的 "
"``from_state`` 参数中处理模型类或模型实例，你必须使用 "
"``clear_delayed_apps_cache()`` 方法渲染模型状态，以使相关模型可用："

msgid ""
"``to_state`` in the database_backwards method is the *older* state; that is, "
"the one that will be the current state once the migration has finished "
"reversing."
msgstr ""
"database_backwards 方法中的 ``to_state`` 是指 *旧* 的状态；也就是反向迁移完成"
"后将成为当前状态的状态。"

msgid ""
"You might see implementations of ``references_model`` on the built-in "
"operations; this is part of the autodetection code and does not matter for "
"custom operations."
msgstr ""
"你可能会在内置操作上看到 ``references_model`` 的实现，这是自动检测代码的一部"
"分，对自定义操作并不重要。"

msgid ""
"For performance reasons, the :class:`~django.db.models.Field` instances in "
"``ModelState.fields`` are reused across migrations. You must never change "
"the attributes on these instances. If you need to mutate a field in "
"``state_forwards()``, you must remove the old instance from ``ModelState."
"fields`` and add a new instance in its place. The same is true for the :"
"class:`~django.db.models.Manager` instances in ``ModelState.managers``."
msgstr ""
"由于性能原因，``ModelState.fields.Field`` 中的 :class:`~django.db.models."
"Field`` 实例会在不同的迁移中重复使用。你决不能改变这些实例的属性。如果你需要"
"在 ``state_forwards()`` 中突变一个字段，你必须从 ``ModelState.fields`` 中删除"
"旧的实例，并在其位置上添加一个新的实例。对于 ``ModelState.managers`` 中的 :"
"class:`~django.db.models.Manager`` 实例也是如此。"

msgid ""
"As an example, let's make an operation that loads PostgreSQL extensions "
"(which contain some of PostgreSQL's more exciting features). Since there's "
"no model state changes, all it does is run one command::"
msgstr ""
"举个例子，让我们做一个加载 PostgreSQL 扩展的操作（其中包含了 PostgreSQL 的一"
"些更令人兴奋的特性）。由于没有改变模型状态，所以它所做的只是运行一条命令："

msgid "Model class reference"
msgstr "模型类参考"

msgid ""
"This document covers features of the :class:`~django.db.models.Model` class. "
"For more information about models, see :doc:`the complete list of Model "
"reference guides </ref/models/index>`."
msgstr ""
"本文档涵盖了 :class:`~django.db.models.Model` 类的功能。关于模型的更多信息，"
"请参见 :doc:`模型参考指南的完整列表 </ref/models/index>`。"

msgid "``DoesNotExist``"
msgstr "``DoesNotExist``"

msgid ""
"This exception is raised by the ORM when an expected object is not found. "
"For example, :meth:`.QuerySet.get` will raise it when no object is found for "
"the given lookups."
msgstr ""
"当没有找到预期的对象时，ORM 会引发这个异常。例如， :meth:`.QuerySet.get` 将在"
"没有找到给定查找对象时引发该异常。"

msgid ""
"Django provides a ``DoesNotExist`` exception as an attribute of each model "
"class to identify the class of object that could not be found, allowing you "
"to catch exceptions for a particular model class. The exception is a "
"subclass of :exc:`django.core.exceptions.ObjectDoesNotExist`."
msgstr ""
"Django 提供了一个 ``DoesNotExist`` 的异常作为每个模型类的属性，用来标识找不到"
"的对象类，允许你为某个模型类捕捉异常。该异常是 :exc:`django.core.exceptions."
"ObjectDoesNotExist` 的一个子类。"

msgid ""
"This exception is raised by :meth:`.QuerySet.get` when multiple objects are "
"found for the given lookups."
msgstr "当给定的查找找到多个对象时， :meth:`.QuerySet.get` 会引发这个异常。"

msgid ""
"Django provides a ``MultipleObjectsReturned`` exception as an attribute of "
"each model class to identify the class of object for which multiple objects "
"were found, allowing you to catch exceptions for a particular model class. "
"The exception is a subclass of :exc:`django.core.exceptions."
"MultipleObjectsReturned`."
msgstr ""
"Django 提供了一个 ``MultipleObjectsReturned`` 的异常作为每个模型类的属性，用"
"于识别发现多个对象的对象类，允许你为某个模型类捕捉异常。该异常是 :exc:"
"`django.core.exceptions.MultipleObjectsReturned` 的一个子类。"

msgid "``objects``"
msgstr "``objects``"

msgid ""
"Each non-abstract :class:`~django.db.models.Model` class must have a :class:"
"`~django.db.models.Manager` instance added to it. Django ensures that in "
"your model class you have  at least a default ``Manager`` specified. If you "
"don't add your own ``Manager``, Django will add an attribute ``objects`` "
"containing default :class:`~django.db.models.Manager` instance. If you add "
"your own :class:`~django.db.models.Manager` instance attribute, the default "
"one does not appear. Consider the following example::"
msgstr ""
"每个非抽象的 :class:`~django.db.models.Model` 类必须有一个 :class:`~django."
"db.models.Manager` 实例添加到其中。Django 确保在你的模型类中至少指定了一个默"
"认的 ``Manager``。如果你没有添加自己的 `Manager``，Django 会添加一个属性 "
"``objects``，包含默认的 :class:`~django.db.models.Manager` 实例。如果添加自己"
"的 :class:`~django.db.models.Manager` 实例属性，则不会出现默认的。考虑下面的"
"例子："

msgid ""
"For more details on model managers see :doc:`Managers </topics/db/managers>` "
"and :ref:`Retrieving objects <retrieving-objects>`."
msgstr ""
"关于模型管理器的更多细节，请参见 :doc:`管理器 </topics/db/managers>` 和 :ref:"
"`检索对象 <retrieving-objects>`。"

msgid "Conditional Expressions"
msgstr "条件表达式"

msgid ""
"Conditional expressions let you use :keyword:`if` ... :keyword:`elif` ... :"
"keyword:`else` logic within filters, annotations, aggregations, and updates. "
"A conditional expression evaluates a series of conditions for each row of a "
"table and returns the matching result expression. Conditional expressions "
"can also be combined and nested like other :doc:`expressions <expressions>`."
msgstr ""
"条件表达式让你可以在过滤器、注解、聚合和更新中使用 :keyword:`if` ... :"
"keyword:`elif` ... :keyword:`else` 逻辑。条件表达式对表的每条记录执行一系列条"
"件，并返回匹配的结果表达式。条件表达式也可以像其他 :doc:`表达式 "
"<expressions>` 一样进行组合和嵌套。"

msgid "The conditional expression classes"
msgstr "条件表达式类"

msgid "We'll be using the following model in the subsequent examples::"
msgstr "在后续的例子中，我们将使用以下模型："

msgid "``When``"
msgstr "``When``"

msgid ""
"A ``When()`` object is used to encapsulate a condition and its result for "
"use in the conditional expression. Using a ``When()`` object is similar to "
"using the :meth:`~django.db.models.query.QuerySet.filter` method. The "
"condition can be specified using :ref:`field lookups <field-lookups>`, :"
"class:`~django.db.models.Q` objects, or :class:`~django.db.models."
"Expression` objects that have an ``output_field`` that is a :class:`~django."
"db.models.BooleanField`. The result is provided using the ``then`` keyword."
msgstr ""
"``When()`` 对象用于封装一个条件及其结果，以便在条件表达式中使用。使用 "
"``When()`` 对象类似于使用 :meth:`~django.db.models.query.QuerySet.filter` 方"
"法。可以使用 :ref:`字段查找 <field-lookups>`、 :class:`~django.db.models.Q` "
"对象或 :class:`~django.db.models.Expression` 对象来指定条件，这些对象的 "
"`output_field` 是 :class:`~django.db.models.BooleanField`。结果是用 ``then`` "
"关键字提供的。"

msgid "Some examples:"
msgstr ""

msgid "Keep in mind that each of these values can be an expression."
msgstr "请记住，每个值都可以是一个表达式。"

msgid ""
"Since the ``then`` keyword argument is reserved for the result of the "
"``When()``, there is a potential conflict if a :class:`~django.db.models."
"Model` has a field named ``then``. This can be resolved in two ways:"
msgstr ""

msgid "``Case``"
msgstr "``Case``"

msgid ""
"A ``Case()`` expression is like the :keyword:`if` ... :keyword:`elif` ... :"
"keyword:`else` statement in ``Python``. Each ``condition`` in the provided "
"``When()`` objects is evaluated in order, until one evaluates to a truthful "
"value. The ``result`` expression from the matching ``When()`` object is "
"returned."
msgstr ""
"``Case()`` 表达式就像 ``Python`` 中的 :keyword:`if`... :keyword:`elif`... :"
"keyword:`else` 语句。在提供的 ``When()`` 对象中的每个 ``condition`` 按顺序执"
"行，直到执行出一个对的值。从匹配的 ``When()`` 对象中返回 ``result`` 表达式。"

msgid "An example:"
msgstr ""

msgid ""
"``Case()`` accepts any number of ``When()`` objects as individual arguments. "
"Other options are provided using keyword arguments. If none of the "
"conditions evaluate to ``TRUE``, then the expression given with the "
"``default`` keyword argument is returned. If a ``default`` argument isn't "
"provided, ``None`` is used."
msgstr ""
"``Case()`` 接受任意数量的 ``When()`` 对象作为单个参数。其他选项是通过关键字参"
"数提供的。如果没有一个条件的值是 ``TRUE``，那么将返回用 ``default`` 关键字参"
"数给出的表达式。如果没有提供 ``default`` 参数，则使用 ``None``。"

msgid ""
"If we wanted to change our previous query to get the discount based on how "
"long the ``Client`` has been with us, we could do so using lookups:"
msgstr ""

msgid ""
"Remember that the conditions are evaluated in order, so in the above example "
"we get the correct result even though the second condition matches both Jane "
"Doe and Jack Black. This works just like an :keyword:`if` ... :keyword:"
"`elif` ... :keyword:`else` statement in ``Python``."
msgstr ""
"请记住，条件是按顺序计算的，所以在上面的例子中，尽管第二个条件同时符合 Jane "
"Doe 和 Jack Black，我们还是得到了正确的结果。这就像在 ``Python`` 中的 :"
"keyword:`if`... :keyword:`elif`... :keyword:`else` 语句一样。"

msgid ""
"``Case()`` also works in a ``filter()`` clause. For example, to find gold "
"clients that registered more than a month ago and platinum clients that "
"registered more than a year ago:"
msgstr ""

msgid "Advanced queries"
msgstr "高级查询"

msgid ""
"Conditional expressions can be used in annotations, aggregations, filters, "
"lookups, and updates. They can also be combined and nested with other "
"expressions. This allows you to make powerful conditional queries."
msgstr ""
"条件表达式可用于注解、聚合、过滤器、查找和更新中。它们还可以与其他表达式组合"
"和嵌套。这使你可以进行强大的条件查询。"

msgid "Conditional update"
msgstr "条件更新"

msgid ""
"Let's say we want to change the ``account_type`` for our clients to match "
"their registration dates. We can do this using a conditional expression and "
"the :meth:`~django.db.models.query.QuerySet.update` method:"
msgstr ""

msgid "Conditional aggregation"
msgstr "条件聚合"

msgid ""
"What if we want to find out how many clients there are for each "
"``account_type``? We can use the ``filter`` argument of :ref:`aggregate "
"functions <aggregation-functions>` to achieve this:"
msgstr ""

msgid ""
"This aggregate produces a query with the SQL 2003 ``FILTER WHERE`` syntax on "
"databases that support it:"
msgstr ""
"在支持 SQL 2003 ``FILTER WHERE`` 语法的数据库上，这个聚合产生一个查询。"

msgid "On other databases, this is emulated using a ``CASE`` statement:"
msgstr "在其他数据库中，这是用 ``CASE`` 语句模拟的："

msgid ""
"The two SQL statements are functionally equivalent but the more explicit "
"``FILTER`` may perform better."
msgstr ""
"这两条 SQL 语句在功能上是等同的，但更明确的 ``FILTER`` 可能表现得更好。"

msgid "Conditional filter"
msgstr "条件过滤"

msgid ""
"When a conditional expression returns a boolean value, it is possible to use "
"it directly in filters. This means that it will not be added to the "
"``SELECT`` columns, but you can still use it to filter results:"
msgstr ""

msgid "In SQL terms, that evaluates to:"
msgstr "用 SQL 术语来说，它的值是："

msgid "Constraints reference"
msgstr "约束参考"

msgid ""
"The classes defined in this module create database constraints. They are "
"added in the model :attr:`Meta.constraints <django.db.models.Options."
"constraints>` option."
msgstr ""
"本模块中定义的类可以创建数据库约束。它们被添加到模型中 :attr:`Meta."
"constraints <django.db.models.Options.crabs>` 选项中。"

msgid "Referencing built-in constraints"
msgstr "引用内置约束"

msgid ""
"Constraints are defined in ``django.db.models.constraints``, but for "
"convenience they're imported into :mod:`django.db.models`. The standard "
"convention is to use ``from django.db import models`` and refer to the "
"constraints as ``models.<Foo>Constraint``."
msgstr ""
"约束是在 ``django.db.models.constraint`` 中定义的，但为了方便，它们被导入到 :"
"mod:`django.db.models` 中。标准的惯例是使用 ``from django.db import models`` "
"作为 ``models.<Foo>Constraint``。"

msgid "Constraints in abstract base classes"
msgstr "抽象基类中的约束"

msgid ""
"You must always specify a unique name for the constraint. As such, you "
"cannot normally specify a constraint on an abstract base class, since the :"
"attr:`Meta.constraints <django.db.models.Options.constraints>` option is "
"inherited by subclasses, with exactly the same values for the attributes "
"(including ``name``) each time. To work around name collisions, part of the "
"name may contain ``'%(app_label)s'`` and ``'%(class)s'``, which are "
"replaced, respectively, by the lowercased app label and class name of the "
"concrete model. For example ``CheckConstraint(check=Q(age__gte=18), "
"name='%(app_label)s_%(class)s_is_adult')``."
msgstr ""
"你必须始终为约束指定一个唯一的名称。因此，你通常不能在抽象基类上指定一个约"
"束，因为 :attr:`Meta.craces <django.db.models.Options.craces>` 选项是由子类继"
"承的，每次的属性值（包括 ``name``）都完全相同。为了解决名称碰撞的问题，名称的"
"一部分可能包含 ``'%(app_label)s'`` 和 ``'%(class)s'``，它们分别被具体模型的小"
"写应用标签和类名所代替。例如 ``CheckConstraint(check=Q(age__gte=18)，"
"name='%(app_label)s_%(class)s_is_adult')``。"

msgid "Validation of Constraints"
msgstr "约束的验证"

msgid ""
"Constraints are checked during the :ref:`model validation <validating-"
"objects>`."
msgstr ""

msgid "Validation of Constraints with ``JSONField``"
msgstr ""

msgid ""
"Constraints containing :class:`~django.db.models.JSONField` may not raise "
"validation errors as key, index, and path transforms have many database-"
"specific caveats. This :ticket:`may be fully supported later <34059>`."
msgstr ""

msgid ""
"You should always check that there are no log messages, in the ``django.db."
"models`` logger, like *\"Got a database error calling check() on …\"* to "
"confirm it's validated properly."
msgstr ""

msgid ""
"In older versions, constraints were not checked during model validation."
msgstr ""

msgid "``BaseConstraint``"
msgstr "``BaseConstraint``"

msgid ""
"Base class for all constraints. Subclasses must implement "
"``constraint_sql()``, ``create_sql()``, ``remove_sql()`` and ``validate()`` "
"methods."
msgstr ""

msgid "All constraints have the following parameters in common:"
msgstr ""

msgid ""
"The name of the constraint. You must always specify a unique name for the "
"constraint."
msgstr "约束的名称。你必须始终为约束指定一个唯一的名称。"

msgid ""
"The error message used when ``ValidationError`` is raised during :ref:`model "
"validation <validating-objects>`. Defaults to ``\"Constraint “%(name)s” is "
"violated.\"``."
msgstr ""

msgid "``validate()``"
msgstr "``validate()``"

msgid ""
"Validates that the constraint, defined on ``model``, is respected on the "
"``instance``. This will do a query on the database to ensure that the "
"constraint is respected. If fields in the ``exclude`` list are needed to "
"validate the constraint, the constraint is ignored."
msgstr ""

msgid "Raise a ``ValidationError`` if the constraint is violated."
msgstr ""

msgid "This method must be implemented by a subclass."
msgstr ""

msgid "``CheckConstraint``"
msgstr "``CheckConstraint``"

msgid "Creates a check constraint in the database."
msgstr "在数据库中创建一个检查约束"

msgid ""
"A :class:`Q` object or boolean :class:`~django.db.models.Expression` that "
"specifies the check you want the constraint to enforce."
msgstr ""
"一个 :class:`Q` 对象或布尔值 :class:`~django.db.models.Expression`，它指定了"
"你要强制约束的检查。"

msgid ""
"For example, ``CheckConstraint(check=Q(age__gte=18), name='age_gte_18')`` "
"ensures the age field is never less than 18."
msgstr ""
"例如，``CheckConstraint(check=Q(age__gte=18), name='age_gte_18')`` 确保年龄字"
"段永远不小于 18。"

msgid ""
"Checks with nullable fields on Oracle must include a condition allowing for "
"``NULL`` values in order for :meth:`validate() <BaseConstraint.validate>` to "
"behave the same as check constraints validation. For example, if ``age`` is "
"a nullable field::"
msgstr ""

msgid "The ``violation_error_message`` argument was added."
msgstr "添加了``violation_error_message`` 参数。"

msgid "``UniqueConstraint``"
msgstr "``UniqueConstraint``"

msgid "Creates a unique constraint in the database."
msgstr "在数据库中创建一个唯一约束。"

msgid ""
"Positional argument ``*expressions`` allows creating functional unique "
"constraints on expressions and database functions."
msgstr ""

msgid ""
"creates a unique constraint on the lowercased value of the ``name`` field in "
"descending order and the ``category`` field in the default ascending order."
msgstr ""

msgid ""
"Functional unique constraints have the same database restrictions as :attr:"
"`Index.expressions`."
msgstr ""

msgid ""
"A list of field names that specifies the unique set of columns you want the "
"constraint to enforce."
msgstr "一个字段名的列表，它指定了你要强制约束的唯一列集。"

msgid ""
"For example, ``UniqueConstraint(fields=['room', 'date'], "
"name='unique_booking')`` ensures each room can only be booked once for each "
"date."
msgstr ""
"例如，``UniqueConstraint(field=['room', 'date'], name='unique_booking')`` 确"
"保每个房间在每个日期只能被预订一次。"

msgid ""
"A :class:`Q` object that specifies the condition you want the constraint to "
"enforce."
msgstr "一个 :class:`Q` 对象，用于指定你想要强制执行的约束条件。"

msgid "ensures that each user only has one draft."
msgstr "确保每个用户只有一份草稿。"

msgid ""
"These conditions have the same database restrictions as :attr:`Index."
"condition`."
msgstr "这些条件与 :attr:`Index.condition` 具有相同的数据库限制。"

msgid ""
"Set this parameter to create a deferrable unique constraint. Accepted values "
"are ``Deferrable.DEFERRED`` or ``Deferrable.IMMEDIATE``. For example::"
msgstr ""
"设置该参数，可创建一个可推迟的唯一约束。接受的值是 ``Deferrable.DEFERRED`` "
"或 ``Deferrable.IMMEDIATE``。例如："

msgid "MySQL, MariaDB, and SQLite."
msgstr "MySQL，MariaDB 和 SQLite。"

msgid ""
"Deferrable unique constraints are ignored on MySQL, MariaDB, and SQLite as "
"neither supports them."
msgstr ""
"在 MySQL、MariaDB 和 SQLite 上，可推迟的唯一约束被忽略，因为它们都不支持。"

msgid ""
"Deferred unique constraints may lead to a `performance penalty <https://www."
"postgresql.org/docs/current/sql-createtable.html#id-1.9.3.85.9.4>`_."
msgstr ""
"推迟的唯一约束可能导致 `性能惩罚 <https://www.postgresql.org/docs/current/"
"sql-createtable.html#id-1.9.3.85.9.4>`_ 。"

msgid ""
"A list or tuple of the names of the fields to be included in the covering "
"unique index as non-key columns. This allows index-only scans to be used for "
"queries that select only included fields (:attr:`~UniqueConstraint.include`) "
"and filter only by unique fields (:attr:`~UniqueConstraint.fields`)."
msgstr ""
"一个包含在覆盖的唯一索引中的字段名称的列表或元组，作为非键列。这允许只用索引"
"扫描，用于只选择包含的字段（ :attr:`~UniqueConstraint.include` ）和只过滤唯一"
"字段（ :attr:`~UniqueConstraint.fields` ）的查询。"

msgid ""
"will allow filtering on ``room`` and ``date``, also selecting ``full_name``, "
"while fetching data only from the index."
msgstr ""
"将允许对 ``room`` 和 ``date`` 进行过滤，也可以选择 ``full_name``，同时只从索"
"引中获取数据。"

msgid "``include`` is supported only on PostgreSQL."
msgstr "``include`` 只在 PostgreSQL 上支持。"

msgid ""
"Non-key columns have the same database restrictions as :attr:`Index.include`."
msgstr ""

msgid ""
"The names of the `PostgreSQL operator classes <https://www.postgresql.org/"
"docs/current/indexes-opclass.html>`_ to use for this unique index. If you "
"require a custom operator class, you must provide one for each field in the "
"index."
msgstr ""

msgid "creates a unique index on ``username`` using ``varchar_pattern_ops``."
msgstr ""

msgid "``opclasses`` are ignored for databases besides PostgreSQL."
msgstr "``opclasses`` 对于 PostgreSQL 以外的数据库来说是被忽略的。"

msgid ""
"This message is *not used* for :class:`UniqueConstraint`\\s with :attr:"
"`~UniqueConstraint.fields` and without a :attr:`~UniqueConstraint."
"condition`. Such :class:`~UniqueConstraint`\\s show the same message as "
"constraints defined with :attr:`.Field.unique` or in :attr:`Meta."
"unique_together <django.db.models.Options.constraints>`."
msgstr ""

msgid "Database Functions"
msgstr "数据库函数"

msgid ""
"The classes documented below provide a way for users to use functions "
"provided by the underlying database as annotations, aggregations, or filters "
"in Django. Functions are also :doc:`expressions <expressions>`, so they can "
"be used and combined with other expressions like :ref:`aggregate functions "
"<aggregation-functions>`."
msgstr ""
"下面记录的类为用户提供了一种方法，可以在 Django 中使用底层数据库提供的函数作"
"为注解、聚合或过滤器。函数也是 :doc:`表达式 <expressions>`，所以它们可以和其"
"他表达式一起使用和组合，比如 :ref:`聚合函数 <aggregation-functions>`。"

msgid "We'll be using the following model in examples of each function::"
msgstr "我们将在每个函数的例子中使用以下模型："

msgid ""
"We don't usually recommend allowing ``null=True`` for ``CharField`` since "
"this allows the field to have two \"empty values\", but it's important for "
"the ``Coalesce`` example below."
msgstr ""
"我们通常不建议允许 ``null=True`` 为 ``CharField``，因为这允许字段有两个 "
"``Coalesce``，但它对下面的 ``Coalesce`` 例子很重要。"

msgid "Comparison and conversion functions"
msgstr "比较和转换函数"

msgid "``Cast``"
msgstr "``Cast``"

msgid ""
"Forces the result type of ``expression`` to be the one from ``output_field``."
msgstr "强制 ``expression`` 的结果类型为 ``output_field`` 的类型。"

msgid "``Coalesce``"
msgstr "``Coalesce``"

msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"first non-null value (note that an empty string is not considered a null "
"value). Each argument must be of a similar type, so mixing text and numbers "
"will result in a database error."
msgstr ""
"接受至少两个字段名或表达式的列表，并返回第一个非空值（注意，空字符串不被视为"
"空值）。每个参数必须是同样的类型，因此混合文本和数字将导致数据库错误。"

msgid "Usage examples:"
msgstr ""

msgid ""
"A Python value passed to ``Coalesce`` on MySQL may be converted to an "
"incorrect type unless explicitly cast to the correct database type:"
msgstr ""
"在 MySQL 上传递给 ``Coalesce`` 的 Python 值可能会被转换为不正确的类型，除非明"
"确地转换为正确的数据库类型："

msgid "``Collate``"
msgstr "``Collate``"

msgid "Takes an expression and a collation name to query against."
msgstr ""

msgid "For example, to filter case-insensitively in SQLite:"
msgstr ""

msgid "It can also be used when ordering, for example with PostgreSQL:"
msgstr ""

msgid "``Greatest``"
msgstr "``Greatest``"

msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"greatest value. Each argument must be of a similar type, so mixing text and "
"numbers will result in a database error."
msgstr ""
"接受至少两个字段名或表达式的列表，并返回最大的值。每个参数必须是同样的类型，"
"所以混合文本和数字会导致数据库错误。"

msgid ""
"``annotated_comment.last_updated`` will be the most recent of ``blog."
"modified`` and ``comment.modified``."
msgstr ""
"``annotated_comment.last_updated`` 将是 ``blog.modified`` 和 ``comment."
"modified`` 中最近的。"

msgid ""
"The behavior of ``Greatest`` when one or more expression may be ``null`` "
"varies between databases:"
msgstr ""
"当一个或多个表达式可能为 ``null`` 时，``Greatest`` 的行为在不同的数据库之间有"
"所不同。"

msgid ""
"PostgreSQL: ``Greatest`` will return the largest non-null expression, or "
"``null`` if all expressions are ``null``."
msgstr ""
"PostgreSQL：``Greatest`` 将返回最大的非空表达式，如果所有表达式都是 "
"``null``，则返回 ``null``。"

msgid ""
"SQLite, Oracle, and MySQL: If any expression is ``null``, ``Greatest`` will "
"return ``null``."
msgstr ""
"SQLite、Oracle 和 MySQL。如果任何表达式是 ``null``，``Greatest`` 将返回 "
"``null``。"

msgid ""
"The PostgreSQL behavior can be emulated using ``Coalesce`` if you know a "
"sensible minimum value to provide as a default."
msgstr ""
"如果你知道一个合理的最小值作为默认值，可以使用 ``Coalesce`` 来模拟 "
"PostgreSQL 的行为。"

msgid "``JSONObject``"
msgstr "``JSONObject``"

msgid ""
"Takes a list of key-value pairs and returns a JSON object containing those "
"pairs."
msgstr ""

msgid "``Least``"
msgstr "``Least``"

msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"least value. Each argument must be of a similar type, so mixing text and "
"numbers will result in a database error."
msgstr ""
"接受至少两个字段名或表达式的列表，并返回最小值。每个参数必须是同样的类型，因"
"此混合文本和数字将导致数据库错误。"

msgid ""
"The behavior of ``Least`` when one or more expression may be ``null`` varies "
"between databases:"
msgstr ""
"当一个或多个表达式可能是 ``null`` 时，``Least`` 的行为在不同的数据库之间有所"
"不同。"

msgid ""
"PostgreSQL: ``Least`` will return the smallest non-null expression, or "
"``null`` if all expressions are ``null``."
msgstr ""
"PostgreSQL：``Least`` 将返回最小的非空表达式，如果所有表达式都是 ``null``，则"
"返回 ``null``。"

msgid ""
"SQLite, Oracle, and MySQL: If any expression is ``null``, ``Least`` will "
"return ``null``."
msgstr ""
"SQLite、Oracle 和 MySQL。如果任何表达式是 ``null``，``Least`` 将返回 "
"``null``。"

msgid ""
"The PostgreSQL behavior can be emulated using ``Coalesce`` if you know a "
"sensible maximum value to provide as a default."
msgstr ""
"如果你知道一个合理的最大值作为默认值，可以使用` `Coalesce`` 来模拟 "
"PostgreSQL 的行为。"

msgid "``NullIf``"
msgstr "``NullIf``"

msgid ""
"Accepts two expressions and returns ``None`` if they are equal, otherwise "
"returns ``expression1``."
msgstr "接受两个表达式，如果相等则返回 ``None``，否则返回 ``expression1``。"

msgid "Caveats on Oracle"
msgstr "关于 Oracle 的注意事项"

msgid ""
"Due to an :ref:`Oracle convention<oracle-null-empty-strings>`, this function "
"returns the empty string instead of ``None`` when the expressions are of "
"type :class:`~django.db.models.CharField`."
msgstr ""
"由于 :ref:`Oracle 惯例 <oracle-null-empty-strings>`，当表达式为 :class:"
"`~django.db.models.CharField` 类型时，该函数返回空字符串而不是 ``None``。"

msgid ""
"Passing ``Value(None)`` to ``expression1`` is prohibited on Oracle since "
"Oracle doesn't accept ``NULL`` as the first argument."
msgstr ""
"在 Oracle 上禁止将 ``Value(None)`` 传递给 ``expression1``，因为 Oracle 不接"
"受 ``NULL`` 作为第一个参数。"

msgid "Date functions"
msgstr "日期函数"

msgid "``Extract``"
msgstr "``Extract``"

msgid "Extracts a component of a date as a number."
msgstr "提取日期的一个组成部分作为一个数字。"

msgid ""
"Takes an ``expression`` representing a ``DateField``, ``DateTimeField``, "
"``TimeField``, or ``DurationField`` and a ``lookup_name``, and returns the "
"part of the date referenced by ``lookup_name`` as an ``IntegerField``. "
"Django usually uses the databases' extract function, so you may use any "
"``lookup_name`` that your database supports. A ``tzinfo`` subclass, usually "
"provided by :mod:`zoneinfo`, can be passed to extract a value in a specific "
"timezone."
msgstr ""

msgid ""
"Given the datetime ``2015-06-15 23:30:01.000321+00:00``, the built-in "
"``lookup_name``\\s return:"
msgstr ""
"给定日期时间 ``2015-06-15 23:30:01.000321+00:00``，内置的 ``lookup_name`` 返"
"回。"

msgid "\"year\": 2015"
msgstr "\"year\": 2015"

msgid "\"iso_year\": 2015"
msgstr "\"iso_year\": 2015"

msgid "\"quarter\": 2"
msgstr "\"quarter\": 2"

msgid "\"month\": 6"
msgstr "\"month\": 6"

msgid "\"day\": 15"
msgstr "\"day\": 15"

msgid "\"week\": 25"
msgstr "\"week\": 25"

msgid "\"week_day\": 2"
msgstr "\"week_day\": 2"

msgid "\"iso_week_day\": 1"
msgstr "\"iso_week_day\": 1"

msgid "\"hour\": 23"
msgstr "\"hour\": 23"

msgid "\"minute\": 30"
msgstr "\"minute\": 30"

msgid "\"second\": 1"
msgstr "\"second\": 1"

msgid ""
"If a different timezone like ``Australia/Melbourne`` is active in Django, "
"then the datetime is converted to the timezone before the value is "
"extracted. The timezone offset for Melbourne in the example date above is "
"+10:00. The values returned when this timezone is active will be the same as "
"above except for:"
msgstr ""
"如果在 Django 中使用了不同的时区，比如 ``Australia/Melbourne`` ，那么在提取值"
"之前，日期时间会被转换为该时区。在上面的例子中，墨尔本的时区偏移是 +10:00。当"
"这个时区被激活时，返回的值将与上述相同，除了："

msgid "\"day\": 16"
msgstr "\"day\": 16"

msgid "\"week_day\": 3"
msgstr "\"week_day\": 3"

msgid "\"iso_week_day\": 2"
msgstr "\"iso_week_day\": 2"

msgid "\"hour\": 9"
msgstr "\"hour\": 9"

msgid "``week_day`` values"
msgstr "``week_day`` 值"

msgid ""
"The ``week_day`` ``lookup_type`` is calculated differently from most "
"databases and from Python's standard functions. This function will return "
"``1`` for Sunday, ``2`` for Monday, through ``7`` for Saturday."
msgstr ""
"``week_day`` ``lookup_type`` 的计算方式与大多数数据库和 Python 的标准函数不"
"同。这个函数将返回星期日的 ``1``，星期一的 ``2``，到星期六的 ``7``。"

msgid "The equivalent calculation in Python is:"
msgstr ""

msgid "``week`` values"
msgstr "``week`` 值"

msgid ""
"The ``week`` ``lookup_type`` is calculated based on `ISO-8601 <https://en."
"wikipedia.org/wiki/ISO-8601>`_, i.e., a week starts on a Monday. The first "
"week of a year is the one that contains the year's first Thursday, i.e. the "
"first week has the majority (four or more) of its days in the year. The "
"value returned is in the range 1 to 52 or 53."
msgstr ""
" 一年中的第一周是指包含一年中第一个星期四的一周，即第一周的天数占全年的大部分"
"（4 天或以上）。返回值的范围是 1-52 或 53。"

msgid ""
"Each ``lookup_name`` above has a corresponding ``Extract`` subclass (listed "
"below) that should typically be used instead of the more verbose equivalent, "
"e.g. use ``ExtractYear(...)`` rather than ``Extract(..., "
"lookup_name='year')``."
msgstr ""
"上面的每个 ``lookup_name`` 都有一个相应的 ``Extract`` 子类（下面列出的），通"
"常应该用这个子类来代替比较啰嗦的等价物，例如，使用 ``ExtractYear(...)`` 而不"
"是 ``Extract(...，lookup_name='year')``。"

msgid "``DateField`` extracts"
msgstr "``DateField`` 提取"

msgid "Returns the ISO-8601 week-numbering year."
msgstr "返回 ISO-8601 的周号年份。"

msgid ""
"Returns the ISO-8601 week day with day 1 being Monday and day 7 being Sunday."
msgstr "返回 ISO-8601 的星期日，第 1 天是星期一，第 7 天是星期天。"

msgid ""
"These are logically equivalent to ``Extract('date_field', lookup_name)``. "
"Each class is also a ``Transform`` registered on ``DateField`` and "
"``DateTimeField`` as ``__(lookup_name)``, e.g. ``__year``."
msgstr ""
"这些类在逻辑上等同于 ``Extract('date_field', lookup_name)``。每个类也是一个 "
"``Transform`` 在 ``DateField`` 和 ``DateTimeField`` 上注册为 "
"``__(lookup_name)```，例如 ``__year``。"

msgid ""
"Since ``DateField``\\s don't have a time component, only ``Extract`` "
"subclasses that deal with date-parts can be used with ``DateField``:"
msgstr ""

msgid "``DateTimeField`` extracts"
msgstr "``DateTimeField`` 提取"

msgid ""
"In addition to the following, all extracts for ``DateField`` listed above "
"may also be used on ``DateTimeField``\\s ."
msgstr ""
"除以下内容外，上述 ``DateField`` 的所有提取物也可用于``DateTimeField``。"

msgid ""
"These are logically equivalent to ``Extract('datetime_field', "
"lookup_name)``. Each class is also a ``Transform`` registered on "
"``DateTimeField`` as ``__(lookup_name)``, e.g. ``__minute``."
msgstr ""
"这些类在逻辑上等同于 ``Extract('datetime_field', lookup_name)``。每个类也是一"
"个 ``Transform`` 在 ``DateTimeField`` 上注册为 ``__(lookup_name)``，例如 "
"``__minute``。"

msgid "``DateTimeField`` examples:"
msgstr ""

msgid ""
"When :setting:`USE_TZ` is ``True`` then datetimes are stored in the database "
"in UTC. If a different timezone is active in Django, the datetime is "
"converted to that timezone before the value is extracted. The example below "
"converts to the Melbourne timezone (UTC +10:00), which changes the day, "
"weekday, and hour values that are returned:"
msgstr ""

msgid ""
"Explicitly passing the timezone to the ``Extract`` function behaves in the "
"same way, and takes priority over an active timezone:"
msgstr ""

msgid "``Now``"
msgstr "``Now``"

msgid ""
"Returns the database server's current date and time when the query is "
"executed, typically using the SQL ``CURRENT_TIMESTAMP``."
msgstr ""
"返回数据库服务器执行查询时的当前日期和时间，通常使用 SQL "
"``CURRENT_TIMESTAMP``。"

msgid "PostgreSQL considerations"
msgstr "PostgreSQL 的注意事项"

msgid ""
"On PostgreSQL, the SQL ``CURRENT_TIMESTAMP`` returns the time that the "
"current transaction started. Therefore for cross-database compatibility, "
"``Now()`` uses ``STATEMENT_TIMESTAMP`` instead. If you need the transaction "
"timestamp, use :class:`django.contrib.postgres.functions.TransactionNow`."
msgstr ""
"在 PostgreSQL 中，SQL ``CURRENT_TIMESTAMP`` 返回的是当前事务开始的时间，因此"
"为了跨数据库的兼容性，``Now()`` 使用 ``STATEMENT_TIMESTAMP`` 代替。因此为了跨"
"数据库的兼容性，``Now()`` 使用 ``STATEMENT_TIMESTAMP`` 代替。如果需要事务时间"
"戳，可以使用 :class:`django.contrib.postgres.function.TransactionNow`。"

msgid ""
"Support for microsecond precision on MySQL and millisecond precision on "
"SQLite were added."
msgstr ""

msgid "``Trunc``"
msgstr "``Trunc``"

msgid "Truncates a date up to a significant component."
msgstr "将一个日期截断到一个重要的部分。"

msgid ""
"When you only care if something happened in a particular year, hour, or day, "
"but not the exact second, then ``Trunc`` (and its subclasses) can be useful "
"to filter or aggregate your data. For example, you can use ``Trunc`` to "
"calculate the number of sales per day."
msgstr ""
"当你只关心某事是否发生在某年、某小时或某天，而不关心确切的秒数时，那么 "
"``Trunc`` （及其子类）可以用来过滤或汇总你的数据。例如，你可以使用 ``Trunc`` "
"来计算每天的销售数量。"

msgid ""
"``Trunc`` takes a single ``expression``, representing a ``DateField``, "
"``TimeField``, or ``DateTimeField``, a ``kind`` representing a date or time "
"part, and an ``output_field`` that's either ``DateTimeField()``, "
"``TimeField()``, or ``DateField()``. It returns a datetime, date, or time "
"depending on ``output_field``, with fields up to ``kind`` set to their "
"minimum value. If ``output_field`` is omitted, it will default to the "
"``output_field`` of ``expression``. A ``tzinfo`` subclass, usually provided "
"by :mod:`zoneinfo`, can be passed to truncate a value in a specific timezone."
msgstr ""

msgid ""
"The ``is_dst`` parameter indicates whether or not ``pytz`` should interpret "
"nonexistent and ambiguous datetimes in daylight saving time. By default "
"(when ``is_dst=None``), ``pytz`` raises an exception for such datetimes."
msgstr ""
"``is_dst`` 参数表示 ``pytz`` 是否应该解释夏令时中不存在的和模糊的日期。默认情"
"况下（当 ``is_dst=None``），``pytz`` 会对这种日期时间产生异常。"

msgid ""
"The ``is_dst`` parameter is deprecated and will be removed in Django 5.0."
msgstr "``is_dst`` 参数已被废弃，将在 Django 5.0 中删除。"

msgid ""
"Given the datetime ``2015-06-15 14:30:50.000321+00:00``, the built-in "
"``kind``\\s return:"
msgstr ""
"给定日期时间 ``2015-06-15 14:30:50.000321+00:00``，内置 ``kind`` 返回："

msgid "\"year\": 2015-01-01 00:00:00+00:00"
msgstr "\"year\": 2015-01-01 00:00:00+00:00"

msgid "\"quarter\": 2015-04-01 00:00:00+00:00"
msgstr "\"quarter\": 2015-04-01 00:00:00+00:00"

msgid "\"month\": 2015-06-01 00:00:00+00:00"
msgstr "\"month\": 2015-06-01 00:00:00+00:00"

msgid "\"week\": 2015-06-15 00:00:00+00:00"
msgstr "\"week\": 2015-06-15 00:00:00+00:00"

msgid "\"day\": 2015-06-15 00:00:00+00:00"
msgstr "\"day\": 2015-06-15 00:00:00+00:00"

msgid "\"hour\": 2015-06-15 14:00:00+00:00"
msgstr "\"hour\": 2015-06-15 14:00:00+00:00"

msgid "\"minute\": 2015-06-15 14:30:00+00:00"
msgstr "\"minute\": 2015-06-15 14:30:00+00:00"

msgid "\"second\": 2015-06-15 14:30:50+00:00"
msgstr "\"second\": 2015-06-15 14:30:50+00:00"

msgid ""
"If a different timezone like ``Australia/Melbourne`` is active in Django, "
"then the datetime is converted to the new timezone before the value is "
"truncated. The timezone offset for Melbourne in the example date above is "
"+10:00. The values returned when this timezone is active will be:"
msgstr ""
"如果在 Django 中使用了不同的时区，比如 ``Australia/Melbourne``，那么日期时间"
"会在被截断之前转换为新的时区。在上面的例子中，墨尔本的时区偏移是 +10:00。当这"
"个时区被激活时，返回的值将是："

msgid "\"year\": 2015-01-01 00:00:00+11:00"
msgstr "\"year\": 2015-01-01 00:00:00+11:00"

msgid "\"quarter\": 2015-04-01 00:00:00+10:00"
msgstr "\"quarter\": 2015-04-01 00:00:00+10:00"

msgid "\"month\": 2015-06-01 00:00:00+10:00"
msgstr "\"month\": 2015-06-01 00:00:00+10:00"

msgid "\"week\": 2015-06-16 00:00:00+10:00"
msgstr "\"week\": 2015-06-16 00:00:00+10:00"

msgid "\"day\": 2015-06-16 00:00:00+10:00"
msgstr "\"day\": 2015-06-16 00:00:00+10:00"

msgid "\"hour\": 2015-06-16 00:00:00+10:00"
msgstr "\"hour\": 2015-06-16 00:00:00+10:00"

msgid "\"minute\": 2015-06-16 00:30:00+10:00"
msgstr "\"minute\": 2015-06-16 00:30:00+10:00"

msgid "\"second\": 2015-06-16 00:30:50+10:00"
msgstr "\"second\": 2015-06-16 00:30:50+10:00"

msgid ""
"The year has an offset of +11:00 because the result transitioned into "
"daylight saving time."
msgstr "年的偏移量为 +11:00，因为结果过渡到夏令时。"

msgid ""
"Each ``kind`` above has a corresponding ``Trunc`` subclass (listed below) "
"that should typically be used instead of the more verbose equivalent, e.g. "
"use ``TruncYear(...)`` rather than ``Trunc(..., kind='year')``."
msgstr ""
"以上每个 ``kind`` 都有一个对应的 ``Trunc`` 子类（下面列出的），通常应该用这个"
"子类来代替比较啰嗦的等价物，例如使用 ``TruncYear(...)`` 而不是 ``Trunc(...，"
"kind='year')``。"

msgid ""
"The subclasses are all defined as transforms, but they aren't registered "
"with any fields, because the lookup names are already reserved by the "
"``Extract`` subclasses."
msgstr ""
"子类都被定义为变换，但它们没有注册任何字段，因为查找名称已经被 ``Extract`` 子"
"类保留。"

msgid "``DateField`` truncation"
msgstr "``DateField`` 截断"

msgid "Truncates to midnight on the Monday of the week."
msgstr "截断到每周一的午夜。"

msgid ""
"These are logically equivalent to ``Trunc('date_field', kind)``. They "
"truncate all parts of the date up to ``kind`` which allows grouping or "
"filtering dates with less precision. ``expression`` can have an "
"``output_field`` of either ``DateField`` or ``DateTimeField``."
msgstr ""
"这些在逻辑上等同于 ``Trunc('date_field', kind)``。它们截断日期的所有部分，直"
"至 ``kind``，允许以较低的精度对日期进行分组或过滤。``expression`` 可以有一个 "
"``output_field`` 的 ``DateField`` 或 ``DateTimeField``。"

msgid ""
"Since ``DateField``\\s don't have a time component, only ``Trunc`` "
"subclasses that deal with date-parts can be used with ``DateField``:"
msgstr ""

msgid "``DateTimeField`` truncation"
msgstr "``DateTimeField`` 截断"

msgid ""
"``TruncDate`` casts ``expression`` to a date rather than using the built-in "
"SQL truncate function. It's also registered as a transform on  "
"``DateTimeField`` as ``__date``."
msgstr ""
"``TruncDate`` 将 ``expression`` 投射到一个日期，而不是使用内置的 SQL "
"truncate 函数。在 ``DateTimeField`` 上，它也被注册为 ``__date`` 的转换。"

msgid ""
"``TruncTime`` casts ``expression`` to a time rather than using the built-in "
"SQL truncate function. It's also registered as a transform on "
"``DateTimeField`` as ``__time``."
msgstr ""
"``TruncTime`` 将 ``expression`` 投射到一个时间，而不是使用内置的 SQL "
"truncate 函数。在 ``DateTimeField`` 上，它也被注册为 ``__time`` 的转换。"

msgid ""
"These are logically equivalent to ``Trunc('datetime_field', kind)``. They "
"truncate all parts of the date up to ``kind`` and allow grouping or "
"filtering datetimes with less precision. ``expression`` must have an "
"``output_field`` of ``DateTimeField``."
msgstr ""
"这些在逻辑上等同于 ``Trunc('datetime_field', kind)``。它们截断日期的所有部"
"分，直至 ``kind``，并允许以较低的精度对日期时间进行分组或过滤。"
"``expression`` 必须有一个 ``output_field`` 的 ``DateTimeField``。"

msgid "``TimeField`` truncation"
msgstr "``TimeField`` 截断"

msgid ""
"These are logically equivalent to ``Trunc('time_field', kind)``. They "
"truncate all parts of the time up to ``kind`` which allows grouping or "
"filtering times with less precision. ``expression`` can have an "
"``output_field`` of either ``TimeField`` or ``DateTimeField``."
msgstr ""
"这些在逻辑上等同于 ``Trunc('time_field', kind)``。它们截断时间的所有部分，直"
"至 ``kind``，这就允许以较低的精度对时间进行分组或过滤。``expression`` 可以有"
"一个 ``output_field`` 的 ``TimeField`` 或 ``DateTimeField``。"

msgid ""
"Since ``TimeField``\\s don't have a date component, only ``Trunc`` "
"subclasses that deal with time-parts can be used with ``TimeField``:"
msgstr ""

msgid "Math Functions"
msgstr "数学函数"

msgid "We'll be using the following model in math function examples::"
msgstr "我们将在数学函数实例中使用以下模型："

msgid "``Abs``"
msgstr "``Abs``"

msgid "Returns the absolute value of a numeric field or expression."
msgstr "返回一个数值字段或表达式的绝对值。"

msgid "It can also be registered as a transform. For example:"
msgstr ""

msgid "``ACos``"
msgstr "``ACos``"

msgid ""
"Returns the arccosine of a numeric field or expression. The expression value "
"must be within the range -1 to 1."
msgstr "返回一个数值字段或表达式的余弦值。表达式的值必须在 -1 到 1 的范围内。"

msgid "``ASin``"
msgstr "``ASin``"

msgid ""
"Returns the arcsine of a numeric field or expression. The expression value "
"must be in the range -1 to 1."
msgstr "返回一个数值字段或表达式的正弦值。表达式的值必须在 -1 到 1 的范围内。"

msgid "``ATan``"
msgstr "``ATan``"

msgid "Returns the arctangent of a numeric field or expression."
msgstr "返回一个数值字段或表达式的正切值。"

msgid "``ATan2``"
msgstr "``ATan2``"

msgid "Returns the arctangent of ``expression1 / expression2``."
msgstr "返回 ``expression1 / expression2`` 的正切值。"

msgid "``Ceil``"
msgstr "``Ceil``"

msgid ""
"Returns the smallest integer greater than or equal to a numeric field or "
"expression."
msgstr "返回大于或等于一个数值字段或表达式的最小整数。"

msgid "``Cos``"
msgstr "``Cos``"

msgid "Returns the cosine  of a numeric field or expression."
msgstr "返回一个数值字段或表达式的余弦值。"

msgid "``Cot``"
msgstr "``Cot``"

msgid "Returns the cotangent of a numeric field or expression."
msgstr "返回数值字段或表达式的正切值。"

msgid "``Degrees``"
msgstr "``Degrees``"

msgid "Converts a numeric field or expression from radians to degrees."
msgstr "将数值字段或表达式从弧度转换为度。"

msgid "``Exp``"
msgstr "``Exp``"

msgid ""
"Returns the value of ``e`` (the natural logarithm base) raised to the power "
"of a numeric field or expression."
msgstr "返回 ``e`` （自然对数基数）的值，将其升为一个数值字段或表达式的幂。"

msgid "``Floor``"
msgstr "``Floor``"

msgid ""
"Returns the largest integer value not greater than a numeric field or "
"expression."
msgstr "返回不大于数值字段或表达式的最大整数值。"

msgid "``Ln``"
msgstr "``Ln``"

msgid "Returns the natural logarithm a numeric field or expression."
msgstr "返回一个数值字段或表达式的自然对数。"

msgid "``Log``"
msgstr "``Log``"

msgid ""
"Accepts two numeric fields or expressions and returns the logarithm of the "
"second to base of the first."
msgstr ""

msgid "``Mod``"
msgstr "``Mod``"

msgid ""
"Accepts two numeric fields or expressions and returns the remainder of the "
"first divided by the second (modulo operation)."
msgstr ""
"接受两个数值字段或表达式，并返回第一个字段除以第二个字段的余数（模数运算）。"

msgid "``Pi``"
msgstr "``Pi``"

msgid "Returns the value of the mathematical constant ``π``."
msgstr "返回数学常数 ``π`` 的值。"

msgid "``Power``"
msgstr "``Power``"

msgid ""
"Accepts two numeric fields or expressions and returns the value of the first "
"raised to the power of the second."
msgstr "接受两个数值字段或表达式，并将第一个字段的值提高到第二个字段的幂。"

msgid "``Radians``"
msgstr "``Radians``"

msgid "Converts a numeric field or expression from degrees to radians."
msgstr "将数值字段或表达式从度数转换为弧度。"

msgid "``Random``"
msgstr "``Random``"

msgid "Returns a random value in the range ``0.0 ≤ x < 1.0``."
msgstr "返回 ``0.0 ≤ x < 1.0`` 范围内的随机值。"

msgid "``Round``"
msgstr "``Round``"

msgid ""
"Rounds a numeric field or expression to ``precision`` (must be an integer) "
"decimal places. By default, it rounds to the nearest integer. Whether half "
"values are rounded up or down depends on the database."
msgstr ""

msgid "``Sign``"
msgstr "``Sign``"

msgid "Returns the sign (-1, 0, 1) of a numeric field or expression."
msgstr "返回一个数字字段或表达式的符号（-1，0，1）。"

msgid "``Sin``"
msgstr "``Sin``"

msgid "Returns the sine of a numeric field or expression."
msgstr "返回一个数值字段或表达式的正弦值。"

msgid "``Sqrt``"
msgstr "``Sqrt``"

msgid "Returns the square root of a nonnegative numeric field or expression."
msgstr "返回一个非负数值字段或表达式的平方根。"

msgid "``Tan``"
msgstr "``Tan``"

msgid "Returns the tangent of a numeric field or expression."
msgstr "返回一个数值字段或表达式的正切值。"

msgid "Text functions"
msgstr "文本函数"

msgid "``Chr``"
msgstr "``Chr``"

msgid ""
"Accepts a numeric field or expression and returns the text representation of "
"the expression as a single character. It works the same as Python's :func:"
"`chr` function."
msgstr ""
"接受一个数值字段或表达式，并将表达式的文本表示形式作为单个字符返回。它的工作"
"原理与 Python 的 :func:`chr` 函数相同。"

msgid ""
"Like :class:`Length`, it can be registered as a transform on "
"``IntegerField``. The default lookup name is ``chr``."
msgstr ""
"和 :class:`Length` 一样，它也可以在 ``IntegerField`` 上作为变换注册。默认的查"
"询名是 ``chr``。"

msgid "``Concat``"
msgstr "``Concat``"

msgid ""
"Accepts a list of at least two text fields or expressions and returns the "
"concatenated text. Each argument must be of a text or char type. If you want "
"to concatenate a ``TextField()`` with a ``CharField()``, then be sure to "
"tell Django that the ``output_field`` should be a ``TextField()``. "
"Specifying an ``output_field`` is also required when concatenating a "
"``Value`` as in the example below."
msgstr ""
"接受至少两个文本字段或表达式的列表，并返回连接后的文本。每个参数必须是文本或"
"字符类型。如果你想把一个 ``TextField()`` 和一个 ``CharField()`` 连接起来，那"
"么一定要告诉 Django，``output_field`` 应该是一个 ``TextField()``。当连接一个 "
"``Value`` 时，也需要指定一个 ``output_field``，如下面的例子。"

msgid ""
"This function will never have a null result. On backends where a null "
"argument results in the entire expression being null, Django will ensure "
"that each null part is converted to an empty string first."
msgstr ""
"这个函数永远不会有一个空的结果。在后端，如果一个空参数导致整个表达式为空，"
"Django 会确保每个空的部分先转换成空字符串。"

msgid "``Left``"
msgstr "``Left``"

msgid ""
"Returns the first ``length`` characters of the given text field or "
"expression."
msgstr "返回给定文本字段或表达式的第一个 ``length`` 字符。"

msgid ""
"Accepts a single text field or expression and returns the number of "
"characters the value has. If the expression is null, then the length will "
"also be null."
msgstr ""
"接受单个文本字段或表达式，并返回值的字符数。如果表达式为空，则长度也为空。"

msgid "``Lower``"
msgstr "``Lower``"

msgid ""
"Accepts a single text field or expression and returns the lowercase "
"representation."
msgstr "接受单个文本字段或表达式，并返回小写表示。"

msgid ""
"It can also be registered as a transform as described in :class:`Length`."
msgstr "它也可以像 :class:`Length` 中描述的那样，作为一个变换注册。"

msgid "``LPad``"
msgstr "``LPad``"

msgid ""
"Returns the value of the given text field or expression padded on the left "
"side with ``fill_text`` so that the resulting value is ``length`` characters "
"long. The default ``fill_text`` is a space."
msgstr ""
"返回给定的文本字段或表达式的值，在左侧用 ``fill_text`` 填充，使结果是 "
"``length`` 字符长。默认的 ``fill_text`` 是一个空格。"

msgid "``LTrim``"
msgstr "``LTrim``"

msgid ""
"Similar to :class:`~django.db.models.functions.Trim`, but removes only "
"leading spaces."
msgstr "类似于 :class:`~django.db.models.function.Trim`，但只删除前导空格。"

msgid "``MD5``"
msgstr "``MD5``"

msgid ""
"Accepts a single text field or expression and returns the MD5 hash of the "
"string."
msgstr "接受单个文本字段或表达式，并返回字符串的 MD5 哈希值。"

msgid "``Ord``"
msgstr "``Ord``"

msgid ""
"Accepts a single text field or expression and returns the Unicode code point "
"value for the first character of that expression. It works similar to "
"Python's :func:`ord` function, but an exception isn't raised if the "
"expression is more than one character long."
msgstr ""
"接受一个文本字段或表达式，并返回该表达式第一个字符的 Unicode 码点值。它的工作"
"原理类似于 Python 的 :func:`ord` 函数，但如果表达式超过一个字符，则不会引发异"
"常。"

msgid ""
"It can also be registered as a transform as described in :class:`Length`. "
"The default lookup name is ``ord``."
msgstr ""
"也可以像 :class:`Length` 中描述的那样，把它注册为一个变换。默认的查找名称是 "
"``ord``。"

msgid "``Repeat``"
msgstr "``Repeat``"

msgid ""
"Returns the value of the given text field or expression repeated ``number`` "
"times."
msgstr "返回给定文本字段或表达式重复 ``number`` 次数的值。"

msgid "``Replace``"
msgstr "``Replace``"

msgid ""
"Replaces all occurrences of ``text`` with ``replacement`` in ``expression``. "
"The default replacement text is the empty string. The arguments to the "
"function are case-sensitive."
msgstr ""
"在 ``expression`` 中用 ``replacement`` 替换所有出现的 ``text``。默认替换文本"
"是空字符串。函数的参数是区分大小写的。"

msgid ""
"Accepts a single text field or expression and returns the characters of that "
"expression in reverse order."
msgstr "接受单个文本字段或表达式，并将该表达式的字符按相反顺序返回。"

msgid ""
"It can also be registered as a transform as described in :class:`Length`. "
"The default lookup name is ``reverse``."
msgstr ""
"也可以像 :class:`Length` 中描述的那样，把它注册为一个变换。默认的查询名称是 "
"``reverse``。"

msgid "``Right``"
msgstr "``Right``"

msgid ""
"Returns the last ``length`` characters of the given text field or expression."
msgstr "返回给定文本字段或表达式的最后 ``length`` 字符。"

msgid "``RPad``"
msgstr "``RPad``"

msgid ""
"Similar to :class:`~django.db.models.functions.LPad`, but pads on the right "
"side."
msgstr "类似于 :class:`~django.db.models.function.LPad`，但垫在右边。"

msgid "``RTrim``"
msgstr "``RTrim``"

msgid ""
"Similar to :class:`~django.db.models.functions.Trim`, but removes only "
"trailing spaces."
msgstr "类似于 :class:`~django.db.models.function.Trim`，但只删除尾部的空格。"

msgid "``SHA1``, ``SHA224``, ``SHA256``, ``SHA384``, and ``SHA512``"
msgstr "``SHA1``、`SHA224``、`SHA256``、`SHA384`` 和 ``SHA512``。"

msgid ""
"Accepts a single text field or expression and returns the particular hash of "
"the string."
msgstr "接受单个文本字段或表达式，并返回字符串的特定哈希值。"

msgid ""
"They can also be registered as transforms as described in :class:`Length`."
msgstr "它们也可以像 :class:`Length` 中描述的那样注册为变换。"

msgid ""
"The `pgcrypto extension <https://www.postgresql.org/docs/current/ pgcrypto."
"html>`_ must be installed. You can use the :class:`~django.contrib.postgres."
"operations.CryptoExtension` migration operation to install it."
msgstr ""
"必须安装 `pgcrypto 扩展 <https://www.postgresql.org/docs/current/ pgcrypto."
"html>`_ 。你可以使用 :class:`~django.contrib.postgres.operations."
"CryptoExtension` 迁移操作来安装它。"

msgid "Oracle doesn't support the ``SHA224`` function."
msgstr "Oracle 不支持 ``SHA224`` 函数。"

msgid "``StrIndex``"
msgstr "``StrIndex``"

msgid ""
"Returns a positive integer corresponding to the 1-indexed position of the "
"first occurrence of ``substring`` inside ``string``, or 0 if ``substring`` "
"is not found."
msgstr ""
"返回一个正整数，对应于 ``string`` 中第一次出现的 ``substring`` 的 1 个索引位"
"置，如果没有找到 ``substring``，则返回 0。"

msgid ""
"In MySQL, a database table's :ref:`collation<mysql-collation>` determines "
"whether string comparisons (such as the ``expression`` and ``substring`` of "
"this function) are case-sensitive. Comparisons are case-insensitive by "
"default."
msgstr ""
"在 MySQL 中，数据库表的 :ref:`字符序 <mysql-collation>` 决定了字符串比较（如"
"本函数的 ``expression`` 和 ``substring``）是否区分大小写。默认情况下，比较是"
"不区分大小写的。"

msgid "``Substr``"
msgstr "``Substr``"

msgid ""
"Returns a substring of length ``length`` from the field or expression "
"starting at position ``pos``. The position is 1-indexed, so the position "
"must be greater than 0. If ``length`` is ``None``, then the rest of the "
"string will be returned."
msgstr ""
"从字段或表达式的位置 ``pos`` 开始返回一个长度为 ``length`` 的子串。如果 "
"``length`` 是 ``None``，那么将返回字符串的其余部分。"

msgid "``Trim``"
msgstr "``Trim``"

msgid ""
"Returns the value of the given text field or expression with leading and "
"trailing spaces removed."
msgstr "返回给定的文本字段或表达式的值，并去除前导和尾部的空格。"

msgid "``Upper``"
msgstr "``Upper``"

msgid ""
"Accepts a single text field or expression and returns the uppercase "
"representation."
msgstr "接受单个文本字段或表达式，并返回大写表示。"

msgid "Window functions"
msgstr "窗口函数"

msgid ""
"There are a number of functions to use in a :class:`~django.db.models."
"expressions.Window` expression for computing the rank of elements or the :"
"class:`Ntile` of some rows."
msgstr ""
"在 :class:`~django.db.models.expressions.Window` 表达式中，有很多函数可以用来"
"计算元素的等级或某些行的 :class:`Ntile`。"

msgid "``CumeDist``"
msgstr "``CumeDist``"

msgid ""
"Calculates the cumulative distribution of a value within a window or "
"partition. The cumulative distribution is defined as the number of rows "
"preceding or peered with the current row divided by the total number of rows "
"in the frame."
msgstr ""
"计算一个窗口或分区内的数值的累积分布。累计分布被定义为当前行之前的行数或同行"
"行数除以框架中的总行数。"

msgid "``DenseRank``"
msgstr "``DenseRank``"

msgid "Equivalent to :class:`Rank` but does not have gaps."
msgstr "相当于 :class:`Rank`，但没有间隙。"

msgid "``FirstValue``"
msgstr "``FirstValue``"

msgid ""
"Returns the value evaluated at the row that's the first row of the window "
"frame, or ``None`` if no such value exists."
msgstr "返回窗口帧第一行的值，如果没有这个值，则返回 ``None``。"

msgid "``Lag``"
msgstr "``Lag``"

msgid ""
"Calculates the value offset by ``offset``, and if no row exists there, "
"returns ``default``."
msgstr "计算 ``offset`` 的偏移值，如果没有行存在，返回 ``default``。"

msgid ""
"``default`` must have the same type as the ``expression``, however, this is "
"only validated by the database and not in Python."
msgstr ""
"``default`` 必须与 ``expression`` 具有相同的类型，但是，这只由数据库验证，而"
"不是在 Python 中验证。"

msgid "MariaDB and ``default``"
msgstr "MariaDB 和 ``default``"

msgid ""
"MariaDB `doesn't support <https://jira.mariadb.org/browse/MDEV-12981>`_ the "
"``default`` parameter."
msgstr ""
"MariaDB `不支持 <https://jira.mariadb.org/browse/MDEV-12981>`_ 这个 "
"``default`` 参数。"

msgid "``LastValue``"
msgstr "``LastValue``"

msgid ""
"Comparable to :class:`FirstValue`, it calculates the last value in a given "
"frame clause."
msgstr "类似于 :class:`FirstValue`，它计算给定框架子句中的最后一个值。"

msgid "``Lead``"
msgstr "``Lead``"

msgid ""
"Calculates the leading value in a given :ref:`frame <window-frames>`. Both "
"``offset`` and ``default`` are evaluated with respect to the current row."
msgstr ""
"计算给定 :ref:`frame <window-frames>` 中的前导值。``offset`` 和 ``default`` "
"都是根据当前行的情况来计算的。"

msgid "``NthValue``"
msgstr "``NthValue``"

msgid ""
"Computes the row relative to the offset ``nth`` (must be a positive value) "
"within the window. Returns ``None`` if no row exists."
msgstr ""
"计算相对于窗口内偏移量 ``nth`` （必须是正值）的行。如果没有行，返回 "
"``None``。"

msgid ""
"Some databases may handle a nonexistent nth-value differently. For example, "
"Oracle returns an empty string rather than ``None`` for character-based "
"expressions. Django doesn't do any conversions in these cases."
msgstr ""
"一些数据库可能会以不同的方式处理不存在的 nth-value，例如，对于基于字符的表达"
"式，Oracle 会返回一个空字符串，而不是 ``None``。在这些情况下，Django 不做任何"
"转换。"

msgid "``Ntile``"
msgstr "``Ntile``"

msgid ""
"Calculates a partition for each of the rows in the frame clause, "
"distributing numbers as evenly as possible between 1 and ``num_buckets``. If "
"the rows don't divide evenly into a number of buckets, one or more buckets "
"will be represented more frequently."
msgstr ""
"为帧子句中的每一行计算一个分区，在 1 和 ``num_buckets`` 之间尽可能均匀地分配"
"数字。如果行没有被平均分配到若干个桶中，则一个或多个桶将被更频繁地表示。"

msgid "``PercentRank``"
msgstr "``PercentRank``"

msgid ""
"Computes the relative rank of the rows in the frame clause. This computation "
"is equivalent to evaluating:"
msgstr ""

msgid ""
"The following table explains the calculation for the relative rank of a row:"
msgstr ""

msgid "Row #"
msgstr "行 #"

msgid "Rank"
msgstr "排名"

msgid "Calculation"
msgstr "计算"

msgid "Relative Rank"
msgstr ""

msgid "15"
msgstr "15"

msgid "(1-1)/(7-1)"
msgstr "(1-1)/(7-1)"

msgid "0.0000"
msgstr "0.0000"

msgid "(2-1)/(7-1)"
msgstr "(2-1)/(7-1)"

msgid "0.1666"
msgstr "0.1666"

msgid "(5-1)/(7-1)"
msgstr "(5-1)/(7-1)"

msgid "0.6666"
msgstr "0.6666"

msgid "(7-1)/(7-1)"
msgstr "(7-1)/(7-1)"

msgid "1.0000"
msgstr "1.0000"

msgid "``Rank``"
msgstr "``Rank``"

msgid ""
"Comparable to ``RowNumber``, this function ranks rows in the window. The "
"computed rank contains gaps. Use :class:`DenseRank` to compute rank without "
"gaps."
msgstr ""
"与 ``RowNumber`` 类似，该函数对窗口中的行进行排序。计算出的排名包含有空隙。使"
"用 :class:`DenseRank` 来计算没有空隙的排名。"

msgid "``RowNumber``"
msgstr "``RowNumber``"

msgid ""
"Computes the row number according to the ordering of either the frame clause "
"or the ordering of the whole query if there is no partitioning of the :ref:"
"`window frame <window-frames>`."
msgstr ""
"如果没有对 :ref:`窗口帧 <window-frames>` 进行分区，则根据帧子句的顺序或整个查"
"询的顺序计算行数。"

msgid "Query Expressions"
msgstr "查询表达式"

msgid ""
"Query expressions describe a value or a computation that can be used as part "
"of an update, create, filter, order by, annotation, or aggregate. When an "
"expression outputs a boolean value, it may be used directly in filters. "
"There are a number of built-in expressions (documented below) that can be "
"used to help you write queries. Expressions can be combined, or in some "
"cases nested, to form more complex computations."
msgstr ""
"查询表达式描述了一个值或一个计算，它可以作为更新、创建、过滤、排序、注解或聚"
"合的一部分。当一个表达式输出一个布尔值时，它可以直接用于过滤器中。有许多内置"
"的表达式（在下面的文档中）可以用来帮助你编写查询。表达式可以组合，或者在某些"
"情况下嵌套，以形成更复杂的计算。"

msgid "Supported arithmetic"
msgstr "支持的算术"

msgid ""
"Django supports negation, addition, subtraction, multiplication, division, "
"modulo arithmetic, and the power operator on query expressions, using Python "
"constants, variables, and even other expressions."
msgstr ""
"Django 支持负、加、减、乘、除、模数运算，以及对查询表达式的幂运算符，使用 "
"Python 常量、变量，甚至其他表达式。"

msgid "Output field"
msgstr ""

msgid ""
"Many of the expressions documented in this section support an optional "
"``output_field`` parameter. If given, Django will load the value into that "
"field after retrieving it from the database."
msgstr ""

msgid ""
"``output_field`` takes a model field instance, like ``IntegerField()`` or "
"``BooleanField()``. Usually, the field doesn't need any arguments, like "
"``max_length``, since field arguments relate to data validation which will "
"not be performed on the expression's output value."
msgstr ""

msgid ""
"``output_field`` is only required when Django is unable to automatically "
"determine the result's field type, such as complex expressions that mix "
"field types. For example, adding a ``DecimalField()`` and a ``FloatField()`` "
"requires an output field, like ``output_field=FloatField()``."
msgstr ""

msgid "Some examples"
msgstr "一些例子"

msgid "Built-in Expressions"
msgstr "内置表达式"

msgid ""
"These expressions are defined in ``django.db.models.expressions`` and "
"``django.db.models.aggregates``, but for convenience they're available and "
"usually imported from :mod:`django.db.models`."
msgstr ""
"这些表达式在 ``django.db.models.expressions`` 和 ``django.db.models."
"aggregates`` 中定义，但为了方便起见，通常从 :mod:`django.db.models` 中导入使"
"用。"

msgid "``F()`` expressions"
msgstr "``F()`` 表达式"

msgid ""
"An ``F()`` object represents the value of a model field, transformed value "
"of a model field, or annotated column. It makes it possible to refer to "
"model field values and perform database operations using them without "
"actually having to pull them out of the database into Python memory."
msgstr ""

msgid ""
"Instead, Django uses the ``F()`` object to generate an SQL expression that "
"describes the required operation at the database level."
msgstr ""
"取而代之的是，Django 使用 ``F()`` 对象来生成一个 SQL 表达式，在数据库层面描述"
"所需的操作。"

msgid ""
"Let's try this with an example. Normally, one might do something like this::"
msgstr "我们举个例子试试。通常情况下，我们可以这样做："

msgid ""
"Here, we have pulled the value of ``reporter.stories_filed`` from the "
"database into memory and manipulated it using familiar Python operators, and "
"then saved the object back to the database. But instead we could also have "
"done::"
msgstr ""
"这里，我们从数据库中提取了 ``reporter.stories_filed`` 的值到内存中，并使用熟"
"悉的 Python 操作符对其进行操作，然后将对象保存回数据库。但我们也可以这样做："

msgid ""
"Although ``reporter.stories_filed = F('stories_filed') + 1`` looks like a "
"normal Python assignment of value to an instance attribute, in fact it's an "
"SQL construct describing an operation on the database."
msgstr ""
"虽然 ``reporter.stories_filed = F('stories_filed') + 1`` 看起来像一个普通的 "
"Python 赋值给一个实例属性，但实际上它是一个描述数据库操作的 SQL 结构。"

msgid ""
"When Django encounters an instance of ``F()``, it overrides the standard "
"Python operators to create an encapsulated SQL expression; in this case, one "
"which instructs the database to increment the database field represented by "
"``reporter.stories_filed``."
msgstr ""
"当 Django 遇到 ``F()`` 的实例时，它会覆盖标准的 Python 运算符来创建一个封装"
"的 SQL 表达式；在本例中，它指示数据库递增由 ``reporter.stories_filed`` 表示的"
"数据库字段。"

msgid ""
"Whatever value is or was on ``reporter.stories_filed``, Python never gets to "
"know about it - it is dealt with entirely by the database. All Python does, "
"through Django's ``F()`` class, is create the SQL syntax to refer to the "
"field and describe the operation."
msgstr ""
"无论 ``reporter.stories_filed`` 上的值是多少，Python 永远不会知道它——它完全由"
"数据库处理。通过 Django 的 ``F()`` 类，Python 所做的就是创建 SQL 语法来引用这"
"个字段并描述操作。"

msgid "To access the new value saved this way, the object must be reloaded::"
msgstr "要访问这样保存的新值，必须重新加载对象："

msgid ""
"As well as being used in operations on single instances as above, ``F()`` "
"can be used on ``QuerySets`` of object instances, with ``update()``. This "
"reduces the two queries we were using above - the ``get()`` and the :meth:"
"`~Model.save()` - to just one::"
msgstr ""
"``F()`` 除了用于上述对单个实例的操作外，``F()`` 还可以与 ``update()`` 一起用"
"于对象实例的 ``QuerySets``。这就把我们上面使用的两个查询——``get()`` 和 :meth:"
"`~Model.save()` 减少到只有一个："

msgid ""
"We can also use :meth:`~django.db.models.query.QuerySet.update()` to "
"increment the field value on multiple objects - which could be very much "
"faster than pulling them all into Python from the database, looping over "
"them, incrementing the field value of each one, and saving each one back to "
"the database::"
msgstr ""
"我们还可以使用 :meth:`~django.db.models.query.QuerySet.update()` 来递增多个对"
"象上的字段值——这可能比从数据库中把它们全部拉到 Python 中，在它们身上循环，递"
"增每个对象的字段值，然后把每个对象保存回数据库要快得多："

msgid "``F()`` therefore can offer performance advantages by:"
msgstr "因此，``F()`` 可以通过以下方式提供性能优势："

msgid "getting the database, rather than Python, to do work"
msgstr "让数据库，而不是 Python 来完成工作"

msgid "reducing the number of queries some operations require"
msgstr "减少某些操作所需的查询次数"

msgid "Avoiding race conditions using ``F()``"
msgstr "使用 ``F()`` 避免竞争条件"

msgid ""
"Another useful benefit of ``F()`` is that having the database - rather than "
"Python - update a field's value avoids a *race condition*."
msgstr ""
"``F()`` 的另一个有用的好处是，让数据库——而不是 Python——更新一个字段的值，避免"
"了 *竞争条件*。"

msgid ""
"If two Python threads execute the code in the first example above, one "
"thread could retrieve, increment, and save a field's value after the other "
"has retrieved it from the database. The value that the second thread saves "
"will be based on the original value; the work of the first thread will be "
"lost."
msgstr ""
"如果两个 Python 线程执行上面第一个例子中的代码，一个线程可以在另一个线程从数"
"据库中获取一个字段的值后，检索、递增并保存它。第二个线程保存的值将基于原始"
"值，第一个线程的工作将丢失。"

msgid ""
"If the database is responsible for updating the field, the process is more "
"robust: it will only ever update the field based on the value of the field "
"in the database when the :meth:`~Model.save()` or ``update()`` is executed, "
"rather than based on its value when the instance was retrieved."
msgstr ""
"如果数据库负责更新字段，那么这个过程就比较稳健：它只会在执行 :meth:`~Model."
"save()` 或 ``update()`` 时，根据数据库中字段的值来更新字段，而不是根据检索实"
"例时的值来更新。"

msgid "``F()`` assignments persist after ``Model.save()``"
msgstr "``F()`` 赋值在 ``Model.save()`` 之后持续存在"

msgid ""
"``F()`` objects assigned to model fields persist after saving the model "
"instance and will be applied on each :meth:`~Model.save()`. For example::"
msgstr ""
"``F()`` 分配给模型字段的对象在保存模型实例后会持续存在，并将应用于每个 :meth:"
"`~Model.save()`。例如："

msgid ""
"``stories_filed`` will be updated twice in this case. If it's initially "
"``1``, the final value will be ``3``. This persistence can be avoided by "
"reloading the model object after saving it, for example, by using :meth:"
"`~Model.refresh_from_db()`."
msgstr ""
"在这种情况下，``stories_filed`` 将被更新两次。如果最初是 ``1``，最终值将是 "
"``3``。这种持久性可以通过在保存模型对象后重新加载来避免，例如，使用 :meth:"
"`~Model.refresh_from_db()`。"

msgid "Using ``F()`` in filters"
msgstr "在过滤器中使用 ``F()``"

msgid ""
"``F()`` is also very useful in ``QuerySet`` filters, where they make it "
"possible to filter a set of objects against criteria based on their field "
"values, rather than on Python values."
msgstr ""
"``F()`` 在 ``QuerySet`` 过滤器中也非常有用，它们可以根据对象的字段值而不是 "
"Python 值的标准来过滤一组对象。"

msgid ""
"This is documented in :ref:`using F() expressions in queries <using-f-"
"expressions-in-filters>`."
msgstr ""
"这在 :ref:`在查询中使用 F() 表达式 <using-f-expressions-in-filters>` 中有所记"
"载。"

msgid "Using ``F()`` with annotations"
msgstr "与注解一起使用 ``F()``"

msgid ""
"``F()`` can be used to create dynamic fields on your models by combining "
"different fields with arithmetic::"
msgstr "``F()`` 可用于通过将不同的字段与算术相结合，在你的模型上创建动态字段："

msgid ""
"If the fields that you're combining are of different types you'll need to "
"tell Django what kind of field will be returned. Most expressions support :"
"ref:`output_field<output-field>` for this case, but since ``F()`` does not, "
"you will need to wrap the expression with :class:`ExpressionWrapper`::"
msgstr ""

msgid ""
"When referencing relational fields such as ``ForeignKey``, ``F()`` returns "
"the primary key value rather than a model instance:"
msgstr ""

msgid "Using ``F()`` to sort null values"
msgstr "使用 ``F()`` 对空值进行排序"

msgid ""
"Use ``F()`` and the ``nulls_first`` or ``nulls_last`` keyword argument to :"
"meth:`.Expression.asc` or :meth:`~.Expression.desc` to control the ordering "
"of a field's null values. By default, the ordering depends on your database."
msgstr ""
"使用 ``F()`` 和 :meth:`.Expression.asc` 或 :meth:`~.Expression.esc` 的关键词"
"参数 ``nulls_first`` 或 ``nulls_last`` 来控制字段的空值的排序。默认情况下，排"
"序取决于你的数据库。"

msgid ""
"For example, to sort companies that haven't been contacted "
"(``last_contacted`` is null) after companies that have been contacted::"
msgstr ""
"例如，在已经联系过的公司之后，对尚未联系过的公司进行排序（``last_contacted`` "
"为空）："

msgid "Using ``F()`` with logical operations"
msgstr ""

msgid ""
"``F()`` expressions that output ``BooleanField`` can be logically negated "
"with the inversion operator ``~F()``. For example, to swap the activation "
"status of companies::"
msgstr ""

msgid "``Func()`` expressions"
msgstr "``Func()`` 表达式"

msgid ""
"``Func()`` expressions are the base type of all expressions that involve "
"database functions like ``COALESCE`` and ``LOWER``, or aggregates like "
"``SUM``. They can be used directly::"
msgstr ""
"``Func()`` 表达式是所有涉及 ``COALESCE`` 和 ``LOWER`` 等数据库函数或 ``SUM`` "
"等集合的表达式的基本类型。它们可以直接使用："

msgid "or they can be used to build a library of database functions::"
msgstr "或者可以用它们来建立一个数据库函数库："

msgid ""
"But both cases will result in a queryset where each model is annotated with "
"an extra attribute ``field_lower`` produced, roughly, from the following SQL:"
msgstr ""
"但这两种情况都会产生一个查询集，其中每个模型都有一个额外的属性 "
"``field_lower`` 来注释，大致由以下 SQL 产生："

msgid ""
"See :doc:`database-functions` for a list of built-in database functions."
msgstr "参见 :doc:`database-functions` 获取内置的数据库函数列表。"

msgid "The ``Func`` API is as follows:"
msgstr "``Func`` API 如下："

msgid ""
"A class attribute describing the function that will be generated. "
"Specifically, the ``function`` will be interpolated as the ``function`` "
"placeholder within :attr:`template`. Defaults to ``None``."
msgstr ""
"描述将要生成的函数的类属性。具体来说，``function`` 将作为 ``function`` 占位符"
"插在 :attr:`template` 中。默认值为 ``None``。"

msgid ""
"A class attribute, as a format string, that describes the SQL that is "
"generated for this function. Defaults to ``'%(function)s(%(expressions)s)'``."
msgstr ""
"一个类属性，作为格式字符串，描述为该函数生成的SQL。默认值为 "
"``'%(function)s(%(expressions)s)'``。"

msgid ""
"If you're constructing SQL like ``strftime('%W', 'date')`` and need a "
"literal ``%`` character in the query, quadruple it (``%%%%``) in the "
"``template`` attribute because the string is interpolated twice: once during "
"the template interpolation in ``as_sql()`` and once in the SQL interpolation "
"with the query parameters in the database cursor."
msgstr ""
"如果你正在构造像 ``strftime('%W', 'date')`` 这样的 SQL，并且需要在查询中使用 "
"``%`` 字符，那么在 ``template`` 属性中把它四倍（``%%%%``），因为这个字符串会"
"被插值两次：一次是在 ``as_sql()`` 中的模板插值中，另一次是在数据库游标中的查"
"询参数的 SQL 插值中。"

msgid ""
"A class attribute that denotes the character used to join the list of "
"``expressions`` together. Defaults to ``', '``."
msgstr ""
"一个类属性，表示用于将 ``expressions`` 列表连接在一起的字符。默认值为 ``', "
"'``。"

msgid ""
"A class attribute that denotes the number of arguments the function accepts. "
"If this attribute is set and the function is called with a different number "
"of expressions, ``TypeError`` will be raised. Defaults to ``None``."
msgstr ""
"一个类属性，表示函数接受的参数数。如果设置了这个属性，并且用不同数量的表达式"
"调用函数，将引发 ``TypeError``。默认值为 ``None``。"

msgid ""
"Generates the SQL fragment for the database function. Returns a tuple "
"``(sql, params)``, where ``sql`` is the SQL string, and ``params`` is the "
"list or tuple of query parameters."
msgstr ""
"生成数据库函数的 SQL 片段。返回一个元组 ``(sql, params)``，其中 ``sql`` 是 "
"SQL 字符串，``params`` 是查询参数的列表或元组。"

msgid ""
"The ``as_vendor()`` methods should use the ``function``, ``template``, "
"``arg_joiner``, and any other ``**extra_context`` parameters to customize "
"the SQL as needed. For example:"
msgstr ""
"``as_vendor()`` 方法应该使用 ``function``、``template``、``arg_joiner`` 以及"
"其他 ``**extra_context`` 参数来根据需要定制 SQL。例如："

msgid "``django/db/models/functions.py``"
msgstr "``django/db/models/functions.py``"

msgid ""
"To avoid an SQL injection vulnerability, ``extra_context`` :ref:`must not "
"contain untrusted user input <avoiding-sql-injection-in-query-expressions>` "
"as these values are interpolated into the SQL string rather than passed as "
"query parameters, where the database driver would escape them."
msgstr ""
"为了避免 SQL 注入漏洞，``extra_context`` :ref:`不得包含不受信任的用户输入 "
"<avoiding-sql-injection-in-query-expressions>`，因为这些值会被内插到 SQL 字符"
"串中，而不是作为查询参数传递，数据库驱动对其进行转义。"

msgid ""
"The ``*expressions`` argument is a list of positional expressions that the "
"function will be applied to. The expressions will be converted to strings, "
"joined together with ``arg_joiner``, and then interpolated into the "
"``template`` as the ``expressions`` placeholder."
msgstr ""
"``*expressions`` 参数是一个位置表达式的列表，该函数将应用于此。表达式将被转换"
"为字符串，用 ``arg_joiner`` 连接在一起，然后插入到 ``template`` 中作为 "
"``expressions`` 占位符。"

msgid ""
"Positional arguments can be expressions or Python values. Strings are "
"assumed to be column references and will be wrapped in ``F()`` expressions "
"while other values will be wrapped in ``Value()`` expressions."
msgstr ""
"位置参数可以是表达式或 Python 值。字符串被认为是列引用，将被包装在 ``F()`` 表"
"达式中，而其他值将被包装在 ``Value()`` 表达式中。"

msgid ""
"The ``**extra`` kwargs are ``key=value`` pairs that can be interpolated into "
"the ``template`` attribute. To avoid an SQL injection vulnerability, "
"``extra`` :ref:`must not contain untrusted user input <avoiding-sql-"
"injection-in-query-expressions>` as these values are interpolated into the "
"SQL string rather than passed as query parameters, where the database driver "
"would escape them."
msgstr ""
"``**extra`` 关键字是 ``key=value`` 对，可以内插到 ``template`` 属性中。为了避"
"免 SQL 注入漏洞，``extra`` :ref:`不能包含不受信任的用户输入 <avoiding-sql-"
"injection-in-query-expressions>`，因为这些值会被内插到 SQL 字符串中，而不是作"
"为查询参数传递，数据库驱动程序对其进行转义。"

msgid ""
"The ``function``, ``template``, and ``arg_joiner`` keywords can be used to "
"replace the attributes of the same name without having to define your own "
"class. :ref:`output_field<output-field>` can be used to define the expected "
"return type."
msgstr ""

msgid "``Aggregate()`` expressions"
msgstr "``Aggregate()`` 表达式"

msgid ""
"An aggregate expression is a special case of a :ref:`Func() expression <func-"
"expressions>` that informs the query that a ``GROUP BY`` clause is required. "
"All of the :ref:`aggregate functions <aggregation-functions>`, like "
"``Sum()`` and ``Count()``, inherit from ``Aggregate()``."
msgstr ""
"聚合表达式是 :ref:`Func() 表达式 <func-expressions>` 的一个特例，它通知查询需"
"要一个 ``GROUP BY`` 子句。所有的 :ref:`聚合函数 <aggregation-functions>`，如 "
"``Sum()`` 和 ``Count()``，都继承自 ``Aggregate()``。"

msgid ""
"Since ``Aggregate``\\s are expressions and wrap expressions, you can "
"represent some complex computations::"
msgstr "由于 ``Aggregate`` 是表达式和封装表达式，你可以表示一些复杂的计算："

msgid "The ``Aggregate`` API is as follows:"
msgstr "``Aggregate`` 的 API 如下："

msgid ""
"A class attribute, as a format string, that describes the SQL that is "
"generated for this aggregate. Defaults to "
"``'%(function)s(%(distinct)s%(expressions)s)'``."
msgstr ""
"作为格式字符串的类属性，描述为该集合生成的 SQL。默认值为 "
"``'%(function)s(%(distinct)s%(expressions)s)'``。"

msgid ""
"A class attribute describing the aggregate function that will be generated. "
"Specifically, the ``function`` will be interpolated as the ``function`` "
"placeholder within :attr:`template`. Defaults to ``None``."
msgstr ""
"描述将生成的集合函数的类属性。具体来说，``function`` 将作为 ``function`` 占位"
"符插值在 :attr:`template` 中。默认值为 ``None``。"

msgid ""
"Defaults to ``True`` since most aggregate functions can be used as the "
"source expression in :class:`~django.db.models.expressions.Window`."
msgstr ""
"默认为 ``True``，因为大多数聚合函数可以作为 :class:`~django.db.models."
"expressions.Window` 中的源表达式。"

msgid ""
"A class attribute determining whether or not this aggregate function allows "
"passing a ``distinct`` keyword argument. If set to ``False`` (default), "
"``TypeError`` is raised if ``distinct=True`` is passed."
msgstr ""
"一个类属性，决定该聚合函数是否允许传递 ``distinct`` 关键字参数。如果设置为 "
"``False`` （默认），如果传递了 ``distinct=True``，会引发 ``TypeError``。"

msgid ""
"Defaults to ``None`` since most aggregate functions result in ``NULL`` when "
"applied to an empty result set."
msgstr ""

msgid ""
"The ``expressions`` positional arguments can include expressions, transforms "
"of the model field, or the names of model fields. They will be converted to "
"a string and used as the ``expressions`` placeholder within the ``template``."
msgstr ""

msgid ""
"The ``distinct`` argument determines whether or not the aggregate function "
"should be invoked for each distinct value of ``expressions`` (or set of "
"values, for multiple ``expressions``). The argument is only supported on "
"aggregates that have :attr:`~Aggregate.allow_distinct` set to ``True``."
msgstr ""
"``distinct`` 参数决定是否应该为 ``expressions`` 的每一个不同的值（或一组值，"
"对于多个 ``expressions``）调用聚合函数。该参数仅在 :attr:`~Aggregate."
"allow_distinct` 设置为 ``True`` 的聚合函数中得到支持。"

msgid ""
"The ``filter`` argument takes a :class:`Q object <django.db.models.Q>` "
"that's used to filter the rows that are aggregated. See :ref:`conditional-"
"aggregation` and :ref:`filtering-on-annotations` for example usage."
msgstr ""
"``filter`` 参数取一个 :class:`Q 对象 <django.db.models.Q>`，用于过滤被聚合的"
"行。参见 :ref:`conditional-aggregation` 和 :ref:`filtering-on-annotations` 的"
"用法示例。"

msgid ""
"The ``default`` argument takes a value that will be passed along with the "
"aggregate to :class:`~django.db.models.functions.Coalesce`. This is useful "
"for specifying a value to be returned other than ``None`` when the queryset "
"(or grouping) contains no entries."
msgstr ""

msgid ""
"The ``**extra`` kwargs are ``key=value`` pairs that can be interpolated into "
"the ``template`` attribute."
msgstr ""
"``**extra`` 关键字是 ``key=value`` 对，可以内插到 ``template`` 属性中。"

msgid "Creating your own Aggregate Functions"
msgstr "创建你自己的聚合函数"

msgid ""
"You can create your own aggregate functions, too. At a minimum, you need to "
"define ``function``, but you can also completely customize the SQL that is "
"generated. Here's a brief example::"
msgstr ""
"你也可以创建自己的聚合函数。至少，你需要定义 ``function``，但你也可以完全自定"
"义生成的 SQL。下面是一个简单的例子："

msgid "``Value()`` expressions"
msgstr "``Value()`` 表达式"

msgid ""
"A ``Value()`` object represents the smallest possible component of an "
"expression: a simple value. When you need to represent the value of an "
"integer, boolean, or string within an expression, you can wrap that value "
"within a ``Value()``."
msgstr ""
"``Value()`` 对象表示一个表达式中最小的成分：一个简单的值。当你需要在一个表达"
"式中表示一个整数、布尔值或字符串的值时，你可以将该值包裹在一个 ``Value()`` "
"中。"

msgid ""
"You will rarely need to use ``Value()`` directly. When you write the "
"expression ``F('field') + 1``, Django implicitly wraps the ``1`` in a "
"``Value()``, allowing simple values to be used in more complex expressions. "
"You will need to use ``Value()`` when you want to pass a string to an "
"expression. Most expressions interpret a string argument as the name of a "
"field, like ``Lower('name')``."
msgstr ""
"你很少会需要直接使用 ``Value()``。当你写下表达式 ``F('field') + 1`` 时，"
"Django 会隐式地将 ``1`` 包裹在 ``Value()`` 中，允许简单的值被用于更复杂的表达"
"式中。当你想把一个字符串传递给一个表达式时，你需要使用 ``Value()``。大多数表"
"达式将字符串参数解释为字段的名称，如 ``Lower('name')``。"

msgid ""
"The ``value`` argument describes the value to be included in the expression, "
"such as ``1``, ``True``, or ``None``. Django knows how to convert these "
"Python values into their corresponding database type."
msgstr ""
"``value`` 参数描述了要包含在表达式中的值，比如 ``1``、``True`` 或 ``None``。"
"Django 知道如何将这些 Python 值转换为相应的数据库类型。"

msgid ""
"If no :ref:`output_field<output-field>` is specified, it will be inferred "
"from the type of the provided ``value`` for many common types. For example, "
"passing an instance of :py:class:`datetime.datetime` as ``value`` defaults "
"``output_field`` to :class:`~django.db.models.DateTimeField`."
msgstr ""

msgid "``ExpressionWrapper()`` expressions"
msgstr "``ExpressionWrapper()`` 表达式"

msgid ""
"``ExpressionWrapper`` surrounds another expression and provides access to "
"properties, such as :ref:`output_field<output-field>`, that may not be "
"available on other expressions. ``ExpressionWrapper`` is necessary when "
"using arithmetic on ``F()`` expressions with different types as described "
"in :ref:`using-f-with-annotations`."
msgstr ""

msgid "Conditional expressions"
msgstr "条件表达式"

msgid ""
"Conditional expressions allow you to use :keyword:`if` ... :keyword:"
"`elif` ... :keyword:`else` logic in queries. Django natively supports SQL "
"``CASE`` expressions. For more details see :doc:`conditional-expressions`."
msgstr ""
"条件表达式允许你在查询中使用 :keyword:`if` ... :keyword:`elif` ... :keyword:"
"`else` 逻辑。Django 原生支持 SQL ``CASE`` 表达式。更多细节请参见 :doc:"
"`conditional-expressions`。"

msgid "``Subquery()`` expressions"
msgstr "``Subquery()`` 表达式"

msgid ""
"You can add an explicit subquery to a ``QuerySet`` using the ``Subquery`` "
"expression."
msgstr "你可以使用 ``Subquery`` 表达式向 ``QuerySet`` 添加一个显式子查询。"

msgid ""
"For example, to annotate each post with the email address of the author of "
"the newest comment on that post:"
msgstr ""

msgid "On PostgreSQL, the SQL looks like:"
msgstr "在 PostgreSQL 上，SQL 看起来像："

msgid ""
"The examples in this section are designed to show how to force Django to "
"execute a subquery. In some cases it may be possible to write an equivalent "
"queryset that performs the same task more clearly or efficiently."
msgstr ""
"本节中的例子是为了展示如何强制 Django 执行一个子查询。在某些情况下，可以写一"
"个等价的查询集，更清楚或更有效地执行同样的任务。"

msgid "Referencing columns from the outer queryset"
msgstr "从外部查询集中引用列"

msgid ""
"Use ``OuterRef`` when a queryset in a ``Subquery`` needs to refer to a field "
"from the outer query or its transform. It acts like an :class:`F` expression "
"except that the check to see if it refers to a valid field isn't made until "
"the outer queryset is resolved."
msgstr ""

msgid ""
"Instances of ``OuterRef`` may be used in conjunction with nested instances "
"of ``Subquery`` to refer to a containing queryset that isn't the immediate "
"parent. For example, this queryset would need to be within a nested pair of "
"``Subquery`` instances to resolve correctly:"
msgstr ""

msgid "Limiting a subquery to a single column"
msgstr "将子查询限制为单列"

msgid ""
"There are times when a single column must be returned from a ``Subquery``, "
"for instance, to use a ``Subquery`` as the target of an ``__in`` lookup. To "
"return all comments for posts published within the last day:"
msgstr ""

msgid ""
"In this case, the subquery must use :meth:`~.QuerySet.values` to return only "
"a single column: the primary key of the post."
msgstr ""
"在这种情况下，子查询必须使用 :meth:`~.QuerySet.values` 只返回一列：该文章的主"
"键。"

msgid "Limiting the subquery to a single row"
msgstr "将子查询限制为单行"

msgid ""
"To prevent a subquery from returning multiple rows, a slice (``[:1]``) of "
"the queryset is used:"
msgstr ""

msgid ""
"In this case, the subquery must only return a single column *and* a single "
"row: the email address of the most recently created comment."
msgstr ""
"在这种情况下，子查询必须只返回一列 *和* 一行：最近创建的评论的电子邮件地址。"

msgid ""
"(Using :meth:`~.QuerySet.get` instead of a slice would fail because the "
"``OuterRef`` cannot be resolved until the queryset is used within a "
"``Subquery``.)"
msgstr ""
"（使用 :meth:`~.QuerySet.get` 而不是分片会导致失败，因为 ``OuterRef`` 在 "
"``Subquery`` 中使用查询集之前无法解析。)"

msgid "``Exists()`` subqueries"
msgstr "``Exists()`` 子查询"

msgid ""
"``Exists`` is a ``Subquery`` subclass that uses an SQL ``EXISTS`` statement. "
"In many cases it will perform better than a subquery since the database is "
"able to stop evaluation of the subquery when a first matching row is found."
msgstr ""
"``Exists`` 是一个 ``Subquery`` 子类，它使用 SQL ``EXISTS`` 语句。在许多情况"
"下，它的性能比子查询更好，因为当找到第一条匹配的记录时，数据库能够停止对子查"
"询的执行。"

msgid ""
"For example, to annotate each post with whether or not it has a comment from "
"within the last day:"
msgstr ""

msgid ""
"It's unnecessary to force ``Exists`` to refer to a single column, since the "
"columns are discarded and a boolean result is returned. Similarly, since "
"ordering is unimportant within an SQL ``EXISTS`` subquery and would only "
"degrade performance, it's automatically removed."
msgstr ""
"没有必要强制 ``Exists`` 指向单一列，因为列会被丢弃，并返回一个布尔结果。同"
"样，由于在 SQL ``EXISTS`` 子查询中，排序并不重要，只会降低性能，所以会自动删"
"除。"

msgid "You can query using ``NOT EXISTS`` with ``~Exists()``."
msgstr "可以用 ```~Exists()`` 来查询 ``NOT EXISTS``。"

msgid "Filtering on a ``Subquery()`` or ``Exists()`` expressions"
msgstr "对 ``Subquery()`` 或 ``Exists()`` 表达式进行过滤。"

msgid ""
"``Subquery()`` that returns a boolean value and ``Exists()`` may be used as "
"a ``condition`` in :class:`~django.db.models.expressions.When` expressions, "
"or to directly filter a queryset:"
msgstr ""

msgid ""
"This will ensure that the subquery will not be added to the ``SELECT`` "
"columns, which may result in a better performance."
msgstr "这将确保子查询不会被添加到 ``SELECT`` 列中，这可能会带来更好的性能。"

msgid "Using aggregates within a ``Subquery`` expression"
msgstr "在 ``Subquery`` 表达式中使用集合。"

msgid ""
"Aggregates may be used within a ``Subquery``, but they require a specific "
"combination of :meth:`~.QuerySet.filter`, :meth:`~.QuerySet.values`, and :"
"meth:`~.QuerySet.annotate` to get the subquery grouping correct."
msgstr ""
"聚合可以在 ``Subquery`` 中使用，但需要将 :meth:`~.QuerySet.filter`、:meth:`~."
"QuerySet.values` 和 :meth:`~.QuerySet.annotate` 进行特定的组合，才能使子查询"
"分组正确。"

msgid ""
"Assuming both models have a ``length`` field, to find posts where the post "
"length is greater than the total length of all combined comments:"
msgstr ""

msgid ""
"The initial ``filter(...)`` limits the subquery to the relevant parameters. "
"``order_by()`` removes the default :attr:`~django.db.models.Options."
"ordering` (if any) on the ``Comment`` model. ``values('post')`` aggregates "
"comments by ``Post``. Finally, ``annotate(...)`` performs the aggregation. "
"The order in which these queryset methods are applied is important. In this "
"case, since the subquery must be limited to a single column, "
"``values('total')`` is required."
msgstr ""
"初始的 ``filter(...)`` 将子查询限制在相关参数上。``order_by()`` 删除 "
"``Comment`` 模型上的默认 :attr:`~django.db.models.Options.Order` （如果有的"
"话）。``values('post')`` 按 ``Post`` 聚合评论。最后，``annotate(...)`` 执行聚"
"合。这些查询集方法的应用顺序很重要。在这种情况下，由于子查询必须限于一列，所"
"以需要使用 ``values('total')``。"

msgid ""
"This is the only way to perform an aggregation within a ``Subquery``, as "
"using :meth:`~.QuerySet.aggregate` attempts to evaluate the queryset (and if "
"there is an ``OuterRef``, this will not be possible to resolve)."
msgstr ""
"这是在 ``Subquery`` 内进行聚合的唯一方法，因为使用 :meth:`~.QuerySet."
"aggregary` 试图执行查询集（如果有 ``OuterRef``，将无法解决）。"

msgid "Raw SQL expressions"
msgstr "原始 SQL 表达式"

msgid ""
"Sometimes database expressions can't easily express a complex ``WHERE`` "
"clause. In these edge cases, use the ``RawSQL`` expression. For example:"
msgstr ""

msgid ""
"These extra lookups may not be portable to different database engines "
"(because you're explicitly writing SQL code) and violate the DRY principle, "
"so you should avoid them if possible."
msgstr ""
"这些额外的查找可能无法移植到不同的数据库引擎中（因为你是显式地编写 SQL 代"
"码），并且违反了 DRY 原则，所以你应该尽可能地避免它们。"

msgid ""
"``RawSQL`` expressions can also be used as the target of ``__in`` filters:"
msgstr ""

msgid ""
"To protect against `SQL injection attacks <https://en.wikipedia.org/wiki/"
"SQL_injection>`_, you must escape any parameters that the user can control "
"by using ``params``. ``params`` is a required argument to force you to "
"acknowledge that you're not interpolating your SQL with user-provided data."
msgstr ""
"为了防止 `SQL 注入攻击 <https://en.wikipedia.org/wiki/SQL_injection>`_ ，你必"
"须使用 ``params`` 来转义任何用户可以控制的参数。``params`` 是一个必要的参数，"
"以迫使你承认你没有用用户提供的数据来插值你的 SQL。"

msgid ""
"You also must not quote placeholders in the SQL string. This example is "
"vulnerable to SQL injection because of the quotes around ``%s``:"
msgstr ""
"你也不能在 SQL 字符串中引用占位符。这个例子因为在 ``%s`` 周围的引号而容易受"
"到 SQL 注入的影响。"

msgid ""
"You can read more about how Django's :ref:`SQL injection protection <sql-"
"injection-protection>` works."
msgstr ""
"你可以阅读更多关于 Django 的 :ref:`SQL 注入保护 <sql-injection-protection>` "
"的工作原理。"

msgid ""
"Window functions provide a way to apply functions on partitions. Unlike a "
"normal aggregation function which computes a final result for each set "
"defined by the group by, window functions operate on :ref:`frames <window-"
"frames>` and partitions, and compute the result for each row."
msgstr ""
"窗口函数提供了一种在分区上应用函数的方法。与一般的聚合函数不同，窗口函数对 :"
"ref:`帧 <window-frames>` 和分区进行操作，并计算每行的结果。"

msgid ""
"You can specify multiple windows in the same query which in Django ORM would "
"be equivalent to including multiple expressions in a :doc:`QuerySet."
"annotate() </topics/db/aggregation>` call. The ORM doesn't make use of named "
"windows, instead they are part of the selected columns."
msgstr ""
"你可以在同一个查询中指定多个窗口，这在 Django ORM 中相当于在一个 :doc:"
"`QuerySet.annotate() </topics/db/aggregation>` 调用中包含多个表达式。ORM 并没"
"有利用命名窗口，而是将其作为所选列的一部分。"

msgid ""
"Defaults to ``%(expression)s OVER (%(window)s)'``. If only the "
"``expression`` argument is provided, the window clause will be blank."
msgstr ""
"默认为 ``%(expression)sOVER (%(window)s)'``。如果只提供 ``expression`` 参数，"
"窗口子句将是空白的。"

msgid "The ``Window`` class is the main expression for an ``OVER`` clause."
msgstr "``Window`` 类是 ``OVER`` 子句的主要表达式。"

msgid ""
"The ``expression`` argument is either a :ref:`window function <window-"
"functions>`, an :ref:`aggregate function <aggregation-functions>`, or an "
"expression that's compatible in a window clause."
msgstr ""
"``expression`` 参数是一个 :ref:`窗口函数 <window-functions>`，一个 :ref:`聚合"
"函数 <aggregation-functions>`，或者一个与窗口子句兼容的表达式。"

msgid ""
"The ``partition_by`` argument accepts an expression or a sequence of "
"expressions (column names should be wrapped in an ``F``-object) that control "
"the partitioning of the rows.  Partitioning narrows which rows are used to "
"compute the result set."
msgstr ""

msgid ""
"The :ref:`output_field<output-field>` is specified either as an argument or "
"by the expression."
msgstr ""

msgid ""
"The ``order_by`` argument accepts an expression on which you can call :meth:"
"`~django.db.models.Expression.asc` and :meth:`~django.db.models.Expression."
"desc`, a string of a field name (with an optional ``\"-\"`` prefix which "
"indicates descending order), or a tuple or list of strings and/or "
"expressions. The ordering controls the order in which the expression is "
"applied. For example, if you sum over the rows in a partition, the first "
"result is the value of the first row, the second is the sum of first and "
"second row."
msgstr ""

msgid ""
"The ``frame`` parameter specifies which other rows that should be used in "
"the computation. See :ref:`window-frames` for details."
msgstr ""
"``frame`` 参数指定在计算中应该使用哪些其他行。详见 :ref:`window-frames`。"

msgid "Support for ``order_by`` by field name references was added."
msgstr "添加了对按字段名称引用的 ``order_by`` 的支持。"

msgid ""
"For example, to annotate each movie with the average rating for the movies "
"by the same studio in the same genre and release year:"
msgstr ""

msgid ""
"This allows you to check if a movie is rated better or worse than its peers."
msgstr "这可以让你检查一部电影的评分是好是坏，与它的同行相比。"

msgid ""
"You may want to apply multiple expressions over the same window, i.e., the "
"same partition and frame. For example, you could modify the previous example "
"to also include the best and worst rating in each movie's group (same "
"studio, genre, and release year) by using three window functions in the same "
"query. The partition and ordering from the previous example is extracted "
"into a dictionary to reduce repetition:"
msgstr ""

msgid ""
"Filtering against window functions is supported as long as lookups are not "
"disjunctive (not using ``OR`` or ``XOR`` as a connector) and against a "
"queryset performing aggregation."
msgstr ""

msgid ""
"For example, a query that relies on aggregation and has an ``OR``-ed filter "
"against a window function and a field is not supported. Applying combined "
"predicates post-aggregation could cause rows that would normally be excluded "
"from groups to be included:"
msgstr ""

msgid "Support for filtering against window functions was added."
msgstr ""

msgid ""
"Among Django's built-in database backends, MySQL 8.0.2+, PostgreSQL, and "
"Oracle support window expressions. Support for different window expression "
"features varies among the different databases. For example, the options in :"
"meth:`~django.db.models.Expression.asc` and :meth:`~django.db.models."
"Expression.desc` may not be supported. Consult the documentation for your "
"database as needed."
msgstr ""
"在 Django 内置的数据库后端中，MySQL 8.0.2+、PostgreSQL、Oracle 都支持窗口表达"
"式。不同的数据库对不同窗口表达式功能的支持也不同。例如， :meth:`~django.db."
"models.Expression.asc` 和 :meth:`~django.db.models.Expression.esc` 中的选项可"
"能不被支持。根据需要，请查阅你的数据库的文档。"

msgid "Frames"
msgstr "帧"

msgid ""
"For a window frame, you can choose either a range-based sequence of rows or "
"an ordinary sequence of rows."
msgstr "对于一个窗口帧，你可以选择基于范围的行序列或普通的行序列。"

msgid "This attribute is set to ``'RANGE'``."
msgstr "该属性被设置为 ``'RANGE'``。"

msgid ""
"PostgreSQL has limited support for ``ValueRange`` and only supports use of "
"the standard start and end points, such as ``CURRENT ROW`` and ``UNBOUNDED "
"FOLLOWING``."
msgstr ""
"PostgreSQL 对 ``ValueRange`` 的支持有限，只支持使用标准的开始和结束点，如 "
"``CURRENT ROW`` 和 ``UNBOUNDED FOLLOWING``。"

msgid "This attribute is set to ``'ROWS'``."
msgstr "该属性被设置为 ``'ROWS'``。"

msgid "Both classes return SQL with the template:"
msgstr ""

msgid ""
"Frames narrow the rows that are used for computing the result. They shift "
"from some start point to some specified end point. Frames can be used with "
"and without partitions, but it's often a good idea to specify an ordering of "
"the window to ensure a deterministic result. In a frame, a peer in a frame "
"is a row with an equivalent value, or all rows if an ordering clause isn't "
"present."
msgstr ""
"帧缩小了用于计算结果的行。它们从某个起点移动到某个指定的终点。帧可以不分区使"
"用，但通常情况下，指定窗口的排序以确保结果的确定性是个好主意。在帧中，帧中的"
"对等值是指具有等值的行，如果不存在排序子句，则是指所有行。"

msgid ""
"The default starting point for a frame is ``UNBOUNDED PRECEDING`` which is "
"the first row of the partition. The end point is always explicitly included "
"in the SQL generated by the ORM and is by default ``UNBOUNDED FOLLOWING``. "
"The default frame includes all rows from the partition to the last row in "
"the set."
msgstr ""
"一个帧的默认起点是 ``UNBOUNDED PRECEDING``，即分区的第一行。终点总是显式地包"
"含在 ORM 生成的 SQL 中，默认为 ``UNBOUNDED FOLLOWING``。默认帧包括从分区到集"
"合中最后一行的所有行。"

msgid ""
"The accepted values for the ``start`` and ``end`` arguments are ``None``, an "
"integer, or zero. A negative integer for ``start`` results in ``N "
"preceding``, while ``None`` yields ``UNBOUNDED PRECEDING``. For both "
"``start`` and ``end``, zero will return ``CURRENT ROW``. Positive integers "
"are accepted for ``end``."
msgstr ""
"``start`` 和 ``end`` 参数的可接受值是 ``None``、一个整数或零。``start`` 的负"
"整数会导致 ``N preceding``，而 ``None`` 会产生 ``UNBOUNDED PRECEDING``。对于 "
"``start`` 和 ``end``，0 将返回 ``CURRENT ROW``。``end`` 接受正整数。"

msgid ""
"There's a difference in what ``CURRENT ROW`` includes. When specified in "
"``ROWS`` mode, the frame starts or ends with the current row. When specified "
"in ``RANGE`` mode, the frame starts or ends at the first or last peer "
"according to the ordering clause. Thus, ``RANGE CURRENT ROW`` evaluates the "
"expression for rows which have the same value specified by the ordering. "
"Because the template includes both the ``start`` and ``end`` points, this "
"may be expressed with::"
msgstr ""
"``CURRENT ROW`` 包括的内容有区别。当在 ``ROWS`` 模式下指定时，帧以当前行开始"
"或结束。当在 ``RANGE`` 模式下指定时，根据排序子句，帧以第一个或最后一个对等值"
"开始或结束。因此，``RANGE CURRENT ROW`` 对具有由排序指定的相同值的行执行表达"
"式。因为模板包括 ``start`` 和 ``end`` 点，所以可以用："

msgid ""
"If a movie's \"peers\" are described as movies released by the same studio "
"in the same genre in the same year, this ``RowRange`` example annotates each "
"movie with the average rating of a movie's two prior and two following peers:"
msgstr ""

msgid ""
"If the database supports it, you can specify the start and end points based "
"on values of an expression in the partition. If the ``released`` field of "
"the ``Movie`` model stores the release month of each movies, this "
"``ValueRange`` example annotates each movie with the average rating of a "
"movie's peers released between twelve months before and twelve months after "
"the each movie:"
msgstr ""

msgid "Technical Information"
msgstr "技术信息"

msgid ""
"Below you'll find technical implementation details that may be useful to "
"library authors. The technical API and examples below will help with "
"creating generic query expressions that can extend the built-in "
"functionality that Django provides."
msgstr ""
"下面你会发现对库作者可能有用的技术实现细节。下面的技术 API 和示例将有助于创建"
"通用的查询表达式，可以扩展 Django 提供的内置功能。"

msgid "Expression API"
msgstr "表达式 API"

msgid ""
"Query expressions implement the :ref:`query expression API <query-"
"expression>`, but also expose a number of extra methods and attributes "
"listed below. All query expressions must inherit from ``Expression()`` or a "
"relevant subclass."
msgstr ""
"查询表达式实现了 :ref:`查询表达式 API <query-expression>`，但也暴露了下面列出"
"的一些额外的方法和属性。所有查询表达式必须继承于 ``Expression()`` 或相关子"
"类。"

msgid ""
"When a query expression wraps another expression, it is responsible for "
"calling the appropriate methods on the wrapped expression."
msgstr ""
"当一个查询表达式包装另一个表达式时，它负责在被包装的表达式上调用相应的方法。"

msgid ""
"Tells Django that this expression contains an aggregate and that a ``GROUP "
"BY`` clause needs to be added to the query."
msgstr ""
"告诉 Django 这个表达式包含一个集合，需要在查询中添加一个 ``GROUP BY`` 子句。"

msgid ""
"Tells Django that this expression contains a :class:`~django.db.models."
"expressions.Window` expression. It's used, for example, to disallow window "
"function expressions in queries that modify data."
msgstr ""
"告诉 Django 这个表达式包含一个 :class:`~django.db.models.expressions.Window` "
"表达式。例如，它用于在修改数据的查询中不允许使用窗口函数表达式。"

msgid ""
"Tells Django that this expression can be referenced in :meth:`.QuerySet."
"filter`. Defaults to ``True``."
msgstr ""
"告诉 Django 这个表达式可以在 :meth:`.QuerySet.filter` 中引用。默认值为 "
"``True``。"

msgid ""
"Tells Django that this expression can be used as the source expression in :"
"class:`~django.db.models.expressions.Window`. Defaults to ``False``."
msgstr ""
"告诉 Django 这个表达式可以作为 :class:`~django.db.models.expressions.Window` "
"的源表达式。默认值为 ``False``。"

msgid ""
"Tells Django which value should be returned when the expression is used to "
"apply a function over an empty result set. Defaults to :py:data:"
"`NotImplemented` which forces the expression to be computed on the database."
msgstr ""

msgid ""
"Provides the chance to do any preprocessing or validation of the expression "
"before it's added to the query. ``resolve_expression()`` must also be called "
"on any nested expressions. A ``copy()`` of ``self`` should be returned with "
"any necessary transformations."
msgstr ""

msgid "``query`` is the backend query implementation."
msgstr "``query`` 是后端查询的实现。"

msgid ""
"``allow_joins`` is a boolean that allows or denies the use of joins in the "
"query."
msgstr "``allow_joins`` 是一个允许或拒绝在查询中使用连接的布尔值。"

msgid "``reuse`` is a set of reusable joins for multi-join scenarios."
msgstr "``reuse`` 是一组可重用的多连接方案的连接。"

msgid ""
"``summarize`` is a boolean that, when ``True``, signals that the query being "
"computed is a terminal aggregate query."
msgstr ""
"``summarize`` 是一个布尔值，当 ``True`` 时，表示正在计算的查询是一个终端聚合"
"查询。"

msgid ""
"``for_save`` is a boolean that, when ``True``, signals that the query being "
"executed is performing a create or update."
msgstr ""
"``for_save`` 是一个布尔值，当 ``True`` 时，表示正在执行的查询正在进行创建或更"
"新。"

msgid "Returns an ordered list of inner expressions. For example:"
msgstr ""

msgid ""
"Takes a list of expressions and stores them such that "
"``get_source_expressions()`` can return them."
msgstr ""
"获取一个表达式列表，并将其存储起来，使 ``get_source_expressions()`` 能够返回"
"它们。"

msgid ""
"Returns a clone (copy) of ``self``, with any column aliases relabeled. "
"Column aliases are renamed when subqueries are created. "
"``relabeled_clone()`` should also be called on any nested expressions and "
"assigned to the clone."
msgstr ""
"返回 ``self``` 的克隆（副本），并重新标明所有列别名。当创建子查询时，列别名会"
"被重新命名。``relabeled_clone()`` 也应该对任何嵌套的表达式进行调用并分配给克"
"隆。"

msgid "``change_map`` is a dictionary mapping old aliases to new aliases."
msgstr "``change_map`` 是一个将旧别名映射到新别名的字典。"

msgid ""
"A hook allowing the expression to coerce ``value`` into a more appropriate "
"type."
msgstr "一个钩子，允许表达式将 ``value``` 强制转换成一个更合适的类型。"

msgid "``expression`` is the same as ``self``."
msgstr "``expression`` 与 ``self`` 相同。"

msgid ""
"Responsible for returning the list of columns references by this expression. "
"``get_group_by_cols()`` should be called on any nested expressions. ``F()`` "
"objects, in particular, hold a reference to a column."
msgstr ""

msgid "The ``alias=None`` keyword argument was removed."
msgstr ""

msgid "Returns the expression ready to be sorted in ascending order."
msgstr "返回准备按升序排序的表达式。"

msgid ""
"``nulls_first`` and ``nulls_last`` define how null values are sorted. See :"
"ref:`using-f-to-sort-null-values` for example usage."
msgstr ""
"``nulls_first`` 和 ``nulls_last`` 定义了如何对空值进行排序。参见 :ref:`using-"
"f-to-sort-null-values` 的用法示例。"

msgid ""
"In older versions, ``nulls_first`` and ``nulls_last`` defaulted to ``False``."
msgstr ""

msgid ""
"Passing ``nulls_first=False`` or ``nulls_last=False`` to ``asc()`` is "
"deprecated. Use ``None`` instead."
msgstr ""

msgid "Returns the expression ready to be sorted in descending order."
msgstr "返回准备好降序排序的表达式。"

msgid ""
"Passing ``nulls_first=False`` or ``nulls_last=False`` to ``desc()`` is "
"deprecated. Use ``None`` instead."
msgstr ""

msgid ""
"Returns ``self`` with any modifications required to reverse the sort order "
"within an ``order_by`` call. As an example, an expression implementing "
"``NULLS LAST`` would change its value to be ``NULLS FIRST``. Modifications "
"are only required for expressions that implement sort order like "
"``OrderBy``. This method is called when :meth:`~django.db.models.query."
"QuerySet.reverse()` is called on a queryset."
msgstr ""
"返回 ``self``，包括在 ``order_by`` 中对排序顺序进行的任何修改。例如，一个实"
"现 ``NULLS LAST`` 的表达式将把它的值改为 ``NULLS FIRST``。只有实现排序顺序的"
"表达式，如 ``OrderBy`` 才需要修改。当 :meth:`~django.db.models.query."
"QuerySet.reverse()` 在一个查询集上被调用时，会调用这个方法。"

msgid "Writing your own Query Expressions"
msgstr "编写自己的查询表达式"

msgid ""
"You can write your own query expression classes that use, and can integrate "
"with, other query expressions. Let's step through an example by writing an "
"implementation of the ``COALESCE`` SQL function, without using the built-in :"
"ref:`Func() expressions <func-expressions>`."
msgstr ""
"你可以编写你自己的查询表达式类，这些类使用并可以与其他查询表达式集成。让我们"
"通过一个例子，在不使用内置的 :ref:`Func() 表达式 <func-expressions>` 的情况"
"下，编写一个 ``COALESCE`` SQL 函数的实现。"

msgid ""
"The ``COALESCE`` SQL function is defined as taking a list of columns or "
"values. It will return the first column or value that isn't ``NULL``."
msgstr ""
"``COALESCE`` SQL 函数被定义为接收一个列或值的列表，它将返回第一个不是 "
"``NULL`` 的列或值。它将返回第一个不是 ``NULL`` 的列或值。"

msgid ""
"We'll start by defining the template to be used for SQL generation and an "
"``__init__()`` method to set some attributes::"
msgstr ""
"我们将首先定义用于生成 SQL 的模板和一个 ``__init__()`` 方法来设置一些属性："

msgid ""
"We do some basic validation on the parameters, including requiring at least "
"2 columns or values, and ensuring they are expressions. We are requiring :"
"ref:`output_field<output-field>` here so that Django knows what kind of "
"model field to assign the eventual result to."
msgstr ""

msgid ""
"Now we implement the preprocessing and validation. Since we do not have any "
"of our own validation at this point, we delegate to the nested expressions::"
msgstr ""

msgid "Next, we write the method responsible for generating the SQL::"
msgstr "接下来，我们编写负责生成 SQL 的方法："

msgid ""
"``as_sql()`` methods can support custom keyword arguments, allowing "
"``as_vendorname()`` methods to override data used to generate the SQL "
"string. Using ``as_sql()`` keyword arguments for customization is preferable "
"to mutating ``self`` within ``as_vendorname()`` methods as the latter can "
"lead to errors when running on different database backends. If your class "
"relies on class attributes to define data, consider allowing overrides in "
"your ``as_sql()`` method."
msgstr ""
"``as_sql()`` 方法可以支持自定义关键字参数，允许 ``as_vendorname()`` 方法覆盖"
"用于生成 SQL 字符串的数据。使用 ``as_sql()`` 关键字参数进行自定义最好是在 "
"``as_vendorname()`` 方法中突变 ``self``，因为后者在不同的数据库后端运行时可能"
"会导致错误。如果你的类依赖于类属性来定义数据，可以考虑在你的 ``as_sql()`` 方"
"法中允许覆盖。"

msgid ""
"We generate the SQL for each of the ``expressions`` by using the ``compiler."
"compile()`` method, and join the result together with commas. Then the "
"template is filled out with our data and the SQL and parameters are returned."
msgstr ""
"我们使用 ``compiler.compile()`` 方法为每个 ``expressions`` 生成 SQL，并将结果"
"用逗号连接起来。然后在模板中填入我们的数据，并返回 SQL 和参数。"

msgid ""
"We've also defined a custom implementation that is specific to the Oracle "
"backend. The ``as_oracle()`` function will be called instead of ``as_sql()`` "
"if the Oracle backend is in use."
msgstr ""
"我们还定义了一个专门针对 Oracle 后端的自定义实现。如果使用 Oracle 后端，将调"
"用 ``as_oracle()`` 函数，而不是 ``as_sql()``。"

msgid ""
"Finally, we implement the rest of the methods that allow our query "
"expression to play nice with other query expressions::"
msgstr ""
"最后，我们实现了其余的方法，使我们的查询表达式能够与其他查询表达式很好地配"
"合："

msgid "Let's see how it works:"
msgstr ""

msgid "Avoiding SQL injection"
msgstr "避免 SQL 注入"

msgid ""
"Since a ``Func``'s keyword arguments for ``__init__()``  (``**extra``) and "
"``as_sql()`` (``**extra_context``) are interpolated into the SQL string "
"rather than passed as query parameters (where the database driver would "
"escape them), they must not contain untrusted user input."
msgstr ""
"由于 ``Func`` 的关键字参数 ``__init__()`` （``**extra``）和 ``as_sql()`` "
"（``**extra_context``）的参数是内插到 SQL 字符串中，而不是作为查询参数传递的"
"（数据库驱动程序会对其进行转义处理），因此它们不能包含不受信任的用户输入。"

msgid ""
"For example, if ``substring`` is user-provided, this function is vulnerable "
"to SQL injection::"
msgstr "例如，如果 ``substring`` 是用户提供的，这个函数就容易被 SQL 注入："

msgid ""
"This function generates an SQL string without any parameters. Since "
"``substring`` is passed to ``super().__init__()`` as a keyword argument, "
"it's interpolated into the SQL string before the query is sent to the "
"database."
msgstr ""
"这个函数在没有任何参数的情况下生成一个 SQL 字符串。由于 ``substring`` 是作为"
"关键字参数传递给 ``super().__init__()`` 的，所以在将查询发送到数据库之前，它"
"就被插入到 SQL 字符串中。"

msgid "Here's a corrected rewrite::"
msgstr "下面是更正后的改写："

msgid ""
"With ``substring`` instead passed as a positional argument, it'll be passed "
"as a parameter in the database query."
msgstr "用 ``substring`` 代替作为位置参数传递，它将作为数据库查询的参数传递。"

msgid "Adding support in third-party database backends"
msgstr "在第三方数据库后端增加支持"

msgid ""
"If you're using a database backend that uses a different SQL syntax for a "
"certain function, you can add support for it by monkey patching a new method "
"onto the function's class."
msgstr ""
"如果你使用的数据库后端对某个函数使用了不同的 SQL 语法，你可以通过在函数的类上"
"打一个新的方法来增加对它的支持。"

msgid ""
"Let's say we're writing a backend for Microsoft's SQL Server which uses the "
"SQL ``LEN`` instead of ``LENGTH`` for the :class:`~functions.Length` "
"function. We'll monkey patch a new method called ``as_sqlserver()`` onto the "
"``Length`` class::"
msgstr ""
"比方说，我们正在为微软的 SQL Server 编写一个后端，它使用 SQL 的 ``LEN`` 而不"
"是 ``LENGTH`` 来实现 :class:`~functions.Length` 函数。我们将把一个名为 "
"``as_sqlserver()`` 的新方法移植到 ``Length`` 类上："

msgid ""
"You can also customize the SQL using the ``template`` parameter of "
"``as_sql()``."
msgstr "你也可以使用 ``as_sql()`` 的 ``template`` 参数自定义 SQL。"

msgid ""
"We use ``as_sqlserver()`` because ``django.db.connection.vendor`` returns "
"``sqlserver`` for the backend."
msgstr ""
"我们使用 ``as_sqlserver()``，因为 ``django.db.connection.vendor`` 返回 "
"``sqlserver`` 作为后端。"

msgid ""
"Third-party backends can register their functions in the top level "
"``__init__.py`` file of the backend package or in a top level ``expressions."
"py`` file (or package) that is imported from the top level ``__init__.py``."
msgstr ""
"第三方后端可以在后端包的顶层 ``__init__.py`` 文件或从顶层 ``__init__.py`` 导"
"入的顶层 ``expressions.py`` 文件（或包）中注册它们的函数。"

msgid ""
"For user projects wishing to patch the backend that they're using, this code "
"should live in an :meth:`AppConfig.ready()<django.apps.AppConfig.ready>` "
"method."
msgstr ""
"对于希望给自己正在使用的后端打补丁的用户项目来说，这段代码应该存在于 :meth:"
"`AppConfig.ready()<django.app.AppConfig.ready>` 方法中。"

msgid "Model field reference"
msgstr "模型字段参考"

msgid ""
"This document contains all the API references of :class:`Field` including "
"the `field options`_ and `field types`_ Django offers."
msgstr ""
"本文档包含 :class:`Field` 类的所有 API 参考，包括 `字段选项`_ 和 `字段类型"
"`_。"

msgid ""
"If the built-in fields don't do the trick, you can try `django-localflavor "
"<https://github.com/django/django-localflavor>`_ (`documentation <https://"
"django-localflavor.readthedocs.io/>`_), which contains assorted pieces of "
"code that are useful for particular countries and cultures."
msgstr ""
"若内置字段未满足需求，你可以试试 `django-localflavor <https://github.com/"
"django/django-localflavor>`_ （ `文档 <https://django-localflavor."
"readthedocs.io/>`_ ），它包含了针对各别国家和文件的代码。"

msgid ""
"Also, you can easily :doc:`write your own custom model fields </howto/custom-"
"model-fields>`."
msgstr ""
"当然，你也可以简单的 :doc:`编写自定义模型字段 </howto/custom-model-fields>`。"

msgid ""
"Technically, these models are defined in :mod:`django.db.models.fields`, but "
"for convenience they're imported into :mod:`django.db.models`; the standard "
"convention is to use ``from django.db import models`` and refer to fields as "
"``models.<Foo>Field``."
msgstr ""
"从技术上讲，这些方法都被定义在 :mod:`django.db.models.fields`，但为了方便，它"
"们被导入到 :mod:`django.db.models`；标准的惯例是使用 ``from django.db import "
"models`` 并利用 ``models.<Foo>Field``。"

msgid "Field options"
msgstr "字段选项"

msgid ""
"The following arguments are available to all field types. All are optional."
msgstr "以下参数对所以字段类型均有效，且是可选的。"

msgid "``null``"
msgstr "``null``"

msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""
"如果是 ``True``， Django 将在数据库中存储空值为 ``NULL``。默认为 ``False``。"

msgid ""
"Avoid using :attr:`~Field.null` on string-based fields such as :class:"
"`CharField` and :class:`TextField`. If a string-based field has "
"``null=True``, that means it has two possible values for \"no data\": "
"``NULL``, and the empty string. In most cases, it's redundant to have two "
"possible values for \"no data;\" the Django convention is to use the empty "
"string, not ``NULL``. One exception is when a :class:`CharField` has both "
"``unique=True`` and ``blank=True`` set. In this situation, ``null=True`` is "
"required to avoid unique constraint violations when saving multiple objects "
"with blank values."
msgstr ""
"避免在基于字符串的字段上使用 :attr:`~Field.null`，如 :class:`CharField` 和 :"
"class:`TextField`。如果一个基于字符串的字段有 ``null=True``，这意味着它有两种"
"可能的“无数据”值。``NULL``，和空字符串。在大多数情况下，“无数据”有两种可能的"
"值是多余的，Django 的惯例是使用空字符串，而不是 ``NULL``。一个例外是当一个 :"
"class:`CharField` 同时设置了 ``unique=True`` 和 ``blank=True``。在这种情况"
"下，``null=True`` 是需要的，以避免在保存具有空白值的多个对象时违反唯一约束。"

msgid ""
"For both string-based and non-string-based fields, you will also need to set "
"``blank=True`` if you wish to permit empty values in forms, as the :attr:"
"`~Field.null` parameter only affects database storage (see :attr:`~Field."
"blank`)."
msgstr ""
"无论是基于字符串的字段还是非字符串的字段，如果希望在表单中允许空值，还需要设"
"置 ``blank=True``，因为 :attr:`~Field.null` 参数只影响数据库的存储（参见 :"
"attr:`~Field.blank` ）。"

msgid ""
"When using the Oracle database backend, the value ``NULL`` will be stored to "
"denote the empty string regardless of this attribute."
msgstr ""
"当使用 Oracle 数据库后端时，不管这个属性是什么，都会存储 ``NULL`` 值来表示空"
"字符串。"

msgid "``blank``"
msgstr "``blank``"

msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr "如果是 ``True`` ，该字段允许为空。默认为 ``False`` 。"

msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is "
"purely database-related, whereas :attr:`~Field.blank` is validation-related. "
"If a field has ``blank=True``, form validation will allow entry of an empty "
"value. If a field has ``blank=False``, the field will be required."
msgstr ""
"注意，这与 :attr:`~Field.null` 不同。 :attr:`~Field.null` 纯属数据库相关，"
"而 :attr:`~Field.blank` 则与验证相关。如果一个字段有 ``blank=True``，表单验证"
"将允许输入一个空值。如果一个字段有 ``blank=False``，则该字段为必填字段。"

msgid "Supplying missing values"
msgstr "提供缺失值"

msgid ""
"``blank=True`` can be used with fields having ``null=False``, but this will "
"require implementing :meth:`~django.db.models.Model.clean` on the model in "
"order to programmatically supply any missing values."
msgstr ""
"``blank=True`` 可以用于 ``null=False`` 的字段，但这需要在模型上实现 :meth:"
"`~django.db.models.Model.clean`，以便以编程方式提供任何缺失值。"

msgid "``choices``"
msgstr "``choices``"

msgid ""
"A :term:`sequence` consisting itself of iterables of exactly two items (e.g. "
"``[(A, B), (A, B) ...]``) to use as choices for this field. If choices are "
"given, they're enforced by :ref:`model validation <validating-objects>` and "
"the default form widget will be a select box with these choices instead of "
"the standard text field."
msgstr ""
"一个 :term:`sequence` 本身由正好两个项目的迭代项组成（例如 ``[(A，B)，(A，"
"B)...]`` ），作为该字段的选择。如果给定了选择，它们会被 :ref:`模型验证 "
"<validating-objects>` 强制执行，默认的表单部件将是一个带有这些选择的选择框，"
"而不是标准的文本字段。"

msgid ""
"The first element in each tuple is the actual value to be set on the model, "
"and the second element is the human-readable name. For example::"
msgstr ""
"每个元组中的第一个元素是要在模型上设置的实际值，第二个元素是人可读的名称。例"
"如："

msgid ""
"Generally, it's best to define choices inside a model class, and to define a "
"suitably-named constant for each value::"
msgstr ""
"一般来说，最好在模型类内部定义选择，并为每个值定义一个合适的名称的常量："

msgid ""
"Though you can define a choices list outside of a model class and then refer "
"to it, defining the choices and names for each choice inside the model class "
"keeps all of that information with the class that uses it, and helps "
"reference the choices (e.g, ``Student.SOPHOMORE`` will work anywhere that "
"the ``Student`` model has been imported)."
msgstr ""
"虽然你可以在模型类之外定义一个选择列表，然后引用它，但在模型类内定义选择和每"
"个选择的名称，可以将所有这些信息保留在使用它的类中，并帮助引用这些选择（例"
"如，``Student.SOPHOMORE`` 将在导入 ``Student`` 模型的任何地方工作）。"

msgid ""
"You can also collect your available choices into named groups that can be "
"used for organizational purposes::"
msgstr "你还可以将你的可用选择收集到可用于组织目的的命名组中："

msgid ""
"The first element in each tuple is the name to apply to the group. The "
"second element is an iterable of 2-tuples, with each 2-tuple containing a "
"value and a human-readable name for an option. Grouped options may be "
"combined with ungrouped options within a single list (such as the "
"``'unknown'`` option in this example)."
msgstr ""
"每个元组中的第一个元素是应用于该组的名称。第二个元素是一个二元元组的迭代，每"
"个二元元组包含一个值和一个可读的选项名称。分组后的选项可与未分组的选项结合在"
"一个单一的列表中（如本例中的 ``'unknown'`` 选项）。"

msgid ""
"For each model field that has :attr:`~Field.choices` set, Django will add a "
"method to retrieve the human-readable name for the field's current value. "
"See :meth:`~django.db.models.Model.get_FOO_display` in the database API "
"documentation."
msgstr ""
"对于每一个设置了 :attr:`~Field.choice` 的模型字段，Django 会添加一个方法来检"
"索字段当前值的可读名称。参见数据库 API 文档中的 :meth:`~django.db.models."
"Model.get_FOO_display`。"

msgid ""
"Note that choices can be any sequence object -- not necessarily a list or "
"tuple. This lets you construct choices dynamically. But if you find yourself "
"hacking :attr:`~Field.choices` to be dynamic, you're probably better off "
"using a proper database table with a :class:`ForeignKey`. :attr:`~Field."
"choices` is meant for static data that doesn't change much, if ever."
msgstr ""
"请注意，选择可以是任何序列对象——不一定是列表或元组。这让你可以动态地构造选"
"择。但是如果你发现自己把 :attr:`~Field.chips` 魔改成动态的，你可能最好使用一"
"个合适的的带有 :class:`ForeignKey` 的数据库表。 :attr:`~Field.chips` 是用于静"
"态数据的，如果有的话，不应该有太大的变化。"

msgid "A new migration is created each time the order of ``choices`` changes."
msgstr "每当 ``choices`` 的顺序变动时将会创建新的迁移。"

msgid ""
"Unless :attr:`blank=False<Field.blank>` is set on the field along with a :"
"attr:`~Field.default` then a label containing ``\"---------\"`` will be "
"rendered with the select box. To override this behavior, add a tuple to "
"``choices`` containing ``None``; e.g. ``(None, 'Your String For Display')``. "
"Alternatively, you can use an empty string instead of ``None`` where this "
"makes sense - such as on a :class:`~django.db.models.CharField`."
msgstr ""
"除非 :attr:`blank=False<Field.blank>` 与 :attr:`~Field.default` 一起设置在字"
"段上，否则包含 ``\"---------\"`` 的标签将与选择框一起呈现。要覆盖这种行为，可"
"以在 ``choices`` 中添加一个包含 ``None`` 的元组，例如 ``(None, 'Your String "
"For Display')`` 。另外，你也可以在有意义的地方使用一个空字符串来代替 "
"``None`` ——比如在 :class:`~django.db.models.CharField`。"

msgid "Enumeration types"
msgstr "枚举类型"

msgid ""
"In addition, Django provides enumeration types that you can subclass to "
"define choices in a concise way::"
msgstr "此外，Django 还提供了枚举类型，你可以通过将其子类化来简洁地定义选择："

msgid ""
"These work similar to :mod:`enum` from Python's standard library, but with "
"some modifications:"
msgstr "这些工作类似于 Python 标准库中的 :mod:`enum`，但是做了一些修改。"

msgid ""
"Enum member values are a tuple of arguments to use when constructing the "
"concrete data type. Django supports adding an extra string value to the end "
"of this tuple to be used as the human-readable name, or ``label``. The "
"``label`` can be a lazy translatable string. Thus, in most cases, the member "
"value will be a ``(value, label)`` two-tuple. See below for :ref:`an example "
"of subclassing choices <field-choices-enum-subclassing>` using a more "
"complex data type. If a tuple is not provided, or the last item is not a "
"(lazy) string, the ``label`` is :ref:`automatically generated <field-choices-"
"enum-auto-label>` from the member name."
msgstr ""
"枚举成员值是构造具体数据类型时要使用的参数元组。Django 支持在这个元组的末尾添"
"加一个额外作为人可读的名称的字符串值 ``label``。``label`` 可以是一个惰性的可"
"翻译字符串。因此，在大多数情况下，成员值将是一个 ``(value, label)`` 二元组。"
"请看下面使用更复杂的数据类型 :ref:`子类化选择的例子 <field-choices-enum-"
"subclassing>`。如果没有提供元组，或者最后一项不是（惰性）字符串，``label`` 是"
"从成员名 :ref:`自动生成 <field-choices-enum-auto-label>`。"

msgid ""
"A ``.label`` property is added on values, to return the human-readable name."
msgstr "在值上添加 ``.label`` 属性，以返回人类可读的名称。"

msgid ""
"A number of custom properties are added to the enumeration classes -- ``."
"choices``, ``.labels``, ``.values``, and ``.names`` -- to make it easier to "
"access lists of those separate parts of the enumeration. Use ``.choices`` as "
"a suitable value to pass to :attr:`~Field.choices` in a field definition."
msgstr ""
"在枚举类中添加了一些自定义属性—— ``.choice``、``.labs``、``.values`` 和 ``."
"names`` ——以便于访问枚举的这些单独部分的列表。在字段定义中，使用 ``.choice`` "
"作为一个合适的值传递给 :attr:`~Field.choice`。"

msgid ""
"These property names cannot be used as member names as they would conflict."
msgstr "这些属性名称不能作为成员名称使用，因为它们会发生冲突。"

msgid ""
"The use of :func:`enum.unique()` is enforced to ensure that values cannot be "
"defined multiple times. This is unlikely to be expected in choices for a "
"field."
msgstr ""
"强制使用 :func:`enum.unique()` 是为了确保不能多次定义值。在选择一个字段时，不"
"太可能会出现这种情况。"

msgid ""
"Note that using ``YearInSchool.SENIOR``, ``YearInSchool['SENIOR']``, or "
"``YearInSchool('SR')`` to access or lookup enum members work as expected, as "
"do the ``.name`` and ``.value`` properties on the members."
msgstr ""
"请注意，使用 ``YearInSchool.SENIOR``、``YearInSchool['SENIOR']`` 或 "
"``YearInSchool('SR')`` 来访问或查找枚举成员，与成员上的 ``.name`` 和 ``."
"value`` 属性一样，都能正常工作。"

msgid ""
"If you don't need to have the human-readable names translated, you can have "
"them inferred from the member name (replacing underscores with spaces and "
"using title-case):"
msgstr ""

msgid ""
"Since the case where the enum values need to be integers is extremely "
"common, Django provides an ``IntegerChoices`` class. For example::"
msgstr ""
"由于枚举值需要为整数的情况极为常见，Django 提供了一个 ``IntegerChoices`` 类。"
"例如："

msgid ""
"It is also possible to make use of the `Enum Functional API <https://docs."
"python.org/3/howto/enum.html#functional-api>`_ with the caveat that labels "
"are automatically generated as highlighted above:"
msgstr ""

msgid ""
"If you require support for a concrete data type other than ``int`` or "
"``str``, you can subclass ``Choices`` and the required concrete data type, e."
"g. :class:`~datetime.date` for use with :class:`~django.db.models."
"DateField`::"
msgstr ""
"如果你需要支持 ``int`` 或 ``str`` 以外的具体数据类型，你可以将 ``Choices`` 和"
"所需的具体数据类型子类化，例如 :class:`~datetime.date` 与 :class:`~django.db."
"models.DateField` 一起使用："

msgid "There are some additional caveats to be aware of:"
msgstr "还有一些注意事项需要注意："

msgid ""
"Enumeration types do not support :ref:`named groups <field-choices-named-"
"groups>`."
msgstr "枚举类型不支持 :ref:`命名组 <field-choices-named-groups>`。"

msgid ""
"Because an enumeration with a concrete data type requires all values to "
"match the type, overriding the :ref:`blank label <field-choices-blank-"
"label>` cannot be achieved by creating a member with a value of ``None``. "
"Instead, set the ``__empty__`` attribute on the class::"
msgstr ""
"因为具有具体数据类型的枚举要求所有值都与类型相匹配，所以不能通过创建一个值为 "
"``None`` 的成员来覆盖 :ref:`空白标签 <field-choices-blank-label>`。相反，在类"
"上设置 ``__empty__`` 属性："

msgid "``db_column``"
msgstr "``db_column``"

msgid ""
"The name of the database column to use for this field. If this isn't given, "
"Django will use the field's name."
msgstr "这个字段要使用的数据库列名。如果没有给出列名，Django 将使用字段名。"

msgid ""
"If your database column name is an SQL reserved word, or contains characters "
"that aren't allowed in Python variable names -- notably, the hyphen -- "
"that's OK. Django quotes column and table names behind the scenes."
msgstr ""
"如果你的数据库列名是 SQL 的保留字，或者包含了 Python 变量名中不允许的字符——特"
"别是连字符——那也没关系。Django 会在幕后引用列名和表名。"

msgid "``db_comment``"
msgstr ""

msgid ""
"The comment on the database column to use for this field. It is useful for "
"documenting fields for individuals with direct database access who may not "
"be looking at your Django code. For example::"
msgstr ""

msgid "``db_index``"
msgstr "``db_index``"

msgid "If ``True``, a database index will be created for this field."
msgstr "如果是 ``True``，将为该字段创建数据库索引。"

msgid "Use the :attr:`~Options.indexes` option instead."
msgstr "使用 :attr:`~Options.indexes` 选项代替。"

msgid ""
"Where possible, use the :attr:`Meta.indexes <Options.indexes>` option "
"instead. In nearly all cases, :attr:`~Options.indexes` provides more "
"functionality than ``db_index``. ``db_index`` may be deprecated in the "
"future."
msgstr ""

msgid "``db_tablespace``"
msgstr "``db_tablespace``"

msgid ""
"The name of the :doc:`database tablespace </topics/db/tablespaces>` to use "
"for this field's index, if this field is indexed. The default is the "
"project's :setting:`DEFAULT_INDEX_TABLESPACE` setting, if set, or the :attr:"
"`~Options.db_tablespace` of the model, if any. If the backend doesn't "
"support tablespaces for indexes, this option is ignored."
msgstr ""
"如果这个字段有索引，那么要为这个字段的索引使用的 :doc:`数据库表空间 </topics/"
"db/tablespaces>` 的名称。默认是项目的 :setting:`DEFAULT_INDEX_TABLESPACE` 设"
"置（如果有设置），或者是模型的 :attr:`~Options.db_tablespace` （如果有）。如"
"果后端不支持索引的表空间，则忽略此选项。"

msgid "``default``"
msgstr "``default``"

msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""
"该字段的默认值。可以是一个值或者是个可调用的对象，如果是个可调用对象，每次实"
"例化模型时都会调用该对象。"

msgid ""
"The default can't be a mutable object (model instance, ``list``, ``set``, "
"etc.), as a reference to the same instance of that object would be used as "
"the default value in all new model instances. Instead, wrap the desired "
"default in a callable. For example, if you want to specify a default "
"``dict`` for :class:`~django.db.models.JSONField`, use a function::"
msgstr ""
"默认值不能是一个可更改的对象（模型实例、``list``、``set`` 等），因为对该对象"
"同一实例的引用将被用作所有新模型实例的缺省值。相反，将所需的默认值包裹在一个"
"可调用对象中。例如，如果你想为 :class:`~django.db.models.JSONField` 指定一个"
"默认的 ``dict``，使用一个函数："

msgid ""
"``lambda``\\s can't be used for field options like ``default`` because they "
"can't be :ref:`serialized by migrations <migration-serializing>`. See that "
"documentation for other caveats."
msgstr ""
"``lambda`` 不能用于 ``default`` 等字段选项，因为它们不能被 :ref:`迁移序列化 "
"<migration-serializing>`。其他注意事项见该文档。"

msgid ""
"For fields like :class:`ForeignKey` that map to model instances, defaults "
"should be the value of the field they reference (``pk`` unless :attr:"
"`~ForeignKey.to_field` is set) instead of model instances."
msgstr ""
"对于像 :class:`ForeignKey` 这样映射到模型实例的字段，默认应该是它们引用的字段"
"的值（默认是 ``pk`` 除非 :attr:`~ForeignKey.to_field` 被设置了），而不是模型"
"实例。"

msgid ""
"The default value is used when new model instances are created and a value "
"isn't provided for the field. When the field is a primary key, the default "
"is also used when the field is set to ``None``."
msgstr ""
"当创建新的模型实例且没有为该字段提供值时，使用默认值。当字段是主键时，当字段"
"设置为``None`` 时，也使用默认值。"

msgid "``editable``"
msgstr "``editable``"

msgid ""
"If ``False``, the field will not be displayed in the admin or any other :"
"class:`~django.forms.ModelForm`. They are also skipped during :ref:`model "
"validation <validating-objects>`. Default is ``True``."
msgstr ""
"如果是 ``False``，该字段将不会在管理或任何其他 :class:`~django.forms."
"ModelForm` 中显示。在 :ref:`模型验证 <validating-objects>` 中也会跳过。默认"
"为 ``True``。"

msgid ""
"The ``error_messages`` argument lets you override the default messages that "
"the field will raise. Pass in a dictionary with keys matching the error "
"messages you want to override."
msgstr ""
"``error_messages`` 参数可以让你覆盖该字段引发的默认消息。传入一个与你想覆盖的"
"错误信息相匹配的键值的字典。"

msgid ""
"Error message keys include ``null``, ``blank``, ``invalid``, "
"``invalid_choice``, ``unique``, and ``unique_for_date``. Additional error "
"message keys are specified for each field in the `Field types`_ section "
"below."
msgstr ""
"错误信息键包括 ``null``、``blank``、``invalid``、``invalid_choice``、"
"``unique`` 和 ``unique_for_date``。在下面的 `字段类型`_ 一节中为每个字段指定"
"了额外的错误信息键。"

msgid ""
"These error messages often don't propagate to forms. See :ref:"
"`considerations-regarding-model-errormessages`."
msgstr ""
"这些错误信息通常不会传播到表单中。参见 :ref:`considerations-regarding-model-"
"errormessages`。"

msgid ""
"Extra \"help\" text to be displayed with the form widget. It's useful for "
"documentation even if your field isn't used on a form."
msgstr ""
"额外的“帮助”文本，随表单控件一同显示。即便你的字段未用于表单，它对于生成文档"
"也是很有用的。"

msgid ""
"Note that this value is *not* HTML-escaped in automatically-generated forms. "
"This lets you include HTML in :attr:`~Field.help_text` if you so desire. For "
"example::"
msgstr ""
"请注意，在自动生成的表格中，这个值 *不是* HTML 转义的。如果你愿意的话，你可以"
"在 :attr:`~Field.help_text` 中加入 HTML。例如："

msgid ""
"Alternatively you can use plain text and :func:`django.utils.html.escape` to "
"escape any HTML special characters. Ensure that you escape any help text "
"that may come from untrusted users to avoid a cross-site scripting attack."
msgstr ""
"或者你可以使用纯文本和 :func:`django.utils.html.escape` 来转义任何 HTML 特殊"
"字符。确保你转义任何可能来自不受信任的用户的帮助文本，以避免跨站脚本攻击。"

msgid "``primary_key``"
msgstr "``primary_key``"

msgid "If ``True``, this field is the primary key for the model."
msgstr "如果设置为 ``True`` ，将该字段设置为该模型的主键。"

msgid ""
"If you don't specify ``primary_key=True`` for any field in your model, "
"Django will automatically add a field to hold the primary key, so you don't "
"need to set ``primary_key=True`` on any of your fields unless you want to "
"override the default primary-key behavior. The type of auto-created primary "
"key fields can be specified per app in :attr:`AppConfig.default_auto_field "
"<django.apps.AppConfig.default_auto_field>` or globally in the :setting:"
"`DEFAULT_AUTO_FIELD` setting. For more, see :ref:`automatic-primary-key-"
"fields`."
msgstr ""
"如果你没有为模型中的任何字段指定 ``primary_key=True``，Django 会自动添加一个"
"字段来保存主键，所以你不需要在任何字段上设置 `primary_key=True`，除非你想覆盖"
"默认主键行为。自动创建的主键字段的类型可以在 :attr:`AppConfig."
"default_auto_field <django.apps.AppConfig.default_auto_field>` 中为每个应用程"
"序指定，或者在 :setting:`DEFAULT_AUTO_FIELD` 配置中全局指定。更多信息，请参"
"阅 :ref:`automatic-primary-key-fields`。"

msgid ""
"``primary_key=True`` implies :attr:`null=False <Field.null>` and :attr:"
"`unique=True <Field.unique>`. Only one primary key is allowed on an object."
msgstr ""
"``primary_key=True`` 意味着 :attr:`null=False <Field.null>` 和 :attr:"
"`unique=True <Field.unique>`。一个对象只允许有一个主键。"

msgid ""
"The primary key field is read-only. If you change the value of the primary "
"key on an existing object and then save it, a new object will be created "
"alongside the old one."
msgstr ""
"主键字段是只读的。如果您改变了现有对象的主键值，然后将其保存，则会在旧对象旁"
"边创建一个新对象。"

msgid ""
"The primary key field is set to ``None`` when :meth:`deleting <django.db."
"models.Model.delete>` an object."
msgstr ""

msgid "If ``True``, this field must be unique throughout the table."
msgstr "如果设置为 ``True``，这个字段必须在整个表中保持值唯一。"

msgid ""
"This is enforced at the database level and by model validation. If you try "
"to save a model with a duplicate value in a :attr:`~Field.unique` field, a :"
"exc:`django.db.IntegrityError` will be raised by the model's :meth:`~django."
"db.models.Model.save` method."
msgstr ""
"这是在数据库级别和模型验证中强制执行的。如果你试图保存一个在 :attr:`~Field."
"unique` 字段中存在重复值的模型，模型的 :meth:`~django.db.models.Model.save` "
"方法将引发 :exc:`django.db.IntegrityError`。"

msgid ""
"This option is valid on all field types except :class:`ManyToManyField` and :"
"class:`OneToOneField`."
msgstr ""
"除了 :class:`ManyToManyField` 和 :class:`OneToOneField` 之外，该选项对所有字"
"段类型有效。"

msgid ""
"Note that when ``unique`` is ``True``, you don't need to specify :attr:"
"`~Field.db_index`, because ``unique`` implies the creation of an index."
msgstr ""
"请注意，当 ``unique`` 为 ``True`` 时，你不需要指定 :attr:`~Field.db_index`，"
"因为 ``unique`` 意味着创建一个索引。"

msgid "``unique_for_date``"
msgstr "``unique_for_date``"

msgid ""
"Set this to the name of a :class:`DateField` or :class:`DateTimeField` to "
"require that this field be unique for the value of the date field."
msgstr ""
"将其设置为 :class:`DateField` 或 :class:`DateTimeField` 的名称，要求该字段的"
"日期字段值是唯一的。"

msgid ""
"For example, if you have a field ``title`` that has "
"``unique_for_date=\"pub_date\"``, then Django wouldn't allow the entry of "
"two records with the same ``title`` and ``pub_date``."
msgstr ""
"例如，如果你的字段 ``title`` 有 ``unique_for_date=\"pub_date\"``，那么 "
"Django 就不允许输入两条相同 ``title`` 和 ``pub_date`` 的记录。"

msgid ""
"Note that if you set this to point to a :class:`DateTimeField`, only the "
"date portion of the field will be considered. Besides, when :setting:"
"`USE_TZ` is ``True``, the check will be performed in the :ref:`current time "
"zone <default-current-time-zone>` at the time the object gets saved."
msgstr ""
"请注意，如果将其设置为指向 :class:`DateTimeField`，则只考虑该字段的日期部分。"
"此外，当 :setting:`USE_TZ` 为 ``True`` 时，检查将在对象保存时的 :ref:`当前时"
"区 <default-current-time-zone>` 中进行。"

msgid ""
"This is enforced by :meth:`Model.validate_unique()` during model validation "
"but not at the database level. If any :attr:`~Field.unique_for_date` "
"constraint involves fields that are not part of a :class:`~django.forms."
"ModelForm` (for example, if one of the fields is listed in ``exclude`` or "
"has :attr:`editable=False<Field.editable>`), :meth:`Model.validate_unique()` "
"will skip validation for that particular constraint."
msgstr ""
"这在模型验证过程中由 :meth:`Model.validate_unique()` 强制执行，但在数据库级别"
"上不执行。如果任何 :attr:`~Field.unique_for_date` 约束涉及的字段不属于 :"
"class:`~django.forms.ModelForm` （例如，如果其中一个字段被列在``exclude``中，"
"或者有 :attr:`editable=False<Field.editable>` ）， :meth:`Model."
"validate_unique()` 将跳过对该特定约束的验证。"

msgid "``unique_for_month``"
msgstr "``unique_for_month``"

msgid ""
"Like :attr:`~Field.unique_for_date`, but requires the field to be unique "
"with respect to the month."
msgstr "像 :attr:`~Field.unique_for_date` 一样，但要求字段对月份是唯一的。"

msgid "``unique_for_year``"
msgstr "``unique_for_year``"

msgid ""
"Like :attr:`~Field.unique_for_date` and :attr:`~Field.unique_for_month`."
msgstr "如 :attr:`~Field.unique_fordate` 和 :attr:`~Field.unique_formonth`。"

msgid "``verbose_name``"
msgstr "``verbose_name``"

msgid ""
"A human-readable name for the field. If the verbose name isn't given, Django "
"will automatically create it using the field's attribute name, converting "
"underscores to spaces. See :ref:`Verbose field names <verbose-field-names>`."
msgstr ""
"字段的一个人类可读名称，如果没有给定详细名称，Django 会使用字段的属性名自动创"
"建，并将下划线转换为空格。参见 :ref:`详细字段名 <verbose-field-names>`。"

msgid ""
"A list of validators to run for this field. See the :doc:`validators "
"documentation </ref/validators>` for more information."
msgstr ""
"要为该字段运行的验证器列表。更多信息请参见 :doc:`验证器文档 </ref/"
"validators>`。"

msgid "Field types"
msgstr "字段类型"

msgid "``AutoField``"
msgstr "``AutoField``"

msgid ""
"An :class:`IntegerField` that automatically increments according to "
"available IDs. You usually won't need to use this directly; a primary key "
"field will automatically be added to your model if you don't specify "
"otherwise. See :ref:`automatic-primary-key-fields`."
msgstr ""
"一个 :class:`IntegerField`，根据可用的 ID 自动递增。你通常不需要直接使用它；"
"如果你没有指定，主键字段会自动添加到你的模型中。参见 :ref:`automatic-primary-"
"key-fields`。"

msgid "``BigAutoField``"
msgstr "``BigAutoField``"

msgid ""
"A 64-bit integer, much like an :class:`AutoField` except that it is "
"guaranteed to fit numbers from ``1`` to ``9223372036854775807``."
msgstr ""
"一个 64 位整数，与 :class:`AutoField` 很相似，但保证适合 ``1`` 到 "
"``9223372036854775807`` 的数字。"

msgid "``BigIntegerField``"
msgstr "``BigIntegerField``"

msgid ""
"A 64-bit integer, much like an :class:`IntegerField` except that it is "
"guaranteed to fit numbers from ``-9223372036854775808`` to "
"``9223372036854775807``. The default form widget for this field is a :class:"
"`~django.forms.NumberInput`."
msgstr ""
"一个 64 位的整数，和 :class:`IntegerField` 很像，只是它保证适合从 "
"``-9223372036854775808`` 到 ``9223372036854775807`` 的数字。该字段的默认表单"
"部件是一个 :class:`~django.forms.NumberInput`。"

msgid "``BinaryField``"
msgstr "``BinaryField``"

msgid ""
"A field to store raw binary data. It can be assigned :class:`bytes`, :class:"
"`bytearray`, or :class:`memoryview`."
msgstr ""
"一个用于存储原始二进制数据的字段。可以指定为 :class:`bytes`、:class:"
"`bytearray` 或 :class:`memoryview`。"

msgid ""
"By default, ``BinaryField`` sets :attr:`~Field.editable` to ``False``, in "
"which case it can't be included in a :class:`~django.forms.ModelForm`."
msgstr ""
"默认情况下，``BinaryField`` 将 :attr:`~Field.ediditable`` 设置为 ``False``，"
"在这种情况下，它不能被包含在 :class:`~django.forms.ModelForm` 中。"

msgid ""
"Optional. The maximum length (in bytes) of the field. The maximum length is "
"enforced in Django's validation using :class:`~django.core.validators."
"MaxLengthValidator`."
msgstr ""

msgid "Abusing ``BinaryField``"
msgstr "滥用 ``BinaryField``"

msgid ""
"Although you might think about storing files in the database, consider that "
"it is bad design in 99% of the cases. This field is *not* a replacement for "
"proper :doc:`static files </howto/static-files/index>` handling."
msgstr ""
"虽然你可能会想到在数据库中存储文件，但考虑到这在99%的情况下是糟糕的设计。这个"
"字段 *不能* 代替正确的 :doc:`静态文件 </howto/static-files/index>` 处理。"

msgid "A true/false field."
msgstr "一个 true／false 字段。"

msgid ""
"The default form widget for this field is :class:`~django.forms."
"CheckboxInput`, or :class:`~django.forms.NullBooleanSelect` if :attr:"
"`null=True <Field.null>`."
msgstr ""
"该字段的默认表单部件是 :class:`~django.forms.CheckboxInput`，或者如果 :attr:"
"`null=True <Field.null>` 则是 :class:`~django.forms.NullBooleanSelect`。"

msgid ""
"The default value of ``BooleanField`` is ``None`` when :attr:`Field.default` "
"isn't defined."
msgstr ""
"当 :attr:`Field.default` 没有定义时，``BooleanField`` 的默认值是 ``None``。"

msgid "A string field, for small- to large-sized strings."
msgstr "一个字符串字段，适用于小到大的字符串。"

msgid "For large amounts of text, use :class:`~django.db.models.TextField`."
msgstr "对于大量的文本，使用 :class:`~django.db.models.TextField`。"

msgid ""
"The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr "该字段的默认表单部件是一个 :class:`~django.forms.TextInput`。"

msgid ":class:`CharField` has the following extra arguments:"
msgstr ""

msgid ""
"The maximum length (in characters) of the field. The ``max_length`` is "
"enforced at the database level and in Django's validation using :class:"
"`~django.core.validators.MaxLengthValidator`. It's required for all database "
"backends included with Django except PostgreSQL, which supports unlimited "
"``VARCHAR`` columns."
msgstr ""

msgid ""
"If you are writing an application that must be portable to multiple database "
"backends, you should be aware that there are restrictions on ``max_length`` "
"for some backends. Refer to the :doc:`database backend notes </ref/"
"databases>` for details."
msgstr ""
"如果你编写的应用程序必须可移植到多个数据库后端，你应该意识到，有些后端对 "
"``max_length`` 有限制。详情请参考 :doc:`数据库后端注释 </ref/databases>`。"

msgid "Support for unlimited ``VARCHAR`` columns was added on PostgreSQL."
msgstr ""

msgid "Optional. The database collation name of the field."
msgstr "可选的。该字段的数据库字符序名称。"

msgid ""
"Collation names are not standardized. As such, this will not be portable "
"across multiple database backends."
msgstr "字符序名称是不标准化的。因此，这将无法在多个数据库后端之间进行移植。"

msgid ""
"Oracle supports collations only when the ``MAX_STRING_SIZE`` database "
"initialization parameter is set to ``EXTENDED``."
msgstr ""
"Oracle 只有在 ``MAX_STRING_SIZE`` 数据库初始化参数被设置为 ``EXTENDED`` 时，"
"才支持字符序。"

msgid ""
"A date, represented in Python by a ``datetime.date`` instance. Has a few "
"extra, optional arguments:"
msgstr ""
"一个日期，在 Python 中用一个 ``datetime.date`` 实例表示。有一些额外的、可选的"
"参数。"

msgid ""
"Automatically set the field to now every time the object is saved. Useful "
"for \"last-modified\" timestamps. Note that the current date is *always* "
"used; it's not just a default value that you can override."
msgstr ""
"每次保存对象时，自动将该字段设置为现在。对于“最后修改”的时间戳很有用。请注"
"意，当前日期 *总是* 被使用，而不仅仅是一个你可以覆盖的默认值。"

msgid ""
"The field is only automatically updated when calling :meth:`Model.save() "
"<django.db.models.Model.save>`. The field isn't updated when making updates "
"to other fields in other ways such as :meth:`QuerySet.update() <django.db."
"models.query.QuerySet.update>`, though you can specify a custom value for "
"the field in an update like that."
msgstr ""
"只有在调用 :meth:`Model.save() <django.db.models.Model.save>` 时，该字段才会"
"自动更新。当以其他方式对其他字段进行更新时，如 :meth:`QuerySet.update() "
"<django.db.models.query.QuerySet.update>`，该字段不会被更新，尽管你可以在这样"
"的更新中为该字段指定一个自定义值。"

msgid ""
"Automatically set the field to now when the object is first created. Useful "
"for creation of timestamps. Note that the current date is *always* used; "
"it's not just a default value that you can override. So even if you set a "
"value for this field when creating the object, it will be ignored. If you "
"want to be able to modify this field, set the following instead of "
"``auto_now_add=True``:"
msgstr ""
"当第一次创建对象时，自动将该字段设置为现在。对创建时间戳很有用。请注意，当前"
"日期是 *始终* 使用的；它不是一个你可以覆盖的默认值。因此，即使你在创建对象时"
"为该字段设置了一个值，它也会被忽略。如果你想修改这个字段，可以设置以下内容来"
"代替 ``auto_now_add=True`` ："

msgid ""
"For :class:`DateField`: ``default=date.today`` - from :meth:`datetime.date."
"today`"
msgstr ""
"对于 :class:`DateField`: ``default=date.today`` ——来自 :meth:`datetime.date."
"today`"

msgid ""
"For :class:`DateTimeField`: ``default=timezone.now`` - from :func:`django."
"utils.timezone.now`"
msgstr ""
"对于 :class:`DateTimeField`: ``default=timezone.now`` ——来自 :func:`django."
"utils.timezone.now`"

msgid ""
"The default form widget for this field is a :class:`~django.forms."
"DateInput`. The admin adds a JavaScript calendar, and a shortcut for "
"\"Today\". Includes an additional ``invalid_date`` error message key."
msgstr ""
"该字段的默认表单部件是一个 :class:`~django.forms.DateInput`。管理中增加了一"
"个 JavaScript 日历，以及“今天”的快捷方式。包含一个额外的 ``invalid_date`` 错"
"误信息键。"

msgid ""
"The options ``auto_now_add``, ``auto_now``, and ``default`` are mutually "
"exclusive. Any combination of these options will result in an error."
msgstr ""
"``auto_now_add``、``auto_now`` 和 ``default`` 选项是相互排斥的。这些选项的任"
"何组合都会导致错误。"

msgid ""
"As currently implemented, setting ``auto_now`` or ``auto_now_add`` to "
"``True`` will cause the field to have ``editable=False`` and ``blank=True`` "
"set."
msgstr ""
"目前，将 ``auto_now`` 或 ``auto_now_add`` 设置为 ``True``，将导致该字段设置"
"为 ``editable=False`` 和 ``blank=True``。"

msgid ""
"The ``auto_now`` and ``auto_now_add`` options will always use the date in "
"the :ref:`default timezone <default-current-time-zone>` at the moment of "
"creation or update. If you need something different, you may want to "
"consider using your own callable default or overriding ``save()`` instead of "
"using ``auto_now`` or ``auto_now_add``; or using a ``DateTimeField`` instead "
"of a ``DateField`` and deciding how to handle the conversion from datetime "
"to date at display time."
msgstr ""
"``auto_now`` 和 ``auto_now_add`` 选项将始终使用创建或更新时 :ref:`默认时区 "
"<default-current-time-zone>` 的日期。如果你需要一些不同的东西，你可能需要考虑"
"使用你自己的可调用的默认值，或者覆盖 ``save()`` 而不是使用 ``auto_now`` 或 "
"``auto_now_add`` ；或者使用 ``DateTimeField`` 而不是 ``DateField``，并决定如"
"何在显示时间处理从日期时间到日期的转换。"

msgid ""
"A date and time, represented in Python by a ``datetime.datetime`` instance. "
"Takes the same extra arguments as :class:`DateField`."
msgstr ""
"一个日期和时间，在 Python 中用一个 ``datetime.datetime`` 实例表示。与 :class:"
"`DateField` 一样，使用相同的额外参数。"

msgid ""
"The default form widget for this field is a single :class:`~django.forms."
"DateTimeInput`. The admin uses two separate :class:`~django.forms.TextInput` "
"widgets with JavaScript shortcuts."
msgstr ""
"该字段的默认表单部件是一个单独的 :class:`~django.forms.DateTimeInput`。管理中"
"使用两个单独的 :class:`~django.forms.TextInput` 部件，并使用 JavaScript 快捷"
"方式。"

msgid ""
"A fixed-precision decimal number, represented in Python by a :class:"
"`~decimal.Decimal` instance. It validates the input using :class:`~django."
"core.validators.DecimalValidator`."
msgstr ""
"一个固定精度的十进制数，在 Python 中用一个 :class:`~decimal.Decimal` 实例来表"
"示。它使用 :class:`~django.core.validators.DecimalValidator` 验证输入。"

msgid "Has the following **required** arguments:"
msgstr ""

msgid ""
"The maximum number of digits allowed in the number. Note that this number "
"must be greater than or equal to ``decimal_places``."
msgstr ""
"数字中允许的最大位数。请注意，这个数字必须大于或等于 ``decimal_places``。"

msgid "The number of decimal places to store with the number."
msgstr "与数字一起存储的小数位数。"

msgid ""
"For example, to store numbers up to ``999.99`` with a resolution of 2 "
"decimal places, you'd use::"
msgstr ""
"例如，要存储最高为 ``999.99`` 的数字，精度为小数点后 2 位，你可以使用："

msgid ""
"And to store numbers up to approximately one billion with a resolution of 10 "
"decimal places::"
msgstr "并以 10 位小数的精度来存储最多约 10 亿的数字："

msgid ""
"The default form widget for this field is a :class:`~django.forms."
"NumberInput` when :attr:`~django.forms.Field.localize` is ``False`` or :"
"class:`~django.forms.TextInput` otherwise."
msgstr ""
"当 :attr:`~django.forms.Field.localize` 为 ``False`` 时是 :class:`~django."
"forms.NumberInput` 否则，该字段的默认表单部件是 :class:`~django.forms."
"TextInput`。"

msgid ""
"For more information about the differences between the :class:`FloatField` "
"and :class:`DecimalField` classes, please see :ref:`FloatField vs. "
"DecimalField <floatfield_vs_decimalfield>`. You should also be aware of :ref:"
"`SQLite limitations <sqlite-decimal-handling>` of decimal fields."
msgstr ""
"关于 :class:`FloatField` 和 :class:`DecimalField` 类之间差异的更多信息，请参"
"见 :ref:`FloatField vs. DecimalField <floatfield_vs_decimalfield>`。你还应该"
"注意小数字段的 :ref:`SQLite 限制 <sqlite-decimal-handling>`。"

msgid ""
"A field for storing periods of time - modeled in Python by :class:`~python:"
"datetime.timedelta`. When used on PostgreSQL, the data type used is an "
"``interval`` and on Oracle the data type is ``INTERVAL DAY(9) TO "
"SECOND(6)``. Otherwise a ``bigint`` of microseconds is used."
msgstr ""
"一个用于存储时间段的字段——在 Python 中用 :class:`~python:datetime.timedelta` "
"建模。当在 PostgreSQL 上使用时，使用的数据类型是 ``interval``，在 Oracle 上使"
"用的数据类型是 ``INTERVAL DAY(9) TO SECOND(6)``。否则使用微秒的 ``bigint``。"

msgid ""
"Arithmetic with ``DurationField`` works in most cases. However on all "
"databases other than PostgreSQL, comparing the value of a ``DurationField`` "
"to arithmetic on ``DateTimeField`` instances will not work as expected."
msgstr ""
"``DurationField`` 的算术在大多数情况下是可行的。但在 PostgreSQL 以外的所有数"
"据库中，将 ``DurationField`` 的值与 ``DateTimeField`` 实例上的算术进行比较，"
"将无法达到预期的效果。"

msgid ""
"A :class:`CharField` that checks that the value is a valid email address "
"using :class:`~django.core.validators.EmailValidator`."
msgstr ""
"一个 :class:`CharField`，使用 :class:`~django.core.validators."
"EmailValidator` 来检查该值是否为有效的电子邮件地址。"

msgid "A file-upload field."
msgstr "一个文件上传字段"

msgid ""
"The ``primary_key`` argument isn't supported and will raise an error if used."
msgstr "``primary_key`` 参数不支持，如果使用，会引起错误。"

msgid "Has the following optional arguments:"
msgstr ""

msgid ""
"This attribute provides a way of setting the upload directory and file name, "
"and can be set in two ways. In both cases, the value is passed to the :meth:"
"`Storage.save() <django.core.files.storage.Storage.save>` method."
msgstr ""
"这个属性提供了一种设置上传目录和文件名的方式，可以有两种设置方式。在这两种情"
"况下，值都会传递给 :meth:`Storage.save() <django.core.files.storage.Storage."
"save>` 方法。"

msgid ""
"If you specify a string value or a :class:`~pathlib.Path`, it may contain :"
"func:`~time.strftime` formatting, which will be replaced by the date/time of "
"the file upload (so that uploaded files don't fill up the given directory). "
"For example::"
msgstr ""
"如果你指定一个字符串值或一个 :class:`~pathlib.Path`，它可能包含 :func:`~time."
"strftime` 格式，它将被文件上传的日期／时间所代替（这样上传的文件就不会填满指"
"定的目录）。例如："

msgid ""
"If you are using the default :class:`~django.core.files.storage."
"FileSystemStorage`, the string value will be appended to your :setting:"
"`MEDIA_ROOT` path to form the location on the local filesystem where "
"uploaded files will be stored. If you are using a different storage, check "
"that storage's documentation to see how it handles ``upload_to``."
msgstr ""
"如果你使用的是默认的 :class:`~django.core.files.storage.FileSystemStorage`，"
"这个字符串的值将被附加到你的 :setting:`MEDIA_ROOT` 路径后面，形成本地文件系统"
"中上传文件的存储位置。如果你使用的是不同的存储系统，请检查该存储系统的文档，"
"看看它是如何处理 ``upload_to`` 的。"

msgid ""
"``upload_to`` may also be a callable, such as a function. This will be "
"called to obtain the upload path, including the filename. This callable must "
"accept two arguments and return a Unix-style path (with forward slashes) to "
"be passed along to the storage system. The two arguments are:"
msgstr ""
"``upload_to`` 也可以是一个可调用对象，如函数。这个函数将被调用以获得上传路"
"径，包括文件名。这个可调用对象必须接受两个参数，并返回一个 Unix 风格的路径"
"（带斜线），以便传给存储系统。这两个参数是："

msgid "``instance``"
msgstr "``instance``"

msgid ""
"An instance of the model where the ``FileField`` is defined. More "
"specifically, this is the particular instance where the current file is "
"being attached."
msgstr ""
"定义 ``FileField`` 的模型实例。更具体地说，这是附加当前文件的特定实例。"

msgid ""
"In most cases, this object will not have been saved to the database yet, so "
"if it uses the default ``AutoField``, *it might not yet have a value for its "
"primary key field*."
msgstr ""
"在大多数情况下，这个对象还没有被保存到数据库，所以如果它使用默认的 "
"``AutoField``，*它的主键字段可能还没有一个值*。"

msgid "``filename``"
msgstr "``filename``"

msgid ""
"The filename that was originally given to the file. This may or may not be "
"taken into account when determining the final destination path."
msgstr ""
"最初给文件的文件名。在确定最终目标路径时，可能会考虑到，也可能不会考虑到。"

msgid ""
"A storage object, or a callable which returns a storage object. This handles "
"the storage and retrieval of your files. See :doc:`/topics/files` for "
"details on how to provide this object."
msgstr ""
"一个存储对象，或是一个返回存储对象的可调用对象。它处理你的文件的存储和检索。"
"参见 :doc:`/topics/files`，了解如何提供这个对象。"

msgid ""
"The default form widget for this field is a :class:`~django.forms."
"ClearableFileInput`."
msgstr "该字段的默认表单部件是一个 :class:`~django.forms.ClearableFileInput`。"

msgid ""
"Using a :class:`FileField` or an :class:`ImageField` (see below) in a model "
"takes a few steps:"
msgstr ""
"在模型中使用 :class:`FileField` 或 :class:`ImageField` （见下文）需要几个步"
"骤："

msgid ""
"In your settings file, you'll need to define :setting:`MEDIA_ROOT` as the "
"full path to a directory where you'd like Django to store uploaded files. "
"(For performance, these files are not stored in the database.) Define :"
"setting:`MEDIA_URL` as the base public URL of that directory. Make sure that "
"this directory is writable by the web server's user account."
msgstr ""
"在你的配置文件中，你需要将 :setting:`MEDIA_ROOT` 定义为你希望 Django 存储上传"
"文件的目录的完整路径。（为了提高性能，这些文件不会存储在数据库中。）将 :"
"setting:`MEDIA_URL` 定义为该目录的基本公共 URL。确保这个目录是可以被网络服务"
"器的用户账户写入的。"

msgid ""
"Add the :class:`FileField` or :class:`ImageField` to your model, defining "
"the :attr:`~FileField.upload_to` option to specify a subdirectory of :"
"setting:`MEDIA_ROOT` to use for uploaded files."
msgstr ""
"将 :class:`FileField` 或 :class:`ImageField` 添加到你的模型中，定义 :attr:"
"`~FileField.upload_to` 选项，指定 :setting:`MEDIA_ROOT` 的子目录，用于上传文"
"件。"

msgid ""
"All that will be stored in your database is a path to the file (relative to :"
"setting:`MEDIA_ROOT`). You'll most likely want to use the convenience :attr:"
"`~django.db.models.fields.files.FieldFile.url` attribute provided by Django. "
"For example, if your :class:`ImageField` is called ``mug_shot``, you can get "
"the absolute path to your image in a template with ``{{ object.mug_shot."
"url }}``."
msgstr ""
"所有这些将被存储在你的数据库中的是一个文件的路径（相对于 :setting:"
"`MEDIA_ROOT` ）。你很可能要使用 Django 提供的方便的 :attr:`~django.db.models."
"fields.files.FieldFile.url` 属性。例如，如果你的 :class:`ImageField` 叫做 "
"``mug_shot``，你可以在模板中使用 ``{{ object.mug_shot.url }}`` 获取图片的绝对"
"路径。"

msgid ""
"For example, say your :setting:`MEDIA_ROOT` is set to ``'/home/media'``, "
"and :attr:`~FileField.upload_to` is set to ``'photos/%Y/%m/%d'``. The ``'%Y/"
"%m/%d'`` part of :attr:`~FileField.upload_to` is :func:`~time.strftime` "
"formatting; ``'%Y'`` is the four-digit year, ``'%m'`` is the two-digit month "
"and ``'%d'`` is the two-digit day. If you upload a file on Jan. 15, 2007, it "
"will be saved in the directory ``/home/media/photos/2007/01/15``."
msgstr ""
"例如，你的 :setting:`MEDIA_ROOT` 设置为 ``'/home/media'``， :attr:"
"`~FileField.upload_to` 设置为 ``'photos/%Y/%m/%d'``。:attr:`~FileField."
"upload_to` 中的 ``'%Y/%m/%d'`` 部分是 :func:`~time.strftime` 格式化，"
"``'%Y'`` 是四位数的年，``'%m'`` 是两位数的月，``'%d'`` 是两位数的日。如果你"
"在 2007 年 1 月 15 日上传了一个文件，它将被保存在 ``/home/media/"
"photos/2007/01/15`` 目录下。"

msgid ""
"If you wanted to retrieve the uploaded file's on-disk filename, or the "
"file's size, you could use the :attr:`~django.core.files.File.name` and :"
"attr:`~django.core.files.File.size` attributes respectively; for more "
"information on the available attributes and methods, see the :class:`~django."
"core.files.File` class reference and the :doc:`/topics/files` topic guide."
msgstr ""
"如果你想检索上传文件的盘上文件名，或者文件的大小，可以分别使用 :attr:"
"`~django.core.files.File.name` 和 :attr:`~django.core.files.File.size` 属性；"
"关于可用属性和方法的更多信息，请参见 :class:`~django.core.files.File` 类参考"
"和 :doc:`/topics/files` 主题指南。"

msgid ""
"The file is saved as part of saving the model in the database, so the actual "
"file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""
"文件在数据库中作为保存模型的一部分，因此在模型被保存之前，不能依赖磁盘上使用"
"的实际文件名。"

msgid ""
"The uploaded file's relative URL can be obtained using the :attr:`~django.db."
"models.fields.files.FieldFile.url` attribute. Internally, this calls the :"
"meth:`~django.core.files.storage.Storage.url` method of the underlying :"
"class:`~django.core.files.storage.Storage` class."
msgstr ""
"上传的文件的相对 URL 可以通过 :attr:`~django.db.models.fiels.files.FieldFile."
"url` 属性获得。内部调用底层 :class:`~django.core.files.storage.Storage` 类"
"的 :meth:`~django.core.files.storage.store` 方法。"

msgid ""
"Note that whenever you deal with uploaded files, you should pay close "
"attention to where you're uploading them and what type of files they are, to "
"avoid security holes. *Validate all uploaded files* so that you're sure the "
"files are what you think they are. For example, if you blindly let somebody "
"upload files, without validation, to a directory that's within your web "
"server's document root, then somebody could upload a CGI or PHP script and "
"execute that script by visiting its URL on your site. Don't allow that."
msgstr ""
"请注意，无论何时你处理上传的文件，你都应该密切注意你在哪里上传文件以及它们是"
"什么类型的文件，以避免安全漏洞。 *验证所有上传的文件* ，这样你就能确定文件是"
"你认为的那样。例如，如果你盲目地让别人上传文件，而不进行验证，到你的网站服务"
"器的文件根目录中，那么有人就可以上传 CGI 或 PHP 脚本，并通过访问你网站上的 "
"URL 来执行该脚本。不要允许这样做。"

msgid ""
"Also note that even an uploaded HTML file, since it can be executed by the "
"browser (though not by the server), can pose security threats that are "
"equivalent to XSS or CSRF attacks."
msgstr ""
"另外要注意的是，即使是上传的 HTML 文件，由于可以被浏览器执行（虽然不能被服务"
"器执行），也会造成相当于 XSS 或 CSRF 攻击的安全威胁。"

msgid ""
":class:`FileField` instances are created in your database as ``varchar`` "
"columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""
":class:`FileField` 实例在数据库中被创建为 ``varchar`` 列，默认最大长度为 100 "
"个字符。与其他字段一样，你可以使用 :attr:`~CharField.max_length` 参数改变最大"
"长度。"

msgid "``FileField`` and ``FieldFile``"
msgstr "``FileField`` 和 ``FieldFile``"

msgid ""
"When you access a :class:`~django.db.models.FileField` on a model, you are "
"given an instance of :class:`FieldFile` as a proxy for accessing the "
"underlying file."
msgstr ""
"当你访问一个模型上的 :class:`~django.db.models.FileField` 时，你会得到一个 :"
"class:`FieldFile` 的实例作为访问底层文件的代理。"

msgid ""
"The API of :class:`FieldFile` mirrors that of :class:`~django.core.files."
"File`, with one key difference: *The object wrapped by the class is not "
"necessarily a wrapper around Python's built-in file object.* Instead, it is "
"a wrapper around the result of the :attr:`Storage.open()<django.core.files."
"storage.Storage.open>` method, which may be a :class:`~django.core.files."
"File` object, or it may be a custom storage's implementation of the :class:"
"`~django.core.files.File` API."
msgstr ""
":class:`FieldFile` 的 API 与 :class:`~django.core.files.File` 的 API 相同，但"
"有一个关键的区别。*该类所封装的对象不一定是 Python 内置文件对象的封装* 相反，"
"它是 :attr:`Storage.open()<django.core.files.storage.store.Storage.open>` 方"
"法结果的封装，该方法可能是 :class:`~django.core.files.File` 对象，也可能是自"
"定义存储对 :class:`~django.core.files.File` API 的实现。"

msgid ""
"In addition to the API inherited from :class:`~django.core.files.File` such "
"as ``read()`` and ``write()``, :class:`FieldFile` includes several methods "
"that can be used to interact with the underlying file:"
msgstr ""
"除了从 :class:`~django.core.files.File` 继承的 API，如 ``read()`` 和 "
"``write()`` 之外，:class:`FieldFile` 还包括一些可以用来与底层文件交互的方法："

msgid ""
"Two methods of this class, :meth:`~FieldFile.save` and :meth:`~FieldFile."
"delete`, default to saving the model object of the associated ``FieldFile`` "
"in the database."
msgstr ""
"该类的两个方法 :meth:`~FieldFile.save` 和 :meth:`~FieldFile.delete`，默认为将"
"与相关 ``FieldFile`` 的模型对象保存在数据库中。"

msgid ""
"The name of the file including the relative path from the root of the :class:"
"`~django.core.files.storage.Storage` of the associated :class:`~django.db."
"models.FileField`."
msgstr ""
"文件名，包括从关联的 :class:`~django.core.files.storage.Storage` 的根部开始的"
"相对路径 :class:`~django.db.models.FileField`。"

msgid ""
"A read-only property to access the file's local filesystem path by calling "
"the :meth:`~django.core.files.storage.Storage.path` method of the "
"underlying :class:`~django.core.files.storage.Storage` class."
msgstr ""
"一个只读属性，通过调用底层的 :meth:`~django.core.files.storage.Storage.path` "
"方法，访问文件的本地文件系统路径。"

msgid ""
"The result of the underlying :attr:`Storage.size() <django.core.files."
"storage.Storage.size>` method."
msgstr ""
"底层 :attr:`Storage.size() <django.core.files.storage.Storage.size>` 方法的结"
"果。"

msgid ""
"A read-only property to access the file's relative URL by calling the :meth:"
"`~django.core.files.storage.Storage.url` method of the underlying :class:"
"`~django.core.files.storage.Storage` class."
msgstr ""
"一个只读属性，通过调用底层 :class:`~django.core.files.storage.Storage` 类的 :"
"meth:`~django.core.files.storage.Storage` 方法来访问文件的相对 URL。"

msgid ""
"Opens or reopens the file associated with this instance in the specified "
"``mode``. Unlike the standard Python ``open()`` method, it doesn't return a "
"file descriptor."
msgstr ""
"以指定的 ``mode`` 打开或重新打开与该实例相关的文件。与标准的 Python "
"``open()`` 方法不同，它不返回一个文件描述符。"

msgid ""
"Since the underlying file is opened implicitly when accessing it, it may be "
"unnecessary to call this method except to reset the pointer to the "
"underlying file or to change the ``mode``."
msgstr ""
"因为在访问底层文件时，底层文件是隐式打开的，所以除了重置底层文件的指针或改变 "
"``mode`` 之外，可能没有必要调用这个方法。"

msgid ""
"Behaves like the standard Python ``file.close()`` method and closes the file "
"associated with this instance."
msgstr "类似于标准的 Python ``file.close()`` 方法，关闭与该实例相关的文件。"

msgid ""
"This method takes a filename and file contents and passes them to the "
"storage class for the field, then associates the stored file with the model "
"field. If you want to manually associate file data with :class:`~django.db."
"models.FileField` instances on your model, the ``save()`` method is used to "
"persist that file data."
msgstr ""
"这个方法接收一个文件名和文件内容，并将它们传递给字段的存储类，然后将存储的文"
"件与模型字段关联。如果你想手动将文件数据与模型上的 :class:`~django.db.models."
"FileField` 实例关联起来，那么 ``save()`` 方法用来持久化该文件数据。"

msgid ""
"Takes two required arguments: ``name`` which is the name of the file, and "
"``content`` which is an object containing the file's contents.  The optional "
"``save`` argument controls whether or not the model instance is saved after "
"the file associated with this field has been altered. Defaults to ``True``."
msgstr ""
"取两个必要的参数。``name`` 是文件的名称，``content`` 是包含文件内容的对象。 "
"可选的 ``save`` 参数控制在与该字段相关联的文件被更改后是否保存模型实例。默认"
"为 ``True``。"

msgid ""
"Note that the ``content`` argument should be an instance of :class:`django."
"core.files.File`, not Python's built-in file object. You can construct a :"
"class:`~django.core.files.File` from an existing Python file object like "
"this::"
msgstr ""
"注意 ``content`` 参数应该是 :class:`django.core.files.File` 的实例，而不是 "
"Python 内置的文件对象。你可以从现有的 Python 文件对象构造一个 :class:"
"`~django.core.files.File`，像这样："

msgid "Or you can construct one from a Python string like this::"
msgstr "或者你可以从 Python 字符串中构建一个像这样的字符串："

msgid "For more information, see :doc:`/topics/files`."
msgstr "更多信息，请参见 :doc:`/topics/files`。"

msgid ""
"Deletes the file associated with this instance and clears all attributes on "
"the field. Note: This method will close the file if it happens to be open "
"when ``delete()`` is called."
msgstr ""
"删除与此实例相关的文件，并清除字段的所有属性。注意：如果在调用 ``delete()`` "
"时，文件恰好被打开，本方法将关闭该文件。"

msgid ""
"The optional ``save`` argument controls whether or not the model instance is "
"saved after the file associated with this field has been deleted. Defaults "
"to ``True``."
msgstr ""
"可选的 ``save`` 参数控制在删除与该字段相关的文件后是否保存模型实例。默认值为 "
"``True``。"

msgid ""
"Note that when a model is deleted, related files are not deleted. If you "
"need to cleanup orphaned files, you'll need to handle it yourself (for "
"instance, with a custom management command that can be run manually or "
"scheduled to run periodically via e.g. cron)."
msgstr ""
"请注意，当一个模型被删除时，相关文件不会被删除。如果你需要清理遗留文件，你需"
"要自己处理（例如，使用自定义管理命令，可以手动运行或通过例如 cron 定期运"
"行）。"

msgid ""
"A :class:`CharField` whose choices are limited to the filenames in a certain "
"directory on the filesystem. Has some special arguments, of which the first "
"is **required**:"
msgstr ""
"一个 :class:`CharField`，其选择仅限于文件系统中某个目录下的文件名。有一些特殊"
"的参数，其中第一个参数是 **必须的**。"

msgid ""
"Required. The absolute filesystem path to a directory from which this :class:"
"`FilePathField` should get its choices. Example: ``\"/home/images\"``."
msgstr ""
"必须的。一个目录的绝对文件系统路径，这个 :class:`FilePathField` 应从该目录中"
"获取其选择。例如：``\"/home/images\"``。"

msgid ""
"``path`` may also be a callable, such as a function to dynamically set the "
"path at runtime. Example::"
msgstr ""
"``path`` 也可以是一个可调用对象，可以是在运行时动态设置路径的函数。例如："

msgid ""
"Optional. A regular expression, as a string, that :class:`FilePathField` "
"will use to filter filenames. Note that the regex will be applied to the "
"base filename, not the full path. Example: ``\"foo.*\\.txt$\"``, which will "
"match a file called ``foo23.txt`` but not ``bar.txt`` or ``foo23.png``."
msgstr ""
"可选。一个正则表达式，作为一个字符串， :class:`FilePathField` 将用于过滤文件"
"名。请注意，正则表达式将被应用于基本文件名，而不是完整的路径。例如：``\"foo."
"*.txt$\"``，它将匹配名为 ``foo23.txt`` 的文件，但不匹配 ``bar.txt`` 或 "
"``foo23.png``。"

msgid ""
"Optional. Either ``True`` or ``False``. Default is ``False``. Specifies "
"whether all subdirectories of :attr:`~FilePathField.path` should be included"
msgstr ""
"可选。``True`` 或 ``False``。默认为 ``False``。指定是否包含 :attr:"
"`~FilePathField.path` 的所有子目录。"

msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``True``.  Specifies "
"whether files in the specified location should be included.  Either this or :"
"attr:`~FilePathField.allow_folders` must be ``True``."
msgstr ""
"可选。 ``True`` 或 ``False``。 默认值是 ``True``。 指定是否应该包含指定位置的"
"文件。 这个或 :attr:`~FilePathField.allow_folders` 必须是 ``True``。"

msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``False``.  Specifies "
"whether folders in the specified location should be included.  Either this "
"or :attr:`~FilePathField.allow_files` must be ``True``."
msgstr ""
"可选。 ``True`` 或 ``False``。 默认为 ``False``。 指定是否应该包含指定位置的"
"文件夹。 这个或 :attr:`~FilePathField.allow_files` 必须是 ``True``。"

msgid ""
"The one potential gotcha is that :attr:`~FilePathField.match` applies to the "
"base filename, not the full path. So, this example::"
msgstr ""
"一个潜在的问题是 :attr:`~FilePathField.match` 适用于基本文件名，而不是完整的"
"路径。所以，这个例子："

msgid ""
"...will match ``/home/images/foo.png`` but not ``/home/images/foo/bar.png`` "
"because the :attr:`~FilePathField.match` applies to the base filename (``foo."
"png`` and ``bar.png``)."
msgstr ""
"...将匹配 ``/home/images/foo.png``，但不匹配 ``/home/images/foo/bar.png``，因"
"为 :attr:`~FilePathField.match` 适用于基本文件名（ ``foo.png`` 和 ``bar."
"png`` ）。"

msgid ""
":class:`FilePathField` instances are created in your database as ``varchar`` "
"columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""
":class:`FilePathField` 实例在数据库中作为 ``varchar`` 列创建，默认最大长度为 "
"100 个字符。与其他字段一样，你可以使用 :attr:`~CharField.max_length` 参数改变"
"最大长度。"

msgid "A floating-point number represented in Python by a ``float`` instance."
msgstr "在 Python 中用一个 ``float`` 实例表示的浮点数。"

msgid "``FloatField`` vs. ``DecimalField``"
msgstr "``FloatField`` vs. ``DecimalField``"

msgid ""
"The :class:`FloatField` class is sometimes mixed up with the :class:"
"`DecimalField` class. Although they both represent real numbers, they "
"represent those numbers differently. ``FloatField`` uses Python's ``float`` "
"type internally, while ``DecimalField`` uses Python's ``Decimal`` type. For "
"information on the difference between the two, see Python's documentation "
"for the :mod:`decimal` module."
msgstr ""
":class:`FloatField` 类有时会与 :class:`DecimalField` 类混淆。虽然它们都表示实"
"数，但它们表示的方式不同。``FloatField`` 内部使用 Python 的 ``float`` 类型，"
"而 ``DecimalField`` 则使用 Python 的 ``Decimal`` 类型。关于两者之间的区别，请"
"参见 Python 的 :mod:`decimal` 模块的文档。"

msgid ""
"An IPv4 or IPv6 address, in string format (e.g. ``192.0.2.30`` or "
"``2a02:42fe::4``). The default form widget for this field is a :class:"
"`~django.forms.TextInput`."
msgstr ""
"IPv4 或 IPv6 地址，字符串格式（如 ``192.0.2.30`` 或 ``2a02:42fe::4`` ）。该字"
"段的默认表单部件是一个 :class:`~django.forms.TextInput`。"

msgid ""
"Limits valid inputs to the specified protocol. Accepted values are "
"``'both'`` (default), ``'IPv4'`` or ``'IPv6'``. Matching is case insensitive."
msgstr ""
"将有效输入限制为指定协议。接受的值是 ``'both'`` （默认）、``'IPv4'`` 或 "
"``'IPv6'``。匹配是不分大小写的。"

msgid ""
"If you allow for blank values, you have to allow for null values since blank "
"values are stored as null."
msgstr "如果允许空值，就必须允许 null 值，因为空值会被存储为 null。"

msgid ""
"Inherits all attributes and methods from :class:`FileField`, but also "
"validates that the uploaded object is a valid image."
msgstr ""
"继承 :class:`FileField` 的所有属性和方法，但也验证上传的对象是有效的图像。"

msgid ""
"In addition to the special attributes that are available for :class:"
"`FileField`, an :class:`ImageField` also has ``height`` and ``width`` "
"attributes."
msgstr ""
"除了 :class:`FileField` 的特殊属性外， :class:`ImageField` 也有 ``height`` "
"和 ``width`` 属性。"

msgid ""
"To facilitate querying on those attributes, :class:`ImageField` has the "
"following optional arguments:"
msgstr ""

msgid ""
"Name of a model field which will be auto-populated with the height of the "
"image each time the model instance is saved."
msgstr "模型字段的名称，每次保存模型实例时将自动填充图像的高度。"

msgid ""
"Name of a model field which will be auto-populated with the width of the "
"image each time the model instance is saved."
msgstr "模型字段的名称，每次保存模型实例时将自动填充图像的宽度。"

msgid "Requires the `Pillow`_ library."
msgstr "需要 `Pillow`_ 库。"

msgid ""
":class:`ImageField` instances are created in your database as ``varchar`` "
"columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""
":class:`ImageField` 实例在数据库中创建为 ``varchar`` 列，默认最大长度为 100 "
"个字符。与其他字段一样，你可以使用 :attr:`~CharField.max_length` 参数改变最大"
"长度。"

msgid ""
"An integer. Values from ``-2147483648`` to ``2147483647`` are safe in all "
"databases supported by Django."
msgstr ""
"一个整数。从 ``-2147483648`` 到 ``2147483647`` 的值在 Django 支持的所有数据库"
"中都是安全的。"

msgid ""
"It uses :class:`~django.core.validators.MinValueValidator` and :class:"
"`~django.core.validators.MaxValueValidator` to validate the input based on "
"the values that the default database supports."
msgstr ""
"它使用 :class:`~django.core.validators.MinValueValidator` 和 :class:`~django."
"core.validators.MaxValueValidator` 根据默认数据库支持的值来验证输入。"

msgid ""
"A field for storing JSON encoded data. In Python the data is represented in "
"its Python native format: dictionaries, lists, strings, numbers, booleans "
"and ``None``."
msgstr ""
"一个用于存储 JSON 编码数据的字段。在 Python 中，数据以其 Python 本地格式表"
"示：字典、列表、字符串、数字、布尔值和 ``None``。"

msgid ""
"``JSONField`` is supported on MariaDB, MySQL, Oracle, PostgreSQL, and SQLite "
"(with the :ref:`JSON1 extension enabled <sqlite-json1>`)."
msgstr ""

msgid ""
"An optional :py:class:`json.JSONEncoder` subclass to serialize data types "
"not supported by the standard JSON serializer (e.g. ``datetime.datetime`` "
"or :class:`~python:uuid.UUID`). For example, you can use the :class:`~django."
"core.serializers.json.DjangoJSONEncoder` class."
msgstr ""
"一个可选的 :py:class:`json.JSONEncoder` 子类，用于序列化标准 JSON 序列化器不"
"支持的数据类型（例如 ``datetime.datetime`` 或 :class:`~python:uuid.UUID` ）。"
"例如，你可以使用 :class:`~django.core.serializers.json.DjangoJSONEncoder` "
"类。"

msgid ""
"An optional :py:class:`json.JSONDecoder` subclass to deserialize the value "
"retrieved from the database. The value will be in the format chosen by the "
"custom encoder (most often a string). Your deserialization may need to "
"account for the fact that you can't be certain of the input type. For "
"example, you run the risk of returning a ``datetime`` that was actually a "
"string that just happened to be in the same format chosen for "
"``datetime``\\s."
msgstr ""
"一个可选的 :py:class:`json.JSONDecoder` 子类，用于反序列化从数据库中获取的"
"值。该值将采用自定义编码器选择的格式（通常是字符串）。你的反序列化可能需要考"
"虑到你无法确定输入类型的事实。例如，你有可能返回一个 ``datetime``，实际上是一"
"个字符串，而这个字符串恰好与 ``datetime`` 选择的格式相同。"

msgid "To query ``JSONField`` in the database, see :ref:`querying-jsonfield`."
msgstr "要在数据库中查询 ``JSONField``，请看 :ref:`querying-jsonfield`。"

msgid "Default value"
msgstr ""

msgid ""
"If you give the field a :attr:`~django.db.models.Field.default`, ensure it's "
"a callable such as the :py:class:`dict` class or a function that returns a "
"fresh object each time. Incorrectly using a mutable object like ``default={}"
"`` or ``default=[]`` creates a mutable default that is shared between all "
"instances."
msgstr ""

msgid "Indexing"
msgstr "索引"

msgid ""
":class:`~django.db.models.Index` and :attr:`.Field.db_index` both create a B-"
"tree index, which isn't particularly helpful when querying ``JSONField``. On "
"PostgreSQL only, you can use :class:`~django.contrib.postgres.indexes."
"GinIndex` that is better suited."
msgstr ""
":class:`~django.db.models.Index` 和 :attr:`.Field.db_index` 都创建了一个 B 树"
"索引，在查询 ``JSONField`` 的时候并不是特别有用。仅在 PostgreSQL 上，可以使"
"用 :class:`~django.contrib.postgres.indexes.GinIndex` 比较适合。"

msgid "PostgreSQL users"
msgstr "PostgreSQL 用户"

msgid ""
"PostgreSQL has two native JSON based data types: ``json`` and ``jsonb``. The "
"main difference between them is how they are stored and how they can be "
"queried. PostgreSQL's ``json`` field is stored as the original string "
"representation of the JSON and must be decoded on the fly when queried based "
"on keys. The ``jsonb`` field is stored based on the actual structure of the "
"JSON which allows indexing. The trade-off is a small additional cost on "
"writing to the ``jsonb`` field. ``JSONField`` uses ``jsonb``."
msgstr ""
"PostgreSQL 有两种基于 JSON 的原生数据类型： ``json`` 和 ``jsonb``。``json`` "
"和 ``jsonb``。它们之间的主要区别在于它们的存储方式和查询方式。PostgreSQL 的 "
"``json`` 字段是作为 JSON 的原始字符串表示来存储的，当根据键来查询时，必须同时"
"进行解码。``jsonb`` 字段是基于 JSON 的实际结构存储的，它允许索引。这样做的代"
"价是在写入 ``jsonb`` 字段时增加了一点成本。``JSONField`` 使用 ``jsonb``。"

msgid "Oracle users"
msgstr "Oracle 用户"

msgid ""
"Oracle Database does not support storing JSON scalar values. Only JSON "
"objects and arrays (represented in Python using :py:class:`dict` and :py:"
"class:`list`) are supported."
msgstr ""
"Oracle 数据库不支持存储 JSON 标量值。只支持 JSON 对象和数组（在 Python 中使"
"用 :py:class:`dict` 和 :py:class:`list` 表示)。"

msgid "``PositiveBigIntegerField``"
msgstr "``PositiveBigIntegerField``"

msgid ""
"Like a :class:`PositiveIntegerField`, but only allows values under a certain "
"(database-dependent) point. Values from ``0`` to ``9223372036854775807`` are "
"safe in all databases supported by Django."
msgstr ""
"就像一个 :class:`PositiveIntegerField`，但只允许在某一特定点下的值（依赖于数"
"据库）。``0`` 到 ``9223372036854775807`` 的值在 Django 支持的所有数据库中都是"
"安全的。"

msgid "``PositiveIntegerField``"
msgstr "``PositiveIntegerField``"

msgid ""
"Like an :class:`IntegerField`, but must be either positive or zero (``0``). "
"Values from ``0`` to ``2147483647`` are safe in all databases supported by "
"Django. The value ``0`` is accepted for backward compatibility reasons."
msgstr ""
"就像 :class:`IntegerField` 一样，但必须是正值或零（ ``0`` ）。从 ``0`` 到 "
"``2147483647`` 的值在 Django 支持的所有数据库中都是安全的。出于向后兼容的原"
"因，接受 ``0`` 的值。"

msgid "``PositiveSmallIntegerField``"
msgstr "``PositiveSmallIntegerField``"

msgid ""
"Like a :class:`PositiveIntegerField`, but only allows values under a certain "
"(database-dependent) point. Values from ``0`` to ``32767`` are safe in all "
"databases supported by Django."
msgstr ""
"就像一个 :class:`PositiveIntegerField`，但只允许在某一特定（数据库依赖的）点"
"下取值。``0`` 到 ``32767`` 的值在 Django 支持的所有数据库中都是安全的。"

msgid ""
":term:`Slug <slug>` is a newspaper term. A slug is a short label for "
"something, containing only letters, numbers, underscores or hyphens. They're "
"generally used in URLs."
msgstr ""
":term:`Slug <slug>` 是一个报纸术语。slug 是一个简短的标签，只包含字母、数字、"
"下划线或连字符。它们一般用于 URL 中。"

msgid ""
"Like a CharField, you can specify :attr:`~CharField.max_length` (read the "
"note about database portability and :attr:`~CharField.max_length` in that "
"section, too). If :attr:`~CharField.max_length` is not specified, Django "
"will use a default length of 50."
msgstr ""
"像 CharField 一样，你可以指定 :attr:`~CharField.max_length` （也请阅读那一节"
"中关于数据库可移植性和 :attr:`~CharField.max_length` 的说明）。如果没有指定 :"
"attr:`~CharField.max_length`，Django 将使用默认长度 50。"

msgid "Implies setting :attr:`Field.db_index` to ``True``."
msgstr "意味着将 :attr:`Field.db_index` 设置为 ``True``。"

msgid ""
"It is often useful to automatically prepopulate a SlugField based on the "
"value of some other value.  You can do this automatically in the admin "
"using :attr:`~django.contrib.admin.ModelAdmin.prepopulated_fields`."
msgstr ""
"基于其他值的值自动预填充一个 SlugField 通常是很有用的。 你可以在管理中使用 :"
"attr:`~django.contrib.admin.ModelAdmin.prepopulated_fields` 来自动完成。"

msgid ""
"It uses :class:`~django.core.validators.validate_slug` or :class:`~django."
"core.validators.validate_unicode_slug` for validation."
msgstr ""
"它使用 :class:`~django.core.validators.validate_slug` 或 :class:`~django."
"core.validators.validate_unicode_slug` 进行验证。"

msgid ""
"If ``True``, the field accepts Unicode letters in addition to ASCII letters. "
"Defaults to ``False``."
msgstr ""
"如果是 ``True``，该字段除了接受 ASCII 字母外，还接受 Unicode 字母。默认值为 "
"``False``。"

msgid "``SmallAutoField``"
msgstr "``SmallAutoField``"

msgid ""
"Like an :class:`AutoField`, but only allows values under a certain (database-"
"dependent) limit. Values from ``1`` to ``32767`` are safe in all databases "
"supported by Django."
msgstr ""
"就像一个 :class:`AutoField`，但只允许值在一定（依赖于数据库）的限制下。``1`` "
"到 ``32767`` 的值在 Django 支持的所有数据库中都是安全的。"

msgid "``SmallIntegerField``"
msgstr "``SmallIntegerField``"

msgid ""
"Like an :class:`IntegerField`, but only allows values under a certain "
"(database-dependent) point. Values from ``-32768`` to ``32767`` are safe in "
"all databases supported by Django."
msgstr ""
"就像一个 :class:`IntegerField`，但只允许在某一特定（依赖于数据库的）点下取"
"值。从 ``-32768`` 到 ``32767`` 的值在 Django 支持的所有数据库中都是安全的。"

msgid "``TextField``"
msgstr "``TextField``"

msgid ""
"A large text field. The default form widget for this field is a :class:"
"`~django.forms.Textarea`."
msgstr ""
"一个大的文本字段。该字段的默认表单部件是一个 :class:`~django.forms."
"Textarea`。"

msgid ""
"If you specify a ``max_length`` attribute, it will be reflected in the :"
"class:`~django.forms.Textarea` widget of the auto-generated form field. "
"However it is not enforced at the model or database level. Use a :class:"
"`CharField` for that."
msgstr ""
"如果你指定了 ``max_length`` 属性，它将反映在自动生成的表单字段的 :class:"
"`~django.forms.Textarea` 部件中。但是，它并没有在模型或数据库层面被强制执行。"
"使用一个 :class:`CharField` 来实现。"

msgid "Oracle does not support collations for a ``TextField``."
msgstr "Oracle 不支持 ``TextField`` 的字符序。"

msgid ""
"A time, represented in Python by a ``datetime.time`` instance. Accepts the "
"same auto-population options as :class:`DateField`."
msgstr ""
"一个时间，在 Python 中用 ``datetime.time`` 实例表示。接受与 :class:"
"`DateField` 相同的自动填充选项。"

msgid ""
"The default form widget for this field is a :class:`~django.forms."
"TimeInput`. The admin adds some JavaScript shortcuts."
msgstr ""
"该字段默认的表单部件t是一个 :class:`~django.forms.TimeInput`。管理中添加了一"
"些 JavaScript 快捷方式。"

msgid ""
"A :class:`CharField` for a URL, validated by :class:`~django.core.validators."
"URLValidator`."
msgstr ""
"URL 的 :class:`CharField`，由 :class:`~django.core.validators.URLValidator` "
"验证。"

msgid ""
"The default form widget for this field is a :class:`~django.forms.URLInput`."
msgstr "该字段的默认表单部件是一个 :class:`~django.forms.URLInput`。"

msgid ""
"Like all :class:`CharField` subclasses, :class:`URLField` takes the "
"optional :attr:`~CharField.max_length` argument. If you don't specify :attr:"
"`~CharField.max_length`, a default of 200 is used."
msgstr ""
"像所有的 :class:`CharField` 子类一样， :class:`URLField` 接受可选的 :attr:"
"`~CharField.max_length` 参数。如果你没有指定 :attr:`~CharField.max_length` 参"
"数，则使用默认的 200。"

msgid ""
"A field for storing universally unique identifiers. Uses Python's :class:"
"`~python:uuid.UUID` class. When used on PostgreSQL, this stores in a "
"``uuid`` datatype, otherwise in a ``char(32)``."
msgstr ""
"一个用于存储通用唯一标识符的字段。使用 Python 的 :class:`~python:uuid.UUID` "
"类。当在 PostgreSQL 上使用时，它存储在一个 ``uuid`` 的数据类型中，否则存储在"
"一个 ``char(32)`` 中。"

msgid ""
"Universally unique identifiers are a good alternative to :class:`AutoField` "
"for :attr:`~Field.primary_key`. The database will not generate the UUID for "
"you, so it is recommended to use :attr:`~Field.default`::"
msgstr ""
"通用唯一标识符是 :attr:`~Field.primary_key` 的 :class:`AutoField` 的一个很好"
"的替代方案。数据库不会为你生成 UUID，所以建议使用 :attr:`~Field.default` ："

msgid ""
"Note that a callable (with the parentheses omitted) is passed to "
"``default``, not an instance of ``UUID``."
msgstr ""
"请注意，一个可调用对象（省略括号）被传递给 ``default``，而不是 ``UUID`` 的实"
"例。"

msgid "Lookups on PostgreSQL"
msgstr "在 PostgreSQL 上查找"

msgid ""
"Using :lookup:`iexact`, :lookup:`contains`, :lookup:`icontains`, :lookup:"
"`startswith`, :lookup:`istartswith`, :lookup:`endswith`, or :lookup:"
"`iendswith` lookups on PostgreSQL don't work for values without hyphens, "
"because PostgreSQL stores them in a hyphenated uuid datatype type."
msgstr ""
"在 PostgreSQL 上使用 :lookup:`iexact`、:lookup:`contains`、:lookup:"
"`icontains`、:lookup:`startswith`、:lookup:`istartswith`、:lookup:`endswith` "
"或 :lookup:`iendswith` 在 PostgreSQL 上查找没有连字符的值是行不通的，因为 "
"PostgreSQL 将它们存储在一个连字符的 uuid 数据类型中。"

msgid "Relationship fields"
msgstr "关系字段"

msgid "Django also defines a set of fields that represent relations."
msgstr "Django 还定义了一组表示关系的字段。"

msgid "``ForeignKey``"
msgstr "``ForeignKey``"

msgid ""
"A many-to-one relationship. Requires two positional arguments: the class to "
"which the model is related and the :attr:`~ForeignKey.on_delete` option."
msgstr ""
"一个多对一的关系。需要两个位置参数：模型相关的类和 :attr:`~ForeignKey."
"on_delete` 选项。"

msgid ""
"To create a recursive relationship -- an object that has a many-to-one "
"relationship with itself -- use ``models.ForeignKey('self', on_delete=models."
"CASCADE)``."
msgstr ""
"要创建一个递归关系——一个与自己有多对一关系的对象——使用 ``models."
"ForeignKey('self', on_delete=models.CASCADE)``。"

msgid ""
"If you need to create a relationship on a model that has not yet been "
"defined, you can use the name of the model, rather than the model object "
"itself::"
msgstr ""
"如果你需要在一个尚未定义的模型上创建关系，你可以使用模型的名称，而不是模型对"
"象本身："

msgid ""
"Relationships defined this way on :ref:`abstract models <abstract-base-"
"classes>` are resolved when the model is subclassed as a concrete model and "
"are not relative to the abstract model's ``app_label``:"
msgstr ""
"在 :ref:`抽象模型 <abstract-base-classes>` 上以这种方式定义的关系在模型被子类"
"化为具体模型时得到解析，与抽象模型的 ``app_label`` 不是相关的："

msgid "``products/models.py``"
msgstr "``products/models.py``"

msgid "``production/models.py``"
msgstr "``production/models.py``"

msgid ""
"To refer to models defined in another application, you can explicitly "
"specify a model with the full application label. For example, if the "
"``Manufacturer`` model above is defined in another application called "
"``production``, you'd need to use::"
msgstr ""
"要引用定义在另一个应用程序中的模型，你可以明确地用完整的应用程序标签指定一个"
"模型。例如，如果上面的 ``Manufacturer`` 模型是在另一个叫做 ``production`` 的"
"应用程序中定义的，你需要使用："

msgid ""
"This sort of reference, called a lazy relationship, can be useful when "
"resolving circular import dependencies between two applications."
msgstr ""
"这种被称为懒惰关系的引用，在解决两个应用程序之间的循环导入依赖关系时很有用。"

msgid ""
"A database index is automatically created on the ``ForeignKey``. You can "
"disable this by setting :attr:`~Field.db_index` to ``False``.  You may want "
"to avoid the overhead of an index if you are creating a foreign key for "
"consistency rather than joins, or if you will be creating an alternative "
"index like a partial or multiple column index."
msgstr ""
"在 ``ForeignKey`` 上会自动创建一个数据库索引。你可以通过设置 :attr:`~Field."
"db_index` 为 ``False`` 来禁用它。 如果你创建外键是为了保持一致性，而不是为了"
"连接，或者你将创建一个替代性的索引，如部分索引或多列索引，你可能希望避免索引"
"的开销。"

msgid "Database Representation"
msgstr "数据库表现"

msgid ""
"Behind the scenes, Django appends ``\"_id\"`` to the field name to create "
"its database column name. In the above example, the database table for the "
"``Car`` model will have a ``manufacturer_id`` column. (You can change this "
"explicitly by specifying :attr:`~Field.db_column`) However, your code should "
"never have to deal with the database column name, unless you write custom "
"SQL. You'll always deal with the field names of your model object."
msgstr ""
"在幕后，Django 在字段名后附加 ``\"_id\"`` 来创建数据库列名。在上面的例子中，"
"``Car`` 模型的数据库表将有一个 ``manufacturer_id`` 列。（你可以通过指定 :"
"attr:`~Field.db_column` 来显式地改变这一点）然而，你的代码应该永远不需要处理"
"数据库列名，除非你编写自定义 SQL。你将总是处理你的模型对象的字段名。"

msgid "Arguments"
msgstr "参数"

msgid ""
":class:`ForeignKey` accepts other arguments that define the details of how "
"the relation works."
msgstr ":class:`ForeignKey` 接受其他定义关系工作细节的参数。"

msgid ""
"When an object referenced by a :class:`ForeignKey` is deleted, Django will "
"emulate the behavior of the SQL constraint specified by the :attr:"
"`on_delete` argument. For example, if you have a nullable :class:"
"`ForeignKey` and you want it to be set null when the referenced object is "
"deleted::"
msgstr ""
"当一个由 :class:`ForeignKey` 引用的对象被删除时，Django 将模拟 :attr:"
"`on_delete` 参数所指定的 SQL 约束的行为。例如，如果你有一个可空的 :class:"
"`ForeignKey`，并且你希望当被引用的对象被删除时，它被设置为空："

msgid ""
"``on_delete`` doesn't create an SQL constraint in the database. Support for "
"database-level cascade options :ticket:`may be implemented later <21961>`."
msgstr ""
"``on_delete`` 不会在数据库中创建 SQL 约束。支持数据库级联选项 :ticket:`可能会"
"在以后实施 <21961>`。"

msgid ""
"The possible values for :attr:`~ForeignKey.on_delete` are found in :mod:"
"`django.db.models`:"
msgstr ""
":attr:`~ForeignKey.on_delete` 的可能值可以在 :mod:`django.db.models` 中找到。"

msgid ""
"Cascade deletes. Django emulates the behavior of the SQL constraint ON "
"DELETE CASCADE and also deletes the object containing the ForeignKey."
msgstr ""
"级联删除。Django 模拟了 SQL 约束 ON DELETE CASCADE 的行为，也删除了包含 "
"ForeignKey 的对象。"

msgid ""
":meth:`.Model.delete` isn't called on related models, but the :data:`~django."
"db.models.signals.pre_delete` and :data:`~django.db.models.signals."
"post_delete` signals are sent for all deleted objects."
msgstr ""
":meth:`.Model.delete` 在相关的模型上没有被调用，但是 :data:`~django.db."
"models.signal.pre_delete` 和 :data:`~django.db.models.signal.post_delete` 信"
"号是为所有被删除的对象发送的。"

msgid ""
"Prevent deletion of the referenced object by raising :exc:`~django.db.models."
"ProtectedError`, a subclass of :exc:`django.db.IntegrityError`."
msgstr ""
"通过引发 :exc:`~django.db.models.ProtectedError`，即 :exc:`django.db."
"IntegrityError` 的子类，防止删除被引用对象。"

msgid ""
"Prevent deletion of the referenced object by raising :exc:`~django.db.models."
"RestrictedError` (a subclass of :exc:`django.db.IntegrityError`). Unlike :"
"attr:`PROTECT`, deletion of the referenced object is allowed if it also "
"references a different object that is being deleted in the same operation, "
"but via a :attr:`CASCADE` relationship."
msgstr ""
"通过引发 :exc:`~django.db.models.RestrictedError` （ :exc:`django.db."
"IntegrityError` 的一个子类）来防止删除被引用的对象。与 :attr:`PROTECT` 不同的"
"是，如果被引用的对象也引用了一个在同一操作中被删除的不同对象，但通过 :attr:"
"`CASCADE` 关系，则允许删除被引用的对象。"

msgid "Consider this set of models::"
msgstr "思考下下面这组模型："

msgid ""
"``Artist`` can be deleted even if that implies deleting an ``Album`` which "
"is referenced by a ``Song``, because ``Song`` also references ``Artist`` "
"itself through a cascading relationship. For example:"
msgstr ""

msgid ""
"Set the :class:`ForeignKey` null; this is only possible if :attr:`~Field."
"null` is ``True``."
msgstr ""
"设置 :class:`ForeignKey` 为空；只有当 :attr:`~Field.null` 为 ``True`` 时，才"
"有可能。"

msgid ""
"Set the :class:`ForeignKey` to its default value; a default for the :class:"
"`ForeignKey` must be set."
msgstr ""
"将 :class:`ForeignKey` 设置为默认值，必须为 :class:`ForeignKey` 设置一个默认"
"值。"

msgid ""
"Set the :class:`ForeignKey` to the value passed to :func:`~django.db.models."
"SET()`, or if a callable is passed in, the result of calling it. In most "
"cases, passing a callable will be necessary to avoid executing queries at "
"the time your ``models.py`` is imported::"
msgstr ""

msgid ""
"Take no action. If your database backend enforces referential integrity, "
"this will cause an :exc:`~django.db.IntegrityError` unless you manually add "
"an SQL ``ON DELETE`` constraint to the database field."
msgstr ""
"不采取任何行动。如果你的数据库后端强制执行引用完整性，这将导致一个 :exc:"
"`~django.db.IntegrityError` 除非你手动添加一个 SQL ``ON DELETE`` 约束条件到数"
"据库字段。"

msgid ""
"Sets a limit to the available choices for this field when this field is "
"rendered using a ``ModelForm`` or the admin (by default, all objects in the "
"queryset are available to choose). Either a dictionary, a :class:`~django.db."
"models.Q` object, or a callable returning a dictionary or :class:`~django.db."
"models.Q` object can be used."
msgstr ""
"当使用 ``ModelForm`` 或管理中渲染该字段时，设置该字段的可用选择限制（默认情况"
"下，查询集中的所有对象都可以选择）。可以使用字典、 :class:`~django.db.models."
"Q` 对象，或者返回字典或 :class:`~django.db.models.Q` 对象的可调用对象。"

msgid ""
"causes the corresponding field on the ``ModelForm`` to list only ``Users`` "
"that have ``is_staff=True``. This may be helpful in the Django admin."
msgstr ""
"导致 ``ModelForm`` 上的对应字段只列出有 ``is_staff=True`` 的 ``Users``。这在 "
"Django 管理中可能会有帮助。"

msgid ""
"The callable form can be helpful, for instance, when used in conjunction "
"with the Python ``datetime`` module to limit selections by date range. For "
"example::"
msgstr ""
"例如，当与 Python ``datetime`` 模块一起使用时，可调用对象可以很有帮助，通过日"
"期范围限制选择。例如："

msgid ""
"If ``limit_choices_to`` is or returns a :class:`Q object <django.db.models."
"Q>`, which is useful for :ref:`complex queries <complex-lookups-with-q>`, "
"then it will only have an effect on the choices available in the admin when "
"the field is not listed in :attr:`~django.contrib.admin.ModelAdmin."
"raw_id_fields` in the ``ModelAdmin`` for the model."
msgstr ""
"如果 ``limit_choices_to`` 是或返回一个 :class:`Q对象<django.db.models.Q>`，这"
"对 :ref:`复杂的查询 <complex-lookups-with-q>` 很有用，那么只有当该字段没有在 "
"``ModelAdmin`` 中的 :attr:`~django.contrib.admin.ModelAdmin.raw_id_fields` 中"
"列出时，它才会对管理中可用的选择产生影响。"

msgid ""
"If a callable is used for ``limit_choices_to``, it will be invoked every "
"time a new form is instantiated. It may also be invoked when a model is "
"validated, for example by management commands or the admin. The admin "
"constructs querysets to validate its form inputs in various edge cases "
"multiple times, so there is a possibility your callable may be invoked "
"several times."
msgstr ""
"如果 ``limit_choices_to`` 使用了可调用对象，那么每次实例化一个新的表单时，都"
"会调用该功能。它也可以在模型被验证时被调用，例如由管理命令或管理中调用。管理"
"中构建查询集来多次验证各种边缘情况下的表单输入，所以你的可调用对象有可能会被"
"多次调用。"

msgid ""
"The name to use for the relation from the related object back to this one. "
"It's also the default value for :attr:`related_query_name` (the name to use "
"for the reverse filter name from the target model). See the :ref:`related "
"objects documentation <backwards-related-objects>` for a full explanation "
"and example. Note that you must set this value when defining relations on :"
"ref:`abstract models <abstract-base-classes>`; and when you do so :ref:`some "
"special syntax <abstract-related-name>` is available."
msgstr ""
"用于从相关对象到这个对象的关系的名称。这也是 :attr:`related_query_name` 的默"
"认值（用于从目标模型反向过滤名称的名称）。请参阅 :ref:`关联对象文档 "
"<backwards-related-objects>` 以获得完整的解释和示例。请注意，当你在 :ref:`抽"
"象模型 <abstract-base-classes>`上定义关系时，必须设置这个值；当你这样做时， :"
"ref:`一些特殊的语法 <abstract-related-name>` 是可用的。"

msgid ""
"If you'd prefer Django not to create a backwards relation, set "
"``related_name`` to ``'+'`` or end it with ``'+'``. For example, this will "
"ensure that the ``User`` model won't have a backwards relation to this "
"model::"
msgstr ""
"如果你不希望 Django 创建一个反向关系，可以将 ``related_name`` 设置为 ``'+'`` "
"或者以 ``'+'`` 结束。例如，这将确保 ``User`` 模型不会与这个模型有反向关系："

msgid ""
"The name to use for the reverse filter name from the target model. It "
"defaults to the value of :attr:`related_name` or :attr:`~django.db.models."
"Options.default_related_name` if set, otherwise it defaults to the name of "
"the model::"
msgstr ""
"目标模型中反向过滤器的名称。如果设置了，它默认为 :attr:`related_name` 或 :"
"attr:`~django.db.models.Options.default_related_name` 的值，否则默认为模型的"
"名称："

msgid ""
"Like :attr:`related_name`, ``related_query_name`` supports app label and "
"class interpolation via :ref:`some special syntax <abstract-related-name>`."
msgstr ""
"和 :attr:`related_name` 一样，``related_query_name`` 通过 :ref:`一些特殊的语"
"法 <abstract-related-name>` 支持应用标签和类的插值。"

msgid ""
"The field on the related object that the relation is to. By default, Django "
"uses the primary key of the related object. If you reference a different "
"field, that field must have ``unique=True``."
msgstr ""
"关联对象的字段。默认情况下，Django 使用相关对象的主键。如果你引用了一个不同的"
"字段，这个字段必须有 ``unique=True``。"

msgid ""
"Controls whether or not a constraint should be created in the database for "
"this foreign key. The default is ``True``, and that's almost certainly what "
"you want; setting this to ``False`` can be very bad for data integrity. That "
"said, here are some scenarios where you might want to do this:"
msgstr ""
"控制是否应该在数据库中为这个外键创建一个约束。默认值是 ``True``，这几乎是你想"
"要的；将其设置为 ``False`` 对数据完整性非常不利。话虽如此，下面是一些你可能想"
"要这样做的情况："

msgid "You have legacy data that is not valid."
msgstr "你有无效的冗余数据"

msgid "You're sharding your database."
msgstr "你正在共享你的数据库"

msgid ""
"If this is set to ``False``, accessing a related object that doesn't exist "
"will raise its ``DoesNotExist`` exception."
msgstr ""
"如果将此设置为 ``False``，访问一个不存在的相关对象将引发 ``DoesNotExist`` 异"
"常。"

msgid ""
"Controls the migration framework's reaction if this :class:`ForeignKey` is "
"pointing at a swappable model. If it is ``True`` - the default - then if "
"the :class:`ForeignKey` is pointing at a model which matches the current "
"value of ``settings.AUTH_USER_MODEL`` (or another swappable model setting) "
"the relationship will be stored in the migration using a reference to the "
"setting, not to the model directly."
msgstr ""
"控制迁移框架的反应，如果这个 :class:`ForeignKey` 指向一个可交换的模型。如果它"
"是 ``True`` ——默认值-——那么如果 :class:`ForeignKey` 指向的模型与 ``settings."
"AUTH_USER_MODEL`` 的当前值相匹配（或其他可互换模型配置），则关系将在迁移中使"
"用对配置的引用而不是直接对模型进行存储。"

msgid ""
"You only want to override this to be ``False`` if you are sure your model "
"should always point toward the swapped-in model - for example, if it is a "
"profile model designed specifically for your custom user model."
msgstr ""
"只有当你确定你的模型应该总是指向换入的模型时，你才想把它覆盖为 ``False``，例"
"如，如果它是一个专门为你的自定义用户模型设计的配置文件模型。"

msgid ""
"Setting it to ``False`` does not mean you can reference a swappable model "
"even if it is swapped out - ``False`` means that the migrations made with "
"this ForeignKey will always reference the exact model you specify (so it "
"will fail hard if the user tries to run with a User model you don't support, "
"for example)."
msgstr ""
"将它设置为 ``False`` 并不意味着你可以引用一个可交换的模型，即使它被交换了—— "
"``False`` 意味着用这个外键进行的迁移将始终引用你指定的确切模型（所以如果用户"
"试图用你不支持的 User 模型运行，它将失败，例如）。"

msgid "If in doubt, leave it to its default of ``True``."
msgstr "如果不确定，就保留它在默认为 ``True`` 的状态。"

msgid "``ManyToManyField``"
msgstr "``ManyToManyField``"

msgid ""
"A many-to-many relationship. Requires a positional argument: the class to "
"which the model is related, which works exactly the same as it does for :"
"class:`ForeignKey`, including :ref:`recursive <recursive-relationships>` "
"and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""
"一个多对多的关系。需要一个位置参数：模型相关的类，它的工作原理与 :class:"
"`ForeignKey` 完全相同，包括 :ref:`递归 <recursive-relationships>` 和 :ref:`惰"
"性 <lazy-relationships>` 关系。"

msgid ""
"Related objects can be added, removed, or created with the field's :class:"
"`~django.db.models.fields.related.RelatedManager`."
msgstr ""
"可以通过字段的 :class:`~django.db.models.fields.fields.related."
"RelatedManager` 来添加、删除或创建相关对象。"

msgid ""
"Behind the scenes, Django creates an intermediary join table to represent "
"the many-to-many relationship. By default, this table name is generated "
"using the name of the many-to-many field and the name of the table for the "
"model that contains it. Since some databases don't support table names above "
"a certain length, these table names will be automatically truncated and a "
"uniqueness hash will be used, e.g. ``author_books_9cdf``. You can manually "
"provide the name of the join table using the :attr:`~ManyToManyField."
"db_table` option."
msgstr ""
"在幕后，Django 创建了一个中间连接表来表示多对多的关系。默认情况下，这个表名是"
"使用多对多字段的名称和包含它的模型的表名生成的。由于有些数据库不支持超过一定"
"长度的表名，这些表名将被自动截断，并使用唯一性哈希，例如 "
"``author_books_9cdf``。你可以使用 :attr:`~ManyToManyField.db_table` 选项手动"
"提供连接表的名称。"

msgid ""
":class:`ManyToManyField` accepts an extra set of arguments -- all optional "
"-- that control how the relationship functions."
msgstr ""
":class:`ManyToManyField` 接受一组额外的参数——都是可选的——控制关系如何运作。"

msgid "Same as :attr:`ForeignKey.related_name`."
msgstr "与 :attr:`ForeignKey.related_name` 相同。"

msgid "Same as :attr:`ForeignKey.related_query_name`."
msgstr "与 :attr:`ForeignKey.related_query_name` 相同。"

msgid "Same as :attr:`ForeignKey.limit_choices_to`."
msgstr "与 :attr:`ForeignKey.limit_choices_to` 相同。"

msgid ""
"Only used in the definition of ManyToManyFields on self. Consider the "
"following model::"
msgstr "仅在自身上定义多对多字段关系时。考虑以下模型"

msgid ""
"When Django processes this model, it identifies that it has a :class:"
"`ManyToManyField` on itself, and as a result, it doesn't add a "
"``person_set`` attribute to the ``Person`` class. Instead, the :class:"
"`ManyToManyField` is assumed to be symmetrical -- that is, if I am your "
"friend, then you are my friend."
msgstr ""
"当 Django 处理这个模型时，它识别出它本身有一个 :class:`ManyToManyField`，因"
"此，它没有给 ``Person`` 类添加 ``person_set`` 属性。相反， :class:"
"`ManyToManyField` 被认为是对称的，也就是说，如果我是你的朋友，那么你就是我的"
"朋友。"

msgid ""
"If you do not want symmetry in many-to-many relationships with ``self``, "
"set :attr:`~ManyToManyField.symmetrical` to ``False``. This will force "
"Django to add the descriptor for the reverse relationship, allowing :class:"
"`ManyToManyField` relationships to be non-symmetrical."
msgstr ""
"如果你不想让 ``self`` 的多对多关系对称，可以将 :attr:`~ManyToManyField."
"symmetrical` 设置为 ``False``。这样会强制 Django 添加反向关系的描述符，允许 :"
"class:`ManyToManyField` 关系是非对称的。"

msgid ""
"Django will automatically generate a table to manage many-to-many "
"relationships. However, if you want to manually specify the intermediary "
"table, you can use the :attr:`~ManyToManyField.through` option to specify "
"the Django model that represents the intermediate table that you want to use."
msgstr ""
"Django 会自动生成一个表来管理多对多关系。但是，如果你想手动指定中间表，你可以"
"使用 :attr:`~ManyToManyField.through` 选项来指定代表你要使用的中间表的 "
"Django 模型。"

msgid ""
"The most common use for this option is when you want to associate :ref:"
"`extra data with a many-to-many relationship <intermediary-manytomany>`."
msgstr ""
"这个选项最常见的用法是当你想把 :ref:`额外的数据与多对多关系 <intermediary-"
"manytomany>` 联系起来。"

msgid ""
"If you don't want multiple associations between the same instances, add a :"
"class:`~django.db.models.UniqueConstraint` including the from and to fields. "
"Django's automatically generated many-to-many tables include such a "
"constraint."
msgstr ""
"如果你不想让同一个实例之间有多个关联，可以添加一个 :class:`~django.db.models."
"UniqueConstraint`，包括 from 和 to 字段。Django 自动生成的多对多表就包含了这"
"样的约束。"

msgid ""
"Recursive relationships using an intermediary model can't determine the "
"reverse accessors names, as they would be the same. You need to set a :attr:"
"`~ForeignKey.related_name` to at least one of them. If you'd prefer Django "
"not to create a backwards relation, set ``related_name`` to ``'+'``."
msgstr ""
"使用代理模型的递归关系不能确定反向访问器的名称，因为它们会是相同的。你需要设"
"置一个 :attr:`~ForeignKey.related_name` 到其中至少一个。如果你希望 Django 不"
"创建反向关系，请将 ``related_name`` 设置为 ``'+'``。"

msgid ""
"If you don't specify an explicit ``through`` model, there is still an "
"implicit ``through`` model class you can use to directly access the table "
"created to hold the association. It has three fields to link the models."
msgstr ""
"如果你没有指定一个显式的 ``through`` 模型，你仍然可以使用一个隐式的 "
"``through`` 模型类来直接访问为保持关联而创建的表。它有三个字段来链接模型。"

msgid ""
"If the source and target models differ, the following fields are generated:"
msgstr "如果源模型和目标模型不同，则会生成以下字段："

msgid "``id``: the primary key of the relation."
msgstr "``id`` ：关系的主键。"

msgid ""
"``<containing_model>_id``: the ``id`` of the model that declares the "
"``ManyToManyField``."
msgstr "``<containing_model>_id`` ：声明 ``ManyToManyField`` 的模型的 ``id``。"

msgid ""
"``<other_model>_id``: the ``id`` of the model that the ``ManyToManyField`` "
"points to."
msgstr "``<other_model>_id`` ：``ManyToManyField`` 指向的模型的 ``id``。"

msgid ""
"If the ``ManyToManyField`` points from and to the same model, the following "
"fields are generated:"
msgstr ""
"如果 ``ManyToManyField`` 指向的来源和目标是相同的模型， 下面的字段会生成："

msgid ""
"``from_<model>_id``: the ``id`` of the instance which points at the model (i."
"e. the source instance)."
msgstr "``from_<model>_id`` ：指向模型的实例（即源实例）的 ``id``。"

msgid ""
"``to_<model>_id``: the ``id`` of the instance to which the relationship "
"points (i.e. the target model instance)."
msgstr "``to_<model>_id`` ：关系所指向的实例（即目标模型实例）的 ``id``。"

msgid ""
"This class can be used to query associated records for a given model "
"instance like a normal model::"
msgstr "这个类可以像普通模型一样，用于查询给定模型实例的关联记录："

msgid ""
"Only used when a custom intermediary model is specified. Django will "
"normally determine which fields of the intermediary model to use in order to "
"establish a many-to-many relationship automatically. However, consider the "
"following models::"
msgstr ""
"只有当指定了一个自定义的中间模型时才会使用，Django 通常会决定使用中介模型的哪"
"些字段来自动建立多对多的关系。然而，考虑以下模型："

msgid ""
"``Membership`` has *two* foreign keys to ``Person`` (``person`` and "
"``inviter``), which makes the relationship ambiguous and Django can't know "
"which one to use. In this case, you must explicitly specify which foreign "
"keys Django should use using ``through_fields``, as in the example above."
msgstr ""
"``Membership`` 对 ``Person`` 有 *两个* 外键（ ``person`` 和 ``inviter`` ），"
"这就使得两者的关系变得模糊不清，Django 无法知道应该使用哪个外键。在这种情况"
"下，你必须使用 ``through_fields`` 明确指定 Django 应该使用哪个外键，就像上面"
"的例子一样。"

msgid ""
"``through_fields`` accepts a 2-tuple ``('field1', 'field2')``, where "
"``field1`` is the name of the foreign key to the model the :class:"
"`ManyToManyField` is defined on (``group`` in this case), and ``field2`` the "
"name of the foreign key to the target model (``person`` in this case)."
msgstr ""
"``through_fields`` 接受一个二元元组 ``('field1', 'field2')``，其中 "
"``field1`` 是定义在 :class:`ManyToManyField` 上的模型（本例中为 ``group`` ）"
"的外键名称，``field2`` 是目标模型（本例中为 ``person`` ）的外键名称。"

msgid ""
"When you have more than one foreign key on an intermediary model to any (or "
"even both) of the models participating in a many-to-many relationship, you "
"*must* specify ``through_fields``. This also applies to :ref:`recursive "
"relationships <recursive-relationships>` when an intermediary model is used "
"and there are more than two foreign keys to the model, or you want to "
"explicitly specify which two Django should use."
msgstr ""
"当你在中间模型上有一个以上的外键到任何一个（甚至两个）参与多对多关系的模型"
"时，你 *必须* 指定 ``through_fields``。这也适用于 :ref:`递归关系 <recursive-"
"relationships>`，当使用一个中间模型，并且该模型有两个以上的外键，或者你想明确"
"指定 Django 应该使用哪两个外键。"

msgid ""
"The name of the table to create for storing the many-to-many data. If this "
"is not provided, Django will assume a default name based upon the names of: "
"the table for the model defining the relationship and the name of the field "
"itself."
msgstr ""
"要创建的用于存储多对多数据的表的名称。如果没有提供这个表名，Django 将根据以下"
"表名创建一个默认表名：定义关系的模型表和字段本身的名称。"

msgid ""
"Controls whether or not constraints should be created in the database for "
"the foreign keys in the intermediary table. The default is ``True``, and "
"that's almost certainly what you want; setting this to ``False`` can be very "
"bad for data integrity. That said, here are some scenarios where you might "
"want to do this:"
msgstr ""
"控制是否应该在数据库中为中间表的外键创建约束。默认值是 ``True``，这几乎是你想"
"要的；将其设置为 ``False`` 对数据完整性非常不利。话说回来，下面是一些你可能想"
"要这样做的情况："

msgid "It is an error to pass both ``db_constraint`` and ``through``."
msgstr "同时传递 ``db_constraint`` 和 ``through`` 会引发错误。"

msgid ""
"Controls the migration framework's reaction if this :class:`ManyToManyField` "
"is pointing at a swappable model. If it is ``True`` - the default - then if "
"the :class:`ManyToManyField` is pointing at a model which matches the "
"current value of ``settings.AUTH_USER_MODEL`` (or another swappable model "
"setting) the relationship will be stored in the migration using a reference "
"to the setting, not to the model directly."
msgstr ""
"控制迁移框架的反应，如果这个 :class:`ManyToManyField` 指向一个可交换的模型。"
"如果它是 ``True`` ——默认值——那么如果 :class:`ManyToManyField` 指向的模型与 "
"``settings.AUTH_USER_MODEL`` 的当前值相匹配（或其他可交换模型配置），关系将被"
"存储在迁移中，使用对配置的引用，而不是直接对模型的引用。"

msgid ":class:`ManyToManyField` does not support :attr:`~Field.validators`."
msgstr ":class:`ManyToManyField` 不支持 :attr:`~Field.validators`。"

msgid ""
":attr:`~Field.null` has no effect since there is no way to require a "
"relationship at the database level."
msgstr ":attr:`~Field.null` 没有效果，因为没有办法在数据库层面要求建立关系。"

msgid "``OneToOneField``"
msgstr "``OneToOneField``"

msgid ""
"A one-to-one relationship. Conceptually, this is similar to a :class:"
"`ForeignKey` with :attr:`unique=True <Field.unique>`, but the \"reverse\" "
"side of the relation will directly return a single object."
msgstr ""
"一对一的关系。概念上，这类似于 :class:`ForeignKey` 与 :attr:`unique=True "
"<Field.unique>`，但关系的“反向”将直接返回一个单一对象。"

msgid ""
"This is most useful as the primary key of a model which \"extends\" another "
"model in some way; :ref:`multi-table-inheritance` is implemented by adding "
"an implicit one-to-one relation from the child model to the parent model, "
"for example."
msgstr ""
"最有用的是作为某种方式“扩展”另一个模型的主键；:ref:`multi-table-inheritance` "
"是通过添加一个从子模型到父模型的隐式一对一关系来实现的，例如："

msgid ""
"One positional argument is required: the class to which the model will be "
"related. This works exactly the same as it does for :class:`ForeignKey`, "
"including all the options regarding :ref:`recursive <recursive-"
"relationships>` and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""
"需要一个位置参数：模型将与之相关的类。这与 :class:`ForeignKey` 的工作原理完全"
"相同，包括关于 :ref:`递归 <recursive-relationships>` 和 :ref:`惰性 <lazy-"
"relationships>` 关系的所有选项。"

msgid ""
"If you do not specify the :attr:`~ForeignKey.related_name` argument for the "
"``OneToOneField``, Django will use the lowercase name of the current model "
"as default value."
msgstr ""
"如果没有为 ``OneToOneField`` 指定 :attr:`~ForeignKey.related_name` 参数，"
"Django 将使用当前模型的小写名作为默认值。"

msgid "With the following example::"
msgstr "举例如下："

msgid "your resulting ``User`` model will have the following attributes:"
msgstr ""

msgid ""
"A ``RelatedObjectDoesNotExist`` exception is raised when accessing the "
"reverse relationship if an entry in the related table doesn't exist. This is "
"a subclass of the target model's :exc:`Model.DoesNotExist <django.db.models."
"Model.DoesNotExist>` exception and can be accessed as an attribute of the "
"reverse accessor. For example, if a user doesn't have a supervisor "
"designated by ``MySpecialUser``::"
msgstr ""

msgid ""
"Additionally, ``OneToOneField`` accepts all of the extra arguments accepted "
"by :class:`ForeignKey`, plus one extra argument:"
msgstr ""
"此外，``OneToOneField`` 接受 :class:`ForeignKey` 接受的所有额外参数，外加一个"
"额外参数："

msgid ""
"When ``True`` and used in a model which inherits from another :term:"
"`concrete model`, indicates that this field should be used as the link back "
"to the parent class, rather than the extra ``OneToOneField`` which would "
"normally be implicitly created by subclassing."
msgstr ""
"当 ``True`` 并用于从另一个 :term:`concrete model` 继承的模型中时，表示该字段"
"应被用作回到父类的链接，而不是通常通过子类隐含创建的额外 ``OneToOneField``。"

msgid ""
"See :doc:`One-to-one relationships </topics/db/examples/one_to_one>` for "
"usage examples of ``OneToOneField``."
msgstr ""
"参见 :doc:`一对一关系 </topics/db/examples/one_to_one>`，了解 "
"``OneToOneField`` 的使用实例。"

msgid "Field API reference"
msgstr "字段 API 参考"

msgid ""
"``Field`` is an abstract class that represents a database table column. "
"Django uses fields to create the database table (:meth:`db_type`), to map "
"Python types to database (:meth:`get_prep_value`) and vice-versa (:meth:"
"`from_db_value`)."
msgstr ""
"``Field`` 是一个抽象的类，表示一个数据库表的列。Django 使用字段来创建数据库表"
"（ :meth:`db_type` ），将 Python 类型映射到数据库（ :meth:"
"`get_prep_value` ），反之亦然（ :meth:`from_db_value` ）。"

msgid ""
"A field is thus a fundamental piece in different Django APIs, notably, :"
"class:`models <django.db.models.Model>` and :class:`querysets <django.db."
"models.query.QuerySet>`."
msgstr ""
"因此，一个字段在不同的 Django API 中是一个基本的部分，特别是 :class:`models "
"<django.db.models.Model>` 和 :class:`querysets <django.db.models.query."
"QuerySet>`。"

msgid ""
"In models, a field is instantiated as a class attribute and represents a "
"particular table column, see :doc:`/topics/db/models`. It has attributes "
"such as :attr:`null` and :attr:`unique`, and methods that Django uses to map "
"the field value to database-specific values."
msgstr ""
"在模型中中，字段被实例化为一个类属性，并代表一个特定的表列，见 :doc:`/topics/"
"db/models`。它的属性有 :attr:`null` 和 :attr:`unique`，以及 Django 用来将字段"
"值映射到数据库特定值的方法。"

msgid ""
"A ``Field`` is a subclass of :class:`~django.db.models.lookups."
"RegisterLookupMixin` and thus both :class:`~django.db.models.Transform` and :"
"class:`~django.db.models.Lookup` can be registered on it to be used in "
"``QuerySet``\\s (e.g. ``field_name__exact=\"foo\"``). All :ref:`built-in "
"lookups <field-lookups>` are registered by default."
msgstr ""
"``Field`` 是 :class:`~django.db.models.lookups.RegisterLookupMixin` 的子类，"
"因此 :class:`~django.db.models.Transform` 和 :class:`~django.db.models."
"Lookup` 都可以在它上面注册，以便在 ``QuerySet`` 中使用（例如： "
"``field_name__exact=\"foo\"`` ）。所有 :ref:`内置查找 <field-lookups>` 都是默"
"认注册的。"

msgid ""
"All of Django's built-in fields, such as :class:`CharField`, are particular "
"implementations of ``Field``. If you need a custom field, you can either "
"subclass any of the built-in fields or write a ``Field`` from scratch. In "
"either case, see :doc:`/howto/custom-model-fields`."
msgstr ""
"所有 Django 的内置字段，如 :class:`CharField`，都是 ``Field`` 的特殊实现。如"
"果你需要一个自定义的字段，你可以对任何一个内置字段进行子类化，或者从头开始写"
"一个 ``Field``。无论哪种情况，请参见 :doc:`/howto/custom-model-fields`。"

msgid ""
"A verbose description of the field, e.g. for the :mod:`django.contrib."
"admindocs` application."
msgstr "字段的详细描述，例如： :mod:`django.contrib.admindocs` 应用程序。"

msgid "The description can be of the form::"
msgstr "描述的形式可以是："

msgid "where the arguments are interpolated from the field's ``__dict__``."
msgstr "其中的参数是从字段的 ``__dict__`` 中插入的。"

msgid ""
"A class implementing the :py:ref:`descriptor protocol <descriptors>` that is "
"instantiated and assigned to the model instance attribute. The constructor "
"must accept a single argument, the ``Field`` instance. Overriding this class "
"attribute allows for customizing the get and set behavior."
msgstr ""
"一个实现 :py:ref:`描述符协议 <descriptors>` 的类，它被实例化并分配给模型实例"
"属性。构造函数必须接受一个参数，即 ``Field`` 实例。覆盖该类属性可以自定义获取"
"和设置行为。"

msgid ""
"To map a ``Field`` to a database-specific type, Django exposes several "
"methods:"
msgstr "为了将一个 ``Field`` 映射到数据库的特定类型，Django 提供了一些方法："

msgid ""
"Returns a string naming this field for backend specific purposes. By "
"default, it returns the class name."
msgstr ""
"返回一个字符串，用于命名这个字段，以满足后台的特定目的。默认情况下，它返回的"
"是类名。"

msgid "See :ref:`emulating-built-in-field-types` for usage in custom fields."
msgstr "参见 :ref:`emulating-built-in-field-types` 在自定义字段中的用法。"

msgid ""
"Returns the database column data type for the :class:`Field`, taking into "
"account the ``connection``."
msgstr "返回 :class:`Field` 的数据库列数据类型，并考虑 ``connection``。"

msgid "See :ref:`custom-database-types` for usage in custom fields."
msgstr "参见 :ref:`custom-database-types` 在自定义字段中的用法。"

msgid ""
"Returns the database column data type for fields such as ``ForeignKey`` and "
"``OneToOneField`` that point to the :class:`Field`, taking into account the "
"``connection``."
msgstr ""
"返回指向 :class:`Field` 的 ``ForeignKey`` 和 ``OneToOneField`` 等字段的数据库"
"列数据类型，并考虑 ``connection``。"

msgid ""
"There are three main situations where Django needs to interact with the "
"database backend and fields:"
msgstr "Django 主要有三种情况需要与数据库后台和字段进行交互。"

msgid "when it queries the database (Python value -> database backend value)"
msgstr "当它查询数据库时（Python 值 -> 数据库后台值）"

msgid ""
"when it loads data from the database (database backend value -> Python value)"
msgstr "当它从数据库中加载数据时（数据库后台值 -> Python 值）"

msgid "when it saves to the database (Python value -> database backend value)"
msgstr "当它保存到数据库时（Python 值 -> 数据库后端值）"

msgid ""
"When querying, :meth:`get_db_prep_value` and :meth:`get_prep_value` are used:"
msgstr "查询时，使用 :meth:`get_db_prep_value` 和 :meth:`get_prep_value`。"

msgid ""
"``value`` is the current value of the model's attribute, and the method "
"should return data in a format that has been prepared for use as a parameter "
"in a query."
msgstr ""
"``value`` 是模型属性的当前值，该方法应以准备作为查询参数的格式返回数据。"

msgid "See :ref:`converting-python-objects-to-query-values` for usage."
msgstr "见 :ref:`converting-python-objects-to-query-values` 的用法。"

msgid ""
"Converts ``value`` to a backend-specific value. By default it returns "
"``value`` if ``prepared=True`` and :meth:`~Field.get_prep_value` if is "
"``False``."
msgstr ""
"将 ``value`` 转换为后台特定的值，默认情况下，如果 ``prepared=True``，则返回 "
"``value``。默认情况下，如果 ``prepared=True``，它将返回 ``value``，而如果是 "
"``False``，它将返回 :meth:`~Field.get_prep_value` 。"

msgid "See :ref:`converting-query-values-to-database-values` for usage."
msgstr "使用方法参见 :ref:`converting-query-values-to-database-values`。"

msgid "When loading data, :meth:`from_db_value` is used:"
msgstr "加载数据时，使用 :meth:`from_db_value`。"

msgid ""
"Converts a value as returned by the database to a Python object. It is the "
"reverse of :meth:`get_prep_value`."
msgstr "将数据库返回的值转换为 Python 对象。与 :meth:`get_prep_value` 相反。"

msgid ""
"This method is not used for most built-in fields as the database backend "
"already returns the correct Python type, or the backend itself does the "
"conversion."
msgstr ""
"这个方法不用于大多数内置字段，因为数据库后端已经返回了正确的 Python 类型，或"
"者后端自己进行了转换。"

msgid "See :ref:`converting-values-to-python-objects` for usage."
msgstr "使用方法参见 :ref:`converting-values-to-python-objects`。"

msgid ""
"For performance reasons, ``from_db_value`` is not implemented as a no-op on "
"fields which do not require it (all Django fields). Consequently you may not "
"call ``super`` in your definition."
msgstr ""
"由于性能原因，``from_db_value`` 并没有在不需要它的字段上实现 no-op（所有 "
"Django 字段）。因此，你不能在定义中调用 ``super``。"

msgid "When saving, :meth:`pre_save` and :meth:`get_db_prep_save` are used:"
msgstr "保存时，使用 :meth:`pre_save` 和 :meth:`get_db_prep_save` ："

msgid ""
"Same as the :meth:`get_db_prep_value`, but called when the field value must "
"be *saved* to the database. By default returns :meth:`get_db_prep_value`."
msgstr ""
"与 :meth:`get_db_prep_value` 相同，但当字段值必须 *保存* 到数据库中时，会被调"
"用。默认情况下返回 :meth:`get_db_prep_value`。"

msgid ""
"Method called prior to :meth:`get_db_prep_save` to prepare the value before "
"being saved (e.g. for :attr:`DateField.auto_now`)."
msgstr ""
"在 :meth:`get_db_prep_save` 之前调用的方法，在保存前准备好值（例如 :attr:"
"`DateField.auto_now` ）。"

msgid ""
"``model_instance`` is the instance this field belongs to and ``add`` is "
"whether the instance is being saved to the database for the first time."
msgstr ""
"``model_instance`` 是该字段所属的实例，``add`` 是该实例是否第一次被保存到数据"
"库中。"

msgid ""
"It should return the value of the appropriate attribute from "
"``model_instance`` for this field. The attribute name is in ``self.attname`` "
"(this is set up by :class:`~django.db.models.Field`)."
msgstr ""
"它应该从 ``model_instance`` 中返回这个字段的适当属性的值。属性名在 ``self."
"attname`` 中（这是由 :class:`~django.db.models.Field` 设置的）。"

msgid "See :ref:`preprocessing-values-before-saving` for usage."
msgstr "使用方法参见 :ref:`preprocessing-values-before-saving`。"

msgid ""
"Fields often receive their values as a different type, either from "
"serialization or from forms."
msgstr "字段经常以不同的类型接收它们的值，要么来自序列化，要么来自表单。"

msgid ""
"Converts the value into the correct Python object. It acts as the reverse "
"of :meth:`value_to_string`, and is also called in :meth:`~django.db.models."
"Model.clean`."
msgstr ""
"将值转换为正确的 Python 对象。它的作用与 :meth:`value_to_string` 相反，并且"
"在 :meth:`~django.db.models.Model.clean` 中也被调用。"

msgid ""
"Besides saving to the database, the field also needs to know how to "
"serialize its value:"
msgstr "除了保存到数据库，字段还需要知道如何将其值序列化。"

msgid "Returns the field's value for the given model instance."
msgstr "返回给定模型实例的字段值。"

msgid "This method is often used by :meth:`value_to_string`."
msgstr "这个方法经常被 :meth:`value_to_string` 使用。"

msgid "Converts ``obj`` to a string. Used to serialize the value of the field."
msgstr "将 ``obj`` 转换为字符串。用于序列化字段的值。"

msgid "See :ref:`converting-model-field-to-serialization` for usage."
msgstr "使用方法参见 :ref:`converting-model-field-to-serialization`。"

msgid ""
"When using :class:`model forms <django.forms.ModelForm>`, the ``Field`` "
"needs to know which form field it should be represented by:"
msgstr ""
"当使用 :class:`model forms <django.forms.ModelForm>` 时，``Field`` 需要知道它"
"应该由哪个表单字段来表示。"

msgid ""
"Returns the default :class:`django.forms.Field` of this field for :class:"
"`~django.forms.ModelForm`."
msgstr ""
"返回该字段默认的 :class:`django.forms.Field` 给 :class:`~django.forms."
"ModelForm`。"

msgid ""
"By default, if both ``form_class`` and ``choices_form_class`` are ``None``, "
"it uses :class:`~django.forms.CharField`. If the field has :attr:`~django.db."
"models.Field.choices` and ``choices_form_class`` isn't specified, it uses :"
"class:`~django.forms.TypedChoiceField`."
msgstr ""
"默认情况下，如果 ``form_class`` 和 ``choices_form_class`` 都是 ``None``，则使"
"用 :class:`~django.forms.CharField`。如果字段有 :attr:`~django.db.models."
"Field.chips`，且 ``choices_form_class`` 没有指定，则使用 :class:`~django."
"forms.TypedChoiceField`。"

msgid "See :ref:`specifying-form-field-for-model-field` for usage."
msgstr "使用方法参见 :ref:`specifying-form-field-for-model-field`。"

msgid "Returns a 4-tuple with enough information to recreate the field:"
msgstr "返回一个包含足够信息的四元元组来重新创建字段。"

msgid "The name of the field on the model."
msgstr "模型上的字段名称。"

msgid ""
"The import path of the field (e.g. ``\"django.db.models.IntegerField\"``). "
"This should be the most portable version, so less specific may be better."
msgstr ""
"字段的导入路径（例如 ``\"django.db.models.IntegerField\"`` ）。这应该是最可移"
"植版本，所以不那么具体可能更好。"

msgid "A list of positional arguments."
msgstr "一个位置参数的列表。"

msgid "A dict of keyword arguments."
msgstr "一个关键字参数的字典。"

msgid ""
"This method must be added to fields prior to 1.7 to migrate its data using :"
"doc:`/topics/migrations`."
msgstr ""
"这个方法必须添加到 1.7 之前的字段中，才能使用 :doc:`/topics/migrations` 迁移"
"其数据。"

msgid "Registering and fetching lookups"
msgstr "注册和获取查询"

msgid ""
"``Field`` implements the :ref:`lookup registration API <lookup-registration-"
"api>`. The API can be used to customize which lookups are available for a "
"field class and its instances, and how lookups are fetched from a field."
msgstr ""

msgid ""
"Support for registering lookups on :class:`~django.db.models.Field` "
"instances was added."
msgstr ""

msgid "Field attribute reference"
msgstr "字段属性参考"

msgid ""
"Every ``Field`` instance contains several attributes that allow "
"introspecting its behavior. Use these attributes instead of ``isinstance`` "
"checks when you need to write code that depends on a field's functionality. "
"These attributes can be used together with the :ref:`Model._meta API <model-"
"meta-field-api>` to narrow down a search for specific field types. Custom "
"model fields should implement these flags."
msgstr ""
"每个 ``Field`` 实例都包含几个属性，允许对其行为进行内省。当你需要编写依赖于字"
"段功能的代码时，可以使用这些属性来代替 ``isinstance`` 检查。这些属性可以与 :"
"ref:`Model._meta API <model-meta-field-api>` 一起使用，以缩小对特定字段类型的"
"搜索范围。自定义模型字段应该实现这些标志。"

msgid "Attributes for fields"
msgstr "字段的属性"

msgid ""
"Boolean flag that indicates if the field was automatically created, such as "
"the ``OneToOneField`` used by model inheritance."
msgstr "表示是否自动创建字段的布尔标志，如模型继承使用的 ``OneToOneField``。"

msgid ""
"Boolean flag that indicates if the field has a database column associated "
"with it."
msgstr "布尔值标志，表示该字段是否有与之相关的数据库列。"

msgid ""
"Boolean flag that indicates if a field is used to back another non-hidden "
"field's functionality (e.g. the ``content_type`` and ``object_id`` fields "
"that make up a ``GenericForeignKey``). The ``hidden`` flag is used to "
"distinguish what constitutes the public subset of fields on the model from "
"all the fields on the model."
msgstr ""
"布尔值标志，表示一个字段是否用于支持另一个非隐藏字段的功能（例如，组成 "
"``GenericForeignKey`` 的 ``content_type`` 和 ``object_id`` 字段）。"
"``hidden`` 标志用于区分构成模型上公共字段子集的内容和模型上所有字段。"

msgid ""
":meth:`Options.get_fields() <django.db.models.options.Options.get_fields()>` "
"excludes hidden fields by default. Pass in ``include_hidden=True`` to return "
"hidden fields in the results."
msgstr ""
":meth:`Options.get_fields() <django.db.models.options.Options.get_fields()>` "
"默认情况下不包括隐藏字段。传入 ``include_hidden=True`` 在结果中返回隐藏字段。"

msgid ""
"Boolean flag that indicates if a field contains references to one or more "
"other models for its functionality (e.g. ``ForeignKey``, "
"``ManyToManyField``, ``OneToOneField``, etc.)."
msgstr ""
"布尔值标志，表示一个字段是否包含对一个或多个其他模型的功能引用（如 "
"``ForeignKey``、``ManyToManyField``、``OneToOneField`` 等）。"

msgid ""
"Returns the model on which the field is defined. If a field is defined on a "
"superclass of a model, ``model`` will refer to the superclass, not the class "
"of the instance."
msgstr ""
"返回定义字段的模型。如果一个字段定义在一个模型的超类上，``model`` 将指的是超"
"类，而不是实例的类。"

msgid "Attributes for fields with relations"
msgstr "有关系的字段的属性"

msgid ""
"These attributes are used to query for the cardinality and other details of "
"a relation. These attribute are present on all fields; however, they will "
"only have boolean values (rather than ``None``) if the field is a relation "
"type (:attr:`Field.is_relation=True <Field.is_relation>`)."
msgstr ""
"这些属性用于查询关系的基数和其他细节。这些属性在所有字段上都存在；但是，如果"
"字段是关系类型（ :attr:`Field.is_relation=True <Field.is_relation>` ），它们"
"只有布尔值（而不是 ``None`` ）。"

msgid ""
"Boolean flag that is ``True`` if the field has a many-to-many relation; "
"``False`` otherwise. The only field included with Django where this is "
"``True`` is ``ManyToManyField``."
msgstr ""
"如果字段有多对多关系，则为 ``True``，否则为 ``False``。Django 中唯一一个是 "
"``True`` 的字段是 ``ManyToManyField``。"

msgid ""
"Boolean flag that is ``True`` if the field has a many-to-one relation, such "
"as a ``ForeignKey``; ``False`` otherwise."
msgstr ""
"如果字段有多对一关系，如 ``ForeignKey``，则为 ``True`` ；否则为 ``False``。"

msgid ""
"Boolean flag that is ``True`` if the field has a one-to-many relation, such "
"as a ``GenericRelation`` or the reverse of a ``ForeignKey``; ``False`` "
"otherwise."
msgstr ""
"如果该字段有一对多关系，如 ``GenericRelation`` 或 ``ForeignKey`` 的反向关系，"
"则为 ``True`` ；否则为 ``False``。"

msgid ""
"Boolean flag that is ``True`` if the field has a one-to-one relation, such "
"as a ``OneToOneField``; ``False`` otherwise."
msgstr ""
"如果字段有一对一的关系，如 ``OneToOneField``，则为 ``True`` ；否则为 "
"``False``。"

msgid ""
"Points to the model the field relates to. For example, ``Author`` in "
"``ForeignKey(Author, on_delete=models.CASCADE)``. The ``related_model`` for "
"a ``GenericForeignKey`` is always ``None``."
msgstr ""
"指向该字段所涉及的模型。例如，``ForeignKey(Author, on_delete=models."
"CASCADE)`` 中的 ``Author``。``GenericForeignKey`` 的 ``related_model`` 总是 "
"``None``。"

msgid ""
"Model API reference. For introductory material, see :doc:`/topics/db/models`."
msgstr "模型 API 参考。关于介绍性材料，见 :doc:`/topics/db/models`。"

msgid "Model index reference"
msgstr "模型索引参考"

msgid ""
"Index classes ease creating database indexes. They can be added using the :"
"attr:`Meta.indexes <django.db.models.Options.indexes>` option. This document "
"explains the API references of :class:`Index` which includes the `index "
"options`_."
msgstr ""
"索引类便于创建数据库索引。它们可以使用 :attr:`Meta.indexes <django.db.models."
"Options.indexes>` 选项来添加。本文档解释了 :class:`Index` 的 API 引用，其中包"
"括 `index options`_ 。"

msgid "Referencing built-in indexes"
msgstr "引用内置索引"

msgid ""
"Indexes are defined in ``django.db.models.indexes``, but for convenience "
"they're imported into :mod:`django.db.models`. The standard convention is to "
"use ``from django.db import models`` and refer to the indexes as ``models."
"<IndexClass>``."
msgstr ""
"索引是在 ``django.db.models.indexes`` 中定义的，但为了方便，它们被导入到 :"
"mod:`django.db.models` 中。标准的惯例是使用 ``from django.db import models`` "
"并将索引称为 ``models. <IndexClass>``。"

msgid "``Index`` options"
msgstr "``Index`` 选项"

msgid "Creates an index (B-Tree) in the database."
msgstr "在数据库中创建一个索引（B 树）。"

msgid ""
"Positional argument ``*expressions`` allows creating functional indexes on "
"expressions and database functions."
msgstr "位置参数 ``*expressions`` 允许在表达式和数据库函数上创建函数索引。"

msgid ""
"creates an index on the lowercased value of the ``title`` field in "
"descending order and the ``pub_date`` field in the default ascending order."
msgstr ""
"在 ``title`` 字段的小写字母上按降序创建索引，在 ``pub_date`` 字段上按默认升序"
"创建索引。"

msgid "Another example::"
msgstr "另一个例子："

msgid ""
"creates an index on the result of multiplying fields ``height`` and "
"``weight`` and the ``weight`` rounded to the nearest integer."
msgstr ""
"在字段 ``height`` 和 ``weight`` 相乘的结果上创建一个索引，``weight`` 四舍五入"
"为最接近的整数。"

msgid ":attr:`Index.name` is required when using ``*expressions``."
msgstr ":attr:`Index.name` 在使用 ``*expressions`` 时是必需的。"

msgid "Restrictions on Oracle"
msgstr "Oracle 的限制"

msgid ""
"Oracle requires functions referenced in an index to be marked as "
"``DETERMINISTIC``. Django doesn't validate this but Oracle will error. This "
"means that functions such as :class:`Random() <django.db.models.functions."
"Random>` aren't accepted."
msgstr ""
"Oracle 要求索引中引用的函数被标记为 ``DETERMINISTIC``。Django 并不验证这一"
"点，但 Oracle 会出错。这意味着诸如 :class:`Random() <django.db.models."
"function.Random>` 这样的函数不被接受。"

msgid "Restrictions on PostgreSQL"
msgstr "PostgreSQL 的限制"

msgid ""
"PostgreSQL requires functions and operators referenced in an index to be "
"marked as ``IMMUTABLE``. Django doesn't validate this but PostgreSQL will "
"error. This means that functions such as :class:`Concat() <django.db.models."
"functions.Concat>` aren't accepted."
msgstr ""
"PostgreSQL 要求在索引中引用的函数和运算符被标记为 ``IMMUTABLE``。Django 并不"
"验证这一点，但 PostgreSQL 会出错。这意味着诸如 :class:`Concat() <django.db."
"models.function.Concat>` 这样的函数不被接受。"

msgid ""
"Functional indexes are ignored with MySQL < 8.0.13 and MariaDB as neither "
"supports them."
msgstr "函数索引在 MySQL < 8.0.13 和 MariaDB 中被忽略，因为两者都不支持它们。"

msgid ""
"A list or tuple of the name of the fields on which the index is desired."
msgstr "需要索引字段的名称列表或元组。"

msgid ""
"By default, indexes are created with an ascending order for each column. To "
"define an index with a descending order for a column, add a hyphen before "
"the field's name."
msgstr ""
"默认情况下，索引是以每列的升序创建的。要为列定义一个降序索引，请在字段名前添"
"加一个连字符。"

msgid ""
"For example ``Index(fields=['headline', '-pub_date'])`` would create SQL "
"with ``(headline, pub_date DESC)``."
msgstr ""

msgid ""
"Index ordering isn't supported on MySQL < 8.0.1 and MariaDB < 10.8. In that "
"case, a descending index is created as a normal index."
msgstr ""

msgid ""
"The name of the index. If ``name`` isn't provided Django will auto-generate "
"a name. For compatibility with different databases, index names cannot be "
"longer than 30 characters and shouldn't start with a number (0-9) or "
"underscore (_)."
msgstr ""
"索引的名称。如果没有提供 ``name``，Django 会自动生成一个名称。为了兼容不同的"
"数据库，索引名不能超过 30 个字符，并且不应该以数字（0-9）或下划线（_）开头。"

msgid "Partial indexes in abstract base classes"
msgstr "抽象基类中的部分索引"

msgid ""
"You must always specify a unique name for an index. As such, you cannot "
"normally specify a partial index on an abstract base class, since the :attr:"
"`Meta.indexes <django.db.models.Options.indexes>` option is inherited by "
"subclasses, with exactly the same values for the attributes (including "
"``name``) each time. To work around name collisions, part of the name may "
"contain ``'%(app_label)s'`` and ``'%(class)s'``, which are replaced, "
"respectively, by the lowercased app label and class name of the concrete "
"model. For example ``Index(fields=['title'], "
"name='%(app_label)s_%(class)s_title_index')``."
msgstr ""
"你必须始终为索引指定一个唯一的名称。因此，通常不能在抽象基类上指定部分索引，"
"因为 :attr:`Meta.indexes <django.db.models.Options.indexes>` 选项是由子类继承"
"的，每次的属性值（包括 ``name`` ）都完全相同。为了解决名称碰撞的问题，名称的"
"一部分可以包含 ``'%(app_label)s'`` 和 ``'%(class)s'``，它们分别被具体模型的小"
"写应用标签和类名所代替。例如 ``Index(field=['title'], "
"name='%(app_label)s_%(class)s_title_index')``。"

msgid ""
"The name of the :doc:`database tablespace </topics/db/tablespaces>` to use "
"for this index. For single field indexes, if ``db_tablespace`` isn't "
"provided, the index is created in the ``db_tablespace`` of the field."
msgstr ""
"该索引要使用的 :doc:`数据库表空间 </topics/db/tablespaces>` 名称。对于单字段"
"索引，如果没有提供 ``db_tablespace``，则在字段的 ``db_tablespace`` 中创建索"
"引。"

msgid ""
"If :attr:`.Field.db_tablespace` isn't specified (or if the index uses "
"multiple fields), the index is created in tablespace specified in the :attr:"
"`~django.db.models.Options.db_tablespace` option inside the model's ``class "
"Meta``. If neither of those tablespaces are set, the index is created in the "
"same tablespace as the table."
msgstr ""
"如果没有指定 :attr:`.Field.db_tablespace` （或者如果索引使用了多个字段），则"
"在模型的 ``class Meta`` 里面的 :attr:`~django.db.models.Options."
"db_tablespace` 选项中指定的表空间创建索引。如果这两个表空间都没有设置，则在与"
"表相同的表空间中创建索引。"

msgid ""
"For a list of PostgreSQL-specific indexes, see :mod:`django.contrib.postgres."
"indexes`."
msgstr ""
"关于 PostgreSQL 特有的索引列表，请参见 :mod:`django.contrib.postgres."
"indexes`。"

msgid ""
"The names of the `PostgreSQL operator classes <https://www.postgresql.org/"
"docs/current/indexes-opclass.html>`_ to use for this index. If you require a "
"custom operator class, you must provide one for each field in the index."
msgstr ""
"要为这个索引使用的 `PostgreSQL 运算符类 <https://www.postgresql.org/docs/"
"current/indexes-opclass.html>`_ 名称。如果你需要一个自定义的操作类，你必须为"
"索引中的每个字段提供一个操作类。"

msgid ""
"For example, ``GinIndex(name='json_index', fields=['jsonfield'], "
"opclasses=['jsonb_path_ops'])`` creates a gin index on ``jsonfield`` using "
"``jsonb_path_ops``."
msgstr ""
"例如，``GinIndex(name='json_index', fields=['jsonfield'], "
"opclasses=['jsonb_path_ops'])`` 使用 ``jsonb_path_ops`` 在 ``jsonfield`` 上创"
"建一个 gin 索引。"

msgid ":attr:`Index.name` is required when using ``opclasses``."
msgstr ":attr:`Index.name` 在使用 ``opclasses`` 时需要。"

msgid ""
"If the table is very large and your queries mostly target a subset of rows, "
"it may be useful to restrict an index to that subset. Specify a condition as "
"a :class:`~django.db.models.Q`. For example, ``condition=Q(pages__gt=400)`` "
"indexes records with more than 400 pages."
msgstr ""
"如果表非常大，而且你的查询主要针对行的子集，那么将索引限制在该子集上可能会很"
"有用。将条件指定为 :class:`~django.db.models.Q`。例如，"
"``condition=Q(pages__gt=400)`` 对超过 400 页的记录进行索引。"

msgid ":attr:`Index.name` is required when using ``condition``."
msgstr ":attr:`Index.name` 在使用 ``condition`` 时需要。"

msgid ""
"PostgreSQL requires functions referenced in the condition to be marked as "
"IMMUTABLE. Django doesn't validate this but PostgreSQL will error. This "
"means that functions such as :ref:`date-functions` and :class:`~django.db."
"models.functions.Concat` aren't accepted. If you store dates in :class:"
"`~django.db.models.DateTimeField`, comparison to :class:`~datetime.datetime` "
"objects may require the ``tzinfo`` argument to be provided because otherwise "
"the comparison could result in a mutable function due to the casting Django "
"does for :ref:`lookups <field-lookups>`."
msgstr ""
"PostgreSQL 要求条件中引用的函数必须标记为 IMMUTABLE。Django 不会验证这一点，"
"但 PostgreSQL 会报错。这意味着诸如 :ref:`date-functions` 和 :class:`~django."
"db.models.function.Concat` 这样的函数不被接受。如果你把日期存储在 :class:"
"`~django.db.models.DateTimeField` 中，与 :class:`~datetime.datetime` 对象进行"
"比较时，可能需要提供 ``tzinfo`` 参数，否则比较的结果可能是一个可变的函数，因"
"为 Django 对 :ref:`lookups` 进行了转换。"

msgid "Restrictions on SQLite"
msgstr "SQLite 的限制"

msgid ""
"SQLite `imposes restrictions <https://www.sqlite.org/partialindex.html>`_ on "
"how a partial index can be constructed."
msgstr ""
"SQLite 对如何构建部分索引 `施加了限制 <https://www.sqlite.org/partialindex."
"html>`_ 。"

msgid ""
"Oracle does not support partial indexes. Instead, partial indexes can be "
"emulated by using functional indexes together with :class:`~django.db.models."
"expressions.Case` expressions."
msgstr ""
"Oracle 不支持部分索引。相反，部分索引可以通过使用函数索引和 :class:`~django."
"db.models.expressions.Case` 表达式来进行模拟。"

msgid ""
"The ``condition`` argument is ignored with MySQL and MariaDB as neither "
"supports conditional indexes."
msgstr ""
"在 MySQL 和 MariaDB 中，``condition`` 参数被忽略，因为它们都不支持条件索引。"

msgid ""
"A list or tuple of the names of the fields to be included in the covering "
"index as non-key columns. This allows index-only scans to be used for "
"queries that select only included fields (:attr:`~Index.include`) and filter "
"only by indexed fields (:attr:`~Index.fields`)."
msgstr ""
"一个包含在覆盖索引中作为非键列的字段名称的列表或元组。这允许仅索引扫描，用于"
"只选择包含的字段（ :attr:`~Index.include` ）和只通过索引字段过滤的查询（ :"
"attr:`~Index.fields`）。"

msgid ""
"will allow filtering on ``headline``, also selecting ``pub_date``, while "
"fetching data only from the index."
msgstr ""
"将允许对  ``headline`` 进行过滤，同时选择 ``pub_date``，而只从索引中获取数"
"据。"

msgid ""
"Using ``include`` will produce a smaller index than using a multiple column "
"index but with the drawback that non-key columns can not be used for sorting "
"or filtering."
msgstr ""
"使用 ``include`` 将产生一个比使用多列索引更小的索引，但缺点是不能使用非键列进"
"行排序或过滤。"

msgid "``include`` is ignored for databases besides PostgreSQL."
msgstr "``include`` 对于 PostgreSQL 以外的数据库来说是被忽略的。"

msgid ":attr:`Index.name` is required when using ``include``."
msgstr ":attr:`Index.name` 在使用 ``include`` 时是必需的。"

msgid ""
"See the PostgreSQL documentation for more details about `covering indexes`_."
msgstr "关于 `covering indexes`_ 的更多细节，请参阅 PostgreSQL 文档。"

msgid ""
"PostgreSQL supports covering B-Tree and :class:`GiST indexes <django.contrib."
"postgres.indexes.GistIndex>`. PostgreSQL 14+ also supports covering :class:"
"`SP-GiST indexes <django.contrib.postgres.indexes.SpGistIndex>`."
msgstr ""

msgid "Support for covering SP-GiST indexes with PostgreSQL 14+ was added."
msgstr ""

msgid "Model instance reference"
msgstr "模型实例参考"

msgid ""
"This document describes the details of the ``Model`` API. It builds on the "
"material presented in the :doc:`model </topics/db/models>` and :doc:"
"`database query </topics/db/queries>` guides, so you'll probably want to "
"read and understand those documents before reading this one."
msgstr ""
"本文档描述了 ``Model`` API 的细节。它建立在 :doc:`模型 </topics/db/models>` "
"和 :doc:`数据库查询 </topics/db/queries>` 指南中所介绍的材料基础上，因此，在"
"阅读本文档之前，你可能需要阅读并理解这些文档。"

msgid ""
"Throughout this reference we'll use the :ref:`example blog models <queryset-"
"model-example>` presented in the :doc:`database query guide </topics/db/"
"queries>`."
msgstr ""
"在整个参考资料中，我们将使用在 :doc:`数据库查询指南 </topics/db/queries>` 中"
"提出的  :ref:`示例博客模型 <queryset-model-example>`。"

msgid "Creating objects"
msgstr "创建对象"

msgid ""
"To create a new instance of a model, instantiate it like any other Python "
"class:"
msgstr "要创建一个新的模型实例，像其他 Python 类一样实例化它。"

msgid ""
"The keyword arguments are the names of the fields you've defined on your "
"model. Note that instantiating a model in no way touches your database; for "
"that, you need to :meth:`~Model.save()`."
msgstr ""
"关键字参数是你在模型上定义的字段名。请注意，实例化一个模型不会触及你的数据"
"库；为此，你需要 :meth:`~Model.save()`。"

msgid ""
"You may be tempted to customize the model by overriding the ``__init__`` "
"method. If you do so, however, take care not to change the calling signature "
"as any change may prevent the model instance from being saved. Additionally, "
"referring to model fields within ``__init__`` may potentially result in "
"infinite recursion errors in some circumstances.  Rather than overriding "
"``__init__``, try using one of these approaches:"
msgstr ""

msgid "Add a classmethod on the model class::"
msgstr "在模型类上增加一个类方法："

msgid "Add a method on a custom manager (usually preferred)::"
msgstr "在自定义管理器上添加一个方法（通常首选）："

msgid "Customizing model loading"
msgstr "自定义模型加载"

msgid ""
"The ``from_db()`` method can be used to customize model instance creation "
"when loading from the database."
msgstr "``from_db()`` 方法可以在数据库加载时用于自定义模型实例创建。"

msgid ""
"The ``db`` argument contains the database alias for the database the model "
"is loaded from, ``field_names`` contains the names of all loaded fields, and "
"``values`` contains the loaded values for each field in ``field_names``. The "
"``field_names`` are in the same order as the ``values``. If all of the "
"model's fields are present, then ``values`` are guaranteed to be in the "
"order ``__init__()`` expects them. That is, the instance can be created by "
"``cls(*values)``. If any fields are deferred, they won't appear in "
"``field_names``. In that case, assign a value of ``django.db.models."
"DEFERRED`` to each of the missing fields."
msgstr ""
"``db`` 参数包含模型从数据库加载的数据库别名，``field_names`` 包含所有加载字段"
"的名称，``values`` 包含 ``field_names`` 中每个字段的加载值。``field_names`` "
"和 ``values`` 的顺序相同。如果模型的所有字段都存在，那么 ``values`` 就必须按"
"照 ``__init__()`` 预期的顺序。也就是说，实例可以通过 ``cls(*values)`` 来创"
"建。如果有任何字段被推迟，它们将不会出现在 ``field_names`` 中。在这种情况下，"
"给每个缺失的字段分配一个 ``django.db.models.DEFERRED`` 的值。"

msgid ""
"In addition to creating the new model, the ``from_db()`` method must set the "
"``adding`` and ``db`` flags in the new instance's :attr:`~Model._state` "
"attribute."
msgstr ""
"除了创建新的模型外，``from_db()`` 方法必须在新实例的 :attr:`~Model._state` 属"
"性中设置 ``adding`` 和 ``db`` 标志。"

msgid ""
"Below is an example showing how to record the initial values of fields that "
"are loaded from the database::"
msgstr "下面是一个例子，说明如何记录从数据库中加载字段的初始值："

msgid ""
"The example above shows a full ``from_db()`` implementation to clarify how "
"that is done. In this case it would be possible to use a ``super()`` call in "
"the ``from_db()`` method."
msgstr ""
"上面的例子显示了一个完整的 ``from_db()`` 实现，以说明如何做到这一点。在这种情"
"况下，可以在 ``from_db()`` 方法中使用 ``super()`` 调用。"

msgid "Refreshing objects from database"
msgstr "从数据库中刷新对象"

msgid ""
"If you delete a field from a model instance, accessing it again reloads the "
"value from the database:"
msgstr ""

msgid "*Asynchronous version*: ``arefresh_from_db()``"
msgstr ""

msgid ""
"If you need to reload a model's values from the database, you can use the "
"``refresh_from_db()`` method. When this method is called without arguments "
"the following is done:"
msgstr ""
"如果你需要从数据库中重新加载一个模型的值，你可以使用 ``refresh_from_db()`` 方"
"法。当这个方法被调用时，没有参数时，会做以下工作："

msgid ""
"All non-deferred fields of the model are updated to the values currently "
"present in the database."
msgstr "模型的所有非递延字段都更新为数据库中当前的值。"

msgid "Any cached relations are cleared from the reloaded instance."
msgstr "任何缓存的关系都会从重新加载的实例中清除。"

msgid ""
"Only fields of the model are reloaded from the database. Other database-"
"dependent values such as annotations aren't reloaded. Any :func:"
"`@cached_property <django.utils.functional.cached_property>` attributes "
"aren't cleared either."
msgstr ""
"只有模型的字段会从数据库中重载。其他依赖于数据库的值，如注释，不会被重载。任"
"何 :func:`@cached_property <django.utils.functional.cached_property>` 属性也"
"不会被清除。"

msgid ""
"The reloading happens from the database the instance was loaded from, or "
"from the default database if the instance wasn't loaded from the database. "
"The ``using`` argument can be used to force the database used for reloading."
msgstr ""
"重载发生在实例被加载的数据库中，如果实例不是从数据库中加载的，则从默认数据库"
"中加载。``using`` 参数可以用来强制使用数据库进行重载。"

msgid ""
"It is possible to force the set of fields to be loaded by using the "
"``fields`` argument."
msgstr "可以通过使用 ``fields`` 参数强制加载一组字段。"

msgid ""
"For example, to test that an ``update()`` call resulted in the expected "
"update, you could write a test similar to this::"
msgstr ""
"例如，为了测试 ``update()`` 的调用是否导致了预期的更新，你可以写一个类似这样"
"的测试："

msgid ""
"Note that when deferred fields are accessed, the loading of the deferred "
"field's value happens through this method. Thus it is possible to customize "
"the way deferred loading happens. The example below shows how one can reload "
"all of the instance's fields when a deferred field is reloaded::"
msgstr ""
"请注意，当访问递延字段时，递延字段的值的加载是通过这个方法发生的。因此，可以"
"自定义递延加载的发生方式。下面的例子显示了当一个递延字段被重载时，如何重载实"
"例的所有字段："

msgid ""
"A helper method that returns a set containing the attribute names of all "
"those fields that are currently deferred for this model."
msgstr "一个辅助方法，返回一个包含当前这个模型的所有这些字段的属性名的集合。"

msgid "``arefresh_from_db()`` method was added."
msgstr ""

msgid "Validating objects"
msgstr "验证对象"

msgid "There are four steps involved in validating a model:"
msgstr ""

msgid "Validate the model fields - :meth:`Model.clean_fields()`"
msgstr "验证模型字段—— :meth:`Model.clean_fields()`"

msgid "Validate the model as a whole - :meth:`Model.clean()`"
msgstr "验证整个模型—— :meth:`Model.clean()`"

msgid "Validate the field uniqueness - :meth:`Model.validate_unique()`"
msgstr "验证字段的唯一性—— :meth:`Model.validate_unique()`"

msgid "Validate the constraints - :meth:`Model.validate_constraints`"
msgstr ""

msgid ""
"All four steps are performed when you call a model's :meth:`~Model."
"full_clean` method."
msgstr ""

msgid ""
"When you use a :class:`~django.forms.ModelForm`, the call to :meth:`~django."
"forms.Form.is_valid()` will perform these validation steps for all the "
"fields that are included on the form. See the :doc:`ModelForm documentation "
"</topics/forms/modelforms>` for more information. You should only need to "
"call a model's :meth:`~Model.full_clean()` method if you plan to handle "
"validation errors yourself, or if you have excluded fields from the :class:"
"`~django.forms.ModelForm` that require validation."
msgstr ""
"当你使用一个 :class:`~django.forms.ModelForm` 时，调用 :meth:`~django.forms."
"Form.is_valid()` 将对表单中包含的所有字段执行这些验证步骤。更多信息请参见 :"
"doc:`模型表单文档 </topics/forms/modelforms>`。只有当你打算自己处理验证错误，"
"或者你从 :class:`~django.forms.ModelForm` 中排除了需要验证的字段时，才需要调"
"用模型的 :meth:`~Model.full_clean()` 方法。"

msgid ""
"In older versions, constraints were not checked during the model validation."
msgstr ""

msgid ""
"This method calls :meth:`Model.clean_fields()`, :meth:`Model.clean()`, :meth:"
"`Model.validate_unique()` (if ``validate_unique`` is ``True``),  and :meth:"
"`Model.validate_constraints()` (if ``validate_constraints`` is ``True``) in "
"that order and raises a :exc:`~django.core.exceptions.ValidationError` that "
"has a ``message_dict`` attribute containing errors from all four stages."
msgstr ""

msgid ""
"The optional ``exclude`` argument can be used to provide a ``set`` of field "
"names that can be excluded from validation and cleaning. :class:`~django."
"forms.ModelForm` uses this argument to exclude fields that aren't present on "
"your form from being validated since any errors raised could not be "
"corrected by the user."
msgstr ""

msgid ""
"Note that ``full_clean()`` will *not* be called automatically when you call "
"your model's :meth:`~Model.save()` method. You'll need to call it manually "
"when you want to run one-step model validation for your own manually created "
"models. For example::"
msgstr ""
"请注意，当您调用模型的 :meth:`~Model.save()` 方法时，``full_clean()`` *不会* "
"自动调用。当你想为自己手动创建的模型运行一步模型验证时，你需要手动调用它。例"
"如："

msgid ""
"The first step ``full_clean()`` performs is to clean each individual field."
msgstr "``full_clean()`` 执行的第一步是清理每个单独的字段。"

msgid "The ``validate_constraints`` argument was added."
msgstr "添加了 ``validate_constraints`` 参数。"

msgid ""
"An ``exclude`` value is now converted to a ``set`` rather than a ``list``."
msgstr "``exclude`` 值现在转换为 ``set`` 而不是 ``list``。"

msgid ""
"This method will validate all fields on your model. The optional ``exclude`` "
"argument lets you provide a ``set`` of field names to exclude from "
"validation. It will raise a :exc:`~django.core.exceptions.ValidationError` "
"if any fields fail validation."
msgstr ""

msgid ""
"The second step ``full_clean()`` performs is to call :meth:`Model.clean()`. "
"This method should be overridden to perform custom validation on your model."
msgstr ""
"``full_clean()`` 执行的第二步是调用 :meth:`Model.clean()`。这个方法应该被重"
"写，以便对你的模型进行自定义验证。"

msgid ""
"This method should be used to provide custom model validation, and to modify "
"attributes on your model if desired. For instance, you could use it to "
"automatically provide a value for a field, or to do validation that requires "
"access to more than a single field::"
msgstr ""
"这个方法应该用来提供自定义模型验证，如果需要的话，还可以修改模型上的属性。例"
"如，你可以使用它来自动为一个字段提供一个值，或进行需要访问多个字段的验证："

msgid ""
"Note, however, that like :meth:`Model.full_clean()`, a model's ``clean()`` "
"method is not invoked when you call your model's :meth:`~Model.save()` "
"method."
msgstr ""
"但请注意，像 :meth:`Model.full_clean()` 一样，当你调用你的模型的 :meth:"
"`~Model.save()` 方法时，模型的 ``clean()`` 方法不会被调用。"

msgid ""
"In the above example, the :exc:`~django.core.exceptions.ValidationError` "
"exception raised by ``Model.clean()`` was instantiated with a string, so it "
"will be stored in a special error dictionary key, :data:`~django.core."
"exceptions.NON_FIELD_ERRORS`. This key is used for errors that are tied to "
"the entire model instead of to a specific field::"
msgstr ""
"在上面的例子中，由 ``Model.clean()`` 引发的 :exc:`~django.core.exceptions."
"ValidationError` 异常是用字符串实例化的，所以它将被存储在一个特殊的错误字典键"
"中， :data:`~django.core.exceptions.NON_FIELD_ERRORS`。这个键用于与整个模型相"
"关的错误，而不是与某个特定字段相关的错误："

msgid ""
"To assign exceptions to a specific field, instantiate the :exc:`~django.core."
"exceptions.ValidationError` with a dictionary, where the keys are the field "
"names. We could update the previous example to assign the error to the "
"``pub_date`` field::"
msgstr ""
"要将异常分配给一个特定的字段，用一个字典实例化 :exc:`~django.core.exceptions."
"ValidationError`，其中键是字段名。我们可以更新前面的例子，将错误分配给 "
"``pub_date`` 字段："

msgid ""
"If you detect errors in multiple fields during ``Model.clean()``, you can "
"also pass a dictionary mapping field names to errors::"
msgstr ""
"如果你在 ``Model.clean()`` 期间检测到多个字段的错误，你也可以传递一个字段名与"
"错误映射的字典："

msgid "Then, ``full_clean()`` will check unique constraints on your model."
msgstr ""

msgid ""
"How to raise field-specific validation errors if those fields don't appear "
"in a ``ModelForm``"
msgstr "如果字段没有出现在 ``ModelForm`` 中，如何引发特定字段的验证错误。"

msgid ""
"You can't raise validation errors in ``Model.clean()`` for fields that don't "
"appear in a model form (a form may limit its fields using ``Meta.fields`` or "
"``Meta.exclude``). Doing so will raise a ``ValueError`` because the "
"validation error won't be able to be associated with the excluded field."
msgstr ""
"你不能在 ``Model.clean()`` 中对没有出现在模型表单中的字段提出验证错误（一个表"
"单可以使用 ``Meta.field`` 或 ``Meta.exclude`` 来限制它的字段）。这样做会引发"
"一个 ``ValueError``，因为验证错误将无法与被排除的字段相关联。"

msgid ""
"To work around this dilemma, instead override :meth:`Model.clean_fields() "
"<django.db.models.Model.clean_fields>` as it receives the list of fields "
"that are excluded from validation. For example::"
msgstr ""
"为了解决这个难题，可以覆盖 :meth:`Model.clean_fields() <django.db.models."
"Model.clean_fields>`，因为它接收的是被排除在验证之外的字段列表。例如："

msgid ""
"This method is similar to :meth:`~Model.clean_fields`, but validates "
"uniqueness constraints defined via :attr:`.Field.unique`, :attr:`.Field."
"unique_for_date`, :attr:`.Field.unique_for_month`, :attr:`.Field."
"unique_for_year`, or :attr:`Meta.unique_together <django.db.models.Options."
"unique_together>` on your model instead of individual field values. The "
"optional ``exclude`` argument allows you to provide a ``set`` of field names "
"to exclude from validation. It will raise a :exc:`~django.core.exceptions."
"ValidationError` if any fields fail validation."
msgstr ""

msgid ""
":class:`~django.db.models.UniqueConstraint`\\s defined in the :attr:`Meta."
"constraints <django.db.models.Options.constraints>` are validated by :meth:"
"`Model.validate_constraints`."
msgstr ""

msgid ""
"Note that if you provide an ``exclude`` argument to ``validate_unique()``, "
"any :attr:`~django.db.models.Options.unique_together` constraint involving "
"one of the fields you provided will not be checked."
msgstr ""
"请注意，如果你为 ``validate_unique()`` 提供了一个 ``exclude`` 参数，任何涉及"
"你提供的一个字段的 :attr:`~django.db.models.Options.unique_together` 约束将不"
"会被检查。"

msgid ""
"Finally, ``full_clean()`` will check any other constraints on your model."
msgstr ""

msgid ""
"In older versions, :class:`~django.db.models.UniqueConstraint`\\s were "
"validated by ``validate_unique()``."
msgstr ""

msgid ""
"This method validates all constraints defined in :attr:`Meta.constraints "
"<django.db.models.Options.constraints>`. The optional ``exclude`` argument "
"allows you to provide a ``set`` of field names to exclude from validation. "
"It will raise a :exc:`~django.core.exceptions.ValidationError` if any "
"constraints fail validation."
msgstr ""

msgid "Saving objects"
msgstr "保存对象"

msgid "To save an object back to the database, call ``save()``:"
msgstr "要将对象保存回数据库，调用 ``save()``："

msgid "*Asynchronous version*: ``asave()``"
msgstr ""

msgid ""
"For details on using the ``force_insert`` and ``force_update`` arguments, "
"see :ref:`ref-models-force-insert`. Details about the ``update_fields`` "
"argument can be found in the :ref:`ref-models-update-fields` section."
msgstr ""
"关于使用 ``force_insert`` 和 ``force_update`` 参数的细节，见 :ref:`ref-"
"models-force-insert` 。关于 ``update_fields`` 参数的细节可以在 :ref:`ref-"
"models-update-fields` 部分找到。"

msgid ""
"If you want customized saving behavior, you can override this ``save()`` "
"method. See :ref:`overriding-model-methods` for more details."
msgstr ""
"如果你想自定义保存行为，你可以覆盖这个 ``save()`` 方法。更多细节请参见 :ref:"
"`overriding-model-methods`。"

msgid ""
"The model save process also has some subtleties; see the sections below."
msgstr "模型保存过程也有一些微妙的地方，请看下面的章节。"

msgid "``asave()`` method was added."
msgstr ""

msgid "Auto-incrementing primary keys"
msgstr "自增主键"

msgid ""
"If a model has an :class:`~django.db.models.AutoField` — an auto-"
"incrementing primary key — then that auto-incremented value will be "
"calculated and saved as an attribute on your object the first time you call "
"``save()``:"
msgstr ""

msgid ""
"There's no way to tell what the value of an ID will be before you call "
"``save()``, because that value is calculated by your database, not by Django."
msgstr ""
"在你调用 ``save()`` 之前，没有办法知道一个 ID 的值是多少，因为这个值是由你的"
"数据库计算出来的，而不是由 Django 计算出来的。"

msgid ""
"For convenience, each model has an :class:`~django.db.models.AutoField` "
"named ``id`` by default unless you explicitly specify ``primary_key=True`` "
"on a field in your model. See the documentation for :class:`~django.db."
"models.AutoField` for more details."
msgstr ""
"为了方便起见，每个模型都有一个 :class:`~django.db.models.AutoField` 默认命名"
"为 ``id``，除非你在模型中的字段上明确指定 ``primary_key=True``。更多细节请参"
"见 :class:`~django.db.models.AutoField` 的文档。"

msgid "The ``pk`` property"
msgstr "``pk`` 属性"

msgid ""
"Regardless of whether you define a primary key field yourself, or let Django "
"supply one for you, each model will have a property called ``pk``. It "
"behaves like a normal attribute on the model, but is actually an alias for "
"whichever attribute is the primary key field for the model. You can read and "
"set this value, just as you would for any other attribute, and it will "
"update the correct field in the model."
msgstr ""
"无论你是自己定义一个主键字段，还是让 Django 为你提供一个主键字段，每个模型都"
"会有一个叫做 ``pk`` 的属性。它的行为就像模型上的一个普通属性，但实际上是模型"
"主键字段属性的别名。您可以像读取和设置任何其他属性一样读取和设置这个值，它将"
"更新模型中的正确字段。"

msgid "Explicitly specifying auto-primary-key values"
msgstr "明确指定自动主键值"

msgid ""
"If a model has an :class:`~django.db.models.AutoField` but you want to "
"define a new object's ID explicitly when saving, define it explicitly before "
"saving, rather than relying on the auto-assignment of the ID:"
msgstr ""

msgid ""
"If you assign auto-primary-key values manually, make sure not to use an "
"already-existing primary-key value! If you create a new object with an "
"explicit primary-key value that already exists in the database, Django will "
"assume you're changing the existing record rather than creating a new one."
msgstr ""
"如果你手动分配自动主键值，请确保不要使用一个已经存在的主键值！如果你创建一个"
"新的对象，并使用一个已经存在于数据库中的显式主键值，Django 会认为你是在改变现"
"有的记录，而不是创建一个新的记录。"

msgid ""
"Given the above ``'Cheddar Talk'`` blog example, this example would override "
"the previous record in the database::"
msgstr ""
"考虑到上面的 ``'Cheddar Talk'`` 博客的例子，这个例子将覆盖数据库中以前的记"
"录："

msgid ""
"See `How Django knows to UPDATE vs. INSERT`_, below, for the reason this "
"happens."
msgstr ""
"发生这种情况的原因，请看下面 `How Django knows to UPDATE vs. INSERT`_ 。"

msgid ""
"Explicitly specifying auto-primary-key values is mostly useful for bulk-"
"saving objects, when you're confident you won't have primary-key collision."
msgstr "明确指定自动主键值主要用于批量保存对象，当你确信不会发生主键碰撞时。"

msgid ""
"If you're using PostgreSQL, the sequence associated with the primary key "
"might need to be updated; see :ref:`manually-specified-autoincrement-pk`."
msgstr ""
"如果你使用的是 PostgreSQL，与主键相关的序列可能需要更新；参见 :ref:`manually-"
"specified-autoincrement-pk`。"

msgid "What happens when you save?"
msgstr "保存时会发生什么？"

msgid "When you save an object, Django performs the following steps:"
msgstr "当你保存一个对象时，Django 会执行以下步骤："

msgid ""
"**Emit a pre-save signal.** The :data:`~django.db.models.signals.pre_save` "
"signal is sent, allowing any functions listening for that signal to do "
"something."
msgstr ""
"**发送一个预保存信号。** :data:`~django.db.models.signals.pre_save` 信号被发"
"送，允许任何监听该信号的函数做一些事情。"

msgid ""
"**Preprocess the data.** Each field's :meth:`~django.db.models.Field."
"pre_save` method is called to perform any automated data modification that's "
"needed. For example, the date/time fields override ``pre_save()`` to "
"implement :attr:`~django.db.models.DateField.auto_now_add` and :attr:"
"`~django.db.models.DateField.auto_now`."
msgstr ""
"**预处理数据。** 每个字段的 :meth:`~django.db.models.Field.pre_save` 方法被调"
"用来执行任何需要的自动数据修改。例如，日期／时间字段重写了 ``pre_save()`` 来"
"实现 :attr:`~django.db.models.DateField.auto_now_add` 和 :attr:`~django.db."
"models.DateField.auto_now`。"

msgid ""
"**Prepare the data for the database.** Each field's :meth:`~django.db.models."
"Field.get_db_prep_save` method is asked to provide its current value in a "
"data type that can be written to the database."
msgstr ""
"**为数据库准备数据。** 要求每个字段的 :meth:`~django.db.models.Field."
"get_db_prep_save` 方法提供其当前的值，数据类型可以写入数据库。"

msgid ""
"Most fields don't require data preparation. Simple data types, such as "
"integers and strings, are 'ready to write' as a Python object. However, more "
"complex data types often require some modification."
msgstr ""
"大多数字段不需要数据准备。简单的数据类型，如整数和字符串，作为一个 Python 对"
"象是“可以写入”的。然而，更复杂的数据类型通常需要一些修改。"

msgid ""
"For example, :class:`~django.db.models.DateField` fields use a Python "
"``datetime`` object to store data. Databases don't store ``datetime`` "
"objects, so the field value must be converted into an ISO-compliant date "
"string for insertion into the database."
msgstr ""
"例如，:class:`~django.db.models.DateField` 字段使用 Python ``datetime`` 对象"
"来存储数据。数据库不存储 ``datetime`` 对象，所以字段值必须转换成符合 ISO 标准"
"的日期字符串才能插入数据库。"

msgid ""
"**Insert the data into the database.** The preprocessed, prepared data is "
"composed into an SQL statement for insertion into the database."
msgstr ""
"**将数据插入数据库。** 将预先处理、准备好的数据组成 SQL 语句，以便插入数据"
"库。"

msgid ""
"**Emit a post-save signal.** The :data:`~django.db.models.signals.post_save` "
"signal is sent, allowing any functions listening for that signal to do "
"something."
msgstr ""
"**发送一个保存后的信号。** :data:`~django.db.models.signals.post_save` 信号被"
"发送，允许任何监听该信号的函数做一些事情。"

msgid "How Django knows to UPDATE vs. INSERT"
msgstr "Django 是如何知道 UPDATE 与 INSERT 的？"

msgid ""
"You may have noticed Django database objects use the same ``save()`` method "
"for creating and changing objects. Django abstracts the need to use "
"``INSERT`` or ``UPDATE`` SQL statements. Specifically, when you call "
"``save()`` and the object's primary key attribute does **not** define a :"
"attr:`~django.db.models.Field.default`, Django follows this algorithm:"
msgstr ""
"你可能已经注意到 Django 数据库对象使用相同的 ``save()`` 方法来创建和更改对"
"象。Django 抽象了需要使用 ``INSERT`` 或 ``UPDATE`` 的 SQL 语句。具体来说，当"
"你调用 ``save()``，而对象的主键属性 **没有** 定义一个 :attr:`~django.db."
"models.Field.default` 时，Django 会遵循这个算法。"

msgid ""
"If the object's primary key attribute is set to a value that evaluates to "
"``True`` (i.e., a value other than ``None`` or the empty string), Django "
"executes an ``UPDATE``."
msgstr ""
"如果对象的主键属性被设置为值为 ``True`` （即，一个不是 ``None`` 或空字符串的"
"值），Django 会执行 ``UPDATE``。"

msgid ""
"If the object's primary key attribute is *not* set or if the ``UPDATE`` "
"didn't update anything (e.g. if primary key is set to a value that doesn't "
"exist in the database), Django executes an ``INSERT``."
msgstr ""
"如果对象的主键属性没有设置，或者 ``UPDATE`` 没有更新任何东西（例如主键被设置"
"为数据库中不存在的值），Django 会执行 ``INSERT``。"

msgid ""
"If the object's primary key attribute defines a :attr:`~django.db.models."
"Field.default` then Django executes an ``UPDATE`` if it is an existing model "
"instance and primary key is set to a value that exists in the database. "
"Otherwise, Django executes an ``INSERT``."
msgstr ""
"如果对象的主键属性定义了一个 :attr:`~django.db.models.Field.default`，那么如"
"果它是一个现有的模型实例，并且主键被设置为数据库中存在的值，Django 就会执行一"
"个 ``UPDATE``。否则，Django 会执行一个 ``INSERT``。"

msgid ""
"The one gotcha here is that you should be careful not to specify a primary-"
"key value explicitly when saving new objects, if you cannot guarantee the "
"primary-key value is unused. For more on this nuance, see `Explicitly "
"specifying auto-primary-key values`_ above and `Forcing an INSERT or "
"UPDATE`_ below."
msgstr ""
"这里的一个问题是，如果你不能保证主键值未被使用，那么在保存新对象时，你应该注"
"意不要显式地指定一个主键值。关于这个细微的差别，请看上面的 `Explicitly "
"specifying auto-primary-key values`_ 和下面的 `Forcing an INSERT or "
"UPDATE`_ 。"

msgid ""
"In Django 1.5 and earlier, Django did a ``SELECT`` when the primary key "
"attribute was set. If the ``SELECT`` found a row, then Django did an "
"``UPDATE``, otherwise it did an ``INSERT``. The old algorithm results in one "
"more query in the ``UPDATE`` case. There are some rare cases where the "
"database doesn't report that a row was updated even if the database contains "
"a row for the object's primary key value. An example is the PostgreSQL ``ON "
"UPDATE`` trigger which returns ``NULL``. In such cases it is possible to "
"revert to the old algorithm by setting the :attr:`~django.db.models.Options."
"select_on_save` option to ``True``."
msgstr ""
"在 Django 1.5 和更早的版本中，当主键属性被设置时，Django 执行 ``SELECT``。如"
"果 ``SELECT`` 找到了一条记录，那么 Django 就会进行 ``UPDATE``，否则就会进行 "
"``INSERT``。老算法的结果是在 ``UPDATE`` 的情况下多了一个查询。在一些罕见的情"
"况下，即使数据库中包含了一条对象主键值的记录，数据库也不会报告某行被更新。一"
"个例子是 PostgreSQL 的 ``ON UPDATE`` 触发器，它返回 ``NULL``。在这种情况下，"
"可以通过将 :attr:`~django.db.models.Options.select_on_save` 选项设置为 "
"``True`` 来恢复到旧算法。"

msgid "Forcing an INSERT or UPDATE"
msgstr "强制执行 INSERT 或 UPDATE"

msgid ""
"In some rare circumstances, it's necessary to be able to force the :meth:"
"`~Model.save()` method to perform an SQL ``INSERT`` and not fall back to "
"doing an ``UPDATE``. Or vice-versa: update, if possible, but not insert a "
"new row. In these cases you can pass the ``force_insert=True`` or "
"``force_update=True`` parameters to the :meth:`~Model.save()` method. "
"Passing both parameters is an error: you cannot both insert *and* update at "
"the same time!"
msgstr ""
"在一些罕见的情况下，有必要强制 :meth:`~Model.save()` 方法执行 SQL "
"``INSERT``，而不是回到 ``UPDATE``。或者反过来说：如果可能的话，更新，但不插入"
"新的记录。在这些情况下，你可以将 ``force_insert=True`` 或 "
"``force_update=True`` 参数传递给 :meth:`~Model.save()` 方法。一起传递这两个参"
"数是一个错误：你不能同时插入 *和* 更新！"

msgid ""
"It should be very rare that you'll need to use these parameters. Django will "
"almost always do the right thing and trying to override that will lead to "
"errors that are difficult to track down. This feature is for advanced use "
"only."
msgstr ""
"你应该很少需要使用这些参数。Django 几乎总是会做正确的事情，试图覆盖会导致难以"
"追踪的错误。这个功能只适合进阶使用。"

msgid ""
"Using ``update_fields`` will force an update similarly to ``force_update``."
msgstr "使用 ``update_fields`` 将强制更新，类似于 ``force_update``。"

msgid "Updating attributes based on existing fields"
msgstr "基于现有字段更新属性"

msgid ""
"Sometimes you'll need to perform a simple arithmetic task on a field, such "
"as incrementing or decrementing the current value. One way of achieving this "
"is doing the arithmetic in Python like:"
msgstr ""

msgid ""
"If the old ``number_sold`` value retrieved from the database was 10, then "
"the value of 11 will be written back to the database."
msgstr ""
"如果从数据库中检索到的 ``number_sold`` 旧值是 10，那么 11 的值将被写回数据"
"库。"

msgid ""
"The process can be made robust, :ref:`avoiding a race condition <avoiding-"
"race-conditions-using-f>`, as well as slightly faster by expressing the "
"update relative to the original field value, rather than as an explicit "
"assignment of a new value. Django provides :class:`F expressions <django.db."
"models.F>` for performing this kind of relative update. Using :class:`F "
"expressions <django.db.models.F>`, the previous example is expressed as:"
msgstr ""

msgid ""
"For more details, see the documentation on :class:`F expressions <django.db."
"models.F>` and their :ref:`use in update queries <topics-db-queries-update>`."
msgstr ""
"更多细节，请参阅 :class:`F 表达式 <django.db.models.F>` 及其 :ref:`在更新查询"
"中的使用 <topics-db-queries-update>` 的文档。"

msgid "Specifying which fields to save"
msgstr "指定要保存的字段"

msgid ""
"If ``save()`` is passed a list of field names in keyword argument "
"``update_fields``, only the fields named in that list will be updated. This "
"may be desirable if you want to update just one or a few fields on an "
"object. There will be a slight performance benefit from preventing all of "
"the model fields from being updated in the database. For example::"
msgstr ""
"如果 ``save()`` 在关键字参数 ``update_fields`` 中传递了一个字段名列表，那么只"
"有列表中命名的字段才会被更新。如果你只想更新一个对象上的一个或几个字段，这可"
"能是可取的。防止数据库中所有的模型字段被更新会有轻微的性能优势。例如："

msgid ""
"The ``update_fields`` argument can be any iterable containing strings. An "
"empty ``update_fields`` iterable will skip the save. A value of ``None`` "
"will perform an update on all fields."
msgstr ""
"``update_fields`` 参数可以是任何包含字符串的可迭代对象。一个空的 "
"``update_fields`` 可迭代对象将跳过保存。值为 ``None`` 将对所有字段进行更新。"

msgid "Specifying ``update_fields`` will force an update."
msgstr "指定 ``update_fields`` 将强制更新。"

msgid ""
"When saving a model fetched through deferred model loading (:meth:`~django."
"db.models.query.QuerySet.only()` or :meth:`~django.db.models.query.QuerySet."
"defer()`) only the fields loaded from the DB will get updated. In effect "
"there is an automatic ``update_fields`` in this case. If you assign or "
"change any deferred field value, the field will be added to the updated "
"fields."
msgstr ""
"当保存一个通过延迟模型加载获取的模型时（:meth:`~django.db.models.querySet."
"only()` 或 :meth:`~django.db.models.querySet.defer()`），只有从数据库加载的字"
"段会被更新。实际上，在这种情况下有一个自动的 ``update_fields``。如果你分配或"
"改变任何延迟字段的值，该字段将被添加到更新的字段中。"

msgid "``Field.pre_save()`` and ``update_fields``"
msgstr "`Field.pre_save()`` 和 ``update_fields``"

msgid ""
"If ``update_fields`` is passed in, only the :meth:`~django.db.models.Field."
"pre_save` methods of the ``update_fields`` are called. For example, this "
"means that date/time fields with ``auto_now=True`` will not be updated "
"unless they are included in the ``update_fields``."
msgstr ""

msgid "Deleting objects"
msgstr "删除对象"

msgid "*Asynchronous version*: ``adelete()``"
msgstr ""

msgid ""
"Issues an SQL ``DELETE`` for the object. This only deletes the object in the "
"database; the Python instance will still exist and will still have data in "
"its fields, except for the primary key set to ``None``. This method returns "
"the number of objects deleted and a dictionary with the number of deletions "
"per object type."
msgstr ""

msgid ""
"For more details, including how to delete objects in bulk, see :ref:`topics-"
"db-queries-delete`."
msgstr ""
"更多细节，包括如何批量删除对象，请参见 :ref:`topics-db-queries-delete`。"

msgid ""
"If you want customized deletion behavior, you can override the ``delete()`` "
"method. See :ref:`overriding-model-methods` for more details."
msgstr ""
"如果你想自定义删除行为，你可以覆盖 ``delete()`` 方法。更多细节请参见 :ref:"
"`overriding-model-methods`。"

msgid ""
"Sometimes with :ref:`multi-table inheritance <multi-table-inheritance>` you "
"may want to delete only a child model's data. Specifying "
"``keep_parents=True`` will keep the parent model's data."
msgstr ""
"有时，在 :ref:`多表继承 <multi-table-inheritance>` 中，你可能只想删除子模型的"
"数据，指定 ``keep_parents=True`` 将保留父模型的数据。指定 "
"``keep_parents=True`` 将保留父模型的数据。"

msgid "``adelete()`` method was added."
msgstr ""

msgid "Pickling objects"
msgstr "Pickle 序列化对象"

msgid ""
"When you :mod:`pickle` a model, its current state is pickled. When you "
"unpickle it, it'll contain the model instance at the moment it was pickled, "
"rather than the data that's currently in the database."
msgstr ""
"当你 :mod:`pickle` 一个模型时，它的当前状态被序列化。当你反序列化时，它将包含"
"它被序列化时的模型实例，而不是当前数据库中的数据。"

msgid "You can't share pickles between versions"
msgstr "你不能在不同版本之间共享 pickle"

msgid ""
"Pickles of models are only valid for the version of Django that was used to "
"generate them. If you generate a pickle using Django version N, there is no "
"guarantee that pickle will be readable with Django version N+1. Pickles "
"should not be used as part of a long-term archival strategy."
msgstr ""
"模型的 pickle 只对生成它们的 Django 版本有效。如果你使用 Django 版本 N 生成了"
"一个 pickle，那么不能保证这个 pickle 在 Django 版本 N+1 中可以被读取。Pickle "
"不应该作为长期存档策略的一部分。"

msgid ""
"Since pickle compatibility errors can be difficult to diagnose, such as "
"silently corrupted objects, a ``RuntimeWarning`` is raised when you try to "
"unpickle a model in a Django version that is different than the one in which "
"it was pickled."
msgstr ""
"由于 pickle 兼容性错误可能很难诊断，比如静默损坏对象，所以当你试图在 Django "
"版本中反序列化模型时，会发出 ``RuntimeWarning`` 的警告。"

msgid "Other model instance methods"
msgstr "其他模型实例方法"

msgid "A few object methods have special purposes."
msgstr "有几个对象方法有特殊用途。"

msgid "``__str__()``"
msgstr "``__str__()``"

msgid ""
"The ``__str__()`` method is called whenever you call ``str()`` on an object. "
"Django uses ``str(obj)`` in a number of places. Most notably, to display an "
"object in the Django admin site and as the value inserted into a template "
"when it displays an object. Thus, you should always return a nice, human-"
"readable representation of the model from the ``__str__()`` method."
msgstr ""
"每当你对一个对象调用 ``str()`` 时，就会调用 ``__str__()`` 方法。Django 在很多"
"地方使用了 ``str(obj)`` 方法。最主要的是，在 Django 管理站点中显示一个对象，"
"以及作为模板显示对象时插入的值。因此，你应该总是从 ``__str__()`` 方法中返回一"
"个漂亮的、人类可读的模型表示。"

msgid "``__eq__()``"
msgstr "``__eq__()``"

msgid ""
"The equality method is defined such that instances with the same primary key "
"value and the same concrete class are considered equal, except that "
"instances with a primary key value of ``None`` aren't equal to anything "
"except themselves. For proxy models, concrete class is defined as the "
"model's first non-proxy parent; for all other models it's simply the model's "
"class."
msgstr ""
"相等方法的定义是，具有相同主键值和相同具体类的实例被认为是相等的，但主键值为 "
"``None`` 的实例除自身外对任何事物都不相等。对于代理模型，具体类被定义为模型的"
"第一个非代理父类；对于所有其他模型，它只是模型的类。"

msgid "``__hash__()``"
msgstr "``__hash__()``"

msgid ""
"The ``__hash__()`` method is based on the instance's primary key value. It "
"is effectively ``hash(obj.pk)``. If the instance doesn't have a primary key "
"value then a ``TypeError`` will be raised (otherwise the ``__hash__()`` "
"method would return different values before and after the instance is saved, "
"but changing the :meth:`~object.__hash__` value of an instance is forbidden "
"in Python."
msgstr ""
"``__hash__()`` 方法是基于实例的主键值。它实际上是 ``hash(obj.pk)``。如果实例"
"没有主键值，那么将引发一个 ``TypeError`` （否则 ``__hash__()`` 方法会在保存实"
"例之前和之后返回不同的值，但是在 Python 中禁止改变实例的 :meth:`~object."
"__hash__` 值。"

msgid "``get_absolute_url()``"
msgstr "``get_absolute_url()``"

msgid ""
"Define a ``get_absolute_url()`` method to tell Django how to calculate the "
"canonical URL for an object. To callers, this method should appear to return "
"a string that can be used to refer to the object over HTTP."
msgstr ""
"定义一个 ``get_absolute_url()`` 方法来告诉 Django 如何计算一个对象的标准 "
"URL。对于调用者来说，这个方法应该返回一个字符串，可以通过 HTTP 引用对象。"

msgid ""
"While this code is correct and simple, it may not be the most portable way "
"to to write this kind of method. The :func:`~django.urls.reverse` function "
"is usually the best approach."
msgstr ""
"虽然这段代码正确且简单，但它可能不是写这种方法的最可移植的方式。:func:"
"`~django.urls.reverse` 函数通常是最好的方法。"

msgid ""
"One place Django uses ``get_absolute_url()`` is in the admin app. If an "
"object defines this method, the object-editing page will have a \"View on "
"site\" link that will jump you directly to the object's public view, as "
"given by ``get_absolute_url()``."
msgstr ""
"Django 使用 ``get_absolute_url()`` 的一个地方就是在管理应用中。如果一个对象定"
"义了这个方法，那么对象编辑页面会有一个“View on site”的链接，直接跳转到对象的"
"公开视图，就像 ``get_absolute_url()`` 给出的那样。"

msgid ""
"Similarly, a couple of other bits of Django, such as the :doc:`syndication "
"feed framework </ref/contrib/syndication>`, use ``get_absolute_url()`` when "
"it is defined. If it makes sense for your model's instances to each have a "
"unique URL, you should define ``get_absolute_url()``."
msgstr ""
"类似的，Django 的其他几个部分，比如 :doc:`联合供稿框架 </ref/contrib/"
"syndication>`，当定义了 ``get_absolute_url()`` 时，也会使用 "
"``get_absolute_url()``。如果你的模型的每个实例都有一个唯一的 URL，你应该定义 "
"``get_absolute_url()``。"

msgid ""
"You should avoid building the URL from unvalidated user input, in order to "
"reduce possibilities of link or redirect poisoning::"
msgstr ""
"你应该避免从未经验证的用户输入中建立 URL，以减少链接或重定向中毒的可能性："

msgid ""
"If ``self.name`` is ``'/example.com'`` this returns ``'//example.com/'`` "
"which, in turn, is a valid schema relative URL but not the expected ``'/"
"%2Fexample.com/'``."
msgstr ""
"如果 ``self.name`` 是 ``'/example.com'``，这将返回 ``'//example.com/'``，这反"
"过来又是一个有效的协议相对 URL，但不是预期的 ``'/%2Fexample.com/'``。"

msgid ""
"It's good practice to use ``get_absolute_url()`` in templates, instead of "
"hard-coding your objects' URLs. For example, this template code is bad:"
msgstr ""
"在模板中使用 ``get_absolute_url()``，而不是硬编码你的对象的 URL，这是一个很好"
"的做法。例如，这个模板代码就很糟糕："

msgid "This template code is much better:"
msgstr "这个模板代码就好多了："

msgid ""
"The logic here is that if you change the URL structure of your objects, even "
"for something small like correcting a spelling error, you don't want to have "
"to track down every place that the URL might be created. Specify it once, in "
"``get_absolute_url()`` and have all your other code call that one place."
msgstr ""
"这里的逻辑是，如果你改变了你的对象的 URL 结构，即使是为了纠正拼写错误这样的小"
"事，你也不想追踪 URL 可能被创建的每个地方。在 ``get_absolute_url()`` 中指定一"
"次，然后让你的其他代码调用那个地方。"

msgid ""
"The string you return from ``get_absolute_url()`` **must** contain only "
"ASCII characters (required by the URI specification, :rfc:`3986#section-2`) "
"and be URL-encoded, if necessary."
msgstr ""

msgid ""
"Code and templates calling ``get_absolute_url()`` should be able to use the "
"result directly without any further processing. You may wish to use the "
"``django.utils.encoding.iri_to_uri()`` function to help with this if you are "
"using strings containing characters outside the ASCII range."
msgstr ""
"调用 ``get_absolute_url()`` 的代码和模板应该可以直接使用结果，而不需要任何进"
"一步的处理。如果你使用的字符串包含 ASCII 码范围以外的字符，你可能希望使用 "
"``django.utils.encoding.iri_to_uri()`` 函数来帮助解决这个问题。"

msgid "Extra instance methods"
msgstr "额外的实例方法"

msgid ""
"In addition to :meth:`~Model.save()`, :meth:`~Model.delete()`, a model "
"object might have some of the following methods:"
msgstr ""
"除了 :meth:`~Model.save()`、 :meth:`~Model.delete()` 之外，一个模型对象还可能"
"有以下一些方法："

msgid ""
"For every field that has :attr:`~django.db.models.Field.choices` set, the "
"object will have a ``get_FOO_display()`` method, where ``FOO`` is the name "
"of the field. This method returns the \"human-readable\" value of the field."
msgstr ""
"对于每一个设置了 :attr:`~django.db.models.Field.choice` 的字段，该对象将有一"
"个 ``get_FOO_display()`` 方法，其中 ``FOO`` 是字段的名称。该方法返回字段的“人"
"类可读”值。"

msgid ""
"For every :class:`~django.db.models.DateField` and :class:`~django.db.models."
"DateTimeField` that does not have :attr:`null=True <django.db.models.Field."
"null>`, the object will have ``get_next_by_FOO()`` and "
"``get_previous_by_FOO()`` methods, where ``FOO`` is the name of the field. "
"This returns the next and previous object with respect to the date field, "
"raising a :exc:`~django.db.models.Model.DoesNotExist` exception when "
"appropriate."
msgstr ""
"对于每一个 :class:`~django.db.models.DateField` 和 :class:`~django.db.models."
"DateTimeField` 没有 :attr:`null=True`，该对象将有 ``get_next_by_FOO()`` 和 "
"``get_previous_by_FOO()`` 方法，其中 ``FOO`` 是字段名。这将返回与日期字段相关"
"的下一个和上一个对象，适当时引发一个 :exc:`~django.db.models.Model."
"DoesNotExist` 异常。"

msgid ""
"Both of these methods will perform their queries using the default manager "
"for the model. If you need to emulate filtering used by a custom manager, or "
"want to perform one-off custom filtering, both methods also accept optional "
"keyword arguments, which should be in the format described in :ref:`Field "
"lookups <field-lookups>`."
msgstr ""
"这两种方法都将使用模型的默认管理器执行查询。如果你需要模拟自定义管理器使用的"
"过滤，或者想要执行一次性的自定义过滤，这两种方法也都接受可选的关键字参数，其"
"格式应该是 :ref:`字段查找 <field-lookups>` 中描述的格式。"

msgid ""
"Note that in the case of identical date values, these methods will use the "
"primary key as a tie-breaker. This guarantees that no records are skipped or "
"duplicated. That also means you cannot use those methods on unsaved objects."
msgstr ""
"请注意，在日期值相同的情况下，这些方法将使用主键作为比较。这保证了没有记录被"
"跳过或重复。这也意味着你不能对未保存的对象使用这些方法。"

msgid "Overriding extra instance methods"
msgstr "覆盖额外的实例方法"

msgid ""
"In most cases overriding or inheriting ``get_FOO_display()``, "
"``get_next_by_FOO()``, and ``get_previous_by_FOO()`` should work as "
"expected. Since they are added by the metaclass however, it is not practical "
"to account for all possible inheritance structures. In more complex cases "
"you should override ``Field.contribute_to_class()`` to set the methods you "
"need."
msgstr ""
"在大多数情况下，覆盖或继承 ``get_FOO_display()``、``get_next_by_FOO()`` 和 "
"``get_previous_by_FOO()`` 应按预期工作。然而，由于它们是由元类添加的，所以要"
"考虑所有可能的继承结构是不实际的。在更复杂的情况下，你应该覆盖 ``Field."
"contribution_to_class()`` 来设置你需要的方法。"

msgid "Other attributes"
msgstr "其他属性"

msgid "``_state``"
msgstr "``_state``"

msgid ""
"The ``_state`` attribute refers to a ``ModelState`` object that tracks the "
"lifecycle of the model instance."
msgstr ""
"``_state`` 属性指的是一个 ``ModelState`` 对象，它跟踪模型实例的生命周期。"

msgid ""
"The ``ModelState`` object has two attributes: ``adding``, a flag which is "
"``True`` if the model has not been saved to the database yet, and ``db``, a "
"string referring to the database alias the instance was loaded from or saved "
"to."
msgstr ""
"``ModelState`` 对象有两个属性。``adding`` 是一个标志，如果模型尚未保存到数据"
"库，则为 ``True``；``db`` 是一个字符串，指的是实例从数据库加载或保存到的别"
"名。"

msgid ""
"Newly instantiated instances have ``adding=True`` and ``db=None``, since "
"they are yet to be saved. Instances fetched from a ``QuerySet`` will have "
"``adding=False`` and ``db`` set to the alias of the associated database."
msgstr ""
"新实例有 ``adding=True`` 和 ``db=None``，因为它们尚未被保存。从 ``QuerySet`` "
"获取的实例将有 ``adding=False`` 和 ``db`` 设置为相关数据库的别名。"

msgid "Lookup API reference"
msgstr "查找 API 参考"

msgid ""
"This document has the API references of lookups, the Django API for building "
"the ``WHERE`` clause of a database query. To learn how to *use* lookups, "
"see :doc:`/topics/db/queries`; to learn how to *create* new lookups, see :"
"doc:`/howto/custom-lookups`."
msgstr ""
"本文档提供了查找的 API 参考，它是 Django 的 API，用于构建数据库查询的 "
"``WHERE`` 子句。要学习如何 *使用* 查找，请看 :doc:`/topics/db/queries`；要学"
"习如何 *创建* 新的查找，请看 :doc:`/howto/custom-lookups`。"

msgid ""
"The lookup API has two components: a :class:`~lookups.RegisterLookupMixin` "
"class that registers lookups, and the :ref:`Query Expression API <query-"
"expression>`, a set of methods that a class has to implement to be "
"registrable as a lookup."
msgstr ""
"查找 API 有两个组成部分：一个是 :class:`~lookups.RegisterLookupMixin` 类，用"
"于注册查找；另一个是 :ref:`查询表达式 API <query-expression>`，一个类要想注册"
"为查找，必须实现一组方法。"

msgid ""
"Django has two base classes that follow the query expression API and from "
"where all Django builtin lookups are derived:"
msgstr ""
"Django 有两个遵循查询表达式 API 的基类，所有 Django 内置的查找都是从这里派生"
"出来的。"

msgid ""
":class:`Lookup`: to lookup a field (e.g. the ``exact`` of "
"``field_name__exact``)"
msgstr ""
":class:`Lookup`：查找一个字段（例如 ``field_name__exact`` 的 ``exact``）"

msgid ":class:`Transform`: to transform a field"
msgstr ":class:`Transform`：转换一个字段"

msgid "A lookup expression consists of three parts:"
msgstr "一个查找表达式由三部分组成："

msgid ""
"Fields part (e.g. ``Book.objects.filter(author__best_friends__first_name..."
"``);"
msgstr ""
"字段部分（如 ``Book.objects.filter(author__best_friends__first_name...``）；"

msgid ""
"Transforms part (may be omitted) (e.g. ``__lower__first3chars__reversed``);"
msgstr "转换部分（可省略）（如 ``__lower__first3chars__reversed``）；"

msgid ""
"A lookup (e.g. ``__icontains``) that, if omitted, defaults to ``__exact``."
msgstr "查找（例如 ``__icontains``），如果省略，默认为 ``__exact``。"

msgid "Registration API"
msgstr "注册 API"

msgid ""
"Django uses :class:`~lookups.RegisterLookupMixin` to give a class the "
"interface to register lookups on itself or its instances. The two prominent "
"examples are :class:`~django.db.models.Field`, the base class of all model "
"fields, and :class:`Transform`, the base class of all Django transforms."
msgstr ""

msgid "A mixin that implements the lookup API on a class."
msgstr "一个在类上实现查找 API 的混入。"

msgid "Registers a new lookup in the class or class instance. For example::"
msgstr ""

msgid ""
"will register ``YearExact`` lookup on ``DateField`` and ``MonthExact`` "
"lookup on the ``User.date_joined`` (you can use :ref:`Field Access API "
"<model-meta-field-api>` to retrieve a single field instance). It overrides a "
"lookup that already exists with the same name. Lookups registered on field "
"instances take precedence over the lookups registered on classes. "
"``lookup_name`` will be used for this lookup if provided, otherwise ``lookup."
"lookup_name`` will be used."
msgstr ""

msgid ""
"Returns the :class:`Lookup` named ``lookup_name`` registered in the class or "
"class instance depending on what calls it. The default implementation looks "
"recursively on all parent classes and checks if any has a registered lookup "
"named ``lookup_name``, returning the first match. Instance lookups would "
"override any class lookups with the same ``lookup_name``."
msgstr ""

msgid ""
"Returns a dictionary of each lookup name registered in the class or class "
"instance mapped to the :class:`Lookup` class."
msgstr ""

msgid ""
"Returns a :class:`Transform` named ``transform_name`` registered in the "
"class or class instance. The default implementation looks recursively on all "
"parent classes to check if any has the registered transform named "
"``transform_name``, returning the first match."
msgstr ""

msgid ""
"For a class to be a lookup, it must follow the :ref:`Query Expression API "
"<query-expression>`. :class:`~Lookup` and :class:`~Transform` naturally "
"follow this API."
msgstr ""
"一个类要想成为查找，必须遵循 :ref:`查询表达式 API <query-expression>`。 :"
"class:`~Lookup` 和 :class:`~Transform` 自然遵循这个API。"

msgid "The Query Expression API"
msgstr "查询表达式 API"

msgid ""
"The query expression API is a common set of methods that classes define to "
"be usable in query expressions to translate themselves into SQL expressions. "
"Direct field references, aggregates, and ``Transform`` are examples that "
"follow this API. A class is said to follow the query expression API when it "
"implements the following methods:"
msgstr ""
"查询表达式 API 是一组通用的方法，这些方法被定义为可用于查询表达式，将自己翻译"
"成 SQL 表达式。直接字段引用、聚合和 ``Transform`` 是遵循这个 API 的例子。当一"
"个类实现了以下方法时，就可以说它遵循了查询表达式 API："

msgid ""
"Generates the SQL fragment for the expression. Returns a tuple ``(sql, "
"params)``, where ``sql`` is the SQL string, and ``params`` is the list or "
"tuple of query parameters. The ``compiler`` is an ``SQLCompiler`` object, "
"which has a ``compile()`` method that can be used to compile other "
"expressions. The ``connection`` is the connection used to execute the query."
msgstr ""
"生成表达式的 SQL 片段。返回一个元组 ``(sql, params)``，其中 ``sql`` 是 SQL 字"
"符串，``params`` 是查询参数的列表或元组。``compiler`` 是一个 ``SQLCompiler`` "
"对象，它有一个 ``compile()`` 方法，可以用来编译其他表达式。``connection`` 是"
"用于执行查询的连接。"

msgid ""
"Calling ``expression.as_sql()`` is usually incorrect - instead ``compiler."
"compile(expression)`` should be used. The ``compiler.compile()`` method will "
"take care of calling vendor-specific methods of the expression."
msgstr ""
"调用 ``expression.as_sql()`` 通常是不正确的，应该使用 ``compiler."
"compile(expression)``。``compiler.compile()`` 方法将负责调用特定厂商的表达式"
"方法。"

msgid ""
"Custom keyword arguments may be defined on this method if it's likely that "
"``as_vendorname()`` methods or subclasses will need to supply data to "
"override the generation of the SQL string. See :meth:`Func.as_sql` for "
"example usage."
msgstr ""
"如果 ``as_vendorname()`` 方法或子类很可能需要提供数据来覆盖 SQL 字符串的生"
"成，可以在这个方法上定义自定义关键字参数。参见 :meth:`Func.as_sql` 的用法示"
"例。"

msgid ""
"Works like ``as_sql()`` method. When an expression is compiled by ``compiler."
"compile()``, Django will first try to call ``as_vendorname()``, where "
"``vendorname`` is the vendor name of the backend used for executing the "
"query. The ``vendorname`` is one of ``postgresql``, ``oracle``, ``sqlite``, "
"or ``mysql`` for Django's built-in backends."
msgstr ""
"和 ``as_sql()`` 方法一样工作。当一个表达式被 ``compiler.compile()`` 编译后，"
"Django 会先尝试调用 ``as_vendorname()``，其中 ``vendorname`` 是执行查询的后端"
"厂商名称。``vendorname`` 是 Django 内置后端的 ``postgresql``、``oracle``、"
"``sqlite``、``mysql`` 中的一个。"

msgid ""
"Must return the lookup named ``lookup_name``. For instance, by returning "
"``self.output_field.get_lookup(lookup_name)``."
msgstr ""
"必须返回名为 ``lookup_name`` 的查找。例如，返回 ``self.output_field."
"get_lookup(lookup_name)``。"

msgid ""
"Must return the lookup named ``transform_name``. For instance, by returning "
"``self.output_field.get_transform(transform_name)``."
msgstr ""
"必须返回名为 ``transform_name`` 的查找。例如，返回 ``self.output_field."
"get_transform(transform_name)``。"

msgid ""
"Defines the type of class returned by the ``get_lookup()`` method. It must "
"be a :class:`~django.db.models.Field` instance."
msgstr ""
"定义 ``get_lookup()`` 方法返回的类的类型。它必须是一个 :class:`~django.db."
"models.Field` 实例。"

msgid "``Transform`` reference"
msgstr "``Transform`` 参考"

msgid ""
"A ``Transform`` is a generic class to implement field transformations. A "
"prominent example is ``__year`` that transforms a ``DateField`` into a "
"``IntegerField``."
msgstr ""
"``Transform`` 是一个实现字段转换的通用类。一个突出的例子是 ``__year``，它将 "
"``DateField`` 转变为 ``IntegerField``。"

msgid ""
"The notation to use a ``Transform`` in a lookup expression is "
"``<expression>__<transformation>`` (e.g. ``date__year``)."
msgstr ""
"在查询表达式中使用 ``Transform`` 的符号是 ``<expression>__<transformation>`` "
"（例如 ``date__year``）。"

msgid ""
"This class follows the :ref:`Query Expression API <query-expression>`, which "
"implies that you can use ``<expression>__<transform1>__<transform2>``. It's "
"a specialized :ref:`Func() expression <func-expressions>` that only accepts "
"one argument.  It can also be used on the right hand side of a filter or "
"directly as an annotation."
msgstr ""
"这个类遵循 :ref:`查询表达式 API <query-expression>`，这意味着你可以使用 "
"``<expression>__<transform1>__<transform2>``。它是一个专门的 :ref:`Func() 表"
"达式 <func-expressions>`，只接受一个参数。 它也可以用在过滤器的右侧，或者直接"
"作为注解使用。"

msgid ""
"A boolean indicating whether this transformation should apply to both "
"``lhs`` and ``rhs``. Bilateral transformations will be applied to ``rhs`` in "
"the same order as they appear in the lookup expression. By default it is set "
"to ``False``. For example usage, see :doc:`/howto/custom-lookups`."
msgstr ""
"一个布尔值，表示这一转换是否应适用于 ``lhs`` 和 ``rhs``。双边转换将按照查找表"
"达式中出现的顺序应用于 ``rhs``。默认情况下，它被设置为 ``False``。关于用法示"
"例，请参见 :doc:`/howto/custom-lookups`。"

msgid ""
"The left-hand side - what is being transformed. It must follow the :ref:"
"`Query Expression API <query-expression>`."
msgstr ""
"左侧——正在转换的内容。它必须遵循 :ref:`查询表达式 API <query-expression>`。"

msgid ""
"The name of the lookup, used for identifying it on parsing query "
"expressions. It cannot contain the string ``\"__\"``."
msgstr ""
"查找的名称，用于在解析查询表达式时识别它。它不能包含字符串 ``\"__\"``。"

msgid ""
"Defines the class this transformation outputs. It must be a :class:`~django."
"db.models.Field` instance. By default is the same as its ``lhs."
"output_field``."
msgstr ""
"定义这个转换输出的类。它必须是一个 :class:`~django.db.models.Field` 实例。默"
"认情况下是与其 ``lhs.output_field`` 相同。"

msgid "``Lookup`` reference"
msgstr "``Lookup`` 参考"

msgid ""
"A ``Lookup`` is a generic class to implement lookups. A lookup is a query "
"expression with a left-hand side, :attr:`lhs`; a right-hand side, :attr:"
"`rhs`; and a ``lookup_name`` that is used to produce a boolean comparison "
"between ``lhs`` and ``rhs`` such as ``lhs in rhs`` or ``lhs > rhs``."
msgstr ""
"``Lookup`` 是一个实现查找的通用类。一个查找是一个查询表达式，它的左侧是 :"
"attr:`lhs`；右侧是 :attr:`rhs`；还有一个 ``lookup_name``，用于在 ``lhs`` 和 "
"``rhs`` 之间进行布尔比较，例如 ``lhs in rhs`` 或 ``lhs > rhs``。"

msgid ""
"The primary notation to use a lookup in an expression is "
"``<lhs>__<lookup_name>=<rhs>``. Lookups can also be used directly in "
"``QuerySet`` filters::"
msgstr ""
"在表达式中使用查找的主要符号是 ``<lhs>__<lookup_name>=<rhs>``。查询也可以直接"
"在 ``QuerySet`` 过滤器中使用："

msgid "…or annotations::"
msgstr "...或注解："

msgid ""
"The left-hand side - what is being looked up. The object typically follows "
"the :ref:`Query Expression API <query-expression>`. It may also be a plain "
"value."
msgstr ""
"左手边——被查询的内容。该对象通常遵循 :ref:`查询表达式 API <query-"
"expression>`。它也可以是一个普通的值。"

msgid ""
"The right-hand side - what ``lhs`` is being compared against. It can be a "
"plain value, or something that compiles into SQL, typically an ``F()`` "
"object or a ``QuerySet``."
msgstr ""
"右侧——``lhs`` 与什么进行比较。它可以是一个普通的值，也可以是编译成 SQL 的东"
"西，通常是一个 ``F()`` 对象或一个 ``QuerySet``。"

msgid ""
"The name of this lookup, used to identify it on parsing query expressions. "
"It cannot contain the string ``\"__\"``."
msgstr ""
"这个查询的名称，用于在解析查询表达式时识别它。它不能包含字符串 ``\"__\"``。"

msgid ""
"Returns a tuple ``(lhs_string, lhs_params)``, as returned by ``compiler."
"compile(lhs)``. This method can be overridden to tune how the ``lhs`` is "
"processed."
msgstr ""
"返回由 ``compiler.compile(lhs)`` 返回的元组 ``(lhs_string, lhs_params)``。这"
"个方法可以被重写来调整 ``lhs`` 的处理方式。"

msgid ""
"``compiler`` is an ``SQLCompiler`` object, to be used like ``compiler."
"compile(lhs)`` for compiling ``lhs``. The ``connection`` can be used for "
"compiling vendor specific SQL. If ``lhs`` is not ``None``, use it as the "
"processed ``lhs`` instead of ``self.lhs``."
msgstr ""
"``compiler`` 是一个 ``SQLCompiler`` 对象，可以像 ``compiler.compile(lhs)`` 一"
"样用来编译 ``lhs``。``connection`` 可以用于编译厂商特定的 SQL。如果 ``lhs`` "
"不是 ``None``，就用它作为处理后的 ``lhs`` 代替 ``self.lhs``。"

msgid "Behaves the same way as :meth:`process_lhs`, for the right-hand side."
msgstr "右侧的行为与 :meth:`process_lhs` 相同。"

msgid "Model ``_meta`` API"
msgstr "模型 ``_meta`` API"

msgid ""
"The model ``_meta`` API is at the core of the Django ORM. It enables other "
"parts of the system such as lookups, queries, forms, and the admin to "
"understand the capabilities of each model. The API is accessible through the "
"``_meta`` attribute of each model class, which is an instance of an ``django."
"db.models.options.Options`` object."
msgstr ""
"模型 ``_meta`` 的 API 是 Django ORM 的核心。它使系统的其他部分，如查找、查"
"询、表单和管理能够理解每个模型的功能。API 可以通过每个模型类的 ``_meta`` 属性"
"来访问，它是 ``django.db.models.options.Options`` 对象的一个实例。"

msgid "Methods that it provides can be used to:"
msgstr "它提供的方法可以用来："

msgid "Retrieve all field instances of a model"
msgstr "检索一个模型的所有字段实例"

msgid "Retrieve a single field instance of a model by name"
msgstr "按名称检索模型的单个字段实例"

msgid "Field access API"
msgstr "字段访问 API"

msgid "Retrieving a single field instance of a model by name"
msgstr "按名称检索模型的单个字段实例"

msgid "Returns the field instance given a name of a field."
msgstr "返回给定字段名的字段实例。"

msgid ""
"``field_name`` can be the name of a field on the model, a field on an "
"abstract or inherited model, or a field defined on another model that points "
"to the model. In the latter case, the ``field_name`` will be (in order of "
"preference) the :attr:`~.ForeignKey.related_query_name` set by the user, "
"the :attr:`~.ForeignKey.related_name` set by the user, or the name "
"automatically generated by Django."
msgstr ""
"``field_name`` 可以是模型上的字段名，也可以是抽象或继承的模型上的字段名，或者"
"是指向模型的另一个模型上定义的字段名。在后一种情况下，``field_name`` 将是（按"
"优先级排序）用户设置的 :attr:`~.ForeignKey.related_query_name`，用户设置的 :"
"attr:`~.ForeignKey.related_name`，或者 Django 自动生成的名称。"

msgid ""
":attr:`Hidden fields <django.db.models.Field.hidden>` cannot be retrieved by "
"name."
msgstr ":attr:`隐藏字段 <django.db.models.Field.hidden>` 不能按名称检索。"

msgid ""
"If a field with the given name is not found a :class:`~django.core."
"exceptions.FieldDoesNotExist` exception will be raised."
msgstr ""
"如果没有找到指定名称的字段，将引发一个 :class:`~django.core.exceptions."
"FieldDoesNotExist` 异常。"

msgid "Retrieving all field instances of a model"
msgstr "检索一个模型的所有字段实例"

msgid ""
"Returns a tuple of fields associated with a model. ``get_fields()`` accepts "
"two parameters that can be used to control which fields are returned:"
msgstr ""
"返回与模型相关联的字段的元组。``get_fields()`` 接受两个参数，可以用来控制返回"
"哪些字段："

msgid "``include_parents``"
msgstr "``include_parents``"

msgid ""
"``True`` by default. Recursively includes fields defined on parent classes. "
"If set to ``False``, ``get_fields()`` will only search for fields declared "
"directly on the current model. Fields from models that directly inherit from "
"abstract models or proxy classes are considered to be local, not on the "
"parent."
msgstr ""
"默认为 ``True``。递归地包括父类上定义的字段。如果设置为 ``False``，"
"``get_fields()`` 将只搜索直接在当前模型上声明的字段。直接继承自抽象模型或代理"
"类的模型的字段被认为是本地的，而不是在父类上。"

msgid "``include_hidden``"
msgstr "``include_hidden``"

msgid ""
"``False`` by default. If set to ``True``, ``get_fields()`` will include "
"fields that are used to back other field's functionality. This will also "
"include any fields that have a ``related_name`` (such as :class:`~django.db."
"models.ManyToManyField`, or :class:`~django.db.models.ForeignKey`) that "
"start with a \"+\"."
msgstr ""
"默认为 ``False``。如果设置为 ``True``，``get_fields()`` 将包括用于支持其他字"
"段功能的字段。这也将包括任何具有 ``related_name`` 的字段（如 :class:`~django."
"db.models.ManyToManyField` 或 :class:`~django.db.models.ForeignKey`），并以 "
"“+” 开头。"

msgid "Model ``Meta`` options"
msgstr "模型 ``Meta`` 选项"

msgid ""
"This document explains all the possible :ref:`metadata options <meta-"
"options>` that you can give your model in its internal ``class Meta``."
msgstr ""
"本文档解释了所有可能的 :ref:`元数据选项 <meta-options>`，你可以在模型的内部 "
"``class Meta`` 中为模型提供这些选项。"

msgid "Available ``Meta`` options"
msgstr "可用的 ``Meta`` 选项"

msgid "``abstract``"
msgstr "``abstract``"

msgid ""
"If ``abstract = True``, this model will be an :ref:`abstract base class "
"<abstract-base-classes>`."
msgstr ""
"如果 ``abstract = True``，这个模型将是一个 :ref:`抽象基类 <abstract-base-"
"classes>`。"

msgid ""
"If a model is defined outside of an application in :setting:"
"`INSTALLED_APPS`, it must declare which app it belongs to::"
msgstr ""
"如果在 :setting:`INSTALLED_APPS` 中定义了一个应用程序之外的模型，它必须声明它"
"属于哪个应用程序："

msgid ""
"If you want to represent a model with the format ``app_label.object_name`` "
"or ``app_label.model_name`` you can use ``model._meta.label`` or ``model."
"_meta.label_lower`` respectively."
msgstr ""
"如果你想用 ``app_label.object_name`` 或 ``app_label.model_name`` 来表示一个模"
"型，你可以分别使用 ``model._meta.label`` 或 ``model._meta.label_lower``。"

msgid "``base_manager_name``"
msgstr "``base_manager_name``"

msgid ""
"The attribute name of the manager, for example, ``'objects'``, to use for "
"the model's :attr:`~django.db.models.Model._base_manager`."
msgstr ""
"管理器的属性名，例如，``'objects'``，用于模型的 :attr:`~django.db.models."
"Model._base_manager`。"

msgid "``db_table``"
msgstr "``db_table``"

msgid "The name of the database table to use for the model::"
msgstr "用于模型的数据库表的名称："

msgid ""
"To save you time, Django automatically derives the name of the database "
"table from the name of your model class and the app that contains it. A "
"model's database table name is constructed by joining the model's \"app "
"label\" -- the name you used in :djadmin:`manage.py startapp <startapp>` -- "
"to the model's class name, with an underscore between them."
msgstr ""
"为了节省你的时间，Django 会自动从你的模型类和包含它的应用程序的名称中导出数据"
"库表的名称。一个模型的数据库表名是通过将模型的“app label”——你在 :djadmin:"
"`manage.py startapp <startapp>` 中使用的名称——与模型的类名连接起来，并在两者"
"之间加上下划线。"

msgid ""
"For example, if you have an app ``bookstore`` (as created by ``manage.py "
"startapp bookstore``), a model defined as ``class Book`` will have a "
"database table named ``bookstore_book``."
msgstr ""
"例如，如果你有一个应用程序 ``bookstore`` （由 ``manage.py startapp "
"bookstore`` 创建），一个定义为 ``class Book`` 的模型将有一个名为 "
"``bookstore_book`` 的数据库表。"

msgid ""
"To override the database table name, use the ``db_table`` parameter in "
"``class Meta``."
msgstr "要覆盖数据库表名，使用 ``class Meta`` 中的 ``db_table`` 参数。"

msgid ""
"If your database table name is an SQL reserved word, or contains characters "
"that aren't allowed in Python variable names -- notably, the hyphen -- "
"that's OK. Django quotes column and table names behind the scenes."
msgstr ""
"如果你的数据库表名是 SQL 的保留字，或者包含 Python 变量名中不允许的字符——特别"
"是连字符——那也没关系。Django 会在幕后引用列名和表名。"

msgid "Use lowercase table names for MariaDB and MySQL"
msgstr "在 MariaDB 和 MySQL 中使用小写的表名"

msgid ""
"It is strongly advised that you use lowercase table names when you override "
"the table name via ``db_table``, particularly if you are using the MySQL "
"backend. See the :ref:`MySQL notes <mysql-notes>` for more details."
msgstr ""
"当你通过 ``db_table`` 覆盖表名时，强烈建议你使用小写的表名，特别是当你使用 "
"MySQL 后端时。更多细节请参见 :ref:`MySQL 注解 <mysql-notes>`。"

msgid "Table name quoting for Oracle"
msgstr "Oracle 的表名引用"

msgid ""
"In order to meet the 30-char limitation Oracle has on table names, and match "
"the usual conventions for Oracle databases, Django may shorten table names "
"and turn them all-uppercase. To prevent such transformations, use a quoted "
"name as the value for ``db_table``::"
msgstr ""
"为了满足 Oracle 对表名的 30 个字符的限制，并符合 Oracle 数据库的惯例，Django "
"可能会缩短表名，并将其全部变成大写。为了防止这样的转变，使用带引号的名称作为 "
"``db_table`` 的值："

msgid ""
"Such quoted names can also be used with Django's other supported database "
"backends; except for Oracle, however, the quotes have no effect. See the :"
"ref:`Oracle notes <oracle-notes>` for more details."
msgstr ""
"这样的引号也可以用在 Django 的其他支持的数据库后端，但是除了 Oracle，引号没有"
"任何作用。更多细节请参见 :ref:`Oracle 注解 <oracle-notes>`。"

msgid "``db_table_comment``"
msgstr ""

msgid ""
"The comment on the database table to use for this model. It is useful for "
"documenting database tables for individuals with direct database access who "
"may not be looking at your Django code. For example::"
msgstr ""

msgid ""
"The name of the :doc:`database tablespace </topics/db/tablespaces>` to use "
"for this model. The default is the project's :setting:`DEFAULT_TABLESPACE` "
"setting, if set. If the backend doesn't support tablespaces, this option is "
"ignored."
msgstr ""
"此模型要使用的 :doc:`数据库表空间 </topics/db/tablespaces>` 名称。如果有设置"
"的话，默认是项目的 :setting:`DEFAULT_TABLESPACE` 配置。如果后端不支持表空间，"
"则忽略此选项。"

msgid "``default_manager_name``"
msgstr "``default_manager_name``"

msgid ""
"The name of the manager to use for the model's :attr:`~django.db.models."
"Model._default_manager`."
msgstr "模型的 :attr:`~django.db.models.Model._default_manager` 管理器名称。"

msgid "``default_related_name``"
msgstr "``default_related_name``"

msgid ""
"The name that will be used by default for the relation from a related object "
"back to this one. The default is ``<model_name>_set``."
msgstr "从相关对象到这个对象的关系默认使用的名称。默认为 ``_set``。"

msgid "This option also sets :attr:`~ForeignKey.related_query_name`."
msgstr "这个选项还可以设置 :attr:`~ForeignKey.related_query_name`。"

msgid ""
"As the reverse name for a field should be unique, be careful if you intend "
"to subclass your model. To work around name collisions, part of the name "
"should contain ``'%(app_label)s'`` and ``'%(model_name)s'``, which are "
"replaced respectively by the name of the application the model is in, and "
"the name of the model, both lowercased. See the paragraph on :ref:`related "
"names for abstract models <abstract-related-name>`."
msgstr ""
"由于字段的反向名称应该是唯一的，所以如果你打算对你的模型进行子类化，就要小心"
"了。为了避免名称冲突，名称的一部分应该包含 ``'%(app_label)s'`` 和 "
"``'%(model_name)s'``，它们分别被模型所在的应用程序的名称和模型的名称所取代，"
"都是小写的。见 :ref:`抽象模型的相关名称 <abstract-related-name>` 段落。"

msgid "``get_latest_by``"
msgstr "``get_latest_by``"

msgid ""
"The name of a field or a list of field names in the model, typically :class:"
"`DateField`, :class:`DateTimeField`, or :class:`IntegerField`. This "
"specifies the default field(s) to use in your model :class:`Manager`’s :meth:"
"`~django.db.models.query.QuerySet.latest` and :meth:`~django.db.models.query."
"QuerySet.earliest` methods."
msgstr ""
"模型中的字段名或字段名列表，通常是 :class:`DateField`，:class:"
"`DateTimeField` 或 :class:`IntegerField`。这指定了在你的模型中使用的默认字"
"段 :class:`Manager` 的 :meth:`~django.db.models.querySet.last` 和 :meth:"
"`~django.db.models.querySet.earliest` 方法。"

msgid "See the :meth:`~django.db.models.query.QuerySet.latest` docs for more."
msgstr "更多内容请参见 :meth:`~django.db.models.query.QuerySet.last` 文档。"

msgid "``managed``"
msgstr "``managed``"

msgid ""
"Defaults to ``True``, meaning Django will create the appropriate database "
"tables in :djadmin:`migrate` or as part of migrations and remove them as "
"part of a :djadmin:`flush` management command. That is, Django *manages* the "
"database tables' lifecycles."
msgstr ""
"默认为 ``True``，意味着 Django 会在 :djadmin:`migrate` 中创建相应的数据库表，"
"或者作为迁移的一部分，并作为 :djadmin:`flush` 管理命令的一部分删除它们。也就"
"是说，Django *管理* 数据库表的生命周期。"

msgid ""
"If ``False``, no database table creation, modification, or deletion "
"operations will be performed for this model. This is useful if the model "
"represents an existing table or a database view that has been created by "
"some other means. This is the *only* difference when ``managed=False``. All "
"other aspects of model handling are exactly the same as normal. This includes"
msgstr ""
"如果 ``False``，将不对该模型进行数据库表的创建、修改或删除操作。如果该模型代"
"表一个现有的表或一个通过其他方式创建的数据库视图，这一点很有用。这是在 "
"``managed=False`` 时 *唯一* 的区别。模型处理的所有其他方面都与正常情况完全相"
"同。这包括"

msgid ""
"Adding an automatic primary key field to the model if you don't declare it.  "
"To avoid confusion for later code readers, it's recommended to specify all "
"the columns from the database table you are modeling when using unmanaged "
"models."
msgstr ""
"如果不声明的话，在模型中增加一个自动主键字段。 为了避免给后面来的代码读者带来"
"困惑，建议在使用非托管模型时，指定你所建模的数据库表的所有列。"

msgid ""
"If a model with ``managed=False`` contains a :class:`~django.db.models."
"ManyToManyField` that points to another unmanaged model, then the "
"intermediate table for the many-to-many join will also not be created. "
"However, the intermediary table between one managed and one unmanaged model "
"*will* be created."
msgstr ""
"如果一个带有 ``managed=False`` 的模型包含一个 :class:`~django.db.models."
"ManyToManyField` 指向另一个非托管模型，那么多对多连接的中间表也不会被创建。但"
"是，一个托管模型和一个非托管模型之间的中间表会被创建。"

msgid ""
"If you need to change this default behavior, create the intermediary table "
"as an explicit model (with ``managed`` set as needed) and use the :attr:"
"`ManyToManyField.through` attribute to make the relation use your custom "
"model."
msgstr ""
"如果你需要改变这种默认行为，请将中间表创建为显式模型（根据需要设置 "
"``managed`` ），并使用 :attr:`ManyToManyField.through` 属性让关系使用你的自定"
"义模型。"

msgid ""
"For tests involving models with ``managed=False``, it's up to you to ensure "
"the correct tables are created as part of the test setup."
msgstr ""
"对于涉及 ``managed=False`` 模型的测试，你要确保创建正确的表作为测试设置的一部"
"分。"

msgid ""
"If you're interested in changing the Python-level behavior of a model class, "
"you *could* use ``managed=False`` and create a copy of an existing model. "
"However, there's a better approach for that situation: :ref:`proxy-models`."
msgstr ""
"如果你对改变模型类的 Python 级行为感兴趣，你可以使用 ``managed=False`` 并创建"
"一个现有模型的副本。然而，对于这种情况，有一个更好的方法： :ref:`proxy-"
"models`。"

msgid "``order_with_respect_to``"
msgstr "``order_with_respect_to``"

msgid ""
"Makes this object orderable with respect to the given field, usually a "
"``ForeignKey``. This can be used to make related objects orderable with "
"respect to a parent object. For example, if an ``Answer`` relates to a "
"``Question`` object, and a question has more than one answer, and the order "
"of answers matters, you'd do this::"
msgstr ""
"使该对象可以根据给定字段（通常是 ``ForeignKey`` ）进行排序。这可以用来使相关"
"对象相对于父对象可排序。例如，如果一个 ``Answer`` 与一个 ``Question`` 对象相"
"关，而一个问题有多个答案，并且答案的顺序很重要，你可以这样做："

msgid ""
"When ``order_with_respect_to`` is set, two additional methods are provided "
"to retrieve and to set the order of the related objects: "
"``get_RELATED_order()`` and ``set_RELATED_order()``, where ``RELATED`` is "
"the lowercased model name. For example, assuming that a ``Question`` object "
"has multiple related ``Answer`` objects, the list returned contains the "
"primary keys of the related ``Answer`` objects:"
msgstr ""

msgid ""
"The order of a ``Question`` object's related ``Answer`` objects can be set "
"by passing in a list of ``Answer`` primary keys:"
msgstr ""

msgid ""
"The related objects also get two methods, ``get_next_in_order()`` and "
"``get_previous_in_order()``, which can be used to access those objects in "
"their proper order. Assuming the ``Answer`` objects are ordered by ``id``:"
msgstr ""

msgid "``order_with_respect_to`` implicitly sets the ``ordering`` option"
msgstr "``order_with_respect_to`` 隐式地设置 ``ordering`` 选项。"

msgid ""
"Internally, ``order_with_respect_to`` adds an additional field/database "
"column named ``_order`` and sets the model's :attr:`~Options.ordering` "
"option to this field. Consequently, ``order_with_respect_to`` and "
"``ordering`` cannot be used together, and the ordering added by "
"``order_with_respect_to`` will apply whenever you obtain a list of objects "
"of this model."
msgstr ""
"在内部，``order_with_respect_to`` 增加了一个名为 ``_order`` 的额外字段／数据"
"库列，并将模型的 :attr:`~Options.ordering` 选项设置为这个字段。因此，"
"``order_with_respect_to`` 和 ``ordering`` 不能同时使用，"
"``order_with_respect_to`` 所添加的排序将在每次获取这个模型的对象列表时应用。"

msgid "Changing ``order_with_respect_to``"
msgstr "更改 ``order_with_respect_to``"

msgid ""
"Because ``order_with_respect_to`` adds a new database column, be sure to "
"make and apply the appropriate migrations if you add or change "
"``order_with_respect_to`` after your initial :djadmin:`migrate`."
msgstr ""
"因为 ``order_with_respect_to`` 增加了一个新的数据库列，所以如果你在初始 :"
"djadmin:`migrate` 之后添加或更改 ``order_with_respect_to``，请务必进行适当的"
"迁移。"

msgid "``ordering``"
msgstr "``ordering``"

msgid ""
"The default ordering for the object, for use when obtaining lists of "
"objects::"
msgstr "对象的默认排序，用于获取对象列表时："

msgid ""
"This is a tuple or list of strings and/or query expressions. Each string is "
"a field name with an optional \"-\" prefix, which indicates descending "
"order. Fields without a leading \"-\" will be ordered ascending. Use the "
"string \"?\" to order randomly."
msgstr ""
"这是一个字符串和／或查询表达式的元组或列表。每一个字符串都是一个字段名，前面"
"有一个可选的“-”字头，表示降序。没有前缀“-”的字段将按升序排列。使用字符串“?”来"
"随机排序。"

msgid "For example, to order by a ``pub_date`` field ascending, use this::"
msgstr "例如，要按 ``pub_date`` 字段升序排列，使用以下方法："

msgid "To order by ``pub_date`` descending, use this::"
msgstr "要按 ``pub_date`` 降序排列，请使用："

msgid ""
"To order by ``pub_date`` descending, then by ``author`` ascending, use this::"
msgstr "要按 ``pub_date`` 降序，然后按 ``author`` 升序，请使用："

msgid ""
"You can also use :doc:`query expressions </ref/models/expressions>`. To "
"order by ``author`` ascending and make null values sort last, use this::"
msgstr ""
"你也可以使用 :doc:`查询表达式 </ref/models/expressions>`。要按 ``author`` 升"
"序排列，并使空值最后排序，请使用："

msgid ""
"Ordering is not a free operation. Each field you add to the ordering incurs "
"a cost to your database. Each foreign key you add will implicitly include "
"all of its default orderings as well."
msgstr ""
"排序不是一个免费的操作。你添加到排序中的每个字段都会给你的数据库带来成本。你"
"添加的每个外键都会隐式地包含其所有的默认排序。"

msgid ""
"If a query doesn't have an ordering specified, results are returned from the "
"database in an unspecified order. A particular ordering is guaranteed only "
"when ordering by a set of fields that uniquely identify each object in the "
"results. For example, if a ``name`` field isn't unique, ordering by it won't "
"guarantee objects with the same name always appear in the same order."
msgstr ""
"如果查询没有指定顺序，那么结果将以未指定的顺序从数据库中返回。只有当按一组字"
"段排序时，才能保证特定的排序，这些字段唯一地标识结果中的每个对象。例如，如果 "
"``name`` 字段不是唯一的，那么按它排序就不能保证具有相同名称的对象总是以相同的"
"顺序出现。"

msgid "``permissions``"
msgstr "``permissions``"

msgid ""
"Extra permissions to enter into the permissions table when creating this "
"object. Add, change, delete, and view permissions are automatically created "
"for each model. This example specifies an extra permission, "
"``can_deliver_pizzas``::"
msgstr ""
"创建此对象时要输入权限表的额外权限。为每个模型自动创建添加、更改、删除和查看"
"权限。这个例子指定了一个额外的权限，``can_deliver_pizzas`` ："

msgid ""
"This is a list or tuple of 2-tuples in the format ``(permission_code, "
"human_readable_permission_name)``."
msgstr ""
"这是一个由二元元组组成的列表或元组，格式为 ``(permission_code, "
"human_readable_permission_name)``。"

msgid "``default_permissions``"
msgstr "``default_permissions``"

msgid ""
"Defaults to ``('add', 'change', 'delete', 'view')``. You may customize this "
"list, for example, by setting this to an empty list if your app doesn't "
"require any of the default permissions. It must be specified on the model "
"before the model is created by :djadmin:`migrate` in order to prevent any "
"omitted permissions from being created."
msgstr ""
"默认值为 ``('add', 'change', 'delete', 'view')`` 。你可以自定义这个列表，例"
"如，如果你的应用不需要任何默认的权限，可以将其设置为空列表。它必须在模型创建"
"之前通过 :djadmin:`migrate` 在模型上指定，以防止任何遗漏的权限被创建。"

msgid "``proxy``"
msgstr "``proxy``"

msgid ""
"If ``proxy = True``, a model which subclasses another model will be treated "
"as a :ref:`proxy model <proxy-models>`."
msgstr ""
"如果 ``proxy = True``，作为另一个模型子类的模型将被视为 :ref:`代理模型 "
"<proxy-models>`。"

msgid "``required_db_features``"
msgstr "``required_db_features``"

msgid ""
"List of database features that the current connection should have so that "
"the model is considered during the migration phase. For example, if you set "
"this list to ``['gis_enabled']``, the model will only be synchronized on GIS-"
"enabled databases. It's also useful to skip some models when testing with "
"several database backends. Avoid relations between models that may or may "
"not be created as the ORM doesn't handle this."
msgstr ""
"当前连接应具备的数据库特征列表，以便在迁移阶段考虑模型。例如，如果你将此列表"
"设置为 ``['gis_enabled']``，则模型将只在支持 GIS 的数据库上同步。在使用多个数"
"据库后端进行测试时，跳过一些模型也很有用。避免模型之间的关系，这些模型可能会"
"被创建，也可能不会被创建，因为 ORM 不会处理这个问题。"

msgid "``required_db_vendor``"
msgstr "``required_db_vendor``"

msgid ""
"Name of a supported database vendor that this model is specific to. Current "
"built-in vendor names are: ``sqlite``, ``postgresql``, ``mysql``, "
"``oracle``. If this attribute is not empty and the current connection vendor "
"doesn't match it, the model will not be synchronized."
msgstr ""
"本模型所特有的支持的数据库厂商名称。目前的内置厂商名称是： `sqlite``，"
"`postgresql``，`mysql`` 和 `oracle``。如果该属性不为空，且当前连接厂商与之不"
"匹配，则该模型将不会同步。"

msgid "``select_on_save``"
msgstr "``select_on_save``"

msgid ""
"Determines if Django will use the pre-1.6 :meth:`django.db.models.Model."
"save()` algorithm. The old algorithm uses ``SELECT`` to determine if there "
"is an existing row to be updated. The new algorithm tries an ``UPDATE`` "
"directly. In some rare cases the ``UPDATE`` of an existing row isn't visible "
"to Django. An example is the PostgreSQL ``ON UPDATE`` trigger which returns "
"``NULL``. In such cases the new algorithm will end up doing an ``INSERT`` "
"even when a row exists in the database."
msgstr ""
"确定 Django 是否会使用 1.6 之前的 :meth:`django.db.models.Model.save()` 算"
"法。旧的算法使用 ``SELECT`` 来确定是否有一条现有的记录需要更新。新算法直接尝"
"试 ``UPDATE``。在一些罕见的情况下，Django 看不到现有行的 ``UPDATE``。例如 "
"PostgreSQL 的 ``ON UPDATE`` 触发器会返回 ``NULL``。在这种情况下，即使数据库中"
"存在一条记录，新算法最终也会进行 ``INSERT``。"

msgid ""
"Usually there is no need to set this attribute. The default is ``False``."
msgstr "通常不需要设置这个属性。默认值是 ``False``。"

msgid ""
"See :meth:`django.db.models.Model.save()` for more about the old and new "
"saving algorithm."
msgstr "关于新旧保存算法，请参见 :meth:`django.db.models.Model.save()`。"

msgid "``indexes``"
msgstr "``indexes``"

msgid ""
"A list of :doc:`indexes </ref/models/indexes>` that you want to define on "
"the model::"
msgstr "你想在模型上定义的 :doc:`indexes </ref/models/indexes>` 的列表："

msgid "``unique_together``"
msgstr "``unique_together``"

msgid ""
"Use :class:`.UniqueConstraint` with the :attr:`~Options.constraints` option "
"instead."
msgstr ""
"使用 :class:`.UniqueConstraint` 与 :attr:`~Options.constraint` 选项代替。"

msgid ""
":class:`.UniqueConstraint` provides more functionality than "
"``unique_together``. ``unique_together`` may be deprecated in the future."
msgstr ""
":class:`.UniqueConstraint` 比 ``unique_together`` 提供更多的功能。"
"``unique_together`` 今后可能会被废弃。"

msgid "Sets of field names that, taken together, must be unique::"
msgstr "一组字段名，合起来必须是唯一的："

msgid ""
"This is a list of lists that must be unique when considered together. It's "
"used in the Django admin and is enforced at the database level (i.e., the "
"appropriate ``UNIQUE`` statements are included in the ``CREATE TABLE`` "
"statement)."
msgstr ""
"这是一个列表，这些列表在一起考虑时必须是唯一的。它 在Django 管理中使用，并在"
"数据库级别执行（即在 ``CREATE TABLE`` 语句中包含适当的 ``UNIQUE`` 语句）。"

msgid ""
"For convenience, ``unique_together`` can be a single list when dealing with "
"a single set of fields::"
msgstr "为方便起见，``unique_together`` 在处理单组字段时可以是一个单一的列表："

msgid ""
"A :class:`~django.db.models.ManyToManyField` cannot be included in "
"``unique_together``. (It's not clear what that would even mean!) If you need "
"to validate uniqueness related to a :class:`~django.db.models."
"ManyToManyField`, try using a signal or an explicit :attr:`through "
"<ManyToManyField.through>` model."
msgstr ""

msgid ""
"The ``ValidationError`` raised during model validation when the constraint "
"is violated has the ``unique_together`` error code."
msgstr ""
"在模型验证过程中，当约束条件被违反时引发的 ``ValidationError`` 具有 "
"``unique_together`` 错误代码。"

msgid "``index_together``"
msgstr "``index_together``"

msgid "Sets of field names that, taken together, are indexed::"
msgstr "一组字段名，合在一起，是有索引的："

msgid ""
"This list of fields will be indexed together (i.e. the appropriate ``CREATE "
"INDEX`` statement will be issued.)"
msgstr "该字段清单将被编入索引（即发出适当的 ``CREATE INDEX`` 语句）。"

msgid ""
"For convenience, ``index_together`` can be a single list when dealing with a "
"single set of fields::"
msgstr ""
"为方便起见，``index_together`` 在处理一组字段时，可以是一个单一的列表："

msgid "``constraints``"
msgstr "``constraints``"

msgid ""
"A list of :doc:`constraints </ref/models/constraints>` that you want to "
"define on the model::"
msgstr "你想在模型上定义的 :doc:`约束 </ref/models/constraints>` 列表："

msgid "A human-readable name for the object, singular::"
msgstr "对象的可读名称，单数："

msgid ""
"If this isn't given, Django will use a munged version of the class name: "
"``CamelCase`` becomes ``camel case``."
msgstr ""
"如果没有给定，Django 将使用一个 munged 版本的类名：``CamelCase`` 变成 "
"``camel case``。"

msgid "``verbose_name_plural``"
msgstr "``verbose_name_plural``"

msgid "The plural name for the object::"
msgstr "对象的复数名称："

msgid ""
"If this isn't given, Django will use :attr:`~Options.verbose_name` + "
"``\"s\"``."
msgstr ""
"如果没有给定，Django 将使用 :attr:`~Options.verbose_name` + ``\"s\"``。"

msgid "Read-only ``Meta`` attributes"
msgstr "只读的 ``Meta`` 属性"

msgid ""
"Representation of the object, returns ``app_label.object_name``, e.g. "
"``'polls.Question'``."
msgstr ""
"对象的表示，返回 ``app_label.object_name``，例如 ``'polls.Question'``。"

msgid "``label_lower``"
msgstr "``label_lower``"

msgid ""
"Representation of the model, returns ``app_label.model_name``, e.g. ``'polls."
"question'``."
msgstr "模型的表示，返回 ``app_label.model_name``，例如 ``'polls.question'``。"

msgid "``QuerySet`` API reference"
msgstr "``QuerySet`` API 参考"

msgid ""
"This document describes the details of the ``QuerySet`` API. It builds on "
"the material presented in the :doc:`model </topics/db/models>` and :doc:"
"`database query </topics/db/queries>` guides, so you'll probably want to "
"read and understand those documents before reading this one."
msgstr ""
"该文档描述了 ``QuerySet`` API 的细节。它是建立在 :doc:`模型 </topics/db/"
"models>` 和 :doc:`数据库查询 </topics/db/queries>` 指南的材料基础上的，因此，"
"在阅读这篇文档之前，你可能需要阅读和理解这些文档。"

msgid "When ``QuerySet``\\s are evaluated"
msgstr "什么时候 ``QuerySet`` 被执行"

msgid ""
"Internally, a ``QuerySet`` can be constructed, filtered, sliced, and "
"generally passed around without actually hitting the database. No database "
"activity actually occurs until you do something to evaluate the queryset."
msgstr ""
"``QuerySet`` 本身可以被构造，过滤，切片，或者复制赋值等，是无需访问数据库的。"
"只有在你需要从数据库取出数据或者，向数据库存入数据时才需要访问数据库。"

msgid "You can evaluate a ``QuerySet`` in the following ways:"
msgstr "你可以用以下方式执行一个 ``QuerySet``："

msgid ""
"**Iteration.** A ``QuerySet`` is iterable, and it executes its database "
"query the first time you iterate over it. For example, this will print the "
"headline of all entries in the database::"
msgstr ""
"**迭代。** 一个 ``QuerySet`` 是可迭代的，当你第一次迭代它时，它就会执行其数据"
"库查询。例如，这将打印数据库中所有条目的标题："

msgid ""
"Note: Don't use this if all you want to do is determine if at least one "
"result exists. It's more efficient to use :meth:`~QuerySet.exists`."
msgstr ""
"注意：如果你想做的只是确定至少一个结果是否存在，不要使用这个。使用 :meth:"
"`~QuerySet.exists` 会更有效。"

msgid ""
"**Asynchronous iteration.** A ``QuerySet`` can also be iterated over using "
"``async for``::"
msgstr ""

msgid ""
"Both synchronous and asynchronous iterators of QuerySets share the same "
"underlying cache."
msgstr ""

msgid "Support for asynchronous iteration was added."
msgstr ""

msgid ""
"**Slicing.** As explained in :ref:`limiting-querysets`, a ``QuerySet`` can "
"be sliced, using Python's array-slicing syntax. Slicing an unevaluated "
"``QuerySet`` usually returns another unevaluated ``QuerySet``, but Django "
"will execute the database query if you use the \"step\" parameter of slice "
"syntax, and will return a list. Slicing a ``QuerySet`` that has been "
"evaluated also returns a list."
msgstr ""
"**切片。** 正如在 :ref:`limiting-querysets` 中所解释的那样，``QuerySet`` 可以"
"使用 Python 的数组切片语法进行切片。切片一个未执行的 ``QuerySet`` 通常会返回"
"另一个未执行的 ``QuerySet``，但如果使用切片语法的 ``step`` 参数，Django 会执"
"行数据库查询，并返回一个列表。切片一个已经执行过的 ``QuerySet`` 也会返回一个"
"列表。"

msgid ""
"Also note that even though slicing an unevaluated ``QuerySet`` returns "
"another unevaluated ``QuerySet``, modifying it further (e.g., adding more "
"filters, or modifying ordering) is not allowed, since that does not "
"translate well into SQL and it would not have a clear meaning either."
msgstr ""
"还要注意的是，即使对一个未执行的 ``QuerySet`` 进行切片，返回另一个未执行的 "
"``QuerySet``，也不允许进一步修改它（例如，添加更多的过滤器，或修改排序），因"
"为这不能很好地翻译成 SQL，也没有明确的含义。"

msgid ""
"**Pickling/Caching.** See the following section for details of what is "
"involved when `pickling QuerySets`_. The important thing for the purposes of "
"this section is that the results are read from the database."
msgstr ""
"**Pickle 序列化／缓存。** 关于 `pickling QuerySets`_ 时涉及的细节，请参见下一"
"节。就本节而言，重要的是，结果是从数据库中读取的。"

msgid ""
"**repr().** A ``QuerySet`` is evaluated when you call ``repr()`` on it. This "
"is for convenience in the Python interactive interpreter, so you can "
"immediately see your results when using the API interactively."
msgstr ""
"**repr()。** 当你调用 ``repr()`` 时，所在 ``QuerySet`` 会被执行。这是为了方"
"便 Python 交互式解释器，所以当你交互式使用 API 时，可以立即看到你的结果。"

msgid ""
"**len().** A ``QuerySet`` is evaluated when you call ``len()`` on it. This, "
"as you might expect, returns the length of the result list."
msgstr ""
"**len()。** 当你调用 ``len()`` 时，会执行 ``QuerySet``。正如你所期望的，这将"
"返回结果列表的长度。"

msgid ""
"Note: If you only need to determine the number of records in the set (and "
"don't need the actual objects), it's much more efficient to handle a count "
"at the database level using SQL's ``SELECT COUNT(*)``. Django provides a :"
"meth:`~QuerySet.count` method for precisely this reason."
msgstr ""
"注意：如果你只需要确定集合中的记录数（而不需要实际的对象），那么使用 SQL 的 "
"``SELECT COUNT(*)`` 在数据库层面上处理计数会更有效率。Django 提供了一个 :"
"meth:`~QuerySet.count` 方法正是为了这个原因。"

msgid ""
"**list().** Force evaluation of a ``QuerySet`` by calling ``list()`` on it. "
"For example::"
msgstr "**list()。** 通过调用 ``list()`` 强制执行 ``QuerySet``。例如："

msgid ""
"**bool().** Testing a ``QuerySet`` in a boolean context, such as using "
"``bool()``, ``or``, ``and`` or an ``if`` statement, will cause the query to "
"be executed. If there is at least one result, the ``QuerySet`` is ``True``, "
"otherwise ``False``. For example::"
msgstr ""
"**bool()。** 在布尔语境中测试 ``QuerySet``，如使用 ``bool()``、``or``、"
"``and`` 或 ``if`` 语句，将导致查询被执行。如果至少有一个结果，则 "
"``QuerySet`` 为 ``True``，否则为 ``False``。例如："

msgid ""
"Note: If you only want to determine if at least one result exists (and don't "
"need the actual objects), it's more efficient to use :meth:`~QuerySet."
"exists`."
msgstr ""
"注意：如果你只想确定至少一个结果是否存在（而不需要实际的对象），使用 :meth:"
"`~QuerySet.exences` 更高效。"

msgid "Pickling ``QuerySet``\\s"
msgstr "Pickle 序列化 ``QuerySet``"

msgid ""
"If you :mod:`pickle` a ``QuerySet``, this will force all the results to be "
"loaded into memory prior to pickling. Pickling is usually used as a "
"precursor to caching and when the cached queryset is reloaded, you want the "
"results to already be present and ready for use (reading from the database "
"can take some time, defeating the purpose of caching). This means that when "
"you unpickle a ``QuerySet``, it contains the results at the moment it was "
"pickled, rather than the results that are currently in the database."
msgstr ""
"如果你 :mod:`pickle` 序列化一个 ``QuerySet``，这将迫使所有结果在 pickle 序列"
"化之前加载到内存中。Pickle 序列化通常被用作缓存的前奏，当缓存的查询集被重新加"
"载时，你希望结果已经存在并可以使用（从数据库读取可能需要一些时间，这就违背了"
"缓存的目的）。这意味着，当你取消缓存一个 ``QuerySet`` 时，它包含的是它被缓存"
"时的结果，而不是当前在数据库中的结果。"

msgid ""
"If you only want to pickle the necessary information to recreate the "
"``QuerySet`` from the database at a later time, pickle the ``query`` "
"attribute of the ``QuerySet``. You can then recreate the original "
"``QuerySet`` (without any results loaded) using some code like this:"
msgstr ""

msgid ""
"The ``query`` attribute is an opaque object. It represents the internals of "
"the query construction and is not part of the public API. However, it is "
"safe (and fully supported) to pickle and unpickle the attribute's contents "
"as described here."
msgstr ""
"``query`` 属性是一个不透明的对象。它代表了查询结构的内部结构，不是公共 API 的"
"一部分。但是，如这里所述，可以安全地（并完全支持）pickle 序列化和反序列化该属"
"性的内容。"

msgid "Restrictions on ``QuerySet.values_list()``"
msgstr "对 ``QuerySet.values_list()`` 的限制"

msgid ""
"If you recreate :meth:`QuerySet.values_list` using the pickled ``query`` "
"attribute, it will be converted to :meth:`QuerySet.values`:"
msgstr ""

msgid ""
"Pickles of ``QuerySets`` are only valid for the version of Django that was "
"used to generate them. If you generate a pickle using Django version N, "
"there is no guarantee that pickle will be readable with Django version N+1. "
"Pickles should not be used as part of a long-term archival strategy."
msgstr ""
"``QuerySets`` 的 pickle 只对生成它们的 Django 版本有效。如果你用 Django N 版"
"本生成了一个 pickle，就不能保证这个 pickle 在 Django N+1 版本中可以被读取。"
"Pickle 不应该作为长期存档策略的一部分。"

msgid ""
"Since pickle compatibility errors can be difficult to diagnose, such as "
"silently corrupted objects, a ``RuntimeWarning`` is raised when you try to "
"unpickle a queryset in a Django version that is different than the one in "
"which it was pickled."
msgstr ""
"由于 pickle 兼容性错误可能很难诊断，比如静默损坏对象，所以当你试图在与序列化 "
"pickle 时不同版本的 Django 中反序列化查询集时，会发出 ``RuntimeWarning``。"

msgid "``QuerySet`` API"
msgstr "``QuerySet`` API"

msgid "Here's the formal declaration of a ``QuerySet``:"
msgstr "这里是 ``QuerySet`` 的正式声明："

msgid ""
"Usually when you'll interact with a ``QuerySet`` you'll use it by :ref:"
"`chaining filters <chaining-filters>`. To make this work, most ``QuerySet`` "
"methods return new querysets. These methods are covered in detail later in "
"this section."
msgstr ""
"通常当你与 ``QuerySet`` 交互时，你会通过 :ref:`链式过滤器 <chaining-"
"filters>` 来使用它。为了实现这一目的，大多数 ``QuerySet`` 方法都会返回新的查"
"询集。这些方法将在本节后面详细介绍。"

msgid ""
"The ``QuerySet`` class has the following public attributes you can use for "
"introspection:"
msgstr ""

msgid ""
"``True`` if the ``QuerySet`` is ordered — i.e. has an :meth:`order_by()` "
"clause or a default ordering on the model. ``False`` otherwise."
msgstr ""
"``True`` 如果 ``QuerySet`` 是有序的——即有一个 :meth:`order_by()` 子句或模型上"
"的默认排序。否则为 ``False``。"

msgid "The database that will be used if this query is executed now."
msgstr "如果现在执行这个查询，将使用的数据库。"

msgid ""
"The ``query`` parameter to :class:`QuerySet` exists so that specialized "
"query subclasses can reconstruct internal query state. The value of the "
"parameter is an opaque representation of that query state and is not part of "
"a public API."
msgstr ""
":class:`QuerySet` 的 ``query`` 参数的存在是为了让专门的查询子类能够重建内部查"
"询状态。该参数的值是该查询状态的不透明表示，不是公共 API 的一部分。"

msgid "Methods that return new ``QuerySet``\\s"
msgstr "返回新 ``QuerySet`` 的方法"

msgid ""
"Django provides a range of ``QuerySet`` refinement methods that modify "
"either the types of results returned by the ``QuerySet`` or the way its SQL "
"query is executed."
msgstr ""
"Django 提供了一系列的 ``QuerySet`` 细化方法，这些方法可以修改 ``QuerySet`` 返"
"回的结果类型或其 SQL 查询的执行方式。"

msgid ""
"These methods do not run database queries, therefore they are **safe to** "
"**run in asynchronous code**, and do not have separate asynchronous versions."
msgstr ""

msgid "``filter()``"
msgstr "``filter()``"

msgid ""
"Returns a new ``QuerySet`` containing objects that match the given lookup "
"parameters."
msgstr "返回一个新的 ``QuerySet``，其中包含与给定查找参数相匹配的对象。"

msgid ""
"The lookup parameters (``**kwargs``) should be in the format described in "
"`Field lookups`_ below. Multiple parameters are joined via ``AND`` in the "
"underlying SQL statement."
msgstr ""
"查询参数（``**kwargs``）的格式应在下文 `Field lookups`_ 中描述。多个参数通过"
"底层 SQL 语句中的 ``AND`` 连接。"

msgid ""
"If you need to execute more complex queries (for example, queries with "
"``OR`` statements), you can use :class:`Q objects <django.db.models.Q>` "
"(``*args``)."
msgstr ""
"如果你需要执行更复杂的查询（例如，带有 ``OR`` 语句的查询），你可以使用 :"
"class:`Q 对象 <django.db.models.Q>` （``*args``）。"

msgid "``exclude()``"
msgstr "``exclude()``"

msgid ""
"Returns a new ``QuerySet`` containing objects that do *not* match the given "
"lookup parameters."
msgstr "返回一个新的 ``QuerySet``，其中包含与给定查找参数不匹配的对象。"

msgid ""
"The lookup parameters (``**kwargs``) should be in the format described in "
"`Field lookups`_ below. Multiple parameters are joined via ``AND`` in the "
"underlying SQL statement, and the whole thing is enclosed in a ``NOT()``."
msgstr ""
"查询参数（``**kwargs``）的格式应在下文 `Field lookups`_ 中描述。多个参数通过"
"底层 SQL 语句中的 ``AND`` 连接，整个过程用 ``NOT()`` 括起来。"

msgid ""
"This example excludes all entries whose ``pub_date`` is later than 2005-1-3 "
"AND whose ``headline`` is \"Hello\"::"
msgstr ""
"这个例子排除了所有 ``pub_date`` 晚于 2005-1-3 且 ``headline`` 为“Hello”的条"
"目："

msgid ""
"This example excludes all entries whose ``pub_date`` is later than 2005-1-3 "
"OR whose headline is \"Hello\"::"
msgstr ""
"这个例子不包括所有 ``pub_date`` 晚于 2005-1-3 或 ``headline`` 为“Hello”的条"
"目："

msgid "Note the second example is more restrictive."
msgstr "请注意，第二个例子的限制性更强。"

msgid "``annotate()``"
msgstr "``annotate()``"

msgid ""
"Annotates each object in the ``QuerySet`` with the provided list of :doc:"
"`query expressions </ref/models/expressions>`. An expression may be a simple "
"value, a reference to a field on the model (or any related models), or an "
"aggregate expression (averages, sums, etc.) that has been computed over the "
"objects that are related to the objects in the ``QuerySet``."
msgstr ""
"用所提供的 :doc:`查询表达式 </ref/models/expressions>` 列表对 ``QuerySet`` 中"
"的每个对象进行注解。表达式可以是一个简单的值，也可以是对模型（或任何相关模"
"型）字段的引用，或者是对与 ``QuerySet`` 中的对象相关的对象进行计算的聚合表达"
"式（平均数、总和等）。"

msgid ""
"Each argument to ``annotate()`` is an annotation that will be added to each "
"object in the ``QuerySet`` that is returned."
msgstr ""
"``annotate()`` 的每个参数都是一个注解，将被添加到返回的 ``QuerySet`` 中的每个"
"对象。"

msgid ""
"The aggregation functions that are provided by Django are described in "
"`Aggregation Functions`_ below."
msgstr "Django 提供的聚合函数在下面的 `聚合函数`_ 中介绍。"

msgid ""
"Annotations specified using keyword arguments will use the keyword as the "
"alias for the annotation. Anonymous arguments will have an alias generated "
"for them based upon the name of the aggregate function and the model field "
"that is being aggregated. Only aggregate expressions that reference a single "
"field can be anonymous arguments. Everything else must be a keyword argument."
msgstr ""
"使用关键字参数指定的注解将使用关键字作为注解的别名。匿名参数将根据聚合函数的"
"名称和被聚合的模型字段为其生成一个别名。只有引用单个字段的聚合表达式才能成为"
"匿名参数。其他一切都必须是关键字参数。"

msgid ""
"For example, if you were manipulating a list of blogs, you may want to "
"determine how many entries have been made in each blog:"
msgstr ""

msgid ""
"The ``Blog`` model doesn't define an ``entry__count`` attribute by itself, "
"but by using a keyword argument to specify the aggregate function, you can "
"control the name of the annotation:"
msgstr ""

msgid ""
"For an in-depth discussion of aggregation, see :doc:`the topic guide on "
"Aggregation </topics/db/aggregation>`."
msgstr ""
"关于聚合的深入讨论，见 :doc:`关于聚合的专题指南 </topics/db/aggregation>`。"

msgid "``alias()``"
msgstr "``alias()``"

msgid ""
"Same as :meth:`annotate`, but instead of annotating objects in the "
"``QuerySet``, saves the expression for later reuse with other ``QuerySet`` "
"methods. This is useful when the result of the expression itself is not "
"needed but it is used for filtering, ordering, or as a part of a complex "
"expression. Not selecting the unused value removes redundant work from the "
"database which should result in better performance."
msgstr ""
"与 :meth:`annotate` 相同，但不是注解中的 ``QuerySet`` 对象，而是保存表达式，"
"以便以后与其他 ``QuerySet`` 方法重复使用。当不需要表达式本身的结果，但用于过"
"滤、排序或作为复杂表达式的一部分时，这很有用。不查找未使用的值可以从数据库中"
"移除多余的工作，这应该会带来更好的性能。"

msgid ""
"For example, if you want to find blogs with more than 5 entries, but are not "
"interested in the exact number of entries, you could do this:"
msgstr ""

msgid ""
"``alias()`` can be used in conjunction with :meth:`annotate`, :meth:"
"`exclude`, :meth:`filter`, :meth:`order_by`, and :meth:`update`. To use "
"aliased expression with other methods (e.g. :meth:`aggregate`), you must "
"promote it to an annotation::"
msgstr ""
"``alias()`` 可以与 :meth:`annotate`、:meth:`exclude`、:meth:`filter`、:meth:"
"`order_by` 和 :meth:`update` 一起使用。要将别名表达式与其他方法（例如 :meth:"
"`aggregate`）一起使用，你必须将其提升为注解："

msgid ""
":meth:`filter` and :meth:`order_by` can take expressions directly, but "
"expression construction and usage often does not happen in the same place "
"(for example, ``QuerySet`` method creates expressions, for later use in "
"views). ``alias()`` allows building complex expressions incrementally, "
"possibly spanning multiple methods and modules, refer to the expression "
"parts by their aliases and only use :meth:`annotate` for the final result."
msgstr ""
":meth:`filter` 和 :meth:`order_by` 可以直接接受表达式，但表达式的构建和使用往"
"往不发生在同一个地方（例如，``QuerySet`` 方法创建表达式，以便以后在视图中使"
"用）。``alias()`` 允许逐步建立复杂的表达式，可能跨越多个方法和模块，用它们的"
"别名指代表达式部分，只用 :meth:`annotate` 来获得最终结果。"

msgid "``order_by()``"
msgstr "``order_by()``"

msgid ""
"By default, results returned by a ``QuerySet`` are ordered by the ordering "
"tuple given by the ``ordering`` option in the model's ``Meta``. You can "
"override this on a per-``QuerySet`` basis by using the ``order_by`` method."
msgstr ""
"默认情况下，``QuerySet`` 返回的结果是按照模型 ``Meta`` 中的 ``ordering`` 选项"
"给出的排序元组排序的。你可以通过使用 ``order_by`` 方法在每个 ``QuerySet`` 的"
"基础上覆盖这一点。"

msgid ""
"The result above will be ordered by ``pub_date`` descending, then by "
"``headline`` ascending. The negative sign in front of ``\"-pub_date\"`` "
"indicates *descending* order. Ascending order is implied. To order randomly, "
"use ``\"?\"``, like so::"
msgstr ""
"上述结果将按 ``pub_date`` 降序排列，然后按 ``headline`` 升序排列。``\"-"
"pub_date\"`` 前面的负号表示 *降序*。升序是隐含的。要随机排序，使用 ``\"?"
"\"``，如："

msgid ""
"Note: ``order_by('?')`` queries may be expensive and slow, depending on the "
"database backend you're using."
msgstr ""
"注意：``order_by('?')`` 查询可能会很贵，而且速度很慢，这取决于你使用的数据库"
"后端。"

msgid ""
"To order by a field in a different model, use the same syntax as when you "
"are querying across model relations. That is, the name of the field, "
"followed by a double underscore (``__``), followed by the name of the field "
"in the new model, and so on for as many models as you want to join. For "
"example::"
msgstr ""
"要按不同模型中的字段排序，使用与跨模型关系查询时相同的语法。也就是说，字段的"
"名称，后面是双下划线（``__``），再后面是新模型中的字段名称，以此类推，想加入"
"多少模型就加入多少。例如："

msgid ""
"If you try to order by a field that is a relation to another model, Django "
"will use the default ordering on the related model, or order by the related "
"model's primary key if there is no :attr:`Meta.ordering <django.db.models."
"Options.ordering>` specified. For example, since the ``Blog`` model has no "
"default ordering specified::"
msgstr ""
"如果你试图通过与另一个模型有关系的字段进行排序，Django 将使用相关模型上的默认"
"排序，如果没有指定 :attr:`Meta.ordering <django.db.models.Options."
"ordering>`，则通过相关模型的主键进行排序。例如，由于 ``Blog`` 模型没有指定默"
"认排序："

msgid "...is identical to::"
msgstr "...等同于："

msgid ""
"If ``Blog`` had ``ordering = ['name']``, then the first queryset would be "
"identical to::"
msgstr ""
"如果 ``Blog`` 有 ``ordering = ['name']``，那么第一个查询集将与以下内容相同："

msgid ""
"You can also order by :doc:`query expressions </ref/models/expressions>` by "
"calling :meth:`~.Expression.asc` or :meth:`~.Expression.desc` on the "
"expression::"
msgstr ""
"你也可以通过在表达式上调用 :meth:`~.Expression.asc` 或 :meth:`~.Expression."
"esc`，按 :doc:`查询表达式 </ref/models/expressions>` 排序："

msgid ""
":meth:`~.Expression.asc` and :meth:`~.Expression.desc` have arguments "
"(``nulls_first`` and ``nulls_last``) that control how null values are sorted."
msgstr ""
":meth:`~.Expression.asc` 和 :meth:`~.Expression.esc` 有参数（``nulls_first`` "
"和 ``nulls_last``）来控制如何对空值进行排序。"

msgid ""
"Be cautious when ordering by fields in related models if you are also using :"
"meth:`distinct()`. See the note in :meth:`distinct` for an explanation of "
"how related model ordering can change the expected results."
msgstr ""
"如果你还使用 :meth:`distinct()`，在按相关模型中的字段排序时要谨慎。请参见 :"
"meth:`distinct` 中的说明，解释相关模型排序如何改变预期结果。"

msgid ""
"It is permissible to specify a multi-valued field to order the results by "
"(for example, a :class:`~django.db.models.ManyToManyField` field, or the "
"reverse relation of a :class:`~django.db.models.ForeignKey` field)."
msgstr ""
"允许指定一个多值字段来对结果进行排序（例如，一个 :class:`~django.db.models."
"ManyToManyField` 字段，或者一个 :class:`~django.db.models.ForeignKey` 字段的"
"反向关系）。"

msgid "Consider this case::"
msgstr "考虑到这种情况："

msgid ""
"Here, there could potentially be multiple ordering data for each ``Event``; "
"each ``Event`` with multiple ``children`` will be returned multiple times "
"into the new ``QuerySet`` that ``order_by()`` creates. In other words, using "
"``order_by()`` on the ``QuerySet`` could return more items than you were "
"working on to begin with - which is probably neither expected nor useful."
msgstr ""
"在这里，每个 ``Event`` 可能有多个排序数据；每个 ``Event`` 有多个 "
"``children`` 将被多次返回到 ``order_by()`` 创建的新 ``QuerySet`` 中。换句话"
"说，在 ``QuerySet`` 上使用 ``order_by()`` 可能会返回比你一开始工作更多的项目"
"——这可能既不是预期的，也不是有用的。"

msgid ""
"Thus, take care when using multi-valued field to order the results. **If** "
"you can be sure that there will only be one ordering piece of data for each "
"of the items you're ordering, this approach should not present problems. If "
"not, make sure the results are what you expect."
msgstr ""
"因此，在使用多值字段对结果进行排序时要注意。**如果** 你能确定你要订购的每个项"
"目只有一个订购数据，这种方法应该不会出现问题。如果不是，请确保结果是你所期望"
"的。"

msgid ""
"There's no way to specify whether ordering should be case sensitive. With "
"respect to case-sensitivity, Django will order results however your database "
"backend normally orders them."
msgstr ""
"没有办法指定排序是否应该区分大小写。关于大小写敏感，Django 会按照数据库后台的"
"正常排序方式来排序。"

msgid ""
"You can order by a field converted to lowercase with :class:`~django.db."
"models.functions.Lower` which will achieve case-consistent ordering::"
msgstr ""
"你可以用 :class:`~django.db.models.function.Lower` 将一个字段转换为小写，从而"
"实现大小写一致的排序："

msgid ""
"If you don't want any ordering to be applied to a query, not even the "
"default ordering, call :meth:`order_by()` with no parameters."
msgstr ""
"如果你不想在查询中应用任何排序，甚至是默认的排序，可以不使用参数调用 :meth:"
"`order_by()`。"

msgid ""
"You can tell if a query is ordered or not by checking the :attr:`.QuerySet."
"ordered` attribute, which will be ``True`` if the ``QuerySet`` has been "
"ordered in any way."
msgstr ""
"你可以通过检查 :attr:`.QuerySet.ordered` 属性来判断一个查询是否被排序，如果 "
"``QuerySet`` 以任何方式被排序，则该属性为 ``True``。"

msgid ""
"Each ``order_by()`` call will clear any previous ordering. For example, this "
"query will be ordered by ``pub_date`` and not ``headline``::"
msgstr ""
"每次 ``order_by()`` 调用都将清除以前的任何排序。例如，此查询将按 "
"``pub_date`` 而不是 ``headline`` 排序："

msgid "``reverse()``"
msgstr "reverse()"

msgid ""
"Use the ``reverse()`` method to reverse the order in which a queryset's "
"elements are returned. Calling ``reverse()`` a second time restores the "
"ordering back to the normal direction."
msgstr ""
"使用 ``reverse()`` 方法来反向返回查询集元素的顺序。第二次调用 ``reverse()`` "
"会将顺序恢复到正常方向。"

msgid "To retrieve the \"last\" five items in a queryset, you could do this::"
msgstr "要检索一个查询集中的“最后”五个项目，你可以这样做："

msgid ""
"Note that this is not quite the same as slicing from the end of a sequence "
"in Python. The above example will return the last item first, then the "
"penultimate item and so on. If we had a Python sequence and looked at "
"``seq[-5:]``, we would see the fifth-last item first. Django doesn't support "
"that mode of access (slicing from the end), because it's not possible to do "
"it efficiently in SQL."
msgstr ""
"请注意，这与 Python 中从一个序列的末尾切分不太一样。上面的例子会先返回最后一"
"项，然后返回倒数第二项，以此类推。如果我们有一个 Python 序列，看 "
"``seq[-5:]``，我们会先看到倒数第五项。Django 不支持这种访问模式（从末尾切"
"分），因为在 SQL 中不可能有效地做到这一点。"

msgid ""
"Also, note that ``reverse()`` should generally only be called on a "
"``QuerySet`` which has a defined ordering (e.g., when querying against a "
"model which defines a default ordering, or when using :meth:`order_by()`). "
"If no such ordering is defined for a given ``QuerySet``, calling "
"``reverse()`` on it has no real effect (the ordering was undefined prior to "
"calling ``reverse()``, and will remain undefined afterward)."
msgstr ""
"另外，请注意，``reverse()`` 一般只应在有定义顺序的 ``QuerySet`` 上调用（例"
"如，当对定义了默认顺序的模型进行查询时，或者当使用 :meth:`order_by()` 时）。"
"如果没有为一个给定的 ``QuerySet`` 定义这样的排序，对它调用 ``reverse()`` 没有"
"实际效果（在调用 ``reverse()`` 之前，排序是未定义的，之后也将保持未定义）。"

msgid "``distinct()``"
msgstr "``distinct()``"

msgid ""
"Returns a new ``QuerySet`` that uses ``SELECT DISTINCT`` in its SQL query. "
"This eliminates duplicate rows from the query results."
msgstr ""
"返回一个新的 ``QuerySet``，在其 SQL 查询中使用 ``SELECT DISTINCT``。这将消除"
"查询结果中的重复记录。"

msgid ""
"By default, a ``QuerySet`` will not eliminate duplicate rows. In practice, "
"this is rarely a problem, because simple queries such as ``Blog.objects."
"all()`` don't introduce the possibility of duplicate result rows. However, "
"if your query spans multiple tables, it's possible to get duplicate results "
"when a ``QuerySet`` is evaluated. That's when you'd use ``distinct()``."
msgstr ""
"默认情况下，``QuerySet`` 不会消除重复的记录。在实践中，这很少是一个问题，因为"
"简单的查询，如 ``Blog.objects.all()`` 不会引入重复结果行的可能性。但是，如果"
"你的查询跨越了多个表，当 ``QuerySet`` 被执行时，就有可能得到重复的结果。这时"
"就应该使用 ``distinct()``。"

msgid ""
"Any fields used in an :meth:`order_by` call are included in the SQL "
"``SELECT`` columns. This can sometimes lead to unexpected results when used "
"in conjunction with ``distinct()``. If you order by fields from a related "
"model, those fields will be added to the selected columns and they may make "
"otherwise duplicate rows appear to be distinct. Since the extra columns "
"don't appear in the returned results (they are only there to support "
"ordering), it sometimes looks like non-distinct results are being returned."
msgstr ""
":meth:`order_by` 调用中使用的任何字段都包含在 SQL ``SELECT`` 列中。当与 "
"``distinct()`` 结合使用时，这有时会导致意外的结果。如果按相关模型中的字段排"
"序，这些字段将被添加到选定的列中，它们可能会使原本重复的行看起来是不同的。由"
"于额外的列不会出现在返回的结果中（它们只是为了支持排序），所以有时看起来像是"
"返回了非去重的结果。"

msgid ""
"Similarly, if you use a :meth:`values()` query to restrict the columns "
"selected, the columns used in any :meth:`order_by()` (or default model "
"ordering) will still be involved and may affect uniqueness of the results."
msgstr ""
"同样，如果使用 :meth:`values()` 查询来限制所选的列，任何 :meth:`order_by()` "
"中使用的列（或默认的模型排序）仍然会被涉及，并可能影响结果的唯一性。"

msgid ""
"The moral here is that if you are using ``distinct()`` be careful about "
"ordering by related models. Similarly, when using ``distinct()`` and :meth:"
"`values()` together, be careful when ordering by fields not in the :meth:"
"`values()` call."
msgstr ""
"这里的寓意是，如果你使用 ``distinct()``，要小心按相关模型排序。同样，当同时使"
"用 ``distinct()`` 和 :meth:`values()` 时，在按 :meth:`values()` 调用中没有的"
"字段排序时要小心。"

msgid ""
"On PostgreSQL only, you can pass positional arguments (``*fields``) in order "
"to specify the names of fields to which the ``DISTINCT`` should apply. This "
"translates to a ``SELECT DISTINCT ON`` SQL query. Here's the difference. For "
"a normal ``distinct()`` call, the database compares *each* field in each row "
"when determining which rows are distinct. For a ``distinct()`` call with "
"specified field names, the database will only compare the specified field "
"names."
msgstr ""
"仅在 PostgreSQL 上，你可以传递位置参数（``*fields``），以指定 ``DISTINCT`` 应"
"适用的字段名称。这相当于一个 ``SELECT DISTINCT ON`` 的 SQL 查询。这其中的区别"
"是，对于普通的 ``distinct()`` 调用，数据库在确定哪些行是不同的时候，会比较每"
"行中的 *每个* 字段。对于带有指定字段名的 ``distinct()`` 调用，数据库将只比较"
"指定的字段名。"

msgid ""
"When you specify field names, you *must* provide an ``order_by()`` in the "
"``QuerySet``, and the fields in ``order_by()`` must start with the fields in "
"``distinct()``, in the same order."
msgstr ""
"当你指定字段名时，你 *必须* 在 ``QuerySet`` 中提供一个 ``order_by()``，而且 "
"``order_by()`` 中的字段必须以 ``distinct()`` 中的字段开始，顺序相同。"

msgid ""
"For example, ``SELECT DISTINCT ON (a)`` gives you the first row for each "
"value in column ``a``. If you don't specify an order, you'll get some "
"arbitrary row."
msgstr ""
"例如，``SELECT DISTINCT ON (a)`` 给出了列 ``a`` 中每个值的第一行。如果你不指"
"定顺序，你会得到一些任意的行。"

msgid "Examples (those after the first will only work on PostgreSQL):"
msgstr ""

msgid ""
"Keep in mind that :meth:`order_by` uses any default related model ordering "
"that has been defined. You might have to explicitly order by the relation "
"``_id`` or referenced field to make sure the ``DISTINCT ON`` expressions "
"match those at the beginning of the ``ORDER BY`` clause. For example, if the "
"``Blog`` model defined an :attr:`~django.db.models.Options.ordering` by "
"``name``::"
msgstr ""
"请记住 :meth:`order_by` 使用任何已经定义的默认相关模型排序。你可能必须明确地"
"按关系 ``_id`` 或引用字段排序，以确保 ``DISTINCT ON`` 表达式与 ``ORDER BY`` "
"子句开头的表达式匹配。例如，如果 ``Blog`` 模型定义了一个通过 ``name`` 进行 :"
"attr:`~django.db.models.Options. ordering`："

msgid ""
"...wouldn't work because the query would be ordered by ``blog__name`` thus "
"mismatching the ``DISTINCT ON`` expression. You'd have to explicitly order "
"by the relation ``_id`` field (``blog_id`` in this case) or the referenced "
"one (``blog__pk``) to make sure both expressions match."
msgstr ""
"...这是不可行的，因为查询将按 ``blog__name`` 排序，从而与 ``DISTINCT ON`` 表"
"达式不匹配。你必须明确地按关系 ``_id`` 字段（本例中为 ``blog_id``）或被引用的"
"字段（``blog__pk``）排序，以确保两个表达式匹配。"

msgid "``values()``"
msgstr "``values()``"

msgid ""
"Returns a ``QuerySet`` that returns dictionaries, rather than model "
"instances, when used as an iterable."
msgstr "返回一个 ``QuerySet``，当用作可迭代对象时，返回字典，而不是模型实例。"

msgid ""
"Each of those dictionaries represents an object, with the keys corresponding "
"to the attribute names of model objects."
msgstr "其中每一个字典都代表一个对象，键与模型对象的属性名相对应。"

msgid ""
"This example compares the dictionaries of ``values()`` with the normal model "
"objects:"
msgstr ""

msgid ""
"The ``values()`` method takes optional positional arguments, ``*fields``, "
"which specify field names to which the ``SELECT`` should be limited. If you "
"specify the fields, each dictionary will contain only the field keys/values "
"for the fields you specify. If you don't specify the fields, each dictionary "
"will contain a key and value for every field in the database table."
msgstr ""
"``values()`` 方法接受可选的位置参数 ``*fields``，它指定了 ``SELECT`` 应该被限"
"制的字段名。如果你指定了字段，每个字典将只包含你指定字段的字段键／值。如果不"
"指定字段，每个字典将包含数据库表中每个字段的键和值。"

msgid ""
"The ``values()`` method also takes optional keyword arguments, "
"``**expressions``, which are passed through to :meth:`annotate`:"
msgstr ""

msgid ""
"You can use built-in and :doc:`custom lookups </howto/custom-lookups>` in "
"ordering. For example:"
msgstr ""

msgid ""
"An aggregate within a ``values()`` clause is applied before other arguments "
"within the same ``values()`` clause. If you need to group by another value, "
"add it to an earlier ``values()`` clause instead. For example:"
msgstr ""

msgid "A few subtleties that are worth mentioning:"
msgstr "有几个微妙的地方值得一提："

msgid ""
"If you have a field called ``foo`` that is a :class:`~django.db.models."
"ForeignKey`, the default ``values()`` call will return a dictionary key "
"called ``foo_id``, since this is the name of the hidden model attribute that "
"stores the actual value (the ``foo`` attribute refers to the related model). "
"When you are calling ``values()`` and passing in field names, you can pass "
"in either ``foo`` or ``foo_id`` and you will get back the same thing (the "
"dictionary key will match the field name you passed in)."
msgstr ""
"如果你有一个名为 ``foo`` 的字段是一个 :class:`~django.db.models.ForeignKey`，"
"默认的 ``values()`` 调用将返回一个名为 ``foo_id`` 的字典键，因为这是存储实际"
"值的隐藏模型属性的名称（``foo`` 属性指的是相关模型）。当你调用 ``values()`` "
"并传递字段名时，你可以传递 ``foo`` 或 ``foo_id``，你将得到同样的东西（字典键"
"将与你传递的字段名匹配）。"

msgid ""
"When using ``values()`` together with :meth:`distinct()`, be aware that "
"ordering can affect the results. See the note in :meth:`distinct` for "
"details."
msgstr ""
"当使用 ``values()`` 与 :meth:`distinct()` 一起使用时，请注意排序会影响结果。"
"详见 :meth:`distinct` 中的说明。"

msgid ""
"If you use a ``values()`` clause after an :meth:`extra()` call, any fields "
"defined by a ``select`` argument in the :meth:`extra()` must be explicitly "
"included in the ``values()`` call. Any :meth:`extra()` call made after a "
"``values()`` call will have its extra selected fields ignored."
msgstr ""
"如果在 :meth:`extra()` 调用之后使用 ``values()`` 子句，则 :meth:`extra()` 中"
"的 ``select`` 参数所定义的任何字段必须明确地包含在 ``values()`` 调用中。任何"
"在 ``values()`` 调用之后进行的 :meth:`extra()` 调用将忽略其额外选择的字段。"

msgid ""
"Calling :meth:`only()` and :meth:`defer()` after ``values()`` doesn't make "
"sense, so doing so will raise a ``TypeError``."
msgstr ""
"在 ``values()`` 之后调用 :meth:`only()` 和 :meth:`defer()` 是没有意义的，这样"
"做会引发 ``TypeError``。"

msgid ""
"Combining transforms and aggregates requires the use of two :meth:`annotate` "
"calls, either explicitly or as keyword arguments to :meth:`values`. As "
"above, if the transform has been registered on the relevant field type the "
"first :meth:`annotate` can be omitted, thus the following examples are "
"equivalent:"
msgstr ""

msgid ""
"It is useful when you know you're only going to need values from a small "
"number of the available fields and you won't need the functionality of a "
"model instance object. It's more efficient to select only the fields you "
"need to use."
msgstr ""
"当你知道你只需要一小部分可用字段的值，而且你不需要模型实例对象的功能时，它就"
"很有用。只选择你需要使用的字段会更高效。"

msgid ""
"Finally, note that you can call ``filter()``, ``order_by()``, etc. after the "
"``values()`` call, that means that these two calls are identical::"
msgstr ""
"最后要注意的是，你可以在调用 ``values()`` 之后调用 ``filter()``、"
"``order_by()`` 等，也就是说这两个调用是相同的："

msgid ""
"The people who made Django prefer to put all the SQL-affecting methods "
"first, followed (optionally) by any output-affecting methods (such as "
"``values()``), but it doesn't really matter. This is your chance to really "
"flaunt your individualism."
msgstr ""
"制作 Django 的人喜欢把所有影响 SQL 的方法放在前面，后面（可选的）是任何影响输"
"出的方法（比如 ``values()``），但这并不重要。这是你真正炫耀自己个性的机会。"

msgid ""
"You can also refer to fields on related models with reverse relations "
"through ``OneToOneField``, ``ForeignKey`` and ``ManyToManyField`` attributes:"
msgstr ""

msgid ""
"Because :class:`~django.db.models.ManyToManyField` attributes and reverse "
"relations can have multiple related rows, including these can have a "
"multiplier effect on the size of your result set. This will be especially "
"pronounced if you include multiple such fields in your ``values()`` query, "
"in which case all possible combinations will be returned."
msgstr ""
"因为 :class:`~django.db.models.ManyToManyField` 属性和逆向关系可以有多条相关"
"的记录，包括这些可以对你的结果集的大小产生倍增效应。如果你在你的 "
"``values()`` 查询中包含了多个这样的字段，这一点会特别明显，在这种情况下，所有"
"可能的组合都会被返回。"

msgid "Special values for ``JSONField`` on SQLite"
msgstr ""

msgid ""
"Due to the way the ``JSON_EXTRACT`` and ``JSON_TYPE`` SQL functions are "
"implemented on SQLite, and lack of the ``BOOLEAN`` data type, ``values()`` "
"will return ``True``, ``False``, and ``None`` instead of ``\"true\"``, "
"``\"false\"``, and ``\"null\"`` strings for :class:`~django.db.models."
"JSONField` key transforms."
msgstr ""

msgid "``values_list()``"
msgstr "``values_list()``"

msgid ""
"This is similar to ``values()`` except that instead of returning "
"dictionaries, it returns tuples when iterated over. Each tuple contains the "
"value from the respective field or expression passed into the "
"``values_list()`` call — so the first item is the first field, etc. For "
"example:"
msgstr ""

msgid ""
"If you only pass in a single field, you can also pass in the ``flat`` "
"parameter. If ``True``, this will mean the returned results are single "
"values, rather than one-tuples. An example should make the difference "
"clearer:"
msgstr ""

msgid "It is an error to pass in ``flat`` when there is more than one field."
msgstr "当有多个字段时，传入 ``flat`` 是错误的。"

msgid ""
"You can pass ``named=True`` to get results as a :func:`~python:collections."
"namedtuple`:"
msgstr ""

msgid ""
"Using a named tuple may make use of the results more readable, at the "
"expense of a small performance penalty for transforming the results into a "
"named tuple."
msgstr ""
"使用命名元组可能会使使用结果更易读，但代价是将结果转化为命名元组时要付出很小"
"的性能代价。"

msgid ""
"If you don't pass any values to ``values_list()``, it will return all the "
"fields in the model, in the order they were declared."
msgstr ""
"如果你不向 ``values_list()`` 传递任何值，它将按照声明的顺序返回模型中的所有字"
"段。"

msgid ""
"A common need is to get a specific field value of a certain model instance. "
"To achieve that, use ``values_list()`` followed by a ``get()`` call:"
msgstr ""

msgid ""
"``values()`` and ``values_list()`` are both intended as optimizations for a "
"specific use case: retrieving a subset of data without the overhead of "
"creating a model instance. This metaphor falls apart when dealing with many-"
"to-many and other multivalued relations (such as the one-to-many relation of "
"a reverse foreign key) because the \"one row, one object\" assumption "
"doesn't hold."
msgstr ""
"``values()`` 和 ``values_list()`` 都是针对特定用例的优化：检索数据的子集，而"
"不需要创建一个模型实例的开销。当处理多对多和其他多值关系（如反向外键的一对多"
"关系）时，这个隐喻就失效了，因为“一行一对象”的假设不成立。"

msgid ""
"For example, notice the behavior when querying across a :class:`~django.db."
"models.ManyToManyField`:"
msgstr ""

msgid ""
"Authors with multiple entries appear multiple times and authors without any "
"entries have ``None`` for the entry headline."
msgstr "有多个条目的作者出现多次，没有任何条目的作者的条目标题为 ``None``。"

msgid ""
"Similarly, when querying a reverse foreign key, ``None`` appears for entries "
"not having any author:"
msgstr ""

msgid ""
"Due to the way the ``JSON_EXTRACT`` and ``JSON_TYPE`` SQL functions are "
"implemented on SQLite, and lack of the ``BOOLEAN`` data type, "
"``values_list()`` will return ``True``, ``False``, and ``None`` instead of "
"``\"true\"``, ``\"false\"``, and ``\"null\"`` strings for :class:`~django.db."
"models.JSONField` key transforms."
msgstr ""

msgid "``dates()``"
msgstr "``dates()``"

msgid ""
"Returns a ``QuerySet`` that evaluates to a list of :class:`datetime.date` "
"objects representing all available dates of a particular kind within the "
"contents of the ``QuerySet``."
msgstr ""
"返回一个 ``QuerySet``，它的值是一个 :class:`datetime.date` 对象的列表，代表 "
"``QuerySet`` 内容中所有可用的特定日期。"

msgid ""
"``field`` should be the name of a ``DateField`` of your model. ``kind`` "
"should be either ``\"year\"``, ``\"month\"``, ``\"week\"``, or ``\"day\"``. "
"Each :class:`datetime.date` object in the result list is \"truncated\" to "
"the given ``type``."
msgstr ""
"``field`` 应该是你的模型的 ``DateField`` 的名称。``kind`` 应该是"
"``\"year\"``、``\"month\"``、``\"week\"`` 或 ``\"day\"``。结果列表中的每个 :"
"class:`datetime.date` 对象都被“截断”为给定的` `type``。"

msgid "``\"year\"`` returns a list of all distinct year values for the field."
msgstr "``\"year\"`` 返回字段的所有不同年份值的列表。"

msgid ""
"``\"month\"`` returns a list of all distinct year/month values for the field."
msgstr "``\"month\"`` 返回该字段所有不同年／月值的列表。"

msgid ""
"``\"week\"`` returns a list of all distinct year/week values for the field. "
"All dates will be a Monday."
msgstr ""
"``\"week\"`` 返回该字段的所有不同年份／星期值的列表。所有日期都是星期一。"

msgid ""
"``\"day\"`` returns a list of all distinct year/month/day values for the "
"field."
msgstr "``\"day\"`` 返回该字段的所有不同年／月／日值的列表。"

msgid ""
"``order``, which defaults to ``'ASC'``, should be either ``'ASC'`` or "
"``'DESC'``. This specifies how to order the results."
msgstr ""
"``order``，默认为 ``'ASC'``，应该是 ``'ASC'`` 或 ``'DESC'``。这指定了如何对结"
"果进行排序。"

msgid "``datetimes()``"
msgstr "``datetimes()``"

msgid ""
"Returns a ``QuerySet`` that evaluates to a list of :class:`datetime."
"datetime` objects representing all available dates of a particular kind "
"within the contents of the ``QuerySet``."
msgstr ""
"返回一个 ``QuerySet``，它的值是一个 :class:`datetime.datetime` 对象的列表，代"
"表 ``QuerySet`` 内容中所有可用的特定日期。"

msgid "``field_name`` should be the name of a ``DateTimeField`` of your model."
msgstr "``field_name`` 应该是你的模型中 ``DateTimeField`` 的名称。"

msgid ""
"``kind`` should be either ``\"year\"``, ``\"month\"``, ``\"week\"``, "
"``\"day\"``, ``\"hour\"``, ``\"minute\"``, or ``\"second\"``. Each :class:"
"`datetime.datetime` object in the result list is \"truncated\" to the given "
"``type``."
msgstr ""
"``kind`` 应该是 ``\"year\"``、``\"month\"``、``\"week\"``、``\"day\"``、"
"``\"hour\"``、``\"minute\"`` 或 ``\"second\"``。结果列表中的每个 :class:"
"`datetime.datetime` 对象都被“截断”为给定的 ``type``。"

msgid ""
"``tzinfo`` defines the time zone to which datetimes are converted prior to "
"truncation. Indeed, a given datetime has different representations depending "
"on the time zone in use. This parameter must be a :class:`datetime.tzinfo` "
"object. If it's ``None``, Django uses the :ref:`current time zone <default-"
"current-time-zone>`. It has no effect when :setting:`USE_TZ` is ``False``."
msgstr ""
"``tzinfo`` 定义了在截断之前将日期时间转换为的时区。事实上，一个给定的日期时间"
"根据使用的时区有不同的表示方式。这个参数必须是一个 :class:`datetime.tzinfo` "
"对象。如果是 ``None``，Django 会使用 :ref:`current time zone <default-"
"current-time-zone>`。当 :setting:`USE_TZ` 为 ``False`` 时，它没有效果。"

msgid ""
"``is_dst`` indicates whether or not ``pytz`` should interpret nonexistent "
"and ambiguous datetimes in daylight saving time. By default (when "
"``is_dst=None``), ``pytz`` raises an exception for such datetimes."
msgstr ""
"``is_dst`` 表示 ``pytz`` 是否应该解释夏令时中不存在的和含糊不清的日期。默认情"
"况下（当 ``is_dst=None``），``pytz`` 会对这种日期时间产生异常。"

msgid ""
"This function performs time zone conversions directly in the database. As a "
"consequence, your database must be able to interpret the value of ``tzinfo."
"tzname(None)``. This translates into the following requirements:"
msgstr ""
"这个函数直接在数据库中执行时区转换。因此，你的数据库必须能够解释 ``tzinfo."
"tzname(None)`` 的值。这就转化为以下要求："

msgid "SQLite: no requirements. Conversions are performed in Python."
msgstr "SQLite：没有要求。转换是在 Python 中进行的。"

msgid "PostgreSQL: no requirements (see `Time Zones`_)."
msgstr "PostgreSQL：无要求（见 `Time Zones`_ ）。"

msgid "Oracle: no requirements (see `Choosing a Time Zone File`_)."
msgstr "Oracle：无要求（见 `Choosing a Time Zone File`_ ）。"

msgid "MySQL: load the time zone tables with `mysql_tzinfo_to_sql`_."
msgstr "MySQL：用 `mysql_tzinfo_to_sql`_ 加载时区表。"

msgid "``none()``"
msgstr "``none()``"

msgid ""
"Calling ``none()`` will create a queryset that never returns any objects and "
"no query will be executed when accessing the results. A ``qs.none()`` "
"queryset is an instance of ``EmptyQuerySet``."
msgstr ""
"调用 ``none()`` 将创建一个永远不会返回任何对象的查询集，在访问结果时将不执行"
"任何查询。``qs.none()`` 查询集是 ``EmptyQuerySet`` 的一个实例。"

msgid "``all()``"
msgstr "``all()``"

msgid ""
"Returns a *copy* of the current ``QuerySet`` (or ``QuerySet`` subclass).  "
"This can be useful in situations where you might want to pass in either a "
"model manager or a ``QuerySet`` and do further filtering on the result. "
"After calling ``all()`` on either object, you'll definitely have a "
"``QuerySet`` to work with."
msgstr ""
"返回当前 ``QuerySet`` （或 ``QuerySet`` 子类）的 *副本*。 这在以下情况下很有"
"用：你可能想传入一个模型管理器或一个 ``QuerySet``，并对结果做进一步过滤。在任"
"何一个对象上调用 ``all()`` 后，你肯定会有一个 ``QuerySet`` 可以使用。"

msgid ""
"When a ``QuerySet`` is :ref:`evaluated <when-querysets-are-evaluated>`, it "
"typically caches its results. If the data in the database might have changed "
"since a ``QuerySet`` was evaluated, you can get updated results for the same "
"query by calling ``all()`` on a previously evaluated ``QuerySet``."
msgstr ""
"当一个 ``QuerySet`` 被 :ref:`执行 <when-querysets-are-evaluated>` 时，它通常"
"会缓存其结果。如果数据库中的数据可能在 ``QuerySet`` 被评估后发生了变化，你可"
"以通过调用 ``all()`` 对以前执行过的 ``QuerySet`` 进行更新。"

msgid "``union()``"
msgstr "``union()``"

msgid ""
"Uses SQL's ``UNION`` operator to combine the results of two or more "
"``QuerySet``\\s. For example:"
msgstr ""
"使用 SQL 的 ``UNION`` 操作符来组合两个或多个 ``QuerySet`` 的结果。例如："

msgid ""
"The ``UNION`` operator selects only distinct values by default. To allow "
"duplicate values, use the ``all=True`` argument."
msgstr ""
"``UNION`` 操作符默认只选择不同的值。要允许重复的值，使用 ``all=True`` 参数。"

msgid ""
"``union()``, ``intersection()``, and ``difference()`` return model instances "
"of the type of the first ``QuerySet`` even if the arguments are "
"``QuerySet``\\s of other models. Passing different models works as long as "
"the ``SELECT`` list is the same in all ``QuerySet``\\s (at least the types, "
"the names don't matter as long as the types are in the same order). In such "
"cases, you must use the column names from the first ``QuerySet`` in "
"``QuerySet`` methods applied to the resulting ``QuerySet``. For example:"
msgstr ""

msgid ""
"In addition, only ``LIMIT``, ``OFFSET``, ``COUNT(*)``, ``ORDER BY``, and "
"specifying columns (i.e. slicing, :meth:`count`, :meth:`exists`, :meth:"
"`order_by`, and :meth:`values()`/:meth:`values_list()`) are allowed on the "
"resulting ``QuerySet``. Further, databases place restrictions on what "
"operations are allowed in the combined queries. For example, most databases "
"don't allow ``LIMIT`` or ``OFFSET`` in the combined queries."
msgstr ""
"此外，只有 ``LIMIT``、``OFFSET``、``COUNT(*)``、``ORDER BY`` 和指定列（即切"
"片、:meth:`count`、:meth:`exists`、:meth:`order_by` 与 :meth:`values()` ／ :"
"meth:`values_list()` ）允许在结果 ``QuerySet`` 中使用。此外，数据库对组合查询"
"中允许的操作也有限制。例如，大多数数据库不允许在组合查询中使用 ``LIMIT`` 或 "
"``OFFSET``。"

msgid "``intersection()``"
msgstr "``intersection()``"

msgid ""
"Uses SQL's ``INTERSECT`` operator to return the shared elements of two or "
"more ``QuerySet``\\s. For example:"
msgstr ""
"使用 SQL 的 ``INTERSECT`` 操作符来返回两个或多个 ``QuerySet`` 的共享元素。例"
"如："

msgid "See :meth:`union` for some restrictions."
msgstr "一些限制见 :meth:`union`。"

msgid "``difference()``"
msgstr "``difference()``"

msgid ""
"Uses SQL's ``EXCEPT`` operator to keep only elements present in the "
"``QuerySet`` but not in some other ``QuerySet``\\s. For example:"
msgstr ""

msgid "``select_related()``"
msgstr "``select_related()``"

msgid ""
"Returns a ``QuerySet`` that will \"follow\" foreign-key relationships, "
"selecting additional related-object data when it executes its query. This is "
"a performance booster which results in a single more complex query but means "
"later use of foreign-key relationships won't require database queries."
msgstr ""
"返回一个 ``QuerySet``，它将“跟随”外键关系，在执行查询时选择额外的相关对象数"
"据。这是一个性能提升器，它导致一个更复杂的单一查询，但意味着以后使用外键关系"
"将不需要数据库查询。"

msgid ""
"The following examples illustrate the difference between plain lookups and "
"``select_related()`` lookups. Here's standard lookup::"
msgstr ""
"下面的例子说明了普通查找和 ``select_related()`` 查找之间的区别。下面是标准的"
"查询："

msgid "And here's ``select_related`` lookup::"
msgstr "这里是 ``select_related`` 查找："

msgid "You can use ``select_related()`` with any queryset of objects::"
msgstr "你可以使用 ``select_related()`` 来处理任何对象的查询集："

msgid ""
"The order of ``filter()`` and ``select_related()`` chaining isn't important. "
"These querysets are equivalent::"
msgstr ""
"``filter()`` 和 ``select_related()`` 的顺序并不重要。这些查询集相当于："

msgid ""
"You can follow foreign keys in a similar way to querying them. If you have "
"the following models::"
msgstr "你可以用类似于查询外键的方式来跟踪外键。如果你有以下模型："

msgid ""
"... then a call to ``Book.objects.select_related('author__hometown')."
"get(id=4)`` will cache the related ``Person`` *and* the related ``City``::"
msgstr ""
"...然后调用 ``Book.objects.select_related('author__hometown').get(id=4)`` 将"
"缓存相关的 ``Person`` *和* 相关的 ``City``："

msgid ""
"You can refer to any :class:`~django.db.models.ForeignKey` or :class:"
"`~django.db.models.OneToOneField` relation in the list of fields passed to "
"``select_related()``."
msgstr ""
"你可以在传递给 ``select_related()`` 的字段列表中引用任何 :class:`~django.db."
"models.ForeignKey` 或 :class:`~django.db.models.OneToOneField` 关系。"

msgid ""
"You can also refer to the reverse direction of a :class:`~django.db.models."
"OneToOneField` in the list of fields passed to ``select_related`` — that is, "
"you can traverse a :class:`~django.db.models.OneToOneField` back to the "
"object on which the field is defined. Instead of specifying the field name, "
"use the :attr:`related_name <django.db.models.ForeignKey.related_name>` for "
"the field on the related object."
msgstr ""
"你也可以在传递给 ``select_related`` 的字段列表中引用一个 :class:`~django.db."
"models.OneToOneField` 的反方向——也就是说，你可以遍历一个 :class:`~django.db."
"models.OneToOneField` 回到定义字段的对象上。不指定字段名，而是使用 :attr:"
"`related_name <django.db.models.ForeignKey.related_name>` 作为相关对象上的字"
"段。"

msgid ""
"There may be some situations where you wish to call ``select_related()`` "
"with a lot of related objects, or where you don't know all of the relations. "
"In these cases it is possible to call ``select_related()`` with no "
"arguments. This will follow all non-null foreign keys it can find - nullable "
"foreign keys must be specified. This is not recommended in most cases as it "
"is likely to make the underlying query more complex, and return more data, "
"than is actually needed."
msgstr ""
"在某些情况下，你可能希望调用 ``select_related()`` 来处理很多相关对象，或者你"
"不知道所有的关系。在这些情况下，我们可以调用 ``select_related()``，但不使用参"
"数。这将跟随它能找到的所有非空的外键——必须指定可空的外键。在大多数情况下，不"
"建议这样做，因为这可能会使基础查询变得更加复杂，并返回比实际需要的更多数据。"

msgid ""
"If you need to clear the list of related fields added by past calls of "
"``select_related`` on a ``QuerySet``, you can pass ``None`` as a parameter:"
msgstr ""

msgid ""
"Chaining ``select_related`` calls works in a similar way to other methods - "
"that is that ``select_related('foo', 'bar')`` is equivalent to "
"``select_related('foo').select_related('bar')``."
msgstr ""
"链式调用 ``select_related`` 的工作方式与其他方法类似，即 "
"``select_related('foo', 'bar')`` 等同于 ``select_related('foo')."
"select_related('bar')``。"

msgid "``prefetch_related()``"
msgstr "``prefetch_related()``"

msgid ""
"Returns a ``QuerySet`` that will automatically retrieve, in a single batch, "
"related objects for each of the specified lookups."
msgstr ""
"返回一个 ``QuerySet``，它将在一个批次中自动检索每个指定查询的相关对象。"

msgid ""
"This has a similar purpose to ``select_related``, in that both are designed "
"to stop the deluge of database queries that is caused by accessing related "
"objects, but the strategy is quite different."
msgstr ""
"这与 ``select_related`` 有类似的目的，二者都是为了阻止因访问相关对象而引起的"
"数据库查询潮，但策略却完全不同。"

msgid ""
"``select_related`` works by creating an SQL join and including the fields of "
"the related object in the ``SELECT`` statement. For this reason, "
"``select_related`` gets the related objects in the same database query. "
"However, to avoid the much larger result set that would result from joining "
"across a 'many' relationship, ``select_related`` is limited to single-valued "
"relationships - foreign key and one-to-one."
msgstr ""
"``select_related`` 的工作方式是创建一个 SQL 连接，并在 ``SELECT`` 语句中包含"
"相关对象的字段。出于这个原因，``select_related`` 在同一个数据库查询中得到相关"
"对象。然而，为了避免因跨越“many”关系进行连接而产生更大的结果集，"
"``select_related`` 仅限于单值关系——外键和一对一。"

msgid ""
"``prefetch_related``, on the other hand, does a separate lookup for each "
"relationship, and does the 'joining' in Python. This allows it to prefetch "
"many-to-many, many-to-one, and :class:`~django.contrib.contenttypes.fields."
"GenericRelation` objects which cannot be done using ``select_related``, in "
"addition to the foreign key and one-to-one relationships that are supported "
"by ``select_related``. It also supports prefetching of :class:`~django."
"contrib.contenttypes.fields.GenericForeignKey`, however, it must be "
"restricted to a homogeneous set of results. For example, prefetching objects "
"referenced by a ``GenericForeignKey`` is only supported if the query is "
"restricted to one ``ContentType``."
msgstr ""

msgid "For example, suppose you have these models::"
msgstr "例如，假设你有这些模型："

msgid "and run:"
msgstr ""

msgid ""
"The problem with this is that every time ``Pizza.__str__()`` asks for ``self."
"toppings.all()`` it has to query the database, so ``Pizza.objects.all()`` "
"will run a query on the Toppings table for **every** item in the Pizza "
"``QuerySet``."
msgstr ""
"这样做的问题是，每次 ``Pizza.__str__()`` 要求 ``self.toppings.all()`` 都要查"
"询数据库，所以 ``Pizza.objects.all()`` 会在 Toppings 表上对 Pizza "
"``QuerySet`` 中的 *每* 项进行查询。"

msgid "We can reduce to just two queries using ``prefetch_related``:"
msgstr "我们可以使用 ``prefetch_related`` 减少到只有两个查询："

msgid ""
"This implies a ``self.toppings.all()`` for each ``Pizza``; now each time "
"``self.toppings.all()`` is called, instead of having to go to the database "
"for the items, it will find them in a prefetched ``QuerySet`` cache that was "
"populated in a single query."
msgstr ""
"这意味着每一个 ``Pizza`` 都有一个 ``self.toppings.all()``；现在每次调用 "
"``self.toppings.all()`` 时，不必再去数据库中寻找这些项目，而是在一次查询中填"
"充的预设 ``QuerySet`` 缓存中找到它们。"

msgid ""
"That is, all the relevant toppings will have been fetched in a single query, "
"and used to make ``QuerySets`` that have a pre-filled cache of the relevant "
"results; these ``QuerySets`` are then used in the ``self.toppings.all()`` "
"calls."
msgstr ""
"也就是说，所有相关的顶点都将在一次查询中被获取，并被用来制作 ``QuerySets``，"
"其中有一个预先填充的相关结果的缓存；然后这些 ``QuerySets`` 被用于 ``self."
"toppings.all()`` 的调用。"

msgid ""
"The additional queries in ``prefetch_related()`` are executed after the "
"``QuerySet`` has begun to be evaluated and the primary query has been "
"executed."
msgstr ""
"``prefetch_related()`` 中的附加查询是在 ``QuerySet`` 开始执行和主要查询被执行"
"后执行的。"

msgid ""
"If you have an iterable of model instances, you can prefetch related "
"attributes on those instances using the :func:`~django.db.models."
"prefetch_related_objects` function."
msgstr ""
"如果你有一个作为模型实例的可迭代对象，你可以使用 :func:`~django.db.models."
"prefetch_related_objects` 函数在这些实例上预取相关属性。"

msgid ""
"Note that the result cache of the primary ``QuerySet`` and all specified "
"related objects will then be fully loaded into memory. This changes the "
"typical behavior of ``QuerySets``, which normally try to avoid loading all "
"objects into memory before they are needed, even after a query has been "
"executed in the database."
msgstr ""
"请注意，主 ``QuerySet`` 的结果缓存和所有指定的相关对象将被完全加载到内存中。"
"这改变了 ``QuerySets`` 的典型行为，它通常试图避免在需要之前将所有对象加载到内"
"存中，即使在数据库中执行了一个查询之后。"

msgid ""
"Remember that, as always with ``QuerySets``, any subsequent chained methods "
"which imply a different database query will ignore previously cached "
"results, and retrieve data using a fresh database query. So, if you write "
"the following:"
msgstr ""
"请记住，与 ``QuerySets`` 一样，任何后续的链式方法，如果意味着不同的数据库查"
"询，将忽略之前缓存的结果，并使用新的数据库查询来检索数据。所以，如果你写了以"
"下内容："

msgid ""
"...then the fact that ``pizza.toppings.all()`` has been prefetched will not "
"help you. The ``prefetch_related('toppings')`` implied ``pizza.toppings."
"all()``, but ``pizza.toppings.filter()`` is a new and different query. The "
"prefetched cache can't help here; in fact it hurts performance, since you "
"have done a database query that you haven't used. So use this feature with "
"caution!"
msgstr ""
"...那么 ``pizza.toppings.all()`` 已经被预取的事实对你没有帮助。"
"``prefetch_related('toppings')`` 意味着 ``pizza.toppings.all()``，但 ``pizza."
"toppings.filter()`` 是一个新的、不同的查询。预设缓存在这里帮不上忙，事实上它"
"损害了性能，因为你做了一个你没有使用过的数据库查询。所以要谨慎使用这个功能！"

msgid ""
"Also, if you call the database-altering methods :meth:`~django.db.models."
"fields.related.RelatedManager.add`, :meth:`~django.db.models.fields.related."
"RelatedManager.remove`, :meth:`~django.db.models.fields.related."
"RelatedManager.clear` or :meth:`~django.db.models.fields.related."
"RelatedManager.set`, on :class:`related managers<django.db.models.fields."
"related.RelatedManager>`, any prefetched cache for the relation will be "
"cleared."
msgstr ""
"另外，如果你调用了 :meth:`~django.db.models.field.related.RelatedManager."
"add`、:meth:`~django.db.models.field.related.RelatedManager.remove`、:meth:"
"`~django.db.models.field.related. RelatedManager.clear` 或 :meth:`~django.db."
"models.field.related.RelatedManager.set`，在 :class:`related managers<django."
"db.models.field.related.RelatedManager>` 上，关系的任何预取缓存将被清除。"

msgid ""
"You can also use the normal join syntax to do related fields of related "
"fields. Suppose we have an additional model to the example above::"
msgstr ""
"你也可以用普通的 join 语法来做相关字段的相关字段。假设我们在上面的例子中多了"
"一个模型："

msgid "The following are all legal:"
msgstr "以下都是合法的："

msgid ""
"This will prefetch all pizzas belonging to restaurants, and all toppings "
"belonging to those pizzas. This will result in a total of 3 database queries "
"- one for the restaurants, one for the pizzas, and one for the toppings."
msgstr ""
"这将预取所有属于餐馆的披萨，以及所有属于这些披萨的配料。这将导致总共 3 个数据"
"库查询——一个查询餐厅，一个查询披萨，一个查询配料。"

msgid ""
"This will fetch the best pizza and all the toppings for the best pizza for "
"each restaurant. This will be done in 3 database queries - one for the "
"restaurants, one for the 'best pizzas', and one for the toppings."
msgstr ""
"这将为每家餐厅获取最好的比萨饼和最好的比萨饼的所有配料。这将在 3 个数据库查询"
"中完成——一个查询餐厅，一个查询“最佳披萨”，一个查询配料。"

msgid ""
"The ``best_pizza`` relationship could also be fetched using "
"``select_related`` to reduce the query count to 2:"
msgstr ""

msgid ""
"Since the prefetch is executed after the main query (which includes the "
"joins needed by ``select_related``), it is able to detect that the "
"``best_pizza`` objects have already been fetched, and it will skip fetching "
"them again."
msgstr ""
"由于预取是在主查询之后执行的（其中包括 ``select_related`` 所需要的连接），它"
"能够检测到 ``best_pizza`` 对象已经被取走了，它将跳过再次取走它们。"

msgid ""
"Chaining ``prefetch_related`` calls will accumulate the lookups that are "
"prefetched. To clear any ``prefetch_related`` behavior, pass ``None`` as a "
"parameter:"
msgstr ""
"链式调用 ``prefetch_related`` 将累积预取的查找。要清除任何 "
"``prefetch_related`` 行为，传递 ``None`` 作为参数："

msgid ""
"One difference to note when using ``prefetch_related`` is that objects "
"created by a query can be shared between the different objects that they are "
"related to i.e. a single Python model instance can appear at more than one "
"point in the tree of objects that are returned. This will normally happen "
"with foreign key relationships. Typically this behavior will not be a "
"problem, and will in fact save both memory and CPU time."
msgstr ""
"在使用 ``prefetch_related`` 时，需要注意的一个区别是，查询创建的对象可以在与"
"其相关的不同对象之间共享，即一个 Python 模型实例可以出现在返回的对象树的多个"
"点上。这通常会发生在外键关系中。通常情况下，这种行为不会有问题，而且事实上会"
"节省内存和 CPU 时间。"

msgid ""
"While ``prefetch_related`` supports prefetching ``GenericForeignKey`` "
"relationships, the number of queries will depend on the data. Since a "
"``GenericForeignKey`` can reference data in multiple tables, one query per "
"table referenced is needed, rather than one query for all the items. There "
"could be additional queries on the ``ContentType`` table if the relevant "
"rows have not already been fetched."
msgstr ""
"虽然 ``prefetch_related`` 支持预取 ``GenericForeignKey`` 关系，但查询次数将取"
"决于数据。由于一个 ``GenericForeignKey`` 可以引用多个表中的数据，所以需要对每"
"个被引用的表进行一次查询，而不是对所有项目进行一次查询。如果还没有获取相关的"
"行，可以对 ``ContentType`` 表进行额外的查询。"

msgid ""
"``prefetch_related`` in most cases will be implemented using an SQL query "
"that uses the 'IN' operator. This means that for a large ``QuerySet`` a "
"large 'IN' clause could be generated, which, depending on the database, "
"might have performance problems of its own when it comes to parsing or "
"executing the SQL query. Always profile for your use case!"
msgstr ""
"``prefetch_related`` 在大多数情况下，将使用使用“IN”操作符的 SQL 查询来实现。"
"这意味着对于一个大的 ``QuerySet`` 可能会生成一个大的“IN”子句，这取决于数据"
"库，在解析或执行 SQL 查询时可能会有自己的性能问题。一定要针对自己的用例进行剖"
"析！"

msgid ""
"If you use ``iterator()`` to run the query, ``prefetch_related()`` calls "
"will only be observed if a value for ``chunk_size`` is provided."
msgstr ""

msgid ""
"You can use the :class:`~django.db.models.Prefetch` object to further "
"control the prefetch operation."
msgstr ""
"你可以使用 :class:`~django.db.models.Prefetch` 对象来进一步控制预取操作。"

msgid ""
"In its simplest form ``Prefetch`` is equivalent to the traditional string "
"based lookups:"
msgstr "最简单的形式 ``Prefetch`` 相当于传统的基于字符串的查找。"

msgid ""
"You can provide a custom queryset with the optional ``queryset`` argument. "
"This can be used to change the default ordering of the queryset:"
msgstr ""
"你可以用可选的 ``queryset`` 参数提供一个自定义查询集。这可以用来改变查询集的"
"默认排序。"

msgid ""
"Or to call :meth:`~django.db.models.query.QuerySet.select_related()` when "
"applicable to reduce the number of queries even further:"
msgstr ""
"或者在适用的时候调用 :meth:`~django.db.models.querySet.select_related()`，以"
"进一步减少查询次数。"

msgid ""
"You can also assign the prefetched result to a custom attribute with the "
"optional ``to_attr`` argument. The result will be stored directly in a list."
msgstr ""
"你也可以用可选的 ``to_attr`` 参数将预取结果分配给一个自定义属性。结果将直接存"
"储在一个列表中。"

msgid ""
"This allows prefetching the same relation multiple times with a different "
"``QuerySet``; for instance:"
msgstr "这允许用不同的 ``QuerySet`` 预取同一关系多次；例如："

msgid ""
"Lookups created with custom ``to_attr`` can still be traversed as usual by "
"other lookups:"
msgstr "使用自定义 ``to_attr`` 创建的查找仍然可以像往常一样被其他查找遍历。"

msgid ""
"Using ``to_attr`` is recommended when filtering down the prefetch result as "
"it is less ambiguous than storing a filtered result in the related manager's "
"cache:"
msgstr ""
"在对预取结果进行过滤时，建议使用 ``to_attr``，因为它比将过滤后的结果存储在相"
"关管理器的缓存中更不含糊。"

msgid ""
"Custom prefetching also works with single related relations like forward "
"``ForeignKey`` or ``OneToOneField``. Generally you'll want to use :meth:"
"`select_related()` for these relations, but there are a number of cases "
"where prefetching with a custom ``QuerySet`` is useful:"
msgstr ""
"自定义预取也适用于单一的相关关系，如前向 ``ForeignKey`` 或 "
"``OneToOneField``。一般来说，你会希望使用 :meth:`select_related()` 来处理这些"
"关系，但在一些情况下，使用自定义 ``QuerySet`` 进行预取是有用的。"

msgid ""
"You want to use a ``QuerySet`` that performs further prefetching on related "
"models."
msgstr "你要使用一个 ``QuerySet``，对相关模型进行进一步的预取。"

msgid "You want to prefetch only a subset of the related objects."
msgstr "你想只预取相关对象的一个子集。"

msgid ""
"You want to use performance optimization techniques like :meth:`deferred "
"fields <defer()>`:"
msgstr "你要使用性能优化技术，比如 :meth:`递延字段 <defer()>`。"

msgid ""
"When using multiple databases, ``Prefetch`` will respect your choice of "
"database. If the inner query does not specify a database, it will use the "
"database selected by the outer query. All of the following are valid:"
msgstr ""

msgid "The ordering of lookups matters."
msgstr "查询的顺序很重要。"

msgid "Take the following examples:"
msgstr "下面举例说明："

msgid ""
"This works even though it's unordered because ``'pizzas__toppings'`` already "
"contains all the needed information, therefore the second argument "
"``'pizzas'`` is actually redundant."
msgstr ""
"即使它是无序的，这也是可行的，因为 ``'pizzas__toppings'`` 已经包含了所有需要"
"的信息，因此第二个参数 ``'pizzas'`` 实际上是多余的。"

msgid ""
"This will raise a ``ValueError`` because of the attempt to redefine the "
"queryset of a previously seen lookup. Note that an implicit queryset was "
"created to traverse ``'pizzas'`` as part of the ``'pizzas__toppings'`` "
"lookup."
msgstr ""
"这将引发一个 ``ValueError``，因为它试图重新定义一个先前看到的查询的查询集。请"
"注意，一个隐式查询集被创建为遍历 ``''pizzas'`` 作为 ``''pizzas__toppings'`` "
"查询的一部分。"

msgid ""
"This will trigger an ``AttributeError`` because ``'pizza_list'`` doesn't "
"exist yet when ``'pizza_list__toppings'`` is being processed."
msgstr ""
"这将触发一个 ``AttributeError``，因为 ``'pizza_list'`` 在处理 "
"``'pizza_list__toppings'`` 时还不存在。"

msgid ""
"This consideration is not limited to the use of ``Prefetch`` objects. Some "
"advanced techniques may require that the lookups be performed in a specific "
"order to avoid creating extra queries; therefore it's recommended to always "
"carefully order ``prefetch_related`` arguments."
msgstr ""
"这种考虑不限于使用 ``Prefetch`` 对象。一些高级技术可能要求按照特定的顺序进行"
"查找，以避免产生额外的查询；因此，建议总是仔细地安排 ``prefetch_related`` 参"
"数的顺序。"

msgid "``extra()``"
msgstr "``extra()``"

msgid ""
"Sometimes, the Django query syntax by itself can't easily express a complex "
"``WHERE`` clause. For these edge cases, Django provides the ``extra()`` "
"``QuerySet`` modifier — a hook for injecting specific clauses into the SQL "
"generated by a ``QuerySet``."
msgstr ""
"有时候，Django 查询语法本身并不能很容易地表达一个复杂的 ``WHERE`` 子句。对于"
"这些边缘情况，Django 提供了 ``extra()`` ``QuerySet`` 修饰符——用于将特定的子句"
"注入到由 ``QuerySet`` 生成的 SQL 中。"

msgid "Use this method as a last resort"
msgstr "在万不得已的情况下使用这种方法"

msgid ""
"This is an old API that we aim to deprecate at some point in the future. Use "
"it only if you cannot express your query using other queryset methods. If "
"you do need to use it, please `file a ticket <https://code.djangoproject.com/"
"newticket>`_ using the `QuerySet.extra keyword <https://code.djangoproject."
"com/query?status=assigned&status=new&keywords=~QuerySet.extra>`_ with your "
"use case (please check the list of existing tickets first) so that we can "
"enhance the QuerySet API to allow removing ``extra()``. We are no longer "
"improving or fixing bugs for this method."
msgstr ""
"这是一个老的 API，我们的目标是在未来的某个时间点废弃。只有当你不能使用其他的"
"查询集方法来表达你的查询时才使用它。如果你确实需要使用它，请使用 `QuerySet."
"extra keyword <https://code.djangoproject.com/query?"
"status=assigned&status=new&keywords=~QuerySet.extra>`_ 并和你的用例（请先检查"
"现有的工单列表）一起 `file a ticket <https://code.djangoproject.com/"
"newticket>`_ ，这样我们就可以增强 QuerySet API 以允许删除 ``extra()``。我们不"
"再改进或修复该方法的错误。"

msgid "For example, this use of ``extra()``:"
msgstr ""

msgid "is equivalent to:"
msgstr ""

msgid ""
"The main benefit of using :class:`~django.db.models.expressions.RawSQL` is "
"that you can set ``output_field`` if needed. The main downside is that if "
"you refer to some table alias of the queryset in the raw SQL, then it is "
"possible that Django might change that alias (for example, when the queryset "
"is used as a subquery in yet another query)."
msgstr ""
"使用 :class:`~django.db.models.expressions.RawSQL` 的主要好处是，如果需要的"
"话，可以设置 ``output_field``。主要的缺点是，如果你在原始 SQL 中引用了查询集"
"的某个表的别名，那么 Django 有可能会改变这个别名（例如，当查询集在另一个查询"
"中被用作子查询时）。"

msgid ""
"You should be very careful whenever you use ``extra()``. Every time you use "
"it, you should escape any parameters that the user can control by using "
"``params`` in order to protect against SQL injection attacks."
msgstr ""
"每当你使用 ``extra()`` 时，你应该非常小心。每次使用它时，你应该使用 "
"``params`` 来转义任何用户可以控制的参数，以防止 SQL 注入攻击。"

msgid ""
"By definition, these extra lookups may not be portable to different database "
"engines (because you're explicitly writing SQL code) and violate the DRY "
"principle, so you should avoid them if possible."
msgstr ""
"根据定义，这些额外的查找可能无法移植到不同的数据库引擎中（因为你明确地编写了 "
"SQL 代码），并且违反了 DRY 原则，所以你应该尽可能地避免它们。"

msgid ""
"Specify one or more of ``params``, ``select``, ``where`` or ``tables``. None "
"of the arguments is required, but you should use at least one of them."
msgstr ""
"指定 ``params``、``select``、``where`` 或 ``tables`` 中的一个或多个参数。这些"
"参数都不是必须的，但你应该至少使用其中的一个。"

msgid "``select``"
msgstr "``select``"

msgid ""
"The ``select`` argument lets you put extra fields in the ``SELECT`` clause.  "
"It should be a dictionary mapping attribute names to SQL clauses to use to "
"calculate that attribute."
msgstr ""
"``select`` 参数让你在 ``SELECT`` 子句中放入额外的字段。 它应该是一个将属性名"
"映射到 SQL 子句的字典，用于计算该属性。"

msgid ""
"As a result, each ``Entry`` object will have an extra attribute, "
"``is_recent``, a boolean representing whether the entry's ``pub_date`` is "
"greater than Jan. 1, 2006."
msgstr ""
"因此，每个 ``Entry`` 对象将有一个额外的属性，``is_recent``，一个布尔值，表示"
"该条目的 ``pub_date`` 是否大于 2006 年 1 月 1 日。"

msgid ""
"Django inserts the given SQL snippet directly into the ``SELECT`` statement, "
"so the resulting SQL of the above example would be something like:"
msgstr ""
"Django 将给定的 SQL 片段直接插入到 ``SELECT`` 语句中，所以上面例子的 SQL 结果"
"将是这样的。"

msgid ""
"The next example is more advanced; it does a subquery to give each resulting "
"``Blog`` object an ``entry_count`` attribute, an integer count of associated "
"``Entry`` objects::"
msgstr ""
"下一个例子更高级；它做了一个子查询，给每个结果的 ``Blog`` 对象一个 "
"``entry_count`` 属性，一个相关 ``Entry`` 对象的整数："

msgid ""
"In this particular case, we're exploiting the fact that the query will "
"already contain the ``blog_blog`` table in its ``FROM`` clause."
msgstr ""
"在这个特殊的情况下，我们利用了这样一个事实，即查询在其 ``FROM`` 子句中已经包"
"含 ``blog_blog`` 表。"

msgid "The resulting SQL of the above example would be:"
msgstr "上述例子的 SQL 结果是："

msgid ""
"Note that the parentheses required by most database engines around "
"subqueries are not required in Django's ``select`` clauses. Also note that "
"some database backends, such as some MySQL versions, don't support "
"subqueries."
msgstr ""
"需要注意的是，大多数数据库引擎要求在子查询周围加上括号，而 Django 的 "
"``select`` 子句则不需要。还需要注意的是，一些数据库后端，比如一些 MySQL 版"
"本，不支持子查询。"

msgid ""
"In some rare cases, you might wish to pass parameters to the SQL fragments "
"in ``extra(select=...)``. For this purpose, use the ``select_params`` "
"parameter."
msgstr ""
"在一些罕见的情况下，你可能希望在 ``extra(select=...)`` 中给 SQL 片段传递参"
"数。为此，使用 ``select_params`` 参数。"

msgid "This will work, for example::"
msgstr "这样做就可以了，比如："

msgid ""
"If you need to use a literal ``%s`` inside your select string, use the "
"sequence ``%%s``."
msgstr "如果你需要在选择字符串中使用 ``%s``，请使用序列 ``%%s``。"

msgid "``where`` / ``tables``"
msgstr "``where``／``tables``"

msgid ""
"You can define explicit SQL ``WHERE`` clauses — perhaps to perform non-"
"explicit joins — by using ``where``. You can manually add tables to the SQL "
"``FROM`` clause by using ``tables``."
msgstr ""
"你可以通过使用 ``where`` 来定义明确的 SQL ``WHERE`` 子句——也许是为了执行非明"
"确的连接。你可以通过使用 ``tables`` 手动添加表到 SQL ``FROM`` 子句中。"

msgid ""
"``where`` and ``tables`` both take a list of strings. All ``where`` "
"parameters are \"AND\"ed to any other search criteria."
msgstr ""
"``where`` 和 ``tables`` 都采用一个字符串列表。所有 ``where`` 参数都与任何其他"
"搜索标准“AND”在一起。"

msgid "...translates (roughly) into the following SQL:"
msgstr "...翻译成（大致）下面的 SQL："

msgid ""
"Be careful when using the ``tables`` parameter if you're specifying tables "
"that are already used in the query. When you add extra tables via the "
"``tables`` parameter, Django assumes you want that table included an extra "
"time, if it is already included. That creates a problem, since the table "
"name will then be given an alias. If a table appears multiple times in an "
"SQL statement, the second and subsequent occurrences must use aliases so the "
"database can tell them apart. If you're referring to the extra table you "
"added in the extra ``where`` parameter this is going to cause errors."
msgstr ""
"如果使用 ``tables`` 参数时，要注意指定查询中已经使用过的表，当你通过 "
"``tables`` 参数添加额外的表时，Django 会认为你希望额外包含该表，如果已经包含"
"的话。当你通过 ``tables`` 参数添加额外的表时，Django 会认为你希望额外地包含该"
"表，如果它已经被包含了。这就会产生一个问题，因为表名会被赋予一个别名。如果一"
"个表在一条 SQL 语句中多次出现，那么第二次和后续的表必须使用别名，这样数据库才"
"能区分它们。如果你指的是你在额外的 ``where`` 参数中添加的额外表，这就会造成错"
"误。"

msgid ""
"Normally you'll only be adding extra tables that don't already appear in the "
"query. However, if the case outlined above does occur, there are a few "
"solutions. First, see if you can get by without including the extra table "
"and use the one already in the query. If that isn't possible, put your "
"``extra()`` call at the front of the queryset construction so that your "
"table is the first use of that table. Finally, if all else fails, look at "
"the query produced and rewrite your ``where`` addition to use the alias "
"given to your extra table. The alias will be the same each time you "
"construct the queryset in the same way, so you can rely upon the alias name "
"to not change."
msgstr ""
"一般情况下，你只会添加查询中还没有出现的额外表。但是，如果确实出现了上面概述"
"的情况，有几种解决办法。首先，看看是否可以不包含额外的表，而使用已经在查询中"
"出现的表。如果不可能的话，把你的 ``extra()`` 调用放在查询集构造的前面，这样你"
"的表就是那个表的第一次使用。最后，如果所有其他方法都失败了，看一下产生的查"
"询，重写你的 ``where`` 加法，使用给你的额外表的别名。每次以同样的方式构造查询"
"集时，别名都会是一样的，所以你可以信赖别名不会改变。"

msgid "``order_by``"
msgstr "``order_by``"

msgid ""
"If you need to order the resulting queryset using some of the new fields or "
"tables you have included via ``extra()`` use the ``order_by`` parameter to "
"``extra()`` and pass in a sequence of strings. These strings should either "
"be model fields (as in the normal :meth:`order_by()` method on querysets), "
"of the form ``table_name.column_name`` or an alias for a column that you "
"specified in the ``select`` parameter to ``extra()``."
msgstr ""
"如果你需要使用你通过 ``extra()`` 所包含的一些新字段或表来对结果查询集进行排"
"序，请使用 ``extra()`` 的 ``order_by`` 参数，并传入一串字符串。这些字符串应该"
"是模型字段（就像在查询集上的普通 :meth:`order_by()` 方法一样），形式为 "
"``table_name.column_name`` 或者是你在 ``extra()`` 的 ``select`` 参数中指定的"
"列的别名。"

msgid ""
"This would sort all the items for which ``is_recent`` is true to the front "
"of the result set (``True`` sorts before ``False`` in a descending ordering)."
msgstr ""
"这将把 ``is_recent`` 为真的所有项目排在结果集的前面（``True`` 按降序排列在 "
"``False`` 之前）。"

msgid ""
"This shows, by the way, that you can make multiple calls to ``extra()`` and "
"it will behave as you expect (adding new constraints each time)."
msgstr ""
"顺便说一下，这表明你可以多次调用 ``extra()``，它将按照你的期望行事（每次增加"
"新的约束）。"

msgid "``params``"
msgstr "``params``"

msgid ""
"The ``where`` parameter described above may use standard Python database "
"string placeholders — ``'%s'`` to indicate parameters the database engine "
"should automatically quote. The ``params`` argument is a list of any extra "
"parameters to be substituted."
msgstr ""
"上面描述的 ``where`` 参数可以使用标准的 Python 数据库字符串占位符——``'%s'`` "
"来表示数据库引擎应该自动引用的参数。``params`` 参数是一个要被替换的额外参数的"
"列表。"

msgid ""
"Always use ``params`` instead of embedding values directly into ``where`` "
"because ``params`` will ensure values are quoted correctly according to your "
"particular backend. For example, quotes will be escaped correctly."
msgstr ""
"始终使用 ``params`` 而不是直接将值嵌入 ``where``，因为 ``params`` 将确保根据"
"你的特定后台正确引用值。例如，引号将被正确转义。"

msgid "Bad::"
msgstr "不好的："

msgid "Good::"
msgstr "正确的："

msgid ""
"If you are performing queries on MySQL, note that MySQL's silent type "
"coercion may cause unexpected results when mixing types. If you query on a "
"string type column, but with an integer value, MySQL will coerce the types "
"of all values in the table to an integer before performing the comparison. "
"For example, if your table contains the values ``'abc'``, ``'def'`` and you "
"query for ``WHERE mycolumn=0``, both rows will match. To prevent this, "
"perform the correct typecasting before using the value in a query."
msgstr ""
"如果你在 MySQL 上执行查询，请注意 MySQL 的静默强制类型转换可能会在混合类型时"
"导致意外的结果。如果你在一个字符串类型的列上查询，但却有一个整数值，MySQL 会"
"在执行比较之前将表中所有值的类型强制转换为整数。例如，如果你的表中包含值 "
"``'abc'``、``'def'``，而你查询 ``WHERE mycolumn=0``，这两行都会匹配。为了防止"
"这种情况发生，在查询中使用该值之前，请执行正确的类型转换。"

msgid "``defer()``"
msgstr "``defer()``"

msgid ""
"In some complex data-modeling situations, your models might contain a lot of "
"fields, some of which could contain a lot of data (for example, text "
"fields), or require expensive processing to convert them to Python objects. "
"If you are using the results of a queryset in some situation where you don't "
"know if you need those particular fields when you initially fetch the data, "
"you can tell Django not to retrieve them from the database."
msgstr ""
"在一些复杂的数据建模情况下，你的模型可能包含很多字段，其中一些字段可能包含很"
"多数据（例如，文本字段），或者需要昂贵的处理来将它们转换为 Python 对象。如果"
"你在某些情况下使用查询集的结果，在最初获取数据时不知道是否需要这些特定的字"
"段，你可以告诉 Django 不要从数据库中检索这些字段。"

msgid ""
"This is done by passing the names of the fields to not load to ``defer()``::"
msgstr "通过将不加载的字段名称传递给 ``defer()``："

msgid ""
"A queryset that has deferred fields will still return model instances. Each "
"deferred field will be retrieved from the database if you access that field "
"(one at a time, not all the deferred fields at once)."
msgstr ""
"一个有递延字段的查询集仍然会返回模型实例。如果你访问每个递延字段，将从数据库"
"中检索该字段（一次一个，而不是同时访问所有的递延字段）。"

msgid ""
"Deferred fields will not lazy-load like this from asynchronous code. "
"Instead, you will get a ``SynchronousOnlyOperation`` exception. If you are "
"writing asynchronous code, you should not try to access any fields that you "
"``defer()``."
msgstr ""

msgid ""
"You can make multiple calls to ``defer()``. Each call adds new fields to the "
"deferred set::"
msgstr "你可以多次调用 ``defer()``。每次调用都会在推迟的集合中增加新的字段："

msgid ""
"The order in which fields are added to the deferred set does not matter. "
"Calling ``defer()`` with a field name that has already been deferred is "
"harmless (the field will still be deferred)."
msgstr ""
"字段被添加到递延集的顺序并不重要。用已经被递延的字段名调用 ``defer()`` 是无害"
"的（该字段仍将被递延）。"

msgid ""
"You can defer loading of fields in related models (if the related models are "
"loading via :meth:`select_related()`) by using the standard double-"
"underscore notation to separate related fields::"
msgstr ""
"你可以通过使用标准的双下划线符号来分隔相关的字段，来推迟加载相关模型中的字段"
"（如果相关模型是通过 :meth:`select_related()` 加载的）："

msgid ""
"If you want to clear the set of deferred fields, pass ``None`` as a "
"parameter to ``defer()``::"
msgstr "如果你想清除一组递延字段，将 ``None`` 作为参数传递给 ``defer()``："

msgid ""
"Some fields in a model won't be deferred, even if you ask for them. You can "
"never defer the loading of the primary key. If you are using :meth:"
"`select_related()` to retrieve related models, you shouldn't defer the "
"loading of the field that connects from the primary model to the related "
"one, doing so will result in an error."
msgstr ""
"模型中的一些字段不会被推迟，即使你要求它们。你永远不能推迟加载主键。如果你使"
"用 :meth:`select_related()` 来检索相关的模型，你不应该推迟从主模型连接到相关"
"模型的字段的加载，这样做会导致一个错误。"

msgid ""
"Similarly, calling ``defer()`` (or its counterpart :meth:`only()`) including "
"an argument from an aggregation (e.g. using the result of :meth:"
"`annotate()`) doesn't make sense: doing so will raise an exception. The "
"aggregated values will always be fetched into the resulting queryset."
msgstr ""

msgid ""
"The ``defer()`` method (and its cousin, :meth:`only()`, below) are only for "
"advanced use-cases. They provide an optimization for when you have analyzed "
"your queries closely and understand *exactly* what information you need and "
"have measured that the difference between returning the fields you need and "
"the full set of fields for the model will be significant."
msgstr ""
"``defer()`` 方法（和它的表兄弟 :meth:`only()`，见下面）只适用于进阶使用情况。"
"它们提供了一种优化，当你仔细分析了你的查询，了解了你所需要的 *确切* 的信息，"
"并且测算出返回你所需要的字段和模型的全部字段集之间的差异会很大。"

msgid ""
"Even if you think you are in the advanced use-case situation, **only use** "
"``defer()`` **when you cannot, at queryset load time, determine if you will "
"need the extra fields or not**. If you are frequently loading and using a "
"particular subset of your data, the best choice you can make is to normalize "
"your models and put the non-loaded data into a separate model (and database "
"table). If the columns *must* stay in the one table for some reason, create "
"a model with ``Meta.managed = False`` (see the :attr:`managed attribute "
"<django.db.models.Options.managed>` documentation) containing just the "
"fields you normally need to load and use that where you might otherwise call "
"``defer()``. This makes your code more explicit to the reader, is slightly "
"faster and consumes a little less memory in the Python process."
msgstr ""

msgid ""
"For example, both of these models use the same underlying database table::"
msgstr "例如，这两种模式都使用相同的基础数据库表："

msgid ""
"If many fields need to be duplicated in the unmanaged model, it may be best "
"to create an abstract model with the shared fields and then have the "
"unmanaged and managed models inherit from the abstract model."
msgstr ""
"如果很多字段需要在非托管模型中重复，最好的办法是创建一个共享字段的抽象模型，"
"然后让非托管模型和托管模型从抽象模型中继承。"

msgid ""
"When calling :meth:`~django.db.models.Model.save()` for instances with "
"deferred fields, only the loaded fields will be saved. See :meth:`~django.db."
"models.Model.save()` for more details."
msgstr ""
"当调用 :meth:`~django.db.models.Model.save()` 对有延迟字段的实例进行保存时，"
"只有加载的字段会被保存。更多细节请参见 :meth:`~django.db.models.Model."
"save()`。"

msgid "``only()``"
msgstr "``only()``"

msgid ""
"The ``only()`` method is essentially the opposite of :meth:`defer`. Only the "
"fields passed into this method and that are *not* already specified as "
"deferred are loaded immediately when the queryset is evaluated."
msgstr ""

msgid ""
"If you have a model where almost all the fields need to be deferred, using "
"``only()`` to specify the complementary set of fields can result in simpler "
"code."
msgstr ""

msgid ""
"Suppose you have a model with fields ``name``, ``age`` and ``biography``. "
"The following two querysets are the same, in terms of deferred fields::"
msgstr ""
"假设你有一个模型，其字段为 ``name``、``age`` 和 ``biography``。就递延字段而"
"言，以下两个查询集是相同的："

msgid ""
"Whenever you call ``only()`` it *replaces* the set of fields to load "
"immediately. The method's name is mnemonic: **only** those fields are loaded "
"immediately; the remainder are deferred. Thus, successive calls to "
"``only()`` result in only the final fields being considered::"
msgstr ""
"每当你调用 ``only()`` 时，它就会 *替换* 要立即加载的字段集。该方法的名称是记"
"号式的：**仅** 那些字段被立即加载；其余的字段被推迟。因此，连续调用 "
"``only()`` 的结果是只考虑最后的字段："

msgid ""
"Since ``defer()`` acts incrementally (adding fields to the deferred list), "
"you can combine calls to ``only()`` and ``defer()`` and things will behave "
"logically::"
msgstr ""
"由于 ``defer()`` 以递增的方式行事（将字段添加到递延列表中），你可以将对 "
"``only()`` 和 ``defer()`` 的调用结合起来，事情就会符合逻辑："

msgid ""
"All of the cautions in the note for the :meth:`defer` documentation apply to "
"``only()`` as well. Use it cautiously and only after exhausting your other "
"options."
msgstr ""
":meth:`defer` 文档注释中的所有注意事项也适用于 ``only()``。谨慎使用，只有在用"
"尽其他选项后才能使用。"

msgid ""
"Using ``only()`` and omitting a field requested using :meth:`select_related` "
"is an error as well. On the other hand, invoking ``only()`` without any "
"arguments, will return every field (including annotations) fetched by the "
"queryset."
msgstr ""

msgid ""
"As with ``defer()``, you cannot access the non-loaded fields from "
"asynchronous code and expect them to load. Instead, you will get a "
"``SynchronousOnlyOperation`` exception. Ensure that all fields you might "
"access are in your ``only()`` call."
msgstr ""

msgid ""
"When using :meth:`defer` after ``only()`` the fields in :meth:`defer` will "
"override ``only()`` for fields that are listed in both."
msgstr ""

msgid "``using()``"
msgstr "``using()``"

msgid ""
"This method is for controlling which database the ``QuerySet`` will be "
"evaluated against if you are using more than one database.  The only "
"argument this method takes is the alias of a database, as defined in :"
"setting:`DATABASES`."
msgstr ""
"如果你使用多个数据库，该方法用于控制 ``QuerySet`` 将针对哪个数据库进行评估。 "
"本方法的唯一参数是数据库的别名，定义在 :setting:`DATABASES` 中。"

msgid "``select_for_update()``"
msgstr "``select_for_update()``"

msgid ""
"Returns a queryset that will lock rows until the end of the transaction, "
"generating a ``SELECT ... FOR UPDATE`` SQL statement on supported databases."
msgstr ""
"返回一个查询集，该查询集将锁定行直到事务结束，从而在受支持的数据库上生成 "
"``SELECT ... FOR UPDATE`` SQL 语句。"

msgid ""
"When the queryset is evaluated (``for entry in entries`` in this case), all "
"matched entries will be locked until the end of the transaction block, "
"meaning that other transactions will be prevented from changing or acquiring "
"locks on them."
msgstr ""
"当查询集被执行时（这里是 ``for entry in entries``），所有匹配的条目将被锁定，"
"直到事务块结束，这意味着其他事务将被阻止改变或获取它们的锁。"

msgid ""
"Usually, if another transaction has already acquired a lock on one of the "
"selected rows, the query will block until the lock is released. If this is "
"not the behavior you want, call ``select_for_update(nowait=True)``. This "
"will make the call non-blocking. If a conflicting lock is already acquired "
"by another transaction, :exc:`~django.db.DatabaseError` will be raised when "
"the queryset is evaluated. You can also ignore locked rows by using "
"``select_for_update(skip_locked=True)`` instead. The ``nowait`` and "
"``skip_locked`` are mutually exclusive and attempts to call "
"``select_for_update()`` with both options enabled will result in a :exc:"
"`ValueError`."
msgstr ""
"通常情况下，如果另一个事务已经获得了所选行的锁，那么查询将被阻塞，直到锁被释"
"放。如果这不是你想要的行为，调用 ``select_for_update(nowait=True)``。这将使调"
"用非阻塞。如果一个冲突的锁已经被另一个事务获取，那么当查询集被评估时，将引"
"发 :exc:`~django.db.DatabaseError`。你也可以通过使用 "
"``select_for_update( skip_locked=True)`` 来忽略锁定的记录。``nowait`` 和 "
"``skip_locked`` 是相互排斥的，在启用这两个选项的情况下调用 "
"``select_for_update()`` 会导致一个 :exc:`ValueError`。"

msgid ""
"By default, ``select_for_update()`` locks all rows that are selected by the "
"query. For example, rows of related objects specified in :meth:"
"`select_related` are locked in addition to rows of the queryset's model. If "
"this isn't desired, specify the related objects you want to lock in "
"``select_for_update(of=(...))`` using the same fields syntax as :meth:"
"`select_related`. Use the value ``'self'`` to refer to the queryset's model."
msgstr ""
"默认情况下，``select_for_update()`` 锁定所有被查询选择的行。例如，在 :meth:"
"`select_related` 中指定的相关对象的行，除了查询集模型的行之外，也会被锁定。如"
"果不希望这样，可以在 ``select_for_update(of=(...))`` 中使用与 :meth:"
"`select_related` 相同的字段语法指定你要锁定的相关对象。使用 ``'self'`` 来表示"
"查询集的模型。"

msgid "Lock parents models in ``select_for_update(of=(...))``"
msgstr "在 ``select_for_update(of=(...))`` 中锁定父模型"

msgid ""
"If you want to lock parents models when using :ref:`multi-table inheritance "
"<multi-table-inheritance>`, you must specify parent link fields (by default "
"``<parent_model_name>_ptr``) in the ``of`` argument. For example::"
msgstr ""
"如果在使用 :ref:`多表继承 <multi-table-inheritance>` 时要锁定父模型，必须在 "
"``of`` 参数中指定父链接字段（默认为 ``<parent_model_name>_ptr``）。例如："

msgid "Using ``select_for_update(of=(...))`` with specified fields"
msgstr "在指定的字段使用 ``select_for_update(of=(...))``"

msgid ""
"If you want to lock models and specify selected fields, e.g. using :meth:"
"`values`, you must select at least one field from each model in the ``of`` "
"argument. Models without selected fields will not be locked."
msgstr ""
"如果你想锁定模型并指定选定的字段，例如使用 :meth:`values`，你必须从每个模型"
"的 ``of`` 参数中至少选择一个字段。没有选定字段的模型将不会被锁定。"

msgid ""
"On PostgreSQL only, you can pass ``no_key=True`` in order to acquire a "
"weaker lock, that still allows creating rows that merely reference locked "
"rows (through a foreign key, for example) while the lock is in place. The "
"PostgreSQL documentation has more details about `row-level lock modes "
"<https://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-"
"ROWS>`_."
msgstr ""
"仅在 PostgreSQL 上，你可以通过 ``no_key=True`` 来获得一个较弱的锁，这仍然允许"
"在锁存在的情况下，创建仅仅引用锁定的行（例如，通过外键）。PostgreSQL 文档中有"
"更多关于 `行级锁模式的细节 <https://www.postgresql.org/docs/current/explicit-"
"locking.html#LOCKING-ROWS>`_ 。"

msgid "You can't use ``select_for_update()`` on nullable relations:"
msgstr ""

msgid ""
"To avoid that restriction, you can exclude null objects if you don't care "
"about them:"
msgstr ""

msgid ""
"The ``postgresql``, ``oracle``, and ``mysql`` database backends support "
"``select_for_update()``. However, MariaDB only supports the ``nowait`` "
"argument, MariaDB 10.6+ also supports the ``skip_locked`` argument, and "
"MySQL 8.0.1+ supports the ``nowait``, ``skip_locked``, and ``of`` arguments. "
"The ``no_key`` argument is only supported on PostgreSQL."
msgstr ""

msgid ""
"Passing ``nowait=True``, ``skip_locked=True``, ``no_key=True``, or ``of`` to "
"``select_for_update()`` using database backends that do not support these "
"options, such as MySQL, raises a :exc:`~django.db.NotSupportedError`. This "
"prevents code from unexpectedly blocking."
msgstr ""
"在使用不支持这些选项的数据库后端（如 MySQL）向 ``select_for_update()``传递 "
"``nowait=True``、``skip_locked=True``、``no_key=True`` 或 ``of``，会产生一"
"个 :exc:`~django.db.NotSupportedError`。这可以防止代码意外地阻塞。"

msgid ""
"Evaluating a queryset with ``select_for_update()`` in autocommit mode on "
"backends which support ``SELECT ... FOR UPDATE`` is a :exc:`~django.db."
"transaction.TransactionManagementError` error because the rows are not "
"locked in that case. If allowed, this would facilitate data corruption and "
"could easily be caused by calling code that expects to be run in a "
"transaction outside of one."
msgstr ""
"在支持 ``SELECT ... FOR UPDATE`` 的后端上，用 ``select_for_update()`` 在自动"
"提交模式下执行一个查询集是一个 :exc:`~django.db.transaction."
"TransactionManagementError` 错误，因为在这种情况下行没有被锁定。如果允许这样"
"做，这将促进数据损坏，并且很容易通过调用期望在一个事务之外的事务中运行的代码"
"而引起。"

msgid ""
"Using ``select_for_update()`` on backends which do not support ``SELECT ... "
"FOR UPDATE`` (such as SQLite) will have no effect. ``SELECT ... FOR UPDATE`` "
"will not be added to the query, and an error isn't raised if "
"``select_for_update()`` is used in autocommit mode."
msgstr ""
"在不支持 ``SELECT ... FOR UPDATE`` 的后端（比如 SQLite）使用 "
"``select_for_update()`` 不会有任何影响。``SELECT ... FOR UPDATE`` 不会被添加"
"到查询中，如果 ``select_for_update()`` 在自动提交模式下使用，也不会出现错误。"

msgid ""
"Although ``select_for_update()`` normally fails in autocommit mode, since :"
"class:`~django.test.TestCase` automatically wraps each test in a "
"transaction, calling ``select_for_update()`` in a ``TestCase`` even outside "
"an :func:`~django.db.transaction.atomic()` block will (perhaps unexpectedly) "
"pass without raising a ``TransactionManagementError``. To properly test "
"``select_for_update()`` you should use :class:`~django.test."
"TransactionTestCase`."
msgstr ""
"虽然 ``select_for_update()`` 通常在自动提交模式下会失败，但由于 :class:"
"`~django.test.TestCase` 会自动将每个测试封装在一个事务中，因此在一个 "
"``TestCase`` 中调用 ``select_for_update()`` 甚至在 :func:`~django.db."
"transaction.atomic()`` 块外调用 ``select_for_update()`` 会（也许会出乎意料"
"地）通过而不会引发 ``TransactionManagementError``。为了正确测试 "
"``select_for_update()``，你应该使用 :class:`~django.test."
"TransactionTestCase`。"

msgid "Certain expressions may not be supported"
msgstr "可能不支持某些表达方式"

msgid ""
"PostgreSQL doesn't support ``select_for_update()`` with :class:`~django.db."
"models.expressions.Window` expressions."
msgstr ""
"PostgreSQL 不支持 ``select_for_update()`` 与 :class:`~django.db.models."
"expressions.Window` 表达式。"

msgid "``raw()``"
msgstr "``raw()``"

msgid ""
"Takes a raw SQL query, executes it, and returns a ``django.db.models.query."
"RawQuerySet`` instance. This ``RawQuerySet`` instance can be iterated over "
"just like a normal ``QuerySet`` to provide object instances."
msgstr ""
"获取一个原始 SQL 查询，执行它，并返回一个 ``django.db.models.query."
"RawQuerySet`` 实例。这个 ``RawQuerySet`` 实例可以像普通的 ``QuerySet`` 一样进"
"行迭代，提供对象实例。"

msgid "See the :doc:`/topics/db/sql` for more information."
msgstr "更多信息请参见 :doc:`/topics/db/sql`。"

msgid ""
"``raw()`` always triggers a new query and doesn't account for previous "
"filtering. As such, it should generally be called from the ``Manager`` or "
"from a fresh ``QuerySet`` instance."
msgstr ""
"``raw()`` 总是触发一个新的查询，并且不考虑以前的过滤。因此，它通常应该从 "
"``Manager`` 或从一个新的 ``QuerySet`` 实例中调用。"

msgid "Operators that return new ``QuerySet``\\s"
msgstr "返回新 ``QuerySet`` 的操作符"

msgid "Combined querysets must use the same model."
msgstr "组合的查询集必须使用相同的模型。"

msgid "AND (``&``)"
msgstr "AND（``&``）"

msgid ""
"Combines two ``QuerySet``\\s using the SQL ``AND`` operator in a manner "
"similar to chaining filters."
msgstr ""

msgid "The following are equivalent::"
msgstr "以下的都是相同的："

msgid "SQL equivalent:"
msgstr "SQL 等价于："

msgid "OR (``|``)"
msgstr "OR（``|``）"

msgid "Combines two ``QuerySet``\\s using the SQL ``OR`` operator."
msgstr "使用 SQL ``OR`` 操作符将两个 ``QuerySet`` 组合起来。"

msgid ""
"``|`` is not a commutative operation, as different (though equivalent) "
"queries may be generated."
msgstr "``|`` 不是一个换元运算，因为可能会产生不同的（虽然是等价的）查询。"

msgid "XOR (``^``)"
msgstr ""

msgid "Combines two ``QuerySet``\\s using the SQL ``XOR`` operator."
msgstr ""

msgid ""
"``XOR`` is natively supported on MariaDB and MySQL. On other databases, ``x "
"^ y ^ ... ^ z`` is converted to an equivalent:"
msgstr ""

msgid "Methods that do not return ``QuerySet``\\s"
msgstr "不返回 ``QuerySet`` 的方法"

msgid ""
"The following ``QuerySet`` methods evaluate the ``QuerySet`` and return "
"something *other than* a ``QuerySet``."
msgstr ""
"以下 ``QuerySet`` 方法执行 ``QuerySet``，并返回 ``QuerySet`` 以外的东西。"

msgid ""
"These methods do not use a cache (see :ref:`caching-and-querysets`). Rather, "
"they query the database each time they're called."
msgstr ""
"这些方法不使用缓存（参见 :ref:`caching-and-querysets`）。相反，它们每次被调用"
"时都会查询数据库。"

msgid ""
"Because these methods evaluate the QuerySet, they are blocking calls, and so "
"their main (synchronous) versions cannot be called from asynchronous code. "
"For this reason, each has a corresponding asynchronous version with an ``a`` "
"prefix - for example, rather than ``get(…)`` you can ``await aget(…)``."
msgstr ""

msgid ""
"There is usually no difference in behavior apart from their asynchronous "
"nature, but any differences are noted below next to each method."
msgstr ""

msgid ""
"The asynchronous versions of each method, prefixed with ``a`` was added."
msgstr ""

msgid "*Asynchronous version*: ``aget()``"
msgstr ""

msgid ""
"Returns the object matching the given lookup parameters, which should be in "
"the format described in `Field lookups`_. You should use lookups that are "
"guaranteed unique, such as the primary key or fields in a unique constraint. "
"For example::"
msgstr ""
"返回与给定的查找参数相匹配的对象，其格式应该在 `Field lookups`_ 中描述。你应"
"该使用保证唯一的查询，比如主键或唯一约束中的字段。例如："

msgid ""
"If you expect a queryset to already return one row, you can use ``get()`` "
"without any arguments to return the object for that row::"
msgstr ""
"如果你希望一个查询集已经返回一条记录，你可以在没有任何参数的情况下使用 "
"``get()`` 来返回该行的对象："

msgid ""
"If ``get()`` doesn't find any object, it raises a :exc:`Model.DoesNotExist "
"<django.db.models.Model.DoesNotExist>` exception::"
msgstr ""
"如果 ``get()`` 没有找到任何对象，它会引发一个 :exc:`Model.DoesNotExist "
"<django.db.models.Model.DoesNotExist>` 异常："

msgid ""
"If ``get()`` finds more than one object, it raises a :exc:`Model."
"MultipleObjectsReturned <django.db.models.Model.MultipleObjectsReturned>` "
"exception::"
msgstr ""
"如果 ``get()`` 发现多个对象，会引发一个 :exc:`Model.MultipleObjectsReturned "
"<django.db.models.Model.MultipleObjectsReturned>` 异常："

msgid ""
"Both these exception classes are attributes of the model class, and specific "
"to that model. If you want to handle such exceptions from several ``get()`` "
"calls for different models, you can use their generic base classes. For "
"example, you can use :exc:`django.core.exceptions.ObjectDoesNotExist`  to "
"handle :exc:`~django.db.models.Model.DoesNotExist` exceptions from multiple "
"models::"
msgstr ""
"这两个异常类都是模型类的属性，并且特定于该模型。如果你想对不同模型的多个 "
"``get()`` 调用处理这样的异常，可以使用它们的通用基类。例如，你可以使用 :exc:"
"`django.core.exceptions.ObjectDoesNotExist` 来处理 :exc:`~django.db.models."
"Models.Model.DoesNotExist` 来自多个模型的异常："

msgid "``aget()`` method was added."
msgstr ""

msgid "``create()``"
msgstr "``create()``"

msgid "*Asynchronous version*: ``acreate()``"
msgstr ""

msgid ""
"A convenience method for creating an object and saving it all in one step.  "
"Thus::"
msgstr "一种方便的方法，用于创建一个对象并一步到位地保存。 因此："

msgid "are equivalent."
msgstr "是等效的。"

msgid ""
"The :ref:`force_insert <ref-models-force-insert>` parameter is documented "
"elsewhere, but all it means is that a new object will always be created. "
"Normally you won't need to worry about this. However, if your model contains "
"a manual primary key value that you set and if that value already exists in "
"the database, a call to ``create()`` will fail with an :exc:`~django.db."
"IntegrityError` since primary keys must be unique. Be prepared to handle the "
"exception if you are using manual primary keys."
msgstr ""
":ref:`force_insert <ref-models-force-insert>` 参数在其他地方有说明，但它的意"
"思是总是会创建一个新的对象。通常情况下，你不需要担心这个问题。但是，如果你的"
"模型中包含了一个你设置的手动主键值，而且如果这个值已经存在于数据库中，那么对 "
"``create()`` 的调用就会以一个 :exc:`~django.db.IntegrityError` 失败，因为主键"
"必须是唯一的。如果使用手动主键，要做好处理异常的准备。"

msgid "``acreate()`` method was added."
msgstr ""

msgid "``get_or_create()``"
msgstr "``get_or_create()``"

msgid "*Asynchronous version*: ``aget_or_create()``"
msgstr ""

msgid ""
"A convenience method for looking up an object with the given ``kwargs`` (may "
"be empty if your model has defaults for all fields), creating one if "
"necessary."
msgstr ""
"一个方便的方法，用于查找具有给定 ``kwargs`` 的对象（如果你的模型对所有字段都"
"有默认值，则可能为空），必要时创建一个对象。"

msgid ""
"Returns a tuple of ``(object, created)``, where ``object`` is the retrieved "
"or created object and ``created`` is a boolean specifying whether a new "
"object was created."
msgstr ""
"返回 ``(object, created)`` 的元组，其中 ``object`` 是检索或创建的对象，"
"``created`` 是指定是否创建新对象的布尔值。"

msgid ""
"This is meant to prevent duplicate objects from being created when requests "
"are made in parallel, and as a shortcut to boilerplatish code. For example::"
msgstr ""
"这是为了防止在并行进行请求时创建重复的对象，并作为样板代码的快捷方式。 例如："

msgid ""
"Here, with concurrent requests, multiple attempts to save a ``Person`` with "
"the same parameters may be made. To avoid this race condition, the above "
"example can be rewritten using ``get_or_create()`` like so::"
msgstr ""
"在这里，如果是并发请求，可能会多次尝试用相同的参数保存一个 ``Person``。为了避"
"免这种竞争条件，可以使用 ``get_or_create()`` 重写上面的例子，比如："

msgid ""
"Any keyword arguments passed to ``get_or_create()`` — *except* an optional "
"one called ``defaults`` — will be used in a :meth:`get()` call. If an object "
"is found, ``get_or_create()`` returns a tuple of that object and ``False``."
msgstr ""
"任何传递给 ``get_or_create()`` 的关键字参数—— *除了* 一个叫 ``defaults`` 的可"
"选参数——都将在 :meth:`get()` 调用中使用。如果找到了一个对象，"
"``get_or_create()`` 返回该对象的元组和 ``False``。"

msgid ""
"This method is atomic assuming that the database enforces uniqueness of the "
"keyword arguments (see :attr:`~django.db.models.Field.unique` or :attr:"
"`~django.db.models.Options.unique_together`). If the fields used in the "
"keyword arguments do not have a uniqueness constraint, concurrent calls to "
"this method may result in multiple rows with the same parameters being "
"inserted."
msgstr ""
"假设数据库强制执行关键字参数的唯一性（参见 :attr:`~django.db.models.Field."
"unique` 或 :attr:`~django.db.models.Options.unique_together`），这个方法是原"
"子性的。如果关键字参数中使用的字段没有唯一性约束，那么对该方法的并发调用可能"
"会导致插入具有相同参数的多条记录。"

msgid ""
"You can specify more complex conditions for the retrieved object by chaining "
"``get_or_create()`` with ``filter()`` and using :class:`Q objects <django.db."
"models.Q>`. For example, to retrieve Robert or Bob Marley if either exists, "
"and create the latter otherwise::"
msgstr ""
"你可以通过将 ``get_or_create()`` 和 ``filter()`` 串联起来，并使用 :class:`Q "
"对象 <django.db.models.Q>` 为检索对象指定更复杂的条件。例如，如果 Robert 或 "
"Bob Marley 存在，则检索 Robert 或 Bob Marley，否则创建后者："

msgid ""
"If multiple objects are found, ``get_or_create()`` raises :exc:`~django.core."
"exceptions.MultipleObjectsReturned`. If an object is *not* found, "
"``get_or_create()`` will instantiate and save a new object, returning a "
"tuple of the new object and ``True``. The new object will be created roughly "
"according to this algorithm::"
msgstr ""
"如果找到多个对象，``get_or_create()`` 会引发 :exc:`~django.core.exceptions."
"MultipleObjectsReturned`。如果没有找到对象，``get_or_create()`` 将实例化并保"
"存一个新对象，返回一个新对象的元组和 ``True``。新对象将大致按照以下算法创建："

msgid ""
"In English, that means start with any non-``'defaults'`` keyword argument "
"that doesn't contain a double underscore (which would indicate a non-exact "
"lookup). Then add the contents of ``defaults``, overriding any keys if "
"necessary, and use the result as the keyword arguments to the model class. "
"If there are any callables in ``defaults``, evaluate them. As hinted at "
"above, this is a simplification of the algorithm that is used, but it "
"contains all the pertinent details. The internal implementation has some "
"more error-checking than this and handles some extra edge-conditions; if "
"you're interested, read the code."
msgstr ""
"在英语中，这意味着从任何不包含双下划线的非 ``'defaults'`` 关键字参数开始（这"
"将表明一个非精确的查找）。然后添加 ``defaults`` 的内容，必要时覆盖任何键，并"
"将结果作为模型类的关键字参数。如果 ``defaults`` 中存在任何可调用对象，则对其"
"进行评估。正如上面所提示的，这是对所使用算法的简化，但它包含了所有相关的细"
"节。内部实现有比这更多的错误检查，并处理一些额外的边缘条件；如果你感兴趣，请"
"阅读代码。"

msgid ""
"If you have a field named ``defaults`` and want to use it as an exact lookup "
"in ``get_or_create()``, use ``'defaults__exact'``, like so::"
msgstr ""
"如果你有一个名为 ``defaults`` 的字段，并且想在 ``get_or_create()`` 中使用它作"
"为精确查询，使用 ``'defaults__exact'``，像这样："

msgid ""
"The ``get_or_create()`` method has similar error behavior to :meth:"
"`create()` when you're using manually specified primary keys. If an object "
"needs to be created and the key already exists in the database, an :exc:"
"`~django.db.IntegrityError` will be raised."
msgstr ""
"当你使用手动指定的主键时，``get_or_create()`` 方法的错误行为与 :meth:"
"`create()` 类似。如果需要创建一个对象，而该键已经存在于数据库中，则会引发一"
"个 :exc:`~django.db.IntegrityError`。"

msgid ""
"Finally, a word on using ``get_or_create()`` in Django views. Please make "
"sure to use it only in ``POST`` requests unless you have a good reason not "
"to. ``GET`` requests shouldn't have any effect on data. Instead, use "
"``POST`` whenever a request to a page has a side effect on your data. For "
"more, see :rfc:`Safe methods <9110#section-9.2.1>` in the HTTP spec."
msgstr ""

msgid ""
"You can use ``get_or_create()`` through :class:`~django.db.models."
"ManyToManyField` attributes and reverse relations. In that case you will "
"restrict the queries inside the context of that relation. That could lead "
"you to some integrity problems if you don't use it consistently."
msgstr ""
"你可以通过 :class:`~django.db.models.ManyToManyField` 属性和反向关系来使用 "
"``get_or_create()``。在这种情况下，你将限制在该关系的上下文内进行查询。如果你"
"不持续使用它，这可能会导致一些完整性问题。"

msgid "Being the following models::"
msgstr "如以下模型："

msgid ""
"You can use ``get_or_create()`` through Book's chapters field, but it only "
"fetches inside the context of that book:"
msgstr ""

msgid ""
"This is happening because it's trying to get or create \"Chapter 1\" through "
"the book \"Ulysses\", but it can't do any of them: the relation can't fetch "
"that chapter because it isn't related to that book, but it can't create it "
"either because ``title`` field should be unique."
msgstr ""
"出现这种情况是因为它试图通过“Ulysses”这本书获取或创建“Chapter 1”，但它不能做"
"任何事情：关系不能获取该章，因为它与该书无关，但它也不能创建它，因为 "
"``title`` 字段应该是唯一的。"

msgid "``aget_or_create()`` method was added."
msgstr ""

msgid "``update_or_create()``"
msgstr "``update_or_create()``"

msgid "*Asynchronous version*: ``aupdate_or_create()``"
msgstr ""

msgid ""
"A convenience method for updating an object with the given ``kwargs``, "
"creating a new one if necessary. The ``defaults`` is a dictionary of (field, "
"value) pairs used to update the object. The values in ``defaults`` can be "
"callables."
msgstr ""
"用给定的 ``kwargs`` 更新对象的一种方便方法，是必要时创建一个新对象。"
"``defaults`` 是用来更新对象的 (field, value) 对的字典。``defaults`` 中的值可"
"以是可调用对象。"

msgid ""
"Returns a tuple of ``(object, created)``, where ``object`` is the created or "
"updated object and ``created`` is a boolean specifying whether a new object "
"was created."
msgstr ""
"返回 ``(object, created)`` 的元组，其中 ``object`` 是创建或更新的对象，"
"``created`` 是一个布尔值，指定是否创建了一个新对象。"

msgid ""
"The ``update_or_create`` method tries to fetch an object from database based "
"on the given ``kwargs``. If a match is found, it updates the fields passed "
"in the ``defaults`` dictionary."
msgstr ""
"``update_or_create`` 方法根据给定的 ``kwargs`` 尝试从数据库中获取一个对象。如"
"果找到了匹配的对象，它就会更新 ``defaults`` 字典中传递的字段。"

msgid "This is meant as a shortcut to boilerplatish code. For example::"
msgstr "这是作为一个快捷方式来处理样板代码。例如："

msgid ""
"This pattern gets quite unwieldy as the number of fields in a model goes up. "
"The above example can be rewritten using ``update_or_create()`` like so::"
msgstr ""
"当模型中的字段数量增加时，这种模式就会变得很笨重。上面的例子可以使用 "
"``update_or_create()`` 重写，就像这样："

msgid ""
"For a detailed description of how names passed in ``kwargs`` are resolved, "
"see :meth:`get_or_create`."
msgstr ""
"关于如何解决在 ``kwargs`` 中传递名字的详细描述，见 :meth:`get_or_create`。"

msgid ""
"As described above in :meth:`get_or_create`, this method is prone to a race-"
"condition which can result in multiple rows being inserted simultaneously if "
"uniqueness is not enforced at the database level."
msgstr ""
"如上文 :meth:`get_or_create` 中所述，这种方法容易出现竞争条件，如果不在数据库"
"层面强制执行唯一性，就会导致同时插入多条记录。"

msgid ""
"Like :meth:`get_or_create` and :meth:`create`, if you're using manually "
"specified primary keys and an object needs to be created but the key already "
"exists in the database, an :exc:`~django.db.IntegrityError` is raised."
msgstr ""
"就像 :meth:`get_or_create` 和 :meth:`create` 一样，如果你使用的是手动指定的主"
"键，需要创建一个对象，但该键已经存在于数据库中，就会引发 :exc:`~django.db."
"IntegrityError`。"

msgid "``aupdate_or_create()`` method was added."
msgstr ""

msgid ""
"In older versions, ``update_or_create()`` didn't specify ``update_fields`` "
"when calling :meth:`Model.save() <django.db.models.Model.save>`."
msgstr ""

msgid "``bulk_create()``"
msgstr "``bulk_create()``"

msgid "*Asynchronous version*: ``abulk_create()``"
msgstr ""

msgid ""
"This method inserts the provided list of objects into the database in an "
"efficient manner (generally only 1 query, no matter how many objects there "
"are), and returns created objects as a list, in the same order as provided:"
msgstr ""

msgid "This has a number of caveats though:"
msgstr "不过这有一些注意事项："

msgid ""
"The model's ``save()`` method will not be called, and the ``pre_save`` and "
"``post_save`` signals will not be sent."
msgstr ""
"模型的 ``save()`` 方法将不会被调用，``pre_save`` 和 ``post_save`` 信号将不会"
"被发送。"

msgid ""
"It does not work with child models in a multi-table inheritance scenario."
msgstr "在多表继承的情况下，它不能与子模型一起工作。"

msgid ""
"If the model's primary key is an :class:`~django.db.models.AutoField`, the "
"primary key attribute can only be retrieved on certain databases (currently "
"PostgreSQL, MariaDB 10.5+, and SQLite 3.35+). On other databases, it will "
"not be set."
msgstr ""
"如果模型的主键是一个 :class:`~django.db.models.AutoField`，主键属性只能在某些"
"数据库（目前是 PostgreSQL，MariaDB 10.5+，和 SQLite 3.35+）上检索到。在其他数"
"据库中，它将不会被设置。"

msgid "It does not work with many-to-many relationships."
msgstr "对于多对多的关系，它是行不通的。"

msgid ""
"It casts ``objs`` to a list, which fully evaluates ``objs`` if it's a "
"generator. The cast allows inspecting all objects so that any objects with a "
"manually set primary key can be inserted first. If you want to insert "
"objects in batches without evaluating the entire generator at once, you can "
"use this technique as long as the objects don't have any manually set "
"primary keys::"
msgstr ""
"它将 ``objs`` 转换为一个列表，如果 ``objs`` 是一个生成器，则完全执行 "
"``objs``。这种转换允许检查所有对象，因此任何具有手动设置主键的对象都可以首先"
"插入。如果你想分批插入对象，而不一次性执行整个生成器，你可以使用这种技术，只"
"要对象没有任何手动设置的主键："

msgid ""
"The ``batch_size`` parameter controls how many objects are created in a "
"single query. The default is to create all objects in one batch, except for "
"SQLite where the default is such that at most 999 variables per query are "
"used."
msgstr ""
"``batch_size`` 参数控制在一次查询中创建多少对象。默认情况是在一个批次中创建所"
"有对象，但 SQLite 除外，默认情况是每个查询最多使用 999 个变量。"

msgid ""
"On databases that support it (all but Oracle), setting the "
"``ignore_conflicts`` parameter to ``True`` tells the database to ignore "
"failure to insert any rows that fail constraints such as duplicate unique "
"values."
msgstr ""

msgid ""
"On databases that support it (all except Oracle and SQLite < 3.24), setting "
"the ``update_conflicts`` parameter to ``True``, tells the database to update "
"``update_fields`` when a row insertion fails on conflicts. On PostgreSQL and "
"SQLite, in addition to ``update_fields``, a list of ``unique_fields`` that "
"may be in conflict must be provided."
msgstr ""

msgid ""
"Enabling the ``ignore_conflicts`` or ``update_conflicts`` parameter disable "
"setting the primary key on each model instance (if the database normally "
"support it)."
msgstr ""

msgid ""
"On MySQL and MariaDB, setting the ``ignore_conflicts`` parameter to ``True`` "
"turns certain types of errors, other than duplicate key, into warnings. Even "
"with Strict Mode. For example: invalid values or non-nullable violations. "
"See the `MySQL documentation`_ and `MariaDB documentation`_ for more details."
msgstr ""
"在 MySQL 和 MariaDB 上，将 ``ignore_conflicts`` 参数设置为 ``True`` 将某些类"
"型的错误，除了重复键之外，变成警告。即使在严格模式下也是如此。例如：无效值或"
"不可空值违规。更多细节请参见 `MySQL documentation`_ 和 `MariaDB "
"documentation`_ 。"

msgid ""
"The ``update_conflicts``, ``update_fields``, and ``unique_fields`` "
"parameters were added to support updating fields when a row insertion fails "
"on conflict."
msgstr ""

msgid "``abulk_create()`` method was added."
msgstr ""

msgid "``bulk_update()``"
msgstr "``bulk_update()``"

msgid "*Asynchronous version*: ``abulk_update()``"
msgstr ""

msgid ""
"This method efficiently updates the given fields on the provided model "
"instances, generally with one query, and returns the number of objects "
"updated:"
msgstr ""

msgid ""
":meth:`.QuerySet.update` is used to save the changes, so this is more "
"efficient than iterating through the list of models and calling ``save()`` "
"on each of them, but it has a few caveats:"
msgstr ""
":meth:`.QuerySet.update` 用于保存更改，所以这比遍历模型列表并对每个模型调用 "
"``save()`` 更有效，但它有一些注意事项："

msgid "You cannot update the model's primary key."
msgstr "你不能更新模型的主键。"

msgid ""
"Each model's ``save()`` method isn't called, and the :attr:`~django.db."
"models.signals.pre_save` and :attr:`~django.db.models.signals.post_save` "
"signals aren't sent."
msgstr ""
"每个模型的 ``save()`` 方法没有被调用，而且 :attr:`~django.db.models.signals."
"pre_save` 和 :attr:`~django.db.models.signals.post_save` 信号没有被发送。"

msgid ""
"If updating a large number of columns in a large number of rows, the SQL "
"generated can be very large. Avoid this by specifying a suitable "
"``batch_size``."
msgstr ""
"如果更新大量行中的大量列，生成的 SQL 可能非常大。通过指定一个合适的 "
"``batch_size`` 来避免这种情况。"

msgid ""
"Updating fields defined on multi-table inheritance ancestors will incur an "
"extra query per ancestor."
msgstr "更新定义在多表继承祖先上的字段将给每个祖先带来额外的查询。"

msgid ""
"When an individual batch contains duplicates, only the first instance in "
"that batch will result in an update."
msgstr "当一个单独的批次包含重复的内容时，只有该批次的第一个实例会导致更新。"

msgid ""
"The number of objects updated returned by the function may be fewer than the "
"number of objects passed in. This can be due to duplicate objects passed in "
"which are updated in the same batch or race conditions such that objects are "
"no longer present in the database."
msgstr ""
"该函数返回的更新对象的数量可能少于传入的对象的数量。这可能是由于传入的对象重"
"复，在同一批次中被更新，或者是竞赛条件，如对象在数据库中不再存在。"

msgid ""
"The ``batch_size`` parameter controls how many objects are saved in a single "
"query. The default is to update all objects in one batch, except for SQLite "
"and Oracle which have restrictions on the number of variables used in a "
"query."
msgstr ""
"``batch_size`` 参数控制一次查询中保存多少对象。默认值是在一个批次中更新所有对"
"象，但 SQLite 和 Oracle 除外，它们对查询中使用的变量数量有限制。"

msgid "``abulk_update()`` method was added."
msgstr ""

msgid "``count()``"
msgstr "``count()``"

msgid "*Asynchronous version*: ``acount()``"
msgstr ""

msgid ""
"Returns an integer representing the number of objects in the database "
"matching the ``QuerySet``."
msgstr "返回一个整数，表示数据库中与 ``QuerySet`` 匹配的对象数量。"

msgid ""
"A ``count()`` call performs a ``SELECT COUNT(*)`` behind the scenes, so you "
"should always use ``count()`` rather than loading all of the record into "
"Python objects and calling ``len()`` on the result (unless you need to load "
"the objects into memory anyway, in which case ``len()`` will be faster)."
msgstr ""
"``count()`` 调用在幕后执行 ``SELECT COUNT(*)``，所以你应该总是使用 "
"``count()`` 而不是将所有的记录加载到 Python 对象中，然后在结果上调用 "
"``len()`` （除非你需要将对象加载到内存中，在这种情况下 ``len()`` 会更快）。"

msgid ""
"Note that if you want the number of items in a ``QuerySet`` and are also "
"retrieving model instances from it (for example, by iterating over it), it's "
"probably more efficient to use ``len(queryset)`` which won't cause an extra "
"database query like ``count()`` would."
msgstr ""
"请注意，如果你想知道 ``QuerySet`` 中的项数，并且也要从它中检索模型实例（例"
"如，通过迭代它），那么使用 ``len(queryset)`` 可能更有效，因为它不会像 "
"``count()`` 那样引起额外的数据库查询。"

msgid ""
"If the queryset has already been fully retrieved, ``count()`` will use that "
"length rather than perform an extra database query."
msgstr ""
"如果查询集已经被完全检索到，``count()`` 将使用该长度，而不是执行额外的数据库"
"查询。"

msgid "``acount()`` method was added."
msgstr ""

msgid "``in_bulk()``"
msgstr "``in_bulk()``"

msgid "*Asynchronous version*: ``ain_bulk()``"
msgstr ""

msgid ""
"Takes a list of field values (``id_list``) and the ``field_name`` for those "
"values, and returns a dictionary mapping each value to an instance of the "
"object with the given field value. No :exc:`django.core.exceptions."
"ObjectDoesNotExist` exceptions will ever be raised by ``in_bulk``; that is, "
"any ``id_list`` value not matching any instance will simply be ignored. If "
"``id_list`` isn't provided, all objects in the queryset are returned. "
"``field_name`` must be a unique field or a distinct field (if there's only "
"one field specified in :meth:`distinct`). ``field_name`` defaults to the "
"primary key."
msgstr ""
"接收一个字段值的列表（``id_list``）和这些值的 ``field_name``，并返回一个字"
"典，将每个值映射到具有给定字段值的对象实例。``in_bulk`` 不会引发任何 :exc:"
"`django.core.exceptions.ObjectDoesNotExist` 异常；也就是说，任何不匹配任何实"
"例的 ``id_list`` 值将被简单地忽略掉。如果没有提供 ``id_list``，将返回查询集的"
"所有对象。``field_name`` 必须是一个唯一字段或一个独立的字段（如果只有一个字段"
"在 :meth:`distinct` 中指定）。``field_name`` 默认为主键。"

msgid ""
"If you pass ``in_bulk()`` an empty list, you'll get an empty dictionary."
msgstr "如果你传递 ``in_bulk()`` 一个空列表，你将得到一个空字典。"

msgid "``ain_bulk()`` method was added."
msgstr ""

msgid "``iterator()``"
msgstr "``iterator()``"

msgid "*Asynchronous version*: ``aiterator()``"
msgstr ""

msgid ""
"Evaluates the ``QuerySet`` (by performing the query) and returns an iterator "
"(see :pep:`234`) over the results, or an asynchronous iterator (see :pep:"
"`492`) if you call its asynchronous version ``aiterator``."
msgstr ""

msgid ""
"A ``QuerySet`` typically caches its results internally so that repeated "
"evaluations do not result in additional queries. In contrast, ``iterator()`` "
"will read results directly, without doing any caching at the ``QuerySet`` "
"level (internally, the default iterator calls ``iterator()`` and caches the "
"return value). For a ``QuerySet`` which returns a large number of objects "
"that you only need to access once, this can result in better performance and "
"a significant reduction in memory."
msgstr ""

msgid ""
"Note that using ``iterator()`` on a ``QuerySet`` which has already been "
"evaluated will force it to evaluate again, repeating the query."
msgstr ""
"请注意，在已经被执行的 ``QuerySet`` 上使用 ``iterator()`` 会迫使它再次执行，"
"重复查询。"

msgid ""
"``iterator()`` is compatible with previous calls to ``prefetch_related()`` "
"as long as ``chunk_size`` is given. Larger values will necessitate fewer "
"queries to accomplish the prefetching at the cost of greater memory usage."
msgstr ""

msgid ""
"``aiterator()`` is *not* compatible with previous calls to "
"``prefetch_related()``."
msgstr ""

msgid ""
"On some databases (e.g. Oracle, `SQLite <https://www.sqlite.org/limits."
"html#max_variable_number>`_), the maximum number of terms in an SQL ``IN`` "
"clause might be limited. Hence values below this limit should be used. (In "
"particular, when prefetching across two or more relations, a ``chunk_size`` "
"should be small enough that the anticipated number of results for each "
"prefetched relation still falls below the limit.)"
msgstr ""

msgid ""
"So long as the QuerySet does not prefetch any related objects, providing no "
"value for ``chunk_size`` will result in Django using an implicit default of "
"2000."
msgstr ""

msgid ""
"Depending on the database backend, query results will either be loaded all "
"at once or streamed from the database using server-side cursors."
msgstr ""
"根据数据库后端，查询结果将被一次性加载或使用服务器端的游标从数据库中流转。"

msgid "Support for prefetching related objects was added to ``iterator()``."
msgstr ""

msgid "``aiterator()`` method was added."
msgstr ""

msgid ""
"Using ``iterator()`` on a queryset that prefetches related objects without "
"providing the ``chunk_size`` is deprecated. In Django 5.0, an exception will "
"be raise."
msgstr ""

msgid "With server-side cursors"
msgstr "使用服务器端游标"

msgid ""
"Oracle and :ref:`PostgreSQL <postgresql-server-side-cursors>` use server-"
"side cursors to stream results from the database without loading the entire "
"result set into memory."
msgstr ""
"Oracle 和 :ref:`PostgreSQL <postgresql-server-side-cursors>` 使用服务器端的游"
"标从数据库流式传输结果，而不需要将整个结果集加载到内存中。"

msgid "The Oracle database driver always uses server-side cursors."
msgstr "Oracle 数据库驱动程序总是使用服务器端的游标。"

msgid ""
"With server-side cursors, the ``chunk_size`` parameter specifies the number "
"of results to cache at the database driver level. Fetching bigger chunks "
"diminishes the number of round trips between the database driver and the "
"database, at the expense of memory."
msgstr ""
"对于服务器端的游标，``chunk_size`` 参数指定了要在数据库驱动层缓存的结果数量。"
"获取更大的块数会减少数据库驱动和数据库之间的往返次数，但会牺牲内存。"

msgid ""
"On PostgreSQL, server-side cursors will only be used when the :setting:"
"`DISABLE_SERVER_SIDE_CURSORS <DATABASE-DISABLE_SERVER_SIDE_CURSORS>` setting "
"is ``False``. Read :ref:`transaction-pooling-server-side-cursors` if you're "
"using a connection pooler configured in transaction pooling mode. When "
"server-side cursors are disabled, the behavior is the same as databases that "
"don't support server-side cursors."
msgstr ""
"在 PostgreSQL 上，只有当 :setting:`DISABLE_SERVER_SIDE_CURSORS <DATABASE-"
"DISABLE_SERVER_SIDE_CURSORS>` 设置为 ``False`` 时，才会使用服务器端游标。如果"
"你使用的是配置在事务池模式下的连接池器，请阅读 :ref:`transaction-pooling-"
"server-side-cursors`。当禁用服务器端游标时，其行为与不支持服务器端游标的数据"
"库相同。"

msgid "Without server-side cursors"
msgstr "没有服务器端游标"

msgid ""
"MySQL doesn't support streaming results, hence the Python database driver "
"loads the entire result set into memory. The result set is then transformed "
"into Python row objects by the database adapter using the ``fetchmany()`` "
"method defined in :pep:`249`."
msgstr ""
"MySQL 不支持流式结果，因此 Python 数据库驱动将整个结果集加载到内存中。然后数"
"据库适配器使用 :pep:`249` 中定义的 ``fetchmany()`` 方法将结果集转化为 Python "
"行对象。"

msgid ""
"SQLite can fetch results in batches using ``fetchmany()``, but since SQLite "
"doesn't provide isolation between queries within a connection, be careful "
"when writing to the table being iterated over. See :ref:`sqlite-isolation` "
"for more information."
msgstr ""
"SQLite 可以使用 ``fetchmany()`` 分批获取结果，但由于 SQLite 不提供连接内查询"
"之间的隔离，所以在向被迭代的表写入时要小心。参见 :ref:`sqlite-isolation` 了解"
"更多信息。"

msgid ""
"The ``chunk_size`` parameter controls the size of batches Django retrieves "
"from the database driver. Larger batches decrease the overhead of "
"communicating with the database driver at the expense of a slight increase "
"in memory consumption."
msgstr ""
"``chunk_size`` 参数控制 Django 从数据库驱动中获取的批次大小。批量越大，就会减"
"少与数据库驱动通信的开销，但代价是略微增加内存消耗。"

msgid ""
"So long as the QuerySet does not prefetch any related objects, providing no "
"value for ``chunk_size`` will result in Django using an implicit default of "
"2000, a value derived from `a calculation on the psycopg mailing list "
"<https://www.postgresql.org/message-id/4D2F2C71.8080805%40dndg.it>`_:"
msgstr ""

msgid ""
"Assuming rows of 10-20 columns with a mix of textual and numeric data, 2000 "
"is going to fetch less than 100KB of data, which seems a good compromise "
"between the number of rows transferred and the data discarded if the loop is "
"exited early."
msgstr ""
"假设行数为 10-20 列，文字数据和数字数据混合，2000 要取不到 100KB 的数据，这似"
"乎是一个很好的折中方案，在传输的行数和提前退出循环时丢弃的数据之间。"

msgid "``latest()``"
msgstr "``latest()``"

msgid "*Asynchronous version*: ``alatest()``"
msgstr ""

msgid "Returns the latest object in the table based on the given field(s)."
msgstr "根据给定的字段，返回表中最新的对象。"

msgid ""
"This example returns the latest ``Entry`` in the table, according to the "
"``pub_date`` field::"
msgstr "这个例子根据 ``pub_date`` 字段返回表中最新的 ``Entry``："

msgid ""
"You can also choose the latest based on several fields. For example, to "
"select the ``Entry`` with the earliest ``expire_date`` when two entries have "
"the same ``pub_date``::"
msgstr ""
"你也可以根据几个字段选择最新的。例如，当两个条目具有相同的 ``pub_date`` 时，"
"要选择最早的 ``expire_date`` 条目："

msgid ""
"The negative sign in ``'-expire_date'`` means to sort ``expire_date`` in "
"*descending* order. Since ``latest()`` gets the last result, the ``Entry`` "
"with the earliest ``expire_date`` is selected."
msgstr ""
"``'-expire_date'`` 中的负号表示按 *降* 序排列 ``expire_date``。由于 "
"``latest()`` 得到的是最后一个结果，所以选择了最早的 ``expire_date`` 的 "
"``Entry``。"

msgid ""
"If your model's :ref:`Meta <meta-options>` specifies :attr:`~django.db."
"models.Options.get_latest_by`, you can omit any arguments to ``earliest()`` "
"or ``latest()``. The fields specified in :attr:`~django.db.models.Options."
"get_latest_by` will be used by default."
msgstr ""
"如果你模型的 :ref:`Meta <meta-options>` 指定了 :attr:`~django.db.models."
"Options.get_latest_by`，你可以省略 ``earliest()`` 或 ``latest()`` 的任何参"
"数。:attr:`~django.db.models.Options.get_latest_by` 中指定的字段将被默认使"
"用。"

msgid ""
"Like :meth:`get()`, ``earliest()`` and ``latest()`` raise :exc:`~django.db."
"models.Model.DoesNotExist` if there is no object with the given parameters."
msgstr ""
"像 :meth:`get()`、``earliest()`` 和 ``latest()``，如果没有给定参数的对象，就"
"会引发 :exc:`~django.db.models.Model.DoesNotExist`。"

msgid ""
"Note that ``earliest()`` and ``latest()`` exist purely for convenience and "
"readability."
msgstr "请注意，``earliest()`` 和 ``latest()`` 的存在纯粹是为了方便和可读性。"

msgid "``earliest()`` and ``latest()`` may return instances with null dates."
msgstr "``earliest()`` 和 ``latest()`` 可能返回日期为空的实例。"

msgid ""
"Since ordering is delegated to the database, results on fields that allow "
"null values may be ordered differently if you use different databases. For "
"example, PostgreSQL and MySQL sort null values as if they are higher than "
"non-null values, while SQLite does the opposite."
msgstr ""
"由于排序是委托给数据库的，如果使用不同的数据库，允许空值的字段上的结果可能会"
"有不同的排序。例如，PostgreSQL 和 MySQL 将空值排序为高于非空值，而 SQLite 则"
"相反。"

msgid "You may want to filter out null values::"
msgstr "你可能想过滤掉空值："

msgid "``alatest()`` method was added."
msgstr ""

msgid "``earliest()``"
msgstr "``earliest()``"

msgid "*Asynchronous version*: ``aearliest()``"
msgstr ""

msgid ""
"Works otherwise like :meth:`~django.db.models.query.QuerySet.latest` except "
"the direction is changed."
msgstr ""
"除了方向改变外，其他工作方式都像 :meth:`~django.db.models.query.QuerySet."
"last`。"

msgid "``aearliest()`` method was added."
msgstr ""

msgid "``first()``"
msgstr "``first()``"

msgid "*Asynchronous version*: ``afirst()``"
msgstr ""

msgid ""
"Returns the first object matched by the queryset, or ``None`` if there is no "
"matching object. If the ``QuerySet`` has no ordering defined, then the "
"queryset is automatically ordered by the primary key. This can affect "
"aggregation results as described in :ref:`aggregation-ordering-interaction`."
msgstr ""
"返回查询集匹配的第一个对象，如果没有匹配的对象，则返回 ``None``。如果 "
"``QuerySet`` 没有定义排序，那么查询集自动按主键排序。这可能会影响聚合结果，"
"如 :ref:`aggregation-ordering-interaction` 中所述。"

msgid ""
"Note that ``first()`` is a convenience method, the following code sample is "
"equivalent to the above example::"
msgstr "请注意，``first()`` 是一个方便的方法，下面的代码示例相当于上面的例子："

msgid "``afirst()`` method was added."
msgstr ""

msgid "``last()``"
msgstr "``last()``"

msgid "*Asynchronous version*: ``alast()``"
msgstr ""

msgid ""
"Works like  :meth:`first()`, but returns the last object in the queryset."
msgstr "与 :meth:`first()` 工作原理相同，但返回的是查询集中的最后一个对象。"

msgid "``alast()`` method was added."
msgstr ""

msgid "``aggregate()``"
msgstr "``aggregate()``"

msgid "*Asynchronous version*: ``aaggregate()``"
msgstr ""

msgid ""
"Returns a dictionary of aggregate values (averages, sums, etc.) calculated "
"over the ``QuerySet``. Each argument to ``aggregate()`` specifies a value "
"that will be included in the dictionary that is returned."
msgstr ""
"返回对 ``QuerySet`` 计算的聚合值（平均值、总和等）的字典。``aggregate()`` 的"
"每个参数都指定了一个将被包含在返回的字典中的值。"

msgid ""
"The aggregation functions that are provided by Django are described in "
"`Aggregation Functions`_ below. Since aggregates are also :doc:`query "
"expressions </ref/models/expressions>`, you may combine aggregates with "
"other aggregates or values to create complex aggregates."
msgstr ""
"Django 提供的聚合函数在下面的 `Aggregation Functions`_ 中介绍。由于聚合函数也"
"是 :doc:`查询表达式 </ref/models/expressions>`，所以你可以将聚合函数与其他聚"
"合函数或值结合起来，创建复杂的聚合函数。"

msgid ""
"Aggregates specified using keyword arguments will use the keyword as the "
"name for the annotation. Anonymous arguments will have a name generated for "
"them based upon the name of the aggregate function and the model field that "
"is being aggregated. Complex aggregates cannot use anonymous arguments and "
"must specify a keyword argument as an alias."
msgstr ""
"使用关键字参数指定的聚合将使用关键字作为注解的名称。匿名参数将根据聚合函数的"
"名称和被聚合的模型字段为其生成一个名称。复杂的聚合不能使用匿名参数，必须指定"
"一个关键字参数作为别名。"

msgid ""
"For example, when you are working with blog entries, you may want to know "
"the number of authors that have contributed blog entries:"
msgstr ""

msgid ""
"By using a keyword argument to specify the aggregate function, you can "
"control the name of the aggregation value that is returned:"
msgstr ""

msgid "``aaggregate()`` method was added."
msgstr ""

msgid "``exists()``"
msgstr "``exists()``"

msgid "*Asynchronous version*: ``aexists()``"
msgstr ""

msgid ""
"Returns ``True`` if the :class:`.QuerySet` contains any results, and "
"``False`` if not. This tries to perform the query in the simplest and "
"fastest way possible, but it *does* execute nearly the same query as a "
"normal :class:`.QuerySet` query."
msgstr ""
"如果 :class:`.QuerySet` 包含任何结果，则返回 ``True``，如果不包含，则返回 "
"``False``。该函数试图以最简单、最快速的方式执行查询，但它 *执行* 的查询与普通"
"的 :class:`.QuerySet` 查询几乎相同。"

msgid ""
":meth:`~.QuerySet.exists` is useful for searches relating to the existence "
"of any objects in a :class:`.QuerySet`, particularly in the context of a "
"large :class:`.QuerySet`."
msgstr ""
":meth:`~.QuerySet.existence` 对于与 :class:`.QuerySet` 中任何对象的存在有关的"
"搜索很有用，特别是在一个大的 :class:`.QuerySet` 的背景下。"

msgid "To find whether a queryset contains any items::"
msgstr "要查找一个查询集是否包含任何项目："

msgid "Which will be faster than::"
msgstr "这种方法比下面的方法更快："

msgid ""
"... but not by a large degree (hence needing a large queryset for efficiency "
"gains)."
msgstr "...但程度不高（因此需要大量的查询集才能获得效率提升）。"

msgid ""
"Additionally, if a ``some_queryset`` has not yet been evaluated, but you "
"know that it will be at some point, then using ``some_queryset.exists()`` "
"will do more overall work (one query for the existence check plus an extra "
"one to later retrieve the results) than using ``bool(some_queryset)``, which "
"retrieves the results and then checks if any were returned."
msgstr ""
"此外，如果一个 ``some_queryset`` 还没有被执行，但你知道它会在某个时候被执行，"
"那么使用 ``some_queryset.exences()`` 比使用 ``bool(some_queryset)`` 会做更多"
"的总体工作（一个存在性检查的查询加上一个额外的查询，以便以后检索结果），后者"
"检索结果，然后检查是否有任何返回。"

msgid "``aexists()`` method was added."
msgstr ""

msgid "``contains()``"
msgstr "``contains()``"

msgid "*Asynchronous version*: ``acontains()``"
msgstr ""

msgid ""
"Returns ``True`` if the :class:`.QuerySet` contains ``obj``, and ``False`` "
"if not. This tries to perform the query in the simplest and fastest way "
"possible."
msgstr ""
"如果 :class:`.QuerySet` 包含 ``obj``，返回 ``True``，如果不包含 ``False``。这"
"试图以最简单和最快的方式执行查询。"

msgid ""
":meth:`contains` is useful for checking an object membership in a :class:`."
"QuerySet`, particularly in the context of a large :class:`.QuerySet`."
msgstr ""
":meth:`contains` 对于检查一个对象在 :class:`.QuerySet` 中的成员资格很有用，特"
"别是在一个大的 :class:`.QuerySet` 的情况下。"

msgid "To check whether a queryset contains a specific item::"
msgstr "要检查一个查询集是否包含一个特定的项目："

msgid ""
"This will be faster than the following which requires evaluating and "
"iterating through the entire queryset::"
msgstr "这将比以下需要执行和迭代整个查询集的方法更快："

msgid ""
"Like :meth:`exists`, if ``some_queryset`` has not yet been evaluated, but "
"you know that it will be at some point, then using ``some_queryset."
"contains(obj)`` will make an additional database query, generally resulting "
"in slower overall performance."
msgstr ""
"像 :meth:`exists` 一样，如果 ``some_queryset`` 还没有被执行，但你知道它将在某"
"个时候被执行，那么使用 ``some_queryset.contains(obj)`` 将进行额外的数据库查"
"询，通常会导致整体性能变慢。"

msgid "``acontains()`` method was added."
msgstr ""

msgid "``update()``"
msgstr "``update()``"

msgid "*Asynchronous version*: ``aupdate()``"
msgstr ""

msgid ""
"Performs an SQL update query for the specified fields, and returns the "
"number of rows matched (which may not be equal to the number of rows updated "
"if some rows already have the new value)."
msgstr ""
"对指定的字段执行 SQL 更新查询，并返回匹配的行数（如果有些行已经有了新的值，则"
"可能不等于更新的行数）。"

msgid ""
"For example, to turn comments off for all blog entries published in 2010, "
"you could do this:"
msgstr ""

msgid ""
"(This assumes your ``Entry`` model has fields ``pub_date`` and "
"``comments_on``.)"
msgstr "（假定你的 ``Entry`` 模型有 ``pub_date`` 和 ``comments_on``。）"

msgid ""
"You can update multiple fields — there's no limit on how many. For example, "
"here we update the ``comments_on`` and ``headline`` fields:"
msgstr ""

msgid ""
"The ``update()`` method is applied instantly, and the only restriction on "
"the :class:`.QuerySet` that is updated is that it can only update columns in "
"the model's main table, not on related models. You can't do this, for "
"example:"
msgstr ""

msgid "Filtering based on related fields is still possible, though:"
msgstr ""

msgid ""
"You cannot call ``update()`` on a :class:`.QuerySet` that has had a slice "
"taken or can otherwise no longer be filtered."
msgstr ""
"你不能在一个 :class:`.QuerySet` 上调用 ``update()``，因为它已经被取走了一个片"
"断或者不能再被过滤。"

msgid "The ``update()`` method returns the number of affected rows:"
msgstr ""

msgid ""
"If you're just updating a record and don't need to do anything with the "
"model object, the most efficient approach is to call ``update()``, rather "
"than loading the model object into memory. For example, instead of doing "
"this::"
msgstr ""
"如果你只是更新一条记录，不需要对模型对象做任何事情，最有效的方法是调用 "
"``update()``，而不是将模型对象加载到内存中。例如，不要这样做："

msgid "...do this::"
msgstr "...要这样做："

msgid ""
"Using ``update()`` also prevents a race condition wherein something might "
"change in your database in the short period of time between loading the "
"object and calling ``save()``."
msgstr ""
"使用 ``update()`` 还可以防止在加载对象和调用 ``save()`` 之间的短暂时间内数据"
"库中的某些东西可能发生变化的竞争条件。"

msgid ""
"Finally, realize that ``update()`` does an update at the SQL level and, "
"thus, does not call any ``save()`` methods on your models, nor does it emit "
"the :attr:`~django.db.models.signals.pre_save` or :attr:`~django.db.models."
"signals.post_save` signals (which are a consequence of calling :meth:`Model."
"save() <django.db.models.Model.save>`). If you want to update a bunch of "
"records for a model that has a custom :meth:`~django.db.models.Model.save()` "
"method, loop over them and call :meth:`~django.db.models.Model.save()`, like "
"this::"
msgstr ""
"最后，要知道，``update()`` 是在 SQL 级别上进行更新，因此，它不会在模型上调用"
"任何 ``save()`` 方法，也不会发出 :attr:`~django.db. models.signals.pre_save` "
"或 :attr:`~django.db.models.signals.post_save` 信号（这是调用 :meth:`Model."
"save() <django.db.models.Model.save>` 的结果）。如果你想为一个有自定义 :meth:"
"`~django.db.models.Model.save()` 方法的模型更新一堆记录，在它们上面循环并调"
"用 :meth:`~django.db.models.Model.save()`，像这样："

msgid "``aupdate()`` method was added."
msgstr ""

msgid "Ordered queryset"
msgstr "有序的查询集"

msgid ""
"Chaining ``order_by()`` with ``update()`` is supported only on MariaDB and "
"MySQL, and is ignored for different databases. This is useful for updating a "
"unique field in the order that is specified without conflicts. For example::"
msgstr ""
"将 ``order_by()`` 与 ``update()`` 串联起来，只在 MariaDB 和 MySQL 上支持，对"
"于不同的数据库会被忽略。这对于按照指定的顺序更新一个唯一的字段是很有用的，没"
"有冲突。例如："

msgid ""
"``order_by()`` clause will be ignored if it contains annotations, inherited "
"fields, or lookups spanning relations."
msgstr "``order_by()`` 子句如果包含注释、继承字段或跨越关系的查找，将被忽略。"

msgid ""
"Performs an SQL delete query on all rows in the :class:`.QuerySet` and "
"returns the number of objects deleted and a dictionary with the number of "
"deletions per object type."
msgstr ""
"对 :class:`.QuerySet` 中的所有行执行 SQL 删除查询，并返回删除的对象数量和每个"
"对象类型的删除数量的字典。"

msgid ""
"The ``delete()`` is applied instantly. You cannot call ``delete()`` on a :"
"class:`.QuerySet` that has had a slice taken or can otherwise no longer be "
"filtered."
msgstr ""
"``delete()`` 是即时应用的。你不能对已经被取走一个片断或不能再被过滤的 :class:"
"`.QuerySet` 调用 ``delete()``。"

msgid "For example, to delete all the entries in a particular blog:"
msgstr ""

msgid ""
"By default, Django's :class:`~django.db.models.ForeignKey` emulates the SQL "
"constraint ``ON DELETE CASCADE`` — in other words, any objects with foreign "
"keys pointing at the objects to be deleted will be deleted along with them. "
"For example:"
msgstr ""

msgid ""
"This cascade behavior is customizable via the :attr:`~django.db.models."
"ForeignKey.on_delete` argument to the :class:`~django.db.models.ForeignKey`."
msgstr ""
"这种级联行为通过 :class:`~django.db.models.ForeignKey` 的 :attr:`~django.db."
"models.ForeignKey.on_delete` 参数定义。"

msgid ""
"The ``delete()`` method does a bulk delete and does not call any "
"``delete()`` methods on your models. It does, however, emit the :data:"
"`~django.db.models.signals.pre_delete` and :data:`~django.db.models.signals."
"post_delete` signals for all deleted objects (including cascaded deletions)."
msgstr ""
"``delete()`` 方法进行批量删除，并不调用模型上的任何 ``delete()`` 方法。但是，"
"它确实为所有被删除的对象（包括级联删除）发出 :data:`~django.db.models."
"signals.pre_delete` 和 :data:`~django.db.models.signals.post_delete` 信号。"

msgid ""
"Django needs to fetch objects into memory to send signals and handle "
"cascades. However, if there are no cascades and no signals, then Django may "
"take a fast-path and delete objects without fetching into memory. For large "
"deletes this can result in significantly reduced memory usage. The amount of "
"executed queries can be reduced, too."
msgstr ""
"Django 需要将对象获取到内存中来发送信号和处理级联。但是，如果没有级联和信号，"
"那么 Django 可能会采取快速路径删除对象，而不需要将其获取到内存中。对于大面积"
"的删除，这可以使内存使用量大大降低。也可以减少执行查询的数量。"

msgid ""
"ForeignKeys which are set to :attr:`~django.db.models.ForeignKey.on_delete` "
"``DO_NOTHING`` do not prevent taking the fast-path in deletion."
msgstr ""
"设置为 :attr:`~django.db.models.ForeignKey.on_delete` ``DO_NOTHING`` 的外键不"
"会阻止在删除时采取快速路径。"

msgid ""
"Note that the queries generated in object deletion is an implementation "
"detail subject to change."
msgstr "需要注意的是，对象删除中产生的查询是一个实现细节，可能会发生变化。"

msgid "``as_manager()``"
msgstr "``as_manager()``"

msgid ""
"Class method that returns an instance of :class:`~django.db.models.Manager` "
"with a copy of the ``QuerySet``’s methods. See :ref:`create-manager-with-"
"queryset-methods` for more details."
msgstr ""
"类方法，该方法返回一个 :class:`~django.db.models.Manager` 的实例，其中包含 "
"``QuerySet`` 的方法的副本。详见 :ref:`create-manager-with-queryset-"
"methods` 。"

msgid ""
"Note that unlike the other entries in this section, this does not have an "
"asynchronous variant as it does not execute a query."
msgstr ""

msgid "``explain()``"
msgstr "``explain()``"

msgid "*Asynchronous version*: ``aexplain()``"
msgstr ""

msgid ""
"Returns a string of the ``QuerySet``’s execution plan, which details how the "
"database would execute the query, including any indexes or joins that would "
"be used. Knowing these details may help you improve the performance of slow "
"queries."
msgstr ""
"返回一个 ``QuerySet`` 的执行计划的字符串，它详细说明了数据库将如何执行查询，"
"包括将使用的任何索引或联接。了解这些细节可以帮助你提高慢速查询的性能。"

msgid "For example, when using PostgreSQL:"
msgstr ""

msgid "The output differs significantly between databases."
msgstr "不同数据库之间的输出有很大的不同。"

msgid ""
"``explain()`` is supported by all built-in database backends except Oracle "
"because an implementation there isn't straightforward."
msgstr ""
"``explain()`` 得到了所有内置数据库后端的支持，但 Oracle 除外，因为在那里的实"
"现并不直接。"

msgid ""
"The ``format`` parameter changes the output format from the databases's "
"default, which is usually text-based. PostgreSQL supports ``'TEXT'``, "
"``'JSON'``, ``'YAML'``, and ``'XML'`` formats. MariaDB and MySQL support "
"``'TEXT'`` (also called ``'TRADITIONAL'``) and ``'JSON'`` formats. MySQL "
"8.0.16+ also supports an improved ``'TREE'`` format, which is similar to "
"PostgreSQL's ``'TEXT'`` output and is used by default, if supported."
msgstr ""
"``format`` 参数改变数据库默认的输出格式，通常是基于文本的。PostgreSQL 支持 "
"``''TEXT'``、``'JSON'``、``'YAML'`` 和 ``'XML'`` 格式。MariaDB 和 MySQL 支持 "
"``''TEXT'`` （也叫 ``'TRADITIONAL'``）和 ``'JSON'`` 格式。MySQL 8.0.16+ 还支"
"持改进的 ``'TREE'`` 格式，它类似于 PostgreSQL 的 ``'TEXT'`` 输出，如果支持的"
"话，默认使用。"

msgid ""
"Some databases accept flags that can return more information about the "
"query. Pass these flags as keyword arguments. For example, when using "
"PostgreSQL:"
msgstr ""

msgid ""
"On some databases, flags may cause the query to be executed which could have "
"adverse effects on your database. For example, the ``ANALYZE`` flag "
"supported by MariaDB, MySQL 8.0.18+, and PostgreSQL could result in changes "
"to data if there are triggers or if a function is called, even for a "
"``SELECT`` query."
msgstr ""
"有些数据库接受的标志可以返回更多 在一些数据库上，标志可能会导致查询被执行，这"
"可能会对你的数据库产生不利影响。 例如，MariaDB、MySQL 8.0.18+ 和 PostgreSQL "
"支持的 ``ANALYZE`` 标志，如果有触发器或调用函数，即使是 ``SELECT`` 查询，也可"
"能导致数据的改变。"

msgid "``aexplain()`` method was added."
msgstr ""

msgid "``Field`` lookups"
msgstr "``Field`` 查找"

msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the ``QuerySet`` methods :meth:"
"`filter()`, :meth:`exclude()` and :meth:`get()`."
msgstr ""
"字段查找是指定 SQL ``WHERE`` 子句的方法。它们被指定为 ``QuerySet`` 方法 :"
"meth:`filter()`、:meth:`exclude()` 和 :meth:`get()` 的关键字参数。"

msgid ""
"For an introduction, see :ref:`models and database queries documentation "
"<field-lookups-intro>`."
msgstr "介绍见 :ref:`模型和数据库查询文档 <field-lookups-intro>`。"

msgid ""
"Django's built-in lookups are listed below. It is also possible to write :"
"doc:`custom lookups </howto/custom-lookups>` for model fields."
msgstr ""
"Django 的内置查找功能如下。也可以为模型字段写 :doc:`自定义查找 </howto/"
"custom-lookups>`。"

msgid ""
"As a convenience when no lookup type is provided (like in ``Entry.objects."
"get(id=14)``) the lookup type is assumed to be :lookup:`exact`."
msgstr ""
"为方便起见，当没有提供查找类型时（如 ``Entry.objects.get(id=14)``），查找类型"
"被假定为 :lookup:`exact`。"

msgid "``exact``"
msgstr "``exact``"

msgid ""
"Exact match. If the value provided for comparison is ``None``, it will be "
"interpreted as an SQL ``NULL`` (see :lookup:`isnull` for more details)."
msgstr ""
"完全匹配。如果提供的比较值是 ``None``，它将被解释为 SQL ``NULL`` （详见 :"
"lookup:`isnull`）。"

msgid "SQL equivalents:"
msgstr "SQL 等价于："

msgid "MySQL comparisons"
msgstr "MySQL 比较"

msgid ""
"In MySQL, a database table's \"collation\" setting determines whether "
"``exact`` comparisons are case-sensitive. This is a database setting, *not* "
"a Django setting. It's possible to configure your MySQL tables to use case-"
"sensitive comparisons, but some trade-offs are involved. For more "
"information about this, see the :ref:`collation section <mysql-collation>` "
"in the :doc:`databases </ref/databases>` documentation."
msgstr ""
"在 MySQL 中，数据库表的“字符序”设置决定了 ``act`` 比较是否区分大小写。这是一"
"个数据库设置，而 *不是* Django 设置。可以配置你的 MySQL 表来使用区分大小写的"
"比较，但是会有一些折衷。关于这方面的更多信息，请参阅 :doc:`数据库 </ref/"
"databases>` 文档中的 :ref:`字符序部分 <mysql-collation>`。"

msgid "``iexact``"
msgstr "``iexact``"

msgid ""
"Case-insensitive exact match. If the value provided for comparison is "
"``None``, it will be interpreted as an SQL ``NULL`` (see :lookup:`isnull` "
"for more details)."
msgstr ""
"不区分大小写的完全匹配。如果提供的比较值是 ``None``，它将被解释为 SQL "
"``NULL`` （详见 :lookup:`isnull`）。"

msgid ""
"Note the first query will match ``'Beatles Blog'``, ``'beatles blog'``, "
"``'BeAtLes BLoG'``, etc."
msgstr ""
"注意第一个查询会匹配 ``'Beatles Blog'``、``'beatles blog'``、``'BeAtLes "
"BLoG'`` 等。"

msgid "SQLite users"
msgstr "SQLite 用户"

msgid ""
"When using the SQLite backend and non-ASCII strings, bear in mind the :ref:"
"`database note <sqlite-string-matching>` about string comparisons. SQLite "
"does not do case-insensitive matching for non-ASCII strings."
msgstr ""
"当使用 SQLite 后台和非 ASCII 字符串时，请记住 :ref:`database note <sqlite-"
"string-matching>` 中关于字符串比较的内容。SQLite 对非 ASCII 字符串不进行区分"
"大小写的匹配。"

msgid "Case-sensitive containment test."
msgstr "区分大小写的包含测试。"

msgid ""
"Note this will match the headline ``'Lennon honored today'`` but not "
"``'lennon honored today'``."
msgstr ""
"请注意，这将与标题 ``'Lennon honored today'`` 相匹配，而不是 ``'lennon "
"honored today'``。"

msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``contains`` acts "
"like ``icontains`` for SQLite. See the :ref:`database note <sqlite-string-"
"matching>` for more information."
msgstr ""
"SQLite 不支持区分大小写的 ``LIKE`` 语句；``contains`` 的作用就像 SQLite 的 "
"``icontains``。更多信息请参见 :ref:`database note <sqlite-string-matching>`。"

msgid "``icontains``"
msgstr "``icontains``"

msgid "Case-insensitive containment test."
msgstr "不区分大小写的包含测试。"

msgid ""
"When using the SQLite backend and non-ASCII strings, bear in mind the :ref:"
"`database note <sqlite-string-matching>` about string comparisons."
msgstr ""
"当使用 SQLite 后端和非 ASCII 字符串时，请记住 :ref:`database note <sqlite-"
"string-matching>` 中关于字符串比较的内容。"

msgid "``in``"
msgstr "``in``"

msgid ""
"In a given iterable; often a list, tuple, or queryset. It's not a common use "
"case, but strings (being iterables) are accepted."
msgstr ""
"在一个给定的可迭代对象中；通常是一个列表、元组或查询集。这不是一个常见的用"
"例，但字符串（可迭代）是可以接受的。"

msgid ""
"You can also use a queryset to dynamically evaluate the list of values "
"instead of providing a list of literal values::"
msgstr "你也可以使用一个查询集来动态计算值列表，而不是提供一个字面值列表："

msgid "This queryset will be evaluated as subselect statement:"
msgstr "该查询集将作为子选择语句执行："

msgid ""
"If you pass in a ``QuerySet`` resulting from ``values()`` or "
"``values_list()`` as the value to an ``__in`` lookup, you need to ensure you "
"are only extracting one field in the result. For example, this will work "
"(filtering on the blog names)::"
msgstr ""
"如果你把一个由 ``values()`` 或 ``values_list()`` 产生的 ``QuerySet`` 作为值传"
"递给 ``__in`` 查找，你需要确保你只提取结果中的一个字段。例如，这样做就可以了"
"（过滤博客名）："

msgid ""
"This example will raise an exception, since the inner query is trying to "
"extract two field values, where only one is expected::"
msgstr ""
"这个例子会引发一个异常，因为内部查询正试图提取两个字段值，而预期只有一个："

msgid "Performance considerations"
msgstr "性能考量"

msgid ""
"Be cautious about using nested queries and understand your database server's "
"performance characteristics (if in doubt, benchmark!). Some database "
"backends, most notably MySQL, don't optimize nested queries very well. It is "
"more efficient, in those cases, to extract a list of values and then pass "
"that into the second query. That is, execute two queries instead of one::"
msgstr ""
"谨慎使用嵌套查询，了解你的数据库服务器的性能特点（如果有疑问，请做基准测"
"试！）。一些数据库后端，最主要的是 MySQL，并不能很好地优化嵌套查询。在这些情"
"况下，提取一个值的列表，然后将其传递到第二个查询中会更有效率。也就是说，执行"
"两个查询而不是一个查询："

msgid ""
"Note the ``list()`` call around the Blog ``QuerySet`` to force execution of "
"the first query. Without it, a nested query would be executed, because :ref:"
"`querysets-are-lazy`."
msgstr ""
"注意 Blog ``QuerySet`` 周围的 ``list()`` 调用，以强制执行第一个查询。如果没有"
"它，一个嵌套查询就会被执行，因为 :ref:`querysets-are-lazy`。"

msgid "``gt``"
msgstr "``gt``"

msgid "Greater than."
msgstr "大于。"

msgid "``gte``"
msgstr "``gte``"

msgid "Greater than or equal to."
msgstr "大于等于。"

msgid "``lt``"
msgstr "``lt``"

msgid "Less than."
msgstr "小于。"

msgid "``lte``"
msgstr "``lte``"

msgid "Less than or equal to."
msgstr "小于等于"

msgid "Case-sensitive starts-with."
msgstr "区分大小写的开头为。"

msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``startswith`` "
"acts like ``istartswith`` for SQLite."
msgstr ""
"SQLite 不支持区分大小写的 ``LIKE`` 语句；``startswith`` 的作用就像 SQLite 的 "
"``istartswith``。"

msgid "``istartswith``"
msgstr "``istartswith``"

msgid "Case-insensitive starts-with."
msgstr "不区分大小写的开头为。"

msgid "Case-sensitive ends-with."
msgstr "区分大小写的结尾为。"

msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``endswith`` acts "
"like ``iendswith`` for SQLite. Refer to the :ref:`database note <sqlite-"
"string-matching>` documentation for more."
msgstr ""
"SQLite 不支持区分大小写的 ``LIKE`` 语句；``endswith`` 的作用类似于 SQLite 的 "
"``iendswith``。更多内容请参考 :ref:`database note <sqlite-string-matching>` "
"文档。"

msgid "``iendswith``"
msgstr "``iendswith``"

msgid "Case-insensitive ends-with."
msgstr "不区分大小写的结尾为。"

msgid "``range``"
msgstr "``range``"

msgid "Range test (inclusive)."
msgstr "范围测试（含）。"

msgid ""
"You can use ``range`` anywhere you can use ``BETWEEN`` in SQL — for dates, "
"numbers and even characters."
msgstr ""
"在 SQL 中，你可以在任何你可以使用 ``BETWEEN`` 的地方使用 ``range``——用于日"
"期、数字甚至字符。"

msgid ""
"Filtering a ``DateTimeField`` with dates won't include items on the last "
"day, because the bounds are interpreted as \"0am on the given date\". If "
"``pub_date`` was a ``DateTimeField``, the above expression would be turned "
"into this SQL:"
msgstr ""
"用日期过滤 ``DateTimeField`` 不会包括最后一天的项目，因为界限被解释为“给定日"
"期的 0 点”。如果 ``pub_date`` 是一个 ``DateTimeField``，上面的表达式就会变成"
"这个 SQL："

msgid "Generally speaking, you can't mix dates and datetimes."
msgstr "一般来说，你不能把日期和日期时间混在一起。"

msgid "``date``"
msgstr "``date``"

msgid ""
"For datetime fields, casts the value as date. Allows chaining additional "
"field lookups. Takes a date value."
msgstr ""
"对于日期时间字段，将值投射为日期。允许链接其他字段的查找。取一个日期值。"

msgid ""
"(No equivalent SQL code fragment is included for this lookup because "
"implementation of the relevant query varies among different database "
"engines.)"
msgstr ""
"（由于不同的数据库引擎对相关查询的实现各不相同，因此本次查询不包含等效的 SQL "
"代码片段）。"

msgid ""
"When :setting:`USE_TZ` is ``True``, fields are converted to the current time "
"zone before filtering. This requires :ref:`time zone definitions in the "
"database <database-time-zone-definitions>`."
msgstr ""
"当 :setting:`USE_TZ` 为 ``True`` 时，字段在过滤前会被转换为当前时区。这需要 :"
"ref:`数据库中的时区定义 <database-time-zone-definitions>`。"

msgid "``year``"
msgstr "``year``"

msgid ""
"For date and datetime fields, an exact year match. Allows chaining "
"additional field lookups. Takes an integer year."
msgstr ""
"对于日期和日期时间字段，精确匹配年份。允许链接其他字段的查询。取整数年。"

msgid "(The exact SQL syntax varies for each database engine.)"
msgstr "（确切的 SQL 语法因每个数据库引擎而异）。"

msgid ""
"When :setting:`USE_TZ` is ``True``, datetime fields are converted to the "
"current time zone before filtering. This requires :ref:`time zone "
"definitions in the database <database-time-zone-definitions>`."
msgstr ""
"当 :setting:`USE_TZ` 为 ``True`` 时，日期时间字段会在过滤前转换为当前时区。这"
"需要 :ref:`数据库中的时区定义 <database-time-zone-definitions>`。"

msgid "``iso_year``"
msgstr "``iso_year``"

msgid ""
"For date and datetime fields, an exact ISO 8601 week-numbering year match. "
"Allows chaining additional field lookups. Takes an integer year."
msgstr ""
"对于日期和日期时间字段，精确的 ISO 8601 周号年份匹配。允许链接其他字段的查"
"询。取整数年。"

msgid "``month``"
msgstr "``month``"

msgid ""
"For date and datetime fields, an exact month match. Allows chaining "
"additional field lookups. Takes an integer 1 (January) through 12 (December)."
msgstr ""
"对于日期和日期时间字段，精确的月份匹配。允许链接其他字段的查询。取整数 1（1 "
"月）到 12（12 月）。"

msgid "``day``"
msgstr "``day``"

msgid ""
"For date and datetime fields, an exact day match. Allows chaining additional "
"field lookups. Takes an integer day."
msgstr ""
"对于日期和日期时间字段，精确匹配日期。允许链接其他字段的查询。取整数日。"

msgid ""
"Note this will match any record with a pub_date on the third day of the "
"month, such as January 3, July 3, etc."
msgstr ""
"请注意，这将匹配任何带有 pub_date 的月份第三天的记录，如 1 月 3 日，7 月 3 日"
"等。"

msgid "``week``"
msgstr "``week``"

msgid ""
"For date and datetime fields, return the week number (1-52 or 53) according "
"to `ISO-8601 <https://en.wikipedia.org/wiki/ISO-8601>`_, i.e., weeks start "
"on a Monday and the first week contains the year's first Thursday."
msgstr ""
"对于日期和日期时间字段，根据 `ISO-8601 <https://en.wikipedia.org/wiki/"
"ISO-8601>`_ ，返回星期号（1-52 或 53），即星期从星期一开始，第一周包含一年的"
"第一个星期四。"

msgid "``week_day``"
msgstr "``week_day``"

msgid ""
"For date and datetime fields, a 'day of the week' match. Allows chaining "
"additional field lookups."
msgstr "对于日期和日期时间字段，“星期几”匹配。允许链接其他字段的查询。"

msgid ""
"Takes an integer value representing the day of week from 1 (Sunday) to 7 "
"(Saturday)."
msgstr "从 1（星期日）到 7（星期六）取一个整数值，代表一周的一天。"

msgid ""
"Note this will match any record with a ``pub_date`` that falls on a Monday "
"(day 2 of the week), regardless of the month or year in which it occurs. "
"Week days are indexed with day 1 being Sunday and day 7 being Saturday."
msgstr ""
"请注意，这将匹配任何带有 ``pub_date`` 的记录，这些记录都是在星期一（一周的第 "
"2 天）发生的，不管它发生在哪一年哪一月。周日的索引，第 1 天是周日，第 7 天是"
"周六。"

msgid "``iso_week_day``"
msgstr "``iso_week_day``"

msgid ""
"For date and datetime fields, an exact ISO 8601 day of the week match. "
"Allows chaining additional field lookups."
msgstr ""
"对于日期和日期时间字段，精确匹配 ISO 8601 星期几。允许链接其他字段的查询。"

msgid ""
"Takes an integer value representing the day of the week from 1 (Monday) to 7 "
"(Sunday)."
msgstr "取一个整数值，代表一周的 1（星期一）到 7（星期日）。"

msgid ""
"Note this will match any record with a ``pub_date`` that falls on a Monday "
"(day 1 of the week), regardless of the month or year in which it occurs. "
"Week days are indexed with day 1 being Monday and day 7 being Sunday."
msgstr ""
"请注意，这将匹配任何带有 ``pub_date`` 的记录，这些记录都是在星期一（一周的第 "
"1 天）发生的，不管它发生在哪个月或哪个年。周日的索引是第 1 天是星期一，第 7 "
"天是星期天。"

msgid "``quarter``"
msgstr "``quarter``"

msgid ""
"For date and datetime fields, a 'quarter of the year' match. Allows chaining "
"additional field lookups. Takes an integer value between 1 and 4 "
"representing the quarter of the year."
msgstr ""
"对于日期和日期时间字段，“一年的四分之一”匹配。允许链接额外的字段查找。取 1 "
"到 4 之间的整数值，代表一年中的季度。"

msgid ""
"Example to retrieve entries in the second quarter (April 1 to June 30)::"
msgstr "检索第二季度（4 月 1 日至 6 月 30 日）的条目示例："

msgid "``time``"
msgstr "``time``"

msgid ""
"For datetime fields, casts the value as time. Allows chaining additional "
"field lookups. Takes a :class:`datetime.time` value."
msgstr ""
"对于日期时间字段，将其值强制转换为时间。允许链式附加字段查找。取一个 :class:"
"`datetime.time` 的值。"

msgid "``hour``"
msgstr "``hour``"

msgid ""
"For datetime and time fields, an exact hour match. Allows chaining "
"additional field lookups. Takes an integer between 0 and 23."
msgstr ""
"对于日期时间和时间字段，精确的小时匹配。允许链式查找其他字段。取 0 到 23 之间"
"的整数。"

msgid "``minute``"
msgstr "``minute``"

msgid ""
"For datetime and time fields, an exact minute match. Allows chaining "
"additional field lookups. Takes an integer between 0 and 59."
msgstr ""
"对于日期时间和时间字段，精确的分钟匹配。允许链式查找其他字段。取 0 到 59 之间"
"的整数。"

msgid "``second``"
msgstr "``second``"

msgid ""
"For datetime and time fields, an exact second match. Allows chaining "
"additional field lookups. Takes an integer between 0 and 59."
msgstr ""
"对于日期时间和时间字段，完全秒配。允许链式查找其他字段。取 0 到 59 之间的整"
"数。"

msgid "``isnull``"
msgstr "``isnull``"

msgid ""
"Takes either ``True`` or ``False``, which correspond to SQL queries of ``IS "
"NULL`` and ``IS NOT NULL``, respectively."
msgstr ""
"取 ``True`` 或 ``False``，分别对应 ``IS NULL`` 和 ``IS NOT NULL`` 的 SQL 查"
"询。"

msgid "``regex``"
msgstr "``regex``"

msgid "Case-sensitive regular expression match."
msgstr "区分大小写的正则表达式匹配。"

msgid ""
"The regular expression syntax is that of the database backend in use. In the "
"case of SQLite, which has no built in regular expression support, this "
"feature is provided by a (Python) user-defined REGEXP function, and the "
"regular expression syntax is therefore that of Python's ``re`` module."
msgstr ""
"正则表达式语法是使用中的数据库后端的语法。对于没有内置正则表达式支持的 "
"SQLite 来说，这个功能是由（Python）用户定义的 REGEXP 函数提供的，因此正则表达"
"式语法是 Python 的 ``re`` 模块的语法。"

msgid ""
"Using raw strings (e.g., ``r'foo'`` instead of ``'foo'``) for passing in the "
"regular expression syntax is recommended."
msgstr ""
"建议使用原始字符串（例如，用 ``r'foo'`` 代替 ``'foo'``）来传递正则表达式语"
"法。"

msgid "``iregex``"
msgstr "``iregex``"

msgid "Case-insensitive regular expression match."
msgstr "不区分大小写的正则表达式匹配。"

msgid "Aggregation functions"
msgstr "聚合函数"

msgid ""
"Django provides the following aggregation functions in the ``django.db."
"models`` module. For details on how to use these aggregate functions, see :"
"doc:`the topic guide on aggregation </topics/db/aggregation>`. See the :"
"class:`~django.db.models.Aggregate` documentation to learn how to create "
"your aggregates."
msgstr ""
"Django 在 ``django.db.models`` 模块中提供了以下聚合函数。关于如何使用这些聚合"
"函数的细节，请参见 :doc:`关于聚合的主题指南 </topics/db/aggregation>`。参见 :"
"class:`~django.db.models.Aggregate` 文档，了解如何创建你的聚合函数。"

msgid ""
"SQLite can't handle aggregation on date/time fields out of the box. This is "
"because there are no native date/time fields in SQLite and Django currently "
"emulates these features using a text field. Attempts to use aggregation on "
"date/time fields in SQLite will raise ``NotSupportedError``."
msgstr ""
"SQLite 无法处理日期／时间字段的聚合。这是因为 SQLite 中没有原生的日期／时间字"
"段，而 Django 目前使用文本字段来模拟这些功能。试图在 SQLite 中使用日期／时间"
"字段上的聚合将引发 ``NotSupportedError``。"

msgid "Empty querysets or groups"
msgstr ""

msgid ""
"Aggregation functions return ``None`` when used with an empty ``QuerySet`` "
"or group. For example, the ``Sum`` aggregation function returns ``None`` "
"instead of ``0`` if the ``QuerySet`` contains no entries or for any empty "
"group in a non-empty ``QuerySet``. To return another value instead, define "
"the ``default`` argument. ``Count`` is an exception to this behavior; it "
"returns ``0`` if the ``QuerySet`` is empty since ``Count`` does not support "
"the ``default`` argument."
msgstr ""

msgid "All aggregates have the following parameters in common:"
msgstr "所有聚合体都有以下共同的参数："

msgid ""
"Strings that reference fields on the model, transforms of the field, or :doc:"
"`query expressions </ref/models/expressions>`."
msgstr ""
"引用模型上的字段的字符串，字段的转换，或 :doc:`查询表达式 </ref/models/"
"expressions>`。"

msgid "``output_field``"
msgstr "``output_field``"

msgid ""
"An optional argument that represents the :doc:`model field </ref/models/"
"fields>` of the return value"
msgstr "一个可选的参数，表示返回值的 :doc:`模型字段 </ref/models/fields>`"

msgid ""
"When combining multiple field types, Django can only determine the "
"``output_field`` if all fields are of the same type. Otherwise, you must "
"provide the ``output_field`` yourself."
msgstr ""
"当组合多个字段类型时，Django 只能在所有字段类型相同的情况下确定 "
"``output_field``。否则，你必须自己提供 ``output_field``。"

msgid "``filter``"
msgstr "``filter``"

msgid ""
"An optional :class:`Q object <django.db.models.Q>` that's used to filter the "
"rows that are aggregated."
msgstr "一个可选的 :class:`Q 对象 <django.db.models.Q>`，用于过滤被聚合的行。"

msgid ""
"See :ref:`conditional-aggregation` and :ref:`filtering-on-annotations` for "
"example usage."
msgstr ""
"参见 :ref:`conditional-aggregation` 和 :ref:`filtering-on-annotations` 的用法"
"示例。"

msgid ""
"An optional argument that allows specifying a value to use as a default "
"value when the queryset (or grouping) contains no entries."
msgstr ""
"一个可选的参数，允许指定一个值作为默认值，当查询集（或分组）不包含条目时使"
"用。"

msgid "``**extra``"
msgstr "``**extra``"

msgid ""
"Keyword arguments that can provide extra context for the SQL generated by "
"the aggregate."
msgstr "关键字参数，可以为聚合生成的 SQL 提供额外的上下文。"

msgid "``Avg``"
msgstr "``Avg``"

msgid ""
"Returns the mean value of the given expression, which must be numeric unless "
"you specify a different ``output_field``."
msgstr ""
"返回给定表达式的平均值，除非指定不同的 ``output_field``，否则必须是数值。"

msgid "Default alias: ``<field>__avg``"
msgstr "默认别名：``<field>__avg``"

msgid ""
"Return type: ``float`` if input is ``int``, otherwise same as input field, "
"or ``output_field`` if supplied. If the queryset or grouping is empty, "
"``default`` is returned."
msgstr ""

msgid ""
"Optional. If ``distinct=True``, ``Avg`` returns the mean value of unique "
"values. This is the SQL equivalent of ``AVG(DISTINCT <field>)``. The default "
"value is ``False``."
msgstr ""

msgid "``Count``"
msgstr "``Count``"

msgid ""
"Returns the number of objects that are related through the provided "
"expression. ``Count('*')`` is equivalent to the SQL ``COUNT(*)`` expression."
msgstr ""

msgid "Default alias: ``<field>__count``"
msgstr "默认别名：``<field>__count``"

msgid "Return type: ``int``"
msgstr "返回类型：``int``"

msgid ""
"Optional. If ``distinct=True``, the count will only include unique "
"instances. This is the SQL equivalent of ``COUNT(DISTINCT <field>)``. The "
"default value is ``False``."
msgstr ""

msgid "``Max``"
msgstr "``Max``"

msgid "Returns the maximum value of the given expression."
msgstr "返回给定表达式的最大值。"

msgid "Default alias: ``<field>__max``"
msgstr "默认别名：``<field>__max``"

msgid ""
"Return type: same as input field, or ``output_field`` if supplied. If the "
"queryset or grouping is empty, ``default`` is returned."
msgstr ""

msgid "``Min``"
msgstr "``Min``"

msgid "Returns the minimum value of the given expression."
msgstr "返回给定表达式的最小值。"

msgid "Default alias: ``<field>__min``"
msgstr "默认别名：``<field>__min``"

msgid "``StdDev``"
msgstr "``StdDev``"

msgid "Returns the standard deviation of the data in the provided expression."
msgstr "返回给定表达式中数据的标准差。"

msgid "Default alias: ``<field>__stddev``"
msgstr "默认别名：``<field>__stddev``"

msgid ""
"Optional. By default, ``StdDev`` returns the population standard deviation. "
"However, if ``sample=True``, the return value will be the sample standard "
"deviation."
msgstr ""

msgid "``Sum``"
msgstr "``Sum``"

msgid "Computes the sum of all values of the given expression."
msgstr "计算给定表达式的所有值的总和。"

msgid "Default alias: ``<field>__sum``"
msgstr "默认别名：``<field>__sum``"

msgid ""
"Optional. If ``distinct=True``, ``Sum`` returns the sum of unique values. "
"This is the SQL equivalent of ``SUM(DISTINCT <field>)``. The default value "
"is ``False``."
msgstr ""

msgid "``Variance``"
msgstr "``Variance``"

msgid "Returns the variance of the data in the provided expression."
msgstr "返回给定表达式中数据的方差。"

msgid "Default alias: ``<field>__variance``"
msgstr "默认别名：``<field>__variance``"

msgid ""
"Optional. By default, ``Variance`` returns the population variance. However, "
"if ``sample=True``, the return value will be the sample variance."
msgstr ""

msgid "Query-related tools"
msgstr "查询相关工具"

msgid ""
"This section provides reference material for query-related tools not "
"documented elsewhere."
msgstr "本节提供了与查询相关的工具的参考资料，其他地方没有记载。"

msgid "``Q()`` objects"
msgstr "``Q()`` 对象"

msgid ""
"A ``Q()`` object represents an SQL condition that can be used in database-"
"related operations. It's similar to how an :class:`F() <django.db.models.F>` "
"object represents the value of a model field or annotation. They make it "
"possible to define and reuse conditions, and combine them using operators "
"such as ``|`` (``OR``), ``&`` (``AND``), and ``^`` (``XOR``). See :ref:"
"`complex-lookups-with-q`."
msgstr ""

msgid "Support for the ``^`` (``XOR``) operator was added."
msgstr ""

msgid "``Prefetch()`` objects"
msgstr "``Prefetch()`` 对象"

msgid ""
"The ``Prefetch()`` object can be used to control the operation of :meth:"
"`~django.db.models.query.QuerySet.prefetch_related()`."
msgstr ""
"``Prefetch()`` 对象可以用来控制 :meth:`~django.db.models.querySet."
"prefetch_related()` 的操作。"

msgid ""
"The ``lookup`` argument describes the relations to follow and works the same "
"as the string based lookups passed to :meth:`~django.db.models.query."
"QuerySet.prefetch_related()`. For example:"
msgstr ""
"``lookup`` 参数描述了要遵循的关系，并且与传递给 :meth:`~django.db.models."
"query.QuerySet.prefetch_related()` 的基于字符串的查找相同。 例如："

msgid ""
"The ``queryset`` argument supplies a base ``QuerySet`` for the given lookup. "
"This is useful to further filter down the prefetch operation, or to call :"
"meth:`~django.db.models.query.QuerySet.select_related()` from the prefetched "
"relation, hence reducing the number of queries even further:"
msgstr ""
"``queryset`` 参数为给定的查询提供基本的 ``QuerySet``。 这对于进一步过滤预取操"
"作或从预取关系中调用 :meth:`~django.db.models.query.QuerySet."
"select_related()` 很有用，从而进一步减少了查询数量："

msgid ""
"The ``to_attr`` argument sets the result of the prefetch operation to a "
"custom attribute:"
msgstr "``to_attr`` 参数将预取操作的结果设置为自定义属性："

msgid ""
"When using ``to_attr`` the prefetched result is stored in a list. This can "
"provide a significant speed improvement over traditional "
"``prefetch_related`` calls which store the cached result within a "
"``QuerySet`` instance."
msgstr ""
"当使用 ``to_attr`` 时，预取结果存储在列表中。 与传统的 ``prefetch_related`` "
"调用相比，这可以显着提高速度，传统的 ``prefetch_related`` 调用将缓存的结果存"
"储在 ``QuerySet`` 实例中。"

msgid "``prefetch_related_objects()``"
msgstr "``prefetch_related_objects()``"

msgid ""
"Prefetches the given lookups on an iterable of model instances. This is "
"useful in code that receives a list of model instances as opposed to a "
"``QuerySet``; for example, when fetching models from a cache or "
"instantiating them manually."
msgstr ""
"在作为模型实例的可迭代对象上预取给定的查找。这在接收模型实例列表而不是 "
"``QuerySet`` 的代码中很有用；例如，从缓存中获取模型或手动实例化它们时。"

msgid ""
"Pass an iterable of model instances (must all be of the same class) and the "
"lookups or :class:`Prefetch` objects you want to prefetch for. For example:"
msgstr ""

msgid ""
"When using multiple databases with ``prefetch_related_objects``, the "
"prefetch query will use the database associated with the model instance. "
"This can be overridden by using a custom queryset in a related lookup."
msgstr ""
"当使用 ``prefetch_related_objects`` 的多个数据库时，预取查询将使用与模型实例"
"相关的数据库。这可以通过在相关查找中使用自定义查询集来覆盖。"

msgid "``FilteredRelation()`` objects"
msgstr "``FilteredRelation()`` 对象"

msgid "The name of the field on which you'd like to filter the relation."
msgstr "你想过滤关系的字段名。"

msgid "A :class:`~django.db.models.Q` object to control the filtering."
msgstr "一个 :class:`~django.db.models.Q` 对象来控制过滤。"

msgid ""
"``FilteredRelation`` is used with :meth:`~.QuerySet.annotate()` to create an "
"``ON`` clause when a ``JOIN`` is performed. It doesn't act on the default "
"relationship but on the annotation name (``pizzas_vegetarian`` in example "
"below)."
msgstr ""
"``FilteredRelation`` 与 :meth:`~.QuerySet.annotate()` 一起使用，在执行 "
"``JOIN`` 时创建一个 ``ON`` 子句。它不作用于默认的关系，而是作用于注解名称（下"
"面例子中的 ``pizzas_vegetarian``）。"

msgid ""
"For example, to find restaurants that have vegetarian pizzas with "
"``'mozzarella'`` in the name:"
msgstr ""

msgid ""
"If there are a large number of pizzas, this queryset performs better than:"
msgstr ""

msgid ""
"because the filtering in the ``WHERE`` clause of the first queryset will "
"only operate on vegetarian pizzas."
msgstr "因为第一个查询集的 ``WHERE`` 子句中的过滤只对素食披萨进行操作。"

msgid "``FilteredRelation`` doesn't support:"
msgstr "``FilteredRelation`` 不支持："

msgid ":meth:`.QuerySet.only` and :meth:`~.QuerySet.prefetch_related`."
msgstr ":meth:`.QuerySet.only` 和 :meth:`~.QuerySet.prefetch_related`。"

msgid ""
"A :class:`~django.contrib.contenttypes.fields.GenericForeignKey` inherited "
"from a parent model."
msgstr ""
"一个从父模型继承的 :class:`~django.contrib.contenttypes.fields."
"GenericForeignKey`。"

msgid "Related objects reference"
msgstr "关联对象参考"

msgid ""
"A \"related manager\" is a manager used in a one-to-many or many-to-many "
"related context. This happens in two cases:"
msgstr ""
"“关系管理器”是一个用于处理一对多和多对多关系的管理器。在以下两种情况用到："

msgid ""
"The \"other side\" of a :class:`~django.db.models.ForeignKey` relation. That "
"is::"
msgstr ":class:`~django.db.models.ForeignKey` 关系的“另一边”。即："

msgid ""
"In the above example, the methods below will be available on the manager "
"``blog.entry_set``."
msgstr ""

msgid "Both sides of a :class:`~django.db.models.ManyToManyField` relation ::"
msgstr ""

msgid ""
"In this example, the methods below will be available both on ``topping."
"pizza_set`` and on ``pizza.toppings``."
msgstr ""
"在这个例子中，下文列出的方法在 ``topping.pizza_set`` 和 ``pizza.toppings`` 中"
"均可用。"

msgid "*Asynchronous version*: ``aadd``"
msgstr ""

msgid "Adds the specified model objects to the related object set."
msgstr "将指定的模型对象加入关联对象集。"

msgid ""
"In the example above, in the case of a :class:`~django.db.models.ForeignKey` "
"relationship, :meth:`QuerySet.update() <django.db.models.query.QuerySet."
"update>` is used to perform the update. This requires the objects to already "
"be saved."
msgstr ""
"上述例子中，由于有 :class:`~django.db.models.ForeignKey` 关系，才可以使用 :"
"meth:`QuerySet.update() <django.db.models.query.QuerySet.update>` 更新数据。"
"这要求对象事先已经被保存在数据库内了。"

msgid ""
"You can use the ``bulk=False`` argument to instead have the related manager "
"perform the update by calling ``e.save()``."
msgstr ""
"你可以使用 ``bulk=False`` 参数让关系管理器通过调用 ``e.save()`` 来执行更新操"
"作。"

msgid ""
"Using ``add()`` with a many-to-many relationship, however, will not call any "
"``save()`` methods (the ``bulk`` argument doesn't exist), but rather create "
"the relationships using :meth:`QuerySet.bulk_create() <django.db.models."
"query.QuerySet.bulk_create>`. If you need to execute some custom logic when "
"a relationship is created, listen to the :data:`~django.db.models.signals."
"m2m_changed` signal, which will trigger ``pre_add`` and ``post_add`` actions."
msgstr ""
"但是，在多对多关系中使用 ``add()``，不会调用任何 ``save()`` 方法（``bulk`` 参"
"数不存在），而是使用 :meth:`QuerySet.bulk_create() <django.db.models."
"querySet.bulk_create>` 创建关系。如果需要在创建关系时执行一些自定义逻辑，可以"
"监听 :data:`~django.db.models.signals.m2m_changed` 信号，它将触发 "
"``pre_add`` 和 ``post_add`` 动作。"

msgid ""
"Using ``add()`` on a relation that already exists won't duplicate the "
"relation, but it will still trigger signals."
msgstr "在已经存在的关系上使用 ``add()`` 不会重复关系，但仍然会触发信号。"

msgid ""
"For many-to-many relationships ``add()`` accepts either model instances or "
"field values, normally primary keys, as the ``*objs`` argument."
msgstr ""
"对于多对多关系，``add()`` 接受模型实例或字段值，通常是主键，作为 ``*objs`` 参"
"数。"

msgid ""
"Use the ``through_defaults`` argument to specify values for the new :ref:"
"`intermediate model <intermediary-manytomany>` instance(s), if needed. You "
"can use callables as values in the ``through_defaults`` dictionary and they "
"will be evaluated once before creating any intermediate instance(s)."
msgstr ""
"如果需要的话，使用 ``through_defaults`` 参数为新的 :ref:`中间模型 "
"<intermediary-manytomany>` 实例指定值。你可以使用可调用对象作为 "
"``through_defaults`` 字典中的值，它们将在创建任何中间实例之前被执行一次。"

msgid "``aadd()`` method was added."
msgstr ""

msgid "*Asynchronous version*: ``acreate``"
msgstr ""

msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object:"
msgstr ""

msgid "This is equivalent to (but simpler than):"
msgstr ""

msgid ""
"Note that there's no need to specify the keyword argument of the model that "
"defines the relationship. In the above example, we don't pass the parameter "
"``blog`` to ``create()``. Django figures out that the new ``Entry`` object's "
"``blog`` field should be set to ``b``."
msgstr ""
"无需指定定义了模型间关系的关键字参数。在上述例子中，我们并未向 ``create()`` "
"传递参数 ``blog``。Django 知道要将新 ``Entry`` 对象的 ``blog`` 字段设置为 "
"``b``。"

msgid ""
"Use the ``through_defaults`` argument to specify values for the new :ref:"
"`intermediate model <intermediary-manytomany>` instance, if needed. You can "
"use callables as values in the ``through_defaults`` dictionary."
msgstr ""
"如果需要的话，使用 ``through_defaults`` 参数为新的 :ref:`中间模型 "
"<intermediary-manytomany>` 实例指定值。你可以使用可调用对象作为 "
"``through_defaults`` 字典中的值。"

msgid "*Asynchronous version*: ``aremove``"
msgstr ""

msgid "Removes the specified model objects from the related object set:"
msgstr ""

msgid ""
"Similar to :meth:`add()`, ``e.save()`` is called in the example above to "
"perform the update. Using ``remove()`` with a many-to-many relationship, "
"however, will delete the relationships using :meth:`QuerySet.delete()<django."
"db.models.query.QuerySet.delete>` which means no model ``save()`` methods "
"are called; listen to the :data:`~django.db.models.signals.m2m_changed` "
"signal if you wish to execute custom code when a relationship is deleted."
msgstr ""
"与 :meth:`add()` 类似，在上面的例子中调用 ``e.save()`` 来执行更新。但是，对多"
"对多关系使用 ``remove()``，将使用 :meth:`QuerySet.delete()<django.db.models."
"query.QuerySet.delete>` 删除关系，这意味着没有调用模型 ``save()`` 方法；如果"
"想在删除关系时执行自定义代码，请监听 :data:`~django.db.models.signals."
"m2m_changed` 信号。"

msgid ""
"For many-to-many relationships ``remove()`` accepts either model instances "
"or field values, normally primary keys, as the ``*objs`` argument."
msgstr ""
"对于多对多关系，``remove()`` 接受模型实例或字段值，通常是主键，作为 "
"``*objs`` 参数。"

msgid ""
"For :class:`~django.db.models.ForeignKey` objects, this method only exists "
"if ``null=True``. If the related field can't be set to ``None`` (``NULL``), "
"then an object can't be removed from a relation without being added to "
"another. In the above example, removing ``e`` from ``b.entry_set()`` is "
"equivalent to doing ``e.blog = None``, and because the ``blog`` :class:"
"`~django.db.models.ForeignKey` doesn't have ``null=True``, this is invalid."
msgstr ""
"对于 :class:`~django.db.models.ForeignKey` 对象，只有当 ``null=True`` 时，这"
"个方法才存在。如果相关字段不能设置为 ``None`` （``NULL``），那么一个对象就不"
"能从一个关系中删除而不被添加到另一个关系中。在上面的例子中，从 ``b."
"entry_set()`` 中删除 ``e`` 相当于做了 ``e.blog = None``，由于 ``blog`` :"
"class:`~django.db.models.ForeignKey`` 没有 ``null=True``，所以这是无效的。"

msgid ""
"For :class:`~django.db.models.ForeignKey` objects, this method accepts a "
"``bulk`` argument to control how to perform the operation. If ``True`` (the "
"default), ``QuerySet.update()`` is used. If ``bulk=False``, the ``save()`` "
"method of each individual model instance is called instead. This triggers "
"the :data:`~django.db.models.signals.pre_save` and :data:`~django.db.models."
"signals.post_save` signals and comes at the expense of performance."
msgstr ""
"对于 :class:`~django.db.models.ForeignKey` 对象，这个方法接受一个 ``bulk`` 参"
"数来控制如何执行操作。如果 ``True`` （默认），则使用 ``QuerySet.update()``。"
"如果 ``bulk=False``，则调用每个单独模型实例的 ``save()`` 方法。这将触发 :"
"data:`~django.db.models.signals.pre_save` 和 :data:`~django.db.models."
"signals.post_save` 信号，并以牺牲性能为代价。"

msgid ""
"For many-to-many relationships, the ``bulk`` keyword argument doesn't exist."
msgstr "对于多对多关系，``bulk`` 关键字参数不存在。"

msgid "``aremove()`` method was added."
msgstr ""

msgid "*Asynchronous version*: ``aclear``"
msgstr ""

msgid "Removes all objects from the related object set:"
msgstr ""

msgid ""
"Note this doesn't delete the related objects -- it just disassociates them."
msgstr "请注意，这并不会删除相关的对象——只是将它们脱离关联。"

msgid ""
"Just like ``remove()``, ``clear()`` is only available on :class:`~django.db."
"models.ForeignKey`\\s where ``null=True`` and it also accepts the ``bulk`` "
"keyword argument."
msgstr ""
"和 ``remove()`` 一样，``clear()`` 只在 :class:`~django.db.models.ForeignKey` "
"上可用，其中 ``null=True``，而且它还接受 ``bulk`` 关键字参数。"

msgid "``aclear()`` method was added."
msgstr ""

msgid "*Asynchronous version*: ``aset``"
msgstr ""

msgid "Replace the set of related objects:"
msgstr ""

msgid ""
"This method accepts a ``clear`` argument to control how to perform the "
"operation. If ``False`` (the default), the elements missing from the new set "
"are removed using ``remove()`` and only the new ones are added. If "
"``clear=True``, the ``clear()`` method is called instead and the whole set "
"is added at once."
msgstr ""
"本方法接受一个 ``clear`` 参数来控制如何执行操作。如果 ``False`` （默认），则"
"使用 ``remove()`` 删除新集合中缺少的元素，只添加新元素。如果 ``clear=True``，"
"则调用 ``clear()`` 方法，一次性添加整个集合。"

msgid ""
"For :class:`~django.db.models.ForeignKey` objects, the ``bulk`` argument is "
"passed on to :meth:`add` and :meth:`remove`."
msgstr ""
"对于 :class:`~django.db.models.ForeignKey` 对象，``bulk`` 参数被传递给 :meth:"
"`add` 和 :meth:`remove`。"

msgid ""
"Note that since ``set()`` is a compound operation, it is subject to race "
"conditions. For instance, new objects may be added to the database in "
"between the call to ``clear()`` and the call to ``add()``."
msgstr ""
"请注意，由于 ``set()`` 是一个复合操作，它受到竞争条件的影响。例如，在调用 "
"``clear()`` 和调用 ``add()`` 之间可能会向数据库中添加新的对象。"

msgid ""
"For many-to-many relationships ``set()`` accepts a list of either model "
"instances or field values, normally primary keys, as the ``objs`` argument."
msgstr ""
"对于多对多关系，``set()`` 接受一个模型实例或字段值的列表，通常是主键，作为 "
"``objs`` 参数。"

msgid "``aset()`` method was added."
msgstr ""

msgid ""
"Note that ``add()``, ``aadd()``, ``create()``, ``acreate()``, ``remove()``, "
"``aremove()``, ``clear()``, ``aclear()``, ``set()``, and ``aset()`` all "
"apply database changes immediately for all types of related fields. In other "
"words, there is no need to call ``save()``/``asave()`` on either end of the "
"relationship."
msgstr ""

msgid ""
"If you use :meth:`~django.db.models.query.QuerySet.prefetch_related`, the "
"``add()``, ``aadd()``, ``remove()``, ``aremove()``, ``clear()``, "
"``aclear()``, ``set()``, and ``aset()`` methods clear the prefetched cache."
msgstr ""

msgid "Paginator"
msgstr "分页器"

msgid ""
"Django provides a few classes that help you manage paginated data -- that "
"is, data that's split across several pages, with \"Previous/Next\" links. "
"These classes live in :source:`django/core/paginator.py`."
msgstr ""
"Django 提供了一些类来帮助你管理分页数据 ——也就是说，数据被分割在几个页面上，"
"并带有 “上一页／下一页” 的链接。这些类位于 :source:`django/core/paginator."
"py` 中。"

msgid ""
"For examples, see the :doc:`Pagination topic guide </topics/pagination>`."
msgstr ""

msgid "``Paginator`` class"
msgstr "``Paginator`` 类"

msgid ""
"A paginator acts like a sequence of :class:`Page` when using ``len()`` or "
"iterating it directly."
msgstr ""
"当使用 ``len()`` 或直接迭代时，分页器的作用就像一个 :class:`Page` 的序列。"

msgid ""
"Required. A list, tuple, ``QuerySet``, or other sliceable object with a "
"``count()`` or ``__len__()`` method. For consistent pagination, "
"``QuerySet``\\s should be ordered, e.g. with an :meth:`~django.db.models."
"query.QuerySet.order_by` clause or with a default :attr:`~django.db.models."
"Options.ordering` on the model."
msgstr ""
"必要的。一个列表、元组、``QuerySet`` 或其他具有 ``count()`` 或 ``__len__()`` "
"方法的可切片对象。为了实现一致的分页，``QuerySet`` 应该是有序的，例如使用 :"
"meth:`~django.db.models.query.QuerySet.order_by` 子句或使用模型上的默认 :"
"attr:`~django.db.models.Options.ordering`。"

msgid "Performance issues paginating large ``QuerySet``\\s"
msgstr "对大型 ``QuerySet`` 进行分页的性能问题"

msgid ""
"If you're using a ``QuerySet`` with a very large number of items, requesting "
"high page numbers might be slow on some databases, because the resulting "
"``LIMIT``/``OFFSET`` query needs to count the number of ``OFFSET`` records "
"which takes longer as the page number gets higher."
msgstr ""
"如果你使用的 ``QuerySet`` 有非常多的项目，在某些数据库上请求高页数可能会很"
"慢，因为产生的 ``LIMIT`` ／ ``OFFSET`` 查询需要计算 ``OFFSET`` 记录的数量，随"
"着页数的增加，需要的时间也就越长。"

msgid ""
"Required. The maximum number of items to include on a page, not including "
"orphans (see the :attr:`~Paginator.orphans` optional argument below)."
msgstr ""
"必要的。一个页面中包含的最大项目数，不包括 orphans（参见下面的 :attr:"
"`~Paginator.orphans` 可选参数）。"

msgid ""
"Optional. Use this when you don't want to have a last page with very few "
"items. If the last page would normally have a number of items less than or "
"equal to ``orphans``, then those items will be added to the previous page "
"(which becomes the last page) instead of leaving the items on a page by "
"themselves. For example, with 23 items, ``per_page=10``, and ``orphans=3``, "
"there will be two pages; the first page with 10 items and the second (and "
"last) page with 13 items. ``orphans`` defaults to zero, which means pages "
"are never combined and the last page may have one item."
msgstr ""
"可选的。当你不希望最后一页的项目数量很少时，使用这个选项。如果最后一页的项目"
"数量通常小于或等于 ``orphans``，那么这些项目将被添加到前一页（成为最后一"
"页），而不是让这些项目单独留在一页上。例如，如果有 23 个条目，"
"``per_page=10``，``orphans=3``，则会有两页；第一页有 10 个条目，第二页（也是"
"最后一页）有 13 个条目。``orphans`` 默认为 0，这意味着页面永远不会合并，最后"
"一页可能只有一个项目。"

msgid ""
"Optional. Whether or not the first page is allowed to be empty.  If "
"``False`` and ``object_list`` is  empty, then an ``EmptyPage`` error will be "
"raised."
msgstr ""
"可选的。是否允许第一页为空。 如果 ``False`` 并且 ``object_list`` 是空的，则会"
"出现 ``EmptyPage`` 错误。"

msgid ""
"Returns a :class:`Page` object with the given 1-based index, while also "
"handling out of range and invalid page numbers."
msgstr ""
"返回一个给定的基于 1 索引的 :class:`Page` 对象，同时处理超出范围和无效的页"
"码。"

msgid ""
"If the page isn't a number, it returns the first page. If the page number is "
"negative or greater than the number of pages, it returns the last page."
msgstr ""
"如果页数不是数字，它返回第一页。如果页码为负数或大于页数，则返回最后一页。"

msgid ""
"Raises an :exc:`EmptyPage` exception only if you specify ``Paginator(..., "
"allow_empty_first_page=False)`` and the ``object_list`` is empty."
msgstr ""
"只有当你指定了 ``Paginator(..., allow_empty_first_page=False)`` 并且 "
"``object_list`` 为空时，才会引发 :exc:`EmptyPage` 异常。"

msgid ""
"Returns a :class:`Page` object with the given 1-based index. Raises :exc:"
"`PageNotAnInteger` if the ``number`` cannot be converted to an integer by "
"calling ``int()``. Raises :exc:`EmptyPage` if the given page number doesn't "
"exist."
msgstr ""

msgid ""
"Returns a 1-based list of page numbers similar to :attr:`Paginator."
"page_range`, but may add an ellipsis to either or both sides of the current "
"page number when :attr:`Paginator.num_pages` is large."
msgstr ""

msgid ""
"The number of pages to include on each side of the current page number is "
"determined by the ``on_each_side`` argument which defaults to 3."
msgstr ""

msgid ""
"The number of pages to include at the beginning and end of page range is "
"determined by the ``on_ends`` argument which defaults to 2."
msgstr ""

msgid ""
"For example, with the default values for ``on_each_side`` and ``on_ends``, "
"if the current page is 10 and there are 50 pages, the page range will be "
"``[1, 2, '…', 7, 8, 9, 10, 11, 12, 13, '…', 49, 50]``. This will result in "
"pages 7, 8, and 9 to the left of and 11, 12, and 13 to the right of the "
"current page as well as pages 1 and 2 at the start and 49 and 50 at the end."
msgstr ""

msgid "Raises :exc:`InvalidPage` if the given page number doesn't exist."
msgstr ""

msgid ""
"A translatable string used as a substitute for elided page numbers in the "
"page range returned by :meth:`~Paginator.get_elided_page_range`. Default is "
"``'…'``."
msgstr ""

msgid "The total number of objects, across all pages."
msgstr "所有页面的对象总数。"

msgid ""
"When determining the number of objects contained in ``object_list``, "
"``Paginator`` will first try calling ``object_list.count()``. If "
"``object_list`` has no ``count()`` method, then ``Paginator`` will fall back "
"to using ``len(object_list)``. This allows objects, such as ``QuerySet``, to "
"use a more efficient ``count()`` method when available."
msgstr ""
"在确定 ``object_list`` 中包含的对象数量时，``Paginator`` 将首先尝试调用 "
"``object_list.count()``。如果 ``object_list`` 没有 ``count()`` 方法，那么 "
"``Paginator`` 将回到使用 ``len(object_list)``。这允许对象，如 ``QuerySet``，"
"在可用时使用更高效的 ``count()`` 方法。"

msgid "The total number of pages."
msgstr "总页数。"

msgid ""
"A 1-based range iterator of page numbers, e.g. yielding ``[1, 2, 3, 4]``."
msgstr "以 1 为基础的页码范围迭代器，例如产生 ``[1，2，3，4]``。"

msgid "``Page`` class"
msgstr "``Page`` 类"

msgid ""
"You usually won't construct ``Page`` objects by hand -- you'll get them by "
"iterating :class:`Paginator`, or by using :meth:`Paginator.page`."
msgstr ""
"你通常不会手工构建 ``Page`` 对象 —— 你将通过迭代 :class:`Paginator`，或使用 :"
"meth:`Paginator.page` 获得它们。"

msgid ""
"A page acts like a sequence of :attr:`Page.object_list` when using ``len()`` "
"or iterating it directly."
msgstr ""
"当使用 ``len()`` 或直接迭代时，一个页面就像一个 :attr:`Page.object_list` 的序"
"列。"

msgid "Returns ``True`` if there's a next page."
msgstr "如果有下一页，返回 ``True``。"

msgid "Returns ``True`` if there's a previous page."
msgstr "如果有上一页，返回 ``True``。"

msgid "Returns ``True`` if there's a next **or** previous page."
msgstr "如果有下一页 **或** 上一页，返回 ``True``。"

msgid ""
"Returns the next page number. Raises :exc:`InvalidPage` if next page doesn't "
"exist."
msgstr "返回下一页的页码。如果下一页不存在，则引发 :exc:`InvalidPage`。"

msgid ""
"Returns the previous page number. Raises :exc:`InvalidPage` if previous page "
"doesn't exist."
msgstr "返回上一页的页码。如果上一页不存在，则引发 :exc:`InvalidPage`。"

msgid ""
"Returns the 1-based index of the first object on the page, relative to all "
"of the objects in the paginator's list. For example, when paginating a list "
"of 5 objects with 2 objects per page, the second page's :meth:`~Page."
"start_index` would return ``3``."
msgstr ""
"返回页面上第一个对象，相对于分页器列表中所有对象的基于 1 的索引。例如，当对一"
"个有 5 个对象的列表进行分页时，每页有 2 个对象，第二页的 :meth:`~Page."
"start_index` 将返回 ``3``。"

msgid ""
"Returns the 1-based index of the last object on the page, relative to all of "
"the objects in the paginator's list. For example, when paginating a list of "
"5 objects with 2 objects per page, the second page's :meth:`~Page.end_index` "
"would return ``4``."
msgstr ""
"返回页面上最后一个对象相对于分页器列表中所有对象的基于 1 的索引。例如，当对一"
"个有 5 个对象的列表进行分页时，每页有 2 个对象，第二页的 :meth:`~Page."
"end_index` 将返回 ``4``。"

msgid "The list of objects on this page."
msgstr "此页上的对象列表。"

msgid "The 1-based page number for this page."
msgstr "此页的基于 1 的页码。"

msgid "The associated :class:`Paginator` object."
msgstr "关联的 :class:`Paginator` 对象。"

msgid ""
"A base class for exceptions raised when a paginator is passed an invalid "
"page number."
msgstr "当分页器被传递一个无效的页码时引发异常的基类。"

msgid ""
"The :meth:`Paginator.page` method raises an exception if the requested page "
"is invalid (i.e. not an integer) or contains no objects. Generally, it's "
"enough to catch the ``InvalidPage`` exception, but if you'd like more "
"granularity, you can catch either of the following exceptions:"
msgstr ""
":meth:`Paginator.page` 方法在请求的页面无效（即不是整数）或不包含任何对象时引"
"发异常。一般来说，只要捕获 ``InvalidPage`` 异常就够了，但如果你想要更细化，你"
"可以捕获以下任何一种异常。"

msgid ""
"Raised when :meth:`~Paginator.page` is given a value that isn't an integer."
msgstr "当 :meth:`~Paginator.page` 的值不是整数时发生该事件。"

msgid ""
"Raised when :meth:`~Paginator.page` is given a valid value but no objects "
"exist on that page."
msgstr ""
"当 :meth:`~Paginator.page` 被赋予一个有效的值，但该页面上没有对象存在时，引发"
"该异常。"

msgid ""
"Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can "
"handle them both with ``except InvalidPage``."
msgstr ""
"这两个异常都是 :exc:`InvalidPage` 的子类，所以你可以用 ``except "
"InvalidPage`` 处理这两个异常。"

msgid "Request and response objects"
msgstr "请求和响应对象"

msgid "Quick overview"
msgstr "快速概述"

msgid ""
"Django uses request and response objects to pass state through the system."
msgstr "Django 使用请求和响应对象在系统中传递状态。"

msgid ""
"When a page is requested, Django creates an :class:`HttpRequest` object that "
"contains metadata about the request. Then Django loads the appropriate view, "
"passing the :class:`HttpRequest` as the first argument to the view function. "
"Each view is responsible for returning an :class:`HttpResponse` object."
msgstr ""
"当一个页面被请求时，Django 会创建一个 :class:`HttpRequest` 对象，这个对象包含"
"了请求的元数据。然后，Django 加载相应的视图，将 :class:`HttpRequest` 作为视图"
"函数的第一个参数。每个视图负责返回一个 :class:`HttpResponse` 对象。"

msgid ""
"This document explains the APIs for :class:`HttpRequest` and :class:"
"`HttpResponse` objects, which are defined in the :mod:`django.http` module."
msgstr ""
"本文档解释了 :mod:`django.http` 模块中定义的 :class:`HttpRequest` 和 :class:"
"`HttpResponse` 对象的 API。"

msgid "``HttpRequest`` objects"
msgstr "``HttpRequest`` 对象"

msgid "All attributes should be considered read-only, unless stated otherwise."
msgstr "除非另有说明，否则所有属性都应视为只读。"

msgid ""
"A string representing the scheme of the request (``http`` or ``https`` "
"usually)."
msgstr "代表请求协议的字符串（通常是 ``http`` 或 ``https``）。"

msgid ""
"The raw HTTP request body as a bytestring. This is useful for processing "
"data in different ways than conventional HTML forms: binary images, XML "
"payload etc. For processing conventional form data, use :attr:`HttpRequest."
"POST`."
msgstr ""
"原始的 HTTP 请求体作为一个字节字符串。这对于以不同方式处理非常规 HTML 表单的"
"数据很有用：二进制图像，XML 有效负载等。对于处理传统的表单数据，使用 :attr:"
"`HttpRequest.POST`。"

msgid ""
"You can also read from an ``HttpRequest`` using a file-like interface with :"
"meth:`HttpRequest.read` or :meth:`HttpRequest.readline`. Accessing the "
"``body`` attribute *after* reading the request with either of these I/O "
"stream methods will produce a ``RawPostDataException``."
msgstr ""
"你也可以使用类似文件的接口 :meth:`HttpRequest.read` 或 :meth:`HttpRequest."
"readline` 从 ``HttpRequest`` 中读取。在使用这些 I/O 流方法中的任何一种方法读"
"取请求后，访问 ``body`` 属性会产生 ``RawPostDataException``。"

msgid ""
"A string representing the full path to the requested page, not including the "
"scheme, domain, or query string."
msgstr ""

msgid "Example: ``\"/music/bands/the_beatles/\"``"
msgstr "例如：``\"/music/bands/the_beatles/\"``"

msgid ""
"Under some web server configurations, the portion of the URL after the host "
"name is split up into a script prefix portion and a path info portion. The "
"``path_info`` attribute always contains the path info portion of the path, "
"no matter what web server is being used. Using this instead of :attr:"
"`~HttpRequest.path` can make your code easier to move between test and "
"deployment servers."
msgstr ""

msgid ""
"For example, if the ``WSGIScriptAlias`` for your application is set to ``\"/"
"minfo\"``, then ``path`` might be ``\"/minfo/music/bands/the_beatles/\"`` "
"and ``path_info`` would be ``\"/music/bands/the_beatles/\"``."
msgstr ""
"例如，如果你的应用程序的 ``WSGIScriptAlias`` 设置为 ``\"/minfo\"``，那么 "
"``path`` 可能是 ``\"/minfo/music/bands/the_beatles/\"`` 和 ``path_info`` 将"
"是 ``\"/music/bands/the_beatles/\"``。"

msgid ""
"A string representing the HTTP method used in the request. This is "
"guaranteed to be uppercase. For example::"
msgstr "代表请求中使用的 HTTP 方法的字符串。保证是大写字母。例如："

msgid ""
"A string representing the current encoding used to decode form submission "
"data (or ``None``, which means the :setting:`DEFAULT_CHARSET` setting is "
"used). You can write to this attribute to change the encoding used when "
"accessing the form data. Any subsequent attribute accesses (such as reading "
"from :attr:`GET` or :attr:`POST`) will use the new ``encoding`` value. "
"Useful if you know the form data is not in the :setting:`DEFAULT_CHARSET` "
"encoding."
msgstr ""
"表示当前用于解码表单提交数据的编码的字符串（或 ``None``，表示使用 :setting:"
"`DEFAULT_CHARSET` 设置）。你可以写入这个属性来改变访问表单数据时使用的编码。"
"任何后续的属性访问（如从 :attr:`GET` 或 :attr:`POST` 中读取）将使用新的 "
"``encoding`` 值。如果你知道表单数据不是在 :setting:`DEFAULT_CHARSET` 编码中，"
"这很有用。"

msgid ""
"A string representing the MIME type of the request, parsed from the "
"``CONTENT_TYPE`` header."
msgstr "代表请求的 MIME 类型的字符串，从 ``CONTENT_TYPE`` 头解析。"

msgid ""
"A dictionary of key/value parameters included in the ``CONTENT_TYPE`` header."
msgstr "``CONTENT_TYPE`` 头中包含的键／值参数字典。"

msgid ""
"A dictionary-like object containing all given HTTP GET parameters. See the :"
"class:`QueryDict` documentation below."
msgstr ""
"一个类似字典的对象，包含所有给定的 HTTP GET 参数。参见下面的 :class:"
"`QueryDict` 文档。"

msgid ""
"A dictionary-like object containing all given HTTP POST parameters, "
"providing that the request contains form data. See the :class:`QueryDict` "
"documentation below. If you need to access raw or non-form data posted in "
"the request, access this through the :attr:`HttpRequest.body` attribute "
"instead."
msgstr ""
"一个类似字典的对象，包含所有给定的 HTTP POST 参数，前提是请求包含表单数据。参"
"见下面的 :class:`QueryDict` 文档。如果你需要访问请求中发布的原始或非表单数"
"据，可以通过 :attr:`HttpRequest.body` 属性来访问。"

msgid ""
"It's possible that a request can come in via POST with an empty ``POST`` "
"dictionary -- if, say, a form is requested via the POST HTTP method but does "
"not include form data. Therefore, you shouldn't use ``if request.POST`` to "
"check for use of the POST method; instead, use ``if request.method == "
"\"POST\"`` (see :attr:`HttpRequest.method`)."
msgstr ""
"有可能一个请求是通过 POST 方式进来的，并带有一个空的 ``POST`` 字典——比如说，"
"一个表单是通过 POST HTTP 方法请求的，但不包括表单数据。因此，你不应该使用 "
"``if request.POST`` 来检查是否使用了 POST 方法；而应该使用 ``if request."
"method == \"POST\"`` （参见 :attr:`HttpRequest.method`）。"

msgid "``POST`` does *not* include file-upload information. See :attr:`FILES`."
msgstr "``POST`` 不包括文件上传信息。见 :attr:`FILES`。"

msgid "A dictionary containing all cookies. Keys and values are strings."
msgstr "一个包含所有 cookies 的字典。键和值是字符串。"

msgid ""
"A dictionary-like object containing all uploaded files. Each key in "
"``FILES`` is the ``name`` from the ``<input type=\"file\" name=\"\">``. Each "
"value in ``FILES`` is an :class:`~django.core.files.uploadedfile."
"UploadedFile`."
msgstr ""
"一个类似字典的对象，包含所有上传的文件。``FILES`` 中的每个键是 ``<input "
"type=\"file\" name=\"\">`` 中的 ``name``。``FILES`` 中的每个值是一个 :class:"
"`~django.core.files.uploadedfile.UploadedFile`。"

msgid "See :doc:`/topics/files` for more information."
msgstr "更多信息请参见 :doc:`/topics/files`。"

msgid ""
"``FILES`` will only contain data if the request method was POST and the "
"``<form>`` that posted to the request had ``enctype=\"multipart/form-"
"data\"``. Otherwise, ``FILES`` will be a blank dictionary-like object."
msgstr ""
"``FILES`` 只有在请求方法是 POST，并且发布请求的 ``<form>`` 有 "
"``enctype=\"multipart/form-data\"`` 的情况下，才会包含数据。否则，``FILES`` "
"将是一个类似字典的空白对象。"

msgid ""
"A dictionary containing all available HTTP headers. Available headers depend "
"on the client and server, but here are some examples:"
msgstr ""
"一个包含所有可用的 HTTP 头文件的字典。可用的头信息取决于客户端和服务器，但这"
"里有一些例子："

msgid "``CONTENT_LENGTH`` -- The length of the request body (as a string)."
msgstr "``CONTENT_LENGTH`` —— 请求体的长度（字符串）。"

msgid "``CONTENT_TYPE`` -- The MIME type of the request body."
msgstr "``CONTENT_TYPE`` —— 请求体的 MIME 类型。"

msgid "``HTTP_ACCEPT`` -- Acceptable content types for the response."
msgstr "``HTTP_ACCEPT`` —— 可接受的响应内容类型。"

msgid "``HTTP_ACCEPT_ENCODING`` -- Acceptable encodings for the response."
msgstr "``HTTP_ACCEPT_ENCODING`` —— 可接受的响应编码。"

msgid "``HTTP_ACCEPT_LANGUAGE`` -- Acceptable languages for the response."
msgstr "``HTTP_ACCEPT_LANGUAGE`` —— 可接受的响应语言。"

msgid "``HTTP_HOST`` -- The HTTP Host header sent by the client."
msgstr "``HTTP_HOST`` —— 客户端发送的 HTTP 主机头。"

msgid "``HTTP_REFERER`` -- The referring page, if any."
msgstr "``HTTP_REFERER`` —— referrer 页面，如果有的话。"

msgid "``HTTP_USER_AGENT`` -- The client's user-agent string."
msgstr "``HTTP_USER_AGENT`` —— 客户端的用户代理字符串。"

msgid "``QUERY_STRING`` -- The query string, as a single (unparsed) string."
msgstr "``QUERY_STRING`` —— 查询字符串，是一个单一的（未解析的）字符串。"

msgid "``REMOTE_ADDR`` -- The IP address of the client."
msgstr "``REMOTE_ADDR`` —— 客户机的 IP 地址。"

msgid "``REMOTE_HOST`` -- The hostname of the client."
msgstr "``REMOTE_HOST`` —— 客户机的主机名。"

msgid "``REMOTE_USER`` -- The user authenticated by the web server, if any."
msgstr ""

msgid "``REQUEST_METHOD`` -- A string such as ``\"GET\"`` or ``\"POST\"``."
msgstr "``REQUEST_METHOD`` —— ``\"GET\"`` 或 ``\"POST\"`` 等字符串。"

msgid "``SERVER_NAME`` -- The hostname of the server."
msgstr "``SERVER_NAME`` —— 服务器的主机名。"

msgid "``SERVER_PORT`` -- The port of the server (as a string)."
msgstr "``SERVER_PORT`` —— 服务器的端口（字符串）。"

msgid ""
"With the exception of ``CONTENT_LENGTH`` and ``CONTENT_TYPE``, as given "
"above, any HTTP headers in the request are converted to ``META`` keys by "
"converting all characters to uppercase, replacing any hyphens with "
"underscores and adding an ``HTTP_`` prefix to the name. So, for example, a "
"header called ``X-Bender`` would be mapped to the ``META`` key "
"``HTTP_X_BENDER``."
msgstr ""
"除了上面给出的 ``CONTENT_LENGTH`` 和 ``CONTENT_TYPE`` 之外，请求中的任何 "
"HTTP 头都会被转换为 ``META`` 键，方法是将所有字符转换为大写字母，用下划线代替"
"任何连字符，并在名称前加上 ``HTTP_``` 前缀。因此，例如，一个名为 ``X-"
"Bender`` 的头将被映射到 ``META`` 键 ``HTTP_X_BENDER``。"

msgid ""
"Note that :djadmin:`runserver` strips all headers with underscores in the "
"name, so you won't see them in ``META``. This prevents header-spoofing based "
"on ambiguity between underscores and dashes both being normalizing to "
"underscores in WSGI environment variables. It matches the behavior of web "
"servers like Nginx and Apache 2.4+."
msgstr ""

msgid ""
":attr:`HttpRequest.headers` is a simpler way to access all HTTP-prefixed "
"headers, plus ``CONTENT_LENGTH`` and ``CONTENT_TYPE``."
msgstr ""
":attr:`HttpRequest.headers` 是一种更简单的方式来访问所有 HTTP 前缀头，加上 "
"``CONTENT_LENGTH`` 和 ``CONTENT_TYPE``。"

msgid ""
"A case insensitive, dict-like object that provides access to all HTTP-"
"prefixed headers (plus ``Content-Length`` and ``Content-Type``) from the "
"request."
msgstr ""
"一个不区分大小写的类似字典的对象，提供对请求中所有 HTTP 前缀头的访问（加上 "
"``Content-Length`` 和 ``Content-Type``）。"

msgid ""
"The name of each header is stylized with title-casing (e.g. ``User-Agent``) "
"when it's displayed. You can access headers case-insensitively:"
msgstr ""

msgid ""
"For use in, for example, Django templates, headers can also be looked up "
"using underscores in place of hyphens:"
msgstr ""

msgid ""
"An instance of :class:`~django.urls.ResolverMatch` representing the resolved "
"URL. This attribute is only set after URL resolving took place, which means "
"it's available in all views but not in middleware which are executed before "
"URL resolving takes place (you can use it in :meth:`process_view` though)."
msgstr ""
":class:`~django.urls.ResolverMatch` 的一个实例，代表解析后的 URL。这个属性只"
"有在 UR L解析发生后才会被设置，这意味着它在所有的视图中都是可用的，但在 URL "
"解析发生前被执行的中间件中则不可用（不过你可以在 :meth:`process_view` 中使用"
"它）。"

msgid "Attributes set by application code"
msgstr "应用程序代码设置的属性"

msgid ""
"Django doesn't set these attributes itself but makes use of them if set by "
"your application."
msgstr ""
"Django 不会自己设置这些属性，但如果你的应用程序设置了这些属性，就会使用它们。"

msgid ""
"The :ttag:`url` template tag will use its value as the ``current_app`` "
"argument to :func:`~django.urls.reverse()`."
msgstr ""
":ttag:`url` 模板标签将使用它的值作为 :func:`~django.urls.reverse()` 的 "
"``current_app`` 参数。"

msgid ""
"This will be used as the root URLconf for the current request, overriding "
"the :setting:`ROOT_URLCONF` setting. See :ref:`how-django-processes-a-"
"request` for details."
msgstr ""
"这将作为当前请求的根 URLconf，覆盖 :setting:`ROOT_URLCONF` 设置。详情请参见 :"
"ref:`how-django-processes-a-request`。"

msgid ""
"``urlconf`` can be set to ``None`` to revert any changes made by previous "
"middleware and return to using the :setting:`ROOT_URLCONF`."
msgstr ""
"``urlconf`` 可以设置为 ``None``，以恢复之前中间件所做的任何更改，并返回到使"
"用 :setting:`ROOT_URLCONF`。"

msgid ""
"This will be used instead of :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` "
"for the current request. See :ref:`custom-error-reports` for details."
msgstr ""
"这将代替当前请求的 :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` 使用。详情请"
"参见 :ref:`custom-error-reports`。"

msgid ""
"This will be used instead of :setting:`DEFAULT_EXCEPTION_REPORTER` for the "
"current request. See :ref:`custom-error-reports` for details."
msgstr ""
"这将代替 :setting:`DEFAULT_EXCEPTION_REPORTER` 用于当前请求。详情请参见 :ref:"
"`custom-error-reports`。"

msgid "Attributes set by middleware"
msgstr "中间件设置的属性"

msgid ""
"Some of the middleware included in Django's contrib apps set attributes on "
"the request. If you don't see the attribute on a request, be sure the "
"appropriate middleware class is listed in :setting:`MIDDLEWARE`."
msgstr ""
"Django 的 contrib 应用中包含的一些中间件会在请求中设置属性。如果你没有在请求"
"中看到属性，请确认在 :setting:`MIDDLEWARE` 中列出了相应的中间件类。"

msgid ""
"From the :class:`~django.contrib.sessions.middleware.SessionMiddleware`: A "
"readable and writable, dictionary-like object that represents the current "
"session."
msgstr ""
"来自 :class:`~django.contrib.session.middleware.SessionMiddleware`。一个可读"
"可写的，类似字典的对象，代表当前会话。"

msgid ""
"From the :class:`~django.contrib.sites.middleware.CurrentSiteMiddleware`: An "
"instance of :class:`~django.contrib.sites.models.Site` or :class:`~django."
"contrib.sites.requests.RequestSite` as returned by :func:`~django.contrib."
"sites.shortcuts.get_current_site()` representing the current site."
msgstr ""
"来自 :class:`~django.contrib.sites.middleware.CurrentSiteMiddleware`。由 :"
"func:`~django.contrib.sites.models.Site` 或 :class:`~django.contrib.sites."
"request.RequestSite` 返回的 :class:`~django.contrib.sites.shortcuts."
"get_current_site()` 的实例，代表当前站点。"

msgid ""
"From the :class:`~django.contrib.auth.middleware.AuthenticationMiddleware`: "
"An instance of :setting:`AUTH_USER_MODEL` representing the currently logged-"
"in user. If the user isn't currently logged in, ``user`` will be set to an "
"instance of :class:`~django.contrib.auth.models.AnonymousUser`. You can tell "
"them apart with :attr:`~django.contrib.auth.models.User.is_authenticated`, "
"like so::"
msgstr ""
"从 :class:`~django.contrib.uth.middleware.AuthenticationMiddleware`。:"
"setting:`AUTH_USER_MODEL` 的一个实例，代表当前登录的用户。如果用户当前没有登"
"录，``user`` 将被设置为一个 :class:`~django.contrib.autrib.auth.models."
"AnonymousUser` 的实例。你可以用 :attr:`~django.contrib.auth.models.User."
"is_authenticated` 来区分它们，比如："

msgid ""
"Returns the originating host of the request using information from the "
"``HTTP_X_FORWARDED_HOST`` (if :setting:`USE_X_FORWARDED_HOST` is enabled) "
"and ``HTTP_HOST`` headers, in that order. If they don't provide a value, the "
"method uses a combination of ``SERVER_NAME`` and ``SERVER_PORT`` as detailed "
"in :pep:`3333`."
msgstr ""
"使用 ``HTTP_X_FORWARDED_HOST`` （如果 :setting:`USE_X_FORWARDED_HOST` 已启"
"用）和 ``HTTP_HOST`` 头信息，按顺序返回请求的发起主机。如果它们没有提供一个"
"值，则该方法使用 ``SERVER_NAME`` 和 ``SERVER_PORT`` 的组合，详见 :pep:"
"`3333`。"

msgid "Example: ``\"127.0.0.1:8000\"``"
msgstr "例如：``\"127.0.0.1:8000\"``"

msgid ""
"Raises ``django.core.exceptions.DisallowedHost`` if the host is not in :"
"setting:`ALLOWED_HOSTS` or the domain name is invalid according to :rfc:"
"`1034`/:rfc:`1035 <1035>`."
msgstr ""

msgid ""
"The :meth:`~HttpRequest.get_host()` method fails when the host is behind "
"multiple proxies. One solution is to use middleware to rewrite the proxy "
"headers, as in the following example::"
msgstr ""
":meth:`~HttpRequest.get_host()` 方法在主机处于多个代理后面时失效。一个解决方"
"案是使用中间件重写代理头，如下面的例子："

msgid ""
"This middleware should be positioned before any other middleware that relies "
"on the value of :meth:`~HttpRequest.get_host()` -- for instance, :class:"
"`~django.middleware.common.CommonMiddleware` or :class:`~django.middleware."
"csrf.CsrfViewMiddleware`."
msgstr ""
"这个中间件应该定位在任何其他依赖于:meth:`~HttpRequest.get_host()` 值的中间件"
"之前——例如 :class:`~django.middleware.common.CommonMiddleware` 或 :class:"
"`~django.middleware.csrf.CsrfViewMiddleware`。"

msgid ""
"Returns the originating port of the request using information from the "
"``HTTP_X_FORWARDED_PORT`` (if :setting:`USE_X_FORWARDED_PORT` is enabled) "
"and ``SERVER_PORT`` ``META`` variables, in that order."
msgstr ""
"使用 ``HTTP_X_FORWARDED_PORT`` （如果 :set:`USE_X_FORWARDED_PORT` 已启用）和 "
"``SERVER_PORT`` ``META`` 变量中的信息，按顺序返回请求的起始端口。"

msgid "Returns the ``path``, plus an appended query string, if applicable."
msgstr "返回 ``path``，加上附加的查询字符串（如果适用）。"

msgid "Example: ``\"/music/bands/the_beatles/?print=true\"``"
msgstr "例如：``\"/music/bands/the_beatles/?print=true\"``"

msgid ""
"Like :meth:`get_full_path`, but uses :attr:`path_info` instead of :attr:"
"`path`."
msgstr ""
"像 :meth:`get_full_path` 一样，但使用 :attr:`path_info` 代替 :attr:`path`。"

msgid "Example: ``\"/minfo/music/bands/the_beatles/?print=true\"``"
msgstr "例如：``\"/minfo/music/bands/the_beatles/?print=true\"``"

msgid ""
"Returns the absolute URI form of ``location``. If no location is provided, "
"the location will be set to ``request.get_full_path()``."
msgstr ""
"返回 ``location`` 的绝对 URI 形式。如果没有提供 location，location 将被设置"
"为 ``request.get_full_path()``。"

msgid ""
"If the location is already an absolute URI, it will not be altered. "
"Otherwise the absolute URI is built using the server variables available in "
"this request. For example:"
msgstr ""
"如果 location 已经是一个绝对 URI，它将不会被改变。否则，绝对 URI 将使用这个请"
"求中可用的服务器变量建立。例如："

msgid ""
"Mixing HTTP and HTTPS on the same site is discouraged, therefore :meth:"
"`~HttpRequest.build_absolute_uri()` will always generate an absolute URI "
"with the same scheme the current request has. If you need to redirect users "
"to HTTPS, it's best to let your web server redirect all HTTP traffic to "
"HTTPS."
msgstr ""

msgid ""
"Returns a cookie value for a signed cookie, or raises a ``django.core."
"signing.BadSignature`` exception if the signature is no longer valid. If you "
"provide the ``default`` argument the exception will be suppressed and that "
"default value will be returned instead."
msgstr ""
"返回已签名 cookie 的 cookie 值，如果签名不再有效，则会引发 ``django.core."
"signing.BadSignature`` 异常。如果你提供了 ``default`` 参数，异常将被抑制，并"
"返回默认值。"

msgid ""
"The optional ``salt`` argument can be used to provide extra protection "
"against brute force attacks on your secret key. If supplied, the ``max_age`` "
"argument will be checked against the signed timestamp attached to the cookie "
"value to ensure the cookie is not older than ``max_age`` seconds."
msgstr ""
"可选的 ``salt`` 参数可以用来提供额外的保护，以防止对你秘钥的暴力攻击。如果提"
"供了这个参数，``max_age`` 参数将根据附加在 cookie 值上的签名时间戳进行检查，"
"以确保 cookie 不超过 ``max_age`` 秒。"

msgid ""
"See :doc:`cryptographic signing </topics/signing>` for more information."
msgstr "更多信息请参见 :doc:`加密签名 </topics/signing>`。"

msgid ""
"Returns ``True`` if the request is secure; that is, if it was made with "
"HTTPS."
msgstr ""
"如果请求是安全的，返回 ``True``；如果请求是通过 HTTPS 发出的，返回 ``True``。"

msgid ""
"Returns ``True`` if the request ``Accept`` header matches the ``mime_type`` "
"argument:"
msgstr ""

msgid ""
"Most browsers send ``Accept: */*`` by default, so this would return ``True`` "
"for all content types. Setting an explicit ``Accept`` header in API requests "
"can be useful for returning a different content type for those consumers "
"only. See :ref:`content-negotiation-example` of using ``accepts()`` to "
"return different content to API consumers."
msgstr ""
"大多数浏览器默认发送 ``Accept: */*``，默认情况下，这将为所有内容类型返回 "
"``True``。在 API 请求中设置一个显式的 ``Accept`` 头，对于只为那些消费者返回不"
"同的内容类型是很有用的。参见 :ref:`content-negotiation-example` 使用 "
"``accepts()`` 向 API 消费者返回不同的内容。"

msgid ""
"If a response varies depending on the content of the ``Accept`` header and "
"you are using some form of caching like Django's :mod:`cache middleware "
"<django.middleware.cache>`, you should decorate the view with :func:"
"`vary_on_headers('Accept') <django.views.decorators.vary.vary_on_headers>` "
"so that the responses are properly cached."
msgstr ""
"如果一个响应根据 ``Accept`` 头的内容而变化，并且你使用了某种形式的缓存，比如 "
"Django 的 :mod:`cache middleware <django.middleware.cache>`，你应该用 :func:"
"`vary_on_headers('Accept') <django.views.decorators.varies."
"varies_on_headers>` 来装饰视图，这样响应就会被正确地缓存。"

msgid ""
"Methods implementing a file-like interface for reading from an "
"``HttpRequest`` instance. This makes it possible to consume an incoming "
"request in a streaming fashion. A common use-case would be to process a big "
"XML payload with an iterative parser without constructing a whole XML tree "
"in memory."
msgstr ""
"实现从 ``HttpRequest`` 实例中读取文件的类似接口的方法。这使得它可以以流式方式"
"处理一个传入的请求。一个常见的用例是用迭代解析器处理一个大的 XML 有效载荷，而"
"无需在内存中构建一个完整的 XML 树。"

msgid ""
"Given this standard interface, an ``HttpRequest`` instance can be passed "
"directly to an XML parser such as :class:`~xml.etree.ElementTree."
"ElementTree`::"
msgstr ""
"给定这个标准接口，一个 ``HttpRequest`` 实例可以直接传递给 XML 解析器，如 :"
"class:`~xml.etree.ElementTree.ElementTree`："

msgid "``QueryDict`` objects"
msgstr "``QueryDict`` 对象"

msgid ""
"In an :class:`HttpRequest` object, the :attr:`~HttpRequest.GET` and :attr:"
"`~HttpRequest.POST` attributes are instances of ``django.http.QueryDict``, a "
"dictionary-like class customized to deal with multiple values for the same "
"key. This is necessary because some HTML form elements, notably ``<select "
"multiple>``, pass multiple values for the same key."
msgstr ""
"在一个 :class:`HttpRequest` 对象中， :attr:`~HttpRequest.GET` 和 :attr:"
"`~HttpRequest.POST` 属性是 ``django.http.QueryDict`` 的实例，这是一个类似字典"
"的类，用来处理同一个键的多个值。这是很有必要的，因为一些 HTML 表单元素，尤其"
"是 ``<select multiple>``，会传递同一个键的多个值。"

msgid ""
"The ``QueryDict``\\ s at ``request.POST`` and ``request.GET`` will be "
"immutable when accessed in a normal request/response cycle. To get a mutable "
"version you need to use :meth:`QueryDict.copy`."
msgstr ""
"在 ``request.POST`` 和 ``request.GET`` 中的 ``QueryDict`` 将在正常的请求／响"
"应周期中被访问时是不可改变的。要得到一个可变的版本，你需要使用 :meth:"
"`QueryDict.copy`。"

msgid ""
":class:`QueryDict` implements all the standard dictionary methods because "
"it's a subclass of dictionary. Exceptions are outlined here:"
msgstr ""
":class:`QueryDict` 实现了所有标准的字典方法，因为它是字典的一个子类。这里概述"
"了例外情况："

msgid "Instantiates a ``QueryDict`` object based on ``query_string``."
msgstr "基于 ``query_string`` 实例化一个 ``QueryDict`` 对象。"

msgid ""
"If ``query_string`` is not passed in, the resulting ``QueryDict`` will be "
"empty (it will have no keys or values)."
msgstr ""
"如果没有传入 ``query_string``，产生的 ``QueryDict`` 将是空的（它将没有键或"
"值）。"

msgid ""
"Most ``QueryDict``\\ s you encounter, and in particular those at ``request."
"POST`` and ``request.GET``, will be immutable. If you are instantiating one "
"yourself, you can make it mutable by passing ``mutable=True`` to its "
"``__init__()``."
msgstr ""
"你遇到的大多数 ``QueryDict``\\s，特别是那些在 ``request.POST`` 和 ``request."
"GET`` 的，将是不可变的。如果你自己实例化一个，你可以通过传递 "
"``mutable=True`` 到它的 ``__init__()`` 来使它可变。"

msgid ""
"Strings for setting both keys and values will be converted from ``encoding`` "
"to ``str``. If ``encoding`` is not set, it defaults to :setting:"
"`DEFAULT_CHARSET`."
msgstr ""
"设置键和值的字符串将从 ``encoding`` 转换为 ``str``。如果没有设置 "
"``encoding``，则默认为 :setting:`DEFAULT_CHARSET`。"

msgid ""
"Creates a new ``QueryDict`` with keys from ``iterable`` and each value equal "
"to ``value``. For example:"
msgstr ""

msgid ""
"Returns the value for the given key. If the key has more than one value, it "
"returns the last value. Raises ``django.utils.datastructures."
"MultiValueDictKeyError`` if the key does not exist. (This is a subclass of "
"Python's standard :exc:`KeyError`, so you can stick to catching "
"``KeyError``.)"
msgstr ""
"返回给定键的值。如果键有多个值，则返回最后一个值。如果键不存在，会引发 "
"``django.utils.datastructures.MultiValueDictKeyError``。（这是 Python 标准"
"的 :exc:`KeyError` 的一个子类，所以你可以坚持捕捉 ``KeyError``。)"

msgid ""
"Sets the given key to ``[value]`` (a list whose single element is "
"``value``). Note that this, as other dictionary functions that have side "
"effects, can only be called on a mutable ``QueryDict`` (such as one that was "
"created via :meth:`QueryDict.copy`)."
msgstr ""
"将给定的键设置为 ``[value]`` （一个单一元素为 ``value`` 的列表）。请注意，这"
"个函数和其他有副作用的字典函数一样，只能在一个可变的 ``QueryDict`` 上调用（比"
"如通过 :meth:`QueryDict.copy` 创建的）。"

msgid ""
"Returns ``True`` if the given key is set. This lets you do, e.g., ``if "
"\"foo\" in request.GET``."
msgstr ""
"如果给定的键被设置，返回 ``True``。这让你可以执行，例如，``if \"foo\" in "
"request.GET``。"

msgid ""
"Uses the same logic as :meth:`__getitem__`, with a hook for returning a "
"default value if the key doesn't exist."
msgstr ""
"使用与 :meth:`__getitem__` 相同的逻辑，如果键不存在，则用钩子返回一个默认值。"

msgid ""
"Like :meth:`dict.setdefault`, except it uses :meth:`__setitem__` internally."
msgstr ""
"与 :meth:`dict.setdefault` 一样，只是它在内部使用 :meth:`__setitem__`。"

msgid ""
"Takes either a ``QueryDict`` or a dictionary. Like :meth:`dict.update`, "
"except it *appends* to the current dictionary items rather than replacing "
"them. For example:"
msgstr ""

msgid ""
"Like :meth:`dict.items`, except this uses the same last-value logic as :meth:"
"`__getitem__` and returns an iterator object instead of a view object. For "
"example:"
msgstr ""

msgid ""
"Like :meth:`dict.values`, except this uses the same last-value logic as :"
"meth:`__getitem__` and returns an iterator instead of a view object. For "
"example:"
msgstr ""

msgid "In addition, ``QueryDict`` has the following methods:"
msgstr "此外，``QueryDict`` 有以下方法："

msgid ""
"Returns a copy of the object using :func:`copy.deepcopy`. This copy will be "
"mutable even if the original was not."
msgstr ""
"使用 :func:`copy.deepcopy` 返回对象的副本。这个副本将是可变的，即使原始副本不"
"是。"

msgid ""
"Returns a list of the data with the requested key. Returns an empty list if "
"the key doesn't exist and ``default`` is ``None``. It's guaranteed to return "
"a list unless the default value provided isn't a list."
msgstr ""
"返回带有请求键的数据列表。如果键不存在且 ``default`` 是 ``None``，则返回一个"
"空列表。除非提供的默认值不是一个列表，否则保证返回一个列表。"

msgid "Sets the given key to ``list_`` (unlike :meth:`__setitem__`)."
msgstr "将给定的键设置为 ``list_`` （与 :meth:`__setitem__` 不同）。"

msgid "Appends an item to the internal list associated with key."
msgstr "将一个项目添加到与键相关联的内部列表中。"

msgid ""
"Like :meth:`setdefault`, except it takes a list of values instead of a "
"single value."
msgstr "和 :meth:`setdefault` 一样，只不过它取的是一个值的列表，而不是单个值。"

msgid ""
"Like :meth:`items()`, except it includes all values, as a list, for each "
"member of the dictionary. For example:"
msgstr ""

msgid ""
"Returns a list of values for the given key and removes them from the "
"dictionary. Raises ``KeyError`` if the key does not exist. For example:"
msgstr ""

msgid ""
"Removes an arbitrary member of the dictionary (since there's no concept of "
"ordering), and returns a two value tuple containing the key and a list of "
"all values for the key. Raises ``KeyError`` when called on an empty "
"dictionary. For example:"
msgstr ""

msgid ""
"Returns a ``dict`` representation of ``QueryDict``. For every (key, list) "
"pair in ``QueryDict``, ``dict`` will have (key, item), where item is one "
"element of the list, using the same logic as :meth:`QueryDict.__getitem__`:"
msgstr ""

msgid "Returns a string of the data in query string format. For example:"
msgstr ""

msgid ""
"Use the ``safe`` parameter to pass characters which don't require encoding. "
"For example:"
msgstr ""

msgid "``HttpResponse`` objects"
msgstr "``HttpResponse`` 对象"

msgid ""
"In contrast to :class:`HttpRequest` objects, which are created automatically "
"by Django, :class:`HttpResponse` objects are your responsibility. Each view "
"you write is responsible for instantiating, populating, and returning an :"
"class:`HttpResponse`."
msgstr ""
"与 Django 自动创建的 :class:`HttpRequest` 对象不同， :class:`HttpResponse` 对"
"象是你的责任。你写的每个视图都要负责实例化、填充和返回一个 :class:"
"`HttpResponse` 对象。"

msgid "The :class:`HttpResponse` class lives in the :mod:`django.http` module."
msgstr ":class:`HttpResponse` 类位于 :mod:`django.http` 模块中。"

msgid "Passing strings"
msgstr "传入字符串"

msgid ""
"Typical usage is to pass the contents of the page, as a string, bytestring, "
"or :class:`memoryview`, to the :class:`HttpResponse` constructor:"
msgstr ""

msgid ""
"But if you want to add content incrementally, you can use ``response`` as a "
"file-like object:"
msgstr ""

msgid "Passing iterators"
msgstr "传入迭代器"

msgid ""
"Finally, you can pass ``HttpResponse`` an iterator rather than strings. "
"``HttpResponse`` will consume the iterator immediately, store its content as "
"a string, and discard it. Objects with a ``close()`` method such as files "
"and generators are immediately closed."
msgstr ""
"最后，你可以传递 ``HttpResponse`` 一个迭代器而不是字符串。``HttpResponse`` 将"
"立即消耗迭代器，将其内容存储为一个字符串，然后丢弃它。带有 ``close()`` 方法的"
"对象，如文件和生成器，会立即关闭。"

msgid ""
"If you need the response to be streamed from the iterator to the client, you "
"must use the :class:`StreamingHttpResponse` class instead."
msgstr ""
"如果你需要将响应从迭代器流式传输到客户端，你必须使用 :class:"
"`StreamingHttpResponse` 类来代替。"

msgid "Setting header fields"
msgstr "设置头字段"

msgid ""
"To set or remove a header field in your response, use :attr:`HttpResponse."
"headers`:"
msgstr ""

msgid ""
"You can also manipulate headers by treating your response like a dictionary:"
msgstr ""

msgid ""
"This proxies to ``HttpResponse.headers``, and is the original interface "
"offered by ``HttpResponse``."
msgstr ""

msgid ""
"When using this interface, unlike a dictionary, ``del`` doesn't raise "
"``KeyError`` if the header field doesn't exist."
msgstr ""

msgid "You can also set headers on instantiation:"
msgstr ""

msgid ""
"For setting the ``Cache-Control`` and ``Vary`` header fields, it is "
"recommended to use the :func:`~django.utils.cache.patch_cache_control` and :"
"func:`~django.utils.cache.patch_vary_headers` methods from :mod:`django."
"utils.cache`, since these fields can have multiple, comma-separated values. "
"The \"patch\" methods ensure that other values, e.g. added by a middleware, "
"are not removed."
msgstr ""
"对于设置 ``Cache-Control`` 和 ``Vary`` 头字段，建议使用 :mod:`django.utils."
"cache.patch_cache_control` 和 :mod:`django.utils.cache.patch_vary_headers` 中"
"的 :func:`~django.utils.cache.patch_cache_control` 和 :func:`~django.utils."
"cache.patch_vary_headers` 方法，因为这些字段可以有多个以逗号分隔的值。这些“补"
"丁”方法保证了其他的值，例如由中间件添加的值，不会被删除。"

msgid ""
"HTTP header fields cannot contain newlines. An attempt to set a header field "
"containing a newline character (CR or LF) will raise ``BadHeaderError``"
msgstr ""
"HTTP 头字段不能包含换行符。试图设置一个包含换行符（CR 或 LF）的头字段将引发 "
"``BadHeaderError``。"

msgid "Telling the browser to treat the response as a file attachment"
msgstr "告诉浏览器将响应作为文件附件处理"

msgid ""
"To tell the browser to treat the response as a file attachment, set the "
"``Content-Type`` and ``Content-Disposition`` headers. For example, this is "
"how you might return a Microsoft Excel spreadsheet:"
msgstr ""

msgid ""
"There's nothing Django-specific about the ``Content-Disposition`` header, "
"but it's easy to forget the syntax, so we've included it here."
msgstr ""
"``Content-Disposition`` 头并没有什么 Django 特有的内容，但是很容易忘记语法，"
"所以我们把它包含在这里。"

msgid ""
"A bytestring representing the content, encoded from a string if necessary."
msgstr "一个代表内容的字节字符串，必要时由字符串编码。"

msgid ""
"A :py:obj:`http.cookies.SimpleCookie` object holding the cookies included in "
"the response."
msgstr ""

msgid ""
"A case insensitive, dict-like object that provides an interface to all HTTP "
"headers on the response, except a ``Set-Cookie`` header. See :ref:`setting-"
"header-fields` and :attr:`HttpResponse.cookies`."
msgstr ""

msgid ""
"A string denoting the charset in which the response will be encoded. If not "
"given at ``HttpResponse`` instantiation time, it will be extracted from "
"``content_type`` and if that is unsuccessful, the :setting:`DEFAULT_CHARSET` "
"setting will be used."
msgstr ""
"表示响应将被编码的字符集的字符串。如果在 ``HttpResponse`` 实例化时没有给出，"
"将从 ``content_type`` 中提取，如果不成功，将使用 :setting:`DEFAULT_CHARSET` "
"设置。"

msgid "The :rfc:`HTTP status code <9110#section-15>` for the response."
msgstr ""

msgid ""
"Unless :attr:`reason_phrase` is explicitly set, modifying the value of "
"``status_code`` outside the constructor will also modify the value of "
"``reason_phrase``."
msgstr ""
"除非 :attr:`reason_phrase` 被明确设置，否则在构造函数外修改 ``status_code`` "
"的值也会修改 ``reason_phrase`` 的值。"

msgid ""
"The HTTP reason phrase for the response. It uses the :rfc:`HTTP standard's "
"<9110#section-15.1>` default reason phrases."
msgstr ""

msgid ""
"Unless explicitly set, ``reason_phrase`` is determined by the value of :attr:"
"`status_code`."
msgstr "除非明确设置，否则 ``reason_phrase`` 由 :attr:`status_code` 的值决定。"

msgid "This is always ``False``."
msgstr "这总是 ``False``。"

msgid ""
"This attribute exists so middleware can treat streaming responses "
"differently from regular responses."
msgstr "此属性的存在是为了让中间件能够将流式响应与常规响应区别对待。"

msgid "``True`` if the response has been closed."
msgstr "``True`` 如果响应已经结束。"

msgid ""
"Instantiates an ``HttpResponse`` object with the given page content, content "
"type, and headers."
msgstr ""

msgid ""
"``content`` is most commonly an iterator, bytestring, :class:`memoryview`, "
"or string. Other types will be converted to a bytestring by encoding their "
"string representation. Iterators should return strings or bytestrings and "
"those will be joined together to form the content of the response."
msgstr ""
"``content`` 最常见的是迭代器、字节字符串、:class:`memoryview` 或字符串。其他"
"类型将通过对它们的字符串表示进行编码而转换为字节组。迭代器应该返回字符串或字"
"节字符串，这些将被连接在一起以形成响应的内容。"

msgid ""
"``content_type`` is the MIME type optionally completed by a character set "
"encoding and is used to fill the HTTP ``Content-Type`` header. If not "
"specified, it is formed by ``'text/html'`` and the :setting:"
"`DEFAULT_CHARSET` settings, by default: ``\"text/html; charset=utf-8\"``."
msgstr ""
"``content_type`` 是 MIME 类型，可选择用字符集编码完成，用于填充 HTTP "
"``Content-Type`` 头。如果没有指定，则由 ``'text/html'`` 和 :setting:"
"`DEFAULT_CHARSET` 配置组成，默认情况下：``\"text/html; charset=utf-8\"``。"

msgid ""
"``status`` is the :rfc:`HTTP status code <9110#section-15>` for the "
"response. You can use Python's :py:class:`http.HTTPStatus` for meaningful "
"aliases, such as ``HTTPStatus.NO_CONTENT``."
msgstr ""

msgid ""
"``reason`` is the HTTP response phrase. If not provided, a default phrase "
"will be used."
msgstr "``reason`` 是 HTTP 响应短语。如果没有提供，将使用默认短语。"

msgid ""
"``charset`` is the charset in which the response will be encoded. If not "
"given it will be extracted from ``content_type``, and if that is "
"unsuccessful, the :setting:`DEFAULT_CHARSET` setting will be used."
msgstr ""
"``charset`` 是对响应进行编码的字符集。如果没有给出，将从 ``content_type`` 中"
"提取，如果不成功，将使用 :setting:`DEFAULT_CHARSET` 配置。"

msgid "``headers`` is a :class:`dict` of HTTP headers for the response."
msgstr ""

msgid ""
"Sets the given header name to the given value. Both ``header`` and ``value`` "
"should be strings."
msgstr ""
"将给定的响应头名设置为给定的值。``header`` 和 ``value`` 都应该是字符串。"

msgid ""
"Deletes the header with the given name. Fails silently if the header doesn't "
"exist. Case-insensitive."
msgstr "删除指定名称的响应头。如果头不存在，则静默失败。不区分大小写。"

msgid "Returns the value for the given header name. Case-insensitive."
msgstr "返回给定响应头名的值。不区分大小写。"

msgid ""
"Returns the value for the given header, or an ``alternate`` if the header "
"doesn't exist."
msgstr "返回给定响应头的值，如果头不存在，则返回 ``alternate``。"

msgid ""
"Returns ``True`` or ``False`` based on a case-insensitive check for a header "
"with the given name."
msgstr ""
"根据对给定名称的响应头进行不区分大小写的检查，返回 ``True`` 或 ``False``。"

msgid "Acts like :meth:`dict.items` for HTTP headers on the response."
msgstr "像 :meth:`dict.items` 一样作用于响应的 HTTP 头信息。"

msgid "Sets a header unless it has already been set."
msgstr "设置响应头，除非它已经被设置。"

msgid ""
"Sets a cookie. The parameters are the same as in the :class:`~http.cookies."
"Morsel` cookie object in the Python standard library."
msgstr ""
"设置一个 cookie。参数与 Python 标准库中的 :class:`~http.cookies.Morsel` "
"cookie 对象相同。"

msgid ""
"``max_age`` should be a :class:`~datetime.timedelta` object, an integer "
"number of seconds, or ``None`` (default) if the cookie should last only as "
"long as the client's browser session. If ``expires`` is not specified, it "
"will be calculated."
msgstr ""

msgid "Support for ``timedelta`` objects was added."
msgstr ""

msgid ""
"``expires`` should either be a string in the format ``\"Wdy, DD-Mon-YY HH:MM:"
"SS GMT\"`` or a ``datetime.datetime`` object in UTC. If ``expires`` is a "
"``datetime`` object, the ``max_age`` will be calculated."
msgstr ""
"``expires`` 应是格式为 ``\"Wdy, DD-Mon-YY HH:MM:SS GMT\"`` 的字符串，或者是 "
"UTC 的 ``datetime.datetime`` 对象。如果 ``expires`` 是一个 ``datetime`` 对"
"象，将计算 ``max_age``。"

msgid ""
"Use ``domain`` if you want to set a cross-domain cookie. For example, "
"``domain=\"example.com\"`` will set a cookie that is readable by the domains "
"www.example.com, blog.example.com, etc. Otherwise, a cookie will only be "
"readable by the domain that set it."
msgstr ""
"如果你想设置一个跨域的 cookie，请使用 ``domain``。例如，``domain=\"example."
"com\"`` 将设置一个可被 www.example.com、blog.example.com 等域读取的 cookie。"
"否则，一个 cookie 将只能被设置它的域读取。"

msgid ""
"Use ``secure=True`` if you want the cookie to be only sent to the server "
"when a request is made with the ``https`` scheme."
msgstr ""
"如果你想让 cookie 只在使用 ``https`` 方案进行请求时才发送给服务器，请使用 "
"``secure=True``。"

msgid ""
"Use ``httponly=True`` if you want to prevent client-side JavaScript from "
"having access to the cookie."
msgstr ""
"如果你想防止客户端的 JavaScript 访问 cookie，请使用 ``httponly=True``。"

msgid ""
"HttpOnly_ is a flag included in a Set-Cookie HTTP response header. It's part "
"of the :rfc:`RFC 6265 <6265#section-4.1.2.6>` standard for cookies and can "
"be a useful way to mitigate the risk of a client-side script accessing the "
"protected cookie data."
msgstr ""
"HttpOnly_ 是包含在 Set-Cookie HTTP 响应头中的一个标志。它是 :rfc:`RFC 6265 "
"<6265#section-4.1.2.6>` 标准中 Cookie 的一部分，可以作为一种有用的方式来降低"
"客户端脚本访问受保护 Cookie 数据的风险。"

msgid ""
"Use ``samesite='Strict'`` or ``samesite='Lax'`` to tell the browser not to "
"send this cookie when performing a cross-origin request. `SameSite`_ isn't "
"supported by all browsers, so it's not a replacement for Django's CSRF "
"protection, but rather a defense in depth measure."
msgstr ""
"使用 ``samesite='Strict'`` 或 ``samesite='Lax'`` 来告诉浏览器在执行跨源请求时"
"不要发送这个 cookie。`SameSite`_ 并不是所有浏览器都支持，所以它并不能替代 "
"Django 的 CSRF 保护，而是一种深度防御措施。"

msgid ""
"Use ``samesite='None'`` (string) to explicitly state that this cookie is "
"sent with all same-site and cross-site requests."
msgstr ""
"使用 ``samesite=''None'`` （字符串）来明确说明这个 cookie 会随着所有的同站和"
"跨站请求而发送。"

msgid ""
":rfc:`RFC 6265 <6265#section-6.1>` states that user agents should support "
"cookies of at least 4096 bytes. For many browsers this is also the maximum "
"size. Django will not raise an exception if there's an attempt to store a "
"cookie of more than 4096 bytes, but many browsers will not set the cookie "
"correctly."
msgstr ""
":rfc:`RFC 6265 <6265#section-6.1>` 规定，用户代理应支持至少 4096 字节的 "
"cookies。对于很多浏览器来说，这也是最大的尺寸。如果试图存储一个超过 4096 字节"
"的 cookie，Django 不会引发异常，但很多浏览器不会正确设置 cookie。"

msgid ""
"Like :meth:`~HttpResponse.set_cookie()`, but :doc:`cryptographic signing </"
"topics/signing>` the cookie before setting it. Use in conjunction with :meth:"
"`HttpRequest.get_signed_cookie`. You can use the optional ``salt`` argument "
"for added key strength, but you will need to remember to pass it to the "
"corresponding :meth:`HttpRequest.get_signed_cookie` call."
msgstr ""
"像 :meth:`~HttpResponse.set_cookie()` 一样，但是 :doc:`在设置 cookie 之前对它"
"进行加密签名 </topics/signing>`。与 :meth:`HttpRequest.get_signed_cookie` 一"
"起使用。你可以使用可选的 ``salt`` 参数来增加密钥强度，但你需要记得把它传递给"
"相应的 :meth:`HttpRequest.get_signed_cookie` 调用。"

msgid ""
"Deletes the cookie with the given key. Fails silently if the key doesn't "
"exist."
msgstr "删除给定键的 cookie。如果键不存在，则静默失败。"

msgid ""
"Due to the way cookies work, ``path`` and ``domain`` should be the same "
"values you used in ``set_cookie()`` -- otherwise the cookie may not be "
"deleted."
msgstr ""
"由于 cookie 的工作方式，``path`` 和 ``domain`` 应该与你在 ``set_cookie()`` 中"
"使用的值相同，否则 cookie 可能不会被删除。"

msgid ""
"This method is called at the end of the request directly by the WSGI server."
msgstr "本方法在请求结束时由 WSGI 服务器直接调用。"

msgid "This method makes an :class:`HttpResponse` instance a file-like object."
msgstr "这个方法使一个 :class:`HttpResponse` 实例成为一个类似文件的对象。"

msgid ""
"Returns the value of :attr:`HttpResponse.content`. This method makes an :"
"class:`HttpResponse` instance a stream-like object."
msgstr ""
"返回 :attr:`HttpResponse.content` 的值。本方法使一个 :class:`HttpResponse`实"
"例成为一个类流对象。"

msgid ""
"Always ``False``. This method makes an :class:`HttpResponse` instance a "
"stream-like object."
msgstr "总是 ``False``。此方法使 :class:`HttpResponse` 实例成为一个类流对象。"

msgid ""
"Always ``True``. This method makes an :class:`HttpResponse` instance a "
"stream-like object."
msgstr "总是 ``True``。此方法使 :class:`HttpResponse` 实例成为一个类流对象。"

msgid ""
"Writes a list of lines to the response. Line separators are not added. This "
"method makes an :class:`HttpResponse` instance a stream-like object."
msgstr ""
"将行的列表写入响应。不添加行的分隔符。此方法使 :class:`HttpResponse` 实例成为"
"一个类流对象。"

msgid "``HttpResponse`` subclasses"
msgstr "``HttpResponse`` 子类"

msgid ""
"Django includes a number of ``HttpResponse`` subclasses that handle "
"different types of HTTP responses. Like ``HttpResponse``, these subclasses "
"live in :mod:`django.http`."
msgstr ""
"Django 包含了许多 ``HttpResponse`` 的子类来处理不同类型的 HTTP 响应。像 "
"``HttpResponse`` 一样，这些子类位于 :mod:`django.http` 中。"

msgid ""
"The first argument to the constructor is required -- the path to redirect "
"to. This can be a fully qualified URL (e.g. ``'https://www.yahoo.com/"
"search/'``), an absolute path with no domain (e.g. ``'/search/'``), or even "
"a relative path (e.g. ``'search/'``). In that last case, the client browser "
"will reconstruct the full URL itself according to the current path. See :"
"class:`HttpResponse` for other optional constructor arguments. Note that "
"this returns an HTTP status code 302."
msgstr ""
"构造函数的第一个参数是必需的——要重定向的路径。这可以是一个完全限定的 URL（例"
"如 ``'https://www.yahoo.com/search/``)，一个没有域名的绝对路径（例如 ``'/"
"search/'``），甚至是一个相对路径（例如 ``'search/'``）。在最后一种情况下，客"
"户端浏览器会根据当前路径自己重建完整的 URL。参见 :class:`HttpResponse` 了解其"
"他可选的构造函数参数。请注意，这将返回一个 HTTP 状态码 302。"

msgid ""
"This read-only attribute represents the URL the response will redirect to "
"(equivalent to the ``Location`` response header)."
msgstr "这个只读属性表示响应将重定向到的 URL（相当于 ``Location`` 响应头）。"

msgid ""
"Like :class:`HttpResponseRedirect`, but it returns a permanent redirect "
"(HTTP status code 301) instead of a \"found\" redirect (status code 302)."
msgstr ""
"就像 :class:`HttpResponseRedirect` 一样，但它返回的是一个永久重定向（HTTP 状"
"态码 301），而不是“found”重定向（状态码 302）。"

msgid ""
"The constructor doesn't take any arguments and no content should be added to "
"this response. Use this to designate that a page hasn't been modified since "
"the user's last request (status code 304)."
msgstr ""
"构造函数不接受任何参数，也不应该添加任何内容到这个响应中。用它来表示自用户最"
"后一次请求后，页面没有被修改（状态码 304）。"

msgid "Acts just like :class:`HttpResponse` but uses a 400 status code."
msgstr "就像 :class:`HttpResponse` 一样，但使用 400 状态码。"

msgid "Acts just like :class:`HttpResponse` but uses a 404 status code."
msgstr "就像 :class:`HttpResponse` 一样，但使用 404 状态码。"

msgid "Acts just like :class:`HttpResponse` but uses a 403 status code."
msgstr "就像 :class:`HttpResponse` 一样，但使用 403 状态码。"

msgid ""
"Like :class:`HttpResponse`, but uses a 405 status code. The first argument "
"to the constructor is required: a list of permitted methods (e.g. ``['GET', "
"'POST']``)."
msgstr ""
"就像 :class:`HttpResponse` 一样，但使用 405 状态码。构造函数的第一个参数是必"
"需的：一个允许的方法列表（例如 ``['GET', 'POST']``）。"

msgid "Acts just like :class:`HttpResponse` but uses a 410 status code."
msgstr "就像 :class:`HttpResponse` 一样，但使用 410 状态码。"

msgid "Acts just like :class:`HttpResponse` but uses a 500 status code."
msgstr "就像 :class:`HttpResponse` 一样，但使用 500 状态码。"

msgid ""
"If a custom subclass of :class:`HttpResponse` implements a ``render`` "
"method, Django will treat it as emulating a :class:`~django.template."
"response.SimpleTemplateResponse`, and the ``render`` method must itself "
"return a valid response object."
msgstr ""
"如果 :class:`HttpResponse` 的自定义子类实现了 ``render`` 方法，Django 会将其"
"视为模拟 :class:`~django.template.response.SimpleTemplateResponse`，并且 "
"``render`` 方法本身必须返回一个有效的响应对象。"

msgid "Custom response classes"
msgstr "自定义响应类"

msgid ""
"If you find yourself needing a response class that Django doesn't provide, "
"you can create it with the help of :py:class:`http.HTTPStatus`. For example:"
msgstr ""

msgid "``JsonResponse`` objects"
msgstr "``JsonResponse`` 对象"

msgid ""
"An :class:`HttpResponse` subclass that helps to create a JSON-encoded "
"response. It inherits most behavior from its superclass with a couple "
"differences:"
msgstr ""
"一个 :class:`HttpResponse` 子类，帮助创建一个 JSON 编码的响应。它继承了它的超"
"类的大部分行为，但有一些不同："

msgid ""
"Its default ``Content-Type`` header is set to :mimetype:`application/json`."
msgstr "其默认的 ``Content-Type`` 头设置为 :mimetype:`application/json`。"

msgid ""
"The first parameter, ``data``, should be a ``dict`` instance. If the "
"``safe`` parameter is set to ``False`` (see below) it can be any JSON-"
"serializable object."
msgstr ""
"第一个参数 ``data`` 应该是 ``dict`` 实例。如果 ``safe`` 参数设置为 ``False`` "
"（见下文），它可以是任何 JSON 可序列化的对象。"

msgid ""
"The ``encoder``, which defaults to :class:`django.core.serializers.json."
"DjangoJSONEncoder`, will be used to serialize the data. See :ref:`JSON "
"serialization <serialization-formats-json>` for more details about this "
"serializer."
msgstr ""
"``encoder``，默认为 :class:`django.core.serializers.json.DjangoJSONEncoder`，"
"将用于序列化数据。关于这个序列化器的更多细节，请参见 :ref:`JSON 序列化 "
"<serialization-formats-json>`。"

msgid ""
"The ``safe`` boolean parameter defaults to ``True``. If it's set to "
"``False``, any object can be passed for serialization (otherwise only "
"``dict`` instances are allowed). If ``safe`` is ``True`` and a non-``dict`` "
"object is passed as the first argument, a :exc:`TypeError` will be raised."
msgstr ""
"``safe`` 布尔参数默认为 ``True``。如果它被设置为 ``False``，任何对象都可以被"
"传递到序列化中（否则只允许 ``dict`` 实例）。如果 ``safe`` 为 ``True``，而第一"
"个参数是一个非 ``dict`` 对象，则会引发一个 :exc:`TypeError`。"

msgid ""
"The ``json_dumps_params`` parameter is a dictionary of keyword arguments to "
"pass to the ``json.dumps()`` call used to generate the response."
msgstr ""
"``json_dumps_params`` 参数是一个关键字参数的字典，用来传递给 ``json."
"dumps()`` 调用，用于生成响应。"

msgid "Typical usage could look like:"
msgstr ""

msgid "Serializing non-dictionary objects"
msgstr "序列化非字典对象"

msgid ""
"In order to serialize objects other than ``dict`` you must set the ``safe`` "
"parameter to ``False``:"
msgstr ""

msgid "Without passing ``safe=False``, a :exc:`TypeError` will be raised."
msgstr "如果没有传递 ``safe=False``，将引发一个 :exc:`TypeError`。"

msgid ""
"Note that an API based on ``dict`` objects is more extensible, flexible, and "
"makes it easier to maintain forwards compatibility. Therefore, you should "
"avoid using non-dict objects in JSON-encoded response."
msgstr ""

msgid ""
"Before the `5th edition of ECMAScript <https://262.ecma-international."
"org/5.1/#sec-11.1.4>`_ it was possible to poison the JavaScript ``Array`` "
"constructor. For this reason, Django does not allow passing non-dict objects "
"to the :class:`~django.http.JsonResponse` constructor by default.  However, "
"most modern browsers implement ECMAScript 5 which removes this attack "
"vector. Therefore it is possible to disable this security precaution."
msgstr ""

msgid "Changing the default JSON encoder"
msgstr "更改默认 JSON 编码器"

msgid ""
"If you need to use a different JSON encoder class you can pass the "
"``encoder`` parameter to the constructor method:"
msgstr ""

msgid "``StreamingHttpResponse`` objects"
msgstr "``StreamingHttpResponse`` 对象"

msgid ""
"The :class:`StreamingHttpResponse` class is used to stream a response from "
"Django to the browser."
msgstr ""

msgid "Advanced usage"
msgstr ""

msgid ""
":class:`StreamingHttpResponse` is somewhat advanced, in that it is important "
"to know whether you'll be serving your application synchronously under WSGI "
"or asynchronously under ASGI, and adjust your usage appropriately."
msgstr ""

msgid "Please read these notes with care."
msgstr ""

msgid ""
"An example usage of :class:`StreamingHttpResponse` under WSGI is streaming "
"content when generating the response would take too long or uses too much "
"memory. For instance, it's useful for :ref:`generating large CSV files "
"<streaming-csv-files>`."
msgstr ""

msgid ""
"There are performance considerations when doing this, though. Django, under "
"WSGI, is designed for short-lived requests. Streaming responses will tie a "
"worker process for the entire duration of the response. This may result in "
"poor performance."
msgstr ""

msgid ""
"Generally speaking, you would perform expensive tasks outside of the request-"
"response cycle, rather than resorting to a streamed response."
msgstr ""

msgid ""
"When serving under ASGI, however, a :class:`StreamingHttpResponse` need not "
"stop other requests from being served whilst waiting for I/O. This opens up "
"the possibility of long-lived requests for streaming content and "
"implementing patterns such as long-polling, and server-sent events."
msgstr ""

msgid ""
"Even under ASGI note, :class:`StreamingHttpResponse` should only be used in "
"situations where it is absolutely required that the whole content isn't "
"iterated before transferring the data to the client. Because the content "
"can't be accessed, many middleware can't function normally. For example the "
"``ETag`` and ``Content-Length`` headers can't be generated for streaming "
"responses."
msgstr ""

msgid ""
"The :class:`StreamingHttpResponse` is not a subclass of :class:"
"`HttpResponse`, because it features a slightly different API. However, it is "
"almost identical, with the following notable differences:"
msgstr ""
":class:`StreamingHttpResponse` 不是 :class:`HttpResponse` 的子类，因此它的 "
"API 略有不同。然而，它几乎是相同的，但有以下显著的区别。"

msgid ""
"It should be given an iterator that yields bytestrings, :class:`memoryview`, "
"or strings as content. When serving under WSGI, this should be a sync "
"iterator. When serving under ASGI, then it should be an async iterator."
msgstr ""

msgid ""
"You cannot access its content, except by iterating the response object "
"itself. This should only occur when the response is returned to the client: "
"you should not iterate the response yourself."
msgstr ""

msgid ""
"Under WSGI the response will be iterated synchronously. Under ASGI the "
"response will be iterated asynchronously. (This is why the iterator type "
"must match the protocol you're using.)"
msgstr ""

msgid ""
"To avoid a crash, an incorrect iterator type will be mapped to the correct "
"type during iteration, and a warning will be raised, but in order to do this "
"the iterator must be fully-consumed, which defeats the purpose of using a :"
"class:`StreamingHttpResponse` at all."
msgstr ""

msgid ""
"It has no ``content`` attribute. Instead, it has a :attr:"
"`~StreamingHttpResponse.streaming_content` attribute. This can be used in "
"middleware to wrap the response iterable, but should not be consumed."
msgstr ""

msgid ""
"You cannot use the file-like object ``tell()`` or ``write()`` methods. Doing "
"so will raise an exception."
msgstr ""
"你不能使用类文件对象的 ``tell()`` 或 ``write()`` 方法。这样做会引起一个异常。"

msgid ""
"The :class:`HttpResponseBase` base class is common between :class:"
"`HttpResponse` and :class:`StreamingHttpResponse`."
msgstr ""

msgid ""
"An iterator of the response content, bytestring encoded according to :attr:"
"`HttpResponse.charset`."
msgstr "响应内容的迭代器，根据 :attr:`HttpResponse.charset` 编码的字节字符串。"

msgid "This is always ``True``."
msgstr "这总是 ``True``。"

msgid ""
"Boolean indicating whether :attr:`StreamingHttpResponse.streaming_content` "
"is an asynchronous iterator or not."
msgstr ""

msgid ""
"This is useful for middleware needing to wrap :attr:`StreamingHttpResponse."
"streaming_content`."
msgstr ""

msgid "``FileResponse`` objects"
msgstr "``FileResponse`` 对象"

msgid ""
":class:`FileResponse` is a subclass of :class:`StreamingHttpResponse` "
"optimized for binary files. It uses :pep:`wsgi.file_wrapper <3333#optional-"
"platform-specific-file-handling>` if provided by the wsgi server, otherwise "
"it streams the file out in small chunks."
msgstr ""
":class:`FileResponse` 是 :class:`StreamingHttpResponse` 的一个子类，它针对二"
"进制文件进行了优化。如果 wsgi 服务器提供的话，它使用 :pep:`wsgi.file_wrapper "
"<3333#optional-platform-specific-file-handling>`，否则它将文件以小块的形式流"
"式传输出去。"

msgid ""
"If ``as_attachment=True``, the ``Content-Disposition`` header is set to "
"``attachment``, which asks the browser to offer the file to the user as a "
"download. Otherwise, a ``Content-Disposition`` header with a value of "
"``inline`` (the browser default) will be set only if a filename is available."
msgstr ""
"如果 ``as_attachment=True``，``Content-Disposition`` 头被设置为 "
"``attachment``，要求浏览器将文件作为下载文件提供给用户。否则，只有在有文件名"
"的情况下，才会设置值为 ``inline`` 的 ``Content-Disposition`` 头（浏览器默"
"认）。"

msgid ""
"If ``open_file`` doesn't have a name or if the name of ``open_file`` isn't "
"appropriate, provide a custom file name using the ``filename``  parameter. "
"Note that if you pass a file-like object like ``io.BytesIO``, it's your task "
"to ``seek()`` it before passing it to ``FileResponse``."
msgstr ""
"如果 ``open_file`` 没有名字，或者 ``open_file`` 的名字不合适，可以使用 "
"``filename`` 参数提供一个自定义的文件名。请注意，如果你传递了一个类似文件的对"
"象，比如 ``io.BytesIO``，你的任务是在把它传递给 ``FileResponse`` 之前 "
"``seek()```。"

msgid ""
"The ``Content-Length`` header is automatically set when it can be guessed "
"from the content of ``open_file``."
msgstr ""

msgid ""
"The ``Content-Type`` header is automatically set when it can be guessed from "
"the ``filename``, or the name of ``open_file``."
msgstr ""

msgid ""
"``FileResponse`` accepts any file-like object with binary content, for "
"example a file open in binary mode like so:"
msgstr ""

msgid ""
"The file will be closed automatically, so don't open it with a context "
"manager."
msgstr "该文件会自动关闭，所以不要用上下文管理器打开它。"

msgid "Use under ASGI"
msgstr ""

msgid ""
"Python's file API is synchronous. This means that the file must be fully "
"consumed in order to be served under ASGI."
msgstr ""

msgid ""
"In order to stream a file asynchronously you need to use a third-party "
"package that provides an asynchronous file API, such as `aiofiles <https://"
"github.com/Tinche/aiofiles>`_."
msgstr ""

msgid ""
"This method is automatically called during the response initialization and "
"set various headers (``Content-Length``, ``Content-Type``, and ``Content-"
"Disposition``) depending on ``open_file``."
msgstr ""
"该方法在响应初始化过程中自动调用，并根据 ``open_file`` 设置各种头文件"
"（``Content-Length``、``Content-Type`` 和 ``Content-Disposition``）。"

msgid "``HttpResponseBase`` class"
msgstr ""

msgid ""
"The :class:`HttpResponseBase` class is common to all Django responses. It "
"should not be used to create responses directly, but it can be useful for "
"type-checking."
msgstr ""

msgid "``SchemaEditor``"
msgstr "``SchemaEditor``"

msgid ""
"Django's migration system is split into two parts; the logic for calculating "
"and storing what operations should be run (``django.db.migrations``), and "
"the database abstraction layer that turns things like \"create a model\" or "
"\"delete a field\" into SQL - which is the job of the ``SchemaEditor``."
msgstr ""
"Django 的迁移系统分为两部分，一部分是计算和存储应该运行哪些操作的逻辑"
"（``django.db.migrations``），另一部分是将“创建模型”或“删除字段”这样的事情变"
"成 SQL 的数据库抽象层——这是 ``SchemaEditor`` 的工作。"

msgid ""
"It's unlikely that you will want to interact directly with ``SchemaEditor`` "
"as a normal developer using Django, but if you want to write your own "
"migration system, or have more advanced needs, it's a lot nicer than writing "
"SQL."
msgstr ""
"作为一个使用 Django 的普通开发者，你不太可能想直接与 ``SchemaEditor`` 进行交"
"互，但如果你想写自己的迁移系统，或者有更高级的需求，它比写 SQL 要好得多。"

msgid ""
"Each database backend in Django supplies its own version of "
"``SchemaEditor``, and it's always accessible via the ``connection."
"schema_editor()`` context manager::"
msgstr ""
"Django 中的每个数据库后端都提供了自己的 ``SchemaEditor`` 版本，并且总是通过 "
"``connection.schema_editor()`` 上下文管理器："

msgid ""
"It must be used via the context manager as this allows it to manage things "
"like transactions and deferred SQL (like creating ``ForeignKey`` "
"constraints)."
msgstr ""
"它必须通过上下文管理器使用，因为这允许它管理诸如事务和延迟 SQL（如创建 "
"``ForeignKey`` 约束）的事情。"

msgid ""
"It exposes all possible operations as methods, that should be called in the "
"order you wish changes to be applied. Some possible operations or types of "
"change are not possible on all databases - for example, MyISAM does not "
"support foreign key constraints."
msgstr ""
"它将所有可能的操作以方法的形式展现出来，这些方法应该按照你希望的改变顺序被调"
"用。有些可能的操作或更改类型并不是在所有的数据库中都能实现——例如，MyISAM 不支"
"持外键约束。"

msgid ""
"If you are writing or maintaining a third-party database backend for Django, "
"you will need to provide a ``SchemaEditor`` implementation in order to work "
"with Django's migration functionality - however, as long as your database is "
"relatively standard in its use of SQL and relational design, you should be "
"able to subclass one of the built-in Django ``SchemaEditor`` classes and "
"tweak the syntax a little."
msgstr ""
"如果你正在为 Django 编写或维护一个第三方数据库后端，你将需要提供一个 "
"``SchemaEditor`` 的实现，以便与 Django 的迁移功能一起工作——不过，只要你的数据"
"库在使用 SQL 和关系型设计方面比较标准，你应该能够将 Django 内置的 "
"``SchemaEditor`` 类子类化，并对语法进行一些调整。"

msgid "``execute()``"
msgstr "``execute()``"

msgid ""
"Executes the SQL statement passed in, with parameters if supplied. This is a "
"wrapper around the normal database cursors that allows capture of the SQL to "
"a ``.sql`` file if the user wishes."
msgstr ""
"执行传入的 SQL 语句，如果提供参数，则执行。这是一个围绕普通数据库游标的包装"
"器，如果用户愿意，允许捕获 SQL 语句到 ``.sql` `文件。"

msgid "``create_model()``"
msgstr "``create_model()``"

msgid ""
"Creates a new table in the database for the provided model, along with any "
"unique constraints or indexes it requires."
msgstr ""
"在数据库中为所提供的模型创建一个新表，以及它所需要的任何唯一约束或索引。"

msgid "``delete_model()``"
msgstr "``delete_model()``"

msgid ""
"Drops the model's table in the database along with any unique constraints or "
"indexes it has."
msgstr "将模型的表连同它所拥有的任何唯一约束或索引一起在数据库中丢弃。"

msgid "``add_index()``"
msgstr "``add_index()``"

msgid "Adds ``index`` to ``model``’s table."
msgstr "在 ``model`` 的表中添加 ``index``。"

msgid "``remove_index()``"
msgstr "``remove_index()``"

msgid "Removes ``index`` from ``model``’s table."
msgstr "将 ``index`` 从 ``model`` 的表中删除。"

msgid "``rename_index()``"
msgstr ""

msgid "Renames ``old_index`` from ``model``’s table to ``new_index``."
msgstr ""

msgid "``add_constraint()``"
msgstr "``add_constraint()``"

msgid "Adds ``constraint`` to ``model``'s table."
msgstr "在 ``model`` 的表中添加 ``constraint``。"

msgid "``remove_constraint()``"
msgstr "``remove_constraint()``"

msgid "Removes ``constraint`` from ``model``'s table."
msgstr "将 ``constraint`` 从 ``model`` 的表中删除。"

msgid "``alter_unique_together()``"
msgstr "``alter_unique_together()``"

msgid ""
"Changes a model's :attr:`~django.db.models.Options.unique_together` value; "
"this will add or remove unique constraints from the model's table until they "
"match the new value."
msgstr ""
"改变模型的 :attr:`~django.db.models.Options.unique_together` 值；这将从模型的"
"表中添加或删除唯一约束，直到它们与新的值相匹配。"

msgid "``alter_index_together()``"
msgstr "``alter_index_together()``"

msgid ""
"Changes a model's :attr:`~django.db.models.Options.index_together` value; "
"this will add or remove indexes from the model's table until they match the "
"new value."
msgstr ""
"更改模型的 :attr:`~django.db.models.Options.index_together` 值；这将从模型的"
"表中添加或删除索引，直到它们与新值相匹配。"

msgid "``alter_db_table()``"
msgstr "``alter_db_table()``"

msgid "Renames the model's table from ``old_db_table`` to ``new_db_table``."
msgstr "将模型的表从 ``old_db_table`` 改名为 ``new_db_table``。"

msgid "``alter_db_table_comment()``"
msgstr ""

msgid "Change the ``model``’s table comment to ``new_db_table_comment``."
msgstr ""

msgid "``alter_db_tablespace()``"
msgstr "``alter_db_tablespace()``"

msgid "Moves the model's table from one tablespace to another."
msgstr "将模型的表从一个表空间移动到另一个表空间。"

msgid "``add_field()``"
msgstr "``add_field()``"

msgid ""
"Adds a column (or sometimes multiple) to the model's table to represent the "
"field. This will also add indexes or a unique constraint if the field has "
"``db_index=True`` or ``unique=True``."
msgstr ""
"在模型的表中添加一列（或有时是多列）来表示该字段。如果字段有 "
"``db_index=True`` 或 ``unique=True``，还将添加索引或唯一约束。"

msgid ""
"If the field is a ``ManyToManyField`` without a value for ``through``, "
"instead of creating a column, it will make a table to represent the "
"relationship. If ``through`` is provided, it is a no-op."
msgstr ""
"如果字段是 ``ManyToManyField``，没有 ``through`` 的值，它将不创建一列，而是制"
"作一个表来表示这种关系。如果提供了 ``through``，则为无操作。"

msgid ""
"If the field is a ``ForeignKey``, this will also add the foreign key "
"constraint to the column."
msgstr "如果字段是 ``ForeignKey``，这也会将外键约束添加到列中。"

msgid "``remove_field()``"
msgstr "``remove_field()``"

msgid ""
"Removes the column(s) representing the field from the model's table, along "
"with any unique constraints, foreign key constraints, or indexes caused by "
"that field."
msgstr ""
"从模型的表中删除代表字段的列，以及由该字段引起的任何唯一约束、外键约束或索"
"引。"

msgid ""
"If the field is a ManyToManyField without a value for ``through``, it will "
"remove the table created to track the relationship. If ``through`` is "
"provided, it is a no-op."
msgstr ""
"如果字段是一个 ManyToManyField，没有 ``through`` 的值，它将删除为跟踪关系而创"
"建的表。如果提供了 ``through``，则为无操作。"

msgid "``alter_field()``"
msgstr "``alter_field()``"

msgid ""
"This transforms the field on the model from the old field to the new one. "
"This includes changing the name of the column (the :attr:`~django.db.models."
"Field.db_column` attribute), changing the type of the field (if the field "
"class changes), changing the ``NULL`` status of the field, adding or "
"removing field-only unique constraints and indexes, changing primary key, "
"and changing the destination of ``ForeignKey`` constraints."
msgstr ""
"这将模型上的字段从旧字段转换为新字段。这包括改变列的名称（:attr:`~django.db."
"models.Field.db_column` 属性），改变字段的类型（如果字段类发生变化），改变字"
"段的 ``NULL`` 状态，添加或删除只属于字段的唯一约束和索引，改变主键，以及改变 "
"``ForeignKey`` 约束的目的地。"

msgid ""
"The most common transformation this cannot do is transforming a "
"``ManyToManyField`` into a normal Field or vice-versa; Django cannot do this "
"without losing data, and so it will refuse to do it. Instead, :meth:`."
"remove_field` and :meth:`.add_field` should be called separately."
msgstr ""
"最常见的不能做的转换是将一个 ``ManyToManyField`` 转换为一个普通的 Field，反之"
"亦然；Django 不能在不丢失数据的情况下这样做，所以它会拒绝这样做。相反， :"
"meth:`.remove_field` 和 :meth:`.add_field` 应该分别调用。"

msgid ""
"If the database has the ``supports_combined_alters``, Django will try and do "
"as many of these in a single database call as possible; otherwise, it will "
"issue a separate ALTER statement for each change, but will not issue ALTERs "
"where no change is required."
msgstr ""
"如果数据库有 ``supports_combined_alters``，Django 会尝试在一次数据库调用中尽"
"可能多地进行这些操作；否则，它会为每一个变化发出单独的 ALTER 语句，但不会在不"
"需要变化的地方发出 ALTER。"

msgid "All attributes should be considered read-only unless stated otherwise."
msgstr "除非另有说明，否则所有属性都应被视为只读。"

msgid "``connection``"
msgstr "``connection``"

msgid ""
"A connection object to the database. A useful attribute of the connection is "
"``alias`` which can be used to determine the name of the database being "
"accessed."
msgstr ""
"与数据库的连接对象。连接的一个有用属性是 ``alias``，它可以用来确定被访问的数"
"据库的名称。"

msgid ""
"This is useful when doing data migrations for :ref:`migrations with multiple "
"databases <data-migrations-and-multiple-databases>`."
msgstr ""
"这在为 :ref:`多数据库迁移 <data-migrations-and-multiple-databases>` 进行数据"
"迁移时很有用。"

msgid ""
"Be careful when you override settings, especially when the default value is "
"a non-empty list or dictionary, such as :setting:`STATICFILES_FINDERS`. Make "
"sure you keep the components required by the features of Django you wish to "
"use."
msgstr ""
"当你覆盖配置时要小心，特别是当默认值是一个非空的列表或字典时，如 :setting:"
"`STATICFILES_FINDERS`。确保你保留了你希望使用的 Django 功能所需要的组件。"

msgid "Core Settings"
msgstr "核心配置"

msgid ""
"Here's a list of settings available in Django core and their default values. "
"Settings provided by contrib apps are listed below, followed by a topical "
"index of the core settings. For introductory material, see the :doc:"
"`settings topic guide </topics/settings>`."
msgstr ""
"下面是 Django 核心中可用的配置及其默认值的列表。下面列出了 contrib 应用提供的"
"设置，后面是核心配置的专题索引。关于介绍性资料，请看 :doc:`配置专题指南 </"
"topics/settings>`。"

msgid "``ABSOLUTE_URL_OVERRIDES``"
msgstr "``ABSOLUTE_URL_OVERRIDES``"

msgid "Default: ``{}`` (Empty dictionary)"
msgstr "默认： ``{}`` （空字典）"

msgid ""
"A dictionary mapping ``\"app_label.model_name\"`` strings to functions that "
"take a model object and return its URL. This is a way of inserting or "
"overriding ``get_absolute_url()`` methods on a per-installation basis. "
"Example::"
msgstr ""
"将 ``\"app_label.model_name\"`` 字符串映射到接受模型对象并返回其 URL 的函数的"
"字典。这是一种在每个预安装基础上插入或覆盖 ``get_absolute_url()`` 方法的方"
"式。例如："

msgid ""
"The model name used in this setting should be all lowercase, regardless of "
"the case of the actual model class name."
msgstr "在此配置中使用的模型名称应全部为小写，与实际模型类名称的大小写无关。"

msgid "``ADMINS``"
msgstr "``ADMINS``"

msgid "Default: ``[]`` (Empty list)"
msgstr "默认： ``[]`` （空列表）"

msgid ""
"A list of all the people who get code error notifications. When :setting:"
"`DEBUG=False <DEBUG>` and :class:`~django.utils.log.AdminEmailHandler` is "
"configured in :setting:`LOGGING` (done by default), Django emails these "
"people the details of exceptions raised in the request/response cycle."
msgstr ""
"所有收到代码错误通知的人的列表。当 :setting:`DEBUG=False <DEBUG>` 和 :class:"
"`~django.utils.log.AdminEmailHandler` 中设置了 :setting:`LOGGING` 时（默认情"
"况下是这样做的），Django 会将请求／响应周期中出现的异常的详细信息通过邮件发送"
"给这些人。"

msgid ""
"Each item in the list should be a tuple of (Full name, email address). "
"Example::"
msgstr "列表中的每个项目应该是一个元组 (全名, 电子邮件地址)。例如："

msgid "``ALLOWED_HOSTS``"
msgstr "``ALLOWED_HOSTS``"

msgid ""
"A list of strings representing the host/domain names that this Django site "
"can serve. This is a security measure to prevent :ref:`HTTP Host header "
"attacks <host-headers-virtual-hosting>`, which are possible even under many "
"seemingly-safe web server configurations."
msgstr ""
"一个代表这个 Django 网站可以服务的主机／域名的字符串列表。这是一个安全措施，"
"以防止 :ref:`HTTP 主机头攻击 <host-headers-virtual-hosting>` ，即使在许多看似"
"安全的 Web 服务器配置下也有可能发生。"

msgid ""
"Values in this list can be fully qualified names (e.g. ``'www.example."
"com'``), in which case they will be matched against the request's ``Host`` "
"header exactly (case-insensitive, not including port). A value beginning "
"with a period can be used as a subdomain wildcard: ``'.example.com'`` will "
"match ``example.com``, ``www.example.com``, and any other subdomain of "
"``example.com``. A value of ``'*'`` will match anything; in this case you "
"are responsible to provide your own validation of the ``Host`` header "
"(perhaps in a middleware; if so this middleware must be listed first in :"
"setting:`MIDDLEWARE`)."
msgstr ""
"这个列表中的值可以是完全限定的名称（例如 ``'www.example.com``），在这种情况"
"下，它们将与请求的 ``Host`` 头完全匹配（不区分大小写，不包括端口）。以英文句"
"号开头的值可以用作子域通配符。``'.example.com'`` 将匹配 ``example.com``、"
"``www.example.com`` 和 ``example.com`` 的任何其他子域。``'*'`` 的值将匹配任何"
"东西；在这种情况下，你要负责提供你自己的 ``Host`` 头的验证（也许是在一个中间"
"件中；如果是这样，这个中间件必须首先在 :setting:`MIDDLEWARE` 中列出）。"

msgid ""
"Django also allows the `fully qualified domain name (FQDN)`_ of any entries. "
"Some browsers include a trailing dot in the ``Host`` header which Django "
"strips when performing host validation."
msgstr ""
"Django 也允许在任何条目中使用 `完全合格的域名（FQDN）`_ 。有些浏览器在 "
"``Host`` 头中包含了一个尾部的点，Django 在执行主机验证时将其去掉。"

msgid ""
"If the ``Host`` header (or ``X-Forwarded-Host`` if :setting:"
"`USE_X_FORWARDED_HOST` is enabled) does not match any value in this list, "
"the :meth:`django.http.HttpRequest.get_host()` method will raise :exc:"
"`~django.core.exceptions.SuspiciousOperation`."
msgstr ""
"如果 ``Host`` 头（或者 ``X-Forwarded-Host`` 如果 :setting:"
"`USE_X_FORWARDED_HOST` 被启用的话）不符合这个列表中的任何值，则 :meth:"
"`django.http.HttpRequest.get_host()` 方法将引发 :exc:`~django.core."
"exceptions.SuspiciousOperation`。"

msgid ""
"When :setting:`DEBUG` is ``True`` and ``ALLOWED_HOSTS`` is empty, the host "
"is validated against ``['.localhost', '127.0.0.1', '[::1]']``."
msgstr ""
"当 :setting:`DEBUG`为``True`` 和 ``ALLOWED_HOSTS`` 为空时，主机将根据 ``['."
"localhost', '127.0.0.1', '[::1]']`` 进行验证。"

msgid ""
"``ALLOWED_HOSTS`` is also :ref:`checked when running tests <topics-testing-"
"advanced-multiple-hosts>`."
msgstr ""
"``ALLOWED_HOSTS`` 也是 :ref:`在运行测试时进行检查的 <topics-testing-advanced-"
"multiple-hosts>`。"

msgid ""
"This validation only applies via :meth:`~django.http.HttpRequest."
"get_host()`; if your code accesses the ``Host`` header directly from "
"``request.META`` you are bypassing this security protection."
msgstr ""
"这些验证仅通过 :meth:`~django.http.HttpRequest.get_host()` 来实现；如果你的代"
"码直接从 ``request.META`` 得到 ``Host`` 头部，你就绕过了这种安全保护机制。"

msgid "``APPEND_SLASH``"
msgstr "``APPEND_SLASH``"

msgid "Default: ``True``"
msgstr "默认： ``True``"

msgid ""
"When set to ``True``, if the request URL does not match any of the patterns "
"in the URLconf and it doesn't end in a slash, an HTTP redirect is issued to "
"the same URL with a slash appended. Note that the redirect may cause any "
"data submitted in a POST request to be lost."
msgstr ""
"当设置为 ``True`` 时，如果请求的 URL 不符合 URLconf 中的任何模式，并且不以斜"
"线结尾，则会发出一个 HTTP 重定向到相同的URL，并附加一个斜线。注意，重定向可能"
"会导致 POST 请求中提交的任何数据丢失。"

msgid ""
"The :setting:`APPEND_SLASH` setting is only used if :class:`~django."
"middleware.common.CommonMiddleware` is installed (see :doc:`/topics/http/"
"middleware`). See also :setting:`PREPEND_WWW`."
msgstr ""
":setting:`APPEND_SLASH` 的配置只有在安装了 :class:`~django.middleware.common."
"CommonMiddleware` 的情况下才会使用（参见 :doc:`/topics/http/middleware`）。也"
"请参见 :setting:`PREPEND_WWW`。"

msgid "``CACHES``"
msgstr "``CACHES``"

msgid ""
"A dictionary containing the settings for all caches to be used with Django. "
"It is a nested dictionary whose contents maps cache aliases to a dictionary "
"containing the options for an individual cache."
msgstr ""
"一个包含所有 Django 缓存配置的字典。它是一个嵌套的字典，其内容将缓存别名映射"
"到一个包含单个缓存选项的字典中。"

msgid ""
"The :setting:`CACHES` setting must configure a ``default`` cache; any number "
"of additional caches may also be specified. If you are using a cache backend "
"other than the local memory cache, or you need to define multiple caches, "
"other options will be required. The following cache options are available."
msgstr ""
":setting:`CACHES` 配置必须设置一个 ``default`` 缓存；也可以指定任何数量的附加"
"缓存。如果你使用的是本地内存缓存以外的缓存后端，或者你需要定义多个缓存，则需"
"要其他选项。以下是可用的缓存选项。"

msgid "``BACKEND``"
msgstr "``BACKEND``"

msgid "Default: ``''`` (Empty string)"
msgstr "默认： ``''`` （空字符串）"

msgid "The cache backend to use. The built-in cache backends are:"
msgstr "要使用的缓存后端。内置的缓存后端有："

msgid "``'django.core.cache.backends.db.DatabaseCache'``"
msgstr "``'django.core.cache.backends.db.DatabaseCache'``"

msgid "``'django.core.cache.backends.dummy.DummyCache'``"
msgstr "``'django.core.cache.backends.dummy.DummyCache'``"

msgid "``'django.core.cache.backends.filebased.FileBasedCache'``"
msgstr "``'django.core.cache.backends.filebased.FileBasedCache'``"

msgid "``'django.core.cache.backends.locmem.LocMemCache'``"
msgstr "``'django.core.cache.backends.locmem.LocMemCache'``"

msgid "``'django.core.cache.backends.memcached.PyMemcacheCache'``"
msgstr "``'django.core.cache.backends.memcached.PyMemcacheCache'``"

msgid "``'django.core.cache.backends.memcached.PyLibMCCache'``"
msgstr "``'django.core.cache.backends.memcached.PyLibMCCache'``"

msgid "``'django.core.cache.backends.redis.RedisCache'``"
msgstr ""

msgid ""
"You can use a cache backend that doesn't ship with Django by setting :"
"setting:`BACKEND <CACHES-BACKEND>` to a fully-qualified path of a cache "
"backend class (i.e. ``mypackage.backends.whatever.WhateverCache``)."
msgstr ""
"你可以通过将 :set:`BACKEND <CACHES-BACKEND>` 设置为一个完全限定的缓存后端类的"
"路径（例如 ``mypackage.backends.whatever.WhateverCache``），来使用一个不在 "
"Django 中的缓存后端。"

msgid "``KEY_FUNCTION``"
msgstr "``KEY_FUNCTION``"

msgid ""
"A string containing a dotted path to a function (or any callable) that "
"defines how to compose a prefix, version and key into a final cache key. The "
"default implementation is equivalent to the function::"
msgstr ""
"一个字符串，包含一个指向函数（或任何可调用）的点分隔路径，定义如何将前缀、版"
"本和密钥组成一个最终的缓存密钥。默认的实现相当于函数："

msgid ""
"You may use any key function you want, as long as it has the same argument "
"signature."
msgstr "你可以使用任何你想要的密钥函数，只要它有相同的参数签名。"

msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr "查看 :ref:`缓存文档 <cache_key_transformation>` 获取更多信息。"

msgid "``KEY_PREFIX``"
msgstr "``KEY_PREFIX``"

msgid ""
"A string that will be automatically included (prepended by default) to all "
"cache keys used by the Django server."
msgstr ""
"一个自动包含在 Django 服务器使用的所有缓存键中的字符串（默认情况下是前缀）。"

msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr "查看 :ref:`缓存文档 <cache_key_prefixing>` 获取更多信息。"

msgid "``LOCATION``"
msgstr "``LOCATION``"

msgid ""
"The location of the cache to use. This might be the directory for a file "
"system cache, a host and port for a memcache server, or an identifying name "
"for a local memory cache. e.g.::"
msgstr ""
"要使用的高速缓存的位置。可能是文件系统缓存的目录，memcache 服务器的主机和端"
"口，或者是本地内存缓存的识别名称，例如："

msgid "``OPTIONS``"
msgstr "``OPTIONS``"

msgid "Default: ``None``"
msgstr "默认： ``None``"

msgid ""
"Extra parameters to pass to the cache backend. Available parameters vary "
"depending on your cache backend."
msgstr "传递给缓存后端的额外参数。可用的参数根据你的缓存后端不同而不同。"

msgid ""
"Some information on available parameters can be found in the :ref:`cache "
"arguments <cache_arguments>` documentation. For more information, consult "
"your backend module's own documentation."
msgstr ""
"关于可用参数的一些信息可以在 :ref:`缓存参数 <cache_arguments>` 文档中找到。更"
"多信息，请查阅你的后端模块自己的文档。"

msgid "``TIMEOUT``"
msgstr "``TIMEOUT``"

msgid "Default: ``300``"
msgstr "默认： ``300``"

msgid ""
"The number of seconds before a cache entry is considered stale. If the value "
"of this setting is ``None``, cache entries will not expire. A value of ``0`` "
"causes keys to immediately expire (effectively \"don't cache\")."
msgstr ""

msgid "``VERSION``"
msgstr "``VERSION``"

msgid "Default: ``1``"
msgstr "默认： ``1``"

msgid ""
"The default version number for cache keys generated by the Django server."
msgstr "Django 服务器生成的缓存密钥的默认版本号。"

msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr "查看 :ref:`缓存文档 <cache_versioning>` 获取更多信息。"

msgid "``CACHE_MIDDLEWARE_ALIAS``"
msgstr "``CACHE_MIDDLEWARE_ALIAS``"

msgid "Default: ``'default'``"
msgstr "默认： ``'default'``"

msgid ""
"The cache connection to use for the :ref:`cache middleware <the-per-site-"
"cache>`."
msgstr "用于 :ref:`缓存中间件 <the-per-site-cache>` 的缓存连接。"

msgid "``CACHE_MIDDLEWARE_KEY_PREFIX``"
msgstr "``CACHE_MIDDLEWARE_KEY_PREFIX``"

msgid ""
"A string which will be prefixed to the cache keys generated by the :ref:"
"`cache middleware <the-per-site-cache>`. This prefix is combined with the :"
"setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` setting; it does not replace it."
msgstr ""
"由 :ref:`缓存中间件 <the-per-site-cache>` 生成的缓存密钥前缀的字符串。这个前"
"缀与 :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` 的配置结合在一起，而不是取代"
"它。"

msgid "See :doc:`/topics/cache`."
msgstr "参见 :doc:`/topics/cache`。"

msgid "``CACHE_MIDDLEWARE_SECONDS``"
msgstr "``CACHE_MIDDLEWARE_SECONDS``"

msgid "Default: ``600``"
msgstr "默认： ``600``"

msgid ""
"The default number of seconds to cache a page for the :ref:`cache middleware "
"<the-per-site-cache>`."
msgstr "默认为 :ref:`缓存中间件 <the-per-site-cache>` 缓存页面的秒数。"

msgid "``CSRF_COOKIE_AGE``"
msgstr "``CSRF_COOKIE_AGE``"

msgid "Default: ``31449600`` (approximately 1 year, in seconds)"
msgstr "默认： ``31449600`` （约 1 年，以秒为单位）"

msgid "The age of CSRF cookies, in seconds."
msgstr "CSRF cookie 的寿命，以秒为单位。"

msgid ""
"The reason for setting a long-lived expiration time is to avoid problems in "
"the case of a user closing a browser or bookmarking a page and then loading "
"that page from a browser cache. Without persistent cookies, the form "
"submission would fail in this case."
msgstr ""
"设置长效过期时间的原因是为了避免在用户关闭浏览器或将某一页面作为书签，然后从"
"浏览器缓存中加载该页面时出现问题。如果没有持久性 Cookie，这种情况下表单提交会"
"失败。"

msgid ""
"Some browsers (specifically Internet Explorer) can disallow the use of "
"persistent cookies or can have the indexes to the cookie jar corrupted on "
"disk, thereby causing CSRF protection checks to (sometimes intermittently) "
"fail. Change this setting to ``None`` to use session-based CSRF cookies, "
"which keep the cookies in-memory instead of on persistent storage."
msgstr ""
"一些浏览器（特别是 Internet Explorer）可能不允许使用持久性 cookie，或可能使 "
"cookie jar 的索引在磁盘上损坏，从而导致 CSRF 保护检查（有时是间歇性的）失败。"
"将此设置改为 ``None``，以使用基于会话的 CSRF cookie，它将 cookie 保存在内存"
"中，而不是持久性存储中。"

msgid "``CSRF_COOKIE_DOMAIN``"
msgstr "``CSRF_COOKIE_DOMAIN``"

msgid ""
"The domain to be used when setting the CSRF cookie.  This can be useful for "
"easily allowing cross-subdomain requests to be excluded from the normal "
"cross site request forgery protection.  It should be set to a string such as "
"``\".example.com\"`` to allow a POST request from a form on one subdomain to "
"be accepted by a view served from another subdomain."
msgstr ""
"设置 CSRF cookie 时要使用的域。 这对于允许跨子域请求被排除在正常的跨站点请求"
"伪造保护之外是很有用的。 它应该设置为一个字符串，如 ``\".example.com\"``，以"
"允许一个子域上的表单的 POST 请求被另一个子域的视图所接受。"

msgid ""
"Please note that the presence of this setting does not imply that Django's "
"CSRF protection is safe from cross-subdomain attacks by default - please see "
"the :ref:`CSRF limitations <csrf-limitations>` section."
msgstr ""
"请注意，这个配置的存在并不意味着 Django 的 CSRF 保护在默认情况下是安全的，不"
"会受到跨子域的攻击——请参见 :ref:`CSRF 限制 <csrf-limitations>` 部分。"

msgid "``CSRF_COOKIE_HTTPONLY``"
msgstr "``CSRF_COOKIE_HTTPONLY``"

msgid "Default: ``False``"
msgstr "默认：``False``"

msgid ""
"Whether to use ``HttpOnly`` flag on the CSRF cookie. If this is set to "
"``True``, client-side JavaScript will not be able to access the CSRF cookie."
msgstr ""
"是否对 CSRF cookie 使用 ``HttpOnly`` 标志。如果设置为 ``True``，客户端的 "
"JavaScript 将无法访问 CSRF cookie。"

msgid ""
"Designating the CSRF cookie as ``HttpOnly`` doesn't offer any practical "
"protection because CSRF is only to protect against cross-domain attacks. If "
"an attacker can read the cookie via JavaScript, they're already on the same "
"domain as far as the browser knows, so they can do anything they like "
"anyway. (XSS is a much bigger hole than CSRF.)"
msgstr ""
"将 CSRF cookie 指定为 ``HttpOnly`` 并不能提供任何实际的保护，因为 CSRF 只是为"
"了防止跨域攻击。如果攻击者可以通过 JavaScript 读取 cookie，就浏览器所知，他们"
"已经在同一个域上了，所以他们可以做任何他们喜欢的事情。（XSS 是一个比 CSRF 更"
"大的漏洞）。"

msgid ""
"Although the setting offers little practical benefit, it's sometimes "
"required by security auditors."
msgstr "虽然这种配置没有提供什么实际的好处，但有时也会被安全审计人员要求。"

msgid ""
"If you enable this and need to send the value of the CSRF token with an AJAX "
"request, your JavaScript must pull the value :ref:`from a hidden CSRF token "
"form input <acquiring-csrf-token-from-html>` instead of :ref:`from the "
"cookie <acquiring-csrf-token-from-cookie>`."
msgstr ""
"如果你启用了这个功能，并且需要通过 AJAX 请求发送 CSRF 标记的值，你的 "
"JavaScript 必须 :ref:`从隐藏的 CSRF 标记表单输入 <acquiring-csrf-token-from-"
"html>` 中提取值而不是 :ref:`从 cookie <acquiring-csrf-token-from-cookie>`。"

msgid "See :setting:`SESSION_COOKIE_HTTPONLY` for details on ``HttpOnly``."
msgstr ""
"关于 ``HttpOnly`` 的详细信息，请参见 :setting:`SESSION_COOKIE_HTTPONLY`。"

msgid "``CSRF_COOKIE_MASKED``"
msgstr ""

msgid ""
"Whether to mask the CSRF cookie. See :ref:`release notes <csrf-cookie-masked-"
"usage>` for usage details."
msgstr ""

msgid ""
"This transitional setting is deprecated and will be removed in Django 5.0."
msgstr ""

msgid "``CSRF_COOKIE_NAME``"
msgstr "``CSRF_COOKIE_NAME``"

msgid "Default: ``'csrftoken'``"
msgstr "默认： ``'csrftoken'``"

msgid ""
"The name of the cookie to use for the CSRF authentication token. This can be "
"whatever you want (as long as it's different from the other cookie names in "
"your application). See :doc:`/ref/csrf`."
msgstr ""
"用于 CSRF 认证令牌的 cookie 的名称。这可以是任何你想要的名字（只要它与你的应"
"用程序中的其他 cookie 名字不同）。参见 :doc:`/ref/csrf`。"

msgid "``CSRF_COOKIE_PATH``"
msgstr "``CSRF_COOKIE_PATH``"

msgid "Default: ``'/'``"
msgstr "默认： ``'/'``"

msgid ""
"The path set on the CSRF cookie. This should either match the URL path of "
"your Django installation or be a parent of that path."
msgstr ""
"在 CSRF cookie 上设置的路径。这个路径应该与你的 Django 安装的 URL 路径相匹"
"配，或者是该路径的父路径。"

msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths, and each instance will only "
"see its own CSRF cookie."
msgstr ""
"如果你有多个 Django 实例在同一个主机名下运行，这个功能很有用。他们可以使用不"
"同的 cookie 路径，而且每个实例只能看到自己的 CSRF cookie。"

msgid "``CSRF_COOKIE_SAMESITE``"
msgstr "``CSRF_COOKIE_SAMESITE``"

msgid "Default: ``'Lax'``"
msgstr "默认： ``'Lax'``"

msgid ""
"The value of the `SameSite`_ flag on the CSRF cookie. This flag prevents the "
"cookie from being sent in cross-site requests."
msgstr ""
"CSRF cookie 上 `SameSite`_ 标志的值。该标志可防止在跨站点请求中发送 cookie。"

msgid "See :setting:`SESSION_COOKIE_SAMESITE` for details about ``SameSite``."
msgstr ""
"关于 ``SameSite`` 的详细信息，请参见 :setting:`SESSION_COOKIE_SAMESITE`。"

msgid "``CSRF_COOKIE_SECURE``"
msgstr "``CSRF_COOKIE_SECURE``"

msgid ""
"Whether to use a secure cookie for the CSRF cookie. If this is set to "
"``True``, the cookie will be marked as \"secure\", which means browsers may "
"ensure that the cookie is only sent with an HTTPS connection."
msgstr ""
"是否为 CSRF cookie 使用安全 cookie。如果设置为 ``True``，cookie 将被标记为 ``"
"安全``，这意味着浏览器可以确保 cookie 只在 HTTPS 连接下发送。"

msgid "``CSRF_USE_SESSIONS``"
msgstr "``CSRF_USE_SESSIONS``"

msgid ""
"Whether to store the CSRF token in the user's session instead of in a "
"cookie. It requires the use of :mod:`django.contrib.sessions`."
msgstr ""
"是否将 CSRF 标记存储在用户的会话中，而不是 cookie 中。这需要使用 :mod:"
"`django.contrib.session`。"

msgid ""
"Storing the CSRF token in a cookie (Django's default) is safe, but storing "
"it in the session is common practice in other web frameworks and therefore "
"sometimes demanded by security auditors."
msgstr ""
"将 CSRF 令牌存储在 cookie 中（Django 的默认值）是安全的，但将其存储在 "
"session 中是其他 Web 框架的常见做法，因此有时会被安全审计人员要求。"

msgid ""
"Since the :ref:`default error views <error-views>` require the CSRF token, :"
"class:`~django.contrib.sessions.middleware.SessionMiddleware` must appear "
"in :setting:`MIDDLEWARE` before any middleware that may raise an exception "
"to trigger an error view (such as :exc:`~django.core.exceptions."
"PermissionDenied`) if you're using ``CSRF_USE_SESSIONS``. See :ref:"
"`middleware-ordering`."
msgstr ""
"由于 :ref:`默认错误视图 <error-views>` 需要CSRF令牌，所以 :class:`~django."
"contrib.session.middleware.SessionMiddleware` 必须出现在 :setting:"
"`MIDDLEWARE` 中，在任何可能引发异常以触发错误视图的中间件（如 :exc:`~django."
"core.exceptions.PermissionDenied`）之前，如果你正在使用 "
"``CSRF_USE_SESSIONS``。参见 :ref:`middleware-ordering`。"

msgid "``CSRF_FAILURE_VIEW``"
msgstr "``CSRF_FAILURE_VIEW``"

msgid "Default: ``'django.views.csrf.csrf_failure'``"
msgstr "默认： ``'django.views.csrf.csrf_failure'``"

msgid ""
"A dotted path to the view function to be used when an incoming request is "
"rejected by the :doc:`CSRF protection </ref/csrf>`. The function should have "
"this signature::"
msgstr ""
"当传入的请求被 :doc:`CSRF 保护 </ref/csrf>` 拒绝时，要使用的视图函数的点分隔"
"路径。该函数应具有以下签名："

msgid ""
"where ``reason`` is a short message (intended for developers or logging, not "
"for end users) indicating the reason the request was rejected. It should "
"return an :class:`~django.http.HttpResponseForbidden`."
msgstr ""
"其中 ``reason`` 是一个简短的消息（针对开发者或日志记录，而不是针对终端用"
"户），表示请求被拒绝的原因，它应该返回一个 :class:`~django.http."
"HttpResponseForbidden`。"

msgid ""
"``django.views.csrf.csrf_failure()`` accepts an additional ``template_name`` "
"parameter that defaults to ``'403_csrf.html'``. If a template with that name "
"exists, it will be used to render the page."
msgstr ""
"``django.views.csrf.csrf_failure()`` 接受一个额外的 ``template_name`` 参数，"
"默认为 ``'403_csrf.html'``。如果存在该名称的模板，它将被用来渲染页面。"

msgid "``CSRF_HEADER_NAME``"
msgstr "``CSRF_HEADER_NAME``"

msgid "Default: ``'HTTP_X_CSRFTOKEN'``"
msgstr "默认： ``'HTTP_X_CSRFTOKEN'``"

msgid "The name of the request header used for CSRF authentication."
msgstr "用于 CSRF 认证的请求头的名称。"

msgid ""
"As with other HTTP headers in ``request.META``, the header name received "
"from the server is normalized by converting all characters to uppercase, "
"replacing any hyphens with underscores, and adding an ``'HTTP_'`` prefix to "
"the name. For example, if your client sends a ``'X-XSRF-TOKEN'`` header, the "
"setting should be ``'HTTP_X_XSRF_TOKEN'``."
msgstr ""
"与 ``request.META`` 中的其他 HTTP 头文件一样，从服务器接收到的头文件名通过将"
"所有字符转换为大写字母，用下划线代替任何连字符，并在名称中添加 ``'HTTP_'`` 前"
"缀进行规范化。例如，如果你的客户端发送了一个 ``'X-XSRF-TOKEN'`` 头，配置应该"
"是 ``'HTTP_X_XSRF_TOKEN'``。"

msgid "``CSRF_TRUSTED_ORIGINS``"
msgstr "``CSRF_TRUSTED_ORIGINS``"

msgid "A list of trusted origins for unsafe requests (e.g. ``POST``)."
msgstr ""

msgid ""
"For requests that include the ``Origin`` header, Django's CSRF protection "
"requires that header match the origin present in the ``Host`` header."
msgstr ""

msgid ""
"For a :meth:`secure <django.http.HttpRequest.is_secure>` unsafe request that "
"doesn't include the ``Origin`` header, the request must have a ``Referer`` "
"header that matches the origin present in the ``Host`` header."
msgstr ""

msgid ""
"These checks prevent, for example, a ``POST`` request from ``subdomain."
"example.com`` from succeeding against ``api.example.com``. If you need cross-"
"origin unsafe requests, continuing the example, add ``'https://subdomain."
"example.com'`` to this list (and/or ``http://...`` if requests originate "
"from an insecure page)."
msgstr ""

msgid ""
"The setting also supports subdomains, so you could add ``'https://*.example."
"com'``, for example, to allow access from all subdomains of ``example.com``."
msgstr ""

msgid "``DATABASES``"
msgstr "``DATABASES``"

msgid ""
"A dictionary containing the settings for all databases to be used with "
"Django. It is a nested dictionary whose contents map a database alias to a "
"dictionary containing the options for an individual database."
msgstr ""
"一个包含所有数据库配置的字典，用于 Django。它是一个嵌套的字典，其内容是将一个"
"数据库别名映射到一个包含单个数据库选项的字典中。"

msgid ""
"The :setting:`DATABASES` setting must configure a ``default`` database; any "
"number of additional databases may also be specified."
msgstr ""
":setting:`DATABASES` 配置必须设置一个 ``default`` 数据库；也可以指定任何数量"
"的其他数据库。"

msgid ""
"The simplest possible settings file is for a single-database setup using "
"SQLite. This can be configured using the following::"
msgstr ""
"最简单的配置文件是使用 SQLite 的单数据库配置。可以通过以下方式进行配置："

msgid ""
"When connecting to other database backends, such as MariaDB, MySQL, Oracle, "
"or PostgreSQL, additional connection parameters will be required. See the :"
"setting:`ENGINE <DATABASE-ENGINE>` setting below on how to specify other "
"database types. This example is for PostgreSQL::"
msgstr ""
"当连接到其他数据库后端时，如 MariaDB、MySQL、Oracle 或 PostgreSQL，将需要额外"
"的连接参数。请参阅下面的 :setting:`ENGINE <DATABASE-ENGINE>` 配置，了解如何指"
"定其他数据库类型。这个例子是针对 PostgreSQL："

msgid ""
"The following inner options that may be required for more complex "
"configurations are available:"
msgstr "以下是更复杂配置可能需要的内部选项："

msgid "``ATOMIC_REQUESTS``"
msgstr "``ATOMIC_REQUESTS``"

msgid ""
"Set this to ``True`` to wrap each view in a transaction on this database. "
"See :ref:`tying-transactions-to-http-requests`."
msgstr ""
"将此设置为 ``True``，以将每个视图包裹在这个数据库的事务中。参见 :ref:`tying-"
"transactions-to-http-requests`。"

msgid "``AUTOCOMMIT``"
msgstr "``AUTOCOMMIT``"

msgid ""
"Set this to ``False`` if you want to :ref:`disable Django's transaction "
"management <deactivate-transaction-management>` and implement your own."
msgstr ""
"如果你想 :ref:`禁用 Django 的事务管理 <deactivate-transaction-management>` 并"
"实现你自己的事务管理，请将此设置为 ``False``。"

msgid "``ENGINE``"
msgstr "``ENGINE``"

msgid "The database backend to use. The built-in database backends are:"
msgstr "要使用的数据库后端。内置的数据库后端有："

msgid "``'django.db.backends.postgresql'``"
msgstr "``'django.db.backends.postgresql'``"

msgid "``'django.db.backends.mysql'``"
msgstr "``'django.db.backends.mysql'``"

msgid "``'django.db.backends.sqlite3'``"
msgstr "``'django.db.backends.sqlite3'``"

msgid "``'django.db.backends.oracle'``"
msgstr "``'django.db.backends.oracle'``"

msgid ""
"You can use a database backend that doesn't ship with Django by setting "
"``ENGINE`` to a fully-qualified path (i.e. ``mypackage.backends.whatever``)."
msgstr ""
"你可以通过将 ``ENGINE`` 设置为一个完全限定的路径（例如： ``mypackage."
"backends.whatever``），来使用一个不在 Django 中的数据库后端。"

msgid "``HOST``"
msgstr "``HOST``"

msgid ""
"Which host to use when connecting to the database. An empty string means "
"localhost. Not used with SQLite."
msgstr "连接到数据库时使用的主机。空字符串表示本地主机。不用于 SQLite。"

msgid ""
"If this value starts with a forward slash (``'/'``) and you're using MySQL, "
"MySQL will connect via a Unix socket to the specified socket. For example::"
msgstr ""
"如果这个值以斜线（``'/'``）开头，并且你正在使用 MySQL，MySQL 将通过 Unix 套接"
"字连接到指定的套接字。例如："

msgid ""
"If you're using MySQL and this value *doesn't* start with a forward slash, "
"then this value is assumed to be the host."
msgstr ""
"如果你使用的是 MySQL，并且这个值 *没有* 以斜线开头，那么这个值被认为是主机。"

msgid ""
"If you're using PostgreSQL, by default (empty :setting:`HOST`), the "
"connection to the database is done through UNIX domain sockets ('local' "
"lines in ``pg_hba.conf``). If your UNIX domain socket is not in the standard "
"location, use the same value of ``unix_socket_directory`` from ``postgresql."
"conf``. If you want to connect through TCP sockets, set :setting:`HOST` to "
"'localhost' or '127.0.0.1' ('host' lines in ``pg_hba.conf``). On Windows, "
"you should always define :setting:`HOST`, as UNIX domain sockets are not "
"available."
msgstr ""
"如果你使用的是 PostgreSQL，默认情况下（空 :setting:`HOST`），与数据库的连接是"
"通过 UNIX 域套接字（``pg_hba.conf`` 中的 'local' ）完成的。如果你的 UNIX 域套"
"接字不在标准位置，请使用 ``postgresql.conf`` 中的 ``unix_socket_directory`` "
"的相同值。如果你想通过 TCP 套接字连接，将 :setting:`HOST` 设置为 'localhost' "
"或 '127.0.0.1'（``pg_hba.conf`` 中的 'host' 行）。在 Windows 上，你应该总是定"
"义 :setting:`HOST`，因为 UNIX 域套接字是不可用的。"

msgid "``NAME``"
msgstr "``NAME``"

msgid ""
"The name of the database to use. For SQLite, it's the full path to the "
"database file. When specifying the path, always use forward slashes, even on "
"Windows (e.g. ``C:/homes/user/mysite/sqlite3.db``)."
msgstr ""
"要使用的数据库的名称。对于 SQLite，它是数据库文件的完整路径。当指定路径时，总"
"是使用斜线，即使在 Windows 上也是如此（例如 ``C:/homes/user/mysite/sqlite3."
"db``）。"

msgid "``CONN_MAX_AGE``"
msgstr "``CONN_MAX_AGE``"

msgid "Default: ``0``"
msgstr "默认： ``0``"

msgid ""
"The lifetime of a database connection, as an integer of seconds. Use ``0`` "
"to close database connections at the end of each request — Django's "
"historical behavior — and ``None`` for unlimited :ref:`persistent database "
"connections <persistent-database-connections>`."
msgstr ""

msgid "``CONN_HEALTH_CHECKS``"
msgstr ""

msgid ""
"If set to ``True``, existing :ref:`persistent database connections "
"<persistent-database-connections>` will be health checked before they are "
"reused in each request performing database access. If the health check "
"fails, the connection will be reestablished without failing the request when "
"the connection is no longer usable but the database server is ready to "
"accept and serve new connections (e.g. after database server restart closing "
"existing connections)."
msgstr ""

msgid ""
"Extra parameters to use when connecting to the database. Available "
"parameters vary depending on your database backend."
msgstr ""
"连接到数据库时要使用的额外参数。可用的参数根据你的数据库后端不同而不同。"

msgid ""
"Some information on available parameters can be found in the :doc:`Database "
"Backends </ref/databases>` documentation. For more information, consult your "
"backend module's own documentation."
msgstr ""
"关于可用参数的一些信息可以在 :doc:`数据库后端 </ref/databases>` 文档中找到。"
"更多信息，请查阅你的后端模块自己的文档。"

msgid "``PASSWORD``"
msgstr "``PASSWORD``"

msgid ""
"The password to use when connecting to the database. Not used with SQLite."
msgstr "连接到数据库时使用的密码。不用于 SQLite。"

msgid "``PORT``"
msgstr "``PORT``"

msgid ""
"The port to use when connecting to the database. An empty string means the "
"default port. Not used with SQLite."
msgstr "连接到数据库时要使用的端口。空字符串表示默认端口。不用于 SQLite。"

msgid "``TIME_ZONE``"
msgstr "``TIME_ZONE``"

msgid ""
"A string representing the time zone for this database connection or "
"``None``. This inner option of the :setting:`DATABASES` setting accepts the "
"same values as the general :setting:`TIME_ZONE` setting."
msgstr ""
"代表该数据库连接时区的字符串或 ``None``。:setting:`DATABASES` 配置的这个内部"
"选项与一般的 :setting:`TIME_ZONE` 配置接受相同的值。"

msgid ""
"When :setting:`USE_TZ` is ``True`` and this option is set, reading datetimes "
"from the database returns aware datetimes in this time zone instead of UTC. "
"When :setting:`USE_TZ` is ``False``, it is an error to set this option."
msgstr ""
"当 :setting:`USE_TZ` 为 ``True`` 且设置了这个选项时，从数据库中读取日期时间会"
"返回这个时区的感知日期时间，而不是 UTC。当 :setting:`USE_TZ` 为 ``False`` "
"时，设置该选项是错误的。"

msgid ""
"If the database backend doesn't support time zones (e.g. SQLite, MySQL, "
"Oracle), Django reads and writes datetimes in local time according to this "
"option if it is set and in UTC if it isn't."
msgstr ""
"如果数据库后端不支持时区（如 SQLite、MySQL、Oracle），如果设置了这个选项，"
"Django 会根据这个选项以当地时间读写日期，如果没有设置，则以 UTC 时间读写。"

msgid ""
"Changing the connection time zone changes how datetimes are read from and "
"written to the database."
msgstr "改变连接时区会改变从数据库中读取和写入日期的方式。"

msgid ""
"If Django manages the database and you don't have a strong reason to do "
"otherwise, you should leave this option unset. It's best to store datetimes "
"in UTC because it avoids ambiguous or nonexistent datetimes during daylight "
"saving time changes. Also, receiving datetimes in UTC keeps datetime "
"arithmetic simple — there's no need to consider potential offset changes "
"over a DST transition."
msgstr ""

msgid ""
"If you're connecting to a third-party database that stores datetimes in a "
"local time rather than UTC, then you must set this option to the appropriate "
"time zone. Likewise, if Django manages the database but third-party systems "
"connect to the same database and expect to find datetimes in local time, "
"then you must set this option."
msgstr ""
"如果你连接的第三方数据库以当地时间而不是 UTC 存储日期，那么你必须将这个选项设"
"置为合适的时区。同样，如果 Django 管理数据库，但第三方系统连接到同一个数据"
"库，并希望找到当地时间的日期，那么你必须设置这个选项。"

msgid ""
"If the database backend supports time zones (e.g. PostgreSQL), the "
"``TIME_ZONE`` option is very rarely needed. It can be changed at any time; "
"the database takes care of converting datetimes to the desired time zone."
msgstr ""
"如果数据库后端支持时区（如 PostgreSQL），很少需要 ``TIME_ZONE`` 选项。它可以"
"在任何时候改变；数据库会负责将日期时间转换为所需的时区。"

msgid ""
"Setting the time zone of the database connection may be useful for running "
"raw SQL queries involving date/time functions provided by the database, such "
"as ``date_trunc``, because their results depend on the time zone."
msgstr ""
"设置数据库连接的时区对于运行涉及数据库提供的日期／时间函数的原始 SQL 查询"
"（如 ``date_trunc``）可能很有用，因为其结果取决于时区。"

msgid ""
"However, this has a downside: receiving all datetimes in local time makes "
"datetime arithmetic more tricky — you must account for possible offset "
"changes over DST transitions."
msgstr ""

msgid ""
"Consider converting to local time explicitly with ``AT TIME ZONE`` in raw "
"SQL queries instead of setting the ``TIME_ZONE`` option."
msgstr ""
"考虑在原始 SQL 查询中使用 ``AT TIME ZONE`` 明确转换为当地时间，而不是设置 "
"``TIME_ZONE`` 选项。"

msgid "``DISABLE_SERVER_SIDE_CURSORS``"
msgstr "``DISABLE_SERVER_SIDE_CURSORS``"

msgid ""
"Set this to ``True`` if you want to disable the use of server-side cursors "
"with :meth:`.QuerySet.iterator`. :ref:`transaction-pooling-server-side-"
"cursors` describes the use case."
msgstr ""
"如果你想通过 :meth:`.QuerySet.iterator` 禁用服务器端游标的使用，请将其设置为 "
"``True``。 :ref:`transaction-pooling-server-side-cursors` 描述了使用情况。"

msgid "This is a PostgreSQL-specific setting."
msgstr "这是 PostgreSQL 特有的配置。"

msgid "``USER``"
msgstr "``USER``"

msgid ""
"The username to use when connecting to the database. Not used with SQLite."
msgstr "连接数据库时要使用的用户名。不用于 SQLite。"

msgid "``TEST``"
msgstr "``TEST``"

msgid ""
"A dictionary of settings for test databases; for more details about the "
"creation and use of test databases, see :ref:`the-test-database`."
msgstr ""
"测试数据库的设置字典；关于测试数据库的创建和使用的更多细节，见 :ref:`the-"
"test-database`。"

msgid "Here's an example with a test database configuration::"
msgstr "下面是一个测试数据库配置的例子："

msgid "The following keys in the ``TEST`` dictionary are available:"
msgstr "``TEST`` 字典中的下列键可供使用："

msgid "``CHARSET``"
msgstr "``CHARSET``"

msgid ""
"The character set encoding used to create the test database. The value of "
"this string is passed directly through to the database, so its format is "
"backend-specific."
msgstr ""
"用于创建测试数据库的字符集编码。这个字符串的值是直接传递给数据库的，所以它的"
"格式是特定于后端的。"

msgid ""
"Supported by the PostgreSQL_ (``postgresql``) and MySQL_ (``mysql``) "
"backends."
msgstr "由 PostgreSQL_ （``postgresql``）和 MySQL_ （``mysql``）后端支持。"

msgid "``COLLATION``"
msgstr "``COLLATION``"

msgid ""
"The collation order to use when creating the test database. This value is "
"passed directly to the backend, so its format is backend-specific."
msgstr ""
"创建测试数据库时要使用的字符序。这个值是直接传递给后端的，所以它的格式是后端"
"特定的。"

msgid ""
"Only supported for the ``mysql`` backend (see the `MySQL manual`_ for "
"details)."
msgstr "仅支持 ``mysql`` 后端（详见 `MySQL 手册`_ ）。"

msgid "``DEPENDENCIES``"
msgstr "``DEPENDENCIES``"

msgid ""
"Default: ``['default']``, for all databases other than ``default``, which "
"has no dependencies."
msgstr ""
"默认：``['default']``，适用于除 ``default`` 以外的所有数据库，后者没有依赖"
"性。"

msgid ""
"The creation-order dependencies of the database. See the documentation on :"
"ref:`controlling the creation order of test databases <topics-testing-"
"creation-dependencies>` for details."
msgstr ""
"数据库的创建顺序依赖性。详见 :ref:`控制测试数据库的创建顺序 <topics-testing-"
"creation-dependencies>` 的文档。"

msgid "``MIGRATE``"
msgstr "``MIGRATE``"

msgid ""
"When set to ``False``, migrations won't run when creating the test database. "
"This is similar to setting ``None`` as a value in :setting:"
"`MIGRATION_MODULES`, but for all apps."
msgstr ""
"当设置为 ``False`` 时，在创建测试数据库时不会运行迁移。这类似于在 :setting:"
"`MIGRATION_MODULES` 中设置 ``None`` 作为一个值，但适用于所有应用程序。"

msgid "``MIRROR``"
msgstr "``MIRROR``"

msgid ""
"The alias of the database that this database should mirror during testing. "
"It depends on transactions and therefore must be used within :class:`~django."
"test.TransactionTestCase` instead of :class:`~django.test.TestCase`."
msgstr ""

msgid ""
"This setting exists to allow for testing of primary/replica (referred to as "
"master/slave by some databases) configurations of multiple databases. See "
"the documentation on :ref:`testing primary/replica configurations <topics-"
"testing-primaryreplica>` for details."
msgstr ""
"该配置允许测试多个数据库的主／副本（某些数据库称为主／从）配置。详情请参见 :"
"ref:`测试主／副本配置 <topics-testing-primaryreplica>` 的文档。"

msgid "The name of database to use when running the test suite."
msgstr "运行测试套件时要使用的数据库名称。"

msgid ""
"If the default value (``None``) is used with the SQLite database engine, the "
"tests will use a memory resident database. For all other database engines "
"the test database will use the name ``'test_' + DATABASE_NAME``."
msgstr ""
"如果 SQLite 数据库引擎使用默认值（``None``），则测试将使用内存常驻数据库。对"
"于所有其他数据库引擎，测试数据库将使用 ``'test_' + DATABASE_NAME`` 的名称。"

msgid "See :ref:`the-test-database`."
msgstr "查看 :ref:`the-test-database`。"

msgid "``SERIALIZE``"
msgstr "``SERIALIZE``"

msgid ""
"Boolean value to control whether or not the default test runner serializes "
"the database into an in-memory JSON string before running tests (used to "
"restore the database state between tests if you don't have transactions). "
"You can set this to ``False`` to speed up creation time if you don't have "
"any test classes with :ref:`serialized_rollback=True <test-case-serialized-"
"rollback>`."
msgstr ""
"布尔值，用于控制默认的测试运行器是否在运行测试之前将数据库序列化为内存中的 "
"JSON 字符串（如果没有事务，用于在测试之间恢复数据库状态）。如果你没有任何带"
"有 :ref:`serialized_rollback=True <test-case-serialized-rollback>` 的测试类，"
"你可以将其设置为 ``False`` 以加快创建时间。"

msgid ""
"This setting is deprecated as it can be inferred from the :attr:`~django."
"test.TestCase.databases` with the :ref:`serialized_rollback <test-case-"
"serialized-rollback>` option enabled."
msgstr ""

msgid "``TEMPLATE``"
msgstr "``TEMPLATE``"

msgid ""
"The name of a `template`_ (e.g. ``'template0'``) from which to create the "
"test database."
msgstr "`template`_ 的名称（例如 ``'template0'``），用于创建测试数据库。"

msgid "``CREATE_DB``"
msgstr "``CREATE_DB``"

msgid "This is an Oracle-specific setting."
msgstr "这是 Oracle 特有的配置。"

msgid ""
"If it is set to ``False``, the test tablespaces won't be automatically "
"created at the beginning of the tests or dropped at the end."
msgstr ""
"如果设置为 ``False``，测试表空间不会在测试开始时自动创建，也不会在测试结束时"
"删除。"

msgid "``CREATE_USER``"
msgstr "``CREATE_USER``"

msgid ""
"If it is set to ``False``, the test user won't be automatically created at "
"the beginning of the tests and dropped at the end."
msgstr ""
"如果设置为 ``False``，测试用户不会在测试开始时自动创建，也不会在测试结束时删"
"除。"

msgid ""
"The username to use when connecting to the Oracle database that will be used "
"when running tests. If not provided, Django will use ``'test_' + USER``."
msgstr ""
"连接到 Oracle 数据库时使用的用户名。如果没有提供，Django 将使用 ``'test_' + "
"USER``。"

msgid ""
"The password to use when connecting to the Oracle database that will be used "
"when running tests. If not provided, Django will generate a random password."
msgstr ""
"连接到 Oracle 数据库时使用的密码。如果没有提供，Django 会随机生成一个密码。"

msgid "``ORACLE_MANAGED_FILES``"
msgstr "``ORACLE_MANAGED_FILES``"

msgid ""
"If set to ``True``, Oracle Managed Files (OMF) tablespaces will be used. :"
"setting:`DATAFILE` and :setting:`DATAFILE_TMP` will be ignored."
msgstr ":setting:`DATAFILE` 和 :setting:`DATAFILE_TMP` 将被忽略。"

msgid "``TBLSPACE``"
msgstr "``TBLSPACE``"

msgid ""
"The name of the tablespace that will be used when running tests. If not "
"provided, Django will use ``'test_' + USER``."
msgstr ""
"运行测试时使用的表空间的名称。如果没有提供，Django 将使用 ``'test_' + "
"USER``。"

msgid "``TBLSPACE_TMP``"
msgstr "``TBLSPACE_TMP``"

msgid ""
"The name of the temporary tablespace that will be used when running tests. "
"If not provided, Django will use ``'test_' + USER + '_temp'``."
msgstr ""
"运行测试时使用的临时表空间的名称。如果没有提供，Django 将使用 ``'test_' + "
"USER + '_temp'``。"

msgid "``DATAFILE``"
msgstr "``DATAFILE``"

msgid ""
"The name of the datafile to use for the TBLSPACE. If not provided, Django "
"will use ``TBLSPACE + '.dbf'``."
msgstr ""
"TBLSPACE 要使用的数据文件名。如果没有提供，Django 将使用 ``TBLSPACE + '."
"dbf'``。"

msgid "``DATAFILE_TMP``"
msgstr "``DATAFILE_TMP``"

msgid ""
"The name of the datafile to use for the TBLSPACE_TMP. If not provided, "
"Django will use ``TBLSPACE_TMP + '.dbf'``."
msgstr ""
"TBLSPACE_TMP 的数据文件名。如果没有提供，Django 将使用 ``TBLSPACE_TMP + '."
"dbf'``。"

msgid "``DATAFILE_MAXSIZE``"
msgstr "``DATAFILE_MAXSIZE``"

msgid "Default: ``'500M'``"
msgstr "默认： ``'500M'``"

msgid "The maximum size that the DATAFILE is allowed to grow to."
msgstr "DATAFILE 允许增长的最大尺寸。"

msgid "``DATAFILE_TMP_MAXSIZE``"
msgstr "``DATAFILE_TMP_MAXSIZE``"

msgid "The maximum size that the DATAFILE_TMP is allowed to grow to."
msgstr "DATAFILE_TMP 允许增长的最大尺寸。"

msgid "``DATAFILE_SIZE``"
msgstr "``DATAFILE_SIZE``"

msgid "Default: ``'50M'``"
msgstr "默认： ``'50M'``"

msgid "The initial size of the DATAFILE."
msgstr "DATAFILE 的初始大小。"

msgid "``DATAFILE_TMP_SIZE``"
msgstr "``DATAFILE_TMP_SIZE``"

msgid "The initial size of the DATAFILE_TMP."
msgstr "DATAFILE_TMP 的初始大小。"

msgid "``DATAFILE_EXTSIZE``"
msgstr "``DATAFILE_EXTSIZE``"

msgid "Default: ``'25M'``"
msgstr "默认： ``'25M'``"

msgid ""
"The amount by which the DATAFILE is extended when more space is required."
msgstr "当需要更多空间时，DATAFILE 的扩展量。"

msgid "``DATAFILE_TMP_EXTSIZE``"
msgstr "``DATAFILE_TMP_EXTSIZE``"

msgid ""
"The amount by which the DATAFILE_TMP is extended when more space is required."
msgstr "当需要更多空间时，DATAFILE_TMP 的扩展量。"

msgid "``DATA_UPLOAD_MAX_MEMORY_SIZE``"
msgstr "``DATA_UPLOAD_MAX_MEMORY_SIZE``"

msgid "Default: ``2621440`` (i.e. 2.5 MB)."
msgstr "默认： ``2621440`` （即 2.5 MB）。"

msgid ""
"The maximum size in bytes that a request body may be before a :exc:`~django."
"core.exceptions.SuspiciousOperation` (``RequestDataTooBig``) is raised. The "
"check is done when accessing ``request.body`` or ``request.POST`` and is "
"calculated against the total request size excluding any file upload data. "
"You can set this to ``None`` to disable the check. Applications that are "
"expected to receive unusually large form posts should tune this setting."
msgstr ""
"请求体在引发 :exc:`~django.core.exceptions.SuspiciousOperation` "
"（``RequestDataTooBig``）之前的最大字节数。这个检查是在访问 ``request.body`` "
"或 ``request.POST`` 时进行的，是根据请求的总大小计算的，不包括任何文件上传数"
"据。你可以将其设置为 ``None`` 以禁用该检查。预计会收到非常大的上传表单的应用"
"程序应该调整这个配置。"

msgid ""
"The amount of request data is correlated to the amount of memory needed to "
"process the request and populate the GET and POST dictionaries. Large "
"requests could be used as a denial-of-service attack vector if left "
"unchecked. Since web servers don't typically perform deep request "
"inspection, it's not possible to perform a similar check at that level."
msgstr ""
"请求数据的数量与处理请求和填充 GET 和 POST 字典所需的内存量相关。如果不进行检"
"查，大的请求可能会被用作拒绝服务的攻击载体。由于 Web 服务器通常不会进行深层的"
"请求检查，所以不可能在这个层面进行类似的检查。"

msgid "See also :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`."
msgstr "另见 :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`。"

msgid "``DATA_UPLOAD_MAX_NUMBER_FIELDS``"
msgstr "``DATA_UPLOAD_MAX_NUMBER_FIELDS``"

msgid "Default: ``1000``"
msgstr "默认： ``1000``"

msgid ""
"The maximum number of parameters that may be received via GET or POST before "
"a :exc:`~django.core.exceptions.SuspiciousOperation` (``TooManyFields``) is "
"raised. You can set this to ``None`` to disable the check. Applications that "
"are expected to receive an unusually large number of form fields should tune "
"this setting."
msgstr ""
"在发生 :exc:`~django.core.exceptions.SuspiciousOperation` "
"（``TooManyFields``）之前，可以通过 GET 或 POST 接收到的参数的最大数量。你可"
"以将其设置为 ``None`` 来禁用该检查。预计会收到异常多的表单字段的应用程序应该"
"调整这个配置。"

msgid ""
"The number of request parameters is correlated to the amount of time needed "
"to process the request and populate the GET and POST dictionaries. Large "
"requests could be used as a denial-of-service attack vector if left "
"unchecked. Since web servers don't typically perform deep request "
"inspection, it's not possible to perform a similar check at that level."
msgstr ""
"请求参数的数量与处理请求和填充 GET 和 POST 字典所需的时间有关。如果不加以检"
"查，大的请求可能会被用作拒绝服务攻击的载体。由于 Web 服务器通常不会进行深层的"
"请求检查，所以不可能在这个层面进行类似的检查。"

msgid "``DATA_UPLOAD_MAX_NUMBER_FILES``"
msgstr ""

msgid "Default: ``100``"
msgstr ""

msgid ""
"The maximum number of files that may be received via POST in a ``multipart/"
"form-data`` encoded request before a :exc:`~django.core.exceptions."
"SuspiciousOperation` (``TooManyFiles``) is raised. You can set this to "
"``None`` to disable the check. Applications that are expected to receive an "
"unusually large number of file fields should tune this setting."
msgstr ""

msgid ""
"The number of accepted files is correlated to the amount of time and memory "
"needed to process the request. Large requests could be used as a denial-of-"
"service attack vector if left unchecked. Since web servers don't typically "
"perform deep request inspection, it's not possible to perform a similar "
"check at that level."
msgstr ""

msgid "``DATABASE_ROUTERS``"
msgstr "``DATABASE_ROUTERS``"

msgid ""
"The list of routers that will be used to determine which database to use "
"when performing a database query."
msgstr "在执行数据库查询时，将用于确定使用哪个数据库的路由器列表。"

msgid ""
"See the documentation on :ref:`automatic database routing in multi database "
"configurations <topics-db-multi-db-routing>`."
msgstr ""
"参见 :ref:`多数据库配置中的自动数据库路由 <topics-db-multi-db-routing>` 的文"
"档。"

msgid "``DATE_FORMAT``"
msgstr "``DATE_FORMAT``"

msgid "Default: ``'N j, Y'`` (e.g. ``Feb. 4, 2003``)"
msgstr "默认： ``'N j, Y'`` （例如 ``Feb. 4, 2003``）"

msgid ""
"The default formatting to use for displaying date fields in any part of the "
"system. Note that if :setting:`USE_L10N` is set to ``True``, then the locale-"
"dictated format has higher precedence and will be applied instead. See :"
"tfilter:`allowed date format strings <date>`."
msgstr ""
"在系统的任何部分显示日期字段时使用的默认格式。请注意，如果 :setting:"
"`USE_L10N` 被设置为 ``True``，那么本地决定的格式具有更高的优先权，并将被应"
"用。参见 :tfilter:`允许的日期格式字符串 <date>`。"

msgid ""
"See also :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:"
"`SHORT_DATE_FORMAT`."
msgstr ""
"另见 :setting:`DATETIME_FORMAT`、:setting:`TIME_FORMAT` 和 :setting:"
"`SHORT_DATE_FORMAT`。"

msgid "``DATE_INPUT_FORMATS``"
msgstr "``DATE_INPUT_FORMATS``"

msgid ""
"A list of formats that will be accepted when inputting data on a date field. "
"Formats will be tried in order, using the first valid one. Note that these "
"format strings use Python's :ref:`datetime module syntax <strftime-strptime-"
"behavior>`, not the format strings from the :tfilter:`date` template filter."
msgstr ""
"在日期字段上输入数据时接受的格式列表。格式将按顺序被尝试，使用第一个有效的格"
"式。注意这些格式字符串使用 Python 的 :ref:`datetime 模块语法 <strftime-"
"strptime-behavior>`，而不是来自 :tfilter:`date` 模板过滤器的格式字符串。"

msgid ""
"When :setting:`USE_L10N` is ``True``, the locale-dictated format has higher "
"precedence and will be applied instead."
msgstr ""
"当 :setting:`USE_L10N` 为 ``True`` 时，将采用本地规定的格式，具有更高的优先"
"权。"

msgid ""
"See also :setting:`DATETIME_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`."
msgstr ""
"另见 :setting:`DATETIME_INPUT_FORMATS` 和 :setting:`TIME_INPUT_FORMATS`。"

msgid "``DATETIME_FORMAT``"
msgstr "``DATETIME_FORMAT``"

msgid "Default: ``'N j, Y, P'`` (e.g. ``Feb. 4, 2003, 4 p.m.``)"
msgstr "默认： ``'N j, Y, P'`` （例如 ``Feb. 4, 2003, 4 p.m.``）"

msgid ""
"The default formatting to use for displaying datetime fields in any part of "
"the system. Note that if :setting:`USE_L10N` is set to ``True``, then the "
"locale-dictated format has higher precedence and will be applied instead. "
"See :tfilter:`allowed date format strings <date>`."
msgstr ""
"在系统的任何部分显示日期时间字段时使用的默认格式。请注意，如果 :setting:"
"`USE_L10N` 被设置为 ``True``，那么本地决定的格式具有更高的优先权，并将被应"
"用。参见 :tfilter:`允许的日期格式字符串 <date>`。"

msgid ""
"See also :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT` and :setting:"
"`SHORT_DATETIME_FORMAT`."
msgstr ""
"另见 :setting:`DATE_FORMAT`、:setting:`TIME_FORMAT` 和 :setting:"
"`SHORT_DATETIME_FORMAT`。"

msgid "``DATETIME_INPUT_FORMATS``"
msgstr "``DATETIME_INPUT_FORMATS``"

msgid ""
"A list of formats that will be accepted when inputting data on a datetime "
"field. Formats will be tried in order, using the first valid one. Note that "
"these format strings use Python's :ref:`datetime module syntax <strftime-"
"strptime-behavior>`, not the format strings from the :tfilter:`date` "
"template filter. Date-only formats are not included as datetime fields will "
"automatically try :setting:`DATE_INPUT_FORMATS` in last resort."
msgstr ""
"在日期时间字段上输入数据时可接受的格式列表。格式将按顺序被尝试，使用第一个有"
"效的格式。注意这些格式字符串使用 Python 的 :ref:`datetime 模块语法 <strftime-"
"strptime-behavior>`，而不是 :tfilter:`date` 模板过滤器的格式字符串。纯日期格"
"式不包括在内，因为日期时间字段会在最后时刻自动尝试 :setting:"
"`DATE_INPUT_FORMATS`。"

msgid ""
"See also :setting:`DATE_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`."
msgstr "另见 :setting:`DATE_INPUT_FORMATS` 和 :setting:`TIME_INPUT_FORMATS`。"

msgid "A boolean that turns on/off debug mode."
msgstr "一个开启、关闭调试模式的布尔值。"

msgid "Never deploy a site into production with :setting:`DEBUG` turned on."
msgstr "永远不要在 :setting:`DEBUG` 开启的情况下将网站部署到生产中。"

msgid ""
"One of the main features of debug mode is the display of detailed error "
"pages. If your app raises an exception when :setting:`DEBUG` is ``True``, "
"Django will display a detailed traceback, including a lot of metadata about "
"your environment, such as all the currently defined Django settings (from "
"``settings.py``)."
msgstr ""
"调试模式的主要功能之一是显示详细的错误页面。如果你的应用程序在 :setting:"
"`DEBUG` 为 ``True`` 时引发了异常，Django 会显示一个详细的回溯，包括很多关于你"
"的环境的元数据，比如所有当前定义的 Django 配置（来自 ``settings.py``）。"

msgid ""
"As a security measure, Django will *not* include settings that might be "
"sensitive, such as :setting:`SECRET_KEY`. Specifically, it will exclude any "
"setting whose name includes any of the following:"
msgstr ""
"作为一项安全措施，Django将 *不* 包含可能是敏感的配置，如 :setting:"
"`SECRET_KEY`。具体来说，它将排除任何名称中包含以下内容的配置。"

msgid "``'API'``"
msgstr "``'API'``"

msgid "``'KEY'``"
msgstr "``'KEY'``"

msgid "``'PASS'``"
msgstr "``'PASS'``"

msgid "``'SECRET'``"
msgstr "``'SECRET'``"

msgid "``'SIGNATURE'``"
msgstr "``'SIGNATURE'``"

msgid "``'TOKEN'``"
msgstr "``'TOKEN'``"

msgid ""
"Note that these are *partial* matches. ``'PASS'`` will also match PASSWORD, "
"just as ``'TOKEN'`` will also match TOKENIZED and so on."
msgstr ""
"请注意，这些是 *部分* 匹配。``'PASS'`` 也将与 PASSWORD 匹配，正如 "
"``'TOKEN'`` 也将与 TOKENIZED 匹配，以此类推。"

msgid ""
"Still, note that there are always going to be sections of your debug output "
"that are inappropriate for public consumption. File paths, configuration "
"options and the like all give attackers extra information about your server."
msgstr ""
"不过，请注意，你的调试输出中总会有一些部分是不适合公开的。文件路径、配置选项"
"等都会给攻击者提供关于你的服务器的额外信息。"

msgid ""
"It is also important to remember that when running with :setting:`DEBUG` "
"turned on, Django will remember every SQL query it executes. This is useful "
"when you're debugging, but it'll rapidly consume memory on a production "
"server."
msgstr ""
"同样重要的是，当 :setting:`DEBUG` 开启时，Django 会记住它执行的每个 SQL 查"
"询。这在调试时很有用，但在生产服务器上会迅速消耗内存。"

msgid ""
"Finally, if :setting:`DEBUG` is ``False``, you also need to properly set "
"the :setting:`ALLOWED_HOSTS` setting. Failing to do so will result in all "
"requests being returned as \"Bad Request (400)\"."
msgstr ""
"最后，如果 :setting:`DEBUG` 为 ``False``，还需要正确设置 :setting:"
"`ALLOWED_HOSTS` 配置。否则，所有的请求都会以 “Bad Request (400) ” 返回。"

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` sets ``DEBUG = True`` for convenience."
msgstr ""
"默认的 :file:`settings.py` 文件由 :djadmin:`django-admin startproject "
"<startproject>` 创建，为了方便，设置 ``DEBUG = True``。"

msgid "``DEBUG_PROPAGATE_EXCEPTIONS``"
msgstr "``DEBUG_PROPAGATE_EXCEPTIONS``"

msgid ""
"If set to ``True``, Django's exception handling of view functions (:data:"
"`~django.conf.urls.handler500`, or the debug view if :setting:`DEBUG` is "
"``True``) and logging of 500 responses (:ref:`django-request-logger`) is "
"skipped and exceptions propagate upward."
msgstr ""

msgid ""
"This can be useful for some test setups. It shouldn't be used on a live site "
"unless you want your web server (instead of Django) to generate \"Internal "
"Server Error\" responses. In that case, make sure your server doesn't show "
"the stack trace or other sensitive information in the response."
msgstr ""
"这对于一些测试配置是有用的。除非你想让你的 web 服务器（而不是 Django）生成“内"
"部服务器错误”的响应，否则它不应该被用于实时站点。在这种情况下，确保你的服务器"
"不会在响应中显示堆栈跟踪或其他敏感信息。"

msgid "``DECIMAL_SEPARATOR``"
msgstr "``DECIMAL_SEPARATOR``"

msgid "Default: ``'.'`` (Dot)"
msgstr "默认： ``'.'`` （点）"

msgid "Default decimal separator used when formatting decimal numbers."
msgstr "格式化小数时使用的默认小数分隔符。"

msgid ""
"Note that if :setting:`USE_L10N` is set to ``True``, then the locale-"
"dictated format has higher precedence and will be applied instead."
msgstr ""
"请注意，如果 :setting:`USE_L10N` 设置为 ``True``，那么将采用本地决定的格式，"
"具有更高的优先权。"

msgid ""
"See also :setting:`NUMBER_GROUPING`, :setting:`THOUSAND_SEPARATOR` and :"
"setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""
"另见 :setting:`NUMBER_GROUPING`、:setting:`THOUSAND_SEPARATOR` 和 :setting:"
"`USE_THOUSAND_SEPARATOR`。"

msgid "``DEFAULT_AUTO_FIELD``"
msgstr "``DEFAULT_AUTO_FIELD``"

msgid "Default: ``'``:class:`django.db.models.AutoField`\\ ``'``"
msgstr "默认： ``'``:class:`django.db.models.AutoField`\\ ``'``"

msgid ""
"Default primary key field type to use for models that don't have a field "
"with :attr:`primary_key=True <django.db.models.Field.primary_key>`."
msgstr ""
"默认的主键字段类型，用于没有带有 :attr:`primary_key=True <django.db.models."
"Field.primary_key>` 字段的模型。"

msgid "Migrating auto-created through tables"
msgstr "迁移自动创建的中间表"

msgid ""
"The value of ``DEFAULT_AUTO_FIELD`` will be respected when creating new auto-"
"created through tables for many-to-many relationships."
msgstr ""
"当为多对多关系创建新的自动创建的中间表时，将尊重 ``DEFAULT_AUTO_FIELD`` 的"
"值。"

msgid ""
"Unfortunately, the primary keys of existing auto-created through tables "
"cannot currently be updated by the migrations framework."
msgstr "不幸的是，现有的自动创建的中间表的主键目前不能被迁移框架所更新。"

msgid ""
"This means that if you switch the value of ``DEFAULT_AUTO_FIELD`` and then "
"generate migrations, the primary keys of the related models will be updated, "
"as will the foreign keys from the through table, but the primary key of the "
"auto-created through table will not be migrated."
msgstr ""
"这意味着，如果你切换了 ``DEFAULT_AUTO_FIELD`` 的值，然后生成迁移，相关模型的"
"主键将被更新，来自中间表的外键也将被更新，但是自动创建的中间表的主键将不会被"
"迁移。"

msgid ""
"In order to address this, you should add a :class:`~django.db.migrations."
"operations.RunSQL` operation to your migrations to perform the required "
"``ALTER TABLE`` step. You can check the existing table name through "
"``sqlmigrate``, ``dbshell``, or with the field’s ``remote_field.through."
"_meta.db_table`` property."
msgstr ""
"为了解决这个问题，你应该在你的迁移中添加一个 :class:`~django.db.migrations."
"operations.RunSQL` 操作来执行所需的 ``ALTER TABLE`` 步骤。你可以通过 "
"``sqlmigrate``、``dbshell`` 或字段的 ``remote_field.through._meta.db_table`` "
"属性来检查现有的表名。"

msgid ""
"Explicitly defined through models are already handled by the migrations "
"system."
msgstr "通过模型明确定义的，已经由迁移系统处理。"

msgid ""
"Allowing automatic migrations for the primary key of existing auto-created "
"through tables :ticket:`may be implemented at a later date <32674>`."
msgstr ""
"允许对现有的自动创建的中间表的主键进行自动迁移 :ticket:`可能会在以后实现 "
"<32674>`。"

msgid "``DEFAULT_CHARSET``"
msgstr "``DEFAULT_CHARSET``"

msgid "Default: ``'utf-8'``"
msgstr "默认： ``'utf-8'``"

msgid ""
"Default charset to use for all ``HttpResponse`` objects, if a MIME type "
"isn't manually specified. Used when constructing the ``Content-Type`` header."
msgstr ""
"如果没有手动指定 MIME 类型，所有 ``HttpResponse`` 对象将使用默认字符集。在构"
"建 ``Content-Type`` 头时使用。"

msgid "``DEFAULT_EXCEPTION_REPORTER``"
msgstr "``DEFAULT_EXCEPTION_REPORTER``"

msgid "Default: ``'``:class:`django.views.debug.ExceptionReporter`\\ ``'``"
msgstr "默认： ``'``:class:`django.views.debug.ExceptionReporter`\\ ``'``"

msgid ""
"Default exception reporter class to be used if none has been assigned to "
"the :class:`~django.http.HttpRequest` instance yet. See :ref:`custom-error-"
"reports`."
msgstr ""
"如果还没有为 :class:`~django.http.HttpRequest` 实例分配任何异常报告类，则使用"
"默认的异常报告类。参见 :ref:`custom-error-reports`。"

msgid "``DEFAULT_EXCEPTION_REPORTER_FILTER``"
msgstr "``DEFAULT_EXCEPTION_REPORTER_FILTER``"

msgid ""
"Default: ``'``:class:`django.views.debug.SafeExceptionReporterFilter`\\ ``'``"
msgstr ""
"默认： ``'``:class:`django.views.debug.SafeExceptionReporterFilter`\\ ``'``"

msgid ""
"Default exception reporter filter class to be used if none has been assigned "
"to the :class:`~django.http.HttpRequest` instance yet. See :ref:`Filtering "
"error reports<filtering-error-reports>`."
msgstr ""
"如果还没有为 :class:`~django.http.HttpRequest` 实例分配任何异常报告过滤类，则"
"使用默认的异常报告过滤类。参见 :ref:`过滤错误报告 <filtering-error-"
"reports>`。"

msgid "``DEFAULT_FILE_STORAGE``"
msgstr "``DEFAULT_FILE_STORAGE``"

msgid ""
"Default: ``'``:class:`django.core.files.storage.FileSystemStorage`\\ ``'``"
msgstr ""
"默认： ``'``:class:`django.core.files.storage.FileSystemStorage`\\ ``'``"

msgid ""
"Default file storage class to be used for any file-related operations that "
"don't specify a particular storage system. See :doc:`/topics/files`."
msgstr ""
"默认的文件存储类，用于任何与文件相关的操作，不指定特定的存储系统。参见 :doc:"
"`/topics/files`。"

msgid ""
"This setting is deprecated. Starting with Django 4.2, default file storage "
"engine can be configured with the :setting:`STORAGES` setting under the "
"``default`` key."
msgstr ""

msgid "``DEFAULT_FROM_EMAIL``"
msgstr "``DEFAULT_FROM_EMAIL``"

msgid "Default: ``'webmaster@localhost'``"
msgstr "默认： ``'webmaster@localhost'``"

msgid ""
"Default email address to use for various automated correspondence from the "
"site manager(s). This doesn't include error messages sent to :setting:"
"`ADMINS` and :setting:`MANAGERS`; for that, see :setting:`SERVER_EMAIL`."
msgstr ""
"默认电子邮件地址，用于网站管理员的各种自动通信。这不包括发送到 :setting:"
"`ADMINS` 和 :setting:`MANAGERS` 的错误信息；关于这一点，请参见 :setting:"
"`SERVER_EMAIL`。"

msgid "``DEFAULT_INDEX_TABLESPACE``"
msgstr "``DEFAULT_INDEX_TABLESPACE``"

msgid ""
"Default tablespace to use for indexes on fields that don't specify one, if "
"the backend supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""
"如果后端支持的话，在没有指定索引的字段上使用的默认表空间（参见 :doc:`/topics/"
"db/tablespaces`）。"

msgid "``DEFAULT_TABLESPACE``"
msgstr "``DEFAULT_TABLESPACE``"

msgid ""
"Default tablespace to use for models that don't specify one, if the backend "
"supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""
"对于没有指定表空间的模型，如果后端支持，则使用默认表空间（参见 :doc:`/topics/"
"db/tablespaces`）。"

msgid "``DISALLOWED_USER_AGENTS``"
msgstr "``DISALLOWED_USER_AGENTS``"

msgid ""
"List of compiled regular expression objects representing User-Agent strings "
"that are not allowed to visit any page, systemwide. Use this for bots/"
"crawlers. This is only used if ``CommonMiddleware`` is installed (see :doc:`/"
"topics/http/middleware`)."
msgstr ""
"编译后的正则表达式对象列表，代表全系统范围内不允许访问任何页面的 User-Agent "
"字符串。用于机器人／爬虫。只有在安装了 ``CommonMiddleware`` 的情况下才会使用"
"（参见 :doc:`/topics/http/middleware`）。"

msgid "``EMAIL_BACKEND``"
msgstr "``EMAIL_BACKEND``"

msgid ""
"Default: ``'``:class:`django.core.mail.backends.smtp.EmailBackend`\\ ``'``"
msgstr ""
"默认： ``'``:class:`django.core.mail.backends.smtp.EmailBackend`\\ ``'``"

msgid ""
"The backend to use for sending emails. For the list of available backends "
"see :doc:`/topics/email`."
msgstr "用于发送邮件的后端。关于可用的后端列表，请参见 :doc:`/topics/email`。"

msgid "``EMAIL_FILE_PATH``"
msgstr "``EMAIL_FILE_PATH``"

msgid "Default: Not defined"
msgstr "默认：未定义"

msgid ""
"The directory used by the :ref:`file email backend <topic-email-file-"
"backend>` to store output files."
msgstr ""
":ref:`文件邮件后端 <topic-email-file-backend>` 用来存储输出文件的目录。"

msgid "``EMAIL_HOST``"
msgstr "``EMAIL_HOST``"

msgid "Default: ``'localhost'``"
msgstr "默认： ``'localhost'``"

msgid "The host to use for sending email."
msgstr "用于发送电子邮件的主机。"

msgid "See also :setting:`EMAIL_PORT`."
msgstr "另见 :setting:`EMAIL_PORT`。"

msgid "``EMAIL_HOST_PASSWORD``"
msgstr "``EMAIL_HOST_PASSWORD``"

msgid ""
"Password to use for the SMTP server defined in :setting:`EMAIL_HOST`. This "
"setting is used in conjunction with :setting:`EMAIL_HOST_USER` when "
"authenticating to the SMTP server. If either of these settings is empty, "
"Django won't attempt authentication."
msgstr ""
"在 :setting:`EMAIL_HOST` 中定义的 SMTP 服务器使用的密码。这个配置和 :setting:"
"`EMAIL_HOST_USER` 中的密码一起使用。如果这两个配置中的任何一个为空，Django 就"
"不会尝试验证。"

msgid "See also :setting:`EMAIL_HOST_USER`."
msgstr "另见 :setting:`EMAIL_HOST_USER`。"

msgid "``EMAIL_HOST_USER``"
msgstr "``EMAIL_HOST_USER``"

msgid ""
"Username to use for the SMTP server defined in :setting:`EMAIL_HOST`. If "
"empty, Django won't attempt authentication."
msgstr ""
"在 :setting:`EMAIL_HOST` 中定义的 SMTP 服务器的用户名。如果为空，Django 将不"
"会尝试认证。"

msgid "See also :setting:`EMAIL_HOST_PASSWORD`."
msgstr "另见 :setting:`EMAIL_HOST_PASSWORD`。"

msgid "``EMAIL_PORT``"
msgstr "``EMAIL_PORT``"

msgid "Default: ``25``"
msgstr "默认： ``25``"

msgid "Port to use for the SMTP server defined in :setting:`EMAIL_HOST`."
msgstr "在 :setting:`EMAIL_HOST' 中定义的 SMTP 服务器使用的端口。"

msgid "``EMAIL_SUBJECT_PREFIX``"
msgstr "``EMAIL_SUBJECT_PREFIX``"

msgid "Default: ``'[Django] '``"
msgstr "默认： ``'[Django] '``"

msgid ""
"Subject-line prefix for email messages sent with ``django.core.mail."
"mail_admins`` or ``django.core.mail.mail_managers``. You'll probably want to "
"include the trailing space."
msgstr ""
"用 ``django.core.mail.mail_admins`` 或 ``django.core.mail.mail_managers`` 发"
"送邮件的主题行前缀。你可能会想要包含尾部的空格。"

msgid "``EMAIL_USE_LOCALTIME``"
msgstr "``EMAIL_USE_LOCALTIME``"

msgid ""
"Whether to send the SMTP ``Date`` header of email messages in the local time "
"zone (``True``) or in UTC (``False``)."
msgstr ""
"是否以当地时区（``True``）或 UTC（``False``）发送 SMTP ``Date`` 邮件头。"

msgid "``EMAIL_USE_TLS``"
msgstr "``EMAIL_USE_TLS``"

msgid ""
"Whether to use a TLS (secure) connection when talking to the SMTP server. "
"This is used for explicit TLS connections, generally on port 587. If you are "
"experiencing hanging connections, see the implicit TLS setting :setting:"
"`EMAIL_USE_SSL`."
msgstr ""
"与 SMTP 服务器对话时是否使用 TLS（安全）连接。这用于显式 TLS 连接，一般在 "
"587 端口。如果你遇到挂起的连接，请查看隐式 TLS 配置 :setting:"
"`EMAIL_USE_SSL`。"

msgid "``EMAIL_USE_SSL``"
msgstr "``EMAIL_USE_SSL``"

msgid ""
"Whether to use an implicit TLS (secure) connection when talking to the SMTP "
"server. In most email documentation this type of TLS connection is referred "
"to as SSL. It is generally used on port 465. If you are experiencing "
"problems, see the explicit TLS setting :setting:`EMAIL_USE_TLS`."
msgstr ""
"与 SMTP 服务器对话时是否使用隐式 TLS（安全）连接。在大多数电子邮件文档中，这"
"种类型的 TLS 连接被称为 SSL。它通常在 465 端口使用。如果你遇到问题，请查看显"
"式 TLS 配置 :setting:`EMAIL_USE_TLS`。"

msgid ""
"Note that :setting:`EMAIL_USE_TLS`/:setting:`EMAIL_USE_SSL` are mutually "
"exclusive, so only set one of those settings to ``True``."
msgstr ""
"注意 :setting:`EMAIL_USE_TLS` ／ :setting:`EMAIL_USE_SSL` 是相互排斥的，所以"
"只能将其中一个设置为 ``True``。"

msgid "``EMAIL_SSL_CERTFILE``"
msgstr "``EMAIL_SSL_CERTFILE``"

msgid ""
"If :setting:`EMAIL_USE_SSL` or :setting:`EMAIL_USE_TLS` is ``True``, you can "
"optionally specify the path to a PEM-formatted certificate chain file to use "
"for the SSL connection."
msgstr ""
"如果 :setting:`EMAIL_USE_SSL` 或 :setting:`EMAIL_USE_TLS` 是 ``True``，你可以"
"选择指定一个 PEM 格式的证书链文件的路径，用于 SSL 连接。"

msgid "``EMAIL_SSL_KEYFILE``"
msgstr "``EMAIL_SSL_KEYFILE``"

msgid ""
"If :setting:`EMAIL_USE_SSL` or :setting:`EMAIL_USE_TLS` is ``True``, you can "
"optionally specify the path to a PEM-formatted private key file to use for "
"the SSL connection."
msgstr ""
"如果 :setting:`EMAIL_USE_SSL` 或 :setting:`EMAIL_USE_TLS` 为 ``True``，你可以"
"选择性地指定用于 SSL 连接的 PEM 格式化私钥文件的路径。"

msgid ""
"Note that setting :setting:`EMAIL_SSL_CERTFILE` and :setting:"
"`EMAIL_SSL_KEYFILE` doesn't result in any certificate checking. They're "
"passed to the underlying SSL connection. Please refer to the documentation "
"of Python's :meth:`python:ssl.SSLContext.wrap_socket` function for details "
"on how the certificate chain file and private key file are handled."
msgstr ""

msgid "``EMAIL_TIMEOUT``"
msgstr "``EMAIL_TIMEOUT``"

msgid ""
"Specifies a timeout in seconds for blocking operations like the connection "
"attempt."
msgstr "指定阻止连接尝试等操作的超时时间，以秒为单位。"

msgid "``FILE_UPLOAD_HANDLERS``"
msgstr "``FILE_UPLOAD_HANDLERS``"

msgid ""
"A list of handlers to use for uploading. Changing this setting allows "
"complete customization -- even replacement -- of Django's upload process."
msgstr ""
"上传过程中使用的处理程序列表。改变这个配置可以完全自定义——甚至替换——Django 的"
"上传过程。"

msgid "See :doc:`/topics/files` for details."
msgstr "详情参见 :doc:`/topics/files`。"

msgid "``FILE_UPLOAD_MAX_MEMORY_SIZE``"
msgstr "``FILE_UPLOAD_MAX_MEMORY_SIZE``"

msgid ""
"The maximum size (in bytes) that an upload will be before it gets streamed "
"to the file system. See :doc:`/topics/files` for details."
msgstr ""
"上传的文件在被传送到文件系统之前的最大尺寸（以字节为单位）。详见 :doc:`/"
"topics/files`。"

msgid "See also :setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`."
msgstr "另见 :setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`。"

msgid "``FILE_UPLOAD_DIRECTORY_PERMISSIONS``"
msgstr "``FILE_UPLOAD_DIRECTORY_PERMISSIONS``"

msgid ""
"The numeric mode to apply to directories created in the process of uploading "
"files."
msgstr "适用于上传文件过程中创建的目录的数字模式。"

msgid ""
"This setting also determines the default permissions for collected static "
"directories when using the :djadmin:`collectstatic` management command. See :"
"djadmin:`collectstatic` for details on overriding it."
msgstr ""
"当使用 :djadmin:`collectstatic` 管理命令时，这个配置也决定了收集的静态目录的"
"默认权限。覆盖它的细节请参见 :djadmin:`collectstatic`。"

msgid ""
"This value mirrors the functionality and caveats of the :setting:"
"`FILE_UPLOAD_PERMISSIONS` setting."
msgstr "这个值反映了 :setting:`FILE_UPLOAD_PERMISSIONS` 配置的功能和注意事项。"

msgid "``FILE_UPLOAD_PERMISSIONS``"
msgstr "``FILE_UPLOAD_PERMISSIONS``"

msgid "Default: ``0o644``"
msgstr "默认： ``0o644``"

msgid ""
"The numeric mode (i.e. ``0o644``) to set newly uploaded files to. For more "
"information about what these modes mean, see the documentation for :func:`os."
"chmod`."
msgstr ""
"设置新上传文件的数字模式（即 ``0o644``）。关于这些模式的更多信息，请参见 :"
"func:`os.chmod` 的文档。"

msgid ""
"If ``None``, you'll get operating-system dependent behavior. On most "
"platforms, temporary files will have a mode of ``0o600``, and files saved "
"from memory will be saved using the system's standard umask."
msgstr ""
"如果 ``None``，你会得到操作系统依赖的行为。在大多数平台上，临时文件的模式为 "
"``0o600``，从内存中保存的文件将使用系统的标准 umask 保存。"

msgid ""
"For security reasons, these permissions aren't applied to the temporary "
"files that are stored in :setting:`FILE_UPLOAD_TEMP_DIR`."
msgstr ""
"出于安全考虑，这些权限不应用于存储在 :setting:`FILE_UPLOAD_TEMP_DIR` 中的临时"
"文件。"

msgid ""
"This setting also determines the default permissions for collected static "
"files when using the :djadmin:`collectstatic` management command. See :"
"djadmin:`collectstatic` for details on overriding it."
msgstr ""
"当使用 :djadmin:`collectstatic` 管理命令时，这个配置也决定了收集的静态文件的"
"默认权限。覆盖它的细节请参见 :djadmin:`collectstatic`。"

msgid "**Always prefix the mode with** ``0o`` **.**"
msgstr "**总是在模式前加上 **`0o`** 。**"

msgid ""
"If you're not familiar with file modes, please note that the ``0o`` prefix "
"is very important: it indicates an octal number, which is the way that modes "
"must be specified. If you try to use ``644``, you'll get totally incorrect "
"behavior."
msgstr ""
"如果你不熟悉文件模式，请注意 ``0o`` 的前缀是非常重要的：它表示一个八进制数，"
"这就是模式必须被指定的方式。如果你试图使用 ``644``，你会得到完全错误的行为。"

msgid "``FILE_UPLOAD_TEMP_DIR``"
msgstr "``FILE_UPLOAD_TEMP_DIR``"

msgid ""
"The directory to store data to (typically files larger than :setting:"
"`FILE_UPLOAD_MAX_MEMORY_SIZE`) temporarily while uploading files. If "
"``None``, Django will use the standard temporary directory for the operating "
"system. For example, this will default to ``/tmp`` on \\*nix-style operating "
"systems."
msgstr ""
"上传文件时要临时存储数据的目录（一般是大于 :setting:"
"`FILE_UPLOAD_MAX_MEMORY_SIZE` 的文件）。如果 ``None``，Django 将使用操作系统"
"的标准临时目录。例如，在 *nix 风格的操作系统上，会默认为 ``/tmp``。"

msgid "``FIRST_DAY_OF_WEEK``"
msgstr "``FIRST_DAY_OF_WEEK``"

msgid "Default: ``0`` (Sunday)"
msgstr "默认： ``0`` （星期日）"

msgid ""
"A number representing the first day of the week. This is especially useful "
"when displaying a calendar. This value is only used when not using format "
"internationalization, or when a format cannot be found for the current "
"locale."
msgstr ""
"代表一周第一天的数字。这在显示日历时特别有用。该值仅在不使用格式国际化时使"
"用，或者当无法为当前语言环境找到格式时使用。"

msgid ""
"The value must be an integer from 0 to 6, where 0 means Sunday, 1 means "
"Monday and so on."
msgstr "该值必须是 0 到 6 的整数，其中 0 代表周日，1 代表周一，以此类推。"

msgid "``FIXTURE_DIRS``"
msgstr "``FIXTURE_DIRS``"

msgid ""
"List of directories searched for :ref:`fixture <fixtures-explanation>` "
"files, in addition to the ``fixtures`` directory of each application, in "
"search order."
msgstr ""

msgid ""
"Note that these paths should use Unix-style forward slashes, even on Windows."
msgstr "请注意，这些路径应该使用 Unix 风格的斜线，即使在 Windows 上也是如此。"

msgid ""
"See :ref:`initial-data-via-fixtures` and :ref:`topics-testing-fixtures`."
msgstr ""
"参见 :ref:`initial-data-via-fixtures` 和 :ref:`topics-testing-fixtures`。"

msgid "``FORCE_SCRIPT_NAME``"
msgstr "``FORCE_SCRIPT_NAME``"

msgid ""
"If not ``None``, this will be used as the value of the ``SCRIPT_NAME`` "
"environment variable in any HTTP request. This setting can be used to "
"override the server-provided value of ``SCRIPT_NAME``, which may be a "
"rewritten version of the preferred value or not supplied at all. It is also "
"used by :func:`django.setup()` to set the URL resolver script prefix outside "
"of the request/response cycle (e.g. in management commands and standalone "
"scripts) to generate correct URLs when ``SCRIPT_NAME`` is not ``/``."
msgstr ""
"如果不是 ``None``，将作为任何 HTTP 请求中 ``SCRIPT_NAME`` 环境变量的值。这个"
"设置可以用来覆盖服务器提供的 ``SCRIPT_NAME`` 的值，这个值可能是首选值的重写版"
"本，也可能根本没有提供。它还被 :func:`django.setup()` 用来在请求／响应周期之"
"外设置 URL 解析器脚本前缀（例如在管理命令和独立脚本中），以便在 "
"``SCRIPT_NAME`` 不是 ``/`` 时生成正确的 URL。"

msgid "``FORM_RENDERER``"
msgstr "``FORM_RENDERER``"

msgid "Default: ``'``:class:`django.forms.renderers.DjangoTemplates`\\ ``'``"
msgstr "默认： ``'``:class:`django.forms.renderers.DjangoTemplates`\\ ``'``"

msgid ""
"The class that renders forms and form widgets. It must implement :ref:`the "
"low-level render API <low-level-widget-render-api>`. Included form renderers "
"are:"
msgstr ""

msgid "``'``:class:`django.forms.renderers.DjangoTemplates`\\ ``'``"
msgstr "``'``:class:`django.forms.renderers.DjangoTemplates`\\ ``'``"

msgid "``'``:class:`django.forms.renderers.Jinja2`\\ ``'``"
msgstr "``'``:class:`django.forms.renderers.Jinja2`\\ ``'``"

msgid "``'``:class:`django.forms.renderers.TemplatesSetting`\\ ``'``"
msgstr "``'``:class:`django.forms.renderers.TemplatesSetting`\\ ``'``"

msgid "``FORMAT_MODULE_PATH``"
msgstr "``FORMAT_MODULE_PATH``"

msgid ""
"A full Python path to a Python package that contains custom format "
"definitions for project locales. If not ``None``, Django will check for a "
"``formats.py`` file, under the directory named as the current locale, and "
"will use the formats defined in this file."
msgstr ""
"一个 Python 包的完整 Python 路径，该 Python 包包含了项目 locale 的自定义格式"
"定义。如果不是 ``None``，Django 将检查当前 locale 目录下的 ``formats.py`` 文"
"件，并将使用该文件中定义的格式。"

msgid ""
"For example, if :setting:`FORMAT_MODULE_PATH` is set to ``mysite.formats``, "
"and current language is ``en`` (English), Django will expect a directory "
"tree like:"
msgstr ""

msgid "You can also set this setting to a list of Python paths, for example::"
msgstr "你也可以将此设置为 Python 路径列表，例如："

msgid ""
"When Django searches for a certain format, it will go through all given "
"Python paths until it finds a module that actually defines the given format. "
"This means that formats defined in packages farther up in the list will take "
"precedence over the same formats in packages farther down."
msgstr ""
"当 Django 搜索某个格式时，它将通过所有给定的 Python 路径，直到找到一个真正定"
"义该格式的模块。这意味着在列表中较远处的包中定义的格式将优先于较远处的包中的"
"格式。"

msgid "Available formats are:"
msgstr "可用格式："

msgid ":setting:`DATE_FORMAT`"
msgstr ":setting:`DATE_FORMAT`"

msgid ":setting:`DATE_INPUT_FORMATS`"
msgstr ":setting:`DATE_INPUT_FORMATS`"

msgid ":setting:`DATETIME_FORMAT`,"
msgstr ":setting:`DATETIME_FORMAT`"

msgid ":setting:`DATETIME_INPUT_FORMATS`"
msgstr ":setting:`DATETIME_INPUT_FORMATS`"

msgid ":setting:`DECIMAL_SEPARATOR`"
msgstr ":setting:`DECIMAL_SEPARATOR`"

msgid ":setting:`FIRST_DAY_OF_WEEK`"
msgstr ":setting:`FIRST_DAY_OF_WEEK`"

msgid ":setting:`MONTH_DAY_FORMAT`"
msgstr ":setting:`MONTH_DAY_FORMAT`"

msgid ":setting:`NUMBER_GROUPING`"
msgstr ":setting:`NUMBER_GROUPING`"

msgid ":setting:`SHORT_DATE_FORMAT`"
msgstr ":setting:`SHORT_DATE_FORMAT`"

msgid ":setting:`SHORT_DATETIME_FORMAT`"
msgstr ":setting:`SHORT_DATETIME_FORMAT`"

msgid ":setting:`THOUSAND_SEPARATOR`"
msgstr ":setting:`THOUSAND_SEPARATOR`"

msgid ":setting:`TIME_FORMAT`"
msgstr ":setting:`TIME_FORMAT`"

msgid ":setting:`TIME_INPUT_FORMATS`"
msgstr ":setting:`TIME_INPUT_FORMATS`"

msgid ":setting:`YEAR_MONTH_FORMAT`"
msgstr ":setting:`YEAR_MONTH_FORMAT`"

msgid "``IGNORABLE_404_URLS``"
msgstr "``IGNORABLE_404_URLS``"

msgid ""
"List of compiled regular expression objects describing URLs that should be "
"ignored when reporting HTTP 404 errors via email (see :doc:`/howto/error-"
"reporting`). Regular expressions are matched against :meth:`request's full "
"paths <django.http.HttpRequest.get_full_path>` (including query string, if "
"any). Use this if your site does not provide a commonly requested file such "
"as ``favicon.ico`` or ``robots.txt``."
msgstr ""
"编译的正则表达式对象列表，这些对象描述了在通过电子邮件报告 HTTP 404 错误时应"
"该被忽略的 URL（参见 :doc:`/howto/error-reporting`）。正则表达式与 :meth:"
"`request 的完整路径 <django.http.HttpRequest.get_full_path>` （包括查询字符"
"串，如果有的话）进行匹配。如果你的网站没有提供常用的请求文件，如 ``favicon."
"ico`` 或 ``robots.txt``，请使用此选项。"

msgid ""
"This is only used if :class:`~django.middleware.common."
"BrokenLinkEmailsMiddleware` is enabled (see :doc:`/topics/http/middleware`)."
msgstr ""
"只有当 :class:`~django.middleware.common.BrokenLinkEmailsMiddleware` 被启用"
"时，才会使用这个功能（参见 :doc:`/topics/http/middleware`）。"

msgid "``INSTALLED_APPS``"
msgstr "``INSTALLED_APPS``"

msgid ""
"A list of strings designating all applications that are enabled in this "
"Django installation. Each string should be a dotted Python path to:"
msgstr ""
"一个字符串的列表，表示在这个 Django 安装中所有被启用的应用程序。每一个字符串"
"都应该是一个 Python 的点分隔路径。"

msgid "an application configuration class (preferred), or"
msgstr "应用程序配置类（首选），或"

msgid "a package containing an application."
msgstr "包含应用程序的包。"

msgid ":doc:`Learn more about application configurations </ref/applications>`."
msgstr ":doc:`了解更多关于应用配置 </ref/applications>`。"

msgid "Use the application registry for introspection"
msgstr "使用应用程序注册进行自省"

msgid ""
"Your code should never access :setting:`INSTALLED_APPS` directly. Use :attr:"
"`django.apps.apps` instead."
msgstr ""
"你的代码不应该直接访问 :setting:`INSTALLED_APPS`。使用 :attr:`django.apps."
"apps` 代替。"

msgid ""
"Application names and labels must be unique in             :setting:"
"`INSTALLED_APPS`"
msgstr "在 :setting:`INSTLED_APPS` 中，应用程序名称和标签必须是唯一的。"

msgid ""
"Application :attr:`names <django.apps.AppConfig.name>` — the dotted Python "
"path to the application package — must be unique. There is no way to include "
"the same application twice, short of duplicating its code under another name."
msgstr ""
"应用程序 :attr:`名称 <django.apps.AppConfig.name>` ——指向应用程序包的点分隔 "
"Python 路径——必须是唯一的。没有办法将同一个应用程序包含两次，除非用另一个名字"
"复制它的代码。"

msgid ""
"Application :attr:`labels <django.apps.AppConfig.label>` — by default the "
"final part of the name — must be unique too. For example, you can't include "
"both ``django.contrib.auth`` and ``myproject.auth``. However, you can "
"relabel an application with a custom configuration that defines a different :"
"attr:`~django.apps.AppConfig.label`."
msgstr ""
"应用程序 :attr:`标签 <django.apps.AppConfig.label>` ——默认情况下，名称的最后"
"一部分也必须是唯一的。例如，你不能同时包含 ``django.contrib.auth`` 和 "
"``myproject.auth``。但是，你可以用自定义配置重新标注一个应用程序，定义不同"
"的 :attr:`~django.apps.AppConfig.label`。"

msgid ""
"These rules apply regardless of whether :setting:`INSTALLED_APPS` references "
"application configuration classes or application packages."
msgstr ""
"无论 :setting:`INSTALLED_APPS` 引用的是应用程序配置类还是应用包，这些规则都适"
"用。"

msgid ""
"When several applications provide different versions of the same resource "
"(template, static file, management command, translation), the application "
"listed first in :setting:`INSTALLED_APPS` has precedence."
msgstr ""
"当多个应用程序提供同一资源的不同版本（模板、静态文件、管理命令、翻译）时， :"
"setting:`INSTALLED_APPS` 中排在第一位的应用程序具有优先权。"

msgid "``INTERNAL_IPS``"
msgstr "``INTERNAL_IPS``"

msgid "A list of IP addresses, as strings, that:"
msgstr "一个 IP 地址的列表，作为字符串，它："

msgid ""
"Allow the :func:`~django.template.context_processors.debug` context "
"processor to add some variables to the template context."
msgstr ""
"允许 :func:`~django.template.context_processors.debug` 上下文处理器为模板上下"
"文添加一些变量。"

msgid ""
"Can use the :ref:`admindocs bookmarklets <admindocs-bookmarklets>` even if "
"not logged in as a staff user."
msgstr ""
"即使不以员工用户身份登录，也可以使用 :ref:`管理文档书签 <admindocs-"
"bookmarklets>`。"

msgid ""
"Are marked as \"internal\" (as opposed to \"EXTERNAL\") in :class:`~django."
"utils.log.AdminEmailHandler` emails."
msgstr ""
"在 :class:`~django.utils.log.AdminEmailHandler` 邮件中被标记为“internal”（与 "
"“EXTERNAL”相对）。"

msgid "``LANGUAGE_CODE``"
msgstr "``LANGUAGE_CODE``"

msgid "Default: ``'en-us'``"
msgstr "默认： ``'en-us'``"

msgid ""
"A string representing the language code for this installation. This should "
"be in standard :term:`language ID format <language code>`. For example, U.S. "
"English is ``\"en-us\"``. See also the `list of language identifiers`_ and :"
"doc:`/topics/i18n/index`."
msgstr ""
"代表本次安装的语言代码的字符串。这应该是标准的 :term:`language ID 格式 "
"<language code>`。例如，美国英语是 ``\"en-us\"``。也请参见 `语言标识符列表`_ "
"和 :doc:`/topics/i18n/index`。"

msgid ":setting:`USE_I18N` must be active for this setting to have any effect."
msgstr ":setting:`USE_I18N' 必须是激活状态，该配置才会有效果。"

msgid "It serves two purposes:"
msgstr "它有两个作用："

msgid ""
"If the locale middleware isn't in use, it decides which translation is "
"served to all users."
msgstr "如果没有使用 locale 中间件，它决定向所有用户提供哪种翻译。"

msgid ""
"If the locale middleware is active, it provides a fallback language in case "
"the user's preferred language can't be determined or is not supported by the "
"website. It also provides the fallback translation when a translation for a "
"given literal doesn't exist for the user's preferred language."
msgstr ""
"如果 locale 中间件是激活的，它提供了一个后备语言，以防用户的首选语言无法确定"
"或网站不支持。当用户的首选语言不存在给定字词的翻译时，它也会提供后备翻译。"

msgid "See :ref:`how-django-discovers-language-preference` for more details."
msgstr "更多细节请参考 :ref:`how-django-discovers-language-preference`。"

msgid "``LANGUAGE_COOKIE_AGE``"
msgstr "``LANGUAGE_COOKIE_AGE``"

msgid "Default: ``None`` (expires at browser close)"
msgstr "默认： ``None`` （浏览器关闭时失效）"

msgid "The age of the language cookie, in seconds."
msgstr "语言 cookie 的寿命，以秒为单位"

msgid "``LANGUAGE_COOKIE_DOMAIN``"
msgstr "``LANGUAGE_COOKIE_DOMAIN``"

msgid ""
"The domain to use for the language cookie. Set this to a string such as "
"``\"example.com\"`` for cross-domain cookies, or use ``None`` for a standard "
"domain cookie."
msgstr ""
"语言 cookie 使用的域。将其设置为一个字符串，如 ``\"example.com\"`` 用于跨域 "
"cookie，或使用 ``None`` 用于标准域 cookie。"

msgid ""
"Be cautious when updating this setting on a production site. If you update "
"this setting to enable cross-domain cookies on a site that previously used "
"standard domain cookies, existing user cookies that have the old domain will "
"not be updated. This will result in site users being unable to switch the "
"language as long as these cookies persist. The only safe and reliable option "
"to perform the switch is to change the language cookie name permanently (via "
"the :setting:`LANGUAGE_COOKIE_NAME` setting) and to add a middleware that "
"copies the value from the old cookie to a new one and then deletes the old "
"one."
msgstr ""
"在生产型网站上更新此配置时要谨慎。如果你更新此配置，在以前使用标准域 cookie "
"的网站上启用跨域 cookie，则现有的具有旧域的用户 cookie 将不会被更新。这将导致"
"网站用户无法切换语言，只要这些 cookie 持续存在。执行切换的唯一安全可靠的方案"
"是永久更改语言 cookie 名称（通过 :setting:`LANGUAGE_COOKIE_NAME` 设置），并添"
"加一个中间件，将旧 cookie 的值复制到新 cookie 中，然后删除旧 cookie。"

msgid "``LANGUAGE_COOKIE_HTTPONLY``"
msgstr "``LANGUAGE_COOKIE_HTTPONLY``"

msgid ""
"Whether to use ``HttpOnly`` flag on the language cookie. If this is set to "
"``True``, client-side JavaScript will not be able to access the language "
"cookie."
msgstr ""
"是否对语言 cookie 使用 ``HttpOnly`` 标志。如果设置为 ``True``，客户端的 "
"JavaScript 将无法访问语言 cookie。"

msgid "``LANGUAGE_COOKIE_NAME``"
msgstr "``LANGUAGE_COOKIE_NAME``"

msgid "Default: ``'django_language'``"
msgstr "默认： ``'django_language'``"

msgid ""
"The name of the cookie to use for the language cookie. This can be whatever "
"you want (as long as it's different from the other cookie names in your "
"application). See :doc:`/topics/i18n/index`."
msgstr ""
"用于语言 cookie 的 cookie 名称。这可以是任何你想要的（只要它与你的应用程序中"
"的其他 cookie 名称不同）。参见 :doc:`/topics/i18n/index`。"

msgid "``LANGUAGE_COOKIE_PATH``"
msgstr "``LANGUAGE_COOKIE_PATH``"

msgid ""
"The path set on the language cookie. This should either match the URL path "
"of your Django installation or be a parent of that path."
msgstr ""
"语言 cookie 上设置的路径。这个路径应该与你的 Django 安装的 URL 路径相匹配，或"
"者是该路径的父路径。"

msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths and each instance will only "
"see its own language cookie."
msgstr ""
"如果你有多个 Django 实例在同一个主机名下运行，这个功能很有用。他们可以使用不"
"同的 cookie 路径，每个实例只能看到自己的语言 cookie。"

msgid ""
"Be cautious when updating this setting on a production site. If you update "
"this setting to use a deeper path than it previously used, existing user "
"cookies that have the old path will not be updated. This will result in site "
"users being unable to switch the language as long as these cookies persist. "
"The only safe and reliable option to perform the switch is to change the "
"language cookie name permanently (via the :setting:`LANGUAGE_COOKIE_NAME` "
"setting), and to add a middleware that copies the value from the old cookie "
"to a new one and then deletes the one."
msgstr ""
"在生产型网站上更新此配置时要谨慎。如果你更新此配置，使用比以前更深的路径，则"
"现有的用户 cookie 的旧路径将不会被更新。这将导致网站用户无法切换语言，只要这"
"些 cookie 持续存在。执行切换的唯一安全可靠的方案是永久更改语言 cookie 的名称"
"（通过 :setting:`LANGUAGE_COOKIE_NAME` 配置），并添加一个中间件，将旧 cookie "
"的值复制到新的 cookie 中，然后删除这个 cookie。"

msgid "``LANGUAGE_COOKIE_SAMESITE``"
msgstr "``LANGUAGE_COOKIE_SAMESITE``"

msgid ""
"The value of the `SameSite`_ flag on the language cookie. This flag prevents "
"the cookie from being sent in cross-site requests."
msgstr ""
"语言 cookie 上 `SameSite`_ 标志的值。该标志可防止在跨站点请求中发送 cookie。"

msgid "``LANGUAGE_COOKIE_SECURE``"
msgstr "``LANGUAGE_COOKIE_SECURE``"

msgid ""
"Whether to use a secure cookie for the language cookie. If this is set to "
"``True``, the cookie will be marked as \"secure\", which means browsers may "
"ensure that the cookie is only sent under an HTTPS connection."
msgstr ""
"是否对语言 cookie 使用安全 cookie。如果设置为 ``True``，cookie 将被标记为“安"
"全”，这意味着浏览器可以确保 cookie 只在 HTTPS 连接下发送。"

msgid "``LANGUAGES``"
msgstr "``LANGUAGES``"

msgid ""
"Default: A list of all available languages. This list is continually growing "
"and including a copy here would inevitably become rapidly out of date. You "
"can see the current list of translated languages by looking in :source:"
"`django/conf/global_settings.py`."
msgstr ""
"默认值。所有可用语言的清单。这个列表在不断的增加，如果在这里加入一个副本，那"
"么不可避免的会很快过时。你可以在 :source:`django/conf/global_settings.py` 中"
"查看当前的翻译语言列表。"

msgid ""
"The list is a list of two-tuples in the format (:term:`language "
"code<language code>`, ``language name``) -- for example, ``('ja', "
"'Japanese')``. This specifies which languages are available for language "
"selection. See :doc:`/topics/i18n/index`."
msgstr ""
"该列表是一个由两个元组组成的列表，其格式为 (:term:`language code<language "
"code>`, ``language name``) ——例如，``('ja', 'Japanese')``。这指定了哪些语言可"
"以选择。见 :doc:`/topics/i18n/index`。"

msgid ""
"Generally, the default value should suffice. Only set this setting if you "
"want to restrict language selection to a subset of the Django-provided "
"languages."
msgstr ""
"一般来说，默认值就可以了。只有当你想将语言选择限制在 Django 提供的语言子集"
"时，才需要设置此配置。"

msgid ""
"If you define a custom :setting:`LANGUAGES` setting, you can mark the "
"language names as translation strings using the :func:`~django.utils."
"translation.gettext_lazy` function."
msgstr ""
"如果你定义了一个自定义的 :setting:`LANGUAGES` 配置，你可以使用 :func:"
"`~django.utils.translation.gettext_lazy` 函数将语言名称标记为翻译字符串。"

msgid "Here's a sample settings file::"
msgstr "以下是一个示例配置文件："

msgid "``LANGUAGES_BIDI``"
msgstr "``LANGUAGES_BIDI``"

msgid ""
"Default: A list of all language codes that are written right-to-left. You "
"can see the current list of these languages by looking in :source:`django/"
"conf/global_settings.py`."
msgstr ""
"默认值。所有从右到左书写的语言代码的列表。你可以在 :source:`django/conf/"
"global_settings.py` 中查看这些语言的当前列表。"

msgid ""
"The list contains :term:`language codes<language code>` for languages that "
"are written right-to-left."
msgstr "列表中包含 :term:`语言代码 <language code>`，用于从右到左书写的语言。"

msgid ""
"Generally, the default value should suffice. Only set this setting if you "
"want to restrict language selection to a subset of the Django-provided "
"languages. If you define a custom :setting:`LANGUAGES` setting, the list of "
"bidirectional languages may contain language codes which are not enabled on "
"a given site."
msgstr ""
"一般来说，默认值就可以了。只有当你想将语言选择限制在 Django 提供的语言子集"
"时，才设置这个配置。如果你定义了一个自定义的 :setting:`LANGUAGES` 配置，双向"
"语言列表中可能会包含一些在特定网站上没有启用的语言代码。"

msgid "``LOCALE_PATHS``"
msgstr "``LOCALE_PATHS``"

msgid ""
"A list of directories where Django looks for translation files. See :ref:"
"`how-django-discovers-translations`."
msgstr ""
"Django 寻找翻译文件的目录列表。参见 :ref:`how-django-discovers-"
"translations`。"

msgid ""
"Django will look within each of these paths for the ``<locale_code>/"
"LC_MESSAGES`` directories containing the actual translation files."
msgstr ""
"Django 会在这些路径中寻找包含实际翻译文件的 ``<locale_code>/LC_MESSAGES`` 目"
"录。"

msgid "``LOGGING``"
msgstr "``LOGGING``"

msgid "Default: A logging configuration dictionary."
msgstr "默认：日志配置字典。"

msgid ""
"A data structure containing configuration information. When not-empty, the "
"contents of this data structure will be passed as the argument to the "
"configuration method described in :setting:`LOGGING_CONFIG`."
msgstr ""

msgid ""
"Among other things, the default logging configuration passes HTTP 500 server "
"errors to an email log handler when :setting:`DEBUG` is ``False``. See also :"
"ref:`configuring-logging`."
msgstr ""
"其中，当 :setting:`DEBUG` 为 ``False`` 时，默认的日志配置会将 HTTP 500 服务器"
"错误传递给电子邮件日志处理程序。也请参见 :ref:`configuring-logging`。"

msgid ""
"You can see the default logging configuration by looking in :source:`django/"
"utils/log.py`."
msgstr "你可以通过查看 :source:`django/utils/log.py` 中的默认日志配置。"

msgid "``LOGGING_CONFIG``"
msgstr "``LOGGING_CONFIG``"

msgid "Default: ``'logging.config.dictConfig'``"
msgstr "默认： ``'logging.config.dictConfig'``"

msgid ""
"A path to a callable that will be used to configure logging in the Django "
"project. Points at an instance of Python's :ref:`dictConfig <logging-config-"
"dictschema>` configuration method by default."
msgstr ""
"Django 项目中用于配置日志的可调用路径。默认指向 Python 的 :ref:`dictConfig "
"<logging-config-dictschema>` 配置方法的实例。"

msgid ""
"If you set :setting:`LOGGING_CONFIG` to ``None``, the logging configuration "
"process will be skipped."
msgstr "如果将 :setting:`LOGGING_CONFIG` 配置为 ``None``，将跳过日志配置过程。"

msgid "``MANAGERS``"
msgstr "``MANAGERS``"

msgid ""
"A list in the same format as :setting:`ADMINS` that specifies who should get "
"broken link notifications when :class:`~django.middleware.common."
"BrokenLinkEmailsMiddleware` is enabled."
msgstr ""
"一个与 :setting:`ADMINS` 格式相同的列表，用于指定当 :class:`~django."
"middleware.common.BrokenLinkEmailsMiddleware` 被启用时，谁应该收到断链通知。"

msgid "``MEDIA_ROOT``"
msgstr "``MEDIA_ROOT``"

msgid ""
"Absolute filesystem path to the directory that will hold :doc:`user-uploaded "
"files </topics/files>`."
msgstr "保存 :doc:`用户上传的文件 </topics/files>` 目录的绝对文件系统路径。"

msgid "Example: ``\"/var/www/example.com/media/\"``"
msgstr "例如： ``\"/var/www/example.com/media/\"``"

msgid "See also :setting:`MEDIA_URL`."
msgstr "另见 :setting:`MEDIA_URL`。"

msgid ""
":setting:`MEDIA_ROOT` and :setting:`STATIC_ROOT` must have different values. "
"Before :setting:`STATIC_ROOT` was introduced, it was common to rely or "
"fallback on :setting:`MEDIA_ROOT` to also serve static files; however, since "
"this can have serious security implications, there is a validation check to "
"prevent it."
msgstr ""
":setting:`MEDIA_ROOT` 和 :setting:`STATIC_ROOT` 必须有不同的值。在引入 :"
"setting:`STATIC_ROOT` 之前，通常依靠或回溯 :setting:`MEDIA_ROOT` 来提供静态文"
"件；然而，由于这可能会产生严重的安全影响，因此有一个验证检查来防止这种情况。"

msgid "``MEDIA_URL``"
msgstr "``MEDIA_URL``"

msgid ""
"URL that handles the media served from :setting:`MEDIA_ROOT`, used for :doc:"
"`managing stored files </topics/files>`. It must end in a slash if set to a "
"non-empty value. You will need to :ref:`configure these files to be served "
"<serving-uploaded-files-in-development>` in both development and production "
"environments."
msgstr ""
"处理从 :setting:`MEDIA_ROOT` 提供的媒体的 URL，用于 :doc:`管理存储文件 </"
"topics/files>`。如果设置为非空值，则必须以斜线结束。在开发和生产环境中，你都"
"需要 :ref:`配置这些文件被服务 <serving-uploaded-files-in-development>`。"

msgid ""
"If you want to use ``{{ MEDIA_URL }}`` in your templates, add ``'django."
"template.context_processors.media'`` in the ``'context_processors'`` option "
"of :setting:`TEMPLATES`."
msgstr ""
"如果你想在模板中使用 ``{{ MEDIA_URL }}``，在 :setting:`TEMPLATES` 的 "
"``''context_processors'`` 选项中添加 ``'django.template.context_processors."
"media'``。"

msgid "Example: ``\"http://media.example.com/\"``"
msgstr "例如： ``\"http://media.example.com/\"``"

msgid ""
"There are security risks if you are accepting uploaded content from "
"untrusted users! See the security guide's topic on :ref:`user-uploaded-"
"content-security` for mitigation details."
msgstr ""
"如果接收不受信任的用户的上传会有安全隐患， 请阅读 :ref:`user-uploaded-"
"content-security` 获取详情."

msgid ""
":setting:`MEDIA_URL` and :setting:`STATIC_URL` must have different values. "
"See :setting:`MEDIA_ROOT` for more details."
msgstr ""
":setting:`MEDIA_URL` 和 :setting:`STATIC_URL` 必须有不同的值。更多细节请参"
"见 :setting:`MEDIA_ROOT`。"

msgid ""
"If :setting:`MEDIA_URL` is a relative path, then it will be prefixed by the "
"server-provided value of ``SCRIPT_NAME`` (or ``/`` if not set). This makes "
"it easier to serve a Django application in a subpath without adding an extra "
"configuration to the settings."
msgstr ""
"如果 :setting:`MEDIA_URL` 是一个相对路径，那么它将以服务器提供的 "
"``SCRIPT_NAME`` 的值为前缀（如果没有设置，则为 ``/``）。这使得在子路径中服务 "
"Django 应用时更容易，而无需额外增加配置。"

msgid "``MIDDLEWARE``"
msgstr "``MIDDLEWARE``"

msgid "A list of middleware to use. See :doc:`/topics/http/middleware`."
msgstr "要使用的中间件列表。参见 :doc:`/topics/http/middleware`。"

msgid "``MIGRATION_MODULES``"
msgstr "``MIGRATION_MODULES``"

msgid ""
"A dictionary specifying the package where migration modules can be found on "
"a per-app basis. The default value of this setting is an empty dictionary, "
"but the default package name for migration modules is ``migrations``."
msgstr ""
"一个指定包的字典，在每个应用程序的基础上可以找到迁移模块。这个配置的默认值是"
"一个空字典，但迁移模块的默认包名是 ``migrations``。"

msgid ""
"In this case, migrations pertaining to the ``blog`` app will be contained in "
"the ``blog.db_migrations`` package."
msgstr ""
"在这种情况下，与 ``blog`` 应用有关的迁移将包含在 ``blog.db_migrations`` 包"
"中。"

msgid ""
"If you provide the ``app_label`` argument, :djadmin:`makemigrations` will "
"automatically create the package if it doesn't already exist."
msgstr ""
"如果你提供了 ``app_label`` 参数， :djadmin:`makemigrations` 将自动创建包，如"
"果它还不存在。"

msgid ""
"When you supply ``None`` as a value for an app, Django will consider the app "
"as an app without migrations regardless of an existing ``migrations`` "
"submodule. This can be used, for example, in a test settings file to skip "
"migrations while testing (tables will still be created for the apps' "
"models). To disable migrations for all apps during tests, you can set the :"
"setting:`MIGRATE <TEST_MIGRATE>` to ``False`` instead. If "
"``MIGRATION_MODULES`` is used in your general project settings, remember to "
"use the :option:`migrate --run-syncdb` option if you want to create tables "
"for the app."
msgstr ""
"当你为一个应用程序提供 ``None`` 作为一个值时，Django 会将该应用程序视为一个没"
"有迁移的应用程序，而不考虑是否存在 ``migrations`` 子模块。例如，在测试设置文"
"件中，这可以用来在测试时跳过迁移（仍然会为应用程序的模型创建表）。要在测试期"
"间禁止所有应用程序的迁移，你可以将 :setting:`MIGRATE <TEST_MIGRATE>` 设置为 "
"``False``。如果在你的一般项目配置中使用了 ``MIGRATION_MODULES``，如果你想为应"
"用程序创建表，记得使用 :option:`migrate --run-syncdb` 选项。"

msgid "``MONTH_DAY_FORMAT``"
msgstr "``MONTH_DAY_FORMAT``"

msgid "Default: ``'F j'``"
msgstr "默认： ``'F j'``"

msgid ""
"The default formatting to use for date fields on Django admin change-list "
"pages -- and, possibly, by other parts of the system -- in cases when only "
"the month and day are displayed."
msgstr ""
"在 Django admin change-list 页面上的日期字段的默认格式——也可能被系统的其他部"
"分使用——在只显示月份和日期的情况下。"

msgid ""
"For example, when a Django admin change-list page is being filtered by a "
"date drilldown, the header for a given day displays the day and month. "
"Different locales have different formats. For example, U.S. English would "
"say \"January 1,\" whereas Spanish might say \"1 Enero.\""
msgstr ""
"例如，当 Django 管理员的变更列表页面被日期 drilldown 过滤时，给定的一天的标题"
"会显示日期和月份。不同的地域有不同的格式。例如，美国英语会说“January 1”，而西"
"班牙语可能会说“1 Enero”。"

msgid ""
"Note that if :setting:`USE_L10N` is set to ``True``, then the corresponding "
"locale-dictated format has higher precedence and will be applied."
msgstr ""
"请注意，如果 :setting:`USE_L10N` 设置为 ``True``，则相应的本地决定的格式具有"
"更高的优先权，并将被应用。"

msgid ""
"See :tfilter:`allowed date format strings <date>`. See also :setting:"
"`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :"
"setting:`YEAR_MONTH_FORMAT`."
msgstr ""
"查看 :tfilter:`允许的日期格式字符串 <date>`。另见 :setting:`DATE_FORMAT`、:"
"setting:`DATETIME_FORMAT`、:setting:`TIME_FORMAT` 和 :setting:"
"`YEAR_MONTH_FORMAT`。"

msgid "``NUMBER_GROUPING``"
msgstr "``NUMBER_GROUPING``"

msgid "Number of digits grouped together on the integer part of a number."
msgstr "一个数字的整数部分的数字组合在一起的数量。"

msgid ""
"Common use is to display a thousand separator. If this setting is ``0``, "
"then no grouping will be applied to the number. If this setting is greater "
"than ``0``, then :setting:`THOUSAND_SEPARATOR` will be used as the separator "
"between those groups."
msgstr ""
"常见的用途是显示千位数的分隔符。如果该设置为 ``0``，则不会对该数字进行分组。"
"如果这个设置大于 ``0``，那么 :setting:`THOUSAND_SEPARATOR` 将被用作这些组之间"
"的分隔符。"

msgid ""
"Some locales use non-uniform digit grouping, e.g. ``10,00,00,000`` in "
"``en_IN``. For this case, you can provide a sequence with the number of "
"digit group sizes to be applied. The first number defines the size of the "
"group preceding the decimal delimiter, and each number that follows defines "
"the size of preceding groups. If the sequence is terminated with ``-1``, no "
"further grouping is performed. If the sequence terminates with a ``0``, the "
"last group size is used for the remainder of the number."
msgstr ""
"有些地方使用非统一的数字分组，例如 ``en_IN`` 中的 ``10,00,00,000``。对于这种"
"情况，你可以提供一个序列，其中包含要应用的数字组大小。第一个数字定义小数定界"
"符之前的组的大小，后面的每个数字定义前面组的大小。如果序列以 ``-1`` 结束，则"
"不会再进行分组。如果序列以 ``0`` 结束，则在剩余的数字中使用最后一组的大小。"

msgid "Example tuple for ``en_IN``::"
msgstr "``en_IN`` 的元组示例："

msgid ""
"See also :setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and :"
"setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""
"另见 :setting:`DECIMAL_SEPARATOR`、:setting:`THOUSAND_SEPARATOR` 和 :setting:"
"`USE_THOUSAND_SEPARATOR`。"

msgid "``PREPEND_WWW``"
msgstr "``PREPEND_WWW``"

msgid ""
"Whether to prepend the \"www.\" subdomain to URLs that don't have it. This "
"is only used if :class:`~django.middleware.common.CommonMiddleware` is "
"installed (see :doc:`/topics/http/middleware`). See also :setting:"
"`APPEND_SLASH`."
msgstr ""
"是否给没有“www.”子域的 URL 加前缀。只有在安装了 :class:`~django.middleware."
"common.CommonMiddleware` 的情况下才会使用（参见 :doc:`/topics/http/"
"middleware`）。也请参见 :setting:`APPEND_SLASH`。"

msgid "``ROOT_URLCONF``"
msgstr "``ROOT_URLCONF``"

msgid ""
"A string representing the full Python import path to your root URLconf, for "
"example ``\"mydjangoapps.urls\"``. Can be overridden on a per-request basis "
"by setting the attribute ``urlconf`` on the incoming ``HttpRequest`` object. "
"See :ref:`how-django-processes-a-request` for details."
msgstr ""
"一个字符串，代表你的根 URLconf 的完整 Python 导入路径，例如 ``\"mydjangoapps."
"urls\"``。可以通过在传入的 ``HttpRequest`` 对象上设置属性 ``urlconf`` 来覆盖"
"每个请求。详情请参见 :ref:`how-django-processes-a-request`。"

msgid "``SECRET_KEY``"
msgstr "``SECRET_KEY``"

msgid ""
"A secret key for a particular Django installation. This is used to provide :"
"doc:`cryptographic signing </topics/signing>`, and should be set to a "
"unique, unpredictable value."
msgstr ""
"一个特定 Django 安装的密钥。用于提供 :doc:`加密签名 </topics/signing>`，并且"
"应该设置为一个唯一的、不可预测的值。"

msgid ""
":djadmin:`django-admin startproject <startproject>` automatically adds a "
"randomly-generated ``SECRET_KEY`` to each new project."
msgstr ""
":djadmin:`django-admin startproject <startproject>` 自动为每个新项目添加一个"
"随机生成的 ``SECRET_KEY``。"

msgid ""
"Uses of the key shouldn't assume that it's text or bytes. Every use should "
"go through :func:`~django.utils.encoding.force_str` or :func:`~django.utils."
"encoding.force_bytes` to convert it to the desired type."
msgstr ""
"键的使用不应该假设是文本或字节。每次使用都应该通过 :func:`~django.utils."
"encoding.force_str` 或 :func:`~django.utils.encoding.force_bytes` 将其转换为"
"所需类型。"

msgid "Django will refuse to start if :setting:`SECRET_KEY` is not set."
msgstr "如果 :setting:`SECRET_KEY` 没有设置，Django 将拒绝启动。"

msgid "**Keep this value secret.**"
msgstr "**将此值保密。**"

msgid ""
"Running Django with a known :setting:`SECRET_KEY` defeats many of Django's "
"security protections, and can lead to privilege escalation and remote code "
"execution vulnerabilities."
msgstr ""
"在已知的 :setting:`SECRET_KEY` 的情况下运行 Django，会破坏 Django 的许多安全"
"保护措施，并可能导致权限升级和远程代码执行漏洞。"

msgid "The secret key is used for:"
msgstr "密钥用于："

msgid ""
"All :doc:`sessions </topics/http/sessions>` if you are using any other "
"session backend than ``django.contrib.sessions.backends.cache``, or are "
"using the default :meth:`~django.contrib.auth.models.AbstractBaseUser."
"get_session_auth_hash()`."
msgstr ""
"所有 :doc:`会话 </topics/http/sessions>` 如果你使用的是 ``django.contrib."
"session.backends.cache`` 以外的任何其他会话后端，或者使用的是默认的 :meth:"
"`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()`。"

msgid ""
"All :doc:`messages </ref/contrib/messages>` if you are using :class:`~django."
"contrib.messages.storage.cookie.CookieStorage` or :class:`~django.contrib."
"messages.storage.fallback.FallbackStorage`."
msgstr ""
"所有 :doc:`消息 </ref/contrib/messages>`，如果你使用了 :class:`~django."
"contrib.messages.storage.cookie.CookieStorage` 或 :class:`~django.contrib."
"messages.storage.fallback.FallbackStorage`。"

msgid "All :class:`~django.contrib.auth.views.PasswordResetView` tokens."
msgstr "所有 :class:`~django.contrib.auth.views.PasswordResetView` 密钥。"

msgid ""
"Any usage of :doc:`cryptographic signing </topics/signing>`, unless a "
"different key is provided."
msgstr ":doc:`加密签名 </topics/signing>` 的任何使用，除非提供不同的密钥。"

msgid ""
"When a secret key is no longer set as :setting:`SECRET_KEY` or contained "
"within :setting:`SECRET_KEY_FALLBACKS` all of the above will be invalidated. "
"When rotating your secret key, you should move the old key to :setting:"
"`SECRET_KEY_FALLBACKS` temporarily. Secret keys are not used for passwords "
"of users and key rotation will not affect them."
msgstr ""

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` creates a unique ``SECRET_KEY`` for convenience."
msgstr ""
"默认的 :file:`settings.py` 文件由 :djadmin:`django-admin startproject "
"<startproject>` 创建，为方便起见，创建了一个唯一的 ``SECRET_KEY``。"

msgid "``SECRET_KEY_FALLBACKS``"
msgstr ""

msgid "Default: ``[]``"
msgstr ""

msgid ""
"A list of fallback secret keys for a particular Django installation. These "
"are used to allow rotation of the ``SECRET_KEY``."
msgstr ""

msgid ""
"In order to rotate your secret keys, set a new ``SECRET_KEY`` and move the "
"previous value to the beginning of ``SECRET_KEY_FALLBACKS``. Then remove the "
"old values from the end of the ``SECRET_KEY_FALLBACKS`` when you are ready "
"to expire the sessions, password reset tokens, and so on, that make use of "
"them."
msgstr ""

msgid ""
"Signing operations are computationally expensive. Having multiple old key "
"values in ``SECRET_KEY_FALLBACKS`` adds additional overhead to all checks "
"that don't match an earlier key."
msgstr ""

msgid ""
"As such, fallback values should be removed after an appropriate period, "
"allowing for key rotation."
msgstr ""

msgid ""
"Uses of the secret key values shouldn't assume that they are text or bytes. "
"Every use should go through :func:`~django.utils.encoding.force_str` or :"
"func:`~django.utils.encoding.force_bytes` to convert it to the desired type."
msgstr ""

msgid "``SECURE_CONTENT_TYPE_NOSNIFF``"
msgstr "``SECURE_CONTENT_TYPE_NOSNIFF``"

msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` "
"sets the :ref:`x-content-type-options` header on all responses that do not "
"already have it."
msgstr ""
"如果 ``True``，则 :class:`~django.middleware.security.SecurityMiddleware` 会"
"在所有响应中设置 :ref:`x-content-type-options` 头。"

msgid "``SECURE_CROSS_ORIGIN_OPENER_POLICY``"
msgstr "``SECURE_CROSS_ORIGIN_OPENER_POLICY``"

msgid "Default: ``'same-origin'``"
msgstr "默认： ``'same-origin'``"

msgid ""
"Unless set to ``None``, the :class:`~django.middleware.security."
"SecurityMiddleware` sets the :ref:`cross-origin-opener-policy` header on all "
"responses that do not already have it to the value provided."
msgstr ""

msgid "``SECURE_HSTS_INCLUDE_SUBDOMAINS``"
msgstr "``SECURE_HSTS_INCLUDE_SUBDOMAINS``"

msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` "
"adds the ``includeSubDomains`` directive to the :ref:`http-strict-transport-"
"security` header. It has no effect unless :setting:`SECURE_HSTS_SECONDS` is "
"set to a non-zero value."
msgstr ""
"如果 ``True``，则 :class:`~django.middleware.security.SecurityMiddleware` "
"在 :ref:`http-strict-transport-security` 头中添加 ``includeSubDomains`` 指"
"令。除非  :setting:`SECURE_HSTS_SECONDS` 被设置为非零值，否则它没有任何效果。"

msgid ""
"Setting this incorrectly can irreversibly (for the value of :setting:"
"`SECURE_HSTS_SECONDS`) break your site. Read the :ref:`http-strict-transport-"
"security` documentation first."
msgstr ""
"如果设置不正确，可能会不可逆地（对于 :setting:`SECURE_HSTS_SECONDS` 的值）破"
"坏你的网站。请先阅读 :ref:`http-strict-transport-security` 文档。"

msgid "``SECURE_HSTS_PRELOAD``"
msgstr "``SECURE_HSTS_PRELOAD``"

msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` "
"adds the ``preload`` directive to the :ref:`http-strict-transport-security` "
"header. It has no effect unless :setting:`SECURE_HSTS_SECONDS` is set to a "
"non-zero value."
msgstr ""
"如果 ``True``，则 :class:`~django.middleware.security.SecurityMiddleware` "
"在 :ref:`http-strict-transport-security` 头中添加 ``preload`` 指令。除非 :"
"setting:`SECURE_HSTS_SECONDS` 设置为非零值，否则没有效果。"

msgid "``SECURE_HSTS_SECONDS``"
msgstr "``SECURE_HSTS_SECONDS``"

msgid ""
"If set to a non-zero integer value, the :class:`~django.middleware.security."
"SecurityMiddleware` sets the :ref:`http-strict-transport-security` header on "
"all responses that do not already have it."
msgstr ""
"如果设置为非零的整数值，则 :class:`~django.middleware.security."
"SecurityMiddleware` 会对所有尚未设置 :ref:`http-strict-transport-security` 头"
"的响应进行设置。"

msgid ""
"Setting this incorrectly can irreversibly (for some time) break your site. "
"Read the :ref:`http-strict-transport-security` documentation first."
msgstr ""
"不正确的设置可能会不可逆地（在一段时间内）破坏你的网站。请先阅读 :ref:`http-"
"strict-transport-security` 文档。"

msgid "``SECURE_PROXY_SSL_HEADER``"
msgstr "``SECURE_PROXY_SSL_HEADER``"

msgid ""
"A tuple representing an HTTP header/value combination that signifies a "
"request is secure. This controls the behavior of the request object's "
"``is_secure()`` method."
msgstr ""

msgid ""
"By default, ``is_secure()`` determines if a request is secure by confirming "
"that a requested URL uses ``https://``. This method is important for "
"Django's CSRF protection, and it may be used by your own code or third-party "
"apps."
msgstr ""
"默认情况下，``is_secure()`` 通过确认请求的 URL 使用 ``https://`` 来判断请求是"
"否安全。这个方法对 Django 的 CSRF 保护很重要，你自己的代码或第三方应用可能会"
"用到它。"

msgid ""
"If your Django app is behind a proxy, though, the proxy may be "
"\"swallowing\" whether the original request uses HTTPS or not. If there is a "
"non-HTTPS connection between the proxy and Django then ``is_secure()`` would "
"always return ``False`` -- even for requests that were made via HTTPS by the "
"end user. In contrast, if there is an HTTPS connection between the proxy and "
"Django then ``is_secure()`` would always return ``True`` -- even for "
"requests that were made originally via HTTP."
msgstr ""
"如果你的 Django 应用是在代理服务器后面，那么无论原始请求是否使用 HTTPS，代理"
"服务器都可能会“吞噬”。如果代理和 Django 之间有一个非 HTTPS 的连接，那么 "
"``is_secure()`` 总是返回 ``False`` ——即使是终端用户通过 HTTPS 发出的请求。相"
"反，如果代理和 Django 之间有 HTTPS 连接，那么 ``is_secure()`` 将总是返回 "
"``True`` ——即使是对最终用户通过 HTTPS 发出的请求。"

msgid ""
"In this situation, configure your proxy to set a custom HTTP header that "
"tells Django whether the request came in via HTTPS, and set "
"``SECURE_PROXY_SSL_HEADER`` so that Django knows what header to look for."
msgstr ""
"在这种情况下，配置你的代理服务器，设置一个自定义的 HTTP 头，告诉 Django 这个"
"请求是否是通过 HTTPS 进来的，并设置 ``SECURE_PROXY_SSL_HEADER``，这样 Django "
"就知道要找什么头了。"

msgid ""
"Set a tuple with two elements -- the name of the header to look for and the "
"required value. For example::"
msgstr "设置一个包含两个元素的元组——要查找的头的名称和所需的值。例如："

msgid ""
"This tells Django to trust the ``X-Forwarded-Proto`` header that comes from "
"our proxy and that the request is guaranteed to be secure (i.e., it "
"originally came in via HTTPS) when:"
msgstr ""

msgid "the header value is ``'https'``, or"
msgstr ""

msgid ""
"its initial, leftmost value is ``'https'`` in the case of a comma-separated "
"list of protocols (e.g. ``'https,http,http'``)."
msgstr ""

msgid ""
"Support for a comma-separated list of protocols in the header value was "
"added."
msgstr ""

msgid ""
"You should *only* set this setting if you control your proxy or have some "
"other guarantee that it sets/strips this header appropriately."
msgstr ""
"如果你控制了你的代理或者有其他的保证，你应该 *只* 设置这个配置，它可以适当地"
"设置／剥离这个头。"

msgid ""
"Note that the header needs to be in the format as used by ``request.META`` "
"-- all caps and likely starting with ``HTTP_``. (Remember, Django "
"automatically adds ``'HTTP_'`` to the start of x-header names before making "
"the header available in ``request.META``.)"
msgstr ""
"需要注意的是，头的格式需要和 ``request.META`` 使用的格式一样——全大写，并且可"
"能以 ``HTTP_`` 开头。（记住，Django 会在 x-header 名称的开头自动加上 "
"``'HTTP_'``，然后才会在 ``request.META`` 中使用。）"

msgid ""
"**Modifying this setting can compromise your site's security. Ensure you "
"fully understand your setup before changing it.**"
msgstr ""
"**修改此设置可能会危及你网站的安全。在更改之前，请确保你完全了解你的配置。**"

msgid ""
"Make sure ALL of the following are true before setting this (assuming the "
"values from the example above):"
msgstr "在设置之前，请确保以下所有内容为真（假设上面例子中的数值）。"

msgid "Your Django app is behind a proxy."
msgstr "你的 Django 应用在代理服务器后面。"

msgid ""
"Your proxy strips the ``X-Forwarded-Proto`` header from all incoming "
"requests, even when it contains a comma-separated list of protocols. In "
"other words, if end users include that header in their requests, the proxy "
"will discard it."
msgstr ""

msgid ""
"Your proxy sets the ``X-Forwarded-Proto`` header and sends it to Django, but "
"only for requests that originally come in via HTTPS."
msgstr ""
"你的代理设置了 ``X-Forwarded-Proto`` 头，并将其发送给 Django，但只针对最初通"
"过 HTTPS 进来的请求。"

msgid ""
"If any of those are not true, you should keep this setting set to ``None`` "
"and find another way of determining HTTPS, perhaps via custom middleware."
msgstr ""
"如果其中任何一个不是真的，你应该将这个配置设置为 ``None``，并找到另一种确定 "
"HTTPS 的方法，也许是通过自定义中间件。"

msgid "``SECURE_REDIRECT_EXEMPT``"
msgstr "``SECURE_REDIRECT_EXEMPT``"

msgid ""
"If a URL path matches a regular expression in this list, the request will "
"not be redirected to HTTPS. The :class:`~django.middleware.security."
"SecurityMiddleware` strips leading slashes from URL paths, so patterns "
"shouldn't include them, e.g. ``SECURE_REDIRECT_EXEMPT = [r'^no-ssl/$', …]``. "
"If :setting:`SECURE_SSL_REDIRECT` is ``False``, this setting has no effect."
msgstr ""
"如果一个 URL 路径与这个列表中的正则表达式相匹配，那么请求将不会被重定向到 "
"HTTPS。:class:`~django.middleware.security.SecurityMiddleware` 会从 URL 路径"
"中去掉前导斜杠，所以模式不应该包含它们，例如 ``SECURE_REDIRECT_EXEMPT = "
"[r'^no-ssl/$', ...]``。如果 :setting:`SECURE_SSL_REDIRECT` 是 ``False``，这个"
"配置就没有效果。"

msgid "``SECURE_REFERRER_POLICY``"
msgstr "``SECURE_REFERRER_POLICY``"

msgid ""
"If configured, the :class:`~django.middleware.security.SecurityMiddleware` "
"sets the :ref:`referrer-policy` header on all responses that do not already "
"have it to the value provided."
msgstr ""
"如果设置了 :class:`~django.middleware.security.SecurityMiddleware`，则会在所"
"有响应中设置 :ref:`referrer-policy`头，如果还没有该头，则将其设置为提供的值。"

msgid "``SECURE_SSL_HOST``"
msgstr "``SECURE_SSL_HOST``"

msgid ""
"If a string (e.g. ``secure.example.com``), all SSL redirects will be "
"directed to this host rather than the originally-requested host (e.g. ``www."
"example.com``). If :setting:`SECURE_SSL_REDIRECT` is ``False``, this setting "
"has no effect."
msgstr ""
"如果是一个字符串（如 ``secure.example.com``），所有 SSL 重定向都将指向这个主"
"机，而不是最初请求的主机（如 ``www.example.com``）。如果 :setting:"
"`SECURE_SSL_REDIRECT` 为 ``False``，则该配置没有效果。"

msgid "``SECURE_SSL_REDIRECT``"
msgstr "``SECURE_SSL_REDIRECT``"

msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` :"
"ref:`redirects <ssl-redirect>` all non-HTTPS requests to HTTPS (except for "
"those URLs matching a regular expression listed in :setting:"
"`SECURE_REDIRECT_EXEMPT`)."
msgstr ""
"如果 ``True``，则 :class:`~django.middleware.security.SecurityMiddleware` :"
"ref:`重定向 <ssl-redirect>` 所有非 HTTPS 的请求都会转为 HTTPS（除了那些匹配 :"
"setting:`SECURE_REDIRECT_EXEMPT` 中所列正则表达式的 URL）。"

msgid ""
"If turning this to ``True`` causes infinite redirects, it probably means "
"your site is running behind a proxy and can't tell which requests are secure "
"and which are not. Your proxy likely sets a header to indicate secure "
"requests; you can correct the problem by finding out what that header is and "
"configuring the :setting:`SECURE_PROXY_SSL_HEADER` setting accordingly."
msgstr ""
"如果将此设置为 ``True`` 会导致无限重定向，这可能意味着你的网站是在代理服务器"
"后面运行的，并且无法判断哪些请求是安全的，哪些不是。你的代理服务器可能会设置"
"一个头来指示安全请求；你可以通过找出该头并相应地配置 :setting:"
"`SECURE_PROXY_SSL_HEADER` 设置来纠正这个问题。"

msgid "``SERIALIZATION_MODULES``"
msgstr "``SERIALIZATION_MODULES``"

msgid ""
"A dictionary of modules containing serializer definitions (provided as "
"strings), keyed by a string identifier for that serialization type. For "
"example, to define a YAML serializer, use::"
msgstr ""
"一个包含序列化器定义（以字符串形式提供）的模块字典，以该序列化类型的字符串标"
"识符为键。例如，要定义一个 YAML 序列化器，使用："

msgid "``SERVER_EMAIL``"
msgstr "``SERVER_EMAIL``"

msgid "Default: ``'root@localhost'``"
msgstr "默认： ``'root@localhost'``"

msgid ""
"The email address that error messages come from, such as those sent to :"
"setting:`ADMINS` and :setting:`MANAGERS`."
msgstr ""
"错误信息来自的电子邮件地址，例如发送到 :setting:`ADMINS` 和 :setting:"
"`MANAGERS` 的邮件。"

msgid "Why are my emails sent from a different address?"
msgstr "为什么我的邮件从不同的地址发送？"

msgid ""
"This address is used only for error messages. It is *not* the address that "
"regular email messages sent with :meth:`~django.core.mail.send_mail()` come "
"from; for that, see :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""
"这个地址只用于错误信息。它 *不是* 用 :meth:`~django.core.mail.send_mail()` 发"
"送普通邮件的地址；关于这个地址，请看 :setting:`DEFAULT_FROM_EMAIL`。"

msgid "``SHORT_DATE_FORMAT``"
msgstr "``SHORT_DATE_FORMAT``"

msgid "Default: ``'m/d/Y'`` (e.g. ``12/31/2003``)"
msgstr "默认 ：``'m/d/Y'`` （例如 ``12/31/2003``）"

msgid ""
"An available formatting that can be used for displaying date fields on "
"templates. Note that if :setting:`USE_L10N` is set to ``True``, then the "
"corresponding locale-dictated format has higher precedence and will be "
"applied. See :tfilter:`allowed date format strings <date>`."
msgstr ""
"可用于在模板上显示日期字段的可用格式。请注意，如果 :setting:`USE_L10N` 被设置"
"为 ``True``，那么相应的本地决定的格式具有更高的优先权，并将被应用。参见 :"
"tfilter:`允许的日期格式字符串 <date>`。"

msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`."
msgstr "另见 :setting:`DATE_FORMAT` 和 :setting:`SHORT_DATETIME_FORMAT`。"

msgid "``SHORT_DATETIME_FORMAT``"
msgstr "``SHORT_DATETIME_FORMAT``"

msgid "Default: ``'m/d/Y P'`` (e.g. ``12/31/2003 4 p.m.``)"
msgstr "默认： ``'m/d/Y P'`` （例如 ``12/31/2003 4 p.m.``）"

msgid ""
"An available formatting that can be used for displaying datetime fields on "
"templates. Note that if :setting:`USE_L10N` is set to ``True``, then the "
"corresponding locale-dictated format has higher precedence and will be "
"applied. See :tfilter:`allowed date format strings <date>`."
msgstr ""
"可用于在模板上显示日期时间字段的可用格式。请注意，如果 :setting:`USE_L10N` 被"
"设置为 ``True``，那么相应的本地决定的格式具有更高的优先级，并将被应用。参见 :"
"tfilter:`允许的日期格式字符串 <date>`。"

msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATE_FORMAT`."
msgstr "另见 :setting:`DATE_FORMAT` 和 :setting:`SHORT_DATE_FORMAT`。"

msgid "``SIGNING_BACKEND``"
msgstr "``SIGNING_BACKEND``"

msgid "Default: ``'django.core.signing.TimestampSigner'``"
msgstr "默认： ``'django.core.signing.TimestampSigner'``"

msgid "The backend used for signing cookies and other data."
msgstr "用于签署 cookie 和其他数据的后端。"

msgid "See also the :doc:`/topics/signing` documentation."
msgstr "另见 :doc:`/topics/signing` 文档。"

msgid "``SILENCED_SYSTEM_CHECKS``"
msgstr "``SILENCED_SYSTEM_CHECKS``"

msgid ""
"A list of identifiers of messages generated by the system check framework (i."
"e. ``[\"models.W001\"]``) that you wish to permanently acknowledge and "
"ignore. Silenced checks will not be output to the console."
msgstr ""
"你希望永久获取和忽略的系统检查框架生成的消息标识符列表（即 ``[\"models."
"W001\"]``）。静默检查不会被输出到控制台。"

msgid "See also the :doc:`/ref/checks` documentation."
msgstr "另见 :doc:`/ref/checks` 文档。"

msgid "``STORAGES``"
msgstr ""

msgid ""
"A dictionary containing the settings for all storages to be used with "
"Django. It is a nested dictionary whose contents map a storage alias to a "
"dictionary containing the options for an individual storage."
msgstr ""

msgid ""
"Storages can have any alias you choose. However, there are two aliases with "
"special significance:"
msgstr ""

msgid ""
"``default`` for :doc:`managing files </topics/files>`. ``'``:class:`django."
"core.files.storage.FileSystemStorage`\\ ``'`` is the default storage engine."
msgstr ""

msgid ""
"``staticfiles`` for :doc:`managing static files </ref/contrib/staticfiles>`. "
"``'``:class:`django.contrib.staticfiles.storage.StaticFilesStorage`\\ ``'`` "
"is the default storage engine."
msgstr ""

msgid ""
"The following is an example ``settings.py`` snippet defining a custom file "
"storage called ``example``::"
msgstr ""

msgid ""
"``OPTIONS`` are passed to the ``BACKEND`` on initialization in ``**kwargs``."
msgstr ""

msgid ""
"A ready-to-use instance of the storage backends can be retrieved from :data:"
"`django.core.files.storage.storages`. Use a key corresponding to the backend "
"definition in :setting:`STORAGES`."
msgstr ""

msgid "Is my value merged with the default value?"
msgstr ""

msgid ""
"Defining this setting overrides the default value and is *not* merged with "
"it."
msgstr ""

msgid "``TEMPLATES``"
msgstr "``TEMPLATES``"

msgid ""
"A list containing the settings for all template engines to be used with "
"Django. Each item of the list is a dictionary containing the options for an "
"individual engine."
msgstr ""
"一个包含所有 Django 模板引擎的配置的列表。列表中的每一项都是一个字典，包含了"
"各个引擎的选项。"

msgid ""
"Here's a setup that tells the Django template engine to load templates from "
"the ``templates`` subdirectory inside each installed application::"
msgstr ""
"下面是一个配置，告诉 Django 模板引擎从每个安装好的应用程序中的 ``templates`` "
"子目录中加载模板："

msgid "The following options are available for all backends."
msgstr "以下选项适用于所有后端。"

msgid "The template backend to use. The built-in template backends are:"
msgstr "要使用的模板后端。内置的模板后端有："

msgid "``'django.template.backends.django.DjangoTemplates'``"
msgstr "``'django.template.backends.django.DjangoTemplates'``"

msgid "``'django.template.backends.jinja2.Jinja2'``"
msgstr "``'django.template.backends.jinja2.Jinja2'``"

msgid ""
"You can use a template backend that doesn't ship with Django by setting "
"``BACKEND`` to a fully-qualified path (i.e. ``'mypackage.whatever."
"Backend'``)."
msgstr ""
"你可以通过将 ``BACKEND`` 设置为一个完全限定的路径（例如 ``'mypackage."
"whatever.Backend'``）来使用一个不在 Django 中的模板后端。"

msgid "Default: see below"
msgstr "默认：见下方"

msgid ""
"The alias for this particular template engine. It's an identifier that "
"allows selecting an engine for rendering. Aliases must be unique across all "
"configured template engines."
msgstr ""
"这个特定模板引擎的别称。它是一个标识符，允许选择一个引擎进行渲染。所有配置的"
"模板引擎的别名必须是唯一的。"

msgid ""
"It defaults to the name of the module defining the engine class, i.e. the "
"next to last piece of :setting:`BACKEND <TEMPLATES-BACKEND>`, when it isn't "
"provided. For example if the backend is ``'mypackage.whatever.Backend'`` "
"then its default name is ``'whatever'``."
msgstr ""
"它默认为定义引擎类的模块名称，即 :setting:`BACKEND <TEMPLATES-BACKEND>` 的下"
"一个到最后一个，如果没有提供的话。例如，如果后端是 ``'mypackage.whatever."
"Backend'``，那么它的默认名称是 ``'whatever'``。"

msgid "``DIRS``"
msgstr "``DIRS``"

msgid ""
"Directories where the engine should look for template source files, in "
"search order."
msgstr "按照搜索顺序，引擎应该查找模板源文件的目录。"

msgid "``APP_DIRS``"
msgstr "``APP_DIRS``"

msgid ""
"Whether the engine should look for template source files inside installed "
"applications."
msgstr "引擎是否应该在已安装的应用程序中查找模板源文件。"

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` sets ``'APP_DIRS': True``."
msgstr ""
"默认的 :file:`settings.py` 文件由 :djadmin:`django-admin startproject "
"<startproject>` 创建，设置 ``'APP_DIRS': True``。"

msgid "Default: ``{}`` (Empty dict)"
msgstr "默认值： ``{}`` （空字典）"

msgid ""
"Extra parameters to pass to the template backend. Available parameters vary "
"depending on the template backend. See :class:`~django.template.backends."
"django.DjangoTemplates` and :class:`~django.template.backends.jinja2.Jinja2` "
"for the options of the built-in backends."
msgstr ""
"要传递给模板后台的额外参数。根据模板后端的不同，可用的参数也不同。参见 :"
"class:`~django.template.backends.django.DjangoTemplates` 和 :class:`~django."
"template.backends.jinja2.Jinja2` 了解内置后端的选项。"

msgid "``TEST_RUNNER``"
msgstr "``TEST_RUNNER``"

msgid "Default: ``'django.test.runner.DiscoverRunner'``"
msgstr "默认： ``'django.test.runner.DiscoverRunner'``"

msgid ""
"The name of the class to use for starting the test suite. See :ref:`other-"
"testing-frameworks`."
msgstr "用于启动测试套件的类的名称。参见 :ref:`other-testing-frameworks`。"

msgid "``TEST_NON_SERIALIZED_APPS``"
msgstr "``TEST_NON_SERIALIZED_APPS``"

msgid ""
"In order to restore the database state between tests for "
"``TransactionTestCase``\\s and database backends without transactions, "
"Django will :ref:`serialize the contents of all apps <test-case-serialized-"
"rollback>` when it starts the test run so it can then reload from that copy "
"before running tests that need it."
msgstr ""
"为了在 ``TransactionTestCase`` 和没有事务的数据库后端测试之间恢复数据库状态，"
"Django 在启动测试运行时，会 :ref:`序列化所有应用的内容 <test-case-serialized-"
"rollback>`，这样就可以在运行需要的测试之前，从该副本重新加载。"

msgid ""
"This slows down the startup time of the test runner; if you have apps that "
"you know don't need this feature, you can add their full names in here (e.g. "
"``'django.contrib.contenttypes'``) to exclude them from this serialization "
"process."
msgstr ""
"这将减慢测试运行器的启动时间；如果你有一些应用程序不需要这个功能，你可以在这"
"里添加它们的全名（例如 ``'django.contrib.contenttypes'``），将它们从这个序列"
"化过程中排除。"

msgid "``THOUSAND_SEPARATOR``"
msgstr "``THOUSAND_SEPARATOR``"

msgid "Default: ``','`` (Comma)"
msgstr "默认： ``','`` （英文逗号）"

msgid ""
"Default thousand separator used when formatting numbers. This setting is "
"used only when :setting:`USE_THOUSAND_SEPARATOR` is ``True`` and :setting:"
"`NUMBER_GROUPING` is greater than ``0``."
msgstr ""
"格式化数字时使用的默认千位分隔符。只有当 :setting:`USE_THOUSAND_SEPARATOR` "
"为 ``True`` 和 :setting:`NUMBER_GROUPING` 大于 ``0`` 时，才使用此配置。"

msgid ""
"See also :setting:`NUMBER_GROUPING`, :setting:`DECIMAL_SEPARATOR` and :"
"setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""
"另见 :setting:`NUMBER_GROUPING`、:setting:`DECIMAL_SEPARATOR` 和 :setting:"
"`USE_THOUSAND_SEPARATOR`。"

msgid "``TIME_FORMAT``"
msgstr "``TIME_FORMAT``"

msgid "Default: ``'P'`` (e.g. ``4 p.m.``)"
msgstr "默认： ``'P'`` （例如 ``4 p.m.``）"

msgid ""
"The default formatting to use for displaying time fields in any part of the "
"system. Note that if :setting:`USE_L10N` is set to ``True``, then the locale-"
"dictated format has higher precedence and will be applied instead. See :"
"tfilter:`allowed date format strings <date>`."
msgstr ""
"在系统的任何部分显示时间字段时使用的默认格式。请注意，如果 :setting:"
"`USE_L10N` 被设置为 ``True``，那么本地决定的格式具有更高的优先权，并将被应"
"用。参见 :tfilter:`允许的日期格式字符串 <date>`。"

msgid "See also :setting:`DATE_FORMAT` and :setting:`DATETIME_FORMAT`."
msgstr "另见 :setting:`DATE_FORMAT` 和 :setting:`DATETIME_FORMAT`。"

msgid "``TIME_INPUT_FORMATS``"
msgstr "``TIME_INPUT_FORMATS``"

msgid ""
"A list of formats that will be accepted when inputting data on a time field. "
"Formats will be tried in order, using the first valid one. Note that these "
"format strings use Python's :ref:`datetime module syntax <strftime-strptime-"
"behavior>`, not the format strings from the :tfilter:`date` template filter."
msgstr ""
"在时间字段上输入数据时可接受的格式列表。格式将按顺序被尝试，使用第一个有效的"
"格式。注意这些格式字符串使用 Python 的 :ref:`datetime 模块语法 <strftime-"
"strptime-behavior>`，而不是来自 :tfilter:`date` 模板过滤器的格式字符串。"

msgid ""
"See also :setting:`DATE_INPUT_FORMATS` and :setting:`DATETIME_INPUT_FORMATS`."
msgstr ""
"另见 :setting:`DATE_INPUT_FORMATS` 和 :setting:`DATETIME_INPUT_FORMATS`。"

msgid "Default: ``'America/Chicago'``"
msgstr "默认： ``'America/Chicago'``"

msgid ""
"A string representing the time zone for this installation. See the `list of "
"time zones`_."
msgstr "表示本次安装的时区的字符串。参见 `时区列表`_ 。"

msgid ""
"Since Django was first released with the :setting:`TIME_ZONE` set to "
"``'America/Chicago'``, the global setting (used if nothing is defined in "
"your project's ``settings.py``) remains ``'America/Chicago'`` for backwards "
"compatibility. New project templates default to ``'UTC'``."
msgstr ""
"自从 Django 首次发布时， :setting:`TIME_ZONE` 设置为 ``'America/Chicago'``，"
"为了向后兼容，全局配置（如果你的项目 ``settings.py`` 中没有定义任何内容，则使"
"用全局配置）仍为 ``'America/Chicago'``。新项目模板默认为 ``'UTC'``。"

msgid ""
"Note that this isn't necessarily the time zone of the server. For example, "
"one server may serve multiple Django-powered sites, each with a separate "
"time zone setting."
msgstr ""
"注意，这不一定是服务器的时区。例如，一个服务器可能服务于多个 Django 网站，每"
"个网站都有单独的时区配置。"

msgid ""
"When :setting:`USE_TZ` is ``False``, this is the time zone in which Django "
"will store all datetimes. When :setting:`USE_TZ` is ``True``, this is the "
"default time zone that Django will use to display datetimes in templates and "
"to interpret datetimes entered in forms."
msgstr ""
"当 :setting:`USE_TZ` 为 ``False`` 时，这是 Django 存储所有日期时间的时区。"
"当 :setting:`USE_TZ` 为 ``True`` 时，这是 Django 在模板中显示日期时间和解释表"
"单中输入的日期时间的默认时区。"

msgid ""
"On Unix environments (where :func:`time.tzset` is implemented), Django sets "
"the ``os.environ['TZ']`` variable to the time zone you specify in the :"
"setting:`TIME_ZONE` setting. Thus, all your views and models will "
"automatically operate in this time zone. However, Django won't set the "
"``TZ`` environment variable if you're using the manual configuration option "
"as described in :ref:`manually configuring settings <settings-without-django-"
"settings-module>`. If Django doesn't set the ``TZ`` environment variable, "
"it's up to you to ensure your processes are running in the correct "
"environment."
msgstr ""
"在 Unix 环境下（实现了 :func:`time.tzset`），Django 将 ``os.environ['TZ']`` "
"变量设置为你在 :setting:`TIME_ZONE` 配置中指定的时区。这样，你所有的视图和模"
"型都会自动在这个时区运行。但是，如果你使用的是 :ref:`手动设置配置 <settings-"
"without-django-settings-module>` 中描述的手动配置选项，Django 就不会设置 "
"``TZ`` 环境变量。如果 Django 没有设置 ``TZ`` 环境变量，那么就需要你确保你的进"
"程运行在正确的环境中。"

msgid ""
"Django cannot reliably use alternate time zones in a Windows environment. If "
"you're running Django on Windows, :setting:`TIME_ZONE` must be set to match "
"the system time zone."
msgstr ""
"Django 无法在 Windows 环境下可靠地使用交替时区。如果你在 Windows 上运行 "
"Django， :setting:`TIME_ZONE` 必须设置为与系统时区匹配。"

msgid "``USE_DEPRECATED_PYTZ``"
msgstr "``USE_DEPRECATED_PYTZ``"

msgid ""
"A boolean that specifies whether to use ``pytz``, rather than :mod:"
"`zoneinfo`, as the default time zone implementation."
msgstr ""

msgid ""
"This transitional setting is deprecated. Support for using ``pytz`` will be "
"removed in Django 5.0."
msgstr ""

msgid "``USE_I18N``"
msgstr "``USE_I18N``"

msgid ""
"A boolean that specifies whether Django's translation system should be "
"enabled. This provides a way to turn it off, for performance. If this is set "
"to ``False``, Django will make some optimizations so as not to load the "
"translation machinery."
msgstr ""
"一个布尔值，用于指定是否应该启用 Django 的翻译系统。这提供了一个关闭翻译系统"
"的方法，以保证性能。如果设置为 ``False``，Django 会进行一些优化，以避免加载翻"
"译机制。"

msgid ""
"See also :setting:`LANGUAGE_CODE`, :setting:`USE_L10N` and :setting:`USE_TZ`."
msgstr ""
"另见 :setting:`LANGUAGE_CODE'、 :setting:`USE_L10N` 和 :setting:`USE_TZ'。"

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes ``USE_I18N = True`` for convenience."
msgstr ""
"默认的 :file:`settings.py` 文件由 :djadmin:`django-admin startproject "
"<startproject>` 创建，包括方便起见 ``USE_I18N = True``。"

msgid "``USE_L10N``"
msgstr "``USE_L10N``"

msgid ""
"A boolean that specifies if localized formatting of data will be enabled by "
"default or not. If this is set to ``True``, e.g. Django will display numbers "
"and dates using the format of the current locale."
msgstr ""
"一个布尔值，用于指定是否默认启用数据的本地化格式。如果设置为 ``True``，例如，"
"Django 将使用当前语言的格式来显示数字和日期。"

msgid ""
"See also :setting:`LANGUAGE_CODE`, :setting:`USE_I18N` and :setting:`USE_TZ`."
msgstr ""
"另见 :setting:`LANGUAGE_CODE`、:setting:`USE_I18N` 和 :setting:`USE_TZ`。"

msgid ""
"This setting is deprecated. Starting with Django 5.0, localized formatting "
"of data will always be enabled. For example Django will display numbers and "
"dates using the format of the current locale."
msgstr ""

msgid "``USE_THOUSAND_SEPARATOR``"
msgstr "``USE_THOUSAND_SEPARATOR``"

msgid ""
"A boolean that specifies whether to display numbers using a thousand "
"separator. When set to ``True`` and :setting:`USE_L10N` is also ``True``, "
"Django will format numbers using the :setting:`NUMBER_GROUPING` and :setting:"
"`THOUSAND_SEPARATOR` settings. The latter two settings may also be dictated "
"by the locale, which takes precedence."
msgstr ""

msgid ""
"See also :setting:`DECIMAL_SEPARATOR`, :setting:`NUMBER_GROUPING` and :"
"setting:`THOUSAND_SEPARATOR`."
msgstr ""
"另见 :setting:`DECIMAL_SEPARATOR`、:setting:`NUMBER_GROUPING` 和 :setting:"
"`THOUSAND_SEPARATOR`。"

msgid "``USE_TZ``"
msgstr "``USE_TZ``"

msgid ""
"In Django 5.0, the default value will change from ``False`` to ``True``."
msgstr "在 Django 5.0 中，默认值将从``False`` 更改为``True``。"

msgid ""
"A boolean that specifies if datetimes will be timezone-aware by default or "
"not. If this is set to ``True``, Django will use timezone-aware datetimes "
"internally."
msgstr ""
"一个布尔值，用于指定 Django 是否默认使用时区感知。如果设置为 ``True``，"
"Django 将在内部使用时区感知的日期。"

msgid ""
"When ``USE_TZ`` is False, Django will use naive datetimes in local time, "
"except when parsing ISO 8601 formatted strings, where timezone information "
"will always be retained if present."
msgstr ""
"当 ``USE_TZ`` 为 False 时，Django 将使用本地时间的本地日期，除非在解析 ISO "
"8601 格式的字符串时，如果存在时区信息，则会一直保留。"

msgid ""
"See also :setting:`TIME_ZONE`, :setting:`USE_I18N` and :setting:`USE_L10N`."
msgstr ""
"另见 :setting:`TIME_ZONE`、:setting:`USE_I18N` 和 :setting:`USE_L10N`。"

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes ``USE_TZ = True`` for convenience."
msgstr ""
"默认的 :file:`settings.py` 文件由 :djadmin:`django-admin startproject "
"<startproject>` 创建，包括方便起见 ``USE_TZ = True``。"

msgid "``USE_X_FORWARDED_HOST``"
msgstr "``USE_X_FORWARDED_HOST``"

msgid ""
"A boolean that specifies whether to use the ``X-Forwarded-Host`` header in "
"preference to the ``Host`` header. This should only be enabled if a proxy "
"which sets this header is in use."
msgstr ""
"一个布尔值，用于指定是否使用 ``X-Forwarded-Host`` 头，而不是 ``Host`` 头。只"
"有在使用设置该头的代理时才应启用。"

msgid ""
"This setting takes priority over :setting:`USE_X_FORWARDED_PORT`. Per :rfc:"
"`7239#section-5.3`, the ``X-Forwarded-Host`` header can include the port "
"number, in which case you shouldn't use :setting:`USE_X_FORWARDED_PORT`."
msgstr ""
"此设置优先于 :setting:`USE_X_FORWARDED_PORT`。根据 :rfc:`7239#section-5.3`，"
"``X-Forwarded-Host`` 头可以包括端口号，在这种情况下，你不应该使用 :setting:"
"`USE_X_FORWARDED_PORT`。"

msgid "``USE_X_FORWARDED_PORT``"
msgstr "``USE_X_FORWARDED_PORT``"

msgid ""
"A boolean that specifies whether to use the ``X-Forwarded-Port`` header in "
"preference to the ``SERVER_PORT`` ``META`` variable. This should only be "
"enabled if a proxy which sets this header is in use."
msgstr ""
"一个布尔值，用于指定是否使用 ``X-Forwarded-Port`` 头，而不是 "
"``SERVER_PORT``META`` 变量。只有在使用设置该头的代理时，才应启用。"

msgid ":setting:`USE_X_FORWARDED_HOST` takes priority over this setting."
msgstr ":setting:`USE_X_FORWARDED_HOST` 优先于此配置。"

msgid "``WSGI_APPLICATION``"
msgstr "``WSGI_APPLICATION``"

msgid ""
"The full Python path of the WSGI application object that Django's built-in "
"servers (e.g. :djadmin:`runserver`) will use. The :djadmin:`django-admin "
"startproject <startproject>` management command will create a standard "
"``wsgi.py`` file with an ``application`` callable in it, and point this "
"setting to that ``application``."
msgstr ""
"Django 内置服务器（如 :djadmin:`runserver`）将使用的 WSGI 应用对象的完整 "
"Python 路径。:djadmin:`django-admin startproject <startproject>` 管理命令将创"
"建一个标准的 ``wsgi.py`` 文件，其中有一个 ``application`` 可调用，并将此配置"
"指向该 ``application``。"

msgid ""
"If not set, the return value of ``django.core.wsgi.get_wsgi_application()`` "
"will be used. In this case, the behavior of :djadmin:`runserver` will be "
"identical to previous Django versions."
msgstr ""
"如果没有设置，将使用 ``django.core.wsgi.get_wsgi_application()`` 的返回值。在"
"这种情况下， :djadmin:`runserver` 的行为将与之前的 Django 版本相同。"

msgid "``YEAR_MONTH_FORMAT``"
msgstr "``YEAR_MONTH_FORMAT``"

msgid "Default: ``'F Y'``"
msgstr "默认： ``'F Y'``"

msgid ""
"The default formatting to use for date fields on Django admin change-list "
"pages -- and, possibly, by other parts of the system -- in cases when only "
"the year and month are displayed."
msgstr ""
"在 Django admin change-list 页面中，当只显示年和月的时候，默认的日期字段的格"
"式也可能被系统的其他部分使用。"

msgid ""
"For example, when a Django admin change-list page is being filtered by a "
"date drilldown, the header for a given month displays the month and the "
"year. Different locales have different formats. For example, U.S. English "
"would say \"January 2006,\" whereas another locale might say \"2006/January."
"\""
msgstr ""
"例如，当 Django 管理员的变更列表页面被日期 drilldown 过滤时，给定月份的头显示"
"月份和年份。不同的地域有不同的格式。例如，美国英语会说“January 2006”，而另一"
"个地方语言可能会说 “2006/January”。"

msgid ""
"See :tfilter:`allowed date format strings <date>`. See also :setting:"
"`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :"
"setting:`MONTH_DAY_FORMAT`."
msgstr ""
"查看 :tfilter:`允许的日期格式字符串 <date>`。另见 :setting:`DATE_FORMAT`、:"
"setting:`DATETIME_FORMAT`、:setting:`TIME_FORMAT` 和 :setting:"
"`MONTH_DAY_FORMAT`。"

msgid "``X_FRAME_OPTIONS``"
msgstr "``X_FRAME_OPTIONS``"

msgid "Default: ``'DENY'``"
msgstr "默认： ``'DENY'``"

msgid ""
"The default value for the X-Frame-Options header used by :class:`~django."
"middleware.clickjacking.XFrameOptionsMiddleware`. See the :doc:`clickjacking "
"protection </ref/clickjacking/>` documentation."
msgstr ""
":class:`~django.middleware.clickjacking.XFrameOptionsMiddleware` 使用的 X- "
"Frame-Options 头的默认值。参见 :doc:`点击劫持保护 </ref/clickjacking/>` 文"
"档。"

msgid "Auth"
msgstr "认证"

msgid "Settings for :mod:`django.contrib.auth`."
msgstr ":mod:`django.contrib.auth` 的配置。"

msgid "``AUTHENTICATION_BACKENDS``"
msgstr "``AUTHENTICATION_BACKENDS``"

msgid "Default: ``['django.contrib.auth.backends.ModelBackend']``"
msgstr "默认： ``['django.contrib.auth.backends.ModelBackend']``"

msgid ""
"A list of authentication backend classes (as strings) to use when attempting "
"to authenticate a user. See the :ref:`authentication backends documentation "
"<authentication-backends>` for details."
msgstr ""
"当试图认证用户时，要使用的认证后端类（字符串）列表。详情请参见 :ref:`认证后端"
"文档 <authentication-backends>`。"

msgid "``AUTH_USER_MODEL``"
msgstr "``AUTH_USER_MODEL``"

msgid "Default: ``'auth.User'``"
msgstr "默认： ``'auth.User'``"

msgid "The model to use to represent a User. See :ref:`auth-custom-user`."
msgstr "用来表示用户的模型。见 :ref:`auth-custom-user`。"

msgid ""
"You cannot change the AUTH_USER_MODEL setting during the lifetime of a "
"project (i.e. once you have made and migrated models that depend on it) "
"without serious effort. It is intended to be set at the project start, and "
"the model it refers to must be available in the first migration of the app "
"that it lives in. See :ref:`auth-custom-user` for more details."
msgstr ""
"在项目的生命周期内（即一旦你制作并迁移了依赖它的模型），你无法不费吹灰之力地"
"更改 AUTH_USER_MODEL 配置。它的目的是在项目开始时设置，并且它所引用的模型必须"
"在它所在的应用程序的第一次迁移中可用。详见 :ref:`auth-custom-user`。"

msgid "``LOGIN_REDIRECT_URL``"
msgstr "``LOGIN_REDIRECT_URL``"

msgid "Default: ``'/accounts/profile/'``"
msgstr "默认： ``'/accounts/profile/'``"

msgid ""
"The URL or :ref:`named URL pattern <naming-url-patterns>` where requests are "
"redirected after login when the :class:`~django.contrib.auth.views."
"LoginView` doesn't get a ``next`` GET parameter."
msgstr ""
"当 :class:`~django.contrib.auth.views.LoginView` 没有得到 ``next`` GET 参数"
"时，登录后请求被重定向的 URL 或 :ref:`命名 URL 模式 <naming-url-patterns>`。"

msgid "``LOGIN_URL``"
msgstr "``LOGIN_URL``"

msgid "Default: ``'/accounts/login/'``"
msgstr "默认： ``'/accounts/login/'``"

msgid ""
"The URL or :ref:`named URL pattern <naming-url-patterns>` where requests are "
"redirected for login when using the :func:`~django.contrib.auth.decorators."
"login_required` decorator, :class:`~django.contrib.auth.mixins."
"LoginRequiredMixin`, or :class:`~django.contrib.auth.mixins.AccessMixin`."
msgstr ""
"当使用 :func:`~django.contrib.auth.decorators.login_required` 装饰器、:class:"
"`~django.contrib.auth.mixins.LoginRequiredMixin` 或 :class:`~django.contrib."
"auth.mixins.AccessMixin` 时，重定向请求登录的 URL 或 :ref:`命名 URL 模式 "
"<naming-url-patterns>`。"

msgid "``LOGOUT_REDIRECT_URL``"
msgstr "``LOGOUT_REDIRECT_URL``"

msgid ""
"The URL or :ref:`named URL pattern <naming-url-patterns>` where requests are "
"redirected after logout if :class:`~django.contrib.auth.views.LogoutView` "
"doesn't have a ``next_page`` attribute."
msgstr ""
"如果 :class:`~django.contrib.auth.views.LogoutView` 没有 ``next_page`` 属性，"
"则注销后重定向请求的 URL 或 :ref:`命名 URL 模式 <naming-url-patterns>`。"

msgid ""
"If ``None``, no redirect will be performed and the logout view will be "
"rendered."
msgstr "如果 ``None``，将不执行重定向，并显示注销视图。"

msgid "``PASSWORD_RESET_TIMEOUT``"
msgstr "``PASSWORD_RESET_TIMEOUT``"

msgid "Default: ``259200`` (3 days, in seconds)"
msgstr "默认： ``259200`` （3 天，以秒为单位）"

msgid "The number of seconds a password reset link is valid for."
msgstr "密码重置链接的有效秒数。"

msgid ""
"Used by the :class:`~django.contrib.auth.views.PasswordResetConfirmView`."
msgstr "由 :class:`~django.contrib.auth.views.PasswordResetConfirmView` 使用。"

msgid ""
"Reducing the value of this timeout doesn't make any difference to the "
"ability of an attacker to brute-force a password reset token. Tokens are "
"designed to be safe from brute-forcing without any timeout."
msgstr ""
"减少这个超时的值并不会对攻击者强行重置密码令牌的能力产生任何影响。令牌的设计"
"是安全的，不需要任何超时。"

msgid ""
"This timeout exists to protect against some unlikely attack scenarios, such "
"as someone gaining access to email archives that may contain old, unused "
"password reset tokens."
msgstr ""
"这个超时时间的存在，是为了防止一些不太可能发生的攻击情况，比如有人访问可能包"
"含旧的、未使用的密码重置令牌的电子邮件档案。"

msgid "``PASSWORD_HASHERS``"
msgstr "``PASSWORD_HASHERS``"

msgid "See :ref:`auth_password_storage`."
msgstr "查看 :ref:`auth_password_storage`。"

msgid "``AUTH_PASSWORD_VALIDATORS``"
msgstr "``AUTH_PASSWORD_VALIDATORS``"

msgid ""
"The list of validators that are used to check the strength of user's "
"passwords. See :ref:`password-validation` for more details. By default, no "
"validation is performed and all passwords are accepted."
msgstr ""
"用于检查用户密码强度的验证器列表。更多细节请参见 :ref:`password-validation`。"
"默认情况下，不执行验证，所有密码都被接受。"

msgid "Messages"
msgstr "消息"

msgid "Settings for :mod:`django.contrib.messages`."
msgstr ":mod:`django.contrib.messages` 的配置。"

msgid "``MESSAGE_LEVEL``"
msgstr "``MESSAGE_LEVEL``"

msgid "Default: ``messages.INFO``"
msgstr "默认： ``messages.INFO``"

msgid ""
"Sets the minimum message level that will be recorded by the messages "
"framework. See :ref:`message levels <message-level>` for more details."
msgstr ""
"设置消息框架将记录的最小消息级别。详见 :ref:`消息级别 <message-level>`。"

msgid "Avoiding circular imports"
msgstr ""

msgid ""
"If you override ``MESSAGE_LEVEL`` in your settings file and rely on any of "
"the built-in constants, you must import the constants module directly to "
"avoid the potential for circular imports, e.g.::"
msgstr ""
"如果你在配置文件中覆盖了 ``MESSAGE_LEVEL``，并依赖任何内置的常量，你必须直接"
"导入常量模块以避免循环导入的可能性，例如："

msgid ""
"If desired, you may specify the numeric values for the constants directly "
"according to the values in the above :ref:`constants table <message-level-"
"constants>`."
msgstr ""
"如果需要，可以直接根据上面 :ref:`常量表 <message-level-constants>` 中的数值来"
"指定常量的数值。"

msgid "``MESSAGE_STORAGE``"
msgstr "``MESSAGE_STORAGE``"

msgid "Default: ``'django.contrib.messages.storage.fallback.FallbackStorage'``"
msgstr "默认： ``'django.contrib.messages.storage.fallback.FallbackStorage'``"

msgid "Controls where Django stores message data. Valid values are:"
msgstr "控制 Django 存储消息数据的地方。有效值是："

msgid "``'django.contrib.messages.storage.fallback.FallbackStorage'``"
msgstr "``'django.contrib.messages.storage.fallback.FallbackStorage'``"

msgid "``'django.contrib.messages.storage.session.SessionStorage'``"
msgstr "``'django.contrib.messages.storage.session.SessionStorage'``"

msgid "``'django.contrib.messages.storage.cookie.CookieStorage'``"
msgstr "``'django.contrib.messages.storage.cookie.CookieStorage'``"

msgid ""
"See :ref:`message storage backends <message-storage-backends>` for more "
"details."
msgstr "详见 :ref:`消息储存后端 <message-storage-backends>`。"

msgid ""
"The backends that use cookies -- :class:`~django.contrib.messages.storage."
"cookie.CookieStorage` and :class:`~django.contrib.messages.storage.fallback."
"FallbackStorage` -- use the value of :setting:`SESSION_COOKIE_DOMAIN`, :"
"setting:`SESSION_COOKIE_SECURE` and :setting:`SESSION_COOKIE_HTTPONLY` when "
"setting their cookies."
msgstr ""
"使用 cookie 的后端—— :class:`~django.contrib.messages.storage.cookie."
"CookieStorage` 和 :class:`~django.contrib.messages.storage.fallback."
"FallbackStorage` ——在设置它们的 cookie 时，使用 :setting:"
"`SESSION_COOKIE_DOMAIN`、:setting:`SESSION_COOKIE_SECURE` 和 :setting:"
"`SESSION_COOKIE_HTTPONLY` 的值。"

msgid "``MESSAGE_TAGS``"
msgstr "``MESSAGE_TAGS``"

msgid ""
"This sets the mapping of message level to message tag, which is typically "
"rendered as a CSS class in HTML. If you specify a value, it will extend the "
"default. This means you only have to specify those values which you need to "
"override. See :ref:`message-displaying` above for more details."
msgstr ""
"这设置了消息级别到消息标签的映射，通常在 HTML 中以 CSS 类的形式呈现。如果你指"
"定了一个值，它将扩展默认值。这意味着你只需要指定那些你需要覆盖的值。更多细节"
"请参考上面的 :ref:`message-displaying`。"

msgid ""
"If you override ``MESSAGE_TAGS`` in your settings file and rely on any of "
"the built-in constants, you must import the ``constants`` module directly to "
"avoid the potential for circular imports, e.g.::"
msgstr ""
"如果你在配置文件中覆盖了 ``MESSAGE_TAGS``，并依赖任何内置的常量，你必须直接导"
"入 ``constants`` 模块，以避免循环导入的可能性，例如："

msgid "Sessions"
msgstr "会话"

msgid "Settings for :mod:`django.contrib.sessions`."
msgstr ":mod:`django.contrib.sessions` 的配置。"

msgid "``SESSION_CACHE_ALIAS``"
msgstr "``SESSION_CACHE_ALIAS``"

msgid ""
"If you're using :ref:`cache-based session storage <cached-sessions-"
"backend>`, this selects the cache to use."
msgstr ""
"如果你使用的是 :ref:`基于缓存的会话存储 <cached-sessions-backend>`，这将选择"
"要使用的缓存。"

msgid "``SESSION_COOKIE_AGE``"
msgstr "``SESSION_COOKIE_AGE``"

msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr "默认： ``1209600`` （2 周，以秒为单位）"

msgid "The age of session cookies, in seconds."
msgstr "会话 cookie 的寿命，以秒为单位。"

msgid "``SESSION_COOKIE_DOMAIN``"
msgstr "``SESSION_COOKIE_DOMAIN``"

msgid ""
"The domain to use for session cookies. Set this to a string such as "
"``\"example.com\"`` for cross-domain cookies, or use ``None`` for a standard "
"domain cookie."
msgstr ""
"用于会话 cookie 的域。将其设置为一个字符串，如 ``\"example.com\"``，用于跨域 "
"cookie，或使用 ``None`` 用于标准域 cookie。"

msgid ""
"To use cross-domain cookies with :setting:`CSRF_USE_SESSIONS`, you must "
"include a leading dot (e.g. ``\".example.com\"``) to accommodate the CSRF "
"middleware's referer checking."
msgstr ""
"要使用带有 :setting:`CSRF_USE_SESSIONS` 的跨域 cookie，你必须包括一个前导点"
"（例如 ``\".example.com\"``），以适应 CSRF 中间件的引用检查。"

msgid ""
"Be cautious when updating this setting on a production site. If you update "
"this setting to enable cross-domain cookies on a site that previously used "
"standard domain cookies, existing user cookies will be set to the old "
"domain. This may result in them being unable to log in as long as these "
"cookies persist."
msgstr ""
"在生产型网站上更新此配置时要谨慎。如果你更新此配置，在以前使用标准域 cookie "
"的网站上启用跨域 cookie，现有用户 cookie 将被设置为旧域。这可能导致他们无法登"
"录，只要这些 cookie 持续存在。"

msgid ""
"This setting also affects cookies set by :mod:`django.contrib.messages`."
msgstr "这个配置也会影响到 :mod:`django.contrib.messages` 所设置的 cookies。"

msgid "``SESSION_COOKIE_HTTPONLY``"
msgstr "``SESSION_COOKIE_HTTPONLY``"

msgid ""
"Whether to use ``HttpOnly`` flag on the session cookie. If this is set to "
"``True``, client-side JavaScript will not be able to access the session "
"cookie."
msgstr ""
"是否对会话 cookie 使用 ``HttpOnly`` 标志。如果设置为 ``True``，客户端的 "
"JavaScript 将无法访问会话 cookie。"

msgid ""
"HttpOnly_ is a flag included in a Set-Cookie HTTP response header. It's part "
"of the :rfc:`6265#section-4.1.2.6` standard for cookies and can be a useful "
"way to mitigate the risk of a client-side script accessing the protected "
"cookie data."
msgstr ""
"HttpOnly_ 是包含在 Set-Cookie HTTP 响应头中的一个标志。它是 :rfc:"
"`6265#section-4.1.2.6` 标准中 Cookie 的一部分，可以作为一种有用的方式来降低客"
"户端脚本访问受保护 Cookie 数据的风险。"

msgid ""
"This makes it less trivial for an attacker to escalate a cross-site "
"scripting vulnerability into full hijacking of a user's session. There "
"aren't many good reasons for turning this off. Your code shouldn't read "
"session cookies from JavaScript."
msgstr ""
"这使得攻击者将跨站脚本漏洞升级为完全劫持用户的会话变得不那么简单。关闭这个功"
"能的理由不多。你的代码不应该从 JavaScript 中读取会话 cookies。"

msgid "``SESSION_COOKIE_NAME``"
msgstr "``SESSION_COOKIE_NAME``"

msgid "Default: ``'sessionid'``"
msgstr "默认： ``'sessionid'``"

msgid ""
"The name of the cookie to use for sessions. This can be whatever you want "
"(as long as it's different from the other cookie names in your application)."
msgstr ""
"用于会话的 cookie 的名称。这可以是任何你想要的（只要它与你的应用程序中的其他 "
"cookie 名称不同）。"

msgid "``SESSION_COOKIE_PATH``"
msgstr "``SESSION_COOKIE_PATH``"

msgid ""
"The path set on the session cookie. This should either match the URL path of "
"your Django installation or be parent of that path."
msgstr ""
"会话 cookie 上设置的路径。这个路径应该与你的 Django 安装的 URL 路径相匹配，或"
"者是该路径的父路径。"

msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths, and each instance will only "
"see its own session cookie."
msgstr ""
"如果你有多个 Django 实例在同一个主机名下运行，这个功能很有用。他们可以使用不"
"同的 cookie 路径，而且每个实例只能看到自己的会话 cookie。"

msgid "``SESSION_COOKIE_SAMESITE``"
msgstr "``SESSION_COOKIE_SAMESITE``"

msgid ""
"The value of the `SameSite`_ flag on the session cookie. This flag prevents "
"the cookie from being sent in cross-site requests thus preventing CSRF "
"attacks and making some methods of stealing session cookie impossible."
msgstr ""
"会话 cookie 上的 `SameSite`_ 标志的值。这个标志可以防止 cookie 在跨站请求中被"
"发送，从而防止 CSRF 攻击，使一些窃取会话 cookie 的方法变得不可能。"

msgid "Possible values for the setting are:"
msgstr "该配置的可能值为："

msgid ""
"``'Strict'``: prevents the cookie from being sent by the browser to the "
"target site in all cross-site browsing context, even when following a "
"regular link."
msgstr ""
"``'Strict'`` ：防止浏览器在所有跨站点浏览的情况下向目标站点发送 cookie，即使"
"在使用常规链接时也是如此。"

msgid ""
"For example, for a GitHub-like website this would mean that if a logged-in "
"user follows a link to a private GitHub project posted on a corporate "
"discussion forum or email, GitHub will not receive the session cookie and "
"the user won't be able to access the project. A bank website, however, most "
"likely doesn't want to allow any transactional pages to be linked from "
"external sites so the ``'Strict'`` flag would be appropriate."
msgstr ""
"例如，对于类似 GitHub 的网站来说，这意味着如果登录的用户通过企业论坛或电子邮"
"件链接到 GitHub 的私人项目，GitHub 将不会收到会话 cookie，用户将无法访问该项"
"目。然而，银行网站很可能不允许从外部网站链接任何交易页面，因此 ``'Strict'`` "
"标志将是合适的。"

msgid ""
"``'Lax'`` (default): provides a balance between security and usability for "
"websites that want to maintain user's logged-in session after the user "
"arrives from an external link."
msgstr ""
"``'Lax'`` （默认）：为希望在用户从外部链接到达后保持用户登录会话的网站提供安"
"全和可用性之间的平衡。"

msgid ""
"In the GitHub scenario, the session cookie would be allowed when following a "
"regular link from an external website and be blocked in CSRF-prone request "
"methods (e.g. ``POST``)."
msgstr ""
"在 GitHub 的场景下，当跟随外部网站的常规链接时，会话 cookie 将被允许，而在 "
"CSRF 倾向的请求方法（例如 ``POST``）中被阻止。"

msgid ""
"``'None'`` (string): the session cookie will be sent with all same-site and "
"cross-site requests."
msgstr "``'None'`` （字符串）：会话 cookie 将随所有同站和跨站请求发送。"

msgid "``False``: disables the flag."
msgstr "``False`` ：停用该标志。"

msgid ""
"Modern browsers provide a more secure default policy for the ``SameSite`` "
"flag and will assume ``Lax`` for cookies without an explicit value set."
msgstr ""
"现代浏览器为 ``SameSite`` 标志提供了一个更安全的默认策略，并将假定 ``Lax`` 为"
"没有明确配置值的 cookies。"

msgid "``SESSION_COOKIE_SECURE``"
msgstr "``SESSION_COOKIE_SECURE``"

msgid ""
"Whether to use a secure cookie for the session cookie. If this is set to "
"``True``, the cookie will be marked as \"secure\", which means browsers may "
"ensure that the cookie is only sent under an HTTPS connection."
msgstr ""
"是否对会话 cookie 使用安全 cookie。如果设置为 ``True``，cookie 将被标记为“安"
"全”，这意味着浏览器可以确保 cookie 只在 HTTPS 连接下发送。"

msgid ""
"Leaving this setting off isn't a good idea because an attacker could capture "
"an unencrypted session cookie with a packet sniffer and use the cookie to "
"hijack the user's session."
msgstr ""
"关闭这个配置并不是一个好主意，因为攻击者可以用数据包嗅探器捕获一个未加密的会"
"话 cookie，并使用 cookie 来劫持用户的会话"

msgid "``SESSION_ENGINE``"
msgstr "``SESSION_ENGINE``"

msgid "Default: ``'django.contrib.sessions.backends.db'``"
msgstr "默认： ``'django.contrib.sessions.backends.db'``"

msgid "Controls where Django stores session data. Included engines are:"
msgstr "控制 Django 存储会话数据的地方。包括的引擎有："

msgid "``'django.contrib.sessions.backends.db'``"
msgstr "``'django.contrib.sessions.backends.db'``"

msgid "``'django.contrib.sessions.backends.file'``"
msgstr "``'django.contrib.sessions.backends.file'``"

msgid "``'django.contrib.sessions.backends.cache'``"
msgstr "``'django.contrib.sessions.backends.cache'``"

msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr "``'django.contrib.sessions.backends.cached_db'``"

msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr "``'django.contrib.sessions.backends.signed_cookies'``"

msgid "See :ref:`configuring-sessions` for more details."
msgstr "详见 :ref:`configuring-sessions`。"

msgid "``SESSION_EXPIRE_AT_BROWSER_CLOSE``"
msgstr "``SESSION_EXPIRE_AT_BROWSER_CLOSE``"

msgid ""
"Whether to expire the session when the user closes their browser. See :ref:"
"`browser-length-vs-persistent-sessions`."
msgstr ""
"是否在用户关闭浏览器时结束会话。参见 :ref:`browser-length-vs-persistent-"
"sessions`。"

msgid "``SESSION_FILE_PATH``"
msgstr "``SESSION_FILE_PATH``"

msgid ""
"If you're using file-based session storage, this sets the directory in which "
"Django will store session data. When the default value (``None``) is used, "
"Django will use the standard temporary directory for the system."
msgstr ""
"如果你使用的是基于文件的会话存储，那么这个选项设置了 Django 存储会话数据的目"
"录，当使用默认值（``None``）时，Django 将使用系统的标准临时目录。"

msgid "``SESSION_SAVE_EVERY_REQUEST``"
msgstr "``SESSION_SAVE_EVERY_REQUEST``"

msgid ""
"Whether to save the session data on every request. If this is ``False`` "
"(default), then the session data will only be saved if it has been modified "
"-- that is, if any of its dictionary values have been assigned or deleted. "
"Empty sessions won't be created, even if this setting is active."
msgstr ""
"是否在每次请求时保存会话数据。如果这个配置是 ``False`` （默认），那么会话数据"
"只有在被修改时才会被保存，也就是说，如果它的任何字典值被分配或删除，那么会话"
"数据就会被保存。即使这个配置是活动的，也不会创建空会话。"

msgid "``SESSION_SERIALIZER``"
msgstr "``SESSION_SERIALIZER``"

msgid "Default: ``'django.contrib.sessions.serializers.JSONSerializer'``"
msgstr "默认： ``'django.contrib.sessions.serializers.JSONSerializer'``"

msgid ""
"Full import path of a serializer class to use for serializing session data. "
"Included serializer is:"
msgstr ""

msgid "``'django.contrib.sessions.serializers.JSONSerializer'``"
msgstr "``'django.contrib.sessions.serializers.JSONSerializer'``"

msgid "See :ref:`session_serialization` for details."
msgstr "参见 :ref:`session_serialization`。"

msgid "Sites"
msgstr "站点"

msgid "Settings for :mod:`django.contrib.sites`."
msgstr ":mod:`django.contrib.sites` 的配置。"

msgid "``SITE_ID``"
msgstr "``SITE_ID``"

msgid ""
"The ID, as an integer, of the current site in the ``django_site`` database "
"table. This is used so that application data can hook into specific sites "
"and a single database can manage content for multiple sites."
msgstr ""
"当前网站在 ``django_site`` 数据库表中的 ID，为整数。这样，应用数据就可以挂到"
"特定的站点上，一个数据库可以管理多个站点的内容。"

msgid "Static Files"
msgstr "静态文件"

msgid "Settings for :mod:`django.contrib.staticfiles`."
msgstr ":mod:`django.contrib.staticfiles` 的配置。"

msgid "``STATIC_ROOT``"
msgstr "``STATIC_ROOT``"

msgid ""
"The absolute path to the directory where :djadmin:`collectstatic` will "
"collect static files for deployment."
msgstr ":djadmin:`collectstatic` 将收集静态文件进行部署的目录的绝对路径。"

msgid "Example: ``\"/var/www/example.com/static/\"``"
msgstr "例如： ``\"/var/www/example.com/static/\"``"

msgid ""
"If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled "
"(as in the default project template), the :djadmin:`collectstatic` "
"management command will collect static files into this directory. See the "
"how-to on :doc:`managing static files</howto/static-files/index>` for more "
"details about usage."
msgstr ""
"如果 :doc:`staticfiles </ref/contrib/staticfiles>` contrib 应用已启用（如在默"
"认的项目模板中）， :djadmin:`collectstatic` 管理命令将收集静态文件到这个目"
"录。更多使用方法请参见 :doc:`管理静态文件 </howto/static-files/index>` 的操作"
"指南。"

msgid ""
"This should be an initially empty destination directory for collecting your "
"static files from their permanent locations into one directory for ease of "
"deployment; it is **not** a place to store your static files permanently. "
"You should do that in directories that will be found by :doc:`staticfiles</"
"ref/contrib/staticfiles>`’s :setting:`finders<STATICFILES_FINDERS>`, which "
"by default, are ``'static/'`` app sub-directories and any directories you "
"include in :setting:`STATICFILES_DIRS`)."
msgstr ""
"这应该是一个初始为空的目标目录，用于将你的静态文件从其永久位置收集到一个目录"
"中，以方便部署；它 **不是** 永久存储静态文件的地方。你应该在那些会被 :doc:`静"
"态文件 </ref/contrib/staticfiles>` 的 :setting:`finders "
"<STATICFILES_FINDERS>` 找到的目录中进行，默认情况下，这些目录是 "
"``'static/'`` 应用子目录和你在 :setting:`STATICFILES_DIRS` 中包含的任何目录。"

msgid "``STATIC_URL``"
msgstr "``STATIC_URL``"

msgid ""
"URL to use when referring to static files located in :setting:`STATIC_ROOT`."
msgstr "引用位于 :setting:`STATIC_ROOT` 中的静态文件时要使用的 URL。"

msgid "Example: ``\"static/\"`` or ``\"http://static.example.com/\"``"
msgstr ""

msgid ""
"If not ``None``, this will be used as the base path for :ref:`asset "
"definitions<form-asset-paths>` (the ``Media`` class) and the :doc:"
"`staticfiles app</ref/contrib/staticfiles>`."
msgstr ""
"如果不是 ``None``，这将被用作 :ref:`资源定义 <form-asset-paths>` （``Media`` "
"类）和 :doc:`静态文件应用 </ref/contrib/staticfiles>` 的基本路径。"

msgid "It must end in a slash if set to a non-empty value."
msgstr "如果设置为非空值，必须以斜线结束。"

msgid ""
"You may need to :ref:`configure these files to be served in development "
"<serving-static-files-in-development>` and will definitely need to do so :"
"doc:`in production </howto/static-files/deployment>`."
msgstr ""
"你可能需要 :ref:`在开发中服务这些文件 <serving-static-files-in-"
"development>`，在 :doc:`生产中 </howto/static-files/deployment>` 肯定需要这样"
"做。"

msgid ""
"If :setting:`STATIC_URL` is a relative path, then it will be prefixed by the "
"server-provided value of ``SCRIPT_NAME`` (or ``/`` if not set). This makes "
"it easier to serve a Django application in a subpath without adding an extra "
"configuration to the settings."
msgstr ""
"如果 :setting:`STATIC_URL` 是一个相对路径，那么它将以服务器提供的 "
"``SCRIPT_NAME`` 的值为前缀（如果没有设置，则为 ``/``）。这使得在子路径中服务 "
"Django 应用时更容易，而无需在增加额外的配置。"

msgid "``STATICFILES_DIRS``"
msgstr "``STATICFILES_DIRS``"

msgid ""
"This setting defines the additional locations the staticfiles app will "
"traverse if the ``FileSystemFinder`` finder is enabled, e.g. if you use the :"
"djadmin:`collectstatic` or :djadmin:`findstatic` management command or use "
"the static file serving view."
msgstr ""
"这个配置定义了静态文件应用在启用 ``FileSystemFinder`` 查找器时将穿越的额外位"
"置，例如，如果你使用 :djadmin:`collectstatic` 或 :djadmin:`findstatic` 管理命"
"令或使用静态文件服务视图。"

msgid ""
"This should be set to a list of strings that contain full paths to your "
"additional files directory(ies) e.g.::"
msgstr "这应该被设置为包含附加文件目录完整路径的字符串列表，例如："

msgid ""
"Note that these paths should use Unix-style forward slashes, even on Windows "
"(e.g. ``\"C:/Users/user/mysite/extra_static_content\"``)."
msgstr ""
"请注意，这些路径应该使用 Unix 风格的斜线，即使在 Windows 上也是如此（例如 "
"``\"C:/Users/user/mysite/extra_static_content\"``）。"

msgid "Prefixes (optional)"
msgstr "前缀（可选）"

msgid ""
"In case you want to refer to files in one of the locations with an "
"additional namespace, you can **optionally** provide a prefix as ``(prefix, "
"path)`` tuples, e.g.::"
msgstr ""
"如果你想用一个额外的命名空间来引用其中一个位置的文件，你可以 **可选的** 提供"
"一个前缀作为 ``(prefix, path)`` 的元组，例如："

msgid ""
"For example, assuming you have :setting:`STATIC_URL` set to ``'static/'``, "
"the :djadmin:`collectstatic` management command would collect the \"stats\" "
"files in a ``'downloads'`` subdirectory of :setting:`STATIC_ROOT`."
msgstr ""

msgid ""
"This would allow you to refer to the local file ``'/opt/webfiles/stats/"
"polls_20101022.tar.gz'`` with ``'/static/downloads/polls_20101022.tar.gz'`` "
"in your templates, e.g.:"
msgstr ""
"这将允许你在你的模板中用 ``'/static/downloads/polls_20101022.tar.gz'`` 引用本"
"地文件 ``'/opt/webfiles/stats/polls_20101022.tar.gz'``，例如："

msgid "``STATICFILES_STORAGE``"
msgstr "``STATICFILES_STORAGE``"

msgid "Default: ``'django.contrib.staticfiles.storage.StaticFilesStorage'``"
msgstr "默认： ``'django.contrib.staticfiles.storage.StaticFilesStorage'``"

msgid ""
"The file storage engine to use when collecting static files with the :"
"djadmin:`collectstatic` management command."
msgstr ""
"使用 :djadmin:`collectstatic` 管理命令收集静态文件时要使用的文件存储引擎。"

msgid ""
"A ready-to-use instance of the storage backend defined in this setting can "
"be found under ``staticfiles`` key in ``django.core.files.storage.storages``."
msgstr ""

msgid "For an example, see :ref:`staticfiles-from-cdn`."
msgstr "例如，参见 :ref:`staticfiles-from-cdn`。"

msgid ""
"This setting is deprecated. Starting with Django 4.2, static files storage "
"engine can be configured with the :setting:`STORAGES` setting under the "
"``staticfiles`` key."
msgstr ""

msgid "``STATICFILES_FINDERS``"
msgstr "``STATICFILES_FINDERS``"

msgid ""
"The list of finder backends that know how to find static files in various "
"locations."
msgstr "知道如何找到不同位置的静态文件的查找器后端列表。"

msgid ""
"The default will find files stored in the :setting:`STATICFILES_DIRS` "
"setting (using ``django.contrib.staticfiles.finders.FileSystemFinder``) and "
"in a ``static`` subdirectory of each app (using ``django.contrib.staticfiles."
"finders.AppDirectoriesFinder``). If multiple files with the same name are "
"present, the first file that is found will be used."
msgstr ""
"默认情况下，将查找存储在 :setting:`STATICFILES_DIRS` 配置中的文件（使用 "
"``django.contrib.staticfiles.finders.FileSystemFinder``）和每个应用程序的 "
"``static`` 子目录中的文件（使用 ``django.contrib.staticfiles.finders."
"AppDirectoriesFinder``）。如果存在多个同名文件，将使用第一个找到的文件。"

msgid ""
"One finder is disabled by default: ``django.contrib.staticfiles.finders."
"DefaultStorageFinder``. If added to your :setting:`STATICFILES_FINDERS` "
"setting, it will look for static files in the default file storage as "
"defined by the ``default`` key in the :setting:`STORAGES` setting."
msgstr ""

msgid ""
"When using the ``AppDirectoriesFinder`` finder, make sure your apps can be "
"found by staticfiles by adding the app to the :setting:`INSTALLED_APPS` "
"setting of your site."
msgstr ""
"当使用 ``AppDirectoriesFinder`` 查找器时，通过将应用添加到你的网站的 :"
"setting:`INSTALLED_APPS` 配置中，确保你的应用程序可以通过 staticfiles 找到。"

msgid ""
"Static file finders are currently considered a private interface, and this "
"interface is thus undocumented."
msgstr "静态文件查找器目前被认为是一个私有接口，因此这个接口是没有文档的。"

msgid "Core Settings Topical Index"
msgstr "核心配置专题索引"

msgid "Cache"
msgstr "缓存"

msgid ":setting:`CACHES`"
msgstr ":setting:`CACHES`"

msgid ":setting:`CACHE_MIDDLEWARE_ALIAS`"
msgstr ":setting:`CACHE_MIDDLEWARE_ALIAS`"

msgid ":setting:`CACHE_MIDDLEWARE_KEY_PREFIX`"
msgstr ":setting:`CACHE_MIDDLEWARE_KEY_PREFIX`"

msgid ":setting:`CACHE_MIDDLEWARE_SECONDS`"
msgstr ":setting:`CACHE_MIDDLEWARE_SECONDS`"

msgid ":setting:`DATABASES`"
msgstr ":setting:`DATABASES`"

msgid ":setting:`DATABASE_ROUTERS`"
msgstr ":setting:`DATABASE_ROUTERS`"

msgid ":setting:`DEFAULT_INDEX_TABLESPACE`"
msgstr ":setting:`DEFAULT_INDEX_TABLESPACE`"

msgid ":setting:`DEFAULT_TABLESPACE`"
msgstr ":setting:`DEFAULT_TABLESPACE`"

msgid "Debugging"
msgstr "调试"

msgid ":setting:`DEBUG`"
msgstr ":setting:`DEBUG`"

msgid ":setting:`DEBUG_PROPAGATE_EXCEPTIONS`"
msgstr ":setting:`DEBUG_PROPAGATE_EXCEPTIONS`"

msgid "Email"
msgstr "电子邮件"

msgid ":setting:`ADMINS`"
msgstr ":setting:`ADMINS`"

msgid ":setting:`DEFAULT_CHARSET`"
msgstr ":setting:`DEFAULT_CHARSET`"

msgid ":setting:`DEFAULT_FROM_EMAIL`"
msgstr ":setting:`DEFAULT_FROM_EMAIL`"

msgid ":setting:`EMAIL_BACKEND`"
msgstr ":setting:`EMAIL_BACKEND`"

msgid ":setting:`EMAIL_FILE_PATH`"
msgstr ":setting:`EMAIL_FILE_PATH`"

msgid ":setting:`EMAIL_HOST`"
msgstr ":setting:`EMAIL_HOST`"

msgid ":setting:`EMAIL_HOST_PASSWORD`"
msgstr ":setting:`EMAIL_HOST_PASSWORD`"

msgid ":setting:`EMAIL_HOST_USER`"
msgstr ":setting:`EMAIL_HOST_USER`"

msgid ":setting:`EMAIL_PORT`"
msgstr ":setting:`EMAIL_PORT`"

msgid ":setting:`EMAIL_SSL_CERTFILE`"
msgstr ":setting:`EMAIL_SSL_CERTFILE`"

msgid ":setting:`EMAIL_SSL_KEYFILE`"
msgstr ":setting:`EMAIL_SSL_KEYFILE`"

msgid ":setting:`EMAIL_SUBJECT_PREFIX`"
msgstr ":setting:`EMAIL_SUBJECT_PREFIX`"

msgid ":setting:`EMAIL_TIMEOUT`"
msgstr ":setting:`EMAIL_TIMEOUT`"

msgid ":setting:`EMAIL_USE_LOCALTIME`"
msgstr ":setting:`EMAIL_USE_LOCALTIME`"

msgid ":setting:`EMAIL_USE_TLS`"
msgstr ":setting:`EMAIL_USE_TLS`"

msgid ":setting:`MANAGERS`"
msgstr ":setting:`MANAGERS`"

msgid ":setting:`SERVER_EMAIL`"
msgstr ":setting:`SERVER_EMAIL`"

msgid "Error reporting"
msgstr "发送错误"

msgid ":setting:`DEFAULT_EXCEPTION_REPORTER`"
msgstr ":setting:`DEFAULT_EXCEPTION_REPORTER`"

msgid ":setting:`DEFAULT_EXCEPTION_REPORTER_FILTER`"
msgstr ":setting:`DEFAULT_EXCEPTION_REPORTER_FILTER`"

msgid ":setting:`IGNORABLE_404_URLS`"
msgstr ":setting:`IGNORABLE_404_URLS`"

msgid ":setting:`SILENCED_SYSTEM_CHECKS`"
msgstr ":setting:`SILENCED_SYSTEM_CHECKS`"

msgid "File uploads"
msgstr "文件上传"

msgid ":setting:`DEFAULT_FILE_STORAGE`"
msgstr ":setting:`DEFAULT_FILE_STORAGE`"

msgid ":setting:`FILE_UPLOAD_HANDLERS`"
msgstr ":setting:`FILE_UPLOAD_HANDLERS`"

msgid ":setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`"
msgstr ":setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`"

msgid ":setting:`FILE_UPLOAD_PERMISSIONS`"
msgstr ":setting:`FILE_UPLOAD_PERMISSIONS`"

msgid ":setting:`FILE_UPLOAD_TEMP_DIR`"
msgstr ":setting:`FILE_UPLOAD_TEMP_DIR`"

msgid ":setting:`MEDIA_ROOT`"
msgstr ":setting:`MEDIA_ROOT`"

msgid ":setting:`MEDIA_URL`"
msgstr ":setting:`MEDIA_URL`"

msgid ":setting:`FORM_RENDERER`"
msgstr ":setting:`FORM_RENDERER`"

msgid "Globalization (``i18n``/``l10n``)"
msgstr "国际化（``i18n`` ／ ``l10n``）"

msgid ":setting:`DATETIME_FORMAT`"
msgstr ":setting:`DATETIME_FORMAT`"

msgid ":setting:`FORMAT_MODULE_PATH`"
msgstr ":setting:`FORMAT_MODULE_PATH`"

msgid ":setting:`LANGUAGE_CODE`"
msgstr ":setting:`LANGUAGE_CODE`"

msgid ":setting:`LANGUAGE_COOKIE_AGE`"
msgstr ":setting:`LANGUAGE_COOKIE_AGE`"

msgid ":setting:`LANGUAGE_COOKIE_DOMAIN`"
msgstr ":setting:`LANGUAGE_COOKIE_DOMAIN`"

msgid ":setting:`LANGUAGE_COOKIE_HTTPONLY`"
msgstr ":setting:`LANGUAGE_COOKIE_HTTPONLY`"

msgid ":setting:`LANGUAGE_COOKIE_NAME`"
msgstr ":setting:`LANGUAGE_COOKIE_NAME`"

msgid ":setting:`LANGUAGE_COOKIE_PATH`"
msgstr ":setting:`LANGUAGE_COOKIE_PATH`"

msgid ":setting:`LANGUAGE_COOKIE_SAMESITE`"
msgstr ":setting:`LANGUAGE_COOKIE_SAMESITE`"

msgid ":setting:`LANGUAGE_COOKIE_SECURE`"
msgstr ":setting:`LANGUAGE_COOKIE_SECURE`"

msgid ":setting:`LANGUAGES`"
msgstr ":setting:`LANGUAGES`"

msgid ":setting:`LANGUAGES_BIDI`"
msgstr ":setting:`LANGUAGES_BIDI`"

msgid ":setting:`LOCALE_PATHS`"
msgstr ":setting:`LOCALE_PATHS`"

msgid ":setting:`TIME_ZONE`"
msgstr ":setting:`TIME_ZONE`"

msgid ":setting:`USE_I18N`"
msgstr ":setting:`USE_I18N`"

msgid ":setting:`USE_L10N`"
msgstr ":setting:`USE_L10N`"

msgid ":setting:`USE_THOUSAND_SEPARATOR`"
msgstr ":setting:`USE_THOUSAND_SEPARATOR`"

msgid ":setting:`USE_TZ`"
msgstr ":setting:`USE_TZ`"

msgid "HTTP"
msgstr "HTTP"

msgid ":setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`"
msgstr ":setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`"

msgid ":setting:`DATA_UPLOAD_MAX_NUMBER_FIELDS`"
msgstr ":setting:`DATA_UPLOAD_MAX_NUMBER_FIELDS`"

msgid ":setting:`DATA_UPLOAD_MAX_NUMBER_FILES`"
msgstr ""

msgid ":setting:`DISALLOWED_USER_AGENTS`"
msgstr ":setting:`DISALLOWED_USER_AGENTS`"

msgid ":setting:`FORCE_SCRIPT_NAME`"
msgstr ":setting:`FORCE_SCRIPT_NAME`"

msgid ":setting:`INTERNAL_IPS`"
msgstr ":setting:`INTERNAL_IPS`"

msgid ":setting:`MIDDLEWARE`"
msgstr ":setting:`MIDDLEWARE`"

msgid ":setting:`SECURE_PROXY_SSL_HEADER`"
msgstr ":setting:`SECURE_PROXY_SSL_HEADER`"

msgid ":setting:`SIGNING_BACKEND`"
msgstr ":setting:`SIGNING_BACKEND`"

msgid ":setting:`USE_X_FORWARDED_HOST`"
msgstr ":setting:`USE_X_FORWARDED_HOST`"

msgid ":setting:`USE_X_FORWARDED_PORT`"
msgstr ":setting:`USE_X_FORWARDED_PORT`"

msgid ":setting:`WSGI_APPLICATION`"
msgstr ":setting:`WSGI_APPLICATION`"

msgid ":setting:`LOGGING`"
msgstr ":setting:`LOGGING`"

msgid ":setting:`LOGGING_CONFIG`"
msgstr ":setting:`LOGGING_CONFIG`"

msgid ":setting:`ABSOLUTE_URL_OVERRIDES`"
msgstr ":setting:`ABSOLUTE_URL_OVERRIDES`"

msgid ":setting:`FIXTURE_DIRS`"
msgstr ":setting:`FIXTURE_DIRS`"

msgid ":setting:`INSTALLED_APPS`"
msgstr ":setting:`INSTALLED_APPS`"

msgid "Cross Site Request Forgery Protection"
msgstr "跨网站请求伪造保护"

msgid ":setting:`SECRET_KEY`"
msgstr ":setting:`SECRET_KEY`"

msgid ":setting:`SECRET_KEY_FALLBACKS`"
msgstr ":setting:`SECRET_KEY_FALLBACKS`"

msgid ":setting:`X_FRAME_OPTIONS`"
msgstr ":setting:`X_FRAME_OPTIONS`"

msgid "Serialization"
msgstr "序列化"

msgid ":setting:`SERIALIZATION_MODULES`"
msgstr ":setting:`SERIALIZATION_MODULES`"

msgid ":setting:`TEMPLATES`"
msgstr ":setting:`TEMPLATES`"

msgid "Testing"
msgstr "测试中"

msgid "Database: :setting:`TEST <DATABASE-TEST>`"
msgstr "数据库： :setting:`TEST <DATABASE-TEST>`"

msgid ":setting:`TEST_NON_SERIALIZED_APPS`"
msgstr ":setting:`TEST_NON_SERIALIZED_APPS`"

msgid ":setting:`TEST_RUNNER`"
msgstr ":setting:`TEST_RUNNER`"

msgid ":setting:`APPEND_SLASH`"
msgstr ":setting:`APPEND_SLASH`"

msgid ":setting:`PREPEND_WWW`"
msgstr ":setting:`PREPEND_WWW`"

msgid ":setting:`ROOT_URLCONF`"
msgstr ":setting:`ROOT_URLCONF`"

msgid ""
"A list of all the signals that Django sends. All built-in signals are sent "
"using the :meth:`~django.dispatch.Signal.send` method."
msgstr ""
"Django 发送的所有信号的列表。所有内置的信号都是使用 :meth:`~django.dispatch."
"Signal.send` 方法发送的。"

msgid ""
"See the documentation on the :doc:`signal dispatcher </topics/signals>` for "
"information regarding how to register for and receive signals."
msgstr ""
"关于如何注册和接收信号的信息，请参见 :doc:`信号收发 </topics/signals>` 的文"
"档。"

msgid ""
"The :doc:`authentication framework </topics/auth/index>` sends :ref:`signals "
"when a user is logged in / out <topics-auth-signals>`."
msgstr ""
":doc:`认证框架 </topics/auth/index>` 在 :ref:`用户登录／退出时发送信号 "
"<topics-auth-signals>`。"

msgid "Model signals"
msgstr "模型信号"

msgid ""
"The :mod:`django.db.models.signals` module defines a set of signals sent by "
"the model system."
msgstr ":mod:`django.db.models.signals` 模块定义了一组由模型系统发送的信号。"

msgid ""
"Signals can make your code harder to maintain. Consider implementing a "
"helper method on a :ref:`custom manager <custom-managers>`, to both update "
"your models and perform additional logic, or else :ref:`overriding model "
"methods <overriding-model-methods>` before using model signals."
msgstr ""

msgid ""
"Many of these signals are sent by various model methods like ``__init__()`` "
"or :meth:`~django.db.models.Model.save` that you can override in your own "
"code."
msgstr ""
"这些信号中有很多是由各种模型方法发送的，比如 ``__init__()`` 或 :meth:"
"`~django.db.models.Model.save`，你可以在自己的代码中覆盖这些方法。"

msgid ""
"If you override these methods on your model, you must call the parent class' "
"methods for these signals to be sent."
msgstr "如果你在模型上重写了这些方法，你必须调用父类的方法才能发送这些信号。"

msgid ""
"Note also that Django stores signal handlers as weak references by default, "
"so if your handler is a local function, it may be garbage collected.  To "
"prevent this, pass ``weak=False`` when you call the signal's :meth:`~django."
"dispatch.Signal.connect`."
msgstr ""
"还需要注意的是，Django 默认将信号处理程序存储为弱引用，所以如果你的处理程序是"
"一个本地函数，它可能会被垃圾回收。 为了防止这种情况，当你调用信号的 :meth:"
"`~django.dispatch.Signal.connect` 时，传入 ``weak=False``。"

msgid ""
"Model signals ``sender`` model can be lazily referenced when connecting a "
"receiver by specifying its full application label. For example, an "
"``Question`` model defined in the ``polls`` application could be referenced "
"as ``'polls.Question'``. This sort of reference can be quite handy when "
"dealing with circular import dependencies and swappable models."
msgstr ""
"模型信号 ``sender`` 模型可以在连接接收器时，通过指定其完整的应用程序标签进行"
"惰性引用。例如，在 ``polls`` 应用程序中定义的 ``Question`` 模型可以被引用为 "
"``'polls.Question'``。在处理循环导入依赖关系和可交换模型时，这种引用可以非常"
"方便。"

msgid "``pre_init``"
msgstr "``pre_init``"

msgid ""
"Whenever you instantiate a Django model, this signal is sent at the "
"beginning of the model's ``__init__()`` method."
msgstr ""
"每当你实例化一个 Django 模型时，这个信号都会在模型的 ``__init__()`` 方法的开"
"头发出。"

msgid "The model class that just had an instance created."
msgstr "刚刚创建了一个实例的模型类。"

msgid "``args``"
msgstr "``args``"

msgid "A list of positional arguments passed to ``__init__()``."
msgstr "传递给 ``__init__()`` 的位置参数列表。"

msgid "``kwargs``"
msgstr "``kwargs``"

msgid "A dictionary of keyword arguments passed to ``__init__()``."
msgstr "传递给 ``__init__()`` 的关键字参数字典。"

msgid "For example, the :doc:`tutorial </intro/tutorial02>` has this line::"
msgstr "例如，:doc:`教程 </intro/tutorial02>` 有这样一行："

msgid "The arguments sent to a :data:`pre_init` handler would be:"
msgstr "发送给 :data:`pre_init` 处理程序的参数是："

msgid "``Question`` (the class itself)"
msgstr "``Question`` （类本身）"

msgid ""
"``[]`` (an empty list because there were no positional arguments passed to "
"``__init__()``)"
msgstr "``[]`` （一个空列表，因为没有向 ``__init__()`` 传递位置参数）"

msgid ""
"``{'question_text': \"What's new?\",`` ``'pub_date': datetime.datetime(2012, "
"2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)}``"
msgstr ""

msgid "``post_init``"
msgstr "``post_init``"

msgid ""
"Like pre_init, but this one is sent when the ``__init__()`` method finishes."
msgstr "和 pre_init 一样，但这个是在 ``__init__()`` 方法完成后发送的。"

msgid "As above: the model class that just had an instance created."
msgstr "如上：刚刚创建了一个实例的模型类。"

msgid "The actual instance of the model that's just been created."
msgstr "刚刚创建的模型的实际实例。"

msgid ""
":attr:`instance._state <django.db.models.Model._state>` isn't set before "
"sending the ``post_init`` signal, so ``_state`` attributes always have their "
"default values. For example, ``_state.db`` is ``None``."
msgstr ""
":attr:`instance._state <django.db.models.Model._state>` 在发送 ``post_init`` "
"信号之前没有设置，所以 ``_state`` 属性总是有其默认值。例如，``_state.db`` 是 "
"``None``。"

msgid ""
"For performance reasons, you shouldn't perform queries in receivers of "
"``pre_init`` or ``post_init`` signals because they would be executed for "
"each instance returned during queryset iteration."
msgstr ""
"出于性能考虑，你不应该在 ``pre_init`` 或 ``post_init`` 信号的接收者中执行查"
"询，因为在查询集迭代期间，它们会对每个返回的实例执行。"

msgid "``pre_save``"
msgstr "``pre_save``"

msgid ""
"This is sent at the beginning of a model's :meth:`~django.db.models.Model."
"save` method."
msgstr "这是在模型的 :meth:`~django.db.models.Model.save` 方法开始时发送的。"

msgid "The model class."
msgstr "模型类"

msgid "The actual instance being saved."
msgstr "实际被保存的实例。"

msgid "``raw``"
msgstr "``raw``"

msgid ""
"A boolean; ``True`` if the model is saved exactly as presented (i.e. when "
"loading a :ref:`fixture <fixtures-explanation>`). One should not query/"
"modify other records in the database as the database might not be in a "
"consistent state yet."
msgstr ""

msgid "The database alias being used."
msgstr "正在使用的数据库别名。"

msgid "``update_fields``"
msgstr "``update_fields``"

msgid ""
"The set of fields to update as passed to :meth:`.Model.save`, or ``None`` if "
"``update_fields`` wasn't passed to ``save()``."
msgstr ""
"传递给 :meth:`.Model.save` 的要更新的字段集，如果 ``update_fields`` 没有传递"
"给 ``save()``，则为 ``None``。"

msgid "``post_save``"
msgstr "``post_save``"

msgid ""
"Like :data:`pre_save`, but sent at the end of the :meth:`~django.db.models."
"Model.save` method."
msgstr ""
"就像 :data:`pre_save` 一样，但在 :meth:`~django.db.models.Model.save` 方法的"
"最后发送。"

msgid "``created``"
msgstr "``created``"

msgid "A boolean; ``True`` if a new record was created."
msgstr "一个布尔值；``True`` 如果创建了一个新记录。"

msgid "``pre_delete``"
msgstr "``pre_delete``"

msgid ""
"Sent at the beginning of a model's :meth:`~django.db.models.Model.delete` "
"method and a queryset's :meth:`~django.db.models.query.QuerySet.delete` "
"method."
msgstr ""
"在模型的 :meth:`~django.db.models.models.delete` 方法和查询集的 :meth:"
"`~django.db.models.query.QuerySet.delete` 方法开始时发送。"

msgid "The actual instance being deleted."
msgstr "实际被删除的实例。"

msgid ""
"The origin of the deletion being the instance of a ``Model`` or ``QuerySet`` "
"class."
msgstr ""

msgid "``post_delete``"
msgstr "``post_delete``"

msgid ""
"Like :data:`pre_delete`, but sent at the end of a model's :meth:`~django.db."
"models.Model.delete` method and a queryset's :meth:`~django.db.models.query."
"QuerySet.delete` method."
msgstr ""
"就像 :data:`pre_delete` 一样，但在模型的 :meth:`~django.db.models.models."
"delete` 方法和查询集的 :meth:`~django.db.models.query.QuerySet.delete` 方法结"
"束时发送。"

msgid ""
"Note that the object will no longer be in the database, so be very careful "
"what you do with this instance."
msgstr "请注意，该对象将不再在数据库中，所以要非常小心地处理这个实例。"

msgid "``m2m_changed``"
msgstr "``m2m_changed``"

msgid ""
"Sent when a :class:`~django.db.models.ManyToManyField` is changed on a model "
"instance. Strictly speaking, this is not a model signal since it is sent by "
"the :class:`~django.db.models.ManyToManyField`, but since it complements "
"the :data:`pre_save`/:data:`post_save` and :data:`pre_delete`/:data:"
"`post_delete` when it comes to tracking changes to models, it is included "
"here."
msgstr ""
"当一个模型实例上的 :class:`~django.db.models.ManyToManyField` 被改变时发出。"
"严格来说，这不是一个模型信号，因为它是由 :class:`~django.db.models."
"ManyToManyField` 发送的，但由于它是对 :data:`pre_save`/:data:`post_save` 和 :"
"data:`pre_delete`/:data:`post_delete` 的补充，当涉及到跟踪模型的变化时，它被"
"包含在这里。"

msgid ""
"The intermediate model class describing the :class:`~django.db.models."
"ManyToManyField`. This class is automatically created when a many-to-many "
"field is defined; you can access it using the ``through`` attribute on the "
"many-to-many field."
msgstr ""
"中间模型类描述 :class:`~django.db.models.ManyToManyField`。当定义了多对多字段"
"时，这个类会自动创建；你可以使用多对多字段上的 ``through`` 属性来访问它。"

msgid ""
"The instance whose many-to-many relation is updated. This can be an instance "
"of the ``sender``, or of the class the :class:`~django.db.models."
"ManyToManyField` is related to."
msgstr ""
"多对多关系被更新的实例。这可以是 ``sender`` 的实例，或者是 :class:`~django."
"db.models.ManyToManyField` 所关联的类的实例。"

msgid "``action``"
msgstr "``action``"

msgid ""
"A string indicating the type of update that is done on the relation. This "
"can be one of the following:"
msgstr "表示对关系进行更新的类型的字符串。可以是以下类型之一："

msgid "``\"pre_add\"``"
msgstr "``\"pre_add\"``"

msgid "Sent *before* one or more objects are added to the relation."
msgstr "在一个或多个对象被添加到关系 *之前* 发送。"

msgid "``\"post_add\"``"
msgstr "``\"post_add\"``"

msgid "Sent *after* one or more objects are added to the relation."
msgstr "在一个或多个对象被添加到关系 *之后* 发送。"

msgid "``\"pre_remove\"``"
msgstr "``\"pre_remove\"``"

msgid "Sent *before* one or more objects are removed from the relation."
msgstr "在一个或多个对象从关系中删除 *之前* 发送。"

msgid "``\"post_remove\"``"
msgstr "``\"post_remove\"``"

msgid "Sent *after* one or more objects are removed from the relation."
msgstr "在一个或多个对象从关系中删除 *之后* 发送。"

msgid "``\"pre_clear\"``"
msgstr "``\"pre_clear\"``"

msgid "Sent *before* the relation is cleared."
msgstr "在关系被清除 *之前* 发送。"

msgid "``\"post_clear\"``"
msgstr "``\"post_clear\"``"

msgid "Sent *after* the relation is cleared."
msgstr "在关系被清除 *之后* 发送。"

msgid ""
"Indicates which side of the relation is updated (i.e., if it is the forward "
"or reverse relation that is being modified)."
msgstr "表示关系的哪一面被更新（即被修改的是正向关系还是反向关系）。"

msgid ""
"The class of the objects that are added to, removed from or cleared from the "
"relation."
msgstr "从关系中添加、删除或清除的对象的类别。"

msgid "``pk_set``"
msgstr "``pk_set``"

msgid ""
"For the ``pre_add`` and ``post_add`` actions, this is a set of primary key "
"values that will be, or have been, added to the relation. This may be a "
"subset of the values submitted to be added, since inserts must filter "
"existing values in order to avoid a database ``IntegrityError``."
msgstr ""
"对于 ``pre_add`` 和 ``post_add`` 动作，这是一组将被或已经被添加到关系中的主键"
"值。这可能是提交添加的值的一个子集，因为插入必须过滤现有的值，以避免数据库 "
"``IntegrityError``。"

msgid ""
"For the ``pre_remove`` and ``post_remove`` actions, this is a set of primary "
"key values that was submitted to be removed from the relation. This is not "
"dependent on whether the values actually will be, or have been, removed. In "
"particular, non-existent values may be submitted, and will appear in "
"``pk_set``, even though they have no effect on the database."
msgstr ""
"对于 ``pre_remove`` 和 ``post_remove`` 动作来说，这是一组被提交从关系中删除的"
"主键值。这并不取决于这些值是否会被实际删除或已经被删除。特别是，不存在的值可"
"能会被提交，并且会出现在 ``pk_set`` 中，即使它们对数据库没有影响。"

msgid "For the ``pre_clear`` and ``post_clear`` actions, this is ``None``."
msgstr "对于 ``pre_clear`` 和 ``post_clear`` 动作，是 ``None``。"

msgid ""
"For example, if a ``Pizza`` can have multiple ``Topping`` objects, modeled "
"like this::"
msgstr "例如，如果一个 ``Pizza`` 可以有多个 ``Topping`` 对象，模型如下："

msgid "If we connected a handler like this::"
msgstr "如果我们连接一个这样的处理程序："

msgid "and then did something like this:"
msgstr ""

msgid ""
"the arguments sent to a :data:`m2m_changed` handler (``toppings_changed`` in "
"the example above) would be:"
msgstr ""
"发送给 :data:`m2m_changed` 处理程序的参数（在上面的例子中，"
"``toppings_changed``）将是："

msgid "``Pizza.toppings.through`` (the intermediate m2m class)"
msgstr "``Pizza.toppings.through`` （中间的 m2m 类）"

msgid "``p`` (the ``Pizza`` instance being modified)"
msgstr "``p`` （被修改的 ``Pizza`` 实例）"

msgid "``\"pre_add\"`` (followed by a separate signal with ``\"post_add\"``)"
msgstr "``\"pre_add\"`` （后面是一个单独的信号 ``\"post_add\"``）"

msgid ""
"``False`` (``Pizza`` contains the :class:`~django.db.models."
"ManyToManyField`, so this call modifies the forward relation)"
msgstr ""
"``False`` （``Pizza`` 包含 :class:`~django.db.models.ManyToManyField`，所以这"
"个调用修改了前向关系）"

msgid "``Topping`` (the class of the objects added to the ``Pizza``)"
msgstr "``Topping`` （添加到 ``Pizza`` 中的对象类别）"

msgid "``{t.id}`` (since only ``Topping t`` was added to the relation)"
msgstr "``{t.id}`` （因为只有 ``Topping t`` 被添加到关系中）"

msgid "``\"default\"`` (since the default router sends writes here)"
msgstr "``\"default\"`` （因为默认的路由器在这里发送写入）"

msgid "And if we would then do something like this:"
msgstr ""

msgid "the arguments sent to a :data:`m2m_changed` handler would be:"
msgstr "发送给 :data:`m2m_changed` 处理程序的参数将是："

msgid "``t`` (the ``Topping`` instance being modified)"
msgstr "``t`` （正在修改的 ``Topping`` 实例）"

msgid ""
"``\"pre_remove\"`` (followed by a separate signal with ``\"post_remove\"``)"
msgstr "``\"pre_remove\"`` （后面是一个单独的信号 ``\"post_remove\"``）"

msgid ""
"``True`` (``Pizza`` contains the :class:`~django.db.models.ManyToManyField`, "
"so this call modifies the reverse relation)"
msgstr ""
"``True`` （``Pizza`` 包含 :class:`~django.db.models.ManyToManyField`，所以这"
"个调用修改了反向关系）"

msgid "``Pizza`` (the class of the objects removed from the ``Topping``)"
msgstr "``Pizza`` （从 ``Topping`` 中删除的对象类别）"

msgid "``{p.id}`` (since only ``Pizza p`` was removed from the relation)"
msgstr "``{p.id}`` （因为只有 ``Pizza p`` 被从关系中删除）"

msgid "``class_prepared``"
msgstr "``class_prepared``"

msgid ""
"Sent whenever a model class has been \"prepared\" -- that is, once a model "
"has been defined and registered with Django's model system. Django uses this "
"signal internally; it's not generally used in third-party applications."
msgstr ""

msgid ""
"Since this signal is sent during the app registry population process, and :"
"meth:`AppConfig.ready() <django.apps.AppConfig.ready>` runs after the app "
"registry is fully populated, receivers cannot be connected in that method. "
"One possibility is to connect them ``AppConfig.__init__()`` instead, taking "
"care not to import models or trigger calls to the app registry."
msgstr ""
"由于这个信号是在应用注册表填充过程中发出的，而 :meth:`AppConfig.ready() "
"<django.apps.AppConfig.ready>` 是在应用注册表完全填充后运行的，所以不能在该方"
"法中连接接收器。一种可能是用 ``AppConfig.__init__()`` 来代替连接它们，注意不"
"要导入模型或触发对应用注册表的调用。"

msgid "Arguments that are sent with this signal:"
msgstr "用此信号发送的参数："

msgid "The model class which was just prepared."
msgstr "刚刚准备好的模型类。"

msgid "Management signals"
msgstr "管理信号"

msgid "Signals sent by :doc:`django-admin </ref/django-admin>`."
msgstr ":doc:`django-admin </ref/django-admin>` 发出的信号。"

msgid "``pre_migrate``"
msgstr "``pre_migrate``"

msgid ""
"Sent by the :djadmin:`migrate` command before it starts to install an "
"application. It's not emitted for applications that lack a ``models`` module."
msgstr ""
"由 :djadmin:`migrate` 命令在开始安装应用程序之前发出。对于缺乏 ``models`` 模"
"块的应用程序，它不会发出。"

msgid ""
"An :class:`~django.apps.AppConfig` instance for the application about to be "
"migrated/synced."
msgstr ""
"一个 :class:`~django.apps.AppConfig` 实例，用于即将迁移／同步的应用程序。"

msgid "``app_config``"
msgstr "``app_config``"

msgid "Same as ``sender``."
msgstr "同 ``sender``。"

msgid "``verbosity``"
msgstr "``verbosity``"

msgid ""
"Indicates how much information ``manage.py`` is printing on screen. See the :"
"option:`--verbosity` flag for details."
msgstr ""

msgid ""
"Functions which listen for :data:`pre_migrate` should adjust what they "
"output to the screen based on the value of this argument."
msgstr ""
"监听 :data:`pre_migrate` 的函数应该根据这个参数的值来调整它们向屏幕输出的内"
"容。"

msgid "``interactive``"
msgstr "``interactive``"

msgid ""
"If ``interactive`` is ``True``, it's safe to prompt the user to input things "
"on the command line. If ``interactive`` is ``False``, functions which listen "
"for this signal should not try to prompt for anything."
msgstr ""
"如果 ``interactive`` 为 ``True``，则可以安全地提示用户在命令行上输入东西。如"
"果 ``interactive`` 为 ``False``，则监听该信号的函数不应试图提示任何东西。"

msgid ""
"For example, the :mod:`django.contrib.auth` app only prompts to create a "
"superuser when ``interactive`` is ``True``."
msgstr ""
"例如 :mod:`django.contrib.auth` 应用只有在 ``interactive`` 为 ``True`` 时才会"
"提示创建超级用户。"

msgid "``stdout``"
msgstr "``stdout``"

msgid "A stream-like object where verbose output should be redirected."
msgstr ""

msgid "The alias of database on which a command will operate."
msgstr "命令将运行的数据库的别名。"

msgid "``plan``"
msgstr "``plan``"

msgid ""
"The migration plan that is going to be used for the migration run. While the "
"plan is not public API, this allows for the rare cases when it is necessary "
"to know the plan. A plan is a list of two-tuples with the first item being "
"the instance of a migration class and the second item showing if the "
"migration was rolled back (``True``) or applied (``False``)."
msgstr ""
"将用于迁移运行的迁移计划。虽然计划不是公开的 API，但这允许在极少数情况下有必"
"要知道计划。计划是一个由二元元组组成的列表，第一项是迁移类的实例，第二项显示"
"迁移是否被回滚（``True``）或应用（``False``）。"

msgid "``apps``"
msgstr "``apps``"

msgid ""
"An instance of :data:`Apps <django.apps>` containing the state of the "
"project before the migration run. It should be used instead of the global :"
"attr:`apps <django.apps.apps>` registry to retrieve the models you want to "
"perform operations on."
msgstr ""
":data:`Apps <django.apps>` 的实例，包含迁移运行前的项目状态。它应该代替全局 :"
"attr:`apps <django.app.app>` 注册表来检索你要执行操作的模型。"

msgid "``post_migrate``"
msgstr "``post_migrate``"

msgid ""
"Sent at the end of the :djadmin:`migrate` (even if no migrations are run) "
"and :djadmin:`flush` commands. It's not emitted for applications that lack a "
"``models`` module."
msgstr ""
"在 :djadmin:`migrate` （即使没有运行迁移）和 :djadmin:`flush` 命令结束时发"
"出。对于缺乏 ``models`` 模块的应用程序，它不会被发出。"

msgid ""
"Handlers of this signal must not perform database schema alterations as "
"doing so may cause the :djadmin:`flush` command to fail if it runs during "
"the :djadmin:`migrate` command."
msgstr ""
"该信号的处理者不能进行数据库模式的改变，因为如果在 :djadmin:`migrate` 命令期"
"间运行 :djadmin:`flush` 命令，可能会导致 :djadmin:`flush` 命令失败。"

msgid ""
"An :class:`~django.apps.AppConfig` instance for the application that was "
"just installed."
msgstr "一个 :class:`~django.app.AppConfig` 实例，用于刚刚安装的应用程序。"

msgid ""
"Functions which listen for :data:`post_migrate` should adjust what they "
"output to the screen based on the value of this argument."
msgstr ""
"监听 :data:`post_migrate` 的函数应该根据这个参数的值来调整它们向屏幕输出的内"
"容。"

msgid ""
"The database alias used for synchronization. Defaults to the ``default`` "
"database."
msgstr "用于同步的数据库别名。默认为 ``default`` 数据库。"

msgid ""
"The migration plan that was used for the migration run. While the plan is "
"not public API, this allows for the rare cases when it is necessary to know "
"the plan. A plan is a list of two-tuples with the first item being the "
"instance of a migration class and the second item showing if the migration "
"was rolled back (``True``) or applied (``False``)."
msgstr ""
"迁移运行时使用的迁移计划。虽然计划不是公开的 API，但这允许在极少数情况下有必"
"要知道计划。计划是一个由二元元组组成的列表，第一项是迁移类的实例，第二项显示"
"迁移是否被回滚（``True``）或应用（``False``）。"

msgid ""
"An instance of :data:`Apps <django.apps.apps>` containing the state of the "
"project after the migration run. It should be used instead of the global :"
"attr:`apps <django.apps.apps>` registry to retrieve the models you want to "
"perform operations on."
msgstr ""
":data:`Apps <django.app.apps>` 的一个实例，包含迁移运行后项目的状态。它应该代"
"替全局的 :attr:`apps <django.app.apps>` 注册表来检索你要执行操作的模型。"

msgid ""
"For example, you could register a callback in an :class:`~django.apps."
"AppConfig` like this::"
msgstr ""
"例如，你可以在一个 :class:`~django.app.AppConfig` 中注册一个回调，像这样："

msgid ""
"If you provide an :class:`~django.apps.AppConfig` instance as the sender "
"argument, please ensure that the signal is registered in :meth:`~django.apps."
"AppConfig.ready`. ``AppConfig``\\s are recreated for tests that run with a "
"modified set of :setting:`INSTALLED_APPS` (such as when settings are "
"overridden) and such signals should be connected for each new ``AppConfig`` "
"instance."
msgstr ""
"如果你提供了一个 :class:`~django.apps.AppConfig` 实例作为发送者参数，请确保该"
"信号在 :meth:`~django.apps.AppConfig.ready` 中注册。``AppConfig`` 会被重新创"
"建，用于使用修改过的 :setting:`INSTALLED_APPS` 集合运行的测试（例如当配置被覆"
"盖时），并且这种信号应该为每个新的 ``AppConfig`` 实例连接。"

msgid "Request/response signals"
msgstr "请求／响应信号"

msgid "Signals sent by the core framework when processing a request."
msgstr "核心框架处理请求时发出的信号。"

msgid ""
"Signals can make your code harder to maintain. Consider :doc:`using a "
"middleware </topics/http/middleware>` before using request/response signals."
msgstr ""

msgid "``request_started``"
msgstr "``request_started``"

msgid "Sent when Django begins processing an HTTP request."
msgstr "当 Django 开始处理一个 HTTP 请求时发送。"

msgid ""
"The handler class -- e.g. ``django.core.handlers.wsgi.WsgiHandler`` -- that "
"handled the request."
msgstr ""
"处理程序类 —— 例如 ``django.core.handlers.wsgi.wsgiHandler`` —— 处理该请求。"

msgid "``environ``"
msgstr "``environ``"

msgid "The ``environ`` dictionary provided to the request."
msgstr "向请求提供的 ``environ`` 字典。"

msgid "``request_finished``"
msgstr "``request_finished``"

msgid "Sent when Django finishes delivering an HTTP response to the client."
msgstr "当 Django 完成向客户端发送 HTTP 响应时发送。"

msgid "The handler class, as above."
msgstr "处理程序类，同上。"

msgid "``got_request_exception``"
msgstr "``got_request_exception``"

msgid ""
"This signal is sent whenever Django encounters an exception while processing "
"an incoming HTTP request."
msgstr "当 Django 在处理一个传入的 HTTP 请求时遇到异常时，就会发出这个信号。"

msgid "Unused (always ``None``)."
msgstr "未使用（总是 ``None``）。"

msgid "The :class:`~django.http.HttpRequest` object."
msgstr ":class:`~django.http.HttpRequest` 对象。"

msgid "Test signals"
msgstr "测试信号"

msgid "Signals only sent when :ref:`running tests <running-tests>`."
msgstr "只有当 :ref:`运行测试 <running-tests>` 时才会发出信号。"

msgid "``setting_changed``"
msgstr "``setting_changed``"

msgid ""
"This signal is sent when the value of a setting is changed through the "
"``django.test.TestCase.settings()`` context manager or the :func:`django."
"test.override_settings` decorator/context manager."
msgstr ""
"当通过 ``django.test.TestCase.settings()`` 上下文管理器或 :func:`django.test."
"override_settings` 装饰器／上下文管理器改变配置值时，会发出这个信号。"

msgid ""
"It's actually sent twice: when the new value is applied (\"setup\") and when "
"the original value is restored (\"teardown\"). Use the ``enter`` argument to "
"distinguish between the two."
msgstr ""
"它实际上被发送了两次：当应用新的值时（\"setup\"）和当恢复原始值时"
"（\"drawdown\"）。使用 ``enter`` 参数来区分这两种情况。"

msgid ""
"You can also import this signal from ``django.core.signals`` to avoid "
"importing from ``django.test`` in non-test situations."
msgstr ""
"你也可以从 ``django.core.signals`` 导入这个信号，以避免在非测试情况下从 "
"``django.test`` 导入。"

msgid "The settings handler."
msgstr "配置处理程序。"

msgid "``setting``"
msgstr "``setting``"

msgid "The name of the setting."
msgstr "配置的名称。"

msgid ""
"The value of the setting after the change. For settings that initially don't "
"exist, in the \"teardown\" phase, ``value`` is ``None``."
msgstr ""
"更改后的配置值。对于最初不存在的配置，在 \"teardown\" 阶段，``value`` 是 "
"``None``。"

msgid "``enter``"
msgstr "``enter``"

msgid "A boolean; ``True`` if the setting is applied, ``False`` if restored."
msgstr "一个布尔值；``True`` 如果配置被应用，``False`` 如果恢复。"

msgid "``template_rendered``"
msgstr "``template_rendered``"

msgid ""
"Sent when the test system renders a template. This signal is not emitted "
"during normal operation of a Django server -- it is only available during "
"testing."
msgstr ""
"当测试系统渲染一个模板时发出。这个信号在 Django 服务器正常运行时不会发出，只"
"有在测试时才会发出。"

msgid "The :class:`~django.template.Template` object which was rendered."
msgstr "被渲染的 :class:`~django.template.Template` 对象。"

msgid "``template``"
msgstr "``template``"

msgid "Same as sender"
msgstr "与发送器相同"

msgid "``context``"
msgstr "``context``"

msgid ""
"The :class:`~django.template.Context` with which the template was rendered."
msgstr "渲染模板的 :class:`~django.template.Context`。"

msgid "Database Wrappers"
msgstr "数据库包装器"

msgid ""
"Signals sent by the database wrapper when a database connection is initiated."
msgstr "当数据库连接启动时，数据库包装器发出的信号。"

msgid "``connection_created``"
msgstr "``connection_created``"

msgid ""
"Sent when the database wrapper makes the initial connection to the "
"database.  This is particularly useful if you'd like to send any post "
"connection commands to the SQL backend."
msgstr ""
"当数据库包装器与数据库进行初始连接时发送。 如果你想向 SQL 后端发送任何连接后"
"的命令，这一点特别有用。"

msgid ""
"The database wrapper class -- i.e. ``django.db.backends.postgresql."
"DatabaseWrapper`` or ``django.db.backends.mysql.DatabaseWrapper``, etc."
msgstr ""
"数据库封装类 —— 即 ``django.db.backends.postgresql.DatabaseWrapper`` 或 "
"``django.db.backends.mysql.DatabaseWrapper`` 等。"

msgid ""
"The database connection that was opened. This can be used in a multiple-"
"database configuration to differentiate connection signals from different "
"databases."
msgstr "打开的数据库连接。这在多数据库配置中可以用来区分不同数据库的连接信号。"

msgid "``TemplateResponse`` and ``SimpleTemplateResponse``"
msgstr "``TemplateResponse`` 和 ``SimpleTemplateResponse``"

msgid ""
"Standard :class:`~django.http.HttpResponse` objects are static structures. "
"They are provided with a block of pre-rendered content at time of "
"construction, and while that content can be modified, it isn't in a form "
"that makes it easy to perform modifications."
msgstr ""
"标准 :class:`~django.http.HttpResponse` 对象是静态结构。它们在构建时提供了一"
"个预渲染的内容块，虽然这些内容可以修改，但它的形式并不便于进行修改。"

msgid ""
"However, it can sometimes be beneficial to allow decorators or middleware to "
"modify a response *after* it has been constructed by the view. For example, "
"you may want to change the template that is used, or put additional data "
"into the context."
msgstr ""
"然而，有时允许装饰者或中间件在视图构建响应后修改响应可能是有益的。例如，你可"
"能想改变所使用的模板，或者在上下文中放入额外的数据。"

msgid ""
"TemplateResponse provides a way to do just that. Unlike basic :class:"
"`~django.http.HttpResponse` objects, TemplateResponse objects retain the "
"details of the template and context that was provided by the view to compute "
"the response. The final output of the response is not computed until it is "
"needed, later in the response process."
msgstr ""
"TemplateResponse 提供了一种方法来实现这一点。与基本的 :class:`~django.http."
"HttpResponse` 对象不同，TemplateResponse 对象保留了模板和上下文的细节，这些细"
"节是由视图提供的，用于计算响应。响应的最终输出直到需要时才会计算，在响应过程"
"的后面。"

msgid "``SimpleTemplateResponse`` objects"
msgstr "``SimpleTemplateResponse`` 对象"

msgid ""
"The name of the template to be rendered. Accepts a backend-dependent "
"template object (such as those returned by :func:`~django.template.loader."
"get_template()`), the name of a template, or a list of template names."
msgstr ""
"要渲染的模板的名称。接受一个依赖于后台的模板对象（如 :func:`~django.template."
"loader.get_template()` 返回的模板对象）、一个模板的名称或一个模板名称列表。"

msgid "Example: ``['foo.html', 'path/to/bar.html']``"
msgstr "例如： ``['foo.html', 'path/to/bar.html']``"

msgid ""
"The context data to be used when rendering the template. It must be a :class:"
"`dict`."
msgstr "渲染模板时要使用的上下文数据，必须是 :class:`dict`。"

msgid "Example: ``{'foo': 123}``"
msgstr "例如： ``{'foo': 123}``"

msgid ""
"The current rendered value of the response content, using the current "
"template and context data."
msgstr "响应内容的当前渲染值，使用当前模板和上下文数据。"

msgid "A boolean indicating whether the response content has been rendered."
msgstr "表示响应内容是否已呈现的布尔值。"

msgid ""
"Instantiates a :class:`~django.template.response.SimpleTemplateResponse` "
"object with the given template, context, content type, HTTP status, and "
"charset."
msgstr ""
"用给定的模板、上下文、内容类型、HTTP 状态和字符集实例化一个 :class:`~django."
"template.response.SimpleTemplateResponse` 对象。"

msgid ""
"A backend-dependent template object (such as those returned by :func:"
"`~django.template.loader.get_template()`), the name of a template, or a list "
"of template names."
msgstr ""
"依赖于后台的模板对象（如 :func:`~django.template.loader.get_template()` 返回"
"的模板对象），模板的名称，或者模板名称的列表。"

msgid ""
"A :class:`dict` of values to add to the template context. By default, this "
"is an empty dictionary."
msgstr ""
"一个 :class:`dict` 的值，用于添加到模板上下文中。默认情况下，这是一个空字典。"

msgid "``content_type``"
msgstr "``content_type``"

msgid ""
"The value included in the HTTP ``Content-Type`` header, including the MIME "
"type specification and the character set encoding. If ``content_type`` is "
"specified, then its value is used. Otherwise, ``'text/html'`` is used."
msgstr ""
"包含在 HTTP ``Content-Type`` 头中的值，包括 MIME 类型规格和字符集编码。如果指"
"定了 ``content_type``，则使用其值。否则，使用 ``'text/html'``。"

msgid "``status``"
msgstr "``status``"

msgid "The HTTP status code for the response."
msgstr "响应的 HTTP 状态码。"

msgid "``charset``"
msgstr "``charset``"

msgid ""
"The charset in which the response will be encoded. If not given it will be "
"extracted from ``content_type``, and if that is unsuccessful, the :setting:"
"`DEFAULT_CHARSET` setting will be used."
msgstr ""
"响应将被编码的字符集。如果没有给定，将从 ``content_type`` 中提取，如果不成"
"功，将使用 :setting:`DEFAULT_CHARSET` 设置。"

msgid ""
"The :setting:`NAME <TEMPLATES-NAME>` of a template engine to use for loading "
"the template."
msgstr "用于加载模板的模板引擎的 :setting:`NAME <TEMPLATES-NAME>` 。"

msgid "``headers``"
msgstr "``headers``"

msgid "A :class:`dict` of HTTP headers to add to the response."
msgstr ""

msgid ""
"Preprocesses context data that will be used for rendering a template. "
"Accepts a :class:`dict` of context data. By default, returns the same :class:"
"`dict`."
msgstr ""
"预处理将用于渲染模板的上下文数据。接受一个 :class:`dict` 的上下文数据。默认情"
"况下，返回相同的 :class:`dict`。"

msgid "Override this method in order to customize the context."
msgstr "覆盖此方法，以自定义上下文。"

msgid ""
"Resolves the template instance to use for rendering. Accepts a backend-"
"dependent template object (such as those returned by :func:`~django.template."
"loader.get_template()`), the name of a template, or a list of template names."
msgstr ""
"解析用于渲染的模板实例。接受一个依赖于后台的模板对象（例如 :func:`~django."
"template.loader.get_template()` 返回的对象），模板的名称，或者模板名称的列"
"表。"

msgid "Returns the backend-dependent template object instance to be rendered."
msgstr "返回要渲染的依赖于后台的模板对象实例。"

msgid "Override this method in order to customize template loading."
msgstr "覆盖此方法，以便自定义模板加载。"

msgid ""
"Add a callback that will be invoked after rendering has taken place. This "
"hook can be used to defer certain processing operations (such as caching) "
"until after rendering has occurred."
msgstr ""
"添加一个回调，将在渲染发生后被调用。该钩子可用于将某些处理操作（如缓存）推迟"
"到渲染发生后。"

msgid ""
"If the :class:`~django.template.response.SimpleTemplateResponse` has already "
"been rendered, the callback will be invoked immediately."
msgstr ""
"如果 :class:`~django.template.response.SimpleTemplateResponse` 已经被渲染，回"
"调将被立即调用。"

msgid ""
"When called, callbacks will be passed a single argument -- the rendered :"
"class:`~django.template.response.SimpleTemplateResponse` instance."
msgstr ""
"当调用时，回调将被传递一个单一的参数——渲染的 :class:`~django.template."
"response.SimpleTemplateResponse` 实例。"

msgid ""
"If the callback returns a value that is not ``None``, this will be used as "
"the response instead of the original response object (and will be passed to "
"the next post rendering callback etc.)"
msgstr ""
"如果回调返回一个不是 ``None`` 的值，这个值将被用作响应，而不是原来的响应对象"
"（并将传递给下一个渲染后回调等）。"

msgid ""
"Sets ``response.content`` to the result obtained by :attr:"
"`SimpleTemplateResponse.rendered_content`, runs all post-rendering "
"callbacks, and returns the resulting response object."
msgstr ""
"将 ``response.content`` 设置为由 :attr:`SimpleTemplateResponse."
"rendered_content` 得到的结果，运行所有的渲染后回调，并返回结果的响应对象。"

msgid ""
"``render()`` will only have an effect the first time it is called. On "
"subsequent calls, it will return the result obtained from the first call."
msgstr ""
"``render()`` 只有在第一次被调用时才会产生效果。在以后的调用中，它将返回第一次"
"调用的结果。"

msgid "``TemplateResponse`` objects"
msgstr "``TemplateResponse`` 对象"

msgid ""
"``TemplateResponse`` is a subclass of :class:`~django.template.response."
"SimpleTemplateResponse` that knows about the current :class:`~django.http."
"HttpRequest`."
msgstr ""
"``TemplateResponse`` 是 :class:`~django.template.response."
"SimpleTemplateResponse` 的一个子类，它知道当前的 :class:`~django.http."
"HttpRequest`。"

msgid ""
"Instantiates a :class:`~django.template.response.TemplateResponse` object "
"with the given request, template, context, content type, HTTP status, and "
"charset."
msgstr ""
"用给定的请求、模板、上下文、内容类型、HTTP 状态和字符集实例化一个 :class:"
"`~django.template.response.TemplateResponse` 对象。"

msgid "An :class:`~django.http.HttpRequest` instance."
msgstr "一个 :class:`~django.http.HttpRequest` 实例。"

msgid "The rendering process"
msgstr "渲染过程"

msgid ""
"Before a :class:`~django.template.response.TemplateResponse` instance can be "
"returned to the client, it must be rendered. The rendering process takes the "
"intermediate representation of template and context, and turns it into the "
"final byte stream that can be served to the client."
msgstr ""
"在将 :class:`~django.template.response.TemplateResponse` 实例返回给客户端之"
"前，必须对其进行渲染。渲染过程将模板和上下文的中间表示方式，变成最终的字节"
"流，可以提供给客户端。"

msgid ""
"There are three circumstances under which a ``TemplateResponse`` will be "
"rendered:"
msgstr "在三种情况下，会出现 ``TemplateResponse`` 被渲染："

msgid ""
"When the ``TemplateResponse`` instance is explicitly rendered, using the :"
"meth:`SimpleTemplateResponse.render()` method."
msgstr ""
"当使用 :meth:`SimpleTemplateResponse.render()` 方法显式渲染 "
"``TemplateResponse`` 实例时。"

msgid ""
"When the content of the response is explicitly set by assigning ``response."
"content``."
msgstr "当通过指定 ``response.content`` 明确设置响应的内容时。"

msgid ""
"After passing through template response middleware, but before passing "
"through response middleware."
msgstr "通过模板响应中间件后，但在通过响应中间件之前。"

msgid ""
"A ``TemplateResponse`` can only be rendered once. The first call to :meth:"
"`SimpleTemplateResponse.render` sets the content of the response; subsequent "
"rendering calls do not change the response content."
msgstr ""
"一个 ``TemplateResponse`` 只能被渲染一次。第一次调用 :meth:"
"`SimpleTemplateResponse.render` 时，会设置响应的内容；后续的渲染调用不会改变"
"响应内容。"

msgid ""
"However, when ``response.content`` is explicitly assigned, the change is "
"always applied. If you want to force the content to be re-rendered, you can "
"reevaluate the rendered content, and assign the content of the response "
"manually:"
msgstr ""

msgid "Post-render callbacks"
msgstr "渲染后回调"

msgid ""
"Some operations -- such as caching -- cannot be performed on an unrendered "
"template. They must be performed on a fully complete and rendered response."
msgstr ""
"有些操作——例如缓存——不能在未渲染的模板上执行。它们必须在一个完全完整的、已渲"
"染的响应上执行。"

msgid ""
"If you're using middleware, you can do that. Middleware provides multiple "
"opportunities to process a response on exit from a view. If you put behavior "
"in the response middleware, it's guaranteed to execute after template "
"rendering has taken place."
msgstr ""
"如果你使用的是中间件，你可以这样做。中间件提供了多种机会来处理从视图退出时的"
"响应。如果你把行为放在响应中间件中，就会保证在模板渲染发生后执行。"

msgid ""
"However, if you're using a decorator, the same opportunities do not exist. "
"Any behavior defined in a decorator is handled immediately."
msgstr ""
"然而，如果你使用的是一个装饰器，则不存在同样的机会。任何在装饰器中定义的行为"
"都会被立即处理。"

msgid ""
"To compensate for this (and any other analogous use cases), :class:"
"`TemplateResponse` allows you to register callbacks that will be invoked "
"when rendering has completed. Using this callback, you can defer critical "
"processing until a point where you can guarantee that rendered content will "
"be available."
msgstr ""
"为了弥补这一点（以及任何其他类似的用例）， :class:`TemplateResponse` 允许你注"
"册回调，当渲染完成后，这些回调将被调用。使用这个回调，你可以将关键的处理推迟"
"到可以保证渲染内容可用的时候。"

msgid ""
"To define a post-render callback, define a function that takes a single "
"argument -- response -- and register that function with the template "
"response::"
msgstr ""
"要定义一个渲染后的回调，定义一个接受一个参数 response 的函数，然后用模板响应"
"注册该函数："

msgid ""
"``my_render_callback()`` will be invoked after the ``mytemplate.html`` has "
"been rendered, and will be provided the fully rendered :class:"
"`TemplateResponse` instance as an argument."
msgstr ""
"``my_render_callback()`` 将在 ``mytemplate.html`` 被渲染后被调用，并将提供完"
"全渲染的 :class:`TemplateResponse` 实例作为参数。"

msgid ""
"If the template has already been rendered, the callback will be invoked "
"immediately."
msgstr "如果模板已经被渲染，回调将被立即调用。"

msgid "Using ``TemplateResponse`` and ``SimpleTemplateResponse``"
msgstr "使用 ``TemplateResponse`` 和 ``SimpleTemplateResponse``"

msgid ""
"A :class:`TemplateResponse` object can be used anywhere that a normal :class:"
"`django.http.HttpResponse` can be used. It can also be used as an "
"alternative to calling :func:`~django.shortcuts.render()`."
msgstr ""
"一个 :class:`TemplateResponse` 对象可以被用于任何可以使用普通 :class:`django."
"http.HttpResponse` 的地方。它也可以作为调用 :func:`~django.shortcuts."
"render()` 的替代。"

msgid ""
"For example, the following view returns a :class:`TemplateResponse` with a "
"template and a context containing a queryset::"
msgstr ""
"例如，下面的视图返回一个 :class:`TemplateResponse`，其中有一个模板和一个包含"
"查询集的上下文："

msgid "The Django template language: for Python programmers"
msgstr "Django 模板语言：对于 Python 开发者"

msgid ""
"This document explains the Django template system from a technical "
"perspective -- how it works and how to extend it. If you're looking for "
"reference on the language syntax, see :doc:`/ref/templates/language`."
msgstr ""
"这篇文档从技术角度解释了 Django 模板系统——它是如何工作的以及如何扩展它。如果"
"你想找语言语法的参考，请看 :doc:`/ref/templates/language`。"

msgid ""
"It assumes an understanding of templates, contexts, variables, tags, and "
"rendering. Start with the :ref:`introduction to the Django template language "
"<template-language-intro>` if you aren't familiar with these concepts."
msgstr ""
"它的前提是对模板、上下文、变量、标签和渲染的理解。如果你不熟悉这些概念，可以"
"从 :ref:`Django 模板语言介绍 <template-language-intro>` 开始。"

msgid "Using the template system in Python is a three-step process:"
msgstr "在 Python 中使用模板系统是一个三步走的过程："

msgid "You configure an :class:`Engine`."
msgstr "你设置了一个 :class:`Engine`。"

msgid "You compile template code into a :class:`Template`."
msgstr "你把模板代码编译成一个 :class:`Template`。"

msgid "You render the template with a :class:`Context`."
msgstr "你用一个 :class:`Context` 来渲染模板。"

msgid ""
"Django projects generally rely on the :ref:`high level, backend agnostic "
"APIs <template-engines>` for each of these steps instead of the template "
"system's lower level APIs:"
msgstr ""
"Django 项目一般依靠 :ref:`高级、后端不可知的 API <template-engines>` 来完成每"
"一个步骤，而不是模板系统的低级 API。"

msgid ""
"For each :class:`~django.template.backends.django.DjangoTemplates` backend "
"in the :setting:`TEMPLATES` setting, Django instantiates an :class:"
"`Engine`. :class:`~django.template.backends.django.DjangoTemplates` wraps :"
"class:`Engine` and adapts it to the common template backend API."
msgstr ""
"对于 :setting:`TEMPLATES` 设置中的每一个 :class:`~django.template.backends."
"django.DjangoTemplates` 后端，Django 都会实例化一个 :class:`Engine`。 :class:"
"`~django.template.backends.django.DjangoTemplates` 封装 :class:`Engine` 并将"
"其适配到通用的模板后端 API 中。"

msgid ""
"The :mod:`django.template.loader` module provides functions such as :func:"
"`~django.template.loader.get_template` for loading templates. They return a "
"``django.template.backends.django.Template`` which wraps the actual :class:"
"`django.template.Template`."
msgstr ""
":mod:`django.template.loader` 模块提供了 :func:`~django.template.loader."
"get_template` 等函数来加载模板。它们返回一个 ``django.template.backends."
"django.Template``，它封装了实际的 :class:`django.template`。"

msgid ""
"The ``Template`` obtained in the previous step has a :meth:`~django.template."
"backends.base.Template.render` method which marshals a context and possibly "
"a request into a :class:`Context` and delegates the rendering to the "
"underlying :class:`Template`."
msgstr ""
"上一步得到的 ``Template`` 有一个 :meth:`~django.template.backends.base."
"Template.render` 方法，它将一个上下文和可能的请求汇集到一个 :class:`Context` "
"中，并委托底层的 :class:`Template` 进行渲染。"

msgid "Configuring an engine"
msgstr "设置引擎"

msgid ""
"If you are using the :class:`~django.template.backends.django."
"DjangoTemplates` backend, this probably isn't the documentation you're "
"looking for. An instance of the ``Engine`` class described below is "
"accessible using the ``engine`` attribute of that backend and any attribute "
"defaults mentioned below are overridden by what's passed by :class:`~django."
"template.backends.django.DjangoTemplates`."
msgstr ""
"如果你使用的是 :class:`~django.template.backends.django.DjangoTemplates` 后"
"端，这可能不是你要找的文档。下面描述的 ``Engine`` 类的实例可以通过该后端的 "
"``engine`` 属性来访问，下面提到的任何属性默认值都会被 :class:`~django."
"template.backends.django.DjangoTemplates` 传递的内容所覆盖。"

msgid ""
"When instantiating an ``Engine`` all arguments must be passed as keyword "
"arguments:"
msgstr "当实例化一个 ``Engine`` 时，所有的参数都必须作为关键字参数传递。"

msgid ""
"``dirs`` is a list of directories where the engine should look for template "
"source files. It is used to configure :class:`filesystem.Loader <django."
"template.loaders.filesystem.Loader>`."
msgstr ""
"``dirs`` 是引擎应该寻找模板源文件的目录列表。它用于配置 :class:`filesystem."
"Loader <django.template.loaders.filesystem.Loader>`。"

msgid "It defaults to an empty list."
msgstr "默认为空列表。"

msgid "``app_dirs`` only affects the default value of ``loaders``. See below."
msgstr "``app_dirs`` 只影响 ``loaders`` 的默认值。见下文。"

msgid "It defaults to ``False``."
msgstr "默认为 ``False``。"

msgid "``autoescape`` controls whether HTML autoescaping is enabled."
msgstr "``autoescape`` 控制是否启用 HTML 自动转码。"

msgid "It defaults to ``True``."
msgstr "默认为 ``True``。"

msgid "Only set it to ``False`` if you're rendering non-HTML templates!"
msgstr "只有当你渲染非 HTML 模板时，才将其设置为 ``False``！"

msgid ""
"``context_processors`` is a list of dotted Python paths to callables that "
"are used to populate the context when a template is rendered with a request. "
"These callables take a request object as their argument and return a :class:"
"`dict` of items to be merged into the context."
msgstr ""
"``context_processors`` 是一个点分隔 Python 路径的列表，当一个模板被请求渲染"
"时，这些可调用对象被用来填充上下文。这些可调用对象以一个请求对象作为参数，并"
"返回一个 :class:`dict` 的项目，这些项目将被合并到上下文中。"

msgid "See :class:`~django.template.RequestContext` for more information."
msgstr "查看 :class:`~django.template.RequestContext` 获取更多信息。"

msgid ""
"``debug`` is a boolean that turns on/off template debug mode. If it is "
"``True``, the template engine will store additional debug information which "
"can be used to display a detailed report for any exception raised during "
"template rendering."
msgstr ""
"``debug`` 是一个开启／关闭模板调试模式的布尔值。如果它为 ``True``，模板引擎将"
"存储额外的调试信息，这些信息可用于显示模板渲染过程中出现的任何异常的详细报"
"告。"

msgid ""
"``loaders`` is a list of template loader classes, specified as strings. Each "
"``Loader`` class knows how to import templates from a particular source. "
"Optionally, a tuple can be used instead of a string. The first item in the "
"tuple should be the ``Loader`` class name, subsequent items are passed to "
"the ``Loader`` during initialization."
msgstr ""
"``loaders`` 是一个模板加载器类的列表，以字符串形式指定。每个 ``Loader`` 类都"
"知道如何从特定来源导入模板。可以选择使用元组来代替字符串。元组中的第一项应该"
"是 ``Loader`` 类名，随后的项目在初始化时传递给 ``Loader``。"

msgid "It defaults to a list containing:"
msgstr "它默认为包含以下内容的列表："

msgid "``'django.template.loaders.filesystem.Loader'``"
msgstr "``'django.template.loaders.filesystem.Loader'``"

msgid ""
"``'django.template.loaders.app_directories.Loader'`` if and only if "
"``app_dirs`` is ``True``."
msgstr ""
"``'django.template.loaders.app_directories.Loader'`` 如果且仅当 ``app_dirs`` "
"为 ``True`` 时。"

msgid ""
"These loaders are then wrapped in :class:`django.template.loaders.cached."
"Loader`."
msgstr ""

msgid ""
"In older versions, the cached template loader was only enabled by default "
"when ``DEBUG`` was ``False``."
msgstr ""

msgid "See :ref:`template-loaders` for details."
msgstr "查看 :ref:`template-loaders` 获取详细信息。"

msgid ""
"``string_if_invalid`` is the output, as a string, that the template system "
"should use for invalid (e.g. misspelled) variables."
msgstr ""
"``string_if_invalid`` 是模板系统对无效变量（如拼写错误）应使用的字符串输出。"

msgid "It defaults to the empty string."
msgstr "默认为空字符串。"

msgid "See :ref:`invalid-template-variables` for details."
msgstr "查看 :ref:`invalid-template-variables` 获取更多信息。"

msgid "``file_charset`` is the charset used to read template files on disk."
msgstr "``file_charset`` 是用来读取磁盘上模板文件的字符集。"

msgid "It defaults to ``'utf-8'``."
msgstr "默认为 ``'utf-8'``。"

msgid ""
"``'libraries'``: A dictionary of labels and dotted Python paths of template "
"tag modules to register with the template engine. This is used to add new "
"libraries or provide alternate labels for existing ones. For example::"
msgstr ""
"``'libraries'``：模板标签模块的标签和点分隔 Python 路径字典，用于向模板引擎注"
"册。它用于添加新库或为现有库提供替代标签。例如："

msgid ""
"Libraries can be loaded by passing the corresponding dictionary key to the :"
"ttag:`{% load %}<load>` tag."
msgstr "可以通过将相应的字典键传递到 :ttag:`{% load %}<load>` 标签来加载库。"

msgid ""
"``'builtins'``: A list of dotted Python paths of template tag modules to add "
"to :doc:`built-ins </ref/templates/builtins>`. For example::"
msgstr ""
"``'builtins'``：要添加的 :doc:`内置模板标签和过滤器 </ref/templates/"
"builtins>` 的点分隔 Python 路径列表。例如："

msgid ""
"Tags and filters from built-in libraries can be used without first calling "
"the :ttag:`{% load %}<load>` tag."
msgstr ""
"可以使用内置库中的标签和过滤器，而不需要先调用 :ttag:`{% load %}<load>` 标"
"签。"

msgid ""
"Returns the underlying :class:`Engine` from the first configured :class:"
"`~django.template.backends.django.DjangoTemplates` engine. Raises :exc:"
"`~django.core.exceptions.ImproperlyConfigured` if no engines are configured."
msgstr ""
"从第一个配置的 :class:`~django.template.backends.django.DjangoTemplates` 引擎"
"中返回底层 :class:`Engine`。如果没有配置引擎，则引发 :exc:`~django.core."
"exceptions.ImproperlyConfigured`。"

msgid ""
"It's required for preserving APIs that rely on a globally available, "
"implicitly configured engine. Any other use is strongly discouraged."
msgstr ""
"这是为保存依赖于全局可用、隐式配置引擎的 API 所必需的。任何其他用途都是不鼓励"
"的。"

msgid ""
"Compiles the given template code and returns a :class:`Template` object."
msgstr "编译给定的模板代码并返回一个 :class:`Template` 对象。"

msgid ""
"Loads a template with the given name, compiles it and returns a :class:"
"`Template` object."
msgstr "加载给定名称的模板，编译后返回一个 :class:`Template` 对象。"

msgid ""
"Like :meth:`~Engine.get_template`, except it takes a list of names and "
"returns the first template that was found."
msgstr ""
"就像 :meth:`~Engine.get_template` 一样，只不过它接收一个名称列表，并返回找到"
"的第一个模板。"

msgid "Loading a template"
msgstr "加载模板"

msgid ""
"The recommended way to create a :class:`Template` is by calling the factory "
"methods of the :class:`Engine`: :meth:`~Engine.get_template`, :meth:`~Engine."
"select_template` and :meth:`~Engine.from_string`."
msgstr ""
"推荐的创建 :class:`Template` 的方法是调用 :class:`Engine` 的工厂方法： :meth:"
"`~Engine.get_template`、 :meth:`~Engine.select_template` 和 :meth:`~Engine."
"from_string`。"

msgid ""
"In a Django project where the :setting:`TEMPLATES` setting defines a :class:"
"`~django.template.backends.django.DjangoTemplates` engine, it's possible to "
"instantiate a :class:`Template` directly. If more than one :class:`~django."
"template.backends.django.DjangoTemplates` engine is defined, the first one "
"will be used."
msgstr ""
"在 Django 项目中，如果 :setting:`TEMPLATES` 设置定义了一个 :class:`~django."
"template.backends.django.DjangoTemplates` 引擎，那么可以直接实例化一个 :"
"class:`Template`。如果定义了多个 :class:`~django.template.backends.django."
"DjangoTemplates` 引擎，则使用第一个引擎。"

msgid ""
"This class lives at ``django.template.Template``. The constructor takes one "
"argument — the raw template code::"
msgstr ""
"这个类位于 ``django.template.Template``。构造函数需要一个参数——原始模板代码："

msgid "Behind the scenes"
msgstr "幕后"

msgid ""
"The system only parses your raw template code once -- when you create the "
"``Template`` object. From then on, it's stored internally as a tree "
"structure for performance."
msgstr ""
"系统只在创建 ``Template`` 对象时解析一次原始模板代码。从那时起，为了提高性"
"能，它将以树结构的形式存储在内部。"

msgid ""
"Even the parsing itself is quite fast. Most of the parsing happens via a "
"single call to a single, short, regular expression."
msgstr ""
"即使是解析本身也是相当快的。大部分的解析工作都是通过调用一个简短的正则表达式"
"来完成的。"

msgid "Rendering a context"
msgstr "渲染上下文"

msgid ""
"Once you have a compiled :class:`Template` object, you can render a context "
"with it. You can reuse the same template to render it several times with "
"different contexts."
msgstr ""
"一旦你有一个编译过的 :class:`Template` 对象，你就可以用它来渲染一个上下文。你"
"可以重复使用同一个模板，在不同的上下文中多次渲染它。"

msgid ""
"The constructor of ``django.template.Context`` takes an optional argument — "
"a dictionary mapping variable names to variable values."
msgstr ""
"``django.template.Context`` 的构造函数需要一个可选的参数——一个将变量名映射到"
"变量值的字典。"

msgid "For details, see :ref:`playing-with-context` below."
msgstr "详情请看下面的 :ref:`playing-with-context`。"

msgid ""
"Call the :class:`Template` object's ``render()`` method with a :class:"
"`Context` to \"fill\" the template:"
msgstr ""

msgid "Variables and lookups"
msgstr "变量和查找"

msgid ""
"Variable names must consist of any letter (A-Z), any digit (0-9), an "
"underscore (but they must not start with an underscore) or a dot."
msgstr ""
"变量名称必须由任何字母（A-Z）、任何数字（0-9）、下划线（但不得以下划线开头）"
"或点组成。"

msgid ""
"Dots have a special meaning in template rendering. A dot in a variable name "
"signifies a **lookup**. Specifically, when the template system encounters a "
"dot in a variable name, it tries the following lookups, in this order:"
msgstr ""
"点在模板渲染中具有特殊的意义。变量名中的点表示 **查找**。具体来说，当模板系统"
"遇到变量名中的点时，它将按照以下顺序尝试进行查找："

msgid "Dictionary lookup. Example: ``foo[\"bar\"]``"
msgstr "词典查找。例如：``foo[\"bar\"]``"

msgid "Attribute lookup. Example: ``foo.bar``"
msgstr "属性查找。例如：``foo.bar``"

msgid "List-index lookup. Example: ``foo[bar]``"
msgstr "列表索引查找。例如：``foo[bar]``"

msgid ""
"Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be "
"interpreted as a literal string and not using the value of the variable "
"\"bar\", if one exists in the template context."
msgstr ""
"请注意，像 ``{{ foo.bar }}`` 这样的模板表达式中的“bar”将被解释为一个字面字符"
"串，而不是使用变量“bar”的值，如果模板上下文中存在的话。"

msgid ""
"The template system uses the first lookup type that works. It's short-"
"circuit logic. Here are a few examples:"
msgstr ""

msgid ""
"If any part of the variable is callable, the template system will try "
"calling it. Example:"
msgstr ""

msgid ""
"Callable variables are slightly more complex than variables which only "
"require straight lookups. Here are some things to keep in mind:"
msgstr ""
"可调用对象的变量比只需要直接查找的变量要复杂一些。下面是一些需要注意的事项："

msgid ""
"If the variable raises an exception when called, the exception will be "
"propagated, unless the exception has an attribute "
"``silent_variable_failure`` whose value is ``True``. If the exception *does* "
"have a ``silent_variable_failure`` attribute whose value is ``True``, the "
"variable will render as the value of the engine's ``string_if_invalid`` "
"configuration option (an empty string, by default). Example:"
msgstr ""

msgid ""
"Note that :exc:`django.core.exceptions.ObjectDoesNotExist`, which is the "
"base class for all Django database API ``DoesNotExist`` exceptions, has "
"``silent_variable_failure = True``. So if you're using Django templates with "
"Django model objects, any ``DoesNotExist`` exception will fail silently."
msgstr ""
"请注意 :exc:`django.core.exceptions.ObjectDoesNotExist` 是所有 Django 数据库 "
"API ``DoesNotExist`` 异常的基类，有 ``silent_variable_failure = True``。所以"
"如果你使用 Django 模板与 Django 模型对象，任何 ``DoesNotExist`` 异常都会静默"
"失败。"

msgid ""
"A variable can only be called if it has no required arguments. Otherwise, "
"the system will return the value of the engine's ``string_if_invalid`` "
"option."
msgstr ""
"一个变量只有在没有所需参数的情况下才可以被调用，否则，系统将返回引擎的 "
"``string_if_invalid`` 选项的值。否则，系统将返回引擎的 ``string_if_invalid`` "
"选项的值。"

msgid ""
"There can be side effects when calling some variables, and it'd be either "
"foolish or a security hole to allow the template system to access them."
msgstr ""
"在调用一些变量的时候可能会有副作用，如果让模板系统访问这些变量，要么是傻瓜，"
"要么是安全漏洞。"

msgid ""
"A good example is the :meth:`~django.db.models.Model.delete` method on each "
"Django model object. The template system shouldn't be allowed to do "
"something like this:"
msgstr ""

msgid ""
"To prevent this, set an ``alters_data`` attribute on the callable variable. "
"The template system won't call a variable if it has ``alters_data=True`` "
"set, and will instead replace the variable with ``string_if_invalid``, "
"unconditionally.  The dynamically-generated :meth:`~django.db.models.Model."
"delete` and :meth:`~django.db.models.Model.save` methods on Django model "
"objects get ``alters_data=True`` automatically. Example::"
msgstr ""
"为了防止这种情况发生，在可调用的变量上设置一个 ``alters_data`` 属性。如果设置"
"了 ``alters_data=True``，模板系统将不会调用变量，而是无条件地用 "
"``string_if_invalid`` 替换变量。 动态生成的 :meth:`~django.db.models.Model."
"delete` 和 :meth:`~django.db.models.model.save` 方法会自动获取 "
"``alters_data=True``。例如："

msgid ""
"Occasionally you may want to turn off this feature for other reasons, and "
"tell the template system to leave a variable uncalled no matter what.  To do "
"so, set a ``do_not_call_in_templates`` attribute on the callable with the "
"value ``True``.  The template system then will act as if your variable is "
"not callable (allowing you to access attributes of the callable, for "
"example)."
msgstr ""
"偶尔你可能会因为其他原因想关闭这个功能，并告诉模板系统无论如何都不调用一个变"
"量。 要做到这一点，请在可调用变量上设置一个 ``do_not_call_in_templates`` 属"
"性，其值为 ``True``。 这样，模板系统就会把你的变量当作不可调用的变量（例如，"
"允许你访问可调用变量的属性）。"

msgid "How invalid variables are handled"
msgstr "如何处理无效变量"

msgid ""
"Generally, if a variable doesn't exist, the template system inserts the "
"value of the engine's ``string_if_invalid`` configuration option, which is "
"set to ``''`` (the empty string) by default."
msgstr ""
"一般来说，如果一个变量不存在，模板系统会插入引擎的 ``string_if_invalid`` 配置"
"选项的值，默认设置为 ``''`` （空字符串）。"

msgid ""
"Filters that are applied to an invalid variable will only be applied if "
"``string_if_invalid`` is set to ``''`` (the empty string). If "
"``string_if_invalid`` is set to any other value, variable filters will be "
"ignored."
msgstr ""
"只有当 ``string_if_invalid`` 被设置为 ``''`` （空字符串）时，才会对无效变量应"
"用过滤器。如果 ``string_if_invalid`` 被设置为任何其他值，变量过滤器将被忽略。"

msgid ""
"This behavior is slightly different for the ``if``, ``for`` and ``regroup`` "
"template tags. If an invalid variable is provided to one of these template "
"tags, the variable will be interpreted as ``None``. Filters are always "
"applied to invalid variables within these template tags."
msgstr ""
"对于 ``if``、``for`` 和 ``regroup`` 模板标签，这种行为略有不同。如果向这些模"
"板标签之一提供了一个无效的变量，该变量将被解释为 ``None``。过滤器总是应用于这"
"些模板标签中的无效变量。"

msgid ""
"If ``string_if_invalid`` contains a ``'%s'``, the format marker will be "
"replaced with the name of the invalid variable."
msgstr ""
"如果 ``string_if_invalid`` 包含 ``'%s'``，格式标记将被替换为无效变量的名称。"

msgid "For debug purposes only!"
msgstr "仅供调试使用！"

msgid ""
"While ``string_if_invalid`` can be a useful debugging tool, it is a bad idea "
"to turn it on as a 'development default'."
msgstr ""
"虽然 ``string_if_invalid`` 是一个有用的调试工具，但把它作为“开发默认值”是一个"
"坏主意。"

msgid ""
"Many templates, including some of Django's, rely upon the silence of the "
"template system when a nonexistent variable is encountered. If you assign a "
"value other than ``''`` to ``string_if_invalid``, you will experience "
"rendering problems with these templates and sites."
msgstr ""
"很多模板，包括一些 Django 的模板，在遇到不存在的变量时，都会依靠模板系统的静"
"默。如果你给 ``''``  ``string_if_invalid`` 以外的值，你会在这些模板和网站上遇"
"到渲染问题。"

msgid ""
"Generally, ``string_if_invalid`` should only be enabled in order to debug a "
"specific template problem, then cleared once debugging is complete."
msgstr ""
"一般来说，``string_if_invalid`` 只有在调试某个特定的模板问题时才应该启用，调"
"试完成后再清除。"

msgid "Built-in variables"
msgstr "内置变量"

msgid ""
"Every context contains ``True``, ``False`` and ``None``. As you would "
"expect, these variables resolve to the corresponding Python objects."
msgstr ""
"每个上下文都包含 ``True``、``False`` 和 ``None``。正如你所期望的那样，这些变"
"量解析为相应的 Python 对象。"

msgid "Limitations with string literals"
msgstr "字符串的限制"

msgid ""
"Django's template language has no way to escape the characters used for its "
"own syntax. For example, the :ttag:`templatetag` tag is required if you need "
"to output character sequences like ``{%`` and ``%}``."
msgstr ""
"Django 的模板语言没有办法转义用于自己语法的字符。例如，如果你需要输出像 "
"``{%`` 和 ``%}`` 这样的字符序列，就需要使用 :ttag:`templatetag` 标签。"

msgid ""
"A similar issue exists if you want to include these sequences in template "
"filter or tag arguments. For example, when parsing a block tag, Django's "
"template parser looks for the first occurrence of ``%}`` after a ``{%``. "
"This prevents the use of ``\"%}\"`` as a string literal. For example, a "
"``TemplateSyntaxError`` will be raised for the following expressions:"
msgstr ""

msgid ""
"The same issue can be triggered by using a reserved sequence in filter "
"arguments:"
msgstr ""

msgid ""
"If you need to use strings with these sequences, store them in template "
"variables or use a custom template tag or filter to workaround the "
"limitation."
msgstr ""
"如果你需要使用这些序列的字符串，请将它们存储在模板变量中，或者使用自定义模板"
"标签或过滤器来解决这个限制。"

msgid "Playing with ``Context`` objects"
msgstr "使用 ``Context`` 对象"

msgid ""
"Most of the time, you'll instantiate :class:`Context` objects by passing in "
"a fully-populated dictionary to ``Context()``. But you can add and delete "
"items from a ``Context`` object once it's been instantiated, too, using "
"standard dictionary syntax:"
msgstr ""

msgid ""
"Returns the value for ``key`` if ``key`` is in the context, else returns "
"``otherwise``."
msgstr "如果 ``key`` 在上下文中，返回 ``key`` 的值，否则返回 ``otherwise``。"

msgid ""
"If ``key`` is in the context, returns its value. Otherwise inserts ``key`` "
"with a value of ``default`` and returns ``default``."
msgstr ""
"如果 ``key`` 在上下文中，则返回其值。否则用 ``default`` 值插入 ``key`` 并返"
"回 ``default``。"

msgid ""
"A ``Context`` object is a stack. That is, you can ``push()`` and ``pop()`` "
"it. If you ``pop()`` too much, it'll raise ``django.template."
"ContextPopException``:"
msgstr ""

msgid ""
"You can also use ``push()`` as a context manager to ensure a matching "
"``pop()`` is called."
msgstr ""
"你也可以使用 ``push()`` 作为上下文管理器，以确保匹配的 ``pop()`` 被调用。"

msgid ""
"All arguments passed to ``push()`` will be passed to the ``dict`` "
"constructor used to build the new context level."
msgstr ""
"传递给 ``push()`` 的所有参数都将传递给 ``dict`` 构造函数，用于建立新的上下文"
"层次。"

msgid ""
"In addition to ``push()`` and ``pop()``, the ``Context`` object also defines "
"an ``update()`` method. This works like ``push()`` but takes a dictionary as "
"an argument and pushes that dictionary onto the stack instead of an empty "
"one."
msgstr ""
"除了 ``push()`` 和 ``pop()`` 之外，``Context`` 对象还定义了一个 ``update()`` "
"方法。它的工作原理与 ``push()`` 类似，但它接受一个字典作为参数，并将该字典推"
"到栈上，而不是空的。"

msgid ""
"Like ``push()``, you can use ``update()`` as a context manager to ensure a "
"matching ``pop()`` is called."
msgstr ""
"像 ``push()`` 一样，你可以使用 ``update()`` 作为上下文管理器，以确保调用匹配"
"的 ``pop()``。"

msgid ""
"Using a ``Context`` as a stack comes in handy in :ref:`some custom template "
"tags <howto-writing-custom-template-tags>`."
msgstr ""
"在 :ref:`一些自定义模板标签 <howto-writing-custom-template-tags>` 中，使用 "
"``Context`` 作为栈是很方便的。"

msgid ""
"Using ``flatten()`` method you can get whole ``Context`` stack as one "
"dictionary including builtin variables."
msgstr ""
"使用 ``flatten()`` 方法，你可以得到整个 ``Context`` 堆栈作为一个字典，包括内"
"置的变量。"

msgid ""
"A ``flatten()`` method is also internally used to make ``Context`` objects "
"comparable."
msgstr "内部还使用 ``flatten()`` 方法使 ``Context`` 对象具有可比性。"

msgid ""
"Result from ``flatten()`` can be useful in unit tests to compare ``Context`` "
"against ``dict``::"
msgstr "``flatten()`` 的结果在单元测试中可以用来比较 ``Context`` 和 ``dict``："

msgid "Using ``RequestContext``"
msgstr "使用 ``RequestContext``"

msgid ""
"Django comes with a special ``Context`` class, ``django.template."
"RequestContext``, that acts slightly differently from the normal ``django."
"template.Context``. The first difference is that it takes an :class:`~django."
"http.HttpRequest` as its first argument. For example::"
msgstr ""
"Django 有一个特殊的 ``Context`` 类，``django.template.RequestContext``，它的"
"作用与普通的 ``django.template.Context`` 略有不同。第一个不同是它以一个 :"
"class:`~django.http.HttpRequest` 作为它的第一个参数。例如："

msgid ""
"The second difference is that it automatically populates the context with a "
"few variables, according to the engine's ``context_processors`` "
"configuration option."
msgstr ""
"第二个区别是，它根据引擎的 ``context_processors`` 配置选项，自动给上下文填充"
"一些变量。"

msgid ""
"The ``context_processors`` option is a list of callables -- called **context "
"processors** -- that take a request object as their argument and return a "
"dictionary of items to be merged into the context. In the default generated "
"settings file, the default template engine contains the following context "
"processors::"
msgstr ""
"``context_processors`` 选项是一个可调用的列表——称为 **上下文处理器**——它将一"
"个请求对象作为参数，并返回一个要合并到上下文中的项目字典。在默认生成的配置文"
"件中，默认模板引擎包含以下上下文处理器："

msgid ""
"In addition to these, :class:`RequestContext` always enables ``'django."
"template.context_processors.csrf'``.  This is a security related context "
"processor required by the admin and other contrib apps, and, in case of "
"accidental misconfiguration, it is deliberately hardcoded in and cannot be "
"turned off in the ``context_processors`` option."
msgstr ""
"除此以外，:class:`RequestContext` 总是启用 ``'django.template."
"context_processors.csrf'``。 这是管理和其他 contrib 应用所需要的安全相关的上"
"下文处理器，为了防止意外的错误配置，特意将其硬编码进去，不能在 "
"``context_processors`` 选项中关闭。"

msgid ""
"Each processor is applied in order. That means, if one processor adds a "
"variable to the context and a second processor adds a variable with the same "
"name, the second will override the first. The default processors are "
"explained below."
msgstr ""
"每个处理器都是按顺序应用的。这意味着，如果一个处理器向上下文添加了一个变量，"
"而第二个处理器添加了一个同名的变量，第二个处理器将覆盖第一个处理器。下面解释"
"默认的处理器。"

msgid "When context processors are applied"
msgstr "当应用上下文处理器时"

msgid ""
"Context processors are applied on top of context data. This means that a "
"context processor may overwrite variables you've supplied to your :class:"
"`Context` or :class:`RequestContext`, so take care to avoid variable names "
"that overlap with those supplied by your context processors."
msgstr ""
"上下文处理器是应用在上下文数据之上的。这意味着上下文处理器可能会覆盖你提供"
"给 :class:`Context` 或 :class:`RequestContext` 的变量，所以要注意避免变量名与"
"上下文处理器提供的变量名重叠。"

msgid ""
"If you want context data to take priority over context processors, use the "
"following pattern::"
msgstr "如果你想让上下文数据优先于上下文处理器，请使用以下模式："

msgid ""
"Django does this to allow context data to override context processors in "
"APIs such as :func:`~django.shortcuts.render` and :class:`~django.template."
"response.TemplateResponse`."
msgstr ""
"Django 这样做是为了让上下文数据覆盖 API 中的上下文处理器，如 :func:`~django."
"shortcuts.render` 和 :class:`~django.template.response.TemplateResponse`。"

msgid ""
"Also, you can give :class:`RequestContext` a list of additional processors, "
"using the optional, third positional argument, ``processors``. In this "
"example, the :class:`RequestContext` instance gets an ``ip_address`` "
"variable::"
msgstr ""
"此外，你还可以使用可选的第三个位置参数 ``processors``，给 :class:"
"`RequestContext` 一个额外的处理器列表。在这个例子中， :class:"
"`RequestContext` 实例得到一个 ``ip_address`` 变量："

msgid "Built-in template context processors"
msgstr "内置模板上下文处理器"

msgid "Here's what each of the built-in processors does:"
msgstr "下面是每个内置处理器的作用："

msgid "``django.contrib.auth.context_processors.auth``"
msgstr "``django.contrib.auth.context_processors.auth``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain these "
"variables:"
msgstr "如果启用了这个处理器，每一个 ``RequestContext`` 都会包含这些变量："

msgid ""
"``user`` -- An ``auth.User`` instance representing the currently logged-in "
"user (or an ``AnonymousUser`` instance, if the client isn't logged in)."
msgstr ""
"``user`` —— 代表当前登录用户的 ``auth.User`` 实例（如果客户端没有登录，则为 "
"``AnonymousUser`` 实例）。"

msgid ""
"``perms`` -- An instance of ``django.contrib.auth.context_processors."
"PermWrapper``, representing the permissions that the currently logged-in "
"user has."
msgstr ""
"``perms`` —— ``django.contrib.uth.context_processors.PermWrapper`` 的实例，表"
"示当前登录用户拥有的权限。"

msgid "``django.template.context_processors.debug``"
msgstr "``django.template.context_processors.debug``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain these "
"two variables -- but only if your :setting:`DEBUG` setting is set to "
"``True`` and the request's IP address (``request.META['REMOTE_ADDR']``) is "
"in the :setting:`INTERNAL_IPS` setting:"
msgstr ""
"如果启用了这个处理器，每一个 ``RequestContext`` 都会包含这两个变量——但前提是"
"你的 :setting:`DEBUG` 设置为 ``True``，并且请求的 IP 地址（``request."
"META['REMOTE_ADDR']``）在 :setting:`INTERNAL_IPS` 配置中："

msgid ""
"``debug`` -- ``True``. You can use this in templates to test whether you're "
"in :setting:`DEBUG` mode."
msgstr ""
"``debug`` —— ``True``。你可以在模板中使用它来测试你是否处于 :setting:`DEBUG` "
"模式。"

msgid ""
"``sql_queries`` -- A list of ``{'sql': ..., 'time': ...}`` dictionaries, "
"representing every SQL query that has happened so far during the request and "
"how long it took. The list is in order by database alias and then by query. "
"It's lazily generated on access."
msgstr ""
"``sql_queries`` —— ``{'sql': ..., 'time': ...}`` 字典的列表，表示在请求过程中"
"迄今为止发生的每一个 SQL 查询，以及花费的时间。这个列表是按照数据库别名，然后"
"按照查询的顺序排列的。它是在访问时惰性生成的。"

msgid "``django.template.context_processors.i18n``"
msgstr "``django.template.context_processors.i18n``"

msgid "``LANGUAGES`` -- The value of the :setting:`LANGUAGES` setting."
msgstr "``LANGUAGES`` —— :setting:`LANGUAGES` 配置值。"

msgid ""
"``LANGUAGE_BIDI`` -- ``True`` if the current language is a right-to-left "
"language, e.g. Hebrew, Arabic. ``False`` if it's a left-to-right language, e."
"g. English, French, German."
msgstr ""
"``LANGUAGE_BIDI`` —— ``True`` 如果当前语言是从右到左的语言，如希伯来语、阿拉"
"伯语。``False`` 如果是从左到右的语言，如英语、法语、德语。"

msgid ""
"``LANGUAGE_CODE`` -- ``request.LANGUAGE_CODE``, if it exists. Otherwise, the "
"value of the :setting:`LANGUAGE_CODE` setting."
msgstr ""
"``LANGUAGE_CODE`` —— ``request.LANGUAGE_CODE``，如果存在的话。否则，使用 :"
"setting:`LANGUAGE_CODE` 配置的值。"

msgid ""
"See :ref:`i18n template tags <i18n-template-tags>` for template tags that "
"generate the same values."
msgstr ""
"请参阅 :ref:`i18n 模板标签 <i18n-template-tags>`，了解产生相同值的模板标签。"

msgid "``django.template.context_processors.media``"
msgstr "``django.template.context_processors.media``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain a "
"variable ``MEDIA_URL``, providing the value of the :setting:`MEDIA_URL` "
"setting."
msgstr ""
"如果启用了这个处理器，每一个 ``RequestContext`` 都会包含一个变量 "
"``MEDIA_URL``，提供 :setting:`MEDIA_URL` 配置的值。"

msgid "``django.template.context_processors.static``"
msgstr "``django.template.context_processors.static``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain a "
"variable ``STATIC_URL``, providing the value of the :setting:`STATIC_URL` "
"setting."
msgstr ""
"如果启用了这个处理器，每个 ``RequestContext`` 都会包含一个变量 "
"``STATIC_URL``，提供 :setting:`STATIC_URL` 配置的值。"

msgid "``django.template.context_processors.csrf``"
msgstr "``django.template.context_processors.csrf``"

msgid ""
"This processor adds a token that is needed by the :ttag:`csrf_token` "
"template tag for protection against :doc:`Cross Site Request Forgeries </ref/"
"csrf>`."
msgstr ""
"该处理器添加了 :ttag:`csrf_token` 模板标签所需的令牌，以防止 :doc:`跨站点伪造"
"请求 </ref/csrf>`。"

msgid "``django.template.context_processors.request``"
msgstr "``django.template.context_processors.request``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain a "
"variable ``request``, which is the current :class:`~django.http.HttpRequest`."
msgstr ""
"如果启用了这个处理器，每个 ``RequestContext`` 都会包含一个变量 ``request``，"
"就是当前的 :class:`~django.http.HttpRequest`。"

msgid "``django.template.context_processors.tz``"
msgstr "``django.template.context_processors.tz``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain a "
"variable ``TIME_ZONE``, providing the name of the currently active time zone."
msgstr ""
"如果启用了这个处理器，每个 ``RequestContext`` 将包含一个变量 ``TIME_ZONE``，"
"提供当前活动时区的名称。"

msgid "``django.contrib.messages.context_processors.messages``"
msgstr "``django.contrib.messages.context_processors.messages``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain these "
"two variables:"
msgstr "如果启用了这个处理器，每一个 ``RequestContext`` 都会包含这两个变量："

msgid ""
"``messages`` -- A list of messages (as strings) that have been set via the :"
"doc:`messages framework </ref/contrib/messages>`."
msgstr ""
"``messages`` —— 通过 :doc:`消息框架 </ref/contrib/messages>` 设置的信息列表"
"（字符串）。"

msgid ""
"``DEFAULT_MESSAGE_LEVELS`` -- A mapping of the message level names to :ref:"
"`their numeric value <message-level-constants>`."
msgstr ""
"``DEFAULT_MESSAGE_LEVELS`` —— 信息级别名称与 :ref:`其数值 <message-level-"
"constants>` 的映射。"

msgid "Writing your own context processors"
msgstr "编写你自己的上下文处理器"

msgid ""
"A context processor has a simple interface: It's a Python function that "
"takes one argument, an :class:`~django.http.HttpRequest` object, and returns "
"a dictionary that gets added to the template context."
msgstr ""

msgid ""
"For example, to add the :setting:`DEFAULT_FROM_EMAIL` setting to every "
"context::"
msgstr ""

msgid ""
"Custom context processors can live anywhere in your code base. All Django "
"cares about is that your custom context processors are pointed to by the "
"``'context_processors'`` option in your :setting:`TEMPLATES` setting — or "
"the ``context_processors`` argument of :class:`~django.template.Engine` if "
"you're using it directly."
msgstr ""
"自定义上下文处理器可以存在于你的代码库中的任何地方。Django 只关心你的自定义上"
"下文处理器是否被你的 :setting:`TEMPLATES` 配置中的 ``'context_processors'`` "
"选项所指向，如果你直接使用的话，则是 :class:`~django.template.Engine` 的 "
"``context_processors`` 参数。"

msgid "Loading templates"
msgstr "加载模板"

msgid ""
"Generally, you'll store templates in files on your filesystem rather than "
"using the low-level :class:`~django.template.Template` API yourself. Save "
"templates in a directory specified as a **template directory**."
msgstr ""
"一般来说，你会把模板存储在文件系统的文件中，而不是自己使用低级的 :class:"
"`~django.template` API。将模板保存在指定的 **template 目录** 中。"

msgid ""
"Django searches for template directories in a number of places, depending on "
"your template loading settings (see \"Loader types\" below), but the most "
"basic way of specifying template directories is by using the :setting:`DIRS "
"<TEMPLATES-DIRS>` option."
msgstr ""
"Django 会在很多地方搜索模板目录，这取决于你的模板加载设置（见下面的“加载器类"
"型”），但最基本的指定模板目录的方法是使用 :setting:`DIRS` 选项。"

msgid "The :setting:`DIRS <TEMPLATES-DIRS>` option"
msgstr ":setting:`DIRS <TEMPLATES-DIRS>` 选项"

msgid ""
"Tell Django what your template directories are by using the :setting:`DIRS "
"<TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting in your "
"settings file — or the ``dirs`` argument of :class:`~django.template."
"Engine`. This should be set to a list of strings that contain full paths to "
"your template directories::"
msgstr ""
"通过使用配置文件中的 :setting:`TEMPLATES` 配置中的 :setting:`DIRS` 选项来告"
"诉 Django 你的模板目录是什么，或者使用 :class:`~django.template.Engine` 中的 "
"``dirs`` 参数。这应该被设置为一个字符串列表，其中包含你的模板目录的完整路径："

msgid ""
"Your templates can go anywhere you want, as long as the directories and "
"templates are readable by the web server. They can have any extension you "
"want, such as ``.html`` or ``.txt``, or they can have no extension at all."
msgstr ""

msgid "Loader types"
msgstr "加载器类型"

msgid ""
"By default, Django uses a filesystem-based template loader, but Django comes "
"with a few other template loaders, which know how to load templates from "
"other sources."
msgstr ""
"默认情况下，Django 使用的是基于文件系统的模板加载器，但 Django 自带了一些其他"
"的模板加载器，它们知道如何从其他来源加载模板。"

msgid ""
"Some of these other loaders are disabled by default, but you can activate "
"them by adding a ``'loaders'`` option to your ``DjangoTemplates`` backend in "
"the :setting:`TEMPLATES` setting or passing a ``loaders`` argument to :class:"
"`~django.template.Engine`. ``loaders`` should be a list of strings or "
"tuples, where each represents a template loader class. Here are the template "
"loaders that come with Django:"
msgstr ""
"其他一些加载器默认是禁用的，但是你可以通过在 :setting:`TEMPLATES` 配置中为你"
"的 ``DjangoTemplates`` 后端添加一个 ``'loaders'`` 选项来激活它们，或者向 :"
"class:`~django.template.Engine` 传递一个 ``loaders`` 参数。``loaders`` 应该是"
"一个字符串或元组的列表，每个元组代表一个模板加载器类。下面是 Django 自带的模"
"板加载器。"

msgid "``django.template.loaders.filesystem.Loader``"
msgstr "``django.template.loaders.filesystem.Loader``"

msgid ""
"Loads templates from the filesystem, according to :setting:`DIRS <TEMPLATES-"
"DIRS>`."
msgstr "根据 :setting:`DIRS <TEMPLATES-DIRS>` 从文件系统加载模板。"

msgid ""
"This loader is enabled by default. However it won't find any templates until "
"you set :setting:`DIRS <TEMPLATES-DIRS>` to a non-empty list::"
msgstr ""
"这个加载器默认是启用的。然而，它不会找到任何模板，直到你将 :setting:`DIRS "
"<TEMPLATES-DIRS>` 设置为非空列表："

msgid ""
"You can also override ``'DIRS'`` and specify specific directories for a "
"particular filesystem loader::"
msgstr "你也可以覆盖 ``'DIRS'``，为特定的文件系统加载器指定特定的目录："

msgid "``django.template.loaders.app_directories.Loader``"
msgstr "``django.template.loaders.app_directories.Loader``"

msgid ""
"Loads templates from Django apps on the filesystem. For each app in :setting:"
"`INSTALLED_APPS`, the loader looks for a ``templates`` subdirectory. If the "
"directory exists, Django looks for templates in there."
msgstr ""
"从文件系统中加载 Django 应用的模板。对于 :setting:`INSTALLED_APPS` 中的每个应"
"用，加载器会寻找一个 ``templates`` 子目录。如果该目录存在，Django 就会在其中"
"寻找模板。"

msgid ""
"This means you can store templates with your individual apps. This also "
"helps to distribute Django apps with default templates."
msgstr ""
"这意味着你可以将模板与你的各个应用一起存储。这也有助于分发带有默认模板的 "
"Django 应用。"

msgid "For example, for this setting::"
msgstr "例如，对于这个配置："

msgid ""
"...then ``get_template('foo.html')`` will look for ``foo.html`` in these "
"directories, in this order:"
msgstr ""
"...然后 ``get_template('foo.html')`` 将在这些目录中按这个顺序查找 ``foo."
"html``："

msgid "``/path/to/myproject/polls/templates/``"
msgstr "``/path/to/myproject/polls/templates/``"

msgid "``/path/to/myproject/music/templates/``"
msgstr "``/path/to/myproject/music/templates/``"

msgid "... and will use the one it finds first."
msgstr "...会用它最先找到的那个："

msgid ""
"The order of :setting:`INSTALLED_APPS` is significant! For example, if you "
"want to customize the Django admin, you might choose to override the "
"standard ``admin/base_site.html`` template, from ``django.contrib.admin``, "
"with your own ``admin/base_site.html`` in ``myproject.polls``. You must then "
"make sure that your ``myproject.polls`` comes *before* ``django.contrib."
"admin`` in :setting:`INSTALLED_APPS`, otherwise ``django.contrib.admin``’s "
"will be loaded first and yours will be ignored."
msgstr ""
":setting:`INSTALLED_APPS` 的顺序很重要！例如，如果你想自定义 Django 管理，你"
"可能会选择覆盖标准 ``django.contrib.admin`` 的 ``admin/base_site.html`` 模"
"板，，用你自己 ``myproject.polls`` 中的 ``admin/base_site.html``。然后你必须"
"确保你的 ``myproject.polls`` 在 :setting:`INSTALLED_APPS` 中在 ``django."
"contrib.admin`` *之前*，否则 ``django.contrib.admin`` 的会先被加载，你的会被"
"忽略。"

msgid ""
"Note that the loader performs an optimization when it first runs: it caches "
"a list of which :setting:`INSTALLED_APPS` packages have a ``templates`` "
"subdirectory."
msgstr ""
"请注意，加载器在第一次运行时进行了优化：它缓存了一个列表，显示哪些 :setting:"
"`INSTALLED_APPS` 包有一个 ``templates`` 子目录。"

msgid ""
"You can enable this loader by setting :setting:`APP_DIRS <TEMPLATES-"
"APP_DIRS>` to ``True``::"
msgstr ""
"你可以通过设置 :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` 为 ``True`` 来启用该"
"加载器："

msgid "``django.template.loaders.cached.Loader``"
msgstr "``django.template.loaders.cached.Loader``"

msgid ""
"While the Django template system is quite fast, if it needs to read and "
"compile your templates every time they're rendered, the overhead from that "
"can add up."
msgstr ""

msgid ""
"You configure the cached template loader with a list of other loaders that "
"it should wrap. The wrapped loaders are used to locate unknown templates "
"when they're first encountered. The cached loader then stores the compiled "
"``Template`` in memory. The cached ``Template`` instance is returned for "
"subsequent requests to load the same template."
msgstr ""
"你可以用其他加载器的列表来配置缓存的模板加载器，它应该对这些加载器进行封装。"
"当第一次遇到未知模板时，封装的加载器被用来定位它们。然后，缓存加载器将编译后"
"的 ``Template`` 存储在内存中。缓存的 ``Template`` 实例会被返回，供后续加载同"
"一模板的请求使用。"

msgid ""
"This loader is automatically enabled if :setting:`OPTIONS['loaders'] "
"<TEMPLATES-OPTIONS>` isn't specified."
msgstr ""

msgid ""
"You can manually specify template caching with some custom template loaders "
"using settings like this::"
msgstr ""

msgid ""
"All of the built-in Django template tags are safe to use with the cached "
"loader, but if you're using custom template tags that come from third party "
"packages, or that you wrote yourself, you should ensure that the ``Node`` "
"implementation for each tag is thread-safe. For more information, see :ref:"
"`template tag thread safety considerations <template_tag_thread_safety>`."
msgstr ""
"所有内置的 Django 模板标签都可以安全地使用缓存加载器，但如果你使用的是来自第"
"三方包的自定义模板标签，或者你自己编写的模板标签，你应该确保每个标签的“节"
"点”实现是线程安全的。更多信息，请参见 :ref:`模板标签线程安全注意事项 "
"<template_tag_thread_safety>`。"

msgid ""
"The cached template loader was enabled whenever ``OPTIONS['loaders']`` is "
"not specified. Previously it was only enabled when ``DEBUG`` was ``False``."
msgstr ""

msgid "``django.template.loaders.locmem.Loader``"
msgstr "``django.template.loaders.locmem.Loader``"

msgid "Loads templates from a Python dictionary. This is useful for testing."
msgstr "从 Python 字典中加载模板。这对测试很有用。"

msgid "This loader takes a dictionary of templates as its first argument::"
msgstr "该加载器将模板字典作为其第一个参数："

msgid "This loader is disabled by default."
msgstr "该加载器默认为禁用。"

msgid ""
"Django uses the template loaders in order according to the ``'loaders'`` "
"option. It uses each loader until a loader finds a match."
msgstr ""
"Django 根据 ``'loaders'`` 选项的顺序使用模板加载器。它使用每个加载器，直到一"
"个加载器找到匹配的模板。"

msgid "Custom loaders"
msgstr "自定义加载器"

msgid ""
"It's possible to load templates from additional sources using custom "
"template loaders. Custom ``Loader`` classes should inherit from ``django."
"template.loaders.base.Loader`` and define the ``get_contents()`` and "
"``get_template_sources()`` methods."
msgstr ""
"可以使用自定义模板加载器从其他来源加载模板。自定义 ``Loader`` 类应该继承 "
"``django.template.loaders.base.Loader`` 并定义 ``get_contents()`` 和 "
"``get_template_sources()`` 方法。"

msgid "Loader methods"
msgstr "加载器方法"

msgid ""
"Loads templates from a given source, such as the filesystem or a database."
msgstr "从给定的源，如文件系统或数据库中加载模板。"

msgid ""
"A method that takes a ``template_name`` and yields :class:`~django.template."
"base.Origin` instances for each possible source."
msgstr ""
"一个接受 ``template_name`` 的方法，并为每个可能的来源产生 :class:`~django."
"template.base.Origin` 实例。"

msgid ""
"For example, the filesystem loader may receive ``'index.html'`` as a "
"``template_name`` argument.  This method would yield origins for the full "
"path of ``index.html`` as it appears in each template directory the loader "
"looks at."
msgstr ""
"例如，文件系统加载器可以接收 ``'index.html'`` 作为 ``template_name`` 参数。 "
"这个方法将产生 ``index.html`` 的完整路径的起源，因为它出现在加载器查看的每个"
"模板目录中。"

msgid ""
"The method doesn't need to verify that the template exists at a given path, "
"but it should ensure the path is valid. For instance, the filesystem loader "
"makes sure the path lies under a valid template directory."
msgstr ""
"该方法不需要验证模板是否存在于给定的路径中，但它应该确保路径是有效的。例如，"
"文件系统加载器会确保路径位于一个有效的模板目录下。"

msgid ""
"Returns the contents for a template given a :class:`~django.template.base."
"Origin` instance."
msgstr "返回给定 :class:`~django.template.base.Origin` 实例的模板的内容。"

msgid ""
"This is where a filesystem loader would read contents from the filesystem, "
"or a database loader would read from the database. If a matching template "
"doesn't exist, this should raise a :exc:`~django.template."
"TemplateDoesNotExist` error."
msgstr ""
"这是一个文件系统加载器从文件系统读取内容的地方，或者一个数据库加载器从数据库"
"读取内容的地方。如果一个匹配的模板不存在，这应该会引发一个 :exc:`~django."
"template.TemplateDoesNotExist` 错误。"

msgid ""
"Returns a ``Template`` object for a given ``template_name`` by looping "
"through results from :meth:`get_template_sources` and calling :meth:"
"`get_contents`. This returns the first matching template. If no template is "
"found, :exc:`~django.template.TemplateDoesNotExist` is raised."
msgstr ""
"通过循环浏览 :meth:`get_template_sources` 和调用 :meth:`get_contents` 的结"
"果，为给定的 ``template_name`` 返回一个 ``Template`` 对象。这将返回第一个匹配"
"的模板。如果没有找到模板，则会引发 :exc:`~django.template."
"TemplateDoesNotExist`。"

msgid ""
"The optional ``skip`` argument is a list of origins to ignore when extending "
"templates. This allow templates to extend other templates of the same name. "
"It also used to avoid recursion errors."
msgstr ""
"可选的 ``skip`` 参数是扩展模板时要忽略的起源列表。这允许模板扩展同名的其他模"
"板。它也用于避免递归错误。"

msgid ""
"In general, it is enough to define :meth:`get_template_sources` and :meth:"
"`get_contents` for custom template loaders. ``get_template()`` will usually "
"not need to be overridden."
msgstr ""
"一般来说，定义 :meth:`get_template_sources` 和 :meth:`get_contents` 为自定义"
"模板加载器就可以了。``get_template()`` 通常不需要重写。"

msgid "Building your own"
msgstr "构建你自己的"

msgid ""
"For examples, read the :source:`source code for Django's built-in loaders "
"<django/template/loaders>`."
msgstr ""
"例如，请阅读 :source:`Django 内置加载器的源代码 <django/template/loaders>`。"

msgid "Template origin"
msgstr "模板起源"

msgid ""
"Templates have an ``origin`` containing attributes depending on the source "
"they are loaded from."
msgstr "模板有一个 ``origin``，包含的属性取决于它们的来源。"

msgid ""
"The path to the template as returned by the template loader. For loaders "
"that read from the file system, this is the full path to the template."
msgstr ""
"模板加载器返回的模板路径。对于从文件系统读取的加载器，这是模板的完整路径。"

msgid ""
"If the template is instantiated directly rather than through a template "
"loader, this is a string value of ``<unknown_source>``."
msgstr ""
"如果模板是直接实例化的，而不是通过模板加载器，这是一个字符串值 "
"``<unknown_source>``。"

msgid "The relative path to the template as passed into the template loader."
msgstr "传入模板加载器的模板的相对路径。"

msgid ""
"If the template is instantiated directly rather than through a template "
"loader, this is ``None``."
msgstr "如果模板是直接实例化的，而不是通过模板加载器，这就是 ``None``。"

msgid "The template loader instance that constructed this ``Origin``."
msgstr "构建这个 ``Origin`` 的模板加载器实例。"

msgid ""
":class:`django.template.loaders.cached.Loader` requires all of its wrapped "
"loaders to set this attribute, typically by instantiating the ``Origin`` "
"with ``loader=self``."
msgstr ""
":class:`django.template.loaders.cached.Loader` 要求所有封装的加载器都要设置这"
"个属性，通常是通过实例化 ``loader=self`` 的 ``Origin``。"

msgid "Built-in template tags and filters"
msgstr "内置模板标签和过滤器"

msgid ""
"This document describes Django's built-in template tags and filters. It is "
"recommended that you use the :doc:`automatic documentation </ref/contrib/"
"admin/admindocs>`, if available, as this will also include documentation for "
"any custom tags or filters installed."
msgstr ""
"本文档描述了 Django 内置的模板标签和过滤器。如果有的话，建议你使用 :doc:`自动"
"化文档 </ref/contrib/admin/admindocs>`，因为它也会包含安装的任何自定义标签或"
"过滤器的文档。"

msgid "Built-in tag reference"
msgstr "内置标签参考"

msgid "``autoescape``"
msgstr "``autoescape``"

msgid ""
"Controls the current auto-escaping behavior. This tag takes either ``on`` or "
"``off`` as an argument and that determines whether auto-escaping is in "
"effect inside the block. The block is closed with an ``endautoescape`` "
"ending tag."
msgstr ""
"控制当前的自动转义行为。该标签以 ``on`` 或 ``off`` 作为参数，决定块内是否有自"
"动转义行为。此区块以 ``endautoescape`` 结束标签关闭。"

msgid "Sample usage:"
msgstr ""

msgid ""
"When auto-escaping is in effect, all content derived from variables has HTML "
"escaping applied before placing the result into the output (but after any "
"filters are applied). This is equivalent to manually applying the :tfilter:"
"`escape` filter to each variable."
msgstr ""

msgid ""
"The only exceptions are variables already marked as \"safe\" from escaping. "
"Variables could be marked as \"safe\" by the code which populated the "
"variable, by applying the :tfilter:`safe` or :tfilter:`escape` filters, or "
"because it's the result of a previous filter that marked the string as "
"\"safe\"."
msgstr ""

msgid ""
"Within the scope of disabled auto-escaping, chaining filters, including :"
"tfilter:`escape`, may cause unexpected (but documented) results such as the "
"following:"
msgstr ""

msgid ""
"The above code will output the joined elements of ``my_list`` unescaped. "
"This is because the filter chaining sequence executes first :tfilter:`join` "
"on ``my_list`` (without applying escaping to each item since ``autoescape`` "
"is ``off``), marking the result as safe. Subsequently, this safe result will "
"be fed to :tfilter:`escape` filter, which does not apply a second round of "
"escaping."
msgstr ""

msgid "``block``"
msgstr "``block``"

msgid ""
"Defines a block that can be overridden by child templates. See :ref:"
"`Template inheritance <template-inheritance>` for more information."
msgstr ""
"定义一个可以被子模板覆盖的块。更多信息请参见 :ref:`模板继承 <template-"
"inheritance>`。"

msgid "``comment``"
msgstr "``comment``"

msgid ""
"Ignores everything between ``{% comment %}`` and ``{% endcomment %}``. An "
"optional note may be inserted in the first tag. For example, this is useful "
"when commenting out code for documenting why the code was disabled."
msgstr ""
"忽略 ``{% comment %}`` 和 ``{% endcomment %}`` 之间的所有内容。可以在第一个标"
"签中插入一个可选的注释。例如，这在注释代码时很有用，可以记录代码被禁用的原"
"因。"

msgid "``comment`` tags cannot be nested."
msgstr "``comment`` 标签不能嵌套。"

msgid "``csrf_token``"
msgstr "``csrf_token``"

msgid ""
"This tag is used for CSRF protection, as described in the documentation for :"
"doc:`Cross Site Request Forgeries </ref/csrf>`."
msgstr ""
"这个标签用于 CSRF 保护，如 :doc:`跨站点请求伪造 </ref/csrf>` 的文档中所述。"

msgid "``cycle``"
msgstr "``cycle``"

msgid ""
"Produces one of its arguments each time this tag is encountered. The first "
"argument is produced on the first encounter, the second argument on the "
"second encounter, and so forth. Once all arguments are exhausted, the tag "
"cycles to the first argument and produces it again."
msgstr ""
"每次遇到这个标记时，都会产生一个参数。第一次遇到时产生第一个参数，第二次遇到"
"时产生第二个参数，以此类推。一旦用尽所有参数，标签就会循环到第一个参数，并再"
"次生成它。"

msgid "This tag is particularly useful in a loop:"
msgstr ""

msgid ""
"The first iteration produces HTML that refers to class ``row1``, the second "
"to ``row2``, the third to ``row1`` again, and so on for each iteration of "
"the loop."
msgstr ""
"第一次迭代产生的 HTML 引用类 ``row1``，第二次引用 ``row2``，第三次再引用 "
"``row1``，以此类推，每次循环迭代。"

msgid ""
"You can use variables, too. For example, if you have two template variables, "
"``rowvalue1`` and ``rowvalue2``, you can alternate between their values like "
"this:"
msgstr ""

msgid ""
"Variables included in the cycle will be escaped.  You can disable auto-"
"escaping with:"
msgstr ""

msgid "You can mix variables and strings:"
msgstr ""

msgid ""
"In some cases you might want to refer to the current value of a cycle "
"without advancing to the next value. To do this, give the ``{% cycle %}`` "
"tag a name, using \"as\", like this:"
msgstr ""

msgid ""
"From then on, you can insert the current value of the cycle wherever you'd "
"like in your template by referencing the cycle name as a context variable. "
"If you want to move the cycle to the next value independently of the "
"original ``cycle`` tag, you can use another ``cycle`` tag and specify the "
"name of the variable. So, the following template:"
msgstr ""

msgid "would output:"
msgstr ""

msgid ""
"You can use any number of values in a ``cycle`` tag, separated by spaces. "
"Values enclosed in single quotes (``'``) or double quotes (``\"``) are "
"treated as string literals, while values without quotes are treated as "
"template variables."
msgstr ""
"你可以在一个 ``cycle`` 标签中使用任意数量的值，用空格隔开。用单引号（``'``）"
"或双引号（``\"``）括起来的值被视为字符串字面，而没有引号的值被视为模板变量。"

msgid ""
"By default, when you use the ``as`` keyword with the cycle tag, the usage of "
"``{% cycle %}`` that initiates the cycle will itself produce the first value "
"in the cycle. This could be a problem if you want to use the value in a "
"nested loop or an included template. If you only want to declare the cycle "
"but not produce the first value, you can add a ``silent`` keyword as the "
"last keyword in the tag. For example:"
msgstr ""

msgid ""
"This will output a list of ``<tr>`` elements with ``class`` alternating "
"between ``row1`` and ``row2``. The subtemplate will have access to "
"``rowcolors`` in its context and the value will match the class of the "
"``<tr>`` that encloses it. If the ``silent`` keyword were to be omitted, "
"``row1`` and ``row2`` would be emitted as normal text, outside the ``<tr>`` "
"element."
msgstr ""
"这将输出一个 ``<tr>`` 元素的列表，其 ``class`` 在 ``row1`` 和 ``row2`` 之间交"
"替出现。子模板在其上下文中可以访问 ``rowcolors``，其值将与包围它的 ``<tr>`` "
"的类相匹配。如果省略 ``silent`` 关键字，``row1`` 和 ``row2`` 将作为普通文本"
"在 ``<tr>`` 元素之外发出。"

msgid ""
"When the silent keyword is used on a cycle definition, the silence "
"automatically applies to all subsequent uses of that specific cycle tag. The "
"following template would output *nothing*, even though the second call to "
"``{% cycle %}`` doesn't specify ``silent``:"
msgstr ""

msgid ""
"You can use the :ttag:`resetcycle` tag to make a ``{% cycle %}`` tag restart "
"from its first value when it's next encountered."
msgstr ""
"你可以使用 :ttag:`resetcycle` 标签使 ``{% cycle %}`` 标签在下次遇到时从第一个"
"值重新开始。"

msgid ""
"Outputs a whole load of debugging information, including the current context "
"and imported modules. ``{% debug %}`` outputs nothing when the :setting:"
"`DEBUG` setting is ``False``."
msgstr ""

msgid ""
"In older versions, debugging information was displayed when the :setting:"
"`DEBUG` setting was ``False``."
msgstr ""

msgid "``extends``"
msgstr "``extends``"

msgid "Signals that this template extends a parent template."
msgstr "表示该模板扩展了一个父模板。"

msgid "This tag can be used in two ways:"
msgstr "这个标签有两种使用方式："

msgid ""
"``{% extends \"base.html\" %}`` (with quotes) uses the literal value "
"``\"base.html\"`` as the name of the parent template to extend."
msgstr ""
"``{% extends \"base.html\" %}`` （带引号）使用字面值 ``\"base.html\"`` 作为要"
"扩展的父模板的名称。"

msgid ""
"``{% extends variable %}`` uses the value of ``variable``. If the variable "
"evaluates to a string, Django will use that string as the name of the parent "
"template. If the variable evaluates to a ``Template`` object, Django will "
"use that object as the parent template."
msgstr ""
"``{% extends variable %}`` 使用 ``variable`` 的值。如果变量的值是一个字符串，"
"Django 将使用这个字符串作为父模板的名称。如果变量的值是一个 ``Template`` 对"
"象，Django 将使用该对象作为父模板。"

msgid "See :ref:`template-inheritance` for more information."
msgstr "更多内容请参见 :ref:`template-inheritance` 文档."

msgid ""
"Normally the template name is relative to the template loader's root "
"directory. A string argument may also be a relative path starting with ``./"
"`` or ``../``. For example, assume the following directory structure:"
msgstr ""

msgid "In ``template.html``, the following paths would be valid:"
msgstr ""

msgid ""
"Filters the contents of the block through one or more filters. Multiple "
"filters can be specified with pipes and filters can have arguments, just as "
"in variable syntax."
msgstr ""
"通过一个或多个过滤器过滤块的内容。可以用管道指定多个过滤器，过滤器可以有参"
"数，就像变量语法一样。"

msgid ""
"Note that the block includes *all* the text between the ``filter`` and "
"``endfilter`` tags."
msgstr "请注意，该块包括 ``filter`` 和 ``endfilter`` 标签之间的 *所有* 文本。"

msgid ""
"The :tfilter:`escape` and :tfilter:`safe` filters are not acceptable "
"arguments. Instead, use the :ttag:`autoescape` tag to manage autoescaping "
"for blocks of template code."
msgstr ""
":tfilter:`escape` 和 :tfilter:`safe` 过滤器是不可接受的参数。取而代之的是，使"
"用 :ttag:`autoescape` 标签来管理模板代码块的自动转义。"

msgid "``firstof``"
msgstr "``firstof``"

msgid ""
"Outputs the first argument variable that is not \"false\" (i.e. exists, is "
"not empty, is not a false boolean value, and is not a zero numeric value). "
"Outputs nothing if all the passed variables are \"false\"."
msgstr ""
"输出第一个不是 ``false`` 的参数变量（即存在、不为空、不是一个错误的布尔值，也"
"不是一个零的数值）。如果所有传递的变量都是 ``false``，则不输出任何内容。"

msgid "This is equivalent to:"
msgstr ""

msgid ""
"You can also use a literal string as a fallback value in case all passed "
"variables are False:"
msgstr ""

msgid ""
"This tag auto-escapes variable values. You can disable auto-escaping with:"
msgstr ""

msgid "Or if only some variables should be escaped, you can use:"
msgstr ""

msgid ""
"You can use the syntax ``{% firstof var1 var2 var3 as value %}`` to store "
"the output inside a variable."
msgstr ""
"你可以使用 ``{% firstof var1 var2 var3 as value %}`` 的语法将输出结果存储在一"
"个变量中。"

msgid "``for``"
msgstr "``for``"

msgid ""
"Loops over each item in an array, making the item available in a context "
"variable. For example, to display a list of athletes provided in "
"``athlete_list``:"
msgstr ""

msgid ""
"You can loop over a list in reverse by using ``{% for obj in list reversed %}"
"``."
msgstr "你可以通过使用 ``{% for obj in list reversed %}`` 来反向循环一个列表。"

msgid ""
"If you need to loop over a list of lists, you can unpack the values in each "
"sublist into individual variables. For example, if your context contains a "
"list of (x,y) coordinates called ``points``, you could use the following to "
"output the list of points:"
msgstr ""

msgid ""
"This can also be useful if you need to access the items in a dictionary. For "
"example, if your context contained a dictionary ``data``, the following "
"would display the keys and values of the dictionary:"
msgstr ""

msgid ""
"Keep in mind that for the dot operator, dictionary key lookup takes "
"precedence over method lookup. Therefore if the ``data`` dictionary contains "
"a key named ``'items'``, ``data.items`` will return ``data['items']`` "
"instead of ``data.items()``. Avoid adding keys that are named like "
"dictionary methods if you want to use those methods in a template "
"(``items``, ``values``, ``keys``, etc.). Read more about the lookup order of "
"the dot operator in the :ref:`documentation of template variables <template-"
"variables>`."
msgstr ""
"请记住，对于点运算符来说，字典键查询优先于方法查询。因此，如果 ``data`` 字典"
"中包含一个名为 ``'items'`` 的键，``data.items`` 将返回 ``data['items']``` 而"
"不是 ``data.items()``。如果你想在模板中使用这些方法，避免添加像字典方法一样命"
"名的键（``items``、``values``、``keys`` 等）。在 :ref:`模板变量的文档 "
"<template-variables>` 中阅读更多关于点运算符的查找顺序。"

msgid "The for loop sets a number of variables available within the loop:"
msgstr "for 循环设置了一组可以在循环体内直接使用的变量："

msgid "Variable"
msgstr "变量名"

msgid "``forloop.counter``"
msgstr "``forloop.counter``"

msgid "The current iteration of the loop (1-indexed)"
msgstr "循环计数器，表示当前循环的索引（从 ``1`` 开始）。"

msgid "``forloop.counter0``"
msgstr "``forloop.counter0``"

msgid "The current iteration of the loop (0-indexed)"
msgstr "循环计数器，表示当前循环的索引（从 ``0`` 开始）。"

msgid "``forloop.revcounter``"
msgstr "``forloop.revcounter``"

msgid "The number of iterations from the end of the loop (1-indexed)"
msgstr "反向循环计数器（以最后一次循环为 ``1``，反向计数）。"

msgid "``forloop.revcounter0``"
msgstr "``forloop.revcounter0``"

msgid "The number of iterations from the end of the loop (0-indexed)"
msgstr "反向循环计数器（以最后一次循环为 ``0``，反向计数）。"

msgid "``forloop.first``"
msgstr "``forloop.first``"

msgid "True if this is the first time through the loop"
msgstr "当前循环为首个循环时，该变量为 True"

msgid "``forloop.last``"
msgstr "``forloop.last``"

msgid "True if this is the last time through the loop"
msgstr "当前循环为最后一个循环时，该变量为 True"

msgid "``forloop.parentloop``"
msgstr "``forloop.parentloop``"

msgid "For nested loops, this is the loop surrounding the current one"
msgstr "在嵌套循环中，指向当前循环的上级循环"

msgid "``for`` ... ``empty``"
msgstr "``for`` ... ``empty``"

msgid ""
"The ``for`` tag can take an optional ``{% empty %}`` clause whose text is "
"displayed if the given array is empty or could not be found:"
msgstr ""

msgid ""
"The above is equivalent to -- but shorter, cleaner, and possibly faster than "
"-- the following:"
msgstr ""

msgid "``if``"
msgstr "``if``"

msgid ""
"The ``{% if %}`` tag evaluates a variable, and if that variable is "
"\"true\" (i.e. exists, is not empty, and is not a false boolean value) the "
"contents of the block are output:"
msgstr ""

msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""
"在上面的例子中, 如果 ``athlete_list`` 不是空的, 那么变量 ``{{ athlete_list|"
"length }}`` 就会被显示出来."

msgid ""
"As you can see, the ``if`` tag may take one or several ``{% elif %}`` "
"clauses, as well as an ``{% else %}`` clause that will be displayed if all "
"previous conditions fail. These clauses are optional."
msgstr ""
"正如你所看到的，``if`` 标签可能带有一个或多个 ``{% elif %}`` 分支，以及一个 "
"``{% else %}`` 分支。当 ``{% else %}`` 之前的所有分支条件都不满足时，``{% "
"else %}`` 分支的内容会被显示出来。所有的分支都是可选的。"

msgid "Boolean operators"
msgstr "布尔操作"

msgid ""
":ttag:`if` tags may use ``and``, ``or`` or ``not`` to test a number of "
"variables or to negate a given variable:"
msgstr ""

msgid ""
"Use of both ``and`` and ``or`` clauses within the same tag is allowed, with "
"``and`` having higher precedence than ``or`` e.g.:"
msgstr ""

msgid "will be interpreted like:"
msgstr "将被解释为："

msgid ""
"Use of actual parentheses in the :ttag:`if` tag is invalid syntax. If you "
"need them to indicate precedence, you should use nested :ttag:`if` tags."
msgstr ""
"在 :ttag:`if` 标签中使用实际的括号是无效的语法。如果需要小括号来表示优先级，"
"应使用嵌套的 :ttag:`if` 标签。"

msgid ""
":ttag:`if` tags may also use the operators ``==``, ``!=``, ``<``, ``>``, "
"``<=``, ``>=``, ``in``, ``not in``, ``is``, and ``is not`` which work as "
"follows:"
msgstr ""
":ttag:`if` 标签也可以使用运算符 ``==``、``!=``、``<``、``>``、``<=``、"
"``>=``、``in``、``not in``、``is`` 和 ```is not``，其作用如下："

msgid "``==`` operator"
msgstr "``==`` 运算符"

msgid "Equality. Example:"
msgstr ""

msgid "``!=`` operator"
msgstr "``!=`` 运算符"

msgid "Inequality. Example:"
msgstr ""

msgid "``<`` operator"
msgstr "``<`` 运算符"

msgid "Less than. Example:"
msgstr ""

msgid "``>`` operator"
msgstr "``>`` 运算符"

msgid "Greater than. Example:"
msgstr ""

msgid "``<=`` operator"
msgstr "``<=`` 运算符"

msgid "Less than or equal to. Example:"
msgstr ""

msgid "``>=`` operator"
msgstr "``>=`` 运算符"

msgid "Greater than or equal to. Example:"
msgstr ""

msgid "``in`` operator"
msgstr "``in`` 运算符"

msgid ""
"Contained within. This operator is supported by many Python containers to "
"test whether the given value is in the container. The following are some "
"examples of how ``x in y`` will be interpreted:"
msgstr ""

msgid "``not in`` operator"
msgstr "``not in`` 操作符"

msgid "Not contained within. This is the negation of the ``in`` operator."
msgstr "不包含在其中。这是 ``in`` 运算符的取反。"

msgid "``is`` operator"
msgstr "``is`` 运算符"

msgid "Object identity. Tests if two values are the same object. Example:"
msgstr ""

msgid "``is not`` operator"
msgstr "``is not`` 运算符"

msgid ""
"Negated object identity. Tests if two values are not the same object. This "
"is the negation of the ``is`` operator. Example:"
msgstr ""

msgid "You can also use filters in the :ttag:`if` expression. For example:"
msgstr ""

msgid "Complex expressions"
msgstr "复合表达式"

msgid ""
"All of the above can be combined to form complex expressions. For such "
"expressions, it can be important to know how the operators are grouped when "
"the expression is evaluated - that is, the precedence rules. The precedence "
"of the operators, from lowest to highest, is as follows:"
msgstr ""
"以上所有内容都可以组合成复合表达式。对于这样的表达式，了解表达式计算时运算符"
"的分组方式——也就是优先规则，可能很重要。运算符的优先级，从低到高，如下所示："

msgid "``or``"
msgstr "``or``"

msgid "``and``"
msgstr "``and``"

msgid "``not``"
msgstr "``not``"

msgid "``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``"
msgstr "``==``、``!=``、``<``、``>``、``<=``、``>=``"

msgid ""
"(This follows Python exactly). So, for example, the following complex :ttag:"
"`if` tag:"
msgstr ""

msgid "...will be interpreted as:"
msgstr "...将被解释为："

msgid ""
"If you need different precedence, you will need to use nested :ttag:`if` "
"tags. Sometimes that is better for clarity anyway, for the sake of those who "
"do not know the precedence rules."
msgstr ""
"如果你需要不同的优先级，你需要使用嵌套的 :ttag:`if` 标签。有时，为了不了解优"
"先规则的人，这样做还是比较清楚的。"

msgid ""
"The comparison operators cannot be 'chained' like in Python or in "
"mathematical notation. For example, instead of using:"
msgstr ""

msgid "you should use:"
msgstr ""

msgid "``ifchanged``"
msgstr "``ifchanged``"

msgid "Check if a value has changed from the last iteration of a loop."
msgstr "检查一个值是否在循环的最后一次迭代中发生了变化。"

msgid ""
"The ``{% ifchanged %}`` block tag is used within a loop. It has two possible "
"uses."
msgstr "``{% ifchanged %}`` 块标签用于循环中。它有两种可能的用法。"

msgid ""
"Checks its own rendered contents against its previous state and only "
"displays the content if it has changed. For example, this displays a list of "
"days, only displaying the month if it changes:"
msgstr ""

msgid ""
"If given one or more variables, check whether any variable has changed. For "
"example, the following shows the date every time it changes, while showing "
"the hour if either the hour or the date has changed:"
msgstr ""

msgid ""
"The ``ifchanged`` tag can also take an optional ``{% else %}`` clause that "
"will be displayed if the value has not changed:"
msgstr ""

msgid ""
"Loads a template and renders it with the current context. This is a way of "
"\"including\" other templates within a template."
msgstr ""
"加载一个模板，并在当前上下文中进行渲染。这是一种在模板中 “包含” 其他模板的方"
"式。"

msgid ""
"The template name can either be a variable or a hard-coded (quoted) string, "
"in either single or double quotes."
msgstr ""
"模板名称可以是一个变量，也可以是一个硬编码（引号）字符串，可以是单引号或双引"
"号。"

msgid ""
"This example includes the contents of the template ``\"foo/bar.html\"``:"
msgstr ""

msgid ""
"Normally the template name is relative to the template loader's root "
"directory. A string argument may also be a relative path starting with ``./"
"`` or ``../`` as described in the :ttag:`extends` tag."
msgstr ""
"通常模板名称是相对于模板加载器的根目录而言的。字符串参数也可以是以 ``./`` 或 "
"``../`` 开头的相对路径，如 :ttag:`extends` 标签所述。"

msgid ""
"This example includes the contents of the template whose name is contained "
"in the variable ``template_name``:"
msgstr ""

msgid ""
"The variable may also be any object with a ``render()`` method that accepts "
"a context. This allows you to reference a compiled ``Template`` in your "
"context."
msgstr ""
"变量也可以是任何有 ``render()`` 方法并接受上下文的对象。这允许你在你的上下文"
"中引用一个编译的 ``Template``。"

msgid ""
"Additionally, the variable may be an iterable of template names, in which "
"case the first that can be loaded will be used, as per :func:`~django."
"template.loader.select_template`."
msgstr ""
"此外，该变量可以是模板名称的迭代，在这种情况下，将使用第一个可以加载的模板，"
"如 :func:`~django.template.loader.select_template`。"

msgid ""
"An included template is rendered within the context of the template that "
"includes it. This example produces the output ``\"Hello, John!\"``:"
msgstr ""
"一个被包含的模板会在包含它的模板的上下文中呈现。这个例子产生的输出是 "
"``\"Hello, John!\"``。"

msgid ""
"Context: variable ``person`` is set to ``\"John\"`` and variable "
"``greeting`` is set to ``\"Hello\"``."
msgstr ""
"上下文：变量 ``person`` 设置为 ``\"John\"``，变量 ``greeting`` 设置为 "
"``\"Hello\"``。"

msgid "Template:"
msgstr ""

msgid "The ``name_snippet.html`` template:"
msgstr ""

msgid ""
"You can pass additional context to the template using keyword arguments:"
msgstr ""

msgid ""
"If you want to render the context only with the variables provided (or even "
"no variables at all), use the ``only`` option. No other variables are "
"available to the included template:"
msgstr ""

msgid ""
"The :ttag:`include` tag should be considered as an implementation of "
"\"render this subtemplate and include the HTML\", not as \"parse this "
"subtemplate and include its contents as if it were part of the parent\". "
"This means that there is no shared state between included templates -- each "
"include is a completely independent rendering process."
msgstr ""
":ttag:`include` 标签应被视为 “渲染这个子模板并包含 HTML” 的实现，而不是 “解析"
"这个子模板并包含其内容，就像它是父模板的一部分一样”。这意味着，包含的模板之间"
"没有共享状态——每个包含都是一个完全独立的渲染过程。"

msgid ""
"Blocks are evaluated *before* they are included. This means that a template "
"that includes blocks from another will contain blocks that have *already "
"been evaluated and rendered* - not blocks that can be overridden by, for "
"example, an extending template."
msgstr ""
"块在被包含之前会被执行。这意味着一个包含了另一个模板块的模板将包含 *已经被执"
"行和渲染* 的块，而不是可以被覆盖的块，例如，一个扩展模板。"

msgid "``load``"
msgstr "``load``"

msgid "Loads a custom template tag set."
msgstr "加载一个自定义模板标签集。"

msgid ""
"For example, the following template would load all the tags and filters "
"registered in ``somelibrary`` and ``otherlibrary`` located in package "
"``package``:"
msgstr ""

msgid ""
"You can also selectively load individual filters or tags from a library, "
"using the ``from`` argument. In this example, the template tags/filters "
"named ``foo`` and ``bar`` will be loaded from ``somelibrary``:"
msgstr ""

msgid ""
"See :doc:`Custom tag and filter libraries </howto/custom-template-tags>` for "
"more information."
msgstr ""
"更多信息请参见 :doc:`自定义标签和过滤器库 </howto/custom-template-tags>`。"

msgid "``lorem``"
msgstr "``lorem``"

msgid ""
"Displays random \"lorem ipsum\" Latin text. This is useful for providing "
"sample data in templates."
msgstr "显示随机的 “经验之谈” 拉丁文文本。这对于在模板中提供样本数据很有用。"

msgid "Usage:"
msgstr "用法："

msgid ""
"The ``{% lorem %}`` tag can be used with zero, one, two or three arguments. "
"The arguments are:"
msgstr "``{% lorem %}`` 标签可以使用零、一、二或三个参数。这些参数是："

msgid "``count``"
msgstr "``count``"

msgid ""
"A number (or variable) containing the number of paragraphs or words to "
"generate (default is 1)."
msgstr "一个数字（或变量），包含要生成的段落或字数（默认为 1）。"

msgid "``method``"
msgstr "``method``"

msgid ""
"Either ``w`` for words, ``p`` for HTML paragraphs or ``b`` for plain-text "
"paragraph blocks (default is ``b``)."
msgstr ""
"字词为 ``w``，HTML 段落为 ``p``，纯文本段落块为 ``b`` （默认为 ``b``）。"

msgid "``random``"
msgstr "``random``"

msgid ""
"The word ``random``, which if given, does not use the common paragraph "
"(\"Lorem ipsum dolor sit amet...\") when generating text."
msgstr ""
"``random`` 一词，如果给定，在生成文本时不使用普通段落（“Lorem ipsum dolor "
"sit amet.”）。"

msgid "``{% lorem %}`` will output the common \"lorem ipsum\" paragraph."
msgstr "``{% lorem %}`` 将输出常见的 “经验之谈” 段落。"

msgid ""
"``{% lorem 3 p %}`` will output the common \"lorem ipsum\" paragraph and two "
"random paragraphs each wrapped in HTML ``<p>`` tags."
msgstr ""
"``{% lorem 3 p %}`` 将输出普通的 “经验之谈” 段落和两个随机段落，每个段落用 "
"HTML ``<p>`` 标签包装。"

msgid "``{% lorem 2 w random %}`` will output two random Latin words."
msgstr "``{% lorem 2 w random %}`` 将随机输出两个拉丁语单词。"

msgid "``now``"
msgstr "``now``"

msgid ""
"Displays the current date and/or time, using a format according to the given "
"string. Such string can contain format specifiers characters as described in "
"the :tfilter:`date` filter section."
msgstr ""
"显示当前日期和／或时间，根据给定的字符串使用格式。这些字符串可以包含格式指定"
"符，如 :tfilter:`date` 过滤器部分所述。"

msgid ""
"Note that you can backslash-escape a format string if you want to use the "
"\"raw\" value. In this example, both \"o\" and \"f\" are backslash-escaped, "
"because otherwise each is a format string that displays the year and the "
"time, respectively:"
msgstr ""

msgid "This would display as \"It is the 4th of September\"."
msgstr "这样就会显示为 “It is the 4th of September”。"

msgid ""
"The format passed can also be one of the predefined ones :setting:"
"`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or :"
"setting:`SHORT_DATETIME_FORMAT`. The predefined formats may vary depending "
"on the current locale and if :doc:`/topics/i18n/formatting` is enabled, e.g.:"
msgstr ""

msgid ""
"You can also use the syntax ``{% now \"Y\" as current_year %}`` to store the "
"output (as a string) inside a variable. This is useful if you want to use "
"``{% now %}`` inside a template tag like :ttag:`blocktranslate` for example:"
msgstr ""

msgid "``regroup``"
msgstr "``regroup``"

msgid "Regroups a list of alike objects by a common attribute."
msgstr "通过一个共同的属性将一个相似的对象列表重新分组。"

msgid ""
"This complex tag is best illustrated by way of an example: say that "
"``cities`` is a list of cities represented by dictionaries containing "
"``\"name\"``, ``\"population\"``, and ``\"country\"`` keys:"
msgstr ""
"这个复杂的标签通过一个例子得到了最好的说明：假设 ``cities`` 是一个由包含 "
"``\"name\"``、``\"population\"`` 和 ``\"country\"`` 键的字典所代表的城市列"
"表。"

msgid ""
"...and you'd like to display a hierarchical list that is ordered by country, "
"like this:"
msgstr "...而你想显示一个按国家排序的分层列表，像这样："

msgid "India"
msgstr "India"

msgid "Mumbai: 19,000,000"
msgstr "Mumbai: 19,000,000"

msgid "Calcutta: 15,000,000"
msgstr "Calcutta: 15,000,000"

msgid "USA"
msgstr "USA"

msgid "New York: 20,000,000"
msgstr "New York: 20,000,000"

msgid "Chicago: 7,000,000"
msgstr "Chicago: 7,000,000"

msgid "Japan"
msgstr "Japan"

msgid "Tokyo: 33,000,000"
msgstr "Tokyo: 33,000,000"

msgid ""
"You can use the ``{% regroup %}`` tag to group the list of cities by "
"country. The following snippet of template code would accomplish this:"
msgstr ""

msgid ""
"Let's walk through this example. ``{% regroup %}`` takes three arguments: "
"the list you want to regroup, the attribute to group by, and the name of the "
"resulting list. Here, we're regrouping the ``cities`` list by the "
"``country`` attribute and calling the result ``country_list``."
msgstr ""
"让我们来看看这个例子。``{% regroup %}`` 需要三个参数：要重新分组的列表、要分"
"组的属性和结果列表的名称。在这里，我们通过 ``country`` 属性对 ``cities`` 列表"
"进行重新分组，并将结果称为 ``country_list``。"

msgid ""
"``{% regroup %}`` produces a list (in this case, ``country_list``) of "
"**group objects**. Group objects are instances of :py:func:`~collections."
"namedtuple` with two fields:"
msgstr ""
"``{% regroup %}`` 产生一个 **组对象** 的列表（在本例中为 ``country_list``）。"
"组对象是 :py:func:`~collections.namedtuple` 的实例，有两个字段。"

msgid ""
"``grouper`` -- the item that was grouped by (e.g., the string \"India\" or "
"\"Japan\")."
msgstr "``grouper`` —— 被分组的项目（例如，“India” 或 “Japan” 等字符串）。"

msgid ""
"``list`` -- a list of all items in this group (e.g., a list of all cities "
"with country='India')."
msgstr ""
"``list`` —— 本组所有项目的清单（例如，country='India' 的所有城市的清单）。"

msgid ""
"Because ``{% regroup %}`` produces :py:func:`~collections.namedtuple` "
"objects, you can also write the previous example as:"
msgstr ""

msgid ""
"Note that ``{% regroup %}`` does not order its input! Our example relies on "
"the fact that the ``cities`` list was ordered by ``country`` in the first "
"place. If the ``cities`` list did *not* order its members by ``country``, "
"the regrouping would naively display more than one group for a single "
"country. For example, say the ``cities`` list was set to this (note that the "
"countries are not grouped together):"
msgstr ""
"请注意，``{% regroup %}`` 并没有对其输入进行排序！我们的例子依赖于这样一个事"
"实： ``cities`` 列表首先是按 ``country`` 排序的。如果 ``cities`` 列表没有按 "
"``country`` 排序，重新分组就会天真地显示一个国家的多个组。例如，如果 "
"``cities`` 列表设置成这样（注意，国家没有被归为一组）。"

msgid ""
"With this input for ``cities``, the example ``{% regroup %}`` template code "
"above would result in the following output:"
msgstr ""
"有了这个 ``cities`` 的输入，上面的 ``{% regroup %}`` 模板代码就会有如下输出。"

msgid ""
"The easiest solution to this gotcha is to make sure in your view code that "
"the data is ordered according to how you want to display it."
msgstr ""
"解决这个问题最简单的方法是在你的视图代码中确保数据是按照你想显示的方式来排序"
"的。"

msgid ""
"Another solution is to sort the data in the template using the :tfilter:"
"`dictsort` filter, if your data is in a list of dictionaries:"
msgstr ""

msgid "Grouping on other properties"
msgstr "对其他属性进行分组"

msgid ""
"Any valid template lookup is a legal grouping attribute for the regroup tag, "
"including methods, attributes, dictionary keys and list items. For example, "
"if the \"country\" field is a foreign key to a class with an attribute "
"\"description,\" you could use:"
msgstr ""

msgid ""
"Or, if ``country`` is a field with ``choices``, it will have a :meth:"
"`~django.db.models.Model.get_FOO_display` method available as an attribute, "
"allowing  you to group on the display string rather than the ``choices`` key:"
msgstr ""

msgid ""
"``{{ country.grouper }}`` will now display the value fields from the "
"``choices`` set rather than the keys."
msgstr "``{{ country.grouper }}`` 现在将显示 ``choices`` 集的值域，而不是键。"

msgid "``resetcycle``"
msgstr "``resetcycle``"

msgid ""
"Resets a previous `cycle`_ so that it restarts from its first item at its "
"next encounter. Without arguments, ``{% resetcycle %}`` will reset the last "
"``{% cycle %}`` defined in the template."
msgstr ""
"重置之前的 `cycle`_ ，使其在下一次遇到时从第一项开始重新启动。如果没有参数，"
"``{% resetcycle %}`` 将重置模板中定义的最后一个 ``{% cycle %}``。"

msgid "This example would return this HTML:"
msgstr ""

msgid ""
"Notice how the first block ends with ``class=\"odd\"`` and the new one "
"starts with ``class=\"odd\"``. Without the ``{% resetcycle %}`` tag, the "
"second block would start with ``class=\"even\"``."
msgstr ""
"请注意第一个代码块以 ``class=\"odd\"`` 结束，而新的代码块以 "
"``class=\"odd\"`` 开始。如果没有 ``{% resetcycle %}`` 标签，第二块将以 "
"``class=\"even\"`` 开始。"

msgid "You can also reset named cycle tags:"
msgstr ""

msgid ""
"In this example, we have both the alternating odd/even rows and a \"major\" "
"row every fifth row. Only the five-row cycle is reset when a category "
"changes."
msgstr ""
"在这个例子中，我们既有奇数／偶数行的交替，也有每第五行的 “主要” 行。只有当类"
"别发生变化时，才会重置五行循环。"

msgid "``spaceless``"
msgstr "``spaceless``"

msgid ""
"Removes whitespace between HTML tags. This includes tab characters and "
"newlines."
msgstr "删除 HTML 标签之间的空白。这包括制表符和换行符。"

msgid ""
"Only space between *tags* is removed -- not space between tags and text. In "
"this example, the space around ``Hello`` won't be stripped:"
msgstr ""

msgid "``templatetag``"
msgstr "``templatetag``"

msgid "Outputs one of the syntax characters used to compose template tags."
msgstr "输出用于组成模板标签的语法字符之一。"

msgid ""
"The template system has no concept of \"escaping\" individual characters. "
"However, you can use the ``{% templatetag %}`` tag to display one of the "
"template tag character combinations."
msgstr ""

msgid "The argument tells which template bit to output:"
msgstr "这个参数告诉我们要输出哪个模板位："

msgid "Outputs"
msgstr "输出"

msgid "``openblock``"
msgstr "``openblock``"

msgid "``{%``"
msgstr "``{%``"

msgid "``closeblock``"
msgstr "``closeblock``"

msgid "``%}``"
msgstr "``%}``"

msgid "``openvariable``"
msgstr "``openvariable``"

msgid "``{{``"
msgstr "``{{``"

msgid "``closevariable``"
msgstr "``closevariable``"

msgid "``}}``"
msgstr "``}}``"

msgid "``openbrace``"
msgstr "``openbrace``"

msgid "``{``"
msgstr "``{``"

msgid "``closebrace``"
msgstr "``closebrace``"

msgid "``}``"
msgstr "``}``"

msgid "``opencomment``"
msgstr "``opencomment``"

msgid "``{#``"
msgstr "``{#``"

msgid "``closecomment``"
msgstr "``closecomment``"

msgid "``#}``"
msgstr "``#}``"

msgid ""
"See also the :ttag:`verbatim` tag for another way of including these "
"characters."
msgstr "另请参阅 :ttag:`verbatim` 标签以了解包含这些字符的另一种方式。"

msgid "``url``"
msgstr "``url``"

msgid ""
"Returns an absolute path reference (a URL without the domain name) matching "
"a given view and optional parameters. Any special characters in the "
"resulting path will be encoded using :func:`~django.utils.encoding."
"iri_to_uri`."
msgstr ""
"返回与给定视图和可选参数相匹配的绝对路径引用（不含域名的 URL）。路径中的任何"
"特殊字符将使用 :func:`~django.utils.encoding.iri_to_uri` 进行编码。"

msgid ""
"This is a way to output links without violating the DRY principle by having "
"to hard-code URLs in your templates:"
msgstr ""

msgid ""
"The first argument is a :ref:`URL pattern name <naming-url-patterns>`. It "
"can be a quoted literal or any other context variable. Additional arguments "
"are optional and should be space-separated values that will be used as "
"arguments in the URL. The example above shows passing positional arguments. "
"Alternatively you may use keyword syntax:"
msgstr ""

msgid ""
"Do not mix both positional and keyword syntax in a single call. All "
"arguments required by the URLconf should be present."
msgstr ""
"不要在一次调用中同时混合使用位置和关键字语法。URLconf 所要求的所有参数都应该"
"存在。"

msgid ""
"For example, suppose you have a view, ``app_views.client``, whose URLconf "
"takes a client ID (here, ``client()`` is a method inside the views file "
"``app_views.py``). The URLconf line might look like this:"
msgstr ""
"例如，假设你有一个视图，``app_views.client``，它的 URLconf 需要一个客户端 ID"
"（这里，``client()`` 是视图文件 ``app_views.py`` 中的一个方法）。URLconf 行可"
"能是这样的："

msgid ""
"If this app's URLconf is included into the project's URLconf under a path "
"such as this:"
msgstr "如果这个应用的 URLconf 被包含在项目的 URLconf 中，路径如下："

msgid "...then, in a template, you can create a link to this view like this:"
msgstr ""

msgid "The template tag will output the string ``/clients/client/123/``."
msgstr "模板标签将输出字符串 ``/clients/client/123/``。"

msgid ""
"Note that if the URL you're reversing doesn't exist, you'll get an :exc:"
"`~django.urls.NoReverseMatch` exception raised, which will cause your site "
"to display an error page."
msgstr ""
"请注意，如果你要反查的 URL 不存在，你会得到一个 :exc:`~django.urls."
"NoReverseMatch` 的异常引发，这将导致你的网站显示一个错误页面。"

msgid ""
"If you'd like to retrieve a URL without displaying it, you can use a "
"slightly different call:"
msgstr ""

msgid ""
"The scope of the variable created by the  ``as var`` syntax is the ``{% "
"block %}`` in which the ``{% url %}`` tag appears."
msgstr ""
"``as var`` 语法创建的变量范围是 ``{% block %}``，其中出现 ``{% url %}`` 标"
"签。"

msgid ""
"This ``{% url ... as var %}`` syntax will *not* cause an error if the view "
"is missing. In practice you'll use this to link to views that are optional:"
msgstr ""

msgid ""
"If you'd like to retrieve a namespaced URL, specify the fully qualified name:"
msgstr ""

msgid ""
"This will follow the normal :ref:`namespaced URL resolution strategy <topics-"
"http-reversing-url-namespaces>`, including using any hints provided by the "
"context as to the current application."
msgstr ""
"这将遵循正常的 :ref:`命名空间 URL 解析策略 <topics-http-reversing-url-"
"namespaces>`，包括使用上下文提供的关于当前应用程序的任何提示。"

msgid ""
"Don't forget to put quotes around the URL pattern ``name``, otherwise the "
"value will be interpreted as a context variable!"
msgstr ""
"不要忘记在 URL 模式的 ``name`` 周围加上引号，否则其值将被解释为一个上下文变"
"量！"

msgid "``verbatim``"
msgstr "``verbatim``"

msgid ""
"Stops the template engine from rendering the contents of this block tag."
msgstr "停止模板引擎渲染此块标签的内容。"

msgid ""
"A common use is to allow a JavaScript template layer that collides with "
"Django's syntax. For example:"
msgstr ""

msgid ""
"You can also designate a specific closing tag, allowing the use of ``{% "
"endverbatim %}`` as part of the unrendered contents:"
msgstr ""

msgid "``widthratio``"
msgstr "``widthratio``"

msgid ""
"For creating bar charts and such, this tag calculates the ratio of a given "
"value to a maximum value, and then applies that ratio to a constant."
msgstr ""
"对于创建条形图等，该标签计算给定值与最大值的比率，然后将该比率应用于一个常"
"数。"

msgid ""
"If ``this_value`` is 175, ``max_value`` is 200, and ``max_width`` is 100, "
"the image in the above example will be 88 pixels wide (because 175/200 "
"= .875; .875 * 100 = 87.5 which is rounded up to 88)."
msgstr ""
"如果 ``this_value`` 是175，``max_value`` 是 200，``max_width`` 是 100，则上例"
"中的图像宽度为 88 像素（因为 175 / 200 = 0.875；0.875 * 100 = 87.5，四舍五入"
"为 88）。"

msgid ""
"In some cases you might want to capture the result of ``widthratio`` in a "
"variable. It can be useful, for instance, in a :ttag:`blocktranslate` like "
"this:"
msgstr ""

msgid "``with``"
msgstr "``with``"

msgid ""
"Caches a complex variable under a simpler name. This is useful when "
"accessing an \"expensive\" method (e.g., one that hits the database) "
"multiple times."
msgstr ""
"将一个复杂的变量缓存在一个简单的名称下。当多次访问一个 “昂贵的” 方法（例如，"
"访问数据库的方法）时，这很有用。"

msgid ""
"The populated variable (in the example above, ``total``) is only available "
"between the ``{% with %}`` and ``{% endwith %}`` tags."
msgstr ""
"被填充的变量（在上面的例子中，``total``）只有在 ``{% with %}`` 和 ``{% "
"endwith %}`` 标签之间才能使用。"

msgid "You can assign more than one context variable:"
msgstr ""

msgid ""
"The previous more verbose format is still supported: ``{% with business."
"employees.count as total %}``"
msgstr ""
"仍然支持以前比较啰嗦的格式： ``{% with business.employees.count as total %}"
"``。"

msgid "Built-in filter reference"
msgstr "内置过滤器参考"

msgid "``add``"
msgstr "``add``"

msgid "Adds the argument to the value."
msgstr "将参数添加到值中。"

msgid "If ``value`` is ``4``, then the output will be ``6``."
msgstr "如果 ``value`` 是 ``4``，那么输出将是 ``6``。"

msgid ""
"This filter will first try to coerce both values to integers. If this fails, "
"it'll attempt to add the values together anyway. This will work on some data "
"types (strings, list, etc.) and fail on others. If it fails, the result will "
"be an empty string."
msgstr ""
"这个过滤器将首先尝试将两个值强制转为整数。如果失败了，它将尝试将两个值加在一"
"起。这对某些数据类型（字符串、列表等）有效，而对其他类型则失败。如果失败，结"
"果将是一个空字符串。"

msgid "For example, if we have:"
msgstr ""

msgid ""
"and ``first`` is ``[1, 2, 3]`` and ``second`` is ``[4, 5, 6]``, then the "
"output will be ``[1, 2, 3, 4, 5, 6]``."
msgstr ""
"同时 ``first`` 是 ``[1, 2, 3]`` 并且 ``second`` 是 ``[4, 5, 6]``，则输出为 "
"``[1, 2, 3, 4, 5, 6]``。"

msgid ""
"Strings that can be coerced to integers will be **summed**, not "
"concatenated, as in the first example above."
msgstr ""
"可以强制转为整数的字符串将被 **相加**，而不是像上面上一个例子那样被连在一起。"

msgid "``addslashes``"
msgstr "``addslashes``"

msgid ""
"Adds slashes before quotes. Useful for escaping strings in CSV, for example."
msgstr "在引号前添加斜杠。对 CSV 中的字符串进行转义很有用，例如。"

msgid ""
"If ``value`` is ``\"I'm using Django\"``, the output will be ``\"I\\'m using "
"Django\"``."
msgstr ""
"如果 ``value`` 是 ``\"I'm using Django\"``，那么输出将是 ``\"I\\'m using "
"Django\"``。"

msgid "``capfirst``"
msgstr "``capfirst``"

msgid ""
"Capitalizes the first character of the value. If the first character is not "
"a letter, this filter has no effect."
msgstr "将值的第一个字符大写。如果第一个字符不是字母，这个过滤器就没有效果。"

msgid "If ``value`` is ``\"django\"``, the output will be ``\"Django\"``."
msgstr "如果 ``value`` 是 ``\"django\"``，则输出为 ``\"Django\"``。"

msgid "``center``"
msgstr "``center``"

msgid "Centers the value in a field of a given width."
msgstr "在给定宽度的字段中使数值居中。"

msgid ""
"If ``value`` is ``\"Django\"``, the output will be ``\"     Django    \"``."
msgstr "如果 ``value`` 是 ``\"Django\"``，输出将是 ``\"     Django    \"``。"

msgid "``cut``"
msgstr "``cut``"

msgid "Removes all values of arg from the given string."
msgstr "从给定的字符串中删除参数的所有值。"

msgid ""
"If ``value`` is ``\"String with spaces\"``, the output will be "
"``\"Stringwithspaces\"``."
msgstr ""
"如果 ``value`` 是 ``\"String with spaces\"``，输出将是 "
"``\"Stringwithspaces\"``。"

msgid "Formats a date according to the given format."
msgstr "根据给定的格式设置日期。"

msgid ""
"Uses a similar format to PHP's `date() <https://www.php.net/manual/en/"
"function.date.php>`_ function with some differences."
msgstr ""
"使用与 PHP 的 `date() <https://www.php.net/manual/en/function.date.php>`_ 函"
"数类似的格式，但有一些差异。"

msgid ""
"These format characters are not used in Django outside of templates. They "
"were designed to be compatible with PHP to ease transitioning for designers."
msgstr ""
"这些格式字符在模板之外的 Django 中没有使用。它们被设计成与 PHP 兼容，以方便设"
"计师过渡。"

msgid "Available format strings:"
msgstr "可用的格式字符串："

msgid "Format character"
msgstr "格式字符"

msgid "Example output"
msgstr "输出示例"

msgid "**Day**"
msgstr "**日**"

msgid "``d``"
msgstr "``d``"

msgid "Day of the month, 2 digits with leading zeros."
msgstr "某月的某日，2 位带前导零的数字。"

msgid "``'01'`` to ``'31'``"
msgstr "``'01'`` 到 ``'31'``"

msgid "``j``"
msgstr "``j``"

msgid "Day of the month without leading zeros."
msgstr "某月的某日，前面没有零。"

msgid "``'1'`` to ``'31'``"
msgstr "``'1'`` 到 ``'31'``"

msgid "``D``"
msgstr "``D``"

msgid "Day of the week, textual, 3 letters."
msgstr "某周的某日，3 个字母的文本。"

msgid "``'Fri'``"
msgstr "``'Fri'``"

msgid "``l``"
msgstr "``l``"

msgid "Day of the week, textual, long."
msgstr "某周的某日，长文本。"

msgid "``'Friday'``"
msgstr "``'Friday'``"

msgid "``S``"
msgstr "``S``"

msgid "English ordinal suffix for day of the month, 2 characters."
msgstr "某月英文序号后缀的某日，2 个字符。"

msgid "``'st'``, ``'nd'``, ``'rd'`` or ``'th'``"
msgstr "``'st'``、``'nd'``、``'rd'`` 或 ``'th'``"

msgid "``w``"
msgstr "``w``"

msgid "Day of the week, digits without leading zeros."
msgstr "某周的某日，不含前导零的数字。"

msgid "``'0'`` (Sunday) to ``'6'`` (Saturday)"
msgstr "``'0'`` （星期天）到 ``'6'`` （星期六）"

msgid "``z``"
msgstr "``z``"

msgid "Day of the year."
msgstr "某年的某日"

msgid "``1`` to ``366``"
msgstr "``1`` 到 ``366``"

msgid "**Week**"
msgstr "**周**"

msgid "``W``"
msgstr "``W``"

msgid "ISO-8601 week number of year, with weeks starting on Monday."
msgstr "年的 ISO-8601 周数，周从星期一开始。"

msgid "``1``, ``53``"
msgstr "``1``，``53``"

msgid "**Month**"
msgstr "**月**"

msgid "Month, 2 digits with leading zeros."
msgstr "月份，2 位数，前面加 0。"

msgid "``'01'`` to ``'12'``"
msgstr "``'01'`` 到 ``'12'``"

msgid "``n``"
msgstr "``n``"

msgid "Month without leading zeros."
msgstr "没有前导零的月份。"

msgid "``'1'`` to ``'12'``"
msgstr "``'1'`` 到 ``'12'``"

msgid "``M``"
msgstr "``M``"

msgid "Month, textual, 3 letters."
msgstr "月，3 个字母的文本。"

msgid "``'Jan'``"
msgstr "``'Jan'``"

msgid "``b``"
msgstr "``b``"

msgid "Month, textual, 3 letters, lowercase."
msgstr "月，小写的 3 个字母的文本。"

msgid "``'jan'``"
msgstr "``'jan'``"

msgid "``E``"
msgstr "``E``"

msgid ""
"Month, locale specific alternative representation usually used for long date "
"representation."
msgstr "月，特定地域的替代表示方法，通常用于长日期表示。"

msgid "``'listopada'`` (for Polish locale, as opposed to ``'Listopad'``)"
msgstr "``'listopada'`` （波兰语，与 ``'Listopad'`` 相对）"

msgid "``F``"
msgstr "``F``"

msgid "Month, textual, long."
msgstr "月，长文本。"

msgid "``'January'``"
msgstr "``'January'``"

msgid "``N``"
msgstr "``N``"

msgid "Month abbreviation in Associated Press style. Proprietary extension."
msgstr "美联社风格的月份缩写。专属扩展。"

msgid "``'Jan.'``, ``'Feb.'``, ``'March'``, ``'May'``"
msgstr "``'Jan.'``、``'Feb.'``、``'March'``、``'May'``"

msgid "``t``"
msgstr "``t``"

msgid "Number of days in the given month."
msgstr "特定月份的天数。"

msgid "``28`` to ``31``"
msgstr "``28`` 到 ``31``"

msgid "**Year**"
msgstr "**年**"

msgid "``y``"
msgstr "``y``"

msgid "Year, 2 digits with leading zeros."
msgstr "年，2 位带前导零的数字。"

msgid "``'00'`` to ``'99'``"
msgstr "``'00'`` 到 ``'99'``"

msgid "``Y``"
msgstr "``Y``"

msgid "Year, 4 digits with leading zeros."
msgstr "年，4 位带前导零的数字。"

msgid "``'0001'``, ..., ``'1999'``, ..., ``'9999'``"
msgstr "``'0001'``, ..., ``'1999'``, ..., ``'9999'``"

msgid "``L``"
msgstr "``L``"

msgid "Boolean for whether it's a leap year."
msgstr "是否为闰年的布尔值。"

msgid "``True`` or ``False``"
msgstr "``True`` 或 ``False``"

msgid "``o``"
msgstr "``o``"

msgid ""
"ISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W) "
"which uses leap weeks. See Y for the more common year format."
msgstr ""
"ISO-8601 周数年，对应于使用闰周的 ISO-8601 周数（W）。更常见的年份格式见 Y。"

msgid "``'1999'``"
msgstr "``'1999'``"

msgid "**Time**"
msgstr "**时间**"

msgid "``g``"
msgstr "``g``"

msgid "Hour, 12-hour format without leading zeros."
msgstr "小时，12 小时格式，无前导零。"

msgid "``G``"
msgstr "``G``"

msgid "Hour, 24-hour format without leading zeros."
msgstr "小时，24 小时格式，无前导零。"

msgid "``'0'`` to ``'23'``"
msgstr "``'0'`` 到 ``'23'``"

msgid "``h``"
msgstr "``h``"

msgid "Hour, 12-hour format."
msgstr "小时，12 小时格式。"

msgid "``H``"
msgstr "``H``"

msgid "Hour, 24-hour format."
msgstr "小时，24 小时格式。"

msgid "``'00'`` to ``'23'``"
msgstr "``'00'`` 到 ``'23'``"

msgid "``i``"
msgstr "``i``"

msgid "Minutes."
msgstr "分钟。"

msgid "``'00'`` to ``'59'``"
msgstr "``'00'`` 到 ``'59'``"

msgid "``s``"
msgstr "``s``"

msgid "Seconds, 2 digits with leading zeros."
msgstr "秒，2 位带前导零的数字。"

msgid "``u``"
msgstr "``u``"

msgid "Microseconds."
msgstr "微秒。"

msgid "``000000`` to ``999999``"
msgstr "``000000`` 到 ``999999``"

msgid "``a``"
msgstr "``a``"

msgid ""
"``'a.m.'`` or ``'p.m.'`` (Note that this is slightly different than PHP's "
"output, because this includes periods to match Associated Press style.)"
msgstr ""
"``'a.m.'`` 或 ``'p.m.'`` （请注意，这与 PHP 的输出略有不同，因为这包括了与美"
"联社风格一致的句号）。"

msgid "``'a.m.'``"
msgstr "``'a.m.'``"

msgid "``A``"
msgstr "``A``"

msgid "``'AM'`` or ``'PM'``."
msgstr "``'AM'`` 或 ``'PM'``。"

msgid "``'AM'``"
msgstr "``'AM'``"

msgid "``f``"
msgstr "``f``"

msgid ""
"Time, in 12-hour hours and minutes, with minutes left off if they're zero. "
"Proprietary extension."
msgstr ""
"时间，以 12 小时格式的小时和分钟为单位，如果是零，就把分钟去掉。专属扩展。"

msgid "``'1'``, ``'1:30'``"
msgstr "``'1'``，``'1:30'``"

msgid "``P``"
msgstr "``P``"

msgid ""
"Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off if "
"they're zero and the special-case strings 'midnight' and 'noon' if "
"appropriate. Proprietary extension."
msgstr ""
"时间，以 12 小时格式的小时、分钟和  'a.m.'／'p.m.' 为单位，如果分钟为零，则不"
"写，如果有，则写上特殊大小写的字符串 'midnight' 和 'noon'。专属扩展。"

msgid ""
"``'1 a.m.'``, ``'1:30 p.m.'``, ``'midnight'``, ``'noon'``, ``'12:30 p.m.'``"
msgstr ""
"``'1 a.m.'``、``'1:30 p.m.'``、``'midnight'``、``'noon'``、``'12:30 p.m.'``"

msgid "**Timezone**"
msgstr "**时区**"

msgid "``e``"
msgstr "``e``"

msgid ""
"Timezone name. Could be in any format, or might return an empty string, "
"depending on the datetime."
msgstr "时区名称。可以是任何格式，也可以返回一个空字符串，取决于日期时间。"

msgid "``''``, ``'GMT'``, ``'-500'``, ``'US/Eastern'``, etc."
msgstr "``''``、``'GMT'``、``'-500'``、``'US/Eastern'`` 等。"

msgid "``I``"
msgstr "``I``"

msgid "Daylight saving time, whether it's in effect or not."
msgstr "夏令时，无论是否生效。"

msgid "``'1'`` or ``'0'``"
msgstr "``'1'`` 或 ``'0'``"

msgid "``O``"
msgstr "``O``"

msgid "Difference to Greenwich time in hours."
msgstr "与格林威治时间的时差。"

msgid "``'+0200'``"
msgstr "``'+0200'``"

msgid "``T``"
msgstr "``T``"

msgid "Time zone of this machine."
msgstr "本机的时区。"

msgid "``'EST'``, ``'MDT'``"
msgstr "``'EST'``、``'MDT'``"

msgid "``Z``"
msgstr "``Z``"

msgid ""
"Time zone offset in seconds. The offset for timezones west of UTC is always "
"negative, and for those east of UTC is always positive."
msgstr ""
"时区偏移以秒为单位。UTC 以西的时区偏移总是负数，UTC 以东的时区偏移总是正数。"

msgid "``-43200`` to ``43200``"
msgstr "``-43200`` 到 ``43200``"

msgid "**Date/Time**"
msgstr "**日期／时间**"

msgid "``c``"
msgstr "``c``"

msgid ""
"ISO 8601 format. (Note: unlike other formatters, such as \"Z\", \"O\" or "
"\"r\", the \"c\" formatter will not add timezone offset if value is a naive "
"datetime (see :class:`datetime.tzinfo`)."
msgstr ""
"ISO 8601 格式。 （注意：与“Z”、“O”或“r”等其他格式化程序不同，如果值是原始日期"
"时间，“c”格式化程序将不会添加时区偏移量（参见 :class:`datetime.tzinfo`）。"

msgid ""
"``2008-01-02T10:30:00.000123+02:00``, or ``2008-01-02T10:30:00.000123`` if "
"the datetime is naive"
msgstr ""
"``2008-01-02T10:30:00.000123+02:00`` 或 ``2008-01-02T10:30:00.000123`` 如果日"
"期时间是本地的"

msgid "``r``"
msgstr "``r``"

msgid ":rfc:`RFC 5322 <5322#section-3.3>` formatted date."
msgstr ":rfc:`RFC 5322 <5322#section-3.3>` 格式的日期。"

msgid "``'Thu, 21 Dec 2000 16:01:07 +0200'``"
msgstr "``'Thu, 21 Dec 2000 16:01:07 +0200'``"

msgid "``U``"
msgstr "``U``"

msgid "Seconds since the Unix Epoch (January 1 1970 00:00:00 UTC)."
msgstr "自 Unix 纪元（1970 年 1 月 1 日 00:00:00 UTC）以来的秒数。"

msgid ""
"If ``value`` is a :py:class:`~datetime.datetime` object (e.g., the result of "
"``datetime.datetime.now()``), the output will be the string ``'Wed 09 Jan "
"2008'``."
msgstr ""
"如果 ``value`` 是一个 :py:class:`~datetime.datetime` 对象（例如，``datetime."
"datetime.datetime.now()`` 的结果），输出将是字符串 ``'Wed 09 Jan 2008'``。"

msgid ""
"The format passed can be one of the predefined ones :setting:`DATE_FORMAT`, :"
"setting:`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or :setting:"
"`SHORT_DATETIME_FORMAT`, or a custom format that uses the format specifiers "
"shown in the table above. Note that predefined formats may vary depending on "
"the current locale."
msgstr ""
"传递的格式可以是预定义的 :setting:`DATE_FORMAT`、:setting:"
"`DATETIME_FORMAT`、:setting:`SHORT_DATE_FORMAT` 或 :setting:"
"`SHORT_DATETIME_FORMAT`, 或者是使用上表中显示的格式指定器的自定义格式。请注"
"意，预定义的格式可能会根据当前的 locale 而有所不同。"

msgid ""
"Assuming that :setting:`USE_L10N` is ``True`` and :setting:`LANGUAGE_CODE` "
"is, for example, ``\"es\"``, then for:"
msgstr ""

msgid ""
"the output would be the string ``\"09/01/2008\"`` (the "
"``\"SHORT_DATE_FORMAT\"`` format specifier for the ``es`` locale as shipped "
"with Django is ``\"d/m/Y\"``)."
msgstr ""
"输出将是字符串 ``\"09/01/2008\"`` （Django 自带的 ``\"SHORT_DATE_FORMAT\"`` "
"格式指定符是 ``\"d/m/Y\"``）。"

msgid ""
"When used without a format string, the ``DATE_FORMAT`` format specifier is "
"used. Assuming the same settings as the previous example:"
msgstr ""

msgid ""
"outputs ``9 de Enero de 2008`` (the ``DATE_FORMAT`` format specifier for the "
"``es`` locale is ``r'j \\d\\e F \\d\\e Y'``). Both \"d\" and \"e\" are "
"backslash-escaped, because otherwise each is a format string that displays "
"the day and the timezone name, respectively."
msgstr ""
"输出 ``9 de Enero de 2008`` （``DATE_FORMAT'`` 格式指定符为 ``r'j\\d\\e "
"F\\d\\e Y'``）。“d” 和 “e” 都是反斜杠，因为否则每一个都是一个格式字符串，分别"
"显示日期和时区名称。"

msgid ""
"You can combine ``date`` with the :tfilter:`time` filter to render a full "
"representation of a ``datetime`` value. E.g.:"
msgstr ""

msgid ""
"If value evaluates to ``False``, uses the given default. Otherwise, uses the "
"value."
msgstr "如果值为 ``False``，则使用给定的默认值。否则，使用该值。"

msgid ""
"If ``value`` is ``\"\"`` (the empty string), the output will be ``nothing``."
msgstr "如果 ``value`` 是 ``\"\"`` （空字符串），输出将是 ``nothing``。"

msgid "``default_if_none``"
msgstr "``default_if_none``"

msgid ""
"If (and only if) value is ``None``, uses the given default. Otherwise, uses "
"the value."
msgstr "如果（也只有当）值是 ``None``，使用给定的默认值。否则，使用该值。"

msgid ""
"Note that if an empty string is given, the default value will *not* be used. "
"Use the :tfilter:`default` filter if you want to fallback for empty strings."
msgstr ""
"请注意，如果给定一个空字符串，将 *不会* 使用默认值。如果你想使用空字符串，请"
"使用 :tfilter:`default` 过滤器。"

msgid "If ``value`` is ``None``, the output will be ``nothing``."
msgstr "如果 ``value`` 是 ``None``，则输出为 ``nothing``。"

msgid "``dictsort``"
msgstr "``dictsort``"

msgid ""
"Takes a list of dictionaries and returns that list sorted by the key given "
"in the argument."
msgstr "获取一个字典列表，并按照参数中给出的键排序返回该列表。"

msgid "If ``value`` is:"
msgstr "如果 ``value`` 是："

msgid "then the output would be:"
msgstr "那么输出将是："

msgid "You can also do more complicated things like:"
msgstr ""

msgid "If ``books`` is:"
msgstr "如果 ``books`` 是："

msgid ""
"``dictsort`` can also order a list of lists (or any other object "
"implementing ``__getitem__()``) by elements at specified index. For example:"
msgstr ""

msgid ""
"You must pass the index as an integer rather than a string. The following "
"produce empty output:"
msgstr ""

msgid ""
"Ordering by elements at specified index is not supported on dictionaries."
msgstr ""

msgid ""
"In older versions, ordering elements at specified index was supported on "
"dictionaries."
msgstr ""

msgid "``dictsortreversed``"
msgstr "``dictsortreversed``"

msgid ""
"Takes a list of dictionaries and returns that list sorted in reverse order "
"by the key given in the argument. This works exactly the same as the above "
"filter, but the returned value will be in reverse order."
msgstr ""
"取一个字典列表，并按参数中给出的键反向排序返回该列表。这与上面的过滤器的工作"
"原理完全相同，但返回的值将是倒序的。"

msgid "``divisibleby``"
msgstr "``divisibleby``"

msgid "Returns ``True`` if the value is divisible by the argument."
msgstr "如果数值被参数整除，则返回 ``True``。"

msgid "If ``value`` is ``21``, the output would be ``True``."
msgstr "如果 ``value`` 是 ``21``，则输出为 ``True``。"

msgid "``escape``"
msgstr "``escape``"

msgid "Escapes a string's HTML. Specifically, it makes these replacements:"
msgstr "转义字符串的 HTML。具体来说，它可以进行这些替换。"

msgid "``<`` is converted to ``&lt;``"
msgstr "``<`` 被替换为 ``&lt;``"

msgid "``>`` is converted to ``&gt;``"
msgstr "``>`` 被替换为 ``&gt;``"

msgid "``'`` (single quote) is converted to ``&#x27;``"
msgstr "``'`` （单引号）被替换为 ``&#x27;``"

msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr "``\"`` （双引号）被替换为 ``&quot;``"

msgid "``&`` is converted to ``&amp;``"
msgstr "``&`` 被替换为 ``&amp;``"

msgid ""
"Applying ``escape`` to a variable that would normally have auto-escaping "
"applied to the result will only result in one round of escaping being done. "
"So it is safe to use this function even in auto-escaping environments. If "
"you want multiple escaping passes to be applied, use the :tfilter:"
"`force_escape` filter."
msgstr ""
"将 ``escape`` 应用到一个通常会对结果进行自动转义的变量上，结果只会进行一轮转"
"义。所以即使在自动转义环境中使用这个函数也是安全的。如果你想进行多次转义，请"
"使用 :tfilter:`force_escape` 过滤器。"

msgid ""
"For example, you can apply ``escape`` to fields when :ttag:`autoescape` is "
"off:"
msgstr ""

msgid "Chaining ``escape`` with other filters"
msgstr ""

msgid ""
"As mentioned in the :ttag:`autoescape` section, when filters including "
"``escape`` are chained together, it can result in unexpected outcomes if "
"preceding filters mark a potentially unsafe string as safe due to the lack "
"of escaping caused by :ttag:`autoescape` being ``off``."
msgstr ""

msgid ""
"In such cases, chaining ``escape`` would not reescape strings that have "
"already been marked as safe."
msgstr ""

msgid "``escapejs``"
msgstr "``escapejs``"

msgid ""
"Escapes characters for use as a whole JavaScript string literal, within "
"single or double quotes, as below. This filter does not make the string safe "
"for use in *\"JavaScript template literals\"* (the JavaScript backtick "
"syntax). Any other uses not listed above are not supported. It is generally "
"recommended that data should be passed using HTML ``data-`` attributes, or "
"the :tfilter:`json_script` filter, rather than in embedded JavaScript."
msgstr ""

msgid "``filesizeformat``"
msgstr "``filesizeformat``"

msgid ""
"Formats the value like a 'human-readable' file size (i.e. ``'13 KB'``, "
"``'4.1 MB'``, ``'102 bytes'``, etc.)."
msgstr ""
"以 “人类可读” 的文件大小为格式（如 ``'13 KB'``、``'4.1 MB'``、``'102 "
"bytes'`` 等）。"

msgid "If ``value`` is 123456789, the output would be ``117.7 MB``."
msgstr "如果 ``value`` 是 123456789，则输出为 ``117.7 MB``。"

msgid "File sizes and SI units"
msgstr "文件大小和 SI 单位"

msgid ""
"Strictly speaking, ``filesizeformat`` does not conform to the International "
"System of Units which recommends using KiB, MiB, GiB, etc. when byte sizes "
"are calculated in powers of 1024 (which is the case here). Instead, Django "
"uses traditional unit names (KB, MB, GB, etc.) corresponding to names that "
"are more commonly used."
msgstr ""
"严格来说，``filesizeformat`` 并不符合国际单位制，国际单位制建议在字节大小以 "
"1024 的幂计算时使用 KiB、MiB、GiB 等单位（这里就是这种情况）。相反，Django 使"
"用了传统的单位名称（KB、MB、GB 等），对应的是比较常用的名称。"

msgid "``first``"
msgstr "``first``"

msgid "Returns the first item in a list."
msgstr "返回列表中的第一个项目。"

msgid ""
"If ``value`` is the list ``['a', 'b', 'c']``, the output will be ``'a'``."
msgstr "如果 ``value`` 是列表 ``['a', 'b', 'c']``，则输出为 ``'a'``。"

msgid "``floatformat``"
msgstr "``floatformat``"

msgid ""
"When used without an argument, rounds a floating-point number to one decimal "
"place -- but only if there's a decimal part to be displayed. For example:"
msgstr ""
"当不使用参数时，将浮点数四舍五入到小数点后一位——但只在有小数部分要显示的情况"
"下。例如："

msgid "Template"
msgstr "模板"

msgid "Output"
msgstr "输出"

msgid "``34.23234``"
msgstr "``34.23234``"

msgid "``{{ value|floatformat }}``"
msgstr "``{{ value|floatformat }}``"

msgid "``34.2``"
msgstr "``34.2``"

msgid "``34.00000``"
msgstr "``34.00000``"

msgid "``34``"
msgstr "``34``"

msgid "``34.26000``"
msgstr "``34.26000``"

msgid "``34.3``"
msgstr "``34.3``"

msgid ""
"If used with a numeric integer argument, ``floatformat`` rounds a number to "
"that many decimal places. For example:"
msgstr ""
"如果与数字整数参数一起使用，``floatform`` 将一个数字四舍五入到小数点后几位。"
"例如："

msgid "``{{ value|floatformat:3 }}``"
msgstr "``{{ value|floatformat:3 }}``"

msgid "``34.232``"
msgstr "``34.232``"

msgid "``34.000``"
msgstr "``34.000``"

msgid "``34.260``"
msgstr "``34.260``"

msgid ""
"Particularly useful is passing 0 (zero) as the argument which will round the "
"float to the nearest integer."
msgstr "特别有用的是传递 0（零）作为参数，它将把浮点数舍入到最接近的整数。"

msgid "``{{ value|floatformat:\"0\" }}``"
msgstr "``{{ value|floatformat:\"0\" }}``"

msgid "``39.56000``"
msgstr "``39.56000``"

msgid "``40``"
msgstr "``40``"

msgid ""
"If the argument passed to ``floatformat`` is negative, it will round a "
"number to that many decimal places -- but only if there's a decimal part to "
"be displayed. For example:"
msgstr ""
"如果传递给 ``floatform`` 的参数是负数，它将把一个数字四舍五入到小数点后的位数"
"——但只在有小数部分要显示的情况下。例如："

msgid "``{{ value|floatformat:\"-3\" }}``"
msgstr "``{{ value|floatformat:\"-3\" }}``"

msgid ""
"If the argument passed to ``floatformat`` has the ``g`` suffix, it will "
"force grouping by the :setting:`THOUSAND_SEPARATOR` for the active locale. "
"For example, when the active locale is ``en`` (English):"
msgstr ""

msgid "``34232.34``"
msgstr "``34232.34``"

msgid "``{{ value|floatformat:\"2g\" }}``"
msgstr "``{{ value|floatformat:\"2g\" }}``"

msgid "``34,232.34``"
msgstr "``34,232.34``"

msgid "``34232.06``"
msgstr "``34232.06``"

msgid "``{{ value|floatformat:\"g\" }}``"
msgstr "``{{ value|floatformat:\"g\" }}``"

msgid "``34,232.1``"
msgstr "``34,232.1``"

msgid "``34232.00``"
msgstr "``34232.00``"

msgid "``{{ value|floatformat:\"-3g\" }}``"
msgstr "``{{ value|floatformat:\"-3g\" }}``"

msgid "``34,232``"
msgstr "``34,232``"

msgid ""
"Output is always localized (independently of the :ttag:`{% localize off %} "
"<localize>` tag) unless the argument passed to ``floatformat`` has the ``u`` "
"suffix, which will force disabling localization. For example, when the "
"active locale is ``pl`` (Polish):"
msgstr ""

msgid "``{{ value|floatformat:\"3\" }}``"
msgstr "``{{ value|floatformat:\"3\" }}``"

msgid "``{{ value|floatformat:\"3u\" }}``"
msgstr "``{{ value|floatformat:\"3u\" }}``"

msgid ""
"Using ``floatformat`` with no argument is equivalent to using "
"``floatformat`` with an argument of ``-1``."
msgstr ""
"在没有参数的情况下使用 ``floatformat`` 相当于在参数为 ``-1`` 的情况下使用 "
"``floatformat``。"

msgid "``force_escape``"
msgstr "``force_escape``"

msgid ""
"Applies HTML escaping to a string (see the :tfilter:`escape` filter for "
"details). This filter is applied *immediately* and returns a new, escaped "
"string. This is useful in the rare cases where you need multiple escaping or "
"want to apply other filters to the escaped results. Normally, you want to "
"use the :tfilter:`escape` filter."
msgstr ""
"对字符串进行 HTML 转义处理（详情请参见 :tfilter:`escape` 过滤器）。这个过滤器"
"会 *立即* 应用，并返回一个新的转义字符串。在极少数情况下，当你需要多次转义或"
"想对转义结果应用其他过滤器时，这很有用。通常情况下，你要使用 :tfilter:"
"`escape` 过滤器。"

msgid ""
"For example, if you want to catch the ``<p>`` HTML elements created by the :"
"tfilter:`linebreaks` filter:"
msgstr ""

msgid "``get_digit``"
msgstr "``get_digit``"

msgid ""
"Given a whole number, returns the requested digit, where 1 is the right-most "
"digit, 2 is the second-right-most digit, etc. Returns the original value for "
"invalid input (if input or argument is not an integer, or if argument is "
"less than 1). Otherwise, output is always an integer."
msgstr ""
"给定一个整数，返回要求的数字，其中 1 是最右边的数字，2 是最右边的数字，等等。"
"对于无效的输入（如果输入或参数不是整数，或者参数小于 1），返回原始值。否则，"
"输出总是一个整数。"

msgid "If ``value`` is ``123456789``, the output will be ``8``."
msgstr "如果 ``value`` 是 ``123456789``，则输出为 ``8``。"

msgid "``iriencode``"
msgstr "``iriencode``"

msgid ""
"Converts an IRI (Internationalized Resource Identifier) to a string that is "
"suitable for including in a URL. This is necessary if you're trying to use "
"strings containing non-ASCII characters in a URL."
msgstr ""
"将 IRI（国际化资源标识符）转换为适合包含在 URL 中的字符串。如果你想在 URL 中"
"使用包含非 ASCII 字符的字符串，这一点是必要的。"

msgid ""
"It's safe to use this filter on a string that has already gone through the :"
"tfilter:`urlencode` filter."
msgstr ""
"在已经通过 :tfilter:`urlencode` 过滤器的字符串上使用这个过滤器是安全的。"

msgid ""
"If ``value`` is ``\"?test=1&me=2\"``, the output will be ``\"?test=1&amp;"
"me=2\"``."
msgstr ""
"如果 ``value`` 是 ``\"?test=1&me=2\"``，则输出为 ``\"?test=1&amp;me=2\"``。"

msgid "``join``"
msgstr "``join``"

msgid "Joins a list with a string, like Python's ``str.join(list)``"
msgstr "用字符串连接一个列表，就像 Python 的 ``str.join(list)`` 一样。"

msgid ""
"If ``value`` is the list ``['a', 'b', 'c']``, the output will be the string "
"``\"a // b // c\"``."
msgstr ""
"如果 ``value`` 是列表 ``['a', 'b', 'c']``，输出将是字符串 ``\"a // b // "
"c\"``。"

msgid "``json_script``"
msgstr "``json_script``"

msgid ""
"Safely outputs a Python object as JSON, wrapped in a ``<script>`` tag, ready "
"for use with JavaScript."
msgstr ""
"安全地将 Python 对象输出为 JSON，用 ``<script>`` 标签包装，准备好与 "
"JavaScript 一起使用。"

msgid "**Argument:** The optional HTML \"id\" of the ``<script>`` tag."
msgstr ""

msgid ""
"If ``value`` is the dictionary ``{'hello': 'world'}``, the output will be:"
msgstr "如果 ``value`` 是字典 ``{'hello':'world'}``，则输出为："

msgid "The resulting data can be accessed in JavaScript like this:"
msgstr "由此产生的数据可以用 JavaScript 来访问，比如这样："

msgid ""
"XSS attacks are mitigated by escaping the characters \"<\", \">\" and \"&\". "
"For example if ``value`` is ``{'hello': 'world</script>&amp;'}``, the output "
"is:"
msgstr ""
"XSS 攻击可以通过转义字符 “<”、“>” 和 “&” 来缓解。例如，如果 ``value`` 是 "
"``{'hello': 'world</script>&amp;'}``，则输出为："

msgid ""
"This is compatible with a strict Content Security Policy that prohibits in-"
"page script execution. It also maintains a clean separation between passive "
"data and executable code."
msgstr ""
"这与严格的内容安全策略兼容，禁止在页面中执行脚本。它还保持了被动数据和可执行"
"代码之间的明确分离。"

msgid "In older versions, the HTML \"id\" was a required argument."
msgstr ""

msgid "``last``"
msgstr "``last``"

msgid "Returns the last item in a list."
msgstr "返回列表中的最后一项。"

msgid ""
"If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output will be the "
"string ``\"d\"``."
msgstr ""
"如果 ``value`` 是列表 ``['a', 'b', 'c', 'd']``，输出将是字符串 ``\"d\"``。"

msgid "``length``"
msgstr "``length``"

msgid "Returns the length of the value. This works for both strings and lists."
msgstr "返回值的长度。这对字符串和列表都有效。"

msgid ""
"If ``value`` is ``['a', 'b', 'c', 'd']`` or ``\"abcd\"``, the output will be "
"``4``."
msgstr ""
"如果 ``value`` 是 ``['a', 'b', 'c', 'd']`` 或 ``\"abcd\"``，输出将是 ``4``。"

msgid "The filter returns ``0`` for an undefined variable."
msgstr "过滤器对未定义的变量返回 ``0``。"

msgid "``length_is``"
msgstr "``length_is``"

msgid ""
"Returns ``True`` if the value's length is the argument, or ``False`` "
"otherwise."
msgstr "如果值的长度是参数，则返回 ``True``，否则返回 ``False``。"

msgid ""
"If ``value`` is ``['a', 'b', 'c', 'd']`` or ``\"abcd\"``, the output will be "
"``True``."
msgstr ""
"如果 ``value`` 是 ``['a', 'b', 'c', 'd']`` 或 ``\"abcd\"``，输出将是 "
"``True``。"

msgid "``linebreaks``"
msgstr "``linebreaks``"

msgid ""
"Replaces line breaks in plain text with appropriate HTML; a single newline "
"becomes an HTML line break (``<br>``) and a new line followed by a blank "
"line becomes a paragraph break (``</p>``)."
msgstr ""
"用适当的 HTML 替换纯文本中的换行符；一个新行成为 HTML 换行符（``<br>``），一"
"个新行后的空行成为段落换行符（``</p>``）。"

msgid ""
"If ``value`` is ``Joel\\nis a slug``, the output will be ``<p>Joel<br>is a "
"slug</p>``."
msgstr ""
"如果 ``value`` 是 ``Joel\\nis a slug``，则输出为 ``<p>Joel<br>is a slug</"
"p>``。"

msgid "``linebreaksbr``"
msgstr "``linebreaksbr``"

msgid ""
"Converts all newlines in a piece of plain text to HTML line breaks "
"(``<br>``)."
msgstr "将一段纯文本中的所有换行符转换为 HTML 换行符（``<br>``）。"

msgid ""
"If ``value`` is ``Joel\\nis a slug``, the output will be ``Joel<br>is a "
"slug``."
msgstr ""
"如果 ``value`` 是 ``Joel/nis a slug``，则输出为 ``Joel<br>is a slug``。"

msgid "``linenumbers``"
msgstr "``linenumbers``"

msgid "Displays text with line numbers."
msgstr "显示带有行号的文本。"

msgid "the output will be:"
msgstr ""

msgid "``ljust``"
msgstr "``ljust``"

msgid "Left-aligns the value in a field of a given width."
msgstr "左对齐给定宽度的字段中的值。"

msgid "**Argument:** field size"
msgstr "**参数：** 字段大小"

msgid "If ``value`` is ``Django``, the output will be ``\"Django    \"``."
msgstr "如果 ``value`` 是 ``Django``，则输出为 ``\"Django    \"``。"

msgid "``lower``"
msgstr "``lower``"

msgid "Converts a string into all lowercase."
msgstr "将一个字符串转换为全小写。"

msgid ""
"If ``value`` is ``Totally LOVING this Album!``, the output will be ``totally "
"loving this album!``."
msgstr ""
"如果 ``value`` 是 ``Totally LOVING this Album!``，则输出为 ``totally loving "
"this album!``。"

msgid "``make_list``"
msgstr "``make_list``"

msgid ""
"Returns the value turned into a list. For a string, it's a list of "
"characters. For an integer, the argument is cast to a string before creating "
"a list."
msgstr ""
"返回变成列表的值。对于字符串，它是一个字符列表。对于整数来说，在创建列表之"
"前，参数会被转换为一个字符串。"

msgid ""
"If ``value`` is the string ``\"Joel\"``, the output would be the list "
"``['J', 'o', 'e', 'l']``. If ``value`` is ``123``, the output will be the "
"list ``['1', '2', '3']``."
msgstr ""
"如果 ``value`` 是字符串 ``\"Joel\"``，输出将是列表 ``['J', 'o', 'e', 'l']``。"
"如果 ``value`` 是 ``123``，输出将是列表 ``['1'，'2'，'3']``。"

msgid "``phone2numeric``"
msgstr "``phone2numeric``"

msgid ""
"Converts a phone number (possibly containing letters) to its numerical "
"equivalent."
msgstr "将一个电话号码（可能包含字母）转换为其数字等价物。"

msgid ""
"The input doesn't have to be a valid phone number. This will happily convert "
"any string."
msgstr "输入的不一定是有效的电话号码。这将很乐意转换任何字符串。"

msgid "If ``value`` is ``800-COLLECT``, the output will be ``800-2655328``."
msgstr "如果 ``value`` 是 ``800-COLLECT``，则输出为 ``800-2655328``。"

msgid "``pluralize``"
msgstr "``pluralize``"

msgid ""
"Returns a plural suffix if the value is not ``1``, ``'1'``, or an object of "
"length 1. By default, this suffix is ``'s'``."
msgstr ""
"如果值不是 ``1``、``'1'`` 或长度为 1 的对象，则返回复数后缀。 默认情况下，后"
"缀为 ``'s'``。"

msgid ""
"If ``num_messages`` is ``1``, the output will be ``You have 1 message.`` If "
"``num_messages`` is ``2``  the output will be ``You have 2 messages.``"
msgstr ""
"如果 ``num_messages`` 是 ``1``，输出将是 ``You have 1 message.`` 如果 "
"``num_messages`` 是 ``2``，输出将是 ``You have 2 messages.``。"

msgid ""
"For words that require a suffix other than ``'s'``, you can provide an "
"alternate suffix as a parameter to the filter."
msgstr ""
"对于需要后缀而不是 ``'s'`` 的词，你可以提供一个备用后缀作为过滤器的参数。"

msgid ""
"For words that don't pluralize by simple suffix, you can specify both a "
"singular and plural suffix, separated by a comma."
msgstr ""
"对于不使用简单后缀进行复数的单词，你可以同时指定单数和复数后缀，并用逗号分"
"隔。"

msgid "Use :ttag:`blocktranslate` to pluralize translated strings."
msgstr "使用 :ttag:`blocktranslate` 来实现翻译字符串的复数化。"

msgid "``pprint``"
msgstr "``pprint``"

msgid "A wrapper around :func:`pprint.pprint` -- for debugging, really."
msgstr ":func:`pprint.pprint` 的一个包装器 —— 真的是用来调试的。"

msgid "Returns a random item from the given list."
msgstr "从给定列表中随机返回一个项目。"

msgid ""
"If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output could be "
"``\"b\"``."
msgstr "如果 ``value`` 是列表 ``['a', 'b', 'c', 'd']``，输出可能是 ``\"b\"``。"

msgid "``rjust``"
msgstr "``rjust``"

msgid "Right-aligns the value in a field of a given width."
msgstr "右对齐给定宽度的字段中的值。"

msgid "If ``value`` is ``Django``, the output will be ``\"    Django\"``."
msgstr "如果 ``value`` 是 ``Django``，输出将是 ``\"    Django\"``。"

msgid "``safe``"
msgstr "``safe``"

msgid ""
"Marks a string as not requiring further HTML escaping prior to output. When "
"autoescaping is off, this filter has no effect."
msgstr ""
"标记一个字符串在输出前不需要进一步的 HTML 转义。当自动转义关闭时，该过滤器没"
"有效果。"

msgid ""
"If you are chaining filters, a filter applied after ``safe`` can make the "
"contents unsafe again. For example, the following code prints the variable "
"as is, unescaped:"
msgstr ""

msgid "``safeseq``"
msgstr "``safeseq``"

msgid ""
"Applies the :tfilter:`safe` filter to each element of a sequence. Useful in "
"conjunction with other filters that operate on sequences, such as :tfilter:"
"`join`. For example:"
msgstr ""

msgid ""
"You couldn't use the :tfilter:`safe` filter directly in this case, as it "
"would first convert the variable into a string, rather than working with the "
"individual elements of the sequence."
msgstr ""
"在这种情况下，你不能直接使用 :tfilter:`safe` 过滤器，因为它会首先将变量转换为"
"字符串，而不是处理序列中的单个元素。"

msgid "``slice``"
msgstr "``slice``"

msgid "Returns a slice of the list."
msgstr "返回列表的一个片段。"

msgid ""
"Uses the same syntax as Python's list slicing. See https://diveinto.org/"
"python3/native-datatypes.html#slicinglists for an introduction."
msgstr ""

msgid ""
"If ``some_list`` is ``['a', 'b', 'c']``, the output will be ``['a', 'b']``."
msgstr "如果 ``some_list`` 是 ``['a', 'b', 'c']``，输出将是 ``['a', 'b']``。"

msgid "``slugify``"
msgstr "``slugify``"

msgid ""
"Converts to ASCII. Converts spaces to hyphens. Removes characters that "
"aren't alphanumerics, underscores, or hyphens. Converts to lowercase. Also "
"strips leading and trailing whitespace."
msgstr ""
"转换为 ASCII 码。将空格转换为连字符。移除非字母数字、下划线或连字符的字符。转"
"换为小写字母。还可以去除前导和尾部的空白。"

msgid ""
"If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"joel-is-a-"
"slug\"``."
msgstr ""
"如果 ``value`` 是 ``\"Joel is a slug\"``，那么输出将是 ``\"joel-is-a-"
"slug\"``。"

msgid "``stringformat``"
msgstr "``stringformat``"

msgid ""
"Formats the variable according to the argument, a string formatting "
"specifier. This specifier uses the :ref:`old-string-formatting` syntax, with "
"the exception that the leading \"%\" is dropped."
msgstr ""
"根据参数——字符串格式化指定器，对变量进行格式化。这个指定符使用 :ref:`old-"
"string-formatting` 语法，例外的是前面的 “%” 被删除。"

msgid "If ``value`` is ``10``, the output will be ``1.000000E+01``."
msgstr "如果 ``value`` 是 ``10``，则输出为 ``1.000000E+01``。"

msgid "``striptags``"
msgstr "``striptags``"

msgid "Makes all possible efforts to strip all [X]HTML tags."
msgstr "尽一切努力剥离所有 [X]HTML 标签。"

msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, "
"the output will be ``\"Joel is a slug\"``."
msgstr ""
"如果 ``value`` 为 ``\"<b>Joel</b> <button>is</button> a <span>slug</"
"span>\"``, 那么输出就会是 ``\"Joel is a slug\"``."

msgid "No safety guarantee"
msgstr "没有安全保证"

msgid ""
"Note that ``striptags`` doesn't give any guarantee about its output being "
"HTML safe, particularly with non valid HTML input. So **NEVER** apply the "
"``safe`` filter to a ``striptags`` output. If you are looking for something "
"more robust, consider using a third-party HTML sanitizing tool."
msgstr ""

msgid "Formats a time according to the given format."
msgstr "根据给定的格式对时间进行格式化。"

msgid ""
"Given format can be the predefined one :setting:`TIME_FORMAT`, or a custom "
"format, same as the :tfilter:`date` filter. Note that the predefined format "
"is locale-dependent."
msgstr ""
"给定的格式可以是预定义的 :setting:`TIME_FORMAT`，也可以是自定义的格式，和 :"
"tfilter:`date` 过滤器一样。请注意，预定义的格式是依赖于 locale 的。"

msgid ""
"If ``value`` is equivalent to ``datetime.datetime.now()``, the output will "
"be the string ``\"01:23\"``."
msgstr ""
"如果 ``value`` 相当于 ``datetime.datetime.now()``，输出将是字符串 "
"``\"01:23\"``。"

msgid ""
"Note that you can backslash-escape a format string if you want to use the "
"\"raw\" value. In this example, both \"h\" and \"m\" are backslash-escaped, "
"because otherwise each is a format string that displays the hour and the "
"month, respectively:"
msgstr ""

msgid "This would display as \"01h 23m\"."
msgstr "这样就会显示为 “01h 23m”。"

msgid "Another example:"
msgstr "另一个例子："

msgid ""
"Assuming that :setting:`USE_L10N` is ``True`` and :setting:`LANGUAGE_CODE` "
"is, for example, ``\"de\"``, then for:"
msgstr ""

msgid ""
"the output will be the string ``\"01:23\"`` (The ``\"TIME_FORMAT\"`` format "
"specifier for the ``de`` locale as shipped with Django is ``\"H:i\"``)."
msgstr ""
"输出将是字符串 ``\"01:23\"`` （Django 自带的 ``\"TIME_FORMAT\"`` 格式指定符"
"为 ``\"H:i\"``）。"

msgid ""
"The ``time`` filter will only accept parameters in the format string that "
"relate to the time of day, not the date. If you need to format a ``date`` "
"value, use the :tfilter:`date` filter instead (or along with :tfilter:`time` "
"if you need to render a full :py:class:`~datetime.datetime` value)."
msgstr ""
"``time`` 过滤器只接受格式字符串中与一天中的时间有关的参数，而不是日期。如果你"
"需要格式化一个 ``date`` 值，请使用 :tfilter:`date` 过滤器来代替（如果你需要渲"
"染一个完整的 :py:class:`~datetime.datetime` 值，则使用 :tfilter:`time`）。"

msgid ""
"There is one exception the above rule: When passed a ``datetime`` value with "
"attached timezone information (a :ref:`time-zone-aware "
"<naive_vs_aware_datetimes>` ``datetime`` instance) the ``time`` filter will "
"accept the timezone-related :ref:`format specifiers <date-and-time-"
"formatting-specifiers>` ``'e'``, ``'O'`` , ``'T'`` and ``'Z'``."
msgstr ""
"上述规则有一个例外。当传递一个附带时区信息的 ``datetime`` 值时（一个 :ref:`时"
"区感知 <naive_vs_aware_datetimes>` 的 ``datetime`` 实例），``time`` 过滤器将"
"接受与时区相关的 :ref:`格式指定符 <date-and-time-formatting-specifiers>` "
"``'e'``、``'O'``、``'T'`` 和 ``'Z'``。"

msgid ""
"When used without a format string, the ``TIME_FORMAT`` format specifier is "
"used:"
msgstr ""

msgid "is the same as:"
msgstr ""

msgid "``timesince``"
msgstr "``timesince``"

msgid "Formats a date as the time since that date (e.g., \"4 days, 6 hours\")."
msgstr "将日期格式化为自该日期起的时间（如 “4 days, 6 hours”）。"

msgid ""
"Takes an optional argument that is a variable containing the date to use as "
"the comparison point (without the argument, the comparison point is *now*). "
"For example, if ``blog_date`` is a date instance representing midnight on 1 "
"June 2006, and ``comment_date`` is a date instance for 08:00 on 1 June 2006, "
"then the following would return \"8 hours\":"
msgstr ""

msgid ""
"Comparing offset-naive and offset-aware datetimes will return an empty "
"string."
msgstr "比较本地偏移和感知偏移的日期会返回一个空字符串。"

msgid ""
"Minutes is the smallest unit used, and \"0 minutes\" will be returned for "
"any date that is in the future relative to the comparison point."
msgstr ""
"分钟是使用的最小单位，凡是相对于比较点来说是未来的日期，都会返回 “0 "
"minutes”。"

msgid "``timeuntil``"
msgstr "``timeuntil``"

msgid ""
"Similar to ``timesince``, except that it measures the time from now until "
"the given date or datetime. For example, if today is 1 June 2006 and "
"``conference_date`` is a date instance holding 29 June 2006, then "
"``{{ conference_date|timeuntil }}`` will return \"4 weeks\"."
msgstr ""
"与 ``timesince`` 类似，不同的是，它测量的是从现在到给定日期或日期时间的时间。"
"例如，如果今天是 2006 年 6 月 1 日，而 ``conference_date`` 是一个持有 2006 "
"年 6 月 29 日的日期实例，那么 ``{conference_date|timeuntil }}`` 将返回 “4 "
"weeks”。"

msgid ""
"Takes an optional argument that is a variable containing the date to use as "
"the comparison point (instead of *now*). If ``from_date`` contains 22 June "
"2006, then the following will return \"1 week\":"
msgstr ""

msgid ""
"Minutes is the smallest unit used, and \"0 minutes\" will be returned for "
"any date that is in the past relative to the comparison point."
msgstr ""
"分钟是使用的最小单位，相对于比较点而言，任何处于过去的日期都将返回 “0 "
"minutes”。"

msgid ""
"Converts a string into titlecase by making words start with an uppercase "
"character and the remaining characters lowercase. This tag makes no effort "
"to keep \"trivial words\" in lowercase."
msgstr ""
"通过使单词以大写字母开头，其余字符以小写字母开头，将字符串转换为大写字母。这"
"个标签不会努力让 “琐碎的单词” 保持小写。"

msgid ""
"If ``value`` is ``\"my FIRST post\"``, the output will be ``\"My First "
"Post\"``."
msgstr ""
"如果 ``value`` 是 ``\"my FIRST post\"``，则输出将是 ``\"My First Post\"``。"

msgid "``truncatechars``"
msgstr "``truncatechars``"

msgid ""
"Truncates a string if it is longer than the specified number of characters. "
"Truncated strings will end with a translatable ellipsis character (\"…\")."
msgstr ""
"如果一个字符串的长度超过指定的字符数，则截断它。截断后的字符串将以一个可翻译"
"的省略号（“...”）结束。"

msgid "**Argument:** Number of characters to truncate to"
msgstr "**参数：** 要截断的字符数"

msgid ""
"If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel i…\"``."
msgstr "如果 ``value`` 是 ``\"Joel is a slug\"``，则输出将是 ``\"Joel i…\"``。"

msgid "``truncatechars_html``"
msgstr "``truncatechars_html``"

msgid ""
"Similar to :tfilter:`truncatechars`, except that it is aware of HTML tags. "
"Any tags that are opened in the string and not closed before the truncation "
"point are closed immediately after the truncation."
msgstr ""
"类似于 :tfilter:`truncatechars`，只是它能识别 HTML 标签。任何在字符串中打开但"
"在截断点之前没有关闭的标签都会在截断后立即关闭。"

msgid ""
"If ``value`` is ``\"<p>Joel is a slug</p>\"``, the output will be "
"``\"<p>Joel i…</p>\"``."
msgstr ""
"如果 ``value`` 是 ``\"<p>Joel is a slug</p>\"``，则输出将是 ``\"<p>Joel i…</"
"p>\"``。"

msgid "Newlines in the HTML content will be preserved."
msgstr "HTML 内容中的新行将被保留。"

msgid "Size of input string"
msgstr ""

msgid ""
"Processing large, potentially malformed HTML strings can be resource-"
"intensive and impact service performance. ``truncatechars_html`` limits "
"input to the first five million characters."
msgstr ""

msgid "In older versions, strings over five million characters were processed."
msgstr ""

msgid "``truncatewords``"
msgstr "``truncatewords``"

msgid "Truncates a string after a certain number of words."
msgstr "在一定字数后截断字符串。"

msgid "**Argument:** Number of words to truncate after"
msgstr "**参数：** 要在之后截断的字数"

msgid ""
"If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel is …\"``."
msgstr ""
"如果 ``value`` 是 ``\"Joel is a slug\"``，则输出将是 ``\"Joel is …\"``。"

msgid "Newlines within the string will be removed."
msgstr "字符串内的新行将被删除。"

msgid "``truncatewords_html``"
msgstr "``truncatewords_html``"

msgid ""
"Similar to :tfilter:`truncatewords`, except that it is aware of HTML tags. "
"Any tags that are opened in the string and not closed before the truncation "
"point, are closed immediately after the truncation."
msgstr ""
"类似于 :tfilter:`truncatewords`，只是它能识别 HTML 标签。任何在字符串中打开的"
"标签，如果在截断点之前没有关闭，则会在截断后立即关闭。"

msgid ""
"This is less efficient than :tfilter:`truncatewords`, so should only be used "
"when it is being passed HTML text."
msgstr "这比 :tfilter:`truncatewords` 效率低，所以只能在传递 HTML 文本时使用。"

msgid ""
"If ``value`` is ``\"<p>Joel is a slug</p>\"``, the output will be "
"``\"<p>Joel is …</p>\"``."
msgstr ""
"如果 ``value`` 是 ``\"<p>Joel is a slug</p>\"``，则输出将是 ``\"<p>Joel is …"
"</p>\"``。"

msgid ""
"Processing large, potentially malformed HTML strings can be resource-"
"intensive and impact service performance. ``truncatewords_html`` limits "
"input to the first five million characters."
msgstr ""

msgid "``unordered_list``"
msgstr "``unordered_list``"

msgid ""
"Recursively takes a self-nested list and returns an HTML unordered list -- "
"WITHOUT opening and closing ``<ul>`` tags."
msgstr ""

msgid ""
"The list is assumed to be in the proper format. For example, if ``var`` "
"contains ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``, "
"then ``{{ var|unordered_list }}`` would return:"
msgstr ""

msgid "``upper``"
msgstr "``upper``"

msgid "Converts a string into all uppercase."
msgstr "将一个字符串转换为全大写。"

msgid ""
"If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"JOEL IS A "
"SLUG\"``."
msgstr ""
"如果 ``value`` 是 ``\"Joel is a slug\"``，则输出将是 ``\"JOEL IS A SLUG\"``。"

msgid "``urlencode``"
msgstr "``urlencode``"

msgid "Escapes a value for use in a URL."
msgstr "转义一个值用于 URL。"

msgid ""
"If ``value`` is ``\"https://www.example.org/foo?a=b&c=d\"``, the output will "
"be ``\"https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\"``."
msgstr ""
"如果 ``value`` 是 ``\"https://www.example.org/foo?a=b&c=d\"``，则输出将是 "
"``\"https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\"``。"

msgid ""
"An optional argument containing the characters which should not be escaped "
"can be provided."
msgstr "可以提供一个可选的参数，包含不应该被转义的字符。"

msgid ""
"If not provided, the '/' character is assumed safe. An empty string can be "
"provided when *all* characters should be escaped. For example:"
msgstr ""

msgid ""
"If ``value`` is ``\"https://www.example.org/\"``, the output will be "
"``\"https%3A%2F%2Fwww.example.org%2F\"``."
msgstr ""
"如果 ``value`` 是 ``\"https://www.example.org/\"``，则输出将是 "
"``\"https%3A%2F%2Fwww.example.org%2F\"``。"

msgid "``urlize``"
msgstr "``urlize``"

msgid "Converts URLs and email addresses in text into clickable links."
msgstr "将文本中的 URL 和电子邮件地址转换为可点击的链接。"

msgid ""
"This template tag works on links prefixed with ``http://``, ``https://``, or "
"``www.``. For example, ``https://goo.gl/aia1t`` will get converted but ``goo."
"gl/aia1t`` won't."
msgstr ""
"这个模板标签适用于以 ``http://`、``https://`` 或 ``www.`` 为前缀的链接。例"
"如，``https://goo.gl/aia1t`` 会被转换，但 ``goo.gl/aia1t`` 不会。"

msgid ""
"It also supports domain-only links ending in one of the original top level "
"domains (``.com``, ``.edu``, ``.gov``, ``.int``, ``.mil``, ``.net``, and ``."
"org``). For example, ``djangoproject.com`` gets converted."
msgstr ""
"它还支持以原始顶级域（``.com``、``.edu``、``.gov``、``.int``、``.mil``、``."
"net`` 和 ``.org``）之一结尾的纯域链接。例如，``djangoproject.com`` 被转换。"

msgid ""
"Links can have trailing punctuation (periods, commas, close-parens) and "
"leading punctuation (opening parens), and ``urlize`` will still do the right "
"thing."
msgstr ""
"链接可以有尾部的标点符号（句号、逗号、闭括号），也可以有前面的标点符号（开头"
"的小括号），``urlize`` 仍然会做正确的事情。"

msgid ""
"Links generated by ``urlize`` have a ``rel=\"nofollow\"`` attribute added to "
"them."
msgstr "``urlize`` 产生的链接有一个 ``rel=\"nofollow\"`` 属性。"

msgid ""
"If ``value`` is ``\"Check out www.djangoproject.com\"``, the output will be "
"``\"Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www."
"djangoproject.com</a>\"``."
msgstr ""
"如果 ``value`` 是 ``\"Check out www.djangoproject.com\"``，则输出将是 "
"``\"Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www."
"djangoproject.com</a>\"``。"

msgid ""
"In addition to web links, ``urlize`` also converts email addresses into "
"``mailto:`` links. If ``value`` is ``\"Send questions to foo@example."
"com\"``, the output will be ``\"Send questions to <a href=\"mailto:"
"foo@example.com\">foo@example.com</a>\"``."
msgstr ""
"除了网页链接，``urlize`` 还将电子邮件地址转换为 ``mailto:`` 链接。如果 "
"``value`` 是 ``\"Send questions to foo@example.com\"``，输出将是 ``\"Send "
"questions to <a href=\"mailto:foo@example.com\">foo@example.com</a>\"``。"

msgid ""
"The ``urlize`` filter also takes an optional parameter ``autoescape``. If "
"``autoescape`` is ``True``, the link text and URLs will be escaped using "
"Django's built-in :tfilter:`escape` filter. The default value for "
"``autoescape`` is ``True``."
msgstr ""
"``urlize`` 过滤器还可以使用一个可选的参数 ``autoescape``。如果 "
"``autoescape`` 为 ``True``，则链接文本和 URL 将使用 Django 内置的 :tfilter:"
"`escape` 过滤器进行转义。``autoescape`` 的默认值是 ``True``。"

msgid ""
"If ``urlize`` is applied to text that already contains HTML markup, or to "
"email addresses that contain single quotes (``'``), things won't work as "
"expected. Apply this filter only to plain text."
msgstr ""
"如果 ``urlize`` 应用于已经包含 HTML 标记的文本，或者应用于包含单引号（``'``）"
"的电子邮件地址，那么事情就不会像预期的那样进行。只对纯文本应用此过滤器。"

msgid "``urlizetrunc``"
msgstr "``urlizetrunc``"

msgid ""
"Converts URLs and email addresses into clickable links just like urlize_, "
"but truncates URLs longer than the given character limit."
msgstr ""
"像 urlize_ 一样，将 URL 和电子邮件地址转换为可点击的链接，但会截断长于给定字"
"符限制的 URL。"

msgid ""
"**Argument:** Number of characters that link text should be truncated to, "
"including the ellipsis that's added if truncation is necessary."
msgstr "**参数：** 链接文本应截断的字符数，包括必要时添加的省略号。"

msgid ""
"If ``value`` is ``\"Check out www.djangoproject.com\"``, the output would be "
"``'Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www."
"djangoproj…</a>'``."
msgstr ""
"如果 ``value`` 是 ``\"Check out www.djangoproject.com\"``，则将输出 ``'Check "
"out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangoproj…"
"</a>'``。"

msgid "As with urlize_, this filter should only be applied to plain text."
msgstr "和 urlize_ 一样，这个过滤器只能应用于纯文本。"

msgid "``wordcount``"
msgstr "``wordcount``"

msgid "Returns the number of words."
msgstr "返回单词的数量。"

msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``4``."
msgstr "如果 ``value`` 是 ``\"Joel is a slug\"``，则输出将是 ``4``。"

msgid "``wordwrap``"
msgstr "``wordwrap``"

msgid "Wraps words at specified line length."
msgstr "以指定的行长度包装文字。"

msgid "**Argument:** number of characters at which to wrap the text"
msgstr "**参数：** 包裹文本的字符数"

msgid "If ``value`` is ``Joel is a slug``, the output would be:"
msgstr ""

msgid "``yesno``"
msgstr "``yesno``"

msgid ""
"Maps values for ``True``, ``False``, and (optionally) ``None``, to the "
"strings \"yes\", \"no\", \"maybe\", or a custom mapping passed as a comma-"
"separated list, and returns one of those strings according to the value:"
msgstr ""
"将 ``True``、``False`` 和（可选的） ``None`` 值映射到字符串 "
"“yes”、“no”、“maybe” 或以逗号分隔的列表形式传递的自定义映射，并根据值返回其中"
"一个字符串。"

msgid "``True``"
msgstr "``True``"

msgid "``yes``"
msgstr "``yes``"

msgid "``\"yeah,no,maybe\"``"
msgstr "``\"yeah,no,maybe\"``"

msgid "``yeah``"
msgstr "``yeah``"

msgid "``False``"
msgstr "``False``"

msgid "``no``"
msgstr "``no``"

msgid "``maybe``"
msgstr "``maybe``"

msgid "``\"yeah,no\"``"
msgstr "``\"yeah,no\"``"

msgid ""
"``no`` (converts ``None`` to ``False`` if no mapping for ``None`` is given)"
msgstr ""
"``no`` （如果没有给出 ``None`` 的映射，则将 ``None`` 转换为 ``False``）"

msgid "Internationalization tags and filters"
msgstr "国际化标签和过滤器"

msgid ""
"Django provides template tags and filters to control each aspect of :doc:"
"`internationalization </topics/i18n/index>` in templates. They allow for "
"granular control of translations, formatting, and time zone conversions."
msgstr ""
"Django 提供了模板标签和过滤器来控制模板中的 :doc:`国际化 </topics/i18n/"
"index>` 的各个环节。它们允许对翻译、格式化和时区转换进行细化控制。"

msgid "``i18n``"
msgstr "``i18n``"

msgid ""
"This library allows specifying translatable text in templates. To enable it, "
"set :setting:`USE_I18N` to ``True``, then load it with ``{% load i18n %}``."
msgstr ""
"该库允许在模板中指定可翻译的文本。要启用它，请将 :setting:`USE_I18N` 设置为 "
"``True``，然后用 ``{% load i18n %}`` 加载它。"

msgid "See :ref:`specifying-translation-strings-in-template-code`."
msgstr "参见 :ref:`specifying-translation-strings-in-template-code`。"

msgid "``l10n``"
msgstr "``l10n``"

msgid ""
"This library provides control over the localization of values in templates. "
"You only need to load the library using ``{% load l10n %}``, but you'll "
"often set :setting:`USE_L10N` to ``True`` so that localization is active by "
"default."
msgstr ""
"这个库提供了对模板中值的本地化控制。你只需要使用 ``{% load l10n %}`` 加载该"
"库，但你通常会将 :setting:`USE_L10N` 设置为 ``True``，这样默认情况下本地化是"
"有效的。"

msgid "See :ref:`topic-l10n-templates`."
msgstr "参见 :ref:`topic-l10n-templates`。"

msgid "``tz``"
msgstr "``tz``"

msgid ""
"This library provides control over time zone conversions in templates. Like "
"``l10n``, you only need to load the library using ``{% load tz %}``, but "
"you'll usually also set :setting:`USE_TZ` to ``True`` so that conversion to "
"local time happens by default."
msgstr ""
"这个库提供了对模板中时区转换的控制。和 ``l10n`` 一样，你只需要使用 ``{% load "
"tz %}`` 加载该库，但你通常也会将 :setting:`USE_TZ` 设置为 ``True``，这样就会"
"默认转换为当地时间。"

msgid "See :ref:`time-zones-in-templates`."
msgstr "参见 :ref:`time-zones-in-templates`。"

msgid "Other tags and filters libraries"
msgstr "其他标签和过滤器库"

msgid ""
"Django comes with a couple of other template-tag libraries that you have to "
"enable explicitly in your :setting:`INSTALLED_APPS` setting and enable in "
"your template with the :ttag:`{% load %}<load>` tag."
msgstr ""
"Django 自带了一些其他的模板标签库，你必须在你的 :setting:`INSTALLED_APPS` 配"
"置中明确启用，并在你的模板中用 :ttag:`{% load %}<load>` 标签启用。"

msgid ""
"A set of Django template filters useful for adding a \"human touch\" to "
"data. See :doc:`/ref/contrib/humanize`."
msgstr ""
"一组 Django 模板过滤器，用于给数据添加 “人情味”。参见 :doc:`/ref/contrib/"
"humanize`。"

msgid "``static``"
msgstr "``static``"

msgid ""
"To link to static files that are saved in :setting:`STATIC_ROOT` Django "
"ships with a :ttag:`static` template tag. If the :mod:`django.contrib."
"staticfiles` app is installed, the tag will serve files using ``url()`` "
"method of the storage specified by ``staticfiles`` in :setting:`STORAGES`. "
"For example:"
msgstr ""

msgid ""
"It is also able to consume standard context variables, e.g. assuming a "
"``user_stylesheet`` variable is passed to the template:"
msgstr ""

msgid ""
"If you'd like to retrieve a static URL without displaying it, you can use a "
"slightly different call:"
msgstr ""

msgid "Using Jinja2 templates?"
msgstr "使用 Jinja2 模板？"

msgid ""
"See :class:`~django.template.backends.jinja2.Jinja2` for information on "
"using the ``static`` tag with Jinja2."
msgstr ""
"参见 :class:`~django.template.backends.jinja2.Jinja2`，了解如何在 Jinja2 中使"
"用 ``static`` 标签。"

msgid "``get_static_prefix``"
msgstr "``get_static_prefix``"

msgid ""
"You should prefer the :ttag:`static` template tag, but if you need more "
"control over exactly where and how :setting:`STATIC_URL` is injected into "
"the template, you can use the :ttag:`get_static_prefix` template tag:"
msgstr ""

msgid ""
"There's also a second form you can use to avoid extra processing if you need "
"the value multiple times:"
msgstr ""

msgid "``get_media_prefix``"
msgstr "``get_media_prefix``"

msgid ""
"Similar to the :ttag:`get_static_prefix`, ``get_media_prefix`` populates a "
"template variable with the media prefix :setting:`MEDIA_URL`, e.g.:"
msgstr ""

msgid ""
"By storing the value in a data attribute, we ensure it's escaped "
"appropriately if we want to use it in a JavaScript context."
msgstr ""
"通过将值存储在数据属性中，我们可以确保在 JavaScript 上下文中使用该值时适当地"
"进行转义。"

msgid ""
"Django's template engine provides a powerful mini-language for defining the "
"user-facing layer of your application, encouraging a clean separation of "
"application and presentation logic. Templates can be maintained by anyone "
"with an understanding of HTML; no knowledge of Python is required. For "
"introductory material, see :doc:`/topics/templates` topic guide."
msgstr ""
"Django 的模板引擎提供了一个强大的迷你语言来定义你的应用程序的面向用户层，鼓励"
"应用程序和表现逻辑的清晰分离。任何懂 HTML 的人都可以维护模板，不需要 Python "
"知识。关于入门材料，请参见 :doc:`/topics/templates` 主题指南。"

msgid ""
"For information on writing your own custom tags and filters, see :doc:`/"
"howto/custom-template-tags`."
msgstr ""
"关于编写自定义标签和过滤器的信息，请参见 :doc:`/howto/custom-template-tags`。"

msgid ""
"To learn how to override templates in other Django applications, see :doc:`/"
"howto/overriding-templates`."
msgstr ""
"要学习如何在其他 Django 应用中覆盖模板，请看 :doc:`/howto/overriding-"
"templates`。"

msgid "The Django template language"
msgstr "Django 模板语言"

msgid ""
"This document explains the language syntax of the Django template system. If "
"you're looking for a more technical perspective on how it works and how to "
"extend it, see :doc:`/ref/templates/api`."
msgstr ""
"本文档解释了 Django 模板系统的语言语法。如果你想从技术角度了解它的工作原理以"
"及如何扩展它，请参见 :doc:`/ref/templates/api`。"

msgid ""
"Django's template language is designed to strike a balance between power and "
"ease. It's designed to feel comfortable to those used to working with HTML. "
"If you have any exposure to other text-based template languages, such as "
"Smarty_ or Jinja2_, you should feel right at home with Django's templates."
msgstr ""
"Django 的模板语言是为了在强大和简单之间取得平衡而设计的。它的设计让习惯于使"
"用 HTML 的人感觉很舒服。如果你接触过其他基于文本的模板语言，如 Smarty_ 或 "
"Jinja2_ ，你应该会对 Django 的模板感到很舒服。"

msgid "Philosophy"
msgstr "设计哲学"

msgid ""
"If you have a background in programming, or if you're used to languages "
"which mix programming code directly into HTML, you'll want to bear in mind "
"that the Django template system is not simply Python embedded into HTML. "
"This is by design: the template system is meant to express presentation, not "
"program logic."
msgstr ""
"如果你有编程背景，或者你习惯于将编程代码直接混入 HTML 的语言，你要记住，"
"Django 模板系统并不是简单的将 Python 嵌入到 HTML 中。这是设计上的：模板系统是"
"为了表达表现形式，而不是程序逻辑。"

msgid ""
"The Django template system provides tags which function similarly to some "
"programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for` "
"tag for looping, etc. -- but these are not simply executed as the "
"corresponding Python code, and the template system will not execute "
"arbitrary Python expressions. Only the tags, filters and syntax listed below "
"are supported by default (although you can add :doc:`your own extensions </"
"howto/custom-template-tags>` to the template language as needed)."
msgstr ""
"Django 模板系统提供了类似于一些编程结构的标签——布尔测试的 :ttag:`if` 标签，循"
"环的 :ttag:`for` 标签等等。——但这些并不是简单地作为相应的 Python 代码来执行，"
"模板系统不会执行任意的 Python 表达式。默认情况下只支持下面列出的标签、过滤器"
"和语法（尽管你可以根据需要在模板语言中添加 :doc:`你自己的扩展 </howto/custom-"
"template-tags>`）。"

msgid ""
"A template is a text file. It can generate any text-based format (HTML, XML, "
"CSV, etc.)."
msgstr ""
"模板是一个文本文件。它可以生成任何基于文本的格式（HTML、XML、CSV 等）。"

msgid ""
"A template contains **variables**, which get replaced with values when the "
"template is evaluated, and **tags**, which control the logic of the template."
msgstr ""
"一个模板包含 **变量** 和 **标签**，前者在模板被执行时被替换为值，后者控制模板"
"的逻辑。"

msgid ""
"Below is a minimal template that illustrates a few basics. Each element will "
"be explained later in this document."
msgstr ""
"下面是一个最小的模板，说明了一些基本的内容。每一个元素将在本文档的后面解释。"

msgid ""
"Why use a text-based template instead of an XML-based one (like Zope's TAL)? "
"We wanted Django's template language to be usable for more than just XML/"
"HTML templates. You can use the template language for any text-based format "
"such as emails, JavaScript and CSV."
msgstr ""
"为什么使用基于文本的模板而不是基于 XML 的模板（比如 Zope 的 TAL）？我们希望 "
"Django 的模板语言不仅仅适用于 XML／HTML 模板。你可以将模板语言用于任何基于文"
"本的格式，如电子邮件、JavaScript 和 CSV。"

msgid "Variables"
msgstr "变量"

msgid ""
"Variables look like this: ``{{ variable }}``. When the template engine "
"encounters a variable, it evaluates that variable and replaces it with the "
"result. Variable names consist of any combination of alphanumeric characters "
"and the underscore (``\"_\"``) but may not start with an underscore, and may "
"not be a number. The dot (``\".\"``) also appears in variable sections, "
"although that has a special meaning, as indicated below. Importantly, *you "
"cannot have spaces or punctuation characters in variable names.*"
msgstr ""

msgid "Use a dot (``.``) to access attributes of a variable."
msgstr "使用点号（``.``）来访问一个变量的属性。"

msgid ""
"Technically, when the template system encounters a dot, it tries the "
"following lookups, in this order:"
msgstr "从技术上讲，当模板系统遇到一个点时，它会按照以下顺序尝试进行查找："

msgid "Dictionary lookup"
msgstr "字典查找"

msgid "Attribute or method lookup"
msgstr "属性或方法查找"

msgid "Numeric index lookup"
msgstr "数字索引查找"

msgid ""
"If the resulting value is callable, it is called with no arguments. The "
"result of the call becomes the template value."
msgstr "如果产生的值是可调用对象，则调用时不含参数。调用的结果成为模板值。"

msgid ""
"This lookup order can cause some unexpected behavior with objects that "
"override dictionary lookup. For example, consider the following code snippet "
"that attempts to loop over a ``collections.defaultdict``:"
msgstr ""

msgid ""
"Because dictionary lookup happens first, that behavior kicks in and provides "
"a default value instead of using the intended ``.items()`` method. In this "
"case, consider converting to a dictionary first."
msgstr ""
"因为字典查找是先发生的，这种行为会启动并提供一个默认值，而不是使用预期的 ``."
"items()`` 方法。在这种情况下，可以考虑先转换为字典。"

msgid ""
"In the above example, ``{{ section.title }}`` will be replaced with the "
"``title`` attribute of the ``section`` object."
msgstr ""
"在上面的例子中，``{{ section.title }}`` 将被 ``section`` 对象的 ``title`` 属"
"性所取代。"

msgid ""
"If you use a variable that doesn't exist, the template system will insert "
"the value of the ``string_if_invalid`` option, which is set to ``''`` (the "
"empty string) by default."
msgstr ""
"如果你使用一个不存在的变量，模板系统会插入 ``string_if_invalid`` 选项的值，默"
"认设置为 ``''`` （空字符串）。"

msgid ""
"Variable attributes that begin with an underscore may not be accessed as "
"they're generally considered private."
msgstr "以下划线开头的变量属性可能不会被访问，因为它们通常被认为是私有的。"

msgid "You can modify variables for display by using **filters**."
msgstr "你可以通过使用 **过滤器** 修改显示的变量。"

msgid ""
"Filters look like this: ``{{ name|lower }}``. This displays the value of the "
"``{{ name }}`` variable after being filtered through the :tfilter:`lower` "
"filter, which converts text to lowercase. Use a pipe (``|``) to apply a "
"filter."
msgstr ""
"过滤器是这样的： ``{{ name|lower }}``。这将显示 :tfilter:`lower` 过滤器过滤后"
"的 ``{{ name }}`` 变量的值，该过滤器将文本转换为小写。使用管道（``|``）来应用"
"过滤器。"

msgid ""
"Filters can be \"chained.\" The output of one filter is applied to the next. "
"``{{ text|escape|linebreaks }}`` is a common idiom for escaping text "
"contents, then converting line breaks to ``<p>`` tags."
msgstr ""
"过滤器可以“链式的”。一个过滤器的输出被应用到下一个过滤器。``{{ text|escape|"
"linebreaks }}`` 是一个常用的成语，用于转义文本内容，然后将换行符转换为 "
"``<p>`` 标签。"

msgid ""
"Some filters take arguments. A filter argument looks like this: ``{{ bio|"
"truncatewords:30 }}``. This will display the first 30 words of the ``bio`` "
"variable."
msgstr ""
"有些过滤器需要参数。一个过滤器的参数是这样的： ``{{ bio|truncatewords:30 }}"
"``。这将显示 ``bio`` 变量的前 30 个字。"

msgid ""
"Filter arguments that contain spaces must be quoted; for example, to join a "
"list with commas and spaces you'd use ``{{ list|join:\", \" }}``."
msgstr ""
"包含空格的过滤器参数必须加引号；例如，要连接一个包含逗号和空格的列表，你可以"
"使用 ``{{ list|join:\", \" }}``。"

msgid ""
"Django provides about sixty built-in template filters. You can read all "
"about them in the :ref:`built-in filter reference <ref-templates-builtins-"
"filters>`. To give you a taste of what's available, here are some of the "
"more commonly used template filters:"
msgstr ""
"Django 提供了大约 60 个内置的模板过滤器。你可以在 :ref:`内置过滤器参考 <ref-"
"templates-builtins-filters>` 中阅读它们。为了让你了解这些模板过滤器，这里有一"
"些比较常用的模板过滤器："

msgid ":tfilter:`default`"
msgstr ":tfilter:`default`"

msgid ""
"If a variable is false or empty, use given default. Otherwise, use the value "
"of the variable. For example:"
msgstr ""

msgid ""
"If ``value`` isn't provided or is empty, the above will display "
"\"``nothing``\"."
msgstr "如果 ``value`` 没有提供或者为空，那么他将显示为“``nothing``”。"

msgid ":tfilter:`length`"
msgstr ":tfilter:`length`"

msgid ""
"Returns the length of the value. This works for both strings and lists. For "
"example:"
msgstr ""

msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr "如果 ``value`` 为 ``['a', 'b', 'c', 'd']``, 那么他将被显示为 ``4``。"

msgid ":tfilter:`filesizeformat`"
msgstr ":tfilter:`filesizeformat`"

msgid ""
"Formats the value like a \"human-readable\" file size (i.e. ``'13 KB'``, "
"``'4.1 MB'``, ``'102 bytes'``, etc.). For example:"
msgstr ""

msgid ""
"Again, these are just a few examples; see the :ref:`built-in filter "
"reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""
"这些只是几个例子，请参阅  :ref:`内置过滤器参考 <ref-templates-builtins-"
"filters>` 的完整列表。"

msgid ""
"You can also create your own custom template filters; see :doc:`/howto/"
"custom-template-tags`."
msgstr ""
"你还可以创建自己的自定义模板过滤器，请参见 :doc:`/howto/custom-template-"
"tags`。"

msgid ""
"Django's admin interface can include a complete reference of all template "
"tags and filters available for a given site. See :doc:`/ref/contrib/admin/"
"admindocs`."
msgstr ""
"Django 的管理界面可以包含一个完整的给定网站的所有模板标签和过滤器的参考。参"
"见 :doc:`/ref/contrib/admin/admindocs`。"

msgid "Tags"
msgstr "标签"

msgid ""
"Tags look like this: ``{% tag %}``. Tags are more complex than variables: "
"Some create text in the output, some control flow by performing loops or "
"logic, and some load external information into the template to be used by "
"later variables."
msgstr ""
"标签是这样的： ``{% tag %}``。标签比变量更复杂。有的在输出中创建文本，有的通"
"过执行循环或逻辑来控制流程，有的将外部信息加载到模板中，供以后的变量使用。"

msgid ""
"Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag "
"contents ... {% endtag %}``)."
msgstr ""
"有些标签要求有开始和结束标签（即 ``{% tag %} ... tag contents ... {% endtag "
"%}``）。"

msgid ""
"Django ships with about two dozen built-in template tags. You can read all "
"about them in the :ref:`built-in tag reference <ref-templates-builtins-"
"tags>`. To give you a taste of what's available, here are some of the more "
"commonly used tags:"
msgstr ""
"Django 有二十多个内置的模板标签。你可以在 :ref:`内置标签参考 <ref-templates-"
"builtins-tags>` 中阅读所有关于它们的信息。为了让你了解这些标签，这里有一些比"
"较常用的标签。"

msgid ":ttag:`for`"
msgstr ":ttag:`for`"

msgid ""
"Loop over each item in an array.  For example, to display a list of athletes "
"provided in ``athlete_list``:"
msgstr ""

msgid ":ttag:`if`, ``elif``, and ``else``"
msgstr ":ttag:`if`、``elif`` 和 ``else``"

msgid ""
"Evaluates a variable, and if that variable is \"true\" the contents of the "
"block are displayed:"
msgstr ""

msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable. Otherwise, if "
"``athlete_in_locker_room_list`` is not empty, the message \"Athletes should "
"be out...\" will be displayed. If both lists are empty, \"No athletes.\" "
"will be displayed."
msgstr ""
"在上述情况下，如果 ``athlete_list`` 不为空，则会通过 ``{ athlete_list|"
"length }}`` 变量显示运动员的数量。否则，如果 ``athlete_in_locker_room_list`` "
"不为空，则会显示“Athletes should be out...”的消息。如果两个列表都是空的，将显"
"示“No athletes.”。"

msgid "You can also use filters and various operators in the :ttag:`if` tag:"
msgstr ""

msgid ""
"While the above example works, be aware that most template filters return "
"strings, so mathematical comparisons using filters will generally not work "
"as you expect. :tfilter:`length` is an exception."
msgstr ""
"虽然上面的例子是可行的，但要注意大多数模板过滤器都会返回字符串，所以使用过滤"
"器进行数学比较一般不会像你预期的那样。"

msgid ":ttag:`block` and :ttag:`extends`"
msgstr ":ttag:`block` 和 :ttag:`extends`"

msgid ""
"Set up `template inheritance`_ (see below), a powerful way of cutting down "
"on \"boilerplate\" in templates."
msgstr "设置 `模板继承`_ （见下文），这是减少模板中 “样板代码” 的有力方法。"

msgid ""
"Again, the above is only a selection of the whole list; see the :ref:`built-"
"in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""
"同样，以上只是整个列表的一部分，完整的列表请参见 :ref:`内置标签参考 <ref-"
"templates-builtins-tags>`。"

msgid ""
"You can also create your own custom template tags; see :doc:`/howto/custom-"
"template-tags`."
msgstr ""
"你也可以创建你自己的模板标签；参见 :doc:`/howto/custom-template-tags`。"

msgid "Comments"
msgstr "注释"

msgid ""
"To comment-out part of a line in a template, use the comment syntax: ``{# #}"
"``."
msgstr "要对模板中的部分行进行注释，请使用注释语法。``{# #}``。"

msgid "For example, this template would render as ``'hello'``:"
msgstr ""

msgid "A comment can contain any template code, invalid or not. For example:"
msgstr ""

msgid ""
"This syntax can only be used for single-line comments (no newlines are "
"permitted between the ``{#`` and ``#}`` delimiters). If you need to comment "
"out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""
"这种语法只能用于单行注释（在 ``{#`` 和 ``#}`` 定界符之间不允许使用换行）。如"
"果你需要对模板的多行部分进行注释，请参见 :ttag:`comment` 标签。"

msgid "Template inheritance"
msgstr "模板继承"

msgid ""
"The most powerful -- and thus the most complex -- part of Django's template "
"engine is template inheritance. Template inheritance allows you to build a "
"base \"skeleton\" template that contains all the common elements of your "
"site and defines **blocks** that child templates can override."
msgstr ""
"Django 的模板引擎中最强大的——也是最复杂的——部分是模板继承。模板继承允许你建立"
"一个基本的“骨架”模板，它包含了你网站的所有常用元素，并定义了子模板可以覆盖的 "
"**块**。"

msgid "Let's look at template inheritance by starting with an example:"
msgstr ""

msgid ""
"This template, which we'll call ``base.html``, defines an HTML skeleton "
"document that you might use for a two-column page. It's the job of \"child\" "
"templates to fill the empty blocks with content."
msgstr ""
"这个模板，我们称之为 ``base.html``，它定义了一个 HTML 骨架文档，你可以用它来"
"制作一个两栏式页面。“子”模板的工作是用内容填充空块。"

msgid ""
"In this example, the :ttag:`block` tag defines three blocks that child "
"templates can fill in. All the :ttag:`block` tag does is to tell the "
"template engine that a child template may override those portions of the "
"template."
msgstr ""
"在这个例子中，:ttag:`block` 标签定义了三个块，子模板可以填入其中。:ttag:"
"`block` 标签所做的就是告诉模板引擎，子模板可以覆盖模板的这些部分。"

msgid "A child template might look like this:"
msgstr ""

msgid ""
"The :ttag:`extends` tag is the key here. It tells the template engine that "
"this template \"extends\" another template. When the template system "
"evaluates this template, first it locates the parent -- in this case, \"base."
"html\"."
msgstr ""
":ttag:`extends` 标签是这里的关键。它告诉模板引擎，这个模板“扩展”了另一个模"
"板。当模板系统执行这个模板时，首先要找到父模板——在本例中是“base.html”。"

msgid ""
"At that point, the template engine will notice the three :ttag:`block` tags "
"in ``base.html`` and replace those blocks with the contents of the child "
"template. Depending on the value of ``blog_entries``, the output might look "
"like:"
msgstr ""

msgid ""
"Note that since the child template didn't define the ``sidebar`` block, the "
"value from the parent template is used instead. Content within a ``{% block "
"%}`` tag in a parent template is always used as a fallback."
msgstr ""
"请注意，由于子模板没有定义 ``sidebar`` 块，所以使用父模板的值来代替。父模板"
"中 ``{% block %}`` 标签中的内容总是被用作后备。"

msgid ""
"You can use as many levels of inheritance as needed. One common way of using "
"inheritance is the following three-level approach:"
msgstr ""
"你可以根据需要使用任意层次的继承。一种常见的使用继承的方式是像以下的三层继"
"承："

msgid ""
"Create a ``base.html`` template that holds the main look-and-feel of your "
"site."
msgstr "创建一个 ``base.html`` 模板，以保持你网站的主要外观和风格。"

msgid ""
"Create a ``base_SECTIONNAME.html`` template for each \"section\" of your "
"site. For example, ``base_news.html``, ``base_sports.html``. These templates "
"all extend ``base.html`` and include section-specific styles/design."
msgstr ""
"为你网站的每个“部分”创建一个 ``base_SECTIONNAME.html`` 模板。例如，"
"``base_news.html``、``base_sports.html``。这些模板都是对 ``base.html`` 的扩"
"展，并包括特定部分的样式／设计。"

msgid ""
"Create individual templates for each type of page, such as a news article or "
"blog entry. These templates extend the appropriate section template."
msgstr ""
"为每种类型的页面创建单独的模板，如新闻文章或博客条目。这些模板扩展了相应的部"
"分模板。"

msgid ""
"This approach maximizes code reuse and helps to add items to shared content "
"areas, such as section-wide navigation."
msgstr ""
"这种方法可以最大限度地重用代码，并有助于将项目添加到共享内容区域，如全部分导"
"航。"

msgid "Here are some tips for working with inheritance:"
msgstr "下面是一些关于继承工作的技巧："

msgid ""
"If you use :ttag:`{% extends %}<extends>` in a template, it must be the "
"first template tag in that template. Template inheritance won't work, "
"otherwise."
msgstr ""
"如果你在模板中使用 :ttag:`{% extends %}<extends>`，它必须是该模板中的第一个模"
"板标签。否则，模板继承将无法使用。"

msgid ""
"More :ttag:`{% block %}<block>` tags in your base templates are better. "
"Remember, child templates don't have to define all parent blocks, so you can "
"fill in reasonable defaults in a number of blocks, then only define the ones "
"you need later. It's better to have more hooks than fewer hooks."
msgstr ""
"基础模板中的 :ttag:`{% block %}<block>` 标签越多越好。记住，子模板不需要定义"
"所有的父块，所以你可以在一些块中填入合理的默认值，然后只定义以后需要的块。钩"
"子多比钩子少好。"

msgid ""
"If you find yourself duplicating content in a number of templates, it "
"probably means you should move that content to a ``{% block %}`` in a parent "
"template."
msgstr ""
"如果你发现自己的内容在多个模板中重复，可能意味着你应该把这些内容移到父模板中"
"的 ``{% block %}``。"

msgid ""
"If you need to get the content of the block from the parent template, the "
"``{{ block.super }}`` variable will do the trick. This is useful if you want "
"to add to the contents of a parent block instead of completely overriding "
"it. Data inserted using ``{{ block.super }}`` will not be automatically "
"escaped (see the `next section`_), since it was already escaped, if "
"necessary, in the parent template."
msgstr ""
"如果你需要从父模板中获取块的内容，``{{ block.super }}`` 变量就可以做到这一"
"点。如果你想添加到父模板的内容中，而不是完全覆盖它，这很有用。使用 "
"``{{ block.super }}`` 插入的数据不会被自动转义（参见 `下一节`_ ），因为如果需"
"要的话，它已经在父模板中被转义了。"

msgid ""
"By using the same template name as you are inheriting from, :ttag:`{% "
"extends %}<extends>` can be used to inherit a template at the same time as "
"overriding it. Combined with ``{{ block.super }}``, this can be a powerful "
"way to make small customizations. See :ref:"
"`extending_an_overridden_template` in the *Overriding templates* How-to for "
"a full example."
msgstr ""
"通过使用与继承模板相同的模板名称，:ttag:`{% extends %}<extends>` 可以在覆盖模"
"板的同时继承它。结合 ``{{ block.super }}``，这可以成为一种强大的小规模定制方"
"式。完整的例子请参见 :ref:`extending_an_overridden_template` 中的 "
"*Overriding templates* How-to。"

msgid ""
"Variables created outside of a :ttag:`{% block %}<block>` using the template "
"tag ``as`` syntax can't be used inside the block. For example, this template "
"doesn't render anything:"
msgstr ""

msgid ""
"For extra readability, you can optionally give a *name* to your ``{% "
"endblock %}`` tag. For example:"
msgstr ""

msgid ""
"In larger templates, this technique helps you see which ``{% block %}`` tags "
"are being closed."
msgstr ""
"在较大的模板中，这种技术可以帮助你看到哪些 ``{% block %}`` 标签正在被关闭。"

msgid ""
":ttag:`{% block %}<block>` tags are evaluated first. That's why the content "
"of a block is always overridden, regardless of the truthiness of surrounding "
"tags. For example, this template will *always* override the content of the "
"``title`` block:"
msgstr ""

msgid ""
"Finally, note that you can't define multiple :ttag:`block` tags with the "
"same name in the same template. This limitation exists because a block tag "
"works in \"both\" directions. That is, a block tag doesn't just provide a "
"hole to fill -- it also defines the content that fills the hole in the "
"*parent*. If there were two similarly-named :ttag:`block` tags in a "
"template, that template's parent wouldn't know which one of the blocks' "
"content to use."
msgstr ""
"最后，请注意，你不能在同一个模板中定义多个同名的 :ttag:`block` 标签。之所以有"
"这种限制，是因为块标签可以“双向”工作。也就是说，一个块标签不只是提供一个洞来"
"填补——它还定义了填补 *父* 模板中洞的内容。如果一个模板中有两个名称相似的 :"
"ttag:`block` 标签，那么该模板的父标签就不知道该使用哪一个块的内容。"

msgid "Automatic HTML escaping"
msgstr "自动 HTML 转义"

msgid ""
"When generating HTML from templates, there's always a risk that a variable "
"will include characters that affect the resulting HTML. For example, "
"consider this template fragment:"
msgstr ""

msgid ""
"At first, this seems like a harmless way to display a user's name, but "
"consider what would happen if the user entered their name as this:"
msgstr ""

msgid "With this name value, the template would be rendered as:"
msgstr ""

msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr "...这意味着浏览器会弹出一个 JavaScript 提示框！"

msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr "同样，如果名称中包含一个 ``'<'`` 符号，像这样呢？"

msgid "That would result in a rendered template like this:"
msgstr ""

msgid ""
"...which, in turn, would result in the remainder of the web page being in "
"bold!"
msgstr ""

msgid ""
"Clearly, user-submitted data shouldn't be trusted blindly and inserted "
"directly into your web pages, because a malicious user could use this kind "
"of hole to do potentially bad things. This type of security exploit is "
"called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""

msgid "To avoid this problem, you have two options:"
msgstr "为了避免这个问题，你有两个选择："

msgid ""
"One, you can make sure to run each untrusted variable through the :tfilter:"
"`escape` filter (documented below), which converts potentially harmful HTML "
"characters to unharmful ones. This was the default solution in Django for "
"its first few years, but the problem is that it puts the onus on *you*, the "
"developer / template author, to ensure you're escaping everything. It's easy "
"to forget to escape data."
msgstr ""
"一，你可以确保通过 :tfilter:`escape` 过滤器来运行每个不受信任的变量（如下文所"
"述），它可以将潜在的有害 HTML 字符转换为无害的字符。在 Django 的前几年，这是"
"默认的解决方案，但问题是它把责任推给了 *你*，开发者／模板作者，以确保你的一切"
"都被转义。很容易忘记对数据进行转义。"

msgid ""
"Two, you can take advantage of Django's automatic HTML escaping. The "
"remainder of this section describes how auto-escaping works."
msgstr ""
"二，你可以利用 Django 的自动 HTML 转义功能。本节剩余部分将介绍自动转义的工作"
"原理。"

msgid ""
"By default in Django, every template automatically escapes the output of "
"every variable tag. Specifically, these five characters are escaped:"
msgstr ""
"在 Django 中，默认情况下，每个模板都会自动转义每个变量标签的输出。具体来说，"
"这五个字符会被转义："

msgid ""
"Again, we stress that this behavior is on by default. If you're using "
"Django's template system, you're protected."
msgstr ""
"我们再次强调，这个行为是默认开启的。如果你使用的是 Django 的模板系统，你就会"
"受到保护。"

msgid "How to turn it off"
msgstr "如何关闭它"

msgid ""
"If you don't want data to be auto-escaped, on a per-site, per-template level "
"or per-variable level, you can turn it off in several ways."
msgstr ""
"如果你不希望数据被自动转义, 你可以在站点、模板,、变量这三个层面关闭它："

msgid ""
"Why would you want to turn it off? Because sometimes, template variables "
"contain data that you *intend* to be rendered as raw HTML, in which case you "
"don't want their contents to be escaped. For example, you might store a blob "
"of HTML in your database and want to embed that directly into your template. "
"Or, you might be using Django's template system to produce text that is "
"*not* HTML -- like an email message, for instance."
msgstr ""
"为什么要关闭它？因为有时，模板变量包含的数据是你希望以原始 HTML 的形式呈现"
"的，在这种情况下，你不希望其内容被转义。例如，你可能在数据库中存储了一个 "
"HTML 片段，并希望将其直接嵌入到模板中。或者，你可能会使用 Django 的模板系统来"
"生成非 HTML 的文本——比如说，电子邮件。"

msgid "For individual variables"
msgstr "对于单个变量"

msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe` "
"filter:"
msgstr "要禁用单个变量的自动转义，请使用:tfilter:`safe` filter:"

msgid ""
"Think of *safe* as shorthand for *safe from further escaping* or *can be "
"safely interpreted as HTML*. In this example, if ``data`` contains "
"``'<b>'``, the output will be:"
msgstr ""

msgid "For template blocks"
msgstr "对于模板块"

msgid ""
"To control auto-escaping for a template, wrap the template (or a particular "
"section of the template) in the :ttag:`autoescape` tag, like so:"
msgstr ""

msgid ""
"The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. "
"At times, you might want to force auto-escaping when it would otherwise be "
"disabled. Here is an example template:"
msgstr ""

msgid ""
"The auto-escaping tag passes its effect onto templates that extend the "
"current one as well as templates included via the :ttag:`include` tag, just "
"like all block tags. For example:"
msgstr ""
"自动转义标签将其效果传递给扩展当前模板的模板以及通过 :ttag:`include` 标签包含"
"的模板，就像所有的块标签一样。例如："

msgid "``base.html``"
msgstr "``base.html``"

msgid "``child.html``"
msgstr "``child.html``"

msgid ""
"Because auto-escaping is turned off in the base template, it will also be "
"turned off in the child template, resulting in the following rendered HTML "
"when the ``greeting`` variable contains the string ``<b>Hello!</b>``:"
msgstr ""

msgid ""
"Generally, template authors don't need to worry about auto-escaping very "
"much. Developers on the Python side (people writing views and custom "
"filters) need to think about the cases in which data shouldn't be escaped, "
"and mark data appropriately, so things Just Work in the template."
msgstr ""
"一般来说，模板作者不需要很担心自动转义的问题。Python 方面的开发人员（编写视图"
"和自定义过滤器的人）需要考虑在哪些情况下数据不应该被转义，并适当地标记数据，"
"所以事情在模板中 Just Work。"

msgid ""
"If you're creating a template that might be used in situations where you're "
"not sure whether auto-escaping is enabled, then add an :tfilter:`escape` "
"filter to any variable that needs escaping. When auto-escaping is on, "
"there's no danger of the :tfilter:`escape` filter *double-escaping* data -- "
"the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""
"如果你创建的模板可能会在你不确定是否启用自动转义的情况下使用，那么在任何需要"
"转义的变量中添加一个 :tfilter:`escape` 过滤器。当自动转义开启时，不会出现 :"
"tfilter:`escape` 过滤器 *双重转义* 数据的危险 —— :tfilter:`escape` 过滤器不会"
"影响自动转义的变量。"

msgid "String literals and automatic escaping"
msgstr "字符串和自动转义"

msgid "As we mentioned earlier, filter arguments can be strings:"
msgstr ""

msgid ""
"All string literals are inserted **without** any automatic escaping into the "
"template -- they act as if they were all passed through the :tfilter:`safe` "
"filter. The reasoning behind this is that the template author is in control "
"of what goes into the string literal, so they can make sure the text is "
"correctly escaped when the template is written."
msgstr ""
"所有的字符串文字都是在 **没有** 任何自动转义的情况下插入到模板中的——就好像它"
"们都通过了 :tfilter:`safe` 过滤器一样。这背后的原因是，模板作者可以控制字符串"
"文字的内容，因此他们可以确保在编写模板时正确地转义文本。"

msgid "This means you would write :"
msgstr ""

msgid "...rather than:"
msgstr ""

msgid ""
"This doesn't affect what happens to data coming from the variable itself. "
"The variable's contents are still automatically escaped, if necessary, "
"because they're beyond the control of the template author."
msgstr ""
"这并不影响来自变量本身的数据的处理。如果有必要，变量的内容仍然会被自动转义，"
"因为它们超出了模板作者的控制范围。"

msgid "Accessing method calls"
msgstr "访问方法调用"

msgid ""
"Most method calls attached to objects are also available from within "
"templates. This means that templates have access to much more than just "
"class attributes (like field names) and variables passed in from views. For "
"example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-"
"related>` syntax for finding a collection of objects related on a foreign "
"key. Therefore, given a model called \"comment\" with a foreign key "
"relationship to a model called \"task\" you can loop through all comments "
"attached to a given task like this:"
msgstr ""

msgid ""
"Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` "
"method to count the number of objects they contain. Therefore, you can "
"obtain a count of all comments related to the current task with:"
msgstr ""

msgid ""
"You can also access methods you've explicitly defined on your own models:"
msgstr "你也可以访问你在自己的模型上明确定义的方法："

msgid "``models.py``"
msgstr "``models.py``"

msgid "``template.html``"
msgstr "``template.html``"

msgid ""
"Because Django intentionally limits the amount of logic processing available "
"in the template language, it is not possible to pass arguments to method "
"calls accessed from within templates. Data should be calculated in views, "
"then passed to templates for display."
msgstr ""
"由于 Django 有意限制了模板语言中可用的逻辑处理量，所以不可能将参数传递给从模"
"板内访问的方法调用。数据应该在视图中计算，然后传递给模板显示。"

msgid "Custom tag and filter libraries"
msgstr "自定义标签和过滤器库"

msgid ""
"Certain applications provide custom tag and filter libraries. To access them "
"in a template, ensure the application is in :setting:`INSTALLED_APPS` (we'd "
"add ``'django.contrib.humanize'`` for this example), and then use the :ttag:"
"`load` tag in a template:"
msgstr ""

msgid ""
"In the above, the :ttag:`load` tag loads the ``humanize`` tag library, which "
"then makes the ``intcomma`` filter available for use. If you've enabled :mod:"
"`django.contrib.admindocs`, you can consult the documentation area in your "
"admin to find the list of custom libraries in your installation."
msgstr ""
"在上面的例子中， :ttag:`load` 标签加载了 ``humanize`` 标签库，然后使 "
"``intcomma`` 过滤器可以使用。如果你已经启用了 :mod:`django.contrib."
"admindocs`，你可以在你的管理中的文档区查找安装中的自定义库列表。"

msgid ""
"The :ttag:`load` tag can take multiple library names, separated by spaces. "
"Example:"
msgstr ""

msgid ""
"See :doc:`/howto/custom-template-tags` for information on writing your own "
"custom template libraries."
msgstr "参见 :doc:`/howto/custom-template-tags` 了解如何编写自己的模板库。"

msgid "Custom libraries and template inheritance"
msgstr "自定义库和模板继承"

msgid ""
"When you load a custom tag or filter library, the tags/filters are only made "
"available to the current template -- not any parent or child templates along "
"the template-inheritance path."
msgstr ""
"当你加载自定义标签或过滤器库时，标签／过滤器仅对当前模板可用，而不是沿模板继"
"承路径的任何父模板或子模板。"

msgid ""
"For example, if a template ``foo.html`` has ``{% load humanize %}``, a child "
"template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* have "
"access to the humanize template tags and filters. The child template is "
"responsible for its own ``{% load humanize %}``."
msgstr ""
"例如，如果模板 ``foo.html`` 有 ``{% load humanize %}``，那么子模板（例如，有 "
"``{% extends \"foo.html\" %}`` 的子模板）将 *不能* 访问人性化模板标签和过滤"
"器。子模板负责自己的 ``{% load humanize %}``。"

msgid "This is a feature for the sake of maintainability and sanity."
msgstr "这是因为这能使模板更健全且更好维护。"

msgid ":doc:`The Templates Reference </ref/templates/index>`"
msgstr ":doc:`模板参考 </ref/templates/index>`"

msgid ""
"Covers built-in tags, built-in filters, using an alternative template "
"language, and more."
msgstr "包括内置标签、内置过滤器、使用替代模板语言等。"

msgid "Unicode data"
msgstr "Unicode 数据"

msgid "Django supports Unicode data everywhere."
msgstr "Django 处处支持 Unicode 数据。"

msgid ""
"This document tells you what you need to know if you're writing applications "
"that use data or templates that are encoded in something other than ASCII."
msgstr ""
"本文档告诉你，如果你要编写使用 ASCII 以外编码的数据或模板的应用程序，你需要知"
"道什么。"

msgid "Creating the database"
msgstr "创建数据库"

msgid ""
"Make sure your database is configured to be able to store arbitrary string "
"data. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you "
"use a more restrictive encoding -- for example, latin1 (iso8859-1) -- you "
"won't be able to store certain characters in the database, and information "
"will be lost."
msgstr ""
"确保你的数据库被配置成能够存储任意字符串数据。通常，这意味着给它一个 UTF-8 "
"或 UTF-16 的编码。如果你使用更严格的编码——例如，latin1（iso8859-1）——你将无法"
"在数据库中存储某些字符，信息将丢失。"

msgid ""
"MySQL users, refer to the `MySQL manual`_ for details on how to set or alter "
"the database character set encoding."
msgstr ""
"MySQL 用户，请参考 `MySQL 手册`_ ，了解如何设置或更改数据库字符集编码。"

msgid ""
"PostgreSQL users, refer to the `PostgreSQL manual`_ for details on creating "
"databases with the correct encoding."
msgstr ""
"PostgreSQL 用户参见 `PostgreSQL manual`_，了解以正确编码创建数据库的细节。"

msgid ""
"Oracle users, refer to the `Oracle manual`_ for details on how to set "
"(`section 2`_) or alter (`section 11`_) the database character set encoding."
msgstr ""
"关于如何设置（`第 2 节`_ ）或改变（`第 11 节`_ ）数据库字符集编码，请参考 "
"`Oracle 手册`_ 。"

msgid ""
"SQLite users, there is nothing you need to do. SQLite always uses UTF-8 for "
"internal encoding."
msgstr "SQLite 用户，你不需要做什么。SQLite 一直使用 UTF-8 作为内部编码。"

msgid ""
"All of Django's database backends automatically convert strings into the "
"appropriate encoding for talking to the database. They also automatically "
"convert strings retrieved from the database into strings. You don't even "
"need to tell Django what encoding your database uses: that is handled "
"transparently."
msgstr ""
"所有 Django 的数据库后端都会自动将字符串转换为合适的编码来与数据库对话。它们"
"也会自动将从数据库中获取的字符串转换为字符串。你甚至不需要告诉 Django 你的数"
"据库使用什么编码：这都是透明的处理。"

msgid "For more, see the section \"The database API\" below."
msgstr "更多内容，请看下面的“数据库 API”一节。"

msgid "General string handling"
msgstr "一般字符串处理"

msgid ""
"Whenever you use strings with Django -- e.g., in database lookups, template "
"rendering or anywhere else -- you have two choices for encoding those "
"strings. You can use normal strings or bytestrings (starting with a 'b')."
msgstr ""
"当你在 Django 中使用字符串时——例如，在数据库查询、模板渲染或其他任何地方——你"
"有两种选择来编码这些字符串。你可以使用普通字符串或字节字符串（以 'b' 开头）。"

msgid ""
"A bytestring does not carry any information with it about its encoding. For "
"that reason, we have to make an assumption, and Django assumes that all "
"bytestrings are in UTF-8."
msgstr ""
"一个字节字符串并没有携带任何关于其编码的信息。为此，我们必须做一个假设，"
"Django 假设所有的字节字符串都是 UTF-8 编码。"

msgid ""
"If you pass a string to Django that has been encoded in some other format, "
"things will go wrong in interesting ways. Usually, Django will raise a "
"``UnicodeDecodeError`` at some point."
msgstr ""
"如果你传递给 Django 的字符串是用其他格式编码的，那么事情会以有趣的方式出错。"
"通常情况下，Django 会在某些时候引发一个 ``UnicodeDecodeError``。"

msgid ""
"If your code only uses ASCII data, it's safe to use your normal strings, "
"passing them around at will, because ASCII is a subset of UTF-8."
msgstr ""
"如果你的代码只使用 ASCII 数据，那么使用普通的字符串是安全的，可以随意传递它"
"们，因为 ASCII 是 UTF-8 的一个子集。"

msgid ""
"Don't be fooled into thinking that if your :setting:`DEFAULT_CHARSET` "
"setting is set to something other than ``'utf-8'`` you can use that other "
"encoding in your bytestrings! :setting:`DEFAULT_CHARSET` only applies to the "
"strings generated as the result of template rendering (and email). Django "
"will always assume UTF-8 encoding for internal bytestrings. The reason for "
"this is that the :setting:`DEFAULT_CHARSET` setting is not actually under "
"your control (if you are the application developer). It's under the control "
"of the person installing and using your application -- and if that person "
"chooses a different setting, your code must still continue to work. Ergo, it "
"cannot rely on that setting."
msgstr ""
"不要傻傻的认为如果你将 :setting:`DEFAULT_CHARSET` 设置为 ``'utf-8'`` 以外的其"
"他编码，你就可以在你的字节字符串中使用其他编码。:setting:`DEFAULT_CHARSET` 只"
"适用于模板渲染后生成的字符串（和电子邮件）。Django 对内部的字节字符串总是采"
"用 UTF-8 编码。原因是 :setting:`DEFAULT_CHARSET` 的配置实际上并不在你的控制之"
"下（如果你是应用开发者的话）。它是在安装和使用你的应用程序的人的控制之下——如"
"果这个人选择了不同的配置，你的代码仍然必须继续工作。因此，它不能依赖该配置。"

msgid ""
"In most cases when Django is dealing with strings, it will convert them to "
"strings before doing anything else. So, as a general rule, if you pass in a "
"bytestring, be prepared to receive a string back in the result."
msgstr ""
"在大多数情况下，当 Django 处理字符串时，它会在做其他事情之前将它们转换为字符"
"串。所以，一般来说，如果你传入一个字节字符串，要准备好在结果中收到一个字符"
"串。"

msgid "Translated strings"
msgstr "翻译后的字符串"

msgid ""
"Aside from strings and bytestrings, there's a third type of string-like "
"object you may encounter when using Django. The framework's "
"internationalization features introduce the concept of a \"lazy "
"translation\" -- a string that has been marked as translated but whose "
"actual translation result isn't determined until the object is used in a "
"string. This feature is useful in cases where the translation locale is "
"unknown until the string is used, even though the string might have "
"originally been created when the code was first imported."
msgstr ""
"除了字符串和字节字符串之外，还有第三种类型的字符串类对象，你在使用 Django 时"
"可能会遇到。框架的国际化特性引入了“惰性翻译”的概念——一个已经被标记为翻译的字"
"符串，但其实际的翻译结果直到该对象被用于字符串时才被确定。这个功能在以下情况"
"下非常有用：在使用字符串之前，翻译的 locale 是未知的，即使该字符串可能是在第"
"一次导入代码时创建的。"

msgid ""
"Normally, you won't have to worry about lazy translations. Just be aware "
"that if you examine an object and it claims to be a ``django.utils."
"functional.__proxy__`` object, it is a lazy translation. Calling ``str()`` "
"with the lazy translation as the argument will generate a string in the "
"current locale."
msgstr ""
"通常情况下，你不必担心惰性翻译的问题。只是要注意，如果你检查一个对象，并且它"
"声称是 ``django.utils.functional.__proxy__`` 对象，它就是一个惰性翻译。调用 "
"``str()`` 作为参数调用 ``str()`` 将生成一个当前语言环境下的字符串。"

msgid ""
"For more details about lazy translation objects, refer to the :doc:"
"`internationalization </topics/i18n/index>` documentation."
msgstr ""
"关于惰性翻译对象的更多细节，请参考 :doc:`国际化 </topics/i18n/index>` 文档。"

msgid "Useful utility functions"
msgstr "有用的实用工具函数"

msgid ""
"Because some string operations come up again and again, Django ships with a "
"few useful functions that should make working with string and bytestring "
"objects a bit easier."
msgstr ""
"因为有些字符串操作会反复出现，所以 Django 提供了一些有用的函数，这些函数可以"
"使处理字符串和字节字符串对象变得更加容易。"

msgid "Conversion functions"
msgstr "转换函数"

msgid ""
"The ``django.utils.encoding`` module contains a few functions that are handy "
"for converting back and forth between strings and bytestrings."
msgstr ""
"``django.utils.encoding`` 模块包含了一些函数，这些函数可以方便地在字符串和字"
"节字符串之间来回转换。"

msgid ""
"``smart_str(s, encoding='utf-8', strings_only=False, errors='strict')`` "
"converts its input to a string. The ``encoding`` parameter specifies the "
"input encoding. (For example, Django uses this internally when processing "
"form input data, which might not be UTF-8 encoded.) The ``strings_only`` "
"parameter, if set to True, will result in Python numbers, booleans and "
"``None`` not being converted to a string (they keep their original types). "
"The ``errors`` parameter takes any of the values that are accepted by "
"Python's ``str()`` function for its error handling."
msgstr ""
"``smart_str(s, encoding='utf-8', strings_only=False, errors='strict')`` 将输"
"入转换为字符串。``encoding`` 参数指定了输入的编码。（例如，Django 内部在处理"
"表单输入数据时使用了这个参数，这些数据可能不是 UTF-8 编码的。） "
"``strings_only`` 参数，如果设置为 True，将导致 Python 数字、布尔值和 "
"``None`` 不会被转换为字符串（它们保持原来的类型）。``errors`` 参数取 Python "
"的 ``str()`` 函数接受的任何值来处理错误。"

msgid ""
"``force_str(s, encoding='utf-8', strings_only=False, errors='strict')`` is "
"identical to ``smart_str()`` in almost all cases. The difference is when the "
"first argument is a :ref:`lazy translation <lazy-translations>` instance. "
"While ``smart_str()`` preserves lazy translations, ``force_str()`` forces "
"those objects to a string (causing the translation to occur). Normally, "
"you'll want to use ``smart_str()``. However, ``force_str()`` is useful in "
"template tags and filters that absolutely *must* have a string to work with, "
"not just something that can be converted to a string."
msgstr ""
"``force_str(s, encoding='utf-8', strings_only=False, errors='strict')`` 几乎"
"在所有情况下都和 ``smart_str()`` 相同。区别在于当第一个参数是 :ref:`惰性翻译 "
"<lazy-translations>` 实例时。``smart_str()`` 保留了惰性翻译，而 "
"``force_str()`` 将这些对象强制为字符串（导致翻译执行）。通常，你会想使用 "
"``smart_str()``。然而，``force_str()`` 在模板标签和过滤器中是有用的，它们绝"
"对 *必须* 有一个字符串来工作，而不仅仅是可以转换为字符串的东西。"

msgid ""
"``smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict')`` is "
"essentially the opposite of ``smart_str()``. It forces the first argument to "
"a bytestring. The ``strings_only`` parameter has the same behavior as for "
"``smart_str()`` and ``force_str()``. This is slightly different semantics "
"from Python's builtin ``str()`` function, but the difference is needed in a "
"few places within Django's internals."
msgstr ""
"``smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict')`` 本"
"质上与 ``smart_str()`` 相反。它迫使第一个参数变成一个字节字符串。"
"``strings_only`` 参数的行为与 ``smart_str()`` 和 ``force_str()`` 相同。这与 "
"Python 内置的 ``str()`` 函数的语义略有不同，但在 Django 内部的一些地方需要区"
"分。"

msgid ""
"Normally, you'll only need to use ``force_str()``. Call it as early as "
"possible on any input data that might be either a string or a bytestring, "
"and from then on, you can treat the result as always being a string."
msgstr ""
"通常，你只需要使用 ``force_str()``。在任何可能是字符串或字节字符串的输入数据"
"上尽可能早地调用它，从那时起，你可以将结果视为始终是字符串。"

msgid "URI and IRI handling"
msgstr "URI 和 IRI 处理"

msgid ""
"Web frameworks have to deal with URLs (which are a type of IRI). One "
"requirement of URLs is that they are encoded using only ASCII characters. "
"However, in an international environment, you might need to construct a URL "
"from an :rfc:`IRI <3987>` -- very loosely speaking, a :rfc:`URI <3986>` that "
"can contain Unicode characters. Use these functions for quoting and "
"converting an IRI to a URI:"
msgstr ""

msgid ""
"The :func:`django.utils.encoding.iri_to_uri()` function, which implements "
"the conversion from IRI to URI as required by :rfc:`3987#section-3.1`."
msgstr ""
":func:`django.utils.encoding.iri_to_uri()` 函数，它实现了 :rfc:"
"`3987#section-3.1` 所要求的从 IRI 到 URI 的转换。"

msgid ""
"The :func:`urllib.parse.quote` and :func:`urllib.parse.quote_plus` functions "
"from Python's standard library."
msgstr ""
"来自 Python 标准库的 :func:`urllib.parse.quote` 和 :func:`urllib.parse."
"quote_plus` 函数。"

msgid ""
"These two groups of functions have slightly different purposes, and it's "
"important to keep them straight. Normally, you would use ``quote()`` on the "
"individual portions of the IRI or URI path so that any reserved characters "
"such as '&' or '%' are correctly encoded. Then, you apply ``iri_to_uri()`` "
"to the full IRI and it converts any non-ASCII characters to the correct "
"encoded values."
msgstr ""
"这两组函数的目的略有不同，因此必须将它们区分开来。通常，你会在 IRI 或 URI 路"
"径的个别部分使用 ``quote()``，这样任何保留的字符如“&”或“%”都会被正确编码。然"
"后，你将 ``iri_to_uri()`` 应用于整个 IRI，它将任何非 ASCII 字符转换为正确的编"
"码值。"

msgid ""
"Technically, it isn't correct to say that ``iri_to_uri()`` implements the "
"full algorithm in the IRI specification. It doesn't (yet) perform the "
"international domain name encoding portion of the algorithm."
msgstr ""
"从技术上讲，说 ``iri_to_uri()`` 实现了 IRI 规范中的全部算法是不正确的。它并不"
"（尚未）执行算法的国际域名编码部分。"

msgid ""
"The ``iri_to_uri()`` function will not change ASCII characters that are "
"otherwise permitted in a URL. So, for example, the character '%' is not "
"further encoded when passed to ``iri_to_uri()``. This means you can pass a "
"full URL to this function and it will not mess up the query string or "
"anything like that."
msgstr ""
"``iri_to_uri()`` 函数不会改变 URL 中允许的 ASCII 字符。因此，例如，当传递给 "
"``iri_to_uri()`` 时，字符“%”不会被进一步编码。这意味着你可以将一个完整的 URL "
"传递给这个函数，它不会弄乱查询字符串或类似的东西。"

msgid "An example might clarify things here:"
msgstr ""

msgid ""
"If you look carefully, you can see that the portion that was generated by "
"``quote()`` in the second example was not double-quoted when passed to "
"``iri_to_uri()``. This is a very important and useful feature. It means that "
"you can construct your IRI without worrying about whether it contains non-"
"ASCII characters and then, right at the end, call ``iri_to_uri()`` on the "
"result."
msgstr ""
"如果你仔细观察，你可以看到第二个例子中由 ``quote()`` 生成的部分在传递给 "
"``iri_to_uri()`` 时没有被双引号。这是一个非常重要和有用的功能。这意味着你可以"
"构建你的 IRI，而不用担心它是否包含非 ASCII 字符，然后在最后调用 "
"``iri_to_uri()`` 对结果进行处理。"

msgid ""
"Similarly, Django provides :func:`django.utils.encoding.uri_to_iri()` which "
"implements the conversion from URI to IRI as per :rfc:`3987#section-3.2`."
msgstr ""
"类似的，Django 提供了 :func:`django.utils.encoding.uri_to_iri()`，它按照 :"
"rfc:`3987#section-3.2` 实现了从 URI 到 IRI 的转换。"

msgid "An example to demonstrate:"
msgstr ""

msgid ""
"In the first example, the UTF-8 characters are unquoted. In the second, the "
"percent-encodings remain unchanged because they lie outside the valid UTF-8 "
"range or represent a reserved character."
msgstr ""
"在第一个例子中，UTF-8 字符没有被引用。在第二个例子中，百分比编码保持不变，因"
"为它们位于有效的 UTF-8 范围之外或代表一个保留字符。"

msgid ""
"Both ``iri_to_uri()`` and ``uri_to_iri()`` functions are idempotent, which "
"means the following is always true::"
msgstr ""
"``iri_to_uri()`` 和 ``uri_to_iri()`` 函数都是幂等的，这意味着以下内容始终为"
"真："

msgid ""
"So you can safely call it multiple times on the same URI/IRI without risking "
"double-quoting problems."
msgstr ""
"所以你可以安全地在同一个 URI／IRI 上多次调用它，而不会有重复引用问题的风险。"

msgid ""
"Because all strings are returned from the database as ``str`` objects, model "
"fields that are character based (CharField, TextField, URLField, etc.) will "
"contain Unicode values when Django retrieves data from the database. This is "
"*always* the case, even if the data could fit into an ASCII bytestring."
msgstr ""
"因为所有的字符串都是以 ``str`` 对象的形式从数据库中返回的，所以当 Django 从数"
"据库中检索数据时，基于字符的模型字段（CharField、TextField、URLField 等）将包"
"含 Unicode 值。这 *总是* 这样的情况，即使数据可以放入 ASCII 字节字符串中。"

msgid ""
"You can pass in bytestrings when creating a model or populating a field, and "
"Django will convert it to strings when it needs to."
msgstr ""
"你可以在创建模型或填充字段时传入字节字符串，Django 会在需要时将其转换为字符"
"串。"

msgid "Taking care in ``get_absolute_url()``"
msgstr "在 ``get_absolute_url()`` 中注意"

msgid ""
"URLs can only contain ASCII characters. If you're constructing a URL from "
"pieces of data that might be non-ASCII, be careful to encode the results in "
"a way that is suitable for a URL. The :func:`~django.urls.reverse` function "
"handles this for you automatically."
msgstr ""
"URL 只能包含 ASCII 字符。如果你从可能是非 ASCII 码的数据中构建一个 URL，要注"
"意将结果编码成适合 URL 的方式。:func:`~django.urls.reverse` 函数会自动为你处"
"理这个问题。"

msgid ""
"If you're constructing a URL manually (i.e., *not* using the ``reverse()`` "
"function), you'll need to take care of the encoding yourself. In this case, "
"use the ``iri_to_uri()`` and ``quote()`` functions that were documented "
"above_. For example::"
msgstr ""
"如果你是手动构建一个 URL（即 *不* 使用 ``reverse()`` 函数)，你就需要自己进行"
"编码。在这种情况下，请使用 上面_ 记载的 ``iri_to_uri()`` 和 ``quote()`` 函"
"数。例如："

msgid ""
"This function returns a correctly encoded URL even if ``self.location`` is "
"something like \"Jack visited Paris & Orléans\". (In fact, the "
"``iri_to_uri()`` call isn't strictly necessary in the above example, because "
"all the non-ASCII characters would have been removed in quoting in the first "
"line.)"
msgstr ""
"即使 ``self.location`` 是类似于“Jack visited Paris & Orléans”，这个函数也会返"
"回一个正确编码的 URL。（事实上，在上面的例子中，``iri_to_uri()`` 的调用并不是"
"绝对必要的，因为所有非 ASCII 字符都会在第一行的引号中被删除。）"

msgid "Use strings when creating templates manually::"
msgstr "手动创建模板时使用字符串："

msgid ""
"But the common case is to read templates from the filesystem. If your "
"template files are not stored with a UTF-8 encoding, adjust the :setting:"
"`TEMPLATES` setting. The built-in :py:mod:`~django.template.backends.django` "
"backend provides the ``'file_charset'`` option to change the encoding used "
"to read files from disk."
msgstr ""
"但常见的情况是从文件系统中读取模板。如果你的模板文件没有采用 UTF-8 编码存储，"
"请调整 :setting:`TEMPLATES` 配置。内置的 :py:mod:`~django.template.backends."
"django` 后端提供了 ``'file_charset'`` 选项，可以改变从磁盘读取文件时使用的编"
"码。"

msgid ""
"The :setting:`DEFAULT_CHARSET` setting controls the encoding of rendered "
"templates. This is set to UTF-8 by default."
msgstr ""
":setting:`DEFAULT_CHARSET` 配置控制了渲染模板的编码。默认配置为 UTF-8。"

msgid "Template tags and filters"
msgstr "模板标签和过滤器"

msgid ""
"A couple of tips to remember when writing your own template tags and filters:"
msgstr "在编写自己的模板标签和过滤器时，要记住几个小技巧："

msgid ""
"Always return strings from a template tag's ``render()`` method and from "
"template filters."
msgstr "总是从模板标签的 ``render()`` 方法和模板过滤器中返回字符串："

msgid ""
"Use ``force_str()`` in preference to ``smart_str()`` in these places. Tag "
"rendering and filter calls occur as the template is being rendered, so there "
"is no advantage to postponing the conversion of lazy translation objects "
"into strings. It's easier to work solely with strings at that point."
msgstr ""
"在这些地方使用 ``force_str()``，而不是 ``smart_str()``。标签渲染和过滤器调用"
"是在模板渲染时发生的，所以推迟将懒惰翻译对象转换为字符串没有好处。这时只用字"
"符串工作更容易。"

msgid "Files"
msgstr "文件"

msgid ""
"If you intend to allow users to upload files, you must ensure that the "
"environment used to run Django is configured to work with non-ASCII file "
"names. If your environment isn't configured correctly, you'll encounter "
"``UnicodeEncodeError`` exceptions when saving files with file names or "
"content that contains non-ASCII characters."
msgstr ""

msgid ""
"Filesystem support for UTF-8 file names varies and might depend on the "
"environment. Check your current configuration in an interactive Python shell "
"by running::"
msgstr ""
"文件系统对 UTF-8 文件名的支持有所不同，可能取决于环境。在交互式 Python shell "
"中运行检查你当前的配置："

msgid "This should output \"UTF-8\"."
msgstr "这应该输出“UTF-8”。"

msgid ""
"The ``LANG`` environment variable is responsible for setting the expected "
"encoding on Unix platforms. Consult the documentation for your operating "
"system and application server for the appropriate syntax and location to set "
"this variable. See the :doc:`/howto/deployment/wsgi/modwsgi` for examples."
msgstr ""

msgid ""
"In your development environment, you might need to add a setting to your ``~."
"bashrc`` analogous to:"
msgstr ""

msgid "Form submission"
msgstr "表单提交"

msgid ""
"HTML form submission is a tricky area. There's no guarantee that the "
"submission will include encoding information, which means the framework "
"might have to guess at the encoding of submitted data."
msgstr ""
"HTML 表单提交是一个棘手的领域。无法保证提交的数据会包含编码信息，这意味着框架"
"可能不得不猜测提交数据的编码。"

msgid ""
"Django adopts a \"lazy\" approach to decoding form data. The data in an "
"``HttpRequest`` object is only decoded when you access it. In fact, most of "
"the data is not decoded at all. Only the ``HttpRequest.GET`` and "
"``HttpRequest.POST`` data structures have any decoding applied to them. "
"Those two fields will return their members as Unicode data. All other "
"attributes and methods of ``HttpRequest`` return data exactly as it was "
"submitted by the client."
msgstr ""
"Django 采用了一种“惰性”的方式来解码表单数据。``HttpRequest`` 对象中的数据只有"
"在你访问它时才会被解码。事实上，大部分数据根本没有被解码。只有 ``HttpRequest."
"GET`` 和 ``HttpRequest.POST`` 数据结构有任何解码应用。这两个字段将作为 "
"Unicode 数据返回其成员。``HttpRequest`` 的所有其他属性和方法将完全按照客户端"
"提交的数据返回。"

msgid ""
"By default, the :setting:`DEFAULT_CHARSET` setting is used as the assumed "
"encoding for form data. If you need to change this for a particular form, "
"you can set the ``encoding`` attribute on an ``HttpRequest`` instance. For "
"example::"
msgstr ""
"默认情况下，:setting:`DEFAULT_CHARSET` 配置被用作表单数据的假定编码。如果你需"
"要为一个特定的表单改变这个配置，你可以在一个 ``HttpRequest`` 实例上设置 "
"``encoding`` 属性。例如："

msgid ""
"You can even change the encoding after having accessed ``request.GET`` or "
"``request.POST``, and all subsequent accesses will use the new encoding."
msgstr ""
"你甚至可以在访问了 ``request.GET`` 或 ``request.POST`` 之后改变编码，所有后续"
"的访问都将使用新的编码。"

msgid ""
"Most developers won't need to worry about changing form encoding, but this "
"is a useful feature for applications that talk to legacy systems whose "
"encoding you cannot control."
msgstr ""
"大多数开发人员不需要担心更改表单编码，但对于那些与编码无法控制的传统系统对话"
"的应用程序来说，这是一个有用的功能。"

msgid ""
"Django does not decode the data of file uploads, because that data is "
"normally treated as collections of bytes, rather than strings. Any automatic "
"decoding there would alter the meaning of the stream of bytes."
msgstr ""
"Django 不会对文件上传的数据进行解码，因为这些数据通常被视为字节的集合，而不是"
"字符串。任何自动解码都会改变字节流的含义。"

msgid "``django.urls`` utility functions"
msgstr "``django.urls`` 实用函数"

msgid ""
"If you need to use something similar to the :ttag:`url` template tag in your "
"code, Django provides the following function:"
msgstr ""
"如果你需要在你的代码中使用类似于 :ttag:`url` 模板标签的东西，Django 提供了以"
"下函数："

msgid ""
"``viewname`` can be a :ref:`URL pattern name <naming-url-patterns>` or the "
"callable view object. For example, given the following ``url``::"
msgstr ""
"``viewname`` 可以是一个 :ref:`URL 模式名称 <naming-url-patterns>` 或者是可调"
"用的视图对象。例如，给定以下 ``url``："

msgid "you can use any of the following to reverse the URL::"
msgstr "你可以使用以下任何一种方式来反查 URL："

msgid ""
"If the URL accepts arguments, you may pass them in ``args``. For example::"
msgstr "如果 URL 接受参数，你可以在 ``args`` 中传递参数。例如："

msgid "You can also pass ``kwargs`` instead of ``args``. For example:"
msgstr ""

msgid ""
"``args`` and ``kwargs`` cannot be passed to ``reverse()`` at the same time."
msgstr "``args`` 和 ``kwargs`` 不能同时传递给 ``reverse()``。"

msgid ""
"If no match can be made, ``reverse()`` raises a :class:`~django.urls."
"NoReverseMatch` exception."
msgstr ""
"如果不能匹配，``reverse()`` 会引发一个 :class:`~django.urls.NoReverseMatch` "
"异常。"

msgid ""
"The ``reverse()`` function can reverse a large variety of regular expression "
"patterns for URLs, but not every possible one. The main restriction at the "
"moment is that the pattern cannot contain alternative choices using the "
"vertical bar (``\"|\"``) character. You can quite happily use such patterns "
"for matching against incoming URLs and sending them off to views, but you "
"cannot reverse such patterns."
msgstr ""
"``reverse()`` 函数可以反查 URL 的多种正则表达式模式，但不是每一种可能的模式。"
"目前主要的限制是，模式不能包含使用竖条（``\"|\"``）字符的替代选择。你可以很高"
"兴地使用这样的模式与传入的 URL 进行匹配，并将它们发送给视图，但你不能反查这样"
"的模式。"

msgid ""
"The ``current_app`` argument allows you to provide a hint to the resolver "
"indicating the application to which the currently executing view belongs. "
"This ``current_app`` argument is used as a hint to resolve application "
"namespaces into URLs on specific application instances, according to the :"
"ref:`namespaced URL resolution strategy <topics-http-reversing-url-"
"namespaces>`."
msgstr ""
"``current_app`` 参数允许你向解析器提供一个提示，说明当前执行的视图属于哪个应"
"用程序。这个 ``current_app`` 参数被用作提示，以便根据 :ref:`命名空间的 URL 解"
"析策略 <topics-http-reversing-url-namespaces>`，将应用程序名称空间解析为特定"
"应用程序实例上的 URL。"

msgid ""
"The ``urlconf`` argument is the URLconf module containing the URL patterns "
"to use for reversing. By default, the root URLconf for the current thread is "
"used."
msgstr ""
"``urlconf`` 参数是 URLconf 模块，其中包含用于反查的 URL 模式。默认情况下，使"
"用的是当前线程的根 URLconf。"

msgid ""
"The string returned by ``reverse()`` is already :ref:`urlquoted <uri-and-iri-"
"handling>`. For example:"
msgstr ""

msgid ""
"Applying further encoding (such as :func:`urllib.parse.quote`) to the output "
"of ``reverse()`` may produce undesirable results."
msgstr ""
"对 ``reverse()`` 的输出应用进一步的编码（如 :func:`urllib.parse.quote`）可能"
"会产生不理想的结果。"

msgid "``reverse_lazy()``"
msgstr "``reverse_lazy()``"

msgid "A lazily evaluated version of `reverse()`_."
msgstr "`reverse()`_ 的惰性执行版本。"

msgid ""
"It is useful for when you need to use a URL reversal before your project's "
"URLConf is loaded. Some common cases where this function is necessary are:"
msgstr ""
"当你需要在你的项目的 URLConf 被加载之前使用 URL 反查时，这个功能很有用。一些"
"常见的需要使用该功能的情况是："

msgid ""
"providing a reversed URL as the ``url`` attribute of a generic class-based "
"view."
msgstr "提供一个反查的 URL 作为基于类的通用视图的 ``url`` 属性。"

msgid ""
"providing a reversed URL to a decorator (such as the ``login_url`` argument "
"for the :func:`django.contrib.auth.decorators.permission_required` "
"decorator)."
msgstr ""
"为装饰器提供一个反查的 URL（例如 :func:`django.contrib.auth.decorators."
"permission_required` 装饰器的 ``login_url`` 参数）。"

msgid ""
"providing a reversed URL as a default value for a parameter in a function's "
"signature."
msgstr "提供一个反查的 URL 作为函数签名中参数的默认值。"

msgid "``resolve()``"
msgstr "``resolve()``"

msgid ""
"The ``resolve()`` function can be used for resolving URL paths to the "
"corresponding view functions. It has the following signature:"
msgstr ""
"``resolve()`` 函数可用于解析到相应视图函数的 URL 路径。该函数的签名如下："

msgid ""
"``path`` is the URL path you want to resolve. As with :func:`~django.urls."
"reverse`, you don't need to worry about the ``urlconf`` parameter. The "
"function returns a :class:`ResolverMatch` object that allows you to access "
"various metadata about the resolved URL."
msgstr ""
"``path`` 是你要解析的 URL 路径。与 :func:`~django.urls.reverse` 一样，你不需"
"要担心 ``urlconf`` 参数。该函数返回一个 :class:`ResolverMatch` 对象，允许你访"
"问关于解析 URL 的各种元数据。"

msgid ""
"If the URL does not resolve, the function raises a :exc:`~django.urls."
"Resolver404` exception (a subclass of :class:`~django.http.Http404`) ."
msgstr ""
"如果 URL 没有解析，函数会引发一个 :exc:`~django.urls.Resolver404` 异常（:"
"class:`~django.http.Http404` 的一个子类）。"

msgid "The view function that would be used to serve the URL"
msgstr "用于服务 URL 的视图函数。"

msgid ""
"The arguments that would be passed to the view function, as parsed from the "
"URL."
msgstr "从 URL 中解析出的传递给视图函数的参数。"

msgid ""
"All keyword arguments that would be passed to the view function, i.e. :attr:"
"`~ResolverMatch.captured_kwargs` and :attr:`~ResolverMatch.extra_kwargs`."
msgstr ""

msgid ""
"The captured keyword arguments that would be passed to the view function, as "
"parsed from the URL."
msgstr ""

msgid ""
"The additional keyword arguments that would be passed to the view function."
msgstr ""

msgid "The name of the URL pattern that matches the URL."
msgstr "与 URL 匹配的 URL 模式的名称。"

msgid "The route of the matching URL pattern."
msgstr "匹配 URL 模式的路径。"

msgid ""
"For example, if ``path('users/<id>/', ...)`` is the matching pattern, "
"``route`` will contain ``'users/<id>/'``."
msgstr ""
"例如，如果 ``path('users/<id>/', ...)``是匹配的模式，``route`` 将包含 "
"``'users/<id>/'``。"

msgid ""
"The list of URL patterns tried before the URL either matched one or "
"exhausted available patterns."
msgstr ""

msgid "The application namespace for the URL pattern that matches the URL."
msgstr "匹配 URL 模式的应用程序命名空间。"

msgid ""
"The list of individual namespace components in the full application "
"namespace for the URL pattern that matches the URL. For example, if the "
"``app_name`` is ``'foo:bar'``, then ``app_names`` will be ``['foo', 'bar']``."
msgstr ""
"匹配 URL 模式的完整应用程序命名空间中的单个命名空间组件列表。例如，如果 "
"``app_name`` 是 ``'foo:bar'``，那么 ``app_names`` 将是 ``['foo', 'bar']``。"

msgid "The instance namespace for the URL pattern that matches the URL."
msgstr "匹配 URL 模式的实例命名空间。"

msgid ""
"The list of individual namespace components in the full instance namespace "
"for the URL pattern that matches the URL. i.e., if the namespace is ``foo:"
"bar``, then namespaces will be ``['foo', 'bar']``."
msgstr ""
"匹配 URL 模式的完整实例命名空间中的单个命名空间组件列表，即，如果命名空间是 "
"``foo:bar``，那么命名空间将是 ``['foo'，'bar']``。"

msgid ""
"The name of the view that matches the URL, including the namespace if there "
"is one."
msgstr "匹配 URL 的视图名称，包括命名空间（如果有的话）。"

msgid ""
"A :class:`ResolverMatch` object can then be interrogated to provide "
"information about the URL pattern that matches a URL::"
msgstr ""
"然后可以查询一个 :class:`ResolverMatch` 对象，以提供与 URL 相匹配的 URL 模式"
"的信息："

msgid "A :class:`ResolverMatch` object can also be assigned to a triple::"
msgstr "一个 :class:`ResolverMatch` 对象也可以解包为以下三个："

msgid ""
"One possible use of :func:`~django.urls.resolve` would be to test whether a "
"view would raise a ``Http404`` error before redirecting to it::"
msgstr ""
":func:`~django.urls.resolve` 的一个可能的用法是测试一个视图在重定向到它之前是"
"否会引发 ``Http404`` 错误："

msgid "``get_script_prefix()``"
msgstr "``get_script_prefix()``"

msgid ""
"Normally, you should always use :func:`~django.urls.reverse` to define URLs "
"within your application. However, if your application constructs part of the "
"URL hierarchy itself, you may occasionally need to generate URLs. In that "
"case, you need to be able to find the base URL of the Django project within "
"its web server (normally, :func:`~django.urls.reverse` takes care of this "
"for you). In that case, you can call ``get_script_prefix()``, which will "
"return the script prefix portion of the URL for your Django project. If your "
"Django project is at the root of its web server, this is always ``\"/\"``."
msgstr ""

msgid ""
"This function **cannot** be used outside of the request-response cycle since "
"it relies on values initialized during that cycle."
msgstr ""

msgid "``django.urls`` functions for use in URLconfs"
msgstr "URLconfs 中使用的 ``django.urls`` 函数"

msgid "``path()``"
msgstr "``path()``"

msgid "Returns an element for inclusion in ``urlpatterns``. For example::"
msgstr "返回一个元素，以便包含在 ``urlpatterns`` 中。例如："

msgid ""
"The ``route`` argument should be a string or :func:`~django.utils."
"translation.gettext_lazy()` (see :ref:`translating-urlpatterns`) that "
"contains a URL pattern. The string may contain angle brackets (like "
"``<username>`` above) to capture part of the URL and send it as a keyword "
"argument to the view. The angle brackets may include a converter "
"specification (like the ``int`` part of ``<int:section>``) which limits the "
"characters matched and may also change the type of the variable passed to "
"the view. For example, ``<int:section>`` matches a string of decimal digits "
"and converts the value to an ``int``. See :ref:`how-django-processes-a-"
"request` for more details."
msgstr ""
"``route`` 参数应该是一个字符串或 :func:`~django.utils.translation."
"gettext_lazy()` （参见 :ref:`translating-urlpatterns`），它包含一个 URL 模"
"式。这个字符串可以包含角括号（就像上面的 ``<username>``）来捕获 URL 的一部"
"分，并将其作为关键字参数发送给视图。角括号可以包含一个转换器规格（像 ``<int:"
"section>`` 的 ``int`` 部分），它限制了匹配的字符，也可以改变传递给视图的变量"
"的类型。例如，``<int:section>`` 匹配一串十进制数字，并将值转换为 ``int``。更"
"多细节请参见 :ref:`how-django-processes-a-request`。"

msgid ""
"The ``view`` argument is a view function or the result of :meth:`~django."
"views.generic.base.View.as_view` for class-based views. It can also be an :"
"func:`django.urls.include`."
msgstr ""
"``view`` 参数是一个视图函数或 :meth:`~django.views.generic.base.View."
"as_view` 的结果，用于基于类的视图。它也可以是一个 :func:`django.urls."
"include`。"

msgid ""
"The ``kwargs`` argument allows you to pass additional arguments to the view "
"function or method. See :ref:`views-extra-options` for an example."
msgstr ""
"``kwargs`` 参数允许你向视图函数或方法传递附加参数。参见 :ref:`views-extra-"
"options` 的例子。"

msgid ""
"See :ref:`Naming URL patterns <naming-url-patterns>` for why the ``name`` "
"argument is useful."
msgstr ""
"关于为什么 ``name`` 参数是有用的，请参见 :ref:`命名 URL 模式 <naming-url-"
"patterns>`。"

msgid "``re_path()``"
msgstr "``re_path()``"

msgid ""
"The ``route`` argument should be a string or :func:`~django.utils."
"translation.gettext_lazy()` (see :ref:`translating-urlpatterns`) that "
"contains a regular expression compatible with Python's :py:mod:`re` module. "
"Strings typically use raw string syntax (``r''``) so that they can contain "
"sequences like ``\\d`` without the need to escape the backslash with another "
"backslash. When a match is made, captured groups from the regular expression "
"are passed to the view -- as named arguments if the groups are named, and as "
"positional arguments otherwise. The values are passed as strings, without "
"any type conversion."
msgstr ""
"``route`` 参数应该是一个字符串或 :func:`~django.utils.translation."
"gettext_lazy()` （参见 :ref:`translating-urlpatterns`），它包含一个与 Python "
"的 :py:mod:`re` 模块兼容的正则表达式。字符串通常使用原始字符串语法"
"（``r''``），因此它们可以包含像 ``/d`` 这样的序列，而不需要用另一个反斜杠来转"
"义。当进行匹配时，从正则表达式中捕获的组会被传递到视图中 —— 如果组是命名的，"
"则作为命名的参数，否则作为位置参数。值以字符串的形式传递，不进行任何类型转"
"换。"

msgid ""
"When a ``route`` ends with ``$`` the whole requested URL, matching against :"
"attr:`~django.http.HttpRequest.path_info`, must match the regular expression "
"pattern (:py:func:`re.fullmatch` is used)."
msgstr ""

msgid ""
"The ``view``, ``kwargs`` and ``name`` arguments are the same as for :func:"
"`~django.urls.path()`."
msgstr ""
"``view``、``kwargs`` 和 ``name`` 参数与 :func:`~django.urls.path()` 相同。"

msgid ""
"In older versions, a full-match wasn't required for a ``route`` which ends "
"with ``$``."
msgstr ""

msgid "``include()``"
msgstr "``include()``"

msgid ""
"A function that takes a full Python import path to another URLconf module "
"that should be \"included\" in this place. Optionally, the :term:"
"`application namespace` and :term:`instance namespace` where the entries "
"will be included into can also be specified."
msgstr ""
"一个函数，它接收一个完整的 Python 导入路径到另一个应该被 “包含” 在这里的 "
"URLconf 模块。可以选择指定 :term:`application namespace` 和 :term:`instance "
"namespace`，在这两个空间中，条目将被包含进去。"

msgid ""
"Usually, the application namespace should be specified by the included "
"module. If an application namespace is set, the ``namespace`` argument can "
"be used to set a different instance namespace."
msgstr ""
"通常，应用程序的命名空间应该由包含的模块指定。如果设置了应用程序命名空间，"
"``namespace`` 参数可以用来设置不同的实例命名空间。"

msgid ""
"``include()`` also accepts as an argument either an iterable that returns "
"URL patterns or a 2-tuple containing such iterable plus the names of the "
"application namespaces."
msgstr ""
"``include()`` 也接受一个返回 URL 模式的迭代函数或一个包含这种迭代函数加上应用"
"程序名称空间的二元元组作为参数。"

msgid "URLconf module (or module name)"
msgstr "URLconf 模块（或模块名称）"

msgid "Instance namespace for the URL entries being included"
msgstr "包含的 URL 条目的实例命名空间。"

msgid ""
"Iterable of :func:`~django.urls.path` and/or :func:`~django.urls.re_path` "
"instances."
msgstr ""
"可迭代的 :func:`~django.urls.path` 和／或 :func:`~django.urls.re_path` 实例。"

msgid "Application namespace for the URL entries being included"
msgstr "被包含的 URL 条目的应用命名空间"

msgid "See :ref:`including-other-urlconfs` and :ref:`namespaces-and-include`."
msgstr ""
"参见 :ref:`including-other-urlconfs` 和 :ref:`namespaces-and-include`。"

msgid "``register_converter()``"
msgstr "``register_converter()``"

msgid ""
"The function for registering a converter for use in :func:`~django.urls."
"path()` ``route``\\s."
msgstr "注册一个转换器的函数，用于 :func:`~django.urls.path()` 的 ``route``。"

msgid ""
"The ``converter`` argument is a converter class, and ``type_name`` is the "
"converter name to use in path patterns. See :ref:`registering-custom-path-"
"converters` for an example."
msgstr ""
"``converter`` 参数是一个转换器类，``type_name`` 是路径模式中使用的转换器名"
"称。参见 :ref:`registering-custom-path-converters` 的例子。"

msgid "``django.conf.urls`` functions for use in URLconfs"
msgstr "URLconfs 中使用的 ``django.conf.urls`` 函数"

msgid "``static()``"
msgstr "``static()``"

msgid ""
"Helper function to return a URL pattern for serving files in debug mode::"
msgstr "用于返回在调试模式下服务文件的 URL 模式的辅助函数："

msgid "``handler400``"
msgstr "``handler400``"

msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if the HTTP client has sent a request that caused an "
"error condition and a response with a status code of 400."
msgstr ""
"一个可调用对象，或者一个代表视图的完整 Python 导入路径的字符串，如果 HTTP 客"
"户端发送了一个引起错误条件的请求，并且响应的状态码为 400，那么就会调用该视"
"图。"

msgid ""
"By default, this is :func:`django.views.defaults.bad_request`. If you "
"implement a custom view, be sure it accepts ``request`` and ``exception`` "
"arguments and returns an :class:`~django.http.HttpResponseBadRequest`."
msgstr ""
"默认情况下，这是 :func:`django.views.defaults.bad_request`。如果你实现了自定"
"义视图，请确保它接受 ``request`` 和 ``exception`` 参数，并返回一个 :class:"
"`~django.http.HttpResponseBadRequest`。"

msgid "``handler403``"
msgstr "``handler403``"

msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if the user doesn't have the permissions required to "
"access a resource."
msgstr ""
"一个可调用对象，或者一个代表视图的完整 Python 导入路径的字符串，如果用户没有"
"访问资源所需的权限，那么就会调用该视图。"

msgid ""
"By default, this is :func:`django.views.defaults.permission_denied`. If you "
"implement a custom view, be sure it accepts ``request`` and ``exception`` "
"arguments and returns an :class:`~django.http.HttpResponseForbidden`."
msgstr ""
"默认情况下，这是 :func:`django.views.defaults.permission_denied`。如果你实现"
"了一个自定义视图，请确保它接受 ``request`` 和 ``exception`` 参数，并返回一"
"个 :class:`~django.http.HttpResponseForbidden`。"

msgid "``handler404``"
msgstr "``handler404``"

msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if none of the URL patterns match."
msgstr ""
"一个可调用对象，或者一个代表视图的完整 Python 导入路径的字符串，如果没有任何 "
"URL 模式匹配，那么就会调用该视图。"

msgid ""
"By default, this is :func:`django.views.defaults.page_not_found`. If you "
"implement a custom view, be sure it accepts ``request`` and ``exception`` "
"arguments and returns an :class:`~django.http.HttpResponseNotFound`."
msgstr ""
"默认情况下，这是 :func:`django.views.defaults.page_not_found`。如果你实现了自"
"定义视图，请确保它接受 ``request`` 和 ``exception`` 参数，并返回一个 :class:"
"`~django.http.HttpResponseNotFound`。"

msgid "``handler500``"
msgstr "``handler500``"

msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called in case of server errors. Server errors happen when "
"you have runtime errors in view code."
msgstr ""
"一个可调用对象，或者一个代表视图的完整 Python 导入路径的字符串，在服务器出错"
"时会被调用。当你在视图代码中出现运行时错误时，就会发生服务器错误。"

msgid ""
"By default, this is :func:`django.views.defaults.server_error`. If you "
"implement a custom view, be sure it accepts a ``request`` argument and "
"returns an :class:`~django.http.HttpResponseServerError`."
msgstr ""
"默认情况下，这是 :func:`django.views.defaults.server_error`。如果你实现了自定"
"义视图，请确保它接受一个 ``request`` 参数，并返回一个 :class:`~django.http."
"HttpResponseServerError`。"

msgid "Django Utils"
msgstr "Django 实用程序"

msgid ""
"This document covers all stable modules in ``django.utils``. Most of the "
"modules in ``django.utils`` are designed for internal use and only the "
"following parts can be considered stable and thus backwards compatible as "
"per the :ref:`internal release deprecation policy <internal-release-"
"deprecation-policy>`."
msgstr ""
"本文档涵盖了 ``django.utils`` 中所有稳定的模块。``django.utils`` 中的大部分模"
"块都是为内部使用而设计的，只有以下部分可以被认为是稳定的，因此根据 :ref:`内部"
"发布废弃政策 <internal-release-deprecation-policy>` 的规定，这些模块可以向后"
"兼容。"

msgid "``django.utils.cache``"
msgstr "``django.utils.cache``"

msgid ""
"This module contains helper functions for controlling HTTP caching. It does "
"so by managing the ``Vary`` header of responses. It includes functions to "
"patch the header of response objects directly and decorators that change "
"functions to do that header-patching themselves."
msgstr ""
"这个模块包含了控制 HTTP 缓存的辅助函数。它通过管理响应的 ``Vary`` 头来实现。"
"它包括直接对响应对象的头进行修补的函数，以及改变函数使其自己进行头修补的装饰"
"器。"

msgid "For information on the ``Vary`` header, see :rfc:`9110#section-12.5.5`."
msgstr ""

msgid ""
"Essentially, the ``Vary`` HTTP header defines which headers a cache should "
"take into account when building its cache key. Requests with the same path "
"but different header content for headers named in ``Vary`` need to get "
"different cache keys to prevent delivery of wrong content."
msgstr ""
"本质上，``Vary`` HTTP 头定义了缓存在建立缓存密钥时应该考虑哪些头信息。如果请"
"求的路径相同，但 ``Vary`` 中命名的头内容不同，则需要获得不同的缓存密钥，以防"
"止传递错误的内容。"

msgid ""
"For example, :doc:`internationalization </topics/i18n/index>` middleware "
"would need to distinguish caches by the ``Accept-language`` header."
msgstr ""
"例如， :doc:`国际化 </topics/i18n/index>` 中间件需要通过 ``Accept-language`` "
"头来区分缓存。"

msgid ""
"This function patches the ``Cache-Control`` header by adding all keyword "
"arguments to it. The transformation is as follows:"
msgstr "这个函数通过添加所有关键字参数来修补 ``Cache-Control`` 头。变化如下："

msgid ""
"All keyword parameter names are turned to lowercase, and underscores are "
"converted to hyphens."
msgstr "所有的关键字参数名都转为小写，下划线转为连字符。"

msgid ""
"If the value of a parameter is ``True`` (exactly ``True``, not just a true "
"value), only the parameter name is added to the header."
msgstr ""
"如果一个参数的值是 ``True`` （确切地说是 ``True``，而不仅仅是一个真值），那么"
"只有参数名称会被添加到头。"

msgid ""
"All other parameters are added with their value, after applying ``str()`` to "
"it."
msgstr "所有其他参数在应用 ``str()`` 后，都会加上其值。"

msgid ""
"Returns the max-age from the response Cache-Control header as an integer (or "
"``None`` if it wasn't found or wasn't an integer)."
msgstr ""
"以整数形式返回响应 Cache-Control 头的最大寿命（如果没有找到或不是整数，则返"
"回 ``None``）。"

msgid "Adds some useful headers to the given ``HttpResponse`` object:"
msgstr "为给定的 ``HttpResponse`` 对象添加一些有用的头信息。"

msgid "``Expires``"
msgstr "``Expires``"

msgid "``Cache-Control``"
msgstr "``Cache-Control``"

msgid "Each header is only added if it isn't already set."
msgstr "每个头只有在还没有设置的情况下才会被添加。"

msgid ""
"``cache_timeout`` is in seconds. The :setting:`CACHE_MIDDLEWARE_SECONDS` "
"setting is used by default."
msgstr ""
"``cache_timeout`` 的单位是秒。默认使用 :setting:`CACHE_MIDDLEWARE_SECONDS` 配"
"置。"

msgid "Adds an ``Expires`` header to the current date/time."
msgstr ""

msgid ""
"Adds a ``Cache-Control: max-age=0, no-cache, no-store, must-revalidate, "
"private`` header to a response to indicate that a page should never be "
"cached."
msgstr ""
"在响应中添加 ``Cache-Control: max-age=0, no-cache, no-store, must-"
"revalidate, private`` 头，以表明页面永远不会被缓存。"

msgid ""
"Adds (or updates) the ``Vary`` header in the given ``HttpResponse`` object. "
"``newheaders`` is a list of header names that should be in ``Vary``. If "
"headers contains an asterisk, then ``Vary`` header will consist of a single "
"asterisk ``'*'``, according to :rfc:`9110#section-12.5.5`. Otherwise, "
"existing headers in ``Vary`` aren't removed."
msgstr ""

msgid ""
"Returns a cache key based on the request path. It can be used in the request "
"phase because it pulls the list of headers to take into account from the "
"global path registry and uses those to build a cache key to check against."
msgstr ""
"返回一个基于请求路径的缓存密钥。它可以在请求阶段使用，因为它从全局路径注册表"
"中提取要考虑的头列表，并使用这些头建立一个缓存密钥来进行检查。"

msgid ""
"If there is no headerlist stored, the page needs to be rebuilt, so this "
"function returns ``None``."
msgstr "如果没有存储头列表，则需要重建页面，因此该函数返回 ``None``。"

msgid ""
"Learns what headers to take into account for some request path from the "
"response object. It stores those headers in a global path registry so that "
"later access to that path will know what headers to take into account "
"without building the response object itself. The headers are named in the "
"``Vary`` header of the response, but we want to prevent response generation."
msgstr ""
"从响应对象中学习某些请求路径要考虑的头信息。它将这些头存储在全局路径注册表"
"中，这样以后访问该路径时就可以知道要考虑哪些头，而无需建立响应对象本身。头在"
"响应的 ``Vary`` 头中命名，但我们要防止响应生成。"

msgid ""
"The list of headers to use for cache key generation is stored in the same "
"cache as the pages themselves. If the cache ages some data out of the cache, "
"this means that we have to build the response once to get at the Vary header "
"and so at the list of headers to use for the cache key."
msgstr ""
"用于生成缓存密钥的头列表和页面本身一样存储在缓存中。如果缓存将一些数据从缓存"
"中过期，这意味着我们必须构建一次响应，以获得 Vary 头，因此也就获得了用于缓存"
"密钥的头列表。"

msgid "``django.utils.dateparse``"
msgstr "``django.utils.dateparse``"

msgid "The functions defined in this module share the following properties:"
msgstr "本模块中定义的函数共享以下属性："

msgid ""
"They accept strings in ISO 8601 date/time formats (or some close "
"alternatives) and return objects from the corresponding classes in Python's :"
"mod:`datetime` module."
msgstr ""
"它们接受 ISO 8601 日期／时间格式的字符串（或一些接近的替代格式），并从 "
"Python 的 :mod:`datetime` 模块的相应类中返回对象。"

msgid ""
"They raise :exc:`ValueError` if their input is well formatted but isn't a "
"valid date or time."
msgstr ""
"如果他们的输入格式很好，但不是有效的日期或时间，他们会引发 :exc:"
"`ValueError`。"

msgid "They return ``None`` if it isn't well formatted at all."
msgstr "如果输入格式不好，则返回 ``None``。"

msgid ""
"They accept up to picosecond resolution in input, but they truncate it to "
"microseconds, since that's what Python supports."
msgstr ""
"它们接受最多皮秒精度的输入，但它们将其截断为微秒，因为这是 Python 支持的。"

msgid "Parses a string and returns a :class:`datetime.date`."
msgstr "解析一个字符串并返回一个 :class:`datetime.date`。"

msgid "Parses a string and returns a :class:`datetime.time`."
msgstr "解析一个字符串并返回一个 :class:`datetime.time`。"

msgid ""
"UTC offsets aren't supported; if ``value`` describes one, the result is "
"``None``."
msgstr "不支持 UTC 偏移；如果 ``value`` 描述的是 UTC 偏移，结果是 ``None``。"

msgid "Parses a string and returns a :class:`datetime.datetime`."
msgstr "解析一个字符串并返回一个 :class:`datetime.datetime`。"

msgid ""
"UTC offsets are supported; if ``value`` describes one, the result's "
"``tzinfo`` attribute is a :class:`datetime.timezone` instance."
msgstr ""
"支持 UTC 偏移；如果 ``value`` 描述的是 UTC 偏移，则结果的 ``tzinfo`` 属性是一"
"个 :class:`datetime.timezone` 实例。"

msgid "Parses a string and returns a :class:`datetime.timedelta`."
msgstr "解析一个字符串并返回一个 :class:`datetime.timedelta`。"

msgid ""
"Expects data in the format ``\"DD HH:MM:SS.uuuuuu\"``, ``\"DD HH:MM:SS,"
"uuuuuu\"``,  or as specified by ISO 8601 (e.g. ``P4DT1H15M20S`` which is "
"equivalent to ``4 1:15:20``) or PostgreSQL's day-time interval format (e.g. "
"``3 days 04:05:06``)."
msgstr ""
"要求数据格式为 ``\"DD HH:MM:SS.uuuuu\"``、``\"DD HH:MM:SS,uuuuu\"`` 或 ISO "
"8601 规定的格式（例如 ``P4DT1H15M20S`` 相当于 ``4 1:15:20``）或 PostgreSQL 的"
"日期时间间隔格式（例如 ``3 days 04:05:06``）。"

msgid "``django.utils.decorators``"
msgstr "``django.utils.decorators``"

msgid ""
"Converts a function decorator into a method decorator. It can be used to "
"decorate methods or classes; in the latter case, ``name`` is the name of the "
"method to be decorated and is required."
msgstr ""
"将函数装饰器转换为方法装饰器。它可以用来装饰方法或类；在后一种情况下，"
"``name`` 是要装饰的方法的名称，并且是必需的。"

msgid ""
"``decorator`` may also be a list or tuple of functions. They are wrapped in "
"reverse order so that the call order is the order in which the functions "
"appear in the list/tuple."
msgstr ""
"``decorator`` 也可以是一个函数列表或元组。它们以相反的顺序包装，因此调用顺序"
"是函数在列表／元组中出现的顺序。"

msgid ""
"See :ref:`decorating class based views <decorating-class-based-views>` for "
"example usage."
msgstr ""
"参见 :ref:`装饰基于类的视图 <decorating-class-based-views>` 的用法示例。"

msgid ""
"Given a middleware class, returns a view decorator. This lets you use "
"middleware functionality on a per-view basis. The middleware is created with "
"no params passed."
msgstr ""
"给定一个中间件类，返回一个视图装饰器。这让你可以在每个视图的基础上使用中间件"
"功能。中间件的创建不需要传递参数。"

msgid ""
"It assumes middleware that's compatible with the old style of Django 1.9 and "
"earlier (having methods like ``process_request()``, ``process_exception()``, "
"and ``process_response()``)."
msgstr ""
"它假设中间件与 Django 1.9 和更早的老式中间件兼容（有 ``process_request()``、"
"``process_exception()`` 和 ``process_response()`` 等方法）。"

msgid ""
"Like ``decorator_from_middleware``, but returns a function that accepts the "
"arguments to be passed to the middleware_class. For example, the :func:"
"`~django.views.decorators.cache.cache_page` decorator is created from the "
"``CacheMiddleware`` like this::"
msgstr ""
"像 ``decorator_from_middleware`` 一样，但是返回一个接受参数的函数，传递给 "
"middleware_class。例如，:func:`~django.views.decorators.cache.cache_page` 装"
"饰器是从 ``CacheMiddleware`` 中创建的，就像这样："

msgid ""
"Marks a middleware as :ref:`synchronous-only <async-middleware>`. (The "
"default in Django, but this allows you to future-proof if the default ever "
"changes in a future release.)"
msgstr ""
"将一个中间件标记为 :ref:`仅同步 <async-middleware>`。（Django 中的默认值，但"
"这允许你在未来的版本中改变默认值的情况下对其进行保护。）"

msgid ""
"Marks a middleware as :ref:`asynchronous-only <async-middleware>`. Django "
"will wrap it in an asynchronous event loop when it is called from the WSGI "
"request path."
msgstr ""
"将一个中间件标记为 :ref:`仅异步 <async-middleware>`。当它从 WSGI 请求路径被调"
"用时，Django 将把它包装在异步事件循环中。"

msgid ""
"Marks a middleware as :ref:`sync and async compatible <async-middleware>`, "
"this allows to avoid converting requests. You must implement detection of "
"the current request type to use this decorator. See :ref:`asynchronous "
"middleware documentation <async-middleware>` for details."
msgstr ""
"将中间件标记为 :ref:`同步和异步兼容 <async-middleware>`，这样可以避免转换请"
"求。你必须实现对当前请求类型的检测才能使用这个装饰器。详情请看 :ref:`异步中间"
"件文档 <async-middleware>`。"

msgid "``django.utils.encoding``"
msgstr "``django.utils.encoding``"

msgid ""
"Returns a ``str`` object representing arbitrary object ``s``. Treats "
"bytestrings using the ``encoding`` codec."
msgstr ""
"返回一个代表任意对象 ``s`` 的 ``str`` 对象。使用 ``encoding`` 编解码器处理字"
"节字符串。"

msgid ""
"If ``strings_only`` is ``True``, don't convert (some) non-string-like "
"objects."
msgstr "如果 ``strings_only`` 是 ``True``，不要转换（一些）非字符串类对象。"

msgid "Determine if the object instance is of a protected type."
msgstr "确定对象实例是否属于一个受保护的类型。"

msgid ""
"Objects of protected types are preserved as-is when passed to "
"``force_str(strings_only=True)``."
msgstr ""
"当传递给 ``force_str(strings_only=True)`` 时，受保护类型的对象会被原样保存。"

msgid ""
"Similar to ``smart_str()``, except that lazy instances are resolved to "
"strings, rather than kept as lazy objects."
msgstr ""
"类似于 ``smart_str()``，除了惰性实例被解析为字符串，而不是作为惰性对象保存。"

msgid ""
"Returns a bytestring version of arbitrary object ``s``, encoded as specified "
"in ``encoding``."
msgstr "返回任意对象 ``s`` 的字节字符串版本，按照 ``encoding`` 中指定的编码。"

msgid ""
"Similar to ``smart_bytes``, except that lazy instances are resolved to "
"bytestrings, rather than kept as lazy objects."
msgstr ""
"类似于 ``smart_bytes``，除了惰性实例被解析为字节字符串，而不是作为惰性对象保"
"存。"

msgid ""
"Convert an Internationalized Resource Identifier (IRI) portion to a URI "
"portion that is suitable for inclusion in a URL."
msgstr "将国际化资源标识符（IRI）部分转换为适合包含在 URL 中的 URI 部分。"

msgid ""
"This is the algorithm from section 3.1 of :rfc:`3987#section-3.1`, slightly "
"simplified since the input is assumed to be a string rather than an "
"arbitrary byte stream."
msgstr ""
"这是 :rfc:`3987#section-3.1` 中第 3.1 节的算法，由于假设输入是一个字符串而不"
"是任意字节流，所以略作简化。"

msgid ""
"Takes an IRI (string or UTF-8 bytes) and returns a string containing the "
"encoded result."
msgstr "取一个 IRI（字符串或 UTF-8 字节）并返回一个包含编码结果的字符串。"

msgid ""
"Converts a Uniform Resource Identifier into an Internationalized Resource "
"Identifier."
msgstr "将统一资源标识符转换为国际化资源标识符。"

msgid "This is an algorithm from section 3.2 of :rfc:`3987#section-3.2`."
msgstr "这是 :rfc:`3987#section-3.2` 第 3.2 节中的一个算法。"

msgid ""
"Takes a URI in ASCII bytes and returns a string containing the encoded "
"result."
msgstr "获取一个 ASCII 字节的 URI，并返回一个包含编码结果的字符串。"

msgid ""
"Convert a file system path to a URI portion that is suitable for inclusion "
"in a URL. The path is assumed to be either UTF-8 bytes, string, or a :class:"
"`~pathlib.Path`."
msgstr ""
"将一个文件系统路径转换为适合包含在 URL 中的 URI 部分。路径假定为 UTF-8 字节、"
"字符串或一个 :class:`~pathlib.Path`。"

msgid ""
"This method will encode certain characters that would normally be recognized "
"as special characters for URIs.  Note that this method does not encode the ' "
"character, as it is a valid character within URIs. See "
"``encodeURIComponent()`` JavaScript function for more details."
msgstr ""
"本方法将对某些通常被识别为 URI 特殊字符的字符进行编码。 请注意，本方法不对 ' "
"字符进行编码，因为它是 URI 中的有效字符。更多细节请参见 "
"``encodeURIComponent()`` JavaScript 函数。"

msgid "Returns an ASCII string containing the encoded result."
msgstr "返回一个包含编码结果的 ASCII 字符串。"

msgid ""
"Escapes the unsafe characters from the path portion of a Uniform Resource "
"Identifier (URI)."
msgstr "从统一资源标识符（URI）的路径部分转出不安全字符。"

msgid "``django.utils.feedgenerator``"
msgstr "``django.utils.feedgenerator``"

msgid ""
"For simplifying the selection of a generator use ``feedgenerator."
"DefaultFeed`` which is currently ``Rss201rev2Feed``"
msgstr ""
"为了简化生成器的选择，使用 ``feedgenerator.DefaultFeed``，目前是 "
"``Rss201rev2Feed``。"

msgid ""
"For definitions of the different versions of RSS, see: https://web.archive."
"org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/"
"incompatible-rss"
msgstr ""
"关于不同版本的RSS的定义，参见： https://web.archive.org/web/20110718035220/"
"http://diveintomark.org/archives/2004/02/04/incompatible-rss。"

msgid "Creates a TagURI."
msgstr "创建一个 TagURI。"

msgid ""
"See https://web.archive.org/web/20110514113830/http://diveintomark.org/"
"archives/2004/05/28/howto-atom-id"
msgstr ""
"参见 https://web.archive.org/web/20110514113830/http://diveintomark.org/"
"archives/2004/05/28/howto-atom-id"

msgid "``SyndicationFeed``"
msgstr "``SyndicationFeed``"

msgid ""
"Base class for all syndication feeds. Subclasses should provide ``write()``."
msgstr ""

msgid ""
"Initialize the feed with the given dictionary of metadata, which applies to "
"the entire feed."
msgstr "用给定的元数据字典初始化 feed，它适用于整个 feed。"

msgid ""
"Any extra keyword arguments you pass to ``__init__`` will be stored in "
"``self.feed``."
msgstr ""
"你传递给 ``__init__`` 的任何额外的关键字参数将被存储在 ``self.feed`` 中。"

msgid ""
"All parameters should be strings, except ``categories``, which should be a "
"sequence of strings."
msgstr ""
"所有参数都应该是字符串，但 ``categories`` 除外，它应该是一个字符串序列。"

msgid ""
"Adds an item to the feed. All args are expected to be strings except "
"``pubdate`` and ``updateddate``, which are ``datetime.datetime`` objects, "
"and ``enclosures``, which is a list of ``Enclosure`` instances."
msgstr ""
"添加一个项目到 feed 中。除了 ``pubdate`` 和 ``updateddate`` 是 ``datetime."
"datetime`` 对象和 ``enclosures`` 是 ``Enclosure`` 实例的列表外，所有参数都应"
"该是字符串。"

msgid ""
"Return extra attributes to place on the root (i.e. feed/channel) element. "
"Called from ``write()``."
msgstr "返回要放在根元素（即 feed/channel）上的额外属性。从 ``write()`` 调用。"

msgid ""
"Add elements in the root (i.e. feed/channel) element. Called from "
"``write()``."
msgstr "在根（即 feed/channel）元素中添加元素。由 ``write()`` 调用。"

msgid ""
"Return extra attributes to place on each item (i.e. item/entry) element."
msgstr "返回要放在每个项目（即 item/entry）元素上的额外属性。"

msgid "Add elements on each item (i.e. item/entry) element."
msgstr "在每个项目（即 item/entry）元素上添加元素。"

msgid ""
"Outputs the feed in the given encoding to ``outfile``, which is a file-like "
"object. Subclasses should override this."
msgstr ""
"将给定编码的 feed 输出到 ``outfile``，这是一个类似文件的对象。子类应该覆盖这"
"个。"

msgid "Returns the feed in the given encoding as a string."
msgstr "以字符串形式返回给定编码的 feed。"

msgid ""
"Returns the latest ``pubdate`` or ``updateddate`` for all items in the feed. "
"If no items have either of these attributes this returns the current UTC "
"date/time."
msgstr ""
"返回 feed 中所有项目的最新 ``pubdate`` 或 ``updateddate``。如果没有项目有这些"
"属性，则返回当前的 UTC 日期／时间。"

msgid "``Enclosure``"
msgstr "``Enclosure``"

msgid "Represents an RSS enclosure"
msgstr "代表一个 RSS enclosure"

msgid "``RssFeed``"
msgstr "``RssFeed``"

msgid "``Rss201rev2Feed``"
msgstr "``Rss201rev2Feed``"

msgid "Spec: https://cyber.harvard.edu/rss/rss.html"
msgstr "参见： https://cyber.harvard.edu/rss/rss.html"

msgid "``RssUserland091Feed``"
msgstr "``RssUserland091Feed``"

msgid "Spec: http://backend.userland.com/rss091"
msgstr "参见： http://backend.userland.com/rss091"

msgid "``Atom1Feed``"
msgstr "``Atom1Feed``"

msgid "Spec: :rfc:`4287`"
msgstr "规格： :rfc:`4287`"

msgid "``django.utils.functional``"
msgstr "``django.utils.functional``"

msgid ""
"The ``@cached_property`` decorator caches the result of a method with a "
"single ``self`` argument as a property. The cached result will persist as "
"long as the instance does, so if the instance is passed around and the "
"function subsequently invoked, the cached result will be returned."
msgstr ""
"``@cached_property`` 装饰器将一个方法的结果缓存起来，该方法有一个 ``self`` 参"
"数作为属性。只要实例存在，缓存的结果就会持续存在，所以如果实例被传来传去，并"
"且随后函数被调用，缓存的结果就会被返回。"

msgid ""
"Consider a typical case, where a view might need to call a model's method to "
"perform some computation, before placing the model instance into the "
"context, where the template might invoke the method once more::"
msgstr ""
"考虑一个典型的情况，在将模型实例放入上下文之前，视图可能需要调用模型的方法来"
"执行一些计算，在上下文中，模板可能会再次调用该方法："

msgid "And in the template you would have:"
msgstr "而在模板中，你会有："

msgid ""
"Here, ``friends()`` will be called twice. Since the instance ``person`` in "
"the view and the template are the same, decorating the ``friends()`` method "
"with ``@cached_property`` can avoid that::"
msgstr ""
"在这里，``friends()`` 将被调用两次。由于视图和模板中的实例 ``person`` 是一样"
"的，所以用 ``@cached_property`` 来装饰 ``friends()`` 方法可以避免这种情况："

msgid ""
"Note that as the method is now a property, in Python code it will need to be "
"accessed appropriately::"
msgstr ""
"请注意，由于该方法现在是一个属性，所以在 Python 代码中需要适当地访问它："

msgid ""
"The cached value can be treated like an ordinary attribute of the instance::"
msgstr "缓存值可以像实例的普通属性一样对待："

msgid ""
"Because of the way the :py:ref:`descriptor protocol <descriptor-invocation>` "
"works, using ``del`` (or ``delattr``) on a ``cached_property`` that hasn't "
"been accessed raises ``AttributeError``."
msgstr ""
"由于 :py:ref:`描述符协议 <descriptor-invocation>` 的工作方式，在一个没有被访"
"问过的 ``cached_property`` 上使用 ``del`` （或 ``delattr``）会引起 "
"``AttributeError``。"

msgid ""
"As well as offering potential performance advantages, ``@cached_property`` "
"can ensure that an attribute's value does not change unexpectedly over the "
"life of an instance. This could occur with a method whose computation is "
"based on ``datetime.now()``, or if a change were saved to the database by "
"some other process in the brief interval between subsequent invocations of a "
"method on the same instance."
msgstr ""
"除了提供潜在的性能优势外，``@cached_property`` 还可以确保一个属性的值在一个实"
"例的生命周期内不会发生意外变化。如果一个方法的计算是基于 ``datetime.now()`` "
"的，或者如果在同一实例上的一个方法的后续调用之间的短暂间隔中，变化被其他进程"
"保存到数据库中，就可能发生这种情况。"

msgid ""
"You can make cached properties of methods. For example, if you had an "
"expensive ``get_friends()`` method and wanted to allow calling it without "
"retrieving the cached value, you could write::"
msgstr ""
"你可以使用方法的缓存属性。例如，如果你有一个昂贵的 ``get_friends()`` 方法，并"
"且想允许调用它而不检索缓存值，你可以编写："

msgid ""
"While ``person.get_friends()`` will recompute the friends on each call, the "
"value of the cached property will persist until you delete it as described "
"above::"
msgstr ""
"虽然 ``person.get_friends()`` 会在每次调用时重新计算，但缓存属性的值会一直存"
"在，直到你如上所述删除它为止："

msgid ""
"The ``name`` parameter is deprecated and will be removed in Django 5.0 as "
"it's unnecessary as of Python 3.6."
msgstr ""

msgid ""
"Similar to :py:func:`@classmethod <classmethod>`, the ``@classproperty`` "
"decorator converts the result of a method with a single ``cls`` argument "
"into a property that can be accessed directly from the class."
msgstr ""
"与 :py:func:`@classmethod <classmethod>` 类似，``@classproperty`` 装饰器将带"
"有单个 ``cls`` 参数的方法的结果转换为可以直接从类中访问的属性。"

msgid ""
"Django offers many utility functions (particularly in ``django.utils``) that "
"take a string as their first argument and do something to that string. These "
"functions are used by template filters as well as directly in other code."
msgstr ""
"Django 提供了许多实用函数（特别是在 ``django.utils`` 中），这些函数将一个字符"
"串作为它们的第一个参数，并对该字符串进行处理。这些函数可以被模板过滤器使用，"
"也可以直接在其他代码中使用。"

msgid ""
"If you write your own similar functions and deal with translations, you'll "
"face the problem of what to do when the first argument is a lazy translation "
"object. You don't want to convert it to a string immediately, because you "
"might be using this function outside of a view (and hence the current "
"thread's locale setting will not be correct)."
msgstr ""
"如果你自己编写类似的函数并处理翻译，你会面临这样一个问题：当第一个参数是一个"
"惰性翻译对象时，该怎么办？你不想立即将其转换为字符串，因为你可能会在视图之外"
"使用这个函数（因此当前线程的 locale 配置将不正确）。"

msgid ""
"For cases like this, use the ``django.utils.functional.keep_lazy()`` "
"decorator. It modifies the function so that *if* it's called with a lazy "
"translation as one of its arguments, the function evaluation is delayed "
"until it needs to be converted to a string."
msgstr ""
"对于这样的情况，可以使用 ``django.utils.functional.keep_lazy()`` 装饰器。它可"
"以修改函数，使其在调用时，*如果* 参数是惰性翻译，则函数的执行会被延迟，直到需"
"要将其转换为字符串。"

msgid ""
"The ``keep_lazy()`` decorator takes a number of extra arguments (``*args``) "
"specifying the type(s) that the original function can return. A common use "
"case is to have functions that return text. For these, you can pass the "
"``str`` type to ``keep_lazy`` (or use the :func:`keep_lazy_text` decorator "
"described in the next section)."
msgstr ""
"``keep_lazy()`` 装饰器需要一些额外的参数（``*args``）来指定原始函数可以返回的"
"类型。一个常见的用例是返回文本的函数。对于这些函数，你可以将 ``str`` 类型传递"
"给 ``keep_lazy`` （或者使用下一节描述的 :func:`keep_lazy_text` 装饰器）。"

msgid ""
"Using this decorator means you can write your function and assume that the "
"input is a proper string, then add support for lazy translation objects at "
"the end."
msgstr ""
"使用这个装饰器意味着你可以编写你的函数，并假设输入是一个正确的字符串，然后在"
"最后添加对惰性翻译对象的支持。"

msgid "A shortcut for ``keep_lazy(str)(func)``."
msgstr "``keep_lazy(str)(func)`` 的快捷方式。"

msgid ""
"If you have a function that returns text and you want to be able to take "
"lazy arguments while delaying their evaluation, you can use this decorator::"
msgstr ""
"如果你有一个返回文本的函数，并且你希望能够在延迟其执行的同时接受惰性参数，你"
"可以使用这个装饰器："

msgid "``django.utils.html``"
msgstr "``django.utils.html``"

msgid ""
"Usually you should build up HTML using Django's templates to make use of its "
"autoescape mechanism, using the utilities in :mod:`django.utils.safestring` "
"where appropriate. This module provides some additional low level utilities "
"for escaping HTML."
msgstr ""
"通常情况下，你应该使用 Django 的模板来构建 HTML，以利用它的自动转义机制，在适"
"当的地方使用 :mod:`django.utils.safestring` 中的实用程序。这个模块提供了一些"
"额外的低级实用程序来处理 HTML。"

msgid ""
"Returns the given text with ampersands, quotes and angle brackets encoded "
"for use in HTML. The input is first coerced to a string and the output has :"
"func:`~django.utils.safestring.mark_safe` applied."
msgstr ""
"返回给定的文本，并对其的符号、引号和角括号进行编码，以便在 HTML 中使用。输入"
"的内容首先被强制为一个字符串，输出的内容被应用了 :func:`~django.utils."
"safestring.mark_safe`。"

msgid ""
"Similar to ``escape()``, except that it doesn't operate on preescaped "
"strings, so it will not double escape."
msgstr ""

msgid ""
"This is similar to :meth:`str.format`, except that it is appropriate for "
"building up HTML fragments. The first argument ``format_string`` is not "
"escaped but all other args and kwargs are passed through :func:"
"`conditional_escape` before being passed to ``str.format()``. Finally, the "
"output has :func:`~django.utils.safestring.mark_safe` applied."
msgstr ""

msgid ""
"For the case of building up small HTML fragments, this function is to be "
"preferred over string interpolation using ``%`` or ``str.format()`` "
"directly, because it applies escaping to all arguments - just like the "
"template system applies escaping by default."
msgstr ""
"对于构建小型 HTML 片段的情况，这个函数比直接使用 ``%`` 或 ``str.format()`` 进"
"行字符串插值要好，因为它对所有参数都应用了转义 —— 就像模板系统默认应用转义一"
"样。"

msgid "So, instead of writing::"
msgstr "所以，不要写："

msgid "You should instead use::"
msgstr "你应该用："

msgid ""
"This has the advantage that you don't need to apply :func:`escape` to each "
"argument and risk a bug and an XSS vulnerability if you forget one."
msgstr ""
"这样做的好处是，你不需要对每个参数应用 :func:`escape`，如果你忘记了一个参数，"
"就有可能出现错误和 XSS 漏洞。"

msgid ""
"Note that although this function uses ``str.format()`` to do the "
"interpolation, some of the formatting options provided by ``str.format()`` "
"(e.g. number formatting) will not work, since all arguments are passed "
"through :func:`conditional_escape` which (ultimately) calls :func:`~django."
"utils.encoding.force_str` on the values."
msgstr ""
"请注意，虽然这个函数使用 ``str.format()`` 来进行内插，但 ``str.format()`` 提"
"供的一些格式化选项（例如数字格式化）将无法使用，因为所有参数都通过 :func:"
"`conditional_escape`，而这个函数（最终）会调用 :func:`~django.utils.encoding."
"force_str` 来处理这些值。"

msgid ""
"A wrapper of :func:`format_html`, for the common case of a group of "
"arguments that need to be formatted using the same format string, and then "
"joined using ``sep``. ``sep`` is also passed through :func:"
"`conditional_escape`."
msgstr ""
":func:`format_html` 的一个封装器，用于常见的情况，即一组参数需要使用相同的格"
"式字符串进行格式化，然后使用 ``sep`` 加入。``sep`` 也通过 :func:"
"`conditional_escape` 传递。"

msgid ""
"``args_generator`` should be an iterator that returns the sequence of "
"``args`` that will be passed to :func:`format_html`. For example::"
msgstr ""
"``args_generator`` 应该是一个迭代器，返回 ``args`` 的序列，这些序列将传递给 :"
"func:`format_html`。例如："

msgid ""
"Escapes all HTML/XML special characters with their Unicode escapes, so value "
"is safe for use with JavaScript. Also wraps the escaped JSON in a "
"``<script>`` tag. If the ``element_id`` parameter is not ``None``, the "
"``<script>`` tag is given the passed id. For example:"
msgstr ""

msgid "In older versions, the ``element_id`` argument was required."
msgstr "在更旧的版本中，参数 ``element_id`` 是必需的。"

msgid "The ``encoder`` argument was added."
msgstr ""

msgid ""
"Tries to remove anything that looks like an HTML tag from the string, that "
"is anything contained within ``<>``."
msgstr ""
"试图从字符串中删除任何类似 HTML 标签的内容，即包含在 ``<>`` 内的任何内容。"

msgid ""
"Absolutely NO guarantee is provided about the resulting string being HTML "
"safe. So NEVER mark safe the result of a ``strip_tag`` call without escaping "
"it first, for example with :func:`~django.utils.html.escape`."
msgstr ""
"绝对不能保证结果的字符串是 HTML 安全的。所以千万不要在没有转义的情况下将 "
"``strip_tag`` 调用的结果标记为安全，例如使用 :func:`~django.utils.html."
"escape`。"

msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` "
"the return value will be ``\"Joel is a slug\"``."
msgstr ""
"如果 ``value`` 是 ``\"<b>Joel</b> <button>is</button> a <span>slug</"
"span>\"`` 返回值将是 ``\"Joel is a slug\"``。"

msgid ""
"If you are looking for a more robust solution, consider using a third-party "
"HTML sanitizing tool."
msgstr ""

msgid ""
"The ``__html__()`` method on a class helps non-Django templates detect "
"classes whose output doesn't require HTML escaping."
msgstr ""
"类上的 ``__html__()`` 方法可以帮助非 Django 模板检测其输出不需要 HTML 转义的"
"类。"

msgid ""
"This decorator defines the ``__html__()`` method on the decorated class by "
"wrapping ``__str__()`` in :meth:`~django.utils.safestring.mark_safe`. Ensure "
"the ``__str__()`` method does indeed return text that doesn't require HTML "
"escaping."
msgstr ""
"这个装饰器通过在 :meth:`~django.utils.safestring.mark_safe` 中封装 "
"``__str__()`` 来定义被装饰的类上的 ``__html__()`` 方法。确保 ``__str__()`` 方"
"法确实返回不需要 HTML 转义的文本。"

msgid "``django.utils.http``"
msgstr "``django.utils.http``"

msgid ""
"A version of Python's :func:`urllib.parse.urlencode` function that can "
"operate on ``MultiValueDict`` and non-string values."
msgstr ""
"Python 的 :func:`urllib.parse.urlencode` 函数的一个版本，可以对 "
"``MultiValueDict`` 和非字符串值进行操作。"

msgid ""
"Formats the time to match the :rfc:`1123#section-5.2.14` date format as "
"specified by HTTP :rfc:`9110#section-5.6.7`."
msgstr ""

msgid ""
"Accepts a floating point number expressed in seconds since the epoch in UTC--"
"such as that outputted by ``time.time()``. If set to ``None``, defaults to "
"the current time."
msgstr ""
"接受自 UTC 以来以秒为单位的浮点数，如 ``time.time()`` 输出的时间。如果设置为 "
"``None``，默认为当前时间。"

msgid "Outputs a string in the format ``Wdy, DD Mon YYYY HH:MM:SS GMT``."
msgstr "输出格式为 ``Wdy, DD Mon YYYY HH:MM:SS GMT`` 的字符串。"

msgid ""
"Constructs a ``Content-Disposition`` HTTP header value from the given "
"``filename`` as specified by :rfc:`6266`. Returns ``None`` if "
"``as_attachment`` is ``False`` and ``filename`` is ``None``, otherwise "
"returns a string suitable for the ``Content-Disposition`` HTTP header."
msgstr ""

msgid "Converts a base 36 string to an integer."
msgstr "将 base 36 的字符串转换为整数。"

msgid "Converts a positive integer to a base 36 string."
msgstr "将一个正整数转换为 base 36 字符串。"

msgid ""
"Encodes a bytestring to a base64 string for use in URLs, stripping any "
"trailing equal signs."
msgstr ""
"将一个字节字符串编码为 base64 字符串，用于 URL 中，去掉所有尾部的等号。"

msgid ""
"Decodes a base64 encoded string, adding back any trailing equal signs that "
"might have been stripped."
msgstr "解码一个 base64 编码的字符串，将可能被剥离的尾部等号加回来。"

msgid "``django.utils.module_loading``"
msgstr "``django.utils.module_loading``"

msgid "Functions for working with Python modules."
msgstr "用于处理 Python 模块的函数。"

msgid ""
"Imports a dotted module path and returns the attribute/class designated by "
"the last name in the path. Raises ``ImportError`` if the import failed. For "
"example::"
msgstr ""
"导入一个点分隔模块路径，并返回路径中最后一个名字所指定的属性／类。如果导入失"
"败，则引发 ``ImportError``。例如："

msgid "``django.utils.safestring``"
msgstr "``django.utils.safestring``"

msgid ""
"Functions and classes for working with \"safe strings\": strings that can be "
"displayed safely without further escaping in HTML. Marking something as a "
"\"safe string\" means that the producer of the string has already turned "
"characters that should not be interpreted by the HTML engine (e.g. '<') into "
"the appropriate entities."
msgstr ""
"用于处理 “安全字符串” 的函数和类：在 HTML 中无需进一步转义就可以安全显示的字"
"符串。将某一字符串标记为 “安全字符串” 意味着该字符串的制作者已经将那些不应该"
"被 HTML 引擎解释的字符（例如 '<'）转化为适当的实体。"

msgid ""
"A ``str`` subclass that has been specifically marked as \"safe\" (requires "
"no further escaping) for HTML output purposes."
msgstr ""
"``str`` 子类，为了 HTML 输出的目的，被特别标记为 “安全”（不需要进一步的转"
"义）。"

msgid ""
"Explicitly mark a string as safe for (HTML) output purposes. The returned "
"object can be used everywhere a string is appropriate."
msgstr ""
"为（HTML）输出目的明确标记一个字符串为安全的。返回的对象可以用在任何适合字符"
"串的地方。"

msgid "Can be called multiple times on a single string."
msgstr "可以在一个字符串上多次调用。"

msgid "Can also be used as a decorator."
msgstr "也可作为装饰器使用。"

msgid ""
"For building up fragments of HTML, you should normally be using :func:"
"`django.utils.html.format_html` instead."
msgstr ""
"对于构建 HTML 片段，你通常应该使用 :func:`django.utils.html.format_html` 代"
"替。"

msgid "String marked safe will become unsafe again if modified. For example:"
msgstr ""

msgid "``django.utils.text``"
msgstr "``django.utils.text``"

msgid ""
"A version of :meth:`str.format` for when ``format_string``, ``args``, and/or "
"``kwargs`` contain lazy objects. The first argument is the string to be "
"formatted. For example::"
msgstr ""
"一个 :meth:`str.format` 用于 ``format_string``、`args`` 和／或 ``kwargs`` 包"
"含惰性对象时的版本。第一个参数是要格式化的字符串。例如："

msgid ""
"This example allows translators to translate part of the URL. If \"person\" "
"is translated to \"persona\", the regular expression will match ``persona/(?"
"P<pk>\\d+)/$``, e.g. ``persona/5/``."
msgstr ""
"这个例子允许翻译人员翻译部分 URL。如果 \"person\" 被翻译成 \"persona\"，正则"
"表达式将匹配 ``persona/(?P<pk>\\d+)/$``，例如 ``persona/5/``。"

msgid "Converts a string to a URL slug by:"
msgstr "通过以下方式将一个字符串转换为 URL slug。"

msgid "Converting to ASCII if ``allow_unicode`` is ``False`` (the default)."
msgstr "如果 ``allow_unicode`` 为 ``False`` （默认），则转换为 ASCII 码。"

msgid "Converting to lowercase."
msgstr "转换为小写。"

msgid ""
"Removing characters that aren't alphanumerics, underscores, hyphens, or "
"whitespace."
msgstr "删除非字母数字、下划线、连字符或空格的字符。"

msgid "Replacing any whitespace or repeated dashes with single dashes."
msgstr "将任何空格或重复的破折号替换为单破折号。"

msgid "Removing leading and trailing whitespace, dashes, and underscores."
msgstr ""

msgid ""
"If you want to allow Unicode characters, pass ``allow_unicode=True``. For "
"example:"
msgstr ""

msgid "``django.utils.timezone``"
msgstr "``django.utils.timezone``"

msgid ":class:`~datetime.tzinfo` instance that represents UTC."
msgstr ":class:`~datetime.tzinfo` 实例，表示 UTC。"

msgid ""
"This is an alias to :attr:`datetime.timezone.utc`. Use :attr:`datetime."
"timezone.utc` directly."
msgstr ""

msgid ""
"Returns a :class:`~datetime.tzinfo` instance that represents a time zone "
"with a fixed offset from UTC."
msgstr ""
"返回一个 :class:`~datetime.tzinfo` 实例，该实例表示一个与 UTC 有固定偏移的时"
"区。"

msgid ""
"``offset`` is a :class:`datetime.timedelta` or an integer number of minutes. "
"Use positive values for time zones east of UTC and negative values for west "
"of UTC."
msgstr ""
"``offset`` 是一个 :class:`datetime.timedelta` 或一个整数分钟。UTC 以东的时区"
"为正值，UTC 以西的时区为负值。"

msgid ""
"Returns a :class:`~datetime.tzinfo` instance that represents the :ref:"
"`default time zone <default-current-time-zone>`."
msgstr ""
"返回一个 :class:`~datetime.tzinfo` 实例，表示 :ref:`默认时区 <default-"
"current-time-zone>`。"

msgid ""
"Returns the name of the :ref:`default time zone <default-current-time-zone>`."
msgstr "返回 :ref:`默认时区 <default-current-time-zone>` 的名称。"

msgid ""
"Returns a :class:`~datetime.tzinfo` instance that represents the :ref:"
"`current time zone <default-current-time-zone>`."
msgstr ""
"返回一个 :class:`~datetime.tzinfo` 实例，表示 :ref:`当前时区 <default-"
"current-time-zone>`。"

msgid ""
"Returns the name of the :ref:`current time zone <default-current-time-zone>`."
msgstr "返回 :ref:`当前时区 <default-current-time-zone>` 的名称。"

msgid ""
"Sets the :ref:`current time zone <default-current-time-zone>`. The "
"``timezone`` argument must be an instance of a :class:`~datetime.tzinfo` "
"subclass or a time zone name."
msgstr ""
"设置 :ref:`当前时区 <default-current-time-zone>`。``timezone`` 参数必须是 :"
"class:`~datetime.tzinfo` 子类的实例或时区名称。"

msgid "Unsets the :ref:`current time zone <default-current-time-zone>`."
msgstr "取消设置 :ref:`当前时区 <default-current-time-zone>`。"

msgid ""
"This is a Python context manager that sets the :ref:`current time zone "
"<default-current-time-zone>` on entry with :func:`activate()`, and restores "
"the previously active time zone on exit. If the ``timezone`` argument is "
"``None``, the :ref:`current time zone <default-current-time-zone>` is unset "
"on entry with :func:`deactivate()` instead."
msgstr ""
"这是一个 Python 上下文管理器，它在进入时通过 :func:`activate()` 设置 :ref:`当"
"前时区 <default-current-time-zone>`，并在退出时恢复之前的活动时区。如果 "
"``timezone`` 参数是 ``None``，则 :ref:`当前时区 <default-current-time-zone>` "
"在进入时用 :func:`deactivate()` 取消设置。"

msgid "``override`` is also usable as a function decorator."
msgstr "``override`` 也可作为函数装饰器使用。"

msgid ""
"Converts an aware :class:`~datetime.datetime` to a different time zone, by "
"default the :ref:`current time zone <default-current-time-zone>`."
msgstr ""
"将一个感知的 :class:`~datetime.datetime` 转换为不同的时区，默认为 :ref:`当前"
"时区 <default-current-time-zone>`。"

msgid "When ``value`` is omitted, it defaults to :func:`now`."
msgstr "当省略 ``value`` 时，默认为 :func:`now`。"

msgid ""
"This function doesn't work on naive datetimes; use :func:`make_aware` "
"instead."
msgstr "这个函数不适用于 naive 的日期，请使用 :func:`make_aware` 代替。"

msgid ""
"Uses :func:`localtime` to convert an aware :class:`~datetime.datetime` to a :"
"meth:`~datetime.datetime.date` in a different time zone, by default the :ref:"
"`current time zone <default-current-time-zone>`."
msgstr ""
"使用 :func:`localtime` 将一个已知道的 :class:`~datetime.datetime` 转换为不同"
"时区的 :meth:`~datetime.datetime.date`，默认为 :ref:`当前时区 <default-"
"current-time-zone>`。"

msgid "This function doesn't work on naive datetimes."
msgstr "此功能不适用于 naive 的日期。"

msgid ""
"Returns a :class:`~datetime.datetime` that represents the current point in "
"time. Exactly what's returned depends on the value of :setting:`USE_TZ`:"
msgstr ""
"返回一个 :class:`~datetime.datetime`，表示当前的时间点。具体返回什么取决于 :"
"setting:`USE_TZ` 的值。"

msgid ""
"If :setting:`USE_TZ` is ``False``, this will be a :ref:`naive "
"<naive_vs_aware_datetimes>` datetime (i.e. a datetime without an associated "
"timezone) that represents the current time in the system's local timezone."
msgstr ""
"如果 :setting:`USE_TZ` 是 ``False``，这将是一个 :ref:`naive "
"<naive_vs_aware_datetimes>` 的日期时间（即一个没有关联时区的日期时间），代表"
"系统当地时区的当前时间。"

msgid ""
"If :setting:`USE_TZ` is ``True``, this will be an :ref:`aware "
"<naive_vs_aware_datetimes>` datetime representing the current time in UTC. "
"Note that :func:`now` will always return times in UTC regardless of the "
"value of :setting:`TIME_ZONE`; you can use :func:`localtime` to get the time "
"in the current time zone."
msgstr ""
"如果 :setting:`USE_TZ` 是 ``True``，这将是一个 :ref:`aware "
"<naive_vs_aware_datetimes>` 的日期时间，代表当前的 UTC 时间。请注意，无论 :"
"setting:`TIME_ZONE` 的值是多少， :func:`now` 将始终返回以 UTC 为单位的时间；"
"你可以使用 :func:`localtime` 来获取当前时区的时间。"

msgid ""
"Returns ``True`` if ``value`` is aware, ``False`` if it is naive. This "
"function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""
"如果 ``value`` 是感知的，返回 ``True``，如果是 naive 的，则返回 ``False``。本"
"函数假设 ``value`` 是一个 :class:`~datetime.datetime`。"

msgid ""
"Returns ``True`` if ``value`` is naive, ``False`` if it is aware. This "
"function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""
"如果 ``value`` 是 naive 的，返回 ``True``，如果是感知的，则返回 ``False``。本"
"函数假设 ``value`` 是一个 :class:`~datetime.datetime`。"

msgid ""
"Returns an aware :class:`~datetime.datetime` that represents the same point "
"in time as ``value`` in ``timezone``, ``value`` being a naive :class:"
"`~datetime.datetime`. If ``timezone`` is set to ``None``, it defaults to "
"the :ref:`current time zone <default-current-time-zone>`."
msgstr ""
"返回一个感知的 :class:`~datetime.datetime`，在 ``timezone`` 中表示与 "
"``value`` 相同的时间点，``value`` 是一个 naive 的 :class:`~datetime."
"datetime`。如果 ``timezone`` 设置为 ``None``，则默认为 :ref:`当前时区 "
"<default-current-time-zone>`。"

msgid ""
"When using ``pytz``, the ``pytz.AmbiguousTimeError`` exception is raised if "
"you try to make ``value`` aware during a DST transition where the same time "
"occurs twice (when reverting from DST). Setting ``is_dst`` to ``True`` or "
"``False`` will avoid the exception by choosing if the time is pre-transition "
"or post-transition respectively."
msgstr ""

msgid ""
"When using ``pytz``, the ``pytz.NonExistentTimeError`` exception is raised "
"if you try to make ``value`` aware during a DST transition such that the "
"time never occurred. For example, if the 2:00 hour is skipped during a DST "
"transition, trying to make 2:30 aware in that time zone will raise an "
"exception. To avoid that you can use ``is_dst`` to specify how "
"``make_aware()`` should interpret such a nonexistent time. If "
"``is_dst=True`` then the above time would be interpreted as 2:30 DST time "
"(equivalent to 1:30 local time). Conversely, if ``is_dst=False`` the time "
"would be interpreted as 2:30 standard time (equivalent to 3:30 local time)."
msgstr ""

msgid ""
"The ``is_dst`` parameter has no effect when using non-``pytz`` timezone "
"implementations."
msgstr ""

msgid ""
"Returns a naive :class:`~datetime.datetime` that represents in ``timezone``  "
"the same point in time as ``value``, ``value`` being an aware :class:"
"`~datetime.datetime`. If ``timezone`` is set to ``None``, it defaults to "
"the :ref:`current time zone <default-current-time-zone>`."
msgstr ""
"返回一个 naive 的 :class:`~datetime.datetime`，它在 ``timezone`` 中表示与 "
"``value`` 相同的时间点，``value`` 是一个感知的 :class:`~datetime.datetime`。"
"如果 ``timezone`` 设置为 ``None``，则默认为 :ref:`当前时区 <default-current-"
"time-zone>`。"

msgid "``django.utils.translation``"
msgstr "``django.utils.translation``"

msgid ""
"For a complete discussion on the usage of the following see the :doc:"
"`translation documentation </topics/i18n/translation>`."
msgstr ""
"关于以下用法的完整讨论，请参见 :doc:`翻译文档 </topics/i18n/translation>`。"

msgid "Translates ``message`` and returns it as a string."
msgstr "翻译 ``message`` 并以字符串形式返回。"

msgid ""
"Translates ``message`` given the ``context`` and returns it as a string."
msgstr "翻译 ``message`` 给定的 ``context`` 并以字符串形式返回。"

msgid "For more information, see :ref:`contextual-markers`."
msgstr "更多信息，见 :ref:`contextual-markers`。"

msgid "Same as the non-lazy versions above, but using lazy execution."
msgstr "和上面的非惰性版本一样，但使用惰性执行。"

msgid "See :ref:`lazy translations documentation <lazy-translations>`."
msgstr "参见 :ref:`惰性翻译文档 <lazy-translations>`。"

msgid ""
"Marks strings for translation but doesn't translate them now. This can be "
"used to store strings in global variables that should stay in the base "
"language (because they might be used externally) and will be translated "
"later."
msgstr ""
"标记要翻译的字符串，但现在不翻译它们。这可以用来存储全局变量中的字符串，这些"
"字符串应该留在基础语言中（因为它们可能会被外部使用），并在以后被翻译。"

msgid ""
"Translates ``singular`` and ``plural`` and returns the appropriate string "
"based on ``number``."
msgstr "翻译 ``singular`` 和 ``plural``，并根据 ``number`` 返回相应的字符串。"

msgid ""
"Translates ``singular`` and ``plural`` and returns the appropriate string "
"based on ``number`` and the ``context``."
msgstr ""
"翻译 ``singular`` 和 ``plural``，并根据 ``number`` 和 ``context`` 返回适当的"
"字符串。"

msgid ""
"Fetches the translation object for a given language and activates it as the "
"current translation object for the current thread."
msgstr "获取给定语言的翻译对象，并将其激活为当前线程的当前翻译对象。"

msgid ""
"Deactivates the currently active translation object so that further _ calls "
"will resolve against the default translation object, again."
msgstr ""
"停用当前活动的翻译对象，以便进一步的 _ 调用将再次针对默认翻译对象进行解析。"

msgid ""
"Makes the active translation object a ``NullTranslations()`` instance. This "
"is useful when we want delayed translations to appear as the original string "
"for some reason."
msgstr ""
"使活动翻译对象成为 ``NullTranslations()`` 实例。当我们出于某种原因想让延迟翻"
"译以原始字符串的形式出现时，这很有用。"

msgid ""
"A Python context manager that uses :func:`django.utils.translation.activate` "
"to fetch the translation object for a given language, activates it as the "
"translation object for the current thread and reactivates the previous "
"active language on exit. Optionally, it can deactivate the temporary "
"translation on exit with :func:`django.utils.translation.deactivate` if the "
"``deactivate`` argument is ``True``. If you pass ``None`` as the language "
"argument, a ``NullTranslations()`` instance is activated within the context."
msgstr ""
"一个 Python 上下文管理器，它使用 :func:`django.utils.translation.activate` 获"
"取给定语言的翻译对象，将其激活为当前线程的翻译对象，并在退出时重新激活之前的"
"活动语言。如果 ``deactivate`` 参数为 ``True``，则可以用 :func:`django.utils."
"translation.deactivate` 在退出时停用临时翻译对象。如果传递 ``None`` 作为语言"
"参数，则会在上下文中激活 ``NullTranslations()`` 实例。"

msgid ""
"Checks whether there is a global language file for the given language code "
"(e.g. 'fr', 'pt_BR'). This is used to decide whether a user-provided "
"language is available."
msgstr ""
"检查是否有给定语言代码的全局语言文件（如 'fr'、'pt_BR'）。这用于决定用户提供"
"的语言是否可用。"

msgid ""
"Returns the currently selected language code. Returns ``None`` if "
"translations are temporarily deactivated (by :func:`deactivate_all()` or "
"when ``None`` is passed to :func:`override()`)."
msgstr ""
"返回当前选择的语言代码。如果翻译被暂时停用（通过 :func:`deactivate_all()` 或"
"当 ``None`` 被传递给 :func:`override()` 时），返回 ``None``。"

msgid "Returns selected language's BiDi layout:"
msgstr "返回所选语言的 BiDi 布局。"

msgid "``False`` = left-to-right layout"
msgstr "``False`` = 从左到右布局"

msgid "``True`` = right-to-left layout"
msgstr "``True`` = 从右到左布局"

msgid ""
"Analyzes the request to find what language the user wants the system to "
"show. Only languages listed in settings.LANGUAGES are taken into account. If "
"the user requests a sublanguage where we have a main language, we send out "
"the main language."
msgstr ""
"分析请求，找出用户希望系统显示的语言。只考虑 settings.LANGUAGES 中列出的语"
"言。如果用户请求的是我们有主语言的子语言，我们会发送主语言。"

msgid ""
"If ``check_path`` is ``True``, the function first checks the requested URL "
"for whether its path begins with a language code listed in the :setting:"
"`LANGUAGES` setting."
msgstr ""
"如果 ``check_path`` 为 ``True``，则函数首先检查请求的 URL 的路径是否以 :"
"setting:`LANGUAGES` 配置中列出的语言代码开头。"

msgid ""
"Returns ``lang_code`` if it's in the :setting:`LANGUAGES` setting, possibly "
"selecting a more generic variant. For example, ``'es'`` is returned if "
"``lang_code`` is ``'es-ar'`` and ``'es'`` is in :setting:`LANGUAGES` but "
"``'es-ar'`` isn't."
msgstr ""
"如果在 :setting:`LANGUAGES` 配置中，则返回 ``lang_code``，可能会选择一个更通"
"用的变量。例如，如果 ``lang_code`` 是 ``'es-ar'``，并且 ``'es'`` 在 :setting:"
"`LANGUAGES` 中，但 ``'es-ar'`` 没有，则返回 ``'es'``。"

msgid ""
"If ``strict`` is ``False`` (the default), a country-specific variant may be "
"returned when neither the language code nor its generic variant is found. "
"For example, if only ``'es-co'`` is in :setting:`LANGUAGES`, that's returned "
"for ``lang_code``\\s like ``'es'`` and ``'es-ar'``. Those matches aren't "
"returned if ``strict=True``."
msgstr ""
"如果 ``strict`` 是 ``False`` （默认），当语言代码和通用变体都没有找到时，可能"
"会返回一个特定国家的变体。例如，如果 :setting:`LANGUAGES` 中只有 ``'es-"
"co'``，那么就会返回 ``lang_code``，如 ``'es'`` 和 ``'es-ar'``。如果 "
"``strict=True``，则不会返回这些匹配。"

msgid "Raises :exc:`LookupError` if nothing is found."
msgstr "如果没有找到任何东西，会引发 :exc:`LookupError`。"

msgid "Turns a language name (en-us) into a locale name (en_US)."
msgstr "将语言名称（en-us）转换为 locale 名称（en_US）。"

msgid ""
"Turns a Django template into something that is understood by ``xgettext``. "
"It does so by translating the Django translation tags into standard "
"``gettext`` function invocations."
msgstr ""
"将 Django 模板转化为能被 ``xgettext`` 理解的东西。它通过将 Django 翻译标签翻"
"译成标准的 ``gettext`` 函数调用来实现。"

msgid "Writing validators"
msgstr "编写验证器"

msgid ""
"A validator is a callable that takes a value and raises a :exc:`~django.core."
"exceptions.ValidationError` if it doesn't meet some criteria. Validators can "
"be useful for reusing validation logic between different types of fields."
msgstr ""

msgid "For example, here's a validator that only allows even numbers::"
msgstr "例如，这里有一个只允许偶数的验证器："

msgid ""
"You can add this to a model field via the field's :attr:`~django.db.models."
"Field.validators` argument::"
msgstr ""
"你可以通过字段的 :attr:`~django.db.models.Field.validators` 参数将其添加到模"
"型字段："

msgid ""
"Because values are converted to Python before validators are run, you can "
"even use the same validator with forms::"
msgstr ""
"因为在验证器运行之前，值已经被转换为 Python，你甚至可以在表单中使用相同的验证"
"器："

msgid ""
"You can also use a class with a ``__call__()`` method for more complex or "
"configurable validators. :class:`RegexValidator`, for example, uses this "
"technique. If a class-based validator is used in the :attr:`~django.db."
"models.Field.validators` model field option, you should make sure it is :ref:"
"`serializable by the migration framework <migration-serializing>` by adding :"
"ref:`deconstruct() <custom-deconstruct-method>` and ``__eq__()`` methods."
msgstr ""
"你也可以使用一个带有 ``__call__()`` 方法的类，用于更复杂或可配置的验证器。 :"
"class:`RegexValidator`，例如，使用了这种技术。如果在 :attr:`~django.db."
"models.Field.validators` 模型字段选项中使用了一个基于类的验证器，你应该通过添"
"加 :ref:`deconstruct() <custom-deconstruct-method>` 和 ``__eq__()`` 方法来确"
"保它是 :ref:`可由迁移框架序列化 <migration-serializing>`。"

msgid "How validators are run"
msgstr "如何运行验证器"

msgid ""
"See the :doc:`form validation </ref/forms/validation>` for more information "
"on how validators are run in forms, and :ref:`Validating objects <validating-"
"objects>` for how they're run in models. Note that validators will not be "
"run automatically when you save a model, but if you are using a :class:"
"`~django.forms.ModelForm`, it will run your validators on any fields that "
"are included in your form. See the :doc:`ModelForm documentation </topics/"
"forms/modelforms>` for information on how model validation interacts with "
"forms."
msgstr ""
"请参阅 :doc:`表单验证器 </ref/forms/validation>` 了解更多关于表单中如何运行验"
"证器的信息，以及 :ref:`验证对象 <validating-objects>` 了解模型中如何运行验证"
"器。请注意，当你保存模型时，验证器不会自动运行，但如果你使用的是 :class:"
"`~django.forms.ModelForm`，它将在你的表单中包含的任何字段上运行验证器。请参"
"阅 :doc:`模型表单文档 </topics/forms/modelforms>`，了解模型验证如何与表单交"
"互。"

msgid "Built-in validators"
msgstr "内置验证器"

msgid ""
"The :mod:`django.core.validators` module contains a collection of callable "
"validators for use with model and form fields. They're used internally but "
"are available for use with your own fields, too. They can be used in "
"addition to, or in lieu of custom ``field.clean()`` methods."
msgstr ""
":mod:`django.core.validators` 模块包含了一系列用于模型和表单字段的可调用验证"
"器。它们是内部使用的，但也可以用于你自己的字段。它们可以作为自定义 ``field."
"clean()`` 方法的补充，也可以代替这些方法。"

msgid "``RegexValidator``"
msgstr "``RegexValidator``"

msgid ""
"If not ``None``, overrides :attr:`regex`. Can be a regular expression string "
"or a pre-compiled regular expression."
msgstr ""
"如果不是 ``None``，则覆盖 :attr:`regex`。可以是一个正则表达式字符串或预先编译"
"的正则表达式。"

msgid "If not ``None``, overrides :attr:`.message`."
msgstr "如果不是 ``None``，则覆盖 :attr:`.message`。"

msgid "If not ``None``, overrides :attr:`code`."
msgstr "如果不是 ``None``，则覆盖 :attr:`code`。"

msgid "If not ``None``, overrides :attr:`inverse_match`."
msgstr "如果不是 ``None``，则覆盖 :attr:`inverse_match`。"

msgid ""
"If not ``None``, overrides :attr:`flags`. In that case, :attr:`regex` must "
"be a regular expression string, or :exc:`TypeError` is raised."
msgstr ""
"如果不是 ``None``，则覆盖 :attr:`flags`。在这种情况下， :attr:`regex` 必须是"
"一个正则表达式字符串，否则会引发 :exc:`TypeError`。"

msgid ""
"A :class:`RegexValidator` searches the provided ``value`` for a given "
"regular expression with :func:`re.search`. By default, raises a :exc:"
"`~django.core.exceptions.ValidationError` with :attr:`message` and :attr:"
"`code` if a match **is not** found. Its behavior can be inverted by setting :"
"attr:`inverse_match` to ``True``, in which case the :exc:`~django.core."
"exceptions.ValidationError` is raised when a match **is** found."
msgstr ""
"一个 :class:`RegexValidator` 用 :func:`re.search` 为给定的正则表达式搜索提供"
"的 ``value``。默认情况下，如果没有 **找到** 匹配的，会引发一个 :exc:`~django."
"core.exceptions.ValidationError`，包含 :attr:`message` 和 :attr:`code`。它的"
"行为可以通过将 :attr:`inverse_match` 设置为 ``True`` 来反转，在这种情况下，"
"当 **找到** 匹配的时，就会引发 :exc:`~django.core.exceptions."
"ValidationError`。"

msgid ""
"The regular expression pattern to search for within the provided ``value``, "
"using :func:`re.search`. This may be a string or a pre-compiled regular "
"expression created with :func:`re.compile`. Defaults to the empty string, "
"which will be found in every possible ``value``."
msgstr ""
"使用 :func:`re.search` 在提供的 ``value`` 中搜索的正则表达式模式。可以是一个"
"字符串，也可以是用 :func:`re.compile` 创建的预先编译的正则表达式。默认为空字"
"符串，将在所有可能的 ``value`` 中找到。"

msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Enter a valid value\"``."
msgstr ""
"当验证失败时 :exc:`~django.core.exceptions.ValidationError` 使用的错误信息。"
"默认值为 ``\"Enter a valid value\"``。"

msgid ""
"The error code used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"invalid\"``."
msgstr ""
":exc:`~django.core.exceptions.ValidationError` 验证失败时使用的错误代码。默认"
"值为 ``\"invalid\"``。"

msgid "The match mode for :attr:`regex`. Defaults to ``False``."
msgstr ":attr:`regex` 的匹配模式。默认为 ``False``。"

msgid ""
"The :ref:`regex flags <python:contents-of-module-re>` used when compiling "
"the regular expression string :attr:`regex`. If :attr:`regex` is a pre-"
"compiled regular expression, and :attr:`flags` is overridden, :exc:"
"`TypeError` is raised. Defaults to ``0``."
msgstr ""
"在编译正则表达式字符串 :attr:`regex` 时使用的 :ref:`regex flags <python:"
"contents-of-module-re>`。如果 :attr:`regex` 是一个预先编译的正则表达式，并"
"且 :attr:`flags` 被覆盖，则 :exc:`TypeError` 被引发。默认值为 ``0``。"

msgid "``EmailValidator``"
msgstr "``EmailValidator``"

msgid "If not ``None``, overrides :attr:`allowlist`."
msgstr "如果不是 ``None``，则覆盖 :attr:`allowlist`。"

msgid ""
"An :class:`EmailValidator` ensures that a value looks like an email, and "
"raises a :exc:`~django.core.exceptions.ValidationError` with :attr:`message` "
"and :attr:`code` if it doesn't. Values longer than 320 characters are always "
"considered invalid."
msgstr ""

msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Enter a valid email address\"``."
msgstr ""
"如果验证失败， :exc:`~django.core.exceptions.ValidationError` 使用的错误信"
"息。默认为 ``\"Enter a valid email address\"``。"

msgid ""
"Allowlist of email domains. By default, a regular expression (the "
"``domain_regex`` attribute) is used to validate whatever appears after the "
"``@`` sign. However, if that string appears in the ``allowlist``, this "
"validation is bypassed. If not provided, the default ``allowlist`` is "
"``['localhost']``. Other domains that don't contain a dot won't pass "
"validation, so you'd need to add them to the ``allowlist`` as necessary."
msgstr ""

msgid ""
"In older versions, values longer than 320 characters could be considered "
"valid."
msgstr ""

msgid "``URLValidator``"
msgstr "``URLValidator``"

msgid ""
"A :class:`RegexValidator` subclass that ensures a value looks like a URL, "
"and raises an error code of ``'invalid'`` if it doesn't. Values longer than :"
"attr:`max_length` characters are always considered invalid."
msgstr ""

msgid ""
"Loopback addresses and reserved IP spaces are considered valid. Literal IPv6 "
"addresses (:rfc:`3986#section-3.2.2`) and Unicode domains are both supported."
msgstr ""
"回环地址和保留的 IP 空间被认为是有效的。字面 IPv6 地址（:rfc:"
"`3986#section-3.2.2`）和 Unicode 域都支持。"

msgid ""
"In addition to the optional arguments of its parent :class:`RegexValidator` "
"class, ``URLValidator`` accepts an extra optional attribute:"
msgstr ""
"除了它的父类 :class:`RegexValidator` 的可选参数外，``URLValidator`` 还接受一"
"个额外的可选属性："

msgid ""
"URL/URI scheme list to validate against. If not provided, the default list "
"is ``['http', 'https', 'ftp', 'ftps']``. As a reference, the IANA website "
"provides a full list of `valid URI schemes`_."
msgstr ""
"要验证的 URL／URI 协议列表。如果没有提供，默认列表是 ``['http', 'https', "
"'ftp', 'ftps']``。作为参考，IANA 网站提供了一个完整的 `有效 URI 协议`_ 列表。"

msgid ""
"The maximum length of values that could be considered valid. Defaults to "
"2048 characters."
msgstr ""

msgid ""
"In older versions, values longer than 2048 characters could be considered "
"valid."
msgstr ""

msgid "``validate_email``"
msgstr "``validate_email``"

msgid "An :class:`EmailValidator` instance without any customizations."
msgstr "一个 :class:`EmailValidator` 实例，没有任何自定义。"

msgid "``validate_slug``"
msgstr "``validate_slug``"

msgid ""
"A :class:`RegexValidator` instance that ensures a value consists of only "
"letters, numbers, underscores or hyphens."
msgstr ""
"一个 :class:`RegexValidator` 实例，确保一个值只由字母、数字、下划线或连字符组"
"成。"

msgid "``validate_unicode_slug``"
msgstr "``validate_unicode_slug``"

msgid ""
"A :class:`RegexValidator` instance that ensures a value consists of only "
"Unicode letters, numbers, underscores, or hyphens."
msgstr ""
"一个 :class:`RegexValidator` 实例，确保一个值只由 Unicode 字母、数字、下划线"
"或连字符组成。"

msgid "``validate_ipv4_address``"
msgstr "``validate_ipv4_address``"

msgid ""
"A :class:`RegexValidator` instance that ensures a value looks like an IPv4 "
"address."
msgstr "一个 :class:`RegexValidator` 实例，确保一个值看起来像一个 IPv4 地址。"

msgid "``validate_ipv6_address``"
msgstr "``validate_ipv6_address``"

msgid "Uses ``django.utils.ipv6`` to check the validity of an IPv6 address."
msgstr "使用 ``django.utils.ipv6`` 来检查 IPv6 地址的有效性。"

msgid "``validate_ipv46_address``"
msgstr "``validate_ipv46_address``"

msgid ""
"Uses both ``validate_ipv4_address`` and ``validate_ipv6_address`` to ensure "
"a value is either a valid IPv4 or IPv6 address."
msgstr ""
"使用 ``validate_ipv4_address`` 和 ``validate_ipv6_address`` 来确保一个值是有"
"效的 IPv4 或 IPv6 地址。"

msgid "``validate_comma_separated_integer_list``"
msgstr "``validate_comma_separated_integer_list``"

msgid ""
"A :class:`RegexValidator` instance that ensures a value is a comma-separated "
"list of integers."
msgstr ""
"一个 :class:`RegexValidator` 实例，确保一个值是一个逗号分隔的整数列表。"

msgid "``int_list_validator``"
msgstr "``int_list_validator``"

msgid ""
"Returns a :class:`RegexValidator` instance that ensures a string consists of "
"integers separated by ``sep``. It allows negative integers when "
"``allow_negative`` is ``True``."
msgstr ""
"返回一个 :class:`RegexValidator` 实例，以确保字符串由 ``sep`` 分隔的整数组"
"成。当 ``allow_negative`` 为 ``True`` 时，它允许负整数。"

msgid "``MaxValueValidator``"
msgstr "``MaxValueValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_value'`` if ``value`` is greater than ``limit_value``, which may be a "
"callable."
msgstr ""
"如果 ``value`` 大于 ``limit_value``，会引发一个 :exc:`~django.core."
"exceptions.ValidationError`，代码为 ``'max_value'``，这可能是一个可调用对象。"

msgid "``MinValueValidator``"
msgstr "``MinValueValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_value'`` if ``value`` is less than ``limit_value``, which may be a "
"callable."
msgstr ""
"如果 ``value`` 小于 ``limit_value``，会引发一个 :exc:`~django.core."
"exceptions.ValidationError`，代码为 ``'min_value'``，这可能是一个可调用对象。"

msgid "``MaxLengthValidator``"
msgstr "``MaxLengthValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_length'`` if the length of ``value`` is greater than ``limit_value``, "
"which may be a callable."
msgstr ""
"如果 ``value`` 的长度大于 ``limit_value``，会引发一个 :exc:`~django.core."
"exceptions.ValidationError`，代码为 ``'max_length'``。"

msgid "``MinLengthValidator``"
msgstr "``MinLengthValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_length'`` if the length of ``value`` is less than ``limit_value``, "
"which may be a callable."
msgstr ""
"如果 ``value`` 小于 ``limit_value``，会引发一个 :exc:`~django.core."
"exceptions.ValidationError`，代码为 ``'min_length'``，这可能是一个可调用对"
"象。"

msgid "``DecimalValidator``"
msgstr "``DecimalValidator``"

msgid ""
"Raises :exc:`~django.core.exceptions.ValidationError` with the following "
"codes:"
msgstr "引发 :exc:`~django.core.exceptions.ValidationError`，代码如下："

msgid "``'max_digits'`` if the number of digits is larger than ``max_digits``."
msgstr "``'max_digits'``，如果数字数量大于 ``max_digits``。"

msgid ""
"``'max_decimal_places'`` if the number of decimals is larger than "
"``decimal_places``."
msgstr "``'max_decimal_places'``，如果小数的数量大于 ``decimal_places``。"

msgid ""
"``'max_whole_digits'`` if the number of whole digits is larger than the "
"difference between ``max_digits`` and ``decimal_places``."
msgstr ""
"``'max_whole_digits'``，如果整数位数大于 ``max_digits`` 和 "
"``decimal_places`` 之间的差值。"

msgid "``FileExtensionValidator``"
msgstr "``FileExtensionValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'invalid_extension'`` if the extension of ``value.name`` (``value`` is a :"
"class:`~django.core.files.File`) isn't found in ``allowed_extensions``. The "
"extension is compared case-insensitively with ``allowed_extensions``."
msgstr ""
"如果 ``value.name`` （``value`` 是一个 :class:`~django.core.files.File``）的"
"扩展名没有在 ``allowed_extensions`` 中找到，会引发一个 :exc:`~django.core."
"exceptions.ValidationError`，代码为 ``'invalid_extension'``。该扩展名将与 "
"``allowed_extensions`` 进行不区分大小写的比较。"

msgid ""
"Don't rely on validation of the file extension to determine a file's type. "
"Files can be renamed to have any extension no matter what data they contain."
msgstr ""
"不要依赖文件扩展名的验证来确定文件的类型。文件可以重命名为任何扩展名，无论它"
"们包含什么数据。"

msgid "``validate_image_file_extension``"
msgstr "``validate_image_file_extension``"

msgid ""
"Uses Pillow to ensure that ``value.name`` (``value`` is a :class:`~django."
"core.files.File`) has `a valid image extension <https://pillow.readthedocs."
"io/en/latest/handbook/image-file-formats.html>`_."
msgstr ""
"使用 Pillow 确保 ``value.name`` （``value`` 是一个 :class:`~django.core."
"files.File`）具有 `一个有效的图像扩展名 <https://pillow.readthedocs.io/en/"
"latest/handbook/image-file-formats.html>`_ 。"

msgid "``ProhibitNullCharactersValidator``"
msgstr "``ProhibitNullCharactersValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` if ``str(value)`` "
"contains one or more null characters (``'\\x00'``)."
msgstr ""

msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Null characters are not allowed.\"``."
msgstr ""
"如果验证失败， :exc:`~django.core.exceptions.ValidationError` 使用的错误信"
"息。默认值为 ``\"Null characters are not allowed.\"``。"

msgid ""
"The error code used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"null_characters_not_allowed\"``."
msgstr ""
"当验证失败时 :exc:`~django.core.exceptions.ValidationError` 所使用的错误代"
"码。默认为 ``\"null_characters_not_allowed\"``。"

msgid "``StepValueValidator``"
msgstr "``StepValueValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'step_size'`` if ``value`` is not an integral multiple of ``limit_value``, "
"which can be a float, integer or decimal value or a callable."
msgstr ""

msgid "Built-in Views"
msgstr "内置视图"

msgid ""
"Several of Django's built-in views are documented in :doc:`/topics/http/"
"views` as well as elsewhere in the documentation."
msgstr ""
"Django 内置的几个视图在 :doc:`/topics/http/views` 以及文档的其他地方都有记"
"载。"

msgid "Serving files in development"
msgstr "为开发中的文件提供服务"

msgid ""
"There may be files other than your project's static assets that, for "
"convenience, you'd like to have Django serve for you in local development. "
"The :func:`~django.views.static.serve` view can be used to serve any "
"directory you give it. (This view is **not** hardened for production use and "
"should be used only as a development aid; you should serve these files in "
"production using a real front-end web server)."
msgstr ""
"除了你的项目的静态资源外，可能还有一些其他的文件，为了方便，你想让 Django 在"
"本地开发中为你提供服务。:func:`~django.views.static.serve` 视图可以用来为你给"
"它的任何目录提供服务。（这个视图并 **没有** 强到用于生产，只应该作为开发辅助"
"工具，你应该在生产中使用真正的前端 Web 服务器来服务这些文件）。"

msgid ""
"The most likely example is user-uploaded content in :setting:`MEDIA_ROOT`. "
"``django.contrib.staticfiles`` is intended for static assets and has no "
"built-in handling for user-uploaded files, but you can have Django serve "
"your :setting:`MEDIA_ROOT` by appending something like this to your URLconf::"
msgstr ""
"最有可能的例子是用户在 :setting:`MEDIA_ROOT` 中上传的内容。``django.contrib."
"staticfiles`` 是为静态资源设计的，并没有内置处理用户上传文件的功能，但是你可"
"以通过在 URLconf 中添加这样的内容，让 Django 为你的 :setting:`MEDIA_ROOT` 服"
"务："

msgid ""
"Note, the snippet assumes your :setting:`MEDIA_URL` has a value of "
"``'media/'``. This will call the :func:`~django.views.static.serve` view, "
"passing in the path from the URLconf and the (required) ``document_root`` "
"parameter."
msgstr ""

msgid ""
"Since it can become a bit cumbersome to define this URL pattern, Django "
"ships with a small URL helper function :func:`~django.conf.urls.static."
"static` that takes as parameters the prefix such as :setting:`MEDIA_URL` and "
"a dotted path to a view, such as ``'django.views.static.serve'``. Any other "
"function parameter will be transparently passed to the view."
msgstr ""
"由于定义这种 URL 模式可能会变得有点麻烦，Django 提供了一个小的 URL 辅助函数 :"
"func:`~django.conf.urls.static.static`，它的参数是前缀，如 :setting:"
"`MEDIA_URL` 和一个指向视图的点分隔路径，如 ``'django.views.static."
"service'``。其他任何函数参数都将透明地传递给视图。"

msgid "Error views"
msgstr "错误视图"

msgid ""
"Django comes with a few views by default for handling HTTP errors. To "
"override these with your own custom views, see :ref:`customizing-error-"
"views`."
msgstr ""
"Django 默认提供了一些处理 HTTP 错误的视图。要用你自己的自定义视图覆盖这些视"
"图，请参见 :ref:`customizing-error-views`。"

msgid "The 404 (page not found) view"
msgstr "404（页面没有找到)）视图"

msgid ""
"When you raise :exc:`~django.http.Http404` from within a view, Django loads "
"a special view devoted to handling 404 errors. By default, it's the view :"
"func:`django.views.defaults.page_not_found`, which either produces a \"Not "
"Found\" message or loads and renders the template ``404.html`` if you "
"created it in your root template directory."
msgstr ""
"当你在视图中提出 :exc:`~django.http.Http404` 时，Django 会加载一个专门处理 "
"404 错误的视图。默认情况下，它是视图 :func:`django.views.defaults."
"page_not_found`，如果你在根模板目录下创建了模板 `404.html``，那么它要么产"
"生“Not Found”消息，要么加载并渲染它。"

msgid ""
"The default 404 view will pass two variables to the template: "
"``request_path``, which is the URL that resulted in the error, and "
"``exception``, which is a useful representation of the exception that "
"triggered the view (e.g. containing any message passed to a specific "
"``Http404`` instance)."
msgstr ""
"默认的 404 视图将向模板传递两个变量：``request_path``，这是导致错误的 URL，"
"和 ``exception``，这是触发视图的异常的有用表示（例如，包含传递给特定 "
"``Http404`` 实例的任何消息）。"

msgid "Three things to note about 404 views:"
msgstr "关于 404 视图需要注意的三个要点："

msgid ""
"The 404 view is also called if Django doesn't find a match after checking "
"every regular expression in the URLconf."
msgstr ""
"如果 Django 在检查了 URLconf 中的每一个正则表达式后都没有找到匹配的结果，也会"
"调用 404 视图。"

msgid ""
"The 404 view is passed a :class:`~django.template.RequestContext` and will "
"have access to variables supplied by your template context processors (e.g. "
"``MEDIA_URL``)."
msgstr ""
"404 视图被传递了一个 :class:`~django.template.RequestContext`，并且将可以访问"
"由你的模板上下文处理器提供的变量（例如 ``MEDIA_URL``）。"

msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"404 view will never be used, and your URLconf will be displayed instead, "
"with some debug information."
msgstr ""
"如果 :setting:`DEBUG` 设置为 ``True`` （在你的配置模块中），那么你的 404 视图"
"将永远不会被使用，而你的 URLconf 将被显示，并附带一些调试信息。"

msgid "The 500 (server error) view"
msgstr "500（服务器错误）视图"

msgid ""
"Similarly, Django executes special-case behavior in the case of runtime "
"errors in view code. If a view results in an exception, Django will, by "
"default, call the view ``django.views.defaults.server_error``, which either "
"produces a \"Server Error\" message or loads and renders the template ``500."
"html`` if you created it in your root template directory."
msgstr ""
"同样，在视图代码出现运行时错误的情况下，Django 也会执行特定行为。如果一个视图"
"出现异常，Django 默认会调用视图 ``django.views.defaults.server_error``，如果"
"你在根模板目录下创建了模板 ``500.html``，则会产生一个“Server Error”消息或加载"
"并渲染模板 ``500.html``。"

msgid ""
"The default 500 view passes no variables to the ``500.html`` template and is "
"rendered with an empty ``Context`` to lessen the chance of additional errors."
msgstr ""
"默认的 500 视图不向 ``500.html`` 模板传递任何变量，并以一个空的 ``Context`` "
"呈现，以减少额外错误的机会。"

msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"500 view will never be used, and the traceback will be displayed instead, "
"with some debug information."
msgstr ""
"如果 :setting:`DEBUG` 被设置为 ``True`` （在你的配置模块中），那么你的 500 视"
"图将永远不会被使用，而会显示一些调试信息的回溯。"

msgid "The 403 (HTTP Forbidden) view"
msgstr "403（HTTP 禁止）视图"

msgid ""
"In the same vein as the 404 and 500 views, Django has a view to handle 403 "
"Forbidden errors. If a view results in a 403 exception then Django will, by "
"default, call the view ``django.views.defaults.permission_denied``."
msgstr ""
"与 404 和 500 视图一样，Django 也有一个视图来处理 403 禁止错误。如果一个视图"
"出现 403 异常，那么 Django 默认会调用视图 ``django.views.defaults."
"permission_denied``。"

msgid ""
"This view loads and renders the template ``403.html`` in your root template "
"directory, or if this file does not exist, instead serves the text \"403 "
"Forbidden\", as per :rfc:`9110#section-15.5.4` (the HTTP 1.1 Specification). "
"The template context contains ``exception``, which is the string "
"representation of the exception that triggered the view."
msgstr ""

msgid ""
"``django.views.defaults.permission_denied`` is triggered by a :exc:`~django."
"core.exceptions.PermissionDenied` exception. To deny access in a view you "
"can use code like this::"
msgstr ""
"``django.views.defaults.permission_denied`` 由一个 :exc:`~django.core."
"exceptions.PermissionDenied` 异常触发。要拒绝一个视图的访问，你可以使用这样的"
"代码："

msgid "The 400 (bad request) view"
msgstr "400（错误请求）视图"

msgid ""
"When a :exc:`~django.core.exceptions.SuspiciousOperation` is raised in "
"Django, it may be handled by a component of Django (for example resetting "
"the session data). If not specifically handled, Django will consider the "
"current request a 'bad request' instead of a server error."
msgstr ""
"当 Django 中发生了一个 :exc:`~django.core.exceptions.SuspiciousOperation` "
"时，可能会被 Django 的某个组件处理（比如重置会话数据）。如果没有特别处理，"
"Django 会将当前请求视为“bad request”而不是服务器错误。"

msgid ""
"``django.views.defaults.bad_request``, is otherwise very similar to the "
"``server_error`` view, but returns with the status code 400 indicating that "
"the error condition was the result of a client operation. By default, "
"nothing related to the exception that triggered the view is passed to the "
"template context, as the exception message might contain sensitive "
"information like filesystem paths."
msgstr ""
"``django.views.defaults.bad_request``，在其他方面与 ``server_error`` 视图非常"
"相似，但返回的状态码为 400，表示错误条件是由客户端操作造成的。默认情况下，与"
"触发该视图的异常无关的任何内容都不会传递给模板上下文，因为异常消息可能包含文"
"件系统路径等敏感信息。"

msgid ""
"``bad_request`` views are also only used when :setting:`DEBUG` is ``False``."
msgstr ""
"``bad_request`` 视图也只有在 :setting:`DEBUG`` 为 ``False`` 时才能使用。"
