# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# Dogify <595572594@qq.com>, 2018
# bing zhou <1996944@qq.com>, 2018
# Blg Mengde <kid.blg@gmail.com>, 2020
# FSSlc <fsslc235@gmail.com>, 2020
# Kevin Sze <leiarix@gmail.com>, 2014
# Le Yang <youngleocn@qq.com>, 2019
# mrgaolei <gaolei@liheran.com>, 2019
# orange shy <mr.fatter@qq.com>, 2021
# Sean Chen <seanchen1023@gmail.com>, 2020
# Shellbye bai <shellbye.com@gmail.com>, 2018
# Tylor Caesar <caesartylor@gmail.com>, 2023
# Veoco <one@nomox.cn>, 2020-2021,2023-2024
# weizhi ao, 2024
# Wenqing Xue <marsxue0221@gmail.com>, 2019
# Xiang Yu <bupt.aswmtjdsj@gmail.com>, 2014
# Xin Qi <georgechii@outlook.com>, 2021
# yhliyr <lokidri@outlook.com>, 2018
# Imken Luo, 2022
# Zhibo Zhang <805960083@qq.com>, 2019
# 传飞 丁 <victorting_2015@aliyun.com>, 2019
# 锟斤拷 <xiake21x@qq.com>, 2016
# 小黑, 2023
# 得鑫 李 <lidexin911@126.com>, 2018
# Dogify <595572594@qq.com>, 2018
# 高乐喆 <gaolezhe@outlook.com>, 2024
# 龙虎义, 2022
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 10:19-0500\n"
"PO-Revision-Date: 2013-04-02 20:02+0000\n"
"Last-Translator: Veoco <one@nomox.cn>, 2020-2021,2023-2024\n"
"Language-Team: Chinese (China) (http://app.transifex.com/django/django-docs/"
"language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Django version 0.95 release notes"
msgstr "Django 0.95 版本发布说明"

msgid "Welcome to the Django 0.95 release."
msgstr "欢迎来到 Django 0.95 版本"

msgid ""
"This represents a significant advance in Django development since the 0.91 "
"release in January 2006. The details of every change in this release would "
"be too extensive to list in full, but a summary is presented below."
msgstr ""
"这表明了一个从 2006 年 1 月发布 0.91 版本以来 Django 部署过程的一个显著的进"
"步。将这次发版的每一个改动的细节都详细的罗列出来将会占用太多的版面，但是下面"
"有一个简短的介绍总结。"

msgid "Suitability and API stability"
msgstr "适用性和 API 的稳定性"

msgid ""
"This release is intended to provide a stable reference point for developers "
"wanting to work on production-level applications that use Django."
msgstr ""
"这个发行版的目的是为想要在生产级应用中使用 Django 的开发者提供一个稳定的参考"
"点。"

msgid ""
"However, it's not the 1.0 release, and we'll be introducing further changes "
"before 1.0. For a clear look at which areas of the framework will change "
"(and which ones will *not* change) before 1.0, see the ``api-stability.txt`` "
"file, which lives in the docs/ directory of the distribution."
msgstr ""
"然而，这并不是 1.0 版本，我们将在 1.0 之前引入更多变化。要想清楚地了解在 1.0 "
"之前框架的哪些地方会发生变化（哪些地方不会发生变化），请看 ``api-stability."
"txt`` 文件，它位于发行版的 docs/ 目录中。"

msgid ""
"You may have a need to use some of the features that are marked as \"subject "
"to API change\" in that document, but that's OK with us as long as it's OK "
"with you, and as long as you understand APIs may change in the future."
msgstr ""
"不可能需要使用一些在该文档中被标记为 “subject to API change” 的功能，但只要你"
"觉得没问题，我们也没问题，只要你理解 API 将来可能会改变。"

msgid ""
"Fortunately, most of Django's core APIs won't be changing before version "
"1.0. There likely won't be as big of a change between 0.95 and 1.0 versions "
"as there was between 0.91 and 0.95."
msgstr ""
"幸运的是，在 1.0 版本之前，Django 的大部分核心 API 都不会发生变化。0.95 和 "
"1.0版本之间可能不会像 0.91 和 0.95 之间有那么大的变化。"

msgid "Changes and new features"
msgstr "改变及新特性"

msgid ""
"The major changes in this release (for developers currently using the 0.91 "
"release) are a result of merging the 'magic-removal' branch of development. "
"This branch removed a number of constraints in the way Django code had to be "
"written that were a consequence of decisions made in the early days of "
"Django, prior to its open-source release. It's now possible to write more "
"natural, Pythonic code that works as expected, and there's less \"black "
"magic\" happening behind the scenes."
msgstr ""
"这个版本的主要变化（对于目前使用 0.91 版本的开发者来说）是合并了 'magic-"
"removal' 开发分支的结果。这个分支删除了 Django 代码编写方式中的一些限制因素，"
"这些限制因素是 Django 在开源发布之前的早期决定的结果。现在，我们可以写出更自"
"然、更符合预期的 Pythonic 代码，而且幕后发生的“黑魔法”也少了。"

msgid ""
"Aside from that, another main theme of this release is a dramatic increase "
"in usability. We've made countless improvements in error messages, "
"documentation, etc., to improve developers' quality of life."
msgstr ""
"除此之外，此版本的另一个主题是可用性的显着增加。 我们在错误消息、文档等方面做"
"了无数改进，以提高开发人员的生活质量。"

msgid "The new features and changes introduced in 0.95 include:"
msgstr "在 0.95 版本中引入的新特性和变更包括："

msgid ""
"Django now uses a more consistent and natural filtering interface for "
"retrieving objects from the database."
msgstr "Django 现在使用更一致和自然的过滤接口来从数据库中检索对象。"

msgid ""
"User-defined models, functions and constants now appear in the module "
"namespace they were defined in. (Previously everything was magically "
"transferred to the ``django.models.*`` namespace.)"
msgstr ""
"用户定义的模型、函数和常量现在出现在它们所定义的模块命名空间中。（以前所有的"
"东西都被神奇地转移到 ``django.models.*`` 的命名空间。）"

msgid ""
"Some optional applications, such as the FlatPage, Sites and Redirects apps, "
"have been decoupled and moved into ``django.contrib``. If you don't want to "
"use these applications, you no longer have to install their database tables."
msgstr ""
"一些可选的应用程序，如简单页面、站点和重定向应用，已经解耦并移入 ``django."
"contrib``。 如果您不想使用这些应用程序，则不必再安装其数据库表中。"

msgid "Django now has support for managing database transactions."
msgstr "Django 现在支持管理数据库事务"

msgid ""
"We've added the ability to write custom authentication and authorization "
"backends for authenticating users against alternate systems, such as LDAP."
msgstr ""
"我们添加了编写自定义身份验证和授权后端的功能，以便针对备用系统（如 LDAP）对用"
"户进行身份验证。"

msgid ""
"We've made it easier to add custom table-level functions to models, through "
"a new \"Manager\" API."
msgstr "通过新的 “Manager” API，我们可以更轻松地将自定义表级功能添加到模型中。"

msgid ""
"It's now possible to use Django without a database. This simply means that "
"the framework no longer requires you to have a working database set up just "
"to serve dynamic pages. In other words, you can just use URLconfs/views on "
"their own. Previously, the framework required that a database be configured, "
"regardless of whether you actually used it."
msgstr ""
"现在可以在没有数据库的情况下使用 Django 了。这意味着框架不再需要你有一个工作"
"的数据库来提供动态页面。换句话说，你可以只使用 URLconfs／views 本身。以前，该"
"框架要求配置数据库，而不管你是否真的使用它。"

msgid ""
"It's now more explicit and natural to override ``save()`` and ``delete()`` "
"methods on models, rather than needing to hook into the ``pre_save()`` and "
"``post_save()`` method hooks."
msgstr ""
"现在，在模型上覆盖 save() 和 delete() 方法更加明确和自然，而不需要挂载 "
"pre_save() 和 post_save() 方法的钩子。"

msgid ""
"Individual pieces of the framework now can be configured without requiring "
"the setting of an environment variable. This permits use of, for example, "
"the Django templating system inside other applications."
msgstr ""
"现在，框架的各个部分可以在不需要设置环境变量的情况下进行配置。这允许在其他应"
"用程序中使用 Django 模板系统。"

msgid ""
"More and more parts of the framework have been internationalized, as we've "
"expanded internationalization (i18n) support. The Django codebase, including "
"code and templates, has now been translated, at least in part, into 31 "
"languages. From Arabic to Chinese to Hungarian to Welsh, it is now possible "
"to use Django's admin site in your native language."
msgstr ""
"随着我们扩展国际化（i18n）支持，该框架的越来越多部分已经实现了国际化。 "
"Django 代码库（包括代码和模板）现已完成翻译，至少支持部分语言，多达 31种。支"
"持了阿拉伯语，中文，匈牙利语，以及威尔士语，现在以母语使用 Django 的管理站"
"点。"

msgid ""
"The number of changes required to port from 0.91-compatible code to the 0.95 "
"code base are significant in some cases. However, they are, for the most "
"part, reasonably routine and only need to be done once. A list of the "
"necessary changes is described in the `Removing The Magic`_ wiki page. There "
"is also an easy checklist_ for reference when undertaking the porting "
"operation."
msgstr ""
"在某些情况下，从 0.91 兼容代码移植到 0.95 代码库所需的改动数量很大。然而，在"
"大多数情况下，这些改动都是合理的常规改动，只需要做一次。在 `Removing The "
"Magic`_ wiki 页面中描述了一个必要的更改列表。还有一个简单的 checklist_ ，供进"
"行移植操作时参考。"

msgid "Problem reports and getting help"
msgstr "报告问题以及获取帮助"

msgid ""
"Need help resolving a problem with Django? The documentation in the "
"distribution is also available :doc:`online </index>` at the `Django "
"website`_. The :doc:`FAQ </faq/index>` document is especially recommended, "
"as it contains a number of issues that come up time and again."
msgstr ""
"需要帮助来解决 Django 相关的问题吗？在发行包中的文档也可以在 `Django 官网`_ "
"中的 :doc:`在线文档</index>` 处找到。其中 :doc:`FAQ </faq/index>` 文档尤为推"
"荐，因为它包含那些针对时不时会出现问题的解决方法。"

msgid ""
"For more personalized help, the `django-users`_ mailing list is a very "
"active list, with more than 2,000 subscribers who can help you solve any "
"sort of Django problem. We recommend you search the archives first, though, "
"because many common questions appear with some regularity, and any "
"particular problem may already have been answered."
msgstr ""
"对于更个性化的帮助，`django-users`_ 邮件列表是一个活跃的邮件列表，它有超过 "
"2000 个订阅者，他们可以帮助你解决 Django 的各类问题。我们推荐你首先搜索查看以"
"前的存档，因为很多通用问题经常出现多次，而那些特定问题可能也已经被回答了。"

msgid ""
"Finally, for those who prefer the more immediate feedback offered by IRC, "
"there's a ``#django`` channel on ``irc.libera.chat`` that is regularly "
"populated by Django users and developers from around the world. Friendly "
"people are usually available at any hour of the day -- to help, or just to "
"chat."
msgstr ""
"最后，对于那些愿意更快通过IRC提供反馈的人们，在 ``irc.libera.chat`` 上有一个 "
"``#django`` 频道，是由Django用户和全世界开发者们发起的。友善的人们常常在一天"
"中可用的任何时间里去帮助频道里的人，或者就是聊一聊天。"

msgid "Thanks for using Django!"
msgstr "感谢使用 Django！"

msgid "The Django Team July 2006"
msgstr "Django 项目始于 2006 年 7 月"

msgid "Django version 0.96 release notes"
msgstr "Django 0.96 版本发行说明"

msgid "Welcome to Django 0.96!"
msgstr "欢迎来到 Django 0.96 版本！"

msgid ""
"The primary goal for 0.96 is a cleanup and stabilization of the features "
"introduced in 0.95. There have been a few small `backwards-incompatible "
"changes`_ since 0.95, but the upgrade process should be fairly simple and "
"should not require major changes to existing applications."
msgstr ""
"Django 0.96 版本的主要目标是清理和稳定由 0.95 版本引入的特性。自从 0.95 过"
"后，有很多小的 `向后兼容变化`_，但升级过程应该足够简单，且针对已有的应用不应"
"该需要重大的更改。"

msgid ""
"However, we're also releasing 0.96 now because we have a set of backwards-"
"incompatible changes scheduled for the near future. Once completed, they "
"will involve some code changes for application developers, so we recommend "
"that you stick with Django 0.96 until the next official release; then you'll "
"be able to upgrade in one step instead of needing to make incremental "
"changes to keep up with the development version of Django."
msgstr ""
"不过，我们现在发布 0.96 版本也是因为我们计划在不久的将来进行一系列向后不兼容"
"的改动。一旦完成，它们将涉及到应用程序开发人员的一些代码变化，所以我们建议你"
"坚持使用 Django 0.96，直到下一个正式发布；然后你就可以一步到位地升级，而不是"
"需要做增量的变化来跟上 Django 的开发版本。"

msgid "Backwards-incompatible changes"
msgstr "不向后兼容的变更"

msgid ""
"The following changes may require you to update your code when you switch "
"from 0.95 to 0.96:"
msgstr "当你从 0.95 切换到 0.96 时，以下更改可能需要你更新代码："

msgid "``MySQLdb`` version requirement"
msgstr "``MySQLdb`` 版本需求"

msgid ""
"Due to a bug in older versions of the ``MySQLdb`` Python module (which "
"Django uses to connect to MySQL databases), Django's MySQL backend now "
"requires version 1.2.1p2 or higher of ``MySQLdb``, and will raise exceptions "
"if you attempt to use an older version."
msgstr ""
"由于 ``MySQLdb`` Python 模块（Django 用来连接 MySQL 数据库）旧版本的一个漏"
"洞，Django 的 MySQL 后端现在需要 1.2.1p2 或更高版本的 ``MySQLdb``，如果你试图"
"使用旧版本，会引发异常。"

msgid ""
"If you're currently unable to upgrade your copy of ``MySQLdb`` to meet this "
"requirement, a separate, backwards-compatible backend, called \"mysql_old\", "
"has been added to Django. To use this backend, change the "
"``DATABASE_ENGINE`` setting in your Django settings file from this::"
msgstr ""
"如果你目前无法升级你的 ``MySQLdb`` 来满足这个要求，一个单独的，向后兼容的后"
"端，叫做 “mysql_old”，已经被添加到 Django 中。要使用这个后端，将 Django 配置"
"文件中的 ``DATABASE_ENGINE`` 配置从这个："

msgid "to this::"
msgstr "改成这个："

msgid ""
"However, we strongly encourage MySQL users to upgrade to a more recent "
"version of ``MySQLdb`` as soon as possible, The \"mysql_old\" backend is "
"provided only to ease this transition, and is considered deprecated; aside "
"from any necessary security fixes, it will not be actively maintained, and "
"it will be removed in a future release of Django."
msgstr ""
"然而，我们强烈建议 MySQL 用户尽快升级到最新版本的 ``MySQLdb``，提供 "
"“mysql_old” 后端只是为了方便过渡，并且被认为是废弃的；除了任何必要的安全修"
"复，它将不会被积极维护，并将在未来的 Django 版本中删除。"

msgid ""
"Also, note that some features, like the new ``DATABASE_OPTIONS`` setting "
"(see the :doc:`databases documentation </ref/databases>` for details), are "
"only available on the \"mysql\" backend, and will not be made available for "
"\"mysql_old\"."
msgstr ""
"另外，需要注意的是，有些功能，比如新的 ``DATABASE_OPTIONS`` 配置（详见 :doc:`"
"数据库文档 </ref/databases>` ），只在 “mysql” 后端可用，不会对 “mysql_old” 提"
"供。"

msgid "Database constraint names changed"
msgstr "数据库约束名称已更改"

msgid ""
"The format of the constraint names Django generates for foreign key "
"references have changed slightly. These names are generally only used when "
"it is not possible to put the reference directly on the affected column, so "
"they are not always visible."
msgstr ""
"Django 为外键引用生成的约束名称的格式略有改变。这些名称一般只在无法将引用直接"
"放在受影响的列上时才会使用，所以它们并不总是可见的。"

msgid ""
"The effect of this change is that running ``manage.py reset`` and similar "
"commands against an existing database may generate SQL with the new form of "
"constraint name, while the database itself contains constraints named in the "
"old form; this will cause the database server to raise an error message "
"about modifying nonexistent constraints."
msgstr ""
"这一变化的影响是，对现有数据库运行 ``manage.py reset`` 和类似的命令，可能会生"
"成新形式的约束名称的 SQL，而数据库本身却包含旧形式的约束；这将导致数据库服务"
"器发出关于修改不存在的约束的错误信息。"

msgid "If you need to work around this, there are two methods available:"
msgstr "若你需要解决此问题，那将有两种方法可用："

msgid ""
"Redirect the output of ``manage.py`` to a file, and edit the generated SQL "
"to use the correct constraint names before executing it."
msgstr ""
"将 ``manage.py`` 的输出重定向到一个文件中，并编辑生成的 SQL，在执行前使用正确"
"的约束名。"

msgid ""
"Examine the output of ``manage.py sqlall`` to see the new-style constraint "
"names, and use that as a guide to rename existing constraints in your "
"database."
msgstr ""
"检查 ``manage.py sqlall`` 的输出，看看新样式的约束名称，并以此为指导重命名数"
"据库中的现有约束。"

msgid "Name changes in ``manage.py``"
msgstr "``manage.py`` 中的名称改变"

msgid ""
"A few of the options to ``manage.py`` have changed with the addition of "
"fixture support:"
msgstr "``manage.py`` 的一些选项在增加了固定数据支持后有所改变。"

msgid ""
"There are new ``dumpdata`` and ``loaddata`` commands which, as you might "
"expect, will dump and load data to/from the database. These commands can "
"operate against any of Django's supported serialization formats."
msgstr ""
"有新的 ``dumpdata`` 和 ``loaddata`` 命令，正如你所期望的那样，这些命令将用来"
"从数据库中导出和导入数据。这些命令可以对任何 Django 支持的序列化格式进行操"
"作。"

msgid ""
"The ``sqlinitialdata`` command has been renamed to ``sqlcustom`` to "
"emphasize that ``loaddata`` should be used for data (and ``sqlcustom`` for "
"other custom SQL -- views, stored procedures, etc.)."
msgstr ""
"``sqlinitialdata`` 命令已改名为 ``sqlcustom``，以强调 ``loaddata`` 应用于数据"
"（``sqlcustom`` 用于其他自定义 SQL ——视图、存储过程等）。"

msgid "The vestigial ``install`` command has been removed. Use ``syncdb``."
msgstr "``install`` 命令已被删除。使用 ``syncdb``。"

msgid "Backslash escaping changed"
msgstr "反斜杠转义的改变"

msgid ""
"The Django database API now escapes backslashes given as query parameters. "
"If you have any database API code that matches backslashes, and it was "
"working before (despite the lack of escaping), you'll have to change your "
"code to \"unescape\" the slashes one level."
msgstr ""
"Django 数据库 API 现在可以转义作为查询参数的反斜线。如果你有任何匹配反斜线的"
"数据库 API 代码，并且之前还能正常工作（尽管没有转义），你必须修改你的代码，将"
"斜线“取消转义”一个级别。"

msgid "For example, this used to work::"
msgstr "例如，下面的查询在以前可以生效："

msgid "The above is now incorrect, and should be rewritten as::"
msgstr "但在现在上面的命令不再正确了，并且应该重写为下面这样："

msgid "Removed ENABLE_PSYCO setting"
msgstr "被移除的 ENABLE_PSYCO 配置"

msgid ""
"The ``ENABLE_PSYCO`` setting no longer exists. If your settings file "
"includes ``ENABLE_PSYCO`` it will have no effect; to use Psyco_, we "
"recommend writing a middleware class to activate it."
msgstr ""
"``ENABLE_PSYCO`` 设定将不再存在。假如你的设定文件包括 ``ENABLE_PSYCO`` ，那么"
"它将不再生效。为了使用 Psyco_，我们建议写一个中间件类来激活它。"

msgid "What's new in 0.96?"
msgstr "0.96 新特性"

msgid ""
"This revision represents over a thousand source commits and over four "
"hundred bug fixes, so we can't possibly catalog all the changes. Here, we "
"describe the most notable changes in this release."
msgstr ""
"本次版本号的更改代表有超过 1000 次代码提交和超过 400 次漏洞修复，所以我们不能"
"详细罗列所有的变化。在这里我们将描述本次发布中最为重要的变化。"

msgid "New forms library"
msgstr "新的表单库"

msgid ""
"``django.newforms`` is Django's new form-handling library. It's a "
"replacement for ``django.forms``, the old form/manipulator/validation "
"framework.  Both APIs are available in 0.96, but over the next two releases "
"we plan to switch completely to the new forms system, and deprecate and "
"remove the old system."
msgstr ""
"``django.newforms`` 是 Django 新的表单处理库。它是 ``django.forms`` 这个旧的"
"表单／操作器／验证框架的一个替代。这两个 API 在 0.96 版本中都可用，但在接下来"
"的两个版本发布中，我们计划完全切换到新的表单系统，并标记失效和移除旧的系统。"

msgid "There are three elements to this transition:"
msgstr "针对这个的过渡将分三步："

msgid ""
"We've copied the current ``django.forms`` to ``django.oldforms``. This "
"allows you to upgrade your code *now* rather than waiting for the backwards-"
"incompatible change and rushing to fix your code after the fact.  Just "
"change your import statements like this::"
msgstr ""
"我们已经将当前的 ``django.forms`` 复制到了 ``django.oldforms``。这将允许你 *"
"现在* 升级你的代码而不是等待向后不兼容的改变，然后匆忙修复你的代码。只需要像"
"下面这样更改你的 import 声明："

msgid ""
"The next official release of Django will move the current ``django."
"newforms`` to ``django.forms``. This will be a backwards-incompatible "
"change, and anyone still using the old version of ``django.forms`` at that "
"time will need to change their import statements as described above."
msgstr ""
"Django 的下一个正式版本将把当前的 ``django.newforms`` 移到 ``django.forms``。"
"这将是一个向后不兼容的变化，届时还在使用旧版 ``django.forms`` 的人将需要如上"
"所述修改他们的导入语句。"

msgid "The next release after that will completely remove ``django.oldforms``."
msgstr "在那之后的下一个发布版本将完全移除 ``django.oldforms``。"

msgid ""
"Although the ``newforms`` library will continue to evolve, it's ready for "
"use for most common cases. We recommend that anyone new to form handling "
"skip the old forms system and start with the new."
msgstr ""
"尽管 ``newforms`` 将会继续演进，但它足以应付大多数场景。我们建议任何新接触表"
"单处理的人员跳过旧的表单系统而直接使用新的表单系统。"

msgid ""
"For more information about ``django.newforms``, read the :doc:`newforms "
"documentation </topics/forms/index>`."
msgstr ""
"想了解更多关于 ``django.newforms`` 的信息，请阅读 :doc:`新表单 </topics/"
"forms/index>`。"

msgid "URLconf improvements"
msgstr "URLconf 的改进"

msgid ""
"You can now use any callable as the callback in URLconfs (previously, only "
"strings that referred to callables were allowed). This allows a much more "
"natural use of URLconfs. For example, this URLconf::"
msgstr ""
"现在，你可以在 URLconfs 中使用任何可调用对象作为回调内容（以前，只允许使用引"
"用可调用对象的字符串）。这使得 URLconfs 的使用更加自然。例如，这个 URLconf："

msgid "can now be rewritten as::"
msgstr "可以被重写为："

msgid ""
"One useful application of this can be seen when using decorators; this "
"change allows you to apply decorators to views *in your URLconf*. Thus, you "
"can make a generic view require login very easily::"
msgstr ""
"一个有用的应用程序可以在使用装饰器时看到；这个变化允许你将装饰器应用到 *你的 "
"URLconf* 中的视图。因此，你可以很容易地使一个通用的视图需要登录："

msgid ""
"Note that both syntaxes (strings and callables) are valid, and will continue "
"to be valid for the foreseeable future."
msgstr ""
"请注意，这两种语法（字符串和可调用对象）都是有效的，并且在可预见的未来将继续"
"有效。"

msgid "The test framework"
msgstr "测试框架"

msgid ""
"Django now includes a test framework so you can start transmuting fear into "
"boredom (with apologies to Kent Beck). You can write tests based on :mod:"
"`doctest` or :mod:`unittest` and test your views with a simple test client."
msgstr ""
"Django 现在包含了一个测试框架，所以你可以开始将恐惧转化为无聊（向 Kent Beck "
"道歉）。你可以基于 :mod:`doctest` 或 :mod:`unittest` 来编写测试，并用一个简单"
"的测试客户端来测试你的视图。"

msgid ""
"There is also new support for \"fixtures\" -- initial data, stored in any of "
"the supported :doc:`serialization formats </topics/serialization>`, that "
"will be loaded into your database at the start of your tests. This makes "
"testing with real data much easier."
msgstr ""
"还有对 “固定数据” 的新支持——初始数据，存储在任何支持的 :doc:`序列化格式 </"
"topics/serialization>` 中，将在测试开始时加载到你的数据库中。这使得使用真实数"
"据进行测试变得更加容易。"

msgid ""
"See :doc:`the testing documentation </topics/testing/index>` for the full "
"details."
msgstr "详见 :doc:`测试文档 </topics/testing/index>`。"

msgid "Improvements to the admin interface"
msgstr "管理界面的改进"

msgid ""
"A small change, but a very nice one: dedicated views for adding and updating "
"users have been added to the admin interface, so you no longer need to worry "
"about working with hashed passwords in the admin."
msgstr ""
"一个很小但是很不错的修改：在管理界面中增加了用于添加和更新用户的专用视图，所"
"以你不再需要担心在管理中使用哈希密码的问题。"

msgid "Thanks"
msgstr "谢谢"

msgid ""
"Since 0.95, a number of people have stepped forward and taken a major new "
"role in Django's development. We'd like to thank these people for all their "
"hard work:"
msgstr ""
"从版本 0.95 起，有许多人站了出来并在 Django 的项目发展中扮演了主要角色。我们"
"想要向这些人的辛勤工作表达我们的谢意。"

msgid ""
"Russell Keith-Magee and Malcolm Tredinnick for their major code "
"contributions. This release wouldn't have been possible without them."
msgstr ""
"Russell Keith-Magee 和 Malcolm Tredinnick 对代码的主要贡献。没有他们，这个版"
"本是不可能的。"

msgid ""
"Our new release manager, James Bennett, for his work in getting out 0.95.1, "
"0.96, and (hopefully) future release."
msgstr ""
"我们的新发行版管理者 James Bennett，感谢他在发布 0.95.1、0.96 和（希望）未来"
"版本方面所做的工作。"

msgid ""
"Our ticket managers Chris Beaven (aka SmileyChris), Simon Greenhill, Michael "
"Radziej, and Gary Wilson. They agreed to take on the monumental task of "
"wrangling our tickets into nicely cataloged submission. Figuring out what to "
"work on is now about a million times easier; thanks again, guys."
msgstr ""
"我们的工单管理者 Chris Beaven（又名 SmileyChris）、Simon Greenhill、Michael "
"Radziej 和 Gary Wilson。他们同意承担起将我们的工单整理成目录提交的艰巨任务。"
"找出要做什么现在是一百万倍的容易；再次感谢，伙计们。"

msgid ""
"Everyone who submitted a bug report, patch or ticket comment. We can't "
"possibly thank everyone by name -- over 200 developers submitted patches "
"that went into 0.96 -- but everyone who's contributed to Django is listed "
"in :source:`AUTHORS`."
msgstr ""
"所有提交错误报告、补丁或工单评论的人。我们不可能对每个人的名字表示感谢——超过 "
"200 个开发者提交了 0.96 版本的补丁——但每个为 Django 做出贡献的人都在 :source:"
"`AUTHORS` 中列出。"

msgid "Django 1.0 release notes"
msgstr "Django 1.0 版本发行说明"

msgid "Welcome to Django 1.0!"
msgstr "欢迎来到 Django 1.0 版本！"

msgid ""
"We've been looking forward to this moment for over three years, and it's "
"finally here. Django 1.0 represents the largest milestone in Django's "
"development to date: a web framework that a group of perfectionists can "
"truly be proud of."
msgstr ""
"我们期待这一刻已经三年多了，现在它终于来了。Django 1.0是Django开发过程中最大"
"的一个里程碑:这是一个让一群完美主义者感到自豪的Web框架。"

msgid ""
"Django 1.0 represents over three years of community development as an Open "
"Source project. Django's received contributions from hundreds of developers, "
"been translated into fifty languages, and today is used by developers on "
"every continent and in every kind of job."
msgstr ""
"Django 1.0 作为一个开发了三年多的开源项目，得到了数百名开发人员的支持，并被翻"
"译成50多种语言，现在仍广泛的被世界各地的开发人员用于各种工作中"

msgid ""
"An interesting historical note: when Django was first released in July 2005, "
"the initial released version of Django came from an internal repository at "
"revision number 8825. Django 1.0 represents revision 8961 of our public "
"repository. It seems fitting that our 1.0 release comes at the moment where "
"community contributions overtake those made privately."
msgstr ""
"一个有趣的历史性注意事项：当Django于2005年7月第一次发布的时候，最初发布的"
"Django版本来自互联网仓库，修订版本号是8825。Django 1.0 代表的是我们公开仓库里"
"的修订版 8961。这看起来是符合我们当时1.0发布的到来，那个时候社区贡献者们都过"
"度地私有化。"

msgid "Stability and forwards-compatibility"
msgstr "稳定性和向前兼容性"

msgid ""
"The release of Django 1.0 comes with a promise of API stability and forwards-"
"compatibility. In a nutshell, this means that code you develop against "
"Django 1.0 will continue to work against 1.1 unchanged, and you should need "
"to make only minor changes for any 1.X release."
msgstr ""
"随着Django 1.0的发布，提供了承诺的API稳定性和向前兼容性。意思就是你针对"
"Django 1.0所开发的代码能够用在1.1版本没有变化的地方，然后只需要你做少量的代码"
"变更就可以适用 1.X 版本。"

msgid ""
"See the :doc:`API stability guide </misc/api-stability>` for full details."
msgstr "查阅 :doc:`API 稳定性指南 </misc/api-stability>` 了解详细信息"

msgid ""
"Django 1.0 has a number of backwards-incompatible changes from Django 0.96. "
"If you have apps written against Django 0.96 that you need to port, see our "
"detailed porting guide:"
msgstr ""
"Django 1.0 有许多与 Django 0.96 不兼容的修改。如果您有Django 0.96 的应用需要"
"移植，请查看我们的详细移植指南。"

msgid ""
"A complete list of backwards-incompatible changes can be found at https://"
"code.djangoproject.com/wiki/BackwardsIncompatibleChanges."
msgstr ""
"查看不兼容的更改列表请移步：https://code.djangoproject.com/wiki/"
"BackwardsIncompatibleChanges."

msgid "What's new in Django 1.0"
msgstr "Django 1.0 新特性"

msgid "A *lot*!"
msgstr "很多"

msgid ""
"Since Django 0.96, we've made over 4,000 code commits, fixed more than 2,000 "
"bugs, and edited, added, or removed around 350,000 lines of code. We've also "
"added 40,000 lines of new documentation, and greatly improved what was "
"already there."
msgstr ""
"从 Django 0.96 开始，我们已经提交了 4000 多次的代码，修复了 2000 多个漏洞，并"
"编辑了大约 350000 行的代码。我们还添加了 40000 行的新文档，极大的改进了现有的"
"内容。"

msgid ""
"In fact, new documentation is one of our favorite features of Django 1.0, so "
"we might as well start there. First, there's a new documentation site:"
msgstr ""
"事实上，新的文档就是Django 1.0中我们喜欢的特性之一，所以我们也会从新的文档作"
"为起点。首先，新的文档网页是："

msgid "https://docs.djangoproject.com/"
msgstr "https://docs.djangoproject.com/"

msgid ""
"The documentation has been greatly improved, cleaned up, and generally made "
"awesome. There's now dedicated search, indexes, and more."
msgstr ""
"文档已经有了很大的提升，整洁，而且通常做的很好。目前专注在搜索、索引，以及等"
"等功能上。"

msgid ""
"We can't possibly document everything that's new in 1.0, but the "
"documentation will be your definitive guide. Anywhere you see something like:"
msgstr ""
"在新的1.0版本中我们无法对每一件事做到文档化，但文档确实能作为你的开发指南。任"
"何你所看到的，例如："

msgid "This feature is new in Django 1.0"
msgstr "此功能是 Django 1.0 中的新功能"

msgid "You'll know that you're looking at something new or changed."
msgstr "你能知道你所要找的新内容，或者有哪些变化。"

msgid "The other major highlights of Django 1.0 are:"
msgstr "Django 1.0其它的主要亮点有："

msgid "Refactored admin application"
msgstr "重构的管理应用程序"

msgid ""
"The Django administrative interface (``django.contrib.admin``) has been "
"completely refactored; admin definitions are now completely decoupled from "
"model definitions (no more ``class Admin`` declaration in models!), "
"rewritten to use Django's new form-handling library (introduced in the 0.96 "
"release as ``django.newforms``, and now available as simply ``django."
"forms``) and redesigned with extensibility and customization in mind. Full "
"documentation for the admin application is available online in the official "
"Django documentation:"
msgstr ""
"Django的管理接口 (``django.contrib.admin``) 已经完全重构了；管理员定义功能目"
"前完全解构成模块定义形式 (不再是 ``class Admin`` 模块中的类形式！) ，重写代码"
"来使用Django的新表单处理库 (曾在 0.96 版本中介绍成 ``django.newforms`` 内容，"
"而此时直接可用成 ``django.forms`` 了) 以及重新设计成具有扩展能力和自定义能"
"力。完整的管理员应用程序文档在官方Django文档网站上可以看到："

msgid "See the :doc:`admin reference </ref/contrib/admin/index>` for details"
msgstr "参考 :doc:`管理员指南 </ref/contrib/admin/index>` 了解细节"

msgid "Improved Unicode handling"
msgstr "改进了 Unicode 的处理"

msgid ""
"Django's internals have been refactored to use Unicode throughout; this "
"drastically simplifies the task of dealing with non-Western-European content "
"and data in Django. Additionally, utility functions have been provided to "
"ease interoperability with third-party libraries and systems which may or "
"may not handle Unicode gracefully. Details are available in Django's Unicode-"
"handling documentation."
msgstr ""
"Django内部机制已经重构成使用Unicode字符集；这回彻底让在Django中使用处理非西欧"
"内容和数据的任务变得容易。另外，工具函数都提供成容易与第三方库协同工作的函"
"数，甚至也能够与那些不能处理Unicode字符集的操作系统一起协同工作。细节都可以在"
"Django的Unicode处理文档中找到可用的内容。"

msgid "See :doc:`/ref/unicode`."
msgstr "参见 :doc:`/ref/unicode`。"

msgid "An improved ORM"
msgstr "一项ORM提升"

msgid ""
"Django's object-relational mapper -- the component which provides the "
"mapping between Django model classes and your database, and which mediates "
"your database queries -- has been dramatically improved by a massive "
"refactoring. For most users of Django this is backwards-compatible; the "
"public-facing API for database querying underwent a few minor changes, but "
"most of the updates took place in the ORM's internals. A guide to the "
"changes, including backwards-incompatible modifications and mentions of new "
"features opened up by this refactoring, is `available on the Django wiki`__."
msgstr ""
"Django 的面向对象关系映射器——提供 Django 模型类与您的数据库之间的映射，并调解"
"你的数据库查询的组件——通过大规模重构得到了显著改进。对于大多数使用 Django 的"
"用户来说，这保持了向后兼容性；公开的数据库查询 API 经历了一些细微的变化，但大"
"部分更新都发生在 ORM 的内部结构中。关于这些变化的指南，包括不向后兼容的修改和"
"由这次重构开启的新功能提及，`在 Django 维基上可以获取`__ 。"

msgid "Automatic escaping of template variables"
msgstr "模版变量的自动转义"

msgid ""
"To provide improved security against cross-site scripting (XSS) "
"vulnerabilities, Django's template system now automatically escapes the "
"output of variables. This behavior is configurable, and allows both "
"variables and larger template constructs to be marked as safe (requiring no "
"escaping) or unsafe (requiring escaping). A full guide to this feature is in "
"the documentation for the :ttag:`autoescape` tag."
msgstr ""
"要提供针对跨网页脚本（XSS）漏洞的安全提升，Django的模版系统现在会对变量结果进"
"行自动转义。这种行为是可以进行配置的，而且既可以允许变量标记出安全，也可以对"
"更大模版的建立标记成安全（即需要不执行转义）或标记成不安全（即需要执行转"
"义）。自动转移这个特性的完整指南在文档中 :ttag:`autoescape` 标签位置上。"

msgid "``django.contrib.gis`` (GeoDjango)"
msgstr "``django.contrib.gis`` (Django地理信息功能)"

msgid ""
"A project over a year in the making, this adds world-class GIS (`Geographic "
"Information Systems`_) support to Django, in the form of a ``contrib`` "
"application. Its documentation is currently being maintained externally, and "
"will be merged into the main Django documentation shortly. Huge thanks go to "
"Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their "
"efforts in creating and completing this feature."
msgstr ""
"一个为期超过一年以上的项目，就是世界级别类型的GIS (`地理信息系统`_) 支持了"
"Django框架，是以一种 ``contrib`` 应用程序形式运作的。本身的文档目前由项目外团"
"队进行维护，并且很快以后会合并到Django主文档中去。非常感谢 Justin Bronn, "
"Jeremy Dunck, Brett Hoerner 和 Travis Pinney 为建立和完成本特性而做出的努力。"

msgid "See :doc:`GeoDjango </ref/contrib/gis/index>` for details."
msgstr "详见 :doc:`GeoDjango </ref/contrib/gis/index>`。"

msgid "Pluggable file storage"
msgstr "移动文件存储"

msgid ""
"Django's built-in ``FileField`` and ``ImageField`` now can take advantage of "
"pluggable file-storage backends, allowing extensive customization of where "
"and how uploaded files get stored by Django. For details, see :doc:`the "
"files documentation </topics/files>`; big thanks go to Marty Alchin for "
"putting in the hard work to get this completed."
msgstr ""
"Django的内置 ``FileField`` 和 ``ImageField`` 目前获得了后端移动文件存储的功能"
"优势，Django允许扩展自定义上传文件，指定上传文件的位置和如何上传文件。细节可"
"以查看 :doc:`文件文档内容 </topics/files>`; 非常感谢 Marty Alchin 投入了艰难"
"的工作完成这项特性功能。"

msgid "Jython compatibility"
msgstr "Jython 兼容性"

msgid ""
"Thanks to a lot of work from Leo Soto during a Google Summer of Code "
"project, Django's codebase has been refactored to remove incompatibilities "
"with `Jython`_, an implementation of Python written in Java, which runs "
"Python code on the Java Virtual Machine. Django is now compatible with the "
"forthcoming Jython 2.5 release."
msgstr ""
"非常感谢 Leo Soto 在谷歌夏季编程项目中做了大量工作，Django 的代码库已经重构后"
"删除了与 `Jython`_ 不兼容的代码部分，一个用 Java 写的 Python 实现，可以在 "
"Java 虚拟机上运行 Python 代码。Django 目前可以兼容即将发布的 Jython 2.5 版本"
"了。"

msgid "Generic relations in forms and admin"
msgstr "表单和管理员中的普通关联"

msgid ""
"Classes are now included in ``django.contrib.contenttypes`` which can be "
"used to support generic relations in both the admin interface and in end-"
"user forms. See :ref:`the documentation for generic relations <generic-"
"relations>` for details."
msgstr ""
"许多类目前都放在了 ``django.contrib.contenttypes`` 模块中，这是用来支持后台接"
"口和用户形式的普通关联。参考 :ref:`普通关联文档 <generic-relations>` 了解细"
"节。"

msgid "``INSERT``/``UPDATE`` distinction"
msgstr "``INSERT``和``UPDATE`` 区别"

msgid ""
"Although Django's default behavior of having a model's ``save()`` method "
"automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at "
"the SQL level is suitable for the majority of cases, there are occasional "
"situations where forcing one or the other is useful. As a result, models can "
"now support an additional parameter to ``save()`` which can force a specific "
"operation."
msgstr ""
"尽管 Django对于SQL数据库 ``INSERT``或 ``UPDATE`` 操作有一个默认自动执行的模型"
"``save()``方法行为，在大多数情况下都适用，但偶尔也有一些情况要强制使用一个或"
"另一个才行。作为结果，许多模块目前可以支持另一个可选参数，让``save()``方法强"
"制执行具体的一个操作。"

msgid "See :ref:`ref-models-force-insert` for details."
msgstr "参考 :ref:`指向模型强制插入` 文档了解细节。"

msgid "Split ``CacheMiddleware``"
msgstr "去掉 ``CacheMiddleware``"

msgid ""
"Django's ``CacheMiddleware`` has been split into three classes: "
"``CacheMiddleware`` itself still exists and retains all of its previous "
"functionality, but it is now built from two separate middleware classes "
"which handle the two parts of caching (inserting into and reading from the "
"cache) separately, offering additional flexibility for situations where "
"combining these functions into a single middleware posed problems."
msgstr ""
"Django的 ``CacheMiddleware`` 已经分解成三个类了： ``CacheMiddleware`` 依然存"
"在并且保留了以前本身的全部功能，但目前建立要从2个不同的中间件类来建立，分别处"
"理缓存中的2个部分 (插入到缓存中和从缓存中读取)，这样为一些情况提供了额外的灵"
"活性，例如把许多功能组合到一个中间件里来解决问题。"

msgid ""
"Full details, including updated notes on appropriate use, are in :doc:`the "
"caching documentation </topics/cache>`."
msgstr ""
"全部细节，包括适当地更新注释，都在 :doc:`缓存文档 </topics/cache>` 中。"

msgid "Refactored ``django.contrib.comments``"
msgstr "重构 ``django.contrib.comments``"

msgid ""
"As part of a Google Summer of Code project, Thejaswi Puthraya carried out a "
"major rewrite and refactoring of Django's bundled comment system, greatly "
"increasing its flexibility and customizability."
msgstr ""
"作为谷歌夏季代码项目的一部分， Thejaswi Puthraya 负责主要的重写和重构Django的"
"捆绑注释系统，极大地提高了灵活性和自定义功能。"

msgid "Removal of deprecated features"
msgstr "移除淘汰的特性"

msgid ""
"A number of features and methods which had previously been marked as "
"deprecated, and which were scheduled for removal prior to the 1.0 release, "
"are no longer present in Django. These include imports of the form library "
"from ``django.newforms`` (now located simply at ``django.forms``), the "
"``form_for_model`` and ``form_for_instance`` helper functions (which have "
"been replaced by ``ModelForm``) and a number of deprecated features which "
"were replaced by the dispatcher, file-uploading and file-storage refactoring "
"introduced in the Django 1.0 alpha releases."
msgstr ""
"一些特性和方法前面已经标记成淘汰的内容，而且在1.0版本发布时会被移除，在现在的"
"Django版本中已经没有了。这些包括了导入库名 ``django.newforms`` (目前导入库名"
"直接变成了 ``django.forms``)，而且 ``form_for_model`` 和 "
"``form_for_instance`` 辅助函数 (都被 ``ModelForm`` 所取代) 以及一些淘汰的特性"
"都换成了调度器，文件上传和文件存储功能，在Django 1.0 alpha版本中进行的重构。"

msgid "Known issues"
msgstr "已知问题"

msgid ""
"We've done our best to make Django 1.0 as solid as possible, but "
"unfortunately there are a couple of issues that we know about in the release."
msgstr ""
"我们让 Django 1.0 尽可能成为稳固版本做了最好的工作，但不幸的是在发布后依然有"
"一些问题。"

msgid "Multi-table model inheritance with ``to_field``"
msgstr "多表模型继承使用 ``to_field`` "

msgid ""
"If you're using :ref:`multiple table model inheritance <multi-table-"
"inheritance>`, be aware of this caveat: child models using a custom "
"``parent_link`` and ``to_field`` will cause database integrity errors. A set "
"of models like the following are **not valid**::"
msgstr ""
"如果你正在使用 :ref:`多表模型继承 <multi-table-inheritance>` 的话，要知道一项"
"警告：子模型在使用一个自定义 ``parent_link`` 和 ``to_field`` 的时候会导致数据"
"库整合错误。一套模型可能会出现 **not valid**::"

msgid "This bug will be fixed in the next release of Django."
msgstr "这个漏洞将在 Django 的下一个版本中修复。"

msgid "Caveats with support of certain databases"
msgstr "警告中含带某些数据库支持信息"

msgid ""
"Django attempts to support as many features as possible on all database "
"backends. However, not all database backends are alike, and in particular "
"many of the supported database differ greatly from version to version. It's "
"a good idea to checkout our :doc:`notes on supported database </ref/"
"databases>`:"
msgstr ""
"Django 尽可能支持所有数据库后端的特性。不管如何，不是所有的数据库后端都可能实"
"现，并且在许多特殊的数据库支持上都是每个版本都有不同之处。有一个好的办法就是"
"查阅文档 :doc:`所支持的数据库注意事项 </ref/databases>`："

msgid ":ref:`mysql-notes`"
msgstr ":ref:`mysql-notes`"

msgid ":ref:`sqlite-notes`"
msgstr ":ref:`sqlite-notes`"

msgid ":ref:`oracle-notes`"
msgstr ":ref:`oracle-notes`"

msgid "Porting your apps from Django 0.96 to 1.0"
msgstr "将你的应用从 Django 0.96 移植到 1.0"

msgid "Django 1.0 breaks compatibility with 0.96 in some areas."
msgstr "Django 1.0 在某些地方与 0.96 版本是不兼容的。"

msgid ""
"This guide will help you port 0.96 projects and apps to 1.0. The first part "
"of this document includes the common changes needed to run with 1.0. If "
"after going through the first part your code still breaks, check the section "
"`Less-common Changes`_ for a list of a bunch of less-common compatibility "
"issues."
msgstr ""
"这个指南会帮助你把 0.96 的项目和应用移植到 1.0 版本。本文档的第一部分包含了需"
"要运行在 1.0上的常见变更。如果通过了第一部分的变更，你的代码依然无法运行，那"
"么请检查 `Less-common Changes`_ 不常见的变更部分中列出的兼容问题。"

msgid ""
"The :doc:`1.0 release notes </releases/1.0>`. That document explains the new "
"features in 1.0 more deeply; the porting guide is more concerned with "
"helping you quickly update your code."
msgstr ""
"文档 :doc:`1.0 版本注意事项 </releases/1.0>`。这份文档更深入地解释了 1.0 中新"
"的特性；移植指南更多考虑了帮助你快速更新你的代码。"

msgid "Common changes"
msgstr "常见变更"

msgid ""
"This section describes the changes between 0.96 and 1.0 that most users will "
"need to make."
msgstr ""
"本部分描述了 0.96 与 1.0 之间的变更，这些变更都是大部分用户会做的事情。"

msgid "Use Unicode"
msgstr "使用 Unicode 字符集"

msgid ""
"Change string literals (``'foo'``) into Unicode literals (``u'foo'``). "
"Django now uses Unicode strings throughout. In most places, raw strings will "
"continue to work, but updating to use Unicode literals will prevent some "
"obscure problems."
msgstr ""
"逐字地把字符串 (``'foo'``) 变成 Unicode 字符串 (``u'foo'``)。Django 目前从始"
"至终贯穿地使用 Unicode 字符集字符串。在绝大多数地方，生食字符串会继续有效，但"
"更新成 Unicode 字符串会防止某些含糊的问题出现。"

msgid "See :doc:`/ref/unicode` for full details."
msgstr "查阅 :doc:`/ref/unicode` 文档了解细节。"

msgid "Models"
msgstr "模型"

msgid "Common changes to your models file:"
msgstr "对于你的模型文件中常见的变更："

msgid "Rename ``maxlength`` to ``max_length``"
msgstr "``maxlength`` 重命名为 ``max_length``"

msgid ""
"Rename your ``maxlength`` argument to ``max_length`` (this was changed to be "
"consistent with form fields):"
msgstr ""
"把你的 ``maxlength`` 参数名变成 ``max_length`` (这次参数名的变更是为了与表单"
"区域保持一致)："

msgid "Replace ``__str__`` with ``__unicode__``"
msgstr "用 ``__unicode__`` 代替 ``__str__``"

msgid ""
"Replace your model's ``__str__`` function with a ``__unicode__`` method, and "
"make sure you `use Unicode`_ (``u'foo'``) in that method."
msgstr ""
"使用 ``__unicode__`` 方法替换你的模型中的 ``__str__`` 函数，然后才能确保你使"
"用 `使用 Unicode 字符集`_ (``u'foo'``) 中所介绍的方法。"

msgid "Remove ``prepopulated_from``"
msgstr "移除 ``prepopulated_from``"

msgid ""
"Remove the ``prepopulated_from`` argument on model fields. It's no longer "
"valid and has been moved to the ``ModelAdmin`` class in ``admin.py``. See "
"`the admin`_, below, for more details about changes to the admin."
msgstr ""
"删除模型区域中 ``prepopulated_from`` 参数。这个参数不再合法，而且已经转移到管"
"理员 ``admin.py`` 模块里的 ``ModelAdmin`` 类中去了。查阅 `管理员`_ 内容了解更"
"多对管理员变更的细节。"

msgid "Remove ``core``"
msgstr "移除 ``core``"

msgid ""
"Remove the ``core`` argument from your model fields. It is no longer "
"necessary, since the equivalent functionality (part of :ref:`inline editing "
"<admin-inlines>`) is handled differently by the admin interface now. You "
"don't have to worry about inline editing until you get to `the admin`_ "
"section, below. For now, remove all references to ``core``."
msgstr ""
"删除你的模型区域里的 ``core`` 参数。这个参数不再需要了，因为相同功能 (参考 :"
"ref:`行内编辑 <admin-inlines>`) 目前已经由后台接口做出不同地处理。你不用再担"
"心行内编辑，除非你在 `管理员`_ 部分才考虑行内编辑。目前，删除所有对 ``core`` "
"参数的指向。"

msgid "Replace ``class Admin:`` with ``admin.py``"
msgstr "用 ``admin.py`` 替换  ``class Admin:``"

msgid ""
"Remove all your inner ``class Admin`` declarations from your models. They "
"won't break anything if you leave them, but they also won't do anything. To "
"register apps with the admin you'll move those declarations to an ``admin."
"py`` file; see `the admin`_ below for more details."
msgstr ""
"从你的模型里移除所有嵌入 ``class Admin`` 管理员类声明。如果你保留这种类的话，"
"不会对任何有影响，但也不会起任何作用。要注册应用程序管理员，你要把这种类的声"
"明移到 ``admin.py`` 管理员模块文件里；查看 `管理员`_ 内容了解更多细节。"

msgid ""
"A contributor to djangosnippets__ has written a script that'll `scan your "
"models.py and generate a corresponding admin.py`__."
msgstr ""
"对 djangosnippets__ 做出的贡献者已经写了一个脚本会 `扫描你的 models.py 模型模"
"块后生成一个相应的 admin.py 管理员模块`__。"

msgid "Example"
msgstr "例如"

msgid ""
"Below is an example ``models.py`` file with all the changes you'll need to "
"make:"
msgstr "下面的一个例子 ``models.py`` 模型文件含有所有你需要做出的变更："

msgid "Old (0.96) ``models.py``::"
msgstr "老版本 (0.96) ``models.py``::"

msgid "New (1.0) ``models.py``::"
msgstr "新版本 (1.0) ``models.py``::"

msgid "New (1.0) ``admin.py``::"
msgstr "新版本 (1.0) ``admin.py`` 管理员模块："

msgid "The Admin"
msgstr "管理员"

msgid ""
"One of the biggest changes in 1.0 is the new admin. The Django "
"administrative interface (``django.contrib.admin``) has been completely "
"refactored; admin definitions are now completely decoupled from model "
"definitions, the framework has been rewritten to use Django's new form-"
"handling library and redesigned with extensibility and customization in mind."
msgstr ""
"在 1.0 版本中最具挑战性的新管理员功能问题之一。Django 管理接口 (``django."
"contrib.admin``) 管理员功能已经完全重构了；许多管理员定义目前都完全从许多模型"
"定义中解构出来，许多框架都重写后使用 Django 的新表单处理库，而且重新设计成具"
"有扩展和自定义能力。"

msgid ""
"Practically, this means you'll need to rewrite all of your ``class Admin`` "
"declarations. You've already seen in `models`_ above how to replace your "
"``class Admin`` with an ``admin.site.register()`` call in an ``admin.py`` "
"file. Below are some more details on how to rewrite that ``Admin`` "
"declaration into the new syntax."
msgstr ""
"实际中，意味着你要重写所有你的 ``class Admin`` 管理员类声明。你已经在上面的 "
"`models`_ 中见过了如何替换你的 ``class Admin`` 管理员类，就是在 ``admin.py`` "
"管理员模块文件中用一个 ``admin.site.register()`` 管理员网页注册调用来替代。下"
"面这些都是一些更详细的如何重写 ``Admin`` 管理员声明类的新句法。"

msgid "Use new inline syntax"
msgstr "使用新的行内句法"

msgid ""
"The new ``edit_inline`` options have all been moved to ``admin.py``. Here's "
"an example:"
msgstr ""
"新的 ``edit_inline`` 行内编辑选项都已经移到 ``admin.py`` 管理员模块中了。下面"
"有一个例子："

msgid "Old (0.96)::"
msgstr "老版本 (0.96)::"

msgid "New (1.0)::"
msgstr "新版本 (1.0)::"

msgid "See :ref:`admin-inlines` for more details."
msgstr "查阅 :ref:`admin-inlines` 管理员行内文档了解更多细节。"

msgid "Simplify ``fields``, or use ``fieldsets``"
msgstr "简化 ``fields``，或使用 ``fieldsets``"

msgid ""
"The old ``fields`` syntax was quite confusing, and has been simplified. The "
"old syntax still works, but you'll need to use ``fieldsets`` instead."
msgstr ""
"老的 ``fields`` 句法是非常迷糊的，而且已经被简化过。老的句法依然有效，但你要"
"使用 ``fieldsets`` 来代替老旧句法。"

msgid ""
"More detailed information about the changes and the reasons behind them can "
"be found on the `NewformsAdminBranch wiki page`__"
msgstr ""
"更多关于变更的详细信息以及背后的原因都可以在 `NewformsAdminBranch wiki "
"page`__ 新表单管理分支维基百科页面找到"

msgid ""
"The new admin comes with a ton of new features; you can read about them in "
"the :doc:`admin documentation </ref/contrib/admin/index>`."
msgstr ""
"新的管理员功能伴随着许多新特性；你可以在 :doc:`管理员文档 </ref/contrib/"
"admin/index>` 中来阅读有关内容。"

msgid "URLs"
msgstr "URLs"

msgid "Update your root ``urls.py``"
msgstr "更新你的根路径 ``urls.py`` 模块"

msgid ""
"If you're using the admin site, you need to update your root ``urls.py``."
msgstr "如果你正在使用后台界面，你需要更新你的根路径``urls.py`` 模块。"

msgid "Old (0.96) ``urls.py``::"
msgstr "老版本 (0.96) ``urls.py``::"

msgid "New (1.0) ``urls.py``::"
msgstr "新版本 (1.0) ``urls.py``::"

msgid "Views"
msgstr "视图"

msgid "Use ``django.forms`` instead of ``newforms``"
msgstr "使用 ``django.forms`` 来代替 ``newforms`` 用法"

msgid ""
"Replace ``django.newforms`` with ``django.forms`` -- Django 1.0 renamed the "
"``newforms`` module (introduced in 0.96) to plain old ``forms``. The "
"``oldforms`` module was also removed."
msgstr ""
"用 ``django.forms`` 来替换 ``django.newforms`` 用法 -- Django 1.0 版本重命名"
"了 ``newforms`` 模块名 (曾用在 0.96 版本的名字) 采用以前用过的 ``forms`` 名"
"字。而 ``oldforms`` 模块也会被移除。"

msgid ""
"If you're already using the ``newforms`` library, and you used our "
"recommended ``import`` statement syntax, all you have to do is change your "
"import statements."
msgstr ""
"如果你已经使用 ``newforms`` 库的话，而且你采用了我们所建议的 ``import`` 导入"
"语句句法，那么所有你要做的就是改变一下你的导入依据即可。"

msgid "Old::"
msgstr "老版本::"

msgid "New::"
msgstr "新版本::"

msgid ""
"If you're using the old forms system (formerly known as ``django.forms`` and "
"``django.oldforms``), you'll have to rewrite your forms. A good place to "
"start is the :doc:`forms documentation </topics/forms/index>`"
msgstr ""
"如果你正在使用老的表单系统 (正规的名字是 ``django.forms`` 和 ``django."
"oldforms``)，那么你要重写你的表单。良好地开始就是从阅读 :doc:`表单文档 </"
"topics/forms/index>` 内容"

msgid "Handle uploaded files using the new API"
msgstr "处理上传文件使用新的 API "

msgid ""
"Replace use of uploaded files -- that is, entries in ``request.FILES`` -- as "
"simple dictionaries with the new :class:`~django.core.files.uploadedfile."
"UploadedFile`. The old dictionary syntax no longer works."
msgstr ""
"代替上传文件的用法 -- 那就是，采用 ``request.FILES`` 文件请求入口 -- 与含有 :"
"class:`~django.core.files.uploadedfile.UploadedFile` 文件上传类的简单字典一"
"样。老的字典句法不再有效了。"

msgid "Thus, in a view like::"
msgstr "因此，看起来就像::"

msgid "...you'd need to make the following changes:"
msgstr "...你需要做出如下变更："

msgid "Old (0.96)"
msgstr "老版本 (0.96)"

msgid "New (1.0)"
msgstr "新版本 (1.0)"

msgid "``f['content']``"
msgstr "``f['content']``"

msgid "``f.read()``"
msgstr "``f.read()``"

msgid "``f['filename']``"
msgstr "``f['filename']``"

msgid "``f.name``"
msgstr "``f.name``"

msgid "``f['content-type']``"
msgstr "``f['content-type']``"

msgid "``f.content_type``"
msgstr "``f.content_type``"

msgid "Work with file fields using the new API"
msgstr "文件字段使用新API处理"

msgid ""
"The internal implementation of :class:`django.db.models.FileField` have "
"changed. A visible result of this is that the way you access special "
"attributes (URL, filename, image size, etc.) of these model fields has "
"changed. You will need to make the following changes, assuming your model's :"
"class:`~django.db.models.FileField` is called ``myfile``:"
msgstr ""
"class:`django.db.models.FileField` 的内部实现已更改。一个明显的结果是您访问特"
"殊属性(URL, filename, image size, 等等)的方式发生了变化。您需要进行以下更改，"
"假设您的模型 :class:`~django.db.models.FileField` 调用 ``myfile``:"

msgid "``myfile.get_content_filename()``"
msgstr "``myfile.get_content_filename()``"

msgid "``myfile.content.path``"
msgstr "``myfile.content.path``"

msgid "``myfile.get_content_url()``"
msgstr "``myfile.get_content_url()``"

msgid "``myfile.content.url``"
msgstr "``myfile.content.url``"

msgid "``myfile.get_content_size()``"
msgstr "``myfile.get_content_size()``"

msgid "``myfile.content.size``"
msgstr "``myfile.content.size``"

msgid "``myfile.save_content_file()``"
msgstr "``myfile.save_content_file()``"

msgid "``myfile.content.save()``"
msgstr "``myfile.content.save()``"

msgid "``myfile.get_content_width()``"
msgstr "``myfile.get_content_width()``"

msgid "``myfile.content.width``"
msgstr "``myfile.content.width``"

msgid "``myfile.get_content_height()``"
msgstr "``myfile.get_content_height()``"

msgid "``myfile.content.height``"
msgstr "``myfile.content.height``"

msgid ""
"Note that the ``width`` and ``height`` attributes only make sense for :class:"
"`~django.db.models.ImageField` fields. More details can be found in the :doc:"
"`model API </ref/models/fields>` documentation."
msgstr ""
"请注意 ``width`` 和 ``height`` 属性仅对:class:`~django.db.models."
"ImageField`  字段有意义。更多详细信息可以在 :doc:`模型 API </ref/models/"
"fields>` 文档中找到。"

msgid "Use ``Paginator`` instead of ``ObjectPaginator``"
msgstr "使用 ``Paginator`` 而不是 ``ObjectPaginator``"

msgid ""
"The ``ObjectPaginator`` in 0.96 has been removed and replaced with an "
"improved version, :class:`django.core.paginator.Paginator`."
msgstr ""
"0.96 版本中的 ``ObjectPaginator`` 已被删除，并替换为一个改进版本: class:"
"`django.core.paginator.Paginator`。"

msgid "Templates"
msgstr "模板"

msgid "Learn to love autoescaping"
msgstr "学会爱上自动转义"

msgid ""
"By default, the template system now automatically HTML-escapes the output of "
"every variable. To learn more, see :ref:`automatic-html-escaping`."
msgstr ""
"默认情况下，模板系统现在会自动对每个变量的输出进行HTML转义。要了解更多信息，"
"请参阅 :ref:`automatic-html-escaping`。"

msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe` "
"filter:"
msgstr "要禁用单个变量的自动转义，请使用 :tfilter:`safe` 过滤器:"

msgid ""
"To disable auto-escaping for an entire template, wrap the template (or just "
"a particular section of the template) in the :ttag:`autoescape` tag:"
msgstr ""
"要禁用整个模板的自动转义，请将模板（或模板的特定部分）包装在 :ttag:"
"`autoescape` 标签:"

msgid "Less-common changes"
msgstr "不常见的变化"

msgid ""
"The following changes are smaller, more localized changes. They should only "
"affect more advanced users, but it's probably worth reading through the list "
"and checking your code for these things."
msgstr ""
"以下更改是较小的、更本地化的更改。它们应该只影响更高级的用户，但是通读列表并"
"检查代码中的这些东西可能是值得的。"

msgid "Signals"
msgstr "信号"

msgid "Add ``**kwargs`` to any registered signal handlers."
msgstr "将``**kwargs``添加到任何注册的信号处理程序中。"

msgid ""
"Connect, disconnect, and send signals via methods on the :class:`~django."
"dispatch.Signal` object instead of through module methods in ``django."
"dispatch.dispatcher``."
msgstr ""
"通过 :class:`~django.dispatch.Signal` 对象上的方法连接、断开连接和发送信号，"
"而不是通过 ``django.dispatch.dispatcher`` 中的模块方法。"

msgid ""
"Remove any use of the ``Anonymous`` and ``Any`` sender options; they no "
"longer exist. You can still receive signals sent by any sender by using "
"``sender=None``"
msgstr ""
"移除任何对 ``Anonymous`` 和 ``Any`` 发送者选项的使用；它们不再存在。你仍然可"
"以通过使用 ``sender=None`` 接收来自任何发送者的信号。"

msgid ""
"Make any custom signals you've declared into instances of :class:`django."
"dispatch.Signal` instead of anonymous objects."
msgstr ""
"将你声明的任何自定义信号转换为 :class:`django.dispatch.Signal` 的实例，而不是"
"匿名对象。"

msgid "Here's quick summary of the code changes you'll need to make:"
msgstr "以下是你需要进行的代码更改的快速摘要："

msgid "``def callback(sender)``"
msgstr "``def callback(sender)``"

msgid "``def callback(sender, **kwargs)``"
msgstr "``def callback(sender, **kwargs)``"

msgid "``sig = object()``"
msgstr "``sig = object()``"

msgid "``sig = django.dispatch.Signal()``"
msgstr "``sig = django.dispatch.Signal()``"

msgid "``dispatcher.connect(callback, sig)``"
msgstr "``dispatcher.connect(callback, sig)``"

msgid "``sig.connect(callback)``"
msgstr "``sig.connect(callback)``"

msgid "``dispatcher.send(sig, sender)``"
msgstr "``dispatcher.send(sig, sender)``"

msgid "``sig.send(sender)``"
msgstr "``sig.send(sender)``"

msgid "``dispatcher.connect(callback, sig, sender=Any)``"
msgstr "``dispatcher.connect(callback, sig, sender=Any)``"

msgid "``sig.connect(callback, sender=None)``"
msgstr "``sig.connect(callback, sender=None)``"

msgid "Comments"
msgstr "评论"

msgid ""
"If you were using Django 0.96's ``django.contrib.comments`` app, you'll need "
"to upgrade to the new comments app introduced in 1.0. See the upgrade guide "
"for details."
msgstr ""
"如果你使用的是Django 0.96版的` Django .contrib.comments`应用程序，你需要升级"
"到1.0版引入的新评论应用程序。详细信息请参见升级指导书。"

msgid "Template tags"
msgstr "模板标签"

msgid ":ttag:`spaceless` tag"
msgstr ":ttag:`spaceless` 标签"

msgid ""
"The ``spaceless`` template tag now removes *all* spaces between HTML tags, "
"instead of preserving a single space."
msgstr ""
"``spaceless`` 模板标签现在会移除 HTML 标签之间的 *所有* 空格，而不再保留单个"
"空格。"

msgid "Local flavors"
msgstr "本地风味"

msgid "U.S. local flavor"
msgstr "美国本地风味"

msgid ""
"``django.contrib.localflavor.usa`` has been renamed to ``django.contrib."
"localflavor.us``. This change was made to match the naming scheme of other "
"local flavors. To migrate your code, all you need to do is change the "
"imports."
msgstr ""
"``django.contrib.localflavor.usa`` 已重命名为 ``django.contrib.localflavor."
"us``。此更改是为了与其他本地化风格的命名方案匹配。要迁移你的代码，你只需要更"
"改导入语句。"

msgid "Sessions"
msgstr "会话"

msgid "Getting a new session key"
msgstr "获取新的会话密钥"

msgid ""
"``SessionBase.get_new_session_key()`` has been renamed to "
"``_get_new_session_key()``. ``get_new_session_object()`` no longer exists."
msgstr ""
"``SessionBase.get_new_session_key()`` 已重命名为 ``_get_new_session_key()``。"
"``get_new_session_object()`` 不再存在。"

msgid "Fixtures"
msgstr "辅助工具"

msgid "Loading a row no longer calls ``save()``"
msgstr "加载一行不再调用\"save()\""

msgid ""
"Previously, loading a row automatically ran the model's ``save()`` method. "
"This is no longer the case, so any fields (for example: timestamps) that "
"were auto-populated by a ``save()`` now need explicit values in any fixture."
msgstr ""
"以前加载一行数据会自动运行模型的`save()`方法。现在情况不再是这样了，所以任何"
"由``save()``自动填充的字段(例如:时间戳)现在都需要在任何fixture中显示值。"

msgid "Settings"
msgstr "配置"

msgid "Better exceptions"
msgstr "更好的异常处理"

msgid ""
"The old :exc:`EnvironmentError` has split into an :exc:`ImportError` when "
"Django fails to find the settings module and a :exc:`RuntimeError` when you "
"try to reconfigure settings after having already used them."
msgstr ""
"旧的 :exc:`EnvironmentError` 现已拆分为 :exc:`ImportError` （当 Django 无法找"
"到设置模块时）和 :exc:`RuntimeError` （当你尝试在已经使用过设置之后重新配置它"
"们时）。"

msgid ":setting:`LOGIN_URL` has moved"
msgstr ":setting:`LOGIN_URL` 已移动"

msgid ""
"The :setting:`LOGIN_URL` constant moved from ``django.contrib.auth`` into "
"the ``settings`` module. Instead of using ``from django.contrib.auth import "
"LOGIN_URL`` refer to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""
":setting:`LOGIN_URL` 常量已从 ``django.contrib.auth`` 移动到 ``settings`` 模"
"块。不再使用 ``from django.contrib.auth import LOGIN_URL``，请改用 :setting:"
"`settings.LOGIN_URL <LOGIN_URL>`。"

msgid ":setting:`APPEND_SLASH` behavior has been updated"
msgstr ":setting:`APPEND_SLASH` 的行为已更新。"

msgid ""
"In 0.96, if a URL didn't end in a slash or have a period in the final "
"component of its path, and :setting:`APPEND_SLASH` was True, Django would "
"redirect to the same URL, but with a slash appended to the end. Now, Django "
"checks to see whether the pattern without the trailing slash would be "
"matched by something in your URL patterns. If so, no redirection takes "
"place, because it is assumed you deliberately wanted to catch that pattern."
msgstr ""
"在 0.96 版本中，如果一个 URL 不以斜杠结尾，或者其路径的最后一个组件中没有句"
"点，并且 :setting:`APPEND_SLASH` 为 True，Django 会重定向到相同的 URL，但在末"
"尾添加斜杠。现在，Django 会检查去掉尾部斜杠的模式是否与你的 URL 模式中的某些"
"内容匹配。如果匹配成功，不会进行重定向，因为假定你是有意捕获该模式的。"

msgid ""
"For most people, this won't require any changes. Some people, though, have "
"URL patterns that look like this::"
msgstr ""
"对大多数人来说，这不需要进行任何更改。然而，有些人的 URL 模式看起来像这样："

msgid ""
"Previously, those patterns would have been redirected to have a trailing "
"slash. If you always want a slash on such URLs, rewrite the pattern as::"
msgstr ""
"以前，这些模式会被重定向以添加尾部斜杠。如果你希望这些 URL 始终带有斜杠，请将"
"模式改写为："

msgid "Smaller model changes"
msgstr "较小的模型更改"

msgid "Different exception from ``get()``"
msgstr "与``get()``不同的异常"

msgid ""
"Managers now return a :exc:`~django.core.exceptions.MultipleObjectsReturned` "
"exception instead of :exc:`AssertionError`:"
msgstr ""
"现在，管理器返回 :exc:`~django.core.exceptions.MultipleObjectsReturned` 异"
"常，而不再返回 :exc:`AssertionError` 异常："

msgid "``LazyDate`` has been fired"
msgstr "``LazyDate`` 已删除。"

msgid "The ``LazyDate`` helper class no longer exists."
msgstr "``LazyDate`` 帮助类不再存在。"

msgid ""
"Default field values and query arguments can both be callable objects, so "
"instances of ``LazyDate`` can be replaced with a reference to ``datetime."
"datetime.now``:"
msgstr ""
"默认字段值和查询参数都可以是可调用对象，因此可以将 ``LazyDate`` 的实例替换为"
"对 ``datetime.datetime.now`` 的引用："

msgid "``DecimalField`` is new, and ``FloatField`` is now a proper float"
msgstr "``DecimalField`` 是新的，而 ``FloatField`` 现在是真正的浮点数字段。"

msgid ""
"If you forget to make this change, you will see errors about ``FloatField`` "
"not taking a ``max_digits`` attribute in ``__init__``, because the new "
"``FloatField`` takes no precision-related arguments."
msgstr ""
"如果你忘记进行这个更改，你会看到关于 ``FloatField`` 在 ``__init__`` 中不接受 "
"``max_digits`` 属性的错误，因为新的 ``FloatField`` 不接受与精度相关的参数。"

msgid ""
"If you're using MySQL or PostgreSQL, no further changes are needed. The "
"database column types for ``DecimalField`` are the same as for the old "
"``FloatField``."
msgstr ""
"如果你使用的是 MySQL 或 PostgreSQL，不需要进一步的更改。对于 "
"``DecimalField``，数据库列类型与旧的 ``FloatField`` 相同。"

msgid ""
"If you're using SQLite, you need to force the database to view the "
"appropriate columns as decimal types, rather than floats. To do this, you'll "
"need to reload your data. Do this after you have made the change to using "
"``DecimalField`` in your code and updated the Django code."
msgstr ""
"如果你使用的是 SQLite，你需要强制数据库将相应的列视为十进制类型，而不是浮点"
"数。要做到这一点，你需要在对代码进行更改并更新 Django 代码后重新加载数据。"

msgid "**Back up your database first!**"
msgstr "**首先备份你的数据库!!!!**"

msgid ""
"For SQLite, this means making a copy of the single file that stores the "
"database (the name of that file is the ``DATABASE_NAME`` in your ``settings."
"py`` file)."
msgstr ""
"对于SQLite，这意味着要复制存储数据库的单个文件(该文件的名称是``settings.py``"
"文件中的``DATABASE_NAME``)。"

msgid ""
"To upgrade each application to use a ``DecimalField``, you can do the "
"following, replacing ``<app>`` in the code below with each app's name:"
msgstr ""
"要升级每个应用程序以使用 ``DecimalField``，你可以按照以下代码进行操作，将代码"
"中的 ``<app>`` 替换为每个应用程序的名称："

msgid "Notes:"
msgstr "注意："

msgid ""
"It's important that you remember to use XML format in the first step of this "
"process. We are exploiting a feature of the XML data dumps that makes "
"porting floats to decimals with SQLite possible."
msgstr ""
"在这个过程的第一步中，重要的是记住要使用 XML 格式。我们利用了 XML 数据转储的"
"一个特性，使得将浮点数转换为 SQLite 中的十进制数成为可能。"

msgid ""
"In the second step you will be asked to confirm that you are prepared to "
"lose the data for the application(s) in question. Say yes; we'll restore "
"this data in the third step."
msgstr ""
"在第二步中，你将被要求确认你是否准备好丢失相关应用程序的数据。选择是；我们将"
"在第三步中恢复这些数据。"

msgid ""
"``DecimalField`` is not used in any of the apps shipped with Django prior to "
"this change being made, so you do not need to worry about performing this "
"procedure for any of the standard Django models."
msgstr ""
"在这个更改之前，Django 附带的应用程序中没有使用 ``DecimalField``，所以你不需"
"要担心为任何标准的 Django 模型执行此过程。"

msgid ""
"If something goes wrong in the above process, just copy your backed up "
"database file over the original file and start again."
msgstr ""
"如果上述过程出现问题，只需将备份的数据库文件复制到原始文件上，然后重新开始。"

msgid "Internationalization"
msgstr "国际化"

msgid ":func:`django.views.i18n.set_language` now requires a POST request"
msgstr ":func:`django.views.i18n.set_language` 现在要求使用 POST 请求。"

msgid ""
"Previously, a GET request was used. The old behavior meant that state (the "
"locale used to display the site) could be changed by a GET request, which is "
"against the HTTP specification's recommendations. Code calling this view "
"must ensure that a POST request is now made, instead of a GET. This means "
"you can no longer use a link to access the view, but must use a form "
"submission of some kind (e.g. a button)."
msgstr ""
"以前使用的是 GET 请求。旧的行为意味着可以通过 GET 请求更改状态（用于显示站点"
"的区域设置），这违反了 HTTP 规范的建议。调用此视图的代码必须确保现在进行的是 "
"POST 请求，而不是 GET 请求。这意味着你不能再使用链接来访问视图，而是必须使用"
"某种表单提交方式（例如按钮）。"

msgid "``_()`` is no longer in builtins"
msgstr "``_()`` 不再位于内置函数中"

msgid ""
"``_()`` (the callable object whose name is a single underscore) is no longer "
"monkeypatched into builtins -- that is, it's no longer available magically "
"in every module."
msgstr ""
"``_()`` （其名称为单个下划线的可调用对象）不再被自动添加到内置函数中，也就是"
"说，它不再在每个模块中自动可用。"

msgid ""
"If you were previously relying on ``_()`` always being present, you should "
"now explicitly import ``ugettext`` or ``ugettext_lazy``, if appropriate, and "
"alias it to ``_`` yourself::"
msgstr ""
"如果你之前依赖于 ``_()`` 总是存在，现在应该显式导入 ``ugettext`` 或 "
"``ugettext_lazy`` （如果适用），并自己将其别名为 ``_``："

msgid "HTTP request/response objects"
msgstr "HTTP 请求/响应对象"

msgid "Dictionary access to ``HttpRequest``"
msgstr "对于 ``HttpRequest`` 的字典访问："

msgid ""
"``HttpRequest`` objects no longer directly support dictionary-style access; "
"previously, both ``GET`` and ``POST`` data were directly available on the "
"``HttpRequest`` object (e.g., you could check for a piece of form data by "
"using ``if 'some_form_key' in request`` or by reading "
"``request['some_form_key']``. This is no longer supported; if you need "
"access to the combined ``GET`` and ``POST`` data, use ``request.REQUEST`` "
"instead."
msgstr ""
"``HttpRequest`` 对象不再直接支持字典风格的访问；以前，``GET`` 和 ``POST`` 数"
"据都可以直接在 ``HttpRequest`` 对象上使用（例如，你可以通过 ``if "
"'some_form_key' in request`` 或读取 ``request['some_form_key']`` 来检查表单数"
"据。不再支持这种方式；如果你需要访问组合的 ``GET`` 和 ``POST`` 数据，请使用 "
"``request.REQUEST``。"

msgid ""
"It is strongly suggested, however, that you always explicitly look in the "
"appropriate dictionary for the type of request you expect to receive "
"(``request.GET`` or ``request.POST``); relying on the combined ``request."
"REQUEST`` dictionary can mask the origin of incoming data."
msgstr ""
"然而，强烈建议你始终明确查找你期望接收的请求类型的字典（``request.GET`` 或 "
"``request.POST``）；依赖于组合的 ``request.REQUEST`` 字典可能会掩盖传入数据的"
"来源。"

msgid "Accessing ``HTTPResponse`` headers"
msgstr "访问``HTTPResponse`` headers"

msgid ""
"``django.http.HttpResponse.headers`` has been renamed to ``_headers`` and :"
"class:`~django.http.HttpResponse` now supports containment checking "
"directly. So use ``if header in response:`` instead of ``if header in "
"response.headers:``."
msgstr ""
"``django.http.HttpResponse.headers`` 已重命名为 ``_headers``，并且 :class:"
"`~django.http.HttpResponse` 现在直接支持包含检查。所以使用 ``if header in "
"response:`` 而不是 ``if header in response.headers:``。"

msgid "Generic relations"
msgstr "通用关系"

msgid "Generic relations have been moved out of core"
msgstr "通用关系已从核心中移出。"

msgid ""
"The generic relation classes -- ``GenericForeignKey`` and "
"``GenericRelation`` -- have moved into the :mod:`django.contrib."
"contenttypes` module."
msgstr ""
"通用关联类 -- ``GenericForeignKey`` 和 ``GenericRelation`` -- 已移动到 :mod:"
"`django.contrib.contenttypes` 模块。"

msgid "Testing"
msgstr "测试中"

msgid ":meth:`django.test.Client.login` has changed"
msgstr ":meth:`django.test.Client.login` 发生了变化"

msgid "Management commands"
msgstr "管理命令"

msgid "Running management commands from your code"
msgstr "从你的代码中运行管理命令"

msgid ":mod:`django.core.management` has been greatly refactored."
msgstr ":mod:`django.core.management` 已经进行了大规模的重构。"

msgid ""
"Calls to management services in your code now need to use ``call_command``. "
"For example, if you have some test code that calls flush and load_data::"
msgstr ""
"你的代码中对管理服务的调用现在需要使用 ``call_command``。例如，如果你有一些调"
"用 flush 和 load_data 的测试代码："

msgid "...you'll need to change this code to read::"
msgstr "...你需要更改这段代码为："

msgid "Subcommands must now precede options"
msgstr "现在子命令必须在选项之前。"

msgid ""
"``django-admin.py`` and ``manage.py`` now require subcommands to precede "
"options. So:"
msgstr ""
"``django-admin.py`` 和 ``manage.py`` 现在要求子命令必须在选项之前。因此："

msgid "...no longer works and should be changed to:"
msgstr "...不再起作用，应该改为："

msgid "Syndication"
msgstr "联合"

msgid "``Feed.__init__`` has changed"
msgstr "``Feed.__init__`` 发生了变化"

msgid ""
"The ``__init__()`` method of the syndication framework's ``Feed`` class now "
"takes an ``HttpRequest`` object as its second parameter, instead of the "
"feed's URL. This allows the syndication framework to work without requiring "
"the sites framework. This only affects code that subclasses ``Feed`` and "
"overrides the ``__init__()`` method, and code that calls ``Feed.__init__()`` "
"directly."
msgstr ""
"syndication 框架的 ``Feed`` 类的 ``__init__()`` 方法现在将 ``HttpRequest`` 对"
"象作为其第二个参数，而不是 feed 的 URL。这允许 syndication 框架在不需要 "
"sites 框架的情况下工作。这只影响到子类化 ``Feed`` 并覆盖 ``__init__()`` 方法"
"的代码，以及直接调用 ``Feed.__init__()`` 的代码。"

msgid "Data structures"
msgstr "数据结构"

msgid "``SortedDictFromList`` is gone"
msgstr "``SortedDictFromList`` 已被移除"

msgid ""
"``django.newforms.forms.SortedDictFromList`` was removed. ``django.utils."
"datastructures.SortedDict`` can now be instantiated with a sequence of "
"tuples."
msgstr ""
"``django.newforms.forms.SortedDictFromList`` 已被移除。``django.utils."
"datastructures.SortedDict`` 现在可以通过元组序列进行实例化。"

msgid "To update your code:"
msgstr "要更新你的代码："

msgid ""
"Use ``django.utils.datastructures.SortedDict`` wherever you were using "
"``django.newforms.forms.SortedDictFromList``."
msgstr ""
"在原先使用 ``django.newforms.forms.SortedDictFromList`` 的地方，现在应该使用 "
"``django.utils.datastructures.SortedDict``。"

msgid ""
"Because ``django.utils.datastructures.SortedDict.copy`` doesn't return a "
"deepcopy as ``SortedDictFromList.copy()`` did, you will need to update your "
"code if you were relying on a deepcopy. Do this by using ``copy.deepcopy`` "
"directly."
msgstr ""
"因为 ``django.utils.datastructures.SortedDict.copy`` 不像 "
"``SortedDictFromList.copy()`` 那样返回深拷贝，如果你依赖于深拷贝，你需要更新"
"你的代码。通过直接使用 ``copy.deepcopy`` 来实现这一点。"

msgid "Database backend functions"
msgstr "数据库后端函数"

msgid "Database backend functions have been renamed"
msgstr "数据库后端函数已经改名。"

msgid ""
"Almost *all* of the database backend-level functions have been renamed and/"
"or relocated. None of these were documented, but you'll need to change your "
"code if you're using any of these functions, all of which are in :mod:"
"`django.db`:"
msgstr ""
"几乎所有数据库后端级别的函数都已被重命名和/或移动。虽然这些函数没有被文档化，"
"但如果你使用了其中的任何一个函数，你需要修改你的代码，所有这些函数都在 :mod:"
"`django.db` 中："

msgid "``backend.get_autoinc_sql``"
msgstr "``backend.get_autoinc_sql``"

msgid "``connection.ops.autoinc_sql``"
msgstr "``connection.ops.autoinc_sql``"

msgid "``backend.get_date_extract_sql``"
msgstr "``backend.get_date_extract_sql``"

msgid "``connection.ops.date_extract_sql``"
msgstr "``connection.ops.date_extract_sql``"

msgid "``backend.get_date_trunc_sql``"
msgstr "``backend.get_date_trunc_sql``"

msgid "``connection.ops.date_trunc_sql``"
msgstr "``connection.ops.date_trunc_sql``"

msgid "``backend.get_datetime_cast_sql``"
msgstr "``backend.get_datetime_cast_sql``"

msgid "``connection.ops.datetime_cast_sql``"
msgstr "``connection.ops.datetime_cast_sql``"

msgid "``backend.get_deferrable_sql``"
msgstr "``backend.get_deferrable_sql``"

msgid "``connection.ops.deferrable_sql``"
msgstr "``connection.ops.deferrable_sql``"

msgid "``backend.get_drop_foreignkey_sql``"
msgstr "``backend.get_drop_foreignkey_sql``"

msgid "``connection.ops.drop_foreignkey_sql``"
msgstr "``connection.ops.drop_foreignkey_sql``"

msgid "``backend.get_fulltext_search_sql``"
msgstr "``backend.get_fulltext_search_sql``"

msgid "``connection.ops.fulltext_search_sql``"
msgstr "``connection.ops.fulltext_search_sql``"

msgid "``backend.get_last_insert_id``"
msgstr "``backend.get_last_insert_id``"

msgid "``connection.ops.last_insert_id``"
msgstr "``connection.ops.last_insert_id``"

msgid "``backend.get_limit_offset_sql``"
msgstr "``backend.get_limit_offset_sql``"

msgid "``connection.ops.limit_offset_sql``"
msgstr "``connection.ops.limit_offset_sql``"

msgid "``backend.get_max_name_length``"
msgstr "``backend.get_max_name_length``"

msgid "``connection.ops.max_name_length``"
msgstr "``connection.ops.max_name_length``"

msgid "``backend.get_pk_default_value``"
msgstr "``backend.get_pk_default_value``"

msgid "``connection.ops.pk_default_value``"
msgstr "``connection.ops.pk_default_value``"

msgid "``backend.get_random_function_sql``"
msgstr "``backend.get_random_function_sql``"

msgid "``connection.ops.random_function_sql``"
msgstr "``connection.ops.random_function_sql``"

msgid "``backend.get_sql_flush``"
msgstr "``backend.get_sql_flush``"

msgid "``connection.ops.sql_flush``"
msgstr "``connection.ops.sql_flush``"

msgid "``backend.get_sql_sequence_reset``"
msgstr "``backend.get_sql_sequence_reset``"

msgid "``connection.ops.sequence_reset_sql``"
msgstr "``connection.ops.sequence_reset_sql``"

msgid "``backend.get_start_transaction_sql``"
msgstr "``backend.get_start_transaction_sql``"

msgid "``connection.ops.start_transaction_sql``"
msgstr "``connection.ops.start_transaction_sql``"

msgid "``backend.get_tablespace_sql``"
msgstr "``backend.get_tablespace_sql``"

msgid "``connection.ops.tablespace_sql``"
msgstr "``connection.ops.tablespace_sql``"

msgid "``backend.quote_name``"
msgstr "``backend.quote_name``"

msgid "``connection.ops.quote_name``"
msgstr "``connection.ops.quote_name``"

msgid "``backend.get_query_set_class``"
msgstr "``backend.get_query_set_class``"

msgid "``connection.ops.query_set_class``"
msgstr "``connection.ops.query_set_class``"

msgid "``backend.get_field_cast_sql``"
msgstr "``backend.get_field_cast_sql``"

msgid "``connection.ops.field_cast_sql``"
msgstr "``connection.ops.field_cast_sql``"

msgid "``backend.get_drop_sequence``"
msgstr "``backend.get_drop_sequence``"

msgid "``connection.ops.drop_sequence_sql``"
msgstr "``connection.ops.drop_sequence_sql``"

msgid "``backend.OPERATOR_MAPPING``"
msgstr "``backend.OPERATOR_MAPPING``"

msgid "``connection.operators``"
msgstr "``connection.operators``"

msgid "``backend.allows_group_by_ordinal``"
msgstr "``backend.allows_group_by_ordinal``"

msgid "``connection.features.allows_group_by_ordinal``"
msgstr "``connection.features.allows_group_by_ordinal``"

msgid "``backend.allows_unique_and_pk``"
msgstr "``backend.allows_unique_and_pk``"

msgid "``connection.features.allows_unique_and_pk``"
msgstr "``connection.features.allows_unique_and_pk``"

msgid "``backend.autoindexes_primary_keys``"
msgstr "``backend.autoindexes_primary_keys``"

msgid "``connection.features.autoindexes_primary_keys``"
msgstr "``connection.features.autoindexes_primary_keys``"

msgid "``backend.needs_datetime_string_cast``"
msgstr "``backend.needs_datetime_string_cast``"

msgid "``connection.features.needs_datetime_string_cast``"
msgstr "``connection.features.needs_datetime_string_cast``"

msgid "``backend.needs_upper_for_iops``"
msgstr "``backend.needs_upper_for_iops``"

msgid "``connection.features.needs_upper_for_iops``"
msgstr "``connection.features.needs_upper_for_iops``"

msgid "``backend.supports_constraints``"
msgstr "``backend.supports_constraints``"

msgid "``connection.features.supports_constraints``"
msgstr "``connection.features.supports_constraints``"

msgid "``backend.supports_tablespaces``"
msgstr "``backend.supports_tablespaces``"

msgid "``connection.features.supports_tablespaces``"
msgstr "``connection.features.supports_tablespaces``"

msgid "``backend.uses_case_insensitive_names``"
msgstr "``backend.uses_case_insensitive_names``"

msgid "``connection.features.uses_case_insensitive_names``"
msgstr "``connection.features.uses_case_insensitive_names``"

msgid "``backend.uses_custom_queryset``"
msgstr "``backend.uses_custom_queryset``"

msgid "``connection.features.uses_custom_queryset``"
msgstr "``connection.features.uses_custom_queryset``"

msgid "Django 1.0.1 release notes"
msgstr "Django 1.0.1 版本发行说明"

msgid "Welcome to Django 1.0.1!"
msgstr "欢迎来到 Django 1.0.1 版本！"

msgid ""
"This is the first \"bugfix\" release in the Django 1.0 series, improving the "
"stability and performance of the Django 1.0 codebase. As such, Django 1.0.1 "
"contains no new features (and, pursuant to :doc:`our compatibility policy </"
"misc/api-stability/>`, maintains backwards compatibility with Django 1.0), "
"but does contain a number of fixes and other improvements. Django 1.0.1 is a "
"recommended upgrade for any development or deployment currently using or "
"targeting Django 1.0."
msgstr ""
"这是 Django 1.0 系列的第一个“修复错误”版本，改进了 Django 1.0 代码库的稳定性"
"和性能。因此，Django 1.0.1 不包含新功能（根据 :doc:`我们的兼容性政策 </misc/"
"api-stability/>`，保持了与 Django 1.0 的向后兼容性），但包含了许多修复和其他"
"改进。Django 1.0.1 是任何当前使用或针对 Django 1.0 的开发或部署的推荐升级版"
"本。"

msgid "Fixes and improvements in Django 1.0.1"
msgstr "Django 1.0.1 中的修正和改进"

msgid ""
"Django 1.0.1 contains over two hundred fixes to the original Django 1.0 "
"codebase; full details of every fix are available in `the history of the 1.0."
"X branch`_, but here are some of the highlights:"
msgstr ""
"Django 1.0.1 包含了对原始 Django 1.0 代码库的两百多个修复；关于每个修复的详细"
"信息可以在 `1.0.X 分支的历史记录`_ 中找到，以下是一些亮点："

msgid ""
"Several fixes in ``django.contrib.comments``, pertaining to RSS feeds of "
"comments, default ordering of comments and the XHTML and "
"internationalization of the default templates for comments."
msgstr ""
"在 ``django.contrib.comments`` 中进行了一些修复，涉及到评论的 RSS 订阅、评论"
"的默认排序以及评论默认模板的 XHTML 和国际化。"

msgid ""
"Multiple fixes for Django's support of Oracle databases, including "
"pagination support for GIS QuerySets, more efficient slicing of results and "
"improved introspection of existing databases."
msgstr ""
"对于 Django 对 Oracle 数据库的支持进行了多个修复，包括对 GIS QuerySets 的分页"
"支持，更高效的结果切片和对现有数据库的改进的内省。"

msgid ""
"Several fixes for query support in the Django object-relational mapper, "
"including repeated setting and resetting of ordering and fixes for working "
"with ``INSERT``-only queries."
msgstr ""
"Django 对象关系映射中的查询支持修复，包括重复设置和重置排序以及与仅支持 "
"``INSERT`` 查询的修复。"

msgid "Multiple fixes for inline forms in formsets."
msgstr "对于表单集中的内联表单进行了多个修复。"

msgid ""
"Multiple fixes for ``unique`` and ``unique_together`` model constraints in "
"automatically-generated forms."
msgstr ""
"对于自动生成的表单中的 ``unique`` 和 ``unique_together`` 模型约束进行了多个修"
"复。"

msgid ""
"Fixed support for custom callable ``upload_to`` declarations when handling "
"file uploads through automatically-generated forms."
msgstr ""
"修复了通过自动生成的表单处理文件上传时，对自定义可调用的 ``upload_to`` 声明的"
"支持。"

msgid ""
"Fixed support for sorting an admin change list based on a callable "
"attributes in ``list_display``."
msgstr "修复了基于`list_display`中的可调用属性来排序管理更改列表的支持。"

msgid ""
"A fix to the application of autoescaping for literal strings passed to the "
"``join`` template filter. Previously, literal strings passed to ``join`` "
"were automatically escaped, contrary to :ref:`the documented behavior for "
"autoescaping and literal strings <string-literals-and-automatic-escaping>`. "
"Literal strings passed to ``join`` are no longer automatically escaped, "
"meaning you must now manually escape them; this is an incompatibility if you "
"were relying on this bug, but not if you were relying on escaping behaving "
"as documented."
msgstr ""
"修复了自动转义应用于传递给 ``join`` 模板过滤器的文字字符串的问题。以前，传递"
"给 ``join`` 的文字字符串会自动进行转义，与 :ref:`文档中自动转义和文字字符串的"
"记录行为 <string-literals-and-automatic-escaping>` 相矛盾。现在，传递给 "
"``join`` 的文字字符串不再自动进行转义，这意味着你现在必须手动进行转义；如果你"
"依赖于这个错误，这是一个不兼容的变化，但如果你依赖于转义的行为与文档一致，那"
"么就没有问题。"

msgid ""
"Improved and expanded translation files for many of the languages Django "
"supports by default."
msgstr "对 Django 默认支持的许多语言进行了改进和扩展的翻译文件。"

msgid ""
"And as always, a large number of improvements to Django's documentation, "
"including both corrections to existing documents and expanded and new "
"documentation."
msgstr ""
"一如既往地，对 Django 的文档进行了大量改进，包括对现有文档的修正和扩展以及全"
"新的文档。"

msgid "Django 1.0.2 release notes"
msgstr "Django 1.0.2 版本发行说明"

msgid "Welcome to Django 1.0.2!"
msgstr "欢迎来到 Django 1.0.2 版本！"

msgid ""
"This is the second \"bugfix\" release in the Django 1.0 series, improving "
"the stability and performance of the Django 1.0 codebase. As such, Django "
"1.0.2 contains no new features (and, pursuant to :doc:`our compatibility "
"policy </misc/api-stability>`, maintains backwards compatibility with Django "
"1.0.0), but does contain a number of fixes and other improvements. Django "
"1.0.2 is a recommended upgrade for any development or deployment currently "
"using or targeting Django 1.0."
msgstr ""
"这是 Django 1.0 系列的第二个“修复错误”版本，改进了 Django 1.0 代码库的稳定性"
"和性能。因此，Django 1.0.2 不包含新功能（根据我们的兼容性政策，保持了与 "
"Django 1.0.0 的向后兼容性），但包含了许多修复和其他改进。Django 1.0.2 是任何"
"当前使用或针对 Django 1.0 的开发或部署的推荐升级版本。"

msgid "Fixes and improvements in Django 1.0.2"
msgstr "Django 1.0.2 中的修正和改进"

msgid ""
"The primary reason behind this release is to remedy an issue in the recently-"
"released Django 1.0.1; the packaging scripts used for Django 1.0.1 omitted "
"some directories from the final release package, including one directory "
"required by ``django.contrib.gis`` and part of Django's unit-test suite."
msgstr ""
"这个版本发布的主要原因是修复了最近发布的 Django 1.0.1 中的一个问题；Django "
"1.0.1 使用的打包脚本在最终发布包中省略了一些目录，包括 ``django.contrib."
"gis`` 需要的一个目录以及 Django 单元测试套件的一部分。"

msgid ""
"Django 1.0.2 contains updated packaging scripts, and the release package "
"contains the directories omitted from Django 1.0.1. As such, this release "
"contains all of the fixes and improvements from Django 1.0.1; see :doc:`the "
"Django 1.0.1 release notes </releases/1.0.1>` for details."
msgstr ""
"Django 1.0.2 包含更新的打包脚本，并且发布包中包含了在 Django 1.0.1 中遗漏的目"
"录。因此，这个版本包含了来自 Django 1.0.1 的所有修复和改进；请查看 :doc:"
"`Django 1.0.1 发布说明 </releases/1.0.1>` 以获取详细信息。"

msgid "Additionally, in the period since Django 1.0.1 was released:"
msgstr "此外，在发布 Django 1.0.1 之后的一段时间里："

msgid "Updated Hebrew and Danish translations have been added."
msgstr "已添加更新的希伯来语和丹麦语翻译。"

msgid ""
"The default ``__repr__`` method of Django models has been made more robust "
"in the face of bad Unicode data coming from the ``__unicode__`` method; "
"rather than raise an exception in such cases, ``repr()`` will now contain "
"the string \"[Bad Unicode data]\" in place of the invalid Unicode."
msgstr ""
"Django 模型的默认 ``__repr__`` 方法在处理来自 ``__unicode__`` 方法的坏 "
"Unicode 数据时变得更加健壮；在这种情况下，不会引发异常，而是 ``repr()`` 将包"
"含字符串 \"[Bad Unicode data]\" 来替代无效的 Unicode。"

msgid ""
"A bug involving the interaction of Django's ``SafeUnicode`` class and the "
"MySQL adapter has been resolved; ``SafeUnicode`` instances (generated, for "
"example, by template rendering) can now be assigned to model attributes and "
"saved to MySQL without requiring an explicit intermediate cast to "
"``unicode``."
msgstr ""
"已解决了与 Django 的 ``SafeUnicode`` 类和 MySQL 适配器交互的一个 bug；现在可"
"以将 ``SafeUnicode`` 实例（例如，由模板渲染生成）分配给模型属性并保存到 "
"MySQL，而无需显式的中间强制转换为 ``unicode``。"

msgid ""
"A bug affecting filtering on a nullable ``DateField`` in SQLite has been "
"resolved."
msgstr "已解决了在 SQLite 中对可为空的 ``DateField`` 进行过滤时出现的 bug。"

msgid ""
"Several updates and improvements have been made to Django's documentation."
msgstr "对 Django 的文档进行了多次更新和改进。"

msgid "Django 1.1 release notes"
msgstr "Django 1.1 版本发行说明"

msgid "July 29, 2009"
msgstr "2009 年 7 月 29 日"

msgid "Welcome to Django 1.1!"
msgstr "欢迎来到 Django 1.1 版本！"

msgid ""
"Django 1.1 includes a number of nifty :ref:`new features <whats-new-1.1>`, "
"lots of bug fixes, and an easy upgrade path from Django 1.0."
msgstr ""
"Django 1.1 包含了许多 :ref:`新功能 <whats-new-1.1>`、大量的 bug 修复，以及从 "
"Django 1.0 升级的简便路径。"

msgid "Backwards-incompatible changes in 1.1"
msgstr "1.1 中的不向后兼容的变更"

msgid ""
"Django has a policy of :doc:`API stability </misc/api-stability>`. This "
"means that, in general, code you develop against Django 1.0 should continue "
"to work against 1.1 unchanged. However, we do sometimes make backwards-"
"incompatible changes if they're necessary to resolve bugs, and there are a "
"handful of such (minor) changes between Django 1.0 and Django 1.1."
msgstr ""
"Django 具有一项 :doc:`API 稳定性 </misc/api-stability>` 的政策。这意味着通常"
"情况下，你在 Django 1.0 上开发的代码应该可以在 1.1 上无需修改继续运行。然而，"
"如果需要解决 bug，我们有时会进行不兼容的变更，而在 Django 1.0 和 Django 1.1 "
"之间存在一些这样的（小的）变更。"

msgid ""
"Before upgrading to Django 1.1 you should double-check that the following "
"changes don't impact you, and upgrade your code if they do."
msgstr ""
"在升级到 Django 1.1 之前，你应该仔细检查以下更改是否会影响你的代码，并在需要"
"时进行代码升级。"

msgid "Changes to constraint names"
msgstr "约束名称的更改"

msgid ""
"Django 1.1 modifies the method used to generate database constraint names so "
"that names are consistent regardless of machine word size. This change is "
"backwards incompatible for some users."
msgstr ""
"Django 1.1 修改了生成数据库约束名称的方法，使得名称在不同机器字长下保持一致。"
"这个改变对一些用户来说是不兼容的。"

msgid ""
"If you are using a 32-bit platform, you're off the hook; you'll observe no "
"differences as a result of this change."
msgstr ""
"如果你使用的是 32 位平台，你就不用担心了；你不会因为这个改变而观察到任何差"
"异。"

msgid ""
"However, **users on 64-bit platforms may experience some problems** using "
"the ``reset`` management command. Prior to this change, 64-bit platforms "
"would generate a 64-bit, 16 character digest in the constraint name; for "
"example:"
msgstr ""
"然而，**在 64 位平台上的用户可能会在使用 ``reset`` 管理命令时遇到一些问题**。"
"在这个更改之前，64 位平台会生成一个 64 位、16 个字符的约束名称；例如："

msgid ""
"Following this change, all platforms, regardless of word size, will generate "
"a 32-bit, 8 character digest in the constraint name; for example:"
msgstr ""
"在这个改变之后，所有平台（无论字长如何）都将在约束名称中生成一个 32 位、8 个"
"字符的摘要；例如："

msgid ""
"As a result of this change, you will not be able to use the ``reset`` "
"management command on any table made by a 64-bit machine. This is because "
"the new generated name will not match the historically generated name; as a "
"result, the SQL constructed by the reset command will be invalid."
msgstr ""
"由于这个更改，你将无法在由 64 位机器创建的任何表上使用 ``reset`` 管理命令。这"
"是因为新生成的名称将不匹配历史生成的名称；因此，reset 命令构建的 SQL 将无效。"

msgid ""
"If you need to reset an application that was created with 64-bit "
"constraints, you will need to manually drop the old constraint prior to "
"invoking ``reset``."
msgstr ""
"如果你需要重置一个使用 64 位约束创建的应用程序，你需要在调用 ``reset`` 命令之"
"前手动删除旧的约束。"

msgid "Test cases are now run in a transaction"
msgstr "现在测试用例在一个事务中运行"

msgid ""
"Django 1.1 runs tests inside a transaction, allowing better test performance "
"(see `test performance improvements`_ for details)."
msgstr ""
"Django 1.1 在事务内运行测试，从而提高了测试性能（详细信息请参见 `测试性能改进"
"`_）。"

msgid ""
"This change is slightly backwards incompatible if existing tests need to "
"test transactional behavior, if they rely on invalid assumptions about the "
"test environment, or if they require a specific test case ordering."
msgstr ""
"如果现有的测试需要测试事务行为，如果它们依赖于对测试环境的无效假设，或者如果"
"它们需要特定的测试用例顺序，那么这个改变在某种程度上是不兼容的。"

msgid ""
"For these cases, :class:`~django.test.TransactionTestCase` can be used "
"instead. This is a just a quick fix to get around test case errors revealed "
"by the new rollback approach; in the long-term tests should be rewritten to "
"correct the test case."
msgstr ""
"对于这些情况，可以使用 :class:`~django.test.TransactionTestCase`。这只是一个"
"快速的修复方法，用来解决新的回滚方式暴露出的测试用例错误；从长远来看，应该重"
"新编写测试用例以纠正问题。"

msgid "Removed ``SetRemoteAddrFromForwardedFor`` middleware"
msgstr "移除了 ``SetRemoteAddrFromForwardedFor`` 中间件"

msgid ""
"For convenience, Django 1.0 included an optional middleware class -- "
"``django.middleware.http.SetRemoteAddrFromForwardedFor`` -- which updated "
"the value of ``REMOTE_ADDR`` based on the HTTP ``X-Forwarded-For`` header "
"commonly set by some proxy configurations."
msgstr ""
"为了方便，Django 1.0 包括了一个可选的中间件类 -- ``django.middleware.http."
"SetRemoteAddrFromForwardedFor`` -- 该类基于一些代理配置常常设置的 HTTP ``X-"
"Forwarded-For`` 头部更新了 ``REMOTE_ADDR`` 的值。"

msgid ""
"It has been demonstrated that this mechanism cannot be made reliable enough "
"for general-purpose use, and that (despite documentation to the contrary) "
"its inclusion in Django may lead application developers to assume that the "
"value of ``REMOTE_ADDR`` is \"safe\" or in some way reliable as a source of "
"authentication."
msgstr ""
"已经证明这个机制不能够可靠到足以用于通用用途，并且（尽管文档中有不同的说明）"
"它包含在 Django 中可能会导致应用程序开发者假设 ``REMOTE_ADDR`` 的值是“安全"
"的”或以某种方式可靠作为身份验证的来源。"

msgid ""
"While not directly a security issue, we've decided to remove this middleware "
"with the Django 1.1 release. It has been replaced with a class that does "
"nothing other than raise a ``DeprecationWarning``."
msgstr ""
"尽管这不是一个直接的安全问题，但我们决定在 Django 1.1 版本中删除这个中间件。"
"它已被替换为一个什么都不做，只会引发 ``DeprecationWarning`` 的类。"

msgid "If you've been relying on this middleware, the easiest upgrade path is:"
msgstr "如果你一直依赖这个中间件，最简单的升级路径是："

msgid "Examine `the code as it existed before it was removed`__."
msgstr "检查 `在被移除之前的代码`__。"

msgid ""
"Verify that it works correctly with your upstream proxy, modifying it to "
"support your particular proxy (if necessary)."
msgstr "验证它是否与你的上游代理正确工作，并根据需要修改以支持你的特定代理。"

msgid ""
"Introduce your modified version of ``SetRemoteAddrFromForwardedFor`` as a "
"piece of middleware in your own project."
msgstr ""
"在你自己的项目中将我修改过的版本的 ``SetRemoteAddrFromForwardedFor`` 作为中间"
"件引入。"

msgid "Names of uploaded files are available later"
msgstr "上传文件的名称稍后可用"

msgid ""
"In Django 1.0, files uploaded and stored in a model's :class:`FileField` "
"were saved to disk before the model was saved to the database. This meant "
"that the actual file name assigned to the file was available before saving. "
"For example, it was available in a model's pre-save signal handler."
msgstr ""
"在 Django 1.0 中，上传并存储在模型的 :class:`FileField` 中的文件在模型保存到"
"数据库之前会被保存到磁盘。这意味着在保存之前可以获取分配给文件的实际文件名。"
"例如，在模型的预保存信号处理程序中可以获取到它。"

msgid ""
"In Django 1.1 the file is saved as part of saving the model in the database, "
"so the actual file name used on disk cannot be relied on until *after* the "
"model has been saved."
msgstr ""
"在 Django 1.1 中，文件会作为保存模型到数据库的一部分而被保存，因此在模型被保"
"存之前不能依赖于磁盘上使用的实际文件名。"

msgid "Changes to how model formsets are saved"
msgstr "模型表单集的保存方式的变更"

msgid ""
"In Django 1.1, :class:`~django.forms.models.BaseModelFormSet` now calls "
"``ModelForm.save()``."
msgstr ""
"在Django 1.1中，:class:`~ Django .forms.models. `BaseModelFormSet`现在调用"
"`ModelForm.save()`。"

msgid ""
"This is backwards-incompatible if you were modifying ``self.initial`` in a "
"model formset's ``__init__``, or if you relied on the internal "
"``_total_form_count`` or ``_initial_form_count`` attributes of BaseFormSet. "
"Those attributes are now public methods."
msgstr ""
"如果你在模型表单集的 ``__init__`` 中修改了 ``self.initial``，或者依赖于 "
"BaseFormSet 的内部属性 ``_total_form_count`` 或 ``_initial_form_count``，这是"
"不兼容的。现在这些属性已经变成了公共方法。"

msgid "Fixed the ``join`` filter's escaping behavior"
msgstr "修复了\"join\"过滤器的转义行为"

msgid ""
"The :tfilter:`join` filter no longer escapes the literal value that is "
"passed in for the connector."
msgstr ":tfilter:`join` 过滤器不再转义传递给连接器的字面量。"

msgid ""
"This is backwards incompatible for the special situation of the literal "
"string containing one of the five special HTML characters. Thus, if you were "
"writing ``{{ foo|join:\"&\" }}``, you now have to write ``{{ foo|join:\"&amp;"
"\" }}``."
msgstr ""
"这对于包含五个特殊 HTML 字符之一的文字字符串的特殊情况是不兼容的。因此，如果"
"你之前写的是 ``{{ foo|join:\"&\" }}``，现在你必须写成 ``{{ foo|join:\"&amp;"
"\" }}``。"

msgid ""
"The previous behavior was a bug and contrary to what was documented and "
"expected."
msgstr "先前的行为是一个错误，并且与所记录和预期的不符。"

msgid "Permanent redirects and the ``redirect_to()`` generic view"
msgstr "永久重定向和`redirect_to()`通用视图"

msgid ""
"Django 1.1 adds a ``permanent`` argument to the ``django.views.generic."
"simple.redirect_to()`` view. This is technically backwards-incompatible if "
"you were using the ``redirect_to`` view with a format-string key called "
"'permanent', which is highly unlikely."
msgstr ""
"Django 1.1 在 ``django.views.generic.simple.redirect_to()`` 视图中添加了一个 "
"``permanent`` 参数。如果你使用 ``redirect_to`` 视图并将格式字符串键命名为 "
"'permanent'，这在技术上是向后不兼容的，这是极不可能的。"

msgid "Features deprecated in 1.1"
msgstr "在 1.1 中被废弃的功能"

msgid "One feature has been marked as deprecated in Django 1.1:"
msgstr "在 Django 1.1 中，一个功能已被标记为废弃。"

msgid ""
"You should no longer use ``AdminSite.root()`` to register that admin views. "
"That is, if your URLconf contains the line::"
msgstr ""
"你不应再使用 ``AdminSite.root()`` 来注册管理员视图。也就是说，如果你的 URL 配"
"置包含以下行："

msgid "You should change it to read::"
msgstr "你应该将其修改为如下所示："

msgid ""
"You should begin to remove use of this feature from your code immediately."
msgstr "你应立即开始从你的代码中移除对该功能的使用。"

msgid ""
"``AdminSite.root`` will raise a ``PendingDeprecationWarning`` if used in "
"Django 1.1. This warning is hidden by default. In Django 1.2, this warning "
"will be upgraded to a ``DeprecationWarning``, which will be displayed "
"loudly. Django 1.3 will remove ``AdminSite.root()`` entirely."
msgstr ""
"在 Django 1.1 中，如果使用 ``AdminSite.root``，将会引发一个 "
"``PendingDeprecationWarning`` 警告，默认情况下这个警告是隐藏的。在 Django "
"1.2 中，这个警告将升级为 ``DeprecationWarning``，并且会被明显显示出来。在 "
"Django 1.3 中，将完全删除 ``AdminSite.root()``。"

msgid ""
"For more details on our deprecation policies and strategy, see :doc:`/"
"internals/release-process`."
msgstr ""
"有关我们的废弃政策和策略的更多详细信息，请参阅 :doc:`/internals/release-"
"process`。"

msgid "What's new in Django 1.1"
msgstr "Django 1.1 中的新功能有哪些？"

msgid ""
"Quite a bit: since Django 1.0, we've made 1,290 code commits, fixed 1,206 "
"bugs, and added roughly 10,000 lines of documentation."
msgstr ""
"相当多：自 Django 1.0 以来，我们进行了 1290 次代码提交，修复了 1206 个错误，"
"并增加了大约 10000 行文档。"

msgid "The major new features in Django 1.1 are:"
msgstr "Django 1.1 的主要新功能有："

msgid "ORM improvements"
msgstr "ORM 改进"

msgid ""
"Two major enhancements have been added to Django's object-relational mapper "
"(ORM): aggregate support, and query expressions."
msgstr ""
"Django 的对象关系映射器（ORM）已经增加了两个重要的增强功能：聚合支持和查询表"
"达式。"

msgid "Aggregate support"
msgstr "聚合支持"

msgid ""
"It's now possible to run SQL aggregate queries (i.e. ``COUNT()``, ``MAX()``, "
"``MIN()``, etc.) from within Django's ORM. You can choose to either return "
"the results of the aggregate directly, or else annotate the objects in a :"
"class:`~django.db.models.query.QuerySet` with the results of the aggregate "
"query."
msgstr ""
"现在可以从 Django 的 ORM 中运行 SQL 聚合查询（例如 ``COUNT()``、``MAX()``、"
"``MIN()`` 等）。你可以选择直接返回聚合的结果，或者在 :class:`~django.db."
"models.query.QuerySet` 中使用聚合查询的结果来注释对象。"

msgid ""
"This feature is available as new :meth:`~django.db.models.query.QuerySet."
"aggregate` and :meth:`~django.db.models.query.QuerySet.annotate` methods, "
"and is covered in detail in :doc:`the ORM aggregation documentation </topics/"
"db/aggregation>`."
msgstr ""
"这个功能可以通过新的 :meth:`~django.db.models.query.QuerySet.aggregate` 和 :"
"meth:`~django.db.models.query.QuerySet.annotate` 方法来使用，详细信息可以在 :"
"doc:`ORM 聚合文档 </topics/db/aggregation>` 中找到。"

msgid "Query expressions"
msgstr "查询表达式"

msgid ""
"Queries can now refer to another field on the query and can traverse "
"relationships to refer to fields on related models. This is implemented in "
"the new :class:`~django.db.models.F` object; for full details, including "
"examples, consult the :class:`F expressions documentation <django.db.models."
"F>`."
msgstr ""
"现在查询可以引用查询中的另一个字段，并且可以遍历关系引用相关模型上的字段。这"
"是通过新的 :class:`~django.db.models.F` 对象实现的；有关完整的详细信息，包括"
"示例，请查阅 :class:`F 表达式文档 <django.db.models.F>`。"

msgid "Model improvements"
msgstr "模型改进"

msgid "A number of features have been added to Django's model layer:"
msgstr "Django 的模型层已添加了多项功能："

msgid "\"Unmanaged\" models"
msgstr "\"未管理\"模型"

msgid ""
"You can now control whether or not Django manages the life-cycle of the "
"database tables for a model using the :attr:`~Options.managed` model option. "
"This defaults to ``True``, meaning that Django will create the appropriate "
"database tables in ``syncdb`` and remove them as part of the ``reset`` "
"command. That is, Django *manages* the database table's lifecycle."
msgstr ""
"现在，你可以使用 :attr:`~Options.managed` 模型选项来控制 Django 是否管理模型"
"的数据库表的生命周期。默认值是 ``True``，这意味着 Django 将在 ``syncdb`` 中创"
"建相应的数据库表，并在 ``reset`` 命令中删除它们。换句话说，Django *管理* 数据"
"库表的生命周期。"

msgid ""
"If you set this to ``False``, however, no database table creating or "
"deletion will be automatically performed for this model. This is useful if "
"the model represents an existing table or a database view that has been "
"created by some other means."
msgstr ""
"然而，如果将其设置为 ``False``，则不会自动执行该模型的数据库表创建或删除操"
"作。如果该模型代表已存在的表格或者是由其他方式创建的数据库视图，这会很有用。"

msgid ""
"For more details, see the documentation for the :attr:`~Options.managed` "
"option."
msgstr "更多详细信息，请查看 :attr:`~Options.managed` 选项的文档。"

msgid "Proxy models"
msgstr "代理模型"

msgid ""
"You can now create :ref:`proxy models <proxy-models>`: subclasses of "
"existing models that only add Python-level (rather than database-level) "
"behavior and aren't represented by a new table. That is, the new model is a "
"*proxy* for some underlying model, which stores all the real data."
msgstr ""
"现在你可以创建 :ref:`代理模型 <proxy-models>`：这些是现有模型的子类，只添加 "
"Python 级别（而不是数据库级别）的行为，并且不代表一个新的表格。也就是说，新模"
"型是某个底层模型的 *代理*，而底层模型存储了所有真实数据。"

msgid ""
"All the details can be found in the :ref:`proxy models documentation <proxy-"
"models>`. This feature is similar on the surface to unmanaged models, so the "
"documentation has an explanation of :ref:`how proxy models differ from "
"unmanaged models <proxy-vs-unmanaged-models>`."
msgstr ""
"所有详细信息可以在 :ref:`代理模型文档 <proxy-models>` 中找到。这个功能在表面"
"上与未管理的模型相似，因此文档中有一个解释 :ref:`代理模型与未管理模型的不同之"
"处 <proxy-vs-unmanaged-models>`。"

msgid "Deferred fields"
msgstr "延迟字段"

msgid ""
"In some complex situations, your models might contain fields which could "
"contain a lot of data (for example, large text fields), or require expensive "
"processing to convert them to Python objects. If you know you don't need "
"those particular fields, you can now tell Django not to retrieve them from "
"the database."
msgstr ""
"在某些复杂情况下，你的模型可能包含大量数据的字段（例如，大型文本字段），或者"
"需要耗费大量计算资源将其转换为 Python 对象。如果你确定不需要这些特定字段，现"
"在可以告诉 Django 不从数据库中检索它们。"

msgid ""
"You'll do this with the new queryset methods :meth:`~django.db.models.query."
"QuerySet.defer` and :meth:`~django.db.models.query.QuerySet.only`."
msgstr ""
"你可以使用新的查询集方法 :meth:`~django.db.models.query.QuerySet.defer` 和 :"
"meth:`~django.db.models.query.QuerySet.only` 来实现这一点。"

msgid "Testing improvements"
msgstr "测试改进"

msgid ""
"A few notable improvements have been made to the :doc:`testing framework </"
"topics/testing/index>`."
msgstr ":doc:`测试框架 </topics/testing/index>` 中已经进行了一些显著的改进。"

msgid "Test performance improvements"
msgstr "测试性能改进"

msgid ""
"Tests written using Django's :doc:`testing framework </topics/testing/"
"index>` now run dramatically faster (as much as 10 times faster in many "
"cases)."
msgstr ""
"使用 Django 的 :doc:`测试框架 </topics/testing/index>` 编写的测试现在运行速度"
"大幅提高（在许多情况下提高了多达 10 倍）。"

msgid ""
"This was accomplished through the introduction of transaction-based tests: "
"when using :class:`django.test.TestCase`, your tests will now be run in a "
"transaction which is rolled back when finished, instead of by flushing and "
"re-populating the database. This results in an immense speedup for most "
"types of unit tests. See the documentation for :class:`TestCase` and :class:"
"`TransactionTestCase` for a full description, and some important notes on "
"database support."
msgstr ""
"通过引入基于事务的测试来实现的：当使用 :class:`django.test.TestCase` 时，你的"
"测试现在将在一个事务中运行，测试结束后将回滚事务，而不是刷新和重新填充数据"
"库。这对于大多数类型的单元测试来说会极大地提速。请查看 :class:`TestCase` 和 :"
"class:`TransactionTestCase` 的文档以获取完整的描述，以及关于数据库支持的一些"
"重要说明。"

msgid "Test client improvements"
msgstr "测试客户端改进"

msgid ""
"A couple of small -- but highly useful -- improvements have been made to the "
"test client:"
msgstr "测试客户端进行了几项小而非常有用的改进："

msgid ""
"The test :class:`Client` now can automatically follow redirects with the "
"``follow`` argument to :meth:`Client.get` and :meth:`Client.post`. This "
"makes testing views that issue redirects simpler."
msgstr ""
"测试中的 :class:`Client` 现在可以通过 :meth:`Client.get` 和 :meth:`Client."
"post` 的 ``follow`` 参数自动跟随重定向。这使得测试发出重定向的视图更加简单。"

msgid ""
"It's now easier to get at the template context in the response returned the "
"test client: you'll simply access the context as ``request.context[key]``. "
"The old way, which treats ``request.context`` as a list of contexts, one for "
"each rendered template in the inheritance chain, is still available if you "
"need it."
msgstr ""
"现在更容易获取测试客户端返回的响应中的模板上下文：你只需将上下文作为 "
"``request.context[key]`` 来访问。如果需要，仍然可以使用旧方式，该方式将 "
"``request.context`` 视为继承链中每个渲染模板的上下文列表。"

msgid "New admin features"
msgstr "新的管理功能"

msgid ""
"Django 1.1 adds a couple of nifty new features to Django's admin interface:"
msgstr "Django 1.1  在  Django  的管理界面中增加了几个很棒的新功能："

msgid "Editable fields on the change list"
msgstr "在更改列表上的可编辑字段"

msgid ""
"You can now make fields editable on the admin list views via the new :ref:"
"`list_editable <admin-list-editable>` admin option. These fields will show "
"up as form widgets on the list pages, and can be edited and saved in bulk."
msgstr ""
"现在你可以通过新的 :ref:`list_editable <admin-list-editable>` 管理选项在管理"
"员列表视图上使字段可编辑。这些字段将显示为表单小部件在列表页面上，并可以批量"
"编辑和保存。"

msgid "Admin \"actions\""
msgstr "管理界面的\"动作\""

msgid ""
"You can now define :doc:`admin actions </ref/contrib/admin/actions>` that "
"can perform some action to a group of models in bulk. Users will be able to "
"select objects on the change list page and then apply these bulk actions to "
"all selected objects."
msgstr ""
"现在你可以定义可以批量对一组模型执行某些操作的 :doc:`管理员操作 </ref/"
"contrib/admin/actions>`。用户将能够在更改列表页面上选择对象，然后将这些批量操"
"作应用于所有选定的对象。"

msgid ""
"Django ships with one pre-defined admin action to delete a group of objects "
"in one fell swoop."
msgstr "Django 默认提供了一个预定义的管理动作，可以一次性删除一组对象。"

msgid "Conditional view processing"
msgstr "条件视图处理"

msgid ""
"Django now has much better support for :doc:`conditional view processing </"
"topics/conditional-view-processing>` using the standard ``ETag`` and ``Last-"
"Modified`` HTTP headers. This means you can now easily short-circuit view "
"processing by testing less-expensive conditions. For many views this can "
"lead to a serious improvement in speed and reduction in bandwidth."
msgstr ""
"Django 现在对使用标准的 ``ETag`` 和 ``Last-Modified`` HTTP 头部的 :doc:`条件"
"视图处理 </topics/conditional-view-processing>` 提供了更好的支持。这意味着你"
"现在可以通过测试成本较低的条件来轻松地中断视图处理。对于许多视图来说，这可以"
"大大提高速度并减少带宽消耗。"

msgid "URL namespaces"
msgstr "URL 命名空间"

msgid ""
"Django 1.1 improves :ref:`named URL patterns <naming-url-patterns>` with the "
"introduction of URL \"namespaces.\""
msgstr ""
"Django 1.1 引入了 URL \"命名空间\"，提升了 :ref:`命名的 URL 模式 <naming-url-"
"patterns>`。"

msgid ""
"In short, this feature allows the same group of URLs, from the same "
"application, to be included in a Django URLConf multiple times, with varying "
"(and potentially nested) named prefixes which will be used when performing "
"reverse resolution. In other words, reusable applications like Django's "
"admin interface may be registered multiple times without URL conflicts."
msgstr ""
"简而言之，这个功能允许相同的应用程序中的同一组 URL 在 Django 的 URLConf 中多"
"次包含，使用不同（且可能嵌套）的命名前缀进行反向解析。换句话说，像 Django 的"
"管理界面这样的可重用应用程序可以多次注册而不会出现 URL 冲突。"

msgid ""
"For full details, see :ref:`the documentation on defining URL namespaces "
"<topics-http-defining-url-namespaces>`."
msgstr ""
"详细信息，请参阅 :ref:`关于定义 URL 命名空间的文档 <topics-http-defining-url-"
"namespaces>`。"

msgid "GeoDjango"
msgstr "GeoDjango"

msgid ""
"In Django 1.1, :doc:`GeoDjango </ref/contrib/gis/index>` (i.e. ``django."
"contrib.gis``) has several new features:"
msgstr ""
"在 Django 1.1 中，:doc:`GeoDjango </ref/contrib/gis/index>` （即 ``django."
"contrib.gis``）引入了一些新功能："

msgid ""
"Support for SpatiaLite_ -- a spatial database for SQLite -- as a spatial "
"backend."
msgstr "支持将 SpatiaLite_ （SQLite 的空间数据库）作为空间后端。"

msgid ""
"Geographic aggregates (``Collect``, ``Extent``, ``MakeLine``, ``Union``) and "
"``F`` expressions."
msgstr ""
"地理聚合函数（``Collect``、``Extent``、``MakeLine``、``Union``）和 ``F`` 表达"
"式。"

msgid ""
"New ``GeoQuerySet`` methods: ``collect``, ``geojson``, and ``snap_to_grid``."
msgstr ""
"新的 ``GeoQuerySet`` 方法：``collect``、``geojson`` 和 ``snap_to_grid``。"

msgid "A new list interface methods for ``GEOSGeometry`` objects."
msgstr "``GEOSGeometry`` 对象的新列表接口方法。"

msgid "For more details, see the GeoDjango documentation."
msgstr "要了解更多详细信息，请参阅 GeoDjango 文档。"

msgid "Other improvements"
msgstr "其他改进"

msgid "Other new features and changes introduced since Django 1.0 include:"
msgstr "自 Django 1.0 以来引入的其他新功能和更改包括："

msgid ""
"The :doc:`CSRF protection middleware </ref/csrf>` has been split into two "
"classes -- ``CsrfViewMiddleware`` checks incoming requests, and "
"``CsrfResponseMiddleware`` processes outgoing responses. The combined "
"``CsrfMiddleware`` class (which does both) remains for backwards-"
"compatibility, but using the split classes is now recommended in order to "
"allow fine-grained control of when and where the CSRF processing takes place."
msgstr ""
":doc:`CSRF 保护中间件 </ref/csrf>` 现在分成了两个类 -- "
"``CsrfViewMiddleware`` 用于检查传入请求，而 ``CsrfResponseMiddleware`` 用于处"
"理传出响应。合并的 ``CsrfMiddleware`` 类（同时处理两者）仍然存在以保持向后兼"
"容性，但现在建议使用拆分的类来允许精细控制 CSRF 处理发生的时间和地点。"

msgid ""
"``reverse()`` and code which uses it (e.g., the ``{% url %}`` template tag) "
"now works with URLs in Django's administrative site, provided that the admin "
"URLs are set up via ``include(admin.site.urls)`` (sending admin requests to "
"the ``admin.site.root`` view still works, but URLs in the admin will not be "
"\"reversible\" when configured this way)."
msgstr ""
"``reverse()`` 和使用它的代码（例如，``{% url %}`` 模板标签）现在可以在 "
"Django 的管理站点中使用，前提是通过 ``include(admin.site.urls)`` 设置了管理站"
"点的 URL（仍然可以通过将管理请求发送到 ``admin.site.root`` 视图来工作，但以这"
"种方式配置时，管理站点中的 URL 将无法“反向生成”）。"

msgid ""
"The ``include()`` function in Django URLconf modules can now accept "
"sequences of URL patterns (generated by ``patterns()``) in addition to "
"module names."
msgstr ""
"Django URLconf 模块中的 ``include()`` 函数现在可以接受 URL 模式的序列（由 "
"``patterns()`` 生成）以及模块名称。"

msgid ""
"Instances of Django forms (see :doc:`the forms overview </topics/forms/"
"index>`) now have two additional methods, ``hidden_fields()`` and "
"``visible_fields()``, which return the list of hidden -- i.e., ``<input "
"type=\"hidden\">`` -- and visible fields on the form, respectively."
msgstr ""
"Django 表单的实例（参见 :doc:`表单概述 </topics/forms/index>`）现在具有两个额"
"外的方法，``hidden_fields()`` 和 ``visible_fields()``，分别返回表单中隐藏字段"
"（即 ``<input type=\"hidden\">``）和可见字段的列表。"

msgid ""
"The ``redirect_to`` generic view now accepts an additional keyword argument "
"``permanent``. If ``permanent`` is ``True``, the view will emit an HTTP "
"permanent redirect (status code 301). If ``False``, the view will emit an "
"HTTP temporary redirect (status code 302)."
msgstr ""
"``redirect_to`` 通用视图现在接受一个额外的关键字参数 ``permanent``。如果 "
"``permanent`` 为 ``True``，视图将发出 HTTP 永久重定向（状态码 301）。如果为 "
"``False``，视图将发出 HTTP 临时重定向（状态码 302）。"

msgid ""
"A new database lookup type -- ``week_day`` -- has been added for "
"``DateField`` and ``DateTimeField``. This type of lookup accepts a number "
"between 1 (Sunday) and 7 (Saturday), and returns objects where the field "
"value matches that day of the week. See :ref:`the full list of lookup types "
"<field-lookups>` for details."
msgstr ""
"已经为 ``DateField`` 和 ``DateTimeField`` 添加了一个新的数据库查找类型 -- "
"``week_day``。这种查找类型接受一个介于 1（星期日）和 7（星期六）之间的数字，"
"并返回字段值匹配该周的对象。有关详细信息，请参阅 :ref:`查找类型的完整列表 "
"<field-lookups>`。"

msgid ""
"The ``{% for %}`` tag in Django's template language now accepts an optional "
"``{% empty %}`` clause, to be displayed when ``{% for %}`` is asked to loop "
"over an empty sequence. See :doc:`the list of built-in template tags </ref/"
"templates/builtins>` for examples of this."
msgstr ""
"Django 模板语言中的 ``{% for %}`` 标签现在接受一个可选的 ``{% empty %}`` 子"
"句，当 ``{% for %}`` 被要求循环遍历一个空序列时，可以显示该子句。有关示例，请"
"参阅 :doc:`内置模板标签列表 </ref/templates/builtins>`。"

msgid ""
"The :djadmin:`dumpdata` management command now accepts individual model "
"names as arguments, allowing you to export the data just from particular "
"models."
msgstr ""
":djadmin:`dumpdata` 管理命令现在接受单个模型名称作为参数，允许你仅导出特定模"
"型的数据。"

msgid ""
"There's a new :tfilter:`safeseq` template filter which works just like :"
"tfilter:`safe` for lists, marking each item in the list as safe."
msgstr ""
"新增了一个 :tfilter:`safeseq` 模板过滤器，与 :tfilter:`safe` 类似，但用于列"
"表，将列表中的每个项目标记为安全。"

msgid ""
":doc:`Cache backends </topics/cache>` now support ``incr()`` and ``decr()`` "
"commands to increment and decrement the value of a cache key. On cache "
"backends that support atomic increment/decrement -- most notably, the "
"memcached backend -- these operations will be atomic, and quite fast."
msgstr ""
":doc:`缓存后端 </topics/cache>` 现在支持 ``incr()`` 和 ``decr()`` 命令，用于"
"增加和减少缓存键的值。在支持原子增加/减少的缓存后端上，尤其是 memcached 后"
"端，这些操作将是原子的，而且非常快。"

msgid ""
"Django now can :doc:`easily delegate authentication to the web server </"
"howto/auth-remote-user>` via a new authentication backend that supports the "
"standard ``REMOTE_USER`` environment variable used for this purpose."
msgstr ""
"Django 现在可以通过一个新的身份验证后端轻松地将身份验证委托给 Web 服务器，该"
"后端支持用于此目的的标准 ``REMOTE_USER`` 环境变量。请参阅 :doc:`如何将身份验"
"证委托给 Web 服务器 </howto/auth-remote-user>` 以获取详细信息。"

msgid ""
"There's a new :func:`django.shortcuts.redirect` function that makes it "
"easier to issue redirects given an object, a view name, or a URL."
msgstr ""
"新增了一个 :func:`django.shortcuts.redirect` 函数，使得根据对象、视图名称或 "
"URL 发出重定向变得更加容易。"

msgid ""
"The ``postgresql_psycopg2`` backend now supports :ref:`native PostgreSQL "
"autocommit <postgresql-notes>`. This is an advanced, PostgreSQL-specific "
"feature, that can make certain read-heavy applications a good deal faster."
msgstr ""
"``postgresql_psycopg2`` 后端现在支持 :ref:`本地 PostgreSQL 自动提交 "
"<postgresql-notes>`。这是一个高级的、特定于 PostgreSQL 的功能，可以使某些读密"
"集型应用程序变得更加快速。"

msgid "What's next?"
msgstr "接下来是什么?"

msgid ""
"We'll take a short break, and then work on Django 1.2 will begin -- no rest "
"for the weary! If you'd like to help, discussion of Django development, "
"including progress toward the 1.2 release, takes place daily on the |django-"
"developers| mailing list and in the ``#django-dev`` IRC channel on ``irc."
"libera.chat``. Feel free to join the discussions!"
msgstr ""
"我们会休息一下，然后开始 Django 1.2 的工作 —— 休息是为了走更远！如果你想要帮"
"助，关于 Django 开发的讨论，包括朝向 1.2 版本的进展，每天都在 |django-"
"developers| 邮件列表和 ``#django-dev`` IRC 频道上进行。欢迎加入讨论！"

msgid ""
"Django's online documentation also includes pointers on how to contribute to "
"Django:"
msgstr "Django 的在线文档还包括如何为 Django 做出贡献的指南："

msgid ":doc:`How to contribute to Django </internals/contributing/index>`"
msgstr ":doc:`如何为 Django 做贡献 </internals/contributing/index>`"

msgid ""
"Contributions on any level -- developing code, writing documentation or "
"simply triaging tickets and helping to test proposed bugfixes -- are always "
"welcome and appreciated."
msgstr ""
"对于任何级别的贡献，无论是开发代码、撰写文档还是简单地对问题进行筛选并帮助测"
"试提议的错误修复，我们都非常欢迎和感激。"

msgid "And that's the way it is."
msgstr "就是这样。"

msgid "Django 1.1.2 release notes"
msgstr "Django 1.1.2 版本发行说明"

msgid "Welcome to Django 1.1.2!"
msgstr "欢迎来到 Django 1.1.2 版本！"

msgid ""
"This is the second \"bugfix\" release in the Django 1.1 series, improving "
"the stability and performance of the Django 1.1 codebase."
msgstr ""
"这是 Django 1.1 系列的第二个“错误修复”版本，改进了 Django 1.1 代码库的稳定性"
"和性能。"

msgid ""
"Django 1.1.2 maintains backwards compatibility with Django 1.1.0, but "
"contain a number of fixes and other improvements. Django 1.1.2 is a "
"recommended upgrade for any development or deployment currently using or "
"targeting Django 1.1."
msgstr ""
"Django 1.1.2 保持与 Django 1.1.0 的向后兼容性，但包含了许多修复和其他改进。对"
"于当前使用或针对 Django 1.1 的任何开发或部署，建议升级到 Django 1.1.2 。"

msgid ""
"For full details on the new features, backwards incompatibilities, and "
"deprecated features in the 1.1 branch, see the :doc:`/releases/1.1`."
msgstr ""
"有关 1.1 分支中新功能、向后不兼容性和已弃用功能的详细信息，请参阅 :doc:`/"
"releases/1.1`。"

msgid "Backwards-incompatible changes in 1.1.2"
msgstr "1.1.2 中的不向后兼容的变更"

msgid "Test runner exit status code"
msgstr "测试运行器退出状态码"

msgid ""
"The exit status code of the test runners (``tests/runtests.py`` and ``python "
"manage.py test``) no longer represents the number of failed tests, since a "
"failure of 256 or more tests resulted in a wrong exit status code.  The exit "
"status code for the test runner is now 0 for success (no failing tests) and "
"1 for any number of test failures.  If needed, the number of test failures "
"can be found at the end of the test runner's output."
msgstr ""
"测试运行器（``tests/runtests.py`` 和 ``python manage.py test``）的退出状态代"
"码不再表示失败的测试数量，因为失败 256 个或更多测试会导致错误的退出状态代码。"
"现在测试运行器的退出状态代码为 0 表示成功（没有失败的测试），为 1 表示任何数"
"量的测试失败。如果需要，可以在测试运行器的输出末尾找到测试失败的数量。"

msgid "Cookie encoding"
msgstr "Cookie  编码"

msgid ""
"To fix bugs with cookies in Internet Explorer, Safari, and possibly other "
"browsers, our encoding of cookie values was changed so that the characters "
"comma and semi-colon are treated as non-safe characters, and are therefore "
"encoded as ``\\054`` and ``\\073`` respectively.  This could produce "
"backwards incompatibilities, especially if you are storing comma or semi-"
"colon in cookies and have JavaScript code that parses and manipulates cookie "
"values client-side."
msgstr ""
"为了修复在 Internet Explorer、Safari 和可能其他浏览器中的 cookie 问题，我们更"
"改了对 cookie 值的编码，使逗号和分号字符被视为非安全字符，因此编码为 "
"``\\054`` 和 ``\\073``。这可能会产生向后不兼容性，特别是如果您在 cookie 中存"
"储逗号或分号，并且有客户端 JavaScript 代码解析和操作 cookie 值。"

msgid "One new feature"
msgstr "一个新功能"

msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.1.2, we have made an exception to this rule. Django 1.2 (the "
"next major release of Django) will contain a feature that will improve "
"protection against Cross-Site Request Forgery (CSRF) attacks. This feature "
"requires the use of a new :ttag:`csrf_token` template tag in all forms that "
"Django renders."
msgstr ""
"通常，小版本发布不会包括新功能，但在 Django 1.1.2 中，我们对这一规则做了一个"
"例外。Django 1.2（Django 的下一个主要版本）将包含一个改进跨站请求伪造（CSRF）"
"攻击防护的功能。这个功能要求在 Django 渲染的所有表单中使用新的 :ttag:"
"`csrf_token` 模板标签。"

msgid ""
"To make it easier to support both 1.1.X and 1.2.X versions of Django with "
"the same templates, we have decided to introduce the :ttag:`csrf_token` "
"template tag to the 1.1.X branch. In the 1.1.X branch, :ttag:`csrf_token` "
"does nothing - it has no effect on templates or form processing. However, it "
"means that the same template will work with Django 1.2."
msgstr ""
"为了更容易支持相同的模板同时运行在 1.1.X 和 1.2.X 版本的 Django 上，我们决定"
"将 :ttag:`csrf_token` 模板标签引入到 1.1.X 分支。在 1.1.X 分支中，:ttag:"
"`csrf_token` 没有任何作用 - 它对模板或表单处理没有影响。然而，这意味着相同的"
"模板将能够在 Django 1.2 上正常工作。"

msgid "Django 1.1.3 release notes"
msgstr "Django 1.1.3 版本发行说明"

msgid "Welcome to Django 1.1.3!"
msgstr "欢迎来到 Django 1.1.3 版本！"

msgid ""
"This is the third \"bugfix\" release in the Django 1.1 series, improving the "
"stability and performance of the Django 1.1 codebase."
msgstr ""
"这是 Django 1.1 系列的第三个“修复错误”版本，改进了 Django 1.1 代码库的稳定性"
"和性能。"

msgid ""
"With one exception, Django 1.1.3 maintains backwards compatibility with "
"Django 1.1.2. It also contains a number of fixes and other improvements. "
"Django 1.1.2 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.1."
msgstr ""
"除一个例外之外，Django 1.1.3 与 Django 1.1.2 保持向后兼容。它还包含了一些修复"
"和其他改进。对于当前使用或针对 Django 1.1 的任何开发或部署，Django 1.1.2 是一"
"个推荐的升级版本。"

msgid "Backwards incompatible changes"
msgstr "不向后兼容的变更"

msgid "Restricted filters in admin interface"
msgstr "在管理界面中的受限过滤器"

msgid ""
"The Django administrative interface, ``django.contrib.admin``, supports "
"filtering of displayed lists of objects by fields on the corresponding "
"models, including across database-level relationships. This is implemented "
"by passing lookup arguments in the querystring portion of the URL, and "
"options on the ModelAdmin class allow developers to specify particular "
"fields or relationships which will generate automatic links for filtering."
msgstr ""
"Django 的管理界面，``django.contrib.admin``，支持通过对应模型上的字段对显示的"
"对象列表进行筛选，包括跨数据库级别的关系。这是通过在 URL 的查询字符串部分传递"
"查找参数来实现的，ModelAdmin 类上的选项允许开发人员指定特定字段或关系，这将生"
"成自动链接用于筛选。"

msgid ""
"One historically-undocumented and -unofficially-supported feature has been "
"the ability for a user with sufficient knowledge of a model's structure and "
"the format of these lookup arguments to invent useful new filters on the fly "
"by manipulating the querystring."
msgstr ""
"一个历史上未记录且非官方支持的功能是，用户如果对模型结构和查询参数的格式有足"
"够的了解，可以通过操作查询字符串来动态创建有用的新过滤器。"

msgid ""
"However, it has been demonstrated that this can be abused to gain access to "
"information outside of an admin user's permissions; for example, an attacker "
"with access to the admin and sufficient knowledge of model structure and "
"relations could construct query strings which -- with repeated use of "
"regular-expression lookups supported by the Django database API -- expose "
"sensitive information such as users' password hashes."
msgstr ""
"然而，已经证明这种方法可以被滥用来获取管理员用户权限之外的信息。例如，如果攻"
"击者能够访问管理员权限并且对模型结构和关联关系有足够的了解，他们可以构造查询"
"字符串，通过重复使用 Django 数据库 API 支持的正则表达式查询，来获取敏感信息，"
"例如用户的密码哈希值。"

msgid ""
"To remedy this, ``django.contrib.admin`` will now validate that querystring "
"lookup arguments either specify only fields on the model being viewed, or "
"cross relations which have been explicitly allowed by the application "
"developer using the preexisting mechanism mentioned above. This is backwards-"
"incompatible for any users relying on the prior ability to insert arbitrary "
"lookups."
msgstr ""
"为了解决这个问题，``django.contrib.admin`` 现在会验证查询字符串查找参数，要么"
"只指定在正在查看的模型上的字段，要么跨关系，并且这些跨关系必须是应用程序开发"
"人员使用上述现有机制明确允许的。对于依赖先前能力插入任意查找的用户来说，这是"
"不兼容的。"

msgid "Django 1.1.4 release notes"
msgstr "Django 1.1.4 版本发行说明"

msgid "Welcome to Django 1.1.4!"
msgstr "欢迎来到 Django 1.1.4 版本！"

msgid ""
"This is the fourth \"bugfix\" release in the Django 1.1 series, improving "
"the stability and performance of the Django 1.1 codebase."
msgstr ""
"这是 Django 1.1 系列的第四个“错误修复”版本，改进了 Django 1.1 代码库的稳定性"
"和性能。"

msgid ""
"With one exception, Django 1.1.4 maintains backwards compatibility with "
"Django 1.1.3. It also contains a number of fixes and other improvements. "
"Django 1.1.4 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.1."
msgstr ""
"除了一个例外，Django 1.1.4 与 Django 1.1.3 兼容。它还包含了一些修复和其他改"
"进。对于当前使用或目标为 Django 1.1 的任何开发或部署，推荐升级到 Django "
"1.1.4 。"

msgid "CSRF exception for AJAX requests"
msgstr "AJAX 请求的 CSRF 例外"

msgid ""
"Django includes a CSRF-protection mechanism, which makes use of a token "
"inserted into outgoing forms. Middleware then checks for the token's "
"presence on form submission, and validates it."
msgstr ""
"Django 包含一个 CSRF 保护机制，它通过在传出的表单中插入一个令牌来实现。然后，"
"中间件在表单提交时检查令牌的存在，并对其进行验证。"

msgid ""
"Prior to Django 1.2.5, our CSRF protection made an exception for AJAX "
"requests, on the following basis:"
msgstr ""
"在 Django 1.2.5 之前，我们的 CSRF 保护对 AJAX 请求做了一个例外，基于以下原"
"因："

msgid ""
"Many AJAX toolkits add an X-Requested-With header when using XMLHttpRequest."
msgstr ""
"许多 AJAX 工具包在使用 XMLHttpRequest 时会添加一个 X-Requested -With 头部。"

msgid "Browsers have strict same-origin policies regarding XMLHttpRequest."
msgstr "浏览器对于 XMLHttpRequest 具有严格的同源策略。"

msgid ""
"In the context of a browser, the only way that a custom header of this "
"nature can be added is with XMLHttpRequest."
msgstr "在浏览器的上下文中，只有使用 XMLHttpRequest 才能添加这种自定义头部。"

msgid ""
"Therefore, for ease of use, we did not apply CSRF checks to requests that "
"appeared to be AJAX on the basis of the X-Requested-With header. The Ruby on "
"Rails web framework had a similar exemption."
msgstr ""
"因此，为了方便使用，我们基于 X-Requested-With 头部，对看起来是 AJAX 请求的请"
"求没有应用 CSRF 检查。 Ruby on Rails Web 框架也有类似的例外情况。"

msgid ""
"Recently, engineers at Google made members of the Ruby on Rails development "
"team aware of a combination of browser plugins and redirects which can allow "
"an attacker to provide custom HTTP headers on a request to any website. This "
"can allow a forged request to appear to be an AJAX request, thereby "
"defeating CSRF protection which trusts the same-origin nature of AJAX "
"requests."
msgstr ""
"最近，Google 的工程师向 Ruby on Rails 开发团队的成员们提醒了一种结合浏览器插"
"件和重定向的技术，可以允许攻击者在向任何网站发出请求时提供自定义的 HTTP 头信"
"息。这可以使伪造的请求看起来像是 AJAX 请求，从而破坏了 CSRF 保护机制，因为它"
"信任 AJAX 请求具有同源性质。"

msgid ""
"Michael Koziarski of the Rails team brought this to our attention, and we "
"were able to produce a proof-of-concept demonstrating the same vulnerability "
"in Django's CSRF handling."
msgstr ""
"Rails 团队的 Michael Koziarski 向我们提出了这个问题，我们能够制作出一个概念验"
"证，证明了 Django 的 CSRF 处理也存在同样的漏洞。"

msgid ""
"To remedy this, Django will now apply full CSRF validation to all requests, "
"regardless of apparent AJAX origin. This is technically backwards-"
"incompatible, but the security risks have been judged to outweigh the "
"compatibility concerns in this case."
msgstr ""
"为了解决这个问题，Django 现在将对所有请求应用完整的 CSRF 验证，无论它们看起来"
"是否来自 AJAX 。从技术上讲，这是不兼容的，但在这种情况下，安全风险被认为超过"
"了兼容性问题。"

msgid ""
"Additionally, Django will now accept the CSRF token in the custom HTTP "
"header X-CSRFTOKEN, as well as in the form submission itself, for ease of "
"use with popular JavaScript toolkits which allow insertion of custom headers "
"into all AJAX requests."
msgstr ""
"此外，Django 现在将接受自定义 HTTP 头 X-CSRFTOKEN 中的 CSRF 令牌，以及表单提"
"交本身中的令牌，以便与流行的 JavaScript 工具包一起使用，这些工具包允许在所有 "
"AJAX 请求中插入自定义头。这样做是为了方便使用。"

msgid ""
"Please see the :ref:`CSRF docs for example jQuery code <csrf-ajax>` that "
"demonstrates this technique, ensuring that you are looking at the "
"documentation for your version of Django, as the exact code necessary is "
"different for some older versions of Django."
msgstr ""
"请参阅 :ref:`CSRF 文档中的示例 jQuery 代码 <csrf-ajax>`，该代码演示了这个技"
"巧，确保您查看的是适用于您的 Django 版本的文档，因为一些较旧版本的 Django 需"
"要不同的确切代码。"

msgid "Django 1.10 release notes"
msgstr "Django 1.10 版本发行说明"

msgid "*August 1, 2016*"
msgstr "*2016 年 8 月 1 日*"

msgid "Welcome to Django 1.10!"
msgstr "欢迎来到 Django 1.10 版本！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-1.10>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.10>` "
"you'll want to be aware of when upgrading from Django 1.9 or older versions. "
"We've :ref:`dropped some features <removed-features-1.10>` that have reached "
"the end of their deprecation cycle, and we've :ref:`begun the deprecation "
"process for some features <deprecated-features-1.10>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-1.10>`，以及一些 :ref:`不兼容的更"
"改 <backwards-incompatible-1.10>`，在从 Django 1.9 或更早版本升级时，您需要注"
"意这些更改。我们已经 :ref:`放弃了一些功能 <removed-features-1.10>`，它们已经"
"达到了停用周期的末尾，同时我们已经 :ref:`开始了一些功能的停用过程 "
"<deprecated-features-1.10>`。"

msgid ""
"See the :doc:`/howto/upgrade-version` guide if you're updating an existing "
"project."
msgstr "如果你要更新现有的项目，请看 :doc:`/howto/upgrade-version` 指南。"

msgid "Python compatibility"
msgstr "Python 兼容性"

msgid ""
"Like Django 1.9, Django 1.10 requires Python 2.7, 3.4, or 3.5. We **highly "
"recommend** and only officially support the latest release of each series."
msgstr ""
"与 Django 1.9 一样，Django 1.10 需要 Python 2.7、3.4 或 3.5。我们 **强烈建议"
"** 并且只正式支持每个系列的最新版本。"

msgid "What's new in Django 1.10"
msgstr "Django 1.10 新特性"

msgid "Full text search for PostgreSQL"
msgstr "PostgreSQL 的全文搜索"

msgid ""
"``django.contrib.postgres`` now includes a :doc:`collection of database "
"functions </ref/contrib/postgres/search>` to allow the use of the full text "
"search engine. You can search across multiple fields in your relational "
"database, combine the searches with other lookups, use different language "
"configurations and weightings, and rank the results by relevance."
msgstr ""
"``django.contrib.postgres`` 现在包括一个 :doc:`数据库函数集合 </ref/contrib/"
"postgres/search>`，允许使用全文搜索引擎。您可以在关系数据库中跨多个字段进行搜"
"索，将搜索与其他查找组合使用，使用不同的语言配置和权重，以及按相关性对结果进"
"行排名。"

msgid ""
"It also now includes trigram support, using the :lookup:`trigram_similar` "
"lookup, and the :class:`~django.contrib.postgres.search.TrigramSimilarity` "
"and :class:`~django.contrib.postgres.search.TrigramDistance` expressions."
msgstr ""
"它还现在包括 trigram 支持，使用 :lookup:`trigram_similar` 查找以及 :class:"
"`~django.contrib.postgres.search.TrigramSimilarity` 和 :class:`~django."
"contrib.postgres.search.TrigramDistance` 表达式。"

msgid "New-style middleware"
msgstr "新式中间件"

msgid ""
":doc:`A new style of middleware is introduced </topics/http/middleware>` to "
"solve the lack of strict request/response layering of the old-style of "
"middleware described in `DEP 0005 <https://github.com/django/deps/blob/main/"
"final/0005-improved-middleware.rst>`_. You'll need to :ref:`adapt old, "
"custom middleware <upgrading-middleware>` and switch from the "
"``MIDDLEWARE_CLASSES`` setting to the new :setting:`MIDDLEWARE` setting to "
"take advantage of the improvements."
msgstr ""
":doc:`引入了一种新的中间件风格 </topics/http/middleware>`，以解决旧式中间件的"
"请求/响应层次不严格的问题，这在 `DEP 0005 <https://github.com/django/deps/"
"blob/main/final/0005-improved-middleware.rst>`_ 中有描述。您需要 :ref:`调整旧"
"的自定义中间件 <upgrading-middleware>`，并从 ``MIDDLEWARE_CLASSES`` 设置切换"
"到新的 :setting:`MIDDLEWARE` 设置以充分利用这些改进。"

msgid "Official support for Unicode usernames"
msgstr "官方支持 Unicode 用户名"

msgid ""
"The :class:`~django.contrib.auth.models.User` model in ``django.contrib."
"auth`` originally only accepted ASCII letters and numbers in usernames. "
"Although it wasn't a deliberate choice, Unicode characters have always been "
"accepted when using Python 3."
msgstr ""
"``django.contrib.auth`` 中的 :class:`~django.contrib.auth.models.User` 模型最"
"初只接受用户名中的 ASCII 字母和数字。尽管这不是一个故意的选择，在使用 Python "
"3 时，Unicode 字符一直都被接受。"

msgid ""
"The username validator now explicitly accepts Unicode characters by default "
"on Python 3 only."
msgstr "用户名验证器现在默认情况下仅在 Python 3 上明确接受 Unicode 字符。"

msgid ""
"Custom user models may use the new :class:`~django.contrib.auth.validators."
"ASCIIUsernameValidator` or :class:`~django.contrib.auth.validators."
"UnicodeUsernameValidator`."
msgstr ""
"自定义用户模型可以使用新的 :class:`~django.contrib.auth.validators."
"ASCIIUsernameValidator` 或 :class:`~django.contrib.auth.validators."
"UnicodeUsernameValidator`。"

msgid "Minor features"
msgstr "次要特性"

msgid ":mod:`django.contrib.admin`"
msgstr ":mod:`django.contrib.admin`"

msgid ""
"For sites running on a subpath, the default :attr:`URL for the \"View site\" "
"link <django.contrib.admin.AdminSite.site_url>` at the top of each admin "
"page will now point to ``request.META['SCRIPT_NAME']`` if set, instead of ``/"
"``."
msgstr ""
"对于运行在子路径上的站点，每个管理页面顶部的默认 :attr:`\"查看站点\"链接的 "
"URL <django.contrib.admin.AdminSite.site_url>` 现在将指向 ``request."
"META['SCRIPT_NAME']`` （如果设置了），而不是 ``/``。"

msgid ""
"The success message that appears after adding or editing an object now "
"contains a link to the object's change form."
msgstr "现在，在添加或编辑对象后出现的成功消息中包含到对象的更改表单的链接。"

msgid ""
"All inline JavaScript is removed so you can enable the ``Content-Security-"
"Policy`` HTTP header if you wish."
msgstr ""
"所有内联 JavaScript 都已移除，因此您可以启用 ``Content-Security-Policy`` "
"HTTP 标头（如果需要的话）。"

msgid ""
"The new :attr:`InlineModelAdmin.classes <django.contrib.admin."
"InlineModelAdmin.classes>` attribute allows specifying classes on inline "
"fieldsets. Inlines with a ``collapse`` class will be initially collapsed and "
"their header will have a small \"show\" link."
msgstr ""
"新的 :attr:`InlineModelAdmin.classes <django.contrib.admin.InlineModelAdmin."
"classes>` 属性允许在内联字段集上指定类。具有 ``collapse`` 类的内联将初始折"
"叠，并且它们的标题将有一个小的 \"显示\" 链接。"

msgid ""
"If a user doesn't have the add permission, the ``object-tools`` block on a "
"model's changelist will now be rendered (without the add button). This makes "
"it easier to add custom tools in this case."
msgstr ""
"如果用户没有添加权限，模型的更改列表上的 ``object-tools`` 区块现在将被呈现"
"（没有添加按钮）。这在这种情况下更容易添加自定义工具。"

msgid ""
"The :class:`~django.contrib.admin.models.LogEntry` model now stores change "
"messages in a JSON structure so that the message can be dynamically "
"translated using the current active language. A new ``LogEntry."
"get_change_message()`` method is now the preferred way of retrieving the "
"change message."
msgstr ""
":class:`~django.contrib.admin.models.LogEntry` 模型现在将更改消息存储在 JSON "
"结构中，以便可以使用当前活动的语言动态翻译消息。现在，首选的检索更改消息的方"
"式是使用新的 ``LogEntry.get_change_message()`` 方法。"

msgid ""
"Selected objects for fields in ``ModelAdmin.raw_id_fields`` now have a link "
"to object's change form."
msgstr ""
"在 ``ModelAdmin.raw_id_fields`` 中选定的字段的对象现在具有指向对象的更改表单"
"的链接。"

msgid ""
"Added \"No date\" and \"Has date\" choices for ``DateFieldListFilter`` if "
"the field is nullable."
msgstr ""
"如果字段可为空，为 ``DateFieldListFilter`` 添加了 \"无日期\" 和 \"有日期\" 选"
"项。"

msgid ""
"The jQuery library embedded in the admin is upgraded from version 2.1.4 to "
"2.2.3."
msgstr "管理后台中嵌入的 jQuery 库已经从 2.1.4 版本升级到 2.2.3 版本。"

msgid ":mod:`django.contrib.auth`"
msgstr ":mod:`django.contrib.auth`"

msgid ""
"Added support for the :ref:`Argon2 password hash <argon2_usage>`. It's "
"recommended over PBKDF2, however, it's not the default as it requires a "
"third-party library."
msgstr ""
"增加了对 :ref:`Argon2 密码哈希 <argon2_usage>` 的支持。它被推荐用于替代 "
"PBKDF2，但不是默认选项，因为它需要一个第三方库。"

msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 25%. This backwards compatible change will not affect users who "
"have subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to "
"change the default value."
msgstr ""
"PBKDF2 密码哈希的默认迭代次数已增加 25%。这个向后兼容的更改不会影响那些已经子"
"类化了 ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` 以更改默认值的用"
"户。"

msgid ""
"The ``django.contrib.auth.views.logout()`` view sends \"no-cache\" headers "
"to prevent an issue where Safari caches redirects and prevents a user from "
"being able to log out."
msgstr ""
"``django.contrib.auth.views.logout()`` 视图发送 \"no-cache\" 标头，以防止 "
"Safari 缓存重定向并阻止用户注销的问题。"

msgid ""
"Added the optional ``backend`` argument to :func:`django.contrib.auth.login` "
"to allow using it without credentials."
msgstr ""
"新增了可选的 ``backend`` 参数以供 :func:`django.contrib.auth.login` 使用，允"
"许在没有凭据的情况下使用它。"

msgid ""
"The new :setting:`LOGOUT_REDIRECT_URL` setting controls the redirect of the "
"``django.contrib.auth.views.logout()`` view, if the view doesn't get a "
"``next_page`` argument."
msgstr ""
"新的 :setting:`LOGOUT_REDIRECT_URL` 设置控制了 ``django.contrib.auth.views."
"logout()`` 视图的重定向，如果视图没有得到一个 ``next_page`` 参数。"

msgid ""
"The new ``redirect_authenticated_user`` parameter for the ``django.contrib."
"auth.views.login()`` view allows redirecting authenticated users visiting "
"the login page."
msgstr ""
"新的 ``redirect_authenticated_user`` 参数用于 ``django.contrib.auth.views."
"login()`` 视图，允许重定向已经经过身份验证的用户访问登录页面。"

msgid ""
"The new :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` "
"and :class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` "
"ignore the value of ``User.is_active``, while :class:`~django.contrib.auth."
"backends.ModelBackend` and :class:`~django.contrib.auth.backends."
"RemoteUserBackend` now reject inactive users."
msgstr ""
"新的 :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` 和 :"
"class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` 忽略了 "
"``User.is_active`` 的值，而 :class:`~django.contrib.auth.backends."
"ModelBackend` 和 :class:`~django.contrib.auth.backends.RemoteUserBackend` 现"
"在拒绝不活动的用户。"

msgid ":mod:`django.contrib.gis`"
msgstr ":mod:`django.contrib.gis`"

msgid ""
":ref:`Distance lookups <distance-lookups>` now accept expressions as the "
"distance value parameter."
msgstr ":ref:`距离查找 <distance-lookups>` 现在接受表达式作为距离值参数。"

msgid ""
"The new :attr:`GEOSGeometry.unary_union <django.contrib.gis.geos."
"GEOSGeometry.unary_union>` property computes the union of all the elements "
"of this geometry."
msgstr ""
"新的 :attr:`GEOSGeometry.unary_union <django.contrib.gis.geos.GEOSGeometry."
"unary_union>` 属性计算了此几何对象的所有元素的并集。"

msgid ""
"Added the :meth:`GEOSGeometry.covers() <django.contrib.gis.geos.GEOSGeometry."
"covers>` binary predicate."
msgstr ""
"新增了 :meth:`GEOSGeometry.covers() <django.contrib.gis.geos.GEOSGeometry."
"covers>` 二元谓词。"

msgid ""
"Added the :meth:`GDALBand.statistics() <django.contrib.gis.gdal.GDALBand."
"statistics>` method and :attr:`~django.contrib.gis.gdal.GDALBand.mean` and :"
"attr:`~django.contrib.gis.gdal.GDALBand.std` attributes."
msgstr ""
"新增了 :meth:`GDALBand.statistics() <django.contrib.gis.gdal.GDALBand."
"statistics>` 方法以及 :attr:`~django.contrib.gis.gdal.GDALBand.mean` 和 :"
"attr:`~django.contrib.gis.gdal.GDALBand.std` 属性。"

msgid ""
"Added support for the :class:`~django.contrib.gis.db.models.MakeLine` "
"aggregate and :class:`~django.contrib.gis.db.models.functions.GeoHash` "
"function on SpatiaLite."
msgstr ""
"在 SpatiaLite 上新增了对 :class:`~django.contrib.gis.db.models.MakeLine` 聚合"
"和 :class:`~django.contrib.gis.db.models.functions.GeoHash` 函数的支持。"

msgid ""
"Added support for the :class:`~django.contrib.gis.db.models.functions."
"Difference`, :class:`~django.contrib.gis.db.models.functions.Intersection`, "
"and :class:`~django.contrib.gis.db.models.functions.SymDifference` functions "
"on MySQL."
msgstr ""
"在 MySQL 上新增了对 :class:`~django.contrib.gis.db.models.functions."
"Difference`、:class:`~django.contrib.gis.db.models.functions.Intersection` "
"和 :class:`~django.contrib.gis.db.models.functions.SymDifference` 函数的支"
"持。"

msgid "Added support for instantiating empty GEOS geometries."
msgstr "新增支持实例化空的 GEOS 几何对象。"

msgid ""
"The new :attr:`~django.contrib.gis.geos.WKTWriter.trim` and :attr:`~django."
"contrib.gis.geos.WKTWriter.precision` properties of :class:`~django.contrib."
"gis.geos.WKTWriter` allow controlling output of the fractional part of the "
"coordinates in WKT."
msgstr ""
":class:`~django.contrib.gis.geos.WKTWriter` 的新属性 :attr:`~django.contrib."
"gis.geos.WKTWriter.trim` 和 :attr:`~django.contrib.gis.geos.WKTWriter."
"precision` 允许控制 WKT 中坐标的小数部分的输出。"

msgid ""
"Added the :attr:`LineString.closed <django.contrib.gis.geos.LineString."
"closed>` and :attr:`MultiLineString.closed <django.contrib.gis.geos."
"MultiLineString.closed>` properties."
msgstr ""
"新增了 :attr:`LineString.closed <django.contrib.gis.geos.LineString.closed>` "
"和 :attr:`MultiLineString.closed <django.contrib.gis.geos.MultiLineString."
"closed>` 属性。"

msgid ""
"The :doc:`GeoJSON serializer </ref/contrib/gis/serializers>` now outputs the "
"primary key of objects in the ``properties`` dictionary if specific fields "
"aren't specified."
msgstr ""
"如果没有指定特定字段， :doc:`GeoJSON 序列化程序 </ref/contrib/gis/"
"serializers>` 现在会在 ``properties`` 字典中输出对象的主键。"

msgid ""
"The ability to replicate input data on the :meth:`GDALBand.data() <django."
"contrib.gis.gdal.GDALBand.data>` method was added. Band data can now be "
"updated with repeated values efficiently."
msgstr ""
"现在可以在 :meth:`GDALBand.data() <django.contrib.gis.gdal.GDALBand.data>` 方"
"法上复制输入数据。可以高效地使用重复的值更新带数据。"

msgid ""
"Added database functions :class:`~django.contrib.gis.db.models.functions."
"IsValid` and :class:`~django.contrib.gis.db.models.functions.MakeValid`, as "
"well as the :lookup:`isvalid` lookup, all for PostGIS. This allows filtering "
"and repairing invalid geometries on the database side."
msgstr ""
"新增了数据库函数 :class:`~django.contrib.gis.db.models.functions.IsValid` "
"和 :class:`~django.contrib.gis.db.models.functions.MakeValid`，以及 :lookup:"
"`isvalid` 查找，都用于 PostGIS。这允许在数据库端对无效的几何对象进行过滤和修"
"复。"

msgid ""
"Added raster support for all :doc:`spatial lookups </ref/contrib/gis/"
"geoquerysets>`."
msgstr ""
"新增了所有 :doc:`空间查找 </ref/contrib/gis/geoquerysets>` 的栅格支持。"

msgid ":mod:`django.contrib.postgres`"
msgstr ":mod:`django.contrib.postgres`"

msgid ""
"For convenience, :class:`~django.contrib.postgres.fields.HStoreField` now "
"casts its keys and values to strings."
msgstr ""
"为了方便起见，:class:`~django.contrib.postgres.fields.HStoreField` 现在将其键"
"和值转换为字符串。"

msgid ":mod:`django.contrib.sessions`"
msgstr ":mod:`django.contrib.sessions`"

msgid ""
"The :djadmin:`clearsessions` management command now removes file-based "
"sessions."
msgstr ":djadmin:`clearsessions` 管理命令现在会删除基于文件的会话。"

msgid ":mod:`django.contrib.sites`"
msgstr ":mod:`django.contrib.sites`"

msgid ""
"The :class:`~django.contrib.sites.models.Site` model now supports :ref:"
"`natural keys <topics-serialization-natural-keys>`."
msgstr ""
":class:`~django.contrib.sites.models.Site` 模型现在支持 :ref:`自然键 <topics-"
"serialization-natural-keys>`。"

msgid ":mod:`django.contrib.staticfiles`"
msgstr ":mod:`django.contrib.staticfiles`"

msgid ""
"The :ttag:`static` template tag now uses ``django.contrib.staticfiles`` if "
"it's in ``INSTALLED_APPS``. This is especially useful for third-party apps "
"which can now always use ``{% load static %}`` (instead of ``{% load "
"staticfiles %}`` or ``{% load static from staticfiles %}``) and not worry "
"about whether or not the ``staticfiles`` app is installed."
msgstr ""
":ttag:`static` 模板标签现在如果在 ``INSTALLED_APPS`` 中，将使用 ``django."
"contrib.staticfiles``。这对于第三方应用程序特别有用，现在它们可以始终使用 "
"``{% load static %}``（而不是 ``{% load staticfiles %}`` 或 ``{% load static "
"from staticfiles %}``），并且不必担心是否安装了 ``staticfiles`` 应用程序。"

msgid ""
"You can :ref:`more easily customize <customize-staticfiles-ignore-patterns>` "
"the ``collectstatic --ignore`` option with a custom ``AppConfig``."
msgstr ""
"您可以通过自定义 ``AppConfig`` 更容易地 :ref:`自定义 <customize-staticfiles-"
"ignore-patterns>` ``collectstatic --ignore`` 选项。"

msgid "Cache"
msgstr "缓存"

msgid "The file-based cache backend now uses the highest pickling protocol."
msgstr "基于文件的缓存后端现在使用最高的 pickling 协议。"

msgid "CSRF"
msgstr "CSRF"

msgid ""
"The default :setting:`CSRF_FAILURE_VIEW`, ``views.csrf.csrf_failure()`` now "
"accepts an optional ``template_name`` parameter, defaulting to ``'403_csrf."
"html'``, to control the template used to render the page."
msgstr ""
"默认的 :setting:`CSRF_FAILURE_VIEW`，``views.csrf.csrf_failure()`` 现在接受一"
"个可选的 ``template_name`` 参数，默认为 ``'403_csrf.html'``，用于控制渲染页面"
"的模板。"

msgid ""
"To protect against `BREACH`_ attacks, the CSRF protection mechanism now "
"changes the form token value on every request (while keeping an invariant "
"secret which can be used to validate the different tokens)."
msgstr ""
"为了防止 `BREACH`_ 攻击，CSRF 保护机制现在会在每个请求中更改表单令牌的值（同"
"时保持不变的秘密，可用于验证不同的令牌）。"

msgid "Database backends"
msgstr "数据库后端"

msgid "Temporal data subtraction was unified on all backends."
msgstr "临时数据减法在所有后端上得到了统一。"

msgid ""
"If the database supports it, backends can set ``DatabaseFeatures."
"can_return_ids_from_bulk_insert=True`` and implement ``DatabaseOperations."
"fetch_returned_insert_ids()`` to set primary keys on objects created using "
"``QuerySet.bulk_create()``."
msgstr ""
"如果数据库支持，后端可以设置 ``DatabaseFeatures."
"can_return_ids_from_bulk_insert=True`` 并实现 ``DatabaseOperations."
"fetch_returned_insert_ids()``，以便在使用 ``QuerySet.bulk_create()`` 创建的对"
"象上设置主键。"

msgid ""
"Added keyword arguments to the ``as_sql()`` methods of various expressions "
"(``Func``, ``When``, ``Case``, and ``OrderBy``) to allow database backends "
"to customize them without mutating ``self``, which isn't safe when using "
"different database backends. See the ``arg_joiner`` and ``**extra_context`` "
"parameters of :meth:`Func.as_sql() <django.db.models.Func.as_sql>` for an "
"example."
msgstr ""
"为各种表达式（``Func``、``When``、``Case`` 和 ``OrderBy``）的 ``as_sql()`` 方"
"法添加了关键字参数，允许数据库后端在不更改 ``self`` 的情况下自定义它们，这在"
"使用不同的数据库后端时不安全。参见 :meth:`Func.as_sql() <django.db.models."
"Func.as_sql>` 的 ``arg_joiner`` 和 ``**extra_context`` 参数的示例。"

msgid "File Storage"
msgstr "文件存储"

msgid ""
"Storage backends now present a timezone-aware API with new methods :meth:"
"`~django.core.files.storage.Storage.get_accessed_time`, :meth:`~django.core."
"files.storage.Storage.get_created_time`, and :meth:`~django.core.files."
"storage.Storage.get_modified_time`. They return a timezone-aware "
"``datetime`` if :setting:`USE_TZ` is ``True`` and a naive ``datetime`` in "
"the local timezone otherwise."
msgstr ""
"存储后端现在提供一个时区感知的 API，具有新的方法 :meth:`~django.core.files."
"storage.Storage.get_accessed_time`、:meth:`~django.core.files.storage."
"Storage.get_created_time` 和 :meth:`~django.core.files.storage.Storage."
"get_modified_time`。如果 :setting:`USE_TZ` 为 ``True``，则它们返回一个时区感"
"知的 ``datetime``，否则返回本地时区的非时区感知的 ``datetime``。"

msgid ""
"The new :meth:`Storage.generate_filename() <django.core.files.storage."
"Storage.generate_filename>` method makes it easier to implement custom "
"storages that don't use the ``os.path`` calls previously in :class:`~django."
"db.models.FileField`."
msgstr ""
"新的 :meth:`Storage.generate_filename() <django.core.files.storage.Storage."
"generate_filename>` 方法使得更容易实现不使用以前在 :class:`~django.db.models."
"FileField` 中的 ``os.path`` 调用的自定义存储。"

msgid "Forms"
msgstr "表单"

msgid ""
"Form and widget ``Media`` is now served using :mod:`django.contrib."
"staticfiles` if installed."
msgstr ""
"如果安装了 :mod:`django.contrib.staticfiles`，则现在会使用它来提供表单和小部"
"件的 ``Media``。"

msgid ""
"The ``<input>`` tag rendered by :class:`~django.forms.CharField` now "
"includes a ``minlength`` attribute if the field has a ``min_length``."
msgstr ""
"由 :class:`~django.forms.CharField` 渲染的 ``<input>`` 标签现在如果字段具有 "
"``min_length``，则会包含一个 ``minlength`` 属性。"

msgid ""
"Required form fields now have the ``required`` HTML attribute. Set the new :"
"attr:`Form.use_required_attribute <django.forms.Form."
"use_required_attribute>` attribute to ``False`` to disable it. The "
"``required`` attribute isn't included on forms of formsets because the "
"browser validation may not be correct when adding and deleting formsets."
msgstr ""
"现在，必填表单字段具有 ``required`` HTML 属性。将新的 :attr:`Form."
"use_required_attribute <django.forms.Form.use_required_attribute>` 属性设置"
"为 ``False`` 可以禁用它。在表单集的表单上不包括 ``required`` 属性，因为在添加"
"和删除表单集时，浏览器验证可能不正确。"

msgid "Generic Views"
msgstr "通用视图"

msgid ""
"The :class:`~django.views.generic.base.View` class can now be imported from "
"``django.views``."
msgstr ""
":class:`~django.views.generic.base.View` 类现在可以从 ``django.views`` 中导"
"入。"

msgid ""
"The :func:`~django.conf.urls.i18n.i18n_patterns` helper function can now be "
"used in a root URLConf specified using :attr:`request.urlconf <django.http."
"HttpRequest.urlconf>`."
msgstr ""
":func:`~django.conf.urls.i18n.i18n_patterns` 辅助函数现在可以在使用 :attr:"
"`request.urlconf <django.http.HttpRequest.urlconf>` 指定的根 URL 配置中使用。"

msgid ""
"By setting the new ``prefix_default_language`` parameter for :func:`~django."
"conf.urls.i18n.i18n_patterns` to ``False``, you can allow accessing the "
"default language without a URL prefix."
msgstr ""
"通过将 :func:`~django.conf.urls.i18n.i18n_patterns` 的新参数 "
"``prefix_default_language`` 设置为 ``False``，您可以允许在没有 URL 前缀的情况"
"下访问默认语言。"

msgid ""
":func:`~django.views.i18n.set_language` now returns a 204 status code (No "
"Content) for AJAX requests when there is no ``next`` parameter in ``POST`` "
"or ``GET``."
msgstr ""
"现在，当在 ``POST`` 或 ``GET`` 中没有 ``next`` 参数时，:func:`~django.views."
"i18n.set_language` 对于 AJAX 请求会返回 204 状态码（No Content）。"

msgid ""
"The :class:`~django.views.i18n.JavaScriptCatalog` and :class:`~django.views."
"i18n.JSONCatalog` class-based views supersede the deprecated "
"``javascript_catalog()`` and ``json_catalog()`` function-based views. The "
"new views are almost equivalent to the old ones except that by default the "
"new views collect all JavaScript strings in the ``djangojs`` translation "
"domain from all installed apps rather than only the JavaScript strings from :"
"setting:`LOCALE_PATHS`."
msgstr ""
":class:`~django.views.i18n.JavaScriptCatalog` 和 :class:`~django.views.i18n."
"JSONCatalog` 类视图取代了不推荐使用的 ``javascript_catalog()`` 和 "
"``json_catalog()`` 函数视图。新视图与旧视图几乎相同，唯一的区别是，默认情况"
"下，新视图会从所有已安装的应用程序中收集 ``djangojs`` 翻译域中的所有 "
"JavaScript 字符串，而不仅仅是来自 :setting:`LOCALE_PATHS` 的 JavaScript 字符"
"串。"

msgid "Management Commands"
msgstr "管理命令"

msgid ""
":func:`~django.core.management.call_command` now returns the value returned "
"from the ``command.handle()`` method."
msgstr ""
"现在，:func:`~django.core.management.call_command` 会返回从 ``command."
"handle()`` 方法返回的值。"

msgid ""
"The new :option:`check --fail-level` option allows specifying the message "
"level that will cause the command to exit with a non-zero status."
msgstr ""
"新的 :option:`check --fail-level` 选项允许指定消息级别，该级别将导致命令以非"
"零状态退出。"

msgid ""
"The new :option:`makemigrations --check` option makes the command exit with "
"a non-zero status when model changes without migrations are detected."
msgstr ""
"新的 :option:`makemigrations --check` 选项在检测到模型更改而没有迁移时，使命"
"令以非零状态退出。"

msgid ""
":djadmin:`makemigrations` now displays the path to the migration files that "
"it generates."
msgstr ":djadmin:`makemigrations` 现在会显示生成的迁移文件的路径。"

msgid ""
"The :option:`shell --interface` option now accepts ``python`` to force use "
"of the \"plain\" Python interpreter."
msgstr ""
":option:`shell --interface` 选项现在接受 ``python``，以强制使用 \"plain\" "
"Python 解释器。"

msgid ""
"The new :option:`shell --command` option lets you run a command as Django "
"and exit, instead of opening the interactive shell."
msgstr ""
"新的 :option:`shell --command` 选项允许您以 Django 用户身份运行命令并退出，而"
"不是打开交互式 shell。"

msgid ""
"Added a warning to :djadmin:`dumpdata` if a proxy model is specified (which "
"results in no output) without its concrete parent."
msgstr ""
"如果指定了代理模型（导致没有输出）而没有指定其具体的父模型，:djadmin:"
"`dumpdata` 现在会显示警告。"

msgid ""
"The new :attr:`BaseCommand.requires_migrations_checks <django.core."
"management.BaseCommand.requires_migrations_checks>` attribute may be set to "
"``True`` if you want your command to print a warning, like :djadmin:"
"`runserver` does, if the set of migrations on disk don't match the "
"migrations in the database."
msgstr ""
"新的 :attr:`BaseCommand.requires_migrations_checks <django.core.management."
"BaseCommand.requires_migrations_checks>` 属性可以设置为 ``True``，如果您希望"
"您的命令在磁盘上的迁移集与数据库中的迁移不匹配时打印警告，就像 :djadmin:"
"`runserver` 一样。"

msgid ""
"To assist with testing, :func:`~django.core.management.call_command` now "
"accepts a command object as the first argument."
msgstr ""
"为了辅助测试，:func:`~django.core.management.call_command` 现在接受一个命令对"
"象作为第一个参数。"

msgid ""
"The :djadmin:`shell` command supports tab completion on systems using "
"``libedit``, e.g. macOS."
msgstr ""
":djadmin:`shell` 命令在使用 ``libedit`` 的系统上支持制表符自动完成，例如 "
"macOS。"

msgid ""
"The :djadmin:`inspectdb` command lets you choose what tables should be "
"inspected by specifying their names as arguments."
msgstr ""
":djadmin:`inspectdb` 命令允许您通过将表的名称指定为参数来选择应该进行检查的"
"表。"

msgid "Migrations"
msgstr "迁移"

msgid "Added support for serialization of ``enum.Enum`` objects."
msgstr "新增支持序列化 ``enum.Enum`` 对象。"

msgid ""
"Added the ``elidable`` argument to the :class:`~django.db.migrations."
"operations.RunSQL` and :class:`~django.db.migrations.operations.RunPython` "
"operations to allow them to be removed when squashing migrations."
msgstr ""
"在 :class:`~django.db.migrations.operations.RunSQL` 和 :class:`~django.db."
"migrations.operations.RunPython` 操作中添加了 ``elidable`` 参数，以允许在压缩"
"迁移时删除它们。"

msgid ""
"Added support for :ref:`non-atomic migrations <non-atomic-migrations>` by "
"setting the ``atomic`` attribute on a ``Migration``."
msgstr ""
"通过在 ``Migration`` 上设置 ``atomic`` 属性，添加了对 :ref:`非原子迁移 <non-"
"atomic-migrations>` 的支持。"

msgid ""
"The ``migrate`` and ``makemigrations`` commands now :ref:`check for a "
"consistent migration history <migration-history-consistency>`. If they find "
"some unapplied dependencies of an applied migration, "
"``InconsistentMigrationHistory`` is raised."
msgstr ""
"``migrate`` 和 ``makemigrations`` 命令现在会 :ref:`检查一致的迁移历史 "
"<migration-history-consistency>`。如果它们发现某些已应用的迁移存在未应用的依"
"赖项，将会引发 ``InconsistentMigrationHistory`` 异常。"

msgid ""
"The :func:`~django.db.models.signals.pre_migrate` and :func:`~django.db."
"models.signals.post_migrate` signals now dispatch their migration ``plan`` "
"and ``apps``."
msgstr ""
":func:`~django.db.models.signals.pre_migrate` 和 :func:`~django.db.models."
"signals.post_migrate` 信号现在会分发它们的迁移 ``plan`` 和 ``apps``。"

msgid ""
"Reverse foreign keys from proxy models are now propagated to their concrete "
"class. The reverse relation attached by a :class:`~django.db.models."
"ForeignKey` pointing to a proxy model is now accessible as a descriptor on "
"the proxied model class and may be referenced in queryset filtering."
msgstr ""
"来自代理模型的反向外键现在会传播到它们的具体类。指向代理模型的 :class:"
"`~django.db.models.ForeignKey` 所附加的反向关系现在可以作为描述符在代理模型类"
"上访问，并且可以在查询集过滤中引用。"

msgid ""
"The new :meth:`Field.rel_db_type() <django.db.models.Field.rel_db_type>` "
"method returns the database column data type for fields such as "
"``ForeignKey`` and ``OneToOneField`` that point to another field."
msgstr ""
"新的 :meth:`Field.rel_db_type() <django.db.models.Field.rel_db_type>` 方法返"
"回了诸如 ``ForeignKey`` 和 ``OneToOneField`` 这样指向另一个字段的字段的数据库"
"列数据类型。"

msgid ""
"The :attr:`~django.db.models.Func.arity` class attribute is added to :class:"
"`~django.db.models.Func`. This attribute can be used to set the number of "
"arguments the function accepts."
msgstr ""
":class:`~django.db.models.Func` 添加了 :attr:`~django.db.models.Func.arity` "
"类属性。此属性可用于设置函数接受的参数数量。"

msgid ""
"Added :class:`~django.db.models.BigAutoField` which acts much like an :class:"
"`~django.db.models.AutoField` except that it is guaranteed to fit numbers "
"from ``1`` to ``9223372036854775807``."
msgstr ""
"新增了 :class:`~django.db.models.BigAutoField`，它的行为类似于 :class:"
"`~django.db.models.AutoField`，但它保证适合于范围从 ``1`` 到 "
"``9223372036854775807`` 的数字。"

msgid ""
":meth:`QuerySet.in_bulk() <django.db.models.query.QuerySet.in_bulk>` may be "
"called without any arguments to return all objects in the queryset."
msgstr ""
"可以不带任何参数调用 :meth:`QuerySet.in_bulk() <django.db.models.query."
"QuerySet.in_bulk>`，以返回查询集中的所有对象。"

msgid ""
":attr:`~django.db.models.ForeignKey.related_query_name` now supports app "
"label and class interpolation using the ``'%(app_label)s'`` and "
"``'%(class)s'`` strings."
msgstr ""
":attr:`~django.db.models.ForeignKey.related_query_name` 现在支持使用 "
"``'%(app_label)s'`` 和 ``'%(class)s'`` 字符串进行应用标签和类的插值。"

msgid "Allowed overriding model fields inherited from abstract base classes."
msgstr "允许覆盖从抽象基类继承的模型字段。"

msgid ""
"The :func:`~django.db.models.prefetch_related_objects` function is now a "
"public API."
msgstr ""
":func:`~django.db.models.prefetch_related_objects` 函数现在是一个公共 API。"

msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` "
"sets the primary key on objects when using PostgreSQL."
msgstr ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` "
"在使用 PostgreSQL 时会设置对象的主键。"

msgid "Added the :class:`~django.db.models.functions.Cast` database function."
msgstr "新增了 :class:`~django.db.models.functions.Cast` 数据库函数。"

msgid ""
"A proxy model may now inherit multiple proxy models that share a common non-"
"abstract parent class."
msgstr "现在，代理模型可以继承多个共享非抽象父类的代理模型。"

msgid ""
"Added :class:`~django.db.models.functions.Extract` functions to extract "
"datetime components as integers, such as year and hour."
msgstr ""
"新增了 :class:`~django.db.models.functions.Extract` 函数，用于提取日期时间组"
"件作为整数，例如年份和小时。"

msgid ""
"Added :class:`~django.db.models.functions.Trunc` functions to truncate a "
"date or datetime to a significant component. They enable queries like sales-"
"per-day or sales-per-hour."
msgstr ""
"新增了 :class:`~django.db.models.functions.Trunc` 函数，用于将日期或日期时间"
"截断到一个重要的组件。它们使得可以执行类似每天销售或每小时销售的查询。"

msgid ""
"``Model.__init__()`` now sets values of virtual fields from its keyword "
"arguments."
msgstr "``Model.__init__()`` 现在会从关键字参数中设置虚拟字段的值。"

msgid ""
"The new :attr:`Meta.base_manager_name <django.db.models.Options."
"base_manager_name>` and :attr:`Meta.default_manager_name <django.db.models."
"Options.default_manager_name>` options allow controlling the :attr:`~django."
"db.models.Model._base_manager` and :attr:`~django.db.models.Model."
"_default_manager`, respectively."
msgstr ""
"新的 :attr:`Meta.base_manager_name <django.db.models.Options."
"base_manager_name>` 和 :attr:`Meta.default_manager_name <django.db.models."
"Options.default_manager_name>` 选项允许分别控制 :attr:`~django.db.models."
"Model._base_manager` 和 :attr:`~django.db.models.Model._default_manager`。"

msgid "Requests and Responses"
msgstr "请求和响应"

msgid "Added ``request.user`` to the debug view."
msgstr "在调试视图中添加了 ``request.user``。"

msgid ""
"Added :class:`~django.http.HttpResponse` methods :meth:`~django.http."
"HttpResponse.readable()` and :meth:`~django.http.HttpResponse.seekable()` to "
"make an instance a stream-like object and allow wrapping it with :py:class:"
"`io.TextIOWrapper`."
msgstr ""
"添加了 :class:`~django.http.HttpResponse` 的方法 :meth:`~django.http."
"HttpResponse.readable()` 和 :meth:`~django.http.HttpResponse.seekable()`，以"
"使实例成为类似流的对象，并允许将其包装在 :py:class:`io.TextIOWrapper` 中。"

msgid ""
"Added the :attr:`HttpRequest.content_type <django.http.HttpRequest."
"content_type>` and :attr:`~django.http.HttpRequest.content_params` "
"attributes which are parsed from the ``CONTENT_TYPE`` header."
msgstr ""
"添加了 :attr:`HttpRequest.content_type <django.http.HttpRequest."
"content_type>` 和 :attr:`~django.http.HttpRequest.content_params` 属性，这些"
"属性从 ``CONTENT_TYPE`` 标头中解析而来。"

msgid ""
"The parser for ``request.COOKIES`` is simplified to better match the "
"behavior of browsers. ``request.COOKIES`` may now contain cookies that are "
"invalid according to :rfc:`6265` but are possible to set via ``document."
"cookie``."
msgstr ""
"``request.COOKIES`` 的解析器被简化，以更好地匹配浏览器的行为。``request."
"COOKIES`` 现在可以包含根据 :rfc:`6265` 无效但可以通过 ``document.cookie`` 设"
"置的 cookie。"

msgid "Serialization"
msgstr "序列化"

msgid ""
"The ``django.core.serializers.json.DjangoJSONEncoder`` now knows how to "
"serialize lazy strings, typically used for translatable content."
msgstr ""
"``django.core.serializers.json.DjangoJSONEncoder`` 现在知道如何序列化懒惰字符"
"串，通常用于可翻译的内容。"

msgid ""
"Added the ``autoescape`` option to the :class:`~django.template.backends."
"django.DjangoTemplates` backend and the :class:`~django.template.Engine` "
"class."
msgstr ""
"在 :class:`~django.template.backends.django.DjangoTemplates` 后端和 :class:"
"`~django.template.Engine` 类中添加了 ``autoescape`` 选项。"

msgid ""
"Added the ``is`` and ``is not`` comparison operators to the :ttag:`if` tag."
msgstr "在 :ttag:`if` 标签中添加了 ``is`` 和 ``is not`` 比较运算符。"

msgid ""
"Allowed :tfilter:`dictsort` to order a list of lists by an element at a "
"specified index."
msgstr ""
"允许使用 :tfilter:`dictsort` 根据指定索引处的元素对列表中的列表进行排序。"

msgid ""
"The :func:`~django.template.context_processors.debug` context processor "
"contains queries for all database aliases instead of only the default alias."
msgstr ""
":func:`~django.template.context_processors.debug` 上下文处理器包含了所有数据"
"库别名的查询，而不仅仅是默认别名。"

msgid ""
"Added relative path support for string arguments of the :ttag:`extends` and :"
"ttag:`include` template tags."
msgstr ""
"对 :ttag:`extends` 和 :ttag:`include` 模板标签的字符串参数添加了相对路径支"
"持。"

msgid "Tests"
msgstr "测试"

msgid ""
"To better catch bugs, :class:`~django.test.TestCase` now checks deferrable "
"database constraints at the end of each test."
msgstr ""
"为了更好地捕获错误，:class:`~django.test.TestCase` 现在在每个测试结束时检查可"
"延迟的数据库约束。"

msgid ""
"Tests and test cases can be :ref:`marked with tags <topics-tagging-tests>` "
"and run selectively with the new :option:`test --tag` and :option:`test --"
"exclude-tag` options."
msgstr ""
"测试和测试用例可以被 :ref:`标记为标签 <topics-tagging-tests>` 并可以使用新"
"的 :option:`test --tag` 和 :option:`test --exclude-tag` 选项进行选择性运行。"

msgid ""
"You can now login and use sessions with the test client even if :mod:`django."
"contrib.sessions` is not in :setting:`INSTALLED_APPS`."
msgstr ""
"即使 :mod:`django.contrib.sessions` 不在 :setting:`INSTALLED_APPS` 中，您现在"
"也可以使用测试客户端登录并使用会话。"

msgid ""
"An addition in :func:`django.setup()` allows URL resolving that happens "
"outside of the request/response cycle (e.g. in management commands and "
"standalone scripts) to take :setting:`FORCE_SCRIPT_NAME` into account when "
"it is set."
msgstr ""
"在 :func:`django.setup()` 中的一个新添加允许在请求/响应周期之外发生的 URL 解"
"析（例如在管理命令和独立脚本中）在设置 :setting:`FORCE_SCRIPT_NAME` 时考虑到"
"它。"

msgid "Validators"
msgstr "验证器"

msgid ""
":class:`~django.core.validators.URLValidator` now limits the length of "
"domain name labels to 63 characters and the total length of domain names to "
"253 characters per :rfc:`1034`."
msgstr ""
":class:`~django.core.validators.URLValidator` 现在将域名标签的长度限制为 63 "
"个字符，域名的总长度限制为 253 个字符，符合 :rfc:`1034` 的规定。"

msgid ""
":func:`~django.core.validators.int_list_validator` now accepts an optional "
"``allow_negative`` boolean parameter, defaulting to ``False``, to allow "
"negative integers."
msgstr ""
":func:`~django.core.validators.int_list_validator` 现在接受一个可选的布尔参"
"数 ``allow_negative``，默认为 ``False``，以允许负整数。"

msgid "Backwards incompatible changes in 1.10"
msgstr "1.10 中的不向后兼容的变更"

msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"ref:`removed-features-1.10` for the features that have reached the end of "
"their deprecation cycle and therefore been removed. If you haven't updated "
"your code within the deprecation timeline for a given feature, its removal "
"may appear as a backwards incompatible change."
msgstr ""
"除了本节中概述的更改之外，请务必查看 :ref:`removed-features-1.10`，了解已经到"
"达了弃用周期终点并因此被移除的功能。如果您没有在给定功能的弃用时间表内更新您"
"的代码，它的移除可能会被视为不兼容的更改。"

msgid "Database backend API"
msgstr "数据库后端 API"

msgid ""
"GIS's ``AreaField`` uses an unspecified underlying numeric type that could "
"in practice be any numeric Python type. ``decimal.Decimal`` values retrieved "
"from the database are now converted to ``float`` to make it easier to "
"combine them with values used by the GIS libraries."
msgstr ""
"GIS 的 ``AreaField`` 使用一个未指定的底层数字类型，实际上可以是任何 Python 数"
"值类型。从数据库中检索到的 ``decimal.Decimal`` 值现在被转换为 ``float``，以便"
"更容易将它们与 GIS 库使用的值结合在一起。"

msgid ""
"In order to enable temporal subtraction you must set the "
"``supports_temporal_subtraction`` database feature flag to ``True`` and "
"implement the ``DatabaseOperations.subtract_temporals()`` method. This "
"method should return the SQL and parameters required to compute the "
"difference in microseconds between the ``lhs`` and ``rhs`` arguments in the "
"datatype used to store :class:`~django.db.models.DurationField`."
msgstr ""
"为了启用时间减法，您必须将数据库功能标志 ``supports_temporal_subtraction`` 设"
"置为 ``True``，并实现 ``DatabaseOperations.subtract_temporals()`` 方法。该方"
"法应返回计算``lhs`` 和 ``rhs`` 参数之间差异的微秒数所需的 SQL 和参数，其数据"
"类型用于存储 :class:`~django.db.models.DurationField`。"

msgid ""
"``select_related()`` prohibits non-relational fields for nested relations"
msgstr "``select_related()`` 禁止嵌套关系的非关系字段。"

msgid ""
"Django 1.8 added validation for non-relational fields in "
"``select_related()``:"
msgstr "Django 1.8 添加了 ``select_related()`` 中非关系字段的验证："

msgid "But it didn't prohibit nested non-relation fields as it does now:"
msgstr "但是现在它禁止了嵌套的非关系字段，而之前没有禁止。"

msgid ""
"``_meta.get_fields()`` returns consistent reverse fields for proxy models"
msgstr "``_meta.get_fields()`` 为代理模型返回一致的反向字段。"

msgid ""
"Before Django 1.10, the :meth:`~django.db.models.options.Options.get_fields` "
"method returned different reverse fields when called on a proxy model "
"compared to its proxied concrete class. This inconsistency was fixed by "
"returning the full set of fields pointing to a concrete class or one of its "
"proxies in both cases."
msgstr ""
"在 Django 1.10 之前，当在代理模型上调用 :meth:`~django.db.models.options."
"Options.get_fields` 方法时，返回的反向字段与其代理的具体类相比是不同的。这种"
"不一致性已经通过在两种情况下都返回指向具体类或其代理之一的字段的完整集合来修"
"复。"

msgid ""
":attr:`AbstractUser.username <django.contrib.auth.models.User.username>` "
"``max_length`` increased to 150"
msgstr ""
":attr:`AbstractUser.username <django.contrib.auth.models.User.username>` 的 "
"``max_length`` 增加到了 150。"

msgid ""
"A migration for :attr:`django.contrib.auth.models.User.username` is "
"included. If you have a custom user model inheriting from ``AbstractUser``, "
"you'll need to generate and apply a database migration for your user model."
msgstr ""
"包括了一个针对 :attr:`django.contrib.auth.models.User.username` 的迁移。如果"
"您有一个继承自 ``AbstractUser`` 的自定义用户模型，您需要为您的用户模型生成并"
"应用一个数据库迁移。"

msgid ""
"We considered an increase to 254 characters to more easily allow the use of "
"email addresses (which are limited to 254 characters) as usernames but "
"rejected it due to a MySQL limitation.  When using the ``utf8mb4`` encoding "
"(recommended for proper Unicode support), MySQL can only create unique "
"indexes with 191 characters by default. Therefore, if you need a longer "
"length, please use a custom user model."
msgstr ""
"我们考虑将用户名的最大长度增加到 254 个字符，以更容易允许使用电子邮件地址（限"
"制为 254 个字符）作为用户名，但由于 MySQL 的限制而拒绝了这个提案。当使用 "
"``utf8mb4`` 编码（推荐用于正确支持 Unicode）时，默认情况下，MySQL 只能创建包"
"含 191 个字符的唯一索引。因此，如果您需要更长的长度，请使用自定义用户模型。"

msgid ""
"If you want to preserve the 30 character limit for usernames, use a custom "
"form when creating a user or changing usernames::"
msgstr ""
"如果您想保留用户名的 30 个字符限制，请在创建用户或更改用户名时使用自定义表"
"单："

msgid ""
"If you wish to keep this restriction in the admin, set ``UserAdmin."
"add_form`` to use this form::"
msgstr ""
"如果您希望在管理员中保留这个限制，可以将 ``UserAdmin.add_form`` 设置为使用以"
"下表单："

msgid "Dropped support for PostgreSQL 9.1"
msgstr "停止支持 PostgreSQL 9.1"

msgid ""
"Upstream support for PostgreSQL 9.1 ends in September 2016. As a "
"consequence, Django 1.10 sets PostgreSQL 9.2 as the minimum version it "
"officially supports."
msgstr ""
"PostgreSQL 9.1 的上游支持将在 2016 年 9 月结束。因此，Django 1.10 将 "
"PostgreSQL 9.2 设置为其正式支持的最低版本。"

msgid "``runserver`` output goes through logging"
msgstr "``runserver`` 输出经过日志记录"

msgid ""
"Request and response handling of the ``runserver`` command is sent to the :"
"ref:`django-server-logger` logger instead of to ``sys.stderr``. If you "
"disable Django's logging configuration or override it with your own, you'll "
"need to add the appropriate logging configuration if you want to see that "
"output::"
msgstr ""
"``runserver`` 命令的请求和响应处理发送到 :ref:`django-server-logger` 日志记录"
"器，而不是发送到 ``sys.stderr``。如果您禁用了 Django 的日志配置或使用自己的配"
"置覆盖了它，如果您想看到该输出，您需要添加适当的日志配置："

msgid "``auth.CustomUser`` and ``auth.ExtensionUser`` test models were removed"
msgstr "``auth.CustomUser`` 和 ``auth.ExtensionUser`` 测试模型已被移除。"

msgid ""
"Since the introduction of migrations for the contrib apps in Django 1.8, the "
"tables of these custom user test models were not created anymore making them "
"unusable in a testing context."
msgstr ""
"自 Django 1.8 开始为 contrib 应用程序引入迁移以来，这些自定义用户测试模型的表"
"不再创建，使它们无法在测试环境中使用。"

msgid ""
"Apps registry is no longer auto-populated when unpickling models outside of "
"Django"
msgstr "在 Django 之外反序列化模型时，应用程序注册表不再自动填充。"

msgid ""
"The apps registry is no longer auto-populated when unpickling models. This "
"was added in Django 1.7.2 as an attempt to allow unpickling models outside "
"of Django, such as in an RQ worker, without calling ``django.setup()``, but "
"it creates the possibility of a deadlock. To adapt your code in the case of "
"RQ, you can `provide your own worker script <https://python-rq.org/docs/"
"workers/>`_ that calls ``django.setup()``."
msgstr ""
"在反序列化模型时，不再自动填充应用程序注册表。这在 Django 1.7.2 中添加，是为"
"了允许在 Django 之外反序列化模型，比如在 RQ worker 中，而不需要调用 ``django."
"setup()``，但这会导致死锁的可能性。在 RQ 的情况下，为了适应您的代码，您可以 `"
"提供自己的工作脚本 <https://python-rq.org/docs/workers/>`_，其中调用 "
"``django.setup()``。"

msgid "Removed null assignment check for non-null foreign key fields"
msgstr "删除了非空外键字段的空值赋值检查。"

msgid ""
"In older versions, assigning ``None`` to a non-nullable ``ForeignKey`` or "
"``OneToOneField`` raised ``ValueError('Cannot assign None: \"model.field\" "
"does not allow null values.')``. For consistency with other model fields "
"which don't have a similar check, this check is removed."
msgstr ""
"在旧版本中，将 ``None`` 分配给非空 ``ForeignKey`` 或 ``OneToOneField`` 会引"
"发 ``ValueError('Cannot assign None: \"model.field\" does not allow null "
"values.')``。为了与没有类似检查的其他模型字段保持一致，此检查已被移除。"

msgid ""
"Removed weak password hashers from the default ``PASSWORD_HASHERS`` setting"
msgstr "从默认的 ``PASSWORD_HASHERS`` 设置中移除了弱密码哈希器。"

msgid ""
"Django 0.90 stored passwords as unsalted MD5. Django 0.91 added support for "
"salted SHA1 with automatic upgrade of passwords when a user logs in. Django "
"1.4 added PBKDF2 as the default password hasher."
msgstr ""
"Django 0.90 将密码存储为未加盐的 MD5 。 Django 0.91 添加了对加盐 SHA1 的支"
"持，并在用户登录时自动升级密码。 Django 1.4 将 PBKDF2 作为默认密码哈希器。"

msgid ""
"If you have an old Django project with MD5 or SHA1 (even salted) encoded "
"passwords, be aware that these can be cracked fairly easily with today's "
"hardware. To make Django users acknowledge continued use of weak hashers, "
"the following hashers are removed from the default :setting:"
"`PASSWORD_HASHERS` setting::"
msgstr ""
"如果您有一个旧的 Django 项目，其中包含使用 MD5 或 SHA1（即使使用了盐值）编码"
"的密码，请注意，这些密码可以在今天的硬件上相对容易地被破解。为了让 Django 用"
"户确认继续使用弱哈希器，以下哈希器已从默认的 :setting:`PASSWORD_HASHERS` 设置"
"中移除："

msgid ""
"Consider using a :ref:`wrapped password hasher <wrapping-password-hashers>` "
"to strengthen the hashes in your database. If that's not feasible, add the :"
"setting:`PASSWORD_HASHERS` setting to your project and add back any hashers "
"that you need."
msgstr ""
"考虑使用一个 :ref:`包装的密码哈希器 <wrapping-password-hashers>` 来加强数据库"
"中的哈希值。如果这不可行，可以将 :setting:`PASSWORD_HASHERS` 设置添加到您的项"
"目中，并添加回您需要的任何哈希器。"

msgid ""
"You can check if your database has any of the removed hashers like this::"
msgstr "您可以像这样检查您的数据库是否具有任何已删除的哈希器："

msgid ""
"``Field.get_prep_lookup()`` and ``Field.get_db_prep_lookup()`` methods are "
"removed"
msgstr ""
"``Field.get_prep_lookup()`` 和 ``Field.get_db_prep_lookup()`` 方法已被移除。"

msgid ""
"If you have a custom field that implements either of these methods, register "
"a custom lookup for it. For example::"
msgstr ""
"如果您有一个自定义字段实现了这两种方法中的任何一种，请为其注册一个自定义查"
"找。例如："

msgid "Support for SpatiaLite < 3.0 and GEOS < 3.3 is dropped."
msgstr "不再支持 SpatiaLite < 3.0 和 GEOS < 3.3 。"

msgid ""
"The ``add_postgis_srs()`` backwards compatibility alias for ``django.contrib."
"gis.utils.add_srs_entry()`` is removed."
msgstr ""
"``add_postgis_srs()`` 的向后兼容别名已被移除，应使用 ``django.contrib.gis."
"utils.add_srs_entry()``。"

msgid ""
"On Oracle/GIS, the :class:`~django.contrib.gis.db.models.functions.Area` "
"aggregate function now returns a ``float`` instead of ``decimal.Decimal``. "
"(It's still wrapped in a measure of square meters.)"
msgstr ""
"在 Oracle/GIS 上，:class:`~django.contrib.gis.db.models.functions.Area` 聚合"
"函数现在返回一个 ``float``，而不再是 ``decimal.Decimal``。（它仍然以平方米为"
"单位包装。）"

msgid ""
"The default :class:`~django.contrib.gis.geos.GEOSGeometry` representation "
"(WKT output) is trimmed by default. That is, instead of ``POINT "
"(23.0000000000000000 5.5000000000000000)``, you'll get ``POINT (23 5.5)``."
msgstr ""
"默认情况下，:class:`~django.contrib.gis.geos.GEOSGeometry` 的表示形式（WKT 输"
"出）现在默认被修剪。也就是说，不再是 ``POINT (23.0000000000000000 "
"5.5000000000000000)``，而是 ``POINT (23 5.5)``。"

msgid ""
"Maximum size of a request body and the number of GET/POST parameters is "
"limited"
msgstr "请求体的最大大小以及 GET/POST 参数的数量受到限制。"

msgid ""
"Two new settings help mitigate denial-of-service attacks via large requests:"
msgstr "两个新配置有助于减轻通过大型请求发起的拒绝服务攻击："

msgid ""
":setting:`DATA_UPLOAD_MAX_MEMORY_SIZE` limits the size that a request body "
"may be. File uploads don't count toward this limit."
msgstr ""
":setting:`DATA_UPLOAD_MAX_MEMORY_SIZE` 限制请求主体的大小。文件上传不计入此限"
"制。"

msgid ""
":setting:`DATA_UPLOAD_MAX_NUMBER_FIELDS` limits the number of GET/POST "
"parameters that are parsed."
msgstr ""
":setting:`DATA_UPLOAD_MAX_NUMBER_FIELDS` 限制解析的 GET/POST 参数的数量。"

msgid ""
"Applications that receive unusually large form posts may need to tune these "
"settings."
msgstr "接收异常大表单提交的应用程序可能需要调整这些设置。"

msgid "Miscellaneous"
msgstr "杂项"

msgid ""
"The ``repr()`` of a ``QuerySet`` is wrapped in ``<QuerySet >`` to "
"disambiguate it from a plain list when debugging."
msgstr ""
"``QuerySet`` 的 ``repr()`` 现在在调试时会包装在 ``<QuerySet >`` 中，以便与普"
"通列表进行区分。"

msgid ""
"``utils.version.get_version()`` returns :pep:`440` compliant release "
"candidate versions (e.g. '1.10rc1' instead of '1.10c1')."
msgstr ""
"``utils.version.get_version()`` 返回符合 :pep:`440` 的候选版本（例如 "
"'1.10rc1' 而不是 '1.10c1'）。"

msgid ""
"CSRF token values are now required to be strings of 64 alphanumerics; values "
"of 32 alphanumerics, as set by older versions of Django by default, are "
"automatically replaced by strings of 64 characters. Other values are "
"considered invalid. This should only affect developers or users who replace "
"these tokens."
msgstr ""
"现在要求 CSRF 令牌值必须是 64 个字母数字字符串；默认情况下，由旧版 Django 设"
"置的 32 个字母数字值将自动替换为 64 个字符的字符串。其他值将被视为无效。这应"
"该只会影响替换这些令牌的开发人员或用户。"

msgid ""
"The ``LOGOUT_URL`` setting is removed as Django hasn't made use of it since "
"pre-1.0. If you use it in your project, you can add it to your project's "
"settings. The default value was ``'/accounts/logout/'``."
msgstr ""
"``LOGOUT_URL`` 设置已删除，因为自 1.0 版本以来 Django 不再使用它。如果你在项"
"目中使用了它，可以将其添加到项目的设置中。默认值是 ``'/accounts/logout/'``。"

msgid ""
"Objects with a ``close()`` method such as files and generators passed to :"
"class:`~django.http.HttpResponse` are now closed immediately instead of when "
"the WSGI server calls ``close()`` on the response."
msgstr ""
"具有 ``close()`` 方法的对象，例如文件和生成器，传递给 :class:`~django.http."
"HttpResponse` 现在会立即关闭，而不是在 WSGI 服务器调用响应的 ``close()`` 方法"
"时关闭。"

msgid ""
"A redundant ``transaction.atomic()`` call in ``QuerySet.update_or_create()`` "
"is removed. This may affect query counts tested by ``TransactionTestCase."
"assertNumQueries()``."
msgstr ""
"在 ``QuerySet.update_or_create()`` 中删除了多余的 ``transaction.atomic()`` 调"
"用。这可能会影响 ``TransactionTestCase.assertNumQueries()`` 测试的查询计数。"

msgid ""
"Support for ``skip_validation`` in ``BaseCommand.execute(**options)`` is "
"removed. Use ``skip_checks`` (added in Django 1.7) instead."
msgstr ""
"在 ``BaseCommand.execute(**options)`` 中删除了对 ``skip_validation`` 的支持。"
"请改用 ``skip_checks`` （Django 1.7 中添加）来代替。"

msgid ""
":djadmin:`loaddata` now raises a ``CommandError`` instead of showing a "
"warning when the specified fixture file is not found."
msgstr ""
"现在，在指定的夹具文件未找到时，:djadmin:`loaddata` 将引发一个 "
"``CommandError``，而不是显示警告。"

msgid ""
"Instead of directly accessing the ``LogEntry.change_message`` attribute, "
"it's now better to call the ``LogEntry.get_change_message()`` method which "
"will provide the message in the current language."
msgstr ""
"现在，最好调用 ``LogEntry.get_change_message()`` 方法来获取日志条目的消息，而"
"不是直接访问 ``LogEntry.change_message`` 属性，这样可以提供当前语言的消息。"

msgid ""
"The default error views now raise ``TemplateDoesNotExist`` if a nonexistent "
"``template_name`` is specified."
msgstr ""
"如果指定了不存在的 ``template_name``，默认错误视图现在会引发 "
"``TemplateDoesNotExist`` 异常。"

msgid ""
"The unused ``choices`` keyword argument of the ``Select`` and "
"``SelectMultiple`` widgets' ``render()`` method is removed. The ``choices`` "
"argument of the ``render_options()`` method is also removed, making "
"``selected_choices`` the first argument."
msgstr ""
"``Select`` 和 ``SelectMultiple`` 小部件的 ``render()`` 方法中未使用的 "
"``choices`` 关键字参数已被移除。 ``render_options()`` 方法中的 ``choices`` 参"
"数也已被移除，现在 ``selected_choices`` 是第一个参数。"

msgid ""
"Tests that violate deferrable database constraints will now error when run "
"on a database that supports deferrable constraints."
msgstr ""
"现在，在支持可延迟约束的数据库上运行的违反可延迟数据库约束的测试将会出现错"
"误。"

msgid ""
"Built-in management commands now use indexing of keys in ``options``, e.g. "
"``options['verbosity']``, instead of ``options.get()`` and no longer perform "
"any type coercion. This could be a problem if you're calling commands using "
"``Command.execute()`` (which bypasses the argument parser that sets a "
"default value) instead of :func:`~django.core.management.call_command`. "
"Instead of calling ``Command.execute()``, pass the command object as the "
"first argument to ``call_command()``."
msgstr ""
"内置管理命令现在使用 ``options`` 中键的索引，例如 ``options['verbosity']``，"
"而不是 ``options.get()``，并且不再执行任何类型强制转换。如果你正在使用 "
"``Command.execute()`` 调用命令（绕过设置默认值的参数解析器），而不是 :func:"
"`~django.core.management.call_command`，这可能会导致问题。不要调用 ``Command."
"execute()``，而是将命令对象作为第一个参数传递给 ``call_command()``。"

msgid ""
":class:`~django.contrib.auth.backends.ModelBackend` and :class:`~django."
"contrib.auth.backends.RemoteUserBackend` now reject inactive users. This "
"means that inactive users can't login and will be logged out if they are "
"switched from ``is_active=True`` to ``False``. If you need the previous "
"behavior, use the new :class:`~django.contrib.auth.backends."
"AllowAllUsersModelBackend` or :class:`~django.contrib.auth.backends."
"AllowAllUsersRemoteUserBackend` in :setting:`AUTHENTICATION_BACKENDS` "
"instead."
msgstr ""
":class:`~django.contrib.auth.backends.ModelBackend` 和 :class:`~django."
"contrib.auth.backends.RemoteUserBackend` 现在会拒绝不活跃的用户。这意味着不活"
"跃的用户无法登录，如果将他们从 ``is_active=True`` 更改为 ``False``，他们将被"
"登出。如果需要以前的行为，请在 :setting:`AUTHENTICATION_BACKENDS` 中使用新"
"的 :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` 或 :"
"class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend`。"

msgid ""
"In light of the previous change, the test client's :meth:`~django.test."
"Client.login()` method no longer always rejects inactive users but instead "
"delegates this decision to the authentication backend. :meth:`~django.test."
"Client.force_login()` also delegates the decision to the authentication "
"backend, so if you're using the default backends, you need to use an active "
"user."
msgstr ""
"鉴于先前的更改，测试客户端的 :meth:`~django.test.Client.login()` 方法不再始终"
"拒绝不活跃的用户，而是将这个决定委托给身份验证后端。 :meth:`~django.test."
"Client.force_login()` 也将决定委托给身份验证后端，因此如果你使用默认的后端，"
"你需要使用一个活跃的用户。"

msgid ""
":func:`django.views.i18n.set_language` may now return a 204 status code for "
"AJAX requests."
msgstr ""
":func:`django.views.i18n.set_language` 现在可以为 AJAX 请求返回一个 204 状态"
"码。"

msgid ""
"The ``base_field`` attribute of :class:`~django.contrib.postgres.fields."
"RangeField` is now a type of field, not an instance of a field.  If you have "
"created a custom subclass of :class:`~django.contrib.postgres.fields."
"RangeField`, you should change the ``base_field`` attribute."
msgstr ""
":class:`~django.contrib.postgres.fields.RangeField` 的 ``base_field`` 属性现"
"在是一个字段类型，而不是字段的实例。如果你创建了 :class:`~django.contrib."
"postgres.fields.RangeField` 的自定义子类，你应该更改 ``base_field`` 属性。"

msgid ""
"Middleware classes are now initialized when the server starts rather than "
"during the first request."
msgstr "现在，中间件类在服务器启动时初始化，而不是在第一个请求期间。"

msgid ""
"If you override ``is_authenticated()`` or ``is_anonymous()`` in a custom "
"user model, you must convert them to attributes or properties as described "
"in :ref:`the deprecation note <user-is-auth-anon-deprecation>`."
msgstr ""
"如果你在自定义用户模型中重写了 ``is_authenticated()`` 或 ``is_anonymous()`` "
"方法，你必须将它们转换为属性或属性，如 :ref:`弃用说明 <user-is-auth-anon-"
"deprecation>` 中所述。"

msgid ""
"When using :attr:`ModelAdmin.save_as=True <django.contrib.admin.ModelAdmin."
"save_as>`, the \"Save as new\" button now redirects to the change view for "
"the new object instead of to the model's changelist. If you need the "
"previous behavior, set the new :attr:`ModelAdmin.save_as_continue <django."
"contrib.admin.ModelAdmin.save_as_continue>` attribute to ``False``."
msgstr ""
"当使用 :attr:`ModelAdmin.save_as=True <django.contrib.admin.ModelAdmin."
"save_as>` 时，\"Save as new\" 按钮现在会重定向到新对象的修改视图，而不是模型"
"的变更列表。如果你需要之前的行为，请将新的 :attr:`ModelAdmin."
"save_as_continue <django.contrib.admin.ModelAdmin.save_as_continue>` 属性设置"
"为 ``False``。"

msgid ""
"Required form fields now have the ``required`` HTML attribute. Set the :attr:"
"`Form.use_required_attribute <django.forms.Form.use_required_attribute>` "
"attribute to ``False`` to disable it. You could also add the ``novalidate`` "
"attribute to ``<form>`` if you don't want browser validation. To disable the "
"``required`` attribute on custom widgets, override the :meth:`Widget."
"use_required_attribute() <django.forms.Widget.use_required_attribute>` "
"method."
msgstr ""
"必填的表单字段现在具有 ``required`` HTML 属性。如果要禁用它，请将 :attr:"
"`Form.use_required_attribute <django.forms.Form.use_required_attribute>` 属性"
"设置为 ``False``。如果不想要浏览器验证，还可以在 ``<form>`` 中添加 "
"``novalidate`` 属性。如果要在自定义小部件上禁用 ``required`` 属性，请重写 :"
"meth:`Widget.use_required_attribute() <django.forms.Widget."
"use_required_attribute>` 方法。"

msgid ""
"The WSGI handler no longer removes content of responses from ``HEAD`` "
"requests or responses with a ``status_code`` of 100-199, 204, or 304. Most "
"web servers already implement this behavior. Responses retrieved using the "
"Django test client continue to have these \"response fixes\" applied."
msgstr ""
"WSGI 处理程序不再从 ``HEAD`` 请求或具有 ``status_code`` 为 100-199、204 或 "
"304 的响应中删除内容。大多数 Web 服务器已经实现了这种行为。使用 Django 测试客"
"户端检索的响应仍然会应用这些 \"响应修复\"。"

msgid ""
"``Model.__init__()`` now receives ``django.db.models.DEFERRED`` as the value "
"of deferred fields."
msgstr ""
"``Model.__init__()`` 现在会将 ``django.db.models.DEFERRED`` 作为延迟字段的"
"值。"

msgid ""
"The ``Model._deferred`` attribute is removed as dynamic model classes when "
"using ``QuerySet.defer()`` and ``only()`` is removed."
msgstr ""
"``Model._deferred`` 属性在使用 ``QuerySet.defer()`` 和 ``only()`` 时动态模型"
"类被移除。"

msgid ""
":meth:`Storage.save() <django.core.files.storage.Storage.save>` no longer "
"replaces ``'\\'`` with ``'/'``. This behavior is moved to :class:`~django."
"core.files.storage.FileSystemStorage` since this is a storage specific "
"implementation detail. Any Windows user with a custom storage implementation "
"that relies on this behavior will need to implement it in the custom "
"storage's ``save()`` method."
msgstr ""
":meth:`Storage.save() <django.core.files.storage.Storage.save>` 不再将 "
"``'\\'`` 替换为 ``'/'``。这个行为已经移到 :class:`~django.core.files.storage."
"FileSystemStorage` 中，因为这是一个与存储相关的具体实现细节。如果有自定义存储"
"实现依赖这个行为的 Windows 用户，需要在自定义存储的 ``save()`` 方法中实现这个"
"行为。"

msgid ""
"Private :class:`~django.db.models.FileField` methods "
"``get_directory_name()`` and ``get_filename()`` are no longer called (and "
"are now deprecated) which is a backwards incompatible change for users "
"overriding those methods on custom fields. To adapt such code, override "
"``FileField.generate_filename()`` or :meth:`Storage.generate_filename() "
"<django.core.files.storage.Storage.generate_filename>` instead. It might be "
"possible to use :attr:`~django.db.models.FileField.upload_to` also."
msgstr ""
"私有的 :class:`~django.db.models.FileField` 方法 ``get_directory_name()`` 和 "
"``get_filename()`` 不再被调用（并且现在已被弃用），这对于在自定义字段上重写这"
"些方法的用户来说是一个不兼容的变更。要适应这种代码，可以重写 ``FileField."
"generate_filename()`` 或 :meth:`Storage.generate_filename() <django.core."
"files.storage.Storage.generate_filename>`。也可能可以使用 :attr:`~django.db."
"models.FileField.upload_to`。"

msgid ""
"The subject of mail sent by ``AdminEmailHandler`` is no longer truncated at "
"989 characters. If you were counting on a limited length, truncate the "
"subject yourself."
msgstr ""
"由 ``AdminEmailHandler`` 发送的邮件主题不再在 989 个字符处截断。如果你依赖于"
"有限的长度，请自行截断主题。"

msgid ""
"Private expressions ``django.db.models.expressions.Date`` and ``DateTime`` "
"are removed. The new :class:`~django.db.models.functions.Trunc` expressions "
"provide the same functionality."
msgstr ""
"私有表达式 ``django.db.models.expressions.Date`` 和 ``DateTime`` 已被移除。新"
"的 :class:`~django.db.models.functions.Trunc` 表达式提供了相同的功能。"

msgid ""
"The ``_base_manager`` and ``_default_manager`` attributes are removed from "
"model instances. They remain accessible on the model class."
msgstr ""
"模型实例中的 ``_base_manager`` 和 ``_default_manager`` 属性已被移除。您仍然可"
"以在模型类上访问它们。"

msgid ""
"Accessing a deleted field on a model instance, e.g. after ``del obj.field``, "
"reloads the field's value instead of raising ``AttributeError``."
msgstr ""
"在模型实例上访问已删除的字段（例如，在执行 ``del obj.field`` 后）将重新加载字"
"段的值，而不会引发 ``AttributeError``。"

msgid ""
"If you subclass ``AbstractBaseUser`` and override ``clean()``, be sure it "
"calls ``super()``. :meth:`.AbstractBaseUser.normalize_username` is called in "
"a new :meth:`.AbstractBaseUser.clean` method."
msgstr ""
"如果您子类化了 ``AbstractBaseUser`` 并覆盖了 ``clean()`` 方法，请确保在其中调"
"用 ``super()``。现在在新的 :meth:`.AbstractBaseUser.clean` 方法中调用了 :"
"meth:`.AbstractBaseUser.normalize_username`。"

msgid ""
"Private API ``django.forms.models.model_to_dict()`` returns a queryset "
"rather than a list of primary keys for ``ManyToManyField``\\s."
msgstr ""
"私有 API ``django.forms.models.model_to_dict()`` 现在返回一个查询集而不是 "
"``ManyToManyField`` 的主键列表。"

msgid ""
"If ``django.contrib.staticfiles`` is installed, the :ttag:`static`  template "
"tag uses the ``staticfiles`` storage to construct the URL rather than simply "
"joining the value with ``STATIC_ROOT``. The new approach encodes the URL, "
"which could be backwards-incompatible in cases such as including a fragment "
"in a path, e.g. ``{% static 'img.svg#fragment' %}``, since the ``#`` is "
"encoded as ``%23``. To adapt, move the fragment outside the template tag: "
"``{% static 'img.svg' %}#fragment``."
msgstr ""
"如果安装了 ``django.contrib.staticfiles``，那么 :ttag:`static` 模板标签将使"
"用 ``staticfiles`` 存储来构建 URL，而不仅仅是与 ``STATIC_ROOT`` 连接。这种新"
"方法对URL进行了编码，可能在包含路径中的片段的情况下存在向后不兼容性，例如 "
"``{% static 'img.svg#fragment' %}``，因为 ``#`` 被编码为 ``%23``。要进行适"
"应，将片段移到模板标签之外：``{% static 'img.svg' %}#fragment``。"

msgid ""
"When ``USE_L10N`` is ``True``, localization is now applied for the :tfilter:"
"`date` and :tfilter:`time` filters when no format string is specified. The "
"``DATE_FORMAT`` and ``TIME_FORMAT`` specifiers from the active locale are "
"used instead of the settings of the same name."
msgstr ""
"当 ``USE_L10N`` 为 ``True`` 时，如果没有指定格式字符串，则 :tfilter:`date` "
"和 :tfilter:`time` 过滤器现在会应用本地化。它们将使用活动区域设置中的 "
"``DATE_FORMAT`` 和 ``TIME_FORMAT`` 指示符，而不是同名的设置。"

msgid "Features deprecated in 1.10"
msgstr "在 1.10 中被废弃的功能"

msgid "Direct assignment to a reverse foreign key or many-to-many relation"
msgstr "直接分配给反向外键或多对多关系"

msgid "Instead of assigning related objects using direct assignment:"
msgstr "不要使用直接分配来分配相关对象："

msgid ""
"Use the :meth:`~django.db.models.fields.related.RelatedManager.set` method "
"added in Django 1.9:"
msgstr ""
"使用 Django 1.9 中添加的 :meth:`~django.db.models.fields.related."
"RelatedManager.set` 方法："

msgid ""
"This prevents confusion about an assignment resulting in an implicit save."
msgstr "这可以避免因隐式保存导致的分配混淆。"

msgid "Non-timezone-aware :class:`~django.core.files.storage.Storage` API"
msgstr "非时区感知的 :class:`~django.core.files.storage.Storage` API"

msgid ""
"The old, non-timezone-aware methods ``accessed_time()``, ``created_time()``, "
"and ``modified_time()`` are deprecated in favor of the new ``get_*_time()`` "
"methods."
msgstr ""
"旧的、非时区感知的方法 ``accessed_time()``, ``created_time()``, 和 "
"``modified_time()`` 已被弃用，推荐使用新的 ``get_*_time()`` 方法。"

msgid ""
"Third-party storage backends should implement the new methods and mark the "
"old ones as deprecated. Until then, the new ``get_*_time()`` methods on the "
"base :class:`~django.core.files.storage.Storage` class convert "
"``datetime``\\s from the old methods as required and emit a deprecation "
"warning as they do so."
msgstr ""
"第三方存储后端应该实现新的方法并将旧的方法标记为弃用。在此之前，基础的 :"
"class:`~django.core.files.storage.Storage` 类上的新的 ``get_*_time()`` 方法将"
"根据需要将来自旧方法的 ``datetime`` 转换并在这样做时发出弃用警告。"

msgid ""
"Third-party storage backends may retain the old methods as long as they wish "
"to support earlier versions of Django."
msgstr "只要第三方存储后端希望支持早期版本的 Django，它们就可以保留旧方法。"

msgid ""
"The ``get_srid()`` and ``set_srid()`` methods of :class:`~django.contrib.gis."
"geos.GEOSGeometry` are deprecated in favor of the :attr:`~django.contrib.gis."
"geos.GEOSGeometry.srid` property."
msgstr ""
":class:`~django.contrib.gis.geos.GEOSGeometry` 的 ``get_srid()`` 和 "
"``set_srid()`` 方法已被弃用，推荐使用 :attr:`~django.contrib.gis.geos."
"GEOSGeometry.srid` 属性。"

msgid ""
"The ``get_x()``, ``set_x()``, ``get_y()``, ``set_y()``, ``get_z()``, and "
"``set_z()`` methods of :class:`~django.contrib.gis.geos.Point` are "
"deprecated in favor of the ``x``, ``y``, and ``z`` properties."
msgstr ""
":class:`~django.contrib.gis.geos.Point` 的 ``get_x()``, ``set_x()``, "
"``get_y()``, ``set_y()``, ``get_z()``, 和 ``set_z()`` 方法已被弃用，推荐使用 "
"``x``, ``y``, 和 ``z`` 属性。"

msgid ""
"The ``get_coords()`` and ``set_coords()`` methods of :class:`~django.contrib."
"gis.geos.Point` are deprecated in favor of the ``tuple`` property."
msgstr ""
":class:`~django.contrib.gis.geos.Point` 的 ``get_coords()`` 和 "
"``set_coords()`` 方法已被弃用，推荐使用 ``tuple`` 属性。"

msgid ""
"The ``cascaded_union`` property of :class:`~django.contrib.gis.geos."
"MultiPolygon` is deprecated in favor of the :attr:`~django.contrib.gis.geos."
"GEOSGeometry.unary_union` property."
msgstr ""
":class:`~django.contrib.gis.geos.MultiPolygon` 的 ``cascaded_union`` 属性已被"
"弃用，推荐使用 :attr:`~django.contrib.gis.geos.GEOSGeometry.unary_union` 属"
"性。"

msgid ""
"The ``django.contrib.gis.utils.precision_wkt()`` function is deprecated in "
"favor of :class:`~django.contrib.gis.geos.WKTWriter`."
msgstr ""
"``django.contrib.gis.utils.precision_wkt()`` 函数已被弃用，推荐使用 :class:"
"`~django.contrib.gis.geos.WKTWriter`。"

msgid "``CommaSeparatedIntegerField`` model field"
msgstr "``CommaSeparatedIntegerField`` 模型字段"

msgid ""
"``CommaSeparatedIntegerField`` is deprecated in favor of :class:`~django.db."
"models.CharField` with the :func:`~django.core.validators."
"validate_comma_separated_integer_list` validator::"
msgstr ""
"``CommaSeparatedIntegerField`` 已被弃用，推荐使用 :class:`~django.db.models."
"CharField` 并配合 :func:`~django.core.validators."
"validate_comma_separated_integer_list` 验证器使用："

msgid ""
"If you're using Oracle, ``CharField`` uses a different database field  type "
"(``NVARCHAR2``) than ``CommaSeparatedIntegerField`` (``VARCHAR2``). "
"Depending on your database settings, this might imply a different encoding, "
"and thus a different length (in bytes) for the same contents. If your stored "
"values are longer than the 4000 byte limit of ``NVARCHAR2``, you should use "
"``TextField`` (``NCLOB``) instead. In this case, if you have any queries "
"that group by the field (e.g. annotating the model with an aggregation or "
"using ``distinct()``) you'll need to change them (to defer the field)."
msgstr ""
"如果您使用的是 Oracle 数据库，``CharField`` 使用不同的数据库字段类型"
"（``NVARCHAR2``）而不是 ``CommaSeparatedIntegerField`` （``VARCHAR2``）。根据"
"您的数据库设置，这可能意味着相同内容的不同编码，从而导致相同内容的不同字节长"
"度。如果您存储的值长于 ``NVARCHAR2`` 的 4000 字节限制，您应该改用 "
"``TextField`` （``NCLOB``）。在这种情况下，如果您有任何按字段分组的查询（例"
"如，使用聚合注释模型或使用 ``distinct()``），您需要更改它们（以延迟字段）。"

msgid ""
"Using a model name as a query lookup when ``default_related_name`` is set"
msgstr "当设置了 ``default_related_name`` 时，可以使用模型名称作为查询查找。"

msgid "Assume the following models::"
msgstr "假设以下模型："

msgid ""
"In older versions, :attr:`~django.db.models.Options.default_related_name` "
"couldn't be used as a query lookup. This is fixed and support for the old "
"lookup name is deprecated. For example, since ``default_related_name`` is "
"set in model ``Bar``, instead of using the model name ``bar`` as the lookup:"
msgstr ""
"在较旧的版本中，不能将 :attr:`~django.db.models.Options."
"default_related_name` 用作查询查找。这已经得到修复，并且不再支持旧的查找名"
"称。例如，由于在模型 ``Bar`` 中设置了 ``default_related_name``，所以不再使用"
"模型名称 ``bar`` 作为查找："

msgid "use the default_related_name ``bars``:"
msgstr "使用 ``default_related_name`` 中的 ``bars``："

msgid "``__search`` query lookup"
msgstr "``__search`` 查询查找"

msgid ""
"The ``search`` lookup, which supports MySQL only and is extremely limited in "
"features, is deprecated. Replace it with a custom lookup::"
msgstr ""
"``search`` 查询查找已被弃用，它仅支持 MySQL，并且功能非常有限。请将其替换为自"
"定义查询查找："

msgid ""
"Using ``User.is_authenticated()`` and ``User.is_anonymous()`` as methods"
msgstr "使用 ``User.is_authenticated()`` 和 ``User.is_anonymous()`` 作为方法。"

msgid ""
"The ``is_authenticated()`` and ``is_anonymous()`` methods of :class:`~django."
"contrib.auth.models.AbstractBaseUser` and :class:`~django.contrib.auth."
"models.AnonymousUser` classes are now properties. They will still work as "
"methods until Django 2.0, but all usage in Django now uses attribute access."
msgstr ""
":class:`~django.contrib.auth.models.AbstractBaseUser` 和 :class:`~django."
"contrib.auth.models.AnonymousUser` 类的 ``is_authenticated()`` 和 "
"``is_anonymous()`` 方法现在已经变成属性。它们在 Django 2.0 之前仍然作为方法使"
"用，但在 Django 中的所有用法现在都使用属性访问。"

msgid ""
"For example, if you use :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` and want to know whether the user is currently "
"logged-in you would use::"
msgstr ""
"例如，如果您使用 :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` 并想知道用户当前是否已登录，您可以使用以下方式："

msgid "instead of ``request.user.is_authenticated()``."
msgstr "而不是 ``request.user.is_authenticated()``。"

msgid ""
"This change avoids accidental information leakage if you forget to call the "
"method, e.g.::"
msgstr "此更改可以避免在您忘记调用方法时意外泄露信息，例如："

msgid ""
"If you override these methods in a custom user model, you must change them "
"to properties or attributes."
msgstr "如果你在自定义用户模型中重写了这些方法，你必须将它们更改为属性或特性。"

msgid ""
"Django uses a ``CallableBool`` object to allow these attributes to work as "
"both a property and a method. Thus, until the deprecation period ends, you "
"cannot compare these properties using the ``is`` operator. That is, the "
"following won't work::"
msgstr ""
"Django 使用一个 ``CallableBool`` 对象，以使这些属性同时可以作为属性和方法工"
"作。因此，在弃用期结束之前，您不能使用 ``is`` 运算符比较这些属性。也就是说，"
"以下操作不起作用："

msgid ""
"Custom manager classes available through ``prefetch_related`` must define a "
"``_apply_rel_filters()`` method"
msgstr ""
"通过 ``prefetch_related`` 可用的自定义管理器类必须定义一个 "
"``_apply_rel_filters()`` 方法。"

msgid ""
"If you defined a custom manager class available through :meth:`~django.db."
"models.query.QuerySet.prefetch_related` you must make sure it defines a "
"``_apply_rel_filters()`` method."
msgstr ""
"如果您定义了一个通过 :meth:`~django.db.models.query.QuerySet."
"prefetch_related` 可用的自定义管理器类，您必须确保它定义了一个 "
"``_apply_rel_filters()`` 方法。"

msgid ""
"This method must accept a :class:`~django.db.models.query.QuerySet` instance "
"as its single argument and return a filtered version of the queryset for the "
"model instance the manager is bound to."
msgstr ""
"这个方法必须接受一个 :class:`~django.db.models.query.QuerySet` 实例作为其唯一"
"参数，并返回与管理器绑定的模型实例的经过筛选的查询集的版本。"

msgid "The \"escape\" half of ``django.utils.safestring``"
msgstr "``django.utils.safestring`` 的 \"escape\" 部分"

msgid ""
"The ``mark_for_escaping()`` function and the classes it uses: "
"``EscapeData``, ``EscapeBytes``, ``EscapeText``, ``EscapeString``, and "
"``EscapeUnicode`` are deprecated."
msgstr ""
"``mark_for_escaping()`` 函数以及它使用的类：``EscapeData``、``EscapeBytes``、"
"``EscapeText``、``EscapeString`` 和 ``EscapeUnicode`` 已被弃用。"

msgid ""
"As a result, the \"lazy\" behavior of the ``escape`` filter (where it would "
"always be applied as the last filter no matter where in the filter chain it "
"appeared) is deprecated. The filter will change to immediately apply :func:"
"`~django.utils.html.conditional_escape` in Django 2.0."
msgstr ""
"因此，``escape`` 过滤器的 \"懒惰\" 行为（无论在过滤器链的哪个位置，它始终作为"
"最后一个过滤器应用）已被弃用。在 Django 2.0 中，该过滤器将立即应用 :func:"
"`~django.utils.html.conditional_escape`。"

msgid "``Manager.use_for_related_fields`` and inheritance changes"
msgstr "``Manager.use_for_related_fields`` 和继承方面的变化"

msgid ""
"``Manager.use_for_related_fields`` is deprecated in favor of setting :attr:"
"`Meta.base_manager_name <django.db.models.Options.base_manager_name>` on the "
"model."
msgstr ""
"``Manager.use_for_related_fields`` 已被弃用，推荐在模型上设置 :attr:`Meta."
"base_manager_name <django.db.models.Options.base_manager_name>`。"

msgid ""
"Model ``Manager`` inheritance will follow MRO inheritance rules in Django "
"2.0, changing the current behavior where managers defined on non-abstract "
"base classes aren't inherited by child classes. A deprecating warning with "
"instructions on how to adapt your code is raised if you have any affected "
"managers. You'll either redeclare a manager from an abstract model on the "
"child class to override the manager from the concrete model, or you'll set "
"the model's ``Meta.manager_inheritance_from_future=True`` option to opt-in "
"to the new inheritance behavior."
msgstr ""
"在 Django 2.0 中，模型 ``Manager`` 的继承将遵循 MRO 继承规则，改变了当前的行"
"为，其中在非抽象基类上定义的管理器不会被子类继承。如果您有任何受影响的管理"
"器，将会引发一个带有关于如何调整代码的弃用警告。您可以在子类上重新声明来自抽"
"象模型的管理器，以覆盖来自具体模型的管理器，或者您可以设置模型的 ``Meta."
"manager_inheritance_from_future=True`` 选项，以选择新的继承行为。"

msgid ""
"During the deprecation period, ``use_for_related_fields`` will be honored "
"and raise a warning, even if a ``base_manager_name`` is set. This allows "
"third-party code to preserve legacy behavior while transitioning to the new "
"API. The warning can be silenced by setting "
"``silence_use_for_related_fields_deprecation=True`` on the manager."
msgstr ""
"在弃用期间，即使设置了 ``base_manager_name``，也会尊重 "
"``use_for_related_fields`` 并引发警告。这允许第三方代码在过渡到新的 API 时保"
"留传统行为。可以通过在管理器上设置 "
"``silence_use_for_related_fields_deprecation=True`` 来消除警告。"

msgid ""
"The ``makemigrations --exit`` option is deprecated in favor of the :option:"
"`makemigrations --check` option."
msgstr ""
"``makemigrations --exit`` 选项已被弃用，推荐使用 :option:`makemigrations --"
"check` 选项。"

msgid ""
"``django.utils.functional.allow_lazy()`` is deprecated in favor of the new :"
"func:`~django.utils.functional.keep_lazy` function which can be used with a "
"more natural decorator syntax."
msgstr ""
"``django.utils.functional.allow_lazy()`` 已被弃用，推荐使用新的 :func:"
"`~django.utils.functional.keep_lazy` 函数，它可以使用更自然的装饰器语法。"

msgid ""
"The ``shell --plain`` option is deprecated in favor of ``-i python`` or ``--"
"interface python``."
msgstr ""
"``shell --plain`` 选项已被弃用，推荐使用 ``-i python`` 或 ``--interface "
"python``。"

msgid ""
"Importing from the ``django.core.urlresolvers`` module is deprecated in "
"favor of its new location, :mod:`django.urls`."
msgstr ""
"从 ``django.core.urlresolvers`` 模块导入已被弃用，推荐使用其新位置 :mod:"
"`django.urls`。"

msgid ""
"The template ``Context.has_key()`` method is deprecated in favor of ``in``."
msgstr "模板中的 ``Context.has_key()`` 方法已被弃用，推荐使用 ``in``。"

msgid ""
"The private attribute ``virtual_fields`` of ``Model._meta`` is deprecated in "
"favor of ``private_fields``."
msgstr ""
"``Model._meta`` 的私有属性 ``virtual_fields`` 已被弃用，推荐使用 "
"``private_fields``。"

msgid ""
"The private keyword arguments ``virtual_only`` in ``Field."
"contribute_to_class()`` and ``virtual`` in ``Model._meta.add_field()`` are "
"deprecated in favor of ``private_only`` and ``private``, respectively."
msgstr ""
"``Field.contribute_to_class()`` 中的私有关键字参数 ``virtual_only`` 和 "
"``Model._meta.add_field()`` 中的 ``virtual`` 已被弃用，分别推荐使用 "
"``private_only`` 和 ``private``。"

msgid ""
"The ``javascript_catalog()`` and ``json_catalog()`` views are deprecated in "
"favor of class-based views :class:`~django.views.i18n.JavaScriptCatalog` "
"and :class:`~django.views.i18n.JSONCatalog`."
msgstr ""
"``javascript_catalog()`` 和 ``json_catalog()`` 视图已被弃用，推荐使用基于类的"
"视图 :class:`~django.views.i18n.JavaScriptCatalog` 和 :class:`~django.views."
"i18n.JSONCatalog`。"

msgid ""
"In multi-table inheritance, implicit promotion of a ``OneToOneField`` to a "
"``parent_link`` is deprecated. Add ``parent_link=True`` to such fields."
msgstr ""
"在多表继承中，将一个 ``OneToOneField`` 隐式提升为 ``parent_link`` 已被弃用。"
"应该在这些字段上添加 ``parent_link=True``。"

msgid ""
"The private API ``Widget._format_value()`` is made public and renamed to :"
"meth:`~django.forms.Widget.format_value`. The old name will work through a "
"deprecation period."
msgstr ""
"私有 API ``Widget._format_value()`` 已被公开，并重命名为 :meth:`~django."
"forms.Widget.format_value`。旧名称将在弃用期间继续工作。"

msgid ""
"Private ``FileField`` methods ``get_directory_name()`` and "
"``get_filename()`` are deprecated in favor of performing this work in :meth:"
"`Storage.generate_filename() <django.core.files.storage.Storage."
"generate_filename>`)."
msgstr ""
"私有的 ``FileField`` 方法 ``get_directory_name()`` 和 ``get_filename()`` 已被"
"弃用，推荐在 :meth:`Storage.generate_filename() <django.core.files.storage."
"Storage.generate_filename>` 中执行这项工作。"

msgid ""
"Old-style middleware that uses  ``settings.MIDDLEWARE_CLASSES`` are "
"deprecated. :ref:`Adapt old, custom middleware <upgrading-middleware>` and "
"use the new :setting:`MIDDLEWARE` setting."
msgstr ""
"使用 ``settings.MIDDLEWARE_CLASSES`` 的旧式中间件已被弃用。请 :ref:`适应旧的"
"自定义中间件 <upgrading-middleware>` 并使用新的 :setting:`MIDDLEWARE` 设置。"

msgid "Features removed in 1.10"
msgstr "在 1.10 中移除的功能"

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 1.10. See :ref:`deprecated-features-1.8` for details, "
"including how to remove usage of these features."
msgstr ""
"这些功能已经完成了弃用周期，并在 Django 1.10 中被移除。有关详细信息，包括如何"
"移除这些功能的用法，请参阅 :ref:`deprecated-features-1.8`。"

msgid ""
"Support for calling a ``SQLCompiler`` directly as an alias for calling its "
"``quote_name_unless_alias`` method is removed."
msgstr ""
"不再支持直接调用 ``SQLCompiler`` 作为调用其 ``quote_name_unless_alias`` 方法"
"的别名。"

msgid ""
"The ``cycle`` and ``firstof`` template tags are removed from the ``future`` "
"template tag library."
msgstr "``cycle`` 和 ``firstof`` 模板标签已从 ``future`` 模板标签库中移除。"

msgid "``django.conf.urls.patterns()`` is removed."
msgstr "``django.conf.urls.patterns()`` 已被移除。"

msgid ""
"Support for the ``prefix`` argument to ``django.conf.urls.i18n."
"i18n_patterns()`` is removed."
msgstr ""
"不再支持 ``prefix`` 参数用于 ``django.conf.urls.i18n.i18n_patterns()``。"

msgid "``SimpleTestCase.urls`` is removed."
msgstr "``SimpleTestCase.urls`` 已被移除。"

msgid ""
"Using an incorrect count of unpacked values in the ``for`` template tag "
"raises an exception rather than failing silently."
msgstr ""
"在模板标签 ``for`` 中使用不正确数量的解包值将引发异常，而不是默默失败。"

msgid ""
"The ability to :func:`~django.urls.reverse` URLs using a dotted Python path "
"is removed."
msgstr ""
"使用点分隔的 Python 路径反向 :func:`~django.urls.reverse` URL 的能力已被移"
"除。"

msgid ""
"The ability to use a dotted Python path for the ``LOGIN_URL`` and "
"``LOGIN_REDIRECT_URL`` settings is removed."
msgstr ""
"使用点分隔的 Python 路径设置 ``LOGIN_URL`` 和 ``LOGIN_REDIRECT_URL`` 的能力已"
"被移除。"

msgid "Support for ``optparse`` is dropped for custom management commands."
msgstr "自定义管理命令不再支持 ``optparse``。"

msgid "The class ``django.core.management.NoArgsCommand`` is removed."
msgstr "类 ``django.core.management.NoArgsCommand`` 已被移除。"

msgid "``django.core.context_processors`` module is removed."
msgstr "``django.core.context_processors`` 模块已被移除。"

msgid "``django.db.models.sql.aggregates`` module is removed."
msgstr "``django.db.models.sql.aggregates`` 模块已被移除。"

msgid "``django.contrib.gis.db.models.sql.aggregates`` module is removed."
msgstr "``django.contrib.gis.db.models.sql.aggregates`` 模块已被移除。"

msgid ""
"The following methods and properties of ``django.db.sql.query.Query`` are "
"removed:"
msgstr "以下 ``django.db.sql.query.Query`` 的方法和属性已被移除："

msgid "Properties: ``aggregates`` and ``aggregate_select``"
msgstr "属性：``aggregates`` 和 ``aggregate_select`` 将被移除。"

msgid ""
"Methods: ``add_aggregate``, ``set_aggregate_mask``, and "
"``append_aggregate_mask``."
msgstr ""
"方法：``add_aggregate``、``set_aggregate_mask`` 和 ``append_aggregate_mask`` "
"将被移除。"

msgid "``django.template.resolve_variable`` is removed."
msgstr "``django.template.resolve_variable`` 已被移除。"

msgid ""
"The following private APIs are removed from :class:`django.db.models.options."
"Options` (``Model._meta``):"
msgstr ""
"以下私有 API 已从 :class:`django.db.models.options.Options` （``Model."
"_meta``）中移除："

msgid "``get_field_by_name()``"
msgstr "``get_field_by_name()``"

msgid "``get_all_field_names()``"
msgstr "``get_all_field_names()``"

msgid "``get_fields_with_model()``"
msgstr "``get_fields_with_model()``"

msgid "``get_concrete_fields_with_model()``"
msgstr "``get_concrete_fields_with_model()``"

msgid "``get_m2m_with_model()``"
msgstr "``get_m2m_with_model()``"

msgid "``get_all_related_objects()``"
msgstr "``get_all_related_objects()``"

msgid "``get_all_related_objects_with_model()``"
msgstr "``get_all_related_objects_with_model()``"

msgid "``get_all_related_many_to_many_objects()``"
msgstr "``get_all_related_many_to_many_objects()``"

msgid "``get_all_related_m2m_objects_with_model()``"
msgstr "``get_all_related_m2m_objects_with_model()``"

msgid ""
"The ``error_message`` argument of ``django.forms.RegexField`` is removed."
msgstr "``django.forms.RegexField`` 的 ``error_message`` 参数已被移除。"

msgid "The ``unordered_list`` filter no longer supports old style lists."
msgstr "``unordered_list`` 过滤器不再支持旧式列表。"

msgid "Support for string ``view`` arguments to ``url()`` is removed."
msgstr "不再支持将字符串 ``view`` 参数传递给 ``url()``。"

msgid ""
"The backward compatible shim  to rename ``django.forms.Form._has_changed()`` "
"to ``has_changed()`` is removed."
msgstr ""
"将 ``django.forms.Form._has_changed()`` 重命名为 ``has_changed()`` 的向后兼容"
"性修补程序已被移除。"

msgid "The ``removetags`` template filter is removed."
msgstr "``removetags`` 模板过滤器已被移除。"

msgid ""
"The ``remove_tags()`` and ``strip_entities()`` functions in ``django.utils."
"html`` is removed."
msgstr ""
"``django.utils.html`` 中的 ``remove_tags()`` 和 ``strip_entities()`` 函数已被"
"移除。"

msgid ""
"The ``is_admin_site`` argument to ``django.contrib.auth.views."
"password_reset()`` is removed."
msgstr ""
"``django.contrib.auth.views.password_reset()`` 中的 ``is_admin_site`` 参数已"
"被移除。"

msgid "``django.db.models.field.subclassing.SubfieldBase`` is removed."
msgstr "``django.db.models.field.subclassing.SubfieldBase`` 已被移除。"

msgid "``django.utils.checksums`` is removed."
msgstr "``django.utils.checksums`` 已被移除。"

msgid ""
"The ``original_content_type_id`` attribute on ``django.contrib.admin.helpers."
"InlineAdminForm`` is removed."
msgstr ""
"``django.contrib.admin.helpers.InlineAdminForm`` 上的 "
"``original_content_type_id`` 属性已被移除。"

msgid ""
"The backwards compatibility shim to allow ``FormMixin.get_form()`` to be "
"defined with no default value for its ``form_class`` argument is removed."
msgstr ""
"允许不为其 ``form_class`` 参数定义默认值的 ``FormMixin.get_form()`` 的向后兼"
"容性修复已被移除。"

msgid ""
"The following settings are removed, and you must upgrade to the :setting:"
"`TEMPLATES` setting:"
msgstr "以下设置已被移除，您必须升级到 :setting:`TEMPLATES` 设置："

msgid "``ALLOWED_INCLUDE_ROOTS``"
msgstr "``ALLOWED_INCLUDE_ROOTS``"

msgid "``TEMPLATE_CONTEXT_PROCESSORS``"
msgstr "``TEMPLATE_CONTEXT_PROCESSORS``"

msgid "``TEMPLATE_DEBUG``"
msgstr "``TEMPLATE_DEBUG``"

msgid "``TEMPLATE_DIRS``"
msgstr "``TEMPLATE_DIRS``"

msgid "``TEMPLATE_LOADERS``"
msgstr "``TEMPLATE_LOADERS``"

msgid "``TEMPLATE_STRING_IF_INVALID``"
msgstr "``TEMPLATE_STRING_IF_INVALID``"

msgid ""
"The backwards compatibility alias ``django.template.loader.BaseLoader`` is "
"removed."
msgstr "向后兼容的别名 ``django.template.loader.BaseLoader`` 已被移除。"

msgid ""
"Django template objects returned by :func:`~django.template.loader."
"get_template` and :func:`~django.template.loader.select_template` no longer "
"accept a :class:`~django.template.Context` in their :meth:`~django.template."
"backends.base.Template.render()` method."
msgstr ""
"由 :func:`~django.template.loader.get_template` 和 :func:`~django.template."
"loader.select_template` 返回的 Django 模板对象不再在其 :meth:`~django."
"template.backends.base.Template.render()` 方法中接受 :class:`~django."
"template.Context`。"

msgid ""
":doc:`Template response APIs </ref/template-response>` enforce the use of :"
"class:`dict` and backend-dependent template objects instead of :class:"
"`~django.template.Context` and :class:`~django.template.Template` "
"respectively."
msgstr ""
":doc:`Template response APIs </ref/template-response>` 强制使用 :class:"
"`dict` 和依赖后端的模板对象，而不再使用 :class:`~django.template.Context` "
"和 :class:`~django.template.Template`。"

msgid ""
"The ``current_app`` parameter for the following function and classes is "
"removed:"
msgstr "以下函数和类的 ``current_app`` 参数已被移除："

msgid "``django.shortcuts.render()``"
msgstr "``django.shortcuts.render()``"

msgid "``django.template.Context()``"
msgstr "``django.template.Context()``"

msgid "``django.template.RequestContext()``"
msgstr "``django.template.RequestContext()``"

msgid "``django.template.response.TemplateResponse()``"
msgstr "``django.template.response.TemplateResponse()``"

msgid ""
"The ``dictionary`` and ``context_instance`` parameters for the following "
"functions are removed:"
msgstr "以下函数的 ``dictionary`` 和 ``context_instance`` 参数已被移除："

msgid "``django.shortcuts.render_to_response()``"
msgstr "``django.shortcuts.render_to_response()``"

msgid "``django.template.loader.render_to_string()``"
msgstr "``django.template.loader.render_to_string()``"

msgid "The ``dirs`` parameter for the following functions is removed:"
msgstr "以下函数的 ``dirs`` 参数已被移除："

msgid "``django.template.loader.get_template()``"
msgstr "``django.template.loader.get_template()``"

msgid "``django.template.loader.select_template()``"
msgstr "``django.template.loader.select_template()``"

msgid ""
"Session verification is enabled regardless of whether or not ``'django."
"contrib.auth.middleware.SessionAuthenticationMiddleware'`` is in "
"``MIDDLEWARE_CLASSES``. ``SessionAuthenticationMiddleware`` no longer has "
"any purpose and can be removed from ``MIDDLEWARE_CLASSES``. It's kept as a "
"stub until Django 2.0 as a courtesy for users who don't read this note."
msgstr ""
"会话验证现在已启用，无论是否在 ``MIDDLEWARE_CLASSES`` 中包含 ``'django."
"contrib.auth.middleware.SessionAuthenticationMiddleware'``。"
"``SessionAuthenticationMiddleware`` 不再有任何用途，可以从 "
"``MIDDLEWARE_CLASSES`` 中删除。为了方便那些没有阅读此说明的用户，它被保留为一"
"个存根，直到 Django 2.0。"

msgid "Private attribute ``django.db.models.Field.related`` is removed."
msgstr "私有属性 ``django.db.models.Field.related`` 已被移除。"

msgid "The ``--list`` option of the ``migrate`` management command is removed."
msgstr "``migrate`` 管理命令的 ``--list`` 选项已被移除。"

msgid "The ``ssi`` template tag is removed."
msgstr "``ssi`` 模板标签已被移除。"

msgid ""
"Support for the ``=`` comparison operator in the ``if`` template tag is "
"removed."
msgstr "不再支持 ``if`` 模板标签中的 ``=`` 比较运算符。"

msgid ""
"The backwards compatibility shims to allow ``Storage.get_available_name()`` "
"and ``Storage.save()`` to be defined without a ``max_length`` argument are "
"removed."
msgstr ""
"允许在不带 ``max_length`` 参数的情况下定义 ``Storage.get_available_name()`` "
"和 ``Storage.save()`` 的向后兼容性修复已被移除。"

msgid ""
"Support for the legacy ``%(<foo>)s`` syntax in ``ModelFormMixin."
"success_url`` is removed."
msgstr ""
"在 ``ModelFormMixin.success_url`` 中移除了对旧式 ``%(<foo>)s`` 语法的支持。"

msgid ""
"``GeoQuerySet`` aggregate methods ``collect()``, ``extent()``, "
"``extent3d()``, ``make_line()``, and ``unionagg()`` are removed."
msgstr ""
"移除了``GeoQuerySet`` 聚合方法 ``collect()``, ``extent()``, ``extent3d()``, "
"``make_line()``, 和 ``unionagg()``。"

msgid ""
"The ability to specify ``ContentType.name`` when creating a content type "
"instance is removed."
msgstr "在创建内容类型实例时不再支持指定 ``ContentType.name`` 的能力。"

msgid "Support for the old signature of ``allow_migrate`` is removed."
msgstr "不再支持旧的 ``allow_migrate`` 签名。"

msgid ""
"Support for the syntax of ``{% cycle %}`` that uses comma-separated "
"arguments is removed."
msgstr "移除了使用逗号分隔参数的 ``{% cycle %}`` 语法的支持。"

msgid ""
"The warning that :class:`~django.core.signing.Signer` issued when given an "
"invalid separator is now a ``ValueError``."
msgstr ""
":class:`~django.core.signing.Signer` 在提供无效的分隔符时发出的警告现在是一"
"个 ``ValueError``。"

msgid "Django 1.10.1 release notes"
msgstr "Django 1.10.1 版本发行说明"

msgid "*September 1, 2016*"
msgstr "*2016 年 9 月 1 日*"

msgid "Django 1.10.1 fixes several bugs in 1.10."
msgstr "Django 1.10.1 修复了 1.10 中的几个漏洞。"

msgid "Bugfixes"
msgstr "漏洞修复"

msgid ""
"Fixed a crash in MySQL connections where ``SELECT @@SQL_AUTO_IS_NULL`` "
"doesn't return a result (:ticket:`26991`)."
msgstr ""
"修复了 MySQL 连接中的一个崩溃问题，在该问题中 ``SELECT @@SQL_AUTO_IS_NULL`` "
"不返回结果 (:ticket:`26991`)。"

msgid ""
"Allowed ``User.is_authenticated`` and ``User.is_anonymous`` properties to be "
"compared using ``==``, ``!=``, and ``|`` (:ticket:`26988`, :ticket:`27154`)."
msgstr ""
"允许使用 ``==``、``!=`` 和 ``|`` 来比较 ``User.is_authenticated`` 和 ``User."
"is_anonymous`` 属性 (:ticket:`26988`, :ticket:`27154`)。"

msgid ""
"Removed the broken ``BaseCommand.usage()`` method which was for ``optparse`` "
"support (:ticket:`27000`)."
msgstr ""
"移除了已损坏的 ``BaseCommand.usage()`` 方法，该方法用于 ``optparse`` 支持 (:"
"ticket:`27000`)。"

msgid ""
"Fixed a checks framework crash with an empty ``Meta.default_permissions`` (:"
"ticket:`26997`)."
msgstr ""
"修复了一个检查框架在空的 ``Meta.default_permissions`` 时崩溃的问题 (:ticket:"
"`26997`)。"

msgid ""
"Fixed a regression in the number of queries when using ``RadioSelect`` with "
"a ``ModelChoiceField`` form field (:ticket:`27001`)."
msgstr ""
"修复了在使用 ``ModelChoiceField`` 表单字段时，使用 ``RadioSelect`` 时查询数量"
"的回归问题 (:ticket:`27001`)。"

msgid ""
"Fixed a crash if ``request.META['CONTENT_LENGTH']`` is an empty string (:"
"ticket:`27005`)."
msgstr ""
"如果 ``request.META['CONTENT_LENGTH']`` 是空字符串，修复了一个崩溃问题 (:"
"ticket:`27005`)。"

msgid ""
"Fixed the ``isnull`` lookup on a ``ForeignKey`` with its ``to_field`` "
"pointing to a ``CharField`` or pointing to a ``CharField`` defined with "
"``primary_key=True`` (:ticket:`26983`)."
msgstr ""
"修复了在 ``ForeignKey`` 上使用 ``isnull`` 查找，其中 ``to_field`` 指向一个 "
"``CharField`` 或指向一个使用 ``primary_key=True`` 定义的 ``CharField`` 时的问"
"题 (:ticket:`26983`)。"

msgid ""
"Prevented the ``migrate`` command from raising "
"``InconsistentMigrationHistory`` in the presence of unapplied squashed "
"migrations (:ticket:`27004`)."
msgstr ""
"在存在未应用的压缩迁移的情况下，防止 ``migrate`` 命令引发 "
"``InconsistentMigrationHistory`` 异常 (:ticket:`27004`)。"

msgid ""
"Fixed a regression in ``Client.force_login()`` which required specifying a "
"``backend`` rather than automatically using the first one if multiple "
"backends are configured (:ticket:`27027`)."
msgstr ""
"修复了 ``Client.force_login()`` 中的一个回归问题，该问题需要指定一个 "
"``backend``，而不是在配置了多个后端的情况下自动使用第一个后端 (:ticket:"
"`27027`)。"

msgid ""
"Made ``QuerySet.bulk_create()`` properly initialize model instances on "
"backends, such as PostgreSQL, that support returning the IDs of the created "
"records so that many-to-many relationships can be used on the new objects (:"
"ticket:`27026`)."
msgstr ""
"在后端（例如 PostgreSQL）上使 ``QuerySet.bulk_create()`` 正确初始化模型实例，"
"以便支持返回已创建记录的 ID，以便可以在新对象上使用多对多关系 (:ticket:"
"`27026`)。"

msgid ""
"Fixed crash of ``django.views.static.serve()`` with ``show_indexes`` enabled "
"(:ticket:`26973`)."
msgstr ""
"修复了在启用 ``show_indexes`` 的情况下，``django.views.static.serve()`` 崩溃"
"的问题 (:ticket:`26973`)。"

msgid ""
"Fixed ``ClearableFileInput`` to avoid the ``required`` HTML attribute when "
"initial data exists (:ticket:`27037`)."
msgstr ""
"修复了 ``ClearableFileInput`` 在存在初始数据时避免生成 ``required`` HTML 属性"
"的问题 (:ticket:`27037`)。"

msgid ""
"Fixed annotations with database functions when combined with lookups on "
"PostGIS (:ticket:`27014`)."
msgstr ""
"修复了在与 PostGIS 结合使用时，带有数据库函数的注释问题 (:ticket:`27014`)。"

msgid ""
"Reallowed the ``{% for %}`` tag to unpack any iterable (:ticket:`27058`)."
msgstr "重新允许 ``{% for %}`` 标签解包任何可迭代对象 (:ticket:`27058`)。"

msgid ""
"Made ``makemigrations`` skip inconsistent history checks on non-default "
"databases if database routers aren't in use or if no apps can be migrated to "
"the database (:ticket:`27054`, :ticket:`27110`, :ticket:`27142`)."
msgstr ""
"如果没有使用数据库路由器，或者没有应用可以迁移到数据库，则在非默认数据库上使 "
"``makemigrations`` 跳过不一致的历史检查 (:ticket:`27054`, :ticket:`27110`, :"
"ticket:`27142`)。"

msgid ""
"Removed duplicated managers in ``Model._meta.managers`` (:ticket:`27073`)."
msgstr "移除了 ``Model._meta.managers`` 中的重复管理器 (:ticket:`27073`)。"

msgid ""
"Fixed ``contrib.admindocs`` crash when a view is in a class, such as some of "
"the admin views (:ticket:`27018`)."
msgstr ""
"修复了 ``contrib.admindocs`` 在视图位于类中（例如某些管理视图）时崩溃的问题 "
"(:ticket:`27018`)。"

msgid ""
"Reverted a few admin checks that checked ``field.many_to_many`` back to "
"``isinstance(field, models.ManyToManyField)`` since it turned out the checks "
"weren't suitable to be generalized like that (:ticket:`26998`)."
msgstr ""
"回滚了一些检查，这些检查将 ``field.many_to_many`` 检查回到 "
"``isinstance(field, models.ManyToManyField)``，因为事实证明这些检查不适合这样"
"泛化 (:ticket:`26998`)。"

msgid ""
"Added the database alias to the ``InconsistentMigrationHistory`` message "
"raised by ``makemigrations`` and ``migrate`` (:ticket:`27089`)."
msgstr ""
"在 ``makemigrations`` 和 ``migrate`` 引发的 ``InconsistentMigrationHistory`` "
"消息中添加了数据库别名 (:ticket:`27089`)。"

msgid ""
"Fixed the creation of ``ContentType`` and ``Permission`` objects for models "
"of applications without migrations when calling the ``migrate`` command with "
"no migrations to apply (:ticket:`27044`)."
msgstr ""
"在没有要应用的迁移时，通过调用 ``migrate`` 命令修复了在没有迁移的应用程序模型"
"中创建 ``ContentType`` 和 ``Permission`` 对象的问题 (:ticket:`27044`)。"

msgid ""
"Included the already applied migration state changes in the ``Apps`` "
"instance provided to the ``pre_migrate`` signal receivers to allow "
"``ContentType`` renaming to be performed on model rename (:ticket:`27100`)."
msgstr ""
"在提供给 ``pre_migrate`` 信号接收器的 ``Apps`` 实例中包括已应用的迁移状态更"
"改，以允许在模型重命名时执行 ``ContentType`` 重命名 (:ticket:`27100`)。"

msgid ""
"Reallowed subclassing ``UserCreationForm`` without ``USERNAME_FIELD`` in "
"``Meta.fields`` (:ticket:`27111`)."
msgstr ""
"重新允许在 ``Meta.fields`` 中没有 ``USERNAME_FIELD`` 的情况下继承 "
"``UserCreationForm`` (:ticket:`27111`)。"

msgid ""
"Fixed a regression in model forms where model fields with a ``default`` that "
"didn't appear in POST data no longer used the ``default`` (:ticket:`27039`)."
msgstr ""
"修复了模型表单中的一个回归问题，即模型字段具有未出现在 POST 数据中的 "
"``default`` 不再使用 ``default`` (:ticket:`27039`)。"

msgid "Django 1.10.2 release notes"
msgstr "Django 1.10.2 版本发行说明"

msgid "*October 1, 2016*"
msgstr "*2016 年 10 月 1 日*"

msgid "Django 1.10.2 fixes several bugs in 1.10.1."
msgstr "Django 1.10.2 修复了 1.10.1 中的几个漏洞。"

msgid ""
"Fixed a crash in MySQL database validation where ``SELECT @@sql_mode`` "
"doesn't return a result (:ticket:`27180`)."
msgstr ""
"修复了 MySQL 数据库验证中的一个崩溃问题，其中 ``SELECT @@sql_mode`` 不返回结"
"果 (:ticket:`27180`)。"

msgid ""
"Allowed combining ``contrib.postgres.search.SearchQuery`` with more than one "
"``&`` or ``|`` operators (:ticket:`27143`)."
msgstr ""
"允许将 ``contrib.postgres.search.SearchQuery`` 与多个 ``&`` 或 ``|`` 操作符组"
"合使用 (:ticket:`27143`)。"

msgid ""
"Disabled system check for URL patterns beginning with a '/' when "
"``APPEND_SLASH=False`` (:ticket:`27238`)."
msgstr ""
"在 ``APPEND_SLASH=False`` 时，禁用了以 '/' 开头的 URL 模式的系统检查 (:"
"ticket:`27238`)。"

msgid ""
"Fixed model form ``default`` fallback for ``CheckboxSelectMultiple``, "
"``MultiWidget``, ``FileInput``, ``SplitDateTimeWidget``, "
"``SelectDateWidget``, and ``SplitArrayWidget`` (:ticket:`27186`). Custom "
"widgets affected by this issue should implement :meth:`~django.forms.Widget."
"value_omitted_from_data`."
msgstr ""
"修复了模型表单中对于 ``CheckboxSelectMultiple``、``MultiWidget``、"
"``FileInput``、``SplitDateTimeWidget``、``SelectDateWidget`` 和 "
"``SplitArrayWidget`` 的 ``default`` 回退问题 (:ticket:`27186`)。受此问题影响"
"的自定义小部件应该实现 :meth:`~django.forms.Widget.value_omitted_from_data`。"

msgid ""
"Fixed a crash in ``runserver`` logging during a \"Broken pipe\" error (:"
"ticket:`27271`)."
msgstr ""
"修复了在 \"Broken pipe\" 错误期间 ``runserver`` 日志记录中的崩溃问题 (:"
"ticket:`27271`)。"

msgid ""
"Fixed a regression where unchanged localized date/time fields were listed as "
"changed in the admin's model history messages (:ticket:`27302`)."
msgstr ""
"修复了一个回归问题，即在管理员的模型历史消息中，未更改的本地化日期/时间字段被"
"列为已更改 (:ticket:`27302`)。"

msgid "Django 1.10.3 release notes"
msgstr "Django 1.10.3 版本发行说明"

msgid "*November 1, 2016*"
msgstr "*2016 年 11 月 1 日*"

msgid "Django 1.10.3 fixes two security issues and several bugs in 1.10.2."
msgstr "Django 1.10.3 修复了 1.10.2 中的两个安全问题和几个漏洞。"

msgid "User with hardcoded password created when running tests on Oracle"
msgstr "在 Oracle 上运行测试时创建了带有硬编码密码的用户"

msgid ""
"When running tests with an Oracle database, Django creates a temporary "
"database user. In older versions, if a password isn't manually specified in "
"the database settings ``TEST`` dictionary, a hardcoded password is used. "
"This could allow an attacker with network access to the database server to "
"connect."
msgstr ""
"在使用 Oracle 数据库运行测试时，Django 会创建一个临时数据库用户。在旧版本中，"
"如果在数据库设置的 ``TEST`` 字典中没有手动指定密码，那么会使用硬编码的密码。"
"这可能允许具有对数据库服务器的网络访问权限的攻击者连接到数据库。"

msgid ""
"This user is usually dropped after the test suite completes, but not when "
"using the ``manage.py test --keepdb`` option or if the user has an active "
"session (such as an attacker's connection)."
msgstr ""
"通常情况下，在测试套件完成后会删除此用户，但如果使用 ``manage.py test --"
"keepdb`` 选项，或者用户有一个活动会话（例如攻击者的连接），则不会删除此用户。"

msgid "A randomly generated password is now used for each test run."
msgstr "现在每次测试运行都使用随机生成的密码。"

msgid "DNS rebinding vulnerability when ``DEBUG=True``"
msgstr "当 ``DEBUG=True`` 时，存在 DNS 重新绑定漏洞"

msgid ""
"Older versions of Django don't validate the ``Host`` header against "
"``settings.ALLOWED_HOSTS`` when ``settings.DEBUG=True``. This makes them "
"vulnerable to a `DNS rebinding attack <https://benmmurphy.github.io/"
"blog/2016/07/11/rails-webconsole-dns-rebinding/>`_."
msgstr ""
"在旧版本的 Django 中，当 ``settings.DEBUG=True`` 时，不会验证 ``Host`` 标头"
"与 ``settings.ALLOWED_HOSTS`` 是否匹配。这使得它们容易受到 `DNS 重新绑定攻击 "
"<https://benmmurphy.github.io/blog/2016/07/11/rails-webconsole-dns-rebinding/"
">`_ 的威胁。"

msgid ""
"While Django doesn't ship a module that allows remote code execution, this "
"is at least a cross-site scripting vector, which could be quite serious if "
"developers load a copy of the production database in development or connect "
"to some production services for which there's no development instance, for "
"example. If a project uses a package like the ``django-debug-toolbar``, then "
"the attacker could execute arbitrary SQL, which could be especially bad if "
"the developers connect to the database with a superuser account."
msgstr ""
"虽然 Django 没有提供远程代码执行的模块，但这至少是一个跨站点脚本（XSS）的漏"
"洞，如果开发人员在开发环境中加载了生产数据库的副本或连接到一些没有开发实例的"
"生产服务，这可能会非常严重。如果项目使用类似 ``django-debug-toolbar`` 这样的"
"包，攻击者可以执行任意的 SQL 查询，如果开发人员使用超级用户账户连接到数据库，"
"那么情况可能会特别糟糕。"

msgid ""
"``settings.ALLOWED_HOSTS`` is now validated regardless of ``DEBUG``. For "
"convenience, if ``ALLOWED_HOSTS`` is empty and ``DEBUG=True``, the following "
"variations of localhost are allowed ``['localhost', '127.0.0.1', '::1']``. "
"If your local settings file has your production ``ALLOWED_HOSTS`` value, you "
"must now omit it to get those fallback values."
msgstr ""
"现在无论 ``DEBUG`` 的值如何，都会验证 ``settings.ALLOWED_HOSTS``。为了方便起"
"见，如果 ``ALLOWED_HOSTS`` 为空且 ``DEBUG=True``，则允许以下本地主机的变化 "
"``['localhost', '127.0.0.1', '::1']``。如果您的本地设置文件中包含生产环境的 "
"``ALLOWED_HOSTS`` 值，现在必须将其省略以获得这些备用值。"

msgid ""
"Allowed ``User.is_authenticated`` and ``User.is_anonymous`` properties to be "
"tested for ``set`` membership (:ticket:`27309`)."
msgstr ""
"允许对 ``User.is_authenticated`` 和 ``User.is_anonymous`` 属性进行 ``set`` 成"
"员测试 (:ticket:`27309`)。"

msgid ""
"Fixed a performance regression when running ``migrate`` in projects with "
"``RenameModel`` operations (:ticket:`27279`)."
msgstr ""
"修复了在具有 ``RenameModel`` 操作的项目中运行 ``migrate`` 时的性能回归问题 (:"
"ticket:`27279`)。"

msgid ""
"Added ``model_name`` to the ``allow_migrate()`` calls in ``makemigrations`` "
"(:ticket:`27200`)."
msgstr ""
"在 ``makemigrations`` 中的 ``allow_migrate()`` 调用中添加了 ``model_name`` 参"
"数 (:ticket:`27200`)。"

msgid ""
"Made the ``JavaScriptCatalog`` view respect the ``packages`` argument; "
"previously it was ignored (:ticket:`27374`)."
msgstr ""
"使 ``JavaScriptCatalog`` 视图尊重 ``packages`` 参数；之前它会被忽略 (:ticket:"
"`27374`)。"

msgid ""
"Fixed ``QuerySet.bulk_create()`` on PostgreSQL when the number of objects is "
"a multiple plus one of ``batch_size`` (:ticket:`27385`)."
msgstr ""
"修复了在 PostgreSQL 上使用 ``QuerySet.bulk_create()`` 时，对象数量是 "
"``batch_size`` 的倍数加一时的问题 (:ticket:`27385`)。"

msgid ""
"Prevented ``i18n_patterns()`` from using too much of the URL as the language "
"to fix a use case for ``prefix_default_language=False`` (:ticket:`27063`)."
msgstr ""
"防止 ``i18n_patterns()`` 使用太多 URL 作为语言，以修复 "
"``prefix_default_language=False`` 的用例 (:ticket:`27063`)。"

msgid ""
"Replaced a possibly incorrect redirect from ``SessionMiddleware`` when a "
"session is destroyed in a concurrent request with a ``SuspiciousOperation`` "
"to indicate that the request can't be completed (:ticket:`27363`)."
msgstr ""
"在并发请求中，将 ``SessionMiddleware`` 中可能不正确的重定向替换为 "
"``SuspiciousOperation``，以指示请求无法完成 (:ticket:`27363`)。"

msgid "Django 1.10.4 release notes"
msgstr "Django 1.10.4 版本发行说明"

msgid "*December 1, 2016*"
msgstr "*2016 年 12 月 1 日*"

msgid "Django 1.10.4 fixes several bugs in 1.10.3."
msgstr "Django 1.10.4 修复了 1.10.3 中的几个漏洞。"

msgid ""
"Quoted the Oracle test user's password in queries to fix the \"ORA-00922: "
"missing or invalid option\" error when the password starts with a number or "
"special character (:ticket:`27420`)."
msgstr ""
"在查询中引用 Oracle 测试用户的密码，以修复密码以数字或特殊字符开头时出现 "
"\"ORA-00922: missing or invalid option\" 错误的问题 (:ticket:`27420`)。"

msgid ""
"Fixed incorrect ``app_label`` / ``model_name`` arguments for "
"``allow_migrate()`` in ``makemigrations`` migration consistency checks (:"
"ticket:`27461`)."
msgstr ""
"修复了在 ``makemigrations`` 迁移一致性检查中的 ``allow_migrate()`` 中不正确"
"的 ``app_label`` / ``model_name`` 参数 (:ticket:`27461`)。"

msgid ""
"Made ``Model.delete(keep_parents=True)`` preserve parent reverse "
"relationships in multi-table inheritance (:ticket:`27407`)."
msgstr ""
"在多表继承中，通过 ``Model.delete(keep_parents=True)`` 保留父级反向关系 (:"
"ticket:`27407`)。"

msgid ""
"Fixed a ``QuerySet.update()`` crash on SQLite when updating a "
"``DateTimeField`` with an ``F()`` expression and a ``timedelta`` (:ticket:"
"`27544`)."
msgstr ""
"修复了在 SQLite 上使用 ``QuerySet.update()`` 时，更新带有 ``F()`` 表达式和 "
"``timedelta`` 的 ``DateTimeField`` 时发生的崩溃 (:ticket:`27544`)。"

msgid ""
"Prevented ``LocaleMiddleware`` from redirecting on URLs that should return "
"404 when using ``prefix_default_language=False`` (:ticket:`27402`)."
msgstr ""
"在使用 ``prefix_default_language=False`` 时，防止 ``LocaleMiddleware`` 在应该"
"返回 404 的 URL 上进行重定向 (:ticket:`27402`)。"

msgid ""
"Prevented an unnecessary index from being created on an InnoDB "
"``ForeignKey`` when the field was added after the model was created (:ticket:"
"`27558`)."
msgstr ""
"在模型创建后添加字段时，防止在 InnoDB ``ForeignKey`` 上创建不必要的索引 (:"
"ticket:`27558`)。"

msgid "Django 1.10.5 release notes"
msgstr "Django 1.10.5 版本发行说明"

msgid "*January 4, 2017*"
msgstr "*2017 年 1 月 4 日*"

msgid "Django 1.10.5 fixes several bugs in 1.10.4."
msgstr "Django 1.10.5 修复了 1.10.4 中的几个漏洞。"

msgid ""
"Fixed a crash in the debug view if ``request.user`` can't be retrieved, such "
"as if the database is unavailable (:ticket:`27567`)."
msgstr ""
"修复了在调试视图中出现的崩溃，如果无法检索 ``request.user``，例如如果数据库不"
"可用 (:ticket:`27567`)。"

msgid ""
"Fixed occasional missing plural forms in ``JavaScriptCatalog`` (:ticket:"
"`27418`)."
msgstr ""
"修复了偶尔在 ``JavaScriptCatalog`` 中丢失的复数形式 (:ticket:`27418`)。"

msgid ""
"Fixed a regression in the ``timesince`` and ``timeuntil`` filters that "
"caused incorrect results for dates in a leap year (:ticket:`27637`)."
msgstr ""
"修复了 ``timesince`` 和 ``timeuntil`` 过滤器中的回归问题，导致闰年日期的结果"
"不正确 (:ticket:`27637`)。"

msgid ""
"Fixed a regression where ``collectstatic`` overwrote newer files in remote "
"storages (:ticket:`27658`)."
msgstr ""
"修复了 ``collectstatic`` 在远程存储中覆盖更新文件的回归问题 (:ticket:"
"`27658`)。"

msgid "Django 1.10.6 release notes"
msgstr "Django 1.10.6 版本发行说明"

msgid "*March 1, 2017*"
msgstr "*2017 年 3 月 1 日*"

msgid "Django 1.10.6 fixes several bugs in 1.10.5."
msgstr "Django 1.10.6 修复了 1.10.5 中的几个漏洞。"

msgid ""
"Fixed ``ClearableFileInput``’s \"Clear\" checkbox on model form fields where "
"the model field has a ``default`` (:ticket:`27805`)."
msgstr ""
"修复了在模型字段具有 ``default`` 的情况下，模型表单字段上的 "
"``ClearableFileInput`` 的 \"Clear\" 复选框 (:ticket:`27805`)。"

msgid ""
"Fixed ``RequestDataTooBig`` and ``TooManyFieldsSent`` exceptions crashing "
"rather than generating a bad request response (:ticket:`27820`)."
msgstr ""
"修复了 ``RequestDataTooBig`` 和 ``TooManyFieldsSent`` 异常崩溃而不是生成坏请"
"求响应的问题 (:ticket:`27820`)。"

msgid ""
"Fixed a crash on Oracle and PostgreSQL when subtracting ``DurationField`` or "
"``IntegerField`` from ``DateField`` (:ticket:`27828`)."
msgstr ""
"修复了在 Oracle 和 PostgreSQL 上从 ``DateField`` 中减去 ``DurationField`` 或 "
"``IntegerField`` 时发生的崩溃问题 (:ticket:`27828`)。"

msgid ""
"Fixed query expression date subtraction accuracy on PostgreSQL for "
"differences larger than a month (:ticket:`27856`)."
msgstr ""
"修复了在 PostgreSQL 上查询表达式日期相减的精度问题，适用于大于一个月的差异 (:"
"ticket:`27856`)。"

msgid ""
"Fixed a ``GDALException`` raised by ``GDALClose`` on GDAL ≥ 2.0 (:ticket:"
"`27479`)."
msgstr ""
"修复了在 GDAL ≥ 2.0 上由 ``GDALClose`` 引发的 ``GDALException`` (:ticket:"
"`27479`)。"

msgid "Django 1.10.7 release notes"
msgstr "Django 1.10.7 版本发行说明"

msgid "*April 4, 2017*"
msgstr "*2017 年 4 月 4 日*"

msgid "Django 1.10.7 fixes two security issues and a bug in 1.10.6."
msgstr "Django 1.10.7 修复了 1.10.6 中的两个安全问题和一个错误。"

msgid ""
"CVE-2017-7233: Open redirect and possible XSS attack via user-supplied "
"numeric redirect URLs"
msgstr ""
"CVE-2017-7233 ：通过用户提供的数字重定向 URL 进行开放式重定向和可能的 XSS 攻"
"击"

msgid ""
"Django relies on user input in some cases  (e.g. ``django.contrib.auth.views."
"login()`` and :doc:`i18n </topics/i18n/index>`) to redirect the user to an "
"\"on success\" URL. The security check for these redirects (namely ``django."
"utils.http.is_safe_url()``) considered some numeric URLs (e.g. "
"``http:999999999``) \"safe\" when they shouldn't be."
msgstr ""
"Django 在某些情况下依赖用户输入（例如 ``django.contrib.auth.views.login()`` "
"和 :doc:`i18n </topics/i18n/index>`) 来将用户重定向到“成功”URL。这些重定向的"
"安全检查（即 ``django.utils.http.is_safe_url()``）认为一些数值 URL（例如 "
"``http:999999999``）是“安全”的，但实际上它们不应该是安全的。"

msgid ""
"Also, if a developer relies on ``is_safe_url()`` to provide safe redirect "
"targets and puts such a URL into a link, they could suffer from an XSS "
"attack."
msgstr ""
"此外，如果开发人员依赖于 ``is_safe_url()`` 来提供安全的重定向目标，并将这样"
"的 URL 放入链接中，他们可能会受到 XSS 攻击的影响。"

msgid ""
"CVE-2017-7234: Open redirect vulnerability in ``django.views.static.serve()``"
msgstr "CVE-2017-7234: ``django.views.static.serve()`` 中的开放重定向漏洞"

msgid ""
"A maliciously crafted URL to a Django site using the :func:`~django.views."
"static.serve` view could redirect to any other domain. The view no longer "
"does any redirects as they don't provide any known, useful functionality."
msgstr ""
"一个恶意构建的 URL 到一个使用 :func:`~django.views.static.serve` 视图的 "
"Django 站点可能会重定向到任何其他域。该视图不再进行任何重定向，因为它们不提供"
"任何已知的有用功能。"

msgid ""
"Note, however, that this view has always carried a warning that it is not "
"hardened for production use and should be used only as a development aid."
msgstr ""
"注意，然而，这个视图一直带有警告，即它没有经过生产环境的强化，只应作为开发辅"
"助工具使用。"

msgid ""
"Made admin's ``RelatedFieldWidgetWrapper`` use the wrapped widget's "
"``value_omitted_from_data()`` method (:ticket:`27905`)."
msgstr ""
"使管理员的 ``RelatedFieldWidgetWrapper`` 使用被包装小部件的 "
"``value_omitted_from_data()`` 方法 (:ticket:`27905`)。"

msgid ""
"Fixed model form ``default`` fallback for ``SelectMultiple`` (:ticket:"
"`27993`)."
msgstr ""
"修复了模型表单中 ``SelectMultiple`` 的 ``default`` 回退 (:ticket:`27993`)。"

msgid "Django 1.10.8 release notes"
msgstr "Django 1.10.8 版本发行说明"

msgid "*September 5, 2017*"
msgstr "*2017 年 9 月 5 日*"

msgid "Django 1.10.8 fixes a security issue in 1.10.7."
msgstr "Django 1.10.8 修复了 1.10.7 中的一个安全问题。"

msgid ""
"CVE-2017-12794: Possible XSS in traceback section of technical 500 debug page"
msgstr "CVE-2017-12794 ：技术性 500 调试页面的追踪部分可能存在 XSS 漏洞"

msgid ""
"In older versions, HTML autoescaping was disabled in a portion of the "
"template for the technical 500 debug page. Given the right circumstances, "
"this allowed a cross-site scripting attack. This vulnerability shouldn't "
"affect most production sites since you shouldn't run with ``DEBUG = True`` "
"(which makes this page accessible) in your production settings."
msgstr ""
"在旧版本中，在技术性的 500 调试页面模板的一部分中禁用了 HTML 自动转义。在正确"
"的情况下，这可能导致跨站点脚本攻击。这个漏洞不应影响大多数生产站点，因为你不"
"应该在生产设置中运行 ``DEBUG = True`` （这使得这个页面可访问）。"

msgid "Django 1.11 release notes"
msgstr "Django 1.11 版本发行说明"

msgid "Welcome to Django 1.11!"
msgstr "欢迎来到 Django 1.11 版本！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-1.11>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.11>` "
"you'll want to be aware of when upgrading from Django 1.10 or older "
"versions. We've :ref:`begun the deprecation process for some features "
"<deprecated-features-1.11>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-1.11>`，以及一些 :ref:`不兼容变更 "
"<backwards-incompatible-1.11>`，当您从 Django 1.10 或更早版本升级时，您需要注"
"意。我们已经 :ref:`开始了一些功能的弃用过程 <deprecated-features-1.11>`。"

msgid ""
"Django 1.11 is designated as a :term:`long-term support release <Long-term "
"support release>`. It will receive security updates for at least three years "
"after its release. Support for the previous LTS, Django 1.8, will end in "
"April 2018."
msgstr ""
"Django 1.11 被指定为 :term:`长期支持版本 <Long-term support release>`。它将在"
"发布后至少三年内接收安全更新。对于之前的 LTS 版本 Django 1.8，支持将于 2018 "
"年 4 月结束。"

msgid ""
"Django 1.11 requires Python 2.7, 3.4, 3.5, 3.6, or 3.7 (as of 1.11.17). We "
"**highly recommend** and only officially support the latest release of each "
"series."
msgstr ""
"Django 1.11 需要 Python 2.7、3.4、3.5、3.6 或 3.7（截止到 1.11.17 版本）。我"
"们* *强烈建议** 并且只正式支持每个系列的最新版本。"

msgid ""
"The Django 1.11.x series is the last to support Python 2. The next major "
"release, Django 2.0, will only support Python 3.4+."
msgstr ""
"Django 1.11.x 系列是支持 Python 2 的最后一个版本。下一个主要版本，Django "
"2.0，将仅支持 Python 3.4+。"

msgid "Deprecating warnings are no longer loud by default"
msgstr "弃用警告默认不再大声发出"

msgid ""
"Unlike older versions of Django, Django's own deprecation warnings are no "
"longer displayed by default. This is consistent with Python's default "
"behavior."
msgstr ""
"与旧版本的 Django 不同，Django 自身的弃用警告默认不再显示。这与 Python 的默认"
"行为一致。"

msgid ""
"This change allows third-party apps to support both Django 1.11 LTS and "
"Django 1.8 LTS without having to add code to avoid deprecation warnings."
msgstr ""
"此更改允许第三方应用在不添加用于避免弃用警告的代码的情况下同时支持 Django "
"1.11 LTS 和 Django 1.8 LTS 。"

msgid ""
"Following the release of Django 2.0, we suggest that third-party app authors "
"drop support for all versions of Django prior to 1.11. At that time, you "
"should be able run your package's tests using ``python -Wd`` so that "
"deprecation warnings do appear. After making the deprecation warning fixes, "
"your app should be compatible with Django 2.0."
msgstr ""
"在发布 Django 2.0 后，我们建议第三方应用的作者停止支持所有在 1.11 之前的 "
"Django 版本。在那时，您应该能够使用 ``python -Wd`` 运行您包的测试，以确保弃用"
"警告出现。在修复弃用警告后，您的应用应该与 Django 2.0 兼容。"

msgid "What's new in Django 1.11"
msgstr "Django 1.11 新特性"

msgid "Class-based model indexes"
msgstr "基于类的模型索引"

msgid ""
"The new :mod:`django.db.models.indexes` module contains classes which ease "
"creating database indexes. Indexes are added to models using the :attr:`Meta."
"indexes <django.db.models.Options.indexes>` option."
msgstr ""
"新的 :mod:`django.db.models.indexes` 模块包含了用于简化创建数据库索引的类。索"
"引可以通过在模型中使用 :attr:`Meta.indexes <django.db.models.Options."
"indexes>` 选项来添加。"

msgid ""
"The :class:`~django.db.models.Index` class creates a b-tree index, as if you "
"used :attr:`~django.db.models.Field.db_index` on the model field or "
"``index_together`` on the model ``Meta`` class. It can be subclassed to "
"support different index types, such as :class:`~django.contrib.postgres."
"indexes.GinIndex`. It also allows defining the order (ASC/DESC) for the "
"columns of the index."
msgstr ""

msgid "Template-based widget rendering"
msgstr "基于模板的小部件渲染"

msgid ""
"To ease customizing widgets, form widget rendering is now done using the "
"template system rather than in Python. See :doc:`/ref/forms/renderers`."
msgstr ""
"为了方便定制小部件，现在表单小部件的渲染是使用模板系统而不是在 Python 中进行"
"的。请参阅 :doc:`/ref/forms/renderers`。"

msgid ""
"You may need to adjust any custom widgets that you've written for a few :ref:"
"`backwards incompatible changes <template-widget-incompatibilities-1-11>`."
msgstr ""
"你可能需要调整你编写的任何自定义小部件，以适应一些 :ref:`不兼容变更 "
"<template-widget-incompatibilities-1-11>`。"

msgid "``Subquery`` expressions"
msgstr "``Subquery`` 表达式"

msgid ""
"The new :class:`~django.db.models.Subquery` and :class:`~django.db.models."
"Exists` database expressions allow creating explicit subqueries. Subqueries "
"may refer to fields from the outer queryset using the :class:`~django.db."
"models.OuterRef` class."
msgstr ""
"新的 :class:`~django.db.models.Subquery` 和 :class:`~django.db.models."
"Exists` 数据库表达式允许创建明确的子查询。子查询可以使用 :class:`~django.db."
"models.OuterRef` 类引用来自外部查询集的字段。"

msgid ""
":attr:`.ModelAdmin.date_hierarchy` can now reference fields across relations."
msgstr ":attr:`.ModelAdmin.date_hierarchy` 现在可以引用跨关联的字段。"

msgid ""
"The new :meth:`ModelAdmin.get_exclude() <django.contrib.admin.ModelAdmin."
"get_exclude>` hook allows specifying the exclude fields based on the request "
"or model instance."
msgstr ""
"新的 :meth:`ModelAdmin.get_exclude() <django.contrib.admin.ModelAdmin."
"get_exclude>` 钩子允许根据请求或模型实例指定要排除的字段。"

msgid ""
"The ``popup_response.html`` template can now be overridden per app, per "
"model, or by setting the :attr:`.ModelAdmin.popup_response_template` "
"attribute."
msgstr ""
"``popup_response.html`` 模板现在可以按照每个应用程序、每个模型或通过设置 :"
"attr:`.ModelAdmin.popup_response_template` 属性来进行覆盖。"

msgid ""
"The default iteration count for the PBKDF2 password hasher is increased by "
"20%."
msgstr "PBKDF2 密码哈希器的默认迭代次数增加了 20 %。"

msgid ""
"The :class:`~django.contrib.auth.views.LoginView` and :class:`~django."
"contrib.auth.views.LogoutView` class-based views supersede the deprecated "
"``login()`` and ``logout()`` function-based views."
msgstr ""
":class:`~django.contrib.auth.views.LoginView` 和 :class:`~django.contrib."
"auth.views.LogoutView` 基于类的视图替代了已弃用的 ``login()`` 和 "
"``logout()`` 基于函数的视图。"

msgid ""
"The :class:`~django.contrib.auth.views.PasswordChangeView`, :class:`~django."
"contrib.auth.views.PasswordChangeDoneView`, :class:`~django.contrib.auth."
"views.PasswordResetView`, :class:`~django.contrib.auth.views."
"PasswordResetDoneView`, :class:`~django.contrib.auth.views."
"PasswordResetConfirmView`, and :class:`~django.contrib.auth.views."
"PasswordResetCompleteView` class-based views supersede the deprecated "
"``password_change()``, ``password_change_done()``, ``password_reset()``, "
"``password_reset_done()``, ``password_reset_confirm()``, and "
"``password_reset_complete()`` function-based views."
msgstr ""
":class:`~django.contrib.auth.views.PasswordChangeView`、:class:`~django."
"contrib.auth.views.PasswordChangeDoneView`、:class:`~django.contrib.auth."
"views.PasswordResetView`、:class:`~django.contrib.auth.views."
"PasswordResetDoneView`、:class:`~django.contrib.auth.views."
"PasswordResetConfirmView` 和 :class:`~django.contrib.auth.views."
"PasswordResetCompleteView` 基于类的视图替代了已弃用的 ``password_change()``, "
"``password_change_done()``, ``password_reset()``, ``password_reset_done()``, "
"``password_reset_confirm()``, 和 ``password_reset_complete()`` 基于函数的视"
"图。"

msgid ""
"The new ``post_reset_login`` attribute for :class:`~django.contrib.auth."
"views.PasswordResetConfirmView` allows automatically logging in a user after "
"a successful password reset. If you have multiple "
"``AUTHENTICATION_BACKENDS`` configured, use the ``post_reset_login_backend`` "
"attribute to choose which one to use."
msgstr ""
":class:`~django.contrib.auth.views.PasswordResetConfirmView` 的新属性 "
"``post_reset_login`` 允许在成功重置密码后自动登录用户。如果配置了多个 "
"``AUTHENTICATION_BACKENDS``，可以使用 ``post_reset_login_backend`` 属性选择要"
"使用的后端。"

msgid ""
"To avoid the possibility of leaking a password reset token via the HTTP "
"Referer header (for example, if the reset page includes a reference to CSS "
"or JavaScript hosted on another domain), the :class:`~django.contrib.auth."
"views.PasswordResetConfirmView` (but not the deprecated "
"``password_reset_confirm()`` function-based view) stores the token in a "
"session and redirects to itself to present the password change form to the "
"user without the token in the URL."
msgstr ""
"为了避免通过 HTTP Referer 标头泄露密码重置令牌的可能性（例如，如果重置页面包"
"含对托管在另一个域上的 CSS 或 JavaScript 的引用），:class:`~django.contrib."
"auth.views.PasswordResetConfirmView` （但不是已弃用的 "
"``password_reset_confirm()`` 基于函数的视图）将令牌存储在会话中，并重定向到自"
"身，以向用户呈现不带令牌的 URL 的密码更改表单。"

msgid ""
":func:`~django.contrib.auth.update_session_auth_hash` now rotates the "
"session key to allow a password change to invalidate stolen session cookies."
msgstr ""
":func:`~django.contrib.auth.update_session_auth_hash` 现在会旋转会话密钥，以"
"允许密码更改来使被窃取的会话 Cookie 失效。"

msgid ""
"The new ``success_url_allowed_hosts`` attribute for :class:`~django.contrib."
"auth.views.LoginView` and :class:`~django.contrib.auth.views.LogoutView` "
"allows specifying a set of hosts that are safe for redirecting after login "
"and logout."
msgstr ""
":class:`~django.contrib.auth.views.LoginView` 和 :class:`~django.contrib."
"auth.views.LogoutView` 的新属性 ``success_url_allowed_hosts`` 允许指定一组安"
"全的主机，用于在登录和注销后进行重定向。"

msgid ""
"Added password validators ``help_text`` to :class:`~django.contrib.auth."
"forms.UserCreationForm`."
msgstr ""
"已添加密码验证器的 ``help_text`` 到 :class:`~django.contrib.auth.forms."
"UserCreationForm`。"

msgid ""
"The ``HttpRequest`` is now passed to :func:`~django.contrib.auth."
"authenticate` which in turn passes it to the authentication backend if it "
"accepts a ``request`` argument."
msgstr ""
"``HttpRequest`` 现在传递给 :func:`~django.contrib.auth.authenticate`，如果身"
"份验证后端接受 ``request`` 参数，则它将传递给身份验证后端。"

msgid ""
"The :func:`~django.contrib.auth.signals.user_login_failed` signal now "
"receives a ``request`` argument."
msgstr ""
":func:`~django.contrib.auth.signals.user_login_failed` 信号现在接收一个 "
"``request`` 参数。"

msgid ""
":class:`~django.contrib.auth.forms.PasswordResetForm` supports custom user "
"models that use an email field named something other than ``'email'``. Set :"
"attr:`CustomUser.EMAIL_FIELD <django.contrib.auth.models.CustomUser."
"EMAIL_FIELD>` to the name of the field."
msgstr ""
":class:`~django.contrib.auth.forms.PasswordResetForm` 支持自定义用户模型，该"
"模型使用名称不是 ``'email'`` 的电子邮件字段。将 :attr:`CustomUser."
"EMAIL_FIELD <django.contrib.auth.models.CustomUser.EMAIL_FIELD>` 设置为字段的"
"名称。"

msgid ""
":func:`~django.contrib.auth.get_user_model` can now be called at import "
"time, even in modules that define models."
msgstr ""
":func:`~django.contrib.auth.get_user_model` 现在可以在导入时调用，即使在定义"
"模型的模块中也可以。"

msgid ":mod:`django.contrib.contenttypes`"
msgstr ":mod:`django.contrib.contenttypes`"

msgid ""
"When stale content types are detected in the :djadmin:"
"`remove_stale_contenttypes` command, there's now a list of related objects "
"such as ``auth.Permission``\\s that will also be deleted. Previously, only "
"the content types were listed (and this prompt was after ``migrate`` rather "
"than in a separate command)."
msgstr ""
"在 :djadmin:`remove_stale_contenttypes` 命令中，当检测到陈旧的内容类型时，现"
"在会列出一系列相关对象，如 ``auth.Permission``，这些对象也将被删除。之前，只"
"列出了内容类型（而且此提示是在 ``migrate`` 之后，而不是在一个单独的命令中）。"

msgid ""
"The new :meth:`.GEOSGeometry.from_gml` and :meth:`.OGRGeometry.from_gml` "
"methods allow creating geometries from GML."
msgstr ""
"新的 :meth:`.GEOSGeometry.from_gml` 和 :meth:`.OGRGeometry.from_gml` 方法允许"
"从 GML 创建几何图形。"

msgid "Added support for the :lookup:`dwithin` lookup on SpatiaLite."
msgstr "在 SpatiaLite 上新增了对 :lookup:`dwithin` 查询的支持。"

msgid ""
"The :class:`~django.contrib.gis.db.models.functions.Area` function, :class:"
"`~django.contrib.gis.db.models.functions.Distance` function, and distance "
"lookups now work with geodetic coordinates on SpatiaLite."
msgstr ""
":class:`~django.contrib.gis.db.models.functions.Area` 函数、:class:`~django."
"contrib.gis.db.models.functions.Distance` 函数以及距离查询现在在 SpatiaLite "
"上支持大地坐标。"

msgid ""
"The OpenLayers-based form widgets now use ``OpenLayers.js`` from ``https://"
"cdnjs.cloudflare.com`` which is more suitable for production use than the "
"old ``https://openlayers.org/`` source. They are also updated to use "
"OpenLayers 3."
msgstr ""
"基于 OpenLayers 的表单小部件现在使用来自 ``https://cdnjs.cloudflare.com`` 的 "
"``OpenLayers.js``，这比旧的 ``https://openlayers.org/`` 源更适合生产使用。它"
"们还更新为使用 OpenLayers 3。"

msgid "PostGIS migrations can now change field dimensions."
msgstr "PostGIS 迁移现在可以改变字段尺寸。"

msgid ""
"Added the ability to pass the ``size``, ``shape``, and ``offset`` parameters "
"when creating :class:`~django.contrib.gis.gdal.GDALRaster` objects."
msgstr ""
"现在可以在创建 :class:`~django.contrib.gis.gdal.GDALRaster` 对象时传递 "
"``size``、``shape`` 和 ``offset`` 参数。"

msgid ""
"Added SpatiaLite support for the :class:`~django.contrib.gis.db.models."
"functions.IsValid` function, :class:`~django.contrib.gis.db.models.functions."
"MakeValid` function, and :lookup:`isvalid` lookup."
msgstr ""
"新增了对 :class:`~django.contrib.gis.db.models.functions.IsValid` 函数、:"
"class:`~django.contrib.gis.db.models.functions.MakeValid` 函数以及 :lookup:"
"`isvalid` 查询的 SpatiaLite 支持。"

msgid ""
"Added Oracle support for the :class:`~django.contrib.gis.db.models.functions."
"AsGML` function, :class:`~django.contrib.gis.db.models.functions."
"BoundingCircle` function, :class:`~django.contrib.gis.db.models.functions."
"IsValid` function, and :lookup:`isvalid` lookup."
msgstr ""
"新增了对 Oracle 数据库的支持，包括 :class:`~django.contrib.gis.db.models."
"functions.AsGML` 函数、:class:`~django.contrib.gis.db.models.functions."
"BoundingCircle` 函数、:class:`~django.contrib.gis.db.models.functions."
"IsValid` 函数以及 :lookup:`isvalid` 查询。"

msgid ""
"The new ``distinct`` argument for :class:`~django.contrib.postgres."
"aggregates.StringAgg` determines if concatenated values will be distinct."
msgstr ""
":class:`~django.contrib.postgres.aggregates.StringAgg` 的新参数 ``distinct`` "
"决定了连接的值是否要去重。"

msgid ""
"The new :class:`~django.contrib.postgres.indexes.GinIndex` and :class:"
"`~django.contrib.postgres.indexes.BrinIndex` classes allow creating ``GIN`` "
"and ``BRIN`` indexes in the database."
msgstr ""
"新的 :class:`~django.contrib.postgres.indexes.GinIndex` 和 :class:`~django."
"contrib.postgres.indexes.BrinIndex` 类允许在数据库中创建 ``GIN`` 和 ``BRIN`` "
"索引。"

msgid ""
"``django.contrib.postgres.fields.JSONField`` accepts a new ``encoder`` "
"parameter to specify a custom class to encode data types not supported by "
"the standard encoder."
msgstr ""
"``django.contrib.postgres.fields.JSONField`` 接受一个新的参数 ``encoder``，用"
"于指定自定义类以编码不受标准编码器支持的数据类型。"

msgid ""
"The new ``CIText`` mixin and :class:`~django.contrib.postgres.operations."
"CITextExtension` migration operation allow using PostgreSQL's ``citext`` "
"extension for case-insensitive lookups. Three fields are provided: "
"``CICharField``, ``CIEmailField``, and ``CITextField``."
msgstr ""
"新的 ``CIText`` 混合类和 :class:`~django.contrib.postgres.operations."
"CITextExtension` 迁移操作允许在 PostgreSQL 中使用 ``citext`` 扩展来进行不区分"
"大小写的查找。提供了三个字段：``CICharField``、``CIEmailField`` 和 "
"``CITextField``。"

msgid ""
"The new :class:`~django.contrib.postgres.aggregates.JSONBAgg` allows "
"aggregating values as a JSON array."
msgstr ""
"新的 :class:`~django.contrib.postgres.aggregates.JSONBAgg` 允许将值聚合为 "
"JSON 数组。"

msgid ""
"The :class:`~django.contrib.postgres.fields.HStoreField` (model field) and :"
"class:`~django.contrib.postgres.forms.HStoreField` (form field) allow "
"storing null values."
msgstr ""
":class:`~django.contrib.postgres.fields.HStoreField` （模型字段）和 :class:"
"`~django.contrib.postgres.forms.HStoreField` （表单字段）允许存储空值。"

msgid ""
"Memcached backends now pass the contents of :setting:`OPTIONS <CACHES-"
"OPTIONS>` as keyword arguments to the client constructors, allowing for more "
"advanced control of client behavior. See the :ref:`cache arguments "
"<cache_arguments>` documentation for examples."
msgstr ""
"Memcached 后端现在将 :setting:`OPTIONS <CACHES-OPTIONS>` 的内容作为关键字参数"
"传递给客户端构造函数，允许更高级的客户端行为控制。请参阅 :ref:`cache "
"arguments <cache_arguments>` 文档以获取示例。"

msgid ""
"Memcached backends now allow defining multiple servers as a comma-delimited "
"string in :setting:`LOCATION <CACHES-LOCATION>`, for convenience with third-"
"party services that use such strings in environment variables."
msgstr ""
"Memcached 后端现在允许在 :setting:`LOCATION <CACHES-LOCATION>` 中定义多个服务"
"器，使用逗号分隔的字符串，以方便处理使用这种字符串的环境变量的第三方服务。"

msgid ""
"Added the :setting:`CSRF_USE_SESSIONS` setting to allow storing the CSRF "
"token in the user's session rather than in a cookie."
msgstr ""
"新增了 :setting:`CSRF_USE_SESSIONS` 设置，允许将 CSRF 令牌存储在用户的会话"
"中，而不是在 cookie 中。"

msgid ""
"Added the ``skip_locked`` argument to :meth:`.QuerySet.select_for_update()` "
"on PostgreSQL 9.5+ and Oracle to execute queries with ``FOR UPDATE SKIP "
"LOCKED``."
msgstr ""
"在 PostgreSQL 9.5+ 和 Oracle 上，新增了 ``skip_locked`` 参数，用于执行带有 "
"``FOR UPDATE SKIP LOCKED`` 的查询，可通过 :meth:`.QuerySet."
"select_for_update()` 使用。"

msgid ""
"Added the :setting:`TEST['TEMPLATE'] <TEST_TEMPLATE>` setting to let "
"PostgreSQL users specify a template for creating the test database."
msgstr ""
"新增了 :setting:`TEST['TEMPLATE'] <TEST_TEMPLATE>` 设置，允许 PostgreSQL 用户"
"指定用于创建测试数据库的模板。"

msgid ""
":meth:`.QuerySet.iterator()` now uses `server-side cursors`_ on PostgreSQL. "
"This feature transfers some of the worker memory load (used to hold query "
"results) to the database and might increase database memory usage."
msgstr ""
":meth:`.QuerySet.iterator()` 现在在 PostgreSQL 上使用 `server-side "
"cursors`_。这个功能将一些用于保存查询结果的工作内存负载转移到数据库，可能会增"
"加数据库的内存使用量。"

msgid ""
"Added MySQL support for the ``'isolation_level'`` option in :setting:"
"`OPTIONS` to allow specifying the :ref:`transaction isolation level <mysql-"
"isolation-level>`. To avoid possible data loss, it's recommended to switch "
"from MySQL's default level, repeatable read, to read committed."
msgstr ""
"新增了对在 :setting:`OPTIONS` 中使用 ``'isolation_level'`` 选项的 MySQL 支"
"持，允许指定 :ref:`事务隔离级别 <mysql-isolation-level>`。为了避免可能的数据"
"丢失，建议从 MySQL 的默认级别 repeatable read 切换到 read committed。"

msgid "Added support for ``cx_Oracle`` 5.3."
msgstr "新增了对 ``cx_Oracle`` 5.3 的支持。"

msgid "Email"
msgstr "电子邮件"

msgid ""
"Added the :setting:`EMAIL_USE_LOCALTIME` setting to allow sending SMTP date "
"headers in the local time zone rather than in UTC."
msgstr ""
"新增了 :setting:`EMAIL_USE_LOCALTIME` 设置，允许将 SMTP 日期标头发送到本地时"
"区，而不是 UTC。"

msgid ""
"``EmailMessage.attach()`` and ``attach_file()`` now fall back to MIME type :"
"mimetype:`application/octet-stream` when binary content that can't be "
"decoded as UTF-8 is specified for a :mimetype:`text/*` attachment."
msgstr ""
"``EmailMessage.attach()`` 和 ``attach_file()`` 现在在为 :mimetype:`text/*` 附"
"件指定无法解码为 UTF-8 的二进制内容时，会回退到 MIME 类型 :mimetype:"
"`application/octet-stream`。"

msgid ""
"To make it wrappable by :class:`io.TextIOWrapper`, :class:`~django.core."
"files.File` now has the ``readable()``, ``writable()``, and ``seekable()`` "
"methods."
msgstr ""
"为了能够被 :class:`io.TextIOWrapper` 包装，:class:`~django.core.files.File` "
"现在具有 ``readable()``、``writable()`` 和 ``seekable()`` 方法。"

msgid ""
"The new ``empty_value`` attribute on :class:`~django.forms.CharField`, :"
"class:`~django.forms.EmailField`, :class:`~django.forms.RegexField`, :class:"
"`~django.forms.SlugField`, and :class:`~django.forms.URLField` allows "
"specifying the Python value to use to represent \"empty\"."
msgstr ""
"在 :class:`~django.forms.CharField`、:class:`~django.forms.EmailField`、:"
"class:`~django.forms.RegexField`、:class:`~django.forms.SlugField` 和 :class:"
"`~django.forms.URLField` 上新增了 ``empty_value`` 属性，允许指定表示 \"空\" "
"的 Python 值。"

msgid ""
"The new :meth:`Form.get_initial_for_field() <django.forms.Form."
"get_initial_for_field>` method returns initial data for a form field."
msgstr ""
"新的 :meth:`Form.get_initial_for_field() <django.forms.Form."
"get_initial_for_field>` 方法返回表单字段的初始数据。"

msgid ""
"Number formatting and the :setting:`NUMBER_GROUPING` setting support non-"
"uniform digit grouping."
msgstr "数字格式化和 :setting:`NUMBER_GROUPING` 设置支持非均匀的数字分组。"

msgid ""
"The new :option:`loaddata --exclude` option allows excluding models and apps "
"while loading data from fixtures."
msgstr ""
"新的 :option:`loaddata --exclude` 选项允许在从 fixture 加载数据时排除模型和应"
"用程序。"

msgid ""
"The new :option:`diffsettings --default` option allows specifying a settings "
"module other than Django's default settings to compare against."
msgstr ""
"新的 :option:`diffsettings --default` 选项允许指定与 Django 默认设置进行比较"
"的设置模块。"

msgid ""
"``app_label``\\s arguments now limit the :option:`showmigrations --plan` "
"output."
msgstr "``app_label`` 参数现在限制了 :option:`showmigrations --plan` 输出。"

msgid "Added support for serialization of ``uuid.UUID`` objects."
msgstr "新增了对 ``uuid.UUID`` 对象的序列化支持。"

msgid ""
"Added support for callable values in the ``defaults`` argument of :meth:"
"`QuerySet.update_or_create() <django.db.models.query.QuerySet."
"update_or_create>` and :meth:`~django.db.models.query.QuerySet."
"get_or_create`."
msgstr ""
"在 :meth:`QuerySet.update_or_create() <django.db.models.query.QuerySet."
"update_or_create>` 和 :meth:`~django.db.models.query.QuerySet.get_or_create` "
"的 ``defaults`` 参数中新增了对可调用值的支持。"

msgid ""
":class:`~django.db.models.ImageField` now has a default :data:`~django.core."
"validators.validate_image_file_extension` validator. (This validator moved "
"to the form field in :doc:`Django 1.11.2 <1.11.2>`.)"
msgstr ""
":class:`~django.db.models.ImageField` 现在具有默认的 :data:`~django.core."
"validators.validate_image_file_extension` 验证器。（此验证器在 :doc:`Django "
"1.11.2 <1.11.2>` 中移至表单字段。）"

msgid ""
"Added support for time truncation to :class:`~django.db.models.functions."
"Trunc` functions."
msgstr ":class:`~django.db.models.functions.Trunc` 函数现在支持时间截断。"

msgid ""
"Added the :class:`~django.db.models.functions.ExtractWeek` function to "
"extract the week from :class:`~django.db.models.DateField` and :class:"
"`~django.db.models.DateTimeField` and exposed it through the :lookup:`week` "
"lookup."
msgstr ""
"新增了 :class:`~django.db.models.functions.ExtractWeek` 函数，用于从 :class:"
"`~django.db.models.DateField` 和 :class:`~django.db.models.DateTimeField` 中"
"提取周，并通过 :lookup:`week` 查询公开。"

msgid ""
"Added the :class:`~django.db.models.functions.TruncTime` function to "
"truncate :class:`~django.db.models.DateTimeField` to its time component and "
"exposed it through the :lookup:`time` lookup."
msgstr ""
"新增了 :class:`~django.db.models.functions.TruncTime` 函数，用于将 :class:"
"`~django.db.models.DateTimeField` 截断到其时间组件，并通过 :lookup:`time` 查"
"询公开。"

msgid ""
"Added support for expressions in :meth:`.QuerySet.values` and :meth:`~."
"QuerySet.values_list`."
msgstr ""
"在 :meth:`.QuerySet.values` 和 :meth:`~.QuerySet.values_list` 中添加了对表达"
"式的支持。"

msgid ""
"Added support for query expressions on lookups that take multiple arguments, "
"such as ``range``."
msgstr "对于接受多个参数的查询，如 ``range``，新增了对查询表达式的支持。"

msgid ""
"You can now use the ``unique=True`` option with :class:`~django.db.models."
"FileField`."
msgstr ""
"现在可以在 :class:`~django.db.models.FileField` 上使用 ``unique=True`` 选项。"

msgid ""
"Added the ``nulls_first`` and ``nulls_last`` parameters to :class:"
"`Expression.asc() <django.db.models.Expression.asc>` and :meth:`~django.db."
"models.Expression.desc` to control the ordering of null values."
msgstr ""
"新增了 :class:`Expression.asc() <django.db.models.Expression.asc>` 和 :meth:"
"`~django.db.models.Expression.desc` 的 ``nulls_first`` 和 ``nulls_last`` 参"
"数，用于控制空值的排序顺序。"

msgid ""
"The new ``F`` expression ``bitleftshift()`` and ``bitrightshift()`` methods "
"allow :ref:`bitwise shift operations <using-f-expressions-in-filters>`."
msgstr ""
"新的 ``F`` 表达式中的 ``bitleftshift()`` 和 ``bitrightshift()`` 方法允许进"
"行 :ref:`位移位操作 <using-f-expressions-in-filters>`。"

msgid ""
"Added :meth:`.QuerySet.union`, :meth:`~.QuerySet.intersection`, and :meth:`~."
"QuerySet.difference`."
msgstr ""
"新增了 :meth:`.QuerySet.union`、:meth:`~.QuerySet.intersection` 和 :meth:`~."
"QuerySet.difference` 方法。"

msgid "Added :meth:`QueryDict.fromkeys() <django.http.QueryDict.fromkeys>`."
msgstr ""
"新增了 :meth:`QueryDict.fromkeys() <django.http.QueryDict.fromkeys>` 方法。"

msgid ""
":class:`~django.middleware.common.CommonMiddleware` now sets the ``Content-"
"Length`` response header for non-streaming responses."
msgstr ""
":class:`~django.middleware.common.CommonMiddleware` 现在为非流式响应设置 "
"``Content-Length`` 响应头。"

msgid ""
"Added the :setting:`SECURE_HSTS_PRELOAD` setting to allow appending the "
"``preload`` directive to the ``Strict-Transport-Security`` header."
msgstr ""
"新增了 :setting:`SECURE_HSTS_PRELOAD` 设置，允许将 ``preload`` 指令附加到 "
"``Strict-Transport-Security`` 头部。"

msgid ""
":class:`~django.middleware.http.ConditionalGetMiddleware` now adds the "
"``ETag`` header to responses."
msgstr ""
":class:`~django.middleware.http.ConditionalGetMiddleware` 现在将 ``ETag`` 头"
"部添加到响应中。"

msgid ""
"The new ``django.core.serializers.base.Serializer.stream_class`` attribute "
"allows subclasses to customize the default stream."
msgstr ""
"新的 ``django.core.serializers.base.Serializer.stream_class`` 属性允许子类自"
"定义默认流。"

msgid ""
"The encoder used by the :ref:`JSON serializer <serialization-formats-json>` "
"can now be customized by passing a ``cls`` keyword argument to the "
"``serializers.serialize()`` function."
msgstr ""
"可以通过向 ``serializers.serialize()`` 函数传递一个 ``cls`` 关键字参数来自定"
"义 :ref:`JSON 序列化器 <serialization-formats-json>` 使用的编码器。"

msgid ""
":class:`~django.core.serializers.json.DjangoJSONEncoder` now serializes :"
"class:`~datetime.timedelta` objects (used by :class:`~django.db.models."
"DurationField`)."
msgstr ""
":class:`~django.core.serializers.json.DjangoJSONEncoder` 现在可以序列化 :"
"class:`~datetime.timedelta` 对象（被 :class:`~django.db.models."
"DurationField` 使用）。"

msgid ""
":meth:`~django.utils.safestring.mark_safe` can now be used as a decorator."
msgstr "现在可以将 :meth:`~django.utils.safestring.mark_safe` 用作装饰器。"

msgid ""
"The :class:`~django.template.backends.jinja2.Jinja2` template backend now "
"supports context processors by setting the ``'context_processors'`` option "
"in :setting:`OPTIONS <TEMPLATES-OPTIONS>`."
msgstr ""
":class:`~django.template.backends.jinja2.Jinja2` 模板后端现在支持通过在 :"
"setting:`OPTIONS <TEMPLATES-OPTIONS>` 中设置 ``'context_processors'`` 选项来"
"配置上下文处理器。"

msgid ""
"The :ttag:`regroup` tag now returns ``namedtuple``\\s instead of "
"dictionaries so you can unpack the group object directly in a loop, e.g. "
"``{% for grouper, list in regrouped %}``."
msgstr ""
":ttag:`regroup` 标签现在返回 ``namedtuple`` 而不是字典，因此你可以在循环中直"
"接解包组对象，例如 ``{% for grouper, list in regrouped %}``。"

msgid ""
"Added a :ttag:`resetcycle` template tag to allow resetting the sequence of "
"the :ttag:`cycle` template tag."
msgstr ""
"新增了 :ttag:`resetcycle` 模板标签，允许重置 :ttag:`cycle` 模板标签的序列。"

msgid ""
"You can now specify specific directories for a particular :class:`filesystem."
"Loader <django.template.loaders.filesystem.Loader>`."
msgstr ""
"现在可以为特定的 :class:`filesystem.Loader <django.template.loaders."
"filesystem.Loader>` 指定特定的目录。"

msgid ""
"Added :meth:`.DiscoverRunner.get_test_runner_kwargs` to allow customizing "
"the keyword arguments passed to the test runner."
msgstr ""
"新增了 :meth:`.DiscoverRunner.get_test_runner_kwargs` 方法，允许自定义传递给"
"测试运行器的关键字参数。"

msgid ""
"Added the :option:`test --debug-mode` option to help troubleshoot test "
"failures by setting the :setting:`DEBUG` setting to ``True``."
msgstr ""
"新增了 :option:`test --debug-mode` 选项，通过将 :setting:`DEBUG` 设置为 "
"``True`` 来帮助排查测试失败。"

msgid ""
"The new :func:`django.test.utils.setup_databases` (moved from ``django.test."
"runner``) and :func:`~django.test.utils.teardown_databases` functions make "
"it easier to build custom test runners."
msgstr ""
"新的 :func:`django.test.utils.setup_databases` （从 ``django.test.runner`` 移"
"动过来）和 :func:`~django.test.utils.teardown_databases` 函数使构建自定义测试"
"运行器更加容易。"

msgid ""
"Added support for :meth:`python:unittest.TestCase.subTest`’s when using the :"
"option:`test --parallel` option."
msgstr ""
"在使用 :option:`test --parallel` 选项时，新增了对 :meth:`python:unittest."
"TestCase.subTest` 的支持。"

msgid ""
"``DiscoverRunner`` now runs the system checks at the start of a test run. "
"Override the :meth:`.DiscoverRunner.run_checks` method if you want to "
"disable that."
msgstr ""
"``DiscoverRunner`` 现在在测试运行开始时运行系统检查。如果要禁用此功能，请覆"
"盖 :meth:`.DiscoverRunner.run_checks` 方法。"

msgid ""
"Added :class:`~django.core.validators.FileExtensionValidator` to validate "
"file extensions and :data:`~django.core.validators."
"validate_image_file_extension` to validate image files."
msgstr ""
"新增了 :class:`~django.core.validators.FileExtensionValidator` 以验证文件扩展"
"名，以及 :data:`~django.core.validators.validate_image_file_extension` 以验证"
"图像文件。"

msgid "Backwards incompatible changes in 1.11"
msgstr "1.11 中的向后不兼容更改"

msgid ""
"To simplify the codebase and because it's easier to install than when "
"``contrib.gis`` was first released, :ref:`gdalbuild` is now a required "
"dependency for GeoDjango. In older versions, it's only required for SQLite."
msgstr ""
"为了简化代码库并且因为现在安装起来更容易（相对于最初发布 ``contrib.gis`` 时的"
"情况），现在在 GeoDjango 中需要 :ref:`gdalbuild` 作为依赖。在旧版本中，它只"
"对 SQLite 有要求。"

msgid ""
"``contrib.gis.maps`` is removed as it interfaces with a retired version of "
"the Google Maps API and seems to be unmaintained. If you're using it, :"
"ticket:`let us know <14284>`."
msgstr ""
"``contrib.gis.maps`` 已被移除，因为它与已退役的 Google Maps API 版本进行交"
"互，似乎没有维护。如果您正在使用它，请 :ticket:`告诉我们 <14284>`。"

msgid "The ``GEOSGeometry`` equality operator now also compares SRID."
msgstr "``GEOSGeometry`` 的等号运算符现在也会比较 SRID。"

msgid ""
"The OpenLayers-based form widgets now use OpenLayers 3, and the ``gis/"
"openlayers.html`` and ``gis/openlayers-osm.html`` templates have been "
"updated. Check your project if you subclass these widgets or extend the "
"templates. Also, the new widgets work a bit differently than the old ones. "
"Instead of using a toolbar in the widget, you click to draw, click and drag "
"to move the map, and click and drag a point/vertex/corner to move it."
msgstr ""
"基于 OpenLayers 的表单小部件现在使用 OpenLayers 3，同时更新了 ``gis/"
"openlayers.html`` 和 ``gis/openlayers-osm.html`` 模板。如果您对这些小部件进行"
"子类化或扩展模板，请检查您的项目。此外，新的小部件与旧的小部件有一些不同。不"
"再使用小部件中的工具栏，而是点击以绘制，点击并拖动以移动地图，以及点击并拖动"
"一个点/顶点/角来移动它。"

msgid "Support for SpatiaLite < 4.0 is dropped."
msgstr "不再支持 SpatiaLite < 4.0 。"

msgid "Support for GDAL 1.7 and 1.8 is dropped."
msgstr "不再支持 GDAL 1.7 和 1.8 。"

msgid ""
"The widgets in ``contrib.gis.forms.widgets`` and the admin's "
"``OpenLayersWidget`` use the :doc:`form rendering API </ref/forms/"
"renderers>` rather than ``loader.render_to_string()``. If you're using a "
"custom widget template, you'll need to be sure your form renderer can locate "
"it. For example, you could use the :class:`~django.forms.renderers."
"TemplatesSetting` renderer."
msgstr ""
"``contrib.gis.forms.widgets`` 中的小部件和管理员的 ``OpenLayersWidget`` 现在"
"使用 :doc:`表单渲染 API </ref/forms/renderers>` 而不是 ``loader."
"render_to_string()``。如果您使用自定义小部件模板，您需要确保您的表单渲染器可"
"以找到它。例如，您可以使用 :class:`~django.forms.renderers.TemplatesSetting` "
"渲染器。"

msgid ""
"``collectstatic`` may now fail during post-processing when using a hashed "
"static files storage if a reference loop exists (e.g. ``'foo.css'`` "
"references ``'bar.css'`` which itself references ``'foo.css'``) or if the "
"chain of files referencing other files is too deep to resolve in several "
"passes. In the latter case, increase the number of passes using :attr:`."
"ManifestStaticFilesStorage.max_post_process_passes`."
msgstr ""
"当使用散列的静态文件存储时，如果存在引用循环（例如，``'foo.css'`` 引用 "
"``'bar.css'``，而 ``'bar.css'`` 又引用 ``'foo.css'``），或者如果引用其他文件"
"的文件链过深，无法在多次传递中解析，那么 ``collectstatic`` 在后处理期间可能会"
"失败。在后一种情况下，可以通过 :attr:`.ManifestStaticFilesStorage."
"max_post_process_passes` 增加传递次数。"

msgid ""
"When using ``ManifestStaticFilesStorage``, static files not found in the "
"manifest at runtime now raise a ``ValueError`` instead of returning an "
"unchanged path. You can revert to the old behavior by setting :attr:`."
"ManifestStaticFilesStorage.manifest_strict` to ``False``."
msgstr ""
"当使用 ``ManifestStaticFilesStorage`` 时，运行时未在清单中找到的静态文件现在"
"会引发 ``ValueError``，而不是返回不变的路径。您可以通过将 :attr:`."
"ManifestStaticFilesStorage.manifest_strict` 设置为 ``False`` 来恢复到旧的行"
"为。"

msgid ""
"This section describes changes that may be needed in third-party database "
"backends."
msgstr "本节介绍了第三方数据库后端可能需要的更改。"

msgid ""
"The ``DatabaseOperations.time_trunc_sql()`` method is added to support "
"``TimeField`` truncation. It accepts a ``lookup_type`` and ``field_name`` "
"arguments and returns the appropriate SQL to truncate the given time field "
"``field_name`` to a time object with only the given specificity. The "
"``lookup_type`` argument can be either ``'hour'``, ``'minute'``, or "
"``'second'``."
msgstr ""
"新增了 ``DatabaseOperations.time_trunc_sql()`` 方法，以支持 ``TimeField`` 截"
"断。它接受一个 ``lookup_type`` 和 ``field_name`` 参数，并返回将给定时间字段 "
"``field_name`` 截断为只具有给定精度的时间对象的适当 SQL。``lookup_type`` 参数"
"可以是 ``'hour'``、``'minute'`` 或 ``'second'``。"

msgid ""
"The ``DatabaseOperations.datetime_cast_time_sql()`` method is added to "
"support the :lookup:`time` lookup. It accepts a ``field_name`` and "
"``tzname`` arguments and returns the SQL necessary to cast a datetime value "
"to time value."
msgstr ""
"新增了 ``DatabaseOperations.datetime_cast_time_sql()`` 方法，以支持 :lookup:"
"`time` 查询。它接受一个 ``field_name`` 和 ``tzname`` 参数，并返回将日期时间值"
"强制转换为时间值所需的 SQL。"

msgid ""
"To enable ``FOR UPDATE SKIP LOCKED`` support, set ``DatabaseFeatures."
"has_select_for_update_skip_locked = True``."
msgstr ""
"要启用 ``FOR UPDATE SKIP LOCKED`` 支持，请设置 ``DatabaseFeatures."
"has_select_for_update_skip_locked = True``。"

msgid ""
"The new ``DatabaseFeatures.supports_index_column_ordering`` attribute "
"specifies if a database allows defining ordering for columns in indexes. The "
"default value is ``True`` and the ``DatabaseIntrospection."
"get_constraints()`` method should include an ``'orders'`` key in each of the "
"returned dictionaries with a list of ``'ASC'`` and/or ``'DESC'`` values "
"corresponding to the ordering of each column in the index."
msgstr ""
"新的 ``DatabaseFeatures.supports_index_column_ordering`` 属性指定数据库是否允"
"许在索引中定义列的排序。默认值为 ``True``，而 ``DatabaseIntrospection."
"get_constraints()`` 方法应在每个返回的字典中包含一个 ``'orders'`` 键，该键包"
"含一个列表，其中包含与索引中每列的排序对应的 ``'ASC'`` 和/或 ``'DESC'`` 值。"

msgid ""
":djadmin:`inspectdb` no longer calls ``DatabaseIntrospection.get_indexes()`` "
"which is deprecated. Custom database backends should ensure all types of "
"indexes are returned by ``DatabaseIntrospection.get_constraints()``."
msgstr ""
":djadmin:`inspectdb` 不再调用已弃用的 ``DatabaseIntrospection."
"get_indexes()`` 方法。自定义数据库后端应确保 ``DatabaseIntrospection."
"get_constraints()`` 返回所有类型的索引。"

msgid ""
"Renamed the ``ignores_quoted_identifier_case`` feature to "
"``ignores_table_name_case`` to more accurately reflect how it is used."
msgstr ""
"将 ``ignores_quoted_identifier_case`` 功能的名称更改为 "
"``ignores_table_name_case``，以更准确地反映它的使用方式。"

msgid ""
"The ``name`` keyword argument is added to the ``DatabaseWrapper."
"create_cursor(self, name=None)`` method to allow usage of server-side "
"cursors on backends that support it."
msgstr ""
"新增了 ``name`` 关键字参数到 ``DatabaseWrapper.create_cursor(self, "
"name=None)`` 方法，以允许在支持的后端上使用服务器端游标。"

msgid "Dropped support for PostgreSQL 9.2 and PostGIS 2.0"
msgstr "不再支持 PostgreSQL 9.2 和 PostGIS 2.0 。"

msgid ""
"Upstream support for PostgreSQL 9.2 ends in September 2017. As a "
"consequence, Django 1.11 sets PostgreSQL 9.3 as the minimum version it "
"officially supports."
msgstr ""
"PostgreSQL 9.2 的上游支持将于 2017 年 9 月结束。因此，Django 1.11 将 "
"PostgreSQL 9.3 设为其官方支持的最低版本。"

msgid ""
"Support for PostGIS 2.0 is also removed as PostgreSQL 9.2 is the last "
"version to support it."
msgstr ""
"由于 PostgreSQL 9.2 是支持 PostGIS 2.0 的最后一个版本，因此也取消了对 "
"PostGIS 2.0 的支持。"

msgid ""
"Also, the minimum supported version of psycopg2 is increased from 2.4.5 to "
"2.5.4."
msgstr "此外，支持的最低 psycopg2 版本从 2.4.5 提高到 2.5.4 。"

msgid "``LiveServerTestCase`` binds to port zero"
msgstr "``LiveServerTestCase`` 现在绑定到零端口"

msgid ""
"Rather than taking a port range and iterating to find a free port, "
"``LiveServerTestCase`` binds to port zero and relies on the operating system "
"to assign a free port. The ``DJANGO_LIVE_TEST_SERVER_ADDRESS`` environment "
"variable is no longer used, and as it's also no longer used, the ``manage.py "
"test --liveserver`` option is removed."
msgstr ""
"与其采用端口范围并迭代查找空闲端口，``LiveServerTestCase`` 现在绑定到零端口，"
"并依赖操作系统分配空闲端口。不再使用 ``DJANGO_LIVE_TEST_SERVER_ADDRESS`` 环境"
"变量，也不再使用 ``manage.py test --liveserver`` 选项。"

msgid ""
"If you need to bind ``LiveServerTestCase`` to a specific port, use the "
"``port`` attribute added in Django 1.11.2."
msgstr ""
"如果需要将 ``LiveServerTestCase`` 绑定到特定端口，可以使用 Django 1.11.2 中新"
"增的 ``port`` 属性。"

msgid ""
"Protection against insecure redirects in :mod:`django.contrib.auth` and "
"``i18n`` views"
msgstr ""
"在 :mod:`django.contrib.auth` 和 ``i18n`` 视图中加强了对不安全的重定向的保"
"护。"

msgid ""
"``LoginView``, ``LogoutView`` (and the deprecated function-based "
"equivalents), and :func:`~django.views.i18n.set_language` protect users from "
"being redirected to non-HTTPS ``next`` URLs when the app is running over "
"HTTPS."
msgstr ""
"``LoginView``、``LogoutView`` （以及已弃用的函数式等效版本）和 :func:"
"`~django.views.i18n.set_language` 在应用程序运行在 HTTPS 上时，会保护用户免受"
"被重定向到非 HTTPS 的 ``next`` URL 的影响。"

msgid ""
"``QuerySet.get_or_create()`` and ``update_or_create()`` validate arguments"
msgstr ""
"``QuerySet.get_or_create()`` 和 ``update_or_create()`` 现在会验证参数。"

msgid ""
"To prevent typos from passing silently, :meth:`~django.db.models.query."
"QuerySet.get_or_create` and :meth:`~django.db.models.query.QuerySet."
"update_or_create` check that their arguments are model fields. This should "
"be backwards-incompatible only in the fact that it might expose a bug in "
"your project."
msgstr ""
"为了防止拼写错误默默通过，:meth:`~django.db.models.query.QuerySet."
"get_or_create` 和 :meth:`~django.db.models.query.QuerySet.update_or_create` "
"检查它们的参数是否是模型字段。这只会在一个方面引入向后不兼容，可能会暴露出项"
"目中的错误。"

msgid ""
"``pytz`` is a required dependency and support for ``settings.TIME_ZONE = "
"None`` is removed"
msgstr ""
"``pytz`` 现在是必需的依赖项，不再支持将 ``settings.TIME_ZONE = None``。"

msgid ""
"To simplify Django's timezone handling, ``pytz`` is now a required "
"dependency. It's automatically installed along with Django."
msgstr ""
"为了简化 Django 的时区处理，``pytz`` 现在是必需的依赖项，它会自动与 Django 一"
"起安装。"

msgid ""
"Support for ``settings.TIME_ZONE = None`` is removed as the behavior isn't "
"commonly used and is questionably useful. If you want to automatically "
"detect the timezone based on the system timezone, you can use :pypi:"
"`tzlocal`::"
msgstr ""
"不再支持 ``settings.TIME_ZONE = None``，因为这种行为通常不常用且可疑的有用"
"性。如果希望根据系统时区自动检测时区，可以使用 :pypi:`tzlocal`。"

msgid ""
"This works similar to ``settings.TIME_ZONE = None`` except that it also sets "
"``os.environ['TZ']``. `Let us know <https://groups.google.com/g/django-"
"developers/c/OAV3FChfuPM/discussion>`__ if there's a use case where you find "
"you can't adapt your code to set a ``TIME_ZONE``."
msgstr ""
"这与 ``settings.TIME_ZONE = None`` 类似，但它还设置了 ``os.environ['TZ']``。"
"如果存在情况下，您发现无法适应设置 ``TIME_ZONE`` 的代码，请通过 `告诉我们 "
"<https://groups.google.com/g/django-developers/c/OAV3FChfuPM/discussion>`__。"

msgid "HTML changes in admin templates"
msgstr "管理模板中的 HTML 更改"

msgid ""
"``<p class=\"help\">`` is replaced with a ``<div>`` tag to allow including "
"lists inside help text."
msgstr ""
"``<p class=\"help\">`` 被替换为 ``<div>`` 标签，以允许在帮助文本中包含列表。"

msgid ""
"Read-only fields are wrapped in ``<div class=\"readonly\">...</div>`` "
"instead of ``<p>...</p>`` to allow any kind of HTML as the field's content."
msgstr ""
"只读字段现在被包装在 ``<div class=\"readonly\">...</div>`` 中，而不是 "
"``<p>...</p>``，以允许字段内容包含任何类型的 HTML。"

msgid "Changes due to the introduction of template-based widget rendering"
msgstr "由于引入基于模板的小部件渲染，发生了一些更改。"

msgid "Some undocumented classes in ``django.forms.widgets`` are removed:"
msgstr "移除了 ``django.forms.widgets`` 中一些未记录的类："

msgid "``SubWidget``"
msgstr "``SubWidget``"

msgid ""
"``RendererMixin``, ``ChoiceFieldRenderer``, ``RadioFieldRenderer``, "
"``CheckboxFieldRenderer``"
msgstr ""
"``RendererMixin``, ``ChoiceFieldRenderer``, ``RadioFieldRenderer``, "
"``CheckboxFieldRenderer``"

msgid "``ChoiceInput``, ``RadioChoiceInput``, ``CheckboxChoiceInput``"
msgstr "``ChoiceInput``, ``RadioChoiceInput``, ``CheckboxChoiceInput``"

msgid "The undocumented ``Select.render_option()`` method is removed."
msgstr "移除了未记录的 ``Select.render_option()`` 方法。"

msgid ""
"The ``Widget.format_output()`` method is removed. Use a custom widget "
"template instead."
msgstr "移除了 ``Widget.format_output()`` 方法。请使用自定义小部件模板替代。"

msgid ""
"Some widget values, such as ``<select>`` options, are now localized if "
"``settings.USE_L10N=True``. You could revert to the old behavior with custom "
"widget templates that uses the :ttag:`localize` template tag to turn off "
"localization."
msgstr ""
"如果 ``settings.USE_L10N=True``，现在某些小部件的值，如 ``<select>`` 选项，将"
"进行本地化。您可以通过使用 :ttag:`localize` 模板标签关闭本地化，恢复到旧的行"
"为，使用自定义小部件模板。"

msgid ""
"``django.template.backends.django.Template.render()`` prohibits non-dict "
"context"
msgstr ""
"``django.template.backends.django.Template.render()`` 禁止非字典上下文。"

msgid ""
"For compatibility with multiple template engines, ``django.template.backends."
"django.Template.render()`` (returned from high-level template loader APIs "
"such as ``loader.get_template()``) must receive a dictionary of context "
"rather than ``Context`` or ``RequestContext``. If you were passing either of "
"the two classes, pass a dictionary instead -- doing so is backwards-"
"compatible with older versions of Django."
msgstr ""
"为了与多个模板引擎兼容，``django.template.backends.django.Template."
"render()`` （从高级模板加载器 API（如 ``loader.get_template()``）返回）必须接"
"收一个上下文字典，而不是 ``Context`` 或 ``RequestContext``。如果您之前传递了"
"这两个类中的任何一个，请改为传递一个字典 - 这样做是向后兼容旧版本的 Django。"

msgid "Model state changes in migration operations"
msgstr "迁移操作中的模型状态更改"

msgid ""
"To improve the speed of applying migrations, rendering of related models is "
"delayed until an operation that needs them (e.g. ``RunPython``). If you have "
"a custom operation that works with model classes or model instances from the "
"``from_state`` argument in ``database_forwards()`` or "
"``database_backwards()``, you must render model states using the "
"``clear_delayed_apps_cache()`` method as described in :ref:`writing your own "
"migration operation <writing-your-own-migration-operation>`."
msgstr ""
"为了提高应用迁移的速度，延迟了相关模型的渲染，直到需要它们的操作（例如 "
"``RunPython``）。如果您有一个自定义操作，需要在 ``database_forwards()`` 或 "
"``database_backwards()`` 的 ``from_state`` 参数中使用模型类或模型实例，您必须"
"使用 ``clear_delayed_apps_cache()`` 方法来渲染模型状态，如 :ref:`编写自己的迁"
"移操作 <writing-your-own-migration-operation>` 中所述。"

msgid "Server-side cursors on PostgreSQL"
msgstr "PostgreSQL 上的服务器端游标"

msgid ""
"The change to make :meth:`.QuerySet.iterator()` use server-side cursors on "
"PostgreSQL prevents running Django with PgBouncer in transaction pooling "
"mode. To reallow that, use the :setting:`DISABLE_SERVER_SIDE_CURSORS "
"<DATABASE-DISABLE_SERVER_SIDE_CURSORS>` setting (added in Django 1.11.1) in :"
"setting:`DATABASES`."
msgstr ""
"将 :meth:`.QuerySet.iterator()` 使用服务器端游标在 PostgreSQL 上可能会阻止在"
"事务池模式下使用 PgBouncer 运行 Django。要重新允许这样做，可以在 :setting:"
"`DATABASES` 中使用 :setting:`DISABLE_SERVER_SIDE_CURSORS <DATABASE-"
"DISABLE_SERVER_SIDE_CURSORS>` 设置（在 Django 1.11.1 中添加）。"

msgid "See :ref:`transaction-pooling-server-side-cursors` for more discussion."
msgstr "有关更多讨论，请参阅 :ref:`transaction-pooling-server-side-cursors`。"

msgid ""
"If no items in the feed have a ``pubdate`` or ``updateddate`` attribute, :"
"meth:`SyndicationFeed.latest_post_date() <django.utils.feedgenerator."
"SyndicationFeed.latest_post_date>` now returns the current UTC date/time, "
"instead of a datetime without any timezone information."
msgstr ""
"如果在 feed 中没有任何项目具有 ``pubdate`` 或 ``updateddate`` 属性，那么 :"
"meth:`SyndicationFeed.latest_post_date() <django.utils.feedgenerator."
"SyndicationFeed.latest_post_date>` 现在会返回当前的 UTC 日期/时间，而不是一个"
"没有任何时区信息的 datetime。"

msgid ""
"CSRF failures are logged to the ``django.security.csrf`` logger instead of "
"``django.request``."
msgstr ""
"CSRF 失败现在会被记录到 ``django.security.csrf`` 日志器，而不是 ``django."
"request``。"

msgid ""
":setting:`ALLOWED_HOSTS` validation is no longer disabled when running "
"tests. If your application includes tests with custom host names, you must "
"include those host names in :setting:`ALLOWED_HOSTS`. See :ref:`topics-"
"testing-advanced-multiple-hosts`."
msgstr ""
"运行测试时，不再禁用 :setting:`ALLOWED_HOSTS` 验证。如果您的应用程序包括具有"
"自定义主机名的测试，您必须将这些主机名包含在 :setting:`ALLOWED_HOSTS` 中。请"
"参阅 :ref:`topics-testing-advanced-multiple-hosts`。"

msgid ""
"Using a foreign key's id (e.g. ``'field_id'``) in ``ModelAdmin."
"list_display`` displays the related object's ID. Remove the ``_id`` suffix "
"if you want the old behavior of the string representation of the object."
msgstr ""
"在 ``ModelAdmin.list_display`` 中使用外键的 id（例如 ``'field_id'``）会显示相"
"关对象的 ID。如果要恢复到对象的字符串表示的旧行为，请移除 ``_id`` 后缀。"

msgid ""
"In model forms, :class:`~django.db.models.CharField` with ``null=True`` now "
"saves ``NULL`` for blank values instead of empty strings."
msgstr ""
"在模型表单中，具有 ``null=True`` 的 :class:`~django.db.models.CharField` 现在"
"会为空白值保存 ``NULL``，而不是空字符串。"

msgid ""
"On Oracle, :meth:`Model.validate_unique() <django.db.models.Model."
"validate_unique>` no longer checks empty strings for uniqueness as the "
"database interprets the value as ``NULL``."
msgstr ""
"在 Oracle 上，:meth:`Model.validate_unique() <django.db.models.Model."
"validate_unique>` 不再检查空字符串的唯一性，因为数据库会将该值解释为 "
"``NULL``。"

msgid ""
"If you subclass :class:`.AbstractUser` and override ``clean()``, be sure it "
"calls ``super()``. :meth:`.BaseUserManager.normalize_email` is called in a "
"new :meth:`.AbstractUser.clean` method so that normalization is applied in "
"cases like model form validation."
msgstr ""
"如果您子类化了 :class:`.AbstractUser` 并覆盖了 ``clean()`` 方法，请确保它调用"
"了 ``super()``。新的 :meth:`.AbstractUser.clean` 方法中会调用 :meth:`."
"BaseUserManager.normalize_email`，以便在模型表单验证等情况下应用标准化。"

msgid ""
"``EmailField`` and ``URLField`` no longer accept the ``strip`` keyword "
"argument. Remove it because it doesn't have an effect in older versions of "
"Django as these fields always strip whitespace."
msgstr ""
"``EmailField`` 和 ``URLField`` 不再接受 ``strip`` 关键字参数。移除它，因为在"
"旧版本的 Django 中它没有任何效果，这些字段总是会去除空格。"

msgid ""
"The ``checked`` and ``selected`` attribute rendered by form widgets now uses "
"HTML5 boolean syntax rather than XHTML's ``checked='checked'`` and "
"``selected='selected'``."
msgstr ""
"表单小部件渲染的 ``checked`` 和 ``selected`` 属性现在使用 HTML5 布尔语法，而"
"不再使用 XHTML 的 ``checked='checked'`` 和 ``selected='selected'``。"

msgid ""
":meth:`RelatedManager.add() <django.db.models.fields.related.RelatedManager."
"add>`, :meth:`~django.db.models.fields.related.RelatedManager.remove`, :meth:"
"`~django.db.models.fields.related.RelatedManager.clear`, and :meth:`~django."
"db.models.fields.related.RelatedManager.set` now clear the "
"``prefetch_related()`` cache."
msgstr ""
":meth:`RelatedManager.add() <django.db.models.fields.related.RelatedManager."
"add>`、:meth:`~django.db.models.fields.related.RelatedManager.remove`、:meth:"
"`~django.db.models.fields.related.RelatedManager.clear` 和 :meth:`~django.db."
"models.fields.related.RelatedManager.set` 现在会清除 ``prefetch_related()`` "
"缓存。"

msgid ""
"To prevent possible loss of saved settings, :func:`~django.test.utils."
"setup_test_environment` now raises an exception if called a second time "
"before calling :func:`~django.test.utils.teardown_test_environment`."
msgstr ""
"为防止可能丢失的保存设置，如果在调用 :func:`~django.test.utils."
"teardown_test_environment` 之前再次调用 :func:`~django.test.utils."
"setup_test_environment`，它现在会引发异常。"

msgid ""
"The undocumented ``DateTimeAwareJSONEncoder`` alias for :class:`~django.core."
"serializers.json.DjangoJSONEncoder` (renamed in Django 1.0) is removed."
msgstr ""
"未记录的 ``DateTimeAwareJSONEncoder`` 别名（对于在 Django 1.0 中更名的 :"
"class:`~django.core.serializers.json.DjangoJSONEncoder`）已被移除。"

msgid ""
"The :class:`cached template loader <django.template.loaders.cached.Loader>` "
"is now enabled if :setting:`OPTIONS['loaders'] <TEMPLATES-OPTIONS>` isn't "
"specified and :setting:`OPTIONS['debug'] <TEMPLATES-OPTIONS>` is ``False`` "
"(the latter option defaults to the value of :setting:`DEBUG`). This could be "
"backwards-incompatible if you have some :ref:`template tags that aren't "
"thread safe <template_tag_thread_safety>`."
msgstr ""
"如果没有指定 :setting:`OPTIONS['loaders'] <TEMPLATES-OPTIONS>` 并且 :setting:"
"`OPTIONS['debug'] <TEMPLATES-OPTIONS>` 为 ``False`` （后者默认为 :setting:"
"`DEBUG` 的值），则现在会启用 :class:`cached template loader <django.template."
"loaders.cached.Loader>`。如果您有一些不是线程安全的 :ref:`模板标签 "
"<template_tag_thread_safety>`，这可能会导致不兼容。"

msgid ""
"The prompt for stale content type deletion no longer occurs after running "
"the ``migrate`` command. Use the new :djadmin:`remove_stale_contenttypes` "
"command instead."
msgstr ""
"过去在运行 ``migrate`` 命令之后不再提示删除陈旧的内容类型。现在请使用新的 :"
"djadmin:`remove_stale_contenttypes` 命令。"

msgid ""
"The admin's widget for ``IntegerField`` uses ``type=\"number\"`` rather than "
"``type=\"text\"``."
msgstr ""
"管理员界面中的 ``IntegerField`` 控件现在使用 ``type=\"number\"`` 而不是 "
"``type=\"text\"``。"

msgid ""
"Conditional HTTP headers are now parsed and compared according to the :rfc:"
"`7232` Conditional Requests specification rather than the older :rfc:`2616`."
msgstr ""
"现在，条件 HTTP 标头根据 :rfc:`7232` 的条件请求规范进行解析和比较，而不是较旧"
"的 :rfc:`2616` 规范。"

msgid ""
":func:`~django.utils.cache.patch_response_headers` no longer adds a ``Last-"
"Modified`` header. According to the :rfc:`7234#section-4.2.2`, this header "
"is useless alongside other caching headers that provide an explicit "
"expiration time, e.g. ``Expires`` or ``Cache-Control``. :class:`~django."
"middleware.cache.UpdateCacheMiddleware` and :func:`~django.utils.cache."
"add_never_cache_headers` call ``patch_response_headers()`` and therefore are "
"also affected by this change."
msgstr ""
":func:`~django.utils.cache.patch_response_headers` 不再添加 ``Last-"
"Modified`` 标头。根据 :rfc:`7234#section-4.2.2`，在提供明确的过期时间的其他缓"
"存标头旁边，例如 ``Expires`` 或 ``Cache-Control``，此标头是无用的。因此，:"
"class:`~django.middleware.cache.UpdateCacheMiddleware` 和 :func:`~django."
"utils.cache.add_never_cache_headers` 调用 ``patch_response_headers()``，因此"
"也受到此更改的影响。"

msgid ""
"In the admin templates, ``<p class=\"help\">`` is replaced with a ``<div>`` "
"tag to allow including lists inside help text."
msgstr ""
"在管理模板中，``<p class=\"help\">`` 被替换为 ``<div>`` 标签，以允许在帮助文"
"本中包含列表。"

msgid ""
":class:`~django.middleware.http.ConditionalGetMiddleware` no longer sets the "
"``Date`` header as web servers set that header. It also no longer sets the "
"``Content-Length`` header as this is now done by :class:`~django.middleware."
"common.CommonMiddleware`."
msgstr ""
":class:`~django.middleware.http.ConditionalGetMiddleware` 不再设置 ``Date`` "
"头，因为 web 服务器会设置该头。它也不再设置 ``Content-Length`` 头，因为现在"
"由 :class:`~django.middleware.common.CommonMiddleware` 完成此操作。"

msgid ""
"If you have a middleware that modifies a response's content and appears "
"before ``CommonMiddleware`` in the ``MIDDLEWARE`` or ``MIDDLEWARE_CLASSES`` "
"settings, you must reorder your middleware so that responses aren't modified "
"after ``Content-Length`` is set, or have the response modifying middleware "
"reset the ``Content-Length`` header."
msgstr ""
"如果您有一个中间件在 ``MIDDLEWARE`` 或 ``MIDDLEWARE_CLASSES`` 设置中出现在 "
"``CommonMiddleware`` 之前，并且修改响应的内容，那么您必须重新排列您的中间件，"
"以确保在设置 ``Content-Length`` 后不会修改响应，或者让修改响应的中间件重置 "
"``Content-Length`` 头。"

msgid ""
":meth:`~django.apps.AppConfig.get_model` and :meth:`~django.apps.AppConfig."
"get_models` now raise :exc:`~django.core.exceptions.AppRegistryNotReady` if "
"they're called before models of all applications have been loaded. "
"Previously they only required the target application's models to be loaded "
"and thus could return models without all their relations set up. If you need "
"the old behavior of ``get_model()``, set the ``require_ready`` argument to "
"``False``."
msgstr ""
":meth:`~django.apps.AppConfig.get_model` 和 :meth:`~django.apps.AppConfig."
"get_models` 现在在所有应用程序的模型加载之前调用时会引发 :exc:`~django.core."
"exceptions.AppRegistryNotReady` 异常。以前它们只需要目标应用程序的模型被加"
"载，因此可能返回未完全设置其关系的模型。如果您需要 ``get_model()`` 的旧行为，"
"请将 ``require_ready`` 参数设置为 ``False``。"

msgid "The unused ``BaseCommand.can_import_settings`` attribute is removed."
msgstr "未使用的 ``BaseCommand.can_import_settings`` 属性已被删除。"

msgid "The undocumented ``django.utils.functional.lazy_property`` is removed."
msgstr "未记录的 ``django.utils.functional.lazy_property`` 已被移除。"

msgid ""
"For consistency with non-multipart requests, ``MultiPartParser.parse()`` now "
"leaves ``request.POST`` immutable. If you're modifying that ``QueryDict``, "
"you must now first copy it, e.g. ``request.POST.copy()``."
msgstr ""
"为了与非多部分请求保持一致，``MultiPartParser.parse()`` 现在会使 ``request."
"POST`` 保持不可变性。如果你要修改那个 ``QueryDict``，你现在必须先复制它，例"
"如 ``request.POST.copy()``。"

msgid "Support for ``cx_Oracle`` < 5.2 is removed."
msgstr "对于 ``cx_Oracle`` 版本小于 5.2 的支持已被移除。"

msgid "Support for IPython < 1.0 is removed from the ``shell`` command."
msgstr "对于 IPython 版本小于 1.0 的支持已从 ``shell`` 命令中移除。"

msgid ""
"The signature of private API ``Widget.build_attrs()`` changed from "
"``extra_attrs=None, **kwargs`` to ``base_attrs, extra_attrs=None``."
msgstr ""
"私有 API ``Widget.build_attrs()`` 的签名已从 ``extra_attrs=None, **kwargs`` "
"更改为 ``base_attrs, extra_attrs=None``。"

msgid ""
"File-like objects (e.g., :class:`~io.StringIO` and :class:`~io.BytesIO`) "
"uploaded to an :class:`~django.db.models.ImageField` using the test client "
"now require a ``name`` attribute with a value that passes the :data:`~django."
"core.validators.validate_image_file_extension` validator. See the note in :"
"meth:`.Client.post`."
msgstr ""
"通过测试客户端上传到一个 :class:`~django.db.models.ImageField` 的类似文件的对"
"象（例如 :class:`~io.StringIO` 和 :class:`~io.BytesIO`）现在需要一个具有通"
"过 :data:`~django.core.validators.validate_image_file_extension` 验证器的值"
"的 ``name`` 属性。请参阅 :meth:`.Client.post` 中的注意事项。"

msgid ""
":class:`~django.db.models.FileField` now moves rather than copies the file "
"it receives. With the default file upload settings, files larger than :"
"setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` now have the same permissions as "
"temporary files (often ``0o600``) rather than the system's standard umask "
"(often ``0o6644``). Set the :setting:`FILE_UPLOAD_PERMISSIONS` if you need "
"the same permission regardless of file size."
msgstr ""
":class:`~django.db.models.FileField` 现在会移动文件而不是复制它所接收的文件。"
"使用默认的文件上传设置，文件大小超过 :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` "
"的文件现在具有与临时文件相同的权限（通常是 ``0o600``），而不是系统的标准掩码"
"（通常是 ``0o644``）。如果您需要不考虑文件大小都具有相同权限，请设置 :"
"setting:`FILE_UPLOAD_PERMISSIONS`。"

msgid "Features deprecated in 1.11"
msgstr "在 1.11 中被废弃的功能"

msgid "``models.permalink()`` decorator"
msgstr "``models.permalink()`` 装饰器"

msgid "Use :func:`django.urls.reverse` instead. For example::"
msgstr "请使用 :func:`django.urls.reverse`。例如："

msgid "becomes::"
msgstr "变成："

msgid ""
"``contrib.auth``’s ``login()`` and ``logout()`` function-based views are "
"deprecated in favor of new class-based views :class:`~django.contrib.auth."
"views.LoginView` and :class:`~django.contrib.auth.views.LogoutView`."
msgstr ""
"``contrib.auth`` 中的 ``login()`` 和 ``logout()`` 基于函数的视图已被弃用，推"
"荐使用新的基于类的视图 :class:`~django.contrib.auth.views.LoginView` 和 :"
"class:`~django.contrib.auth.views.LogoutView`。"

msgid ""
"The unused ``extra_context`` parameter of ``contrib.auth.views."
"logout_then_login()``  is deprecated."
msgstr ""
"``contrib.auth.views.logout_then_login()`` 的未使用的 ``extra_context`` 参数"
"已被弃用。"

msgid ""
"``contrib.auth``’s ``password_change()``, ``password_change_done()``, "
"``password_reset()``, ``password_reset_done()``, "
"``password_reset_confirm()``, and ``password_reset_complete()`` function-"
"based views are deprecated in favor of new class-based views :class:`~django."
"contrib.auth.views.PasswordChangeView`, :class:`~django.contrib.auth.views."
"PasswordChangeDoneView`, :class:`~django.contrib.auth.views."
"PasswordResetView`, :class:`~django.contrib.auth.views."
"PasswordResetDoneView`, :class:`~django.contrib.auth.views."
"PasswordResetConfirmView`, and :class:`~django.contrib.auth.views."
"PasswordResetCompleteView`."
msgstr ""
"``contrib.auth`` 中的 ``password_change()``, ``password_change_done()``, "
"``password_reset()``, ``password_reset_done()``, "
"``password_reset_confirm()``, 和 ``password_reset_complete()`` 基于函数的视图"
"已被弃用，推荐使用新的基于类的视图 :class:`~django.contrib.auth.views."
"PasswordChangeView`, :class:`~django.contrib.auth.views."
"PasswordChangeDoneView`, :class:`~django.contrib.auth.views."
"PasswordResetView`, :class:`~django.contrib.auth.views."
"PasswordResetDoneView`, :class:`~django.contrib.auth.views."
"PasswordResetConfirmView`, 和 :class:`~django.contrib.auth.views."
"PasswordResetCompleteView`。"

msgid ""
"``django.test.runner.setup_databases()`` is moved to :func:`django.test."
"utils.setup_databases`. The old location is deprecated."
msgstr ""
"``django.test.runner.setup_databases()`` 已移至 :func:`django.test.utils."
"setup_databases`。旧位置已被弃用。"

msgid ""
"``django.utils.translation.string_concat()`` is deprecated in favor of :func:"
"`django.utils.text.format_lazy`. ``string_concat(*strings)`` can be replaced "
"by ``format_lazy('{}' * len(strings), *strings)``."
msgstr ""
"``django.utils.translation.string_concat()`` 已被弃用，推荐使用 :func:"
"`django.utils.text.format_lazy`。可以通过 ``format_lazy('{}' * len(strings), "
"*strings)`` 来替代 ``string_concat(*strings)``。"

msgid ""
"For the ``PyLibMCCache`` cache backend, passing ``pylibmc`` behavior "
"settings as top-level attributes of ``OPTIONS`` is deprecated. Set them "
"under a ``behaviors`` key within ``OPTIONS`` instead."
msgstr ""
"对于 ``PyLibMCCache`` 缓存后端，将 ``pylibmc`` 行为设置作为 ``OPTIONS`` 的顶"
"级属性传递已被弃用。请将它们设置在 ``OPTIONS`` 内的 ``behaviors`` 键下。"

msgid ""
"The ``host`` parameter of ``django.utils.http.is_safe_url()`` is deprecated "
"in favor of the new ``allowed_hosts`` parameter."
msgstr ""
"``django.utils.http.is_safe_url()`` 的 ``host`` 参数已被弃用，推荐使用新的 "
"``allowed_hosts`` 参数。"

msgid ""
"Silencing exceptions raised while rendering the :ttag:`{% include %} "
"<include>` template tag is deprecated as the behavior is often more "
"confusing than helpful. In Django 2.1, the exception will be raised."
msgstr ""
"在渲染 :ttag:`{% include %} <include>` 模板标签时抑制异常已被弃用，因为这种行"
"为通常会比有帮助更令人困惑。在 Django 2.1 中，将会引发异常。"

msgid ""
"``DatabaseIntrospection.get_indexes()`` is deprecated in favor of "
"``DatabaseIntrospection.get_constraints()``."
msgstr ""
"``DatabaseIntrospection.get_indexes()`` 已被弃用，推荐使用 "
"``DatabaseIntrospection.get_constraints()``。"

msgid ""
":func:`~django.contrib.auth.authenticate` now passes a ``request`` argument "
"to the ``authenticate()`` method of authentication backends. Support for "
"methods that don't accept ``request`` as the first positional argument will "
"be removed in Django 2.1."
msgstr ""
":func:`~django.contrib.auth.authenticate` 现在向身份验证后端的 "
"``authenticate()`` 方法传递一个 ``request`` 参数。不接受 ``request`` 作为第一"
"个位置参数的方法将在 Django 2.1 中被移除。"

msgid ""
"The ``USE_ETAGS`` setting is deprecated in favor of :class:`~django."
"middleware.http.ConditionalGetMiddleware` which now adds the ``ETag`` header "
"to responses regardless of the setting. ``CommonMiddleware`` and ``django."
"utils.cache.patch_response_headers()`` will no longer set ETags when the "
"deprecation ends."
msgstr ""
"``USE_ETAGS`` 设置已被弃用，推荐使用 :class:`~django.middleware.http."
"ConditionalGetMiddleware`，它现在会在响应中添加 ``ETag`` 头，不受设置的影响。"
"当弃用结束时，``CommonMiddleware`` 和 ``django.utils.cache."
"patch_response_headers()`` 将不再设置 ETags。"

msgid ""
"``Model._meta.has_auto_field`` is deprecated in favor of checking if ``Model."
"_meta.auto_field is not None``."
msgstr ""
"``Model._meta.has_auto_field`` 已被弃用，推荐检查 ``Model._meta.auto_field "
"is not None``。"

msgid ""
"Using regular expression groups with ``iLmsu#`` in ``url()`` is deprecated. "
"The only group that's useful is ``(?i)`` for case-insensitive URLs, however, "
"case-insensitive URLs aren't a good practice because they create multiple "
"entries for search engines, for example. An alternative solution could be to "
"create a :data:`~django.conf.urls.handler404` that looks for uppercase "
"characters in the URL and redirects to a lowercase equivalent."
msgstr ""
"在 ``url()`` 中使用带有 ``iLmsu#`` 的正则表达式组已被弃用。唯一有用的组是 "
"``(?i)`` 用于不区分大小写的 URL，但是不区分大小写的 URL 并不是一个好的实践，"
"因为它们会为搜索引擎创建多个条目，例如。一个替代方案可能是创建一个 :data:"
"`~django.conf.urls.handler404`，它查找 URL 中的大写字符并重定向到相应的小写字"
"符。"

msgid ""
"The ``renderer`` argument is added to the :meth:`Widget.render() <django."
"forms.Widget.render>` method. Methods that don't accept that argument will "
"work through a deprecation period."
msgstr ""
"``renderer`` 参数已添加到 :meth:`Widget.render() <django.forms.Widget."
"render>` 方法。不接受该参数的方法将在一个弃用期内继续工作。"

msgid "Django 1.11.1 release notes"
msgstr "Django 1.11.1 版本发行说明"

msgid "*May 6, 2017*"
msgstr "*2017 年 5 月 6 日*"

msgid "Django 1.11.1 adds a minor feature and fixes several bugs in 1.11."
msgstr "Django 1.11.1 添加了一个小功能，并修复了 1.11 中的若干错误。"

msgid "Allowed disabling server-side cursors on PostgreSQL"
msgstr "允许在 PostgreSQL 上禁用服务器端游标"

msgid ""
"The change in Django 1.11 to make :meth:`.QuerySet.iterator()` use server-"
"side cursors on PostgreSQL prevents running Django with PgBouncer in "
"transaction pooling mode. To reallow that, use the :setting:"
"`DISABLE_SERVER_SIDE_CURSORS <DATABASE-DISABLE_SERVER_SIDE_CURSORS>` setting "
"in :setting:`DATABASES`."
msgstr ""
"Django 1.11 中对 :meth:`.QuerySet.iterator()` 的更改使其在 PostgreSQL 上使用"
"服务器端游标，这会阻止在事务池模式下使用 PgBouncer 运行 Django。要重新允许这"
"个行为，请在 :setting:`DATABASES` 的设置中使用 :setting:"
"`DISABLE_SERVER_SIDE_CURSORS <DATABASE-DISABLE_SERVER_SIDE_CURSORS>` 设置。"

msgid ""
"Made migrations respect ``Index``’s ``name`` argument. If you created a "
"named index with Django 1.11, ``makemigrations`` will create a migration to "
"recreate the index with the correct name (:ticket:`28051`)."
msgstr ""
"迁移现在会尊重 ``Index`` 的 ``name`` 参数。如果你在 Django 1.11 中创建了一个"
"具有名称的索引，``makemigrations`` 将创建一个迁移来重新创建具有正确名称的索"
"引 (:ticket:`28051`)。"

msgid ""
"Fixed a crash when using a ``__icontains`` lookup on a ``ArrayField`` (:"
"ticket:`28038`)."
msgstr ""
"修复了在 ``ArrayField`` 上使用 ``__icontains`` 查找时的崩溃问题 (:ticket:"
"`28038`)。"

msgid ""
"Fixed a crash when using a 2-tuple in ``EmailMessage``’s ``attachments`` "
"argument (:ticket:`28042`)."
msgstr ""
"修复了在 ``EmailMessage`` 的 ``attachments`` 参数中使用 2 元组时崩溃的问题 (:"
"ticket:`28042`)。"

msgid ""
"Fixed ``QuerySet.filter()`` crash when it references the name of a "
"``OneToOneField`` primary key (:ticket:`28047`)."
msgstr ""
"修复了当 ``QuerySet.filter()`` 引用 ``OneToOneField`` 主键的名称时导致的崩溃 "
"(:ticket:`28047`)。"

msgid ""
"Fixed empty POST data table appearing instead of \"No POST data\" in HTML "
"debug page (:ticket:`28079`)."
msgstr ""
"修复了在 HTML 调试页面中出现空的 POST 数据表格，而不是显示 \"No POST "
"data\" (:ticket:`28079`)。"

msgid ""
"Restored ``BoundField``\\s without any ``choices`` evaluating to ``True`` (:"
"ticket:`28058`)."
msgstr ""
"恢复了 ``BoundField`` 中没有任何 ``choices`` 的情况下被评估为 ``True`` (:"
"ticket:`28058`)。"

msgid ""
"Prevented ``SessionBase.cycle_key()`` from losing session data if "
"``_session_cache`` isn't populated (:ticket:`28066`)."
msgstr ""
"防止在 ``_session_cache`` 未填充的情况下使 ``SessionBase.cycle_key()`` 丢失会"
"话数据 (:ticket:`28066`)。"

msgid ""
"Fixed layout of ``ReadOnlyPasswordHashWidget`` (used in the admin's user "
"change page) (:ticket:`28097`)."
msgstr ""
"修复了 ``ReadOnlyPasswordHashWidget`` 的布局（在管理员的用户更改页面中使用） "
"(:ticket:`28097`)。"

msgid ""
"Allowed prefetch calls on managers with custom ``ModelIterable`` subclasses "
"(:ticket:`28096`)."
msgstr ""
"允许在具有自定义 ``ModelIterable`` 子类的管理器上进行预取调用 (:ticket:"
"`28096`)。"

msgid ""
"Fixed change password link in the ``contrib.auth`` admin for ``el``, "
"``es_MX``, and ``pt`` translations (:ticket:`28100`)."
msgstr ""
"修复了 ``contrib.auth`` 管理员中的更改密码链接，适用于 ``el``、``es_MX`` 和 "
"``pt`` 翻译 (:ticket:`28100`)。"

msgid ""
"Restored the output of the ``class`` attribute in the ``<ul>`` of widgets "
"that use the ``multiple_input.html`` template. This fixes ``ModelAdmin."
"radio_fields`` with ``admin.HORIZONTAL`` (:ticket:`28059`)."
msgstr ""
"恢复了在使用 ``multiple_input.html`` 模板的小部件的 ``<ul>`` 中的 ``class`` "
"属性的输出。这修复了使用 ``admin.HORIZONTAL`` 的 ``ModelAdmin.radio_fields`` "
"(:ticket:`28059`)。"

msgid "Fixed crash in ``BaseGeometryWidget.subwidgets()`` (:ticket:`28039`)."
msgstr ""
"修复了 ``BaseGeometryWidget.subwidgets()`` 中的崩溃 (:ticket:`28039`)。"

msgid ""
"Fixed exception reraising in ORM query execution when ``cursor.execute()`` "
"fails and the subsequent ``cursor.close()`` also fails (:ticket:`28091`)."
msgstr ""
"修复了在 ORM 查询执行中，当 ``cursor.execute()`` 失败并且随后的 ``cursor."
"close()`` 也失败时重新引发异常 (:ticket:`28091`)。"

msgid ""
"Fixed a regression where ``CheckboxSelectMultiple``, ``NullBooleanSelect``, "
"``RadioSelect``, ``SelectMultiple``, and ``Select`` localized option values "
"(:ticket:`28075`)."
msgstr ""
"修复了一个回归问题，其中 ``CheckboxSelectMultiple``、``NullBooleanSelect``、"
"``RadioSelect``、``SelectMultiple`` 和 ``Select`` 的本地化选项值 (:ticket:"
"`28075`)。"

msgid ""
"Corrected the stack level of unordered queryset pagination warnings (:ticket:"
"`28109`)."
msgstr "修正了无序查询集分页警告的堆栈级别 (:ticket:`28109`)。"

msgid ""
"Fixed a regression causing incorrect queries for ``__in`` subquery lookups "
"when models use ``ForeignKey.to_field`` (:ticket:`28101`)."
msgstr ""
"修复了回归问题，当模型使用 ``ForeignKey.to_field`` 时，导致 ``__in`` 子查询查"
"找的查询不正确 (:ticket:`28101`)。"

msgid ""
"Fixed crash when overriding the template of ``django.views.static."
"directory_index()`` (:ticket:`28122`)."
msgstr ""
"修复了在重写 ``django.views.static.directory_index()`` 模板时的崩溃问题 (:"
"ticket:`28122`)。"

msgid ""
"Fixed a regression in formset ``min_num`` validation with unchanged forms "
"that have initial data (:ticket:`28130`)."
msgstr ""
"修复了在表单集 ``min_num`` 验证中的回归问题，当未更改具有初始数据的表单时 (:"
"ticket:`28130`)。"

msgid "Prepared for ``cx_Oracle`` 6.0 support (:ticket:`28138`)."
msgstr "准备好支持 ``cx_Oracle`` 6.0 (:ticket:`28138`)。"

msgid ""
"Updated the ``contrib.postgres`` ``SplitArrayWidget`` to use template-based "
"widget rendering (:ticket:`28040`)."
msgstr ""
"更新了 ``contrib.postgres`` 中的 ``SplitArrayWidget``，使用基于模板的小部件渲"
"染 (:ticket:`28040`)。"

msgid ""
"Fixed crash in ``BaseGeometryWidget.get_context()`` when overriding existing "
"``attrs`` (:ticket:`28105`)."
msgstr ""
"修复了在覆盖现有 ``attrs`` 时导致的 ``BaseGeometryWidget.get_context()`` 崩"
"溃 (:ticket:`28105`)。"

msgid ""
"Prevented ``AddIndex`` and ``RemoveIndex`` from mutating model state (:"
"ticket:`28043`)."
msgstr ""
"阻止了 ``AddIndex`` 和 ``RemoveIndex`` 对模型状态进行更改 (:ticket:`28043`)。"

msgid ""
"Prevented migrations from dropping database indexes from ``Meta.indexes`` "
"when changing ``Field.db_index`` to ``False`` (:ticket:`28052`)."
msgstr ""
"阻止了在将 ``Field.db_index`` 更改为 ``False`` 时，迁移从 ``Meta.indexes`` 中"
"删除数据库索引 (:ticket:`28052`)。"

msgid ""
"Fixed a regression in choice ordering in form fields with grouped and non-"
"grouped options (:ticket:`28157`)."
msgstr ""
"修复了在具有分组和非分组选项的表单字段中选择顺序的退化问题 (:ticket:"
"`28157`)。"

msgid ""
"Fixed crash in  ``BaseInlineFormSet._construct_form()`` when using "
"``save_as_new`` (:ticket:`28159`)."
msgstr ""
"修复了在使用 ``save_as_new`` 时导致的 ``BaseInlineFormSet."
"_construct_form()`` 崩溃 (:ticket:`28159`)。"

msgid ""
"Fixed a regression where ``Model._state.db`` wasn't set correctly on multi-"
"table inheritance parent models after saving a child model (:ticket:`28166`)."
msgstr ""
"修复了在保存子模型后，多表继承父模型上未正确设置 ``Model._state.db`` 的退化问"
"题 (:ticket:`28166`)。"

msgid ""
"Corrected the return type of ``ArrayField(CITextField())`` values retrieved "
"from the database (:ticket:`28161`)."
msgstr ""
"已更正从数据库中检索的 ``ArrayField(CITextField())`` 值的返回类型 (:ticket:"
"`28161`)。"

msgid ""
"Fixed ``QuerySet.prefetch_related()`` crash when fetching relations in "
"nested ``Prefetch`` objects (:ticket:`27554`)."
msgstr ""
"修复了在获取嵌套的 ``Prefetch`` 对象中的关系时导致的 ``QuerySet."
"prefetch_related()`` 崩溃问题 (:ticket:`27554`)。"

msgid ""
"Prevented hiding GDAL errors if it's not installed when using ``contrib."
"gis`` (:ticket:`28160`). (It's a required dependency as of Django 1.11.)"
msgstr ""
"在使用 ``contrib.gis`` 时，防止隐藏 GDAL 错误，如果它未安装的话 (:ticket:"
"`28160`)。 (自 Django 1.11 起，它是一个必需的依赖项。)"

msgid ""
"Fixed a regression causing ``__in`` lookups on a foreign key to fail when "
"using the foreign key's parent model as the lookup value (:ticket:`28175`)."
msgstr ""
"修复了使用外键的父模型作为查找值时导致 ``__in`` 查找失败的退化问题 (:ticket:"
"`28175`)。"

msgid "Django 1.11.10 release notes"
msgstr "Django 1.11.10 版本发行说明"

msgid "*February 1, 2018*"
msgstr "*2018 年 2 月 1 日*"

msgid "Django 1.11.10 fixes a security issue and several bugs in 1.11.9."
msgstr "Django 1.11.10 修复了 1.11.9 中的一个安全问题和几个漏洞。"

msgid "CVE-2018-6188: Information leakage in ``AuthenticationForm``"
msgstr "CVE-2018-6188: ``AuthenticationForm`` 中的信息泄露问题"

msgid ""
"A regression in Django 1.11.8 made :class:`~django.contrib.auth.forms."
"AuthenticationForm` run its ``confirm_login_allowed()`` method even if an "
"incorrect password is entered. This can leak information about a user, "
"depending on what messages ``confirm_login_allowed()`` raises. If "
"``confirm_login_allowed()`` isn't overridden, an attacker enter an arbitrary "
"username and see if that user has been set to ``is_active=False``. If "
"``confirm_login_allowed()`` is overridden, more sensitive details could be "
"leaked."
msgstr ""
"Django 1.11.8 中的一个退化问题导致 :class:`~django.contrib.auth.forms."
"AuthenticationForm` 即使输入了不正确的密码，也会运行其 "
"``confirm_login_allowed()`` 方法。这可能会泄露关于用户的信息，具体取决于 "
"``confirm_login_allowed()`` 引发了什么消息。如果未覆盖 "
"``confirm_login_allowed()``，攻击者可以输入任意用户名并查看该用户是否已设置"
"为 ``is_active=False``。如果覆盖了 ``confirm_login_allowed()``，则可能会泄露"
"更敏感的详细信息。"

msgid ""
"This issue is fixed with the caveat that ``AuthenticationForm`` can no "
"longer raise the \"This account is inactive.\" error if the authentication "
"backend rejects inactive users (the default authentication backend, "
"``ModelBackend``, has done that since Django 1.10). This issue will be "
"revisited for Django 2.1 as a fix to address the caveat will likely be too "
"invasive for inclusion in older versions."
msgstr ""
"这个问题已经得到修复，但需要注意的是，如果身份验证后端拒绝非活动用户（默认身"
"份验证后端“ModelBackend”自 Django 1.10 起就一直是这样），那么 "
"``AuthenticationForm`` 不再会引发“此帐户处于非活动状态。”错误。这个问题将在 "
"Django 2.1 中重新审查，因为解决这个问题的修复措施可能对旧版本来说过于侵入性。"

msgid ""
"Fixed incorrect foreign key nullification if a model has two foreign keys to "
"the same model and a target model is deleted (:ticket:`29016`)."
msgstr ""
"修复了如果一个模型有两个指向同一模型的外键，且目标模型被删除时外键空值化不正"
"确的问题 (:ticket:`29016`)。"

msgid ""
"Fixed a regression where ``contrib.auth.authenticate()`` crashes if an "
"authentication backend doesn't accept ``request`` and a later one does (:"
"ticket:`29071`)."
msgstr ""
"修复了一个退化问题，即如果身份验证后端不接受 ``request``，而后续的后端接受"
"它，``contrib.auth.authenticate()`` 会崩溃的问题 (:ticket:`29071`)。"

msgid ""
"Fixed crash when entering an invalid uuid in ``ModelAdmin.raw_id_fields`` (:"
"ticket:`29094`)."
msgstr ""
"修复了在 ``ModelAdmin.raw_id_fields`` 中输入无效 UUID 时导致崩溃的问题 (:"
"ticket:`29094`)。"

msgid "Django 1.11.11 release notes"
msgstr "Django 1.11.11 版本发行说明"

msgid "*March 6, 2018*"
msgstr "*2018 年 3 月 6 日*"

msgid "Django 1.11.11 fixes two security issues in 1.11.10."
msgstr "Django 1.11.11 修复了 1.11.10 中的两个安全问题。"

msgid ""
"CVE-2018-7536: Denial-of-service possibility in ``urlize`` and "
"``urlizetrunc`` template filters"
msgstr ""
"CVE-2018-7536: ``urlize`` 和 ``urlizetrunc`` 模板过滤器中的拒绝服务可能性问题"

msgid ""
"The ``django.utils.html.urlize()`` function was extremely slow to evaluate "
"certain inputs due to catastrophic backtracking vulnerabilities in two "
"regular expressions. The ``urlize()`` function is used to implement the "
"``urlize`` and ``urlizetrunc`` template filters, which were thus vulnerable."
msgstr ""
"``django.utils.html.urlize()`` 函数在处理某些输入时非常慢，这是由于两个正则表"
"达式中的灾难性回溯漏洞引起的。``urlize()`` 函数用于实现 ``urlize`` 和 "
"``urlizetrunc`` 模板过滤器，因此这两个过滤器也存在漏洞。"

msgid ""
"The problematic regular expressions are replaced with parsing logic that "
"behaves similarly."
msgstr "问题正则表达式被替换为具有相似行为的解析逻辑。"

msgid ""
"CVE-2018-7537: Denial-of-service possibility in ``truncatechars_html`` and "
"``truncatewords_html`` template filters"
msgstr ""
"CVE-2018-7537: ``truncatechars_html`` 和 ``truncatewords_html`` 模板过滤器中"
"存在拒绝服务可能性问题。"

msgid ""
"If ``django.utils.text.Truncator``'s ``chars()`` and ``words()`` methods "
"were passed the ``html=True`` argument, they were extremely slow to evaluate "
"certain inputs due to a catastrophic backtracking vulnerability in a regular "
"expression. The ``chars()`` and ``words()`` methods are used to implement "
"the ``truncatechars_html`` and ``truncatewords_html`` template filters, "
"which were thus vulnerable."
msgstr ""
"如果给 ``django.utils.text.Truncator`` 的 ``chars()`` 和 ``words()`` 方法传递"
"了 ``html=True`` 参数，由于正则表达式中的灾难性回溯漏洞，它们在处理某些输入时"
"非常慢。``chars()`` 和 ``words()`` 方法用于实现 ``truncatechars_html`` 和 "
"``truncatewords_html`` 模板过滤器，因此这两个过滤器也存在漏洞。"

msgid "The backtracking problem in the regular expression is fixed."
msgstr "正则表达式中的回溯问题已经修复。"

msgid "Django 1.11.12 release notes"
msgstr "Django 1.11.12 版本发行说明"

msgid "*April 2, 2018*"
msgstr "*2018 年 4 月 2 日*"

msgid "Django 1.11.12 fixes two bugs in 1.11.11."
msgstr "Django 1.11.12 修复了 1.11.11 中的两个漏洞。"

msgid ""
"Fixed a regression in Django 1.11.8 where combining two annotated "
"``values_list()`` querysets with ``union()``, ``difference()``, or "
"``intersection()`` crashed due to mismatching columns (:ticket:`29229`)."
msgstr ""
"修复了在 Django 1.11.8 中的一个退化问题，即将两个经过注释的 "
"``values_list()`` 查询集与 ``union()``, ``difference()`` 或 "
"``intersection()`` 结合时因列不匹配而导致崩溃的问题 (:ticket:`29229`)。"

msgid ""
"Fixed a regression in Django 1.11 where an empty choice could be initially "
"selected for the ``SelectMultiple`` and ``CheckboxSelectMultiple`` widgets (:"
"ticket:`29273`)."
msgstr ""
"修复了 Django 1.11 中的一个退化问题，即对于 ``SelectMultiple`` 和 "
"``CheckboxSelectMultiple`` 小部件，初始情况下可以选择一个空的选项 (:ticket:"
"`29273`)。"

msgid "Django 1.11.13 release notes"
msgstr "Django 1.11.13 版本发行说明"

msgid "*May 1, 2018*"
msgstr "*2018 年 5 月 1 日*"

msgid "Django 1.11.13 fixes several bugs in 1.11.12."
msgstr "Django 1.11.13 修复了 1.11.12 中的几个漏洞。"

msgid ""
"Fixed a regression in Django 1.11.8 where altering a field with a unique "
"constraint may drop and rebuild more foreign keys than necessary (:ticket:"
"`29193`)."
msgstr ""
"修复了 Django 1.11.8 中的一个退化问题，即更改具有唯一约束的字段可能会删除和重"
"建比必要更多的外键 (:ticket:`29193`)。"

msgid ""
"Fixed crashes in ``django.contrib.admindocs`` when a view is a callable "
"object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`)."
msgstr ""
"修复了在 ``django.contrib.admindocs`` 中当一个视图是可调用对象（例如 "
"``django.contrib.syndication.views.Feed``）时导致崩溃的问题 (:ticket:"
"`29296`)。"

msgid ""
"Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or "
"``values_list()`` after combining an annotated and unannotated queryset with "
"``union()``, ``difference()``, or ``intersection()`` crashed due to "
"mismatching columns (:ticket:`29286`)."
msgstr ""
"修复了 Django 1.11.12 中的一个退化问题，即在使用 ``union()``, "
"``difference()`` 或 ``intersection()`` 合并了一个经过注释和未经注释的查询集"
"后，调用 ``QuerySet.values()`` 或 ``values_list()`` 导致由于列不匹配而崩溃的"
"问题 (:ticket:`29286`)。"

msgid "Django 1.11.14 release notes"
msgstr "Django 1.11.14 版本发行说明"

msgid "*July 2, 2018*"
msgstr "*2018 年 7 月 2 日*"

msgid "Django 1.11.14 fixes several bugs in 1.11.13."
msgstr "Django 1.11.14 修复了 1.11.13 中的几个漏洞。"

msgid ""
"Fixed ``WKBWriter.write()`` and ``write_hex()`` for empty polygons on GEOS "
"3.6.1+ (:ticket:`29460`)."
msgstr ""
"修复了 GEOS 3.6.1+ 上的空多边形情况下的 ``WKBWriter.write()`` 和 "
"``write_hex()`` 方法 (:ticket:`29460`)。"

msgid ""
"Fixed a regression in Django 1.10 that could result in large memory usage "
"when making edits using ``ModelAdmin.list_editable`` (:ticket:`28462`)."
msgstr ""
"修复了 Django 1.10 中的一个退化问题，可能导致在使用 ``ModelAdmin."
"list_editable`` 进行编辑时出现大内存使用的问题 (:ticket:`28462`)。"

msgid "Django 1.11.15 release notes"
msgstr "Django 1.11.15 版本发行说明"

msgid "*August 1, 2018*"
msgstr "*2018 年 8 月 1 日*"

msgid "Django 1.11.15 fixes a security issue in 1.11.14."
msgstr "Django 1.11.15 修复了 1.11.14 中的一个安全问题。"

msgid "CVE-2018-14574: Open redirect possibility in ``CommonMiddleware``"
msgstr "CVE-2018-14574: ``CommonMiddleware`` 中存在开放重定向漏洞的可能性。"

msgid ""
"If the :class:`~django.middleware.common.CommonMiddleware` and the :setting:"
"`APPEND_SLASH` setting are both enabled, and if the project has a URL "
"pattern that accepts any path ending in a slash (many content management "
"systems have such a pattern), then a request to a maliciously crafted URL of "
"that site could lead to a redirect to another site, enabling phishing and "
"other attacks."
msgstr ""
"如果同时启用了 :class:`~django.middleware.common.CommonMiddleware` 和 :"
"setting:`APPEND_SLASH` 设置，并且项目具有接受以斜杠结尾的任何路径的 URL 模式"
"（许多内容管理系统都有这样的模式），那么对站点的恶意构造的 URL 的请求可能会导"
"致重定向到另一个站点，从而可能启用钓鱼和其他攻击。"

msgid ""
"``CommonMiddleware`` now escapes leading slashes to prevent redirects to "
"other domains."
msgstr ""
"现在，``CommonMiddleware`` 对于防止重定向到其他域的情况会转义开头的斜杠。"

msgid "Django 1.11.16 release notes"
msgstr "Django 1.11.16 版本发行说明"

msgid "*October 1, 2018*"
msgstr "*2018 年 10 月 1 日*"

msgid "Django 1.11.16 fixes a data loss bug in 1.11.15."
msgstr "Django 1.11.16 修复了 1.11.15 中的一个数据丢失漏洞。"

msgid ""
"Fixed a race condition in ``QuerySet.update_or_create()`` that could result "
"in data loss (:ticket:`29499`)."
msgstr ""
"修复了 ``QuerySet.update_or_create()`` 中的竞态条件，可能导致数据丢失的问题 "
"(:ticket:`29499`)。"

msgid "Django 1.11.17 release notes"
msgstr "Django 1.11.17 版本发行说明"

msgid "*December 3, 2018*"
msgstr "*2018 年 12 月 3 日*"

msgid ""
"Django 1.11.17 fixes several bugs in 1.11.16 and adds compatibility with "
"Python 3.7."
msgstr ""
"Django 1.11.17 修复了 1.11.16 中的几个漏洞，并增加了对 Python 3.7 的兼容性。"

msgid ""
"Prevented repetitive calls to ``geos_version_tuple()`` in the ``WKBWriter`` "
"class in an attempt to fix a random crash involving ``LooseVersion`` since "
"Django 1.11.14 (:ticket:`29959`)."
msgstr ""
"为了尝试解决自 Django 1.11.14 以来涉及 ``LooseVersion`` 的随机崩溃问题，阻止"
"了对 ``WKBWriter`` 类中的 ``geos_version_tuple()`` 的重复调用 (:ticket:"
"`29959`)。"

msgid "Django 1.11.18 release notes"
msgstr "Django 1.11.18 版本发行说明"

msgid "*January 4, 2019*"
msgstr "*2019 年 1 月 4 日*"

msgid "Django 1.11.18 fixes a security issue in 1.11.17."
msgstr "Django 1.11.18 修复了 1.11.17 中的一个安全问题。"

msgid "CVE-2019-3498: Content spoofing possibility in the default 404 page"
msgstr "CVE- 2019-3498 ：默认 404 页面中的内容欺骗可能性"

msgid ""
"An attacker could craft a malicious URL that could make spoofed content "
"appear on the default page generated by the ``django.views.defaults."
"page_not_found()`` view."
msgstr ""
"攻击者可以构造恶意 URL，使伪造的内容出现在由 ``django.views.defaults."
"page_not_found()`` 视图生成的默认页面上。"

msgid ""
"The URL path is no longer displayed in the default 404 template and the "
"``request_path`` context variable is now quoted to fix the issue for custom "
"templates that use the path."
msgstr ""
"默认的 404 模板中不再显示 URL 路径，并且 ``request_path`` 上下文变量现在被引"
"用起来，以解决使用路径的自定义模板的问题。"

msgid "Django 1.11.19 release notes"
msgstr "Django 1.11.19 版本发行说明"

msgid "*February 11, 2019*"
msgstr "*2019 年 2 月 11 日*"

msgid "Django 1.11.19 fixes a security issue in 1.11.18."
msgstr "Django 1.11.19 修复了 1.11.18 中的一个安全问题。"

msgid ""
"CVE-2019-6975: Memory exhaustion in ``django.utils.numberformat.format()``"
msgstr ""
"CVE-2019-6975: ``django.utils.numberformat.format()`` 中的内存耗尽问题。"

msgid ""
"If ``django.utils.numberformat.format()`` -- used by ``contrib.admin`` as "
"well as the ``floatformat``, ``filesizeformat``, and ``intcomma`` templates "
"filters -- received a ``Decimal`` with a large number of digits or a large "
"exponent, it could lead to significant memory usage due to a call to ``'{:"
"f}'.format()``."
msgstr ""
"如果 ``django.utils.numberformat.format()`` -- 被 ``contrib.admin`` 以及 "
"``floatformat``、``filesizeformat`` 和 ``intcomma`` 模板过滤器使用 -- 收到具"
"有大量数字或大指数的 ``Decimal``，它可能会导致由于调用 ``'{:f}'.format()`` 而"
"导致显著的内存使用。"

msgid ""
"To avoid this, decimals with more than 200 digits are now formatted using "
"scientific notation."
msgstr "为避免这种情况，现在使用科学记数法格式化超过 200 位数的小数。"

msgid "Django 1.11.2 release notes"
msgstr "Django 1.11.2 版本发行说明"

msgid "*June 1, 2017*"
msgstr "*2017 年 6 月 1 日*"

msgid ""
"Django 1.11.2 adds a minor feature and fixes several bugs in 1.11.1. Also, "
"the latest string translations from Transifex are incorporated."
msgstr ""
"Django 1.11.2 在 1.11.1 的基础上增加了一个小功能，并修复了一些错误。此外，还"
"整合了来自 Transifex 的最新字符串翻译。"

msgid "Minor feature"
msgstr "次要特性"

msgid ""
"The new ``LiveServerTestCase.port`` attribute reallows the use case of "
"binding to a specific port following the :ref:`bind to port zero "
"<liveservertestcase-port-zero-change>` change in Django 1.11."
msgstr ""
"新的 ``LiveServerTestCase.port`` 属性重新允许绑定到特定端口的用例，这是自 "
"Django 1.11 中的 :ref:`绑定到零端口 <liveservertestcase-port-zero-change>` 更"
"改后的情况。"

msgid ""
"Added detection for GDAL 2.1 and 2.0, and removed detection for unsupported "
"versions 1.7 and 1.8 (:ticket:`28181`)."
msgstr ""
"已添加对 GDAL 2.1 和 2.0 的检测，并移除了不支持的版本 1.7 和 1.8 的检测 (:"
"ticket:`28181`)。"

msgid ""
"Changed ``contrib.gis`` to raise ``ImproperlyConfigured`` rather than "
"``GDALException`` if ``gdal`` isn't installed, to allow third-party apps to "
"catch that exception (:ticket:`28178`)."
msgstr ""
"已更改 ``contrib.gis``，如果未安装 ``gdal``，则引发 ``ImproperlyConfigured`` "
"而不是 ``GDALException``，以允许第三方应用程序捕获该异常 (:ticket:`28178`)。"

msgid ""
"Fixed ``django.utils.http.is_safe_url()`` crash on invalid IPv6 URLs (:"
"ticket:`28142`)."
msgstr ""
"修复了在无效的 IPv6 URL 上导致 ``django.utils.http.is_safe_url()`` 崩溃的问"
"题 (:ticket:`28142`)。"

msgid ""
"Fixed regression causing pickling of model fields to crash (:ticket:`28188`)."
msgstr "修复了导致模型字段的 pickle 操作崩溃的退化问题 (:ticket:`28188`)。"

msgid ""
"Fixed ``django.contrib.auth.authenticate()`` when multiple authentication "
"backends don't accept a positional ``request`` argument (:ticket:`28207`)."
msgstr ""
"修复了 ``django.contrib.auth.authenticate()`` 当多个身份验证后端不接受位置参"
"数的 ``request`` 时的问题 (:ticket:`28207`)。"

msgid ""
"Fixed introspection of index field ordering on PostgreSQL (:ticket:`28197`)."
msgstr "修复了对 PostgreSQL 上索引字段排序的内省问题 (:ticket:`28197`)。"

msgid ""
"Fixed a regression where ``Model._state.adding`` wasn't set correctly on "
"multi-table inheritance parent models after saving a child model (:ticket:"
"`28210`)."
msgstr ""
"修复了在保存子模型后，多表继承父模型上未正确设置 ``Model._state.adding`` 的退"
"化问题 (:ticket:`28210`)。"

msgid ""
"Allowed ``DjangoJSONEncoder`` to serialize ``django.utils.deprecation."
"CallableBool`` (:ticket:`28230`)."
msgstr ""
"允许 ``DjangoJSONEncoder`` 序列化 ``django.utils.deprecation.CallableBool`` "
"(:ticket:`28230`)。"

msgid ""
"Relaxed the validation added in Django 1.11 of the fields in the "
"``defaults`` argument of ``QuerySet.get_or_create()`` and "
"``update_or_create()`` to reallow settable model properties (:ticket:"
"`28222`)."
msgstr ""
"放宽了在 Django 1.11 中添加到 ``QuerySet.get_or_create()`` 和 "
"``update_or_create()`` 的 ``defaults`` 参数中字段的验证，以允许重新设置可设置"
"的模型属性 (:ticket:`28222`)。"

msgid ""
"Fixed ``MultipleObjectMixin.paginate_queryset()`` crash on Python 2 if the "
"``InvalidPage`` message contains non-ASCII (:ticket:`28204`)."
msgstr ""
"修复了在 Python 2 上，如果 ``InvalidPage`` 消息包含非 ASCII 字符，则导致 "
"``MultipleObjectMixin.paginate_queryset()`` 崩溃的问题 (:ticket:`28204`)。"

msgid ""
"Prevented ``Subquery`` from adding an unnecessary ``CAST`` which resulted in "
"invalid SQL (:ticket:`28199`)."
msgstr ""
"防止 ``Subquery`` 添加不必要的 ``CAST``，导致生成无效的 SQL (:ticket:"
"`28199`)。"

msgid "Corrected detection of GDAL 2.1 on Windows (:ticket:`28181`)."
msgstr "已更正在 Windows 上检测 GDAL 2.1 的问题 (:ticket:`28181`)。"

msgid ""
"Made date-based generic views return a 404 rather than crash when given an "
"out of range date (:ticket:`28209`)."
msgstr ""
"使基于日期的通用视图在收到超出范围的日期时返回 404 而不是崩溃 (:ticket:"
"`28209`)。"

msgid ""
"Fixed a regression where ``file_move_safe()`` crashed when moving files to a "
"CIFS mount (:ticket:`28170`)."
msgstr ""
"修复了 ``file_move_safe()`` 在将文件移动到 CIFS 挂载点时崩溃的退化问题 (:"
"ticket:`28170`)。"

msgid ""
"Moved the ``ImageField`` file extension validation added in Django 1.11 from "
"the model field to the form field to reallow the use case of storing images "
"without an extension (:ticket:`28242`)."
msgstr ""
"将 Django 1.11 中添加的 ``ImageField`` 文件扩展名验证从模型字段移到表单字段，"
"以允许存储没有扩展名的图像的用例 (:ticket:`28242`)。"

msgid "Django 1.11.20 release notes"
msgstr "Django 1.11.20 版本发行说明"

msgid "Django 1.11.20 fixes a packaging error in 1.11.19."
msgstr "Django 1.11.20 修复了 1.11.19 中的一个打包错误。"

msgid "Corrected packaging error from 1.11.19 (:ticket:`30175`)."
msgstr "已纠正了来自 1.11.19 的打包错误 (:ticket:`30175`)。"

msgid "Django 1.11.21 release notes"
msgstr "Django 1.11.21 版本发行说明"

msgid "*June 3, 2019*"
msgstr "*2019 年 6 月 3 日*"

msgid "Django 1.11.21 fixes a security issue in 1.11.20."
msgstr "Django 1.11.21 修复了 1.11.20 中的一个安全问题。"

msgid "CVE-2019-12308: AdminURLFieldWidget XSS"
msgstr "CVE-2019-12308 ： AdminURLFieldWidget 跨站脚本攻击（XSS）"

msgid ""
"The clickable \"Current URL\" link generated by ``AdminURLFieldWidget`` "
"displayed the provided value without validating it as a safe URL. Thus, an "
"unvalidated value stored in the database, or a value provided as a URL query "
"parameter payload, could result in an clickable JavaScript link."
msgstr ""
"由 ``AdminURLFieldWidget`` 生成的可点击的 \"当前 URL\" 链接显示了提供的值，而"
"没有将其验证为安全的 URL。因此，存储在数据库中的未经验证的值，或者作为 URL 查"
"询参数有效载荷提供的值，都可能导致可点击的 JavaScript 链接。"

msgid ""
"``AdminURLFieldWidget`` now validates the provided value using :class:"
"`~django.core.validators.URLValidator` before displaying the clickable link. "
"You may customize the validator by passing a ``validator_class`` kwarg to "
"``AdminURLFieldWidget.__init__()``, e.g. when using :attr:`~django.contrib."
"admin.ModelAdmin.formfield_overrides`."
msgstr ""
"现在，在显示可点击链接之前，``AdminURLFieldWidget`` 使用 :class:`~django."
"core.validators.URLValidator` 对提供的值进行验证。您可以通过将 "
"``validator_class`` 关键字参数传递给 ``AdminURLFieldWidget.__init__()`` 来自"
"定义验证器，例如在使用 :attr:`~django.contrib.admin.ModelAdmin."
"formfield_overrides` 时。"

msgid "Django 1.11.22 release notes"
msgstr "Django 1.11.22 版本发行说明"

msgid "*July 1, 2019*"
msgstr "*2019 年 7 月 1 日*"

msgid "Django 1.11.22 fixes a security issue in 1.11.21."
msgstr "Django 1.11.22 修复了 1.11.21 中的一个安全问题。"

msgid ""
"CVE-2019-12781: Incorrect HTTP detection with reverse-proxy connecting via "
"HTTPS"
msgstr "CVE-2019-12781 ：通过 HTTPS 连接的反向代理中，HTTP 检测不正确。"

msgid ""
"When deployed behind a reverse-proxy connecting to Django via HTTPS, :attr:"
"`django.http.HttpRequest.scheme` would incorrectly detect client requests "
"made via HTTP as using HTTPS. This entails incorrect results for :meth:"
"`~django.http.HttpRequest.is_secure`, and :meth:`~django.http.HttpRequest."
"build_absolute_uri`, and that HTTP requests would not be redirected to HTTPS "
"in accordance with :setting:`SECURE_SSL_REDIRECT`."
msgstr ""
"当部署在反向代理后面，通过 HTTPS 连接到 Django 时，:attr:`django.http."
"HttpRequest.scheme` 会错误地将客户端通过 HTTP 发送的请求检测为使用 HTTPS。这"
"导致了 :meth:`~django.http.HttpRequest.is_secure` 和 :meth:`~django.http."
"HttpRequest.build_absolute_uri` 的不正确结果，以及 HTTP 请求不会根据 :"
"setting:`SECURE_SSL_REDIRECT` 进行重定向到 HTTPS。"

msgid ""
"``HttpRequest.scheme`` now respects :setting:`SECURE_PROXY_SSL_HEADER`, if "
"it is configured, and the appropriate header is set on the request, for both "
"HTTP and HTTPS requests."
msgstr ""
"现在，``HttpRequest.scheme`` 会根据配置的 :setting:"
"`SECURE_PROXY_SSL_HEADER`，如果已配置，并且请求上设置了适当的标头，对于 HTTP "
"和 HTTPS 请求都会进行相应的处理。"

msgid ""
"If you deploy Django behind a reverse-proxy that forwards HTTP requests, and "
"that connects to Django via HTTPS, be sure to verify that your application "
"correctly handles code paths relying on ``scheme``, ``is_secure()``, "
"``build_absolute_uri()``, and ``SECURE_SSL_REDIRECT``."
msgstr ""
"如果您在反向代理后面部署 Django，该代理转发 HTTP 请求并通过 HTTPS 连接到 "
"Django，请确保验证您的应用程序正确处理依赖于 ``scheme``、``is_secure()``、"
"``build_absolute_uri()`` 和 ``SECURE_SSL_REDIRECT`` 的代码路径。"

msgid "Django 1.11.23 release notes"
msgstr "Django 1.11.23 版本发行说明"

msgid "*August 1, 2019*"
msgstr "*2019 年 8 月 1 日*"

msgid "Django 1.11.23 fixes security issues in 1.11.22."
msgstr "Django 1.11.23 修复了 1.11.22 中的安全问题。"

msgid ""
"CVE-2019-14232: Denial-of-service possibility in ``django.utils.text."
"Truncator``"
msgstr ""
"CVE-2019-14232: ``django.utils.text.Truncator`` 中存在拒绝服务可能性问题。"

msgid ""
"If ``django.utils.text.Truncator``'s ``chars()`` and ``words()`` methods "
"were passed the ``html=True`` argument, they were extremely slow to evaluate "
"certain inputs due to a catastrophic backtracking vulnerability in a regular "
"expression. The ``chars()`` and ``words()`` methods are used to implement "
"the :tfilter:`truncatechars_html` and :tfilter:`truncatewords_html` template "
"filters, which were thus vulnerable."
msgstr ""
"如果 ``django.utils.text.Truncator`` 的 ``chars()`` 和 ``words()`` 方法传递"
"了 ``html=True`` 参数，它们在处理某些输入时非常慢，这是由于正则表达式中的灾难"
"性回溯漏洞引起的。``chars()`` 和 ``words()`` 方法用于实现 :tfilter:"
"`truncatechars_html` 和 :tfilter:`truncatewords_html` 模板过滤器，因此这两个"
"过滤器也存在漏洞。"

msgid ""
"The regular expressions used by ``Truncator`` have been simplified in order "
"to avoid potential backtracking issues. As a consequence, trailing "
"punctuation may now at times be included in the truncated output."
msgstr ""
"为了避免潜在的回溯问题，``Truncator`` 使用的正则表达式已经简化。因此，尾部的"
"标点符号可能会有时包含在截断后的输出中。"

msgid "CVE-2019-14233: Denial-of-service possibility in ``strip_tags()``"
msgstr "CVE-2019-14233: ``strip_tags()`` 中存在拒绝服务可能性问题。"

msgid ""
"Due to the behavior of the underlying ``HTMLParser``, :func:`django.utils."
"html.strip_tags` would be extremely slow to evaluate certain inputs "
"containing large sequences of nested incomplete HTML entities. The "
"``strip_tags()`` method is used to implement the corresponding :tfilter:"
"`striptags` template filter, which was thus also vulnerable."
msgstr ""
"由于底层的 ``HTMLParser`` 的行为，:func:`django.utils.html.strip_tags` 在处理"
"包含大量嵌套不完整 HTML 实体序列的某些输入时会变得非常慢。``strip_tags()`` 方"
"法用于实现相应的 :tfilter:`striptags` 模板过滤器，因此这两个过滤器也存在漏"
"洞。"

msgid ""
"``strip_tags()`` now avoids recursive calls to ``HTMLParser`` when progress "
"removing tags, but necessarily incomplete HTML entities, stops being made."
msgstr ""
"现在，``strip_tags()`` 在删除标签时避免了对 ``HTMLParser`` 的递归调用，但当进"
"度停止删除标签但仍存在不完整的 HTML 实体时，它会继续运行。"

msgid ""
"Remember that absolutely NO guarantee is provided about the results of "
"``strip_tags()`` being HTML safe. So NEVER mark safe the result of a "
"``strip_tags()`` call without escaping it first, for example with :func:"
"`django.utils.html.escape`."
msgstr ""
"请记住，``strip_tags()`` 的结果绝对不保证是安全的 HTML。因此，在将 "
"``strip_tags()`` 调用的结果标记为安全之前，绝对不要忘记首先进行转义，例如使"
"用 :func:`django.utils.html.escape`。"

msgid ""
"CVE-2019-14234: SQL injection possibility in key and index lookups for "
"``JSONField``/``HStoreField``"
msgstr ""
"CVE-2019-14234: 在 ``JSONField``/``HStoreField`` 的键和索引查找中存在 SQL 注"
"入可能性。"

msgid ""
":lookup:`Key and index lookups <jsonfield.key>` for ``django.contrib."
"postgres.fields.JSONField`` and :lookup:`key lookups <hstorefield.key>` for :"
"class:`~django.contrib.postgres.fields.HStoreField` were subject to SQL "
"injection, using a suitably crafted dictionary, with dictionary expansion, "
"as the ``**kwargs`` passed to ``QuerySet.filter()``."
msgstr ""
"``django.contrib.postgres.fields.JSONField`` 的 :lookup:`键和索引查找 "
"<jsonfield.key>`，以及 :class:`~django.contrib.postgres.fields.HStoreField` "
"的 :lookup:`键查找 <hstorefield.key>`，都受到了 SQL 注入的影响，使用适当构造"
"的字典，并将其作为传递给 ``QuerySet.filter()`` 的 ``**kwargs`` 进行字典扩展。"

msgid ""
"CVE-2019-14235: Potential memory exhaustion in ``django.utils.encoding."
"uri_to_iri()``"
msgstr ""
"CVE-2019-14235: ``django.utils.encoding.uri_to_iri()`` 中存在潜在的内存耗尽问"
"题。"

msgid ""
"If passed certain inputs, :func:`django.utils.encoding.uri_to_iri` could "
"lead to significant memory usage due to excessive recursion when re-percent-"
"encoding invalid UTF-8 octet sequences."
msgstr ""
"如果传递了特定的输入，:func:`django.utils.encoding.uri_to_iri` 在重新百分号编"
"码无效的 UTF-8 八位序列时可能会导致显着的内存使用，因为它会发生过多的递归。"

msgid ""
"``uri_to_iri()`` now avoids recursion when re-percent-encoding invalid UTF-8 "
"octet sequences."
msgstr ""
"现在，``uri_to_iri()`` 在重新百分号编码无效的 UTF-8 八位序列时避免了递归。"

msgid "Django 1.11.24 release notes"
msgstr "Django 1.11.24 版本发行说明"

msgid "*September 2, 2019*"
msgstr "*2019 年 9 月 2 日*"

msgid "Django 1.11.24 fixes a regression in 1.11.23."
msgstr "Django 1.11.24 修复了 1.11.23 中的一个缺陷。"

msgid ""
"Fixed crash of ``KeyTransform()`` for ``django.contrib.postgres.fields."
"JSONField`` and :class:`~django.contrib.postgres.fields.HStoreField` when "
"using on expressions with params (:ticket:`30672`)."
msgstr ""
"修复了在使用带参数的表达式时，``KeyTransform()`` 对于 ``django.contrib."
"postgres.fields.JSONField`` 和 :class:`~django.contrib.postgres.fields."
"HStoreField` 的崩溃问题 (:ticket:`30672`)。"

msgid "Django 1.11.25 release notes"
msgstr "Django 1.11.25 版本发行说明"

msgid "*October 1, 2019*"
msgstr "*2019 年 10 月 1 日*"

msgid "Django 1.11.25 fixes a regression in 1.11.23."
msgstr "Django 1.11.25 修复了 1.11.23 中的一个缺陷。"

msgid ""
"Fixed a crash when filtering with a ``Subquery()`` annotation of a queryset "
"containing ``django.contrib.postgres.fields.JSONField`` or :class:`~django."
"contrib.postgres.fields.HStoreField` (:ticket:`30769`)."
msgstr ""
"修复了在使用包含 ``django.contrib.postgres.fields.JSONField`` 或 :class:"
"`~django.contrib.postgres.fields.HStoreField` 的 queryset 的 ``Subquery()`` "
"注释进行筛选时的崩溃问题 (:ticket:`30769`)。"

msgid "Django 1.11.26 release notes"
msgstr "Django 1.11.26 版本发行说明"

msgid "*November 4, 2019*"
msgstr "*2019 年 11 月 4 日*"

msgid "Django 1.11.26 fixes a regression in 1.11.25."
msgstr "Django 1.11.26 修复了 1.11.25 中的一个缺陷。"

msgid ""
"Fixed a crash when using a ``contains``, ``contained_by``, ``has_key``, "
"``has_keys``, or ``has_any_keys`` lookup on ``django.contrib.postgres.fields."
"JSONField``, if the right or left hand side of an expression is a key "
"transform (:ticket:`30826`)."
msgstr ""
"修复了在 ``django.contrib.postgres.fields.JSONField`` 上使用 ``contains``、"
"``contained_by``、``has_key``、``has_keys`` 或 ``has_any_keys`` 查找时的崩溃"
"问题，如果表达式的左侧或右侧是键转换 (:ticket:`30826`)。"

msgid "Django 1.11.27 release notes"
msgstr "Django 1.11.27 版本发行说明"

msgid "*December 18, 2019*"
msgstr "*2019 年 12 月 18 日*"

msgid "Django 1.11.27 fixes a security issue and a data loss bug in 1.11.26."
msgstr "Django 1.11.27 修复了 1.11.26 中的一个安全问题和一个数据丢失漏洞。"

msgid "CVE-2019-19844: Potential account hijack via password reset form"
msgstr "CVE-2019-19844 ：通过密码重置表单可能导致账户劫持"

msgid ""
"By submitting a suitably crafted email address making use of Unicode "
"characters, that compared equal to an existing user email when lower-cased "
"for comparison, an attacker could be sent a password reset token for the "
"matched account."
msgstr ""
"通过提交一个精心设计的电子邮件地址，利用 Unicode 字符使其与现有用户电子邮件在"
"进行比较时转换为小写后相等，攻击者可以为匹配的帐户发送密码重置令牌。"

msgid ""
"In order to avoid this vulnerability, password reset requests now compare "
"the submitted email using the stricter, recommended algorithm for case-"
"insensitive comparison of two identifiers from `Unicode Technical Report 36, "
"section 2.11.2(B)(2)`__. Upon a match, the email containing the reset token "
"will be sent to the email address on record rather than the submitted "
"address."
msgstr ""
"为了避免这个漏洞，密码重置请求现在使用更严格、推荐的算法来比较提交的电子邮"
"件，用于不区分大小写比较两个标识符的算法来自 `Unicode Technical Report 36, "
"section 2.11.2(B)(2)`__。如果匹配成功，包含重置令牌的电子邮件将发送到记录的电"
"子邮件地址，而不是提交的地址。"

msgid ""
"Fixed a data loss possibility in :class:`~django.contrib.postgres.forms."
"SplitArrayField`. When using with ``ArrayField(BooleanField())``, all values "
"after the first ``True`` value were marked as checked instead of preserving "
"passed values (:ticket:`31073`)."
msgstr ""
"修复了 :class:`~django.contrib.postgres.forms.SplitArrayField` 中的数据丢失可"
"能性。当与 ``ArrayField(BooleanField())`` 一起使用时，第一个 ``True`` 值后的"
"所有值都被标记为已选中，而不是保留传递的值 (:ticket:`31073`)。"

msgid "Django 1.11.28 release notes"
msgstr "Django 1.11.28 版本发行说明"

msgid "*February 3, 2020*"
msgstr "*2020 年 2 月 3 日*"

msgid "Django 1.11.28 fixes a security issue in 1.11.27."
msgstr "Django 1.11.28 修复了 1.11.27 中的一个安全问题。"

msgid "CVE-2020-7471: Potential SQL injection via ``StringAgg(delimiter)``"
msgstr "CVE-2020-7471: 通过 ``StringAgg(delimiter)`` 可能存在 SQL 注入风险。"

msgid ""
":class:`~django.contrib.postgres.aggregates.StringAgg` aggregation function "
"was subject to SQL injection, using a suitably crafted ``delimiter``."
msgstr ""
":class:`~django.contrib.postgres.aggregates.StringAgg` 聚合函数存在 SQL 注入"
"风险，使用适当构造的 ``delimiter``。"

msgid "Django 1.11.29 release notes"
msgstr "Django 1.11.29 版本发行说明"

msgid "*March 4, 2020*"
msgstr "*2020 年 3 月 4 日*"

msgid "Django 1.11.29 fixes a security issue in 1.11.28."
msgstr "Django 1.11.29 修复了 1.11.28 中的一个安全问题。"

msgid ""
"CVE-2020-9402: Potential SQL injection via ``tolerance`` parameter in GIS "
"functions and aggregates on Oracle"
msgstr ""
"CVE-2020-9402: 在 Oracle 上的 GIS 函数和聚合中，通过 ``tolerance`` 参数可能存"
"在 SQL 注入风险。"

msgid ""
"GIS functions and aggregates on Oracle were subject to SQL injection, using "
"a suitably crafted ``tolerance``."
msgstr ""
"在 Oracle 上的 GIS 函数和聚合存在 SQL 注入风险，使用适当构造的 "
"``tolerance``。"

msgid "Django 1.11.3 release notes"
msgstr "Django 1.11.3 版本发行说明"

msgid "*July 1, 2017*"
msgstr "*2017 年 7 月 1 日*"

msgid "Django 1.11.3 fixes several bugs in 1.11.2."
msgstr "Django 1.11.3 修复了 1.11.2 中的几个漏洞。"

msgid ""
"Removed an incorrect deprecation warning about a missing ``renderer`` "
"argument if a ``Widget.render()`` method accepts ``**kwargs`` (:ticket:"
"`28265`)."
msgstr ""
"移除了关于如果 ``Widget.render()`` 方法接受 ``**kwargs`` 则缺少 ``renderer`` "
"参数的不正确弃用警告 (:ticket:`28265`)。"

msgid ""
"Fixed a regression causing ``Model.__init__()`` to crash if a field has an "
"instance only descriptor (:ticket:`28269`)."
msgstr ""
"修复了导致如果一个字段具有实例特定的描述符，则 ``Model.__init__()`` 崩溃的退"
"化问题 (:ticket:`28269`)。"

msgid ""
"Fixed an incorrect ``DisallowedModelAdminLookup`` exception when using a "
"nested reverse relation in ``list_filter`` (:ticket:`28262`)."
msgstr ""
"修复了在 ``list_filter`` 中使用嵌套的反向关系时出现的不正确的 "
"``DisallowedModelAdminLookup`` 异常 (:ticket:`28262`)。"

msgid ""
"Fixed admin's ``FieldListFilter.get_queryset()`` crash on invalid input (:"
"ticket:`28202`)."
msgstr ""
"修复了在管理员的 ``FieldListFilter.get_queryset()`` 上输入无效数据时的崩溃问"
"题 (:ticket:`28202`)。"

msgid ""
"Fixed invalid HTML for a required ``AdminFileWidget`` (:ticket:`28278`)."
msgstr ""
"修复了对于必填的 ``AdminFileWidget`` 生成的无效 HTML (:ticket:`28278`)。"

msgid ""
"Fixed model initialization to set the name of class-based model indexes for "
"models that only inherit ``models.Model`` (:ticket:`28282`)."
msgstr ""
"修复了对于仅继承 ``models.Model`` 的模型，设置基于类的模型索引的名称的模型初"
"始化问题 (:ticket:`28282`)。"

msgid ""
"Fixed crash in admin's inlines when a model has an inherited non-editable "
"primary key (:ticket:`27967`)."
msgstr ""
"修复了在模型具有继承的不可编辑主键时，管理员中的内联出现崩溃的问题 (:ticket:"
"`27967`)。"

msgid ""
"Fixed ``QuerySet.union()``, ``intersection()``, and ``difference()`` when "
"combining with an ``EmptyQuerySet`` (:ticket:`28293`)."
msgstr ""
"修复了在与 ``EmptyQuerySet`` 结合使用时，``QuerySet.union()``, "
"``intersection()``, 和 ``difference()`` 的问题 (:ticket:`28293`)。"

msgid ""
"Prevented ``Paginator``’s unordered object list warning from evaluating a "
"``QuerySet`` (:ticket:`28284`)."
msgstr ""
"防止 ``Paginator`` 的无序对象列表警告评估 ``QuerySet`` (:ticket:`28284`)。"

msgid ""
"Fixed the value of ``redirect_field_name`` in ``LoginView``’s template "
"context. It's now an empty string (as it is for the original function-based "
"``login()`` view) if the corresponding parameter isn't sent in a request (in "
"particular, when the login page is accessed directly) (:ticket:`28229`)."
msgstr ""
"修复了在 ``LoginView`` 的模板上下文中 ``redirect_field_name`` 的值。现在，如"
"果请求中没有发送相应的参数（特别是当直接访问登录页面时），它现在是一个空字符"
"串（与原始的基于函数的 ``login()`` 视图一样） (:ticket:`28229`)。"

msgid ""
"Prevented attribute values in the ``django/forms/widgets/attrs.html`` "
"template from being localized so that numeric attributes (e.g. ``max`` and "
"``min``) of ``NumberInput`` work correctly (:ticket:`28303`)."
msgstr ""
"防止在 ``django/forms/widgets/attrs.html`` 模板中本地化属性值，以便 "
"``NumberInput`` 的数字属性（例如 ``max`` 和 ``min``）可以正常工作 (:ticket:"
"`28303`)。"

msgid ""
"Removed casting of the option value to a string in the template context of "
"the ``CheckboxSelectMultiple``, ``NullBooleanSelect``, ``RadioSelect``, "
"``SelectMultiple``, and ``Select`` widgets (:ticket:`28176`). In Django "
"1.11.1, casting was added in Python to avoid localization of numeric values "
"in Django templates, but this made some use cases more difficult. Casting is "
"now done in the template using the ``|stringformat:'s'`` filter."
msgstr ""
"在 ``CheckboxSelectMultiple``、``NullBooleanSelect``、``RadioSelect``、"
"``SelectMultiple`` 和 ``Select`` 小部件的模板上下文中删除了选项值转换为字符串"
"的操作 (:ticket:`28176`)。在 Django 1.11.1 中，Python 中添加了转换以避免 "
"Django 模板中的数字值本地化，但这使某些用例变得更加困难。现在在模板中使用 ``|"
"stringformat:'s'`` 过滤器进行转换。"

msgid ""
"Prevented a primary key alteration from adding a foreign key constraint if "
"``db_constraint=False`` (:ticket:`28298`)."
msgstr ""
"如果 ``db_constraint=False``，则防止主键更改添加外键约束 (:ticket:`28298`)。"

msgid ""
"Fixed ``UnboundLocalError`` crash in ``RenameField`` with nonexistent field "
"(:ticket:`28350`)."
msgstr ""
"修复了在不存在的字段上的 ``RenameField`` 中的 ``UnboundLocalError`` 崩溃问题 "
"(:ticket:`28350`)。"

msgid ""
"Fixed a regression preventing a model field's ``limit_choices_to`` from "
"being evaluated when a ``ModelForm`` is instantiated (:ticket:`28345`)."
msgstr ""
"修复了在实例化 ``ModelForm`` 时防止模型字段的 ``limit_choices_to`` 被评估的回"
"归问题 (:ticket:`28345`)。"

msgid "Django 1.11.4 release notes"
msgstr "Django 1.11.4 版本发行说明"

msgid "*August 1, 2017*"
msgstr "*2017 年 8 月 1 日*"

msgid "Django 1.11.4 fixes several bugs in 1.11.3."
msgstr "Django 1.11.4 修复了 1.11.3 中的几个漏洞。"

msgid ""
"Fixed a regression in 1.11.3 on Python 2 where non-ASCII ``format`` values "
"for date/time widgets results in an empty ``value`` in the widget's HTML (:"
"ticket:`28355`)."
msgstr ""
"修复了在 Python 2 上的 1.11.3 中的回归问题，其中对于日期/时间小部件的非 "
"ASCII ``format`` 值导致小部件的 HTML 中出现空的 ``value`` (:ticket:`28355`)。"

msgid ""
"Fixed ``QuerySet.union()`` and ``difference()`` when combining with a "
"queryset raising ``EmptyResultSet`` (:ticket:`28378`)."
msgstr ""
"修复了与引发 ``EmptyResultSet`` 的查询集组合时的 ``QuerySet.union()`` 和 "
"``difference()`` 的问题 (:ticket:`28378`)。"

msgid ""
"Fixed a regression in pickling of ``LazyObject`` on Python 2 when the "
"wrapped object doesn't have ``__reduce__()`` (:ticket:`28389`)."
msgstr ""
"修复了在 Python 2 上的 ``LazyObject`` 的 pickling 回归问题，当封装的对象没有 "
"``__reduce__()`` 时 (:ticket:`28389`)。"

msgid ""
"Fixed crash in ``runserver``'s ``autoreload`` with Python 2 on Windows with "
"non-``str`` environment variables (:ticket:`28174`)."
msgstr ""
"修复了在 Windows 上使用 Python 2，并且环境变量不是 ``str`` 类型时，导致 "
"``runserver`` 的 ``autoreload`` 崩溃的问题 (:ticket:`28174`)。"

msgid ""
"Corrected ``Field.has_changed()`` to return ``False`` for disabled form "
"fields: ``BooleanField``, ``MultipleChoiceField``, ``MultiValueField``, "
"``FileField``, ``ModelChoiceField``, and ``ModelMultipleChoiceField``."
msgstr ""
"已更正 ``Field.has_changed()``，使其对于禁用的表单字段（如 ``BooleanField``、"
"``MultipleChoiceField``、``MultiValueField``、``FileField``、"
"``ModelChoiceField`` 和 ``ModelMultipleChoiceField``）返回 ``False``。"

msgid ""
"Fixed ``QuerySet.count()`` for ``union()``, ``difference()``, and "
"``intersection()`` queries. (:ticket:`28399`)."
msgstr ""
"修复了 ``union()``, ``difference()`` 和 ``intersection()`` 查询的 ``QuerySet."
"count()`` 方法 (:ticket:`28399`)。"

msgid ""
"Fixed ``ClearableFileInput`` rendering as a subwidget of ``MultiWidget`` (:"
"ticket:`28414`). Custom ``clearable_file_input.html`` widget templates will "
"need to adapt for the fact that context values ``checkbox_name``, "
"``checkbox_id``, ``is_initial``, ``input_text``, ``initial_text``, and "
"``clear_checkbox_label`` are now attributes of ``widget`` rather than "
"appearing in the top-level context."
msgstr ""
"修复了 ``ClearableFileInput`` 以 ``MultiWidget`` 的子小部件形式呈现的问题 (:"
"ticket:`28414`)。自定义的 ``clearable_file_input.html`` 小部件模板需要适应这"
"样的事实，即上下文值 ``checkbox_name``、``checkbox_id``、``is_initial``、"
"``input_text``、``initial_text`` 和 ``clear_checkbox_label`` 现在是 "
"``widget`` 的属性，而不是出现在顶级上下文中。"

msgid ""
"Fixed queryset crash when using a ``GenericRelation`` to a proxy model (:"
"ticket:`28418`)."
msgstr ""
"修复了在使用 ``GenericRelation`` 到代理模型时，查询集崩溃的问题 (:ticket:"
"`28418`)。"

msgid "Django 1.11.5 release notes"
msgstr "Django 1.11.5 版本发行说明"

msgid "Django 1.11.5 fixes a security issue and several bugs in 1.11.4."
msgstr "Django 1.11.5 修复了 1.11.4 中的一个安全问题和几个漏洞。"

msgid ""
"Fixed GEOS version parsing if the version has a commit hash at the end (new "
"in GEOS 3.6.2) (:ticket:`28441`)."
msgstr ""
"修复了如果 GEOS 版本在末尾具有提交哈希（在 GEOS 3.6.2 中新引入）时的版本解析"
"问题 (:ticket:`28441`)。"

msgid "Added compatibility for ``cx_Oracle`` 6 (:ticket:`28498`)."
msgstr "添加了对 ``cx_Oracle`` 6 的兼容性 (:ticket:`28498`)。"

msgid ""
"Fixed select widget rendering when option values are tuples (:ticket:"
"`28502`)."
msgstr "修复了当选项值为元组时，选择小部件的呈现问题 (:ticket:`28502`)。"

msgid ""
"Django 1.11 inadvertently changed the sequence and trigger naming scheme on "
"Oracle. This causes errors on INSERTs for some tables if "
"``'use_returning_into': False`` is in the ``OPTIONS`` part of ``DATABASES``. "
"The pre-1.11 naming scheme is now restored. Unfortunately, it necessarily "
"requires an update to Oracle tables created with Django 1.11.[1-4]. Use the "
"upgrade script in :ticket:`28451` comment 8 to update sequence and trigger "
"names to use the pre-1.11 naming scheme."
msgstr ""
"Django 1.11 无意中改变了 Oracle 上的序列和触发器命名方案。如果在 "
"``DATABASES`` 的 ``OPTIONS`` 部分中包含 ``'use_returning_into': False``，这会"
"导致一些表的插入操作出错。现在已经恢复了 1.11 之前的命名方案。不幸的是，这必"
"然需要更新使用 Django 1.11.[1-4] 创建的 Oracle 表。可以使用 :ticket:`28451` "
"评论 8 中的升级脚本来更新序列和触发器的名称，以使用 1.11 之前的命名方案。"

msgid ""
"Added POST request support to ``LogoutView``, for equivalence with the "
"function-based ``logout()`` view (:ticket:`28513`)."
msgstr ""
"为了与基于函数的 ``logout()`` 视图相等，为 ``LogoutView`` 添加了 POST 请求支"
"持 (:ticket:`28513`)。"

msgid ""
"Omitted ``pages_per_range`` from ``BrinIndex.deconstruct()`` if it's "
"``None`` (:ticket:`25809`)."
msgstr ""
"如果 ``pages_per_range`` 为 ``None``，则在 ``BrinIndex.deconstruct()`` 中省略"
"了它 (:ticket:`25809`)。"

msgid ""
"Fixed a regression where ``SelectDateWidget`` localized the years in the "
"select box (:ticket:`28530`)."
msgstr ""
"修复了 ``SelectDateWidget`` 本地化选择框中的年份的回归问题 (:ticket:"
"`28530`)。"

msgid ""
"Fixed a regression in 1.11.4 where ``runserver`` crashed with non-Unicode "
"system encodings on Python 2 + Windows (:ticket:`28487`)."
msgstr ""
"修复了在 Python 2 + Windows 上使用非 Unicode 系统编码时，1.11.4 中的 "
"``runserver`` 崩溃的回归问题 (:ticket:`28487`)。"

msgid ""
"Fixed a regression in Django 1.10 where changes to a ``ManyToManyField`` "
"weren't logged in the admin change history (:ticket:`27998`) and prevented "
"``ManyToManyField`` initial data in model forms from being affected by "
"subsequent model changes (:ticket:`28543`)."
msgstr ""
"修复了 Django 1.10 中的回归问题，其中对 ``ManyToManyField`` 的更改未在管理员"
"更改历史中记录 (:ticket:`27998`)，并防止模型表单中的 ``ManyToManyField`` 初始"
"数据受到后续模型更改的影响 (:ticket:`28543`)。"

msgid ""
"Fixed non-deterministic results or an ``AssertionError`` crash in some "
"queries with multiple joins (:ticket:`26522`)."
msgstr ""
"修复了在某些具有多个连接的查询中产生非确定性结果或引发 ``AssertionError`` 崩"
"溃的问题 (:ticket:`26522`)。"

msgid ""
"Fixed a regression in ``contrib.auth``'s ``login()`` and ``logout()`` views "
"where they ignored positional arguments (:ticket:`28550`)."
msgstr ""
"修复了 ``contrib.auth`` 中的 ``login()`` 和 ``logout()`` 视图中的回归问题，它"
"们忽略了位置参数 (:ticket:`28550`)。"

msgid "Django 1.11.6 release notes"
msgstr "Django 1.11.6 版本发行说明"

msgid "*October 5, 2017*"
msgstr "*2017 年 10 月 5 日*"

msgid "Django 1.11.6 fixes several bugs in 1.11.5."
msgstr "Django 1.11.6 修复了 1.11.5 中的几个漏洞。"

msgid ""
"Made the ``CharField`` form field convert whitespace-only values to the "
"``empty_value`` when ``strip`` is enabled (:ticket:`28555`)."
msgstr ""
"当启用 ``strip`` 时，使 ``CharField`` 表单字段将仅包含空白的值转换为 "
"``empty_value`` (:ticket:`28555`)。"

msgid ""
"Fixed crash when using the name of a model's autogenerated primary key "
"(``id``) in an ``Index``'s ``fields`` (:ticket:`28597`)."
msgstr ""
"修复了在索引的 ``fields`` 中使用模型的自动生成的主键（``id``）名称时的崩溃问"
"题 (:ticket:`28597`)。"

msgid ""
"Fixed a regression in Django 1.9 where a custom view error handler such as "
"``handler404`` that accesses ``csrf_token`` could cause CSRF verification "
"failures on other pages (:ticket:`28488`)."
msgstr ""
"修复了 Django 1.9 中的回归问题，其中一个自定义视图错误处理程序（例如 "
"``handler404``），如果访问了 ``csrf_token``，可能会导致其他页面上的 CSRF 验证"
"失败 (:ticket:`28488`)。"

msgid "Django 1.11.7 release notes"
msgstr "Django 1.11.7 版本发行说明"

msgid "*November 1, 2017*"
msgstr "*2017 年 11 月 1 日*"

msgid "Django 1.11.7 fixes several bugs in 1.11.6."
msgstr "Django 1.11.7 修复了 1.11.6 中的几个漏洞。"

msgid ""
"Prevented ``cache.get_or_set()`` from caching ``None`` if the ``default`` "
"argument is a callable that returns ``None`` (:ticket:`28601`)."
msgstr ""
"防止 ``cache.get_or_set()`` 在 ``default`` 参数是返回 ``None`` 的可调用对象时"
"缓存 ``None`` (:ticket:`28601`)。"

msgid "Fixed the Basque ``DATE_FORMAT`` string (:ticket:`28710`)."
msgstr "修复了巴斯克语的 ``DATE_FORMAT`` 字符串 (:ticket:`28710`)。"

msgid ""
"Made ``QuerySet.reverse()`` affect ``nulls_first`` and ``nulls_last`` (:"
"ticket:`28722`)."
msgstr ""
"使 ``QuerySet.reverse()`` 影响 ``nulls_first`` 和 ``nulls_last`` (:ticket:"
"`28722`)。"

msgid ""
"Fixed unquoted table names in ``Subquery`` SQL when using ``OuterRef`` (:"
"ticket:`28689`)."
msgstr ""
"在使用 ``OuterRef`` 时，修复了 ``Subquery`` SQL 中未引用的表名 (:ticket:"
"`28689`)。"

msgid "Django 1.11.8 release notes"
msgstr "Django 1.11.8 版本发行说明"

msgid "*December 2, 2017*"
msgstr "*2017 年 12 月 2 日*"

msgid "Django 1.11.8 fixes several bugs in 1.11.7."
msgstr "Django 1.11.8 修复了 1.11.7 中的几个漏洞。"

msgid ""
"Reallowed, following a regression in Django 1.10, ``AuthenticationForm`` to "
"raise the inactive user error when using ``ModelBackend`` (:ticket:`28645`)."
msgstr ""
"在 Django 1.10 中由于回归问题，重新允许 ``AuthenticationForm`` 在使用 "
"``ModelBackend`` 时引发不活跃用户错误 (:ticket:`28645`)。"

msgid ""
"Added support for ``QuerySet.values()`` and ``values_list()`` for "
"``union()``, ``difference()``, and ``intersection()`` queries (:ticket:"
"`28781`)."
msgstr ""
"为 ``union()``, ``difference()`` 和 ``intersection()`` 查询添加了对 "
"``QuerySet.values()`` 和 ``values_list()`` 的支持 (:ticket:`28781`)。"

msgid ""
"Fixed incorrect index name truncation when using a namespaced ``db_table`` (:"
"ticket:`28792`)."
msgstr ""
"在使用命名空间的 ``db_table`` 时，修复了索引名称截断不正确的问题 (:ticket:"
"`28792`)。"

msgid ""
"Made ``QuerySet.iterator()`` use server-side cursors on PostgreSQL after "
"``values()`` and ``values_list()`` (:ticket:`28817`)."
msgstr ""
"在 ``values()`` 和 ``values_list()`` 之后，使 ``QuerySet.iterator()`` 在 "
"PostgreSQL 上使用服务器端游标 (:ticket:`28817`)。"

msgid ""
"Fixed crash on SQLite and MySQL when ordering by a filtered subquery that "
"uses ``nulls_first`` or ``nulls_last`` (:ticket:`28848`)."
msgstr ""
"在使用 ``nulls_first`` 或 ``nulls_last`` 进行排序的已过滤子查询中，在 SQLite "
"和 MySQL 上修复了崩溃问题 (:ticket:`28848`)。"

msgid ""
"Made query lookups for ``CICharField``, ``CIEmailField``, and "
"``CITextField`` use a ``citext`` cast (:ticket:`28702`)."
msgstr ""
"对于 ``CICharField``、``CIEmailField`` 和 ``CITextField``，使查询查找使用了 "
"``citext`` 转换 (:ticket:`28702`)。"

msgid ""
"Fixed a regression in caching of a ``GenericForeignKey`` when the referenced "
"model instance uses multi-table inheritance (:ticket:`28856`)."
msgstr ""
"修复了当引用的模型实例使用多表继承时，``GenericForeignKey`` 的缓存回归问题 (:"
"ticket:`28856`)。"

msgid ""
"Fixed \"Cannot change column 'x': used in a foreign key constraint\" crash "
"on MySQL with a sequence of ``AlterField`` and/or ``RenameField`` operations "
"in a migration (:ticket:`28305`)."
msgstr ""
"在迁移中对 MySQL 进行一系列的 ``AlterField`` 和/或 ``RenameField`` 操作时，修"
"复了“无法更改列 'x'：在外键约束中使用”崩溃问题 (:ticket:`28305`)。"

msgid "Django 1.11.9 release notes"
msgstr "Django 1.11.9 版本发行说明"

msgid "*January 1, 2018*"
msgstr "*2018 年 1 月 1 日*"

msgid "Django 1.11.9 fixes several bugs in 1.11.8."
msgstr "Django 1.11.9 修复了 1.11.8 中的几个漏洞。"

msgid ""
"Fixed a regression in Django 1.11 that added newlines between "
"``MultiWidget``'s subwidgets (:ticket:`28890`)."
msgstr ""
"修复了 Django 1.11 中的回归问题，该问题在 ``MultiWidget`` 的子部件之间添加了"
"换行符 (:ticket:`28890`)。"

msgid ""
"Fixed incorrect class-based model index name generation for models with "
"quoted ``db_table`` (:ticket:`28876`)."
msgstr ""
"修复了对带有引用的 ``db_table`` 的模型生成索引名称时的错误问题 (:ticket:"
"`28876`)。"

msgid ""
"Fixed incorrect foreign key constraint name for models with quoted "
"``db_table`` (:ticket:`28876`)."
msgstr ""
"修复了对带有引用的 ``db_table`` 的模型生成错误的外键约束名称问题 (:ticket:"
"`28876`)。"

msgid ""
"Fixed a regression in caching of a ``GenericForeignKey`` when the referenced "
"model instance uses more than one level of multi-table inheritance (:ticket:"
"`28856`)."
msgstr ""
"修复了当引用的模型实例使用多级多表继承时，``GenericForeignKey`` 缓存的回归问"
"题 (:ticket:`28856`)。"

msgid "Django 1.2 release notes"
msgstr "Django 1.2 版本发行说明"

msgid "*May 17, 2010.*"
msgstr "*2017 年 5 月 17 日*"

msgid "Welcome to Django 1.2!"
msgstr "欢迎来到 Django 1.2 版本！"

msgid ""
"Nearly a year in the making, Django 1.2 packs an impressive list of :ref:"
"`new features <whats-new-1.2>` and lots of bug fixes. These release notes "
"cover the new features, as well as important changes you'll want to be aware "
"of when upgrading from Django 1.1 or older versions."
msgstr ""
"经过近一年的努力，Django 1.2 收录了令人印象深刻的一系列 :ref:`新特性 <whats-"
"new-1.2>` 和大量的错误修复。这些发布说明涵盖了新特性，以及在从 Django 1.1 或"
"更早版本升级时需要注意的重要更改。"

msgid "Overview"
msgstr "概况"

msgid "Django 1.2 introduces several large, important new features, including:"
msgstr "Django 1.2 引入了几个重要的大型新功能，包括："

msgid ""
"Support for :ref:`multiple database connections <support-for-multiple-"
"databases>` in a single Django instance."
msgstr ""
"在单个 Django 实例中支持 :ref:`多个数据库连接 <support-for-multiple-"
"databases>`。"

msgid "`Model validation`_ inspired by Django's form validation."
msgstr "`模型验证`_ 受到了 Django 的表单验证的启发。"

msgid ""
"Vastly :ref:`improved protection against Cross-Site Request Forgery "
"<improved-csrf-protection>` (CSRF)."
msgstr ""
"极大地 :ref:`改进了跨站点请求伪造 <improved-csrf-protection>` (CSRF) 的保护机"
"制。"

msgid ""
"A new :ref:`user \"messages\" framework <messages-framework>` with support "
"for cookie- and session-based message for both anonymous and authenticated "
"users."
msgstr ""
"一个新的支持匿名和已验证用户的 cookie 和会话消息的 :ref:`用户“消息”框架 "
"<messages-framework>`。"

msgid ""
"Hooks for `object-level permissions`_, `permissions for anonymous users`_, "
"and :ref:`more flexible username requirements <relaxed-requirements-for-"
"usernames>`."
msgstr ""
"`对象级权限`_、`匿名用户的权限`_ 和 :ref:`更灵活的用户名要求 <relaxed-"
"requirements-for-usernames>` 的挂钩。"

msgid "Customization of email sending via `email backends`_."
msgstr "通过 `电子邮件后端`_ 自定义电子邮件发送。"

msgid ""
"New :ref:`\"smart\" if template tag <new-in-1.2-smart-if>` which supports "
"comparison operators."
msgstr ""
"新的 :ref:`\"智能\" if 模板标签 <new-in-1.2-smart-if>` 支持比较运算符。"

msgid ""
"These are just the highlights; full details and a complete list of features :"
"ref:`may be found below <whats-new-1.2>`."
msgstr ""
"这仅仅是亮点；完整的细节和功能列表 :ref:`可能在下面找到 <whats-new-1.2>`。"

msgid ""
"`Django Advent`_ covered the release of Django 1.2 with a series of articles "
"and tutorials that cover some of the new features in depth."
msgstr ""
"`Django Advent`_ 用一系列的文章和教程详细介绍了 Django 1.2 版本的发布以及其中"
"一些新功能。"

msgid ""
"Wherever possible these features have been introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy."
msgstr ""
"尽可能地，这些功能都是按照 :doc:`我们的 API 稳定性政策 </misc/api-"
"stability>` 来引入的，以保持向后兼容性。"

msgid ""
"However, a handful of features *have* changed in ways that, for some users, "
"will be backwards-incompatible. The big changes are:"
msgstr ""
"然而，有一些功能以某种方式发生了变化，对某些用户来说将不向后兼容。主要的变化"
"包括："

msgid "Support for Python 2.3 has been dropped. See the full notes below."
msgstr "已取消对 Python 2.3 的支持。请参阅下面的详细说明。"

msgid ""
"The new CSRF protection framework is not backwards-compatible with the old "
"system. Users of the old system will not be affected until the old system is "
"removed in Django 1.4."
msgstr ""
"新的 CSRF 保护框架与旧系统不向后兼容。在 Django 1.4 中移除旧系统之前，旧系统"
"的用户不会受到影响。"

msgid ""
"However, upgrading to the new CSRF protection framework requires a few "
"important backwards-incompatible changes, detailed in `CSRF Protection`_, "
"below."
msgstr ""
"然而，升级到新的 CSRF 保护框架需要进行一些重要的不向后兼容的更改，详细信息请"
"参见下面的 `CSRF 保护`_。"

msgid ""
"Authors of custom :class:`~django.db.models.Field` subclasses should be "
"aware that a number of methods have had a change in prototype, detailed "
"under `get_db_prep_*() methods on Field`_, below."
msgstr ""
"自定义 :class:`~django.db.models.Field` 子类的作者应该注意，一些方法的原型发"
"生了变化，详细信息请参见下面的 `Field 上的 get_db_prep_*() 方法`_。"

msgid ""
"The internals of template tags have changed somewhat; authors of custom "
"template tags that need to store state (e.g. custom control flow tags) "
"should ensure that their code follows the new rules for `stateful template "
"tags`_"
msgstr ""
"模板标签的内部发生了一些变化；需要存储状态的自定义模板标签的作者（例如，自定"
"义控制流标签）应确保他们的代码遵循了新的 `有状态模板标签`_ 的规则。"

msgid ""
"The :func:`~django.contrib.auth.decorators.user_passes_test`, :func:`~django."
"contrib.auth.decorators.login_required`, and :func:`~django.contrib.auth."
"decorators.permission_required`, decorators from :mod:`django.contrib.auth` "
"only apply to functions and no longer work on methods. There's a simple one-"
"line fix :ref:`detailed below <user-passes-test-login-required-permission-"
"required>`."
msgstr ""
"来自 :mod:`django.contrib.auth` 的 :func:`~django.contrib.auth.decorators."
"user_passes_test`、:func:`~django.contrib.auth.decorators.login_required` "
"和 :func:`~django.contrib.auth.decorators.permission_required` 装饰器仅适用于"
"函数，不再适用于方法。有一个简单的一行修复方法，详细信息请参见下面的 :ref:`详"
"细说明 <user-passes-test-login-required-permission-required>`。"

msgid ""
"Again, these are just the big features that will affect the most users. "
"Users upgrading from previous versions of Django are heavily encouraged to "
"consult the complete list of :ref:`backwards-incompatible changes <backwards-"
"incompatible-changes-1.2>` and the list of :ref:`deprecated features "
"<deprecated-features-1.2>`."
msgstr ""
"再次强调，这些只是会影响大多数用户的主要功能。从以前版本的 Django 升级的用户"
"强烈建议查看完整的 :ref:`不向后兼容的更改列表 <backwards-incompatible-"
"changes-1.2>` 和 :ref:`不建议使用的功能列表 <deprecated-features-1.2>`。"

msgid ""
"While not a new feature, it's important to note that Django 1.2 introduces "
"the first shift in our Python compatibility policy since Django's initial "
"public debut. Previous Django releases were tested and supported on 2.x "
"Python versions from 2.3 up; Django 1.2, however, drops official support for "
"Python 2.3. As such, the minimum Python version required for Django is now "
"2.4, and Django is tested and supported on Python 2.4, 2.5 and 2.6, and will "
"be supported on the as-yet-unreleased Python 2.7."
msgstr ""
"虽然这不是一个新功能，但值得注意的是，自 Django 首次公开亮相以来，Django 1.2 "
"首次改变了我们的 Python 兼容性政策。以前的 Django 版本已经过测试并支持从 2.3 "
"开始的 2.x Python 版本；然而，Django 1.2 放弃了对 Python 2.3 的官方支持。因"
"此，现在 Django 所需的最低 Python 版本为 2.4，Django 已经过测试并支持 Python "
"2.4 、 2.5 和 2.6，并将支持尚未发布的 Python 2.7 。"

msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.4 or newer as their "
"default version. If you're still using Python 2.3, however, you'll need to "
"stick to Django 1.1 until you can upgrade; per :doc:`our support policy </"
"internals/release-process>`, Django 1.1 will continue to receive security "
"support until the release of Django 1.3."
msgstr ""
"这个变化应该只会影响少数 Django 用户，因为大多数操作系统供应商现在都默认安装 "
"Python 2.4 或更新的版本。然而，如果你仍然在使用 Python 2.3，那么你需要继续使"
"用 Django 1.1，直到你可以升级为止；根据 :doc:`我们的支持政策 </internals/"
"release-process>`，Django 1.1 将在 Django 1.3 发布之前继续获得安全支持。"

msgid ""
"A roadmap for Django's overall 2.x Python support, and eventual transition "
"to Python 3.x, is currently being developed, and will be announced prior to "
"the release of Django 1.3."
msgstr ""
"Django 针对整体 2.x Python 支持的发展路线图以及最终过渡到 Python 3.x 的计划目"
"前正在制定中，并将在 Django 1.3 发布之前宣布。"

msgid "What's new in Django 1.2"
msgstr "Django 1.2 新特性"

msgid "Support for multiple databases"
msgstr "支持多数据库"

msgid ""
"Django 1.2 adds the ability to use :doc:`more than one database </topics/db/"
"multi-db>` in your Django project. Queries can be issued at a specific "
"database with the ``using()`` method on ``QuerySet`` objects. Individual "
"objects can be saved to a specific database by providing a ``using`` "
"argument when you call ``save()``."
msgstr ""
"Django 1.2 增加了在你的 Django 项目中使用 :doc:`多个数据库 </topics/db/multi-"
"db>` 的能力。可以使用 ``QuerySet`` 对象上的 ``using()`` 方法在特定数据库上发"
"出查询。在调用 ``save()`` 时，可以通过提供 ``using`` 参数将单个对象保存到特定"
"的数据库。"

msgid "Model validation"
msgstr "模型验证"

msgid ""
"Model instances now have support for :ref:`validating their own data "
"<validating-objects>`, and both model and form fields now accept "
"configurable lists of :doc:`validators </ref/validators>` specifying "
"reusable, encapsulated validation behavior. Note, however, that validation "
"must still be performed explicitly. Simply invoking a model instance's "
"``save()`` method will not perform any validation of the instance's data."
msgstr ""
"模型实例现在支持 :ref:`验证自己的数据 <validating-objects>`，而且模型字段和表"
"单字段现在都接受可配置的 :doc:`验证器列表 </ref/validators>`，指定了可重用的"
"封装的验证行为。但是，请注意，验证仍然必须显式地执行。只是调用模型实例的 "
"``save()`` 方法不会对实例的数据执行任何验证。"

msgid "Improved CSRF protection"
msgstr "改进的 CSRF 保护"

msgid ""
"Django now has much improved protection against :doc:`Cross-Site Request "
"Forgery (CSRF) attacks</ref/csrf>`. This type of attack occurs when a "
"malicious website contains a link, a form button or some JavaScript that is "
"intended to perform some action on your website, using the credentials of a "
"logged-in user who visits the malicious site in their browser. A related "
"type of attack, \"login CSRF,\" where an attacking site tricks a user's "
"browser into logging into a site with someone else's credentials, is also "
"covered."
msgstr ""
"Django 现在在防范 :doc:`跨站请求伪造（CSRF）攻击 </ref/csrf>` 方面有了更加完"
"善的保护。这种类型的攻击发生在恶意网站包含一个链接、一个表单按钮或一些 "
"JavaScript，旨在使用已登录用户的凭据在其浏览器中访问恶意网站的用户来执行某些"
"操作。相关的一种攻击类型是“登录 CSRF”，其中攻击站点欺骗用户的浏览器，使其使用"
"别人的凭据登录到某个站点，这也得到了覆盖。"

msgid "Messages framework"
msgstr "消息框架"

msgid ""
"Django now includes a robust and configurable :doc:`messages framework </ref/"
"contrib/messages>` with built-in support for cookie- and session-based "
"messaging, for both anonymous and authenticated clients. The messages "
"framework replaces the deprecated user message API and allows you to "
"temporarily store messages in one request and retrieve them for display in a "
"subsequent request (usually the next one)."
msgstr ""
"Django 现在包括一个强大且可配置的 :doc:`消息框架 </ref/contrib/messages>`，内"
"置支持基于 cookie 和会话的消息传递，适用于匿名和已验证的客户端。消息框架替代"
"了不建议使用的用户消息 API，并允许你在一个请求中临时存储消息，然后在后续请求"
"中检索它们以显示（通常是下一个请求）。"

msgid "Object-level permissions"
msgstr "对象级权限"

msgid ""
"A foundation for specifying permissions at the per-object level has been "
"added. Although there is no implementation of this in core, a custom "
"authentication backend can provide this implementation and it will be used "
"by :class:`django.contrib.auth.models.User`. See the :doc:`authentication "
"docs </topics/auth/index>` for more information."
msgstr ""
"已添加了在每个对象级别指定权限的基础。尽管核心中没有此功能的实现，但自定义身"
"份验证后端可以提供此实现，并将被 :class:`django.contrib.auth.models.User` 使"
"用。有关更多信息，请参阅 :doc:`身份验证文档 </topics/auth/index>`。"

msgid "Permissions for anonymous users"
msgstr "匿名用户的权限"

msgid ""
"If you provide a custom auth backend with ``supports_anonymous_user`` set to "
"``True``, AnonymousUser will check the backend for permissions, just like "
"User already did.  This is useful for centralizing permission handling - "
"apps can always delegate the question of whether something is allowed or not "
"to the authorization/authentication backend. See the :doc:`authentication "
"docs </topics/auth/index>` for more details."
msgstr ""
"如果你提供一个自定义的身份验证后端，并将 ``supports_anonymous_user`` 设置为 "
"``True``，那么 AnonymousUser 将像 User 一样检查后端的权限。这对于集中处理权限"
"非常有用 - 应用程序始终可以将是否允许某些操作的问题委托给授权/身份验证后端。"
"有关更多详细信息，请参阅 :doc:`身份验证文档 </topics/auth/index>`。"

msgid "Relaxed requirements for usernames"
msgstr "放宽用户名要求"

msgid ""
"The built-in :class:`~django.contrib.auth.models.User` model's :attr:"
"`~django.contrib.auth.models.User.username` field now allows a wider range "
"of characters, including ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""
"内置的 :class:`~django.contrib.auth.models.User` 模型的 :attr:`~django."
"contrib.auth.models.User.username` 字段现在允许更广泛范围的字符，包括 ``@``、"
"``+``、``.`` 和 ``-`` 字符。"

msgid "Email backends"
msgstr "邮件后端"

msgid ""
"You can now :ref:`configure the way that Django sends email <topic-email-"
"backends>`. Instead of using SMTP to send all email, you can now choose a "
"configurable email backend to send messages. If your hosting provider uses a "
"sandbox or some other non-SMTP technique for sending mail, you can now "
"construct an email backend that will allow Django's standard :doc:`mail "
"sending methods</topics/email>` to use those facilities."
msgstr ""
"现在你可以 :ref:`配置 Django 发送电子邮件的方式 <topic-email-backends>`。不再"
"使用 SMTP 来发送所有电子邮件，你现在可以选择一个可配置的电子邮件后端来发送消"
"息。如果你的托管提供商使用沙盒或其他非-SMTP 发送邮件的技术，你现在可以构建一"
"个电子邮件后端，使 Django 的标准 :doc:`邮件发送方法</topics/email>` 可以使用"
"这些设施。"

msgid ""
"This also makes it easier to debug mail sending. Django ships with backend "
"implementations that allow you to send email to a :ref:`file<topic-email-"
"file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :"
"ref:`memory<topic-email-memory-backend>`. You can even configure all email "
"to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""
"这也使得调试邮件发送更加容易。Django 提供了后端实现，允许你将电子邮件发送到 :"
"ref:`文件<topic-email-file-backend>`、:ref:`控制台<topic-email-console-"
"backend>`，或 :ref:`内存<topic-email-memory-backend>`。你甚至可以配置所有的电"
"子邮件都被 :ref:`丢弃<topic-email-dummy-backend>`。"

msgid "\"Smart\" :ttag:`if` tag"
msgstr "\"智能\" :ttag:`if` 标签"

msgid ""
"The :ttag:`if` tag has been upgraded to be much more powerful. First, we've "
"added support for comparison operators. No longer will you have to type:"
msgstr ""
":ttag:`if` 标签已升级为更加强大。首先，我们增加了对比较运算符的支持。你不再需"
"要输入如下内容："

msgid "You can now do this:"
msgstr "现在你可以这样做："

msgid ""
"There's really no reason to use ``{% ifequal %}`` or ``{% ifnotequal %}`` "
"anymore, unless you're the nostalgic type."
msgstr ""
"除非你是怀旧型的，否则没有理由再使用 ``{% ifequal %}`` 或 ``{% ifnotequal %}"
"``。"

msgid ""
"The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``, "
"``in`` and ``not in``, all of which work like the Python operators, in "
"addition to ``and``, ``or`` and ``not``, which were already supported."
msgstr ""
"支持的运算符包括 ``==``、``!=``、``<``、``>``、``<=``、``>=``、``in`` 和 "
"``not in``，它们都像 Python 运算符一样工作，此外还支持 ``and``、``or`` 和 "
"``not``，这些已经被支持了。"

msgid "Also, filters may now be used in the ``if`` expression. For example:"
msgstr "此外，现在可以在 ``if`` 表达式中使用过滤器。例如："

msgid "Template caching"
msgstr "模板缓存"

msgid ""
"In previous versions of Django, every time you rendered a template, it would "
"be reloaded from disk. In Django 1.2, you can use a :ref:`cached template "
"loader <template-loaders>` to load templates once, then cache the result for "
"every subsequent render. This can lead to a significant performance "
"improvement if your templates are broken into lots of smaller subtemplates "
"(using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""
"在之前的 Django 版本中，每次渲染模板时都会重新从磁盘加载。在 Django 1.2 中，"
"你可以使用 :ref:`缓存模板加载器 <template-loaders>` 来加载模板一次，然后为每"
"个后续的渲染缓存结果。如果你的模板被拆分成许多较小的子模板（使用 ``{% "
"extends %}`` 或 ``{% include %}`` 标签），这可以导致显著的性能提升。"

msgid ""
"As a side effect, it is now much easier to support non-Django template "
"languages."
msgstr "作为一个副作用，现在更容易支持非 Django 模板语言。"

msgid "Class-based template loaders"
msgstr "基于类的模板加载器"

msgid ""
"As part of the changes made to introduce `Template caching`_  and following "
"a general trend in Django, the template loaders API has been modified to use "
"template loading mechanisms that are encapsulated in Python classes as "
"opposed to functions, the only method available until Django 1.1."
msgstr ""
"作为引入 `模板缓存`_ 所做的更改的一部分，并遵循 Django 中的一般趋势，模板加载"
"器 API 已经被修改为使用封装在 Python 类中的模板加载机制，而不是像 Django 1.1 "
"中只有函数可用。"

msgid ""
"All the template loaders :ref:`shipped with Django <template-loaders>` have "
"been ported to the new API but they still implement the function-based API "
"and the template core machinery still accepts function-based loaders "
"(builtin or third party) so there is no immediate need to modify your "
"``TEMPLATE_LOADERS`` setting in existing projects, things will keep working "
"if you leave it untouched up to and including the Django 1.3 release."
msgstr ""
"所有 :ref:`随 Django 一起提供的模板加载器 <template-loaders>` 都已经转换到新"
"的 API，但它们仍然实现了基于函数的 API，而模板核心机制仍然接受基于函数的加载"
"器（内置或第三方的），因此在现有项目中不需要立即修改你的 "
"``TEMPLATE_LOADERS`` 设置，如果你不更改它，事情将一直正常工作，直到 Django "
"1.3 版本为止。"

msgid ""
"If you have developed your own custom template loaders we suggest to "
"consider porting them to a class-based implementation because the code for "
"backwards compatibility with function-based loaders starts its deprecation "
"process in Django 1.2 and will be removed in Django 1.4.  There is a "
"description of the API these loader classes must implement in the template "
"API reference and you can also examine the source code of the loaders "
"shipped with Django."
msgstr ""
"如果你已经开发了自己的自定义模板加载器，我们建议考虑将它们移植到基于类的实"
"现，因为在 Django 1.2 中，与基于函数的加载器向后兼容的代码开始被弃用，并将在 "
"Django 1.4 中移除。在模板 API 参考中有关于这些加载器类必须实现的 API 的描述，"
"你还可以查看随 Django 附带的加载器的源代码。"

msgid "Natural keys in fixtures"
msgstr "固定装置中的自然键"

msgid ""
"Fixtures can now refer to remote objects using :ref:`topics-serialization-"
"natural-keys`. This lookup scheme is an alternative to the normal primary-"
"key based object references in a fixture, improving readability and "
"resolving problems referring to objects whose primary key value may not be "
"predictable or known."
msgstr ""
"现在，可以使用 :ref:`topics-serialization-natural-keys` 来引用远程对象的固定"
"数据。这种查找方案是一种替代传统基于主键的对象引用的方式，可以提高可读性，并"
"解决引用那些主键值可能不可预测或未知的对象的问题。"

msgid "Fast failure for tests"
msgstr "测试的快速失败"

msgid ""
"Both the :djadmin:`test` subcommand of ``django-admin.py`` and the "
"``runtests.py`` script used to run Django's own test suite now support a ``--"
"failfast`` option. When specified, this option causes the test runner to "
"exit after encountering a failure instead of continuing with the test run. "
"In addition, the handling of ``Ctrl-C`` during a test run has been improved "
"to trigger a graceful exit from the test run that reports details of the "
"tests that were run before the interruption."
msgstr ""
"``django-admin.py`` 的 :djadmin:`test` 子命令和用于运行 Django 自己的测试套件"
"的 ``runtests.py`` 脚本现在都支持 ``--failfast`` 选项。当指定此选项时，测试运"
"行器在遇到失败后会退出，而不是继续运行测试。此外，在测试运行期间改进了对 "
"``Ctrl-C`` 的处理，触发了从测试运行中优雅退出，并报告中断前运行的测试的详细信"
"息。"

msgid "``BigIntegerField``"
msgstr "``BigIntegerField``"

msgid ""
"Models can now use a 64-bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""
"现在，模型可以使用 64 位的 :class:`~django.db.models.BigIntegerField` 类型。"

msgid "Improved localization"
msgstr "改善的本地化"

msgid ""
"Django's :doc:`internationalization framework </topics/i18n/index>` has been "
"expanded with locale-aware formatting and form processing. That means, if "
"enabled, dates and numbers on templates will be displayed using the format "
"specified for the current locale. Django will also use localized formats "
"when parsing data in forms. See :doc:`/topics/i18n/formatting` for more "
"details."
msgstr ""
"Django 的 :doc:`国际化框架 </topics/i18n/index>` 已经扩展了，具备了区域感知的"
"格式化和表单处理功能。这意味着，如果启用了国际化，模板中的日期和数字将使用当"
"前区域设置指定的格式进行显示。Django 还会在解析表单中的数据时使用本地化格式。"
"有关更多详细信息，请参阅 :doc:`/topics/i18n/formatting`。"

msgid "``readonly_fields`` in ``ModelAdmin``"
msgstr "``ModelAdmin`` 中的 ``readonly_fields``"

msgid ""
":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to "
"enable non-editable fields in add/change pages for models and inlines. Field "
"and calculated values can be displayed alongside editable fields."
msgstr ""
":attr:`django.contrib.admin.ModelAdmin.readonly_fields` 已经被添加，用于在模"
"型和内联的添加/更改页面上启用不可编辑的字段。字段和计算值可以显示在可编辑字段"
"旁边。"

msgid "Customizable syntax highlighting"
msgstr "可定制的语法高亮"

msgid ""
"You can now use a :envvar:`DJANGO_COLORS` environment variable to modify or "
"disable the colors used by ``django-admin.py`` to provide :ref:`syntax "
"highlighting <syntax-coloring>`."
msgstr ""
"现在，你可以使用 :envvar:`DJANGO_COLORS` 环境变量来修改或禁用 ``django-admin."
"py`` 用于提供 :ref:`语法高亮 <syntax-coloring>` 的颜色。"

msgid "Syndication feeds as views"
msgstr "将聚合订阅作为视图"

msgid ""
":doc:`Syndication feeds </ref/contrib/syndication>` can now be used directly "
"as views in your :doc:`URLconf </topics/http/urls>`. This means that you can "
"maintain complete control over the URL structure of your feeds. Like any "
"other view, feeds views are passed a ``request`` object, so you can do "
"anything you would normally do with a view, like user based access control, "
"or making a feed a named URL."
msgstr ""
":doc:`Syndication feeds </ref/contrib/syndication>` 现在可以直接用作你的 :"
"doc:`URLconf </topics/http/urls>` 中的视图。这意味着你可以完全控制你的 feeds "
"的 URL 结构。与任何其他视图一样，feeds 视图会传递一个 ``request`` 对象，因此"
"你可以像处理常规视图一样进行操作，如基于用户的访问控制，或将 feed 作为具名 "
"URL。"

msgid ""
"The most significant new feature for :doc:`GeoDjango </ref/contrib/gis/"
"index>` in 1.2 is support for multiple spatial databases.  As a result, the "
"following :ref:`spatial database backends <spatial-backends>` are now "
"included:"
msgstr ""
"在 1.2 版本中，对于 :doc:`GeoDjango </ref/contrib/gis/index>` 最重要的新功能"
"之一是对多个空间数据库的支持。因此，现在包括了以下 :ref:`空间数据库后端 "
"<spatial-backends>`："

msgid "``django.contrib.gis.db.backends.postgis``"
msgstr "``django.contrib.gis.db.backends.postgis``"

msgid "``django.contrib.gis.db.backends.mysql``"
msgstr "``django.contrib.gis.db.backends.mysql``"

msgid "``django.contrib.gis.db.backends.oracle``"
msgstr "``django.contrib.gis.db.backends.oracle``"

msgid "``django.contrib.gis.db.backends.spatialite``"
msgstr "``django.contrib.gis.db.backends.spatialite``"

msgid ""
"GeoDjango now supports the rich capabilities added in the PostGIS 1.5 "
"release. New features include support for the :ref:`geography type "
"<geography-type>` and enabling of :ref:`distance queries <distance-queries>` "
"with non-point geometries on geographic coordinate systems."
msgstr ""
"GeoDjango 现在支持 PostGIS 1.5 发布中添加的丰富功能。新功能包括对 :ref:"
"`geography 类型 <geography-type>` 的支持，并在地理坐标系统上启用了对非点几何"
"图形的 :ref:`距离查询 <distance-queries>`。"

msgid ""
"Support for 3D geometry fields was added, and may be enabled by setting the :"
"attr:`~django.contrib.gis.db.models.GeometryField.dim` keyword to 3 in your :"
"class:`~django.contrib.gis.db.models.GeometryField`. The :class:`~django."
"contrib.gis.db.models.Extent3D` aggregate and ``extent3d()`` ``GeoQuerySet`` "
"method were added as a part of this feature."
msgstr ""
"已添加对 3D 几何字段的支持，可以通过在 :class:`~django.contrib.gis.db.models."
"GeometryField` 中设置 :attr:`~django.contrib.gis.db.models.GeometryField."
"dim` 关键字为 3 来启用。作为此功能的一部分，还添加了 :class:`~django.contrib."
"gis.db.models.Extent3D` 聚合和 ``extent3d()`` ``GeoQuerySet`` 方法。"

msgid ""
"The ``force_rhr()``, ``reverse_geom()``, and ``geohash()`` ``GeoQuerySet`` "
"methods are new."
msgstr ""
"新添加了 ``force_rhr()``、``reverse_geom()`` 和 ``geohash()`` "
"``GeoQuerySet`` 方法。"

msgid ""
"The GEOS interface was updated to use thread-safe C library functions when "
"available on the platform."
msgstr "当平台支持时，更新了 GEOS 接口以使用线程安全的 C 库函数。"

msgid ""
"The GDAL interface now allows the user to set a :attr:`~django.contrib.gis."
"gdal.Layer.spatial_filter` on the features returned when iterating over a :"
"class:`~django.contrib.gis.gdal.Layer`."
msgstr ""
"GDAL 接口现在允许用户在迭代 :class:`~django.contrib.gis.gdal.Layer` 时设置 :"
"attr:`~django.contrib.gis.gdal.Layer.spatial_filter`，以过滤返回的要素。"

msgid ""
"Finally, :doc:`GeoDjango's documentation </ref/contrib/gis/index>` is now "
"included with Django's and is no longer hosted separately at ``geodjango."
"org``."
msgstr ""
"最后，:doc:`GeoDjango 的文档 </ref/contrib/gis/index>` 现在已经与 Django 的文"
"档一起包括在内，不再单独托管在 ``geodjango.org`` 上。"

msgid "JavaScript-assisted handling of inline related objects in the admin"
msgstr "在管理中使用 JavaScript 辅助处理内联相关对象。"

msgid ""
"If a user has JavaScript enabled in their browser, the interface for inline "
"objects in the admin now allows inline objects to be dynamically added and "
"removed. Users without JavaScript-enabled browsers will see no change in the "
"behavior of inline objects."
msgstr ""
"如果用户的浏览器启用了 JavaScript，则管理中内联对象的界面现在允许动态添加和删"
"除内联对象。没有启用 JavaScript 的浏览器的用户将不会看到内联对象行为的任何变"
"化。"

msgid "New ``now`` template tag format specifier characters: ``c`` and ``u``"
msgstr "新的 ``now`` 模板标签格式说明符字符：``c`` 和 ``u``"

msgid ""
"The argument to the :ttag:`now` has gained two new format characters: ``c`` "
"to specify that a datetime value should be formatted in ISO 8601 format, and "
"``u`` that allows output of the microseconds part of a datetime or time "
"value."
msgstr ""
":ttag:`now` 的参数新增了两个新的格式字符：``c`` 用于指定将日期时间值格式化为 "
"ISO 8601 格式，``u`` 允许输出日期时间或时间值的微秒部分。"

msgid ""
"These are also available in others parts like the :tfilter:`date` and :"
"tfilter:`time` template filters, the ``humanize`` template tag library and "
"the new `format localization`_ framework."
msgstr ""
"这些新格式字符也在其他地方可用，如 :tfilter:`date` 和 :tfilter:`time` 模板过"
"滤器、``humanize`` 模板标签库以及新的 `格式本地化`_ 框架。"

msgid "Backwards-incompatible changes in 1.2"
msgstr "1.2 版本中的不向后兼容的更改。"

msgid ""
"Wherever possible the new features above have been introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy. This means that practically all existing code which worked with "
"Django 1.1 will continue to work with Django 1.2; such code will, however, "
"begin issuing warnings (see below for details)."
msgstr ""
"在可能的情况下，上述新功能均以向后兼容的方式引入，遵循 :doc:`我们的 API 稳定"
"性政策 </misc/api-stability>`。这意味着几乎所有与 Django 1.1 兼容的现有代码都"
"将继续适用于 Django 1.2 版本；然而，这样的代码将开始发出警告（详情见下文）。"

msgid ""
"However, a handful of features *have* changed in ways that, for some users, "
"will be immediately backwards-incompatible. Those changes are detailed below."
msgstr ""
"然而，有一些功能确实以一种对某些用户来说立即不向后兼容的方式发生了变化。这些"
"变化将在下面详细说明。"

msgid "CSRF Protection"
msgstr "CSRF 保护。"

msgid ""
"We've made large changes to the way CSRF protection works, detailed in :doc:"
"`the CSRF documentation </ref/csrf>`. Here are the major changes you should "
"be aware of:"
msgstr ""
"我们对 CSRF 保护的工作方式进行了重大改变，详细信息请参阅 :doc:`CSRF 文档 </"
"ref/csrf>`。以下是你应该注意的主要变化："

msgid ""
"``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated and "
"will be removed completely in Django 1.4, in favor of a template tag that "
"should be inserted into forms."
msgstr ""
"``CsrfResponseMiddleware`` 和 ``CsrfMiddleware`` 已被弃用，并将在 Django 1.4 "
"中完全删除，取而代之的是应该插入到表单中的模板标签。"

msgid ""
"All contrib apps use a ``csrf_protect`` decorator to protect the view. This "
"requires the use of the ``csrf_token`` template tag in the template. If you "
"have used custom templates for contrib views, you MUST READ THE UPGRADE "
"INSTRUCTIONS to fix those templates."
msgstr ""
"所有的 contrib 应用都使用了一个 ``csrf_protect`` 装饰器来保护视图。这需要在模"
"板中使用 ``csrf_token`` 模板标签。如果你已经使用了自定义模板来定制 contrib 视"
"图，你必须阅读升级说明来修复这些模板。"

msgid "Documentation removed"
msgstr "已删除文档"

msgid ""
"The upgrade notes have been removed in current Django docs. Please refer to "
"the docs for Django 1.3 or older to find these instructions."
msgstr ""
"当前 Django 文档中已删除了升级说明。请参考 Django 1.3 或更早版本的文档以查找"
"这些说明。"

msgid ""
"``CsrfViewMiddleware`` is included in ``MIDDLEWARE_CLASSES`` by default. "
"This turns on CSRF protection by default, so views that accept POST requests "
"need to be written to work with the middleware. Instructions on how to do "
"this are found in the CSRF docs."
msgstr ""
"``CsrfViewMiddleware`` 默认包含在 ``MIDDLEWARE_CLASSES`` 中。这默认启用了 "
"CSRF 保护，因此接受 POST 请求的视图需要编写以与中间件一起使用。如何做到这一点"
"的说明可以在 CSRF 文档中找到。"

msgid ""
"All of the CSRF has moved from contrib to core (with backwards compatible "
"imports in the old locations, which are deprecated and will cease to be "
"supported in Django 1.4)."
msgstr ""
"所有的 CSRF 已经从 contrib 转移到了核心（在旧的位置有向后兼容的导入，这些导入"
"已被弃用，并将在 Django 1.4 中停止支持）。"

msgid "``get_db_prep_*()`` methods on ``Field``"
msgstr "``Field`` 上的 ``get_db_prep_*()`` 方法"

msgid ""
"Prior to Django 1.2, a custom ``Field`` had the option of defining several "
"functions to support conversion of Python values into database-compatible "
"values. A custom field might look something like::"
msgstr ""
"在 Django 1.2 之前，自定义的 ``Field`` 可以定义多个函数，用于将 Python 值转换"
"为与数据库兼容的值。一个自定义字段可能如下所示："

msgid ""
"In 1.2, these three methods have undergone a change in prototype, and two "
"extra methods have been introduced::"
msgstr "在 1.2 版本中，这三种方法的原型发生了变化，还引入了两种额外的方法："

msgid ""
"These changes are required to support multiple databases -- ``db_type`` and "
"``get_db_prep_*`` can no longer make any assumptions regarding the database "
"for which it is preparing. The ``connection`` argument now provides the "
"preparation methods with the specific connection for which the value is "
"being prepared."
msgstr ""
"这些更改是为了支持多个数据库 - ``db_type`` 和 ``get_db_prep_*`` 不能再对其准"
"备的数据库做任何假设。现在，``connection`` 参数为准备方法提供了特定的连接，用"
"于准备该值。"

msgid ""
"The two new methods exist to differentiate general data-preparation "
"requirements from requirements that are database-specific. The ``prepared`` "
"argument is used to indicate to the database-preparation methods whether "
"generic value preparation has been performed. If an unprepared (i.e., "
"``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they "
"should invoke the corresponding ``get_prep_*()`` calls to perform generic "
"data preparation."
msgstr ""
"这两个新方法的存在是为了区分通用的数据准备需求和特定于数据库的需求。"
"``prepared`` 参数用于指示数据库准备方法是否已执行通用值准备。如果将未准备好的"
"值（即 ``prepared=False``）提供给 ``get_db_prep_*()`` 调用，它们应该调用相应"
"的 ``get_prep_*()`` 调用来执行通用数据准备。"

msgid ""
"We've provided conversion functions that will transparently convert "
"functions adhering to the old prototype into functions compatible with the "
"new prototype. However, these conversion functions will be removed in Django "
"1.4, so you should upgrade your ``Field`` definitions to use the new "
"prototype as soon as possible."
msgstr ""
"我们提供了转换函数，可以将符合旧原型的函数透明地转换为与新原型兼容的函数。但"
"是，这些转换函数将在 Django 1.4 中移除，因此你应该尽快升级你的 ``Field`` 定"
"义，以使用新的原型。"

msgid ""
"If your ``get_db_prep_*()`` methods made no use of the database connection, "
"you should be able to upgrade by renaming ``get_db_prep_value()`` to "
"``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()``. "
"If you require database specific conversions, then you will need to provide "
"an implementation ``get_db_prep_*`` that uses the ``connection`` argument to "
"resolve database-specific values."
msgstr ""
"如果你的 ``get_db_prep_*()`` 方法没有使用数据库连接，你应该可以通过将 "
"``get_db_prep_value()`` 重命名为 ``get_prep_value()``，将 "
"``get_db_prep_lookup()`` 重命名为 ``get_prep_lookup()`` 来进行升级。如果你需"
"要数据库特定的转换，那么你需要提供一个实现 ``get_db_prep_*`` 的方法，使用 "
"``connection`` 参数来解析数据库特定的值。"

msgid "Stateful template tags"
msgstr "有状态的模板标签"

msgid ""
"Template tags that store rendering state on their ``Node`` subclass have "
"always been vulnerable to thread-safety and other issues; as of Django 1.2, "
"however, they may also cause problems when used with the new :ref:`cached "
"template loader<template-loaders>`."
msgstr ""
"将渲染状态存储在其 ``Node`` 子类上的模板标签一直容易受到线程安全和其他问题的"
"影响；然而，从Django 1.2开始，当与新的 :ref:`cached template loader<template-"
"loaders>` 一起使用时，它们可能也会引发问题。"

msgid ""
"All of the built-in Django template tags are safe to use with the cached "
"loader, but if you're using custom template tags that come from third party "
"packages, or from your own code, you should ensure that the ``Node`` "
"implementation for each tag is thread-safe. For more information, see :ref:"
"`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""
"所有内置的 Django 模板标签都可以安全地与缓存加载器一起使用，但如果你使用的是"
"来自第三方包或你自己的代码的自定义模板标签，你应该确保每个标签的 ``Node`` 实"
"现是线程安全的。更多信息，请参阅 :ref:`模板标签线程安全注意事项"
"<template_tag_thread_safety>`。"

msgid ""
"You may also need to update your templates if you were relying on the "
"implementation of Django's template tags *not* being thread safe. The :ttag:"
"`cycle` tag is the most likely to be affected in this way, especially when "
"used in conjunction with the :ttag:`include` tag. Consider the following "
"template fragment:"
msgstr ""
"如果你依赖于 Django 模板标签的实现 *不* 是线程安全的，你可能还需要更新你的模"
"板。在这种情况下，:ttag:`cycle` 标签最有可能受到影响，特别是当与 :ttag:"
"`include` 标签一起使用时。考虑以下模板片段："

msgid "with a ``subtemplate.html`` that reads:"
msgstr "带有一个 ``subtemplate.html``，其内容如下："

msgid "Using the non-thread-safe, pre-Django 1.2 renderer, this would output:"
msgstr "使用非线程安全的、 Django 1.2 之前的渲染器，输出如下："

msgid "Using the thread-safe Django 1.2 renderer, you will instead get:"
msgstr "使用线程安全的 Django 1.2 渲染器，你将得到："

msgid ""
"This is because each rendering of the :ttag:`include` tag is an independent "
"rendering. When the :ttag:`cycle` tag was not thread safe, the state of the :"
"ttag:`cycle` tag would leak between multiple renderings of the same :ttag:"
"`include`. Now that the :ttag:`cycle` tag is thread safe, this leakage no "
"longer occurs."
msgstr ""
"这是因为每次渲染 :ttag:`include` 标签都是独立的渲染。当 :ttag:`cycle` 标签不"
"是线程安全时，:ttag:`cycle` 标签的状态会在同一个 :ttag:`include` 的多次渲染之"
"间泄漏。现在 :ttag:`cycle` 标签是线程安全的，这种泄漏不再发生。"

msgid "``user_passes_test``, ``login_required`` and ``permission_required``"
msgstr "``user_passes_test``, ``login_required`` 和 ``permission_required``"

msgid ""
"``django.contrib.auth.decorators`` provides the decorators "
"``login_required``, ``permission_required`` and ``user_passes_test``. "
"Previously it was possible to use these decorators both on functions (where "
"the first argument is 'request') and on methods (where the first argument is "
"'self', and the second argument is 'request'). Unfortunately, flaws were "
"discovered in the code supporting this: it only works in limited "
"circumstances, and produces errors that are very difficult to debug when it "
"does not work."
msgstr ""
"``django.contrib.auth.decorators`` 提供了装饰器 ``login_required``、"
"``permission_required`` 和 ``user_passes_test``。以前可以在函数上使用这些装饰"
"器（其中第一个参数是 'request'），也可以在方法上使用（其中第一个参数是 "
"'self'，第二个参数是 'request'）。不幸的是，发现了支持这种用法的代码存在缺"
"陷：它只在有限的情况下工作，并且在不起作用时会产生非常难以调试的错误。"

msgid ""
"For this reason, the 'auto adapt' behavior has been removed, and if you are "
"using these decorators on methods, you will need to manually apply :func:"
"`django.utils.decorators.method_decorator` to convert the decorator to one "
"that works with methods. For example, you would change code from this::"
msgstr ""
"因此，已经移除了'auto adapt'行为，如果你在方法上使用这些装饰器，你需要手动应"
"用 :func:`django.utils.decorators.method_decorator` 来将装饰器转换为适用于方"
"法的装饰器。例如，你需要将代码从这样改为："

msgid "or::"
msgstr "或者："

msgid ""
"For those of you who've been following the development trunk, this change "
"also applies to other decorators introduced since 1.1, including "
"``csrf_protect``, ``cache_control`` and anything created using "
"``decorator_from_middleware``."
msgstr ""
"对于那些一直关注开发主干的人，这个变更也适用于自 1.1 版以来引入的其他装饰器，"
"包括 ``csrf_protect``、``cache_control`` 和使用 "
"``decorator_from_middleware`` 创建的任何装饰器。"

msgid ":ttag:`if` tag changes"
msgstr ":ttag:`if` 标签的变更"

msgid ""
"Due to new features in the :ttag:`if` template tag, it no longer accepts "
"'and', 'or' and 'not' as valid **variable** names. Previously, these strings "
"could be used as variable names. Now, the keyword status is always enforced, "
"and template code such as ``{% if not %}`` or ``{% if and %}`` will throw a "
"``TemplateSyntaxError``. Also, ``in`` is a new keyword and so is not a valid "
"variable name in this tag."
msgstr ""
"由于 :ttag:`if` 模板标签中的新功能，它不再接受 'and'、'or' 和 'not' 作为有效"
"的 **变量** 名称。以前，这些字符串可以用作变量名。现在，关键字状态始终受到强"
"制执行，因此模板代码如 ``{% if not %}`` 或 ``{% if and %}`` 将引发 "
"``TemplateSyntaxError``。此外，``in`` 是一个新关键字，因此在此标签中不是有效"
"的变量名。"

msgid "``LazyObject``"
msgstr "``LazyObject``"

msgid ""
"``LazyObject`` is an undocumented-but-often-used utility class used for "
"lazily wrapping other objects of unknown type."
msgstr ""
"``LazyObject`` 是一个未记录但经常使用的实用类，用于懒惰地包装其他未知类型的对"
"象。"

msgid ""
"In Django 1.1 and earlier, it handled introspection in a non-standard way, "
"depending on wrapped objects implementing a public method named "
"``get_all_members()``. Since this could easily lead to name clashes, it has "
"been changed to use the standard Python introspection method, involving "
"``__members__`` and ``__dir__()``."
msgstr ""
"在 Django 1.1 及更早版本中，它以一种非标准的方式处理内省，依赖于被包装的对象"
"实现一个名为 ``get_all_members()`` 的公共方法。由于这可能会导致名称冲突，因此"
"已更改为使用标准的 Python 内省方法，涉及 ``__members__`` 和 ``__dir__()``。"

msgid ""
"If you used ``LazyObject`` in your own code and implemented the "
"``get_all_members()`` method for wrapped objects, you'll need to make a "
"couple of changes:"
msgstr ""
"如果你在自己的代码中使用了 ``LazyObject`` 并为被包装的对象实现了 "
"``get_all_members()`` 方法，你需要进行一些更改："

msgid ""
"First, if your class does not have special requirements for introspection (i."
"e., you have not implemented ``__getattr__()`` or other methods that allow "
"for attributes not discoverable by normal mechanisms), you can simply remove "
"the ``get_all_members()`` method. The default implementation on "
"``LazyObject`` will do the right thing."
msgstr ""
"首先，如果你的类对内省没有特殊要求（即，你没有实现 ``__getattr__()`` 或其他允"
"许通过正常机制无法发现的属性的方法），你可以简单地删除 ``get_all_members()`` "
"方法。``LazyObject`` 上的默认实现会处理得当。"

msgid ""
"If you have more complex requirements for introspection, first rename the "
"``get_all_members()`` method to ``__dir__()``. This is the standard "
"introspection method for Python 2.6 and above. If you require support for "
"Python versions earlier than 2.6, add the following code to the class::"
msgstr ""
"如果你对内省有更复杂的要求，首先将 ``get_all_members()`` 方法重命名为 "
"``__dir__()``。这是 Python 2.6 及更高版本的标准内省方法。如果你需要支持早于 "
"2.6 版本的 Python，请将以下代码添加到类中："

msgid "``__dict__`` on model instances"
msgstr "模型实例上的 ``__dict__``"

msgid ""
"Historically, the ``__dict__`` attribute of a model instance has only "
"contained attributes corresponding to the fields on a model."
msgstr "在历史上，模型实例的 ``__dict__`` 属性仅包含与模型上的字段对应的属性。"

msgid ""
"In order to support multiple database configurations, Django 1.2 has added a "
"``_state`` attribute to object instances. This attribute will appear in "
"``__dict__`` for a model instance. If your code relies on iterating over "
"``__dict__`` to obtain a list of fields, you must now be prepared to handle "
"or filter out the ``_state`` attribute."
msgstr ""
"为了支持多个数据库配置，Django 1.2 添加了一个 ``_state`` 属性到对象实例中。这"
"个属性将出现在模型实例的 ``__dict__`` 中。如果你的代码依赖于遍历 "
"``__dict__`` 来获取字段列表，现在必须准备好处理或过滤掉 ``_state`` 属性。"

msgid ""
"The exit status code of the test runners (``tests/runtests.py`` and ``python "
"manage.py test``) no longer represents the number of failed tests, because a "
"failure of 256 or more tests resulted in a wrong exit status code. The exit "
"status code for the test runner is now 0 for success (no failing tests) and "
"1 for any number of test failures. If needed, the number of test failures "
"can be found at the end of the test runner's output."
msgstr ""
"测试运行器（``tests/runtests.py`` 和 ``python manage.py test``）的退出状态码"
"不再代表失败测试的数量，因为失败 256 个或更多测试会导致错误的退出状态码。现在"
"测试运行器的退出状态码为 0 表示成功（没有失败测试），为 1 表示任何数量的测试"
"失败。如果需要，可以在测试运行器的输出末尾找到测试失败的数量。"

msgid ""
"To fix bugs with cookies in Internet Explorer, Safari, and possibly other "
"browsers, our encoding of cookie values was changed so that the comma and "
"semicolon are treated as non-safe characters, and are therefore encoded as "
"``\\054`` and ``\\073`` respectively.  This could produce backwards "
"incompatibilities, especially if you are storing comma or semi-colon in "
"cookies and have JavaScript code that parses and manipulates cookie values "
"client-side."
msgstr ""
"为了修复 Internet Explorer、Safari 和可能其他浏览器中的 cookie 问题，我们更改"
"了对 cookie 值的编码，以使逗号和分号被视为非安全字符，因此它们被编码为 "
"``\\054`` 和 ``\\073``。这可能会导致向后不兼容性，特别是如果你在 cookie 中存"
"储逗号或分号，并且有客户端 JavaScript 代码解析和操作 cookie 值。"

msgid "``ModelForm.is_valid()`` and ``ModelForm.errors``"
msgstr "``ModelForm.is_valid()`` 和 ``ModelForm.errors``"

msgid ""
"Much of the validation work for ModelForms has been moved down to the model "
"level. As a result, the first time you call ``ModelForm.is_valid()``, access "
"``ModelForm.errors`` or otherwise trigger form validation, your model will "
"be cleaned in-place. This conversion used to happen when the model was "
"saved. If you need an unmodified instance of your model, you should pass a "
"copy to the ``ModelForm`` constructor."
msgstr ""
"ModelForms 的大部分验证工作已经移到了模型级别。因此，第一次调用 ``ModelForm."
"is_valid()``，访问 ``ModelForm.errors`` 或以其他方式触发表单验证时，你的模型"
"将被原地清理。这个转换以前是在模型保存时发生的。如果你需要一个未修改的模型实"
"例，你应该将一个副本传递给 ``ModelForm`` 构造函数。"

msgid "``BooleanField`` on MySQL"
msgstr "在 MySQL 上的 ``BooleanField``"

msgid ""
"In previous versions of Django, a model's ``BooleanField`` under MySQL would "
"return its value as either ``1`` or ``0``, instead of ``True`` or ``False``; "
"for most people this wasn't a problem because ``bool`` is a subclass of "
"``int`` in Python. In Django 1.2, however, ``BooleanField`` on MySQL "
"correctly returns a real ``bool``.  The only time this should ever be an "
"issue is if you were expecting the ``repr`` of a ``BooleanField`` to print "
"``1`` or ``0``."
msgstr ""
"在之前的 Django 版本中，在 MySQL 下，模型的 ``BooleanField`` 会将其值返回为 "
"``1`` 或 ``0``，而不是 ``True`` 或 ``False``；对于大多数人来说，这不是问题，"
"因为在 Python 中，``bool`` 是 ``int`` 的子类。然而，在 Django 1.2 中，MySQL "
"上的 ``BooleanField`` 正确地返回一个真正的 ``bool``。唯一可能会引发问题的情况"
"是，如果你期望一个 ``BooleanField`` 的 ``repr`` 打印出 ``1`` 或 ``0``。"

msgid "Changes to the interpretation of ``max_num`` in FormSets"
msgstr "对于 FormSets 中 ``max_num`` 的解释变更"

msgid ""
"As part of enhancements made to the handling of FormSets, the default value "
"and interpretation of the ``max_num`` parameter to the :ref:`django.forms."
"formsets.formset_factory() <formsets-max-num>` and :ref:`django.forms.models."
"modelformset_factory() <model-formsets-max-num>` functions has changed "
"slightly. This change also affects the way the :attr:`~django.contrib.admin."
"InlineModelAdmin.max_num` argument is used for inline admin objects."
msgstr ""
"作为对 FormSets 处理的增强的一部分，``max_num`` 参数在 :ref:`django.forms."
"formsets.formset_factory() <formsets-max-num>` 和 :ref:`django.forms.models."
"modelformset_factory() <model-formsets-max-num>` 函数中的默认值和解释略有变"
"化。这个变更也影响了内联管理对象的 :attr:`~django.contrib.admin."
"InlineModelAdmin.max_num` 参数的使用方式。"

msgid ""
"Previously, the default value for ``max_num`` was ``0`` (zero). FormSets "
"then used the boolean value of ``max_num`` to determine if a limit was to be "
"imposed on the number of generated forms. The default value of ``0`` meant "
"that there was no default limit on the number of forms in a FormSet."
msgstr ""
"以前，``max_num`` 的默认值是 ``0`` （零）。FormSets 然后使用 ``max_num`` 的布"
"尔值来确定是否要对生成的表单数量设置限制。默认值 ``0`` 意味着在 FormSet 中没"
"有默认限制的表单数量。"

msgid ""
"Starting with 1.2, the default value for ``max_num`` has been changed to "
"``None``, and FormSets will differentiate between a value of ``None`` and a "
"value of ``0``. A value of ``None`` indicates that no limit on the number of "
"forms is to be imposed; a value of ``0`` indicates that a maximum of 0 forms "
"should be imposed. This doesn't necessarily mean that no forms will be "
"displayed -- see the :ref:`ModelFormSet documentation <model-formsets-max-"
"num>` for more details."
msgstr ""
"从 1.2 版本开始，``max_num`` 的默认值已更改为 ``None``，并且 FormSets 将区分 "
"``None`` 和 ``0`` 之间的值。``None`` 表示不限制表单数量；``0`` 表示最多允许 "
"0 个表单。这并不一定意味着不会显示任何表单 - 请参阅 :ref:`ModelFormSet 文档 "
"<model-formsets-max-num>` 获取更多详细信息。"

msgid ""
"If you were manually specifying a value of ``0`` for ``max_num``, you will "
"need to update your FormSet and/or admin definitions."
msgstr ""
"如果你手动指定了 ``0`` 作为 ``max_num`` 的值，你需要更新你的 FormSet 和/或管"
"理定义。"

msgid ":ref:`1.2-js-assisted-inlines`"
msgstr ":ref:`1.2-js-assisted-inlines`"

msgid "``email_re``"
msgstr "``email_re``"

msgid ""
"An undocumented regular expression for validating email addresses has been "
"moved from ``django.form.fields`` to ``django.core.validators``. You will "
"need to update your imports if you are using it."
msgstr ""
"一个未记录的用于验证电子邮件地址的正则表达式已从 ``django.form.fields`` 移动"
"到了 ``django.core.validators``。如果你在使用它，你需要更新你的导入。"

msgid "Features deprecated in 1.2"
msgstr "在 1.2 中被废弃的功能"

msgid ""
"Finally, Django 1.2 deprecates some features from earlier releases. These "
"features are still supported, but will be gradually phased out over the next "
"few release cycles."
msgstr ""
"最后，Django 1.2 弃用了一些早期版本的功能。这些功能仍然受支持，但将在接下来的"
"几个版本周期内逐步淘汰。"

msgid ""
"Code taking advantage of any of the features below will raise a "
"``PendingDeprecationWarning`` in Django 1.2. This warning will be silent by "
"default, but may be turned on using Python's :mod:`warnings` module, or by "
"running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""
"使用以下任何功能的代码将在 Django 1.2 中引发 ``PendingDeprecationWarning``。"
"这个警告默认情况下会被忽略，但可以使用 Python 的 :mod:`warnings` 模块来打开"
"它，或者通过使用 ``-Wd`` 或 ``-Wall`` 标志来运行 Python 来启用它。"

msgid ""
"In Django 1.3, these warnings will become a ``DeprecationWarning``, which is "
"*not* silent. In Django 1.4 support for these features will be removed "
"entirely."
msgstr ""
"在 Django 1.3 中，这些警告将变为 ``DeprecationWarning``，它不会被忽略。在 "
"Django 1.4 中，对这些功能的支持将完全移除。"

msgid ""
"For more details, see the documentation :doc:`Django's release process </"
"internals/release-process>` and our :doc:`deprecation timeline </internals/"
"deprecation>`.`"
msgstr ""
"有关更多详细信息，请参阅文档中的 :doc:`Django 发布过程 </internals/release-"
"process>` 和 :doc:`弃用时间表 </internals/deprecation>`。"

msgid "Specifying databases"
msgstr "指定数据库"

msgid ""
"Prior to Django 1.2, Django used a number of settings to control access to a "
"single database. Django 1.2 introduces support for multiple databases, and "
"as a result the way you define database settings has changed."
msgstr ""
"在 Django 1.2 之前，Django 使用了许多设置来控制访问单个数据库。 Django 1.2 引"
"入了对多数据库的支持，因此定义数据库设置的方式发生了变化。"

msgid ""
"Any existing Django settings file will continue to work as expected until "
"Django 1.4. Until then, old-style database settings will be automatically "
"translated to the new-style format."
msgstr ""
"任何现有的 Django 设置文件将继续按预期工作，直到 Django 1.4 。在此之前，旧式"
"数据库设置将自动转换为新式格式。"

msgid ""
"In the old-style (pre 1.2) format, you had a number of ``DATABASE_`` "
"settings in your settings file. For example::"
msgstr ""
"在旧式（1.2 版之前）的格式中，你的设置文件中有许多 ``DATABASE_`` 设置。例如："

msgid ""
"These settings are now in a dictionary named :setting:`DATABASES`. Each item "
"in the dictionary corresponds to a single database connection, with the name "
"``'default'`` describing the default database connection. The setting names "
"have also been shortened. The previous sample settings would now look like "
"this::"
msgstr ""
"这些设置现在在名为 :setting:`DATABASES` 的字典中。字典中的每个条目对应一个单"
"独的数据库连接，名称为 ``'default'`` 描述了默认的数据库连接。设置的名称也已经"
"缩短。之前的示例设置现在会像这样："

msgid "This affects the following settings:"
msgstr "这影响了以下设置："

msgid "Old setting"
msgstr "旧设置"

msgid "New Setting"
msgstr "新设置"

msgid "``DATABASE_ENGINE``"
msgstr "``DATABASE_ENGINE``"

msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ":setting:`ENGINE <DATABASE-ENGINE>`"

msgid "``DATABASE_HOST``"
msgstr "``DATABASE_HOST``"

msgid ":setting:`HOST`"
msgstr ":setting:`HOST`"

msgid "``DATABASE_NAME``"
msgstr "``DATABASE_NAME``"

msgid ":setting:`NAME`"
msgstr ":setting:`NAME`"

msgid "``DATABASE_OPTIONS``"
msgstr "``DATABASE_OPTIONS``"

msgid ":setting:`OPTIONS`"
msgstr ":setting:`OPTIONS`"

msgid "``DATABASE_PASSWORD``"
msgstr "``DATABASE_PASSWORD``"

msgid ":setting:`PASSWORD`"
msgstr ":setting:`PASSWORD`"

msgid "``DATABASE_PORT``"
msgstr "``DATABASE_PORT``"

msgid ":setting:`PORT`"
msgstr ":setting:`PORT`"

msgid "``DATABASE_USER``"
msgstr "``DATABASE_USER``"

msgid ":setting:`USER`"
msgstr ":setting:`USER`"

msgid "``TEST_DATABASE_CHARSET``"
msgstr "``TEST_DATABASE_CHARSET``"

msgid ":setting:`TEST_CHARSET`"
msgstr ":setting:`TEST_CHARSET`"

msgid "``TEST_DATABASE_COLLATION``"
msgstr "``TEST_DATABASE_COLLATION``"

msgid ":setting:`TEST_COLLATION`"
msgstr ":setting:`TEST_COLLATION`"

msgid "``TEST_DATABASE_NAME``"
msgstr "``TEST_DATABASE_NAME``"

msgid ":setting:`TEST_NAME`"
msgstr ":setting:`TEST_NAME`"

msgid ""
"These changes are also required if you have manually created a database "
"connection using ``DatabaseWrapper()`` from your database backend of choice."
msgstr ""
"如果你使用所选择的数据库后端手动创建了数据库连接，这些更改也是必需的，可以使"
"用 ``DatabaseWrapper()``。"

msgid ""
"In addition to the change in structure, Django 1.2 removes the special "
"handling for the built-in database backends. All database backends must now "
"be specified by a fully qualified module name (i.e., ``django.db.backends."
"postgresql_psycopg2``, rather than just ``postgresql_psycopg2``)."
msgstr ""
"除了结构的变更，Django 1.2 还移除了内置数据库后端的特殊处理。现在，所有的数据"
"库后端都必须使用完全限定的模块名来指定（例如，``django.db.backends."
"postgresql_psycopg2``，而不仅仅是 ``postgresql_psycopg2``）。"

msgid "``postgresql`` database backend"
msgstr "``postgresql`` 数据库后端"

msgid ""
"The ``psycopg1`` library has not been updated since October 2005. As a "
"result, the ``postgresql`` database backend, which uses this library, has "
"been deprecated."
msgstr ""
"``psycopg1`` 库自 2005 年 10 月以来没有更新。因此，使用这个库的 "
"``postgresql`` 数据库后端已经被弃用。"

msgid ""
"If you are currently using the ``postgresql`` backend, you should migrate to "
"using the ``postgresql_psycopg2`` backend. To update your code, install the "
"``psycopg2`` library and change the :setting:`ENGINE <DATABASE-ENGINE>` "
"setting to use ``django.db.backends.postgresql_psycopg2``."
msgstr ""
"如果你目前正在使用 ``postgresql`` 后端，你应该迁移到使用 "
"``postgresql_psycopg2`` 后端。要更新你的代码，安装 ``psycopg2`` 库，并将 :"
"setting:`ENGINE <DATABASE-ENGINE>` 设置更改为使用 ``django.db.backends."
"postgresql_psycopg2``。"

msgid "CSRF response-rewriting middleware"
msgstr "CSRF 响应重写中间件"

msgid ""
"``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF "
"tokens into ``POST`` forms in outgoing pages, has been deprecated in favor "
"of a template tag method (see above), and will be removed completely in "
"Django 1.4. ``CsrfMiddleware``, which includes the functionality of "
"``CsrfResponseMiddleware`` and ``CsrfViewMiddleware``, has likewise been "
"deprecated."
msgstr ""
"``CsrfResponseMiddleware``，自动在传出页面的 ``POST`` 表单中插入 CSRF 令牌的"
"中间件，已被弃用，推荐使用模板标签方法（见上文），并将在 Django 1.4 中完全移"
"除。同样，包含了 ``CsrfResponseMiddleware`` 和 ``CsrfViewMiddleware`` 功能的 "
"``CsrfMiddleware`` 也已被弃用。"

msgid ""
"Also, the CSRF module has moved from contrib to core, and the old imports "
"are deprecated, as described in the upgrading notes."
msgstr ""
"此外，CSRF 模块已从 contrib 转移到核心，旧的导入已被弃用，如升级说明中所述。"

msgid "``SMTPConnection``"
msgstr "``SMTPConnection``"

msgid ""
"The ``SMTPConnection`` class has been deprecated in favor of a generic email "
"backend API. Old code that explicitly instantiated an instance of an "
"SMTPConnection::"
msgstr ""
"``SMTPConnection`` 类已被弃用，以支持通用的电子邮件后端 API。旧代码中明确实例"
"化 ``SMTPConnection`` 实例的方式已被弃用："

msgid ""
"...should now call :meth:`~django.core.mail.get_connection()` to instantiate "
"a generic email connection::"
msgstr ""
"...现在应该调用 :meth:`~django.core.mail.get_connection()` 来实例化一个通用的"
"电子邮件连接："

msgid ""
"Depending on the value of the :setting:`EMAIL_BACKEND` setting, this may not "
"return an SMTP connection. If you explicitly require an SMTP connection with "
"which to send email, you can explicitly request an SMTP connection::"
msgstr ""
"根据 :setting:`EMAIL_BACKEND` 设置的值，这可能不会返回一个 SMTP 连接。如果你"
"明确需要一个用于发送电子邮件的 SMTP 连接，可以显式请求一个 SMTP 连接："

msgid ""
"If your call to construct an instance of ``SMTPConnection`` required "
"additional arguments, those arguments can be passed to the :meth:`~django."
"core.mail.get_connection()` call::"
msgstr ""
"如果你构造 ``SMTPConnection`` 实例的调用需要额外的参数，这些参数可以传递给 :"
"meth:`~django.core.mail.get_connection()` 调用："

msgid "User Messages API"
msgstr "用户消息 API"

msgid ""
"The API for storing messages in the user ``Message`` model (via ``user."
"message_set.create``) is now deprecated and will be removed in Django 1.4 "
"according to the standard :doc:`release process </internals/release-"
"process>`."
msgstr ""
"通过 ``user.message_set.create`` 在用户 ``Message`` 模型中存储消息的 API 已被"
"弃用，并将根据标准的 :doc:`发布流程 </internals/release-process>` 在 Django "
"1.4 中移除。"

msgid "To upgrade your code, you need to replace any instances of this::"
msgstr "要升级你的代码，你需要替换所有这样的实例："

msgid "...with the following::"
msgstr "... 替换为以下内容："

msgid ""
"Additionally, if you make use of the method, you need to replace the "
"following::"
msgstr "此外，如果你使用这个方法，你需要替换以下内容："

msgid "...with::"
msgstr "... 替换为："

msgid ""
"For more information, see the full :doc:`messages documentation </ref/"
"contrib/messages>`. You should begin to update your code to use the new API "
"immediately."
msgstr ""
"有关更多信息，请参阅完整的 :doc:`消息文档 </ref/contrib/messages>`。你应该立"
"即开始更新你的代码以使用新的 API。"

msgid "Date format helper functions"
msgstr "日期格式辅助函数"

msgid ""
"``django.utils.translation.get_date_formats()`` and ``django.utils."
"translation.get_partial_date_formats()`` have been deprecated in favor of "
"the appropriate calls to ``django.utils.formats.get_format()``, which is "
"locale-aware when ``USE_L10N`` is set to ``True``, and falls back to default "
"settings if set to ``False``."
msgstr ""
"``django.utils.translation.get_date_formats()`` 和 ``django.utils."
"translation.get_partial_date_formats()`` 已被弃用，推荐使用适当的调用 "
"``django.utils.formats.get_format()``，当 ``USE_L10N`` 设置为 ``True`` 时，它"
"是区域感知的，并在设置为 ``False`` 时回退到默认设置。"

msgid "To get the different date formats, instead of writing this::"
msgstr "要获得不同的日期格式，而不是编写这样的代码："

msgid "...use::"
msgstr "... 使用："

msgid "Or, when directly formatting a date value::"
msgstr "或者，在直接格式化日期值时："

msgid "The same applies to the globals found in ``django.forms.fields``:"
msgstr "同样适用于 ``django.forms.fields`` 中找到的全局变量："

msgid "``DEFAULT_DATE_INPUT_FORMATS``"
msgstr "``DEFAULT_DATE_INPUT_FORMATS``"

msgid "``DEFAULT_TIME_INPUT_FORMATS``"
msgstr "``DEFAULT_TIME_INPUT_FORMATS``"

msgid "``DEFAULT_DATETIME_INPUT_FORMATS``"
msgstr "``DEFAULT_DATETIME_INPUT_FORMATS``"

msgid ""
"Use ``django.utils.formats.get_format()`` to get the appropriate formats."
msgstr "使用 ``django.utils.formats.get_format()`` 获取适当的格式。"

msgid "Function-based test runners"
msgstr "基于函数的测试运行器"

msgid ""
"Django 1.2 changes the test runner tools to use a class-based approach. Old "
"style function-based test runners will still work, but should be updated to "
"use the new :ref:`class-based runners <topics-testing-test_runner>`."
msgstr ""
"Django 1.2 更改了测试运行工具以使用基于类的方法。旧式的基于函数的测试运行工具"
"仍然可以工作，但应该更新为使用新的 :ref:`基于类的运行工具 <topics-testing-"
"test_runner>`。"

msgid "``Feed`` in ``django.contrib.syndication.feeds``"
msgstr "``django.contrib.syndication.feeds`` 中的 ``Feed``"

msgid ""
"The ``django.contrib.syndication.feeds.Feed`` class has been replaced by "
"the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds."
"Feed`` class is deprecated, and will be removed in Django 1.4."
msgstr ""
"``django.contrib.syndication.feeds.Feed`` 类已被 :class:`django.contrib."
"syndication.views.Feed` 类替代。旧的 ``feeds.Feed`` 类已被弃用，并将在 "
"Django 1.4 中移除。"

msgid ""
"The new class has an almost identical API, but allows instances to be used "
"as views. For example, consider the use of the old framework in the "
"following :doc:`URLconf </topics/http/urls>`::"
msgstr ""
"新的类具有几乎相同的 API，但允许将实例用作视图。例如，考虑以下 :doc:`URLconf "
"</topics/http/urls>` 中使用旧框架的示例："

msgid ""
"Using the new Feed class, these feeds can be deployed directly as views::"
msgstr "使用新的 Feed 类，这些 feed 可以直接作为视图部署："

msgid ""
"If you currently use the ``feed()`` view, the ``LatestEntries`` class would "
"often not need to be modified apart from subclassing the new :class:`~django."
"contrib.syndication.views.Feed` class. The exception is if Django was "
"automatically working out the name of the template to use to render the "
"feed's description and title elements (if you were not specifying the "
"``title_template`` and ``description_template`` attributes). You should "
"ensure that you always specify ``title_template`` and "
"``description_template`` attributes, or provide ``item_title()`` and "
"``item_description()`` methods."
msgstr ""
"如果你当前使用 ``feed()`` 视图，那么 ``LatestEntries`` 类通常不需要进行修改，"
"除非它是新的 :class:`~django.contrib.syndication.views.Feed` 类的子类。唯一的"
"例外是如果 Django 自动计算要用于渲染 feed 的描述和标题元素的模板名称（如果你"
"没有指定 ``title_template`` 和 ``description_template`` 属性）。你应该确保始"
"终指定 ``title_template`` 和 ``description_template`` 属性，或提供 "
"``item_title()`` 和 ``item_description()`` 方法。"

msgid ""
"However, ``LatestEntriesByCategory`` uses the ``get_object()`` method with "
"the ``bits`` argument to specify a specific category to show. In the new :"
"class:`~django.contrib.syndication.views.Feed` class, ``get_object()`` "
"method takes a ``request`` and arguments from the URL, so it would look like "
"this::"
msgstr ""
"然而，``LatestEntriesByCategory`` 使用了 ``get_object()`` 方法，并通过 "
"``bits`` 参数指定要显示的特定类别。在新的 :class:`~django.contrib."
"syndication.views.Feed` 类中，``get_object()`` 方法接受一个 ``request`` 和来"
"自 URL 的参数，所以它会像这样："

msgid ""
"Additionally, the ``get_feed()`` method on ``Feed`` classes now take "
"different arguments, which may impact you if you use the ``Feed`` classes "
"directly. Instead of just taking an optional ``url`` argument, it now takes "
"two arguments: the object returned by its own ``get_object()`` method, and "
"the current ``request`` object."
msgstr ""
"另外，``Feed`` 类上的 ``get_feed()`` 方法现在接受不同的参数，如果你直接使用 "
"``Feed`` 类，这可能会影响你。现在它不仅接受可选的 ``url`` 参数，还接受两个参"
"数：它自己的 ``get_object()`` 方法返回的对象以及当前的 ``request`` 对象。"

msgid ""
"To take into account ``Feed`` classes not being initialized for each "
"request, the ``__init__()`` method now takes no arguments by default. "
"Previously it would have taken the ``slug`` from the URL and the ``request`` "
"object."
msgstr ""
"为了考虑到 ``Feed`` 类不会为每个请求初始化，现在默认情况下 ``__init__()`` 方"
"法不接受任何参数。以前它会接受来自 URL 的 ``slug`` 和 ``request`` 对象作为参"
"数。"

msgid ""
"In accordance with `RSS best practices`_, RSS feeds will now include an "
"``atom:link`` element. You may need to update your tests to take this into "
"account."
msgstr ""
"根据 `RSS 最佳实践`_，RSS 订阅现在将包含一个 ``atom:link`` 元素。你可能需要更"
"新你的测试以考虑这一点。"

msgid ""
"For more information, see the full :doc:`syndication framework documentation "
"</ref/contrib/syndication>`."
msgstr ""
"有关更多信息，请参阅完整的 :doc:`syndication 框架文档 </ref/contrib/"
"syndication>`。"

msgid "Technical message IDs"
msgstr "技术性消息 ID"

msgid ""
"Up to version 1.1 Django used technical message IDs to provide localizers "
"the possibility to translate date and time formats. They were translatable :"
"term:`translation strings <translation string>` that could be recognized "
"because they were all upper case (for example :setting:`DATETIME_FORMAT`, :"
"setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`). They have been deprecated in "
"favor of the new :doc:`/topics/i18n/formatting` infrastructure that allows "
"localizers to specify that information in a ``formats.py`` file in the "
"corresponding ``django/conf/locale/<locale name>/`` directory."
msgstr ""
"在版本 1.1 之前，Django 使用技术性的消息 ID 来提供本地化者翻译日期和时间格式"
"的可能性。它们是可翻译的 :term:`翻译字符串 <translation string>`，可以通过它"
"们都是大写字母来识别（例如 :setting:`DATETIME_FORMAT`, :setting:"
"`DATE_FORMAT`, :setting:`TIME_FORMAT`）。它们已被弃用，推荐使用新的 :doc:`/"
"topics/i18n/formatting` 基础设施，允许本地化者在相应的 ``django/conf/locale/"
"<locale name>/`` 目录中的 ``formats.py`` 文件中指定这些信息。"

msgid ""
"To allow support for multiple databases, the GeoDjango database internals "
"were changed substantially.  The largest backwards-incompatible change is "
"that the module ``django.contrib.gis.db.backend`` was renamed to :mod:"
"`django.contrib.gis.db.backends`, where the full-fledged :ref:`spatial "
"database backends <spatial-backends>` now exist.  The following sections "
"provide information on the most-popular APIs that were affected by these "
"changes."
msgstr ""
"为了支持多个数据库，GeoDjango 数据库内部进行了重大的更改。最大的向后不兼容性"
"更改是模块 ``django.contrib.gis.db.backend`` 被重命名为 :mod:`django.contrib."
"gis.db.backends`，其中现在存在全功能的 :ref:`空间数据库后端 <spatial-"
"backends>`。以下各节提供了关于受这些更改影响最大的 API 的信息。"

msgid "``SpatialBackend``"
msgstr "``SpatialBackend``"

msgid ""
"Prior to the creation of the separate spatial backends, the ``django.contrib."
"gis.db.backend.SpatialBackend`` object was provided as an abstraction to "
"introspect on the capabilities of the spatial database.  All of the "
"attributes and routines provided by ``SpatialBackend`` are now a part of the "
"``ops`` attribute of the database backend."
msgstr ""
"在创建单独的空间后端之前，提供了 ``django.contrib.gis.db.backend."
"SpatialBackend`` 对象，用于内省空间数据库的功能。``SpatialBackend`` 提供的所"
"有属性和例程现在都是数据库后端的 ``ops`` 属性的一部分。"

msgid ""
"The old module ``django.contrib.gis.db.backend`` is still provided for "
"backwards-compatibility access to a ``SpatialBackend`` object, which is just "
"an alias to the ``ops`` module of the *default* spatial database connection."
msgstr ""
"旧模块 ``django.contrib.gis.db.backend`` 仍然提供了向后兼容的访问 "
"``SpatialBackend`` 对象的方式，它只是默认空间数据库连接的 ``ops`` 模块的别"
"名。"

msgid ""
"Users that were relying on undocumented modules and objects within ``django."
"contrib.gis.db.backend``, rather the abstractions provided by "
"``SpatialBackend``, are required to modify their code. For example, the "
"following import which would work in 1.1 and below::"
msgstr ""
"依赖于 ``django.contrib.gis.db.backend`` 中的未记录模块和对象，而不是 "
"``SpatialBackend`` 提供的抽象的用户需要修改他们的代码。例如，在 1.1 及以下版"
"本中可以正常工作的以下导入："

msgid "Would need to be changed::"
msgstr "需要进行更改："

msgid "``SpatialRefSys`` and ``GeometryColumns`` models"
msgstr "``SpatialRefSys`` 和 ``GeometryColumns`` 模型"

msgid ""
"In previous versions of GeoDjango, :mod:`django.contrib.gis.db.models` had "
"``SpatialRefSys`` and ``GeometryColumns`` models for querying the OGC "
"spatial metadata tables ``spatial_ref_sys`` and ``geometry_columns``, "
"respectively."
msgstr ""
"在 GeoDjango 的早期版本中，:mod:`django.contrib.gis.db.models` 包含了用于查"
"询 OGC 空间元数据表 ``spatial_ref_sys`` 和 ``geometry_columns`` 的 "
"``SpatialRefSys`` 和 ``GeometryColumns`` 模型。"

msgid ""
"While these aliases are still provided, they are only for the *default* "
"database connection and exist only if the default connection is using a "
"supported spatial database backend."
msgstr ""
"尽管仍然提供这些别名，但它们仅适用于 *默认* 数据库连接，并且仅在默认连接使用"
"受支持的空间数据库后端时存在。"

msgid ""
"Because the table structure of the OGC spatial metadata tables differs "
"across spatial databases, the ``SpatialRefSys`` and ``GeometryColumns`` "
"models can no longer be associated with the ``gis`` application name.  Thus, "
"no models will be returned when using the ``get_models`` method in the "
"following example:"
msgstr ""
"由于不同空间数据库的 OGC 空间元数据表的表结构不同，因此不能再将 "
"``SpatialRefSys`` 和 ``GeometryColumns`` 模型与 ``gis`` 应用程序名称关联。因"
"此，在以下示例中使用 ``get_models`` 方法将不会返回任何模型："

msgid ""
"To get the correct ``SpatialRefSys`` and ``GeometryColumns`` for your "
"spatial database use the methods provided by the spatial backend:"
msgstr ""
"要获取与你的空间数据库匹配的正确的 ``SpatialRefSys`` 和 ``GeometryColumns``，"
"请使用空间后端提供的方法："

msgid ""
"When using the models returned from the ``spatial_ref_sys()`` and "
"``geometry_columns()`` method, you'll still need to use the correct database "
"alias when querying on the non-default connection. In other words, to ensure "
"that the models in the example above use the correct database::"
msgstr ""
"当使用从 ``spatial_ref_sys()`` 和 ``geometry_columns()`` 方法返回的模型时，仍"
"然需要在查询非默认连接时使用正确的数据库别名。换句话说，为了确保上面示例中的"
"模型使用正确的数据库："

msgid "Language code ``no``"
msgstr "语言代码 ``no``"

msgid ""
"The currently used language code for Norwegian Bokmål ``no`` is being "
"replaced by the more common language code ``nb``."
msgstr ""
"目前使用的挪威博克马尔语的语言代码 ``no`` 正在被更常见的语言代码 ``nb`` 所取"
"代。"

msgid "Function-based template loaders"
msgstr "基于函数的模板加载器"

msgid ""
"Django 1.2 changes the template loading mechanism to use a class-based "
"approach. Old style function-based template loaders will still work, but "
"should be updated to use the new class-based template loaders."
msgstr ""
"Django 1.2 将模板加载机制更改为使用基于类的方法。旧式基于函数的模板加载器仍然"
"可以工作，但应该更新为使用新的基于类的模板加载器。"

msgid "Django 1.2.1 release notes"
msgstr "Django 1.2.1 版本发行说明"

msgid ""
"Django 1.2.1 was released almost immediately after 1.2.0 to correct two "
"small bugs: one was in the documentation packaging script, the other was a :"
"ticket:`bug <13560>` that affected datetime form field widgets when "
"localization was enabled."
msgstr ""
"Django 1.2.1 几乎在 1.2.0 发布后立即发布，用于修复两个小问题：一个在文档打包"
"脚本中，另一个是在启用本地化时影响日期时间表单字段小部件的 :ticket:`错误 "
"<13560>`。"

msgid "Django 1.2.2 release notes"
msgstr "Django 1.2.2 版本发行说明"

msgid "Welcome to Django 1.2.2!"
msgstr "欢迎来到 Django 1.2.2 版本！"

msgid ""
"This is the second \"bugfix\" release in the Django 1.2 series, improving "
"the stability and performance of the Django 1.2 codebase."
msgstr ""
"这是 Django 1.2 系列中的第二个“修复错误”的版本，提高了 Django 1.2 代码库的稳"
"定性和性能。"

msgid ""
"Django 1.2.2 maintains backwards compatibility with Django 1.2.1, but "
"contain a number of fixes and other improvements. Django 1.2.2 is a "
"recommended upgrade for any development or deployment currently using or "
"targeting Django 1.2."
msgstr ""
"Django 1.2.2 保持了与 Django 1.2.1 的向后兼容性，但包含了许多修复和其他改进。"
"对于当前使用或针对 Django 1.2 的任何开发或部署，建议升级到 Django 1.2.2 。"

msgid ""
"For full details on the new features, backwards incompatibilities, and "
"deprecated features in the 1.2 branch, see the :doc:`/releases/1.2`."
msgstr ""
"有关 1.2 分支的新功能、向后不兼容性和已弃用功能的详细信息，请参阅 :doc:`/"
"releases/1.2`。"

msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.2.2, we have made an exception to this rule."
msgstr ""
"通常情况下，一个小版本更新不会包含新功能，但在 Django 1.2.2 的情况下，我们对"
"这个规则做了一个例外。"

msgid ""
"In order to test a bug fix that forms part of the 1.2.2 release, it was "
"necessary to add a feature -- the ``enforce_csrf_checks`` flag -- to the :"
"ref:`test client <test-client>`. This flag forces the test client to perform "
"full CSRF checks on forms. The default behavior of the test client hasn't "
"changed, but if you want to do CSRF checks with the test client, it is now "
"possible to do so."
msgstr ""
"为了测试 1.2.2 版本中的一个错误修复，必须添加一个功能——"
"``enforce_csrf_checks`` 标志——到 :ref:`测试客户端 <test-client>`。这个标志强"
"制测试客户端对表单执行完整的 CSRF 检查。测试客户端的默认行为没有改变，但如果"
"你想使用测试客户端进行 CSRF 检查，现在是可以做到的。"

msgid "Django 1.2.3 release notes"
msgstr "Django 1.2.3 版本发行说明"

msgid ""
"Django 1.2.3 fixed a couple of release problems in the 1.2.2 release and was "
"released two days after 1.2.2."
msgstr ""
"Django 1.2.3 修复了 1.2.2 版本中的一些发布问题，并在 1.2.2 发布两天后发布。"

msgid "This release corrects the following problems:"
msgstr "此版本纠正了以下问题："

msgid ""
"The :commit:`patch <7f84657b6b2243cc787bdb9f296710c8d13ad0bd>` applied for "
"the security issue covered in Django 1.2.2 caused issues with non-ASCII "
"responses using CSRF tokens."
msgstr ""
"应用于 Django 1.2.2 中涵盖的安全问题的 :commit:`补丁 "
"<7f84657b6b2243cc787bdb9f296710c8d13ad0bd>` 导致在使用 CSRF 令牌的非 ASCII 响"
"应时出现问题。"

msgid ""
"The patch also caused issues with some forms, most notably the user-editing "
"forms in the Django administrative interface."
msgstr ""
"此补丁还导致了一些表单出现问题，尤其是 Django 管理界面中的用户编辑表单。"

msgid "The packaging manifest did not contain the full list of required files."
msgstr "打包清单中未包含所需文件的完整列表。"

msgid "Django 1.2.4 release notes"
msgstr "Django 1.2.4 版本发行说明"

msgid "Welcome to Django 1.2.4!"
msgstr "欢迎来到 Django 1.2.4 版本！"

msgid ""
"This is the fourth \"bugfix\" release in the Django 1.2 series, improving "
"the stability and performance of the Django 1.2 codebase."
msgstr ""
"这是 Django 1.2 系列中的第四个“修复错误”的版本，提高了 Django 1.2 代码库的稳"
"定性和性能。"

msgid ""
"With one exception, Django 1.2.4 maintains backwards compatibility with "
"Django 1.2.3. It also contains a number of fixes and other improvements. "
"Django 1.2.4 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.2."
msgstr ""
"除一个例外外，Django 1.2.4 保持了与 Django 1.2.3 的向后兼容性。它还包含了许多"
"修复和其他改进。对于当前使用或针对 Django 1.2 的任何开发或部署，建议升级到 "
"Django 1.2.4 。"

msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.2.4, we have made an exception to this rule."
msgstr ""
"通常情况下，一个小版本更新不会包含新功能，但在 Django 1.2.4 的情况下，我们对"
"这个规则做了一个例外。"

msgid ""
"One of the bugs fixed in Django 1.2.4 involves a set of circumstances "
"whereby a running a test suite on a multiple database configuration could "
"cause the original source database (i.e., the actual production database) to "
"be dropped, causing catastrophic loss of data. In order to provide a fix for "
"this problem, it was necessary to introduce a new setting -- :setting:"
"`TEST_DEPENDENCIES` -- that allows you to define any creation order "
"dependencies in your database configuration."
msgstr ""
"Django 1.2.4 中修复的一个 bug 涉及在多数据库配置上运行测试套件时可能导致原始"
"源数据库（即实际的生产数据库）被删除，从而导致数据灾难性丧失的一组情况。为了"
"解决这个问题，需要引入一个新的设置 -- :setting:`TEST_DEPENDENCIES` -- 允许您"
"在数据库配置中定义任何创建顺序依赖项。"

msgid ""
"Most users -- even users with multiple-database configurations -- need not "
"be concerned about the data loss bug, or the manual configuration of :"
"setting:`TEST_DEPENDENCIES`. See the :ticket:`original problem report "
"<14415>` documentation on :ref:`controlling the creation order of test "
"databases <topics-testing-creation-dependencies>` for details."
msgstr ""
"大多数用户，甚至使用多数据库配置的用户，无需担心数据丢失的 bug，也不需要手动"
"配置 :setting:`TEST_DEPENDENCIES`。有关详细信息，请参阅 :ticket:`原始问题报"
"告 <14415>` 文档中的 :ref:`控制测试数据库创建顺序 <topics-testing-creation-"
"dependencies>`。"

msgid ""
"The function-based :setting:`TEST_RUNNER` previously used to execute the "
"GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was "
"finally deprecated in favor of a class-based test runner, ``django.contrib."
"gis.tests.GeoDjangoTestSuiteRunner``, added in this release."
msgstr ""
"用于执行 GeoDjango 测试套件的基于函数的 :setting:`TEST_RUNNER`，``django."
"contrib.gis.tests.run_gis_tests``，已经被弃用，改用了一个基于类的测试运行器，"
"``django.contrib.gis.tests.GeoDjangoTestSuiteRunner``，这个变化是在这个版本中"
"添加的。"

msgid ""
"In addition, the GeoDjango test suite is now included when :ref:`running the "
"Django test suite <running-unit-tests>` with ``runtests.py`` and using :ref:"
"`spatial database backends <spatial-backends>`."
msgstr ""
"此外，在使用 ``runtests.py`` 运行  :ref:`Django 测试套件 <running-unit-"
"tests>` 并使用 :ref:`空间数据库后端 <spatial-backends>` 时，现在已经包含了 "
"GeoDjango 测试套件。"

msgid "Django 1.2.5 release notes"
msgstr "Django 1.2.5 版本发行说明"

msgid "Welcome to Django 1.2.5!"
msgstr "欢迎来到 Django 1.2.5 版本！"

msgid ""
"This is the fifth \"bugfix\" release in the Django 1.2 series, improving the "
"stability and performance of the Django 1.2 codebase."
msgstr ""
"这是 Django 1.2 系列中的第五个“修复错误”的版本，提高了 Django 1.2 代码库的稳"
"定性和性能。"

msgid ""
"With four exceptions, Django 1.2.5 maintains backwards compatibility with "
"Django 1.2.4. It also contains a number of fixes and other improvements. "
"Django 1.2.5 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.2."
msgstr ""
"除四个例外外，Django 1.2.5 保持了与 Django 1.2.4 的向后兼容性。它还包含了许多"
"修复和其他改进。对于当前使用或针对 Django 1.2 的任何开发或部署，建议升级到 "
"Django 1.2.5 。"

msgid "FileField no longer deletes files"
msgstr "FileField 不再删除文件"

msgid ""
"In earlier Django versions, when a model instance containing a :class:"
"`~django.db.models.FileField` was deleted, :class:`~django.db.models."
"FileField` took it upon itself to also delete the file from the backend "
"storage. This opened the door to several potentially serious data-loss "
"scenarios, including rolled-back transactions and fields on different models "
"referencing the same file. In Django 1.2.5, :class:`~django.db.models."
"FileField` will never delete files from the backend storage. If you need "
"cleanup of orphaned files, you'll need to handle it yourself (for instance, "
"with a custom management command that can be run manually or scheduled to "
"run periodically via e.g. cron)."
msgstr ""
"在较早的 Django 版本中，当删除包含 :class:`~django.db.models.FileField` 的模"
"型实例时，:class:`~django.db.models.FileField` 会自行从后端存储中删除文件。这"
"为几种潜在严重的数据丢失情况敞开了大门，包括回滚的事务和不同模型上的字段引用"
"相同的文件。在 Django 1.2.5 中，:class:`~django.db.models.FileField` 将永远不"
"会从后端存储中删除文件。如果需要清理孤立的文件，您需要自行处理（例如，使用一"
"个自定义的管理命令，可以手动运行或通过 cron 定期运行）。"

msgid "Use of custom SQL to load initial data in tests"
msgstr "在测试中使用自定义 SQL 加载初始数据"

msgid ""
"Django provides a custom SQL hooks as a way to inject hand-crafted SQL into "
"the database synchronization process. One of the possible uses for this "
"custom SQL is to insert data into your database. If your custom SQL contains "
"``INSERT`` statements, those insertions will be performed every time your "
"database is synchronized. This includes the synchronization of any test "
"databases that are created when you run a test suite."
msgstr ""
"Django 提供了自定义 SQL 钩子作为将手工编写的 SQL 注入到数据库同步过程中的一种"
"方式。这个自定义 SQL 的一个可能用途是将数据插入到数据库中。如果您的自定义 "
"SQL 包含 ``INSERT`` 语句，那么这些插入操作将在每次数据库同步时执行。这包括在"
"运行测试套件时创建的任何测试数据库的同步。"

msgid ""
"However, in the process of testing the Django 1.3, it was discovered that "
"this feature has never completely worked as advertised. When using database "
"backends that don't support transactions, or when using a "
"TransactionTestCase, data that has been inserted using custom SQL will not "
"be visible during the testing process."
msgstr ""
"然而，在测试 Django 1.3 的过程中，发现这个功能从未完全按照宣传的那样工作。当"
"使用不支持事务的数据库后端或使用 TransactionTestCase 时，使用自定义 SQL 插入"
"的数据在测试过程中将不可见。"

msgid ""
"Unfortunately, there was no way to rectify this problem without introducing "
"a backwards incompatibility. Rather than leave SQL-inserted initial data in "
"an uncertain state, Django now enforces the policy that data inserted by "
"custom SQL will *not* be visible during testing."
msgstr ""
"不幸的是，要纠正这个问题，没有办法不引入向后不兼容性。与其让通过自定义 SQL 插"
"入的初始数据处于不确定的状态，Django 现在强制执行一个策略，即通过自定义 SQL "
"插入的数据在测试期间将 *不* 可见。"

msgid ""
"This change only affects the testing process. You can still use custom SQL "
"to load data into your production database as part of the ``syncdb`` "
"process. If you require data to exist during test conditions, you should "
"either insert it using :ref:`test fixtures <topics-testing-fixtures>`, or "
"using the ``setUp()`` method of your test case."
msgstr ""
"这个更改只影响测试过程。您仍然可以使用自定义 SQL 在 ``syncdb`` 进程的一部分中"
"将数据加载到生产数据库中。如果您需要在测试条件下存在数据，您应该使用 :ref:`测"
"试固件 <topics-testing-fixtures>` 来插入它，或者使用您的测试用例的 "
"``setUp()`` 方法。"

msgid "ModelAdmin.lookup_allowed signature changed"
msgstr "ModelAdmin.lookup_allowed 签名已更改"

msgid ""
"Django 1.2.4 introduced a method ``lookup_allowed`` on ``ModelAdmin``, to "
"cope with a security issue (changeset :commit:`[15033] "
"<85207a245bf09fdebe486b4c7bbcb65300f2a693>`). Although this method was never "
"documented, it seems some people have overridden ``lookup_allowed``, "
"especially to cope with regressions introduced by that changeset. While the "
"method is still undocumented and not marked as stable, it may be helpful to "
"know that the signature of this function has changed."
msgstr ""
"Django 1.2.4 引入了一个名为 ``lookup_allowed`` 的方法，用于在 ``ModelAdmin`` "
"上处理一个安全问题（changeset :commit:`[15033] "
"<85207a245bf09fdebe486b4c7bbcb65300f2a693>`）。尽管这个方法从未被文档化，但似"
"乎有一些人已经重写了 ``lookup_allowed``，尤其是为了应对该 changeset 引入的回"
"归问题。虽然这个方法仍然未被文档化并且未标记为稳定，但了解该函数的签名已发生"
"变化可能会有所帮助。"

msgid "Django 1.2.6 release notes"
msgstr "Django 1.2.6 版本发行说明"

msgid "*September 9, 2011*"
msgstr "*2011 年 9 月 9 日*"

msgid "Welcome to Django 1.2.6!"
msgstr "欢迎来到 Django 1.2.6 版本！"

msgid ""
"This is the sixth bugfix/security release in the Django 1.2 series, fixing "
"several security issues present in Django 1.2.5.  Django 1.2.6 is a "
"recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""
"这是 Django 1.2 系列中的第六个修复错误/安全性发布，修复了 Django 1.2.5 中存在"
"的几个安全问题。对于 1.2.X 系列中任何 Django 版本的所有用户，建议升级到 "
"Django 1.2.6 。"

msgid ""
"For a full list of issues addressed in this release, see the `security "
"advisory`_."
msgstr "要查看此版本中解决的所有问题的完整列表，请参阅 `安全公告`_。"

msgid "Django 1.2.7 release notes"
msgstr "Django 1.2.7 版本发行说明"

msgid "*September 10, 2011*"
msgstr "*2011 年 9 月 10 日*"

msgid "Welcome to Django 1.2.7!"
msgstr "欢迎来到 Django 1.2.7 版本！"

msgid ""
"This is the seventh bugfix/security release in the Django 1.2 series. It "
"replaces Django 1.2.6 due to problems with the 1.2.6 release tarball. Django "
"1.2.7 is a recommended upgrade for all users of any Django release in the "
"1.2.X series."
msgstr ""
"这是 Django 1.2 系列中的第七个修复错误/安全性发布。由于 1.2.6 版本压缩包存在"
"问题，它取代了 Django 1.2.6 。对于 1.2.X 系列中任何 Django 版本的所有用户，建"
"议升级到 Django 1.2.7 。"

msgid "For more information, see the `release advisory`_."
msgstr "有关更多信息，请参阅 `发布公告`_。"

msgid "Django 1.3 release notes"
msgstr "Django 1.3 版本发行说明"

msgid "*March 23, 2011*"
msgstr "*2011 年 3 月 23 日*"

msgid "Welcome to Django 1.3!"
msgstr "欢迎来到 Django 1.3 版本！"

msgid ""
"Nearly a year in the making, Django 1.3 includes quite a few :ref:`new "
"features <whats-new-1.3>` and plenty of bug fixes and improvements to "
"existing features. These release notes cover the new features in 1.3, as "
"well as some :ref:`backwards-incompatible changes <backwards-incompatible-"
"changes-1.3>` you'll want to be aware of when upgrading from Django 1.2 or "
"older versions."
msgstr ""
"经过将近一年的努力，Django 1.3 包括了相当多的 :ref:`新功能 <whats-new-1.3>`，"
"以及对现有功能的大量错误修复和改进。这些发布说明涵盖了 1.3 中的新功能，以及"
"从 Django 1.2 或更早版本升级时需要注意的一些 :ref:`向后不兼容的更改 "
"<backwards-incompatible-changes-1.3>`。"

msgid ""
"Django 1.3's focus has mostly been on resolving smaller, long-standing "
"feature requests, but that hasn't prevented a few fairly significant new "
"features from landing, including:"
msgstr ""
"Django 1.3 的重点主要是解决较小的、长期存在的功能需求，但这并未阻止一些相当重"
"要的新功能的实现，包括："

msgid "A framework for writing `class-based views`_."
msgstr "一个用于编写 `基于类的视图`_ 的框架。"

msgid "Built-in support for `using Python's logging facilities`_."
msgstr "内置支持 `使用 Python 的日志记录工具`_。"

msgid "Contrib support for `easy handling of static files`_."
msgstr "为 `静态文件的简单处理`_ 提供的贡献支持。"

msgid ""
"Django's testing framework now supports (and ships with a copy of) `the "
"unittest2 library`_."
msgstr "Django 的测试框架现在支持（并随附了一份） `unittest2 库`_。"

msgid ""
"Wherever possible, new features are introduced in a backwards-compatible "
"manner per :doc:`our API stability policy </misc/api-stability>` policy. As "
"a result of this policy, Django 1.3 :ref:`begins the deprecation process for "
"some features <deprecated-features-1.3>`."
msgstr ""
"在可能的情况下，新功能都按照 :doc:`我们的 API 稳定性政策 </misc/api-"
"stability>` 以向后兼容的方式引入。由于这个政策，Django 1.3 :ref:`开始了某些功"
"能的弃用过程 <deprecated-features-1.3>`。"

msgid ""
"The release of Django 1.2 was notable for having the first shift in Django's "
"Python compatibility policy; prior to Django 1.2, Django supported any 2.x "
"version of Python from 2.3 up. As of Django 1.2, the minimum requirement was "
"raised to Python 2.4."
msgstr ""
"Django 1.2 的发布引人注目，因为它是 Django Python 兼容性政策的第一个变化；在 "
"Django 1.2 之前，Django 支持从 2.3 到任何 2.x 版本的 Python 。从 Django 1.2 "
"开始，最低要求提高到 Python 2.4 。"

msgid ""
"Django 1.3 continues to support Python 2.4, but will be the final Django "
"release series to do so; beginning with Django 1.4, the minimum supported "
"Python version will be 2.5. A document outlining our full timeline for "
"deprecating Python 2.x and moving to Python 3.x will be published shortly "
"after the release of Django 1.3."
msgstr ""
"Django 1.3 继续支持 Python 2.4，但这将是最后一个支持该版本的 Django 发布系"
"列；从 Django 1.4 开始，最低支持的 Python 版本将是 2.5 。在 Django 1.3 发布后"
"不久，我们将发布一份详细说明废弃 Python 2.x 并转向 Python 3.x 的完整时间表的"
"文档。"

msgid "What's new in Django 1.3"
msgstr "Django 1.3 新特性"

msgid "Class-based views"
msgstr "基于类的视图"

msgid ""
"Django 1.3 adds a framework that allows you to use a class as a view. This "
"means you can compose a view out of a collection of methods that can be "
"subclassed and overridden to provide common views of data without having to "
"write too much code."
msgstr ""
"Django 1.3 添加了一个框架，允许您使用类作为视图。这意味着您可以使用一组方法组"
"成一个视图，这些方法可以被子类化和重写，以提供数据的通用视图，而无需编写太多"
"代码。"

msgid ""
"Analogs of all the old function-based generic views have been provided, "
"along with a completely generic view base class that can be used as the "
"basis for reusable applications that can be easily extended."
msgstr ""
"已经提供了所有旧的基于函数的通用视图的类似物，以及一个完全通用的视图基类，可"
"以用作可重用应用程序的基础，这些应用程序可以很容易地扩展。"

msgid ""
"See :doc:`the documentation on class-based generic views</topics/class-based-"
"views/index>` for more details. There is also a document to help you "
"`convert your function-based generic views to class-based views <https://raw."
"githubusercontent.com/django/django/ea9dc9f4b03ae034c1dc080730422dda7a9c2e47/"
"docs/topics/generic-views-migration.txt>`_."
msgstr ""
"有关更多详细信息，请参阅 :doc:`关于基于类的通用视图的文档</topics/class-"
"based-views/index>`。还有一份文档可以帮助您将 `基于函数的通用视图转换为基于类"
"的视图 <https://raw.githubusercontent.com/django/django/"
"ea9dc9f4b03ae034c1dc080730422dda7a9c2e47/docs/topics/generic-views-migration."
"txt>`_。"

msgid "Logging"
msgstr "日志"

msgid ""
"Django 1.3 adds framework-level support for Python's ``logging`` module.  "
"This means you can now easily configure and control logging as part of your "
"Django project. A number of logging handlers and logging calls have been "
"added to Django's own code as well -- most notably, the error emails sent on "
"an HTTP 500 server error are now handled as a logging activity. See :doc:"
"`the documentation on Django's logging interface </topics/logging>` for more "
"details."
msgstr ""
"Django 1.3 在框架级别添加了对 Python 的 ``logging`` 模块的支持。这意味着现在"
"您可以轻松地在您的 Django 项目中配置和控制日志记录。此外，Django 的代码中还添"
"加了许多日志处理程序和日志调用，最显著的是，在发生 HTTP 500 服务器错误时发送"
"的错误邮件现在被处理为日志活动。有关更多详细信息，请参阅 :doc:`关于 Django 日"
"志记录接口的文档 </topics/logging>`。"

msgid "Extended static files handling"
msgstr "扩展静态文件处理"

msgid ""
"Django 1.3 ships with a new contrib app -- ``django.contrib.staticfiles`` -- "
"to help developers handle the static media files (images, CSS, JavaScript, "
"etc.) that are needed to render a complete web page."
msgstr ""
"Django 1.3 随附了一个新的贡献应用程序 -- ``django.contrib.staticfiles`` -- 以"
"帮助开发人员处理渲染完整网页所需的静态媒体文件（图像、CSS、JavaScript 等）。"

msgid ""
"In previous versions of Django, it was common to place static assets in :"
"setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :"
"setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` "
"app is to make it easier to keep static files separate from user-uploaded "
"files. Static assets should now go in ``static/`` subdirectories of your "
"apps or in other static assets directories listed in :setting:"
"`STATICFILES_DIRS`, and will be served at :setting:`STATIC_URL`."
msgstr ""
"在以前的 Django 版本中，通常会将静态资源与用户上传的文件一起放在 :setting:"
"`MEDIA_ROOT` 中，并同时在 :setting:`MEDIA_URL` 上提供它们。引入 "
"``staticfiles`` 应用程序的部分目的是使将静态文件与用户上传的文件分开更加容"
"易。现在，静态资源应该放在您的应用程序的 ``static/`` 子目录中或在 :setting:"
"`STATICFILES_DIRS` 中列出的其他静态资源目录中，并将在 :setting:`STATIC_URL` "
"上提供。"

msgid ""
"See the :doc:`reference documentation of the app </ref/contrib/staticfiles>` "
"for more details or learn how to :doc:`manage static files </howto/static-"
"files/index>`."
msgstr ""
"有关更多详细信息，请参阅该应用程序的 :doc:`参考文档 </ref/contrib/"
"staticfiles>` 或学习如何 :doc:`管理静态文件 </howto/static-files/index>`。"

msgid "``unittest2`` support"
msgstr "``unittest2`` 支持"

msgid ""
"Python 2.7 introduced some major changes to the ``unittest`` library, adding "
"some extremely useful features. To ensure that every Django project can "
"benefit from these new features, Django ships with a copy of :pypi:"
"`unittest2`, a copy of the Python 2.7 ``unittest`` library, backported for "
"Python 2.4 compatibility."
msgstr ""
"Python 2.7 引入了对 ``unittest`` 库的一些重大更改，添加了一些非常有用的功能。"
"为了确保每个 Django 项目都能受益于这些新功能，Django 随附了 :pypi:"
"`unittest2` 的副本，这是 Python 2.7 ``unittest`` 库的一个副本，专为 Python "
"2.4 兼容性而进行了回退。"

msgid ""
"To access this library, Django provides the ``django.utils.unittest`` module "
"alias. If you are using Python 2.7, or you have installed ``unittest2`` "
"locally, Django will map the alias to the installed version of the "
"``unittest`` library. Otherwise, Django will use its own bundled version of "
"``unittest2``."
msgstr ""
"要访问这个库，Django 提供了 ``django.utils.unittest`` 模块别名。如果您使用的"
"是 Python 2.7，或者已经在本地安装了 ``unittest2``，Django 会将别名映射到已安"
"装的 ``unittest`` 库的版本。否则，Django 将使用其自带的 ``unittest2`` 版本。"

msgid "To take advantage of this alias, simply use::"
msgstr "要利用这个别名，只需使用："

msgid "wherever you would have historically used::"
msgstr "在你过去曾经使用过的地方："

msgid ""
"If you want to continue to use the base ``unittest`` library, you can -- you "
"just won't get any of the nice new ``unittest2`` features."
msgstr ""
"如果您想继续使用基本的 ``unittest`` 库，您可以这样做，只是您将不会获得任何新"
"的 ``unittest2`` 功能。"

msgid "Transaction context managers"
msgstr "事务上下文管理器"

msgid ""
"Users of Python 2.5 and above may now use transaction management functions "
"as context managers. For example::"
msgstr ""
"Python 2.5 及以上版本的用户现在可以将事务管理函数用作上下文管理器。例如："

msgid "Configurable delete-cascade"
msgstr "可配置的级联删除"

msgid ""
":class:`~django.db.models.ForeignKey` and :class:`~django.db.models."
"OneToOneField` now accept an :attr:`~django.db.models.ForeignKey.on_delete` "
"argument to customize behavior when the referenced object is deleted. "
"Previously, deletes were always cascaded; available alternatives now include "
"set null, set default, set to any value, protect, or do nothing."
msgstr ""
":class:`~django.db.models.ForeignKey` 和 :class:`~django.db.models."
"OneToOneField` 现在接受一个 :attr:`~django.db.models.ForeignKey.on_delete` 参"
"数，用于在引用的对象被删除时自定义行为。以前，删除操作总是级联的；现在可用的"
"替代方案包括设置为 null、设置为默认值、设置为任何值、保护或不采取任何行动。"

msgid ""
"For more information, see the :attr:`~django.db.models.ForeignKey.on_delete` "
"documentation."
msgstr ""
"有关更多信息，请参阅 :attr:`~django.db.models.ForeignKey.on_delete` 的文档。"

msgid "Contextual markers and comments for translatable strings"
msgstr "可翻译字符串的上下文标记和注释"

msgid ""
"For translation strings with ambiguous meaning, you can now use the "
"``pgettext`` function to specify the context of the string."
msgstr ""
"对于具有模糊含义的翻译字符串，现在可以使用 ``pgettext`` 函数来指定字符串的上"
"下文。"

msgid ""
"And if you just want to add some information for translators, you can also "
"add special translator comments in the source."
msgstr ""
"如果你只想为翻译者添加一些信息，你还可以在源代码中添加特殊的翻译者注释。"

msgid ""
"For more information, see :ref:`contextual-markers` and :ref:`translator-"
"comments`."
msgstr "有关更多信息，请参阅 :ref:`上下文标记` 和 :ref:`翻译者注释`。"

msgid "Improvements to built-in template tags"
msgstr "内置模板标签的改进"

msgid ""
"A number of improvements have been made to Django's built-in template tags:"
msgstr "对 Django 内置模板标签进行了一些改进："

msgid ""
"The :ttag:`include` tag now accepts a ``with`` option, allowing you to "
"specify context variables to the included template"
msgstr ""
":ttag:`include` 标签现在接受一个 ``with`` 选项，允许您指定要传递给包含的模板"
"的上下文变量。"

msgid ""
"The :ttag:`include` tag now accepts an ``only`` option, allowing you to "
"exclude the current context from the included context"
msgstr ""
":ttag:`include` 标签现在接受一个 ``only`` 选项，允许您将当前上下文从包含的上"
"下文中排除在外。"

msgid ""
"The :ttag:`with` tag now allows you to define multiple context variables in "
"a single :ttag:`with` block."
msgstr ""
":ttag:`with` 标签现在允许您在单个 :ttag:`with` 块中定义多个上下文变量。"

msgid ""
"The :ttag:`load` tag now accepts a ``from`` argument, allowing you to load a "
"single tag or filter from a library."
msgstr ""
":ttag:`load` 标签现在接受一个 ``from`` 参数，允许您从一个库中加载单个标签或过"
"滤器。"

msgid "TemplateResponse"
msgstr "模板响应"

msgid ""
"It can sometimes be beneficial to allow decorators or middleware to modify a "
"response *after* it has been constructed by the view. For example, you may "
"want to change the template that is used, or put additional data into the "
"context."
msgstr ""
"有时允许装饰器或中间件在视图构建响应之后修改响应可能是有益的。例如，您可能希"
"望更改所使用的模板，或将额外的数据放入上下文中。"

msgid ""
"However, you can't (easily) modify the content of a basic :class:`~django."
"http.HttpResponse` after it has been constructed. To overcome this "
"limitation, Django 1.3 adds a new :class:`~django.template.response."
"TemplateResponse` class. Unlike basic :class:`~django.http.HttpResponse` "
"objects, :class:`~django.template.response.TemplateResponse` objects retain "
"the details of the template and context that was provided by the view to "
"compute the response. The final output of the response is not computed until "
"it is needed, later in the response process."
msgstr ""
"然而，您不能（轻松地）在构建后修改基本的 :class:`~django.http.HttpResponse` "
"内容。为了克服这个限制，Django 1.3 添加了一个新的 :class:`~django.template."
"response.TemplateResponse` 类。与基本的 :class:`~django.http.HttpResponse` 对"
"象不同，:class:`~django.template.response.TemplateResponse` 对象保留了视图提"
"供的模板和上下文的详细信息，以计算响应。响应的最终输出直到后面的响应过程中才"
"会计算。"

msgid ""
"For more details, see the :doc:`documentation </ref/template-response>` on "
"the :class:`~django.template.response.TemplateResponse` class."
msgstr ""
"有关更多详细信息，请参阅 :class:`~django.template.response.TemplateResponse` "
"类的 :doc:`文档 </ref/template-response>`。"

msgid "Caching changes"
msgstr "缓存更改"

msgid ""
"Django 1.3 sees the introduction of several improvements to the Django's "
"caching infrastructure."
msgstr "Django 1.3 引入了对 Django 缓存基础设施的若干改进。"

msgid ""
"Firstly, Django now supports multiple named caches. In the same way that "
"Django 1.2 introduced support for multiple database connections, Django 1.3 "
"allows you to use the new :setting:`CACHES` setting to define multiple named "
"cache connections."
msgstr ""
"首先，Django 现在支持多个命名缓存。与 Django 1.2 引入多个数据库连接支持的方式"
"类似，Django 1.3 允许您使用新的 :setting:`CACHES` 设置来定义多个命名的缓存连"
"接。"

msgid ""
"Secondly, :ref:`versioning <cache_versioning>`, :ref:`site-wide prefixing "
"<cache_key_prefixing>` and :ref:`transformation <cache_key_transformation>` "
"have been added to the cache API."
msgstr ""
"其次，缓存 API 中添加了 :ref:`版本化 <cache_versioning>`、:ref:`站点范围的前"
"缀 <cache_key_prefixing>` 和 :ref:`转换 <cache_key_transformation>` 功能。"

msgid ""
"Thirdly, :ref:`cache key creation <using-vary-headers>` has been updated to "
"take the request query string into account on ``GET`` requests."
msgstr ""
"第三，已更新 :ref:`缓存键创建 <using-vary-headers>`，以考虑 ``GET`` 请求中的"
"请求查询字符串。"

msgid ""
"Finally, support for pylibmc_ has been added to the memcached cache backend."
msgstr "最后，已经将对 pylibmc_ 的支持添加到了 memcached 缓存后端。"

msgid ""
"For more details, see the :doc:`documentation on caching in Django</topics/"
"cache>`."
msgstr "有关更多详细信息，请参阅 :doc:`Django 中的缓存文档 </topics/cache>`。"

msgid "Permissions for inactive users"
msgstr "对非活跃用户的权限"

msgid ""
"If you provide a custom auth backend with ``supports_inactive_user`` set to "
"``True``, an inactive ``User`` instance will check the backend for "
"permissions.  This is useful for further centralizing the permission "
"handling. See the :doc:`authentication docs </topics/auth/index>` for more "
"details."
msgstr ""
"如果您提供一个自定义的身份验证后端，并将 ``supports_inactive_user`` 设置为 "
"``True``，则不活动的 ``User`` 实例将检查后端以获取权限。这对于进一步集中权限"
"处理非常有用。有关更多详细信息，请参阅 :doc:`身份验证文档 </topics/auth/"
"index>`。"

msgid ""
"The GeoDjango test suite is now included when :ref:`running the Django test "
"suite <running-unit-tests>` with ``runtests.py`` when using :ref:`spatial "
"database backends <spatial-backends>`."
msgstr ""
"使用 :ref:`空间数据库后端 <spatial-backends>` 来 :ref:`运行 Django 测试套件 "
"<running-unit-tests>` 时，GeoDjango 测试套件现在已包含在 ``runtests.py`` 中。"

msgid ":setting:`MEDIA_URL` and :setting:`STATIC_URL` must end in a slash"
msgstr ":setting:`MEDIA_URL` 和 :setting:`STATIC_URL` 必须以斜杠结尾。"

msgid ""
"Previously, the :setting:`MEDIA_URL` setting only required a trailing slash "
"if it contained a suffix beyond the domain name."
msgstr ""
"之前，:setting:`MEDIA_URL` 设置只有在包含域名之后的后缀时才需要一个尾随斜杠。"

msgid ""
"A trailing slash is now *required* for :setting:`MEDIA_URL` and the new :"
"setting:`STATIC_URL` setting as long as it is not blank. This ensures there "
"is a consistent way to combine paths in templates."
msgstr ""
"现在，只要不是空白的情况下，:setting:`MEDIA_URL` 和新的 :setting:"
"`STATIC_URL` 设置都需要一个尾随斜杠。这确保了在模板中组合路径的一致方式。"

msgid ""
"Project settings which provide either of both settings without a trailing "
"slash will now raise a ``PendingDeprecationWarning``."
msgstr ""
"提供了没有尾随斜杠的任何一个或两个设置的项目设置现在会引发一个 "
"``PendingDeprecationWarning``。"

msgid ""
"In Django 1.4 this same condition will raise ``DeprecationWarning``, and in "
"Django 1.5 will raise an ``ImproperlyConfigured`` exception."
msgstr ""
"在 Django 1.4 中，相同的条件将引发 ``DeprecationWarning``，而在 Django 1.5 中"
"将引发 ``ImproperlyConfigured`` 异常。"

msgid "Everything else"
msgstr "其他所有内容"

msgid ""
"Django :doc:`1.1 <1.1>` and :doc:`1.2 <1.2>` added lots of big ticket items "
"to Django, like multiple-database support, model validation, and a session-"
"based messages framework. However, this focus on big features came at the "
"cost of lots of smaller features."
msgstr ""
"Django :doc:`1.1 <1.1>` 和 :doc:`1.2 <1.2>` 在 Django 中引入了许多重要的功"
"能，如多数据库支持、模型验证和基于会话的消息框架。然而，这种对重要功能的关注"
"也导致了许多较小功能的牺牲。"

msgid ""
"To compensate for this, the focus of the Django 1.3 development process has "
"been on adding lots of smaller, long standing feature requests. These "
"include:"
msgstr ""
"为了弥补这一点，Django 1.3 开发过程的重点是添加许多较小的、长期存在的功能需"
"求。这些包括："

msgid ""
"Improved tools for accessing and manipulating the current :class:`~django."
"contrib.sites.models.Site` object in :doc:`the sites framework </ref/contrib/"
"sites>`."
msgstr ""
"在 :doc:`站点框架 </ref/contrib/sites>` 中，改进了访问和操作当前 :class:"
"`~django.contrib.sites.models.Site` 对象的工具。"

msgid "A :class:`~django.test.RequestFactory` for mocking requests in tests."
msgstr "在测试中用于模拟请求的 :class:`~django.test.RequestFactory`。"

msgid ""
"A new test assertion -- :meth:`~django.test.TransactionTestCase."
"assertNumQueries` -- making it easier to test the database activity "
"associated with a view."
msgstr ""
"一个新的测试断言 -- :meth:`~django.test.TransactionTestCase."
"assertNumQueries` -- 使得更容易测试与视图相关的数据库活动。"

msgid ""
"Support for lookups spanning relations in admin's :attr:`~django.contrib."
"admin.ModelAdmin.list_filter`."
msgstr ""
"在管理员的 :attr:`~django.contrib.admin.ModelAdmin.list_filter` 中支持跨关系"
"的查询。"

msgid "Support for HttpOnly_ cookies."
msgstr "支持 HttpOnly_ cookies。"

msgid ""
":meth:`~django.core.mail.mail_admins()` and :meth:`~django.core.mail."
"mail_managers()` now support easily attaching HTML content to messages."
msgstr ""
"现在，:meth:`~django.core.mail.mail_admins()` 和 :meth:`~django.core.mail."
"mail_managers()` 支持轻松附加 HTML 内容到消息中。"

msgid ":class:`~django.core.mail.EmailMessage` now supports CC's."
msgstr ":class:`~django.core.mail.EmailMessage` 现在支持抄送 (CC)。"

msgid ""
"Error emails now include more of the detail and formatting of the debug "
"server error page."
msgstr "错误邮件现在包含了更多关于调试服务器错误页面的详细信息和格式。"

msgid ""
":meth:`~django.template.Library.simple_tag` now accepts a ``takes_context`` "
"argument, making it easier to write simple template tags that require access "
"to template context."
msgstr ""
":meth:`~django.template.Library.simple_tag` 现在接受一个 ``takes_context`` 参"
"数，这使得编写需要访问模板上下文的简单模板标签变得更加容易。"

msgid ""
"A new :meth:`~django.shortcuts.render()` shortcut -- an alternative to "
"``django.shortcuts.render_to_response()`` providing a :class:`~django."
"template.RequestContext` by default."
msgstr ""
"一个新的 :meth:`~django.shortcuts.render()` 快捷方式 -- 作为 ``django."
"shortcuts.render_to_response()`` 的替代，默认提供一个 :class:`~django."
"template.RequestContext`。"

msgid ""
"Support for combining :class:`F expressions <django.db.models.F>` with "
"``timedelta`` values when retrieving or updating database values."
msgstr ""
"支持在检索或更新数据库值时将 :class:`F 表达式 <django.db.models.F>` 与 "
"``timedelta`` 值组合使用。"

msgid "Backwards-incompatible changes in 1.3"
msgstr "1.3 中的向后不兼容更改"

msgid "CSRF validation now applies to AJAX requests"
msgstr "CSRF 验证现在适用于 AJAX 请求"

msgid ""
"Prior to Django 1.2.5, Django's CSRF-prevention system exempted AJAX "
"requests from CSRF verification; due to `security issues`_ reported to us, "
"however, *all* requests are now subjected to CSRF verification. Consult :doc:"
"`the Django CSRF documentation </ref/csrf>` for details on how to handle "
"CSRF verification in AJAX requests."
msgstr ""
"在 Django 1.2.5 之前，Django 的 CSRF 预防系统豁免了 AJAX 请求的 CSRF 验证；然"
"而，由于我们收到的有关 `安全问题`_ 的报告，现在 *所有* 请求都需要进行 CSRF 验"
"证。请参考 :doc:`Django CSRF 文档 </ref/csrf>` 以获取有关如何处理 AJAX 请求中"
"的 CSRF 验证的详细信息。"

msgid ""
"Prior to Django 1.2.5, the Django administrative interface allowed filtering "
"on any model field or relation -- not just those specified in "
"``list_filter`` -- via query string manipulation. Due to security issues "
"reported to us, however, query string lookup arguments in the admin must be "
"for fields or relations specified in ``list_filter`` or ``date_hierarchy``."
msgstr ""
"在 Django 1.2.5 之前，Django 管理界面允许通过查询字符串操作对任何模型字段或关"
"系进行过滤，而不仅仅是那些在 ``list_filter`` 中指定的字段。然而，由于我们收到"
"的有关安全问题的报告，现在在管理界面中的查询字符串查找参数必须是在 "
"``list_filter`` 或 ``date_hierarchy`` 中指定的字段或关系。"

msgid "Deleting a model doesn't delete associated files"
msgstr "删除模型不会删除关联的文件"

msgid ""
"In earlier Django versions, when a model instance containing a :class:"
"`~django.db.models.FileField` was deleted, :class:`~django.db.models."
"FileField` took it upon itself to also delete the file from the backend "
"storage. This opened the door to several data-loss scenarios, including "
"rolled-back transactions and fields on different models referencing the same "
"file. In Django 1.3, when a model is deleted the :class:`~django.db.models."
"FileField`’s ``delete()`` method won't be called. If you need cleanup of "
"orphaned files, you'll need to handle it yourself (for instance, with a "
"custom management command that can be run manually or scheduled to run "
"periodically via e.g. cron)."
msgstr ""
"在早期的 Django 版本中，当删除包含 :class:`~django.db.models.FileField` 的模"
"型实例时，:class:`~django.db.models.FileField` 会自行从后端存储中删除文件。这"
"打开了许多数据丢失的可能性，包括已回滚的事务以及不同模型上的字段引用相同的文"
"件。在 Django 1.3 中，当删除模型时，不会调用 :class:`~django.db.models."
"FileField` 的 ``delete()`` 方法。如果需要清理孤立的文件，您需要自行处理它（例"
"如，使用自定义管理命令，可以手动运行或通过 cron 等定期运行）。"

msgid "PasswordInput default rendering behavior"
msgstr "PasswordInput 默认渲染行为"

msgid ""
"The :class:`~django.forms.PasswordInput` form widget, intended for use with "
"form fields which represent passwords, accepts a boolean keyword argument "
"``render_value`` indicating whether to send its data back to the browser "
"when displaying a submitted form with errors. Prior to Django 1.3, this "
"argument defaulted to ``True``, meaning that the submitted password would be "
"sent back to the browser as part of the form. Developers who wished to add a "
"bit of additional security by excluding that value from the redisplayed form "
"could instantiate a :class:`~django.forms.PasswordInput` passing "
"``render_value=False`` ."
msgstr ""
":class:`~django.forms.PasswordInput` 表单小部件，用于表示密码的表单字段，接受"
"一个布尔关键字参数 ``render_value``，指示在显示带有错误的提交表单时是否将其数"
"据发送回浏览器。在 Django 1.3 之前，这个参数的默认值是 ``True``，这意味着提交"
"的密码将作为表单的一部分发送回浏览器。希望通过将该值从重新显示的表单中排除以"
"增加一些额外安全性的开发人员可以实例化一个 :class:`~django.forms."
"PasswordInput` 并传递 ``render_value=False``。"

msgid ""
"Due to the sensitive nature of passwords, however, Django 1.3 takes this "
"step automatically; the default value of ``render_value`` is now ``False``, "
"and developers who want the password value returned to the browser on a "
"submission with errors (the previous behavior) must now explicitly indicate "
"this. For example::"
msgstr ""
"然而，由于密码的敏感性质，Django 1.3 现在会自动采取这一步骤；"
"``render_value`` 的默认值现在为 ``False``，希望在出现错误的情况下将密码值返回"
"到浏览器的开发人员（以前的行为）现在必须明确指出这一点。例如："

msgid "Clearable default widget for FileField"
msgstr "FileField 的可清除默认小部件"

msgid ""
"Django 1.3 now includes a :class:`~django.forms.ClearableFileInput` form "
"widget in addition to :class:`~django.forms.FileInput`. "
"``ClearableFileInput`` renders with a checkbox to clear the field's value "
"(if the field has a value and is not required); ``FileInput`` provided no "
"means for clearing an existing file from a ``FileField``."
msgstr ""
"Django 1.3 现在除了 :class:`~django.forms.FileInput` 外还包括一个 :class:"
"`~django.forms.ClearableFileInput` 表单小部件。``ClearableFileInput`` 渲染时"
"包含一个清除字段值的复选框（如果字段有值且不是必需的）；而 ``FileInput`` 无法"
"清除 ``FileField`` 中的现有文件。"

msgid ""
"``ClearableFileInput`` is now the default widget for a ``FileField``, so "
"existing forms including ``FileField`` without assigning a custom widget "
"will need to account for the possible extra checkbox in the rendered form "
"output."
msgstr ""
"``ClearableFileInput`` 现在是 ``FileField`` 的默认小部件，因此包含 "
"``FileField`` 的现有表单如果没有分配自定义小部件，需要考虑在渲染的表单输出中"
"可能会出现额外的复选框。"

msgid ""
"To return to the previous rendering (without the ability to clear the "
"``FileField``), use the ``FileInput`` widget in place of "
"``ClearableFileInput``. For instance, in a ``ModelForm`` for a hypothetical "
"``Document`` model with a ``FileField`` named ``document``::"
msgstr ""
"要返回到以前的渲染方式（不具备清除 ``FileField`` 的能力），可以在 "
"``ClearableFileInput`` 的位置使用 ``FileInput`` 小部件。例如，在假设有一个名"
"为 ``document`` 的 ``FileField`` 的假设 ``Document`` 模型的 ``ModelForm`` "
"中："

msgid "New index on database session table"
msgstr "数据库会话表上的新索引"

msgid ""
"Prior to Django 1.3, the database table used by the database backend for "
"the :doc:`sessions </topics/http/sessions>` app had no index on the "
"``expire_date`` column. As a result, date-based queries on the session table "
"-- such as the query that is needed to purge old sessions -- would be very "
"slow if there were lots of sessions."
msgstr ""
"在 Django 1.3 之前，数据库后端用于 :doc:`sessions </topics/http/sessions>` 应"
"用的数据库表上没有对 ``expire_date`` 列创建索引。因此，如果有大量会话，对会话"
"表的日期查询（例如清除旧会话所需的查询）会非常慢。"

msgid ""
"If you have an existing project that is using the database session backend, "
"you don't have to do anything to accommodate this change. However, you may "
"get a significant performance boost if you manually add the new index to the "
"session table. The SQL that will add the index can be found by running the "
"``sqlindexes`` admin command:"
msgstr ""
"如果您有一个已经在使用数据库会话后端的现有项目，您无需采取任何措施来适应此更"
"改。但是，如果您手动将新索引添加到会话表中，可能会显著提高性能。可以通过运行 "
"``sqlindexes`` 管理命令来找到添加索引的 SQL："

msgid "No more naughty words"
msgstr "不再有不雅词汇"

msgid ""
"Django has historically provided (and enforced) a list of profanities. The "
"comments app has enforced this list of profanities, preventing people from "
"submitting comments that contained one of those profanities."
msgstr ""
"Django 历史上提供了（并执行了）一份不雅词汇列表。评论应用程序已经执行了这个不"
"雅词汇列表，防止人们提交包含这些不雅词汇之一的评论。"

msgid ""
"Unfortunately, the technique used to implement this profanities list was "
"woefully naive, and prone to the `Scunthorpe problem`_. Improving the built-"
"in filter to fix this problem would require significant effort, and since "
"natural language processing isn't the normal domain of a web framework, we "
"have \"fixed\" the problem by making the list of prohibited words an empty "
"list."
msgstr ""
"不幸的是，用于实现这个粗话列表的技术非常天真，并容易受到 `斯肯索普问题`_ 的影"
"响。要改进内置的过滤器以解决这个问题需要很大的努力，而且由于自然语言处理不是"
"一个 Web 框架的正常领域，我们通过将禁止使用的单词列表设置为空来“解决”了这个问"
"题。"

msgid ""
"If you want to restore the old behavior, simply put a ``PROFANITIES_LIST`` "
"setting in your settings file that includes the words that you want to "
"prohibit (see the :commit:`commit that implemented this change "
"<edd767d2612d891a906268cf590571f541dd164f>` if you want to see the list of "
"words that was historically prohibited). However, if avoiding profanities is "
"important to you, you would be well advised to seek out a better, less naive "
"approach to the problem."
msgstr ""
"如果您想恢复旧的行为，只需在您的设置文件中设置一个包含您要禁止的单词的 "
"``PROFANITIES_LIST`` 设置（如果您想查看历史上被禁止的单词列表，请参考 :"
"commit:`实施这个更改的提交 <edd767d2612d891a906268cf590571f541dd164f>`）。然"
"而，如果避免粗话对您很重要，建议您寻找一个更好、不那么天真的解决方法来解决这"
"个问题。"

msgid "Localflavor changes"
msgstr "Localflavor 更改"

msgid ""
"Django 1.3 introduces the following backwards-incompatible changes to local "
"flavors:"
msgstr "Django 1.3 引入了以下对本地风格的向后不兼容的更改："

msgid ""
"Canada (ca) -- The province \"Newfoundland and Labrador\" has had its "
"province code updated to \"NL\", rather than the older \"NF\". In addition, "
"the Yukon Territory has had its province code corrected to \"YT\", instead "
"of \"YK\"."
msgstr ""
"加拿大（ca）- 省份“纽芬兰与拉布拉多”已将其省份代码更新为“NL”，而不是较旧"
"的“NF”。此外，育空地区的省份代码已更正为“YT”，而不是“YK”。"

msgid ""
"Indonesia (id) -- The province \"Nanggroe Aceh Darussalam (NAD)\" has been "
"removed from the province list in favor of the new official designation "
"\"Aceh (ACE)\"."
msgstr ""
"印度尼西亚（id）- 省份“ Nanggroe Aceh Darussalam (NAD)”已从省份列表中移除，转"
"而使用新的官方名称“ Aceh (ACE)”。"

msgid ""
"United States of America (us) -- The list of \"states\" used by "
"``USStateField`` has expanded to include Armed Forces postal codes. This is "
"backwards-incompatible if you were relying on ``USStateField`` not including "
"them."
msgstr ""
"美利坚合众国（us）-- 由 ``USStateField`` 使用的“州”列表已扩展，包括了武装部队"
"的邮政编码。如果您依赖于 ``USStateField`` 不包括它们，这将是不兼容的。"

msgid "FormSet updates"
msgstr "FormSet 更新"

msgid ""
"In Django 1.3 ``FormSet`` creation behavior is modified slightly. "
"Historically the class didn't make a distinction between not being passed "
"data and being passed empty dictionary. This was inconsistent with behavior "
"in other parts of the framework. Starting with 1.3 if you pass in empty "
"dictionary the ``FormSet`` will raise a ``ValidationError``."
msgstr ""
"在 Django 1.3 中，``FormSet`` 的创建行为略有修改。在历史上，该类没有区分未传"
"递数据和传递空字典之间的区别。这与框架的其他部分的行为不一致。从1.3版本开始，"
"如果传递空字典，``FormSet`` 将引发 ``ValidationError``。"

msgid "For example with a ``FormSet``:"
msgstr "例如，使用一个 ``FormSet``："

msgid "the following code will raise a ``ValidationError``:"
msgstr "以下代码将引发 ``ValidationError``："

msgid ""
"if you need to instantiate an empty ``FormSet``, don't pass in the data or "
"use ``None``:"
msgstr "如果需要实例化一个空的 ``FormSet``，不要传递数据或使用 ``None``："

msgid "Callables in templates"
msgstr "模板中的可调用对象"

msgid ""
"Previously, a callable in a template would only be called automatically as "
"part of the variable resolution process if it was retrieved via attribute "
"lookup. This was an inconsistency that could result in confusing and "
"unhelpful behavior:"
msgstr ""
"以前，在模板中的可调用对象只有在通过属性查找检索时才会作为变量解析过程的一部"
"分自动调用。这是一个不一致的地方，可能导致令人困惑和无益的行为："

msgid ""
"This has been resolved in Django 1.3 - the result in both cases will be "
"``u'Joe Bloggs'``. Although the previous behavior was not useful for a "
"template language designed for web designers, and was never deliberately "
"supported, it is possible that some templates may be broken by this change."
msgstr ""
"这在 Django 1.3 中已经解决了 - 在这两种情况下的结果都将是 ``u'Joe Bloggs'``。"
"尽管先前的行为对于为网页设计师设计的模板语言来说并不实用，也从未有意支持，但"
"有可能一些模板可能会因此更改而中断。"

msgid "Changed priority of translation loading"
msgstr "改变了翻译加载的优先级"

msgid ""
"Work has been done to simplify, rationalize and properly document the "
"algorithm used by Django at runtime to build translations from the different "
"translations found on disk, namely:"
msgstr ""
"已经进行了工作，以简化、合理化并正确记录 Django 在运行时用于从磁盘上找到的不"
"同翻译中构建翻译的算法，即："

msgid ""
"For translatable literals found in Python code and templates (``'django'`` "
"gettext domain):"
msgstr ""
"对于在 Python 代码和模板中找到的可翻译字面值（``'django'`` gettext 域）："

msgid ""
"Priorities of translations included with applications listed in the :setting:"
"`INSTALLED_APPS` setting were changed. To provide a behavior consistent with "
"other parts of Django that also use such setting (templates, etc.) now, when "
"building the translation that will be made available, the apps listed first "
"have higher precedence than the ones listed later."
msgstr ""
"在 :setting:`INSTALLED_APPS` 设置中列出的应用程序包含的翻译的优先级发生了变"
"化。为了与 Django 的其他部分（例如模板等）使用的类似设置行为保持一致，现在在"
"构建将要提供的翻译时，首先列出的应用程序比后面列出的应用程序具有更高的优先"
"级。"

msgid ""
"Now it is possible to override the translations shipped with applications by "
"using the :setting:`LOCALE_PATHS` setting whose translations have now higher "
"precedence than the translations of :setting:`INSTALLED_APPS` applications. "
"The relative priority among the values listed in this setting has also been "
"modified so the paths listed first have higher precedence than the ones "
"listed later."
msgstr ""
"现在可以使用 :setting:`LOCALE_PATHS` 设置来覆盖应用程序中附带的翻译，这些翻译"
"的优先级高于 :setting:`INSTALLED_APPS` 应用程序的翻译。此设置中列出的值之间的"
"相对优先级也已经修改，因此首先列出的路径比后面列出的路径具有更高的优先级。"

msgid ""
"The ``locale`` subdirectory of the directory containing the settings, that "
"usually coincides with and is known as the *project directory* is being "
"deprecated in this release as a source of translations. (the precedence of "
"these translations is intermediate between applications and :setting:"
"`LOCALE_PATHS` translations). See the `corresponding deprecated features "
"section`_ of this document."
msgstr ""
"在这个版本中，包含设置的目录的 ``locale`` 子目录，通常与项目目录重合并被称为 "
"*项目目录*，被弃用为翻译的来源。（这些翻译的优先级介于应用程序和 :setting:"
"`LOCALE_PATHS` 翻译之间）。请参阅本文档的 `相应弃用功能部分`_。"

msgid ""
"For translatable literals found in JavaScript code (``'djangojs'`` gettext "
"domain):"
msgstr ""
"对于在 JavaScript 代码中找到的可翻译字面值（``'djangojs'`` gettext 域）："

msgid ""
"Similarly to the ``'django'`` domain translations: Overriding of "
"translations shipped with applications by using the :setting:`LOCALE_PATHS` "
"setting is now possible for this domain too. These translations have higher "
"precedence than the translations of Python packages passed to the "
"``javascript_catalog()`` view. Paths listed first have higher precedence "
"than the ones listed later."
msgstr ""
"与 ``'django'`` 域的翻译类似：现在也可以使用 :setting:`LOCALE_PATHS` 设置来覆"
"盖应用程序中附带的 JavaScript 代码的翻译。这些翻译的优先级高于传递给 "
"``javascript_catalog()`` 视图的 Python 包的翻译。首先列出的路径比后面列出的路"
"径具有更高的优先级。"

msgid ""
"Translations under the ``locale`` subdirectory of the *project directory* "
"have never been taken in account for JavaScript translations and remain in "
"the same situation considering the deprecation of such location."
msgstr ""
"位于 *项目目录* 的 ``locale`` 子目录下的 JavaScript 翻译从未被考虑过，考虑到"
"这个位置的弃用，它们将保持不变。"

msgid "Transaction management"
msgstr "事务管理"

msgid ""
"When using managed transactions -- that is, anything but the default "
"autocommit mode -- it is important when a transaction is marked as "
"\"dirty\". Dirty transactions are committed by the ``commit_on_success`` "
"decorator or the ``django.middleware.transaction.TransactionMiddleware``, "
"and ``commit_manually`` forces them to be closed explicitly; clean "
"transactions \"get a pass\", which means they are usually rolled back at the "
"end of a request when the connection is closed."
msgstr ""
"在使用托管事务时 -- 也就是说，除了默认的自动提交模式之外的任何情况 -- 当一个"
"事务被标记为“脏”时非常重要。脏事务将由 ``commit_on_success`` 装饰器或 "
"``django.middleware.transaction.TransactionMiddleware`` 提交，并且 "
"``commit_manually`` 强制将它们明确关闭；干净的事务“得到允许”，这意味着它们通"
"常在请求结束时在连接关闭时回滚。"

msgid ""
"Until Django 1.3, transactions were only marked dirty when Django was aware "
"of a modifying operation performed in them; that is, either some model was "
"saved, some bulk update or delete was performed, or the user explicitly "
"called ``transaction.set_dirty()``. In Django 1.3, a transaction is marked "
"dirty when *any* database operation is performed."
msgstr ""
"在 Django 1.3 之前，只有在 Django 察觉到在事务中执行了修改操作时，事务才会被"
"标记为脏事务；也就是说，要么保存了某个模型，要么执行了某个批量更新或删除操"
"作，要么用户显式调用了 ``transaction.set_dirty()``。在 Django 1.3 中，只要执"
"行了 *任何* 数据库操作，事务就会被标记为脏事务。"

msgid ""
"As a result of this change, you no longer need to set a transaction dirty "
"explicitly when you execute raw SQL or use a data-modifying ``SELECT``. "
"However, you *do* need to explicitly close any read-only transactions that "
"are being managed using ``commit_manually()``. For example::"
msgstr ""
"由于这个改变，当执行原始 SQL 或使用修改数据的 ``SELECT`` 时，您不再需要显式设"
"置事务为脏事务。然而，您需要显式关闭任何使用 ``commit_manually()`` 管理的只读"
"事务。例如："

msgid ""
"Prior to Django 1.3, this would work without error. However, under Django "
"1.3, this will raise a :class:`~django.db.transaction."
"TransactionManagementError` because the read operation that retrieves the "
"``MyObject`` instance leaves the transaction in a dirty state."
msgstr ""
"在 Django 1.3 之前，这将不会出错。然而，在 Django 1.3 下，这将引发一个 :"
"class:`~django.db.transaction.TransactionManagementError`，因为检索 "
"``MyObject`` 实例的读操作将事务留在了脏状态。"

msgid "No password reset for inactive users"
msgstr "不允许非活跃用户重置密码"

msgid ""
"Prior to Django 1.3, inactive users were able to request a password reset "
"email and reset their password. In Django 1.3 inactive users will receive "
"the same message as a nonexistent account."
msgstr ""
"在 Django 1.3 之前，非活跃用户可以请求发送密码重置邮件并重置密码。而在 "
"Django 1.3 中，非活跃用户将收到与不存在的帐户相同的消息。"

msgid "Password reset view now accepts ``from_email``"
msgstr "密码重置视图现在接受 ``from_email`` 参数。"

msgid ""
"The ``django.contrib.auth.views.password_reset()`` view now accepts a "
"``from_email`` parameter, which is passed to the ``password_reset_form``’s "
"``save()`` method as a keyword argument. If you are using this view with a "
"custom password reset form, then you will need to ensure your form's "
"``save()`` method accepts this keyword argument."
msgstr ""
"``django.contrib.auth.views.password_reset()`` 视图现在接受一个 "
"``from_email`` 参数，该参数将作为关键字参数传递给 ``password_reset_form`` 的 "
"``save()`` 方法。如果您正在使用自定义密码重置表单与此视图，则需要确保您表单"
"的 ``save()`` 方法接受这个关键字参数。"

msgid "Features deprecated in 1.3"
msgstr "在 1.3 中被废弃的功能"

msgid ""
"Django 1.3 deprecates some features from earlier releases. These features "
"are still supported, but will be gradually phased out over the next few "
"release cycles."
msgstr ""
"Django 1.3 弃用了一些早期版本的功能。这些功能仍然受支持，但将在接下来的几个发"
"布周期内逐步淘汰。"

msgid ""
"Code taking advantage of any of the features below will raise a "
"``PendingDeprecationWarning`` in Django 1.3. This warning will be silent by "
"default, but may be turned on using Python's :mod:`warnings` module, or by "
"running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""
"使用以下任何特性的代码将在 Django 1.3 中引发 ``PendingDeprecationWarning``。"
"默认情况下，此警告是静默的，但可以使用 Python 的 :mod:`warnings` 模块打开，或"
"者通过在运行 Python 时使用 ``-Wd`` 或 ``-Wall`` 标志来打开。"

msgid ""
"In Django 1.4, these warnings will become a ``DeprecationWarning``, which is "
"*not* silent. In Django 1.5 support for these features will be removed "
"entirely."
msgstr ""
"在 Django 1.4 中，这些警告将变成 ``DeprecationWarning``，它是 *不* 静默的。"
"在 Django 1.5 中，将完全删除对这些特性的支持。"

msgid ""
"For more details, see the documentation :doc:`Django's release process </"
"internals/release-process>` and our :doc:`deprecation timeline </internals/"
"deprecation>`."
msgstr ""
"有关更多详细信息，请参阅文档 :doc:`Django 的发布流程 </internals/release-"
"process>` 和我们的 :doc:`弃用时间表 </internals/deprecation>`。"

msgid "``mod_python`` support"
msgstr "``mod_python`` 支持"

msgid ""
"The ``mod_python`` library has not had a release since 2007 or a commit "
"since 2008. The Apache Foundation board voted to remove ``mod_python`` from "
"the set of active projects in its version control repositories, and its lead "
"developer has shifted all of his efforts toward the lighter, slimmer, more "
"stable, and more flexible ``mod_wsgi`` backend."
msgstr ""
"``mod_python`` 库自 2007 年以来没有发布过新版本，自 2008 年以来也没有提交。"
"Apache 基金会董事会投票决定将 ``mod_python`` 从其版本控制存储库的活动项目集中"
"删除，其主要开发人员已将所有工作重心转向了更轻巧、更稳定、更灵活的 "
"``mod_wsgi`` 后端。"

msgid ""
"If you are currently using the ``mod_python`` request handler, you should "
"redeploy your Django projects using another request handler. :doc:`mod_wsgi "
"</howto/deployment/wsgi/modwsgi>` is the request handler recommended by the "
"Django project, but FastCGI is also supported. Support for ``mod_python`` "
"deployment will be removed in Django 1.5."
msgstr ""
"如果您当前使用的是 ``mod_python`` 请求处理程序，您应该重新部署您的 Django 项"
"目，使用其他请求处理程序。Django 项目推荐使用的请求处理程序是 :doc:`mod_wsgi "
"</howto/deployment/wsgi/modwsgi>`，但也支持 FastCGI。对于 ``mod_python`` 部署"
"的支持将在 Django 1.5 中被移除。"

msgid "Function-based generic views"
msgstr "基于函数的通用视图"

msgid ""
"As a result of the introduction of class-based generic views, the function-"
"based generic views provided by Django have been deprecated. The following "
"modules and the views they contain have been deprecated:"
msgstr ""
"由于引入了基于类的通用视图，Django 提供的基于函数的通用视图已被弃用。以下模块"
"及其包含的视图已被弃用："

msgid "``django.views.generic.create_update``"
msgstr "``django.views.generic.create_update``"

msgid "``django.views.generic.date_based``"
msgstr "``django.views.generic.date_based``"

msgid "``django.views.generic.list_detail``"
msgstr "``django.views.generic.list_detail``"

msgid "``django.views.generic.simple``"
msgstr "``django.views.generic.simple``"

msgid "Test client response ``template`` attribute"
msgstr "测试客户端响应的 ``template`` 属性"

msgid ""
"Django's :ref:`test client <test-client>` returns :class:`~django.test."
"Response` objects annotated with extra testing information. In Django "
"versions prior to 1.3, this included a ``template`` attribute containing "
"information about templates rendered in generating the response: either "
"None, a single :class:`~django.template.Template` object, or a list of :"
"class:`~django.template.Template` objects. This inconsistency in return "
"values (sometimes a list, sometimes not) made the attribute difficult to "
"work with."
msgstr ""
"Django 的 :ref:`测试客户端 <test-client>` 返回带有额外测试信息的 :class:"
"`~django.test.Response` 对象。在 Django 1.3 之前的版本中，这包括一个 "
"``template`` 属性，其中包含有关在生成响应时渲染的模板的信息：可以是 None、一"
"个 :class:`~django.template.Template` 对象，或一个 :class:`~django.template."
"Template` 对象的列表。返回值的这种不一致性（有时是列表，有时不是）使得这个属"
"性难以使用。"

msgid ""
"In Django 1.3 the ``template`` attribute is deprecated in favor of a new :"
"attr:`~django.test.Response.templates` attribute, which is always a list, "
"even if it has only a single element or no elements."
msgstr ""
"在 Django 1.3 中，``template`` 属性已被弃用，改为使用新的 :attr:`~django."
"test.Response.templates` 属性，该属性始终是一个列表，即使它只有一个元素或没有"
"元素。"

msgid "``DjangoTestRunner``"
msgstr "``DjangoTestRunner``"

msgid ""
"As a result of the introduction of support for ``unittest2``, the features "
"of ``django.test.simple.DjangoTestRunner`` (including fail-fast and Ctrl-C "
"test termination) have been made redundant. In view of this redundancy, "
"``DjangoTestRunner`` has been turned into an empty placeholder class, and "
"will be removed entirely in Django 1.5."
msgstr ""
"由于引入了对 ``unittest2`` 的支持，``django.test.simple.DjangoTestRunner`` 的"
"特性（包括快速失败和 Ctrl-C 测试终止）已经变得多余。考虑到这种多余性，"
"``DjangoTestRunner`` 已经被转变成一个空的占位符类，并将在 Django 1.5 中完全删"
"除。"

msgid "Changes to ``url`` and ``ssi``"
msgstr "关于 ``url`` 和 ``ssi`` 的更改"

msgid ""
"Most template tags will allow you to pass in either constants or variables "
"as arguments -- for example:"
msgstr "大多数模板标签允许您将常量或变量作为参数传递，例如："

msgid ""
"allows you to specify a base template as a constant, but if you have a "
"context variable ``templ`` that contains the value ``base.html``:"
msgstr ""
"允许您将一个基本模板指定为常量，但如果您有一个包含值 ``base.html`` 的上下文变"
"量 ``templ``："

msgid "is also legal."
msgstr "这也是合法的。"

msgid ""
"However, due to an accident of history, the ``url`` and ``ssi`` are "
"different. These tags use the second, quoteless syntax, but interpret the "
"argument as a constant. This means it isn't possible to use a context "
"variable as the target of a ``url`` and ``ssi`` tag."
msgstr ""
"然而，由于历史原因，``url`` 和 ``ssi`` 是不同的。这些标签使用第二种无引号的语"
"法，但将参数解释为常量。这意味着无法使用上下文变量作为 ``url`` 和 ``ssi`` 标"
"签的目标。"

msgid ""
"Django 1.3 marks the start of the process to correct this historical "
"accident. Django 1.3 adds a new template library -- ``future`` -- that "
"provides alternate implementations of the ``url`` and ``ssi`` template tags. "
"This ``future`` library implement behavior that makes the handling of the "
"first argument consistent with the handling of all other variables. So, an "
"existing template that contains:"
msgstr ""
"Django 1.3 标志着纠正这个历史意外的过程的开始。Django 1.3 添加了一个新的模板"
"库 -- ``future``，提供了 ``url`` 和 ``ssi`` 模板标签的替代实现。这个 "
"``future`` 库实现了使第一个参数的处理与所有其他变量的处理一致的行为。因此，一"
"个包含以下内容的现有模板："

msgid "should be replaced with:"
msgstr "应该替换为："

msgid ""
"The tags implementing the old behavior have been deprecated, and in Django "
"1.5, the old behavior will be replaced with the new behavior. To ensure "
"compatibility with future versions of Django, existing templates should be "
"modified to use the new ``future`` libraries and syntax."
msgstr ""
"实现旧行为的标签已经被弃用，在 Django 1.5 中，旧行为将被新行为替代。为了确保"
"与未来版本的 Django 兼容，现有模板应该被修改以使用新的 ``future`` 库和语法。"

msgid "Changes to the login methods of the admin"
msgstr "管理员登录方法的更改"

msgid ""
"In previous version the admin app defined login methods in multiple "
"locations and ignored the almost identical implementation in the already "
"used auth app. A side effect of this duplication was the missing adoption of "
"the changes made in :commit:`r12634 "
"<c8015052d935a99a5c8f96434b2d0cd16d8a4e14>` to support a broader set of "
"characters for usernames."
msgstr ""
"在之前的版本中，管理应用在多个位置定义了登录方法，并忽略了已经使用的 auth 应"
"用中几乎相同的实现。这种重复的副作用是没有采用 :commit:`r12634 "
"<c8015052d935a99a5c8f96434b2d0cd16d8a4e14>` 中所做的更改，以支持更广泛的用户"
"名字符集。"

msgid ""
"This release refactors the admin's login mechanism to use a subclass of the :"
"class:`~django.contrib.auth.forms.AuthenticationForm` instead of a manual "
"form validation. The previously undocumented method ``'django.contrib.admin."
"sites.AdminSite.display_login_form'`` has been removed in favor of a new :"
"attr:`~django.contrib.admin.AdminSite.login_form` attribute."
msgstr ""
"这个版本重构了管理界面的登录机制，使用了 :class:`~django.contrib.auth.forms."
"AuthenticationForm` 的子类来代替手动表单验证。以前未记录的方法 ``'django."
"contrib.admin.sites.AdminSite.display_login_form'`` 已被移除，改为使用新的 :"
"attr:`~django.contrib.admin.AdminSite.login_form` 属性。"

msgid "``reset`` and ``sqlreset`` management commands"
msgstr "``reset`` 和 ``sqlreset`` 管理命令"

msgid ""
"Those commands have been deprecated. The ``flush`` and ``sqlflush`` commands "
"can be used to delete everything. You can also use ALTER TABLE or DROP TABLE "
"statements manually."
msgstr ""
"这些命令已经被弃用。可以使用 ``flush`` 和 ``sqlflush`` 命令来删除所有内容。您"
"也可以手动使用 ALTER TABLE 或 DROP TABLE 语句。"

msgid ""
"The function-based :setting:`TEST_RUNNER` previously used to execute the "
"GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was "
"deprecated for the class-based runner, ``django.contrib.gis.tests."
"GeoDjangoTestSuiteRunner``."
msgstr ""
"用于执行 GeoDjango 测试套件的函数式 :setting:`TEST_RUNNER`，以前称为 "
"``django.contrib.gis.tests.run_gis_tests``，已被弃用，取而代之的是基于类的运"
"行器，``django.contrib.gis.tests.GeoDjangoTestSuiteRunner``。"

msgid ""
"Previously, calling :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` "
"would silently do nothing when GDAL wasn't available.  Now, a :class:"
"`~django.contrib.gis.geos.GEOSException` is properly raised to indicate "
"possible faulty application code.  A warning is now raised if :meth:`~django."
"contrib.gis.geos.GEOSGeometry.transform` is called when the SRID of the "
"geometry is less than 0 or ``None``."
msgstr ""
"以前，调用 :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` 在没有安"
"装 GDAL 时会默默地什么也不做。现在，会引发一个 :class:`~django.contrib.gis."
"geos.GEOSException` 来指示可能存在问题的应用程序代码。如果在几何对象的 SRID "
"小于 0 或为 ``None`` 时调用 :meth:`~django.contrib.gis.geos.GEOSGeometry."
"transform`，则会引发警告。"

msgid "``CZBirthNumberField.clean``"
msgstr "``CZBirthNumberField.clean``"

msgid ""
"Previously this field's ``clean()`` method accepted a second, gender, "
"argument which allowed stronger validation checks to be made, however since "
"this argument could never actually be passed from the Django form machinery "
"it is now pending deprecation."
msgstr ""
"以前，这个字段的 ``clean()`` 方法接受第二个参数 gender，允许进行更强的验证检"
"查，但由于这个参数实际上无法从 Django 表单机制中传递，因此它现在处于待弃用状"
"态。"

msgid "``CompatCookie``"
msgstr "``CompatCookie``"

msgid ""
"Previously, ``django.http`` exposed an undocumented ``CompatCookie`` class, "
"which was a bugfix wrapper around the standard library ``SimpleCookie``. As "
"the fixes are moving upstream, this is now deprecated - you should use "
"``from django.http import SimpleCookie`` instead."
msgstr ""
"以前，``django.http`` 暴露了一个未记录的 ``CompatCookie`` 类，它是标准库 "
"``SimpleCookie`` 的一个修复包装。由于修复已经被合并到标准库中，这个类现在已被"
"弃用 - 您应该使用 ``from django.http import SimpleCookie``。"

msgid "Loading of *project-level* translations"
msgstr "加载 *项目级别* 的翻译"

msgid ""
"This release of Django starts the deprecation process for inclusion of "
"translations located under the so-called *project path* in the translation "
"building process performed at runtime. The :setting:`LOCALE_PATHS` setting "
"can be used for the same task by adding the filesystem path to a ``locale`` "
"directory containing project-level translations to the value of that setting."
msgstr ""
"Django 的这个版本开始了对在运行时进行的翻译构建过程中包含位于所谓的 *项目路径"
"* 下的翻译的弃用过程。可以使用 :setting:`LOCALE_PATHS` 设置来执行相同的任务，"
"只需将包含项目级别翻译的 ``locale`` 目录的文件系统路径添加到该设置的值中。"

msgid "Rationale for this decision:"
msgstr "这个决定的理由："

msgid ""
"The *project path* has always been a loosely defined concept (actually, the "
"directory used for locating project-level translations is the directory "
"containing the settings module) and there has been a shift in other parts of "
"the framework to stop using it as a reference for location of assets at "
"runtime."
msgstr ""
"*项目路径* 一直是一个宽泛定义的概念（实际上，用于定位项目级别翻译的目录是包含"
"设置模块的目录），在框架的其他部分也已经有了不再将其作为运行时资源位置的参考"
"的变化。"

msgid ""
"Detection of the ``locale`` subdirectory tends to fail when the deployment "
"scenario is more complex than the basic one. e.g. it fails when the settings "
"module is a directory (ticket #10765)."
msgstr ""
"当部署场景比基本情况更复杂时，检测 ``locale`` 子目录的功能往往会失败，例如，"
"当设置模块是一个目录时（ticket #10765）。"

msgid ""
"There are potential strange development- and deployment-time problems like "
"the fact that the ``project_dir/locale/`` subdir can generate spurious error "
"messages when the project directory is added to the Python path (``manage.py "
"runserver`` does this) and then it clashes with the equally named standard "
"library module, this is a typical warning message:"
msgstr ""
"存在一些潜在的奇怪的开发和部署时的问题，比如在将项目目录添加到 Python 路径时"
"（``manage.py runserver`` 会这样做），``project_dir/locale/`` 子目录可能会生"
"成虚假的错误消息，并且会与同名的标准库模块发生冲突，这是一个典型的警告消息："

msgid ""
"This location wasn't included in the translation building process for "
"JavaScript literals. This deprecation removes such inconsistency."
msgstr ""
"此位置未包含在 JavaScript 字面量的翻译构建过程中。这种弃用消除了此类不一致"
"性。"

msgid "``PermWrapper`` moved to ``django.contrib.auth.context_processors``"
msgstr "``PermWrapper`` 已移动到 ``django.contrib.auth.context_processors``"

msgid ""
"In Django 1.2, we began the process of changing the location of the ``auth`` "
"context processor from ``django.core.context_processors`` to ``django."
"contrib.auth.context_processors``. However, the ``PermWrapper`` support "
"class was mistakenly omitted from that migration. In Django 1.3, the "
"``PermWrapper`` class has also been moved to ``django.contrib.auth."
"context_processors``, along with the ``PermLookupDict`` support class. The "
"new classes are functionally identical to their old versions; only the "
"module location has changed."
msgstr ""
"在 Django 1.2 中，我们开始了将 ``auth`` 上下文处理器的位置从 ``django.core."
"context_processors`` 更改为 ``django.contrib.auth.context_processors`` 的过"
"程。然而，``PermWrapper`` 支持类被错误地遗漏在迁移中。在 Django 1.3 中，"
"``PermWrapper`` 类也已经移动到 ``django.contrib.auth.context_processors``，"
"与 ``PermLookupDict`` 支持类一起。新的类在功能上与旧版本完全相同；只是模块位"
"置发生了变化。"

msgid "Removal of ``XMLField``"
msgstr "移除了 ``XMLField``"

msgid ""
"When Django was first released, Django included an ``XMLField`` that "
"performed automatic XML validation for any field input. However, this "
"validation function hasn't been performed since the introduction of "
"``newforms``, prior to the 1.0 release. As a result, ``XMLField`` as "
"currently implemented is functionally indistinguishable from a simple :class:"
"`~django.db.models.TextField`."
msgstr ""
"当 Django 首次发布时，Django 包括了一个 ``XMLField``，用于对任何字段输入执行"
"自动 XML 验证。然而，自从引入了 ``newforms`` （在 1.0 版本发布之前）以来，这"
"种验证功能就不再执行。因此，当前实现的 ``XMLField`` 在功能上与一个简单的 :"
"class:`~django.db.models.TextField` 没有区别。"

msgid ""
"For this reason, Django 1.3 has fast-tracked the deprecation of ``XMLField`` "
"-- instead of a two-release deprecation, ``XMLField`` will be removed "
"entirely in Django 1.4."
msgstr ""
"因此，Django 1.3 已经加速了对 ``XMLField`` 的弃用 -- 不再需要两个版本的弃用，"
"``XMLField`` 将在 Django 1.4 中被完全删除。"

msgid ""
"It's easy to update your code to accommodate this change -- just replace all "
"uses of ``XMLField`` with ``TextField``, and remove the ``schema_path`` "
"keyword argument (if it is specified)."
msgstr ""
"更新您的代码以适应这个更改非常简单 -- 只需将所有使用的 ``XMLField`` 替换为 "
"``TextField``，并删除 ``schema_path`` 关键字参数（如果已指定）。"

msgid "Django 1.3.1 release notes"
msgstr "Django 1.3.1 版本发行说明"

msgid "Welcome to Django 1.3.1!"
msgstr "欢迎来到 Django 1.3.1 版本！"

msgid ""
"This is the first security release in the Django 1.3 series, fixing several "
"security issues in Django 1.3.  Django 1.3.1 is a recommended upgrade for "
"all users of Django 1.3."
msgstr ""
"这是 Django 1.3 系列中的第一个安全版本，修复了 Django 1.3 中的几个安全问题。"
"强烈建议所有使用 Django 1.3 的用户升级到 Django 1.3.1 。"

msgid "Django 1.3.2 release notes"
msgstr "Django 1.3.2 版本发行说明"

msgid "*July 30, 2012*"
msgstr "*2012 年 7 月 30 日*"

msgid ""
"This is the second security release in the Django 1.3 series, fixing several "
"security issues in Django 1.3. Django 1.3.2 is a recommended upgrade for all "
"users of Django 1.3."
msgstr ""
"这是 Django 1.3 系列中的第二个安全版本，修复了 Django 1.3 中的几个安全问题。"
"强烈建议所有使用 Django 1.3 的用户升级到 Django 1.3.2 。"

msgid "Django 1.3.3 release notes"
msgstr "Django 1.3.3 版本发行说明"

msgid "*August 1, 2012*"
msgstr "*2012 年 8 月 1 日*"

msgid ""
"Following Monday's security release of :doc:`Django 1.3.2 </"
"releases/1.3.2>`, we began receiving reports that one of the fixes applied "
"was breaking Python 2.4 compatibility for Django 1.3. Since Python 2.4 is a "
"supported Python version for that release series, this release fixes "
"compatibility with Python 2.4."
msgstr ""
"在周一发布了 :doc:`Django 1.3.2 </releases/1.3.2>` 的安全更新后，我们开始收到"
"报告称其中一个应用的修复措施破坏了 Django 1.3 的 Python 2.4 兼容性。由于 "
"Python 2.4 是该版本系列的支持 Python 版本，因此这个发布修复了与 Python 2.4 的"
"兼容性。"

msgid "Django 1.3.4 release notes"
msgstr "Django 1.3.4 版本发行说明"

msgid "*October 17, 2012*"
msgstr "*2012 年 10 月 17 日*"

msgid "This is the fourth release in the Django 1.3 series."
msgstr "这是 Django 1.3 系列的第四个版本。"

msgid "Host header poisoning"
msgstr "Host 头部中毒"

msgid ""
"Some parts of Django -- independent of end-user-written applications -- make "
"use of full URLs, including domain name, which are generated from the HTTP "
"Host header. Some attacks against this are beyond Django's ability to "
"control, and require the web server to be properly configured; Django's "
"documentation has for some time contained notes advising users on such "
"configuration."
msgstr ""
"Django 的某些部分（与最终用户编写的应用程序无关）使用完整的 URL，包括从 HTTP "
"Host 头生成的域名。针对此类问题的一些攻击超出了 Django 的控制能力，需要正确配"
"置 Web 服务器； Django 的文档已经包含了一段时间的说明，建议用户进行此类配置。"

msgid ""
"Django's own built-in parsing of the Host header is, however, still "
"vulnerable, as was reported to us recently. The Host header parsing in "
"Django 1.3.3 and Django 1.4.1 -- specifically, ``django.http.HttpRequest."
"get_host()`` -- was incorrectly handling username/password information in "
"the header. Thus, for example, the following Host header would be accepted "
"by Django when running on ``validsite.com``:"
msgstr ""
"然而，Django 自身内置的 Host 标头解析仍然存在漏洞，最近有人向我们报告了这个问"
"题。Django 1.3.3 和 Django 1.4.1 中的 Host 标头解析 -- 具体来说是 ``django."
"http.HttpRequest.get_host()`` -- 在处理标头中的用户名/密码信息时出现了错误。"
"因此，例如，在运行在 ``validsite.com`` 上时，Django 会接受以下 Host 标头："

msgid ""
"Using this, an attacker can cause parts of Django -- particularly the "
"password-reset mechanism -- to generate and display arbitrary URLs to users."
msgstr ""
"利用这一点，攻击者可以使 Django 的部分功能（尤其是密码重置机制）为用户生成并"
"显示任意 URL 。"

msgid ""
"To remedy this, the parsing in ``HttpRequest.get_host()`` is being modified; "
"Host headers which contain potentially dangerous content (such as username/"
"password pairs) now raise the exception :exc:`django.core.exceptions."
"SuspiciousOperation`."
msgstr ""
"为了解决这个问题，``HttpRequest.get_host()`` 中的解析正在被修改；包含潜在危险"
"内容（如用户名/密码对）的 Host 标头现在会引发异常 :exc:`django.core."
"exceptions.SuspiciousOperation`。"

msgid ""
"Details of this issue were initially posted online as a `security advisory`_."
msgstr "关于这个问题的详细信息最初被发布在网上作为一份 `安全公告`_。"

msgid "Django 1.3.5 release notes"
msgstr "Django 1.3.5 版本发行说明"

msgid "*December 10, 2012*"
msgstr "*2012 年 12 月 10 日*"

msgid ""
"Django 1.3.5 addresses two security issues present in previous Django "
"releases in the 1.3 series."
msgstr "Django 1.3.5 解决了 1.3 系列中之前 Django 版本存在的两个安全问题。"

msgid ""
"Please be aware that this security release is slightly different from "
"previous ones. Both issues addressed here have been dealt with in prior "
"security updates to Django. In one case, we have received ongoing reports of "
"problems, and in the other we've chosen to take further steps to tighten up "
"Django's code in response to independent discovery of potential problems "
"from multiple sources."
msgstr ""
"请注意，这个安全发布与之前的发布略有不同。这里解决的两个问题都已在之前的 "
"Django 安全更新中得到处理。在一个案例中，我们收到了持续的问题报告，另一个案例"
"中，我们选择采取进一步措施来加强 Django 的代码，以应对来自多个来源的潜在问题"
"的独立发现。"

msgid ""
"Several earlier Django security releases focused on the issue of poisoning "
"the HTTP Host header, causing Django to generate URLs pointing to arbitrary, "
"potentially-malicious domains."
msgstr ""
"早期的几个 Django 安全发布主要关注 HTTP Host 头部被污染的问题，这会导致 "
"Django 生成指向任意、可能恶意的域名的 URL 。"

msgid ""
"In response to further input received and reports of continuing issues "
"following the previous release, we're taking additional steps to tighten "
"Host header validation. Rather than attempt to accommodate all features HTTP "
"supports here, Django's Host header validation attempts to support a "
"smaller, but far more common, subset:"
msgstr ""
"为了回应收到的进一步意见以及在之前发布后持续出现的问题，我们正在采取额外措施"
"来加强 Host 头部验证。与其试图适应 HTTP 支持的所有功能，Django 的 Host 头部验"
"证试图支持一个更小但更常见的子集："

msgid ""
"Hostnames must consist of characters ``[A-Za-z0-9]`` plus hyphen ('-') or "
"dot ('.')."
msgstr "主机名必须由字符 ``[A-Za-z0-9]`` 加上连字符（'-'）或点号（'.'）组成。"

msgid "IP addresses -- both IPv4 and IPv6 -- are permitted."
msgstr "允许使用 IP 地址 - 包括 IPv4 和 IPv6 。"

msgid "Port, if specified, is numeric."
msgstr "如果指定了端口，必须为数字。"

msgid ""
"Any deviation from this will now be rejected, raising the exception :exc:"
"`django.core.exceptions.SuspiciousOperation`."
msgstr ""
"现在，任何与此不符的都将被拒绝，并引发异常 :exc:`django.core.exceptions."
"SuspiciousOperation`。"

msgid "Redirect poisoning"
msgstr "重定向投毒"

msgid ""
"Also following up on a previous issue: in July of this year, we made changes "
"to Django's HTTP redirect classes, performing additional validation of the "
"scheme of the URL to redirect to (since, both within Django's own supplied "
"applications and many third-party applications, accepting a user-supplied "
"redirect target is a common pattern)."
msgstr ""
"同样是跟进之前的问题：今年 7 月，我们对 Django 的 HTTP 重定向类进行了修改，对"
"要重定向到的 URL 的方案进行了额外验证（因为在 Django 自带的应用程序和许多第三"
"方应用程序中，接受用户提供的重定向目标是一种常见的模式）。"

msgid ""
"Since then, two independent audits of the code turned up further potential "
"problems. So, similar to the Host-header issue, we are taking steps to "
"provide tighter validation in response to reported problems (primarily with "
"third-party applications, but to a certain extent also within Django "
"itself). This comes in two parts:"
msgstr ""
"从那时起，对代码进行的两次独立审计发现了更多潜在问题。因此，与 Host-header 问"
"题类似，我们正在采取措施提供更严格的验证，以应对报告的问题（主要是与第三方应"
"用程序相关，但在一定程度上也涉及 Django 本身）。这分为两部分："

msgid ""
"1. A new utility function, ``django.utils.http.is_safe_url``, is added; this "
"function takes a URL and a hostname, and checks that the URL is either "
"relative, or if absolute matches the supplied hostname. This function is "
"intended for use whenever user-supplied redirect targets are accepted, to "
"ensure that such redirects cannot lead to arbitrary third-party sites."
msgstr ""
"1. 新增了一个实用函数 ``django.utils.http.is_safe_url``；该函数接受一个 URL "
"和一个主机名，并检查该 URL 是否是相对路径，或者如果是绝对路径，是否与提供的主"
"机名匹配。这个函数用于在接受用户提供的重定向目标时，以确保这样的重定向不能导"
"致任意的第三方站点。"

msgid ""
"2. All of Django's own built-in views -- primarily in the authentication "
"system -- which allow user-supplied redirect targets now use ``is_safe_url`` "
"to validate the supplied URL."
msgstr ""
"2. Django 的所有内置视图 -- 主要是在身份验证系统中 -- 允许用户提供重定向目标"
"的视图现在都使用 ``is_safe_url`` 来验证提供的 URL。"

msgid "Django 1.3.6 release notes"
msgstr "Django 1.3.6 版本发行说明"

msgid "*February 19, 2013*"
msgstr "*2013 年 2 月 19 日*"

msgid ""
"Django 1.3.6 fixes four security issues present in previous Django releases "
"in the 1.3 series."
msgstr "Django 1.3.6 修复了 1.3 系列中之前 Django 版本存在的四个安全问题。"

msgid "This is the sixth bugfix/security release in the Django 1.3 series."
msgstr "这是 Django 1.3 系列中的第六个修复错误/安全性发布。"

msgid ""
"Some parts of Django -- independent of end-user-written applications -- make "
"use of full URLs, including domain name, which are generated from the HTTP "
"Host header. Django's documentation has for some time contained notes "
"advising users on how to configure web servers to ensure that only valid "
"Host headers can reach the Django application. However, it has been reported "
"to us that even with the recommended web server configurations there are "
"still techniques available for tricking many common web servers into "
"supplying the application with an incorrect and possibly malicious Host "
"header."
msgstr ""
"Django 的某些部分（与最终用户编写的应用程序无关）使用包含域名的完整 URL，这"
"些 URL 是根据 HTTP Host 头生成的。 Django 的文档已经包含了一些关于如何配置 "
"Web 服务器以确保只有有效的 Host 头才能到达 Django 应用程序的建议。然而，有人"
"向我们报告称，即使采用了建议的 Web 服务器配置，仍然有一些方法可以欺骗许多常见"
"的 Web 服务器，使它们向应用程序提供错误且可能恶意的 Host 头。"

msgid ""
"For this reason, Django 1.3.6 adds a new setting, ``ALLOWED_HOSTS``, which "
"should contain an explicit list of valid host/domain names for this site. A "
"request with a Host header not matching an entry in this list will raise "
"``SuspiciousOperation`` if ``request.get_host()`` is called. For full "
"details see the documentation for the :setting:`ALLOWED_HOSTS` setting."
msgstr ""
"因此，Django 1.3.6 添加了一个新的设置，``ALLOWED_HOSTS``，它应包含站点的有效"
"主机/域名的显式列表。如果调用 ``request.get_host()`` 的请求的 Host 标头与此列"
"表中的条目不匹配，将引发 ``SuspiciousOperation``。有关 :setting:"
"`ALLOWED_HOSTS` 设置的详细信息，请参阅文档。"

msgid ""
"The default value for this setting in Django 1.3.6 is ``['*']`` (matching "
"any host), for backwards-compatibility, but we strongly encourage all sites "
"to set a more restrictive value."
msgstr ""
"在 Django 1.3.6 中，这个设置的默认值是 ``['*']`` （匹配任何主机），出于向后兼"
"容性考虑，但我们强烈建议所有站点设置一个更加限制的值。"

msgid ""
"This host validation is disabled when ``DEBUG`` is ``True`` or when running "
"tests."
msgstr "当 ``DEBUG`` 为 ``True`` 时或在运行测试时，主机验证会被禁用。"

msgid "XML deserialization"
msgstr "XML 反序列化"

msgid ""
"The XML parser in the Python standard library is vulnerable to a number of "
"attacks via external entities and entity expansion. Django uses this parser "
"for deserializing XML-formatted database fixtures. The fixture deserializer "
"is not intended for use with untrusted data, but in order to err on the side "
"of safety in Django 1.3.6 the XML deserializer refuses to parse an XML "
"document with a DTD (DOCTYPE definition), which closes off these attack "
"avenues."
msgstr ""
"Python 标准库中的 XML 解析器容易受到外部实体和实体扩展攻击。 Django 使用此解"
"析器对 XML 格式的数据库固件进行反序列化。固件反序列化器并非用于处理不受信任的"
"数据，但为了在 Django 1.3.6 中确保安全，XML 反序列化器拒绝解析带有 DTD"
"（DOCTYPE 定义）的 XML 文档，从而关闭了这些攻击途径。"

msgid ""
"These issues in the Python standard library are CVE-2013-1664 and "
"CVE-2013-1665. More information available `from the Python security team`_."
msgstr ""
"Python 标准库中的这些问题是 CVE-2013-1664 和 CVE-2013-1665。可以从 `Python 安"
"全团队`_ 获取更多信息。"

msgid ""
"Django's XML serializer does not create documents with a DTD, so this should "
"not cause any issues with the typical round-trip from ``dumpdata`` to "
"``loaddata``, but if you feed your own XML documents to the ``loaddata`` "
"management command, you will need to ensure they do not contain a DTD."
msgstr ""
"Django 的 XML 序列化器不会创建带有 DTD 的文档，因此这不应该导致从 "
"``dumpdata`` 到 ``loaddata`` 的典型往返出现任何问题。但是，如果您向 "
"``loaddata`` 管理命令提供自己的 XML 文档，您需要确保它们不包含 DTD。"

msgid "Formset memory exhaustion"
msgstr "表单集内存耗尽"

msgid ""
"Previous versions of Django did not validate or limit the form-count data "
"provided by the client in a formset's management form, making it possible to "
"exhaust a server's available memory by forcing it to create very large "
"numbers of forms."
msgstr ""
"以前的 Django 版本没有验证或限制表单集管理表单中由客户端提供的表单计数数据，"
"这使得通过强制创建大量表单来耗尽服务器可用内存成为可能。"

msgid ""
"In Django 1.3.6, all formsets have a strictly-enforced maximum number of "
"forms (1000 by default, though it can be set higher via the ``max_num`` "
"formset factory argument)."
msgstr ""
"在 Django 1.3.6 中，所有的表单集都有一个严格执行的最大表单数量限制（默认为 "
"1000，但可以通过表单集工厂参数 ``max_num`` 设置得更高）。"

msgid "Admin history view information leakage"
msgstr "管理员历史视图信息泄露"

msgid ""
"In previous versions of Django, an admin user without change permission on a "
"model could still view the Unicode representation of instances via their "
"admin history log. Django 1.3.6 now limits the admin history log view for an "
"object to users with change permission for that model."
msgstr ""
"在以前的 Django 版本中，一个没有模型更改权限的管理员用户仍然可以通过其管理员"
"历史日志查看实例的 Unicode 表示。 Django 1.3.6 现在将对象的管理员历史日志视图"
"限制为具有该模型更改权限的用户。"

msgid "Django 1.3.7 release notes"
msgstr "Django 1.3.7 版本发行说明"

msgid "*February 20, 2013*"
msgstr "*2013 年 2 月 20 日*"

msgid ""
"Django 1.3.7 corrects a packaging problem with yesterday's :doc:`1.3.6 "
"release </releases/1.3.6>`."
msgstr ""
"Django 1.3.7 修复了昨天发布的 :doc:`1.3.6 版本 </releases/1.3.6>` 中的打包问"
"题。"

msgid ""
"The release contained stray ``.pyc`` files that caused \"bad magic number\" "
"errors when running with some versions of Python. This releases corrects "
"this, and also fixes a bad documentation link in the project template "
"``settings.py`` file generated by ``manage.py startproject``."
msgstr ""
"该版本包含了零散的 ``.pyc`` 文件，在某些版本的 Python 中运行时会导致 \"bad "
"magic number\" 错误。这个版本修复了这个问题，并且还修复了由 ``manage.py "
"startproject`` 生成的项目模板 ``settings.py`` 文件中的错误文档链接。"

msgid "Django 1.4 release notes"
msgstr "Django 1.4 版本发行说明"

msgid "*March 23, 2012*"
msgstr "*2012 年 3 月 23 日*"

msgid "Welcome to Django 1.4!"
msgstr "欢迎来到 Django 1.4 版本！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-1.4>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.4>` "
"you'll want to be aware of when upgrading from Django 1.3 or older versions. "
"We've also dropped some features, which are detailed in :ref:`our "
"deprecation plan <deprecation-removed-in-1.4>`, and we've :ref:`begun the "
"deprecation process for some features <deprecated-features-1.4>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新特性 <whats-new-1.4>`，以及从 Django 1.3 或更早版"
"本升级时需要注意的一些 :ref:`不向后兼容的变更 <backwards-incompatible-1.4>`。"
"我们还放弃了一些功能，详细信息在 :ref:`我们的弃用计划 <deprecation-removed-"
"in-1.4>` 中说明，并且我们已经 :ref:`开始了一些功能的弃用过程 <deprecated-"
"features-1.4>`。"

msgid ""
"The biggest new feature in Django 1.4 is `support for time zones`_ when "
"handling date/times. When enabled, this Django will store date/times in UTC, "
"use timezone-aware objects internally, and translate them to users' local "
"timezones for display."
msgstr ""
"Django 1.4 中最重要的新特性是在处理日期/时间时提供了对时区的支持。当启用时，"
"Django 将在 UTC 中存储日期/时间，内部使用时区感知的对象，并将它们翻译为用户的"
"本地时区以供显示。"

msgid ""
"If you're upgrading an existing project to Django 1.4, switching to the "
"timezone aware mode may take some care: the new mode disallows some rather "
"sloppy behavior that used to be accepted. We encourage anyone who's "
"upgrading to check out the :ref:`timezone migration guide <time-zones-"
"migration-guide>` and the :ref:`timezone FAQ <time-zones-faq>` for useful "
"pointers."
msgstr ""
"如果您正在将现有项目升级到 Django 1.4，切换到时区感知模式可能需要一些注意：新"
"模式不允许以前被接受的一些相当松散的行为。我们鼓励任何升级的用户查看 :ref:`时"
"区迁移指南 <time-zones-migration-guide>` 和 :ref:`时区常见问题解答 <time-"
"zones-faq>`，以获取有用的提示。"

msgid "Other notable new features in Django 1.4 include:"
msgstr "Django 1.4 中其他值得关注的新功能包括："

msgid ""
"A number of ORM improvements, including `SELECT FOR UPDATE support`_, the "
"ability to `bulk insert <#model-objects-bulk-create-in-the-orm>`_ large "
"datasets for improved performance, and `QuerySet.prefetch_related`_, a "
"method to batch-load related objects in areas where :meth:`~django.db.models."
"query.QuerySet.select_related` doesn't work."
msgstr ""
"ORM 改进方面有很多改进，包括 `SELECT FOR UPDATE 支持`_，能够以 `bulk "
"insert`_ 的方式插入大型数据集以提高性能，以及 `QuerySet.prefetch_related`_，"
"这是一种在 :meth:`~django.db.models.query.QuerySet.select_related` 不适用的情"
"况下批量加载相关对象的方法。"

msgid ""
"Some nice security additions, including `improved password hashing`_ "
"(featuring PBKDF2_ and bcrypt_ support), new `tools for cryptographic "
"signing`_, several `CSRF improvements`_, and `simple clickjacking "
"protection`_."
msgstr ""
"一些不错的安全性增强功能，包括 `改进的密码哈希算法`_ （支持 PBKDF2_ 和 "
"bcrypt_），新的 `加密签名工具`_，几个 `CSRF 改进`_，以及 `简单的点击劫持保护"
"`_。"

msgid ""
"An `updated default project layout and manage.py`_ that removes the "
"\"magic\" from prior versions. And for those who don't like the new layout, "
"you can use `custom project and app templates`_ instead!"
msgstr ""
"`更新的默认项目布局和 manage.py`_ ，去除了以前版本中的\"魔法\"。对于那些不喜"
"欢新布局的人，可以使用 `自定义项目和应用模板`_。"

msgid "`Support for in-browser testing frameworks`_ (like Selenium_)."
msgstr "`对于浏览器内测试框架的支持`_ （如 Selenium_）。"

msgid "... and a whole lot more; `see below <#what-s-new-in-django-1-4>`_!"
msgstr "... 还有很多内容；`查看下文 <#what-s-new-in-django-1-4>`_！"

msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible "
"manner per :doc:`our API stability policy </misc/api-stability>` policy. "
"However, as with previous releases, Django 1.4 ships with some minor :ref:"
"`backwards incompatible changes <backwards-incompatible-1.4>`; people "
"upgrading from previous versions of Django should read that list carefully."
msgstr ""
"在尽可能的情况下，我们尝试以符合 :doc:`我们的 API 稳定性政策 </misc/api-"
"stability>` 的方式引入新功能。然而，与以前的版本一样，Django 1.4 也带有一些轻"
"微的 :ref:`不兼容变更 <backwards-incompatible-1.4>`；从以前版本的 Django 升级"
"的用户应该仔细阅读该列表。"

msgid ""
"Django 1.4 has dropped support for Python 2.4. Python 2.5 is now the minimum "
"required Python version. Django is tested and supported on Python 2.5, 2.6 "
"and 2.7."
msgstr ""
"Django 1.4 已放弃对 Python 2.4 的支持。现在要求的最低 Python 版本为 2.5 。 "
"Django 在 Python 2.5 、 2.6 和 2.7 上经过测试并得到支持。"

msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.5 or newer as their "
"default version. If you're still using Python 2.4, however, you'll need to "
"stick to Django 1.3 until you can upgrade. Per :doc:`our support policy </"
"internals/release-process>`, Django 1.3 will continue to receive security "
"support until the release of Django 1.5."
msgstr ""
"这个变更应该只会影响到少数 Django 用户，因为大多数操作系统厂商今天都默认安装 "
"Python 2.5 或更新版本。然而，如果你仍然在使用 Python 2.4，你将需要继续使用 "
"Django 1.3，直到你可以升级。根据 :doc:`我们的支持政策 </internals/release-"
"process>`，Django 1.3 将在 Django 1.5 发布之前继续获得安全支持。"

msgid ""
"Django does not support Python 3.x at this time. At some point before the "
"release of Django 1.4, we plan to publish a document outlining our full "
"timeline for deprecating Python 2.x and moving to Python 3.x."
msgstr ""
"目前 Django 不支持 Python 3.x 。在 Django 1.4 发布之前的某个时刻，我们计划发"
"布一份文件，概述我们废弃 Python 2.x 并转向 Python 3.x 的完整时间表。"

msgid "What's new in Django 1.4"
msgstr "Django 1.4 新特性"

msgid "Support for time zones"
msgstr "时区支持"

msgid ""
"In previous versions, Django used \"naive\" date/times (that is, date/times "
"without an associated time zone), leaving it up to each developer to "
"interpret what a given date/time \"really means\". This can cause all sorts "
"of subtle timezone-related bugs."
msgstr ""
"在以前的版本中，Django 使用了“天真”的日期/时间（也就是没有关联时区的日期/时"
"间），让每个开发者来解释给定的日期/时间“真正的含义”。这可能导致各种微妙的时区"
"相关错误。"

msgid ""
"In Django 1.4, you can now switch Django into a more correct, time-zone "
"aware mode. In this mode, Django stores date and  time information in UTC in "
"the database, uses time-zone-aware datetime objects internally and "
"translates them to the end user's time zone in templates and forms. Reasons "
"for using this feature include:"
msgstr ""
"在 Django 1.4 中，您现在可以将 Django 切换到更正确的、具有时区感知的模式。在"
"此模式下，Django 将日期和时间信息以 UTC 格式存储在数据库中，内部使用具有时区"
"感知的 datetime 对象，并在模板和表单中将它们转换为最终用户的时区。使用此功能"
"的原因包括："

msgid "Customizing date and time display for users around the world."
msgstr "为世界各地的用户自定义日期和时间显示。"

msgid ""
"Storing datetimes in UTC for database portability and interoperability. "
"(This argument doesn't apply to PostgreSQL, because it already stores "
"timestamps with time zone information in Django 1.3.)"
msgstr ""
"以 UTC 格式存储日期时间以实现数据库的可移植性和互操作性。（这个论点不适用于 "
"PostgreSQL，因为在 Django 1.3 中，它已经存储了带有时区信息的时间戳。）"

msgid "Avoiding data corruption problems around DST transitions."
msgstr "避免在夏令时转换期间出现数据损坏问题。"

msgid ""
"Time zone support is enabled by default in new projects created with :"
"djadmin:`startproject`. If you want to use this feature in an existing "
"project, read the :ref:`migration guide <time-zones-migration-guide>`. If "
"you encounter problems, there's a helpful :ref:`FAQ <time-zones-faq>`."
msgstr ""
"在使用 :djadmin:`startproject` 创建的新项目中，默认启用了时区支持。如果你想在"
"现有项目中使用这个功能，请阅读 :ref:`迁移指南 <time-zones-migration-guide>`。"
"如果遇到问题，可以参考有用的 :ref:`常见问题解答 <time-zones-faq>`。"

msgid "Support for in-browser testing frameworks"
msgstr "支持基于浏览器的测试框架"

msgid ""
"Django 1.4 supports integration with in-browser testing frameworks like "
"Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets "
"you test the interactions between your site's front and back ends more "
"comprehensively. See the :class:`documentation<django.test."
"LiveServerTestCase>` for more details and concrete examples."
msgstr ""
"Django 1.4 支持与浏览器测试框架（如 Selenium_）的集成。新的 :class:`django."
"test.LiveServerTestCase` 基类允许你更全面地测试你的网站前端和后端之间的交互。"
"有关更多详细信息和具体示例，请参阅 :class:`文档 <django.test."
"LiveServerTestCase>`。"

msgid "Updated default project layout and ``manage.py``"
msgstr "更新了默认项目布局和 ``manage.py``。"

msgid ""
"Django 1.4 ships with an updated default project layout and ``manage.py`` "
"file for the :djadmin:`startproject` management command. These fix some "
"issues with the previous ``manage.py`` handling of Python import paths that "
"caused double imports, trouble moving from development to deployment, and "
"other difficult-to-debug path issues."
msgstr ""
"Django 1.4 附带了一个更新后的默认项目布局和 :djadmin:`startproject` 管理命令"
"的 ``manage.py`` 文件。这些修复了之前的 ``manage.py`` 处理 Python 导入路径的"
"一些问题，导致了重复导入、从开发环境切换到部署环境的困难以及其他难以调试的路"
"径问题。"

msgid ""
"The previous ``manage.py`` called functions that are now deprecated, and "
"thus projects upgrading to Django 1.4 should update their ``manage.py``. "
"(The old-style ``manage.py`` will continue to work as before until Django "
"1.6. In 1.5 it will raise ``DeprecationWarning``)."
msgstr ""
"之前的 ``manage.py`` 调用了现在已弃用的函数，因此升级到 Django 1.4 的项目应该"
"更新他们的 ``manage.py``。（旧式的 ``manage.py`` 将在 Django 1.6 之前继续像以"
"前一样工作。在 1.5 中，它将引发 ``DeprecationWarning``）。"

msgid "The new recommended ``manage.py`` file should look like this::"
msgstr "推荐使用的新 ``manage.py`` 文件应该如下所示："

msgid ""
"``{{ project_name }}`` should be replaced with the Python package name of "
"the actual project."
msgstr "``{{ project_name }}`` 应该替换为实际项目的 Python 包名称。"

msgid ""
"If settings, URLconfs and apps within the project are imported or referenced "
"using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = "
"\"myproject.urls\"``, etc.), the new ``manage.py`` will need to be moved one "
"directory up, so it is outside the project package rather than adjacent to "
"``settings.py`` and ``urls.py``."
msgstr ""
"如果项目中导入或引用了设置、URL 配置和应用程序时使用项目名称前缀（例如 "
"``myproject.settings``，``ROOT_URLCONF = \"myproject.urls\"`` 等），新的 "
"``manage.py`` 需要移动到上一级目录，以便它位于项目包之外，而不是与 "
"``settings.py`` 和 ``urls.py`` 并列。"

msgid "For instance, with the following layout:"
msgstr "例如，以下布局："

msgid ""
"You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``, "
"but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""
"你可以导入 ``mysite.settings``、``mysite.urls`` 和 ``mysite.myapp``，但不能导"
"入 ``settings``、``urls`` 或 ``myapp`` 作为顶级模块。"

msgid ""
"Anything imported as a top-level module can be placed adjacent to the new "
"``manage.py``. For instance, to decouple ``myapp`` from the project module "
"and import it as just ``myapp``, place it outside the ``mysite/`` directory:"
msgstr ""
"作为顶级模块导入的任何内容都可以放在新的 ``manage.py`` 旁边。例如，要将 "
"``myapp`` 与项目模块解耦并将其导入为 ``myapp``，请将其放在 ``mysite/`` 目录之"
"外："

msgid ""
"If the same code is imported inconsistently (some places with the project "
"prefix, some places without it), the imports will need to be cleaned up when "
"switching to the new ``manage.py``."
msgstr ""
"如果相同的代码在不一致的地方导入（有些地方使用项目前缀，有些地方不使用），在"
"切换到新的 ``manage.py`` 时需要清理导入语句。"

msgid "Custom project and app templates"
msgstr "自定义项目和应用模板"

msgid ""
"The :djadmin:`startapp` and :djadmin:`startproject` management commands now "
"have a ``--template`` option for specifying a path or URL to a custom app or "
"project template."
msgstr ""
"现在，:djadmin:`startapp` 和 :djadmin:`startproject` 管理命令都有一个 ``--"
"template`` 选项，用于指定自定义应用程序或项目模板的路径或 URL。"

msgid ""
"For example, Django will use the ``/path/to/my_project_template`` directory "
"when you run the following command:"
msgstr ""
"例如，当你运行以下命令时，Django 将使用 ``/path/to/my_project_template`` 目"
"录："

msgid ""
"You can also now provide a destination directory as the second argument to "
"both :djadmin:`startapp` and :djadmin:`startproject`:"
msgstr ""
"现在，你也可以将目标目录作为 :djadmin:`startapp` 和 :djadmin:`startproject` "
"的第二个参数提供："

msgid ""
"For more information, see the :djadmin:`startapp` and :djadmin:"
"`startproject` documentation."
msgstr ""
"有关更多信息，请参阅 :djadmin:`startapp` 和 :djadmin:`startproject` 的文档。"

msgid "Improved WSGI support"
msgstr "改进的 WSGI 支持"

msgid ""
"The :djadmin:`startproject` management command now adds a :file:`wsgi.py` "
"module to the initial project layout, containing a simple WSGI application "
"that can be used for :doc:`deploying with WSGI app servers</howto/deployment/"
"wsgi/index>`."
msgstr ""
":djadmin:`startproject` 管理命令现在会在初始项目布局中添加一个 :file:`wsgi."
"py` 模块，其中包含一个简单的 WSGI 应用程序，可以用于 :doc:`使用 WSGI 应用服务"
"器部署 </howto/deployment/wsgi/index>`。"

msgid ""
"The :djadmin:`built-in development server<runserver>` now supports using an "
"externally-defined WSGI callable, which makes it possible to run "
"``runserver`` with the same WSGI configuration that is used for deployment. "
"The new :setting:`WSGI_APPLICATION` setting lets you configure which WSGI "
"callable :djadmin:`runserver` uses."
msgstr ""
"内置的开发服务器 :djadmin:`runserver` 现在支持使用外部定义的 WSGI 可调用函"
"数，这使得可以使用与部署相同的 WSGI 配置来运行 ``runserver``。新的 :setting:"
"`WSGI_APPLICATION` 设置允许你配置 :djadmin:`runserver` 使用哪个 WSGI 可调用函"
"数。"

msgid ""
"(The ``runfcgi`` management command also internally wraps the WSGI callable "
"configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""
"（``runfcgi`` 管理命令也会在内部包装通过 :setting:`WSGI_APPLICATION` 配置的 "
"WSGI 可调用函数。）"

msgid "``SELECT FOR UPDATE`` support"
msgstr "``SELECT FOR UPDATE`` 支持"

msgid ""
"Django 1.4 includes a :meth:`QuerySet.select_for_update() <django.db.models."
"query.QuerySet.select_for_update>` method, which generates a ``SELECT ... "
"FOR UPDATE`` SQL query. This will lock rows until the end of the "
"transaction, meaning other transactions cannot modify or delete rows matched "
"by a ``FOR UPDATE`` query."
msgstr ""
"Django 1.4 包含了一个 :meth:`QuerySet.select_for_update() <django.db.models."
"query.QuerySet.select_for_update>` 方法，它生成一个 ``SELECT ... FOR "
"UPDATE`` SQL 查询。这将锁定行，直到事务结束，这意味着其他事务无法修改或删除"
"与 ``FOR UPDATE`` 查询匹配的行。"

msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.select_for_update`."
msgstr ""
"有关更多详细信息，请参阅 :meth:`~django.db.models.query.QuerySet."
"select_for_update` 的文档。"

msgid "``Model.objects.bulk_create`` in the ORM"
msgstr "ORM 中的 ``Model.objects.bulk_create``"

msgid ""
"This method lets you create multiple objects more efficiently. It can result "
"in significant performance increases if you have many objects."
msgstr ""
"这种方法让您能够更高效地创建多个对象。如果您有很多对象，这可能会带来显著的性"
"能提升。"

msgid ""
"Django makes use of this internally, meaning some operations (such as "
"database setup for test suites) have seen a performance benefit as a result."
msgstr ""
"Django 在内部使用了这种方法，这意味着某些操作（如测试套件的数据库设置）因此也"
"获得了性能提升。"

msgid ""
"See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more "
"information."
msgstr ""
"请查看 :meth:`~django.db.models.query.QuerySet.bulk_create` 文档以获取更多信"
"息。"

msgid "``QuerySet.prefetch_related``"
msgstr "``QuerySet.prefetch_related``"

msgid ""
"Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with "
"a different strategy and broader scope, :meth:`~django.db.models.query."
"QuerySet.prefetch_related` has been added to :class:`~django.db.models.query."
"QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of "
"the specified related lookups in a single batch as soon as the query begins "
"to be evaluated. Unlike ``select_related``, it does the joins in Python, not "
"in the database, and supports many-to-many relationships, "
"``GenericForeignKey`` and more. This allows you to fix a very common "
"performance problem in which your code ends up doing O(n) database queries "
"(or worse) if objects on your primary ``QuerySet`` each have many related "
"objects that you also need to fetch."
msgstr ""
"类似于 :meth:`~django.db.models.query.QuerySet.select_related`，但具有不同策"
"略和更广泛的范围，:meth:`~django.db.models.query.QuerySet.prefetch_related` "
"已经添加到 :class:`~django.db.models.query.QuerySet` 中。这个方法返回一个新"
"的 ``QuerySet``，将在查询开始被评估时以单个批次的方式预取每个指定的相关查找。"
"与 ``select_related`` 不同，它在 Python 中执行连接操作，而不是在数据库中执"
"行，并支持多对多关系、``GenericForeignKey`` 等。这允许您解决一个非常常见的性"
"能问题，即如果主要 ``QuerySet`` 上的对象每个都有许多相关对象需要获取，那么您"
"的代码最终会执行 O(n) 数据库查询（或更糟）。"

msgid "Improved password hashing"
msgstr "改进的密码散列处理"

msgid ""
"Django's auth system (``django.contrib.auth``) stores passwords using a one-"
"way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor "
"speeds and theoretical attacks have revealed that SHA1 isn't as secure as "
"we'd like. Thus, Django 1.4 introduces a new password storage system: by "
"default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You "
"can also easily choose a different algorithm (including the popular bcrypt_ "
"algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""
"Django 的认证系统（``django.contrib.auth``）使用单向算法存储密码。Django 1.3 "
"使用 SHA1_ 算法，但随着处理器速度的增加和理论攻击的出现，SHA1 的安全性不如我"
"们希望的那么高。因此，Django 1.4 引入了一个新的密码存储系统：默认情况下，"
"Django 现在使用 PBKDF2_ 算法（由 NIST_ 推荐）。您还可以轻松选择不同的算法（包"
"括流行的 bcrypt_ 算法）。有关更多详细信息，请参阅 :ref:"
"`auth_password_storage`。"

msgid "HTML5 doctype"
msgstr "HTML5 文档类型定义（doctype）"

msgid ""
"We've switched the admin and other bundled templates to use the HTML5 "
"doctype. While Django will be careful to maintain compatibility with older "
"browsers, this change means that you can use any HTML5 features you need in "
"admin pages without having to lose HTML validity or override the provided "
"templates to change the doctype."
msgstr ""
"我们已经将管理员和其他捆绑模板切换为使用 HTML5 文档类型定义。尽管 Django 会小"
"心地保持与旧浏览器的兼容性，但这一变化意味着您可以在管理员页面中使用所需的任"
"何 HTML5 功能，而无需失去 HTML 有效性或覆盖提供的模板以更改文档类型定义。"

msgid "List filters in admin interface"
msgstr "管理员界面的列表过滤器"

msgid ""
"Prior to Django 1.4, the :mod:`~django.contrib.admin` app let you specify "
"change list filters by specifying a field lookup, but it didn't allow you to "
"create custom filters. This has been rectified with a simple API (previously "
"used internally and known as \"FilterSpec\"). For more details, see the "
"documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""
"在 Django 1.4 之前，:mod:`~django.contrib.admin` 应用程序允许您通过指定字段查"
"找来指定更改列表过滤器，但不允许您创建自定义过滤器。这已经得到了纠正，并引入"
"了一个简单的 API（以前在内部使用，被称为 \"FilterSpec\"）。有关更多详细信息，"
"请参阅 :attr:`~django.contrib.admin.ModelAdmin.list_filter` 的文档。"

msgid "Multiple sort in admin interface"
msgstr "管理员界面的多重排序功能"

msgid ""
"The admin change list now supports sorting on multiple columns. It respects "
"all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` "
"attribute, and sorting on multiple columns by clicking on headers is "
"designed to mimic the behavior of desktop GUIs. We also added a :meth:"
"`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the "
"ordering dynamically (i.e., depending on the request)."
msgstr ""
"管理界面的更改列表现在支持在多个列上进行排序。它尊重 :attr:`~django.contrib."
"admin.ModelAdmin.ordering` 属性的所有元素，并且通过单击标题进行多列排序的行为"
"设计得类似于桌面 GUI。我们还添加了一个 :meth:`~django.contrib.admin."
"ModelAdmin.get_ordering` 方法，用于动态指定排序顺序（即，根据请求的不同情"
"况）。"

msgid "New ``ModelAdmin`` methods"
msgstr "新的 ``ModelAdmin`` 方法"

msgid ""
"We added a :meth:`~django.contrib.admin.ModelAdmin.save_related` method to :"
"mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related "
"objects are saved in the admin."
msgstr ""
"我们在 :mod:`~django.contrib.admin.ModelAdmin` 中添加了一个 :meth:`~django."
"contrib.admin.ModelAdmin.save_related` 方法，以便更容易自定义在管理员中保存相"
"关对象的方式。"

msgid ""
"Two other new :class:`~django.contrib.admin.ModelAdmin` methods, :meth:"
"`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django."
"contrib.admin.ModelAdmin.get_list_display_links` enable dynamic "
"customization of fields and links displayed on the admin change list."
msgstr ""
"另外两个新的 :class:`~django.contrib.admin.ModelAdmin` 方法，:meth:`~django."
"contrib.admin.ModelAdmin.get_list_display` 和 :meth:`~django.contrib.admin."
"ModelAdmin.get_list_display_links`，允许动态自定义在管理员更改列表上显示的字"
"段和链接。"

msgid "Admin inlines respect user permissions"
msgstr "管理员内联遵循用户权限"

msgid ""
"Admin inlines now only allow those actions for which the user has "
"permission. For ``ManyToMany`` relationships with an auto-created "
"intermediate model (which does not have its own permissions), the change "
"permission for the related model determines if the user has the permission "
"to add, change or delete relationships."
msgstr ""
"管理员内联现在只允许用户具有权限的操作。对于具有自动创建的中间模型的 "
"``ManyToMany`` 关系（该模型没有自己的权限），相关模型的更改权限确定用户是否具"
"有添加、更改或删除关系的权限。"

msgid "Tools for cryptographic signing"
msgstr "加密签名工具"

msgid ""
"Django 1.4 adds both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in web applications."
msgstr ""
"Django 1.4 既添加了用于签名值的低级 API，也添加了用于设置和读取签名 Cookie 的"
"高级 API，这是 Web 应用程序中签名的最常见用途之一。"

msgid ""
"See the :doc:`cryptographic signing </topics/signing>` docs for more "
"information."
msgstr "有关更多信息，请查看 :doc:`加密签名 </topics/signing>` 文档。"

msgid "Cookie-based session backend"
msgstr "基于 Cookie 的会话后端"

msgid ""
"Django 1.4 introduces a cookie-based session backend that uses the tools "
"for :doc:`cryptographic signing </topics/signing>` to store the session data "
"in the client's browser."
msgstr ""
"Django 1.4 引入了一种基于 Cookie 的会话后端，它使用 :doc:`加密签名 </topics/"
"signing>` 工具来将会话数据存储在客户端的浏览器中。"

msgid ""
"Session data is signed and validated by the server, but it's not encrypted. "
"This means a user can view any data stored in the session but cannot change "
"it. Please read the documentation for further clarification before using "
"this backend."
msgstr ""
"会话数据由服务器签名并验证，但不加密。这意味着用户可以查看存储在会话中的任何"
"数据，但不能更改它。在使用此后端之前，请阅读文档以进一步了解。"

msgid ""
"See the :ref:`cookie-based session backend <cookie-session-backend>` docs "
"for more information."
msgstr ""
"有关更多信息，请查看 :ref:`基于 Cookie 的会话后端 <cookie-session-backend>` "
"文档。"

msgid "New form wizard"
msgstr "新的表单向导"

msgid ""
"The previous ``FormWizard`` from ``django.contrib.formtools`` has been "
"replaced with a new implementation based on the class-based views introduced "
"in Django 1.3. It features a pluggable storage API and doesn't require the "
"wizard to pass around hidden fields for every previous step."
msgstr ""
"以前的 ``FormWizard`` 从 ``django.contrib.formtools`` 已经被一个基于 Django "
"1.3 引入的基于类的视图的新实现替代。它具有可插拔的存储 API，并且不需要向前的"
"每个步骤传递隐藏字段。"

msgid ""
"Django 1.4 ships with a session-based storage backend and a cookie-based "
"storage backend. The latter uses the tools for :doc:`cryptographic signing </"
"topics/signing>` also introduced in Django 1.4 to store the wizard's state "
"in the user's cookies."
msgstr ""
"Django 1.4 附带了一个基于会话的存储后端和一个基于 Cookie 的存储后端。后者还使"
"用了在 Django 1.4 中引入的 :doc:`加密签名 </topics/signing>` 工具来将向导的状"
"态存储在用户的 Cookie 中。"

msgid "``reverse_lazy``"
msgstr "``reverse_lazy``"

msgid ""
"A lazily evaluated version of ``reverse()`` was added to allow using URL "
"reversals before the project's URLconf gets loaded."
msgstr ""
"新增了一个惰性评估版本的 ``reverse()``，允许在项目的 URL 配置加载之前使用 "
"URL 反转。"

msgid "Translating URL patterns"
msgstr "翻译 URL 模式"

msgid ""
"Django can now look for a language prefix in the URLpattern when using the "
"new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. It's also "
"now possible to define translatable URL patterns using ``django.utils."
"translation.ugettext_lazy()``. See :ref:`url-internationalization` for more "
"information about the language prefix and how to internationalize URL "
"patterns."
msgstr ""
"Django 现在可以在使用新的 :func:`~django.conf.urls.i18n.i18n_patterns` 辅助函"
"数时在 URL 模式中查找语言前缀。还可以使用 ``django.utils.translation."
"ugettext_lazy()`` 定义可翻译的 URL 模式。有关语言前缀以及如何国际化 URL 模式"
"的更多信息，请参阅 :ref:`url-internationalization`。"

msgid ""
"Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr "对于 ``{% trans %}`` 和 ``{% blocktrans %}``，现在支持上下文翻译。"

msgid ""
"The :ref:`contextual translation<contextual-markers>` support introduced in "
"Django 1.3 via the ``pgettext`` function has been extended to the :ttag:"
"`trans` and :ttag:`blocktrans` template tags using the new ``context`` "
"keyword."
msgstr ""
"在 Django 1.3 中通过 ``pgettext`` 函数引入的 :ref:`上下文翻译<contextual-"
"markers>` 支持已经扩展到 :ttag:`trans` 和 :ttag:`blocktrans` 模板标签，使用了"
"新的 ``context`` 关键字。"

msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr "可自定义的 ``SingleObjectMixin`` URLConf kwargs"

msgid ""
"Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail."
"SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views."
"generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:"
"`~django.views.generic.detail.SingleObjectMixin` to enable the customization "
"of URLconf keyword arguments used for single object generic views."
msgstr ""
"为了允许自定义用于单个对象通用视图的 URLconf 关键字参数，新增了两个新属性：:"
"attr:`pk_url_kwarg<django.views.generic.detail.SingleObjectMixin."
"pk_url_kwarg>` 和 :attr:`slug_url_kwarg<django.views.generic.detail."
"SingleObjectMixin.slug_url_kwarg>`，它们被添加到 :class:`~django.views."
"generic.detail.SingleObjectMixin` 中。"

msgid "Assignment template tags"
msgstr "赋值模板标签"

msgid ""
"A new ``assignment_tag`` helper function was added to ``template.Library`` "
"to ease the creation of template tags that store data in a specified context "
"variable."
msgstr ""
"新增了一个名为 ``assignment_tag`` 的辅助函数到 ``template.Library``，用于简化"
"创建模板标签并将数据存储在指定的上下文变量中。"

msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr "模板标签辅助函数现在支持 ``*args`` 和 ``**kwargs``"

msgid ""
"The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :ref:"
"`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly "
"introduced ``assignment_tag`` template helper functions may now accept any "
"number of positional or keyword arguments. For example::"
msgstr ""
" :ref:`simple_tag <howto-custom-template-tags-simple-tags>`、:ref:"
"`inclusion_tag <howto-custom-template-tags-inclusion-tags>` 和新引入的 "
"``assignment_tag`` 模板辅助函数现在可以接受任意数量的位置参数或关键字参数。例"
"如："

msgid ""
"Then, in the template, any number of arguments may be passed to the template "
"tag. For example:"
msgstr "然后，在模板中，可以将任意数量的参数传递给模板标签。例如："

msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr "在 ``TEMPLATE_DEBUG`` 模式下不会包装异常"

msgid ""
"In previous versions of Django, whenever the ``TEMPLATE_DEBUG`` setting was "
"``True``, any exception raised during template rendering (even exceptions "
"unrelated to template syntax) were wrapped in ``TemplateSyntaxError`` and re-"
"raised. This was done in order to provide detailed template source location "
"information in the debug 500 page."
msgstr ""
"在以前的 Django 版本中，无论何时 ``TEMPLATE_DEBUG`` 设置为 ``True``，在模板渲"
"染期间引发的任何异常（甚至与模板语法无关的异常）都会被包装在 "
"``TemplateSyntaxError`` 中并重新引发。这是为了在调试 500 页面中提供详细的模板"
"源位置信息。"

msgid ""
"In Django 1.4, exceptions are no longer wrapped. Instead, the original "
"exception is annotated with the source information. This means that catching "
"exceptions from template rendering is now consistent regardless of the value "
"of ``TEMPLATE_DEBUG``, and there's no need to catch and unwrap "
"``TemplateSyntaxError`` in order to catch other errors."
msgstr ""
"在 Django 1.4 中，不再包装异常。相反，原始异常会带有源信息的注释。这意味着无"
"论 ``TEMPLATE_DEBUG`` 的值如何，现在捕获模板渲染中的异常都是一致的，而且不需"
"要捕获和解包 ``TemplateSyntaxError`` 以捕获其他错误。"

msgid "``truncatechars`` template filter"
msgstr "``truncatechars`` 模板过滤器"

msgid ""
"This new filter truncates a string to be no longer than the specified number "
"of characters. Truncated strings end with a translatable ellipsis sequence "
"(\"...\"). See the documentation for :tfilter:`truncatechars` for more "
"details."
msgstr ""
"这个新的过滤器将字符串截断，使其不超过指定的字符数。截断的字符串以可翻译的省"
"略号序列（\"...\"）结尾。有关更多详细信息，请参阅 :tfilter:`truncatechars` 的"
"文档。"

msgid "``static`` template tag"
msgstr "``static`` 模板标签"

msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new "
"``static`` template tag to refer to files saved with the "
"``STATICFILES_STORAGE`` storage backend. It uses the storage backend's "
"``url`` method and therefore supports advanced features such as :ref:"
"`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

msgid "``CachedStaticFilesStorage`` storage backend"
msgstr "``CachedStaticFilesStorage`` 存储后端"

msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a "
"``django.contrib.staticfiles.storage.CachedStaticFilesStorage`` backend that "
"caches the files it saves (when running the :djadmin:`collectstatic` "
"management command) by appending the MD5 hash of the file's content to the "
"filename. For example, the file ``css/styles.css`` would also be saved as "
"``css/styles.55e7cbb9ba48.css``"
msgstr ""
"现在，:mod:`staticfiles<django.contrib.staticfiles>` 贡献应用程序具有一个 "
"``django.contrib.staticfiles.storage.CachedStaticFilesStorage`` 后端，通过将"
"文件内容的 MD5 哈希附加到文件名中来缓存它保存的文件（在运行 :djadmin:"
"`collectstatic` 管理命令时）。例如，文件 ``css/styles.css`` 也将保存为 ``css/"
"styles.55e7cbb9ba48.css``。"

msgid "Simple clickjacking protection"
msgstr "简单的点击劫持保护"

msgid ""
"We've added a middleware to provide easy protection against `clickjacking "
"<https://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options`` "
"header. It's not enabled by default for backwards compatibility reasons, but "
"you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to "
"help plug that security hole for browsers that support the header."
msgstr ""
"我们添加了一个中间件，通过使用 ``X-Frame-Options`` 头提供了简单的防止 "
"`clickjacking <https://en.wikipedia.org/wiki/Clickjacking>`_ 的保护。出于向后"
"兼容性的原因，默认情况下未启用它，但您几乎肯定希望 :doc:`启用它 </ref/"
"clickjacking/>` 以帮助修复支持该头的浏览器中的安全漏洞。"

msgid "CSRF improvements"
msgstr "CSRF 改进"

msgid ""
"We've made various improvements to our CSRF features, including the :func:"
"`~django.views.decorators.csrf.ensure_csrf_cookie` decorator, which can help "
"with AJAX-heavy sites; protection for PUT and DELETE requests; and the :"
"setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings, which "
"can improve the security and usefulness of CSRF protection. See the :doc:"
"`CSRF docs </ref/csrf>` for more information."
msgstr ""
"我们对 CSRF 功能进行了各种改进，包括 :func:`~django.views.decorators.csrf."
"ensure_csrf_cookie` 装饰器，它可以帮助处理 AJAX 密集的站点；对 PUT 和 DELETE "
"请求的保护；以及 :setting:`CSRF_COOKIE_SECURE` 和 :setting:"
"`CSRF_COOKIE_PATH` 设置，它们可以提高 CSRF 保护的安全性和实用性。有关更多信"
"息，请参阅 :doc:`CSRF 文档 </ref/csrf>`。"

msgid "Error report filtering"
msgstr "错误报告过滤"

msgid ""
"We added two function decorators, :func:`~django.views.decorators.debug."
"sensitive_variables` and :func:`~django.views.decorators.debug."
"sensitive_post_parameters`, to allow designating the local variables and "
"POST parameters that may contain sensitive information and should be "
"filtered out of error reports."
msgstr ""
"我们添加了两个函数装饰器，:func:`~django.views.decorators.debug."
"sensitive_variables` 和 :func:`~django.views.decorators.debug."
"sensitive_post_parameters`，允许指定可能包含敏感信息并且应该从错误报告中过滤"
"掉的本地变量和 POST 参数。"

msgid ""
"All POST parameters are now systematically filtered out of error reports for "
"certain views (``login``, ``password_reset_confirm``, ``password_change`` "
"and ``add_view`` in :mod:`django.contrib.auth.views`, as well as "
"``user_change_password`` in the admin app) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""
"现在，对于某些视图（``login``、``password_reset_confirm``、"
"``password_change`` 和 :mod:`django.contrib.auth.views` 中的 ``add_view``，以"
"及管理员应用程序中的 ``user_change_password``），所有 POST 参数都会被系统地从"
"错误报告中过滤掉，以防止敏感信息（如用户密码）的泄漏。"

msgid ""
"You can override or customize the default filtering by writing a :ref:"
"`custom filter<custom-error-reports>`. For more information see the docs on :"
"ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""
"您可以通过编写 :ref:`自定义过滤器 <custom-error-reports>` 来覆盖或自定义默认"
"的过滤方式。有关更多信息，请参阅 :ref:`过滤错误报告 <filtering-error-"
"reports>` 文档。"

msgid "Extended IPv6 support"
msgstr "扩展的 IPv6 支持"

msgid ""
"Django 1.4 can now better handle IPv6 addresses with the new :class:`~django."
"db.models.GenericIPAddressField` model field, :class:`~django.forms."
"GenericIPAddressField` form field and the validators :data:`~django.core."
"validators.validate_ipv46_address` and :data:`~django.core.validators."
"validate_ipv6_address`."
msgstr ""
"Django 1.4 现在可以更好地处理 IPv6 地址，引入了新的 :class:`~django.db."
"models.GenericIPAddressField` 模型字段，:class:`~django.forms."
"GenericIPAddressField` 表单字段以及验证器 :data:`~django.core.validators."
"validate_ipv46_address` 和 :data:`~django.core.validators."
"validate_ipv6_address`。"

msgid "HTML comparisons in tests"
msgstr "测试中的 HTML 比较"

msgid ""
"The base classes in :mod:`django.test` now have some helpers to compare HTML "
"without tripping over irrelevant differences in whitespace, argument quoting/"
"ordering and closing of self-closing tags. You can either compare HTML "
"directly with the new :meth:`~django.test.SimpleTestCase.assertHTMLEqual` "
"and :meth:`~django.test.SimpleTestCase.assertHTMLNotEqual` assertions, or "
"use the ``html=True`` flag with :meth:`~django.test.SimpleTestCase."
"assertContains` and :meth:`~django.test.SimpleTestCase.assertNotContains` to "
"test whether the client's response contains a given HTML fragment. See the :"
"ref:`assertions documentation <assertions>` for more."
msgstr ""
"在 :mod:`django.test` 中的基类现在具有一些帮助程序，可以比较 HTML，而不会受到"
"不相关的空格差异、参数引用/顺序以及自闭标签的关闭的干扰。您可以使用新的 :"
"meth:`~django.test.SimpleTestCase.assertHTMLEqual` 和 :meth:`~django.test."
"SimpleTestCase.assertHTMLNotEqual` 断言直接比较 HTML，或者使用 ``html=True`` "
"标志与 :meth:`~django.test.SimpleTestCase.assertContains` 和 :meth:`~django."
"test.SimpleTestCase.assertNotContains` 来测试客户端的响应是否包含给定的 HTML "
"片段。有关更多信息，请参阅 :ref:`断言文档 <assertions>`。"

msgid "Two new date format strings"
msgstr "两个新的日期格式字符串"

msgid ""
"Two new :tfilter:`date` formats were added for use in template filters, "
"template tags and :doc:`/topics/i18n/formatting`:"
msgstr ""
"新增了两个 :tfilter:`date` 格式，可用于模板过滤器、模板标签和 :doc:`/topics/"
"i18n/formatting`："

msgid "``e`` -- the name of the timezone of the given datetime object"
msgstr "``e`` -- 给定日期时间对象的时区名称"

msgid "``o`` -- the ISO 8601 year number"
msgstr "``o`` -- ISO 8601 年份编号"

msgid ""
"Please make sure to update your :ref:`custom format files <custom-format-"
"files>` if they contain either ``e`` or ``o`` in a format string. For "
"example a Spanish localization format previously only escaped the ``d`` "
"format character::"
msgstr ""
"请确保在您的 :ref:`自定义格式文件 <custom-format-files>` 中更新包含格式字符串"
"中的 ``e`` 或 ``o`` 的部分。例如，先前的西班牙本地化格式仅对 ``d`` 格式字符进"
"行了转义："

msgid "But now it needs to also escape ``e`` and ``o``::"
msgstr "但现在它还需要转义 ``e`` 和 ``o``："

msgid "For more information, see the :tfilter:`date` documentation."
msgstr "有关更多信息，请参阅 :tfilter:`date` 文档。"

msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr "Django 1.4 还包括一些值得注意的较小改进："

msgid ""
"A more usable stacktrace in the technical 500 page. Frames in the stack "
"trace that reference Django's framework code are dimmed out, while frames in "
"application code are slightly emphasized. This change makes it easier to "
"scan a stacktrace for issues in application code."
msgstr ""
"技术性 500 错误页面中更易用的堆栈跟踪。堆栈跟踪中引用 Django 框架代码的帧会变"
"暗，而应用程序代码中的帧会稍微突出。这个改变使得在堆栈跟踪中查找应用程序代码"
"的问题变得更容易。"

msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr "在 PostgreSQL 中支持 :doc:`表空间 </topics/db/tablespaces>`。"

msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr "可自定义 :meth:`~django.template.Library.simple_tag` 的名称。"

msgid ""
"In the documentation, a helpful :doc:`security overview </topics/security>` "
"page."
msgstr "在文档中，有一个有用的 :doc:`安全概述 </topics/security>` 页面。"

msgid ""
"The ``django.contrib.auth.models.check_password`` function has been moved to "
"the :mod:`django.contrib.auth.hashers` module. Importing it from the old "
"location will still work, but you should update your imports."
msgstr ""
"``django.contrib.auth.models.check_password`` 函数已移动到 :mod:`django."
"contrib.auth.hashers` 模块。从旧位置导入仍然可以工作，但您应该更新您的导入语"
"句。"

msgid ""
"The :djadmin:`collectstatic` management command now has a ``--clear`` option "
"to delete all files at the destination before copying or linking the static "
"files."
msgstr ""
"现在，:djadmin:`collectstatic` 管理命令具有一个 ``--clear`` 选项，用于在复制"
"或链接静态文件之前删除目标位置的所有文件。"

msgid ""
"It's now possible to load fixtures containing forward references when using "
"MySQL with the InnoDB database engine."
msgstr ""
"现在可以在使用带有 InnoDB 数据库引擎的 MySQL 时加载包含前向引用的固定数据。"

msgid ""
"A new 403 response handler has been added as ``'django.views.defaults."
"permission_denied'``. You can set your own handler by setting the value of :"
"data:`django.conf.urls.handler403`. See the documentation about :ref:`the "
"403 (HTTP Forbidden) view<http_forbidden_view>` for more information."
msgstr ""
"新增了一个新的 403 响应处理程序，名称为 ``'django.views.defaults."
"permission_denied'``。您可以通过设置 :data:`django.conf.urls.handler403` 的值"
"来设置自己的处理程序。有关更多信息，请参阅 :ref:`403 (HTTP Forbidden) 视图 "
"<http_forbidden_view>` 的文档。"

msgid ""
"The :djadmin:`makemessages` command uses a new and more accurate lexer, :"
"pypi:`JsLex <jslex>`, for extracting translatable strings from JavaScript "
"files."
msgstr ""
":djadmin:`makemessages` 命令现在使用一个新的、更准确的词法分析器，:pypi:"
"`JsLex <jslex>`，用于从 JavaScript 文件中提取可翻译的字符串。"

msgid ""
"The :ttag:`trans` template tag now takes an optional ``as`` argument to be "
"able to retrieve a translation string without displaying it but setting a "
"template context variable instead."
msgstr ""
":ttag:`trans` 模板标签现在接受一个可选的 ``as`` 参数，以便能够检索翻译字符串"
"而不显示它，而是设置一个模板上下文变量。"

msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ":ttag:`if` 模板标签现在支持 ``{% elif %}`` 子句。"

msgid ""
"If your Django app is behind a proxy, you might find the new :setting:"
"`SECURE_PROXY_SSL_HEADER` setting useful. It solves the problem of your "
"proxy \"eating\" the fact that a request came in via HTTPS. But only use "
"this setting if you know what you're doing."
msgstr ""
"如果您的 Django 应用程序位于代理之后，您可能会发现新的 :setting:"
"`SECURE_PROXY_SSL_HEADER` 设置很有用。它解决了代理将请求通过 HTTPS 进行传递的"
"问题。但只有在知道自己在做什么的情况下才使用此设置。"

msgid ""
"A new, plain-text, version of the HTTP 500 status code internal error page "
"served when :setting:`DEBUG` is ``True`` is now sent to the client when "
"Django detects that the request has originated in JavaScript code. "
"(``is_ajax()`` is used for this.)"
msgstr ""
"当 :setting:`DEBUG` 为 ``True`` 时，Django 在检测到请求源自 JavaScript 代码"
"时，会向客户端发送新的 HTTP 500 状态码内部错误页面的纯文本版本（使用 "
"``is_ajax()`` 进行检测）。"

msgid ""
"Like its HTML counterpart, it contains a collection of different pieces of "
"information about the state of the application."
msgstr "与其 HTML 对应部分一样，它包含了关于应用程序状态的不同信息片段。"

msgid ""
"This should make it easier to read when debugging interaction with client-"
"side JavaScript."
msgstr "这将使得在调试与客户端 JavaScript 交互时更容易阅读。"

msgid "Added the :option:`makemessages --no-location` option."
msgstr "新增了 :option:`makemessages --no-location` 选项。"

msgid ""
"Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for "
"better compatibility with the other cache backends."
msgstr ""
"更改了 ``locmem`` 缓存后端，以使用 ``pickle.HIGHEST_PROTOCOL`` 以提高与其他缓"
"存后端的兼容性。"

msgid ""
"Added support in the ORM for generating ``SELECT`` queries containing "
"``DISTINCT ON``."
msgstr "在 ORM 中添加了生成包含 ``DISTINCT ON`` 的 ``SELECT`` 查询的支持。"

msgid ""
"The ``distinct()`` ``QuerySet`` method now accepts an optional list of model "
"field names. If specified, then the ``DISTINCT`` statement is limited to "
"these fields. This is only supported in PostgreSQL."
msgstr ""
"``distinct()`` 方法现在接受一个可选的模型字段名称列表。如果指定了这些字段，"
"则 ``DISTINCT`` 语句将限定在这些字段上。这仅在 PostgreSQL 中支持。"

msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.distinct`."
msgstr ""
"有关更多详细信息，请参阅 :meth:`~django.db.models.query.QuerySet.distinct` 的"
"文档。"

msgid ""
"The admin login page will add a password reset link if you include a URL "
"with the name ``'admin_password_reset'`` in your ``urls.py``, so plugging in "
"the built-in password reset mechanism and making it available is now much "
"easier. For details, see :ref:`auth_password_reset`."
msgstr ""
"如果在您的 ``urls.py`` 中包含一个名称为 ``'admin_password_reset'`` 的 URL，管"
"理员登录页面将添加一个密码重置链接，因此现在更容易使用内置的密码重置机制并使"
"其可用。有关详细信息，请参阅 :ref:`auth_password_reset`。"

msgid ""
"The MySQL database backend can now make use of the savepoint feature "
"implemented by MySQL version 5.0.3 or newer with the InnoDB storage engine."
msgstr ""
"MySQL 数据库后端现在可以利用 MySQL 5.0.3 或更新版本的 InnoDB 存储引擎实现的保"
"存点功能。"

msgid ""
"It's now possible to pass initial values to the model forms that are part of "
"both model formsets and inline model formsets as returned from factory "
"functions ``modelformset_factory`` and ``inlineformset_factory`` "
"respectively just like with regular formsets. However, initial values only "
"apply to extra forms, i.e. those which are not bound to an existing model "
"instance."
msgstr ""
"现在，可以像常规表单集合一样，将初始值传递给模型表单，这些模型表单是从工厂函"
"数 ``modelformset_factory`` 和 ``inlineformset_factory`` 返回的，它们分别是模"
"型表单集合和内联模型表单集合的一部分。但是，初始值仅适用于额外的表单，即不绑"
"定到现有模型实例的表单。"

msgid ""
"The sitemaps framework can now handle HTTPS links using the new :attr:"
"`Sitemap.protocol <django.contrib.sitemaps.Sitemap.protocol>` class "
"attribute."
msgstr ""
"现在，站点地图框架可以使用新的 :attr:`Sitemap.protocol <django.contrib."
"sitemaps.Sitemap.protocol>` 类属性处理 HTTPS 链接。"

msgid ""
"A new :class:`django.test.SimpleTestCase` subclass of :class:`unittest."
"TestCase` that's lighter than :class:`django.test.TestCase` and company. It "
"can be useful in tests that don't need to hit a database. See :ref:"
"`testcase_hierarchy_diagram`."
msgstr ""
"新增了一个 :class:`django.test.SimpleTestCase`，它是 :class:`unittest."
"TestCase` 的子类，比 :class:`django.test.TestCase` 和相关的测试用例更轻量。它"
"可以在不需要访问数据库的测试中使用。请参阅 :ref:"
"`testcase_hierarchy_diagram`。"

msgid "Backwards incompatible changes in 1.4"
msgstr "1.4 中的不向后兼容的变更"

msgid "SECRET_KEY setting is required"
msgstr "SECRET_KEY 设置是必需的"

msgid ""
"Running Django with an empty or known :setting:`SECRET_KEY` disables many of "
"Django's security protections and can lead to remote-code-execution "
"vulnerabilities. No Django site should ever be run without a :setting:"
"`SECRET_KEY`."
msgstr ""
"使用空或已知的 :setting:`SECRET_KEY` 运行 Django 会禁用许多 Django 的安全保护"
"功能，并可能导致远程代码执行漏洞。任何 Django 站点都不应该在没有 :setting:"
"`SECRET_KEY` 的情况下运行。"

msgid ""
"In Django 1.4, starting Django with an empty :setting:`SECRET_KEY` will "
"raise a ``DeprecationWarning``. In Django 1.5, it will raise an exception "
"and Django will refuse to start. This is slightly accelerated from the usual "
"deprecation path due to the severity of the consequences of running Django "
"with no :setting:`SECRET_KEY`."
msgstr ""
"在 Django 1.4 中，使用空的 :setting:`SECRET_KEY` 启动 Django 会引发 "
"``DeprecationWarning``。在 Django 1.5 中，它将引发异常，并且 Django 将拒绝启"
"动。这是因为在没有 :setting:`SECRET_KEY` 的情况下运行 Django 会导致严重后果，"
"所以这个过程略有加速。"

msgid "``django.contrib.admin``"
msgstr "``django.contrib.admin``"

msgid ""
"The included administration app ``django.contrib.admin`` has for a long time "
"shipped with a default set of static files such as JavaScript, images and "
"stylesheets. Django 1.3 added a new contrib app ``django.contrib."
"staticfiles`` to handle such files in a generic way and defined conventions "
"for static files included in apps."
msgstr ""
"包含的管理应用程序 ``django.contrib.admin`` 长期以来都包含了一组默认的静态文"
"件，如 JavaScript、图像和样式表。Django 1.3 添加了一个新的 contrib 应用程序 "
"``django.contrib.staticfiles``，以一种通用的方式处理这些文件，并定义了应用程"
"序中包含的静态文件的约定。"

msgid ""
"Starting in Django 1.4, the admin's static files also follow this "
"convention, to make the files easier to deploy. In previous versions of "
"Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to "
"point to the URL where the admin's static files live on a web server. This "
"setting has now been deprecated and replaced by the more general setting :"
"setting:`STATIC_URL`. Django will now expect to find the admin static files "
"under the URL ``<STATIC_URL>/admin/``."
msgstr ""
"从 Django 1.4 开始，管理界面的静态文件也遵循这个约定，以使文件更容易部署。在 "
"Django 的早期版本中，通常会定义一个 ``ADMIN_MEDIA_PREFIX`` 设置，指向 web 服"
"务器上管理界面的静态文件所在的 URL。现在，这个设置已被弃用，并由更通用的设"
"置 :setting:`STATIC_URL` 取代。Django 现在期望在 URL ``<STATIC_URL>/admin/`` "
"下找到管理界面的静态文件。"

msgid ""
"If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/"
"media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` "
"are configured and your web server serves those files correctly. The "
"development server continues to serve the admin files just like before. Read "
"the :doc:`static files howto </howto/static-files/index>` for more details."
msgstr ""
"如果您之前使用了 ``ADMIN_MEDIA_PREFIX`` 的 URL 路径（例如 ``/media/``），只需"
"确保 :setting:`STATIC_URL` 和 :setting:`STATIC_ROOT` 配置正确，并且您的 Web "
"服务器能够正确提供这些文件。开发服务器仍然像以前一样提供管理界面的文件。阅"
"读 :doc:`静态文件 howto </howto/static-files/index>` 以获取更多详细信息。"

msgid ""
"If your ``ADMIN_MEDIA_PREFIX`` is set to a specific domain (e.g. ``http://"
"media.example.com/admin/``), make sure to also set your :setting:"
"`STATIC_URL` setting to the correct URL -- for example, ``http://media."
"example.com/``."
msgstr ""
"如果您的 ``ADMIN_MEDIA_PREFIX`` 设置为特定的域名（例如 ``http://media."
"example.com/admin/``），请确保将您的 :setting:`STATIC_URL` 设置为正确的 URL，"
"例如 ``http://media.example.com/``。"

msgid ""
"If you're implicitly relying on the path of the admin static files within "
"Django's source code, you'll need to update that path. The files were moved "
"from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/"
"static/admin/`."
msgstr ""
"如果您隐式依赖于 Django 源代码中管理界面静态文件的路径，您需要更新该路径。这"
"些文件已从 :file:`django/contrib/admin/media/` 移动到 :file:`django/contrib/"
"admin/static/admin/`。"

msgid "Supported browsers for the admin"
msgstr "管理支持的浏览器"

msgid ""
"Django hasn't had a clear policy on which browsers are supported by the "
"admin app. Our new policy formalizes existing practices: `YUI's A-grade`_ "
"browsers should provide a fully-functional admin experience, with the "
"notable exception of Internet Explorer 6, which is no longer supported."
msgstr ""
"Django 对于管理界面应用程序支持哪些浏览器一直没有明确的政策。我们的新政策正式"
"规范了现有的做法：`YUI 的 A 级`_ 浏览器应提供完整功能的管理界面体验，但不再支"
"持 Internet Explorer 6，这是一个显著的例外。"

msgid ""
"Released over 10 years ago, IE6 imposes many limitations on modern web "
"development. The practical implications of this policy are that contributors "
"are free to improve the admin without consideration for these limitations."
msgstr ""
"IE6 发布于 10 多年前，给现代 Web 开发带来了许多限制。这项政策的实际影响是，贡"
"献者可以在不考虑这些限制的情况下自由地改进管理员界面。"

msgid ""
"This new policy **has no impact** on sites you develop using Django. It only "
"applies to the Django admin. Feel free to develop apps compatible with any "
"range of browsers."
msgstr ""
"这个新政策 **不会影响** 使用 Django 开发的网站。它仅适用于 Django 管理界面。"
"请随意开发与各种浏览器兼容的应用程序。"

msgid "Removed admin icons"
msgstr "移除了管理图标"

msgid ""
"As part of an effort to improve the performance and usability of the admin's "
"change-list sorting interface and :attr:`horizontal <django.contrib.admin."
"ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin."
"ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were "
"removed and grouped into two sprite files."
msgstr ""
"为了改善管理界面的列表排序界面和 :attr:`horizontal <django.contrib.admin."
"ModelAdmin.filter_horizontal>` 和 :attr:`vertical <django.contrib.admin."
"ModelAdmin.filter_vertical>` \"filter\" 小部件的性能和可用性，一些图标文件已"
"被删除并组合到两个精灵文件中。"

msgid ""
"Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-"
"remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and "
"``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; "
"and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-"
"icons.gif``."
msgstr ""
"具体来说：``selector-add.gif``, ``selector-addall.gif``, ``selector-remove."
"gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` 和 "
"``selector_stacked-remove.gif`` 已合并到 ``selector-icons.gif`` 中；``arrow-"
"up.gif`` 和 ``arrow-down.gif`` 已合并到 ``sorting-icons.gif`` 中。"

msgid ""
"If you used those icons to customize the admin, then you'll need to replace "
"them with your own icons or get the files from a previous release."
msgstr ""
"如果您使用这些图标来自定义管理员界面，那么您需要用自己的图标替换它们，或者从"
"以前的版本中获取这些文件。"

msgid "CSS class names in admin forms"
msgstr "管理员表单中的 CSS 类名"

msgid ""
"To avoid conflicts with other common CSS class names (e.g. \"button\"), we "
"added a prefix (\"field-\") to all CSS class names automatically generated "
"from the form field names in the main admin forms, stacked inline forms and "
"tabular inline cells. You'll need to take that prefix into account in your "
"custom style sheets or JavaScript files if you previously used plain field "
"names as selectors for custom styles or JavaScript transformations."
msgstr ""
"为避免与其他常见 CSS 类名（例如 \"button\"）发生冲突，我们为主管理员表单、堆"
"叠内联表单和表格内联单元格中的表单字段名自动生成的所有 CSS 类名添加了一个前缀"
"（\"field-\"）。如果您之前使用普通字段名作为自定义样式或 JavaScript 转换的选"
"择器，您需要在自定义样式表或 JavaScript 文件中考虑到这个前缀。"

msgid "Compatibility with old signed data"
msgstr "与旧版签名数据的兼容性"

msgid ""
"Django 1.3 changed the cryptographic signing mechanisms used in a number of "
"places in Django. While Django 1.3 kept fallbacks that would accept hashes "
"produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""
"Django 1.3 更改了 Django 中多个地方使用的加密签名机制。尽管 Django 1.3 保留了"
"接受由之前方法生成的哈希值的回退机制，但这些回退机制在 Django 1.4 中已被移"
"除。"

msgid ""
"So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/"
"invalidate certain pieces of data that have been cryptographically signed "
"using an old method. To avoid this, use Django 1.3 first for a period of "
"time to allow the signed data to expire naturally. The affected parts are "
"detailed below, with 1) the consequences of ignoring this advice and 2) the "
"amount of time you need to run Django 1.3 for the data to expire or become "
"irrelevant."
msgstr ""
"因此，如果您直接从 1.2 或更早版本升级到 Django 1.4，您可能会丢失/使使用旧方法"
"加密签名的某些数据失效。为避免这种情况，请先使用 Django 1.3 一段时间，以便让"
"签名数据自然过期。受影响的部分详细说明如下： 1 ) 忽略此建议的后果； 2 ) 为使"
"数据过期或变得无关紧要，您需要运行 Django 1.3 的时间。"

msgid "``contrib.sessions`` data integrity check"
msgstr "``contrib.sessions`` 数据完整性检查"

msgid ""
"Consequences: The user will be logged out, and session data will be lost."
msgstr "后果：用户将被登出，且会话数据将丢失。"

msgid "Time period: Defined by :setting:`SESSION_COOKIE_AGE`."
msgstr "时间段：由 :setting:`SESSION_COOKIE_AGE` 定义。"

msgid "``contrib.auth`` password reset hash"
msgstr "``contrib.auth`` 密码重置哈希"

msgid ""
"Consequences: Password reset links from before the upgrade will not work."
msgstr "后果：升级前的密码重置链接将无法使用。"

msgid "Time period: Defined by ``PASSWORD_RESET_TIMEOUT_DAYS``."
msgstr "时间段：由 ``PASSWORD_RESET_TIMEOUT_DAYS`` 定义。"

msgid ""
"Form-related hashes: these have a much shorter lifetime and are relevant "
"only for the short window where a user might fill in a form generated by the "
"pre-upgrade Django instance and try to submit it to the upgraded Django "
"instance:"
msgstr ""
"与表单相关的哈希：它们的生命周期要短得多，仅与用户可能填写由升级前的 Django "
"实例生成的表单并尝试将其提交到升级后的 Django 实例的短暂窗口期相关。"

msgid "``contrib.comments`` form security hash"
msgstr "``contrib.comments`` 表单安全哈希"

msgid ""
"Consequences: The user will see the validation error \"Security hash failed."
"\""
msgstr "后果：用户将看到验证错误 \"安全哈希失败。\""

msgid ""
"Time period: The amount of time you expect users to take filling out comment "
"forms."
msgstr "时间周期：您预期用户填写评论表单所需的时间。"

msgid "``FormWizard`` security hash"
msgstr "``FormWizard`` 安全哈希"

msgid ""
"Consequences: The user will see an error about the form having expired and "
"will be sent back to the first page of the wizard, losing the data entered "
"so far."
msgstr ""
"后果：用户将看到关于表单已过期的错误，并被退回到向导的第一页，迄今为止输入的"
"数据将丢失。"

msgid ""
"Time period: The amount of time you expect users to take filling out the "
"affected forms."
msgstr "时间周期：您预期用户填写受影响表单所需的时间。"

msgid "CSRF check"
msgstr "CSRF 检查"

msgid ""
"Note: This is actually a Django 1.1 fallback, not Django 1.2, and it applies "
"only if you're upgrading from 1.1."
msgstr ""
"注意：这实际上是一个从 Django 1.1 回退，而不是 Django 1.2，仅在您从 1.1 升级"
"时适用。"

msgid ""
"Consequences: The user will see a 403 error with any CSRF-protected POST "
"form."
msgstr "后果：用户在任何受 CSRF 保护的 POST 表单中都会看到 403 错误。"

msgid ""
"Time period: The amount of time you expect user to take filling out such "
"forms."
msgstr "时间周期：您预期用户填写此类表单所需的时间。"

msgid "``contrib.auth`` user password hash-upgrade sequence"
msgstr "``contrib.auth`` 用户密码升级哈希序列"

msgid ""
"Consequences: Each user's password will be updated to a stronger password "
"hash when it's written to the database in 1.4. This means that if you "
"upgrade to 1.4 and then need to downgrade to 1.3, version 1.3 won't be able "
"to read the updated passwords."
msgstr ""
"后果：在 1.4 版本中，每个用户的密码将在写入数据库时更新为更强的密码散列。这意"
"味着如果您升级到 1.4 然后需要降级到 1.3，1.3 版本将无法读取更新后的密码。"

msgid ""
"Remedy: Set :setting:`PASSWORD_HASHERS` to use your original password "
"hashing when you initially upgrade to 1.4. After you confirm your app works "
"well with Django 1.4 and you won't have to roll back to 1.3, enable the new "
"password hashes."
msgstr ""
"解决方法：在初始升级到 1.4 时将 :setting:`PASSWORD_HASHERS` 设置为使用您原始"
"的密码哈希方式。确认您的应用在 Django 1.4 上运行良好且不需要回滚到 1.3 后，启"
"用新的密码哈希方式。"

msgid "``django.contrib.flatpages``"
msgstr "``django.contrib.flatpages``"

msgid ""
"Starting in 1.4, the :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the "
"resulting URL refers to an existing flatpage. For example, requesting ``/"
"notaflatpageoravalidurl`` in a previous version would redirect to ``/"
"notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting "
"``/notaflatpageoravalidurl`` now will immediately raise a 404."
msgstr ""
"从 1.4 版本开始，:class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` 仅在生成的 URL 引用现有的平面页面时才会添加尾随斜"
"杠并重定向。例如，在以前的版本中，请求 ``/notaflatpageoravalidurl`` 会重定向"
"到 ``/notaflatpageoravalidurl/``，然后会引发 404 错误。现在请求 ``/"
"notaflatpageoravalidurl`` 将立即引发 404 错误。"

msgid ""
"Also, redirects returned by flatpages are now permanent (with 301 status "
"code), to match the behavior of :class:`~django.middleware.common."
"CommonMiddleware`."
msgstr ""
"此外，平面页面返回的重定向现在是永久性的（使用 301 状态代码），以与 :class:"
"`~django.middleware.common.CommonMiddleware` 的行为一致。"

msgid ""
"Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ":class:`~datetime.datetime` 和 :class:`~datetime.time` 的序列化"

msgid ""
"As a consequence of time-zone support, and according to the ECMA-262 "
"specification, we made changes to the JSON serializer:"
msgstr ""
"作为时区支持的结果，并根据 ECMA-262 规范，我们对 JSON 序列化器进行了更改："

msgid ""
"It includes the time zone for aware datetime objects. It raises an exception "
"for aware time objects."
msgstr ""
"它包括了具有时区感知的 datetime 对象的时区。对于具有时区感知的 time 对象，它"
"会引发一个异常。"

msgid ""
"It includes milliseconds for datetime and time objects. There is still some "
"precision loss, because Python stores microseconds (6 digits) and JSON only "
"supports milliseconds (3 digits). However, it's better than discarding "
"microseconds entirely."
msgstr ""
"它包括了 datetime 和 time 对象的毫秒数。由于 Python 存储微秒（6 位数字）而 "
"JSON 仅支持毫秒（3 位数字），因此仍然存在一些精度损失。然而，这总比完全丢弃微"
"秒要好。"

msgid ""
"We changed the XML serializer to use the ISO8601 format for datetimes. The "
"letter ``T`` is used to separate the date part from the time part, instead "
"of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""
"我们更改了 XML 序列化器以使用 ISO8601 格式来表示日期时间。使用字母 ``T`` 来分"
"隔日期部分和时间部分，而不是使用空格。时区信息以 ``[+-]HH:MM`` 格式包含在内。"

msgid ""
"Though the serializers now use these new formats when creating fixtures, "
"they can still load fixtures that use the old format."
msgstr ""
"尽管序列化器在创建固件时现在使用这些新格式，但它们仍然可以加载使用旧格式的固"
"件。"

msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr "``supports_timezone`` 对于 SQLite 现在更改为 ``False``。"

msgid ""
"The database feature ``supports_timezone`` used to be ``True`` for SQLite. "
"Indeed, if you saved an aware datetime object, SQLite stored a string that "
"included an UTC offset. However, this offset was ignored when loading the "
"value back from the database, which could corrupt the data."
msgstr ""
"数据库特性 ``supports_timezone`` 以前对于 SQLite 是 ``True``。确实，如果您保"
"存了一个带有时区信息的 datetime 对象，SQLite 会存储一个包含 UTC 偏移的字符"
"串。然而，在从数据库加载值时会忽略此偏移量，这可能会导致数据损坏。"

msgid ""
"In the context of time-zone support, this flag was changed to ``False``, and "
"datetimes are now stored without time-zone information in SQLite. When :"
"setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime "
"object, Django raises an exception."
msgstr ""
"在时区支持的背景下，此标志已更改为 ``False``，并且在 SQLite 中现在以不带时区"
"信息的方式存储日期时间。当 :setting:`USE_TZ` 为 ``False`` 时，如果尝试保存一"
"个带有时区信息的 datetime 对象，Django 将引发异常。"

msgid "``MySQLdb``-specific exceptions"
msgstr "``MySQLdb`` 特定的异常"

msgid ""
"The MySQL backend historically has raised ``MySQLdb.OperationalError`` when "
"a query triggered an exception. We've fixed this bug, and we now raise :exc:"
"`django.db.DatabaseError` instead. If you were testing for ``MySQLdb."
"OperationalError``, you'll need to update your ``except`` clauses."
msgstr ""
"MySQL 后端在历史上在查询触发异常时引发了 ``MySQLdb.OperationalError``。我们已"
"经修复了这个 bug，现在我们会引发 :exc:`django.db.DatabaseError`。如果您在测试"
"时使用了 ``MySQLdb.OperationalError``，您需要更新您的 ``except`` 子句。"

msgid "Database connection's thread-locality"
msgstr "数据库连接的线程局部性"

msgid ""
"``DatabaseWrapper`` objects (i.e. the connection objects referenced by "
"``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used "
"to be thread-local. They are now global objects in order to be potentially "
"shared between multiple threads. While the individual connection objects are "
"now global, the ``django.db.connections`` dictionary referencing those "
"objects is still thread-local. Therefore if you just use the ORM or "
"``DatabaseWrapper.cursor()`` then the behavior is still the same as before. "
"Note, however, that ``django.db.connection`` does not directly reference the "
"default ``DatabaseWrapper`` object anymore and is now a proxy to access that "
"object's attributes. If you need to access the actual ``DatabaseWrapper`` "
"object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` instead."
msgstr ""
"``DatabaseWrapper`` 对象（即由 ``django.db.connection`` 和 ``django.db."
"connections[\"some_alias\"]`` 引用的连接对象）以前是线程局部的。现在它们是全"
"局对象，可以在多个线程之间共享。尽管单个连接对象现在是全局的，但引用这些对象"
"的 ``django.db.connections`` 字典仍然是线程局部的。因此，如果您只是使用 ORM "
"或 ``DatabaseWrapper.cursor()``，那么行为仍然与以前相同。但请注意，``django."
"db.connection`` 现在不再直接引用默认的 ``DatabaseWrapper`` 对象，而是代理访问"
"该对象的属性。如果您需要访问实际的 ``DatabaseWrapper`` 对象，请改用 ``django."
"db.connections[DEFAULT_DB_ALIAS]``。"

msgid ""
"As part of this change, all underlying SQLite connections are now enabled "
"for potential thread-sharing (by passing the ``check_same_thread=False`` "
"attribute to ``pysqlite``). ``DatabaseWrapper`` however preserves the "
"previous behavior by disabling thread-sharing by default, so this does not "
"affect any existing code that purely relies on the ORM or on "
"``DatabaseWrapper.cursor()``."
msgstr ""
"作为这个改变的一部分，现在所有底层的 SQLite 连接都已经启用了潜在的线程共享"
"（通过将 ``check_same_thread=False`` 属性传递给 ``pysqlite``）。然而，"
"``DatabaseWrapper`` 默认情况下仍然保留以前的行为，通过禁用线程共享，因此这不"
"会影响任何纯粹依赖 ORM 或 ``DatabaseWrapper.cursor()`` 的现有代码。"

msgid ""
"Finally, while it's now possible to pass connections between threads, Django "
"doesn't make any effort to synchronize access to the underlying backend. "
"Concurrency behavior is defined by the underlying backend implementation. "
"Check their documentation for details."
msgstr ""
"最后，尽管现在可以在线程之间传递连接，但 Django 并未尝试同步访问底层后端。并"
"发行为由底层后端实现定义。请查阅它们的文档以获取详细信息。"

msgid "``COMMENTS_BANNED_USERS_GROUP`` setting"
msgstr "``COMMENTS_BANNED_USERS_GROUP`` 配置"

msgid ""
"Django's comments has historically supported excluding the comments of a "
"special user group, but we've never documented the feature properly and "
"didn't enforce the exclusion in other parts of the app such as the template "
"tags. To fix this problem, we removed the code from the feed class."
msgstr ""
"Django 的评论历史上支持排除特殊用户组的评论，但我们从未正确记录此功能，并且没"
"有在应用程序的其他部分（如模板标签）中执行排除。为了解决这个问题，我们从 "
"feed 类中删除了代码。"

msgid ""
"If you rely on the feature and want to restore the old behavior, use a "
"custom comment model manager to exclude the user group, like this::"
msgstr ""
"如果您依赖此功能并希望恢复旧的行为，可以使用自定义评论模型管理器来排除用户"
"组，如下所示："

msgid ""
"Save this model manager in your custom comment app (e.g., in "
"``my_comments_app/managers.py``) and add it your custom comment app model::"
msgstr ""
"请将此模型管理器保存在您的自定义评论应用中（例如，在 ``my_comments_app/"
"managers.py`` 中），然后将其添加到您的自定义评论应用模型中："

msgid "``IGNORABLE_404_STARTS`` and ``IGNORABLE_404_ENDS`` settings"
msgstr "``IGNORABLE_404_STARTS`` 和 ``IGNORABLE_404_ENDS`` 配置"

msgid ""
"Until Django 1.3, it was possible to exclude some URLs from Django's :doc:"
"`404 error reporting</howto/error-reporting>` by adding prefixes to "
"``IGNORABLE_404_STARTS`` and suffixes to ``IGNORABLE_404_ENDS``."
msgstr ""
"在 Django 1.3 之前，可以通过在 ``IGNORABLE_404_STARTS`` 添加前缀和在 "
"``IGNORABLE_404_ENDS`` 添加后缀来将某些 URL 排除在 Django 的 :doc:`404 错误报"
"告 </howto/error-reporting>` 之外。"

msgid ""
"In Django 1.4, these two settings are superseded by :setting:"
"`IGNORABLE_404_URLS`, which is a list of compiled regular expressions. "
"Django won't send an email for 404 errors on URLs that match any of them."
msgstr ""
"在 Django 1.4 中，这两个设置被 :setting:`IGNORABLE_404_URLS` 取代，它是一个编"
"译后的正则表达式列表。Django 不会为匹配其中任何一个的 URL 的 404 错误发送电子"
"邮件。"

msgid ""
"Furthermore, the previous settings had some rather arbitrary default values::"
msgstr "此外，以前的设置具有一些相当任意的默认值："

msgid ""
"It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` "
"section or a ``favicon.ico``. As a consequence, the default values of :"
"setting:`IGNORABLE_404_URLS`, ``IGNORABLE_404_STARTS``, and "
"``IGNORABLE_404_ENDS`` are all now empty."
msgstr ""
"Django 不负责决定您的网站是否有一个遗留的 ``/cgi-bin/`` 部分或一个 ``favicon."
"ico``。因此，:setting:`IGNORABLE_404_URLS`、``IGNORABLE_404_STARTS`` 和 "
"``IGNORABLE_404_ENDS`` 的默认值现在都为空。"

msgid ""
"If you have customized ``IGNORABLE_404_STARTS`` or ``IGNORABLE_404_ENDS``, "
"or if you want to keep the old default value, you should add the following "
"lines in your settings file::"
msgstr ""
"如果您已经定制了 ``IGNORABLE_404_STARTS`` 或 ``IGNORABLE_404_ENDS``，或者希望"
"保留旧的默认值，您应该在您的设置文件中添加以下行："

msgid ""
"Don't forget to escape characters that have a special meaning in a regular "
"expression, such as periods."
msgstr "不要忘记转义在正则表达式中具有特殊含义的字符，例如句点。"

msgid "CSRF protection extended to PUT and DELETE"
msgstr "CSRF 保护扩展到 PUT 和 DELETE 操作"

msgid ""
"Previously, Django's :doc:`CSRF protection </ref/csrf/>` provided protection "
"only against POST requests. Since use of PUT and DELETE methods in AJAX "
"applications is becoming more common, we now protect all methods not defined "
"as safe by :rfc:`2616` -- i.e., we exempt GET, HEAD, OPTIONS and TRACE, and "
"we enforce protection on everything else."
msgstr ""
"以前，Django 的 :doc:`CSRF 保护 </ref/csrf/>` 仅对 POST 请求提供保护。由于在 "
"AJAX 应用中使用 PUT 和 DELETE 方法变得越来越常见，因此现在我们对所有未被 :"
"rfc:`2616` 定义为安全的方法提供保护 — 即，我们排除了 GET、HEAD、OPTIONS 和 "
"TRACE，对其他一切进行保护。"

msgid ""
"If you're using PUT or DELETE methods in AJAX applications, please see the :"
"ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""
"如果您在 AJAX 应用中使用 PUT 或 DELETE 方法，请参阅有关使用 AJAX 和 CSRF 的 :"
"ref:`说明 <csrf-ajax>`。"

msgid "Password reset view now accepts ``subject_template_name``"
msgstr "密码重置视图现在接受 ``subject_template_name``"

msgid ""
"The ``password_reset`` view in ``django.contrib.auth`` now accepts a "
"``subject_template_name`` parameter, which is passed to the password save "
"form as a keyword argument. If you are using this view with a custom "
"password reset form, then you will need to ensure your form's ``save()`` "
"method accepts this keyword argument."
msgstr ""
"``django.contrib.auth`` 中的 ``password_reset`` 视图现在接受一个 "
"``subject_template_name`` 参数，该参数作为关键字参数传递给密码保存表单。如果"
"您正在使用自定义密码重置表单与此视图一起使用，那么您需要确保您的表单的 "
"``save()`` 方法接受此关键字参数。"

msgid "``django.core.template_loaders``"
msgstr "``django.core.template_loaders``"

msgid ""
"This was an alias to ``django.template.loader`` since 2005, and we've "
"removed it without emitting a warning due to the length of the deprecation. "
"If your code still referenced this, please use ``django.template.loader`` "
"instead."
msgstr ""
"自 2005 年以来，这是对 ``django.template.loader`` 的别名，由于过长的弃用期，"
"我们已将其删除而不发出警告。如果您的代码仍然引用了它，请改用 ``django."
"template.loader``。"

msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr "``django.db.models.fields.URLField.verify_exists``"

msgid ""
"This functionality has been removed due to intractable performance and "
"security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""
"由于无法解决的性能和安全问题，已删除了此功能。应删除任何现有的 "
"``verify_exists`` 用法。"

msgid "``django.core.files.storage.Storage.open``"
msgstr "``django.core.files.storage.Storage.open``"

msgid ""
"The ``open`` method of the base Storage class used to take an obscure "
"parameter ``mixin`` that allowed you to dynamically change the base classes "
"of the returned file object. This has been removed. In the rare case you "
"relied on the ``mixin`` parameter, you can easily achieve the same by "
"overriding the ``open`` method, like this::"
msgstr ""
"基本 Storage 类的 ``open`` 方法曾经接受一个晦涩的参数 ``mixin``，允许您动态更"
"改返回的文件对象的基类。这已被移除。在极少数情况下，如果您依赖于 ``mixin`` 参"
"数，您可以通过覆盖 ``open`` 方法轻松实现相同的效果，如下所示："

msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr "YAML 反序列化器现在使用 ``yaml.safe_load``"

msgid ""
"``yaml.load`` is able to construct any Python object, which may trigger "
"arbitrary code execution if you process a YAML document that comes from an "
"untrusted source. This feature isn't necessary for Django's YAML "
"deserializer, whose primary use is to load fixtures consisting of simple "
"objects. Even though fixtures are trusted data, the YAML deserializer now "
"uses ``yaml.safe_load`` for additional security."
msgstr ""
"``yaml.load`` 能够构造任何 Python 对象，如果处理来自不受信任的源的 YAML 文"
"档，可能触发任意代码执行。这个特性对于 Django 的 YAML 反序列化器并不必要，因"
"为它的主要用途是加载由简单对象组成的 fixture。尽管 fixture 是可信数据，但 "
"YAML 反序列化器现在使用 ``yaml.safe_load`` 来提供额外的安全性。"

msgid "Session cookies now have the ``httponly`` flag by default"
msgstr "会话 cookie 现在默认情况下具有 ``httponly`` 标志"

msgid ""
"Session cookies now include the ``httponly`` attribute by default to help "
"reduce the impact of potential XSS attacks. As a consequence of this change, "
"session cookie data, including ``sessionid``, is no longer accessible from "
"JavaScript in many browsers. For strict backwards compatibility, use "
"``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""
"为了减少潜在的 XSS 攻击影响，会话 cookie 现在默认包含 ``httponly`` 属性。由于"
"这个改变，许多浏览器中的 JavaScript 不再可以访问会话 cookie 数据，包括 "
"``sessionid``。为了严格的向后兼容性，在您的设置文件中使用 "
"``SESSION_COOKIE_HTTPONLY = False``。"

msgid "The :tfilter:`urlize` filter no longer escapes every URL"
msgstr ":tfilter:`urlize` 过滤器不再对每个 URL 进行转义"

msgid ""
"When a URL contains a ``%xx`` sequence, where ``xx`` are two hexadecimal "
"digits, :tfilter:`urlize` now assumes that the URL is already escaped and "
"doesn't apply URL escaping again. This is wrong for URLs whose unquoted form "
"contains a ``%xx`` sequence, but such URLs are very unlikely to happen in "
"the wild, because they would confuse browsers too."
msgstr ""
"当一个 URL 包含一个 ``%xx`` 序列，其中 ``xx`` 是两个十六进制数字时，:tfilter:"
"`urlize` 现在假定该 URL 已经被转义，不会再次应用 URL 转义。这对于其未引用形式"
"包含 ``%xx`` 序列的 URL 是不正确的，但这种情况在实际使用中非常罕见，因为它们"
"也会混淆浏览器。"

msgid "``assertTemplateUsed`` and ``assertTemplateNotUsed`` as context manager"
msgstr ""
"``assertTemplateUsed`` 和 ``assertTemplateNotUsed`` 现在作为上下文管理器可用"

msgid ""
"It's now possible to check whether a template was used within a block of "
"code with :meth:`~django.test.SimpleTestCase.assertTemplateUsed` and :meth:"
"`~django.test.SimpleTestCase.assertTemplateNotUsed`. And they can be used as "
"a context manager::"
msgstr ""
"现在可以使用 :meth:`~django.test.SimpleTestCase.assertTemplateUsed` 和 :meth:"
"`~django.test.SimpleTestCase.assertTemplateNotUsed` 来检查模板是否在代码块中"
"被使用，并且它们可以作为上下文管理器使用："

msgid "See the :ref:`assertion documentation<assertions>` for more."
msgstr "更多信息请查看 :ref:`断言文档 <assertions>`。"

msgid "Database connections after running the test suite"
msgstr "运行测试套件后的数据库连接"

msgid ""
"The default test runner no longer restores the database connections after "
"tests' execution. This prevents the production database from being exposed "
"to potential threads that would still be running and attempting to create "
"new connections."
msgstr ""
"默认的测试运行器在测试执行后不再恢复数据库连接。这可以防止生产数据库暴露给可"
"能仍在运行并尝试创建新连接的潜在线程。"

msgid ""
"If your code relied on connections to the production database being created "
"after tests' execution, then you can restore the previous behavior by "
"subclassing ``DjangoTestRunner`` and overriding its ``teardown_databases()`` "
"method."
msgstr ""
"如果您的代码依赖于在测试执行后创建到生产数据库的连接，那么您可以通过子类化 "
"``DjangoTestRunner`` 并重写其 ``teardown_databases()`` 方法来恢复以前的行为。"

msgid "Output of :djadmin:`manage.py help <help>`"
msgstr ":djadmin:`manage.py help <help>` 的输出"

msgid ""
":djadmin:`manage.py help <help>` now groups available commands by "
"application. If you depended on the output of this command -- if you parsed "
"it, for example -- then you'll need to update your code. To get a list of "
"all available management commands in a script, use :djadmin:`manage.py help "
"--commands <help>` instead."
msgstr ""
":djadmin:`manage.py help <help>` 现在按应用程序分组列出可用命令。如果你依赖于"
"此命令的输出，例如进行解析，那么你需要更新你的代码。要在脚本中获取所有可用管"
"理命令的列表，请改用 :djadmin:`manage.py help --commands <help>`。"

msgid "``extends`` template tag"
msgstr "``extends`` 模板标签"

msgid ""
"Previously, the :ttag:`extends` tag used a buggy method of parsing "
"arguments, which could lead to it erroneously considering an argument as a "
"string literal when it wasn't. It now uses ``parser.compile_filter``, like "
"other tags."
msgstr ""
"以前，:ttag:`extends` 标签使用了一种有缺陷的参数解析方法，这可能会导致它错误"
"地将一个参数视为字符串文字，当它实际上不是字符串文字时。现在它使用 ``parser."
"compile_filter``，与其他标签类似。"

msgid ""
"The internals of the tag aren't part of the official stable API, but in the "
"interests of full disclosure, the ``ExtendsNode.__init__`` definition has "
"changed, which may break any custom tags that use this class."
msgstr ""
"标签的内部不是官方稳定 API 的一部分，但为了充分披露，``ExtendsNode."
"__init__`` 的定义已更改，这可能会破坏使用此类的自定义标签。"

msgid "Loading some incomplete fixtures no longer works"
msgstr "加载某些不完整的固件将不再工作"

msgid ""
"Prior to 1.4, a default value was inserted for fixture objects that were "
"missing a specific date or datetime value when auto_now or auto_now_add was "
"set for the field. This was something that should not have worked, and in "
"1.4 loading such incomplete fixtures will fail. Because fixtures are a raw "
"import, they should explicitly specify all field values, regardless of field "
"options on the model."
msgstr ""
"在 1.4 之前，当字段设置了 auto _ now 或 auto _ now _ add 时，如果固件对象缺少"
"特定的日期或日期时间值，则会插入一个默认值。这是本不应该工作的，而在 1.4 中，"
"加载这样的不完整固件将会失败。因为固件是原始导入，所以它们应该明确指定所有字"
"段值，而不考虑模型上的字段选项。"

msgid "Development Server Multithreading"
msgstr "开发服务器多线程"

msgid ""
"The development server is now is multithreaded by default. Use the :option:"
"`runserver --nothreading` option to disable the use of threading in the "
"development server:"
msgstr ""
"开发服务器现在默认为多线程模式。使用 :option:`runserver --nothreading` 选项来"
"禁用开发服务器中的多线程。"

msgid "Attributes disabled in markdown when safe mode set"
msgstr "在设置安全模式时，markdown 中的属性被禁用"

msgid ""
"Prior to Django 1.4, attributes were included in any markdown output "
"regardless of safe mode setting of the filter. With version > 2.1 of the "
"Python-Markdown library, an enable_attributes option was added. When the "
"safe argument is passed to the markdown filter, both the ``safe_mode=True`` "
"and ``enable_attributes=False`` options are set. If using a version of the "
"Python-Markdown library less than 2.1, a warning is issued that the output "
"is insecure."
msgstr ""
"在 Django 1.4 之前，无论过滤器的 safe 模式设置如何，属性都会包含在任何 "
"markdown 输出中。在 Python-Markdown 库的版本 > 2.1 中，添加了一个 "
"enable_attributes 选项。如果将 safe 参数传递给 markdown 过滤器，则同时设置 "
"``safe_mode=True`` 和 ``enable_attributes=False`` 选项。如果使用的是 Python-"
"Markdown 库的版本小于 2.1，则会发出一个警告，指出输出不安全。"

msgid "FormMixin get_initial returns an instance-specific dictionary"
msgstr "FormMixin 的 get_initial 返回特定实例的字典"

msgid ""
"In Django 1.3, the ``get_initial`` method of the :class:`django.views."
"generic.edit.FormMixin` class was returning the class ``initial`` "
"dictionary. This has been fixed to return a copy of this dictionary, so form "
"instances can modify their initial data without messing with the class "
"variable."
msgstr ""
"在 Django 1.3 中，:class:`django.views.generic.edit.FormMixin` 类的 "
"``get_initial`` 方法返回了类变量 ``initial`` 字典。现在已修复为返回该字典的副"
"本，因此表单实例可以修改其初始数据，而不会影响类变量。"

msgid "Features deprecated in 1.4"
msgstr "在 1.4 中被废弃的功能"

msgid "Old styles of calling ``cache_page`` decorator"
msgstr "调用 ``cache_page`` 装饰器的旧样式是："

msgid ""
"Some legacy ways of calling :func:`~django.views.decorators.cache."
"cache_page` have been deprecated. Please see the documentation for the "
"correct way to use this decorator."
msgstr ""
"已经弃用了一些旧的调用 :func:`~django.views.decorators.cache.cache_page` 的方"
"式。请查阅文档以了解正确使用此装饰器的方法。"

msgid "Support for PostgreSQL versions older than 8.2"
msgstr "支持早于 8.2 版本的 PostgreSQL"

msgid ""
"Django 1.3 dropped support for PostgreSQL versions older than 8.0, and we "
"suggested using a more recent version because of performance improvements "
"and, more importantly, the end of upstream support periods for 8.0 and 8.1 "
"was near (November 2010)."
msgstr ""
"Django 1.3 放弃了对早于 8.0 版本的 PostgreSQL 的支持，我们建议使用更新的版"
"本，因为性能得到了改进，更重要的是，8.0 和 8.1 的上游支持期即将结束（2010 年 "
"11 月）。"

msgid ""
"Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL "
"version it officially supports."
msgstr ""
"Django 1.4 进一步执行了该政策，并将 8.2 设置为官方支持的最低 PostgreSQL 版"
"本。"

msgid "Request exceptions are now always logged"
msgstr "请求异常现在总是被记录"

msgid ""
"When we added :doc:`logging support </topics/logging/>` in Django in 1.3, "
"the admin error email support was moved into the :class:`django.utils.log."
"AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to "
"maintain the established behavior of error emails, the ``'django.request'`` "
"logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""
"当我们在 Django 1.3 中添加了 :doc:`日志支持 </topics/logging/>` 时，管理后台"
"错误电子邮件支持被移动到 :class:`django.utils.log.AdminEmailHandler`，并附加"
"到 ``'django.request'`` 记录器上。为了保持错误电子邮件的已建立行为，只有在 :"
"setting:`DEBUG` 为 ``False`` 时才会调用 ``'django.request'`` 记录器。"

msgid ""
"To increase the flexibility of error logging for requests, the ``'django."
"request'`` logger is now called regardless of the value of :setting:`DEBUG`, "
"and the default settings file for new projects now includes a separate "
"filter attached to :class:`django.utils.log.AdminEmailHandler` to prevent "
"admin error emails in ``DEBUG`` mode::"
msgstr ""
"为了增加请求的错误日志记录的灵活性，现在无论 :setting:`DEBUG` 的值如何，都会"
"调用 ``'django.request'`` 记录器，并且新项目的默认设置文件现在包括一个附加"
"到 :class:`django.utils.log.AdminEmailHandler` 的独立过滤器，以防止在 "
"``DEBUG`` 模式下发送管理错误电子邮件："

msgid ""
"If your project was created prior to this change, your :setting:`LOGGING` "
"setting will not include this new filter. In order to maintain backwards-"
"compatibility, Django will detect that your ``'mail_admins'`` handler "
"configuration includes no ``'filters'`` section and will automatically add "
"this filter for you and issue a pending-deprecation warning. This will "
"become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-"
"compatibility shim will be removed entirely."
msgstr ""
"如果您的项目在这个改变之前创建的，那么您的 :setting:`LOGGING` 设置将不包括这"
"个新的过滤器。为了保持向后兼容性，Django 将检测到您的 ``'mail_admins'`` 处理"
"程序配置不包括 ``'filters'`` 部分，并将自动为您添加这个过滤器并发出一个即将弃"
"用的警告。在 Django 1.5 中，这将成为一个弃用警告，在 Django 1.6 中，向后兼容"
"性的 shim 将被完全移除。"

msgid ""
"The existence of any ``'filters'`` key under the ``'mail_admins'`` handler "
"will disable this backward-compatibility shim and deprecation warning."
msgstr ""
"在 ``'mail_admins'`` 处理程序下存在任何 ``'filters'`` 键将禁用这个向后兼容性 "
"shim 和弃用警告。"

msgid "``django.conf.urls.defaults``"
msgstr "``django.conf.urls.defaults``"

msgid ""
"Until Django 1.3, the ``include()``, ``patterns()``, and ``url()`` "
"functions, plus :data:`~django.conf.urls.handler404` and :data:`~django.conf."
"urls.handler500` were located in a ``django.conf.urls.defaults`` module."
msgstr ""
"在 Django 1.3 之前，``include()``, ``patterns()``, 和 ``url()`` 函数，以及 :"
"data:`~django.conf.urls.handler404` 和 :data:`~django.conf.urls.handler500` "
"都位于一个名为 ``django.conf.urls.defaults`` 的模块中。"

msgid "In Django 1.4, they live in :mod:`django.conf.urls`."
msgstr "在 Django 1.4 中，它们位于 :mod:`django.conf.urls` 模块中。"

msgid "``django.contrib.databrowse``"
msgstr "``django.contrib.databrowse``"

msgid ""
"Databrowse has not seen active development for some time, and this does not "
"show any sign of changing. There had been a suggestion for a `GSOC project`_ "
"to integrate the functionality of databrowse into the admin, but no progress "
"was made. While Databrowse has been deprecated, an enhancement of ``django."
"contrib.admin`` providing a similar feature set is still possible."
msgstr ""
"Databrowse 已经有一段时间没有进行积极开发了，而且目前看来也没有改变的迹象。曾"
"经有一个关于将 Databrowse 的功能整合到管理员界面的 `GSOC 项目`_ 的建议，但没"
"有取得进展。虽然 Databrowse 已经被弃用，但仍然有可能通过增强 ``django."
"contrib.admin`` 来提供类似的功能集。"

msgid ""
"The code that powers Databrowse is licensed under the same terms as Django "
"itself, so it's available to be adopted by an individual or group as a third-"
"party project."
msgstr ""
"支持 Databrowse 的代码在与 Django 相同的条款下获得许可，因此个人或团队可以将"
"其作为第三方项目采用。"

msgid "``django.core.management.setup_environ``"
msgstr "``django.core.management.setup_environ``"

msgid ""
"This function temporarily modified ``sys.path`` in order to make the parent "
"\"project\" directory importable under the old flat :djadmin:`startproject` "
"layout. This function is now deprecated, as its path workarounds are no "
"longer needed with the new ``manage.py`` and default project layout."
msgstr ""
"这个函数在旧的扁平 :djadmin:`startproject` 布局下，为了使父级 \"project\" 目"
"录可导入，临时修改了 ``sys.path``。由于新的 ``manage.py`` 和默认项目布局不再"
"需要路径的解决办法，因此此函数现在已经弃用。"

msgid ""
"This function was never documented or part of the public API, but it was "
"widely recommended for use in setting up a \"Django environment\" for a user "
"script. These uses should be replaced by setting the :envvar:"
"`DJANGO_SETTINGS_MODULE` environment variable or using :func:`django.conf."
"settings.configure`."
msgstr ""
"这个函数从未被文档化或列为公共 API 的一部分，但它曾广泛推荐用于为用户脚本设"
"置 \"Django 环境\"。这些用法应该通过设置 :envvar:`DJANGO_SETTINGS_MODULE` 环"
"境变量或使用 :func:`django.conf.settings.configure` 来替代。"

msgid "``django.core.management.execute_manager``"
msgstr "``django.core.management.execute_manager``"

msgid ""
"This function was previously used by ``manage.py`` to execute a management "
"command. It is identical to ``django.core.management."
"execute_from_command_line``, except that it first calls ``setup_environ``, "
"which is now deprecated. As such, ``execute_manager`` is also deprecated; "
"``execute_from_command_line`` can be used instead. Neither of these "
"functions is documented as part of the public API, but a deprecation path is "
"needed due to use in existing ``manage.py`` files."
msgstr ""
"这个函数以前被 ``manage.py`` 用于执行管理命令。它与 ``django.core.management."
"execute_from_command_line`` 完全相同，只是它首先调用了 ``setup_environ``，而"
"这个函数现在已经弃用。因此，``execute_manager`` 也已经弃用；可以使用 "
"``execute_from_command_line`` 代替。虽然这两个函数都没有被文档化为公共 API 的"
"一部分，但由于在现有的 ``manage.py`` 文件中的使用，需要一个弃用路径。"

msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr "模板过滤器的 ``is_safe`` 和 ``needs_autoescape`` 属性："

msgid ""
"Two flags, ``is_safe`` and ``needs_autoescape``, define how each template "
"filter interacts with Django's auto-escaping behavior. They used to be "
"attributes of the filter function::"
msgstr ""
"两个标志，``is_safe`` 和 ``needs_autoescape``，定义了每个模板过滤器与 Django "
"的自动转义行为的交互方式。它们以前是过滤器函数的属性："

msgid ""
"However, this technique caused some problems in combination with decorators, "
"especially :func:`@stringfilter <django.template.defaultfilters."
"stringfilter>`. Now, the flags are keyword arguments of :meth:`@register."
"filter <django.template.Library.filter>`::"
msgstr ""
"然而，这种技术在与装饰器结合使用时会引发一些问题，特别是 :func:"
"`@stringfilter <django.template.defaultfilters.stringfilter>`。现在，这些标志"
"是 :meth:`@register.filter <django.template.Library.filter>` 的关键字参数："

msgid ""
"See :ref:`filters and auto-escaping <filters-auto-escaping>` for more "
"information."
msgstr ""
"请参阅 :ref:`过滤器和自动转义 <filters-auto-escaping>` 以获取更多信息。"

msgid "Wildcard expansion of application names in ``INSTALLED_APPS``"
msgstr "在 ``INSTALLED_APPS`` 中应用程序名称的通配符扩展"

msgid ""
"Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in "
"application names, like ``django.contrib.*``. The expansion was performed by "
"a filesystem-based implementation of ``from <package> import *``. "
"Unfortunately, this can't be done reliably."
msgstr ""
"在 Django 1.3 之前，:setting:`INSTALLED_APPS` 中接受应用程序名称中的通配符，"
"例如 ``django.contrib.*``。扩展是通过基于文件系统的 ``from <package> import "
"*`` 实现的。不幸的是，这种方法无法可靠地执行。"

msgid ""
"This behavior was never documented. Since it is unpythonic, it was removed "
"in Django 1.4. If you relied on it, you must edit your settings file to list "
"all your applications explicitly."
msgstr ""
"这种行为从未被记录。由于它不符合 Python 的风格，所以在 Django 1.4 中被移除"
"了。如果您依赖于它，您必须编辑设置文件，明确列出所有应用程序。"

msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr "``HttpRequest.raw_post_data`` 已经重命名为 ``HttpRequest.body``"

msgid ""
"This attribute was confusingly named ``HttpRequest.raw_post_data``, but it "
"actually provided the body of the HTTP request. It's been renamed to "
"``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""
"这个属性的命名有点混淆，虽然它被命名为 ``HttpRequest.raw_post_data``，但它实"
"际上提供了 HTTP 请求的主体。它已被重命名为 ``HttpRequest.body``，而 "
"``HttpRequest.raw_post_data`` 已被弃用。"

msgid ""
"``django.contrib.sitemaps`` bug fix with potential performance implications"
msgstr "``django.contrib.sitemaps`` 中的 bug 修复可能会影响性能"

msgid ""
"In previous versions, ``Paginator`` objects used in sitemap classes were "
"cached, which could result in stale site maps. We've removed the caching, so "
"each request to a site map now creates a new Paginator object and calls the :"
"attr:`~django.contrib.sitemaps.Sitemap.items()` method of the :class:"
"`~django.contrib.sitemaps.Sitemap` subclass. Depending on what your "
"``items()`` method is doing, this may have a negative performance impact. To "
"mitigate the performance impact, consider using the :doc:`caching framework "
"</topics/cache>` within your ``Sitemap`` subclass."
msgstr ""
"在之前的版本中，用于站点地图类的 ``Paginator`` 对象被缓存，这可能导致站点地图"
"过期。我们已经移除了缓存，所以现在每次请求站点地图都会创建一个新的 Paginator "
"对象，并调用 :class:`~django.contrib.sitemaps.Sitemap` 子类的 :attr:`~django."
"contrib.sitemaps.Sitemap.items()` 方法。根据你的 ``items()`` 方法的具体操作，"
"这可能会对性能产生负面影响。为了缓解性能影响，考虑在你的 ``Sitemap`` 子类中使"
"用 :doc:`缓存框架 </topics/cache>`。"

msgid "Versions of Python-Markdown earlier than 2.1"
msgstr "早于 2.1 版本的 Python-Markdown"

msgid ""
"Versions of Python-Markdown earlier than 2.1 do not support the option to "
"disable attributes. As a security issue, earlier versions of this library "
"will not be supported by the markup contrib app in 1.5 under an accelerated "
"deprecation timeline."
msgstr ""
"早于 2.1 版本的 Python-Markdown 不支持禁用属性的选项。作为一个安全问题，在加"
"速弃用时间表下，1.5 版本的 markup contrib 应用程序将不支持此库的早期版本。"

msgid "Django 1.4.1 release notes"
msgstr "Django 1.4.1 版本发行说明"

msgid ""
"This is the first security release in the Django 1.4 series, fixing several "
"security issues in Django 1.4. Django 1.4.1 is a recommended upgrade for all "
"users of Django 1.4."
msgstr ""
"这是 Django 1.4 系列中的第一个安全发布，修复了 Django 1.4 中的几个安全问题。"
"对于所有 Django 1.4 用户，推荐升级到 Django 1.4.1 。"

msgid "Django 1.4.10 release notes"
msgstr "Django 1.4.10 版本发行说明"

msgid "*November 6, 2013*"
msgstr "*2013 年 11 月 6 日*"

msgid "Django 1.4.10 fixes a Python-compatibility bug in the 1.4 series."
msgstr "Django 1.4.10 修复了 1.4 系列中的一个 Python 兼容性错误。"

msgid ""
"Django 1.4.9 inadvertently introduced issues with Python 2.5 compatibility. "
"Django 1.4.10 restores Python 2.5 compatibility. This was issue #21362 in "
"Django's Trac."
msgstr ""
"Django 1.4.9 无意中引入了与 Python 2.5 兼容性的问题。 Django 1.4.10 恢复了 "
"Python 2.5 的兼容性。这是 Django Trac 中的问题 #21362 。"

msgid "Django 1.4.11 release notes"
msgstr "Django 1.4.11 版本发行说明"

msgid "*April 21, 2014*"
msgstr "*2014 年 4 月 21 日*"

msgid ""
"Django 1.4.11 fixes three security issues in 1.4.10. Additionally, Django's "
"vendored version of six, ``django.utils.six``, has been upgraded to the "
"latest release (1.6.1)."
msgstr ""
"Django 1.4.11 修复了 1.4.10 中的三个安全问题。另外，Django 中内置的 six 版"
"本，即 ``django.utils.six``，已经升级到最新版本 (1.6.1)。"

msgid "Unexpected code execution using ``reverse()``"
msgstr "使用 ``reverse()`` 时出现意外的代码执行"

msgid ""
"Django's URL handling is based on a mapping of regex patterns (representing "
"the URLs) to callable views, and Django's own processing consists of "
"matching a requested URL against those patterns to determine the appropriate "
"view to invoke."
msgstr ""
"Django 的 URL 处理基于正则表达式模式（表示 URL）到可调用视图的映射，而 "
"Django 自身的处理包括将请求的 URL 与这些模式进行匹配，以确定要调用的适当视"
"图。"

msgid ""
"Django also provides a convenience function -- ``reverse()`` -- which "
"performs this process in the opposite direction. The ``reverse()`` function "
"takes information about a view and returns a URL which would invoke that "
"view. Use of ``reverse()`` is encouraged for application developers, as the "
"output of ``reverse()`` is always based on the current URL patterns, meaning "
"developers do not need to change other code when making changes to URLs."
msgstr ""
"Django 还提供了一个方便的函数 -- ``reverse()`` -- 用于执行与之相反的过程。"
"``reverse()`` 函数接收有关视图的信息，并返回调用该视图的 URL。鼓励应用程序开"
"发人员使用 ``reverse()``，因为``reverse()`` 的输出总是基于当前的 URL 模式，这"
"意味着开发人员在更改 URL 时不需要修改其他代码。"

msgid ""
"One argument signature for ``reverse()`` is to pass a dotted Python path to "
"the desired view. In this situation, Django will import the module indicated "
"by that dotted path as part of generating the resulting URL. If such a "
"module has import-time side effects, those side effects will occur."
msgstr ""
"``reverse()`` 的一个参数签名是传递所需视图的点分 Python 路径。在这种情况下，"
"Django 将导入由该点分路径指示的模块，作为生成结果 URL 的一部分。如果这样的模"
"块在导入时具有副作用，那么这些副作用将会发生。"

msgid ""
"Thus it is possible for an attacker to cause unexpected code execution, "
"given the following conditions:"
msgstr "因此，在满足以下条件时，攻击者可能导致意外的代码执行："

msgid ""
"One or more views are present which construct a URL based on user input "
"(commonly, a \"next\" parameter in a querystring indicating where to "
"redirect upon successful completion of an action)."
msgstr ""
"存在一个或多个视图，它们根据用户输入构建 URL（通常是查询字符串中的“next”参"
"数，指示在操作成功完成后重定向到哪里）。"

msgid ""
"One or more modules are known to an attacker to exist on the server's Python "
"import path, which perform code execution with side effects on importing."
msgstr ""
"攻击者知道服务器的 Python 导入路径上存在一个或多个模块，在导入时执行具有副作"
"用的代码。"

msgid ""
"To remedy this, ``reverse()`` will now only accept and import dotted paths "
"based on the view-containing modules listed in the project's :doc:`URL "
"pattern configuration </topics/http/urls>`, so as to ensure that only "
"modules the developer intended to be imported in this fashion can or will be "
"imported."
msgstr ""
"为了解决这个问题，``reverse()`` 现在将只接受并导入基于项目的 :doc:`URL 模式配"
"置 </topics/http/urls>` 中列出的包含视图的模块的点分路径，以确保只有开发人员"
"打算以这种方式导入的模块才能被导入。"

msgid "Caching of anonymous pages could reveal CSRF token"
msgstr "缓存匿名页面可能会泄露 CSRF 令牌"

msgid ""
"Django includes both a :doc:`caching framework </topics/cache>` and a system "
"for :doc:`preventing cross-site request forgery (CSRF) attacks </ref/csrf/"
">`. The CSRF-protection system is based on a random nonce sent to the client "
"in a cookie which must be sent by the client on future requests and, in "
"forms, a hidden value which must be submitted back with the form."
msgstr ""
"Django 包括了一个 :doc:`缓存框架 </topics/cache>` 和一个用于 :doc:`防止跨站点"
"请求伪造 (CSRF) 攻击 </ref/csrf/>` 的系统。CSRF 保护系统基于一个随机的 "
"nonce，它会在 cookie 中发送给客户端，在将来的请求中客户端必须发送该 nonce，同"
"时在表单中还有一个隐藏值，必须与表单一起提交。"

msgid ""
"The caching framework includes an option to cache responses to anonymous (i."
"e., unauthenticated) clients."
msgstr "缓存框架包括一个选项，用于缓存对匿名（即未经认证的）客户端的响应。"

msgid ""
"When the first anonymous request to a given page is by a client which did "
"not have a CSRF cookie, the cache framework will also cache the CSRF cookie "
"and serve the same nonce to other anonymous clients who do not have a CSRF "
"cookie. This can allow an attacker to obtain a valid CSRF cookie value and "
"perform attacks which bypass the check for the cookie."
msgstr ""
"当第一个对指定页面的匿名请求来自没有 CSRF cookie 的客户端时，缓存框架还会缓"
"存 CSRF cookie，并为没有 CSRF cookie 的其他匿名客户端提供相同的随机数。这可能"
"使攻击者获得有效的 CSRF cookie 值，并执行绕过 cookie 检查的攻击。"

msgid ""
"To remedy this, the caching framework will no longer cache such responses. "
"The heuristic for this will be:"
msgstr "为了解决这个问题，缓存框架将不再缓存此类响应。启发式方法将是："

msgid "If the incoming request did not submit any cookies, and"
msgstr "如果传入的请求没有提交任何 cookie，且"

msgid "If the response did send one or more cookies, and"
msgstr "如果响应发送了一个或多个 cookie，且"

msgid ""
"If the ``Vary: Cookie`` header is set on the response, then the response "
"will not be cached."
msgstr "如果在响应中设置了 ``Vary: Cookie`` 头，那么该响应将不会被缓存。"

msgid "MySQL typecasting"
msgstr "MySQL 类型转换"

msgid ""
"The MySQL database is known to \"typecast\" on certain queries; for example, "
"when querying a table which contains string values, but using a query which "
"filters based on an integer value, MySQL will first silently coerce the "
"strings to integers and return a result based on that."
msgstr ""
"众所周知，MySQL 数据库会对某些查询进行“类型转换”；例如，在查询包含字符串值的"
"表时，但使用基于整数值进行过滤的查询，MySQL 首先会默默地将字符串强制转换为整"
"数，然后返回基于该整数的结果。"

msgid ""
"If a query is performed without first converting values to the appropriate "
"type, this can produce unexpected results, similar to what would occur if "
"the query itself had been manipulated."
msgstr ""
"如果在未先将值转换为适当类型的情况下执行查询，这可能产生意外的结果，类似于查"
"询本身被操作时会发生的情况。"

msgid ""
"Django's model field classes are aware of their own types and most such "
"classes perform explicit conversion of query arguments to the correct "
"database-level type before querying. However, three model field classes did "
"not correctly convert their arguments:"
msgstr ""
"Django 的模型字段类知道它们自己的类型，大多数此类字段在查询之前会将查询参数明"
"确转换为正确的数据库级别类型。然而，有三个模型字段类没有正确地转换它们的参"
"数："

msgid ":class:`~django.db.models.FilePathField`"
msgstr ":class:`~django.db.models.FilePathField`"

msgid ":class:`~django.db.models.GenericIPAddressField`"
msgstr ":class:`~django.db.models.GenericIPAddressField`"

msgid "``IPAddressField``"
msgstr "``IPAddressField``"

msgid ""
"These three fields have been updated to convert their arguments to the "
"correct types before querying."
msgstr "在查询之前，这三个字段已经更新为将参数转换为正确的类型。"

msgid ""
"Additionally, developers of custom model fields are now warned via "
"documentation to ensure their custom field classes will perform appropriate "
"type conversions, and users of the :meth:`raw() <django.db.models.query."
"QuerySet.raw>` and :meth:`extra() <django.db.models.query.QuerySet.extra>` "
"query methods -- which allow the developer to supply raw SQL or SQL "
"fragments -- will be advised to ensure they perform appropriate manual type "
"conversions prior to executing queries."
msgstr ""
"此外，自定义模型字段的开发人员现在通过文档受到警告，需要确保他们的自定义字段"
"类能够执行适当的类型转换，以及使用 :meth:`raw() <django.db.models.query."
"QuerySet.raw>` 和 :meth:`extra() <django.db.models.query.QuerySet.extra>` 查"
"询方法的用户将被建议确保在执行查询之前进行适当的手动类型转换，因为这些方法允"
"许开发人员提供原始 SQL 或 SQL 片段。"

msgid "Django 1.4.12 release notes"
msgstr "Django 1.4.12 版本发行说明"

msgid "*April 28, 2014*"
msgstr "*2014 年 4 月 28 日*"

msgid "Django 1.4.12 fixes a regression in the 1.4.11 security release."
msgstr "Django 1.4.12 修复了 1.4.11 安全发布中的一个回归问题。"

msgid ""
"Restored the ability to ``reverse()`` views created using :func:`functools."
"partial()` (:ticket:`22486`)."
msgstr ""
"已恢复了使用 :func:`functools.partial()` 创建的视图的 ``reverse()`` 能力 (:"
"ticket:`22486`)。"

msgid "Django 1.4.13 release notes"
msgstr "Django 1.4.13 版本发行说明"

msgid "*May 14, 2014*"
msgstr "*2014 年 5 月 14 日*"

msgid "Django 1.4.13 fixes two security issues in 1.4.12."
msgstr "Django 1.4.13 修复了 1.4.12 中的两个安全问题。"

msgid "Caches may incorrectly be allowed to store and serve private data"
msgstr "缓存可能会错误地允许存储和提供私有数据"

msgid ""
"In certain situations, Django may allow caches to store private data related "
"to a particular session and then serve that data to requests with a "
"different session, or no session at all. This can lead to information "
"disclosure and can be a vector for cache poisoning."
msgstr ""
"在某些情况下，Django 可能允许缓存存储与特定会话相关的私有数据，然后将该数据提"
"供给具有不同会话或根本没有会话的请求。这可能导致信息泄露，并可能成为缓存中毒"
"的途径。"

msgid ""
"When using Django sessions, Django will set a ``Vary: Cookie`` header to "
"ensure caches do not serve cached data to requests from other sessions. "
"However, older versions of Internet Explorer (most likely only Internet "
"Explorer 6, and Internet Explorer 7 if run on Windows XP or Windows Server "
"2003) are unable to handle the ``Vary`` header in combination with many "
"content types. Therefore, Django would remove the header if the request was "
"made by Internet Explorer."
msgstr ""
"在使用 Django 会话时，Django 会设置一个 ``Vary: Cookie`` 头，以确保缓存不会向"
"来自其他会话的请求提供缓存的数据。但是，较旧版本的 Internet Explorer（可能只"
"有 Internet Explorer 6，以及如果在 Windows XP 或 Windows Server 2003 上运行"
"的 Internet Explorer 7）无法处理 ``Vary`` 头与许多内容类型的组合。因此，如果"
"请求是由 Internet Explorer 发出的，Django 会删除该头。"

msgid ""
"To remedy this, the special behavior for these older Internet Explorer "
"versions has been removed, and the ``Vary`` header is no longer stripped "
"from the response. In addition, modifications to the ``Cache-Control`` "
"header for all Internet Explorer requests with a ``Content-Disposition`` "
"header have also been removed as they were found to have similar issues."
msgstr ""
"为了解决这个问题，已经移除了对这些较旧的 Internet Explorer 版本的特殊行为，并"
"且不再从响应中删除 ``Vary`` 头。此外，对所有具有 ``Content-Disposition`` 头"
"的 Internet Explorer 请求的 ``Cache-Control`` 头的修改也已被移除，因为发现它"
"们具有类似的问题。"

msgid "Malformed redirect URLs from user input not correctly validated"
msgstr "来自用户输入的格式错误的重定向 URL 未正确验证"

msgid ""
"The validation for redirects did not correctly validate some malformed URLs, "
"which are accepted by some browsers. This allows a user to be redirected to "
"an unsafe URL unexpectedly."
msgstr ""
"重定向验证未正确验证某些格式错误的 URL，这些 URL 被某些浏览器接受。这使得用户"
"可能意外地被重定向到不安全的 URL 。"

msgid ""
"Django relies on user input in some cases (e.g. ``django.contrib.auth.views."
"login()``, ``django.contrib.comments``, and :doc:`i18n </topics/i18n/"
"index>`) to redirect the user to an \"on success\" URL. The security checks "
"for these redirects (namely ``django.utils.http.is_safe_url()``) did not "
"correctly validate some malformed URLs, such as ``http:\\\\\\\\\\"
"\\djangoproject.com``, which are accepted by some browsers with more liberal "
"URL parsing."
msgstr ""
"Django 在某些情况下（例如 ``django.contrib.auth.views.login()``、``django."
"contrib.comments`` 和 :doc:`i18n </topics/i18n/index>`）依赖于用户输入来将用"
"户重定向到“成功”URL。对于这些重定向的安全性检查（即 ``django.utils.http."
"is_safe_url()``），未正确验证一些格式错误的 URL，例如 ``http:\\\\\\\\\\"
"\\djangoproject.com``，这些 URL 可以被一些具有更自由 URL 解析的浏览器接受。"

msgid ""
"To remedy this, the validation in ``is_safe_url()`` has been tightened to be "
"able to handle and correctly validate these malformed URLs."
msgstr ""
"为了解决这个问题，``is_safe_url()`` 中的验证已经加强，能够处理和正确验证这些"
"格式错误的 URL。"

msgid "Django 1.4.14 release notes"
msgstr "Django 1.4.14 版本发行说明"

msgid "*August 20, 2014*"
msgstr "*2014 年 8 月 20 日*"

msgid "Django 1.4.14 fixes several security issues in 1.4.13."
msgstr "Django 1.4.14 修复了 1.4.13 中的多个安全问题。"

msgid "``reverse()`` could generate URLs pointing to other hosts"
msgstr "``reverse()`` 可能生成指向其他主机的 URL"

msgid ""
"In certain situations, URL reversing could generate scheme-relative URLs  "
"(URLs starting with two slashes), which could unexpectedly redirect a user  "
"to a different host. An attacker could exploit this, for example, by "
"redirecting users to a phishing site designed to ask for user's passwords."
msgstr ""
"在某些情况下，URL 反转可能生成方案相对的 URL（以两个斜杠开头的 URL），这可能"
"会使用户意外地被重定向到另一个主机。攻击者可以利用这一点，例如，通过将用户重"
"定向到一个专门设计用来索取用户密码的钓鱼网站。"

msgid ""
"To remedy this, URL reversing now ensures that no URL starts with two "
"slashes (//), replacing the second slash with its URL encoded counterpart "
"(%2F). This approach ensures that semantics stay the same, while making the "
"URL relative to the domain and not to the scheme."
msgstr ""
"为了解决这个问题，URL 反查现在确保没有 URL 以两个斜杠（//）开头，用其 URL 编"
"码的对应项（ %2F ）替换第二个斜杠。这种方法确保语义保持不变，同时使 URL 相对"
"于域而不是协议。"

msgid "File upload denial-of-service"
msgstr "文件上传拒绝服务攻击"

msgid ""
"Before this release, Django's file upload handing in its default "
"configuration may degrade to producing a huge number of ``os.stat()`` system "
"calls when a duplicate filename is uploaded. Since ``stat()`` may invoke IO, "
"this may produce a huge data-dependent slowdown that slowly worsens over "
"time. The net result is that given enough time, a user with the ability to "
"upload files can cause poor performance in the upload handler, eventually "
"causing it to become very slow simply by uploading 0-byte files. At this "
"point, even a slow network connection and few HTTP requests would be all "
"that is necessary to make a site unavailable."
msgstr ""
"在此版本之前，在其默认配置下，Django 的文件上传处理在上传重复文件名时可能会退"
"化为产生大量的 ``os.stat()`` 系统调用。由于 ``stat()`` 可能会引发 IO 操作，这"
"可能会导致数据相关的巨大性能下降，随着时间的推移逐渐恶化。最终结果是，给定足"
"够的时间，具有上传文件权限的用户可以通过上传 0 字节文件来导致上传处理程序性能"
"下降，最终导致它变得非常慢。在这一点上，即使是较慢的网络连接和少量的 HTTP 请"
"求也足以使站点不可用。"

msgid ""
"We've remedied the issue by changing the algorithm for generating file names "
"if a file with the uploaded name already exists. :meth:`Storage."
"get_available_name() <django.core.files.storage.Storage.get_available_name>` "
"now appends an underscore plus a random 7 character alphanumeric string (e."
"g. ``\"_x3a1gho\"``), rather than iterating through an underscore followed "
"by a number (e.g. ``\"_1\"``, ``\"_2\"``, etc.)."
msgstr ""
"我们通过更改生成文件名的算法来解决了这个问题，如果已经存在具有上传名称的文"
"件，那么 :meth:`Storage.get_available_name() <django.core.files.storage."
"Storage.get_available_name>` 现在会附加一个下划线和一个随机的 7 位字母数字字"
"符串（例如 ``\"_x3a1gho\"``），而不是通过迭代下划线后面跟着一个数字（例如 "
"``\"_1\"``，``\"_2\"`` 等）。"

msgid "``RemoteUserMiddleware`` session hijacking"
msgstr "``RemoteUserMiddleware`` 会话劫持"

msgid ""
"When using the :class:`~django.contrib.auth.middleware.RemoteUserMiddleware` "
"and the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header "
"between requests without an intervening logout could result in the prior "
"user's session being co-opted by the subsequent user. The middleware now "
"logs the user out on a failed login attempt."
msgstr ""
"在使用 :class:`~django.contrib.auth.middleware.RemoteUserMiddleware` 和 "
"``RemoteUserBackend`` 时，在没有中断注销的情况下，在请求之间更改 "
"``REMOTE_USER`` 标头可能会导致后续用户接管之前用户的会话。现在，在登录尝试失"
"败时，中间件会注销用户。"

msgid "Data leakage via query string manipulation in ``contrib.admin``"
msgstr "通过查询字符串操纵在 ``contrib.admin`` 中的数据泄露"

msgid ""
"In older versions of Django it was possible to reveal any field's data by "
"modifying the \"popup\" and \"to_field\" parameters of the query string on "
"an admin change form page. For example, requesting a URL like ``/admin/auth/"
"user/?pop=1&t=password`` and viewing the page's HTML allowed viewing the "
"password hash of each user. While the admin requires users to have "
"permissions to view the change form pages in the first place, this could "
"leak data if you rely on users having access to view only certain fields on "
"a model."
msgstr ""
"在旧版本的 Django 中，通过修改查询字符串上的 \"popup\" 和 \"to_field\" 参数，"
"可以揭示任何字段的数据。例如，请求像 ``/admin/auth/user/?pop=1&t=password`` "
"这样的 URL 并查看页面的 HTML 允许查看每个用户的密码哈希。尽管管理员要求用户首"
"先具有查看更改表单页面的权限，但如果你依赖于用户只能访问模型上的特定字段，这"
"可能会泄漏数据。"

msgid ""
"To address the issue, an exception will now be raised if a ``to_field`` "
"value that isn't a related field to a model that has been registered with "
"the admin is specified."
msgstr ""
"为了解决这个问题，现在如果指定了一个不是与已在管理员中注册的模型相关的字段的 "
"``to_field`` 值，将引发异常。"

msgid "Django 1.4.15 release notes"
msgstr "Django 1.4.15 版本发行说明"

msgid "*September 2, 2014*"
msgstr "*2014 年 9 月 2 日*"

msgid "Django 1.4.15 fixes a regression in the 1.4.14 security release."
msgstr "Django 1.4.15 修复了 1.4.14 安全发布中的一个回归问题。"

msgid ""
"Allowed inherited and m2m fields to be referenced in the admin (:ticket:"
"`22486`)"
msgstr "允许引用继承和多对多字段在管理员中 (:ticket:`22486`)。"

msgid "Django 1.4.16 release notes"
msgstr "Django 1.4.16 版本发行说明"

msgid "*October 22, 2014*"
msgstr "*2014 年 10 月 22日*"

msgid ""
"Django 1.4.16 fixes a couple regressions in the 1.4.14 security release and "
"a bug preventing the use of some GEOS versions with GeoDjango."
msgstr ""
"Django 1.4.16 修复了 1.4.14 安全版本中的一些回归问题，以及阻止使用某些 GEOS "
"版本与 GeoDjango 一起使用的错误。"

msgid ""
"Allowed related many-to-many fields to be referenced in the admin (:ticket:"
"`23604`)."
msgstr "允许引用相关的多对多字段在管理员中 (:ticket:`23604`)。"

msgid "Allowed inline and hidden references to admin fields (:ticket:`23431`)."
msgstr "允许内联和隐藏引用管理员字段 (:ticket:`23431`)。"

msgid "Fixed parsing of the GEOS version string (:ticket:`20036`)."
msgstr "修复了 GEOS 版本字符串的解析问题 (:ticket:`20036`)。"

msgid "Django 1.4.17 release notes"
msgstr "Django 1.4.17 版本发行说明"

msgid "*January 2, 2015*"
msgstr "*2015 年 1 月 2 日*"

msgid "Django 1.4.17 fixes a regression in the 1.4.14 security release."
msgstr "Django 1.4.17 修复了 1.4.14 安全版本中的一个回归问题。"

msgid ""
"Additionally, Django's vendored version of six, ``django.utils.six``, has "
"been upgraded to the latest release (1.9.0)."
msgstr ""
"此外，Django 内置的 six 版本，即 ``django.utils.six``，已经升级到最新版本 "
"(1.9.0)。"

msgid ""
"Fixed a regression with dynamically generated inlines and allowed field "
"references in the admin (:ticket:`23754`)."
msgstr ""
"修复了动态生成的内联和允许在管理员中引用字段的回归问题 (:ticket:`23754`)。"

msgid "Django 1.4.18 release notes"
msgstr "Django 1.4.18 版本发行说明"

msgid "*January 13, 2015*"
msgstr "*2015 年 1 月 13 日*"

msgid ""
"Django 1.4.18 fixes several security issues in 1.4.17 as well as a "
"regression on Python 2.5 in the 1.4.17 release."
msgstr ""
"Django 1.4.18 修复了 1.4.17 中的几个安全问题，以及 1.4.17 版本中出现的 "
"Python 2.5 的回归问题。"

msgid "WSGI header spoofing via underscore/dash conflation"
msgstr "通过下划线/破折号混淆进行 WSGI 头欺骗"

msgid ""
"When HTTP headers are placed into the WSGI environ, they are normalized by "
"converting to uppercase, converting all dashes to underscores, and "
"prepending ``HTTP_``. For instance, a header ``X-Auth-User`` would become "
"``HTTP_X_AUTH_USER`` in the WSGI environ (and thus also in Django's "
"``request.META`` dictionary)."
msgstr ""
"当将 HTTP 头放入 WSGI 环境时，它们会被规范化，即转换为大写，将所有破折号转换"
"为下划线，并在前面添加 ``HTTP_``。例如，一个名为 ``X-Auth-User`` 的头部在 "
"WSGI 环境中会变成 ``HTTP_X_AUTH_USER`` （因此也会出现在 Django 的 ``request."
"META`` 字典中）。"

msgid ""
"Unfortunately, this means that the WSGI environ cannot distinguish between "
"headers containing dashes and headers containing underscores: ``X-Auth-"
"User`` and ``X-Auth_User`` both become ``HTTP_X_AUTH_USER``. This means that "
"if a header is used in a security-sensitive way (for instance, passing "
"authentication information along from a front-end proxy), even if the proxy "
"carefully strips any incoming value for ``X-Auth-User``, an attacker may be "
"able to provide an ``X-Auth_User`` header (with underscore) and bypass this "
"protection."
msgstr ""
"不幸的是，这意味着 WSGI 环境无法区分包含破折号和包含下划线的头部：``X-Auth-"
"User`` 和 ``X-Auth_User`` 都会变成 ``HTTP_X_AUTH_USER``。这意味着如果一个头部"
"以安全敏感的方式使用（例如，从前端代理传递身份验证信息），即使代理仔细删除了 "
"``X-Auth-User`` 的任何传入值，攻击者仍然可以提供一个带下划线的 ``X-"
"Auth_User`` 头部，并绕过这种保护。"

msgid ""
"In order to prevent such attacks, both Nginx and Apache 2.4+ strip all "
"headers containing underscores from incoming requests by default. Django's "
"built-in development server now does the same. Django's development server "
"is not recommended for production use, but matching the behavior of common "
"production servers reduces the surface area for behavior changes during "
"deployment."
msgstr ""
"为了防止此类攻击，Nginx 和 Apache 2.4+ 默认会从传入的请求中剥离包含下划线的所"
"有标头。 Django 的内置开发服务器现在也采用相同的做法。不建议将 Django 的开发"
"服务器用于生产环境，但匹配常见生产服务器的行为可以减少部署过程中行为变化的可"
"能性。"

msgid "Mitigated possible XSS attack via user-supplied redirect URLs"
msgstr "通过用户提供的重定向 URL 减轻了可能的 XSS 攻击风险。"

msgid ""
"Django relies on user input in some cases (e.g. ``django.contrib.auth.views."
"login()`` and :doc:`i18n </topics/i18n/index>`) to redirect the user to an "
"\"on success\" URL. The security checks for these redirects (namely ``django."
"utils.http.is_safe_url()``) didn't strip leading whitespace on the tested "
"URL and as such considered URLs like ``\\njavascript:...`` safe. If a "
"developer relied on ``is_safe_url()`` to provide safe redirect targets and "
"put such a URL into a link, they could suffer from a XSS attack. This bug "
"doesn't affect Django currently, since we only put this URL into the "
"``Location`` response header and browsers seem to ignore JavaScript there."
msgstr ""
"在某些情况下，Django 依赖于用户输入（例如 ``django.contrib.auth.views."
"login()`` 和 :doc:`i18n </topics/i18n/index>`）来将用户重定向到“成功”URL。这"
"些重定向的安全性检查（即 ``django.utils.http.is_safe_url()``）未删除在测试的 "
"URL 上的前导空格，因此将类似于 ``\\njavascript:...`` 的 URL 视为安全的。如果"
"开发人员依赖于 ``is_safe_url()`` 提供安全的重定向目标，并将这样的 URL 放入链"
"接中，他们可能会受到 XSS 攻击的影响。目前这个错误不会影响 Django，因为我们只"
"将这个 URL 放入 ``Location`` 响应头中，而浏览器似乎会忽略那里的 JavaScript。"

msgid "Denial-of-service attack against ``django.views.static.serve``"
msgstr "对 ``django.views.static.serve`` 的拒绝服务攻击"

msgid ""
"In older versions of Django, the :func:`django.views.static.serve` view read "
"the files it served one line at a time. Therefore, a big file with no "
"newlines would result in memory usage equal to the size of that file. An "
"attacker could exploit this and launch a denial-of-service attack by "
"simultaneously requesting many large files. This view now reads the file in "
"chunks to prevent large memory usage."
msgstr ""
"在旧版本的 Django 中，:func:`django.views.static.serve` 视图逐行读取它提供的"
"文件。因此，一个没有换行符的大文件将导致内存使用量等于该文件的大小。攻击者可"
"以利用这一点，通过同时请求许多大文件来发动拒绝服务攻击。现在，这个视图会按块"
"读取文件，以防止大量内存使用。"

msgid ""
"Note, however, that this view has always carried a warning that it is not "
"hardened for production use and should be used only as a development aid. "
"Now may be a good time to audit your project and serve your files in "
"production using a real front-end web server if you are not doing so."
msgstr ""
"然而，请注意，这个视图一直带有一个警告，即它没有经过生产环境的强化，只应作为"
"开发辅助工具使用。如果您还没有这样做，现在可能是一个好时机来审计您的项目，并"
"在生产环境中使用真正的前端 Web 服务器提供文件。"

msgid ""
"To maintain compatibility with Python 2.5, Django's vendored version of six, "
"``django.utils.six``, has been downgraded to 1.8.0 which is the last version "
"to support Python 2.5."
msgstr ""
"为了保持与 Python 2.5 的兼容性，Django 内置的 six 版本，即 ``django.utils."
"six``，已经降级到 1.8.0，这是最后一个支持 Python 2.5 的版本。"

msgid "Django 1.4.19 release notes"
msgstr "Django 1.4.19 版本发行说明"

msgid "*January 27, 2015*"
msgstr "*2015 年 1 月 27 日*"

msgid "Django 1.4.19 fixes a regression in the 1.4.18 security release."
msgstr "Django 1.4.19 修复了 1.4.18 安全版本中的一个回归问题。"

msgid ""
"``GZipMiddleware`` now supports streaming responses. As part of the 1.4.18 "
"security release, the ``django.views.static.serve()`` function was altered "
"to stream the files it serves. Unfortunately, the ``GZipMiddleware`` "
"consumed the stream prematurely and prevented files from being served "
"properly (:ticket:`24158`)."
msgstr ""
"``GZipMiddleware`` 现在支持流式响应。作为 1.4.18 安全更新的一部分，``django."
"views.static.serve()`` 函数已经被修改为流式传输它提供的文件。不幸的是，"
"``GZipMiddleware`` 过早地消耗了流，并阻止了文件的正确传输 (:ticket:`24158`)。"

msgid "Django 1.4.2 release notes"
msgstr "Django 1.4.2 版本发行说明"

msgid "This is the second security release in the Django 1.4 series."
msgstr "这是 Django 1.4 系列中的第二个安全版本。"

msgid ""
"The newly introduced :class:`~django.db.models.GenericIPAddressField` "
"constructor arguments have been adapted to match those of all other model "
"fields. The first two keyword arguments are now verbose_name and name."
msgstr ""
"新引入的 :class:`~django.db.models.GenericIPAddressField` 构造函数参数已经适"
"应了所有其他模型字段的参数。现在的前两个关键字参数是 verbose_name 和 name。"

msgid "Other bugfixes and changes"
msgstr "其他错误修复和更改"

msgid "Subclass HTMLParser only for appropriate Python versions (#18239)."
msgstr "仅对适用的 Python 版本子类化 HTMLParser（ #18239 ）。"

msgid "Added batch_size argument to qs.bulk_create() (#17788)."
msgstr "为 qs.bulk_create() 添加 batch_size 参数（ #17788 ）。"

msgid ""
"Fixed a small regression in the admin filters where wrongly formatted dates "
"passed as url parameters caused an unhandled ValidationError (#18530)."
msgstr ""
"修复了管理员筛选器中的一个小回归问题，其中错误格式的日期作为 URL 参数传递，导"
"致未处理的 ValidationError（ #18530 ）。"

msgid ""
"Fixed an endless loop bug when accessing permissions in templates (#18979)"
msgstr "修复了在模板中访问权限时出现的无限循环错误（ #18979 ）"

msgid "Fixed some Python 2.5 compatibility issues"
msgstr "修复了一些与 Python 2.5 兼容性有关的问题。"

msgid ""
"Fixed an issue with quoted filenames in Content-Disposition header (#19006)"
msgstr "修复了 Content-Disposition 标头中带引号文件名的问题（ #19006 ）。"

msgid ""
"Made the context option in ``trans`` and ``blocktrans`` tags accept literals "
"wrapped in single quotes (#18881)."
msgstr ""
"使 ``trans`` 和 ``blocktrans`` 标签中的上下文选项接受用单引号包裹的字面值 "
"(#18881)。"

msgid "Numerous documentation improvements and fixes."
msgstr "大量文档改进和修复。"

msgid "Django 1.4.20 release notes"
msgstr "Django 1.4.20 版本发行说明"

msgid "*March 18, 2015*"
msgstr "*2015 年 3 月 18 日*"

msgid "Django 1.4.20 fixes one security issue in 1.4.19."
msgstr "Django 1.4.20 修复了 1.4.19 中的一个安全问题。"

msgid ""
"Django relies on user input in some cases (e.g. ``django.contrib.auth.views."
"login()`` and :doc:`i18n </topics/i18n/index>`) to redirect the user to an "
"\"on success\" URL. The security checks for these redirects (namely ``django."
"utils.http.is_safe_url()``) accepted URLs with leading control characters "
"and so considered URLs like ``\\x08javascript:...`` safe. This issue doesn't "
"affect Django currently, since we only put this URL into the ``Location`` "
"response header and browsers seem to ignore JavaScript there. Browsers we "
"tested also treat URLs prefixed with control characters such as ``%08//"
"example.com`` as relative paths so redirection to an unsafe target isn't a "
"problem either."
msgstr ""
"Django 在某些情况下依赖于用户输入（例如 ``django.contrib.auth.views."
"login()`` 和 :doc:`i18n </topics/i18n/index>`）来将用户重定向到“成功”URL。这"
"些重定向的安全性检查（即 ``django.utils.http.is_safe_url()``）接受具有前导控"
"制字符的 URL，因此将像 ``\\x08javascript:...`` 这样的 URL 视为安全。目前这个"
"问题不会影响 Django，因为我们只将这个 URL 放入 ``Location`` 响应头中，而浏览"
"器似乎会忽略那里的 JavaScript。经过我们测试的浏览器还会将以控制字符前缀的 "
"URL，如 ``%08//example.com``，视为相对路径，因此重定向到不安全的目标也不是一"
"个问题。"

msgid ""
"However, if a developer relies on ``is_safe_url()`` to provide safe redirect "
"targets and puts such a URL into a link, they could suffer from an XSS "
"attack as some browsers such as Google Chrome ignore control characters at "
"the start of a URL in an anchor ``href``."
msgstr ""
"然而，如果开发人员依赖于 ``is_safe_url()`` 来提供安全的重定向目标，并将这样"
"的 URL 放入链接中，他们可能会受到 XSS 攻击的影响，因为一些浏览器，如 Google "
"Chrome，会忽略在锚点的 ``href`` 中 URL 开头的控制字符。"

msgid "Django 1.4.21 release notes"
msgstr "Django 1.4.21 版本发行说明"

msgid "*July 8, 2015*"
msgstr "*2015 年 7 月 8 日*"

msgid "Django 1.4.21 fixes several security issues in 1.4.20."
msgstr "Django 1.4.21 修复了 1.4.20 中的若干安全问题。"

msgid "Denial-of-service possibility by filling session store"
msgstr "通过填充会话存储可能导致拒绝服务攻击。"

msgid ""
"In previous versions of Django, the session backends created a new empty "
"record in the session storage anytime ``request.session`` was accessed and "
"there was a session key provided in the request cookies that didn't already "
"have a session record. This could allow an attacker to easily create many "
"new session records simply by sending repeated requests with unknown session "
"keys, potentially filling up the session store or causing other users' "
"session records to be evicted."
msgstr ""
"在以前版本的 Django 中，会话后端在访问 ``request.session`` 时，如果请求的 "
"cookies 中提供了一个没有会话记录的会话键，就会创建一个新的空记录在会话存储"
"中。这可能允许攻击者通过发送带有未知会话键的重复请求来轻松创建许多新的会话记"
"录，潜在地填满会话存储或导致其他用户的会话记录被逐出。"

msgid ""
"The built-in session backends now create a session record only if the "
"session is actually modified; empty session records are not created. Thus "
"this potential DoS is now only possible if the site chooses to expose a "
"session-modifying view to anonymous users."
msgstr ""
"内置的会话后端现在仅在会话实际修改时创建会话记录；不会创建空的会话记录。因"
"此，只有在网站选择向匿名用户公开会话修改视图时，才可能发生这种潜在的 DoS 攻"
"击。"

msgid ""
"As each built-in session backend was fixed separately (rather than a fix in "
"the core sessions framework), maintainers of third-party session backends "
"should check whether the same vulnerability is present in their backend and "
"correct it if so."
msgstr ""
"由于每个内置会话后端都是单独修复的（而不是在核心会话框架中进行修复），第三方"
"会话后端的维护者应检查他们的后端是否存在相同的漏洞，并在存在的情况下进行修"
"正。"

msgid "Header injection possibility since validators accept newlines in input"
msgstr "由于验证器接受换行符输入，可能导致头部注入。"

msgid ""
"Some of Django's built-in validators (:class:`~django.core.validators."
"EmailValidator`, most seriously) didn't prohibit newline characters (due to "
"the usage of ``$`` instead of ``\\Z`` in the regular expressions). If you "
"use values with newlines in HTTP response or email headers, you can suffer "
"from header injection attacks. Django itself isn't vulnerable because :class:"
"`~django.http.HttpResponse` and the mail sending utilities in :mod:`django."
"core.mail` prohibit newlines in HTTP and SMTP headers, respectively. While "
"the validators have been fixed in Django, if you're creating HTTP responses "
"or email messages in other ways, it's a good idea to ensure that those "
"methods prohibit newlines as well. You might also want to validate that any "
"existing data in your application doesn't contain unexpected newlines."
msgstr ""
"Django 的一些内置验证器（尤其是 :class:`~django.core.validators."
"EmailValidator`）没有禁止换行字符（因为正则表达式中使用了 ``$`` 而不是 "
"``\\Z``）。如果在 HTTP 响应或电子邮件头中使用带有换行符的值，可能会受到头部注"
"入攻击的影响。Django 本身不会受到影响，因为 :class:`~django.http."
"HttpResponse` 和 :mod:`django.core.mail` 中的邮件发送工具在 HTTP 和 SMTP 头部"
"中分别禁止了换行符。尽管验证器已经在 Django 中修复，但如果以其他方式创建 "
"HTTP 响应或电子邮件消息，最好确保这些方法也禁止换行符。您还可以验证应用程序中"
"的任何现有数据是否包含意外的换行符。"

msgid ""
":func:`~django.core.validators.validate_ipv4_address`, :func:`~django.core."
"validators.validate_slug`, and :class:`~django.core.validators.URLValidator` "
"and their usage in the corresponding form fields ``GenericIPAddresseField``, "
"``IPAddressField``, ``SlugField``, and ``URLField`` are also affected."
msgstr ""
":func:`~django.core.validators.validate_ipv4_address`、:func:`~django.core."
"validators.validate_slug` 和 :class:`~django.core.validators.URLValidator` 以"
"及它们在相应的表单字段 ``GenericIPAddresseField``、``IPAddressField``、"
"``SlugField`` 和 ``URLField`` 中的使用也受到影响。"

msgid ""
"The undocumented, internally unused ``validate_integer()`` function is now "
"stricter as it validates using a regular expression instead of simply "
"casting the value using ``int()`` and checking if an exception was raised."
msgstr ""
"未记录的、内部未使用的 ``validate_integer()`` 函数现在更加严格，因为它使用正"
"则表达式进行验证，而不仅仅是使用 ``int()`` 强制转换值并检查是否引发了异常。"

msgid "Django 1.4.22 release notes"
msgstr "Django 1.4.22 版本发行说明"

msgid "*August 18, 2015*"
msgstr "*2015 年 8 月 18 日*"

msgid "Django 1.4.22 fixes a security issue in 1.4.21."
msgstr "Django 1.4.22 修复了 1.4.21 中的安全问题。"

msgid ""
"It also fixes support with pip 7+ by disabling wheel support. Older versions "
"of 1.4 would silently build a broken wheel when installed with those "
"versions of pip."
msgstr ""
"它还通过禁用 wheel 支持来修复与 pip 7+ 的兼容问题。在使用这些版本的 pip 安装"
"时，1.4 的旧版本会悄无声息地构建一个损坏的 wheel 。"

msgid ""
"Denial-of-service possibility in ``logout()`` view by filling session store"
msgstr "在 ``logout()`` 视图中存在拒绝服务的可能性，因为会话存储被填满。"

msgid ""
"Previously, a session could be created when anonymously accessing the "
"``django.contrib.auth.views.logout()`` view (provided it wasn't decorated "
"with :func:`~django.contrib.auth.decorators.login_required` as done in the "
"admin). This could allow an attacker to easily create many new session "
"records by sending repeated requests, potentially filling up the session "
"store or causing other users' session records to be evicted."
msgstr ""
"以前，在匿名访问 ``django.contrib.auth.views.logout()`` 视图时可以创建会话"
"（前提是没有像在管理界面中那样使用 :func:`~django.contrib.auth.decorators."
"login_required` 进行装饰）。这可能允许攻击者通过发送重复的请求轻松创建许多新"
"的会话记录，潜在地填满会话存储或导致其他用户的会话记录被逐出。"

msgid ""
"The :class:`~django.contrib.sessions.middleware.SessionMiddleware` has been "
"modified to no longer create empty session records, including when :setting:"
"`SESSION_SAVE_EVERY_REQUEST` is active."
msgstr ""
":class:`~django.contrib.sessions.middleware.SessionMiddleware` 已经修改，不再"
"创建空的会话记录，即使 :setting:`SESSION_SAVE_EVERY_REQUEST` 处于活动状态也是"
"如此。"

msgid ""
"Additionally, the ``contrib.sessions.backends.base.SessionBase.flush()`` and "
"``cache_db.SessionStore.flush()`` methods have been modified to avoid "
"creating a new empty session. Maintainers of third-party session backends "
"should check if the same vulnerability is present in their backend and "
"correct it if so."
msgstr ""
"此外，``contrib.sessions.backends.base.SessionBase.flush()`` 和 ``cache_db."
"SessionStore.flush()`` 方法已经修改，以避免创建新的空会话。第三方会话后端的维"
"护者应检查他们的后端是否存在相同的漏洞，如果是的话，应该进行修复。"

msgid "Django 1.4.3 release notes"
msgstr "Django 1.4.3 版本发行说明"

msgid ""
"Django 1.4.3 addresses two security issues present in previous Django "
"releases in the 1.4 series."
msgstr "Django 1.4.3 解决了 1.4 系列中之前 Django 版本存在的两个安全问题。"

msgid "Django 1.4.4 release notes"
msgstr "Django 1.4.4 版本发行说明"

msgid ""
"Django 1.4.4 fixes four security issues present in previous Django releases "
"in the 1.4 series, as well as several other bugs and numerous documentation "
"improvements."
msgstr ""
"Django 1.4.4 修复了 1.4 系列中之前 Django 版本存在的四个安全问题，以及其他一"
"些错误和大量文档改进。"

msgid "This is the fourth bugfix/security release in the Django 1.4 series."
msgstr "这是 Django 1.4 系列中的第四个错误修复/安全更新版本。"

msgid ""
"For this reason, Django 1.4.4 adds a new setting, ``ALLOWED_HOSTS``, "
"containing an explicit list of valid host/domain names for this site. A "
"request with a Host header not matching an entry in this list will raise "
"``SuspiciousOperation`` if ``request.get_host()`` is called. For full "
"details see the documentation for the :setting:`ALLOWED_HOSTS` setting."
msgstr ""
"因此，Django 1.4.4 添加了一个新的设置，名为 ``ALLOWED_HOSTS``，其中包含了此站"
"点的有效主机/域名的明确列表。如果请求的 Host 标头与此列表中的条目不匹配，那么"
"如果调用了 ``request.get_host()``，将引发 ``SuspiciousOperation``。有关详细信"
"息，请参阅 :setting:`ALLOWED_HOSTS` 设置的文档。"

msgid ""
"The default value for this setting in Django 1.4.4 is ``['*']`` (matching "
"any host), for backwards-compatibility, but we strongly encourage all sites "
"to set a more restrictive value."
msgstr ""
"Django 1.4.4 中此设置的默认值是 ``['*']`` （匹配任何主机），出于向后兼容性考"
"虑，但我们强烈建议所有站点设置一个更为限制性的值。"

msgid ""
"The XML parser in the Python standard library is vulnerable to a number of "
"attacks via external entities and entity expansion. Django uses this parser "
"for deserializing XML-formatted database fixtures. This deserializer is not "
"intended for use with untrusted data, but in order to err on the side of "
"safety in Django 1.4.4 the XML deserializer refuses to parse an XML document "
"with a DTD (DOCTYPE definition), which closes off these attack avenues."
msgstr ""
"Python 标准库中的 XML 解析器容易受到外部实体和实体扩展攻击。 Django 使用此解"
"析器对 XML 格式的数据库固件进行反序列化。这个反序列化器并不是为了处理不可信数"
"据而设计的，但为了在 Django 1.4.4 中确保安全，XML 反序列化器拒绝解析带有 DTD"
"（DOCTYPE 定义）的 XML 文档，从而阻止了这些攻击途径。"

msgid ""
"In Django 1.4.4, all formsets have a strictly-enforced maximum number of "
"forms (1000 by default, though it can be set higher via the ``max_num`` "
"formset factory argument)."
msgstr ""
"在 Django 1.4.4 中，所有表单集都有一个严格执行的最大表单数限制（默认为 1000，"
"尽管可以通过表单集工厂参数 ``max_num`` 设置更高的值）。"

msgid ""
"In previous versions of Django, an admin user without change permission on a "
"model could still view the Unicode representation of instances via their "
"admin history log. Django 1.4.4 now limits the admin history log view for an "
"object to users with change permission for that model."
msgstr ""
"在以前的 Django 版本中，没有模型更改权限的管理员用户仍然可以通过其管理历史记"
"录查看实例的 Unicode 表示。现在，Django 1.4.4 将对象的管理历史记录视图限制为"
"具有该模型更改权限的用户。"

msgid ""
"Prevented transaction state from leaking from one request to the next "
"(#19707)."
msgstr "防止事务状态从一个请求泄露到下一个请求（ #19707 ）。"

msgid "Changed an SQL command syntax to be MySQL 4 compatible (#19702)."
msgstr "更改了 SQL 命令语法以实现 MySQL 4 兼容性（ #19702 ）。"

msgid "Added backwards-compatibility with old unsalted MD5 passwords (#18144)."
msgstr "增加了对旧版未加盐 MD5 密码的向后兼容性（ #18144 ）。"

msgid "Django 1.4.5 release notes"
msgstr "Django 1.4.5 版本发行说明"

msgid ""
"Django 1.4.5 corrects a packaging problem with yesterday's :doc:`1.4.4 "
"release </releases/1.4.4>`."
msgstr ""
"Django 1.4.5 修复了昨天发布的 :doc:`1.4.4 版本 </releases/1.4.4>` 中的打包问"
"题。"

msgid "Django 1.4.6 release notes"
msgstr "Django 1.4.6 版本发行说明"

msgid "*August 13, 2013*"
msgstr "*2013 年 8 月 13 日*"

msgid ""
"Django 1.4.6 fixes one security issue present in previous Django releases in "
"the 1.4 series, as well as one other bug."
msgstr ""
"Django 1.4.6 修复了 1.4 系列中之前 Django 版本存在的一个安全问题，以及另一个"
"错误。"

msgid "This is the sixth bugfix/security release in the Django 1.4 series."
msgstr "这是 Django 1.4 系列中的第六个错误修复/安全发布。"

msgid ""
"Django relies on user input in some cases (e.g. ``django.contrib.auth.views."
"login()``, ``django.contrib.comments``, and :doc:`i18n </topics/i18n/"
"index>`) to redirect the user to an \"on success\" URL. The security checks "
"for these redirects (namely ``django.utils.http.is_safe_url()``) didn't "
"check if the scheme is ``http(s)`` and as such allowed ``javascript:...`` "
"URLs to be entered. If a developer relied on ``is_safe_url()`` to provide "
"safe redirect targets and put such a URL into a link, they could suffer from "
"a XSS attack. This bug doesn't affect Django currently, since we only put "
"this URL into the ``Location`` response header and browsers seem to ignore "
"JavaScript there."
msgstr ""
"Django 在某些情况下（例如，``django.contrib.auth.views.login()``、``django."
"contrib.comments`` 和 :doc:`i18n </topics/i18n/index>`）依赖于用户输入来将用"
"户重定向到“成功”URL。这些重定向的安全检查（即 ``django.utils.http."
"is_safe_url()``）没有检查 URL 的协议是否为 ``http(s)``，因此允许输入 "
"``javascript:...`` 类型的 URL。如果开发人员依赖于 ``is_safe_url()`` 来提供安"
"全的重定向目标，并将这样的 URL 放入链接中，他们可能会受到 XSS 攻击的影响。当"
"前情况下，这个错误不会影响 Django，因为我们只将这个 URL 放入 ``Location`` 响"
"应头中，而浏览器似乎会忽略其中的 JavaScript。"

msgid ""
"Fixed an obscure bug with the :func:`~django.test.override_settings` "
"decorator. If you hit an ``AttributeError: 'Settings' object has no "
"attribute '_original_allowed_hosts'`` exception, it's probably fixed "
"(#20636)."
msgstr ""
"修复了 :func:`~django.test.override_settings` 装饰器的一个晦涩 Bug。如果你遇"
"到了 ``AttributeError: 'Settings' object has no attribute "
"'_original_allowed_hosts'`` 异常，那么这个问题可能已经修复了（#20636）。"

msgid "Django 1.4.7 release notes"
msgstr "Django 1.4.7 版本发行说明"

msgid "*September 10, 2013*"
msgstr "*2013 年 9 月 10 日*"

msgid ""
"Django 1.4.7 fixes one security issue present in previous Django releases in "
"the 1.4 series."
msgstr "Django 1.4.7 修复了 1.4 系列中之前 Django 版本存在的一个安全问题。"

msgid "Directory traversal vulnerability in ``ssi`` template tag"
msgstr "``ssi`` 模板标签中的目录遍历漏洞"

msgid ""
"In previous versions of Django it was possible to bypass the "
"``ALLOWED_INCLUDE_ROOTS`` setting used for security with the ``ssi`` "
"template tag by specifying a relative path that starts with one of the "
"allowed roots. For example, if ``ALLOWED_INCLUDE_ROOTS = (\"/var/www\",)`` "
"the following would be possible:"
msgstr ""
"在以前的 Django 版本中，可以通过指定以允许的根目录之一开头的相对路径来绕过 "
"``ssi`` 模板标签用于安全性的 ``ALLOWED_INCLUDE_ROOTS`` 设置。例如，如果 "
"``ALLOWED_INCLUDE_ROOTS = (\"/var/www\",)``，那么以下情况是可能的："

msgid ""
"In practice this is not a very common problem, as it would require the "
"template author to put the ``ssi`` file in a user-controlled variable, but "
"it's possible in principle."
msgstr ""
"实际上，这并不是一个非常常见的问题，因为它需要模板作者将 ``ssi`` 文件放入用户"
"可控制的变量中，但从原理上讲是可能的。"

msgid "Django 1.4.8 release notes"
msgstr "Django 1.4.8 版本发行说明"

msgid "*September 14, 2013*"
msgstr "*2013 年 9 月 14 日*"

msgid ""
"Django 1.4.8 fixes two security issues present in previous Django releases "
"in the 1.4 series."
msgstr "Django 1.4.8 修复了 1.4 系列中之前 Django 版本存在的两个安全问题。"

msgid "Denial-of-service via password hashers"
msgstr "通过密码哈希器实现拒绝服务攻击"

msgid ""
"In previous versions of Django, no limit was imposed on the plaintext length "
"of a password. This allowed a denial-of-service attack through submission of "
"bogus but extremely large passwords, tying up server resources performing "
"the (expensive, and increasingly expensive with the length of the password) "
"calculation of the corresponding hash."
msgstr ""
"在以前的 Django 版本中，没有对密码明文长度施加限制。这允许通过提交虚假但极大"
"的密码进行拒绝服务攻击，耗费服务器资源执行相应散列的计算（随着密码长度的增"
"加，计算越来越昂贵）。"

msgid ""
"As of 1.4.8, Django's authentication framework imposes a 4096-byte limit on "
"passwords and will fail authentication with any submitted password of "
"greater length."
msgstr ""
"从 1.4.8 开始，Django 的身份验证框架对密码施加了 4096 字节的限制，并且对于提"
"交的长度超过此限制的密码将无法进行身份验证。"

msgid ""
"Corrected usage of :func:`~django.views.decorators.debug."
"sensitive_post_parameters` in :mod:`django.contrib.auth`’s admin"
msgstr ""
"在 :mod:`django.contrib.auth` 的管理员界面中，修正了对 :func:`~django.views."
"decorators.debug.sensitive_post_parameters` 的使用"

msgid ""
"The decoration of the ``add_view`` and ``user_change_password`` user admin "
"views with :func:`~django.views.decorators.debug.sensitive_post_parameters` "
"did not include :func:`~django.utils.decorators.method_decorator` (required "
"since the views are methods) resulting in the decorator not being properly "
"applied. This usage has been fixed and :func:`~django.views.decorators.debug."
"sensitive_post_parameters` will now throw an exception if it's improperly "
"used."
msgstr ""
"对 ``add_view`` 和 ``user_change_password`` 用户管理视图的装饰使用 :func:"
"`~django.views.decorators.debug.sensitive_post_parameters` 时没有包括 :func:"
"`~django.utils.decorators.method_decorator` （因为这些视图是方法），导致装饰"
"器未正确应用。这个使用已经被修复，现在如果不正确使用 :func:`~django.views."
"decorators.debug.sensitive_post_parameters`，将引发异常。"

msgid "Django 1.4.9 release notes"
msgstr "Django 1.4.9 版本发行说明"

msgid "*October 23, 2013*"
msgstr "*2013 年 10 月 23 日*"

msgid ""
"Django 1.4.9 fixes a security-related bug in the 1.4 series and one other "
"data corruption bug."
msgstr ""
"Django 1.4.9 修复了 1.4 系列中的一个与安全相关的错误以及另一个数据损坏错误。"

msgid "Readdressed denial-of-service via password hashers"
msgstr "重新解决通过密码哈希器实现的拒绝服务攻击问题"

msgid ""
"Django 1.4.8 imposes a 4096-byte limit on passwords in order to mitigate a "
"denial-of-service attack through submission of bogus but extremely large "
"passwords. In Django 1.4.9, we've reverted this change and instead improved "
"the speed of our PBKDF2 algorithm by not rehashing the key on every "
"iteration."
msgstr ""
"Django 1.4.8 对密码施加了 4096 字节的限制，以减轻通过提交虚假但极大的密码进行"
"拒绝服务攻击的风险。在 Django 1.4.9 中，我们撤销了这个更改，而是通过在每次迭"
"代时不重新哈希密钥来提高 PBKDF2 算法的速度。"

msgid ""
"Fixed a data corruption bug with ``datetime_safe.datetime.combine`` (#21256)."
msgstr "修复了 ``datetime_safe.datetime.combine`` 的数据损坏 Bug (#21256)。"

msgid "Django 1.5 release notes"
msgstr "Django 1.5 版本发行说明"

msgid "*February 26, 2013*"
msgstr "*2013 年 2 月 26 日*"

msgid "Welcome to Django 1.5!"
msgstr "欢迎来到 Django 1.5 ！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-1.5>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.5>` "
"you'll want to be aware of when upgrading from Django 1.4 or older versions. "
"We've also dropped some features, which are detailed in :ref:`our "
"deprecation plan <deprecation-removed-in-1.5>`, and we've :ref:`begun the "
"deprecation process for some features <deprecated-features-1.5>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-1.5>`，以及从 Django 1.4 或更早版"
"本升级时需要注意的一些 :ref:`不兼容的变化 <backwards-incompatible-1.5>`。我们"
"还删除了一些功能，详细信息请参阅 :ref:`我们的弃用计划 <deprecation-removed-"
"in-1.5>`，并且我们已经 :ref:`开始了某些功能的弃用过程 <deprecated-"
"features-1.5>`。"

msgid ""
"The biggest new feature in Django 1.5 is the `configurable User model`_. "
"Before Django 1.5, applications that wanted to use Django's auth framework (:"
"mod:`django.contrib.auth`) were forced to use Django's definition of a "
"\"user\". In Django 1.5, you can now swap out the ``User`` model for one "
"that you write yourself. This could be a simple extension to the existing "
"``User`` model -- for example, you could add a Twitter or Facebook ID field "
"-- or you could completely replace the ``User`` with one totally customized "
"for your site."
msgstr ""
"Django 1.5 中最重要的新功能是 `可配置的用户模型`_。在 Django 1.5 之前，希望使"
"用 Django 的身份验证框架（:mod:`django.contrib.auth`）的应用程序被强制使用 "
"Django 对 \"用户\" 的定义。在 Django 1.5 中，现在可以将 ``User`` 模型替换为自"
"己编写的模型。这可以是对现有 ``User`` 模型的简单扩展，例如，您可以添加 "
"Twitter 或 Facebook ID 字段，或者您可以完全替换 ``User``，使用完全为您的站点"
"定制的模型。"

msgid ""
"Django 1.5 is also the first release with `Python 3 support`_! We're "
"labeling this support \"experimental\" because we don't yet consider it "
"production-ready, but everything's in place for you to start porting your "
"apps to Python 3. Our next release, Django 1.6, will support Python 3 "
"without reservations."
msgstr ""
"Django 1.5 也是第一个支持 `Python 3`_ 的版本！我们将此支持标记为 \"实验性\"，"
"因为我们还不认为它已经可以用于生产环境，但已经为您提供了开始将您的应用程序移"
"植到 Python 3 的一切必要条件。我们的下一个发布版，Django 1.6，将完全支持 "
"Python 3，没有任何限制。"

msgid "Other notable new features in Django 1.5 include:"
msgstr "Django 1.5 中其他值得注意的新功能包括："

msgid ""
"`Support for saving a subset of model's fields`_ - :meth:`Model.save() "
"<django.db.models.Model.save()>` now accepts an ``update_fields`` argument, "
"letting you specify which fields are written back to the database when you "
"call ``save()``. This can help in high-concurrency operations, and can "
"improve performance."
msgstr ""
"`保存模型字段的子集支持`_ - :meth:`Model.save() <django.db.models.Model."
"save()>` 现在接受一个 ``update_fields`` 参数，允许您在调用 ``save()`` 时指定"
"要写回数据库的字段。这对于高并发操作和性能优化非常有帮助。"

msgid ""
"Better `support for streaming responses <#explicit-streaming-responses>`_ "
"via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""
"通过新的 :class:`~django.http.StreamingHttpResponse` 响应类，更好地支持 `流式"
"响应 <#explicit-streaming-responses>`_。"

msgid "`GeoDjango`_ now supports PostGIS 2.0."
msgstr "`GeoDjango`_ 现在支持 PostGIS 2.0。"

msgid "... and more; `see below <#what-s-new-in-django-1-5>`_."
msgstr "... 还有更多; `请参见下面 <#what-s-new-in-django-1-5>`_。"

msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible "
"manner per :doc:`our API stability policy </misc/api-stability>`. However, "
"as with previous releases, Django 1.5 ships with some minor :ref:`backwards "
"incompatible changes <backwards-incompatible-1.5>`; people upgrading from "
"previous versions of Django should read that list carefully."
msgstr ""
"我们尽量在符合 :doc:`API 稳定政策 </misc/api-stability>` 的情况下引入新功能。"
"然而，与以前的版本一样，Django 1.5 也包含一些轻微的 :ref:`不兼容变更 "
"<backwards-incompatible-1.5>`；从以前版本的 Django 升级的用户应该仔细阅读该列"
"表。"

msgid ""
"One deprecated feature worth noting is the shift to \"new-style\" :ttag:"
"`url` tag. Prior to Django 1.3, syntax like ``{% url myview %}`` was "
"interpreted incorrectly (Django considered ``\"myview\"`` to be a literal "
"name of a view, not a template variable named ``myview``). Django 1.3 and "
"above introduced the ``{% load url from future %}`` syntax to bring in the "
"corrected behavior where ``myview`` was seen as a variable."
msgstr ""
"一个已经弃用的特性值得注意的是转向“新风格” :ttag:`url` 标记。在 Django 1.3 之"
"前，类似 ``{% url myview %}`` 的语法被错误地解释（Django 将 ``\"myview\"`` 视"
"为一个视图的字面名称，而不是一个名为 ``myview`` 的模板变量）。Django 1.3 及以"
"上版本引入了 ``{% load url from future %}`` 的语法，以引入已修正的行为，其中 "
"``myview`` 被视为一个变量。"

msgid ""
"The upshot of this is that if you are not using ``{% load url from future %}"
"`` in your templates, you'll need to change tags like ``{% url myview %}`` "
"to ``{% url \"myview\" %}``. If you *were* using ``{% load url from future %}"
"`` you can simply remove that line under Django 1.5"
msgstr ""
"这个要点是，如果你的模板中没有使用 ``{% load url from future %}``，你需要将类"
"似 ``{% url myview %}`` 这样的标记更改为 ``{% url \"myview\" %}``。如果你 *曾"
"经* 使用了 ``{% load url from future %}``，在 Django 1.5 及以上版本中，你可以"
"简单地删除那行代码。"

msgid ""
"Django 1.5 requires Python 2.6.5 or above, though we **highly recommend** "
"Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""
"Django 1.5 要求使用 Python 2.6.5 或更高版本，但我们 **强烈建议** 使用 Python "
"2.7.3 或更高版本。不再支持 Python 2.5 及以下版本。"

msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.6 or newer as their "
"default version. If you're still using Python 2.5, however, you'll need to "
"stick to Django 1.4 until you can upgrade your Python version. Per :doc:`our "
"support policy </internals/release-process>`, Django 1.4 will continue to "
"receive security support until the release of Django 1.6."
msgstr ""
"这个变化应该只影响少数 Django 用户，因为今天大多数操作系统供应商默认安装 "
"Python 2.6 或更新版本。然而，如果你仍在使用 Python 2.5，你需要继续使用 "
"Django 1.4，直到你可以升级到支持的 Python 版本。根据 :doc:`我们的支持政策 </"
"internals/release-process>`，Django 1.4 将在 Django 1.6 发布之前继续获得安全"
"支持。"

msgid ""
"Django 1.5 does not run on a Jython final release, because Jython's latest "
"release doesn't currently support Python 2.6. However, Jython currently does "
"offer an alpha release featuring 2.7 support, and Django 1.5 supports that "
"alpha release."
msgstr ""
"Django 1.5 无法在 Jython 的最终版本上运行，因为 Jython 的最新版本目前不支持 "
"Python 2.6 。然而，Jython 目前确实提供了一个具有 2.7 支持的 alpha 版本，而 "
"Django 1.5 支持该 alpha 版本。"

msgid "Python 3 support"
msgstr "Python 3 支持"

msgid ""
"Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and "
"above. This comes in the form of a **single** codebase; you don't need to "
"install a different version of Django on Python 3. This means that you can "
"write applications targeted for just Python 2, just Python 3, or single "
"applications that support both platforms."
msgstr ""
"Django 1.5 引入了对 Python 3 的支持 - 具体而言，是 Python 3.2 及以上版本。这"
"以 **单一** 代码库的形式呈现；你不需要在 Python 3 上安装不同版本的 Django。这"
"意味着你可以编写针对仅 Python 2、仅 Python 3 或同时支持两个平台的单一应用程"
"序。"

msgid ""
"However, we're labeling this support \"experimental\" for now: although it's "
"received extensive testing via our automated test suite, it's received very "
"little real-world testing. We've done our best to eliminate bugs, but we "
"can't be sure we covered all possible uses of Django."
msgstr ""
"然而，我们现在将这种支持标记为“实验性”的：尽管它通过我们的自动化测试套件接受"
"了广泛的测试，但在现实世界中的测试非常少。我们已尽最大努力消除错误，但不能确"
"保涵盖了 Django 的所有可能用途。"

msgid ""
"Some features of Django aren't available because they depend on third-party "
"software that hasn't been ported to Python 3 yet, including:"
msgstr ""
"由于某些功能依赖尚未移植到 Python 3 的第三方软件，因此 Django 的部分功能无法"
"使用，包括："

msgid "the MySQL database backend (depends on MySQLdb)"
msgstr "MySQL 数据库后端（依赖于 MySQLdb）"

msgid ":class:`~django.db.models.ImageField` (depends on PIL)"
msgstr ":class:`~django.db.models.ImageField` （依赖于 PIL）"

msgid ""
":class:`~django.test.LiveServerTestCase` (depends on Selenium WebDriver)"
msgstr ":class:`~django.test.LiveServerTestCase` （依赖于 Selenium WebDriver）"

msgid ""
"Further, Django's more than a web framework; it's an ecosystem of pluggable "
"components. At this point, very few third-party applications have been "
"ported to Python 3, so it's unlikely that a real-world application will have "
"all its dependencies satisfied under Python 3."
msgstr ""
"此外，Django 不仅仅是一个 Web 框架；它还是一个可插拔组件的生态系统。目前，很"
"少有第三方应用程序已移植到 Python 3，因此现实世界中的应用程序在 Python 3 下满"
"足所有依赖关系的可能性很小。"

msgid ""
"Thus, we're recommending that Django 1.5 not be used in production under "
"Python 3. Instead, use this opportunity to begin porting applications to "
"Python 3. If you're an author of a pluggable component, we encourage you to "
"start porting now."
msgstr ""
"因此，我们建议不要在 Python 3 下使用 Django 1.5 进行生产。相反，借此机会开始"
"将应用程序移植到 Python 3 。如果您是一个可插拔组件的作者，我们鼓励您现在开始"
"移植。"

msgid ""
"We plan to offer first-class, production-ready support for Python 3 in our "
"next release, Django 1.6."
msgstr ""
"我们计划在下一个版本 Django 1.6 中为 Python 3 提供一流的、生产就绪的支持。"

msgid "What's new in Django 1.5"
msgstr "Django 1.5 中的新功能"

msgid "Configurable User model"
msgstr "可配置的用户模型"

msgid ""
"In Django 1.5, you can now use your own model as the store for user-related "
"data. If your project needs a username with more than 30 characters, or if "
"you want to store user's names in a format other than first name/last name, "
"or you want to put custom profile information onto your User object, you can "
"now do so."
msgstr ""
"在 Django 1.5 中，您现在可以使用自己的模型作为存储用户相关数据的存储。如果您"
"的项目需要一个超过 30 个字符的用户名，或者您想要以除姓/名之外的格式存储用户的"
"名字，或者您想要将自定义的个人资料信息添加到您的用户对象上，您现在可以这样"
"做。"

msgid ""
"If you have a third-party reusable application that references the User "
"model, you may need to make some changes to the way you reference User "
"instances. You should also document any specific features of the User model "
"that your application relies upon."
msgstr ""
"如果您有一个引用 User 模型的第三方可重用应用程序，您可能需要对引用 User 实例"
"的方式进行一些更改。您还应记录您的应用程序所依赖的 User 模型的任何特定功能。"

msgid ""
"See the :ref:`documentation on custom user models <auth-custom-user>` for "
"more details."
msgstr ""
"请查看 :ref:`自定义用户模型的文档 <auth-custom-user>` 以获取更多详细信息。"

msgid "Support for saving a subset of model's fields"
msgstr "支持保存模型字段的子集"

msgid ""
"The method :meth:`Model.save() <django.db.models.Model.save()>` has a new "
"keyword argument ``update_fields``. By using this argument it is possible to "
"save only a select list of model's fields. This can be useful for "
"performance reasons or when trying to avoid overwriting concurrent changes."
msgstr ""
"方法 :meth:`Model.save() <django.db.models.Model.save()>` 现在有一个新的关键"
"字参数 ``update_fields``。通过使用这个参数，可以仅保存模型字段的选择列表。这"
"在性能方面或在尝试避免覆盖并发更改时可能很有用。"

msgid ""
"Deferred instances (those loaded by ``.only()`` or ``.defer()``) will "
"automatically save just the loaded fields. If any field is set manually "
"after load, that field will also get updated on save."
msgstr ""
"被延迟加载的实例（通过 ``.only()`` 或 ``.defer()`` 加载的实例）将自动保存仅加"
"载的字段。如果在加载后手动设置了任何字段，这些字段在保存时也将得到更新。"

msgid ""
"See the :meth:`Model.save() <django.db.models.Model.save()>` documentation "
"for more details."
msgstr ""
"请查看 :meth:`Model.save() <django.db.models.Model.save()>` 的文档以获取更多"
"详细信息。"

msgid "Caching of related model instances"
msgstr "缓存相关模型实例"

msgid ""
"When traversing relations, the ORM will avoid re-fetching objects that were "
"previously loaded. For example, with the tutorial's models:"
msgstr ""
"在遍历关系时，ORM 将避免重新获取之前已加载的对象。例如，使用教程中的模型："

msgid ""
"In Django 1.5, the third line no longer triggers a new SQL query to fetch "
"``first_choice.poll``; it was set by the second line."
msgstr ""
"在 Django 1.5 中，第三行不再触发新的 SQL 查询来获取 ``first_choice.poll``；它"
"已经由第二行设置了。"

msgid ""
"For one-to-one relationships, both sides can be cached. For many-to-one "
"relationships, only the single side of the relationship can be cached. This "
"is particularly helpful in combination with ``prefetch_related``."
msgstr ""
"对于一对一关系，双方都可以被缓存。对于多对一关系，只能缓存关系的单一一方。这"
"在与 ``prefetch_related`` 结合使用时特别有帮助。"

msgid "Explicit support for streaming responses"
msgstr "明确支持流式响应"

msgid ""
"Before Django 1.5, it was possible to create a streaming response by passing "
"an iterator to :class:`~django.http.HttpResponse`. But this was unreliable: "
"any middleware that accessed the :attr:`~django.http.HttpResponse.content` "
"attribute would consume the iterator prematurely."
msgstr ""
"在 Django 1.5 之前，可以通过将迭代器传递给 :class:`~django.http."
"HttpResponse` 来创建流式响应。但这是不可靠的：任何访问 :attr:`~django.http."
"HttpResponse.content` 属性的中间件都会提前消耗迭代器。"

msgid ""
"You can now explicitly generate a streaming response with the new :class:"
"`~django.http.StreamingHttpResponse` class. This class exposes a :class:"
"`~django.http.StreamingHttpResponse.streaming_content` attribute which is an "
"iterator."
msgstr ""
"现在，你可以使用新的 :class:`~django.http.StreamingHttpResponse` 类明确生成流"
"式响应。这个类公开了一个 :class:`~django.http.StreamingHttpResponse."
"streaming_content` 属性，它是一个迭代器。"

msgid ""
"Since :class:`~django.http.StreamingHttpResponse` does not have a "
"``content`` attribute, middleware that needs access to the response content "
"must test for streaming responses and behave accordingly."
msgstr ""
"由于 :class:`~django.http.StreamingHttpResponse` 没有 ``content`` 属性，需要"
"访问响应内容的中间件必须检测流式响应并相应地处理。"

msgid "``{% verbatim %}`` template tag"
msgstr "``{% verbatim %}`` 模板标签"

msgid ""
"To make it easier to deal with JavaScript templates which collide with "
"Django's syntax, you can now use the :ttag:`verbatim` block tag to avoid "
"parsing the tag's content."
msgstr ""
"为了更轻松地处理与 Django 语法冲突的 JavaScript 模板，你现在可以使用 :ttag:"
"`verbatim` 块标签来避免解析标签的内容。"

msgid "Retrieval of ``ContentType`` instances associated with proxy models"
msgstr "检索与代理模型相关联的 ``ContentType`` 实例"

msgid ""
"The methods :meth:`ContentTypeManager.get_for_model() <django.contrib."
"contenttypes.models.ContentTypeManager.get_for_model()>` and :meth:"
"`ContentTypeManager.get_for_models() <django.contrib.contenttypes.models."
"ContentTypeManager.get_for_models()>` have a new keyword argument – "
"respectively ``for_concrete_model`` and ``for_concrete_models``. By passing "
"``False`` using this argument it is now possible to retrieve the :class:"
"`ContentType <django.contrib.contenttypes.models.ContentType>` associated "
"with proxy models."
msgstr ""
"方法 :meth:`ContentTypeManager.get_for_model() <django.contrib.contenttypes."
"models.ContentTypeManager.get_for_model()>` 和 :meth:`ContentTypeManager."
"get_for_models() <django.contrib.contenttypes.models.ContentTypeManager."
"get_for_models()>` 现在有一个新的关键字参数，分别是 ``for_concrete_model`` "
"和 ``for_concrete_models``。通过使用这个参数并传递 ``False``，现在可以检索与"
"代理模型相关联的 :class:`ContentType <django.contrib.contenttypes.models."
"ContentType>`。"

msgid "New ``view`` variable in class-based views context"
msgstr "类基视图上下文中的新变量 ``view``"

msgid ""
"In all :doc:`generic class-based views </topics/class-based-views/index>` "
"(or any class-based view inheriting from ``ContextMixin``), the context "
"dictionary contains a ``view`` variable that points to the ``View`` instance."
msgstr ""
"在所有 :doc:`通用类基视图 </topics/class-based-views/index>` （或继承自 "
"``ContextMixin`` 的任何类基视图）中，上下文字典包含一个指向 ``View`` 实例的 "
"``view`` 变量。"

msgid ""
":class:`~django.contrib.gis.geos.LineString` and :class:`~django.contrib.gis."
"geos.MultiLineString` GEOS objects now support the :meth:`~django.contrib."
"gis.geos.GEOSGeometry.interpolate()` and :meth:`~django.contrib.gis.geos."
"GEOSGeometry.project()` methods (so-called linear referencing)."
msgstr ""
":class:`~django.contrib.gis.geos.LineString` 和 :class:`~django.contrib.gis."
"geos.MultiLineString` GEOS 对象现在支持 :meth:`~django.contrib.gis.geos."
"GEOSGeometry.interpolate()` 和 :meth:`~django.contrib.gis.geos.GEOSGeometry."
"project()` 方法（称为线性参考）。"

msgid ""
"The ``wkb`` and ``hex`` properties of :class:`~django.contrib.gis.geos."
"GEOSGeometry` objects preserve the Z dimension."
msgstr ""
":class:`~django.contrib.gis.geos.GEOSGeometry` 对象的 ``wkb`` 和 ``hex`` 属性"
"保留了 Z 维度。"

msgid ""
"Support for PostGIS 2.0 has been added and support for GDAL < 1.5 has been "
"dropped."
msgstr "已添加对 PostGIS 2.0 的支持，并且已放弃对 GDAL < 1.5 的支持。"

msgid "New tutorials"
msgstr "新教程"

msgid ""
"Additions to the docs include a revamped :doc:`Tutorial 3</intro/"
"tutorial03>` and a new :doc:`tutorial on testing</intro/tutorial05>`. A new "
"section, \"Advanced Tutorials\", offers :doc:`How to write reusable apps </"
"intro/reusable-apps>` as well as a step-by-step guide for new contributors "
"in :doc:`Writing your first patch for Django </intro/contributing>`."
msgstr ""
"文档中的新内容包括全新的 :doc:`教程 3 </intro/tutorial03>` 和新的 :doc:`测试"
"教程 </intro/tutorial05>`。一个新的部分，\"高级教程\"，提供了 :doc:`如何编写"
"可重用应用程序 </intro/reusable-apps>` 以及新贡献者的逐步指南 :doc:`为 "
"Django 编写你的第一个补丁 </intro/contributing>`。"

msgid "Django 1.5 also includes several smaller improvements worth noting:"
msgstr "Django 1.5 还包括一些值得注意的较小改进："

msgid ""
"The template engine now interprets ``True``, ``False`` and ``None`` as the "
"corresponding Python objects."
msgstr ""
"模板引擎现在将 ``True``、``False`` 和 ``None`` 解释为相应的 Python 对象。"

msgid ""
":mod:`django.utils.timezone` provides a helper for converting aware "
"datetimes between time zones. See :func:`~django.utils.timezone.localtime`."
msgstr ""
":mod:`django.utils.timezone` 提供了一个帮助程序，用于在不同时区之间转换带有时"
"区信息的日期时间。请查看 :func:`~django.utils.timezone.localtime`。"

msgid "The generic views support OPTIONS requests."
msgstr "通用视图支持 OPTIONS 请求。"

msgid ""
"Management commands do not raise ``SystemExit`` any more when called by code "
"from :func:`~django.core.management.call_command`. Any exception raised by "
"the command (mostly :exc:`~django.core.management.CommandError`) is "
"propagated."
msgstr ""
"当通过 :func:`~django.core.management.call_command` 从代码中调用管理命令时，"
"管理命令不再引发 ``SystemExit``。任何由命令引发的异常（主要是 :exc:`~django."
"core.management.CommandError`）将被传播。"

msgid ""
"Moreover, when you output errors or messages in your custom commands, you "
"should now use ``self.stdout.write('message')`` and ``self.stderr."
"write('error')`` (see the note on :ref:`management commands output "
"<management-commands-output>`)."
msgstr ""
"此外，当在自定义命令中输出错误或消息时，现在应该使用 ``self.stdout."
"write('message')`` 和 ``self.stderr.write('error')`` （参见 :ref:`管理命令输"
"出 <management-commands-output>` 中的说明）。"

msgid ""
"The :djadmin:`dumpdata` management command outputs one row at a time, "
"preventing out-of-memory errors when dumping large datasets."
msgstr ""
":djadmin:`dumpdata` 管理命令现在逐行输出数据，以防止在导出大型数据集时出现内"
"存不足错误。"

msgid ""
"In the localflavor for Canada, ``pq`` was added to the acceptable codes for "
"Quebec. It's an old abbreviation."
msgstr ""
"在加拿大的本地化中，已经添加了 ``pq`` 作为魁北克省的可接受缩写。这是一个旧的"
"缩写。"

msgid ""
"The :ref:`receiver <connecting-receiver-functions>` decorator is now able to "
"connect to more than one signal by supplying a list of signals."
msgstr ""
":ref:`receiver <connecting-receiver-functions>` 装饰器现在可以通过提供一个信"
"号列表来连接多个信号。"

msgid ""
"In the admin, you can now filter users by groups which they are members of."
msgstr "在管理员界面中，您现在可以根据用户所属的群组来筛选用户。"

msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` "
"now has a batch_size argument. By default the batch_size is unlimited except "
"for SQLite where single batch is limited so that 999 parameters per query "
"isn't exceeded."
msgstr ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` "
"现在具有一个 batch_size 参数。默认情况下，batch_size 是无限的，除了 SQLite，"
"其中单个批次受限，以确保不超过每个查询的 999 个参数。"

msgid ""
"The :setting:`LOGIN_URL` and :setting:`LOGIN_REDIRECT_URL` settings now also "
"accept view function names and :ref:`named URL patterns <naming-url-"
"patterns>`. This allows you to reduce configuration duplication. More "
"information can be found in the :func:`~django.contrib.auth.decorators."
"login_required` documentation."
msgstr ""
":setting:`LOGIN_URL` 和 :setting:`LOGIN_REDIRECT_URL` 设置现在也接受视图函数"
"名称和 :ref:`命名的 URL 模式 <naming-url-patterns>`。这允许您减少配置的重复。"
"更多信息可以在 :func:`~django.contrib.auth.decorators.login_required` 文档中"
"找到。"

msgid ""
"Django now provides a mod_wsgi :doc:`auth handler </howto/deployment/wsgi/"
"apache-auth>`."
msgstr ""
"Django 现在提供了一个 mod_wsgi :doc:`认证处理程序 </howto/deployment/wsgi/"
"apache-auth>`。"

msgid ""
"The :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` and :"
"meth:`Model.delete() <django.db.models.Model.delete()>` can now take fast-"
"path in some cases. The fast-path allows for less queries and less objects "
"fetched into memory. See :meth:`QuerySet.delete() <django.db.models.query."
"QuerySet.delete>` for details."
msgstr ""
"在某些情况下，:meth:`QuerySet.delete() <django.db.models.query.QuerySet."
"delete>` 和 :meth:`Model.delete() <django.db.models.Model.delete()>` 现在可以"
"采用快速路径。快速路径可以减少查询和减少加载到内存中的对象。请查看 :meth:"
"`QuerySet.delete() <django.db.models.query.QuerySet.delete>` 以获取详细信息。"

msgid ""
"An instance of ``ResolverMatch`` is stored on the request as "
"``resolver_match``."
msgstr ""
"一个 ``ResolverMatch`` 的实例被存储在请求上，命名为 ``resolver_match``。"

msgid ""
"By default, all logging messages reaching the ``django`` logger when :"
"setting:`DEBUG` is ``True`` are sent to the console (unless you redefine the "
"logger in your :setting:`LOGGING` setting)."
msgstr ""
"默认情况下，当 :setting:`DEBUG` 为 ``True`` 时，所有达到 ``django`` 日志器的"
"日志消息都会发送到控制台（除非您在 :setting:`LOGGING` 设置中重新定义了日志"
"器）。"

msgid ""
"When using :class:`~django.template.RequestContext`, it is now possible to "
"look up permissions by using ``{% if 'someapp.someperm' in perms %}`` in "
"templates."
msgstr ""
"在使用 :class:`~django.template.RequestContext` 时，现在可以在模板中使用 "
"``{% if 'someapp.someperm' in perms %}`` 来查找权限。"

msgid ""
"It's not required any more to have ``404.html`` and ``500.html`` templates "
"in the root templates directory. Django will output some basic error "
"messages for both situations when those templates are not found. It's still "
"recommended as good practice to provide those templates in order to present "
"pretty error pages to the user."
msgstr ""
"不再需要在根模板目录中拥有 ``404.html`` 和 ``500.html`` 模板。当这些模板找不"
"到时，Django 会输出一些基本的错误消息。仍然建议作为良好的实践提供这些模板，以"
"便向用户呈现漂亮的错误页面。"

msgid ""
":mod:`django.contrib.auth` provides a new signal that is emitted whenever a "
"user fails to login successfully. See :data:`~django.contrib.auth.signals."
"user_login_failed`"
msgstr ""
":mod:`django.contrib.auth` 提供了一个新的信号，每当用户登录失败时都会发出该信"
"号。请查看 :data:`~django.contrib.auth.signals.user_login_failed`。"

msgid ""
"The new :option:`loaddata --ignorenonexistent` option ignore data for fields "
"that no longer exist."
msgstr ""
"新的 :option:`loaddata --ignorenonexistent` 选项会忽略不再存在的字段的数据。"

msgid ""
":meth:`~django.test.SimpleTestCase.assertXMLEqual` and :meth:`~django.test."
"SimpleTestCase.assertXMLNotEqual` new assertions allow you to test equality "
"for XML content at a semantic level, without caring for syntax differences "
"(spaces, attribute order, etc.)."
msgstr ""
":meth:`~django.test.SimpleTestCase.assertXMLEqual` 和 :meth:`~django.test."
"SimpleTestCase.assertXMLNotEqual` 这两个新的断言允许您在语义级别测试 XML 内容"
"的相等性，而不必关心语法差异（空格、属性顺序等）。"

msgid ""
"RemoteUserMiddleware now forces logout when the REMOTE_USER header "
"disappears during the same browser session."
msgstr ""
"当同一浏览器会话中的 REMOTE_USER 头消失时，RemoteUserMiddleware 现在会强制注"
"销。"

msgid ""
"The :ref:`cache-based session backend <cached-sessions-backend>` can store "
"session data in a non-default cache."
msgstr ""
"基于缓存的会话后端（:ref:`cache-based session backend <cached-sessions-"
"backend>`）可以将会话数据存储在非默认的缓存中。"

msgid ""
"Multi-column indexes can now be created on models. Read the "
"``index_together`` documentation for more information."
msgstr ""

msgid ""
"During Django's logging configuration verbose Deprecation warnings are "
"enabled and warnings are captured into the logging system. Logged warnings "
"are routed through the ``console`` logging handler, which by default "
"requires :setting:`DEBUG` to be True for output to be generated. The result "
"is that DeprecationWarnings should be printed to the console in development "
"environments the way they have been in Python versions < 2.7."
msgstr ""
"在 Django 的日志配置中，详细的弃用警告被启用，并且警告被捕获到日志系统中。已"
"记录的警告通过 ``console`` 日志处理程序路由，其默认情况下需要 :setting:"
"`DEBUG` 为 True 才能生成输出。因此，在开发环境中，DeprecationWarnings 应该以"
"与 Python 版本 < 2.7 中相同的方式打印到控制台。"

msgid ""
"The API for :meth:`django.contrib.admin.ModelAdmin.message_user` method has "
"been modified to accept additional arguments adding capabilities similar to :"
"func:`django.contrib.messages.add_message`. This is useful for generating "
"error messages from admin actions."
msgstr ""
":meth:`django.contrib.admin.ModelAdmin.message_user` 方法的 API 已经修改，以"
"接受额外的参数，增加了类似于 :func:`django.contrib.messages.add_message` 的功"
"能。这对于从管理操作生成错误消息非常有用。"

msgid ""
"The admin's list filters can now be customized per-request thanks to the "
"new :meth:`django.contrib.admin.ModelAdmin.get_list_filter` method."
msgstr ""
"管理员的列表过滤器现在可以根据每个请求进行自定义，这要归功于新的 :meth:"
"`django.contrib.admin.ModelAdmin.get_list_filter` 方法。"

msgid "Backwards incompatible changes in 1.5"
msgstr "1.5 中的向后不兼容更改"

msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"ref:`deprecation plan <deprecation-removed-in-1.5>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""
"除了本节中概述的更改外，确保查看 :ref:`弃用计划 <deprecation-removed-"
"in-1.5>`，以了解已删除的任何功能。如果您没有在给定功能的弃用时间表内更新您的"
"代码，其删除可能会被视为向后不兼容的更改。"

msgid "``ALLOWED_HOSTS`` required in production"
msgstr "在生产环境中必须设置 ``ALLOWED_HOSTS``"

msgid ""
"The new :setting:`ALLOWED_HOSTS` setting validates the request's ``Host`` "
"header and protects against host-poisoning attacks. This setting is now "
"required whenever :setting:`DEBUG` is ``False``, or else :meth:`django.http."
"HttpRequest.get_host()` will raise :exc:`~django.core.exceptions."
"SuspiciousOperation`. For more details see the :setting:`full "
"documentation<ALLOWED_HOSTS>` for the new setting."
msgstr ""
"新的 :setting:`ALLOWED_HOSTS` 设置验证请求的 ``Host`` 头并保护免受主机投毒攻"
"击。此设置现在在 :setting:`DEBUG` 为 ``False`` 时是必需的，否则 :meth:"
"`django.http.HttpRequest.get_host()` 将引发 :exc:`~django.core.exceptions."
"SuspiciousOperation`。更多详情请参阅新设置的 :setting:`完整文档 "
"<ALLOWED_HOSTS>`。"

msgid "Managers on abstract models"
msgstr "抽象模型上的管理器"

msgid ""
"Abstract models are able to define a custom manager, and that manager :ref:"
"`will be inherited by any concrete models extending the abstract model "
"<custom-managers-and-inheritance>`. However, if you try to use the abstract "
"model to call a method on the manager, an exception will now be raised. "
"Previously, the call would have been permitted, but would have failed as "
"soon as any database operation was attempted (usually with a \"table does "
"not exist\" error from the database)."
msgstr ""
"抽象模型可以定义一个自定义管理器，并且该管理器 :ref:`将被任何扩展抽象模型的具"
"体模型继承 <custom-managers-and-inheritance>`。然而，如果您尝试在抽象模型上调"
"用管理器的方法，现在将会引发异常。以前，允许调用，但只要尝试进行任何数据库操"
"作，通常会导致数据库报错 \"表不存在\"。"

msgid ""
"If you have functionality on a manager that you have been invoking using the "
"abstract class, you should migrate that logic to a Python ``staticmethod`` "
"or ``classmethod`` on the abstract class."
msgstr ""
"如果您在管理器上有功能，一直在使用抽象类进行调用，您应该将该逻辑迁移到抽象类"
"上的 Python ``staticmethod`` 或 ``classmethod``。"

msgid "Context in year archive class-based views"
msgstr "基于类的年度归档视图中的上下文"

msgid ""
"For consistency with the other date-based generic views, :class:`~django."
"views.generic.dates.YearArchiveView` now passes ``year`` in the context as "
"a :class:`datetime.date` rather than a string.  If you are using ``{{ year }}"
"`` in your templates, you must replace it with ``{{ year|date:\"Y\" }}``."
msgstr ""
"为了与其他基于日期的通用视图保持一致，:class:`~django.views.generic.dates."
"YearArchiveView` 现在将 ``year`` 作为一个 :class:`datetime.date` 而不是一个字"
"符串传递给上下文。如果您在模板中使用了 ``{{ year }}``，您必须将其替换为 "
"``{{ year|date:\"Y\" }}``。"

msgid ""
"``next_year`` and ``previous_year`` were also added in the context. They are "
"calculated according to ``allow_empty`` and ``allow_future``."
msgstr ""
"``next_year`` 和 ``previous_year`` 也被添加到上下文中。它们根据 "
"``allow_empty`` 和 ``allow_future`` 进行计算。"

msgid "Context in year and month archive class-based views"
msgstr "基于类的年度和月度归档视图中的上下文"

msgid ""
":class:`~django.views.generic.dates.YearArchiveView` and :class:`~django."
"views.generic.dates.MonthArchiveView` were documented to provide a "
"``date_list`` sorted in ascending order in the context, like their function-"
"based predecessors, but it actually was in descending order. In 1.5, the "
"documented order was restored. You may want to add (or remove) the "
"``reversed`` keyword when you're iterating on ``date_list`` in a template:"
msgstr ""
":class:`~django.views.generic.dates.YearArchiveView` 和 :class:`~django."
"views.generic.dates.MonthArchiveView` 的文档中曾经说明在上下文中提供一个按升"
"序排序的 ``date_list``，就像它们的基于函数的前身一样，但实际上它是按降序排序"
"的。在1.5版本中，文档中的顺序已经恢复。在模板中迭代 ``date_list`` 时，您可能"
"需要添加（或删除） ``reversed`` 关键字："

msgid ""
":class:`~django.views.generic.dates.ArchiveIndexView` still provides a "
"``date_list`` in descending order."
msgstr ""
":class:`~django.views.generic.dates.ArchiveIndexView` 仍然以降序提供一个 "
"``date_list``。"

msgid "Context in TemplateView"
msgstr "TemplateView 中的上下文"

msgid ""
"For consistency with the design of the other generic views, :class:`~django."
"views.generic.base.TemplateView` no longer passes a ``params`` dictionary "
"into the context, instead passing the variables from the URLconf directly "
"into the context."
msgstr ""
"为了与其他通用视图的设计保持一致，:class:`~django.views.generic.base."
"TemplateView` 不再将一个 ``params`` 字典传递到上下文中，而是直接将来自 "
"URLconf 的变量传递到上下文中。"

msgid "Non-form data in HTTP requests"
msgstr "HTTP 请求中的非表单数据"

msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` will no longer include "
"data posted via HTTP requests with non form-specific content-types in the "
"header. In prior versions, data posted with content-types other than :"
"mimetype:`multipart/form-data` or :mimetype:`application/x-www-form-"
"urlencoded` would still end up represented in the :attr:`request.POST "
"<django.http.HttpRequest.POST>` attribute. Developers wishing to access the "
"raw POST data for these cases, should use the :attr:`request.body <django."
"http.HttpRequest.body>` attribute instead."
msgstr ""
":attr:`request.POST <django.http.HttpRequest.POST>` 将不再包含通过非表单特定"
"内容类型的 HTTP 请求发布的数据。在以前的版本中，使用除 :mimetype:`multipart/"
"form-data` 或 :mimetype:`application/x-www-form-urlencoded` 之外的内容类型发"
"布的数据仍然会在 :attr:`request.POST <django.http.HttpRequest.POST>` 属性中表"
"示出来。希望访问这些情况下的原始 POST 数据的开发人员应该使用 :attr:`request."
"body <django.http.HttpRequest.body>` 属性。"

msgid ":data:`~django.core.signals.request_finished` signal"
msgstr ":data:`~django.core.signals.request_finished` 信号"

msgid ""
"Django used to send the :data:`~django.core.signals.request_finished` signal "
"as soon as the view function returned a response. This interacted badly "
"with :ref:`streaming responses <httpresponse-streaming>` that delay content "
"generation."
msgstr ""
"Django 曾经在视图函数返回响应后立即发送 :data:`~django.core.signals."
"request_finished` 信号。这与延迟内容生成的 :ref:`流式响应 <httpresponse-"
"streaming>` 产生了不良互动。"

msgid ""
"This signal is now sent after the content is fully consumed by the WSGI "
"gateway. This might be backwards incompatible if you rely on the signal "
"being fired before sending the response content to the client. If you do, "
"you should consider using :doc:`middleware </topics/http/middleware>` "
"instead."
msgstr ""
"现在，该信号在内容被 WSGI 网关完全消耗后发送。如果您依赖于在将响应内容发送给"
"客户端之前触发信号，这可能会导致不兼容。如果是这样，您应该考虑使用 :doc:`中间"
"件 </topics/http/middleware>`。"

msgid ""
"Some WSGI servers and middleware do not always call ``close`` on the "
"response object after handling a request, most notably uWSGI prior to 1.2.6 "
"and Sentry's error reporting middleware up to 2.0.7. In those cases the "
"``request_finished`` signal isn't sent at all. This can result in idle "
"connections to database and memcache servers."
msgstr ""
"一些 WSGI 服务器和中间件在处理请求后并不总是调用响应对象的 ``close`` 方法，特"
"别是在 1.2.6 之前的 uWSGI 和 Sentry 的错误报告中间件在 2.0.7 之前的版本中存在"
"这个问题。在这些情况下，``request_finished`` 信号根本不会被发送。这可能导致数"
"据库和内存缓存服务器上的空闲连接。"

msgid "OPTIONS, PUT and DELETE requests in the test client"
msgstr "测试客户端中的 OPTIONS 、 PUT 和 DELETE 请求"

msgid ""
"Unlike GET and POST, these HTTP methods aren't implemented by web browsers. "
"Rather, they're used in APIs, which transfer data in various formats such as "
"JSON or XML. Since such requests may contain arbitrary data, Django doesn't "
"attempt to decode their body."
msgstr ""
"与 GET 和 POST 不同，这些 HTTP 方法并不由 Web 浏览器实现。相反，它们在 API 中"
"使用，用于以各种格式（如 JSON 或 XML）传输数据。由于此类请求可能包含任意数"
"据，Django 不会尝试解码其主体。"

msgid ""
"However, the test client used to build a query string for OPTIONS and DELETE "
"requests like for GET, and a request body for PUT requests like for POST. "
"This encoding was arbitrary and inconsistent with Django's behavior when it "
"receives the requests, so it was removed in Django 1.5."
msgstr ""
"然而，用于构建 OPTIONS 和 DELETE 请求的测试客户端与 GET 请求一样构建查询字符"
"串，而用于构建 PUT 请求的测试客户端与 POST 请求一样构建请求体。这种编码方式是"
"任意的，并且与 Django 接收请求时的行为不一致，因此在 Django 1.5 中已被移除。"

msgid ""
"If you were using the ``data`` parameter in an OPTIONS or a DELETE request, "
"you must convert it to a query string and append it to the ``path`` "
"parameter."
msgstr ""
"如果您在 OPTIONS 或 DELETE 请求中使用了 ``data`` 参数，您必须将其转换为查询字"
"符串并附加到 ``path`` 参数中。"

msgid ""
"If you were using the ``data`` parameter in a PUT request without a "
"``content_type``, you must encode your data before passing it to the test "
"client and set the ``content_type`` argument."
msgstr ""
"如果您在没有 ``content_type`` 的情况下在 PUT 请求中使用了 ``data`` 参数，您必"
"须在将其传递给测试客户端之前对数据进行编码，并设置 ``content_type`` 参数。"

msgid "System version of ``simplejson`` no longer used"
msgstr "系统版本的 ``simplejson`` 不再使用"

msgid ""
":ref:`As explained below <simplejson-deprecation>`, Django 1.5 deprecates "
"``django.utils.simplejson`` in favor of Python 2.6's built-in :mod:`json` "
"module. In theory, this change is harmless. Unfortunately, because of "
"incompatibilities between versions of ``simplejson``, it may trigger errors "
"in some circumstances."
msgstr ""
"正如下文所解释的那样，Django 1.5 弃用了 ``django.utils.simplejson``，而推荐使"
"用 Python 2.6 内置的 :mod:`json` 模块。理论上，这个更改是无害的。不幸的是，由"
"于不同版本的 ``simplejson`` 之间的不兼容性，它可能在某些情况下触发错误。"

msgid ""
"JSON-related features in Django 1.4 always used ``django.utils.simplejson``. "
"This module was actually:"
msgstr ""
"Django 1.4 中与 JSON 相关的功能始终使用了 ``django.utils.simplejson``。这个模"
"块实际上是："

msgid ""
"A system version of ``simplejson``, if one was available (i.e. ``import "
"simplejson`` works), if it was more recent than Django's built-in copy or it "
"had the C speedups, or"
msgstr ""
"如果有一个系统版本的 ``simplejson``，如果有的话（即 ``import simplejson`` 能"
"正常工作），如果它比 Django 内置的版本更新，或者它具有 C 加速，或者"

msgid ""
"The :mod:`json` module from the standard library, if it was available (i.e. "
"Python 2.6 or greater), or"
msgstr ""
"标准库中的 :mod:`json` 模块，如果可用（即 Python 2.6 或更高版本），或者"

msgid "A built-in copy of version 2.0.7 of ``simplejson``."
msgstr "一个内置版本的 ``simplejson``，版本号为 2.0.7。"

msgid ""
"In Django 1.5, those features use Python's :mod:`json` module, which is "
"based on version 2.0.9 of ``simplejson``."
msgstr ""
"在 Django 1.5 中，这些功能使用了 Python 的 :mod:`json` 模块，该模块基于 "
"``simplejson`` 版本 2.0.9。"

msgid ""
"There are no known incompatibilities between Django's copy of version 2.0.7 "
"and Python's copy of version 2.0.9. However, there are some "
"incompatibilities between other versions of ``simplejson``:"
msgstr ""
"目前没有已知的 Django 内置版本 2.0.7 与 Python 版本 2.0.9 之间的不兼容性。但"
"是，其他版本的 ``simplejson`` 存在一些不兼容性："

msgid ""
"While the ``simplejson`` API is documented as always returning Unicode "
"strings, the optional C implementation can return a bytestring. This was "
"fixed in Python 2.7."
msgstr ""
"虽然 ``simplejson`` 的 API 文档中始终说明返回 Unicode 字符串，但可选的 C 实现"
"可以返回字节串。这个问题在 Python 2.7 中已经修复。"

msgid ""
"``simplejson.JSONEncoder`` gained a ``namedtuple_as_object`` keyword "
"argument in version 2.2."
msgstr ""
"``simplejson.JSONEncoder`` 在版本 2.2 中新增了一个关键字参数 "
"``namedtuple_as_object``。"

msgid ""
"More information on these incompatibilities is available in :ticket:`ticket "
"#18023 <18023#comment:10>`."
msgstr ""
"有关这些不兼容性的更多信息可以在 :ticket:`ticket #18023 <18023#comment:10>` "
"中找到。"

msgid ""
"The net result is that, if you have installed ``simplejson`` and your code "
"uses Django's serialization internals directly -- for instance ``django.core."
"serializers.json.DjangoJSONEncoder``, the switch from ``simplejson`` to :mod:"
"`json` could break your code. (In general, changes to internals aren't "
"documented; we're making an exception here.)"
msgstr ""
"总的来说，如果你安装了 ``simplejson`` 并且你的代码直接使用了 Django 的序列化"
"内部，例如 ``django.core.serializers.json.DjangoJSONEncoder``，从 "
"``simplejson`` 切换到 :mod:`json` 可能会破坏你的代码。（一般情况下，对内部的"
"更改不会被记录在文档中；我们在这里做了一个例外。）"

msgid ""
"At this point, the maintainers of Django believe that using :mod:`json` from "
"the standard library offers the strongest guarantee of backwards-"
"compatibility. They recommend to use it from now on."
msgstr ""
"目前，Django 的维护者认为使用标准库中的 :mod:`json` 提供了最强的向后兼容性保"
"证。他们建议从现在开始使用它。"

msgid "String types of hasher method parameters"
msgstr "哈希方法参数的字符串类型"

msgid ""
"If you have written a :ref:`custom password hasher <auth_password_storage>`, "
"your ``encode()``, ``verify()`` or ``safe_summary()`` methods should accept "
"Unicode parameters (``password``, ``salt`` or ``encoded``). If any of the "
"hashing methods need bytestrings, you can use the :func:`~django.utils."
"encoding.force_bytes` utility to encode the strings."
msgstr ""
"如果你编写了一个自定义的密码哈希器（:ref:`自定义密码哈希器 "
"<auth_password_storage>`），你的 ``encode()``、``verify()`` 或 "
"``safe_summary()`` 方法应该接受 Unicode 参数（``password``、``salt`` 或 "
"``encoded``）。如果哈希方法中需要字节串，你可以使用 :func:`~django.utils."
"encoding.force_bytes` 实用程序来编码字符串。"

msgid "Validation of previous_page_number and next_page_number"
msgstr "验证 previous_page_number 和 next_page_number"

msgid ""
"When using :doc:`object pagination </topics/pagination>`, the "
"``previous_page_number()`` and ``next_page_number()`` methods of the :class:"
"`~django.core.paginator.Page` object did not check if the returned number "
"was inside the existing page range. It does check it now and raises an :exc:"
"`~django.core.paginator.InvalidPage` exception when the number is either too "
"low or too high."
msgstr ""
"在使用 :doc:`对象分页 </topics/pagination>` 时，:class:`~django.core."
"paginator.Page` 对象的 ``previous_page_number()`` 和 ``next_page_number()`` "
"方法现在会检查返回的页码是否在现有的页面范围内。如果页码过低或过高，它们将引"
"发 :exc:`~django.core.paginator.InvalidPage` 异常。"

msgid "Behavior of autocommit database option on PostgreSQL changed"
msgstr "PostgreSQL 中 autocommit 数据库选项的行为已更改"

msgid ""
"PostgreSQL's autocommit option didn't work as advertised previously. It did "
"work for single transaction block, but after the first block was left the "
"autocommit behavior was never restored. This bug is now fixed in 1.5. While "
"this is only a bug fix, it is worth checking your applications behavior if "
"you are using PostgreSQL together with the autocommit option."
msgstr ""
"PostgreSQL 的自动提交选项在以前的广告中没有按照预期工作。对于单个事务块确实有"
"效，但是在第一个块结束后，自动提交行为没有被恢复。这个错误在 1.5 版本中已经修"
"复。虽然这只是一个错误修复，但如果你正在使用 PostgreSQL 与自动提交选项，值得"
"检查你的应用程序的行为。"

msgid "Session not saved on 500 responses"
msgstr "500 响应时会话未保存。"

msgid ""
"Django's session middleware will skip saving the session data if the "
"response's status code is 500."
msgstr "如果响应的状态码是 500，Django 的会话中间件将跳过保存会话数据。"

msgid "Email checks on failed admin login"
msgstr "管理员登录失败时进行电子邮件检查。"

msgid ""
"Prior to Django 1.5, if you attempted to log into the admin interface and "
"mistakenly used your email address instead of your username, the admin "
"interface would provide a warning advising that your email address was not "
"your username. In Django 1.5, the introduction of :ref:`custom user models "
"<auth-custom-user>` has required the removal of this warning. This doesn't "
"change the login behavior of the admin site; it only affects the warning "
"message that is displayed under one particular mode of login failure."
msgstr ""
"在 Django 1.5 之前，如果您尝试登录到管理员界面并错误地使用电子邮件地址而不是"
"用户名，管理员界面会提供警告，建议您的电子邮件地址不是用户名。在 Django 1.5 "
"中，引入了 :ref:`自定义用户模型 <auth-custom-user>`，需要删除此警告。这不会改"
"变管理员站点的登录行为；它只影响在一种特定的登录失败模式下显示的警告消息。"

msgid "Changes in tests execution"
msgstr "测试执行的变化"

msgid ""
"Some changes have been introduced in the execution of tests that might be "
"backward-incompatible for some testing setups:"
msgstr "一些关于测试执行的变化已经引入，这可能对某些测试设置不兼容。"

msgid "Database flushing in ``django.test.TransactionTestCase``"
msgstr "在 ``django.test.TransactionTestCase`` 中进行数据库刷新操作"

msgid ""
"Previously, the test database was truncated *before* each test run in a :"
"class:`~django.test.TransactionTestCase`."
msgstr ""
"在 :class:`~django.test.TransactionTestCase` 中，在每次测试运行之前对测试数据"
"库进行截断操作。"

msgid ""
"In order to be able to run unit tests in any order and to make sure they are "
"always isolated from each other, :class:`~django.test.TransactionTestCase` "
"will now reset the database *after* each test run instead."
msgstr ""
"为了能够以任何顺序运行单元测试，并确保它们始终相互隔离，:class:`~django.test."
"TransactionTestCase` 现在会在每次测试运行之后重置数据库。"

msgid "No more implicit DB sequences reset"
msgstr "不再隐式重置数据库序列"

msgid ""
":class:`~django.test.TransactionTestCase` tests used to reset primary key "
"sequences automatically together with the database flushing actions "
"described above."
msgstr ""
":class:`~django.test.TransactionTestCase` 测试过去会自动重置主键序列，以及上"
"述描述的数据库刷新操作。"

msgid ""
"This has been changed so no sequences are implicitly reset. This can cause :"
"class:`~django.test.TransactionTestCase` tests that depend on hard-coded "
"primary key values to break."
msgstr ""
"这已经改变，所以不会隐式重置任何序列。这可能导致依赖于硬编码主键值的 :class:"
"`~django.test.TransactionTestCase` 测试出现问题。"

msgid ""
"The new :attr:`~django.test.TransactionTestCase.reset_sequences` attribute "
"can be used to force the old behavior for :class:`~django.test."
"TransactionTestCase` that might need it."
msgstr ""
"新的 :attr:`~django.test.TransactionTestCase.reset_sequences` 属性可以用于强"
"制对可能需要的 :class:`~django.test.TransactionTestCase` 使用旧的行为。"

msgid "Ordering of tests"
msgstr "测试的顺序"

msgid ""
"In order to make sure all ``TestCase`` code starts with a clean database, "
"tests are now executed in the following order:"
msgstr ""
"为了确保所有的 ``TestCase`` 代码都从一个干净的数据库开始运行，测试现在按照以"
"下顺序执行："

msgid ""
"First, all unit tests (including :class:`unittest.TestCase`, :class:`~django."
"test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django."
"test.TransactionTestCase`) are run with no particular ordering guaranteed "
"nor enforced among them."
msgstr ""
"首先，运行所有单元测试（包括 :class:`unittest.TestCase`、:class:`~django."
"test.SimpleTestCase`、:class:`~django.test.TestCase` 和 :class:`~django.test."
"TransactionTestCase`），它们之间没有特定的顺序保证或强制执行。"

msgid ""
"Then any other tests (e.g. doctests) that may alter the database without "
"restoring it to its original state are run."
msgstr ""
"然后运行可能会更改数据库而不将其还原为原始状态的任何其他测试（例如 "
"doctests）。"

msgid ""
"This should not cause any problems unless you have existing doctests which "
"assume a :class:`~django.test.TransactionTestCase` executed earlier left "
"some database state behind or unit tests that rely on some form of state "
"being preserved after the execution of other tests. Such tests are already "
"very fragile, and must now be changed to be able to run independently."
msgstr ""
"这不应该导致任何问题，除非你有一些现有的 doctests 假设之前执行过一个 :class:"
"`~django.test.TransactionTestCase` 留下了一些数据库状态，或者单元测试依赖于在"
"其他测试执行后保留某种状态。这样的测试已经非常脆弱，现在必须进行更改以能够独"
"立运行。"

msgid "``cleaned_data`` dictionary kept for invalid forms"
msgstr "为无效表单保留的 ``cleaned_data`` 字典"

msgid ""
"The :attr:`~django.forms.Form.cleaned_data` dictionary is now always present "
"after form validation. When the form doesn't validate, it contains only the "
"fields that passed validation. You should test the success of the validation "
"with the :meth:`~django.forms.Form.is_valid()` method and not with the "
"presence or absence of the :attr:`~django.forms.Form.cleaned_data` attribute "
"on the form."
msgstr ""
"现在，经过表单验证后，总是存在 :attr:`~django.forms.Form.cleaned_data` 字典。"
"当表单未通过验证时，它仅包含通过验证的字段。您应该使用 :meth:`~django.forms."
"Form.is_valid()` 方法来测试验证的成功与否，而不是通过表单上的 :attr:`~django."
"forms.Form.cleaned_data` 属性的存在或缺失来判断。"

msgid "Behavior of ``syncdb`` with multiple databases"
msgstr "关于多个数据库的 ``syncdb`` 的行为"

msgid ""
"``syncdb`` now queries the database routers to determine if content types "
"(when :mod:`~django.contrib.contenttypes` is enabled) and permissions (when :"
"mod:`~django.contrib.auth` is enabled) should be created in the target "
"database. Previously, it created them in the default database, even when "
"another database was specified with the ``--database`` option."
msgstr ""
"现在，``syncdb`` 会查询数据库路由器，以确定在目标数据库中是否应创建内容类型"
"（当启用 :mod:`~django.contrib.contenttypes` 时）和权限（当启用 :mod:"
"`~django.contrib.auth` 时）。以前，即使使用 ``--database`` 选项指定了另一个数"
"据库，它也会在默认数据库中创建它们。"

msgid ""
"If you use ``syncdb`` on multiple databases, you should ensure that your "
"routers allow synchronizing content types and permissions to only one of "
"them. See the docs on the :ref:`behavior of contrib apps with multiple "
"databases <contrib_app_multiple_databases>` for more information."
msgstr ""
"如果您在多个数据库上使用 ``syncdb``，应确保您的路由器只允许将内容类型和权限同"
"步到其中一个数据库。有关更多信息，请参阅 :ref:`多数据库中的 contrib 应用程序"
"行为 <contrib_app_multiple_databases>` 的文档。"

msgid "XML deserializer will not parse documents with a DTD"
msgstr "XML 反序列化器不会解析带有 DTD 的文档。"

msgid ""
"In order to prevent exposure to denial-of-service attacks related to "
"external entity references and entity expansion, the XML model deserializer "
"now refuses to parse XML documents containing a DTD (DOCTYPE definition). "
"Since the XML serializer does not output a DTD, this will not impact typical "
"usage, only cases where custom-created XML documents are passed to Django's "
"model deserializer."
msgstr ""
"为了防止与外部实体引用和实体扩展相关的拒绝服务攻击，XML 模型反序列化器现在拒"
"绝解析包含 DTD（DOCTYPE 定义）的 XML 文档。由于 XML 序列化器不输出 DTD，这只"
"会影响传递给 Django 模型反序列化器的自定义创建的 XML 文档，而不会影响典型的用"
"法。"

msgid "Formsets default ``max_num``"
msgstr "Formsets 的默认 ``max_num`` 值"

msgid ""
"A (default) value of ``None`` for the ``max_num`` argument to a formset "
"factory no longer defaults to allowing any number of forms in the formset. "
"Instead, in order to prevent memory-exhaustion attacks, it now defaults to a "
"limit of 1000 forms. This limit can be raised by explicitly setting a higher "
"value for ``max_num``."
msgstr ""
"表单集工厂的 ``max_num`` 参数的默认值为 ``None`` 不再默认允许表单集中的任意数"
"量的表单。相反，为了防止内存耗尽攻击，它现在默认为限制为 1000 个表单。可以通"
"过显式设置更高的 ``max_num`` 值来提高此限制。"

msgid ""
":class:`django.forms.ModelMultipleChoiceField` now returns an empty "
"``QuerySet`` as the empty value instead of an empty list."
msgstr ""
":class:`django.forms.ModelMultipleChoiceField` 现在将空的 ``QuerySet`` 作为空"
"值返回，而不是空列表。"

msgid ""
":func:`~django.utils.http.int_to_base36` properly raises a :exc:`TypeError` "
"instead of :exc:`ValueError` for non-integer inputs."
msgstr ""
":func:`~django.utils.http.int_to_base36` 对于非整数输入现在会正确引发 :exc:"
"`TypeError`，而不是 :exc:`ValueError`。"

msgid ""
"The ``slugify`` template filter is now available as a standard Python "
"function at :func:`django.utils.text.slugify`. Similarly, ``remove_tags`` is "
"available at ``django.utils.html.remove_tags()``."
msgstr ""
"模板过滤器中的 ``slugify`` 现在作为标准的 Python 函数在 :func:`django.utils."
"text.slugify` 中可用。同样，``remove_tags`` 在 ``django.utils.html."
"remove_tags()`` 中也可用。"

msgid ""
"Uploaded files are no longer created as executable by default. If you need "
"them to be executable change :setting:`FILE_UPLOAD_PERMISSIONS` to your "
"needs. The new default value is ``0o666`` (octal) and the current umask "
"value is first masked out."
msgstr ""
"上传的文件不再默认创建为可执行文件。如果需要它们成为可执行文件，请更改 :"
"setting:`FILE_UPLOAD_PERMISSIONS` 以满足您的需求。新的默认值是 ``0o666`` （八"
"进制），并且当前的掩码值首先被掩码掉。"

msgid ""
"The :class:`F expressions <django.db.models.F>` supported bitwise operators "
"by ``&`` and ``|``. These operators are now available using ``.bitand()`` "
"and ``.bitor()`` instead. The removal of ``&`` and ``|`` was done to be "
"consistent with :ref:`Q() expressions <complex-lookups-with-q>` and "
"``QuerySet`` combining where the operators are used as boolean AND and OR "
"operators."
msgstr ""
":class:`F 表达式 <django.db.models.F>` 支持位运算符 ``&`` 和 ``|``。现在，可"
"以使用 ``.bitand()`` 和 ``.bitor()`` 来代替这些运算符。移除 ``&`` 和 ``|`` 是"
"为了与 :ref:`Q() 表达式 <complex-lookups-with-q>` 和 ``QuerySet`` 结合使用时"
"保持一致，其中这些运算符被用作布尔 AND 和 OR 运算符。"

msgid ""
"In a ``filter()`` call, when :class:`F expressions <django.db.models.F>` "
"contained lookups spanning multi-valued relations, they didn't always reuse "
"the same relations as other lookups along the same chain. This was changed, "
"and now F() expressions will always use the same relations as other lookups "
"within the same ``filter()`` call."
msgstr ""
"在 ``filter()`` 调用中，当 :class:`F 表达式 <django.db.models.F>` 包含跨多值"
"关联的查找时，它们并不总是重用与同一链中其他查找相同的关联。这已经发生了变"
"化，现在 F() 表达式将始终与同一 ``filter()`` 调用中的其他查找使用相同的关联。"

msgid ""
"The :ttag:`csrf_token` template tag is no longer enclosed in a div. If you "
"need HTML validation against pre-HTML5 Strict DTDs, you should add a div "
"around it in your pages."
msgstr ""
":ttag:`csrf_token` 模板标签不再包含在一个 div 中。如果您需要针对 HTML5 之前"
"的 Strict DTD 进行 HTML 验证，您应该在页面中添加一个 div。"

msgid ""
"The template tags library ``adminmedia``, which only contained the "
"deprecated template tag ``{% admin_media_prefix %}``, was removed. "
"Attempting to load it with ``{% load adminmedia %}`` will fail. If your "
"templates still contain that line you must remove it."
msgstr ""
"已删除模板标签库 ``adminmedia``，它只包含了已弃用的模板标签 ``{% "
"admin_media_prefix %}``。尝试使用 ``{% load adminmedia %}`` 加载它将会失败。"
"如果您的模板仍然包含该行代码，您必须将其删除。"

msgid ""
"Because of an implementation oversight, it was possible to use :doc:`django."
"contrib.redirects </ref/contrib/redirects>` without enabling :doc:`django."
"contrib.sites </ref/contrib/sites>`. This isn't allowed any longer. If "
"you're using ``django.contrib.redirects``, make sure :setting:"
"`INSTALLED_APPS` contains ``django.contrib.sites``."
msgstr ""
"由于一个实现上的疏忽，以前可以在没有启用 :doc:`django.contrib.sites </ref/"
"contrib/sites>` 的情况下使用 :doc:`django.contrib.redirects </ref/contrib/"
"redirects>`。现在不再允许这样做了。如果您正在使用 ``django.contrib."
"redirects``，请确保 :setting:`INSTALLED_APPS` 包含 ``django.contrib.sites``。"

msgid ""
":meth:`BoundField.label_tag <django.forms.BoundField.label_tag>` now escapes "
"its ``contents`` argument. To avoid the HTML escaping, use :func:`django."
"utils.safestring.mark_safe` on the argument before passing it."
msgstr ""
":meth:`BoundField.label_tag <django.forms.BoundField.label_tag>` 现在会对其 "
"``contents`` 参数进行 HTML 转义。要避免 HTML 转义，可以在传递参数之前使用 :"
"func:`django.utils.safestring.mark_safe`。"

msgid ""
"Accessing reverse one-to-one relations fetched via :meth:`~django.db.models."
"query.QuerySet.select_related` now raises :exc:`~django.db.models.Model."
"DoesNotExist` instead of returning ``None``."
msgstr ""
"通过 :meth:`~django.db.models.query.QuerySet.select_related` 获取的反向一对一"
"关系现在会引发 :exc:`~django.db.models.Model.DoesNotExist` 异常，而不是返回 "
"``None``。"

msgid "Features deprecated in 1.5"
msgstr "在 1.5 中被废弃的功能"

msgid "``django.contrib.localflavor``"
msgstr "``django.contrib.localflavor``"

msgid ""
"The localflavor contrib app has been split into separate packages. ``django."
"contrib.localflavor`` itself will be removed in Django 1.6, after an "
"accelerated deprecation."
msgstr ""
"localflavor 贡献应用程序已分成单独的包。``django.contrib.localflavor`` 本身将"
"在 Django 1.6 中移除，经过加速的弃用期。"

msgid ""
"The new packages are available on GitHub. The core team cannot efficiently "
"maintain these packages in the long term — it spans just a dozen countries "
"at this time; similar to translations, maintenance will be handed over to "
"interested members of the community."
msgstr ""
"新的软件包已在 GitHub 上提供。核心团队无法长期高效地维护这些软件包 - 目前仅覆"
"盖了几个国家；与翻译类似，维护工作将移交给感兴趣的社区成员。"

msgid "``django.contrib.markup``"
msgstr "``django.contrib.markup``"

msgid ""
"The markup contrib module has been deprecated and will follow an accelerated "
"deprecation schedule. Direct use of Python markup libraries or 3rd party tag "
"libraries is preferred to Django maintaining this functionality in the "
"framework."
msgstr ""
"markup contrib 模块已被弃用，并将按照加速弃用计划进行处理。直接使用 Python 标"
"记库或第三方标签库比 Django 在框架中维护此功能更受推荐。"

msgid "``AUTH_PROFILE_MODULE``"
msgstr "``AUTH_PROFILE_MODULE``"

msgid ""
"With the introduction of :ref:`custom user models <auth-custom-user>`, there "
"is no longer any need for a built-in mechanism to store user profile data."
msgstr ""
"引入 :ref:`自定义用户模型 <auth-custom-user>` 后，不再需要内置机制来存储用户"
"配置文件数据。"

msgid ""
"You can still define user profiles models that have a one-to-one relation "
"with the User model - in fact, for many applications needing to associate "
"data with a User account, this will be an appropriate design pattern to "
"follow. However, the ``AUTH_PROFILE_MODULE`` setting, and the ``django."
"contrib.auth.models.User.get_profile()`` method for accessing the user "
"profile model, should not be used any longer."
msgstr ""
"您仍然可以定义与用户模型具有一对一关系的用户配置文件模型 - 实际上，对于许多需"
"要将数据与用户帐户关联的应用程序，这将是一个适当的设计模式。然而，不再应使用 "
"``AUTH_PROFILE_MODULE`` 设置以及用于访问用户配置文件模型的 ``django.contrib."
"auth.models.User.get_profile()`` 方法。"

msgid "Streaming behavior of :class:`~django.http.HttpResponse`"
msgstr ":class:`~django.http.HttpResponse` 的流式传输行为"

msgid ""
"Django 1.5 deprecates the ability to stream a response by passing an "
"iterator to :class:`~django.http.HttpResponse`. If you rely on this "
"behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref:"
"`explicit-streaming-responses` above."
msgstr ""
"Django 1.5 不再支持通过将迭代器传递给 :class:`~django.http.HttpResponse` 来流"
"式传输响应的能力。如果您依赖此行为，请切换到 :class:`~django.http."
"StreamingHttpResponse`。请参阅 :ref:`explicit-streaming-responses`。"

msgid ""
"In Django 1.7 and above, the iterator will be consumed immediately by :class:"
"`~django.http.HttpResponse`."
msgstr ""
"在 Django 1.7 及以上版本中，迭代器将立即被 :class:`~django.http."
"HttpResponse` 消耗。"

msgid "``django.utils.simplejson``"
msgstr "``django.utils.simplejson``"

msgid ""
"Since Django 1.5 drops support for Python 2.5, we can now rely on the :mod:"
"`json` module being available in Python's standard library, so we've removed "
"our own copy of ``simplejson``. You should now import :mod:`json` instead of "
"``django.utils.simplejson``."
msgstr ""
"由于 Django 1.5 不再支持 Python 2.5，我们现在可以依赖于 Python 标准库中的 :"
"mod:`json` 模块，因此我们已经移除了我们自己的 ``simplejson`` 副本。您现在应该"
"导入 :mod:`json`，而不是 ``django.utils.simplejson``。"

msgid ""
"Unfortunately, this change might have unwanted side-effects, because of "
"incompatibilities between versions of ``simplejson`` -- see the :ref:"
"`backwards-incompatible changes <simplejson-incompatibilities>` section. If "
"you rely on features added to ``simplejson`` after it became Python's :mod:"
"`json`, you should import ``simplejson`` explicitly."
msgstr ""
"不幸的是，这个改变可能会产生意想不到的副作用，因为不同版本的 ``simplejson`` "
"之间存在不兼容性，详见 :ref:`不兼容变更 <simplejson-incompatibilities>` 部"
"分。如果您依赖于在它成为 Python 的 :mod:`json` 之后添加到 ``simplejson`` 的功"
"能，您应该显式导入 ``simplejson``。"

msgid "``django.utils.encoding.StrAndUnicode``"
msgstr "``django.utils.encoding.StrAndUnicode``"

msgid ""
"The ``django.utils.encoding.StrAndUnicode`` mix-in has been deprecated. "
"Define a ``__str__`` method and apply the ``django.utils.encoding."
"python_2_unicode_compatible`` decorator instead."
msgstr ""
"``django.utils.encoding.StrAndUnicode`` 混合类已被弃用。应该定义一个 "
"``__str__`` 方法，并应用 ``django.utils.encoding."
"python_2_unicode_compatible`` 装饰器。"

msgid "``django.utils.itercompat.product``"
msgstr "``django.utils.itercompat.product``"

msgid ""
"The ``django.utils.itercompat.product`` function has been deprecated. Use "
"the built-in :func:`itertools.product` instead."
msgstr ""
"``django.utils.itercompat.product`` 函数已被弃用。应该使用内置的 :func:"
"`itertools.product`。"

msgid "``cleanup`` management command"
msgstr "``cleanup`` 管理命令"

msgid ""
"The ``cleanup`` management command has been deprecated and replaced by :"
"djadmin:`clearsessions`."
msgstr "``cleanup`` 管理命令已被弃用，并被 :djadmin:`clearsessions` 取代。"

msgid "``daily_cleanup.py`` script"
msgstr "``daily_cleanup.py`` 脚本"

msgid ""
"The undocumented ``daily_cleanup.py`` script has been deprecated. Use the :"
"djadmin:`clearsessions` management command instead."
msgstr ""
"未记录的 ``daily_cleanup.py`` 脚本已被弃用。请使用 :djadmin:`clearsessions` "
"管理命令。"

msgid "``depth`` keyword argument in ``select_related``"
msgstr "``select_related`` 中的 ``depth`` 关键字参数"

msgid ""
"The ``depth`` keyword argument in :meth:`~django.db.models.query.QuerySet."
"select_related` has been deprecated. You should use field names instead."
msgstr ""
"在 :meth:`~django.db.models.query.QuerySet.select_related` 中的 ``depth`` 关"
"键字参数已被弃用。您应该使用字段名称代替。"

msgid "Django 1.5.1 release notes"
msgstr "Django 1.5.1 版本发行说明"

msgid "*March 28, 2013*"
msgstr "*2013 年 3 月 28 日*"

msgid ""
"This is Django 1.5.1, a bugfix release for Django 1.5. It's completely "
"backwards compatible with Django 1.5, but includes a handful of fixes."
msgstr ""
"这是 Django 1.5.1，是 Django 1.5 的修复错误版本。它与 Django 1.5 完全向后兼"
"容，但包含了一些修复。"

msgid ""
"The biggest fix is for a memory leak introduced in Django 1.5. Under certain "
"circumstances, repeated iteration over querysets could leak memory - "
"sometimes quite a bit of it. If you'd like more information, the details are "
"in :ticket:`our ticket tracker <19895>` (and in :bpo:`a related issue "
"<17468>` in Python itself)."
msgstr ""
"最重要的修复是针对 Django 1.5 引入的内存泄漏。在某些情况下，反复迭代查询集可"
"能会导致内存泄漏 - 有时会泄漏相当多的内存。如果您想了解更多信息，详细信息可以"
"在我们的 :ticket:`问题跟踪器 <19895>`（以及 Python 自身的 :bpo:`相关问题 "
"<17468>`）中找到。"

msgid ""
"If you've noticed memory problems under Django 1.5, upgrading to 1.5.1 "
"should fix those issues."
msgstr ""
"如果您在 Django 1.5 下遇到了内存问题，升级到 1.5.1 版本应该可以解决这些问题。"

msgid "Django 1.5.1 also includes a couple smaller fixes:"
msgstr "Django 1.5.1 还包含了一些较小的修复："

msgid ""
"Module-level warnings emitted during tests are no longer silently hidden (:"
"ticket:`18985`)."
msgstr "在测试期间发出的模块级警告不再被默默隐藏 (:ticket:`18985`)。"

msgid ""
"Prevented filtering on password hashes in the user admin (:ticket:`20078`)."
msgstr "防止在用户管理界面中对密码哈希进行过滤 (:ticket:`20078`)。"

msgid "Django 1.5.10 release notes"
msgstr "Django 1.5.10 版本发行说明"

msgid "Django 1.5.10 fixes a regression in the 1.5.9 security release."
msgstr "Django 1.5.10 修复了 1.5.9 安全发布中的回归错误。"

msgid "Django 1.5.11 release notes"
msgstr "Django 1.5.11 版本发行说明"

msgid "Django 1.5.11 fixes a couple regressions in the 1.5.9 security release."
msgstr "Django 1.5.11 修复了 1.5.9 安全发布中的一些回归错误。"

msgid "Django 1.5.12 release notes"
msgstr "Django 1.5.12 版本发行说明"

msgid "Django 1.5.12 fixes a regression in the 1.5.9 security release."
msgstr "Django 1.5.12 修复了 1.5.9 安全发布中的一个回归错误。"

msgid "Django 1.5.2 release notes"
msgstr "Django 1.5.2 版本发行说明"

msgid "This is Django 1.5.2, a bugfix and security release for Django 1.5."
msgstr "这是 Django 1.5.2，是 Django 1.5 的修复错误和安全发布版本。"

msgid "XSS vulnerability in :mod:`django.contrib.admin`"
msgstr ":mod:`django.contrib.admin` 中的 XSS 漏洞"

msgid ""
"If a :class:`~django.db.models.URLField` is used in Django 1.5, it displays "
"the current value of the field and a link to the target on the admin change "
"page. The display routine of this widget was flawed and allowed for XSS."
msgstr ""
"如果在 Django 1.5 中使用了 :class:`~django.db.models.URLField`，它会在管理页"
"面的更改页面上显示字段的当前值和到目标的链接。这个小部件的显示程序存在缺陷，"
"允许进行 XSS 攻击。"

msgid ""
"Fixed a crash with :meth:`~django.db.models.query.QuerySet.prefetch_related` "
"(#19607) as well as some ``pickle`` regressions with ``prefetch_related`` "
"(#20157 and #20257)."
msgstr ""
"修复了与 :meth:`~django.db.models.query.QuerySet.prefetch_related` 有关的崩溃"
"问题 (#19607)，以及一些与 ``prefetch_related`` 有关的 ``pickle`` 回归问题 "
"(#20157 和 #20257)。"

msgid ""
"Fixed a regression in :mod:`django.contrib.gis` in the Google Map output on "
"Python 3 (#20773)."
msgstr ""
"在 Python 3 上修复了 :mod:`django.contrib.gis` 中 Google 地图输出的回归问题 "
"(#20773)。"

msgid ""
"Made ``DjangoTestSuiteRunner.setup_databases`` properly handle aliases for "
"the default database (#19940) and prevented ``teardown_databases`` from "
"attempting to tear down aliases (#20681)."
msgstr ""
"使 ``DjangoTestSuiteRunner.setup_databases`` 正确处理默认数据库的别名 "
"(#19940)，并防止 ``teardown_databases`` 尝试拆除别名 (#20681)。"

msgid ""
"Fixed the ``django.core.cache.backends.memcached.MemcachedCache`` backend's "
"``get_many()`` method on Python 3 (#20722)."
msgstr ""
"修复了 Python 3 上的 ``django.core.cache.backends.memcached.MemcachedCache`` "
"后端的 ``get_many()`` 方法 (#20722)。"

msgid ""
"Fixed :mod:`django.contrib.humanize` translation syntax errors. Affected "
"languages: Mexican Spanish, Mongolian, Romanian, Turkish (#20695)."
msgstr ""
"修复了 :mod:`django.contrib.humanize` 中的翻译语法错误。受影响的语言包括墨西"
"哥西班牙语、蒙古语、罗马尼亚语和土耳其语 (#20695)。"

msgid "Added support for wheel packages (#19252)."
msgstr "新增对 wheel 软件包的支持（ #19252 ）。"

msgid "The CSRF token now rotates when a user logs in."
msgstr "用户登录时，CSRF 令牌现在会轮换。"

msgid "Some Python 3 compatibility fixes including #20212 and #20025."
msgstr "包括 #20212 和 #20025 在内的一些 Python 3 兼容性修复。"

msgid ""
"Fixed some rare cases where :meth:`~django.db.models.query.QuerySet.get` "
"exceptions recursed infinitely (#20278)."
msgstr ""
"修复了一些罕见情况下 :meth:`~django.db.models.query.QuerySet.get` 引发无限递"
"归异常的问题 (#20278)。"

msgid ""
":djadmin:`makemessages` no longer crashes with ``UnicodeDecodeError`` "
"(#20354)."
msgstr ""
":djadmin:`makemessages` 不再因为 ``UnicodeDecodeError`` 而崩溃 (#20354)。"

msgid "Fixed ``geojson`` detection with SpatiaLite."
msgstr "修复了与 SpatiaLite 的 ``geojson`` 检测问题。"

msgid ""
":meth:`~django.test.SimpleTestCase.assertContains` once again works with "
"binary content (#20237)."
msgstr ""
":meth:`~django.test.SimpleTestCase.assertContains` 再次能够处理二进制内容 "
"(#20237)。"

msgid ""
"Fixed :class:`~django.db.models.ManyToManyField` if it has a Unicode "
"``name`` parameter (#20207)."
msgstr ""
"修复了如果 :class:`~django.db.models.ManyToManyField` 具有 Unicode ``name`` "
"参数时的问题 (#20207)。"

msgid ""
"Ensured that the WSGI request's path is correctly based on the "
"``SCRIPT_NAME`` environment variable or the :setting:`FORCE_SCRIPT_NAME` "
"setting, regardless of whether or not either has a trailing slash (#20169)."
msgstr ""
"确保 WSGI 请求的路径根据 ``SCRIPT_NAME`` 环境变量或 :setting:"
"`FORCE_SCRIPT_NAME` 设置正确设置，无论它们是否以斜杠结尾 (#20169)。"

msgid "Django 1.5.3 release notes"
msgstr "Django 1.5.3 版本发行说明"

msgid ""
"This is Django 1.5.3, the third release in the Django 1.5 series. It "
"addresses one security issue and also contains an opt-in feature to enhance "
"the security of :mod:`django.contrib.sessions`."
msgstr ""
"这是 Django 1.5.3，是 Django 1.5 系列的第三个发布版本。它解决了一个安全问题，"
"并包含一个可选择的功能，以增强 :mod:`django.contrib.sessions` 的安全性。"

msgid ""
"Mitigating a remote-code execution vulnerability in :mod:`django.contrib."
"sessions`"
msgstr "应对 :mod:`django.contrib.sessions` 中的远程代码执行漏洞。"

msgid ""
":mod:`django.contrib.sessions` currently uses :mod:`pickle` to serialize "
"session data before storing it in the backend. If you're using the :ref:"
"`signed cookie session backend<cookie-session-backend>` and :setting:"
"`SECRET_KEY` is known by an attacker (there isn't an inherent vulnerability "
"in Django that would cause it to leak), the attacker could insert a string "
"into their session which, when unpickled, executes arbitrary code on the "
"server. The technique for doing so is simple and easily available on the "
"internet. Although the cookie session storage signs the cookie-stored data "
"to prevent tampering, a :setting:`SECRET_KEY` leak immediately escalates to "
"a remote code execution vulnerability."
msgstr ""
":mod:`django.contrib.sessions` 目前在将会话数据存储到后端之前使用 :mod:"
"`pickle` 进行序列化。如果您使用的是 :ref:`签名的 Cookie 会话后端 <cookie-"
"session-backend>` 并且 :setting:`SECRET_KEY` 被攻击者知晓（Django 本身没有固"
"有的漏洞导致泄漏），攻击者可以在他们的会话中插入一个字符串，当反序列化时，在"
"服务器上执行任意代码。执行此操作的技术简单且易于在互联网上找到。虽然 Cookie "
"会话存储会对存储在 Cookie 中的数据进行签名以防止篡改，但一旦 :setting:"
"`SECRET_KEY` 泄漏，立即升级为远程代码执行漏洞。"

msgid ""
"This attack can be mitigated by serializing session data using JSON rather "
"than :mod:`pickle`. To facilitate this, Django 1.5.3 introduces a new "
"setting, :setting:`SESSION_SERIALIZER`, to customize the session "
"serialization format. For backwards compatibility, this setting defaults to "
"using :mod:`pickle`. While JSON serialization does not support all Python "
"objects like :mod:`pickle` does, we highly recommend switching to JSON-"
"serialized values. Also, as JSON requires string keys, you will likely run "
"into problems if you are using non-string keys in ``request.session``. See "
"the :ref:`session_serialization` documentation for more details."
msgstr ""
"可以通过使用 JSON 而不是 :mod:`pickle` 对会话数据进行序列化来缓解此攻击。为了"
"方便这一点，Django 1.5.3 引入了一个新的设置 :setting:`SESSION_SERIALIZER`，用"
"于自定义会话序列化格式。为了向后兼容，默认情况下这个设置使用 :mod:`pickle`。"
"虽然 JSON 序列化不像 :mod:`pickle` 那样支持所有的 Python 对象，但我们强烈建议"
"切换到 JSON 序列化的值。此外，由于 JSON 要求使用字符串键，如果在 ``request."
"session`` 中使用非字符串键，可能会遇到问题。有关更多详细信息，请参阅 :ref:"
"`session_serialization` 文档。"

msgid "Django 1.5.4 release notes"
msgstr "Django 1.5.4 版本发行说明"

msgid ""
"This is Django 1.5.4, the fourth release in the Django 1.5 series. It "
"addresses two security issues and one bug."
msgstr ""
"这是 Django 1.5.4，是 Django 1.5 系列的第四个版本。它解决了两个安全问题和一"
"个 bug 。"

msgid ""
"As of 1.5.4, Django's authentication framework imposes a 4096-byte limit on "
"passwords, and will fail authentication with any submitted password of "
"greater length."
msgstr ""
"从 1.5.4 版本开始，Django 的身份验证框架对密码设置了 4096 字节的限制，如果提"
"交的密码长度超过限制，身份验证将失败。"

msgid ""
"Fixed a bug that prevented a ``QuerySet`` that uses :meth:`~django.db.models."
"query.QuerySet.prefetch_related` from being pickled and unpickled more than "
"once (the second pickling attempt raised an exception) (#21102)."
msgstr ""
"修复了一个 bug，该 bug 阻止了使用 :meth:`~django.db.models.query.QuerySet."
"prefetch_related` 的查询集被多次 pickled 和 unpickled（第二次 pickling 尝试会"
"引发异常）(#21102)。"

msgid "Django 1.5.5 release notes"
msgstr "Django 1.5.5 版本发行说明"

msgid ""
"Django 1.5.5 fixes a couple security-related bugs and several other bugs in "
"the 1.5 series."
msgstr "Django 1.5.5 修复了一些与安全相关的错误以及 1.5 系列中的其他几个错误。"

msgid ""
"Django 1.5.4 imposes a 4096-byte limit on passwords in order to mitigate a "
"denial-of-service attack through submission of bogus but extremely large "
"passwords. In Django 1.5.5, we've reverted this change and instead improved "
"the speed of our PBKDF2 algorithm by not rehashing the key on every "
"iteration."
msgstr ""
"Django 1.5.4 为了减轻通过提交虚假但极其大的密码进行的拒绝服务攻击，对密码设置"
"了 4096 字节的限制。在 Django 1.5.5 中，我们撤销了这一更改，改为通过不在每次"
"迭代中重新计算哈希密钥来提高 PBKDF2 算法的速度。"

msgid "Properly rotate CSRF token on login"
msgstr "登录时正确地轮换 CSRF 令牌"

msgid ""
"This behavior introduced as a security hardening measure in Django 1.5.2 did "
"not work properly and is now fixed."
msgstr ""
"这个在 Django 1.5.2 中作为安全加固措施引入的行为没有正常工作，现已修复。"

msgid ""
"Fixed a Python 3 incompatibility in ``django.utils.text."
"unescape_entities()`` (#21185)."
msgstr ""
"修复了 ``django.utils.text.unescape_entities()`` 中的 Python 3 不兼容问题 "
"(#21185)。"

msgid ""
"Fixed a couple data corruption issues with ``QuerySet`` edge cases under "
"Oracle and MySQL (#21203, #21126)."
msgstr ""
"修复了在 Oracle 和 MySQL 下的一些 ``QuerySet`` 边缘情况下的数据损坏问题 "
"(#21203, #21126)。"

msgid ""
"Fixed crashes when using combinations of ``annotate()``, "
"``select_related()``, and ``only()`` (#16436)."
msgstr ""
"修复了在使用 ``annotate()``, ``select_related()`` 和 ``only()`` 的组合时引发"
"崩溃的问题 (#16436)。"

msgid ""
"The undocumented ``django.core.servers.basehttp.WSGIServerException`` has "
"been removed. Use ``socket.error`` provided by the standard library instead."
msgstr ""
"已删除未记录的 ``django.core.servers.basehttp.WSGIServerException``。请改用标"
"准库提供的 ``socket.error``。"

msgid "Django 1.5.6 release notes"
msgstr "Django 1.5.6 版本发行说明"

msgid ""
"Django 1.5.6 fixes several bugs in 1.5.5, including three security issues."
msgstr "Django 1.5.6 修复了 1.5.5 中的多个错误，包括三个安全问题。"

msgid ""
"Fixed :class:`~django.contrib.auth.backends.ModelBackend` raising "
"``UnboundLocalError`` if :func:`~django.contrib.auth.get_user_model` raised "
"an error (#21439)."
msgstr ""
"修复了如果 :func:`~django.contrib.auth.get_user_model` 引发错误时， :class:"
"`~django.contrib.auth.backends.ModelBackend` 引发 ``UnboundLocalError`` 的问"
"题 (#21439)。"

msgid ""
"Additionally, Django's vendored version of six, ``django.utils.six``, has "
"been upgraded to the latest release (1.6.1)."
msgstr ""
"此外，Django 内置的 six 版本 ``django.utils.six`` 已升级到最新版本 (1.6.1)。"

msgid "Django 1.5.7 release notes"
msgstr "Django 1.5.7 版本发行说明"

msgid "Django 1.5.7 fixes a regression in the 1.5.6 security release."
msgstr "Django 1.5.7 修复了 1.5.6 安全发布中的一个退化问题。"

msgid "Django 1.5.8 release notes"
msgstr "Django 1.5.8 版本发行说明"

msgid "Django 1.5.8 fixes two security issues in 1.5.8."
msgstr "Django 1.5.8 修复了 1.5.8 中的两个安全问题。"

msgid "Django 1.5.9 release notes"
msgstr "Django 1.5.9 版本发行说明"

msgid "Django 1.5.9 fixes several security issues in 1.5.8."
msgstr "Django 1.5.9 修复了 1.5.8 中的多个安全问题。"

msgid "Django 1.6 release notes"
msgstr "Django 1.6 版本发行说明"

msgid "Dedicated to Malcolm Tredinnick"
msgstr "献给 Malcolm Tredinnick"

msgid ""
"On March 17, 2013, the Django project and the free software community lost a "
"very dear friend and developer."
msgstr ""
"在 2013 年 3 月 17 日，Django 项目和自由软件社区失去了一位非常亲爱的朋友和开"
"发者。"

msgid ""
"Malcolm was a long-time contributor to Django, a model community member, a "
"brilliant mind, and a friend. His contributions to Django — and to many "
"other open source projects — are nearly impossible to enumerate. Many on the "
"core Django team had their first patches reviewed by him; his mentorship "
"enriched us. His consideration, patience, and dedication will always be an "
"inspiration to us."
msgstr ""
"Malcolm 是 Django 的长期贡献者，模范社区成员，一位聪明的人，也是我们的朋友。"
"他对 Django 和其他许多开源项目的贡献几乎无法计数。 Django 核心团队中的许多人"
"都是通过他审查第一批补丁，他的指导使我们受益匪浅。他的关心、耐心和奉献精神将"
"永远激励着我们。"

msgid "This release of Django is for Malcolm."
msgstr "这个 Django 版本是为了纪念 Malcolm 而发布的。"

msgid "-- The Django Developers"
msgstr "-- Django 开发者们"

msgid "Welcome to Django 1.6!"
msgstr "欢迎使用 Django 1.6 ！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-1.6>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.6>` "
"you'll want to be aware of when upgrading from Django 1.5 or older versions. "
"We've also dropped some features, which are detailed in :ref:`our "
"deprecation plan <deprecation-removed-in-1.6>`, and we've :ref:`begun the "
"deprecation process for some features <deprecated-features-1.6>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-1.6>`，以及从 Django 1.5 或更早版"
"本升级时需要注意的一些 :ref:`向后不兼容的更改 <backwards-incompatible-1.6>`。"
"我们还删除了一些功能，详细信息在 :ref:`我们的弃用计划 <deprecation-removed-"
"in-1.6>` 中说明，同时我们已经 :ref:`开始了一些功能的弃用过程 <deprecated-"
"features-1.6>`。"

msgid ""
"Django 1.6, like Django 1.5, requires Python 2.6.5 or above. Python 3 is "
"also officially supported. We **highly recommend** the latest minor release "
"for each supported Python series (2.6.X, 2.7.X, 3.2.X, and 3.3.X)."
msgstr ""
"与 Django 1.5 一样，Django 1.6 需要 Python 2.6.5 或更高版本。Python 3 也得到"
"官方支持。我们 **强烈推荐** 使用每个支持的 Python 系列的最新次要版本（2.6.X、"
"2.7.X、3.2.X 和 3.3.X）。"

msgid ""
"Django 1.6 will be the final release series to support Python 2.6; beginning "
"with Django 1.7, the minimum supported Python version will be 2.7."
msgstr ""
"Django 1.6 将是最后一个支持 Python 2.6 的发布系列；从 Django 1.7 开始，最低支"
"持的 Python 版本将是 2.7 。"

msgid "Python 3.4 is not supported, but support will be added in Django 1.7."
msgstr "Python 3.4 目前不被支持，但将在 Django 1.7 中添加支持。"

msgid "What's new in Django 1.6"
msgstr "Django 1.6 的新功能有哪些？"

msgid "Simplified default project and app templates"
msgstr "简化了默认的项目和应用模板"

msgid ""
"The default templates used by :djadmin:`startproject` and :djadmin:"
"`startapp` have been simplified and modernized. The :doc:`admin </ref/"
"contrib/admin/index>` is now enabled by default in new projects; the :doc:"
"`sites </ref/contrib/sites>` framework no longer is. :ref:`clickjacking "
"prevention <clickjacking-prevention>` is now on and the database defaults to "
"SQLite."
msgstr ""
":djadmin:`startproject` 和 :djadmin:`startapp` 使用的默认模板已经简化和现代"
"化。新项目默认启用 :doc:`admin </ref/contrib/admin/index>`，不再使用 :doc:"
"`sites </ref/contrib/sites>` 框架。:ref:`防止点击劫持 <clickjacking-"
"prevention>` 现在默认开启，数据库默认为 SQLite。"

msgid ""
"If the default templates don't suit your tastes, you can use :ref:`custom "
"project and app templates <custom-app-and-project-templates>`."
msgstr ""
"如果默认模板不符合您的喜好，您可以使用 :ref:`自定义项目和应用程序模板 "
"<custom-app-and-project-templates>`。"

msgid "Improved transaction management"
msgstr "改进了事务管理"

msgid ""
"Django's transaction management was overhauled. Database-level autocommit is "
"now turned on by default. This makes transaction handling more explicit and "
"should improve performance. The existing APIs were deprecated, and new APIs "
"were introduced, as described in the :doc:`transaction management docs </"
"topics/db/transactions>`."
msgstr ""
"Django 的事务管理经过了彻底改进。现在默认情况下已经打开了数据库级别的自动提"
"交。这使得事务处理更加明确，并应该提高性能。现有的 API 已被弃用，并引入了新"
"的 API，详情请参阅 :doc:`事务管理文档 </topics/db/transactions>`。"

msgid "Persistent database connections"
msgstr "引入了持久性数据库连接"

msgid ""
"Django now supports reusing the same database connection for several "
"requests. This avoids the overhead of reestablishing a connection at the "
"beginning of each request. For backwards compatibility, this feature is "
"disabled by default. See :ref:`persistent-database-connections` for details."
msgstr ""
"Django 现在支持在多个请求中重复使用同一个数据库连接。这可以避免在每个请求开始"
"时重新建立连接的开销。出于向后兼容性考虑，此功能默认是禁用的。请查看 :ref:"
"`persistent-database-connections` 以获取详细信息。"

msgid "Discovery of tests in any test module"
msgstr "能够发现任何测试模块中的测试"

msgid ""
"Django 1.6 ships with a new test runner that allows more flexibility in the "
"location of tests. The previous runner (``django.test.simple."
"DjangoTestSuiteRunner``) found tests only in the ``models.py`` and ``tests."
"py`` modules of a Python package in :setting:`INSTALLED_APPS`."
msgstr ""
"Django 1.6 提供了一个新的测试运行器，允许更灵活地定位测试。之前的运行器"
"（``django.test.simple.DjangoTestSuiteRunner``）只在 :setting:"
"`INSTALLED_APPS` 中的 Python 包的 ``models.py`` 和 ``tests.py`` 模块中找到测"
"试。"

msgid ""
"The new runner (``django.test.runner.DiscoverRunner``) uses the test "
"discovery features built into ``unittest2`` (the version of ``unittest`` in "
"the Python 2.7+ standard library, and bundled with Django). With test "
"discovery, tests can be located in any module whose name matches the pattern "
"``test*.py``."
msgstr ""
"新的运行器（``django.test.runner.DiscoverRunner``）使用了内置于 "
"``unittest2`` 中的测试发现功能（Python 2.7+ 标准库中的 ``unittest`` 版本，与 "
"Django 捆绑在一起）。使用测试发现，测试可以位于任何模块中，其名称匹配模式 "
"``test*.py``。"

msgid ""
"In addition, the test labels provided to ``./manage.py test`` to nominate "
"specific tests to run must now be full Python dotted paths (or directory "
"paths), rather than ``applabel.TestCase.test_method_name`` pseudo-paths. "
"This allows running tests located anywhere in your codebase, rather than "
"only in :setting:`INSTALLED_APPS`. For more details, see :doc:`/topics/"
"testing/index`."
msgstr ""
"此外，提供给 ``./manage.py test`` 的测试标签，用于指定要运行的特定测试，现在"
"必须是完整的 Python 点路径（或目录路径），而不是伪路径 ``applabel.TestCase."
"test_method_name``。这允许运行位于代码库中任何位置的测试，而不仅仅是 :"
"setting:`INSTALLED_APPS` 中的测试。有关更多详细信息，请参阅 :doc:`/topics/"
"testing/index`。"

msgid ""
"This change is backwards-incompatible; see the :ref:`backwards-"
"incompatibility notes<new-test-runner>`."
msgstr ""
"这个改变是向后不兼容的，请参阅 :ref:`向后不兼容的说明<new-test-runner>`。"

msgid "Time zone aware aggregation"
msgstr "时区感知的聚合"

msgid ""
"The support for :doc:`time zones </topics/i18n/timezones>` introduced in "
"Django 1.4 didn't work well with :meth:`QuerySet.dates() <django.db.models."
"query.QuerySet.dates>`: aggregation was always performed in UTC. This "
"limitation was lifted in Django 1.6. Use :meth:`QuerySet.datetimes() <django."
"db.models.query.QuerySet.datetimes>` to perform time zone aware aggregation "
"on a :class:`~django.db.models.DateTimeField`."
msgstr ""
"Django 1.4 中引入的对 :doc:`时区 </topics/i18n/timezones>` 的支持在 :meth:"
"`QuerySet.dates() <django.db.models.query.QuerySet.dates>` 上并不完善：聚合总"
"是在 UTC 中执行。在 Django 1.6 中解除了这个限制。使用 :meth:`QuerySet."
"datetimes() <django.db.models.query.QuerySet.datetimes>` 来对 :class:"
"`~django.db.models.DateTimeField` 进行时区感知的聚合。"

msgid "Support for savepoints in SQLite"
msgstr "在 SQLite 中支持保存点（savepoints）"

msgid ""
"Django 1.6 adds support for savepoints in SQLite, with some :ref:"
"`limitations <savepoints-in-sqlite>`."
msgstr ""
"Django 1.6 在 SQLite 中添加了对保存点的支持，但存在一些 :ref:`限制 "
"<savepoints-in-sqlite>`。"

msgid "``BinaryField`` model field"
msgstr "``BinaryField`` 模型字段"

msgid ""
"A new :class:`django.db.models.BinaryField` model field allows storage of "
"raw binary data in the database."
msgstr ""
"新的 :class:`django.db.models.BinaryField` 模型字段允许在数据库中存储原始二进"
"制数据。"

msgid "GeoDjango form widgets"
msgstr "GeoDjango 表单小部件"

msgid ""
"GeoDjango now provides :doc:`form fields and widgets </ref/contrib/gis/forms-"
"api>` for its geo-specialized fields. They are OpenLayers-based by default, "
"but they can be customized to use any other JS framework."
msgstr ""
"GeoDjango 现在为其地理专用字段提供了 :doc:`表单字段和小部件 </ref/contrib/"
"gis/forms-api>`。它们默认使用 OpenLayers，但可以自定义为使用任何其他 "
"JavaScript 框架。"

msgid "``check`` management command added for verifying compatibility"
msgstr "新增了 ``check`` 管理命令，用于验证兼容性。"

msgid ""
"A :djadmin:`check` management command was added, enabling you to verify if "
"your current configuration (currently oriented at settings) is compatible "
"with the current version of Django."
msgstr ""
"新增了 :djadmin:`check` 管理命令，可以用来验证您当前的配置（目前是基于设置）"
"是否与当前版本的 Django 兼容。"

msgid ":meth:`Model.save() <django.db.models.Model.save()>` algorithm changed"
msgstr ":meth:`Model.save() <django.db.models.Model.save()>` 算法已更改"

msgid ""
"The :meth:`Model.save() <django.db.models.Model.save()>` method now tries to "
"directly ``UPDATE`` the database if the instance has a primary key value. "
"Previously ``SELECT`` was performed to determine if ``UPDATE`` or ``INSERT`` "
"were needed. The new algorithm needs only one query for updating an existing "
"row while the old algorithm needed two. See :meth:`Model.save() <django.db."
"models.Model.save()>` for more details."
msgstr ""
":meth:`Model.save() <django.db.models.Model.save()>` 方法现在会尝试直接执行数"
"据库 ``UPDATE`` 操作，如果实例具有主键值。以前会执行 ``SELECT`` 来确定是否需"
"要执行 ``UPDATE`` 或 ``INSERT``。新算法只需要一次查询来更新现有行，而旧算法需"
"要两次。有关更多详细信息，请参阅 :meth:`Model.save() <django.db.models.Model."
"save()>`。"

msgid ""
"In some rare cases the database doesn't report that a matching row was found "
"when doing an ``UPDATE``. An example is the PostgreSQL ``ON UPDATE`` trigger "
"which returns ``NULL``. In such cases it is possible to set :attr:`django.db."
"models.Options.select_on_save` flag to force saving to use the old algorithm."
msgstr ""
"在一些罕见的情况下，数据库在执行 ``UPDATE`` 时可能不会报告找到匹配的行。一个"
"例子是 PostgreSQL 中的 ``ON UPDATE`` 触发器，它返回 ``NULL``。在这种情况下，"
"可以设置 :attr:`django.db.models.Options.select_on_save` 标志来强制使用旧算法"
"进行保存。"

msgid ""
"Authentication backends can raise ``PermissionDenied`` to immediately fail "
"the authentication chain."
msgstr "身份验证后端可以引发 ``PermissionDenied`` 来立即终止身份验证链。"

msgid ""
"The ``HttpOnly`` flag can be set on the CSRF cookie with :setting:"
"`CSRF_COOKIE_HTTPONLY`."
msgstr ""
"可以使用 :setting:`CSRF_COOKIE_HTTPONLY` 来在 CSRF Cookie 上设置 "
"``HttpOnly`` 标志。"

msgid ""
"The ``assertQuerysetEqual()`` now checks for undefined order and raises :exc:"
"`ValueError` if undefined order is spotted. The order is seen as undefined "
"if the given ``QuerySet`` isn't ordered and there is more than one ordered "
"value to compare against."
msgstr ""
"``assertQuerysetEqual()`` 现在检查未定义的排序，并在发现未定义的排序时引发 :"
"exc:`ValueError`。如果给定的 ``QuerySet`` 没有排序，并且有多个排序值要进行比"
"较，那么排序被视为未定义。"

msgid ""
"Added :meth:`~django.db.models.query.QuerySet.earliest` for symmetry with :"
"meth:`~django.db.models.query.QuerySet.latest`."
msgstr ""
"新增了 :meth:`~django.db.models.query.QuerySet.earliest`，以与 :meth:"
"`~django.db.models.query.QuerySet.latest` 对称。"

msgid ""
"In addition to :lookup:`year`, :lookup:`month` and :lookup:`day`, the ORM "
"now supports :lookup:`hour`, :lookup:`minute` and :lookup:`second` lookups."
msgstr ""
"除了 :lookup:`year`、:lookup:`month` 和 :lookup:`day`，ORM 现在还支持 :"
"lookup:`hour`、:lookup:`minute` 和 :lookup:`second` 查找。"

msgid "Django now wraps all :pep:`249` exceptions."
msgstr "Django 现在包装了所有 :pep:`249` 异常。"

msgid ""
"The default widgets for :class:`~django.forms.EmailField`, :class:`~django."
"forms.URLField`, :class:`~django.forms.IntegerField`, :class:`~django.forms."
"FloatField` and :class:`~django.forms.DecimalField` use the new type "
"attributes available in HTML5 (``type='email'``, ``type='url'``, "
"``type='number'``). Note that due to erratic support of the ``number`` input "
"type with localized numbers in current browsers, Django only uses it when "
"numeric fields are not localized."
msgstr ""
":class:`~django.forms.EmailField`、:class:`~django.forms.URLField`、:class:"
"`~django.forms.IntegerField`、:class:`~django.forms.FloatField` 和 :class:"
"`~django.forms.DecimalField` 的默认小部件现在使用 HTML5 中可用的新类型属性"
"（``type='email'``、``type='url'``、``type='number'``）。请注意，由于当前浏览"
"器中对本地化数字支持不稳定，因此 Django 只在数值字段未本地化时使用 "
"``number`` 输入类型。"

msgid ""
"The ``number`` argument for :ref:`lazy plural translations <lazy-plural-"
"translations>` can be provided at translation time rather than at definition "
"time."
msgstr ""
"对于 :ref:`延迟复数翻译 <lazy-plural-translations>`，可以在翻译时提供 "
"``number`` 参数，而不是在定义时提供。"

msgid ""
"For custom management commands: Verification of the presence of valid "
"settings in commands that ask for it by using the ``BaseCommand."
"can_import_settings`` internal option is now performed independently from "
"handling of the locale that should be active during the execution of the "
"command. The latter can now be influenced by the new ``BaseCommand."
"leave_locale_alone`` internal option. See :ref:`management-commands-and-"
"locales` for more details."
msgstr ""
"对于自定义管理命令：在要求使用 ``BaseCommand.can_import_settings`` 内部选项的"
"命令中，现在独立于处理执行命令期间应处于活动状态的区域设置的验证。后者现在可"
"以受到新的 ``BaseCommand.leave_locale_alone`` 内部选项的影响。有关更多详细信"
"息，请参阅 :ref:`管理命令和区域设置`。"

msgid ""
"The :attr:`~django.views.generic.edit.DeletionMixin.success_url` of :class:"
"`~django.views.generic.edit.DeletionMixin` is now interpolated with its "
"``object``’s ``__dict__``."
msgstr ""
":class:`~django.views.generic.edit.DeletionMixin` 的 :attr:`~django.views."
"generic.edit.DeletionMixin.success_url` 现在使用其 ``object`` 的 "
"``__dict__`` 进行插值。"

msgid ""
":class:`~django.http.HttpResponseRedirect` and :class:`~django.http."
"HttpResponsePermanentRedirect` now provide an ``url`` attribute (equivalent "
"to the URL the response will redirect to)."
msgstr ""
":class:`~django.http.HttpResponseRedirect` 和 :class:`~django.http."
"HttpResponsePermanentRedirect` 现在提供了一个 ``url`` 属性（等同于响应将重定"
"向到的 URL）。"

msgid ""
"The ``MemcachedCache`` cache backend now uses the latest :mod:`pickle` "
"protocol available."
msgstr "``MemcachedCache`` 缓存后端现在使用了最新可用的 :mod:`pickle` 协议。"

msgid ""
"Added :class:`~django.contrib.messages.views.SuccessMessageMixin` which "
"provides a ``success_message`` attribute for :class:`~django.views.generic."
"edit.FormView` based classes."
msgstr ""
"新增了 :class:`~django.contrib.messages.views.SuccessMessageMixin`，它为基"
"于 :class:`~django.views.generic.edit.FormView` 的类提供了一个 "
"``success_message`` 属性。"

msgid ""
"Added the :attr:`django.db.models.ForeignKey.db_constraint` and :attr:"
"`django.db.models.ManyToManyField.db_constraint` options."
msgstr ""
"新增了 :attr:`django.db.models.ForeignKey.db_constraint` 和 :attr:`django.db."
"models.ManyToManyField.db_constraint` 选项。"

msgid ""
"The jQuery library embedded in the admin has been upgraded to version 1.9.1."
msgstr "jQuery 库嵌入在管理系统中已升级至 1.9.1 版本。"

msgid ""
"Syndication feeds (:mod:`django.contrib.syndication`) can now pass extra "
"context through to feed templates using a new :meth:`Feed.get_context_data() "
"<django.contrib.syndication.Feed.get_context_data>` callback."
msgstr ""
"现在，通过新的 :meth:`Feed.get_context_data() <django.contrib.syndication."
"Feed.get_context_data>` 回调，订阅源（:mod:`django.contrib.syndication`）可以"
"将额外的上下文传递给订阅源模板。"

msgid ""
"The admin list columns have a ``column-<field_name>`` class in the HTML so "
"the columns header can be styled with CSS, e.g. to set a column width."
msgstr ""
"在 HTML 中，管理员列表列具有 ``column-<field_name>`` 类，因此可以使用 CSS 对"
"列标题进行样式设置，例如设置列宽。"

msgid ""
"The :ref:`isolation level<database-isolation-level>` can be customized under "
"PostgreSQL."
msgstr ""
"在 PostgreSQL 下，可以自定义 :ref:`隔离级别 <database-isolation-level>`。"

msgid ""
"The :ttag:`blocktrans` template tag now respects "
"``TEMPLATE_STRING_IF_INVALID`` for variables not present in the context, "
"just like other template constructs."
msgstr ""
":ttag:`blocktrans` 模板标签现在像其他模板结构一样，尊重对于上下文中不存在的变"
"量的 ``TEMPLATE_STRING_IF_INVALID``。"

msgid ""
"``SimpleLazyObject``\\s will now present more helpful representations in "
"shell debugging situations."
msgstr "在 shell 调试情况下，``SimpleLazyObject`` 现在会提供更有帮助的表示。"

msgid ""
"Generic :class:`~django.contrib.gis.db.models.GeometryField` is now editable "
"with the OpenLayers widget in the admin."
msgstr ""
"通用的 :class:`~django.contrib.gis.db.models.GeometryField` 现在可以在管理员"
"中使用 OpenLayers 小部件进行编辑。"

msgid ""
"The documentation contains a :doc:`deployment checklist </howto/deployment/"
"checklist>`."
msgstr "文档中包含一个 :doc:`部署清单 </howto/deployment/checklist>`。"

msgid "The :djadmin:`diffsettings` command gained a ``--all`` option."
msgstr ":djadmin:`diffsettings` 命令增加了 ``--all`` 选项。"

msgid ""
"``django.forms.fields.Field.__init__`` now calls ``super()``, allowing field "
"mixins to implement ``__init__()`` methods that will reliably be called."
msgstr ""
"``django.forms.fields.Field.__init__`` 现在调用了 ``super()``，允许字段混合类"
"实现 ``__init__()`` 方法，并可靠地被调用。"

msgid ""
"The ``validate_max`` parameter was added to ``BaseFormSet`` and :func:"
"`~django.forms.formsets.formset_factory`, and ``ModelForm`` and inline "
"versions of the same.  The behavior of validation for formsets with "
"``max_num`` was clarified.  The previously undocumented behavior that "
"hardened formsets against memory exhaustion attacks was documented, and the "
"undocumented limit of the higher of 1000 or ``max_num`` forms was changed so "
"it is always 1000 more than ``max_num``."
msgstr ""
"在 ``BaseFormSet`` 和 :func:`~django.forms.formsets.formset_factory` 以及 "
"``ModelForm`` 和相应的内联版本中添加了 ``validate_max`` 参数。对于带有 "
"``max_num`` 的表单集的验证行为进行了澄清。之前未记录的行为，以防止内存耗尽攻"
"击的表单集被记录下来，同时未记录的高于 1000 或 ``max_num`` 的上限已更改，现在"
"它总是比 ``max_num`` 多 1000。"

msgid ""
"Added ``BCryptSHA256PasswordHasher`` to resolve the password truncation "
"issue with bcrypt."
msgstr "添加了 ``BCryptSHA256PasswordHasher`` 来解决 bcrypt 密码截断问题。"

msgid ""
":pypi:`Pillow` is now the preferred image manipulation library to use with "
"Django. :pypi:`PIL` is pending deprecation (support to be removed in Django "
"1.8). To upgrade, you should **first** uninstall PIL, **then** install "
"Pillow."
msgstr ""
":pypi:`Pillow` 现在是与 Django 一起使用的首选图像处理库。 :pypi:`PIL` 已经进"
"入弃用过程（在 Django 1.8 中将删除支持）。要升级，您应该 **首先** 卸载 PIL，"
"**然后** 安装 Pillow。"

msgid ":class:`~django.forms.ModelForm` accepts several new ``Meta`` options."
msgstr ":class:`~django.forms.ModelForm` 接受了一些新的 ``Meta`` 选项。"

msgid ""
"Fields included in the ``localized_fields`` list will be localized (by "
"setting ``localize`` on the form field)."
msgstr ""
"包含在 ``localized_fields`` 列表中的字段将会本地化（通过在表单字段上设置 "
"``localize``）。"

msgid ""
"The  ``labels``, ``help_texts`` and ``error_messages`` options may be used "
"to customize the default fields, see :ref:`modelforms-overriding-default-"
"fields` for details."
msgstr ""
"``labels``、``help_texts`` 和 ``error_messages`` 选项可以用来自定义默认字段，"
"请参阅 :ref:`modelforms-overriding-default-fields` 获取详细信息。"

msgid ""
"The ``choices`` argument to model fields now accepts an iterable of "
"iterables instead of requiring an iterable of lists or tuples."
msgstr ""
"模型字段的 ``choices`` 参数现在接受一个可迭代的可迭代对象，而不是需要一个列表"
"或元组的可迭代对象。"

msgid ""
"The reason phrase can be customized in HTTP responses using :attr:`~django."
"http.HttpResponse.reason_phrase`."
msgstr ""
"可以使用 :attr:`~django.http.HttpResponse.reason_phrase` 来自定义 HTTP 响应的"
"原因短语。"

msgid ""
"When giving the URL of the next page for ``django.contrib.auth.views."
"logout()``, ``django.contrib.auth.views.password_reset()``, ``django.contrib."
"auth.views.password_reset_confirm()``, and ``django.contrib.auth.views."
"password_change()``, you can now pass URL names and they will be resolved."
msgstr ""
"在为 ``django.contrib.auth.views.logout()``、``django.contrib.auth.views."
"password_reset()``、``django.contrib.auth.views.password_reset_confirm()`` "
"和 ``django.contrib.auth.views.password_change()`` 提供下一页的 URL 时，现在"
"可以传递 URL 名称，并将其解析。"

msgid ""
"The new :option:`dumpdata --pks` option specifies the primary keys of "
"objects to dump. This option can only be used with one model."
msgstr ""
"新的 :option:`dumpdata --pks` 选项指定要转储的对象的主键。此选项只能与一个模"
"型一起使用。"

msgid ""
"Added ``QuerySet`` methods :meth:`~django.db.models.query.QuerySet.first` "
"and :meth:`~django.db.models.query.QuerySet.last` which are convenience "
"methods returning the first or last object matching the filters. Returns "
"``None`` if there are no objects matching."
msgstr ""
"新增了 ``QuerySet`` 方法 :meth:`~django.db.models.query.QuerySet.first` 和 :"
"meth:`~django.db.models.query.QuerySet.last`，这些是返回与过滤条件匹配的第一"
"个或最后一个对象的便利方法。如果没有匹配的对象，则返回 ``None``。"

msgid ""
":class:`~django.views.generic.base.View` and :class:`~django.views.generic."
"base.RedirectView` now support HTTP ``PATCH`` method."
msgstr ""
":class:`~django.views.generic.base.View` 和 :class:`~django.views.generic."
"base.RedirectView` 现在支持 HTTP ``PATCH`` 方法。"

msgid ""
"``GenericForeignKey`` now takes an optional ``for_concrete_model`` argument, "
"which when set to ``False`` allows the field to reference proxy models. The "
"default is ``True`` to retain the old behavior."
msgstr ""
"``GenericForeignKey`` 现在接受一个可选的 ``for_concrete_model`` 参数，当设置"
"为 ``False`` 时，允许字段引用代理模型。默认值为 ``True``，以保留旧的行为。"

msgid ""
"The :class:`~django.middleware.locale.LocaleMiddleware` now stores the "
"active language in session if it is not present there. This prevents loss of "
"language settings after session flush, e.g. logout."
msgstr ""
":class:`~django.middleware.locale.LocaleMiddleware` 现在如果活动语言不在会话"
"中，则会将其存储在会话中。这可以防止在会话刷新后（例如注销）丢失语言设置。"

msgid ""
":exc:`~django.core.exceptions.SuspiciousOperation` has been differentiated "
"into a number of subclasses, and each will log to a matching named logger "
"under the ``django.security`` logging hierarchy. Along with this change, a "
"``handler400`` mechanism and default view are used whenever a "
"``SuspiciousOperation`` reaches the WSGI handler to return an "
"``HttpResponseBadRequest``."
msgstr ""
":exc:`~django.core.exceptions.SuspiciousOperation` 被细分为多个子类，并且每个"
"子类都会记录到与 ``django.security`` 日志层次结构下的匹配命名的记录器中。随着"
"这个变化，每当一个 ``SuspiciousOperation`` 到达 WSGI 处理程序以返回一个 "
"``HttpResponseBadRequest`` 时，将使用 ``handler400`` 机制和默认视图。"

msgid ""
"The :exc:`~django.db.models.Model.DoesNotExist` exception now includes a "
"message indicating the name of the attribute used for the lookup."
msgstr ""
":exc:`~django.db.models.Model.DoesNotExist` 异常现在包含一个消息，指示用于查"
"找的属性的名称。"

msgid ""
"The :meth:`~django.db.models.query.QuerySet.get_or_create` method no longer "
"requires at least one keyword argument."
msgstr ""
":meth:`~django.db.models.query.QuerySet.get_or_create` 方法不再需要至少一个关"
"键字参数。"

msgid ""
"The :class:`~django.test.SimpleTestCase` class includes a new assertion "
"helper for testing formset errors: ``django.test.SimpleTestCase."
"assertFormsetError()``."
msgstr ""
":class:`~django.test.SimpleTestCase` 类包括一个用于测试表单集错误的新断言助"
"手：``django.test.SimpleTestCase.assertFormsetError()``。"

msgid ""
"The list of related fields added to a :class:`~django.db.models.query."
"QuerySet` by :meth:`~django.db.models.query.QuerySet.select_related` can be "
"cleared using ``select_related(None)``."
msgstr ""
"通过 :meth:`~django.db.models.query.QuerySet.select_related` 添加到 :class:"
"`~django.db.models.query.QuerySet` 的相关字段列表可以使用 "
"``select_related(None)`` 清除。"

msgid ""
"The :meth:`~django.contrib.admin.InlineModelAdmin.get_extra` and :meth:"
"`~django.contrib.admin.InlineModelAdmin.get_max_num` methods on :class:"
"`~django.contrib.admin.InlineModelAdmin` may be overridden to customize the "
"extra and maximum number of inline forms."
msgstr ""
":class:`~django.contrib.admin.InlineModelAdmin` 上的 :meth:`~django.contrib."
"admin.InlineModelAdmin.get_extra` 和 :meth:`~django.contrib.admin."
"InlineModelAdmin.get_max_num` 方法可以被覆盖，以自定义内联表单的额外和最大数"
"量。"

msgid ""
"Formsets now have a :meth:`~django.forms.formsets.BaseFormSet."
"total_error_count` method."
msgstr ""
"现在，表单集具有一个 :meth:`~django.forms.formsets.BaseFormSet."
"total_error_count` 方法。"

msgid ""
":class:`~django.forms.ModelForm` fields can now override error messages "
"defined in model fields by using the :attr:`~django.forms.Field."
"error_messages` argument of a ``Field``’s constructor. To take advantage of "
"this new feature with your custom fields, :ref:`see the updated "
"recommendation <raising-validation-error>` for raising a ``ValidationError``."
msgstr ""
":class:`~django.forms.ModelForm` 字段现在可以使用 ``Field`` 构造函数的 :attr:"
"`~django.forms.Field.error_messages` 参数覆盖模型字段中定义的错误消息。要利用"
"这个新特性来自定义字段，请参阅 :ref:`更新的建议 <raising-validation-error>` "
"来引发 ``ValidationError``。"

msgid ""
":class:`~django.contrib.admin.ModelAdmin` now preserves filters on the list "
"view after creating, editing or deleting an object. It's possible to restore "
"the previous behavior of clearing filters by setting the :attr:`~django."
"contrib.admin.ModelAdmin.preserve_filters` attribute to ``False``."
msgstr ""
":class:`~django.contrib.admin.ModelAdmin` 在创建、编辑或删除对象后，现在会保"
"留列表视图上的过滤器。可以通过将 :attr:`~django.contrib.admin.ModelAdmin."
"preserve_filters` 属性设置为 ``False`` 来恢复以前的清除过滤器的行为。"

msgid ""
"Added :meth:`FormMixin.get_prefix<django.views.generic.edit.FormMixin."
"get_prefix>` (which returns :attr:`FormMixin.prefix<django.views.generic."
"edit.FormMixin.prefix>` by default) to allow customizing the :attr:`~django."
"forms.Form.prefix` of the form."
msgstr ""
"新增了 :meth:`FormMixin.get_prefix<django.views.generic.edit.FormMixin."
"get_prefix>` （默认返回 :attr:`FormMixin.prefix<django.views.generic.edit."
"FormMixin.prefix>`），允许自定义表单的 :attr:`~django.forms.Form.prefix`。"

msgid ""
"Raw queries (``Manager.raw()`` or ``cursor.execute()``) can now use the "
"\"pyformat\" parameter style, where placeholders in the query are given as "
"``'%(name)s'`` and the parameters are passed as a dictionary rather than a "
"list (except on SQLite). This has long been possible (but not officially "
"supported) on MySQL and PostgreSQL, and is now also available on Oracle."
msgstr ""
"原始查询（``Manager.raw()`` 或 ``cursor.execute()``）现在可以使用 "
"\"pyformat\" 参数样式，其中查询中的占位符以 ``'%(name)s'`` 形式给出，参数以字"
"典形式传递，而不是列表（在 SQLite 上除外）。在 MySQL 和 PostgreSQL 上早就支持"
"（但未得到官方支持），现在在 Oracle 上也可用。"

msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 20%. This backwards compatible change will not affect existing "
"passwords or users who have subclassed ``django.contrib.auth.hashers."
"PBKDF2PasswordHasher`` to change the default value. Passwords :ref:`will be "
"upgraded <password-upgrades>` to use the new iteration count as necessary."
msgstr ""
"PBKDF2 密码哈希器的默认迭代次数增加了 20%。这个向后兼容的更改不会影响现有的密"
"码或已经子类化 ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` 以更改默"
"认值的用户。必要时，密码将 :ref:`被升级 <password-upgrades>` 以使用新的迭代次"
"数。"

msgid "Backwards incompatible changes in 1.6"
msgstr "Django 1.6 中的向后不兼容变更"

msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"ref:`deprecation plan <deprecation-removed-in-1.6>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""
"除了本节中概述的更改之外，还请务必查看 :ref:`弃用计划 <deprecation-removed-"
"in-1.6>`，以了解已删除的功能。如果在给定功能的弃用时间范围内未更新代码，则其"
"删除可能会显示为不向后兼容的更改。"

msgid "New transaction management model"
msgstr "全新的事务管理模型"

msgid "Behavior changes"
msgstr "行为变更"

msgid ""
"Database-level autocommit is enabled by default in Django 1.6. While this "
"doesn't change the general spirit of Django's transaction management, there "
"are a few backwards-incompatibilities."
msgstr ""
"在 Django 1.6 中，默认情况下启用了数据库级别的自动提交。虽然这不会改变 "
"Django 事务管理的一般原则，但会引入一些不兼容性。"

msgid "Savepoints and ``assertNumQueries``"
msgstr "保存点和 ``assertNumQueries``"

msgid ""
"The changes in transaction management may result in additional statements to "
"create, release or rollback savepoints. This is more likely to happen with "
"SQLite, since it didn't support savepoints until this release."
msgstr ""
"事务管理的变更可能会导致额外的语句来创建、释放或回滚保存点。这在 SQLite 中更"
"有可能发生，因为在此版本之前它不支持保存点。"

msgid ""
"If tests using :meth:`~django.test.TransactionTestCase.assertNumQueries` "
"fail because of a higher number of queries than expected, check that the "
"extra queries are related to savepoints, and adjust the expected number of "
"queries accordingly."
msgstr ""
"如果使用 :meth:`~django.test.TransactionTestCase.assertNumQueries` 的测试因查"
"询次数超过预期而失败，请检查额外的查询是否与保存点相关，并相应地调整预期的查"
"询次数。"

msgid "Autocommit option for PostgreSQL"
msgstr "PostgreSQL 的自动提交选项"

msgid ""
"In previous versions, database-level autocommit was only an option for "
"PostgreSQL, and it was disabled by default. This option is now ignored and "
"can be removed."
msgstr ""
"在先前版本中，数据库级别的自动提交仅适用于 PostgreSQL，并且默认情况下被禁用。"
"现在该选项被忽略并可以移除。"

msgid "New test runner"
msgstr "全新的测试运行器"

msgid ""
"In order to maintain greater consistency with Python's ``unittest`` module, "
"the new test runner (``django.test.runner.DiscoverRunner``) does not "
"automatically support some types of tests that were supported by the "
"previous runner:"
msgstr ""
"为了与 Python 的 ``unittest`` 模块保持更一致，新的测试运行器（``django.test."
"runner.DiscoverRunner``）不会自动支持以前的运行器支持的一些测试类型："

msgid ""
"Tests in ``models.py`` and ``tests/__init__.py`` files will no longer be "
"found and run. Move them to a file whose name begins with ``test``."
msgstr ""
"不再会查找和运行 ``models.py`` 和 ``tests/__init__.py`` 文件中的测试。将它们"
"移到文件名以 ``test`` 开头的文件中。"

msgid ""
"Doctests will no longer be automatically discovered. To integrate doctests "
"in your test suite, follow the :ref:`recommendations in the Python "
"documentation <doctest-unittest-api>`."
msgstr ""
"不再自动发现 doctests。要将 doctests 集成到测试套件中，请遵循 Python 文档中"
"的 :ref:`建议 <doctest-unittest-api>`。"

msgid ""
"Django bundles a modified version of the :mod:`doctest` module from the "
"Python standard library (in ``django.test._doctest``) and includes some "
"additional doctest utilities. These utilities are deprecated and will be "
"removed in Django 1.8; doctest suites should be updated to work with the "
"standard library's doctest module (or converted to ``unittest``-compatible "
"tests)."
msgstr ""
"Django 包含了 Python 标准库中的 :mod:`doctest` 模块的修改版本（在 ``django."
"test._doctest`` 中），并包含一些额外的 doctest 工具。这些工具已被弃用，并将"
"在 Django 1.8 中删除；doctest 测试套件应该更新以使用标准库的 doctest 模块（或"
"转换为与 ``unittest`` 兼容的测试）。"

msgid ""
"If you wish to delay updates to your test suite, you can set your :setting:"
"`TEST_RUNNER` setting to ``django.test.simple.DjangoTestSuiteRunner`` to "
"fully restore the old test behavior. ``DjangoTestSuiteRunner`` is deprecated "
"but will not be removed from Django until version 1.8."
msgstr ""
"如果希望延迟更新测试套件，可以将 :setting:`TEST_RUNNER` 设置为 ``django.test."
"simple.DjangoTestSuiteRunner``，以完全恢复旧的测试行为。虽然 "
"``DjangoTestSuiteRunner`` 已被弃用，但在 Django 1.8 版本之前不会从 Django 中"
"删除。"

msgid ""
"Removal of ``django.contrib.gis.tests.GeoDjangoTestSuiteRunner`` GeoDjango "
"custom test runner"
msgstr ""
"移除了 ``django.contrib.gis.tests.GeoDjangoTestSuiteRunner`` GeoDjango 自定义"
"测试运行器。"

msgid ""
"This is for developers working on the GeoDjango application itself and "
"related to the item above about changes in the test runners:"
msgstr ""
"这适用于开发 GeoDjango 应用程序本身及其相关开发人员，与上述有关测试运行器变更"
"的项目相关："

msgid ""
"The ``django.contrib.gis.tests.GeoDjangoTestSuiteRunner`` test runner has "
"been removed and the standalone GeoDjango tests execution setup it "
"implemented isn't supported anymore. To run the GeoDjango tests simply use "
"the new ``DiscoverRunner`` and specify the ``django.contrib.gis`` app."
msgstr ""
"``django.contrib.gis.tests.GeoDjangoTestSuiteRunner`` 测试运行器已被移除，它"
"实现的独立 GeoDjango 测试执行设置不再受支持。要运行 GeoDjango 测试，只需使用"
"新的 ``DiscoverRunner`` 并指定 ``django.contrib.gis`` 应用程序。"

msgid "Custom user models in tests"
msgstr "在测试中使用自定义用户模型"

msgid ""
"The introduction of the new test runner has also slightly changed the way "
"that test models are imported. As a result, any test that overrides "
"``AUTH_USER_MODEL`` to test behavior with one of Django's test user models "
"( ``django.contrib.auth.tests.custom_user.CustomUser`` and ``django.contrib."
"auth.tests.custom_user.ExtensionUser``) must now explicitly import the User "
"model in your test module::"
msgstr ""
"新测试运行器的引入也稍微改变了测试模型的导入方式。因此，任何覆盖 "
"``AUTH_USER_MODEL`` 以测试与 Django 的测试用户模型之一（``django.contrib."
"auth.tests.custom_user.CustomUser`` 和 ``django.contrib.auth.tests."
"custom_user.ExtensionUser``）行为的测试现在必须在测试模块中显式导入用户模型："

msgid ""
"This import forces the custom user model to be registered. Without this "
"import, the test will be unable to swap in the custom user model, and you "
"will get an error reporting:"
msgstr ""
"这个导入语句会强制注册自定义用户模型。如果没有这个导入语句，测试将无法切换到"
"自定义用户模型，你将会收到一个错误报告："

msgid "Time zone-aware ``day``, ``month``, and ``week_day`` lookups"
msgstr "时间区域感知的 ``day``、``month`` 和 ``week_day`` 查找"

msgid ""
"Django 1.6 introduces time zone support for :lookup:`day`, :lookup:`month`, "
"and :lookup:`week_day` lookups when :setting:`USE_TZ` is ``True``. These "
"lookups were previously performed in UTC regardless of the current time zone."
msgstr ""
"Django 1.6 在 :setting:`USE_TZ` 为 ``True`` 时引入了对 :lookup:`day`、:"
"lookup:`month` 和 :lookup:`week_day` 查找的时间区域支持。以前，这些查找在不考"
"虑当前时区的情况下都在 UTC 中执行。"

msgid ""
"This requires :ref:`time zone definitions in the database <database-time-"
"zone-definitions>`. If you're using SQLite, you must install pytz_. If "
"you're using MySQL, you must install pytz_ and load the time zone tables "
"with `mysql_tzinfo_to_sql`_."
msgstr ""
"这需要数据库中的 :ref:`时区定义 <database-time-zone-definitions>`。如果使用的"
"是 SQLite，你必须安装 pytz_。如果使用的是 MySQL，你必须安装 pytz_ 并使用 "
"`mysql_tzinfo_to_sql`_ 加载时区表。"

msgid "Addition of ``QuerySet.datetimes()``"
msgstr "添加了 ``QuerySet.datetimes()`` 方法"

msgid ""
"When the :doc:`time zone support </topics/i18n/timezones>` added in Django "
"1.4 was active, :meth:`QuerySet.dates() <django.db.models.query.QuerySet."
"dates>` lookups returned unexpected results, because the aggregation was "
"performed in UTC. To fix this, Django 1.6 introduces a new API, :meth:"
"`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>`. This "
"requires a few changes in your code."
msgstr ""
"当 Django 1.4 中添加的 :doc:`时区支持 </topics/i18n/timezones>` 处于活动状态"
"时，:meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` 查找返回"
"了意外的结果，因为聚合是在 UTC 中执行的。为了解决这个问题，Django 1.6 引入了"
"一个新的 API，:meth:`QuerySet.datetimes() <django.db.models.query.QuerySet."
"datetimes>`。这需要在你的代码中进行一些更改。"

msgid "``QuerySet.dates()`` returns ``date`` objects"
msgstr "``QuerySet.dates()`` 返回的是 ``date`` 对象"

msgid ""
":meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` now returns "
"a list of :class:`~datetime.date`. It used to return a list of :class:"
"`~datetime.datetime`."
msgstr ""
":meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` 现在返回的"
"是 :class:`~datetime.date` 的列表。它以前返回的是 :class:`~datetime."
"datetime` 的列表。"

msgid ""
":meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>` "
"returns a list of :class:`~datetime.datetime`."
msgstr ""
":meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>` 返回"
"的是 :class:`~datetime.datetime` 的列表。"

msgid "``QuerySet.dates()`` no longer usable on ``DateTimeField``"
msgstr "``QuerySet.dates()`` 不再适用于 ``DateTimeField``"

msgid ""
":meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` raises an "
"error if it's used on :class:`~django.db.models.DateTimeField` when time "
"zone support is active. Use :meth:`QuerySet.datetimes() <django.db.models."
"query.QuerySet.datetimes>` instead."
msgstr ""
"当时间区域支持处于活动状态时，如果在 :class:`~django.db.models."
"DateTimeField` 上使用 :meth:`QuerySet.dates() <django.db.models.query."
"QuerySet.dates>` 会引发错误。此时应该使用 :meth:`QuerySet.datetimes() "
"<django.db.models.query.QuerySet.datetimes>`。"

msgid "``date_hierarchy`` requires time zone definitions"
msgstr "``date_hierarchy`` 需要时间区域定义"

msgid ""
"The :attr:`~django.contrib.admin.ModelAdmin.date_hierarchy` feature of the "
"admin now relies on :meth:`QuerySet.datetimes() <django.db.models.query."
"QuerySet.datetimes>` when it's used on a :class:`~django.db.models."
"DateTimeField`."
msgstr ""
"在管理员中使用 :attr:`~django.contrib.admin.ModelAdmin.date_hierarchy` 特性"
"时，如果它用于 :class:`~django.db.models.DateTimeField`，现在会依赖于 :meth:"
"`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>`。"

msgid ""
"This requires time zone definitions in the database when :setting:`USE_TZ` "
"is ``True``. :ref:`Learn more <database-time-zone-definitions>`."
msgstr ""
"这需要在数据库中启用时区定义，当 :setting:`USE_TZ` 设置为 ``True`` 时。详细信"
"息请参阅 :ref:`了解更多 <database-time-zone-definitions>`。"

msgid "``date_list`` in generic views requires time zone definitions"
msgstr "在通用视图中使用的 ``date_list`` 需要时间区域的定义"

msgid ""
"For the same reason, accessing ``date_list`` in the context of a date-based "
"generic view requires time zone definitions in the database when the view is "
"based on a :class:`~django.db.models.DateTimeField` and :setting:`USE_TZ` is "
"``True``. :ref:`Learn more <database-time-zone-definitions>`."
msgstr ""
"出于相同的原因，当视图基于 :class:`~django.db.models.DateTimeField` 且 :"
"setting:`USE_TZ` 设置为 ``True`` 时，在日期为基础的通用视图中访问上下文中的 "
"``date_list`` 需要数据库中的时间区域定义。详细信息请参阅 :ref:`了解更多 "
"<database-time-zone-definitions>`。"

msgid "New lookups may clash with model fields"
msgstr "新的查找可能与模型字段冲突"

msgid ""
"Django 1.6 introduces ``hour``, ``minute``, and ``second`` lookups on :class:"
"`~django.db.models.DateTimeField`. If you had model fields called ``hour``, "
"``minute``, or ``second``, the new lookups will clash with you field names. "
"Append an explicit :lookup:`exact` lookup if this is an issue."
msgstr ""
"Django 1.6 引入了在 :class:`~django.db.models.DateTimeField` 上的 ``hour``、"
"``minute`` 和 ``second`` 查找。如果您的模型字段名为 ``hour``、``minute`` 或 "
"``second``，新的查找可能会与您的字段名冲突。如果出现此问题，请附加一个明确"
"的 :lookup:`exact` 查找。"

msgid "``BooleanField`` no longer defaults to ``False``"
msgstr "``BooleanField`` 不再默认为 ``False``"

msgid ""
"When a :class:`~django.db.models.BooleanField` doesn't have an explicit :"
"attr:`~django.db.models.Field.default`, the implicit default value is "
"``None``. In previous version of Django, it was ``False``, but that didn't "
"represent accurately the lack of a value."
msgstr ""
"当一个 :class:`~django.db.models.BooleanField` 没有明确的 :attr:`~django.db."
"models.Field.default` 时，隐式的默认值是 ``None``。在之前的 Django 版本中，默"
"认值是 ``False``，但这并没有准确地表示缺少值。"

msgid ""
"Code that relies on the default value being ``False`` may raise an exception "
"when saving new model instances to the database, because ``None`` isn't an "
"acceptable value for a :class:`~django.db.models.BooleanField`. You should "
"either specify ``default=False`` in the field definition, or ensure the "
"field is set to ``True`` or ``False`` before saving the object."
msgstr ""
"依赖默认值为 ``False`` 的代码在保存新的模型实例到数据库时可能会引发异常，因"
"为 ``None`` 不是 :class:`~django.db.models.BooleanField` 的可接受值。您应该在"
"字段定义中明确指定 ``default=False``，或者在保存对象之前确保字段被设置为 "
"``True`` 或 ``False``。"

msgid "Translations and comments in templates"
msgstr "模板中的翻译和注释"

msgid "Extraction of translations after comments"
msgstr "提取注释后的翻译内容"

msgid ""
"Extraction of translatable literals from templates with the :djadmin:"
"`makemessages` command now correctly detects i18n constructs when they are "
"located after a ``{#`` / ``#}``-type comment on the same line. E.g.:"
msgstr ""
"使用 :djadmin:`makemessages` 命令从模板中提取可翻译文字时，现在可以正确检测到"
"位于同一行的 ``{#`` / ``#}`` 类型的注释之后的 i18n 构造。例如："

msgid "Location of translator comments"
msgstr "翻译者注释的位置"

msgid ""
":ref:`translator-comments-in-templates` specified using ``{#`` / ``#}`` need "
"to be at the end of a line. If they are not, the comments are ignored and :"
"djadmin:`makemessages` will generate a warning. For example:"
msgstr ""
":ref:`translator-comments-in-templates` 使用 ``{#`` / ``#}`` 指定的注释必须位"
"于一行的末尾。如果不是，这些注释将被忽略，并且 :djadmin:`makemessages` 将生成"
"警告。例如："

msgid "Quoting in ``reverse()``"
msgstr "``reverse()`` 中的引号"

msgid ""
"When reversing URLs, Django didn't apply ``django.utils.http.urlquote`` to "
"arguments before interpolating them in URL patterns. This bug is fixed in "
"Django 1.6. If you worked around this bug by applying URL quoting before "
"passing arguments to ``reverse()``, this may result in double-quoting. If "
"this happens, simply remove the URL quoting from your code. You will also "
"have to replace special characters in URLs used in :func:`~django.test."
"SimpleTestCase.assertRedirects` with their encoded versions."
msgstr ""
"在反查 URL 时，Django 在将参数插入 URL 模式之前未应用 ``django.utils.http."
"urlquote``。这个 bug 在 Django 1.6 中已经修复。如果你之前通过在将参数传递给 "
"``reverse()`` 之前应用 URL 引用来解决这个问题，这可能导致双重引用。如果发生这"
"种情况，请从你的代码中移除 URL 引用。你还需要将在 :func:`~django.test."
"SimpleTestCase.assertRedirects` 中使用的 URL 中的特殊字符替换为它们的编码版"
"本。"

msgid "Storage of IP addresses in the comments app"
msgstr "在评论应用中存储 IP 地址"

msgid ""
"The comments app now uses a ``GenericIPAddressField`` for storing "
"commenters' IP addresses, to support comments submitted from IPv6 addresses. "
"Until now, it stored them in an ``IPAddressField``, which is only meant to "
"support IPv4. When saving a comment made from an IPv6 address, the address "
"would be silently truncated on MySQL databases, and raise an exception on "
"Oracle. You will need to change the column type in your database to benefit "
"from this change."
msgstr ""
"评论应用现在使用 ``GenericIPAddressField`` 来存储评论者的IP地址，以支持从 "
"IPv6 地址提交的评论。直到现在，它们是存储在 ``IPAddressField`` 中的，这个字段"
"只支持 IPv4。当保存来自 IPv6 地址的评论时，在 MySQL 数据库上，该地址将被静默"
"截断，并在 Oracle 上引发异常。你需要更改数据库中的列类型才能从这个更改中受"
"益。"

msgid "For MySQL, execute this query on your project's database:"
msgstr "对于 MySQL，在您的项目数据库上执行以下查询："

msgid "For Oracle, execute this query:"
msgstr "对于 Oracle，请执行以下查询："

msgid ""
"If you do not apply this change, the behavior is unchanged: on MySQL, IPv6 "
"addresses are silently truncated; on Oracle, an exception is generated. No "
"database change is needed for SQLite or PostgreSQL databases."
msgstr ""
"如果您不应用此更改，行为将保持不变：在 MySQL 上，IPv6 地址会被静默截断；在 "
"Oracle 上，会生成异常。对于 SQLite 或 PostgreSQL 数据库，不需要进行数据库更"
"改。"

msgid "Percent literals in ``cursor.execute`` queries"
msgstr "在 ``cursor.execute`` 查询中的百分比文字面值"

msgid ""
"When you are running raw SQL queries through the :ref:`cursor.execute "
"<executing-custom-sql>` method, the rule about doubling percent literals "
"(``%``) inside the query has been unified. Past behavior depended on the "
"database backend. Now, across all backends, you only need to double literal "
"percent characters if you are also providing replacement parameters. For "
"example::"
msgstr ""
"当你通过 :ref:`cursor.execute <executing-custom-sql>` 方法运行原始 SQL 查询"
"时，关于在查询内部加倍百分比文字面值（``%``）的规则已经统一。过去的行为取决于"
"数据库后端。现在，在所有后端中，只有在你还提供替换参数的情况下，才需要加倍文"
"字百分比字符。例如："

msgid "``SQLite`` users need to check and update such queries."
msgstr "``SQLite`` 用户需要检查和更新这样的查询。"

msgid "Help text of model form fields for ManyToManyField fields"
msgstr "对于 ManyToManyField 字段的模型表单字段的帮助文本。"

msgid ""
"HTML rendering of model form fields corresponding to :class:`~django.db."
"models.ManyToManyField` model fields used to get the hard-coded sentence:"
msgstr ""
"HTML 渲染模型表单字段，对应于用于获取硬编码句子的 :class:`~django.db.models."
"ManyToManyField` 模型字段："

msgid ""
"*Hold down \"Control\", or \"Command\" on a Mac, to select more than one.*"
msgstr ""
"*按住 \"Control\" 键，或者在 Mac 上按住 \"Command\" 键，以选择多个选项。*"

msgid ""
"(or its translation to the active locale) imposed as the help legend shown "
"along them if neither :attr:`model <django.db.models.Field.help_text>` nor :"
"attr:`form <django.forms.Field.help_text>` ``help_text`` attributes were "
"specified by the user (or this string was appended to any ``help_text`` that "
"was provided)."
msgstr ""
"（或其翻译成活动语言环境的版本）将作为帮助提示显示在它们旁边，如果用户没有指"
"定 :attr:`model <django.db.models.Field.help_text>` 或 :attr:`form <django."
"forms.Field.help_text>` ``help_text`` 属性（或者该字符串被附加到任何已提供的 "
"``help_text`` 中）。"

msgid ""
"Since this happened at the model layer, there was no way to prevent the text "
"from appearing in cases where it wasn't applicable such as form fields that "
"implement user interactions that don't involve a keyboard and/or a mouse."
msgstr ""
"由于这发生在模型层，因此无法阻止文本在不适用的情况下出现，例如实现了不涉及键"
"盘和/或鼠标的用户交互的表单字段。"

msgid ""
"Starting with Django 1.6, as an ad-hoc temporary backward-compatibility "
"provision, the logic to add the \"Hold down...\" sentence has been moved to "
"the model form field layer and modified to add the text only when the "
"associated widget is :class:`~django.forms.SelectMultiple` or selected "
"subclasses."
msgstr ""
"从 Django 1.6 开始，作为临时的向后兼容性规定，添加 \"按住...\" 句子的逻辑已经"
"移动到模型表单字段层，并修改为仅在关联的小部件为 :class:`~django.forms."
"SelectMultiple` 或其选定的子类时添加文本。"

msgid ""
"The change can affect you in a backward incompatible way if you employ "
"custom model form fields and/or widgets for ``ManyToManyField`` model fields "
"whose UIs do rely on the automatic provision of the mentioned hard-coded "
"sentence. These form field implementations need to adapt to the new scenario "
"by providing their own handling of the ``help_text`` attribute."
msgstr ""
"如果您为依赖于提供的硬编码句子的自动方式的 ``ManyToManyField`` 模型字段使用自"
"定义模型表单字段和/或小部件，这个变更可以以向后不兼容的方式影响您。这些表单字"
"段实现需要适应新的情况，通过提供自己的处理 ``help_text`` 属性的方式来处理它。"

msgid ""
"Applications that use Django :doc:`model form </topics/forms/modelforms>` "
"facilities together with Django built-in form :doc:`fields </ref/forms/"
"fields>` and :doc:`widgets </ref/forms/widgets>` aren't affected but need to "
"be aware of what's described in :ref:`m2m-help_text-deprecation` below."
msgstr ""
"使用 Django :doc:`模型表单 </topics/forms/modelforms>` 功能以及 Django 内置的"
"表单 :doc:`字段 </ref/forms/fields>` 和 :doc:`小部件 </ref/forms/widgets>` 的"
"应用不受影响，但需要注意下面 :ref:`m2m-help_text-deprecation` 中描述的内容。"

msgid "QuerySet iteration"
msgstr "QuerySet 迭代"

msgid ""
"The ``QuerySet`` iteration was changed to immediately convert all fetched "
"rows to ``Model`` objects. In Django 1.5 and earlier the fetched rows were "
"converted to ``Model`` objects in chunks of 100."
msgstr ""
"``QuerySet`` 的迭代方式已更改为立即将所有检索到的行转换为 ``Model`` 对象。在 "
"Django 1.5 及之前，检索到的行是以 100 行为单位转换为 ``Model`` 对象的。"

msgid ""
"Existing code will work, but the amount of rows converted to objects might "
"change in certain use cases. Such usages include partially looping over a "
"queryset or any usage which ends up doing ``__bool__`` or ``__contains__``."
msgstr ""
"现有的代码将正常工作，但在某些用例中，转换为对象的行数可能会发生变化。这些用"
"法包括部分遍历查询集或任何最终执行 ``__bool__`` 或 ``__contains__`` 操作的用"
"法。"

msgid ""
"Notably most database backends did fetch all the rows in one go already in "
"1.5."
msgstr "值得注意的是，大多数数据库后端在 1.5 版本中已经一次性获取了所有行。"

msgid ""
"It is still possible to convert the fetched rows to ``Model`` objects lazily "
"by using the :meth:`~django.db.models.query.QuerySet.iterator()` method."
msgstr ""
"仍然可以通过使用 :meth:`~django.db.models.query.QuerySet.iterator()` 方法来惰"
"性地将检索到的行转换为 ``Model`` 对象。"

msgid ""
":meth:`BoundField.label_tag<django.forms.BoundField.label_tag>` now includes "
"the form's :attr:`~django.forms.Form.label_suffix`"
msgstr ""
":meth:`BoundField.label_tag<django.forms.BoundField.label_tag>` 现在包括表单"
"的 :attr:`~django.forms.Form.label_suffix`"

msgid ""
"This is consistent with how methods like :meth:`Form.as_p<django.forms.Form."
"as_p>` and :meth:`Form.as_ul<django.forms.Form.as_ul>` render labels."
msgstr ""
"这与 :meth:`Form.as_p<django.forms.Form.as_p>` 和 :meth:`Form.as_ul<django."
"forms.Form.as_ul>` 等方法呈现标签的方式保持一致。"

msgid "If you manually render ``label_tag`` in your templates:"
msgstr "如果您在模板中手动呈现 ``label_tag``："

msgid ""
"you'll want to remove the colon (or whatever other separator you may be "
"using) to avoid duplicating it when upgrading to Django 1.6. The following "
"template in Django 1.6 will render identically to the above template in "
"Django 1.5, except that the colon will appear inside the ``<label>`` element."
msgstr ""
"在升级到 Django 1.6 时，你需要移除冒号（或你可能使用的任何其他分隔符），以避"
"免重复。以下 Django 1.6 中的模板与 Django 1.5 中的上述模板渲染效果相同，只是"
"冒号会出现在 ``<label>`` 元素内部。"

msgid "will render something like:"
msgstr "将呈现类似于："

msgid ""
"If you want to keep the current behavior of rendering ``label_tag`` without "
"the ``label_suffix``, instantiate the form ``label_suffix=''``. You can also "
"customize the ``label_suffix`` on a per-field basis using the new "
"``label_suffix`` parameter on :meth:`~django.forms.BoundField.label_tag`."
msgstr ""
"如果您想保留呈现不带 ``label_suffix`` 的 ``label_tag`` 的当前行为，请实例化表"
"单时使用 ``label_suffix=''``。您还可以使用 :meth:`~django.forms.BoundField."
"label_tag` 上的新 ``label_suffix`` 参数来根据每个字段进行自定义。"

msgid "Admin views ``_changelist_filters`` GET parameter"
msgstr "管理员视图 ``_changelist_filters`` GET 参数"

msgid ""
"To achieve preserving and restoring list view filters, admin views now pass "
"around the ``_changelist_filters`` GET parameter. It's important that you "
"account for that change if you have custom admin templates or if your tests "
"rely on the previous URLs. If you want to revert to the original behavior "
"you can set the :attr:`~django.contrib.admin.ModelAdmin.preserve_filters` "
"attribute to ``False``."
msgstr ""
"为了保留和恢复列表视图过滤器，管理员视图现在传递 ``_changelist_filters`` GET "
"参数。如果您有自定义的管理员模板或者您的测试依赖于以前的URL，请确保考虑到这个"
"变化。如果您想恢复到原始行为，您可以将 :attr:`~django.contrib.admin."
"ModelAdmin.preserve_filters` 属性设置为 ``False``。"

msgid ""
"``django.contrib.auth`` password reset uses base 64 encoding of ``User`` PK"
msgstr ""
"``django.contrib.auth`` 密码重置使用了对 ``User`` 主键（PK）的 Base64 编码。"

msgid ""
"Past versions of Django used base 36 encoding of the ``User`` primary key in "
"the password reset views and URLs (``django.contrib.auth.views."
"password_reset_confirm()``). Base 36 encoding is sufficient if the user "
"primary key is an integer, however, with the introduction of custom user "
"models in Django 1.5, that assumption may no longer be true."
msgstr ""
"Django 的过去版本在密码重置视图和URLs（``django.contrib.auth.views."
"password_reset_confirm()``）中使用了 ``User`` 主键的 Base 36 编码。Base 36 编"
"码对于用户主键是整数的情况足够了，然而，随着 Django 1.5 中引入自定义用户模"
"型，这个假设可能不再成立。"

msgid ""
"``django.contrib.auth.views.password_reset_confirm()`` has been modified to "
"take a ``uidb64`` parameter instead of ``uidb36``. If you are reversing this "
"view, for example in a custom ``password_reset_email.html`` template, be "
"sure to update your code."
msgstr ""
"``django.contrib.auth.views.password_reset_confirm()`` 已经修改为接受 "
"``uidb64`` 参数，而不是 ``uidb36``。如果您需要反向这个视图，例如在自定义的 "
"``password_reset_email.html`` 模板中，请确保更新您的代码。"

msgid ""
"A temporary shim for ``django.contrib.auth.views.password_reset_confirm()`` "
"that will allow password reset links generated prior to Django 1.6 to "
"continue to work has been added to provide backwards compatibility; this "
"will be removed in Django 1.7. Thus, as long as your site has been running "
"Django 1.6 for more than ``PASSWORD_RESET_TIMEOUT_DAYS``, this change will "
"have no effect. If not (for example, if you upgrade directly from Django 1.5 "
"to Django 1.7), then any password reset links generated before you upgrade "
"to Django 1.7 or later won't work after the upgrade."
msgstr ""
"为了提供向后兼容性，已经添加了一个临时的 shim，用于允许在 Django 1.6 之前生成"
"的密码重置链接继续工作；这将在 Django 1.7 中被移除。因此，只要您的站点在 "
"Django 1.6 上运行的时间超过了 ``PASSWORD_RESET_TIMEOUT_DAYS``，这个变化将不会"
"产生影响。如果不是这样（例如，如果您直接从 Django 1.5 升级到 Django 1.7），那"
"么在升级后，任何在升级到 Django 1.7 或更高版本之前生成的密码重置链接将在升级"
"后不起作用。"

msgid ""
"In addition, if you have any custom password reset URLs, you will need to "
"update them by replacing ``uidb36`` with ``uidb64`` and the dash that "
"follows that pattern with a slash. Also add ``_\\-`` to the list of "
"characters that may match the ``uidb64`` pattern."
msgstr ""
"此外，如果您有任何自定义密码重置的URL，您需要通过将 ``uidb36`` 替换为 "
"``uidb64`` 并将跟随该模式的短划线替换为斜杠来更新它们。还要将 ``_\\-`` 添加到"
"可能与 ``uidb64`` 模式匹配的字符列表中。"

msgid "For example::"
msgstr "例子："

msgid ""
"You may also want to add the shim to support the old style reset links. "
"Using the example above, you would modify the existing url by replacing "
"``django.contrib.auth.views.password_reset_confirm`` with ``django.contrib."
"auth.views.password_reset_confirm_uidb36`` and also remove the ``name`` "
"argument so it doesn't conflict with the new url::"
msgstr ""
"您可能还希望添加 shim 来支持旧式的重置链接。使用上面的示例，您可以通过将现有"
"的 URL 中的 ``django.contrib.auth.views.password_reset_confirm`` 替换为 "
"``django.contrib.auth.views.password_reset_confirm_uidb36``，并删除 ``name`` "
"参数，以防止与新的 URL 冲突："

msgid ""
"You can remove this URL pattern after your app has been deployed with Django "
"1.6 for ``PASSWORD_RESET_TIMEOUT_DAYS``."
msgstr ""
"在您的应用程序在 Django 1.6 上部署了超过 ``PASSWORD_RESET_TIMEOUT_DAYS`` 后，"
"您可以删除这个 URL 模式。"

msgid "Default session serialization switched to JSON"
msgstr "默认会话序列化方式切换为 JSON"

msgid ""
"Historically, :mod:`django.contrib.sessions` used :mod:`pickle` to serialize "
"session data before storing it in the backend. If you're using the :ref:"
"`signed cookie session backend<cookie-session-backend>` and :setting:"
"`SECRET_KEY` is known by an attacker (there isn't an inherent vulnerability "
"in Django that would cause it to leak), the attacker could insert a string "
"into their session which, when unpickled, executes arbitrary code on the "
"server. The technique for doing so is simple and easily available on the "
"internet. Although the cookie session storage signs the cookie-stored data "
"to prevent tampering, a :setting:`SECRET_KEY` leak immediately escalates to "
"a remote code execution vulnerability."
msgstr ""
"在历史上，:mod:`django.contrib.sessions` 使用 :mod:`pickle` 来序列化会话数"
"据，然后将其存储在后端。如果您使用 :ref:`签名的 Cookie 会话后端 <cookie-"
"session-backend>`，并且 :setting:`SECRET_KEY` 已知于攻击者（Django 本身没有固"
"有的漏洞会导致其泄漏），攻击者可以在其会话中插入一个字符串，当反序列化时，会"
"在服务器上执行任意代码。执行此操作的技术非常简单，且在互联网上很容易找到。尽"
"管 Cookie 会话存储使用签名来防止篡改存储在 Cookie 中的数据，但如果 :setting:"
"`SECRET_KEY` 泄漏，会立即升级为远程代码执行漏洞。"

msgid ""
"This attack can be mitigated by serializing session data using JSON rather "
"than :mod:`pickle`. To facilitate this, Django 1.5.3 introduced a new "
"setting, :setting:`SESSION_SERIALIZER`, to customize the session "
"serialization format. For backwards compatibility, this setting defaulted to "
"using :mod:`pickle` in Django 1.5.3, but we've changed the default to JSON "
"in 1.6. If you upgrade and switch from pickle to JSON, sessions created "
"before the upgrade will be lost. While JSON serialization does not support "
"all Python objects like :mod:`pickle` does, we highly recommend using JSON-"
"serialized sessions. Be aware of the following when checking your code to "
"determine if JSON serialization will work for your application:"
msgstr ""
"这种攻击可以通过使用 JSON 而不是 :mod:`pickle` 来序列化会话数据来减轻。为了实"
"现这一点，Django 1.5.3 引入了一个新的设置，:setting:`SESSION_SERIALIZER`，用"
"于自定义会话序列化格式。为了向后兼容，Django 1.5.3 中默认使用 :mod:`pickle`，"
"但在 1.6 中我们将默认值更改为 JSON。如果您升级并从 pickle 切换到 JSON，升级之"
"前创建的会话将丢失。虽然 JSON 序列化不支持所有像 :mod:`pickle` 那样的 Python "
"对象，但我们强烈建议使用 JSON 序列化的会话。在检查您的代码以确定 JSON 序列化"
"是否适用于您的应用程序时，请注意以下内容："

msgid ""
"JSON requires string keys, so you will likely run into problems if you are "
"using non-string keys in ``request.session``."
msgstr ""
"JSON 要求使用字符串键，因此如果您在 ``request.session`` 中使用非字符串键，则"
"可能会遇到问题。"

msgid ""
"Setting session expiration by passing ``datetime`` values to :meth:`~django."
"contrib.sessions.backends.base.SessionBase.set_expiry` will not work as "
"``datetime`` values are not serializable in JSON. You can use integer values "
"instead."
msgstr ""
"通过将 ``datetime`` 值传递给 :meth:`~django.contrib.sessions.backends.base."
"SessionBase.set_expiry` 来设置会话到期时间将不起作用，因为 ``datetime`` 值在 "
"JSON 中无法序列化。您可以改为使用整数值。"

msgid "See the :ref:`session_serialization` documentation for more details."
msgstr "请查看 :ref:`session_serialization` 文档以获取更多详细信息。"

msgid "Object Relational Mapper changes"
msgstr "对象关系映射器（ORM）的变更"

msgid ""
"Django 1.6 contains many changes to the ORM. These changes fall mostly in "
"three categories:"
msgstr "Django 1.6 包含了许多 ORM 的变更。这些变更主要可以分为三个类别："

msgid ""
"Bug fixes (e.g. proper join clauses for generic relations, query combining, "
"join promotion, and join trimming fixes)"
msgstr ""
"错误修复（例如，针对通用关系的正确连接子句、查询合并、连接提升和连接修剪的修"
"复）"

msgid ""
"Preparation for new features. For example the ORM is now internally ready "
"for multicolumn foreign keys."
msgstr "为新功能做准备。例如，ORM 现在在内部已准备好支持多列外键。"

msgid "General cleanup."
msgstr "整体清理"

msgid ""
"These changes can result in some compatibility problems. For example, some "
"queries will now generate different table aliases. This can affect :meth:"
"`QuerySet.extra() <django.db.models.query.QuerySet.extra>`. In addition some "
"queries will now produce different results. An example is :meth:"
"`exclude(condition) <django.db.models.query.QuerySet.exclude>` where the "
"condition is a complex one (referencing multijoins inside :class:`Q objects "
"<django.db.models.Q>`). In many cases the affected queries didn't produce "
"correct results in Django 1.5 but do now. Unfortunately there are also cases "
"that produce different results, but neither Django 1.5 nor 1.6 produce "
"correct results."
msgstr ""
"这些变化可能会导致一些兼容性问题。例如，一些查询现在可能会生成不同的表别名。"
"这可能会影响 :meth:`QuerySet.extra() <django.db.models.query.QuerySet."
"extra>`。此外，一些查询现在可能会产生不同的结果。一个例子是 :meth:"
"`exclude(condition) <django.db.models.query.QuerySet.exclude>`，其中条件比较"
"复杂（引用了 :class:`Q objects <django.db.models.Q>` 中的多重连接）。在许多情"
"况下，受影响的查询在 Django 1.5 中并没有生成正确的结果，但现在却能够生成正确"
"的结果。不幸的是，还有一些情况会产生不同的结果，但无论是在 Django 1.5 还是在 "
"1.6 中都没有生成正确的结果。"

msgid "Finally, there have been many changes to the ORM internal APIs."
msgstr "最后，ORM 的内部 API 发生了许多变化"

msgid ""
"The ``django.db.models.query.EmptyQuerySet`` can't be instantiated any more "
"- it is only usable as a marker class for checking if :meth:`~django.db."
"models.query.QuerySet.none` has been called: ``isinstance(qs.none(), "
"EmptyQuerySet)``"
msgstr ""
"``django.db.models.query.EmptyQuerySet`` 现在不能再实例化了，它只能用作检查是"
"否调用了 :meth:`~django.db.models.query.QuerySet.none` 的标记类："
"``isinstance(qs.none(), EmptyQuerySet)``。"

msgid ""
"If your CSS/JavaScript code used to access HTML input widgets by type, you "
"should review it as ``type='text'`` widgets might be now output as "
"``type='email'``, ``type='url'`` or ``type='number'`` depending on their "
"corresponding field type."
msgstr ""
"如果您的 CSS/JavaScript 代码以前根据输入小部件的类型进行访问，您应该进行审"
"查，因为 ``type='text'`` 的小部件现在可能会根据其对应的字段类型输出为 "
"``type='email'``、``type='url'`` 或 ``type='number'``。"

msgid ""
"Form field's :attr:`~django.forms.Field.error_messages` that contain a "
"placeholder should now always use a named placeholder (``\"Value '%(value)s' "
"is too big\"`` instead of ``\"Value '%s' is too big\"``). See the "
"corresponding field documentation for details about the names of the "
"placeholders. The changes in 1.6 particularly affect :class:`~django.forms."
"DecimalField` and :class:`~django.forms.ModelMultipleChoiceField`."
msgstr ""
"表单字段的 :attr:`~django.forms.Field.error_messages` 中包含占位符的错误消息"
"现在应始终使用具名占位符（``\"Value '%(value)s' is too big\"`` 而不是 "
"``\"Value '%s' is too big\"``）。有关占位符名称的详细信息，请参阅相应的字段文"
"档。1.6 中的更改特别影响到了 :class:`~django.forms.DecimalField` 和 :class:"
"`~django.forms.ModelMultipleChoiceField`。"

msgid ""
"Some :attr:`~django.forms.Field.error_messages` for :class:`~django.forms."
"IntegerField`, :class:`~django.forms.EmailField`, ``IPAddressField``, :class:"
"`~django.forms.GenericIPAddressField`, and :class:`~django.forms.SlugField` "
"have been suppressed because they duplicated error messages already provided "
"by validators tied to the fields."
msgstr ""
"一些针对 :class:`~django.forms.IntegerField`、:class:`~django.forms."
"EmailField`、``IPAddressField``、:class:`~django.forms."
"GenericIPAddressField` 和 :class:`~django.forms.SlugField` 的 :attr:`~django."
"forms.Field.error_messages` 已经被抑制，因为它们重复了与字段绑定的验证器已经"
"提供的错误消息。"

msgid ""
"Due to a change in the form validation workflow, :class:`~django.forms."
"TypedChoiceField` ``coerce`` method should always return a value present in "
"the ``choices`` field attribute. That limitation should be lift again in "
"Django 1.7."
msgstr ""
"由于表单验证工作流程的更改，:class:`~django.forms.TypedChoiceField` 的 "
"``coerce`` 方法应该始终返回存在于 ``choices`` 字段属性中的值。这个限制应该在 "
"Django 1.7 中被取消。"

msgid ""
"There have been changes in the way timeouts are handled in cache backends. "
"Explicitly passing in ``timeout=None`` no longer results in using the "
"default timeout. It will now set a non-expiring timeout. Passing 0 into the "
"memcache backend no longer uses the default timeout, and now will set-and-"
"expire-immediately the value."
msgstr ""
"在缓存后端中，超时处理方式发生了变化。显式传递 ``timeout=None`` 不再会使用默"
"认超时。现在它将设置一个永不过期的超时。在 memcache 后端中传递 0 不再使用默认"
"超时，而是立即设置并过期值。"

msgid ""
"The ``django.contrib.flatpages`` app used to set custom HTTP headers for "
"debugging purposes. This functionality was not documented and made caching "
"ineffective so it has been removed, along with its generic implementation, "
"previously available in ``django.core.xheaders``."
msgstr ""
"``django.contrib.flatpages`` 应用程序曾经为调试目的设置自定义 HTTP 标头。这个"
"功能没有记录在文档中，而且使得缓存失效，因此已经被移除，以及之前在 ``django."
"core.xheaders`` 中可用的通用实现也被移除。"

msgid ""
"The ``XViewMiddleware`` has been moved from ``django.middleware.doc`` to "
"``django.contrib.admindocs.middleware`` because it is an implementation "
"detail of admindocs, proven not to be reusable in general."
msgstr ""
"``XViewMiddleware`` 已经从 ``django.middleware.doc`` 移动到 ``django.contrib."
"admindocs.middleware``，因为它是 admindocs 的实现细节，已被证明在一般情况下不"
"可重用。"

msgid ""
":class:`~django.db.models.GenericIPAddressField` will now only allow "
"``blank`` values if ``null`` values are also allowed. Creating a "
"``GenericIPAddressField`` where ``blank`` is allowed but ``null`` is not "
"will trigger a model validation error because ``blank`` values are always "
"stored as ``null``. Previously, storing a ``blank`` value in a field which "
"did not allow ``null`` would cause a database exception at runtime."
msgstr ""
":class:`~django.db.models.GenericIPAddressField` 现在只允许 ``blank`` 值，如"
"果也允许 ``null`` 值。如果创建一个 ``GenericIPAddressField``，允许 ``blank`` "
"但不允许 ``null``，将会触发模型验证错误，因为 ``blank`` 值总是被存储为 "
"``null``。以前，在一个不允许 ``null`` 的字段中存储一个 ``blank`` 值会在运行时"
"引发数据库异常。"

msgid ""
"If a ``NoReverseMatch`` exception is raised from a method when rendering a "
"template, it is not silenced. For example, ``{{ obj.view_href }}`` will "
"cause template rendering to fail if ``view_href()`` raises "
"``NoReverseMatch``. There is no change to the :ttag:`{% url %}<url>` tag, it "
"causes template rendering to fail like always when ``NoReverseMatch`` is "
"raised."
msgstr ""
"如果在渲染模板时从方法中引发了 ``NoReverseMatch`` 异常，它将不会被消除。例"
"如，如果 ``view_href()`` 引发了 ``NoReverseMatch``，那么 ``{{ obj."
"view_href }}`` 将导致模板渲染失败。对于 :ttag:`{% url %}<url>` 标签没有改变，"
"当引发 ``NoReverseMatch`` 时，它仍然会导致模板渲染失败。"

msgid ""
":meth:`django.test.Client.logout` now calls :meth:`django.contrib.auth."
"logout` which will send the :func:`~django.contrib.auth.signals."
"user_logged_out` signal."
msgstr ""
":meth:`django.test.Client.logout` 现在调用 :meth:`django.contrib.auth."
"logout`，它将发送 :func:`~django.contrib.auth.signals.user_logged_out` 信号。"

msgid ""
":ref:`Authentication views <built-in-auth-views>` are now reversed by name, "
"not their locations in ``django.contrib.auth.views``. If you are using the "
"views without a ``name``, you should update your ``urlpatterns`` to use "
"``django.conf.urls.url()`` with the ``name`` parameter. For example::"
msgstr ""
":ref:`身份验证视图 <built-in-auth-views>` 现在通过名称反转，而不是它们在 "
"``django.contrib.auth.views`` 中的位置。如果您在没有 ``name`` 的情况下使用这"
"些视图，您应该更新您的 ``urlpatterns`` 使用带有 ``name`` 参数的 ``django."
"conf.urls.url()``。例如："

msgid ""
":class:`~django.views.generic.base.RedirectView` now has a ``pattern_name`` "
"attribute which allows it to choose the target by reversing the URL."
msgstr ""
":class:`~django.views.generic.base.RedirectView` 现在有一个 ``pattern_name`` "
"属性，允许它通过反转 URL 来选择目标。"

msgid ""
"In Django 1.4 and 1.5, a blank string was unintentionally not considered to "
"be a valid password. This meant :meth:`~django.contrib.auth.models.User."
"set_password()` would save a blank password as an unusable password like :"
"meth:`~django.contrib.auth.models.User.set_unusable_password()` does, and "
"thus :meth:`~django.contrib.auth.models.User.check_password()` always "
"returned ``False`` for blank passwords. This has been corrected in this "
"release: blank passwords are now valid."
msgstr ""
"在 Django 1.4 和 1.5 中，空字符串无意中被认为不是有效密码。这意味着 :meth:"
"`~django.contrib.auth.models.User.set_password()` 会将空密码保存为不可用密"
"码，就像 :meth:`~django.contrib.auth.models.User.set_unusable_password()` 一"
"样，因此 :meth:`~django.contrib.auth.models.User.check_password()` 对于空密码"
"始终返回 ``False``。在此版本中已经进行了修正：空密码现在是有效的。"

msgid ""
"The admin :attr:`~django.contrib.admin.ModelAdmin.changelist_view` "
"previously accepted a ``pop`` GET parameter to signify it was to be "
"displayed in a popup. This parameter has been renamed to ``_popup`` to be "
"consistent with the rest of the admin views. You should update your custom "
"templates if they use the previous parameter name."
msgstr ""
"管理员 :attr:`~django.contrib.admin.ModelAdmin.changelist_view` 以前接受一个 "
"``pop`` GET 参数，表示它将显示在弹出窗口中。现在已将此参数重命名为 "
"``_popup``，以使其与其他管理员视图保持一致。如果您的自定义模板使用了以前的参"
"数名称，您应该进行更新。"

msgid ""
":meth:`~django.core.validators.validate_email` now accepts email addresses "
"with ``localhost`` as the domain."
msgstr ""
":meth:`~django.core.validators.validate_email` 现在接受具有 ``localhost`` 作"
"为域名的电子邮件地址。"

msgid ""
"The new :option:`makemessages --keep-pot` option prevents deleting the "
"temporary ``.pot`` file generated before creating the ``.po`` file."
msgstr ""
"新的 :option:`makemessages --keep-pot` 选项防止在创建 ``.po`` 文件之前删除生"
"成的临时 ``.pot`` 文件。"

msgid ""
"The undocumented ``django.core.servers.basehttp.WSGIServerException`` has "
"been removed. Use ``socket.error`` provided by the standard library instead. "
"This change was also released in Django 1.5.5."
msgstr ""
"未记录的 ``django.core.servers.basehttp.WSGIServerException`` 已被移除。请改"
"用标准库提供的 ``socket.error``。这个变化也在 Django 1.5.5 中发布过。"

msgid ""
"The signature of :meth:`django.views.generic.base.RedirectView."
"get_redirect_url` has changed and now accepts positional arguments as well "
"(``*args, **kwargs``). Any unnamed captured group will now be passed to "
"``get_redirect_url()`` which may result in a ``TypeError`` if you don't "
"update the signature of your custom method."
msgstr ""
":meth:`django.views.generic.base.RedirectView.get_redirect_url` 的签名已更"
"改，现在也接受位置参数（``*args, **kwargs``）。任何未命名的捕获组现在都将传递"
"给 ``get_redirect_url()``，如果您不更新自定义方法的签名，可能会导致 "
"``TypeError``。"

msgid "Features deprecated in 1.6"
msgstr "在 1.6 中被废弃的功能"

msgid "Transaction management APIs"
msgstr "事务管理的 API"

msgid ""
"Transaction management was completely overhauled in Django 1.6, and the "
"current APIs are deprecated:"
msgstr "Django 1.6 对事务管理进行了完全改进，并且当前的 API 已被弃用："

msgid "``django.middleware.transaction.TransactionMiddleware``"
msgstr "``django.middleware.transaction.TransactionMiddleware``"

msgid "``django.db.transaction.autocommit``"
msgstr "``django.db.transaction.autocommit``"

msgid "``django.db.transaction.commit_on_success``"
msgstr "``django.db.transaction.commit_on_success``"

msgid "``django.db.transaction.commit_manually``"
msgstr "``django.db.transaction.commit_manually``"

msgid "the ``TRANSACTIONS_MANAGED`` setting"
msgstr "``TRANSACTIONS_MANAGED`` 设置"

msgid "``django.contrib.comments``"
msgstr "``django.contrib.comments``"

msgid ""
"Django's comment framework has been deprecated and is no longer supported. "
"It will be available in Django 1.6 and 1.7, and removed in Django 1.8. Most "
"users will be better served with a custom solution, or a hosted product like "
"Disqus__."
msgstr ""
"Django 的评论框架已被弃用，不再受支持。它将在 Django 1.6 和 1.7 中可用，并在 "
"Django 1.8 中移除。大多数用户可以通过自定义解决方案或使用类似 Disqus 的托管产"
"品来更好地满足其需求。"

msgid ""
"The code formerly known as ``django.contrib.comments`` is `still available "
"in an external repository`__."
msgstr ""
"以前被称为 ``django.contrib.comments`` 的代码仍然可以在一个外部存储库中获得。"

msgid "Support for PostgreSQL versions older than 8.4"
msgstr "不支持早于 8.4 版本的 PostgreSQL 。"

msgid ""
"The end of upstream support periods was reached in December 2011 for "
"PostgreSQL 8.2 and in February 2013 for 8.3. As a consequence, Django 1.6 "
"sets 8.4 as the minimum PostgreSQL version it officially supports."
msgstr ""
"在 PostgreSQL 8.2 的上游支持期限于 2011 年 12 月结束，而 8.3 的上游支持期限"
"于 2013 年 2 月结束。因此，Django 1.6 将 8.4 版本设置为它正式支持的最低 "
"PostgreSQL 版本。"

msgid ""
"You're strongly encouraged to use the most recent version of PostgreSQL "
"available, because of performance improvements and to take advantage of the "
"native streaming replication available in PostgreSQL 9.x."
msgstr ""
"强烈建议您使用最新版本的可用的 PostgreSQL，以利用性能改进和 PostgreSQL 9.x 中"
"可用的原生流复制功能。"

msgid "Changes to :ttag:`cycle` and :ttag:`firstof`"
msgstr "对 :ttag:`cycle` 和 :ttag:`firstof` 的更改"

msgid ""
"The template system generally escapes all variables to avoid XSS attacks. "
"However, due to an accident of history, the :ttag:`cycle` and :ttag:"
"`firstof` tags render their arguments as-is."
msgstr ""
"模板系统通常会对所有变量进行转义，以防止 XSS 攻击。然而，由于历史原因，:ttag:"
"`cycle` 和 :ttag:`firstof` 标签会原样呈现其参数。"

msgid ""
"Django 1.6 starts a process to correct this inconsistency. The ``future`` "
"template library provides alternate implementations of :ttag:`cycle` and :"
"ttag:`firstof` that autoescape their inputs. If you're using these tags, "
"you're encouraged to include the following line at the top of your templates "
"to enable the new behavior:"
msgstr ""
"Django 1.6 开始了一个过程来纠正这个不一致性。``future`` 模板库提供了 :ttag:"
"`cycle` 和 :ttag:`firstof` 的替代实现，它们会自动转义其输入。如果您使用这些标"
"签，建议在模板顶部包含以下行以启用新的行为："

msgid "or:"
msgstr "或："

msgid ""
"The tags implementing the old behavior have been deprecated, and in Django "
"1.8, the old behavior will be replaced with the new behavior. To ensure "
"compatibility with future versions of Django, existing templates should be "
"modified to use the ``future`` versions."
msgstr ""
"实现旧行为的标签已被弃用，并且在 Django 1.8 中，旧行为将被新行为替代。为了确"
"保与未来版本的 Django 兼容，现有模板应该被修改以使用 ``future`` 版本。"

msgid ""
"If necessary, you can temporarily disable auto-escaping with :func:`~django."
"utils.safestring.mark_safe` or :ttag:`{% autoescape off %} <autoescape>`."
msgstr ""
"如有必要，您可以使用 :func:`~django.utils.safestring.mark_safe` 或 :ttag:`{% "
"autoescape off %} <autoescape>` 来暂时禁用自动转义。"

msgid "``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting"
msgstr "``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` 设置"

msgid ""
"``CacheMiddleware`` and ``UpdateCacheMiddleware`` used to provide a way to "
"cache requests only if they weren't made by a logged-in user. This mechanism "
"was largely ineffective because the middleware correctly takes into account "
"the ``Vary: Cookie`` HTTP header, and this header is being set on a variety "
"of occasions, such as:"
msgstr ""
"``CacheMiddleware`` 和 ``UpdateCacheMiddleware`` 曾经提供了一种只有在请求不是"
"由已登录用户发起时才缓存的方法。这个机制在很大程度上是无效的，因为中间件正确"
"地考虑了 ``Vary: Cookie`` HTTP 头，而这个头在各种情况下都被设置，比如："

msgid "accessing the session, or"
msgstr "访问会话，或者"

msgid "using CSRF protection, which is turned on by default, or"
msgstr "使用默认启用的 CSRF 保护，或者"

msgid ""
"using a client-side library which sets cookies, like `Google Analytics`__."
msgstr "使用客户端库设置了 cookies，比如 `Google Analytics`__。"

msgid ""
"This makes the cache effectively work on a per-session basis regardless of "
"the ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting."
msgstr ""
"这使得缓存在每个会话中都能有效地工作，而不受 "
"``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` 设置的影响。"

msgid "``SEND_BROKEN_LINK_EMAILS`` setting"
msgstr "``SEND_BROKEN_LINK_EMAILS`` 设置"

msgid ""
":class:`~django.middleware.common.CommonMiddleware` used to provide basic "
"reporting of broken links by email when ``SEND_BROKEN_LINK_EMAILS`` is set "
"to ``True``."
msgstr ""
":class:`~django.middleware.common.CommonMiddleware` 用于在 "
"``SEND_BROKEN_LINK_EMAILS`` 设置为 ``True`` 时通过电子邮件提供损坏链接的基本"
"报告。"

msgid ""
"Because of intractable ordering problems between :class:`~django.middleware."
"common.CommonMiddleware` and :class:`~django.middleware.locale."
"LocaleMiddleware`, this feature was split out into a new middleware: :class:"
"`~django.middleware.common.BrokenLinkEmailsMiddleware`."
msgstr ""
"由于 :class:`~django.middleware.common.CommonMiddleware` 和 :class:`~django."
"middleware.locale.LocaleMiddleware` 之间存在难以解决的顺序问题，因此这个功能"
"被拆分成了一个新的中间件： :class:`~django.middleware.common."
"BrokenLinkEmailsMiddleware`。"

msgid ""
"If you're relying on this feature, you should add ``'django.middleware."
"common.BrokenLinkEmailsMiddleware'`` to your ``MIDDLEWARE_CLASSES`` setting "
"and remove ``SEND_BROKEN_LINK_EMAILS`` from your settings."
msgstr ""
"如果您依赖于这个功能，应该将 ``'django.middleware.common."
"BrokenLinkEmailsMiddleware'`` 添加到您的 ``MIDDLEWARE_CLASSES`` 设置中，并从"
"您的设置中删除 ``SEND_BROKEN_LINK_EMAILS``。"

msgid "``_has_changed`` method on widgets"
msgstr "对于小部件上的 ``_has_changed`` 方法"

msgid ""
"If you defined your own form widgets and defined the ``_has_changed`` method "
"on a widget, you should now define this method on the form field itself."
msgstr ""
"如果您定义了自己的表单小部件并在小部件上定义了 ``_has_changed`` 方法，现在应"
"该在表单字段本身上定义这个方法。"

msgid "``module_name`` model _meta attribute"
msgstr "``module_name`` 模型 _meta 属性"

msgid ""
"``Model._meta.module_name`` was renamed to ``model_name``. Despite being a "
"private API, it will go through a regular deprecation path."
msgstr ""
"``Model._meta.module_name`` 已更名为 ``model_name``。尽管它是一个私有 API，但"
"它将经历常规的弃用过程。"

msgid "``get_(add|change|delete)_permission`` model _meta methods"
msgstr "``get_(add|change|delete)_permission`` 模型 _meta 方法"

msgid ""
"``Model._meta.get_(add|change|delete)_permission`` methods were deprecated. "
"Even if they were not part of the public API they'll also go through a "
"regular deprecation path. You can replace them with ``django.contrib.auth."
"get_permission_codename('action', Model._meta)`` where ``'action'`` is "
"``'add'``, ``'change'``, or ``'delete'``."
msgstr ""
"``Model._meta.get_(add|change|delete)_permission`` 方法已被弃用。即使它们不是"
"公共 API 的一部分，它们也将经历常规的弃用过程。您可以将它们替换为 ``django."
"contrib.auth.get_permission_codename('action', Model._meta)``，其中 "
"``'action'`` 是 ``'add'``、``'change'`` 或 ``'delete'``。"

msgid "``get_query_set`` and similar methods renamed to ``get_queryset``"
msgstr "``get_query_set`` 和类似的方法已重命名为 ``get_queryset``。"

msgid ""
"Methods that return a ``QuerySet`` such as ``Manager.get_query_set`` or "
"``ModelAdmin.queryset`` have been renamed to ``get_queryset``."
msgstr ""
"返回一个 ``QuerySet`` 的方法，如 ``Manager.get_query_set`` 或 ``ModelAdmin."
"queryset``，已被重命名为 ``get_queryset``。"

msgid ""
"If you are writing a library that implements, for example, a ``Manager."
"get_query_set`` method, and you need to support old Django versions, you "
"should rename the method and conditionally add an alias with the old name::"
msgstr ""
"如果您正在编写一个库，其中实现了一个例如 ``Manager.get_query_set`` 方法，并且"
"需要支持旧版本的 Django，您应该重命名该方法并有条件地添加一个具有旧名称的别"
"名："

msgid ""
"If you are writing a library that needs to call the ``get_queryset`` method "
"and must support old Django versions, you should write::"
msgstr ""
"如果您正在编写一个需要调用 ``get_queryset`` 方法并且必须支持旧版 Django 的"
"库，您应该编写："

msgid ""
"In the general case of a custom manager that both implements its own "
"``get_queryset`` method and calls that method, and needs to work with older "
"Django versions, and libraries that have not been updated yet, it is useful "
"to define a ``get_queryset_compat`` method as below and use it internally to "
"your manager::"
msgstr ""
"对于一般情况下的自定义管理器，既实现了自己的 ``get_queryset`` 方法又调用该方"
"法，并且需要与较旧版本的 Django 以及尚未更新的库一起使用，定义一个如下的 "
"``get_queryset_compat`` 方法并在管理器内部使用它是有用的："

msgid ""
"This helps to minimize the changes that are needed, but also works correctly "
"in the case of subclasses (such as ``RelatedManagers`` from Django 1.5) "
"which might override either ``get_query_set`` or ``get_queryset``."
msgstr ""
"这有助于最小化所需的更改，同时在子类（例如 Django 1.5 中的 "
"``RelatedManagers``）可能覆盖 ``get_query_set`` 或 ``get_queryset`` 的情况下"
"也能正常工作。"

msgid "``shortcut`` view and URLconf"
msgstr "``shortcut`` 视图和 URL 配置"

msgid ""
"The ``shortcut`` view was moved from ``django.views.defaults`` to ``django."
"contrib.contenttypes.views`` shortly after the 1.0 release, but the old "
"location was never deprecated. This oversight was corrected in Django 1.6 "
"and you should now use the new location."
msgstr ""
"``shortcut`` 视图在 1.0 版本发布后不久从 ``django.views.defaults`` 移动到了 "
"``django.contrib.contenttypes.views``，但旧位置从未弃用。这个疏忽在 Django "
"1.6 中得到了纠正，现在应该使用新的位置。"

msgid ""
"The URLconf ``django.conf.urls.shortcut`` was also deprecated. If you're "
"including it in an URLconf, simply replace::"
msgstr ""
"URL 配置中的 ``django.conf.urls.shortcut`` 也已被弃用。如果您在 URL 配置中包"
"含它，只需替换为："

msgid "with::"
msgstr "使用："

msgid "``ModelForm`` without ``fields`` or ``exclude``"
msgstr "没有指定 ``fields`` 或 ``exclude`` 的 ``ModelForm``"

msgid ""
"Previously, if you wanted a :class:`~django.forms.ModelForm` to use all "
"fields on the model, you could simply omit the ``Meta.fields`` attribute, "
"and all fields would be used."
msgstr ""
"以前，如果您想要一个 :class:`~django.forms.ModelForm` 使用模型上的所有字段，"
"您可以简单地省略 ``Meta.fields`` 属性，所有字段都会被使用。"

msgid ""
"This can lead to security problems where fields are added to the model and, "
"unintentionally, automatically become editable by end users. In some cases, "
"particular with boolean fields, it is possible for this problem to be "
"completely invisible. This is a form of `Mass assignment vulnerability "
"<https://en.wikipedia.org/wiki/Mass_assignment_vulnerability>`_."
msgstr ""
"这可能会导致安全问题，其中字段被添加到模型，并且无意中自动变为可由最终用户编"
"辑。在某些情况下，特别是布尔字段的情况下，这个问题可能是完全不可见的。这是一"
"种 `批量赋值漏洞 <https://en.wikipedia.org/wiki/"
"Mass_assignment_vulnerability>`_。"

msgid ""
"For this reason, this behavior is deprecated, and using the ``Meta.exclude`` "
"option is strongly discouraged. Instead, all fields that are intended for "
"inclusion in the form should be listed explicitly in the ``fields`` "
"attribute."
msgstr ""
"因此，这种行为已被弃用，并强烈不建议使用 ``Meta.exclude`` 选项。相反，应该将"
"所有打算包含在表单中的字段都明确列在 ``fields`` 属性中。"

msgid ""
"If this security concern really does not apply in your case, there is a "
"shortcut to explicitly indicate that all fields should be used - use the "
"special value ``\"__all__\"`` for the fields attribute::"
msgstr ""
"如果在您的情况下确实不适用这个安全问题，那么有一种快捷方式可以明确指示使用所"
"有字段 - 使用字段属性的特殊值 ``\"__all__\"``："

msgid ""
"If you have custom ``ModelForms`` that only need to be used in the admin, "
"there is another option. The admin has its own methods for defining fields "
"(``fieldsets`` etc.), and so adding a list of fields to the ``ModelForm`` is "
"redundant. Instead, simply omit the ``Meta`` inner class of the "
"``ModelForm``, or omit the ``Meta.model`` attribute. Since the "
"``ModelAdmin`` subclass knows which model it is for, it can add the "
"necessary attributes to derive a functioning ``ModelForm``. This behavior "
"also works for earlier Django versions."
msgstr ""
"如果您有自定义的 ``ModelForm``，只需要在管理界面中使用，还有另一种选择。管理"
"界面有自己定义字段的方法（``fieldsets`` 等），因此在 ``ModelForm`` 中添加字段"
"列表是多余的。相反，只需省略 ``ModelForm`` 的 ``Meta`` 内部类，或省略 ``Meta."
"model`` 属性。由于 ``ModelAdmin`` 子类知道它是哪个模型，它可以添加必要的属性"
"来派生一个可用的 ``ModelForm``。这种行为也适用于较早的 Django 版本。"

msgid "``UpdateView`` and ``CreateView`` without explicit fields"
msgstr "没有显式字段的 ``UpdateView`` 和 ``CreateView``"

msgid ""
"The generic views :class:`~django.views.generic.edit.CreateView` and :class:"
"`~django.views.generic.edit.UpdateView`, and anything else derived from :"
"class:`~django.views.generic.edit.ModelFormMixin`, are vulnerable to the "
"security problem described in the section above, because they can "
"automatically create a ``ModelForm`` that uses all fields for a model."
msgstr ""
"通用视图 :class:`~django.views.generic.edit.CreateView` 和 :class:`~django."
"views.generic.edit.UpdateView`，以及从 :class:`~django.views.generic.edit."
"ModelFormMixin` 派生的任何其他视图，都容易受到上面描述的安全问题的影响，因为"
"它们可以自动创建一个使用模型的所有字段的 ``ModelForm``。"

msgid ""
"For this reason, if you use these views for editing models, you must also "
"supply the ``fields`` attribute (new in Django 1.6), which is a list of "
"model fields and works in the same way as the :class:`~django.forms."
"ModelForm` ``Meta.fields`` attribute. Alternatively, you can set the "
"``form_class`` attribute to a ``ModelForm`` that explicitly defines the "
"fields to be used. Defining an ``UpdateView`` or ``CreateView`` subclass to "
"be used with a model but without an explicit list of fields is deprecated."
msgstr ""
"因此，如果您使用这些视图来编辑模型，您必须提供 ``fields`` 属性（在 Django "
"1.6 中新增），它是一个模型字段的列表，工作方式与 :class:`~django.forms."
"ModelForm` 的 ``Meta.fields`` 属性相同。或者，您可以将 ``form_class`` 属性设"
"置为明确定义要使用的字段的 ``ModelForm``。已经弃用了定义用于与模型一起使用但"
"没有显式字段列表的 ``UpdateView`` 或 ``CreateView`` 子类。"

msgid ""
"Munging of help text of model form fields for ``ManyToManyField`` fields"
msgstr "对于 ``ManyToManyField`` 字段的模型表单字段的帮助文本的调整"

msgid ""
"All special handling of the ``help_text`` attribute of ``ManyToManyField`` "
"model fields performed by standard model or model form fields as described "
"in :ref:`m2m-help_text` above is deprecated and will be removed in Django "
"1.8."
msgstr ""
"所有标准模型字段或模型表单字段对 ``ManyToManyField`` 模型字段的 "
"``help_text`` 属性执行的特殊处理，如上述 :ref:`m2m-help_text` 中描述的，已经"
"弃用，并将在 Django 1.8 中移除。"

msgid ""
"Help text of these fields will need to be handled either by applications, "
"custom form fields or widgets, just like happens with the rest of the model "
"field types."
msgstr ""
"这些字段的帮助文本需要由应用程序、自定义表单字段或小部件处理，就像其他模型字"
"段类型一样。"

msgid "Django 1.6.1 release notes"
msgstr "Django 1.6.1 版本发行说明"

msgid "*December 12, 2013*"
msgstr "*2013 年 12 月 12 日*"

msgid ""
"This is Django 1.6.1, a bugfix release for Django 1.6. In addition to the "
"bug fixes listed below, translations submitted since the 1.6 release are "
"also included."
msgstr ""
"这是 Django 1.6.1，Django 1.6 的修复版本。除了下面列出的错误修复外，还包括自 "
"1.6 版本发布以来提交的翻译。"

msgid "Bug fixes"
msgstr "错误修复"

msgid ""
"Fixed ``BCryptSHA256PasswordHasher`` with ``py-bcrypt`` and Python 3 "
"(#21398)."
msgstr ""
"修复了与 ``py-bcrypt`` 和 Python 3 一起使用的 ``BCryptSHA256PasswordHasher`` "
"（#21398）。"

msgid ""
"Fixed a regression that prevented a ``ForeignKey`` with a hidden reverse "
"manager (``related_name`` ending with '+') from being used as a lookup for "
"``prefetch_related`` (#21410)."
msgstr ""
"修复了一个回归问题，该问题阻止了具有隐藏的反向管理器（``related_name`` 以 "
"'+' 结尾）的 ``ForeignKey`` 被用作 ``prefetch_related`` 的查找条件"
"（#21410）。"

msgid ""
"Fixed :meth:`Queryset.datetimes<django.db.models.query.QuerySet.datetimes>` "
"raising ``AttributeError`` in some situations (#21432)."
msgstr ""
"修复了在某些情况下导致 :meth:`Queryset.datetimes<django.db.models.query."
"QuerySet.datetimes>` 抛出 ``AttributeError`` 的问题（#21432）。"

msgid ""
"Fixed a regression that prevented editable ``GenericRelation`` subclasses "
"from working in ``ModelForms`` (#21428)."
msgstr ""
"修复了一个回归问题，该问题阻止了可编辑的 ``GenericRelation`` 子类在 "
"``ModelForms`` 中正常工作（#21428）。"

msgid ""
"Added missing ``to_python`` method for ``ModelMultipleChoiceField`` which is "
"required in Django 1.6 to properly detect changes from initial values "
"(#21568)."
msgstr ""
"在 Django 1.6 中添加了缺失的 ``to_python`` 方法，该方法对于正确检测与初始值的"
"更改是必需的，用于 ``ModelMultipleChoiceField`` （#21568）。"

msgid ""
"Fixed ``django.contrib.humanize`` translations where the Unicode sequence "
"for the non-breaking space was returned verbatim (#21415)."
msgstr ""
"修复了 ``django.contrib.humanize`` 的翻译，其中非断开空格的 Unicode 序列被原"
"样返回的问题（#21415）。"

msgid ""
"Fixed :djadmin:`loaddata` error when fixture file name contained any dots "
"not related to file extensions (#21457) or when fixture path was relative "
"but located in a subdirectory (#21551)."
msgstr ""
"修复了在 fixture 文件名中包含与文件扩展名无关的任何点（#21457）或 fixture 路"
"径是相对路径但位于子目录中时（#21551），导致 :djadmin:`loaddata` 出现错误的问"
"题。"

msgid ""
"Fixed display of inline instances in formsets when parent has 0 for primary "
"key (#21472)."
msgstr "修复了父对象主键为 0 时，在表单集中显示内联实例的问题（ #21472 ）。"

msgid ""
"Fixed a regression where custom querysets for foreign keys were overwritten "
"if ``ModelAdmin`` had ordering set (#21405)."
msgstr ""
"修复了一个回归问题，如果 ``ModelAdmin`` 设置了排序，会覆盖外键的自定义查询集"
"的问题（#21405）。"

msgid ""
"Removed mention of a feature in the ``--locale``/``-l`` option of the "
"``makemessages`` and ``compilemessages`` commands that never worked as "
"promised: Support of multiple locale names separated by commas. It's still "
"possible to specify multiple locales in one run by using the option multiple "
"times (#21488, #17181)."
msgstr ""
"移除了 ``makemessages`` 和 ``compilemessages`` 命令的 ``--locale``/``-l`` 选"
"项中有关一个从未按承诺工作的功能的提及：支持用逗号分隔的多个语言环境名称。仍"
"然可以通过多次使用该选项来在一次运行中指定多个语言环境（#21488，#17181）。"

msgid ""
"Fixed a regression that unnecessarily triggered settings configuration when "
"importing ``get_wsgi_application`` (#21486)."
msgstr ""
"修复了一个回归问题，导入 ``get_wsgi_application`` 时不必要地触发了设置配置"
"（#21486）。"

msgid ""
"Fixed test client ``logout()`` method when using the cookie-based session "
"backend (#21448)."
msgstr ""
"修复了在使用基于 Cookie 的会话后端时，测试客户端的 ``logout()`` 方法的问题"
"（#21448）。"

msgid ""
"Fixed a crash when a ``GeometryField`` uses a non-geometric widget (#21496)."
msgstr "修复了当 ``GeometryField`` 使用非几何小部件时的崩溃问题（#21496）。"

msgid "Fixed password hash upgrade when changing the iteration count (#21535)."
msgstr "修复了更改迭代次数时密码哈希升级的问题（ #21535 ）。"

msgid ""
"Fixed a bug in the debug view when the URLconf only contains one element "
"(#21530)."
msgstr "修复了调试视图中的一个错误，当 URL 配置仅包含一个元素时（ #21530 ）。"

msgid ""
"Re-added missing search result count and reset link in changelist admin view "
"(#21510)."
msgstr ""
"在 changelist 管理员视图中重新添加了丢失的搜索结果计数和重置链接"
"（ #21510 ）。"

msgid ""
"The current language is no longer saved to the session by "
"``LocaleMiddleware`` on every response, but rather only after a logout "
"(#21473)."
msgstr ""
"``LocaleMiddleware`` 不再在每个响应中保存当前语言到会话中，而是仅在注销后保存"
"（#21473）。"

msgid ""
"Fixed a crash when executing ``runserver`` on non-English systems and when "
"the formatted date in its output contained non-ASCII characters (#21358)."
msgstr ""
"修复了在非英语系统上执行 ``runserver`` 时，以及其输出中的格式化日期包含非"
"ASCII字符时的崩溃问题（#21358）。"

msgid ""
"Fixed a crash in the debug view after an exception occurred on Python ≥ 3.3 "
"(#21443)."
msgstr "修复了在 Python ≥ 3.3 上发生异常后调试视图崩溃的问题（ #21443 ）。"

msgid ""
"Fixed a crash in :class:`~django.db.models.ImageField` on some platforms "
"(Homebrew and RHEL6 reported) (#21355)."
msgstr ""
"在一些平台上修复了 :class:`~django.db.models.ImageField` 的崩溃问题（报告了 "
"Homebrew 和 RHEL6）（#21355）。"

msgid ""
"Fixed a regression when using generic relations in ``ModelAdmin."
"list_filter`` (#21431)."
msgstr ""
"修复了在 ``ModelAdmin.list_filter`` 中使用通用关系时的回归问题（#21431）。"

msgid "Django 1.6.10 release notes"
msgstr "Django 1.6.10 版本发行说明"

msgid "Django 1.6.10 fixes several security issues in 1.6.9."
msgstr "Django 1.6.10 修复了 1.6.9 版本中的多个安全问题。"

msgid "Database denial-of-service with ``ModelMultipleChoiceField``"
msgstr "使用 ``ModelMultipleChoiceField`` 存在数据库拒绝服务漏洞"

msgid ""
"Given a form that uses ``ModelMultipleChoiceField`` and "
"``show_hidden_initial=True`` (not a documented API), it was possible for a "
"user to cause an unreasonable number of SQL queries by submitting duplicate "
"values for the field's data. The validation logic in "
"``ModelMultipleChoiceField`` now deduplicates submitted values to address "
"this issue."
msgstr ""
"针对使用 ``ModelMultipleChoiceField`` 并且使用 ``show_hidden_initial=True`` "
"的表单（这不是文档化的 API）可能会导致用户通过提交字段数据的重复值来引发不合"
"理数量的 SQL 查询。``ModelMultipleChoiceField`` 中的验证逻辑现在会去重提交的"
"值，以解决这个问题。"

msgid "Django 1.6.11 release notes"
msgstr "Django 1.6.11 版本发行说明"

msgid "Django 1.6.11 fixes two security issues in 1.6.10."
msgstr "Django 1.6.11 修复了 1.6.10 版本中的两个安全问题。"

msgid "Denial-of-service possibility with ``strip_tags()``"
msgstr "``strip_tags()`` 存在拒绝服务的可能性"

msgid ""
"Last year :func:`~django.utils.html.strip_tags`  was changed to work "
"iteratively. The problem is that the size of the input it's processing can "
"increase on each iteration which results in an infinite loop in "
"``strip_tags()``. This issue only affects versions of Python that haven't "
"received :bpo:`a bugfix in HTMLParser <20288>`; namely Python < 2.7.7 and "
"3.3.5. Some operating system vendors have also backported the fix for the "
"Python bug into their packages of earlier versions."
msgstr ""
"去年 :func:`~django.utils.html.strip_tags` 被更改为迭代工作。问题在于它处理的"
"输入大小可能在每次迭代中增加，这导致了 ``strip_tags()`` 中的无限循环。这个问"
"题只影响那些没有收到 :bpo:`HTMLParser 中的 bug 修复 <20288>` 的 Python 版本，"
"具体来说是 Python < 2.7.7 和 3.3.5。一些操作系统供应商也已经将修复 Python "
"bug 的补丁合并到了早期版本的软件包中。"

msgid ""
"To remedy this issue, ``strip_tags()`` will now return the original input if "
"it detects the length of the string it's processing increases. Remember that "
"absolutely NO guarantee is provided about the results of ``strip_tags()`` "
"being HTML safe. So NEVER mark safe the result of a ``strip_tags()`` call "
"without escaping it first, for example with :func:`~django.utils.html."
"escape`."
msgstr ""
"为了解决这个问题，如果 ``strip_tags()`` 检测到正在处理的字符串长度增加，它将"
"返回原始输入。请记住，关于 ``strip_tags()`` 的结果是否安全的 HTML 没有提供任"
"何保证。因此，在标记 ``strip_tags()`` 调用的结果为安全 HTML 之前，绝对不要忘"
"记首先进行转义，例如使用 :func:`~django.utils.html.escape`。"

msgid "Django 1.6.2 release notes"
msgstr "Django 1.6.2 版本发行说明"

msgid "*February 6, 2014*"
msgstr "*2014 年 2 月 6 日*"

msgid ""
"This is Django 1.6.2, a bugfix release for Django 1.6. Django 1.6.2 fixes "
"several bugs in 1.6.1:"
msgstr ""
"这是 Django 1.6.2，是 Django 1.6 的修复版本。 Django 1.6.2 修复了 1.6.1 版本"
"中的一些错误："

msgid ""
"Prevented the base geometry object of a prepared geometry to be garbage "
"collected, which could lead to crash Django (:ticket:`21662`)."
msgstr ""
"防止了准备好的几何对象的基础几何对象被垃圾回收，这可能导致 Django 崩溃（:"
"ticket:`21662`）。"

msgid ""
"Fixed a crash when executing the :djadmin:`changepassword` command when the "
"user object representation contained non-ASCII characters (:ticket:`21627`)."
msgstr ""
"修复了在执行 :djadmin:`changepassword` 命令时，当用户对象的表示包含非 ASCII "
"字符时导致崩溃的问题（:ticket:`21627`）。"

msgid ""
"The :djadmin:`collectstatic` command will raise an error rather than default "
"to using the current working directory if :setting:`STATIC_ROOT` is not set. "
"Combined with the ``--clear`` option, the previous behavior could wipe "
"anything below the current working directory (:ticket:`21581`)."
msgstr ""
"如果未设置 :setting:`STATIC_ROOT`，:djadmin:`collectstatic` 命令将引发错误，"
"而不是默认使用当前工作目录。与 ``--clear`` 选项结合使用时，之前的行为可能会删"
"除当前工作目录下的任何内容（:ticket:`21581`）。"

msgid "Fixed mail encoding on Python 3.3.3+ (:ticket:`21093`)."
msgstr "在 Python 3.3.3+ 中修复了邮件编码问题（:ticket:`21093`）。"

msgid ""
"Fixed an issue where when ``settings.DATABASES['default']['AUTOCOMMIT'] = "
"False``, the connection wasn't in autocommit mode but Django pretended it "
"was."
msgstr ""
"修复了一个问题，当 ``settings.DATABASES['default']['AUTOCOMMIT'] = False`` "
"时，连接不处于自动提交模式，但 Django 假装它是的问题。"

msgid ""
"Fixed a regression in multiple-table inheritance ``exclude()`` queries (:"
"ticket:`21787`)."
msgstr "修复了多表继承中的 ``exclude()`` 查询的回归问题（:ticket:`21787`）。"

msgid ""
"Added missing items to ``django.utils.timezone.__all__`` (:ticket:`21880`)."
msgstr ""
"向 ``django.utils.timezone.__all__`` 添加了缺失的项（:ticket:`21880`）。"

msgid ""
"Fixed a field misalignment issue with ``select_related()`` and model "
"inheritance (:ticket:`21413`)."
msgstr ""
"修复了 ``select_related()`` 和模型继承中的字段不对齐问题（:ticket:`21413`）。"

msgid "Fixed join promotion for negated ``AND`` conditions (:ticket:`21748`)."
msgstr "修复了对否定的 ``AND`` 条件的联接提升问题（:ticket:`21748`）。"

msgid ""
"Oracle database introspection now works with boolean and float fields (:"
"ticket:`19884`)."
msgstr ""
"Oracle数据库的内省现在可以正常处理布尔和浮点字段了（:ticket:`19884`）。"

msgid ""
"Fixed an issue where lazy objects weren't actually marked as safe when "
"passed through :func:`~django.utils.safestring.mark_safe` and could end up "
"being double-escaped (:ticket:`21882`)."
msgstr ""
"修复了一种情况，其中通过 :func:`~django.utils.safestring.mark_safe` 传递的惰"
"性对象实际上没有被标记为安全，可能最终会被双重转义（:ticket:`21882`）。"

msgid ""
"Additionally, Django's vendored version of six, ``django.utils.six`` has "
"been upgraded to the latest release (1.5.2)."
msgstr ""
"此外，Django 内部的 six 版本，即 ``django.utils.six``，已升级到最新版本"
"（1.5.2）。"

msgid "Django 1.6.3 release notes"
msgstr "Django 1.6.3 版本发行说明"

msgid ""
"Django 1.6.3 fixes several bugs in 1.6.2, including three security issues, "
"and makes one backwards-incompatible change:"
msgstr ""
"Django 1.6.3 修复了 1.6.2 版本中的一些错误，包括三个安全问题，并进行了一个不"
"兼容的变更："

msgid "``select_for_update()`` requires a transaction"
msgstr "``select_for_update()`` 需要在事务中使用"

msgid ""
"Historically, queries that use :meth:`~django.db.models.query.QuerySet."
"select_for_update()` could be executed in autocommit mode, outside of a "
"transaction. Before Django 1.6, Django's automatic transactions mode allowed "
"this to be used to lock records until the next write operation. Django 1.6 "
"introduced database-level autocommit; since then, execution in such a "
"context voids the effect of ``select_for_update()``. It is, therefore, "
"assumed now to be an error and raises an exception."
msgstr ""
"在历史上，使用 :meth:`~django.db.models.query.QuerySet.select_for_update()` "
"的查询可以在自动提交模式下，在事务之外执行。在 Django 1.6 之前，Django 的自动"
"事务模式允许使用这种方式锁定记录，直到下一次写操作。Django 1.6 引入了数据库级"
"别的自动提交；自那时起，在这种上下文中执行将取消 ``select_for_update()`` 的效"
"果。因此，现在假定这是一个错误并引发异常。"

msgid ""
"This change was made because such errors can be caused by including an app "
"which expects global transactions (e.g. :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` set to ``True``), or Django's old autocommit behavior, in "
"a project which runs without them; and further, such errors may manifest as "
"data-corruption bugs."
msgstr ""
"这个更改是因为这样的错误可能是因为在不需要全局事务（例如，:setting:"
"`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` 设置为 ``True``）或 Django 的旧"
"的自动提交行为的项目中包含一个期望全局事务的应用程序引起的；而且，这样的错误"
"可能会表现为数据损坏的错误。"

msgid ""
"This change may cause test failures if you use ``select_for_update()`` in a "
"test class which is a subclass of :class:`~django.test.TransactionTestCase` "
"rather than :class:`~django.test.TestCase`."
msgstr ""
"如果您在测试类中使用 ``select_for_update()`` 并且该测试类是 :class:`~django."
"test.TransactionTestCase` 的子类而不是 :class:`~django.test.TestCase`，则此更"
"改可能导致测试失败。"

msgid ""
"Content retrieved from the GeoIP library is now properly decoded from its "
"default ``iso-8859-1`` encoding (:ticket:`21996`)."
msgstr ""
"从 GeoIP 库检索的内容现在已经正确解码为其默认的 ``iso-8859-1`` 编码（:ticket:"
"`21996`）。"

msgid ""
"Fixed ``AttributeError`` when using :meth:`~django.db.models.query.QuerySet."
"bulk_create` with ``ForeignObject`` (:ticket:`21566`)."
msgstr ""
"在使用 :meth:`~django.db.models.query.QuerySet.bulk_create` 与 "
"``ForeignObject`` 时，修复了 ``AttributeError`` 错误（:ticket:`21566`）。"

msgid ""
"Fixed crash of ``QuerySet``\\s that use ``F() + timedelta()`` when their "
"query was compiled more once (:ticket:`21643`)."
msgstr ""
"修复了在查询编译多次时，使用 ``F() + timedelta()`` 的 ``QuerySet`` 引发崩溃的"
"问题（:ticket:`21643`）。"

msgid ""
"Prevented custom ``widget`` class attribute of :class:`~django.forms."
"IntegerField` subclasses from being overwritten by the code in their "
"``__init__`` method (:ticket:`22245`)."
msgstr ""
"防止了 :class:`~django.forms.IntegerField` 子类的自定义 ``widget`` 类属性被"
"其 ``__init__`` 方法中的代码覆盖的问题（:ticket:`22245`）。"

msgid ""
"Improved :func:`~django.utils.html.strip_tags` accuracy (but it still cannot "
"guarantee an HTML-safe result, as stated in the documentation)."
msgstr ""
"提高了 :func:`~django.utils.html.strip_tags` 的准确性（但如文档中所述，它仍然"
"不能保证产生 HTML 安全的结果）。"

msgid ""
"Fixed a regression in the :mod:`django.contrib.gis` SQL compiler for non-"
"concrete fields (:ticket:`22250`)."
msgstr ""
"修复了 :mod:`django.contrib.gis` 中 SQL 编译器的回归问题，针对非具体字段（:"
"ticket:`22250`）。"

msgid ""
"Fixed :attr:`ModelAdmin.preserve_filters <django.contrib.admin.ModelAdmin."
"preserve_filters>` when running a site with a URL prefix (:ticket:`21795`)."
msgstr ""
"在带有 URL 前缀的站点中运行时修复了 :attr:`ModelAdmin.preserve_filters "
"<django.contrib.admin.ModelAdmin.preserve_filters>` （:ticket:`21795`）。"

msgid ""
"Fixed a crash in the ``find_command`` management utility when the ``PATH`` "
"environment variable wasn't set (:ticket:`22256`)."
msgstr ""
"修复了在没有设置 ``PATH`` 环境变量时管理实用程序中的 ``find_command`` 引发的"
"崩溃（:ticket:`22256`）。"

msgid "Fixed :djadmin:`changepassword` on Windows (:ticket:`22364`)."
msgstr "在 Windows 上修复了 :djadmin:`changepassword` （:ticket:`22364`）。"

msgid "Avoided shadowing deadlock exceptions on MySQL (:ticket:`22291`)."
msgstr "避免在 MySQL 上遮蔽死锁异常（:ticket:`22291`）。"

msgid "Wrapped database exceptions in ``_set_autocommit`` (:ticket:`22321`)."
msgstr "在 ``_set_autocommit`` 中包装数据库异常（:ticket:`22321`）。"

msgid ""
"Fixed atomicity when closing a database connection or when the database "
"server disconnects (:ticket:`21239` and :ticket:`21202`)"
msgstr ""
"修复了在关闭数据库连接或数据库服务器断开连接时的原子性问题（:ticket:`21239` "
"和 :ticket:`21202`）。"

msgid ""
"Fixed regression in ``prefetch_related`` that caused the related objects "
"query to include an unnecessary join (:ticket:`21760`)."
msgstr ""
"修复了 ``prefetch_related`` 中的回归问题，导致相关对象查询包括不必要的连接（:"
"ticket:`21760`）。"

msgid ""
"Additionally, Django's vendored version of six, ``django.utils.six`` has "
"been upgraded to the latest release (1.6.1)."
msgstr ""
"此外，Django 内部的 six 版本，即 ``django.utils.six``，已升级到最新版本"
"（1.6.1）。"

msgid "Django 1.6.4 release notes"
msgstr "Django 1.6.4 版本发行说明"

msgid "Django 1.6.4 fixes several bugs in 1.6.3."
msgstr "Django 1.6.4 修复了 1.6.3 版本中的一些错误。"

msgid ""
"Added backwards compatibility support for the :mod:`django.contrib.messages` "
"cookie format of Django 1.4 and earlier to facilitate upgrading to 1.6 from "
"1.4 (:ticket:`22426`)."
msgstr ""
"为了便于从 Django 1.4 升级到 1.6，添加了对 Django 1.4 及更早版本的 :mod:"
"`django.contrib.messages` 的 cookie 格式的向后兼容支持（:ticket:`22426`）。"

msgid ""
"Fixed the ``object_id`` of the ``LogEntry`` that's created after a user "
"password change in the admin (:ticket:`22515`)."
msgstr ""
"修复了在管理员更改用户密码后创建的 ``LogEntry`` 的 ``object_id`` （:ticket:"
"`22515`）。"

msgid "Django 1.6.5 release notes"
msgstr "Django 1.6.5 版本发行说明"

msgid "Django 1.6.5 fixes two security issues and several bugs in 1.6.4."
msgstr "Django 1.6.5 修复了 1.6.4 版本中的两个安全问题和一些错误。"

msgid ""
"Issue: Caches may incorrectly be allowed to store and serve private data"
msgstr "问题：缓存可能会错误地被允许存储和提供私密数据。"

msgid "Issue: Malformed redirect URLs from user input not correctly validated"
msgstr "问题：未正确验证来自用户输入的格式错误的重定向 URL 。"

msgid ""
"Made the ``year_lookup_bounds_for_datetime_field`` Oracle backend method "
"Python 3 compatible (:ticket:`22551`)."
msgstr ""
"使 Oracle 后端的 ``year_lookup_bounds_for_datetime_field`` 方法兼容 Python 3"
"（:ticket:`22551`）。"

msgid ""
"Fixed ``pgettext_lazy`` crash when receiving bytestring content on Python 2 "
"(:ticket:`22565`)."
msgstr ""
"修复了在 Python 2 上接收字节串内容时导致 ``pgettext_lazy`` 崩溃的问题（:"
"ticket:`22565`）。"

msgid ""
"Fixed the SQL generated when filtering by a negated ``Q`` object that "
"contains a ``F`` object. (:ticket:`22429`)."
msgstr ""
"修复了在筛选中包含一个 ``F`` 对象的否定 ``Q`` 对象时生成的 SQL（:ticket:"
"`22429`）。"

msgid ""
"Avoided overwriting data fetched by ``select_related()`` in certain cases "
"which could cause minor performance regressions (:ticket:`22508`)."
msgstr ""
"在某些情况下避免覆盖由 ``select_related()`` 获取的数据，这可能会导致轻微的性"
"能回退（:ticket:`22508`）。"

msgid "Django 1.6.6 release notes"
msgstr "Django 1.6.6 版本发行说明"

msgid "Django 1.6.6 fixes several security issues and bugs in 1.6.5."
msgstr "Django 1.6.6 修复了 1.6.5 中的几个安全问题和错误。"

msgid ""
"In older versions of Django it was possible to reveal any field's data by "
"modifying the \"popup\" and \"to_field\" parameters of the query string on "
"an admin change form page. For example, requesting a URL like ``/admin/auth/"
"user/?_popup=1&t=password`` and viewing the page's HTML allowed viewing the "
"password hash of each user. While the admin requires users to have "
"permissions to view the change form pages in the first place, this could "
"leak data if you rely on users having access to view only certain fields on "
"a model."
msgstr ""
"在较早的 Django 版本中，可以通过修改查询字符串上的 \"popup\" 和 \"to_field\" "
"参数来显示任何字段的数据，这可以在管理界面的更改表单页面上完成。例如，请求类"
"似于 ``/admin/auth/user/?_popup=1&t=password`` 的 URL 并查看页面的 HTML 允许"
"查看每个用户的密码哈希。尽管管理员要求用户首先具有查看更改表单页面的权限，但"
"如果您依赖用户只能访问模型上的某些字段，这可能会泄露数据。"

msgid ""
"Corrected email and URL validation to reject a trailing dash (:ticket:"
"`22579`)."
msgstr "修正了电子邮件和 URL 验证，以拒绝结尾的连字符（:ticket:`22579`）。"

msgid "Prevented indexes on PostgreSQL virtual fields (:ticket:`22514`)."
msgstr "阻止在 PostgreSQL 虚拟字段上创建索引（:ticket:`22514`）。"

msgid ""
"Prevented edge case where values of FK fields could be initialized with a "
"wrong value when an inline model formset is created for a relationship "
"defined to point to a field other than the PK (:ticket:`13794`)."
msgstr ""
"防止在创建内联模型表单集时出现一个边缘情况，该情况下，FK 字段的值可能会被初始"
"化为错误的值，当关系定义为指向非 PK 字段时（:ticket:`13794`）。"

msgid ""
"Restored ``pre_delete``  signals for ``GenericRelation`` cascade deletion (:"
"ticket:`22998`)."
msgstr ""
"恢复了 ``GenericRelation`` 级联删除的 ``pre_delete`` 信号（:ticket:"
"`22998`）。"

msgid ""
"Fixed transaction handling when specifying non-default database in "
"``createcachetable`` and ``flush`` (:ticket:`23089`)."
msgstr ""
"在指定非默认数据库时修复了在 ``createcachetable`` 和 ``flush`` 中的事务处理"
"（:ticket:`23089`）。"

msgid ""
"Fixed the \"ORA-01843: not a valid month\" errors when using Unicode with "
"older versions of Oracle server (:ticket:`20292`)."
msgstr ""
"修复了在使用 Unicode 与旧版本的 Oracle 服务器时出现的 \"ORA-01843: not a "
"valid month\" 错误（:ticket:`20292`）。"

msgid ""
"Restored bug fix for sending Unicode email with Python 2.6.5 and below (:"
"ticket:`19107`)."
msgstr ""
"恢复了在 Python 2.6.5 及以下版本中发送 Unicode 电子邮件的错误修复（:ticket:"
"`19107`）。"

msgid ""
"Prevented ``UnicodeDecodeError`` in ``runserver`` with non-UTF-8 and non-"
"English locale (:ticket:`23265`)."
msgstr ""
"防止了在非 UTF-8 和非英语区域设置中的 ``runserver`` 中发生 "
"``UnicodeDecodeError`` （:ticket:`23265`）。"

msgid ""
"Fixed JavaScript errors while editing multi-geometry objects in the "
"OpenLayers widget (:ticket:`23137`, :ticket:`23293`)."
msgstr ""
"修复了在 OpenLayers 小部件中编辑多几何对象时出现的 JavaScript 错误（:ticket:"
"`23137`, :ticket:`23293`）。"

msgid ""
"Prevented a crash on Python 3 with query strings containing unencoded non-"
"ASCII characters (:ticket:`22996`)."
msgstr ""
"防止了在 Python 3 中出现包含未编码的非 ASCII 字符的查询字符串时的崩溃（:"
"ticket:`22996`）。"

msgid "Django 1.6.7 release notes"
msgstr "Django 1.6.7 版本发行说明"

msgid ""
"Django 1.6.7 fixes several bugs in 1.6.6, including a regression related to "
"a security fix in that release."
msgstr ""
"Django 1.6.7 修复了 1.6.6 中的几个错误，包括与该版本中的安全修复相关的一个回"
"归问题。"

msgid ""
"Allowed inherited and m2m fields to be referenced in the admin (:ticket:"
"`23329`)."
msgstr "允许在管理员中引用继承和多对多字段（:ticket:`23329`）。"

msgid ""
"Fixed a crash when using ``QuerySet.defer()`` with ``select_related()`` (:"
"ticket:`23370`)."
msgstr ""
"修复了在使用 ``QuerySet.defer()`` 与 ``select_related()`` 时出现崩溃的问题（:"
"ticket:`23370`）。"

msgid "Django 1.6.8 release notes"
msgstr "Django 1.6.8 版本发行说明"

msgid "Django 1.6.8 fixes a couple regressions in the 1.6.6 security release."
msgstr "Django 1.6.8 修复了 1.6.6 安全发布中的几个回归问题。"

msgid "Django 1.6.9 release notes"
msgstr "Django 1.6.9 版本发行说明"

msgid "Django 1.6.9 fixes a regression in the 1.6.6 security release."
msgstr "Django 1.6.9 修复了 1.6.6 安全发布中的一个回归问题。"

msgid "Django 1.7 release notes"
msgstr "Django 1.7 版本发行说明"

msgid "Welcome to Django 1.7!"
msgstr "欢迎使用 Django 1.7 ！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-1.7>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.7>` "
"you'll want to be aware of when upgrading from Django 1.6 or older versions. "
"We've :ref:`begun the deprecation process for some features <deprecated-"
"features-1.7>`, and some features have reached the end of their deprecation "
"process and :ref:`have been removed <removed-features-1.7>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-1.7>`，以及在从 Django 1.6 或更旧"
"版本升级时需要注意的一些 :ref:`不兼容的变更 <backwards-incompatible-1.7>`。我"
"们已经 :ref:`开始了一些功能的弃用过程 <deprecated-features-1.7>`，并且一些功"
"能已经完成了其弃用过程，已经 :ref:`被移除 <removed-features-1.7>`。"

msgid ""
"Django 1.7 requires Python 2.7, 3.2, 3.3, or 3.4. We **highly recommend** "
"and only officially support the latest release of each series."
msgstr ""
"Django 1.7 需要 Python 2.7、3.2、3.3 或 3.4。我们 **强烈建议** 并且只官方支持"
"每个系列的最新版本。"

msgid ""
"The Django 1.6 series is the last to support Python 2.6. Django 1.7 is the "
"first release to support Python 3.4."
msgstr ""
"Django 1.6 系列是最后一个支持 Python 2.6 的版本。 Django 1.7 是第一个支持 "
"Python 3.4 的版本。"

msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.7 or newer as their "
"default version. If you're still using Python 2.6, however, you'll need to "
"stick to Django 1.6 until you can upgrade your Python version. Per :doc:`our "
"support policy </internals/release-process>`, Django 1.6 will continue to "
"receive security support until the release of Django 1.8."
msgstr ""
"这个改变应该只影响少数 Django 用户，因为大多数操作系统供应商现在都将 Python "
"2.7 或更新版本作为默认版本发布。然而，如果您仍在使用 Python 2.6，那么您需要继"
"续使用 Django 1.6，直到您可以升级您的 Python 版本。根据 :doc:`我们的支持政策 "
"</internals/release-process>`，Django 1.6 将继续获得安全支持，直到 Django "
"1.8 发布为止。"

msgid "What's new in Django 1.7"
msgstr "Django 1.7 的新特性包括："

msgid "Schema migrations"
msgstr "模式迁移"

msgid ""
"Django now has built-in support for schema migrations. It allows models to "
"be updated, changed, and deleted by creating migration files that represent "
"the model changes and which can be run on any development, staging or "
"production database."
msgstr ""
"Django 现在内置了对模式迁移的支持。它允许通过创建迁移文件来更新、修改和删除模"
"型，这些迁移文件代表了模型的变更，可以在任何开发、暂存或生产数据库上运行。"

msgid ""
"Migrations are covered in :doc:`their own documentation</topics/"
"migrations>`, but a few of the key features are:"
msgstr ""
"迁移在 :doc:`自己的文档中 </topics/migrations>` 中有详细的介绍，但其中一些关"
"键特性包括："

msgid ""
"``syncdb`` has been deprecated and replaced by ``migrate``. Don't worry - "
"calls to ``syncdb`` will still work as before."
msgstr ""
"``syncdb`` 已经被弃用，被 ``migrate`` 取代。不用担心 - 对 ``syncdb`` 的调用仍"
"然会像以前一样工作。"

msgid ""
"A new ``makemigrations`` command provides an easy way to autodetect changes "
"to your models and make migrations for them."
msgstr ""
"新的 ``makemigrations`` 命令提供了一种自动检测模型更改并为其创建迁移的简便方"
"法。"

msgid ""
"``django.db.models.signals.pre_syncdb`` and ``django.db.models.signals."
"post_syncdb`` have been deprecated, to be replaced by :data:`~django.db."
"models.signals.pre_migrate` and :data:`~django.db.models.signals."
"post_migrate` respectively. These new signals have slightly different "
"arguments. Check the documentation for details."
msgstr ""
"``django.db.models.signals.pre_syncdb`` 和 ``django.db.models.signals."
"post_syncdb`` 已经被弃用，分别由 :data:`~django.db.models.signals."
"pre_migrate` 和 :data:`~django.db.models.signals.post_migrate` 取代。这些新信"
"号具有稍微不同的参数。请查阅文档以获取详细信息。"

msgid ""
"The ``allow_syncdb`` method on database routers is now called "
"``allow_migrate``, but still performs the same function. Routers with "
"``allow_syncdb`` methods will still work, but that method name is deprecated "
"and you should change it as soon as possible (nothing more than renaming is "
"required)."
msgstr ""
"数据库路由器上的 ``allow_syncdb`` 方法现在被称为 ``allow_migrate``，但仍然执"
"行相同的功能。具有 ``allow_syncdb`` 方法的路由器仍然可以工作，但该方法名称已"
"被弃用，您应尽快更改它（只需要重命名即可）。"

msgid ""
"``initial_data`` fixtures are no longer loaded for apps with migrations; if "
"you want to load initial data for an app, we suggest you create a migration "
"for your application and define a :class:`~django.db.migrations.operations."
"RunPython` or :class:`~django.db.migrations.operations.RunSQL` operation in "
"the ``operations`` section of the migration."
msgstr ""
"不再为具有迁移的应用程序加载 ``initial_data`` fixture；如果您想为应用程序加载"
"初始数据，建议您为应用程序创建一个迁移，并在迁移的 ``operations`` 部分中定义"
"一个 :class:`~django.db.migrations.operations.RunPython` 或 :class:`~django."
"db.migrations.operations.RunSQL` 操作。"

msgid ""
"Test rollback behavior is different for apps with migrations; in particular, "
"Django will no longer emulate rollbacks on non-transactional databases or "
"inside ``TransactionTestCase`` :ref:`unless specifically requested <test-"
"case-serialized-rollback>`."
msgstr ""
"对于具有迁移的应用程序，测试回滚行为会有所不同；特别是，Django 不再在非事务性"
"数据库上或 ``TransactionTestCase`` 内模拟回滚，除非明确请求（:ref:`除非明确请"
"求 <test-case-serialized-rollback>`）。"

msgid ""
"It is not advised to have apps without migrations depend on (have a :class:"
"`~django.db.models.ForeignKey` or :class:`~django.db.models.ManyToManyField` "
"to) apps with migrations."
msgstr ""
"不建议没有迁移的应用程序依赖于（具有 :class:`~django.db.models.ForeignKey` "
"或 :class:`~django.db.models.ManyToManyField` 的）具有迁移的应用程序。"

msgid "App-loading refactor"
msgstr "应用加载重构"

msgid ""
"Historically, Django applications were tightly linked to models. A singleton "
"known as the \"app cache\" dealt with both installed applications and "
"models. The models module was used as an identifier for applications in many "
"APIs."
msgstr ""
"在过去，Django 应用与模型紧密耦合。一个名为 \"应用缓存\" 的单例处理已安装的应"
"用和模型。许多 API 中使用模型模块作为应用的标识符。"

msgid ""
"As the concept of :doc:`Django applications </ref/applications>` matured, "
"this code showed some shortcomings. It has been refactored into an \"app "
"registry\" where models modules no longer have a central role and where it's "
"possible to attach configuration data to applications."
msgstr ""
"随着 :doc:`Django 应用程序 </ref/applications>` 概念的成熟，这段代码显示出了"
"一些不足之处。它已经被重构为一个 \"应用程序注册表\"，在这里模型模块不再起到核"
"心作用，同时可以将配置数据附加到应用程序。"

msgid "Improvements thus far include:"
msgstr "迄今为止的改进包括："

msgid ""
"Applications can run code at startup, before Django does anything else, with "
"the :meth:`~django.apps.AppConfig.ready` method of their configuration."
msgstr ""
"应用程序可以在启动时运行代码，在 Django 执行任何其他操作之前，使用其配置的 :"
"meth:`~django.apps.AppConfig.ready` 方法。"

msgid ""
"Application labels are assigned correctly to models even when they're "
"defined outside of ``models.py``. You don't have to set :attr:`~django.db."
"models.Options.app_label` explicitly any more."
msgstr ""
"即使在 ``models.py`` 之外定义模型，应用程序标签也会被正确地分配给模型。您不再"
"需要显式设置 :attr:`~django.db.models.Options.app_label`。"

msgid ""
"It is possible to omit ``models.py`` entirely if an application doesn't have "
"any models."
msgstr "如果一个应用程序没有任何模型，完全可以省略 ``models.py``。"

msgid ""
"Applications can be relabeled with the :attr:`~django.apps.AppConfig.label` "
"attribute of application configurations, to work around label conflicts."
msgstr ""
"可以使用应用程序配置的 :attr:`~django.apps.AppConfig.label` 属性重新标记应用"
"程序，以解决标签冲突。"

msgid ""
"The name of applications can be customized in the admin with the :attr:"
"`~django.apps.AppConfig.verbose_name` of application configurations."
msgstr ""
"可以使用应用程序配置的 :attr:`~django.apps.AppConfig.verbose_name` 来自定义在"
"管理员界面中的应用程序名称。"

msgid ""
"The admin automatically calls :func:`~django.contrib.admin.autodiscover()` "
"when Django starts. You can consequently remove this line from your URLconf."
msgstr ""
"管理员界面在 Django 启动时会自动调用 :func:`~django.contrib.admin."
"autodiscover()`。因此，您可以从您的 URL 配置中删除这行代码。"

msgid ""
"Django imports all application configurations and models as soon as it "
"starts, through a deterministic and straightforward process. This should "
"make it easier to diagnose import issues such as import loops."
msgstr ""
"Django 在启动时通过一种确定性且简单的过程导入所有应用程序配置和模型。这将使诊"
"断导入问题（如导入循环）变得更容易。"

msgid "New method on Field subclasses"
msgstr "Field 子类的新方法"

msgid ""
"To help power both schema migrations and to enable easier addition of "
"composite keys in future releases of Django, the :class:`~django.db.models."
"Field` API now has a new required method: ``deconstruct()``."
msgstr ""
"为了支持模式迁移并使未来版本的 Django 更容易添加复合键，:class:`~django.db."
"models.Field` API 现在有一个新的必需方法：``deconstruct()``。"

msgid "This method takes no arguments, and returns a tuple of four items:"
msgstr "该方法不接受任何参数，并返回一个包含四个元素的元组："

msgid ""
"``name``: The field's attribute name on its parent model, or ``None`` if it "
"is not part of a model"
msgstr ""
"``name``：字段在其父模型上的属性名称，如果它不是模型的一部分，则为 ``None``。"

msgid ""
"``path``: A dotted, Python path to the class of this field, including the "
"class name."
msgstr "``path``：字段类的点分隔的 Python 路径，包括类名。"

msgid "``args``: Positional arguments, as a list"
msgstr "``args``：作为列表的位置参数。"

msgid "``kwargs``: Keyword arguments, as a dict"
msgstr "``kwargs``：作为字典的关键字参数。"

msgid ""
"These four values allow any field to be serialized into a file, as well as "
"allowing the field to be copied safely, both essential parts of these new "
"features."
msgstr ""
"这四个值允许将任何字段序列化到文件中，并且允许字段进行安全复制，这是这些新功"
"能的重要组成部分。"

msgid ""
"This change should not affect you unless you write custom Field subclasses; "
"if you do, you may need to reimplement the ``deconstruct()`` method if your "
"subclass changes the method signature of ``__init__`` in any way. If your "
"field just inherits from a built-in Django field and doesn't override "
"``__init__``, no changes are necessary."
msgstr ""
"这个变化不会影响您，除非您编写自定义的 Field 子类；如果您这样做，如果您的子类"
"以任何方式更改了 ``__init__`` 的方法签名，您可能需要重新实现 "
"``deconstruct()`` 方法。如果您的字段只是继承自内置的 Django 字段，并且没有重"
"写 ``__init__``，则无需进行任何更改。"

msgid ""
"If you do need to override ``deconstruct()``, a good place to start is the "
"built-in Django fields (``django/db/models/fields/__init__.py``) as several "
"fields, including ``DecimalField`` and ``DateField``, override it and show "
"how to call the method on the superclass and simply add or remove extra "
"arguments."
msgstr ""
"如果您确实需要重写 ``deconstruct()``，一个好的起点是内置的 Django 字段"
"（``django/db/models/fields/__init__.py``），因为其中一些字段，包括 "
"``DecimalField`` 和 ``DateField``，已经重写了它，并展示了如何在超类上调用该方"
"法，只需添加或删除额外的参数。"

msgid ""
"This also means that all arguments to fields must themselves be "
"serializable; to see what we consider serializable, and to find out how to "
"make your own classes serializable, read the :ref:`migration serialization "
"documentation <migration-serializing>`."
msgstr ""
"这也意味着字段的所有参数本身必须是可序列化的；要了解我们认为什么是可序列化"
"的，以及如何使您自己的类可序列化，请阅读 :ref:`迁移序列化文档 <migration-"
"serializing>`。"

msgid "Calling custom ``QuerySet`` methods from the ``Manager``"
msgstr "从 ``Manager`` 中调用自定义的 ``QuerySet`` 方法"

msgid ""
"Historically, the recommended way to make reusable model queries was to "
"create methods on a custom ``Manager`` class. The problem with this approach "
"was that after the first method call, you'd get back a ``QuerySet`` instance "
"and couldn't call additional custom manager methods."
msgstr ""
"历史上，制作可重用的模型查询的推荐方法是在自定义 ``Manager`` 类上创建方法。这"
"种方法的问题在于，在第一次方法调用之后，您会得到一个 ``QuerySet`` 实例，无法"
"调用其他自定义的管理器方法。"

msgid ""
"Though not documented, it was common to work around this issue by creating a "
"custom ``QuerySet`` so that custom methods could be chained; but the "
"solution had a number of drawbacks:"
msgstr ""
"尽管没有记录，但通常可以通过创建自定义的 ``QuerySet`` 来解决这个问题，以便可"
"以链接自定义方法；但是这个解决方案有很多缺点："

msgid ""
"The custom ``QuerySet`` and its custom methods were lost after the first "
"call to ``values()`` or ``values_list()``."
msgstr ""
"自定义的 ``QuerySet`` 和其自定义方法在第一次调用 ``values()`` 或 "
"``values_list()`` 后就丢失了。"

msgid ""
"Writing a custom ``Manager`` was still necessary to return the custom "
"``QuerySet`` class and all methods that were desired on the ``Manager`` had "
"to be proxied to the ``QuerySet``. The whole process went against the DRY "
"principle."
msgstr ""
"仍然需要编写自定义的 ``Manager`` 来返回自定义的 ``QuerySet`` 类，并且所有希望"
"在 ``Manager`` 上使用的方法都必须被代理到 ``QuerySet`` 上。整个过程违反了 "
"DRY 原则。"

msgid ""
"The :meth:`QuerySet.as_manager() <django.db.models.query.QuerySet."
"as_manager>` class method can now directly :ref:`create Manager with "
"QuerySet methods <create-manager-with-queryset-methods>`::"
msgstr ""
"现在可以直接使用 :meth:`QuerySet.as_manager() <django.db.models.query."
"QuerySet.as_manager>` 类方法来 :ref:`创建具有 QuerySet 方法的 Manager "
"<create-manager-with-queryset-methods>`："

msgid "Using a custom manager when traversing reverse relations"
msgstr "在遍历反向关系时使用自定义管理器"

msgid ""
"It is now possible to :ref:`specify a custom manager <using-custom-reverse-"
"manager>` when traversing a reverse relationship::"
msgstr ""
"现在可以在遍历反向关系时 :ref:`指定自定义的管理器 <using-custom-reverse-"
"manager>`："

msgid "New system check framework"
msgstr "新的系统检查框架"

msgid ""
"We've added a new :doc:`System check framework </ref/checks>` for detecting "
"common problems (like invalid models) and providing hints for resolving "
"those problems. The framework is extensible so you can add your own checks "
"for your own apps and libraries."
msgstr ""
"我们新增了一个新的 :doc:`系统检查框架 </ref/checks>`，用于检测常见问题（比如"
"无效的模型）并提供解决这些问题的提示。这个框架是可扩展的，因此您可以为自己的"
"应用程序和库添加自定义检查。"

msgid ""
"To perform system checks, you use the :djadmin:`check` management command. "
"This command replaces the older ``validate`` management command."
msgstr ""
"要执行系统检查，您可以使用 :djadmin:`check` 管理命令。这个命令替代了旧的 "
"``validate`` 管理命令。"

msgid "New ``Prefetch`` object for advanced ``prefetch_related`` operations."
msgstr "新的 ``Prefetch`` 对象用于高级的 ``prefetch_related`` 操作。"

msgid ""
"The new :class:`~django.db.models.Prefetch` object allows customizing "
"prefetch operations."
msgstr "新的 :class:`~django.db.models.Prefetch` 对象允许自定义预取操作。"

msgid ""
"You can specify the ``QuerySet`` used to traverse a given relation or "
"customize the storage location of prefetch results."
msgstr ""
"您可以指定用于遍历特定关系的 ``QuerySet``，或者自定义预取结果的存储位置。"

msgid ""
"This enables things like filtering prefetched relations, calling :meth:"
"`~django.db.models.query.QuerySet.select_related()` from a prefetched "
"relation, or prefetching the same relation multiple times with different "
"querysets. See :meth:`~django.db.models.query.QuerySet.prefetch_related()` "
"for more details."
msgstr ""
"这使得可以过滤预取的关系、从预取的关系中调用 :meth:`~django.db.models.query."
"QuerySet.select_related()`，或者多次使用不同的查询集预取相同的关系。有关更多"
"详细信息，请参阅 :meth:`~django.db.models.query.QuerySet."
"prefetch_related()`。"

msgid "Admin shortcuts support time zones"
msgstr "管理快捷方式支持时区"

msgid ""
"The \"today\" and \"now\" shortcuts next to date and time input widgets in "
"the admin are now operating in the :ref:`current time zone <default-current-"
"time-zone>`. Previously, they used the browser time zone, which could result "
"in saving the wrong value when it didn't match the current time zone on the "
"server."
msgstr ""
"在管理员中日期和时间输入小部件旁边的 \"today\" 和 \"now\" 快捷方式现在在 :"
"ref:`当前时区 <default-current-time-zone>` 中运行。以前，它们使用浏览器的时"
"区，这可能导致在时区不匹配服务器的当前时区时保存错误的值。"

msgid ""
"In addition, the widgets now display a help message when the browser and "
"server time zone are different, to clarify how the value inserted in the "
"field will be interpreted."
msgstr ""
"此外，小部件现在在浏览器和服务器时区不同时显示帮助信息，以明确解释字段中插入"
"的值将如何被解释。"

msgid "Using database cursors as context managers"
msgstr "使用数据库游标作为上下文管理器"

msgid ""
"Prior to Python 2.7, database cursors could be used as a context manager. "
"The specific backend's cursor defined the behavior of the context manager. "
"The behavior of magic method lookups was changed with Python 2.7 and cursors "
"were no longer usable as context managers."
msgstr ""
"在 Python 2.7 之前，数据库游标可以用作上下文管理器。具体的后端游标定义了上下"
"文管理器的行为。但是，Python 2.7 改变了魔术方法查找的行为，游标不再能用作上下"
"文管理器。"

msgid ""
"Django 1.7 allows a cursor to be used as a context manager. That is, the "
"following can be used::"
msgstr "Django 1.7 允许将游标用作上下文管理器。也就是说，可以使用以下方式："

msgid "instead of::"
msgstr "替换成："

msgid "Custom lookups"
msgstr "自定义查找"

msgid ""
"It is now possible to write custom lookups and transforms for the ORM. "
"Custom lookups work just like Django's built-in lookups (e.g. ``lte``, "
"``icontains``) while transforms are a new concept."
msgstr ""
"现在可以为 ORM 编写自定义查找和转换。自定义查找与 Django 内置的查找（例如 "
"``lte``、``icontains``）类似，而转换是一个新概念。"

msgid ""
"The :class:`django.db.models.Lookup` class provides a way to add lookup "
"operators for model fields. As an example it is possible to add ``day_lte`` "
"operator for ``DateFields``."
msgstr ""
":class:`django.db.models.Lookup` 类提供了一种为模型字段添加查找运算符的方式。"
"例如，可以为 ``DateFields`` 添加 ``day_lte`` 运算符。"

msgid ""
"The :class:`django.db.models.Transform` class allows transformations of "
"database values prior to the final lookup. For example it is possible to "
"write a ``year`` transform that extracts year from the field's value. "
"Transforms allow for chaining. After the ``year`` transform has been added "
"to ``DateField`` it is possible to filter on the transformed value, for "
"example ``qs.filter(author__birthdate__year__lte=1981)``."
msgstr ""
":class:`django.db.models.Transform` 类允许在最终查找之前对数据库值进行转换。"
"例如，可以编写一个 ``year`` 转换，从字段的值中提取年份。转换允许进行链式操"
"作。在将 ``year`` 转换添加到 ``DateField`` 后，可以对转换后的值进行筛选，例"
"如 ``qs.filter(author__birthdate__year__lte=1981)``。"

msgid ""
"For more information about both custom lookups and transforms refer to the :"
"doc:`custom lookups </howto/custom-lookups>` documentation."
msgstr ""
"有关自定义查找和转换的更多信息，请参阅 :doc:`自定义查找 </howto/custom-"
"lookups>` 文档。"

msgid "Improvements to ``Form`` error handling"
msgstr "改进了 ``Form`` 错误处理"

msgid "``Form.add_error()``"
msgstr "``Form.add_error()``"

msgid "Previously there were two main patterns for handling errors in forms:"
msgstr "以前在处理表单错误方面有两种主要模式："

msgid ""
"Raising a :exc:`~django.core.exceptions.ValidationError` from within certain "
"functions (e.g. ``Field.clean()``, ``Form.clean_<fieldname>()``, or ``Form."
"clean()`` for non-field errors.)"
msgstr ""
"在某些函数（例如 ``Field.clean()``、``Form.clean_<fieldname>()`` 或 ``Form."
"clean()`` 用于非字段错误的情况）中引发 :exc:`~django.core.exceptions."
"ValidationError`。"

msgid ""
"Fiddling with ``Form._errors`` when targeting a specific field in ``Form."
"clean()`` or adding errors from outside of a \"clean\" method (e.g. directly "
"from a view)."
msgstr ""
"在 ``Form.clean()`` 中针对特定字段或在“clean”方法之外（例如直接从视图中）添加"
"错误时，会涉及到 ``Form._errors``。"

msgid ""
"Using the former pattern was straightforward since the form can guess from "
"the context (i.e. which method raised the exception) where the errors belong "
"and automatically process them. This remains the canonical way of adding "
"errors when possible. However the latter was fiddly and error-prone, since "
"the burden of handling edge cases fell on the user."
msgstr ""
"使用前一种模式是直接的，因为表单可以根据上下文（即引发异常的方法）猜测错误的"
"归属，并自动处理它们。这仍然是可能时添加错误的规范方式。然而，后一种模式很繁"
"琐且容易出错，因为处理边缘情况的负担落在用户身上。"

msgid ""
"The new :meth:`~django.forms.Form.add_error()` method allows adding errors "
"to specific form fields from anywhere without having to worry about the "
"details such as creating instances of ``django.forms.utils.ErrorList`` or "
"dealing with ``Form.cleaned_data``. This new API replaces manipulating "
"``Form._errors`` which now becomes a private API."
msgstr ""
"新的 :meth:`~django.forms.Form.add_error()` 方法允许在任何地方将错误添加到特"
"定的表单字段，无需担心诸如创建 ``django.forms.utils.ErrorList`` 实例或处理 "
"``Form.cleaned_data`` 等细节。这个新的 API 取代了操作 ``Form._errors``，后者"
"现在变成了一个私有的 API。"

msgid ""
"See :ref:`validating-fields-with-clean` for an example using ``Form."
"add_error()``."
msgstr ""
"请参阅 :ref:`使用 Form.add_error() 进行字段验证`，以获取使用 ``Form."
"add_error()`` 的示例。"

msgid "Error metadata"
msgstr "错误元数据"

msgid ""
"The :exc:`~django.core.exceptions.ValidationError` constructor accepts "
"metadata such as error ``code`` or ``params`` which are then available for "
"interpolating into the error message (see :ref:`raising-validation-error` "
"for more details); however, before Django 1.7 those metadata were discarded "
"as soon as the errors were added to :attr:`Form.errors <django.forms.Form."
"errors>`."
msgstr ""
":exc:`~django.core.exceptions.ValidationError` 构造函数接受元数据，如错误 "
"``code`` 或 ``params``，然后可以将其插入到错误消息中（有关更多详细信息，请参"
"阅 :ref:`raising-validation-error`）；然而，在 Django 1.7 之前，这些元数据在"
"错误添加到 :attr:`Form.errors <django.forms.Form.errors>` 后立即被丢弃。"

msgid ""
":attr:`Form.errors <django.forms.Form.errors>` and ``django.forms.utils."
"ErrorList`` now store the ``ValidationError`` instances so these metadata "
"can be retrieved at any time through the new :meth:`Form.errors.as_data "
"<django.forms.Form.errors.as_data()>` method."
msgstr ""
":attr:`Form.errors <django.forms.Form.errors>` 和 ``django.forms.utils."
"ErrorList`` 现在存储了 ``ValidationError`` 实例，因此可以通过新的 :meth:"
"`Form.errors.as_data <django.forms.Form.errors.as_data()>` 方法在任何时候检索"
"这些元数据。"

msgid ""
"The retrieved ``ValidationError`` instances can then be identified thanks to "
"their error ``code`` which enables things like rewriting the error's message "
"or writing custom logic in a view when a given error is present. It can also "
"be used to serialize the errors in a custom format such as XML."
msgstr ""
"检索到的 ``ValidationError`` 实例可以通过其错误 ``code`` 进行标识，从而可以进"
"行诸如重写错误消息或在特定错误存在时编写视图中的自定义逻辑等操作。它还可以用"
"于以自定义格式（例如 XML）序列化错误。"

msgid ""
"The new :meth:`Form.errors.as_json() <django.forms.Form.errors.as_json()>` "
"method is a convenience method which returns error messages along with error "
"codes serialized as JSON. ``as_json()`` uses ``as_data()`` and gives an idea "
"of how the new system could be extended."
msgstr ""
"新的 :meth:`Form.errors.as_json() <django.forms.Form.errors.as_json()>` 方法"
"是一个方便的方法，它返回以 JSON 格式序列化的错误消息以及错误代码。"
"``as_json()`` 使用了 ``as_data()``，并展示了如何扩展新系统的思路。"

msgid "Error containers and backward compatibility"
msgstr "错误容器和向后兼容性"

msgid ""
"Heavy changes to the various error containers were necessary in order to "
"support the features above, specifically :attr:`Form.errors <django.forms."
"Form.errors>`, ``django.forms.utils.ErrorList``, and the internal storages "
"of :exc:`~django.core.exceptions.ValidationError`. These containers which "
"used to store error strings now store ``ValidationError`` instances and "
"public APIs have been adapted to make this as transparent as possible, but "
"if you've been using private APIs, some of the changes are backwards "
"incompatible; see :ref:`validation-error-constructor-and-internal-storage` "
"for more details."
msgstr ""
"为了支持上述功能，需要对各种错误容器进行重大更改，特别是 :attr:`Form.errors "
"<django.forms.Form.errors>`、``django.forms.utils.ErrorList`` 和 :exc:"
"`~django.core.exceptions.ValidationError` 的内部存储。这些容器曾经存储错误字"
"符串，现在存储 ``ValidationError`` 实例，并且公共 API 已经进行了适应，使这些"
"更改尽可能透明，但如果您曾经使用过私有 API，一些更改可能不兼容向后；有关更多"
"详细信息，请参阅 :ref:`validation-error-constructor-and-internal-storage`。"

msgid ""
"You can now implement :attr:`~django.contrib.admin.AdminSite.site_header`, :"
"attr:`~django.contrib.admin.AdminSite.site_title`, and :attr:`~django."
"contrib.admin.AdminSite.index_title` attributes on a custom :class:`~django."
"contrib.admin.AdminSite` in order to easily change the admin site's page "
"title and header text. No more needing to override templates!"
msgstr ""
"现在可以在自定义的 :class:`~django.contrib.admin.AdminSite` 上实现 :attr:"
"`~django.contrib.admin.AdminSite.site_header`、:attr:`~django.contrib.admin."
"AdminSite.site_title` 和 :attr:`~django.contrib.admin.AdminSite.index_title` "
"属性，以便轻松更改管理站点的页面标题和页眉文本。不再需要覆盖模板！"

msgid ""
"Buttons in :mod:`django.contrib.admin` now use the ``border-radius`` CSS "
"property for rounded corners rather than GIF background images."
msgstr ""
"在 :mod:`django.contrib.admin` 中的按钮现在使用 ``border-radius`` CSS 属性来"
"实现圆角，而不再使用 GIF 背景图像。"

msgid ""
"Some admin templates now have ``app-<app_name>`` and ``model-<model_name>`` "
"classes in their ``<body>`` tag to allow customizing the CSS per app or per "
"model."
msgstr ""
"一些管理模板现在在其 ``<body>`` 标签中具有 ``app-<app_name>`` 和 ``model-"
"<model_name>`` 类，以允许按应用程序或模型自定义 CSS 样式。"

msgid ""
"The admin changelist cells now have a ``field-<field_name>`` class in the "
"HTML to enable style customizations."
msgstr ""
"管理员变更列表单元格现在在 HTML 中具有 ``field-<field_name>`` 类，以启用样式"
"自定义。"

msgid ""
"The admin's search fields can now be customized per-request thanks to the "
"new :meth:`django.contrib.admin.ModelAdmin.get_search_fields` method."
msgstr ""
"现在可以通过新的 :meth:`django.contrib.admin.ModelAdmin.get_search_fields` 方"
"法，按请求自定义管理员的搜索字段。"

msgid ""
"The :meth:`ModelAdmin.get_fields() <django.contrib.admin.ModelAdmin."
"get_fields>` method may be overridden to customize the value of :attr:"
"`ModelAdmin.fields <django.contrib.admin.ModelAdmin.fields>`."
msgstr ""
"可以重写 :meth:`ModelAdmin.get_fields() <django.contrib.admin.ModelAdmin."
"get_fields>` 方法来自定义 :attr:`ModelAdmin.fields <django.contrib.admin."
"ModelAdmin.fields>` 的值。"

msgid ""
"In addition to the existing ``admin.site.register`` syntax, you can use the "
"new :func:`~django.contrib.admin.register` decorator to register a :class:"
"`~django.contrib.admin.ModelAdmin`."
msgstr ""
"除了现有的 ``admin.site.register`` 语法之外，您还可以使用新的 :func:`~django."
"contrib.admin.register` 装饰器来注册一个 :class:`~django.contrib.admin."
"ModelAdmin`。"

msgid ""
"You may specify :meth:`ModelAdmin.list_display_links <django.contrib.admin."
"ModelAdmin.list_display_links>` ``= None`` to disable links on the change "
"list page grid."
msgstr ""
"您可以指定 :meth:`ModelAdmin.list_display_links <django.contrib.admin."
"ModelAdmin.list_display_links>` ``= None`` 来禁用更改列表页面网格上的链接。"

msgid ""
"You may now specify :attr:`ModelAdmin.view_on_site <django.contrib.admin."
"ModelAdmin.view_on_site>` to control whether or not to display the \"View on "
"site\" link."
msgstr ""
"现在可以指定 :attr:`ModelAdmin.view_on_site <django.contrib.admin.ModelAdmin."
"view_on_site>` 来控制是否显示 \"在站点上查看\" 链接。"

msgid ""
"You can specify a descending ordering for a :attr:`ModelAdmin.list_display "
"<django.contrib.admin.ModelAdmin.list_display>` value by prefixing the "
"``admin_order_field`` value with a hyphen."
msgstr ""
"您可以通过在 ``admin_order_field`` 值前面加上连字符来指定 :attr:`ModelAdmin."
"list_display <django.contrib.admin.ModelAdmin.list_display>` 值的降序排序。"

msgid ""
"The :meth:`ModelAdmin.get_changeform_initial_data() <django.contrib.admin."
"ModelAdmin.get_changeform_initial_data>` method may be overridden to define "
"custom behavior for setting initial change form data."
msgstr ""
"可以重写 :meth:`ModelAdmin.get_changeform_initial_data() <django.contrib."
"admin.ModelAdmin.get_changeform_initial_data>` 方法来定义设置更改表单初始数据"
"的自定义行为。"

msgid ""
"Any ``**kwargs`` passed to :meth:`~django.contrib.auth.models.User."
"email_user()` are passed to the underlying :meth:`~django.core.mail."
"send_mail()` call."
msgstr ""
"传递给 :meth:`~django.contrib.auth.models.User.email_user()` 的任何 "
"``**kwargs`` 都会传递给底层的 :meth:`~django.core.mail.send_mail()` 调用。"

msgid ""
"The :func:`~django.contrib.auth.decorators.permission_required` decorator "
"can take a list of permissions as well as a single permission."
msgstr ""
":func:`~django.contrib.auth.decorators.permission_required` 装饰器可以接受一"
"组权限，而不仅仅是单个权限。"

msgid ""
"You can override the new :meth:`AuthenticationForm.confirm_login_allowed() "
"<django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed>` method "
"to more easily customize the login policy."
msgstr ""
"您可以重写新的 :meth:`AuthenticationForm.confirm_login_allowed() <django."
"contrib.auth.forms.AuthenticationForm.confirm_login_allowed>` 方法，以更轻松"
"地自定义登录策略。"

msgid ""
"``django.contrib.auth.views.password_reset()`` takes an optional "
"``html_email_template_name`` parameter used to send a multipart HTML email "
"for password resets."
msgstr ""
"``django.contrib.auth.views.password_reset()`` 接受一个可选的 "
"``html_email_template_name`` 参数，用于发送包含 HTML 的多部分电子邮件以进行密"
"码重置。"

msgid ""
"The :meth:`AbstractBaseUser.get_session_auth_hash() <django.contrib.auth."
"models.AbstractBaseUser.get_session_auth_hash>` method was added and if "
"your :setting:`AUTH_USER_MODEL` inherits from :class:`~django.contrib.auth."
"models.AbstractBaseUser`, changing a user's password now invalidates old "
"sessions if the ``django.contrib.auth.middleware."
"SessionAuthenticationMiddleware`` is enabled. See :ref:`session-invalidation-"
"on-password-change` for more details."
msgstr ""
"添加了 :meth:`AbstractBaseUser.get_session_auth_hash() <django.contrib.auth."
"models.AbstractBaseUser.get_session_auth_hash>` 方法，如果您的 :setting:"
"`AUTH_USER_MODEL` 继承自 :class:`~django.contrib.auth.models."
"AbstractBaseUser`，那么现在在启用了 ``django.contrib.auth.middleware."
"SessionAuthenticationMiddleware`` 的情况下，更改用户密码会使旧的会话失效。有"
"关更多详细信息，请参阅 :ref:`session-invalidation-on-password-change`。"

msgid "``django.contrib.formtools``"
msgstr "``django.contrib.formtools``"

msgid ""
"Calls to ``WizardView.done()`` now include a ``form_dict`` to allow easier "
"access to forms by their step name."
msgstr ""
"对 ``WizardView.done()`` 的调用现在包括一个 ``form_dict``，以便更容易按步骤名"
"称访问表单。"

msgid ""
"The default OpenLayers library version included in widgets has been updated "
"from 2.11 to 2.13."
msgstr "默认包含在小部件中的 OpenLayers 库版本已从 2.11 更新为 2.13 。"

msgid ""
"Prepared geometries now also support the ``crosses``, ``disjoint``, "
"``overlaps``, ``touches`` and ``within`` predicates, if GEOS 3.3 or later is "
"installed."
msgstr ""
"如果安装了 GEOS 3.3 或更高版本，预处理的几何图形现在还支持 ``crosses``、"
"``disjoint``、``overlaps``、``touches`` 和 ``within`` 谓词。"

msgid ":mod:`django.contrib.messages`"
msgstr ":mod:`django.contrib.messages`"

msgid ""
"The backends for :mod:`django.contrib.messages` that use cookies, will now "
"follow the :setting:`SESSION_COOKIE_SECURE` and :setting:"
"`SESSION_COOKIE_HTTPONLY` settings."
msgstr ""
"使用 Cookie 的 :mod:`django.contrib.messages` 后端现在将遵循 :setting:"
"`SESSION_COOKIE_SECURE` 和 :setting:`SESSION_COOKIE_HTTPONLY` 设置。"

msgid ""
"The :ref:`messages context processor <message-displaying>` now adds a "
"dictionary of default levels under the name ``DEFAULT_MESSAGE_LEVELS``."
msgstr ""
":ref:`消息上下文处理器 <message-displaying>` 现在会添加一个名为 "
"``DEFAULT_MESSAGE_LEVELS`` 的默认级别字典。"

msgid ""
":class:`~django.contrib.messages.Message` objects now have a ``level_tag`` "
"attribute that contains the string representation of the message level."
msgstr ""
"现在 :class:`~django.contrib.messages.Message` 对象具有一个 ``level_tag`` 属"
"性，其中包含消息级别的字符串表示。"

msgid ":mod:`django.contrib.redirects`"
msgstr ":mod:`django.contrib.redirects`"

msgid ""
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` has "
"two new attributes (:attr:`~django.contrib.redirects.middleware."
"RedirectFallbackMiddleware.response_gone_class` and :attr:`~django.contrib."
"redirects.middleware.RedirectFallbackMiddleware.response_redirect_class`) "
"that specify the types of :class:`~django.http.HttpResponse` instances the "
"middleware returns."
msgstr ""
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` 具有"
"两个新属性 (:attr:`~django.contrib.redirects.middleware."
"RedirectFallbackMiddleware.response_gone_class` 和 :attr:`~django.contrib."
"redirects.middleware.RedirectFallbackMiddleware.response_redirect_class`)，用"
"于指定中间件返回的 :class:`~django.http.HttpResponse` 实例的类型。"

msgid ""
"The ``\"django.contrib.sessions.backends.cached_db\"`` session backend now "
"respects :setting:`SESSION_CACHE_ALIAS`. In previous versions, it always "
"used the ``default`` cache."
msgstr ""
"``\"django.contrib.sessions.backends.cached_db\"`` 会话后端现在尊重 :setting:"
"`SESSION_CACHE_ALIAS`。在之前的版本中，它总是使用 ``default`` 缓存。"

msgid ":mod:`django.contrib.sitemaps`"
msgstr ":mod:`django.contrib.sitemaps`"

msgid ""
"The :mod:`sitemap framework<django.contrib.sitemaps>` now makes use of :attr:"
"`~django.contrib.sitemaps.Sitemap.lastmod` to set a ``Last-Modified`` header "
"in the response. This makes it possible for the :class:`~django.middleware."
"http.ConditionalGetMiddleware` to handle conditional ``GET`` requests for "
"sitemaps which set ``lastmod``."
msgstr ""
":mod:`sitemap framework<django.contrib.sitemaps>` 现在使用 :attr:`~django."
"contrib.sitemaps.Sitemap.lastmod` 来设置响应中的 ``Last-Modified`` 标头。这使"
"得 :class:`~django.middleware.http.ConditionalGetMiddleware` 可以处理对设置"
"了 ``lastmod`` 的站点地图的条件 ``GET`` 请求。"

msgid ""
"The new :class:`django.contrib.sites.middleware.CurrentSiteMiddleware` "
"allows setting the current site on each request."
msgstr ""
"新的 :class:`django.contrib.sites.middleware.CurrentSiteMiddleware` 允许在每"
"个请求上设置当前站点。"

msgid ""
"The :ref:`static files storage classes <staticfiles-storages>` may be "
"subclassed to override the permissions that collected static files and "
"directories receive by setting the :attr:`~django.core.files.storage."
"FileSystemStorage.file_permissions_mode` and :attr:`~django.core.files."
"storage.FileSystemStorage.directory_permissions_mode` parameters. See :"
"djadmin:`collectstatic` for example usage."
msgstr ""
"可以通过子类化 :ref:`静态文件存储类 <staticfiles-storages>` 来覆盖收集的静态"
"文件和目录的权限，方法是设置 :attr:`~django.core.files.storage."
"FileSystemStorage.file_permissions_mode` 和 :attr:`~django.core.files."
"storage.FileSystemStorage.directory_permissions_mode` 参数。请参阅 :djadmin:"
"`collectstatic` 以查看示例用法。"

msgid ""
"The ``CachedStaticFilesStorage`` backend gets a sibling class called :class:"
"`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` that "
"doesn't use the cache system at all but instead a JSON file called "
"``staticfiles.json`` for storing the mapping between the original file name "
"(e.g. ``css/styles.css``) and the hashed file name (e.g. ``css/"
"styles.55e7cbb9ba48.css``). The ``staticfiles.json`` file is created when "
"running the :djadmin:`collectstatic` management command and should be a less "
"expensive alternative for remote storages such as Amazon S3."
msgstr ""
"``CachedStaticFilesStorage`` 后端有一个名为 :class:`~django.contrib."
"staticfiles.storage.ManifestStaticFilesStorage` 的兄弟类，它根本不使用缓存系"
"统，而是使用一个名为 ``staticfiles.json`` 的 JSON 文件来存储原始文件名（例如 "
"``css/styles.css``）和散列文件名（例如 ``css/styles.55e7cbb9ba48.css``）之间"
"的映射关系。当运行 :djadmin:`collectstatic` 管理命令时，会创建 ``staticfiles."
"json`` 文件，对于 Amazon S3 等远程存储来说，这应该是一个更经济的替代方案。"

msgid ""
"See the :class:`~django.contrib.staticfiles.storage."
"ManifestStaticFilesStorage` docs for more information."
msgstr ""
"有关更多信息，请参阅 :class:`~django.contrib.staticfiles.storage."
"ManifestStaticFilesStorage` 文档。"

msgid ""
":djadmin:`findstatic` now accepts verbosity flag level 2, meaning it will "
"show the relative paths of the directories it searched. See :djadmin:"
"`findstatic` for example output."
msgstr ""
":djadmin:`findstatic` 现在接受详细程度为 2 的 verbosity 标志，这意味着它将显"
"示搜索的目录的相对路径。请参阅 :djadmin:`findstatic` 以查看示例输出。"

msgid ":mod:`django.contrib.syndication`"
msgstr ":mod:`django.contrib.syndication`"

msgid ""
"The :class:`~django.utils.feedgenerator.Atom1Feed` syndication feed's "
"``updated`` element now utilizes ``updateddate`` instead of ``pubdate``, "
"allowing the ``published`` element to be included in the feed (which relies "
"on ``pubdate``)."
msgstr ""
":class:`~django.utils.feedgenerator.Atom1Feed` 辅助工具中的 ``updated`` 元素"
"现在使用 ``updateddate`` 而不是 ``pubdate``，允许在 feed 中包含 "
"``published`` 元素（该元素依赖于 ``pubdate``）。"

msgid ""
"Access to caches configured in :setting:`CACHES` is now available via :data:"
"`django.core.cache.caches`. This dict-like object provides a different "
"instance per thread. It supersedes ``django.core.cache.get_cache()`` which "
"is now deprecated."
msgstr ""
"现在可以通过 :data:`django.core.cache.caches` 访问在 :setting:`CACHES` 中配置"
"的缓存。这个类似字典的对象为每个线程提供一个不同的实例。它取代了已被弃用的 "
"``django.core.cache.get_cache()``。"

msgid ""
"If you instantiate cache backends directly, be aware that they aren't thread-"
"safe any more, as :data:`django.core.cache.caches` now yields different "
"instances per thread."
msgstr ""
"如果直接实例化缓存后端，请注意它们不再是线程安全的，因为 :data:`django.core."
"cache.caches` 现在为每个线程提供不同的实例。"

msgid ""
"Defining the :setting:`TIMEOUT <CACHES-TIMEOUT>` argument of the :setting:"
"`CACHES` setting as ``None`` will set the cache keys as \"non-expiring\" by "
"default. Previously, it was only possible to pass ``timeout=None`` to the "
"cache backend's ``set()`` method."
msgstr ""
"将 :setting:`CACHES` 设置的 :setting:`TIMEOUT <CACHES-TIMEOUT>` 参数定义为 "
"``None`` 将默认将缓存键设置为 \"永不过期\"。以前，只能将 ``timeout=None`` 传"
"递给缓存后端的 ``set()`` 方法。"

msgid "Cross Site Request Forgery"
msgstr "跨站请求伪造（Cross Site Request Forgery，CSRF）"

msgid ""
"The :setting:`CSRF_COOKIE_AGE` setting facilitates the use of session-based "
"CSRF cookies."
msgstr ":setting:`CSRF_COOKIE_AGE` 设置方便了使用基于会话的 CSRF Cookie。"

msgid ""
":func:`~django.core.mail.send_mail` now accepts an ``html_message`` "
"parameter for sending a multipart :mimetype:`text/plain` and :mimetype:`text/"
"html` email."
msgstr ""
":func:`~django.core.mail.send_mail` 现在接受一个 ``html_message`` 参数，用于"
"发送多部分 :mimetype:`text/plain` 和 :mimetype:`text/html` 的电子邮件。"

msgid ""
"The SMTP :class:`~django.core.mail.backends.smtp.EmailBackend` now accepts a "
"``timeout`` parameter."
msgstr ""
"SMTP :class:`~django.core.mail.backends.smtp.EmailBackend` 现在接受一个 "
"``timeout`` 参数。"

msgid ""
"File locking on Windows previously depended on the PyWin32 package; if it "
"wasn't installed, file locking failed silently. That dependency has been "
"removed, and file locking is now implemented natively on both Windows and "
"Unix."
msgstr ""
"在 Windows 上，文件锁定以前依赖于 PyWin32 软件包；如果未安装该软件包，则文件"
"锁定会默默失败。现在已经移除了这个依赖项，文件锁定在 Windows 和 Unix 上都使用"
"本地实现。"

msgid "File Uploads"
msgstr "文件上传"

msgid ""
"The new :attr:`UploadedFile.content_type_extra <django.core.files."
"uploadedfile.UploadedFile.content_type_extra>` attribute contains extra "
"parameters passed to the ``content-type`` header on a file upload."
msgstr ""
"新的 :attr:`UploadedFile.content_type_extra <django.core.files.uploadedfile."
"UploadedFile.content_type_extra>` 属性包含在文件上传的 ``content-type`` 标头"
"中传递的额外参数。"

msgid ""
"The new :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS` setting controls the "
"file system permissions of directories created during file upload, like :"
"setting:`FILE_UPLOAD_PERMISSIONS` does for the files themselves."
msgstr ""
"新的 :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS` 设置控制在文件上传期间创建"
"的目录的文件系统权限，就像 :setting:`FILE_UPLOAD_PERMISSIONS` 一样控制文件本"
"身的权限。"

msgid ""
"The :attr:`FileField.upload_to <django.db.models.FileField.upload_to>` "
"attribute is now optional. If it is omitted or given ``None`` or an empty "
"string, a subdirectory won't be used for storing the uploaded files."
msgstr ""
":attr:`FileField.upload_to <django.db.models.FileField.upload_to>` 属性现在是"
"可选的。如果省略或给定 ``None`` 或空字符串，将不会使用子目录来存储上传的文"
"件。"

msgid ""
"Uploaded files are now explicitly closed before the response is delivered to "
"the client. Partially uploaded files are also closed as long as they are "
"named ``file`` in the upload handler."
msgstr ""
"上传的文件现在在响应交付给客户端之前明确关闭。只要在上传处理程序中的名称为 "
"``file``，部分上传的文件也会被关闭。"

msgid ""
":meth:`Storage.get_available_name() <django.core.files.storage.Storage."
"get_available_name>` now appends an underscore plus a random 7 character "
"alphanumeric string (e.g. ``\"_x3a1gho\"``), rather than iterating through "
"an underscore followed by a number (e.g. ``\"_1\"``, ``\"_2\"``, etc.) to "
"prevent a denial-of-service attack. This change was also made in the 1.6.6, "
"1.5.9, and 1.4.14 security releases."
msgstr ""
":meth:`Storage.get_available_name() <django.core.files.storage.Storage."
"get_available_name>` 现在追加一个下划线加上一个随机的 7 个字符的字母数字字符"
"串（例如，``\"_x3a1gho\"``），而不是通过一个下划线后跟一个数字（例如，"
"``\"_1\"``, ``\"_2\"`` 等）来进行迭代，以防止拒绝服务攻击。这个更改也在 "
"1.6.6、1.5.9 和 1.4.14 安全发布版中进行了更改。"

msgid ""
"The ``<label>`` and ``<input>`` tags rendered by :class:`~django.forms."
"RadioSelect` and :class:`~django.forms.CheckboxSelectMultiple` when looping "
"over the radio buttons or checkboxes now include ``for`` and ``id`` "
"attributes, respectively. Each radio button or checkbox includes an "
"``id_for_label`` attribute to output the element's ID."
msgstr ""
":class:`~django.forms.RadioSelect` 和 :class:`~django.forms."
"CheckboxSelectMultiple` 渲染的单选按钮或复选框的 ``<label>`` 和 ``<input>`` "
"标签现在分别包括 ``for`` 和 ``id`` 属性。每个单选按钮或复选框都包括一个 "
"``id_for_label`` 属性以输出元素的 ID。"

msgid ""
"The ``<textarea>`` tags rendered by :class:`~django.forms.Textarea` now "
"include a ``maxlength`` attribute if the :class:`~django.db.models."
"TextField` model field has a ``max_length``."
msgstr ""
":class:`~django.forms.Textarea` 渲染的 ``<textarea>`` 标签现在如果 :class:"
"`~django.db.models.TextField` 模型字段有 ``max_length``，则会包括一个 "
"``maxlength`` 属性。"

msgid ""
":attr:`Field.choices<django.db.models.Field.choices>` now allows you to "
"customize the \"empty choice\" label by including a tuple with an empty "
"string or ``None`` for the key and the custom label as the value. The "
"default blank option ``\"----------\"`` will be omitted in this case."
msgstr ""
":attr:`Field.choices <django.db.models.Field.choices>` 现在允许您通过包含一个"
"空字符串或 ``None`` 的元组作为键以及自定义标签作为值来自定义 \"空选项\" 标"
"签。在这种情况下，默认的空选项 ``\"----------\"`` 将被省略。"

msgid ""
":class:`~django.forms.MultiValueField` allows optional subfields by setting "
"the ``require_all_fields`` argument to ``False``. The ``required`` attribute "
"for each individual field will be respected, and a new ``incomplete`` "
"validation error will be raised when any required fields are empty."
msgstr ""
":class:`~django.forms.MultiValueField` 允许通过将 ``require_all_fields`` 参数"
"设置为 ``False`` 来添加可选子字段。将尊重每个单独字段的 ``required`` 属性，并"
"且当任何必填字段为空时，将引发新的 ``incomplete`` 验证错误。"

msgid ""
"The :meth:`~django.forms.Form.clean` method on a form no longer needs to "
"return ``self.cleaned_data``. If it does return a changed dictionary then "
"that will still be used."
msgstr ""
"表单上的 :meth:`~django.forms.Form.clean` 方法不再需要返回 ``self."
"cleaned_data``。如果它返回一个已更改的字典，那么仍将使用该字典。"

msgid ""
"After a temporary regression in Django 1.6, it's now possible again to make :"
"class:`~django.forms.TypedChoiceField` ``coerce`` method return an arbitrary "
"value."
msgstr ""
"在 Django 1.6 中的一个临时回归之后，现在可以再次使 :class:`~django.forms."
"TypedChoiceField` 的 ``coerce`` 方法返回任意值。"

msgid ""
":attr:`SelectDateWidget.months <django.forms.SelectDateWidget.months>` can "
"be used to customize the wording of the months displayed in the select "
"widget."
msgstr ""
":attr:`SelectDateWidget.months <django.forms.SelectDateWidget.months>` 可以用"
"于自定义在选择小部件中显示的月份的措辞。"

msgid ""
"The ``min_num`` and ``validate_min`` parameters were added to :func:`~django."
"forms.formsets.formset_factory` to allow validating a minimum number of "
"submitted forms."
msgstr ""
"添加了 ``min_num`` 和 ``validate_min`` 参数到 :func:`~django.forms.formsets."
"formset_factory`，以允许验证提交的表单的最小数量。"

msgid ""
"The metaclasses used by ``Form`` and ``ModelForm`` have been reworked to "
"support more inheritance scenarios. The previous limitation that prevented "
"inheriting from both ``Form`` and ``ModelForm`` simultaneously have been "
"removed as long as ``ModelForm`` appears first in the MRO."
msgstr ""
"``Form`` 和 ``ModelForm`` 使用的元类已经重新设计，以支持更多的继承情况。以前"
"的限制，阻止同时继承 ``Form`` 和 ``ModelForm`` 已经被移除，只要 "
"``ModelForm`` 在方法解析顺序 (MRO) 中首先出现。"

msgid ""
"It's now possible to remove a field from a ``Form`` when subclassing by "
"setting the name to ``None``."
msgstr ""
"现在可以通过将字段的名称设置为 ``None`` 来在子类中从 ``Form`` 中删除字段。"

msgid ""
"It's now possible to customize the error messages for ``ModelForm``’s "
"``unique``, ``unique_for_date``, and ``unique_together`` constraints. In "
"order to support ``unique_together`` or any other ``NON_FIELD_ERROR``, "
"``ModelForm`` now looks for the ``NON_FIELD_ERROR`` key in the "
"``error_messages`` dictionary of the ``ModelForm``’s inner ``Meta`` class. "
"See :ref:`considerations regarding model's error_messages <considerations-"
"regarding-model-errormessages>` for more details."
msgstr ""
"现在可以自定义 ``ModelForm`` 中的 ``unique``、``unique_for_date`` 和 "
"``unique_together`` 约束的错误消息。为了支持 ``unique_together`` 或任何其他 "
"``NON_FIELD_ERROR``，``ModelForm`` 现在会查找 ``ModelForm`` 内部 ``Meta`` 类"
"的 ``error_messages`` 字典中的 ``NON_FIELD_ERROR`` 键。有关更多详细信息，请参"
"阅 :ref:`关于模型的 error_messages 的考虑 <considerations-regarding-model-"
"errormessages>`。"

msgid ""
"The :attr:`django.middleware.locale.LocaleMiddleware."
"response_redirect_class` attribute allows you to customize the redirects "
"issued by the middleware."
msgstr ""
":attr:`django.middleware.locale.LocaleMiddleware.response_redirect_class` 属"
"性允许您自定义中间件发出的重定向。"

msgid ""
"The :class:`~django.middleware.locale.LocaleMiddleware` now stores the "
"user's selected language with the session key ``_language``. This should "
"only be accessed using the ``LANGUAGE_SESSION_KEY`` constant. Previously it "
"was stored with the key ``django_language`` and the ``LANGUAGE_SESSION_KEY`` "
"constant did not exist, but keys reserved for Django should start with an "
"underscore. For backwards compatibility ``django_language`` is still read "
"from in 1.7. Sessions will be migrated to the new key as they are written."
msgstr ""
":class:`~django.middleware.locale.LocaleMiddleware` 现在将用户选择的语言存储"
"在会话键 ``_language`` 中。这应该只使用 ``LANGUAGE_SESSION_KEY`` 常量来访问。"
"以前它存储在键 ``django_language`` 中，而 ``LANGUAGE_SESSION_KEY`` 常量不存"
"在，但为 Django 保留的键应该以下划线开头。为了向后兼容，在 1.7 中仍然从 "
"``django_language`` 读取。随着写入，会话将迁移到新的键。"

msgid ""
"The :ttag:`blocktrans` tag now supports a ``trimmed`` option. This option "
"will remove newline characters from the beginning and the end of the content "
"of the ``{% blocktrans %}`` tag, replace any whitespace at the beginning and "
"end of a line and merge all lines into one using a space character to "
"separate them. This is quite useful for indenting the content of a ``{% "
"blocktrans %}`` tag without having the indentation characters end up in the "
"corresponding entry in the ``.po`` file, which makes the translation process "
"easier."
msgstr ""
":ttag:`blocktrans` 标签现在支持一个 ``trimmed`` 选项。此选项将从 ``{% "
"blocktrans %}`` 标签的内容的开头和结尾删除换行符，替换每行开头和结尾的任何空"
"白，并使用空格字符将所有行合并为一行，以分隔它们。这对于缩进 ``{% blocktrans "
"%}`` 标签的内容非常有用，而不会使缩进字符出现在 ``.po`` 文件中相应的条目中，"
"从而使翻译过程更加容易。"

msgid ""
"When you run :djadmin:`makemessages` from the root directory of your "
"project, any extracted strings will now be automatically distributed to the "
"proper app or project message file. See :ref:`how-to-create-language-files` "
"for details."
msgstr ""
"当你在项目的根目录运行 :djadmin:`makemessages` 时，任何提取出来的字符串现在将"
"自动分发到正确的应用程序或项目消息文件中。详细信息请参见 :ref:`how-to-create-"
"language-files`。"

msgid ""
"The :djadmin:`makemessages` command now always adds the ``--previous`` "
"command line flag to the ``msgmerge`` command, keeping previously translated "
"strings in ``.po`` files for fuzzy strings."
msgstr ""
":djadmin:`makemessages` 命令现在总是会将 ``--previous`` 命令行标志添加到 "
"``msgmerge`` 命令中，以保留先前翻译的模糊字符串在 ``.po`` 文件中。"

msgid ""
"The following settings to adjust the language cookie options were "
"introduced: :setting:`LANGUAGE_COOKIE_AGE`, :setting:"
"`LANGUAGE_COOKIE_DOMAIN` and :setting:`LANGUAGE_COOKIE_PATH`."
msgstr ""
"引入了以下用于调整语言 cookie 选项的设置：:setting:`LANGUAGE_COOKIE_AGE`、:"
"setting:`LANGUAGE_COOKIE_DOMAIN` 和 :setting:`LANGUAGE_COOKIE_PATH`。"

msgid "Added :doc:`/topics/i18n/formatting` for Esperanto."
msgstr "添加了用于 Esperanto 的 :doc:`/topics/i18n/formatting`。"

msgid ""
"The new :option:`--no-color` option for ``django-admin`` disables the "
"colorization of management command output."
msgstr ""
"新的 :option:`--no-color` 选项用于 ``django-admin``，用于禁用管理命令输出的颜"
"色标记。"

msgid ""
"The new :option:`dumpdata --natural-foreign` and :option:`dumpdata --natural-"
"primary` options, and the new ``use_natural_foreign_keys`` and "
"``use_natural_primary_keys`` arguments for ``serializers.serialize()``, "
"allow the use of natural primary keys when serializing."
msgstr ""
"新的 :option:`dumpdata --natural-foreign` 和 :option:`dumpdata --natural-"
"primary` 选项，以及 ``serializers.serialize()`` 的新参数 "
"``use_natural_foreign_keys`` 和 ``use_natural_primary_keys`` 允许在序列化时使"
"用自然主键。"

msgid ""
"It is no longer necessary to provide the cache table name or the ``--"
"database`` option for the :djadmin:`createcachetable` command. Django takes "
"this information from your settings file. If you have configured multiple "
"caches or multiple databases, all cache tables are created."
msgstr ""
"不再需要为 :djadmin:`createcachetable` 命令提供缓存表名或 ``--database`` 选"
"项。Django 会从你的设置文件中获取这些信息。如果你配置了多个缓存或多个数据库，"
"所有缓存表都会被创建。"

msgid "The :djadmin:`runserver` command received several improvements:"
msgstr ":djadmin:`runserver` 命令进行了一些改进："

msgid ""
"On Linux systems, if :pypi:`pyinotify` is installed, the development server "
"will reload immediately when a file is changed. Previously, it polled the "
"filesystem for changes every second. That caused a small delay before "
"reloads and reduced battery life on laptops."
msgstr ""
"在 Linux 系统上，如果安装了 :pypi:`pyinotify`，开发服务器将在文件更改时立即重"
"新加载。以前，它每秒轮询文件系统以检测更改，这会导致重新加载前有一小段延迟，"
"并降低笔记本电脑的电池寿命。"

msgid ""
"In addition, the development server automatically reloads when a translation "
"file is updated, i.e. after running :djadmin:`compilemessages`."
msgstr ""
"此外，当翻译文件更新后，即在运行 :djadmin:`compilemessages` 后，开发服务器会"
"自动重新加载。"

msgid ""
"All HTTP requests are logged to the console, including requests for static "
"files or ``favicon.ico`` that used to be filtered out."
msgstr ""
"所有 HTTP 请求都会记录到控制台，包括以前被过滤掉的用于静态文件或 ``favicon."
"ico`` 的请求。"

msgid ""
"Management commands can now produce syntax colored output under Windows if "
"the ANSICON third-party tool is installed and active."
msgstr ""
"如果安装并激活了第三方工具 ANSICON，Windows 下的管理命令现在可以生成带有语法"
"着色的输出。"

msgid ""
":djadmin:`collectstatic` command with symlink option is now supported on "
"Windows NT 6 (Windows Vista and newer)."
msgstr ""
":djadmin:`collectstatic` 命令现在在 Windows NT 6 (Windows Vista 及更新版本) "
"上支持符号链接选项。"

msgid ""
"Initial SQL data now works better if the :pypi:`sqlparse` Python library is "
"installed."
msgstr "如果安装了 :pypi:`sqlparse` Python 库，初始 SQL 数据现在将更好地工作。"

msgid ""
"Note that it's deprecated in favor of the :class:`~django.db.migrations."
"operations.RunSQL` operation of migrations, which benefits from the improved "
"behavior."
msgstr ""
"请注意，它已被弃用，推荐使用迁移的 :class:`~django.db.migrations.operations."
"RunSQL` 操作，这样可以受益于改进后的行为。"

msgid ""
"The :meth:`QuerySet.update_or_create() <django.db.models.query.QuerySet."
"update_or_create>` method was added."
msgstr ""
"新增了 :meth:`QuerySet.update_or_create() <django.db.models.query.QuerySet."
"update_or_create>` 方法。"

msgid ""
"The new :attr:`~django.db.models.Options.default_permissions` model ``Meta`` "
"option allows you to customize (or disable) creation of the default add, "
"change, and delete permissions."
msgstr ""
"新的 :attr:`~django.db.models.Options.default_permissions` 模型 ``Meta`` 选项"
"允许你自定义（或禁用）默认添加、修改和删除权限的创建。"

msgid ""
"Explicit :class:`~django.db.models.OneToOneField` for :ref:`multi-table-"
"inheritance` are now discovered in abstract classes."
msgstr ""
"现在在抽象类中可以显式使用 :class:`~django.db.models.OneToOneField` 用于 :"
"ref:`multi-table-inheritance`。"

msgid ""
"It is now possible to avoid creating a backward relation for :class:`~django."
"db.models.OneToOneField` by setting its :attr:`~django.db.models.ForeignKey."
"related_name` to ``'+'`` or ending it with ``'+'``."
msgstr ""
"现在可以通过将 :class:`~django.db.models.OneToOneField` 的 :attr:`~django.db."
"models.ForeignKey.related_name` 设置为 ``'+'`` 或以 ``'+'`` 结尾来避免创建反"
"向关系。"

msgid ""
":class:`F expressions <django.db.models.F>` support the power operator "
"(``**``)."
msgstr ":class:`F 表达式 <django.db.models.F>` 支持幂运算符（``**``）。"

msgid ""
"The ``remove()`` and ``clear()`` methods of the related managers created by "
"``ForeignKey`` and ``GenericForeignKey`` now accept the ``bulk`` keyword "
"argument to control whether or not to perform operations in bulk (i.e. using "
"``QuerySet.update()``). Defaults to ``True``."
msgstr ""
"由 ``ForeignKey`` 和 ``GenericForeignKey`` 创建的关联管理器的 ``remove()`` "
"和 ``clear()`` 方法现在接受 ``bulk`` 关键字参数，用于控制是否批量执行操作（即"
"使用 ``QuerySet.update()``）。默认为 ``True``。"

msgid ""
"It is now possible to use ``None`` as a query value for the :lookup:`iexact` "
"lookup."
msgstr "现在可以将 ``None`` 用作 :lookup:`iexact` 查找的查询值。"

msgid ""
"It is now possible to pass a callable as value for the attribute :attr:"
"`~django.db.models.ForeignKey.limit_choices_to` when defining a "
"``ForeignKey`` or ``ManyToManyField``."
msgstr ""
"现在在定义 ``ForeignKey`` 或 ``ManyToManyField`` 时，可以将可调用对象作为属"
"性 :attr:`~django.db.models.ForeignKey.limit_choices_to` 的值传递。"

msgid ""
"Calling :meth:`only() <django.db.models.query.QuerySet.only>` and :meth:"
"`defer() <django.db.models.query.QuerySet.defer>` on the result of :meth:"
"`QuerySet.values() <django.db.models.query.QuerySet.values>` now raises an "
"error (before that, it would either result in a database error or incorrect "
"data)."
msgstr ""
"在 :meth:`QuerySet.values() <django.db.models.query.QuerySet.values>` 的结果"
"上调用 :meth:`only() <django.db.models.query.QuerySet.only>` 和 :meth:"
"`defer() <django.db.models.query.QuerySet.defer>` 现在会引发错误（之前会导致"
"数据库错误或不正确的数据）。"

msgid ""
"You can use a single list for ``index_together`` (rather than a list of "
"lists) when specifying a single set of fields."
msgstr ""

msgid ""
"Custom intermediate models having more than one foreign key to any of the "
"models participating in a many-to-many relationship are now permitted, "
"provided you explicitly specify which foreign keys should be used by setting "
"the new :attr:`ManyToManyField.through_fields <django.db.models."
"ManyToManyField.through_fields>` argument."
msgstr ""
"现在允许自定义中间模型具有多个外键与参与多对多关系的任何模型相关联，前提是你"
"通过设置新的 :attr:`ManyToManyField.through_fields <django.db.models."
"ManyToManyField.through_fields>` 参数来明确指定应该使用哪些外键。"

msgid ""
"Assigning a model instance to a non-relation field will now throw an error. "
"Previously this used to work if the field accepted integers as input as it "
"took the primary key."
msgstr ""
"现在，将模型实例分配给非关联字段将会抛出错误。之前，如果字段接受整数作为输入"
"并将其作为主键，这样的操作是有效的。"

msgid ""
"Integer fields are now validated against database backend specific min and "
"max values based on their :meth:`internal_type <django.db.models.Field."
"get_internal_type>`. Previously model field validation didn't prevent values "
"out of their associated column data type range from being saved resulting in "
"an integrity error."
msgstr ""
"整数字段现在会根据它们的 :meth:`internal_type <django.db.models.Field."
"get_internal_type>` 验证数据库后端特定的最小值和最大值。以前，模型字段的验证"
"不会阻止保存超出其关联列数据类型范围的值，从而导致完整性错误。"

msgid ""
"It is now possible to explicitly :meth:`~django.db.models.query.QuerySet."
"order_by` a relation ``_id`` field by using its attribute name."
msgstr ""
"现在可以通过使用关联字段的属性名称来显式 :meth:`~django.db.models.query."
"QuerySet.order_by` 一个关系的 ``_id`` 字段。"

msgid ""
"The ``enter`` argument was added to the :data:`~django.test.signals."
"setting_changed` signal."
msgstr ""
"在 :data:`~django.test.signals.setting_changed` 信号中添加了 ``enter`` 参数。"

msgid ""
"The model signals can be now be connected to using a ``str`` of the "
"``'app_label.ModelName'`` form – just like related fields – to lazily "
"reference their senders."
msgstr ""
"现在可以使用 ``'app_label.ModelName'`` 形式的 ``str`` 来连接模型信号，就像相"
"关字段一样，以惰性引用它们的发送者。"

msgid ""
"The :meth:`Context.push() <django.template.Context.push>` method now returns "
"a context manager which automatically calls :meth:`pop() <django.template."
"Context.pop>` upon exiting the ``with`` statement. Additionally, :meth:"
"`push() <django.template.Context.push>` now accepts parameters that are "
"passed to the ``dict`` constructor used to build the new context level."
msgstr ""
":meth:`Context.push() <django.template.Context.push>` 方法现在返回一个上下文"
"管理器，在退出 ``with`` 语句时会自动调用 :meth:`pop() <django.template."
"Context.pop>`。此外，:meth:`push() <django.template.Context.push>` 现在接受参"
"数，这些参数将传递给用于构建新上下文级别的 ``dict`` 构造函数。"

msgid ""
"The new :meth:`Context.flatten() <django.template.Context.flatten>` method "
"returns a ``Context``'s stack as one flat dictionary."
msgstr ""
"新的 :meth:`Context.flatten() <django.template.Context.flatten>` 方法将一个 "
"``Context`` 的堆栈返回为一个扁平的字典。"

msgid ""
"``Context`` objects can now be compared for equality (internally, this uses :"
"meth:`Context.flatten() <django.template.Context.flatten>` so the internal "
"structure of each ``Context``'s stack doesn't matter as long as their "
"flattened version is identical)."
msgstr ""
"``Context`` 对象现在可以进行相等性比较（内部使用 :meth:`Context.flatten() "
"<django.template.Context.flatten>` 进行比较，因此只要它们的扁平化版本相同，每"
"个 ``Context`` 的堆栈的内部结构就不重要）。"

msgid ""
"The :ttag:`widthratio` template tag now accepts an ``\"as\"`` parameter to "
"capture the result in a variable."
msgstr ""
":ttag:`widthratio` 模板标签现在接受一个 ``\"as\"`` 参数，以将结果存储在一个变"
"量中。"

msgid ""
"The :ttag:`include` template tag will now also accept anything with a "
"``render()`` method (such as a ``Template``) as an argument. String "
"arguments will be looked up using :func:`~django.template.loader."
"get_template` as always."
msgstr ""
":ttag:`include` 模板标签现在还接受任何具有 ``render()`` 方法的对象（例如 "
"``Template``）作为参数。字符串参数将如常使用 :func:`~django.template.loader."
"get_template` 进行查找。"

msgid "It is now possible to :ttag:`include` templates recursively."
msgstr "现在可以递归地使用 :ttag:`include` 模板。"

msgid ""
"Template objects now have an origin attribute set when ``TEMPLATE_DEBUG`` is "
"``True``. This allows template origins to be inspected and logged outside of "
"the ``django.template`` infrastructure."
msgstr ""
"当 ``TEMPLATE_DEBUG`` 为 ``True`` 时，模板对象现在具有一个设置的 origin 属"
"性。这允许在 ``django.template`` 基础结构之外检查和记录模板的来源。"

msgid ""
"``TypeError`` exceptions are no longer silenced when raised during the "
"rendering of a template."
msgstr "在模板渲染过程中引发的 ``TypeError`` 异常不再被消除声音。"

msgid ""
"The following functions now accept a ``dirs`` parameter which is a list or "
"tuple to override ``TEMPLATE_DIRS``:"
msgstr ""
"以下函数现在接受一个 ``dirs`` 参数，这是一个列表或元组，用于覆盖 "
"``TEMPLATE_DIRS``："

msgid ":func:`django.template.loader.get_template()`"
msgstr ":func:`django.template.loader.get_template()`"

msgid ":func:`django.template.loader.select_template()`"
msgstr ":func:`django.template.loader.select_template()`"

msgid ":func:`django.shortcuts.render()`"
msgstr ":func:`django.shortcuts.render()`"

msgid ""
"The :tfilter:`time` filter now accepts timezone-related :ref:`format "
"specifiers <date-and-time-formatting-specifiers>` ``'e'``, ``'O'`` , ``'T'`` "
"and ``'Z'`` and is able to digest :ref:`time-zone-aware "
"<naive_vs_aware_datetimes>` ``datetime`` instances performing the expected "
"rendering."
msgstr ""
":tfilter:`time` 过滤器现在接受与时区相关的 :ref:`格式说明符 <date-and-time-"
"formatting-specifiers>` ``'e'``, ``'O'``, ``'T'`` 和 ``'Z'``，并且能够处理 :"
"ref:`时区感知的 <naive_vs_aware_datetimes>` ``datetime`` 实例，执行预期的渲"
"染。"

msgid ""
"The :ttag:`cache` tag will now try to use the cache called "
"\"template_fragments\" if it exists and fall back to using the default cache "
"otherwise. It also now accepts an optional ``using`` keyword argument to "
"control which cache it uses."
msgstr ""
":ttag:`cache` 标签现在会尝试使用名为 \"template_fragments\" 的缓存（如果存"
"在），否则会回退使用默认缓存。它还现在接受一个可选的 ``using`` 关键字参数，以"
"控制使用哪个缓存。"

msgid ""
"The new :tfilter:`truncatechars_html` filter truncates a string to be no "
"longer than the specified number of characters, taking HTML into account."
msgstr ""
"新的 :tfilter:`truncatechars_html` 过滤器根据指定的字符数截断字符串，考虑到 "
"HTML。"

msgid ""
"The new :attr:`HttpRequest.scheme <django.http.HttpRequest.scheme>` "
"attribute specifies the scheme of the request (``http`` or ``https`` "
"normally)."
msgstr ""
"新的 :attr:`HttpRequest.scheme <django.http.HttpRequest.scheme>` 属性指定请求"
"的协议（通常是 ``http`` 或 ``https``）。"

msgid ""
"The shortcut :func:`redirect() <django.shortcuts.redirect>` now supports "
"relative URLs."
msgstr ""
"快捷方式 :func:`redirect() <django.shortcuts.redirect>` 现在支持相对 URL。"

msgid ""
"The new :class:`~django.http.JsonResponse` subclass of :class:`~django.http."
"HttpResponse` helps easily create JSON-encoded responses."
msgstr ""
":class:`~django.http.JsonResponse` 是 :class:`~django.http.HttpResponse` 的一"
"个子类，它可以轻松创建 JSON 编码的响应。"

msgid ""
":class:`~django.test.runner.DiscoverRunner` has two new attributes, :attr:"
"`~django.test.runner.DiscoverRunner.test_suite` and :attr:`~django.test."
"runner.DiscoverRunner.test_runner`, which facilitate overriding the way "
"tests are collected and run."
msgstr ""
":class:`~django.test.runner.DiscoverRunner` 新增了两个属性，:attr:`~django."
"test.runner.DiscoverRunner.test_suite` 和 :attr:`~django.test.runner."
"DiscoverRunner.test_runner`，它们有助于重写测试的收集和运行方式。"

msgid ""
"The ``fetch_redirect_response`` argument was added to :meth:`~django.test."
"SimpleTestCase.assertRedirects`. Since the test client can't fetch externals "
"URLs, this allows you to use ``assertRedirects`` with redirects that aren't "
"part of your Django app."
msgstr ""
":meth:`~django.test.SimpleTestCase.assertRedirects` 添加了 "
"``fetch_redirect_response`` 参数。由于测试客户端无法获取外部 URL，这使您可以"
"在不属于您的 Django 应用程序的重定向上使用 ``assertRedirects``。"

msgid ""
"Correct handling of scheme when making comparisons in :meth:`~django.test."
"SimpleTestCase.assertRedirects`."
msgstr ""
"在 :meth:`~django.test.SimpleTestCase.assertRedirects` 中进行比较时，现在可以"
"正确处理协议。"

msgid ""
"The ``secure`` argument was added to all the request methods of :class:"
"`~django.test.Client`. If ``True``, the request will be made through HTTPS."
msgstr ""
":class:`~django.test.Client` 的所有请求方法现在都添加了 ``secure`` 参数。如果"
"设置为 ``True``，请求将通过 HTTPS 发送。"

msgid ""
":meth:`~django.test.TransactionTestCase.assertNumQueries` now prints out the "
"list of executed queries if the assertion fails."
msgstr ""
"如果断言失败，:meth:`~django.test.TransactionTestCase.assertNumQueries` 现在"
"会打印出已执行查询的列表。"

msgid ""
"The ``WSGIRequest`` instance generated by the test handler is now attached "
"to the :attr:`django.test.Response.wsgi_request` attribute."
msgstr ""
"由测试处理程序生成的 ``WSGIRequest`` 实例现在附加到 :attr:`django.test."
"Response.wsgi_request` 属性。"

msgid ""
"The database settings for testing have been collected into a dictionary "
"named :setting:`TEST <DATABASE-TEST>`."
msgstr ""
"测试的数据库设置已经收集到一个名为 :setting:`TEST <DATABASE-TEST>` 的字典中。"

msgid "Utilities"
msgstr "实用程序"

msgid ""
":class:`~django.core.validators.RegexValidator` now accepts the optional :"
"attr:`~django.core.validators.RegexValidator.flags` and Boolean :attr:"
"`~django.core.validators.RegexValidator.inverse_match` arguments. The :attr:"
"`~django.core.validators.RegexValidator.inverse_match` attribute determines "
"if the :exc:`~django.core.exceptions.ValidationError` should be raised when "
"the regular expression pattern matches (``True``) or does not match "
"(``False``, by default) the provided ``value``. The :attr:`~django.core."
"validators.RegexValidator.flags` attribute sets the flags used when "
"compiling a regular expression string."
msgstr ""
":class:`~django.core.validators.RegexValidator` 现在接受可选的 :attr:"
"`~django.core.validators.RegexValidator.flags` 和布尔型 :attr:`~django.core."
"validators.RegexValidator.inverse_match` 参数。:attr:`~django.core."
"validators.RegexValidator.inverse_match` 属性确定在正则表达式模式匹配"
"（``True``）或不匹配（默认为 ``False``）提供的 ``value`` 时是否引发 :exc:"
"`~django.core.exceptions.ValidationError`。:attr:`~django.core.validators."
"RegexValidator.flags` 属性设置编译正则表达式字符串时使用的标志。"

msgid ""
":class:`~django.core.validators.URLValidator` now accepts an optional "
"``schemes`` argument which allows customization of the accepted URI schemes "
"(instead of the defaults ``http(s)`` and ``ftp(s)``)."
msgstr ""
":class:`~django.core.validators.URLValidator` 现在接受一个可选的 ``schemes`` "
"参数，允许自定义接受的 URI 方案（而不是默认的 ``http(s)`` 和 ``ftp(s)``）。"

msgid ""
":func:`~django.core.validators.validate_email` now accepts addresses with "
"IPv6 literals, like ``example@[2001:db8::1]``, as specified in RFC 5321."
msgstr ""
":func:`~django.core.validators.validate_email` 现在接受包含 IPv6 字面量的地"
"址，例如 ``example@[2001:db8::1]``，如 RFC 5321 中规定。"

msgid "Backwards incompatible changes in 1.7"
msgstr "1.7 版中向后不兼容的变化"

msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"ref:`deprecation plan <deprecation-removed-in-1.7>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""
"除了本节中概述的更改之外，确保查看任何已删除功能的 :ref:`废弃计划 "
"<deprecation-removed-in-1.7>`。如果您在给定功能的废弃时间段内未更新您的代码，"
"其删除可能会被视为向后不兼容的更改。"

msgid "``allow_syncdb`` / ``allow_migrate``"
msgstr "``allow_syncdb`` / ``allow_migrate``"

msgid ""
"While Django will still look at ``allow_syncdb`` methods even though they "
"should be renamed to ``allow_migrate``, there is a subtle difference in "
"which models get passed to these methods."
msgstr ""
"尽管 Django 仍然会查看 ``allow_syncdb`` 方法，尽管它们应该重命名为 "
"``allow_migrate``，但传递给这些方法的模型有一些微妙的区别。"

msgid ""
"For apps with migrations, ``allow_migrate`` will now get passed :ref:"
"`historical models <historical-models>`, which are special versioned models "
"without custom attributes, methods or managers. Make sure your "
"``allow_migrate`` methods are only referring to fields or other items in "
"``model._meta``."
msgstr ""
"对于具有迁移的应用程序，``allow_migrate`` 现在将传递 :ref:`历史模型 "
"<historical-models>`，这些模型是特殊的带有自定义属性、方法或管理器的版本模"
"型。确保您的 ``allow_migrate`` 方法只引用了 ``model._meta`` 中的字段或其他"
"项。"

msgid "initial_data"
msgstr "initial_data"

msgid ""
"Apps with migrations will not load ``initial_data`` fixtures when they have "
"finished migrating. Apps without migrations will continue to load these "
"fixtures during the phase of ``migrate`` which emulates the old ``syncdb`` "
"behavior, but any new apps will not have this support."
msgstr ""
"具有迁移的应用程序在完成迁移后将不再加载 ``initial_data`` 修复程序。没有迁移"
"的应用程序将在模拟旧的 ``syncdb`` 行为的 ``migrate`` 阶段继续加载这些修复程"
"序，但任何新的应用程序将不再支持这一功能。"

msgid ""
"Instead, you are encouraged to load initial data in migrations if you need "
"it (using the ``RunPython`` operation and your model classes); this has the "
"added advantage that your initial data will not need updating every time you "
"change the schema."
msgstr ""
"相反，我们鼓励您在需要时在迁移中加载初始数据（使用 ``RunPython`` 操作和您的模"
"型类）；这有一个附加优势，即每次更改模式时都不需要更新初始数据。"

msgid ""
"Additionally, like the rest of Django's old ``syncdb`` code, "
"``initial_data`` has been started down the deprecation path and will be "
"removed in Django 1.9."
msgstr ""
"另外，就像 Django 的旧 ``syncdb`` 代码一样，``initial_data`` 也已经开始了弃用"
"路径，并将在 Django 1.9 中移除。"

msgid "``deconstruct()`` and serializability"
msgstr "``deconstruct()`` 和可序列化性"

msgid ""
"Django now requires all Field classes and all of their constructor arguments "
"to be serializable. If you modify the constructor signature in your custom "
"Field in any way, you'll need to implement a ``deconstruct()`` method; we've "
"expanded the custom field documentation with :ref:`instructions on "
"implementing this method <custom-field-deconstruct-method>`."
msgstr ""
"Django 现在要求所有 Field 类及其构造函数参数都必须可序列化。如果你以任何方式"
"修改了自定义 Field 的构造函数签名，你需要实现一个 ``deconstruct()`` 方法；我"
"们已经在自定义字段文档中扩展了 :ref:`关于实现这个方法的说明 <custom-field-"
"deconstruct-method>`。"

msgid ""
"The requirement for all field arguments to be :ref:`serializable <migration-"
"serializing>` means that any custom class instances being passed into Field "
"constructors - things like custom Storage subclasses, for instance - need to "
"have a :ref:`deconstruct method defined on them as well <custom-deconstruct-"
"method>`, though Django provides a handy class decorator that will work for "
"most applications."
msgstr ""
"所有字段参数需要是可 :ref:`序列化的 <migration-serializing>` 要求意味着任何传"
"递到 Field 构造函数中的自定义类实例，比如自定义的 Storage 子类，都需要在它们"
"上面定义一个 :ref:`deconstruct 方法 <custom-deconstruct-method>`，尽管 "
"Django 提供了一个方便的类装饰器，对大多数应用都适用。"

msgid "App-loading changes"
msgstr "应用加载的变化"

msgid "Start-up sequence"
msgstr "启动序列"

msgid ""
"Django 1.7 loads application configurations and models as soon as it starts. "
"While this behavior is more straightforward and is believed to be more "
"robust, regressions cannot be ruled out. See :ref:`applications-"
"troubleshooting` for solutions to some problems you may encounter."
msgstr ""
"Django 1.7 在启动时会立即加载应用程序配置和模型。虽然这种行为更为直接，被认为"
"更加健壮，但不能完全排除回归问题。有关您可能遇到的一些问题的解决方案，请参"
"阅 :ref:`applications-troubleshooting`。"

msgid "Standalone scripts"
msgstr "独一无二的脚本"

msgid ""
"If you're using Django in a plain Python script — rather than a management "
"command — and you rely on the :envvar:`DJANGO_SETTINGS_MODULE` environment "
"variable, you must now explicitly initialize Django at the beginning of your "
"script with:"
msgstr ""
"如果你在一个普通的 Python 脚本中使用 Django，而不是管理命令，并且依赖于 :"
"envvar:`DJANGO_SETTINGS_MODULE` 环境变量，现在你必须在脚本开头显式地初始化 "
"Django，如下所示："

msgid "Otherwise, you will hit an ``AppRegistryNotReady`` exception."
msgstr "否则，你将遇到一个 ``AppRegistryNotReady`` 异常。"

msgid "WSGI scripts"
msgstr "WSGI 脚本"

msgid ""
"Until Django 1.3, the recommended way to create a WSGI application was::"
msgstr "在 Django 1.3 之前，创建一个 WSGI 应用程序的推荐方法是："

msgid "In Django 1.4, support for WSGI was improved and the API changed to::"
msgstr "在 Django 1.4 中，对 WSGI 的支持得到改进，并且 API 发生了变化："

msgid ""
"If you're still using the former style in your WSGI script, you need to "
"upgrade to the latter, or you will hit an ``AppRegistryNotReady`` exception."
msgstr ""
"如果你的 WSGI 脚本仍在使用前一种风格，你需要升级到后一种风格，否则你将遇到一"
"个 ``AppRegistryNotReady`` 异常。"

msgid "App registry consistency"
msgstr "应用程序注册表的一致性"

msgid ""
"It is no longer possible to have multiple installed applications with the "
"same label. In previous versions of Django, this didn't always work "
"correctly, but didn't crash outright either."
msgstr ""
"不再允许安装具有相同标签的多个应用程序。在 Django 的早期版本中，这种情况不总"
"是正常工作，但也不会完全崩溃。"

msgid ""
"If you have two apps with the same label, you should create an :class:"
"`~django.apps.AppConfig` for one of them and override its :class:`~django."
"apps.AppConfig.label` there. You should then adjust your code wherever it "
"references this application or its models with the old label."
msgstr ""
"如果你有两个具有相同标签的应用程序，你应该为其中一个创建一个 :class:`~django."
"apps.AppConfig`，并在其中覆盖其 :class:`~django.apps.AppConfig.label`。然后，"
"你应该在引用该应用程序或其模型的任何代码中，将旧标签调整为新标签。"

msgid ""
"It isn't possible to import the same model twice through different paths any "
"more. As of Django 1.6, this may happen only if you're manually putting a "
"directory and a subdirectory on :envvar:`PYTHONPATH`. Refer to the section "
"on the new project layout in the :doc:`1.4 release notes </releases/1.4>` "
"for migration instructions."
msgstr ""
"不再允许通过不同路径两次导入同一模型。从 Django 1.6 开始，只有在手动将一个目"
"录和一个子目录放在 :envvar:`PYTHONPATH` 上时，才会发生这种情况。有关迁移说"
"明，请参阅 :doc:`1.4 发布说明中的新项目布局部分 </releases/1.4>`。"

msgid "You should make sure that:"
msgstr "您应该确保："

msgid ""
"All models are defined in applications that are listed in :setting:"
"`INSTALLED_APPS` or have an explicit :attr:`~django.db.models.Options."
"app_label`."
msgstr ""
"所有模型都在列在 :setting:`INSTALLED_APPS` 中或具有明确 :attr:`~django.db."
"models.Options.app_label` 的应用程序中定义。"

msgid ""
"Models aren't imported as a side-effect of loading their application. "
"Specifically, you shouldn't import models in the root module of an "
"application nor in the module that define its configuration class."
msgstr ""
"模型不会作为加载其应用程序的副作用而导入。具体而言，您不应该在应用程序的根模"
"块或定义其配置类的模块中导入模型。"

msgid ""
"Django will enforce these requirements as of version 1.9, after a "
"deprecation period."
msgstr "从版本 1.9 开始，Django 将强制执行这些要求，经过一段废弃期之后。"

msgid "Subclassing AppCommand"
msgstr "继承 AppCommand 类"

msgid ""
"Subclasses of :class:`~django.core.management.AppCommand` must now implement "
"a :meth:`~django.core.management.AppCommand.handle_app_config` method "
"instead of ``handle_app()``. This method receives an :class:`~django.apps."
"AppConfig` instance instead of a models module."
msgstr ""
":class:`~django.core.management.AppCommand` 的子类现在必须实现 :meth:"
"`~django.core.management.AppCommand.handle_app_config` 方法，而不是 "
"``handle_app()``。这个方法接收一个 :class:`~django.apps.AppConfig` 实例，而不"
"是一个模型模块。"

msgid "Introspecting applications"
msgstr "检查应用程序信息"

msgid ""
"Since :setting:`INSTALLED_APPS` now supports application configuration "
"classes in addition to application modules, you should review code that "
"accesses this setting directly and use the app registry (:attr:`django.apps."
"apps`) instead."
msgstr ""
"由于 :setting:`INSTALLED_APPS` 现在支持应用程序配置类，而不仅仅是应用程序模"
"块，因此你应该检查直接访问此设置的代码，并改为使用应用程序注册表 (:attr:"
"`django.apps.apps`)。"

msgid ""
"The app registry has preserved some features of the old app cache. Even "
"though the app cache was a private API, obsolete methods and arguments will "
"be removed through a standard deprecation path, with the exception of the "
"following changes that take effect immediately:"
msgstr ""
"应用程序注册表保留了一些旧的应用程序缓存的特性。尽管应用程序缓存是一个私有 "
"API，但过时的方法和参数将通过标准的废弃路径逐步移除，但以下变更将立即生效："

msgid ""
"``get_model`` raises :exc:`LookupError` instead of returning ``None`` when "
"no model is found."
msgstr ""
"当找不到模型时，``get_model`` 现在会引发 :exc:`LookupError`，而不是返回 "
"``None``。"

msgid ""
"The ``only_installed`` argument of ``get_model`` and ``get_models`` no "
"longer exists, nor does the ``seed_cache`` argument of ``get_model``."
msgstr ""
"``get_model`` 和 ``get_models`` 的 ``only_installed`` 参数不再存在，"
"``get_model`` 的 ``seed_cache`` 参数也不再存在。"

msgid "Management commands and order of :setting:`INSTALLED_APPS`"
msgstr "管理命令和 :setting:`INSTALLED_APPS` 的顺序"

msgid ""
"When several applications provide management commands with the same name, "
"Django loads the command from the application that comes first in :setting:"
"`INSTALLED_APPS`. Previous versions loaded the command from the application "
"that came last."
msgstr ""
"当多个应用程序提供具有相同名称的管理命令时，Django 会从 :setting:"
"`INSTALLED_APPS` 中排在前面的应用程序加载命令。之前的版本会从排在最后的应用程"
"序加载命令。"

msgid ""
"This brings discovery of management commands in line with other parts of "
"Django that rely on the order of :setting:`INSTALLED_APPS`, such as static "
"files, templates, and translations."
msgstr ""
"这将管理命令的发现与 Django 的其他部分保持一致，这些部分依赖于 :setting:"
"`INSTALLED_APPS` 的顺序，比如静态文件、模板和翻译。"

msgid "``ValidationError`` constructor and internal storage"
msgstr "``ValidationError`` 构造函数和内部存储"

msgid ""
"The behavior of the ``ValidationError`` constructor has changed when it "
"receives a container of errors as an argument (e.g. a ``list`` or an "
"``ErrorList``):"
msgstr ""
"当 ``ValidationError`` 构造函数接收到错误容器作为参数时（例如，一个 ``list`` "
"或一个 ``ErrorList``），其行为已经发生了变化："

msgid ""
"It converts any strings it finds to instances of ``ValidationError`` before "
"adding them to its internal storage."
msgstr ""
"它会在将字符串添加到其内部存储之前，将其转换为 ``ValidationError`` 的实例。"

msgid ""
"It doesn't store the given container but rather copies its content to its "
"own internal storage; previously the container itself was added to the "
"``ValidationError`` instance and used as internal storage."
msgstr ""
"它不会存储给定的容器，而是将其内容复制到自己的内部存储中；以前容器本身被添加"
"到 ``ValidationError`` 实例并用作内部存储。"

msgid ""
"This means that if you access the ``ValidationError`` internal storages, "
"such as ``error_list``; ``error_dict``; or the return value of "
"``update_error_dict()`` you may find instances of ``ValidationError`` where "
"you would have previously found strings."
msgstr ""
"这意味着如果你访问 ``ValidationError`` 的内部存储，比如 ``error_list``、"
"``error_dict`` 或 ``update_error_dict()`` 的返回值，你可能会在以前找到字符串"
"的地方找到 ``ValidationError`` 的实例。"

msgid ""
"Also if you directly assigned the return value of ``update_error_dict()`` to "
"``Form._errors`` you may inadvertently add ``list`` instances where "
"``ErrorList`` instances are expected. This is a problem because unlike a "
"simple ``list``, an ``ErrorList`` knows how to handle instances of "
"``ValidationError``."
msgstr ""
"此外，如果你直接将 ``update_error_dict()`` 的返回值赋给 ``Form._errors``，你"
"可能会无意中添加 ``list`` 实例，而期望的是 ``ErrorList`` 实例。这是一个问题，"
"因为与简单的 ``list`` 不同，``ErrorList`` 知道如何处理 ``ValidationError`` 的"
"实例。"

msgid ""
"Most use-cases that warranted using these private APIs are now covered by "
"the newly introduced :meth:`Form.add_error() <django.forms.Form."
"add_error()>` method::"
msgstr ""
"现在，大多数需要使用这些私有 API 的用例都可以使用新引入的 :meth:`Form."
"add_error() <django.forms.Form.add_error()>` 方法来处理："

msgid ""
"If you need both Django <= 1.6 and 1.7 compatibility you can't use :meth:"
"`Form.add_error() <django.forms.Form.add_error()>` since it wasn't available "
"before Django 1.7, but you can use the following workaround to convert any "
"``list`` into ``ErrorList``::"
msgstr ""
"如果你需要同时兼容 Django <= 1.6 和 1.7，由于在 Django 1.7 之前没有提供 :"
"meth:`Form.add_error() <django.forms.Form.add_error()>` 方法，你可以使用以下"
"解决方法将任何 ``list`` 转换为 ``ErrorList``："

msgid "Behavior of ``LocMemCache`` regarding pickle errors"
msgstr "关于 ``LocMemCache`` 对 pickle 错误的行为"

msgid ""
"An inconsistency existed in previous versions of Django regarding how pickle "
"errors are handled by different cache backends. ``django.core.cache.backends."
"locmem.LocMemCache`` used to fail silently when such an error occurs, which "
"is inconsistent with other backends and leads to cache-specific errors. This "
"has been fixed in Django 1.7, see :ticket:`21200` for more details."
msgstr ""
"在以前的 Django 版本中存在一个不一致之处，关于不同缓存后端如何处理 pickle 错"
"误。``django.core.cache.backends.locmem.LocMemCache`` 以前在发生这种错误时会"
"静默失败，这与其他后端不一致，并导致了与缓存相关的错误。在 Django 1.7 中已经"
"修复了这个问题，详情请参阅 :ticket:`21200`。"

msgid "Cache keys are now generated from the request's absolute URL"
msgstr "现在缓存键从请求的绝对 URL 生成"

msgid ""
"Previous versions of Django generated cache keys using a request's path and "
"query string but not the scheme or host. If a Django application was serving "
"multiple subdomains or domains, cache keys could collide. In Django 1.7, "
"cache keys vary by the absolute URL of the request including scheme, host, "
"path, and query string. For example, the URL portion of a cache key is now "
"generated from ``https://www.example.com/path/to/?key=val`` rather than ``/"
"path/to/?key=val``. The cache keys generated by Django 1.7 will be different "
"from the keys generated by older versions of Django. After upgrading to "
"Django 1.7, the first request to any previously cached URL will be a cache "
"miss."
msgstr ""
"在以前的 Django 版本中，缓存键是使用请求的路径和查询字符串生成的，但不包括 "
"scheme 和 host。如果一个 Django 应用程序服务多个子域或域名，缓存键可能会发生"
"冲突。在 Django 1.7 中，缓存键会根据请求的绝对 URL 包括 scheme、host、path 和"
"查询字符串而变化。例如，缓存键的 URL 部分现在是从 ``https://www.example.com/"
"path/to/?key=val`` 生成的，而不是 ``/path/to/?key=val``。Django 1.7 生成的缓"
"存键将与旧版本的 Django 生成的键不同。升级到 Django 1.7 后，对任何以前缓存的 "
"URL 的第一个请求将导致缓存未命中。"

msgid "Passing ``None`` to ``Manager.db_manager()``"
msgstr "将 ``None`` 传递给 ``Manager.db_manager()``"

msgid ""
"In previous versions of Django, it was possible to use "
"``db_manager(using=None)`` on a model manager instance to obtain a manager "
"instance using default routing behavior, overriding any manually specified "
"database routing. In Django 1.7, a value of ``None`` passed to db_manager "
"will produce a router that *retains* any manually assigned database routing "
"-- the manager will *not* be reset. This was necessary to resolve an "
"inconsistency in the way routing information cascaded over joins. See :"
"ticket:`13724` for more details."
msgstr ""
"在以前的 Django 版本中，可以在模型管理器实例上使用 "
"``db_manager(using=None)`` 来获取一个使用默认路由行为的管理器实例，覆盖任何手"
"动指定的数据库路由。在 Django 1.7 中，传递给 db_manager 的值为 ``None`` 将产"
"生一个保留任何手动分配的数据库路由的路由器 -- 管理器将 *不* 被重置。这是为了"
"解决路由信息在连接中级联的方式存在的不一致性。详情请参阅 :ticket:`13724`。"

msgid "``pytz`` may be required"
msgstr "可能需要使用 ``pytz``"

msgid ""
"If your project handles datetimes before 1970 or after 2037 and Django "
"raises a :exc:`ValueError` when encountering them, you will have to install :"
"pypi:`pytz`. You may be affected by this problem if you use Django's time "
"zone-related date formats or :mod:`django.contrib.syndication`."
msgstr ""
"如果你的项目处理 1970 年之前或 2037 年之后的日期时间，并且当 Django 遇到它们"
"时引发 :exc:`ValueError`，那么你将需要安装 :pypi:`pytz`。如果你使用了 Django "
"的时区相关的日期格式或 :mod:`django.contrib.syndication`，可能会受到这个问题"
"的影响。"

msgid "``remove()`` and ``clear()`` methods of related managers"
msgstr "关于相关管理器的 ``remove()`` 和 ``clear()`` 方法"

msgid ""
"The ``remove()`` and ``clear()`` methods of the related managers created by "
"``ForeignKey``, ``GenericForeignKey``, and ``ManyToManyField`` suffered from "
"a number of issues. Some operations ran multiple data modifying queries "
"without wrapping them in a transaction, and some operations didn't respect "
"default filtering when it was present (i.e. when the default manager on the "
"related model implemented a custom ``get_queryset()``)."
msgstr ""
"``ForeignKey``、``GenericForeignKey`` 和 ``ManyToManyField`` 创建的相关管理器"
"的 ``remove()`` 和 ``clear()`` 方法存在一些问题。一些操作在没有包装在事务中的"
"情况下运行多个数据修改查询，而一些操作在存在默认过滤条件时（即当相关模型上的"
"默认管理器实现了自定义的 ``get_queryset()`` 时）不会尊重默认过滤条件。"

msgid "Fixing the issues introduced some backward incompatible changes:"
msgstr "修复这些问题引入了一些向后不兼容的更改："

msgid ""
"The default implementation of ``remove()`` for ``ForeignKey`` related "
"managers changed from a series of ``Model.save()`` calls to a single "
"``QuerySet.update()`` call. The change means that ``pre_save`` and "
"``post_save`` signals aren't sent anymore. You can use the ``bulk=False`` "
"keyword argument to revert to the previous behavior."
msgstr ""
"``ForeignKey`` 相关管理器的默认 ``remove()`` 实现从一系列的 ``Model.save()`` "
"调用更改为单个 ``QuerySet.update()`` 调用。这个改变意味着不再发送 "
"``pre_save`` 和 ``post_save`` 信号。你可以使用 ``bulk=False`` 关键字参数来恢"
"复到以前的行为。"

msgid ""
"The ``remove()`` and ``clear()`` methods for ``GenericForeignKey`` related "
"managers now perform bulk delete. The ``Model.delete()`` method isn't called "
"on each instance anymore. You can use the ``bulk=False`` keyword argument to "
"revert to the previous behavior."
msgstr ""
"``GenericForeignKey`` 相关管理器的 ``remove()`` 和 ``clear()`` 方法现在执行批"
"量删除。不再在每个实例上调用 ``Model.delete()`` 方法。你可以使用 "
"``bulk=False`` 关键字参数来恢复到以前的行为。"

msgid ""
"The ``remove()`` and ``clear()`` methods for ``ManyToManyField`` related "
"managers perform nested queries when filtering is involved, which may or may "
"not be an issue depending on your database and your data itself. See :ref:"
"`this note <nested-queries-performance>` for more details."
msgstr ""
"与 ``ManyToManyField`` 相关的管理器的 ``remove()`` 和 ``clear()`` 方法在涉及"
"到过滤时执行嵌套查询，这可能会根据你的数据库和数据本身是否成问题而有所不同。"
"有关更多详情，请参阅 :ref:`此说明 <nested-queries-performance>`。"

msgid "Admin login redirection strategy"
msgstr "管理员登录重定向策略"

msgid ""
"Historically, the Django admin site passed the request from an unauthorized "
"or unauthenticated user directly to the login view, without HTTP "
"redirection. In Django 1.7, this behavior changed to conform to a more "
"traditional workflow where any unauthorized request to an admin page will be "
"redirected (by HTTP status code 302) to the login page, with the ``next`` "
"parameter set to the referring path. The user will be redirected there after "
"a successful login."
msgstr ""
"在历史上，Django 管理站点会将未经授权或未经身份验证的用户的请求直接传递给登录"
"视图，而不进行 HTTP 重定向。在 Django 1.7 中，这种行为发生了变化，以符合更传"
"统的工作流程，其中任何未经授权的请求到管理页面都会被重定向（通过 HTTP 状态码 "
"302）到登录页面，其中 ``next`` 参数设置为引用的路径。用户在成功登录后将被重定"
"向到那里。"

msgid ""
"Note also that the admin login form has been updated to not contain the "
"``this_is_the_login_form`` field (now unused) and the ``ValidationError`` "
"code has been set to the more regular ``invalid_login`` key."
msgstr ""
"还请注意，管理员登录表单已更新，不再包含无用的 ``this_is_the_login_form`` 字"
"段，而且 ``ValidationError`` 代码已设置为更常规的 ``invalid_login`` 键。"

msgid ""
"This change was made because such errors can be caused by including an app "
"which expects global transactions (e.g. :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` set to ``True``), or Django's old autocommit behavior, in "
"a project which runs without them; and further, such errors may manifest as "
"data-corruption bugs. It was also made in Django 1.6.3."
msgstr ""
"这个更改是因为这样的错误可能是由包含一个期望全局事务的应用程序（例如：:"
"setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` 设置为 ``True``）或者 "
"Django 的旧的自动提交行为，在一个不需要它们的项目中运行时引起的；而且，这样的"
"错误可能会表现为数据损坏的问题。这个更改也是在 Django 1.6.3 中进行的。"

msgid "Contrib middleware removed from default ``MIDDLEWARE_CLASSES``"
msgstr "Contrib 中间件从默认的 ``MIDDLEWARE_CLASSES`` 中移除"

msgid ""
"The :ref:`app-loading refactor <app-loading-refactor-17-release-note>` "
"deprecated using models from apps which are not part of the :setting:"
"`INSTALLED_APPS` setting. This exposed an incompatibility between the "
"default :setting:`INSTALLED_APPS` and ``MIDDLEWARE_CLASSES`` in the global "
"defaults (``django.conf.global_settings``). To bring these settings in sync "
"and prevent deprecation warnings when doing things like testing reusable "
"apps with minimal settings, :class:`~django.contrib.sessions.middleware."
"SessionMiddleware`, :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware`, and :class:`~django.contrib.messages.middleware."
"MessageMiddleware` were removed from the defaults. These classes will still "
"be included in the default settings generated by :djadmin:`startproject`. "
"Most projects will not be affected by this change but if you were not "
"previously declaring the ``MIDDLEWARE_CLASSES`` in your project settings and "
"relying on the global default you should ensure that the new defaults are in "
"line with your project's needs. You should also check for any code that "
"accesses ``django.conf.global_settings.MIDDLEWARE_CLASSES`` directly."
msgstr ""
":ref:`应用加载重构 <app-loading-refactor-17-release-note>` 弃用了使用不在 :"
"setting:`INSTALLED_APPS` 设置中的应用程序中的模型。这暴露出默认的 :setting:"
"`INSTALLED_APPS` 和全局默认值（``django.conf.global_settings``）中的 "
"``MIDDLEWARE_CLASSES`` 之间的不兼容性。为了使这些设置保持同步，并且在使用最小"
"设置测试可重用应用程序等情况下防止弃用警告，从默认设置中移除了 :class:"
"`~django.contrib.sessions.middleware.SessionMiddleware`、:class:`~django."
"contrib.auth.middleware.AuthenticationMiddleware` 和 :class:`~django.contrib."
"messages.middleware.MessageMiddleware`。这些类仍然会包含在由 :djadmin:"
"`startproject` 生成的默认设置中。大多数项目不会受到这个更改的影响，但如果你之"
"前没有在项目设置中声明 ``MIDDLEWARE_CLASSES`` 并依赖于全局默认值，你应该确保"
"新的默认值符合你的项目需求。你还应该检查任何访问 ``django.conf."
"global_settings.MIDDLEWARE_CLASSES`` 的代码。"

msgid ""
"The :meth:`django.core.files.uploadhandler.FileUploadHandler.new_file()` "
"method is now passed an additional ``content_type_extra`` parameter. If you "
"have a custom :class:`~django.core.files.uploadhandler.FileUploadHandler` "
"that implements ``new_file()``, be sure it accepts this new parameter."
msgstr ""
":meth:`django.core.files.uploadhandler.FileUploadHandler.new_file()` 方法现在"
"传递了一个额外的 ``content_type_extra`` 参数。如果你有一个自定义的 :class:"
"`~django.core.files.uploadhandler.FileUploadHandler`，实现了 ``new_file()`` "
"方法，请确保它接受这个新参数。"

msgid ""
":class:`ModelFormSet<django.forms.models.BaseModelFormSet>`\\s no longer "
"delete instances when ``save(commit=False)`` is called. See :attr:`~django."
"forms.formsets.BaseFormSet.can_delete` for instructions on how to manually "
"delete objects from deleted forms."
msgstr ""
":class:`ModelFormSet<django.forms.models.BaseModelFormSet>` 在调用 "
"``save(commit=False)`` 时不再删除实例。请查看 :attr:`~django.forms.formsets."
"BaseFormSet.can_delete` 以获取如何手动从删除的表单中删除对象的说明。"

msgid ""
"Loading empty fixtures emits a ``RuntimeWarning`` rather than raising :exc:"
"`~django.core.management.CommandError`."
msgstr ""
"加载空的 fixture 现在会发出一个 ``RuntimeWarning``，而不是引发 :exc:`~django."
"core.management.CommandError`。"

msgid ""
":func:`django.contrib.staticfiles.views.serve` will now raise an :exc:"
"`~django.http.Http404` exception instead of :exc:`~django.core.exceptions."
"ImproperlyConfigured` when :setting:`DEBUG` is ``False``. This change "
"removes the need to conditionally add the view to your root URLconf, which "
"in turn makes it safe to reverse by name. It also removes the ability for "
"visitors to generate spurious HTTP 500 errors by requesting static files "
"that don't exist or haven't been collected yet."
msgstr ""
"当 :setting:`DEBUG` 为 ``False`` 时，:func:`django.contrib.staticfiles.views."
"serve` 现在会引发一个 :exc:`~django.http.Http404` 异常，而不是 :exc:`~django."
"core.exceptions.ImproperlyConfigured`。这个更改消除了将视图有条件地添加到根 "
"URLconf 的需要，从而使其能够通过名称安全地反转。它还消除了访问者通过请求不存"
"在或尚未收集的静态文件而生成虚假的 HTTP 500 错误的能力。"

msgid ""
"The :meth:`django.db.models.Model.__eq__` method is now defined in a way "
"where instances of a proxy model and its base model are considered equal "
"when primary keys match. Previously only instances of exact same class were "
"considered equal on primary key match."
msgstr ""
":meth:`django.db.models.Model.__eq__` 方法现在以一种新的方式定义，其中代理模"
"型的实例和其基模型的实例在主键匹配时被视为相等。以前，只有完全相同类的实例在"
"主键匹配时被视为相等。"

msgid ""
"The :meth:`django.db.models.Model.__eq__` method has changed such that two "
"``Model`` instances without primary key values won't be considered equal "
"(unless they are the same instance)."
msgstr ""
":meth:`django.db.models.Model.__eq__` 方法已更改，因此两个没有主键值的 "
"``Model`` 实例不会被视为相等（除非它们是同一个实例）。"

msgid ""
"The :meth:`django.db.models.Model.__hash__` method will now raise "
"``TypeError`` when called on an instance without a primary key value. This "
"is done to avoid mutable ``__hash__`` values in containers."
msgstr ""
"当在没有主键值的实例上调用 :meth:`django.db.models.Model.__hash__` 方法时，现"
"在会引发 ``TypeError``。这是为了避免在容器中使用可变的 ``__hash__`` 值。"

msgid ""
":class:`~django.db.models.AutoField` columns in SQLite databases will now be "
"created using the ``AUTOINCREMENT`` option, which guarantees monotonic "
"increments. This will cause primary key numbering behavior to change on "
"SQLite, becoming consistent with most other SQL databases. This will only "
"apply to newly created tables. If you have a database created with an older "
"version of Django, you will need to migrate it to take advantage of this "
"feature. For example, you could do the following:"
msgstr ""
"在 SQLite 数据库中，:class:`~django.db.models.AutoField` 列现在将使用 "
"``AUTOINCREMENT`` 选项创建，以确保单调递增。这将导致 SQLite 上的主键编号行为"
"发生变化，与大多数其他 SQL 数据库保持一致。这仅适用于新创建的表。如果你有一个"
"使用较早版本的 Django 创建的数据库，你需要迁移它以利用这个功能。例如，你可以"
"执行以下操作："

msgid "Use :djadmin:`dumpdata` to save your data."
msgstr "使用 :djadmin:`dumpdata` 来保存你的数据。"

msgid "Rename the existing database file (keep it as a backup)."
msgstr "重命名现有的数据库文件（将其保留作为备份）。"

msgid "Run :djadmin:`migrate` to create the updated schema."
msgstr "运行 :djadmin:`migrate` 来创建更新后的模式。"

msgid "Use :djadmin:`loaddata` to import the fixtures you exported in (1)."
msgstr "使用 :djadmin:`loaddata` 导入你在第一步导出的 fixture 数据。"

msgid ""
"``django.contrib.auth.models.AbstractUser`` no longer defines a :meth:"
"`~django.db.models.Model.get_absolute_url()` method. The old definition "
"returned  ``\"/users/%s/\" % urlquote(self.username)`` which was arbitrary "
"since applications may or may not define such a url in ``urlpatterns``. "
"Define a ``get_absolute_url()`` method on your own custom user object or "
"use :setting:`ABSOLUTE_URL_OVERRIDES` if you want a URL for your user."
msgstr ""
"``django.contrib.auth.models.AbstractUser`` 不再定义 :meth:`~django.db."
"models.Model.get_absolute_url()` 方法。旧的定义返回 ``\"/users/%s/\" % "
"urlquote(self.username)``，这是任意的，因为应用程序可以或不可以在 "
"``urlpatterns`` 中定义这样的 URL。在你自己的自定义用户对象上定义一个 "
"``get_absolute_url()`` 方法，或者如果你想要一个用户的 URL，可以使用 :setting:"
"`ABSOLUTE_URL_OVERRIDES`。"

msgid ""
"The static asset-serving functionality of the :class:`django.test."
"LiveServerTestCase` class has been simplified: Now it's only able to serve "
"content already present in :setting:`STATIC_ROOT` when tests are run. The "
"ability to transparently serve all the static assets (similarly to what one "
"gets with :setting:`DEBUG = True <DEBUG>` at development-time) has been "
"moved to a new class that lives in the ``staticfiles`` application (the one "
"actually in charge of such feature): :class:`django.contrib.staticfiles."
"testing.StaticLiveServerTestCase`. In other words, ``LiveServerTestCase`` "
"itself is less powerful but at the same time has less magic."
msgstr ""
":class:`django.test.LiveServerTestCase` 类的静态资源服务功能已经简化：现在它"
"只能在运行测试时服务于已经存在于 :setting:`STATIC_ROOT` 中的内容。像在开发时"
"使用 :setting:`DEBUG = True <DEBUG>` 那样透明地提供所有静态资源的能力已经移动"
"到一个新的类中，该类位于 ``staticfiles`` 应用程序中（实际负责此功能的应用程"
"序）：:class:`django.contrib.staticfiles.testing.StaticLiveServerTestCase`。"
"换句话说，``LiveServerTestCase`` 本身的功能减弱了，但同时也减少了魔法。"

msgid ""
"Rationale behind this is removal of dependency of non-contrib code on "
"contrib applications."
msgstr "这样做的原因是将非 contrib 代码与 contrib 应用程序的依赖关系移除。"

msgid ""
"The old cache URI syntax (e.g. ``\"locmem://\"``) is no longer supported. It "
"still worked, even though it was not documented or officially supported. If "
"you're still using it, please update to the current :setting:`CACHES` syntax."
msgstr ""
"旧的缓存 URI 语法（例如 ``\"locmem://\"``）不再受支持。尽管它之前可以工作，但"
"它并没有被记录或正式支持。如果你仍在使用它，请更新到当前的 :setting:`CACHES` "
"语法。"

msgid ""
"The default ordering of ``Form`` fields in case of inheritance has changed "
"to follow normal Python MRO. Fields are now discovered by iterating through "
"the MRO in reverse with the topmost class coming last. This only affects you "
"if you relied on the default field ordering while having fields defined on "
"both the current class *and* on a parent ``Form``."
msgstr ""
"在继承情况下，``Form`` 字段的默认排序方式已更改为遵循正常的 Python MRO。现"
"在，字段是通过反向迭代 MRO 来发现的，最顶层的类最后被考虑。这只会在你同时在当"
"前类和父类 ``Form`` 中定义字段并且依赖于默认字段顺序时影响你。"

msgid ""
"The ``required`` argument of :class:`~django.forms.SelectDateWidget` has "
"been removed. This widget now respects the form field's ``is_required`` "
"attribute like other widgets."
msgstr ""
":class:`~django.forms.SelectDateWidget` 的 ``required`` 参数已被移除。这个小"
"部件现在会像其他小部件一样尊重表单字段的 ``is_required`` 属性。"

msgid ""
"``Widget.is_hidden`` is now a read-only property, getting its value by "
"introspecting the presence of ``input_type == 'hidden'``."
msgstr ""
"``Widget.is_hidden`` 现在是一个只读属性，通过检查 ``input_type == 'hidden'`` "
"的存在来获取其值。"

msgid ""
":meth:`~django.db.models.query.QuerySet.select_related` now chains in the "
"same way as other similar calls like ``prefetch_related``. That is, "
"``select_related('foo', 'bar')`` is equivalent to ``select_related('foo')."
"select_related('bar')``. Previously the latter would have been equivalent to "
"``select_related('bar')``."
msgstr ""
":meth:`~django.db.models.query.QuerySet.select_related` 现在与其他类似的调用"
"（如 ``prefetch_related``）以相同的方式链式调用。也就是说，"
"``select_related('foo', 'bar')`` 等同于 ``select_related('foo')."
"select_related('bar')``。以前，后者等同于 ``select_related('bar')``。"

msgid "GeoDjango dropped support for GEOS < 3.1."
msgstr "GeoDjango 不再支持 GEOS < 3.1 。"

msgid ""
"The ``init_connection_state`` method of database backends now executes in "
"autocommit mode (unless you set :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` "
"to ``False``). If you maintain a custom database backend, you should check "
"that method."
msgstr ""
"数据库后端的 ``init_connection_state`` 方法现在在自动提交模式下执行（除非你"
"将 :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` 设置为 ``False``）。如果你维护"
"一个自定义数据库后端，你应该检查这个方法。"

msgid ""
"The ``django.db.backends.BaseDatabaseFeatures.allows_primary_key_0`` "
"attribute has been renamed to ``allows_auto_pk_0`` to better describe it. "
"It's ``True`` for all database backends included with Django except MySQL "
"which does allow primary keys with value 0. It only forbids *autoincrement* "
"primary keys with value 0."
msgstr ""
"``django.db.backends.BaseDatabaseFeatures.allows_primary_key_0`` 属性已重命名"
"为 ``allows_auto_pk_0``，以更好地描述它。对于所有包含在 Django 中的数据库后"
"端，除了 MySQL，它都为 ``True``，因为 MySQL 允许主键值为 0。它只禁止具有值 0 "
"的 *autoincrement* 主键。"

msgid ""
"Shadowing model fields defined in a parent model has been forbidden as this "
"creates ambiguity in the expected model behavior. In addition, clashing "
"fields in the model inheritance hierarchy result in a system check error. "
"For example, if you use multi-inheritance, you need to define custom primary "
"key fields on parent models, otherwise the default ``id`` fields will clash. "
"See :ref:`model-multiple-inheritance-topic` for details."
msgstr ""
"禁止在子模型中定义与父模型中已定义的字段同名的字段，因为这会导致模型行为的歧"
"义。此外，在模型继承层次结构中发生字段冲突将导致系统检查错误。例如，如果使用"
"多继承，你需要在父模型中定义自定义主键字段，否则默认的 ``id`` 字段将发生冲"
"突。有关详细信息，请参阅 :ref:`model-multiple-inheritance-topic`。"

msgid ""
"``django.utils.translation.parse_accept_lang_header()`` now returns "
"lowercase locales, instead of the case as it was provided. As locales should "
"be treated case-insensitive this allows us to speed up locale detection."
msgstr ""
"``django.utils.translation.parse_accept_lang_header()`` 现在返回小写的区域设"
"置，而不是提供的大小写。由于区域设置应该被视为不区分大小写，这使得我们能够加"
"速区域设置的检测。"

msgid ""
"``django.utils.translation.get_language_from_path()`` and ``django.utils."
"translation.trans_real.get_supported_language_variant()`` now no longer have "
"a ``supported`` argument."
msgstr ""
"``django.utils.translation.get_language_from_path()`` 和 ``django.utils."
"translation.trans_real.get_supported_language_variant()`` 现在不再接受 "
"``supported`` 参数。"

msgid ""
"The ``shortcut`` view in ``django.contrib.contenttypes.views`` now supports "
"protocol-relative URLs (e.g. ``//example.com``)."
msgstr ""
"``django.contrib.contenttypes.views`` 中的 ``shortcut`` 视图现在支持协议相对 "
"URL（例如 ``//example.com``）。"

msgid ""
":class:`~django.contrib.contenttypes.fields.GenericRelation` now supports an "
"optional ``related_query_name`` argument. Setting ``related_query_name`` "
"adds a relation from the related object back to the content type for "
"filtering, ordering and other query operations."
msgstr ""
":class:`~django.contrib.contenttypes.fields.GenericRelation` 现在支持一个可选"
"的 ``related_query_name`` 参数。设置 ``related_query_name`` 可以在相关对象和"
"内容类型之间添加关系，用于过滤、排序和其他查询操作。"

msgid ""
"When running tests on PostgreSQL, the :setting:`USER` will need read access "
"to the built-in ``postgres`` database. This is in lieu of the previous "
"behavior of connecting to the actual non-test database."
msgstr ""
"在 PostgreSQL 上运行测试时，:setting:`USER` 将需要对内置的 ``postgres`` 数据"
"库进行读取访问权限。这是替代了以前连接到实际非测试数据库的行为。"

msgid ""
"As part of the :doc:`System check framework </ref/checks>`, :ref:`fields, "
"models, and model managers <field-checking>` all implement a ``check()`` "
"method that is registered with the check framework. If you have an existing "
"method called ``check()`` on one of these objects, you will need to rename "
"it."
msgstr ""
"作为 :doc:`系统检查框架 </ref/checks>` 的一部分，:ref:`字段、模型和模型管理"
"器 <field-checking>` 都实现了一个已在检查框架中注册的 ``check()`` 方法。如果"
"你已经在其中一个对象上有一个名为 ``check()`` 的现有方法，你需要将其重命名。"

msgid ""
"As noted above in the \"Cache\" section of \"Minor Features\", defining the :"
"setting:`TIMEOUT <CACHES-TIMEOUT>` argument of the :setting:`CACHES` setting "
"as ``None`` will set the cache keys as \"non-expiring\". Previously, with "
"the memcache backend, a :setting:`TIMEOUT <CACHES-TIMEOUT>` of ``0`` would "
"set non-expiring keys, but this was inconsistent with the set-and-expire (i."
"e. no caching) behavior of ``set(\"key\", \"value\", timeout=0)``. If you "
"want non-expiring keys, please update your settings to use ``None`` instead "
"of ``0`` as the latter now designates set-and-expire in the settings as well."
msgstr ""
"如上述 \"缓存\" 部分所提到的，将 :setting:`CACHES` 设置的 :setting:`TIMEOUT "
"<CACHES-TIMEOUT>` 参数定义为 ``None`` 将设置缓存键为 \"不过期\"。以前，对于 "
"memcache 后端，:setting:`TIMEOUT <CACHES-TIMEOUT>` 为 ``0`` 会设置不过期的"
"键，但这与 ``set(\"key\", \"value\", timeout=0)`` 的设置和过期（即不缓存）行"
"为不一致。如果你想要不过期的键，请更新你的设置，将 ``0`` 改为 ``None``，因为"
"后者现在在设置中也表示设置和过期。"

msgid ""
"The ``sql*`` management commands now respect the ``allow_migrate()`` method "
"of :setting:`DATABASE_ROUTERS`. If you have models synced to non-default "
"databases, use the ``--database`` flag to get SQL for those models "
"(previously they would always be included in the output)."
msgstr ""
"``sql*`` 管理命令现在尊重 :setting:`DATABASE_ROUTERS` 的 ``allow_migrate()`` "
"方法。如果你的模型与非默认数据库同步，请使用 ``--database`` 标志来获取这些模"
"型的 SQL（以前它们总是包含在输出中）。"

msgid ""
"Decoding the query string from URLs now falls back to the ISO-8859-1 "
"encoding when the input is not valid UTF-8."
msgstr ""
"解码 URL 中的查询字符串现在在输入不是有效的 UTF-8 时会回退到 ISO-8859-1 编"
"码。"

msgid ""
"With the addition of the ``django.contrib.auth.middleware."
"SessionAuthenticationMiddleware`` to the default project template (pre-1.7.2 "
"only), a database must be created before accessing a page using :djadmin:"
"`runserver`."
msgstr ""
"通过将 ``django.contrib.auth.middleware.SessionAuthenticationMiddleware`` 添"
"加到默认项目模板（仅适用于 1.7.2 之前的版本），在使用 :djadmin:`runserver` 访"
"问页面之前必须创建一个数据库。"

msgid ""
"The addition of the ``schemes`` argument to ``URLValidator`` will appear as "
"a backwards-incompatible change if you were previously using a custom "
"regular expression to validate schemes. Any scheme not listed in ``schemes`` "
"will fail validation, even if the regular expression matches the given URL."
msgstr ""
"将 ``schemes`` 参数添加到 ``URLValidator`` 中可能会在你之前使用自定义正则表达"
"式来验证 schemes 的情况下出现向后不兼容的更改。如果 schemes 中没有列出的任何 "
"scheme 将失败验证，即使正则表达式匹配给定的 URL。"

msgid "Features deprecated in 1.7"
msgstr "在 1.7 中被废弃的功能"

msgid "``django.core.cache.get_cache``"
msgstr "``django.core.cache.get_cache``"

msgid ""
"``django.core.cache.get_cache`` has been supplanted by :data:`django.core."
"cache.caches`."
msgstr ""
"``django.core.cache.get_cache`` 已被 :data:`django.core.cache.caches` 取代。"

msgid "``django.utils.dictconfig``/``django.utils.importlib``"
msgstr "``django.utils.dictconfig``/``django.utils.importlib``"

msgid ""
"``django.utils.dictconfig`` and ``django.utils.importlib`` were copies of "
"respectively :mod:`logging.config` and :mod:`importlib` provided for Python "
"versions prior to 2.7. They have been deprecated."
msgstr ""
"``django.utils.dictconfig`` 和 ``django.utils.importlib`` 分别是在 Python 版"
"本 2.7 之前提供的 :mod:`logging.config` 和 :mod:`importlib` 的副本。它们已经"
"被弃用。"

msgid "``django.utils.module_loading.import_by_path``"
msgstr "``django.utils.module_loading.import_by_path``"

msgid ""
"The current ``django.utils.module_loading.import_by_path`` function catches "
"``AttributeError``, ``ImportError``, and ``ValueError`` exceptions, and re-"
"raises :exc:`~django.core.exceptions.ImproperlyConfigured`. Such exception "
"masking makes it needlessly hard to diagnose circular import problems, "
"because it makes it look like the problem comes from inside Django. It has "
"been deprecated in favor of :meth:`~django.utils.module_loading."
"import_string`."
msgstr ""
"当前的 ``django.utils.module_loading.import_by_path`` 函数捕获 "
"``AttributeError``、``ImportError`` 和 ``ValueError`` 异常，并重新引发 :exc:"
"`~django.core.exceptions.ImproperlyConfigured` 异常。这种异常掩盖使得诊断循环"
"导入问题变得不必要地困难，因为它让问题看起来像是来自 Django 内部。它已被弃"
"用，推荐使用 :meth:`~django.utils.module_loading.import_string`。"

msgid "``django.utils.tzinfo``"
msgstr "``django.utils.tzinfo``"

msgid ""
"``django.utils.tzinfo`` provided two :class:`~datetime.tzinfo` subclasses, "
"``LocalTimezone`` and ``FixedOffset``. They've been deprecated in favor of "
"more correct alternatives provided by :mod:`django.utils.timezone`, :func:"
"`django.utils.timezone.get_default_timezone` and :func:`django.utils."
"timezone.get_fixed_timezone`."
msgstr ""
"``django.utils.tzinfo`` 提供了两个 :class:`~datetime.tzinfo` 的子类，分别是 "
"``LocalTimezone`` 和 ``FixedOffset``。它们已经被弃用，推荐使用更正确的替代方"
"案，由 :mod:`django.utils.timezone` 提供的 :func:`django.utils.timezone."
"get_default_timezone` 和 :func:`django.utils.timezone.get_fixed_timezone`。"

msgid "``django.utils.unittest``"
msgstr "``django.utils.unittest``"

msgid ""
"``django.utils.unittest`` provided uniform access to the ``unittest2`` "
"library on all Python versions. Since ``unittest2`` became the standard "
"library's :mod:`unittest` module in Python 2.7, and Django 1.7 drops support "
"for older Python versions, this module isn't useful anymore. It has been "
"deprecated. Use :mod:`unittest` instead."
msgstr ""
"``django.utils.unittest`` 在所有 Python 版本上提供了对 ``unittest2`` 库的统一"
"访问。由于 ``unittest2`` 在 Python 2.7 中成为标准库的 :mod:`unittest` 模块，"
"并且 Django 1.7 不再支持旧的 Python 版本，因此该模块不再有用。它已被弃用，请"
"改用 :mod:`unittest`。"

msgid "``django.utils.datastructures.SortedDict``"
msgstr "``django.utils.datastructures.SortedDict``"

msgid ""
"As :class:`~collections.OrderedDict` was added to the standard library in "
"Python 2.7, ``SortedDict`` is no longer needed and has been deprecated."
msgstr ""
"由于 Python 2.7 中已经添加了 :class:`~collections.OrderedDict` 到标准库中，因"
"此不再需要 ``SortedDict``，它已经被弃用。"

msgid ""
"The two additional, deprecated methods provided by ``SortedDict`` "
"(``insert()`` and ``value_for_index()``) have been removed. If you relied on "
"these methods to alter structures like form fields, you should now treat "
"these ``OrderedDict``\\s as immutable objects and override them to change "
"their content."
msgstr ""
"``SortedDict`` 提供的两个额外且已弃用的方法（``insert()`` 和 "
"``value_for_index()``）已被移除。如果您曾依赖这些方法来更改类似表单字段的结"
"构，现在应将这些 ``OrderedDict`` 视为不可变对象，并重写它们以更改其内容。"

msgid ""
"For example, you might want to override ``MyFormClass.base_fields`` "
"(although this attribute isn't considered a public API) to change the "
"ordering of fields for all ``MyFormClass`` instances; or similarly, you "
"could override ``self.fields`` from inside ``MyFormClass.__init__()``, to "
"change the fields for a particular form instance. For example (from Django "
"itself)::"
msgstr ""
"例如，您可能希望覆盖 ``MyFormClass.base_fields`` （尽管该属性不被视为公共 "
"API）以更改所有 ``MyFormClass`` 实例的字段顺序；或者类似地，您可以在 "
"``MyFormClass.__init__()`` 中从内部覆盖 ``self.fields``，以更改特定表单实例的"
"字段。例如（来自 Django 自身）："

msgid "Custom SQL location for models package"
msgstr "自定义模型包的 SQL 位置"

msgid ""
"Previously, if models were organized in a package (``myapp/models/``) rather "
"than simply ``myapp/models.py``, Django would look for initial SQL data in "
"``myapp/models/sql/``. This bug has been fixed so that Django will search "
"``myapp/sql/`` as documented. After this issue was fixed, migrations were "
"added which deprecates initial SQL data. Thus, while this change still "
"exists, the deprecation is irrelevant as the entire feature will be removed "
"in Django 1.9."
msgstr ""
"以前，如果模型组织在一个包中（``myapp/models/``）而不是简单的 ``myapp/models."
"py``，Django 会在 ``myapp/models/sql/`` 中查找初始 SQL 数据。这个问题已经被修"
"复，Django 将按文档中的方式搜索 ``myapp/sql/``。在解决了这个问题后，添加了迁"
"移，从而废弃了初始 SQL 数据。因此，尽管这个改变仍然存在，但废弃已经不相关，因"
"为整个功能将在 Django 1.9 中被移除。"

msgid "Reorganization of ``django.contrib.sites``"
msgstr "``django.contrib.sites`` 的重新组织"

msgid ""
"``django.contrib.sites`` provides reduced functionality when it isn't in :"
"setting:`INSTALLED_APPS`. The app-loading refactor adds some constraints in "
"that situation. As a consequence, two objects were moved, and the old "
"locations are deprecated:"
msgstr ""
"当 ``django.contrib.sites`` 不在 :setting:`INSTALLED_APPS` 中时，它提供的功能"
"会减少。应用程序加载的重构在这种情况下添加了一些限制。因此，两个对象被移动，"
"旧的位置已被弃用："

msgid ""
":class:`~django.contrib.sites.requests.RequestSite` now lives in ``django."
"contrib.sites.requests``."
msgstr ""
":class:`~django.contrib.sites.requests.RequestSite` 现在位于 ``django."
"contrib.sites.requests`` 中。"

msgid ""
":func:`~django.contrib.sites.shortcuts.get_current_site` now lives in "
"``django.contrib.sites.shortcuts``."
msgstr ""
":func:`~django.contrib.sites.shortcuts.get_current_site` 现在位于 ``django."
"contrib.sites.shortcuts`` 中。"

msgid "``declared_fieldsets`` attribute on ``ModelAdmin``"
msgstr "``ModelAdmin`` 上的 ``declared_fieldsets`` 属性"

msgid ""
"``ModelAdmin.declared_fieldsets`` has been deprecated. Despite being a "
"private API, it will go through a regular deprecation path. This attribute "
"was mostly used by methods that bypassed ``ModelAdmin.get_fieldsets()`` but "
"this was considered a bug and has been addressed."
msgstr ""
"``ModelAdmin.declared_fieldsets`` 已经被弃用。尽管它是一个私有 API，但它将按"
"照常规的弃用路径进行处理。这个属性主要被一些绕过了 ``ModelAdmin."
"get_fieldsets()`` 方法的方法使用，但这被视为一个错误，并已得到解决。"

msgid "Reorganization of ``django.contrib.contenttypes``"
msgstr "``django.contrib.contenttypes`` 的重新组织"

msgid ""
"Since ``django.contrib.contenttypes.generic`` defined both admin and model "
"related objects, an import of this module could trigger unexpected side "
"effects. As a consequence, its contents were split into :mod:`~django."
"contrib.contenttypes` submodules and the ``django.contrib.contenttypes."
"generic`` module is deprecated:"
msgstr ""
"由于 ``django.contrib.contenttypes.generic`` 定义了与管理和模型相关的对象，导"
"入该模块可能会触发意外的副作用。因此，其内容已被拆分为 :mod:`~django.contrib."
"contenttypes` 子模块，并且 ``django.contrib.contenttypes.generic`` 模块已被弃"
"用："

msgid ""
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` and :class:"
"`~django.contrib.contenttypes.fields.GenericRelation` now live in :mod:"
"`~django.contrib.contenttypes.fields`."
msgstr ""
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` 和 :class:"
"`~django.contrib.contenttypes.fields.GenericRelation` 现在位于 :mod:`~django."
"contrib.contenttypes.fields` 中。"

msgid ""
":class:`~django.contrib.contenttypes.forms.BaseGenericInlineFormSet` and :"
"func:`~django.contrib.contenttypes.forms.generic_inlineformset_factory` now "
"live in :mod:`~django.contrib.contenttypes.forms`."
msgstr ""
":class:`~django.contrib.contenttypes.forms.BaseGenericInlineFormSet` 和 :"
"func:`~django.contrib.contenttypes.forms.generic_inlineformset_factory` 现在"
"位于 :mod:`~django.contrib.contenttypes.forms` 中。"

msgid ""
":class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin`, :class:"
"`~django.contrib.contenttypes.admin.GenericStackedInline` and :class:"
"`~django.contrib.contenttypes.admin.GenericTabularInline` now live in :mod:"
"`~django.contrib.contenttypes.admin`."
msgstr ""
":class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin`、:class:"
"`~django.contrib.contenttypes.admin.GenericStackedInline` 和 :class:`~django."
"contrib.contenttypes.admin.GenericTabularInline` 现在位于 :mod:`~django."
"contrib.contenttypes.admin` 中。"

msgid "``syncdb``"
msgstr "``syncdb``"

msgid ""
"The ``syncdb`` command has been deprecated in favor of the new :djadmin:"
"`migrate` command. ``migrate`` takes the same arguments as ``syncdb`` used "
"to plus a few more, so it's safe to just change the name you're calling and "
"nothing else."
msgstr ""
"``syncdb`` 命令已被弃用，推荐使用新的 :djadmin:`migrate` 命令。``migrate`` 命"
"令接受与以前的 ``syncdb`` 相同的参数，还添加了一些额外的参数，因此只需更改调"
"用的名称而不需要做其他更改。"

msgid "``util`` modules renamed to ``utils``"
msgstr "``util`` 模块已重命名为 ``utils``"

msgid ""
"The following instances of ``util.py`` in the Django codebase have been "
"renamed to ``utils.py`` in an effort to unify all util and utils references:"
msgstr ""
"在 Django 代码库中，以下实例的 ``util.py`` 已重命名为 ``utils.py``，以统一所"
"有 util 和 utils 的引用："

msgid "``django.contrib.admin.util``"
msgstr "``django.contrib.admin.util``"

msgid "``django.contrib.gis.db.backends.util``"
msgstr "``django.contrib.gis.db.backends.util``"

msgid "``django.db.backends.util``"
msgstr "``django.db.backends.util``"

msgid "``django.forms.util``"
msgstr "``django.forms.util``"

msgid "``get_formsets`` method on ``ModelAdmin``"
msgstr "在 ``ModelAdmin`` 上的 ``get_formsets`` 方法"

msgid ""
"``ModelAdmin.get_formsets`` has been deprecated in favor of the new :meth:"
"`~django.contrib.admin.ModelAdmin.get_formsets_with_inlines`, in order to "
"better handle the case of selectively showing inlines on a ``ModelAdmin``."
msgstr ""
"``ModelAdmin.get_formsets`` 已弃用，推荐使用新的 :meth:`~django.contrib."
"admin.ModelAdmin.get_formsets_with_inlines`，以更好地处理在 ``ModelAdmin`` 上"
"有选择地显示内联表单的情况。"

msgid ""
"The ``django.db.models.IPAddressField`` and ``django.forms.IPAddressField`` "
"fields have been deprecated in favor of :class:`django.db.models."
"GenericIPAddressField` and :class:`django.forms.GenericIPAddressField`."
msgstr ""
"``django.db.models.IPAddressField`` 和 ``django.forms.IPAddressField`` 字段已"
"弃用，推荐使用 :class:`django.db.models.GenericIPAddressField` 和 :class:"
"`django.forms.GenericIPAddressField`。"

msgid "``BaseMemcachedCache._get_memcache_timeout`` method"
msgstr "``BaseMemcachedCache._get_memcache_timeout`` 方法"

msgid ""
"The ``BaseMemcachedCache._get_memcache_timeout()`` method has been renamed "
"to ``get_backend_timeout()``. Despite being a private API, it will go "
"through the normal deprecation."
msgstr ""
"``BaseMemcachedCache._get_memcache_timeout()`` 方法已重命名为 "
"``get_backend_timeout()``。尽管它是一个私有 API，但它将经历正常的弃用过程。"

msgid "Natural key serialization options"
msgstr "自然键序列化选项"

msgid ""
"The ``--natural`` and ``-n`` options for :djadmin:`dumpdata` have been "
"deprecated. Use :option:`dumpdata --natural-foreign` instead."
msgstr ""
"``--natural`` 和 ``-n`` 选项对于 :djadmin:`dumpdata` 已被弃用。请改用 :"
"option:`dumpdata --natural-foreign`。"

msgid ""
"Similarly, the ``use_natural_keys`` argument for ``serializers.serialize()`` "
"has been deprecated. Use ``use_natural_foreign_keys`` instead."
msgstr ""
"类似地，对于 ``serializers.serialize()`` 的 ``use_natural_keys`` 参数已被弃"
"用。请改用 ``use_natural_foreign_keys``。"

msgid "Merging of ``POST`` and ``GET`` arguments into ``WSGIRequest.REQUEST``"
msgstr "将 ``POST`` 和 ``GET`` 参数合并到 ``WSGIRequest.REQUEST`` 中"

msgid ""
"It was already strongly suggested that you use ``GET`` and ``POST`` instead "
"of ``REQUEST``, because the former are more explicit. The property "
"``REQUEST`` is deprecated and will be removed in Django 1.9."
msgstr ""
"已经强烈建议使用 ``GET`` 和 ``POST`` 而不是 ``REQUEST``，因为前者更加明确。属"
"性 ``REQUEST`` 已弃用，并将在 Django 1.9 中移除。"

msgid "``django.utils.datastructures.MergeDict`` class"
msgstr "``django.utils.datastructures.MergeDict`` 类"

msgid ""
"``MergeDict`` exists primarily to support merging ``POST`` and ``GET`` "
"arguments into a ``REQUEST`` property on ``WSGIRequest``. To merge "
"dictionaries, use ``dict.update()`` instead. The class ``MergeDict`` is "
"deprecated and will be removed in Django 1.9."
msgstr ""
"``MergeDict`` 主要用于将 ``POST`` 和 ``GET`` 参数合并到 ``WSGIRequest`` 上的 "
"``REQUEST`` 属性中。要合并字典，请使用 ``dict.update()``。类 ``MergeDict`` 已"
"被弃用，并将在 Django 1.9 中移除。"

msgid "Language codes ``zh-cn``, ``zh-tw`` and ``fy-nl``"
msgstr "语言代码 ``zh-cn``、``zh-tw`` 和 ``fy-nl``"

msgid ""
"The currently used language codes for Simplified Chinese ``zh-cn``, "
"Traditional Chinese ``zh-tw`` and (Western) Frysian ``fy-nl`` are deprecated "
"and should be replaced by the language codes ``zh-hans``, ``zh-hant`` and "
"``fy`` respectively. If you use these language codes, you should rename the "
"locale directories and update your settings to reflect these changes. The "
"deprecated language codes will be removed in Django 1.9."
msgstr ""
"目前用于简体中文的语言代码 ``zh-cn``，繁体中文的语言代码 ``zh-tw`` 和 (西弗里"
"西亚) 弗里西亚语的语言代码 ``fy-nl`` 已被弃用，应分别替换为语言代码 ``zh-"
"hans``，``zh-hant`` 和 ``fy``。如果您使用这些语言代码，应重命名区域目录并更新"
"您的设置以反映这些更改。弃用的语言代码将在 Django 1.9 中移除。"

msgid "``django.utils.functional.memoize`` function"
msgstr "``django.utils.functional.memoize`` 函数"

msgid ""
"The function ``memoize`` is deprecated and should be replaced by the "
"``functools.lru_cache`` decorator (available from Python 3.2 onward)."
msgstr ""
"函数 ``memoize`` 已被弃用，应替换为 ``functools.lru_cache`` 装饰器（从 "
"Python 3.2 开始可用）。"

msgid ""
"Django ships a backport of this decorator for older Python versions and it's "
"available at ``django.utils.lru_cache.lru_cache``. The deprecated function "
"will be removed in Django 1.9."
msgstr ""
"Django 在较旧的 Python 版本中附带了这个装饰器的后移版本，并且可以在 ``django."
"utils.lru_cache.lru_cache`` 中使用。弃用的函数将在 Django 1.9 中移除。"

msgid "Geo Sitemaps"
msgstr "地理网站地图"

msgid ""
"Google has retired support for the Geo Sitemaps format. Hence Django support "
"for Geo Sitemaps is deprecated and will be removed in Django 1.8."
msgstr ""
"Google 已停止支持 Geo Sitemaps 格式。因此，Django 对 Geo Sitemaps 的支持已被"
"弃用，并将在 Django 1.8 中移除。"

msgid "Passing callable arguments to queryset methods"
msgstr "将可调用参数传递给查询集方法"

msgid ""
"Callable arguments for querysets were an undocumented feature that was "
"unreliable. It's been deprecated and will be removed in Django 1.9."
msgstr ""
"查询集的可调用参数是一个未记录的功能，不可靠。已弃用，并将在 Django 1.9 中移"
"除。"

msgid ""
"Callable arguments were evaluated when a queryset was constructed rather "
"than when it was evaluated, thus this feature didn't offer any benefit "
"compared to evaluating arguments before passing them to queryset and created "
"confusion that the arguments may have been evaluated at query time."
msgstr ""
"可调用参数在构建查询集时被求值，而不是在查询集被评估时求值，因此与在传递参数"
"之前对其进行求值相比，此功能并没有提供任何好处，并且会导致混淆，使人误以为参"
"数可能在查询时被求值。"

msgid "``ADMIN_FOR`` setting"
msgstr "``ADMIN_FOR`` 设置"

msgid ""
"The ``ADMIN_FOR`` feature, part of the admindocs, has been removed. You can "
"remove the setting from your configuration at your convenience."
msgstr ""
"``ADMIN_FOR`` 功能，是 admindocs 的一部分，已被移除。您可以根据需要从配置中移"
"除此设置。"

msgid "``SplitDateTimeWidget`` with ``DateTimeField``"
msgstr "``SplitDateTimeWidget`` 与 ``DateTimeField``"

msgid ""
"``SplitDateTimeWidget`` support in :class:`~django.forms.DateTimeField` is "
"deprecated, use ``SplitDateTimeWidget`` with :class:`~django.forms."
"SplitDateTimeField` instead."
msgstr ""
"``SplitDateTimeWidget`` 在 :class:`~django.forms.DateTimeField` 上的支持已被"
"弃用，请改用与 :class:`~django.forms.SplitDateTimeField` 一起使用的 "
"``SplitDateTimeWidget``。"

msgid "``validate``"
msgstr "``validate``"

msgid ""
"The ``validate`` management command is deprecated in favor of the :djadmin:"
"`check` command."
msgstr "``validate`` 管理命令已被弃用，推荐使用 :djadmin:`check` 命令。"

msgid "``django.core.management.BaseCommand``"
msgstr "``django.core.management.BaseCommand``"

msgid ""
"``requires_model_validation`` is deprecated in favor of a new "
"``requires_system_checks`` flag. If the latter flag is missing, then the "
"value of the former flag is used. Defining both ``requires_system_checks`` "
"and ``requires_model_validation`` results in an error."
msgstr ""
"``requires_model_validation`` 已被弃用，改为使用新的 "
"``requires_system_checks`` 标志。如果缺少后者标志，则将使用前者标志的值。定义"
"同时 ``requires_system_checks`` 和 ``requires_model_validation`` 将导致错误。"

msgid "The ``check()`` method has replaced the old ``validate()`` method."
msgstr "``check()`` 方法取代了旧的 ``validate()`` 方法。"

msgid "``ModelAdmin`` validators"
msgstr "``ModelAdmin`` 验证器"

msgid ""
"The ``ModelAdmin.validator_class`` and ``default_validator_class`` "
"attributes are deprecated in favor of the new ``checks_class`` attribute."
msgstr ""
"``ModelAdmin.validator_class`` 和 ``default_validator_class`` 属性已被弃用，"
"推荐使用新的 ``checks_class`` 属性。"

msgid ""
"The ``ModelAdmin.validate()`` method is deprecated in favor of ``ModelAdmin."
"check()``."
msgstr ""
"``ModelAdmin.validate()`` 方法已被弃用，推荐使用 ``ModelAdmin.check()``。"

msgid "The ``django.contrib.admin.validation`` module is deprecated."
msgstr "``django.contrib.admin.validation`` 模块已被弃用。"

msgid "``django.db.backends.DatabaseValidation.validate_field``"
msgstr "``django.db.backends.DatabaseValidation.validate_field``"

msgid ""
"This method is deprecated in favor of a new ``check_field`` method. The "
"functionality required by ``check_field()`` is the same as that provided by "
"``validate_field()``, but the output format is different. Third-party "
"database backends needing this functionality should provide an "
"implementation of ``check_field()``."
msgstr ""
"这个方法已被弃用，推荐使用新的 ``check_field`` 方法。``check_field()`` 所需的"
"功能与 ``validate_field()`` 提供的相同，但输出格式不同。需要这种功能的第三方"
"数据库后端应提供 ``check_field()`` 的实现。"

msgid "Loading ``ssi`` and ``url`` template tags from ``future`` library"
msgstr "从 ``future`` 库加载 ``ssi`` 和 ``url`` 模板标签"

msgid ""
"Django 1.3 introduced ``{% load ssi from future %}`` and ``{% load url from "
"future %}`` syntax for forward compatibility of the ``ssi`` and :ttag:`url` "
"template tags. This syntax is now deprecated and will be removed in Django "
"1.9. You can simply remove the ``{% load ... from future %}`` tags."
msgstr ""
"Django 1.3 引入了 ``{% load ssi from future %}`` 和 ``{% load url from "
"future %}`` 语法，用于前向兼容 ``ssi`` 和 :ttag:`url` 模板标签。这个语法现在"
"已被弃用，并将在 Django 1.9 中移除。您可以简单地删除 ``{% load ... from "
"future %}`` 标签。"

msgid "``django.utils.text.javascript_quote``"
msgstr "``django.utils.text.javascript_quote``"

msgid ""
"``javascript_quote()`` was an undocumented function present in ``django."
"utils.text``. It was used internally in the ``javascript_catalog()`` view "
"whose implementation was changed to make use of ``json.dumps()`` instead. If "
"you were relying on this function to provide safe output from untrusted "
"strings, you should use ``django.utils.html.escapejs`` or the :tfilter:"
"`escapejs` template filter. If all you need is to generate valid JavaScript "
"strings, you can simply use ``json.dumps()``."
msgstr ""
"``javascript_quote()`` 是一个位于 ``django.utils.text`` 中的未记录函数。它在 "
"``javascript_catalog()`` 视图的内部使用，但该视图的实现已更改为使用 ``json."
"dumps()``。如果您依赖此函数来提供来自不受信任的字符串的安全输出，您应该使用 "
"``django.utils.html.escapejs`` 或 :tfilter:`escapejs` 模板过滤器。如果您只需"
"要生成有效的 JavaScript 字符串，可以简单地使用 ``json.dumps()``。"

msgid "``fix_ampersands`` utils method and template filter"
msgstr "``fix_ampersands`` 工具方法和模板过滤器"

msgid ""
"The ``django.utils.html.fix_ampersands`` method and the ``fix_ampersands`` "
"template filter are deprecated, as the escaping of ampersands is already "
"taken care of by Django's standard HTML escaping features. Combining this "
"with ``fix_ampersands`` would either result in double escaping, or, if the "
"output is assumed to be safe, a risk of introducing XSS vulnerabilities. "
"Along with ``fix_ampersands``, ``django.utils.html.clean_html`` is "
"deprecated, an undocumented function that calls ``fix_ampersands``. As this "
"is an accelerated deprecation, ``fix_ampersands`` and ``clean_html`` will be "
"removed in Django 1.8."
msgstr ""
"``django.utils.html.fix_ampersands`` 方法和 ``fix_ampersands`` 模板过滤器已被"
"弃用，因为 Django 的标准 HTML 转义功能已经处理了 ampersands 的转义。与 "
"``fix_ampersands`` 结合使用可能会导致重复转义，或者如果输出被视为安全，则存在"
"引入 XSS 漏洞的风险。除了 ``fix_ampersands``，未记录的调用 "
"``fix_ampersands`` 的 ``django.utils.html.clean_html`` 也已被弃用。由于这是一"
"项加速弃用，``fix_ampersands`` 和 ``clean_html`` 将在 Django 1.8 中移除。"

msgid "Reorganization of database test settings"
msgstr "数据库测试设置的重新组织"

msgid ""
"All database settings with a ``TEST_`` prefix have been deprecated in favor "
"of entries in a :setting:`TEST <DATABASE-TEST>` dictionary in the database "
"settings. The old settings will be supported until Django 1.9. For backwards "
"compatibility with older versions of Django, you can define both versions of "
"the settings as long as they match."
msgstr ""
"所有以 ``TEST_`` 前缀的数据库设置已被弃用，推荐使用数据库设置中的 :setting:"
"`TEST <DATABASE-TEST>` 字典中的条目。旧设置将在 Django 1.9 之前受到支持。为了"
"与较旧版本的 Django 向后兼容，您可以定义这两个版本的设置，只要它们匹配即可。"

msgid "FastCGI support"
msgstr "FastCGI 支持"

msgid ""
"FastCGI support via the ``runfcgi`` management command will be removed in "
"Django 1.9. Please deploy your project using WSGI."
msgstr ""
"通过 ``runfcgi`` 管理命令提供的 FastCGI 支持将在 Django 1.9 中移除。请使用 "
"WSGI 部署您的项目。"

msgid "Moved objects in ``contrib.sites``"
msgstr "``contrib.sites`` 中的对象已移动"

msgid ""
"Following the app-loading refactor, two objects in ``django.contrib.sites."
"models`` needed to be moved because they must be available without importing "
"``django.contrib.sites.models`` when ``django.contrib.sites`` isn't "
"installed. Import ``RequestSite`` from ``django.contrib.sites.requests`` and "
"``get_current_site()`` from ``django.contrib.sites.shortcuts``. The old "
"import locations will work until Django 1.9."
msgstr ""
"在应用加载重构后，``django.contrib.sites.models`` 中的两个对象需要移动，因为"
"它们在没有安装 ``django.contrib.sites`` 的情况下必须可用，而无需导入 "
"``django.contrib.sites.models``。从 ``django.contrib.sites.requests`` 导入 "
"``RequestSite``，从 ``django.contrib.sites.shortcuts`` 导入 "
"``get_current_site()``。旧的导入位置将在 Django 1.9 之前继续工作。"

msgid "``django.forms.forms.get_declared_fields()``"
msgstr "``django.forms.forms.get_declared_fields()``"

msgid ""
"Django no longer uses this functional internally. Even though it's a private "
"API, it'll go through the normal deprecation cycle."
msgstr ""
"Django 不再在内部使用此功能。尽管它是一个私有 API，但它将按照正常的弃用周期进"
"行处理。"

msgid "Private Query Lookup APIs"
msgstr "私有查询查找 API"

msgid ""
"Private APIs ``django.db.models.sql.where.WhereNode.make_atom()`` and "
"``django.db.models.sql.where.Constraint`` are deprecated in favor of the "
"new :doc:`custom lookups API </ref/models/lookups>`."
msgstr ""
"私有 API ``django.db.models.sql.where.WhereNode.make_atom()`` 和 ``django.db."
"models.sql.where.Constraint`` 已被弃用，推荐使用新的 :doc:`自定义查询 API </"
"ref/models/lookups>`。"

msgid "Features removed in 1.7"
msgstr "在 1.7 版本中移除的功能"

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 1.7. See :ref:`deprecated-features-1.5` for details, "
"including how to remove usage of these features."
msgstr ""
"这些功能已经完成了它们的弃用周期，并在 Django 1.7 中被移除。有关详细信息，包"
"括如何删除对这些功能的使用，请参阅 :ref:`deprecated-features-1.5`。"

msgid "``django.utils.simplejson`` is removed."
msgstr "``django.utils.simplejson`` 已被移除。"

msgid "``django.utils.itercompat.product`` is removed."
msgstr "``django.utils.itercompat.product`` 已被移除。"

msgid ""
"INSTALLED_APPS and TEMPLATE_DIRS are no longer corrected from a plain string "
"into a tuple."
msgstr "INSTALLED_APPS 和 TEMPLATE_DIRS 不再自动将纯字符串转换为元组。"

msgid ""
":class:`~django.http.HttpResponse`, :class:`~django.template.response."
"SimpleTemplateResponse`, :class:`~django.template.response."
"TemplateResponse`, ``render_to_response()``, :func:`~django.contrib.sitemaps."
"views.index`, and :func:`~django.contrib.sitemaps.views.sitemap` no longer "
"take a ``mimetype`` argument"
msgstr ""
":class:`~django.http.HttpResponse`、:class:`~django.template.response."
"SimpleTemplateResponse`、:class:`~django.template.response."
"TemplateResponse`、``render_to_response()``、:func:`~django.contrib.sitemaps."
"views.index` 和 :func:`~django.contrib.sitemaps.views.sitemap` 不再接受 "
"``mimetype`` 参数。"

msgid ""
":class:`~django.http.HttpResponse` immediately consumes its content if it's "
"an iterator."
msgstr ""
":class:`~django.http.HttpResponse` 如果其内容是一个迭代器，会立即消耗它。"

msgid ""
"The ``AUTH_PROFILE_MODULE`` setting, and the ``get_profile()`` method on the "
"User model are removed."
msgstr ""
"``AUTH_PROFILE_MODULE`` 设置以及用户模型上的 ``get_profile()`` 方法已被移除。"

msgid "The ``cleanup`` management command is removed."
msgstr "``cleanup`` 管理命令已被移除。"

msgid "The ``daily_cleanup.py`` script is removed."
msgstr "``daily_cleanup.py`` 脚本已被移除。"

msgid ""
":meth:`~django.db.models.query.QuerySet.select_related` no longer has a "
"``depth`` keyword argument."
msgstr ""
":meth:`~django.db.models.query.QuerySet.select_related` 不再具有 ``depth`` 关"
"键字参数。"

msgid ""
"The ``get_warnings_state()``/``restore_warnings_state()`` functions from :"
"mod:`django.test.utils` and the ``save_warnings_state()``/ "
"``restore_warnings_state()`` :ref:`django.test.*TestCase <django-testcase-"
"subclasses>` are removed."
msgstr ""
"从 :mod:`django.test.utils` 中的 ``get_warnings_state()``/"
"``restore_warnings_state()`` 函数以及 :ref:`django.test.*TestCase <django-"
"testcase-subclasses>` 中的 ``save_warnings_state()``/ "
"``restore_warnings_state()`` 已被移除。"

msgid ""
"The ``check_for_test_cookie`` method in :class:`~django.contrib.auth.forms."
"AuthenticationForm` is removed."
msgstr ""
":class:`~django.contrib.auth.forms.AuthenticationForm` 中的 "
"``check_for_test_cookie`` 方法已被移除。"

msgid ""
"The version of ``django.contrib.auth.views.password_reset_confirm()`` that "
"supports base36 encoded user IDs (``django.contrib.auth.views."
"password_reset_confirm_uidb36``) is removed."
msgstr ""
"支持 base36 编码的用户 ID 的 ``django.contrib.auth.views."
"password_reset_confirm()`` 版本（``django.contrib.auth.views."
"password_reset_confirm_uidb36``）已被移除。"

msgid "The ``django.utils.encoding.StrAndUnicode`` mix-in is removed."
msgstr "``django.utils.encoding.StrAndUnicode`` 混合类已被移除。"

msgid "Django 1.7.1 release notes"
msgstr "Django 1.7.1 版本发行说明"

msgid "Django 1.7.1 fixes several bugs in 1.7."
msgstr "Django 1.7.1 修复了 1.7 版本中的一些错误。"

msgid ""
"Added a more helpful error message if you try to migrate an app without "
"first creating the ``contenttypes`` table (:ticket:`22411`)."
msgstr ""
"如果您尝试在未创建 ``contenttypes`` 表的情况下迁移应用程序，将会显示更加有帮"
"助的错误消息（:ticket:`22411`）。"

msgid ""
"Modified migrations dependency algorithm to avoid possible infinite "
"recursion."
msgstr "修改了迁移依赖算法，以避免可能的无限递归。"

msgid ""
"Fixed a ``UnicodeDecodeError`` when the ``flush`` error message contained "
"Unicode characters (:ticket:`22882`)."
msgstr ""
"修复了当 ``flush`` 错误消息包含 Unicode 字符时出现的 ``UnicodeDecodeError`` "
"(:ticket:`22882`)。"

msgid ""
"Reinstated missing ``CHECK`` SQL clauses which were omitted on some backends "
"when not using migrations (:ticket:`23416`)."
msgstr ""
"重新引入了缺失的 ``CHECK`` SQL 子句，这些子句在某些后端上在不使用迁移时被省略"
"了 (:ticket:`23416`)。"

msgid ""
"Fixed serialization of ``type`` objects in migrations (:ticket:`22951`)."
msgstr "修复了在迁移中对 ``type`` 对象的序列化 (:ticket:`22951`)。"

msgid ""
"The ``@deconstructible`` decorator now fails with a ``ValueError`` if the "
"decorated object cannot automatically be imported (:ticket:`23418`)."
msgstr ""
"现在，如果被装饰的对象无法自动导入，``@deconstructible`` 装饰器将引发 "
"``ValueError`` (:ticket:`23418`)。"

msgid ""
"Fixed a typo in an ``inlineformset_factory()`` error message that caused a "
"crash (:ticket:`23451`)."
msgstr ""
"修复了 ``inlineformset_factory()`` 错误消息中的拼写错误，导致崩溃 (:ticket:"
"`23451`)。"

msgid ""
"Restored the ability to use :setting:`ABSOLUTE_URL_OVERRIDES` with the "
"``'auth.User'`` model (:ticket:`11775`). As a side effect, the setting now "
"adds a ``get_absolute_url()`` method to any model that appears in "
"``ABSOLUTE_URL_OVERRIDES`` but doesn't define ``get_absolute_url()``."
msgstr ""
"恢复了使用 :setting:`ABSOLUTE_URL_OVERRIDES` 与 ``'auth.User'`` 模型的能力 (:"
"ticket:`11775`)。作为副作用，该设置现在会为出现在 ``ABSOLUTE_URL_OVERRIDES`` "
"中但没有定义 ``get_absolute_url()`` 的任何模型添加一个 "
"``get_absolute_url()`` 方法。"

msgid ""
"Avoided masking some ``ImportError`` exceptions during application loading (:"
"ticket:`22920`)."
msgstr ""
"避免了在应用程序加载过程中掩盖一些 ``ImportError`` 异常 (:ticket:`22920`)。"

msgid ""
"Empty ``index_together`` or ``unique_together`` model options no longer "
"results in infinite migrations (:ticket:`23452`)."
msgstr ""
"空的 ``index_together`` 或 ``unique_together`` 模型选项不再导致无限迁移 (:"
"ticket:`23452`)。"

msgid ""
"Fixed crash in ``contrib.sitemaps`` if ``lastmod`` returned a ``date`` "
"rather than a ``datetime`` (:ticket:`23403`)."
msgstr ""
"修复了在 ``contrib.sitemaps`` 中的崩溃，如果 ``lastmod`` 返回的是一个 "
"``date`` 而不是一个 ``datetime`` (:ticket:`23403`)。"

msgid ""
"Allowed migrations to work with ``app_label``\\s that have the same last "
"part (e.g. ``django.contrib.auth`` and ``vendor.auth``) (:ticket:`23483`)."
msgstr ""
"允许迁移与具有相同最后一部分的 ``app_label`` （例如 ``django.contrib.auth`` "
"和 ``vendor.auth``）一起工作 (:ticket:`23483`)。"

msgid "Restored the ability to deepcopy ``F`` objects (:ticket:`23492`)."
msgstr "恢复了深度复制 ``F`` 对象的能力 (:ticket:`23492`)。"

msgid ""
"Formats for Welsh (``cy``) and several Chinese locales (``zh_CN``, "
"``zh_Hans``, ``zh_Hant`` and ``zh_TW``) have been added. Formats for "
"Macedonian have been fixed (trailing dot removed, :ticket:`23532`)."
msgstr ""
"已添加威尔士语（``cy``）和多个中国区域（``zh_CN``、``zh_Hans``、``zh_Hant`` "
"和 ``zh_TW``）的格式。已修复马其顿语的格式（删除尾部点号，:ticket:`23532`）。"

msgid ""
"Added quoting of constraint names in the SQL generated by migrations to "
"prevent crash with uppercase characters in the name (:ticket:`23065`)."
msgstr ""
"在迁移生成的 SQL 中添加了对约束名称的引用，以防止在名称中使用大写字符时崩溃 "
"(:ticket:`23065`)。"

msgid ""
"Fixed renaming of models with a self-referential many-to-many field "
"(``ManyToManyField('self')``) (:ticket:`23503`)."
msgstr ""
"修复了具有自引用多对多字段（``ManyToManyField('self')``）的模型重命名问题 (:"
"ticket:`23503`)。"

msgid ""
"Added the :meth:`~django.contrib.admin.InlineModelAdmin.get_extra()`, :meth:"
"`~django.contrib.admin.InlineModelAdmin.get_max_num()`, and :meth:`~django."
"contrib.admin.InlineModelAdmin.get_min_num()` hooks to :class:`~django."
"contrib.contenttypes.admin.GenericInlineModelAdmin` (:ticket:`23539`)."
msgstr ""
"向 :class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin` 添加"
"了 :meth:`~django.contrib.admin.InlineModelAdmin.get_extra()`、:meth:"
"`~django.contrib.admin.InlineModelAdmin.get_max_num()` 和 :meth:`~django."
"contrib.admin.InlineModelAdmin.get_min_num()` 钩子 (:ticket:`23539`)。"

msgid ""
"Made ``migrations.RunSQL`` no longer require percent sign escaping. This is "
"now consistent with ``cursor.execute()`` (:ticket:`23426`)."
msgstr ""
"使 ``migrations.RunSQL`` 不再需要百分号转义。现在与 ``cursor.execute()`` 保持"
"一致 (:ticket:`23426`)。"

msgid ""
"Made the ``SERIALIZE`` entry in the :setting:`TEST <DATABASE-TEST>` "
"dictionary usable (:ticket:`23421`)."
msgstr ""
"使 :setting:`TEST <DATABASE-TEST>` 字典中的 ``SERIALIZE`` 条目可用 (:ticket:"
"`23421`)。"

msgid ""
"Fixed bug in migrations that prevented foreign key constraints to unmanaged "
"models with a custom primary key (:ticket:`23415`)."
msgstr ""
"修复了迁移中的错误，该错误阻止了对具有自定义主键的未管理模型的外键约束 (:"
"ticket:`23415`)。"

msgid ""
"Added ``SchemaEditor`` for MySQL GIS backend so that spatial indexes will be "
"created for apps with migrations (:ticket:`23538`)."
msgstr ""
"为 MySQL GIS 后端添加了 ``SchemaEditor``，以便在具有迁移的应用程序中创建空间"
"索引 (:ticket:`23538`)。"

msgid ""
"Added ``SchemaEditor`` for Oracle GIS backend so that spatial metadata and "
"indexes will be created for apps with migrations (:ticket:`23537`)."
msgstr ""
"为 Oracle GIS 后端添加了 ``SchemaEditor``，以便在具有迁移的应用程序中创建空间"
"元数据和索引 (:ticket:`23537`)。"

msgid ""
"Coerced the ``related_name`` model field option to Unicode during migration "
"generation to generate migrations that work with both Python 2 and 3 (:"
"ticket:`23455`)."
msgstr ""
"在生成迁移时将 ``related_name`` 模型字段选项强制转换为 Unicode，以生成在 "
"Python 2 和 3 中都可用的迁移 (:ticket:`23455`)。"

msgid ""
"Fixed ``MigrationWriter`` to handle builtin types without imports (:ticket:"
"`23560`)."
msgstr ""
"修复了 ``MigrationWriter`` 以处理没有导入的内置类型 (:ticket:`23560`)。"

msgid "Fixed ``deepcopy`` on ``ErrorList`` (:ticket:`23594`)."
msgstr "修复了 ``ErrorList`` 上的 ``deepcopy`` (:ticket:`23594`)。"

msgid ""
"Made the :mod:`~django.contrib.admindocs` view to browse view details check "
"if the view specified in the URL exists in the URLconf. Previously it was "
"possible to import arbitrary packages from the Python path. This was not "
"considered a security issue because ``admindocs`` is only accessible to "
"staff users (:ticket:`23601`)."
msgstr ""
"使 :mod:`~django.contrib.admindocs` 中的浏览视图详细信息的视图检查 URL 中指定"
"的视图是否存在于 URL 配置中。以前，可以从 Python 路径中导入任意包。这不被认为"
"是一个安全问题，因为 ``admindocs`` 只对工作人员用户可访问 (:ticket:`23601`)。"

msgid ""
"Fixed ``UnicodeDecodeError`` crash in ``AdminEmailHandler`` with non-ASCII "
"characters in the request (:ticket:`23593`)."
msgstr ""
"修复了在请求中包含非 ASCII 字符时，``AdminEmailHandler`` 中的 "
"``UnicodeDecodeError`` 崩溃 (:ticket:`23593`)。"

msgid ""
"Fixed missing ``get_or_create`` and ``update_or_create`` on related managers "
"causing ``IntegrityError`` (:ticket:`23611`)."
msgstr ""
"修复了相关管理器上缺失 ``get_or_create`` 和 ``update_or_create`` 导致 "
"``IntegrityError`` 的问题 (:ticket:`23611`)。"

msgid ""
"Made :func:`~django.utils.http.urlsafe_base64_decode` return the proper type "
"(bytestring) on Python 3 (:ticket:`23333`)."
msgstr ""
"在 Python 3 上，使 :func:`~django.utils.http.urlsafe_base64_decode` 返回正确"
"的类型（字节字符串） (:ticket:`23333`)。"

msgid ""
":djadmin:`makemigrations` can now serialize timezone-aware values (:ticket:"
"`23365`)."
msgstr ""
":djadmin:`makemigrations` 现在可以序列化带有时区信息的值 (:ticket:`23365`)。"

msgid ""
"Added a prompt to the migrations questioner when removing the null "
"constraint from a field to prevent an IntegrityError on existing NULL rows (:"
"ticket:`23609`)."
msgstr ""
"在从字段中移除空约束以防止现有 NULL 行上的 IntegrityError 时，为迁移问题添加"
"了提示 (:ticket:`23609`)。"

msgid ""
"Fixed generic relations in ``ModelAdmin.list_filter`` (:ticket:`23616`)."
msgstr "修复了 ``ModelAdmin.list_filter`` 中的通用关联问题 (:ticket:`23616`)。"

msgid ""
"Restored RFC compliance for the SMTP backend on Python 3 (:ticket:`23063`)."
msgstr "恢复了 Python 3 上 SMTP 后端的 RFC 兼容性 (:ticket:`23063`)。"

msgid ""
"Fixed a crash while parsing cookies containing invalid content (:ticket:"
"`23638`)."
msgstr "修复了解析包含无效内容的 Cookie 时崩溃的问题 (:ticket:`23638`)。"

msgid ""
"The system check framework now raises error **models.E020** when the class "
"method ``Model.check()`` is unreachable (:ticket:`23615`)."
msgstr ""
"系统检查框架现在在类方法 ``Model.check()`` 不可达时引发错误 **models.E020** "
"(:ticket:`23615`)。"

msgid ""
"Made the Oracle test database creation drop the test user in the event of an "
"unclean exit of a previous test run (:ticket:`23649`)."
msgstr ""
"在前一个测试运行的不干净退出事件中，Oracle 测试数据库创建现在会删除测试用户 "
"(:ticket:`23649`)。"

msgid ""
"Fixed :djadmin:`makemigrations` to detect changes to :attr:`Meta.db_table "
"<django.db.models.Options.db_table>` (:ticket:`23629`)."
msgstr ""
"修复了 :djadmin:`makemigrations` 以检测对 :attr:`Meta.db_table <django.db."
"models.Options.db_table>` 的更改 (:ticket:`23629`)。"

msgid ""
"Fixed a regression when feeding the Django test client with an empty data "
"string (:ticket:`21740`)."
msgstr ""
"修复了在向 Django 测试客户端提供空数据字符串时的回归问题 (:ticket:`21740`)。"

msgid ""
"Fixed a regression in :djadmin:`makemessages` where static files were "
"unexpectedly ignored (:ticket:`23583`)."
msgstr ""
"修复了 :djadmin:`makemessages` 中的回归问题，其中静态文件意外被忽略 (:ticket:"
"`23583`)。"

msgid "Django 1.7.10 release notes"
msgstr "Django 1.7.10 版本发行说明"

msgid "Django 1.7.10 fixes a security issue in 1.7.9."
msgstr "Django 1.7.10 修复了 1.7.9 中的一个安全问题。"

msgid "Django 1.7.11 release notes"
msgstr "Django 1.7.11 版本发行说明"

msgid "*November 24, 2015*"
msgstr "*2015 年 11 月 24 日*"

msgid "Django 1.7.11 fixes a security issue and a data loss bug in 1.7.10."
msgstr "Django 1.7.11 修复了 1.7.10 中的一个安全问题和一个数据丢失的错误。"

msgid "Fixed settings leak possibility in ``date`` template filter"
msgstr "修复了模板过滤器 ``date`` 中的设置泄漏可能性"

msgid ""
"If an application allows users to specify an unvalidated format for dates "
"and passes this format to the :tfilter:`date` filter, e.g. ``{{ last_updated|"
"date:user_date_format }}``, then a malicious user could obtain any secret in "
"the application's settings by specifying a settings key instead of a date "
"format. e.g. ``\"SECRET_KEY\"`` instead of ``\"j/m/Y\"``."
msgstr ""
"如果一个应用程序允许用户指定未经验证的日期格式，并将此格式传递给 :tfilter:"
"`date` 过滤器，例如 ``{{ last_updated|date:user_date_format }}``，那么一个恶"
"意用户可以通过指定设置键而不是日期格式来获取应用程序设置中的任何密钥，例如 "
"``\"SECRET_KEY\"`` 而不是 ``\"j/m/Y\"``。"

msgid ""
"To remedy this, the underlying function used by the ``date`` template "
"filter, ``django.utils.formats.get_format()``, now only allows accessing the "
"date/time formatting settings."
msgstr ""
"为了解决这个问题，被 ``date`` 模板过滤器使用的底层函数 ``django.utils."
"formats.get_format()`` 现在只允许访问日期/时间格式设置。"

msgid ""
"Fixed a data loss possibility with :class:`~django.db.models.Prefetch` if "
"``to_attr`` is set to a ``ManyToManyField`` (:ticket:`25693`)."
msgstr ""
"修复了使用 :class:`~django.db.models.Prefetch` 时，如果将 ``to_attr`` 设置为 "
"``ManyToManyField``，可能会导致数据丢失的问题 (:ticket:`25693`)。"

msgid "Django 1.7.2 release notes"
msgstr "Django 1.7.2 版本发行说明"

msgid "Django 1.7.2 fixes several bugs in 1.7.1."
msgstr "Django 1.7.2 修复了 1.7.1 中的几个错误。"

msgid ""
"Fixed migration's renaming of auto-created many-to-many tables when "
"changing :attr:`Meta.db_table <django.db.models.Options.db_table>` (:ticket:"
"`23630`)."
msgstr ""
"修复了在更改 :attr:`Meta.db_table <django.db.models.Options.db_table>` 时迁移"
"对自动创建的多对多表的重命名问题 (:ticket:`23630`)。"

msgid ""
"Fixed a migration crash when adding an explicit ``id`` field to a model on "
"SQLite (:ticket:`23702`)."
msgstr ""
"修复了在 SQLite 上向模型添加显式 ``id`` 字段时迁移崩溃的问题 (:ticket:"
"`23702`)。"

msgid ""
"Added a warning for duplicate models when a module is reloaded. Previously a "
"``RuntimeError`` was raised every time two models clashed in the app "
"registry. (:ticket:`23621`)."
msgstr ""
"在重新加载模块时，当存在重复的模型时添加了警告。以前，每当两个模型在应用程序"
"注册表中冲突时，都会引发 ``RuntimeError`` (:ticket:`23621`)。"

msgid ""
"Prevented :djadmin:`flush` from loading initial data for migrated apps (:"
"ticket:`23699`)."
msgstr ""
"防止 :djadmin:`flush` 为已迁移的应用程序加载初始数据 (:ticket:`23699`)。"

msgid ""
"Fixed a :djadmin:`makemessages` regression in 1.7.1 when :setting:"
"`STATIC_ROOT` has the default ``None`` value (:ticket:`23717`)."
msgstr ""
"修复了 1.7.1 中的 :djadmin:`makemessages` 回归问题，当 :setting:"
"`STATIC_ROOT` 具有默认值 ``None`` 时 (:ticket:`23717`)。"

msgid "Added GeoDjango compatibility with mysqlclient database driver."
msgstr "添加了 GeoDjango 与 mysqlclient 数据库驱动的兼容性。"

msgid ""
"Fixed MySQL 5.6+ crash with ``GeometryField``\\s in migrations (:ticket:"
"`23719`)."
msgstr ""
"修复了 MySQL 5.6+ 在迁移中与 ``GeometryField`` 相关的崩溃问题 (:ticket:"
"`23719`)。"

msgid ""
"Fixed a migration crash when removing a field that is referenced in "
"``AlterIndexTogether`` or ``AlterUniqueTogether`` (:ticket:`23614`)."
msgstr ""
"修复了在删除一个被 ``AlterIndexTogether`` 或 ``AlterUniqueTogether`` 引用的字"
"段时的迁移崩溃问题 (:ticket:`23614`)。"

msgid "Updated the first day of the week in the Ukrainian locale to Monday."
msgstr "将乌克兰语环境中每周的第一天更新为星期一。"

msgid ""
"Added support for transactional spatial metadata initialization on "
"SpatiaLite 4.1+ (:ticket:`23152`)."
msgstr ""
"在 SpatiaLite 4.1+ 上添加了事务性空间元数据初始化的支持 (:ticket:`23152`)。"

msgid ""
"Fixed a migration crash that prevented changing a nullable field with a "
"default to non-nullable with the same default (:ticket:`23738`)."
msgstr ""
"修复了迁移中的崩溃问题，该问题阻止了将具有相同默认值的可空字段更改为非可空字"
"段 (:ticket:`23738`)。"

msgid ""
"Fixed a migration crash when adding ``GeometryField``\\s with ``blank=True`` "
"on PostGIS (:ticket:`23731`)."
msgstr ""
"修复了在 PostGIS 上添加具有 ``blank=True`` 的 ``GeometryField`` 时的迁移崩溃"
"问题 (:ticket:`23731`)。"

msgid ""
"Allowed usage of ``DateTimeField()`` as ``Transform.output_field`` (:ticket:"
"`23420`)."
msgstr ""
"允许将 ``DateTimeField()`` 用作 ``Transform.output_field`` (:ticket:"
"`23420`)。"

msgid ""
"Fixed a migration serializing bug involving ``float(\"nan\")`` and "
"``float(\"inf\")`` (:ticket:`23770`)."
msgstr ""
"修复了与 ``float(\"nan\")`` 和 ``float(\"inf\")`` 相关的迁移序列化 bug (:"
"ticket:`23770`)。"

msgid ""
"Fixed a regression where custom form fields having a ``queryset`` attribute "
"but no ``limit_choices_to`` could not be used in a :class:`~django.forms."
"ModelForm` (:ticket:`23795`)."
msgstr ""
"修复了回归问题，其中具有 ``queryset`` 属性但没有 ``limit_choices_to`` 的自定"
"义表单字段不能在 :class:`~django.forms.ModelForm` 中使用 (:ticket:`23795`)。"

msgid ""
"Fixed a custom field type validation error with MySQL backend when "
"``db_type`` returned ``None`` (:ticket:`23761`)."
msgstr ""
"修复了在 MySQL 后端中，当 ``db_type`` 返回 ``None`` 时的自定义字段类型验证错"
"误 (:ticket:`23761`)。"

msgid ""
"Fixed a migration crash when a field is renamed that is part of an "
"``index_together`` (:ticket:`23859`)."
msgstr ""
"修复了一个当重命名一个作为 ``index_together`` 的一部分的字段时的迁移崩溃问题 "
"(:ticket:`23859`)。"

msgid ""
"Fixed :djadmin:`squashmigrations` to respect the ``--no-optimize`` parameter "
"(:ticket:`23799`)."
msgstr ""
"修复了 :djadmin:`squashmigrations` 以尊重 ``--no-optimize`` 参数 (:ticket:"
"`23799`)。"

msgid ""
"Made :class:`~django.db.migrations.operations.RenameModel` reversible (:"
"ticket:`22248`)"
msgstr ""
"使 :class:`~django.db.migrations.operations.RenameModel` 可逆操作 (:ticket:"
"`22248`)。"

msgid ""
"Avoided unnecessary rollbacks of migrations from other apps when migrating "
"backwards (:ticket:`23410`)."
msgstr ""
"在向后迁移时避免了不必要的来自其他应用程序的迁移回滚 (:ticket:`23410`)。"

msgid ""
"Fixed a rare query error when using deeply nested subqueries (:ticket:"
"`23605`)."
msgstr "修复了在使用深度嵌套子查询时的一种罕见的查询错误 (:ticket:`23605`)。"

msgid ""
"Fixed a crash in migrations when deleting a field that is part of a ``index/"
"unique_together`` constraint (:ticket:`23794`)."
msgstr ""
"修复了在删除一个作为 ``index/unique_together`` 约束的一部分的字段时迁移中的崩"
"溃问题 (:ticket:`23794`)。"

msgid ""
"Fixed ``django.core.files.File.__repr__()`` when the file's ``name`` "
"contains Unicode characters (:ticket:`23888`)."
msgstr ""
"修复了当文件的 ``name`` 包含 Unicode 字符时，``django.core.files.File."
"__repr__()`` 的问题 (:ticket:`23888`)。"

msgid ""
"Added missing context to the admin's ``delete_selected`` view that prevented "
"custom site header, etc. from appearing (:ticket:`23898`)."
msgstr ""
"在管理员的 ``delete_selected`` 视图中添加了缺失的上下文，以防止自定义站点标题"
"等不显示 (:ticket:`23898`)。"

msgid ""
"Fixed an infinite loop bug for certain cyclic migration dependencies, and "
"made the error message for cyclic dependencies much more helpful."
msgstr ""
"修复了某些循环迁移依赖关系的无限循环 bug，并对循环依赖关系的错误消息进行了改"
"进，使其更加有帮助。"

msgid "Added missing ``index_together`` handling for SQLite (:ticket:`23880`)."
msgstr "为 SQLite 添加了缺失的 ``index_together`` 处理 (:ticket:`23880`)。"

msgid ""
"Fixed a crash when ``RunSQL`` SQL content was collected by the schema "
"editor, typically when using ``sqlmigrate`` (:ticket:`23909`)."
msgstr ""
"修复了在模式编辑器收集 ``RunSQL`` SQL 内容时崩溃的问题，通常在使用 "
"``sqlmigrate`` 时发生 (:ticket:`23909`)。"

msgid ""
"Fixed a regression in ``contrib.admin`` add/change views which caused some "
"``ModelAdmin`` methods to receive the incorrect ``obj`` value (:ticket:"
"`23934`)."
msgstr ""
"修复了 ``contrib.admin`` 添加/更改视图中的回归问题，导致一些 ``ModelAdmin`` "
"方法接收到错误的 ``obj`` 值 (:ticket:`23934`)。"

msgid ""
"Fixed ``runserver`` crash when socket error message contained Unicode "
"characters (:ticket:`23946`)."
msgstr ""
"修复了当套接字错误消息包含 Unicode 字符时，``runserver`` 崩溃的问题 (:ticket:"
"`23946`)。"

msgid ""
"Fixed serialization of ``type`` when adding a ``deconstruct()`` method (:"
"ticket:`23950`)."
msgstr ""
"修复了在添加 ``deconstruct()`` 方法时对 ``type`` 的序列化问题 (:ticket:"
"`23950`)。"

msgid ""
"Prevented the ``django.contrib.auth.middleware."
"SessionAuthenticationMiddleware`` from setting a ``\"Vary: Cookie\"`` header "
"on all responses (:ticket:`23939`)."
msgstr ""
"阻止了 ``django.contrib.auth.middleware.SessionAuthenticationMiddleware`` 在"
"所有响应上设置 ``\"Vary: Cookie\"`` 头 (:ticket:`23939`)。"

msgid ""
"Fixed a crash when adding ``blank=True`` to ``TextField()`` on MySQL (:"
"ticket:`23920`)."
msgstr ""
"修复了在 MySQL 上将 ``blank=True`` 添加到 ``TextField()`` 时的崩溃问题 (:"
"ticket:`23920`)。"

msgid ""
"Fixed index creation by the migration infrastructure, particularly when "
"dealing with PostgreSQL specific ``{text|varchar}_pattern_ops`` indexes (:"
"ticket:`23954`)."
msgstr ""
"修复了迁移基础结构创建索引的问题，特别是在处理 PostgreSQL 特定的 ``{text|"
"varchar}_pattern_ops`` 索引时的问题 (:ticket:`23954`)。"

msgid ""
"Fixed bug in ``makemigrations`` that created broken migration files when "
"dealing with multiple table inheritance and inheriting from more than one "
"model (:ticket:`23956`)."
msgstr ""
"修复了在处理多表继承并继承自多个模型时，``makemigrations`` 会创建损坏的迁移文"
"件的 bug (:ticket:`23956`)。"

msgid ""
"Fixed a crash when a ``MultiValueField`` has invalid data (:ticket:`23674`)."
msgstr ""
"修复了当 ``MultiValueField`` 具有无效数据时的崩溃问题 (:ticket:`23674`)。"

msgid ""
"Fixed a crash in the admin when using \"Save as new\" and also deleting a "
"related inline (:ticket:`23857`)."
msgstr ""
"修复了在管理员中使用 \"另存为新\" 并删除相关联的内联时的崩溃问题 (:ticket:"
"`23857`)。"

msgid ""
"Always converted ``related_name`` to text (Unicode), since that is required "
"on Python 3 for interpolation. Removed conversion of ``related_name`` to "
"text in migration deconstruction (:ticket:`23455` and :ticket:`23982`)."
msgstr ""
"始终将 ``related_name`` 转换为文本 (Unicode)，因为在 Python 3 中，这是插值所"
"必需的。移除了迁移反构造中的 ``related_name`` 到文本的转换 (:ticket:`23455` "
"和 :ticket:`23982`)。"

msgid ""
"Enlarged the sizes of tablespaces which are created by default for testing "
"on Oracle (the main tablespace was increased from 200M to 300M and the "
"temporary tablespace from 100M to 150M). This was required to accommodate "
"growth in Django's own test suite (:ticket:`23969`)."
msgstr ""
"扩大了默认情况下在 Oracle 上用于测试的表空间的大小（主表空间从 200M 增加到 "
"300M，临时表空间从 100M 增加到 150M）。这是为了适应 Django 自己的测试套件的增"
"长而需要的 (:ticket:`23969`)。"

msgid "Fixed ``timesince`` filter translations in Korean (:ticket:`23989`)."
msgstr "修复了韩语中 ``timesince`` 过滤器的翻译问题 (:ticket:`23989`)。"

msgid ""
"Fixed the SQLite ``SchemaEditor`` to properly add defaults in the absence of "
"a user specified ``default``. For example, a ``CharField`` with "
"``blank=True`` didn't set existing rows to an empty string which resulted in "
"a crash when adding the ``NOT NULL`` constraint (:ticket:`23987`)."
msgstr ""
"修复了 SQLite 的 ``SchemaEditor`` 在没有用户指定的 ``default`` 的情况下正确添"
"加默认值的问题。例如，一个具有 ``blank=True`` 的 ``CharField`` 没有将现有的行"
"设置为空字符串，这会在添加 ``NOT NULL`` 约束时导致崩溃 (:ticket:`23987`)。"

msgid ""
"``makemigrations`` no longer prompts for a default value when adding "
"``TextField()`` or ``CharField()`` without a ``default`` (:ticket:`23405`)."
msgstr ""
"在添加没有 ``default`` 的 ``TextField()`` 或 ``CharField()`` 时，"
"``makemigrations`` 不再提示输入默认值 (:ticket:`23405`)。"

msgid ""
"Fixed a migration crash when adding ``order_with_respect_to`` to a table "
"with existing rows (:ticket:`23983`)."
msgstr ""
"修复了在向具有现有行的表添加 ``order_with_respect_to`` 时的迁移崩溃问题 (:"
"ticket:`23983`)。"

msgid ""
"Restored the ``pre_migrate`` signal if all apps have migrations (:ticket:"
"`23975`)."
msgstr ""
"如果所有应用程序都具有迁移，则恢复了 ``pre_migrate`` 信号 (:ticket:`23975`)。"

msgid ""
"Made admin system checks run for custom ``AdminSite``\\s (:ticket:`23497`)."
msgstr "使自定义 ``AdminSite`` 运行管理员系统检查 (:ticket:`23497`)。"

msgid ""
"Ensured the app registry is fully populated when unpickling models. When an "
"external script (like a queueing infrastructure) reloads pickled models, it "
"could crash with an ``AppRegistryNotReady`` exception (:ticket:`24007`)."
msgstr ""
"确保在反序列化模型时完全填充应用程序注册表。当外部脚本（如队列基础架构）重新"
"加载序列化的模型时，可能会出现 ``AppRegistryNotReady`` 异常导致崩溃 (:ticket:"
"`24007`)。"

msgid ""
"Added quoting to field indexes in the SQL generated by migrations to prevent "
"a crash when the index name requires it (:ticket:`24015`)."
msgstr ""
"在迁移生成的 SQL 中为字段索引添加引号，以防止索引名称需要引号时导致崩溃 (:"
"ticket:`24015`)。"

msgid ""
"Added ``datetime.time`` support to migrations questioner (:ticket:`23998`)."
msgstr "在迁移问题中添加了对 ``datetime.time`` 的支持 (:ticket:`23998`)。"

msgid "Fixed admindocs crash on apps installed as eggs (:ticket:`23525`)."
msgstr ""
"修复了在以 egg 形式安装的应用程序上的 admindocs 崩溃问题 (:ticket:`23525`)。"

msgid ""
"Changed migrations autodetector to generate an ``AlterModelOptions`` "
"operation instead of ``DeleteModel`` and ``CreateModel`` operations when "
"changing ``Meta.managed``. This prevents data loss when changing ``managed`` "
"from ``False`` to ``True`` and vice versa (:ticket:`24037`)."
msgstr ""
"更改了迁移自动检测器，以在更改 ``Meta.managed`` 时生成 ``AlterModelOptions`` "
"操作，而不是生成 ``DeleteModel`` 和 ``CreateModel`` 操作。这可以防止在 "
"``managed`` 从 ``False`` 更改为 ``True`` 或反之时丢失数据 (:ticket:`24037`)。"

msgid ""
"Enabled the ``sqlsequencereset`` command on apps with migrations (:ticket:"
"`24054`)."
msgstr ""
"在具有迁移的应用程序上启用了 ``sqlsequencereset`` 命令 (:ticket:`24054`)。"

msgid "Added tablespace SQL to apps with migrations (:ticket:`24051`)."
msgstr "在具有迁移的应用程序中添加了表空间 SQL (:ticket:`24051`)。"

msgid ""
"Corrected ``contrib.sites`` default site creation in a multiple database "
"setup (:ticket:`24000`)."
msgstr ""
"在多数据库设置中纠正了 ``contrib.sites`` 默认站点创建的问题 (:ticket:"
"`24000`)。"

msgid ""
"Restored support for objects that aren't :class:`str` or :class:`bytes` in "
"``django.utils.safestring.mark_for_escaping()`` on Python 3."
msgstr ""
"在 Python 3 中恢复了 ``django.utils.safestring.mark_for_escaping()`` 中不是 :"
"class:`str` 或 :class:`bytes` 类型的对象的支持。"

msgid ""
"Supported strings escaped by third-party libraries with the ``__html__`` "
"convention in the template engine (:ticket:`23831`)."
msgstr ""
"在模板引擎中支持了通过第三方库使用 ``__html__`` 约定进行转义的字符串 (:"
"ticket:`23831`)。"

msgid ""
"Prevented extraneous ``DROP DEFAULT`` SQL in migrations (:ticket:`23581`)."
msgstr "防止在迁移中出现多余的 ``DROP DEFAULT`` SQL (:ticket:`23581`)。"

msgid ""
"Restored the ability to use more than five levels of subqueries (:ticket:"
"`23758`)."
msgstr "恢复了使用超过五层子查询的能力 (:ticket:`23758`)。"

msgid ""
"Fixed crash when ``ValidationError`` is initialized with a "
"``ValidationError`` that is initialized with a dictionary (:ticket:`24008`)."
msgstr ""
"修复了当使用一个初始化为字典的 ``ValidationError`` 来初始化另一个 "
"``ValidationError`` 时出现崩溃的问题 (:ticket:`24008`)。"

msgid ""
"Prevented a crash on apps without migrations when running ``migrate --list`` "
"(:ticket:`23366`)."
msgstr ""
"在运行 ``migrate --list`` 时，防止了在没有迁移的应用程序上发生崩溃 (:ticket:"
"`23366`)。"

msgid "Django 1.7.3 release notes"
msgstr "Django 1.7.3 版本发行说明"

msgid "Django 1.7.3 fixes several security issues and bugs in 1.7.2."
msgstr "Django 1.7.3 修复了 1.7.2 版本中的一些安全问题和错误。"

msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 25%. This part of the normal major release process was "
"inadvertently omitted in 1.7. This backwards compatible change will not "
"affect users who have subclassed ``django.contrib.auth.hashers."
"PBKDF2PasswordHasher`` to change the default value."
msgstr ""
"PBKDF2 密码哈希器的默认迭代次数增加了 25%。这是正常的主要发布流程的一部分，"
"在 1.7 版中无意中被遗漏。这个向后兼容的更改不会影响那些已经子类化了 ``django."
"contrib.auth.hashers.PBKDF2PasswordHasher`` 以更改默认值的用户。"

msgid ""
"Fixed a crash in the CSRF middleware when handling non-ASCII referer header "
"(:ticket:`23815`)."
msgstr ""
"修复了 CSRF 中间件在处理非 ASCII referer 头部时的崩溃问题（:ticket:"
"`23815`）。"

msgid ""
"Fixed a crash in the ``django.contrib.auth.redirect_to_login`` view when "
"passing a ``reverse_lazy()`` result on Python 3 (:ticket:`24097`)."
msgstr ""
"修复了在 Python 3 上传递 ``reverse_lazy()`` 结果时，``django.contrib.auth."
"redirect_to_login`` 视图中的崩溃问题（:ticket:`24097`）。"

msgid "Added correct formats for Greek (``el``) (:ticket:`23967`)."
msgstr "为希腊语（``el``）添加了正确的格式（:ticket:`23967`)。"

msgid ""
"Fixed a migration crash when unapplying a migration where multiple "
"operations interact with the same model (:ticket:`24110`)."
msgstr ""
"修复了在取消应用多个操作与同一模型交互的迁移时出现的崩溃问题（:ticket:"
"`24110`)。"

msgid "Django 1.7.4 release notes"
msgstr "Django 1.7.4 版本发行说明"

msgid "Django 1.7.4 fixes several bugs in 1.7.3."
msgstr "Django 1.7.4 修复了 1.7.3 版本中的一些错误。"

msgid ""
"Fixed a migration crash when unapplying ``contrib.contenttypes``’s or "
"``contrib.auth``’s first migration (:ticket:`24075`)."
msgstr ""
"修复了在取消应用 ``contrib.contenttypes`` 或 ``contrib.auth`` 的第一个迁移时"
"出现的崩溃问题（:ticket:`24075`)。"

msgid ""
"Made the migration's ``RenameModel`` operation rename ``ManyToManyField`` "
"tables (:ticket:`24135`)."
msgstr ""
"使迁移中的 ``RenameModel`` 操作能够重命名 ``ManyToManyField`` 表（:ticket:"
"`24135`)。"

msgid ""
"Fixed a migration crash on MySQL when migrating from a ``OneToOneField`` to "
"a ``ForeignKey`` (:ticket:`24163`)."
msgstr ""
"修复了在从 ``OneToOneField`` 迁移到 ``ForeignKey`` 时，在 MySQL 上发生的迁移"
"崩溃问题（:ticket:`24163`)。"

msgid ""
"Prevented the ``static.serve`` view from producing ``ResourceWarning``\\s in "
"certain circumstances (security fix regression, :ticket:`24193`)."
msgstr ""
"在某些情况下，防止 ``static.serve`` 视图产生 ``ResourceWarning`` （安全性修复"
"回退，:ticket:`24193`)。"

msgid ""
"Fixed schema check for ManyToManyField to look for internal type instead of "
"checking class instance, so you can write custom m2m-like fields with the "
"same behavior. (:ticket:`24104`)."
msgstr ""
"修复了对 ManyToManyField 的模式检查，以查找内部类型而不是检查类实例，因此您可"
"以编写具有相同行为的自定义 ManyToManyField 类似字段。（:ticket:`24104`)。"

msgid "Django 1.7.5 release notes"
msgstr "Django 1.7.5 版本发行说明"

msgid "*February 25, 2015*"
msgstr "*2015 年 2 月 25 日*"

msgid "Django 1.7.5 fixes several bugs in 1.7.4."
msgstr "Django 1.7.5 修复了 1.7.4 版本中的一些错误。"

msgid ""
"Reverted a fix that prevented a migration crash when unapplying ``contrib."
"contenttypes``’s or ``contrib.auth``’s first migration (:ticket:`24075`) due "
"to severe impact on the test performance (:ticket:`24251`) and problems in "
"multi-database setups (:ticket:`24298`)."
msgstr ""
"由于对测试性能的严重影响（:ticket:`24251`）和在多数据库设置中出现的问题（:"
"ticket:`24298`），回退了一个修复，该修复防止在取消应用 ``contrib."
"contenttypes`` 或 ``contrib.auth`` 的第一个迁移时出现迁移崩溃问题（:ticket:"
"`24075`)。"

msgid ""
"Fixed a regression that prevented custom fields inheriting from "
"``ManyToManyField`` from being recognized in migrations (:ticket:`24236`)."
msgstr ""
"修复了阻止自定义字段继承自 ``ManyToManyField`` 在迁移中被识别的回退问题（:"
"ticket:`24236`)。"

msgid ""
"Fixed crash in ``contrib.sites`` migrations when a default database isn't "
"used (:ticket:`24332`)."
msgstr ""
"修复了在未使用默认数据库时，``contrib.sites`` 迁移中的崩溃问题（:ticket:"
"`24332`)。"

msgid ""
"Added the ability to set the isolation level on PostgreSQL with psycopg2 ≥ "
"2.4.2 (:ticket:`24318`). It was advertised as a new feature in Django 1.6 "
"but it didn't work in practice."
msgstr ""
"添加了在使用 psycopg2 ≥ 2.4.2 时在 PostgreSQL 上设置隔离级别的功能（:ticket:"
"`24318`）。这在 Django 1.6 中被宣传为一个新功能，但在实际使用中没有起作用。"

msgid "Formats for the Azerbaijani locale (``az``) have been added."
msgstr "已添加阿塞拜疆语（``az``）区域的格式。"

msgid "Django 1.7.6 release notes"
msgstr "Django 1.7.6 版本发行说明"

msgid "*March 9, 2015*"
msgstr "*2015 年 3 月 9 日*"

msgid "Django 1.7.6 fixes a security issue and several bugs in 1.7.5."
msgstr "Django 1.7.6 修复了 1.7.5 版本中的一个安全问题和一些错误。"

msgid ""
"Mitigated an XSS attack via properties in ``ModelAdmin.readonly_fields``"
msgstr "通过 ``ModelAdmin.readonly_fields`` 中的属性缓解了XSS攻击"

msgid ""
"The :attr:`ModelAdmin.readonly_fields <django.contrib.admin.ModelAdmin."
"readonly_fields>` attribute in the Django admin allows displaying model "
"fields and model attributes. While the former were correctly escaped, the "
"latter were not. Thus untrusted content could be injected into the admin, "
"presenting an exploitation vector for XSS attacks."
msgstr ""
"Django admin 中的 :attr:`ModelAdmin.readonly_fields <django.contrib.admin."
"ModelAdmin.readonly_fields>` 属性允许显示模型字段和模型属性。虽然前者已经正确"
"转义，但后者没有。因此，不受信任的内容可能会被注入到管理界面，从而构成了 XSS "
"攻击的利用向量。"

msgid ""
"In this vulnerability, every model attribute used in ``readonly_fields`` "
"that is not an actual model field (e.g. a :class:`property`) will **fail to "
"be escaped** even if that attribute is not marked as safe. In this release, "
"autoescaping is now correctly applied."
msgstr ""
"在这个漏洞中，``readonly_fields`` 中使用的每个模型属性，如果不是实际的模型字"
"段（例如一个 :class:`property`），即使该属性未标记为安全，也会 **未经转义而失"
"败**。在这个版本中，现在正确地应用了自动转义。"

msgid ""
"Fixed crash when coercing ``ManyRelatedManager`` to a string (:ticket:"
"`24352`)."
msgstr ""
"修复了将 ``ManyRelatedManager`` 强制转换为字符串时的崩溃问题（:ticket:"
"`24352`）。"

msgid ""
"Fixed a bug that prevented migrations from adding a foreign key constraint "
"when converting an existing field to a foreign key (:ticket:`24447`)."
msgstr ""
"修复了一个 bug，当将现有字段转换为外键时，阻止迁移添加外键约束的问题（:"
"ticket:`24447`）。"

msgid "Django 1.7.7 release notes"
msgstr "Django 1.7.7 版本发行说明"

msgid "Django 1.7.7 fixes several bugs and security issues in 1.7.6."
msgstr "Django 1.7.7 修复了 1.7.6 版本中的一些错误和安全问题。"

msgid ""
"Fixed renaming of classes in migrations where renaming a subclass would "
"cause incorrect state to be recorded for objects that referenced the "
"superclass (:ticket:`24354`)."
msgstr ""
"修复了在迁移中重命名类的问题，其中重命名子类会导致引用超类的对象记录错误状态"
"（:ticket:`24354`）。"

msgid ""
"Stopped writing migration files in dry run mode when merging migration "
"conflicts. When ``makemigrations --merge`` is called with ``verbosity=3`` "
"the migration file is written to ``stdout`` (:ticket:`24427`)."
msgstr ""
"在合并迁移冲突时，在干运行模式下停止写入迁移文件。当使用 ``makemigrations --"
"merge`` 并指定 ``verbosity=3`` 时，迁移文件将写入到 ``stdout`` （:ticket:"
"`24427`）。"

msgid "Django 1.7.8 release notes"
msgstr "Django 1.7.8 版本发行说明"

msgid "*May 1, 2015*"
msgstr "*2015 年 5 月 1 日*"

msgid "Django 1.7.8 fixes:"
msgstr "Django 1.7.8 修复了以下问题："

msgid ""
"Database introspection with SQLite 3.8.9 (released April 8, 2015) (:ticket:"
"`24637`)."
msgstr ""
"使用 SQLite 3.8.9（发布于 2015 年 4 月 8 日）进行数据库内省（:ticket:"
"`24637`）。"

msgid "A database table name quoting regression in 1.7.2 (:ticket:`24605`)."
msgstr "1.7.2 中的数据库表名引用回退问题（:ticket:`24605`）。"

msgid ""
"The loss of ``null``/``not null`` column properties during field alteration "
"of MySQL databases (:ticket:`24595`)."
msgstr ""
"在 MySQL 数据库字段修改过程中丢失了 ``null``/``not null`` 列属性（:ticket:"
"`24595`）。"

msgid "Django 1.7.9 release notes"
msgstr "Django 1.7.9 版本发行说明"

msgid "Django 1.7.9 fixes several security issues and bugs in 1.7.8."
msgstr "Django 1.7.9 修复了 1.7.8 版本中的多个安全问题和错误。"

msgid ""
":func:`~django.core.validators.validate_ipv4_address`, :func:`~django.core."
"validators.validate_slug`, and :class:`~django.core.validators.URLValidator` "
"are also affected, however, as of Django 1.6 the ``GenericIPAddresseField``, "
"``IPAddressField``, ``SlugField``, and ``URLField`` form fields which use "
"these validators all strip the input, so the possibility of newlines "
"entering your data only exists if you are using these validators outside of "
"the form fields."
msgstr ""
":func:`~django.core.validators.validate_ipv4_address`、:func:`~django.core."
"validators.validate_slug` 和 :class:`~django.core.validators.URLValidator` 也"
"受到影响，但从 Django 1.6 开始，使用这些验证器的 ``GenericIPAddresseField``、"
"``IPAddressField``、``SlugField`` 和 ``URLField`` 表单字段都会剥离输入，因此"
"只有在在表单字段之外使用这些验证器时才存在新行进入数据的可能性。"

msgid ""
"Prevented the loss of ``null``/``not null`` column properties during field "
"renaming of MySQL databases (:ticket:`24817`)."
msgstr ""
"在重命名 MySQL 数据库字段时防止了丢失 ``null``/``not null`` 列属性（:ticket:"
"`24817`）。"

msgid ""
"Fixed ``SimpleTestCase.assertRaisesMessage()`` on Python 2.7.10 (:ticket:"
"`24903`)."
msgstr ""
"修复了在 Python 2.7.10 上的 ``SimpleTestCase.assertRaisesMessage()`` （:"
"ticket:`24903`）。"

msgid "Django 1.8 release notes"
msgstr "Django 1.8 版本发行说明"

msgid "*April 1, 2015*"
msgstr "*2015 年 4 月 1 日*"

msgid "Welcome to Django 1.8!"
msgstr "欢迎使用 Django 1.8 ！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-1.8>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.8>` "
"you'll want to be aware of when upgrading from Django 1.7 or older versions. "
"We've also :ref:`begun the deprecation process for some features <deprecated-"
"features-1.8>`, and some features have reached the end of their deprecation "
"process and :ref:`have been removed <removed-features-1.8>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-1.8>`，以及从 Django 1.7 或更早版"
"本升级时需要注意的一些 :ref:`不向后兼容的变更 <backwards-incompatible-1.8>`。"
"我们还已经 :ref:`开始了一些功能的弃用过程 <deprecated-features-1.8>`，并且一"
"些功能已经完成了弃用过程并被 :ref:`移除了 <removed-features-1.8>`。"

msgid ""
"Django 1.8 has been designated as Django's second :term:`long-term support "
"release <Long-term support release>`. It will receive security updates for "
"at least three years after its release. Support for the previous LTS, Django "
"1.4, will end 6 months from the release date of Django 1.8."
msgstr ""
"Django 1.8 已被指定为 Django 的第二个 :term:`长期支持版本 <Long-term support "
"release>`。它将在发布后至少三年内接收安全更新。对于之前的 LTS 版本，Django "
"1.4，支持将在 Django 1.8 发布日期后的 6 个月内结束。"

msgid ""
"Django 1.8 requires Python 2.7, 3.2, 3.3, 3.4, or 3.5. We **highly "
"recommend** and only officially support the latest release of each series."
msgstr ""
"Django 1.8 需要 Python 2.7、3.2、3.3、3.4 或 3.5。我们 **强烈推荐** 并且只官"
"方支持每个系列的最新版本。"

msgid "Django 1.8 is the first release to support Python 3.5."
msgstr "Django 1.8 是第一个支持 Python 3.5 的版本。"

msgid ""
"Due to the end of upstream support for Python 3.2 in February 2016, we won't "
"test Django 1.8.x on Python 3.2 after the end of 2016."
msgstr ""
"由于 Python 3.2 在 2016 年 2 月结束了上游支持，因此在 2016 年底之后我们将不再"
"在 Python 3.2 上测试 Django 1.8.x 。"

msgid "What's new in Django 1.8"
msgstr "Django 1.8 的新特性"

msgid "``Model._meta`` API"
msgstr "``Model._meta`` API"

msgid ""
"Django now has a formalized API for :doc:`Model._meta </ref/models/meta>`, "
"providing an officially supported way to :ref:`retrieve fields <model-meta-"
"field-api>` and filter fields based on their :ref:`attributes <model-field-"
"attributes>`."
msgstr ""
"Django 现在有了一个正式的 API 用于 :doc:`Model._meta </ref/models/meta>`，提"
"供了一种官方支持的方式来 :ref:`检索字段 <model-meta-field-api>` 并根据它们"
"的 :ref:`属性 <model-field-attributes>` 进行过滤。"

msgid ""
"The ``Model._meta`` object has been part of Django since the days of "
"pre-0.96 \"Magic Removal\" -- it just wasn't an official, stable API. In "
"recognition of this, we've endeavored to maintain backwards-compatibility "
"with the old API endpoint where possible. However, API endpoints that aren't "
"part of the new official API have been deprecated and will eventually be "
"removed."
msgstr ""
"``Model._meta`` 对象从 Django 的 0.96 版本前的 \"Magic Removal\" 时期就存在"
"了，只是它不是一个官方的、稳定的 API。鉴于这一点，我们努力在可能的情况下保持"
"与旧 API 端点的向后兼容性。然而，那些不属于新官方 API 的 API 端点已经被弃用，"
"并最终将被移除。"

msgid "Multiple template engines"
msgstr "多模板引擎"

msgid ""
"Django 1.8 defines a stable API for integrating template backends. It "
"includes built-in support for the Django template language and for :class:"
"`~django.template.backends.jinja2.Jinja2`. It supports rendering templates "
"with multiple engines within the same project. Learn more about the new "
"features in the :doc:`topic guide </topics/templates>` and check the upgrade "
"instructions in older versions of the documentation."
msgstr ""
"Django 1.8 定义了一个稳定的 API 用于集成模板后端。它内置支持 Django 模板语言"
"和 :class:`~django.template.backends.jinja2.Jinja2`。它支持在同一个项目中使用"
"多个引擎来渲染模板。了解更多关于新功能的信息，请参阅 :doc:`主题指南 </topics/"
"templates>`，并查看早期版本文档中的升级说明。"

msgid "Security enhancements"
msgstr "安全增强"

msgid ""
"Several features of the :pypi:`django-secure` third-party library have been "
"integrated into Django. :class:`django.middleware.security."
"SecurityMiddleware` provides several security enhancements to the request/"
"response cycle. The new :option:`check --deploy` option allows you to check "
"your production settings file for ways to increase the security of your site."
msgstr ""
":pypi:`django-secure` 第三方库的几个功能已经集成到 Django 中。:class:`django."
"middleware.security.SecurityMiddleware` 提供了一些安全增强功能，用于请求/响应"
"循环。新的 :option:`check --deploy` 选项允许你检查生产设置文件，以提高站点的"
"安全性。"

msgid "New PostgreSQL specific functionality"
msgstr "新的 PostgreSQL 特有功能"

msgid ""
"Django now has a module with extensions for PostgreSQL specific features, "
"such as :class:`~django.contrib.postgres.fields.ArrayField`, :class:`~django."
"contrib.postgres.fields.HStoreField`, :ref:`range-fields`, and :lookup:"
"`unaccent` lookup. A full breakdown of the features is available :doc:`in "
"the documentation </ref/contrib/postgres/index>`."
msgstr ""
"Django 现在有一个模块，用于扩展 PostgreSQL 特定的功能，例如 :class:`~django."
"contrib.postgres.fields.ArrayField`、:class:`~django.contrib.postgres.fields."
"HStoreField`、:ref:`range-fields` 和 :lookup:`unaccent` 查找。可以在 :doc:`文"
"档 </ref/contrib/postgres/index>` 中找到有关这些功能的详细信息。"

msgid "New data types"
msgstr "新的数据类型"

msgid ""
"Django now has a :class:`~django.db.models.UUIDField` for storing "
"universally unique identifiers. It is stored as the native ``uuid`` data "
"type on PostgreSQL and as a fixed length character field on other backends. "
"There is a corresponding :class:`form field <django.forms.UUIDField>`."
msgstr ""
"Django 现在有一个 :class:`~django.db.models.UUIDField` 用于存储通用唯一标识"
"符。它在 PostgreSQL 上以本地的 ``uuid`` 数据类型存储，在其他后端上以固定长度"
"的字符字段存储。还有一个相应的 :class:`表单字段 <django.forms.UUIDField>`。"

msgid ""
"Django now has a :class:`~django.db.models.DurationField` for storing "
"periods of time - modeled in Python by :class:`~python:datetime.timedelta`. "
"It is stored in the native ``interval`` data type on PostgreSQL, as a "
"``INTERVAL DAY(9) TO SECOND(6)`` on Oracle, and as a ``bigint`` of "
"microseconds on other backends. Date and time related arithmetic has also "
"been improved on all backends. There is a corresponding :class:`form field "
"<django.forms.DurationField>`."
msgstr ""
"Django 现在有一个 :class:`~django.db.models.DurationField` 用于存储时间段，"
"Python 中用 :class:`~python:datetime.timedelta` 来建模。它在 PostgreSQL 上以"
"本地的 ``interval`` 数据类型存储，在 Oracle 上以 ``INTERVAL DAY(9) TO "
"SECOND(6)`` 存储，在其他后端上以微秒的 ``bigint`` 存储。所有后端上的日期和时"
"间相关算术操作也得到了改进。还有一个相应的 :class:`表单字段 <django.forms."
"DurationField>`。"

msgid "Query Expressions, Conditional Expressions, and Database Functions"
msgstr "查询表达式、条件表达式和数据库函数"

msgid ""
":doc:`Query Expressions </ref/models/expressions>` allow you to create, "
"customize, and compose complex SQL expressions. This has enabled annotate to "
"accept expressions other than aggregates. Aggregates are now able to "
"reference multiple fields, as well as perform arithmetic, similar to ``F()`` "
"objects. :meth:`~django.db.models.query.QuerySet.order_by` has also gained "
"the ability to accept expressions."
msgstr ""
":doc:`查询表达式 </ref/models/expressions>` 允许你创建、自定义和组合复杂的 "
"SQL 表达式。这使得 annotate 能够接受除了聚合之外的表达式。聚合现在可以引用多"
"个字段，并执行类似于 ``F()`` 对象的算术操作。:meth:`~django.db.models.query."
"QuerySet.order_by` 也具备接受表达式的能力。"

msgid ""
":doc:`Conditional Expressions </ref/models/conditional-expressions>` allow "
"you to use :keyword:`if` ... :keyword:`elif` ... :keyword:`else` logic "
"within queries."
msgstr ""
":doc:`条件表达式 </ref/models/conditional-expressions>` 允许你在查询中使用 :"
"keyword:`if` ... :keyword:`elif` ... :keyword:`else` 逻辑。"

msgid ""
"A collection of :doc:`database functions </ref/models/database-functions>` "
"is also included with functionality such as :class:`~django.db.models."
"functions.Coalesce`, :class:`~django.db.models.functions.Concat`, and :class:"
"`~django.db.models.functions.Substr`."
msgstr ""
"还包括了一组 :doc:`数据库函数 </ref/models/database-functions>`，其中包括 :"
"class:`~django.db.models.functions.Coalesce`、:class:`~django.db.models."
"functions.Concat` 和 :class:`~django.db.models.functions.Substr` 等功能。"

msgid "``TestCase`` data setup"
msgstr "``TestCase`` 数据设置"

msgid ""
":class:`~django.test.TestCase` has been refactored to allow for data "
"initialization at the class level using transactions and savepoints. "
"Database backends which do not support transactions, like MySQL with the "
"MyISAM storage engine, will still be able to run these tests but won't "
"benefit from the improvements. Tests are now run within two nested :func:"
"`~django.db.transaction.atomic()` blocks: one for the whole class and one "
"for each test."
msgstr ""
":class:`~django.test.TestCase` 已进行重构，以允许在类级别使用事务和保存点进行"
"数据初始化。不支持事务的数据库后端，比如使用 MyISAM 存储引擎的 MySQL，仍然可"
"以运行这些测试，但不会从改进中受益。现在，测试在两个嵌套的 :func:`~django.db."
"transaction.atomic()` 块中运行：一个用于整个类，一个用于每个测试。"

msgid ""
"The class method :meth:`TestCase.setUpTestData() <django.test.TestCase."
"setUpTestData>` adds the ability to set up test data at the class level. "
"Using this technique can speed up the tests as compared to using ``setUp()``."
msgstr ""
"类方法 :meth:`TestCase.setUpTestData() <django.test.TestCase.setUpTestData>` "
"添加了在类级别设置测试数据的能力。使用这种技术可以加速测试，与使用 "
"``setUp()`` 相比。"

msgid ""
"Fixture loading within ``TestCase`` is now performed once for the whole "
"``TestCase``."
msgstr "在 ``TestCase`` 中的 fixture 加载现在一次性完成整个 ``TestCase``。"

msgid ""
":class:`~django.contrib.admin.ModelAdmin` now has a :meth:`~django.contrib."
"admin.ModelAdmin.has_module_permission` method to allow limiting access to "
"the module on the admin index page."
msgstr ""
":class:`~django.contrib.admin.ModelAdmin` 现在具有一个 :meth:`~django."
"contrib.admin.ModelAdmin.has_module_permission` 方法，允许限制在管理索引页面"
"上对模块的访问。"

msgid ""
":class:`~django.contrib.admin.InlineModelAdmin` now has an attribute :attr:"
"`~django.contrib.admin.InlineModelAdmin.show_change_link` that supports "
"showing a link to an inline object's change form."
msgstr ""
":class:`~django.contrib.admin.InlineModelAdmin` 现在有一个属性 :attr:"
"`~django.contrib.admin.InlineModelAdmin.show_change_link`，支持显示到内联对象"
"的更改表单的链接。"

msgid ""
"Use the new ``django.contrib.admin.RelatedOnlyFieldListFilter`` in :attr:"
"`ModelAdmin.list_filter <django.contrib.admin.ModelAdmin.list_filter>` to "
"limit the ``list_filter`` choices to foreign objects which are attached to "
"those from the ``ModelAdmin``."
msgstr ""
"在 :attr:`ModelAdmin.list_filter <django.contrib.admin.ModelAdmin."
"list_filter>` 中使用新的 ``django.contrib.admin."
"RelatedOnlyFieldListFilter``，以将 ``list_filter`` 选项限制为与 "
"``ModelAdmin`` 相关联的外部对象。"

msgid ""
"The :meth:`ModelAdmin.delete_view() <django.contrib.admin.ModelAdmin."
"delete_view>` displays a summary of objects to be deleted on the deletion "
"confirmation page."
msgstr ""
":meth:`ModelAdmin.delete_view() <django.contrib.admin.ModelAdmin."
"delete_view>` 在删除确认页面上显示要删除的对象的摘要信息。"

msgid ""
"The jQuery library embedded in the admin has been upgraded to version 1.11.2."
msgstr "嵌入在管理员中的 jQuery 库已升级到 1.11.2 版本。"

msgid ""
"You can now specify :attr:`AdminSite.site_url <django.contrib.admin."
"AdminSite.site_url>` in order to display a link to the front-end site."
msgstr ""
"现在可以指定 :attr:`AdminSite.site_url <django.contrib.admin.AdminSite."
"site_url>`，以便在前端网站中显示一个链接。"

msgid ""
"You can now specify :attr:`ModelAdmin.show_full_result_count <django.contrib."
"admin.ModelAdmin.show_full_result_count>` to control whether or not the full "
"count of objects should be displayed on a filtered admin page."
msgstr ""
"现在可以指定 :attr:`ModelAdmin.show_full_result_count <django.contrib.admin."
"ModelAdmin.show_full_result_count>`，以控制是否在筛选后的管理页面上显示对象的"
"完整计数。"

msgid ""
"The ``AdminSite.password_change()`` method now has an ``extra_context`` "
"parameter."
msgstr ""
"``AdminSite.password_change()`` 方法现在有一个 ``extra_context`` 参数。"

msgid ""
"You can now control who may login to the admin site by overriding only :meth:"
"`AdminSite.has_permission() <django.contrib.admin.AdminSite.has_permission>` "
"and :attr:`AdminSite.login_form <django.contrib.admin.AdminSite."
"login_form>`. The ``base.html`` template has a new block ``usertools`` which "
"contains the user-specific header. A new context variable "
"``has_permission``, which gets its value from :meth:`~django.contrib.admin."
"AdminSite.has_permission`, indicates whether the user may access the site."
msgstr ""
"现在可以通过覆盖 :meth:`AdminSite.has_permission() <django.contrib.admin."
"AdminSite.has_permission>` 和 :attr:`AdminSite.login_form <django.contrib."
"admin.AdminSite.login_form>` 来控制谁可以登录到管理站点。``base.html`` 模板有"
"一个新的块 ``usertools``，其中包含用户特定的页眉。一个新的上下文变量 "
"``has_permission``，它的值来自于 :meth:`~django.contrib.admin.AdminSite."
"has_permission`，指示用户是否可以访问站点。"

msgid ""
"Foreign key dropdowns now have buttons for changing or deleting related "
"objects using a popup."
msgstr "外键下拉菜单现在通过弹出窗口提供更改或删除相关对象的按钮。"

msgid ":mod:`django.contrib.admindocs`"
msgstr ":mod:`django.contrib.admindocs`"

msgid "reStructuredText is now parsed in model docstrings."
msgstr "现在在模型的文档字符串中解析 reStructuredText 。"

msgid ""
"Authorization backends can now raise :class:`~django.core.exceptions."
"PermissionDenied` in :meth:`~django.contrib.auth.models.User.has_perm` and :"
"meth:`~django.contrib.auth.models.User.has_module_perms` to short-circuit "
"permission checking."
msgstr ""
"授权后端现在可以在 :meth:`~django.contrib.auth.models.User.has_perm` 和 :"
"meth:`~django.contrib.auth.models.User.has_module_perms` 中引发 :class:"
"`~django.core.exceptions.PermissionDenied` 以绕过权限检查。"

msgid ""
":class:`~django.contrib.auth.forms.PasswordResetForm` now has a method :meth:"
"`~django.contrib.auth.forms.PasswordResetForm.send_mail` that can be "
"overridden to customize the mail to be sent."
msgstr ""
":class:`~django.contrib.auth.forms.PasswordResetForm` 现在有一个可以被重写以"
"自定义要发送的邮件的方法 :meth:`~django.contrib.auth.forms.PasswordResetForm."
"send_mail`。"

msgid ""
"The ``max_length`` of :attr:`Permission.name <django.contrib.auth.models."
"Permission.name>` has been increased from 50 to 255 characters. Please run "
"the database migration."
msgstr ""
":attr:`Permission.name <django.contrib.auth.models.Permission.name>` 的 "
"``max_length`` 从 50 增加到 255 个字符。请运行数据库迁移。"

msgid ""
":attr:`~django.contrib.auth.models.CustomUser.USERNAME_FIELD` and :attr:"
"`~django.contrib.auth.models.CustomUser.REQUIRED_FIELDS` now supports :class:"
"`~django.db.models.ForeignKey`\\s."
msgstr ""
":attr:`~django.contrib.auth.models.CustomUser.USERNAME_FIELD` 和 :attr:"
"`~django.contrib.auth.models.CustomUser.REQUIRED_FIELDS` 现在支持 :class:"
"`~django.db.models.ForeignKey`。"

msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 33%. This backwards compatible change will not affect users who "
"have subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to "
"change the default value."
msgstr ""
"PBKDF2 密码哈希器的默认迭代次数增加了 33%。这个向后兼容的变更不会影响那些已经"
"子类化了 ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` 以更改默认值的"
"用户。"

msgid ""
"A new :doc:`GeoJSON serializer </ref/contrib/gis/serializers>` is now "
"available."
msgstr ""
"现在有一个新的 :doc:`GeoJSON 序列化程序 </ref/contrib/gis/serializers>` 可供"
"使用。"

msgid ""
"It is now allowed to include a subquery as a geographic lookup argument, for "
"example ``City.objects.filter(point__within=Country.objects."
"filter(continent='Africa').values('mpoly'))``."
msgstr ""
"现在允许将子查询作为地理查找参数，例如 ``City.objects."
"filter(point__within=Country.objects.filter(continent='Africa')."
"values('mpoly'))``。"

msgid ""
"The SpatiaLite backend now supports ``Collect`` and ``Extent`` aggregates "
"when the database version is 3.0 or later."
msgstr ""
"当数据库版本为 3.0 或更高时，SpatiaLite 后端现在支持 ``Collect`` 和 "
"``Extent`` 聚合函数。"

msgid ""
"The PostGIS 2 ``CREATE EXTENSION postgis`` and the SpatiaLite ``SELECT "
"InitSpatialMetaData`` initialization commands are now automatically run by :"
"djadmin:`migrate`."
msgstr ""
"PostGIS 2 中的 ``CREATE EXTENSION postgis`` 和 SpatiaLite 中的 ``SELECT "
"InitSpatialMetaData`` 初始化命令现在会被 :djadmin:`migrate` 自动执行。"

msgid ""
"The GDAL interface now supports retrieving properties of :ref:`raster "
"(image) data file <raster-data-source-objects>`."
msgstr ""
"GDAL 接口现在支持检索 :ref:`栅格（图像）数据文件 <raster-data-source-"
"objects>` 的属性。"

msgid ""
"Compatibility shims for ``SpatialRefSys`` and ``GeometryColumns`` changed in "
"Django 1.2 have been removed."
msgstr ""
"已删除了 Django 1.2 中更改的 ``SpatialRefSys`` 和 ``GeometryColumns`` 的兼容"
"性 shims。"

msgid ""
"All GDAL-related exceptions are now raised with ``GDALException``. The "
"former ``OGRException`` has been kept for backwards compatibility but should "
"not be used any longer."
msgstr ""
"现在所有与 GDAL 相关的异常都使用 ``GDALException`` 引发。以前的 "
"``OGRException`` 已保留以保持向后兼容性，但不应再使用。"

msgid ""
"Session cookie is now deleted after :meth:`~django.contrib.sessions.backends."
"base.SessionBase.flush()` is called."
msgstr ""
"在调用 :meth:`~django.contrib.sessions.backends.base.SessionBase.flush()` "
"后，会删除会话 cookie。"

msgid ""
"The new :attr:`Sitemap.i18n <django.contrib.sitemaps.Sitemap.i18n>` "
"attribute allows you to generate a sitemap based on the :setting:`LANGUAGES` "
"setting."
msgstr ""
"新的 :attr:`Sitemap.i18n <django.contrib.sitemaps.Sitemap.i18n>` 属性允许你基"
"于 :setting:`LANGUAGES` 设置生成多语言站点地图。"

msgid ""
":func:`~django.contrib.sites.shortcuts.get_current_site` will now lookup the "
"current site based on :meth:`request.get_host() <django.http.HttpRequest."
"get_host>` if the :setting:`SITE_ID` setting is not defined."
msgstr ""
"如果没有定义 :setting:`SITE_ID` 设置，:func:`~django.contrib.sites.shortcuts."
"get_current_site` 现在将基于 :meth:`request.get_host() <django.http."
"HttpRequest.get_host>` 查找当前站点。"

msgid ""
"The default :class:`~django.contrib.sites.models.Site` created when running "
"``migrate`` now respects the :setting:`SITE_ID` setting (instead of always "
"using ``pk=1``)."
msgstr ""
"在运行 ``migrate`` 时创建的默认 :class:`~django.contrib.sites.models.Site` 现"
"在会遵循 :setting:`SITE_ID` 设置（而不是总是使用 ``pk=1``）。"

msgid ""
"The ``incr()`` method of the ``django.core.cache.backends.locmem."
"LocMemCache`` backend is now thread-safe."
msgstr ""
"``django.core.cache.backends.locmem.LocMemCache`` 后端的 ``incr()`` 方法现在"
"是线程安全的。"

msgid "Cryptography"
msgstr "密码学"

msgid ""
"The ``max_age`` parameter of the :meth:`django.core.signing.TimestampSigner."
"unsign` method now also accepts a :py:class:`datetime.timedelta` object."
msgstr ""
":meth:`django.core.signing.TimestampSigner.unsign` 方法的 ``max_age`` 参数现"
"在也接受 :py:class:`datetime.timedelta` 对象。"

msgid ""
"The MySQL backend no longer strips microseconds from ``datetime`` values as "
"MySQL 5.6.4 and up supports fractional seconds depending on the declaration "
"of the datetime field (when ``DATETIME`` includes fractional precision "
"greater than 0). New datetime database columns created with Django 1.8 and "
"MySQL 5.6.4 and up will support microseconds. See the :ref:`MySQL database "
"notes <mysql-fractional-seconds>` for more details."
msgstr ""
"MySQL 后端不再从 ``datetime`` 值中去掉微秒，因为 MySQL 5.6.4 及更高版本根据 "
"datetime 字段的声明支持分数秒（当 ``DATETIME`` 包含大于 0 的分数精度时）。使"
"用 Django 1.8 和 MySQL 5.6.4 及更高版本创建的新 datetime 数据库列将支持微秒。"
"有关更多详细信息，请参阅 :ref:`MySQL 数据库注释 <mysql-fractional-seconds>`。"

msgid ""
"The MySQL backend no longer creates explicit indexes for foreign keys when "
"using the InnoDB storage engine, as MySQL already creates them automatically."
msgstr ""
"在使用 InnoDB 存储引擎时，MySQL 后端不再为外键创建显式索引，因为 MySQL 已经自"
"动创建了这些索引。"

msgid ""
"The Oracle backend no longer defines the ``connection_persists_old_columns`` "
"feature as ``True``. Instead, Oracle will now include a cache busting clause "
"when getting the description of a table."
msgstr ""
"Oracle 后端不再将 ``connection_persists_old_columns`` 特性定义为 ``True``。相"
"反，Oracle 现在在获取表的描述时将包括一个缓存破坏子句。"

msgid ""
":ref:`Email backends <topic-email-backends>` now support the context manager "
"protocol for opening and closing connections."
msgstr ""
":ref:`电子邮件后端 <topic-email-backends>` 现在支持上下文管理协议，用于打开和"
"关闭连接。"

msgid ""
"The SMTP email backend now supports ``keyfile`` and ``certfile`` "
"authentication with the :setting:`EMAIL_SSL_CERTFILE` and :setting:"
"`EMAIL_SSL_KEYFILE` settings."
msgstr ""
"SMTP 电子邮件后端现在支持使用 :setting:`EMAIL_SSL_CERTFILE` 和 :setting:"
"`EMAIL_SSL_KEYFILE` 设置进行 ``keyfile`` 和 ``certfile`` 身份验证。"

msgid ""
"The SMTP :class:`~django.core.mail.backends.smtp.EmailBackend` now supports "
"setting the ``timeout`` parameter with the :setting:`EMAIL_TIMEOUT` setting."
msgstr ""
"SMTP :class:`~django.core.mail.backends.smtp.EmailBackend` 现在支持使用 :"
"setting:`EMAIL_TIMEOUT` 设置来设置 ``timeout`` 参数。"

msgid ""
":class:`~django.core.mail.EmailMessage` and ``EmailMultiAlternatives`` now "
"support the ``reply_to`` parameter."
msgstr ""
":class:`~django.core.mail.EmailMessage` 和 ``EmailMultiAlternatives`` 现在支"
"持 ``reply_to`` 参数。"

msgid ""
":meth:`Storage.get_available_name() <django.core.files.storage.Storage."
"get_available_name>` and :meth:`Storage.save() <django.core.files.storage."
"Storage.save>` now take a ``max_length`` argument to implement storage-level "
"maximum filename length constraints. Filenames exceeding this argument will "
"get truncated. This prevents a database error when appending a unique suffix "
"to a long filename that already exists on the storage. See the :ref:"
"`deprecation note <storage-max-length-update>` about adding this argument to "
"your custom storage classes."
msgstr ""
":meth:`Storage.get_available_name() <django.core.files.storage.Storage."
"get_available_name>` 和 :meth:`Storage.save() <django.core.files.storage."
"Storage.save>` 现在接受一个 ``max_length`` 参数，以实现存储级别的最大文件名长"
"度约束。超过此参数的文件名将被截断。这可以防止在长文件名上追加唯一后缀时出现"
"数据库错误，而该文件名已存在于存储中。请查看关于在自定义存储类中添加此参数"
"的 :ref:`弃用说明 <storage-max-length-update>`。"

msgid ""
"Form widgets now render attributes with a value of ``True`` or ``False`` as "
"HTML5 boolean attributes."
msgstr ""
"表单小部件现在将值为 ``True`` 或 ``False`` 的属性呈现为 HTML5 布尔属性。"

msgid ""
"The new :meth:`~django.forms.Form.has_error()` method allows checking if a "
"specific error has happened."
msgstr ""
"新的 :meth:`~django.forms.Form.has_error()` 方法允许检查是否发生了特定错误。"

msgid ""
"If :attr:`~django.forms.Form.required_css_class` is defined on a form, then "
"the ``<label>`` tags for required fields will have this class present in its "
"attributes."
msgstr ""
"如果在表单上定义了 :attr:`~django.forms.Form.required_css_class`，则必填字段"
"的 ``<label>`` 标签将在其属性中包含此类。"

msgid ""
"The rendering of non-field errors in unordered lists (``<ul>``) now includes "
"``nonfield`` in its list of classes to distinguish them from field-specific "
"errors."
msgstr ""
"无序列表（``<ul>``）中非字段错误的呈现现在在其类列表中包括 ``nonfield``，以区"
"分它们和特定字段错误。"

msgid ""
":class:`~django.forms.Field` now accepts a :attr:`~django.forms.Field."
"label_suffix` argument, which will override the form's :attr:`~django.forms."
"Form.label_suffix`. This enables customizing the suffix on a per-field basis "
"— previously it wasn't possible to override a form's :attr:`~django.forms."
"Form.label_suffix` while using  shortcuts such as ``{{ form.as_p }}`` in "
"templates."
msgstr ""
":class:`~django.forms.Field` 现在接受一个 :attr:`~django.forms.Field."
"label_suffix` 参数，该参数将覆盖表单的 :attr:`~django.forms.Form."
"label_suffix`。这使得可以在每个字段的基础上自定义后缀 — 以前在模板中使用 "
"``{{ form.as_p }}`` 等快捷方式时无法覆盖表单的 :attr:`~django.forms.Form."
"label_suffix`。"

msgid ""
":class:`~django.forms.SelectDateWidget` now accepts an :attr:`~django.forms."
"SelectDateWidget.empty_label` argument, which will override the top list "
"choice label when :class:`~django.forms.DateField` is not required."
msgstr ""
":class:`~django.forms.SelectDateWidget` 现在接受一个 :attr:`~django.forms."
"SelectDateWidget.empty_label` 参数，该参数将在 :class:`~django.forms."
"DateField` 不是必需时覆盖顶部列表选项的标签。"

msgid ""
"After an :class:`~django.forms.ImageField` has been cleaned and validated, "
"the ``UploadedFile`` object will have an additional ``image`` attribute "
"containing the Pillow ``Image`` instance used to check if the file was a "
"valid image. It will also update ``UploadedFile.content_type`` with the "
"image's content type as determined by Pillow."
msgstr ""
"在对 :class:`~django.forms.ImageField` 进行清理和验证后，``UploadedFile`` 对"
"象将具有额外的 ``image`` 属性，其中包含用于检查文件是否为有效图像的 Pillow "
"``Image`` 实例。它还会使用 Pillow 确定的图像内容类型来更新 ``UploadedFile."
"content_type``。"

msgid ""
"You can now pass a callable that returns an iterable of choices when "
"instantiating a :class:`~django.forms.ChoiceField`."
msgstr ""
"现在在实例化 :class:`~django.forms.ChoiceField` 时可以传递一个可调用对象，该"
"可调用对象返回一个选项的可迭代对象。"

msgid ""
"Generic views that use :class:`~django.views.generic.list."
"MultipleObjectMixin` may now specify the ordering applied to the :attr:"
"`~django.views.generic.list.MultipleObjectMixin.queryset` by setting :attr:"
"`~django.views.generic.list.MultipleObjectMixin.ordering` or overriding :"
"meth:`~django.views.generic.list.MultipleObjectMixin.get_ordering()`."
msgstr ""
"使用 :class:`~django.views.generic.list.MultipleObjectMixin` 的通用视图现在可"
"以通过设置 :attr:`~django.views.generic.list.MultipleObjectMixin.ordering` 或"
"重写 :meth:`~django.views.generic.list.MultipleObjectMixin.get_ordering()` 来"
"指定应用于 :attr:`~django.views.generic.list.MultipleObjectMixin.queryset` 的"
"排序。"

msgid ""
"The new :attr:`SingleObjectMixin.query_pk_and_slug <django.views.generic."
"detail.SingleObjectMixin.query_pk_and_slug>` attribute allows changing the "
"behavior of :meth:`~django.views.generic.detail.SingleObjectMixin."
"get_object()` so that it'll perform its lookup using both the primary key "
"and the slug."
msgstr ""
"新的 :attr:`SingleObjectMixin.query_pk_and_slug <django.views.generic.detail."
"SingleObjectMixin.query_pk_and_slug>` 属性允许更改 :meth:`~django.views."
"generic.detail.SingleObjectMixin.get_object()` 的行为，使其使用主键和 slug 来"
"执行查找。"

msgid ""
"The :meth:`~django.views.generic.edit.FormMixin.get_form()` method doesn't "
"require a ``form_class`` to be provided anymore. If not provided "
"``form_class`` defaults to :meth:`~django.views.generic.edit.FormMixin."
"get_form_class()`."
msgstr ""
":meth:`~django.views.generic.edit.FormMixin.get_form()` 方法不再需要提供 "
"``form_class``。如果没有提供 ``form_class``，则默认为 :meth:`~django.views."
"generic.edit.FormMixin.get_form_class()`。"

msgid ""
"Placeholders in :attr:`ModelFormMixin.success_url <django.views.generic.edit."
"ModelFormMixin.success_url>` now support the Python :py:meth:`str.format()` "
"syntax. The legacy ``%(<foo>)s`` syntax is still supported but will be "
"removed in Django 1.10."
msgstr ""
":attr:`ModelFormMixin.success_url <django.views.generic.edit.ModelFormMixin."
"success_url>` 中的占位符现在支持 Python 的 :py:meth:`str.format()` 语法。旧"
"的 ``%(<foo>)s`` 语法仍然受支持，但将在 Django 1.10 中删除。"

msgid ""
":setting:`FORMAT_MODULE_PATH` can now be a list of strings representing "
"module paths. This allows importing several format modules from different "
"reusable apps. It also allows overriding those custom formats in your main "
"Django project."
msgstr ""
":setting:`FORMAT_MODULE_PATH` 现在可以是表示模块路径的字符串列表。这允许从不"
"同的可重用应用程序导入多个格式模块。它还允许在主要的 Django 项目中覆盖这些自"
"定义格式。"

msgid ""
"The :class:`django.utils.log.AdminEmailHandler` class now has a :meth:"
"`~django.utils.log.AdminEmailHandler.send_mail` method to make it more "
"subclass friendly."
msgstr ""
":class:`django.utils.log.AdminEmailHandler` 类现在具有 :meth:`~django.utils."
"log.AdminEmailHandler.send_mail` 方法，使其更容易进行子类化。"

msgid ""
"Database connections are now always closed after a management command called "
"from the command line has finished doing its job."
msgstr "现在，从命令行调用的管理命令完成其工作后，数据库连接将始终关闭。"

msgid ""
"Commands from alternate package formats like eggs are now also discovered."
msgstr "现在还可以发现来自诸如\"eggs \"之类的备用软件包格式的命令。"

msgid ""
"The new :option:`dumpdata --output` option allows specifying a file to which "
"the serialized data is written."
msgstr "新的 :option:`dumpdata --output` 选项允许指定将序列化数据写入的文件。"

msgid ""
"The new :option:`makemessages --exclude` and :option:`compilemessages --"
"exclude` options allow excluding specific locales from processing."
msgstr ""
"新的 :option:`makemessages --exclude` 和 :option:`compilemessages --exclude` "
"选项允许排除特定的区域设置不进行处理。"

msgid ""
":djadmin:`compilemessages` now has a ``--use-fuzzy`` or ``-f`` option which "
"includes fuzzy translations into compiled files."
msgstr ""
":djadmin:`compilemessages` 现在有一个 ``--use-fuzzy`` 或 ``-f`` 选项，它将模"
"糊的翻译包括在编译后的文件中。"

msgid ""
"The :option:`loaddata --ignorenonexistent` option now ignores data for "
"models that no longer exist."
msgstr ""
":option:`loaddata --ignorenonexistent` 选项现在会忽略已不存在的模型的数据。"

msgid ":djadmin:`runserver` now uses daemon threads for faster reloading."
msgstr ":djadmin:`runserver` 现在使用守护线程以加快重新加载速度。"

msgid ""
":djadmin:`inspectdb` now outputs ``Meta.unique_together``. It is also able "
"to introspect :class:`~django.db.models.AutoField` for MySQL and PostgreSQL "
"databases."
msgstr ""
":djadmin:`inspectdb` 现在输出 ``Meta.unique_together``。它还可以对 MySQL 和 "
"PostgreSQL 数据库进行自省以获取 :class:`~django.db.models.AutoField`。"

msgid ""
"When calling management commands with options using :func:`~django.core."
"management.call_command`, the option name can match the command line option "
"name (without the initial dashes) or the final option destination variable "
"name, but in either case, the resulting option received by the command is "
"now always the ``dest`` name specified in the command option definition (as "
"long as the command uses the :mod:`argparse` module)."
msgstr ""
"使用 :func:`~django.core.management.call_command` 调用带有选项的管理命令时，"
"选项名称可以匹配命令行选项名称（去掉初始破折号）或最终选项目标变量名称，但无"
"论哪种情况，命令接收到的结果选项现在始终是命令选项定义中指定的 ``dest`` 名称"
"（只要命令使用 :mod:`argparse` 模块）。"

msgid ""
"The :djadmin:`dbshell` command now supports MySQL's optional SSL certificate "
"authority setting (``--ssl-ca``)."
msgstr ""
":djadmin:`dbshell` 命令现在支持 MySQL 的可选 SSL 证书颁发机构设置（``--ssl-"
"ca``）。"

msgid ""
"The new :option:`makemigrations --name` allows giving the migration(s) a "
"custom name instead of a generated one."
msgstr ""
"新的 :option:`makemigrations --name` 允许为迁移指定自定义名称，而不是生成的名"
"称。"

msgid ""
"The :djadmin:`loaddata` command now prevents repeated fixture loading. If :"
"setting:`FIXTURE_DIRS` contains duplicates or a default fixture directory "
"path (``app_name/fixtures``), an exception is raised."
msgstr ""
":djadmin:`loaddata` 命令现在防止了重复的夹具加载。如果 :setting:"
"`FIXTURE_DIRS` 包含重复项或默认的夹具目录路径（``app_name/fixtures``），则会"
"引发异常。"

msgid ""
"The new ``makemigrations --exit`` option allows exiting with an error code "
"if no migrations are created."
msgstr ""
"新的 ``makemigrations --exit`` 选项允许在没有创建迁移时退出并返回错误代码。"

msgid ""
"The new :djadmin:`showmigrations` command allows listing all migrations and "
"their dependencies in a project."
msgstr ""
"新的 :djadmin:`showmigrations` 命令允许列出项目中的所有迁移及其依赖关系。"

msgid "Middleware"
msgstr "中间件"

msgid ""
"The :attr:`CommonMiddleware.response_redirect_class <django.middleware."
"common.CommonMiddleware.response_redirect_class>` attribute allows you to "
"customize the redirects issued by the middleware."
msgstr ""
":attr:`CommonMiddleware.response_redirect_class <django.middleware.common."
"CommonMiddleware.response_redirect_class>` 属性允许您自定义中间件发出的重定"
"向。"

msgid ""
"A debug message will be logged to the ``django.request`` logger when a "
"middleware raises a :exc:`~django.core.exceptions.MiddlewareNotUsed` "
"exception in :setting:`DEBUG` mode."
msgstr ""
"在 :setting:`DEBUG` 模式下，当中间件引发 :exc:`~django.core.exceptions."
"MiddlewareNotUsed` 异常时，将会在 ``django.request`` 记录器中记录调试消息。"

msgid ""
"The :class:`~django.db.migrations.operations.RunSQL` operation can now "
"handle parameters passed to the SQL statements."
msgstr ""
":class:`~django.db.migrations.operations.RunSQL` 操作现在可以处理传递给 SQL "
"语句的参数。"

msgid ""
"It is now possible to have migrations (most probably :ref:`data migrations "
"<data-migrations>`) for applications without models."
msgstr ""
"现在可以为没有模型的应用程序创建迁移（很可能是 :ref:`数据迁移 <data-"
"migrations>`）。"

msgid ""
"Migrations can now :ref:`serialize model managers <using-managers-in-"
"migrations>` as part of the model state."
msgstr ""
"迁移现在可以将模型管理器 :ref:`序列化为模型状态 <using-managers-in-"
"migrations>` 的一部分。"

msgid ""
"A :ref:`generic mechanism to handle the deprecation of model fields "
"<migrations-removing-model-fields>` was added."
msgstr ""
"添加了一种 :ref:`处理模型字段弃用的通用机制 <migrations-removing-model-"
"fields>`。"

msgid ""
"The :meth:`RunPython.noop() <django.db.migrations.operations.RunPython."
"noop>` and :attr:`RunSQL.noop <django.db.migrations.operations.RunSQL.noop>` "
"class method/attribute were added to ease in making ``RunPython`` and "
"``RunSQL`` operations reversible."
msgstr ""
"添加了 :meth:`RunPython.noop() <django.db.migrations.operations.RunPython."
"noop>` 和 :attr:`RunSQL.noop <django.db.migrations.operations.RunSQL.noop>` "
"类方法/属性，以便于使 ``RunPython`` 和 ``RunSQL`` 操作可逆。"

msgid ""
"The migration operations :class:`~django.db.migrations.operations.RunPython` "
"and :class:`~django.db.migrations.operations.RunSQL` now call the :meth:"
"`allow_migrate` method of database routers. The router can use the newly "
"introduced ``app_label`` and ``hints`` arguments to make a routing decision. "
"To take advantage of this feature you need to update the router to the new "
"``allow_migrate`` signature, see the :ref:`deprecation section <deprecated-"
"signature-of-allow-migrate>` for more details."
msgstr ""
"现在，迁移操作 :class:`~django.db.migrations.operations.RunPython` 和 :class:"
"`~django.db.migrations.operations.RunSQL` 会调用数据库路由器的 :meth:"
"`allow_migrate` 方法。路由器可以使用新引入的 ``app_label`` 和 ``hints`` 参数"
"来进行路由决策。要利用此功能，您需要将路由器更新到新的 ``allow_migrate`` 签"
"名，有关详细信息，请参阅 :ref:`弃用部分 <deprecated-signature-of-allow-"
"migrate>`。"

msgid ""
"Django now logs at most 9000 queries in ``connections.queries``, in order to "
"prevent excessive memory usage in long-running processes in debug mode."
msgstr ""
"现在，Django 最多记录 9000 条查询在 ``connections.queries`` 中，以防止在调试"
"模式下的长时间运行过程中出现过多的内存使用。"

msgid ""
"There is now a model ``Meta`` option to define a :attr:`default related name "
"<django.db.models.Options.default_related_name>` for all relational fields "
"of a model."
msgstr ""
"现在有一个模型 ``Meta`` 选项，可以为模型的所有关联字段定义 :attr:`默认相关名"
"称 <django.db.models.Options.default_related_name>`。"

msgid ""
"Pickling models and querysets across different versions of Django isn't "
"officially supported (it may work, but there's no guarantee). An extra "
"variable that specifies the current Django version is now added to the "
"pickled state of models and querysets, and Django raises a "
"``RuntimeWarning`` when these objects are unpickled in a different version "
"than the one in which they were pickled."
msgstr ""
"在不同版本的 Django 之间对模型和查询集进行 pickling 并不是官方支持的（它可能"
"会工作，但没有保证）。现在，一个额外的变量被添加到模型和查询集的 pickled 状态"
"中，用来指定当前的 Django 版本，当这些对象在与其被 pickled 的版本不同的版本"
"中 unpickle 时，Django 会引发一个 ``RuntimeWarning``。"

msgid ""
"Added :meth:`Model.from_db() <django.db.models.Model.from_db()>` which "
"Django uses whenever objects are loaded using the ORM. The method allows "
"customizing model loading behavior."
msgstr ""
"添加了 :meth:`Model.from_db() <django.db.models.Model.from_db()>`，Django 在"
"使用 ORM 加载对象时会使用这个方法。该方法允许自定义模型的加载行为。"

msgid ""
"``extra(select={...})`` now allows you to escape a literal ``%s`` sequence "
"using ``%%s``."
msgstr ""
"现在，``extra(select={...})`` 允许您使用 ``%%s`` 来转义文本中的字面 ``%s`` 序"
"列。"

msgid ""
":doc:`Custom Lookups</howto/custom-lookups>` can now be registered using a "
"decorator pattern."
msgstr ""
"现在可以使用装饰器模式注册 :doc:`自定义查找器 </howto/custom-lookups>`。"

msgid ""
"The new :attr:`Transform.bilateral <django.db.models.Transform.bilateral>` "
"attribute allows creating bilateral transformations. These transformations "
"are applied to both ``lhs`` and ``rhs`` when used in a lookup expression, "
"providing opportunities for more sophisticated lookups."
msgstr ""
"新的 :attr:`Transform.bilateral <django.db.models.Transform.bilateral>` 属性"
"允许创建双向变换。这些变换在查找表达式中同时应用于 ``lhs`` 和 ``rhs``，提供了"
"更多复杂查找的机会。"

msgid ""
"SQL special characters (\\, %, _) are now escaped properly when a pattern "
"lookup (e.g. ``contains``, ``startswith``, etc.) is used with an ``F()`` "
"expression as the right-hand side. In those cases, the escaping is performed "
"by the database, which can lead to somewhat complex queries involving nested "
"``REPLACE`` function calls."
msgstr ""
"现在，当使用模式查找（例如 ``contains``、``startswith`` 等）与 ``F()`` 表达式"
"作为右侧时，SQL 的特殊字符（\\、%、_）会得到正确的转义。在这些情况下，转义是"
"由数据库执行的，这可能导致涉及嵌套的 ``REPLACE`` 函数调用的相对复杂的查询。"

msgid ""
"You can now refresh model instances by using :meth:`Model.refresh_from_db() "
"<django.db.models.Model.refresh_from_db>`."
msgstr ""
"现在，您可以使用 :meth:`Model.refresh_from_db() <django.db.models.Model."
"refresh_from_db>` 来刷新模型实例。"

msgid ""
"You can now get the set of deferred fields for a model using :meth:`Model."
"get_deferred_fields() <django.db.models.Model.get_deferred_fields>`."
msgstr ""
"现在，您可以使用 :meth:`Model.get_deferred_fields() <django.db.models.Model."
"get_deferred_fields>` 获取模型的延迟加载字段集合。"

msgid ""
"Model field ``default``’s are now used when primary key field's are set to "
"``None``."
msgstr "现在，当主键字段设置为 ``None`` 时，将使用模型字段的 ``default`` 值。"

msgid ""
"Exceptions from the ``(receiver, exception)`` tuples returned by :meth:"
"`Signal.send_robust() <django.dispatch.Signal.send_robust>` now have their "
"traceback attached as a ``__traceback__`` attribute."
msgstr ""
"通过 :meth:`Signal.send_robust() <django.dispatch.Signal.send_robust>` 返回"
"的 ``(receiver, exception)`` 元组中的异常现在附带了其回溯信息作为 "
"``__traceback__`` 属性。"

msgid ""
"The ``environ`` argument, which contains the WSGI environment structure from "
"the request, was added to the :data:`~django.core.signals.request_started` "
"signal."
msgstr ""
"在 :data:`~django.core.signals.request_started` 信号中添加了 ``environ`` 参"
"数，其中包含了来自请求的 WSGI 环境结构。"

msgid ""
"You can now import the :func:`~django.test.signals.setting_changed` signal "
"from ``django.core.signals`` to avoid loading ``django.test`` in non-test "
"situations. Django no longer does so itself."
msgstr ""
"现在可以从 ``django.core.signals`` 导入 :func:`~django.test.signals."
"setting_changed` 信号，以避免在非测试情况下加载 ``django.test``。 Django 不再"
"自行加载它。"

msgid "System Check Framework"
msgstr "系统检查框架"

msgid ":attr:`~django.core.checks.register` can now be used as a function."
msgstr ":attr:`~django.core.checks.register` 现在可以作为一个函数使用。"

msgid ""
":tfilter:`urlize` now supports domain-only links that include characters "
"after the top-level domain (e.g. ``djangoproject.com/`` and ``djangoproject."
"com/download/``)."
msgstr ""
":tfilter:`urlize` 现在支持包含顶级域名后面字符的域名链接（例如 "
"``djangoproject.com/`` 和 ``djangoproject.com/download/``）。"

msgid ""
":tfilter:`urlize` doesn't treat exclamation marks at the end of a domain or "
"its query string as part of the URL (the URL in e.g. ``'djangoproject.com!`` "
"is ``djangoproject.com``)"
msgstr ""
":tfilter:`urlize` 不将域名或其查询字符串末尾的感叹号视为 URL 的一部分（例如，"
"``'djangoproject.com!`` 中的 URL 为 ``djangoproject.com``）。"

msgid ""
"Added a :class:`locmem.Loader <django.template.loaders.locmem.Loader>` class "
"that loads Django templates from a Python dictionary."
msgstr ""
"添加了一个名为 :class:`locmem.Loader <django.template.loaders.locmem."
"Loader>` 的类，它可以从 Python 字典中加载 Django 模板。"

msgid ""
"The :ttag:`now` tag can now store its output in a context variable with the "
"usual syntax: ``{% now 'j n Y' as varname %}``."
msgstr ""
":ttag:`now` 标签现在可以使用常见的语法将其输出存储在上下文变量中，例如：``{% "
"now 'j n Y' as varname %}``。"

msgid "``WSGIRequest`` now respects paths starting with ``//``."
msgstr "现在，``WSGIRequest`` 将尊重以 ``//`` 开头的路径。"

msgid ""
"The :meth:`HttpRequest.build_absolute_uri() <django.http.HttpRequest."
"build_absolute_uri>` method now handles paths starting with ``//`` correctly."
msgstr ""
"现在， :meth:`HttpRequest.build_absolute_uri() <django.http.HttpRequest."
"build_absolute_uri>` 方法能够正确处理以 ``//`` 开头的路径。"

msgid ""
"If :setting:`DEBUG` is ``True`` and a request raises a :exc:`~django.core."
"exceptions.SuspiciousOperation`, the response will be rendered with a "
"detailed error page."
msgstr ""
"如果 :setting:`DEBUG` 为 ``True``，并且请求引发了 :exc:`~django.core."
"exceptions.SuspiciousOperation` 异常，将会使用详细的错误页面呈现响应。"

msgid ""
"The ``query_string`` argument of :class:`~django.http.QueryDict` is now "
"optional, defaulting to ``None``, so a blank ``QueryDict`` can now be "
"instantiated with ``QueryDict()`` instead of ``QueryDict(None)`` or "
"``QueryDict('')``."
msgstr ""
":class:`~django.http.QueryDict` 的 ``query_string`` 参数现在是可选的，默认值"
"为 ``None``，因此可以使用 ``QueryDict()`` 来实例化一个空的 ``QueryDict``，而"
"不是 ``QueryDict(None)`` 或 ``QueryDict('')``。"

msgid ""
"The ``GET`` and ``POST`` attributes of an :class:`~django.http.HttpRequest` "
"object are now :class:`~django.http.QueryDict`\\s rather than dictionaries, "
"and the ``FILES`` attribute is now a ``MultiValueDict``. This brings this "
"class into line with the documentation and with ``WSGIRequest``."
msgstr ""
":class:`~django.http.HttpRequest` 对象的 ``GET`` 和 ``POST`` 属性现在是 :"
"class:`~django.http.QueryDict`，而不再是字典，而 ``FILES`` 属性现在是一个 "
"``MultiValueDict``。这使得该类与文档和 ``WSGIRequest`` 保持一致。"

msgid ""
"The :attr:`HttpResponse.charset <django.http.HttpResponse.charset>` "
"attribute was added."
msgstr ""
"添加了 :attr:`HttpResponse.charset <django.http.HttpResponse.charset>` 属性。"

msgid ""
"``WSGIRequestHandler`` now follows RFC in converting URI to IRI, using "
"``uri_to_iri()``."
msgstr ""
"``WSGIRequestHandler`` 现在按照 RFC 将 URI 转换为 IRI，使用 "
"``uri_to_iri()``。"

msgid ""
"The :meth:`HttpRequest.get_full_path() <django.http.HttpRequest."
"get_full_path>` method now escapes unsafe characters from the path portion "
"of a Uniform Resource Identifier (URI) properly."
msgstr ""
":meth:`HttpRequest.get_full_path() <django.http.HttpRequest.get_full_path>` "
"方法现在正确地对 Uniform Resource Identifier (URI) 的路径部分进行了字符转义，"
"以防止不安全字符的问题。"

msgid ""
":class:`~django.http.HttpResponse` now implements a few additional methods "
"like :meth:`~django.http.HttpResponse.getvalue` so that instances can be "
"used as stream objects."
msgstr ""
":class:`~django.http.HttpResponse` 类现在实现了一些额外的方法，如 :meth:"
"`~django.http.HttpResponse.getvalue`，使得实例可以作为流对象使用。"

msgid ""
"The new :meth:`HttpResponse.setdefault() <django.http.HttpResponse."
"setdefault>` method allows setting a header unless it has already been set."
msgstr ""
"新的 :meth:`HttpResponse.setdefault() <django.http.HttpResponse.setdefault>` "
"方法允许在尚未设置时设置标头。"

msgid "You can use the new :class:`~django.http.FileResponse` to stream files."
msgstr "你可以使用新的 :class:`~django.http.FileResponse` 来流式传输文件。"

msgid ""
"The :func:`~django.views.decorators.http.condition` decorator for "
"conditional view processing now supports the ``If-unmodified-since`` header."
msgstr ""
"用于条件视图处理的 :func:`~django.views.decorators.http.condition` 装饰器现在"
"支持 ``If-unmodified-since`` 标头。"

msgid ""
"The :class:`RequestFactory.trace() <django.test.RequestFactory>` and :class:"
"`Client.trace() <django.test.Client.trace>` methods were implemented, "
"allowing you to create ``TRACE`` requests in your tests."
msgstr ""
":class:`RequestFactory.trace() <django.test.RequestFactory>` 和 :class:"
"`Client.trace() <django.test.Client.trace>` 方法已经实现，允许你在测试中创建 "
"``TRACE`` 请求。"

msgid ""
"The ``count`` argument was added to :meth:`~django.test.SimpleTestCase."
"assertTemplateUsed`. This allows you to assert that a template was rendered "
"a specific number of times."
msgstr ""
":meth:`~django.test.SimpleTestCase.assertTemplateUsed` 添加了 ``count`` 参"
"数。这允许你断言模板被渲染了特定次数。"

msgid ""
"The new :meth:`~django.test.SimpleTestCase.assertJSONNotEqual` assertion "
"allows you to test that two JSON fragments are not equal."
msgstr ""
"新的 :meth:`~django.test.SimpleTestCase.assertJSONNotEqual` 断言允许你测试两"
"个 JSON 片段不相等。"

msgid ""
"Added options to the :djadmin:`test` command to preserve the test database (:"
"option:`--keepdb <test --keepdb>`), to run the test cases in reverse order (:"
"option:`--reverse <test --reverse>`), and to enable SQL logging for failing "
"tests (:option:`--debug-sql <test --debug-sql>`)."
msgstr ""
"为 :djadmin:`test` 命令添加了选项，以保留测试数据库 (:option:`--keepdb <test "
"--keepdb>`)，以倒序运行测试用例 (:option:`--reverse <test --reverse>`)，并为"
"失败的测试启用 SQL 日志记录 (:option:`--debug-sql <test --debug-sql>`)。"

msgid ""
"Added the :attr:`~django.test.Response.resolver_match` attribute to test "
"client responses."
msgstr ""
"为测试客户端响应添加了 :attr:`~django.test.Response.resolver_match` 属性。"

msgid ""
"Added several settings that allow customization of test tablespace "
"parameters for Oracle: :setting:`DATAFILE`, :setting:`DATAFILE_TMP`, :"
"setting:`DATAFILE_MAXSIZE` and :setting:`DATAFILE_TMP_MAXSIZE`."
msgstr ""
"添加了一些设置，允许自定义 Oracle 测试表空间参数： :setting:`DATAFILE`、:"
"setting:`DATAFILE_TMP`、:setting:`DATAFILE_MAXSIZE` 和 :setting:"
"`DATAFILE_TMP_MAXSIZE`。"

msgid ""
"The :func:`~django.test.override_settings` decorator can now affect the "
"master router in :setting:`DATABASE_ROUTERS`."
msgstr ""
":func:`~django.test.override_settings` 装饰器现在可以影响 :setting:"
"`DATABASE_ROUTERS` 中的主路由器。"

msgid "Added test client support for file uploads with file-like objects."
msgstr "添加了对使用类文件对象进行文件上传的测试客户端支持。"

msgid ""
"A shared cache is now used when testing with an SQLite in-memory database "
"when using Python 3.4+ and SQLite 3.7.13+. This allows sharing the database "
"between threads."
msgstr ""
"在使用 Python 3.4+ 和 SQLite 3.7.13+ 进行测试时，现在使用共享缓存来测试 "
"SQLite 内存数据库。这允许在线程之间共享数据库。"

msgid ""
":class:`~django.core.validators.URLValidator` now supports IPv6 addresses, "
"Unicode domains, and URLs containing authentication data."
msgstr ""
":class:`~django.core.validators.URLValidator` 现在支持 IPv6 地址、Unicode 域"
"名和包含身份验证数据的 URL。"

msgid "Backwards incompatible changes in 1.8"
msgstr "1.8 版本中的向后不兼容的更改"

msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"ref:`deprecation plan <deprecation-removed-in-1.8>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""
"除了本节中概述的更改之外，请确保查看 :ref:`弃用计划 <deprecation-removed-"
"in-1.8>`，以了解已移除的任何功能。如果您在给定功能的弃用时间内未更新您的代"
"码，其移除可能会被视为不兼容的变更。"

msgid "Related object operations are run in a transaction"
msgstr "相关对象操作在事务中执行"

msgid ""
"Some operations on related objects such as :meth:`~django.db.models.fields."
"related.RelatedManager.add()` or direct assignment ran multiple data "
"modifying queries without wrapping them in transactions. To reduce the risk "
"of data corruption, all data modifying methods that affect multiple related "
"objects (i.e. ``add()``, ``remove()``, ``clear()``, and direct assignment) "
"now perform their data modifying queries from within a transaction, provided "
"your database supports transactions."
msgstr ""
"某些操作涉及到相关对象，例如 :meth:`~django.db.models.fields.related."
"RelatedManager.add()` 或直接赋值，在没有包装在事务中的情况下运行多个数据修改"
"查询。为了减少数据损坏的风险，现在所有涉及多个相关对象的数据修改方法（即 "
"``add()``, ``remove()``, ``clear()`` 和直接赋值）都会在事务内执行其数据修改查"
"询，前提是您的数据库支持事务。"

msgid ""
"This has one backwards incompatible side effect, signal handlers triggered "
"from these methods are now executed within the method's transaction and any "
"exception in a signal handler will prevent the whole operation."
msgstr ""
"这个改变带来了一个向后不兼容的副作用，从这些方法触发的信号处理程序现在在方法"
"的事务中执行，而且信号处理程序中的任何异常都会阻止整个操作。"

msgid "Assigning unsaved objects to relations raises an error"
msgstr "将未保存的对象分配给关系会引发错误。"

msgid ""
"To more easily allow in-memory usage of models, this change was reverted in "
"Django 1.8.4 and replaced with a check during ``model.save()``. For example:"
msgstr ""
"为了更容易允许在内存中使用模型，这个更改在 Django 1.8.4 中已被撤销，并在 "
"``model.save()`` 期间替换为检查。例如："

msgid ""
"A similar check on assignment to reverse one-to-one relations was removed in "
"Django 1.8.5."
msgstr "在 Django 1.8.5 中，取消了对反向一对一关系分配的类似检查。"

msgid ""
"Assigning unsaved objects to a :class:`~django.db.models.ForeignKey`, :class:"
"`~django.contrib.contenttypes.fields.GenericForeignKey`, and :class:`~django."
"db.models.OneToOneField` now raises a :exc:`ValueError`."
msgstr ""
"将未保存的对象分配给 :class:`~django.db.models.ForeignKey`、:class:`~django."
"contrib.contenttypes.fields.GenericForeignKey` 和 :class:`~django.db.models."
"OneToOneField` 现在会引发 :exc:`ValueError`。"

msgid ""
"Previously, the assignment of an unsaved object would be silently ignored. "
"For example:"
msgstr "以前，对未保存的对象的分配会被静默忽略。例如："

msgid "Now, an error will be raised to prevent data loss:"
msgstr "现在，将引发一个错误以防止数据丢失："

msgid ""
"If you require allowing the assignment of unsaved instances (the old "
"behavior) and aren't concerned about the data loss possibility (e.g. you "
"never save the objects to the database), you can disable this check by using "
"the ``ForeignKey.allow_unsaved_instance_assignment`` attribute. (This "
"attribute was removed in 1.8.4 as it's no longer relevant.)"
msgstr ""
"如果你需要允许分配未保存的实例（旧行为）并且不担心可能的数据丢失（例如，你从"
"不将对象保存到数据库），你可以通过使用 ``ForeignKey."
"allow_unsaved_instance_assignment`` 属性来禁用此检查（此属性在 1.8.4 中已被移"
"除，因为不再相关）。"

msgid "Management commands that only accept positional arguments"
msgstr "仅接受位置参数的管理命令"

msgid ""
"If you have written a custom management command that only accepts positional "
"arguments and you didn't specify the ``args`` command variable, you might "
"get an error like ``Error: unrecognized arguments: ...``, as variable "
"parsing is now based on :py:mod:`argparse` which doesn't implicitly accept "
"positional arguments. You can make your command backwards compatible by "
"simply setting the ``args`` class variable. However, if you don't have to "
"keep compatibility with older Django versions, it's better to implement the "
"new :meth:`~django.core.management.BaseCommand.add_arguments` method as "
"described in :doc:`/howto/custom-management-commands`."
msgstr ""
"如果你编写了一个只接受位置参数的自定义管理命令，并且没有指定 ``args`` 命令变"
"量，你可能会遇到类似 ``Error: unrecognized arguments: ...`` 的错误，因为变量"
"解析现在基于 :py:mod:`argparse`，它不会隐式接受位置参数。你可以通过简单地设"
"置 ``args`` 类变量来使你的命令向后兼容。然而，如果你不需要与旧版本的 Django "
"保持兼容性，最好按照 :doc:`/howto/custom-management-commands` 中描述的方法实"
"现新的 :meth:`~django.core.management.BaseCommand.add_arguments` 方法。"

msgid "Custom test management command arguments through test runner"
msgstr "通过测试运行器对自定义测试管理命令的参数进行设置"

msgid ""
"The method to add custom arguments to the ``test`` management command "
"through the test runner has changed. Previously, you could provide an "
"``option_list`` class variable on the test runner to add more arguments (à "
"la :py:mod:`optparse`). Now to implement the same behavior, you have to "
"create an ``add_arguments(cls, parser)`` class method on the test runner and "
"call ``parser.add_argument`` to add any custom arguments, as parser is now "
"an :py:class:`argparse.ArgumentParser` instance."
msgstr ""
"通过测试运行器向 ``test`` 管理命令添加自定义参数的方法已经发生了变化。以前，"
"你可以在测试运行器上提供一个 ``option_list`` 类变量来添加更多参数（类似于 :"
"py:mod:`optparse`）。现在，为了实现相同的行为，你必须在测试运行器上创建一个 "
"``add_arguments(cls, parser)`` 类方法，并调用 ``parser.add_argument`` 来添加"
"任何自定义参数，因为现在的 parser 是一个 :py:class:`argparse.ArgumentParser` "
"实例。"

msgid ""
"Model check ensures auto-generated column names are within limits specified "
"by database"
msgstr "模型检查确保自动生成的列名在数据库指定的限制范围内"

msgid ""
"A field name that's longer than the column name length supported by a "
"database can create problems. For example, with MySQL you'll get an "
"exception trying to create the column, and with PostgreSQL the column name "
"is truncated by the database (you may see a warning in the PostgreSQL logs)."
msgstr ""
"字段名长度超过数据库支持的列名长度可能会引发问题。例如，在 MySQL 中，尝试创建"
"该列时会引发异常；在 PostgreSQL 中，数据库会截断列名（你可能会在 PostgreSQL "
"日志中看到警告）。"

msgid ""
"A model check has been introduced to better alert users to this scenario "
"before the actual creation of database tables."
msgstr "引入了模型检查，以在实际创建数据库表之前更好地提醒用户注意这种情况。"

msgid ""
"If you have an existing model where this check seems to be a false positive, "
"for example on PostgreSQL where the name was already being truncated, simply "
"use :attr:`~django.db.models.Field.db_column` to specify the name that's "
"being used."
msgstr ""
"如果你有一个现有的模型，在其中这个检查似乎是一个错误的正检，例如在 "
"PostgreSQL 上，其中名称已经被截断，只需使用 :attr:`~django.db.models.Field."
"db_column` 来指定正在使用的名称。"

msgid ""
"The check also applies to the columns generated in an implicit "
"``ManyToManyField.through`` model. If you run into an issue there, use :attr:"
"`~django.db.models.ManyToManyField.through` to create an explicit model and "
"then specify :attr:`~django.db.models.Field.db_column` on its column(s) as "
"needed."
msgstr ""
"这个检查也适用于隐式生成的 ``ManyToManyField.through`` 模型中的列。如果在那里"
"遇到问题，可以使用 :attr:`~django.db.models.ManyToManyField.through` 创建一个"
"显式模型，然后根据需要指定其列的 :attr:`~django.db.models.Field.db_column`。"

msgid "Query relation lookups now check object types"
msgstr "现在查询关系查找会检查对象类型"

msgid ""
"Querying for model lookups now checks if the object passed is of correct "
"type and raises a :exc:`ValueError` if not. Previously, Django didn't care "
"if the object was of correct type; it just used the object's related field "
"attribute (e.g. ``id``) for the lookup. Now, an error is raised to prevent "
"incorrect lookups:"
msgstr ""
"现在，查询模型查找会检查传递的对象是否是正确的类型，如果不是，则引发 :exc:"
"`ValueError`。以前，Django 不关心对象是否是正确的类型；它只是使用对象的相关字"
"段属性（例如 ``id``）进行查找。现在，会引发错误以防止不正确的查找："

msgid "``select_related()`` now checks given fields"
msgstr "``select_related()`` 现在会检查给定的字段。"

msgid ""
"``select_related()`` now validates that the given fields actually exist. "
"Previously, nonexistent fields were silently ignored. Now, an error is "
"raised:"
msgstr ""
"``select_related()`` 现在会验证给定的字段是否实际存在。以前，不存在的字段会被"
"默默忽略。现在会引发错误："

msgid "The validation also makes sure that the given field is relational:"
msgstr "验证还确保给定字段是关系型的："

msgid "Default ``EmailField.max_length`` increased to 254"
msgstr "默认的 ``EmailField.max_length`` 增加到了 254。"

msgid ""
"The old default 75 character ``max_length`` was not capable of storing all "
"possible RFC3696/5321-compliant email addresses. In order to store all "
"possible valid email addresses, the ``max_length`` has been increased to 254 "
"characters. You will need to generate and apply database migrations for your "
"affected models (or add ``max_length=75`` if you wish to keep the length on "
"your current fields). A migration for :attr:`django.contrib.auth.models.User."
"email` is included."
msgstr ""
"旧的默认值为 75 个字符的 ``max_length`` 无法存储所有可能符合 RFC3696/5321 标"
"准的电子邮件地址。为了存储所有可能的有效电子邮件地址，``max_length`` 已增加"
"到 254 个字符。您需要为受影响的模型生成并应用数据库迁移（或者如果希望保留当前"
"字段的长度，则添加 ``max_length=75``）。一个用于 :attr:`django.contrib.auth."
"models.User.email` 的迁移已包含在内。"

msgid "Support for PostgreSQL versions older than 9.0"
msgstr "对于早于 9.0 版本的 PostgreSQL 的支持"

msgid ""
"The end of upstream support periods was reached in July 2014 for PostgreSQL "
"8.4. As a consequence, Django 1.8 sets 9.0 as the minimum PostgreSQL version "
"it officially supports."
msgstr ""
"PostgreSQL 8.4 的上游支持期限在 2014 年 7 月结束。因此，Django 1.8 将 9.0 版"
"本设置为其正式支持的最低 PostgreSQL 版本。"

msgid ""
"This also includes dropping support for PostGIS 1.3 and 1.4 as these "
"versions are not supported on versions of PostgreSQL later than 8.4."
msgstr ""
"这还包括不再支持 PostGIS 1.3 和 1.4，因为这些版本在 8.4 之后的 PostgreSQL 版"
"本上不受支持。"

msgid ""
"Django also now requires the use of Psycopg2 version 2.4.5 or higher (or "
"2.5+ if you want to use :mod:`django.contrib.postgres`)."
msgstr ""
"Django 现在要求使用 Psycopg2 版本 2.4.5 或更高版本（如果要使用 :mod:`django."
"contrib.postgres`，则需要 2.5+）。"

msgid "Support for MySQL versions older than 5.5"
msgstr "对于早于 5.5 版本的 MySQL 的支持"

msgid ""
"The end of upstream support periods was reached in January 2012 for MySQL "
"5.0 and December 2013 for MySQL 5.1. As a consequence, Django 1.8 sets 5.5 "
"as the minimum MySQL version it officially supports."
msgstr ""
"MySQL 5.0 的上游支持期限在 2012 年 1 月到期，MySQL 5.1 的上游支持期限在 2013 "
"年 12 月到期。因此，Django 1.8 将 5.5 版本设置为其正式支持的最低 MySQL 版本。"

msgid "Support for Oracle versions older than 11.1"
msgstr "对于早于 11.1 版本的 Oracle 的支持"

msgid ""
"The end of upstream support periods was reached in July 2010 for Oracle 9.2, "
"January 2012 for Oracle 10.1, and July 2013 for Oracle 10.2. As a "
"consequence, Django 1.8 sets 11.1 as the minimum Oracle version it "
"officially supports."
msgstr ""
"Oracle 9.2 的上游支持期限在 2010 年 7 月到期，Oracle 10.1 的上游支持期限在 "
"2012 年 1 月到期，Oracle 10.2 的上游支持期限在 2013 年 7 月到期。因此，"
"Django 1.8 将 11.1 版本设置为其正式支持的最低 Oracle 版本。"

msgid "Specific privileges used instead of roles for tests on Oracle"
msgstr "在 Oracle 上，测试中使用特定权限而不是角色。"

msgid ""
"Earlier versions of Django granted the CONNECT and RESOURCE roles to the "
"test user on Oracle. These roles have been deprecated, so Django 1.8 uses "
"the specific underlying privileges instead. This changes the privileges "
"required of the main user for running tests (unless the project is "
"configured to avoid creating a test user). The exact privileges required now "
"are detailed in :ref:`Oracle notes <oracle-notes>`."
msgstr ""
"早期版本的 Django 在 Oracle 上为测试用户授予 CONNECT 和 RESOURCE 角色。这些角"
"色已被弃用，因此 Django 1.8 改为使用特定的底层权限。这改变了运行测试所需的主"
"用户的权限（除非项目配置为避免创建测试用户）。现在所需的确切权限详见 :ref:"
"`Oracle 注释 <oracle-notes>`。"

msgid "``AbstractUser.last_login`` allows null values"
msgstr "``AbstractUser.last_login`` 允许空值"

msgid ""
"The :attr:`AbstractUser.last_login <django.contrib.auth.models.User."
"last_login>` field now allows null values. Previously, it defaulted to the "
"time when the user was created which was misleading if the user never logged "
"in. If you are using the default user (:class:`django.contrib.auth.models."
"User`), run the database migration included in ``contrib.auth``."
msgstr ""
":attr:`AbstractUser.last_login <django.contrib.auth.models.User.last_login>` "
"字段现在允许空值。以前，它默认为用户创建时的时间，如果用户从未登录，这会产生"
"误导。如果你使用的是默认用户（:class:`django.contrib.auth.models.User`），请"
"运行 ``contrib.auth`` 中包含的数据库迁移。"

msgid ""
"If you are using a custom user model that inherits from ``AbstractUser``, "
"you'll need to run :djadmin:`makemigrations` and generate a migration for "
"your app that contains that model. Also, if wish to set ``last_login`` to "
"``NULL`` for users who haven't logged in, you can run this query::"
msgstr ""
"如果你使用从 ``AbstractUser`` 继承的自定义用户模型，你需要运行 :djadmin:"
"`makemigrations` 并为包含该模型的应用程序生成一个迁移。此外，如果希望将未登录"
"的用户的 ``last_login`` 设置为 ``NULL``，你可以运行以下查询："

msgid "Support for GEOS 3.1 and GDAL 1.6 has been dropped."
msgstr "不再支持 GEOS 3.1 和 GDAL 1.6 版本。"

msgid "Support for SpatiaLite < 2.4 has been dropped."
msgstr "不再支持 SpatiaLite 版本低于 2.4 。"

msgid ""
"GIS-specific lookups have been refactored to use the :class:`django.db."
"models.Lookup` API."
msgstr ""
"GIS-specific lookups 已经重构以使用 :class:`django.db.models.Lookup` API。"

msgid ""
"The default ``str`` representation of :class:`~django.contrib.gis.geos."
"GEOSGeometry` objects has been changed from WKT to EWKT format (including "
"the SRID). As this representation is used in the serialization framework, "
"that means that ``dumpdata`` output will now contain the SRID value of "
"geometry objects."
msgstr ""
":class:`~django.contrib.gis.geos.GEOSGeometry` 对象的默认 ``str`` 表示已从 "
"WKT 更改为 EWKT 格式（包括 SRID）。由于这个表示法在序列化框架中使用，这意味"
"着 ``dumpdata`` 输出现在将包含几何对象的 SRID 值。"

msgid ""
"Priority of context processors for ``TemplateResponse`` brought in line with "
"``render``"
msgstr ""
"对于 ``TemplateResponse``，上下文处理器的优先级已与 ``render`` 保持一致。"

msgid ""
"The :class:`~django.template.response.TemplateResponse` constructor is "
"designed to be a drop-in replacement for the :func:`~django.shortcuts."
"render` function. However, it had a slight incompatibility, in that for "
"``TemplateResponse``, context data from the passed in context dictionary "
"could be shadowed by context data returned from context processors, whereas "
"for ``render`` it was the other way around. This was a bug, and the behavior "
"of ``render`` is more appropriate, since it allows the globally defined "
"context processors to be overridden locally in the view. If you were relying "
"on the fact context data in a ``TemplateResponse`` could be overridden using "
"a context processor, you will need to change your code."
msgstr ""
":class:`~django.template.response.TemplateResponse` 构造函数旨在成为 :func:"
"`~django.shortcuts.render` 函数的一个替代。然而，它存在一个轻微的不兼容性，即"
"对于 ``TemplateResponse``，传递的上下文字典中的上下文数据可能会被上下文处理器"
"返回的上下文数据覆盖，而对于 ``render`` 则相反。这是一个错误，而 ``render`` "
"的行为更为合适，因为它允许在视图中本地覆盖全局定义的上下文处理器。如果你依赖"
"于在 ``TemplateResponse`` 中使用上下文处理器可以覆盖上下文数据的事实，那么你"
"需要更改你的代码。"

msgid "Overriding ``setUpClass`` / ``tearDownClass`` in test cases"
msgstr "在测试用例中重写 ``setUpClass`` / ``tearDownClass``"

msgid ""
"The decorators :func:`~django.test.override_settings` and :func:`~django."
"test.modify_settings` now act at the class level when used as class "
"decorators. As a consequence, when overriding ``setUpClass()`` or "
"``tearDownClass()``, the ``super`` implementation should always be called."
msgstr ""
"装饰器 :func:`~django.test.override_settings` 和 :func:`~django.test."
"modify_settings` 现在在作为类装饰器使用时以类级别的方式起作用。因此，在重写 "
"``setUpClass()`` 或 ``tearDownClass()`` 时，应始终调用 ``super`` 实现。"

msgid "Removal of ``django.contrib.formtools``"
msgstr "移除了 ``django.contrib.formtools`` 模块"

msgid ""
"The formtools contrib app has been moved to a separate package and the "
"relevant documentation pages have been updated or removed."
msgstr ""
"formtools contrib 应用已被移动到一个单独的包中，并相应的文档页面已被更新或删"
"除。"

msgid "The new package is available `on GitHub`_ and on PyPI."
msgstr "新的包可以在 `GitHub`_ 和 PyPI 上获得。"

msgid "Database connection reloading between tests"
msgstr "测试之间重新加载数据库连接。"

msgid ""
"Django previously closed database connections between each test within a "
"``TestCase``. This is no longer the case as Django now wraps the whole "
"``TestCase`` within a transaction. If some of your tests relied on the old "
"behavior, you should have them inherit from ``TransactionTestCase`` instead."
msgstr ""
"以前，在 ``TestCase`` 中的每个测试之间，Django 会关闭数据库连接。现在不再是这"
"样了，因为 Django 现在会将整个 ``TestCase`` 包装在一个事务中。如果你的一些测"
"试依赖于旧的行为，你应该让它们继承自 ``TransactionTestCase``。"

msgid "Cleanup of the ``django.template`` namespace"
msgstr "对 ``django.template`` 命名空间进行了清理"

msgid ""
"If you've been relying on private APIs exposed in the ``django.template`` "
"module, you may have to import them from ``django.template.base`` instead."
msgstr ""
"如果你一直依赖于在 ``django.template`` 模块中公开的私有 API，你可能需要从 "
"``django.template.base`` 中导入它们。"

msgid ""
"Also private APIs ``django.template.base.compile_string()``, ``django."
"template.loader.find_template()``, and ``django.template.loader."
"get_template_from_string()`` were removed."
msgstr ""
"另外，已删除了私有 API ``django.template.base.compile_string()``, ``django."
"template.loader.find_template()`` 和 ``django.template.loader."
"get_template_from_string()``。"

msgid "``model`` attribute on private model relations"
msgstr "私有模型关系上的 ``model`` 属性"

msgid ""
"In earlier versions of Django, on a model with a reverse foreign key "
"relationship (for example), ``model._meta.get_all_related_objects()`` "
"returned the relationship as a ``django.db.models.related.RelatedObject`` "
"with the ``model`` attribute set to the source of the relationship. Now, "
"this method returns the relationship as ``django.db.models.fields.related."
"ManyToOneRel`` (private API ``RelatedObject`` has been removed), and the "
"``model`` attribute is set to the target of the relationship instead of the "
"source. The source model is accessible on the ``related_model`` attribute "
"instead."
msgstr ""
"在早期版本的 Django 中，对于具有反向外键关系的模型（例如），``model._meta."
"get_all_related_objects()`` 返回关系作为具有 ``model`` 属性设置为关系源的 "
"``django.db.models.related.RelatedObject``。现在，这个方法返回关系作为 "
"``django.db.models.fields.related.ManyToOneRel`` （私有 API "
"``RelatedObject`` 已被删除），并且 ``model`` 属性设置为关系目标而不是源。源模"
"型可以在 ``related_model`` 属性上访问。"

msgid "Consider this example from the tutorial in Django 1.8:"
msgstr "考虑一下来自 Django 1.8 教程的这个例子："

msgid "and compare it to the behavior on older versions:"
msgstr "将其与旧版本的行为进行比较："

msgid ""
"To access the source model, you can use a pattern like this to write code "
"that will work with both Django 1.8 and older versions::"
msgstr ""
"为了访问源模型，您可以使用以下模式的代码，该代码可以在 Django 1.8 和旧版本中"
"都有效："

msgid "Also note that ``get_all_related_objects()`` is deprecated in 1.8."
msgstr "还请注意，``get_all_related_objects()`` 在 1.8 中已被弃用。"

msgid ""
"The following changes to the database backend API are documented to assist "
"those writing third-party backends in updating their code:"
msgstr ""
"以下对数据库后端 API 的更改已记录，以帮助那些编写第三方后端的人更新其代码："

msgid ""
"``BaseDatabaseXXX`` classes have been moved to ``django.db.backends.base``. "
"Please import them from the new locations::"
msgstr ""
"``BaseDatabaseXXX`` 类已经移动到 ``django.db.backends.base``。请从新的位置导"
"入它们："

msgid ""
"The ``data_types``, ``data_types_suffix``, and "
"``data_type_check_constraints`` attributes have moved from the "
"``DatabaseCreation`` class to ``DatabaseWrapper``."
msgstr ""
"``DatabaseCreation`` 类中的 ``data_types``、``data_types_suffix`` 和 "
"``data_type_check_constraints`` 属性已经移到了 ``DatabaseWrapper`` 中。"

msgid ""
"The ``SQLCompiler.as_sql()`` method now takes a ``subquery`` parameter (:"
"ticket:`24164`)."
msgstr ""
"``SQLCompiler.as_sql()`` 方法现在接受一个 ``subquery`` 参数 (:ticket:"
"`24164`)。"

msgid ""
"The ``BaseDatabaseOperations.date_interval_sql()`` method now only takes a "
"``timedelta`` parameter."
msgstr ""
"``BaseDatabaseOperations.date_interval_sql()`` 方法现在只接受一个 "
"``timedelta`` 参数。"

msgid ""
"``AdminSite`` no longer takes an ``app_name`` argument and its ``app_name`` "
"attribute has been removed. The application name is always ``admin`` (as "
"opposed to the instance name which you can still customize using "
"``AdminSite(name=\"...\")``."
msgstr ""
"``AdminSite`` 不再接受一个 ``app_name`` 参数，并且它的 ``app_name`` 属性已被"
"删除。应用程序名称始终为 ``admin`` （与实例名称不同，你仍然可以使用 "
"``AdminSite(name=\"...\")`` 进行自定义）。"

msgid ""
"The ``ModelAdmin.get_object()`` method (private API) now takes a third "
"argument named ``from_field`` in order to specify which field should match "
"the provided ``object_id``."
msgstr ""
"``ModelAdmin.get_object()`` 方法（私有 API）现在接受一个名为 ``from_field`` "
"的第三个参数，以指定应该与提供的 ``object_id`` 匹配的字段。"

msgid ""
"The :meth:`ModelAdmin.response_delete() <django.contrib.admin.ModelAdmin."
"response_delete>` method now takes a second argument named ``obj_id`` which "
"is the serialized identifier used to retrieve the object before deletion."
msgstr ""
":meth:`ModelAdmin.response_delete() <django.contrib.admin.ModelAdmin."
"response_delete>` 方法现在接受一个名为 ``obj_id`` 的第二个参数，它是在删除之"
"前用于检索对象的序列化标识符。"

msgid "Default autoescaping of functions in ``django.template.defaultfilters``"
msgstr ""
"默认情况下，``django.template.defaultfilters`` 中的函数现在会自动进行自动转"
"义。"

msgid ""
"In order to make built-in template filters that output HTML \"safe by "
"default\" when calling them in Python code, the following functions in "
"``django.template.defaultfilters`` have been changed to automatically escape "
"their input value:"
msgstr ""
"为了在 Python 代码中调用输出 HTML 的内置模板过滤器时使其 \"默认安全\"，已更改"
"了 ``django.template.defaultfilters`` 中以下函数，以自动转义其输入值："

msgid "``join``"
msgstr "``join``"

msgid "``linebreaksbr``"
msgstr "``linebreaksbr``"

msgid "``linebreaks_filter``"
msgstr "``linebreaks_filter``"

msgid "``linenumbers``"
msgstr "``linenumbers``"

msgid "``unordered_list``"
msgstr "``unordered_list``"

msgid "``urlize``"
msgstr "``urlize``"

msgid "``urlizetrunc``"
msgstr "``urlizetrunc``"

msgid ""
"You can revert to the old behavior by specifying ``autoescape=False`` if you "
"are passing trusted content. This change doesn't have any effect when using "
"the corresponding filters in templates."
msgstr ""
"如果您传递了可信内容，可以通过指定 ``autoescape=False`` 来恢复到旧的行为。在"
"模板中使用相应的过滤器时，此更改不会产生任何效果。"

msgid "``connections.queries`` is now a read-only attribute."
msgstr "``connections.queries`` 现在是一个只读属性。"

msgid ""
"Database connections are considered equal only if they're the same object. "
"They aren't hashable any more."
msgstr "现在只有当数据库连接是同一个对象时才被视为相等。它们不再是可哈希的。"

msgid ""
":class:`~django.middleware.gzip.GZipMiddleware` used to disable compression "
"for some content types when the request is from Internet Explorer, in order "
"to work around a bug in IE6 and earlier. This behavior could affect "
"performance on IE7 and later. It was removed."
msgstr ""
":class:`~django.middleware.gzip.GZipMiddleware` 用于在请求来自 Internet "
"Explorer 时禁用某些内容类型的压缩，以解决 IE6 及更早版本中的一个错误。这种行"
"为可能会影响 IE7 及更高版本的性能。已被移除。"

msgid ""
"``URLField.to_python`` no longer adds a trailing slash to pathless URLs."
msgstr "``URLField.to_python`` 不再在没有路径的 URL 中添加尾随斜杠。"

msgid ""
"The :tfilter:`length` template filter now returns ``0`` for an undefined "
"variable, rather than an empty string."
msgstr ""
"模板过滤器 :tfilter:`length` 现在对未定义的变量返回 ``0``，而不是空字符串。"

msgid ""
"``ForeignKey.default_error_message['invalid']`` has been changed from "
"``'%(model)s instance with pk %(pk)r does not exist.'`` to ``'%(model)s "
"instance with %(field)s %(value)r does not exist.'`` If you are using this "
"message in your own code, please update the list of interpolated parameters. "
"Internally, Django will continue to provide the ``pk`` parameter in "
"``params`` for backwards compatibility."
msgstr ""
"``ForeignKey.default_error_message['invalid']`` 已从 ``'%(model)s instance "
"with pk %(pk)r does not exist.'`` 更改为 ``'%(model)s instance with "
"%(field)s %(value)r does not exist.'`` 如果您在自己的代码中使用此消息，请更新"
"插入的参数列表。在内部，Django 将继续提供 ``params`` 中的 ``pk`` 参数以保持向"
"后兼容性。"

msgid ""
"``UserCreationForm.error_messages['duplicate_username']`` is no longer used. "
"If you wish to customize that error message, :ref:`override it on the form "
"<modelforms-overriding-default-fields>` using the ``'unique'`` key in ``Meta."
"error_messages['username']`` or, if you have a custom form field for "
"``'username'``, using the ``'unique'`` key in its :attr:`~django.forms.Field."
"error_messages` argument."
msgstr ""
"``UserCreationForm.error_messages['duplicate_username']`` 不再使用。如果您希"
"望自定义该错误消息，请在表单上使用 ``Meta.error_messages['username']`` 中的 "
"``'unique'`` 键 :ref:`覆盖它 <modelforms-overriding-default-fields>`，或者如"
"果您有一个自定义的 ``'username'`` 字段，可以在其 :attr:`~django.forms.Field."
"error_messages` 参数中使用 ``'unique'`` 键。"

msgid ""
"The block ``usertools`` in the ``base.html`` template of :mod:`django."
"contrib.admin` now requires the ``has_permission`` context variable to be "
"set. If you have any custom admin views that use this template, update them "
"to pass :meth:`AdminSite.has_permission() <django.contrib.admin.AdminSite."
"has_permission>` as this new variable's value or simply include :meth:"
"`AdminSite.each_context(request) <django.contrib.admin.AdminSite."
"each_context>` in the context."
msgstr ""
"在 :mod:`django.contrib.admin` 的 ``base.html`` 模板中，块 ``usertools`` 现在"
"需要设置 ``has_permission`` 上下文变量。如果您有任何使用此模板的自定义管理视"
"图，请更新它们以传递 :meth:`AdminSite.has_permission() <django.contrib.admin."
"AdminSite.has_permission>` 作为这个新变量的值，或者简单地在上下文中包括 :"
"meth:`AdminSite.each_context(request) <django.contrib.admin.AdminSite."
"each_context>`。"

msgid ""
"Internal changes were made to the :class:`~django.forms.ClearableFileInput` "
"widget to allow more customization. The undocumented ``url_markup_template`` "
"attribute was removed in favor of ``template_with_initial``."
msgstr ""
":class:`~django.forms.ClearableFileInput` 小部件进行了内部更改，以允许更多自"
"定义。未记录的 ``url_markup_template`` 属性已被删除，而改用 "
"``template_with_initial``。"

msgid ""
"For consistency with other major vendors, the ``en_GB`` locale now has "
"Monday as the first day of the week."
msgstr ""
"为了与其他主要供应商保持一致，``en_GB`` 区域现在将星期一作为一周的第一天。"

msgid ""
"Seconds have been removed from any locales that had them in ``TIME_FORMAT``, "
"``DATETIME_FORMAT``, or ``SHORT_DATETIME_FORMAT``."
msgstr ""
"在 ``TIME_FORMAT``、``DATETIME_FORMAT`` 或 ``SHORT_DATETIME_FORMAT`` 中，已从"
"任何具有秒钟的区域中删除了秒钟。"

msgid ""
"The default max size of the Oracle test tablespace has increased from 300M "
"(or 200M, before 1.7.2) to 500M."
msgstr ""
"Oracle 测试表空间的默认最大大小从 300M（或在 1.7.2 之前的 200M）增加到 "
"500M 。"

msgid ""
"``reverse()`` and ``reverse_lazy()`` now return Unicode strings instead of "
"bytestrings."
msgstr ""
"``reverse()`` 和 ``reverse_lazy()`` 现在返回 Unicode 字符串而不是字节字符串。"

msgid ""
"The ``CacheClass`` shim has been removed from all cache backends. These "
"aliases were provided for backwards compatibility with Django 1.3. If you "
"are still using them, please update your project to use the real class name "
"found in the :setting:`BACKEND <CACHES-BACKEND>` key of the :setting:"
"`CACHES` setting."
msgstr ""
"所有缓存后端都已删除 ``CacheClass`` 部分。这些别名是为了向后兼容 Django 1.3 "
"提供的。如果您仍在使用它们，请更新您的项目以使用在 :setting:`CACHES` 设置的 :"
"setting:`BACKEND <CACHES-BACKEND>` 键中找到的真实类名。"

msgid ""
"By default, :func:`~django.core.management.call_command` now always skips "
"the check framework (unless you pass it ``skip_checks=False``)."
msgstr ""
"默认情况下，:func:`~django.core.management.call_command` 现在总是跳过检查框架"
"（除非您传递 ``skip_checks=False``）。"

msgid ""
"When iterating over lines, :class:`~django.core.files.File` now uses :pep:"
"`universal newlines <278>`. The following are recognized as ending a line: "
"the Unix end-of-line convention ``'\\n'``, the Windows convention "
"``'\\r\\n'``, and the old Macintosh convention ``'\\r'``."
msgstr ""
"在迭代行时，:class:`~django.core.files.File` 现在使用 :pep:`universal "
"newlines <278>`。以下内容被识别为结束行：Unix 换行约定 ``'\\n'``，Windows 换"
"行约定 ``'\\r\\n'`` 和旧的 Macintosh 换行约定 ``'\\r'``。"

msgid ""
"The Memcached cache backends ``MemcachedCache`` and ``PyLibMCCache`` will "
"delete a key if ``set()`` fails. This is necessary to ensure the "
"``cache_db`` session store always fetches the most current session data."
msgstr ""
"如果 ``set()`` 失败，Memcached 缓存后端 ``MemcachedCache`` 和 "
"``PyLibMCCache`` 将删除一个键。这是为了确保 ``cache_db`` 会话存储始终获取最新"
"的会话数据。"

msgid ""
"Private APIs ``override_template_loaders`` and ``override_with_test_loader`` "
"in ``django.test.utils`` were removed. Override ``TEMPLATES`` with "
"``override_settings`` instead."
msgstr ""
"在 ``django.test.utils`` 中删除了私有 API ``override_template_loaders`` 和 "
"``override_with_test_loader``。请改用 ``override_settings`` 来覆盖 "
"``TEMPLATES``。"

msgid ""
"Warnings from the MySQL database backend are no longer converted to "
"exceptions when :setting:`DEBUG` is ``True``."
msgstr ""
"当 :setting:`DEBUG` 设置为 ``True`` 时，MySQL 数据库后端不再将警告转换为异"
"常。"

msgid ""
":class:`~django.http.HttpRequest` now has a simplified ``repr`` (e.g. "
"``<WSGIRequest: GET '/somepath/'>``). This won't change the behavior of the :"
"class:`~django.views.debug.SafeExceptionReporterFilter` class."
msgstr ""
":class:`~django.http.HttpRequest` 现在具有简化的 ``repr`` （例如 "
"``<WSGIRequest: GET '/somepath/'>``）。这不会改变 :class:`~django.views."
"debug.SafeExceptionReporterFilter` 类的行为。"

msgid ""
"Class-based views that use :class:`~django.views.generic.edit."
"ModelFormMixin` will raise an :exc:`~django.core.exceptions."
"ImproperlyConfigured` exception when both the ``fields`` and ``form_class`` "
"attributes are specified. Previously, ``fields`` was silently ignored."
msgstr ""
"使用 :class:`~django.views.generic.edit.ModelFormMixin` 的类视图在同时指定 "
"``fields`` 和 ``form_class`` 属性时将引发 :exc:`~django.core.exceptions."
"ImproperlyConfigured` 异常。以前，``fields`` 会被静默忽略。"

msgid ""
"When following redirects, the test client now raises :exc:`~django.test."
"client.RedirectCycleError` if it detects a loop or hits a maximum redirect "
"limit (rather than passing silently)."
msgstr ""
"在跟随重定向时，测试客户端现在会引发 :exc:`~django.test.client."
"RedirectCycleError`，如果检测到循环或达到了最大重定向限制（而不是静默传递）。"

msgid ""
"Translatable strings set as the ``default`` parameter of the field are cast "
"to concrete strings later, so the return type of ``Field.get_default()`` is "
"different in some cases. There is no change to default values which are the "
"result of a callable."
msgstr ""
"作为字段的 ``default`` 参数设置的可翻译字符串稍后会转换为具体的字符串，因此在"
"某些情况下，``Field.get_default()`` 的返回类型会有所不同。对于可调用返回的默"
"认值没有变化。"

msgid ""
"``GenericIPAddressField.empty_strings_allowed`` is now ``False``. Database "
"backends that interpret empty strings as null (only Oracle among the "
"backends that Django includes) will no longer convert null values back to an "
"empty string. This is consistent with other backends."
msgstr ""
"``GenericIPAddressField.empty_strings_allowed`` 现在是 ``False``。将空字符串"
"解释为 null 值的数据库后端（Django 包括的后端中只有 Oracle）将不再将 null 值"
"转换回空字符串。这与其他后端保持一致。"

msgid ""
"When the ``BaseCommand.leave_locale_alone`` attribute is ``False``, "
"translations are now deactivated instead of forcing the \"en-us\" locale. In "
"the case your models contained non-English strings and you counted on "
"English translations to be activated in management commands, this will not "
"happen any longer. It might be that new database migrations are generated "
"(once) after migrating to 1.8."
msgstr ""
"当 ``BaseCommand.leave_locale_alone`` 属性为 ``False`` 时，现在会停用翻译，而"
"不是强制使用 \"en-us\" 区域设置。如果您的模型包含非英语字符串，并且您依赖于在"
"管理命令中激活英语翻译，那么这将不再发生。可能会在迁移到 1.8 后生成新的数据库"
"迁移（一次）。"

msgid ""
":func:`django.utils.translation.get_language()` now returns ``None`` instead "
"of :setting:`LANGUAGE_CODE` when translations are temporarily deactivated."
msgstr ""
"当翻译被临时停用时，:func:`django.utils.translation.get_language()` 现在返回 "
"``None`` 而不是 :setting:`LANGUAGE_CODE`。"

msgid ""
"When a translation doesn't exist for a specific literal, the fallback is now "
"taken from the :setting:`LANGUAGE_CODE` language (instead of from the "
"untranslated ``msgid`` message)."
msgstr ""
"当不存在特定文字的翻译时，现在会从 :setting:`LANGUAGE_CODE` 语言中获取回退翻"
"译（而不是从未翻译的 ``msgid`` 消息中获取）。"

msgid ""
"The ``name`` field of :class:`django.contrib.contenttypes.models."
"ContentType` has been removed by a migration and replaced by a property. "
"That means it's not possible to query or filter a ``ContentType`` by this "
"field any longer."
msgstr ""
":class:`django.contrib.contenttypes.models.ContentType` 的 ``name`` 字段已经"
"在迁移中删除，并被一个属性替代。这意味着不再可以使用这个字段来查询或过滤 "
"``ContentType`` 了。"

msgid ""
"Be careful if you upgrade to Django 1.8 and skip Django 1.7. If you run "
"``manage.py migrate --fake``, this migration will be skipped and you'll see "
"a ``RuntimeError: Error creating new content types.`` exception because the "
"``name`` column won't be dropped from the database. Use ``manage.py migrate "
"--fake-initial`` to fake only the initial migration instead."
msgstr ""
"如果你升级到 Django 1.8 并跳过了 Django 1.7，请注意。如果你运行 ``manage.py "
"migrate --fake``，这个迁移将被跳过，并且你会看到一个 ``RuntimeError: Error "
"creating new content types.`` 异常，因为 ``name`` 列不会从数据库中删除。使用 "
"``manage.py migrate --fake-initial`` 仅虚拟执行初始迁移。"

msgid ""
"The new :option:`migrate --fake-initial` option allows faking initial "
"migrations. In 1.7, initial migrations were always automatically faked if "
"all tables created in an initial migration already existed."
msgstr ""
"新的 :option:`migrate --fake-initial` 选项允许虚拟执行初始迁移。在 1.7 版中，"
"如果初始迁移中创建的所有表格已经存在，初始迁移将始终自动虚拟执行。"

msgid ""
"An app *without* migrations with a ``ForeignKey`` to an app *with* "
"migrations may now result in a foreign key constraint error when migrating "
"the database or running tests. In Django 1.7, this could fail silently and "
"result in a missing constraint. To resolve the error, add migrations to the "
"app without them."
msgstr ""
"一个没有迁移的应用程序，其内含一个对有迁移的应用程序的 ``ForeignKey``，在迁移"
"数据库或运行测试时可能会导致外键约束错误。在 Django 1.7 中，这可能会导致默默"
"失败并导致约束丢失。要解决这个错误，请为没有迁移的应用程序添加迁移。"

msgid "Features deprecated in 1.8"
msgstr "在 1.8 中被废弃的功能"

msgid "Selected methods in ``django.db.models.options.Options``"
msgstr "``django.db.models.options.Options`` 中的选定方法"

msgid ""
"As part of the formalization of the ``Model._meta`` API (from the :class:"
"`django.db.models.options.Options` class), a number of methods have been "
"deprecated and will be removed in Django 1.10:"
msgstr ""
"作为正式化 ``Model._meta`` API（来自 :class:`django.db.models.options."
"Options` 类）的一部分，一些方法已被弃用，并将在 Django 1.10 中移除："

msgid "Loading ``cycle`` and ``firstof`` template tags from ``future`` library"
msgstr "加载 ``cycle`` 和 ``firstof`` 模板标签来自 ``future`` 库"

msgid ""
"Django 1.6 introduced ``{% load cycle from future %}`` and ``{% load firstof "
"from future %}`` syntax for forward compatibility of the :ttag:`cycle` and :"
"ttag:`firstof` template tags. This syntax is now deprecated and will be "
"removed in Django 1.10. You can simply remove the ``{% load ... from future "
"%}`` tags."
msgstr ""
"Django 1.6 引入了 ``{% load cycle from future %}`` 和 ``{% load firstof from "
"future %}`` 语法，用于前向兼容 :ttag:`cycle` 和 :ttag:`firstof` 模板标签。此"
"语法现已被弃用，并将在 Django 1.10 中移除。您可以简单地删除 ``{% load ... "
"from future %}`` 标签。"

msgid "``django.conf.urls.patterns()``"
msgstr "``django.conf.urls.patterns()``"

msgid ""
"In the olden days of Django, it was encouraged to reference views as strings "
"in ``urlpatterns``::"
msgstr "在早期的 Django 中，鼓励在 ``urlpatterns`` 中将视图引用为字符串："

msgid ""
"and Django would magically import ``myapp.views.myview`` internally and turn "
"the string into a real function reference. In order to reduce repetition "
"when referencing many views from the same module, the ``patterns()`` "
"function takes a required initial ``prefix`` argument which is prepended to "
"all views-as-strings in that set of ``urlpatterns``::"
msgstr ""
"Django 会在内部神奇地导入 ``myapp.views.myview`` 并将字符串转换为真实的函数引"
"用。为了减少在引用同一模块中的多个视图时的重复性，``patterns()`` 函数接受一个"
"必需的初始 ``prefix`` 参数，该参数会添加到该组 ``urlpatterns`` 中所有作为字符"
"串的视图前面："

msgid ""
"In the modern era, we have updated the tutorial to instead recommend "
"importing your views module and referencing your view functions (or classes) "
"directly. This has a number of advantages, all deriving from the fact that "
"we are using normal Python in place of \"Django String Magic\": the errors "
"when you mistype a view name are less obscure, IDEs can help with "
"autocompletion of view names, etc."
msgstr ""
"在现代时代，我们已经更新了教程，建议导入您的视图模块并直接引用您的视图函数"
"（或类）。这样做有很多优点，所有优点都源自于我们使用普通的 Python 代"
"替“Django 字符串魔法”：当您拼写错误视图名称时的错误更不隐晦，集成开发环境可以"
"帮助自动完成视图名称等等。"

msgid ""
"So these days, the above use of the ``prefix`` arg is much more likely to be "
"written (and is better written) as::"
msgstr ""
"因此，现在更有可能以以下方式编写（也更好地编写）上述使用 ``prefix`` 参数的代"
"码："

msgid ""
"Thus ``patterns()`` serves little purpose and is a burden when teaching new "
"users (answering the newbie's question \"why do I need this empty string as "
"the first argument to ``patterns()``?\"). For these reasons, we are "
"deprecating it. Updating your code is as simple as ensuring that "
"``urlpatterns`` is a list of ``django.conf.urls.url()`` instances. For "
"example::"
msgstr ""
"因此，``patterns()`` 函数的作用很小，并且在教新用户时会造成困扰（回答新手的问"
"题 \"为什么我需要将空字符串作为 ``patterns()`` 的第一个参数？\"）。出于这些原"
"因，我们正在弃用它。更新您的代码非常简单，只需确保 ``urlpatterns`` 是 "
"``django.conf.urls.url()`` 实例的列表。例如："

msgid "Passing a string as ``view`` to ``django.conf.urls.url()``"
msgstr "将字符串作为 ``view`` 传递给 ``django.conf.urls.url()``"

msgid ""
"Related to the previous item, referencing views as strings in the ``url()`` "
"function is deprecated. Pass the callable view as described in the previous "
"section instead."
msgstr ""
"与前面的项目相关，将视图作为字符串引用在 ``url()`` 函数中已被弃用。请按照前面"
"的部分所描述的方式传递可调用的视图函数。"

msgid "Template-related settings"
msgstr "模板相关的设置"

msgid ""
"As a consequence of the multiple template engines refactor, several settings "
"are deprecated in favor of :setting:`TEMPLATES`:"
msgstr ""
"由于多个模板引擎的重构，一些设置已被弃用，建议使用 :setting:`TEMPLATES` 代"
"替："

msgid "``django.core.context_processors``"
msgstr "``django.core.context_processors``"

msgid ""
"Built-in template context processors have been moved to ``django.template."
"context_processors``."
msgstr ""
"内置模板上下文处理器已经移动到 ``django.template.context_processors``。"

msgid "``django.test.SimpleTestCase.urls``"
msgstr "``django.test.SimpleTestCase.urls``"

msgid ""
"The attribute ``SimpleTestCase.urls`` for specifying URLconf configuration "
"in tests has been deprecated and will be removed in Django 1.10. Use :func:"
"`@override_settings(ROOT_URLCONF=...) <django.test.override_settings>` "
"instead."
msgstr ""
"用于在测试中指定 URLconf 配置的属性 ``SimpleTestCase.urls`` 已被弃用，并将在 "
"Django 1.10 中移除。请改用 :func:`@override_settings(ROOT_URLCONF=...) "
"<django.test.override_settings>`。"

msgid "``prefix`` argument to :func:`~django.conf.urls.i18n.i18n_patterns`"
msgstr ""
"``prefix`` 参数用于 :func:`~django.conf.urls.i18n.i18n_patterns` 函数。"

msgid ""
"Related to the previous item, the ``prefix`` argument to :func:`django.conf."
"urls.i18n.i18n_patterns` has been deprecated. Simply pass a list of ``django."
"conf.urls.url()`` instances instead."
msgstr ""
"与前面的项目相关，已弃用了 :func:`django.conf.urls.i18n.i18n_patterns` 函数"
"的 ``prefix`` 参数。只需传递一个 ``django.conf.urls.url()`` 实例的列表即可。"

msgid ""
"Using an incorrect count of unpacked values in the :ttag:`for` template tag"
msgstr "在 :ttag:`for` 模板标签中使用错误的解包值数量"

msgid ""
"Using an incorrect count of unpacked values in :ttag:`for` tag will raise an "
"exception rather than fail silently in Django 1.10."
msgstr ""
"在 Django 1.10 中，在 :ttag:`for` 标签中使用错误的解包值数量将引发异常，而不"
"是静默失败。"

msgid "Passing a dotted path to ``reverse()`` and :ttag:`url`"
msgstr "传递点路径给 ``reverse()`` 和 :ttag:`url`"

msgid ""
"Reversing URLs by Python path is an expensive operation as it causes the "
"path being reversed to be imported. This behavior has also resulted in a "
"`security issue`_. Use :ref:`named URL patterns <naming-url-patterns>` for "
"reversing instead."
msgstr ""
"通过 Python 路径反向解析 URL 是一项昂贵的操作，因为它导致被反向解析的路径被导"
"入。这种行为还导致了一个 `security issue`_。请改用 :ref:`命名的 URL 模式 "
"<naming-url-patterns>` 来进行反向解析。"

msgid ""
"If you are using :mod:`django.contrib.sitemaps`, add the ``name`` argument "
"to the ``url`` that references :func:`django.contrib.sitemaps.views."
"sitemap`::"
msgstr ""
"如果您正在使用 :mod:`django.contrib.sitemaps`，请在引用 :func:`django."
"contrib.sitemaps.views.sitemap` 的 ``url`` 中添加 ``name`` 参数："

msgid ""
"to ensure compatibility when reversing by Python path is removed in Django "
"1.10."
msgstr "为了确保在 Django 1.10 中移除通过 Python 路径进行反向解析时的兼容性。"

msgid ""
"Similarly for GIS sitemaps, add ``name='django.contrib.gis.sitemaps.views."
"kml'`` or ``name='django.contrib.gis.sitemaps.views.kmz'``."
msgstr ""
"同样对于 GIS 网站地图，添加 ``name='django.contrib.gis.sitemaps.views.kml'`` "
"或 ``name='django.contrib.gis.sitemaps.views.kmz'``。"

msgid ""
"If you are using a Python path for the :setting:`LOGIN_URL` or :setting:"
"`LOGIN_REDIRECT_URL` setting, use the name of the ``url()`` instead."
msgstr ""
"如果您正在为 :setting:`LOGIN_URL` 或 :setting:`LOGIN_REDIRECT_URL` 设置使用 "
"Python 路径，请改为使用 ``url()`` 的名称。"

msgid "Aggregate methods and modules"
msgstr "聚合方法和模块"

msgid ""
"The ``django.db.models.sql.aggregates`` and ``django.contrib.gis.db.models."
"sql.aggregates`` modules (both private API), have been deprecated as "
"``django.db.models.aggregates`` and ``django.contrib.gis.db.models."
"aggregates`` are now also responsible for SQL generation. The old modules "
"will be removed in Django 1.10."
msgstr ""
"``django.db.models.sql.aggregates`` 和 ``django.contrib.gis.db.models.sql."
"aggregates`` 模块（都是私有 API）已被弃用，因为 ``django.db.models."
"aggregates`` 和 ``django.contrib.gis.db.models.aggregates`` 现在也负责 SQL 生"
"成。旧模块将在 Django 1.10 中移除。"

msgid ""
"If you were using the old modules, see :doc:`Query Expressions </ref/models/"
"expressions>` for instructions on rewriting custom aggregates using the new "
"stable API."
msgstr ""
"如果您正在使用旧模块，请参阅 :doc:`查询表达式 </ref/models/expressions>`，以"
"了解如何使用新的稳定 API 重写自定义聚合函数。"

msgid ""
"The following methods and properties of ``django.db.models.sql.query.Query`` "
"have also been deprecated and the backwards compatibility shims will be "
"removed in Django 1.10:"
msgstr ""
"以下方法和属性已经被弃用，并且在 Django 1.10 中将移除与向后兼容的包装："

msgid "``Query.aggregates``, replaced by ``annotations``."
msgstr "``Query.aggregates``，已被替换为 ``annotations``。"

msgid "``Query.aggregate_select``, replaced by ``annotation_select``."
msgstr "``Query.aggregate_select``，已被替换为 ``annotation_select``。"

msgid "``Query.add_aggregate()``, replaced by ``add_annotation()``."
msgstr "``Query.add_aggregate()``，已被替换为 ``add_annotation()``。"

msgid "``Query.set_aggregate_mask()``, replaced by ``set_annotation_mask()``."
msgstr "``Query.set_aggregate_mask()``，已被替换为 ``set_annotation_mask()``。"

msgid ""
"``Query.append_aggregate_mask()``, replaced by ``append_annotation_mask()``."
msgstr ""
"``Query.append_aggregate_mask()``，已被替换为 ``append_annotation_mask()``。"

msgid "Extending management command arguments through ``Command.option_list``"
msgstr "通过 ``Command.option_list`` 扩展管理命令参数"

msgid ""
"Management commands now use :py:mod:`argparse` instead of :py:mod:`optparse` "
"to parse command-line arguments passed to commands. This also means that the "
"way to add custom arguments to commands has changed: instead of extending "
"the ``option_list`` class list, you should now override the :meth:`~django."
"core.management.BaseCommand.add_arguments` method and add arguments through "
"``argparse.add_argument()``. See :ref:`this example <custom-commands-"
"options>` for more details."
msgstr ""
"管理命令现在使用 :py:mod:`argparse` 而不是 :py:mod:`optparse` 来解析传递给命"
"令的命令行参数。这也意味着添加自定义参数到命令的方式已经改变：不再扩展 "
"``option_list`` 类列表，而是现在应该覆盖 :meth:`~django.core.management."
"BaseCommand.add_arguments` 方法，并通过 ``argparse.add_argument()`` 添加参"
"数。有关更多详细信息，请参阅 :ref:`此示例 <custom-commands-options>`。"

msgid "``django.core.management.NoArgsCommand``"
msgstr "``django.core.management.NoArgsCommand``"

msgid ""
"The class ``NoArgsCommand`` is now deprecated and will be removed in Django "
"1.10. Use :class:`~django.core.management.BaseCommand` instead, which takes "
"no arguments by default."
msgstr ""
"类 ``NoArgsCommand`` 现已被弃用，将在 Django 1.10 中移除。请改用 :class:"
"`~django.core.management.BaseCommand`，默认情况下不接受参数。"

msgid "Listing all migrations in a project"
msgstr "列出项目中的所有迁移"

msgid ""
"The ``--list`` option of the :djadmin:`migrate` management command is "
"deprecated and will be removed in Django 1.10. Use :djadmin:`showmigrations` "
"instead."
msgstr ""
":djadmin:`migrate` 管理命令的 ``--list`` 选项已被弃用，将在 Django 1.10 中移"
"除。请改用 :djadmin:`showmigrations`。"

msgid ""
"``cache_choices`` option of ``ModelChoiceField`` and "
"``ModelMultipleChoiceField``"
msgstr ""
"``ModelChoiceField`` 和 ``ModelMultipleChoiceField`` 的 ``cache_choices`` 选"
"项"

msgid ""
":class:`~django.forms.ModelChoiceField` and :class:`~django.forms."
"ModelMultipleChoiceField` took an undocumented, untested option "
"``cache_choices``. This cached querysets between multiple renderings of the "
"same ``Form`` object. This option is subject to an accelerated deprecation "
"and will be removed in Django 1.9."
msgstr ""
":class:`~django.forms.ModelChoiceField` 和 :class:`~django.forms."
"ModelMultipleChoiceField` 接受了一个未记录和未经测试的选项 "
"``cache_choices``。该选项在同一 ``Form`` 对象的多次渲染之间缓存了查询集。该选"
"项将加速弃用，并将在 Django 1.9 中移除。"

msgid "``django.template.resolve_variable()``"
msgstr "``django.template.resolve_variable()``"

msgid ""
"The function has been informally marked as \"Deprecated\" for some time. "
"Replace ``resolve_variable(path, context)`` with ``django.template."
"Variable(path).resolve(context)``."
msgstr ""
"这个函数已经在一段时间内非正式地标记为 \"弃用\"。请使用 ``django.template."
"Variable(path).resolve(context)`` 替代 ``resolve_variable(path, context)``。"

msgid "``django.contrib.webdesign``"
msgstr "``django.contrib.webdesign``"

msgid ""
"It provided the :ttag:`lorem` template tag which is now included in the "
"built-in tags. Simply remove ``'django.contrib.webdesign'`` from :setting:"
"`INSTALLED_APPS` and ``{% load webdesign %}`` from your templates."
msgstr ""
"它提供了 :ttag:`lorem` 模板标签，现在已包含在内置标签中。只需从 :setting:"
"`INSTALLED_APPS` 中移除 ``'django.contrib.webdesign'``，并从您的模板中移除 "
"``{% load webdesign %}``。"

msgid "``error_message`` argument to ``django.forms.RegexField``"
msgstr "``django.forms.RegexField`` 的 ``error_message`` 参数已被弃用"

msgid ""
"It provided backwards compatibility for pre-1.0 code, but its functionality "
"is redundant. Use ``Field.error_messages['invalid']`` instead."
msgstr ""
"它提供了对 1.0 版本之前的代码的向后兼容性，但其功能是多余的。请改用 ``Field."
"error_messages['invalid']``。"

msgid "Old :tfilter:`unordered_list` syntax"
msgstr "旧的 :tfilter:`unordered_list` 语法"

msgid ""
"An older (pre-1.0), more restrictive and verbose input format for the :"
"tfilter:`unordered_list` template filter has been deprecated::"
msgstr ""
"已弃用了 :tfilter:`unordered_list` 模板过滤器的旧输入格式，这是一个较旧（1.0 "
"版本之前）的、更受限制和冗长的格式："

msgid "Using the new syntax, this becomes::"
msgstr "使用新的语法，这将变为："

msgid "``django.forms.Field._has_changed()``"
msgstr "``django.forms.Field._has_changed()``"

msgid ""
"Rename this method to :meth:`~django.forms.Field.has_changed` by removing "
"the leading underscore. The old name will still work until Django 1.10."
msgstr ""
"将这个方法的名称更改为 :meth:`~django.forms.Field.has_changed`，删除前导的下"
"划线。旧的名称将在 Django 1.10 之前仍然有效。"

msgid "``django.utils.html.remove_tags()`` and ``removetags`` template filter"
msgstr "``django.utils.html.remove_tags()`` 和 ``removetags`` 模板过滤器"

msgid ""
"``django.utils.html.remove_tags()`` as well as the template filter "
"``removetags`` have been deprecated as they cannot guarantee safe output. "
"Their existence is likely to lead to their use in security-sensitive "
"contexts where they are not actually safe."
msgstr ""
"``django.utils.html.remove_tags()`` 以及模板过滤器 ``removetags`` 已被弃用，"
"因为它们无法保证安全的输出。它们的存在可能会导致在安全敏感的上下文中使用它"
"们，而实际上它们并不安全。"

msgid ""
"The unused and undocumented ``django.utils.html.strip_entities()`` function "
"has also been deprecated."
msgstr ""
"未使用且未记录的 ``django.utils.html.strip_entities()`` 函数也已被弃用。"

msgid ""
"``is_admin_site`` argument to ``django.contrib.auth.views.password_reset()``"
msgstr ""
"``django.contrib.auth.views.password_reset()`` 的 ``is_admin_site`` 参数"

msgid "It's a legacy option that should no longer be necessary."
msgstr "这是一个遗留选项，应该不再需要。"

msgid "``SubfieldBase``"
msgstr "``SubfieldBase``"

msgid ""
"``django.db.models.fields.subclassing.SubfieldBase`` has been deprecated and "
"will be removed in Django 1.10. Historically, it was used to handle fields "
"where type conversion was needed when loading from the database, but it was "
"not used in ``.values()`` calls or in aggregates. It has been replaced with :"
"meth:`~django.db.models.Field.from_db_value`."
msgstr ""
"``django.db.models.fields.subclassing.SubfieldBase`` 已被弃用，并将在 Django "
"1.10 中删除。从历史上看，它用于处理需要在从数据库加载时进行类型转换的字段，但"
"在 ``.values()`` 调用或聚合中不使用。它已被 :meth:`~django.db.models.Field."
"from_db_value` 替代。"

msgid ""
"The new approach doesn't call the :meth:`~django.db.models.Field.to_python` "
"method on assignment as was the case with ``SubfieldBase``. If you need that "
"behavior, reimplement the ``Creator`` class `from Django's source code "
"<https://github.com/django/django/blob/stable/1.8.x/django/db/models/fields/"
"subclassing.py#L31-L44>`_ in your project."
msgstr ""
"新的方法在赋值时不会调用 :meth:`~django.db.models.Field.to_python` 方法，就"
"像 ``SubfieldBase`` 的情况一样。如果你需要这个行为，请在你的项目中重新实现 "
"``Creator`` 类，可以从 Django 的源代码中获取 `链接 <https://github.com/"
"django/django/blob/stable/1.8.x/django/db/models/fields/subclassing.py#L31-"
"L44>`_。"

msgid "``django.utils.checksums``"
msgstr "``django.utils.checksums``"

msgid ""
"The ``django.utils.checksums`` module has been deprecated and will be "
"removed in Django 1.10. The functionality it provided (validating checksum "
"using the Luhn algorithm) was undocumented and not used in Django. The "
"module has been moved to the :pypi:`django-localflavor` package (version "
"1.1+)."
msgstr ""
"``django.utils.checksums`` 模块已被弃用，并将在 Django 1.10 中删除。它提供的"
"功能（使用 Luhn 算法验证校验和）未经文档化，并且在 Django 中未被使用。该模块"
"已被移动到 :pypi:`django-localflavor` 包中（版本 1.1+）。"

msgid "``InlineAdminForm.original_content_type_id``"
msgstr "``InlineAdminForm.original_content_type_id``"

msgid ""
"The ``original_content_type_id`` attribute on ``InlineAdminForm`` has been "
"deprecated and will be removed in Django 1.10. Historically, it was used to "
"construct the \"view on site\" URL. This URL is now accessible using the "
"``absolute_url`` attribute of the form."
msgstr ""
"``InlineAdminForm`` 上的 ``original_content_type_id`` 属性已被弃用，并将在 "
"Django 1.10 中删除。从历史上看，它用于构建“查看网站上的内容” URL。现在可以使"
"用表单的 ``absolute_url`` 属性访问此 URL。"

msgid ""
"``django.views.generic.edit.FormMixin.get_form()``’s ``form_class`` argument"
msgstr ""
"``django.views.generic.edit.FormMixin.get_form()`` 方法的 ``form_class`` 参数"

msgid ""
"``FormMixin`` subclasses that override the ``get_form()`` method should make "
"sure to provide a default value for the ``form_class`` argument since it's "
"now optional."
msgstr ""
"``FormMixin`` 的子类在重写 ``get_form()`` 方法时，应确保为 ``form_class`` 参"
"数提供默认值，因为它现在是可选的。"

msgid ""
"Rendering templates loaded by :func:`~django.template.loader.get_template()` "
"with a :class:`~django.template.Context`"
msgstr ""
"使用 :func:`~django.template.loader.get_template()` 加载的模板进行渲染，需要"
"使用 :class:`~django.template.Context`。"

msgid ""
"The return type of :func:`~django.template.loader.get_template()` has "
"changed in Django 1.8: instead of a :class:`django.template.Template`, it "
"returns a ``Template`` instance whose exact type depends on which backend "
"loaded it."
msgstr ""
"在 Django 1.8 中，:func:`~django.template.loader.get_template()` 的返回类型已"
"更改：不再返回 :class:`django.template.Template`，而是返回一个 ``Template`` "
"实例，其确切类型取决于加载它的后端。"

msgid ""
"Both classes provide a ``render()`` method, however, the former takes a :"
"class:`django.template.Context` as an argument while the latter expects a :"
"class:`dict`. This change is enforced through a deprecation path for Django "
"templates."
msgstr ""
"这两个类都提供了一个 ``render()`` 方法，然而，前者接受一个 :class:`django."
"template.Context` 作为参数，而后者期望一个 :class:`dict`。这个更改是通过 "
"Django 模板的弃用路径来强制执行的。"

msgid ""
"All this also applies to :func:`~django.template.loader.select_template()`."
msgstr "所有这些也适用于 :func:`~django.template.loader.select_template()`。"

msgid ""
":class:`~django.template.Template` and :class:`~django.template.Context` "
"classes in template responses"
msgstr ""
"在模板响应中使用 :class:`~django.template.Template` 和 :class:`~django."
"template.Context` 类。"

msgid ""
"Some methods of :class:`~django.template.response.SimpleTemplateResponse` "
"and :class:`~django.template.response.TemplateResponse` accepted :class:"
"`django.template.Context` and :class:`django.template.Template` objects as "
"arguments. They should now receive :class:`dict` and backend-dependent "
"template objects respectively."
msgstr ""
":class:`~django.template.response.SimpleTemplateResponse` 和 :class:`~django."
"template.response.TemplateResponse` 的一些方法以前接受 :class:`django."
"template.Context` 和 :class:`django.template.Template` 对象作为参数。现在它们"
"应该分别接收 :class:`dict` 和依赖于后端的模板对象。"

msgid ""
"This also applies to the return types if you have subclassed either template "
"response class."
msgstr "如果您已经对模板响应类进行了子类化，这也适用于返回类型。"

msgid ""
"Check the :doc:`template response API documentation </ref/template-"
"response>` for details."
msgstr ""
"请查看 :doc:`模板响应 API 文档 </ref/template-response>` 获取详细信息。"

msgid "``current_app`` argument of template-related APIs"
msgstr "与模板相关的 API 中的 ``current_app`` 参数"

msgid ""
"The following functions and classes will no longer accept a ``current_app`` "
"parameter to set an URL namespace in Django 1.10:"
msgstr ""
"以下函数和类将不再接受 ``current_app`` 参数来设置 Django 1.10 中的 URL 命名空"
"间："

msgid ""
"Set ``request.current_app`` instead, where ``request`` is the first argument "
"to these functions or classes. If you're using a plain ``Context``, use a "
"``RequestContext`` instead."
msgstr ""
"请设置 ``request.current_app``，其中 ``request`` 是这些函数或类的第一个参数。"
"如果你使用一个普通的 ``Context``，请改用 ``RequestContext``。"

msgid ""
"``dictionary`` and ``context_instance`` arguments of rendering functions"
msgstr "渲染函数的 ``dictionary`` 和 ``context_instance`` 参数"

msgid ""
"The following functions will no longer accept the ``dictionary`` and "
"``context_instance`` parameters in Django 1.10:"
msgstr ""
"在 Django 1.10 中，以下函数将不再接受 ``dictionary`` 和 ``context_instance`` "
"参数："

msgid ""
"Use the ``context`` parameter instead. When ``dictionary`` is passed as a "
"positional argument, which is the most common idiom, no changes are needed."
msgstr ""
"请改用 ``context`` 参数。当 ``dictionary`` 作为位置参数传递时，这是最常见的用"
"法，无需进行更改。"

msgid ""
"If you're passing a :class:`~django.template.Context` in "
"``context_instance``, pass a :class:`dict` in the ``context`` parameter "
"instead. If you're passing a :class:`~django.template.RequestContext`, pass "
"the request separately in the ``request`` parameter."
msgstr ""
"如果在 ``context_instance`` 中传递了 :class:`~django.template.Context`，请在 "
"``context`` 参数中传递一个 :class:`dict`。如果传递了 :class:`~django."
"template.RequestContext`，请在 ``request`` 参数中单独传递请求。"

msgid "``dirs`` argument of template-finding functions"
msgstr "模板查找函数的 ``dirs`` 参数"

msgid ""
"The following functions will no longer accept a ``dirs`` parameter to "
"override ``TEMPLATE_DIRS`` in Django 1.10:"
msgstr ""
"在 Django 1.10 中，以下函数将不再接受 ``dirs`` 参数来覆盖 ``TEMPLATE_DIRS``："

msgid ""
"The parameter didn't work consistently across different template loaders and "
"didn't work for included templates."
msgstr "该参数在不同的模板加载器之间不一致，并且在包含的模板中无法正常工作。"

msgid "``django.template.loader.BaseLoader``"
msgstr "``django.template.loader.BaseLoader``"

msgid ""
"``django.template.loader.BaseLoader`` was renamed to ``django.template."
"loaders.base.Loader``. If you've written a custom template loader that "
"inherits ``BaseLoader``, you must inherit ``Loader`` instead."
msgstr ""
"``django.template.loader.BaseLoader`` 已更名为 ``django.template.loaders."
"base.Loader``。如果您编写了一个自定义的模板加载器，继承自 ``BaseLoader``，那"
"么您必须改为继承 ``Loader``。"

msgid "``django.test.utils.TestTemplateLoader``"
msgstr "``django.test.utils.TestTemplateLoader``"

msgid ""
"Private API ``django.test.utils.TestTemplateLoader`` is deprecated in favor "
"of ``django.template.loaders.locmem.Loader`` and will be removed in Django "
"1.9."
msgstr ""
"私有 API ``django.test.utils.TestTemplateLoader`` 已弃用，推荐使用 ``django."
"template.loaders.locmem.Loader``，将在 Django 1.9 中移除。"

msgid "Support for the ``max_length`` argument on custom ``Storage`` classes"
msgstr "自定义 ``Storage`` 类上 ``max_length`` 参数的支持"

msgid ""
"``Storage`` subclasses should add ``max_length=None`` as a parameter to :"
"meth:`~django.core.files.storage.Storage.get_available_name` and/or :meth:"
"`~django.core.files.storage.Storage.save` if they override either method. "
"Support for storages that do not accept this argument will be removed in "
"Django 1.10."
msgstr ""
"如果自定义的 ``Storage`` 子类重写了 :meth:`~django.core.files.storage."
"Storage.get_available_name` 和/或 :meth:`~django.core.files.storage.Storage."
"save` 方法，应该将 ``max_length=None`` 添加为参数。不接受这个参数的存储支持将"
"在 Django 1.10 中移除。"

msgid "``qn`` replaced by ``compiler``"
msgstr "``qn`` 被替换为 ``compiler``"

msgid ""
"In previous Django versions, various internal ORM methods (mostly ``as_sql`` "
"methods) accepted a ``qn`` (for \"quote name\") argument, which was a "
"reference to a function that quoted identifiers for sending to the database. "
"In Django 1.8, that argument has been renamed to ``compiler`` and is now a "
"full ``SQLCompiler`` instance. For backwards-compatibility, calling a "
"``SQLCompiler`` instance performs the same name-quoting that the ``qn`` "
"function used to. However, this backwards-compatibility shim is immediately "
"deprecated: you should rename your ``qn`` arguments to ``compiler``, and "
"call ``compiler.quote_name_unless_alias(...)`` where you previously called "
"``qn(...)``."
msgstr ""
"在以前的 Django 版本中，各种内部的 ORM 方法（主要是 ``as_sql`` 方法）接受一个"
"名为 ``qn`` （代表 \"quote name\"）的参数，它是一个引用了一个函数来为发送到数"
"据库的标识符加引号的参数。在 Django 1.8 中，这个参数已被重命名为 "
"``compiler``，并且现在是一个完整的 ``SQLCompiler`` 实例。为了向后兼容，调用一"
"个 ``SQLCompiler`` 实例执行与之前 ``qn`` 函数相同的名称引用操作。然而，这个向"
"后兼容性的支持被立即弃用：您应该将您的 ``qn`` 参数重命名为 ``compiler``，并在"
"以前调用 ``qn(...)`` 的地方改为调用 ``compiler."
"quote_name_unless_alias(...)``。"

msgid "Default value of ``RedirectView.permanent``"
msgstr "``RedirectView.permanent`` 的默认值"

msgid ""
"The default value of the :attr:`RedirectView.permanent <django.views.generic."
"base.RedirectView.permanent>` attribute will change from ``True`` to "
"``False`` in Django 1.9."
msgstr ""
":attr:`RedirectView.permanent <django.views.generic.base.RedirectView."
"permanent>` 属性的默认值将在 Django 1.9 中从 ``True`` 更改为 ``False``。"

msgid ""
"Using ``AuthenticationMiddleware`` without "
"``SessionAuthenticationMiddleware``"
msgstr ""
"在没有使用 ``SessionAuthenticationMiddleware`` 的情况下使用 "
"``AuthenticationMiddleware``。"

msgid ""
"``django.contrib.auth.middleware.SessionAuthenticationMiddleware`` was added "
"in Django 1.7. In Django 1.7.2, its functionality was moved to ``auth."
"get_user()`` and, for backwards compatibility, enabled only if ``'django."
"contrib.auth.middleware.SessionAuthenticationMiddleware'`` appears in "
"``MIDDLEWARE_CLASSES``."
msgstr ""
"``django.contrib.auth.middleware.SessionAuthenticationMiddleware`` 是在 "
"Django 1.7 中添加的。在 Django 1.7.2 中，它的功能被移动到了 ``auth."
"get_user()`` 中，并且为了向后兼容，只有在 ``MIDDLEWARE_CLASSES`` 中出现 "
"``'django.contrib.auth.middleware.SessionAuthenticationMiddleware'`` 才会启用"
"它。"

msgid ""
"In Django 1.10, session verification will be enabled regardless of whether "
"or not ``SessionAuthenticationMiddleware`` is enabled (at which point "
"``SessionAuthenticationMiddleware`` will have no significance). You can add "
"it to your ``MIDDLEWARE_CLASSES`` sometime before then to opt-in. Please "
"read the :ref:`upgrade considerations <session-invalidation-on-password-"
"change>` first."
msgstr ""
"在 Django 1.10 中，无论是否启用 ``SessionAuthenticationMiddleware``，会启用会"
"话验证（此时 ``SessionAuthenticationMiddleware`` 将不再具有重要意义）。您可以"
"在那之前的某个时候将其添加到您的 ``MIDDLEWARE_CLASSES`` 中以选择启用它。请首"
"先阅读 :ref:`升级注意事项 <session-invalidation-on-password-change>`。"

msgid "``django.contrib.sitemaps.FlatPageSitemap``"
msgstr "``django.contrib.sitemaps.FlatPageSitemap``"

msgid ""
"``django.contrib.sitemaps.FlatPageSitemap`` has moved to ``django.contrib."
"flatpages.sitemaps.FlatPageSitemap``. The old import location is deprecated "
"and will be removed in Django 1.9."
msgstr ""
"``django.contrib.sitemaps.FlatPageSitemap`` 已经移动到 ``django.contrib."
"flatpages.sitemaps.FlatPageSitemap``。旧的导入位置已被弃用，并将在 Django "
"1.9 中移除。"

msgid "Model ``Field.related``"
msgstr "模型 ``Field.related``"

msgid ""
"Private attribute ``django.db.models.Field.related`` is deprecated in favor "
"of ``Field.rel``.  The latter is an instance of ``django.db.models.fields."
"related.ForeignObjectRel`` which replaces ``django.db.models.related."
"RelatedObject``. The ``django.db.models.related`` module has been removed "
"and the ``Field.related`` attribute will be removed in Django 1.10."
msgstr ""
"私有属性 ``django.db.models.Field.related`` 已被弃用，建议使用 ``Field."
"rel``。后者是 ``django.db.models.fields.related.ForeignObjectRel`` 的一个实"
"例，它替代了 ``django.db.models.related.RelatedObject``。``django.db.models."
"related`` 模块已被移除，``Field.related`` 属性将在 Django 1.10 中移除。"

msgid "``ssi`` template tag"
msgstr "``ssi`` 模板标签"

msgid ""
"The ``ssi`` template tag allows files to be included in a template by "
"absolute path. This is of limited use in most deployment situations, and "
"the :ttag:`include` tag often makes more sense. This tag is now deprecated "
"and will be removed in Django 1.10."
msgstr ""
"``ssi`` 模板标签允许通过绝对路径将文件包含到模板中。在大多数部署情况下，这具"
"有有限的用途，通常更有意义的是使用 :ttag:`include` 标签。此标签现在已被弃用，"
"并将在 Django 1.10 中移除。"

msgid "``=`` as comparison operator in ``if`` template tag"
msgstr "``if`` 模板标签中的比较运算符 ``=`` 已被弃用"

msgid ""
"Using a single equals sign with the ``{% if %}`` template tag for equality "
"testing was undocumented and untested. It's now deprecated in favor of "
"``==``."
msgstr ""
"在 ``{% if %}`` 模板标签中使用单个等号进行相等性测试是未记录和未经测试的。现"
"在已弃用，建议使用 ``==``。"

msgid "``%(<foo>)s`` syntax in ``ModelFormMixin.success_url``"
msgstr "在 ``ModelFormMixin.success_url`` 中使用的 ``%(<foo>)s`` 语法已被弃用"

msgid ""
"The legacy ``%(<foo>)s`` syntax in :attr:`ModelFormMixin.success_url <django."
"views.generic.edit.ModelFormMixin.success_url>` is deprecated and will be "
"removed in Django 1.10."
msgstr ""
"在 :attr:`ModelFormMixin.success_url <django.views.generic.edit."
"ModelFormMixin.success_url>` 中的遗留 ``%(<foo>)s`` 语法已被弃用，并将在 "
"Django 1.10 中移除。"

msgid "``GeoQuerySet`` aggregate methods"
msgstr "``GeoQuerySet`` 聚合方法"

msgid ""
"The ``collect()``, ``extent()``, ``extent3d()``, ``make_line()``, and "
"``unionagg()`` aggregate methods are deprecated and should be replaced by "
"their function-based aggregate equivalents (``Collect``, ``Extent``, "
"``Extent3D``, ``MakeLine``, and ``Union``)."
msgstr ""
"``collect()``, ``extent()``, ``extent3d()``, ``make_line()``, 和 "
"``unionagg()`` 聚合方法已被弃用，应该用它们的基于函数的聚合等效方法"
"（``Collect``、``Extent``、``Extent3D``、``MakeLine`` 和 ``Union``）来替代。"

msgid "Signature of the ``allow_migrate`` router method"
msgstr "``allow_migrate`` 路由方法的签名"

msgid ""
"The signature of the :meth:`allow_migrate` method of database routers has "
"changed from ``allow_migrate(db, model)`` to ``allow_migrate(db, app_label, "
"model_name=None, **hints)``."
msgstr ""
"数据库路由器的 :meth:`allow_migrate` 方法的签名已从 ``allow_migrate(db, "
"model)`` 更改为 ``allow_migrate(db, app_label, model_name=None, **hints)``。"

msgid ""
"When ``model_name`` is set, the value that was previously given through the "
"``model`` positional argument may now be found inside the ``hints`` "
"dictionary under the key ``'model'``."
msgstr ""
"当设置了 ``model_name`` 时，之前通过 ``model`` 位置参数传递的值现在可以在 "
"``hints`` 字典中的键 ``'model'`` 下找到。"

msgid ""
"After switching to the new signature the router will also be called by the :"
"class:`~django.db.migrations.operations.RunPython` and :class:`~django.db."
"migrations.operations.RunSQL` operations."
msgstr ""
"在切换到新签名后，路由器还将被 :class:`~django.db.migrations.operations."
"RunPython` 和 :class:`~django.db.migrations.operations.RunSQL` 操作调用。"

msgid "Features removed in 1.8"
msgstr "在 1.8 版本中移除的功能"

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 1.8. See :ref:`deprecated-features-1.6` for details, "
"including how to remove usage of these features."
msgstr ""
"这些特性已经到达了它们的弃用周期的尽头，并在 Django 1.8 中被移除。有关详细信"
"息，包括如何删除对这些特性的使用，请参阅 :ref:`deprecated-features-1.6`。"

msgid "``django.contrib.comments`` is removed."
msgstr "``django.contrib.comments`` 已被移除。"

msgid "The following transaction management APIs are removed:"
msgstr "以下事务管理 API 已被移除："

msgid "``TransactionMiddleware``"
msgstr "``TransactionMiddleware``"

msgid ""
"the decorators and context managers ``autocommit``, ``commit_on_success``, "
"and ``commit_manually``, defined in ``django.db.transaction``"
msgstr ""
"在 ``django.db.transaction`` 中定义的装饰器和上下文管理器 ``autocommit``, "
"``commit_on_success``, 和 ``commit_manually`` 已被移除。"

msgid ""
"the functions ``commit_unless_managed`` and ``rollback_unless_managed``, "
"also defined in ``django.db.transaction``"
msgstr ""
"在 ``django.db.transaction`` 中定义的函数 ``commit_unless_managed`` 和 "
"``rollback_unless_managed`` 也已被移除。"

msgid ""
"The :ttag:`cycle` and :ttag:`firstof` template tags auto-escape their "
"arguments."
msgstr ":ttag:`cycle` 和 :ttag:`firstof` 模板标签会自动转义其参数。"

msgid "The ``SEND_BROKEN_LINK_EMAILS`` setting is removed."
msgstr "``SEND_BROKEN_LINK_EMAILS`` 设置已被移除。"

msgid "``django.middleware.doc.XViewMiddleware`` is removed."
msgstr "``django.middleware.doc.XViewMiddleware`` 已被移除。"

msgid "The ``Model._meta.module_name`` alias is removed."
msgstr "``Model._meta.module_name`` 别名已被移除。"

msgid ""
"The backward compatible shims introduced to rename ``get_query_set`` and "
"similar queryset methods are removed. This affects the following classes: "
"``BaseModelAdmin``, ``ChangeList``, ``BaseCommentNode``, "
"``GenericForeignKey``, ``Manager``, ``SingleRelatedObjectDescriptor`` and "
"``ReverseSingleRelatedObjectDescriptor``."
msgstr ""
"已经移除了为了重命名 ``get_query_set`` 和类似的查询集方法而引入的向后兼容的包"
"装。这会影响以下类：``BaseModelAdmin``、``ChangeList``、``BaseCommentNode``、"
"``GenericForeignKey``、``Manager``、``SingleRelatedObjectDescriptor`` 和 "
"``ReverseSingleRelatedObjectDescriptor``。"

msgid ""
"The backward compatible shims introduced to rename the attributes "
"``ChangeList.root_query_set`` and ``ChangeList.query_set`` are removed."
msgstr ""
"已经移除了为了重命名属性 ``ChangeList.root_query_set`` 和 ``ChangeList."
"query_set`` 而引入的向后兼容的包装。"

msgid ""
"``django.views.defaults.shortcut`` and ``django.conf.urls.shortcut`` are "
"removed."
msgstr ""
"``django.views.defaults.shortcut`` 和 ``django.conf.urls.shortcut`` 已被移"
"除。"

msgid "Support for the Python Imaging Library (PIL) module is removed."
msgstr "不再支持 Python Imaging Library (PIL) 模块。"

msgid "The following private APIs are removed:"
msgstr "以下私有 API 已被移除："

msgid "``django.db.backend``"
msgstr "``django.db.backend``"

msgid "``django.db.close_connection()``"
msgstr "``django.db.close_connection()``"

msgid "``django.db.backends.creation.BaseDatabaseCreation.set_autocommit()``"
msgstr "``django.db.backends.creation.BaseDatabaseCreation.set_autocommit()``"

msgid "``django.db.transaction.is_managed()``"
msgstr "``django.db.transaction.is_managed()``"

msgid "``django.db.transaction.managed()``"
msgstr "``django.db.transaction.managed()``"

msgid "``django.forms.widgets.RadioInput`` is removed."
msgstr "``django.forms.widgets.RadioInput`` 已被移除。"

msgid ""
"The module ``django.test.simple`` and the class ``django.test.simple."
"DjangoTestSuiteRunner`` are removed."
msgstr ""
"模块 ``django.test.simple`` 和类 ``django.test.simple."
"DjangoTestSuiteRunner`` 已被移除。"

msgid "The module ``django.test._doctest`` is removed."
msgstr "模块 ``django.test._doctest`` 已被移除。"

msgid ""
"The ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting is removed. This change "
"affects both ``django.middleware.cache.CacheMiddleware`` and ``django."
"middleware.cache.UpdateCacheMiddleware`` despite the lack of a deprecation "
"warning in the latter class."
msgstr ""
"``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` 设置已被移除。这个改变影响了 ``django."
"middleware.cache.CacheMiddleware`` 和 ``django.middleware.cache."
"UpdateCacheMiddleware``，尽管在后者类中没有弃用警告。"

msgid ""
"Usage of the hard-coded *Hold down \"Control\", or \"Command\" on a Mac, to "
"select more than one.* string to override or append to user-provided "
"``help_text`` in forms for ``ManyToMany`` model fields is not performed by "
"Django anymore either at the model or forms layer."
msgstr ""
"Django 不再在模型或表单层面使用硬编码的字符串 *Hold down \"Control\", or "
"\"Command\" on a Mac, to select more than one.* 来覆盖或附加到用户提供的 "
"``ManyToMany`` 模型字段的 ``help_text``。"

msgid ""
"The ``Model._meta.get_(add|change|delete)_permission`` methods are removed."
msgstr "``Model._meta.get_(add|change|delete)_permission`` 方法已被移除。"

msgid ""
"The session key ``django_language`` is no longer read for backwards "
"compatibility."
msgstr "不再读取会话键 ``django_language`` 以保持向后兼容性。"

msgid ""
"Geographic Sitemaps are removed (``django.contrib.gis.sitemaps.views.index`` "
"and ``django.contrib.gis.sitemaps.views.sitemap``)."
msgstr ""
"地理位置 Sitemaps 已被移除（``django.contrib.gis.sitemaps.views.index`` 和 "
"``django.contrib.gis.sitemaps.views.sitemap``）。"

msgid ""
"``django.utils.html.fix_ampersands``, the ``fix_ampersands`` template "
"filter, and ``django.utils.html.clean_html`` are removed."
msgstr ""
"``django.utils.html.fix_ampersands``、``fix_ampersands`` 模板过滤器以及 "
"``django.utils.html.clean_html`` 都已被移除。"

msgid "Django 1.8.1 release notes"
msgstr "Django 1.8.1 版本发行说明"

msgid ""
"Django 1.8.1 fixes several bugs in 1.8 and includes some optimizations in "
"the migrations framework."
msgstr "Django 1.8.1 修复了 1.8 版本中的一些错误，并对迁移框架进行了一些优化。"

msgid ""
"Added support for serializing :class:`~datetime.timedelta` objects in "
"migrations (:ticket:`24566`)."
msgstr ""
"在迁移中添加了对 :class:`~datetime.timedelta` 对象的序列化支持 (:ticket:"
"`24566`)。"

msgid ""
"Restored proper parsing of the :djadmin:`testserver` command's positional "
"arguments (fixture names) (:ticket:`24571`)."
msgstr ""
"已恢复对 :djadmin:`testserver` 命令的位置参数（fixture 名称）进行正确解析 (:"
"ticket:`24571`)。"

msgid ""
"Prevented ``TypeError`` in translation functions ``check_for_language()`` "
"and ``get_language_bidi()`` when translations are deactivated (:ticket:"
"`24569`)."
msgstr ""
"在翻译函数 ``check_for_language()`` 和 ``get_language_bidi()`` 中，在翻译被停"
"用时，防止了 ``TypeError`` (:ticket:`24569`)。"

msgid ""
"Fixed :djadmin:`squashmigrations` command when using :class:`~django.db."
"migrations.operations.SeparateDatabaseAndState` (:ticket:`24278`)."
msgstr ""
"修复了在使用 :class:`~django.db.migrations.operations."
"SeparateDatabaseAndState` 时 :djadmin:`squashmigrations` 命令的问题 (:ticket:"
"`24278`)。"

msgid ""
"Stripped microseconds from ``datetime`` values when using an older version "
"of the MySQLdb DB API driver as it does not support fractional seconds (:"
"ticket:`24584`)."
msgstr ""
"在使用较旧版本的 MySQLdb DB API 驱动程序时，从 ``datetime`` 值中去除了微秒，"
"因为它不支持分数秒 (:ticket:`24584`)。"

msgid ""
"Fixed a migration crash when altering :class:`~django.db.models."
"ManyToManyField`\\s (:ticket:`24513`)."
msgstr ""
"修复了在修改 :class:`~django.db.models.ManyToManyField` 时发生的迁移崩溃问题 "
"(:ticket:`24513`)。"

msgid ""
"Fixed a crash with ``QuerySet.update()`` on foreign keys to one-to-one "
"fields (:ticket:`24578`)."
msgstr ""
"修复了在对外键到一对一字段的情况下使用 ``QuerySet.update()`` 时发生的崩溃问"
"题 (:ticket:`24578`)。"

msgid ""
"Fixed a regression in the model detail view of :mod:`~django.contrib."
"admindocs` when a model has a reverse foreign key relation (:ticket:`24624`)."
msgstr ""
"修复了 :mod:`~django.contrib.admindocs` 的模型详细视图中的一个回归问题，当一"
"个模型具有反向外键关系时 (:ticket:`24624`)。"

msgid ""
"Prevented arbitrary file inclusions in :mod:`~django.contrib.admindocs` (:"
"ticket:`24625`)."
msgstr ""
"防止了在 :mod:`~django.contrib.admindocs` 中的任意文件包含问题 (:ticket:"
"`24625`)。"

msgid ""
"Fixed a crash with ``QuerySet.update()`` on foreign keys to instances with "
"``uuid`` primary keys (:ticket:`24611`)."
msgstr ""
"修复了在对外键到具有 ``uuid`` 主键的实例使用 ``QuerySet.update()`` 时发生的崩"
"溃问题 (:ticket:`24611`)。"

msgid ""
"Fixed database introspection with SQLite 3.8.9 (released April 8, 2015) (:"
"ticket:`24637`)."
msgstr ""
"修复了与 SQLite 3.8.9（发布于 2015 年 4 月 8 日）的数据库内省问题 (:ticket:"
"`24637`)。"

msgid ""
"Updated ``urlpatterns`` examples generated by :djadmin:`startproject` to "
"remove usage of referencing views by dotted path in ``django.conf.urls."
"url()`` which is deprecated in Django 1.8 (:ticket:`24635`)."
msgstr ""
"更新了由 :djadmin:`startproject` 生成的 ``urlpatterns`` 示例，移除了在 "
"``django.conf.urls.url()`` 中使用点路径引用视图的用法，该用法在 Django 1.8 中"
"已被弃用 (:ticket:`24635`)。"

msgid ""
"Fixed queries where an expression was referenced in ``order_by()``, but "
"wasn't part of the select clause. An example query is ``qs."
"annotate(foo=F('field')).values('pk').order_by('foo'))`` (:ticket:`24615`)."
msgstr ""
"修复了在查询中引用了 ``order_by()`` 中的表达式，但该表达式不是选择子句的一部"
"分的问题。一个示例查询是 ``qs.annotate(foo=F('field')).values('pk')."
"order_by('foo'))`` (:ticket:`24615`)。"

msgid "Fixed a database table name quoting regression (:ticket:`24605`)."
msgstr "修复了一个数据库表名引用的回归问题 (:ticket:`24605`)。"

msgid ""
"Prevented the loss of ``null``/``not null`` column properties during field "
"alteration of MySQL databases (:ticket:`24595`)."
msgstr ""
"防止了在对 MySQL 数据库字段进行更改时丢失 ``null``/``not null`` 列属性 (:"
"ticket:`24595`)。"

msgid ""
"Fixed JavaScript path of ``contrib.admin``’s related field widget when using "
"alternate static file storages (:ticket:`24655`)."
msgstr ""
"修复了在使用替代静态文件存储时，``contrib.admin`` 的关联字段小部件的 "
"JavaScript 路径的问题 (:ticket:`24655`)。"

msgid ""
"Fixed a migration crash when adding new relations to models (:ticket:"
"`24573`)."
msgstr "修复了在向模型添加新关系时发生迁移崩溃的问题 (:ticket:`24573`)。"

msgid ""
"Fixed a migration crash when applying migrations with model managers on "
"Python 3 that were generated on Python 2 (:ticket:`24701`)."
msgstr ""
"修复了在 Python 3 上应用在 Python 2 上生成的具有模型管理器的迁移时发生的崩溃"
"问题 (:ticket:`24701`)。"

msgid ""
"Restored the ability to use iterators as queryset filter arguments (:ticket:"
"`24719`)."
msgstr "恢复了将迭代器用作查询集过滤器参数的能力 (:ticket:`24719`)。"

msgid ""
"Fixed a migration crash when renaming the target model of a many-to-many "
"relation (:ticket:`24725`)."
msgstr ""
"修复了在重命名多对多关系的目标模型时发生迁移崩溃的问题 (:ticket:`24725`)。"

msgid ""
"Removed flushing of the test database with :option:`test --keepdb`, which "
"prevented apps with data migrations from using the option (:ticket:`24729`)."
msgstr ""
"移除了使用 :option:`test --keepdb` 时清空测试数据库的操作，这样可以使具有数据"
"迁移的应用程序使用该选项 (:ticket:`24729`)。"

msgid "Fixed ``makemessages`` crash in some locales (:ticket:`23271`)."
msgstr ""
"修复了在某些区域设置下发生的 ``makemessages`` 崩溃问题 (:ticket:`23271`)。"

msgid ""
"Fixed help text positioning of ``contrib.admin`` fields that use the "
"``ModelAdmin.filter_horizontal`` and ``filter_vertical`` options (:ticket:"
"`24676`)."
msgstr ""
"修复了使用 ``ModelAdmin.filter_horizontal`` 和 ``filter_vertical`` 选项的 "
"``contrib.admin`` 字段的帮助文本位置问题 (:ticket:`24676`)。"

msgid ""
"Fixed ``AttributeError: function 'GDALAllRegister' not found`` error when "
"initializing ``contrib.gis`` on Windows."
msgstr ""
"修复了在 Windows 上初始化 ``contrib.gis`` 时出现的 ``AttributeError: "
"function 'GDALAllRegister' not found`` 错误。"

msgid "Optimizations"
msgstr "优化"

msgid ""
"Changed ``ModelState`` to deepcopy fields instead of deconstructing and "
"reconstructing (:ticket:`24591`). This speeds up the rendering of model "
"states and reduces memory usage when running :djadmin:`manage.py migrate "
"<migrate>` (although other changes in this release may negate any "
"performance benefits)."
msgstr ""
"将 ``ModelState`` 更改为深拷贝字段，而不是拆解和重构字段 (:ticket:`24591`)。"
"这加速了模型状态的渲染，并在运行 :djadmin:`manage.py migrate <migrate>` 时减"
"少了内存使用（尽管此版本中的其他更改可能会抵消任何性能优势）。"

msgid "Django 1.8.10 release notes"
msgstr "Django 1.8.10 版本发行说明"

msgid "*March 1, 2016*"
msgstr "*2016 年 3 月 1 日*"

msgid "Django 1.8.10 fixes two security issues and several bugs in 1.8.9."
msgstr "Django 1.8.10 修复了 1.8.9 版本中的两个安全问题和一些错误。"

msgid ""
"CVE-2016-2512: Malicious redirect and possible XSS attack via user-supplied "
"redirect URLs containing basic auth"
msgstr ""
"CVE-2016-2512 ：通过包含基本身份验证的用户提供的重定向 URL，可能存在恶意重定"
"向和 XSS 攻击。"

msgid ""
"Django relies on user input in some cases (e.g. ``django.contrib.auth.views."
"login()`` and :doc:`i18n </topics/i18n/index>`) to redirect the user to an "
"\"on success\" URL. The security check for these redirects (namely ``django."
"utils.http.is_safe_url()``) considered some URLs with basic authentication "
"credentials \"safe\" when they shouldn't be."
msgstr ""
"Django 在某些情况下（例如 ``django.contrib.auth.views.login()`` 和 :doc:"
"`i18n </topics/i18n/index>``）依赖用户输入来将用户重定向到“成功” URL。用于这"
"些重定向的安全检查（即 ``django.utils.http.is_safe_url()``）在考虑到某些具有"
"基本身份验证凭据的 URL 时将其视为“安全”，但它们实际上不应该被视为安全。"

msgid ""
"For example, a URL like ``http://mysite.example.com\\@attacker.com`` would "
"be considered safe if the request's host is ``http://mysite.example.com``, "
"but redirecting to this URL sends the user to ``attacker.com``."
msgstr ""
"例如，如果请求的主机是 ``http://mysite.example.com``，那么类似 ``http://"
"mysite.example.com\\@attacker.com`` 的 URL 将被视为安全，但重定向到此 URL 会"
"将用户发送到 ``attacker.com``。这是一个潜在的安全风险。"

msgid ""
"CVE-2016-2513: User enumeration through timing difference on password hasher "
"work factor upgrade"
msgstr "CVE-2016-2513 ：通过密码哈希器工作因子升级的时间差异进行用户枚举。"

msgid ""
"In each major version of Django since 1.6, the default number of iterations "
"for the ``PBKDF2PasswordHasher`` and its subclasses has increased. This "
"improves the security of the password as the speed of hardware increases, "
"however, it also creates a timing difference between a login request for a "
"user with a password encoded in an older number of iterations and login "
"request for a nonexistent user (which runs the default hasher's default "
"number of iterations since Django 1.6)."
msgstr ""
"自从 Django 1.6 版本以来，``PBKDF2PasswordHasher`` 及其子类的默认迭代次数已经"
"增加。这提高了密码的安全性，因为硬件的速度增加，但它也在登录请求中创建了一个"
"时序差异，对于使用旧迭代次数编码的密码的用户和不存在用户的登录请求（从 "
"Django 1.6 开始运行默认哈希的默认迭代次数）之间存在时序差异。这可能会对安全性"
"产生一定的影响。"

msgid ""
"This only affects users who haven't logged in since the iterations were "
"increased. The first time a user logs in after an iterations increase, their "
"password is updated with the new iterations and there is no longer a timing "
"difference."
msgstr ""
"这只影响那些自增加迭代次数以来尚未登录的用户。当用户在迭代次数增加后首次登录"
"时，他们的密码将使用新的迭代次数进行更新，因此不再存在时间差异。"

msgid ""
"The new ``BasePasswordHasher.harden_runtime()`` method allows hashers to "
"bridge the runtime gap between the work factor (e.g. iterations) supplied in "
"existing encoded passwords and the default work factor of the hasher. This "
"method is implemented for ``PBKDF2PasswordHasher``  and "
"``BCryptPasswordHasher``. The number of rounds for the latter hasher hasn't "
"changed since Django 1.4, but some projects may subclass it and increase the "
"work factor as needed."
msgstr ""
"新的 ``BasePasswordHasher.harden_runtime()`` 方法允许哈希算法在现有编码密码中"
"提供的工作因素（例如迭代次数）和哈希算法的默认工作因素之间弥合运行时差距。这"
"个方法已经在 ``PBKDF2PasswordHasher`` 和 ``BCryptPasswordHasher`` 中实现。后"
"者的哈希算法自从 Django 1.4 以来并没有改变，但某些项目可能会对其进行子类化，"
"并根据需要增加工作因素。"

msgid ""
"A warning will be emitted for any :ref:`third-party password hashers that "
"don't implement <write-your-own-password-hasher>` a ``harden_runtime()`` "
"method."
msgstr ""
"对于任何未实现 ``harden_runtime()`` 方法的 :ref:`第三方密码哈希算法 <write-"
"your-own-password-hasher>`，将发出警告。"

msgid ""
"If you have different password hashes in your database (such as SHA1 hashes "
"from users who haven't logged in since the default hasher switched to PBKDF2 "
"in Django 1.4), the timing difference on a login request for these users may "
"be even greater and this fix doesn't remedy that difference (or any "
"difference when changing hashers). You may be able to :ref:`upgrade those "
"hashes <wrapping-password-hashers>` to prevent a timing attack for that case."
msgstr ""
"如果在数据库中有不同的密码哈希值（例如，自从 Django 1.4 开始默认哈希算法切换"
"到 PBKDF2 后从未登录过的用户的 SHA1 哈希值），则这些用户的登录请求中的时序差"
"异可能会更大，而此修复不会解决这种差异（或在更改哈希算法时的任何差异）。您可"
"以尝试 :ref:`升级这些哈希值 <wrapping-password-hashers>`，以防止这种情况下的"
"时序攻击。"

msgid ""
"Fixed a crash on PostgreSQL that prevented using ``TIME_ZONE=None`` and "
"``USE_TZ=False`` (:ticket:`26177`)."
msgstr ""
"修复了在 PostgreSQL 上的崩溃问题，该问题阻止了使用 ``TIME_ZONE=None`` 和 "
"``USE_TZ=False`` (:ticket:`26177`)。"

msgid ""
"Added system checks for query name clashes of hidden relationships (:ticket:"
"`26162`)."
msgstr "添加了系统检查来检查隐藏关系的查询名称冲突 (:ticket:`26162`)。"

msgid ""
"Made ``forms.FileField`` and ``utils.translation.lazy_number()`` picklable (:"
"ticket:`26212`)."
msgstr ""
"使 ``forms.FileField`` 和 ``utils.translation.lazy_number()`` 可以被序列化 (:"
"ticket:`26212`)。"

msgid ""
"Fixed :class:`~django.contrib.postgres.fields.RangeField` and :class:"
"`~django.contrib.postgres.fields.ArrayField` serialization with ``None`` "
"values (:ticket:`26215`)."
msgstr ""
"修复了在使用 ``None`` 值时的 :class:`~django.contrib.postgres.fields."
"RangeField` 和 :class:`~django.contrib.postgres.fields.ArrayField` 序列化问"
"题 (:ticket:`26215`)。"

msgid ""
"Reallowed dashes in top-level domain names of URLs checked by "
"``URLValidator`` to fix a regression in Django 1.8 (:ticket:`26204`)."
msgstr ""
"允许了 ``URLValidator`` 检查的 URL 顶级域名中的连字符，以修复 Django 1.8 中的"
"一个回归问题 (:ticket:`26204`)。"

msgid "Fixed ``BoundField`` to reallow slices of subwidgets (:ticket:`26267`)."
msgstr "修复了 ``BoundField`` 以重新允许对子部件进行切片 (:ticket:`26267`)。"

msgid ""
"Prevented ``ContentTypeManager`` instances from sharing their cache (:ticket:"
"`26286`)."
msgstr "防止了 ``ContentTypeManager`` 实例共享其缓存 (:ticket:`26286`)。"

msgid "Django 1.8.11 release notes"
msgstr "Django 1.8.11 版本发行说明"

msgid "*March 5, 2016*"
msgstr "*2016 年 3 月 5 日*"

msgid ""
"Django 1.8.11 fixes a regression on Python 2 in the 1.8.10 security release "
"where ``utils.http.is_safe_url()`` crashes on bytestring URLs (:ticket:"
"`26308`)."
msgstr ""
"Django 1.8.11 修复了在 Python 2 中的 1.8.10 安全版本中的一个回归问题，即 "
"``utils.http.is_safe_url()`` 在字节串 URL 上崩溃 (:ticket:`26308`)。"

msgid "Django 1.8.12 release notes"
msgstr "Django 1.8.12 版本发行说明"

msgid "*April 1, 2016*"
msgstr "*2016 年 4 月 1 日*"

msgid "Django 1.8.12 fixes several bugs in 1.8.11."
msgstr "Django 1.8.12 修复了 1.8.11 版本中的一些错误。"

msgid ""
"Made ``MultiPartParser`` ignore filenames that normalize to an empty string "
"to fix crash in ``MemoryFileUploadHandler`` on specially crafted user input "
"(:ticket:`26325`)."
msgstr ""
"使 ``MultiPartParser`` 忽略将规范化为空字符串的文件名，以修复在特殊构造的用户"
"输入上导致 ``MemoryFileUploadHandler`` 崩溃的问题 (:ticket:`26325`)。"

msgid ""
"Fixed data loss on SQLite where ``DurationField`` values with fractional "
"seconds could be saved as ``None`` (:ticket:`26324`)."
msgstr ""
"修复了在 SQLite 上的数据丢失问题，其中带有分数秒的 ``DurationField`` 值可能会"
"保存为 ``None`` (:ticket:`26324`)。"

msgid ""
"Restored the functionality of the admin's ``raw_id_fields`` in "
"``list_editable`` (:ticket:`26387`)."
msgstr ""
"恢复了管理员中 ``list_editable`` 中 ``raw_id_fields`` 的功能 (:ticket:"
"`26387`)。"

msgid "Django 1.8.13 release notes"
msgstr "Django 1.8.13 版本发行说明"

msgid "*May 2, 2016*"
msgstr "*2016 年 5 月 2 日*"

msgid "Django 1.8.13 fixes several bugs in 1.8.12."
msgstr "Django 1.8.13 修复了 1.8.12 中的一些错误。"

msgid ""
"Fixed ``TimeField`` microseconds round-tripping on MySQL and SQLite (:ticket:"
"`26498`)."
msgstr ""
"修复了在 MySQL 和 SQLite 上的 ``TimeField`` 微秒往返问题 (:ticket:`26498`)。"

msgid ""
"Restored conversion of an empty string to null when saving values of "
"``GenericIPAddressField`` on SQLite and MySQL (:ticket:`26557`)."
msgstr ""
"恢复了在 SQLite 和 MySQL 上保存 ``GenericIPAddressField`` 值时将空字符串转换"
"为 null 的功能 (:ticket:`26557`)。"

msgid "Django 1.8.14 release notes"
msgstr "Django 1.8.14 版本发行说明"

msgid "*July 18, 2016*"
msgstr "*2016 年 7 月 18 日*"

msgid "Django 1.8.14 fixes a security issue and a bug in 1.8.13."
msgstr "Django 1.8.14 修复了 1.8.13 版本中的一个安全问题和一个错误。"

msgid "XSS in admin's add/change related popup"
msgstr "管理员的添加/更改相关弹出窗口中存在 XSS 漏洞。"

msgid ""
"Unsafe usage of JavaScript's ``Element.innerHTML`` could result in XSS in "
"the admin's add/change related popup. ``Element.textContent`` is now used to "
"prevent execution of the data."
msgstr ""
"不安全地使用 JavaScript 的 ``Element.innerHTML`` 可能会导致在管理员的添加/修"
"改相关弹出窗口中发生 XSS。现在使用 ``Element.textContent`` 来防止数据的执行。"

msgid ""
"The debug view also used ``innerHTML``. Although a security issue wasn't "
"identified there, out of an abundance of caution it's also updated to use "
"``textContent``."
msgstr ""
"调试视图也使用了 ``innerHTML``。尽管在那里没有识别出安全问题，但为了谨慎起"
"见，它也被更新为使用 ``textContent``。"

msgid ""
"Fixed missing ``varchar/text_pattern_ops`` index on ``CharField`` and "
"``TextField`` respectively when using ``AddField`` on PostgreSQL (:ticket:"
"`26889`)."
msgstr ""
"在 PostgreSQL 上使用 ``AddField`` 时，修复了 ``CharField`` 和 ``TextField`` "
"上缺少的 ``varchar/text_pattern_ops`` 索引 (:ticket:`26889`)。"

msgid "Django 1.8.15 release notes"
msgstr "Django 1.8.15 版本发行说明"

msgid "*September 26, 2016*"
msgstr "*2016 年 9 月 26 日*"

msgid "Django 1.8.15 fixes a security issue in 1.8.14."
msgstr "Django 1.8.15 修复了 1.8.14 版本中的一个安全问题。"

msgid "CSRF protection bypass on a site with Google Analytics"
msgstr "在使用 Google Analytics 的网站中存在跨站请求伪造（CSRF）保护绕过。"

msgid ""
"An interaction between Google Analytics and Django's cookie parsing could "
"allow an attacker to set arbitrary cookies leading to a bypass of CSRF "
"protection."
msgstr ""
"Google Analytics 和 Django 的 cookie 解析之间的交互可能允许攻击者设置任意的 "
"Cookie，从而绕过 CSRF 保护。"

msgid ""
"The parser for ``request.COOKIES`` is simplified to better match the "
"behavior of browsers and to mitigate this attack. ``request.COOKIES`` may "
"now contain cookies that are invalid according to :rfc:`6265` but are "
"possible to set via ``document.cookie``."
msgstr ""
"``request.COOKIES`` 的解析器被简化，以更好地匹配浏览器的行为并减轻此攻击。"
"``request.COOKIES`` 现在可以包含根据 :rfc:`6265` 无效但可以通过 ``document."
"cookie`` 设置的 cookie。"

msgid "Django 1.8.16 release notes"
msgstr "Django 1.8.16 版本发行说明"

msgid "Django 1.8.16 fixes two security issues in 1.8.15."
msgstr "Django 1.8.16 修复了 1.8.15 版本中的两个安全问题。"

msgid "Django 1.8.17 release notes"
msgstr "Django 1.8.17 版本发行说明"

msgid "Django 1.8.17 fixes a regression in 1.8.16."
msgstr "Django 1.8.17 修复了 1.8.16 版本中的一个回归问题。"

msgid "Django 1.8.18 release notes"
msgstr "Django 1.8.18 版本发行说明"

msgid "Django 1.8.18 fixes two security issues in 1.8.17."
msgstr "Django 1.8.18 修复了 1.8.17 版本中的两个安全问题。"

msgid "Django 1.8.19 release notes"
msgstr "Django 1.8.19 版本发行说明"

msgid "Django 1.8.19 fixes two security issues in 1.18.18."
msgstr "Django 1.8.19 修复了 1.8.18 版本中的两个安全问题。"

msgid ""
"The ``django.utils.html.urlize()`` function was extremely slow to evaluate "
"certain inputs due to a catastrophic backtracking vulnerability in a regular "
"expression. The ``urlize()`` function is used to implement the ``urlize`` "
"and ``urlizetrunc`` template filters, which were thus vulnerable."
msgstr ""
"由于正则表达式中的灾难性回溯漏洞，``django.utils.html.urlize()`` 函数在评估某"
"些输入时极其缓慢。``urlize()`` 函数用于实现 ``urlize`` 和 ``urlizetrunc`` 模"
"板过滤器，因此它们也容易受到漏洞影响。"

msgid ""
"The problematic regular expression is replaced with parsing logic that "
"behaves similarly."
msgstr "有问题的正则表达式被替换为行为类似的解析逻辑。"

msgid "Django 1.8.2 release notes"
msgstr "Django 1.8.2 版本发行说明"

msgid "*May 20, 2015*"
msgstr "*2015 年 5 月 20 日*"

msgid "Django 1.8.2 fixes a security issue and several bugs in 1.8.1."
msgstr "Django 1.8.2 修复了 1.8.1 中的一个安全问题和几个错误。"

msgid "Fixed session flushing in the ``cached_db`` backend"
msgstr "修复了 ``cached_db`` 后端中的会话刷新问题"

msgid ""
"A change to ``session.flush()`` in the ``cached_db`` session backend in "
"Django 1.8 mistakenly sets the session key to an empty string rather than "
"``None``. An empty string is treated as a valid session key and the session "
"cookie is set accordingly. Any users with an empty string in their session "
"cookie will use the same session store. ``session.flush()`` is called by "
"``django.contrib.auth.logout()`` and, more seriously, by ``django.contrib."
"auth.login()`` when a user switches accounts. If a user is logged in and "
"logs in again to a different account (without logging out) the session is "
"flushed to avoid reuse. After the session is flushed (and its session key "
"becomes ``''``) the account details are set on the session and the session "
"is saved. Any users with an empty string in their session cookie will now be "
"logged into that account."
msgstr ""
"Django 1.8 中对于 ``cached_db`` 会话后端中的 ``session.flush()`` 的更改错误地"
"将会话键设置为空字符串而不是 ``None``。空字符串被视为有效的会话键，并且会相应"
"地设置会话 cookie。任何在其会话 cookie 中具有空字符串的用户都将使用相同的会话"
"存储。``session.flush()`` 被 ``django.contrib.auth.logout()`` 调用，并且更严"
"重的是，当用户切换帐户时也会被 ``django.contrib.auth.login()`` 调用。如果用户"
"已登录并且再次登录到不同的帐户（而不注销），则会刷新会话以避免重复使用。在会"
"话被刷新后（其会话键变为 ``''``），帐户详细信息会设置在会话中，并且会话会被保"
"存。任何在其会话 cookie 中具有空字符串的用户现在将登录到该帐户。"

msgid "Fixed check for template engine alias uniqueness (:ticket:`24685`)."
msgstr "修复了对模板引擎别名唯一性的检查问题 (:ticket:`24685`)。"

msgid ""
"Fixed crash when reusing the same ``Case`` instance in a query (:ticket:"
"`24752`)."
msgstr ""
"修复了在查询中重复使用相同的 ``Case`` 实例时发生崩溃的问题 (:ticket:"
"`24752`)。"

msgid ""
"Corrected join promotion for ``Case`` expressions. For example, annotating a "
"query with a  ``Case`` expression could unexpectedly filter out results (:"
"ticket:`24766`)."
msgstr ""
"修正了 ``Case`` 表达式的联接升级。例如，使用 ``Case`` 表达式对查询进行注释可"
"能会意外地过滤结果 (:ticket:`24766`)。"

msgid ""
"Fixed negated ``Q`` objects in expressions. Cases like "
"``Case(When(~Q(friends__age__lte=30)))`` tried to generate a subquery which "
"resulted in a crash (:ticket:`24705`)."
msgstr ""
"修复了表达式中否定的 ``Q`` 对象。例如，像 "
"``Case(When(~Q(friends__age__lte=30)))`` 这样的情况试图生成一个子查询，导致崩"
"溃 (:ticket:`24705`)。"

msgid ""
"Fixed incorrect GROUP BY clause generation on MySQL when the query's model "
"has a self-referential foreign key (:ticket:`24748`)."
msgstr ""
"修复了当查询的模型具有自引用外键时，在 MySQL 上生成不正确的 GROUP BY 子句的问"
"题 (:ticket:`24748`)。"

msgid ""
"Implemented ``ForeignKey.get_db_prep_value()`` so that ``ForeignKey``\\s "
"pointing to :class:`~django.db.models.UUIDField` and inheritance on models "
"with ``UUIDField`` primary keys work correctly (:ticket:`24698`, :ticket:"
"`24712`)."
msgstr ""
"实现了 ``ForeignKey.get_db_prep_value()``，使得指向 :class:`~django.db."
"models.UUIDField` 的 ``ForeignKey`` 以及具有 ``UUIDField`` 字段主键的模型之间"
"的继承可以正确工作（:ticket:`24698`,`:ticket:`24712`）。"

msgid "Fixed ``isnull`` lookup for ``HStoreField`` (:ticket:`24751`)."
msgstr "修复了 ``HStoreField`` 的 ``isnull`` 查询 (:ticket:`24751`)。"

msgid ""
"Fixed a MySQL crash when a migration removes a combined index "
"( ``unique_together`` or ``index_together``) containing a foreign key (:"
"ticket:`24757`)."
msgstr ""
"修复了在迁移中删除包含外键的联合索引（``unique_together`` 或 "
"``index_together``）时在 MySQL 上发生崩溃的问题 (:ticket:`24757`)。"

msgid ""
"Fixed session cookie deletion when using :setting:`SESSION_COOKIE_DOMAIN` (:"
"ticket:`24799`)."
msgstr ""
"修复了在使用 :setting:`SESSION_COOKIE_DOMAIN` 时删除会话 cookie 的问题 (:"
"ticket:`24799`)。"

msgid ""
"On PostgreSQL, when no access is granted for the ``postgres`` database, "
"Django now falls back to the default database when it normally requires a "
"\"no database\" connection (:ticket:`24791`)."
msgstr ""
"在 PostgreSQL 上，当未授予 ``postgres`` 数据库的访问权限时，Django 现在会在通"
"常需要“无数据库”连接时回退到默认数据库 (:ticket:`24791`)。"

msgid ""
"Fixed display of ``contrib.admin``’s ``ForeignKey`` widget when it's used in "
"a row with other fields (:ticket:`24784`)."
msgstr ""
"修复了在与其他字段一起使用时，``contrib.admin`` 的 ``ForeignKey`` 小部件的显"
"示问题 (:ticket:`24784`)。"

msgid "Django 1.8.3 release notes"
msgstr "Django 1.8.3 版本发行说明"

msgid "Django 1.8.3 fixes several security issues and bugs in 1.8.2."
msgstr "Django 1.8.3 修复了 1.8.2 中的几个安全问题和错误。"

msgid ""
"Also, ``django.utils.deprecation.RemovedInDjango20Warning`` was renamed to "
"``RemovedInDjango110Warning`` as the version roadmap was revised to 1.9, "
"1.10, 1.11 (LTS), 2.0 (drops Python 2 support). For backwards compatibility, "
"``RemovedInDjango20Warning`` remains as an importable alias."
msgstr ""
"此外，``django.utils.deprecation.RemovedInDjango20Warning`` 已被重命名为 "
"``RemovedInDjango110Warning``，因为版本规划已经修订为 1.9、1.10、1.11"
"（LTS）、2.0（不再支持 Python 2）。为了向后兼容，"
"``RemovedInDjango20Warning`` 仍然可以作为可导入的别名使用。"

msgid "Denial-of-service possibility in URL validation"
msgstr "URL 验证中的拒绝服务漏洞可能性。"

msgid ""
":class:`~django.core.validators.URLValidator` included a regular expression "
"that was extremely slow to evaluate against certain invalid inputs. This "
"regular expression has been simplified and optimized."
msgstr ""
":class:`~django.core.validators.URLValidator` 包含一个对某些无效输入极其缓慢"
"的正则表达式进行评估的问题。现在已简化和优化了这个正则表达式。"

msgid ""
"Fixed ``BaseRangeField.prepare_value()`` to use each ``base_field``’s "
"``prepare_value()`` method (:ticket:`24841`)."
msgstr ""
"修复了 ``BaseRangeField.prepare_value()`` 以使用每个 ``base_field`` 的 "
"``prepare_value()`` 方法 (:ticket:`24841`)。"

msgid ""
"Fixed crash during :djadmin:`makemigrations` if a migrations module either "
"is missing ``__init__.py`` or is a file (:ticket:`24848`)."
msgstr ""
"修复了在执行 :djadmin:`makemigrations` 时出现的崩溃问题，如果迁移模块缺少 "
"``__init__.py`` 或是一个文件 (:ticket:`24848`)。"

msgid ""
"Fixed ``QuerySet.exists()`` returning incorrect results after annotation "
"with ``Count()`` (:ticket:`24835`)."
msgstr ""
"修复了在使用 ``Count()`` 注释后，``QuerySet.exists()`` 返回不正确的结果 (:"
"ticket:`24835`)。"

msgid "Corrected ``HStoreField.has_changed()`` (:ticket:`24844`)."
msgstr "修正了 ``HStoreField.has_changed()`` (:ticket:`24844`)。"

msgid ""
"Reverted an optimization to the CSRF template context processor which caused "
"a regression (:ticket:`24836`)."
msgstr ""
"撤销了 CSRF 模板上下文处理器的优化，因为它导致了一个回归问题 (:ticket:"
"`24836`)。"

msgid ""
"Fixed a regression which caused template context processors to overwrite "
"variables set on a ``RequestContext`` after it's created (:ticket:`24847`)."
msgstr ""
"修复了一个导致模板上下文处理器在 ``RequestContext`` 创建后覆盖设置的变量的回"
"归问题 (:ticket:`24847`)。"

msgid ""
"Fixed a crash when using a reverse one-to-one relation in ``ModelAdmin."
"list_display`` (:ticket:`24851`)."
msgstr ""
"修复了在 ``ModelAdmin.list_display`` 中使用反向一对一关系时发生崩溃的问题 (:"
"ticket:`24851`)。"

msgid ""
"Fixed quoting of SQL when renaming a field to ``AutoField`` in PostgreSQL (:"
"ticket:`24892`)."
msgstr ""
"修复了在 PostgreSQL 中将字段重命名为 ``AutoField`` 时 SQL 引用的问题 (:"
"ticket:`24892`)。"

msgid ""
"Fixed lack of unique constraint when changing a field from "
"``primary_key=True`` to ``unique=True`` (:ticket:`24893`)."
msgstr ""
"修复了从 ``primary_key=True`` 更改字段为 ``unique=True`` 时缺少唯一约束的问"
"题 (:ticket:`24893`)。"

msgid ""
"Fixed queryset pickling when using ``prefetch_related()`` after deleting "
"objects (:ticket:`24831`)."
msgstr ""
"修复了在删除对象后使用 ``prefetch_related()`` 时的查询集 pickling 问题 (:"
"ticket:`24831`)。"

msgid ""
"Allowed using ``choices`` longer than 1 day with ``DurationField`` (:ticket:"
"`24897`)."
msgstr ""
"允许在 ``DurationField`` 中使用长于 1 天的 ``choices`` (:ticket:`24897`)。"

msgid ""
"Fixed a crash when loading squashed migrations from two apps with a "
"dependency between them, where the dependent app's replaced migrations are "
"partially applied (:ticket:`24895`)."
msgstr ""
"修复了在加载两个具有依赖关系的应用程序的压缩迁移时发生崩溃的问题，在这种情况"
"下，受依赖应用程序替换的迁移部分被应用 (:ticket:`24895`)。"

msgid ""
"Fixed recording of applied status for squashed (replacement) migrations (:"
"ticket:`24628`)."
msgstr "修复了对已应用状态的压缩（替代）迁移的记录问题 (:ticket:`24628`)。"

msgid ""
"Fixed queryset annotations when using ``Case`` expressions with "
"``exclude()`` (:ticket:`24833`)."
msgstr ""
"修复了在使用 ``Case`` 表达式与 ``exclude()`` 时的查询集注释问题 (:ticket:"
"`24833`)。"

msgid ""
"Corrected join promotion for multiple ``Case`` expressions. Annotating a "
"query with multiple  ``Case`` expressions could unexpectedly filter out "
"results (:ticket:`24924`)."
msgstr ""
"修正了多个 ``Case`` 表达式的联接升级。在查询中使用多个 ``Case`` 表达式进行注"
"释可能会意外地过滤掉结果 (:ticket:`24924`)。"

msgid "Fixed usage of transforms in subqueries (:ticket:`24744`)."
msgstr "修复了在子查询中使用 transforms 的问题 (:ticket:`24744`)。"

msgid ""
"Provided better backwards compatibility for the ``verbosity`` argument in "
"``optparse`` management commands by casting it to an integer (:ticket:"
"`24769`)."
msgstr ""
"通过将 ``optparse`` 管理命令中的 ``verbosity`` 参数转换为整数，提供了更好的向"
"后兼容性 (:ticket:`24769`)。"

msgid ""
"Fixed ``prefetch_related()`` on databases other than PostgreSQL for models "
"using UUID primary keys (:ticket:`24912`)."
msgstr ""
"修复了在使用 UUID 主键的模型上，除了 PostgreSQL 数据库外的其他数据库上的 "
"``prefetch_related()`` 问题 (:ticket:`24912`)。"

msgid ""
"Fixed removing ``unique_together`` constraints on MySQL (:ticket:`24972`)."
msgstr ""
"修复了在 MySQL 上删除 ``unique_together`` 约束的问题 (:ticket:`24972`)。"

msgid ""
"Fixed crash when uploading images with MIME types that Pillow doesn't "
"detect, such as bitmap, in ``forms.ImageField`` (:ticket:`24948`)."
msgstr ""
"修复了在 ``forms.ImageField`` 中上传 Pillow 无法检测到的 MIME 类型的图像时的"
"崩溃问题，例如位图 (:ticket:`24948`)。"

msgid ""
"Fixed a regression when deleting a model through the admin that has a "
"``GenericRelation`` with a ``related_query_name`` (:ticket:`24940`)."
msgstr ""
"修复了通过管理员删除具有 ``related_query_name`` 的 ``GenericRelation`` 的模型"
"时发生的回归问题 (:ticket:`24940`)。"

msgid ""
"Reallowed non-ASCII values for ``ForeignKey.related_name`` on Python 3 by "
"fixing the false positive system check (:ticket:`25016`)."
msgstr ""
"通过修复虚假的系统检查，重新允许在 Python 3 上使用非 ASCII 值的 ``ForeignKey."
"related_name`` (:ticket:`25016`)。"

msgid ""
"Fixed inline forms that use a parent object that has a ``UUIDField`` primary "
"key and a child object that has an ``AutoField`` primary key (:ticket:"
"`24958`)."
msgstr ""
"修复了使用具有 ``UUIDField`` 主键的父对象和具有 ``AutoField`` 主键的子对象的"
"内联表单的问题 (:ticket:`24958`)。"

msgid ""
"Fixed a regression in the ``unordered_list`` template filter on certain "
"inputs (:ticket:`25031`)."
msgstr ""
"修复了在某些输入上 ``unordered_list`` 模板过滤器中的回归问题 (:ticket:"
"`25031`)。"

msgid ""
"Fixed a regression in ``URLValidator`` that invalidated Punycode TLDs (:"
"ticket:`25059`)."
msgstr ""
"修复了 ``URLValidator`` 中的回归问题，该问题使 Punycode TLD 无效 (:ticket:"
"`25059`)。"

msgid "Improved ``pyinotify`` ``runserver`` polling (:ticket:`23882`)."
msgstr "改进了 ``pyinotify`` 在 ``runserver`` 中的轮询功能 (:ticket:`23882`)。"

msgid "Django 1.8.4 release notes"
msgstr "Django 1.8.4 版本发行说明"

msgid "Django 1.8.4 fixes a security issue and several bugs in 1.8.3."
msgstr "Django 1.8.4 修复了 1.8.3 中的一个安全问题和几个错误。"

msgid ""
"Added the ability to serialize values from the newly added :class:`~django."
"db.models.UUIDField` (:ticket:`25019`)."
msgstr ""
"增加了对新添加的 :class:`~django.db.models.UUIDField` 的值进行序列化的能力 (:"
"ticket:`25019`)。"

msgid ""
"Added a system check warning if the old ``TEMPLATE_*`` settings are defined "
"in addition to the new ``TEMPLATES`` setting."
msgstr ""
"如果在新的 ``TEMPLATES`` 设置之外定义了旧的 ``TEMPLATE_*`` 设置，将会添加一个"
"系统检查警告。"

msgid ""
"Fixed ``QuerySet.raw()`` so ``InvalidQuery`` is not raised when using the "
"``db_column`` name of a ``ForeignKey`` field with ``primary_key=True`` (:"
"ticket:`12768`)."
msgstr ""
"修复了 ``QuerySet.raw()``，以便在使用具有 ``primary_key=True`` 的 "
"``ForeignKey`` 字段的 ``db_column`` 名称时不会引发 ``InvalidQuery`` 错误 (:"
"ticket:`12768`)。"

msgid ""
"Prevented an exception in ``TestCase.setUpTestData()`` from leaking the "
"transaction (:ticket:`25176`)."
msgstr ""
"在 ``TestCase.setUpTestData()`` 中防止异常泄漏事务（:ticket:`25176`）。"

msgid ""
"Fixed ``has_changed()`` method in ``contrib.postgres.forms.HStoreField`` (:"
"ticket:`25215`, :ticket:`25233`)."
msgstr ""
"修复了 ``contrib.postgres.forms.HStoreField`` 中的 ``has_changed()`` 方法（:"
"ticket:`25215`，:ticket:`25233`）。"

msgid ""
"Fixed the recording of squashed migrations when running the ``migrate`` "
"command (:ticket:`25231`)."
msgstr "在运行 ``migrate`` 命令时修复了合并迁移记录的问题（:ticket:`25231`）。"

msgid ""
"Moved the :ref:`unsaved model instance assignment data loss check <unsaved-"
"model-instance-check-18>` to ``Model.save()`` to allow easier usage of in-"
"memory models (:ticket:`25160`)."
msgstr ""
"将 :ref:`未保存的模型实例分配数据丢失检查 <unsaved-model-instance-check-18>` "
"移动到了 ``Model.save()`` 中，以便更容易使用内存中的模型（:ticket:`25160`）。"

msgid ""
"Prevented ``varchar_patterns_ops`` and ``text_patterns_ops`` indexes for "
"``ArrayField`` (:ticket:`25180`)."
msgstr ""
"防止了对 ``ArrayField`` 创建 ``varchar_patterns_ops`` 和 "
"``text_patterns_ops`` 索引（:ticket:`25180`）。"

msgid "Django 1.8.5 release notes"
msgstr "Django 1.8.5 版本发行说明"

msgid "*October 3, 2015*"
msgstr "*2015 年 10 月 3 日*"

msgid "Django 1.8.5 fixes several bugs in 1.8.4."
msgstr "Django 1.8.5 修复了 1.8.4 中的几个错误。"

msgid "Made the development server's autoreload more robust (:ticket:`24704`)."
msgstr "改进了开发服务器的自动重新加载功能，使其更加健壮（:ticket:`24704`）。"

msgid ""
"Fixed ``AssertionError`` in some delete queries with a model containing a "
"field that is both a foreign and primary key (:ticket:`24951`)."
msgstr ""
"修复了包含既是外键又是主键的字段的模型中一些删除查询中的 ``AssertionError`` "
"（:ticket:`24951`）。"

msgid "Fixed ``AssertionError`` in some complex queries (:ticket:`24525`)."
msgstr "修复了一些复杂查询中的 ``AssertionError`` （:ticket:`24525`）。"

msgid "Fixed a migrations crash with ``GenericForeignKey`` (:ticket:`25040`)."
msgstr "修复了使用 ``GenericForeignKey`` 时的迁移崩溃问题（:ticket:`25040`）。"

msgid ""
"Made ``translation.override()`` clear the overridden language when a "
"translation isn't initially active (:ticket:`25295`)."
msgstr ""
"在初始情况下未激活翻译时，使 ``translation.override()`` 清除被覆盖的语言（:"
"ticket:`25295`）。"

msgid ""
"Fixed crash when using a value in ``ModelAdmin.list_display`` that clashed "
"with a reverse field on the model (:ticket:`25299`)."
msgstr ""
"修复了在使用 ``ModelAdmin.list_display`` 中的值与模型上的反向字段冲突时导致崩"
"溃的问题（:ticket:`25299`）。"

msgid ""
"Fixed autocompletion for options of non-``argparse`` management commands (:"
"ticket:`25372`)."
msgstr "修复了非 ``argparse`` 管理命令选项的自动补全问题（:ticket:`25372`）。"

msgid ""
"Alphabetized ordering of imports in ``from django.db import migrations, "
"models`` statement in newly created migrations (:ticket:`25384`)."
msgstr ""
"在新创建的迁移中，按字母顺序排列了 ``from django.db import migrations, "
"models`` 语句中的导入项（:ticket:`25384`）。"

msgid ""
"Fixed migrations crash on MySQL when adding a text or a blob field with an "
"unhashable default (:ticket:`25393`)."
msgstr ""
"修复了在 MySQL 上添加具有不可哈希默认值的文本或 blob 字段时导致迁移崩溃的问题"
"（:ticket:`25393`）。"

msgid ""
"Changed ``Count`` queries to execute ``COUNT(*)`` instead of ``COUNT('*')`` "
"as versions of Django before 1.8 did (:ticket:`25377`). This may fix a "
"performance regression on some databases."
msgstr ""
"将 ``Count`` 查询更改为执行 ``COUNT(*)``，而不是像 Django 1.8 之前的版本一样"
"执行 ``COUNT('*')`` （:ticket:`25377`）。这可能会在某些数据库上修复性能回退问"
"题。"

msgid ""
"Fixed custom queryset chaining with ``values()`` and ``values_list()`` (:"
"ticket:`20625`)."
msgstr ""
"修复了在使用 ``values()`` 和 ``values_list()`` 进行自定义查询集链的问题（:"
"ticket:`20625`）。"

msgid ""
"Moved the :ref:`unsaved model instance assignment data loss check <unsaved-"
"model-instance-check-18>` on reverse relations to ``Model.save()`` (:ticket:"
"`25160`)."
msgstr ""
"将对反向关系的 :ref:`未保存的模型实例分配数据丢失检查 <unsaved-model-"
"instance-check-18>` 移动到了 ``Model.save()`` 中（:ticket:`25160`）。"

msgid ""
"Readded inline foreign keys to form instances when validating model formsets "
"(:ticket:`25431`)."
msgstr ""
"在验证模型表单集时，重新将内联外键添加到表单实例中（:ticket:`25431`）。"

msgid ""
"Allowed using ORM write methods after disabling autocommit with :func:"
"`set_autocommit(False) <django.db.transaction.set_autocommit>` (:ticket:"
"`24921`)."
msgstr ""
"允许在使用 :func:`set_autocommit(False) <django.db.transaction."
"set_autocommit>` 禁用自动提交后使用 ORM 写入方法（:ticket:`24921`）。"

msgid ""
"Fixed the ``manage.py test --keepdb`` option on Oracle (:ticket:`25421`)."
msgstr ""
"修复了 Oracle 上的 ``manage.py test --keepdb`` 选项（:ticket:`25421`）。"

msgid ""
"Fixed incorrect queries with multiple many-to-many fields on a model with "
"the same 'to' model and with ``related_name`` set to '+' (:ticket:`24505`, :"
"ticket:`25486`)."
msgstr ""
"修复了在模型上具有相同“to”模型并且 ``related_name`` 设置为 '+' 时的多个多对多"
"字段的不正确查询（:ticket:`24505`，:ticket:`25486`）。"

msgid ""
"Fixed pickling a ``SimpleLazyObject`` wrapping a model (:ticket:`25389`)."
msgstr ""
"修复了对包装模型的 ``SimpleLazyObject`` 进行序列化的问题（:ticket:`25389`）。"

msgid "Django 1.8.6 release notes"
msgstr "Django 1.8.6 版本发行说明"

msgid "*November 4, 2015*"
msgstr "*2015 年 11 月 4 日*"

msgid ""
"Django 1.8.6 adds official support for Python 3.5 and fixes several bugs in "
"1.8.5."
msgstr ""
"Django 1.8.6 为 Python 3.5 添加了官方支持，并修复了 1.8.5 中的几个错误。"

msgid ""
"Fixed a regression causing ``ModelChoiceField`` to ignore "
"``prefetch_related()`` on its queryset (:ticket:`25496`)."
msgstr ""
"修复了导致 ``ModelChoiceField`` 忽略其查询集上的 ``prefetch_related()`` 的回"
"归问题（:ticket:`25496`）。"

msgid ""
"Allowed \"mode=memory\" in SQLite test database name if supported (:ticket:"
"`12118`)."
msgstr ""
"如果支持，允许在 SQLite 测试数据库名称中使用 \"mode=memory\"（:ticket:"
"`12118`）。"

msgid ""
"Fixed system check crash on ``ForeignKey`` to abstract model (:ticket:"
"`25503`)."
msgstr ""
"修复了在 ``ForeignKey`` 指向抽象模型时导致系统检查崩溃的问题（:ticket:"
"`25503`）。"

msgid ""
"Fixed incorrect queries when you have multiple ``ManyToManyField``\\s on "
"different models that have the same field name, point to the same model, and "
"have their reverse relations disabled (:ticket:`25545`)."
msgstr ""
"修复了在不同模型上具有相同字段名称、指向相同模型并且禁用了它们的反向关系时导"
"致查询不正确的问题，这些模型上有多个 ``ManyToManyField`` （:ticket:"
"`25545`）。"

msgid "Allowed filtering over a ``RawSQL`` annotation (:ticket:`25506`)."
msgstr "允许在 ``RawSQL`` 注释上进行过滤操作（:ticket:`25506`）。"

msgid ""
"Made the ``Concat`` database function idempotent on SQLite (:ticket:`25517`)."
msgstr "在 SQLite 上使 ``Concat`` 数据库函数成为幂等的（:ticket:`25517`）。"

msgid ""
"Avoided a confusing stack trace when starting :djadmin:`runserver` with an "
"invalid :setting:`INSTALLED_APPS` setting (:ticket:`25510`). This regression "
"appeared in 1.8.5 as a side effect of fixing :ticket:`24704`."
msgstr ""
"避免在使用无效的 :setting:`INSTALLED_APPS` 设置启动 :djadmin:`runserver` 时出"
"现令人困惑的堆栈跟踪。这个回归问题出现在 1.8.5 中，是修复 :ticket:`24704` 的"
"副作用（:ticket:`25510`）。"

msgid ""
"Made deferred models use their proxied model's ``_meta.apps`` for caching "
"and retrieval (:ticket:`25563`). This prevents any models generated in data "
"migrations using ``QuerySet.defer()`` from leaking to test and application "
"code."
msgstr ""
"使延迟加载的模型使用其代理模型的 ``_meta.apps`` 进行缓存和检索（:ticket:"
"`25563`）。这可以防止在数据迁移中使用 ``QuerySet.defer()`` 生成的任何模型泄漏"
"到测试和应用程序代码中。"

msgid ""
"Fixed a typo in the name of the ``strictly_above`` PostGIS lookup (:ticket:"
"`25592`)."
msgstr ""
"修复了在 ``strictly_above`` PostGIS 查询中名称拼写错误的问题（:ticket:"
"`25592`）。"

msgid ""
"Fixed crash with ``contrib.postgres.forms.SplitArrayField`` and "
"``IntegerField`` on invalid value (:ticket:`25597`)."
msgstr ""
"修复了在使用无效值时 ``contrib.postgres.forms.SplitArrayField`` 和 "
"``IntegerField`` 导致崩溃的问题（:ticket:`25597`）。"

msgid ""
"Added a helpful error message when Django and South migrations exist in the "
"same directory (:ticket:`25618`)."
msgstr ""
"当同一目录中存在 Django 和 South 迁移时，添加了一个有用的错误消息（:ticket:"
"`25618`）。"

msgid ""
"Fixed a regression in ``URLValidator`` that allowed URLs with consecutive "
"dots in the domain section (like ``http://example..com/``) to pass (:ticket:"
"`25620`)."
msgstr ""
"修复了 ``URLValidator`` 中的回归问题，该问题允许在域部分中有连续的点的 URL 通"
"过（例如 ``http://example..com/``）（:ticket:`25620`）。"

msgid ""
"Fixed a crash with ``GenericRelation`` and ``BaseModelAdmin."
"to_field_allowed`` (:ticket:`25622`)."
msgstr ""
"修复了使用 ``GenericRelation`` 和 ``BaseModelAdmin.to_field_allowed`` 导致崩"
"溃的问题（:ticket:`25622`）。"

msgid "Django 1.8.7 release notes"
msgstr "Django 1.8.7 版本发行说明"

msgid "Django 1.8.7 fixes a security issue and several bugs in 1.8.6."
msgstr "Django 1.8.7 修复了 1.8.6 中的一个安全问题和几个错误。"

msgid ""
"Additionally, Django's vendored version of six, ``django.utils.six``, has "
"been upgraded to the latest release (1.10.0)."
msgstr ""
"另外，Django 的兼容库版本的 six，即 ``django.utils.six``，已升级到最新版本"
"（1.10.0）。"

msgid ""
"Fixed a crash of the debug view during the autumn DST change when :setting:"
"`USE_TZ` is ``False`` and ``pytz`` is installed."
msgstr ""
"在秋季 DST 更改期间，当 :setting:`USE_TZ` 为 ``False`` 且安装了 ``pytz`` 时，"
"修复了调试视图的崩溃问题。"

msgid ""
"Fixed a regression in 1.8.6 that caused database routers without an "
"``allow_migrate()`` method to crash (:ticket:`25686`)."
msgstr ""
"修复了 1.8.6 中的回归问题，导致没有 ``allow_migrate()`` 方法的数据库路由器崩"
"溃的问题（:ticket:`25686`）。"

msgid ""
"Fixed a regression in 1.8.6 by restoring the ability to use ``Manager`` "
"objects for the ``queryset`` argument of ``ModelChoiceField`` (:ticket:"
"`25683`)."
msgstr ""
"通过恢复可以使用 ``Manager`` 对象作为 ``ModelChoiceField`` 的 ``queryset`` 参"
"数的能力，修复了 1.8.6 中的回归问题（:ticket:`25683`）。"

msgid ""
"Fixed a regression in 1.8.6 that caused an application with South migrations "
"in the ``migrations`` directory to fail (:ticket:`25618`)."
msgstr ""
"修复了 1.8.6 中的回归问题，导致具有 South 迁移的应用在 ``migrations`` 目录中"
"失败的问题（:ticket:`25618`）。"

msgid ""
"Fixed a regression in 1.8 by making ``gettext()`` once again return UTF-8 "
"bytestrings on Python 2 if the input is a bytestring (:ticket:`25720`)."
msgstr ""
"通过在 Python 2 中，如果输入是字节串，再次使 ``gettext()`` 返回 UTF-8 字节"
"串，修复了 1.8 中的回归问题（:ticket:`25720`）。"

msgid ""
"Fixed serialization of :class:`~django.contrib.postgres.fields."
"DateRangeField` and :class:`~django.contrib.postgres.fields."
"DateTimeRangeField` (:ticket:`24937`)."
msgstr ""
"修复了对 :class:`~django.contrib.postgres.fields.DateRangeField` 和 :class:"
"`~django.contrib.postgres.fields.DateTimeRangeField` 的序列化问题（:ticket:"
"`24937`）。"

msgid "Fixed the exact lookup of ``ArrayField`` (:ticket:`25666`)."
msgstr "修复了 ``ArrayField`` 的精确查找问题（:ticket:`25666`）。"

msgid ""
"Fixed ``Model.refresh_from_db()`` updating of ``ForeignKey`` fields with "
"``on_delete=models.SET_NULL`` (:ticket:`25715`)."
msgstr ""
"修复了 ``Model.refresh_from_db()`` 更新带有 ``on_delete=models.SET_NULL`` 的 "
"``ForeignKey`` 字段的问题（:ticket:`25715`）。"

msgid ""
"Fixed a duplicate query regression in 1.8 on proxied model deletion (:ticket:"
"`25685`)."
msgstr ""
"修复了 1.8 中在代理模型删除时出现的重复查询回归问题（:ticket:`25685`）。"

msgid ""
"Fixed ``set_FOO_order()`` crash when the ``ForeignKey`` of a model with "
"``order_with_respect_to`` references a model with a ``OneToOneField`` "
"primary key (:ticket:`25786`)."
msgstr ""
"修复了当具有 ``order_with_respect_to`` 的模型的 ``ForeignKey`` 引用具有 "
"``OneToOneField`` 主键的模型时，导致 ``set_FOO_order()`` 崩溃的问题（:ticket:"
"`25786`）。"

msgid ""
"Fixed incorrect validation for ``PositiveIntegerField`` and "
"``PositiveSmallIntegerField`` on MySQL resulting in values greater than "
"4294967295 or 65535, respectively, passing validation and being silently "
"truncated by the database (:ticket:`25767`)."
msgstr ""
"修复了在 MySQL 上对 ``PositiveIntegerField`` 和 "
"``PositiveSmallIntegerField`` 进行错误验证的问题，导致值大于 4294967295 或 "
"65535 的值通过验证，并被数据库默默截断（:ticket:`25767`）。"

msgid "Django 1.8.8 release notes"
msgstr "Django 1.8.8 版本发行说明"

msgid "*January 2, 2016*"
msgstr "*2016 年 1 月 2 日*"

msgid "Django 1.8.8 fixes several bugs in 1.8.7."
msgstr "Django 1.8.8 修复了 1.8.7 中的几个错误。"

msgid ""
"Python 3.2 users, please be advised that we've decided to drop support for "
"Python 3.2 in Django 1.8.x at the end of 2016. We won't break things "
"intentionally after that, but we won't test subsequent releases against "
"Python 3.2 either. Upstream support for Python 3.2 ends February 2016 so we "
"don't find much value in providing security updates for a version of Python "
"that could be insecure. To read more about the decision and to let us know "
"if this will be problematic for you, please read the `django-developers "
"thread <https://groups.google.com/g/django-developers/c/eMu5UQpUdWs/"
"discussion>`_."
msgstr ""
"Python 3.2 用户，请注意我们决定在 2016 年底停止对 Django 1.8.x 的 Python 3.2 "
"支持。之后我们不会故意破坏兼容性，但也不会针对 Python 3.2 测试后续版本。"
"Python 3.2 的上游支持在 2016 年 2 月结束，因此我们不认为为可能存在安全风险的 "
"Python 版本提供安全更新有多大价值。要了解更多关于这个决定的信息，并告诉我们是"
"否会对您造成问题，请阅读 `django-developers 线程 <https://groups.google.com/"
"g/django-developers/c/eMu5UQpUdWs/discussion>`_。"

msgid ""
"Fixed incorrect ``unique_together`` field name generation by ``inspectdb`` (:"
"ticket:`25274`)."
msgstr ""
"修复了 ``inspectdb`` 生成的字段名称不正确的 ``unique_together`` （:ticket:"
"`25274`）。"

msgid ""
"Corrected ``__len`` query lookup on ``ArrayField`` for empty arrays (:ticket:"
"`25772`)."
msgstr ""
"纠正了对空数组的 ``ArrayField`` 上的 ``__len`` 查询查找（:ticket:`25772`）。"

msgid ""
"Restored the ability to use custom formats from ``formats.py`` with ``django."
"utils.formats.get_format()`` and the ``date`` template filter (:ticket:"
"`25812`)."
msgstr ""
"恢复了使用 ``django.utils.formats.get_format()`` 和 ``date`` 模板过滤器与 "
"``formats.py`` 中的自定义格式的能力（:ticket:`25812`）。"

msgid ""
"Fixed a state bug when migrating a ``SeparateDatabaseAndState`` operation "
"backwards (:ticket:`25896`)."
msgstr ""
"修复了在向后迁移 ``SeparateDatabaseAndState`` 操作时的状态错误问题（:ticket:"
"`25896`）。"

msgid ""
"Fixed missing ``varchar/text_pattern_ops`` index on ``CharField`` and "
"``TextField`` respectively when using ``AlterField`` on PostgreSQL (:ticket:"
"`25412`)."
msgstr ""
"在 PostgreSQL 上使用 ``AlterField`` 时，修复了在 ``CharField`` 和 "
"``TextField`` 上分别缺少 ``varchar/text_pattern_ops`` 索引的问题（:ticket:"
"`25412`）。"

msgid ""
"Fixed a state bug when using an ``AlterModelManagers`` operation (:ticket:"
"`25852`)."
msgstr ""
"修复了在使用 ``AlterModelManagers`` 操作时的状态错误问题（:ticket:`25852`）。"

msgid ""
"Fixed a regression which prevented using a language not in Django's default "
"language list (:setting:`LANGUAGES`) (:ticket:`25915`)."
msgstr ""
"修复了一个导致无法使用不在 Django 的默认语言列表 (:setting:`LANGUAGES`) 中的"
"语言的回归问题（:ticket:`25915`）。"

msgid ""
"``django.views.decorators.cache.never_cache()`` now sends more persuasive "
"headers (added ``no-cache, no-store, must-revalidate`` to ``Cache-Control``) "
"to better prevent caching (:ticket:`13008`). This fixes a problem where a "
"page refresh in Firefox cleared the selected entries in the admin's "
"``filter_horizontal`` and ``filter_vertical`` widgets, which could result in "
"inadvertent data loss if a user didn't notice that and then submitted the "
"form (:ticket:`22955`)."
msgstr ""
"``django.views.decorators.cache.never_cache()`` 现在发送更有说服力的头部信息"
"（在 ``Cache-Control`` 中添加了 ``no-cache, no-store, must-revalidate``），以"
"更好地防止缓存（:ticket:`13008`）。这修复了在 Firefox 中刷新页面会清除管理员"
"的 ``filter_horizontal`` 和 ``filter_vertical`` 小部件中选择的条目的问题，如"
"果用户没有注意到这一点然后提交表单，可能会导致意外的数据丢失（:ticket:"
"`22955`）。"

msgid ""
"Fixed a regression in the admin which ignored line breaks in read-only "
"fields instead of converting them to ``<br>`` (:ticket:`25465`)."
msgstr ""
"修复了在管理员中的回归问题，该问题忽略只读字段中的换行符而不是将它们转换为 "
"``<br>`` （:ticket:`25465`）。"

msgid ""
"Made ``loaddata`` skip disabling and enabling database constraints when it "
"doesn't load any fixtures (:ticket:`23372`)."
msgstr ""
"当 ``loaddata`` 不加载任何数据时，使其跳过禁用和启用数据库约束（:ticket:"
"`23372`）。"

msgid ""
"Fixed a crash in ``QuerySet.values()/values_list()`` after an ``annotate()`` "
"and ``order_by()`` when ``values()/values_list()`` includes a field not in "
"the ``order_by()`` (:ticket:`25316`)."
msgstr ""
"修复了在 ``annotate()`` 和 ``order_by()`` 后使用 ``QuerySet.values()/"
"values_list()`` 并包含一个不在 ``order_by()`` 中的字段后导致崩溃的问题（:"
"ticket:`25316`）。"

msgid "Django 1.8.9 release notes"
msgstr "Django 1.8.9 版本发行说明"

msgid "*February 1, 2016*"
msgstr "*2016 年 2 月 1 日*"

msgid "Django 1.8.9 fixes several bugs in 1.8.8."
msgstr "Django 1.8.9 修复了 1.8.8 中的几个错误。"

msgid ""
"Fixed a regression that caused the \"user-tools\" items to display on the "
"admin's logout page (:ticket:`26035`)."
msgstr ""
"修复了一个导致在管理员的注销页面上显示 \"user-tools\" 项的回归问题（:ticket:"
"`26035`）。"

msgid ""
"Fixed a crash in the translations system when the current language has no "
"translations (:ticket:`26046`)."
msgstr "修复了在当前语言没有翻译时翻译系统崩溃的问题（:ticket:`26046`）。"

msgid ""
"Fixed a regression that caused the incorrect day to be selected when opening "
"the admin calendar widget for timezones from GMT+0100 to GMT+1200 (:ticket:"
"`24980`)."
msgstr ""
"修复了一个导致在时区从 GMT+0100 到 GMT+1200 时，打开管理员日历小部件时选择了"
"错误的日期的回归问题（:ticket:`24980`）。"

msgid ""
"Fixed a regression in 1.8.8 causing incorrect index handling in migrations "
"on PostgreSQL when adding ``db_index=True`` or ``unique=True`` to a "
"``CharField`` or ``TextField`` that already had the other specified, or when "
"removing one of them from a field that had both, or when adding "
"``unique=True`` to a field already listed in ``unique_together`` (:ticket:"
"`26034`)."
msgstr ""
"修复了 1.8.8 中的回归问题，导致在 PostgreSQL 上的迁移中在将 "
"``db_index=True`` 或 ``unique=True`` 添加到已经具有另一个指定的 "
"``CharField`` 或 ``TextField``，或者从已经同时具有两者之一的字段中移除一个，"
"或者将 ``unique=True`` 添加到已在 ``unique_together`` 中列出的字段时，处理索"
"引不正确的问题（:ticket:`26034`）。"

msgid ""
"Fixed a crash when using an ``__in`` lookup inside a ``Case`` expression (:"
"ticket:`26071`)."
msgstr ""
"修复了在 ``Case`` 表达式中使用 ``__in`` 查找时导致崩溃的问题（:ticket:"
"`26071`）。"

msgid ""
"Fixed a crash when using a reverse ``OneToOneField`` in ``ModelAdmin."
"readonly_fields`` (:ticket:`26060`)."
msgstr ""
"修复了在 ``ModelAdmin.readonly_fields`` 中使用反向的 ``OneToOneField`` 时导致"
"崩溃的问题（:ticket:`26060`）。"

msgid ""
"Fixed a regression in Django 1.8.5 that broke copying a ``SimpleLazyObject`` "
"with ``copy.copy()`` (:ticket:`26122`)."
msgstr ""
"修复了 Django 1.8.5 中的回归问题，导致无法使用 ``copy.copy()`` 复制 "
"``SimpleLazyObject`` （:ticket:`26122`）。"

msgid ""
"Fixed the ``contrib.gis`` map widgets when using "
"``USE_THOUSAND_SEPARATOR=True`` (:ticket:`20415`)."
msgstr ""
"修复了在使用 ``USE_THOUSAND_SEPARATOR=True`` 时，``contrib.gis`` 地图小部件的"
"问题（:ticket:`20415`）。"

msgid "Django 1.9 release notes"
msgstr "Django 1.9 版本发行说明"

msgid "*December 1, 2015*"
msgstr "*2015 年 12 月 1 日*"

msgid "Welcome to Django 1.9!"
msgstr "欢迎使用 Django 1.9 ！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-1.9>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.9>` "
"you'll want to be aware of when upgrading from Django 1.8 or older versions. "
"We've :ref:`dropped some features<removed-features-1.9>` that have reached "
"the end of their deprecation cycle, and we've :ref:`begun the deprecation "
"process for some features <deprecated-features-1.9>`."
msgstr ""
"这些发布说明包括 :ref:`新特性 <whats-new-1.9>`，以及从 Django 1.8 或更早版本"
"升级时需要注意的一些 :ref:`不兼容变更 <backwards-incompatible-1.9>`。我们已"
"经 :ref:`删除了一些已经完成了其废弃周期的功能 <removed-features-1.9>`，并且已"
"经 :ref:`开始废弃某些功能 <deprecated-features-1.9>`。"

msgid ""
"Django 1.9 requires Python 2.7, 3.4, or 3.5. We **highly recommend** and "
"only officially support the latest release of each series."
msgstr ""
"Django 1.9 需要 Python 2.7、3.4 或 3.5。我们 **强烈建议** 并且只官方支持每个"
"系列的最新版本。"

msgid "The Django 1.8 series is the last to support Python 3.2 and 3.3."
msgstr "Django 1.8 系列是最后一个支持 Python 3.2 和 3.3 的版本。"

msgid "What's new in Django 1.9"
msgstr "Django 1.9 的新特性"

msgid "Performing actions after a transaction commit"
msgstr "事务提交后执行操作"

msgid ""
"The new :func:`~django.db.transaction.on_commit` hook allows performing "
"actions after a database transaction is successfully committed. This is "
"useful for tasks such as sending notification emails, creating queued tasks, "
"or invalidating caches."
msgstr ""
"新的 :func:`~django.db.transaction.on_commit` 钩子允许在数据库事务成功提交后"
"执行操作。这对于执行诸如发送通知电子邮件、创建排队任务或使缓存无效等任务非常"
"有用。"

msgid ""
"This functionality from the :pypi:`django-transaction-hooks` package has "
"been integrated into Django."
msgstr ""
"这个功能已经被集成到 Django 中，之前是作为 :pypi:`django-transaction-hooks` "
"包的一部分。"

msgid "Password validation"
msgstr "密码验证"

msgid ""
"Django now offers password validation to help prevent the usage of weak "
"passwords by users. The validation is integrated in the included password "
"change and reset forms and is simple to integrate in any other code. "
"Validation is performed by one or more validators, configured in the new :"
"setting:`AUTH_PASSWORD_VALIDATORS` setting."
msgstr ""
"Django 现在提供密码验证功能，以帮助防止用户使用弱密码。该验证已集成在包含的密"
"码更改和重置表单中，并且可以简单地集成到任何其他代码中。验证由一个或多个验证"
"器执行，可以在新的 :setting:`AUTH_PASSWORD_VALIDATORS` 设置中配置。"

msgid ""
"Four validators are included in Django, which can enforce a minimum length, "
"compare the password to the user's attributes like their name, ensure "
"passwords aren't entirely numeric, or check against an included list of "
"common passwords. You can combine multiple validators, and some validators "
"have custom configuration options. For example, you can choose to provide a "
"custom list of common passwords. Each validator provides a help text to "
"explain its requirements to the user."
msgstr ""
"Django 中包含了四个验证器，可以强制实施最小长度、将密码与用户的属性进行比较"
"（如姓名）、确保密码不全为数字，或者检查是否在包含的常见密码列表中。您可以组"
"合多个验证器，并且某些验证器具有自定义配置选项。例如，您可以选择提供自定义的"
"常见密码列表。每个验证器都提供帮助文本，向用户解释其要求。"

msgid ""
"By default, no validation is performed and all passwords are accepted, so if "
"you don't set :setting:`AUTH_PASSWORD_VALIDATORS`, you will not see any "
"change. In new projects created with the default :djadmin:`startproject` "
"template, a simple set of validators is enabled. To enable basic validation "
"in the included auth forms for your project, you could set, for example::"
msgstr ""
"默认情况下，不执行任何验证，所有密码都会被接受，因此如果您不设置 :setting:"
"`AUTH_PASSWORD_VALIDATORS`，您将不会看到任何更改。在使用默认 :djadmin:"
"`startproject` 模板创建的新项目中，已启用一组简单的验证器。要在您的项目中为包"
"含的认证表单启用基本验证，您可以设置如下配置，例如："

msgid "See :ref:`password-validation` for more details."
msgstr "有关更多详细信息，请参阅 :ref:`password-validation`。"

msgid "Permission mixins for class-based views"
msgstr "用于基于类的视图的权限混合类"

msgid ""
"Django now ships with the mixins :class:`~django.contrib.auth.mixins."
"AccessMixin`, :class:`~django.contrib.auth.mixins.LoginRequiredMixin`, :"
"class:`~django.contrib.auth.mixins.PermissionRequiredMixin`, and :class:"
"`~django.contrib.auth.mixins.UserPassesTestMixin` to provide the "
"functionality of the ``django.contrib.auth.decorators`` for class-based "
"views. These mixins have been taken from, or are at least inspired by, the "
"`django-braces`_ project."
msgstr ""
"Django 现在包含了一些 mixin 类，如 :class:`~django.contrib.auth.mixins."
"AccessMixin`、:class:`~django.contrib.auth.mixins.LoginRequiredMixin`、:"
"class:`~django.contrib.auth.mixins.PermissionRequiredMixin` 和 :class:"
"`~django.contrib.auth.mixins.UserPassesTestMixin`，用于为基于类的视图提供与 "
"``django.contrib.auth.decorators`` 相同的功能。这些 mixin 类来自或受到了 "
"`django-braces`_ 项目的启发。"

msgid ""
"There are a few differences between Django's and ``django-braces``\\' "
"implementation, though:"
msgstr "尽管如此，在 Django 和 ``django-braces``\\' 的实现之间存在一些差异："

msgid ""
"The :attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` "
"attribute can only be ``True`` or ``False``. Custom exceptions or callables "
"are not supported."
msgstr ""
":attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` 属性只能为 "
"``True`` 或 ``False``。不支持自定义异常或可调用对象。"

msgid ""
"The :meth:`~django.contrib.auth.mixins.AccessMixin.handle_no_permission` "
"method does not take a ``request`` argument. The current request is "
"available in ``self.request``."
msgstr ""
":meth:`~django.contrib.auth.mixins.AccessMixin.handle_no_permission` 方法不接"
"受 ``request`` 参数。当前请求可在 ``self.request`` 中获取。"

msgid ""
"The custom ``test_func()`` of :class:`~django.contrib.auth.mixins."
"UserPassesTestMixin` does not take a ``user`` argument. The current user is "
"available in ``self.request.user``."
msgstr ""
":class:`~django.contrib.auth.mixins.UserPassesTestMixin` 的自定义 "
"``test_func()`` 不接受 ``user`` 参数。当前用户可在 ``self.request.user`` 中获"
"取。"

msgid ""
"The :attr:`permission_required <django.contrib.auth.mixins."
"PermissionRequiredMixin>` attribute supports a string (defining one "
"permission) or a list/tuple of strings (defining multiple permissions) that "
"need to be fulfilled to grant access."
msgstr ""
":attr:`permission_required <django.contrib.auth.mixins."
"PermissionRequiredMixin>` 属性支持一个字符串（定义一个权限）或一个字符串的列"
"表/元组（定义多个权限），这些权限需要满足才能授予访问权限。"

msgid ""
"The new :attr:`~django.contrib.auth.mixins.AccessMixin."
"permission_denied_message` attribute allows passing a message to the "
"``PermissionDenied`` exception."
msgstr ""
"新的 :attr:`~django.contrib.auth.mixins.AccessMixin."
"permission_denied_message` 属性允许传递消息给 ``PermissionDenied`` 异常。"

msgid "New styling for ``contrib.admin``"
msgstr "``contrib.admin`` 中的新样式"

msgid ""
"The admin sports a modern, flat design with new SVG icons which look perfect "
"on HiDPI screens. It still provides a fully-functional experience to `YUI's "
"A-grade`_ browsers. Older browser may experience varying levels of graceful "
"degradation."
msgstr ""
"管理员界面采用了现代的扁平设计，使用新的 SVG 图标，在高分辨率屏幕上效果非常"
"好。它仍然在 `YUI's A-grade`_ 浏览器中提供了完全功能的体验。较旧的浏览器可能"
"会有不同程度的优雅降级。"

msgid "Running tests in parallel"
msgstr "并行运行测试"

msgid ""
"The :djadmin:`test` command now supports a :option:`--parallel <test --"
"parallel>` option to run a project's tests in multiple processes in parallel."
msgstr ""
":djadmin:`test` 命令现在支持 :option:`--parallel <test --parallel>` 选项，可"
"以并行运行项目的测试，使用多个进程。"

msgid ""
"Each process gets its own database. You must ensure that different test "
"cases don't access the same resources. For instance, test cases that touch "
"the filesystem should create a temporary directory for their own use."
msgstr ""
"每个进程都会得到它们自己的数据库。你必须确保不同的测试用例不会访问相同的资"
"源。例如，接触文件系统的测试用例应该创建一个临时目录供自己使用。"

msgid "This option is enabled by default for Django's own test suite provided:"
msgstr "对于 Django 自身的测试套件，默认情况下启用了此选项。"

msgid "the OS supports it (all but Windows)"
msgstr "只要操作系统支持（除了 Windows），此选项就会默认启用。"

msgid "the database backend supports it (all the built-in backends but Oracle)"
msgstr "只要数据库后端支持（除了 Oracle），此选项就会默认启用。"

msgid "Admin views now have ``model_admin`` or ``admin_site`` attributes."
msgstr "管理员视图现在具有 ``model_admin`` 或 ``admin_site`` 属性。"

msgid ""
"The URL of the admin change view has been changed (was at ``/admin/<app>/"
"<model>/<pk>/`` by default and is now at ``/admin/<app>/<model>/<pk>/change/"
"``). This should not affect your application unless you have hardcoded admin "
"URLs. In that case, replace those links by :ref:`reversing admin URLs <admin-"
"reverse-urls>` instead. Note that the old URL still redirects to the new one "
"for backwards compatibility, but it may be removed in a future version."
msgstr ""
"管理员更改视图的 URL 已更改（默认情况下是 ``/admin/<app>/<model>/<pk>/``，现"
"在是 ``/admin/<app>/<model>/<pk>/change/``）。这不会影响您的应用程序，除非您"
"已经硬编码了管理员的 URL。在这种情况下，建议使用 :ref:`反向管理员 URL <admin-"
"reverse-urls>` 来替代这些链接。请注意，旧的 URL 仍然会重定向到新的 URL 以保持"
"向后兼容，但它可能在将来的版本中被删除。"

msgid ""
":meth:`ModelAdmin.get_list_select_related() <django.contrib.admin.ModelAdmin."
"get_list_select_related>` was added to allow changing the "
"``select_related()`` values used in the admin's changelist query based on "
"the request."
msgstr ""
"添加了 :meth:`ModelAdmin.get_list_select_related() <django.contrib.admin."
"ModelAdmin.get_list_select_related>` 方法，允许根据请求更改管理员的变更列表查"
"询中使用的 ``select_related()`` 值。"

msgid ""
"The ``available_apps`` context variable, which lists the available "
"applications for the current user, has been added to the :meth:`AdminSite."
"each_context() <django.contrib.admin.AdminSite.each_context>` method."
msgstr ""
"已将 ``available_apps`` 上下文变量添加到 :meth:`AdminSite.each_context() "
"<django.contrib.admin.AdminSite.each_context>` 方法中，该变量列出了当前用户可"
"用的应用程序。"

msgid ""
":attr:`AdminSite.empty_value_display <django.contrib.admin.AdminSite."
"empty_value_display>` and :attr:`ModelAdmin.empty_value_display <django."
"contrib.admin.ModelAdmin.empty_value_display>` were added to override the "
"display of empty values in admin change list. You can also customize the "
"value for each field."
msgstr ""
"添加了 :attr:`AdminSite.empty_value_display <django.contrib.admin.AdminSite."
"empty_value_display>` 和 :attr:`ModelAdmin.empty_value_display <django."
"contrib.admin.ModelAdmin.empty_value_display>`，用于覆盖管理员更改列表中空值"
"的显示。您还可以为每个字段自定义该值。"

msgid ""
"Added jQuery events :ref:`when an inline form is added or removed <admin-"
"javascript-inline-form-events>` on the change form page."
msgstr ""
"在更改表单页面上添加了 jQuery 事件，用于 :ref:`在添加或删除内联表单时 <admin-"
"javascript-inline-form-events>`。"

msgid ""
"The time picker widget includes a '6 p.m' option for consistency of having "
"predefined options every 6 hours."
msgstr ""
"时间选择器小部件包括一个“下午 6 点”的选项，以保持每 6 小时预定义选项的一致"
"性。"

msgid "JavaScript slug generation now supports Romanian characters."
msgstr "现在，JavaScript 的 slug 生成支持罗马尼亚字符。"

msgid ""
"The model section of the ``admindocs`` now also describes methods that take "
"arguments, rather than ignoring them."
msgstr "``admindocs`` 的模型部分现在还描述了接受参数的方法，而不是忽略它们。"

msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 20%. This backwards compatible change will not affect users who "
"have subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to "
"change the default value."
msgstr ""
"PBKDF2 密码哈希器的默认迭代次数增加了 20%。这个向后兼容的更改不会影响那些已经"
"子类化了 ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` 来更改默认值的"
"用户。"

msgid ""
"The ``BCryptSHA256PasswordHasher`` will now update passwords if its "
"``rounds`` attribute is changed."
msgstr ""
"如果更改了 ``BCryptSHA256PasswordHasher`` 的 ``rounds`` 属性，它将更新密码。"

msgid ""
"``AbstractBaseUser`` and ``BaseUserManager`` were moved to a new ``django."
"contrib.auth.base_user`` module so that they can be imported without "
"including ``django.contrib.auth`` in :setting:`INSTALLED_APPS` (doing so "
"raised a deprecation warning in older versions and is no longer supported in "
"Django 1.9)."
msgstr ""
"``AbstractBaseUser`` 和 ``BaseUserManager`` 被移动到了新的 ``django.contrib."
"auth.base_user`` 模块，因此可以在不包括 ``django.contrib.auth`` 在 :setting:"
"`INSTALLED_APPS` 中的情况下导入它们（在较旧的版本中，这样做会引发废弃警告，"
"在 Django 1.9 中不再支持）。"

msgid ""
"The permission argument of :func:`~django.contrib.auth.decorators."
"permission_required()` accepts all kinds of iterables, not only list and "
"tuples."
msgstr ""
":func:`~django.contrib.auth.decorators.permission_required()` 的权限参数接受"
"所有类型的可迭代对象，而不仅仅是列表和元组。"

msgid ""
"The new :class:`~django.contrib.auth.middleware."
"PersistentRemoteUserMiddleware` makes it possible to use ``REMOTE_USER`` for "
"setups where the header is only populated on login pages instead of every "
"request in the session."
msgstr ""
"新的 :class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"使得在仅在登录页面上填充标头的设置中使用 ``REMOTE_USER`` 成为可能，而不是在会"
"话的每个请求中都填充。"

msgid ""
"The ``django.contrib.auth.views.password_reset()`` view accepts an "
"``extra_email_context`` parameter."
msgstr ""
"``django.contrib.auth.views.password_reset()`` 视图接受一个 "
"``extra_email_context`` 参数。"

msgid ""
"It's now possible to use :attr:`~django.db.models.Options."
"order_with_respect_to` with a ``GenericForeignKey``."
msgstr ""
"现在可以在 ``GenericForeignKey`` 中使用 :attr:`~django.db.models.Options."
"order_with_respect_to`。"

msgid ""
"All ``GeoQuerySet`` methods have been deprecated and replaced by :doc:"
"`equivalent database functions </ref/contrib/gis/functions>`. As soon as the "
"legacy methods have been replaced in your code, you should even be able to "
"remove the special ``GeoManager`` from your GIS-enabled classes."
msgstr ""
"所有 ``GeoQuerySet`` 方法都已被废弃，并被 :doc:`等效的数据库函数 </ref/"
"contrib/gis/functions>` 替代。一旦在您的代码中替换了这些旧方法，您甚至可以从"
"启用 GIS 的类中删除特殊的 ``GeoManager``。"

msgid ""
"The GDAL interface now supports instantiating file-based and in-memory :ref:"
"`GDALRaster objects <raster-data-source-objects>` from raw data. Setters for "
"raster properties such as projection or pixel values have been added."
msgstr ""
"GDAL 接口现在支持从原始数据实例化基于文件和内存的 :ref:`GDALRaster 对象 "
"<raster-data-source-objects>`。已添加了用于栅格属性（如投影或像素值）的设置"
"器。"

msgid ""
"For PostGIS users, the new :class:`~django.contrib.gis.db.models."
"RasterField` allows :ref:`storing GDALRaster objects <creating-and-saving-"
"raster-models>`. It supports automatic spatial index creation and "
"reprojection when saving a model. It does not yet support spatial querying."
msgstr ""
"对于 PostGIS 用户，新的 :class:`~django.contrib.gis.db.models.RasterField` 允"
"许 :ref:`存储 GDALRaster 对象 <creating-and-saving-raster-models>`。它支持在"
"保存模型时自动创建空间索引和重投影。但它目前还不支持空间查询。"

msgid ""
"The new :meth:`GDALRaster.warp() <django.contrib.gis.gdal.GDALRaster.warp>` "
"method allows warping a raster by specifying target raster properties such "
"as origin, width, height, or pixel size (among others)."
msgstr ""
"新的 :meth:`GDALRaster.warp() <django.contrib.gis.gdal.GDALRaster.warp>` 方法"
"允许通过指定目标栅格属性（如原点、宽度、高度或像素大小等）来进行栅格重投影。"

msgid ""
"The new :meth:`GDALRaster.transform() <django.contrib.gis.gdal.GDALRaster."
"transform>` method allows transforming a raster into a different spatial "
"reference system by specifying a target ``srid``."
msgstr ""
"新的 :meth:`GDALRaster.transform() <django.contrib.gis.gdal.GDALRaster."
"transform>` 方法允许通过指定目标 ``srid`` 来将栅格转换为不同的空间参考系统。"

msgid ""
"The new :class:`~django.contrib.gis.geoip2.GeoIP2` class allows using "
"MaxMind's GeoLite2 databases which includes support for IPv6 addresses."
msgstr ""
"新的 :class:`~django.contrib.gis.geoip2.GeoIP2` 类允许使用 MaxMind 的 "
"GeoLite2 数据库，其中包括对 IPv6 地址的支持。"

msgid ""
"The default OpenLayers library version included in widgets has been updated "
"from 2.13 to 2.13.1."
msgstr "包含在小部件中的默认 OpenLayers 库版本已从 2.13 更新为 2.13.1 。"

msgid ""
"Added support for the :lookup:`rangefield.contained_by` lookup for some "
"built in fields which correspond to the range fields."
msgstr ""
"为一些内置字段添加了对 :lookup:`rangefield.contained_by` 查找的支持，这些字段"
"对应于范围字段。"

msgid "Added ``django.contrib.postgres.fields.JSONField``."
msgstr "添加了 ``django.contrib.postgres.fields.JSONField``。"

msgid "Added :doc:`/ref/contrib/postgres/aggregates`."
msgstr "添加了 :doc:`/ref/contrib/postgres/aggregates`。"

msgid ""
"Added the :class:`~django.contrib.postgres.functions.TransactionNow` "
"database function."
msgstr ""
"添加了 :class:`~django.contrib.postgres.functions.TransactionNow` 数据库函"
"数。"

msgid ""
"The session model and ``SessionStore`` classes for the ``db`` and "
"``cached_db`` backends are refactored to allow a custom database session "
"backend to build upon them. See :ref:`extending-database-backed-session-"
"engines` for more details."
msgstr ""
"会话模型和用于 ``db`` 和 ``cached_db`` 后端的 ``SessionStore`` 类已进行了重"
"构，以允许自定义数据库会话后端基于它们构建。有关更多详细信息，请参阅 :ref:"
"`extending-database-backed-session-engines`。"

msgid ""
":func:`~django.contrib.sites.shortcuts.get_current_site` now handles the "
"case where ``request.get_host()`` returns ``domain:port``, e.g. ``example."
"com:80``. If the lookup fails because the host does not match a record in "
"the database and the host has a port, the port is stripped and the lookup is "
"retried with the domain part only."
msgstr ""
":func:`~django.contrib.sites.shortcuts.get_current_site` 现在处理了 "
"``request.get_host()`` 返回 ``domain:port`` 的情况，例如 ``example.com:80``。"
"如果查找失败，因为主机在数据库中找不到记录并且主机有一个端口，端口会被剥离，"
"然后使用仅包含域名的部分重试查找。"

msgid ""
"Support for multiple enclosures per feed item has been added. If multiple "
"enclosures are defined on a RSS feed, an exception is raised as RSS feeds, "
"unlike Atom feeds, do not support multiple enclosures per feed item."
msgstr ""
"添加了对每个订阅项多个附件的支持。如果在 RSS 订阅中定义了多个附件，则会引发异"
"常，因为 RSS 订阅不支持每个订阅项多个附件，而 Atom 订阅支持。"

msgid ""
"``django.core.cache.backends.base.BaseCache`` now has a ``get_or_set()`` "
"method."
msgstr ""
"``django.core.cache.backends.base.BaseCache`` 现在具有一个 ``get_or_set()`` "
"方法。"

msgid ""
":func:`django.views.decorators.cache.never_cache` now sends more persuasive "
"headers (added ``no-cache, no-store, must-revalidate`` to ``Cache-Control``) "
"to better prevent caching. This was also added in Django 1.8.8."
msgstr ""
":func:`django.views.decorators.cache.never_cache` 现在发送更具说服力的头部信"
"息（在 ``Cache-Control`` 中添加了 ``no-cache, no-store, must-revalidate``），"
"以更好地防止缓存。这也在 Django 1.8.8 中添加了。"

msgid ""
"The request header's name used for CSRF authentication can be customized "
"with :setting:`CSRF_HEADER_NAME`."
msgstr ""
"用于 CSRF 认证的请求头名称可以通过 :setting:`CSRF_HEADER_NAME` 进行自定义。"

msgid ""
"The CSRF referer header is now validated against the :setting:"
"`CSRF_COOKIE_DOMAIN` setting if set. See :ref:`how-csrf-works` for details."
msgstr ""
"如果设置了 :setting:`CSRF_COOKIE_DOMAIN` 设置，CSRF 的 referer 头现在将与其进"
"行验证。有关详细信息，请参阅 :ref:`how-csrf-works`。"

msgid ""
"The new :setting:`CSRF_TRUSTED_ORIGINS` setting provides a way to allow "
"cross-origin unsafe requests (e.g. ``POST``) over HTTPS."
msgstr ""
"新的 :setting:`CSRF_TRUSTED_ORIGINS` 设置提供了一种允许跨源不安全请求（例如 "
"``POST``）通过 HTTPS 的方式。"

msgid ""
"The PostgreSQL backend (``django.db.backends.postgresql_psycopg2``) is also "
"available as ``django.db.backends.postgresql``. The old name will continue "
"to be available for backwards compatibility."
msgstr ""
"PostgreSQL 后端（``django.db.backends.postgresql_psycopg2``）也可以使用 "
"``django.db.backends.postgresql``。旧名称将继续保持以确保向后兼容。"

msgid ""
":meth:`Storage.get_valid_name() <django.core.files.storage.Storage."
"get_valid_name>` is now called when the :attr:`~django.db.models.FileField."
"upload_to` is a callable."
msgstr ""
"当 :attr:`~django.db.models.FileField.upload_to` 是可调用对象时，现在会调用 :"
"meth:`Storage.get_valid_name() <django.core.files.storage.Storage."
"get_valid_name>`。"

msgid ""
":class:`~django.core.files.File` now has the ``seekable()`` method when "
"using Python 3."
msgstr ""
"在使用 Python 3 时，:class:`~django.core.files.File` 现在具有 ``seekable()`` "
"方法。"

msgid ""
":class:`~django.forms.ModelForm` accepts the new ``Meta`` option "
"``field_classes`` to customize the type of the fields. See :ref:`modelforms-"
"overriding-default-fields` for details."
msgstr ""
":class:`~django.forms.ModelForm` 接受新的 ``Meta`` 选项 ``field_classes`` 以"
"自定义字段的类型。有关详细信息，请参阅 :ref:`modelforms-overriding-default-"
"fields`。"

msgid ""
"You can now specify the order in which form fields are rendered with the :"
"attr:`~django.forms.Form.field_order` attribute, the ``field_order`` "
"constructor argument , or the :meth:`~django.forms.Form.order_fields` method."
msgstr ""
"现在可以使用 :attr:`~django.forms.Form.field_order` 属性、``field_order`` 构"
"造函数参数或 :meth:`~django.forms.Form.order_fields` 方法指定表单字段呈现的顺"
"序。"

msgid ""
"A form prefix can be specified inside a form class, not only when "
"instantiating a form. See :ref:`form-prefix` for details."
msgstr ""
"现在可以在表单类内部指定表单前缀，而不仅仅是在实例化表单时。有关详细信息，请"
"参阅 :ref:`form-prefix`。"

msgid ""
"You can now :ref:`specify keyword arguments <custom-formset-form-kwargs>` "
"that you want to pass to the constructor of forms in a formset."
msgstr ""
"现在可以 :ref:`指定要传递给表单集合中表单构造函数的关键字参数 <custom-"
"formset-form-kwargs>`。"

msgid ""
":class:`~django.forms.SlugField` now accepts an :attr:`~django.forms."
"SlugField.allow_unicode` argument to allow Unicode characters in slugs."
msgstr ""
":class:`~django.forms.SlugField` 现在接受一个 :attr:`~django.forms.SlugField."
"allow_unicode` 参数，以允许在 slug 中使用 Unicode 字符。"

msgid ""
":class:`~django.forms.CharField` now accepts a :attr:`~django.forms."
"CharField.strip` argument to strip input data of leading and trailing "
"whitespace.  As this defaults to ``True`` this is different behavior from "
"previous releases."
msgstr ""
":class:`~django.forms.CharField` 现在接受一个 :attr:`~django.forms.CharField."
"strip` 参数，以去除输入数据的前导和尾随空格。由于默认为 ``True``，这与之前的"
"版本不同。"

msgid ""
"Form fields now support the :attr:`~django.forms.Field.disabled` argument, "
"allowing the field widget to be displayed disabled by browsers."
msgstr ""
"现在，表单字段支持 :attr:`~django.forms.Field.disabled` 参数，允许浏览器将字"
"段小部件显示为禁用状态。"

msgid ""
"It's now possible to customize bound fields by overriding a field's :meth:"
"`~django.forms.Field.get_bound_field()` method."
msgstr ""
"现在可以通过重写字段的 :meth:`~django.forms.Field.get_bound_field()` 方法来自"
"定义绑定字段。"

msgid ""
"Class-based views generated using ``as_view()`` now have ``view_class`` and "
"``view_initkwargs`` attributes."
msgstr ""
"使用 ``as_view()`` 生成的基于类的视图现在具有 ``view_class`` 和 "
"``view_initkwargs`` 属性。"

msgid ""
":func:`~django.utils.decorators.method_decorator` can now be used with a "
"list or tuple of decorators. It can also be used to :ref:`decorate classes "
"instead of methods <decorating-class-based-views>`."
msgstr ""
"现在可以使用 :func:`~django.utils.decorators.method_decorator` 与装饰器的列表"
"或元组一起使用。它还可以用于 :ref:`装饰类而不是方法 <decorating-class-based-"
"views>`。"

msgid ""
"The :func:`django.views.i18n.set_language` view now properly redirects to :"
"ref:`translated URLs <url-internationalization>`, when available."
msgstr ""
"当可用时，:func:`django.views.i18n.set_language` 视图现在正确重定向到 :ref:`"
"已翻译的 URL <url-internationalization>`。"

msgid ""
"The ``django.views.i18n.javascript_catalog()`` view now works correctly if "
"used multiple times with different configurations on the same page."
msgstr ""
"如果在同一页上多次使用不同配置调用 ``django.views.i18n."
"javascript_catalog()`` 视图，它现在会正常工作。"

msgid ""
"The :func:`django.utils.timezone.make_aware` function gained an ``is_dst`` "
"argument to help resolve ambiguous times during DST transitions."
msgstr ""
":func:`django.utils.timezone.make_aware` 函数新增了一个 ``is_dst`` 参数，以帮"
"助解决夏令时转换期间的模糊时间。"

msgid ""
"You can now use locale variants supported by gettext. These are usually used "
"for languages which can be written in different scripts, for example Latin "
"and Cyrillic (e.g. ``be@latin``)."
msgstr ""
"现在可以使用 gettext 支持的语言区域变体。这通常用于可以使用不同字符集书写的语"
"言，例如拉丁文和西里尔文（例如 ``be@latin``）。"

msgid ""
"Added the ``django.views.i18n.json_catalog()`` view to help build a custom "
"client-side i18n library upon Django translations. It returns a JSON object "
"containing a translations catalog, formatting settings, and a plural rule."
msgstr ""
"新增了 ``django.views.i18n.json_catalog()`` 视图，以帮助构建基于 Django 翻译"
"的自定义客户端端国际化库。它返回一个包含翻译目录、格式设置和复数规则的 JSON "
"对象。"

msgid ""
"Added the ``name_translated`` attribute to the object returned by the :ttag:"
"`get_language_info` template tag. Also added a corresponding template "
"filter: :tfilter:`language_name_translated`."
msgstr ""
"新增了 :ttag:`get_language_info` 模板标签返回的对象的 ``name_translated`` 属"
"性。还新增了相应的模板过滤器：:tfilter:`language_name_translated`。"

msgid ""
"You can now run :djadmin:`compilemessages` from the root directory of your "
"project and it will find all the app message files that were created by :"
"djadmin:`makemessages`."
msgstr ""
"现在你可以从项目的根目录运行 :djadmin:`compilemessages`，它将找到所有由 :"
"djadmin:`makemessages` 创建的应用程序消息文件。"

msgid ""
":djadmin:`makemessages` now calls ``xgettext`` once per locale directory "
"rather than once per translatable file. This speeds up localization builds."
msgstr ""
"现在 :djadmin:`makemessages` 每个区域目录调用一次 ``xgettext`` 而不是每个可翻"
"译文件调用一次。这加快了本地化构建的速度。"

msgid ""
":ttag:`blocktrans` supports assigning its output to a variable using "
"``asvar``."
msgstr ":ttag:`blocktrans` 支持使用 ``asvar`` 将其输出分配给变量。"

msgid "Two new languages are available: Colombian Spanish and Scottish Gaelic."
msgstr "新增了两种新语言：哥伦比亚西班牙语和苏格兰盖尔语。"

msgid ""
"The new :djadmin:`sendtestemail` command lets you send a test email to "
"easily confirm that email sending through Django is working."
msgstr ""
"新的 :djadmin:`sendtestemail` 命令允许您发送测试邮件，以轻松确认通过 Django "
"发送邮件是否正常工作。"

msgid ""
"To increase the readability of the SQL code generated by :djadmin:"
"`sqlmigrate`, the SQL code generated for each migration operation is "
"preceded by the operation's description."
msgstr ""
"为了增加 :djadmin:`sqlmigrate` 生成的 SQL 代码的可读性，为每个迁移操作生成的 "
"SQL 代码前面都有操作的描述。"

msgid ""
"The :djadmin:`dumpdata` command output is now deterministically ordered. "
"Moreover, when the ``--output`` option is specified, it also shows a "
"progress bar in the terminal."
msgstr ""
":djadmin:`dumpdata` 命令的输出现在具有确定性的顺序。此外，当指定了 ``--"
"output`` 选项时，它还在终端中显示一个进度条。"

msgid ""
"The :djadmin:`createcachetable` command now has a ``--dry-run`` flag to "
"print out the SQL rather than execute it."
msgstr ""
":djadmin:`createcachetable` 命令现在有一个 ``--dry-run`` 标志，可以打印出 "
"SQL 而不执行它。"

msgid ""
"The :djadmin:`startapp` command creates an ``apps.py`` file. Since it "
"doesn't use ``default_app_config`` (:ref:`a discouraged API <configuring-"
"applications-ref>`), you must specify the app config's path, e.g. ``'polls."
"apps.PollsConfig'``, in :setting:`INSTALLED_APPS` for it to be used (instead "
"of just ``'polls'``)."
msgstr ""
":djadmin:`startapp` 命令会创建一个 ``apps.py`` 文件。由于它不使用 "
"``default_app_config`` （ :ref:`一个不推荐使用的 API <configuring-"
"applications-ref>` ），你必须在 :setting:`INSTALLED_APPS` 中指定 app 配置的路"
"径，例如 ``'polls.apps.PollsConfig'``，以便使用它（而不仅仅是 ``'polls'``）。"

msgid ""
"When using the PostgreSQL backend, the :djadmin:`dbshell` command can "
"connect to the database using the password from your settings file (instead "
"of requiring it to be manually entered)."
msgstr ""
"在使用 PostgreSQL 后端时，:djadmin:`dbshell` 命令可以使用设置文件中的密码来连"
"接数据库（而不需要手动输入密码）。"

msgid ""
"The ``django`` package may be run as a script, i.e. ``python -m django``, "
"which will behave the same as ``django-admin``."
msgstr ""
"``django`` 包可以作为脚本运行，即 ``python -m django``，它的行为与 ``django-"
"admin`` 相同。"

msgid ""
"Management commands that have the ``--noinput`` option now also take ``--no-"
"input`` as an alias for that option."
msgstr ""
"具有 ``--noinput`` 选项的管理命令现在还支持 ``--no-input`` 作为该选项的别名。"

msgid ""
"Initial migrations are now marked with an :attr:`initial = True <django.db."
"migrations.Migration.initial>` class attribute which allows :option:`migrate "
"--fake-initial` to more easily detect initial migrations."
msgstr ""
"初始迁移现在带有一个 :attr:`initial = True <django.db.migrations.Migration."
"initial>` 类属性，这允许 :option:`migrate --fake-initial` 更容易检测到初始迁"
"移。"

msgid ""
"Added support for serialization of ``functools.partial`` and ``LazyObject`` "
"instances."
msgstr "增加了对 ``functools.partial`` 和 ``LazyObject`` 实例的序列化支持。"

msgid ""
"When supplying ``None`` as a value in :setting:`MIGRATION_MODULES`, Django "
"will consider the app an app without migrations."
msgstr ""
"当在 :setting:`MIGRATION_MODULES` 中提供 ``None`` 作为值时，Django 将考虑该应"
"用程序为没有迁移的应用程序。"

msgid ""
"When applying migrations, the \"Rendering model states\" step that's "
"displayed when running migrate with verbosity 2 or higher now computes only "
"the states for the migrations that have already been applied. The model "
"states for migrations being applied are generated on demand, drastically "
"reducing the amount of required memory."
msgstr ""
"在应用迁移时，当以 verbosity 2 或更高级别运行 migrate 命令时，\" Rendering "
"model states \" 步骤现在仅计算已应用的迁移的模型状态。正在应用的迁移的模型状"
"态将按需生成，大大减少了所需的内存。"

msgid ""
"However, this improvement is not available when unapplying migrations and "
"therefore still requires the precomputation and storage of the intermediate "
"migration states."
msgstr ""
"然而，这个改进在取消应用迁移时不适用，因此仍然需要预先计算和存储中间迁移状"
"态。"

msgid ""
"This improvement also requires that Django no longer supports mixed "
"migration plans. Mixed plans consist of a list of migrations where some are "
"being applied and others are being unapplied. This was never officially "
"supported and never had a public API that supports this behavior."
msgstr ""
"这个改进还要求 Django 不再支持混合迁移计划。混合计划包含一系列迁移，其中一些"
"正在应用，而其他一些正在取消应用。这从未得到官方支持，并且从未有过公共 API 来"
"支持这种行为。"

msgid ""
"The :djadmin:`squashmigrations` command now supports specifying the starting "
"migration from which migrations will be squashed."
msgstr ":djadmin:`squashmigrations` 命令现在支持指定要压缩的迁移的起始迁移。"

msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` "
"now works on proxy models."
msgstr ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` "
"现在可以在代理模型上使用。"

msgid ""
"Database configuration gained a :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` "
"option for interacting with databases that store datetimes in local time and "
"don't support time zones when :setting:`USE_TZ` is ``True``."
msgstr ""
"数据库配置增加了一个 :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` 选项，用于与"
"在 :setting:`USE_TZ` 为 ``True`` 时不支持时区的数据库交互，这些数据库将日期时"
"间存储在本地时间中。"

msgid ""
"Added the :meth:`RelatedManager.set() <django.db.models.fields.related."
"RelatedManager.set()>` method to the related managers created by "
"``ForeignKey``, ``GenericForeignKey``, and ``ManyToManyField``."
msgstr ""
"新增了 :meth:`RelatedManager.set() <django.db.models.fields.related."
"RelatedManager.set()>` 方法，用于与由 ``ForeignKey``、``GenericForeignKey`` "
"和 ``ManyToManyField`` 创建的相关管理器交互。"

msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.add` method on a "
"reverse foreign key now has a ``bulk`` parameter to allow executing one "
"query regardless of the number of objects being added rather than one query "
"per object."
msgstr ""
":meth:`~django.db.models.fields.related.RelatedManager.add` 方法在反向外键上"
"现在有一个 ``bulk`` 参数，允许执行一个查询，而不管要添加的对象数量如何，而不"
"是每个对象执行一个查询。"

msgid ""
"Added the ``keep_parents`` parameter to :meth:`Model.delete() <django.db."
"models.Model.delete>` to allow deleting only a child's data in a model that "
"uses multi-table inheritance."
msgstr ""
"在 :meth:`Model.delete() <django.db.models.Model.delete>` 方法中添加了 "
"``keep_parents`` 参数，允许仅删除使用多表继承的模型中子模型的数据。"

msgid ""
":meth:`Model.delete() <django.db.models.Model.delete>` and :meth:`QuerySet."
"delete() <django.db.models.query.QuerySet.delete>` return the number of "
"objects deleted."
msgstr ""
":meth:`Model.delete() <django.db.models.Model.delete>` 和 :meth:`QuerySet."
"delete() <django.db.models.query.QuerySet.delete>` 返回被删除的对象数量。"

msgid ""
"Added a system check to prevent defining both ``Meta.ordering`` and "
"``order_with_respect_to`` on the same model."
msgstr ""
"添加了一个系统检查，防止在同一模型上同时定义 ``Meta.ordering`` 和 "
"``order_with_respect_to``。"

msgid ""
":lookup:`Date and time <year>` lookups can be chained with other lookups "
"(such as :lookup:`exact`, :lookup:`gt`, :lookup:`lt`, etc.). For example: "
"``Entry.objects.filter(pub_date__month__gt=6)``."
msgstr ""
":lookup:`日期和时间 <year>` 查询可以与其他查询（如 :lookup:`exact`, :lookup:"
"`gt`, :lookup:`lt` 等）链接使用。例如：``Entry.objects."
"filter(pub_date__month__gt=6)``。"

msgid ""
"Time lookups (hour, minute, second) are now supported by :class:`~django.db."
"models.TimeField` for all database backends. Support for backends other than "
"SQLite was added but undocumented in Django 1.7."
msgstr ""
"时间查询（小时，分钟，秒）现在对所有数据库后端都受到 :class:`~django.db."
"models.TimeField` 的支持。在 Django 1.7 中添加了对除 SQLite 外的后端的支持，"
"但未记录在文档中。"

msgid ""
"You can specify the ``output_field`` parameter of the :class:`~django.db."
"models.Avg` aggregate in order to aggregate over non-numeric columns, such "
"as ``DurationField``."
msgstr ""
"你可以通过指定 :class:`~django.db.models.Avg` 聚合的 ``output_field`` 参数来"
"对非数字列（如 ``DurationField``）进行聚合。"

msgid ""
"Added the :lookup:`date` lookup to :class:`~django.db.models.DateTimeField` "
"to allow querying the field by only the date portion."
msgstr ""
"在 :class:`~django.db.models.DateTimeField` 中添加了 :lookup:`date` 查询，允"
"许仅查询字段的日期部分。"

msgid ""
"Added the :class:`~django.db.models.functions.Greatest` and :class:`~django."
"db.models.functions.Least` database functions."
msgstr ""
"添加了 :class:`~django.db.models.functions.Greatest` 和 :class:`~django.db."
"models.functions.Least` 数据库函数。"

msgid ""
"Added the :class:`~django.db.models.functions.Now` database function, which "
"returns the current date and time."
msgstr ""
"添加了 :class:`~django.db.models.functions.Now` 数据库函数，该函数返回当前的"
"日期和时间。"

msgid ""
":class:`~django.db.models.Transform` is now a subclass of :ref:`Func() <func-"
"expressions>` which allows ``Transform``\\s to be used on the right hand "
"side of an expression, just like regular ``Func``\\s. This allows "
"registering some database functions like :class:`~django.db.models.functions."
"Length`, :class:`~django.db.models.functions.Lower`, and :class:`~django.db."
"models.functions.Upper` as transforms."
msgstr ""
":class:`~django.db.models.Transform` 现在是 :ref:`Func() <func-expressions>` "
"的子类，这使得 ``Transform`` 可以像常规的 ``Func`` 一样用在表达式的右侧。这允"
"许注册一些数据库函数，如 :class:`~django.db.models.functions.Length`、:class:"
"`~django.db.models.functions.Lower` 和 :class:`~django.db.models.functions."
"Upper` 作为转换函数。"

msgid ""
":class:`~django.db.models.SlugField` now accepts an :attr:`~django.db.models."
"SlugField.allow_unicode` argument to allow Unicode characters in slugs."
msgstr ""
":class:`~django.db.models.SlugField` 现在接受一个 :attr:`~django.db.models."
"SlugField.allow_unicode` 参数，允许在 slug 中使用 Unicode 字符。"

msgid "Added support for referencing annotations in ``QuerySet.distinct()``."
msgstr "在 ``QuerySet.distinct()`` 中增加了对注解引用的支持。"

msgid ""
"``connection.queries`` shows queries with substituted parameters on SQLite."
msgstr "``connection.queries`` 在 SQLite 上显示带有替代参数的查询。"

msgid ""
":doc:`Query expressions </ref/models/expressions>` can now be used when "
"creating new model instances using ``save()``, ``create()``, and "
"``bulk_create()``."
msgstr ""
":doc:`查询表达式 </ref/models/expressions>` 现在可以在使用 ``save()``, "
"``create()`` 和 ``bulk_create()`` 创建新模型实例时使用。"

msgid ""
"Unless :attr:`HttpResponse.reason_phrase <django.http.HttpResponse."
"reason_phrase>` is explicitly set, it now is determined by the current value "
"of :attr:`HttpResponse.status_code <django.http.HttpResponse.status_code>`. "
"Modifying the value of ``status_code`` outside of the constructor will also "
"modify the value of ``reason_phrase``."
msgstr ""
"除非显式设置 :attr:`HttpResponse.reason_phrase <django.http.HttpResponse."
"reason_phrase>`，否则它现在由 :attr:`HttpResponse.status_code <django.http."
"HttpResponse.status_code>` 的当前值确定。在构造函数之外修改 ``status_code`` "
"的值也会修改 ``reason_phrase`` 的值。"

msgid "The debug view now shows details of chained exceptions on Python 3."
msgstr "调试视图现在在 Python 3 上显示链式异常的详细信息。"

msgid ""
"The default 40x error views now accept a second positional parameter, the "
"exception that triggered the view."
msgstr "默认的 40x 错误视图现在接受第二个位置参数，即触发视图的异常。"

msgid ""
"View error handlers now support :class:`~django.template.response."
"TemplateResponse`, commonly used with class-based views."
msgstr ""
"视图错误处理程序现在支持 :class:`~django.template.response."
"TemplateResponse`，这在使用基于类的视图时常常使用。"

msgid ""
"Exceptions raised by the ``render()`` method are now passed to the "
"``process_exception()`` method of each middleware."
msgstr ""
"由 ``render()`` 方法引发的异常现在会传递给每个中间件的 "
"``process_exception()`` 方法。"

msgid ""
"Request middleware can now set :attr:`HttpRequest.urlconf <django.http."
"HttpRequest.urlconf>` to ``None`` to revert any changes made by previous "
"middleware and return to using the :setting:`ROOT_URLCONF`."
msgstr ""
"请求中间件现在可以将 :attr:`HttpRequest.urlconf <django.http.HttpRequest."
"urlconf>` 设置为 ``None``，以撤销之前中间件所做的任何更改并返回使用 :setting:"
"`ROOT_URLCONF`。"

msgid ""
"The :setting:`DISALLOWED_USER_AGENTS` check in :class:`~django.middleware."
"common.CommonMiddleware` now raises a :class:`~django.core.exceptions."
"PermissionDenied` exception as opposed to returning an :class:`~django.http."
"HttpResponseForbidden` so that :data:`~django.conf.urls.handler403` is "
"invoked."
msgstr ""
"在 :class:`~django.middleware.common.CommonMiddleware` 中的 :setting:"
"`DISALLOWED_USER_AGENTS` 检查现在引发 :class:`~django.core.exceptions."
"PermissionDenied` 异常，而不是返回 :class:`~django.http."
"HttpResponseForbidden`，以便调用 :data:`~django.conf.urls.handler403`。"

msgid ""
"Added :meth:`HttpRequest.get_port() <django.http.HttpRequest.get_port>` to "
"fetch the originating port of the request."
msgstr ""
"添加了 :meth:`HttpRequest.get_port() <django.http.HttpRequest.get_port>` 方"
"法，用于获取请求的起始端口。"

msgid ""
"Added the ``json_dumps_params`` parameter to :class:`~django.http."
"JsonResponse` to allow passing keyword arguments to the ``json.dumps()`` "
"call used to generate the response."
msgstr ""
"在 :class:`~django.http.JsonResponse` 中添加了 ``json_dumps_params`` 参数，允"
"许将关键字参数传递给用于生成响应的 ``json.dumps()`` 调用。"

msgid ""
"The :class:`~django.middleware.common.BrokenLinkEmailsMiddleware` now "
"ignores 404s when the referer is equal to the requested URL. To circumvent "
"the empty referer check already implemented, some web bots set the referer "
"to the requested URL."
msgstr ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` 现在在引用者等"
"于请求的 URL 时忽略 404 错误。为了规避已经实施的空引用检查，一些网络爬虫将引"
"用者设置为请求的 URL。"

msgid ""
"Template tags created with the :meth:`~django.template.Library.simple_tag` "
"helper can now store results in a template variable by using the ``as`` "
"argument."
msgstr ""
"使用 :meth:`~django.template.Library.simple_tag` 辅助程序创建的模板标签现在可"
"以使用 ``as`` 参数将结果存储在模板变量中。"

msgid ""
"Added a :meth:`Context.setdefault() <django.template.Context.setdefault>` "
"method."
msgstr ""
"添加了 :meth:`Context.setdefault() <django.template.Context.setdefault>` 方"
"法。"

msgid ""
"The :ref:`django.template <django-template-logger>` logger was added and "
"includes the following messages:"
msgstr ""
"添加了 :ref:`django.template <django-template-logger>` 记录器，并包括以下消"
"息："

msgid "A ``DEBUG`` level message for missing context variables."
msgstr "对于缺少上下文变量的情况，添加了一个 ``DEBUG`` 级别的消息。"

msgid ""
"A ``WARNING`` level message for uncaught exceptions raised during the "
"rendering of an ``{% include %}`` when debug mode is off (helpful since ``{% "
"include %}`` silences the exception and returns an empty string)."
msgstr ""
"在关闭调试模式时，对于在渲染 ``{% include %}`` 期间引发的未捕获异常，添加了一"
"个 ``WARNING`` 级别的消息（这对于 ``{% include %}`` 会将异常消除并返回空字符"
"串的情况很有帮助）。"

msgid ""
"The :ttag:`firstof` template tag supports storing the output in a variable "
"using 'as'."
msgstr ":ttag:`firstof` 模板标签支持使用 'as' 将输出存储在一个变量中。"

msgid ""
":meth:`Context.update() <django.template.Context.update>` can now be used as "
"a context manager."
msgstr ""
":meth:`Context.update() <django.template.Context.update>` can now be used as "
"a context manager."

msgid "Django template loaders can now extend templates recursively."
msgstr "Django 模板加载器现在可以递归地扩展模板。"

msgid ""
"The debug page template postmortem now include output from each engine that "
"is installed."
msgstr "调试页面模板的事后分析现在包括安装的每个引擎的输出。"

msgid ""
":ref:`Debug page integration <template-debug-integration>` for custom "
"template engines was added."
msgstr ""
"为自定义模板引擎添加了 :ref:`调试页面集成 <template-debug-integration>`。"

msgid ""
"The :class:`~django.template.backends.django.DjangoTemplates` backend gained "
"the ability to register libraries and builtins explicitly through the "
"template :setting:`OPTIONS <TEMPLATES-OPTIONS>`."
msgstr ""
":class:`~django.template.backends.django.DjangoTemplates` 后端通过模板 :"
"setting:`OPTIONS <TEMPLATES-OPTIONS>` 获得了明确注册库和内置函数的能力。"

msgid ""
"The ``timesince`` and ``timeuntil`` filters were improved to deal with leap "
"years when given large time spans."
msgstr ""
"``timesince`` 和 ``timeuntil`` 过滤器在处理大时间跨度时进行了改进，以应对闰"
"年。"

msgid ""
"The ``include`` tag now caches parsed templates objects during template "
"rendering, speeding up reuse in places such as for loops."
msgstr ""
"``include`` 标签现在在模板渲染期间缓存解析的模板对象，加快了在诸如 for 循环等"
"地方的重复使用。"

msgid ""
"Added the :meth:`json() <django.test.Response.json>` method to test client "
"responses to give access to the response body as JSON."
msgstr ""
"在测试客户端响应中添加了 :meth:`json() <django.test.Response.json>` 方法，以"
"便访问响应体作为 JSON。"

msgid ""
"Added the :meth:`~django.test.Client.force_login()` method to the test "
"client. Use this method to simulate the effect of a user logging into the "
"site while skipping the authentication and verification steps of :meth:"
"`~django.test.Client.login()`."
msgstr ""
"在测试客户端中添加了 :meth:`~django.test.Client.force_login()` 方法。使用该方"
"法模拟用户登录站点的效果，同时跳过 :meth:`~django.test.Client.login()` 的身份"
"验证和验证步骤。"

msgid ""
"Regular expression lookaround assertions are now allowed in URL patterns."
msgstr "URL 模式中现在允许使用正则表达式的环视断言。"

msgid ""
"The application namespace can now be set using an ``app_name`` attribute on "
"the included module or object. It can also be set by passing a 2-tuple of "
"(<list of patterns>, <application namespace>) as the first argument to "
"``include()``."
msgstr ""
"应用程序命名空间现在可以通过在包含的模块或对象上设置 ``app_name`` 属性来设"
"置。也可以通过将一个 2 元组（<模式列表>，<应用程序命名空间>）作为 "
"``include()`` 的第一个参数来设置。"

msgid "System checks have been added for common URL pattern mistakes."
msgstr "已添加了用于检测常见 URL 模式错误的系统检查。"

msgid ""
"Added :func:`django.core.validators.int_list_validator` to generate "
"validators of strings containing integers separated with a custom character."
msgstr ""
"添加了 :func:`django.core.validators.int_list_validator`，用于生成验证包含整"
"数并用自定义字符分隔的字符串的验证器。"

msgid ""
":class:`~django.core.validators.EmailValidator` now limits the length of "
"domain name labels to 63 characters per :rfc:`1034`."
msgstr ""
":class:`~django.core.validators.EmailValidator` 现在根据 :rfc:`1034`，限制了"
"域名标签的长度为 63 个字符。"

msgid ""
"Added :func:`~django.core.validators.validate_unicode_slug` to validate "
"slugs that may contain Unicode characters."
msgstr ""
"添加了 :func:`~django.core.validators.validate_unicode_slug`，用于验证可能包"
"含 Unicode 字符的 slugs。"

msgid "Backwards incompatible changes in 1.9"
msgstr "1.9 版本中的不向后兼容变更"

msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"ref:`removed-features-1.9` for the features that have reached the end of "
"their deprecation cycle and therefore been removed. If you haven't updated "
"your code within the deprecation timeline for a given feature, its removal "
"may appear as a backwards incompatible change."
msgstr ""
"除了本节中概述的更改之外，请确保查看 :ref:`removed-features-1.9`，了解已经完"
"成弃用周期并因此被移除的功能。如果您没有在给定功能的弃用时间内更新您的代码，"
"其移除可能会被视为不兼容的更改。"

msgid ""
"A couple of new tests rely on the ability of the backend to introspect "
"column defaults (returning the result as ``Field.default``). You can set the "
"``can_introspect_default`` database feature to ``False`` if your backend "
"doesn't implement this. You may want to review the implementation on the "
"backends that Django includes for reference (:ticket:`24245`)."
msgstr ""
"一些新的测试依赖于后端能够自省列的默认值（将结果返回为 ``Field.default``）。"
"如果您的后端没有实现这个功能，您可以将数据库特性 ``can_introspect_default`` "
"设置为 ``False``。您可能希望参考 Django 包含的后端的实现来进行审查（:ticket:"
"`24245`）。"

msgid ""
"Registering a global adapter or converter at the level of the DB-API module "
"to handle time zone information of :class:`~datetime.datetime` values passed "
"as query parameters or returned as query results on databases that don't "
"support time zones is discouraged. It can conflict with other libraries."
msgstr ""
"不鼓励在 DB-API 模块级别注册全局适配器或转换器来处理作为查询参数传递或作为查"
"询结果返回的不支持时区的 :class:`~datetime.datetime` 值的时区信息。这可能会与"
"其他库发生冲突。"

msgid ""
"The recommended way to add a time zone to :class:`~datetime.datetime` values "
"fetched from the database is to register a converter for ``DateTimeField`` "
"in ``DatabaseOperations.get_db_converters()``."
msgstr ""
"向从数据库获取的 :class:`~datetime.datetime` 值添加时区的推荐方法是在 "
"``DatabaseOperations.get_db_converters()`` 中为 ``DateTimeField`` 注册一个转"
"换器。"

msgid ""
"The ``needs_datetime_string_cast`` database feature was removed. Database "
"backends that set it must register a converter instead, as explained above."
msgstr ""
"已移除了 ``needs_datetime_string_cast`` 数据库特性。设置了这个特性的数据库后"
"端必须按照上述说明注册一个转换器。"

msgid ""
"The ``DatabaseOperations.value_to_db_<type>()`` methods were renamed to "
"``adapt_<type>field_value()`` to mirror the ``convert_<type>field_value()`` "
"methods."
msgstr ""
"``DatabaseOperations.value_to_db_<type>()`` 方法被重命名为 "
"``adapt_<type>field_value()``，以与 ``convert_<type>field_value()`` 方法保持"
"一致。"

msgid ""
"To use the new ``date`` lookup, third-party database backends may need to "
"implement the ``DatabaseOperations.datetime_cast_date_sql()`` method."
msgstr ""
"要使用新的 ``date`` 查询，第三方数据库后端可能需要实现 ``DatabaseOperations."
"datetime_cast_date_sql()`` 方法。"

msgid ""
"The ``DatabaseOperations.time_extract_sql()`` method was added. It calls the "
"existing ``date_extract_sql()`` method. This method is overridden by the "
"SQLite backend to add time lookups (hour, minute, second) to :class:`~django."
"db.models.TimeField`, and may be needed by third-party database backends."
msgstr ""
"添加了 ``DatabaseOperations.time_extract_sql()`` 方法。它调用现有的 "
"``date_extract_sql()`` 方法。SQLite 后端会重写此方法，以向 :class:`~django."
"db.models.TimeField` 添加时间查询（小时、分钟、秒），第三方数据库后端可能需要"
"实现此方法。"

msgid ""
"The ``DatabaseOperations.datetime_cast_sql()`` method (not to be confused "
"with ``DatabaseOperations.datetime_cast_date_sql()`` mentioned above) has "
"been removed. This method served to format dates on Oracle long before 1.0, "
"but hasn't been overridden by any core backend in years and hasn't been "
"called anywhere in Django's code or tests."
msgstr ""
"已删除 ``DatabaseOperations.datetime_cast_sql()`` 方法（请不要与上面提到的 "
"``DatabaseOperations.datetime_cast_date_sql()`` 混淆）。这个方法在很多年前用"
"于在 Oracle 上格式化日期，但很多年来没有被任何核心后端重写，也没有在 Django "
"代码或测试中被调用过。"

msgid ""
"In order to support test parallelization, you must implement the "
"``DatabaseCreation._clone_test_db()`` method and set ``DatabaseFeatures."
"can_clone_databases = True``. You may have to adjust ``DatabaseCreation."
"get_test_db_clone_settings()``."
msgstr ""
"为了支持测试并行化，您必须实现 ``DatabaseCreation._clone_test_db()`` 方法并设"
"置 ``DatabaseFeatures.can_clone_databases = True``。您可能需要调整 "
"``DatabaseCreation.get_test_db_clone_settings()``。"

msgid "Default settings that were tuples are now lists"
msgstr "原来的默认设置是元组，现在改为列表"

msgid ""
"The default settings in ``django.conf.global_settings`` were a combination "
"of lists and tuples. All settings that were formerly tuples are now lists."
msgstr ""
"在 ``django.conf.global_settings`` 中的默认设置原来是列表和元组的组合。以前是"
"元组的所有设置现在都改为了列表。"

msgid "``is_usable`` attribute on template loaders is removed"
msgstr "模板加载器上的 ``is_usable`` 属性已被移除。"

msgid ""
"Django template loaders previously required an ``is_usable`` attribute to be "
"defined. If a loader was configured in the template settings and this "
"attribute was ``False``, the loader would be silently ignored. In practice, "
"this was only used by the egg loader to detect if ``setuptools`` was "
"installed. The ``is_usable`` attribute is now removed and the egg loader "
"instead fails at runtime if ``setuptools`` is not installed."
msgstr ""
"以前，Django 模板加载器需要定义一个 ``is_usable`` 属性。如果在模板设置中配置"
"了一个加载器并且该属性为 ``False``，则加载器将被静默忽略。在实际应用中，这只"
"有 egg 加载器用于检测是否安装了 ``setuptools``。现在已删除 ``is_usable`` 属"
"性，而 egg 加载器在运行时如果没有安装 ``setuptools`` 则会失败。"

msgid "Related set direct assignment"
msgstr "相关集合直接赋值"

msgid ""
"Direct assignment of related objects in the ORM used to perform a "
"``clear()`` followed by a call to ``add()``. This caused needlessly large "
"data changes and prevented using the :data:`~django.db.models.signals."
"m2m_changed` signal to track individual changes in many-to-many relations."
msgstr ""
"在 ORM 中直接分配相关对象以前会执行 ``clear()``，然后调用 ``add()``。这导致了"
"不必要的大量数据更改，并且阻止使用 :data:`~django.db.models.signals."
"m2m_changed` 信号来跟踪多对多关系中的个别更改。"

msgid ""
"Direct assignment now relies on the new :meth:`~django.db.models.fields."
"related.RelatedManager.set` method on related managers which by default only "
"processes changes between the existing related set and the one that's newly "
"assigned. The previous behavior can be restored by replacing direct "
"assignment by a call to ``set()`` with the keyword argument ``clear=True``."
msgstr ""
"直接赋值现在依赖于相关管理器上的新 :meth:`~django.db.models.fields.related."
"RelatedManager.set` 方法，默认情况下只处理现有相关集合与新分配的相关集合之间"
"的更改。可以通过将直接赋值替换为带有关键字参数 ``clear=True`` 的 ``set()`` 调"
"用来恢复先前的行为。"

msgid ""
"``ModelForm``, and therefore ``ModelAdmin``, internally rely on direct "
"assignment for many-to-many relations and as a consequence now use the new "
"behavior."
msgstr ""
"``ModelForm``，因此 ``ModelAdmin``，在内部对于多对多关系依赖于直接赋值，并因"
"此现在使用新行为。"

msgid "Filesystem-based template loaders catch more specific exceptions"
msgstr "基于文件系统的模板加载器捕获更具体的异常"

msgid ""
"When using the :class:`filesystem.Loader <django.template.loaders.filesystem."
"Loader>` or :class:`app_directories.Loader <django.template.loaders."
"app_directories.Loader>` template loaders, earlier versions of Django raised "
"a :exc:`~django.template.TemplateDoesNotExist` error if a template source "
"existed but was unreadable. This could happen under many circumstances, such "
"as if Django didn't have permissions to open the file, or if the template "
"source was a directory. Now, Django only silences the exception if the "
"template source does not exist. All other situations result in the original "
"``IOError`` being raised."
msgstr ""
"使用 :class:`filesystem.Loader <django.template.loaders.filesystem.Loader>` "
"或 :class:`app_directories.Loader <django.template.loaders.app_directories."
"Loader>` 模板加载器时，较早版本的 Django 如果模板源存在但不可读，会引发 :exc:"
"`~django.template.TemplateDoesNotExist` 错误。这可能发生在许多情况下，例如如"
"果 Django 没有权限打开文件，或者模板源是一个目录。现在，只有当模板源不存在"
"时，Django 才会抑制异常。所有其他情况都会引发原始的 ``IOError``。"

msgid "HTTP redirects no longer forced to absolute URIs"
msgstr "HTTP 重定向不再强制要求使用绝对 URI"

msgid ""
"Relative redirects are no longer converted to absolute URIs. :rfc:`2616` "
"required the ``Location`` header in redirect responses to be an absolute "
"URI, but it has been superseded by :rfc:`7231` which allows relative URIs in "
"``Location``, recognizing the actual practice of user agents, almost all of "
"which support them."
msgstr ""
"相对重定向不再被转换为绝对 URI。:rfc:`2616` 要求重定向响应中的 ``Location`` "
"标头必须是绝对 URI，但它已被 :rfc:`7231` 取代，允许在 ``Location`` 中使用相"
"对 URI，承认用户代理的实际实践，几乎所有用户代理都支持相对 URI。"

msgid ""
"Consequently, the expected URLs passed to ``assertRedirects`` should "
"generally no longer include the scheme and domain part of the URLs. For "
"example, ``self.assertRedirects(response, 'http://testserver/some-url/')`` "
"should be replaced by ``self.assertRedirects(response, '/some-url/')`` "
"(unless the redirection specifically contained an absolute URL)."
msgstr ""
"因此，传递给 ``assertRedirects`` 的预期 URL 通常不再应包括 URL 的方案和域部"
"分。例如，``self.assertRedirects(response, 'http://testserver/some-url/')`` "
"应该替换为 ``self.assertRedirects(response, '/some-url/')`` （除非重定向明确"
"包含绝对 URL）。"

msgid ""
"In the rare case that you need the old behavior (discovered with an ancient "
"version of Apache with ``mod_scgi`` that interprets a relative redirect as "
"an \"internal redirect\"), you can restore it by writing a custom "
"middleware::"
msgstr ""
"在极少数情况下，如果您需要旧的行为（使用一个古老版本的 Apache 和 "
"``mod_scgi`` 发现将相对重定向解释为 \"内部重定向\" 的情况），您可以通过编写自"
"定义中间件来恢复它："

msgid "Dropped support for PostgreSQL 9.0"
msgstr "不再支持 PostgreSQL 9.0 版本"

msgid ""
"Upstream support for PostgreSQL 9.0 ended in September 2015. As a "
"consequence, Django 1.9 sets 9.1 as the minimum PostgreSQL version it "
"officially supports."
msgstr ""
"PostgreSQL 9.0 的上游支持于 2015 年 9 月结束。因此，Django 1.9 将 9.1 版本设"
"定为其正式支持的最低 PostgreSQL 版本。"

msgid "Dropped support for Oracle 11.1"
msgstr "不再支持 Oracle 11.1 版本"

msgid ""
"Upstream support for Oracle 11.1 ended in August 2015. As a consequence, "
"Django 1.9 sets 11.2 as the minimum Oracle version it officially supports."
msgstr ""
"Oracle 11.1 的上游支持于 2015 年 8 月结束。因此，Django 1.9 将 11.2 版本设定"
"为其正式支持的最低 Oracle 版本。"

msgid "Bulk behavior of ``add()`` method of related managers"
msgstr "关于相关管理器的 ``add()`` 方法的批量行为"

msgid ""
"To improve performance, the ``add()`` methods of the related managers "
"created by ``ForeignKey`` and ``GenericForeignKey`` changed from a series of "
"``Model.save()`` calls to a single ``QuerySet.update()`` call. The change "
"means that ``pre_save`` and ``post_save`` signals aren't sent anymore. You "
"can use the ``bulk=False`` keyword argument to revert to the previous "
"behavior."
msgstr ""
"为了提高性能，由 ``ForeignKey`` 和 ``GenericForeignKey`` 创建的相关管理器的 "
"``add()`` 方法从一系列 ``Model.save()`` 调用改为单个 ``QuerySet.update()`` 调"
"用。这个变化意味着不再发送 ``pre_save`` 和 ``post_save`` 信号。您可以使用 "
"``bulk=False`` 关键字参数来恢复到以前的行为。"

msgid "Template ``LoaderOrigin`` and ``StringOrigin`` are removed"
msgstr "模板中移除了 ``LoaderOrigin`` 和 ``StringOrigin``"

msgid ""
"In previous versions of Django, when a template engine was initialized with "
"debug as ``True``, an instance of ``django.template.loader.LoaderOrigin`` or "
"``django.template.base.StringOrigin`` was set as the origin attribute on the "
"template object. These classes have been combined into :class:`~django."
"template.base.Origin` and is now always set regardless of the engine debug "
"setting. For a minimal level of backwards compatibility, the old class names "
"will be kept as aliases to the new ``Origin`` class until Django 2.0."
msgstr ""
"在之前的 Django 版本中，当一个模板引擎以 ``True`` 的调试设置初始化时，一个 "
"``django.template.loader.LoaderOrigin`` 或 ``django.template.base."
"StringOrigin`` 的实例被设置为模板对象的 origin 属性。这些类已经合并为 :class:"
"`~django.template.base.Origin`，并且无论引擎的调试设置如何，都会始终设置。为"
"了最小程度的向后兼容性，旧的类名将保留为新的 ``Origin`` 类的别名，直到 "
"Django 2.0。"

msgid "Changes to the default logging configuration"
msgstr "默认日志配置的更改"

msgid ""
"To make it easier to write custom logging configurations, Django's default "
"logging configuration no longer defines ``django.request`` and ``django."
"security`` loggers. Instead, it defines a single ``django`` logger, filtered "
"at the ``INFO`` level, with two handlers:"
msgstr ""
"为了更容易编写自定义的日志配置，Django 的默认日志配置不再定义 ``django."
"request`` 和 ``django.security`` 记录器。取而代之的是，它定义了一个名为 "
"``django`` 的记录器，过滤级别为 ``INFO``，具有两个处理程序："

msgid ""
"``console``: filtered at the ``INFO`` level and only active if "
"``DEBUG=True``."
msgstr "``console``：过滤级别为 ``INFO``，仅在 ``DEBUG=True`` 时激活。"

msgid ""
"``mail_admins``: filtered at the ``ERROR`` level and only active if "
"``DEBUG=False``."
msgstr "``mail_admins``：过滤级别为 ``ERROR``，仅在 ``DEBUG=False`` 时激活。"

msgid ""
"If you aren't overriding Django's default logging, you should see minimal "
"changes in behavior, but you might see some new logging to the ``runserver`` "
"console, for example."
msgstr ""
"如果您没有覆盖 Django 的默认日志配置，您的行为应该只会发生较少的变化，但您可"
"能会在 ``runserver`` 控制台上看到一些新的日志记录，例如。"

msgid ""
"If you are overriding Django's default logging, you should check to see how "
"your configuration merges with the new defaults."
msgstr ""
"如果您正在覆盖 Django 的默认日志配置，您应该检查您的配置与新默认值如何合并。"

msgid "``HttpRequest`` details in error reporting"
msgstr "在错误报告中的 ``HttpRequest`` 详细信息"

msgid ""
"It was redundant to display the full details of the :class:`~django.http."
"HttpRequest` each time it appeared as a stack frame variable in the HTML "
"version of the debug page and error email. Thus, the HTTP request will now "
"display the same standard representation as other variables "
"(``repr(request)``). As a result, the ``ExceptionReporterFilter."
"get_request_repr()`` method and the undocumented ``django.http."
"build_request_repr()`` function were removed."
msgstr ""
"每次在调试页面的 HTML 版本和错误邮件中作为堆栈帧变量出现时都显示完整的 :"
"class:`~django.http.HttpRequest` 详细信息是多余的。因此，HTTP 请求现在将显示"
"与其他变量相同的标准表示形式（``repr(request)``）。因此，删除了 "
"``ExceptionReporterFilter.get_request_repr()`` 方法和未记录的 ``django.http."
"build_request_repr()`` 函数。"

msgid ""
"The contents of the text version of the email were modified to provide a "
"traceback of the same structure as in the case of AJAX requests. The "
"traceback details are rendered by the ``ExceptionReporter."
"get_traceback_text()`` method."
msgstr ""
"电子邮件的文本版本内容已修改，以提供与 AJAX 请求的情况相同结构的回溯。回溯详"
"细信息由 ``ExceptionReporter.get_traceback_text()`` 方法呈现。"

msgid "Removal of time zone aware global adapters and converters for datetimes"
msgstr "移除了日期时间的时区感知全局适配器和转换器"

msgid ""
"Django no longer registers global adapters and converters for managing time "
"zone information on :class:`~datetime.datetime` values sent to the database "
"as query parameters or read from the database in query results. This change "
"affects projects that meet all the following conditions:"
msgstr ""
"Django 不再注册全局适配器和转换器来管理发送到数据库的查询参数中的 :class:"
"`~datetime.datetime` 值的时区信息，以及从查询结果中读取的时区信息。这个变化影"
"响满足以下所有条件的项目："

msgid "The :setting:`USE_TZ` setting is ``True``."
msgstr ":setting:`USE_TZ` 设置为 ``True``。"

msgid ""
"The database is SQLite, MySQL, Oracle, or a third-party database that "
"doesn't support time zones. In doubt, you can check the value of "
"``connection.features.supports_timezones``."
msgstr ""
"数据库是 SQLite、MySQL、Oracle 或不支持时区的第三方数据库。如有疑问，您可以检"
"查 ``connection.features.supports_timezones`` 的值。"

msgid ""
"The code queries the database outside of the ORM, typically with ``cursor."
"execute(sql, params)``."
msgstr "代码在 ORM 之外查询数据库，通常使用 ``cursor.execute(sql, params)``。"

msgid ""
"If you're passing aware :class:`~datetime.datetime` parameters to such "
"queries, you should turn them into naive datetimes in UTC::"
msgstr ""
"如果您将感知的 :class:`~datetime.datetime` 参数传递给这些查询，您应该将它们转"
"换为 UTC 中的非感知日期时间："

msgid ""
"If you fail to do so, the conversion will be performed as in earlier "
"versions (with a deprecation warning) up until Django 1.11. Django 2.0 won't "
"perform any conversion, which may result in data corruption."
msgstr ""
"如果您未这样做，转换将按照早期版本（带有弃用警告）中的方式执行，直到 Django "
"1.11 为止。 Django 2.0 不会执行任何转换，这可能导致数据损坏。"

msgid ""
"If you're reading :class:`~datetime.datetime` values from the results, they "
"will be naive instead of aware. You can compensate as follows::"
msgstr ""
"如果您从结果中读取 :class:`~datetime.datetime` 值，它们将是非感知的，而不是感"
"知的。您可以按以下方式进行补偿："

msgid ""
"You don't need any of this if you're querying the database through the ORM, "
"even if you're using :meth:`raw() <django.db.models.query.QuerySet.raw>` "
"queries. The ORM takes care of managing time zone information."
msgstr ""
"如果您通过 ORM 查询数据库，即使使用 :meth:`raw() <django.db.models.query."
"QuerySet.raw>` 查询，也不需要进行上述操作。ORM 会处理时区信息的管理。"

msgid "Template tag modules are imported when templates are configured"
msgstr "在配置模板时导入模板标签模块"

msgid ""
"The :class:`~django.template.backends.django.DjangoTemplates` backend now "
"performs discovery on installed template tag modules when instantiated. This "
"update enables libraries to be provided explicitly via the ``'libraries'`` "
"key of :setting:`OPTIONS <TEMPLATES-OPTIONS>` when defining a :class:"
"`~django.template.backends.django.DjangoTemplates` backend. Import or syntax "
"errors in template tag modules now fail early at instantiation time rather "
"than when a template with a :ttag:`{% load %}<load>` tag is first compiled."
msgstr ""
":class:`~django.template.backends.django.DjangoTemplates` 后端现在在实例化时"
"执行已安装的模板标签模块的发现。此更新使得在定义 :class:`~django.template."
"backends.django.DjangoTemplates` 后端时，可以通过 :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>` 的 ``'libraries'`` 键明确提供库。模板标签模块中的导入或"
"语法错误现在会在实例化时提前失败，而不是在首次编译带有 :ttag:`{% load %}"
"<load>` 标签的模板时失败。"

msgid "``django.template.base.add_to_builtins()`` is removed"
msgstr "已删除 ``django.template.base.add_to_builtins()``。"

msgid ""
"Although it was a private API, projects commonly used ``add_to_builtins()`` "
"to make template tags and filters available without using the :ttag:`{% load "
"%}<load>` tag. This API has been formalized. Projects should now define "
"built-in libraries via the ``'builtins'`` key of :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>` when defining a :class:`~django.template.backends."
"django.DjangoTemplates` backend."
msgstr ""
"虽然它是一个私有 API，但项目通常使用 ``add_to_builtins()`` 来使模板标签和过滤"
"器在不使用 :ttag:`{% load %}<load>` 标签的情况下可用。这个 API 已经正式化。现"
"在项目应该在定义 :class:`~django.template.backends.django.DjangoTemplates` 后"
"端时，通过 :setting:`OPTIONS <TEMPLATES-OPTIONS>` 的 ``'builtins'`` 键来定义"
"内置库。"

msgid "``simple_tag`` now wraps tag output in ``conditional_escape``"
msgstr "``simple_tag`` 现在在标签输出中包装了 ``conditional_escape``"

msgid ""
"In general, template tags do not autoescape their contents, and this "
"behavior is :ref:`documented <tags-auto-escaping>`. For tags like :class:"
"`~django.template.Library.inclusion_tag`, this is not a problem because the "
"included template will perform autoescaping. For ``assignment_tag()``, the "
"output will be escaped when it is used as a variable in the template."
msgstr ""
"通常，模板标签不会自动转义其内容，这种行为是被 :ref:`文档记录的 <tags-auto-"
"escaping>`。对于像 :class:`~django.template.Library.inclusion_tag` 这样的标"
"签，这不是问题，因为被包含的模板会执行自动转义。对于 ``assignment_tag()``，当"
"它在模板中作为变量使用时，输出会被转义。"

msgid ""
"For the intended use cases of :class:`~django.template.Library.simple_tag`, "
"however, it is very easy to end up with incorrect HTML and possibly an XSS "
"exploit. For example::"
msgstr ""
"然而，对于 :class:`~django.template.Library.simple_tag` 的预期用例，很容易出"
"现不正确的 HTML 和可能的 XSS 攻击。例如："

msgid ""
"In older versions of Django, this will be an XSS issue because ``user."
"first_name`` is not escaped."
msgstr ""
"在较早版本的 Django 中，这将是一个 XSS 问题，因为``user.first_name`` 没有经过"
"转义。"

msgid ""
"In Django 1.9, this is fixed: if the template context has "
"``autoescape=True`` set (the default), then ``simple_tag`` will wrap the "
"output of the tag function with :func:`~django.utils.html."
"conditional_escape`."
msgstr ""
"在 Django 1.9 中，这个问题得到了修复：如果模板上下文设置了 "
"``autoescape=True`` （默认值），那么 ``simple_tag`` 将使用 :func:`~django."
"utils.html.conditional_escape` 包装标签函数的输出。"

msgid ""
"To fix your ``simple_tag``\\s, it is best to apply the following practices:"
msgstr "要修复您的 ``simple_tag``，最好遵循以下实践："

msgid ""
"Any code that generates HTML should use either the template system or :func:"
"`~django.utils.html.format_html`."
msgstr ""
"生成 HTML 的任何代码都应该使用模板系统或 :func:`~django.utils.html."
"format_html`。"

msgid ""
"If the output of a ``simple_tag`` needs escaping, use :func:`~django.utils."
"html.escape` or :func:`~django.utils.html.conditional_escape`."
msgstr ""
"如果 ``simple_tag`` 的输出需要转义，请使用 :func:`~django.utils.html.escape` "
"或 :func:`~django.utils.html.conditional_escape`。"

msgid ""
"If you are absolutely certain that you are outputting HTML from a trusted "
"source (e.g. a CMS field that stores HTML entered by admins), you can mark "
"it as such using :func:`~django.utils.safestring.mark_safe`."
msgstr ""
"如果您绝对确定您正在输出来自可信源的 HTML（例如，由管理员输入的 HTML 存储在 "
"CMS 字段中），您可以使用 :func:`~django.utils.safestring.mark_safe` 来标记"
"它。"

msgid ""
"Tags that follow these rules will be correct and safe whether they are run "
"on Django 1.9+ or earlier."
msgstr ""
"遵循这些规则的标签无论在 Django 1.9+ 还是之前的版本上运行，都将是正确和安全"
"的。"

msgid "``Paginator.page_range``"
msgstr "``Paginator.page_range``"

msgid ""
":attr:`Paginator.page_range <django.core.paginator.Paginator.page_range>` is "
"now an iterator instead of a list."
msgstr ""
":attr:`Paginator.page_range <django.core.paginator.Paginator.page_range>` 现"
"在是一个迭代器而不是一个列表。"

msgid ""
"In versions of Django previous to 1.8, ``Paginator.page_range`` returned a "
"``list`` in Python 2 and a ``range`` in Python 3. Django 1.8 consistently "
"returned a list, but an iterator is more efficient."
msgstr ""
"在 Django 1.8 之前的版本中，``Paginator.page_range`` 在 Python 2 中返回一个 "
"``list``，在 Python 3 中返回一个 ``range``。Django 1.8 一致返回一个列表，但迭"
"代器更有效率。"

msgid ""
"Existing code that depends on ``list`` specific features, such as indexing, "
"can be ported by converting the iterator into a ``list`` using ``list()``."
msgstr ""
"依赖于 ``list`` 特定功能（如索引）的现有代码可以通过使用 ``list()`` 将迭代器"
"转换为 ``list`` 来迁移。"

msgid "Implicit ``QuerySet`` ``__in`` lookup removed"
msgstr "隐式的 ``QuerySet`` ``__in`` 查询已移除"

msgid "In earlier versions, queries such as::"
msgstr "在早期版本中，类似以下的查询："

msgid "would implicitly convert to::"
msgstr "会隐式转换为："

msgid "resulting in SQL like ``\"related_id IN (SELECT id FROM ...)\"``."
msgstr "这将导致 SQL 查询类似于 ``\"related_id IN (SELECT id FROM ...)\"``。"

msgid ""
"This implicit ``__in`` no longer happens so the \"IN\" SQL is now \"=\", and "
"if the subquery returns multiple results, at least some databases will throw "
"an error."
msgstr ""
"这种隐式的 ``__in`` 不再发生，因此 \"IN\" SQL 现在变成了 \"=\", 如果子查询返"
"回多个结果，至少某些数据库会抛出错误。"

msgid "``contrib.admin`` browser support"
msgstr "``contrib.admin`` 浏览器支持"

msgid ""
"The admin no longer supports Internet Explorer 8 and below, as these "
"browsers have reached end-of-life."
msgstr ""
"管理员不再支持 Internet Explorer 8 及以下版本，因为这些浏览器已经到达生命周期"
"终点。"

msgid ""
"CSS and images to support Internet Explorer 6 and 7 have been removed. PNG "
"and GIF icons have been replaced with SVG icons, which are not supported by "
"Internet Explorer 8 and earlier."
msgstr ""
"已删除支持 Internet Explorer 6 和 7 的 CSS 和图像。 PNG 和 GIF 图标已被替换"
"为 SVG 图标，这些图标不受 Internet Explorer 8 及更早版本的支持。"

msgid ""
"The jQuery library embedded in the admin has been upgraded from version "
"1.11.2 to 2.1.4. jQuery 2.x has the same API as jQuery 1.x, but does not "
"support Internet Explorer 6, 7, or 8, allowing for better performance and a "
"smaller file size. If you need to support IE8 and must also use the latest "
"version of Django, you can override the admin's copy of jQuery with your own "
"by creating a Django application with this structure:"
msgstr ""
"嵌入在管理员中的 jQuery 库已从 1.11.2 版本升级到 2.1.4 版本。 jQuery 2.x 具有"
"与 jQuery 1.x 相同的 API，但不支持 Internet Explorer 6 、 7 或 8，从而实现更"
"好的性能和更小的文件大小。如果您需要支持 IE8 并且必须使用最新版本的 Django，"
"您可以通过创建具有以下结构的 Django 应用程序来覆盖管理员的 jQuery 副本："

msgid "``SyntaxError`` when installing Django ``setuptools`` 5.5.x"
msgstr "在 ``setuptools`` 5.5.x 安装 Django 时出现 ``SyntaxError`` 错误"

msgid ""
"When installing Django 1.9 or 1.9.1 with ``setuptools`` 5.5.x, you'll see:"
msgstr "当使用 ``setuptools`` 5.5.x 安装 Django 1.9 或 1.9.1 时，你会看到："

msgid ""
"It's safe to ignore these errors (Django will still install just fine), but "
"you can avoid them by upgrading ``setuptools`` to a more recent version. If "
"you're using pip, you can upgrade pip using ``python -m pip install -U pip`` "
"which will also upgrade ``setuptools``. This is resolved in later versions "
"of Django as described in the :doc:`/releases/1.9.2`."
msgstr ""
"你可以安全地忽略这些错误（Django 仍然会正常安装），但你可以通过升级 "
"``setuptools`` 到一个更近期的版本来避免它们。如果你使用 pip，你可以使用 "
"``python -m pip install -U pip`` 来升级 pip，这也会升级 ``setuptools``。这个"
"问题在后续版本的 Django 中已经得到解决，如 :doc:`/releases/1.9.2` 中所描述的"
"那样。"

msgid ""
"The jQuery static files in ``contrib.admin`` have been moved into a ``vendor/"
"jquery`` subdirectory."
msgstr ""
"``contrib.admin`` 中的 jQuery 静态文件已经移动到一个名为 ``vendor/jquery`` 的"
"子目录中。"

msgid ""
"The text displayed for null columns in the admin changelist ``list_display`` "
"cells has changed from ``(None)`` (or its translated equivalent) to ``-`` (a "
"dash)."
msgstr ""
"在管理 changelist 的 ``list_display`` 单元格中，空列的显示文本已经从 "
"``(None)`` （或其翻译等效）更改为 ``-`` （破折号）。"

msgid ""
"``django.http.responses.REASON_PHRASES`` and ``django.core.handlers.wsgi."
"STATUS_CODE_TEXT`` have been removed. Use Python's Standard Library "
"instead: :data:`http.client.responses` for Python 3 and `httplib.responses`_ "
"for Python 2."
msgstr ""
"``django.http.responses.REASON_PHRASES`` 和 ``django.core.handlers.wsgi."
"STATUS_CODE_TEXT`` 已被移除。请改为使用 Python 标准库：对于 Python 3，使用 :"
"data:`http.client.responses`，对于 Python 2，使用 `httplib.responses`_。"

msgid "``ValuesQuerySet`` and ``ValuesListQuerySet`` have been removed."
msgstr "``ValuesQuerySet`` 和 ``ValuesListQuerySet`` 已被移除。"

msgid ""
"The ``admin/base.html`` template no longer sets ``window."
"__admin_media_prefix__`` or ``window.__admin_utc_offset__``. Image "
"references in JavaScript that used that value to construct absolute URLs "
"have been moved to CSS for easier customization. The UTC offset is stored on "
"a data attribute of the ``<body>`` tag."
msgstr ""
"``admin/base.html`` 模板不再设置 ``window.__admin_media_prefix__`` 或 "
"``window.__admin_utc_offset__``。在 JavaScript 中使用该值构建绝对 URL 的图像"
"引用已经移动到 CSS 中，以便更容易进行自定义。UTC 偏移量存储在 ``<body>`` 标签"
"的数据属性中。"

msgid ""
"``CommaSeparatedIntegerField`` validation has been refined to forbid values "
"like ``','``, ``',1'``, and ``'1,,2'``."
msgstr ""
"``CommaSeparatedIntegerField`` 的验证已经更加精细化，不再允许像 ``','``、"
"``',1'`` 和 ``'1,,2'`` 这样的值。"

msgid ""
"Form initialization was moved from the :meth:`ProcessFormView.get() <django."
"views.generic.edit.ProcessFormView.get>` method to the new :meth:`FormMixin."
"get_context_data() <django.views.generic.edit.FormMixin.get_context_data>` "
"method. This may be backwards incompatible if you have overridden the "
"``get_context_data()`` method without calling ``super()``."
msgstr ""
"表单的初始化已经从 :meth:`ProcessFormView.get() <django.views.generic.edit."
"ProcessFormView.get>` 方法移动到新的 :meth:`FormMixin.get_context_data() "
"<django.views.generic.edit.FormMixin.get_context_data>` 方法。如果你曾经重写"
"了 ``get_context_data()`` 方法而没有调用 ``super()``，这可能会造成不兼容。"

msgid "Support for PostGIS 1.5 has been dropped."
msgstr "不再支持 PostGIS 1.5 版本。"

msgid ""
"The ``django.contrib.sites.models.Site.domain`` field was changed to be :"
"attr:`~django.db.models.Field.unique`."
msgstr ""
"``django.contrib.sites.models.Site.domain`` 字段已更改为 :attr:`~django.db."
"models.Field.unique`。"

msgid ""
"In order to enforce test isolation, database queries are not allowed by "
"default in :class:`~django.test.SimpleTestCase` tests anymore. You can "
"disable this behavior by setting the ``allow_database_queries`` class "
"attribute to ``True`` on your test class."
msgstr ""
"为了强制执行测试隔离，现在默认情况下在 :class:`~django.test.SimpleTestCase` "
"测试中不允许数据库查询。你可以通过在测试类上设置 ``allow_database_queries`` "
"类属性为 ``True`` 来禁用这个行为。"

msgid ""
"``ResolverMatch.app_name`` was changed to contain the full namespace path in "
"the case of nested namespaces. For consistency with ``ResolverMatch."
"namespace``, the empty value is now an empty string instead of ``None``."
msgstr ""
"``ResolverMatch.app_name`` 已更改，现在在嵌套命名空间的情况下包含完整的命名空"
"间路径。为了与 ``ResolverMatch.namespace`` 保持一致，现在空值是一个空字符串而"
"不是 ``None``。"

msgid "For security hardening, session keys must be at least 8 characters."
msgstr "为了增强安全性，会话密钥必须至少为 8 个字符。"

msgid ""
"Private function ``django.utils.functional.total_ordering()`` has been "
"removed. It contained a workaround for a ``functools.total_ordering()`` bug "
"in Python versions older than 2.7.3."
msgstr ""
"已移除私有函数 ``django.utils.functional.total_ordering()``。它包含了对于早"
"于 Python 2.7.3 版本中 ``functools.total_ordering()`` bug 的一个解决方法。"

msgid ""
"XML serialization (either through :djadmin:`dumpdata` or the syndication "
"framework) used to output any characters it received. Now if the content to "
"be serialized contains any control characters not allowed in the XML 1.0 "
"standard, the serialization will fail with a :exc:`ValueError`."
msgstr ""
"XML 序列化（通过 :djadmin:`dumpdata` 或 syndication 框架）曾经会输出它接收到"
"的任何字符。现在，如果要序列化的内容包含 XML 1.0 标准不允许的控制字符，序列化"
"将会失败并引发 :exc:`ValueError`。"

msgid ""
":class:`~django.forms.CharField` now strips input of leading and trailing "
"whitespace by default. This can be disabled by setting the new :attr:"
"`~django.forms.CharField.strip` argument to ``False``."
msgstr ""
"现在，默认情况下，:class:`~django.forms.CharField` 会自动去除输入的前导和尾随"
"空白。你可以通过将新的 :attr:`~django.forms.CharField.strip` 参数设置为 "
"``False`` 来禁用这个功能。"

msgid ""
"Template text that is translated and uses two or more consecutive percent "
"signs, e.g. ``\"%%\"``, may have a new ``msgid`` after ``makemessages`` is "
"run (most likely the translation will be marked fuzzy). The new ``msgid`` "
"will be marked ``\"#, python-format\"``."
msgstr ""
"在翻译并使用两个或更多连续百分号的模板文本，例如 ``\"%%\"``，在运行 "
"``makemessages`` 后可能会有一个新的 ``msgid`` （很可能翻译会被标记为模糊）。"
"新的 ``msgid`` 将被标记为 ``\"#, python-format\"``。"

msgid ""
"If neither :attr:`request.current_app <django.http.HttpRequest.current_app>` "
"nor :class:`Context.current_app <django.template.Context>` are set, the :"
"ttag:`url` template tag will now use the namespace of the current request. "
"Set ``request.current_app`` to ``None`` if you don't want to use a namespace "
"hint."
msgstr ""
"如果既没有设置 :attr:`request.current_app <django.http.HttpRequest."
"current_app>`，也没有设置 :class:`Context.current_app <django.template."
"Context>`，那么 :ttag:`url` 模板标签现在将使用当前请求的命名空间。如果不想使"
"用命名空间提示，请将 ``request.current_app`` 设置为 ``None``。"

msgid ""
"The :setting:`SILENCED_SYSTEM_CHECKS` setting now silences messages of all "
"levels. Previously, messages of ``ERROR`` level or higher were printed to "
"the console."
msgstr ""
":setting:`SILENCED_SYSTEM_CHECKS` 设置现在会禁止所有级别的消息。以前，"
"``ERROR`` 级别或更高级别的消息会打印到控制台。"

msgid ""
"The ``FlatPage.enable_comments`` field is removed from the ``FlatPageAdmin`` "
"as it's unused by the application. If your project or a third-party app "
"makes use of it, :ref:`create a custom ModelAdmin <flatpages-admin>` to add "
"it back."
msgstr ""
"``FlatPage.enable_comments`` 字段已从 ``FlatPageAdmin`` 中移除，因为它未被应"
"用程序使用。如果你的项目或第三方应用程序使用它，请 :ref:`创建一个自定义的 "
"ModelAdmin <flatpages-admin>` 来将其添加回去。"

msgid ""
"The return value of :meth:`~django.test.runner.DiscoverRunner."
"setup_databases` and the first argument of :meth:`~django.test.runner."
"DiscoverRunner.teardown_databases` changed. They used to be ``(old_names, "
"mirrors)`` tuples. Now they're just the first item, ``old_names``."
msgstr ""
":meth:`~django.test.runner.DiscoverRunner.setup_databases` 的返回值和 :meth:"
"`~django.test.runner.DiscoverRunner.teardown_databases` 的第一个参数已经改"
"变。它们以前是 ``(old_names, mirrors)`` 元组，现在它们只是第一个项目，即 "
"``old_names``。"

msgid ""
"By default :class:`~django.test.LiveServerTestCase` attempts to find an "
"available port in the 8081-8179 range instead of just trying port 8081."
msgstr ""
"默认情况下，:class:`~django.test.LiveServerTestCase` 尝试在 8081-8179 范围内"
"查找可用端口，而不仅仅是尝试端口 8081。"

msgid ""
"The system checks for :class:`~django.contrib.admin.ModelAdmin` now check "
"instances rather than classes."
msgstr ""
"现在，对于 :class:`~django.contrib.admin.ModelAdmin` 的系统检查会检查实例而不"
"是类。"

msgid ""
"The private API to apply mixed migration plans has been dropped for "
"performance reasons. Mixed plans consist of a list of migrations where some "
"are being applied and others are being unapplied."
msgstr ""
"出于性能原因，已经移除了应用混合迁移计划的私有 API 。混合计划包括一系列迁移，"
"其中一些正在应用，而其他一些正在取消应用。"

msgid ""
"The related model object descriptor classes in ``django.db.models.fields."
"related`` (private API) are moved from the ``related`` module to "
"``related_descriptors`` and renamed as follows:"
msgstr ""
"位于 ``django.db.models.fields.related`` （私有 API）中的相关模型对象描述符类"
"已经从 ``related`` 模块移动到 ``related_descriptors``，并且被重命名如下："

msgid ""
"``ReverseSingleRelatedObjectDescriptor`` is ``ForwardManyToOneDescriptor``"
msgstr ""
"``ReverseSingleRelatedObjectDescriptor`` 是 ``ForwardManyToOneDescriptor``"

msgid "``SingleRelatedObjectDescriptor`` is ``ReverseOneToOneDescriptor``"
msgstr "``SingleRelatedObjectDescriptor`` 是 ``ReverseOneToOneDescriptor``"

msgid "``ForeignRelatedObjectsDescriptor`` is ``ReverseManyToOneDescriptor``"
msgstr "``ForeignRelatedObjectsDescriptor`` 是 ``ReverseManyToOneDescriptor``"

msgid "``ManyRelatedObjectsDescriptor`` is ``ManyToManyDescriptor``"
msgstr "``ManyRelatedObjectsDescriptor`` 是 ``ManyToManyDescriptor``"

msgid ""
"If you implement a custom :data:`~django.conf.urls.handler404` view, it must "
"return a response with an HTTP 404 status code. Use :class:`~django.http."
"HttpResponseNotFound` or pass ``status=404`` to the :class:`~django.http."
"HttpResponse`. Otherwise, :setting:`APPEND_SLASH` won't work correctly with "
"``DEBUG=False``."
msgstr ""
"如果你实现了自定义的 :data:`~django.conf.urls.handler404` 视图，它必须返回一"
"个带有 HTTP 404 状态代码的响应。使用 :class:`~django.http."
"HttpResponseNotFound` 或将 ``status=404`` 传递给 :class:`~django.http."
"HttpResponse`。否则，在 ``DEBUG=False`` 的情况下，:setting:`APPEND_SLASH` 不"
"会正确工作。"

msgid "Features deprecated in 1.9"
msgstr "在 1.9 中被废弃的功能"

msgid "``assignment_tag()``"
msgstr "``assignment_tag()``"

msgid ""
"Django 1.4 added the ``assignment_tag`` helper to ease the creation of "
"template tags that store results in a template variable. The :meth:`~django."
"template.Library.simple_tag` helper has gained this same ability, making the "
"``assignment_tag`` obsolete. Tags that use ``assignment_tag`` should be "
"updated to use ``simple_tag``."
msgstr ""
"Django 1.4 版本添加了 ``assignment_tag`` 辅助函数，以简化在模板变量中存储结果"
"的模板标签的创建。:meth:`~django.template.Library.simple_tag` 辅助函数也具备"
"了相同的功能，因此使得 ``assignment_tag`` 已经过时。使用 ``assignment_tag`` "
"的标签应该更新为使用 ``simple_tag``。"

msgid "``{% cycle %}`` syntax with comma-separated arguments"
msgstr "``{% cycle %}`` 语法可以接受逗号分隔的参数"

msgid ""
"The :ttag:`cycle` tag supports an inferior old syntax from previous Django "
"versions:"
msgstr ":ttag:`cycle` 标签支持来自先前 Django 版本的旧语法："

msgid ""
"Its parsing caused bugs with the current syntax, so support for the old "
"syntax will be removed in Django 1.10 following an accelerated deprecation."
msgstr ""
"使用旧语法会导致解析错误，因此在加速弃用后，将在 Django 1.10 中删除对旧语法的"
"支持。"

msgid "``ForeignKey`` and ``OneToOneField`` ``on_delete`` argument"
msgstr "``ForeignKey`` 和 ``OneToOneField`` 的 ``on_delete`` 参数"

msgid ""
"In order to increase awareness about cascading model deletion, the "
"``on_delete`` argument of ``ForeignKey`` and ``OneToOneField`` will be "
"required in Django 2.0."
msgstr ""
"为了增加对级联模型删除的认知，在 Django 2.0 中将要求在 ``ForeignKey`` 和 "
"``OneToOneField`` 中使用 ``on_delete`` 参数。"

msgid ""
"Update models and existing migrations to explicitly set the argument. Since "
"the default is ``models.CASCADE``, add ``on_delete=models.CASCADE`` to all "
"``ForeignKey`` and ``OneToOneField``\\s that don't use a different option. "
"You can also pass it as the second positional argument if you don't care "
"about compatibility with older versions of Django."
msgstr ""
"更新模型和现有的迁移以显式设置参数。由于默认值是 ``models.CASCADE``，因此请在"
"所有不使用不同选项的 ``ForeignKey`` 和 ``OneToOneField`` 上添加 "
"``on_delete=models.CASCADE``。如果不关心与较早版本的 Django 的兼容性，也可以"
"将其作为第二个位置参数传递。"

msgid "``Field.rel`` changes"
msgstr "``Field.rel`` 变更"

msgid ""
"``Field.rel`` and its methods and attributes have changed to match the "
"related fields API. The ``Field.rel`` attribute is renamed to "
"``remote_field`` and many of its methods and attributes are either changed "
"or renamed."
msgstr ""
"``Field.rel`` 及其方法和属性已更改以匹配相关字段的 API。``Field.rel`` 属性被"
"重命名为 ``remote_field``，许多其方法和属性要么更改，要么重命名。"

msgid ""
"The aim of these changes is to provide a documented API for relation fields."
msgstr "这些更改的目的是为关系字段提供一个有文档记录的 API 。"

msgid "``GeoManager`` and ``GeoQuerySet`` custom methods"
msgstr "``GeoManager`` 和 ``GeoQuerySet`` 的自定义方法"

msgid ""
"All custom ``GeoQuerySet`` methods (``area()``, ``distance()``, "
"``gml()``, ...) have been replaced by equivalent geographic expressions in "
"annotations (see in new features). Hence the need to set a custom "
"``GeoManager`` to GIS-enabled models is now obsolete. As soon as your code "
"doesn't call any of the deprecated methods, you can simply remove the "
"``objects = GeoManager()`` lines from your models."
msgstr ""
"所有自定义的 ``GeoQuerySet`` 方法（如 ``area()``、``distance()``、``gml()`` "
"等）都已被等效的地理表达式注释所取代（请参见新特性）。因此，现在已经不再需要"
"为支持 GIS 的模型设置自定义的 ``GeoManager``。一旦你的代码不再调用任何已弃用"
"的方法，你可以简单地从模型中删除 ``objects = GeoManager()`` 行。"

msgid "Template loader APIs have changed"
msgstr "模板加载器的 API 已经改变。"

msgid ""
"Django template loaders have been updated to allow recursive template "
"extending. This change necessitated a new template loader API. The old "
"``load_template()`` and ``load_template_sources()`` methods are now "
"deprecated. Details about the new API can be found :ref:`in the template "
"loader documentation <custom-template-loaders>`."
msgstr ""
"Django 模板加载器已更新，允许递归模板扩展。这个变化需要一个新的模板加载器 "
"API。旧的 ``load_template()`` 和 ``load_template_sources()`` 方法现在已被弃"
"用。关于新 API 的详细信息可以在 :ref:`模板加载器文档中 <custom-template-"
"loaders>` 找到。"

msgid "Passing a 3-tuple or an ``app_name`` to ``include()``"
msgstr "将一个 3 元组或一个 ``app_name`` 传递给 ``include()``"

msgid ""
"The instance namespace part of passing a tuple as an argument to "
"``include()`` has been replaced by passing the ``namespace`` argument to "
"``include()``. For example::"
msgstr ""
"传递元组作为参数到 ``include()`` 的实例命名空间部分已被替换为通过 "
"``include()`` 传递 ``namespace`` 参数。例如："

msgid ""
"The ``app_name`` argument to ``include()`` has been replaced by passing a 2-"
"tuple (as above), or passing an object or module with an ``app_name`` "
"attribute (as below). If the ``app_name`` is set in this new way, the "
"``namespace`` argument is no longer required. It will default to the value "
"of ``app_name``. For example, the URL patterns in the tutorial are changed "
"from:"
msgstr ""
"``include()`` 中的 ``app_name`` 参数已被替换为传递一个 2 元组（如上所示），或"
"者传递一个具有 ``app_name`` 属性的对象或模块（如下所示）。如果以这种新方式设"
"置了 ``app_name``，那么 ``namespace`` 参数将不再需要。它将默认为 "
"``app_name`` 的值。例如，教程中的 URL 模式已更改为："

msgid "``mysite/urls.py``"
msgstr "``mysite/urls.py``"

msgid "to:"
msgstr "到："

msgid "``polls/urls.py``"
msgstr "``polls/urls.py``"

msgid ""
"This change also means that the old way of including an ``AdminSite`` "
"instance is deprecated. Instead, pass ``admin.site.urls`` directly to "
"``django.conf.urls.url()``:"
msgstr ""
"这个变化还意味着旧的包含 ``AdminSite`` 实例的方式已经被弃用。相反，直接将 "
"``admin.site.urls`` 传递给 ``django.conf.urls.url()``："

msgid "``urls.py``"
msgstr "``urls.py``"

msgid "URL application namespace required if setting an instance namespace"
msgstr "如果设置实例命名空间，需要提供 URL 应用程序命名空间。"

msgid ""
"In the past, an instance namespace without an application namespace would "
"serve the same purpose as the application namespace, but it was impossible "
"to reverse the patterns if there was an application namespace with the same "
"name. Includes that specify an instance namespace require that the included "
"URLconf sets an application namespace."
msgstr ""
"在过去，没有应用程序命名空间的实例命名空间会起到与应用程序命名空间相同的作"
"用，但如果存在相同名称的应用程序命名空间，无法对模式进行反向操作。指定实例命"
"名空间的包含（includes）要求被包含的 URLconf 设置应用程序命名空间。"

msgid "``current_app`` parameter to ``contrib.auth`` views"
msgstr "``contrib.auth`` 视图的 ``current_app`` 参数"

msgid ""
"All views in ``django.contrib.auth.views`` have the following structure:"
msgstr "``django.contrib.auth.views`` 中的所有视图都具有以下结构："

msgid ""
"As of Django 1.8, ``current_app`` is set on the ``request`` object. For "
"consistency, these views will require the caller to set ``current_app`` on "
"the ``request`` instead of passing it in a separate argument."
msgstr ""
"从 Django 1.8 开始，``current_app`` 已设置在 ``request`` 对象上。为了保持一致"
"性，这些视图将要求调用者在 ``request`` 上设置 ``current_app``，而不是将其作为"
"单独的参数传递。"

msgid "``django.contrib.gis.geoip``"
msgstr "``django.contrib.gis.geoip``"

msgid ""
"The :mod:`django.contrib.gis.geoip2` module supersedes ``django.contrib.gis."
"geoip``. The new module provides a similar API except that it doesn't "
"provide the legacy GeoIP-Python API compatibility methods."
msgstr ""
":mod:`django.contrib.gis.geoip2` 模块取代了 ``django.contrib.gis.geoip``。新"
"模块提供了类似的 API，但不提供旧的 GeoIP-Python API 兼容方法。"

msgid ""
"The ``weak`` argument to ``django.dispatch.signals.Signal.disconnect()`` has "
"been deprecated as it has no effect."
msgstr ""
"``django.dispatch.signals.Signal.disconnect()`` 中的 ``weak`` 参数已被弃用，"
"因为它没有效果。"

msgid ""
"The ``check_aggregate_support()`` method of ``django.db.backends.base."
"BaseDatabaseOperations`` has been deprecated and will be removed in Django "
"2.0. The more general ``check_expression_support()`` should be used instead."
msgstr ""
"``django.db.backends.base.BaseDatabaseOperations`` 的 "
"``check_aggregate_support()`` 方法已被弃用，并将在 Django 2.0 中移除。应该改"
"用更通用的 ``check_expression_support()``。"

msgid ""
"``django.forms.extras`` is deprecated. You can find :class:`~django.forms."
"SelectDateWidget` in ``django.forms.widgets`` (or simply ``django.forms``) "
"instead."
msgstr ""
"``django.forms.extras`` 已被弃用。你可以在 ``django.forms.widgets`` （或简单"
"地在 ``django.forms`` 中）找到 :class:`~django.forms.SelectDateWidget`。"

msgid ""
"Private API ``django.db.models.fields.add_lazy_relation()`` is deprecated."
msgstr "私有 API ``django.db.models.fields.add_lazy_relation()`` 已被弃用。"

msgid ""
"The ``django.contrib.auth.tests.utils.skipIfCustomUser()`` decorator is "
"deprecated. With the test discovery changes in Django 1.6, the tests for "
"``django.contrib`` apps are no longer run as part of the user's project. "
"Therefore, the ``@skipIfCustomUser`` decorator is no longer needed to "
"decorate tests in ``django.contrib.auth``."
msgstr ""
"``django.contrib.auth.tests.utils.skipIfCustomUser()`` 装饰器已被弃用。随着 "
"Django 1.6 中的测试发现变化，不再将 ``django.contrib`` 应用程序的测试作为用户"
"项目的一部分运行。因此，在 ``django.contrib.auth`` 中不再需要使用 "
"``@skipIfCustomUser`` 装饰器来装饰测试。"

msgid ""
"If you customized some :ref:`error handlers <error-views>`, the view "
"signatures with only one request parameter are deprecated. The views should "
"now also accept a second ``exception`` positional parameter."
msgstr ""
"如果你自定义了一些 :ref:`错误处理程序 <error-views>`，那些只有一个请求参数的"
"视图签名已经被弃用。这些视图现在还应该接受一个名为 ``exception`` 的第二个位置"
"参数。"

msgid ""
"The ``django.utils.feedgenerator.Atom1Feed.mime_type`` and ``django.utils."
"feedgenerator.RssFeed.mime_type`` attributes are deprecated in favor of "
"``content_type``."
msgstr ""
"``django.utils.feedgenerator.Atom1Feed.mime_type`` 和 ``django.utils."
"feedgenerator.RssFeed.mime_type`` 属性已被弃用，建议使用 ``content_type`` 代"
"替。"

msgid ""
":class:`~django.core.signing.Signer` now issues a warning if an invalid "
"separator is used. This will become an exception in Django 1.10."
msgstr ""
":class:`~django.core.signing.Signer` 现在如果使用无效的分隔符会发出警告。这"
"在 Django 1.10 中将变成异常。"

msgid ""
"``django.db.models.Field._get_val_from_obj()`` is deprecated in favor of "
"``Field.value_from_object()``."
msgstr ""
"``django.db.models.Field._get_val_from_obj()`` 已被弃用，应使用 ``Field."
"value_from_object()``。"

msgid ""
"``django.template.loaders.eggs.Loader`` is deprecated as distributing "
"applications as eggs is not recommended."
msgstr ""
"``django.template.loaders.eggs.Loader`` 已被弃用，因为不建议将应用程序作为 "
"eggs 分发。"

msgid ""
"The ``callable_obj`` keyword argument to ``SimpleTestCase."
"assertRaisesMessage()`` is deprecated. Pass the callable as a positional "
"argument instead."
msgstr ""
"``SimpleTestCase.assertRaisesMessage()`` 中的 ``callable_obj`` 关键字参数已被"
"弃用。请将可调用对象作为位置参数传递。"

msgid ""
"The ``allow_tags`` attribute on methods of ``ModelAdmin`` has been "
"deprecated. Use :func:`~django.utils.html.format_html`, :func:`~django.utils."
"html.format_html_join`, or :func:`~django.utils.safestring.mark_safe` when "
"constructing the method's return value instead."
msgstr ""
"在 ``ModelAdmin`` 方法中的 ``allow_tags`` 属性已被弃用。在构建方法的返回值"
"时，改用 :func:`~django.utils.html.format_html`、:func:`~django.utils.html."
"format_html_join` 或 :func:`~django.utils.safestring.mark_safe`。"

msgid ""
"The ``enclosure`` keyword argument to ``SyndicationFeed.add_item()`` is "
"deprecated. Use the new ``enclosures`` argument which accepts a list of "
"``Enclosure`` objects instead of a single one."
msgstr ""
"``SyndicationFeed.add_item()`` 中的 ``enclosure`` 关键字参数已被弃用。改用新"
"的 ``enclosures`` 参数，它接受一个 ``Enclosure`` 对象的列表，而不是单个对象。"

msgid ""
"The ``django.template.loader.LoaderOrigin`` and ``django.template.base."
"StringOrigin`` aliases for ``django.template.base.Origin`` are deprecated."
msgstr ""
"``django.template.loader.LoaderOrigin`` 和 ``django.template.base."
"StringOrigin`` 对于 ``django.template.base.Origin`` 的别名已被弃用。"

msgid "Features removed in 1.9"
msgstr "在 1.9 版本中移除的功能。"

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 1.9. See :ref:`deprecated-features-1.7` for details, "
"including how to remove usage of these features."
msgstr ""
"这些特性已经达到了它们的弃用周期的尽头，将在 Django 1.9 中被移除。详情请参"
"见 :ref:`deprecated-features-1.7`，包括如何删除对这些特性的使用。"

msgid "``django.utils.dictconfig`` is removed."
msgstr "``django.utils.dictconfig`` 已被移除。"

msgid "``django.utils.importlib`` is removed."
msgstr "``django.utils.importlib`` 已被移除。"

msgid "``django.utils.tzinfo`` is removed."
msgstr "``django.utils.tzinfo`` 已被移除。"

msgid "``django.utils.unittest`` is removed."
msgstr "``django.utils.unittest`` 已被移除。"

msgid "The ``syncdb`` command is removed."
msgstr "``syncdb`` 命令已被移除。"

msgid ""
"``django.db.models.signals.pre_syncdb`` and ``django.db.models.signals."
"post_syncdb`` is removed."
msgstr ""
"``django.db.models.signals.pre_syncdb`` 和 ``django.db.models.signals."
"post_syncdb`` 已被移除。"

msgid "Support for ``allow_syncdb`` on database routers is removed."
msgstr "数据库路由器上的 ``allow_syncdb`` 支持已被移除。"

msgid ""
"Automatic syncing of apps without migrations is removed. Migrations are "
"compulsory for all apps unless you pass the :option:`migrate --run-syncdb` "
"option."
msgstr ""
"自动同步没有迁移的应用已被移除。对于所有应用程序，迁移是强制性的，除非你传"
"递 :option:`migrate --run-syncdb` 选项。"

msgid ""
"The SQL management commands for apps without migrations, ``sql``, "
"``sqlall``, ``sqlclear``, ``sqldropindexes``, and ``sqlindexes``, are "
"removed."
msgstr ""
"对于没有迁移的应用程序，已移除了 SQL 管理命令：``sql``、``sqlall``、"
"``sqlclear``、``sqldropindexes`` 和 ``sqlindexes``。"

msgid ""
"Support for automatic loading of ``initial_data`` fixtures and initial SQL "
"data is removed."
msgstr "已移除自动加载 ``initial_data`` fixtures 和初始 SQL 数据的支持。"

msgid ""
"All models need to be defined inside an installed application or declare an "
"explicit :attr:`~django.db.models.Options.app_label`. Furthermore, it isn't "
"possible to import them before their application is loaded. In particular, "
"it isn't possible to import models inside the root package of an application."
msgstr ""
"所有模型都需要在一个已安装的应用程序内定义，或者声明一个明确的 :attr:"
"`~django.db.models.Options.app_label`。此外，在应用程序加载之前不能导入它们。"
"特别是，在应用程序的根包内不能导入模型。"

msgid ""
"The model and form ``IPAddressField`` is removed. A stub field remains for "
"compatibility with historical migrations."
msgstr ""
"模型和表单的 ``IPAddressField`` 已被移除。为了与历史迁移兼容，仍然保留了一个"
"存根字段。"

msgid "``AppCommand.handle_app()`` is no longer supported."
msgstr "不再支持 ``AppCommand.handle_app()``。"

msgid ""
"``RequestSite`` and ``get_current_site()`` are no longer importable from "
"``django.contrib.sites.models``."
msgstr ""
"无法再从 ``django.contrib.sites.models`` 导入 ``RequestSite`` 和 "
"``get_current_site()``。"

msgid "FastCGI support via the ``runfcgi`` management command is removed."
msgstr "通过 ``runfcgi`` 管理命令的 FastCGI 支持已被移除。"

msgid "``django.utils.datastructures.SortedDict`` is removed."
msgstr "``django.utils.datastructures.SortedDict`` 已被移除。"

msgid "``ModelAdmin.declared_fieldsets`` is removed."
msgstr "``ModelAdmin.declared_fieldsets`` 已被移除。"

msgid "The ``util`` modules that provided backwards compatibility are removed:"
msgstr "提供向后兼容性的 ``util`` 模块已被移除："

msgid "``ModelAdmin.get_formsets`` is removed."
msgstr "``ModelAdmin.get_formsets`` 已被移除。"

msgid ""
"The backward compatible shims introduced to rename the ``BaseMemcachedCache."
"_get_memcache_timeout()`` method to ``get_backend_timeout()`` is removed."
msgstr ""
"用于将 ``BaseMemcachedCache._get_memcache_timeout()`` 方法重命名为 "
"``get_backend_timeout()`` 的向后兼容 shims 已被移除。"

msgid ""
"The ``--natural`` and ``-n`` options for :djadmin:`dumpdata` are removed."
msgstr ":djadmin:`dumpdata` 的 ``--natural`` 和 ``-n`` 选项已被移除。"

msgid ""
"The ``use_natural_keys`` argument for ``serializers.serialize()`` is removed."
msgstr "``serializers.serialize()`` 的 ``use_natural_keys`` 参数已被移除。"

msgid "Private API ``django.forms.forms.get_declared_fields()`` is removed."
msgstr "私有 API ``django.forms.forms.get_declared_fields()`` 已被移除。"

msgid ""
"The ability to use a ``SplitDateTimeWidget`` with ``DateTimeField`` is "
"removed."
msgstr "使用 ``SplitDateTimeWidget`` 与 ``DateTimeField`` 的能力已被移除。"

msgid "The ``WSGIRequest.REQUEST`` property is removed."
msgstr "``WSGIRequest.REQUEST`` 属性已被移除。"

msgid "The class ``django.utils.datastructures.MergeDict`` is removed."
msgstr "类 ``django.utils.datastructures.MergeDict`` 已被移除。"

msgid "The ``zh-cn`` and ``zh-tw`` language codes are removed."
msgstr "``zh-cn`` 和 ``zh-tw`` 语言代码已被移除。"

msgid "The internal ``django.utils.functional.memoize()`` is removed."
msgstr "内部的 ``django.utils.functional.memoize()`` 已被移除。"

msgid "``django.core.cache.get_cache`` is removed."
msgstr "``django.core.cache.get_cache`` 已被移除。"

msgid "``django.db.models.loading`` is removed."
msgstr "``django.db.models.loading`` 已被移除。"

msgid "Passing callable arguments to querysets is no longer possible."
msgstr "不再支持将可调用参数传递给查询集。"

msgid ""
"``BaseCommand.requires_model_validation`` is removed in favor of "
"``requires_system_checks``. Admin validators is replaced by admin checks."
msgstr ""
"``BaseCommand.requires_model_validation`` 被移除，取而代之的是 "
"``requires_system_checks``。管理器验证器被管理器检查取代。"

msgid ""
"The ``ModelAdmin.validator_class`` and ``default_validator_class`` "
"attributes are removed."
msgstr ""
"``ModelAdmin.validator_class`` 和 ``default_validator_class`` 属性已被移除。"

msgid "``ModelAdmin.validate()`` is removed."
msgstr "``ModelAdmin.validate()`` 已被移除。"

msgid ""
"``django.db.backends.DatabaseValidation.validate_field`` is removed in favor "
"of the ``check_field`` method."
msgstr ""
"``django.db.backends.DatabaseValidation.validate_field`` 被移除，取而代之的"
"是 ``check_field`` 方法。"

msgid "The ``validate`` management command is removed."
msgstr "``validate`` 管理命令已被移除。"

msgid ""
"``django.utils.module_loading.import_by_path`` is removed in favor of "
"``django.utils.module_loading.import_string``."
msgstr ""
"``django.utils.module_loading.import_by_path`` 被移除，取而代之的是 ``django."
"utils.module_loading.import_string``。"

msgid ""
"``ssi`` and ``url`` template tags are removed from the ``future`` template "
"tag library."
msgstr "``ssi`` 和 ``url`` 模板标签已从 ``future`` 模板标签库中移除。"

msgid "``django.utils.text.javascript_quote()`` is removed."
msgstr "``django.utils.text.javascript_quote()`` 已被移除。"

msgid ""
"Database test settings as independent entries in the database settings, "
"prefixed by ``TEST_``, are no longer supported."
msgstr ""
"不再支持将数据库测试设置作为独立的条目出现在数据库设置中，并以 ``TEST_`` 为前"
"缀。"

msgid ""
"The ``cache_choices`` option to :class:`~django.forms.ModelChoiceField` and :"
"class:`~django.forms.ModelMultipleChoiceField` is removed."
msgstr ""
"``cache_choices`` 选项已被移除，不再适用于 :class:`~django.forms."
"ModelChoiceField` 和 :class:`~django.forms.ModelMultipleChoiceField`。"

msgid ""
"The default value of the :attr:`RedirectView.permanent <django.views.generic."
"base.RedirectView.permanent>` attribute has changed from ``True`` to "
"``False``."
msgstr ""
":attr:`RedirectView.permanent <django.views.generic.base.RedirectView."
"permanent>` 属性的默认值已从 ``True`` 更改为 ``False``。"

msgid ""
"``django.contrib.sitemaps.FlatPageSitemap`` is removed in favor of ``django."
"contrib.flatpages.sitemaps.FlatPageSitemap``."
msgstr ""
"``django.contrib.sitemaps.FlatPageSitemap`` 已被移除，取而代之的是 ``django."
"contrib.flatpages.sitemaps.FlatPageSitemap``。"

msgid "Private API ``django.test.utils.TestTemplateLoader`` is removed."
msgstr "私有 API ``django.test.utils.TestTemplateLoader`` 已被移除。"

msgid "The ``django.contrib.contenttypes.generic`` module is removed."
msgstr "``django.contrib.contenttypes.generic`` 模块已被移除。"

msgid "Django 1.9.1 release notes"
msgstr "Django 1.9.1 版本发行说明"

msgid "Django 1.9.1 fixes several bugs in 1.9."
msgstr "Django 1.9.1 修复了 1.9 版本中的一些错误。"

msgid ""
"Fixed ``BaseCache.get_or_set()`` with the ``DummyCache`` backend (:ticket:"
"`25840`)."
msgstr ""
"修复了使用 ``DummyCache`` 后端的 ``BaseCache.get_or_set()`` 方法（:ticket:"
"`25840`）。"

msgid ""
"Fixed a regression in ``FormMixin`` causing forms to be validated twice (:"
"ticket:`25548`, :ticket:`26018`)."
msgstr ""
"修复了 ``FormMixin`` 中的回归问题，导致表单被验证两次（:ticket:`25548`, :"
"ticket:`26018`）。"

msgid ""
"Fixed a system check crash with nested ``ArrayField``\\s (:ticket:`25867`)."
msgstr "修复了嵌套 ``ArrayField`` 的系统检查崩溃问题（:ticket:`25867`）。"

msgid ""
"Fixed a regression in ``CommonMiddleware`` causing ``If-None-Match`` checks "
"to always return HTTP 200 (:ticket:`25900`)."
msgstr ""
"修复了 ``CommonMiddleware`` 中的回归问题，导致 ``If-None-Match`` 检查始终返"
"回 HTTP 200（:ticket:`25900`）。"

msgid ""
"Fixed admin's delete confirmation page's summary counts of related objects (:"
"ticket:`25883`)."
msgstr "修复了管理界面中删除确认页面上相关对象的摘要计数（:ticket:`25883`）。"

msgid ""
"Added ``from __future__ import unicode_literals`` to the default ``apps.py`` "
"created by ``startapp`` on Python 2 (:ticket:`25909`). Add this line to your "
"own ``apps.py`` files created using Django 1.9 if you want your migrations "
"to work on both Python 2 and Python 3."
msgstr ""
"在 Python 2 上由 ``startapp`` 创建的默认 ``apps.py`` 中添加了 ``from "
"__future__ import unicode_literals`` （:ticket:`25909`）。如果你希望你自己使"
"用 Django 1.9 创建的 ``apps.py`` 文件在 Python 2 和 Python 3 上都能正常工作，"
"可以将这一行添加到你自己的 ``apps.py`` 文件中。"

msgid ""
"Prevented ``QuerySet.delete()`` from crashing on MySQL when querying across "
"relations (:ticket:`25882`)."
msgstr ""
"修复了在跨关系查询时防止 ``QuerySet.delete()`` 在 MySQL 上崩溃的问题（:"
"ticket:`25882`）。"

msgid ""
"Fixed evaluation of zero-length slices of ``QuerySet.values()`` (:ticket:"
"`25894`)."
msgstr ""
"修复了对 ``QuerySet.values()`` 的零长度切片的评估问题（:ticket:`25894`）。"

msgid ""
"Fixed ``TypedChoiceField`` change detection with nullable fields (:ticket:"
"`25942`)."
msgstr ""
"修复了带有可空字段的 ``TypedChoiceField`` 更改检测问题（:ticket:`25942`）。"

msgid ""
"Fixed incorrect timezone warnings in custom admin templates that don't have "
"a ``data-admin-utc-offset`` attribute in the ``body`` tag. (:ticket:`25845`)."
msgstr ""
"修复了自定义管理模板中不带有 ``data-admin-utc-offset`` 属性的 ``body`` 标签中"
"的不正确的时区警告问题（:ticket:`25845`）。"

msgid ""
"Avoided hiding some exceptions, like an invalid ``INSTALLED_APPS`` setting, "
"behind ``AppRegistryNotReady`` when starting ``runserver`` (:ticket:"
"`25510`). This regression appeared in 1.8.5 as a side effect of fixing :"
"ticket:`24704` and by mistake the fix wasn't applied to the ``stable/1.9.x`` "
"branch."
msgstr ""
"在启动 ``runserver`` 时避免将一些异常（如无效的 ``INSTALLED_APPS`` 设置）隐藏"
"在 ``AppRegistryNotReady`` 后面（:ticket:`25510`）。这个回归问题出现在 1.8.5 "
"版中，是在修复 :ticket:`24704` 时的副作用，不小心没有将修复应用到 "
"``stable/1.9.x`` 分支。"

msgid ""
"Fixed ``migrate --fake-initial`` detection of many-to-many tables (:ticket:"
"`25922`)."
msgstr ""
"修复了 ``migrate --fake-initial`` 对于多对多表的检测问题（:ticket:`25922`）。"

msgid ""
"Restored the functionality of the admin's ``list_editable`` add and change "
"buttons (:ticket:`25903`)."
msgstr ""
"恢复了管理界面的 ``list_editable`` 添加和更改按钮的功能（:ticket:`25903`）。"

msgid "Fixed ``isnull`` query lookup for ``ForeignObject`` (:ticket:`25972`)."
msgstr ""
"修复了对于 ``ForeignObject`` 的 ``isnull`` 查询查找问题（:ticket:`25972`）。"

msgid ""
"Fixed incorrect object reference in ``SingleObjectMixin."
"get_context_object_name()`` (:ticket:`26006`)."
msgstr ""
"修复了 ``SingleObjectMixin.get_context_object_name()`` 中的不正确对象引用问题"
"（:ticket:`26006`）。"

msgid ""
"Restored ``contrib.auth`` hashers compatibility with ``py-bcrypt`` (:ticket:"
"`26016`)."
msgstr ""
"恢复了 ``contrib.auth`` 哈希算法与 ``py-bcrypt`` 的兼容性（:ticket:"
"`26016`）。"

msgid "Django 1.9.10 release notes"
msgstr "Django 1.9.10 版本发行说明"

msgid "Django 1.9.10 fixes a security issue in 1.9.9."
msgstr "Django 1.9.10 修复了 1.9.9 版本中的一个安全问题。"

msgid "Django 1.9.11 release notes"
msgstr "Django 1.9.11 版本发行说明"

msgid "Django 1.9.11 fixes two security issues in 1.9.10."
msgstr "Django 1.9.11 修复了 1.9.10 版本中的两个安全问题。"

msgid "Django 1.9.12 release notes"
msgstr "Django 1.9.12 版本发行说明"

msgid "Django 1.9.12 fixes a regression in 1.9.11."
msgstr "Django 1.9.12 修复了 1.9.11 版本中的一个回归问题。"

msgid "Django 1.9.13 release notes"
msgstr "Django 1.9.13 版本发行说明"

msgid ""
"Django 1.9.13 fixes two security issues and a bug in 1.9.12. This is the "
"final release of the 1.9.x series."
msgstr ""
"Django 1.9.13 修复了 1.9.12 版本中的两个安全问题和一个错误。这是 1.9.x 系列的"
"最后一个版本发布。"

msgid "Django 1.9.2 release notes"
msgstr "Django 1.9.2 版本发行说明"

msgid ""
"Django 1.9.2 fixes a security regression in 1.9 and several bugs in 1.9.1. "
"It also makes a small backwards incompatible change that hopefully doesn't "
"affect any users."
msgstr ""
"Django 1.9.2 修复了 1.9 版本中的一个安全回归问题以及 1.9.1 版本中的一些错误。"
"它还进行了一个小的不向后兼容的更改，希望不会影响任何用户。"

msgid ""
"Security issue: User with \"change\" but not \"add\" permission can create "
"objects for ``ModelAdmin``’s with ``save_as=True``"
msgstr ""
"安全问题：拥有“更改”但没有“添加”权限的用户可以为具有 ``save_as=True`` 的 "
"``ModelAdmin`` 创建对象。这个问题已得到修复。"

msgid ""
"If a ``ModelAdmin`` uses ``save_as=True`` (not the default), the admin "
"provides an option when editing objects to \"Save as new\". A regression in "
"Django 1.9 prevented that form submission from raising a \"Permission "
"Denied\" error for users without the \"add\" permission."
msgstr ""
"如果一个 ``ModelAdmin`` 使用了 ``save_as=True`` （不是默认值），在编辑对象"
"时，管理员提供了一个选项来“另存为新对象”。在 Django 1.9 中的一个回归问题阻止"
"了对于没有“添加”权限的用户，这个表单提交不会引发“权限被拒绝”的错误。这个问题"
"已得到修复。"

msgid ""
"Backwards incompatible change: ``.py-tpl`` files rewritten in project/app "
"templates"
msgstr "向后不兼容的变更：在项目/应用程序模板中重新编写了 ``.py-tpl`` 文件。"

msgid ""
"The addition of some Django template language syntax to the default app "
"template in Django 1.9 means those files now have some invalid Python "
"syntax. This causes difficulties for packaging systems that unconditionally "
"byte-compile ``*.py`` files."
msgstr ""
"在 Django 1.9 中将一些 Django 模板语言语法添加到默认应用程序模板中，这意味着"
"这些文件现在具有一些无效的 Python 语法。这会对无条件地字节编译 ``*.py`` 文件"
"的打包系统造成困难。"

msgid ""
"To remedy this, a ``.py-tpl`` suffix is now used for the project and app "
"template files included in Django. The ``.py-tpl`` suffix is replaced with "
"``.py`` by the ``startproject`` and ``startapp`` commands. For example, a "
"template with the filename ``manage.py-tpl`` will be created as ``manage."
"py``."
msgstr ""
"为了解决这个问题，现在在 Django 中使用 ``.py-tpl`` 后缀来表示项目和应用程序模"
"板文件。``startproject`` 和 ``startapp`` 命令会将 ``.py-tpl`` 后缀替换为 ``."
"py``。例如，文件名为 ``manage.py-tpl`` 的模板将被创建为 ``manage.py``。"

msgid ""
"Please file a ticket if you have a custom project template containing ``.py-"
"tpl`` files and find this behavior problematic."
msgstr ""
"如果你有一个包含 ``.py-tpl`` 文件的自定义项目模板，并且发现这个行为有问题，请"
"提交一个问题报告。"

msgid ""
"Fixed a regression in ``ConditionalGetMiddleware`` causing ``If-None-Match`` "
"checks to always return HTTP 200 (:ticket:`26024`)."
msgstr ""
"修复了 ``ConditionalGetMiddleware`` 中的回归问题，导致 ``If-None-Match`` 检查"
"始终返回 HTTP 200（:ticket:`26024`）。"

msgid ""
"Fixed a regression in the admin's edit related model popup that caused an "
"escaped value to be displayed in the select dropdown of the parent window (:"
"ticket:`25997`)."
msgstr ""
"修复了管理界面中编辑相关模型弹出窗口的回归问题，导致在父窗口的选择下拉菜单中"
"显示转义的值（:ticket:`25997`）。"

msgid ""
"Fixed a regression where defining a relation on an abstract model's field "
"using a string model name without an app_label no longer resolved that "
"reference to the abstract model's app if using that model in another "
"application (:ticket:`25858`)."
msgstr ""
"修复了一个回归问题，当在抽象模型的字段上使用字符串模型名称定义关系时，如果在"
"另一个应用程序中使用该模型，没有指定 app_label 的引用将不再解析到抽象模型的应"
"用程序（:ticket:`25858`）。"

msgid ""
"Fixed a crash when destroying an existing test database on MySQL or "
"PostgreSQL (:ticket:`26096`)."
msgstr ""
"修复了在 MySQL 或 PostgreSQL 上销毁现有测试数据库时崩溃的问题（:ticket:"
"`26096`）。"

msgid ""
"Fixed CSRF cookie check on POST requests when ``USE_X_FORWARDED_PORT=True`` "
"(:ticket:`26094`)."
msgstr ""
"修复了在 ``USE_X_FORWARDED_PORT=True`` 时对 POST 请求的 CSRF Cookie 检查问题"
"（:ticket:`26094`）。"

msgid ""
"Fixed a ``QuerySet.order_by()`` crash when ordering by a relational field of "
"a ``ManyToManyField`` ``through`` model (:ticket:`26092`)."
msgstr ""
"修复了当按照 ``ManyToManyField`` 的 ``through`` 模型的关联字段进行排序时，导"
"致 ``QuerySet.order_by()`` 崩溃的问题（:ticket:`26092`）。"

msgid ""
"Fixed a regression that caused an exception when making database queries on "
"SQLite with more than 2000 parameters when :setting:`DEBUG` is ``True`` on "
"distributions that increase the ``SQLITE_MAX_VARIABLE_NUMBER`` compile-time "
"limit to over 2000, such as Debian (:ticket:`26063`)."
msgstr ""
"修复了在使用分布式时，当在 SQLite 上进行数据库查询参数超过 2000 个且 :"
"setting:`DEBUG` 为 ``True`` 时导致异常的回归问题，这个问题发生在一些分布式"
"中，它将 ``SQLITE_MAX_VARIABLE_NUMBER`` 编译时限制增加到了 2000 以上，比如 "
"Debian（:ticket:`26063`）。"

msgid ""
"Fixed a crash when calling the ``migrate`` command in a test case with the "
"``available_apps`` attribute pointing to an application with migrations "
"disabled using the ``MIGRATION_MODULES`` setting (:ticket:`26135`)."
msgstr ""
"修复了在测试用例中调用 ``migrate`` 命令，并且 ``available_apps`` 属性指向一个"
"使用 ``MIGRATION_MODULES`` 设置禁用迁移的应用程序时导致崩溃的问题（:ticket:"
"`26135`）。"

msgid ""
"Restored the ability for testing and debugging tools to determine the "
"template from which a node came from, even during template inheritance or "
"inclusion. Prior to Django 1.9, debugging tools could access the template "
"origin from the node via ``Node.token.source[0]``. This was an undocumented, "
"private API. The origin is now available directly on each node using the "
"``Node.origin`` attribute (:ticket:`25848`)."
msgstr ""
"恢复了测试和调试工具在模板继承或包含期间确定节点来自哪个模板的能力。在 "
"Django 1.9 之前，调试工具可以通过 ``Node.token.source[0]`` 从节点中访问模板来"
"源。这是一个未记录的私有 API。现在，每个节点都可以直接使用 ``Node.origin`` 属"
"性获取源信息（:ticket:`25848`）。"

msgid ""
"Always included ``geometry_field`` in the GeoJSON serializer output "
"regardless of the ``fields`` parameter (:ticket:`26138`)."
msgstr ""
"无论 ``fields`` 参数如何，GeoJSON 序列化器输出中始终包含了 "
"``geometry_field`` （:ticket:`26138`）。"

msgid ""
"Made invalid forms display the initial of values of their disabled fields (:"
"ticket:`26129`)."
msgstr "使无效的表单显示其禁用字段的初始值（:ticket:`26129`）。"

msgid "Django 1.9.3 release notes"
msgstr "Django 1.9.3 版本发行说明"

msgid "Django 1.9.3 fixes two security issues and several bugs in 1.9.2."
msgstr "Django 1.9.3 修复了 1.9.2 版本中的两个安全问题和一些错误。"

msgid ""
"Skipped URL checks (new in 1.9) if the ``ROOT_URLCONF`` setting isn't "
"defined (:ticket:`26155`)."
msgstr ""
"如果未定义 ``ROOT_URLCONF`` 设置，则跳过 URL 检查（在 1.9 中新增）（:ticket:"
"`26155`）。"

msgid ""
"Fixed a regression for cases where ``ForeignObject."
"get_extra_descriptor_filter()`` returned a ``Q`` object (:ticket:`26153`)."
msgstr ""
"修复了在 ``ForeignObject.get_extra_descriptor_filter()`` 返回 ``Q`` 对象的情"
"况下导致的回归问题（:ticket:`26153`）。"

msgid ""
"Fixed regression with an ``__in=qs`` lookup for a ``ForeignKey`` with "
"``to_field`` set (:ticket:`26196`)."
msgstr ""
"修复了在为设置了 ``to_field`` 的 ``ForeignKey`` 使用 ``__in=qs`` 查找时导致的"
"回归问题（:ticket:`26196`）。"

msgid ""
"Fixed a crash when filtering by a ``Decimal`` in ``RawQuery`` (:ticket:"
"`26219`)."
msgstr ""
"修复了在 ``RawQuery`` 中使用 ``Decimal`` 进行过滤时导致崩溃的问题（:ticket:"
"`26219`）。"

msgid ""
"Fixed some crashing deprecation shims in ``SimpleTemplateResponse`` that "
"regressed in Django 1.9 (:ticket:`26253`)."
msgstr ""
"修复了在 Django 1.9 中回归的 ``SimpleTemplateResponse`` 中一些导致崩溃的废弃 "
"shims（:ticket:`26253`）。"

msgid ""
"Changed the admin's \"permission denied\" message in the login template to "
"use ``get_username`` instead of ``username`` to support custom user models (:"
"ticket:`26231`)."
msgstr ""
"更改了管理界面登录模板中的“权限被拒绝”的消息，使用 ``get_username`` 而不是 "
"``username``，以支持自定义用户模型（:ticket:`26231`）。"

msgid ""
"Fixed a crash when passing a nonexistent template name to the cached "
"template loader's ``load_template()`` method (:ticket:`26280`)."
msgstr ""
"修复了在将不存在的模板名称传递给缓存模板加载器的 ``load_template()`` 方法时导"
"致崩溃的问题（:ticket:`26280`）。"

msgid ""
"Reverted a change in Django 1.9.2 (:ticket:`25858`) that prevented relative "
"lazy relationships defined on abstract models to be resolved according to "
"their concrete model's ``app_label`` (:ticket:`26186`)."
msgstr ""
"回滚了 Django 1.9.2 中的一个更改（:ticket:`25858`），该更改阻止了在抽象模型上"
"定义的相对延迟关系根据其具体模型的 ``app_label`` 解析的更改（:ticket:"
"`26186`）。"

msgid "Django 1.9.4 release notes"
msgstr "Django 1.9.4 版本发行说明"

msgid ""
"Django 1.9.4 fixes a regression on Python 2 in the 1.9.3 security release "
"where ``utils.http.is_safe_url()`` crashes on bytestring URLs (:ticket:"
"`26308`)."
msgstr ""
"Django 1.9.4 修复了 1.9.3 版本中的一个安全更新中在 Python 2 上出现的回归问"
"题，其中 ``utils.http.is_safe_url()`` 在字节串 URL 上崩溃的问题（:ticket:"
"`26308`）。"

msgid "Django 1.9.5 release notes"
msgstr "Django 1.9.5 版本发行说明"

msgid "Django 1.9.5 fixes several bugs in 1.9.4."
msgstr "Django 1.9.5 修复了 1.9.4 中的几个错误。"

msgid ""
"Fixed a race condition in ``BaseCache.get_or_set()`` (:ticket:`26332`). It "
"now returns the ``default`` value instead of ``False`` if there's an error "
"when trying to add the value to the cache."
msgstr ""
"修复了 ``BaseCache.get_or_set()`` 中的竞争条件（:ticket:`26332`）。如果尝试将"
"值添加到缓存时出现错误，它现在返回 ``default`` 值而不是 ``False``。"

msgid ""
"The forms in ``contrib.auth`` no longer strip trailing and leading "
"whitespace from the password fields (:ticket:`26334`). The change requires "
"users who set their password to something with such whitespace after a site "
"updated to Django 1.9 to reset their password. It provides backwards-"
"compatibility for earlier versions of Django."
msgstr ""
"在 ``contrib.auth`` 中的表单不再从密码字段中去除尾部和开头的空格（:ticket:"
"`26334`）。这个更改要求在站点升级到 Django 1.9 后，将密码设置为包含这种空格的"
"用户重新设置密码。它提供了对早期版本的 Django 的向后兼容性。"

msgid "Fixed a memory leak in the cached template loader (:ticket:`26306`)."
msgstr "修复了缓存模板加载器中的内存泄漏问题（:ticket:`26306`）。"

msgid ""
"Fixed a regression that caused ``collectstatic --clear`` to fail if the "
"storage doesn't implement ``path()`` (:ticket:`26297`)."
msgstr ""
"修复了一个导致 ``collectstatic --clear`` 失败的回归问题，如果存储没有实现 "
"``path()`` （:ticket:`26297`）。"

msgid ""
"Fixed a crash when using a reverse lookup with a subquery when a "
"``ForeignKey`` has a ``to_field`` set to something other than the primary "
"key (:ticket:`26373`)."
msgstr ""
"修复了使用子查询进行反向查找时，当 ``ForeignKey`` 的 ``to_field`` 设置为主键"
"之外的其他值时崩溃的问题（:ticket:`26373`）。"

msgid ""
"Fixed a regression in ``CommonMiddleware`` that caused spurious warnings in "
"logs on requests missing a trailing slash (:ticket:`26293`)."
msgstr ""
"修复了 ``CommonMiddleware`` 中的一个回归问题，导致在缺少尾部斜杠的请求上记录"
"不必要的警告日志（:ticket:`26293`）。"

msgid ""
"Fixed a regression with abstract model inheritance and explicit parent links "
"(:ticket:`26413`)."
msgstr "修复了抽象模型继承和显式父链接的一个回归问题（:ticket:`26413`）。"

msgid ""
"Fixed a migrations crash on SQLite when renaming the primary key of a model "
"containing a ``ForeignKey`` to ``'self'`` (:ticket:`26384`)."
msgstr ""
"修复了在 SQLite 上重命名包含 ``ForeignKey`` 到 ``'self'`` 的模型的主键时引发"
"迁移崩溃的问题（:ticket:`26384`）。"

msgid ""
"Fixed ``JSONField`` inadvertently escaping its contents when displaying "
"values after failed form validation (:ticket:`25532`)."
msgstr ""
"修复了在表单验证失败后显示 ``JSONField`` 值时不小心转义其内容的问题（:ticket:"
"`25532`）。"

msgid "Django 1.9.6 release notes"
msgstr "Django 1.9.6 版本发行说明"

msgid "Django 1.9.6 fixes several bugs in 1.9.5."
msgstr "Django 1.9.6 修复了 1.9.5 中的几个错误。"

msgid ""
"Added support for relative path redirects to the test client and to "
"``SimpleTestCase.assertRedirects()`` because Django 1.9 no longer converts "
"redirects to absolute URIs (:ticket:`26428`)."
msgstr ""
"添加了对相对路径重定向的支持，以及对于 ``SimpleTestCase.assertRedirects()``，"
"因为 Django 1.9 不再将重定向转换为绝对 URI（:ticket:`26428`）。"

msgid ""
"Prevented ``makemigrations`` from generating infinite migrations for a model "
"field that references a ``functools.partial`` (:ticket:`26475`)."
msgstr ""
"阻止 ``makemigrations`` 为引用了 ``functools.partial`` 的模型字段生成无限迁"
"移 (:ticket:`26475`)。"

msgid ""
"Fixed a regression where ``SessionBase.pop()`` returned ``None`` rather than "
"raising a ``KeyError`` for nonexistent values (:ticket:`26520`)."
msgstr ""
"修复了一个回归问题，即 ``SessionBase.pop()`` 对于不存在的值返回 ``None`` 而不"
"是引发 ``KeyError`` (:ticket:`26520`)。"

msgid ""
"Fixed a regression causing the cached template loader to crash when using "
"template names starting with a dash (:ticket:`26536`)."
msgstr ""
"修复了一个回归问题，当使用以连字符开头的模板名称时，导致缓存的模板加载器崩溃 "
"(:ticket:`26536`)。"

msgid ""
"Fixed a ``makemessages`` regression where temporary ``.py`` extensions were "
"leaked in source file paths (:ticket:`26341`)."
msgstr ""
"修复了 ``makemessages`` 的一个回归问题，其中在源文件路径中泄漏了临时的 ``."
"py`` 扩展名 (:ticket:`26341`)。"

msgid "Django 1.9.7 release notes"
msgstr "Django 1.9.7 版本发行说明"

msgid "*June 4, 2016*"
msgstr "*2016 年 6 月 4 日*"

msgid "Django 1.9.7 fixes several bugs in 1.9.6."
msgstr "Django 1.9.7 修复了 1.9.6 版本中的一些错误。"

msgid ""
"Removed the need for the ``request`` context processor on the admin login "
"page to fix a regression in 1.9 (:ticket:`26558`)."
msgstr ""
"移除了在管理员登录页面上需要 ``request`` 上下文处理器的需求，以修复 1.9 版本"
"中的一个回归问题 (:ticket:`26558`)。"

msgid ""
"Fixed translation of password validators' ``help_text`` in forms (:ticket:"
"`26544`)."
msgstr "修复了表单中密码验证器的 ``help_text`` 翻译问题 (:ticket:`26544`)。"

msgid ""
"Fixed a regression causing the cached template loader to crash when using "
"lazy template names (:ticket:`26603`)."
msgstr ""
"修复了一个回归问题，当使用延迟模板名称时，导致缓存的模板加载器崩溃 (:ticket:"
"`26603`)。"

msgid ""
"Fixed ``on_commit`` callbacks execution order when callbacks make "
"transactions (:ticket:`26627`)."
msgstr ""
"修复了在回调函数执行事务时的 ``on_commit`` 回调执行顺序问题 (:ticket:"
"`26627`)。"

msgid ""
"Fixed ``HStoreField`` to raise a ``ValidationError`` instead of crashing on "
"non-dictionary JSON input (:ticket:`26672`)."
msgstr ""
"修复了 ``HStoreField`` 在非字典 JSON 输入时引发错误而不是崩溃的问题，现在会引"
"发 ``ValidationError`` (:ticket:`26672`)。"

msgid ""
"Fixed ``dbshell`` crash on PostgreSQL with an empty database name (:ticket:"
"`26698`)."
msgstr ""
"修复了在 PostgreSQL 上使用空数据库名称时导致 ``dbshell`` 崩溃的问题 (:ticket:"
"`26698`)。"

msgid ""
"Fixed a regression in queries on a ``OneToOneField`` that has ``to_field`` "
"and ``primary_key=True`` (:ticket:`26667`)."
msgstr ""
"修复了关于具有 ``to_field`` 和 ``primary_key=True`` 的 ``OneToOneField`` 查询"
"的回归问题 (:ticket:`26667`)。"

msgid "Django 1.9.8 release notes"
msgstr "Django 1.9.8 版本发行说明"

msgid "Django 1.9.8 fixes a security issue and several bugs in 1.9.7."
msgstr "Django 1.9.8 修复了 1.9.7 版本中的一个安全问题和一些错误。"

msgid ""
"Fixed ``makemessages`` crash on Python 2 with non-ASCII file names (:ticket:"
"`26897`)."
msgstr ""
"修复了在 Python 2 上使用非 ASCII 文件名时导致 ``makemessages`` 崩溃的问题 (:"
"ticket:`26897`)。"

msgid "Django 1.9.9 release notes"
msgstr "Django 1.9.9 版本发行说明"

msgid "Django 1.9.9 fixes several bugs in 1.9.8."
msgstr "Django 1.9.9 修复了 1.9.8 版本中的一些错误。"

msgid ""
"Fixed invalid HTML in template postmortem on the debug page (:ticket:"
"`26938`)."
msgstr "修复了在调试页面的模板事故中出现的无效 HTML (:ticket:`26938`)。"

msgid ""
"Fixed some GIS database function crashes on MySQL 5.7 (:ticket:`26657`)."
msgstr "修复了在 MySQL 5.7 上的一些 GIS 数据库函数崩溃问题 (:ticket:`26657`)。"

msgid "Django 2.0 release notes"
msgstr "Django 2.0 版本发行说明"

msgid "Welcome to Django 2.0!"
msgstr "欢迎来到 Django 2.0 版本!"

msgid ""
"These release notes cover the :ref:`new features <whats-new-2.0>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-2.0>` "
"you'll want to be aware of when upgrading from Django 1.11 or earlier. "
"We've :ref:`dropped some features<removed-features-2.0>` that have reached "
"the end of their deprecation cycle, and we've :ref:`begun the deprecation "
"process for some features <deprecated-features-2.0>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新特性 <whats-new-2.0>`，以及从 Django 1.11 或更早版"
"本升级时需要注意的一些 :ref:`不兼容的变更 <backwards-incompatible-2.0>`。我们"
"已经 :ref:`删除了一些已经达到了弃用周期末尾的功能 <removed-features-2.0>`，并"
"且我们已经 :ref:`开始了一些功能的弃用过程 <deprecated-features-2.0>`。"

msgid ""
"This release starts Django's use of a :ref:`loose form of semantic "
"versioning <internal-release-cadence>`, but there aren't any major backwards "
"incompatible changes that might be expected of a 2.0 release. Upgrading "
"should be a similar amount of effort as past feature releases."
msgstr ""
"这个发布版本开始使用了 Django 的一种 :ref:`松散形式的语义版本 <internal-"
"release-cadence>`，但并没有出现与 2.0 版本发布相符的重大不兼容变更。升级应该"
"与过去的功能发布相似的努力。"

msgid ""
"Django 2.0 supports Python 3.4, 3.5, 3.6, and 3.7. We **highly recommend** "
"and only officially support the latest release of each series."
msgstr ""
"Django 2.0 支持 Python 3.4、3.5、3.6 和 3.7。我们 **强烈建议** 并且只官方支持"
"每个系列的最新版本。"

msgid "The Django 1.11.x series is the last to support Python 2.7."
msgstr "Django 1.11.x 系列是支持 Python 2.7 版本的最后一个系列。"

msgid ""
"Django 2.0 will be the last release series to support Python 3.4. If you "
"plan a deployment of Python 3.4 beyond the end-of-life for Django 2.0 (April "
"2019), stick with Django 1.11 LTS (supported until April 2020) instead. "
"Note, however, that the end-of-life for Python 3.4 is March 2019."
msgstr ""
"Django 2.0 将是最后一个支持 Python 3.4 的发布系列。如果您计划在 Django 2.0 的"
"生命周期结束后（2019 年 4 月）继续使用 Python 3.4，请改用 Django 1.11 LTS（支"
"持到 2020 年 4 月）代替。请注意，Python 3.4 的生命周期将于 2019 年 3 月结束。"

msgid "Third-party library support for older version of Django"
msgstr "对于较旧版本的 Django 的第三方库支持"

msgid ""
"Following the release of Django 2.0, we suggest that third-party app authors "
"drop support for all versions of Django prior to 1.11. At that time, you "
"should be able to run your package's tests using ``python -Wd`` so that "
"deprecation warnings do appear. After making the deprecation warning fixes, "
"your app should be compatible with Django 2.0."
msgstr ""
"在 Django 2.0 发布之后，我们建议第三方应用程序的作者停止支持 1.11 之前的所有 "
"Django 版本。在那个时候，你应该能够使用 ``python -Wd`` 运行你包的测试，以便弃"
"用警告会出现。在进行弃用警告修复后，你的应用程序应该与 Django 2.0 兼容。"

msgid "What's new in Django 2.0"
msgstr "Django 2.0 新特性"

msgid "Simplified URL routing syntax"
msgstr "简化 URL 路由语法"

msgid ""
"The new :func:`django.urls.path()` function allows a simpler, more readable "
"URL routing syntax. For example, this example from previous Django releases::"
msgstr ""
"新版本 :func:`django.urls.path()` 函数使用更简单易读的 URL 路由语法。一个来"
"自 Django 旧版本的例子："

msgid "could be written as::"
msgstr "可以写成："

msgid ""
"The new syntax supports type coercion of URL parameters. In the example, the "
"view will receive the ``year`` keyword argument as an integer rather than as "
"a string. Also, the URLs that will match are slightly less constrained in "
"the rewritten example. For example, the year 10000 will now match since the "
"year integers aren't constrained to be exactly four digits long as they are "
"in the regular expression."
msgstr ""
"新版本语法支持对 URL 参数的强制类型转换。在这个例子中，视图将会以数字类型接收"
"参数 ``year`` 而不是以字符串类型。而且 URLs 的匹配限制也减少了。例如，因为参"
"数 year 并没有像正则表达式中那样明确限制为四位数，year 为 10000 也会匹配成"
"功。"

msgid ""
"The ``django.conf.urls.url()`` function from previous versions is now "
"available as :func:`django.urls.re_path`. The old location remains for "
"backwards compatibility, without an imminent deprecation. The old ``django."
"conf.urls.include()`` function is now importable from ``django.urls`` so you "
"can use ``from django.urls import include, path, re_path`` in your URLconfs."
msgstr ""
"旧版本中的 ``django.conf.urls.url()`` 函数现在可以在 :func:`django.urls."
"re_path` 中获取。前者依然保留，向后兼容，并没有立即弃用。旧版本中的 ``django."
"conf.urls.include()`` 函数现在可以从 ``django.urls`` 中导入，这样你就可以在 "
"URLconfs 中使用 ``from django.urls import include, path, re_path`` 。"

msgid ""
"The :doc:`/topics/http/urls` document is rewritten to feature the new syntax "
"and provide more details."
msgstr ""
"重新编写的文档 :doc:`/topics/http/urls` 涵盖了新的语法并且提供了更多的细节。"

msgid "Mobile-friendly ``contrib.admin``"
msgstr "``contrib.admin`` 针对移动设备的优化改进"

msgid ""
"The admin is now responsive and supports all major mobile devices. Older "
"browsers may experience varying levels of graceful degradation."
msgstr ""
"新版本的 admin 可以响应和支持所有主流移动设备。较旧的浏览器可能会遇到不同程度"
"的功能降低。"

msgid "Window expressions"
msgstr "Window 表达式"

msgid ""
"The new :class:`~django.db.models.expressions.Window` expression allows "
"adding an ``OVER`` clause to querysets. You can use :ref:`window functions "
"<window-functions>` and :ref:`aggregate functions <aggregation-functions>` "
"in the expression."
msgstr ""
"新的 :class:`~django.db.models.expressions.Window` 表达式允许在查询集上添加一"
"个 ``OVER`` 子句。你可以在这个表达式中使用 :ref:`窗口函数 <window-"
"functions>` 和 :ref:`聚合函数 <aggregation-functions>`。"

msgid ""
"The new :attr:`.ModelAdmin.autocomplete_fields` attribute and :meth:`."
"ModelAdmin.get_autocomplete_fields` method allow using a `Select2 <https://"
"select2.org/>`_ search widget for ``ForeignKey`` and ``ManyToManyField``."
msgstr ""
"新的 :attr:`.ModelAdmin.autocomplete_fields` 属性和 :meth:`.ModelAdmin."
"get_autocomplete_fields` 方法允许在 ``ForeignKey`` 和 ``ManyToManyField`` 上"
"使用 `Select2 <https://select2.org/>`_ 搜索小部件。"

msgid ""
"The default iteration count for the PBKDF2 password hasher is increased from "
"36,000 to 100,000."
msgstr "PBKDF2 密码散列器的默认迭代计数从 36,000 增加到 100,000。"

msgid ""
"Added MySQL support for the :class:`~django.contrib.gis.db.models.functions."
"AsGeoJSON` function, :class:`~django.contrib.gis.db.models.functions."
"GeoHash` function, :class:`~django.contrib.gis.db.models.functions.IsValid` "
"function, :lookup:`isvalid` lookup, and :ref:`distance lookups <distance-"
"lookups>`."
msgstr ""
"增加了 :class:`~django.contrib.gis.db.models.functions.AsGeoJSON` 函数、 :"
"class:`~django.contrib.gis.db.models.functions.GeoHash` 函数、:class:"
"`~django.contrib.gis.db.models.functions.IsValid` 函数、:lookup:`isvalid` 查"
"找、以及 :ref:`distance lookups <distance-lookups>` 对 MySQL 的支持。"

msgid ""
"Added the :class:`~django.contrib.gis.db.models.functions.Azimuth` and :"
"class:`~django.contrib.gis.db.models.functions.LineLocatePoint` functions, "
"supported on PostGIS and SpatiaLite."
msgstr ""
"添加了 PostGIS 和 SpatiaLite 支持的两个函数 :class:`~django.contrib.gis.db."
"models.functions.Azimuth` 和 :class:`~django.contrib.gis.db.models.functions."
"LineLocatePoint`。"

msgid ""
"Any :class:`~django.contrib.gis.geos.GEOSGeometry` imported from GeoJSON now "
"has its SRID set."
msgstr ""
"现在所有从 GeoJSON 导入的 :class:`~django.contrib.gis.geos.GEOSGeometry` 都设"
"置了其 SRID。"

msgid ""
"Added the :attr:`.OSMWidget.default_zoom` attribute to customize the map's "
"default zoom level."
msgstr ""
"添加了 :attr:`.OSMWidget.default_zoom` 属性来自定义地图的默认缩放级别。"

msgid ""
"Made metadata readable and editable on rasters through the :attr:`~django."
"contrib.gis.gdal.GDALRaster.metadata`, :attr:`~django.contrib.gis.gdal."
"GDALRaster.info`, and :attr:`~django.contrib.gis.gdal.GDALBand.metadata` "
"attributes."
msgstr ""
"通过 :attr:`~django.contrib.gis.gdal.GDALRaster.metadata`、:attr:`~django."
"contrib.gis.gdal.GDALRaster.info` 和 :attr:`~django.contrib.gis.gdal."
"GDALBand.metadata` 属性，使栅格数据的元数据可读可编辑。"

msgid ""
"Allowed passing driver-specific creation options to :class:`~django.contrib."
"gis.gdal.GDALRaster` objects using ``papsz_options``."
msgstr ""
"允许使用 ``papsz_options`` 将 driver-specific creation options 传递给 :class:"
"`~django.contrib.gis.gdal.GDALRaster` 对象。"

msgid ""
"Allowed creating :class:`~django.contrib.gis.gdal.GDALRaster` objects in "
"GDAL's internal virtual filesystem. Rasters can now be :ref:`created from "
"and converted to binary data <gdal-raster-vsimem>` in-memory."
msgstr ""
"允许在 GDAL 的内部虚拟文件系统中创建 :class:`~django.contrib.gis.gdal."
"GDALRaster` 对象。现在可以将栅格数据从内存中的二进制数据 :ref:`创建和转换 "
"<gdal-raster-vsimem>`。"

msgid ""
"The new :meth:`GDALBand.color_interp() <django.contrib.gis.gdal.GDALBand."
"color_interp>` method returns the color interpretation for the band."
msgstr ""
"新的 :meth:`GDALBand.color_interp() <django.contrib.gis.gdal.GDALBand."
"color_interp>` 方法返回了该波段的颜色解释。"

msgid ""
"The new ``distinct`` argument for :class:`~django.contrib.postgres."
"aggregates.ArrayAgg` determines if concatenated values will be distinct."
msgstr ""
"对于 :class:`~django.contrib.postgres.aggregates.ArrayAgg`，新的 "
"``distinct`` 参数确定连接的值是否是不同的。"

msgid ""
"The new :class:`~django.contrib.postgres.functions.RandomUUID` database "
"function returns a version 4 UUID. It requires use of PostgreSQL's "
"``pgcrypto`` extension which can be activated using the new :class:`~django."
"contrib.postgres.operations.CryptoExtension` migration operation."
msgstr ""
"新的 :class:`~django.contrib.postgres.functions.RandomUUID` 数据库函数返回版"
"本 4 的 UUID。它需要使用 PostgreSQL 的 ``pgcrypto`` 扩展，可以通过新的 :"
"class:`~django.contrib.postgres.operations.CryptoExtension` 迁移操作来激活。"

msgid ""
":class:`django.contrib.postgres.indexes.GinIndex` now supports the "
"``fastupdate`` and ``gin_pending_list_limit`` parameters."
msgstr ""
":class:`django.contrib.postgres.indexes.GinIndex` 现在支持 ``fastupdate`` 和 "
"``gin_pending_list_limit`` 参数。"

msgid ""
"The new :class:`~django.contrib.postgres.indexes.GistIndex` class allows "
"creating ``GiST`` indexes in the database. The new :class:`~django.contrib."
"postgres.operations.BtreeGistExtension` migration operation installs the "
"``btree_gist`` extension to add support for operator classes that aren't "
"built-in."
msgstr ""
"新的 :class:`~django.contrib.postgres.indexes.GistIndex` 类允许在数据库中创"
"建 ``GiST`` 索引。新的 :class:`~django.contrib.postgres.operations."
"BtreeGistExtension` 迁移操作安装了 ``btree_gist`` 扩展，以添加对不是内置的操"
"作符类的支持。"

msgid ""
":djadmin:`inspectdb` can now introspect ``JSONField`` and various "
"``RangeField``\\s (``django.contrib.postgres`` must be in "
"``INSTALLED_APPS``)."
msgstr ""
":djadmin:`inspectdb` 现在可以内省 ``JSONField`` 和各种 ``RangeField`` （必须"
"将 ``django.contrib.postgres`` 添加到 ``INSTALLED_APPS`` 中）。"

msgid ""
"Added the ``protocol`` keyword argument to the :class:`~django.contrib."
"sitemaps.GenericSitemap` constructor."
msgstr ""
"在 :class:`~django.contrib.sitemaps.GenericSitemap` 构造函数中添加了 "
"``protocol`` 关键字参数。"

msgid ""
"``cache.set_many()`` now returns a list of keys that failed to be inserted. "
"For the built-in backends, failed inserts can only happen on memcached."
msgstr ""
"``cache.set_many()`` 现在返回一个未能插入的键的列表。对于内置的后端，失败的插"
"入只会发生在 memcached 上。"

msgid ""
":meth:`File.open() <django.core.files.File.open>` can be used as a context "
"manager, e.g. ``with file.open() as f:``."
msgstr ""
":meth:`File.open() <django.core.files.File.open>` 可以作为上下文管理器使用，"
"例如 ``with file.open() as f:``。"

msgid ""
"The new ``date_attrs`` and ``time_attrs`` arguments for :class:`~django."
"forms.SplitDateTimeWidget` and :class:`~django.forms."
"SplitHiddenDateTimeWidget` allow specifying different HTML attributes for "
"the ``DateInput`` and ``TimeInput`` (or hidden) subwidgets."
msgstr ""
"对于 :class:`~django.forms.SplitDateTimeWidget` 和 :class:`~django.forms."
"SplitHiddenDateTimeWidget`，新的 ``date_attrs`` 和 ``time_attrs`` 参数允许指"
"定不同的 HTML 属性用于 ``DateInput`` 和 ``TimeInput`` （或隐藏）子部件。"

msgid ""
"The new :meth:`Form.errors.get_json_data() <django.forms.Form.errors."
"get_json_data>` method returns form errors as a dictionary suitable for "
"including in a JSON response."
msgstr ""
"新的 :meth:`Form.errors.get_json_data() <django.forms.Form.errors."
"get_json_data>` 方法返回适用于包含在 JSON 响应中的表单错误的字典。"

msgid ""
"The new :attr:`.ContextMixin.extra_context` attribute allows adding context "
"in ``View.as_view()``."
msgstr ""
"新属性 :attr:`.ContextMixin.extra_context` 允许在 ``View.as_view()`` 添加上下"
"文。"

msgid ""
":djadmin:`inspectdb` now translates MySQL's unsigned integer columns to "
"``PositiveIntegerField`` or ``PositiveSmallIntegerField``."
msgstr ""
":djadmin:`inspectdb` 现在将 MySQL 的无符号整数列翻译为 "
"``PositiveIntegerField`` 或 ``PositiveSmallIntegerField``。"

msgid ""
"The new :option:`makemessages --add-location` option controls the comment "
"format in ``.po`` files."
msgstr ""
"新的 :option:`makemessages --add-location` 选项控制 ``.po`` 文件中的注释格"
"式。"

msgid ""
":djadmin:`loaddata` can now :ref:`read from stdin <loading-fixtures-stdin>`."
msgstr ""
":djadmin:`loaddata` 现在可以从标准输入中 :ref:`读取数据 <loading-fixtures-"
"stdin>`。"

msgid ""
"The new :option:`diffsettings --output` option allows formatting the output "
"in a unified diff format."
msgstr ""
"新的 :option:`diffsettings --output` 选项允许以统一的差异格式格式化输出。"

msgid ""
"On Oracle, :djadmin:`inspectdb` can now introspect ``AutoField`` if the "
"column is created as an identity column."
msgstr ""
"在 Oracle 上，:djadmin:`inspectdb` 现在可以内省 ``AutoField``，如果列被创建为"
"标识列（identity column）。"

msgid "On MySQL, :djadmin:`dbshell` now supports client-side TLS certificates."
msgstr "在 MySQL 上，:djadmin:`dbshell` 现在支持客户端端的 TLS 证书。"

msgid ""
"The new :option:`squashmigrations --squashed-name` option allows naming the "
"squashed migration."
msgstr ""
"新的 :option:`squashmigrations --squashed-name` 选项允许命名合并后的迁移。"

msgid ""
"The new :class:`~django.db.models.functions.StrIndex` database function "
"finds the starting index of a string inside another string."
msgstr ""
"新的 :class:`~django.db.models.functions.StrIndex` 数据库函数用于查找一个字符"
"串在另一个字符串中的起始索引。"

msgid ""
"On Oracle, ``AutoField`` and ``BigAutoField`` are now created as `identity "
"columns <https://docs.oracle.com/en/database/oracle/oracle-database/21/"
"drdaa/ intro-to-tools-and-products-supporting-migraiton.html#GUID-14E4817B-"
"F3BC-4D99 -B471-A0ACDC303CC9>`__."
msgstr ""
"在 Oracle 上，现在会将 ``AutoField`` 和 ``BigAutoField`` 创建为 `标识列 "
"<https://docs.oracle.com/en/database/oracle/oracle-database/21/drdaa/ intro-"
"to-tools-and-products-supporting-migraiton.html#GUID-14E4817B-F3BC-4D99 -"
"B471-A0ACDC303CC9>`__。"

msgid ""
"The new ``chunk_size`` parameter of :meth:`.QuerySet.iterator` controls the "
"number of rows fetched by the Python database client when streaming results "
"from the database. For databases that don't support server-side cursors, it "
"controls the number of results Django fetches from the database adapter."
msgstr ""
":meth:`.QuerySet.iterator` 的新参数 ``chunk_size`` 控制在从数据库流式传输结果"
"时由 Python 数据库客户端提取的行数。对于不支持服务器端游标的数据库，它控制 "
"Django 从数据库适配器提取的结果数量。"

msgid ""
":meth:`.QuerySet.earliest`, :meth:`.QuerySet.latest`, and :attr:`Meta."
"get_latest_by <django.db.models.Options.get_latest_by>` now allow ordering "
"by several fields."
msgstr ""
":meth:`.QuerySet.earliest`、:meth:`.QuerySet.latest` 和 :attr:`Meta."
"get_latest_by <django.db.models.Options.get_latest_by>` 现在允许按多个字段排"
"序。"

msgid ""
"Added the :class:`~django.db.models.functions.ExtractQuarter` function to "
"extract the quarter from :class:`~django.db.models.DateField` and :class:"
"`~django.db.models.DateTimeField`, and exposed it through the :lookup:"
"`quarter` lookup."
msgstr ""
"新增了 :class:`~django.db.models.functions.ExtractQuarter` 函数，用于从 :"
"class:`~django.db.models.DateField` 和 :class:`~django.db.models."
"DateTimeField` 中提取季度，并通过 :lookup:`quarter` 查找公开。"

msgid ""
"Added the :class:`~django.db.models.functions.TruncQuarter` function to "
"truncate :class:`~django.db.models.DateField` and :class:`~django.db.models."
"DateTimeField` to the first day of a quarter."
msgstr ""
"新增了 :class:`~django.db.models.functions.TruncQuarter` 函数，用于将 :class:"
"`~django.db.models.DateField` 和 :class:`~django.db.models.DateTimeField` 截"
"断到季度的第一天。"

msgid ""
"Added the :attr:`~django.db.models.Index.db_tablespace` parameter to class-"
"based indexes."
msgstr ""
"为基于类的索引添加了 :attr:`~django.db.models.Index.db_tablespace` 参数。"

msgid ""
"If the database supports a native duration field (Oracle and PostgreSQL), :"
"class:`~django.db.models.functions.Extract` now works with :class:`~django."
"db.models.DurationField`."
msgstr ""
"如果数据库支持原生的持续时间字段（Oracle 和 PostgreSQL），:class:`~django.db."
"models.functions.Extract` 现在可以与 :class:`~django.db.models."
"DurationField` 一起使用。"

msgid ""
"Added the ``of`` argument to :meth:`.QuerySet.select_for_update()`, "
"supported on PostgreSQL and Oracle, to lock only rows from specific tables "
"rather than all selected tables. It may be helpful particularly when :meth:"
"`~.QuerySet.select_for_update()` is used in conjunction with :meth:`~."
"QuerySet.select_related()`."
msgstr ""
"新增了 ``of`` 参数到 :meth:`.QuerySet.select_for_update()`，在 PostgreSQL 和 "
"Oracle 上支持，可以锁定特定表中的行，而不是所有选定的表。这在特别是当 :meth:"
"`~.QuerySet.select_for_update()` 与 :meth:`~.QuerySet.select_related()` 结合"
"使用时可能会有所帮助。"

msgid ""
"The new ``field_name`` parameter of :meth:`.QuerySet.in_bulk` allows "
"fetching results based on any unique model field."
msgstr ""
":meth:`.QuerySet.in_bulk` 的新参数 ``field_name`` 允许根据任何唯一模型字段获"
"取结果。"

msgid ""
":meth:`.CursorWrapper.callproc()` now takes an optional dictionary of "
"keyword parameters, if the backend supports this feature. Of Django's built-"
"in backends, only Oracle supports it."
msgstr ""
":meth:`.CursorWrapper.callproc()` 现在可以接受一个可选的关键字参数字典，如果"
"后端支持此功能。Django 内置的后端中，只有 Oracle 支持这个功能。"

msgid ""
"The new :meth:`connection.execute_wrapper() <django.db.backends.base."
"DatabaseWrapper.execute_wrapper>` method allows :doc:`installing wrappers "
"around execution of database queries </topics/db/instrumentation>`."
msgstr ""
"新的 :meth:`connection.execute_wrapper() <django.db.backends.base."
"DatabaseWrapper.execute_wrapper>` 方法允许 :doc:`在执行数据库查询时安装包装"
"器 </topics/db/instrumentation>`。"

msgid ""
"The new ``filter`` argument for built-in aggregates allows :ref:`adding "
"different conditionals <conditional-aggregation>` to multiple aggregations "
"over the same fields or relations."
msgstr ""
"内置聚合函数的新 ``filter`` 参数允许在同一字段或关系上的多个聚合中 :ref:`添加"
"不同的条件 <conditional-aggregation>`。"

msgid ""
"Added support for expressions in :attr:`Meta.ordering <django.db.models."
"Options.ordering>`."
msgstr ""
"在 :attr:`Meta.ordering <django.db.models.Options.ordering>` 中添加了对表达式"
"的支持。"

msgid ""
"The new ``named`` parameter of :meth:`.QuerySet.values_list` allows fetching "
"results as named tuples."
msgstr ""
":meth:`.QuerySet.values_list` 的新参数 ``named`` 允许将结果作为命名元组获取。"

msgid ""
"The new :class:`.FilteredRelation` class allows adding an ``ON`` clause to "
"querysets."
msgstr "新的 :class:`.FilteredRelation` 类允许在查询集中添加一个 ``ON`` 子句。"

msgid "Pagination"
msgstr "分页"

msgid ""
"Added :meth:`Paginator.get_page() <django.core.paginator.Paginator."
"get_page>` to provide the documented pattern of handling invalid page "
"numbers."
msgstr ""
"添加了 :meth:`Paginator.get_page() <django.core.paginator.Paginator."
"get_page>`，以提供处理无效页码的文档化模式。"

msgid "The :djadmin:`runserver` web server supports HTTP 1.1."
msgstr ":djadmin:`runserver` Web 服务器支持 HTTP 1.1。"

msgid ""
"To increase the usefulness of :meth:`.Engine.get_default` in third-party "
"apps, it now returns the first engine if multiple ``DjangoTemplates`` "
"engines are configured in ``TEMPLATES`` rather than raising "
"``ImproperlyConfigured``."
msgstr ""
"为了增加第三方应用程序中 :meth:`.Engine.get_default` 的实用性，如果在 "
"``TEMPLATES`` 中配置了多个 ``DjangoTemplates`` 引擎，它现在将返回第一个引擎，"
"而不是引发 ``ImproperlyConfigured`` 异常。"

msgid "Custom template tags may now accept keyword-only arguments."
msgstr "现在自定义模板标签可以接受仅限关键字的参数。"

msgid "Added threading support to :class:`~django.test.LiveServerTestCase`."
msgstr "向 :class:`~django.test.LiveServerTestCase` 添加了多线程支持。"

msgid ""
"Added settings that allow customizing the test tablespace parameters for "
"Oracle: :setting:`DATAFILE_SIZE`, :setting:`DATAFILE_TMP_SIZE`, :setting:"
"`DATAFILE_EXTSIZE`, and :setting:`DATAFILE_TMP_EXTSIZE`."
msgstr ""
"添加了允许自定义 Oracle 测试表空间参数的设置：:setting:`DATAFILE_SIZE`、:"
"setting:`DATAFILE_TMP_SIZE`、:setting:`DATAFILE_EXTSIZE` 和 :setting:"
"`DATAFILE_TMP_EXTSIZE`。"

msgid ""
"The new :class:`.ProhibitNullCharactersValidator` disallows the null "
"character in the input of the :class:`~django.forms.CharField` form field "
"and its subclasses. Null character input was observed from vulnerability "
"scanning tools. Most databases silently discard null characters, but "
"psycopg2 2.7+ raises an exception when trying to save a null character to a "
"char/text field with PostgreSQL."
msgstr ""
"新的 :class:`.ProhibitNullCharactersValidator` 在 :class:`~django.forms."
"CharField` 表单字段及其子类的输入中禁止使用空字符。空字符输入是由于漏洞扫描工"
"具而观察到的。大多数数据库会悄悄地丢弃空字符，但是当尝试将空字符保存到 "
"PostgreSQL 的 char/text 字段时，psycopg2 2.7+ 会引发异常。"

msgid "Backwards incompatible changes in 2.0"
msgstr "2.0 版本的不向后兼容变更"

msgid "Removed support for bytestrings in some places"
msgstr "在某些地方移除了对字节字符串的支持"

msgid ""
"To support native Python 2 strings, older Django versions had to accept both "
"bytestrings and Unicode strings. Now that Python 2 support is dropped, "
"bytestrings should only be encountered around input/output boundaries "
"(handling of binary fields or HTTP streams, for example). You might have to "
"update your code to limit bytestring usage to a minimum, as Django no longer "
"accepts bytestrings in certain code paths. Python's :option:`-b` option may "
"help detect that mistake in your code."
msgstr ""
"为了支持原生的 Python 2 字符串，旧版本的 Django 必须同时接受字节字符串和 "
"Unicode 字符串。现在 Python 2 的支持已被移除，字节字符串应该只出现在输入/输出"
"边界（例如处理二进制字段或 HTTP 流）附近。您可能需要更新您的代码，以将字节字"
"符串的使用限制到最低，因为 Django 不再在某些代码路径中接受字节字符串。Python "
"的 :option:`-b` 选项可能有助于检测代码中的这种错误。"

msgid ""
"For example, ``reverse()`` now uses ``str()`` instead of ``force_text()`` to "
"coerce the ``args`` and ``kwargs`` it receives, prior to their placement in "
"the URL. For bytestrings, this creates a string with an undesired ``b`` "
"prefix as well as additional quotes (``str(b'foo')`` is ``\"b'foo'\"``). To "
"adapt, call ``decode()`` on the bytestring before passing it to "
"``reverse()``."
msgstr ""
"例如，现在 ``reverse()`` 在将接收到的 ``args`` 和 ``kwargs`` 放置在 URL 之"
"前，使用 ``str()`` 而不是 ``force_text()`` 来强制转换它们。对于字节字符串，这"
"会创建一个带有不希望的 ``b`` 前缀以及额外引号的字符串（``str(b'foo')`` 是 "
"``\"b'foo'\"``）。为了适应这种变化，在将字节字符串传递给 ``reverse()`` 之前，"
"请调用 ``decode()``。"

msgid ""
"The ``DatabaseOperations.datetime_cast_date_sql()``, "
"``datetime_cast_time_sql()``, ``datetime_trunc_sql()``, "
"``datetime_extract_sql()``, and ``date_interval_sql()`` methods now return "
"only the SQL to perform the operation instead of SQL and a list of "
"parameters."
msgstr ""
"现在，``DatabaseOperations.datetime_cast_date_sql()``、"
"``datetime_cast_time_sql()``、``datetime_trunc_sql()``、"
"``datetime_extract_sql()`` 和 ``date_interval_sql()`` 方法仅返回执行操作的 "
"SQL，而不再返回 SQL 和参数列表。"

msgid ""
"Third-party database backends should add a ``DatabaseWrapper.display_name`` "
"attribute with the name of the database that your backend works with. Django "
"may use it in various messages, such as in system checks."
msgstr ""
"第三方数据库后端应该添加一个名为 ``DatabaseWrapper.display_name`` 的属性，该"
"属性包含您的后端适用于的数据库名称。Django 可能会在各种消息中使用它，例如系统"
"检查中。"

msgid ""
"The first argument of ``SchemaEditor._alter_column_type_sql()`` is now "
"``model`` rather than ``table``."
msgstr ""
"``SchemaEditor._alter_column_type_sql()`` 的第一个参数现在是 ``model``，而不"
"再是 ``table``。"

msgid ""
"The first argument of ``SchemaEditor._create_index_name()`` is now "
"``table_name`` rather than ``model``."
msgstr ""
"``SchemaEditor._create_index_name()`` 的第一个参数现在是 ``table_name``，而不"
"再是 ``model``。"

msgid ""
"To enable ``FOR UPDATE OF`` support, set ``DatabaseFeatures."
"has_select_for_update_of = True``. If the database requires that the "
"arguments to ``OF`` be columns rather than tables, set ``DatabaseFeatures."
"select_for_update_of_column = True``."
msgstr ""
"要启用 ``FOR UPDATE OF`` 支持，请设置 ``DatabaseFeatures."
"has_select_for_update_of = True``。如果数据库要求 ``OF`` 的参数是列而不是表，"
"请设置 ``DatabaseFeatures.select_for_update_of_column = True``。"

msgid ""
"To enable support for :class:`~django.db.models.expressions.Window` "
"expressions, set ``DatabaseFeatures.supports_over_clause`` to ``True``. You "
"may need to customize the ``DatabaseOperations."
"window_start_rows_start_end()`` and/or ``window_start_range_start_end()`` "
"methods."
msgstr ""
"要启用对 :class:`~django.db.models.expressions.Window` 表达式的支持，请将 "
"``DatabaseFeatures.supports_over_clause`` 设置为 ``True``。您可能需要自定义 "
"``DatabaseOperations.window_start_rows_start_end()`` 和/或 "
"``window_start_range_start_end()`` 方法。"

msgid ""
"Third-party database backends should add a ``DatabaseOperations."
"cast_char_field_without_max_length`` attribute with the database data type "
"that will be used in the :class:`~django.db.models.functions.Cast` function "
"for a ``CharField`` if the ``max_length`` argument isn't provided."
msgstr ""
"第三方数据库后端应该添加一个名为 ``DatabaseOperations."
"cast_char_field_without_max_length`` 的属性，该属性指定在没有提供 "
"``max_length`` 参数的情况下，在 :class:`~django.db.models.functions.Cast` 函"
"数中将用于 ``CharField`` 的数据库数据类型。"

msgid ""
"The first argument of ``DatabaseCreation._clone_test_db()`` and "
"``get_test_db_clone_settings()`` is now ``suffix`` rather than ``number`` "
"(in case you want to rename the signatures in your backend for consistency). "
"``django.test`` also now passes those values as strings rather than as "
"integers."
msgstr ""
"``DatabaseCreation._clone_test_db()`` 和 ``get_test_db_clone_settings()`` 的"
"第一个参数现在是 ``suffix``，而不再是 ``number``（如果您希望为了一致性而在您"
"的后端中重命名签名）。``django.test`` 现在也将这些值作为字符串而不是整数传"
"递。"

msgid ""
"Third-party database backends should add a ``DatabaseIntrospection."
"get_sequences()`` method based on the stub in ``BaseDatabaseIntrospection``."
msgstr ""
"第三方数据库后端应该基于 ``BaseDatabaseIntrospection`` 中的存根添加一个名为 "
"``DatabaseIntrospection.get_sequences()`` 的方法。"

msgid "Dropped support for Oracle 11.2"
msgstr "不再支持 Oracle 11.2"

msgid ""
"The end of upstream support for Oracle 11.2 is Dec. 2020. Django 1.11 will "
"be supported until April 2020 which almost reaches this date. Django 2.0 "
"officially supports Oracle 12.1+."
msgstr ""
"Oracle 11.2 的上游支持将于 2020 年 12 月结束。 Django 1.11 将在 2020 年 4 月"
"之前得到支持，几乎达到了这个日期。 Django 2.0 正式支持 Oracle 12.1 及更高版"
"本。"

msgid "Default MySQL isolation level is read committed"
msgstr "默认的 MySQL 隔离级别为读已提交（read committed）"

msgid ""
"MySQL's default isolation level, repeatable read, may cause data loss in "
"typical Django usage. To prevent that and for consistency with other "
"databases, the default isolation level is now read committed. You can use "
"the :setting:`DATABASES` setting to :ref:`use a different isolation level "
"<mysql-isolation-level>`, if needed."
msgstr ""
"MySQL 的默认隔离级别，可重复读（repeatable read），在典型的 Django 使用中可能"
"会导致数据丢失。为了防止这种情况并保持与其他数据库的一致性，现在默认的隔离级"
"别是读提交（read committed）。如果需要，您可以使用 :setting:`DATABASES` 设置"
"来 :ref:`使用不同的隔离级别 <mysql-isolation-level>`。"

msgid ""
":attr:`AbstractUser.last_name <django.contrib.auth.models.User.last_name>` "
"``max_length`` increased to 150"
msgstr ""
":attr:`AbstractUser.last_name <django.contrib.auth.models.User.last_name>` "
"的 ``max_length`` 增加到了 150。"

msgid ""
"A migration for :attr:`django.contrib.auth.models.User.last_name` is "
"included. If you have a custom user model inheriting from ``AbstractUser``, "
"you'll need to generate and apply a database migration for your user model."
msgstr ""
"包含了 :attr:`django.contrib.auth.models.User.last_name` 的迁移。如果您有一个"
"从 ``AbstractUser`` 继承的自定义用户模型，您需要生成并应用一个数据库迁移来更"
"新您的用户模型。"

msgid ""
"If you want to preserve the 30 character limit for last names, use a custom "
"form::"
msgstr "如果您想保留姓氏的 30 个字符限制，请使用自定义表单："

msgid ""
"If you wish to keep this restriction in the admin when editing users, set "
"``UserAdmin.form`` to use this form::"
msgstr ""
"如果你想在管理中编辑用户时保留这个限制，请将 ``UserAdmin.form`` 设置为使用这"
"个表单："

msgid "``QuerySet.reverse()`` and ``last()`` are prohibited after slicing"
msgstr "在切片之后，禁止使用 ``QuerySet.reverse()`` 和 ``last()``。"

msgid ""
"Calling ``QuerySet.reverse()`` or ``last()`` on a sliced queryset leads to "
"unexpected results due to the slice being applied after reordering. This is "
"now prohibited, e.g.:"
msgstr ""
"在切片后调用 ``QuerySet.reverse()`` 或 ``last()`` 会导致意外的结果，因为切片"
"是在重新排序后应用的。现在已禁止这样使用，例如："

msgid "Form fields no longer accept optional arguments as positional arguments"
msgstr "表单字段不再将可选参数作为位置参数接受"

msgid ""
"To help prevent runtime errors due to incorrect ordering of form field "
"arguments, optional arguments of built-in form fields are no longer accepted "
"as positional arguments. For example::"
msgstr ""
"为了帮助防止由于表单字段参数顺序不正确而导致的运行时错误，内置表单字段的可选"
"参数不再作为位置参数接受。例如："

msgid "raises an exception and should be replaced with::"
msgstr "会引发异常，并且应该替换为："

msgid "``call_command()`` validates the options it receives"
msgstr "``call_command()`` 验证它接收到的选项"

msgid ""
"``call_command()`` now validates that the argument parser of the command "
"being called defines all of the options passed to ``call_command()``."
msgstr ""
"``call_command()`` 现在验证被调用的命令的参数解析器是否定义了传递给 "
"``call_command()`` 的所有选项。"

msgid ""
"For custom management commands that use options not created using ``parser."
"add_argument()``, add a ``stealth_options`` attribute on the command::"
msgstr ""
"对于使用非 ``parser.add_argument()`` 创建的选项的自定义管理命令，请在命令上添"
"加一个名为 ``stealth_options`` 的属性："

msgid "Indexes no longer accept positional arguments"
msgstr "索引不再接受位置参数"

msgid "Foreign key constraints are now enabled on SQLite"
msgstr "现在在 SQLite 上启用了外键约束（Foreign key constraints）"

msgid ""
"This will appear as a backwards-incompatible change (``IntegrityError: "
"FOREIGN KEY constraint failed``) if attempting to save an existing model "
"instance that's violating a foreign key constraint."
msgstr ""
"如果尝试保存违反外键约束的现有模型实例，将会出现不兼容的后向变更"
"（``IntegrityError: FOREIGN KEY constraint failed``）。"

msgid ""
"Foreign keys are now created with ``DEFERRABLE INITIALLY DEFERRED`` instead "
"of ``DEFERRABLE IMMEDIATE``. Thus, tables may need to be rebuilt to recreate "
"foreign keys with the new definition, particularly if you're using a pattern "
"like this::"
msgstr ""
"外键现在使用 ``DEFERRABLE INITIALLY DEFERRED`` 而不是 ``DEFERRABLE "
"IMMEDIATE`` 来创建。因此，可能需要重新构建表以使用新的定义重新创建外键，特别"
"是如果您使用了类似这样的模式："

msgid ""
"If you don't recreate the foreign key as ``DEFERRED``, the first "
"``create()`` would fail now that foreign key constraints are enforced."
msgstr ""
"如果不将外键重新创建为 ``DEFERRED``，那么由于现在强制执行外键约束，第一次的 "
"``create()`` 将会失败。"

msgid ""
"Backup your database first! After upgrading to Django 2.0, you can then "
"rebuild tables using a script similar to this::"
msgstr ""
"首先备份您的数据库！在升级到 Django 2.0 后，您可以使用类似以下脚本的方式重新"
"构建表格："

msgid ""
"This script hasn't received extensive testing and needs adaption for various "
"cases such as multiple databases. Feel free to contribute improvements."
msgstr ""
"这个脚本尚未经过广泛测试，并且需要根据不同情况进行调整，比如多个数据库的情"
"况。欢迎贡献改进。"

msgid ""
"In addition, because of a table alteration limitation of SQLite, it's "
"prohibited to perform :class:`~django.db.migrations.operations.RenameModel` "
"and :class:`~django.db.migrations.operations.RenameField` operations on "
"models or fields referenced by other models in a transaction. In order to "
"allow migrations containing these operations to be applied, you must set the "
"``Migration.atomic`` attribute to ``False``."
msgstr ""
"另外，由于 SQLite 的表更改限制，禁止在事务中对被其他模型引用的模型或字段执"
"行 :class:`~django.db.migrations.operations.RenameModel` 和 :class:`~django."
"db.migrations.operations.RenameField` 操作。为了允许应用包含这些操作的迁移，"
"您必须将 ``Migration.atomic`` 属性设置为 ``False``。"

msgid ""
"The ``SessionAuthenticationMiddleware`` class is removed. It provided no "
"functionality since session authentication is unconditionally enabled in "
"Django 1.10."
msgstr ""
"``SessionAuthenticationMiddleware`` 类已被移除。自 Django 1.10 版本起，它不再"
"提供任何功能，因为会话身份验证已无条件启用。"

msgid ""
"The default HTTP error handlers (``handler404``, etc.) are now callables "
"instead of dotted Python path strings. Django favors callable references "
"since they provide better performance and debugging experience."
msgstr ""
"默认的 HTTP 错误处理程序（``handler404`` 等）现在是可调用函数，而不再是点分 "
"Python 路径字符串。Django 更倾向于可调用引用，因为它们提供更好的性能和调试体"
"验。"

msgid ""
":class:`~django.views.generic.base.RedirectView` no longer silences "
"``NoReverseMatch`` if the ``pattern_name`` doesn't exist."
msgstr ""
":class:`~django.views.generic.base.RedirectView` 不再在 ``pattern_name`` 不存"
"在时抑制 ``NoReverseMatch``。"

msgid ""
"When ``USE_L10N`` is off, :class:`~django.forms.FloatField` and :class:"
"`~django.forms.DecimalField` now respect :setting:`DECIMAL_SEPARATOR` and :"
"setting:`THOUSAND_SEPARATOR` during validation. For example, with the "
"settings::"
msgstr ""
"当 ``USE_L10N`` 关闭时，:class:`~django.forms.FloatField` 和 :class:`~django."
"forms.DecimalField` 现在在验证过程中会尊重 :setting:`DECIMAL_SEPARATOR` 和 :"
"setting:`THOUSAND_SEPARATOR`。例如，使用以下设置："

msgid ""
"an input of ``\"1.345\"`` is now converted to ``1345`` instead of ``1.345``."
msgstr "输入值 ``\"1.345\"`` 现在被转换为 ``1345``，而不是 ``1.345``。"

msgid ""
"Subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser` are no "
"longer required to implement ``get_short_name()`` and ``get_full_name()``. "
"(The base implementations that raise ``NotImplementedError`` are removed.) "
"``django.contrib.admin`` uses these methods if implemented but doesn't "
"require them. Third-party apps that use these methods may want to adopt a "
"similar approach."
msgstr ""
":class:`~django.contrib.auth.models.AbstractBaseUser` 的子类不再需要实现 "
"``get_short_name()`` 和 ``get_full_name()``。（已删除引发 "
"``NotImplementedError`` 的基本实现。）如果实现了这些方法，``django.contrib."
"admin`` 将使用它们，但不再要求它们。使用这些方法的第三方应用程序可能希望采用"
"类似的方法。"

msgid ""
"The ``FIRST_DAY_OF_WEEK`` and ``NUMBER_GROUPING`` format settings are now "
"kept as integers in JavaScript and JSON i18n view outputs."
msgstr ""
"``FIRST_DAY_OF_WEEK`` 和 ``NUMBER_GROUPING`` 格式设置现在在 JavaScript 和 "
"JSON i18n 视图输出中保持为整数。"

msgid ""
":meth:`~django.test.TransactionTestCase.assertNumQueries` now ignores "
"connection configuration queries. Previously, if a test opened a new "
"database connection, those queries could be included as part of the "
"``assertNumQueries()`` count."
msgstr ""
":meth:`~django.test.TransactionTestCase.assertNumQueries` 现在忽略连接配置查"
"询。以前，如果一个测试打开了一个新的数据库连接，那些查询可能会被包括在 "
"``assertNumQueries()`` 计数中。"

msgid ""
"The default size of the Oracle test tablespace is increased from 20M to 50M "
"and the default autoextend size is increased from 10M to 25M."
msgstr ""
"Oracle 测试表空间的默认大小从 20M 增加到 50M，自动扩展的默认大小从 10M 增加"
"到 25M 。"

msgid ""
"To improve performance when streaming large result sets from the database, :"
"meth:`.QuerySet.iterator` now fetches 2000 rows at a time instead of 100. "
"The old behavior can be restored using the ``chunk_size`` parameter. For "
"example::"
msgstr ""
"为了提高从数据库流式传输大型结果集的性能，:meth:`.QuerySet.iterator` 现在一次"
"获取 2000 行，而不是 100 行。可以使用 ``chunk_size`` 参数恢复旧的行为。例如："

msgid ""
"Providing unknown package names in the ``packages`` argument of the :class:"
"`~django.views.i18n.JavaScriptCatalog` view now raises ``ValueError`` "
"instead of passing silently."
msgstr ""
"在 :class:`~django.views.i18n.JavaScriptCatalog` 视图的 ``packages`` 参数中提"
"供未知的包名称现在会引发 ``ValueError``，而不是默默通过。"

msgid ""
"A model instance's primary key now appears in the default ``Model."
"__str__()`` method, e.g. ``Question object (1)``."
msgstr ""
"现在，默认的 ``Model.__str__()`` 方法中会显示模型实例的主键，例如 ``Question "
"object (1)``。"

msgid ""
"``makemigrations`` now detects changes to the model field "
"``limit_choices_to`` option. Add this to your existing migrations or accept "
"an auto-generated migration for fields that use it."
msgstr ""
"现在，``makemigrations`` 会检测到模型字段的 ``limit_choices_to`` 选项的更改。"
"请将其添加到现有的迁移中，或接受为使用它的字段生成的自动生成的迁移。"

msgid ""
"Performing queries that require :ref:`automatic spatial transformations "
"<automatic-spatial-transformations>` now raises ``NotImplementedError`` on "
"MySQL instead of silently using non-transformed geometries."
msgstr ""
"在 MySQL 上执行需要 :ref:`自动空间转换 <automatic-spatial-transformations>` "
"的查询现在会引发 ``NotImplementedError``，而不再默默地使用未经转换的几何图"
"形。"

msgid ""
"``django.core.exceptions.DjangoRuntimeWarning`` is removed. It was only used "
"in the cache backend as an intermediate class in ``CacheKeyWarning``'s "
"inheritance of ``RuntimeWarning``."
msgstr ""
"移除了 ``django.core.exceptions.DjangoRuntimeWarning``。它只在缓存后端中用作 "
"``CacheKeyWarning`` 继承 ``RuntimeWarning`` 的中间类。"

msgid ""
"Renamed ``BaseExpression._output_field`` to ``output_field``. You may need "
"to update custom expressions."
msgstr ""
"将 ``BaseExpression._output_field`` 重命名为 ``output_field``。您可能需要更新"
"自定义表达式。"

msgid ""
"In older versions, forms and formsets combine their ``Media`` with widget "
"``Media`` by concatenating the two. The combining now tries to :ref:"
"`preserve the relative order of elements in each list <form-media-asset-"
"order>`. ``MediaOrderConflictWarning`` is issued if the order can't be "
"preserved."
msgstr ""
"在旧版本中，表单和表单集通过连接两者的 ``Media`` 来合并小部件的 ``Media``。现"
"在，合并尝试 :ref:`保持每个列表中元素的相对顺序 <form-media-asset-order>`。如"
"果无法保持顺序，将发出 ``MediaOrderConflictWarning`` 警告。"

msgid ""
"``django.contrib.gis.gdal.OGRException`` is removed. It's been an alias for "
"``GDALException`` since Django 1.8."
msgstr ""
"移除了 ``django.contrib.gis.gdal.OGRException``。自 Django 1.8 起，它一直是 "
"``GDALException`` 的别名。"

msgid "Support for GEOS 3.3.x is dropped."
msgstr "不再支持 GEOS 3.3.x 版本。"

msgid ""
"The way data is selected for ``GeometryField`` is changed to improve "
"performance, and in raw SQL queries, those fields must now be wrapped in "
"``connection.ops.select``. See the :ref:`Raw queries note<gis-raw-sql>` in "
"the GIS tutorial for an example."
msgstr ""
"选择 ``GeometryField`` 的数据的方式已更改以提高性能，在原始 SQL 查询中，现在"
"必须将这些字段包装在 ``connection.ops.select`` 中。请参阅 GIS 教程中的 :ref:`"
"原始查询注意事项 <gis-raw-sql>` 以获取示例。"

msgid "Features deprecated in 2.0"
msgstr "在 2.0 中被废弃的功能"

msgid ""
"``context`` argument of ``Field.from_db_value()`` and ``Expression."
"convert_value()``"
msgstr ""
"``Field.from_db_value()`` 和 ``Expression.convert_value()`` 的 ``context`` 参"
"数"

msgid ""
"The ``context`` argument of ``Field.from_db_value()`` and ``Expression."
"convert_value()`` is unused as it's always an empty dictionary. The "
"signature of both methods is now::"
msgstr ""
"``Field.from_db_value()`` 和 ``Expression.convert_value()`` 的 ``context`` 参"
"数未被使用，因为它始终是一个空字典。现在这两个方法的签名是："

msgid ""
"Support for the old signature in custom fields and expressions remains until "
"Django 3.0."
msgstr "对于自定义字段和表达式的旧签名，将继续支持直到 Django 3.0 版本。"

msgid ""
"The ``django.db.backends.postgresql_psycopg2`` module is deprecated in favor "
"of ``django.db.backends.postgresql``. It's been an alias since Django 1.9. "
"This only affects code that imports from the module directly. The "
"``DATABASES`` setting can still use ``'django.db.backends."
"postgresql_psycopg2'``, though you can simplify that by using the ``'django."
"db.backends.postgresql'`` name added in Django 1.9."
msgstr ""
"``django.db.backends.postgresql_psycopg2`` 模块已被弃用，推荐使用 ``django."
"db.backends.postgresql``。自 Django 1.9 起，它一直是一个别名。这仅影响直接从"
"模块导入的代码。尽管如此，``DATABASES`` 设置仍然可以使用 ``'django.db."
"backends.postgresql_psycopg2'``，但您可以使用 Django 1.9 中添加的 ``'django."
"db.backends.postgresql'`` 名称来简化它。"

msgid ""
"``django.shortcuts.render_to_response()`` is deprecated in favor of :func:"
"`django.shortcuts.render`. ``render()`` takes the same arguments except that "
"it also requires a ``request``."
msgstr ""
"``django.shortcuts.render_to_response()`` 已被弃用，推荐使用 :func:`django."
"shortcuts.render`。``render()`` 接受与之前相同的参数，只是现在需要传递一个 "
"``request`` 参数。"

msgid ""
"The ``DEFAULT_CONTENT_TYPE`` setting is deprecated. It doesn't interact well "
"with third-party apps and is obsolete since HTML5 has mostly superseded "
"XHTML."
msgstr ""
"``DEFAULT_CONTENT_TYPE`` 设置已被弃用。它与第三方应用程序的兼容性不佳，并且"
"自 HTML5 大多代替了 XHTML 后已过时。"

msgid ""
"``HttpRequest.xreadlines()`` is deprecated in favor of iterating over the "
"request."
msgstr "``HttpRequest.xreadlines()`` 已被弃用，建议改为迭代请求对象。"

msgid ""
"The ``field_name`` keyword argument to :meth:`.QuerySet.earliest` and :meth:"
"`.QuerySet.latest` is deprecated in favor of passing the field names as "
"arguments. Write ``.earliest('pub_date')`` instead of ``."
"earliest(field_name='pub_date')``."
msgstr ""
":meth:`.QuerySet.earliest` 和 :meth:`.QuerySet.latest` 中的 ``field_name`` 关"
"键字参数已被弃用，推荐将字段名称作为参数传递。请使用 ``."
"earliest('pub_date')`` 而不是 ``.earliest(field_name='pub_date')``。"

msgid "Features removed in 2.0"
msgstr "在 2.0 版本中移除的功能"

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 2.0."
msgstr "这些功能已经完成了废弃周期，并在 Django 2.0 中被移除。"

msgid ""
"See :ref:`deprecated-features-1.9` for details on these changes, including "
"how to remove usage of these features."
msgstr ""
"有关这些更改的详细信息，包括如何删除对这些特性的使用，请参阅 :ref:"
"`deprecated-features-1.9`。"

msgid ""
"The ``weak`` argument to ``django.dispatch.signals.Signal.disconnect()`` is "
"removed."
msgstr ""
"``django.dispatch.signals.Signal.disconnect()`` 中的 ``weak`` 参数已被移除。"

msgid ""
"``django.db.backends.base.BaseDatabaseOperations.check_aggregate_support()`` "
"is removed."
msgstr ""
"``django.db.backends.base.BaseDatabaseOperations.check_aggregate_support()`` "
"已被移除。"

msgid "The ``django.forms.extras`` package is removed."
msgstr "``django.forms.extras`` 包已被移除。"

msgid "The ``assignment_tag`` helper is removed."
msgstr "``assignment_tag`` 辅助函数已被移除。"

msgid ""
"The ``host`` argument to ``SimpleTestCase.assertsRedirects()`` is removed. "
"The compatibility layer which allows absolute URLs to be considered equal to "
"relative ones when the path is identical is also removed."
msgstr ""
"``SimpleTestCase.assertsRedirects()`` 中的 ``host`` 参数已被移除。兼容性层也"
"被移除，该层允许在路径相同时将绝对 URL 视为与相对 URL 相等。"

msgid "``Field.rel`` and ``Field.remote_field.to`` are removed."
msgstr "``Field.rel`` 和 ``Field.remote_field.to`` 已被移除。"

msgid ""
"The ``on_delete`` argument for ``ForeignKey`` and ``OneToOneField`` is now "
"required in models and migrations. Consider squashing migrations so that you "
"have fewer of them to update."
msgstr ""
"在模型和迁移中，``ForeignKey`` 和 ``OneToOneField`` 的 ``on_delete`` 参数现在"
"是必需的。考虑合并迁移以减少需要更新的迁移数量。"

msgid "``django.db.models.fields.add_lazy_relation()`` is removed."
msgstr "移除了 ``django.db.models.fields.add_lazy_relation()``。"

msgid ""
"When time zone support is enabled, database backends that don't support time "
"zones no longer convert aware datetimes to naive values in UTC anymore when "
"such values are passed as parameters to SQL queries executed outside of the "
"ORM, e.g. with ``cursor.execute()``."
msgstr ""
"启用时间区域支持时，不再在数据库后端不支持时间区域的情况下将感知的日期时间转"
"换为 UTC 中的非感知值，当这样的值作为参数传递给 ORM 之外的 SQL 查询执行时（例"
"如使用 ``cursor.execute()``）。"

msgid "``django.contrib.auth.tests.utils.skipIfCustomUser()`` is removed."
msgstr "``django.contrib.auth.tests.utils.skipIfCustomUser()`` 已被移除。"

msgid "The ``GeoManager`` and ``GeoQuerySet`` classes are removed."
msgstr "``GeoManager`` 和 ``GeoQuerySet`` 类已被移除。"

msgid "The ``django.contrib.gis.geoip`` module is removed."
msgstr "``django.contrib.gis.geoip`` 模块已被移除。"

msgid "The ``supports_recursion`` check for template loaders is removed from:"
msgstr "模板加载器的 ``supports_recursion`` 检查已从以下地方移除："

msgid "``django.template.engine.Engine.find_template()``"
msgstr "``django.template.engine.Engine.find_template()``"

msgid "``django.template.loader_tags.ExtendsNode.find_template()``"
msgstr "``django.template.loader_tags.ExtendsNode.find_template()``"

msgid "``django.template.loaders.base.Loader.supports_recursion()``"
msgstr "``django.template.loaders.base.Loader.supports_recursion()``"

msgid "``django.template.loaders.cached.Loader.supports_recursion()``"
msgstr "``django.template.loaders.cached.Loader.supports_recursion()``"

msgid ""
"The ``load_template`` and ``load_template_sources`` template loader methods "
"are removed."
msgstr "已移除 ``load_template`` 和 ``load_template_sources`` 模板加载器方法。"

msgid "The ``template_dirs`` argument for template loaders is removed:"
msgstr "模板加载器的 ``template_dirs`` 参数已被移除："

msgid "``django.template.loaders.base.Loader.get_template()``"
msgstr "``django.template.loaders.base.Loader.get_template()``"

msgid "``django.template.loaders.cached.Loader.cache_key()``"
msgstr "``django.template.loaders.cached.Loader.cache_key()``"

msgid "``django.template.loaders.cached.Loader.get_template()``"
msgstr "``django.template.loaders.cached.Loader.get_template()``"

msgid "``django.template.loaders.cached.Loader.get_template_sources()``"
msgstr "``django.template.loaders.cached.Loader.get_template_sources()``"

msgid "``django.template.loaders.filesystem.Loader.get_template_sources()``"
msgstr "``django.template.loaders.filesystem.Loader.get_template_sources()``"

msgid "``django.template.loaders.base.Loader.__call__()`` is removed."
msgstr "``django.template.loaders.base.Loader.__call__()`` 已被移除。"

msgid ""
"Support for custom error views that don't accept an ``exception`` parameter "
"is removed."
msgstr "不接受 ``exception`` 参数的自定义错误视图的支持已被移除。"

msgid ""
"The ``mime_type`` attribute of ``django.utils.feedgenerator.Atom1Feed`` and "
"``django.utils.feedgenerator.RssFeed`` is removed."
msgstr ""
"``django.utils.feedgenerator.Atom1Feed`` 和 ``django.utils.feedgenerator."
"RssFeed`` 的 ``mime_type`` 属性已被移除。"

msgid "The ``app_name`` argument to ``include()`` is removed."
msgstr "``include()`` 中的 ``app_name`` 参数已被移除。"

msgid ""
"Support for passing a 3-tuple (including ``admin.site.urls``) as the first "
"argument to ``include()`` is removed."
msgstr ""
"不再支持将一个包含 ``admin.site.urls`` 的 3 元组作为 ``include()`` 的第一个参"
"数。"

msgid ""
"Support for setting a URL instance namespace without an application "
"namespace is removed."
msgstr "不再支持在没有应用程序命名空间的情况下设置 URL 实例命名空间。"

msgid "``Field._get_val_from_obj()`` is removed."
msgstr "``Field._get_val_from_obj()`` 已被移除。"

msgid "``django.template.loaders.eggs.Loader`` is removed."
msgstr "移除了 ``django.template.loaders.eggs.Loader``。"

msgid ""
"The ``current_app`` parameter to the ``contrib.auth`` function-based views "
"is removed."
msgstr "``contrib.auth`` 函数式视图的 ``current_app`` 参数已被移除。"

msgid ""
"The ``callable_obj`` keyword argument to ``SimpleTestCase."
"assertRaisesMessage()`` is removed."
msgstr ""
"``SimpleTestCase.assertRaisesMessage()`` 中的 ``callable_obj`` 关键字参数已被"
"移除。"

msgid ""
"Support for the ``allow_tags`` attribute on ``ModelAdmin`` methods is "
"removed."
msgstr "不再支持在 ``ModelAdmin`` 方法上的 ``allow_tags`` 属性。"

msgid ""
"The ``enclosure`` keyword argument to ``SyndicationFeed.add_item()`` is "
"removed."
msgstr "``SyndicationFeed.add_item()`` 中的 ``enclosure`` 关键字参数已被移除。"

msgid ""
"The ``django.template.loader.LoaderOrigin`` and ``django.template.base."
"StringOrigin`` aliases for ``django.template.base.Origin`` are removed."
msgstr ""
"``django.template.loader.LoaderOrigin`` 和 ``django.template.base."
"StringOrigin`` 别名已被移除，对应的是 ``django.template.base.Origin``。"

msgid "See :ref:`deprecated-features-1.10` for details on these changes."
msgstr "请参阅 :ref:`deprecated-features-1.10` 以获取有关这些更改的详细信息。"

msgid "The ``makemigrations --exit`` option is removed."
msgstr "``makemigrations --exit`` 选项已被移除。"

msgid ""
"Support for direct assignment to a reverse foreign key or many-to-many "
"relation is removed."
msgstr "不再支持直接对反向外键或多对多关系进行赋值。"

msgid ""
"The ``get_srid()`` and ``set_srid()`` methods of ``django.contrib.gis.geos."
"GEOSGeometry`` are removed."
msgstr ""
"``django.contrib.gis.geos.GEOSGeometry`` 的 ``get_srid()`` 和 ``set_srid()`` "
"方法已被移除。"

msgid ""
"The ``get_x()``, ``set_x()``, ``get_y()``, ``set_y()``, ``get_z()``, and "
"``set_z()`` methods of ``django.contrib.gis.geos.Point`` are removed."
msgstr ""
"``django.contrib.gis.geos.Point`` 的 ``get_x()``, ``set_x()``, ``get_y()``, "
"``set_y()``, ``get_z()``, 和 ``set_z()`` 方法已被移除。"

msgid ""
"The ``get_coords()`` and ``set_coords()`` methods of ``django.contrib.gis."
"geos.Point`` are removed."
msgstr ""
"``django.contrib.gis.geos.Point`` 的 ``get_coords()`` 和 ``set_coords()`` 方"
"法已被移除。"

msgid ""
"The ``cascaded_union`` property of ``django.contrib.gis.geos.MultiPolygon`` "
"is removed."
msgstr ""
"``django.contrib.gis.geos.MultiPolygon`` 的 ``cascaded_union`` 属性已被移除。"

msgid "``django.utils.functional.allow_lazy()`` is removed."
msgstr "``django.utils.functional.allow_lazy()`` 已被移除。"

msgid "The ``shell --plain`` option is removed."
msgstr "``shell --plain`` 选项已被移除。"

msgid ""
"The ``django.core.urlresolvers`` module is removed in favor of its new "
"location, ``django.urls``."
msgstr ""
"``django.core.urlresolvers`` 模块已被移除，现在请使用其新位置 ``django."
"urls``。"

msgid ""
"``CommaSeparatedIntegerField`` is removed, except for support in historical "
"migrations."
msgstr "``CommaSeparatedIntegerField`` 已被移除，除了对历史迁移的支持外。"

msgid "The template ``Context.has_key()`` method is removed."
msgstr "模板 ``Context.has_key()`` 方法已被移除。"

msgid ""
"Support for the ``django.core.files.storage.Storage.accessed_time()``, "
"``created_time()``, and ``modified_time()`` methods is removed."
msgstr ""
"对于 ``django.core.files.storage.Storage.accessed_time()``, "
"``created_time()`` 和 ``modified_time()`` 方法的支持已被移除。"

msgid ""
"Support for query lookups using the model name when ``Meta."
"default_related_name`` is set is removed."
msgstr ""
"当设置了 ``Meta.default_related_name`` 时，不再支持使用模型名称进行查询查找。"

msgid "The MySQL ``__search`` lookup is removed."
msgstr "MySQL 中的 ``__search`` 查找已被移除。"

msgid ""
"The shim for supporting custom related manager classes without a "
"``_apply_rel_filters()`` method is removed."
msgstr ""
"移除了支持自定义相关管理器类但没有 ``_apply_rel_filters()`` 方法的 shim。"

msgid ""
"Using ``User.is_authenticated()`` and ``User.is_anonymous()`` as methods "
"rather than properties is no longer supported."
msgstr ""
"不再支持将 ``User.is_authenticated()`` 和 ``User.is_anonymous()`` 作为方法使"
"用，而不是属性。"

msgid "The ``Model._meta.virtual_fields`` attribute is removed."
msgstr "``Model._meta.virtual_fields`` 属性已被移除。"

msgid ""
"The keyword arguments ``virtual_only`` in ``Field.contribute_to_class()`` "
"and ``virtual`` in ``Model._meta.add_field()`` are removed."
msgstr ""
"``Field.contribute_to_class()`` 中的关键字参数 ``virtual_only`` 和 ``Model."
"_meta.add_field()`` 中的 ``virtual`` 已被移除。"

msgid "The ``javascript_catalog()`` and ``json_catalog()`` views are removed."
msgstr "``javascript_catalog()`` 和 ``json_catalog()`` 视图已被移除。"

msgid "``django.contrib.gis.utils.precision_wkt()`` is removed."
msgstr "``django.contrib.gis.utils.precision_wkt()`` 已被移除。"

msgid ""
"In multi-table inheritance, implicit promotion of a ``OneToOneField`` to a "
"``parent_link`` is removed."
msgstr "在多表继承中，不再隐式将 ``OneToOneField`` 提升为 ``parent_link``。"

msgid "Support for ``Widget._format_value()`` is removed."
msgstr "不再支持 ``Widget._format_value()``。"

msgid ""
"``FileField`` methods ``get_directory_name()`` and ``get_filename()`` are "
"removed."
msgstr ""
"``FileField`` 的方法 ``get_directory_name()`` 和 ``get_filename()`` 已被移"
"除。"

msgid ""
"The ``mark_for_escaping()`` function and the classes it uses: "
"``EscapeData``, ``EscapeBytes``, ``EscapeText``, ``EscapeString``, and "
"``EscapeUnicode`` are removed."
msgstr ""
"``mark_for_escaping()`` 函数以及它使用的类：``EscapeData``、``EscapeBytes``、"
"``EscapeText``、``EscapeString`` 和 ``EscapeUnicode`` 都已被移除。"

msgid ""
"The ``escape`` filter now uses ``django.utils.html.conditional_escape()``."
msgstr "``escape`` 过滤器现在使用 ``django.utils.html.conditional_escape()``。"

msgid "``Manager.use_for_related_fields`` is removed."
msgstr "``Manager.use_for_related_fields`` 已被移除。"

msgid ""
"Model ``Manager`` inheritance follows MRO inheritance rules. The requirement "
"to use ``Meta.manager_inheritance_from_future`` to opt-in to the behavior is "
"removed."
msgstr ""
"模型的 ``Manager`` 继承遵循 MRO 继承规则。不再需要使用 ``Meta."
"manager_inheritance_from_future`` 来选择使用这种行为。"

msgid ""
"Support for old-style middleware using ``settings.MIDDLEWARE_CLASSES`` is "
"removed."
msgstr "不再支持使用 ``settings.MIDDLEWARE_CLASSES`` 的老式中间件。"

msgid "Django 2.0.1 release notes"
msgstr "Django 2.0.1 版本发行说明"

msgid "Django 2.0.1 fixes several bugs in 2.0."
msgstr "Django 2.0.1 修复了 2.0 版本中的一些错误。"

msgid ""
"Reallowed filtering a queryset with ``GeometryField=None`` (:ticket:`28896`)."
msgstr ""
"重新允许使用 ``GeometryField=None`` 对查询集进行筛选（:ticket:`28896`）。"

msgid ""
"Corrected admin check to allow a ``OneToOneField`` in ``ModelAdmin."
"autocomplete_fields`` (:ticket:`28898`)."
msgstr ""
"已经纠正了管理员检查，允许在 ``ModelAdmin.autocomplete_fields`` 中使用 "
"``OneToOneField`` （:ticket:`28898`）。"

msgid ""
"Fixed a regression on SQLite where ``DecimalField`` returned a result with "
"trailing zeros in the fractional part truncated (:ticket:`28915`)."
msgstr ""
"已修复 SQLite 上的回归问题，其中 ``DecimalField`` 返回的结果在小数部分截断时"
"具有尾随零（:ticket:`28915`）。"

msgid "Fixed crash in the ``testserver`` command startup (:ticket:`28941`)."
msgstr "已修复 ``testserver`` 命令启动时的崩溃问题（:ticket:`28941`）。"

msgid ""
"Fixed crash when coercing a translatable URL pattern to ``str`` (:ticket:"
"`28947`)."
msgstr ""
"已修复将可翻译的 URL 模式强制转换为 ``str`` 时的崩溃问题（:ticket:`28947`）。"

msgid ""
"Fixed crash on SQLite when renaming a field in a model referenced by a "
"``ManyToManyField`` (:ticket:`28884`)."
msgstr ""
"已修复在 SQLite 上重命名被 ``ManyToManyField`` 引用的模型中的字段时的崩溃问题"
"（:ticket:`28884`）。"

msgid ""
"Fixed a crash when chaining ``values()`` or ``values_list()`` after "
"``QuerySet.select_for_update(of=(...))`` (:ticket:`28944`)."
msgstr ""
"已修复在 ``QuerySet.select_for_update(of=(...))`` 之后链式调用 ``values()`` "
"或 ``values_list()`` 时的崩溃问题（:ticket:`28944`）。"

msgid ""
"Fixed admin changelist crash when using a query expression in the page's "
"ordering (:ticket:`28958`)."
msgstr ""
"已修复在页面排序中使用查询表达式时管理员 changelist 的崩溃问题（:ticket:"
"`28958`）。"

msgid "Django 2.0.10 release notes"
msgstr "Django 2.0.10 版本发行说明"

msgid "Django 2.0.10 fixes a security issue and several bugs in 2.0.9."
msgstr "Django 2.0.10 修复了 2.0.9 版本中的一个安全问题和一些错误。"

msgid ""
"Prevented repetitive calls to ``geos_version_tuple()`` in the ``WKBWriter`` "
"class in an attempt to fix a random crash involving ``LooseVersion`` since "
"Django 2.0.6 (:ticket:`29959`)."
msgstr ""
"尝试修复与 ``LooseVersion`` 相关的随机崩溃问题，防止在 ``WKBWriter`` 类中反复"
"调用 ``geos_version_tuple()`` （:ticket:`29959`）。"

msgid ""
"Fixed a schema corruption issue on SQLite 3.26+. You might have to drop and "
"rebuild your SQLite database if you applied a migration while using an older "
"version of Django with SQLite 3.26 or later (:ticket:`29182`)."
msgstr ""
"已修复在 SQLite 3.26+ 上的模式损坏问题。如果在使用旧版本的 Django 与 SQLite "
"3.26 或更高版本时应用了迁移，可能需要删除并重建您的 SQLite 数据库（:ticket:"
"`29182`）。"

msgid ""
"Prevented SQLite schema alterations while foreign key checks are enabled to "
"avoid the possibility of schema corruption (:ticket:`30023`)."
msgstr ""
"防止在启用外键检查时进行 SQLite 模式更改，以避免可能导致模式损坏的情况发生（:"
"ticket:`30023`）。"

msgid "Django 2.0.11 release notes"
msgstr "Django 2.0.11 版本发行说明"

msgid "Django 2.0.11 fixes a security issue in 2.0.10."
msgstr "Django 2.0.11 修复了 2.0.10 版本中的一个安全问题。"

msgid "Django 2.0.12 release notes"
msgstr "Django 2.0.12 版本发行说明"

msgid "Django 2.0.12 fixes a packaging error in 2.0.11."
msgstr "Django 2.0.12 修复了 2.0.11 版本中的打包错误。"

msgid "Corrected packaging error from 2.0.11 (:ticket:`30175`)."
msgstr "已纠正了来自 2.0.11 的打包错误（:ticket:`30175`）。"

msgid "Django 2.0.13 release notes"
msgstr "Django 2.0.13 版本发行说明"

msgid "*February 12, 2019*"
msgstr "*2019 年 2 月 12 日*"

msgid "Django 2.0.13 fixes a regression in 2.0.12/2.0.11."
msgstr "Django 2.0.13 修复了 2.0.12 / 2.0.11 版本中的一个回归问题。"

msgid ""
"Fixed crash in ``django.utils.numberformat.format_number()`` when the number "
"has over 200 digits (:ticket:`30177`)."
msgstr ""
"已修复在数字超过 200 位时导致 ``django.utils.numberformat.format_number()`` "
"崩溃的问题（:ticket:`30177`）。"

msgid "Django 2.0.2 release notes"
msgstr "Django 2.0.2 版本发行说明"

msgid "Django 2.0.2 fixes a security issue and several bugs in 2.0.1."
msgstr "Django 2.0.2 修复了 2.0.1 版本中的一个安全问题和一些错误。"

msgid ""
"Fixed hidden content at the bottom of the \"The install worked successfully!"
"\" page for some languages (:ticket:`28885`)."
msgstr ""
"已修复某些语言版本的 \"安装成功！\" 页面底部的隐藏内容问题（:ticket:"
"`28885`）。"

msgid ""
"Fixed regression in the use of ``QuerySet.values_list(..., flat=True)`` "
"followed by ``annotate()`` (:ticket:`29067`)."
msgstr ""
"已修复在使用 ``QuerySet.values_list(..., flat=True)`` 后跟 ``annotate()`` 时"
"的回归问题（:ticket:`29067`）。"

msgid ""
"Fixed a regression where a queryset that annotates with geometry objects "
"crashes (:ticket:`29054`)."
msgstr ""
"已修复一个回归问题，其中对包含几何对象的查询集进行注释会导致崩溃（:ticket:"
"`29054`）。"

msgid ""
"Fixed a regression where ``makemigrations`` crashes if a migrations "
"directory doesn't have an ``__init__.py`` file (:ticket:`29091`)."
msgstr ""
"已修复一个回归问题，其中如果迁移目录没有 ``__init__.py`` 文件，"
"``makemigrations`` 会崩溃（:ticket:`29091`）。"

msgid "Django 2.0.3 release notes"
msgstr "Django 2.0.3 版本发行说明"

msgid ""
"Django 2.0.3 fixes two security issues and several bugs in 2.0.2. Also, the "
"latest string translations from Transifex are incorporated."
msgstr ""
"Django 2.0.3 修复了 2.0.2 版本中的两个安全问题和一些错误。此外，还整合了来自 "
"Transifex 的最新字符串翻译。"

msgid ""
"Fixed a regression that caused sliced ``QuerySet.distinct().order_by()`` "
"followed by ``count()`` to crash (:ticket:`29108`)."
msgstr ""
"已修复一个回归问题，该问题导致切片的 ``QuerySet.distinct().order_by()`` 后跟 "
"``count()`` 会导致崩溃（:ticket:`29108`）。"

msgid ""
"Prioritized the datetime and time input formats without ``%f`` for the Thai "
"locale to fix the admin time picker widget displaying \"undefined\" (:ticket:"
"`29109`)."
msgstr ""
"优先考虑了在泰国区域设置下没有 ``%f`` 的日期时间和时间输入格式，以修复管理员"
"时间选择器小部件显示 \"undefined\" 的问题（:ticket:`29109`）。"

msgid "Fixed crash with ``QuerySet.order_by(Exists(...))`` (:ticket:`29118`)."
msgstr ""
"已修复使用 ``QuerySet.order_by(Exists(...))`` 时的崩溃问题（:ticket:"
"`29118`）。"

msgid ""
"Made ``Q.deconstruct()`` deterministic with multiple keyword arguments (:"
"ticket:`29125`). You may need to modify ``Q``'s in existing migrations, or "
"accept an autogenerated migration."
msgstr ""
"使 ``Q.deconstruct()`` 在多个关键字参数的情况下具有确定性（:ticket:"
"`29125`）。您可能需要修改现有迁移中的 ``Q``，或者接受一个自动生成的迁移。"

msgid ""
"Fixed a regression where a ``When()`` expression with a list argument "
"crashes (:ticket:`29166`)."
msgstr ""
"已修复一个回归问题，其中带有列表参数的 ``When()`` 表达式会导致崩溃（:ticket:"
"`29166`）。"

msgid ""
"Fixed crash when using a ``Window()`` expression in a subquery (:ticket:"
"`29172`)."
msgstr ""
"已修复在子查询中使用 ``Window()`` 表达式时的崩溃问题（:ticket:`29172`）。"

msgid ""
"Fixed ``AbstractBaseUser.normalize_username()`` crash if the ``username`` "
"argument isn't a string (:ticket:`29176`)."
msgstr ""
"已修复 ``AbstractBaseUser.normalize_username()`` 在 ``username`` 参数不是字符"
"串时的崩溃问题（:ticket:`29176`）。"

msgid "Django 2.0.4 release notes"
msgstr "Django 2.0.4 版本发行说明"

msgid "Django 2.0.4 fixes several bugs in 2.0.3."
msgstr "Django 2.0.4 修复了 2.0.3 版本中的一些错误。"

msgid ""
"Fixed a crash when filtering with an ``Exists()`` annotation of a queryset "
"containing a single field (:ticket:`29195`)."
msgstr ""
"已修复在使用包含单个字段的查询集的 ``Exists()`` 注释进行过滤时的崩溃问题（:"
"ticket:`29195`）。"

msgid ""
"Fixed admin autocomplete widget's translations for ``zh-hans`` and ``zh-"
"hant`` languages (:ticket:`29213`)."
msgstr ""
"已修复管理员自动完成小部件在 ``zh-hans`` 和 ``zh-hant`` 语言下的翻译问题（:"
"ticket:`29213`）。"

msgid ""
"Corrected admin's autocomplete widget to add a space after custom classes (:"
"ticket:`29221`)."
msgstr ""
"已纠正管理员的自动完成小部件，以在自定义类之后添加空格（:ticket:`29221`）。"

msgid ""
"Fixed ``PasswordResetConfirmView`` crash when using a user model with a "
"``UUIDField`` primary key and the reset URL contains an encoded primary key "
"value that decodes to an invalid UUID (:ticket:`29206`)."
msgstr ""
"已修复在使用具有 ``UUIDField`` 主键的用户模型且重置 URL 包含解码为无效 UUID "
"的编码主键值时，``PasswordResetConfirmView`` 的崩溃问题（:ticket:`29206`）。"

msgid ""
"Fixed a regression in Django 2.0 where ``OpenLayersWidget`` deserialization "
"ignored the widget map's SRID and assumed 4326 (WGS84) (:ticket:`29116`)."
msgstr ""
"已修复 Django 2.0 中的回归问题，其中 ``OpenLayersWidget`` 反序列化忽略了小部"
"件地图的 SRID 并假设为 4326（WGS84）（:ticket:`29116`）。"

msgid "Django 2.0.5 release notes"
msgstr "Django 2.0.5 版本发行说明"

msgid "Django 2.0.5 fixes several bugs in 2.0.4."
msgstr "Django 2.0.5 修复了 2.0.4 版本中的一些错误。"

msgid ""
"Corrected the import paths that ``inspectdb`` generates for ``django.contrib."
"postgres`` fields (:ticket:`29307`)."
msgstr ""
"已纠正 ``inspectdb`` 为 ``django.contrib.postgres`` 字段生成的导入路径（:"
"ticket:`29307`）。"

msgid ""
"Fixed a regression in Django 2.0.4 where ``QuerySet.values()`` or "
"``values_list()`` after combining an annotated and unannotated queryset with "
"``union()``, ``difference()``, or ``intersection()`` crashed due to "
"mismatching columns (:ticket:`29286`)."
msgstr ""
"已修复 Django 2.0.4 中的回归问题，其中在使用 ``union()``, ``difference()`` "
"或 ``intersection()`` 合并已注释和未注释的查询集后，调用 ``QuerySet."
"values()`` 或 ``values_list()`` 会因列不匹配而崩溃（:ticket:`29286`）。"

msgid "Django 2.0.6 release notes"
msgstr "Django 2.0.6 版本发行说明"

msgid "*June 1, 2018*"
msgstr "*2018 年 6 月 1 日*"

msgid "Django 2.0.6 fixes several bugs in 2.0.5."
msgstr "Django 2.0.6 修复了 2.0.5 版本中的一些错误。"

msgid ""
"Fixed a regression that broke custom template filters that use decorators (:"
"ticket:`29400`)."
msgstr ""
"已修复导致破坏使用装饰器的自定义模板过滤器的回归问题（:ticket:`29400`）。"

msgid ""
"Fixed detection of custom URL converters in included patterns (:ticket:"
"`29415`)."
msgstr "已修复对包含模式中自定义 URL 转换器的检测问题（:ticket:`29415`）。"

msgid ""
"Fixed a regression that added an unnecessary subquery to the ``GROUP BY`` "
"clause on MySQL when using a ``RawSQL`` annotation (:ticket:`29416`)."
msgstr ""
"已修复在使用 ``RawSQL`` 注释时，在 MySQL 上向 ``GROUP BY`` 子句添加不必要的子"
"查询的回归问题（:ticket:`29416`）。"

msgid "Django 2.0.7 release notes"
msgstr "Django 2.0.7 版本发行说明"

msgid "Django 2.0.7 fixes several bugs in 2.0.6."
msgstr "Django 2.0.7 修复了 2.0.6 版本中的一些错误。"

msgid ""
"Fixed admin changelist crash when using a query expression without ``asc()`` "
"or ``desc()`` in the page's ordering (:ticket:`29428`)."
msgstr ""
"已修复管理员 changelist 在页面排序中使用没有 ``asc()`` 或 ``desc()`` 的查询表"
"达式时的崩溃问题（:ticket:`29428`）。"

msgid ""
"Fixed admin check crash when using a query expression in ``ModelAdmin."
"ordering`` (:ticket:`29428`)."
msgstr ""
"已修复在 ``ModelAdmin.ordering`` 中使用查询表达式时，导致管理员检查崩溃的问题"
"（:ticket:`29428`）。"

msgid ""
"Fixed ``__regex`` and ``__iregex`` lookups with MySQL 8 (:ticket:`29451`)."
msgstr ""
"已修复与 MySQL 8 中的 ``__regex`` 和 ``__iregex`` 查找相关的问题（:ticket:"
"`29451`）。"

msgid ""
"Fixed migrations crash with namespace packages on Python 3.7 (:ticket:"
"`28814`)."
msgstr ""
"已修复在 Python 3.7 上使用命名空间包时导致迁移崩溃的问题（:ticket:`28814`）。"

msgid "Django 2.0.8 release notes"
msgstr "Django 2.0.8 版本发行说明"

msgid "Django 2.0.8 fixes a security issue and several bugs in 2.0.7."
msgstr "Django 2.0.8 修复了 2.0.7 版本中的一个安全问题和一些错误。"

msgid ""
"Fixed a regression in Django 2.0.7 that broke the ``regex`` lookup on "
"MariaDB (even though MariaDB isn't officially supported) (:ticket:`29544`)."
msgstr ""
"已修复 Django 2.0.7 中的回归问题，该问题破坏了对 MariaDB 上的 ``regex`` 查找"
"（尽管 MariaDB 并未得到官方支持）（:ticket:`29544`）。"

msgid ""
"Fixed a regression where ``django.template.Template`` crashed if the "
"``template_string`` argument is lazy (:ticket:`29617`)."
msgstr ""
"已修复回归问题，其中如果 ``template_string`` 参数是懒惰的，则 ``django."
"template.Template`` 会崩溃（:ticket:`29617`）。"

msgid "Django 2.0.9 release notes"
msgstr "Django 2.0.9 版本发行说明"

msgid "Django 2.0.9 fixes a data loss bug in 2.0.8."
msgstr "Django 2.0.9 修复了 2.0.8 版本中的一个数据丢失错误。"

msgid "Django 2.1 release notes"
msgstr "Django 2.1 版本发行说明"

msgid "Welcome to Django 2.1!"
msgstr "欢迎使用 Django 2.1 ！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-2.1>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-2.1>` "
"you'll want to be aware of when upgrading from Django 2.0 or earlier. We've :"
"ref:`dropped some features<removed-features-2.1>` that have reached the end "
"of their deprecation cycle, and we've :ref:`begun the deprecation process "
"for some features <deprecated-features-2.1>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-2.1>`，以及从 Django 2.0 或更早版"
"本升级时需要注意的 :ref:`不兼容变更 <backwards-incompatible-2.1>`。我们已经 :"
"ref:`删除了一些功能 <removed-features-2.1>`，这些功能已经到达了他们的弃用周期"
"的末端，并且我们已经 :ref:`开始了一些功能的弃用过程 <deprecated-"
"features-2.1>`。"

msgid ""
"Django 2.1 supports Python 3.5, 3.6, and 3.7. Django 2.0 is the last version "
"to support Python 3.4.  We **highly recommend** and only officially support "
"the latest release of each series."
msgstr ""
"Django 2.1 支持 Python 3.5、3.6 和 3.7。Django 2.0 是最后一个支持 Python 3.4 "
"的版本。我们 **强烈推荐** 并且只官方支持每个系列的最新发布版本。"

msgid "What's new in Django 2.1"
msgstr "Django 2.1 的新特性是什么？"

msgid "Model \"view\" permission"
msgstr "模型的“查看”权限"

msgid ""
"A \"view\" permission is added to the model :attr:`Meta.default_permissions "
"<django.db.models.Options.default_permissions>`. The new permissions will be "
"created automatically when running :djadmin:`migrate`."
msgstr ""
"模型的 :attr:`Meta.default_permissions <django.db.models.Options."
"default_permissions>` 属性中添加了 \"view\" 权限。这些新权限将在运行 :"
"djadmin:`migrate` 时自动创建。"

msgid ""
"This allows giving users read-only access to models in the admin. :meth:`."
"ModelAdmin.has_view_permission` is new. The implementation is backwards "
"compatible in that there isn't a need to assign the \"view\" permission to "
"allow users who have the \"change\" permission to edit objects."
msgstr ""
"这允许将用户赋予对管理员中的模型的只读访问权限。新增了 :meth:`.ModelAdmin."
"has_view_permission`。该实现是向后兼容的，不需要分配 \"view\" 权限以允许拥有 "
"\"change\" 权限的用户编辑对象。"

msgid ""
"There are a couple of :ref:`backwards incompatible considerations "
"<view_permission_backwards_incompatible>`."
msgstr "有一些 :ref:`不兼容考虑 <view_permission_backwards_incompatible>`。"

msgid ""
":attr:`.ModelAdmin.search_fields` now accepts any lookup such as "
"``field__exact``."
msgstr ""
"现在，:attr:`.ModelAdmin.search_fields` 接受任何查找，如 ``field__exact``。"

msgid "jQuery is upgraded from version 2.2.3 to 3.3.1."
msgstr "jQuery 的版本已从 2.2.3 升级到 3.3.1 。"

msgid ""
"The new :meth:`.ModelAdmin.delete_queryset` method allows customizing the "
"deletion process of the \"delete selected objects\" action."
msgstr ""
"新的 :meth:`.ModelAdmin.delete_queryset` 方法允许自定义 \"删除选定对象\" 操作"
"的删除过程。"

msgid ""
"You can now :ref:`override the default admin site <overriding-default-admin-"
"site>`."
msgstr "现在你可以 :ref:`覆盖默认的管理站点 <overriding-default-admin-site>`。"

msgid ""
"The new :attr:`.ModelAdmin.sortable_by` attribute and :meth:`.ModelAdmin."
"get_sortable_by` method allow limiting the columns that can be sorted in the "
"change list page."
msgstr ""
"新的 :attr:`.ModelAdmin.sortable_by` 属性和 :meth:`.ModelAdmin."
"get_sortable_by` 方法允许限制可以在更改列表页面中排序的列。"

msgid ""
"The ``admin_order_field`` attribute for elements in :attr:`.ModelAdmin."
"list_display` may now be a query expression."
msgstr ""
"在 :attr:`.ModelAdmin.list_display` 中的元素的 ``admin_order_field`` 属性现在"
"可以是一个查询表达式。"

msgid ""
"The new :meth:`.ModelAdmin.get_deleted_objects()` method allows customizing "
"the deletion process of the delete view and the \"delete selected\" action."
msgstr ""
"新的 :meth:`.ModelAdmin.get_deleted_objects()` 方法允许自定义删除视图和 \"删"
"除选定\" 操作的删除过程。"

msgid ""
"The ``actions.html``, ``change_list_results.html``, ``date_hierarchy.html``, "
"``pagination.html``, ``prepopulated_fields_js.html``, ``search_form.html``, "
"and ``submit_line.html`` templates can now be :ref:`overridden per app or "
"per model <admin-templates-overridden-per-app-or-model>` (besides overridden "
"globally)."
msgstr ""
"``actions.html``、``change_list_results.html``、``date_hierarchy.html``、"
"``pagination.html``、``prepopulated_fields_js.html``、``search_form.html`` "
"和 ``submit_line.html`` 模板现在可以在每个应用程序或每个模型的基础上 :ref:`被"
"覆盖 <admin-templates-overridden-per-app-or-model>` （除了全局覆盖）。"

msgid ""
"The admin change list and change form object tools can now be :ref:"
"`overridden per app, per model, or globally <admin-templates-overridden-per-"
"app-or-model>` with ``change_list_object_tools.html`` and "
"``change_form_object_tools.html`` templates."
msgstr ""
"管理员更改列表和更改表单对象工具现在可以在每个应用程序、每个模型或全局 :ref:`"
"被覆盖 <admin-templates-overridden-per-app-or-model>`，使用 "
"``change_list_object_tools.html`` 和 ``change_form_object_tools.html`` 模板。"

msgid ""
":meth:`.InlineModelAdmin.has_add_permission` is now passed the parent object "
"as the second positional argument, ``obj``."
msgstr ""
":meth:`.InlineModelAdmin.has_add_permission` 现在将父对象作为第二个位置参数传"
"递，``obj``。"

msgid ""
"Admin actions may now :ref:`specify permissions <admin-action-permissions>` "
"to limit their availability to certain users."
msgstr ""
"管理员操作现在可以 :ref:`指定权限 <admin-action-permissions>` 以限制它们对某"
"些用户的可用性。"

msgid ""
":djadmin:`createsuperuser` now gives a prompt to allow bypassing the :"
"setting:`AUTH_PASSWORD_VALIDATORS` checks."
msgstr ""
":djadmin:`createsuperuser` 现在会提示是否允许绕过 :setting:"
"`AUTH_PASSWORD_VALIDATORS` 检查。"

msgid ""
"The new :meth:`.GEOSGeometry.buffer_with_style` method is a version of :meth:"
"`~.GEOSGeometry.buffer` that allows customizing the style of the buffer."
msgstr ""
"新的 :meth:`.GEOSGeometry.buffer_with_style` 方法是 :meth:`~.GEOSGeometry."
"buffer` 的一个版本，允许自定义缓冲区的样式。"

msgid ""
":class:`~django.contrib.gis.forms.widgets.OpenLayersWidget` is now based on "
"OpenLayers 4.6.5 (previously 3.20.1)."
msgstr ""
":class:`~django.contrib.gis.forms.widgets.OpenLayersWidget` 现在基于 "
"OpenLayers 4.6.5（之前是 3.20.1）。"

msgid ""
"Added the :setting:`SESSION_COOKIE_SAMESITE` setting to set the ``SameSite`` "
"cookie flag on session cookies."
msgstr ""
"添加了 :setting:`SESSION_COOKIE_SAMESITE` 设置，用于在会话 cookie 上设置 "
"``SameSite`` cookie 标志。"

msgid ""
"The :ref:`local-memory cache backend <local-memory-caching>` now uses a "
"least-recently-used (LRU) culling strategy rather than a pseudo-random one."
msgstr ""
":ref:`本地内存缓存后端 <local-memory-caching>` 现在使用最近最少使用（LRU）的"
"淘汰策略，而不是伪随机策略。"

msgid ""
"The new :meth:`~django.core.cache.cache.touch` method of the :ref:`low-level "
"cache API <low-level-cache-api>` updates the timeout of cache keys."
msgstr ""
":ref:`低级缓存 API <low-level-cache-api>` 的新方法 :meth:`~django.core.cache."
"cache.touch` 可以更新缓存键的超时时间。"

msgid ""
"Added the :setting:`CSRF_COOKIE_SAMESITE` setting to set the ``SameSite`` "
"cookie flag on CSRF cookies."
msgstr ""
"添加了 :setting:`CSRF_COOKIE_SAMESITE` 设置，用于在 CSRF cookie 上设置 "
"``SameSite`` cookie 标志。"

msgid ""
"The widget for ``ImageField`` now renders with the HTML attribute "
"``accept=\"image/*\"``."
msgstr ""
"``ImageField`` 的小部件现在以带有 HTML 属性 ``accept=\"image/*\"`` 渲染。"

msgid ""
"Added the :meth:`~django.utils.translation.get_supported_language_variant` "
"function."
msgstr ""
"添加了 :meth:`~django.utils.translation.get_supported_language_variant` 函"
"数。"

msgid ""
"Untranslated strings for territorial language variants now use the "
"translations of the generic language. For example, untranslated ``pt_BR`` "
"strings use ``pt`` translations."
msgstr ""
"领土语言变体的未翻译字符串现在使用通用语言的翻译。例如，未翻译的 ``pt_BR`` 字"
"符串使用 ``pt`` 的翻译。"

msgid ""
"The new :option:`inspectdb --include-views` option allows creating models "
"for database views."
msgstr ""
"新的 :option:`inspectdb --include-views` 选项允许为数据库视图创建模型。"

msgid ""
"The :class:`~django.core.management.BaseCommand` class now uses a custom "
"help formatter so that the standard options like ``--verbosity`` or ``--"
"settings`` appear last in the help output, giving a more prominent position "
"to subclassed command's options."
msgstr ""
":class:`~django.core.management.BaseCommand` 类现在使用自定义的帮助格式化程"
"序，以使标准选项如 ``--verbosity`` 或 ``--settings`` 出现在帮助输出的最后，从"
"而为子类命令的选项提供更突出的位置。"

msgid "Added support for serialization of ``functools.partialmethod`` objects."
msgstr "添加了对 ``functools.partialmethod`` 对象的序列化支持。"

msgid ""
"To support frozen environments, migrations may be loaded from ``.pyc`` files."
msgstr "为了支持冻结的环境，迁移可以从 ``.pyc`` 文件中加载。"

msgid "Models can now use ``__init_subclass__()`` from :pep:`487`."
msgstr "模型现在可以使用来自 :pep:`487` 的 ``__init_subclass__()`` 方法。"

msgid ""
"A ``BinaryField`` may now be set to ``editable=True`` if you wish to include "
"it in model forms."
msgstr ""
"如果希望将它包含在模型表单中，可以将 ``BinaryField`` 设置为 "
"``editable=True``。"

msgid ""
"A number of new text database functions are added: :class:`~django.db.models."
"functions.Chr`, :class:`~django.db.models.functions.Left`, :class:`~django."
"db.models.functions.LPad`, :class:`~django.db.models.functions.LTrim`, :"
"class:`~django.db.models.functions.Ord`, :class:`~django.db.models.functions."
"Repeat`, :class:`~django.db.models.functions.Replace`, :class:`~django.db."
"models.functions.Right`, :class:`~django.db.models.functions.RPad`, :class:"
"`~django.db.models.functions.RTrim`, and :class:`~django.db.models.functions."
"Trim`."
msgstr ""
"新增了一些新的文本数据库函数：:class:`~django.db.models.functions.Chr`、:"
"class:`~django.db.models.functions.Left`、:class:`~django.db.models."
"functions.LPad`、:class:`~django.db.models.functions.LTrim`、:class:`~django."
"db.models.functions.Ord`、:class:`~django.db.models.functions.Repeat`、:"
"class:`~django.db.models.functions.Replace`、:class:`~django.db.models."
"functions.Right`、:class:`~django.db.models.functions.RPad`、:class:`~django."
"db.models.functions.RTrim` 和 :class:`~django.db.models.functions.Trim`。"

msgid ""
"The new :class:`~django.db.models.functions.TruncWeek` function truncates :"
"class:`~django.db.models.DateField` and :class:`~django.db.models."
"DateTimeField` to the Monday of a week."
msgstr ""
"新的 :class:`~django.db.models.functions.TruncWeek` 函数将 :class:`~django."
"db.models.DateField` 和 :class:`~django.db.models.DateTimeField` 截断到一周的"
"星期一。"

msgid "Query expressions can now be negated using a minus sign."
msgstr "现在可以使用减号对查询表达式进行否定。"

msgid ""
":meth:`.QuerySet.order_by` and :meth:`distinct(*fields) <.QuerySet."
"distinct>` now support using field transforms."
msgstr ""
":meth:`.QuerySet.order_by` 和 :meth:`distinct(*fields) <.QuerySet.distinct>` "
"现在支持使用字段变换。"

msgid ""
":class:`~django.db.models.BooleanField` can now be ``null=True``. This is "
"encouraged instead of ``NullBooleanField``, which will likely be deprecated "
"in the future."
msgstr ""
":class:`~django.db.models.BooleanField` 现在可以设置为 ``null=True``。这是鼓"
"励的，而不是使用 ``NullBooleanField``，后者可能会在将来被弃用。"

msgid ""
"The new :meth:`.QuerySet.explain` method displays the database's execution "
"plan of a queryset's query."
msgstr "新的 :meth:`.QuerySet.explain` 方法显示查询集查询的数据库执行计划。"

msgid ":meth:`.QuerySet.raw` now supports :meth:`~.QuerySet.prefetch_related`."
msgstr ":meth:`.QuerySet.raw` 现在支持 :meth:`~.QuerySet.prefetch_related`。"

msgid "Added :meth:`.HttpRequest.get_full_path_info`."
msgstr "添加了 :meth:`.HttpRequest.get_full_path_info`。"

msgid ""
"Added the ``samesite`` argument to :meth:`.HttpResponse.set_cookie` to allow "
"setting the ``SameSite`` cookie flag."
msgstr ""
"添加了 ``samesite`` 参数到 :meth:`.HttpResponse.set_cookie` 以允许设置 "
"``SameSite`` cookie 标志。"

msgid ""
"The new ``as_attachment`` argument for :class:`~django.http.FileResponse` "
"sets the ``Content-Disposition`` header to make the browser ask if the user "
"wants to download the file. ``FileResponse`` also tries to set the ``Content-"
"Type`` and ``Content-Length`` headers where appropriate."
msgstr ""
":class:`~django.http.FileResponse` 的新 ``as_attachment`` 参数设置了 "
"``Content-Disposition`` 头，使浏览器询问用户是否要下载文件。``FileResponse`` "
"还会在适当的情况下尝试设置 ``Content-Type`` 和 ``Content-Length`` 头。"

msgid ""
"The new :tfilter:`json_script` filter safely outputs a Python object as "
"JSON, wrapped in a ``<script>`` tag, ready for use with JavaScript."
msgstr ""
"新的 :tfilter:`json_script` 过滤器安全地将 Python 对象输出为 JSON，包装在 "
"``<script>`` 标签中，可供 JavaScript 使用。"

msgid ""
"Added test :class:`~django.test.Client` support for 307 and 308 redirects."
msgstr ""
"添加了对 307 和 308 重定向的测试支持，测试 :class:`~django.test.Client`。"

msgid ""
"The test :class:`~django.test.Client` now serializes a request data "
"dictionary as JSON if ``content_type='application/json'``. You can customize "
"the JSON encoder with test client's ``json_encoder`` parameter."
msgstr ""
"测试 :class:`~django.test.Client` 现在如果 ``content_type='application/"
"json'``，会将请求数据字典序列化为 JSON。你可以通过测试客户端的 "
"``json_encoder`` 参数自定义 JSON 编码器。"

msgid ""
"The new :meth:`.SimpleTestCase.assertWarnsMessage` method is a simpler "
"version of :meth:`~unittest.TestCase.assertWarnsRegex`."
msgstr ""
"新的 :meth:`.SimpleTestCase.assertWarnsMessage` 方法是 :meth:`~unittest."
"TestCase.assertWarnsRegex` 的简化版本。"

msgid "Backwards incompatible changes in 2.1"
msgstr "2.1 版本中的不向后兼容变更"

msgid ""
"To adhere to :pep:`249`, exceptions where a database doesn't support a "
"feature are changed from :exc:`NotImplementedError` to :exc:`django.db."
"NotSupportedError`."
msgstr ""
"为了遵循 :pep:`249`，在数据库不支持某项功能时，异常已从 :exc:"
"`NotImplementedError` 更改为 :exc:`django.db.NotSupportedError`。"

msgid ""
"Renamed the ``allow_sliced_subqueries`` database feature flag to "
"``allow_sliced_subqueries_with_in``."
msgstr ""
"将数据库特性标志 ``allow_sliced_subqueries`` 重命名为 "
"``allow_sliced_subqueries_with_in``。"

msgid ""
"``DatabaseOperations.distinct_sql()`` now requires an additional ``params`` "
"argument and returns a tuple of SQL and parameters instead of an SQL string."
msgstr ""
"``DatabaseOperations.distinct_sql()`` 现在需要额外的 ``params`` 参数，并返回"
"一个包含 SQL 和参数的元组，而不是一个 SQL 字符串。"

msgid ""
"``DatabaseFeatures.introspected_boolean_field_type`` is changed from a "
"method to a property."
msgstr ""
"``DatabaseFeatures.introspected_boolean_field_type`` 从方法更改为属性。"

msgid "Support for SpatiaLite 4.0 is removed."
msgstr "移除对 SpatiaLite 4.0 的支持。"

msgid "Dropped support for MySQL 5.5"
msgstr "不再支持 MySQL 5.5 版本"

msgid ""
"The end of upstream support for MySQL 5.5 is December 2018. Django 2.1 "
"supports MySQL 5.6 and higher."
msgstr ""
"MySQL 5.5 的上游支持结束于 2018 年 12 月。 Django 2.1 支持 MySQL 5.6 及更高版"
"本。"

msgid "Dropped support for PostgreSQL 9.3"
msgstr "不再支持 PostgreSQL 9.3 版本"

msgid ""
"The end of upstream support for PostgreSQL 9.3 is September 2018. Django 2.1 "
"supports PostgreSQL 9.4 and higher."
msgstr ""
"PostgreSQL 9.3 的上游支持结束于 2018 年 9 月。 Django 2.1 支持 PostgreSQL "
"9.4 及更高版本。"

msgid ""
"Removed ``BCryptPasswordHasher`` from the default ``PASSWORD_HASHERS`` "
"setting"
msgstr "从默认的 ``PASSWORD_HASHERS`` 设置中移除了 ``BCryptPasswordHasher``。"

msgid ""
"If you used bcrypt with Django 1.4 or 1.5 (before "
"``BCryptSHA256PasswordHasher`` was added in Django 1.6), you might have some "
"passwords that use the ``BCryptPasswordHasher`` hasher."
msgstr ""
"如果你在 Django 1.4 或 1.5 中使用了 bcrypt（在 Django 1.6 中添加了 "
"``BCryptSHA256PasswordHasher``），你可能有一些使用了 "
"``BCryptPasswordHasher`` 哈希算法的密码。"

msgid "You can check if that's the case like this::"
msgstr "您可以像这样检查是否符合条件："

msgid ""
"If you want to continue to allow those passwords to be used, you'll have to "
"define the :setting:`PASSWORD_HASHERS` setting (if you don't already) and "
"include ``'django.contrib.auth.hashers.BCryptPasswordHasher'``."
msgstr ""
"如果你想继续允许使用这些密码，你将需要定义 :setting:`PASSWORD_HASHERS` 设置"
"（如果尚未定义），并包含 ``'django.contrib.auth.hashers."
"BCryptPasswordHasher'``。"

msgid "Moved ``wrap_label`` widget template context variable"
msgstr "移动了 ``wrap_label`` 小部件模板上下文变量"

msgid ""
"To fix the lack of ``<label>`` when using ``RadioSelect`` and "
"``CheckboxSelectMultiple`` with ``MultiWidget``, the ``wrap_label`` context "
"variable now appears as an attribute of each option. For example, in a "
"custom ``input_option.html`` template, change ``{% if wrap_label %}`` to "
"``{% if widget.wrap_label %}``."
msgstr ""
"为了解决在使用 ``MultiWidget`` 时使用 ``RadioSelect`` 和 "
"``CheckboxSelectMultiple`` 时缺少 ``<label>`` 的问题，现在 ``wrap_label`` 上"
"下文变量已经作为每个选项的属性出现。例如，在自定义的 ``input_option.html`` 模"
"板中，将 ``{% if wrap_label %}`` 更改为 ``{% if widget.wrap_label %}``。"

msgid "``SameSite`` cookies"
msgstr "``SameSite`` cookies"

msgid ""
"The cookies used for ``django.contrib.sessions``, ``django.contrib."
"messages``, and Django's CSRF protection now set the ``SameSite`` flag to "
"``Lax`` by default. Browsers that respect this flag won't send these cookies "
"on cross-origin requests. If you rely on the old behavior, set the :setting:"
"`SESSION_COOKIE_SAMESITE` and/or :setting:`CSRF_COOKIE_SAMESITE` setting to "
"``None``."
msgstr ""
"用于 ``django.contrib.sessions``、``django.contrib.messages`` 和 Django 的 "
"CSRF 保护的 cookie 现在默认将 ``SameSite`` 标志设置为 ``Lax``。遵循此标志的浏"
"览器不会在跨源请求上发送这些 cookie。如果依赖旧行为，请将 :setting:"
"`SESSION_COOKIE_SAMESITE` 和/或 :setting:`CSRF_COOKIE_SAMESITE` 设置为 "
"``None``。"

msgid "Considerations for the new model \"view\" permission"
msgstr "新模型“查看”权限的注意事项"

msgid "Custom admin forms need to take the view-only case into account"
msgstr "自定义管理表单需要考虑只读视图的情况。"

msgid ""
"With the new \"view\" permission, existing custom admin forms may raise "
"errors when a user doesn't have the change permission because the form might "
"access nonexistent fields. Fix this by overriding :meth:`.ModelAdmin."
"get_form` and checking if the user has the \"change\" permissions and "
"returning the default form if not::"
msgstr ""
"新的 \"view\" 权限引入后，已存在的自定义管理员表单可能会在用户没有 "
"\"change\" 权限时引发错误，因为表单可能会访问不存在的字段。通过覆盖 :meth:`."
"ModelAdmin.get_form` 方法，可以解决此问题，检查用户是否具有 \"change\" 权限，"
"如果没有，则返回默认表单："

msgid "New default view permission could allow unwanted access to admin views"
msgstr "新的默认视图权限可能会导致对管理员视图的非预期访问。"

msgid ""
"If you have a custom permission with a codename of the form "
"``view_<modelname>``, the new view permission handling in the admin will "
"allow view access to the changelist and detail pages for those models. If "
"this is unwanted, you must change your custom permission codename."
msgstr ""
"如果你有一个自定义权限，其代码名称的形式为 ``view_<modelname>``，新的管理员中"
"的视图权限处理将允许访问这些模型的 changelist 和详情页。如果这不是你想要的行"
"为，你必须更改你的自定义权限代码名称。"

msgid ""
"The minimum supported version of ``mysqlclient`` is increased from 1.3.3 to "
"1.3.7."
msgstr "``mysqlclient`` 的最低支持版本已从 1.3.3 增加到 1.3.7。"

msgid "Support for SQLite < 3.7.15 is removed."
msgstr "不再支持 SQLite 版本低于 3.7.15 。"

msgid ""
"The date format of ``Set-Cookie``'s ``Expires`` directive is changed to "
"follow :rfc:`7231#section-7.1.1.1` instead of Netscape's cookie standard. "
"Hyphens present in dates like ``Tue, 25-Dec-2018 22:26:13 GMT`` are removed. "
"This change should be merely cosmetic except perhaps for antiquated browsers "
"that don't parse the new format."
msgstr ""
"``Set-Cookie`` 的 ``Expires`` 指令的日期格式已更改，以遵循 :rfc:"
"`7231#section-7.1.1.1`，而不是 Netscape 的 cookie 标准。在日期中出现的连字符"
"（如 ``Tue, 25-Dec-2018 22:26:13 GMT``）已被移除。这个改变应该只是视觉上的变"
"化，除非是一些不支持新格式的过时浏览器。"

msgid ""
"``allowed_hosts`` is now a required argument of private API ``django.utils."
"http.is_safe_url()``."
msgstr ""
"``allowed_hosts`` 现在是私有 API ``django.utils.http.is_safe_url()`` 的必需参"
"数。"

msgid ""
"The ``multiple`` attribute rendered by the :class:`~django.forms."
"SelectMultiple` widget now uses HTML5 boolean syntax rather than XHTML's "
"``multiple=\"multiple\"``."
msgstr ""
":class:`~django.forms.SelectMultiple` 小部件渲染的 ``multiple`` 属性现在使用 "
"HTML5 的布尔语法，而不是 XHTML 的 ``multiple=\"multiple\"``。"

msgid ""
"HTML rendered by form widgets no longer includes a closing slash on void "
"elements, e.g. ``<br>``. This is incompatible within XHTML, although some "
"widgets already used aspects of HTML5 such as boolean attributes."
msgstr ""
"由表单小部件渲染的 HTML 不再在空元素上包含闭合斜杠，例如 ``<br>``。这在 "
"XHTML 中不兼容，尽管一些小部件已经使用了 HTML5 的一些特性，如布尔属性。"

msgid ""
"The value of :class:`~django.forms.SelectDateWidget`'s empty options is "
"changed from 0 to an empty string, which mainly may require some adjustments "
"in tests that compare HTML."
msgstr ""
":class:`~django.forms.SelectDateWidget` 的空选项的值已从 0 更改为空字符串，这"
"主要可能需要在比较 HTML 的测试中进行一些调整。"

msgid ""
":meth:`.User.has_usable_password` and the :func:`~django.contrib.auth."
"hashers.is_password_usable` function no longer return ``False`` if the "
"password is ``None`` or an empty string, or if the password uses a hasher "
"that's not in the :setting:`PASSWORD_HASHERS` setting. This undocumented "
"behavior was a regression in Django 1.6 and prevented users with such "
"passwords from requesting a password reset. Audit your code to confirm that "
"your usage of these APIs don't rely on the old behavior."
msgstr ""
":meth:`.User.has_usable_password` 和 :func:`~django.contrib.auth.hashers."
"is_password_usable` 函数不再在密码为 ``None``、空字符串或使用不在 :setting:"
"`PASSWORD_HASHERS` 设置中的哈希器时返回 ``False``。这种未记录的行为是 Django "
"1.6 中的一个回归，阻止了使用这些密码的用户请求密码重置。审查你的代码以确认你"
"的这些 API 的使用不依赖于旧的行为。"

msgid ""
"Since migrations are now loaded from ``.pyc`` files, you might need to "
"delete them if you're working in a mixed Python 2 and Python 3 environment."
msgstr ""
"由于迁移现在从 ``.pyc`` 文件加载，如果你在混合 Python 2 和 Python 3 环境中工"
"作，你可能需要删除它们。"

msgid ""
"Using ``None`` as a ``django.contrib.postgres.fields.JSONField`` lookup "
"value now matches objects that have the specified key and a null value "
"rather than objects that don't have the key."
msgstr ""
"在 ``django.contrib.postgres.fields.JSONField`` 上使用 ``None`` 作为查找值现"
"在匹配具有指定键和空值的对象，而不是不具有该键的对象。"

msgid ""
"The admin CSS class ``field-box`` is renamed to ``fieldBox`` to prevent "
"conflicts with the class given to model fields named \"box\"."
msgstr ""
"管理员的 CSS 类 ``field-box`` 已重命名为 ``fieldBox``，以防止与模型字段命名"
"为 \"box\" 的类发生冲突。"

msgid ""
"Since the admin's ``actions.html``, ``change_list_results.html``, "
"``date_hierarchy.html``, ``pagination.html``, ``prepopulated_fields_js."
"html``, ``search_form.html``, and ``submit_line.html`` templates can now be "
"overridden per app or per model, you may need to rename existing templates "
"with those names that were written for a different purpose."
msgstr ""
"由于现在可以按应用程序或模型覆盖管理员的 ``actions.html``、"
"``change_list_results.html``、``date_hierarchy.html``、``pagination.html``、"
"``prepopulated_fields_js.html``、``search_form.html`` 和 ``submit_line."
"html`` 模板，因此您可能需要重命名已为不同目的编写的具有这些名称的现有模板。"

msgid ""
"``QuerySet.raw()`` now caches its results like regular querysets. Use "
"``iterator()`` if you don't want caching."
msgstr ""
"``QuerySet.raw()`` 现在像常规的查询集一样缓存其结果。如果不想缓存，请使用 "
"``iterator()``。"

msgid ""
"The database router :meth:`allow_relation` method is called in more cases. "
"Improperly written routers may need to be updated accordingly."
msgstr ""
"数据库路由器的 :meth:`allow_relation` 方法在更多情况下被调用。不正确编写的路"
"由器可能需要相应地进行更新。"

msgid ""
"Translations are no longer deactivated before running management commands. "
"If your custom command requires translations to be deactivated (for example, "
"to insert untranslated content into the database), use the new :ref:"
"`@no_translations decorator <management-commands-and-locales>`."
msgstr ""
"在运行管理命令之前不再停用翻译。如果你的自定义命令需要停用翻译（例如，将未翻"
"译的内容插入数据库），可以使用新的 :ref:`@no_translations 装饰器 <management-"
"commands-and-locales>`。"

msgid ""
"Management commands no longer allow the abbreviated forms of the ``--"
"settings`` and ``--pythonpath`` arguments."
msgstr "管理命令不再允许 ``--settings`` 和 ``--pythonpath`` 参数的缩写形式。"

msgid ""
"The private ``django.db.models.sql.constants.QUERY_TERMS`` constant is "
"removed. The :meth:`~.RegisterLookupMixin.get_lookup` and :meth:`~."
"RegisterLookupMixin.get_lookups` methods of the :ref:`Lookup Registration "
"API <lookup-registration-api>` may be suitable alternatives. Compared to the "
"``QUERY_TERMS`` constant, they allow your code to also account for any "
"custom lookups that have been registered."
msgstr ""
"私有常量 ``django.db.models.sql.constants.QUERY_TERMS`` 已被移除。 :ref:`查找"
"注册 API <lookup-registration-api>` 的 :meth:`~.RegisterLookupMixin."
"get_lookup` 和 :meth:`~.RegisterLookupMixin.get_lookups` 方法可能是合适的替代"
"方案。与 ``QUERY_TERMS`` 常量相比，它们允许您的代码还考虑了已注册的任何自定义"
"查找。"

msgid ""
"Compatibility with ``py-bcrypt`` is removed as it's unmaintained. Use :pypi:"
"`bcrypt` instead."
msgstr ""
"与 ``py-bcrypt`` 的兼容性已被移除，因为它已不再维护。请改用 :pypi:`bcrypt`。"

msgid "Features deprecated in 2.1"
msgstr "在 2.1 中被废弃的功能"

msgid ""
"The ``ForceRHR`` GIS function is deprecated in favor of the new :class:"
"`~django.contrib.gis.db.models.functions.ForcePolygonCW` function."
msgstr ""
"``ForceRHR`` GIS 函数已被弃用，建议使用新的 :class:`~django.contrib.gis.db."
"models.functions.ForcePolygonCW` 函数。"

msgid ""
"``django.utils.http.cookie_date()`` is deprecated in favor of :func:`~django."
"utils.http.http_date`, which follows the format of the latest RFC."
msgstr ""
"``django.utils.http.cookie_date()`` 已被弃用，建议使用 :func:`~django.utils."
"http.http_date`，它遵循最新 RFC 的格式。"

msgid ""
"``{% load staticfiles %}`` and ``{% load admin_static %}`` are deprecated in "
"favor of ``{% load static %}``, which works the same."
msgstr ""
"``{% load staticfiles %}`` 和 ``{% load admin_static %}`` 已被弃用，建议使用 "
"``{% load static %}``，它具有相同的功能。"

msgid ""
"``django.contrib.staticfiles.templatetags.static()`` is deprecated in favor "
"of ``django.templatetags.static.static()``."
msgstr ""
"``django.contrib.staticfiles.templatetags.static()`` 已被弃用，建议使用 "
"``django.templatetags.static.static()``。"

msgid ""
"Support for :meth:`.InlineModelAdmin.has_add_permission` methods that don't "
"accept ``obj`` as the second positional argument will be removed in Django "
"3.0."
msgstr ""
"不接受 ``obj`` 作为第二个位置参数的 :meth:`.InlineModelAdmin."
"has_add_permission` 方法的支持将在 Django 3.0 中被移除。"

msgid "Features removed in 2.1"
msgstr "在 2.1 版本中删除的功能"

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 2.1. See :ref:`deprecated-features-1.11` for details, "
"including how to remove usage of these features."
msgstr ""
"这些功能已经完成了其弃用周期，并在 Django 2.1 中被移除。有关详细信息，包括如"
"何删除这些功能的用法，请参阅 :ref:`deprecated-features-1.11`。"

msgid ""
"``contrib.auth.views.login()``, ``logout()``, ``password_change()``, "
"``password_change_done()``, ``password_reset()``, ``password_reset_done()``, "
"``password_reset_confirm()``, and ``password_reset_complete()`` are removed."
msgstr ""
"``contrib.auth.views.login()``, ``logout()``, ``password_change()``, "
"``password_change_done()``, ``password_reset()``, ``password_reset_done()``, "
"``password_reset_confirm()``, 和 ``password_reset_complete()`` 已被移除。"

msgid ""
"The ``extra_context`` parameter of ``contrib.auth.views."
"logout_then_login()`` is removed."
msgstr ""
"``contrib.auth.views.logout_then_login()`` 的 ``extra_context`` 参数已被移"
"除。"

msgid "``django.test.runner.setup_databases()`` is removed."
msgstr "``django.test.runner.setup_databases()`` 已被移除。"

msgid "``django.utils.translation.string_concat()`` is removed."
msgstr "``django.utils.translation.string_concat()`` 已被移除。"

msgid ""
"``django.core.cache.backends.memcached.PyLibMCCache`` no longer supports "
"passing ``pylibmc`` behavior settings as top-level attributes of ``OPTIONS``."
msgstr ""
"``django.core.cache.backends.memcached.PyLibMCCache`` 不再支持将 ``pylibmc`` "
"行为设置作为 ``OPTIONS`` 的顶级属性传递。"

msgid ""
"The ``host`` parameter of ``django.utils.http.is_safe_url()`` is removed."
msgstr "``django.utils.http.is_safe_url()`` 的 ``host`` 参数已被移除。"

msgid ""
"Silencing of exceptions raised while rendering the ``{% include %}`` "
"template tag is removed."
msgstr "不再屏蔽在渲染 ``{% include %}`` 模板标签时引发的异常。"

msgid "``DatabaseIntrospection.get_indexes()`` is removed."
msgstr "``DatabaseIntrospection.get_indexes()`` 已被移除。"

msgid ""
"The ``authenticate()`` method of authentication backends requires "
"``request`` as the first positional argument."
msgstr ""
"认证后端的 ``authenticate()`` 方法要求将 ``request`` 作为第一个位置参数。"

msgid "The ``django.db.models.permalink()`` decorator is removed."
msgstr "``django.db.models.permalink()`` 装饰器已被移除。"

msgid ""
"The ``USE_ETAGS`` setting is removed. ``CommonMiddleware`` and ``django."
"utils.cache.patch_response_headers()`` no longer set ETags."
msgstr ""
"``USE_ETAGS`` 设置已被移除。``CommonMiddleware`` 和 ``django.utils.cache."
"patch_response_headers()`` 不再设置 ETags。"

msgid "The ``Model._meta.has_auto_field`` attribute is removed."
msgstr "``Model._meta.has_auto_field`` 属性已被移除。"

msgid ""
"``url()``'s support for inline flags in regular expression groups (``(?i)``, "
"``(?L)``, ``(?m)``, ``(?s)``, and ``(?u)``) is removed."
msgstr ""
"``url()`` 对正则表达式组中的内联标志（``(?i)``、``(?L)``、``(?m)``、``(?s)`` "
"和 ``(?u)``）的支持已被移除。"

msgid ""
"Support for ``Widget.render()`` methods without the ``renderer`` argument is "
"removed."
msgstr "不再支持没有 ``renderer`` 参数的 ``Widget.render()`` 方法。"

msgid "Django 2.1.1 release notes"
msgstr "Django 2.1.1 版本发行说明"

msgid "*August 31, 2018*"
msgstr "*2018 年 8 月 31 日*"

msgid "Django 2.1.1 fixes several bugs in 2.1."
msgstr "Django 2.1.1 修复了 2.1 版本中的一些错误。"

msgid ""
"Fixed a regression where ``QueryDict.urlencode()`` crashed if the dictionary "
"contains a non-string value (:ticket:`29627`)."
msgstr ""
"修复了一个回归问题，即如果字典包含非字符串值，``QueryDict.urlencode()`` 会崩"
"溃 (:ticket:`29627`)。"

msgid ""
"Fixed a regression in Django 2.0 where using ``manage.py test --keepdb`` "
"fails on PostgreSQL if the database exists and the user doesn't have "
"permission to create databases (:ticket:`29613`)."
msgstr ""
"在 Django 2.0 中修复了一个回归问题，即如果数据库存在并且用户没有创建数据库的"
"权限，则在 PostgreSQL 上使用 ``manage.py test --keepdb`` 失败 (:ticket:"
"`29613`)。"

msgid ""
"Fixed a regression in Django 2.0 where combining ``Q`` objects with ``__in`` "
"lookups and lists crashed (:ticket:`29643`)."
msgstr ""
"在 Django 2.0 中修复了一个回归问题，即组合 ``Q`` 对象和 ``__in`` 查找与列表一"
"起使用会崩溃 (:ticket:`29643`)。"

msgid ""
"Fixed translation failure of ``DurationField``'s \"overflow\" error message "
"(:ticket:`29623`)."
msgstr ""
"修复了 ``DurationField`` 的 \"溢出\" 错误消息的翻译失败问题 (:ticket:"
"`29623`)。"

msgid ""
"Fixed a regression where the admin change form crashed if the user doesn't "
"have the 'add' permission to a model that uses ``TabularInline`` (:ticket:"
"`29637`)."
msgstr ""
"修复了一个回归问题，即如果用户没有对使用 ``TabularInline`` 的模型具有 'add' "
"权限，管理员更改表单会崩溃 (:ticket:`29637`)。"

msgid ""
"Fixed a regression where a ``related_query_name`` reverse accessor wasn't "
"set up when a ``GenericRelation`` is declared on an abstract base model (:"
"ticket:`29653`)."
msgstr ""
"修复了一个回归问题，即当在抽象基础模型上声明了 ``GenericRelation`` 时，未设"
"置 ``related_query_name`` 反向访问器 (:ticket:`29653`)。"

msgid ""
"Fixed the test client's JSON serialization of a request data dictionary for "
"structured content type suffixes (:ticket:`29662`)."
msgstr ""
"修复了测试客户端在处理结构化内容类型后缀时对请求数据字典的 JSON 序列化问题 (:"
"ticket:`29662`)。"

msgid ""
"Made the admin change view redirect to the changelist view after a POST if "
"the user has the 'view' permission (:ticket:`29663`)."
msgstr ""
"在用户具有 'view' 权限的情况下，使管理员更改视图在 POST 后重定向到 "
"changelist 视图 (:ticket:`29663`)。"

msgid ""
"Fixed admin change view crash for view-only users if the form has an extra "
"form field (:ticket:`29682`)."
msgstr ""
"修复了管理员更改视图在只有查看权限的用户访问时，如果表单具有额外的表单字段，"
"会导致崩溃的问题 (:ticket:`29682`)。"

msgid ""
"Fixed a regression in Django 2.0.5 where ``QuerySet.values()`` or "
"``values_list()`` after combining querysets with ``extra()`` with "
"``union()``, ``difference()``, or ``intersection()`` crashed due to "
"mismatching columns (:ticket:`29694`)."
msgstr ""
"在 Django 2.0.5 中修复了一个回归问题，即在将带有 ``extra()`` 的查询集与 "
"``union()``, ``difference()`` 或 ``intersection()`` 结合使用后，调用 "
"``QuerySet.values()`` 或 ``values_list()`` 会因列不匹配而导致崩溃 (:ticket:"
"`29694`)。"

msgid ""
"Fixed crash if ``InlineModelAdmin.has_add_permission()`` doesn't accept the "
"``obj`` argument (:ticket:`29723`)."
msgstr ""
"修复了如果 ``InlineModelAdmin.has_add_permission()`` 不接受 ``obj`` 参数会导"
"致崩溃的问题 (:ticket:`29723`)。"

msgid "Django 2.1.10 release notes"
msgstr "Django 2.1.10 版本发行说明"

msgid "Django 2.1.10 fixes a security issue in 2.1.9."
msgstr "Django 2.1.10 修复了 2.1.9 版本中的一个安全问题。"

msgid "Django 2.1.11 release notes"
msgstr "Django 2.1.11 版本发行说明"

msgid "Django 2.1.11 fixes security issues in 2.1.10."
msgstr "Django 2.1.11 修复了 2.1.10 版本中的安全问题。"

msgid "Django 2.1.12 release notes"
msgstr "Django 2.1.12 版本发行说明"

msgid "Django 2.1.12 fixes a regression in 2.1.11."
msgstr "Django 2.1.12 修复了 2.1.11 版本中的回归问题。"

msgid "Django 2.1.13 release notes"
msgstr "Django 2.1.13 版本发行说明"

msgid "Django 2.1.13 fixes a regression in 2.1.11."
msgstr "Django 2.1.13 修复了 2.1.11 版本中的回归问题。"

msgid "Django 2.1.14 release notes"
msgstr "Django 2.1.14 版本发行说明"

msgid "Django 2.1.14 fixes a regression in 2.1.13."
msgstr "Django 2.1.14 修复了 2.1.13 版本中的回归问题。"

msgid "Django 2.1.15 release notes"
msgstr "Django 2.1.15 版本发行说明"

msgid "*December 2, 2019*"
msgstr "*2019 年 12 月 2 日*"

msgid "Django 2.1.15 fixes a security issue and a data loss bug in 2.1.14."
msgstr "Django 2.1.15 修复了 2.1.14 版本中的安全问题和数据丢失错误。"

msgid "CVE-2019-19118: Privilege escalation in the Django admin."
msgstr "CVE-2019-19118 : Django admin 中的特权升级漏洞。"

msgid ""
"Since Django 2.1, a Django model admin displaying a parent model with "
"related model inlines, where the user has view-only permissions to a parent "
"model but edit permissions to the inline model, would display a read-only "
"view of the parent model but editable forms for the inline."
msgstr ""
"自 Django 2.1 起，当 Django 模型管理器显示带有相关模型内联的父模型时，如果用"
"户对父模型具有只读权限但对内联模型具有编辑权限，则会在父模型上显示只读视图，"
"但在内联模型上显示可编辑表单。"

msgid ""
"Submitting these forms would not allow direct edits to the parent model, but "
"would trigger the parent model's ``save()`` method, and cause pre and post-"
"save signal handlers to be invoked. This is a privilege escalation as a user "
"who lacks permission to edit a model should not be able to trigger its save-"
"related signals."
msgstr ""
"提交这些表单将不允许直接编辑父模型，但会触发父模型的 ``save()`` 方法，并导致"
"调用预保存和后保存信号处理程序。这是一种特权升级，因为缺少编辑模型权限的用户"
"不应该能够触发与其保存相关的信号。"

msgid ""
"To resolve this issue, the permission handling code of the Django admin "
"interface has been changed. Now, if a user has only the \"view\" permission "
"for a parent model, the entire displayed form will not be editable, even if "
"the user has permission to edit models included in inlines."
msgstr ""
"为解决这个问题，Django 管理界面的权限处理代码已经进行了更改。现在，如果用户只"
"对父模型具有\"查看\"权限，即使用户对内联模型具有编辑权限，整个显示的表单也将"
"不可编辑。"

msgid ""
"This is a backwards-incompatible change, and the Django security team is "
"aware that some users of Django were depending on the ability to allow "
"editing of inlines in the admin form of an otherwise view-only parent model."
msgstr ""
"这是一个不兼容的变更，Django 安全团队意识到一些 Django 用户依赖于在管理界面中"
"允许编辑内联模型，即使父模型本身只有查看权限。"

msgid ""
"Given the complexity of the Django admin, and in-particular the permissions "
"related checks, it is the view of the Django security team that this change "
"was necessary: that it is not currently feasible to maintain the existing "
"behavior while escaping the potential privilege escalation in a way that "
"would avoid a recurrence of similar issues in the future, and that would be "
"compatible with Django's *safe by default* philosophy."
msgstr ""
"鉴于 Django 管理员的复杂性，尤其是与权限相关的检查，Django 安全团队认为这个改"
"变是必要的：目前不可能在维护现有行为的同时避免潜在的特权升级，这种方式可以避"
"免将来发生类似问题的重复发生，并且与 Django 的“默认安全”的哲学兼容。"

msgid ""
"For the time being, developers whose applications are affected by this "
"change should replace the use of inlines in read-only parents with custom "
"forms and views that explicitly implement the desired functionality. In the "
"longer term, adding a documented, supported, and properly-tested mechanism "
"for partially-editable multi-model forms to the admin interface may occur in "
"Django itself."
msgstr ""
"暂时来说，受到此变更影响的开发者应该将只读父模型中的内联模型替换为自定义的表"
"单和视图，明确实现所需的功能。从长远来看，Django 可能会在管理界面中添加一个经"
"过文档化、支持和经过适当测试的机制，用于部分可编辑的多模型表单。"

msgid ""
"Fixed a data loss possibility in the :meth:`~django.db.models.query.QuerySet."
"select_for_update()`. When using ``'self'`` in the ``of`` argument with :ref:"
"`multi-table inheritance <multi-table-inheritance>`, a parent model was "
"locked instead of the queryset's model (:ticket:`30953`)."
msgstr ""
"修复了在 :meth:`~django.db.models.query.QuerySet.select_for_update()` 中的数"
"据丢失可能性。当在 :ref:`多表继承 <multi-table-inheritance>` 中的 ``of`` 参数"
"中使用 ``'self'`` 时，父模型被锁定，而不是查询集的模型 (:ticket:`30953`)。"

msgid "Django 2.1.2 release notes"
msgstr "Django 2.1.2 版本发行说明"

msgid ""
"Django 2.1.2 fixes a security issue and several bugs in 2.1.1. Also, the "
"latest string translations from Transifex are incorporated."
msgstr ""
"Django 2.1.2 修复了 2.1.1 版本中的一个安全问题和几个错误。同时，还包含了来自 "
"Transifex 的最新字符串翻译。"

msgid "CVE-2018-16984: Password hash disclosure to \"view only\" admin users"
msgstr "CVE-2018-16984 : 密码哈希泄露给“只能查看”管理员用户"

msgid ""
"If an admin user has the change permission to the user model, only part of "
"the password hash is displayed in the change form. Admin users with the view "
"(but not change) permission to the user model were displayed the entire "
"hash. While it's typically infeasible to reverse a strong password hash, if "
"your site uses weaker password hashing algorithms such as MD5 or SHA1, it "
"could be a problem."
msgstr ""
"如果管理员用户具有对用户模型的更改权限，只会显示密码哈希的部分内容在更改表单"
"中。对于具有对用户模型的查看（但不具有更改）权限的管理员用户，会显示完整的哈"
"希。虽然通常无法反向破解强密码哈希，但如果您的网站使用较弱的密码哈希算法，如 "
"MD5 或 SHA1，可能会存在问题。"

msgid ""
"Fixed a regression where nonexistent joins in ``F()`` no longer raised "
"``FieldError`` (:ticket:`29727`)."
msgstr ""
"修复了一个回归问题，即在 ``F()`` 中不存在的连接不再引发 ``FieldError`` (:"
"ticket:`29727`)。"

msgid ""
"Fixed a regression where files starting with a tilde or underscore weren't "
"ignored by the migrations loader (:ticket:`29749`)."
msgstr ""
"修复了一个回归问题，即以波浪符或下划线开头的文件不再被迁移加载程序忽略 (:"
"ticket:`29749`)。"

msgid ""
"Made migrations detect changes to ``Meta.default_related_name`` (:ticket:"
"`29755`)."
msgstr ""
"使迁移能够检测到对 ``Meta.default_related_name`` 的更改 (:ticket:`29755`)。"

msgid "Added compatibility for ``cx_Oracle`` 7 (:ticket:`29759`)."
msgstr "为 ``cx_Oracle`` 7 添加了兼容性 (:ticket:`29759`)。"

msgid ""
"Fixed a regression in Django 2.0 where unique index names weren't quoted (:"
"ticket:`29778`)."
msgstr ""
"修复了 Django 2.0 中的一个回归问题，即唯一索引名称没有被引用 (:ticket:"
"`29778`)。"

msgid ""
"Fixed a regression where sliced queries with multiple columns with the same "
"name crashed on Oracle 12.1 (:ticket:`29630`)."
msgstr ""
"修复了一个回归问题，在 Oracle 12.1 上，带有相同名称的多列的切片查询会崩溃 (:"
"ticket:`29630`)。"

msgid ""
"Fixed a crash when a user with the view (but not change) permission made a "
"POST request to an admin user change form (:ticket:`29809`)."
msgstr ""
"修复了一个问题，当一个具有查看权限但没有更改权限的用户向管理员用户更改表单发"
"出 POST 请求时会崩溃 (:ticket:`29809`)。"

msgid "Django 2.1.3 release notes"
msgstr "Django 2.1.3 版本发行说明"

msgid "*November 1, 2018*"
msgstr "*2018 年 11 月 1 日*"

msgid "Django 2.1.3 fixes several bugs in 2.1.2."
msgstr "Django 2.1.3 修复了 2.1.2 版本中的一些错误。"

msgid ""
"Fixed a regression in Django 2.0 where combining ``Q`` objects with ``__in`` "
"lookups and lists crashed (:ticket:`29838`)."
msgstr ""
"修复了 Django 2.0 中的一个回归问题，即将 ``Q`` 对象与 ``__in`` 查找和列表组合"
"时会崩溃 (:ticket:`29838`)。"

msgid ""
"Fixed a regression in Django 1.11 where ``django-admin shell`` may hang on "
"startup (:ticket:`29774`)."
msgstr ""
"修复了 Django 1.11 中的一个回归问题，即 ``django-admin shell`` 在启动时可能会"
"挂起 (:ticket:`29774`)。"

msgid ""
"Fixed a regression in Django 2.0 where test databases aren't reused with "
"``manage.py test --keepdb`` on MySQL (:ticket:`29827`)."
msgstr ""
"修复了 Django 2.0 中的一个回归问题，在 MySQL 上使用 ``manage.py test --"
"keepdb`` 时不再重用测试数据库 (:ticket:`29827`)。"

msgid ""
"Fixed a regression where cached foreign keys that use ``to_field`` were "
"incorrectly cleared in ``Model.save()`` (:ticket:`29896`)."
msgstr ""
"修复了一个回归问题，其中在 ``Model.save()`` 中错误地清除了使用 ``to_field`` "
"的缓存外键 (:ticket:`29896`)。"

msgid ""
"Fixed a regression in Django 2.0 where ``FileSystemStorage`` crashes with "
"``FileExistsError`` if concurrent saves try to create the same directory (:"
"ticket:`29890`)."
msgstr ""
"修复了 Django 2.0 中的一个回归问题，即如果并发保存尝试创建相同的目录，"
"``FileSystemStorage`` 会导致 ``FileExistsError`` 错误 (:ticket:`29890`)。"

msgid "Django 2.1.4 release notes"
msgstr "Django 2.1.4 版本发行说明"

msgid "Django 2.1.4 fixes several bugs in 2.1.3."
msgstr "Django 2.1.4 修复了 2.1.3 版本中的一些错误。"

msgid ""
"Corrected the default password list that ``CommonPasswordValidator`` uses by "
"lowercasing all passwords to match the format expected by the validator (:"
"ticket:`29952`)."
msgstr ""
"通过将所有密码转换为小写以与验证器期望的格式匹配，修正了 "
"``CommonPasswordValidator`` 使用的默认密码列表 (:ticket:`29952`)。"

msgid ""
"Prevented repetitive calls to ``geos_version_tuple()`` in the ``WKBWriter`` "
"class in an attempt to fix a random crash involving ``LooseVersion`` (:"
"ticket:`29959`)."
msgstr ""
"防止在尝试修复涉及 ``LooseVersion`` 的随机崩溃时，在 ``WKBWriter`` 类中多次调"
"用 ``geos_version_tuple()`` (:ticket:`29959`)。"

msgid ""
"Fixed keep-alive support in ``runserver`` after it was disabled to fix "
"another issue in Django 2.0 (:ticket:`29849`)."
msgstr ""
"在修复 Django 2.0 中的另一个问题时，修复了 ``runserver`` 中被禁用的 keep-"
"alive 支持 (:ticket:`29849`)。"

msgid ""
"Fixed admin view-only change form crash when using ``ModelAdmin."
"prepopulated_fields`` (:ticket:`29929`)."
msgstr ""
"修复了在使用 ``ModelAdmin.prepopulated_fields`` 时，管理员视图仅更改表单崩溃"
"的问题 (:ticket:`29929`)。"

msgid ""
"Fixed \"Please correct the errors below\" error message when editing an "
"object in the admin if the user only has the \"view\" permission on inlines "
"(:ticket:`29930`)."
msgstr ""
"修复了在管理员中编辑对象时出现 \"请更正下面的错误\" 错误消息的问题，如果用户"
"只对内联对象具有 \"查看\" 权限 (:ticket:`29930`)。"

msgid "Django 2.1.5 release notes"
msgstr "Django 2.1.5 版本发行说明"

msgid "Django 2.1.5 fixes a security issue and several bugs in 2.1.4."
msgstr "Django 2.1.5 修复了 2.1.4 版本中的一个安全问题和一些错误。"

msgid "Fixed compatibility with mysqlclient 1.3.14 (:ticket:`30013`)."
msgstr "修复了与 mysqlclient 1.3.14 的兼容性问题 (:ticket:`30013`)。"

msgid ""
"Fixed a regression in Django 2.1.4 (which enabled keep-alive connections) "
"where request body data isn't properly consumed for such connections (:"
"ticket:`30015`)."
msgstr ""
"修复了 Django 2.1.4 中的一个回归问题（启用了 keep-alive 连接），在这种连接中"
"未正确消耗请求体数据的问题 (:ticket:`30015`)。"

msgid ""
"Fixed a regression in Django 2.1.4 where ``InlineModelAdmin."
"has_change_permission()`` is incorrectly called with a non-``None`` ``obj`` "
"argument during an object add (:ticket:`30050`)."
msgstr ""
"修复了 Django 2.1.4 中的一个回归问题，在对象添加过程中，错误地使用非 None 的 "
"``obj`` 参数调用了 ``InlineModelAdmin.has_change_permission()`` (:ticket:"
"`30050`)。"

msgid "Django 2.1.6 release notes"
msgstr "Django 2.1.6 版本发行说明"

msgid "Django 2.1.6 fixes a security issue and a bug in 2.1.5."
msgstr "Django 2.1.6 修复了 2.1.5 版本中的一个安全问题和一个错误。"

msgid ""
"Made the ``obj`` argument of ``InlineModelAdmin.has_add_permission()`` "
"optional to restore backwards compatibility with third-party code that "
"doesn't provide it (:ticket:`30097`)."
msgstr ""
"使 ``InlineModelAdmin.has_add_permission()`` 的 ``obj`` 参数变为可选，以恢复"
"与不提供该参数的第三方代码的向后兼容性 (:ticket:`30097`)。"

msgid "Django 2.1.7 release notes"
msgstr "Django 2.1.7 版本发行说明"

msgid "Django 2.1.7 fixes a packaging error in 2.1.6."
msgstr "Django 2.1.7 修复了 2.1.6 版本中的一个打包错误。"

msgid "Corrected packaging error from 2.1.6 (:ticket:`30175`)."
msgstr "修正了来自 2.1.6 的打包错误 (:ticket:`30175`)。"

msgid "Django 2.1.8 release notes"
msgstr "Django 2.1.8 版本发行说明"

msgid "*April 1, 2019*"
msgstr "*2019 年 4 月 1 日*"

msgid "Django 2.1.8 fixes a bug in 2.1.7."
msgstr "Django 2.1.8 修复了 2.1.7 版本中的一个错误。"

msgid ""
"Prevented admin inlines for a ``ManyToManyField``\\'s implicit through model "
"from being editable if the user only has the view permission (:ticket:"
"`30289`)."
msgstr ""
"如果用户只具有查看权限，则阻止对 ``ManyToManyField`` 的隐式 through 模型的管"
"理员内联进行编辑 (:ticket:`30289`)。"

msgid "Django 2.1.9 release notes"
msgstr "Django 2.1.9 版本发行说明"

msgid "Django 2.1.9 fixes security issues in 2.1.8."
msgstr "Django 2.1.9 修复了 2.1.8 版本中的安全问题。"

msgid "Patched bundled jQuery for CVE-2019-11358: Prototype pollution"
msgstr "修复了捆绑的 jQuery 库中的 CVE-2019-11358 问题：原型污染"

msgid ""
"jQuery before 3.4.0, mishandles ``jQuery.extend(true, {}, ...)`` because of "
"``Object.prototype`` pollution. If an unsanitized source object contained an "
"enumerable ``__proto__`` property, it could extend the native ``Object."
"prototype``."
msgstr ""
"jQuery 在 3.4.0 之前处理 ``jQuery.extend(true, {}, ...)`` 时存在问题，因为它"
"可能因为 ``Object.prototype`` 污染而出错。如果一个未经过清理的源对象包含一个"
"可枚举的 ``__proto__`` 属性，它可能会扩展原生的 ``Object.prototype``。"

msgid ""
"The bundled version of jQuery used by the Django admin has been patched to "
"allow for the ``select2`` library's use of ``jQuery.extend()``."
msgstr ""
"Django 管理员使用的捆绑版本的 jQuery 已经修补，以允许 ``select2`` 库使用 "
"``jQuery.extend()``。"

msgid "Django 2.2 release notes"
msgstr "Django 2.2 版本发行说明"

msgid "Welcome to Django 2.2!"
msgstr "欢迎使用 Django 2.2 ！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-2.2>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-2.2>` "
"you'll want to be aware of when upgrading from Django 2.1 or earlier. We've :"
"ref:`begun the deprecation process for some features <deprecated-"
"features-2.2>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-2.2>`，以及在从 Django 2.1 或更早"
"版本升级时需要注意的一些 :ref:`向后不兼容的更改 <backwards-"
"incompatible-2.2>`。我们已经 :ref:`开始了一些功能的弃用过程 <deprecated-"
"features-2.2>`。"

msgid ""
"Django 2.2 is designated as a :term:`long-term support release <Long-term "
"support release>`. It will receive security updates for at least three years "
"after its release. Support for the previous LTS, Django 1.11, will end in "
"April 2020."
msgstr ""
"Django 2.2 被指定为 :term:`长期支持版本 <Long-term support release>`。它将在"
"发布后至少三年内接收安全更新。对于之前的 LTS 版本 Django 1.11，支持将在 2020 "
"年 4 月结束。"

msgid ""
"Django 2.2 supports Python 3.5, 3.6, 3.7, 3.8 (as of 2.2.8), and 3.9 (as of "
"2.2.17). We **highly recommend** and only officially support the latest "
"release of each series."
msgstr ""
"Django 2.2 支持 Python 3.5、3.6、3.7、3.8（从 2.2.8 版开始），以及 3.9（从 "
"2.2.17 版开始）。我们 **强烈建议** 并只官方支持每个系列的最新版本。"

msgid "What's new in Django 2.2"
msgstr "Django 2.2 的新功能有哪些呢？"

msgid "Constraints"
msgstr "约束"

msgid ""
"The new :class:`~django.db.models.CheckConstraint` and :class:`~django.db."
"models.UniqueConstraint` classes enable adding custom database constraints. "
"Constraints are added to models using the :attr:`Meta.constraints <django.db."
"models.Options.constraints>` option."
msgstr ""
"新的 :class:`~django.db.models.CheckConstraint` 和 :class:`~django.db.models."
"UniqueConstraint` 类允许添加自定义数据库约束。约束可以使用 :attr:`Meta."
"constraints <django.db.models.Options.constraints>` 选项添加到模型中。"

msgid ""
"Added a CSS class to the column headers of :class:`~django.contrib.admin."
"TabularInline`."
msgstr ""
"为 :class:`~django.contrib.admin.TabularInline` 的列标题添加了一个 CSS 类。"

msgid ""
"The ``HttpRequest`` is now passed as the first positional argument to :meth:"
"`.RemoteUserBackend.configure_user`, if it accepts it."
msgstr ""
"如果接受，现在将 ``HttpRequest`` 作为 :meth:`.RemoteUserBackend."
"configure_user` 的第一个位置参数传递。"

msgid ""
"Added Oracle support for the :class:`~django.contrib.gis.db.models.functions."
"Envelope` function."
msgstr ""
"为 :class:`~django.contrib.gis.db.models.functions.Envelope` 函数添加了对 "
"Oracle 数据库的支持。"

msgid ""
"Added SpatiaLite support for the :lookup:`coveredby` and :lookup:`covers` "
"lookups."
msgstr ""
"为 :lookup:`coveredby` 和 :lookup:`covers` 查询添加了对 SpatiaLite 的支持。"

msgid ""
"The new ``ordering`` argument for :class:`~django.contrib.postgres."
"aggregates.ArrayAgg` and :class:`~django.contrib.postgres.aggregates."
"StringAgg` determines the ordering of the aggregated elements."
msgstr ""
"对于 :class:`~django.contrib.postgres.aggregates.ArrayAgg` 和 :class:"
"`~django.contrib.postgres.aggregates.StringAgg`，新的 ``ordering`` 参数确定了"
"聚合元素的排序方式。"

msgid ""
"The new :class:`~django.contrib.postgres.indexes.BTreeIndex`, :class:"
"`~django.contrib.postgres.indexes.HashIndex` and :class:`~django.contrib."
"postgres.indexes.SpGistIndex` classes allow creating ``B-Tree``, ``hash``, "
"and ``SP-GiST`` indexes in the database."
msgstr ""
"新的 :class:`~django.contrib.postgres.indexes.BTreeIndex`、:class:`~django."
"contrib.postgres.indexes.HashIndex` 和 :class:`~django.contrib.postgres."
"indexes.SpGistIndex` 类允许在数据库中创建 ``B-Tree``、``hash`` 和 ``SP-"
"GiST`` 索引。"

msgid ""
":class:`~django.contrib.postgres.indexes.BrinIndex` now has the "
"``autosummarize`` parameter."
msgstr ""
":class:`~django.contrib.postgres.indexes.BrinIndex` 现在具有 "
"``autosummarize`` 参数。"

msgid ""
"The new ``search_type`` parameter of :class:`~django.contrib.postgres.search."
"SearchQuery` allows searching for a phrase or raw expression."
msgstr ""
":class:`~django.contrib.postgres.search.SearchQuery` 的新参数 "
"``search_type`` 允许搜索短语或原始表达式。"

msgid ""
"Added path matching to the :option:`collectstatic --ignore` option so that "
"patterns like ``/vendor/*.js`` can be used."
msgstr ""
"在 :option:`collectstatic --ignore` 选项中添加了路径匹配功能，以便可以使用像 "
"``/vendor/*.js`` 这样的模式。"

msgid "Added result streaming for :meth:`.QuerySet.iterator` on SQLite."
msgstr "在 SQLite 上为 :meth:`.QuerySet.iterator` 添加了结果流式传输功能。"

msgid ""
"The new :meth:`View.setup <django.views.generic.base.View.setup>` hook "
"initializes view attributes before calling :meth:`~django.views.generic.base."
"View.dispatch`. It allows mixins to set up instance attributes for reuse in "
"child classes."
msgstr ""
"新的 :meth:`View.setup <django.views.generic.base.View.setup>` 钩子在调用 :"
"meth:`~django.views.generic.base.View.dispatch` 之前初始化视图属性。它允许 "
"mixins 设置实例属性，以便在子类中重用。"

msgid "Added support and translations for the Armenian language."
msgstr "增加了对亚美尼亚语的支持和翻译。"

msgid ""
"The new :option:`--force-color` option forces colorization of the command "
"output."
msgstr "新的 :option:`--force-color` 选项强制对命令输出进行着色。"

msgid ""
":djadmin:`inspectdb` now creates models for foreign tables on PostgreSQL."
msgstr ":djadmin:`inspectdb` 现在会为 PostgreSQL 上的外部表创建模型。"

msgid ""
":option:`inspectdb --include-views` now creates models for materialized "
"views on Oracle and PostgreSQL."
msgstr ""
":option:`inspectdb --include-views` 现在会为 Oracle 和 PostgreSQL 上的物化视"
"图创建模型。"

msgid ""
"The new :option:`inspectdb --include-partitions` option allows creating "
"models for partition tables on PostgreSQL. In older versions, models are "
"created child tables instead the parent."
msgstr ""
"新的 :option:`inspectdb --include-partitions` 选项允许在 PostgreSQL 上为分区"
"表创建模型。在旧版本中，模型是在子表而不是父表中创建的。"

msgid ""
":djadmin:`inspectdb` now introspects :class:`~django.db.models."
"DurationField` for Oracle and PostgreSQL, and :class:`~django.db.models."
"AutoField` for SQLite."
msgstr ""
":djadmin:`inspectdb` 现在可以为 Oracle 和 PostgreSQL 自动检测 :class:"
"`~django.db.models.DurationField`，以及为 SQLite 检测 :class:`~django.db."
"models.AutoField`。"

msgid ""
"On Oracle, :djadmin:`dbshell` is wrapped with ``rlwrap``, if available. "
"``rlwrap`` provides a command history and editing of keyboard input."
msgstr ""
"在 Oracle 上，如果可用，:djadmin:`dbshell` 会使用 ``rlwrap`` 包装。"
"``rlwrap`` 提供了命令历史记录和键盘输入的编辑功能。"

msgid ""
"The new :option:`makemigrations --no-header` option avoids writing header "
"comments in generated migration file(s). This option is also available for :"
"djadmin:`squashmigrations`."
msgstr ""
"新的 :option:`makemigrations --no-header` 选项可以避免在生成的迁移文件中写入"
"头部注释。这个选项也适用于 :djadmin:`squashmigrations`。"

msgid ""
":djadmin:`runserver` can now use `Watchman <https://facebook.github.io/"
"watchman/>`_ to improve the performance of watching a large number of files "
"for changes."
msgstr ""
":djadmin:`runserver` 现在可以使用 `Watchman <https://facebook.github.io/"
"watchman/>`_ 来提高监视大量文件变化的性能。"

msgid ""
"The new :option:`migrate --plan` option prints the list of migration "
"operations that will be performed."
msgstr "新的 :option:`migrate --plan` 选项会打印将执行的迁移操作列表。"

msgid "``NoneType`` can now be serialized in migrations."
msgstr "``NoneType`` 现在可以在迁移中序列化。"

msgid ""
"You can now :ref:`register custom serializers <custom-migration-"
"serializers>` for migrations."
msgstr ""
"现在可以为迁移 :ref:`注册自定义序列化程序 <custom-migration-serializers>`。"

msgid ""
"Added support for PostgreSQL operator classes (:attr:`.Index.opclasses`)."
msgstr "添加了对 PostgreSQL 运算符类 (:attr:`.Index.opclasses`) 的支持。"

msgid "Added support for partial indexes (:attr:`.Index.condition`)."
msgstr "添加了对部分索引 (:attr:`.Index.condition`) 的支持。"

msgid ""
"Added the :class:`~django.db.models.functions.NullIf` and :class:`~django.db."
"models.functions.Reverse` database functions, as well as many :ref:`math "
"database functions <math-functions>`."
msgstr ""
"添加了 :class:`~django.db.models.functions.NullIf` 和 :class:`~django.db."
"models.functions.Reverse` 数据库函数，以及许多 :ref:`数学数据库函数 <math-"
"functions>`。"

msgid ""
"Setting the new ``ignore_conflicts`` parameter of :meth:`.QuerySet."
"bulk_create` to ``True`` tells the database to ignore failure to insert rows "
"that fail uniqueness constraints or other checks."
msgstr ""
"将 :meth:`.QuerySet.bulk_create` 的新参数 ``ignore_conflicts`` 设置为 "
"``True`` 会告诉数据库忽略插入失败的行，即违反唯一性约束或其他检查的行。"

msgid ""
"The new :class:`~django.db.models.functions.ExtractIsoYear` function "
"extracts ISO-8601 week-numbering years from :class:`~django.db.models."
"DateField` and :class:`~django.db.models.DateTimeField`, and the new :lookup:"
"`iso_year` lookup allows querying by an ISO-8601 week-numbering year."
msgstr ""
"新的 :class:`~django.db.models.functions.ExtractIsoYear` 函数从 :class:"
"`~django.db.models.DateField` 和 :class:`~django.db.models.DateTimeField` 中"
"提取 ISO-8601 周编号年，新的 :lookup:`iso_year` 查询允许按 ISO-8601 周编号年"
"进行查询。"

msgid ""
"The new :meth:`.QuerySet.bulk_update` method allows efficiently updating "
"specific fields on multiple model instances."
msgstr ""
"新的 :meth:`.QuerySet.bulk_update` 方法允许高效地更新多个模型实例上的特定字"
"段。"

msgid ""
"Django no longer always starts a transaction when a single query is being "
"performed, such as ``Model.save()``, ``QuerySet.update()``, and ``Model."
"delete()``. This improves the performance of autocommit by reducing the "
"number of database round trips."
msgstr ""
"Django 不再总是在执行单个查询时启动事务，例如 ``Model.save()``, ``QuerySet."
"update()`` 和 ``Model.delete()``。这通过减少数据库往返次数来提高自动提交的性"
"能。"

msgid ""
"Added SQLite support for the :class:`~django.db.models.StdDev` and :class:"
"`~django.db.models.Variance` functions."
msgstr ""
"为 :class:`~django.db.models.StdDev` 和 :class:`~django.db.models.Variance` "
"函数添加了 SQLite 支持。"

msgid ""
"The handling of ``DISTINCT`` aggregation is added to the :class:`~django.db."
"models.Aggregate` class. Adding :attr:`allow_distinct = True <django.db."
"models.Aggregate.allow_distinct>` as a class attribute on ``Aggregate`` "
"subclasses allows a ``distinct`` keyword argument to be specified on "
"initialization to ensure that the aggregate function is only called for each "
"distinct value of ``expressions``."
msgstr ""
"对于 :class:`~django.db.models.Aggregate` 类，增加了 ``DISTINCT`` 聚合的处"
"理。在 ``Aggregate`` 子类上添加 :attr:`allow_distinct = True <django.db."
"models.Aggregate.allow_distinct>` 作为类属性，允许在初始化时指定一个 "
"``distinct`` 关键字参数，以确保聚合函数仅对 ``expressions`` 的每个不同值调用"
"一次。"

msgid ""
"The :meth:`.RelatedManager.add`, :meth:`~.RelatedManager.create`, :meth:`~."
"RelatedManager.remove`,  :meth:`~.RelatedManager.set`, ``get_or_create()``, "
"and ``update_or_create()`` methods are now allowed on many-to-many "
"relationships with intermediate models. The new ``through_defaults`` "
"argument is used to specify values for new intermediate model instance(s)."
msgstr ""
"现在允许在具有中间模型的多对多关系上使用 :meth:`.RelatedManager.add`、:meth:"
"`~.RelatedManager.create`、:meth:`~.RelatedManager.remove`、:meth:`~."
"RelatedManager.set`、``get_or_create()`` 和 ``update_or_create()`` 方法。新"
"的 ``through_defaults`` 参数用于指定新中间模型实例的值。"

msgid ""
"Added :attr:`.HttpRequest.headers` to allow simple access to a request's "
"headers."
msgstr "添加了 :attr:`.HttpRequest.headers`，以便简单访问请求的头部信息。"

msgid ""
"You can now deserialize data using natural keys containing :ref:`forward "
"references <natural-keys-and-forward-references>` by passing "
"``handle_forward_references=True`` to ``serializers.deserialize()``. "
"Additionally, :djadmin:`loaddata` handles forward references automatically."
msgstr ""
"现在可以通过将 ``handle_forward_references=True`` 传递给 ``serializers."
"deserialize()`` 来使用包含 :ref:`前向引用 <natural-keys-and-forward-"
"references>` 的自然键反序列化数据。此外，:djadmin:`loaddata` 现在会自动处理前"
"向引用。"

msgid ""
"The new :meth:`.SimpleTestCase.assertURLEqual` assertion checks for a given "
"URL, ignoring the ordering of the query string. :meth:`~.SimpleTestCase."
"assertRedirects` uses the new assertion."
msgstr ""
"新的 :meth:`.SimpleTestCase.assertURLEqual` 断言检查给定的 URL，忽略查询字符"
"串的顺序。:meth:`~.SimpleTestCase.assertRedirects` 使用了这个新的断言。"

msgid ""
"The test :class:`~.django.test.Client` now supports automatic JSON "
"serialization of list and tuple ``data`` when ``content_type='application/"
"json'``."
msgstr ""
"现在，测试 :class:`~.django.test.Client` 在 ``content_type='application/"
"json'`` 时支持自动对列表和元组 ``data`` 进行 JSON 序列化。"

msgid ""
"The new :setting:`ORACLE_MANAGED_FILES <TEST_ORACLE_MANAGED_FILES>` test "
"database setting allows using Oracle Managed Files (OMF) tablespaces."
msgstr ""
"新的 :setting:`ORACLE_MANAGED_FILES <TEST_ORACLE_MANAGED_FILES>` 测试数据库设"
"置允许使用 Oracle 管理文件 (OMF) 表空间。"

msgid ""
"Deferrable database constraints are now checked at the end of each :class:"
"`~django.test.TestCase` test on SQLite 3.20+, just like on other backends "
"that support deferrable constraints. These checks aren't implemented for "
"older versions of SQLite because they would require expensive table "
"introspection there."
msgstr ""
"可延迟的数据库约束现在在 SQLite 3.20+ 上的每个 :class:`~django.test."
"TestCase` 测试结束时进行检查，就像其他支持可延迟约束的后端一样。对于较旧版本"
"的 SQLite，这些检查没有实现，因为在那里需要昂贵的表内省。"

msgid ""
":class:`~django.test.runner.DiscoverRunner` now skips the setup of databases "
"not :ref:`referenced by tests<testing-multi-db>`."
msgstr ""
":class:`~django.test.runner.DiscoverRunner` 现在会跳过未被  :ref:`测试引用 "
"<testing-multi-db>` 的数据库的设置。"

msgid ""
"The new :attr:`.ResolverMatch.route` attribute stores the route of the "
"matching URL pattern."
msgstr "新的 :attr:`.ResolverMatch.route` 属性存储匹配的 URL 模式的路由。"

msgid ""
":class:`.MaxValueValidator`, :class:`.MinValueValidator`, :class:`."
"MinLengthValidator`, and :class:`.MaxLengthValidator` now accept a callable "
"``limit_value``."
msgstr ""
":class:`.MaxValueValidator`、:class:`.MinValueValidator`、:class:`."
"MinLengthValidator` 和 :class:`.MaxLengthValidator` 现在接受可调用的 "
"``limit_value``。"

msgid "Backwards incompatible changes in 2.2"
msgstr "2.2 版本中的不向后兼容变更"

msgid ""
"Third-party database backends must implement support for table check "
"constraints or set ``DatabaseFeatures.supports_table_check_constraints`` to "
"``False``."
msgstr ""
"第三方数据库后端必须实现对表检查约束的支持，或将 ``DatabaseFeatures."
"supports_table_check_constraints`` 设置为 ``False``。"

msgid ""
"Third party database backends must implement support for ignoring "
"constraints or uniqueness errors while inserting or set ``DatabaseFeatures."
"supports_ignore_conflicts`` to ``False``."
msgstr ""
"第三方数据库后端必须实现在插入时忽略约束或唯一性错误的支持，或将 "
"``DatabaseFeatures.supports_ignore_conflicts`` 设置为 ``False``。"

msgid ""
"Third party database backends must implement introspection for "
"``DurationField`` or set ``DatabaseFeatures.can_introspect_duration_field`` "
"to ``False``."
msgstr ""
"第三方数据库后端必须实现对 ``DurationField`` 的内省，或将 ``DatabaseFeatures."
"can_introspect_duration_field`` 设置为 ``False``。"

msgid "``DatabaseFeatures.uses_savepoints`` now defaults to ``True``."
msgstr "``DatabaseFeatures.uses_savepoints`` 现在默认为 ``True``。"

msgid ""
"Third party database backends must implement support for partial indexes or "
"set ``DatabaseFeatures.supports_partial_indexes`` to ``False``."
msgstr ""
"第三方数据库后端必须实现对部分索引的支持，或将 ``DatabaseFeatures."
"supports_partial_indexes`` 设置为 ``False``。"

msgid ""
"``DatabaseIntrospection.table_name_converter()`` and "
"``column_name_converter()`` are removed. Third party database backends may "
"need to instead implement ``DatabaseIntrospection.identifier_converter()``. "
"In that case, the constraint names that ``DatabaseIntrospection."
"get_constraints()`` returns must be normalized by ``identifier_converter()``."
msgstr ""
"移除了 ``DatabaseIntrospection.table_name_converter()`` 和 "
"``column_name_converter()``。第三方数据库后端可能需要代替实现 "
"``DatabaseIntrospection.identifier_converter()``。在这种情况下，"
"``DatabaseIntrospection.get_constraints()`` 返回的约束名称必须通过 "
"``identifier_converter()`` 进行规范化。"

msgid ""
"SQL generation for indexes is moved from :class:`~django.db.models.Index` to "
"``SchemaEditor`` and these ``SchemaEditor`` methods are added:"
msgstr ""
"索引的 SQL 生成从 :class:`~django.db.models.Index` 移动到 ``SchemaEditor``，"
"并添加了以下 ``SchemaEditor`` 方法："

msgid "``_create_primary_key_sql()`` and ``_delete_primary_key_sql()``"
msgstr "``_create_primary_key_sql()`` 和 ``_delete_primary_key_sql()``"

msgid "``_delete_index_sql()`` (to pair with ``_create_index_sql()``)"
msgstr "``_delete_index_sql()`` （与 ``_create_index_sql()`` 配对使用）"

msgid "``_delete_unique_sql`` (to pair with ``_create_unique_sql()``)"
msgstr "``_delete_unique_sql`` （与 ``_create_unique_sql()`` 配对使用）"

msgid "``_delete_fk_sql()`` (to pair with ``_create_fk_sql()``)"
msgstr "``_delete_fk_sql()`` （与 ``_create_fk_sql()`` 配对使用）"

msgid "``_create_check_sql()`` and ``_delete_check_sql()``"
msgstr "``_create_check_sql()`` 和 ``_delete_check_sql()``"

msgid ""
"The third argument of ``DatabaseWrapper.__init__()``, "
"``allow_thread_sharing``, is removed."
msgstr ""
"移除了 ``DatabaseWrapper.__init__()`` 的第三个参数 ``allow_thread_sharing``。"

msgid "Admin actions are no longer collected from base ``ModelAdmin`` classes"
msgstr "不再从基本的 ``ModelAdmin`` 类中收集管理操作"

msgid "For example, in older versions of Django::"
msgstr "例如，在较旧版本的 Django 中："

msgid "``SubAdmin`` would have actions ``'a'`` and ``'b'``."
msgstr "``SubAdmin`` 将具有操作 ``'a'`` 和 ``'b'``。"

msgid ""
"Now ``actions`` follows standard Python inheritance. To get the same result "
"as before::"
msgstr "现在，``actions`` 遵循标准的 Python 继承。要获得与以前相同的结果："

msgid "Support for GDAL 1.9 and 1.10 is dropped."
msgstr "支持 GDAL 1.9 和 1.10 的功能已被移除。"

msgid "``TransactionTestCase`` serialized data loading"
msgstr "``TransactionTestCase`` 序列化数据加载"

msgid ""
"Initial data migrations are now loaded in :class:`~django.test."
"TransactionTestCase` at the end of the test, after the database flush. In "
"older versions, this data was loaded at the beginning of the test, but this "
"prevents the :option:`test --keepdb` option from working properly (the "
"database was empty at the end of the whole test suite). This change "
"shouldn't have an impact on your tests unless you've customized :class:"
"`~django.test.TransactionTestCase`'s internals."
msgstr ""
"现在，在 :class:`~django.test.TransactionTestCase` 的测试结束后，即在数据库刷"
"新之后加载初始数据迁移。在旧版本中，这些数据在测试开始时加载，但这会阻止 :"
"option:`test --keepdb` 选项正常工作（整个测试套件结束后数据库为空）。除非您已"
"自定义了 :class:`~django.test.TransactionTestCase` 的内部，否则这个变化不应影"
"响您的测试。"

msgid "``sqlparse`` is required dependency"
msgstr "``sqlparse`` 是必需的依赖项"

msgid ""
"To simplify a few parts of Django's database handling, :pypi:`sqlparse "
"0.2.2+ <sqlparse>` is now a required dependency. It's automatically "
"installed along with Django."
msgstr ""
"为了简化 Django 数据库处理的几个部分，现在 :pypi:`sqlparse 0.2.2+ "
"<sqlparse>` 是一个必需的依赖项。它会随着 Django 自动安装。"

msgid "``cached_property`` aliases"
msgstr "``cached_property`` 别名"

msgid "In usage like::"
msgstr "在以下用法中："

msgid ""
"``alias`` is not cached. Where the problem can be detected (Python 3.6 and "
"later), such usage now raises ``TypeError: Cannot assign the same "
"cached_property to two different names ('base' and 'alias').``"
msgstr ""
"``alias`` 不会被缓存。在可以检测到问题的情况下（Python 3.6 及更高版本），此类"
"用法现在会引发 ``TypeError: Cannot assign the same cached_property to two "
"different names ('base' and 'alias')``。"

msgid "Use this instead::"
msgstr "请改用以下方式："

msgid "Permissions for proxy models"
msgstr "代理模型的权限"

msgid ""
":ref:`Permissions for proxy models <proxy-models-permissions-topic>` are now "
"created using the content type of the proxy model rather than the content "
"type of the concrete model. A migration will update existing permissions "
"when you run :djadmin:`migrate`."
msgstr ""
":ref:`代理模型的权限 <proxy-models-permissions-topic>` 现在使用代理模型的内容"
"类型而不是具体模型的内容类型来创建。在运行 :djadmin:`migrate` 时，迁移将更新"
"现有的权限。"

msgid ""
"In the admin, the change is transparent for proxy models having the same "
"``app_label`` as their concrete model. However, in older versions, users "
"with permissions for a proxy model with a *different* ``app_label`` than its "
"concrete model couldn't access the model in the admin. That's now fixed, but "
"you might want to audit the permissions assignments for such proxy models "
"(``[add|view|change|delete]_myproxy``) prior to upgrading to ensure the new "
"access is appropriate."
msgstr ""
"在管理界面中，对于与其具体模型具有相同的 ``app_label`` 的代理模型，这个变化是"
"透明的。然而，在旧版本中，对于具体模型具有不同 ``app_label`` 的代理模型的权限"
"的用户不能访问管理中的模型。现在这个问题已经修复，但在升级之前，您可能希望审"
"查这些代理模型的权限分配（``[add|view|change|delete]_myproxy``），以确保新的"
"访问是合适的。"

msgid ""
"Finally, proxy model permission strings must be updated to use their own "
"``app_label``. For example, for ``app.MyProxyModel`` inheriting from "
"``other_app.ConcreteModel``, update ``user.has_perm('other_app."
"add_myproxymodel')`` to ``user.has_perm('app.add_myproxymodel')``."
msgstr ""
"最后，代理模型的权限字符串必须更新以使用它们自己的 ``app_label``。例如，对于"
"继承自 ``other_app.ConcreteModel`` 的 ``app.MyProxyModel``，请将 ``user."
"has_perm('other_app.add_myproxymodel')`` 更新为 ``user.has_perm('app."
"add_myproxymodel')``。"

msgid "Merging of form ``Media`` assets"
msgstr "合并表单 ``Media`` 资源"

msgid ""
"Form ``Media`` assets are now merged using a topological sort algorithm, as "
"the old pairwise merging algorithm is insufficient for some cases. CSS and "
"JavaScript files which don't include their dependencies may now be sorted "
"incorrectly (where the old algorithm produced results correctly by "
"coincidence)."
msgstr ""
"现在，表单 ``Media`` 资源使用拓扑排序算法进行合并，因为旧的成对合并算法对某些"
"情况不足够。不包含其依赖项的 CSS 和 JavaScript 文件现在可能会被错误地排序（而"
"旧算法恰好由于巧合而产生了正确的结果）。"

msgid ""
"Audit all ``Media`` classes for any missing dependencies. For example, "
"widgets depending on ``django.jQuery`` must specify ``js=['admin/js/jquery."
"init.js', ...]`` when :ref:`declaring form media assets <assets-as-a-static-"
"definition>`."
msgstr ""
"请审查所有的 ``Media`` 类以查找任何缺失的依赖项。例如，依赖于 ``django."
"jQuery`` 的小部件在 :ref:`声明表单媒体资源 <assets-as-a-static-definition>` "
"时必须指定 ``js=['admin/js/jquery.init.js', ...]``。"

msgid ""
"To improve readability, the ``UUIDField`` form field now displays values "
"with dashes, e.g. ``550e8400-e29b-41d4-a716-446655440000`` instead of "
"``550e8400e29b41d4a716446655440000``."
msgstr ""
"为了提高可读性，``UUIDField`` 表单字段现在会显示带有破折号的值，例如 "
"``550e8400-e29b-41d4-a716-446655440000``，而不是 "
"``550e8400e29b41d4a716446655440000``。"

msgid ""
"On SQLite, ``PositiveIntegerField`` and ``PositiveSmallIntegerField`` now "
"include a check constraint to prevent negative values in the database. If "
"you have existing invalid data and run a migration that recreates a table, "
"you'll see ``CHECK constraint failed``."
msgstr ""
"在 SQLite 上，``PositiveIntegerField`` 和 ``PositiveSmallIntegerField`` 现在"
"包含一个检查约束，以防止在数据库中出现负值。如果您有现有的无效数据并运行重新"
"创建表的迁移，您将看到 ``CHECK constraint failed``。"

msgid ""
"For consistency with WSGI servers, the test client now sets the ``Content-"
"Length`` header to a string rather than an integer."
msgstr ""
"为了与 WSGI 服务器保持一致，测试客户端现在将 ``Content-Length`` 头设置为字符"
"串而不是整数。"

msgid ""
"The return value of :func:`django.utils.text.slugify` is no longer marked as "
"HTML safe."
msgstr ":func:`django.utils.text.slugify` 的返回值不再标记为 HTML 安全。"

msgid ""
"The default truncation character used by the :tfilter:`urlizetrunc`, :"
"tfilter:`truncatechars`, :tfilter:`truncatechars_html`, :tfilter:"
"`truncatewords`, and :tfilter:`truncatewords_html` template filters is now "
"the real ellipsis character (``…``) instead of 3 dots. You may have to adapt "
"some test output comparisons."
msgstr ""
":tfilter:`urlizetrunc`、:tfilter:`truncatechars`、:tfilter:"
"`truncatechars_html`、:tfilter:`truncatewords` 和 :tfilter:"
"`truncatewords_html` 模板过滤器使用的默认截断字符现在是真正的省略号字符（``…"
"``）而不是 3 个点。您可能需要调整一些测试输出的比较。"

msgid ""
"Support for bytestring paths in the template filesystem loader is removed."
msgstr "不再支持在模板文件系统加载器中使用字节串路径。"

msgid ""
":func:`django.utils.http.urlsafe_base64_encode` now returns a string instead "
"of a bytestring, and :func:`django.utils.http.urlsafe_base64_decode` may no "
"longer be passed a bytestring."
msgstr ""
":func:`django.utils.http.urlsafe_base64_encode` 现在返回一个字符串而不是字节"
"字符串，并且 :func:`django.utils.http.urlsafe_base64_decode` 可能不再接受字节"
"字符串作为参数。"

msgid "Support for ``cx_Oracle`` < 6.0 is removed."
msgstr "不再支持 ``cx_Oracle`` 版本低于 6.0。"

msgid ""
"The minimum supported version of ``mysqlclient`` is increased from 1.3.7 to "
"1.3.13."
msgstr "``mysqlclient`` 的最低支持版本从 1.3.7 增加到 1.3.13。"

msgid ""
"The minimum supported version of SQLite is increased from 3.7.15 to 3.8.3."
msgstr "SQLite 的最低支持版本从 3.7.15 提高到 3.8.3 。"

msgid ""
"In an attempt to provide more semantic query data, ``NullBooleanSelect`` now "
"renders ``<option>`` values of ``unknown``, ``true``, and ``false`` instead "
"of ``1``, ``2``, and ``3``. For backwards compatibility, the old values are "
"still accepted as data."
msgstr ""
"为了提供更语义化的查询数据，``NullBooleanSelect`` 现在呈现 ``<option>`` 的值"
"为 ``unknown``、``true`` 和 ``false``，而不是 ``1``、``2`` 和 ``3``。为了向后"
"兼容，旧值仍然被接受为数据。"

msgid ""
":attr:`Group.name <django.contrib.auth.models.Group.name>` ``max_length`` is "
"increased from 80 to 150 characters."
msgstr ""
":attr:`Group.name <django.contrib.auth.models.Group.name>` 的 ``max_length`` "
"从 80 增加到 150 个字符。"

msgid ""
"Tests that violate deferrable database constraints now error when run on "
"SQLite 3.20+, just like on other backends that support such constraints."
msgstr ""
"现在在运行于 SQLite 3.20+ 上的测试中，违反可延迟数据库约束的行为将报错，就像"
"其他支持此类约束的后端一样。"

msgid ""
"To catch usage mistakes, the test :class:`~django.test.Client` and :func:"
"`django.utils.http.urlencode` now raise ``TypeError`` if ``None`` is passed "
"as a value to encode because ``None`` can't be encoded in GET and POST data. "
"Either pass an empty string or omit the value."
msgstr ""
"为了捕获使用错误，测试 :class:`~django.test.Client` 和 :func:`django.utils."
"http.urlencode` 现在如果传递 ``None`` 作为要编码的值会引发 ``TypeError``，因"
"为 ``None`` 不能编码为 GET 和 POST 数据。要么传递空字符串，要么省略值。"

msgid ""
"The ``ping_google`` management command now defaults to ``https`` instead of "
"``http`` for the sitemap's URL. If your site uses http, use the new "
"``ping_google --sitemap-uses-http`` option. If you use the ``django.contrib."
"sitemaps.ping_google`` function, set the new ``sitemap_uses_https`` argument "
"to ``False``."
msgstr ""
"现在，``ping_google`` 管理命令默认使用 ``https`` 而不是 ``http`` 作为站点地图"
"的 URL。如果你的站点使用 http，请使用新的 ``ping_google --sitemap-uses-"
"http`` 选项。如果你使用 ``django.contrib.sitemaps.ping_google`` 函数，请将新"
"的 ``sitemap_uses_https`` 参数设置为 ``False``。"

msgid ""
":djadmin:`runserver` no longer supports ``pyinotify`` (replaced by Watchman)."
msgstr ":djadmin:`runserver` 不再支持 ``pyinotify`` （已被 Watchman 替代）。"

msgid ""
"The :class:`~django.db.models.Avg`, :class:`~django.db.models.StdDev`, and :"
"class:`~django.db.models.Variance` aggregate functions now return a "
"``Decimal`` instead of a ``float`` when the input is ``Decimal``."
msgstr ""
"当输入是 ``Decimal`` 时， :class:`~django.db.models.Avg`、:class:`~django.db."
"models.StdDev` 和 :class:`~django.db.models.Variance` 聚合函数现在返回 "
"``Decimal`` 而不是 ``float``。"

msgid ""
"Tests will fail on SQLite if apps without migrations have relations to apps "
"with migrations. This has been a documented restriction since migrations "
"were added in Django 1.7, but it fails more reliably now. You'll see tests "
"failing with errors like ``no such table: <app_label>_<model>``. This was "
"observed with several third-party apps that had models in tests without "
"migrations. You must add migrations for such models."
msgstr ""
"如果没有迁移的应用与具有迁移的应用有关系，那么在 SQLite 上的测试将失败。这自"
"从 Django 1.7 添加迁移以来一直是一个已记录的限制，但现在它失败得更可靠。您将"
"看到类似于 ``no such table: <app_label>_<model>`` 的错误导致测试失败。这在一"
"些具有测试中没有迁移的模型的第三方应用中观察到。您必须为这些模型添加迁移。"

msgid ""
"Providing an integer in the ``key`` argument of the :meth:`.cache.delete` "
"or :meth:`.cache.get` now raises :exc:`ValueError`."
msgstr ""
"在 :meth:`.cache.delete` 或 :meth:`.cache.get` 的 ``key`` 参数中提供整数现在"
"会引发 :exc:`ValueError`。"

msgid ""
"Plural equations for some languages are changed, because the latest versions "
"from Transifex are incorporated."
msgstr "由于已纳入 Transifex 的最新版本，某些语言的复数规则方程式已被更改。"

msgid ""
"The ability to handle ``.po`` files containing different plural equations "
"for the same language was added in Django 2.2.12."
msgstr ""
"在 Django 2.2.12 中添加了处理同一语言的 ``.po`` 文件中包含不同复数方程的能"
"力。"

msgid "Features deprecated in 2.2"
msgstr "在 2.2 中被废弃的功能"

msgid "Model ``Meta.ordering`` will no longer affect ``GROUP BY`` queries"
msgstr "模型的 ``Meta.ordering`` 将不再影响 ``GROUP BY`` 查询。"

msgid ""
"A model's ``Meta.ordering`` affecting ``GROUP BY`` queries (such as ``."
"annotate().values()``) is a common source of confusion. Such queries now "
"issue a deprecation warning with the advice to add an ``order_by()`` to "
"retain the current query. ``Meta.ordering`` will be ignored in such queries "
"starting in Django 3.1."
msgstr ""
"模型的 ``Meta.ordering`` 影响 ``GROUP BY`` 查询（例如 ``.annotate()."
"values()``）是常见的引发混淆的原因。现在，这种查询会发出一个弃用警告，建议添"
"加一个 ``order_by()`` 以保留当前查询。从 Django 3.1 开始，在这种查询中将忽略 "
"``Meta.ordering``。"

msgid ""
"``django.utils.timezone.FixedOffset`` is deprecated in favor of :class:"
"`datetime.timezone`."
msgstr ""
"``django.utils.timezone.FixedOffset`` 已被弃用，建议使用 :class:`datetime."
"timezone`。"

msgid ""
"The undocumented ``QuerySetPaginator`` alias of ``django.core.paginator."
"Paginator`` is deprecated."
msgstr ""
"未记录的 ``QuerySetPaginator`` 别名 ``django.core.paginator.Paginator`` 已被"
"弃用。"

msgid ""
"The ``FloatRangeField`` model and form fields in ``django.contrib.postgres`` "
"are deprecated in favor of a new name, ``DecimalRangeField``, to match the "
"underlying ``numrange`` data type used in the database."
msgstr ""
"``django.contrib.postgres`` 中的 ``FloatRangeField`` 模型和表单字段已被弃用，"
"推荐使用新名称 ``DecimalRangeField``，以匹配数据库中使用的 ``numrange`` 数据"
"类型。"

msgid ""
"The ``FILE_CHARSET`` setting is deprecated. Starting with Django 3.1, files "
"read from disk must be UTF-8 encoded."
msgstr ""
"``FILE_CHARSET`` 设置已被弃用。从 Django 3.1 开始，从磁盘读取的文件必须是 "
"UTF-8 编码的。"

msgid ""
"``django.contrib.staticfiles.storage.CachedStaticFilesStorage`` is "
"deprecated due to the intractable problems that it has. Use :class:`."
"ManifestStaticFilesStorage` or a third-party cloud storage instead."
msgstr ""
"``django.contrib.staticfiles.storage.CachedStaticFilesStorage`` 已被弃用，因"
"为它存在无法解决的问题。请改用 :class:`.ManifestStaticFilesStorage` 或第三方"
"云存储。"

msgid ""
":meth:`.RemoteUserBackend.configure_user` is now passed ``request`` as the "
"first positional argument, if it accepts it. Support for overrides that "
"don't accept it will be removed in Django 3.1."
msgstr ""
"现在，:meth:`.RemoteUserBackend.configure_user` 方法的第一个位置参数是 "
"``request``，如果该方法接受它的话。不支持不接受 ``request`` 参数的覆盖方法，"
"将在 Django 3.1 中移除。"

msgid ""
"The ``SimpleTestCase.allow_database_queries``, ``TransactionTestCase."
"multi_db``, and ``TestCase.multi_db`` attributes are deprecated in favor of :"
"attr:`.SimpleTestCase.databases`, :attr:`.TransactionTestCase.databases`, "
"and :attr:`.TestCase.databases`. These new attributes allow databases "
"dependencies to be declared in order to prevent unexpected queries against "
"non-default databases to leak state between tests. The previous behavior of "
"``allow_database_queries=True`` and ``multi_db=True`` can be achieved by "
"setting ``databases='__all__'``."
msgstr ""
"``SimpleTestCase.allow_database_queries``、``TransactionTestCase.multi_db`` "
"和 ``TestCase.multi_db`` 属性已被弃用，推荐使用 :attr:`.SimpleTestCase."
"databases`、:attr:`.TransactionTestCase.databases` 和 :attr:`.TestCase."
"databases`。这些新属性允许声明数据库依赖关系，以防止非默认数据库的意外查询在"
"测试之间泄漏状态。以前的行为可以通过设置 ``databases='__all__'`` 来实现，即 "
"``allow_database_queries=True`` 和 ``multi_db=True``。"

msgid "Django 2.2.1 release notes"
msgstr "Django 2.2.1 版本发行说明"

msgid "*May 1, 2019*"
msgstr "*2019 年 5 月 1 日*"

msgid "Django 2.2.1 fixes several bugs in 2.2."
msgstr "Django 2.2.1 修复了 2.2 版本中的一些错误。"

msgid ""
"Fixed a regression in Django 2.1 that caused the incorrect quoting of "
"database user password when using :djadmin:`dbshell` on Oracle (:ticket:"
"`30307`)."
msgstr ""
"修复了 Django 2.1 中的一个回归问题，当在 Oracle 上使用 :djadmin:`dbshell` "
"时，导致数据库用户密码引号不正确 (:ticket:`30307`)。"

msgid "Added compatibility for ``psycopg2`` 2.8 (:ticket:`30331`)."
msgstr "增加了对 ``psycopg2`` 2.8 的兼容性 (:ticket:`30331`)。"

msgid ""
"Fixed a regression in Django 2.2 that caused a crash when loading the "
"template for the technical 500 debug page (:ticket:`30324`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，导致在加载技术性的 500 调试页面模板时崩"
"溃 (:ticket:`30324`)。"

msgid ""
"Fixed crash of ``ordering`` argument in :class:`~django.contrib.postgres."
"aggregates.ArrayAgg` and :class:`~django.contrib.postgres.aggregates."
"StringAgg` when it contains an expression with params (:ticket:`30332`)."
msgstr ""
"修复了当 ``ordering`` 参数中包含具有参数的表达式时，导致 :class:`~django."
"contrib.postgres.aggregates.ArrayAgg` 和 :class:`~django.contrib.postgres."
"aggregates.StringAgg` 崩溃的问题 (:ticket:`30332`)。"

msgid ""
"Fixed a regression in Django 2.2 that caused a single instance fast-delete "
"to not set the primary key to ``None`` (:ticket:`30330`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，导致单个实例的快速删除未将主键设置为 "
"``None`` (:ticket:`30330`)。"

msgid ""
"Prevented :djadmin:`makemigrations` from generating infinite migrations for "
"check constraints and partial indexes when ``condition`` contains a :class:"
"`~python:range` object (:ticket:`30350`)."
msgstr ""
"阻止了 :djadmin:`makemigrations` 在 ``condition`` 包含 :class:`~python:"
"range` 对象时为检查约束和部分索引生成无限迁移 (:ticket:`30350`)。"

msgid ""
"Reverted an optimization in Django 2.2 (:ticket:`29725`) that caused the "
"inconsistent behavior of ``count()`` and ``exists()`` on a reverse many-to-"
"many relationship with a custom manager (:ticket:`30325`)."
msgstr ""
"撤销了 Django 2.2 中的一个优化 (:ticket:`29725`)，该优化导致在具有自定义管理"
"器的反向多对多关系上的 ``count()`` 和 ``exists()`` 出现不一致的行为 (:ticket:"
"`30325`)。"

msgid ""
"Fixed a regression in Django 2.2 where :class:`~django.core.paginator."
"Paginator` crashes if ``object_list`` is a queryset ordered or aggregated "
"over a nested ``JSONField`` key transform (:ticket:`30335`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，当 ``object_list`` 是在嵌套的 "
"``JSONField`` 键转换上排序或聚合的查询集时，导致 :class:`~django.core."
"paginator.Paginator` 崩溃的问题 (:ticket:`30335`)。"

msgid ""
"Fixed a regression in Django 2.2 where ``IntegerField`` validation of "
"database limits crashes if ``limit_value`` attribute in a custom validator "
"is callable (:ticket:`30328`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，当自定义验证器的 ``limit_value`` 属性是可"
"调用的时，导致数据库限制的 ``IntegerField`` 验证崩溃的问题 (:ticket:"
"`30328`)。"

msgid ""
"Fixed a regression in Django 2.2 where :class:`~django.contrib.postgres."
"search.SearchVector` generates SQL that is not indexable (:ticket:`30385`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，其中 :class:`~django.contrib.postgres."
"search.SearchVector` 生成的 SQL 无法建立索引 (:ticket:`30385`)。"

msgid ""
"Fixed a regression in Django 2.2 that caused an exception to be raised when "
"a custom error handler could not be imported (:ticket:`30318`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，当无法导入自定义错误处理程序时，导致引发"
"异常的问题 (:ticket:`30318`)。"

msgid ""
"Relaxed the system check added in Django 2.2 for the admin app's "
"dependencies to reallow use of :class:`~django.contrib.sessions.middleware."
"SessionMiddleware` subclasses, rather than requiring :mod:`django.contrib."
"sessions` to be in :setting:`INSTALLED_APPS` (:ticket:`30312`)."
msgstr ""
"放宽了在 Django 2.2 中为管理应用程序的依赖项添加的系统检查，以允许再次使用 :"
"class:`~django.contrib.sessions.middleware.SessionMiddleware` 的子类，而不需"
"要将 :mod:`django.contrib.sessions` 添加到 :setting:`INSTALLED_APPS` 中 (:"
"ticket:`30312`)。"

msgid ""
"Increased the default timeout when using ``Watchman`` to 5 seconds to "
"prevent falling back to ``StatReloader`` on larger projects and made it "
"customizable via the :envvar:`DJANGO_WATCHMAN_TIMEOUT` environment variable "
"(:ticket:`30361`)."
msgstr ""
"将使用 ``Watchman`` 时的默认超时时间增加到 5 秒，以防止在较大的项目上回退到 "
"``StatReloader``，并通过 :envvar:`DJANGO_WATCHMAN_TIMEOUT` 环境变量进行自定义"
"设置 (:ticket:`30361`)。"

msgid ""
"Fixed a regression in Django 2.2 that caused a crash when migrating "
"permissions for proxy models if the target permissions already existed. For "
"example, when a permission had been created manually or a model had been "
"migrated from concrete to proxy (:ticket:`30351`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，如果目标权限已经存在，导致在迁移代理模型"
"的权限时崩溃。例如，当权限已手动创建或模型已从具体模型迁移到代理模型时 (:"
"ticket:`30351`)。"

msgid ""
"Fixed a regression in Django 2.2 that caused a crash of :djadmin:`runserver` "
"when URLConf modules raised exceptions (:ticket:`30323`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，导致当 URLConf 模块引发异常时，:djadmin:"
"`runserver` 崩溃的问题 (:ticket:`30323`)。"

msgid ""
"Fixed a regression in Django 2.2 where changes were not reliably detected by "
"auto-reloader when using ``StatReloader`` (:ticket:`30323`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，当使用 ``StatReloader`` 时，自动重新加载"
"器无法可靠地检测到更改的问题 (:ticket:`30323`)。"

msgid ""
"Fixed a migration crash on Oracle and PostgreSQL when adding a check "
"constraint with a ``contains``, ``startswith``, or ``endswith`` lookup (or "
"their case-insensitive variant) (:ticket:`30408`)."
msgstr ""
"修复了在 Oracle 和 PostgreSQL 上添加具有 ``contains``、``startswith`` 或 "
"``endswith`` 查找（或其不区分大小写的变体）的检查约束时发生的迁移崩溃问题 (:"
"ticket:`30408`)。"

msgid ""
"Fixed a migration crash on Oracle and SQLite when adding a check constraint "
"with ``condition`` contains ``|`` (``OR``) operator (:ticket:`30412`)."
msgstr ""
"修复了在 Oracle 和 SQLite 上添加具有 ``condition`` 包含 ``|`` （``OR``）运算"
"符的检查约束时发生的迁移崩溃问题 (:ticket:`30412`)。"

msgid "Django 2.2.10 release notes"
msgstr "Django 2.2.10 版本发行说明"

msgid "Django 2.2.10 fixes a security issue in 2.2.9."
msgstr "Django 2.2.10 修复了 2.2.9 版本中的一个安全问题。"

msgid "Django 2.2.11 release notes"
msgstr "Django 2.2.11 版本发行说明"

msgid "Django 2.2.11 fixes a security issue and a data loss bug in 2.2.10."
msgstr "Django 2.2.11 修复了 2.2.10 版本中的一个安全问题和一个数据丢失的错误。"

msgid ""
"Fixed a data loss possibility in the :meth:`~django.db.models.query.QuerySet."
"select_for_update`. When using related fields or parent link fields with :"
"ref:`multi-table-inheritance` in the ``of`` argument, the corresponding "
"models were not locked (:ticket:`31246`)."
msgstr ""
"修复了 :meth:`~django.db.models.query.QuerySet.select_for_update` 中的数据丢"
"失可能性。当在 ``of`` 参数中使用相关字段或父链接字段与 :ref:`multi-table-"
"inheritance` 结合使用时，相应的模型没有被锁定 (:ticket:`31246`)。"

msgid "Django 2.2.12 release notes"
msgstr "Django 2.2.12 版本发行说明"

msgid "*April 1, 2020*"
msgstr "*2020 年 4 月 1 日*"

msgid "Django 2.2.12 fixes a bug in 2.2.11."
msgstr "Django 2.2.12 修复了 2.2.11 版本中的一个错误。"

msgid ""
"Added the ability to handle ``.po`` files containing different plural "
"equations for the same language (:ticket:`30439`)."
msgstr ""
"添加了处理包含同一语言的不同复数方程的 ``.po`` 文件的能力 (:ticket:`30439`)。"

msgid "Django 2.2.13 release notes"
msgstr "Django 2.2.13 版本发行说明"

msgid "*June 3, 2020*"
msgstr "*2020 年 6 月 3 日*"

msgid "Django 2.2.13 fixes two security issues and a regression in 2.2.12."
msgstr "Django 2.2.13 修复了 2.2.12 版本中的两个安全问题和一个回归错误。"

msgid "CVE-2020-13254: Potential data leakage via malformed memcached keys"
msgstr "CVE-2020-13254 : 可能通过格式不正确的 memcached 键导致数据泄露"

msgid ""
"In cases where a memcached backend does not perform key validation, passing "
"malformed cache keys could result in a key collision, and potential data "
"leakage. In order to avoid this vulnerability, key validation is added to "
"the memcached cache backends."
msgstr ""
"在某些情况下，如果一个 memcached 后端没有执行键验证，传递格式不正确的缓存键可"
"能会导致键碰撞和潜在的数据泄露。为了避免这个漏洞，将键验证添加到 memcached 缓"
"存后端。"

msgid "CVE-2020-13596: Possible XSS via admin ``ForeignKeyRawIdWidget``"
msgstr ""
"CVE-2020-13596: 可能通过管理员 ``ForeignKeyRawIdWidget`` 进行跨站脚本攻击 "
"(XSS) 攻击"

msgid ""
"Query parameters for the admin ``ForeignKeyRawIdWidget`` were not properly "
"URL encoded, posing an XSS attack vector. ``ForeignKeyRawIdWidget`` now "
"ensures query parameters are correctly URL encoded."
msgstr ""
"管理员 ``ForeignKeyRawIdWidget`` 的查询参数未正确进行 URL 编码，存在跨站脚本"
"攻击 (XSS) 风险。现在，``ForeignKeyRawIdWidget`` 确保查询参数正确进行了 URL "
"编码。"

msgid ""
"Fixed a regression in Django 2.2.12 that affected translation loading for "
"apps providing translations for territorial language variants as well as a "
"generic language, where the project has different plural equations for the "
"language (:ticket:`31570`)."
msgstr ""
"修复了 Django 2.2.12 中的一个回归问题，影响了为领土语言变体和通用语言提供翻译"
"的应用程序的翻译加载，在项目中为该语言使用了不同的复数方程 (:ticket:"
"`31570`)。"

msgid ""
"Tracking a jQuery security release, upgraded the version of jQuery used by "
"the admin from 3.3.1 to 3.5.1."
msgstr ""
"追踪 jQuery 的安全发布，将管理界面使用的 jQuery 版本从 3.3.1 升级到 3.5.1 。"

msgid "Django 2.2.14 release notes"
msgstr "Django 2.2.14 版本发行说明"

msgid "*July 1, 2020*"
msgstr "*2020 年 7 月 1 日*"

msgid "Django 2.2.14 fixes a bug in 2.2.13."
msgstr "Django 2.2.14 修复了 2.2.13 中的一个错误。"

msgid ""
"Fixed messages of ``InvalidCacheKey`` exceptions and ``CacheKeyWarning`` "
"warnings raised by cache key validation (:ticket:`31654`)."
msgstr ""
"修复了由缓存键验证引发的 ``InvalidCacheKey`` 异常和 ``CacheKeyWarning`` 警告"
"的消息 (:ticket:`31654`)。"

msgid "Django 2.2.15 release notes"
msgstr "Django 2.2.15 版本发行说明"

msgid "*August 3, 2020*"
msgstr "*2020 年 8 月 3 日*"

msgid "Django 2.2.15 fixes two bugs in 2.2.14."
msgstr "Django 2.2.15 修复了 2.2.14 中的两个错误。"

msgid ""
"Allowed setting the ``SameSite`` cookie flag in :meth:`.HttpResponse."
"delete_cookie` (:ticket:`31790`)."
msgstr ""
"允许在 :meth:`.HttpResponse.delete_cookie` 中设置 ``SameSite`` Cookie 标志 (:"
"ticket:`31790`)。"

msgid ""
"Fixed crash when sending emails to addresses with display names longer than "
"75 chars on Python 3.6.11+, 3.7.8+, and 3.8.4+ (:ticket:`31784`)."
msgstr ""
"修复了在 Python 3.6.11+、3.7.8+ 和 3.8.4+ 上发送电子邮件至显示名称超过 75 个"
"字符的地址时的崩溃问题 (:ticket:`31784`)。"

msgid "Django 2.2.16 release notes"
msgstr "Django 2.2.16 版本发行说明"

msgid "*September 1, 2020*"
msgstr "*2020 年 9 月 1 日*"

msgid ""
"Django 2.2.16 fixes two security issues and two data loss bugs in 2.2.15."
msgstr "Django 2.2.16 修复了 2.2.15 中的两个安全问题和两个数据丢失错误。"

msgid ""
"CVE-2020-24583: Incorrect permissions on intermediate-level directories on "
"Python 3.7+"
msgstr "CVE-2020-24583：Python 3.7+ 上的中间层目录的权限不正确。"

msgid ""
"On Python 3.7+, :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS` mode was not "
"applied to intermediate-level directories created in the process of "
"uploading files and to intermediate-level collected static directories when "
"using the :djadmin:`collectstatic` management command."
msgstr ""
"在 Python 3.7+ 上，当使用 :djadmin:`collectstatic` 管理命令时， :setting:"
"`FILE_UPLOAD_DIRECTORY_PERMISSIONS` 模式不能应用于上传文件过程中创建的中间级"
"目录和中间级收集的静态目录。"

msgid ""
"You should review and manually fix permissions on existing intermediate-"
"level directories."
msgstr "你应该检查并手动修正现有中间级目录的权限。"

msgid ""
"CVE-2020-24584: Permission escalation in intermediate-level directories of "
"the file system cache on Python 3.7+"
msgstr ""
"CVE-2020-24584：在 Python 3.7+ 上，文件系统缓存的中间级目录的权限升级。"

msgid ""
"On Python 3.7+, the intermediate-level directories of the file system cache "
"had the system's standard umask rather than ``0o077`` (no group or others "
"permissions)."
msgstr ""
"在 Python 3.7+ 上，文件系统缓存的中间级目录有系统的标准 umask，而不是 "
"``0o077`` （无组或其他权限）。"

msgid ""
"Fixed a data loss possibility in the :meth:`~django.db.models.query.QuerySet."
"select_for_update()`. When using related fields pointing to a proxy model in "
"the ``of`` argument, the corresponding model was not locked (:ticket:"
"`31866`)."
msgstr ""
"修正了 :meth:`~django.db.models.query.QuerySet.select_for_update()` 中数据丢"
"失的可能性。当在 ``of`` 参数中使用指向代理模型的相关字段时，对应的模型没有被"
"锁定（:ticket:`31866`）。"

msgid ""
"Fixed a data loss possibility, following a regression in Django 2.0, when "
"copying model instances with a cached fields value (:ticket:`31863`)."
msgstr ""
"修正了 Django 2.0 中的缺陷，当复制带有缓存字段值（:ticket:`31863`）的模型实例"
"时，可能会丢失数据。"

msgid "Django 2.2.17 release notes"
msgstr "Django 2.2.17 版本发行说明"

msgid "*November 2, 2020*"
msgstr "*2020 年 11 月 2 日*"

msgid "Django 2.2.17 adds compatibility with Python 3.9."
msgstr "Django 2.2.17 增加了与 Python 3.9 的兼容性。"

msgid "Django 2.2.18 release notes"
msgstr "Django 2.2.18 版本发行说明"

msgid "*February 1, 2021*"
msgstr "*2021 年 2 月 1 日*"

msgid "Django 2.2.18 fixes a security issue with severity \"low\" in 2.2.17."
msgstr "Django 2.2.18 修复了 2.2.17 版本中一个\"低\"严重性的安全问题。"

msgid "CVE-2021-3281: Potential directory-traversal via ``archive.extract()``"
msgstr "CVE-2021-3281：通过 ``archive.extract()`` 进行潜在的目录遍历。"

msgid ""
"The ``django.utils.archive.extract()`` function, used by :option:`startapp --"
"template` and :option:`startproject --template`, allowed directory-traversal "
"via an archive with absolute paths or relative paths with dot segments."
msgstr ""
"由 :option:`startapp --template` 和 :option:`startproject --template` 使用的 "
"``django.utils.archive.extract()`` 函数，允许通过带有绝对路径或带有点段的相对"
"路径的存档进行目录遍历。"

msgid "Django 2.2.19 release notes"
msgstr "Django 2.2.19 版本发行说明"

msgid "*February 19, 2021*"
msgstr "*2021 年 2 月 19 日*"

msgid "Django 2.2.19 fixes a security issue in 2.2.18."
msgstr "Django 2.2.19 修复了 2.2.18 版本中的一个安全问题。"

msgid ""
"CVE-2021-23336: Web cache poisoning via ``django.utils.http."
"limited_parse_qsl()``"
msgstr ""
"CVE-2021-23336：通过 ``django.utils.http.limited_parse_qsl()`` 造成网页缓存中"
"毒"

msgid ""
"Django contains a copy of :func:`urllib.parse.parse_qsl` which was added to "
"backport some security fixes. A further security fix has been issued "
"recently such that ``parse_qsl()`` no longer allows using ``;`` as a query "
"parameter separator by default. Django now includes this fix. See :bpo:"
"`42967` for further details."
msgstr ""
"Django 包含一个 :func:`urllib.parse.parse_qsl` 的副本，该副本已添加以向后移植"
"一些安全修复程序。最近发布了进一步的安全修复程序，使 ``parse_qsl()`` 不再被允"
"许使用 ``;`` 作为默认的查询参数分隔符。Django 现在包含了这个修正。更多细节请"
"参见 :bpo:`42967`。"

msgid "Django 2.2.2 release notes"
msgstr "Django 2.2.2 版本发行说明"

msgid "Django 2.2.2 fixes security issues and several bugs in 2.2.1."
msgstr "Django 2.2.2 修复了 2.2.1 版本中的一些安全问题和多个 bug 。"

msgid ""
"Fixed a regression in Django 2.2 that stopped Show/Hide toggles working on "
"dynamically added admin inlines (:ticket:`30459`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，导致在动态添加的管理内联中停止工作的“显"
"示/隐藏”切换 (:ticket:`30459`)。"

msgid ""
"Fixed a regression in Django 2.2 where deprecation message crashes if ``Meta."
"ordering`` contains an expression (:ticket:`30463`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，其中如果 ``Meta.ordering`` 包含表达式，则"
"废弃消息会导致崩溃 (:ticket:`30463`)。"

msgid ""
"Fixed a regression in Django 2.2.1 where :class:`~django.contrib.postgres."
"search.SearchVector` generates SQL with a redundant ``Coalesce`` call (:"
"ticket:`30488`)."
msgstr ""
"修复了 Django 2.2.1 中的一个回归问题，其中 :class:`~django.contrib.postgres."
"search.SearchVector` 生成带有多余的 ``Coalesce`` 调用的 SQL (:ticket:"
"`30488`)。"

msgid ""
"Fixed a regression in Django 2.2 where auto-reloader doesn't detect changes "
"in ``manage.py`` file when using ``StatReloader`` (:ticket:`30479`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，当使用 ``StatReloader`` 时，自动重新加载"
"器无法检测到 ``manage.py`` 文件的更改 (:ticket:`30479`)。"

msgid ""
"Fixed crash of :class:`~django.contrib.postgres.aggregates.ArrayAgg` and :"
"class:`~django.contrib.postgres.aggregates.StringAgg` with ``ordering`` "
"argument when used in a ``Subquery`` (:ticket:`30315`)."
msgstr ""
"修复了在 ``Subquery`` 中使用时，带有 ``ordering`` 参数的 :class:`~django."
"contrib.postgres.aggregates.ArrayAgg` 和 :class:`~django.contrib.postgres."
"aggregates.StringAgg` 崩溃的问题 (:ticket:`30315`)。"

msgid ""
"Fixed a regression in Django 2.2 that caused a crash of auto-reloader when "
"an exception with custom signature is raised (:ticket:`30516`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，当引发具有自定义签名的异常时，自动重新加"
"载器崩溃的问题 (:ticket:`30516`)。"

msgid ""
"Fixed a regression in Django 2.2.1 where auto-reloader unnecessarily reloads "
"translation files multiple times when using ``StatReloader`` (:ticket:"
"`30523`)."
msgstr ""
"修复了 Django 2.2.1 中的一个回归问题，当使用 ``StatReloader`` 时，自动重新加"
"载器不必要地多次重新加载翻译文件的问题 (:ticket:`30523`)。"

msgid "Django 2.2.20 release notes"
msgstr "Django 2.2.20 版本发行说明"

msgid "*April 6, 2021*"
msgstr "*2021 年 4 月 6 日*"

msgid "Django 2.2.20 fixes a security issue with severity \"low\" in 2.2.19."
msgstr "Django 2.2.20 修复了 2.2.19 中一个严重性为 “低” 的安全问题。"

msgid "CVE-2021-28658: Potential directory-traversal via uploaded files"
msgstr "CVE-2021-28658：通过上传的文件进行潜在的目录遍历"

msgid ""
"``MultiPartParser`` allowed directory-traversal via uploaded files with "
"suitably crafted file names."
msgstr "``MultiPartParser`` 允许通过上传某些文件名的文件进行目录遍历。"

msgid "Built-in upload handlers were not affected by this vulnerability."
msgstr "内置的上传处理程序没有受到这个漏洞的影响。"

msgid "Django 2.2.21 release notes"
msgstr "Django 2.2.21 版本发行说明"

msgid "*May 4, 2021*"
msgstr "*2021 年 5 月 4 日*"

msgid "Django 2.2.21 fixes a security issue in 2.2.20."
msgstr "Django 2.2.21 修复了 2.2.20 中的一个安全问题。"

msgid "CVE-2021-31542: Potential directory-traversal via uploaded files"
msgstr "CVE-2021-31542：通过上传的文件进行潜在的目录遍历"

msgid ""
"``MultiPartParser``, ``UploadedFile``, and ``FieldFile`` allowed directory-"
"traversal via uploaded files with suitably crafted file names."
msgstr ""
"``MultiPartParser``、``UploadedFile`` 和 ``FieldFile`` 允许通过上传的文件和适"
"当制作的文件名进行目录遍历。"

msgid ""
"In order to mitigate this risk, stricter basename and path sanitation is now "
"applied."
msgstr "为了降低这种风险，现在应用了更严格的基名和路径预防。"

msgid "Django 2.2.22 release notes"
msgstr "Django 2.2.22 版本发行说明"

msgid "*May 6, 2021*"
msgstr "*2021 年 5 月 6 日*"

msgid "Django 2.2.22 fixes a security issue in 2.2.21."
msgstr "Django 2.2.22 修复了 2.2.21 版本中的一个安全问题。"

msgid ""
"CVE-2021-32052: Header injection possibility since ``URLValidator`` accepted "
"newlines in input on Python 3.9.5+"
msgstr ""
"CVE-2021-32052：在 Python 3.9.5 以上版本中，``URLValidator`` 接受了输入中的换"
"行符，因此存在注入头的可能性"

msgid ""
"On Python 3.9.5+, :class:`~django.core.validators.URLValidator` didn't "
"prohibit newlines and tabs. If you used values with newlines in HTTP "
"response, you could suffer from header injection attacks. Django itself "
"wasn't vulnerable because :class:`~django.http.HttpResponse` prohibits "
"newlines in HTTP headers."
msgstr ""
"在 Python 3.9.5+ 上，:class:`~django.core.validators.URLValidator` 没有禁止换"
"行和制表符。如果你在 HTTP 响应中使用带换行符的值，你可能会遭受头注入攻击。"
"Django 本身没有漏洞，因为 :class:`~django.http.HttpResponse` 禁止在 HTTP 头中"
"使用换行符。"

msgid ""
"Moreover, the ``URLField`` form field which uses ``URLValidator`` silently "
"removes newlines and tabs on Python 3.9.5+, so the possibility of newlines "
"entering your data only existed if you are using this validator outside of "
"the form fields."
msgstr ""
"此外，使用 ``URLValidator`` 的 ``URLField`` 表单字段在 Python 3.9.5+ 上默默地"
"删除了换行符和制表符，所以只有在你在表单字段之外使用这个验证器时才存在换行符"
"进入你的数据的可能性。"

msgid "This issue was introduced by the :bpo:`43882` fix."
msgstr "这个问题是由 :bpo:`43882` 修正所引入的。"

msgid "Django 2.2.23 release notes"
msgstr "Django 2.2.23 版本发行说明"

msgid "*May 13, 2021*"
msgstr "*2021 年 5 月 13 日*"

msgid "Django 2.2.23 fixes a regression in 2.2.21."
msgstr "Django 2.2.23 修复了 2.2.21 中的一个缺陷。"

msgid ""
"Fixed a regression in Django 2.2.21 where saving ``FileField`` would raise a "
"``SuspiciousFileOperation`` even when a custom :attr:`~django.db.models."
"FileField.upload_to` returns a valid file path (:ticket:`32718`)."
msgstr ""
"修正了 Django 2.2.21 中的一个缺陷，即保存 ``FileField`` 会引发 "
"``SuspiciousFileOperation``，即使自定义 :attr:`~django.db.models.FileField."
"upload_to` 返回了有效的文件路径（:ticket:`32718`）。"

msgid "Django 2.2.24 release notes"
msgstr "Django 2.2.24 版本发行说明"

msgid "*June 2, 2021*"
msgstr "*2021 年 6 月 2 日*"

msgid "Django 2.2.24 fixes two security issues in 2.2.23."
msgstr "Django 2.2.24 修复了 2.2.23 中的两个安全问题。"

msgid "CVE-2021-33203: Potential directory traversal via ``admindocs``"
msgstr "CVE-2021-33203：通过 ``admindocs`` 进行潜在的目录遍历"

msgid ""
"Staff members could use the :mod:`~django.contrib.admindocs` "
"``TemplateDetailView`` view to check the existence of arbitrary files. "
"Additionally, if (and only if) the default admindocs templates have been "
"customized by the developers to also expose the file contents, then not only "
"the existence but also the file contents would have been exposed."
msgstr ""
"工作人员可以使用 :mod:`~django.contrib.admindocs` ``TemplateDetailView`` 视图"
"来检查任意文件的存在。此外，如果（也只有在）默认的管理文档模板被开发者自定义"
"为暴露文件内容，那么不仅是文件的存在，文件内容也会被暴露。"

msgid ""
"As a mitigation, path sanitation is now applied and only files within the "
"template root directories can be loaded."
msgstr ""
"作为一种缓解措施，现在应用了路径净化，只有模板根目录下的文件可以被加载。"

msgid ""
"CVE-2021-33571: Possible indeterminate SSRF, RFI, and LFI attacks since "
"validators accepted leading zeros in IPv4 addresses"
msgstr ""
"CVE-2021-33571：由于验证器接受 IPv4 地址中的前导零，可能会出现不确定的 SSRF、"
"RFI 和 LFI 攻击"

msgid ""
":class:`~django.core.validators.URLValidator`, :func:`~django.core."
"validators.validate_ipv4_address`, and :func:`~django.core.validators."
"validate_ipv46_address` didn't prohibit leading zeros in octal literals. If "
"you used such values you could suffer from indeterminate SSRF, RFI, and LFI "
"attacks."
msgstr ""
":class:`~django.core.validators.URLValidator`、:func:`~django.core."
"validators.validate_ipv4_address` 和 :func:`~django.core.validators."
"validate_ipv46_address` 没有禁止八进制字的前导零。如果你使用这样的值，你可能"
"遭受不确定的 SSRF、RFI 和 LFI 攻击。"

msgid ""
":func:`~django.core.validators.validate_ipv4_address` and :func:`~django."
"core.validators.validate_ipv46_address` validators were not affected on "
"Python 3.9.5+."
msgstr ""
":func:`~django.core.validators.validate_ipv4_address` 和 :func:`~django.core."
"validators.validate_ipv46_address` 验证器在 Python 3.9.5+ 上不受影响。"

msgid "Django 2.2.25 release notes"
msgstr "Django 2.2.25 版本发行说明"

msgid "*December 7, 2021*"
msgstr "*2021 年 12 月 7 日*"

msgid "Django 2.2.25 fixes a security issue with severity \"low\" in 2.2.24."
msgstr "Django 2.2.25 修复了在 2.2.24 中的一个严重性为“低”的安全问题。"

msgid ""
"CVE-2021-44420: Potential bypass of an upstream access control based on URL "
"paths"
msgstr "CVE-2021-44420 ：可能绕过基于 URL 路径的上游访问控制"

msgid ""
"HTTP requests for URLs with trailing newlines could bypass an upstream "
"access control based on URL paths."
msgstr ""
"HTTP 请求中带有尾随换行符的 URL 可能会绕过基于 URL 路径的上游访问控制。"

msgid "Django 2.2.26 release notes"
msgstr "Django 2.2.26 版本发行说明"

msgid "*January 4, 2022*"
msgstr "*2022 年 1 月 4 日*"

msgid ""
"Django 2.2.26 fixes one security issue with severity \"medium\" and two "
"security issues with severity \"low\" in 2.2.25."
msgstr ""
"Django 2.2.26 修复了 2.2.25 版本中一个“中等”严重性的安全问题和两个“低”严重性"
"的安全问题。"

msgid ""
"CVE-2021-45115: Denial-of-service possibility in "
"``UserAttributeSimilarityValidator``"
msgstr ""
"CVE-2021-45115: ``UserAttributeSimilarityValidator`` 中存在拒绝服务的可能性"

msgid ""
":class:`.UserAttributeSimilarityValidator` incurred significant overhead "
"evaluating submitted password that were artificially large in relative to "
"the comparison values. On the assumption that access to user registration "
"was unrestricted this provided a potential vector for a denial-of-service "
"attack."
msgstr ""
":class:`.UserAttributeSimilarityValidator` 在评估相对于比较值人工过大的提交密"
"码时产生了显着的开销。在假设用户注册的访问是不受限制的情况下，这为拒绝服务攻"
"击提供了潜在的攻击矢量。"

msgid ""
"In order to mitigate this issue, relatively long values are now ignored by "
"``UserAttributeSimilarityValidator``."
msgstr ""
"为了缓解这个问题，``UserAttributeSimilarityValidator`` 现在会忽略相对较长的"
"值。"

msgid ""
"This issue has severity \"medium\" according to the :ref:`Django security "
"policy <security-disclosure>`."
msgstr ""
"根据 :ref:`Django 安全政策 <security-disclosure>`，这个问题的严重性为“中等”。"

msgid ""
"CVE-2021-45116: Potential information disclosure in ``dictsort`` template "
"filter"
msgstr "CVE-2021-45116: ``dictsort`` 模板过滤器中存在潜在的信息泄露漏洞"

msgid ""
"Due to leveraging the Django Template Language's variable resolution logic, "
"the :tfilter:`dictsort` template filter was potentially vulnerable to "
"information disclosure or unintended method calls, if passed a suitably "
"crafted key."
msgstr ""
"由于利用了 Django 模板语言的变量解析逻辑，如果传递了一个经过适当精心制作的"
"键，:tfilter:`dictsort` 模板过滤器有潜在的信息泄露或意外的方法调用漏洞。"

msgid ""
"In order to avoid this possibility, ``dictsort`` now works with a restricted "
"resolution logic, that will not call methods, nor allow indexing on "
"dictionaries."
msgstr ""
"为了避免这种可能性，``dictsort`` 现在使用了受限的解析逻辑，不会调用方法，也不"
"允许在字典上进行索引。"

msgid "As a reminder, all untrusted user input should be validated before use."
msgstr "提醒一下，所有不受信任的用户输入在使用前都应进行验证。"

msgid ""
"This issue has severity \"low\" according to the :ref:`Django security "
"policy <security-disclosure>`."
msgstr ""
"根据 :ref:`Django 安全政策 <security-disclosure>`，这个问题的严重性为“低”。"

msgid "CVE-2021-45452: Potential directory-traversal via ``Storage.save()``"
msgstr "CVE-2021-45452: 通过 ``Storage.save()`` 可能存在目录遍历漏洞"

msgid ""
"``Storage.save()`` allowed directory-traversal if directly passed suitably "
"crafted file names."
msgstr ""
"如果直接传递经过适当精心制作的文件名，``Storage.save()`` 允许目录遍历。"

msgid "Django 2.2.27 release notes"
msgstr "Django 2.2.27 版本发行说明"

msgid "*February 1, 2022*"
msgstr "*2022 年 2 月 1 日*"

msgid ""
"Django 2.2.27 fixes two security issues with severity \"medium\" in 2.2.26."
msgstr "Django 2.2.27 修复了 2.2.26 中的两个严重程度为 \"中等\" 的安全问题。"

msgid "CVE-2022-22818: Possible XSS via ``{% debug %}`` template tag"
msgstr ""
"CVE-2022-22818: 可能通过 ``{% debug %}`` 模板标签进行跨站脚本攻击 (XSS) 攻击"

msgid ""
"The ``{% debug %}`` template tag didn't properly encode the current context, "
"posing an XSS attack vector."
msgstr ""
"``{% debug %}`` 模板标签没有正确编码当前上下文，存在跨站脚本攻击 (XSS) 攻击风"
"险。"

msgid ""
"In order to avoid this vulnerability, ``{% debug %}`` no longer outputs "
"information when the ``DEBUG`` setting is ``False``, and it ensures all "
"context variables are correctly escaped when the ``DEBUG`` setting is "
"``True``."
msgstr ""
"为了避免这个漏洞，当 ``DEBUG`` 设置为 ``False`` 时，``{% debug %}`` 不再输出"
"信息，并且在 ``DEBUG`` 设置为 ``True`` 时，它确保所有上下文变量都正确地进行了"
"转义。"

msgid "CVE-2022-23833: Denial-of-service possibility in file uploads"
msgstr "CVE-2022-23833 : 文件上传中可能存在拒绝服务漏洞。"

msgid ""
"Passing certain inputs to multipart forms could result in an infinite loop "
"when parsing files."
msgstr "传递特定的输入到多部分表单可能导致在解析文件时进入无限循环。"

msgid "Django 2.2.28 release notes"
msgstr "Django 2.2.28 版本发行说明"

msgid "*April 11, 2022*"
msgstr "*2022 年 4 月 11 日*"

msgid ""
"Django 2.2.28 fixes two security issues with severity \"high\" in 2.2.27."
msgstr "Django 2.2.28 修复了 Django 2.2.27 中两个严重级别的安全问题。"

msgid ""
"CVE-2022-28346: Potential SQL injection in ``QuerySet.annotate()``, "
"``aggregate()``, and ``extra()``"
msgstr ""
"CVE-2022-28346: ``QuerySet.annotate()``, ``aggregate()``, 和 ``extra()`` 存在"
"潜在的 SQL 注入漏洞"

msgid ""
":meth:`.QuerySet.annotate`, :meth:`~.QuerySet.aggregate`, and :meth:`~."
"QuerySet.extra` methods were subject to SQL injection in column aliases, "
"using a suitably crafted dictionary, with dictionary expansion, as the "
"``**kwargs`` passed to these methods."
msgstr ""
":meth:`.QuerySet.annotate`、:meth:`~.QuerySet.aggregate` 和 :meth:`~."
"QuerySet.extra` 方法在列别名中存在 SQL 注入风险，如果传递给这些方法的 "
"``**kwargs`` 中使用了经过适当精心制作的带有字典扩展的字典。"

msgid ""
"CVE-2022-28347: Potential SQL injection via ``QuerySet.explain(**options)`` "
"on PostgreSQL"
msgstr ""
"CVE-2022-28347: 在 PostgreSQL 上通过 ``QuerySet.explain(**options)`` 存在潜在"
"的 SQL 注入漏洞"

msgid ""
":meth:`.QuerySet.explain` method was subject to SQL injection in option "
"names, using a suitably crafted dictionary, with dictionary expansion, as "
"the ``**options`` argument."
msgstr ""
":meth:`.QuerySet.explain` 方法在选项名称中存在 SQL 注入风险，如果将经过适当精"
"心制作的字典与字典扩展作为 ``**options`` 参数传递。"

msgid "Django 2.2.3 release notes"
msgstr "Django 2.2.3 版本发行说明"

msgid ""
"Django 2.2.3 fixes a security issue and several bugs in 2.2.2. Also, the "
"latest string translations from Transifex are incorporated."
msgstr ""
"Django 2.2.3 修复了 Django 2.2.2 中的一个安全问题和若干个错误。此外，还整合了"
"来自 Transifex 的最新字符串翻译。"

msgid ""
"Fixed a regression in Django 2.2 where :class:`~django.db.models.Avg`, :"
"class:`~django.db.models.StdDev`, and :class:`~django.db.models.Variance` "
"crash with ``filter`` argument (:ticket:`30542`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，其中 :class:`~django.db.models.Avg`、:"
"class:`~django.db.models.StdDev` 和 :class:`~django.db.models.Variance` 在使"
"用 ``filter`` 参数时崩溃 (:ticket:`30542`)。"

msgid ""
"Fixed a regression in Django 2.2.2 where auto-reloader crashes with "
"``AttributeError``, e.g. when using ``ipdb`` (:ticket:`30588`)."
msgstr ""
"修复了 Django 2.2.2 中的一个回归问题，其中自动重新加载器在出现 "
"``AttributeError`` 时崩溃，例如在使用 ``ipdb`` 时 (:ticket:`30588`)。"

msgid "Django 2.2.4 release notes"
msgstr "Django 2.2.4 版本发行说明"

msgid "Django 2.2.4 fixes security issues and several bugs in 2.2.3."
msgstr "Django 2.2.4 修复了 Django 2.2.3 中的安全问题和若干个错误。"

msgid ""
"Fixed a regression in Django 2.2 when ordering a ``QuerySet.union()``, "
"``intersection()``, or ``difference()`` by a field type present more than "
"once results in the wrong ordering being used (:ticket:`30628`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，当对一个包含多次出现的字段类型的 "
"``QuerySet.union()``, ``intersection()`` 或 ``difference()`` 进行排序时，会导"
"致使用错误的排序方式 (:ticket:`30628`)。"

msgid ""
"Fixed a migration crash on PostgreSQL when adding a check constraint with a "
"``contains`` lookup on :class:`~django.contrib.postgres.fields."
"DateRangeField` or :class:`~django.contrib.postgres.fields."
"DateTimeRangeField`, if the right hand side of an expression is the same "
"type (:ticket:`30621`)."
msgstr ""
"修复了在 PostgreSQL 上进行迁移时的崩溃问题，当在 :class:`~django.contrib."
"postgres.fields.DateRangeField` 或 :class:`~django.contrib.postgres.fields."
"DateTimeRangeField` 上添加具有 ``contains`` 查找的检查约束时，如果表达式的右"
"侧是相同类型的话 (:ticket:`30621`)。"

msgid ""
"Fixed a regression in Django 2.2 where auto-reloader crashes if a file path "
"contains null characters (``'\\x00'``) (:ticket:`30506`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，如果文件路径包含空字符（``'\\x00'``），自"
"动重新加载器会崩溃的问题 (:ticket:`30506`)。"

msgid ""
"Fixed a regression in Django 2.2 where auto-reloader crashes if a "
"translation directory cannot be resolved (:ticket:`30647`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，如果无法解析翻译目录，自动重新加载器会崩"
"溃的问题 (:ticket:`30647`)。"

msgid "Django 2.2.5 release notes"
msgstr "Django 2.2.5 版本发行说明"

msgid "Django 2.2.5 fixes several bugs in 2.2.4."
msgstr "Django 2.2.5 修复了 Django 2.2.4 中的若干个错误。"

msgid ""
"Relaxed the system check added in Django 2.2 for models to reallow use of "
"the same ``db_table`` by multiple models when database routers are installed "
"(:ticket:`30673`)."
msgstr ""
"放宽了在 Django 2.2 中为模型添加的系统检查，允许在安装了数据库路由器的情况下"
"多个模型使用相同的 ``db_table`` (:ticket:`30673`)。"

msgid ""
"Fixed a regression in Django 2.2 where :attr:`ModelAdmin.list_filter <django."
"contrib.admin.ModelAdmin.list_filter>` choices to foreign objects don't "
"respect a model's ``Meta.ordering`` (:ticket:`30449`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，其中对外键对象的 :attr:`ModelAdmin."
"list_filter <django.contrib.admin.ModelAdmin.list_filter>` 选项不遵循模型的 "
"``Meta.ordering`` (:ticket:`30449`)。"

msgid "Django 2.2.6 release notes"
msgstr "Django 2.2.6 版本发行说明"

msgid "Django 2.2.6 fixes several bugs in 2.2.5."
msgstr "Django 2.2.6 修复了 Django 2.2.5 中的若干个错误。"

msgid ""
"Fixed migrations crash on SQLite when altering a model containing partial "
"indexes (:ticket:`30754`)."
msgstr ""
"修复了在 SQLite 上修改包含部分索引的模型时导致迁移崩溃的问题 (:ticket:"
"`30754`)。"

msgid ""
"Fixed a regression in Django 2.2.4 that caused a crash when filtering with a "
"``Subquery()`` annotation of a queryset containing ``django.contrib.postgres."
"fields.JSONField`` or :class:`~django.contrib.postgres.fields.HStoreField` (:"
"ticket:`30769`)."
msgstr ""
"修复了 Django 2.2.4 中的一个回归问题，导致在使用包含 ``django.contrib."
"postgres.fields.JSONField`` 或 :class:`~django.contrib.postgres.fields."
"HStoreField` 的查询集的 ``Subquery()`` 注释进行过滤时崩溃的问题 (:ticket:"
"`30769`)。"

msgid "Django 2.2.7 release notes"
msgstr "Django 2.2.7 版本发行说明"

msgid "Django 2.2.7 fixes several bugs in 2.2.6."
msgstr "Django 2.2.7 修复了 Django 2.2.6 中的若干个错误。"

msgid ""
"Prevented :option:`migrate --plan` from showing that ``RunPython`` "
"operations are irreversible when ``reverse_code`` callables don't have "
"docstrings or when showing a forward migration plan (:ticket:`30870`)."
msgstr ""
"防止 :option:`migrate --plan` 显示 ``RunPython`` 操作是不可逆转的，当 "
"``reverse_code`` 可调用对象没有文档字符串或者在显示正向迁移计划时 (:ticket:"
"`30870`)。"

msgid ""
"Fixed migrations crash on PostgreSQL when adding an :class:`~django.db."
"models.Index` with fields ordering and :attr:`~.Index.opclasses` (:ticket:"
"`30903`)."
msgstr ""
"修复了在 PostgreSQL 上添加带有字段排序和 :attr:`~.Index.opclasses` 的 :class:"
"`~django.db.models.Index` 时导致迁移崩溃的问题 (:ticket:`30903`)。"

msgid ""
"Restored the ability to override :meth:`~django.db.models.Model."
"get_FOO_display` (:ticket:`30931`)."
msgstr ""
"恢复了覆盖 :meth:`~django.db.models.Model.get_FOO_display` 的能力 (:ticket:"
"`30931`)。"

msgid "Django 2.2.8 release notes"
msgstr "Django 2.2.8 版本发行说明"

msgid ""
"Django 2.2.8 fixes a security issue, several bugs in 2.2.7, and adds "
"compatibility with Python 3.8."
msgstr ""
"Django 2.2.8 修复了 Django 2.2.7 中的一个安全问题和若干个错误，并增加了与 "
"Python 3.8 的兼容性。"

msgid ""
"Fixed a data loss possibility in the admin changelist view when a custom :"
"ref:`formset's prefix <formset-prefix>` contains regular expression special "
"characters, e.g. ``'$'`` (:ticket:`31031`)."
msgstr ""
"修复了在自定义 :ref:`formset 的前缀 <formset-prefix>` 包含正则表达式特殊字符"
"（例如 ``'$'``）时，管理 changelist 视图中的数据丢失可能性的问题 (:ticket:"
"`31031`)。"

msgid ""
"Fixed a regression in Django 2.2.1 that caused a crash when migrating "
"permissions for proxy models with a multiple database setup if the "
"``default`` entry was empty (:ticket:`31021`)."
msgstr ""
"修复了 Django 2.2.1 中的一个回归问题，如果 ``default`` 条目为空，在具有多个数"
"据库设置的情况下，迁移权限时会导致代理模型崩溃 (:ticket:`31021`)。"

msgid "Django 2.2.9 release notes"
msgstr "Django 2.2.9 版本发行说明"

msgid "Django 2.2.9 fixes a security issue and a data loss bug in 2.2.8."
msgstr "Django 2.2.9 修复了 Django 2.2.8 中的一个安全问题和一个数据丢失错误。"

msgid "Django 3.0 release notes"
msgstr "Django 3.0 版本发行说明"

msgid "Welcome to Django 3.0!"
msgstr "欢迎使用 Django 3.0 ！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-3.0>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-3.0>` "
"you'll want to be aware of when upgrading from Django 2.2 or earlier. We've :"
"ref:`dropped some features<removed-features-3.0>` that have reached the end "
"of their deprecation cycle, and we've :ref:`begun the deprecation process "
"for some features <deprecated-features-3.0>`."
msgstr ""
"这些发行说明涵盖了 :ref:`新功能 <whats-new-3.0>`，以及一些 :ref:`不兼容的变"
"化 <backwards-incompatible-3.0>`，当您从 Django 2.2 或更早版本升级时需要注"
"意。我们已经 :ref:`删除了一些已经完成了其弃用周期的功能 <removed-"
"features-3.0>`，并且我们已经 :ref:`开始了一些功能的弃用过程 <deprecated-"
"features-3.0>`。"

msgid ""
"Django 3.0 supports Python 3.6, 3.7, 3.8, and 3.9 (as of 3.0.11). We "
"**highly recommend** and only officially support the latest release of each "
"series."
msgstr ""
"Django 3.0 支持 Python 3.6、3.7、3.8 和 3.9（截至 3.0.11 版）。我们 **强烈推"
"荐** 并且只官方支持每个系列的最新版本。"

msgid "The Django 2.2.x series is the last to support Python 3.5."
msgstr "Django 2.2.x 系列是最后一个支持 Python 3.5 的版本。"

msgid ""
"Following the release of Django 3.0, we suggest that third-party app authors "
"drop support for all versions of Django prior to 2.2. At that time, you "
"should be able to run your package's tests using ``python -Wd`` so that "
"deprecation warnings appear. After making the deprecation warning fixes, "
"your app should be compatible with Django 3.0."
msgstr ""
"在发布 Django 3.0 后，我们建议第三方应用程序作者停止支持 Django 2.2 之前的所"
"有版本。在那个时候，您应该能够使用 ``python -Wd`` 运行您包的测试，以便看到弃"
"用警告。在进行弃用警告修复后，您的应用程序应该与 Django 3.0 兼容。"

msgid "What's new in Django 3.0"
msgstr "Django 3.0 新特性"

msgid "MariaDB support"
msgstr "MariaDB 支持"

msgid ""
"Django now officially supports `MariaDB <https://mariadb.org/>`_ 10.1 and "
"higher. See :ref:`MariaDB notes <mariadb-notes>` for more details."
msgstr ""
"Django 现在正式支持 `MariaDB <https://mariadb.org/>`_ 10.1 及更高版本。更多详"
"情请参阅 :ref:`MariaDB 注意事项 <mariadb-notes>`。"

msgid "ASGI support"
msgstr "ASGI 支持"

msgid ""
"Django 3.0 begins our journey to making Django fully async-capable by "
"providing support for running as an `ASGI <https://asgi.readthedocs.io/>`_ "
"application."
msgstr ""
"Django 3.0 开始了我们使 Django 完全支持异步的旅程，通过提供作为 `ASGI "
"<https://asgi.readthedocs.io/>`_ 应用程序运行的支持。"

msgid ""
"This is in addition to our existing WSGI support. Django intends to support "
"both for the foreseeable future. Async features will only be available to "
"applications that run under ASGI, however."
msgstr ""
"这是在我们现有的 WSGI 支持之外的补充。 Django 计划在可预见的未来同时支持两"
"者。然而，异步功能只适用于在 ASGI 下运行的应用程序。"

msgid ""
"At this stage async support only applies to the outer ASGI application. "
"Internally everything remains synchronous. Asynchronous middleware, views, "
"etc. are not yet supported. You can, however, use ASGI middleware around "
"Django's application, allowing you to combine Django with other ASGI "
"frameworks."
msgstr ""
"在当前阶段，异步支持仅适用于外部 ASGI 应用程序。内部的所有内容仍然是同步的。"
"异步中间件、视图等尚不受支持。但是，您可以在 Django 应用程序周围使用 ASGI 中"
"间件，从而可以将 Django 与其他 ASGI 框架结合使用。"

msgid ""
"There is no need to switch your applications over unless you want to start "
"experimenting with asynchronous code, but we have :doc:`documentation on "
"deploying with ASGI </howto/deployment/asgi/index>` if you want to learn "
"more."
msgstr ""
"除非您想开始尝试异步代码，否则没有必要切换您的应用程序，但如果您想了解更多信"
"息，我们有关于使用 ASGI 部署的 :doc:`文档 </howto/deployment/asgi/index>`。"

msgid ""
"Note that as a side-effect of this change, Django is now aware of "
"asynchronous event loops and will block you calling code marked as \"async "
"unsafe\" - such as ORM operations - from an asynchronous context. If you "
"were using Django from async code before, this may trigger if you were doing "
"it incorrectly. If you see a ``SynchronousOnlyOperation`` error, then "
"closely examine your code and move any database operations to be in a "
"synchronous child thread."
msgstr ""
"请注意，由于这个改变的副作用，Django 现在可以识别异步事件循环，并会阻止您从异"
"步上下文中调用标记为 \"async unsafe\" 的代码，比如 ORM 操作。如果您以前从异步"
"代码中使用 Django，那么如果使用不正确，这可能会触发问题。如果看到 "
"``SynchronousOnlyOperation`` 错误，请仔细检查您的代码，并将任何数据库操作移动"
"到同步的子线程中。"

msgid "Exclusion constraints on PostgreSQL"
msgstr "PostgreSQL 上的排除约束"

msgid ""
"The new :class:`~django.contrib.postgres.constraints.ExclusionConstraint` "
"class enable adding exclusion constraints on PostgreSQL. Constraints are "
"added to models using the :attr:`Meta.constraints <django.db.models.Options."
"constraints>` option."
msgstr ""
"新的 :class:`~django.contrib.postgres.constraints.ExclusionConstraint` 类允许"
"在 PostgreSQL 上添加排除约束。约束通过在模型中使用 :attr:`Meta.constraints "
"<django.db.models.Options.constraints>` 选项来添加。"

msgid "Filter expressions"
msgstr "过滤表达式"

msgid ""
"Expressions that output :class:`~django.db.models.BooleanField` may now be "
"used directly in ``QuerySet`` filters, without having to first annotate and "
"then filter against the annotation."
msgstr ""
"现在可以直接在 ``QuerySet`` 过滤器中使用输出 :class:`~django.db.models."
"BooleanField` 的表达式，而不需要首先注释然后对注释进行过滤。"

msgid "Enumerations for model field choices"
msgstr "模型字段选择的枚举类型"

msgid ""
"Custom enumeration types ``TextChoices``, ``IntegerChoices``, and "
"``Choices`` are now available as a way to define :attr:`.Field.choices`. "
"``TextChoices`` and ``IntegerChoices`` types are provided for text and "
"integer fields. The ``Choices`` class allows defining a compatible "
"enumeration for other concrete data types. These custom enumeration types "
"support human-readable labels that can be translated and accessed via a "
"property on the enumeration or its members. See :ref:`Enumeration types "
"<field-choices-enum-types>` for more details and examples."
msgstr ""
"现在可以使用自定义枚举类型 ``TextChoices``、``IntegerChoices`` 和 "
"``Choices`` 来定义 :attr:`.Field.choices`。``TextChoices`` 和 "
"``IntegerChoices`` 类型用于文本和整数字段。``Choices`` 类允许为其他具体数据类"
"型定义兼容的枚举。这些自定义枚举类型支持可翻译的人类可读标签，并可以通过枚举"
"或其成员的属性来访问。有关更多详细信息和示例，请参阅 :ref:`枚举类型 <field-"
"choices-enum-types>`。"

msgid ""
"Added support for the ``admin_order_field`` attribute on properties in :attr:"
"`.ModelAdmin.list_display`."
msgstr ""
"在 :attr:`.ModelAdmin.list_display` 中的属性上添加了对 ``admin_order_field`` "
"属性的支持。"

msgid ""
"The new :meth:`ModelAdmin.get_inlines() <django.contrib.admin.ModelAdmin."
"get_inlines>` method allows specifying the inlines based on the request or "
"model instance."
msgstr ""
"新的 :meth:`ModelAdmin.get_inlines() <django.contrib.admin.ModelAdmin."
"get_inlines>` 方法允许根据请求或模型实例来指定内联。"

msgid "Select2 library is upgraded from version 4.0.3 to 4.0.7."
msgstr "Select2 库的版本已从 4.0.3 升级到 4.0.7 。"

msgid "jQuery is upgraded from version 3.3.1 to 3.4.1."
msgstr "jQuery 的版本已从 3.3.1 升级到 3.4.1 。"

msgid ""
"The new ``reset_url_token`` attribute in :class:`~django.contrib.auth.views."
"PasswordResetConfirmView` allows specifying a token parameter displayed as a "
"component of password reset URLs."
msgstr ""
"在 :class:`~django.contrib.auth.views.PasswordResetConfirmView` 中新增了 "
"``reset_url_token`` 属性，允许指定作为密码重置 URL 组件显示的令牌参数。"

msgid ""
"Added :class:`~django.contrib.auth.backends.BaseBackend` class to ease "
"customization of authentication backends."
msgstr ""
"添加了 :class:`~django.contrib.auth.backends.BaseBackend` 类，以便更容易自定"
"义身份验证后端。"

msgid ""
"Added :meth:`~django.contrib.auth.models.User.get_user_permissions()` method "
"to mirror the existing :meth:`~django.contrib.auth.models.User."
"get_group_permissions()` method."
msgstr ""
"添加了 :meth:`~django.contrib.auth.models.User.get_user_permissions()` 方法，"
"以对应现有的 :meth:`~django.contrib.auth.models.User."
"get_group_permissions()` 方法。"

msgid ""
"Added HTML ``autocomplete`` attribute to widgets of username, email, and "
"password fields in :mod:`django.contrib.auth.forms` for better interaction "
"with browser password managers."
msgstr ""
"在 :mod:`django.contrib.auth.forms` 中的用户名、电子邮件和密码字段的小部件中"
"添加了 HTML ``autocomplete`` 属性，以更好地与浏览器密码管理器交互。"

msgid ""
":djadmin:`createsuperuser` now falls back to environment variables for "
"password and required fields, when a corresponding command line argument "
"isn't provided in non-interactive mode."
msgstr ""
":djadmin:`createsuperuser` 现在在非交互模式下，当没有提供相应的命令行参数时，"
"会回退到环境变量来获取密码和必填字段。"

msgid ""
":attr:`~django.contrib.auth.models.CustomUser.REQUIRED_FIELDS` now supports :"
"class:`~django.db.models.ManyToManyField`\\s."
msgstr ""
":attr:`~django.contrib.auth.models.CustomUser.REQUIRED_FIELDS` 现在支持 :"
"class:`~django.db.models.ManyToManyField`。"

msgid ""
"The new :meth:`.UserManager.with_perm` method returns users that have the "
"specified permission."
msgstr "新的 :meth:`.UserManager.with_perm` 方法返回具有指定权限的用户。"

msgid ""
"The default iteration count for the PBKDF2 password hasher is increased from "
"150,000 to 180,000."
msgstr "PBKDF2 密码哈希器的默认迭代次数从 150 , 000 增加到 180 , 000 。"

msgid ""
"Allowed MySQL spatial lookup functions to operate on real geometries. "
"Previous support was limited to bounding boxes."
msgstr "允许 MySQL 空间查询函数在真实几何对象上操作。之前的支持仅限于边界框。"

msgid ""
"Added the :class:`~django.contrib.gis.db.models.functions.GeometryDistance` "
"function, supported on PostGIS."
msgstr ""
"添加了 :class:`~django.contrib.gis.db.models.functions.GeometryDistance` 函"
"数，在 PostGIS 上支持。"

msgid ""
"Added support for the ``furlong`` unit in :class:`~django.contrib.gis."
"measure.Distance`."
msgstr ""
"在 :class:`~django.contrib.gis.measure.Distance` 中添加了对 ``furlong`` 单位"
"的支持。"

msgid "The :setting:`GEOIP_PATH` setting now supports :class:`pathlib.Path`."
msgstr ":setting:`GEOIP_PATH` 设置现在支持 :class:`pathlib.Path`。"

msgid ""
"The :class:`~django.contrib.gis.geoip2.GeoIP2` class now accepts :class:"
"`pathlib.Path` ``path``."
msgstr ""
":class:`~django.contrib.gis.geoip2.GeoIP2` 类现在接受 :class:`pathlib.Path` "
"的 ``path``。"

msgid ""
"The new :class:`~django.contrib.postgres.fields.RangeOperators` helps to "
"avoid typos in SQL operators that can be used together with :class:`~django."
"contrib.postgres.fields.RangeField`."
msgstr ""
"新的 :class:`~django.contrib.postgres.fields.RangeOperators` 有助于避免在可以"
"与 :class:`~django.contrib.postgres.fields.RangeField` 一起使用的 SQL 运算符"
"中出现拼写错误。"

msgid ""
"The new :class:`~django.contrib.postgres.fields.RangeBoundary` expression "
"represents the range boundaries."
msgstr ""
"新的 :class:`~django.contrib.postgres.fields.RangeBoundary` 表达式表示范围的"
"边界。"

msgid ""
"The new :class:`~django.contrib.postgres.operations.AddIndexConcurrently` "
"and :class:`~django.contrib.postgres.operations.RemoveIndexConcurrently` "
"classes allow creating and dropping indexes ``CONCURRENTLY`` on PostgreSQL."
msgstr ""
"新的 :class:`~django.contrib.postgres.operations.AddIndexConcurrently` 和 :"
"class:`~django.contrib.postgres.operations.RemoveIndexConcurrently` 类允许在 "
"PostgreSQL 上使用 ``CONCURRENTLY`` 创建和删除索引。"

msgid ""
"The new :meth:`~django.contrib.sessions.backends.base.SessionBase."
"get_session_cookie_age()` method allows dynamically specifying the session "
"cookie age."
msgstr ""
"新的 :meth:`~django.contrib.sessions.backends.base.SessionBase."
"get_session_cookie_age()` 方法允许动态指定会话 cookie 的过期时间。"

msgid ""
"Added the ``language`` class attribute to the :class:`django.contrib."
"syndication.views.Feed` to customize a feed language. The default value is :"
"func:`~django.utils.translation.get_language()` instead of :setting:"
"`LANGUAGE_CODE`."
msgstr ""
"在 :class:`django.contrib.syndication.views.Feed` 中添加了 ``language`` 类属"
"性，以自定义 feed 的语言。默认值是 :func:`~django.utils.translation."
"get_language()`，而不是 :setting:`LANGUAGE_CODE`。"

msgid ""
":func:`~django.utils.cache.add_never_cache_headers` and :func:`~django.views."
"decorators.cache.never_cache` now add the ``private`` directive to ``Cache-"
"Control`` headers."
msgstr ""
":func:`~django.utils.cache.add_never_cache_headers` 和 :func:`~django.views."
"decorators.cache.never_cache` 现在在 ``Cache-Control`` 头中添加了 "
"``private`` 指令。"

msgid ""
"The new :meth:`.Storage.get_alternative_name` method allows customizing the "
"algorithm for generating filenames if a file with the uploaded name already "
"exists."
msgstr ""
"新的 :meth:`.Storage.get_alternative_name` 方法允许自定义生成文件名的算法，如"
"果已经存在具有上传名称的文件。"

msgid ""
"Formsets may control the widget used when ordering forms via :attr:`~django."
"forms.formsets.BaseFormSet.can_order` by setting the :attr:`~django.forms."
"formsets.BaseFormSet.ordering_widget` attribute or overriding :attr:`~django."
"forms.formsets.BaseFormSet.get_ordering_widget()`."
msgstr ""
"通过设置 :attr:`~django.forms.formsets.BaseFormSet.ordering_widget` 属性或覆"
"盖 :attr:`~django.forms.formsets.BaseFormSet.get_ordering_widget()`，表单集合"
"可以控制在通过 :attr:`~django.forms.formsets.BaseFormSet.can_order` 排序表单"
"时使用的小部件。"

msgid ""
"Added the :setting:`LANGUAGE_COOKIE_HTTPONLY`, :setting:"
"`LANGUAGE_COOKIE_SAMESITE`, and :setting:`LANGUAGE_COOKIE_SECURE` settings "
"to set the ``HttpOnly``, ``SameSite``, and ``Secure`` flags on language "
"cookies. The default values of these settings preserve the previous behavior."
msgstr ""
"添加了 :setting:`LANGUAGE_COOKIE_HTTPONLY`、:setting:"
"`LANGUAGE_COOKIE_SAMESITE` 和 :setting:`LANGUAGE_COOKIE_SECURE` 设置，用于在"
"语言 cookie 上设置 ``HttpOnly``、``SameSite`` 和 ``Secure`` 标志。这些设置的"
"默认值保留了以前的行为。"

msgid "Added support and translations for the Uzbek language."
msgstr "增加了对乌兹别克语的支持和翻译。"

msgid ""
"The new ``reporter_class`` parameter of :class:`~django.utils.log."
"AdminEmailHandler` allows providing an ``django.views.debug."
"ExceptionReporter`` subclass to customize the traceback text sent to site :"
"setting:`ADMINS` when :setting:`DEBUG` is ``False``."
msgstr ""
":class:`~django.utils.log.AdminEmailHandler` 的新参数 ``reporter_class`` 允许"
"提供一个 ``django.views.debug.ExceptionReporter`` 的子类，以自定义在 :"
"setting:`DEBUG` 为 ``False`` 时发送给站点 :setting:`ADMINS` 的异常回溯文本。"

msgid ""
"The new :option:`compilemessages --ignore` option allows ignoring specific "
"directories when searching for ``.po`` files to compile."
msgstr ""
"新的 :option:`compilemessages --ignore` 选项允许在搜索要编译的 ``.po`` 文件时"
"忽略特定目录。"

msgid ""
":option:`showmigrations --list` now shows the applied datetimes when ``--"
"verbosity`` is 2 and above."
msgstr ""
":option:`showmigrations --list` 在 ``--verbosity`` 为 2 及以上时现在会显示已"
"应用的日期时间。"

msgid ""
"On PostgreSQL, :djadmin:`dbshell` now supports client-side TLS certificates."
msgstr "在 PostgreSQL 上，:djadmin:`dbshell` 现在支持客户端端的 TLS 证书。"

msgid ""
":djadmin:`inspectdb` now introspects :class:`~django.db.models."
"OneToOneField` when a foreign key has a unique or primary key constraint."
msgstr ""
":djadmin:`inspectdb` 现在在外键具有唯一或主键约束时会检查 :class:`~django.db."
"models.OneToOneField`。"

msgid ""
"The new :option:`--skip-checks` option skips running system checks prior to "
"running the command."
msgstr "新的 :option:`--skip-checks` 选项在运行命令之前跳过运行系统检查。"

msgid ""
"The :option:`startapp --template` and :option:`startproject --template` "
"options now support templates stored in XZ archives (``.tar.xz``, ``.txz``) "
"and LZMA archives (``.tar.lzma``, ``.tlz``)."
msgstr ""
":option:`startapp --template` 和 :option:`startproject --template` 选项现在支"
"持存储在 XZ 存档（``.tar.xz``、``.txz``）和 LZMA 存档（``.tar.lzma``、``."
"tlz``）中的模板。"

msgid ""
"Added hash database functions :class:`~django.db.models.functions.MD5`, :"
"class:`~django.db.models.functions.SHA1`, :class:`~django.db.models."
"functions.SHA224`, :class:`~django.db.models.functions.SHA256`, :class:"
"`~django.db.models.functions.SHA384`, and :class:`~django.db.models."
"functions.SHA512`."
msgstr ""
"添加了哈希数据库函数 :class:`~django.db.models.functions.MD5`、:class:"
"`~django.db.models.functions.SHA1`、:class:`~django.db.models.functions."
"SHA224`、:class:`~django.db.models.functions.SHA256`、:class:`~django.db."
"models.functions.SHA384` 和 :class:`~django.db.models.functions.SHA512`。"

msgid "Added the :class:`~django.db.models.functions.Sign` database function."
msgstr "添加了 :class:`~django.db.models.functions.Sign` 数据库函数。"

msgid ""
"The new ``is_dst``  parameter of the :class:`~django.db.models.functions."
"Trunc` database functions determines the treatment of nonexistent and "
"ambiguous datetimes."
msgstr ""
":class:`~django.db.models.functions.Trunc` 数据库函数的新参数 ``is_dst`` 决定"
"了不存在和模糊的日期时间的处理方式。"

msgid ""
"``connection.queries`` now shows ``COPY … TO`` statements on PostgreSQL."
msgstr "``connection.queries`` 现在在 PostgreSQL 上显示 ``COPY … TO`` 语句。"

msgid ""
":class:`~django.db.models.FilePathField` now accepts a callable for ``path``."
msgstr ""
":class:`~django.db.models.FilePathField` 现在接受可调用对象作为 ``path``。"

msgid ""
"Allowed symmetrical intermediate table for self-referential :class:`~django."
"db.models.ManyToManyField`."
msgstr "允许自引用 :class:`~django.db.models.ManyToManyField` 的对称中间表。"

msgid ""
"The ``name`` attributes of :class:`~django.db.models.CheckConstraint`, :"
"class:`~django.db.models.UniqueConstraint`, and :class:`~django.db.models."
"Index` now support app label and class interpolation using the "
"``'%(app_label)s'`` and ``'%(class)s'`` placeholders."
msgstr ""
":class:`~django.db.models.CheckConstraint`、:class:`~django.db.models."
"UniqueConstraint` 和 :class:`~django.db.models.Index` 的 ``name`` 属性现在支"
"持使用 ``'%(app_label)s'`` 和 ``'%(class)s'`` 占位符进行应用标签和类插值。"

msgid ""
"The new :attr:`.Field.descriptor_class` attribute allows model fields to "
"customize the get and set behavior by overriding their :py:ref:`descriptors "
"<descriptors>`."
msgstr ""
"新的 :attr:`.Field.descriptor_class` 属性允许模型字段通过重写它们的 :py:ref:`"
"描述符 <descriptors>` 来自定义获取和设置行为。"

msgid ""
":class:`~django.db.models.Avg` and :class:`~django.db.models.Sum` now "
"support the ``distinct`` argument."
msgstr ""
":class:`~django.db.models.Avg` 和 :class:`~django.db.models.Sum` 现在支持 "
"``distinct`` 参数。"

msgid ""
"Added :class:`~django.db.models.SmallAutoField` which acts much like an :"
"class:`~django.db.models.AutoField` except that it only allows values under "
"a certain (database-dependent) limit. Values from ``1`` to ``32767`` are "
"safe in all databases supported by Django."
msgstr ""
"添加了 :class:`~django.db.models.SmallAutoField`，它的行为类似于 :class:"
"`~django.db.models.AutoField`，但它只允许在某个（与数据库相关的）限制内的值。"
"在Django支持的所有数据库中，值从 ``1`` 到 ``32767`` 都是安全的。"

msgid ""
":class:`~django.db.models.AutoField`, :class:`~django.db.models."
"BigAutoField`, and :class:`~django.db.models.SmallAutoField` now inherit "
"from ``IntegerField``, ``BigIntegerField`` and ``SmallIntegerField`` "
"respectively. System checks and validators are now also properly inherited."
msgstr ""
":class:`~django.db.models.AutoField`、:class:`~django.db.models."
"BigAutoField` 和 :class:`~django.db.models.SmallAutoField` 现在分别继承自 "
"``IntegerField``、``BigIntegerField`` 和 ``SmallIntegerField``。系统检查和验"
"证器现在也会正确继承。"

msgid ":attr:`.FileField.upload_to` now supports :class:`pathlib.Path`."
msgstr ":attr:`.FileField.upload_to` 现在支持 :class:`pathlib.Path`。"

msgid ""
":class:`~django.db.models.CheckConstraint` is now supported on MySQL 8.0.16+."
msgstr ""
":class:`~django.db.models.CheckConstraint` 现在在 MySQL 8.0.16+ 上受支持。"

msgid ""
"The new ``allows_group_by_selected_pks_on_model()`` method of ``django.db."
"backends.base.BaseDatabaseFeatures`` allows optimization of ``GROUP BY`` "
"clauses to require only the selected models' primary keys. By default, it's "
"supported only for managed models on PostgreSQL."
msgstr ""
"``django.db.backends.base.BaseDatabaseFeatures`` 的新方法 "
"``allows_group_by_selected_pks_on_model()`` 允许优化 ``GROUP BY`` 子句，只需"
"要选定的模型主键。默认情况下，它仅在 PostgreSQL 上支持托管的模型。"

msgid ""
"To enable the ``GROUP BY`` primary key-only optimization for unmanaged "
"models, you have to subclass the PostgreSQL database engine, overriding the "
"features class ``allows_group_by_selected_pks_on_model()`` method as you "
"require. See :ref:`Subclassing the built-in database backends <subclassing-"
"database-backends>` for an example."
msgstr ""
"要启用针对未托管模型的 ``GROUP BY`` 主键优化，您需要子类化 PostgreSQL 数据库"
"引擎，并根据需要覆盖 features 类的 "
"``allows_group_by_selected_pks_on_model()`` 方法。有关示例，请参阅 :ref:`子类"
"化内置数据库后端 <subclassing-database-backends>`。"

msgid ""
"Allowed :class:`~django.http.HttpResponse` to be initialized with :class:"
"`memoryview` content."
msgstr ""
"允许使用 :class:`memoryview` 内容初始化 :class:`~django.http.HttpResponse`。"

msgid ""
"For use in, for example, Django templates, :attr:`.HttpRequest.headers` now "
"allows lookups using underscores (e.g. ``user_agent``) in place of hyphens."
msgstr ""
"例如，在 Django 模板中，现在允许使用下划线（例如，``user_agent``）来查找 :"
"attr:`.HttpRequest.headers`，而不是连字符。"

msgid "Security"
msgstr "安全"

msgid ""
":setting:`X_FRAME_OPTIONS` now defaults to ``'DENY'``. In older versions, "
"the :setting:`X_FRAME_OPTIONS` setting defaults to ``'SAMEORIGIN'``. If your "
"site uses frames of itself, you will need to explicitly set "
"``X_FRAME_OPTIONS = 'SAMEORIGIN'`` for them to continue working."
msgstr ""
":setting:`X_FRAME_OPTIONS` 现在默认为 ``'DENY'``。在较旧的版本中，:setting:"
"`X_FRAME_OPTIONS` 设置默认为 ``'SAMEORIGIN'``。如果您的站点使用自身的框架，您"
"将需要显式设置 ``X_FRAME_OPTIONS = 'SAMEORIGIN'``，以便它们继续正常工作。"

msgid ""
":setting:`SECURE_CONTENT_TYPE_NOSNIFF` now defaults to ``True``. With this "
"enabled, :class:`~django.middleware.security.SecurityMiddleware` sets the :"
"ref:`x-content-type-options` header on all responses that do not already "
"have it."
msgstr ""
":setting:`SECURE_CONTENT_TYPE_NOSNIFF` 现在默认为 ``True``。启用此选项后，:"
"class:`~django.middleware.security.SecurityMiddleware` 会在所有尚未设置该标头"
"的响应上设置 :ref:`x-content-type-options` 标头。"

msgid ""
":class:`~django.middleware.security.SecurityMiddleware` can now send the :"
"ref:`Referrer-Policy <referrer-policy>` header."
msgstr ""
":class:`~django.middleware.security.SecurityMiddleware` 现在可以发送 :ref:"
"`Referrer-Policy <referrer-policy>` 标头。"

msgid ""
"The new test :class:`~django.test.Client` argument "
"``raise_request_exception`` allows controlling whether or not exceptions "
"raised during the request should also be raised in the test. The value "
"defaults to ``True`` for backwards compatibility. If it is ``False`` and an "
"exception occurs, the test client will return a 500 response with the "
"attribute :attr:`~django.test.Response.exc_info`, a tuple providing "
"information of the exception that occurred."
msgstr ""
"新的测试 :class:`~django.test.Client` 参数 ``raise_request_exception`` 允许控"
"制请求期间引发的异常是否也应该在测试中引发。默认情况下，该值为 ``True``，以保"
"持向后兼容性。如果它为 ``False`` 并且发生异常，测试客户端将返回一个带有属性 :"
"attr:`~django.test.Response.exc_info` 的 500 响应，该属性是一个元组，提供了发"
"生的异常信息。"

msgid ""
"Tests and test cases to run can be selected by test name pattern using the "
"new :option:`test -k` option."
msgstr ""
"可以使用新的 :option:`test -k` 选项通过测试名称模式选择要运行的测试和测试用"
"例。"

msgid ""
"HTML comparison, as used by :meth:`~django.test.SimpleTestCase."
"assertHTMLEqual`, now treats text, character references, and entity "
"references that refer to the same character as equivalent."
msgstr ""
"HTML 比较，如 :meth:`~django.test.SimpleTestCase.assertHTMLEqual` 所使用的，"
"现在将相同字符引用的文本、字符引用和实体引用视为等效。"

msgid ""
":class:`~django.test.runner.DiscoverRunner` can now spawn a debugger at each "
"error or failure using the :option:`test --pdb` option."
msgstr ""

msgid "Backwards incompatible changes in 3.0"
msgstr "3.0 版本中的不向后兼容的更改。"

msgid "``Model.save()`` when providing a default for the primary key"
msgstr "在提供主键默认值时，使用 ``Model.save()``"

msgid ""
":meth:`.Model.save` no longer attempts to find a row when saving a new "
"``Model`` instance and a default value for the primary key is provided, and "
"always performs a single ``INSERT`` query. In older Django versions, ``Model."
"save()`` performed either an ``INSERT`` or an ``UPDATE`` based on whether or "
"not the row exists."
msgstr ""
":meth:`.Model.save` 在保存新的 ``Model`` 实例并提供主键的默认值时不再尝试查找"
"行，而总是执行单个 ``INSERT`` 查询。在较早的 Django 版本中，``Model.save()`` "
"根据行是否存在执行了 ``INSERT`` 或 ``UPDATE``。"

msgid ""
"This makes calling ``Model.save()`` while providing a default primary key "
"value equivalent to passing :ref:`force_insert=True <ref-models-force-"
"insert>` to model's ``save()``. Attempts to use a new ``Model`` instance to "
"update an existing row will result in an ``IntegrityError``."
msgstr ""
"这使得在提供默认主键值的情况下调用 ``Model.save()`` 等效于将 :ref:"
"`force_insert=True <ref-models-force-insert>` 传递给模型的 ``save()``。尝试使"
"用新的 ``Model`` 实例更新现有行将导致 ``IntegrityError``。"

msgid ""
"In order to update an existing model for a specific primary key value, use "
"the :meth:`~django.db.models.query.QuerySet.update_or_create` method or "
"``QuerySet.filter(pk=…).update(…)`` instead. For example:"
msgstr ""
"要更新特定主键值的现有模型，请使用 :meth:`~django.db.models.query.QuerySet."
"update_or_create` 方法或 ``QuerySet.filter(pk=…).update(…)``。例如："

msgid ""
"The second argument of ``DatabaseIntrospection.get_geometry_type()`` is now "
"the row description instead of the column name."
msgstr ""
"``DatabaseIntrospection.get_geometry_type()`` 的第二个参数现在是行描述而不是"
"列名。"

msgid "``DatabaseIntrospection.get_field_type()`` may no longer return tuples."
msgstr "``DatabaseIntrospection.get_field_type()`` 可能不再返回元组。"

msgid ""
"If the database can create foreign keys in the same SQL statement that adds "
"a field, add ``SchemaEditor.sql_create_column_inline_fk`` with the "
"appropriate SQL; otherwise, set ``DatabaseFeatures.can_create_inline_fk = "
"False``."
msgstr ""
"如果数据库可以在添加字段的同一 SQL 语句中创建外键，请添加适当的 SQL 到 "
"``SchemaEditor.sql_create_column_inline_fk``；否则，请设置 "
"``DatabaseFeatures.can_create_inline_fk = False``。"

msgid ""
"``DatabaseFeatures.can_return_id_from_insert`` and "
"``can_return_ids_from_bulk_insert`` are renamed to "
"``can_return_columns_from_insert`` and ``can_return_rows_from_bulk_insert``."
msgstr ""
"``DatabaseFeatures.can_return_id_from_insert`` 和 "
"``can_return_ids_from_bulk_insert`` 已更名为 "
"``can_return_columns_from_insert`` 和 ``can_return_rows_from_bulk_insert``。"

msgid ""
"Database functions now handle :class:`datetime.timezone` formats when "
"created using :class:`datetime.timedelta` instances (e.g. "
"``timezone(timedelta(hours=5))``, which would output ``'UTC+05:00'``). Third-"
"party backends should handle this format when preparing :class:`~django.db."
"models.DateTimeField` in ``datetime_cast_date_sql()``, "
"``datetime_extract_sql()``, etc."
msgstr ""
"数据库函数现在在使用 :class:`datetime.timedelta` 实例创建时处理 :class:"
"`datetime.timezone` 格式（例如 ``timezone(timedelta(hours=5))``，这将输出 "
"``'UTC+05:00'``）。第三方后端应在准备 :class:`~django.db.models."
"DateTimeField` 的 ``datetime_cast_date_sql()``、``datetime_extract_sql()`` 等"
"时处理这种格式。"

msgid ""
"Entries for ``AutoField``, ``BigAutoField``, and ``SmallAutoField`` are "
"added to  ``DatabaseOperations.integer_field_ranges`` to support the integer "
"range validators on these field types. Third-party backends may need to "
"customize the default entries."
msgstr ""
"为了支持这些字段类型上的整数范围验证器，已经将 ``AutoField``、"
"``BigAutoField`` 和 ``SmallAutoField`` 的条目添加到 ``DatabaseOperations."
"integer_field_ranges`` 中。第三方后端可能需要自定义默认条目。"

msgid ""
"``DatabaseOperations.fetch_returned_insert_id()`` is replaced by "
"``fetch_returned_insert_columns()`` which returns a list of values returned "
"by the ``INSERT … RETURNING`` statement, instead of a single value."
msgstr ""
"``DatabaseOperations.fetch_returned_insert_id()`` 已被替换为 "
"``fetch_returned_insert_columns()``，它返回由 ``INSERT … RETURNING`` 语句返回"
"的值列表，而不是单个值。"

msgid ""
"``DatabaseOperations.return_insert_id()`` is replaced by "
"``return_insert_columns()`` that accepts a ``fields`` argument, which is an "
"iterable of fields to be returned after insert. Usually this is only the "
"auto-generated primary key."
msgstr ""
"``DatabaseOperations.return_insert_id()`` 已被替换为 "
"``return_insert_columns()``，它接受一个 ``fields`` 参数，该参数是要在插入后返"
"回的字段的可迭代对象。通常这只是自动生成的主键。"

msgid ""
"Admin's model history change messages now prefers more readable field labels "
"instead of field names."
msgstr ""
"管理者模型历史更改消息现在更偏向于使用可读性更高的字段标签，而不是字段名称。"

msgid "Support for PostGIS 2.1 is removed."
msgstr "不再支持 PostGIS 2.1 。"

msgid "Support for SpatiaLite 4.1 and 4.2 is removed."
msgstr "不再支持 SpatiaLite 4.1 和 4.2 。"

msgid "Support for GDAL 1.11 and GEOS 3.4 is removed."
msgstr "不再支持 GDAL 1.11 和 GEOS 3.4 。"

msgid "Dropped support for PostgreSQL 9.4"
msgstr "不再支持 PostgreSQL 9.4 。"

msgid ""
"Upstream support for PostgreSQL 9.4 ends in December 2019. Django 3.0 "
"supports PostgreSQL 9.5 and higher."
msgstr ""
"上游对于 PostgreSQL 9.4 的支持在 2019 年 12 月结束。 Django 3.0 支持 "
"PostgreSQL 9.5 及更高版本。"

msgid "Dropped support for Oracle 12.1"
msgstr "不再支持 Oracle 12.1 。"

msgid ""
"Upstream support for Oracle 12.1 ends in July 2021. Django 2.2 will be "
"supported until April 2022. Django 3.0 officially supports Oracle 12.2 and "
"18c."
msgstr ""
"Oracle 12.1 的上游支持将于 2021 年 7 月结束。 Django 2.2 将支持至 2022 年 4 "
"月。 Django 3.0 正式支持 Oracle 12.2 和 18c 版本。"

msgid "Removed private Python 2 compatibility APIs"
msgstr "移除了私有的 Python 2 兼容 API 。"

msgid ""
"While Python 2 support was removed in Django 2.0, some private APIs weren't "
"removed from Django so that third party apps could continue using them until "
"the Python 2 end-of-life."
msgstr ""
"尽管在 Django 2.0 中移除了对 Python 2 的支持，但某些私有 API 未被移除，以便第"
"三方应用程序在 Python 2 生命周期结束之前仍可继续使用它们。"

msgid ""
"Since we expect apps to drop Python 2 compatibility when adding support for "
"Django 3.0, we're removing these APIs at this time."
msgstr ""
"由于我们预计在添加对 Django 3.0 的支持时，应用程序将放弃对 Python 2 的兼容"
"性，因此我们此时正在移除这些 API 。"

msgid ""
"``django.test.utils.str_prefix()`` - Strings don't have 'u' prefixes in "
"Python 3."
msgstr ""
"``django.test.utils.str_prefix()`` - 在 Python 3 中，字符串不再具有 'u' 前"
"缀。"

msgid ""
"``django.test.utils.patch_logger()`` - Use :meth:`unittest.TestCase."
"assertLogs` instead."
msgstr ""
"``django.test.utils.patch_logger()`` - 请改用 :meth:`unittest.TestCase."
"assertLogs`。"

msgid ""
"``django.utils.lru_cache.lru_cache()`` - Alias of :func:`functools."
"lru_cache`."
msgstr ""
"``django.utils.lru_cache.lru_cache()`` - 是 :func:`functools.lru_cache` 的别"
"名。"

msgid ""
"``django.utils.decorators.available_attrs()`` - This function returns "
"``functools.WRAPPER_ASSIGNMENTS``."
msgstr ""
"``django.utils.decorators.available_attrs()`` - 此函数返回 ``functools."
"WRAPPER_ASSIGNMENTS``。"

msgid ""
"``django.utils.decorators.ContextDecorator`` - Alias of :class:`contextlib."
"ContextDecorator`."
msgstr ""
"``django.utils.decorators.ContextDecorator`` - 是 :class:`contextlib."
"ContextDecorator` 的别名。"

msgid "``django.utils._os.abspathu()`` - Alias of :func:`os.path.abspath`."
msgstr "``django.utils._os.abspathu()`` - 是 :func:`os.path.abspath` 的别名。"

msgid ""
"``django.utils._os.upath()`` and ``npath()`` - These functions do nothing on "
"Python 3."
msgstr ""
"``django.utils._os.upath()`` 和 ``npath()`` - 在 Python 3 上不执行任何操作。"

msgid ""
"``django.utils.six`` - Remove usage of this vendored library or switch to :"
"pypi:`six`."
msgstr "``django.utils.six`` - 移除对此库的使用或切换到 :pypi:`six`。"

msgid ""
"``django.utils.encoding.python_2_unicode_compatible()`` - Alias of ``six."
"python_2_unicode_compatible()``."
msgstr ""
"``django.utils.encoding.python_2_unicode_compatible()`` - 是 ``six."
"python_2_unicode_compatible()`` 的别名。"

msgid ""
"``django.utils.functional.curry()`` - Use :func:`functools.partial` or :"
"class:`functools.partialmethod`. See :commit:"
"`5b1c389603a353625ae1603ba345147356336afb`."
msgstr ""
"``django.utils.functional.curry()`` - 请使用 :func:`functools.partial` 或 :"
"class:`functools.partialmethod`。请参阅 :commit:"
"`5b1c389603a353625ae1603ba345147356336afb`。"

msgid "``django.utils.safestring.SafeBytes`` - Unused since Django 2.0."
msgstr "``django.utils.safestring.SafeBytes`` - 自 Django 2.0 起未使用。"

msgid "New default value for the ``FILE_UPLOAD_PERMISSIONS`` setting"
msgstr "``FILE_UPLOAD_PERMISSIONS`` 设置的新默认值。"

msgid ""
"In older versions, the :setting:`FILE_UPLOAD_PERMISSIONS` setting defaults "
"to ``None``. With the default :setting:`FILE_UPLOAD_HANDLERS`, this results "
"in uploaded files having different permissions depending on their size and "
"which upload handler is used."
msgstr ""
"在较早的版本中，:setting:`FILE_UPLOAD_PERMISSIONS` 设置的默认值为 ``None``。"
"在默认的:setting:`FILE_UPLOAD_HANDLERS` 的情况下，这导致上传的文件根据其大小"
"和使用的上传处理程序而具有不同的权限。"

msgid ""
"``FILE_UPLOAD_PERMISSIONS`` now defaults to ``0o644`` to avoid this "
"inconsistency."
msgstr ""
"现在，默认情况下，``FILE_UPLOAD_PERMISSIONS`` 默认为 ``0o644``，以避免这种不"
"一致性。"

msgid "New default values for security settings"
msgstr "安全设置的新默认值。"

msgid ""
"To make Django projects more secure by default, some security settings now "
"have more secure default values:"
msgstr ""
"为了使 Django 项目在默认情况下更加安全，一些安全设置现在具有更安全的默认值："

msgid ":setting:`X_FRAME_OPTIONS` now defaults to ``'DENY'``."
msgstr ":setting:`X_FRAME_OPTIONS` 现在默认为 ``'DENY'``。"

msgid ":setting:`SECURE_CONTENT_TYPE_NOSNIFF` now defaults to ``True``."
msgstr ":setting:`SECURE_CONTENT_TYPE_NOSNIFF` 现在默认为 ``True``。"

msgid ""
"See the *What's New* :ref:`Security section <whats-new-security-3.0>` above "
"for more details on these changes."
msgstr ""
"有关这些更改的更多详细信息，请参阅上面的 *What's New* :ref:`Security section "
"<whats-new-security-3.0>`。"

msgid ""
"``ContentType.__str__()`` now includes the model's ``app_label`` to "
"disambiguate models with the same name in different apps."
msgstr ""
"``ContentType.__str__()`` 现在包括模型的 ``app_label`` 以消除在不同应用程序中"
"具有相同名称的模型的歧义。"

msgid ""
"Because accessing the language in the session rather than in the cookie is "
"deprecated, ``LocaleMiddleware`` no longer looks for the user's language in "
"the session and :func:`django.contrib.auth.logout` no longer preserves the "
"session's language after logout."
msgstr ""
"由于已弃用在 cookie 中而不是会话中访问语言，因此 ``LocaleMiddleware`` 不再在"
"会话中查找用户的语言，而 :func:`django.contrib.auth.logout` 在注销后不再保留"
"会话的语言。"

msgid ""
":func:`django.utils.html.escape` now uses :func:`html.escape` to escape "
"HTML. This converts ``'`` to ``&#x27;`` instead of the previous equivalent "
"decimal code ``&#39;``."
msgstr ""
":func:`django.utils.html.escape` 现在使用 :func:`html.escape` 来转义 HTML。这"
"会将 ``'`` 转换为 ``&#x27;``，而不是以前的等效十进制代码 ``&#39;``。"

msgid ""
"The ``django-admin test -k`` option now works as the :option:`unittest -"
"k<unittest.-k>` option rather than as a shortcut for ``--keepdb``."
msgstr ""
"``django-admin test -k`` 选项现在与 :option:`unittest -k<unittest.-k>` 选项一"
"样工作，而不再作为 ``--keepdb`` 的快捷方式。"

msgid "Support for ``pywatchman`` < 1.2.0 is removed."
msgstr "对于 ``pywatchman`` 版本低于 1.2.0 的支持已被移除。"

msgid ""
":func:`~django.utils.http.urlencode` now encodes iterable values as they are "
"when ``doseq=False``, rather than iterating them, bringing it into line with "
"the standard library :func:`urllib.parse.urlencode` function."
msgstr ""
"在 ``doseq=False`` 时，:func:`~django.utils.http.urlencode` 现在会像标准库"
"的 :func:`urllib.parse.urlencode` 函数一样，将可迭代的值按原样编码，而不是迭"
"代它们。"

msgid ""
"``intword`` template filter now translates ``1.0`` as a singular phrase and "
"all other numeric values as plural. This may be incorrect for some languages."
msgstr ""
"``intword`` 模板过滤器现在将 ``1.0`` 翻译为单数短语，将所有其他数值视为复数。"
"这对某些语言可能不正确。"

msgid ""
"Assigning a value to a model's :class:`~django.db.models.ForeignKey` or :"
"class:`~django.db.models.OneToOneField` ``'_id'`` attribute now unsets the "
"corresponding field. Accessing the field afterward will result in a query."
msgstr ""
"给模型的 :class:`~django.db.models.ForeignKey` 或 :class:`~django.db.models."
"OneToOneField` 的 ``'_id'`` 属性分配一个值现在会取消对应字段的设置。之后访问"
"该字段将导致查询。"

msgid ""
":func:`~django.utils.cache.patch_vary_headers` now handles an asterisk "
"``'*'`` according to :rfc:`7231#section-7.1.4`, i.e. if a list of header "
"field names contains an asterisk, then the ``Vary`` header will consist of a "
"single asterisk ``'*'``."
msgstr ""
":func:`~django.utils.cache.patch_vary_headers` 现在按照 :rfc:"
"`7231#section-7.1.4` 处理星号 ``'*'``，即如果标头字段名称列表包含星号，则 "
"``Vary`` 标头将包含单个星号 ``'*'``。"

msgid ""
"On MySQL 8.0.16+, ``PositiveIntegerField`` and ``PositiveSmallIntegerField`` "
"now include a check constraint to prevent negative values in the database."
msgstr ""
"在 MySQL 8.0.16+ 上，``PositiveIntegerField`` 和 "
"``PositiveSmallIntegerField`` 现在包括一个检查约束，以防止数据库中出现负值。"

msgid ""
"``alias=None`` is added to the signature of :meth:`.Expression."
"get_group_by_cols`."
msgstr ""
"``alias=None`` 已添加到 :meth:`.Expression.get_group_by_cols` 的签名中。"

msgid ""
"``RegexPattern``, used by :func:`~django.urls.re_path`, no longer returns "
"keyword arguments with ``None`` values to be passed to the view for the "
"optional named groups that are missing."
msgstr ""
"``RegexPattern``，由 :func:`~django.urls.re_path` 使用，不再返回带有 "
"``None`` 值的关键字参数，以便传递给视图，用于缺少的可选命名组。"

msgid "Features deprecated in 3.0"
msgstr "在 3.0 中被废弃的功能"

msgid "``django.utils.encoding.force_text()`` and ``smart_text()``"
msgstr "``django.utils.encoding.force_text()`` 和 ``smart_text()``"

msgid ""
"The ``smart_text()`` and ``force_text()`` aliases (since Django 2.0) of "
"``smart_str()`` and ``force_str()`` are deprecated. Ignore this deprecation "
"if your code supports Python 2 as the behavior of ``smart_str()`` and "
"``force_str()`` is different there."
msgstr ""
"``smart_text()`` 和 ``force_text()`` 别名（自 Django 2.0 起）的 "
"``smart_str()`` 和 ``force_str()`` 已被弃用。如果您的代码支持 Python 2，请忽"
"略此弃用，因为在 Python 2 中，``smart_str()`` 和 ``force_str()`` 的行为是不同"
"的。"

msgid ""
"``django.utils.http.urlquote()``, ``urlquote_plus()``, ``urlunquote()``, and "
"``urlunquote_plus()`` are deprecated in favor of the functions that they're "
"aliases for: :func:`urllib.parse.quote`, :func:`~urllib.parse.quote_plus`, :"
"func:`~urllib.parse.unquote`, and :func:`~urllib.parse.unquote_plus`."
msgstr ""
"``django.utils.http.urlquote()``, ``urlquote_plus()``, ``urlunquote()``, 和 "
"``urlunquote_plus()`` 已被弃用，建议使用它们的别名函数：:func:`urllib.parse."
"quote`, :func:`~urllib.parse.quote_plus`, :func:`~urllib.parse.unquote`, 和 :"
"func:`~urllib.parse.unquote_plus`。"

msgid ""
"``django.utils.translation.ugettext()``, ``ugettext_lazy()``, "
"``ugettext_noop()``, ``ungettext()``, and ``ungettext_lazy()`` are "
"deprecated in favor of the functions that they're aliases for: :func:`django."
"utils.translation.gettext`, :func:`~django.utils.translation.gettext_lazy`, :"
"func:`~django.utils.translation.gettext_noop`, :func:`~django.utils."
"translation.ngettext`, and :func:`~django.utils.translation.ngettext_lazy`."
msgstr ""
"``django.utils.translation.ugettext()``, ``ugettext_lazy()``, "
"``ugettext_noop()``, ``ungettext()``, 和 ``ungettext_lazy()`` 已被弃用，建议"
"使用它们的别名函数：:func:`django.utils.translation.gettext`, :func:`~django."
"utils.translation.gettext_lazy`, :func:`~django.utils.translation."
"gettext_noop`, :func:`~django.utils.translation.ngettext`, 和 :func:`~django."
"utils.translation.ngettext_lazy`。"

msgid ""
"To limit creation of sessions and hence favor some caching strategies, :func:"
"`django.views.i18n.set_language` will stop setting the user's language in "
"the session in Django 4.0. Since Django 2.1, the language is always stored "
"in the :setting:`LANGUAGE_COOKIE_NAME` cookie."
msgstr ""
"为了限制会话的创建，从而支持某些缓存策略，在 Django 4.0 中，:func:`django."
"views.i18n.set_language` 将停止在会话中设置用户的语言。自 Django 2.1 起，语言"
"始终存储在 :setting:`LANGUAGE_COOKIE_NAME` cookie 中。"

msgid ""
"``django.utils.text.unescape_entities()`` is deprecated in favor of :func:"
"`html.unescape`. Note that unlike ``unescape_entities()``, ``html."
"unescape()`` evaluates lazy strings immediately."
msgstr ""
"``django.utils.text.unescape_entities()`` 已被弃用，建议使用 :func:`html."
"unescape`。请注意，与 ``unescape_entities()`` 不同，``html.unescape()`` 立即"
"评估延迟字符串。"

msgid ""
"To avoid possible confusion as to effective scope, the private internal "
"utility ``is_safe_url()`` is renamed to "
"``url_has_allowed_host_and_scheme()``. That a URL has an allowed host and "
"scheme doesn't in general imply that it's \"safe\". It may still be quoted "
"incorrectly, for example. Ensure to also use :func:`~django.utils.encoding."
"iri_to_uri` on the path component of untrusted URLs."
msgstr ""
"为了避免对有效范围的可能混淆，私有的内部实用程序 ``is_safe_url()`` 被重命名"
"为 ``url_has_allowed_host_and_scheme()``。通常情况下，一个 URL 具有允许的主机"
"和方案并不意味着它是\"安全的\"。例如，它可能仍然被引用不正确。请确保在不受信"
"任的 URL 的路径组件上也使用 :func:`~django.utils.encoding.iri_to_uri`。"

msgid "Features removed in 3.0"
msgstr "在 3.0 版本中删除的功能。"

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 3.0."
msgstr "这些功能已经完成了其弃用周期，并在 Django 3.0 中被移除。"

msgid ""
"See :ref:`deprecated-features-2.0` for details on these changes, including "
"how to remove usage of these features."
msgstr ""
"有关这些更改的详细信息，包括如何移除对这些功能的使用，请参阅 :ref:"
"`deprecated-features-2.0`。"

msgid "The ``django.db.backends.postgresql_psycopg2`` module is removed."
msgstr "``django.db.backends.postgresql_psycopg2`` 模块已被移除。"

msgid "``django.shortcuts.render_to_response()`` is removed."
msgstr "``django.shortcuts.render_to_response()`` 已被移除。"

msgid "The ``DEFAULT_CONTENT_TYPE`` setting is removed."
msgstr "``DEFAULT_CONTENT_TYPE`` 设置已被移除。"

msgid "``HttpRequest.xreadlines()`` is removed."
msgstr "``HttpRequest.xreadlines()`` 已被移除。"

msgid ""
"Support for the ``context`` argument of ``Field.from_db_value()`` and "
"``Expression.convert_value()`` is removed."
msgstr ""
"``Field.from_db_value()`` 和 ``Expression.convert_value()`` 的 ``context`` 参"
"数支持已被移除。"

msgid ""
"The ``field_name`` keyword argument of ``QuerySet.earliest()`` and "
"``latest()`` is removed."
msgstr ""
"``QuerySet.earliest()`` 和 ``latest()`` 的 ``field_name`` 关键参数已被移除。"

msgid ""
"See :ref:`deprecated-features-2.1` for details on these changes, including "
"how to remove usage of these features."
msgstr ""
"请参阅 :ref:`deprecated-features-2.1` 以获取有关这些更改的详细信息，包括如何"
"移除对这些功能的使用。"

msgid "The ``ForceRHR`` GIS function is removed."
msgstr "``ForceRHR`` GIS 函数已被移除。"

msgid "``django.utils.http.cookie_date()`` is removed."
msgstr "``django.utils.http.cookie_date()`` 已被移除。"

msgid ""
"The ``staticfiles`` and ``admin_static`` template tag libraries are removed."
msgstr "``staticfiles`` 和 ``admin_static`` 模板标签库已被移除。"

msgid ""
"``django.contrib.staticfiles.templatetags.staticfiles.static()`` is removed."
msgstr ""
"``django.contrib.staticfiles.templatetags.staticfiles.static()`` 已被移除。"

msgid "Django 3.0.1 release notes"
msgstr "Django 3.0.1 版本发行说明"

msgid "Django 3.0.1 fixes a security issue and several bugs in 3.0."
msgstr "Django 3.0.1 修复了 3.0 版本中的一个安全问题和几个错误。"

msgid ""
"Fixed a regression in Django 3.0 by restoring the ability to use Django "
"inside Jupyter and other environments that force an async context, by adding "
"an option to disable :ref:`async-safety` mechanism with :envvar:"
"`DJANGO_ALLOW_ASYNC_UNSAFE` environment variable (:ticket:`31056`)."
msgstr ""
"通过在环境变量 :envvar:`DJANGO_ALLOW_ASYNC_UNSAFE` 中添加选项，恢复了在 "
"Django 3.0 中修复的一个回归问题，该问题允许在 Jupyter 和其他强制启用异步上下"
"文的环境中使用 Django，以禁用 :ref:`async-safety` 机制。 (:ticket:`31056`)。"

msgid ""
"Fixed a regression in Django 3.0 where ``RegexPattern``, used by :func:"
"`~django.urls.re_path`, returned positional arguments to be passed to the "
"view when all optional named groups were missing (:ticket:`31061`)."
msgstr ""
"在 Django 3.0 中修复了一个回归问题，其中 ``RegexPattern``，被 :func:`~django."
"urls.re_path` 使用，返回了要传递给视图的位置参数，当所有可选的命名分组都缺失"
"时 (:ticket:`31061`)。"

msgid ""
"Reallowed, following a regression in Django 3.0, :class:`~django.db.models."
"expressions.Window` expressions to be used in conditions outside of queryset "
"filters, e.g. in :class:`~django.db.models.expressions.When` conditions (:"
"ticket:`31060`)."
msgstr ""
"在 Django 3.0 中修复了一个回归问题，现在可以重新允许在查询集过滤器之外的条件"
"中使用 :class:`~django.db.models.expressions.Window` 表达式，例如在 :class:"
"`~django.db.models.expressions.When` 条件中 (:ticket:`31060`)。"

msgid "Django 3.0.10 release notes"
msgstr "Django 3.0.10 版本发行说明"

msgid ""
"Django 3.0.10 fixes two security issues and two data loss bugs in 3.0.9."
msgstr "Django 3.0.10 修复了 3.0.9 版本中的两个安全问题和两个数据丢失错误。"

msgid "Django 3.0.11 release notes"
msgstr "Django 3.0.11 版本发行说明"

msgid ""
"Django 3.0.11 fixes a regression in 3.0.7 and adds compatibility with Python "
"3.9."
msgstr ""
"Django 3.0.11 修复了 3.0.7 版本中的回归问题，并添加了与 Python 3.9 的兼容性。"

msgid ""
"Fixed a regression in Django 3.0.7 that didn't use ``Subquery()`` aliases in "
"the ``GROUP BY`` clause (:ticket:`32152`)."
msgstr ""
"修正了 Django 3.0.7 中一个在 ``GROUP BY`` 子句中没有使用 ``Subquery()`` 别名"
"的缺陷（:ticket:`32152`）。"

msgid "Django 3.0.12 release notes"
msgstr "Django 3.0.12 版本发行说明"

msgid "Django 3.0.12 fixes a security issue with severity \"low\" in 3.0.11."
msgstr "Django 3.0.12 修复了 3.0.11 版本中一个严重程度为\"低\"的安全问题。"

msgid "Django 3.0.13 release notes"
msgstr "Django 3.0.13 版本发行说明"

msgid "Django 3.0.13 fixes a security issue in 3.0.12."
msgstr "Django 3.0.13 修复了 3.0.12 版本中的一个安全问题。"

msgid "Django 3.0.14 release notes"
msgstr "Django 3.0.14 版本发行说明"

msgid "Django 3.0.14 fixes a security issue with severity \"low\" in 3.0.13."
msgstr "Django 3.0.14 修复了 3.0.13 中一个严重性为 “低” 的安全问题。"

msgid "Django 3.0.2 release notes"
msgstr "Django 3.0.2 版本发行说明"

msgid "*January 2, 2020*"
msgstr "*2020 年 1 月 2 日*"

msgid "Django 3.0.2 fixes several bugs in 3.0.1."
msgstr "Django 3.0.2 修复了 3.0.1 版本中的多个错误。"

msgid ""
"Fixed a regression in Django 3.0 that didn't include columns referenced by a "
"``Subquery()`` in the ``GROUP BY`` clause (:ticket:`31094`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题没有在 ``GROUP BY`` 子句中包括由 "
"``Subquery()`` 引用的列 (:ticket:`31094`)。"

msgid ""
"Fixed a regression in Django 3.0 where ``QuerySet.exists()`` crashed if a "
"queryset contained an aggregation over a ``Subquery()`` (:ticket:`31109`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致如果查询集中包含了对 "
"``Subquery()`` 进行聚合操作，那么 ``QuerySet.exists()`` 会崩溃 (:ticket:"
"`31109`)。"

msgid ""
"Fixed a regression in Django 3.0 that caused a migration crash on PostgreSQL "
"10+ when adding a foreign key and changing data in the same migration (:"
"ticket:`31106`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致在同一迁移中添加外键并更改数据"
"时，在 PostgreSQL 10+ 上发生迁移崩溃 (:ticket:`31106`)。"

msgid ""
"Fixed a regression in Django 3.0 where loading fixtures crashed for models "
"defining a :attr:`~django.db.models.Field.default` for the primary key (:"
"ticket:`31071`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致为定义主键的模型加载数据时崩"
"溃，这些模型为主键定义了 :attr:`~django.db.models.Field.default` (:ticket:"
"`31071`)。"

msgid "Django 3.0.3 release notes"
msgstr "Django 3.0.3 版本发行说明"

msgid "Django 3.0.3 fixes a security issue and several bugs in 3.0.2."
msgstr "Django 3.0.3 修复了 3.0.2 版本中的一个安全问题和多个错误。"

msgid ""
"Fixed a regression in Django 3.0 that caused a crash when subtracting "
"``DateField``, ``DateTimeField``, or ``TimeField`` from a ``Subquery()`` "
"annotation (:ticket:`31133`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致在从 ``Subquery()`` 注释中减去 "
"``DateField``、``DateTimeField`` 或 ``TimeField`` 时崩溃 (:ticket:`31133`)。"

msgid ""
"Fixed a regression in Django 3.0 where ``QuerySet.values()`` and "
"``values_list()`` crashed if a queryset contained an aggregation and "
"``Exists()`` annotation (:ticket:`31136`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致如果查询集中包含聚合和 "
"``Exists()`` 注释，那么 ``QuerySet.values()`` 和 ``values_list()`` 会崩溃 (:"
"ticket:`31136`)。"

msgid ""
"Relaxed the system check added in Django 3.0 to reallow use of a sublanguage "
"in the :setting:`LANGUAGE_CODE` setting, when a base language is available "
"in Django but the sublanguage is not (:ticket:`31141`)."
msgstr ""
"在 Django 3.0 中放宽了系统检查，允许在 :setting:`LANGUAGE_CODE` 设置中使用子"
"语言，当 Django 中有基本语言可用但子语言不可用时 (:ticket:`31141`)。"

msgid ""
"Added support for using enumeration types ``TextChoices``, "
"``IntegerChoices``, and ``Choices`` in templates (:ticket:`31154`)."
msgstr ""
"添加了在模板中使用枚举类型 ``TextChoices``、``IntegerChoices`` 和 "
"``Choices`` 的支持 (:ticket:`31154`)。"

msgid ""
"Fixed a system check to ensure the ``max_length`` attribute fits the longest "
"choice, when a named group contains only non-string values (:ticket:`31155`)."
msgstr ""
"修复了一个系统检查，以确保当一个命名组只包含非字符串值时，``max_length`` 属性"
"适合最长的选择 (:ticket:`31155`)。"

msgid ""
"Fixed a regression in Django 2.2 that caused a crash of :class:`~django."
"contrib.postgres.aggregates.ArrayAgg` and :class:`~django.contrib.postgres."
"aggregates.StringAgg` with ``filter`` argument when used in a ``Subquery`` (:"
"ticket:`31097`)."
msgstr ""
"修复了 Django 2.2 中的一个回归问题，当在 ``Subquery`` 中使用带有 ``filter`` "
"参数的 :class:`~django.contrib.postgres.aggregates.ArrayAgg` 和 :class:"
"`~django.contrib.postgres.aggregates.StringAgg` 时导致崩溃 (:ticket:"
"`31097`)。"

msgid ""
"Fixed a regression in Django 2.2.7 that caused :meth:`~django.db.models."
"Model.get_FOO_display` to work incorrectly when overriding inherited choices "
"(:ticket:`31124`)."
msgstr ""
"修复了 Django 2.2.7 中的一个回归问题，当覆盖继承的选择项时，导致 :meth:"
"`~django.db.models.Model.get_FOO_display` 不正确工作 (:ticket:`31124`)。"

msgid ""
"Fixed a regression in Django 3.0 that caused a crash of ``QuerySet."
"prefetch_related()`` for ``GenericForeignKey`` with a custom ``ContentType`` "
"foreign key (:ticket:`31190`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致在具有自定义 ``ContentType`` 外"
"键的 ``GenericForeignKey`` 上使用 ``QuerySet.prefetch_related()`` 时崩溃 (:"
"ticket:`31190`)。"

msgid "Django 3.0.4 release notes"
msgstr "Django 3.0.4 版本发行说明"

msgid "Django 3.0.4 fixes a security issue and several bugs in 3.0.3."
msgstr "Django 3.0.4 修复了 3.0.3 版本中的一个安全问题和多个错误。"

msgid ""
"Fixed a data loss possibility when using caching from async code (:ticket:"
"`31253`)."
msgstr "修复了在异步代码中使用缓存时可能导致数据丢失的问题 (:ticket:`31253`)。"

msgid ""
"Fixed a regression in Django 3.0 that caused a file response using a "
"temporary file to be closed incorrectly (:ticket:`31240`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致使用临时文件的文件响应被不正确"
"地关闭 (:ticket:`31240`)。"

msgid ""
"Fixed a regression in Django 3.0 that caused misplacing parameters in logged "
"SQL queries on Oracle (:ticket:`31271`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致在 Oracle 上记录的 SQL 查询中参"
"数位置不正确 (:ticket:`31271`)。"

msgid ""
"Fixed a regression in Django 3.0.3 that caused misplacing parameters of SQL "
"queries when subtracting ``DateField`` or ``DateTimeField`` expressions on "
"MySQL (:ticket:`31312`)."
msgstr ""
"修复了 Django 3.0.3 中的一个回归问题，该问题导致在 MySQL 上在减去 "
"``DateField`` 或 ``DateTimeField`` 表达式时，SQL 查询的参数位置不正确 (:"
"ticket:`31312`)。"

msgid ""
"Fixed a regression in Django 3.0 that didn't include subqueries spanning "
"multivalued relations in the ``GROUP BY`` clause (:ticket:`31150`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致在 ``GROUP BY`` 子句中未包括跨"
"多值关系的子查询 (:ticket:`31150`)。"

msgid "Django 3.0.5 release notes"
msgstr "Django 3.0.5 版本发行说明"

msgid "Django 3.0.5 fixes several bugs in 3.0.4."
msgstr "Django 3.0.5 修复了 3.0.4 版本中的多个错误。"

msgid ""
"Fixed a regression in Django 3.0 where ``QuerySet.values()`` and "
"``values_list()`` crashed if a queryset contained an aggregation and "
"``Subquery()`` annotation that collides with a field name (:ticket:`31377`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致如果查询集中包含了聚合和与字段"
"名称冲突的 ``Subquery()`` 注释，那么 ``QuerySet.values()`` 和 "
"``values_list()`` 会崩溃 (:ticket:`31377`)。"

msgid "Django 3.0.6 release notes"
msgstr "Django 3.0.6 版本发行说明"

msgid "*May 4, 2020*"
msgstr "*2020 年 5 月 4 日*"

msgid "Django 3.0.6 fixes a bug in 3.0.5."
msgstr "Django 3.0.6 修复了 3.0.5 版本中的一个错误。"

msgid ""
"Fixed a regression in Django 3.0 that caused a crash when filtering a "
"``Subquery()`` annotation of a queryset containing a single related field "
"against a ``SimpleLazyObject`` (:ticket:`31420`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致在针对包含单个相关字段的查询集"
"的 ``Subquery()`` 注释进行筛选时与 ``SimpleLazyObject`` 发生冲突时崩溃 (:"
"ticket:`31420`)。"

msgid "Django 3.0.7 release notes"
msgstr "Django 3.0.7 版本发行说明"

msgid "Django 3.0.7 fixes two security issues and several bugs in 3.0.6."
msgstr "Django 3.0.7 修复了 3.0.6 版本中的两个安全问题和多个错误。"

msgid ""
"Fixed a regression in Django 3.0 by restoring the ability to use field "
"lookups in ``Meta.ordering`` (:ticket:`31538`)."
msgstr ""
"通过恢复在 ``Meta.ordering`` 中使用字段查找的功能，修复了 Django 3.0 中的一个"
"回归问题 (:ticket:`31538`)。"

msgid ""
"Fixed a regression in Django 3.0 where ``QuerySet.values()`` and "
"``values_list()`` crashed if a queryset contained an aggregation and a "
"subquery annotation (:ticket:`31566`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致如果查询集中包含了聚合和子查询"
"注释，那么 ``QuerySet.values()`` 和 ``values_list()`` 会崩溃 (:ticket:"
"`31566`)。"

msgid ""
"Fixed a regression in Django 3.0 where aggregates used wrong annotations "
"when a queryset has multiple subqueries annotations (:ticket:`31568`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，当查询集具有多个子查询注释时，聚合使用了"
"错误的注释 (:ticket:`31568`)。"

msgid ""
"Fixed a regression in Django 3.0 where ``QuerySet.values()`` and "
"``values_list()`` crashed if a queryset contained an aggregation and an "
"``Exists()`` annotation on Oracle (:ticket:`31584`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致如果查询集中包含了聚合和 "
"Oracle 上的 ``Exists()`` 注释，那么 ``QuerySet.values()`` 和 "
"``values_list()`` 会崩溃 (:ticket:`31584`)。"

msgid ""
"Fixed a regression in Django 3.0 where all resolved ``Subquery()`` "
"expressions were considered equal (:ticket:`31607`)."
msgstr ""
"修复了 Django 3.0 中的一个回归问题，该问题导致所有已解析的 ``Subquery()`` 表"
"达式被视为相等 (:ticket:`31607`)。"

msgid ""
"Fixed a regression in Django 3.0.5 that affected translation loading for "
"apps providing translations for territorial language variants as well as a "
"generic language, where the project has different plural equations for the "
"language (:ticket:`31570`)."
msgstr ""
"修复了 Django 3.0.5 中的一个回归问题，该问题影响了为领土语言变体和通用语言提"
"供翻译的应用程序的翻译加载，其中项目对该语言具有不同的复数规则 (:ticket:"
"`31570`)。"

msgid ""
"Tracking a jQuery security release, upgraded the version of jQuery used by "
"the admin from 3.4.1 to 3.5.1."
msgstr ""
"追踪了一个 jQuery 的安全发布，将管理员界面中使用的 jQuery 版本从 3.4.1 升级"
"到 3.5.1 。"

msgid "Django 3.0.8 release notes"
msgstr "Django 3.0.8 版本发行说明"

msgid "Django 3.0.8 fixes several bugs in 3.0.7."
msgstr "Django 3.0.8 修复了 3.0.7 版本中的多个错误。"

msgid ""
"Fixed a regression in Django 3.0.7 that caused a queryset crash when "
"grouping by a many-to-one relationship (:ticket:`31660`)."
msgstr ""
"修复了 Django 3.0.7 中的一个回归问题，该问题导致在按多对一关系进行分组时查询"
"集崩溃 (:ticket:`31660`)。"

msgid ""
"Reallowed, following a regression in Django 3.0, non-expressions having a "
"``filterable`` attribute to be used as the right-hand side in queryset "
"filters (:ticket:`31664`)."
msgstr ""
"在 Django 3.0 中放宽了一个系统检查，允许在查询集过滤器的右侧使用具有 "
"``filterable`` 属性的非表达式对象，这是因为在 Django 3.0 中发生了一个回归问"
"题 (:ticket:`31664`)。"

msgid ""
"Fixed a regression in Django 3.0.2 that caused a migration crash on "
"PostgreSQL when adding a foreign key to a model with a namespaced "
"``db_table`` (:ticket:`31735`)."
msgstr ""
"修复了 Django 3.0.2 中的一个回归问题，该问题导致在向具有命名空间 "
"``db_table`` 的模型添加外键时在 PostgreSQL 上发生迁移崩溃 (:ticket:`31735`)。"

msgid "Added compatibility for ``cx_Oracle`` 8 (:ticket:`31751`)."
msgstr "为 ``cx_Oracle`` 8 添加了兼容性 (:ticket:`31751`)。"

msgid "Django 3.0.9 release notes"
msgstr "Django 3.0.9 版本发行说明"

msgid "Django 3.0.9 fixes several bugs in 3.0.8."
msgstr "Django 3.0.9 修复了 3.0.8 版本中的多个错误。"

msgid "Django 3.1 release notes"
msgstr "Django 3.1 版本发行说明"

msgid "*August 4, 2020*"
msgstr "*2020 年 8 月 4 日*"

msgid "Welcome to Django 3.1!"
msgstr "欢迎来到 Django 3.1 版本！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-3.1>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-3.1>` "
"you'll want to be aware of when upgrading from Django 3.0 or earlier. We've :"
"ref:`dropped some features<removed-features-3.1>` that have reached the end "
"of their deprecation cycle, and we've :ref:`begun the deprecation process "
"for some features <deprecated-features-3.1>`."
msgstr ""
"此版本说明涵盖了一些 :ref:`新特性 <whats-new-3.1>` ，以及从 Django 3.0 或更早"
"版本升级时需要注意的 :ref:`向后不兼容 <backwards-incompatible-3.1>` 的地方。"
"我们已经 :ref:`删除了一些过期的功能 <removed-features-3.1>` ，并且已经开始 :"
"ref:`淘汰一些特性 <deprecated-features-3.1>` 。"

msgid ""
"Django 3.1 supports Python 3.6, 3.7, 3.8, and 3.9 (as of 3.1.3). We **highly "
"recommend** and only officially support the latest release of each series."
msgstr ""
"Django 3.1 支持 Python 3.6、3.7、3.8 和 3.9（从 3.1.3 开始）。我们 **强烈推荐"
"** 且官方只支持每个系列的最新版本。"

msgid "What's new in Django 3.1"
msgstr "Django 3.1 新特性"

msgid "Asynchronous views and middleware support"
msgstr "异步视图和中间件支持"

msgid "Django now supports a fully asynchronous request path, including:"
msgstr "Django 现在支持完全异步的请求路径，包括："

msgid ":ref:`Asynchronous views <async-views>`"
msgstr ":ref:`异步视图 <async-views>`"

msgid ":ref:`Asynchronous middleware <async-middleware>`"
msgstr ":ref:`异步中间件 <async-middleware>`"

msgid ":ref:`Asynchronous tests and test client <async-tests>`"
msgstr ":ref:`异步测试和测试客户端 <async-tests>`"

msgid ""
"To get started with async views, you need to declare a view using ``async "
"def``::"
msgstr "要开始使用异步视图，你需要使用 ``async def`` 来声明一个视图："

msgid ""
"All asynchronous features are supported whether you are running under WSGI "
"or ASGI mode. However, there will be performance penalties using async code "
"in WSGI mode. You can read more about the specifics in :doc:`/topics/async` "
"documentation."
msgstr ""
"无论你是在 WSGI 或 ASGI 模式下运行，都支持所有的异步功能。但是，在 WSGI 模式"
"下使用 async 代码会有性能上的惩罚。你可以在 :doc:`/topics/async` 文档中阅读更"
"多的具体内容。"

msgid ""
"You are free to mix async and sync views, middleware, and tests as much as "
"you want. Django will ensure that you always end up with the right execution "
"context. We expect most projects will keep the majority of their views "
"synchronous, and only have a select few running in async mode - but it is "
"entirely your choice."
msgstr ""
"你可以自由地混合异步和同步视图、中间件和测试，只要你愿意。Django 会确保你最终"
"使用正确的执行上下文。我们希望大多数项目会保持大部分视图的同步，只有少数视图"
"在异步模式下运行，但这完全是你的选择。"

msgid ""
"Django's ORM, cache layer, and other pieces of code that do long-running "
"network calls do not yet support async access. We expect to add support for "
"them in upcoming releases. Async views are ideal, however, if you are doing "
"a lot of API or HTTP calls inside your view, you can now natively do all "
"those HTTP calls in parallel to considerably speed up your view's execution."
msgstr ""
"Django 的 ORM、缓存层和其他做长期网络调用的代码还不支持异步访问。我们希望在即"
"将发布的版本中增加对它们的支持。但是，异步视图是很理想的，如果你在视图里面做"
"了大量的 API 或 HTTP 调用，你现在可以原生地将所有这些 HTTP 调用并行进行，以大"
"大加快你的视图的执行速度。"

msgid ""
"Asynchronous support should be entirely backwards-compatible and we have "
"tried to ensure that it has no speed regressions for your existing, "
"synchronous code. It should have no noticeable effect on any existing Django "
"projects."
msgstr ""
"异步支持应该是完全向后兼容的，我们已经尝试确保它不会对你现有的同步代码造成速"
"度上的倒退。它应该不会对任何现有的 Django 项目产生明显的影响。"

msgid "JSONField for all supported database backends"
msgstr "JSONField 适用于所有支持的数据库后端。"

msgid ""
"Django now includes :class:`.models.JSONField` and :class:`forms.JSONField "
"<django.forms.JSONField>` that can be used on all supported database "
"backends. Both fields support the use of custom JSON encoders and decoders. "
"The model field supports the introspection, :ref:`lookups, and transforms "
"<querying-jsonfield>` that were previously PostgreSQL-only::"
msgstr ""
"Django 现在包含 :class:`.models.JSONField` 和 :class:`forms.JSONField "
"<django.forms.JSONField>`，可以在所有支持的数据库后端使用。这两个字段都支持使"
"用自定义 JSON 编码器和解码器。模型字段支持自省、:ref:`查找和变换 <querying-"
"jsonfield>`，这些功能以前只有 PostgreSQL 才有："

msgid ""
"If your project uses ``django.contrib.postgres.fields.JSONField``, plus the "
"related form field and transforms, you should adjust to use the new fields, "
"and generate and apply a database migration. For now, the old fields and "
"transforms are left as a reference to the new ones and are :ref:`deprecated "
"as of this release <deprecated-jsonfield>`."
msgstr ""
"如果你的项目使用了 ``django.contrib.postgres.fields.JSONField``，加上相关的表"
"单字段和变换，你应该调整使用新的字段，并生成和应用数据库迁移。目前，旧的字段"
"和变换体作为新字段的引用留存下来，并且 :ref:`从这个版本开始取消 <deprecated-"
"jsonfield>`。"

msgid "``DEFAULT_HASHING_ALGORITHM`` settings"
msgstr "``DEFAULT_HASHING_ALGORITHM`` 配置"

msgid ""
"The new ``DEFAULT_HASHING_ALGORITHM`` transitional setting allows specifying "
"the default hashing algorithm to use for encoding cookies, password reset "
"tokens in the admin site, user sessions, and signatures created by :class:"
"`django.core.signing.Signer` and :meth:`django.core.signing.dumps`."
msgstr ""
"新的 ``DEFAULT_HASHING_ALGORITHM`` 过渡设置允许指定用于编码 cookie、管理员站"
"点中的密码重置令牌、用户会话以及由 :class:`django.core.signing.Signer` 和 :"
"meth:`django.core.signing.dumps` 创建的签名的默认哈希算法。"

msgid ""
"Support for SHA-256 was added in Django 3.1. If you are upgrading multiple "
"instances of the same project to Django 3.1, you should set "
"``DEFAULT_HASHING_ALGORITHM`` to ``'sha1'`` during the transition, in order "
"to allow compatibility with the older versions of Django. Note that this "
"requires Django 3.1.1+. Once the transition to 3.1 is complete you can stop "
"overriding ``DEFAULT_HASHING_ALGORITHM``."
msgstr ""
"在 Django 3.1 中添加了对 SHA-256 的支持。如果您正在将同一项目的多个实例升级"
"到 Django 3.1，您应该在过渡期间将 ``DEFAULT_HASHING_ALGORITHM`` 设置为 "
"``'sha1'``，以便与旧版本的 Django 兼容。请注意，这需要 Django 3.1.1+。一旦完"
"成到 3.1 的过渡，您可以停止覆盖 ``DEFAULT_HASHING_ALGORITHM``。"

msgid ""
"This setting is deprecated as of this release, because support for tokens, "
"cookies, sessions, and signatures that use SHA-1 algorithm will be removed "
"in Django 4.0."
msgstr ""
"因为在 Django 4.0 中，对使用 SHA-1 算法的令牌、cookie、会话和签名的支持将被取"
"消，所以这个配置从这个版本开始就被取消了。"

msgid ""
"The new ``django.contrib.admin.EmptyFieldListFilter`` for :attr:`.ModelAdmin."
"list_filter` allows filtering on empty values (empty strings and nulls) in "
"the admin changelist view."
msgstr ""
"新的 ``django.contrib.admin.EmptyFieldListFilter`` 为 :attr:`.ModelAdmin."
"list_filter` 允许在管理的变更列表视图中过滤空值（空字符串和空值）。"

msgid ""
"Filters in the right sidebar of the admin changelist view now contain a link "
"to clear all filters."
msgstr "管理员更改列表视图右侧的过滤器现在包含一个清除所有过滤器的链接。"

msgid ""
"The admin now has a sidebar on larger screens for easier navigation. It is "
"enabled by default but can be disabled by using a custom ``AdminSite`` and "
"setting :attr:`.AdminSite.enable_nav_sidebar` to ``False``."
msgstr ""
"管理员现在在大屏幕上有一个侧栏，以便于导航。它是默认启用的，但可以通过使用一"
"个自定义的 ``AdminSite`` 和设置 :attr:`.AdminSite.enable_nav_sidebar` 为 "
"``False`` 来禁用。"

msgid ""
"Rendering the sidebar requires access to the current request in order to set "
"CSS and ARIA role affordances. This requires using ``'django.template."
"context_processors.request'`` in the ``'context_processors'`` option of :"
"setting:`OPTIONS <TEMPLATES-OPTIONS>`."
msgstr ""
"渲染侧边栏需要访问当前请求，以便设置 CSS 和 ARIA 角色的负担。这就需要使用 :"
"setting:`OPTIONS <TEMPLATES-OPTIONS>` 的 ``'context_processors'`` 选项中的 "
"``'django.template.context_processors.request'``。"

msgid ""
"Initially empty ``extra`` inlines can now be removed, in the same way as "
"dynamically created ones."
msgstr "最初的空 ``extra`` 内联现在可以被删除，与动态创建的内联相同。"

msgid "``XRegExp`` is upgraded from version 2.0.0 to 3.2.0."
msgstr "``XRegExp`` 从 2.0.0 版本升级到 3.2.0。"

msgid "jQuery is upgraded from version 3.4.1 to 3.5.1."
msgstr "jQuery 从 3.4.1 版本升级到 3.5.1。"

msgid "Select2 library is upgraded from version 4.0.7 to 4.0.13."
msgstr "Select2 库从 4.0.7 版本升级到 4.0.13。"

msgid ""
"The default iteration count for the PBKDF2 password hasher is increased from "
"180,000 to 216,000."
msgstr "PBKDF2 密码哈希的默认迭代次数从 180,000 增加到 216,000。"

msgid ""
"The new :setting:`PASSWORD_RESET_TIMEOUT` setting allows defining the number "
"of seconds a password reset link is valid for. This is encouraged instead of "
"the deprecated ``PASSWORD_RESET_TIMEOUT_DAYS`` setting, which will be "
"removed in Django 4.0."
msgstr ""
"新的 :setting:`PASSWORD_RESET_TIMEOUT` 配置允许定义密码重置链接的有效秒数。我"
"们鼓励这样做，而不是使用被废弃的 ``PASSWORD_RESET_TIMEOUT_DAYS`` 配置，后者将"
"在 Django 4.0 中被删除。"

msgid ""
"The password reset mechanism now uses the SHA-256 hashing algorithm. Support "
"for tokens that use the old hashing algorithm remains until Django 4.0."
msgstr ""
"密码重置机制现在使用 SHA-256 散列算法。在 Django 4.0 之前，对使用旧的散列算法"
"的令牌的支持仍然存在。"

msgid ""
":meth:`.AbstractBaseUser.get_session_auth_hash` now uses the SHA-256 hashing "
"algorithm. Support for user sessions that use the old hashing algorithm "
"remains until Django 4.0."
msgstr ""
":meth:`.AbstractBaseUser.get_session_auth_hash` 现在使用 SHA-256 散列算法。"
"在 Django 4.0 之前，对使用旧的散列算法的用户会话的支持仍然存在。"

msgid ""
"The new :option:`remove_stale_contenttypes --include-stale-apps` option "
"allows removing stale content types from previously installed apps that have "
"been removed from :setting:`INSTALLED_APPS`."
msgstr ""
"新的 :option:`remove_stale_contenttypes --include-stale-apps` 选项允许从以前"
"安装的应用程序中删除陈旧的内容类型，这些应用程序已经从 :setting:"
"`INSTALLED_APPS` 中删除。"

msgid ":lookup:`relate` lookup is now supported on MariaDB."
msgstr ":lookup:`relate` 查找现已在 MariaDB 上支持。"

msgid "Added the :attr:`.LinearRing.is_counterclockwise` property."
msgstr "添加了 :attr:`.LinearRing.is_counterclockwise` 属性。"

msgid ""
":class:`~django.contrib.gis.db.models.functions.AsGeoJSON` is now supported "
"on Oracle."
msgstr ""
":class:`~django.contrib.gis.db.models.function.AsGeoJSON` 现已在 Oracle 上支"
"持。"

msgid ""
"Added the :class:`~django.contrib.gis.db.models.functions.AsWKB` and :class:"
"`~django.contrib.gis.db.models.functions.AsWKT` functions."
msgstr ""
"添加了 :class:`~django.contrib.gis.db.models.function.AsWKB` 和 :class:"
"`~django.contrib.gis.db.models.function.AsWKT` 函数。"

msgid "Added support for PostGIS 3 and GDAL 3."
msgstr "增加了对 PostGIS 3 和 GDAL 3 的支持。"

msgid ":mod:`django.contrib.humanize`"
msgstr ":mod:`django.contrib.humanize`"

msgid ":tfilter:`intword` template filter now supports negative integers."
msgstr ":tfilter:`intword` 模板过滤器现在支持负整数。"

msgid ""
"The new :class:`~django.contrib.postgres.indexes.BloomIndex` class allows "
"creating ``bloom`` indexes in the database. The new :class:`~django.contrib."
"postgres.operations.BloomExtension` migration operation installs the "
"``bloom`` extension to add support for this index."
msgstr ""
"新的 :class:`~django.contrib.postgres.indexes.BloomIndex` 类允许在数据库中创"
"建 ``bloom`` 索引。新的 :class:`~django.contrib.postgres.operations."
"BloomExtension` 迁移操作安装 ``bloom`` 扩展来增加对该索引的支持。"

msgid ""
":meth:`~django.db.models.Model.get_FOO_display` now supports :class:`~django."
"contrib.postgres.fields.ArrayField` and :class:`~django.contrib.postgres."
"fields.RangeField`."
msgstr ""
":meth:`~django.db.models.Model.get_FOO_display` 现在支持 :class:`~django."
"contrib.postgres.field.ArrayField` 和 :class:`~django.contrib.postgres.field."
"RangeField`。"

msgid ""
"The new :lookup:`rangefield.lower_inc`, :lookup:`rangefield.lower_inf`, :"
"lookup:`rangefield.upper_inc`, and :lookup:`rangefield.upper_inf` lookups "
"allow querying :class:`~django.contrib.postgres.fields.RangeField` by a "
"bound type."
msgstr ""
"新的 :lookup:`rangefield.lower_inc`, :lookup:`rangefield.lower_inf`、:lookup:"
"`rangefield.upper_inc` 和 :lookup:`rangefield.upper_inf` 查找允许通过绑定类型"
"查询 :class:`~django.contrib.postgres.field.RangeField`。"

msgid ""
":lookup:`rangefield.contained_by` now supports :class:`~django.db.models."
"SmallAutoField`, :class:`~django.db.models.AutoField`, :class:`~django.db."
"models.BigAutoField`, :class:`~django.db.models.SmallIntegerField`, and :"
"class:`~django.db.models.DecimalField`."
msgstr ""
":lookup:`rangefield.contained_by` 现在支持 :class:`~django.db.models."
"SmallAutoField`、:class:`~django.db.models.AutoField`、:class:`~django.db."
"models.BigAutoField`、:class:`~django.db.models.SmallIntegerField` 和 :class:"
"`~django.db.models.DecimalField`。"

msgid ""
":class:`~django.contrib.postgres.search.SearchQuery` now supports "
"``'websearch'`` search type on PostgreSQL 11+."
msgstr ""
":class:`~django.contrib.postgres.search.SearchQuery` 现在支持 PostgreSQL 11+ "
"上的 ``'websearch'`` 搜索类型。"

msgid ""
":class:`SearchQuery.value <django.contrib.postgres.search.SearchQuery>` now "
"supports query expressions."
msgstr ""
":class:`SearchQuery.value <django.contrib.postgres.search.SearchQuery>` 现在"
"支持查询表达式。"

msgid ""
"The new :class:`~django.contrib.postgres.search.SearchHeadline` class allows "
"highlighting search results."
msgstr ""
"新的 :class:`~django.contrib.postgres.search.SearchHeadline` 类可以高亮显示搜"
"索结果。"

msgid ":lookup:`search` lookup now supports query expressions."
msgstr ":lookup:`search` 查找现在支持查询表达式。"

msgid ""
"The new ``cover_density`` parameter of :class:`~django.contrib.postgres."
"search.SearchRank` allows ranking by cover density."
msgstr ""
"新的 :class:`~django.contrib.postgres.search.SearchRank` 的 "
"``cover_density`` 参数允许按覆盖密度进行排名。"

msgid ""
"The new ``normalization`` parameter of :class:`~django.contrib.postgres."
"search.SearchRank` allows rank normalization."
msgstr ""
":class:`~django.contrib.postgres.search.SearchRank` 的新 ``normalization`` 参"
"数允许进行排名规范化。"

msgid ""
"The new :attr:`.ExclusionConstraint.deferrable` attribute allows creating "
"deferrable exclusion constraints."
msgstr ""
"新的 :attr:`.ExclusionConstraint.deferrable` 属性允许创建可推迟的排除约束。"

msgid ""
"The :setting:`SESSION_COOKIE_SAMESITE` setting now allows ``'None'`` "
"(string) value to explicitly state that the cookie is sent with all same-"
"site and cross-site requests."
msgstr ""
":setting:`SESSION_COOKIE_SAMESITE` 配置现在允许 ``'None'`` （字符串）值明确表"
"示所有同站和跨站请求都会发送 cookie。"

msgid ""
"The :setting:`STATICFILES_DIRS` setting now supports :class:`pathlib.Path`."
msgstr ":setting:`STATICFILES_DIRS` 配置现在支持 :class:`pathlib.Path`。"

msgid ""
"The :func:`~django.views.decorators.cache.cache_control` decorator and :func:"
"`~django.utils.cache.patch_cache_control` method now support multiple field "
"names in the ``no-cache`` directive for the ``Cache-Control`` header, "
"according to :rfc:`7234#section-5.2.2.2`."
msgstr ""
"根据 :rfc:`7234#section-5.2.2.2`，:func:`~django.views.decorators.cache."
"cache_control` 装饰器和 :func:`~django.utils.cache.patch_cache_control` 方法"
"现在支持 ``Cache-Control`` 头的 ``no-cache`` 指令中的多个字段名。"

msgid ""
":meth:`~django.core.cache.cache.delete` now returns ``True`` if the key was "
"successfully deleted, ``False`` otherwise."
msgstr ""
":meth:`~django.core.cache.cache.delete` 现在在成功删除键时返回 ``True``，否则"
"返回 ``False``。"

msgid ""
"The :setting:`CSRF_COOKIE_SAMESITE` setting now allows ``'None'`` (string) "
"value to explicitly state that the cookie is sent with all same-site and "
"cross-site requests."
msgstr ""
":setting:`CSRF_COOKIE_SAMESITE` 配置现在允许 ``'None'`` （字符串）值来明确说"
"明所有同站和跨站请求都会发送 cookie。"

msgid ""
"The :setting:`EMAIL_FILE_PATH` setting, used by the :ref:`file email backend "
"<topic-email-file-backend>`, now supports :class:`pathlib.Path`."
msgstr ""
":ref:`附件邮件后端 <topic-email-file-backend>` 使用的 :setting:"
"`EMAIL_FILE_PATH` 配置，现在支持 :class:`pathlib.Path`。"

msgid "Error Reporting"
msgstr "错误报告"

msgid ""
":class:`django.views.debug.SafeExceptionReporterFilter` now filters "
"sensitive values from ``request.META`` in exception reports."
msgstr ""
":class:`django.view.debug.SafeExceptionReporterFilter` 现在可以过滤异常报告"
"中 ``request.META`` 中的敏感值。"

msgid ""
"The new :attr:`.SafeExceptionReporterFilter.cleansed_substitute` and :attr:`."
"SafeExceptionReporterFilter.hidden_settings` attributes allow customization "
"of sensitive settings and ``request.META`` filtering in exception reports."
msgstr ""
"新的 :attr:`.SafeExceptionReporterFilter.cleansed_substitute` 和 :attr:`."
"SafeExceptionReporterFilter.hidden_settings` 属性允许在异常报告中自定义敏感配"
"置和 ``request.META`` 过滤。"

msgid ""
"The technical 404 debug view now respects :setting:"
"`DEFAULT_EXCEPTION_REPORTER_FILTER` when applying settings filtering."
msgstr ""
"在应用配置过滤时，技术 404 调试视图现在尊重 :setting:"
"`DEFAULT_EXCEPTION_REPORTER_FILTER`。"

msgid ""
"The new :setting:`DEFAULT_EXCEPTION_REPORTER` allows providing a :class:"
"`django.views.debug.ExceptionReporter` subclass to customize exception "
"report generation. See :ref:`custom-error-reports` for details."
msgstr ""
"新的 :setting:`DEFAULT_EXCEPTION_REPORTER` 允许提供 :class:`django.views."
"debug.ExceptionReporter` 子类来定制异常报告的生成。详情请参见 :ref:`custom-"
"error-reports`。"

msgid "``FileSystemStorage.save()`` method now supports :class:`pathlib.Path`."
msgstr "``FileSystemStorage.save()`` 方法现在支持 :class:`pathlib.Path`。"

msgid ""
":class:`~django.db.models.FileField` and :class:`~django.db.models."
"ImageField` now accept a callable for ``storage``. This allows you to modify "
"the used storage at runtime, selecting different storages for different "
"environments, for example."
msgstr ""
":class:`~django.db.models.FileField` 和 :class:`~django.db.models."
"ImageField` 现在可以接受 ``storage`` 的调用。这允许你在运行时修改所使用的存"
"储，例如为不同的环境选择不同的存储。"

msgid ""
":class:`~django.forms.ModelChoiceIterator`, used by :class:`~django.forms."
"ModelChoiceField` and :class:`~django.forms.ModelMultipleChoiceField`, now "
"uses :class:`~django.forms.ModelChoiceIteratorValue` that can be used by "
"widgets to access model instances. See :ref:`iterating-relationship-choices` "
"for details."
msgstr ""
":class:`~django.forms.ModelChoiceIterator`，被 :class:`~django.forms."
"ModelChoiceField` 和 :class:`~django.forms.ModelMultipleChoiceField` 使用，现"
"在使用 :class:`~django.forms.ModelChoiceIteratorValue`，可以被部件用来访问模"
"型实例。详情请看 :ref:`iterating-relationship-choices`。"

msgid ""
":class:`django.forms.DateTimeField` now accepts dates in a subset of ISO "
"8601 datetime formats, including optional timezone, e.g. "
"``2019-10-10T06:47``, ``2019-10-10T06:47:23+04:00``, or "
"``2019-10-10T06:47:23Z``. The timezone will always be retained if provided, "
"with timezone-aware datetimes being returned even when :setting:`USE_TZ` is "
"``False``."
msgstr ""
":class:`django.forms.DateTimeField` 现在接受 ISO 8601 日期时间格式的子集，包"
"括可选的时区，例如 ``2019-10-10T06:47``、``2019-10-10T06:47:23+04:00`` 或 "
"``2019-10-10T06:47:23Z``。如果提供了时区，将始终保留时区，即使 :setting:"
"`USE_TZ` 为 ``False`` 时，也会返回时区感知的日期时间。"

msgid ""
"Additionally, ``DateTimeField`` now uses ``DATE_INPUT_FORMATS`` in addition "
"to ``DATETIME_INPUT_FORMATS`` when converting a field input to a "
"``datetime`` value."
msgstr ""
"此外，``DateTimeField`` 现在在将字段输入转换为 ``datetime`` 值时，除了使用 "
"``DATETIME_INPUT_FORMATS`` 外，还使用 ``DATE_INPUT_FORMATS``。"

msgid ""
":attr:`.MultiWidget.widgets` now accepts a dictionary which allows "
"customizing subwidget ``name`` attributes."
msgstr ""
":attr:`.MultiWidget.widgets` 现在接受一个字典，允许自定义子部件 ``name`` 属"
"性。"

msgid ""
"The new :attr:`.BoundField.widget_type` property can be used to dynamically "
"adjust form rendering based upon the widget type."
msgstr ""
"新的 :attr:`.BoundField.widget_type` 属性可用于根据部件类型动态调整表单渲染。"

msgid ""
"The :setting:`LANGUAGE_COOKIE_SAMESITE` setting now allows ``'None'`` "
"(string) value to explicitly state that the cookie is sent with all same-"
"site and cross-site requests."
msgstr ""
":setting:`LANGUAGE_COOKIE_SAMESITE` 配置现在允许 ``'None'`` （字符串）值明确"
"表示所有同站和跨站请求都会发送 cookie。"

msgid ""
"Added support and translations for the Algerian Arabic, Igbo, Kyrgyz, Tajik, "
"and Turkmen languages."
msgstr ""
"增加了对阿尔及利亚阿拉伯语、伊博语、吉尔吉斯语、塔吉克语和土库曼语的支持和翻"
"译。"

msgid ""
"The new :option:`check --database` option allows specifying database aliases "
"for running the ``database`` system checks. Previously these checks were "
"enabled for all configured :setting:`DATABASES` by passing the ``database`` "
"tag to the command."
msgstr ""
"新的 :option:`check --database` 选项允许指定数据库别名，以便运行 "
"``database`` 系统检查。以前，通过向命令传递 ``database`` 标签，为所有设置的 :"
"setting:`DATABASES` 启用这些检查。"

msgid ""
"The new :option:`migrate --check` option makes the command exit with a non-"
"zero status when unapplied migrations are detected."
msgstr ""
"新的 :option:`migrate --check` 选项使命令在检测到未应用的迁移时以非零状态退"
"出。"

msgid ""
"The new ``returncode`` argument for :attr:`~django.core.management."
"CommandError` allows customizing the exit status for management commands."
msgstr ""
":attr:`~django.core.management.CommandError` 的新 ``returncode`` 参数允许自定"
"义管理命令的退出状态。"

msgid ""
"The new :option:`dbshell -- ARGUMENTS <dbshell -->` option allows passing "
"extra arguments to the command-line client for the database."
msgstr ""
"新的 :option:`dbshell -- ARGUMENTS <dbshell -->` 选项允许向数据库的命令行客户"
"端传递额外的参数。"

msgid ""
"The :djadmin:`flush` and :djadmin:`sqlflush` commands now include SQL to "
"reset sequences on SQLite."
msgstr ""
":djadmin:`flush` 和 :djadmin:`sqlflush` 命令现在包括 SQL 来重置 SQLite 上的序"
"列。"

msgid ""
"The new :class:`~django.db.models.functions.ExtractIsoWeekDay` function "
"extracts ISO-8601 week days from :class:`~django.db.models.DateField` and :"
"class:`~django.db.models.DateTimeField`, and the new :lookup:`iso_week_day` "
"lookup allows querying by an ISO-8601 day of week."
msgstr ""
"新的 :class:`~django.db.models.function.ExtractIsoWeekDay` 函数从 :class:"
"`~django.db.models.DateField` 和 :class:`~django.db.models.DateTimeField` 中"
"提取 ISO-8601 周天，新的 :lookup:`iso_week_day` 查询可以按 ISO-8601 周天查"
"询。"

msgid ":meth:`.QuerySet.explain` now supports:"
msgstr ":meth:`.QuerySet.explain` 现在支持："

msgid "``TREE`` format on MySQL 8.0.16+,"
msgstr "MySQL 8.0.16+ 上的 ``TREE`` 格式，"

msgid "``analyze`` option on MySQL 8.0.18+ and MariaDB."
msgstr "MySQL 8.0.18+ 和 MariaDB 上的 ``analyze`` 选项。"

msgid ""
"Added :class:`~django.db.models.PositiveBigIntegerField` which acts much "
"like a :class:`~django.db.models.PositiveIntegerField` except that it only "
"allows values under a certain (database-dependent) limit. Values from ``0`` "
"to ``9223372036854775807`` are safe in all databases supported by Django."
msgstr ""
"添加了 :class:`~django.db.models.PositiveBigIntegerField`，它的作用很像 :"
"class:`~django.db.models.PositiveIntegerField`，只是它只允许在一定（依赖于数"
"据库的）限制下取值。从 ``0`` 到 ``9223372036854775807`` 的值在 Django 支持的"
"所有数据库中都是安全的。"

msgid ""
"The new :class:`~django.db.models.RESTRICT` option for :attr:`~django.db."
"models.ForeignKey.on_delete` argument of ``ForeignKey`` and "
"``OneToOneField`` emulates the behavior of the SQL constraint ``ON DELETE "
"RESTRICT``."
msgstr ""
"新的 :class:`~django.db.models.RESTRICT` 选项为 ``ForeignKey`` 和 "
"``OneToOneField`` 的 :attr:`~django.db.models.ForeignKey.on_delete` 参数模拟"
"了 SQL 约束 ``ON DELETE RESTRICT`` 的行为。"

msgid "``CheckConstraint.check`` now supports boolean expressions."
msgstr ""

msgid ""
"The :meth:`.RelatedManager.add`, :meth:`~.RelatedManager.create`, and :meth:"
"`~.RelatedManager.set` methods now accept callables as values in the "
"``through_defaults`` argument."
msgstr ""
":meth:`.RelatedManager.add`、:meth:`~.RelatedManager.create` 和 :meth:`~."
"RelatedManager.set` 方法现在接受可调用对象参数作为 ``through_defaults`` 参数"
"的值。"

msgid ""
"The new ``is_dst``  parameter of the :meth:`.QuerySet.datetimes` determines "
"the treatment of nonexistent and ambiguous datetimes."
msgstr ""
":meth:`.QuerySet.datetimes` 的新 ``is_dst`` 参数决定了如何处理不存在和不明确"
"的日期。"

msgid ""
"The new :class:`~django.db.models.F` expression ``bitxor()`` method allows :"
"ref:`bitwise XOR operation <using-f-expressions-in-filters>`."
msgstr ""
"新的 :class:`~django.db.models.F` 表达式 ``bitxor()`` 方法允许 :ref:`bitwise "
"XOR 操作 <using-f-expressions-in-filters>`。"

msgid ""
":meth:`.QuerySet.bulk_create` now sets the primary key on objects when using "
"MariaDB 10.5+."
msgstr ""
":meth:`.QuerySet.bulk_create` 在使用 MariaDB 10.5+ 时，现在可以设置对象的主"
"键。"

msgid ""
"The ``DatabaseOperations.sql_flush()`` method now generates more efficient "
"SQL on MySQL by using ``DELETE`` instead of ``TRUNCATE`` statements for "
"tables which don't require resetting sequences."
msgstr ""
"``DatabaseOperations.sql_flush()`` 方法现在可以在 MySQL 上生成更有效的 SQL，"
"对于不需要重置序列的表，使用 ``DELETE`` 而不是 ``TRUNCATE`` 语句。"

msgid ""
"SQLite functions are now marked as :py:meth:`deterministic <sqlite3."
"Connection.create_function>` on Python 3.8+. This allows using them in check "
"constraints and partial indexes."
msgstr ""
"SQLite 函数现已在 Python 3.8+ 上被标记为 :py:meth:`deterministic <sqlite3."
"Connection.create_function>`。这允许在检查约束和部分索引中使用它们。"

msgid ""
"The new :attr:`.UniqueConstraint.deferrable` attribute allows creating "
"deferrable unique constraints."
msgstr ""
"新的 :attr:`.UniqueConstraint.deferrable` 属性允许创建可推迟的唯一约束。"

msgid ""
":class:`~django.core.paginator.Paginator` can now be iterated over to yield "
"its pages."
msgstr ":class:`~django.core.paginator.Paginator` 现在可以迭代产生其页面。"

msgid ""
"If :setting:`ALLOWED_HOSTS` is empty and ``DEBUG=True``, subdomains of "
"localhost are now allowed in the ``Host`` header, e.g. ``static.localhost``."
msgstr ""
"如果 :setting:`ALLOWED_HOSTS` 为空且 ``DEBUG=True``，则在 ``Host`` 头中允许使"
"用 localhost 的子域，例如 ``static.localhost``。"

msgid ""
":meth:`.HttpResponse.set_cookie` and :meth:`.HttpResponse.set_signed_cookie` "
"now allow using ``samesite='None'`` (string) to explicitly state that the "
"cookie is sent with all same-site and cross-site requests."
msgstr ""
":meth:`.HttpResponse.set_cookie` 和 :meth:`.HttpResponse.set_signed_cookie` "
"现在允许使用 ``samesite='None'`` （字符串）来明确说明所有同站和跨站请求都会发"
"送cookie。"

msgid ""
"The new :meth:`.HttpRequest.accepts` method returns whether the request "
"accepts the given MIME type according to the ``Accept`` HTTP header."
msgstr ""
"新的 :meth:`.HttpRequest.accepts` 方法根据 ``Accept`` HTTP 头返回请求是否接受"
"给定的 MIME 类型。"

msgid ""
"The :setting:`SECURE_REFERRER_POLICY` setting now defaults to ``'same-"
"origin'``. With this configured, :class:`~django.middleware.security."
"SecurityMiddleware` sets the :ref:`referrer-policy` header to ``same-"
"origin`` on all responses that do not already have it. This prevents the "
"``Referer`` header being sent to other origins. If you need the previous "
"behavior, explicitly set :setting:`SECURE_REFERRER_POLICY` to ``None``."
msgstr ""
":setting:`SECURE_REFERRER_POLICY` 配置现在默认为 ``'same-origin'``。设置了这"
"个之后，:class:`~django.middleware.security.SecurityMiddleware` 会在所有还没"
"有设置 :ref:`referrer-policy` 头的情况下，将其设置为 ``same-origin``。这可以"
"防止 ``Referer`` 头被发送到其他来源。如果你需要以前的行为，明确地设置 :"
"setting:`SECURE_REFERRER_POLICY` 为 ``None``。"

msgid ""
"The default algorithm of :class:`django.core.signing.Signer`, :meth:`django."
"core.signing.loads`, and :meth:`django.core.signing.dumps` is changed to the "
"SHA-256. Support for signatures made with the old SHA-1 algorithm remains "
"until Django 4.0."
msgstr ""
":class:`django.core.signing.Signer`、:meth:`django.core.signing.load` 和 :"
"meth:`django.core.signing.dumps` 的默认算法改为 SHA-256。在 Django 4.0 之前，"
"仍然支持用旧的 SHA-1 算法进行签名。"

msgid ""
"Also, the new ``algorithm`` parameter of the :class:`~django.core.signing."
"Signer` allows customizing the hashing algorithm."
msgstr ""
"另外，:class:`~django.core.signing.Signer` 的新 ``algorithm`` 参数允许自定义"
"哈希算法。"

msgid ""
"The renamed :ttag:`translate` and :ttag:`blocktranslate` template tags are "
"introduced for internationalization in template code. The older :ttag:"
"`trans` and :ttag:`blocktrans` template tags aliases continue to work, and "
"will be retained for the foreseeable future."
msgstr ""
"重新命名的 :ttag:`translate` 和 :ttag:`blocktranslate` 模板标签被引入，用于模"
"板代码的国际化。旧的 :ttag:`trans` 和 :ttag:`blocktrans` 模板标签的别名继续工"
"作，并将在可预见的未来保留。"

msgid ""
"The :ttag:`include` template tag now accepts iterables of template names."
msgstr ":ttag:`include` 模板标签现在接受模板名称的可迭代对象。"

msgid ""
":class:`~django.test.SimpleTestCase` now implements the ``debug()`` method "
"to allow running a test without collecting the result and catching "
"exceptions. This can be used to support running tests under a debugger."
msgstr ""
":class:`~django.test.SimpleTestCase` 现在实现了 ``debug()`` 方法，允许在不收"
"集结果和捕获异常的情况下运行测试。这可以用来支持在调试器下运行测试。"

msgid ""
"The new :setting:`MIGRATE <TEST_MIGRATE>` test database setting allows "
"disabling of migrations during a test database creation."
msgstr ""
"新的 :setting:`MIGRATE <TEST_MIGRATE>` 测试数据库配置允许在创建测试数据库时禁"
"止迁移。"

msgid ""
":class:`~django.test.runner.DiscoverRunner` can now discard output for "
"passing tests using the :option:`test --buffer` option."
msgstr ""

msgid ""
":class:`~django.test.runner.DiscoverRunner` now skips running the system "
"checks on databases not :ref:`referenced by tests<testing-multi-db>`."
msgstr ""
":class:`~django.test.runner.DiscoverRunner` 现在会跳过对非 :ref:`测试所引用 "
"<testing-multi-db>` 的数据库进行系统检查。"

msgid ""
":class:`~django.test.TransactionTestCase` teardown is now faster on MySQL "
"due to :djadmin:`flush` command improvements. As a side effect the latter "
"doesn't automatically reset sequences on teardown anymore. Enable :attr:`."
"TransactionTestCase.reset_sequences` if your tests require this feature."
msgstr ""
":class:`~django.test.TransactionTestCase` 关闭现在在 MySQL 上的速度更快了，这"
"是因为 :djadmin:`flush` 命令的改进。作为一个副作用，后者不会再在关闭时自动重"
"置序列。如果你的测试需要这个功能，请启用 :attr:`.TransactionTestCase."
"reset_sequences`。"

msgid ""
":ref:`Path converters <registering-custom-path-converters>` can now raise "
"``ValueError`` in ``to_url()`` to indicate no match when reversing URLs."
msgstr ""
":ref:`Path 转换器 <registering-custom-path-converters>` 现在可以在 "
"``to_url()`` 中引发 ``ValueError``，在反查 URL 时表示不匹配。"

msgid ""
":func:`~django.utils.encoding.filepath_to_uri` now supports :class:`pathlib."
"Path`."
msgstr ""
":func:`~django.utils.encoding.filepath_to_uri` 现在支持 :class:`pathlib."
"Path`。"

msgid ""
":func:`~django.utils.dateparse.parse_duration` now supports comma separators "
"for decimal fractions in the ISO 8601 format."
msgstr ""
":func:`~django.utils.dateparse.parse_duration` 现在支持 ISO 8601 格式的小数点"
"用逗号分隔。"

msgid ""
":func:`~django.utils.dateparse.parse_datetime`, :func:`~django.utils."
"dateparse.parse_duration`, and :func:`~django.utils.dateparse.parse_time` "
"now support comma separators for milliseconds."
msgstr ""
":func:`~django.utils.dateparse.parse_datetime`、:func:`~django.utils."
"dateparse.parse_duration` 和 :func:`~django.utils.dateparse.parse_time` 现在"
"支持用逗号分隔毫秒。"

msgid ""
"The SQLite backend now supports :class:`pathlib.Path` for the ``NAME`` "
"setting."
msgstr "SQLite 后端现在支持 :class:`pathlib.Path` 为 ``NAME`` 的配置。"

msgid ""
"The ``settings.py`` generated by the :djadmin:`startproject` command now "
"uses :class:`pathlib.Path` instead of :mod:`os.path` for building filesystem "
"paths."
msgstr ""
"由 :djadmin:`startproject` 命令生成的 ``settings.py`` 现在使用 :class:"
"`pathlib.Path` 代替 :mod:`os.path` 来建立文件系统路径。"

msgid ""
"The :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` setting is now allowed on "
"databases that support time zones."
msgstr ""
"现在允许在支持时区的数据库上进行 :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` 设"
"置。"

msgid "Backwards incompatible changes in 3.1"
msgstr "3.1 中的不向后兼容的变更"

msgid ""
"``DatabaseOperations.fetch_returned_insert_columns()`` now requires an "
"additional ``returning_params`` argument."
msgstr ""
"``DatabaseOperations.fetch_returned_insert_columns()`` 现在需要一个额外的 "
"``returning_params`` 参数。"

msgid ""
"``connection.timezone`` property is now ``'UTC'`` by default, or the :"
"setting:`TIME_ZONE <DATABASE-TIME_ZONE>` when :setting:`USE_TZ` is ``True`` "
"on databases that support time zones. Previously, it was ``None`` on "
"databases that support time zones."
msgstr ""
"``connection.timezone`` 属性现在默认为 ``'UTC``，或者当 :setting:`USE_TZ` 为 "
"``True`` 时，支持时区的数据库上的 :setting:`TIME_ZONE <DATABASE-TIME_ZONE>`。"
"此前，在支持时区的数据库上是 ``None``。"

msgid ""
"``connection._nodb_connection`` property is changed to the ``connection."
"_nodb_cursor()`` method and now returns a context manager that yields a "
"cursor and automatically closes the cursor and connection upon exiting the "
"``with`` statement."
msgstr ""
"``connection._nodb_connection`` 属性改为 ``connection._nodb_cursor()`` 方法，"
"现在返回一个产生游标的上下文管理器，并在退出 ``with`` 语句后自动关闭游标和连"
"接。"

msgid ""
"``DatabaseClient.runshell()`` now requires an additional ``parameters`` "
"argument as a list of extra arguments to pass on to the command-line client."
msgstr ""
"``DatabaseClient.runshell()`` 现在需要一个额外的 ``parameters`` 参数，作为传"
"递给命令行客户端的额外参数列表。"

msgid ""
"The ``sequences`` positional argument of ``DatabaseOperations.sql_flush()`` "
"is replaced by the boolean keyword-only argument ``reset_sequences``. If "
"``True``, the sequences of the truncated tables will be reset."
msgstr ""
"``DatabaseOperations.sql_flush()`` 的 ``sequences`` 位置参数被只用关键字的布"
"尔参数 ``reset_sequences`` 取代。如果 ``True``，截断表的序列将被重置。"

msgid ""
"The ``allow_cascade`` argument of ``DatabaseOperations.sql_flush()`` is now "
"a keyword-only argument."
msgstr ""
"``DatabaseOperations.sql_flush()`` 的 ``allow_cascade`` 参数现在是一个纯关键"
"字的参数。"

msgid ""
"The ``using`` positional argument of ``DatabaseOperations."
"execute_sql_flush()`` is removed. The method now uses the database of the "
"called instance."
msgstr ""
"``DatabaseOperations.execute_sql_flush()`` 的 ``using`` 位置参数被删除。该方"
"法现在使用被调用实例的数据库。"

msgid ""
"Third-party database backends must implement support for ``JSONField`` or "
"set ``DatabaseFeatures.supports_json_field`` to ``False``. If storing "
"primitives is not supported, set ``DatabaseFeatures."
"supports_primitives_in_json_field`` to ``False``. If there is a true "
"datatype for JSON, set ``DatabaseFeatures.has_native_json_field`` to "
"``True``. If :lookup:`jsonfield.contains` and :lookup:`jsonfield."
"contained_by` are not supported, set ``DatabaseFeatures."
"supports_json_field_contains`` to ``False``."
msgstr ""
"第三方数据库后端必须实现对 ``JSONField`` 的支持，或者将 ``DatabaseFeatures."
"supports_json_field`` 设置为 ``False``。如果不支持存储基元，则设置 "
"``DatabaseFeatures.supports_primitives_in_json_field`` 为 ``False``。如果 "
"JSON 的数据类型为真，则设置 ``DatabaseFeatures.has_native_json_field`` 为 "
"``True``。如果不支持 :lookup:`jsonfield.contains` 和 :lookup:`jsonfield."
"contains_by`，则将 ``DatabaseFeatures.support_json_field_contains`` 设置为 "
"``False``。"

msgid ""
"Third party database backends must implement introspection for ``JSONField`` "
"or set ``can_introspect_json_field`` to ``False``."
msgstr ""
"第三方数据库后端必须实现对 ``JSONField`` 的自省，或者将 "
"``can_introspect_json_field`` 设置为 ``False``。"

msgid "Dropped support for MariaDB 10.1"
msgstr "丢弃了对 MariaDB 10.1 的支持"

msgid ""
"Upstream support for MariaDB 10.1 ends in October 2020. Django 3.1 supports "
"MariaDB 10.2 and higher."
msgstr ""
"对 MariaDB 10.1 的上游支持在 2020 年 10 月结束。Django 3.1 支持 MariaDB 10.2 "
"及以上版本。"

msgid ""
"The admin no longer supports the legacy Internet Explorer browser. See :ref:"
"`the admin FAQ <admin-browser-support>` for details on supported browsers."
msgstr ""
"管理不再支持传统的 Internet Explorer 浏览器。关于支持的浏览器，请参见 :ref:`"
"管理常见问题 <admin-browser-support>`。"

msgid ""
":attr:`AbstractUser.first_name <django.contrib.auth.models.User.first_name>` "
"``max_length`` increased to 150"
msgstr ""
":attr:`AbstractUser.first_name <django.contrib.auth.models.User.first_name>` "
"的 ``max_length`` 增加到 150"

msgid ""
"A migration for :attr:`django.contrib.auth.models.User.first_name` is "
"included. If you have a custom user model inheriting from ``AbstractUser``, "
"you'll need to generate and apply a database migration for your user model."
msgstr ""
"包含了 :attr:`django.contrib.auth.models.User.first_name` 的迁移。如果你有一"
"个继承自 ``AbstractUser`` 的自定义用户模型，你将需要为你的用户模型生成并应用"
"数据库迁移。"

msgid ""
"If you want to preserve the 30 character limit for first names, use a custom "
"form::"
msgstr "如果你想保留 first name 的 30 个字符限制，请使用自定义表单："

msgid ""
"The cache keys used by :ttag:`cache` and generated by :func:`~django.core."
"cache.utils.make_template_fragment_key` are different from the keys "
"generated by older versions of Django. After upgrading to Django 3.1, the "
"first request to any previously cached template fragment will be a cache "
"miss."
msgstr ""
":ttag:`cache` 使用的缓存密钥和 :func:`~django.core.cache.utils."
"make_template_fragment_key` 生成的缓存密钥与旧版本 Django 生成的密钥不同。升"
"级到 Django 3.1 后，第一次请求任何之前缓存的模板片段都会被缓存错过。"

msgid ""
"The logic behind the decision to return a redirection fallback or a 204 HTTP "
"response from the :func:`~django.views.i18n.set_language` view is now based "
"on the ``Accept`` HTTP header instead of the ``X-Requested-With`` HTTP "
"header presence."
msgstr ""
"从 :func:`~django.views.i18n.set_language` 视图中返回重定向回退或 204 HTTP 响"
"应背后的逻辑现在是基于 ``Accept`` HTTP 头而不是 ``X-Requested-With`` HTTP 头"
"的存在。"

msgid ""
"The compatibility imports of ``django.core.exceptions.EmptyResultSet`` in "
"``django.db.models.query``, ``django.db.models.sql``, and ``django.db.models."
"sql.datastructures`` are removed."
msgstr ""
"``django.db.models.query``、``django.db.models.sql`` 和 ``django.db.models."
"sql.datastructures`` 中的 ``django.core.exceptions.EmptyResultSet`` 的兼容性"
"导入被移除。"

msgid ""
"The compatibility import of ``django.core.exceptions.FieldDoesNotExist`` in "
"``django.db.models.fields`` is removed."
msgstr ""
"删除了 ``django.db.models.field`` 中 ``django.core.exceptions."
"FieldDoesNotExist`` 的兼容性导入。"

msgid ""
"The compatibility imports of ``django.forms.utils.pretty_name()`` and "
"``django.forms.boundfield.BoundField`` in ``django.forms.forms`` are removed."
msgstr ""
"删除了 ``django.forms.utils.pretty_name()`` 和 ``django.forms.boundfield."
"BoundField`` 的兼容性导入。"

msgid ""
"The compatibility imports of ``Context``, ``ContextPopException``, and "
"``RequestContext`` in ``django.template.base`` are removed."
msgstr ""
"``django.template.base`` 中的 ``Context``、``ContextPopException`` 和 "
"``RequestContext`` 的兼容性导入被移除。"

msgid ""
"The compatibility import of ``django.contrib.admin.helpers."
"ACTION_CHECKBOX_NAME`` in ``django.contrib.admin`` is removed."
msgstr ""
"删除了 ``django.contrib.admin.helpers.ACTION_CHECKBOX_NAME`` 中的兼容性导入。"

msgid ""
"The :setting:`STATIC_URL` and :setting:`MEDIA_URL` settings set to relative "
"paths are now prefixed by the server-provided value of ``SCRIPT_NAME`` (or "
"``/`` if not set). This change should not affect settings set to valid URLs "
"or absolute paths."
msgstr ""
"设置为相对路径的 :setting:`STATIC_URL` 和 :setting:`MEDIA_URL` 配置现在以服务"
"器提供的 ``SCRIPT_NAME`` 的值为前缀（如果没有设置，则为 ``/``）。这一变化不应"
"影响设置为有效 URL 或绝对路径的配置。"

msgid ""
":class:`~django.middleware.http.ConditionalGetMiddleware` no longer adds the "
"``ETag`` header to responses with an empty :attr:`~django.http.HttpResponse."
"content`."
msgstr ""
":class:`~django.middleware.http.ConditionalGetMiddleware` 不再为空 :attr:"
"`~django.http.HttpResponse.content` 的响应添加 ``ETag`` 头。"

msgid ""
"``django.utils.decorators.classproperty()`` decorator is made public and "
"moved to :class:`django.utils.functional.classproperty()`."
msgstr ""
"``django.utils.disturators.classproperty()`` 装饰器被公开并移到 :class:"
"`django.utils.functional.classproperty()`。"

msgid ""
":tfilter:`floatformat` template filter now outputs (positive) ``0`` for "
"negative numbers which round to zero."
msgstr ""
":tfilter:`floatform` 模板过滤器现在对四舍五入为零的负数输出（正）``0```。"

msgid ""
":attr:`Meta.ordering <django.db.models.Options.ordering>` and :attr:`Meta."
"unique_together <django.db.models.Options.unique_together>` options on "
"models in ``django.contrib`` modules that were formerly tuples are now lists."
msgstr ""
":attr:`Meta.ordering <django.db.models.Options.ordering>` 和 :attr:`Meta."
"unique_together <django.db.models.Options.unique_together>`` 模块中模型的选"
"项，以前是元组，现在是列表。"

msgid ""
"The admin calendar widget now handles two-digit years according to the Open "
"Group Specification, i.e. values between 69 and 99 are mapped to the "
"previous century, and values between 0 and 68 are mapped to the current "
"century."
msgstr ""
"管理日历部件现在根据开放组规范处理两位数的年份，即 69 和 99 之间的值被映射到"
"上一个世纪，0 和 68 之间的值被映射到当前世纪。"

msgid ""
"Date-only formats are removed from the default list for :setting:"
"`DATETIME_INPUT_FORMATS`."
msgstr ""
"从 :setting:`DATETIME_INPUT_FORMATS` 的默认列表中删除了仅限日期的格式。"

msgid ""
"The :class:`~django.forms.FileInput` widget no longer renders with the "
"``required`` HTML attribute when initial data exists."
msgstr ""
"当初始数据存在时，:class:`~django.forms.FileInput` 小部件不再使用 "
"``required`` HTML 属性进行渲染。"

msgid ""
"The undocumented ``django.views.debug.ExceptionReporterFilter`` class is "
"removed. As per the :ref:`custom-error-reports` documentation, classes to be "
"used with :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` need to inherit from :"
"class:`django.views.debug.SafeExceptionReporterFilter`."
msgstr ""
"删除了未记录的 ``django.views.debug.ExceptionReporterFilter`` 类。根据 :ref:"
"`custom-error-reports` 文档，与 :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` "
"一起使用的类需要继承 :class:`django.views.debug."
"SafeExceptionReporterFilter`。"

msgid ""
"The cache timeout set by :func:`~django.views.decorators.cache.cache_page` "
"decorator now takes precedence over the ``max-age`` directive from the "
"``Cache-Control`` header."
msgstr ""
":func:`~django.views.decorators.cache.cache_page` 装饰器设置的缓存超时现在优"
"先于 ``Cache-Control`` 头的 ``max-age`` 指令。"

msgid ""
"Providing a non-local remote field in the :attr:`.ForeignKey.to_field` "
"argument now raises :class:`~django.core.exceptions.FieldError`."
msgstr ""
"在 :attr:`.ForeignKey.to_field` 参数中提供一个非本地的远程字段，现在会引发 :"
"class:`~django.core.exceptions.FieldError`。"

msgid ""
":setting:`SECURE_REFERRER_POLICY` now defaults to ``'same-origin'``. See the "
"*What's New* :ref:`Security section <whats-new-security-3.1>` above for more "
"details."
msgstr ""
":setting:`SECURE_REFERRER_POLICY` 现在默认为 ``'same-origin'``。更多细节请参"
"见 *新变化* :ref:`安全章节 <whats-new-security-3.1>`。"

msgid ""
":djadmin:`check` management command now runs the ``database`` system checks "
"only for database aliases specified using :option:`check --database` option."
msgstr ""
":djadmin:`check` 管理命令现在只对使用 :option:`check --database` 选项指定的数"
"据库别名运行 ``database`` 系统检查。"

msgid ""
":djadmin:`migrate` management command now runs the ``database`` system "
"checks only for a database to migrate."
msgstr ""
":djadmin:`migrate` 管理命令现在只运行 ``database`` 系统检查要迁移的数据库。"

msgid ""
"The admin CSS classes ``row1`` and ``row2`` are removed in favor of ``:nth-"
"child(odd)`` and ``:nth-child(even)`` pseudo-classes."
msgstr ""
"管理 CSS 类 ``row1`` 和 ``row2`` 被删除，取而代之的是 ``:nth-child(odd)`` 和 "
"``:nth-child(even)`` 伪类。"

msgid ""
"The :func:`~django.contrib.auth.hashers.make_password` function now requires "
"its argument to be a string or bytes. Other types should be explicitly cast "
"to one of these."
msgstr ""
":func:`~django.contrib.auth.hashers.make_password` 函数现在要求其参数为字符串"
"或字节。其他类型的参数应该显式地转换为其中之一。"

msgid ""
"The undocumented ``version`` parameter to the :class:`~django.contrib.gis.db."
"models.functions.AsKML` function is removed."
msgstr ""
"删除了 :class:`~django.contrib.gis.db.models.function.AsKML` 函数中未记录的 "
"``version`` 参数。"

msgid ""
":ref:`JSON and YAML serializers <serialization-formats>`, used by :djadmin:"
"`dumpdata`, now dump all data with Unicode by default. If you need the "
"previous behavior, pass ``ensure_ascii=True`` to JSON serializer, or "
"``allow_unicode=False`` to YAML serializer."
msgstr ""
":ref:`JSON 和 YAML 序列化器 <serialization-formats>`，由 :djadmin:`dumpdata` "
"使用，现在默认使用 Unicode 转储所有数据。如果你需要以前的行为，传递 "
"``ensure_ascii=True`` 给 JSON 序列化器，或者 ``allow_unicode=False`` 给 YAML "
"序列化器。"

msgid ""
"The auto-reloader no longer monitors changes in built-in Django translation "
"files."
msgstr "自动重新加载器不再监控内置 Django 翻译文件的变化。"

msgid ""
"The minimum supported version of ``mysqlclient`` is increased from 1.3.13 to "
"1.4.0."
msgstr "``mysqlclient`` 的最低支持版本从 1.3.13 增加到 1.4.0。"

msgid ""
"The undocumented ``django.contrib.postgres.forms.InvalidJSONInput`` and "
"``django.contrib.postgres.forms.JSONString`` are moved to ``django.forms."
"fields``."
msgstr ""
"未记录的 ``django.contrib.postgres.forms.InvalidJSONInput`` 和 ``django."
"contrib.postgres.forms.JSONString`` 被移至 ``django.forms.field``。"

msgid ""
"The undocumented ``django.contrib.postgres.fields.jsonb.JsonAdapter`` class "
"is removed."
msgstr ""
"删除了未记录的 ``django.contrib.postgres.field.jsonb.JsonAdapter`` 类。"

msgid ""
"The :ttag:`{% localize off %} <localize>` tag and :tfilter:`unlocalize` "
"filter no longer respect :setting:`DECIMAL_SEPARATOR` setting."
msgstr ""
":ttag:`{% localize off %} <localize>` 标签和 :tfilter:`unlocalize` 过滤器不再"
"遵守 :setting:`DECIMAL_SEPARATOR` 配置。"

msgid ""
"The minimum supported version of ``asgiref`` is increased from 3.2 to 3.2.10."
msgstr "``asgiref`` 的最低支持版本从 3.2 增加到 3.2.10。"

msgid ""
"The :doc:`Media </topics/forms/media>` class now renders ``<script>`` tags "
"without the ``type`` attribute to follow `WHATWG recommendations <https://"
"html.spec.whatwg.org/multipage/scripting.html#the-script-element>`_."
msgstr ""
":doc:`Media </topics/forms/media>` 类现在不使用 ``type`` 属性来渲染 "
"``<script>`` 标签，以遵循 `WHATWG 建议 <https://html.spec.whatwg.org/"
"multipage/scripting.html#the-script-element>`_ 。"

msgid ""
":class:`~django.forms.ModelChoiceIterator`, used by :class:`~django.forms."
"ModelChoiceField` and :class:`~django.forms.ModelMultipleChoiceField`, now "
"yields 2-tuple choices containing :class:`~django.forms."
"ModelChoiceIteratorValue` instances as the first ``value`` element in each "
"choice. In most cases this proxies transparently, but if you need the "
"``field`` value itself, use the :attr:`.ModelChoiceIteratorValue.value` "
"attribute instead."
msgstr ""
":class:`~django.forms.ModelChoiceIterator`，由 :class:`~django.forms."
"ModelChoiceField` 和 :class:`~django.forms.ModelMultipleChoiceField` 使用，现"
"在产生 2 个包含 :class:`~django.forms.ModelChoiceIteratorValue` 实例的选择，"
"作为每个选择的第一个 ``value`` 元素。在大多数情况下，这个代理是透明的，但如果"
"你需要 ``field`` 值本身，请使用 :attr:`.ModelChoiceIteratorValue.value` 属性"
"代替。"

msgid "Features deprecated in 3.1"
msgstr "在 3.1 中被废弃的功能"

msgid "PostgreSQL ``JSONField``"
msgstr "PostgreSQL 的 ``JSONField``"

msgid ""
"``django.contrib.postgres.fields.JSONField`` and ``django.contrib.postgres."
"forms.JSONField`` are deprecated in favor of :class:`.models.JSONField` and :"
"class:`forms.JSONField <django.forms.JSONField>`."
msgstr ""
"``django.contrib.postgres.field.JSONField`` 和 ``django.contrib.postgres."
"forms.JSONField`` 被废弃，改用 :class:`.models.JSONField` 和 :class:`forms."
"JSONField <django.forms.JSONField>`。"

msgid ""
"The undocumented ``django.contrib.postgres.fields.jsonb.KeyTransform`` and "
"``django.contrib.postgres.fields.jsonb.KeyTextTransform`` are also "
"deprecated in favor of the transforms in ``django.db.models.fields.json``."
msgstr ""
"未记录的 ``django.contrib.postgres.fields.jsonb.KeyTransform`` 和 ``django."
"contrib.postgres.fields.jsonb.KeyTextTransform`` 也被弃用，改用 ``django.db."
"models.fields.json`` 中的变换。"

msgid ""
"The new ``JSONField``\\s, ``KeyTransform``, and ``KeyTextTransform`` can be "
"used on all supported database backends."
msgstr ""
"新的 ``JSONField``、``KeyTransform`` 和 ``KeyTextTransform`` 可用于所有支持的"
"数据库后端。"

msgid ""
"``PASSWORD_RESET_TIMEOUT_DAYS`` setting is deprecated in favor of :setting:"
"`PASSWORD_RESET_TIMEOUT`."
msgstr ""
"``PASSWORD_RESET_TIMEOUT_DAYS`` 配置已被取消，改为 :setting:"
"`PASSWORD_RESET_TIMEOUT`。"

msgid ""
"The undocumented usage of the :lookup:`isnull` lookup with non-boolean "
"values as the right-hand side is deprecated, use ``True`` or ``False`` "
"instead."
msgstr ""
"未记录的 :lookup:`isnull` 查找使用非布尔值作为右侧的用法已被废弃，请使用 "
"``True`` 或 ``False`` 代替。"

msgid ""
"The barely documented ``django.db.models.query_utils.InvalidQuery`` "
"exception class is deprecated in favor of :class:`~django.core.exceptions."
"FieldDoesNotExist` and :class:`~django.core.exceptions.FieldError`."
msgstr ""
"勉强记录的 ``django.db.models.query_utils.InvalidQuery`` 异常类被废弃，取而代"
"之的是 :class:`~django.core.exceptions.FieldDoesNotExist` 和 :class:`~django."
"core.exceptions.FieldError`。"

msgid ""
"The ``django-admin.py`` entry point is deprecated in favor of ``django-"
"admin``."
msgstr "``django-admin.py`` 的入口点已被废弃，改为 ``django-admin``。"

msgid ""
"The ``HttpRequest.is_ajax()`` method is deprecated as it relied on a jQuery-"
"specific way of signifying AJAX calls, while current usage tends to use the "
"JavaScript `Fetch API <https://developer.mozilla.org/en-US/docs/Web/API/"
"Fetch_API>`_. Depending on your use case, you can either write your own AJAX "
"detection method, or use the new :meth:`.HttpRequest.accepts` method if your "
"code depends on the client ``Accept`` HTTP header."
msgstr ""
"``HttpRequest.is_ajax()`` 方法已被废弃，因为它依赖于 jQuery 特定的方式来表示 "
"AJAX 调用，而当前的用法倾向于使用 JavaScript `Fetch API <https://developer."
"mozilla.org/en-US/docs/Web/API/Fetch_API>`_ 。根据你的用例，你可以写你自己的 "
"AJAX 检测方法，或者使用新的 :meth:`.HttpRequest.accepts` 方法，如果你的代码依"
"赖于客户端 ``Accept`` HTTP 头。"

msgid ""
"If you are writing your own AJAX detection method, ``request.is_ajax()`` can "
"be reproduced exactly as ``request.headers.get('x-requested-with') == "
"'XMLHttpRequest'``."
msgstr ""
"如果你正在编写自己的 AJAX 检测方法，``request.is_ajax()`` 可以完全复制为 "
"``request.headers.get('x-requested-with') == 'XMLHttpRequest'``。"

msgid ""
"Passing ``None`` as the first argument to ``django.utils.deprecation."
"MiddlewareMixin.__init__()`` is deprecated."
msgstr ""
"传递 ``None`` 作为 ``django.utils.deprecation.MiddlewareMixin.__init__()`` 的"
"第一个参数是过时的。"

msgid ""
"The encoding format of cookies values used by :class:`~django.contrib."
"messages.storage.cookie.CookieStorage` is different from the format "
"generated by older versions of Django. Support for the old format remains "
"until Django 4.0."
msgstr ""
":class:`~django.contrib.messages.storage.cookie.CookieStorage` 使用的 cookie "
"值的编码格式与旧版本 Django 生成的格式不同。在 Django 4.0 之前，仍然支持旧的"
"格式。"

msgid ""
"The encoding format of sessions is different from the format generated by "
"older versions of Django. Support for the old format remains until Django "
"4.0."
msgstr ""
"会话的编码格式与旧版 Django 生成的格式不同。在 Django 4.0 之前，仍然支持旧的"
"格式。"

msgid ""
"The purely documentational ``providing_args`` argument for :class:`~django."
"dispatch.Signal` is deprecated. If you rely on this argument as "
"documentation, you can move the text to a code comment or docstring."
msgstr ""
":class:`~django.dispatch.Signal` 的纯文档化 ``providing_args`` 参数已被废弃。"
"如果你依赖这个参数作为文档，你可以将文本移到代码注释或 docstring 中。"

msgid ""
"Calling ``django.utils.crypto.get_random_string()`` without a ``length`` "
"argument is deprecated."
msgstr ""
"没有 ``length`` 参数的情况下调用 ``django.utils.crypto.get_random_string()`` "
"已被废弃。"

msgid ""
"The ``list`` message for :class:`~django.forms.ModelMultipleChoiceField` is "
"deprecated in favor of ``invalid_list``."
msgstr ""
":class:`~django.forms.ModelMultipleChoiceField` 的 ``list`` 信息已被弃用，改"
"为 ``invalid_list``。"

msgid ""
"Passing raw column aliases to :meth:`.QuerySet.order_by` is deprecated. The "
"same result can be achieved by passing aliases in a :class:`~django.db."
"models.expressions.RawSQL` instead beforehand."
msgstr ""
"向 :meth:`.QuerySet.order_by` 传递原始列别名已经被废弃。通过事先在 :class:"
"`~django.db.models.expressions.RawSQL` 中传递别名，可以达到同样的效果。"

msgid ""
"The ``NullBooleanField`` model field is deprecated in favor of "
"``BooleanField(null=True, blank=True)``."
msgstr ""
"``NullBooleanField`` 模型字段已弃用，建议使用 ``BooleanField(null=True, "
"blank=True)``。"

msgid ""
"``django.conf.urls.url()`` alias of :func:`django.urls.re_path` is "
"deprecated."
msgstr ""
"``django.conf.urls.url()`` 的 :func:`django.urls.re_path` 别名已被废弃。"

msgid ""
"The ``{% ifequal %}`` and ``{% ifnotequal %}`` template tags are deprecated "
"in favor of :ttag:`{% if %}<if>`. ``{% if %}`` covers all use cases, but if "
"you need to continue using these tags, they can be extracted from Django to "
"a module and included as a built-in tag in the :class:`'builtins' <django."
"template.backends.django.DjangoTemplates>` option in :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>`."
msgstr ""
"``{% ifequal %}`` 和 ``{% ifnotequal %}`` 模板标签已被废弃，改为 :ttag:`{% "
"if %} <if>`。``{% if %}`` 涵盖了所有的用例，但如果你需要继续使用这些标签，可"
"以将它们从 Django 中提取到一个模块中，并作为一个内置标签包含在 :class:"
"`'buildins' <django.template.backends.django.DjangoTemplates>` 选项中的 :"
"setting:`OPTIONS <TEMPLATES-OPTIONS>` 中。"

msgid "``DEFAULT_HASHING_ALGORITHM`` transitional setting is deprecated."
msgstr "``DEFAULT_HASHING_ALGORITHM`` 过渡性配置已废弃。"

msgid "Features removed in 3.1"
msgstr "3.1 中删除的功能"

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 3.1."
msgstr "这些功能已经到了废弃周期，在 Django 3.1 中被删除。"

msgid ""
"See :ref:`deprecated-features-2.2` for details on these changes, including "
"how to remove usage of these features."
msgstr ""
"参见 :ref:`deprecated-features-2.2`，了解这些变化的细节，包括如何删除这些功能"
"的使用。"

msgid "``django.utils.timezone.FixedOffset`` is removed."
msgstr "``django.utils.timezone.FixedOffset`` 被删除。"

msgid "``django.core.paginator.QuerySetPaginator`` is removed."
msgstr "``django.core.paginator.QuerySetPaginator`` 被删除。"

msgid "A model's ``Meta.ordering`` doesn't affect ``GROUP BY`` queries."
msgstr "一个模型的 ``Meta.ordering`` 不影响 ``GROUP BY`` 的查询。"

msgid ""
"``django.contrib.postgres.fields.FloatRangeField`` and ``django.contrib."
"postgres.forms.FloatRangeField`` are removed."
msgstr ""
"``django.contrib.postgres.fields.FloatRangeField`` 和 ``django.contrib."
"postgres.forms.FloatRangeField`` 被删除。"

msgid "The ``FILE_CHARSET`` setting is removed."
msgstr "``FILE_CHARSET`` 配置被删除。"

msgid ""
"``django.contrib.staticfiles.storage.CachedStaticFilesStorage`` is removed."
msgstr ""
"``django.contrib.staticfiles.storage.CachedStaticFilesStorage`` 被删除。"

msgid ""
"The ``RemoteUserBackend.configure_user()`` method requires ``request`` as "
"the first positional argument."
msgstr ""
"``RemoteUserBackend.configure_user()`` 方法需要 ``request`` 作为第一个位置参"
"数。"

msgid ""
"Support for ``SimpleTestCase.allow_database_queries`` and "
"``TransactionTestCase.multi_db`` is removed."
msgstr ""
"取消对 ``SimpleTestCase.allow_database_queries`` 和 ``TransactionTestCase."
"multi_db`` 的支持。"

msgid "Django 3.1.1 release notes"
msgstr "Django 3.1.1 版本发行说明"

msgid "Django 3.1.1 fixes two security issues and several bugs in 3.1."
msgstr "Django 3.1.1 修复了 3.1 中的两个安全问题和几个漏洞。"

msgid ""
"Fixed wrapping of translated action labels in the admin's navigation sidebar "
"for East Asian languages (:ticket:`31853`)."
msgstr ""
"修正了东亚语系管理的导航侧边栏中翻译动作标签的包装问题（:ticket:`31853`）。"

msgid ""
"Fixed wrapping of long model names in the admin's navigation sidebar (:"
"ticket:`31854`)."
msgstr "修正了管理的导航侧边栏中长模型名称的包装（:ticket:`31854`）。"

msgid ""
"Fixed encoding session data while upgrading multiple instances of the same "
"project to Django 3.1 (:ticket:`31864`)."
msgstr ""
"修正了同一项目的多个实例升级到 Django 3.1 时的会话数据编码问题（:ticket:"
"`31864`）。"

msgid ""
"Adjusted admin's navigation sidebar template to reduce debug logging when "
"rendering (:ticket:`31865`)."
msgstr "调整了管理的导航侧栏模板，减少渲染时的调试日志（:ticket:`31865`）。"

msgid ""
"Fixed a regression in Django 3.1 that caused a crash when decoding an "
"invalid session data (:ticket:`31895`)."
msgstr ""
"修正了 Django 3.1 中一个在解码无效会话数据时导致崩溃的缺陷（:ticket:"
"`31895`）。"

msgid ""
"Reverted a deprecation in Django 3.1 that caused a crash when passing "
"deprecated keyword arguments to a queryset in ``TemplateView."
"get_context_data()`` (:ticket:`31877`)."
msgstr ""
"纠正了 Django 3.1 中的一个弃用问题，该问题在 ``TemplateView."
"get_context_data()`` 中传递废弃的关键字参数到查询集时导致崩溃（:ticket:"
"`31877`）。"

msgid ""
"Enforced thread sensitivity of the :class:`MiddlewareMixin.process_request() "
"<django.utils.deprecation.MiddlewareMixin>` and ``process_response()`` hooks "
"when in an async context (:ticket:`31905`)."
msgstr ""
"在异步上下文中（:ticket:`31905`），强制执行 :class:`MiddlewareMixin."
"process_request() <django.utils.deprecation.MiddlewareMixin>` 和 "
"``process_response()`` 钩子的线程敏感性。"

msgid ""
"Fixed ``__in`` lookup on key transforms for :class:`~django.db.models."
"JSONField` with MariaDB, MySQL, Oracle, and SQLite (:ticket:`31936`)."
msgstr ""
"修正了 :class:`~django.db.models.JSONField` 与 MariaDB、MySQL、Oracle 和 "
"SQLite 的键转换时的 ``__in`` 查找（:ticket:`31936`）。"

msgid ""
"Fixed a regression in Django 3.1 that caused permission errors in "
"``CommonPasswordValidator`` and ``settings.py`` generated by the :djadmin:"
"`startproject` command, when user didn't have permissions to all "
"intermediate directories in a Django installation path (:ticket:`31912`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，当用户对 Django 安装路径中的所有中间目录没有"
"权限时， :djadmin:`startproject` 命令生成的 ``CommonPasswordValidator`` 和 "
"``settings.py`` 会导致权限错误（:ticket:`31912`）。"

msgid ""
"Fixed detecting an async ``get_response`` callable in various builtin "
"middlewares (:ticket:`31928`)."
msgstr ""
"修正了在各种内置中间件中检测到异步 ``get_response`` 可调用对象的问题（:"
"ticket:`31928`）。"

msgid ""
"Fixed a ``QuerySet.order_by()`` crash on PostgreSQL when ordering and "
"grouping by :class:`~django.db.models.JSONField` with a custom :attr:"
"`~django.db.models.JSONField.decoder` (:ticket:`31956`). As a consequence, "
"fetching a ``JSONField`` with raw SQL now returns a string instead of "
"preloaded data. You will need to explicitly call ``json.loads()`` in such "
"cases."
msgstr ""
"修复了在 PostgreSQL 上对具有自定义 :attr:`~django.db.models.JSONField."
"decoder` 的 :class:`~django.db.models.JSONField` 进行排序和分组时导致的 "
"``QuerySet.order_by()`` 崩溃问题 (:ticket:`31956`)。因此，在使用原始 SQL 获"
"取 ``JSONField`` 时，现在返回一个字符串而不是预加载的数据。在这种情况下，您需"
"要明确调用 ``json.loads()``。"

msgid ""
"Fixed a ``QuerySet.delete()`` crash on MySQL, following a performance "
"regression in Django 3.1 on MariaDB 10.3.2+, when filtering against an "
"aggregate function (:ticket:`31965`)."
msgstr ""
"修正了 MySQL 上的 ``QuerySet.delete()`` 崩溃问题，这是在 MariaDB 10.3.2+ 上"
"的 Django 3.1 中出现的性能倒退，当对一个聚合函数（:ticket:`31965`）进行过滤"
"时。"

msgid ""
"Fixed a ``django.contrib.admin.EmptyFieldListFilter`` crash when using on "
"reverse relations (:ticket:`31952`)."
msgstr ""
"修正了 ``django.contrib.admin.EmptyFieldListFilter`` 在反向关系上使用时崩溃的"
"问题（:ticket:`31952`）。"

msgid ""
"Prevented content overflowing in the admin changelist view when the "
"navigation sidebar is enabled (:ticket:`31901`)."
msgstr ""
"防止在启用导航侧栏时，内容溢出到管理的变更列表视图中（:ticket:`31901`）。"

msgid "Django 3.1.10 release notes"
msgstr "Django 3.1.10 版本发行说明"

msgid "Django 3.1.10 fixes a security issue in 3.1.9."
msgstr "Django 3.1.10 修复了 3.1.9 中的一个安全问题。"

msgid "Django 3.1.11 release notes"
msgstr "Django 3.1.11 版本发行说明"

msgid "Django 3.1.11 fixes a regression in 3.1.9."
msgstr "Django 3.1.11 修复了 3.1.9 中的一个缺陷。"

msgid ""
"Fixed a regression in Django 3.1.9 where saving ``FileField`` would raise a "
"``SuspiciousFileOperation`` even when a custom :attr:`~django.db.models."
"FileField.upload_to` returns a valid file path (:ticket:`32718`)."
msgstr ""
"修正了 Django 3.1.9 中的一个缺陷，即保存 ``FileField`` 会引发 "
"``SuspiciousFileOperation``，即使自定义 :attr:`~django.db.models.FileField."
"upload_to` 返回了有效的文件路径（:ticket:`32718`）。"

msgid "Django 3.1.12 release notes"
msgstr "Django 3.1.12 版本发行说明"

msgid "Django 3.1.12 fixes two security issues in 3.1.11."
msgstr "Django 3.1.12 修复了 3.1.11 中的两个安全问题。"

msgid "Django 3.1.13 release notes"
msgstr "Django 3.1.13 版本发行说明"

msgid "*July 1, 2021*"
msgstr "*2021 年 7 月 1 日*"

msgid "Django 3.1.13 fixes a security issue with severity \"high\" in 3.1.12."
msgstr "Django 3.1.13 修复了 3.1.12 中严重程度为 “高” 的安全问题。"

msgid ""
"CVE-2021-35042: Potential SQL injection via unsanitized ``QuerySet."
"order_by()`` input"
msgstr ""
"CVE-2021-35042：通过未检验的 ``QuerySet.order_by()`` 输入进行潜在的 SQL 注入"

msgid ""
"Unsanitized user input passed to ``QuerySet.order_by()`` could bypass "
"intended column reference validation in path marked for deprecation "
"resulting in a potential SQL injection even if a deprecation warning is "
"emitted."
msgstr ""
"传递给 ``QuerySet.order_by()`` 的未经检验的用户输入可能会绕过标记为废弃的路径"
"中的预期列引用验证，导致潜在的 SQL 注入，即使已发出废弃警告。"

msgid ""
"As a mitigation the strict column reference validation was restored for the "
"duration of the deprecation period. This regression appeared in 3.1 as a "
"side effect of fixing :ticket:`31426`."
msgstr ""
"作为一种缓解措施，严格的列引用验证在废弃期间被恢复了。这个缺陷出现在 3.1 中，"
"是修复 :ticket:`31426` 的副作用。"

msgid ""
"The issue is not present in the main branch as the deprecated path has been "
"removed."
msgstr "这个问题不存在于主分支中，因为废弃的路径已经被删除。"

msgid "Django 3.1.14 release notes"
msgstr "Django 3.1.14 版本发行说明"

msgid "Django 3.1.14 fixes a security issue with severity \"low\" in 3.1.13."
msgstr "Django 3.1.14 修复了 3.1.13 版本中一个严重程度为\"低\"的安全问题。"

msgid "Django 3.1.2 release notes"
msgstr "Django 3.1.2 版本发行说明"

msgid "*October 1, 2020*"
msgstr "*2020 年 10 月 1 日*"

msgid "Django 3.1.2 fixes several bugs in 3.1.1."
msgstr "Django 3.1.2 修复了 3.1.1 中的几个漏洞。"

msgid ""
"Fixed a bug in Django 3.1 where ``FileField`` instances with a callable "
"storage were not correctly deconstructed (:ticket:`31941`)."
msgstr ""
"修正了 Django 3.1 中的一个漏洞，即在 Django 3.1 中，带有可调用对象存储的 "
"``FileField`` 实例不能正确解构（:ticket:`31941`）。"

msgid ""
"Fixed a regression in Django 3.1 where the :attr:`.QuerySet.ordered` "
"attribute returned incorrectly ``True`` for ``GROUP BY`` queries (e.g. ``."
"annotate().values()``) on models with ``Meta.ordering``. A model's ``Meta."
"ordering`` doesn't affect such queries (:ticket:`31990`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，在 Django 3.1 中，对于有 ``Meta.ordering`` 的"
"模型上的 ``GROUP BY`` 查询（例如 ``.annotate().values()``）， :attr:`."
"QuerySet.ordered` 属性会错误地返回 ``True``。模型的 ``Meta.ordering`` 不影响"
"此类查询（:ticket:`31990`）。"

msgid ""
"Fixed a regression in Django 3.1 where a queryset would crash if it "
"contained an aggregation and a ``Q`` object annotation (:ticket:`32007`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，即如果一个查询集包含一个聚合和一个 ``Q`` 对象"
"注解（:ticket:`32007`），它就会崩溃。"

msgid ""
"Fixed a bug in Django 3.1 where a test database was not synced during "
"creation when using the :setting:`MIGRATE <TEST_MIGRATE>` test database "
"setting (:ticket:`32012`)."
msgstr ""
"修正了 Django 3.1 中的一个漏洞，当使用 :setting:`MIGRATE <TEST_MIGRATE>` 测试"
"数据库配置（:ticket:`32012`）时，测试数据库在创建过程中没有同步。"

msgid ""
"Fixed a ``django.contrib.admin.EmptyFieldListFilter`` crash when using on a "
"``GenericRelation`` (:ticket:`32038`)."
msgstr ""
"修正了 ``django.contrib.admin.EmptyFieldListFilter`` 在 ``GenericRelation`` "
"上使用时崩溃的问题（:ticket:`32038`）。"

msgid ""
"Fixed a regression in Django 3.1.1 where the admin changelist filter sidebar "
"would not scroll for a long list of available filters (:ticket:`31986`)."
msgstr ""
"修正了 Django 3.1.1 中的一个缺陷，即对于一个长的可用过滤器列表（:ticket:"
"`31986`），管理的变更列表过滤侧边栏不会滚动。"

msgid "Django 3.1.3 release notes"
msgstr "Django 3.1.3 版本发行说明"

msgid ""
"Django 3.1.3 fixes several bugs in 3.1.2 and adds compatibility with Python "
"3.9."
msgstr ""
"Django 3.1.3 修复了 3.1.2 中的几个漏洞，并增加了对 Python 3.9 的兼容性。"

msgid ""
"Fixed a regression in Django 3.1.2 that caused the incorrect height of the "
"admin changelist search bar (:ticket:`32072`)."
msgstr ""
"修正了 Django 3.1.2 中的一个缺陷，该问题导致管理员变更列表搜索栏的高度不正确"
"（:ticket:`32072`）。"

msgid ""
"Fixed a regression in Django 3.1.2 that caused the incorrect width of the "
"admin changelist search bar on a filtered page (:ticket:`32091`)."
msgstr ""
"修正了 Django 3.1.2 中的一个缺陷，该问题导致在过滤页面上的管理的变更列表搜索"
"栏宽度不正确（:ticket:`32091`）。"

msgid ""
"Fixed displaying Unicode characters in :class:`forms.JSONField <django.forms."
"JSONField>` and read-only :class:`models.JSONField <django.db.models."
"JSONField>` values in the admin (:ticket:`32080`)."
msgstr ""
"修正了在管理（:ticket:`32080`）的 :class:`forms.JSONField <django.forms."
"JSONField>` 和只读 :class:`models.JSONField <django.db.models.JSONField>` 值"
"中显示 Unicode 字符的问题。"

msgid ""
"Fixed a regression in Django 3.1 that caused a crash of :class:`~django."
"contrib.postgres.aggregates.ArrayAgg` and :class:`~django.contrib.postgres."
"aggregates.StringAgg` with ``ordering`` on key transforms for :class:"
"`~django.db.models.JSONField` (:ticket:`32096`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，该问题导致 :class:`~django.contrib.postgres."
"aggregates.ArrayAgg` 和 :class:`~django.contrib.postgres.aggregates."
"StringAgg` 在 :class:`~django.db.models.JSONField` 的键出现 ``ordering`` 时进"
"行变换会导致崩溃（:ticket:`32096`）。"

msgid ""
"Fixed a regression in Django 3.1 that caused a crash of ``__in`` lookup when "
"using key transforms for :class:`~django.db.models.JSONField` in the lookup "
"value (:ticket:`32096`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，当在查询值（:ticket:`32096`）中使用 :class:"
"`~django.db.models.JSONField` 的键变换时，导致 ``__in`` 查询崩溃。"

msgid ""
"Fixed a regression in Django 3.1 that caused a crash of :class:`~django.db."
"models.ExpressionWrapper` with key transforms for :class:`~django.db.models."
"JSONField` (:ticket:`32096`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，该问题导致 :class:`~django.db.models."
"ExpressionWrapper` 与 :class:`~django.db.models.JSONField` （:ticket:"
"`32096`）的键变换崩溃。"

msgid ""
"Fixed a regression in Django 3.1 that caused a migrations crash on "
"PostgreSQL when adding an :class:`~django.contrib.postgres.constraints."
"ExclusionConstraint` with key transforms for :class:`~django.db.models."
"JSONField` in ``expressions`` (:ticket:`32096`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，当在 ``expressions`` 中为 :class:`~django."
"contrib.postgres.constraints.ExclusionConstraint` 添加一个 :class:`~django."
"db.models.JSONField` 的键变换时，会导致 PostgreSQL 的迁移崩溃（:ticket:"
"`32096`）。"

msgid ""
"Fixed a regression in Django 3.1 where :exc:`ProtectedError."
"protected_objects <django.db.models.ProtectedError>` and :exc:"
"`RestrictedError.restricted_objects <django.db.models.RestrictedError>` "
"attributes returned iterators instead of :py:class:`set` of objects (:ticket:"
"`32107`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，即 :exc:`ProtectedError.protected_objects "
"<django.db.models.ProtectedError>` 和 :exc:`RestrictedError."
"restricted_objects <django.db.models.RestrictedError>` 属性返回的是迭代器，而"
"不是 :py:class:`set` 对象（:ticket:`32107`）。"

msgid ""
"Fixed a regression in Django 3.1.2 that caused incorrect form input layout "
"on small screens in the admin change form view (:ticket:`32069`)."
msgstr ""
"修正了 Django 3.1.2 中的一个缺陷，该问题导致管理员更改表单视图中小屏幕的表单"
"输入布局不正确（:ticket:`32069`）。"

msgid ""
"Fixed a regression in Django 3.1 that invalidated pre-Django 3.1 password "
"reset tokens (:ticket:`32130`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，它使 Django 3.1 之前的密码重置令牌无效（:"
"ticket:`32130`）。"

msgid "Added support for ``asgiref`` 3.3 (:ticket:`32128`)."
msgstr "增加了对 ``asgiref`` 3.3 的支持（:ticket:`32128`）。"

msgid ""
"Fixed a regression in Django 3.1 that caused incorrect textarea layout on "
"medium-sized screens in the admin change form view with the sidebar open (:"
"ticket:`32127`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，该问题导致在打开侧边栏的情况下，管理的变更表"
"单视图中的文本框布局不正确（:ticket:`32127`）。"

msgid "Django 3.1.4 release notes"
msgstr "Django 3.1.4 版本发行说明"

msgid "*December 1, 2020*"
msgstr "*2020 年 12 月 1 日*"

msgid "Django 3.1.4 fixes several bugs in 3.1.3."
msgstr "Django 3.1.4 修复了 3.1.3 中的几个漏洞。"

msgid ""
"Fixed setting the ``Content-Length`` HTTP header in ``AsyncRequestFactory`` "
"(:ticket:`32162`)."
msgstr ""
"修正了 ``AsyncRequestFactory`` （:ticket:`32162`）中 ``Content-Length`` HTTP "
"头的配置。"

msgid ""
"Fixed passing extra HTTP headers to ``AsyncRequestFactory`` request methods "
"(:ticket:`32159`)."
msgstr ""
"修正了向 ``AsyncRequestFactory`` 请求方法传递额外的 HTTP 头信息（:ticket:"
"`32159`）。"

msgid ""
"Fixed crash of key transforms for :class:`~django.db.models.JSONField` on "
"PostgreSQL when using on a ``Subquery()`` annotation (:ticket:`32182`)."
msgstr ""
"修正了 PostgreSQL 上的 :class:`~django.db.models.JSONField` 在 "
"``Subquery()`` 注解（:ticket:`32182`）上使用时，键转换的崩溃。"

msgid ""
"Fixed a regression in Django 3.1 that caused a crash of auto-reloader for "
"certain invocations of ``runserver`` on Windows with Python 3.7 and below (:"
"ticket:`32202`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，该问题导致在 Python 3.7 及以下版本的 Windows "
"上调用 ``runserver`` 时自动加载器崩溃（:ticket:`32202`）。"

msgid ""
"Fixed a regression in Django 3.1 that caused the incorrect grouping by a "
"``Q`` object annotation (:ticket:`32200`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，该倒退导致了 ``Q`` 对象注解的分组不正确（:"
"ticket:`32200`）。"

msgid ""
"Fixed a regression in Django 3.1 that caused suppressing connection errors "
"when :class:`~django.db.models.JSONField` is used on SQLite (:ticket:"
"`32224`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，当在 SQLite 上使用 :class:`~django.db.models."
"JSONField` 时，会导致抑制连接错误（:ticket:`32224`）。"

msgid ""
"Fixed a crash on SQLite, when ``QuerySet.values()/values_list()`` contained "
"key transforms for :class:`~django.db.models.JSONField` returning non-string "
"primitive values (:ticket:`32203`)."
msgstr ""
"修正了在 SQLite 上，当 ``QuerySet.values()/values_list()`` 包含 :class:"
"`~django.db.models.JSONField` 的键变换返回非字符串基元值（:ticket:`32203`）时"
"发生的崩溃。"

msgid "Django 3.1.5 release notes"
msgstr "Django 3.1.5 版本发行说明"

msgid "*January 4, 2021*"
msgstr "*2021 年 1 月 4 日*"

msgid "Django 3.1.5 fixes several bugs in 3.1.4."
msgstr "Django 3.1.5 修复了 3.1.4 中的几个漏洞。"

msgid ""
"Fixed ``__isnull=True`` lookup on key transforms for :class:`~django.db."
"models.JSONField` with Oracle and SQLite (:ticket:`32252`)."
msgstr ""
"修正了 :class:`~django.db.models.JSONField` 在 Oracle 和 SQLite（:ticket:"
"`32252`）中键转换时的 ``__isnull=True`` 查找。"

msgid ""
"Fixed a bug in Django 3.1 that caused a crash when processing middlewares in "
"an async context with a middleware that raises a ``MiddlewareNotUsed`` "
"exception (:ticket:`32299`)."
msgstr ""
"修正了 Django 3.1 中的一个漏洞，这个漏洞导致在异步上下文中处理中间件时，中间"
"件会引发  ``MiddlewareNotUsed`` 异常（:ticket:`32299`）。"

msgid ""
"Fixed a regression in Django 3.1 that caused the incorrect prefixing of "
"``STATIC_URL`` and ``MEDIA_URL`` settings, by the server-provided value of "
"``SCRIPT_NAME`` (or ``/`` if not set), when set to a URL specifying the "
"protocol but without a top-level domain, e.g. ``http://myhost/`` (:ticket:"
"`32304`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，当配置为一个指定协议但没有顶级域名的 URL 时，"
"例如 ``http://myhost/`` （:ticket:`32304`），服务器提供的 ``SCRIPT_NAME`` "
"（如果没有设置，则为 ``/``）的值会导致 ``STATIC_URL`` 和 ``MEDIA_URL`` 配置的"
"前缀不正确。"

msgid "Django 3.1.6 release notes"
msgstr "Django 3.1.6 版本发行说明"

msgid ""
"Django 3.1.6 fixes a security issue with severity \"low\" and a bug in 3.1.5."
msgstr "Django 3.1.6 修复了一个严重性为 “低” 的安全问题和 3.1.5 中的一个漏洞。"

msgid ""
"Fixed an admin layout issue in Django 3.1 where changelist filter controls "
"would become squashed (:ticket:`32391`)."
msgstr ""
"修正了 Django 3.1 中的一个管理布局问题，即 changelist 过滤器控件会被压扁（:"
"ticket:`32391`）。"

msgid "Django 3.1.7 release notes"
msgstr "Django 3.1.7 版本发行说明"

msgid "Django 3.1.7 fixes a security issue and a bug in 3.1.6."
msgstr "Django 3.1.7 修复了 3.1.6 中的一个安全问题和一个漏洞。"

msgid ""
"Fixed a regression in Django 3.1 that caused ``RuntimeError`` instead of "
"connection errors when using only the ``'postgres'`` database (:ticket:"
"`32403`)."
msgstr ""
"修正了 Django 3.1 中的一个缺陷，当只使用 ``'postgres'`` 数据库时，会导致 "
"``RuntimeError`` 而不是连接错误（:ticket:`32403`）。"

msgid "Django 3.1.8 release notes"
msgstr "Django 3.1.8 版本发行说明"

msgid ""
"Django 3.1.8 fixes a security issue with severity \"low\" and a bug in 3.1.7."
msgstr ""
"Django 3.1.8 修复了一个严重程度为 “低” 的安全问题，以及 3.1.7 中的一个漏洞。"

msgid ""
"Fixed a bug in Django 3.1 where the output was hidden on a test error or "
"failure when using :option:`test --pdb` with the :option:`--buffer <test --"
"buffer>` option (:ticket:`32560`)."
msgstr ""
"修正了 Django 3.1 中的一个错误，当使用 :option:`test --pdb` 和 :option:`--"
"buffer <test --buffer>` 选项时，测试错误或失败时的输出被隐藏（:ticket:"
"`32560`）。"

msgid "Django 3.1.9 release notes"
msgstr "Django 3.1.9 版本发行说明"

msgid "Django 3.1.9 fixes a security issue in 3.1.8."
msgstr "Django 3.1.9 修复了 3.1.8 中的一个安全问题。"

msgid "Django 3.2 release notes"
msgstr "Django 3.2 版本发行说明"

msgid "Welcome to Django 3.2!"
msgstr "欢迎来到 Django 3.2 版本！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-3.2>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-3.2>` "
"you'll want to be aware of when upgrading from Django 3.1 or earlier. We've :"
"ref:`begun the deprecation process for some features <deprecated-"
"features-3.2>`."
msgstr ""
"这些发行说明涵盖了 :ref:`新功能 <whats-new-3.2>`，以及一些 :ref:`向后不兼容的"
"变化 <backward-incompatible-3.2>`，当你从 Django 3.1 或更早版本升级时，你需要"
"注意。我们已经 :ref:`开始了一些功能的废弃过程 <deprecated-features-3.2>`。"

msgid ""
"Django 3.2 is designated as a :term:`long-term support release <Long-term "
"support release>`. It will receive security updates for at least three years "
"after its release. Support for the previous LTS, Django 2.2, will end in "
"April 2022."
msgstr ""
"Django 3.2 被指定为 :term:`长期支持发行 <Long-term support release>`。它将在"
"发行后至少三年内获得安全更新。对前一个 LTS，即 Django 2.2 的支持将于 2022 年 "
"4 月结束。"

msgid ""
"Django 3.2 supports Python 3.6, 3.7, 3.8, 3.9, and 3.10 (as of 3.2.9). We "
"**highly recommend** and only officially support the latest release of each "
"series."
msgstr ""
"Django 3.2 支持 Python 3.6、3.7、3.8、3.9 和 3.10（从 3.2.9 开始）。我们 **高"
"度推荐** 并且只正式支持每个系列的最新版本。"

msgid "What's new in Django 3.2"
msgstr "Django 3.2 新特性"

msgid "Automatic :class:`~django.apps.AppConfig` discovery"
msgstr "自动 :class:`~django.apps.AppConfig` 发现"

msgid ""
"Most pluggable applications define an :class:`~django.apps.AppConfig` "
"subclass in an ``apps.py`` submodule. Many define a ``default_app_config`` "
"variable pointing to this class in their ``__init__.py``."
msgstr ""
"大多数可插拔的应用程序在 ``apps.py`` 子模块中定义一个 :class:`~django.apps."
"AppConfig` 子类。许多人在他们的 ``__init__.py`` 中定义了一个 "
"``default_app_config`` 的变量，指向这个类。"

msgid ""
"When the ``apps.py`` submodule exists and defines a single :class:`~django."
"apps.AppConfig` subclass, Django now uses that configuration automatically, "
"so you can remove ``default_app_config``."
msgstr ""
"当 ``apps.py`` 子模块存在并定义了一个 :class:`~django.apps.AppConfig` 子类"
"时，Django 现在自动使用该配置，所以你可以删除 ``default_app_config``。"

msgid ""
"``default_app_config`` made it possible to declare only the application's "
"path in :setting:`INSTALLED_APPS` (e.g. ``'django.contrib.admin'``) rather "
"than the app config's path (e.g. ``'django.contrib.admin.apps."
"AdminConfig'``). It was introduced for backwards-compatibility with the "
"former style, with the intent to switch the ecosystem to the latter, but the "
"switch didn't happen."
msgstr ""
"``default_app_config`` 使得在 :setting:`INSTALLED_APPS` 中只需声明应用程序的"
"路径（例如 ``'django.contrib.admin'``）而不是应用程序配置的路径（例如 "
"``'django.contrib.admin.apps.AdminConfig'``）。它的引入是为了向后兼容前者的风"
"格，目的是将生态系统切换到后者，但这种切换并没有发生。"

msgid ""
"With automatic ``AppConfig`` discovery, ``default_app_config`` is no longer "
"needed. As a consequence, it's deprecated."
msgstr ""
"随着自动发现 ``AppConfig``，``default_app_config`` 不再需要了。因此，它被废弃"
"了。"

msgid "See :ref:`configuring-applications-ref` for full details."
msgstr "详见 :ref:`configuring-applications-ref`。"

msgid "Customizing type of auto-created primary keys"
msgstr "自定义自动创建的主键的类型"

msgid ""
"When defining a model, if no field in a model is defined with :attr:"
"`primary_key=True <django.db.models.Field.primary_key>` an implicit primary "
"key is added. The type of this implicit primary key can now be controlled "
"via the :setting:`DEFAULT_AUTO_FIELD` setting and :attr:`AppConfig."
"default_auto_field <django.apps.AppConfig.default_auto_field>` attribute. No "
"more needing to override primary keys in all models."
msgstr ""
"当定义一个模型时，如果模型中没有字段被定义为 :attr:`primary_key=True <django."
"db.models.Field.primary_key>`，则会添加一个隐式主键。这个隐式主键的类型现在可"
"以通过 :setting:`DEFAULT_AUTO_FIELD` 设置和 :attr:`AppConfig."
"default_auto_field <django.apps.AppConfig.default_auto_field>` 属性来控制。不"
"再需要在所有模型中覆盖主键。"

msgid ""
"Maintaining the historical behavior, the default value for :setting:"
"`DEFAULT_AUTO_FIELD` is :class:`~django.db.models.AutoField`. Starting with "
"3.2 new projects are generated with :setting:`DEFAULT_AUTO_FIELD` set to :"
"class:`~django.db.models.BigAutoField`. Also, new apps are generated with :"
"attr:`AppConfig.default_auto_field <django.apps.AppConfig."
"default_auto_field>` set to :class:`~django.db.models.BigAutoField`. In a "
"future Django release the default value of :setting:`DEFAULT_AUTO_FIELD` "
"will be changed to :class:`~django.db.models.BigAutoField`."
msgstr ""
"保持历史行为，:setting:`DEFAULT_AUTO_FIELD` 的默认值是 :class:`~django.db."
"models.AutoField`。从 3.2 开始，新项目在生成时，:setting:"
"`DEFAULT_AUTO_FIELD` 设置为 :class:`~django.db.models.BigAutoField`。另外，新"
"的应用程序生成时，:attr:`AppConfig.default_auto_field <django.apps.AppConfig."
"default_auto_field>` 设置为 :class:`~django.db.models.BigAutoField`。在未来"
"的 Django 版本中，:setting:`DEFAULT_AUTO_FIELD` 的默认值将被改为 :class:"
"`~django.db.models.BigAutoField`。"

msgid ""
"To avoid unwanted migrations in the future, either explicitly set :setting:"
"`DEFAULT_AUTO_FIELD` to :class:`~django.db.models.AutoField`::"
msgstr ""
"为了避免将来不需要的迁移，要么明确设置 :setting:`DEFAULT_AUTO_FIELD` 为 :"
"class:`~django.db.models.AutoField` ："

msgid "or configure it on a per-app basis::"
msgstr "或在每个应用的基础上进行配置："

msgid "or on a per-model basis::"
msgstr "或在每个模型的基础上："

msgid ""
"In anticipation of the changing default, a system check will provide a "
"warning if you do not have an explicit setting for :setting:"
"`DEFAULT_AUTO_FIELD`."
msgstr ""
"由于预期默认值的变化，如果你没有明确设置 :setting:`DEFAULT_AUTO_FIELD`，系统"
"检查将提供一个警告。"

msgid ""
"When changing the value of :setting:`DEFAULT_AUTO_FIELD`, migrations for the "
"primary key of existing auto-created through tables cannot be generated "
"currently. See the :setting:`DEFAULT_AUTO_FIELD` docs for details on "
"migrating such tables."
msgstr ""
"当改变 :setting:`DEFAULT_AUTO_FIELD` 的值时，目前不能生成现有的自动创建的表的"
"主键的迁移。请参阅 :setting:`DEFAULT_AUTO_FIELD` 文档以了解迁移此类表的详情。"

msgid "Functional indexes"
msgstr "函数索引"

msgid ""
"The new :attr:`*expressions <django.db.models.Index.expressions>` positional "
"argument of :class:`Index() <django.db.models.Index>` enables creating "
"functional indexes on expressions and database functions. For example::"
msgstr ""
"新的 :attr:`*expressions <django.db.models.Index.expressions>` 的位置参数 :"
"class:`Index() <django.db.models.Index>` 能够在表达式和数据库函数上创建函数索"
"引。例如："

msgid ""
"Functional indexes are added to models using the :attr:`Meta.indexes <django."
"db.models.Options.indexes>` option."
msgstr ""
"函数索引是使用 :attr:`Meta.indexes <django.db.models.Options.indexes>` 选项添"
"加到模型的。"

msgid "``pymemcache`` support"
msgstr "``pymemcache`` 支持"

msgid ""
"The new ``django.core.cache.backends.memcached.PyMemcacheCache`` cache "
"backend allows using the :pypi:`pymemcache` library for memcached. "
"``pymemcache`` 3.4.0 or higher is required. For more details, see the :doc:"
"`documentation on caching in Django </topics/cache>`."
msgstr ""
"新的 ``django.core.cache.backends.memcached.PyMemcacheCache`` 缓存后端允许使"
"用 :pypi:`pymemcache` 库来操作 memcached。要求使用 ``pymemcache`` 的版本必须"
"是 3.4.0 或更高。有关更多详细信息，请参阅 Django 缓存文档中的 :doc:`有关缓存"
"的文档 </topics/cache>`。"

msgid "New decorators for the admin site"
msgstr "管理站点的新装饰器"

msgid ""
"The new :func:`~django.contrib.admin.display` decorator allows for easily "
"adding options to custom display functions that can be used with :attr:"
"`~django.contrib.admin.ModelAdmin.list_display` or :attr:`~django.contrib."
"admin.ModelAdmin.readonly_fields`."
msgstr ""
"新的 :func:`~django.contrib.admin.display` 装饰器允许轻松地为自定义显示函数添"
"加选项，这些函数可以与 :attr:`~django.contrib.admin.ModelAdmin.list_display` "
"或 :attr:`~django.contrib.admin.ModelAdmin.readonly_fields` 一起使用。"

msgid ""
"Likewise, the new :func:`~django.contrib.admin.action` decorator allows for "
"easily adding options to action functions that can be used with :attr:"
"`~django.contrib.admin.ModelAdmin.actions`."
msgstr ""
"同样，新的 :func:`~django.contrib.admin.action` 装饰器允许轻松地将选项添加到"
"可与 :attr:`~django.contrib.admin.ModelAdmin.actions` 一起使用的动作函数。"

msgid ""
"Using the ``@display`` decorator has the advantage that it is now possible "
"to use the ``@property`` decorator when needing to specify attributes on the "
"custom method. Prior to this it was necessary to use the ``property()`` "
"function instead after assigning the required attributes to the method."
msgstr ""
"使用 ``@display`` 装饰器的好处是，现在可以在需要指定自定义方法的属性时使用 "
"``@property`` 装饰器。在此之前，有必要在为方法指定所需的属性后使用 "
"``property()`` 函数来代替。"

msgid ""
"Using decorators has the advantage that these options are more discoverable "
"as they can be suggested by completion utilities in code editors. They are "
"merely a convenience and still set the same attributes on the functions "
"under the hood."
msgstr ""
"使用装饰器的好处是这些选项更容易被发现，因为它们可以被代码编辑器中的补全工具"
"所提示。它们仅仅是一种方便，并且仍然在幕后的函数上设置相同的属性。"

msgid ""
":attr:`.ModelAdmin.search_fields` now allows searching against quoted "
"phrases with spaces."
msgstr ""
":attr:`.ModelAdmin.search_fields` 现在允许针对带空格的引号短语进行搜索。"

msgid ""
"Read-only related fields are now rendered as navigable links if target "
"models are registered in the admin."
msgstr "如果在管理中注册了目标模型，只读的相关字段现在被呈现为可浏览的链接。"

msgid ""
"The admin now supports theming, and includes a dark theme that is enabled "
"according to browser settings. See :ref:`admin-theming` for more details."
msgstr ""
"管理现在支持主题化，包括一个根据浏览器配置启用的暗色主题。更多细节见 :ref:"
"`admin-theming`。"

msgid ""
":attr:`.ModelAdmin.autocomplete_fields` now respects :attr:`ForeignKey."
"to_field <django.db.models.ForeignKey.to_field>` and :attr:`ForeignKey."
"limit_choices_to <django.db.models.ForeignKey.limit_choices_to>` when "
"searching a related model."
msgstr ""
":attr:`.ModelAdmin.autocomplete_fields` 现在搜索一个相关模型时尊重 :attr:"
"`ForeignKey.to_field <django.db.models.ForeignKey.to_field>` 和 :attr:"
"`ForeignKey.limit_choices_to <django.db.models.ForeignKey."
"limit_choices_to>`。"

msgid ""
"The admin now installs a final catch-all view that redirects unauthenticated "
"users to the login page, regardless of whether the URL is otherwise valid. "
"This protects against a potential model enumeration privacy issue."
msgstr ""
"管理现在安装了一个全局最终回退视图，将未经认证的用户重定向到登录页面，无论该 "
"URL 是否有效。这可以防止潜在的模型枚举隐私问题。"

msgid ""
"Although not recommended, you may set the new :attr:`.AdminSite."
"final_catch_all_view` to ``False`` to disable the catch-all view."
msgstr ""
"尽管不推荐，你可以将新的 :attr:`.AdminSite.final_catch_all_view` 设置为 "
"``False`` 来禁用所有视图。"

msgid ""
"The default iteration count for the PBKDF2 password hasher is increased from "
"216,000 to 260,000."
msgstr "PBKDF2 密码散列器的默认迭代次数从 216,000 次增加到 260,000 次。"

msgid ""
"The default variant for the Argon2 password hasher is changed to Argon2id. "
"``memory_cost`` and ``parallelism`` are increased to 102,400 and 8 "
"respectively to match the ``argon2-cffi`` defaults."
msgstr ""
"Argon2 密码散列器的默认变量改为 Argon2id。``memory_cost`` 和 ``parallelism`` "
"分别增加到 102,400 和 8，以符合 ``argon2-cffi`` 的默认值。"

msgid ""
"Increasing the ``memory_cost`` pushes the required memory from 512 KB to 100 "
"MB. This is still rather conservative but can lead to problems in memory "
"constrained environments. If this is the case, the existing hasher can be "
"subclassed to override the defaults."
msgstr ""
"增加 ``memory_cost`` 将所需的内存从 512KB 推到 100MB。这仍然是相当保守的，但"
"在内存有限的环境中可能会导致问题。如果是这种情况，可以对现有的散列器进行子类"
"化以覆盖默认值。"

msgid ""
"The default salt entropy for the Argon2, MD5, PBKDF2, SHA-1 password hashers "
"is increased from 71 to 128 bits."
msgstr "Argon2, MD5, PBKDF2, SHA-1 密码散列器的默认盐熵从 71 位增加到 128 位。"

msgid ""
"The new ``absolute_max`` argument for :func:`~django.contrib.contenttypes."
"forms.generic_inlineformset_factory` allows customizing the maximum number "
"of forms that can be instantiated when supplying ``POST`` data. See :ref:"
"`formsets-absolute-max` for more details."
msgstr ""
":func:`~django.contrib.contenttypes.forms.generic_inlineformset_factory` 的新"
"参数 ``absolute_max`` 允许自定义提供 ``POST`` 数据时可以实例化的最大表单数"
"量。更多细节请参见 :ref:`formsets-absolute-max`。"

msgid ""
"The new ``can_delete_extra`` argument for :func:`~django.contrib."
"contenttypes.forms.generic_inlineformset_factory` allows removal of the "
"option to delete extra forms. See :attr:`~.BaseFormSet.can_delete_extra` for "
"more information."
msgstr ""
":func:`~django.contrib.contenttypes.forms.generic_inlineformset_factory` 的新"
"参数 ``can_delete_extra`` 允许移除删除额外表单的选项。更多信息请参见 :attr:"
"`~.BaseFormSet.can_delete_extra`。"

msgid ""
"The :meth:`.GDALRaster.transform` method now supports :class:`~django."
"contrib.gis.gdal.SpatialReference`."
msgstr ""
":meth:`.GDALRaster.transform` 方法现在支持 :class:`~django.contrib.gis.gdal."
"SpatialReference`。"

msgid ""
"The :class:`~django.contrib.gis.gdal.DataSource` class now supports :class:"
"`pathlib.Path`."
msgstr ""
":class:`~django.contrib.gis.gdal.DataSource` 类现在支持 :class:`pathlib."
"Path`。"

msgid ""
"The :class:`~django.contrib.gis.utils.LayerMapping` class now supports :"
"class:`pathlib.Path`."
msgstr ""
":class:`~django.contrib.gis.utils.LayerMapping` 类现在支持 :class:`pathlib."
"Path`。"

msgid ""
"The new :attr:`.ExclusionConstraint.include` attribute allows creating "
"covering exclusion constraints on PostgreSQL 12+."
msgstr ""
"新的 :attr:`.ExclusionConstraint.include` 属性允许在 PostgreSQL 12+ 上创建覆"
"盖排除约束。"

msgid ""
"The new ``ExclusionConstraint.opclasses`` attribute allows setting "
"PostgreSQL operator classes."
msgstr ""
"新的 ``ExclusionConstraint.opclasses`` 属性允许设置 PostgreSQL 操作符类。"

msgid ""
"The new :attr:`.JSONBAgg.ordering` attribute determines the ordering of the "
"aggregated elements."
msgstr "新的 :attr:`.JSONBAgg.ordering` 属性决定了聚合元素的排序。"

msgid ""
"The new :attr:`.JSONBAgg.distinct` attribute determines if aggregated values "
"will be distinct."
msgstr "新的 :attr:`.JSONBAgg.distinct` 属性决定了聚合的值是否会是唯一的。"

msgid ""
"The :class:`~django.contrib.postgres.operations.CreateExtension` operation "
"now checks that the extension already exists in the database and skips the "
"migration if so."
msgstr ""
":class:`~django.contrib.postgres.operations.CreateExtension` 操作现在会检查数"
"据库中是否已经存在扩展，如果存在则跳过迁移过程。"

msgid ""
"The new :class:`~django.contrib.postgres.operations.CreateCollation` and :"
"class:`~django.contrib.postgres.operations.RemoveCollation` operations allow "
"creating and dropping collations on PostgreSQL. See :ref:`manage-postgresql-"
"collations` for more details."
msgstr ""
"新的 :class:`~django.contrib.postgres.operations.CreateCollation` 和 :class:"
"`~django.contrib.postgres.operations.RemoveCollation` 操作允许在 PostgreSQL "
"上创建和删除排序。参见 :ref:`manage-postgresql-collations` 获取更多细节。"

msgid ""
"Lookups for :class:`~django.contrib.postgres.fields.ArrayField` now allow "
"(non-nested) arrays containing expressions as right-hand sides."
msgstr ""
"对 :class:`~django.contrib.postgres.fields.ArrayField` 的查找现在允许包含表达"
"式的（非嵌套）数组作为右侧。"

msgid ""
"The new :class:`OpClass() <django.contrib.postgres.indexes.OpClass>` "
"expression allows creating functional indexes on expressions with a custom "
"operator class. See :ref:`new_functional_indexes` for more details."
msgstr ""
"新的 :class:`OpClass() <django.contrib.postgres.indexes.OpClass>` 表达式允许"
"在具有自定义运算符类的表达式上创建函数索引。参见 :ref:"
"`new_functional_indexes` 获取更多细节。"

msgid ""
"The new :class:`~django.contrib.sitemaps.Sitemap` attributes :attr:`~django."
"contrib.sitemaps.Sitemap.alternates`, :attr:`~django.contrib.sitemaps."
"Sitemap.languages` and :attr:`~django.contrib.sitemaps.Sitemap.x_default` "
"allow generating sitemap *alternates* to localized versions of your pages."
msgstr ""
"新的 :class:`~django.contrib.sitemaps.Sitemap` 属性 :attr:`~django.contrib."
"sitemaps.Sitemap.alternates`、:attr:`~django.contrib.sitemaps.Sitemap."
"languages` 和 :attr:`~django.contrib.sitemaps.Sitemap.x_default` 允许生成网站"
"地图 *替换为* 你页面的本地化版本。"

msgid ""
"The new ``item_comments`` hook allows specifying a comments URL per feed "
"item."
msgstr "新的 ``item_comments`` 钩子允许为每个 feed 项目指定一个评论 URL。"

msgid ""
"Third-party database backends can now skip or mark as expected failures "
"tests in Django's test suite using the new ``DatabaseFeatures."
"django_test_skips`` and ``django_test_expected_failures`` attributes."
msgstr ""
"第三方数据库后端现在可以使用新的 ``DatabaseFeatures.django_test_skips`` 和 "
"``django_test_expected_failures`` 属性在 Django 测试套件中跳过或标记为预期失"
"败的测试。"

msgid "Decorators"
msgstr "装饰器"

msgid ""
"The new :func:`~django.views.decorators.common.no_append_slash` decorator "
"allows individual views to be excluded from :setting:`APPEND_SLASH` URL "
"normalization."
msgstr ""
"新的 :func:`~django.views.decorators.common.no_append_slash` 装饰器允许个别视"
"图从 :setting:`APPEND_SLASH` URL 规范化中排除。"

msgid ""
"Custom :class:`~django.views.debug.ExceptionReporter` subclasses can now "
"define the :attr:`~django.views.debug.ExceptionReporter.html_template_path` "
"and :attr:`~django.views.debug.ExceptionReporter.text_template_path` "
"properties to override the templates used to render exception reports."
msgstr ""
"自定义 :class:`~django.view.debug.ExceptionReporter` 子类现在可以定义 :attr:"
"`~django.view.debug.ExceptionReporter.html_template_path` 和 :attr:`~django."
"view.debug.ExceptionReporter.text_template_path` 属性来重写用于渲染异常报告的"
"模板。"

msgid ""
"The new :meth:`FileUploadHandler.upload_interrupted() <django.core.files."
"uploadhandler.FileUploadHandler.upload_interrupted>` callback allows "
"handling interrupted uploads."
msgstr ""
"新的 :meth:`FileUploadHandler.upload_interrupted() <django.core.files."
"uploadhandler.FileUploadHandler.upload_interrupted>` 回调允许处理中断的上传。"

msgid ""
"The new ``absolute_max`` argument for :func:`.formset_factory`, :func:`."
"inlineformset_factory`, and :func:`.modelformset_factory` allows customizing "
"the maximum number of forms that can be instantiated when supplying ``POST`` "
"data. See :ref:`formsets-absolute-max` for more details."
msgstr ""
":func:`.formset_factory`、:func:`.inlineformset_factory` 和 :func:`."
"modelformset_factory` 的新 ``absolute_max`` 参数允许自定义提供 ``POST`` 数据"
"时可实例化的最大表单数量。参见 :ref:`formsets-absolute-max` 以了解更多细节。"

msgid ""
"The new ``can_delete_extra`` argument for :func:`.formset_factory`, :func:`."
"inlineformset_factory`, and :func:`.modelformset_factory` allows removal of "
"the option to delete extra forms. See :attr:`~.BaseFormSet.can_delete_extra` "
"for more information."
msgstr ""
":func:`.formet_factory`、:func:`.inlineformset_factory` 和 :func:`."
"modelformset_factory` 的新参数 ``can_delete_extra`` 允许删除额外的表单选项。"
"更多信息请参见 :attr:`~.BaseFormSet.can_delete_extra`。"

msgid ""
":class:`~django.forms.formsets.BaseFormSet` now reports a user facing error, "
"rather than raising an exception, when the management form is missing or has "
"been tampered with. To customize this error message, pass the "
"``error_messages`` argument with the key ``'missing_management_form'`` when "
"instantiating the formset."
msgstr ""
":class:`~django.forms.formsets.BaseFormSet` 现在当管理表单丢失或被篡改时，会"
"报告一个面向用户的错误，而不是引发一个异常。要自定义这个错误信息，请在实例化"
"表单集时，将 ``error_messages`` 参数与 ``'missing_management_form'`` 键一起传"
"递。"

msgid ""
"The ``week_format`` attributes of :class:`~django.views.generic.dates."
"WeekMixin` and :class:`~django.views.generic.dates.WeekArchiveView` now "
"support the ``'%V'`` ISO 8601 week format."
msgstr ""
":class:`~django.views.generic.dates.WeekMixin` 和 :class:`~django.views."
"generic.dates.WeekArchiveView` 的 ``week_format`` 属性现在支持 ``'%V'`` ISO "
"8601 星期格式。"

msgid ""
":djadmin:`loaddata` now supports fixtures stored in XZ archives (``.xz``) "
"and LZMA archives (``.lzma``)."
msgstr ""
":djadmin:`loaddata` 现在支持存储在 XZ 档案（``.xz``）和 LZMA 档案（``."
"lzma``）中的固定数据。"

msgid ""
":djadmin:`dumpdata` now can compress data in the ``bz2``, ``gz``, ``lzma``, "
"or ``xz`` formats."
msgstr ""
":djadmin:`dumpdata` 现在可以压缩 ``bz2``、``gz``、``lzma`` 或 ``xz`` 格式的数"
"据。"

msgid ""
":djadmin:`makemigrations` can now be called without an active database "
"connection. In that case, check for a consistent migration history is "
"skipped."
msgstr ""
":djadmin:`makemigrations` 现在可以在没有数据库连接的情况下调用。在这种情况"
"下，会跳过检查是否有一致的迁移历史。"

msgid ""
":attr:`.BaseCommand.requires_system_checks` now supports specifying a list "
"of tags. System checks registered in the chosen tags will be checked for "
"errors prior to executing the command. In previous versions, either all or "
"none of the system checks were performed."
msgstr ""
":attr:`.BaseCommand.required_system_checks` 现在支持指定一个标签列表。在所选"
"标签中注册的系统检查将在执行命令前被检查出错误。在之前的版本中，所有的系统检"
"查或者都不执行，或者都会被执行。"

msgid ""
"Support for colored terminal output on Windows is updated. Various modern "
"terminal environments are automatically detected, and the options for "
"enabling support in other cases are improved. See :ref:`syntax-coloring` for "
"more details."
msgstr ""
"更新了对 Windows 上彩色终端输出的支持。各种现代终端环境被自动检测到，在其他情"
"况下启用支持的选项也被改进。更多细节见 :ref:`syntax-coloring`。"

msgid ""
"The new ``Operation.migration_name_fragment`` property allows providing a "
"filename fragment that will be used to name a migration containing only that "
"operation."
msgstr ""
"新的 ``Operation.migration_name_fragment`` 属性允许提供一个文件名片段，该片段"
"将被用来命名只包含该操作的迁移。"

msgid ""
"Migrations now support serialization of pure and concrete path objects from :"
"mod:`pathlib`, and :class:`os.PathLike` instances."
msgstr ""
"迁移现在支持从 :mod:`pathlib` 和 :class:`os.PathLike` 实例中序列化纯路径和具"
"体路径对象。"

msgid ""
"The new ``no_key`` parameter for :meth:`.QuerySet.select_for_update()`, "
"supported on PostgreSQL, allows acquiring weaker locks that don't block the "
"creation of rows that reference locked rows through a foreign key."
msgstr ""
"在 PostgreSQL 上支持 :meth:`.QuerySet.select_for_update()` 的新的 ``no_key`` "
"参数，允许获得较弱的锁，不会阻止创建通过外键引用被锁定行的新行。"

msgid ""
":class:`When() <django.db.models.expressions.When>` expression now allows "
"using the ``condition`` argument with ``lookups``."
msgstr ""
":class:`When() <django.db.models.expressions.When>` 表达式现在允许使用 "
"``condition`` 参数与 ``lookups``。"

msgid ""
"The new :attr:`.Index.include` and :attr:`.UniqueConstraint.include` "
"attributes allow creating covering indexes and covering unique constraints "
"on PostgreSQL 11+."
msgstr ""
"新的 :attr:`.Index.include` 和 :attr:`.UniqueConstraint.include` 属性允许在 "
"PostgreSQL 11+ 上创建覆盖索引和覆盖唯一约束。"

msgid ""
"The new :attr:`.UniqueConstraint.opclasses` attribute allows setting "
"PostgreSQL operator classes."
msgstr ""
"新的 :attr:`.UniqueConstraint.opclasses` 属性允许设置 PostgreSQL 操作符类。"

msgid ""
"The :meth:`.QuerySet.update` method now respects the ``order_by()`` clause "
"on MySQL and MariaDB."
msgstr ""
":meth:`.QuerySet.update` 方法现在尊重 MySQL 和 MariaDB 的 ``order_by()`` 子"
"句。"

msgid ""
":class:`FilteredRelation() <django.db.models.FilteredRelation>` now supports "
"nested relations."
msgstr ""
":class:`FilteredRelation() <django.db.models.FilteredRelation>` 现在支持嵌套"
"关系。"

msgid ""
"The ``of`` argument of :meth:`.QuerySet.select_for_update()` is now allowed "
"on MySQL 8.0.1+."
msgstr ""
":meth:`.QuerySet.select_for_update()` 的 ``of`` 参数现在于 MySQL 8.0.1+ 版本"
"中被允许。"

msgid ""
":class:`Value() <django.db.models.Value>` expression now automatically "
"resolves its ``output_field`` to the appropriate :class:`Field <django.db."
"models.Field>` subclass based on the type of its provided ``value`` for :py:"
"class:`bool`, :py:class:`bytes`, :py:class:`float`, :py:class:`int`, :py:"
"class:`str`, :py:class:`datetime.date`, :py:class:`datetime.datetime`, :py:"
"class:`datetime.time`, :py:class:`datetime.timedelta`, :py:class:`decimal."
"Decimal`, and :py:class:`uuid.UUID` instances. As a consequence, resolving "
"an ``output_field`` for database functions and combined expressions may now "
"crash with mixed types when using ``Value()``. You will need to explicitly "
"set the ``output_field`` in such cases."
msgstr ""
":class:`Value() <django.db.models.Value>` 表达式现在会根据其提供的 ``value`` "
"的类型自动将其 ``output_field`` 解析为适当的 :class:`Field <django.db.models."
"Field>` 子类，适用于 :py:class:`bool`、:py:class:`bytes`、:py:class:"
"`float`、:py:class:`int`、:py:class:`str`、:py:class:`datetime.date`、:py:"
"class:`datetime.datetime`、:py:class:`datetime.time`、:py:class:`datetime."
"timedelta`、:py:class:`decimal.Decimal` 和 :py:class:`uuid.UUID` 实例。因此，"
"在使用 ``Value()`` 时，解析数据库函数和组合表达式的 ``output_field`` 现在可能"
"会因混合类型而崩溃。在这种情况下，你将需要明确地设置 ``output_field``。"

msgid ""
"The new :meth:`.QuerySet.alias` method allows creating reusable aliases for "
"expressions that don't need to be selected but are used for filtering, "
"ordering, or as a part of complex expressions."
msgstr ""
"新的 :meth:`.QuerySet.alias` 方法允许为表达式创建可重复使用的别名，这些表达式"
"不需要被选择，但可用于过滤、排序，或作为复杂表达式的一部分。"

msgid ""
"The new :class:`~django.db.models.functions.Collate` function allows "
"filtering and ordering by specified database collations."
msgstr ""
"新的 :class:`~django.db.models.function.Collate` 函数允许通过指定的数据库排列"
"方式进行过滤和排序。"

msgid ""
"The ``field_name`` argument of :meth:`.QuerySet.in_bulk()` now accepts "
"distinct fields if there's only one field specified in :meth:`.QuerySet."
"distinct`."
msgstr ""
"如果在 :meth:`.QuerySet.distinct` 中只指定了一个字段，:meth:`.QuerySet."
"in_bulk()` 的 ``field_name`` 参数现在可以接受不同的字段。"

msgid ""
"The new ``tzinfo`` parameter of the :class:`~django.db.models.functions."
"TruncDate` and :class:`~django.db.models.functions.TruncTime` database "
"functions allows truncating datetimes in a specific timezone."
msgstr ""
":class:`~django.db.models.function.TruncDate` 和 :class:`~django.db.models."
"function.TruncTime` 数据库函数的新 ``tzinfo`` 参数允许截断特定时区的数据时"
"间。"

msgid ""
"The new ``db_collation`` argument for :attr:`CharField <django.db.models."
"CharField.db_collation>` and :attr:`TextField <django.db.models.TextField."
"db_collation>` allows setting a database collation for the field."
msgstr ""
"为 :attr:`CharField <django.db.models.CharField.db_collation>` 和 :attr:"
"`TextField <django.db.models.TextField.db_collation>` 新增的 "
"``db_collation`` 参数允许为字段设置一个数据库排序。"

msgid ""
"Added the :class:`~django.db.models.functions.Random` database function."
msgstr "添加了 :class:`~django.db.models.function.Random` 数据库函数。"

msgid ""
":ref:`aggregation-functions`, :class:`F() <django.db.models.F>`, :class:"
"`OuterRef() <django.db.models.OuterRef>`, and other expressions now allow "
"using transforms. See :ref:`using-transforms-in-expressions` for details."
msgstr ""
":ref:`aggregation-functions`、:class:`F() <django.db.models.F>`、:class:"
"`OuterRef() <django.db.models.OuterRef>` 以及其他表达式现在允许使用变换。详情"
"参见 :ref:`using-transforms-in-expressions`。"

msgid ""
"The new ``durable`` argument for :func:`~django.db.transaction.atomic` "
"guarantees that changes made in the atomic block will be committed if the "
"block exits without errors. A nested atomic block marked as durable will "
"raise a ``RuntimeError``."
msgstr ""
":func:`~django.db.transaction.atomic` 的新参数 ``durable`` 保证在原子块中所做"
"的更改将被提交，如果该块退出时没有错误。嵌套的原子块被标记为耐用，将引发一个 "
"``RuntimeError``。"

msgid ""
"Added the :class:`~django.db.models.functions.JSONObject` database function."
msgstr "添加了 :class:`~django.db.models.function.JSONObject` 数据库函数。"

msgid ""
"The new :meth:`django.core.paginator.Paginator.get_elided_page_range` method "
"allows generating a page range with some of the values elided. If there are "
"a large number of pages, this can be helpful for generating a reasonable "
"number of page links in a template."
msgstr ""
"新的 :meth:`django.core.paginator.Paginator.get_elided_page_range` 方法允许生"
"成一个页面范围，其中的一些值被删除。如果有大量的页面，这对在模板中生成合理数"
"量的页面链接很有帮助。"

msgid ""
"Response headers are now stored in :attr:`.HttpResponse.headers`. This can "
"be used instead of the original dict-like interface of ``HttpResponse`` "
"objects. Both interfaces will continue to be supported. See :ref:`setting-"
"header-fields` for details."
msgstr ""
"响应头信息现在被存储在 :attr:`.HttpResponse.headers` 中。这可以代替原来的 "
"``HttpResponse`` 对象的类似字典的接口。这两个接口将继续被支持。详情见 :ref:"
"`setting-header-fields`。"

msgid ""
"The new ``headers`` parameter of :class:`~django.http.HttpResponse`, :class:"
"`~django.template.response.SimpleTemplateResponse`, and :class:`~django."
"template.response.TemplateResponse` allows setting response :attr:`~django."
"http.HttpResponse.headers` on instantiation."
msgstr ""
":class:`~django.http.HttpResponse`、:class:`~django.template.response."
"SimpleTemplateResponse` 以及 :class:`~django.template.response."
"TemplateResponse` 的新 ``headers`` 参数允许在实例化时设置响应的 :attr:"
"`~django.http.HttpResponse.headers`。"

msgid ""
"The :setting:`SECRET_KEY` setting is now checked for a valid value upon "
"first access, rather than when settings are first loaded. This enables "
"running management commands that do not rely on the ``SECRET_KEY`` without "
"needing to provide a value. As a consequence of this, calling :func:`~django."
"conf.settings.configure` without providing a valid ``SECRET_KEY``, and then "
"going on to access ``settings.SECRET_KEY`` will now raise an :exc:`~django."
"core.exceptions.ImproperlyConfigured` exception."
msgstr ""
":setting:`SECRET_KEY` 配置现在是在第一次访问时检查有效值，而不是在第一次加载"
"设置时。这使得运行不依赖 ``SECRET_KEY`` 的管理命令不需要提供一个值。因此，在"
"没有提供有效的 ``SECRET_KEY`` 的情况下调用 :func:`~django.conf.settings."
"configure`，然后继续访问 ``settings.SECRET_KEY`` 现在会引发一个 :exc:"
"`~django.core.exceptions.ImproperlyConfigured` 异常。"

msgid ""
"The new ``Signer.sign_object()`` and ``Signer.unsign_object()`` methods "
"allow signing complex data structures. See :ref:`signing-complex-data` for "
"more details."
msgstr ""
"新的 ``Signer.sign_object()`` 和 ``Signer.unsign_object()`` 方法允许签署复杂"
"数据结构。更多细节见 :ref:`signing-complex-data`。"

msgid ""
"Also, :func:`signing.dumps() <django.core.signing.dumps>` and :func:`~django."
"core.signing.loads` become shortcuts for :meth:`.TimestampSigner."
"sign_object` and :meth:`~.TimestampSigner.unsign_object`."
msgstr ""
"另外， :func:`signing.dumps() <django.core.signing.dumps>` 和 :func:`~django."
"core.signing.load` 成为 :meth:`.TimestampSigner.sign_object` 和 :meth:`~."
"TimestampSigner.unsign_object` 的快捷方式。"

msgid ""
"The new :ref:`JSONL <serialization-formats-jsonl>` serializer allows using "
"the JSON Lines format with :djadmin:`dumpdata` and :djadmin:`loaddata`. This "
"can be useful for populating large databases because data is loaded line by "
"line into memory, rather than being loaded all at once."
msgstr ""
"新的 :ref:`JSONL <serialization-formats-jsonl>` 序列化器允许使用 JSON Lines "
"格式与 :djadmin:`dumpdata` 和 :djadmin:`loaddata`。这对填充大型数据库很有用，"
"因为数据是逐行加载到内存中的，而不是一次性加载。"

msgid ""
":meth:`Signal.send_robust() <django.dispatch.Signal.send_robust>` now logs "
"exceptions."
msgstr ""
":meth:`Signal.send_robust() <django.dispatch.Signal.send_robust>` 现在会记录"
"异常。"

msgid ""
":tfilter:`floatformat` template filter now allows using the ``g`` suffix to "
"force grouping by the :setting:`THOUSAND_SEPARATOR` for the active locale."
msgstr ""
":tfilter:`floatformat` 模板过滤器现在允许使用 ``g`` 后缀来强制按 :setting:"
"`THOUSAND_SEPARATOR` 对活动 locale 进行分组"

msgid ""
"Templates cached with :ref:`Cached template loaders<template-loaders>` are "
"now correctly reloaded in development."
msgstr ""
"用 :ref:`缓存的模板加载器<template-loaders>` 缓存的模板现在可以在开发模式中正"
"确地重新加载。"

msgid ""
"Objects assigned to class attributes in :meth:`.TestCase.setUpTestData` are "
"now isolated for each test method. Such objects are now required to support "
"creating deep copies with :py:func:`copy.deepcopy`. Assigning objects which "
"don't support ``deepcopy()`` is deprecated and will be removed in Django 4.1."
msgstr ""
"在 :meth:`.TestCase.setUpTestData` 中分配给类属性的对象现在对每个测试方法都是"
"孤立的。这些对象现在需要支持用 :py:func:`copy.deepcopy` 创建深度拷贝。指定不"
"支持 ``deepcopy()`` 的对象已被废弃，并将在 Django 4.1 中被移除。"

msgid ""
":class:`~django.test.runner.DiscoverRunner` now enables :py:mod:"
"`faulthandler` by default. This can be disabled by using the :option:`test --"
"no-faulthandler` option."
msgstr ""
":class:`~django.test.runner.DiscoverRunner` 现在默认启用 :py:mod:"
"`faulthandler`。这可以通过使用 :option:`test --no-faulthandler` 选项来禁用。"

msgid ""
":class:`~django.test.runner.DiscoverRunner` and the :djadmin:`test` "
"management command can now track timings, including database setup and total "
"run time. This can be enabled by using the :option:`test --timing` option."
msgstr ""
":class:`~django.test.runner.DiscoverRunner` 和 :djadmin:`test` 管理命令现在可"
"以跟踪计时，包括数据库设置和总运行时间。这可以通过使用 :option:`test --"
"timing` 选项来启用。"

msgid ""
":class:`~django.test.Client` now preserves the request query string when "
"following 307 and 308 redirects."
msgstr ""
":class:`~django.test.Client` 现在在跟随 307 和 308 重定向时保留了请求的查询字"
"符串。"

msgid ""
"The new :meth:`.TestCase.captureOnCommitCallbacks` method captures callback "
"functions passed to :func:`transaction.on_commit() <django.db.transaction."
"on_commit>` in a list. This allows you to test such callbacks without using "
"the slower :class:`.TransactionTestCase`."
msgstr ""
"新的 :meth:`.TestCase.captureOnCommitCallbacks` 方法在一个列表中捕获传递给 :"
"func:`transaction.on_commit() <django.db.transaction.on_commit>` 的回调函数。"
"这允许你在不使用较慢的 :class:`.TransactionTestCase` 的情况下测试此类回调。"

msgid ""
":meth:`TransactionTestCase.assertQuerysetEqual() <django.test."
"TransactionTestCase.assertQuerySetEqual>` now supports direct comparison "
"against another queryset rather than being restricted to comparison against "
"a list of string representations of objects when using the default value for "
"the ``transform`` argument."
msgstr ""
":meth:`TransactionTestCase.assertQuerysetEqual() <django.test."
"TransactionTestCase.assertQuerySetEqual>` 现在支持直接与另一个查询集进行比"
"较，而不仅仅是在使用默认值的情况下与对象的字符串表示列表进行比较时。"

msgid ""
"The new ``depth`` parameter of ``django.utils.timesince.timesince()`` and "
"``django.utils.timesince.timeuntil()`` functions allows specifying the "
"number of adjacent time units to return."
msgstr ""
"``django.utils.timesince.timesince()`` 和 ``django.utils.timesince."
"timeuntil()`` 函数的新 ``depth``  参数允许指定要返回的相邻时间单位的数量。"

msgid ""
"Built-in validators now include the provided value in the ``params`` "
"argument of a raised :exc:`~django.core.exceptions.ValidationError`. This "
"allows custom error messages to use the ``%(value)s`` placeholder."
msgstr ""
"内置的验证器现在包括提供的值在提出的 :exc:`~django.core.exceptions."
"ValidationError` 的 ``params`` 参数。这允许自定义错误信息使用 ``%(value)s`` "
"占位符。"

msgid ""
"The :class:`.ValidationError` equality operator now ignores ``messages`` and "
"``params`` ordering."
msgstr ""
":class:`.ValidationError` 相等运算符现在忽略了 ``messages`` 和 ``params`` 的"
"排序。"

msgid "Backwards incompatible changes in 3.2"
msgstr "3.2 中向后不兼容的更改"

msgid ""
"The new ``DatabaseFeatures.introspected_field_types`` property replaces "
"these features:"
msgstr ""
"新的 ``DatabaseFeatures.introspected_field_types`` 属性取代了这些特性："

msgid "``can_introspect_autofield``"
msgstr "``can_introspect_autofield``"

msgid "``can_introspect_big_integer_field``"
msgstr "``can_introspect_big_integer_field``"

msgid "``can_introspect_binary_field``"
msgstr "``can_introspect_binary_field``"

msgid "``can_introspect_decimal_field``"
msgstr "``can_introspect_decimal_field``"

msgid "``can_introspect_duration_field``"
msgstr "``can_introspect_duration_field``"

msgid "``can_introspect_ip_address_field``"
msgstr "``can_introspect_ip_address_field``"

msgid "``can_introspect_positive_integer_field``"
msgstr "``can_introspect_positive_integer_field``"

msgid "``can_introspect_small_integer_field``"
msgstr "``can_introspect_small_integer_field``"

msgid "``can_introspect_time_field``"
msgstr "``can_introspect_time_field``"

msgid "``introspected_big_auto_field_type``"
msgstr "``introspected_big_auto_field_type``"

msgid "``introspected_small_auto_field_type``"
msgstr "``introspected_small_auto_field_type``"

msgid "``introspected_boolean_field_type``"
msgstr "``introspected_boolean_field_type``"

msgid ""
"To enable support for covering indexes (:attr:`.Index.include`) and covering "
"unique constraints (:attr:`.UniqueConstraint.include`), set "
"``DatabaseFeatures.supports_covering_indexes`` to ``True``."
msgstr ""
"要启用对覆盖索引（:attr:`.Index.include`）和覆盖唯一约束（:attr:`."
"UniqueConstraint.include`）的支持，设置 ``DatabaseFeatures."
"supports_covering_indexes`` 为 ``True``。"

msgid ""
"Third-party database backends must implement support for column database "
"collations on ``CharField``\\s and ``TextField``\\s or set "
"``DatabaseFeatures.supports_collation_on_charfield`` and ``DatabaseFeatures."
"supports_collation_on_textfield`` to ``False``. If non-deterministic "
"collations are not supported, set ``supports_non_deterministic_collations`` "
"to ``False``."
msgstr ""
"第三方数据库后端必须实现对 ``CharField`` 和 ``TextField`` 的列数据库校对的支"
"持，或者将 ``DatabaseFeatures.supports_collation_on_charfield`` 和 "
"``DatabaseFeatures.supports_collation_on_textfield`` 设为 ``False``。如果不支"
"持非确定的排序，请将 ``supports_non_deterministic_collations`` 设为 "
"``False``。"

msgid ""
"``DatabaseOperations.random_function_sql()`` is removed in favor of the new :"
"class:`~django.db.models.functions.Random` database function."
msgstr ""
"``DatabaseOperations.random_function_sql()`` 已被删除，改用新的 :class:"
"`~django.db.models.function.Random` 数据库函数。"

msgid ""
"``DatabaseOperations.date_trunc_sql()`` and ``DatabaseOperations."
"time_trunc_sql()`` now take the optional ``tzname`` argument in order to "
"truncate in a specific timezone."
msgstr ""
"``DatabaseOperations.date_trunc_sql()`` 和 ``DatabaseOperations."
"time_trunc_sql()`` 现在接受可选的 ``tzname`` 参数，以便在特定的时区进行截断。"

msgid ""
"``DatabaseClient.runshell()`` now gets arguments and an optional dictionary "
"with environment variables to the underlying command-line client from "
"``DatabaseClient.settings_to_cmd_args_env()`` method. Third-party database "
"backends must implement ``DatabaseClient.settings_to_cmd_args_env()`` or "
"override ``DatabaseClient.runshell()``."
msgstr ""
"``DatabaseClient.runshell()`` 现在可以从 ``DatabaseClient."
"settings_to_cmd_args_env()`` 方法中获得参数和带有环境变量的可选字典给底层命令"
"行客户端。第三方数据库后端必须实现 ``DatabaseClient."
"settings_to_cmd_args_env()`` 或覆盖 ``DatabaseClient.runshell()``。"

msgid ""
"Third-party database backends must implement support for functional indexes "
"(:attr:`.Index.expressions`) or set ``DatabaseFeatures."
"supports_expression_indexes`` to ``False``. If ``COLLATE`` is not a part of "
"the ``CREATE INDEX`` statement, set ``DatabaseFeatures."
"collate_as_index_expression`` to ``True``."
msgstr ""
"第三方数据库后端必须实现对函数索引的支持（:attr:`.Index.expressions`）或者将 "
"``DatabaseFeatures.supports_expression_indexes`` 设为 ``False``。如果 "
"``COLLATE`` 不是 ``CREATE INDEX`` 语句的一部分，请将 ``DatabaseFeatures."
"collate_as_index_expression`` 设为 ``True``。"

msgid ""
"Pagination links in the admin are now 1-indexed instead of 0-indexed, i.e. "
"the query string for the first page is ``?p=1`` instead of ``?p=0``."
msgstr ""
"管理中的分页链接现在是 1 开头索引，而不是 0 开头索引，即第一页的查询字符串是 "
"``?p=1``，而不是 ``?p=0``。"

msgid ""
"The new admin catch-all view will break URL patterns routed after the admin "
"URLs and matching the admin URL prefix. You can either adjust your URL "
"ordering or, if necessary, set :attr:`AdminSite.final_catch_all_view <django."
"contrib.admin.AdminSite.final_catch_all_view>` to ``False``, disabling the "
"catch-all view. See :ref:`whats-new-3.2` for more details."
msgstr ""
"新的管理全局回退视图将打破在管理 URL 之后路由并匹配管理 URL 前缀的 URL 模式。"
"你可以调整你的 URL 排序，或者，如果有必要，将 :attr:`AdminSite."
"final_catch_all_view <django.contrib.admin.AdminSite.final_catch_all_view>` "
"设置为 ``False``，禁用全局回退视图。更多细节见 :ref:`whats-new-3.2`。"

msgid ""
"Minified JavaScript files are no longer included with the admin. If you "
"require these files to be minified, consider using a third party app or "
"external build tool. The minified vendored JavaScript files packaged with "
"the admin (e.g. :ref:`jquery.min.js <contrib-admin-jquery>`) are still "
"included."
msgstr ""
"最小化的 JavaScript 文件不再包括在管理中。如果你需要这些文件被最小化，请考虑"
"使用第三方应用程序或外部构建工具。与管理一起打包的已被最小化的 JavaScript 文"
"件（例如 :ref:`jquery.min.js <contrib-admin-jquery>`）仍然包括在内。"

msgid ""
":attr:`.ModelAdmin.prepopulated_fields` no longer strips English stop words, "
"such as ``'a'`` or ``'an'``."
msgstr ""
":attr:`.ModelAdmin.prepopulated_fields` 不再剥离英文停顿词，例如 ``'a'`` 或 "
"``'an'``。"

msgid "Support for PostGIS 2.2 is removed."
msgstr "移除对 PostGIS 2.2 的支持。"

msgid ""
"The Oracle backend now clones polygons (and geometry collections containing "
"polygons) before reorienting them and saving them to the database. They are "
"no longer mutated in place. You might notice this if you use the polygons "
"after a model is saved."
msgstr ""
"Oracle 后端现在在调整多边形（和包含多边形的几何体集合）的方向并将其保存到数据"
"库之前克隆它们。它们不再是可原地变更的。如果你在模型被保存后使用多边形，你可"
"能会注意到这一点。"

msgid "Dropped support for PostgreSQL 9.5"
msgstr "丢弃了对 PostgreSQL 9.5 的支持"

msgid ""
"Upstream support for PostgreSQL 9.5 ends in February 2021. Django 3.2 "
"supports PostgreSQL 9.6 and higher."
msgstr ""
"对 PostgreSQL 9.5 的上游支持在 2021 年 2 月结束。Django 3.2 支持 PostgreSQL "
"9.6 及以上版本。"

msgid "Dropped support for MySQL 5.6"
msgstr "丢弃了对 MySQL 5.6 的支持"

msgid ""
"The end of upstream support for MySQL 5.6 is April 2021. Django 3.2 supports "
"MySQL 5.7 and higher."
msgstr ""
"对 MySQL 5.6 的上游支持在 2021 年 4 月结束。Django 3.2 支持 MySQL 5.7 及以上"
"版本。"

msgid ""
"Django now supports non-``pytz`` time zones, such as Python 3.9+'s :mod:"
"`zoneinfo` module and its backport."
msgstr ""
"Django 现在支持非 ``pytz`` 时区，例如 Python 3.9+ 的 :mod:`zoneinfo` 模块及其"
"向后移植版本。"

msgid ""
"The undocumented ``SpatiaLiteOperations.proj4_version()`` method is renamed "
"to ``proj_version()``."
msgstr ""
"未记录的 ``SpatiaLiteOperations.proj4_version()`` 方法改名为 "
"``proj_version()``。"

msgid ""
":func:`~django.utils.text.slugify` now removes leading and trailing dashes "
"and underscores."
msgstr ""
":func:`~django.utils.text.slugify` 现在可以删除前面和后面的破折号以及下划线。"

msgid ""
"The :tfilter:`intcomma` and :tfilter:`intword` template filters no longer "
"depend on the ``USE_L10N`` setting."
msgstr ""
":tfilter:`intcomma` 和 :tfilter:`intword` 模板过滤器不再依赖于 ``USE_L10N`` "
"设置。"

msgid "Support for ``argon2-cffi`` < 19.1.0 is removed."
msgstr "移除对 ``argon2-cffi`` < 19.1.0 的支持。"

msgid ""
"The cache keys no longer includes the language when internationalization is "
"disabled (``USE_I18N = False``) and localization is enabled (``USE_L10N = "
"True``). After upgrading to Django 3.2 in such configurations, the first "
"request to any previously cached value will be a cache miss."
msgstr ""
"当国际化被禁用（``USE_I18N = False``）和本地化被启用（``USE_L10N = True``）"
"时，缓存键不再包括语言。在这样的配置下，升级到 Django 3.2 后，对任何以前的缓"
"存值的第一次请求将是一次缓存丢失。"

msgid ""
"``ForeignKey.validate()`` now uses :attr:`~django.db.models.Model."
"_base_manager` rather than :attr:`~django.db.models.Model._default_manager` "
"to check that related instances exist."
msgstr ""
"``ForeignKey.validate()`` 现在使用 :attr:`~django.db.models.Model."
"_base_manager` 而不是 :attr:`~django.db.models.Model._default_manager` 来检查"
"相关实例是否存在。"

msgid ""
"When an application defines an :class:`~django.apps.AppConfig` subclass in "
"an ``apps.py`` submodule, Django now uses this configuration automatically, "
"even if it isn't enabled with ``default_app_config``. Set ``default = "
"False`` in the :class:`~django.apps.AppConfig` subclass if you need to "
"prevent this behavior. See :ref:`whats-new-3.2` for more details."
msgstr ""
"当一个应用程序在 ``apps.py`` 子模块中定义了一个 :class:`~django.apps."
"AppConfig` 子类，Django 现在会自动使用这个配置，即使它没有用 "
"``default_app_config`` 启用。如果你需要防止这种行为，请在 :class:`~django."
"apps.AppConfig` 子类中设置 ``default = False``。更多细节见 :ref:`whats-"
"new-3.2`。"

msgid "Instantiating an abstract model now raises ``TypeError``."
msgstr "实例化一个抽象模型现在会引发 ``TypeError``。"

msgid ""
"Keyword arguments to :func:`~django.test.utils.setup_databases` are now "
"keyword-only."
msgstr ""
"对 :func:`~django.test.utils.setup_databases` 的关键字参数现在是只能用关键"
"字。"

msgid ""
"The undocumented ``django.utils.http.limited_parse_qsl()`` function is "
"removed. Please use :func:`urllib.parse.parse_qsl` instead."
msgstr ""
"删除了无文档的 ``django.utils.http.limited_parse_qsl()`` 函数。请使用 :func:"
"`urllib.parse.parse_qsl` 代替。"

msgid ""
"``django.test.utils.TestContextDecorator`` now uses :py:meth:`~unittest."
"TestCase.addCleanup` so that cleanups registered in the :py:meth:`~unittest."
"TestCase.setUp` method are called before ``TestContextDecorator.disable()``."
msgstr ""
"``django.test.utils.TestContextDecorator`` 现在使用 :py:meth:`~unittest."
"TestCase.addCleanup` 所以在 :py:meth:`~unittest.TestCase.setUp` 方法中注册的"
"清理会在 ``TestContextDecorator.disable()`` 前被调用。"

msgid ""
"``SessionMiddleware`` now raises a :exc:`~django.contrib.sessions.exceptions."
"SessionInterrupted` exception instead of :exc:`~django.core.exceptions."
"SuspiciousOperation` when a session is destroyed in a concurrent request."
msgstr ""
"当一个会话在并发请求中被销毁时，``SessionMiddleware`` 现在会引发 :exc:"
"`~django.contrib.session.exceptions.SessionInterrupted` 异常，而不是 :exc:"
"`~django.core.exceptions.SuspiciousOperation`。"

msgid ""
"The :class:`django.db.models.Field` equality operator now correctly "
"distinguishes inherited field instances across models. Additionally, the "
"ordering of such fields is now defined."
msgstr ""
":class:`django.db.models.Field` 相等运算符现在可以正确区分跨模型的继承字段实"
"例。此外，此类字段的排序现在也被定义了。"

msgid ""
"The undocumented ``django.core.files.locks.lock()`` function now returns "
"``False`` if the file cannot be locked, instead of raising :exc:"
"`BlockingIOError`."
msgstr ""
"未记录的 ``django.core.files.locks.lock()`` 函数现在在文件不能被锁定时返回 "
"``False``，而不是引发 :exc:`BlockingIOError`。"

msgid ""
"The password reset mechanism now invalidates tokens when the user email is "
"changed."
msgstr "密码重置机制现在在用户电子邮件改变时使令牌无效。"

msgid ""
":djadmin:`makemessages` command no longer processes invalid locales "
"specified using :option:`makemessages --locale` option, when they contain "
"hyphens (``'-'``)."
msgstr ""
":djadmin:`makemessages` 命令不再处理使用 :option:`makemessages --locale` 选项"
"指定的无效 locale，如果它们包含连字符（``'-'``）。"

msgid ""
"The ``django.contrib.auth.forms.ReadOnlyPasswordHashField`` form field is "
"now :attr:`~django.forms.Field.disabled` by default. Therefore "
"``UserChangeForm.clean_password()`` is no longer required to return the "
"initial value."
msgstr ""
"``django.contrib.auth.forms.ReadOnlyPasswordHashField`` 表单字段现在默认为 :"
"attr:`~django.forms.Field.disabled`。因此 ``UserChangeForm."
"clean_password()`` 不再需要返回初始值。"

msgid ""
"The ``cache.get_many()``, ``get_or_set()``, ``has_key()``, ``incr()``, "
"``decr()``, ``incr_version()``, and ``decr_version()`` cache operations now "
"correctly handle ``None`` stored in the cache, in the same way as any other "
"value, instead of behaving as though the key didn't exist."
msgstr ""
"``cache.get_many()``、``get_or_set()``、``has_key()``、``incr()``、"
"``decr()``、``incr_version()`` 和 ``decr_version()`` 的缓存操作现在可以正确处"
"理缓存中的 ``None``，与其他值相同，而不是表现为键不存在。"

msgid ""
"Due to a ``python-memcached`` limitation, the previous behavior is kept for "
"the deprecated ``MemcachedCache`` backend."
msgstr ""
"由于 ``python-memcached`` 的限制，以前的行为被保留在已废弃的 "
"``MemcachedCache`` 后端。"

msgid ""
"The minimum supported version of SQLite is increased from 3.8.3 to 3.9.0."
msgstr "SQLite 的最小支持版本从 3.8.3 增加到 3.9.0。"

msgid ""
":class:`~django.contrib.messages.storage.cookie.CookieStorage` now stores "
"messages in the :rfc:`6265` compliant format. Support for cookies that use "
"the old format remains until Django 4.1."
msgstr ""
":class:`~django.contrib.messages.storage.cookie.CookieStorage` 现在以 :rfc:"
"`6265` 兼容的格式存储信息。对使用旧格式的 cookie 的支持仍然保留到 Django "
"4.1。"

msgid ""
"The minimum supported version of ``asgiref`` is increased from 3.2.10 to "
"3.3.2."
msgstr "``asgiref`` 的最小支持版本从 3.2.10 提高到 3.3.2。"

msgid "Features deprecated in 3.2"
msgstr "在 3.2 中被废弃的功能"

msgid ""
"Assigning objects which don't support creating deep copies with :py:func:"
"`copy.deepcopy` to class attributes in :meth:`.TestCase.setUpTestData` is "
"deprecated."
msgstr ""
"在 :meth:`.TestCase.setUpTestData` 中，将不支持用 :py:func:`copy.deepcopy` 创"
"建深度拷贝的对象分配给类属性的做法已被废弃。"

msgid ""
"Using a boolean value in :attr:`.BaseCommand.requires_system_checks` is "
"deprecated. Use ``'__all__'`` instead of ``True``, and ``[]`` (an empty "
"list) instead of ``False``."
msgstr ""
"在 :attr:`.BaseCommand.requires_system_checks` 中使用一个布尔值已被废弃。使"
"用 ``'__all__'`` 来代替 ``True``，使用 ``[]``  （一个空列表）来代替 "
"``False``。"

msgid ""
"The ``whitelist`` argument and ``domain_whitelist`` attribute of :class:"
"`~django.core.validators.EmailValidator` are deprecated. Use ``allowlist`` "
"instead of ``whitelist``, and ``domain_allowlist`` instead of "
"``domain_whitelist``. You may need to rename ``whitelist`` in existing "
"migrations."
msgstr ""
":class:`~django.core.validators.EmailValidator` 的 ``whitelist`` 参数和 "
"``domain_whitelist`` 属性已被废弃。使用 ``allowlist`` 代替 ``whitelist``，"
"``domain_allowlist`` 代替 ``domain_whitelist``。你可能需要在现有的迁移中重命"
"名 ``whitelist``。"

msgid ""
"The ``default_app_config`` application configuration variable is deprecated, "
"due to the now automatic ``AppConfig`` discovery. See :ref:`whats-new-3.2` "
"for more details."
msgstr ""
"``default_app_config`` 应用程序配置变量已被废弃，因为现在自动发现了 "
"``AppConfig``。更多细节请参见 :ref:`whats-new-3.2`。"

msgid ""
"Automatically calling ``repr()`` on a queryset in ``TransactionTestCase."
"assertQuerysetEqual()``, when compared to string values, is deprecated. If "
"you need the previous behavior, explicitly set ``transform`` to ``repr``."
msgstr ""
"在 ``TransactionTestCase.assertQuerysetEqual()`` 中与字符串值比较时自动调用 "
"``repr()``，已被废弃。如果你需要以前的行为，明确设置 ``transform`` 为 "
"``repr``。"

msgid ""
"The ``django.core.cache.backends.memcached.MemcachedCache`` backend is "
"deprecated as ``python-memcached`` has some problems and seems to be "
"unmaintained. Use ``django.core.cache.backends.memcached.PyMemcacheCache`` "
"or ``django.core.cache.backends.memcached.PyLibMCCache`` instead."
msgstr ""
"``django.core.cache.backends.memcached.MemcachedCache`` 后端已被废弃，因为 "
"``python-memcached`` 有一些问题，而且似乎无人维护。使用 ``django.core.cache."
"backends.memcached.PyMemcacheCache`` 或 ``django.core.cache.backends."
"memcached.PyLibMCCache`` 代替。"

msgid ""
"The format of messages used by ``django.contrib.messages.storage.cookie."
"CookieStorage`` is different from the format generated by older versions of "
"Django. Support for the old format remains until Django 4.1."
msgstr ""
"``django.contrib.messages.storage.cookie.CookieStorage`` 使用的消息格式与旧版"
"本的 Django 生成的格式不同。对旧格式的支持一直持续到 Django 4.1。"

msgid "Django 3.2.1 release notes"
msgstr "Django 3.2.1 版本发行说明"

msgid "Django 3.2.1 fixes a security issue and several bugs in 3.2."
msgstr "Django 3.2.1 修复了 3.2 中的一个安全问题和几个漏洞。"

msgid "Corrected detection of GDAL 3.2 on Windows (:ticket:`32544`)."
msgstr "纠正了在 Windows 上对 GDAL 3.2 的检测（:ticket:`32544`）。"

msgid ""
"Fixed a bug in Django 3.2 where subclasses of ``BigAutoField`` and "
"``SmallAutoField`` were not allowed for the :setting:`DEFAULT_AUTO_FIELD` "
"setting (:ticket:`32620`)."
msgstr ""
"修正了 Django 3.2 中的一个漏洞，:setting:`DEFAULT_AUTO_FIELD` 配置无法使用 "
"``BigAutoField`` 和 ``SmallAutoField`` 的子类（:ticket:`32620`）。"

msgid ""
"Fixed a regression in Django 3.2 that caused a crash of ``QuerySet.values()/"
"values_list()`` after ``QuerySet.union()``, ``intersection()``, and "
"``difference()`` when it was ordered by an unannotated field (:ticket:"
"`32627`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，当在  ``QuerySet.union()``、"
"``intersection()`` 和 ``difference()`` 之后使用一个无注解字段进行排序的 "
"``QuerySet.values()/values_list()`` 会发生崩溃（:ticket:`32627`）。"

msgid ""
"Restored, following a regression in Django 3.2, displaying an exception "
"message on the technical 404 debug page (:ticket:`32637`)."
msgstr ""
"恢复了，在 Django 3.2 中的缺陷，在技术 404 调试页面显示异常消息（:ticket:"
"`32637`）。"

msgid ""
"Fixed a bug in Django 3.2 where a system check would crash on a reverse one-"
"to-one relationships in ``CheckConstraint.check`` or ``UniqueConstraint."
"condition`` (:ticket:`32635`)."
msgstr ""
"修正了 Django 3.2 中的一个漏洞，即在 ``CheckConstraint.check`` 或 "
"``UniqueConstraint.condition`` 中反向查询一对一关系时，系统检查会崩溃（:"
"ticket:`32635`）。"

msgid ""
"Fixed a regression in Django 3.2 that caused a crash of :attr:`.ModelAdmin."
"search_fields` when searching against phrases with unbalanced quotes (:"
"ticket:`32649`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，当搜索时带不平衡引号的短语时，会导致 :attr:`."
"ModelAdmin.search_fields` 崩溃（:ticket:`32649`）。"

msgid ""
"Fixed a bug in Django 3.2 where variable lookup errors were logged rendering "
"the sitemap template if alternates were not defined (:ticket:`32648`)."
msgstr ""
"修正了 Django 3.2 中的一个漏洞，即如果没有定义候补变量，变量查找错误会被记录"
"在站点地图模板上（:ticket:`32648`）。"

msgid ""
"Fixed a regression in Django 3.2 that caused a crash when combining ``Q()`` "
"objects which contains boolean expressions (:ticket:`32548`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，当组合包含布尔表达式（:ticket:`32548`）的 "
"``Q()`` 对象时导致崩溃的问题。"

msgid ""
"Fixed a regression in Django 3.2 that caused a crash of ``QuerySet."
"update()`` on a queryset ordered by inherited or joined fields on MySQL and "
"MariaDB (:ticket:`32645`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，该缺陷导致 ``QuerySet.update()`` 在 MySQL 和 "
"MariaDB 按继承或连接字段排序的查询集上崩溃（:ticket:`32645`）。"

msgid ""
"Fixed a regression in Django 3.2 that caused a crash when decoding a cookie "
"value, used by ``django.contrib.messages.storage.cookie.CookieStorage``, in "
"the pre-Django 3.2 format (:ticket:`32643`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，当解码由 ``django.contrib.messages.storage."
"CookieStorage`` 使用的 Django 3.2 之前格式的 cookie 值时，导致崩溃（:ticket:"
"`32643`）。"

msgid ""
"Fixed a regression in Django 3.2 that stopped the shift-key modifier "
"selecting multiple rows in the admin changelist (:ticket:`32647`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，该缺陷使 shift 键修改器无法在管理更新列表中选"
"择多行（:ticket:`32647`）。"

msgid ""
"Fixed a bug in Django 3.2 where a system check would crash on the :setting:"
"`STATICFILES_DIRS` setting with a list of 2-tuples of ``(prefix, path)`` (:"
"ticket:`32665`)."
msgstr ""
"修正了 Django 3.2 中的一个bug，即系统检查会在 :setting:`STATICFILES_DIRS` 配"
"置中出现 ``(prefix, path)`` 的二元元组列表时崩溃（:ticket:`32665`）。"

msgid ""
"Fixed a long standing bug involving queryset bitwise combination when used "
"with subqueries that began manifesting in Django 3.2, due to a separate fix "
"using ``Exists`` to ``exclude()`` multi-valued relationships (:ticket:"
"`32650`)."
msgstr ""
"修正了一个长期存在的漏洞，涉及到与子查询一起使用时的查询集按位组合，该漏洞在 "
"Django 3.2 中开始出现，是由于一个使用 ``Exists`` 来 ``exclude()`` 多值关系的"
"单独修正（:ticket:`32650`）。"

msgid ""
"Fixed a bug in Django 3.2 where variable lookup errors were logged when "
"rendering some admin templates (:ticket:`32681`)."
msgstr ""
"修正了 Django 3.2 中的一个漏洞，即在渲染某些管理模板时记录了变量查询错误（:"
"ticket:`32681`）。"

msgid ""
"Fixed a bug in Django 3.2 where an admin changelist would crash when "
"deleting objects filtered against multi-valued relationships (:ticket:"
"`32682`). The admin changelist now uses ``Exists()`` instead of ``QuerySet."
"distinct()`` because calling ``delete()`` after ``distinct()`` is not "
"allowed in Django 3.2 to address a data loss possibility."
msgstr ""
"在 Django 3.2 中修复了一个 bug，该 bug 导致在删除针对多值关系进行过滤的对象"
"时，管理员 changelist 会崩溃 (:ticket:`32682`)。管理员 changelist 现在使用 "
"``Exists()`` 而不是 ``QuerySet.distinct()``，因为在 Django 3.2 中不允许在 "
"``distinct()`` 后调用 ``delete()``，以解决数据丢失的可能性。"

msgid ""
"Fixed a regression in Django 3.2 where the calling process environment would "
"not be passed to the ``dbshell`` command on PostgreSQL (:ticket:`32687`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，即在 PostgreSQL 上调用进程环境不会被传递给 "
"``dbshell`` 命令（:ticket:`32687`）。"

msgid ""
"Fixed a performance regression in Django 3.2 when building complex filters "
"with subqueries (:ticket:`32632`). As a side-effect the private API to check "
"``django.db.sql.query.Query`` equality is removed."
msgstr ""
"修正了 Django 3.2 中使用子查询构建复杂过滤器时的性能缺陷（:ticket:`32632`）。"
"作为一个副作用，删除了检查 ``django.db.sql.query.Query`` 相等的私有 API。"

msgid "Django 3.2.10 release notes"
msgstr "Django 3.2.10 版本发行说明"

msgid ""
"Django 3.2.10 fixes a security issue with severity \"low\" and a bug in "
"3.2.9."
msgstr ""
"Django 3.2.10 修复了 3.2.9 版本中一个严重程度为\"低\"的安全问题和一个错误。"

msgid ""
"Fixed a regression in Django 3.2 that caused a crash of ``setUpTestData()`` "
"with ``BinaryField`` on PostgreSQL, which is ``memoryview``-backed (:ticket:"
"`33333`)."
msgstr ""
"修复了 Django 3.2 中的一个回归问题，该问题导致在 PostgreSQL 上使用 "
"``memoryview`` 支持的 ``BinaryField`` 时，``setUpTestData()`` 崩溃 (:ticket:"
"`33333`)。"

msgid "Django 3.2.11 release notes"
msgstr "Django 3.2.11 版本发行说明"

msgid ""
"Django 3.2.11 fixes one security issue with severity \"medium\" and two "
"security issues with severity \"low\" in 3.2.10."
msgstr ""
"Django 3.2.11 修复了 3.2.10 版本中一个严重程度为\"中\"的安全问题和两个严重程"
"度为\"低\"的安全问题。"

msgid "Django 3.2.12 release notes"
msgstr "Django 3.2.12 版本发行说明"

msgid ""
"Django 3.2.12 fixes two security issues with severity \"medium\" in 3.2.11."
msgstr "Django 3.2.12 修复了 3.2.11 版本中两个严重程度为\"中\"的安全问题。"

msgid "Django 3.2.13 release notes"
msgstr "Django 3.2.13 版本发行说明"

msgid ""
"Django 3.2.13 fixes two security issues with severity \"high\" in 3.2.12 and "
"a regression in 3.2.4."
msgstr ""
"Django 3.2.13 修复了 3.2.12 版本中两个严重程度为\"高\"的安全问题，以及 3.2.4 "
"版本中的一个回归问题。"

msgid ""
"Fixed a regression in Django 3.2.4 that caused the auto-reloader to no "
"longer detect changes when the ``DIRS`` option of the ``TEMPLATES`` setting "
"contained an empty string (:ticket:`33628`)."
msgstr ""
"修复了 Django 3.2.4 中的一个回归问题，该问题导致当 ``TEMPLATES`` 设置的 "
"``DIRS`` 选项包含空字符串时，自动重新加载器不再检测到更改 (:ticket:`33628`)。"

msgid "Django 3.2.14 release notes"
msgstr "Django 3.2.14 版本发行说明"

msgid "*July 4, 2022*"
msgstr "*2022 年 7 月 4 日*"

msgid "Django 3.2.14 fixes a security issue with severity \"high\" in 3.2.13."
msgstr "Django 3.2.14 修复了 3.2.13 版本中一个严重程度为\"高\"的安全问题。"

msgid ""
"CVE-2022-34265: Potential SQL injection via ``Trunc(kind)`` and "
"``Extract(lookup_name)`` arguments"
msgstr ""
"CVE-2022-34265: 通过 ``Trunc(kind)`` 和 ``Extract(lookup_name)`` 参数潜在的 "
"SQL 注入漏洞"

msgid ""
":class:`Trunc() <django.db.models.functions.Trunc>` and :class:`Extract() "
"<django.db.models.functions.Extract>` database functions were subject to SQL "
"injection if untrusted data was used as a ``kind``/``lookup_name`` value."
msgstr ""
":class:`Trunc() <django.db.models.functions.Trunc>` 和 :class:`Extract() "
"<django.db.models.functions.Extract>` 数据库函数在使用不受信任的数据作为 "
"``kind``/``lookup_name`` 值时可能受到 SQL 注入的影响。"

msgid ""
"Applications that constrain the lookup name and kind choice to a known safe "
"list are unaffected."
msgstr "将约束查找名称和类型选择在已知安全列表中的应用程序不受影响。"

msgid "Django 3.2.15 release notes"
msgstr "Django 3.2.15 版本发行说明"

msgid "*August 3, 2022*"
msgstr "*2022 年 8 月 3 日*"

msgid "Django 3.2.15 fixes a security issue with severity \"high\" in 3.2.14."
msgstr "Django 3.2.15 修复了 3.2.14 版本中一个严重程度为\"高\"的安全问题。"

msgid ""
"CVE-2022-36359: Potential reflected file download vulnerability in "
"``FileResponse``"
msgstr "CVE-2022-36359: ``FileResponse`` 中的潜在反射文件下载漏洞"

msgid ""
"An application may have been vulnerable to a reflected file download (RFD) "
"attack that sets the Content-Disposition header of a :class:`~django.http."
"FileResponse` when the ``filename`` was derived from user-supplied input. "
"The ``filename`` is now escaped to avoid this possibility."
msgstr ""
"一个应用程序可能对反射性文件下载（RFD）攻击存在漏洞，当 ``filename`` 是从用户"
"提供的输入派生时，它会设置 :class:`~django.http.FileResponse` 的 Content-"
"Disposition 标头。现在对 ``filename`` 进行了转义以避免这种可能性。"

msgid "Django 3.2.16 release notes"
msgstr "Django 3.2.16 版本发行说明"

msgid "*October 4, 2022*"
msgstr "*2022 年 10 月 4 日*"

msgid ""
"Django 3.2.16 fixes a security issue with severity \"medium\" in 3.2.15."
msgstr "Django 3.2.16 修复了 3.2.15 版本中一个严重程度为\"中\"的安全问题。"

msgid ""
"CVE-2022-41323: Potential denial-of-service vulnerability in "
"internationalized URLs"
msgstr "CVE-2022-41323 ：国际化 URL 中存在潜在的拒绝服务漏洞。"

msgid ""
"Internationalized URLs were subject to potential denial of service attack "
"via the locale parameter."
msgstr "国际化 URL 可能通过 locale 参数受到拒绝服务攻击的威胁。"

msgid "Django 3.2.17 release notes"
msgstr "Django 3.2.17 版本发行说明"

msgid "*February 1, 2023*"
msgstr "*2023 年 2 月 1 日*"

msgid ""
"Django 3.2.17 fixes a security issue with severity \"moderate\" in 3.2.16."
msgstr "Django 3.2.17 修复了 3.2.16 版本中一个严重程度为\"中等\"的安全问题。"

msgid ""
"CVE-2023-23969: Potential denial-of-service via ``Accept-Language`` headers"
msgstr "CVE-2023-23969: 通过 ``Accept-Language`` 标头的潜在拒绝服务漏洞"

msgid ""
"The parsed values of ``Accept-Language`` headers are cached in order to "
"avoid repetitive parsing. This leads to a potential denial-of-service vector "
"via excessive memory usage if large header values are sent."
msgstr ""
"为了避免重复解析，``Accept-Language`` 标头的解析值被缓存起来。如果发送大型标"
"头值，这可能导致潜在的拒绝服务攻击向量，因为会占用大量内存。"

msgid ""
"In order to avoid this vulnerability, the ``Accept-Language`` header is now "
"parsed up to a maximum length."
msgstr ""
"为了避免这个漏洞，现在对 ``Accept-Language`` 标头进行了最大长度限制的解析。"

msgid "Django 3.2.18 release notes"
msgstr "Django 3.2.18 版本发行说明"

msgid "*February 14, 2023*"
msgstr "*2023 年 2 月 14 日*"

msgid ""
"Django 3.2.18 fixes a security issue with severity \"moderate\" in 3.2.17."
msgstr "Django 3.2.18 修复了 3.2.17 版本中一个严重程度为\"中等\"的安全问题。"

msgid ""
"CVE-2023-24580: Potential denial-of-service vulnerability in file uploads"
msgstr "CVE-2023-24580 ：文件上传中存在潜在的拒绝服务漏洞。"

msgid ""
"Passing certain inputs to multipart forms could result in too many open "
"files or memory exhaustion, and provided a potential vector for a denial-of-"
"service attack."
msgstr ""
"向多部分表单传递特定输入可能导致过多的打开文件或内存耗尽，并为拒绝服务攻击提"
"供了潜在的入口。"

msgid ""
"The number of files parts parsed is now limited via the new :setting:"
"`DATA_UPLOAD_MAX_NUMBER_FILES` setting."
msgstr ""
"现在通过新的 :setting:`DATA_UPLOAD_MAX_NUMBER_FILES` 设置来限制解析的文件部分"
"数量。"

msgid "Django 3.2.19 release notes"
msgstr "Django 3.2.19 版本发行说明"

msgid "*May 3, 2023*"
msgstr "*2023 年 5 月 3 日*"

msgid "Django 3.2.19 fixes a security issue with severity \"low\" in 3.2.18."
msgstr "Django 3.2.19 修复了 3.2.18 版本中一个严重程度为\"低\"的安全问题。"

msgid ""
"CVE-2023-31047: Potential bypass of validation when uploading multiple files "
"using one form field"
msgstr ""
"CVE-2023-31047 ：通过使用一个表单字段上传多个文件时，存在绕过验证的潜在漏洞。"

msgid ""
"Uploading multiple files using one form field has never been supported by :"
"class:`.forms.FileField` or :class:`.forms.ImageField` as only the last "
"uploaded file was validated. Unfortunately, :ref:`uploading_multiple_files` "
"topic suggested otherwise."
msgstr ""
"使用一个表单字段上传多个文件从未得到 :class:`.forms.FileField` 或 :class:`."
"forms.ImageField` 的支持，因为只有最后上传的文件会被验证。不幸的是，:ref:"
"`uploading_multiple_files` 主题提到了相反的情况。"

msgid ""
"In order to avoid the vulnerability, :class:`~django.forms."
"ClearableFileInput` and :class:`~django.forms.FileInput` form widgets now "
"raise ``ValueError`` when the ``multiple`` HTML attribute is set on them. To "
"prevent the exception and keep the old behavior, set "
"``allow_multiple_selected`` to ``True``."
msgstr ""
"为了避免这个漏洞，现在当在 :class:`~django.forms.ClearableFileInput` 和 :"
"class:`~django.forms.FileInput` 表单小部件上设置了 ``multiple`` HTML 属性时，"
"它们会引发 ``ValueError``。为了防止异常并保持旧的行为，将 "
"``allow_multiple_selected`` 设置为 ``True``。"

msgid ""
"For more details on using the new attribute and handling of multiple files "
"through a single field, see :ref:`uploading_multiple_files`."
msgstr ""
"有关使用新属性以及通过单个字段处理多个文件的更多详细信息，请参阅 :ref:"
"`uploading_multiple_files`。"

msgid "Django 3.2.2 release notes"
msgstr "Django 3.2.2 版本发行说明"

msgid "Django 3.2.2 fixes a security issue and a bug in 3.2.1."
msgstr "Django 3.2.2 修复了 3.2.1 中的一个安全问题和一个漏洞。"

msgid ""
"Prevented, following a regression in Django 3.2.1, :djadmin:`makemigrations` "
"from generating infinite migrations for a model with ``Meta.ordering`` "
"contained ``OrderBy`` expressions (:ticket:`32714`)."
msgstr ""
"在 Django 3.2.1 版本中，防止了 :djadmin:`makemigrations` 对 ``Meta.order`` 包"
"含 ``OrderBy`` 表达式的模型产生无限的迁移（:ticket:`32714`）。"

msgid "Django 3.2.20 release notes"
msgstr "Django 3.2.20 版本发行说明"

msgid "*July 3, 2023*"
msgstr "*2023 年 7 月 3 日*"

msgid ""
"Django 3.2.20 fixes a security issue with severity \"moderate\" in 3.2.19."
msgstr ""
"Django 3.2.20 修复了在 3.2.19 中的一个安全问题，安全级别为 \"moderate\"。"

msgid ""
"CVE-2023-36053: Potential regular expression denial of service vulnerability "
"in ``EmailValidator``/``URLValidator``"
msgstr ""
"CVE-2023-36053: ``EmailValidator``/``URLValidator`` 中潜在的正则表达式拒绝服"
"务漏洞"

msgid ""
"``EmailValidator`` and ``URLValidator`` were subject to potential regular "
"expression denial of service attack via a very large number of domain name "
"labels of emails and URLs."
msgstr ""
"``EmailValidator`` 和 ``URLValidator`` 可能受到通过非常大数量的电子邮件和 "
"URL 的域名标签发起的正则表达式拒绝服务攻击的影响。"

msgid "Django 3.2.21 release notes"
msgstr "Django 3.2.21 版本发行说明"

msgid "*September 4, 2023*"
msgstr "*2023 年 9 月 4 日*"

msgid ""
"Django 3.2.21 fixes a security issue with severity \"moderate\" in 3.2.20."
msgstr ""
"Django 3.2.21 修复了在 3.2.20 中的一个安全问题，安全级别为 \"moderate\"。"

msgid ""
"CVE-2023-41164: Potential denial of service vulnerability in ``django.utils."
"encoding.uri_to_iri()``"
msgstr ""
"CVE-2023-41164: ``django.utils.encoding.uri_to_iri()`` 中的潜在拒绝服务漏洞"

msgid ""
"``django.utils.encoding.uri_to_iri()`` was subject to potential denial of "
"service attack via certain inputs with a very large number of Unicode "
"characters."
msgstr ""
"``django.utils.encoding.uri_to_iri()`` 可能受到通过带有大量 Unicode 字符的某"
"些输入发起的拒绝服务攻击的影响。"

msgid "Django 3.2.22 release notes"
msgstr "Django 3.2.22 版本发行说明"

msgid "*October 4, 2023*"
msgstr "*2023 年 10 月 4 日*"

msgid ""
"Django 3.2.22 fixes a security issue with severity \"moderate\" in 3.2.21."
msgstr ""
"Django 3.2.22 修复了在 3.2.21 中的一个安全问题，安全级别为 \"moderate\"。"

msgid ""
"CVE-2023-43665: Denial-of-service possibility in ``django.utils.text."
"Truncator``"
msgstr ""
"CVE-2023-43665: ``django.utils.text.Truncator`` 中的可能导致拒绝服务的漏洞"

msgid ""
"Following the fix for :cve:`2019-14232`, the regular expressions used in the "
"implementation of ``django.utils.text.Truncator``'s ``chars()`` and "
"``words()`` methods (with ``html=True``) were revised and improved. However, "
"these regular expressions still exhibited linear backtracking complexity, so "
"when given a very long, potentially malformed HTML input, the evaluation "
"would still be slow, leading to a potential denial of service vulnerability."
msgstr ""
"在修复了 :cve:`2019-14232` 后，重新审查并改进了 ``django.utils.text."
"Truncator`` 的 ``chars()`` 和 ``words()`` 方法（使用 ``html=True``）中使用的"
"正则表达式。但是，这些正则表达式仍然表现出线性回溯复杂性，因此如果输入一个非"
"常长且可能格式不正确的 HTML 输入，评估仍然会很慢，从而导致潜在的拒绝服务漏"
"洞。"

msgid ""
"The ``chars()`` and ``words()`` methods are used to implement the :tfilter:"
"`truncatechars_html` and :tfilter:`truncatewords_html` template filters, "
"which were thus also vulnerable."
msgstr ""
"``chars()`` 和 ``words()`` 方法用于实现 :tfilter:`truncatechars_html` 和 :"
"tfilter:`truncatewords_html` 模板过滤器，因此这些模板过滤器也存在漏洞。"

msgid ""
"The input processed by ``Truncator``, when operating in HTML mode, has been "
"limited to the first five million characters in order to avoid potential "
"performance and memory issues."
msgstr ""
"为了避免潜在的性能和内存问题，当以 HTML 模式运行时，``Truncator`` 处理的输入"
"已被限制为前五百万个字符。"

msgid "Django 3.2.23 release notes"
msgstr "Django 3.2.23 版本发行说明"

msgid "*November 1, 2023*"
msgstr "*2023 年 11 月 1 日*"

msgid ""
"Django 3.2.23 fixes a security issue with severity \"moderate\" in 3.2.22."
msgstr ""
"Django 3.2.23 修复了在 3.2.22 中的一个安全问题，安全级别为 \"moderate\"。"

msgid ""
"CVE-2023-46695: Potential denial of service vulnerability in "
"``UsernameField`` on Windows"
msgstr "CVE-2023-46695: ``UsernameField`` 在 Windows 上的潜在拒绝服务漏洞"

msgid ""
"The :func:`NFKC normalization <python:unicodedata.normalize>` is slow on "
"Windows. As a consequence, ``django.contrib.auth.forms.UsernameField`` was "
"subject to a potential denial of service attack via certain inputs with a "
"very large number of Unicode characters."
msgstr ""
"在 Windows 上，:func:`NFKC normalization <python:unicodedata.normalize>` 的速"
"度较慢。因此，``django.contrib.auth.forms.UsernameField`` 可能会受到通过具有"
"大量 Unicode 字符的某些输入发起的潜在拒绝服务攻击的影响。"

msgid ""
"In order to avoid the vulnerability, invalid values longer than "
"``UsernameField.max_length`` are no longer normalized, since they cannot "
"pass validation anyway."
msgstr ""
"为了避免这个漏洞，超过 ``UsernameField.max_length`` 长度的无效值不再进行规范"
"化，因为它们无论如何都无法通过验证。"

msgid "Django 3.2.24 release notes"
msgstr "Django 3.2.24 版本发行说明"

msgid "*February 6, 2024*"
msgstr "*2024 年 2 月 6 日*"

msgid ""
"Django 3.2.24 fixes a security issue with severity \"moderate\" in 3.2.23."
msgstr ""
"Django 3.2.24 修复了在 3.2.23 中的一个安全问题，安全级别为 \"moderate\"。"

msgid ""
"CVE-2024-24680: Potential denial-of-service in ``intcomma`` template filter"
msgstr "CVE-2024-24680：``intcomma`` 模板过滤器中存在潜在的拒绝服务漏洞"

msgid ""
"The ``intcomma`` template filter was subject to a potential denial-of-"
"service attack when used with very long strings."
msgstr ""
"使用非常长的字符串时，``intcomma`` 模板过滤器存在潜在的拒绝服务攻击风险。"

msgid "Django 3.2.25 release notes"
msgstr "Django 3.2.25 版本发行说明"

msgid "*March 4, 2024*"
msgstr "*2024 年 3 月 4 日*"

msgid ""
"Django 3.2.25 fixes a security issue with severity \"moderate\" and a "
"regression in 3.2.24."
msgstr ""
"Django 3.2.25 修复了一些\"中等\"严重性的安全问题，以及 3.2.24 版本中的一个错"
"误。"

msgid ""
"CVE-2024-27351: Potential regular expression denial-of-service in ``django."
"utils.text.Truncator.words()``"
msgstr ""
"CVE-2024-27351: ``django.utils.text.Truncator.words()`` 存在潜在的正则表达式"
"拒绝服务漏洞"

msgid ""
"``django.utils.text.Truncator.words()`` method (with ``html=True``) and :"
"tfilter:`truncatewords_html` template filter were subject to a potential "
"regular expression denial-of-service attack using a suitably crafted string "
"(follow up to :cve:`2019-14232` and :cve:`2023-43665`)."
msgstr ""
"``django.utils.text.Truncator.words()`` 方法（使用 ``html=True``）和 :"
"tfilter:`truncatewords_html` 模板过滤器可能受到潜在的正则表达式拒绝服务攻击，"
"使用精心设计的字符串（对 :cve:`2019-14232` 和 :cve:`2023-43665` 的后续）。"

msgid ""
"Fixed a regression in Django 3.2.24 where ``intcomma`` template filter could "
"return a leading comma for string representation of floats (:ticket:`35172`)."
msgstr ""
"修复了 Django 3.2.24 中的一个回归问题，即 ``intcomma`` 模板过滤器可能在浮点数"
"的字符串表示中返回一个前导逗号（:ticket:`35172`）。"

msgid "Django 3.2.3 release notes"
msgstr "Django 3.2.3 版本发行说明"

msgid "Django 3.2.3 fixes several bugs in 3.2.2."
msgstr "Django 3.2.3 修复了 3.2.2 中的几个漏洞。"

msgid "Prepared for ``mysqlclient`` > 2.0.3 support (:ticket:`32732`)."
msgstr "为 ``mysqlclient`` > 2.0.3 支持做准备（:ticket:`32732`）。"

msgid ""
"Fixed a regression in Django 3.2 that caused the incorrect filtering of "
"querysets combined with the ``|`` operator (:ticket:`32717`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，该问题导致对与 ``|`` 操作符结合的查询集进行了"
"错误的过滤（:ticket:`32717`）。"

msgid ""
"Fixed a regression in Django 3.2.1 where saving ``FileField`` would raise a "
"``SuspiciousFileOperation`` even when a custom :attr:`~django.db.models."
"FileField.upload_to` returns a valid file path (:ticket:`32718`)."
msgstr ""
"修正了 Django 3.2.1 中的一个缺陷，即保存 ``FileField`` 会引发 "
"``SuspiciousFileOperation``，即使自定义 :attr:`~django.db.models.FileField."
"upload_to` 返回了有效的文件路径（:ticket:`32718`）。"

msgid "Django 3.2.4 release notes"
msgstr "Django 3.2.4 版本发行说明"

msgid "Django 3.2.4 fixes two security issues and several bugs in 3.2.3."
msgstr "Django 3.2.4 修复了 3.2.3 中的两个安全问题和几个漏洞。"

msgid ""
"Fixed a bug in Django 3.2 where a final catch-all view in the admin didn't "
"respect the server-provided value of ``SCRIPT_NAME`` when redirecting "
"unauthenticated users to the login page (:ticket:`32754`)."
msgstr ""
"修正了 Django 3.2 中的一个漏洞，当把未认证的用户重定向到登录页面时，管理中的"
"最终全局视图没有尊重服务器提供的 ``SCRIPT_NAME`` 的值（:ticket:`32754`）。"

msgid ""
"Fixed a bug in Django 3.2 where a system check would crash on an abstract "
"model (:ticket:`32733`)."
msgstr ""
"修正了 Django 3.2 中的一个漏洞，即系统检查会在抽象模型上崩溃（:ticket:"
"`32733`）。"

msgid ""
"Prevented unnecessary initialization of unused caches following a regression "
"in Django 3.2 (:ticket:`32747`)."
msgstr "防止 Django 3.2 中不必要地初始化未使用缓存的缺陷（:ticket:`32747`）。"

msgid ""
"Fixed a crash in Django 3.2 that could occur when running ``mod_wsgi`` with "
"the recommended settings while the Windows ``colorama`` library was "
"installed (:ticket:`32740`)."
msgstr ""
"修正了 Django 3.2 中的一个崩溃问题，在安装了 Windows ``colorama`` 库的情况"
"下，以推荐的设置运行 ``mod_wsgi`` 时，可能会发生崩溃（:ticket:`32740`）。"

msgid ""
"Fixed a bug in Django 3.2 that would trigger the auto-reloader for template "
"changes when directory paths were specified with strings (:ticket:`32744`)."
msgstr ""
"修正了 Django 3.2 中的一个漏洞，当目录路径用字符串指定时，会触发模板变化的自"
"动重载程序（:ticket:`32744`）。"

msgid ""
"Fixed a regression in Django 3.2 that caused a crash of auto-reloader with "
"``AttributeError``, e.g. inside a ``Conda`` environment (:ticket:`32783`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，该缺陷导致自动加载器在出现 "
"``AttributeError`` 时崩溃，例如在 ``Conda`` 环境中（:ticket:`32783`）。"

msgid ""
"Fixed a regression in Django 3.2 that caused a loss of precision for "
"operations with ``DecimalField`` on MySQL (:ticket:`32793`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，该缺陷导致在 MySQL 上使用 ``DecimalField`` 进"
"行操作时的精度损失（:ticket:`32793`）。"

msgid "Django 3.2.5 release notes"
msgstr "Django 3.2.5 版本发行说明"

msgid ""
"Django 3.2.5 fixes a security issue with severity \"high\" and several bugs "
"in 3.2.4. Also, the latest string translations from Transifex are "
"incorporated."
msgstr ""
"Django 3.2.5 修复了一个严重程度为 “高” 的安全问题和 3.2.4 中的几个漏洞。此"
"外，还加入了 Transifex 的最新字符串翻译。"

msgid ""
"Fixed a regression in Django 3.2 that caused a crash of ``QuerySet."
"values_list(…, named=True)`` after ``prefetch_related()`` (:ticket:`32812`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，该缺陷导致 ``QuerySet.values_list(..., "
"named=True)`` 在 ``prefetch_related()`` 之后崩溃（:ticket:`32812`）。"

msgid ""
"Fixed a bug in Django 3.2 that caused a migration crash on MySQL 8.0.13+ "
"when altering ``BinaryField``, ``JSONField``, or ``TextField`` to non-"
"nullable (:ticket:`32503`)."
msgstr ""
"修正了 Django 3.2 中的一个漏洞，在 MySQL 8.0.13 以上版本中，将 "
"``BinaryField``、``JSONField`` 或 ``TextField`` 改为非空值时，会造成迁移崩溃"
"（:ticket:`32503`）。"

msgid ""
"Fixed a regression in Django 3.2 that caused a migration crash on MySQL "
"8.0.13+ when adding nullable ``BinaryField``, ``JSONField``, or "
"``TextField`` with a default value (:ticket:`32832`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，在 MySQL 8.0.13 以上版本中，当添加默认值为空"
"的 ``BinaryField``、``JSONField`` 或 ``TextField`` 时，会导致迁移崩溃（:"
"ticket:`32832`）。"

msgid ""
"Fixed a bug in Django 3.2 where a system check would crash on a model with "
"an invalid ``app_label`` (:ticket:`32863`)."
msgstr ""
"修正了 Django 3.2 中的一个漏洞，即系统检查会在模型上出现无效的 ``app_label`` "
"时崩溃（:ticket:`32863`）。"

msgid "Django 3.2.6 release notes"
msgstr "Django 3.2.6 版本发行说明"

msgid "*August 2, 2021*"
msgstr "*2021 年 8 月 2 日*"

msgid "Django 3.2.6 fixes several bugs in 3.2.5."
msgstr "Django 3.2.6 修复了 3.2.5 中的几个漏洞。"

msgid ""
"Fixed a regression in Django 3.2 that caused a crash validating ``\"NaN\"`` "
"input with a ``forms.DecimalField`` when additional constraints, e.g. "
"``max_value``, were specified (:ticket:`32949`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，当指定了额外的约束条件，如 ``max_value`` 时，"
"在验证输入 ``\"NaN\"`` 的 ``forms.DecimalField`` 时，会出现崩溃（:ticket:"
"`32949`）。"

msgid ""
"Fixed a bug in Django 3.2 where a system check would crash on a model with a "
"reverse many-to-many relation inherited from a parent class (:ticket:"
"`32947`)."
msgstr ""
"修正了 Django 3.2 中的一个漏洞，即系统检查会在一个具有从父类继承的反向多对多"
"关系的模型上崩溃（:ticket:`32947`）。"

msgid "Django 3.2.7 release notes"
msgstr "Django 3.2.7 版本发行说明"

msgid "*September 1, 2021*"
msgstr "*2021 年 9 月 1 日*"

msgid "Django 3.2.7 fixes a bug in 3.2.6."
msgstr "Django 3.2.7 修复了 3.2.6 中的几个漏洞。"

msgid ""
"Fixed a regression in Django 3.2 that caused the incorrect offset extraction "
"from fixed offset timezones (:ticket:`32992`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，该缺陷导致从固定偏移的时区提取不正确的偏移量"
"（:ticket:`32992`）。"

msgid "Django 3.2.8 release notes"
msgstr "Django 3.2.8 版本发行说明"

msgid "*October 5, 2021*"
msgstr "*2021 年 10 月 5 日*"

msgid "Django 3.2.8 fixes two bugs in 3.2.7."
msgstr "Django 3.2.8 修复了 3.2.7 的两个漏洞。"

msgid ""
"Fixed a bug in Django 3.2 that caused incorrect links on read-only fields in "
"the admin (:ticket:`33077`)."
msgstr ""
"修正了 Django 3.2 中的一个漏洞，该漏洞导致管理中只读字段的链接不正确（:"
"ticket:`33077`）。"

msgid ""
"Fixed a regression in Django 3.2 that caused incorrect selection of items "
"across all pages when actions were placed both on the top and bottom of the "
"admin change-list view (:ticket:`33083`)."
msgstr ""
"修正了 Django 3.2 中的一个缺陷，当动作同时放置在管理变更列表视图的顶部和底部"
"时，会导致所有页面的项目选择不正确（:ticket:`33083`）。"

msgid "Django 3.2.9 release notes"
msgstr "Django 3.2.9 版本发行说明"

msgid "*November 1, 2021*"
msgstr "*2021 年 11 月 1 日*"

msgid ""
"Django 3.2.9 fixes a bug in 3.2.8 and adds compatibility with Python 3.10."
msgstr ""
"Django 3.2.9 修复了 3.2.8 版本中的一个错误，并添加了对 Python 3.10 的兼容性。"

msgid ""
"Fixed a bug in Django 3.2 that caused a migration crash on SQLite when "
"altering a field with a functional index (:ticket:`33194`)."
msgstr ""
"修复了 Django 3.2 中的一个 bug，该 bug 导致在 SQLite 上修改具有函数索引的字段"
"时发生迁移崩溃 (:ticket:`33194`)。"

msgid "Django 4.0 release notes"
msgstr "Django 4.0 版本发行说明"

msgid "Welcome to Django 4.0!"
msgstr "欢迎使用 Django 4.0 ！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-4.0>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-4.0>` "
"you'll want to be aware of when upgrading from Django 3.2 or earlier. We've :"
"ref:`begun the deprecation process for some features <deprecated-"
"features-4.0>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-4.0>`，以及从 Django 3.2 或更早版"
"本升级时需要注意的一些 :ref:`不向后兼容的变更 <backwards-incompatible-4.0>`。"
"我们已经 :ref:`开始了一些功能的弃用过程 <deprecated-features-4.0>`。"

msgid ""
"Django 4.0 supports Python 3.8, 3.9, and 3.10. We **highly recommend** and "
"only officially support the latest release of each series."
msgstr ""
"Django 4.0 支持 Python 3.8、3.9 和 3.10。我们 **强烈建议** 并只官方支持每个系"
"列的最新版本。"

msgid "The Django 3.2.x series is the last to support Python 3.6 and 3.7."
msgstr "Django 3.2.x 系列是最后一个支持 Python 3.6 和 3.7 的版本。"

msgid "What's new in Django 4.0"
msgstr "Django 4.0 新特性"

msgid "``zoneinfo`` default timezone implementation"
msgstr "``zoneinfo`` 默认时区实现"

msgid ""
"The Python standard library's :mod:`zoneinfo` is now the default timezone "
"implementation in Django."
msgstr "Python 标准库的 :mod:`zoneinfo` 现在是 Django 中默认的时区实现。"

msgid ""
"This is the next step in the migration from using ``pytz`` to using :mod:"
"`zoneinfo`. Django 3.2 allowed the use of non-``pytz`` time zones. Django "
"4.0 makes ``zoneinfo`` the default implementation. Support for ``pytz`` is "
"now deprecated and will be removed in Django 5.0."
msgstr ""
"这是从使用 ``pytz`` 到使用 :mod:`zoneinfo` 迁移的下一步。Django 3.2 允许使用"
"非 ``pytz`` 时区。Django 4.0 将 ``zoneinfo`` 作为默认实现。对于 ``pytz`` 的支"
"持现在已经不推荐使用，并将在 Django 5.0 中移除。"

msgid ""
":mod:`zoneinfo` is part of the Python standard library from Python 3.9. The "
"``backports.zoneinfo`` package is automatically installed alongside Django "
"if you are using Python 3.8."
msgstr ""
":mod:`zoneinfo` 是自 Python 3.9 起的 Python 标准库的一部分。如果你正在使用 "
"Python 3.8，那么 ``backports.zoneinfo`` 包会在安装 Django 时自动安装。"

msgid ""
"The move to ``zoneinfo`` should be largely transparent. Selection of the "
"current timezone, conversion of datetime instances to the current timezone "
"in forms and templates, as well as operations on aware datetimes in UTC are "
"unaffected."
msgstr ""
"迁移到 ``zoneinfo`` 应该在很大程度上是透明的。选择当前时区、在表单和模板中将"
"日期时间实例转换为当前时区，以及在 UTC 中进行的带时区日期时间的操作都不受影"
"响。"

msgid ""
"However, if you are working with non-UTC time zones, and using the ``pytz`` "
"``normalize()`` and ``localize()`` APIs, possibly with the :setting:"
"`TIME_ZONE <DATABASE-TIME_ZONE>` setting, you will need to audit your code, "
"since ``pytz`` and ``zoneinfo`` are not entirely equivalent."
msgstr ""
"然而，如果你正在使用非 UTC 时区，并使用 ``pytz`` 的 ``normalize()`` 和 "
"``localize()`` API，可能还涉及到 :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` 设"
"置，那么你需要审查你的代码，因为``pytz`` 和 ``zoneinfo`` 并不完全等同。"

msgid ""
"To give time for such an audit, the transitional ``USE_DEPRECATED_PYTZ`` "
"setting allows continued use of ``pytz`` during the 4.x release cycle. This "
"setting will be removed in Django 5.0."
msgstr ""
"为了给这样的审核留出时间，过渡性的 ``USE_DEPRECATED_PYTZ`` 设置允许在 4.x 发"
"布周期内继续使用 ``pytz``。这个设置将在 Django 5.0 中移除。"

msgid ""
"In addition, a `pytz_deprecation_shim`_ package, created by the ``zoneinfo`` "
"author, can be used to assist with the migration from ``pytz``. This package "
"provides shims to help you safely remove ``pytz``, and has a detailed "
"`migration guide`_ showing how to move to the new ``zoneinfo`` APIs."
msgstr ""
"此外，``zoneinfo`` 的作者创建了一个名为 `pytz_deprecation_shim`_ 的包，可用于"
"协助从 ``pytz`` 迁移。这个包提供了帮助你安全移除 ``pytz`` 的 shims，并有一个"
"详细的 `迁移指南`_，展示了如何切换到新的 ``zoneinfo`` API。"

msgid ""
"Using `pytz_deprecation_shim`_ and the ``USE_DEPRECATED_PYTZ`` transitional "
"setting is recommended if you need a gradual update path."
msgstr ""
"如果需要逐步更新路径，建议使用 `pytz_deprecation_shim`_ 和过渡性的 "
"``USE_DEPRECATED_PYTZ`` 设置。"

msgid "Functional unique constraints"
msgstr "函数式唯一约束"

msgid ""
"The new :attr:`*expressions <django.db.models.UniqueConstraint.expressions>` "
"positional argument of :class:`UniqueConstraint() <django.db.models."
"UniqueConstraint>` enables creating functional unique constraints on "
"expressions and database functions. For example::"
msgstr ""
":class:`UniqueConstraint() <django.db.models.UniqueConstraint>` 的新的 :attr:"
"`*expressions <django.db.models.UniqueConstraint.expressions>` 位置参数允许在"
"表达式和数据库函数上创建功能性的唯一约束。例如："

msgid ""
"Functional unique constraints are added to models using the :attr:`Meta."
"constraints <django.db.models.Options.constraints>` option."
msgstr ""
"功能性唯一约束是通过在模型中使用 :attr:`Meta.constraints <django.db.models."
"Options.constraints>` 选项来添加的。"

msgid "``scrypt`` password hasher"
msgstr "``scrypt`` 密码哈希器"

msgid ""
"The new :ref:`scrypt password hasher <scrypt-usage>` is more secure and "
"recommended over PBKDF2. However, it's not the default as it requires "
"OpenSSL 1.1+ and more memory."
msgstr ""
"新的 :ref:`scrypt 密码哈希器 <scrypt-usage>` 更安全，推荐使用，但它不是默认选"
"项，因为它需要 OpenSSL 1.1+ 和更多内存。"

msgid "Redis cache backend"
msgstr "Redis 缓存后端"

msgid ""
"The new ``django.core.cache.backends.redis.RedisCache`` cache backend "
"provides built-in support for caching with Redis. :pypi:`redis-py <redis>` "
"3.0.0 or higher is required. For more details, see the :ref:`documentation "
"on caching with Redis in Django <redis>`."
msgstr ""
"新的 ``django.core.cache.backends.redis.RedisCache`` 缓存后端提供了内置的支"
"持，用于使用 Redis 进行缓存。需要 :pypi:`redis-py <redis>` 的版本为 3.0.0 或"
"更高。更多详情请参阅 Django 中关于使用 Redis 进行缓存的 :ref:`文档 <redis>`。"

msgid "Template based form rendering"
msgstr "基于模板的表单渲染"

msgid ""
":class:`Forms <django.forms.Form>`, :doc:`Formsets </topics/forms/"
"formsets>`, and :class:`~django.forms.ErrorList` are now rendered using the "
"template engine to enhance customization. See the new :meth:`~django.forms."
"Form.render`, :meth:`~django.forms.Form.get_context`, and :attr:`~django."
"forms.Form.template_name` for ``Form`` and :ref:`formset rendering <formset-"
"rendering>` for ``Formset``."
msgstr ""
":class:`Forms <django.forms.Form>`、:doc:`Formsets </topics/forms/formsets>` "
"和 :class:`~django.forms.ErrorList` 现在使用模板引擎进行渲染，以增强自定义功"
"能。查看 ``Form`` 的新方法 :meth:`~django.forms.Form.render`、:meth:`~django."
"forms.Form.get_context` 和 :attr:`~django.forms.Form.template_name`，以及关"
"于 ``Formset`` 的 :ref:`formset 渲染 <formset-rendering>`。"

msgid ""
"The ``admin/base.html`` template now has a new block ``header`` which "
"contains the admin site header."
msgstr ""
"``admin/base.html`` 模板现在有一个新的块 ``header``，其中包含了管理站点的标"
"题。"

msgid ""
"The new :meth:`.ModelAdmin.get_formset_kwargs` method allows customizing the "
"keyword arguments passed to the constructor of a formset."
msgstr ""
"新的 :meth:`.ModelAdmin.get_formset_kwargs` 方法允许自定义传递给表单集构造函"
"数的关键字参数。"

msgid "The navigation sidebar now has a quick filter toolbar."
msgstr "导航侧边栏现在有一个快速筛选工具栏。"

msgid ""
"The new context variable ``model`` which contains the model class for each "
"model is added to the :meth:`.AdminSite.each_context` method."
msgstr ""
"新的上下文变量 ``model`` 包含了每个模型的模型类，已添加到 :meth:`.AdminSite."
"each_context` 方法中。"

msgid ""
"The new :attr:`.ModelAdmin.search_help_text` attribute allows specifying a "
"descriptive text for the search box."
msgstr ""
"新的 :attr:`.ModelAdmin.search_help_text` 属性允许指定搜索框的描述性文本。"

msgid ""
"The :attr:`.InlineModelAdmin.verbose_name_plural` attribute now fallbacks to "
"the :attr:`.InlineModelAdmin.verbose_name` + ``'s'``."
msgstr ""
":attr:`.InlineModelAdmin.verbose_name_plural` 属性现在会回退到 :attr:`."
"InlineModelAdmin.verbose_name` + ``'s'``。"

msgid "jQuery is upgraded from version 3.5.1 to 3.6.0."
msgstr "jQuery 从版本 3.5.1 升级到 3.6.0 。"

msgid ""
"The admindocs now allows esoteric setups where :setting:`ROOT_URLCONF` is "
"not a string."
msgstr ""
"admindocs 现在允许复杂的设置，其中 :setting:`ROOT_URLCONF` 不是一个字符串。"

msgid "The model section of the ``admindocs`` now shows cached properties."
msgstr "``admindocs`` 的模型部分现在显示缓存的属性。"

msgid ""
"The default iteration count for the PBKDF2 password hasher is increased from "
"260,000 to 320,000."
msgstr "PBKDF2 密码哈希器的默认迭代次数从 260 , 000 增加到 320 , 000 。"

msgid ""
"The new :attr:`LoginView.next_page <django.contrib.auth.views.LoginView."
"next_page>` attribute and :meth:`~django.contrib.auth.views.LoginView."
"get_default_redirect_url` method allow customizing the redirect after login."
msgstr ""
"新的 :attr:`LoginView.next_page <django.contrib.auth.views.LoginView."
"next_page>` 属性和 :meth:`~django.contrib.auth.views.LoginView."
"get_default_redirect_url` 方法允许自定义登录后的重定向。"

msgid "Added support for SpatiaLite 5."
msgstr "新增对 SpatiaLite 5 的支持。"

msgid ""
":class:`~django.contrib.gis.gdal.GDALRaster` now allows creating rasters in "
"any GDAL virtual filesystem."
msgstr ""
":class:`~django.contrib.gis.gdal.GDALRaster` 现在允许在任何 GDAL 虚拟文件系统"
"中创建栅格数据。"

msgid ""
"The new :class:`~django.contrib.gis.admin.GISModelAdmin` class allows "
"customizing the widget used for ``GeometryField``. This is encouraged "
"instead of deprecated ``GeoModelAdmin`` and ``OSMGeoAdmin``."
msgstr ""
"新的 :class:`~django.contrib.gis.admin.GISModelAdmin` 类允许自定义用于 "
"``GeometryField`` 的小部件，这是鼓励使用的，而不是不推荐使用的 "
"``GeoModelAdmin`` 和 ``OSMGeoAdmin``。"

msgid ""
"The PostgreSQL backend now supports connecting by a service name. See :ref:"
"`postgresql-connection-settings` for more details."
msgstr ""
"PostgreSQL 后端现在支持通过服务名称进行连接。更多详情请参阅 :ref:`postgresql-"
"connection-settings`。"

msgid ""
"The new :class:`~django.contrib.postgres.operations.AddConstraintNotValid` "
"operation allows creating check constraints on PostgreSQL without verifying "
"that all existing rows satisfy the new constraint."
msgstr ""
"新的 :class:`~django.contrib.postgres.operations.AddConstraintNotValid` 操作"
"允许在 PostgreSQL 上创建检查约束，而无需验证所有现有行是否满足新约束。"

msgid ""
"The new :class:`~django.contrib.postgres.operations.ValidateConstraint` "
"operation allows validating check constraints which were created using :"
"class:`~django.contrib.postgres.operations.AddConstraintNotValid` on "
"PostgreSQL."
msgstr ""
"新的 :class:`~django.contrib.postgres.operations.ValidateConstraint` 操作允许"
"验证在 PostgreSQL 上使用 :class:`~django.contrib.postgres.operations."
"AddConstraintNotValid` 创建的检查约束。"

msgid ""
"The new :class:`ArraySubquery() <django.contrib.postgres.expressions."
"ArraySubquery>` expression allows using subqueries to construct lists of "
"values on PostgreSQL."
msgstr ""
"新的 :class:`ArraySubquery() <django.contrib.postgres.expressions."
"ArraySubquery>` 表达式允许在 PostgreSQL 上使用子查询来构建值列表。"

msgid ""
"The new :lookup:`trigram_word_similar` lookup, and the :class:"
"`TrigramWordDistance() <django.contrib.postgres.search.TrigramWordDistance>` "
"and :class:`TrigramWordSimilarity() <django.contrib.postgres.search."
"TrigramWordSimilarity>` expressions allow using trigram word similarity."
msgstr ""
"新的 :lookup:`trigram_word_similar` 查找以及 :class:`TrigramWordDistance() "
"<django.contrib.postgres.search.TrigramWordDistance>` 和 :class:"
"`TrigramWordSimilarity() <django.contrib.postgres.search."
"TrigramWordSimilarity>` 表达式允许使用 trigram 单词相似度。"

msgid ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` now "
"replaces paths to JavaScript source map references with their hashed "
"counterparts."
msgstr ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` 现在"
"会将 JavaScript 源映射引用的路径替换为它们的哈希版本。"

msgid ""
"The new ``manifest_storage`` argument of :class:`~django.contrib.staticfiles."
"storage.ManifestFilesMixin` and :class:`~django.contrib.staticfiles.storage."
"ManifestStaticFilesStorage` allows customizing the manifest file storage."
msgstr ""
":class:`~django.contrib.staticfiles.storage.ManifestFilesMixin` 和 :class:"
"`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` 的新参数 "
"``manifest_storage`` 允许自定义清单文件的存储。"

msgid ""
"The new async API for ``django.core.cache.backends.base.BaseCache`` begins "
"the process of making cache backends async-compatible. The new async methods "
"all have ``a`` prefixed names, e.g. ``aadd()``, ``aget()``, ``aset()``, "
"``aget_or_set()``, or ``adelete_many()``."
msgstr ""
"``django.core.cache.backends.base.BaseCache`` 的新异步 API 开始了使缓存后端支"
"持异步的过程。新的异步方法都有 ``a`` 前缀的名称，例如 ``aadd()``、"
"``aget()``、``aset()``、``aget_or_set()`` 或 ``adelete_many()``。"

msgid ""
"Going forward, the ``a`` prefix will be used for async variants of methods "
"generally."
msgstr "今后，``a`` 前缀将用于一般方法的异步变体。"

msgid ""
"CSRF protection now consults the ``Origin`` header, if present. To "
"facilitate this, :ref:`some changes <csrf-trusted-origins-changes-4.0>` to "
"the :setting:`CSRF_TRUSTED_ORIGINS` setting are required."
msgstr ""
"CSRF 保护现在会查看是否存在 ``Origin`` 标头。为了实现这一点，需要对 :setting:"
"`CSRF_TRUSTED_ORIGINS` 设置进行 :ref:`一些更改 <csrf-trusted-origins-"
"changes-4.0>`。"

msgid ""
":class:`~django.forms.ModelChoiceField` now includes the provided value in "
"the ``params`` argument of a raised :exc:`~django.core.exceptions."
"ValidationError` for the ``invalid_choice`` error message. This allows "
"custom error messages to use the ``%(value)s`` placeholder."
msgstr ""
":class:`~django.forms.ModelChoiceField` 现在会在引发 ``invalid_choice`` 错误"
"消息的 :exc:`~django.core.exceptions.ValidationError` 中的 ``params`` 参数中"
"包含提供的值，这允许自定义错误消息使用 ``%(value)s`` 占位符。"

msgid ""
":class:`~django.forms.formsets.BaseFormSet` now renders non-form errors with "
"an additional class of ``nonform`` to help distinguish them from form-"
"specific errors."
msgstr ""
":class:`~django.forms.formsets.BaseFormSet` 现在会在渲染非表单错误时添加一个"
"额外的类 ``nonform``，以帮助区分它们与特定于表单的错误。"

msgid ""
":class:`~django.forms.formsets.BaseFormSet` now allows customizing the "
"widget used when deleting forms via :attr:`~django.forms.formsets."
"BaseFormSet.can_delete` by setting the :attr:`~django.forms.formsets."
"BaseFormSet.deletion_widget` attribute or overriding :meth:`~django.forms."
"formsets.BaseFormSet.get_deletion_widget` method."
msgstr ""
":class:`~django.forms.formsets.BaseFormSet` 现在允许通过设置 :attr:`~django."
"forms.formsets.BaseFormSet.deletion_widget` 属性或覆盖 :meth:`~django.forms."
"formsets.BaseFormSet.get_deletion_widget` 方法来自定义在通过 :attr:`~django."
"forms.formsets.BaseFormSet.can_delete` 删除表单时使用的小部件。"

msgid "Added support and translations for the Malay language."
msgstr "添加了对马来语的支持和翻译。"

msgid ""
":class:`~django.views.generic.edit.DeleteView` now uses :class:`~django."
"views.generic.edit.FormMixin`, allowing you to provide a :class:`~django."
"forms.Form` subclass, with a checkbox for example, to confirm deletion. In "
"addition, this allows ``DeleteView`` to function with :class:`django.contrib."
"messages.views.SuccessMessageMixin`."
msgstr ""
":class:`~django.views.generic.edit.DeleteView` 现在使用 :class:`~django."
"views.generic.edit.FormMixin`，允许你提供一个 :class:`~django.forms.Form` 的"
"子类，例如带有复选框的表单，来确认删除。此外，这还允许 ``DeleteView`` 与 :"
"class:`django.contrib.messages.views.SuccessMessageMixin` 配合使用。"

msgid ""
"In accordance with ``FormMixin``, object deletion for POST requests is "
"handled in ``form_valid()``. Custom delete logic in ``delete()`` handlers "
"should be moved to ``form_valid()``, or a shared helper method, as needed."
msgstr ""
"根据 ``FormMixin``，对于 POST 请求的对象删除是在 ``form_valid()`` 中处理的。"
"如果需要，应将 ``delete()`` 处理程序中的自定义删除逻辑移动到 "
"``form_valid()`` 或共享的辅助方法中。"

msgid ""
"The alias of the database used in an SQL call is now passed as extra context "
"along with each message to the :ref:`django-db-logger` logger."
msgstr ""
"现在，用于 SQL 调用的数据库的别名会作为额外的上下文与每条消息一起传递到 :ref:"
"`django-db-logger` 记录器中。"

msgid ""
"The :djadmin:`runserver` management command now supports the :option:`--skip-"
"checks` option."
msgstr ":djadmin:`runserver` 管理命令现在支持 :option:`--skip-checks` 选项。"

msgid ""
"On PostgreSQL, :djadmin:`dbshell` now supports specifying a password file."
msgstr "在 PostgreSQL 上，:djadmin:`dbshell` 现在支持指定密码文件。"

msgid ""
"The :djadmin:`shell` command now respects :py:data:`sys.__interactivehook__` "
"at startup. This allows loading shell history between interactive sessions. "
"As a consequence, ``readline`` is no longer loaded if running in *isolated* "
"mode."
msgstr ""
":djadmin:`shell` 命令现在在启动时会尊重 :py:data:`sys.__interactivehook__`。"
"这允许在交互式会话之间加载 shell 历史记录。因此，在 *隔离* 模式下运行时不再加"
"载 ``readline``。"

msgid ""
"The new :attr:`BaseCommand.suppressed_base_arguments <django.core.management."
"BaseCommand.suppressed_base_arguments>` attribute allows suppressing "
"unsupported default command options in the help output."
msgstr ""
"新的 :attr:`BaseCommand.suppressed_base_arguments <django.core.management."
"BaseCommand.suppressed_base_arguments>` 属性允许在帮助输出中抑制不支持的默认"
"命令选项。"

msgid ""
"The new :option:`startapp --exclude` and :option:`startproject --exclude` "
"options allow excluding directories from the template."
msgstr ""
"新的 :option:`startapp --exclude` 和 :option:`startproject --exclude` 选项允"
"许从模板中排除目录。"

msgid ""
"New :meth:`QuerySet.contains(obj) <.QuerySet.contains>` method returns "
"whether the queryset contains the given object. This tries to perform the "
"query in the simplest and fastest way possible."
msgstr ""
"新的 :meth:`QuerySet.contains(obj) <.QuerySet.contains>` 方法返回查询集是否包"
"含给定对象。它尝试以最简单和最快的方式执行查询。"

msgid ""
"The new ``precision`` argument of the :class:`Round() <django.db.models."
"functions.Round>` database function allows specifying the number of decimal "
"places after rounding."
msgstr ""
":class:`Round() <django.db.models.functions.Round>` 数据库函数的新 "
"``precision`` 参数允许指定舍入后的小数位数。"

msgid ""
":meth:`.QuerySet.bulk_create` now sets the primary key on objects when using "
"SQLite 3.35+."
msgstr ""
"使用 SQLite 3.35+ 时，:meth:`.QuerySet.bulk_create` 现在会为对象设置主键。"

msgid ""
":class:`~django.db.models.DurationField` now supports multiplying and "
"dividing by scalar values on SQLite."
msgstr ""
":class:`~django.db.models.DurationField` 现在在 SQLite 上支持乘法和除法以及标"
"量值。"

msgid ""
":meth:`.QuerySet.bulk_update` now returns the number of objects updated."
msgstr ":meth:`.QuerySet.bulk_update` 现在会返回更新的对象数量。"

msgid ""
"The new :attr:`.Expression.empty_result_set_value` attribute allows "
"specifying a value to return when the function is used over an empty result "
"set."
msgstr ""
"新的 :attr:`.Expression.empty_result_set_value` 属性允许在函数用于空结果集时"
"指定要返回的值。"

msgid ""
"The ``skip_locked`` argument of :meth:`.QuerySet.select_for_update()` is now "
"allowed on MariaDB 10.6+."
msgstr ""
"在 MariaDB 10.6+ 上，现在允许使用 :meth:`.QuerySet.select_for_update()` 的 "
"``skip_locked`` 参数。"

msgid ""
":class:`~django.db.models.Lookup` expressions may now be used in "
"``QuerySet`` annotations, aggregations, and directly in filters."
msgstr ""
":class:`~django.db.models.Lookup` 表达式现在可以在 ``QuerySet`` 的注释、聚合"
"和直接筛选中使用。"

msgid ""
"The new :ref:`default <aggregate-default>` argument for built-in aggregates "
"allows specifying a value to be returned when the queryset (or grouping) "
"contains no entries, rather than ``None``."
msgstr ""
"内置聚合函数的新 :ref:`default <aggregate-default>` 参数允许指定当查询集（或"
"分组）不包含条目时要返回的值，而不是返回 ``None``。"

msgid ""
"The :class:`~django.middleware.security.SecurityMiddleware` now adds the :"
"ref:`Cross-Origin Opener Policy <cross-origin-opener-policy>` header with a "
"value of ``'same-origin'`` to prevent cross-origin popups from sharing the "
"same browsing context. You can prevent this header from being added by "
"setting the :setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY` setting to ``None``."
msgstr ""
":class:`~django.middleware.security.SecurityMiddleware` 现在会添加具有值 "
"``'same-origin'`` 的 :ref:`Cross-Origin Opener Policy <cross-origin-opener-"
"policy>` 头，以防止跨源弹出窗口共享相同的浏览上下文。你可以通过将 :setting:"
"`SECURE_CROSS_ORIGIN_OPENER_POLICY` 设置为 ``None`` 来阻止添加此头部。"

msgid ""
"The new ``stdout`` argument for :func:`~django.db.models.signals."
"pre_migrate` and :func:`~django.db.models.signals.post_migrate` signals "
"allows redirecting output to a stream-like object. It should be preferred "
"over :py:data:`sys.stdout` and :py:func:`print` when emitting verbose output "
"in order to allow proper capture when testing."
msgstr ""
":func:`~django.db.models.signals.pre_migrate` 和 :func:`~django.db.models."
"signals.post_migrate` 信号现在有一个新的 ``stdout`` 参数，允许将输出重定向到"
"类似流的对象。在发出详细输出时，应优先考虑使用它，以便在测试时能够正确捕获输"
"出，而不是使用 :py:data:`sys.stdout` 和 :py:func:`print`。"

msgid ""
":tfilter:`floatformat` template filter now allows using the ``u`` suffix to "
"force disabling localization."
msgstr ""
"模板过滤器 :tfilter:`floatformat` 现在允许使用 ``u`` 后缀来强制禁用本地化。"

msgid ""
"The new ``serialized_aliases`` argument of :func:`django.test.utils."
"setup_databases` determines which :setting:`DATABASES` aliases test "
"databases should have their state serialized to allow usage of the :ref:"
"`serialized_rollback <test-case-serialized-rollback>` feature."
msgstr ""
":func:`django.test.utils.setup_databases` 的新参数 ``serialized_aliases`` 决"
"定了哪些 :setting:`DATABASES` 别名的测试数据库应该被序列化以允许使用 :ref:"
"`serialized_rollback <test-case-serialized-rollback>` 特性。"

msgid "The :option:`test --buffer` option now supports parallel tests."
msgstr ""

msgid ""
"The new ``logger`` argument to :class:`~django.test.runner.DiscoverRunner` "
"allows a Python :py:ref:`logger <logger>` to be used for logging."
msgstr ""
":class:`~django.test.runner.DiscoverRunner` 的新参数 ``logger`` 允许使用 "
"Python :py:ref:`logger <logger>` 进行日志记录。"

msgid ""
"The new :meth:`.DiscoverRunner.log` method provides a way to log messages "
"that uses the ``DiscoverRunner.logger``, or prints to the console if not set."
msgstr ""
"新的 :meth:`.DiscoverRunner.log` 方法提供了一种记录消息的方式，它使用 "
"``DiscoverRunner.logger`` 进行日志记录，如果未设置则打印到控制台。"

msgid ""
":class:`~django.test.runner.DiscoverRunner` can now execute tests in a "
"random order using the :option:`test --shuffle` option."
msgstr ""

msgid ""
"The :option:`test --parallel` option now supports the value ``auto`` to run "
"one test process for each processor core."
msgstr ""
":option:`test --parallel` 选项现在支持值 ``auto``，以为每个处理器核心运行一个"
"测试进程。"

msgid ""
":meth:`.TestCase.captureOnCommitCallbacks` now captures new callbacks added "
"while executing :func:`.transaction.on_commit` callbacks."
msgstr ""
":meth:`.TestCase.captureOnCommitCallbacks` 现在会捕获在执行 :func:`."
"transaction.on_commit` 回调期间添加的新回调。"

msgid "Backwards incompatible changes in 4.0"
msgstr "4.0 版本中不向后兼容的变更"

msgid ""
"``DatabaseOperations.year_lookup_bounds_for_date_field()`` and "
"``year_lookup_bounds_for_datetime_field()`` methods now take the optional "
"``iso_year`` argument in order to support bounds for ISO-8601 week-numbering "
"years."
msgstr ""
"``DatabaseOperations.year_lookup_bounds_for_date_field()`` 和 "
"``year_lookup_bounds_for_datetime_field()`` 方法现在接受可选的 ``iso_year`` "
"参数，以支持 ISO-8601 周编号年份的范围。"

msgid ""
"The second argument of ``DatabaseSchemaEditor._unique_sql()`` and "
"``_create_unique_sql()`` methods is now ``fields`` instead of ``columns``."
msgstr ""
"``DatabaseSchemaEditor._unique_sql()`` 和 ``_create_unique_sql()`` 方法的第二"
"个参数现在是 ``fields``，而不再是 ``columns``。"

msgid "Support for PostGIS 2.3 is removed."
msgstr "移除了对 PostGIS 2.3 的支持。"

msgid "Support for GDAL 2.0 and GEOS 3.5 is removed."
msgstr "移除了对 GDAL 2.0 和 GEOS 3.5 的支持。"

msgid "Dropped support for PostgreSQL 9.6"
msgstr "停止支持 PostgreSQL 9.6"

msgid ""
"Upstream support for PostgreSQL 9.6 ends in November 2021. Django 4.0 "
"supports PostgreSQL 10 and higher."
msgstr ""
"PostgreSQL 9.6 的上游支持将在 2021 年 11 月结束。 Django 4.0 支持 PostgreSQL "
"10 及更高版本。"

msgid ""
"Also, the minimum supported version of ``psycopg2`` is increased from 2.5.4 "
"to 2.8.4, as ``psycopg2`` 2.8.4 is the first release to support Python 3.8."
msgstr ""
"此外，``psycopg2`` 的最低支持版本已从 2.5.4 提高到 2.8.4，因为 ``psycopg2`` "
"2.8.4 是第一个支持 Python 3.8 的版本。"

msgid "Dropped support for Oracle 12.2 and 18c"
msgstr "停止支持 Oracle 12.2 和 18c"

msgid ""
"Upstream support for Oracle 12.2 ends in March 2022 and for Oracle 18c it "
"ends in June 2021. Django 3.2 will be supported until April 2024. Django 4.0 "
"officially supports Oracle 19c."
msgstr ""
"Oracle 12.2 的上游支持将于 2022 年 3 月结束，Oracle 18c 的上游支持将于 2021 "
"年 6 月结束。 Django 3.2 将得到支持直至 2024 年 4 月。 Django 4.0 正式支持 "
"Oracle 19c 。"

msgid "``CSRF_TRUSTED_ORIGINS`` changes"
msgstr "``CSRF_TRUSTED_ORIGINS`` 变更"

msgid "Format change"
msgstr "格式变更"

msgid ""
"Values in the :setting:`CSRF_TRUSTED_ORIGINS` setting must include the "
"scheme (e.g. ``'http://'`` or ``'https://'``) instead of only the hostname."
msgstr ""
"在 :setting:`CSRF_TRUSTED_ORIGINS` 设置中，值必须包括方案（例如，"
"``'http://'`` 或 ``'https://'``），而不仅仅是主机名。"

msgid ""
"Also, values that started with a dot, must now also include an asterisk "
"before the dot. For example, change ``'.example.com'`` to ``'https://*."
"example.com'``."
msgstr ""
"此外，以点开头的值现在必须在点之前加上一个星号。例如，将 ``'.example.com'`` "
"更改为 ``'https://*.example.com'``。"

msgid "A system check detects any required changes."
msgstr "系统检查会检测到任何所需的更改。"

msgid "Configuring it may now be required"
msgstr "现在可能需要配置它"

msgid ""
"As CSRF protection now consults the ``Origin`` header, you may need to set :"
"setting:`CSRF_TRUSTED_ORIGINS`, particularly if you allow requests from "
"subdomains by setting :setting:`CSRF_COOKIE_DOMAIN` (or :setting:"
"`SESSION_COOKIE_DOMAIN` if :setting:`CSRF_USE_SESSIONS` is enabled) to a "
"value starting with a dot."
msgstr ""
"由于 CSRF 保护现在参考 ``Origin`` 标头，如果你通过将 :setting:"
"`CSRF_COOKIE_DOMAIN` （或者如果启用了 :setting:`CSRF_USE_SESSIONS`，则为 :"
"setting:`SESSION_COOKIE_DOMAIN`）设置为以点开头的值以允许来自子域的请求，你可"
"能需要设置 :setting:`CSRF_TRUSTED_ORIGINS`。"

msgid "``SecurityMiddleware`` no longer sets the ``X-XSS-Protection`` header"
msgstr "``SecurityMiddleware`` 不再设置 ``X-XSS-Protection`` 头"

msgid ""
"The :class:`~django.middleware.security.SecurityMiddleware` no longer sets "
"the ``X-XSS-Protection`` header if the ``SECURE_BROWSER_XSS_FILTER`` setting "
"is ``True``. The setting is removed."
msgstr ""
"如果 ``SECURE_BROWSER_XSS_FILTER`` 设置为 ``True``，则 :class:`~django."
"middleware.security.SecurityMiddleware` 不再设置 ``X-XSS-Protection`` 头。此"
"设置已被移除。"

msgid ""
"Most modern browsers don't honor the ``X-XSS-Protection`` HTTP header. You "
"can use Content-Security-Policy_ without allowing ``'unsafe-inline'`` "
"scripts instead."
msgstr ""
"大多数现代浏览器不再支持 ``X-XSS-Protection`` HTTP 头。你可以使用 Content-"
"Security-Policy_ 来代替，但请不要允许 ``'unsafe-inline'`` 脚本。"

msgid ""
"If you want to support legacy browsers and set the header, use this line in "
"a custom middleware::"
msgstr "如果您想要支持旧版浏览器并设置标头，请在自定义中间件中使用以下代码行："

msgid "Migrations autodetector changes"
msgstr "迁移自动检测器的更改"

msgid ""
"The migrations autodetector now uses model states instead of model classes. "
"Also, migration operations for ``ForeignKey`` and ``ManyToManyField`` fields "
"no longer specify attributes which were not passed to the fields during "
"initialization."
msgstr ""
"迁移自动检测器现在使用模型状态而不是模型类。此外，对于 ``ForeignKey`` 和 "
"``ManyToManyField`` 字段的迁移操作不再指定未在字段初始化期间传递的属性。"

msgid ""
"As a side-effect, running ``makemigrations`` might generate no-op "
"``AlterField`` operations for ``ManyToManyField`` and ``ForeignKey`` fields "
"in some cases."
msgstr ""
"作为副作用，在某些情况下，运行 ``makemigrations`` 可能会为 "
"``ManyToManyField`` 和 ``ForeignKey`` 字段生成无操作的 ``AlterField`` 操作。"

msgid "``DeleteView`` changes"
msgstr "``DeleteView`` 变更"

msgid ""
":class:`~django.views.generic.edit.DeleteView` now uses :class:`~django."
"views.generic.edit.FormMixin` to handle POST requests. As a consequence, any "
"custom deletion logic in ``delete()`` handlers should be moved to "
"``form_valid()``, or a shared helper method, if required."
msgstr ""
":class:`~django.views.generic.edit.DeleteView` 现在使用 :class:`~django."
"views.generic.edit.FormMixin` 来处理 POST 请求。因此，任何在 ``delete()`` 处"
"理程序中的自定义删除逻辑应该移动到 ``form_valid()``，或者如果需要的话，可以移"
"动到共享的辅助方法。"

msgid "Table and column naming scheme changes on Oracle"
msgstr "Oracle 上的表和列命名方案发生了变化。"

msgid ""
"Django 4.0 inadvertently changed the table and column naming scheme on "
"Oracle. This causes errors for models and fields with names longer than 30 "
"characters. Unfortunately, renaming some Oracle tables and columns is "
"required. Use the upgrade script in :ticket:`33789 <33789#comment:15>` to "
"generate ``RENAME`` statements to change naming scheme."
msgstr ""
"Django 4.0 无意中更改了 Oracle 上的表和列命名方案。这会导致模型和字段的名称超"
"过 30 个字符的错误。不幸的是，需要重命名一些 Oracle 表和列。请使用 :ticket:"
"`33789 <33789#comment:15>` 中的升级脚本生成 ``RENAME`` 语句来更改命名方案。"

msgid "Support for ``cx_Oracle`` < 7.0 is removed."
msgstr "已移除对 ``cx_Oracle`` 版本低于 7.0 的支持。"

msgid ""
"To allow serving a Django site on a subpath without changing the value of :"
"setting:`STATIC_URL`, the leading slash is removed from that setting (now "
"``'static/'``) in the default :djadmin:`startproject` template."
msgstr ""
"为了允许在子路径上提供 Django 站点而不更改 :setting:`STATIC_URL` 的值，现在在"
"默认的 :djadmin:`startproject` 模板中从该设置中移除了前导斜杠（现在是 "
"``'static/'``）。"

msgid ""
"The :class:`~django.contrib.admin.AdminSite` method for the admin ``index`` "
"view is no longer decorated with ``never_cache`` when accessed directly, "
"rather than via the recommended ``AdminSite.urls`` property, or ``AdminSite."
"get_urls()`` method."
msgstr ""
"当直接访问 :class:`~django.contrib.admin.AdminSite` 的管理 ``index`` 视图时，"
"不再使用 ``never_cache`` 进行装饰，而是建议通过 ``AdminSite.urls`` 属性或 "
"``AdminSite.get_urls()`` 方法访问。"

msgid ""
"Unsupported operations on a sliced queryset now raise ``TypeError`` instead "
"of ``AssertionError``."
msgstr ""
"对切片的查询集执行不支持的操作现在会引发 ``TypeError`` 而不是 "
"``AssertionError``。"

msgid ""
"The undocumented ``django.test.runner.reorder_suite()`` function is renamed "
"to ``reorder_tests()``. It now accepts an iterable of tests rather than a "
"test suite, and returns an iterator of tests."
msgstr ""
"未记录的 ``django.test.runner.reorder_suite()`` 函数已更名为 "
"``reorder_tests()``。现在它接受一个测试的可迭代对象而不是测试套件，并返回一个"
"测试的迭代器。"

msgid ""
"Calling ``FileSystemStorage.delete()`` with an empty ``name`` now raises "
"``ValueError`` instead of ``AssertionError``."
msgstr ""
"现在，如果使用空的 ``name`` 调用 ``FileSystemStorage.delete()``，会引发 "
"``ValueError`` 而不是 ``AssertionError``。"

msgid ""
"Calling ``EmailMultiAlternatives.attach_alternative()`` or ``EmailMessage."
"attach()`` with an invalid ``content`` or ``mimetype`` arguments now raise "
"``ValueError`` instead of ``AssertionError``."
msgstr ""
"如果使用无效的 ``content`` 或 ``mimetype`` 参数调用 ``EmailMultiAlternatives."
"attach_alternative()`` 或 ``EmailMessage.attach()``，现在会引发 "
"``ValueError`` 而不是 ``AssertionError``。"

msgid ""
":meth:`~django.test.SimpleTestCase.assertHTMLEqual` no longer considers a "
"non-boolean attribute without a value equal to an attribute with the same "
"name and value."
msgstr ""
":meth:`~django.test.SimpleTestCase.assertHTMLEqual` 不再将没有值的非布尔属性"
"视为与具有相同名称和值的属性相等。"

msgid ""
"Tests that fail to load, for example due to syntax errors, now always match "
"when using :option:`test --tag`."
msgstr ""
"现在，无法加载的测试，例如由于语法错误等原因，使用 :option:`test --tag` 时始"
"终匹配。"

msgid ""
"The undocumented ``django.contrib.admin.utils.lookup_needs_distinct()`` "
"function is renamed to ``lookup_spawns_duplicates()``."
msgstr ""
"未记录的 ``django.contrib.admin.utils.lookup_needs_distinct()`` 函数已更名为 "
"``lookup_spawns_duplicates()``。"

msgid ""
"The undocumented ``HttpRequest.get_raw_uri()`` method is removed. The :meth:"
"`.HttpRequest.build_absolute_uri` method may be a suitable alternative."
msgstr ""
"未记录的 ``HttpRequest.get_raw_uri()`` 方法已被移除。 :meth:`.HttpRequest."
"build_absolute_uri` 方法可能是一个合适的替代方法。"

msgid ""
"The ``object`` argument of undocumented ``ModelAdmin.log_addition()``, "
"``log_change()``, and ``log_deletion()`` methods is renamed to ``obj``."
msgstr ""
"未记录的 ``ModelAdmin.log_addition()``、``log_change()`` 和 "
"``log_deletion()`` 方法的 ``object`` 参数已更名为 ``obj``。"

msgid ""
":class:`~django.utils.feedgenerator.RssFeed`, :class:`~django.utils."
"feedgenerator.Atom1Feed`, and their subclasses now emit elements with no "
"content as self-closing tags."
msgstr ""
":class:`~django.utils.feedgenerator.RssFeed`、:class:`~django.utils."
"feedgenerator.Atom1Feed` 及其子类现在将没有内容的元素作为自关闭标签进行输出。"

msgid ""
"``NodeList.render()`` no longer casts the output of ``render()`` method for "
"individual nodes to a string. ``Node.render()`` should always return a "
"string as documented."
msgstr ""
"``NodeList.render()`` 不再将单个节点的 ``render()`` 方法的输出转换为字符串。"
"根据文档，``Node.render()`` 应始终返回一个字符串。"

msgid ""
"The ``where_class`` property of ``django.db.models.sql.query.Query`` and the "
"``where_class`` argument to the private ``get_extra_restriction()`` method "
"of ``ForeignObject`` and ``ForeignObjectRel`` are removed. If needed, "
"initialize ``django.db.models.sql.where.WhereNode`` instead."
msgstr ""
"``django.db.models.sql.query.Query`` 的 ``where_class`` 属性以及 "
"``ForeignObject`` 和 ``ForeignObjectRel`` 的私有方法 "
"``get_extra_restriction()`` 的 ``where_class`` 参数已被移除。如果需要，可以初"
"始化 ``django.db.models.sql.where.WhereNode``。"

msgid ""
"The ``filter_clause`` argument of the undocumented ``Query.add_filter()`` "
"method is replaced by two positional arguments ``filter_lhs`` and "
"``filter_rhs``."
msgstr ""
"未记录的 ``Query.add_filter()`` 方法的 ``filter_clause`` 参数被替换为两个位置"
"参数 ``filter_lhs`` 和 ``filter_rhs``。"

msgid ""
":class:`~django.middleware.csrf.CsrfViewMiddleware` now uses ``request."
"META['CSRF_COOKIE_NEEDS_UPDATE']`` in place of ``request."
"META['CSRF_COOKIE_USED']``, ``request.csrf_cookie_needs_reset``, and "
"``response.csrf_cookie_set`` to track whether the CSRF cookie should be "
"sent. This is an undocumented, private API."
msgstr ""
":class:`~django.middleware.csrf.CsrfViewMiddleware` 现在使用 ``request."
"META['CSRF_COOKIE_NEEDS_UPDATE']`` 代替 ``request."
"META['CSRF_COOKIE_USED']``、``request.csrf_cookie_needs_reset`` 和 "
"``response.csrf_cookie_set`` 来跟踪 CSRF cookie 是否应该发送。这是一个未记录"
"的私有 API。"

msgid ""
"The undocumented ``TRANSLATOR_COMMENT_MARK`` constant is moved from ``django."
"template.base`` to ``django.utils.translation.template``."
msgstr ""
"未记录的 ``TRANSLATOR_COMMENT_MARK`` 常量已从 ``django.template.base`` 移动"
"到 ``django.utils.translation.template``。"

msgid ""
"The ``real_apps`` argument of the undocumented ``django.db.migrations.state."
"ProjectState.__init__()`` method must now be a set if provided."
msgstr ""
"未记录的 ``django.db.migrations.state.ProjectState.__init__()`` 方法的 "
"``real_apps`` 参数现在必须是一个集合（set），如果提供的话。"

msgid ""
":class:`~django.forms.RadioSelect` and :class:`~django.forms."
"CheckboxSelectMultiple` widgets are now rendered in ``<div>`` tags so they "
"are announced more concisely by screen readers. If you need the previous "
"behavior, :ref:`override the widget template <overriding-built-in-widget-"
"templates>` with the appropriate template from Django 3.2."
msgstr ""
":class:`~django.forms.RadioSelect` 和 :class:`~django.forms."
"CheckboxSelectMultiple` 小部件现在在 ``<div>`` 标签中呈现，以便屏幕阅读器更简"
"洁地宣读它们。如果需要以前的行为，请使用来自 Django 3.2 的适当模板 :ref:`覆盖"
"小部件模板 <overriding-built-in-widget-templates>`。"

msgid ""
"The :tfilter:`floatformat` template filter no longer depends on the "
"``USE_L10N`` setting and always returns localized output. Use the ``u`` "
"suffix to disable localization."
msgstr ""
"模板过滤器 :tfilter:`floatformat` 不再依赖于 ``USE_L10N`` 设置，并始终返回本"
"地化的输出。使用 ``u`` 后缀来禁用本地化。"

msgid ""
"The default value of the ``USE_L10N`` setting is changed to ``True``. See "
"the :ref:`Localization section <use_l10n_deprecation>` above for more "
"details."
msgstr ""
"``USE_L10N`` 设置的默认值已更改为 ``True``。有关更多详细信息，请参阅上面的 :"
"ref:`本地化部分 <use_l10n_deprecation>`。"

msgid ""
"As part of the :ref:`move to zoneinfo <whats-new-4.0>`, ``django.utils."
"timezone.utc`` is changed to alias :attr:`datetime.timezone.utc`."
msgstr ""
"作为 :ref:`迁移到 zoneinfo <whats-new-4.0>` 的一部分，``django.utils."
"timezone.utc`` 被更改为别名 :attr:`datetime.timezone.utc`。"

msgid ""
"The minimum supported version of ``asgiref`` is increased from 3.3.2 to "
"3.4.1."
msgstr "``asgiref`` 的最低支持版本已从 3.3.2 增加到 3.4.1。"

msgid "Features deprecated in 4.0"
msgstr "在 4.0 版本中废弃的功能"

msgid "Use of ``pytz`` time zones"
msgstr "使用 ``pytz`` 时区"

msgid ""
"As part of the :ref:`move to zoneinfo <whats-new-4.0>`, use of ``pytz`` time "
"zones is deprecated."
msgstr ""
"作为 :ref:`迁移到 zoneinfo <whats-new-4.0>` 的一部分，不推荐使用 ``pytz`` 时"
"区。"

msgid ""
"Accordingly, the ``is_dst`` arguments to the following are also deprecated:"
msgstr "相应地，以下函数的 ``is_dst`` 参数也已被弃用："

msgid ":meth:`django.db.models.query.QuerySet.datetimes`"
msgstr ":meth:`django.db.models.query.QuerySet.datetimes`"

msgid ":func:`django.db.models.functions.Trunc`"
msgstr ":func:`django.db.models.functions.Trunc`"

msgid ":func:`django.db.models.functions.TruncSecond`"
msgstr ":func:`django.db.models.functions.TruncSecond`"

msgid ":func:`django.db.models.functions.TruncMinute`"
msgstr ":func:`django.db.models.functions.TruncMinute`"

msgid ":func:`django.db.models.functions.TruncHour`"
msgstr ":func:`django.db.models.functions.TruncHour`"

msgid ":func:`django.db.models.functions.TruncDay`"
msgstr ":func:`django.db.models.functions.TruncDay`"

msgid ":func:`django.db.models.functions.TruncWeek`"
msgstr ":func:`django.db.models.functions.TruncWeek`"

msgid ":func:`django.db.models.functions.TruncMonth`"
msgstr ":func:`django.db.models.functions.TruncMonth`"

msgid ":func:`django.db.models.functions.TruncQuarter`"
msgstr ":func:`django.db.models.functions.TruncQuarter`"

msgid ":func:`django.db.models.functions.TruncYear`"
msgstr ":func:`django.db.models.functions.TruncYear`"

msgid ":func:`django.utils.timezone.make_aware`"
msgstr ":func:`django.utils.timezone.make_aware`"

msgid "Support for use of ``pytz`` will be removed in Django 5.0."
msgstr "在 Django 5.0 中将移除对 ``pytz`` 的支持。"

msgid "Time zone support"
msgstr "时区支持"

msgid ""
"In order to follow good practice, the default value of the :setting:`USE_TZ` "
"setting will change from ``False`` to ``True``, and time zone support will "
"be enabled by default, in Django 5.0."
msgstr ""
"为了遵循良好的实践，:setting:`USE_TZ` 设置的默认值将从 ``False`` 更改为 "
"``True``，并且在 Django 5.0 中将默认启用时区支持。"

msgid ""
"Note that the default :file:`settings.py` file created by :djadmin:`django-"
"admin startproject <startproject>` includes :setting:`USE_TZ = True "
"<USE_TZ>` since Django 1.4."
msgstr ""
"请注意，由 :djadmin:`django-admin startproject <startproject>` 创建的默认 :"
"file:`settings.py` 文件自 Django 1.4 起就包括 :setting:`USE_TZ = True "
"<USE_TZ>`。"

msgid ""
"You can set ``USE_TZ`` to ``False`` in your project settings before then to "
"opt-out."
msgstr ""
"你可以在那之前在项目设置中将 ``USE_TZ`` 设置为 ``False`` 以选择不使用时区支"
"持。"

msgid "Localization"
msgstr "本地化"

msgid ""
"In order to follow good practice, the default value of the ``USE_L10N`` "
"setting is changed from ``False`` to ``True``."
msgstr ""
"为了遵循良好的实践，``USE_L10N`` 设置的默认值从 ``False`` 更改为 ``True``。"

msgid ""
"Moreover ``USE_L10N`` is deprecated as of this release. Starting with Django "
"5.0, by default, any date or number displayed by Django will be localized."
msgstr ""
"此外，从此版本开始，``USE_L10N`` 已被弃用。从 Django 5.0 开始，默认情况下，"
"Django 显示的任何日期或数字都将进行本地化。"

msgid ""
"The :ttag:`{% localize %} <localize>` tag and the :tfilter:`localize`/ :"
"tfilter:`unlocalize` filters will still be honored by Django."
msgstr ""
"Django 仍将支持 :ttag:`{% localize %} <localize>` 标签以及 :tfilter:"
"`localize`/ :tfilter:`unlocalize` 过滤器。"

msgid ""
"``SERIALIZE`` test setting is deprecated as it can be inferred from the :"
"attr:`~django.test.TestCase.databases` with the :ref:`serialized_rollback "
"<test-case-serialized-rollback>` option enabled."
msgstr ""
"``SERIALIZE`` 测试设置已被弃用，因为可以从启用 :ref:`serialized_rollback "
"<test-case-serialized-rollback>` 选项的 :attr:`~django.test.TestCase."
"databases` 推断出。"

msgid "The undocumented ``django.utils.baseconv`` module is deprecated."
msgstr "未记录的 ``django.utils.baseconv`` 模块已被弃用。"

msgid "The undocumented ``django.utils.datetime_safe`` module is deprecated."
msgstr "未记录的 ``django.utils.datetime_safe`` 模块已被弃用。"

msgid ""
"The default sitemap protocol for sitemaps built outside the context of a "
"request will change from ``'http'`` to ``'https'`` in Django 5.0."
msgstr ""
"在 Django 5.0 中，构建在请求上下文之外的站点地图的默认协议将从 ``'http'`` 更"
"改为 ``'https'``。"

msgid ""
"The ``extra_tests`` argument for :meth:`.DiscoverRunner.build_suite` and :"
"meth:`.DiscoverRunner.run_tests` is deprecated."
msgstr ""
":meth:`.DiscoverRunner.build_suite` 和 :meth:`.DiscoverRunner.run_tests` 的 "
"``extra_tests`` 参数已被弃用。"

msgid ""
"The :class:`~django.contrib.postgres.aggregates.ArrayAgg`, :class:`~django."
"contrib.postgres.aggregates.JSONBAgg`, and :class:`~django.contrib.postgres."
"aggregates.StringAgg` aggregates will return ``None`` when there are no rows "
"instead of ``[]``, ``[]``, and ``''`` respectively in Django 5.0. If you "
"need the previous behavior, explicitly set ``default`` to ``Value([])``, "
"``Value('[]')``, or ``Value('')``."
msgstr ""
"在 Django 5.0 中，当没有行时，:class:`~django.contrib.postgres.aggregates."
"ArrayAgg`、:class:`~django.contrib.postgres.aggregates.JSONBAgg` 和 :class:"
"`~django.contrib.postgres.aggregates.StringAgg` 聚合将返回 ``None``，而不是分"
"别返回 ``[]``、``[]`` 和 ``''``。如果需要以前的行为，请显式将 ``default`` 设"
"置为 ``Value([])``、``Value('[]')`` 或 ``Value('')``。"

msgid ""
"The ``django.contrib.gis.admin.GeoModelAdmin`` and ``OSMGeoAdmin`` classes "
"are deprecated. Use :class:`~django.contrib.admin.ModelAdmin` and :class:"
"`~django.contrib.gis.admin.GISModelAdmin` instead."
msgstr ""
"``django.contrib.gis.admin.GeoModelAdmin`` 和 ``OSMGeoAdmin`` 类已被弃用。请"
"改为使用 :class:`~django.contrib.admin.ModelAdmin` 和 :class:`~django."
"contrib.gis.admin.GISModelAdmin`。"

msgid ""
"Since form rendering now uses the template engine, the undocumented "
"``BaseForm._html_output()`` helper method is deprecated."
msgstr ""
"由于表单渲染现在使用模板引擎，未记录的 ``BaseForm._html_output()`` 辅助方法已"
"被弃用。"

msgid ""
"The ability to return a ``str`` from ``ErrorList`` and ``ErrorDict`` is "
"deprecated. It is expected these methods return a ``SafeString``."
msgstr ""
"从 ``ErrorList`` 和 ``ErrorDict`` 返回 ``str`` 的能力已被弃用。预期这些方法返"
"回一个 ``SafeString``。"

msgid "Features removed in 4.0"
msgstr "在 4.0 版本中移除的功能"

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 4.0."
msgstr "这些功能已经完成了废弃周期，并在 Django 4.0 中被移除。"

msgid ""
"See :ref:`deprecated-features-3.0` for details on these changes, including "
"how to remove usage of these features."
msgstr ""
"请参阅 :ref:`deprecated-features-3.0` 以获取有关这些更改的详细信息，包括如何"
"删除对这些功能的使用。"

msgid ""
"``django.utils.http.urlquote()``, ``urlquote_plus()``, ``urlunquote()``, and "
"``urlunquote_plus()`` are removed."
msgstr ""
"``django.utils.http.urlquote()``, ``urlquote_plus()``, ``urlunquote()``, 和 "
"``urlunquote_plus()`` 已被移除。"

msgid ""
"``django.utils.encoding.force_text()`` and ``smart_text()`` are removed."
msgstr "``django.utils.encoding.force_text()`` 和 ``smart_text()`` 已被移除。"

msgid ""
"``django.utils.translation.ugettext()``, ``ugettext_lazy()``, "
"``ugettext_noop()``, ``ungettext()``, and ``ungettext_lazy()`` are removed."
msgstr ""
"``django.utils.translation.ugettext()``, ``ugettext_lazy()``, "
"``ugettext_noop()``, ``ungettext()``, 和 ``ungettext_lazy()`` 已被移除。"

msgid ""
"``django.views.i18n.set_language()`` doesn't set the user language in "
"``request.session`` (key ``_language``)."
msgstr ""
"``django.views.i18n.set_language()`` 不会在 ``request.session`` 中设置用户语"
"言（键为 ``_language``）。"

msgid ""
"``alias=None`` is required in the signature of ``django.db.models.Expression."
"get_group_by_cols()`` subclasses."
msgstr ""
"``alias=None`` 在 ``django.db.models.Expression.get_group_by_cols()`` 子类的"
"签名中是必需的。"

msgid "``django.utils.text.unescape_entities()`` is removed."
msgstr "``django.utils.text.unescape_entities()`` 已被移除。"

msgid "``django.utils.http.is_safe_url()`` is removed."
msgstr "``django.utils.http.is_safe_url()`` 已被移除。"

msgid ""
"See :ref:`deprecated-features-3.1` for details on these changes, including "
"how to remove usage of these features."
msgstr ""
"请参阅 :ref:`deprecated-features-3.1` 以获取有关这些更改的详细信息，包括如何"
"删除对这些功能的使用。"

msgid "The ``PASSWORD_RESET_TIMEOUT_DAYS`` setting is removed."
msgstr "``PASSWORD_RESET_TIMEOUT_DAYS`` 设置已被移除。"

msgid ""
"The :lookup:`isnull` lookup no longer allows using non-boolean values as the "
"right-hand side."
msgstr ":lookup:`isnull` 查询不再允许使用非布尔值作为右侧的值。"

msgid ""
"The ``django.db.models.query_utils.InvalidQuery`` exception class is removed."
msgstr "``django.db.models.query_utils.InvalidQuery`` 异常类已被移除。"

msgid "The ``django-admin.py`` entry point is removed."
msgstr "``django-admin.py`` 入口点已被移除。"

msgid "The ``HttpRequest.is_ajax()`` method is removed."
msgstr "``HttpRequest.is_ajax()`` 方法已被移除。"

msgid ""
"Support for the pre-Django 3.1 encoding format of cookies values used by "
"``django.contrib.messages.storage.cookie.CookieStorage`` is removed."
msgstr ""
"已移除对由 ``django.contrib.messages.storage.cookie.CookieStorage`` 使用的 "
"Django 3.1 之前版本的 cookie 值编码格式的支持。"

msgid ""
"Support for the pre-Django 3.1 password reset tokens in the admin site (that "
"use the SHA-1 hashing algorithm) is removed."
msgstr ""
"移除了对使用 SHA-1 哈希算法的 Django 3.1 之前版本密码重置令牌在管理站点的支"
"持。"

msgid "Support for the pre-Django 3.1 encoding format of sessions is removed."
msgstr "移除了对使用 Django 3.1 之前编码格式的会话的支持。"

msgid ""
"Support for the pre-Django 3.1 ``django.core.signing.Signer`` signatures "
"(encoded with the SHA-1 algorithm) is removed."
msgstr ""
"已移除对 Django 3.1 之前版本中使用 SHA-1 算法编码的 ``django.core.signing."
"Signer`` 签名的支持。"

msgid ""
"Support for the pre-Django 3.1 ``django.core.signing.dumps()`` signatures "
"(encoded with the SHA-1 algorithm) in ``django.core.signing.loads()`` is "
"removed."
msgstr ""
"已移除在 ``django.core.signing.loads()`` 中对 Django 3.1 之前版本中使用 "
"SHA-1 算法编码的 ``django.core.signing.dumps()`` 签名的支持。"

msgid ""
"Support for the pre-Django 3.1 user sessions (that use the SHA-1 algorithm) "
"is removed."
msgstr "移除了对使用 SHA-1 算法的 Django 3.1 之前用户会话的支持。"

msgid ""
"The ``get_response`` argument for ``django.utils.deprecation.MiddlewareMixin."
"__init__()`` is required and doesn't accept ``None``."
msgstr ""
"``django.utils.deprecation.MiddlewareMixin.__init__()`` 的 ``get_response`` "
"参数是必需的，并且不接受 ``None``。"

msgid ""
"The ``providing_args`` argument for ``django.dispatch.Signal`` is removed."
msgstr "``django.dispatch.Signal`` 的 ``providing_args`` 参数已被移除。"

msgid ""
"The ``length`` argument for ``django.utils.crypto.get_random_string()`` is "
"required."
msgstr ""
"``django.utils.crypto.get_random_string()`` 的 ``length`` 参数是必需的。"

msgid "The ``list`` message for ``ModelMultipleChoiceField`` is removed."
msgstr "``ModelMultipleChoiceField`` 的 ``list`` 消息已被移除。"

msgid ""
"Support for passing raw column aliases to ``QuerySet.order_by()`` is removed."
msgstr "不再支持将原始列别名传递给 ``QuerySet.order_by()``。"

msgid ""
"The ``NullBooleanField`` model field is removed, except for support in "
"historical migrations."
msgstr "``NullBooleanField`` 模型字段已被移除，除了在历史迁移中的支持。"

msgid "``django.conf.urls.url()`` is removed."
msgstr "``django.conf.urls.url()`` 已被移除。"

msgid ""
"The ``django.contrib.postgres.fields.JSONField`` model field is removed, "
"except for support in historical migrations."
msgstr ""
"``django.contrib.postgres.fields.JSONField`` 模型字段已被移除，除了在历史迁移"
"中的支持。"

msgid ""
"``django.contrib.postgres.fields.jsonb.KeyTransform`` and ``django.contrib."
"postgres.fields.jsonb.KeyTextTransform`` are removed."
msgstr ""
"``django.contrib.postgres.fields.jsonb.KeyTransform`` 和 ``django.contrib."
"postgres.fields.jsonb.KeyTextTransform`` 已被移除。"

msgid "``django.contrib.postgres.forms.JSONField`` is removed."
msgstr "``django.contrib.postgres.forms.JSONField`` 已被移除。"

msgid ""
"The ``{% ifequal %}`` and ``{% ifnotequal %}`` template tags are removed."
msgstr "``{% ifequal %}`` 和 ``{% ifnotequal %}`` 模板标签已被移除。"

msgid "The ``DEFAULT_HASHING_ALGORITHM`` transitional setting is removed."
msgstr "``DEFAULT_HASHING_ALGORITHM`` 过渡设置已被移除。"

msgid "Django 4.0.1 release notes"
msgstr "Django 4.0.1 版本发行说明"

msgid ""
"Django 4.0.1 fixes one security issue with severity \"medium\", two security "
"issues with severity \"low\", and several bugs in 4.0."
msgstr ""
"Django 4.0.1 修复了一个\"中等\"严重性的安全问题，两个\"低\"严重性的安全问题，"
"以及 4.0 版本中的几个错误。"

msgid ""
"Fixed a regression in Django 4.0 that caused a crash of "
"``assertFormsetError()`` on a formset named ``form`` (:ticket:`33346`)."
msgstr ""
"修复了 Django 4.0 中的一个回归问题，该问题导致在名为 ``form`` 的表单集上调用 "
"``assertFormsetError()`` 时崩溃（:ticket:`33346`）。"

msgid ""
"Fixed a bug in Django 4.0 that caused a crash on booleans with the "
"``RedisCache`` backend (:ticket:`33361`)."
msgstr ""
"修复了 Django 4.0 中的一个错误，该错误导致在使用 ``RedisCache`` 后端时布尔值"
"引发崩溃（:ticket:`33361`）。"

msgid ""
"Relaxed the check added in Django 4.0 to reallow use of a duck-typed "
"``HttpRequest`` in ``django.views.decorators.cache.cache_control()`` and "
"``never_cache()`` decorators (:ticket:`33350`)."
msgstr ""
"在 Django 4.0 中放宽了对于在 ``django.views.decorators.cache."
"cache_control()`` 和 ``never_cache()`` 装饰器中使用鸭子类型的 "
"``HttpRequest`` 的检查，以重新允许这种用法（:ticket:`33350`）。"

msgid ""
"Fixed a regression in Django 4.0 that caused creating bogus migrations for "
"models that reference swappable models such as ``auth.User`` (:ticket:"
"`33366`)."
msgstr ""
"修复了 Django 4.0 中的一个回归问题，该问题导致创建引用可交换模型（如 ``auth."
"User`` ）的模型的虚假迁移（:ticket:`33366`）。"

msgid ""
"Fixed a long standing bug in :ref:`geos-geometry-collections` and :class:"
"`~django.contrib.gis.geos.Polygon` that caused a crash on some platforms "
"(reported on macOS based on the ``ARM64`` architecture) (:ticket:`32600`)."
msgstr ""
"修复了 :ref:`geos-geometry-collections` 和 :class:`~django.contrib.gis.geos."
"Polygon` 中的一个长期存在的 bug，该 bug 导致在某些平台上崩溃（在 macOS 上基"
"于 ``ARM64`` 架构的报告）（:ticket:`32600`）。"

msgid "Django 4.0.10 release notes"
msgstr "Django 4.0.10 版本发行说明"

msgid ""
"Django 4.0.10 fixes a security issue with severity \"moderate\" in 4.0.9."
msgstr "Django 4.0.10 修复了 4.0.9 版本中一个\"中等\"严重性的安全问题。"

msgid "Django 4.0.2 release notes"
msgstr "Django 4.0.2 版本发行说明"

msgid ""
"Django 4.0.2 fixes two security issues with severity \"medium\" and several "
"bugs in 4.0.1. Also, the latest string translations from Transifex are "
"incorporated, with a special mention for Bulgarian (fully translated)."
msgstr ""
"Django 4.0.2 修复了两个\"中等\"严重性的安全问题，以及 4.0.1 版本中的几个错"
"误。此外，最新的 Transifex 字符串翻译已经整合，特别提及保加利亚语（完全翻"
"译）。"

msgid ""
"Fixed a bug in Django 4.0 where ``TestCase.captureOnCommitCallbacks()`` "
"could execute callbacks multiple times (:ticket:`33410`)."
msgstr ""
"修复了 Django 4.0 中的一个 bug，该 bug 导致 ``TestCase."
"captureOnCommitCallbacks()`` 可能会多次执行回调函数（:ticket:`33410`）。"

msgid ""
"Fixed a regression in Django 4.0 where ``help_text`` was HTML-escaped in "
"automatically-generated forms (:ticket:`33419`)."
msgstr ""
"修复了 Django 4.0 中的一个回归问题，该问题导致在自动生成的表单中对 "
"``help_text`` 进行 HTML 转义（:ticket:`33419`）。"

msgid ""
"Fixed a regression in Django 4.0 that caused displaying an incorrect name "
"for class-based views on the technical 404 debug page (:ticket:`33425`)."
msgstr ""
"修复了 Django 4.0 中的一个回归问题，该问题导致在技术性 404 调试页面上显示类基"
"视图的不正确名称（:ticket:`33425`）。"

msgid ""
"Fixed a regression in Django 4.0 that caused an incorrect ``repr`` of "
"``ResolverMatch`` for class-based views (:ticket:`33426`)."
msgstr ""
"修复了 Django 4.0 中的一个回归问题，该问题导致类基视图的 ``ResolverMatch`` "
"的 ``repr`` 不正确（:ticket:`33426`）。"

msgid ""
"Fixed a regression in Django 4.0 that caused a crash of ``makemigrations`` "
"on models without ``Meta.order_with_respect_to`` but with a field named "
"``_order`` (:ticket:`33449`)."
msgstr ""
"修复了 Django 4.0 中的一个回归问题，该问题导致在没有 ``Meta."
"order_with_respect_to`` 但具有名为 ``_order`` 的字段的模型上运行 "
"``makemigrations`` 时崩溃（:ticket:`33449`）。"

msgid ""
"Fixed a regression in Django 4.0 that caused incorrect :attr:`.ModelAdmin."
"radio_fields` layout in the admin (:ticket:`33407`)."
msgstr ""
"修复了 Django 4.0 中的一个回归问题，该问题导致管理员中 :attr:`.ModelAdmin."
"radio_fields` 布局不正确（:ticket:`33407`）。"

msgid ""
"Fixed a duplicate operation regression in Django 4.0 that caused a migration "
"crash when altering a primary key type for a concrete parent model "
"referenced by a foreign key (:ticket:`33462`)."
msgstr ""
"修复了 Django 4.0 中的一个重复操作回归问题，该问题导致在更改外键引用的具体父"
"模型的主键类型时，迁移崩溃（:ticket:`33462`）。"

msgid ""
"Fixed a bug in Django 4.0 that caused a crash of ``QuerySet.aggregate()`` "
"after ``annotate()`` on an aggregate function with a :ref:`default "
"<aggregate-default>` (:ticket:`33468`)."
msgstr ""
"修复了 Django 4.0 中的一个 bug，该 bug 导致在对带有 :ref:`default <aggregate-"
"default>` 的聚合函数进行 ``annotate()`` 后调用 ``QuerySet.aggregate()`` 时崩"
"溃（:ticket:`33468`）。"

msgid ""
"Fixed a regression in Django 4.0 that caused a crash of ``makemigrations`` "
"when renaming a field of a renamed model (:ticket:`33480`)."
msgstr ""
"修复了 Django 4.0 中的一个回归问题，该问题导致在重命名模型的字段时运行 "
"``makemigrations`` 时崩溃（:ticket:`33480`）。"

msgid "Django 4.0.3 release notes"
msgstr "Django 4.0.3 版本发行说明"

msgid "*March 1, 2022*"
msgstr "*2022 年 3 月 1 日*"

msgid ""
"Django 4.0.3 fixes several bugs in 4.0.2. Also, all Python code in Django is "
"reformatted with :pypi:`black`."
msgstr ""
"Django 4.0.3 修复了 4.0.2 中的一些 bug。此外，Django 中的所有 Python 代码都使"
"用 :pypi:`black` 进行了重新格式化。"

msgid ""
"Prevented, following a regression in Django 4.0.1, :djadmin:`makemigrations` "
"from generating infinite migrations for a model with ``ManyToManyField`` to "
"a lowercased swappable model such as ``'auth.user'`` (:ticket:`33515`)."
msgstr ""
"在 Django 4.0.1 中修复了一个回归问题，防止 :djadmin:`makemigrations` 为具有到"
"小写的可交换模型（如 ``'auth.user'``）的 ``ManyToManyField`` 的模型生成无限迁"
"移（:ticket:`33515`）。"

msgid ""
"Fixed a regression in Django 4.0 that caused a crash when rendering invalid "
"inlines with :attr:`~django.contrib.admin.ModelAdmin.readonly_fields` in the "
"admin (:ticket:`33547`)."
msgstr ""
"修复了 Django 4.0 中的一个回归问题，该问题导致在管理员中使用 :attr:`~django."
"contrib.admin.ModelAdmin.readonly_fields` 渲染无效的内联时崩溃（:ticket:"
"`33547`）。"

msgid "Django 4.0.4 release notes"
msgstr "Django 4.0.4 版本发行说明"

msgid ""
"Django 4.0.4 fixes two security issues with severity \"high\" and two bugs "
"in 4.0.3."
msgstr ""
"Django 4.0.4 修复了两个严重程度为 \"高\" 的安全问题和两个 4.0.3 版本中的错"
"误。"

msgid ""
"Fixed a regression in Django 4.0 that caused ignoring multiple "
"``FilteredRelation()`` relationships to the same field (:ticket:`33598`)."
msgstr ""
"修复了 Django 4.0 中的一个回归问题，该问题导致忽略多个到同一字段的 "
"``FilteredRelation()`` 关系（:ticket:`33598`）。"

msgid "Django 4.0.5 release notes"
msgstr "Django 4.0.5 版本发行说明"

msgid "*June 1, 2022*"
msgstr "*2022 年 6 月 1 日*"

msgid "Django 4.0.5 fixes several bugs in 4.0.4."
msgstr "Django 4.0.5 修复了 4.0.4 版本中的一些错误。"

msgid ""
"Fixed a bug in Django 4.0 where not all :setting:`OPTIONS <CACHES-OPTIONS>` "
"were passed to a Redis client (:ticket:`33681`)."
msgstr ""
"修复了 Django 4.0 中的一个 bug，该 bug 导致未将所有 :setting:`OPTIONS "
"<CACHES-OPTIONS>` 传递给 Redis 客户端（:ticket:`33681`）。"

msgid ""
"Fixed a bug in Django 4.0 that caused a crash of ``QuerySet.filter()`` on "
"``IsNull()`` expressions (:ticket:`33705`)."
msgstr ""
"修复了 Django 4.0 中的一个 bug，该 bug 导致在 ``IsNull()`` 表达式上调用 "
"``QuerySet.filter()`` 时崩溃（:ticket:`33705`）。"

msgid ""
"Fixed a bug in Django 4.0 where a hidden quick filter toolbar in the admin's "
"navigation sidebar was focusable (:ticket:`33725`)."
msgstr ""
"修复了 Django 4.0 中的一个 bug，该 bug 导致管理员导航边栏中的隐藏快速过滤工具"
"栏是可聚焦的（:ticket:`33725`）。"

msgid "Django 4.0.6 release notes"
msgstr "Django 4.0.6 版本发行说明"

msgid "Django 4.0.6 fixes a security issue with severity \"high\" in 4.0.5."
msgstr "Django 4.0.6 修复了 4.0.5 版本中的一个严重安全问题。"

msgid "Django 4.0.7 release notes"
msgstr "Django 4.0.7 版本发行说明"

msgid "Django 4.0.7 fixes a security issue with severity \"high\" in 4.0.6."
msgstr "Django 4.0.7 修复了在 4.0.6 版本中的一个严重安全问题。"

msgid "Django 4.0.8 release notes"
msgstr "Django 4.0.8 版本发行说明"

msgid "Django 4.0.8 fixes a security issue with severity \"medium\" in 4.0.7."
msgstr "Django 4.0.8 修复了 4.0.7 版本中一个严重程度为\"中等\"的安全问题。"

msgid "Django 4.0.9 release notes"
msgstr "Django 4.0.9 版本发行说明"

msgid ""
"Django 4.0.9 fixes a security issue with severity \"moderate\" in 4.0.8."
msgstr "Django 4.0.9 修复了 4.0.8 版本中一个\"中等\"严重性的安全问题。"

msgid "Django 4.1 release notes"
msgstr "Django 4.1 版本发行说明"

msgid "Welcome to Django 4.1!"
msgstr "欢迎使用 Django 4.1！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-4.1>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-4.1>` "
"you'll want to be aware of when upgrading from Django 4.0 or earlier. We've :"
"ref:`begun the deprecation process for some features <deprecated-"
"features-4.1>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-4.1>`，以及从 Django 4.0 或更早版"
"本升级时需要注意的一些 :ref:`不兼容变更 <backwards-incompatible-4.1>`。我们已"
"经 :ref:`开始了某些功能的弃用过程 <deprecated-features-4.1>`。"

msgid ""
"Django 4.1 supports Python 3.8, 3.9, 3.10, and 3.11 (as of 4.1.3). We "
"**highly recommend** and only officially support the latest release of each "
"series."
msgstr ""
"Django 4.1 支持 Python 3.8、3.9、3.10 和 3.11（从 4.1.3 开始）。我们 **强烈建"
"议** 并且只官方支持每个系列的最新发布版本。"

msgid "What's new in Django 4.1"
msgstr "Django 4.1 新特性"

msgid "Asynchronous handlers for class-based views"
msgstr "基于类的视图的异步处理程序。"

msgid "View subclasses may now define async HTTP method handlers::"
msgstr "现在，视图的子类可以定义异步的 HTTP 方法处理程序："

msgid "See :ref:`async-class-based-views` for more details."
msgstr "请参阅 :ref:`async-class-based-views` 以获取更多详细信息。"

msgid "Asynchronous ORM interface"
msgstr "异步的 ORM 接口。"

msgid ""
"``QuerySet`` now provides an asynchronous interface for all data access "
"operations. These are named as-per the existing synchronous operations but "
"with an ``a`` prefix, for example ``acreate()``, ``aget()``, and so on."
msgstr ""
"``QuerySet`` 现在为所有数据访问操作提供了异步接口。这些接口的命名方式与现有的"
"同步操作相同，但带有一个 ``a`` 前缀，例如 ``acreate()``、``aget()`` 等等。"

msgid ""
"The new interface allows you to write asynchronous code without needing to "
"wrap ORM operations in ``sync_to_async()``::"
msgstr ""
"新的接口允许您编写异步代码，而无需将 ORM 操作包装在 ``sync_to_async()`` 中："

msgid ""
"Note that, at this stage, the underlying database operations remain "
"synchronous, with contributions ongoing to push asynchronous support down "
"into the SQL compiler, and integrate asynchronous database drivers. The new "
"asynchronous queryset interface currently encapsulates the necessary "
"``sync_to_async()`` operations for you, and will allow your code to take "
"advantage of developments in the ORM's asynchronous support as it evolves."
msgstr ""
"值得注意的是，目前数据库操作仍然是同步的，但正在进行贡献工作，以将异步支持推"
"向 SQL 编译器并集成异步数据库驱动程序。新的异步查询集接口目前为您封装了必要"
"的 ``sync_to_async()`` 操作，将允许您的代码充分利用 ORM 异步支持的发展。"

msgid "See :ref:`async-queries` for details and limitations."
msgstr "请参阅 :ref:`async-queries` 以获取详细信息和限制。"

msgid "Validation of Constraints"
msgstr "约束的验证"

msgid ""
":class:`Check <django.db.models.CheckConstraint>`, :class:`unique <django.db."
"models.UniqueConstraint>`, and :class:`exclusion <django.contrib.postgres."
"constraints.ExclusionConstraint>` constraints defined in the :attr:`Meta."
"constraints <django.db.models.Options.constraints>` option are now checked "
"during :ref:`model validation <validating-objects>`."
msgstr ""
"在 :attr:`Meta.constraints <django.db.models.Options.constraints>` 选项中定义"
"的 :class:`Check <django.db.models.CheckConstraint>`、:class:`unique <django."
"db.models.UniqueConstraint>` 和 :class:`exclusion <django.contrib.postgres."
"constraints.ExclusionConstraint>` 约束现在在 :ref:`模型验证 <validating-"
"objects>` 期间进行检查。"

msgid "Form rendering accessibility"
msgstr "表单渲染的可访问性"

msgid ""
"In order to aid users with screen readers, and other assistive technology, "
"new ``<div>`` based form templates are available from this release. These "
"provide more accessible navigation than the older templates, and are able to "
"correctly group related controls, such as radio-lists, into fieldsets."
msgstr ""
"为了帮助使用屏幕阅读器和其他辅助技术的用户，从这个版本开始提供了基于 "
"``<div>`` 的新表单模板。这些模板提供比旧模板更可访问的导航，并能够正确地将相"
"关控件（如单选列表）分组到字段集中。"

msgid ""
"The new templates are recommended, and will become the default form "
"rendering style when outputting a form, like ``{{ form }}`` in a template, "
"from Django 5.0."
msgstr ""
"推荐使用新模板，并且在 Django 5.0 中，当在模板中输出表单时（如 ``{{ form }}"
"``），新模板将成为默认的表单呈现样式。"

msgid ""
"In order to ease adopting the new output style, the default form and formset "
"templates are now configurable at the project level via the :setting:"
"`FORM_RENDERER` setting."
msgstr ""
"为了方便采用新的输出样式，现在可以通过项目级别的 :setting:`FORM_RENDERER` 设"
"置来配置默认的表单和表单集模板。"

msgid "See :ref:`the Forms section (below)<forms-4.1>` for full details."
msgstr "请查看 :ref:`下面的表单部分 <forms-4.1>` 以获取完整的详细信息。"

msgid "``CSRF_COOKIE_MASKED`` setting"
msgstr "``CSRF_COOKIE_MASKED`` 设置"

msgid ""
"The new ``CSRF_COOKIE_MASKED`` transitional setting allows specifying "
"whether to mask the CSRF cookie."
msgstr ""
"新的 ``CSRF_COOKIE_MASKED`` 过渡性设置允许指定是否要对 CSRF cookie 进行掩码处"
"理。"

msgid ""
":class:`~django.middleware.csrf.CsrfViewMiddleware` no longer masks the CSRF "
"cookie like it does the CSRF token in the DOM. If you are upgrading multiple "
"instances of the same project to Django 4.1, you should set "
"``CSRF_COOKIE_MASKED`` to ``True`` during the transition, in order to allow "
"compatibility with the older versions of Django. Once the transition to 4.1 "
"is complete you can stop overriding ``CSRF_COOKIE_MASKED``."
msgstr ""
":class:`~django.middleware.csrf.CsrfViewMiddleware` 不再像它在 DOM 中处理 "
"CSRF 令牌一样对 CSRF cookie 进行掩码处理。如果你正在将同一项目的多个实例升级"
"到 Django 4.1，你应该在过渡期间将 ``CSRF_COOKIE_MASKED`` 设置为 ``True``，以"
"便与旧版本的 Django 兼容。一旦升级到 4.1 完成，你可以停止覆盖 "
"``CSRF_COOKIE_MASKED``。"

msgid ""
"This setting is deprecated as of this release and will be removed in Django "
"5.0."
msgstr "该设置在此版本中已被弃用，并将在 Django 5.0 中移除。"

msgid ""
"The admin :ref:`dark mode CSS variables <admin-theming>` are now applied in "
"a separate stylesheet and template block."
msgstr ""
"管理员 :ref:`深色模式 CSS 变量 <admin-theming>` 现在应用在一个单独的样式表和"
"模板块中。"

msgid ""
":ref:`modeladmin-list-filters` providing custom ``FieldListFilter`` "
"subclasses can now control the query string value separator when filtering "
"for multiple values using the ``__in`` lookup."
msgstr ""
"提供自定义 ``FieldListFilter`` 子类的 :ref:`modeladmin-list-filters` 现在可以"
"在使用 ``__in`` 查询时控制查询字符串值的分隔符，用于多个值的过滤。"

msgid ""
"The admin :meth:`history view <django.contrib.admin.ModelAdmin."
"history_view>` is now paginated."
msgstr ""
"管理员的 :meth:`history view <django.contrib.admin.ModelAdmin.history_view>` "
"现在支持分页。"

msgid "Related widget wrappers now have a link to object's change form."
msgstr "相关的小部件包装现在有一个指向对象修改表单的链接。"

msgid ""
"The :meth:`.AdminSite.get_app_list` method now allows changing the order of "
"apps and models on the admin index page."
msgstr ""
":meth:`.AdminSite.get_app_list` 方法现在允许更改管理员首页上应用程序和模型的"
"顺序。"

msgid ""
"The default iteration count for the PBKDF2 password hasher is increased from "
"320,000 to 390,000."
msgstr "PBKDF2 密码哈希器的默认迭代次数从 320 , 000 增加到 390 , 000 。"

msgid ""
"The :meth:`.RemoteUserBackend.configure_user` method now allows "
"synchronizing user attributes with attributes in a remote system such as an "
"LDAP directory."
msgstr ""
":meth:`.RemoteUserBackend.configure_user` 方法现在允许将用户属性与远程系统"
"（如 LDAP 目录）中的属性同步。"

msgid ""
"The new :meth:`.GEOSGeometry.make_valid()` method allows converting invalid "
"geometries to valid ones."
msgstr ""
"新的 :meth:`.GEOSGeometry.make_valid()` 方法允许将无效的几何图形转换为有效的"
"几何图形。"

msgid ""
"The new ``clone`` argument for :meth:`.GEOSGeometry.normalize` allows "
"creating a normalized clone of the geometry."
msgstr ""
":meth:`.GEOSGeometry.normalize` 的新参数 ``clone`` 允许创建几何图形的归一化克"
"隆。"

msgid ""
"The new :class:`BitXor() <django.contrib.postgres.aggregates.BitXor>` "
"aggregate function returns an ``int`` of the bitwise ``XOR`` of all non-null "
"input values."
msgstr ""
"新的 :class:`BitXor() <django.contrib.postgres.aggregates.BitXor>` 聚合函数返"
"回所有非空输入值的按位 ``XOR`` 的 ``int`` 值。"

msgid ""
":class:`~django.contrib.postgres.indexes.SpGistIndex` now supports covering "
"indexes on PostgreSQL 14+."
msgstr ""
":class:`~django.contrib.postgres.indexes.SpGistIndex` 现在在 PostgreSQL 14+ "
"上支持覆盖索引。"

msgid ""
":class:`~django.contrib.postgres.constraints.ExclusionConstraint` now "
"supports covering exclusion constraints using SP-GiST indexes on PostgreSQL "
"14+."
msgstr ""
":class:`~django.contrib.postgres.constraints.ExclusionConstraint` 现在在 "
"PostgreSQL 14+ 上支持使用 SP-GiST 索引的覆盖排除约束。"

msgid ""
"The new ``default_bounds`` attribute of :attr:`DateTimeRangeField <django."
"contrib.postgres.fields.DateTimeRangeField.default_bounds>` and :attr:"
"`DecimalRangeField <django.contrib.postgres.fields.DecimalRangeField."
"default_bounds>` allows specifying bounds for list and tuple inputs."
msgstr ""
"新的 :attr:`DateTimeRangeField <django.contrib.postgres.fields."
"DateTimeRangeField.default_bounds>` 和 :attr:`DecimalRangeField <django."
"contrib.postgres.fields.DecimalRangeField.default_bounds>` 的 "
"``default_bounds`` 属性允许为列表和元组输入指定边界。"

msgid ""
":class:`~django.contrib.postgres.constraints.ExclusionConstraint` now allows "
"specifying operator classes with the :class:`OpClass() <django.contrib."
"postgres.indexes.OpClass>` expression."
msgstr ""
":class:`~django.contrib.postgres.constraints.ExclusionConstraint` 现在允许使"
"用 :class:`OpClass() <django.contrib.postgres.indexes.OpClass>` 表达式指定操"
"作符类。"

msgid ""
"The default sitemap index template ``<sitemapindex>`` now includes the "
"``<lastmod>`` timestamp where available, through the new :meth:`~django."
"contrib.sitemaps.Sitemap.get_latest_lastmod` method. Custom sitemap index "
"templates should be updated for the adjusted :ref:`context variables "
"<sitemap-index-context-variables>`."
msgstr ""
"默认的站点地图索引模板 ``<sitemapindex>`` 现在在可用时包括 ``<lastmod>`` 时间"
"戳，通过新的 :meth:`~django.contrib.sitemaps.Sitemap.get_latest_lastmod` 方"
"法。自定义站点地图索引模板应该根据调整后的 :ref:`上下文变量 <sitemap-index-"
"context-variables>` 进行更新。"

msgid ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` now "
"replaces paths to CSS source map references with their hashed counterparts."
msgstr ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` 现在"
"会将 CSS 源映射引用的路径替换为它们的哈希版本。"

msgid ""
"Third-party database backends can now specify the minimum required version "
"of the database using the ``DatabaseFeatures.minimum_database_version`` "
"attribute which is a tuple (e.g. ``(10, 0)`` means \"10.0\"). If a minimum "
"version is specified, backends must also implement ``DatabaseWrapper."
"get_database_version()``, which returns a tuple of the current database "
"version. The backend's ``DatabaseWrapper.init_connection_state()`` method "
"must call ``super()`` in order for the check to run."
msgstr ""
"第三方数据库后端现在可以使用 ``DatabaseFeatures.minimum_database_version`` 属"
"性指定数据库的最低要求版本，它是一个元组（例如 ``(10, 0)`` 表示 \"10.0\"）。"
"如果指定了最低版本，后端还必须实现 ``DatabaseWrapper."
"get_database_version()``，该方法返回当前数据库版本的元组。后端的 "
"``DatabaseWrapper.init_connection_state()`` 方法必须调用 ``super()`` 以便进行"
"版本检查。"

msgid ""
"The default template used to render forms when cast to a string, e.g. in "
"templates as ``{{ form }}``, is now configurable at the project-level by "
"setting :attr:`~django.forms.renderers.BaseRenderer.form_template_name` on "
"the class provided for :setting:`FORM_RENDERER`."
msgstr ""
"渲染表单时默认使用的模板，例如在模板中作为 ``{{ form }}`` 显示，现在可以在项"
"目级别通过在提供给 :setting:`FORM_RENDERER` 的类上设置 :attr:`~django.forms."
"renderers.BaseRenderer.form_template_name` 来配置。"

msgid ""
":attr:`.Form.template_name` is now a property deferring to the renderer, but "
"may be overridden with a string value to specify the template name per-form "
"class."
msgstr ""
":attr:`.Form.template_name` 现在是一个属性，延迟到渲染器，但可以用一个字符串"
"值覆盖，以指定每个表单类的模板名称。"

msgid ""
"Similarly, the default template used to render formsets can be specified via "
"the matching :attr:`~django.forms.renderers.BaseRenderer."
"formset_template_name` renderer attribute."
msgstr ""
"同样，可以通过匹配的 :attr:`~django.forms.renderers.BaseRenderer."
"formset_template_name` 渲染器属性来指定用于渲染表单集的默认模板。"

msgid ""
"The new ``div.html`` form template, referencing :attr:`.Form."
"template_name_div` attribute, and matching :meth:`.Form.as_div` method, "
"render forms using HTML ``<div>`` elements."
msgstr ""
"新的 ``div.html`` 表单模板引用了 :attr:`.Form.template_name_div` 属性，并与 :"
"meth:`.Form.as_div` 方法匹配，使用 HTML ``<div>`` 元素来渲染表单。"

msgid ""
"This new output style is recommended over the existing :meth:`~.Form."
"as_table`, :meth:`~.Form.as_p` and :meth:`~.Form.as_ul` styles, as the "
"template implements ``<fieldset>`` and ``<legend>`` to group related inputs "
"and is easier for screen reader users to navigate."
msgstr ""
"推荐使用这种新的输出样式，而不是现有的 :meth:`~.Form.as_table`、:meth:`~."
"Form.as_p` 和 :meth:`~.Form.as_ul` 样式，因为模板实现了 ``<fieldset>`` 和 "
"``<legend>`` 来组合相关的输入，对屏幕阅读器用户更容易导航。"

msgid ""
"The div-based output will become the default rendering style from Django 5.0."
msgstr "从 Django 5.0 开始，基于 div 的输出将成为默认的渲染样式。"

msgid ""
"In order to smooth adoption of the new ``<div>`` output style, two "
"transitional form renderer classes are available: ``django.forms.renderers."
"DjangoDivFormRenderer`` and ``django.forms.renderers."
"Jinja2DivFormRenderer``, for the Django and Jinja2 template backends "
"respectively."
msgstr ""
"为了平稳过渡到新的 ``<div>`` 输出样式，提供了两个过渡性的表单渲染器类："
"``django.forms.renderers.DjangoDivFormRenderer`` 和 ``django.forms.renderers."
"Jinja2DivFormRenderer``，分别适用于 Django 和 Jinja2 模板后端。"

msgid ""
"You can apply one of these via the :setting:`FORM_RENDERER` setting. For "
"example::"
msgstr "您可以通过 :setting:`FORM_RENDERER` 设置之一来应用其中之一。例如："

msgid ""
"Once the ``<div>`` output style is the default, from Django 5.0, these "
"transitional renderers will be deprecated, for removal in Django 6.0. The "
"``FORM_RENDERER`` declaration can be removed at that time."
msgstr ""
"一旦 ``<div>`` 输出样式成为默认样式（从 Django 5.0 开始），这些过渡渲染器将被"
"弃用，并计划在 Django 6.0 中移除。届时可以删除 ``FORM_RENDERER`` 声明。"

msgid ""
"If the new ``<div>`` output style is not appropriate for your project, you "
"should define a renderer subclass specifying :attr:`~django.forms.renderers."
"BaseRenderer.form_template_name` and :attr:`~django.forms.renderers."
"BaseRenderer.formset_template_name` for your required style, and set :"
"setting:`FORM_RENDERER` accordingly."
msgstr ""
"如果新的 ``<div>`` 输出样式不适用于您的项目，您应该定义一个渲染器子类，指定 :"
"attr:`~django.forms.renderers.BaseRenderer.form_template_name` 和 :attr:"
"`~django.forms.renderers.BaseRenderer.formset_template_name` 以适应您所需的样"
"式，并相应地设置 :setting:`FORM_RENDERER`。"

msgid ""
"For example, for the ``<p>`` output style used by :meth:`~.Form.as_p`, you "
"would define a form renderer setting ``form_template_name`` to ``\"django/"
"forms/p.html\"`` and ``formset_template_name`` to ``\"django/forms/formsets/"
"p.html\"``."
msgstr ""
"例如，对于 :meth:`~.Form.as_p` 使用的 ``<p>`` 输出样式，您可以定义一个表单渲"
"染器设置，将 ``form_template_name`` 设置为 ``\"django/forms/p.html\"``，将 "
"``formset_template_name`` 设置为 ``\"django/forms/formsets/p.html\"``。"

msgid ""
"The new :meth:`~django.forms.BoundField.legend_tag` allows rendering field "
"labels in ``<legend>`` tags via the new ``tag`` argument of :meth:`~django."
"forms.BoundField.label_tag`."
msgstr ""
"新的 :meth:`~django.forms.BoundField.legend_tag` 允许通过 :meth:`~django."
"forms.BoundField.label_tag` 的新 ``tag`` 参数以 ``<legend>`` 标签方式呈现字段"
"标签。"

msgid ""
"The new ``edit_only`` argument for :func:`.modelformset_factory` and :func:`."
"inlineformset_factory` allows preventing new objects creation."
msgstr ""
"对于 :func:`.modelformset_factory` 和 :func:`.inlineformset_factory`，新的 "
"``edit_only`` 参数允许防止创建新对象。"

msgid ""
"The ``js`` and ``css`` class attributes of :doc:`Media </topics/forms/"
"media>` now allow using hashable objects, not only path strings, as long as "
"those objects implement the ``__html__()`` method (typically when decorated "
"with the :func:`~django.utils.html.html_safe` decorator)."
msgstr ""
":doc:`媒体 </topics/forms/media>` 的 ``js`` 和 ``css`` 类属性现在允许使用可散"
"列的对象，而不仅仅是路径字符串，只要这些对象实现了 ``__html__()`` 方法（通常"
"在使用 :func:`~django.utils.html.html_safe` 装饰器时）。"

msgid ""
"The new :attr:`.BoundField.use_fieldset` and :attr:`.Widget.use_fieldset` "
"attributes help to identify widgets where its inputs should be grouped in a "
"``<fieldset>`` with a ``<legend>``."
msgstr ""
"新的 :attr:`.BoundField.use_fieldset` 和 :attr:`.Widget.use_fieldset` 属性有"
"助于识别那些应该在 ``<fieldset>`` 中与 ``<legend>`` 一起分组的小部件。"

msgid ""
"The :ref:`formsets-error-messages` argument for :class:`~django.forms."
"formsets.BaseFormSet` now allows customizing error messages for invalid "
"number of forms by passing ``'too_few_forms'`` and ``'too_many_forms'`` keys."
msgstr ""
":class:`~django.forms.formsets.BaseFormSet` 的 :ref:`formsets-error-"
"messages` 参数现在允许通过传递 ``'too_few_forms'`` 和 ``'too_many_forms'`` 键"
"来自定义无效表单数量的错误消息。"

msgid ""
":class:`~django.forms.IntegerField`, :class:`~django.forms.FloatField`, and :"
"class:`~django.forms.DecimalField` now optionally accept a ``step_size`` "
"argument. This is used to set the ``step`` HTML attribute, and is validated "
"on form submission."
msgstr ""
":class:`~django.forms.IntegerField`、:class:`~django.forms.FloatField` 和 :"
"class:`~django.forms.DecimalField` 现在可以选择接受一个 ``step_size`` 参数。"
"这用于设置 ``step`` HTML 属性，并在表单提交时进行验证。"

msgid ""
"The :func:`~django.conf.urls.i18n.i18n_patterns` function now supports "
"languages with both scripts and regions."
msgstr ""
":func:`~django.conf.urls.i18n.i18n_patterns` 函数现在支持同时包含脚本和区域的"
"语言。"

msgid ""
":option:`makemigrations --no-input` now logs default answers and reasons why "
"migrations cannot be created."
msgstr ""
":option:`makemigrations --no-input` 现在记录默认答案和无法创建迁移的原因。"

msgid ""
"The new :option:`makemigrations --scriptable` option diverts log output and "
"input prompts to ``stderr``, writing only paths of generated migration files "
"to ``stdout``."
msgstr ""
"新的 :option:`makemigrations --scriptable` 选项将日志输出和输入提示重定向到 "
"``stderr``，仅将生成的迁移文件的路径写入 ``stdout``。"

msgid ""
"The new :option:`migrate --prune` option allows deleting nonexistent "
"migrations from the ``django_migrations`` table."
msgstr ""
"新的 :option:`migrate --prune` 选项允许从 ``django_migrations`` 表中删除不存"
"在的迁移。"

msgid ""
"Python files created by :djadmin:`startproject`, :djadmin:`startapp`, :"
"djadmin:`optimizemigration`, :djadmin:`makemigrations`, and :djadmin:"
"`squashmigrations` are now formatted using the ``black`` command if it is "
"present on your ``PATH``."
msgstr ""
"由 :djadmin:`startproject`、:djadmin:`startapp`、:djadmin:"
"`optimizemigration`、:djadmin:`makemigrations` 和 :djadmin:"
"`squashmigrations` 创建的 Python 文件现在如果在您的 ``PATH`` 上存在 "
"``black`` 命令，将会使用它进行格式化。"

msgid ""
"The new :djadmin:`optimizemigration` command allows optimizing operations "
"for a migration."
msgstr "新的 :djadmin:`optimizemigration` 命令允许优化迁移操作。"

msgid ""
"The new :class:`~django.db.migrations.operations.RenameIndex` operation "
"allows renaming indexes defined in the :attr:`Meta.indexes <django.db.models."
"Options.indexes>` or ``index_together`` options."
msgstr ""

msgid ""
"The migrations autodetector now generates :class:`~django.db.migrations."
"operations.RenameIndex` operations instead of ``RemoveIndex`` and "
"``AddIndex``, when renaming indexes defined in the :attr:`Meta.indexes "
"<django.db.models.Options.indexes>`."
msgstr ""
"迁移自动检测器现在在重命名 :attr:`Meta.indexes <django.db.models.Options."
"indexes>` 中定义的索引时，生成 :class:`~django.db.migrations.operations."
"RenameIndex` 操作，而不是 ``RemoveIndex`` 和 ``AddIndex``。"

msgid ""
"The migrations autodetector now generates :class:`~django.db.migrations."
"operations.RenameIndex` operations instead of ``AlterIndexTogether`` and "
"``AddIndex``, when moving indexes defined in the ``Meta.index_together`` to "
"the :attr:`Meta.indexes <django.db.models.Options.indexes>`."
msgstr ""

msgid ""
"The ``order_by`` argument of the :class:`~django.db.models.expressions."
"Window` expression now accepts string references to fields and transforms."
msgstr ""
":class:`~django.db.models.expressions.Window` 表达式的 ``order_by`` 参数现在"
"可以接受对字段和转换的字符串引用。"

msgid ""
"The new :setting:`CONN_HEALTH_CHECKS` setting allows enabling health checks "
"for :ref:`persistent database connections <persistent-database-connections>` "
"in order to reduce the number of failed requests, e.g. after database server "
"restart."
msgstr ""
"新的 :setting:`CONN_HEALTH_CHECKS` 设置允许启用对 :ref:`持久数据库连接 "
"<persistent-database-connections>` 进行健康检查，以减少失败的请求次数，例如在"
"数据库服务器重新启动后。"

msgid ""
":meth:`.QuerySet.bulk_create` now supports updating fields when a row "
"insertion fails uniqueness constraints. This is supported on MariaDB, MySQL, "
"PostgreSQL, and SQLite 3.24+."
msgstr ""
"现在，当插入一行时违反唯一约束时，:meth:`.QuerySet.bulk_create` 支持更新字"
"段。这在 MariaDB、MySQL、PostgreSQL 和 SQLite 3.24+ 上都受支持。"

msgid ""
":meth:`.QuerySet.iterator` now supports prefetching related objects as long "
"as the ``chunk_size`` argument is provided. In older versions, no "
"prefetching was done."
msgstr ""
":meth:`.QuerySet.iterator` 现在支持在提供了 ``chunk_size`` 参数的情况下预取相"
"关对象。在旧版本中，不进行预取。"

msgid ""
":class:`~django.db.models.Q` objects and querysets can now be combined using "
"``^`` as the exclusive or (``XOR``) operator. ``XOR`` is natively supported "
"on MariaDB and MySQL. For databases that do not support ``XOR``, the query "
"will be converted to an equivalent using ``AND``, ``OR``, and ``NOT``."
msgstr ""
":class:`~django.db.models.Q` 对象和查询集现在可以使用 ``^`` 作为异或"
"（``XOR``）运算符进行组合。``XOR`` 在 MariaDB 和 MySQL 上有本地支持。对于不支"
"持 ``XOR`` 的数据库，查询将被转换为使用 ``AND``、``OR`` 和 ``NOT`` 的等效查"
"询。"

msgid ""
"The new :ref:`Field.non_db_attrs <custom-field-non_db_attrs>` attribute "
"allows customizing attributes of fields that don't affect a column "
"definition."
msgstr ""
"新的 :ref:`Field.non_db_attrs <custom-field-non_db_attrs>` 属性允许自定义不影"
"响列定义的字段属性。"

msgid ""
"On PostgreSQL, ``AutoField``, ``BigAutoField``, and ``SmallAutoField`` are "
"now created as identity columns rather than serial columns with sequences."
msgstr ""
"在 PostgreSQL 上，``AutoField``、``BigAutoField`` 和 ``SmallAutoField`` 现在"
"作为标识列（identity columns）创建，而不是带有序列的序列列（serial "
"columns）。"

msgid ""
":meth:`.HttpResponse.set_cookie` now supports :class:`~datetime.timedelta` "
"objects for the ``max_age`` argument."
msgstr ""
":meth:`.HttpResponse.set_cookie` 现在支持 :class:`~datetime.timedelta` 对象作"
"为 ``max_age`` 参数。"

msgid ""
"The new :setting:`SECRET_KEY_FALLBACKS` setting allows providing a list of "
"values for secret key rotation."
msgstr "新的 :setting:`SECRET_KEY_FALLBACKS` 设置允许提供一组值用于密钥轮换。"

msgid ""
"The :setting:`SECURE_PROXY_SSL_HEADER` setting now supports a comma-"
"separated list of protocols in the header value."
msgstr ""
":setting:`SECURE_PROXY_SSL_HEADER` 设置现在支持在头部值中以逗号分隔的协议列"
"表。"

msgid ""
"The :data:`~django.db.models.signals.pre_delete` and :data:`~django.db."
"models.signals.post_delete` signals now dispatch the ``origin`` of the "
"deletion."
msgstr ""
":data:`~django.db.models.signals.pre_delete` 和 :data:`~django.db.models."
"signals.post_delete` 信号现在会分发删除的 ``origin``。"

msgid ""
"The HTML ``<script>`` element ``id`` attribute is no longer required when "
"wrapping the :tfilter:`json_script` template filter."
msgstr ""
"在包装 :tfilter:`json_script` 模板过滤器时，不再需要 HTML ``<script>`` 元素"
"的 ``id`` 属性。"

msgid ""
"The :class:`cached template loader <django.template.loaders.cached.Loader>` "
"is now enabled in development, when :setting:`DEBUG` is ``True``, and :"
"setting:`OPTIONS['loaders'] <TEMPLATES-OPTIONS>` isn't specified. You may "
"specify ``OPTIONS['loaders']`` to override this, if necessary."
msgstr ""
"在开发环境中，当 :setting:`DEBUG` 为 ``True`` 且未指定 :setting:"
"`OPTIONS['loaders'] <TEMPLATES-OPTIONS>` 时，现在会启用 :class:`cached "
"template loader <django.template.loaders.cached.Loader>`。如果需要，您可以指"
"定 ``OPTIONS['loaders']`` 来覆盖这个设置。"

msgid ""
"The :class:`.DiscoverRunner` now supports running tests in parallel on "
"macOS, Windows, and any other systems where the default :mod:"
"`multiprocessing` start method is ``spawn``."
msgstr ""
":class:`.DiscoverRunner` 现在支持在 macOS、Windows 和任何默认 :mod:"
"`multiprocessing` 启动方法为 ``spawn`` 的系统上并行运行测试。"

msgid ""
"A nested atomic block marked as durable in :class:`django.test.TestCase` now "
"raises a ``RuntimeError``, the same as outside of tests."
msgstr ""
":class:`django.test.TestCase` 中标记为持久的嵌套原子块现在会引发 "
"``RuntimeError``，与测试外部相同。"

msgid ""
":meth:`.SimpleTestCase.assertFormError` and :meth:`assertFormsetError() "
"<django.test.SimpleTestCase.assertFormSetError>` now support passing a form/"
"formset object directly."
msgstr ""
":meth:`.SimpleTestCase.assertFormError` 和 :meth:`assertFormsetError() "
"<django.test.SimpleTestCase.assertFormSetError>` 现在支持直接传递表单/表单集"
"对象。"

msgid ""
"The new :attr:`.ResolverMatch.captured_kwargs` attribute stores the captured "
"keyword arguments, as parsed from the URL."
msgstr ""
"新的 :attr:`.ResolverMatch.captured_kwargs` 属性存储了从 URL 解析的捕获的关键"
"字参数。"

msgid ""
"The new :attr:`.ResolverMatch.extra_kwargs` attribute stores the additional "
"keyword arguments passed to the view function."
msgstr ""
"新的 :attr:`.ResolverMatch.extra_kwargs` 属性存储了传递给视图函数的额外关键字"
"参数。"

msgid "``SimpleLazyObject`` now supports addition operations."
msgstr "``SimpleLazyObject`` 现在支持加法操作。"

msgid ":func:`~django.utils.safestring.mark_safe` now preserves lazy objects."
msgstr ":func:`~django.utils.safestring.mark_safe` 现在保留懒惰对象。"

msgid ""
"The new :class:`~django.core.validators.StepValueValidator` checks if a "
"value is an integral multiple of a given step size. This new validator is "
"used for the new ``step_size`` argument added to form fields representing "
"numeric values."
msgstr ""
"新的 :class:`~django.core.validators.StepValueValidator` 用于检查一个值是否是"
"给定步长的整数倍。这个新的验证器用于表示数值的表单字段的新参数 "
"``step_size``。"

msgid "Backwards incompatible changes in 4.1"
msgstr "4.1 版本中的不兼容变更"

msgid ""
"``BaseDatabaseFeatures.has_case_insensitive_like`` is changed from ``True`` "
"to ``False`` to reflect the behavior of most databases."
msgstr ""
"``BaseDatabaseFeatures.has_case_insensitive_like`` 从 ``True`` 改为 "
"``False``，以反映大多数数据库的行为。"

msgid ""
"``DatabaseIntrospection.get_key_columns()`` is removed. Use "
"``DatabaseIntrospection.get_relations()`` instead."
msgstr ""
"``DatabaseIntrospection.get_key_columns()`` 已被移除。请改用 "
"``DatabaseIntrospection.get_relations()``。"

msgid ""
"``DatabaseOperations.ignore_conflicts_suffix_sql()`` method is replaced by "
"``DatabaseOperations.on_conflict_suffix_sql()`` that accepts the ``fields``, "
"``on_conflict``, ``update_fields``, and ``unique_fields`` arguments."
msgstr ""
"``DatabaseOperations.ignore_conflicts_suffix_sql()`` 方法被替换为 "
"``DatabaseOperations.on_conflict_suffix_sql()``，它接受 ``fields``、"
"``on_conflict``、``update_fields`` 和 ``unique_fields`` 参数。"

msgid ""
"The ``ignore_conflicts`` argument of the ``DatabaseOperations."
"insert_statement()`` method is replaced by ``on_conflict`` that accepts "
"``django.db.models.constants.OnConflict``."
msgstr ""
"``DatabaseOperations.insert_statement()`` 方法的 ``ignore_conflicts`` 参数被"
"替换为接受 ``django.db.models.constants.OnConflict`` 的 ``on_conflict`` 参"
"数。"

msgid ""
"``DatabaseOperations._convert_field_to_tz()`` is replaced by "
"``DatabaseOperations._convert_sql_to_tz()`` that accepts the ``sql``, "
"``params``, and ``tzname`` arguments."
msgstr ""
"``DatabaseOperations._convert_field_to_tz()`` 被替换为 ``DatabaseOperations."
"_convert_sql_to_tz()``，它接受 ``sql``、``params`` 和 ``tzname`` 参数。"

msgid ""
"Several date and time methods on ``DatabaseOperations`` now take ``sql`` and "
"``params`` arguments instead of ``field_name`` and return 2-tuple containing "
"some SQL and the parameters to be interpolated into that SQL. The changed "
"methods have these new signatures:"
msgstr ""
"``DatabaseOperations`` 上的多个日期和时间方法现在接受 ``sql`` 和 ``params`` "
"参数，而不再接受 ``field_name``，并返回包含一些 SQL 和要插入该 SQL 的参数的 "
"2 元组。已更改的方法具有以下新签名："

msgid "``DatabaseOperations.date_extract_sql(lookup_type, sql, params)``"
msgstr "``DatabaseOperations.date_extract_sql(lookup_type, sql, params)``"

msgid ""
"``DatabaseOperations.datetime_extract_sql(lookup_type, sql, params, tzname)``"
msgstr ""
"``DatabaseOperations.datetime_extract_sql(lookup_type, sql, params, tzname)``"

msgid "``DatabaseOperations.time_extract_sql(lookup_type, sql, params)``"
msgstr "``DatabaseOperations.time_extract_sql(lookup_type, sql, params)``"

msgid ""
"``DatabaseOperations.date_trunc_sql(lookup_type, sql, params, tzname=None)``"
msgstr ""
"``DatabaseOperations.date_trunc_sql(lookup_type, sql, params, tzname=None)``"

msgid ""
"``DatabaseOperations.datetime_trunc_sql(self, lookup_type, sql, params, "
"tzname)``"
msgstr ""
"``DatabaseOperations.datetime_trunc_sql(self, lookup_type, sql, params, "
"tzname)``"

msgid ""
"``DatabaseOperations.time_trunc_sql(lookup_type, sql, params, tzname=None)``"
msgstr ""
"``DatabaseOperations.time_trunc_sql(lookup_type, sql, params, tzname=None)``"

msgid "``DatabaseOperations.datetime_cast_date_sql(sql, params, tzname)``"
msgstr "``DatabaseOperations.datetime_cast_date_sql(sql, params, tzname)``"

msgid "``DatabaseOperations.datetime_cast_time_sql(sql, params, tzname)``"
msgstr "``DatabaseOperations.datetime_cast_time_sql(sql, params, tzname)``"

msgid "Support for GDAL 2.1 is removed."
msgstr "移除对 GDAL 2.1 的支持。"

msgid "Support for PostGIS 2.4 is removed."
msgstr "移除对 PostGIS 2.4 的支持。"

msgid "Dropped support for PostgreSQL 10"
msgstr "不再支持 PostgreSQL 10 。"

msgid ""
"Upstream support for PostgreSQL 10 ends in November 2022. Django 4.1 "
"supports PostgreSQL 11 and higher."
msgstr ""
"PostgreSQL 10 的上游支持将在 2022 年 11 月结束。 Django 4.1 支持 PostgreSQL "
"11 及更高版本。"

msgid "Dropped support for MariaDB 10.2"
msgstr "不再支持 MariaDB 10.2"

msgid ""
"Upstream support for MariaDB 10.2 ends in May 2022. Django 4.1 supports "
"MariaDB 10.3 and higher."
msgstr ""
"MariaDB 10.2 的上游支持将在 2022 年 5 月结束。 Django 4.1 支持 MariaDB 10.3 "
"及更高版本。"

msgid "Admin changelist searches spanning multi-valued relationships changes"
msgstr "管理后台的变更列表搜索跨多值关系的变更"

msgid ""
"Admin changelist searches using multiple search terms are now applied in a "
"single call to ``filter()``, rather than in sequential ``filter()`` calls."
msgstr ""
"管理员 changelist 使用多个搜索词进行搜索现在在单个调用 ``filter()`` 中应用，"
"而不是在连续的 ``filter()`` 调用中应用。"

msgid ""
"For multi-valued relationships, this means that rows from the related model "
"must match all terms rather than any term. For example, if ``search_fields`` "
"is set to ``['child__name', 'child__age']``, and a user searches for "
"``'Jamal 17'``, parent rows will be returned only if there is a relationship "
"to some 17-year-old child named Jamal, rather than also returning parents "
"who merely have a younger or older child named Jamal in addition to some "
"other 17-year-old."
msgstr ""
"对于多值关系，这意味着来自相关模型的行必须匹配所有词项，而不是任何词项。例"
"如，如果 ``search_fields`` 设置为 ``['child__name', 'child__age']``，用户搜"
"索 ``'Jamal 17'``，那么只有与一些名为 Jamal 的 17 岁孩子存在关系的父母行才会"
"被返回，而不会返回仅仅因为有一个名为 Jamal 的更年轻或更年长的孩子以及其他一"
"些 17 岁孩子的父母。"

msgid ""
"See the :ref:`spanning-multi-valued-relationships` topic for more discussion "
"of this difference. In Django 4.0 and earlier, :meth:`~django.contrib.admin."
"ModelAdmin.get_search_results` followed the second example query, but this "
"undocumented behavior led to queries with excessive joins."
msgstr ""
"有关这种差异的更多讨论，请参阅 :ref:`spanning-multi-valued-relationships` 主"
"题。在 Django 4.0 及更早版本中，:meth:`~django.contrib.admin.ModelAdmin."
"get_search_results` 遵循第二个示例查询，但这种未记录的行为导致了具有过多连接"
"的查询。"

msgid "Reverse foreign key changes for unsaved model instances"
msgstr "未保存的模型实例的反向外键变更"

msgid ""
"In order to unify the behavior with many-to-many relations for unsaved model "
"instances, a reverse foreign key now raises ``ValueError`` when calling :"
"class:`related managers <django.db.models.fields.related.RelatedManager>` "
"for unsaved objects."
msgstr ""
"为了统一与未保存的模型实例的多对多关系的行为，反向外键现在在调用未保存对象"
"的 :class:`related managers <django.db.models.fields.related."
"RelatedManager>` 时会引发 ``ValueError``。"

msgid ""
"Related managers for :class:`~django.db.models.ForeignKey`, :class:`~django."
"db.models.ManyToManyField`, and :class:`~django.contrib.contenttypes.fields."
"GenericRelation` are now cached on the :class:`~django.db.models.Model` "
"instance to which they belong. *This change was reverted in Django 4.1.2.*"
msgstr ""
":class:`~django.db.models.ForeignKey`、:class:`~django.db.models."
"ManyToManyField` 和 :class:`~django.contrib.contenttypes.fields."
"GenericRelation` 的相关管理器现在被缓存在它们所属的 :class:`~django.db."
"models.Model` 实例上。*这个变更在 Django 4.1.2 中被撤销了。*"

msgid ""
":class:`~django.test.runner.DiscoverRunner` now returns a non-zero error "
"code for unexpected successes from tests marked with :py:func:`unittest."
"expectedFailure`."
msgstr ""

msgid ""
":class:`~django.middleware.csrf.CsrfViewMiddleware` no longer masks the CSRF "
"cookie like it does the CSRF token in the DOM."
msgstr ""
":class:`~django.middleware.csrf.CsrfViewMiddleware` 现在不再像在 DOM 中遮蔽 "
"CSRF 令牌一样遮蔽 CSRF cookie。"

msgid ""
":class:`~django.middleware.csrf.CsrfViewMiddleware` now uses ``request."
"META['CSRF_COOKIE']`` for storing the unmasked CSRF secret rather than a "
"masked version. This is an undocumented, private API."
msgstr ""
":class:`~django.middleware.csrf.CsrfViewMiddleware` 现在使用 ``request."
"META['CSRF_COOKIE']`` 来存储未遮蔽的 CSRF 密钥，而不是遮蔽版本。这是一个未记"
"录的、私有的 API。"

msgid ""
"The :attr:`.ModelAdmin.actions` and :attr:`~django.contrib.admin.ModelAdmin."
"inlines` attributes now default to an empty tuple rather than an empty list "
"to discourage unintended mutation."
msgstr ""
":attr:`.ModelAdmin.actions` 和 :attr:`~django.contrib.admin.ModelAdmin."
"inlines` 属性现在默认为空元组，而不是空列表，以防止意外的变更。"

msgid ""
"The ``type=\"text/css\"`` attribute is no longer included in ``<link>`` tags "
"for CSS :doc:`form media </topics/forms/media>`."
msgstr ""
"在 CSS :doc:`表单媒体 </topics/forms/media>` 的 ``<link>`` 标签中不再包含 "
"``type=\"text/css\"`` 属性。"

msgid ""
"``formset:added`` and ``formset:removed`` JavaScript events are now pure "
"JavaScript events and don't depend on jQuery. See :ref:`admin-javascript-"
"inline-form-events` for more details on the change."
msgstr ""
"``formset:added`` 和 ``formset:removed`` JavaScript 事件现在是纯 JavaScript "
"事件，不依赖于 jQuery。有关此更改的更多详细信息，请参阅 :ref:`admin-"
"javascript-inline-form-events`。"

msgid ""
"The ``exc_info`` argument of the undocumented ``django.utils.log."
"log_response()`` function is replaced by ``exception``."
msgstr ""
"未记录的 ``django.utils.log.log_response()`` 函数的 ``exc_info`` 参数已被替换"
"为 ``exception``。"

msgid ""
"The ``size`` argument of the undocumented ``django.views.static."
"was_modified_since()`` function is removed."
msgstr ""
"未记录的 ``django.views.static.was_modified_since()`` 函数的 ``size`` 参数已"
"被移除。"

msgid "The admin log out UI now uses ``POST`` requests."
msgstr "管理员注销界面现在使用 ``POST`` 请求。"

msgid ""
"The undocumented ``InlineAdminFormSet.non_form_errors`` property is replaced "
"by the ``non_form_errors()`` method. This is consistent with ``BaseFormSet``."
msgstr ""
"未记录的 ``InlineAdminFormSet.non_form_errors`` 属性已被替换为 "
"``non_form_errors()`` 方法。这与 ``BaseFormSet`` 保持一致。"

msgid ""
"As per :ref:`above<templates-4.1>`, the cached template loader is now "
"enabled in development. You may specify ``OPTIONS['loaders']`` to override "
"this, if necessary."
msgstr ""
"根据 :ref:`上面 <templates-4.1>`，在开发中现在启用了缓存模板加载器。如果有必"
"要，你可以指定 ``OPTIONS['loaders']`` 来覆盖这个设置。"

msgid ""
"The undocumented ``django.contrib.auth.views.SuccessURLAllowedHostsMixin`` "
"mixin is replaced by ``RedirectURLMixin``."
msgstr ""
"未记录的 ``django.contrib.auth.views.SuccessURLAllowedHostsMixin`` 混合类已被"
"替换为 ``RedirectURLMixin``。"

msgid ""
":class:`~django.db.models.BaseConstraint` subclasses must implement :meth:"
"`~django.db.models.BaseConstraint.validate` method to allow those "
"constraints to be used for validation."
msgstr ""
":class:`~django.db.models.BaseConstraint` 的子类必须实现 :meth:`~django.db."
"models.BaseConstraint.validate` 方法，以允许这些约束用于验证。"

msgid ""
"The undocumented ``URLResolver._is_callback()``, ``URLResolver."
"_callback_strs``, and ``URLPattern.lookup_str()`` are moved to ``django."
"contrib.admindocs.utils``."
msgstr ""
"未记录的 ``URLResolver._is_callback()``、``URLResolver._callback_strs`` 和 "
"``URLPattern.lookup_str()`` 已被移动到 ``django.contrib.admindocs.utils``。"

msgid ""
"The :meth:`.Model.full_clean` method now converts an ``exclude`` value to a "
"``set``. It’s also preferable to pass an ``exclude`` value as a ``set`` to "
"the :meth:`.Model.clean_fields`, :meth:`.Model.full_clean`, :meth:`.Model."
"validate_unique`, and :meth:`.Model.validate_constraints` methods."
msgstr ""
":meth:`.Model.full_clean` 方法现在将 ``exclude`` 值转换为一个 ``set``。最好"
"将 ``exclude`` 值作为一个 ``set`` 传递给 :meth:`.Model.clean_fields`、:meth:"
"`.Model.full_clean`、:meth:`.Model.validate_unique` 和 :meth:`.Model."
"validate_constraints` 方法。"

msgid ""
"The minimum supported version of ``asgiref`` is increased from 3.4.1 to "
"3.5.2."
msgstr "``asgiref`` 的最小支持版本从 3.4.1 提高到 3.5.2。"

msgid ""
"Combined expressions no longer use the error-prone behavior of guessing "
"``output_field`` when argument types match. As a consequence, resolving an "
"``output_field`` for database functions and combined expressions may now "
"crash with mixed types. You will need to explicitly set the ``output_field`` "
"in such cases."
msgstr ""
"组合表达式不再在参数类型匹配时猜测 ``output_field`` 的不稳定行为。因此，解析"
"数据库函数和组合表达式的 ``output_field`` 现在可能会在混合类型的情况下崩溃。"
"在这种情况下，你需要明确设置 ``output_field``。"

msgid ""
"The :djadmin:`makemessages` command no longer changes ``.po`` files when up "
"to date. In older versions, ``POT-Creation-Date`` was always updated."
msgstr ""
":djadmin:`makemessages` 命令在不需要更新时不再更改 ``.po`` 文件。在旧版本中，"
"``POT-Creation-Date`` 总是会被更新。"

msgid "Features deprecated in 4.1"
msgstr "4.1 版本中弃用的功能"

msgid "Log out via GET"
msgstr "通过 GET 方式注销登录"

msgid ""
"Logging out via ``GET`` requests to the :py:class:`built-in logout view "
"<django.contrib.auth.views.LogoutView>` is deprecated. Use ``POST`` requests "
"instead."
msgstr ""
"通过 ``GET`` 请求注销到 :py:class:`内置的注销视图 <django.contrib.auth.views."
"LogoutView>` 已经不推荐使用。请改为使用 ``POST`` 请求。"

msgid ""
"If you want to retain the user experience of an HTML link, you can use a "
"form that is styled to appear as a link:"
msgstr "如果您想保留 HTML 链接的用户体验，可以使用一个被样式化为链接的表单："

msgid ""
"The context for sitemap index templates of a flat list of URLs is "
"deprecated. Custom sitemap index templates should be updated for the "
"adjusted :ref:`context variables <sitemap-index-context-variables>`, "
"expecting a list of objects with ``location`` and optional ``lastmod`` "
"attributes."
msgstr ""
"对于扁平化的 URL 列表的站点地图索引模板的上下文已被弃用。自定义站点地图索引模"
"板应该根据调整后的 :ref:`上下文变量 <sitemap-index-context-variables>` 进行更"
"新，期望一个具有 ``location`` 和可选 ``lastmod`` 属性的对象列表。"

msgid "``CSRF_COOKIE_MASKED`` transitional setting is deprecated."
msgstr "``CSRF_COOKIE_MASKED`` 过渡设置已移除。"

msgid ""
"The ``name`` argument of :func:`django.utils.functional.cached_property` is "
"deprecated as it's unnecessary as of Python 3.6."
msgstr ""
"在 Python 3.6 及更高版本中，:func:`django.utils.functional.cached_property` "
"的 ``name`` 参数已被弃用，因为它不再必要。"

msgid ""
"The ``opclasses`` argument of ``django.contrib.postgres.constraints."
"ExclusionConstraint`` is deprecated in favor of using :class:`OpClass() "
"<django.contrib.postgres.indexes.OpClass>` in :attr:`.ExclusionConstraint."
"expressions`. To use it, you need to add ``'django.contrib.postgres'`` in "
"your :setting:`INSTALLED_APPS`."
msgstr ""
"``django.contrib.postgres.constraints.ExclusionConstraint`` 的 ``opclasses`` "
"参数已被弃用，而应使用 :attr:`.ExclusionConstraint.expressions` 中的 :class:"
"`OpClass() <django.contrib.postgres.indexes.OpClass>`。要使用它，你需要在 :"
"setting:`INSTALLED_APPS` 中添加 ``'django.contrib.postgres'``。"

msgid ""
"After making this change, :djadmin:`makemigrations` will generate a new "
"migration with two operations: ``RemoveConstraint`` and ``AddConstraint``. "
"Since this change has no effect on the database schema, the :class:`~django."
"db.migrations.operations.SeparateDatabaseAndState` operation can be used to "
"only update the migration state without running any SQL. Move the generated "
"operations into the ``state_operations`` argument of :class:`~django.db."
"migrations.operations.SeparateDatabaseAndState`. For example::"
msgstr ""
"在进行这些更改后，:djadmin:`makemigrations` 将生成一个新的迁移，其中包含两个"
"操作：``RemoveConstraint`` 和 ``AddConstraint``。由于这些更改不影响数据库架"
"构，可以使用 :class:`~django.db.migrations.operations."
"SeparateDatabaseAndState` 操作来仅更新迁移状态而不运行任何 SQL。将生成的操作"
"移动到 :class:`~django.db.migrations.operations.SeparateDatabaseAndState` 的 "
"``state_operations`` 参数中。例如："

msgid ""
"The undocumented ability to pass ``errors=None`` to :meth:`.SimpleTestCase."
"assertFormError` and :meth:`assertFormsetError() <django.test.SimpleTestCase."
"assertFormSetError>` is deprecated. Use ``errors=[]`` instead."
msgstr ""
"未记录的能够将 ``errors=None`` 传递给 :meth:`.SimpleTestCase."
"assertFormError` 和 :meth:`assertFormsetError() <django.test.SimpleTestCase."
"assertFormSetError>` 已被弃用。请改用 ``errors=[]``。"

msgid ""
"``django.contrib.sessions.serializers.PickleSerializer`` is deprecated due "
"to the risk of remote code execution."
msgstr ""
"由于存在远程代码执行的风险，``django.contrib.sessions.serializers."
"PickleSerializer`` 已被弃用。"

msgid ""
"The usage of ``QuerySet.iterator()`` on a queryset that prefetches related "
"objects without providing the ``chunk_size`` argument is deprecated. In "
"older versions, no prefetching was done. Providing a value for "
"``chunk_size`` signifies that the additional query per chunk needed to "
"prefetch is desired."
msgstr ""
"在没有提供 ``chunk_size`` 参数的情况下，对预取相关对象的查询集使用 "
"``QuerySet.iterator()`` 的用法已被弃用。在旧版本中，不会进行预取。提供 "
"``chunk_size`` 的值表示希望每个块所需的预取额外查询。"

msgid ""
"Passing unsaved model instances to related filters is deprecated. In Django "
"5.0, the exception will be raised."
msgstr ""
"将未保存的模型实例传递给相关的过滤器已被弃用。在 Django 5.0 中，将引发异常。"

msgid ""
"``created=True`` is added to the signature of :meth:`.RemoteUserBackend."
"configure_user`. Support  for ``RemoteUserBackend`` subclasses that do not "
"accept this argument is deprecated."
msgstr ""
":meth:`.RemoteUserBackend.configure_user` 的签名中添加了 ``created=True``。不"
"接受此参数的 ``RemoteUserBackend`` 子类的支持已被弃用。"

msgid ""
"The ``django.utils.timezone.utc`` alias to :attr:`datetime.timezone.utc` is "
"deprecated. Use :attr:`datetime.timezone.utc` directly."
msgstr ""
"别名 ``django.utils.timezone.utc`` 到 :attr:`datetime.timezone.utc` 的使用已"
"经被弃用。请直接使用 :attr:`datetime.timezone.utc`。"

msgid ""
"Passing a response object and a form/formset name to ``SimpleTestCase."
"assertFormError()`` and ``assertFormsetError()`` is deprecated. Use::"
msgstr ""
"在 ``SimpleTestCase.assertFormError()`` 和 ``assertFormsetError()`` 中传递响"
"应对象和表单/表单集名称已被弃用。请使用以下方式："

msgid "or pass the form/formset object directly instead."
msgstr "或者直接传递表单/表单集对象。"

msgid ""
"The undocumented ``django.contrib.gis.admin.OpenLayersWidget`` is deprecated."
msgstr "未记录的 ``django.contrib.gis.admin.OpenLayersWidget`` 模块已被弃用。"

msgid "``django.contrib.auth.hashers.CryptPasswordHasher`` is deprecated."
msgstr "``django.contrib.auth.hashers.CryptPasswordHasher`` 已废弃。"

msgid ""
"The ability to pass ``nulls_first=False`` or ``nulls_last=False`` to "
"``Expression.asc()`` and ``Expression.desc()`` methods, and the ``OrderBy`` "
"expression is deprecated. Use ``None`` instead."
msgstr ""
"在 ``Expression.asc()`` 和 ``Expression.desc()`` 方法以及 ``OrderBy`` 表达式"
"中传递 ``nulls_first=False`` 或 ``nulls_last=False`` 的能力已被弃用。请改用 "
"``None``。"

msgid ""
"The ``\"django/forms/default.html\"`` and ``\"django/forms/formsets/default."
"html\"`` templates which are a proxy to the table-based templates are "
"deprecated. Use the specific template instead."
msgstr ""
"``\"django/forms/default.html\"`` 和 ``\"django/forms/formsets/default."
"html\"`` 模板，它们是表格模板的代理，已被弃用。请使用具体的模板。"

msgid ""
"The undocumented ``LogoutView.get_next_page()`` method is renamed to "
"``get_success_url()``."
msgstr ""
"未记录的 ``LogoutView.get_next_page()`` 方法已被重命名为 "
"``get_success_url()``。"

msgid "Features removed in 4.1"
msgstr "在 4.1 版本中移除的功能"

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 4.1."
msgstr "这些功能已经结束了其弃用周期，并在 Django 4.1 中被移除。"

msgid ""
"See :ref:`deprecated-features-3.2` for details on these changes, including "
"how to remove usage of these features."
msgstr ""
"有关这些更改的详细信息，包括如何删除对这些功能的使用，请参阅 :ref:"
"`deprecated-features-3.2`。"

msgid ""
"Support for assigning objects which don't support creating deep copies with "
"``copy.deepcopy()`` to class attributes in ``TestCase.setUpTestData()`` is "
"removed."
msgstr ""
"不再支持将不支持使用 ``copy.deepcopy()`` 创建深层副本的对象分配给 ``TestCase."
"setUpTestData()`` 中的类属性。"

msgid ""
"Support for using a boolean value in :attr:`.BaseCommand."
"requires_system_checks` is removed."
msgstr "不再支持在 :attr:`.BaseCommand.requires_system_checks` 中使用布尔值。"

msgid ""
"The ``whitelist`` argument and ``domain_whitelist`` attribute of ``django."
"core.validators.EmailValidator`` are removed."
msgstr ""
"``django.core.validators.EmailValidator`` 的 ``whitelist`` 参数和 "
"``domain_whitelist`` 属性已被移除。"

msgid ""
"The ``default_app_config`` application configuration variable is removed."
msgstr "``default_app_config`` 应用程序配置变量已被移除。"

msgid ""
"``TransactionTestCase.assertQuerysetEqual()`` no longer calls ``repr()`` on "
"a queryset when compared to string values."
msgstr ""
"``TransactionTestCase.assertQuerysetEqual()`` 在与字符串值进行比较时不再调用 "
"``repr()`` 方法来处理查询集。"

msgid ""
"The ``django.core.cache.backends.memcached.MemcachedCache`` backend is "
"removed."
msgstr "``django.core.cache.backends.memcached.MemcachedCache`` 已被移除。"

msgid ""
"Support for the pre-Django 3.2 format of messages used by ``django.contrib."
"messages.storage.cookie.CookieStorage`` is removed."
msgstr ""
"对 ``django.contrib.messages.storage.cookie.CookieStorage`` 使用的 Django "
"3.2 之前的消息格式的支持已被移除。"

msgid "Django 4.1.1 release notes"
msgstr "Django 4.1.1 版本发行说明"

msgid "*September 5, 2022*"
msgstr "*2022 年 9 月 5 日*"

msgid "Django 4.1.1 fixes several bugs in 4.1."
msgstr "Django 4.1.1 修复了 4.1 版本中的一些错误。"

msgid ""
"Reallowed, following a regression in Django 4.1, using ``GeoIP2()`` when "
"GEOS is not installed (:ticket:`33886`)."
msgstr ""
"在 Django 4.1 中，已经重新允许在未安装 GEOS 的情况下使用 ``GeoIP2()`` （:"
"ticket:`33886`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused a crash of admin's autocomplete "
"widgets when translations are deactivated (:ticket:`33888`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，当禁用翻译时，导致管理员自动完成小部件崩溃的"
"回归问题（:ticket:`33888`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused a crash of the ``test`` "
"management command when running in parallel and ``multiprocessing`` start "
"method is ``spawn`` (:ticket:`33891`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在并行运行并且 ``multiprocessing`` 启动方"
"法为 ``spawn`` 时，``test`` 管理命令崩溃的回归问题（:ticket:`33891`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused an incorrect redirection to the "
"admin changelist view when using *\"Save and continue editing\"* and *\"Save "
"and add another\"* options (:ticket:`33893`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，当使用 *\"保存并继续编辑\"* 和 *\"保存并添加"
"另一个\"* 选项时，导致错误重定向到管理员 changelist 视图的回归问题（:ticket:"
"`33893`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused a crash of :class:`~django.db."
"models.expressions.Window` expressions with :class:`~django.contrib.postgres."
"aggregates.ArrayAgg` (:ticket:`33898`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致使用 :class:`~django.contrib.postgres."
"aggregates.ArrayAgg` 的 :class:`~django.db.models.expressions.Window` 表达式"
"崩溃的回归问题（:ticket:`33898`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused a migration crash on SQLite "
"3.35.5+ when removing an indexed field (:ticket:`33899`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在 SQLite 3.35.5+ 上移除索引字段时发生迁"
"移崩溃的回归问题（:ticket:`33899`）。"

msgid ""
"Fixed a bug in Django 4.1 that caused a crash of model validation on "
"``UniqueConstraint()`` with field names in ``expressions`` (:ticket:`33902`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在 ``UniqueConstraint()`` 中使用字段名称"
"的表达式时，模型验证崩溃的错误（:ticket:`33902`）。"

msgid ""
"Fixed a bug in Django 4.1 that caused an incorrect validation of "
"``CheckConstraint()`` with range fields on PostgreSQL (:ticket:`33905`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在 PostgreSQL 上使用范围字段的 "
"``CheckConstraint()`` 验证不正确的错误（:ticket:`33905`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused an incorrect migration when "
"adding ``AutoField``, ``BigAutoField``, or ``SmallAutoField`` on PostgreSQL "
"(:ticket:`33919`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，当在 PostgreSQL 上添加 ``AutoField``、"
"``BigAutoField`` 或 ``SmallAutoField`` 时，导致迁移不正确的回归问题（:ticket:"
"`33919`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused a migration crash on PostgreSQL "
"when altering ``AutoField``, ``BigAutoField``, or ``SmallAutoField`` to "
"``OneToOneField`` (:ticket:`33932`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在 PostgreSQL 上将 ``AutoField``、"
"``BigAutoField`` 或 ``SmallAutoField`` 更改为 ``OneToOneField`` 时，迁移崩溃"
"的回归问题（:ticket:`33932`）。"

msgid ""
"Fixed a migration crash on ``ManyToManyField`` fields with ``through`` "
"referencing models in different apps (:ticket:`33938`)."
msgstr ""
"修复了 ``ManyToManyField`` 字段与引用不同应用程序中的模型的 ``through`` 的迁"
"移崩溃问题（:ticket:`33938`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused an incorrect migration when "
"renaming a model with ``ManyToManyField`` and ``db_table`` (:ticket:`33953`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在重命名带有 ``ManyToManyField`` 和 "
"``db_table`` 的模型时，迁移不正确的回归问题（:ticket:`33953`）。"

msgid ""
"Reallowed, following a regression in Django 4.1, creating reverse foreign "
"key managers on unsaved instances (:ticket:`33952`)."
msgstr ""
"在 Django 4.1 中，已经重新允许在未保存的实例上创建反向外键管理器，这是由于回"
"归问题（:ticket:`33952`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused a migration crash on SQLite < "
"3.20 (:ticket:`33960`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在 SQLite < 3.20 上迁移崩溃的回归问题（:"
"ticket:`33960`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused an admin crash when the :mod:"
"`~django.contrib.admindocs` app was used (:ticket:`33955`, :ticket:`33971`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，当使用 :mod:`~django.contrib.admindocs` 应用"
"程序时，导致管理员崩溃的回归问题（:ticket:`33955`, :ticket:`33971`）。"

msgid "Django 4.1.10 release notes"
msgstr "Django 4.1.10 版本发行说明"

msgid ""
"Django 4.1.10 fixes a security issue with severity \"moderate\" in 4.1.9."
msgstr "Django 4.1.10 修复了 4.1.9 版本中一些\"中等\"严重性的安全问题。"

msgid "Django 4.1.11 release notes"
msgstr "Django 4.1.11 版本发行说明"

msgid ""
"Django 4.1.11 fixes a security issue with severity \"moderate\" in 4.1.10."
msgstr "Django 4.1.11 修复了 4.1.10 版本中一些\"中等\"严重性的安全问题。"

msgid "Django 4.1.12 release notes"
msgstr "Django 4.1.12 版本发行说明"

msgid ""
"Django 4.1.12 fixes a security issue with severity \"moderate\" in 4.1.11."
msgstr "Django 4.1.12 修复了 4.1.11 版本中一些\"中等\"严重性的安全问题。"

msgid "Django 4.1.13 release notes"
msgstr "Django 4.1.13 版本发行说明"

msgid ""
"Django 4.1.13 fixes a security issue with severity \"moderate\" in 4.1.12."
msgstr "Django 4.1.13 修复了 4.1.12 版本中一些\"中等\"严重性的安全问题。"

msgid "Django 4.1.2 release notes"
msgstr "Django 4.1.2 版本发行说明"

msgid ""
"Django 4.1.2 fixes a security issue with severity \"medium\" and several "
"bugs in 4.1.1."
msgstr ""
"Django 4.1.2 修复了一个\"中等\"严重性的安全问题，以及 4.1.1 版本中的几个错"
"误。"

msgid ""
"Fixed a regression in Django 4.1 that caused a migration crash on PostgreSQL "
"when adding a model with ``ExclusionConstraint`` (:ticket:`33982`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在 PostgreSQL 上添加带有 "
"``ExclusionConstraint`` 的模型时迁移崩溃的回归问题（:ticket:`33982`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused aggregation over a queryset "
"that contained an ``Exists`` annotation to crash due to too many selected "
"columns (:ticket:`33992`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致对包含 ``Exists`` 注释的查询集进行聚合"
"时，由于选择的列过多而崩溃的回归问题（:ticket:`33992`）。"

msgid ""
"Fixed a bug in Django 4.1 that caused an incorrect validation of "
"``CheckConstraint`` on ``NULL`` values (:ticket:`33996`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致对 ``NULL`` 值的 ``CheckConstraint`` 验证"
"不正确的错误（:ticket:`33996`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused a ``QuerySet.values()/"
"values_list()`` crash on ``ArrayAgg()`` and ``JSONBAgg()`` (:ticket:`34016`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在 ``ArrayAgg()`` 和 ``JSONBAgg()`` 上使"
"用 ``QuerySet.values()/values_list()`` 时崩溃的回归问题（:ticket:`34016`）。"

msgid ""
"Fixed a bug in Django 4.1 that caused :attr:`.ModelAdmin."
"autocomplete_fields` to be incorrectly selected after adding/changing "
"related instances via popups (:ticket:`34025`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在通过弹出窗口添加/更改相关实例后，:attr:"
"`.ModelAdmin.autocomplete_fields` 被不正确选择的错误（:ticket:`34025`）。"

msgid ""
"Fixed a regression in Django 4.1 where the app registry was not populated "
"when running parallel tests with the ``multiprocessing`` start method "
"``spawn`` (:ticket:`34010`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，在使用 ``multiprocessing`` 启动方法 "
"``spawn`` 运行并行测试时，应用程序注册表未填充的回归问题（:ticket:`34010`）。"

msgid ""
"Fixed a regression in Django 4.1 where the ``--debug-mode`` argument to "
"``test`` did not work when running parallel tests with the "
"``multiprocessing`` start method ``spawn`` (:ticket:`34010`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，在使用 ``multiprocessing`` 启动方法 "
"``spawn`` 运行并行测试时，``test`` 命令的 ``--debug-mode`` 参数无法工作的回归"
"问题（:ticket:`34010`）。"

msgid ""
"Fixed a regression in Django 4.1 that didn't alter a sequence type when "
"altering type of pre-Django 4.1 serial columns on PostgreSQL (:ticket:"
"`34058`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，当在 PostgreSQL 上更改预先在 Django 4.1 之前"
"创建的序列列的类型时，未更改序列类型的回归问题（:ticket:`34058`）。"

msgid ""
"Fixed a regression in Django 4.1 that caused a crash for :class:`View` "
"subclasses with asynchronous handlers when handling non-allowed HTTP methods "
"(:ticket:`34062`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，当处理不允许的 HTTP 方法时，使用异步处理程序"
"的 :class:`View` 子类崩溃的回归问题（:ticket:`34062`）。"

msgid ""
"Reverted caching related managers for ``ForeignKey``, ``ManyToManyField``, "
"and ``GenericRelation`` that caused the incorrect refreshing of related "
"objects (:ticket:`33984`)."
msgstr ""
"已回退了与 ``ForeignKey``、``ManyToManyField`` 和 ``GenericRelation`` 相关的"
"缓存管理器，这导致相关对象的不正确刷新（:ticket:`33984`）。"

msgid ""
"Relaxed the system check added in Django 4.1 for the same name used for "
"multiple template tag modules to a warning (:ticket:`32987`)."
msgstr ""
"对 Django 4.1 中添加的系统检查进行了放宽，用于同一名称用于多个模板标签模块的"
"情况，现在是一个警告（:ticket:`32987`）。"

msgid "Django 4.1.3 release notes"
msgstr "Django 4.1.3 版本发行说明"

msgid "*November 1, 2022*"
msgstr "*2022 年 11 月 1 日*"

msgid ""
"Django 4.1.3 fixes a bug in 4.1.2 and adds compatibility with Python 3.11."
msgstr ""
"Django 4.1.3 修复了 4.1.2 版本中的一个错误，并增加了与 Python 3.11 的兼容性。"

msgid ""
"Fixed a bug in Django 4.1 that caused non-Python files created by "
"``startproject`` and ``startapp`` management commands from custom templates "
"to be incorrectly formatted using the ``black`` command (:ticket:`34085`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，该问题导致使用自定义模板从 ``startproject`` "
"和 ``startapp`` 管理命令创建的非 Python 文件在使用 ``black`` 命令时格式化不正"
"确（:ticket:`34085`）。"

msgid "Django 4.1.4 release notes"
msgstr "Django 4.1.4 版本发行说明"

msgid "*December 6, 2022*"
msgstr "*2022 年 12 月 6 日*"

msgid "Django 4.1.4 fixes several bugs in 4.1.3."
msgstr "Django 4.1.4 修复了 4.1.3 版本中的一些错误。"

msgid ""
"Fixed a regression in Django 4.1 that caused an unnecessary table rebuild "
"when adding a ``ManyToManyField`` on SQLite (:ticket:`34138`)."
msgstr ""
"在 Django 4.1 中修复了一个回归问题，当在 SQLite 上添加一个 "
"``ManyToManyField`` 时，导致不必要的表重建（:ticket:`34138`）。"

msgid ""
"Fixed a bug in Django 4.1 that caused a crash of the sitemap index view with "
"an empty :meth:`Sitemap.items() <django.contrib.sitemaps.Sitemap.items>` and "
"a callable :attr:`~django.contrib.sitemaps.Sitemap.lastmod` (:ticket:"
"`34088`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，当使用空的 :meth:`Sitemap.items() <django."
"contrib.sitemaps.Sitemap.items>` 和可调用的 :attr:`~django.contrib.sitemaps."
"Sitemap.lastmod` 时，导致站点地图索引视图崩溃的错误（:ticket:`34088`）。"

msgid ""
"Fixed a bug in Django 4.1 that caused a crash using ``acreate()``, "
"``aget_or_create()``, and ``aupdate_or_create()`` asynchronous methods of "
"related managers (:ticket:`34139`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，使用相关管理器的 ``acreate()``, "
"``aget_or_create()``, 和 ``aupdate_or_create()`` 异步方法时导致崩溃的错误（:"
"ticket:`34139`）。"

msgid ""
"Fixed a bug in Django 4.1 that caused a crash of ``QuerySet.bulk_create()`` "
"with ``\"pk\"`` in ``unique_fields`` (:ticket:`34177`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在使用 ``unique_fields`` 中包含 "
"``\"pk\"`` 时，``QuerySet.bulk_create()`` 崩溃的错误（:ticket:`34177`）。"

msgid ""
"Fixed a bug in Django 4.1 that caused a crash of ``QuerySet.bulk_create()`` "
"on fields with ``db_column`` (:ticket:`34171`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在具有 ``db_column`` 的字段上使用 "
"``QuerySet.bulk_create()`` 时崩溃的错误（:ticket:`34171`）。"

msgid "Django 4.1.5 release notes"
msgstr "Django 4.1.5 版本发行说明"

msgid "*January 2, 2023*"
msgstr "*2023 年 1 月 2 日*"

msgid ""
"Django 4.1.5 fixes a bug in 4.1.4. Also, the latest string translations from "
"Transifex are incorporated."
msgstr ""
"Django 4.1.5 修复了 4.1.4 版本中的一个错误。此外，还将来自 Transifex 的最新字"
"符串翻译进行了整合。"

msgid ""
"Fixed a long standing bug in the ``__len`` lookup for ``ArrayField`` that "
"caused a crash of model validation on :attr:`Meta.constraints <django.db."
"models.Options.constraints>` (:ticket:`34205`)."
msgstr ""
"在 ``ArrayField`` 的 ``__len`` 查找中修复了一个长期存在的 bug，该 bug 导致"
"在 :attr:`Meta.constraints <django.db.models.Options.constraints>` 上进行模型"
"验证时崩溃的问题（:ticket:`34205`）。"

msgid "Django 4.1.6 release notes"
msgstr "Django 4.1.6 版本发行说明"

msgid ""
"Django 4.1.6 fixes a security issue with severity \"moderate\" and a bug in "
"4.1.5."
msgstr ""
"Django 4.1.6 修复了一个安全问题，严重程度为\"中等\"，以及 4.1.5 版本中的一个"
"错误。"

msgid ""
"Fixed a bug in Django 4.1 that caused a crash of model validation on "
"``UniqueConstraint`` with ordered expressions (:ticket:`34291`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在带有有序表达式的 ``UniqueConstraint`` "
"上进行模型验证时崩溃的错误（:ticket:`34291`）。"

msgid "Django 4.1.7 release notes"
msgstr "Django 4.1.7 版本发行说明"

msgid ""
"Django 4.1.7 fixes a security issue with severity \"moderate\" and a bug in "
"4.1.6."
msgstr ""
"Django 4.1.7 修复了一个安全问题，严重程度为\"中等\"，以及 4.1.6 版本中的一个"
"错误。"

msgid ""
"Fixed a bug in Django 4.1 that caused a crash of model validation on "
"``ValidationError`` with no ``code`` (:ticket:`34319`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，导致在没有 ``code`` 的情况下对 "
"``ValidationError`` 进行模型验证时崩溃的错误（:ticket:`34319`）。"

msgid "Django 4.1.8 release notes"
msgstr "Django 4.1.8 版本发行说明"

msgid "*April 5, 2023*"
msgstr "*2023 年 4 月 5 日*"

msgid "Django 4.1.8 fixes a bug in 4.1.7."
msgstr "Django 4.1.8 修复了 4.1.7 版本中的一个错误。"

msgid ""
"Fixed a bug in Django 4.1 that caused invalidation of sessions when rotating "
"secret keys with ``SECRET_KEY_FALLBACKS`` (:ticket:`34384`)."
msgstr ""
"在 Django 4.1 中修复了一个问题，当使用 ``SECRET_KEY_FALLBACKS`` 旋转密钥时导"
"致会话无效的错误（:ticket:`34384`）。"

msgid "Django 4.1.9 release notes"
msgstr "Django 4.1.9 版本发行说明"

msgid "Django 4.1.9 fixes a security issue with severity \"low\" in 4.1.8."
msgstr "Django 4.1.9 修复了 4.1.8 版本中一个严重程度为\"低\"的安全问题。"

msgid "Django 4.2 release notes"
msgstr "Django 4.2 版本发行说明"

msgid "*April 3, 2023*"
msgstr "*2023 年 4 月 3 日*"

msgid "Welcome to Django 4.2!"
msgstr "欢迎使用 Django 4.2 ！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-4.2>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-4.2>` "
"you'll want to be aware of when upgrading from Django 4.1 or earlier. We've :"
"ref:`begun the deprecation process for some features <deprecated-"
"features-4.2>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-4.2>`，以及一些 :ref:`不向后兼容的"
"更改 <backwards-incompatible-4.2>`，在从 Django 4.1 或更早版本升级时需要注"
"意。我们已经 :ref:`开始了一些功能的弃用过程 <deprecated-features-4.2>`。"

msgid ""
"Django 4.2 is designated as a :term:`long-term support release <Long-term "
"support release>`. It will receive security updates for at least three years "
"after its release. Support for the previous LTS, Django 3.2, will end in "
"April 2024."
msgstr ""
"Django 4.2 被指定为 :term:`长期支持版本 <Long-term support release>`。它将在"
"发布后至少三年内接收安全更新。对于之前的 LTS 版本 Django 3.2，支持将在 2024 "
"年 4 月结束。"

msgid ""
"Django 4.2 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12 (as of 4.2.8). We "
"**highly recommend** and only officially support the latest release of each "
"series."
msgstr ""
"Django 4.2 支持 Python 3.8、3.9、3.10、3.11 和 3.12（截止到 4.2.8 版本）。我"
"们 **强烈推荐** 并且只官方支持每个系列的最新版本。"

msgid "What's new in Django 4.2"
msgstr "Django 4.2 新特性"

msgid "Psycopg 3 support"
msgstr "Psycopg 3 支持"

msgid ""
"Django now supports `psycopg`_ version 3.1.8 or higher. To update your code, "
"install the :pypi:`psycopg library <psycopg>`, you don't need to change the :"
"setting:`ENGINE <DATABASE-ENGINE>` as ``django.db.backends.postgresql`` "
"supports both libraries."
msgstr ""
"Django 现在支持 `psycopg`_ 版本 3.1.8 或更高版本。要更新您的代码，请安装 :"
"pypi:`psycopg library <psycopg>`，您不需要更改 :setting:`ENGINE <DATABASE-"
"ENGINE>`，因为 ``django.db.backends.postgresql`` 支持这两个库。"

msgid ""
"Support for ``psycopg2`` is likely to be deprecated and removed at some "
"point in the future."
msgstr "对 ``psycopg2`` 的支持可能会在将来的某个时候被弃用并移除。"

msgid ""
"Be aware that ``psycopg`` 3 introduces some breaking changes over "
"``psycopg2``. As a consequence, you may need to make some changes to account "
"for `differences from psycopg2`_."
msgstr ""
"请注意，``psycopg`` 3 对 ``psycopg2`` 进行了一些不兼容的更改。因此，您可能需"
"要进行一些更改以适应与 `psycopg2 的不同之处`_。"

msgid "Comments on columns and tables"
msgstr "对列和表的注释"

msgid ""
"The new :attr:`Field.db_comment <django.db.models.Field.db_comment>` and :"
"attr:`Meta.db_table_comment <django.db.models.Options.db_table_comment>` "
"options allow creating comments on columns and tables, respectively. For "
"example::"
msgstr ""
"新的 :attr:`Field.db_comment <django.db.models.Field.db_comment>` 和 :attr:"
"`Meta.db_table_comment <django.db.models.Options.db_table_comment>` 选项允许"
"分别在列和表上创建注释。例如："

msgid ""
"Also, the new :class:`~django.db.migrations.operations."
"AlterModelTableComment` operation allows changing table comments defined in "
"the :attr:`Meta.db_table_comment <django.db.models.Options."
"db_table_comment>`."
msgstr ""
"此外，新的 :class:`~django.db.migrations.operations.AlterModelTableComment` "
"操作允许更改在 :attr:`Meta.db_table_comment <django.db.models.Options."
"db_table_comment>` 中定义的表注释。"

msgid "Mitigation for the BREACH attack"
msgstr "对 BREACH 攻击的缓解措施"

msgid ""
":class:`~django.middleware.gzip.GZipMiddleware` now includes a mitigation "
"for the BREACH attack. It will add up to 100 random bytes to gzip responses "
"to make BREACH attacks harder. Read more about the mitigation technique in "
"the `Heal The Breach (HTB) paper`_."
msgstr ""
":class:`~django.middleware.gzip.GZipMiddleware` 现在包括对 BREACH 攻击的缓解"
"措施。它将在 gzip 响应中添加最多 100 个随机字节，以增加 BREACH 攻击的难度。"
"在 `Heal The Breach (HTB) paper`_ 中详细了解有关缓解技术。"

msgid "In-memory file storage"
msgstr "内存中的文件存储"

msgid ""
"The new :class:`django.core.files.storage.InMemoryStorage` class provides a "
"non-persistent storage useful for speeding up tests by avoiding disk access."
msgstr ""
"新的 :class:`django.core.files.storage.InMemoryStorage` 类提供了非持久性存"
"储，对于加速测试并避免磁盘访问非常有用。"

msgid "Custom file storages"
msgstr "自定义文件存储"

msgid ""
"The new :setting:`STORAGES` setting allows configuring multiple custom file "
"storage backends. It also controls storage engines for managing :doc:`files "
"</topics/files>` (the ``\"default\"`` key) and :doc:`static files </ref/"
"contrib/staticfiles>` (the ``\"staticfiles\"`` key)."
msgstr ""
"新的 :setting:`STORAGES` 设置允许配置多个自定义文件存储后端。它还控制了管理 :"
"doc:`文件 </topics/files>` （``\"default\"`` 键）和 :doc:`静态文件 </ref/"
"contrib/staticfiles>` （``\"staticfiles\"`` 键）的存储引擎。"

msgid ""
"The old ``DEFAULT_FILE_STORAGE`` and ``STATICFILES_STORAGE`` settings are "
"deprecated as of this release."
msgstr ""
"在此版本中，旧的 ``DEFAULT_FILE_STORAGE`` 和 ``STATICFILES_STORAGE`` 设置已被"
"弃用。"

msgid ""
"The light or dark color theme of the admin can now be toggled in the UI, as "
"well as being set to follow the system setting."
msgstr ""
"现在可以在用户界面中切换管理界面的明亮或暗色主题，并且还可以设置为跟随系统设"
"置。"

msgid ""
"The admin's font stack now prefers system UI fonts and no longer requires "
"downloading fonts. Additionally, CSS variables are available to more easily "
"override the default font families."
msgstr ""
"管理界面现在更倾向于使用系统 UI 字体，不再需要下载字体。此外，提供了 CSS 变"
"量，以便更轻松地覆盖默认字体系列。"

msgid ""
"The :source:`admin/delete_confirmation.html <django/contrib/admin/templates/"
"admin/delete_confirmation.html>` template now has some additional blocks and "
"scripting hooks to ease customization."
msgstr ""
":source:`admin/delete_confirmation.html <django/contrib/admin/templates/"
"admin/delete_confirmation.html>` 模板现在具有一些额外的块和脚本钩子，以便于定"
"制。"

msgid ""
"The chosen options of :attr:`~django.contrib.admin.ModelAdmin."
"filter_horizontal` and :attr:`~django.contrib.admin.ModelAdmin."
"filter_vertical` widgets are now filterable."
msgstr ""
":attr:`~django.contrib.admin.ModelAdmin.filter_horizontal` 和 :attr:`~django."
"contrib.admin.ModelAdmin.filter_vertical` 组件的选择选项现在是可过滤的。"

msgid ""
"The ``admin/base.html`` template now has a new block ``nav-breadcrumbs`` "
"which contains the navigation landmark and the ``breadcrumbs`` block."
msgstr ""
"模板 ``admin/base.html`` 现在具有一个新的块 ``nav-breadcrumbs``，其中包含导航"
"标志和 ``breadcrumbs`` 块。"

msgid ""
":attr:`.ModelAdmin.list_editable` now uses atomic transactions when making "
"edits."
msgstr ":attr:`.ModelAdmin.list_editable` 现在在进行编辑时使用原子事务。"

msgid "jQuery is upgraded from version 3.6.0 to 3.6.4."
msgstr "jQuery 的版本已从 3.6.0 升级到 3.6.4 。"

msgid ""
"The default iteration count for the PBKDF2 password hasher is increased from "
"390,000 to 600,000."
msgstr "PBKDF2 密码哈希器的默认迭代次数从 390 , 000 增加到 600 , 000 。"

msgid ""
":class:`~django.contrib.auth.forms.UserCreationForm` now saves many-to-many "
"form fields for a custom user model."
msgstr ""
":class:`~django.contrib.auth.forms.UserCreationForm` 现在保存了自定义用户模型"
"的多对多表单字段。"

msgid ""
"The new :class:`~django.contrib.auth.forms.BaseUserCreationForm` is now the "
"recommended base class for customizing the user creation form."
msgstr ""
"新的 :class:`~django.contrib.auth.forms.BaseUserCreationForm` 现在是自定义用"
"户创建表单的推荐基类。"

msgid ""
"The :doc:`GeoJSON serializer </ref/contrib/gis/serializers>` now outputs the "
"``id`` key for serialized features, which defaults to the primary key of "
"objects."
msgstr ""
":doc:`GeoJSON 序列化程序 </ref/contrib/gis/serializers>` 现在输出序列化要素"
"的 ``id`` 键，默认为对象的主键。"

msgid ""
"The :class:`~django.contrib.gis.gdal.GDALRaster` class now supports :class:"
"`pathlib.Path`."
msgstr ""
":class:`~django.contrib.gis.gdal.GDALRaster` 类现在支持 :class:`pathlib."
"Path`。"

msgid ""
"The :class:`~django.contrib.gis.geoip2.GeoIP2` class now supports  ``.mmdb`` "
"files downloaded from DB-IP."
msgstr ""
":class:`~django.contrib.gis.geoip2.GeoIP2` 类现在支持从 DB-IP 下载的 ``."
"mmdb`` 文件。"

msgid ""
"The OpenLayers template widget no longer includes inline CSS (which also "
"removes the former ``map_css`` block) to better comply with a strict Content "
"Security Policy."
msgstr ""
"OpenLayers 模板小部件不再包含内联 CSS（也删除了以前的 ``map_css`` 块），以更"
"好地符合严格的内容安全策略。"

msgid ""
":class:`~django.contrib.gis.forms.widgets.OpenLayersWidget` is now based on "
"OpenLayers 7.2.2 (previously 4.6.5)."
msgstr ""
":class:`~django.contrib.gis.forms.widgets.OpenLayersWidget` 现在基于 "
"OpenLayers 7.2.2（之前是 4.6.5）。"

msgid ""
"The new :lookup:`isempty` lookup and :class:`IsEmpty() <django.contrib.gis."
"db.models.functions.IsEmpty>` expression allow filtering empty geometries on "
"PostGIS."
msgstr ""
"新的 :lookup:`isempty` 查找和 :class:`IsEmpty() <django.contrib.gis.db."
"models.functions.IsEmpty>` 表达式允许在 PostGIS 上筛选空几何图形。"

msgid ""
"The new :class:`FromWKB() <django.contrib.gis.db.models.functions.FromWKB>` "
"and :class:`FromWKT() <django.contrib.gis.db.models.functions.FromWKT>` "
"functions allow creating geometries from Well-known binary (WKB) and Well-"
"known text (WKT) representations."
msgstr ""
"新的 :class:`FromWKB() <django.contrib.gis.db.models.functions.FromWKB>` 和 :"
"class:`FromWKT() <django.contrib.gis.db.models.functions.FromWKT>` 函数允许"
"从 Well-known binary (WKB) 和 Well-known text (WKT) 表示中创建几何图形。"

msgid ""
"The new :lookup:`trigram_strict_word_similar` lookup, and the :class:"
"`TrigramStrictWordSimilarity() <django.contrib.postgres.search."
"TrigramStrictWordSimilarity>` and :class:`TrigramStrictWordDistance() "
"<django.contrib.postgres.search.TrigramStrictWordDistance>` expressions "
"allow using trigram strict word similarity."
msgstr ""
"新的 :lookup:`trigram_strict_word_similar` 查找以及 :class:"
"`TrigramStrictWordSimilarity() <django.contrib.postgres.search."
"TrigramStrictWordSimilarity>` 和 :class:`TrigramStrictWordDistance() <django."
"contrib.postgres.search.TrigramStrictWordDistance>` 表达式允许使用 trigram 严"
"格单词相似性。"

msgid ""
"The :lookup:`arrayfield.overlap` lookup now supports ``QuerySet.values()`` "
"and ``values_list()`` as a right-hand side."
msgstr ""
":lookup:`arrayfield.overlap` 查找现在支持 ``QuerySet.values()`` 和 "
"``values_list()`` 作为右侧。"

msgid ""
"The new :meth:`.Sitemap.get_languages_for_item` method allows customizing "
"the list of languages for which the item is displayed."
msgstr ""
"新的 :meth:`.Sitemap.get_languages_for_item` 方法允许自定义显示项目的语言列"
"表。"

msgid ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` now "
"has experimental support for replacing paths to JavaScript modules in "
"``import`` and ``export`` statements with their hashed counterparts. If you "
"want to try it, subclass ``ManifestStaticFilesStorage`` and set the "
"``support_js_module_import_aggregation`` attribute to ``True``."
msgstr ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` 现在"
"具有实验性支持，在 ``import`` 和 ``export`` 语句中用其哈希值替换 JavaScript "
"模块的路径。如果你想尝试它，可以子类化 ``ManifestStaticFilesStorage`` 并将 "
"``support_js_module_import_aggregation`` 属性设置为 ``True``。"

msgid ""
"The new :attr:`.ManifestStaticFilesStorage.manifest_hash` attribute provides "
"a hash over all files in the manifest and changes whenever one of the files "
"changes."
msgstr ""
"新的 :attr:`.ManifestStaticFilesStorage.manifest_hash` 属性提供了对清单中所有"
"文件的哈希，并在其中任何文件更改时更改。"

msgid ""
"The new ``\"assume_role\"`` option is now supported in :setting:`OPTIONS` on "
"PostgreSQL to allow specifying the :ref:`session role <database-role>`."
msgstr ""
"在 PostgreSQL 的 :setting:`OPTIONS` 中现在支持新的 ``\"assume_role\"`` 选项，"
"允许指定 :ref:`会话角色 <database-role>`。"

msgid ""
"The new ``\"server_side_binding\"`` option is now supported in :setting:"
"`OPTIONS` on PostgreSQL with ``psycopg`` 3.1.8+ to allow using :ref:`server-"
"side binding cursors <database-server-side-parameters-binding>`."
msgstr ""
"在 PostgreSQL 上，使用 ``psycopg`` 3.1.8+，现在支持 :setting:`OPTIONS` 中的新"
"选项 ``\"server_side_binding\"``，允许使用 :ref:`服务器端绑定游标 <database-"
"server-side-parameters-binding>`。"

msgid ""
"The debug page now shows :pep:`exception notes <678>` and :pep:`fine-grained "
"error locations <657>` on Python 3.11+."
msgstr ""
"在 Python 3.11+ 上，调试页面现在显示 :pep:`异常说明 <678>` 和 :pep:`细粒度错"
"误位置 <657>`。"

msgid ""
"Session cookies are now treated as credentials and therefore hidden and "
"replaced with stars (``**********``) in error reports."
msgstr ""
"会话 cookie 现在被视为凭据，因此在错误报告中被隐藏并替换为星号"
"（``**********``）。"

msgid ""
":class:`~django.forms.ModelForm` now accepts the new ``Meta`` option "
"``formfield_callback`` to customize form fields."
msgstr ""
":class:`~django.forms.ModelForm` 现在接受新的 ``Meta`` 选项 "
"``formfield_callback``，以自定义表单字段。"

msgid ""
":func:`~django.forms.models.modelform_factory` now respects the "
"``formfield_callback`` attribute of the ``form``’s ``Meta``."
msgstr ""
":func:`~django.forms.models.modelform_factory` 现在尊重表单的 ``Meta`` 中的 "
"``formfield_callback`` 属性。"

msgid ""
"Added support and translations for the Central Kurdish (Sorani) language."
msgstr "增加了对中央库尔德语（索拉尼方言）的支持和翻译。"

msgid ""
"The :ref:`django-db-logger` logger now logs transaction management queries "
"(``BEGIN``, ``COMMIT``, and ``ROLLBACK``) at the ``DEBUG`` level."
msgstr ""
":ref:`django-db-logger` 记录器现在以 ``DEBUG`` 级别记录事务管理查询"
"（``BEGIN``、``COMMIT`` 和 ``ROLLBACK``）。"

msgid ""
":djadmin:`makemessages` command now supports locales with private sub-tags "
"such as ``nl_NL-x-informal``."
msgstr ""
":djadmin:`makemessages` 命令现在支持具有私有子标记的区域设置，例如 ``nl_NL-x-"
"informal``。"

msgid ""
"The new :option:`makemigrations --update` option merges model changes into "
"the latest migration and optimizes the resulting operations."
msgstr ""
"新的 :option:`makemigrations --update` 选项将模型更改合并到最新的迁移中，并优"
"化生成的操作。"

msgid "Migrations now support serialization of ``enum.Flag`` objects."
msgstr "迁移现在支持对 ``enum.Flag`` 对象的序列化。"

msgid ""
"``QuerySet`` now extensively supports filtering against :ref:`window-"
"functions` with the exception of disjunctive filter lookups against window "
"functions when performing aggregation."
msgstr ""
"``QuerySet`` 现在在除执行聚合时的窗口函数的析取过滤查询外，广泛支持与 :ref:"
"`window-functions` 进行过滤。"

msgid ""
":meth:`~.QuerySet.prefetch_related` now supports :class:`~django.db.models."
"Prefetch` objects with sliced querysets."
msgstr ""
":meth:`~.QuerySet.prefetch_related` 现在支持带有切片查询集的 :class:`~django."
"db.models.Prefetch` 对象。"

msgid ""
":ref:`Registering lookups <lookup-registration-api>` on :class:`~django.db."
"models.Field` instances is now supported."
msgstr ""
"现在支持在 :class:`~django.db.models.Field` 实例上 :ref:`注册查找 <lookup-"
"registration-api>`。"

msgid ""
"The new ``robust`` argument for :func:`~django.db.transaction.on_commit` "
"allows performing actions that can fail after a database transaction is "
"successfully committed."
msgstr ""
"新的 ``robust`` 参数用于 :func:`~django.db.transaction.on_commit`，允许在数据"
"库事务成功提交后执行可能失败的操作。"

msgid ""
"The new :class:`KT() <django.db.models.fields.json.KT>` expression "
"represents the text value of a key, index, or path transform of :class:"
"`~django.db.models.JSONField`."
msgstr ""
"新的 :class:`KT() <django.db.models.fields.json.KT>` 表达式表示 :class:"
"`~django.db.models.JSONField` 的键、索引或路径转换的文本值。"

msgid ""
":class:`~django.db.models.functions.Now` now supports microsecond precision "
"on MySQL and millisecond precision on SQLite."
msgstr ""
":class:`~django.db.models.functions.Now` 现在在 MySQL 上支持微秒精度，在 "
"SQLite 上支持毫秒精度。"

msgid ""
":class:`F() <django.db.models.F>` expressions that output ``BooleanField`` "
"can now be negated using ``~F()`` (inversion operator)."
msgstr ""
":class:`F() <django.db.models.F>` 表达式输出的 ``BooleanField`` 现在可以使用 "
"``~F()`` （取反操作符）进行取反。"

msgid ""
"``Model`` now provides asynchronous versions of some methods that use the "
"database, using an ``a`` prefix: :meth:`~.Model.adelete`, :meth:`~.Model."
"arefresh_from_db`, and :meth:`~.Model.asave`."
msgstr ""
"``Model`` 现在提供了一些使用数据库的方法的异步版本，使用 ``a`` 前缀：:meth:"
"`~.Model.adelete`、:meth:`~.Model.arefresh_from_db` 和 :meth:`~.Model."
"asave`。"

msgid ""
"Related managers now provide asynchronous versions of methods that change a "
"set of related objects, using an ``a`` prefix: :meth:`~.RelatedManager."
"aadd`, :meth:`~.RelatedManager.aclear`, :meth:`~.RelatedManager.aremove`, "
"and :meth:`~.RelatedManager.aset`."
msgstr ""
"Related 管理器现在提供了一些更改相关对象集合的异步方法，使用 ``a`` 前缀：:"
"meth:`~.RelatedManager.aadd`、:meth:`~.RelatedManager.aclear`、:meth:`~."
"RelatedManager.aremove` 和 :meth:`~.RelatedManager.aset`。"

msgid ""
":attr:`CharField.max_length <django.db.models.CharField.max_length>` is no "
"longer required to be set on PostgreSQL, which supports unlimited "
"``VARCHAR`` columns."
msgstr ""
":attr:`CharField.max_length <django.db.models.CharField.max_length>` 不再需要"
"在 PostgreSQL 上设置，因为它支持无限长度的 ``VARCHAR`` 列。"

msgid ""
":class:`~django.http.StreamingHttpResponse` now supports async iterators "
"when Django is served via ASGI."
msgstr ""
":class:`~django.http.StreamingHttpResponse` 现在在通过 ASGI 提供服务时支持异"
"步迭代器。"

msgid ""
"The :option:`test --debug-sql` option now formats SQL queries with "
"``sqlparse``."
msgstr ":option:`test --debug-sql` 选项现在使用 ``sqlparse`` 格式化 SQL 查询。"

msgid ""
"The :class:`~django.test.RequestFactory`, :class:`~django.test."
"AsyncRequestFactory`, :class:`~django.test.Client`, and :class:`~django.test."
"AsyncClient` classes now support the ``headers`` parameter, which accepts a "
"dictionary of header names and values. This allows a more natural syntax for "
"declaring headers."
msgstr ""
":class:`~django.test.RequestFactory`、:class:`~django.test."
"AsyncRequestFactory`、:class:`~django.test.Client` 和 :class:`~django.test."
"AsyncClient` 类现在支持 ``headers`` 参数，它接受一个包含头部名称和值的字典。"
"这允许更自然的语法来声明头部。"

msgid ""
"The new ``encoder`` parameter for :meth:`django.utils.html.json_script` "
"function allows customizing a JSON encoder class."
msgstr ""
":meth:`django.utils.html.json_script` 函数的新参数 ``encoder`` 允许自定义 "
"JSON 编码器类。"

msgid ""
"The private internal vendored copy of ``urllib.parse.urlsplit()`` now strips "
"``'\\r'``, ``'\\n'``, and ``'\\t'`` (see :cve:`2022-0391` and :bpo:`43882`). "
"This is to protect projects that may be incorrectly using the internal "
"``url_has_allowed_host_and_scheme()`` function, instead of using one of the "
"documented functions for handling URL redirects. The Django functions were "
"not affected."
msgstr ""
"私有的内部 vendored 版本的 ``urllib.parse.urlsplit()`` 现在会删除 ``'\\r'``、"
"``'\\n'`` 和 ``'\\t'`` （参见 :cve:`2022-0391` 和 :bpo:`43882`）。这是为了保"
"护可能错误使用内部 ``url_has_allowed_host_and_scheme()`` 函数而不是使用文档中"
"记录的处理 URL 重定向的函数的项目。Django 的函数没有受到影响。"

msgid ""
"The new :func:`django.utils.http.content_disposition_header` function "
"returns a ``Content-Disposition`` HTTP header value as specified by :rfc:"
"`6266`."
msgstr ""
"新的 :func:`django.utils.http.content_disposition_header` 函数返回根据 :rfc:"
"`6266` 规定的 ``Content-Disposition`` HTTP 标头值。"

msgid ""
"The list of common passwords used by ``CommonPasswordValidator`` is updated "
"to the most recent version."
msgstr "``CommonPasswordValidator`` 使用的常见密码列表已更新为最新版本。"

msgid "Backwards incompatible changes in 4.2"
msgstr "Django 4.2 中的不向后兼容的变更"

msgid ""
"``DatabaseFeatures.allows_group_by_pk`` is removed as it only remained to "
"accommodate a MySQL extension that has been supplanted by proper functional "
"dependency detection in MySQL 5.7.15. Note that ``DatabaseFeatures."
"allows_group_by_selected_pks`` is still supported and should be enabled if "
"your backend supports functional dependency detection in ``GROUP BY`` "
"clauses as specified by the ``SQL:1999`` standard."
msgstr ""
"``DatabaseFeatures.allows_group_by_pk`` 已被移除，因为它仅保留以适应一个已被 "
"MySQL 5.7.15 中正确的功能依赖检测所取代的 MySQL 扩展。请注意，仍然支持 "
"``DatabaseFeatures.allows_group_by_selected_pks``，如果您的后端支持 ``GROUP "
"BY`` 子句中的功能依赖检测，应该启用它，如 ``SQL:1999`` 标准所规定的。"

msgid ""
":djadmin:`inspectdb` now uses ``display_size`` from ``DatabaseIntrospection."
"get_table_description()`` rather than ``internal_size`` for ``CharField``."
msgstr ""
":djadmin:`inspectdb` 现在使用 ``DatabaseIntrospection."
"get_table_description()`` 中的 ``display_size``，而不是 ``internal_size`` 用"
"于 ``CharField``。"

msgid "Dropped support for MariaDB 10.3"
msgstr "不再支持 MariaDB 10.3"

msgid ""
"Upstream support for MariaDB 10.3 ends in May 2023. Django 4.2 supports "
"MariaDB 10.4 and higher."
msgstr ""
"MariaDB 10.3 的上游支持将于 2023 年 5 月结束。 Django 4.2 支持 MariaDB 10.4 "
"及更高版本。"

msgid "Dropped support for MySQL 5.7"
msgstr "不再支持 MySQL 5.7"

msgid ""
"Upstream support for MySQL 5.7 ends in October 2023. Django 4.2 supports "
"MySQL 8 and higher."
msgstr ""
"MySQL 5.7 的上游支持将于 2023 年 10 月结束。 Django 4.2 支持 MySQL 8 及更高版"
"本。"

msgid "Dropped support for PostgreSQL 11"
msgstr "不再支持 PostgreSQL 11"

msgid ""
"Upstream support for PostgreSQL 11 ends in November 2023. Django 4.2 "
"supports PostgreSQL 12 and higher."
msgstr ""
"PostgreSQL 11 的上游支持将于 2023 年 11 月结束。 Django 4.2 支持 PostgreSQL "
"12 及更高版本。"

msgid "Setting ``update_fields`` in ``Model.save()`` may now be required"
msgstr "在 ``Model.save()`` 中设置 ``update_fields`` 可能现在是必需的"

msgid ""
"In order to avoid updating unnecessary columns, :meth:`.QuerySet."
"update_or_create` now passes ``update_fields`` to the :meth:`Model.save() "
"<django.db.models.Model.save>` calls. As a consequence, any fields modified "
"in the custom ``save()`` methods should be added to the ``update_fields`` "
"keyword argument before calling ``super()``. See :ref:`overriding-model-"
"methods` for more details."
msgstr ""
"为了避免更新不必要的列，:meth:`.QuerySet.update_or_create` 现在将 "
"``update_fields`` 传递给 :meth:`Model.save() <django.db.models.Model.save>` "
"调用。因此，在调用 ``super()`` 之前，应该将在自定义的 ``save()`` 方法中修改的"
"任何字段添加到 ``update_fields`` 关键字参数中。详细信息请参阅 :ref:"
"`overriding-model-methods`。"

msgid "Dropped support for raw aggregations on MySQL"
msgstr "在 MySQL 上取消了对原始聚合的支持"

msgid ""
"MySQL 8+ allows functional dependencies on ``GROUP BY`` columns, so the pre-"
"Django 4.2 workaround of grouping by primary keys of the main table is "
"removed. As a consequence, using ``RawSQL()`` aggregations is no longer "
"supported on MySQL as there is no way to determine if such aggregations are "
"needed or valid in the ``GROUP BY`` clause. Use :ref:`aggregation-functions` "
"instead."
msgstr ""
"MySQL 8+ 允许在 ``GROUP BY`` 列上使用函数依赖，因此在 Django 4.2 之前的版本中"
"通过对主表的主键进行分组的解决方法已被移除。因此，在 MySQL 上不再支持使用 "
"``RawSQL()`` 进行聚合，因为无法确定这些聚合是否在 ``GROUP BY`` 子句中需要或有"
"效。请改用 :ref:`聚合函数`。"

msgid ""
"The undocumented ``django.http.multipartparser.parse_header()`` function is "
"removed. Use ``django.utils.http.parse_header_parameters()`` instead."
msgstr ""
"未记录的 ``django.http.multipartparser.parse_header()`` 函数已被移除。请改用 "
"``django.utils.http.parse_header_parameters()``。"

msgid ""
":ttag:`{% blocktranslate asvar … %}<blocktranslate>` result is now marked as "
"safe for (HTML) output purposes."
msgstr ""
":ttag:`{% blocktranslate asvar … %}<blocktranslate>` 的结果现在被标记为适用于"
"（HTML）输出目的的安全内容。"

msgid ""
"The ``autofocus`` HTML attribute in the admin search box is removed as it "
"can be confusing for screen readers."
msgstr ""
"在管理界面的搜索框中移除了 ``autofocus`` HTML 属性，因为它对屏幕阅读器可能会"
"造成困惑。"

msgid ""
"The :option:`makemigrations --check` option no longer creates missing "
"migration files."
msgstr ":option:`makemigrations --check` 选项不再创建缺失的迁移文件。"

msgid ""
"The ``alias`` argument for :meth:`.Expression.get_group_by_cols` is removed."
msgstr ":meth:`.Expression.get_group_by_cols` 的 ``alias`` 参数已被移除。"

msgid ""
"The minimum supported version of ``sqlparse`` is increased from 0.2.2 to "
"0.3.1."
msgstr "``sqlparse`` 的最低支持版本已从 0.2.2 增加到 0.3.1。"

msgid ""
"The undocumented ``negated`` parameter of the :class:`~django.db.models."
"Exists` expression is removed."
msgstr ""
":class:`~django.db.models.Exists` 表达式的未记录的 ``negated`` 参数已被移除。"

msgid ""
"The ``is_summary`` argument of the undocumented ``Query.add_annotation()`` "
"method is removed."
msgstr ""
"未记录的 ``Query.add_annotation()`` 方法的 ``is_summary`` 参数已被移除。"

msgid ""
"The minimum supported version of SQLite is increased from 3.9.0 to 3.21.0."
msgstr "最低支持的 SQLite 版本从 3.9.0 提高到 3.21.0 。"

msgid ""
"The minimum supported version of ``asgiref`` is increased from 3.5.2 to "
"3.6.0."
msgstr "``asgiref`` 的最低支持版本已从 3.5.2 增加到 3.6.0。"

msgid ""
":class:`~django.contrib.auth.forms.UserCreationForm` now rejects usernames "
"that differ only in case. If you need the previous behavior, use :class:"
"`~django.contrib.auth.forms.BaseUserCreationForm` instead."
msgstr ""
":class:`~django.contrib.auth.forms.UserCreationForm` 现在拒绝仅在大小写上不同"
"的用户名。如果需要之前的行为，请改用 :class:`~django.contrib.auth.forms."
"BaseUserCreationForm`。"

msgid ""
"The minimum supported version of ``mysqlclient`` is increased from 1.4.0 to "
"1.4.3."
msgstr "``mysqlclient`` 的最低支持版本从 1.4.0 增加到 1.4.3。"

msgid ""
"The minimum supported version of ``argon2-cffi`` is increased  from 19.1.0 "
"to 19.2.0."
msgstr "``argon2-cffi`` 的最低支持版本已从 19.1.0 增加到 19.2.0。"

msgid ""
"The minimum supported version of ``Pillow`` is increased from 6.2.0 to 6.2.1."
msgstr "``Pillow`` 的最低支持版本已从 6.2.0 增加到 6.2.1。"

msgid ""
"The minimum supported version of ``jinja2`` is increased from 2.9.2 to "
"2.11.0."
msgstr "``jinja2`` 的最低支持版本已从 2.9.2 增加到 2.11.0。"

msgid ""
"The minimum supported version of :pypi:`redis-py <redis>` is increased from "
"3.0.0 to 3.4.0."
msgstr ":pypi:`redis-py <redis>` 的最低支持版本已从 3.0.0 增加到 3.4.0。"

msgid ""
"Manually instantiated ``WSGIRequest`` objects must be provided a file-like "
"object for ``wsgi.input``. Previously, Django was more lax than the expected "
"behavior as specified by the WSGI specification."
msgstr ""
"手动实例化的 ``WSGIRequest`` 对象必须为 ``wsgi.input`` 提供一个类似文件的对"
"象。之前，Django 对于 WSGI 规范中指定的预期行为更加宽松。"

msgid "Support for ``PROJ`` < 5 is removed."
msgstr "已移除对 ``PROJ`` 版本低于 5 的支持。"

msgid ""
":class:`~django.core.mail.backends.smtp.EmailBackend` now verifies a :py:"
"attr:`hostname <ssl.SSLContext.check_hostname>` and :py:attr:`certificates "
"<ssl.SSLContext.verify_mode>`. If you need the previous behavior that is "
"less restrictive and not recommended, subclass ``EmailBackend`` and override "
"the ``ssl_context`` property."
msgstr ""
":class:`~django.core.mail.backends.smtp.EmailBackend` 现在验证 :py:attr:"
"`hostname <ssl.SSLContext.check_hostname>` 和 :py:attr:`certificates <ssl."
"SSLContext.verify_mode>`。如果你需要以前不那么严格且不推荐的行为，可以子类化 "
"``EmailBackend`` 并重写 ``ssl_context`` 属性。"

msgid "Features deprecated in 4.2"
msgstr "在 4.2 版本中弃用的功能"

msgid "``index_together`` option is deprecated in favor of ``indexes``"
msgstr "``index_together`` 选项已被弃用，推荐使用 ``indexes``"

msgid ""
"The ``Meta.index_together`` option is deprecated in favor of the :attr:"
"`~django.db.models.Options.indexes` option."
msgstr ""

msgid ""
"Migrating existing ``index_together`` should be handled as a migration. For "
"example::"
msgstr "迁移现有的 ``index_together`` 应该作为一个迁移来处理。例如："

msgid "Should become::"
msgstr "应该变成："

msgid ""
"Running the :djadmin:`makemigrations` command will generate a migration "
"containing a :class:`~django.db.migrations.operations.RenameIndex` operation "
"which will rename the existing index. Next, consider squashing migrations to "
"remove ``index_together`` from historical migrations."
msgstr ""
"运行 :djadmin:`makemigrations` 命令将生成一个迁移，其中包含一个 :class:"
"`~django.db.migrations.operations.RenameIndex` 操作，用于重命名现有的索引。接"
"下来，考虑合并迁移以从历史迁移中移除 ``index_together``。"

msgid ""
"The ``AlterIndexTogether`` migration operation is now officially supported "
"only for pre-Django 4.2 migration files. For backward compatibility reasons, "
"it's still part of the public API, and there's no plan to deprecate or "
"remove it, but it should not be used for new migrations. Use :class:`~django."
"db.migrations.operations.AddIndex` and :class:`~django.db.migrations."
"operations.RemoveIndex` operations instead."
msgstr ""
"``AlterIndexTogether`` 迁移操作现在官方上仅支持用于 Django 4.2 之前的迁移文"
"件。出于向后兼容性的原因，它仍然是公共 API 的一部分，没有计划弃用或移除它，但"
"不应该在新的迁移中使用。应该使用 :class:`~django.db.migrations.operations."
"AddIndex` 和 :class:`~django.db.migrations.operations.RemoveIndex` 操作代替。"

msgid "Passing encoded JSON string literals to ``JSONField`` is deprecated"
msgstr "传递编码的 JSON 字符串文字给 ``JSONField`` 已被弃用"

msgid ""
"``JSONField`` and its associated lookups and aggregates used to allow "
"passing JSON encoded string literals which caused ambiguity on whether "
"string literals were already encoded from database backend's perspective."
msgstr ""
"``JSONField`` 及其相关的查找和聚合操作曾允许传递 JSON 编码的字符串文字，这导"
"致了在数据库后端的角度上对字符串文字是否已经编码的歧义。"

msgid ""
"During the deprecation period string literals will be attempted to be JSON "
"decoded and a warning will be emitted on success that points at passing non-"
"encoded forms instead."
msgstr ""
"在弃用期间，将尝试对字符串字面值进行 JSON 解码，并在成功时发出警告，指出应传"
"递非编码形式的内容。"

msgid "Code that used to pass JSON encoded string literals::"
msgstr "曾经用于传递 JSON 编码的字符串文字的代码："

msgid ""
"From Django 5.1+ string literals will be implicitly interpreted as JSON "
"string literals."
msgstr "从 Django 5.1+ 开始，字符串字面值将被隐式解释为 JSON 字符串字面值。"

msgid ""
"The ``BaseUserManager.make_random_password()`` method is deprecated. See "
"`recipes and best practices <https://docs.python.org/3/library/secrets."
"html#recipes-and-best-practices>`_ for using Python's :py:mod:`secrets` "
"module to generate passwords."
msgstr ""
"``BaseUserManager.make_random_password()`` 方法已被弃用。请参阅 `Python 的 "
"secrets 模块的文档 <https://docs.python.org/3/library/secrets.html#recipes-"
"and-best-practices>`_ 了解如何使用 Python 的 :py:mod:`secrets` 模块生成密码的"
"示例和最佳实践。"

msgid ""
"The ``length_is`` template filter is deprecated in favor of :tfilter:"
"`length` and the ``==`` operator within an :ttag:`{% if %}<if>` tag. For "
"example"
msgstr ""
"``length_is`` 模板过滤器已被弃用，推荐使用 :tfilter:`length` 和在 :ttag:`{% "
"if %}<if>` 标签内使用 ``==`` 运算符。例如："

msgid "instead of:"
msgstr "而不是："

msgid ""
"``django.contrib.auth.hashers.SHA1PasswordHasher``, ``django.contrib.auth."
"hashers.UnsaltedSHA1PasswordHasher``, and ``django.contrib.auth.hashers."
"UnsaltedMD5PasswordHasher`` are deprecated."
msgstr ""
"``django.contrib.auth.hashers.SHA1PasswordHasher``、``django.contrib.auth."
"hashers.UnsaltedSHA1PasswordHasher`` 和 ``django.contrib.auth.hashers."
"UnsaltedMD5PasswordHasher`` 已被弃用。"

msgid ""
"``django.contrib.postgres.fields.CICharField`` is deprecated in favor of "
"``CharField(db_collation=\"…\")`` with a case-insensitive non-deterministic "
"collation."
msgstr ""
"``django.contrib.postgres.fields.CICharField`` 已被弃用，推荐使用 "
"``CharField(db_collation=\"…\")``，并指定一个不区分大小写的非确定性排序规则"
"(collation)。"

msgid ""
"``django.contrib.postgres.fields.CIEmailField`` is deprecated in favor of "
"``EmailField(db_collation=\"…\")`` with a case-insensitive non-deterministic "
"collation."
msgstr ""
"``django.contrib.postgres.fields.CIEmailField`` 已被弃用，推荐使用 "
"``EmailField(db_collation=\"…\")``，并指定一个不区分大小写的非确定性排序规则"
"(collation)。"

msgid ""
"``django.contrib.postgres.fields.CITextField`` is deprecated in favor of "
"``TextField(db_collation=\"…\")`` with a case-insensitive non-deterministic "
"collation."
msgstr ""
"``django.contrib.postgres.fields.CITextField`` 已被弃用，推荐使用 "
"``TextField(db_collation=\"…\")``，并指定一个不区分大小写的非确定性排序规则"
"(collation)。"

msgid "``django.contrib.postgres.fields.CIText`` mixin is deprecated."
msgstr "``django.contrib.postgres.fields.CIText`` mixin 已被弃用。"

msgid ""
"The ``map_height`` and ``map_width`` attributes of ``BaseGeometryWidget`` "
"are deprecated, use CSS to size map widgets instead."
msgstr ""
"``BaseGeometryWidget`` 的 ``map_height`` 和 ``map_width`` 属性已被弃用，请改"
"用 CSS 来设置地图小部件的大小。"

msgid ""
"``SimpleTestCase.assertFormsetError()`` is deprecated in favor of "
"``assertFormSetError()``."
msgstr ""
"``SimpleTestCase.assertFormsetError()`` 已被弃用，推荐使用 "
"``assertFormSetError()``。"

msgid ""
"``TransactionTestCase.assertQuerysetEqual()`` is deprecated in favor of "
"``assertQuerySetEqual()``."
msgstr ""
"``TransactionTestCase.assertQuerysetEqual()`` 已被弃用，推荐使用 "
"``assertQuerySetEqual()``。"

msgid ""
"Passing positional arguments to ``Signer`` and ``TimestampSigner`` is "
"deprecated in favor of keyword-only arguments."
msgstr ""
"将位置参数传递给 ``Signer`` 和 ``TimestampSigner`` 已被弃用，推荐使用仅限关键"
"字的参数。"

msgid ""
"The ``DEFAULT_FILE_STORAGE`` setting is deprecated in favor of "
"``STORAGES[\"default\"]``."
msgstr ""
"``DEFAULT_FILE_STORAGE`` 设置已被弃用，推荐使用 ``STORAGES[\"default\"]``。"

msgid ""
"The ``STATICFILES_STORAGE`` setting is deprecated in favor of "
"``STORAGES[\"staticfiles\"]``."
msgstr ""
"``STATICFILES_STORAGE`` 设置已被弃用，推荐使用 "
"``STORAGES[\"staticfiles\"]``。"

msgid ""
"The ``django.core.files.storage.get_storage_class()`` function is deprecated."
msgstr "``django.core.files.storage.get_storage_class()`` 函数已被弃用。"

msgid "Django 4.2.1 release notes"
msgstr "Django 4.2.1 版本发行说明"

msgid ""
"Django 4.2.1 fixes a security issue with severity \"low\" and several bugs "
"in 4.2."
msgstr ""
"Django 4.2.1 修复了一个安全问题，安全级别为 \"low\"，以及若干在 4.2 版本中的"
"错误。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of ``QuerySet.defer()`` "
"when deferring fields by attribute names (:ticket:`34458`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在使用属性名称来延迟字段时，"
"``QuerySet.defer()`` 发生崩溃 (:ticket:`34458`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of :class:`~django."
"contrib.postgres.search.SearchVector` function with ``%`` characters (:"
"ticket:`34459`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在使用带有 ``%`` 字符的 :class:"
"`~django.contrib.postgres.search.SearchVector` 函数时发生崩溃 (:ticket:"
"`34459`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused aggregation over query that "
"uses explicit grouping to group against the wrong columns (:ticket:`34464`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在使用显式分组的查询进行聚合"
"时，聚合作用于错误的列 (:ticket:`34464`)。"

msgid ""
"Reallowed, following a regression in Django 4.2, setting the "
"``\"cursor_factory\"`` option in :setting:`OPTIONS` on PostgreSQL (:ticket:"
"`34466`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，现在可以重新设置 PostgreSQL 上的 :"
"setting:`OPTIONS` 中的 ``\"cursor_factory\"`` 选项 (:ticket:`34466`)。"

msgid ""
"Enforced UTF-8 client encoding on PostgreSQL, following a regression in "
"Django 4.2 (:ticket:`34470`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，现在在 PostgreSQL 上强制使用 UTF-8 客户端"
"编码 (:ticket:`34470`)。"

msgid ""
"Fixed a regression in Django 4.2 where ``i18n_patterns()`` didn't respect "
"the ``prefix_default_language`` argument when a fallback language of the "
"default language was used (:ticket:`34455`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，``i18n_patterns()`` 在使用默认语言的回退"
"语言时不再忽略 ``prefix_default_language`` 参数 (:ticket:`34455`)。"

msgid ""
"Fixed a regression in Django 4.2 where translated URLs of the default "
"language from ``i18n_patterns()`` with ``prefix_default_language`` set to "
"``False`` raised 404 errors for a request with a different language (:ticket:"
"`34515`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，当从 ``i18n_patterns()`` 使用 "
"``prefix_default_language`` 设置为 ``False`` 时，默认语言的翻译 URL 不再为不"
"同语言的请求引发 404 错误 (:ticket:`34515`)。"

msgid ""
"Fixed a regression in Django 4.2 where creating copies and deep copies of "
"``HttpRequest``, ``HttpResponse``, and their subclasses didn't always work "
"correctly (:ticket:`34482`, :ticket:`34484`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，创建 ``HttpRequest``、``HttpResponse`` 及"
"其子类的拷贝和深拷贝并不总是正确工作的问题 (:ticket:`34482`, :ticket:"
"`34484`)。"

msgid ""
"Fixed a regression in Django 4.2 where ``timesince`` and ``timeuntil`` "
"template filters returned incorrect results for a datetime with a non-UTC "
"timezone when a time difference is less than 1 day (:ticket:`34483`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，当时间差小于 1 天且日期时间带有非 UTC 时"
"区时，``timesince`` 和 ``timeuntil`` 模板过滤器返回不正确的结果 (:ticket:"
"`34483`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of :class:`~django."
"contrib.postgres.search.SearchHeadline` function with ``psycopg`` 3 (:ticket:"
"`34486`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致使用 ``psycopg`` 3 时 :class:"
"`~django.contrib.postgres.search.SearchHeadline` 函数崩溃 (:ticket:`34486`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused incorrect "
"``ClearableFileInput`` margins in the admin (:ticket:`34506`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致管理员界面中的 "
"``ClearableFileInput`` 边距不正确 (:ticket:`34506`)。"

msgid ""
"Fixed a regression in Django 4.2 where breadcrumbs didn't appear on admin "
"site app index views (:ticket:`34512`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致管理员站点应用程序索引视图上不"
"显示面包屑导航 (:ticket:`34512`)。"

msgid ""
"Made squashing migrations reduce ``AddIndex``, ``RemoveIndex``, "
"``RenameIndex``, and ``CreateModel`` operations which allows removing a "
"deprecated ``Meta.index_together`` option from historical migrations and use "
"``Meta.indexes`` instead (:ticket:`34525`)."
msgstr ""
"在 Django 中进行合并迁移操作时，现在会减少 ``AddIndex``、``RemoveIndex``、"
"``RenameIndex`` 和 ``CreateModel`` 操作，这允许从历史迁移中移除已弃用的 "
"``Meta.index_together`` 选项，而改为使用 ``Meta.indexes`` (:ticket:`34525`)。"

msgid "Django 4.2.10 release notes"
msgstr "Django 4.2.10 版本发行说明"

msgid ""
"Django 4.2.10 fixes a security issue with severity \"moderate\" in 4.2.9."
msgstr "Django 4.2.10 修复了 4.2.9 版本中一个\"中等\"严重性的安全问题。"

msgid "Django 4.2.11 release notes"
msgstr "Django 4.2.11 版本发行说明"

msgid ""
"Django 4.2.11 fixes a security issue with severity \"moderate\" and a "
"regression in 4.2.10."
msgstr ""
"Django 4.2.11 修复了一些\"中等\"严重性的安全问题，以及 4.2.10 版本中的一个错"
"误。"

msgid ""
"Fixed a regression in Django 4.2.10 where ``intcomma`` template filter could "
"return a leading comma for string representation of floats (:ticket:`35172`)."
msgstr ""
"修复了 Django 4.2.10 中的一个回归问题，即 ``intcomma`` 模板过滤器可能在浮点数"
"的字符串表示中返回一个前导逗号（:ticket:`35172`）。"

msgid "Django 4.2.12 release notes"
msgstr "Django 4.2.12 版本发行说明"

msgid "*May 6, 2024*"
msgstr "*2024 年 5 月 6 日*"

msgid ""
"Django 4.2.12 fixes a compatibility issue with Python 3.11.9+ and 3.12.3+."
msgstr "Django 4.2.12修复了在Python 3.11.9+ 和3.12.3+上使用的可用性问题"

msgid ""
"Fixed a crash in Django 4.2 when validating email max line lengths with "
"content decoded using the ``surrogateescape`` error handling scheme (:ticket:"
"`35361`)."
msgstr ""
"修复了 Django 4.2 中使用“surrogateescape”错误处理方案（:ticket:`35361`）解码"
"的内容验证电子邮件最大行长度时发生的崩溃。"

msgid "Django 4.2.13 release notes"
msgstr "Django 4.2.13 版本发行说明"

msgid "*May 7, 2024*"
msgstr "*2024 年 5 月 7 日*"

msgid "Django 4.2.13 fixes a packaging error in 4.2.12."
msgstr "Django 4.2.13 修复了 4.2.12 版本中的一个打包错误。"

msgid "Django 4.2.14 release notes"
msgstr ""

msgid "*July 9, 2024*"
msgstr ""

msgid ""
"Django 4.2.14 fixes two security issues with severity \"moderate\" and two "
"security issues with severity \"low\" in 4.2.13."
msgstr ""

msgid ""
"CVE-2024-38875: Potential denial-of-service vulnerability in ``django.utils."
"html.urlize()``"
msgstr ""

msgid ""
":tfilter:`urlize` and :tfilter:`urlizetrunc` were subject to a potential "
"denial-of-service attack via certain inputs with a very large number of "
"brackets."
msgstr ""

msgid ""
"CVE-2024-39329: Username enumeration through timing difference for users "
"with unusable passwords"
msgstr ""

msgid ""
"The :meth:`~django.contrib.auth.backends.ModelBackend.authenticate()` method "
"allowed remote attackers to enumerate users via a timing attack involving "
"login requests for users with unusable passwords."
msgstr ""

msgid "CVE-2024-39330: Potential directory-traversal via ``Storage.save()``"
msgstr ""

msgid ""
"Derived classes of the :class:`~django.core.files.storage.Storage` base "
"class which override :meth:`generate_filename() <django.core.files.storage."
"Storage.generate_filename()>` without replicating the file path validations "
"existing in the parent class, allowed for potential directory-traversal via "
"certain inputs when calling :meth:`save() <django.core.files.storage.Storage."
"save()>`."
msgstr ""

msgid ""
"Built-in ``Storage`` sub-classes were not affected by this vulnerability."
msgstr ""

msgid ""
"CVE-2024-39614: Potential denial-of-service vulnerability in "
"``get_supported_language_variant()``"
msgstr ""

msgid ""
":meth:`~django.utils.translation.get_supported_language_variant` was subject "
"to a potential denial-of-service attack when used with very long strings "
"containing specific characters."
msgstr ""

msgid ""
"To mitigate this vulnerability, the language code provided to :meth:`~django."
"utils.translation.get_supported_language_variant` is now parsed up to a "
"maximum length of 500 characters."
msgstr ""

msgid ""
"When the language code is over 500 characters, a :exc:`ValueError` will now "
"be raised if ``strict`` is ``True``, or if there is no generic variant and "
"``strict`` is ``False``."
msgstr ""

msgid "Django 4.2.15 release notes"
msgstr ""

msgid "*August 6, 2024*"
msgstr ""

msgid ""
"Django 4.2.15 fixes three security issues with severity \"moderate\", one "
"security issue with severity \"high\", and a regression in 4.2.14."
msgstr ""

msgid ""
"CVE-2024-41989: Memory exhaustion in ``django.utils.numberformat."
"floatformat()``"
msgstr ""

msgid ""
"If :tfilter:`floatformat` received a string representation of a number in "
"scientific notation with a large exponent, it could lead to significant "
"memory consumption."
msgstr ""

msgid ""
"To avoid this, decimals with more than 200 digits are now returned as is."
msgstr ""

msgid ""
"CVE-2024-41990: Potential denial-of-service vulnerability in ``django.utils."
"html.urlize()``"
msgstr ""

msgid ""
":tfilter:`urlize` and :tfilter:`urlizetrunc` were subject to a potential "
"denial-of-service attack via very large inputs with a specific sequence of "
"characters."
msgstr ""

msgid ""
"CVE-2024-41991: Potential denial-of-service vulnerability in ``django.utils."
"html.urlize()`` and ``AdminURLFieldWidget``"
msgstr ""

msgid ""
":tfilter:`urlize`, :tfilter:`urlizetrunc`, and ``AdminURLFieldWidget`` were "
"subject to a potential denial-of-service attack via certain inputs with a "
"very large number of Unicode characters."
msgstr ""

msgid ""
"CVE-2024-42005: Potential SQL injection in ``QuerySet.values()`` and "
"``values_list()``"
msgstr ""

msgid ""
":meth:`.QuerySet.values` and :meth:`~.QuerySet.values_list` methods on "
"models with a ``JSONField`` were subject to SQL injection in column aliases, "
"via a crafted JSON object key as a passed ``*arg``."
msgstr ""

msgid ""
"Fixed a regression in Django 4.2.14 that caused a crash in "
"``LocaleMiddleware`` when processing a language code over 500 characters (:"
"ticket:`35627`)."
msgstr ""

msgid "Django 4.2.16 release notes"
msgstr ""

msgid "*September 3, 2024*"
msgstr ""

msgid ""
"Django 4.2.16 fixes one security issue with severity \"moderate\" and one "
"security issue with severity \"low\" in 4.2.15."
msgstr ""

msgid ""
"CVE-2024-45230: Potential denial-of-service vulnerability in ``django.utils."
"html.urlize()``"
msgstr ""

msgid ""
"CVE-2024-45231: Potential user email enumeration via response status on "
"password reset"
msgstr ""

msgid ""
"Due to unhandled email sending failures, the :class:`~django.contrib.auth."
"forms.PasswordResetForm` class allowed remote attackers to enumerate user "
"emails by issuing password reset requests and observing the outcomes."
msgstr ""

msgid ""
"To mitigate this risk, exceptions occurring during password reset email "
"sending are now handled and logged using the :ref:`django-contrib-auth-"
"logger` logger."
msgstr ""

msgid "Django 4.2.2 release notes"
msgstr "Django 4.2.2 版本发行说明"

msgid "*June 5, 2023*"
msgstr "*2023 年 6 月 5 日*"

msgid "Django 4.2.2 fixes several bugs in 4.2.1."
msgstr "Django 4.2.2 修复了 4.2.1 版本中的一些错误。"

msgid ""
"Fixed a regression in Django 4.2 that caused an unnecessary ``DBMS_LOB."
"SUBSTR()`` wrapping in the ``__isnull`` and ``__exact=None`` lookups for "
"``TextField()``/``BinaryField()`` on Oracle (:ticket:`34544`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在 Oracle 上的 ``TextField()``/"
"``BinaryField()`` 上使用 ``__isnull`` 和 ``__exact=None`` 查找时出现不必要的 "
"``DBMS_LOB.SUBSTR()`` 包装 (:ticket:`34544`)。"

msgid ""
"Restored, following a regression in Django 4.2, ``get_prep_value()`` call in "
"``JSONField`` subclasses (:ticket:`34539`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，恢复了 ``JSONField`` 子类中的 "
"``get_prep_value()`` 调用 (:ticket:`34539`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of ``QuerySet.defer()`` "
"when passing a ``ManyToManyField`` or ``GenericForeignKey`` reference. While "
"doing so is a no-op, it was allowed in older version (:ticket:`34570`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在传递 ``ManyToManyField`` 或 "
"``GenericForeignKey`` 引用时，``QuerySet.defer()`` 发生崩溃。虽然这是一个无操"
"作，但在较旧的版本中允许这样做 (:ticket:`34570`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of ``QuerySet.only()`` "
"when passing a reverse ``OneToOneField`` reference (:ticket:`34612`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在传递反向 ``OneToOneField`` 引"
"用时，``QuerySet.only()`` 发生崩溃 (:ticket:`34612`)。"

msgid ""
"Fixed a bug in Django 4.2 where :option:`makemigrations --update` didn't "
"respect the ``--name`` option (:ticket:`34568`)."
msgstr ""
"在 Django 4.2 中修复了一个 bug，该 bug 导致 :option:`makemigrations --"
"update` 不会考虑 ``--name`` 选项 (:ticket:`34568`)。"

msgid ""
"Fixed a performance regression in Django 4.2 when compiling queries without "
"ordering (:ticket:`34580`)."
msgstr ""
"在 Django 4.2 中修复了一个性能回归问题，当编译没有排序的查询时会有性能问题 (:"
"ticket:`34580`)。"

msgid ""
"Fixed a regression in Django 4.2 where nonexistent stylesheet was linked on "
"a “Congratulations!” page (:ticket:`34588`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在“恭喜！”页面上链接了不存在的"
"样式表 (:ticket:`34588`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of ``QuerySet."
"aggregate()`` with expressions referencing other aggregates (:ticket:"
"`34551`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在引用其他聚合的表达式中使用 "
"``QuerySet.aggregate()`` 时发生崩溃 (:ticket:`34551`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of ``QuerySet."
"aggregate()`` with aggregates referencing subqueries (:ticket:`34551`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在引用子查询的聚合中使用 "
"``QuerySet.aggregate()`` 时发生崩溃 (:ticket:`34551`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of querysets on SQLite "
"when filtering on ``DecimalField`` against values outside of the defined "
"range (:ticket:`34590`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在 SQLite 上对 "
"``DecimalField`` 进行过滤时，当值超出定义范围时，查询集发生崩溃 (:ticket:"
"`34590`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused a serialization crash on a "
"``ManyToManyField`` without a natural key when its ``Manager``’s base "
"``QuerySet`` used ``select_related()`` (:ticket:`34620`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在没有自然键的情况下，当其 "
"``Manager`` 的基本 ``QuerySet`` 使用了 ``select_related()`` 时，"
"``ManyToManyField`` 的序列化会崩溃 (:ticket:`34620`)。"

msgid "Django 4.2.3 release notes"
msgstr "Django 4.2.3 版本发行说明"

msgid ""
"Django 4.2.3 fixes a security issue with severity \"moderate\" and several "
"bugs in 4.2.2."
msgstr ""
"Django 4.2.3 修复了一些\"中等\"严重性的安全问题，以及 4.2.2 版本中的几个错"
"误。"

msgid ""
"Fixed a regression in Django 4.2 that caused incorrect alignment of timezone "
"warnings for ``DateField`` and ``TimeField`` in the admin (:ticket:`34645`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在管理员界面中对于 "
"``DateField`` 和 ``TimeField`` 的时区警告的对齐不正确 (:ticket:`34645`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused incorrect highlighting of rows "
"in the admin changelist view when ``ModelAdmin.list_editable`` contained a "
"``BooleanField`` (:ticket:`34638`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在管理员 changelist 视图中，当 "
"``ModelAdmin.list_editable`` 包含一个 ``BooleanField`` 时，行的高亮显示不正"
"确 (:ticket:`34638`)。"

msgid "Django 4.2.4 release notes"
msgstr "Django 4.2.4 版本发行说明"

msgid "*August 1, 2023*"
msgstr "*2023 年 8 月 1 日*"

msgid "Django 4.2.4 fixes several bugs in 4.2.3."
msgstr "Django 4.2.4 修复了 4.2.3 版本中的一些错误。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of ``QuerySet."
"aggregate()`` with aggregates referencing window functions (:ticket:`34717`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在引用窗口函数的聚合中使用 "
"``QuerySet.aggregate()`` 时发生崩溃 (:ticket:`34717`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash when grouping by a "
"reference in a subquery (:ticket:`34748`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在子查询中按引用进行分组时发生"
"崩溃 (:ticket:`34748`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused aggregation over query that "
"uses explicit grouping by multi-valued annotations to group against the "
"wrong columns (:ticket:`34750`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在使用多值注释进行显式分组的查"
"询上进行聚合时，聚合作用于错误的列 (:ticket:`34750`)。"

msgid "Django 4.2.5 release notes"
msgstr "Django 4.2.5 版本发行说明"

msgid ""
"Django 4.2.5 fixes a security issue with severity \"moderate\" and several "
"bugs in 4.2.4."
msgstr ""
"Django 4.2.5 修复了一个\"中等\"严重性的安全问题，以及 4.2.4 版本中的几个错"
"误。"

msgid ""
"Fixed a regression in Django 4.2 that caused an incorrect validation of "
"``CheckConstraints`` on ``__isnull`` lookups against ``JSONField`` (:ticket:"
"`34754`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在针对 ``JSONField`` 进行 "
"``__isnull`` 查找时，``CheckConstraints`` 的验证不正确 (:ticket:`34754`)。"

msgid ""
"Fixed a bug in Django 4.2 where the deprecated ``DEFAULT_FILE_STORAGE`` and "
"``STATICFILES_STORAGE`` settings were not synced with ``STORAGES`` (:ticket:"
"`34773`)."
msgstr ""
"在 Django 4.2 中修复了一个 bug，该 bug 导致已弃用的 ``DEFAULT_FILE_STORAGE`` "
"和 ``STATICFILES_STORAGE`` 设置未与 ``STORAGES`` 同步 (:ticket:`34773`)。"

msgid ""
"Fixed a regression in Django 4.2.2 that caused an unnecessary selection of a "
"non-nullable ``ManyToManyField`` without a natural key during serialization "
"(:ticket:`34779`)."
msgstr ""
"在 Django 4.2.2 中修复了一个回归问题，该问题导致在序列化过程中不必要地选择了"
"一个没有自然键的非空 ``ManyToManyField`` (:ticket:`34779`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of a queryset when "
"filtering against deeply nested ``OuterRef()`` annotations (:ticket:`34803`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在针对深度嵌套的 "
"``OuterRef()`` 注释进行过滤时，查询集发生崩溃 (:ticket:`34803`)。"

msgid "Django 4.2.6 release notes"
msgstr "Django 4.2.6 版本发行说明"

msgid ""
"Django 4.2.6 fixes a security issue with severity \"moderate\" and several "
"bugs in 4.2.5."
msgstr ""
"Django 4.2.6 修复了一个\"中等\"严重性的安全问题，以及 4.2.5 版本中的几个错"
"误。"

msgid ""
"Fixed a regression in Django 4.2.5 where overriding the deprecated "
"``DEFAULT_FILE_STORAGE`` and ``STATICFILES_STORAGE`` settings in tests "
"caused the main ``STORAGES`` to mutate (:ticket:`34821`)."
msgstr ""
"在 Django 4.2.5 中修复了一个回归问题，该问题导致在测试中覆盖已弃用的 "
"``DEFAULT_FILE_STORAGE`` 和 ``STATICFILES_STORAGE`` 设置会导致主要的 "
"``STORAGES`` 发生变化 (:ticket:`34821`)。"

msgid ""
"Fixed a regression in Django 4.2 that caused unnecessary casting of string "
"based fields (``CharField``, ``EmailField``, ``TextField``, ``CICharField``, "
"``CIEmailField``, and ``CITextField``) used with the ``__isnull`` lookup on "
"PostgreSQL. As a consequence, indexes using an ``__isnull`` expression or "
"condition created before Django 4.2 wouldn't be used by the query planner, "
"leading to a performance regression (:ticket:`34840`)."
msgstr ""
"在 Django 4.2 中修复了一个回归问题，该问题导致在 PostgreSQL 上使用 "
"``__isnull`` 查找时，对于基于字符串的字段（``CharField``、``EmailField``、"
"``TextField``、``CICharField``、``CIEmailField`` 和 ``CITextField``）进行不必"
"要的强制转换。因此，Django 4.2 之前创建的使用 ``__isnull`` 表达式或条件的索引"
"不会被查询规划器使用，导致性能下降 (:ticket:`34840`)。"

msgid ""
"You may need to recreate such indexes created in your database with Django "
"4.2 to 4.2.5, as they contain unnecessary ``::text`` casting. Find candidate "
"indexes with this query:"
msgstr ""
"你可能需要重新创建在 Django 4.2 到 4.2.5 中创建的这种索引，因为它们包含不必要"
"的 ``::text`` 转换。可以使用以下查询来找到候选的索引："

msgid "Django 4.2.7 release notes"
msgstr "Django 4.2.7 版本发行说明"

msgid ""
"Django 4.2.7 fixes a security issue with severity \"moderate\" and several "
"bugs in 4.2.6."
msgstr ""
"Django 4.2.7 修复了一个\"中等\"严重性的安全问题，以及 4.2.6 版本中的几个错"
"误。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of ``QuerySet."
"aggregate()`` with aggregates referencing expressions containing subqueries "
"(:ticket:`34798`)."
msgstr ""
"修复了 Django 4.2 中的一个回归问题，导致 ``QuerySet.aggregate()`` 在引用包含"
"子查询的表达式的聚合时崩溃（:ticket:`34798`）。"

msgid ""
"Restored, following a regression in Django 4.2, creating ``varchar/"
"text_pattern_ops`` indexes on ``CharField`` and ``TextField`` with "
"deterministic collations on PostgreSQL (:ticket:`34932`)."
msgstr ""
"恢复了在 Django 4.2 中发生的一个回归问题，可以在 PostgreSQL 上的 "
"``CharField`` 和 ``TextField`` 上创建具有确定性排序规则的 ``varchar/"
"text_pattern_ops`` 索引（:ticket:`34932`）。"

msgid "Django 4.2.8 release notes"
msgstr "Django 4.2.8 版本发行说明"

msgid "*December 4, 2023*"
msgstr "*2023 年 12 月 4 日*"

msgid ""
"Django 4.2.8 fixes several bugs in 4.2.7 and adds compatibility with Python "
"3.12."
msgstr "Django 4.2.8 修复了 4.2.7 中的一些错误，并与 Python 3.12 兼容。"

msgid ""
"Fixed a regression in Django 4.2 that caused :option:`makemigrations --"
"check` to stop displaying pending migrations (:ticket:`34457`)."
msgstr ""
"修复了 Django 4.2 中的一个回归问题，导致 :option:`makemigrations --check` 停"
"止显示待处理的迁移（:ticket:`34457`）。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of ``QuerySet."
"aggregate()`` with aggregates referencing other aggregates or window "
"functions through conditional expressions (:ticket:`34975`)."
msgstr ""
"修复了 Django 4.2 中的一个回归问题，导致 ``QuerySet.aggregate()`` 在聚合引用"
"其他聚合或窗口函数通过条件表达式时崩溃（:ticket:`34975`）。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash when annotating a "
"``QuerySet`` with a ``Window`` expressions composed of a ``partition_by`` "
"clause mixing field types and aggregation expressions (:ticket:`34987`)."
msgstr ""
"修复了 Django 4.2 中的一个回归问题，该问题导致在用 ``partition_by`` 子句混合"
"字段类型和聚合表达式组成的 ``Window`` 表达式注解 ``QuerySet`` 时发生崩溃（:"
"ticket:`34987`）。"

msgid ""
"Fixed a regression in Django 4.2 where the admin's change list page had "
"misaligned pagination links and inputs when using ``list_editable`` (:ticket:"
"`34991`)."
msgstr ""
"修复了 Django 4.2 中的一个回归问题，当使用 ``list_editable`` 时，管理的更改列"
"表页面的分页链接和输入框对齐不当（:ticket:`34991`）。"

msgid ""
"Fixed a regression in Django 4.2 where checkboxes in the admin would be "
"centered on narrower screen widths (:ticket:`34994`)."
msgstr ""
"修复了 Django 4.2 中的一个回归问题，该问题导致在较窄的屏幕宽度下，管理界面中"
"的复选框会居中显示（:ticket:`34994`）。"

msgid ""
"Fixed a regression in Django 4.2 that caused a crash of querysets with "
"aggregations on MariaDB when the ``ONLY_FULL_GROUP_BY`` SQL mode was enabled "
"(:ticket:`34992`)."
msgstr ""
"在启用 ``ONLY_FULL_GROUP_BY`` SQL 模式时，修复了 Django 4.2 中在 MariaDB 上出"
"现的聚合查询集导致崩溃的回退问题（:ticket:`34992`）。"

msgid ""
"Fixed a regression in Django 4.2 where the admin's read-only password widget "
"and some help texts were incorrectly aligned at tablet widths (:ticket:"
"`34982`)."
msgstr ""
"在 Django 4.2 中修复了一个回退问题，其中管理的只读密码小部件和一些帮助文本在"
"平板宽度下对齐不正确（:ticket:`34982`）。"

msgid ""
"Fixed a regression in Django 4.2 that caused a migration crash on SQLite "
"when altering unsupported ``Meta.db_table_comment`` (:ticket:`35006`)."
msgstr ""
"修复了 Django 4.2 中的一个回归问题，该问题在 SQLite 上修改不支持的 ``Meta."
"db_table_comment`` 时导致迁移崩溃（:ticket:`35006`）。"

msgid "Django 4.2.9 release notes"
msgstr "Django 4.2.9 版本发行说明"

msgid "*January 2, 2024*"
msgstr "*2024 年 1 月 2 日*"

msgid "Django 4.2.9 fixes a bug in 4.2.8."
msgstr "Django 4.2.9 修复了 4.2.8 版本中的一个错误。"

msgid ""
"Fixed a regression in Django 4.2.8 where admin fields on the same line could "
"overflow the page and become non-interactive (:ticket:`35012`)."
msgstr ""
"修复了 Django 4.2.8 中的一个回归问题，即同一行的管理字段可能会溢出页面并变得"
"不可交互（:ticket:`35012`）。"

msgid "Django 5.0 release notes"
msgstr "Django 5.0 版本发行说明"

msgid "Welcome to Django 5.0!"
msgstr "欢迎使用 Django 5.0 ！"

msgid ""
"These release notes cover the :ref:`new features <whats-new-5.0>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-5.0>` "
"you'll want to be aware of when upgrading from Django 4.2 or earlier. We've :"
"ref:`begun the deprecation process for some features <deprecated-"
"features-5.0>`."
msgstr ""
"这些发布说明涵盖了 :ref:`新功能 <whats-new-5.0>`，以及一些在从 Django 4.2 或"
"更早版本升级时需要注意的 :ref:`不兼容变更 <backwards-incompatible-5.0>`。我们"
"已经 :ref:`开始了一些功能的弃用过程 <deprecated-features-5.0>`。"

msgid ""
"Django 5.0 supports Python 3.10, 3.11, and 3.12. We **highly recommend** and "
"only officially support the latest release of each series."
msgstr ""
"Django 5.0 支持 Python 3.10、3.11 和 3.12。我们 **强烈推荐** 并且只官方支持每"
"个系列的最新发布版本。"

msgid "The Django 4.2.x series is the last to support Python 3.8 and 3.9."
msgstr "Django 4.2.x 系列是最后一个支持 Python 3.8 和 3.9 的版本。"

msgid ""
"Following the release of Django 5.0, we suggest that third-party app authors "
"drop support for all versions of Django prior to 4.2. At that time, you "
"should be able to run your package's tests using ``python -Wd`` so that "
"deprecation warnings appear. After making the deprecation warning fixes, "
"your app should be compatible with Django 5.0."
msgstr ""
"在 Django 5.0 发布之后，我们建议第三方应用程序的作者停止对 4.2 之前的所有 "
"Django 版本的支持。在那时，你应该能够使用 ``python -Wd`` 运行你包的测试，以便"
"出现弃用警告。在进行弃用警告修复后，你的应用程序应该与 Django 5.0 兼容。"

msgid "What's new in Django 5.0"
msgstr "Django 5.0 新特性"

msgid "Facet filters in the admin"
msgstr "管理界面中的分面过滤器"

msgid ""
"Facet counts are now shown for applied filters in the admin changelist when "
"toggled on via the UI. This behavior can be changed via the new :attr:`."
"ModelAdmin.show_facets` attribute. For more information see :ref:`facet-"
"filters`."
msgstr ""
"在管理界面的 changelist 中，当通过 UI 切换开启时，现在会显示已应用过滤器的分"
"面计数。此行为可以通过新的 :attr:`.ModelAdmin.show_facets` 属性进行更改。更多"
"信息请参阅 :ref:`facet-filters`。"

msgid "Simplified templates for form field rendering"
msgstr "简化的表单字段渲染模板"

msgid ""
"Django 5.0 introduces the concept of a field group, and field group "
"templates. This simplifies rendering of the related elements of a Django "
"form field such as its label, widget, help text, and errors."
msgstr ""
"Django 5.0 引入了字段组（field group）的概念，以及字段组模板。这简化了渲染 "
"Django 表单字段的相关元素，如标签、小部件、帮助文本和错误。"

msgid "For example, the template below:"
msgstr "例如，下面的模板："

msgid "Can now be simplified to:"
msgstr "现在可以简化为："

msgid ""
":meth:`~django.forms.BoundField.as_field_group` renders fields with the "
"``\"django/forms/field.html\"`` template by default and can be customized on "
"a per-project, per-field, or per-request basis. See :ref:`reusable-field-"
"group-templates`."
msgstr ""
":meth:`~django.forms.BoundField.as_field_group` 默认使用 ``\"django/forms/"
"field.html\"`` 模板来渲染字段，并可以在每个项目、每个字段或每个请求的基础上进"
"行自定义。请参阅 :ref:`reusable-field-group-templates`。"

msgid "Database-computed default values"
msgstr "数据库计算的默认值"

msgid ""
"The new :attr:`Field.db_default <django.db.models.Field.db_default>` "
"parameter sets a database-computed default value. For example::"
msgstr ""
"新的 :attr:`Field.db_default <django.db.models.Field.db_default>` 参数设置了"
"一个数据库计算的默认值。例如："

msgid "Database generated model field"
msgstr "数据库生成的模型字段"

msgid ""
"The new :class:`~django.db.models.GeneratedField` allows creation of "
"database generated columns. This field can be used on all supported database "
"backends to create a field that is always computed from other fields. For "
"example::"
msgstr ""
"新的 :class:`~django.db.models.GeneratedField` 允许创建数据库生成的列。此字段"
"可用于所有支持的数据库后端，以创建一个始终从其他字段计算得到的字段。例如："

msgid "More options for declaring field choices"
msgstr "声明字段选择项的更多选项"

msgid ""
":attr:`.Field.choices` *(for model fields)* and :attr:`.ChoiceField.choices` "
"*(for form fields)* allow for more flexibility when declaring their values. "
"In previous versions of Django, ``choices`` should either be a list of 2-"
"tuples, or an :ref:`field-choices-enum-types` subclass, but the latter "
"required accessing the ``.choices`` attribute to provide the values in the "
"expected form::"
msgstr ""
":attr:`.Field.choices` （用于模型字段）和 :attr:`.ChoiceField.choices` （用于"
"表单字段）在声明它们的值时提供了更多的灵活性。在以前的 Django 版本中，"
"``choices`` 应该是一个包含 2 元组的列表，或者是一个 :ref:`field-choices-enum-"
"types` 的子类，但后者需要访问 ``.choices`` 属性以提供预期形式的值："

msgid ""
"Django 5.0 adds support for accepting a mapping or a callable instead of an "
"iterable, and also no longer requires ``.choices`` to be used directly to "
"expand :ref:`enumeration types <field-choices-enum-types>`::"
msgstr ""
"Django 5.0 添加了对接受映射或可调用对象的支持，而不是可迭代对象，并且不再需要"
"直接使用 ``.choices`` 来扩展 :ref:`枚举类型 <field-choices-enum-types>`："

msgid ""
"Under the hood the provided ``choices`` are normalized into a list of 2-"
"tuples as the canonical form whenever the ``choices`` value is updated. For "
"more information, please check the :ref:`model field reference on choices "
"<field-choices>`."
msgstr ""
"在内部，每当更新 ``choices`` 值时，提供的 ``choices`` 将被规范化为包含 2 元组"
"的列表，作为规范形式。有关更多信息，请查看 :ref:`模型字段参考中的 choices "
"<field-choices>`。"

msgid ""
"The new :meth:`.AdminSite.get_log_entries` method allows customizing the "
"queryset for the site's listed log entries."
msgstr ""
"新的 :meth:`.AdminSite.get_log_entries` 方法允许自定义站点列出的日志条目的查"
"询集。"

msgid ""
"The ``django.contrib.admin.AllValuesFieldListFilter``, "
"``ChoicesFieldListFilter``, ``RelatedFieldListFilter``, and "
"``RelatedOnlyFieldListFilter`` admin filters now handle multi-valued query "
"parameters."
msgstr ""
"``django.contrib.admin.AllValuesFieldListFilter``、"
"``ChoicesFieldListFilter``、``RelatedFieldListFilter`` 和 "
"``RelatedOnlyFieldListFilter`` 管理筛选器现在处理多值查询参数。"

msgid "``XRegExp`` is upgraded from version 3.2.0 to 5.1.1."
msgstr "``XRegExp`` 升级到版本 5.1.1，从之前的版本 3.2.0。"

msgid ""
"The new :meth:`.AdminSite.get_model_admin` method returns an admin class for "
"the given model class."
msgstr "新的 :meth:`.AdminSite.get_model_admin` 方法返回给定模型类的管理类。"

msgid ""
"Properties in :attr:`.ModelAdmin.list_display` now support ``boolean`` "
"attribute."
msgstr ":attr:`.ModelAdmin.list_display` 中的属性现在支持 ``boolean`` 属性。"

msgid "jQuery is upgraded from version 3.6.4 to 3.7.1."
msgstr "jQuery 升级到版本 3.7.1，从之前的版本 3.6.4。"

msgid ""
"The default iteration count for the PBKDF2 password hasher is increased from "
"600,000 to 720,000."
msgstr "PBKDF2 密码哈希器的默认迭代次数从 600,000 增加到 720,000。"

msgid ""
"The new asynchronous functions are now provided, using an ``a`` prefix: :"
"func:`django.contrib.auth.aauthenticate`, :func:`~.django.contrib.auth."
"aget_user`, :func:`~.django.contrib.auth.alogin`, :func:`~.django.contrib."
"auth.alogout`, and :func:`~.django.contrib.auth.aupdate_session_auth_hash`."
msgstr ""
"现在提供了新的异步函数，使用 ``a`` 前缀：:func:`django.contrib.auth."
"aauthenticate`、:func:`~.django.contrib.auth.aget_user`、:func:`~.django."
"contrib.auth.alogin`、:func:`~.django.contrib.auth.alogout` 和 :func:`~."
"django.contrib.auth.aupdate_session_auth_hash`。"

msgid ""
"``AuthenticationMiddleware`` now adds an :meth:`.HttpRequest.auser` "
"asynchronous method that returns the currently logged-in user."
msgstr ""
"``AuthenticationMiddleware`` 现在添加了一个 :meth:`.HttpRequest.auser` 异步方"
"法，用于返回当前已登录的用户。"

msgid ""
"The new :func:`django.contrib.auth.hashers.acheck_password` asynchronous "
"function and :meth:`.AbstractBaseUser.acheck_password` method allow "
"asynchronous checking of user passwords."
msgstr ""
"新的 :func:`django.contrib.auth.hashers.acheck_password` 异步函数和 :meth:`."
"AbstractBaseUser.acheck_password` 方法允许异步检查用户密码。"

msgid ""
":meth:`.QuerySet.prefetch_related` now supports prefetching :class:`~django."
"contrib.contenttypes.fields.GenericForeignKey` with non-homogeneous set of "
"results."
msgstr ""
":meth:`.QuerySet.prefetch_related` 现在支持在结果集中存在非同质的情况下预取 :"
"class:`~django.contrib.contenttypes.fields.GenericForeignKey`。"

msgid ""
"The new :class:`ClosestPoint() <django.contrib.gis.db.models.functions."
"ClosestPoint>` function returns a 2-dimensional point on the geometry that "
"is closest to another geometry."
msgstr ""
"新的 :class:`ClosestPoint() <django.contrib.gis.db.models.functions."
"ClosestPoint>` 函数返回几何图形上距离另一个几何图形最近的二维点。"

msgid ""
":ref:`GIS aggregates <gis-aggregation-functions>` now support the ``filter`` "
"argument."
msgstr ""
":ref:`GIS 聚合函数 <gis-aggregation-functions>` 现在支持 ``filter`` 参数。"

msgid "Support for GDAL 3.7 and GEOS 3.12 is added."
msgstr "添加了对 GDAL 3.7 和 GEOS 3.12 的支持。"

msgid ""
"The new :meth:`.GEOSGeometry.equals_identical` method allows point-wise "
"equivalence checking of geometries."
msgstr ""
"新的 :meth:`.GEOSGeometry.equals_identical` 方法允许逐点等价检查几何图形。"

msgid ""
"The new :meth:`.MessagesTestMixin.assertMessages` assertion method allows "
"testing :mod:`~django.contrib.messages` added to a :class:`response <django."
"http.HttpResponse>`."
msgstr ""
"新的 :meth:`.MessagesTestMixin.assertMessages` 断言方法允许测试添加到 :class:"
"`response <django.http.HttpResponse>` 的 :mod:`~django.contrib.messages`。"

msgid ""
"The new :attr:`~.ExclusionConstraint.violation_error_code` attribute of :"
"class:`~django.contrib.postgres.constraints.ExclusionConstraint` allows "
"customizing the ``code`` of ``ValidationError`` raised during :ref:`model "
"validation <validating-objects>`."
msgstr ""
":class:`~django.contrib.postgres.constraints.ExclusionConstraint` 的新属性 :"
"attr:`~.ExclusionConstraint.violation_error_code` 允许在 :ref:`模型验证 "
"<validating-objects>` 期间自定义 ``ValidationError`` 引发的 ``code``。"

msgid "Asynchronous views"
msgstr "异步视图"

msgid ""
"Under ASGI, ``http.disconnect`` events are now handled. This allows views to "
"perform any necessary cleanup if a client disconnects before the response is "
"generated. See :ref:`async-handling-disconnect` for more details."
msgstr ""
"在 ASGI 下，现在可以处理 ``http.disconnect`` 事件。这允许视图在客户端在生成响"
"应之前断开连接时执行任何必要的清理工作。有关更多详细信息，请参阅 :ref:`async-"
"handling-disconnect`。"

msgid ""
"The following decorators now support wrapping asynchronous view functions:"
msgstr "以下装饰器现在支持包装异步视图函数："

msgid ":func:`~django.views.decorators.cache.cache_control`"
msgstr ":func:`~django.views.decorators.cache.cache_control`"

msgid ":func:`~django.views.decorators.cache.never_cache`"
msgstr ":func:`~django.views.decorators.cache.never_cache`"

msgid ":func:`~django.views.decorators.common.no_append_slash`"
msgstr ":func:`~django.views.decorators.common.no_append_slash`"

msgid ":func:`~django.views.decorators.csrf.csrf_exempt`"
msgstr ":func:`~django.views.decorators.csrf.csrf_exempt`"

msgid ":func:`~django.views.decorators.csrf.csrf_protect`"
msgstr ":func:`~django.views.decorators.csrf.csrf_protect`"

msgid ":func:`~django.views.decorators.csrf.ensure_csrf_cookie`"
msgstr ":func:`~django.views.decorators.csrf.ensure_csrf_cookie`"

msgid ":func:`~django.views.decorators.csrf.requires_csrf_token`"
msgstr ":func:`~django.views.decorators.csrf.requires_csrf_token`"

msgid ":func:`~django.views.decorators.debug.sensitive_variables`"
msgstr ":func:`~django.views.decorators.debug.sensitive_variables`"

msgid ":func:`~django.views.decorators.debug.sensitive_post_parameters`"
msgstr ":func:`~django.views.decorators.debug.sensitive_post_parameters`"

msgid ":func:`~django.views.decorators.gzip.gzip_page`"
msgstr ":func:`~django.views.decorators.gzip.gzip_page`"

msgid ":func:`~django.views.decorators.http.condition`"
msgstr ":func:`~django.views.decorators.http.condition`"

msgid "``conditional_page()``"
msgstr "``conditional_page()``"

msgid ":func:`~django.views.decorators.http.etag`"
msgstr ":func:`~django.views.decorators.http.etag`"

msgid ":func:`~django.views.decorators.http.last_modified`"
msgstr ":func:`~django.views.decorators.http.last_modified`"

msgid ":func:`~django.views.decorators.http.require_http_methods`"
msgstr ":func:`~django.views.decorators.http.require_http_methods`"

msgid ":func:`~django.views.decorators.http.require_GET`"
msgstr ":func:`~django.views.decorators.http.require_GET`"

msgid ":func:`~django.views.decorators.http.require_POST`"
msgstr ":func:`~django.views.decorators.http.require_POST`"

msgid ":func:`~django.views.decorators.http.require_safe`"
msgstr ":func:`~django.views.decorators.http.require_safe`"

msgid ":func:`~django.views.decorators.vary.vary_on_cookie`"
msgstr ":func:`~django.views.decorators.vary.vary_on_cookie`"

msgid ":func:`~django.views.decorators.vary.vary_on_headers`"
msgstr ":func:`~django.views.decorators.vary.vary_on_headers`"

msgid "``xframe_options_deny()``"
msgstr "``xframe_options_deny()``"

msgid "``xframe_options_sameorigin()``"
msgstr "``xframe_options_sameorigin()``"

msgid "``xframe_options_exempt()``"
msgstr "``xframe_options_exempt()``"

msgid ""
":func:`~django.views.decorators.debug.sensitive_variables` and :func:"
"`~django.views.decorators.debug.sensitive_post_parameters` can now be used "
"with asynchronous functions."
msgstr ""
":func:`~django.views.decorators.debug.sensitive_variables` 和 :func:`~django."
"views.decorators.debug.sensitive_post_parameters` 现在可以与异步函数一起使"
"用。"

msgid ""
":meth:`.File.open` now passes all positional (``*args``) and keyword "
"arguments (``**kwargs``) to Python's built-in :func:`python:open`."
msgstr ""
":meth:`.File.open` 现在将所有位置参数（``*args``）和关键字参数"
"（``**kwargs``）传递给 Python 内置的 :func:`python:open`。"

msgid ""
"The new :attr:`~django.forms.URLField.assume_scheme` argument for :class:"
"`~django.forms.URLField` allows specifying a default URL scheme."
msgstr ""
"新的 :attr:`~django.forms.URLField.assume_scheme` 参数用于 :class:`~django."
"forms.URLField`，允许指定默认的 URL 方案。"

msgid "In order to improve accessibility, the following changes are made:"
msgstr "为了提高可访问性，进行了以下更改："

msgid ""
"Form fields now include the ``aria-describedby`` HTML attribute to enable "
"screen readers to associate form fields with their help text."
msgstr ""
"现在表单字段包括 ``aria-describedby`` HTML 属性，以使屏幕阅读器能够将表单字段"
"与其帮助文本关联起来。"

msgid ""
"Invalid form fields now include the ``aria-invalid=\"true\"`` HTML attribute."
msgstr "无效的表单字段现在包括 ``aria-invalid=\"true\"`` HTML 属性。"

msgid "Support and translations for the Uyghur language are now available."
msgstr "现在支持维吾尔语，并提供翻译。"

msgid ""
"Serialization of functions decorated with :func:`functools.cache` or :func:"
"`functools.lru_cache` is now supported without the need to write a custom "
"serializer."
msgstr ""
"现在支持对使用 :func:`functools.cache` 或 :func:`functools.lru_cache` 装饰的"
"函数进行序列化，无需编写自定义序列化器。"

msgid ""
"The new ``create_defaults`` argument of :meth:`.QuerySet.update_or_create` "
"and :meth:`.QuerySet.aupdate_or_create` methods allows specifying a "
"different field values for the create operation."
msgstr ""
":meth:`.QuerySet.update_or_create` 和 :meth:`.QuerySet.aupdate_or_create` 方"
"法的新 ``create_defaults`` 参数允许为创建操作指定不同的字段值。"

msgid ""
"The new ``violation_error_code`` attribute of :class:`~django.db.models."
"BaseConstraint`, :class:`~django.db.models.CheckConstraint`, and :class:"
"`~django.db.models.UniqueConstraint` allows customizing the ``code`` of "
"``ValidationError`` raised during :ref:`model validation <validating-"
"objects>`."
msgstr ""
":class:`~django.db.models.BaseConstraint`、:class:`~django.db.models."
"CheckConstraint` 和 :class:`~django.db.models.UniqueConstraint` 的新 "
"``violation_error_code`` 属性允许自定义在 :ref:`模型验证 <validating-"
"objects>` 过程中引发的 ``ValidationError`` 的 ``code``。"

msgid ""
"The :ref:`force_insert <ref-models-force-insert>` argument of :meth:`.Model."
"save` now allows specifying a tuple of parent classes that must be forced to "
"be inserted."
msgstr ""
":meth:`.Model.save` 的 :ref:`force_insert <ref-models-force-insert>` 参数现在"
"允许指定必须强制插入的父类的元组。"

msgid ""
":meth:`.QuerySet.bulk_create` and :meth:`.QuerySet.abulk_create` methods now "
"set the primary key on each model instance when the ``update_conflicts`` "
"parameter is enabled (if the database supports it)."
msgstr ""
"当启用 ``update_conflicts`` 参数时，:meth:`.QuerySet.bulk_create` 和 :meth:`."
"QuerySet.abulk_create` 方法现在会为每个模型实例设置主键（如果数据库支持的"
"话）。"

msgid ""
"The new :attr:`.UniqueConstraint.nulls_distinct` attribute allows "
"customizing the treatment of ``NULL`` values on PostgreSQL 15+."
msgstr ""
"新的 :attr:`.UniqueConstraint.nulls_distinct` 属性允许自定义在 PostgreSQL "
"15+ 上对 ``NULL`` 值的处理方式。"

msgid ""
"The new :func:`~django.shortcuts.aget_object_or_404` and :func:`~django."
"shortcuts.aget_list_or_404` asynchronous shortcuts allow asynchronous "
"getting objects."
msgstr ""
"新的 :func:`~django.shortcuts.aget_object_or_404` 和 :func:`~django."
"shortcuts.aget_list_or_404` 异步快捷方式允许异步获取对象。"

msgid ""
"The new :func:`~django.db.models.aprefetch_related_objects` function allows "
"asynchronous prefetching of model instances."
msgstr ""
"新的 :func:`~django.db.models.aprefetch_related_objects` 函数允许异步预取模型"
"实例。"

msgid ""
":meth:`.QuerySet.aiterator` now supports previous calls to "
"``prefetch_related()``."
msgstr ""
":meth:`.QuerySet.aiterator` 现在支持之前对 ``prefetch_related()`` 的调用。"

msgid ""
"On MariaDB 10.7+, ``UUIDField`` is now created as ``UUID`` column rather "
"than ``CHAR(32)`` column. See the migration guide above for more details on :"
"ref:`migrating-uuidfield`."
msgstr ""
"在 MariaDB 10.7+ 上，``UUIDField`` 现在将创建为 ``UUID`` 列，而不是 "
"``CHAR(32)`` 列。有关 :ref:`migrating-uuidfield` 的更多详细信息，请参阅迁移指"
"南。"

msgid ""
"Django now supports `oracledb`_ version 1.3.2 or higher. Support for "
"``cx_Oracle`` is deprecated as of this release and will be removed in Django "
"6.0."
msgstr ""
"Django 现在支持 `oracledb`_ 版本 1.3.2 或更高版本。从此版本开始，对 "
"``cx_Oracle`` 的支持已被弃用，并将在 Django 6.0 中移除。"

msgid ""
"The new :attr:`django.core.paginator.Paginator.error_messages` argument "
"allows customizing the error messages raised by :meth:`.Paginator.page`."
msgstr ""
"新的 :attr:`django.core.paginator.Paginator.error_messages` 参数允许自定义"
"由 :meth:`.Paginator.page` 引发的错误消息。"

msgid ""
"The new :meth:`.Signal.asend` and :meth:`.Signal.asend_robust` methods allow "
"asynchronous signal dispatch. Signal receivers may be synchronous or "
"asynchronous, and will be automatically adapted to the correct calling style."
msgstr ""
"新的 :meth:`.Signal.asend` 和 :meth:`.Signal.asend_robust` 方法允许异步信号分"
"发。信号接收器可以是同步或异步的，将自动适应正确的调用方式。"

msgid ""
"The new :tfilter:`escapeseq` template filter applies :tfilter:`escape` to "
"each element of a sequence."
msgstr ""
"新的 :tfilter:`escapeseq` 模板过滤器将 :tfilter:`escape` 应用于序列的每个元"
"素。"

msgid ""
":class:`~django.test.Client` and :class:`~django.test.AsyncClient` now "
"provide asynchronous methods, using an ``a`` prefix: :meth:`~django.test."
"Client.asession`, :meth:`~django.test.Client.alogin`, :meth:`~django.test."
"Client.aforce_login`, and :meth:`~django.test.Client.alogout`."
msgstr ""
":class:`~django.test.Client` 和 :class:`~django.test.AsyncClient` 现在提供异"
"步方法，使用 ``a`` 前缀：:meth:`~django.test.Client.asession`、:meth:"
"`~django.test.Client.alogin`、:meth:`~django.test.Client.aforce_login` 和 :"
"meth:`~django.test.Client.alogout`。"

msgid ""
":class:`~django.test.AsyncClient` now supports the ``follow`` parameter."
msgstr ":class:`~django.test.AsyncClient` 现在支持 ``follow`` 参数。"

msgid ""
":class:`~django.test.runner.DiscoverRunner` now allows showing the duration "
"of the slowest tests using the :option:`test --durations` option (available "
"on Python 3.12+)."
msgstr ""

msgid ""
"The new ``offset`` argument of :class:`~django.core.validators."
"StepValueValidator` allows specifying an offset for valid values."
msgstr ""
":class:`~django.core.validators.StepValueValidator` 的新 ``offset`` 参数允许"
"为有效值指定偏移量。"

msgid "Backwards incompatible changes in 5.0"
msgstr "5.0 版本中不向后兼容的变更"

msgid ""
"``DatabaseFeatures.supports_expression_defaults`` should be set to ``False`` "
"if the database doesn't support using database functions as defaults."
msgstr ""
"如果数据库不支持将数据库函数用作默认值，则应将 ``DatabaseFeatures."
"supports_expression_defaults`` 设置为 ``False``。"

msgid ""
"``DatabaseFeatures.supports_default_keyword_in_insert`` should be set to "
"``False`` if the database doesn't support the ``DEFAULT`` keyword in "
"``INSERT`` queries."
msgstr ""
"如果数据库不支持在 ``INSERT`` 查询中使用 ``DEFAULT`` 关键字，应将 "
"``DatabaseFeatures.supports_default_keyword_in_insert`` 设置为 ``False``。"

msgid ""
"``DatabaseFeatures.supports_default_keyword_in_bulk_insert`` should be set "
"to ``False`` if the database doesn't support the ``DEFAULT`` keyword in bulk "
"``INSERT`` queries."
msgstr ""
"如果数据库不支持在批量 ``INSERT`` 查询中使用 ``DEFAULT`` 关键字，应将 "
"``DatabaseFeatures.supports_default_keyword_in_bulk_insert`` 设置为 "
"``False``。"

msgid "Support for GDAL 2.2 and 2.3 is removed."
msgstr "移除对 GDAL 2.2 和 2.3 的支持。"

msgid "Support for GEOS 3.6 and 3.7 is removed."
msgstr "移除对 GEOS 3.6 和 3.7 的支持。"

msgid ""
"The ``django.contrib.sitemaps.ping_google()`` function and the "
"``ping_google`` management command are removed as the Google Sitemaps ping "
"endpoint is deprecated and will be removed in January 2024."
msgstr ""
"移除了 ``django.contrib.sitemaps.ping_google()`` 函数和 ``ping_google`` 管理"
"命令，因为 Google Sitemaps 的 ping 端点已被弃用，并将于 2024 年 1 月被移除。"

msgid ""
"The ``django.contrib.sitemaps.SitemapNotFound`` exception class is removed."
msgstr "移除了 ``django.contrib.sitemaps.SitemapNotFound`` 异常类。"

msgid "Dropped support for MySQL < 8.0.11"
msgstr "不再支持 MySQL 版本低于 8.0.11。"

msgid ""
"Support for pre-releases of MySQL 8.0.x series is removed. Django 5.0 "
"supports MySQL 8.0.11 and higher."
msgstr ""
"不再支持 MySQL 8.0.x 系列的预发布版本。Django 5.0 支持 MySQL 8.0.11 及更高版"
"本。"

msgid ""
"Using ``create_defaults__exact`` may now be required with ``QuerySet."
"update_or_create()``"
msgstr ""
"在使用 ``QuerySet.update_or_create()`` 时，可能现在需要使用 "
"``create_defaults__exact``。"

msgid ""
":meth:`.QuerySet.update_or_create` now supports the parameter "
"``create_defaults``. As a consequence, any models that have a field named "
"``create_defaults`` that are used with an ``update_or_create()`` should "
"specify the field in the lookup with ``create_defaults__exact``."
msgstr ""
":meth:`.QuerySet.update_or_create` 现在支持参数 ``create_defaults``。因此，任"
"何在 ``update_or_create()`` 中使用具有名为 ``create_defaults`` 的字段的模型应"
"该在查找中使用 ``create_defaults__exact`` 指定该字段。"

msgid "Migrating existing ``UUIDField`` on MariaDB 10.7+"
msgstr "迁移现有的在 MariaDB 10.7+ 上的 ``UUIDField``"

msgid ""
"On MariaDB 10.7+, ``UUIDField`` is now created as ``UUID`` column rather "
"than ``CHAR(32)`` column. As a consequence, any ``UUIDField`` created in "
"Django < 5.0 should be replaced with a ``UUIDField`` subclass backed by "
"``CHAR(32)``::"
msgstr ""
"在 MariaDB 10.7+ 中，现在将 ``UUIDField`` 创建为 ``UUID`` 列，而不再是 "
"``CHAR(32)`` 列。因此，在 Django 版本小于 5.0 中创建的任何 ``UUIDField`` 都应"
"该替换为由 ``CHAR(32)`` 支持的 ``UUIDField`` 子类::"

msgid ""
"Running the :djadmin:`makemigrations` command will generate a migration "
"containing a no-op ``AlterField`` operation."
msgstr ""
"运行 :djadmin:`makemigrations` 命令将生成一个包含无操作的 ``AlterField`` 操作"
"的迁移。"

msgid ""
"The ``instance`` argument of the undocumented ``BaseModelFormSet."
"save_existing()`` method is renamed to ``obj``."
msgstr ""
"未记录的 ``BaseModelFormSet.save_existing()`` 方法的 ``instance`` 参数已重命"
"名为 ``obj``。"

msgid "The undocumented ``django.contrib.admin.helpers.checkbox`` is removed."
msgstr "未记录的 ``django.contrib.admin.helpers.checkbox`` 已被移除。"

msgid ""
"Integer fields are now validated as 64-bit integers on SQLite to match the "
"behavior of ``sqlite3``."
msgstr ""
"在 SQLite 上，整数字段现在会被验证为 64 位整数，以匹配 ``sqlite3`` 的行为。"

msgid ""
"The undocumented ``Query.annotation_select_mask`` attribute is changed from "
"a set of strings to an ordered list of strings."
msgstr ""
"未记录的 ``Query.annotation_select_mask`` 属性已从字符串集更改为有序的字符串"
"列表。"

msgid ""
"``ImageField.update_dimension_fields()`` is no longer called on the "
"``post_init`` signal if ``width_field`` and ``height_field`` are not set."
msgstr ""
"如果未设置 ``width_field`` 和 ``height_field``，则不再在 ``post_init`` 信号上"
"调用 ``ImageField.update_dimension_fields()``。"

msgid ""
":class:`~django.db.models.functions.Now` database function now uses "
"``LOCALTIMESTAMP`` instead of ``CURRENT_TIMESTAMP`` on Oracle."
msgstr ""
"在 Oracle 上，:class:`~django.db.models.functions.Now` 数据库函数现在使用 "
"``LOCALTIMESTAMP`` 而不是 ``CURRENT_TIMESTAMP``。"

msgid ""
":attr:`.AdminSite.site_header` is now rendered in a ``<div>`` tag instead of "
"``<h1>``. Screen reader users rely on heading elements for navigation within "
"a page. Having two ``<h1>`` elements was confusing and the site header "
"wasn't helpful as it is repeated on all pages."
msgstr ""
":attr:`.AdminSite.site_header` 现在呈现在一个 ``<div>`` 标签中，而不是 "
"``<h1>``。屏幕阅读器用户依赖标题元素在页面内导航。拥有两个 ``<h1>`` 元素会引"
"起混淆，而且站点标题在所有页面上都重复出现，没有帮助。"

msgid ""
"In order to improve accessibility, the admin's main content area and header "
"content area are now rendered in a ``<main>`` and ``<header>`` tag instead "
"of ``<div>``."
msgstr ""
"为了提高可访问性，管理员的主要内容区域和页眉内容区域现在呈现在 ``<main>`` 和 "
"``<header>`` 标签中，而不是 ``<div>``。"

msgid ""
"On databases without native support for the SQL ``XOR`` operator, ``^`` as "
"the exclusive or (``XOR``) operator now returns rows that are matched by an "
"odd number of operands rather than exactly one operand. This is consistent "
"with the behavior of MySQL, MariaDB, and Python."
msgstr ""
"在没有原生支持 SQL ``XOR`` 运算符的数据库上，作为异或（``XOR``）运算符的 "
"``^`` 现在会返回被奇数个操作数匹配的行，而不是严格匹配一个操作数。这与 "
"MySQL、MariaDB 和 Python 的行为一致。"

msgid ""
"The minimum supported version of ``asgiref`` is increased from 3.6.0 to "
"3.7.0."
msgstr "``asgiref`` 的最低支持版本已从 3.6.0 增加到 3.7.0。"

msgid ""
"The minimum supported version of ``selenium`` is increased from 3.8.0 to "
"4.8.0."
msgstr "``selenium`` 的最低支持版本已从 3.8.0 增加到 4.8.0。"

msgid ""
"The ``AlreadyRegistered`` and ``NotRegistered`` exceptions are moved from "
"``django.contrib.admin.sites`` to ``django.contrib.admin.exceptions``."
msgstr ""
"``AlreadyRegistered`` 和 ``NotRegistered`` 异常已从 ``django.contrib.admin."
"sites`` 移动到 ``django.contrib.admin.exceptions``。"

msgid ""
"The minimum supported version of SQLite is increased from 3.21.0 to 3.27.0."
msgstr "SQLite 的最低支持版本已从 3.21.0 增加到 3.27.0。"

msgid "Support for ``cx_Oracle`` < 8.3 is removed."
msgstr "不再支持 ``cx_Oracle`` 版本小于 8.3。"

msgid ""
"Executing SQL queries before the app registry has been fully populated now "
"raises :exc:`RuntimeWarning`."
msgstr ""
"在应用程序注册表完全填充之前执行 SQL 查询现在会引发 :exc:`RuntimeWarning`。"

msgid ""
":exc:`~django.core.exceptions.BadRequest` is raised for non-UTF-8 encoded "
"requests with the :mimetype:`application/x-www-form-urlencoded` content "
"type. See :rfc:`1866` for more details."
msgstr ""
"对于非 UTF-8 编码的请求和 :mimetype:`application/x-www-form-urlencoded` 内容"
"类型，将引发 :exc:`~django.core.exceptions.BadRequest` 异常。有关详细信息，请"
"参阅 :rfc:`1866`。"

msgid "The minimum supported version of ``colorama`` is increased to 0.4.6."
msgstr "``colorama`` 的最低支持版本已增加到 0.4.6。"

msgid "The minimum supported version of ``docutils`` is increased to 0.19."
msgstr "``docutils`` 的最低支持版本已增加到 0.19。"

msgid ""
"Filtering querysets against overflowing integer values now always returns an "
"empty queryset. As a consequence, you may need to use "
"``ExpressionWrapper()`` to :ref:`explicitly wrap <using-f-with-annotations>` "
"arithmetic against integer fields in such cases."
msgstr ""
"过滤查询集以防止整数溢出现在始终返回空查询集。因此，在这种情况下，你可能需要"
"使用 ``ExpressionWrapper()`` 来对整数字段进行算术运算时进行 :ref:`显式包装 "
"<using-f-with-annotations>`。"

msgid "Features deprecated in 5.0"
msgstr "在 5.0 版本中废弃的功能"

msgid ""
"The ``DjangoDivFormRenderer`` and ``Jinja2DivFormRenderer`` transitional "
"form renderers are deprecated."
msgstr ""
"``DjangoDivFormRenderer`` 和 ``Jinja2DivFormRenderer`` 过渡的表单渲染器已被弃"
"用。"

msgid ""
"Passing positional arguments ``name`` and ``violation_error_message`` to :"
"class:`~django.db.models.BaseConstraint` is deprecated in favor of keyword-"
"only arguments."
msgstr ""
"将位置参数 ``name`` 和 ``violation_error_message`` 传递给 :class:`~django.db."
"models.BaseConstraint` 已被弃用，建议使用关键字参数方式。"

msgid ""
"``request`` is added to the signature of :meth:`.ModelAdmin.lookup_allowed`. "
"Support for ``ModelAdmin`` subclasses that do not accept this argument is "
"deprecated."
msgstr ""
"``request`` 已添加到 :meth:`.ModelAdmin.lookup_allowed` 的签名中。不接受此参"
"数的 ``ModelAdmin`` 子类的支持已被弃用。"

msgid ""
"The ``get_joining_columns()`` method of ``ForeignObject`` and "
"``ForeignObjectRel`` is deprecated. Starting with Django 6.0, ``django.db."
"models.sql.datastructures.Join`` will no longer fallback to "
"``get_joining_columns()``. Subclasses should implement "
"``get_joining_fields()`` instead."
msgstr ""
"``ForeignObject`` 和 ``ForeignObjectRel`` 的 ``get_joining_columns()`` 方法已"
"被弃用。从 Django 6.0 开始，``django.db.models.sql.datastructures.Join`` 将不"
"再回退到 ``get_joining_columns()``。子类应该改为实现 "
"``get_joining_fields()``。"

msgid ""
"The ``ForeignObject.get_reverse_joining_columns()`` method is deprecated."
msgstr "``ForeignObject.get_reverse_joining_columns()`` 方法已被弃用。"

msgid ""
"The default scheme for ``forms.URLField`` will change from ``\"http\"`` to "
"``\"https\"`` in Django 6.0. Set :setting:`FORMS_URLFIELD_ASSUME_HTTPS` "
"transitional setting to ``True`` to opt into assuming ``\"https\"`` during "
"the Django 5.x release cycle."
msgstr ""
"在 Django 6.0 中，``forms.URLField`` 的默认方案将从 ``\"http\"`` 更改为 "
"``\"https\"``。在 Django 5.x 发布周期中，将 :setting:"
"`FORMS_URLFIELD_ASSUME_HTTPS` 过渡设置为 ``True`` 以选择假定 ``\"https\"``。"

msgid "``FORMS_URLFIELD_ASSUME_HTTPS`` transitional setting is deprecated."
msgstr "``FORMS_URLFIELD_ASSUME_HTTPS`` 过渡设置已被弃用。"

msgid ""
"Support for calling ``format_html()`` without passing args or kwargs will be "
"removed."
msgstr "不再支持在不传递 args 或 kwargs 的情况下调用 ``format_html()``。"

msgid ""
"Support for ``cx_Oracle`` is deprecated in favor of `oracledb`_ 1.3.2+ "
"Python driver."
msgstr ""
"对 ``cx_Oracle`` 的支持已被弃用，建议使用 `oracledb`_ 1.3.2+ Python 驱动程"
"序。"

msgid ""
"``DatabaseOperations.field_cast_sql()`` is deprecated in favor of "
"``DatabaseOperations.lookup_cast()``. Starting with Django 6.0, "
"``BuiltinLookup.process_lhs()`` will no longer call ``field_cast_sql()``. "
"Third-party database backends should implement ``lookup_cast()`` instead."
msgstr ""
"``DatabaseOperations.field_cast_sql()`` 已被弃用，建议使用 "
"``DatabaseOperations.lookup_cast()``。从 Django 6.0 开始，``BuiltinLookup."
"process_lhs()`` 将不再调用 ``field_cast_sql()``。第三方数据库后端应该改为实"
"现 ``lookup_cast()``。"

msgid ""
"The ``django.db.models.enums.ChoicesMeta`` metaclass is renamed to "
"``ChoicesType``."
msgstr "``django.db.models.enums.ChoicesMeta`` 元类已更名为 ``ChoicesType``。"

msgid "The ``Prefetch.get_current_queryset()`` method is deprecated."
msgstr "``Prefetch.get_current_queryset()`` 方法已被弃用。"

msgid ""
"The ``get_prefetch_queryset()`` method of related managers and descriptors "
"is deprecated. Starting with Django 6.0, ``get_prefetcher()`` and "
"``prefetch_related_objects()`` will no longer fallback to "
"``get_prefetch_queryset()``. Subclasses should implement "
"``get_prefetch_querysets()`` instead."
msgstr ""
"相关管理器和描述符的 ``get_prefetch_queryset()`` 方法已被弃用。从 Django 6.0 "
"开始，``get_prefetcher()`` 和 ``prefetch_related_objects()`` 将不再回退到 "
"``get_prefetch_queryset()``。子类应该改为实现 ``get_prefetch_querysets()``。"

msgid "Features removed in 5.0"
msgstr "在 5.0 版本中移除的功能"

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 5.0."
msgstr "这些功能已经完成了它们的弃用周期，并在 Django 5.0 中被移除。"

msgid ""
"See :ref:`deprecated-features-4.0` for details on these changes, including "
"how to remove usage of these features."
msgstr ""
"有关这些更改的详细信息，包括如何删除对这些功能的使用，请参阅 :ref:"
"`deprecated-features-4.0`。"

msgid "The ``SERIALIZE`` test setting is removed."
msgstr "``SERIALIZE`` 测试设置已被移除。"

msgid "The undocumented ``django.utils.baseconv`` module is removed."
msgstr "未记录的 ``django.utils.baseconv`` 模块已被移除。"

msgid "The undocumented ``django.utils.datetime_safe`` module is removed."
msgstr "未记录的 ``django.utils.datetime_safe`` 模块已被移除。"

msgid ""
"The default value of the ``USE_TZ`` setting is changed from ``False`` to "
"``True``."
msgstr "``USE_TZ`` 设置的默认值已从 ``False`` 更改为 ``True``。"

msgid ""
"The default sitemap protocol for sitemaps built outside the context of a "
"request is changed from ``'http'`` to ``'https'``."
msgstr ""
"在不在请求上下文之外构建的站点地图的默认协议已从 ``'http'`` 更改为 "
"``'https'``。"

msgid ""
"The ``extra_tests`` argument for ``DiscoverRunner.build_suite()`` and "
"``DiscoverRunner.run_tests()`` is removed."
msgstr ""
"``DiscoverRunner.build_suite()`` 和 ``DiscoverRunner.run_tests()`` 的 "
"``extra_tests`` 参数已被移除。"

msgid ""
"The ``django.contrib.postgres.aggregates.ArrayAgg``, ``JSONBAgg``, and "
"``StringAgg`` aggregates no longer return ``[]``, ``[]``, and ``''``, "
"respectively, when there are no rows."
msgstr ""
"当没有行时，``django.contrib.postgres.aggregates.ArrayAgg``、``JSONBAgg`` 和 "
"``StringAgg`` 聚合现在不再返回 ``[]``、``[]`` 和 ``''``，而是返回 ``None``。"

msgid "The ``USE_L10N`` setting is removed."
msgstr "``USE_L10N`` 设置已被移除。"

msgid "The ``USE_DEPRECATED_PYTZ`` transitional setting is removed."
msgstr "``USE_DEPRECATED_PYTZ`` 过渡设置已被移除。"

msgid "Support for ``pytz`` timezones is removed."
msgstr "对于 ``pytz`` 时区的支持已被移除。"

msgid "The ``is_dst`` argument is removed from:"
msgstr "``is_dst`` 参数已从以下地方移除："

msgid "``QuerySet.datetimes()``"
msgstr "``QuerySet.datetimes()``"

msgid "``django.utils.timezone.make_aware()``"
msgstr "``django.utils.timezone.make_aware()``"

msgid "``django.db.models.functions.Trunc()``"
msgstr "``django.db.models.functions.Trunc()``"

msgid "``django.db.models.functions.TruncSecond()``"
msgstr "``django.db.models.functions.TruncSecond()``"

msgid "``django.db.models.functions.TruncMinute()``"
msgstr "``django.db.models.functions.TruncMinute()``"

msgid "``django.db.models.functions.TruncHour()``"
msgstr "``django.db.models.functions.TruncHour()``"

msgid "``django.db.models.functions.TruncDay()``"
msgstr "``django.db.models.functions.TruncDay()``"

msgid "``django.db.models.functions.TruncWeek()``"
msgstr "``django.db.models.functions.TruncWeek()``"

msgid "``django.db.models.functions.TruncMonth()``"
msgstr "``django.db.models.functions.TruncMonth()``"

msgid "``django.db.models.functions.TruncQuarter()``"
msgstr "``django.db.models.functions.TruncQuarter()``"

msgid "``django.db.models.functions.TruncYear()``"
msgstr "``django.db.models.functions.TruncYear()``"

msgid ""
"The ``django.contrib.gis.admin.GeoModelAdmin`` and ``OSMGeoAdmin`` classes "
"are removed."
msgstr ""
"``django.contrib.gis.admin.GeoModelAdmin`` 和 ``OSMGeoAdmin`` 类已被移除。"

msgid "The undocumented ``BaseForm._html_output()`` method is removed."
msgstr "未记录的 ``BaseForm._html_output()`` 方法已被移除。"

msgid ""
"The ability to return a ``str``, rather than a ``SafeString``, when "
"rendering an ``ErrorDict`` and ``ErrorList`` is removed."
msgstr ""
"在渲染 ``ErrorDict`` 和 ``ErrorList`` 时返回 ``str`` 而不是 ``SafeString`` 的"
"能力已被移除。"

msgid ""
"See :ref:`deprecated-features-4.1` for details on these changes, including "
"how to remove usage of these features."
msgstr ""
"有关这些更改的详细信息，包括如何删除对这些功能的使用，请参阅 :ref:"
"`deprecated-features-4.1`。"

msgid "The ``SitemapIndexItem.__str__()`` method is removed."
msgstr "``SitemapIndexItem.__str__()`` 方法已被移除。"

msgid "The ``CSRF_COOKIE_MASKED`` transitional setting is removed."
msgstr "``CSRF_COOKIE_MASKED`` 过渡设置已被移除。"

msgid ""
"The ``name`` argument of ``django.utils.functional.cached_property()`` is "
"removed."
msgstr ""
"``django.utils.functional.cached_property()`` 的 ``name`` 参数已被移除。"

msgid ""
"The ``opclasses`` argument of ``django.contrib.postgres.constraints."
"ExclusionConstraint`` is removed."
msgstr ""
"``django.contrib.postgres.constraints.ExclusionConstraint`` 的 ``opclasses`` "
"参数已被移除。"

msgid ""
"The undocumented ability to pass ``errors=None`` to ``SimpleTestCase."
"assertFormError()`` and ``assertFormsetError()`` is removed."
msgstr ""
"已移除将 ``errors=None`` 传递给 ``SimpleTestCase.assertFormError()`` 和 "
"``assertFormsetError()`` 的未记录能力。"

msgid "``django.contrib.sessions.serializers.PickleSerializer`` is removed."
msgstr "``django.contrib.sessions.serializers.PickleSerializer`` 已被移除。"

msgid ""
"The usage of ``QuerySet.iterator()`` on a queryset that prefetches related "
"objects without providing the ``chunk_size`` argument is no longer allowed."
msgstr ""
"不再允许在预取相关对象但没有提供 ``chunk_size`` 参数的查询集上使用 "
"``QuerySet.iterator()``。"

msgid ""
"Passing unsaved model instances to related filters is no longer allowed."
msgstr "不再允许将未保存的模型实例传递给相关的过滤器。"

msgid ""
"``created=True`` is required in the signature of ``RemoteUserBackend."
"configure_user()`` subclasses."
msgstr ""
"在 ``RemoteUserBackend.configure_user()`` 子类的签名中需要包含 "
"``created=True``。"

msgid ""
"Support for logging out via ``GET`` requests in the ``django.contrib.auth."
"views.LogoutView`` and ``django.contrib.auth.views.logout_then_login()`` is "
"removed."
msgstr ""
"已移除通过 ``GET`` 请求在 ``django.contrib.auth.views.LogoutView`` 和 "
"``django.contrib.auth.views.logout_then_login()`` 中进行登出的支持。"

msgid ""
"The ``django.utils.timezone.utc`` alias to ``datetime.timezone.utc`` is "
"removed."
msgstr ""
"``django.utils.timezone.utc`` 到 ``datetime.timezone.utc`` 的别名已被移除。"

msgid ""
"Passing a response object and a form/formset name to ``SimpleTestCase."
"assertFormError()`` and ``assertFormSetError()`` is no longer allowed."
msgstr ""
"不再允许将响应对象和表单/表单集名称传递给 ``SimpleTestCase."
"assertFormError()`` 和 ``assertFormSetError()``。"

msgid "The ``django.contrib.gis.admin.OpenLayersWidget`` is removed."
msgstr "``django.contrib.gis.admin.OpenLayersWidget`` 已被移除。"

msgid "The ``django.contrib.auth.hashers.CryptPasswordHasher`` is removed."
msgstr "``django.contrib.auth.hashers.CryptPasswordHasher`` 已被移除。"

msgid ""
"The ``\"django/forms/default.html\"`` and ``\"django/forms/formsets/default."
"html\"`` templates are removed."
msgstr ""
"``\"django/forms/default.html\"`` 和 ``\"django/forms/formsets/default."
"html\"`` 模板已被移除。"

msgid ""
"The default form and formset rendering style is changed to the div-based."
msgstr "默认的表单和表单集呈现样式已更改为基于 div 的样式。"

msgid ""
"Passing ``nulls_first=False`` or ``nulls_last=False`` to ``Expression."
"asc()`` and ``Expression.desc()`` methods, and the ``OrderBy`` expression is "
"no longer allowed."
msgstr ""
"不再允许向 ``Expression.asc()`` 和 ``Expression.desc()`` 方法以及 "
"``OrderBy`` 表达式传递 ``nulls_first=False`` 或 ``nulls_last=False``。"

msgid "Django 5.0.1 release notes"
msgstr "Django 5.0.1 版本发行说明"

msgid "Django 5.0.1 fixes several bugs in 5.0."
msgstr "Django 5.0.1 修复了 5.0 版本中的一些错误。"

msgid ""
"Reallowed, following a regression in Django 5.0, using a foreign key to a "
"model with a primary key that is not ``AutoField`` in :attr:`.ModelAdmin."
"list_filter` (:ticket:`35020`)."
msgstr ""
"重新允许，在 Django 5.0 中出现回归后，使用外键到一个不是 ``AutoField`` 的主键"
"模型在 :attr:`.ModelAdmin.list_filter` 中(:ticket:`35020`)。"

msgid ""
"Fixed a long standing bug in handling the ``RETURNING INTO`` clause that "
"caused a crash when creating a model instance with a ``GeneratedField`` "
"which ``output_field`` had backend-specific converters (:ticket:`35024`)."
msgstr ""
"修复了处理 ``RETURNING INTO`` 子句中的一个长期存在的错误，该错误在使用具有后"
"端特定转换器的 ``GeneratedField`` 的 ``output_field`` 创建模型实例时导致崩溃"
"（:ticket:`35024`）。"

msgid ""
"Fixed a regression in Django 5.0 that caused a crash of ``Model.save()`` for "
"models with both ``GeneratedField`` and ``ForeignKey`` fields (:ticket:"
"`35019`)."
msgstr ""
"修复了 Django 5.0 中的一个回归问题，该问题导致具有 ``GeneratedField`` 和 "
"``ForeignKey`` 字段的模型的 ``Model.save()`` 崩溃(:ticket:`35019`)。"

msgid ""
"Fixed a bug in Django 5.0 that caused a migration crash on Oracle < 23c when "
"adding a ``GeneratedField`` with ``output_field=BooleanField`` (:ticket:"
"`35018`)."
msgstr ""
"修复了 Django 5.0 中的一个错误，该错误在向 Oracle < 23c 添加 "
"``GeneratedField`` 并使用 ``output_field=BooleanField`` 时导致迁移崩溃(:"
"ticket:`35018`)。"

msgid ""
"Fixed a regression in Django 5.0 where admin fields on the same line could "
"overflow the page and become non-interactive (:ticket:`35012`)."
msgstr ""
"修复了 Django 5.0 中的一个回归问题，即同一行上的管理字段可能会溢出页面并变得"
"不可交互（:ticket:`35012`）。"

msgid "Added compatibility for ``oracledb`` 2.0.0 (:ticket:`35054`)."
msgstr "添加了对 ``oracledb`` 2.0.0 的兼容性 (:ticket:`35054`)."

msgid ""
"Fixed a regression in Django 5.0 where querysets referenced incorrect field "
"names from ``FilteredRelation()`` (:ticket:`35050`)."
msgstr ""
"修复了 Django 5.0 中的一个回归问题，其中查询集从 ``FilteredRelation()`` 引用"
"了不正确的字段名称(:ticket:`35050`)。"

msgid ""
"Fixed a regression in Django 5.0 that caused a system check crash when "
"``ModelAdmin.filter_horizontal`` or ``filter_vertical`` contained a reverse "
"many-to-many relation with ``related_name`` (:ticket:`35056`)."
msgstr ""
"修复了 Django 5.0 中的一个回归问题，当 ``ModelAdmin.filter_horizontal`` 或 "
"``filter_vertical`` 包含具有 ``related_name`` 的反向多对多关系时，会导致系统"
"检查崩溃(:ticket:`35056`)。"

msgid "Django 5.0.2 release notes"
msgstr "Django 5.0.2 版本发行说明"

msgid ""
"Django 5.0.2 fixes a security issue with severity \"moderate\" and several "
"bugs in 5.0.1. Also, the latest string translations from Transifex are "
"incorporated."
msgstr ""
"Django 5.0.2 修复了一个严重程度为 “中等” 的安全问题和 5.0.1 中的几个漏洞。此"
"外，还加入了 Transifex 的最新字符串翻译。"

msgid ""
"Reallowed, following a regression in Django 5.0.1, filtering against local "
"foreign keys not included in :attr:`.ModelAdmin.list_filter` (:ticket:"
"`35087`)."
msgstr ""
"重新允许，在 Django 5.0.1 中出现回归后，对不包含在 :attr:`.ModelAdmin."
"list_filter` 中的本地外键进行过滤(:ticket:`35087`)。"

msgid ""
"Fixed a regression in Django 5.0 where links in the admin had an incorrect "
"color (:ticket:`35121`)."
msgstr ""
"在 Django 5.0 中修复了一个回归问题，该问题导致管理界面中的链接颜色不正确（:"
"ticket:`35121`）。"

msgid ""
"Fixed a bug in Django 5.0 that caused a crash of ``Model.full_clean()`` on "
"models with a ``GeneratedField`` (:ticket:`35127`)."
msgstr ""
"在 Django 5.0 中修复了一个问题，导致具有 ``GeneratedField`` 的模型的 ``Model."
"full_clean()`` 崩溃(:ticket:`35127`)。"

msgid ""
"Fixed a regression in Django 5.0 that caused a crash of "
"``FilteredRelation()`` with querysets as right-hand sides (:ticket:`35135`). "
"``FilteredRelation()`` now raises a ``ValueError`` on querysets as right-"
"hand sides."
msgstr ""
"修复了 Django 5.0 中的一个回归问题，该问题导致 ``FilteredRelation()`` 与查询"
"集作为右侧引发崩溃(:ticket:`35135`)。现在，``FilteredRelation()`` 在查询集作"
"为右侧时会引发 ``ValueError``。"

msgid ""
"Fixed a regression in Django 5.0 that caused a crash of the ``dumpdata`` "
"management command when a base queryset used ``prefetch_related()`` (:ticket:"
"`35159`)."
msgstr ""
"修复了 Django 5.0 中的一个回归问题，该问题导致在基本查询集使用 "
"``prefetch_related()`` 时，``dumpdata`` 管理命令崩溃(:ticket:`35159`)。"

msgid ""
"Fixed a regression in Django 5.0 that caused the ``request_finished`` signal "
"to sometimes not be fired when running Django through an ASGI server, "
"resulting in potential resource leaks (:ticket:`35059`)."
msgstr ""
"修复了 Django 5.0 中的一个回归问题，导致在通过 ASGI 服务器运行 Django 时，"
"``request_finished`` 信号有时不会被触发，可能导致资源泄漏（:ticket:"
"`35059`）。"

msgid ""
"Fixed a bug in Django 5.0 that caused a migration crash on MySQL when adding "
"a ``BinaryField``, ``TextField``, ``JSONField``, or ``GeometryField`` with a "
"``db_default`` (:ticket:`35162`)."
msgstr ""
"修复了 Django 5.0 中的一个错误，该错误导致在 MySQL 上添加包含一个 "
"``db_default`` 的 ``BinaryField``、``TextField``、``JSONField`` 或 "
"``GeometryField`` 时会发生迁移崩溃(:ticket:`35162`)。"

msgid ""
"Fixed a bug in Django 5.0 that caused a migration crash on models with a "
"literal ``db_default`` of a complex type such as ``dict`` instance of a "
"``JSONField``. Running ``makemigrations`` might generate no-op "
"``AlterField`` operations for fields using ``db_default`` (:ticket:`35149`)."
msgstr ""
"修复了 Django 5.0 中的一个错误，该错误导致具有复杂类型（例如 ``JSONField`` "
"的 ``dict`` 实例）的文字 ``db_default`` 的模型迁移崩溃。运行 "
"``makemigrations`` 可能会为使用 ``db_default`` 的字段生成无操作的 "
"``AlterField`` 操作（:ticket:`35149`）。"

msgid "Django 5.0.3 release notes"
msgstr "Django 5.0.3 版本发行说明"

msgid ""
"Django 5.0.3 fixes a security issue with severity \"moderate\" and several "
"bugs in 5.0.2."
msgstr ""
"Django 5.0.3 修复了一些\"中等\"严重性的安全问题，以及 5.0.2 版本中的几个错"
"误。"

msgid ""
"Fixed a regression in Django 5.0.2 where ``intcomma`` template filter could "
"return a leading comma for string representation of floats (:ticket:`35172`)."
msgstr ""
"修复了 Django 5.0.2 中的一个回归问题，即 ``intcomma`` 模板过滤器可能在浮点数"
"的字符串表示中返回一个前导逗号（:ticket:`35172`）。"

msgid ""
"Fixed a bug in Django 5.0 that caused a crash of ``Signal.asend()`` and "
"``asend_robust()`` when all receivers were asynchronous functions (:ticket:"
"`35174`)."
msgstr ""
"修复了 Django 5.0 中的一个错误，导致当所有接收器都是异步函数时，``Signal."
"asend()`` 和 ``asend_robust()`` 崩溃（:ticket:`35174`）。"

msgid ""
"Fixed a regression in Django 5.0.1 where :meth:`.ModelAdmin.lookup_allowed` "
"would prevent filtering against foreign keys using lookups like ``__isnull`` "
"when the field was not included in :attr:`.ModelAdmin.list_filter` (:ticket:"
"`35173`)."
msgstr ""
"修复了 Django 5.0.1 中的一个回归问题，即当字段未包含在 :attr:`.ModelAdmin."
"list_filter` 中时，:meth:`.ModelAdmin.lookup_allowed` 将阻止使用类似 "
"``__isnull`` 的查找对外键进行过滤（:ticket:`35173`）。"

msgid ""
"Fixed a regression in Django 5.0 that caused a crash of "
"``@sensitive_variables`` and ``@sensitive_post_parameters`` decorators on "
"functions loaded from ``.pyc`` files (:ticket:`35187`)."
msgstr ""
"修复了 Django 5.0 中的一个回归问题，即 ``@sensitive_variables`` 和 "
"``@sensitive_post_parameters`` 装饰器在从 ``.pyc`` 文件加载的函数上导致崩溃"
"（:ticket:`35187`）。"

msgid ""
"Fixed a regression in Django 5.0 that caused a crash when reloading a test "
"database and a base queryset for a base manager used ``prefetch_related()`` "
"(:ticket:`35238`)."
msgstr ""
"修复了 Django 5.0 中的一个回归问题，即当重新加载测试数据库并且基本管理器的基"
"本查询集使用了 ``prefetch_related()`` 时导致崩溃（:ticket:`35238`）。"

msgid ""
"Fixed a bug in Django 5.0 where facet filters in the admin would crash on a "
"``SimpleListFilter`` using a queryset without primary keys (:ticket:`35198`)."
msgstr ""
"修复了 Django 5.0 中的一个错误，即在管理中使用一个没有主键的查询集的 "
"``SimpleListFilter`` 会导致面向方面的筛选器崩溃（:ticket:`35198`）。"

msgid "Django 5.0.4 release notes"
msgstr "Django 5.0.4 版本发行说明"

msgid "*April 3, 2024*"
msgstr "2024年 4 月 3 日"

msgid "Django 5.0.4 fixes several bugs in 5.0.3."
msgstr "Django 5.0.4 修复了 5.0.3 版本中的多个错误。"

msgid ""
"Fixed a bug in Django 5.0 that caused a crash of ``Model.full_clean()`` on "
"fields with expressions in ``db_default``. As a consequence, ``Model."
"full_clean()`` no longer validates for empty values in fields with "
"``db_default`` (:ticket:`35223`)."
msgstr ""
"修复了 Django 5.0 中的一个错误，导致在具有 ``db_default`` 中的表达式的字段上"
"调用 ``Model.full_clean()`` 时崩溃。因此，``Model.full_clean()`` 不再验证具"
"有 ``db_default`` 的字段中的空值（:ticket:`35223`）。"

msgid ""
"Fixed a regression in Django 5.0 where the ``AdminFileWidget`` could be "
"rendered with two ``id`` attributes on the \"Clear\" checkbox (:ticket:"
"`35273`)."
msgstr ""
"修复了 Django 5.0 中的一个回归问题，即 ``AdminFileWidget`` 可能会在“清除”复选"
"框上呈现两个 ``id`` 属性（:ticket:`35273`）。"

msgid ""
"Fixed a bug in Django 5.0 that caused a migration crash on PostgreSQL 15+ "
"when adding a partial ``UniqueConstraint`` with ``nulls_distinct`` (:ticket:"
"`35329`)."
msgstr ""
"修复了 Django 5.0 中的一个回归问题，该问题导致在同一迁移中添加包含"
"``UniqueConstraint``的部分时，在 PostgreSQL 15+ 上发生迁移崩溃 (:ticket:"
"`35329`)。"

msgid ""
"Fixed a crash in Django 5.0 when performing queries involving table aliases "
"and lookups on a ``GeneratedField`` of the aliased table (:ticket:`35344`)."
msgstr ""
"修复了在 Django 5.0 中执行涉及表别名的查询以及在别名表“GenerateField”上进行查"
"找时发生的崩溃。 (:ticket:`35344`) "

msgid ""
"Fixed a bug in Django 5.0 that caused a migration crash when adding a "
"``GeneratedField`` relying on the ``__contains`` or ``__icontains`` lookups "
"or using a ``Value`` containing a ``\"%\"`` (:ticket:`35336`)."
msgstr ""
"修复了 Django 5.0 中的一个错误，该错误在添加依赖于 __contains 或 __icontains "
"查找或使用包含“%”的 Value 时导致迁移崩溃 ` (:ticket:`35336`)."

msgid "Django 5.0.5 release notes"
msgstr "Django 5.0.5 版本发行说明"

msgid "Django 5.0.5 fixes several bugs in 5.0.4."
msgstr "Django 5.0.5 修复了 5.0.4 版本中的多个错误。"

msgid ""
"Fixed a bug in Django 5.0 that caused a crash of ``Model.save()`` when "
"creating an instance of a model with a ``GeneratedField`` and providing a "
"primary key (:ticket:`35350`)."
msgstr ""
"修复了 Django 5.0 中的一个错误，该错误在使用“GenerateField”创建模型实例并提供"
"主键时导致“Model.save()”崩溃(:ticket:`35350`)."

msgid ""
"Fixed a compatibility issue encountered in Python 3.11.9+ and 3.12.3+ when "
"validating email max line lengths with content decoded using the "
"``surrogateescape`` error handling scheme (:ticket:`35361`)."
msgstr ""
"修复了在使用“surrogateescape”错误处理方案解码的内容验证电子邮件最大行长度时"
"在 Python 3.11.9+ 和 3.12.3+ 中遇到的兼容性问题 (:ticket:`35361`)"

msgid ""
"Fixed a bug in Django 5.0 that caused a crash when applying migrations "
"including alterations to ``GeneratedField`` such as setting "
"``db_index=True`` on SQLite (:ticket:`35373`)."
msgstr ""
"修复了 Django 5.0 中的一个错误，该错误在应用迁移时导致崩溃，包括"
"对“GeneratedField”的更改，例如在 SQLite 上设置“db_index=True”(:ticket:"
"`35373`)."

msgid ""
"Allowed importing ``aprefetch_related_objects`` from ``django.db.models`` (:"
"ticket:`35392`)."
msgstr ""
"允许从“django.db.models”导入“aprefetch_related_objects””(:ticket:`35392`)."

msgid ""
"Fixed a bug in Django 5.0 that caused a migration crash when a "
"``GeneratedField`` was added before any of the referenced fields from its "
"``expression`` definition (:ticket:`35359`)."
msgstr ""
"修复了Django 5.0中的一个错误，当在其“expression”定义中的任何引用字段之前添"
"加“GeneratedField”时，会导致迁移崩溃 (:ticket:`35359`)。"

msgid ""
"Fixed a bug in Django 5.0 that caused a migration crash when altering a "
"``GeneratedField`` referencing a renamed field (:ticket:`35422`)."
msgstr ""
"修复了Django 5.0中的一个错误，该错误在更改引用重命名字段的“GeneratedField”时"
"导致迁移崩溃(:ticket:`35422`)。"

msgid ""
"Fixed a bug in Django 5.0 where the ``querysets`` argument of "
"``GenericPrefetch`` was not required (:ticket:`35426`)."
msgstr ""
"修复了Django 5.0中不需要“GenericPrefetch”的“querysets”参数的错误 (:ticket:"
"`35426`)。"

msgid "Django 5.0.6 release notes"
msgstr "Django 5.0.6 版本发行说明"

msgid "Django 5.0.6 fixes a packaging error in 5.0.5."
msgstr "Django 5.0.6 修复了 5.0.5 版本中的一个打包错误。"

msgid "Django 5.0.7 release notes"
msgstr "Django 5.0.7 版本发行说明"

msgid ""
"Django 5.0.7 fixes two security issues with severity \"moderate\", two "
"security issues with severity \"low\", and one bug in 5.0.6."
msgstr ""

msgid ""
"Fixed a bug in Django 5.0 that caused a crash of ``Model.full_clean()`` on "
"unsaved model instances with a ``GeneratedField`` and certain defined :attr:"
"`Meta.constraints <django.db.models.Options.constraints>` (:ticket:`35560`)."
msgstr ""

msgid "Django 5.0.8 release notes"
msgstr ""

msgid ""
"Django 5.0.8 fixes three security issues with severity \"moderate\", one "
"security issue with severity \"high\", and several bugs in 5.0.7."
msgstr ""

msgid ""
"Added missing validation for ``UniqueConstraint(nulls_distinct=False)`` when "
"using ``*expressions`` (:ticket:`35594`)."
msgstr ""

msgid ""
"Fixed a regression in Django 5.0 where ``ModelAdmin.action_checkbox`` could "
"break the admin changelist HTML page when rendering a model instance with a "
"``__html__`` method (:ticket:`35606`)."
msgstr ""

msgid ""
"Fixed a crash when creating a model with a ``Field.db_default`` and a ``Meta."
"constraints`` constraint composed of ``__endswith``, ``__startswith``, or "
"``__contains`` lookups (:ticket:`35625`)."
msgstr ""

msgid ""
"Fixed a regression in Django 5.0.7 that caused a crash in "
"``LocaleMiddleware`` when processing a language code over 500 characters (:"
"ticket:`35627`)."
msgstr ""

msgid ""
"Fixed a bug in Django 5.0 that caused a system check crash when ``ModelAdmin."
"date_hierarchy`` was a ``GeneratedField`` with an ``output_field`` of "
"``DateField`` or ``DateTimeField`` (:ticket:`35628`)."
msgstr ""

msgid ""
"Fixed a bug in Django 5.0 which caused constraint validation to either crash "
"or incorrectly raise validation errors for constraints referring to fields "
"using ``Field.db_default`` (:ticket:`35638`)."
msgstr ""

msgid ""
"Fixed a crash in Django 5.0 when saving a model containing a ``FileField`` "
"with a ``db_default`` set (:ticket:`35657`)."
msgstr ""

msgid "Django 5.0.9 release notes"
msgstr ""

msgid ""
"Django 5.0.9 fixes one security issue with severity \"moderate\" and one "
"security issue with severity \"low\" in 5.0.8."
msgstr ""

msgid "Django 5.1 release notes"
msgstr ""

msgid "*August 7, 2024*"
msgstr ""

msgid "Welcome to Django 5.1!"
msgstr ""

msgid ""
"These release notes cover the :ref:`new features <whats-new-5.1>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-5.1>` "
"you should be aware of when upgrading from Django 5.0 or earlier. We've :ref:"
"`begun the deprecation process for some features <deprecated-features-5.1>`."
msgstr ""

msgid ""
"Django 5.1 supports Python 3.10, 3.11, 3.12, and 3.13 (as of 5.1.3). We "
"**highly recommend** and only officially support the latest release of each "
"series."
msgstr ""

msgid "What's new in Django 5.1"
msgstr ""

msgid "``{% querystring %}`` template tag"
msgstr ""

msgid ""
"Django 5.1 introduces the :ttag:`{% querystring %} <querystring>` template "
"tag, simplifying the modification of query parameters in URLs, making it "
"easier to generate links that maintain existing query parameters while "
"adding or changing specific ones."
msgstr ""

msgid ""
"For instance, navigating pagination and query strings in templates can be "
"cumbersome. Consider this template fragment that dynamically generates a URL "
"for navigating to the next page within a paginated view:"
msgstr ""

msgid ""
"When switching to using this new template tag, the above magically becomes:"
msgstr ""

msgid "PostgreSQL Connection Pools"
msgstr ""

msgid ""
"Django 5.1 also introduces :ref:`connection pool <postgresql-pool>` support "
"for PostgreSQL. As the time to establish a new connection can be relatively "
"long, keeping connections open can reduce latency."
msgstr ""

msgid ""
"To use a connection pool with `psycopg`_, you can set the ``\"pool\"`` "
"option inside :setting:`OPTIONS` to be a dict to be passed to :class:"
"`~psycopg:psycopg_pool.ConnectionPool`, or to ``True`` to use the "
"``ConnectionPool`` defaults::"
msgstr ""

msgid "Middleware to require authentication by default"
msgstr ""

msgid ""
"The new :class:`~django.contrib.auth.middleware.LoginRequiredMiddleware` "
"redirects all unauthenticated requests to a login page. Views can allow "
"unauthenticated requests by using the new :func:`~django.contrib.auth."
"decorators.login_not_required` decorator."
msgstr ""

msgid ""
"``LoginRequiredMiddleware`` respects the ``login_url`` and "
"``redirect_field_name`` values set via the :func:`~.django.contrib.auth."
"decorators.login_required` decorator, but does not support setting "
"``login_url`` or ``redirect_field_name`` via the :class:`~django.contrib."
"auth.mixins.LoginRequiredMixin`."
msgstr ""

msgid ""
"To enable this, add ``\"django.contrib.auth.middleware."
"LoginRequiredMiddleware\"`` to your :setting:`MIDDLEWARE` setting."
msgstr ""

msgid ""
":attr:`.ModelAdmin.list_display` now supports using ``__`` lookups to list "
"fields from related models."
msgstr ""

msgid ""
"The default iteration count for the PBKDF2 password hasher is increased from "
"720,000 to 870,000."
msgstr ""

msgid ""
"The default ``parallelism`` of the ``ScryptPasswordHasher`` is increased "
"from 1 to 5, to follow OWASP recommendations."
msgstr ""

msgid ""
"The new :class:`~django.contrib.auth.forms.AdminUserCreationForm` and the "
"existing :class:`~django.contrib.auth.forms.AdminPasswordChangeForm` now "
"support disabling password-based authentication by setting an unusable "
"password on form save. This is now available in the admin when visiting the "
"user creation and password change pages."
msgstr ""

msgid ""
":func:`~.django.contrib.auth.decorators.login_required`, :func:`~.django."
"contrib.auth.decorators.permission_required`, and :func:`~.django.contrib."
"auth.decorators.user_passes_test` decorators now support wrapping "
"asynchronous view functions."
msgstr ""

msgid ""
"``ReadOnlyPasswordHashWidget`` now includes a button to reset the user's "
"password, which replaces the link previously embedded in the "
"``ReadOnlyPasswordHashField``'s help text, improving the overall "
"accessibility of the :class:`~django.contrib.auth.forms.UserChangeForm`."
msgstr ""

msgid ""
":class:`~django.contrib.gis.db.models.functions.BoundingCircle` is now "
"supported on SpatiaLite 5.1+."
msgstr ""

msgid ""
":class:`~django.contrib.gis.db.models.Collect` is now supported on MySQL "
"8.0.24+."
msgstr ""

msgid ""
":class:`~django.contrib.gis.geoip2.GeoIP2` now allows querying using :class:"
"`ipaddress.IPv4Address` or :class:`ipaddress.IPv6Address` objects."
msgstr ""

msgid ""
":meth:`.GeoIP2.country` now exposes the ``continent_code``, "
"``continent_name``, and ``is_in_european_union`` values."
msgstr ""

msgid ""
":meth:`.GeoIP2.city` now exposes the ``accuracy_radius`` and ``region_name`` "
"values. In addition, the ``dma_code`` and ``region`` values are now exposed "
"as ``metro_code`` and ``region_code``, but the previous keys are also "
"retained for backward compatibility."
msgstr ""

msgid ":class:`~django.contrib.gis.measure.Area` now supports the ``ha`` unit."
msgstr ""

msgid ""
"The new :attr:`.OGRGeometry.is_3d` attribute allows checking if a geometry "
"has a ``Z`` coordinate dimension."
msgstr ""

msgid ""
"The new :meth:`.OGRGeometry.set_3d` method allows addition and removal of "
"the ``Z`` coordinate dimension."
msgstr ""

msgid ""
":class:`~django.contrib.gis.gdal.OGRGeometry`, :class:`~django.contrib.gis."
"gdal.Point`, :class:`~django.contrib.gis.gdal.LineString`, :class:`~django."
"contrib.gis.gdal.Polygon`, and :class:`~django.contrib.gis.gdal."
"GeometryCollection` and its subclasses now support measured geometries via "
"the new :attr:`.OGRGeometry.is_measured` and ``m`` properties, and the :meth:"
"`.OGRGeometry.set_measured` method."
msgstr ""

msgid ""
":attr:`.OGRGeometry.centroid` is now available on all supported geometry "
"types."
msgstr ""

msgid ""
":class:`FromWKB() <django.contrib.gis.db.models.functions.FromWKB>` and :"
"class:`FromWKT() <django.contrib.gis.db.models.functions.FromWKT>` functions "
"now support the optional ``srid`` argument (except for Oracle where it is "
"ignored)."
msgstr ""

msgid ""
":class:`~django.contrib.postgres.indexes.BTreeIndex` now supports the "
"``deduplicate_items`` parameter."
msgstr ""

msgid ""
":class:`django.contrib.sessions.backends.cached_db.SessionStore` now handles "
"exceptions when storing session information in the cache, logging proper "
"error messages with their traceback via the newly added :ref:`sessions "
"logger <django-contrib-sessions-logger>`."
msgstr ""

msgid ""
":class:`django.contrib.sessions.backends.base.SessionBase` and all built-in "
"session engines now provide async API. The new asynchronous methods all have "
"``a`` prefixed names, e.g. ``aget()``, ``akeys()``, or ``acycle_key()``."
msgstr ""

msgid ""
"``\"init_command\"`` option is now supported in :setting:`OPTIONS` on SQLite "
"to allow specifying :ref:`pragma options <sqlite-init-command>` to set upon "
"connection."
msgstr ""

msgid ""
"``\"transaction_mode\"`` option is now supported in :setting:`OPTIONS` on "
"SQLite to allow specifying the :ref:`sqlite-transaction-behavior`."
msgstr ""

msgid ""
"``\"pool\"`` option is now supported in :setting:`OPTIONS` on PostgreSQL to "
"allow using :ref:`connection pools <postgresql-pool>`."
msgstr ""

msgid ""
"In order to improve accessibility, the technical 404 and 500 error pages now "
"use HTML landmark elements for the header, footer, and main content areas."
msgstr ""

msgid ""
"The :attr:`~django.core.files.storage.FileSystemStorage.allow_overwrite` "
"parameter of :class:`~django.core.files.storage.FileSystemStorage` now "
"allows saving new files over existing ones."
msgstr ""

msgid ""
"In order to improve accessibility and enable screen readers to associate "
"fieldsets with their help text, the form fieldset now includes the ``aria-"
"describedby`` HTML attribute."
msgstr ""

msgid ""
"The :djadmin:`makemigrations` command now displays meaningful symbols for "
"each operation to highlight :class:`operation categories <django.db."
"migrations.operations.base.OperationCategory>`."
msgstr ""

msgid ""
"The new ``Operation.category`` attribute allows specifying an :class:"
"`operation category <django.db.migrations.operations.base."
"OperationCategory>` used by the :djadmin:`makemigrations` to display a "
"meaningful symbol for the operation."
msgstr ""

msgid ""
":meth:`.QuerySet.explain` now supports the ``generic_plan`` option on "
"PostgreSQL 16+."
msgstr ""

msgid ""
":class:`~django.db.models.expressions.RowRange` now accepts positive "
"integers for the ``start`` argument and negative integers for the ``end`` "
"argument."
msgstr ""

msgid ""
"The new ``exclusion`` argument of :class:`~django.db.models.expressions."
"RowRange` and :class:`~django.db.models.expressions.ValueRange` allows "
"excluding rows, groups, and ties from the window frames."
msgstr ""

msgid ""
":meth:`.QuerySet.order_by` now supports ordering by annotation transforms "
"such as ``JSONObject`` keys and ``ArrayAgg`` indices."
msgstr ""

msgid ""
":class:`F() <django.db.models.F>` and :class:`OuterRef() <django.db.models."
"OuterRef>` expressions that output :class:`~django.db.models.CharField`, :"
"class:`~django.db.models.EmailField`, :class:`~django.db.models.SlugField`, :"
"class:`~django.db.models.URLField`, :class:`~django.db.models.TextField`, "
"or :class:`~django.contrib.postgres.fields.ArrayField` can now be :ref:"
"`sliced <slicing-using-f>`."
msgstr ""

msgid ""
"The new ``from_queryset`` argument of :meth:`.Model.refresh_from_db` and :"
"meth:`.Model.arefresh_from_db`  allows customizing the queryset used to "
"reload a model's value. This can be used to lock the row before reloading or "
"to select related objects."
msgstr ""

msgid ""
"The new :attr:`.Expression.constraint_validation_compatible` attribute "
"allows specifying that the expression should be ignored during a constraint "
"validation."
msgstr ""

msgid ""
"Custom tags may now set extra data on the ``Parser`` object that will later "
"be made available on the ``Template`` instance. Such data may be used, for "
"example, by the template loader, or other template clients."
msgstr ""

msgid ""
":ref:`Template engines <field-checking>` now implement a ``check()`` method "
"that is already registered with the check framework."
msgstr ""

msgid ""
":meth:`~django.test.SimpleTestCase.assertContains`, :meth:`~django.test."
"SimpleTestCase.assertNotContains`, and :meth:`~django.test.SimpleTestCase."
"assertInHTML` assertions now add haystacks to assertion error messages."
msgstr ""

msgid ""
"The :class:`~django.test.RequestFactory`, :class:`~django.test."
"AsyncRequestFactory`, :class:`~django.test.Client`, and :class:`~django.test."
"AsyncClient` classes now support the ``query_params`` parameter, which "
"accepts a dictionary of query string keys and values. This allows setting "
"query strings on any HTTP methods more easily."
msgstr ""

msgid ""
"The new :meth:`.SimpleTestCase.assertNotInHTML` assertion allows testing "
"that an HTML fragment is not contained in the given HTML haystack."
msgstr ""

msgid ""
"In order to enforce test isolation, database connections inside threads are "
"no longer allowed in :class:`~django.test.SimpleTestCase`."
msgstr ""

msgid ""
"The new :class:`~django.core.validators.DomainNameValidator` validates "
"domain names, including internationalized domain names. The new :func:"
"`~django.core.validators.validate_domain_name` function returns an instance "
"of :class:`~django.core.validators.DomainNameValidator`."
msgstr ""

msgid "Backwards incompatible changes in 5.1"
msgstr ""

msgid "Support for PostGIS 2.5 is removed."
msgstr ""

msgid "Support for PROJ < 6 is removed."
msgstr ""

msgid "Support for GDAL 2.4 is removed."
msgstr ""

msgid ""
":class:`~django.contrib.gis.geoip2.GeoIP2` no longer opens both city and "
"country databases when a directory path is provided, preferring the city "
"database, if it is available. The country database is a subset of the city "
"database and both are not typically needed. If you require use of the "
"country database when in the same directory as the city database, explicitly "
"pass the country database path to the constructor."
msgstr ""

msgid "Dropped support for MariaDB 10.4"
msgstr ""

msgid ""
"Upstream support for MariaDB 10.4 ends in June 2024. Django 5.1 supports "
"MariaDB 10.5 and higher."
msgstr ""

msgid "Dropped support for PostgreSQL 12"
msgstr ""

msgid ""
"Upstream support for PostgreSQL 12 ends in November 2024. Django 5.1 "
"supports PostgreSQL 13 and higher."
msgstr ""

msgid ""
"In order to improve accessibility, the admin's changelist filter is now "
"rendered in a ``<nav>`` tag instead of a ``<div>``."
msgstr ""

msgid ""
"In order to improve accessibility, the admin's footer is now rendered in a "
"``<footer>`` tag instead of a ``<div>``, and also moved below the ``<div "
"id=\"main\">`` element."
msgstr ""

msgid ""
"In order to improve accessibility, the expandable widget used for :attr:"
"`ModelAdmin.fieldsets <django.contrib.admin.ModelAdmin.fieldsets>` and :attr:"
"`InlineModelAdmin.fieldsets <django.contrib.admin.InlineModelAdmin>`, when "
"the fieldset has a name and use the ``collapse`` class, now includes "
"``<details>`` and ``<summary>`` elements."
msgstr ""

msgid ""
"The JavaScript file ``collapse.js`` is removed since it is no longer needed "
"in the Django admin site."
msgstr ""

msgid ""
":meth:`.SimpleTestCase.assertURLEqual` and :meth:`~django.test."
"SimpleTestCase.assertInHTML` now add ``\": \"`` to the ``msg_prefix``. This "
"is consistent with the behavior of other assertions."
msgstr ""

msgid ""
"``django.utils.text.Truncator`` used by :tfilter:`truncatechars_html` and :"
"tfilter:`truncatewords_html` template filters now uses :py:class:`html."
"parser.HTMLParser` subclasses. This results in a more robust and faster "
"operation, but there may be small differences in the output."
msgstr ""

msgid ""
"The undocumented ``django.urls.converters.get_converter()`` function is "
"removed."
msgstr ""

msgid ""
"The minimum supported version of SQLite is increased from 3.27.0 to 3.31.0."
msgstr ""

msgid ""
":class:`~django.db.models.FileField` now raises a :class:`~django.core."
"exceptions.FieldError` when saving a file without a ``name``."
msgstr ""

msgid ""
"``ImageField.update_dimension_fields(force=True)`` is no longer called after "
"saving the image to storage. If your storage backend resizes images, the "
"``width_field`` and ``height_field`` will not match the width and height of "
"the image."
msgstr ""

msgid ""
"The minimum supported version of ``asgiref`` is increased from 3.7.0 to "
"3.8.1."
msgstr ""

msgid "Features deprecated in 5.1"
msgstr ""

msgid ""
"The ``ModelAdmin.log_deletion()`` and ``LogEntryManager.log_action()`` "
"methods are deprecated. Subclasses should implement ``ModelAdmin."
"log_deletions()`` and  ``LogEntryManager.log_actions()`` instead."
msgstr ""

msgid ""
"The undocumented ``django.utils.itercompat.is_iterable()`` function and the "
"``django.utils.itercompat`` module are deprecated. Use ``isinstance(..., "
"collections.abc.Iterable)`` instead."
msgstr ""

msgid ""
"The ``django.contrib.gis.geoip2.GeoIP2.coords()`` method is deprecated. Use "
"``django.contrib.gis.geoip2.GeoIP2.lon_lat()`` instead."
msgstr ""

msgid ""
"The ``django.contrib.gis.geoip2.GeoIP2.open()`` method is deprecated. Use "
"the :class:`~django.contrib.gis.geoip2.GeoIP2` constructor instead."
msgstr ""

msgid ""
"Passing positional arguments to :meth:`.Model.save` and :meth:`.Model.asave` "
"is deprecated in favor of keyword-only arguments."
msgstr ""

msgid ""
"Setting ``django.contrib.gis.gdal.OGRGeometry.coord_dim`` is deprecated. "
"Use :meth:`~django.contrib.gis.gdal.OGRGeometry.set_3d` instead."
msgstr ""

msgid ""
"Overriding existing converters with ``django.urls.register_converter()`` is "
"deprecated."
msgstr ""

msgid ""
"The ``check`` keyword argument of ``CheckConstraint`` is deprecated in favor "
"of ``condition``."
msgstr ""

msgid ""
"The undocumented ``OS_OPEN_FLAGS`` property of :class:`~django.core.files."
"storage.FileSystemStorage` is deprecated. To allow overwriting files in "
"storage, set the new :attr:`~django.core.files.storage.FileSystemStorage."
"allow_overwrite` option to ``True`` instead."
msgstr ""

msgid ""
"The ``get_cache_name()`` method of ``FieldCacheMixin`` is deprecated in "
"favor of the ``cache_name`` cached property."
msgstr ""

msgid "Features removed in 5.1"
msgstr ""

msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 5.1."
msgstr ""

msgid ""
"See :ref:`deprecated-features-4.2` for details on these changes, including "
"how to remove usage of these features."
msgstr ""

msgid "The ``BaseUserManager.make_random_password()`` method is removed."
msgstr ""

msgid "The model's ``Meta.index_together`` option is removed."
msgstr ""

msgid "The ``length_is`` template filter is removed."
msgstr ""

msgid ""
"The ``django.contrib.auth.hashers.SHA1PasswordHasher``, ``django.contrib."
"auth.hashers.UnsaltedSHA1PasswordHasher``, and ``django.contrib.auth.hashers."
"UnsaltedMD5PasswordHasher`` are removed."
msgstr ""

msgid ""
"The model ``django.contrib.postgres.fields.CICharField``, ``django.contrib."
"postgres.fields.CIEmailField``, and ``django.contrib.postgres.fields."
"CITextField`` are removed, except for support in historical migrations."
msgstr ""

msgid "The ``django.contrib.postgres.fields.CIText`` mixin is removed."
msgstr ""

msgid ""
"The ``map_width`` and ``map_height`` attributes of ``BaseGeometryWidget`` "
"are removed."
msgstr ""

msgid "The ``SimpleTestCase.assertFormsetError()`` method is removed."
msgstr ""

msgid "The ``TransactionTestCase.assertQuerysetEqual()`` method is removed."
msgstr ""

msgid ""
"Support for passing encoded JSON string literals to ``JSONField`` and "
"associated lookups and expressions is removed."
msgstr ""

msgid ""
"Support for passing positional arguments to ``Signer`` and "
"``TimestampSigner`` is removed."
msgstr ""

msgid ""
"The ``DEFAULT_FILE_STORAGE`` and ``STATICFILES_STORAGE`` settings is removed."
msgstr ""

msgid ""
"The ``django.core.files.storage.get_storage_class()`` function is removed."
msgstr ""

msgid "Django 5.1.1 release notes"
msgstr ""

msgid ""
"Django 5.1.1 fixes one security issue with severity \"moderate\", one "
"security issue with severity \"low\", and several bugs in 5.1."
msgstr ""

msgid ""
"Fixed a regression in Django 5.1 that caused a crash of ``Window()`` when "
"passing an empty sequence to the ``order_by`` parameter, and a crash of "
"``Prefetch()`` for a sliced queryset without ordering (:ticket:`35665`)."
msgstr ""

msgid ""
"Fixed a regression in Django 5.1 where a new ``usable_password`` field was "
"included in :class:`~django.contrib.auth.forms.BaseUserCreationForm` (and "
"children). A new :class:`~django.contrib.auth.forms.AdminUserCreationForm` "
"including this field was added, isolating the feature to the admin where it "
"was intended (:ticket:`35678`)."
msgstr ""

msgid ""
"Adjusted the deprecation warning ``stacklevel`` in :meth:`.Model.save` and :"
"meth:`.Model.asave` to correctly point to the offending call site (:ticket:"
"`35060`)."
msgstr ""

msgid ""
"Adjusted the deprecation warning ``stacklevel`` when using ``OS_OPEN_FLAGS`` "
"in :class:`~django.core.files.storage.FileSystemStorage` to correctly point "
"to the offending call site (:ticket:`35326`)."
msgstr ""

msgid ""
"Adjusted the deprecation warning ``stacklevel`` in ``FieldCacheMixin."
"get_cache_name()`` to correctly point to the offending call site (:ticket:"
"`35405`)."
msgstr ""

msgid ""
"Restored, following a regression in Django 5.1, the ability to override the "
"timezone and role setting behavior used within the ``init_connection_state`` "
"method of the PostgreSQL backend (:ticket:`35688`)."
msgstr ""

msgid ""
"Fixed a bug in Django 5.1 where variable lookup errors were logged when "
"rendering admin fieldsets (:ticket:`35716`)."
msgstr ""

msgid "Django 5.1.2 release notes"
msgstr ""

msgid "*October 8, 2024*"
msgstr ""

msgid ""
"Django 5.1.2 fixes several bugs in 5.1.1. Also, the latest string "
"translations from Transifex are incorporated."
msgstr ""

msgid ""
"Fixed a regression in Django 5.1 that caused a crash when using the "
"PostgreSQL lookup :lookup:`trigram_similar` on output fields from ``Concat`` "
"(:ticket:`35732`)."
msgstr ""

msgid ""
"Fixed a regression in Django 5.1 that caused a crash of ``JSONObject()`` "
"when using server-side binding with PostgreSQL 16+ (:ticket:`35734`)."
msgstr ""

msgid ""
"Fixed a regression in Django 5.1 that made selected items in multi-select "
"widgets indistinguishable from non-selected items in the admin dark theme (:"
"ticket:`35809`)."
msgstr ""

msgid "Django 5.1.3 release notes"
msgstr ""

msgid "*Expected November 5, 2024*"
msgstr ""

msgid ""
"Django 5.1.3 fixes several bugs in 5.1.2 and adds compatibility with Python "
"3.13."
msgstr ""

msgid "..."
msgstr "..."

msgid "Release notes"
msgstr "发行说明"

msgid ""
"Release notes for the official Django releases. Each release note will tell "
"you what's new in each version, and will also describe any backwards-"
"incompatible changes made in that version."
msgstr ""
"Django 官方版本的发行说明。每个版本的发行说明都会告诉你每个版本的新内容，也会"
"描述该版本中任何向后不兼容的改动。"

msgid ""
"For those :doc:`upgrading to a new version of Django</howto/upgrade-"
"version>`, you will need to check all the backwards-incompatible changes "
"and :doc:`deprecated features</internals/deprecation>` for each 'final' "
"release from the one after your current Django version, up to and including "
"the new version."
msgstr ""
"对于那些 :doc:`升级到新版本的 Django </howto/upgrade-version>`，你需要检查所"
"有向后不兼容的变化和 :doc:`废弃的功能 </internals/deprecation>`，从你当前的 "
"Django 版本之后的每一个 “最终” 版本，直到并包括新版本。"

msgid "Final releases"
msgstr "最终版本"

msgid ""
"Below are release notes through Django |version| and its patch releases. "
"Newer versions of the documentation contain the release notes for any later "
"releases."
msgstr ""
"下面是通过 Django |version| 及其补丁发布的发行说明。新版本的文档包含了以后版"
"本的发行说明。"

msgid "5.1 release"
msgstr ""

msgid "5.0 release"
msgstr "5.0 发行"

msgid "4.2 release"
msgstr "4.2 发行"

msgid "4.1 release"
msgstr "4.1 发行"

msgid "4.0 release"
msgstr "4.0 发行"

msgid "3.2 release"
msgstr "3.2 发行"

msgid "3.1 release"
msgstr "3.1 发行"

msgid "3.0 release"
msgstr "3.0 发行"

msgid "2.2 release"
msgstr "2.2 发行"

msgid "2.1 release"
msgstr "2.1 发行"

msgid "2.0 release"
msgstr "2.0 发行"

msgid "1.11 release"
msgstr "1.11 发行"

msgid "1.10 release"
msgstr "1.10 发行"

msgid "1.9 release"
msgstr "1.9 发行"

msgid "1.8 release"
msgstr "1.8 发行"

msgid "1.7 release"
msgstr "1.7 发行"

msgid "1.6 release"
msgstr "1.6 发行"

msgid "1.5 release"
msgstr "1.5 发行"

msgid "1.4 release"
msgstr "1.4 发行"

msgid "1.3 release"
msgstr "1.3 发行"

msgid "1.2 release"
msgstr "1.2 发行"

msgid "1.1 release"
msgstr "1.1 发行"

msgid "1.0 release"
msgstr "1.0 发行"

msgid "Pre-1.0 releases"
msgstr "1.0 前发行"

msgid "Security releases"
msgstr "安全发行"

msgid ""
"Whenever a security issue is disclosed via :doc:`Django's security policies "
"</internals/security>`, appropriate release notes are now added to all "
"affected release series."
msgstr ""
"每当一个安全问题通过 :doc:`Django 的安全策略 </internals/security>` 披露时，"
"适当的发布说明现在会添加到所有受影响的发行系列中。"

msgid ""
"Additionally, :doc:`an archive of disclosed security issues </releases/"
"security>` is maintained."
msgstr "此外，还维护着 :doc:`已披露的安全问题档案 </releases/security>`。"

msgid "Archive of security issues"
msgstr "安全问题档案"

msgid ""
"Django's development team is strongly committed to responsible reporting and "
"disclosure of security-related issues, as outlined in :doc:`Django's "
"security policies </internals/security>`."
msgstr ""
"Django 的开发团队致力于负责任地报告和披露与安全相关的问题，正如 :doc:`Django "
"的安全政策 </internals/security>` 所概述的那样。"

msgid ""
"As part of that commitment, we maintain the following historical list of "
"issues which have been fixed and disclosed. For each issue, the list below "
"includes the date, a brief description, the `CVE identifier <https://en."
"wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures>`_ if applicable, a "
"list of affected versions, a link to the full disclosure and links to the "
"appropriate patch(es)."
msgstr ""
"作为该承诺的一部分，我们保留了以下已修复和披露的历史问题清单。对于每个问题，"
"下面的列表包括日期、简要描述、`CVE 标识符 <https://en.wikipedia.org/wiki/"
"Common_Vulnerabilities_and_Exposures>`_ （如果适用）、受影响版本的列表、到完"
"整披露的链接以及到适当补丁的链接。"

msgid "Some important caveats apply to this information:"
msgstr "一些重要的注意事项适用于这些信息："

msgid ""
"Lists of affected versions include only those versions of Django which had "
"stable, security-supported releases at the time of disclosure. This means "
"older versions (whose security support had expired) and versions which were "
"in pre-release (alpha/beta/RC) states at the time of disclosure may have "
"been affected, but are not listed."
msgstr ""
"受影响的版本列表只包括那些在披露时有稳定的、安全支持的版本的 Django。这意味着"
"旧版本（其安全支持已经过期）和在披露时处于发布前（alpha／beta／RC）状态的版本"
"可能会受到影响，但没有被列出。"

msgid ""
"The Django project has on occasion issued security advisories, pointing out "
"potential security problems which can arise from improper configuration or "
"from other issues outside of Django itself. Some of these advisories have "
"received CVEs; when that is the case, they are listed here, but as they have "
"no accompanying patches or releases, only the description, disclosure and "
"CVE will be listed."
msgstr ""
"Django 项目有时会发布安全公告，指出潜在的安全问题，这些问题可能是由于配置不当"
"或 Django 本身以外的其他问题造成的。有些安全公告已经收到了 CVE，在这种情况"
"下，它们会被列在这里，但由于它们没有附带的补丁或版本，所以只会列出描述、披露"
"和 CVE。"

msgid "Issues under Django's security process"
msgstr "Django 的安全流程下的问题"

msgid ""
"All security issues have been handled under versions of Django's security "
"process. These are listed below."
msgstr ""
"所有的安全问题都已经在 Django 的安全进程的版本下处理。这些版本列举如下。"

msgid "September 3, 2024 - :cve:`2024-45231`"
msgstr ""

msgid ""
"Potential user email enumeration via response status on password reset. "
"`Full description <https://www.djangoproject.com/weblog/2024/sep/03/security-"
"releases/>`__"
msgstr ""

msgid "Django 5.1 :commit:`(patch) <3c733c78d6f8e50296d6e248968b6516c92a53ca>`"
msgstr ""

msgid "Django 5.0 :commit:`(patch) <96d84047715ea1715b4bd1594e46122b8a77b9e2>`"
msgstr ""

msgid "Django 4.2 :commit:`(patch) <bf4888d317ba4506d091eeac6e8b4f1fcc731199>`"
msgstr ""

msgid "September 3, 2024 - :cve:`2024-45230`"
msgstr ""

msgid ""
"Potential denial-of-service vulnerability in ``django.utils.html.urlize()``. "
"`Full description <https://www.djangoproject.com/weblog/2024/sep/03/security-"
"releases/>`__"
msgstr ""

msgid "Django 5.1 :commit:`(patch) <022ab0a75c76ab2ea31dfcc5f2cf5501e378d397>`"
msgstr ""

msgid "Django 5.0 :commit:`(patch) <813de2672bd7361e9a453ab62cd6e52f96b6525b>`"
msgstr ""

msgid "Django 4.2 :commit:`(patch) <d147a8ebbdf28c17cafbbe2884f0bc57e2bf82e2>`"
msgstr ""

msgid "August 6, 2024 - :cve:`2024-42005`"
msgstr ""

msgid ""
"Potential SQL injection in ``QuerySet.values()`` and ``values_list()``. "
"`Full description <https://www.djangoproject.com/weblog/2024/aug/06/security-"
"releases/>`__"
msgstr ""

msgid "Django 5.0 :commit:`(patch) <32ebcbf2e1fe3e5ba79a6554a167efce81f7422d>`"
msgstr ""

msgid "Django 4.2 :commit:`(patch) <f4af67b9b41e0f4c117a8741da3abbd1c869ab28>`"
msgstr ""

msgid "August 6, 2024 - :cve:`2024-41991`"
msgstr ""

msgid ""
"Potential denial-of-service vulnerability in ``django.utils.html.urlize()`` "
"and ``AdminURLFieldWidget``. `Full description <https://www.djangoproject."
"com/weblog/2024/aug/06/security-releases/>`__"
msgstr ""

msgid "Django 5.0 :commit:`(patch) <523da8771bce321023f490f70d71a9e973ddc927>`"
msgstr ""

msgid "Django 4.2 :commit:`(patch) <efea1ef7e2190e3f77ca0651b5458297bc0f6a9f>`"
msgstr ""

msgid "August 6, 2024 - :cve:`2024-41990`"
msgstr ""

msgid ""
"Potential denial-of-service vulnerability in ``django.utils.html.urlize()``. "
"`Full description <https://www.djangoproject.com/weblog/2024/aug/06/security-"
"releases/>`__"
msgstr ""

msgid "Django 5.0 :commit:`(patch) <7b7b909579c8311c140c89b8a9431bf537febf93>`"
msgstr ""

msgid "Django 4.2 :commit:`(patch) <d0a82e26a74940bf0c78204933c3bdd6a283eb88>`"
msgstr ""

msgid "August 6, 2024 - :cve:`2024-41989`"
msgstr ""

msgid ""
"Potential memory exhaustion in ``django.utils.numberformat.floatformat()``. "
"`Full description <https://www.djangoproject.com/weblog/2024/aug/06/security-"
"releases/>`__"
msgstr ""

msgid "Django 5.0 :commit:`(patch) <27900fe56f3d3cabb4aeb6ccb82f92bab29073a8>`"
msgstr ""

msgid "Django 4.2 :commit:`(patch) <fc76660f589ac07e45e9cd34ccb8087aeb11904b>`"
msgstr ""

msgid "July 9, 2024 - :cve:`2024-39614`"
msgstr ""

msgid ""
"Potential denial-of-service in ``django.utils.translation."
"get_supported_language_variant()``. `Full description <https://www."
"djangoproject.com/weblog/2024/jul/09/security-releases/>`__"
msgstr ""

msgid "Django 5.0 :commit:`(patch) <8e7a44e4bec0f11474699c3111a5e0a45afe7f49>`"
msgstr ""

msgid "Django 4.2 :commit:`(patch) <17358fb35fb7217423d4c4877ccb6d1a3a40b1c3>`"
msgstr ""

msgid "July 9, 2024 - :cve:`2024-39330`"
msgstr ""

msgid ""
"Potential directory-traversal in ``django.core.files.storage.Storage."
"save()``. `Full description <https://www.djangoproject.com/weblog/2024/"
"jul/09/security-releases/>`__"
msgstr ""

msgid "Django 5.0 :commit:`(patch) <9f4f63e9ebb7bf6cb9547ee4e2526b9b96703270>`"
msgstr ""

msgid "Django 4.2 :commit:`(patch) <2b00edc0151a660d1eb86da4059904a0fc4e095e>`"
msgstr ""

msgid "July 9, 2024 - :cve:`2024-39329`"
msgstr ""

msgid ""
"Username enumeration through timing difference for users with unusable "
"passwords. `Full description <https://www.djangoproject.com/weblog/2024/"
"jul/09/security-releases/>`__"
msgstr ""

msgid "Django 5.0 :commit:`(patch) <07cefdee4a9d1fcd9a3a631cbd07c78defd1923b>`"
msgstr ""

msgid "Django 4.2 :commit:`(patch) <156d3186c96e3ec2ca73b8b25dc2ef366e38df14>`"
msgstr ""

msgid "July 9, 2024 - :cve:`2024-38875`"
msgstr ""

msgid ""
"Potential denial-of-service in ``django.utils.html.urlize()``. `Full "
"description <https://www.djangoproject.com/weblog/2024/jul/09/security-"
"releases/>`__"
msgstr ""

msgid "Django 5.0 :commit:`(patch) <7285644640f085f41d60ab0c8ae4e9153f0485db>`"
msgstr ""

msgid "Django 4.2 :commit:`(patch) <79f368764295df109a37192f6182fb6f361d85b5>`"
msgstr ""

msgid "March 4, 2024 - :cve:`2024-27351`"
msgstr "2024 年 3 月 4 日 - :cve:`2024-27351`"

msgid ""
"Potential regular expression denial-of-service in ``django.utils.text."
"Truncator.words()``. `Full description <https://www.djangoproject.com/"
"weblog/2024/mar/04/security-releases/>`__"
msgstr ""
"``django.utils.text.Truncator.words()`` 存在潜在的正则表达式拒绝服务漏洞。`完"
"整描述 <https://www.djangoproject.com/weblog/2024/mar/04/security-releases/"
">`__"

msgid "Django 5.0 :commit:`(patch) <3394fc6132436eca89e997083bae9985fb7e761e>`"
msgstr "Django 5.0 :commit:`(补丁) <3394fc6132436eca89e997083bae9985fb7e761e>`"

msgid "Django 4.2 :commit:`(patch) <3c9a2771cc80821e041b16eb36c1c37af5349d4a>`"
msgstr "Django 4.2 :commit:`(补丁) <3c9a2771cc80821e041b16eb36c1c37af5349d4a>`"

msgid "Django 3.2 :commit:`(patch) <072963e4c4d0b3a7a8c5412bc0c7d27d1a9c3521>`"
msgstr "Django 3.2 :commit:`(补丁) <072963e4c4d0b3a7a8c5412bc0c7d27d1a9c3521>`"

msgid "February 6, 2024 - :cve:`2024-24680`"
msgstr "2024 年 2 月 6 日 - :cve:`2024-24680`"

msgid ""
"Potential denial-of-service in ``intcomma`` template filter. `Full "
"description <https://www.djangoproject.com/weblog/2024/feb/06/security-"
"releases/>`__"
msgstr ""
"``intcomma`` 模板过滤器存在潜在的拒绝服务漏洞。`完整描述 <https://www."
"djangoproject.com/weblog/2024/feb/06/security-releases/>`__"

msgid "Django 5.0 :commit:`(patch) <16a8fe18a3b81250f4fa57e3f93f0599dc4895bc>`"
msgstr "Django 5.0 :commit:`(补丁) <16a8fe18a3b81250f4fa57e3f93f0599dc4895bc>`"

msgid "Django 4.2 :commit:`(patch) <572ea07e84b38ea8de0551f4b4eda685d91d09d2>`"
msgstr "Django 4.2 :commit:`(补丁) <572ea07e84b38ea8de0551f4b4eda685d91d09d2>`"

msgid "Django 3.2 :commit:`(patch) <c1171ffbd570db90ca206c30f8e2b9f691243820>`"
msgstr "Django 3.2 :commit:`(补丁) <c1171ffbd570db90ca206c30f8e2b9f691243820>`"

msgid "November 1, 2023 - :cve:`2023-46695`"
msgstr "2023 年 11 月 1 日 - :cve:`2023-46695`"

msgid ""
"Potential denial of service vulnerability in ``UsernameField`` on Windows. "
"`Full description <https://www.djangoproject.com/weblog/2023/nov/01/security-"
"releases/>`__"
msgstr ""
"关于 Windows 平台上的 ``UsernameField`` 存在潜在的拒绝服务漏洞。详细信息请查"
"看 `完整描述 <https://www.djangoproject.com/weblog/2023/nov/01/security-"
"releases/>`__"

msgid "Django 4.2 :commit:`(patch) <048a9ebb6ea468426cb4e57c71572cbbd975517f>`"
msgstr "Django 4.2 :commit:`(补丁) <048a9ebb6ea468426cb4e57c71572cbbd975517f>`"

msgid "Django 4.1 :commit:`(patch) <4965bfdde2e5a5c883685019e57d123a3368a75e>`"
msgstr "Django 4.1 :commit:`(补丁) <4965bfdde2e5a5c883685019e57d123a3368a75e>`"

msgid "Django 3.2 :commit:`(patch) <f9a7fb8466a7ba4857eaf930099b5258f3eafb2b>`"
msgstr "Django 3.2 :commit:`(补丁) <f9a7fb8466a7ba4857eaf930099b5258f3eafb2b>`"

msgid "October 4, 2023 - :cve:`2023-43665`"
msgstr "2023 年 10 月 4 日 - :cve:`2023-43665`"

msgid ""
"Denial-of-service possibility in ``django.utils.text.Truncator``. `Full "
"description <https://www.djangoproject.com/weblog/2023/oct/04/security-"
"releases/>`__"
msgstr ""
"``django.utils.text.Truncator`` 中存在拒绝服务可能性。详细信息请查看 `完整描"
"述 <https://www.djangoproject.com/weblog/2023/oct/04/security-releases/>`__"

msgid "Django 4.2 :commit:`(patch) <be9c27c4d18c2e6a5be8af4e53c0797440794473>`"
msgstr "Django 4.2 :commit:`(补丁) <be9c27c4d18c2e6a5be8af4e53c0797440794473>`"

msgid "Django 4.1 :commit:`(patch) <c7b7024742250414e426ad49fb80db943e7ba4e8>`"
msgstr "Django 4.1 :commit:`(补丁) <c7b7024742250414e426ad49fb80db943e7ba4e8>`"

msgid "Django 3.2 :commit:`(patch) <ccdade1a0262537868d7ca64374de3d957ca50c5>`"
msgstr "Django 3.2 :commit:`(补丁) <ccdade1a0262537868d7ca64374de3d957ca50c5>`"

msgid "September 4, 2023 - :cve:`2023-41164`"
msgstr "2023 年 9 月 4 日 - :cve:`2023-41164`"

msgid ""
"Potential denial of service vulnerability in ``django.utils.encoding."
"uri_to_iri()``. `Full description <https://www.djangoproject.com/weblog/2023/"
"sep/04/security-releases/>`__"
msgstr ""
"``django.utils.encoding.uri_to_iri()`` 存在潜在的拒绝服务漏洞。详细信息请查"
"看 `完整描述 <https://www.djangoproject.com/weblog/2023/sep/04/security-"
"releases/>`__"

msgid "Django 4.2 :commit:`(patch) <9c51b4dcfa0cefcb48231f4d71cafa80821f87b9>`"
msgstr "Django 4.2 :commit:`(补丁) <9c51b4dcfa0cefcb48231f4d71cafa80821f87b9>`"

msgid "Django 4.1 :commit:`(patch) <ba00bc5ec6a7eff5e08be438f7b5b0e9574e8ff0>`"
msgstr "Django 4.1 :commit:`(补丁) <ba00bc5ec6a7eff5e08be438f7b5b0e9574e8ff0>`"

msgid "Django 3.2 :commit:`(patch) <6f030b1149bd8fa4ba90452e77cb3edc095ce54e>`"
msgstr "Django 3.2 :commit:`(补丁) <6f030b1149bd8fa4ba90452e77cb3edc095ce54e>`"

msgid "July 3, 2023 - :cve:`2023-36053`"
msgstr "2023 年 7 月 3 日  - :cve:`2023-36053`"

msgid ""
"Potential regular expression denial of service vulnerability in "
"``EmailValidator``/``URLValidator``. `Full description <https://www."
"djangoproject.com/weblog/2023/jul/03/security-releases/>`__"
msgstr ""
"``EmailValidator`` 和 ``URLValidator`` 存在潜在的正则表达式拒绝服务漏洞。详细"
"信息请查看 `完整描述 <https://www.djangoproject.com/weblog/2023/jul/03/"
"security-releases/>`__"

msgid "Django 4.2 :commit:`(patch) <b7c5feb35a31799de6e582ad6a5a91a9de74e0f9>`"
msgstr "Django 4.2 :commit:`(补丁) <b7c5feb35a31799de6e582ad6a5a91a9de74e0f9>`"

msgid "Django 4.1 :commit:`(patch) <beb3f3d55940d9aa7198bf9d424ab74e873aec3d>`"
msgstr "Django 4.1 :commit:`(补丁) <beb3f3d55940d9aa7198bf9d424ab74e873aec3d>`"

msgid "Django 3.2 :commit:`(patch) <454f2fb93437f98917283336201b4048293f7582>`"
msgstr "Django 3.2 :commit:`(补丁) <454f2fb93437f98917283336201b4048293f7582>`"

msgid "May 3, 2023 - :cve:`2023-31047`"
msgstr "2023 年 5 月 3 日 - :cve:`2023-31047`"

msgid ""
"Potential bypass of validation when uploading multiple files using one form "
"field. `Full description <https://www.djangoproject.com/weblog/2023/may/03/"
"security-releases/>`__"
msgstr ""
"上传多个文件使用一个表单字段时存在潜在的验证绕过漏洞。详细信息请查看 `完整描"
"述 <https://www.djangoproject.com/weblog/2023/may/03/security-releases/>`__"

msgid "Django 4.2 :commit:`(patch) <21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd>`"
msgstr "Django 4.2 :commit:`(补丁) <21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd>`"

msgid "Django 4.1 :commit:`(patch) <e7c3a2ccc3a562328600be05068ed9149e12ce64>`"
msgstr "Django 4.1 :commit:`(补丁) <e7c3a2ccc3a562328600be05068ed9149e12ce64>`"

msgid "Django 3.2 :commit:`(patch) <eed53d0011622e70b936e203005f0e6f4ac48965>`"
msgstr "Django 3.2 :commit:`(补丁) <eed53d0011622e70b936e203005f0e6f4ac48965>`"

msgid "February 14, 2023 - :cve:`2023-24580`"
msgstr "2023 年 2 月 14 日 - :cve:`2023-24580`"

msgid ""
"Potential denial-of-service vulnerability in file uploads. `Full description "
"<https://www.djangoproject.com/weblog/2023/feb/14/security-releases/>`__"
msgstr ""
"文件上传中存在潜在的拒绝服务漏洞。详细信息请查看 `完整描述 <https://www."
"djangoproject.com/weblog/2023/feb/14/security-releases/>`__"

msgid "Django 4.1 :commit:`(patch) <628b33a854a9c68ec8a0c51f382f304a0044ec92>`"
msgstr "Django 4.1 :commit:`(补丁) <628b33a854a9c68ec8a0c51f382f304a0044ec92>`"

msgid "Django 4.0 :commit:`(patch) <83f1ea83e4553e211c1c5a0dfc197b66d4e50432>`"
msgstr "Django 4.0 :commit:`(补丁) <83f1ea83e4553e211c1c5a0dfc197b66d4e50432>`"

msgid "Django 3.2 :commit:`(patch) <a665ed5179f5bbd3db95ce67286d0192eff041d8>`"
msgstr "Django 3.2 :commit:`(补丁) <a665ed5179f5bbd3db95ce67286d0192eff041d8>`"

msgid "February 1, 2023 - :cve:`2023-23969`"
msgstr "2023 年 2 月 1 日 - :cve:`2023-23969`"

msgid ""
"Potential denial-of-service via ``Accept-Language`` headers. `Full "
"description <https://www.djangoproject.com/weblog/2023/feb/01/security-"
"releases/>`__"
msgstr ""
"通过 ``Accept-Language`` 标头存在潜在的拒绝服务漏洞。详细信息请查看 `完整描"
"述 <https://www.djangoproject.com/weblog/2023/feb/01/security-releases/>`__"

msgid "Django 4.1 :commit:`(patch) <9d7bd5a56b1ce0576e8e07a8001373576d277942>`"
msgstr "Django 4.1 :commit:`(补丁) <9d7bd5a56b1ce0576e8e07a8001373576d277942>`"

msgid "Django 4.0 :commit:`(patch) <4452642f193533e288a52c02efb5bbc766a68f95>`"
msgstr "Django 4.0 :commit:`(补丁) <4452642f193533e288a52c02efb5bbc766a68f95>`"

msgid "Django 3.2 :commit:`(patch) <c7e0151fdf33e1b11d488b6f67b94fdf3a30614a>`"
msgstr "Django 3.2 :commit:`(补丁) <c7e0151fdf33e1b11d488b6f67b94fdf3a30614a>`"

msgid "October 4, 2022 - :cve:`2022-41323`"
msgstr "2022 年 10 月 4 日 - :cve:`2022-41323`"

msgid ""
"Potential denial-of-service vulnerability in internationalized URLs. `Full "
"description <https://www.djangoproject.com/weblog/2022/oct/04/security-"
"releases/>`__"
msgstr ""
"国际化 URL 存在潜在的拒绝服务漏洞。详细信息请查看 `完整描述 <https://www."
"djangoproject.com/weblog/2022/oct/04/security-releases/>`__"

msgid "Django 4.1 :commit:`(patch) <9d656ea51d9ea7105c0c0785783ac29d426a7d25>`"
msgstr "Django 4.1 :commit:`(补丁) <9d656ea51d9ea7105c0c0785783ac29d426a7d25>`"

msgid "Django 4.0 :commit:`(patch) <23f0093125ac2e553da6c1b2f9988eb6a3dd2ea1>`"
msgstr "Django 4.0 :commit:`(补丁) <23f0093125ac2e553da6c1b2f9988eb6a3dd2ea1>`"

msgid "Django 3.2 :commit:`(patch) <5b6b257fa7ec37ff27965358800c67e2dd11c924>`"
msgstr "Django 3.2 :commit:`(补丁) <5b6b257fa7ec37ff27965358800c67e2dd11c924>`"

msgid "August 3, 2022 - :cve:`2022-36359`"
msgstr "2022 年 8 月 3 日 - :cve:`2022-36359`"

msgid ""
"Potential reflected file download vulnerability in FileResponse. `Full "
"description <https://www.djangoproject.com/weblog/2022/aug/03/security-"
"releases/>`__"
msgstr ""
"FileResponse 中存在潜在的反射式文件下载漏洞。详细信息请查看 `完整描述 "
"<https://www.djangoproject.com/weblog/2022/aug/03/security-releases/>`__"

msgid "Django 4.0 :commit:`(patch) <b7d9529cbe0af4adabb6ea5d01ed8dcce3668fb3>`"
msgstr "Django 4.0 :commit:`(补丁) <b7d9529cbe0af4adabb6ea5d01ed8dcce3668fb3>`"

msgid "Django 3.2 :commit:`(patch) <b3e4494d759202a3b6bf247fd34455bf13be5b80>`"
msgstr "Django 3.2 :commit:`(补丁) <b3e4494d759202a3b6bf247fd34455bf13be5b80>`"

msgid "July 4, 2022 - :cve:`2022-34265`"
msgstr "2022 年 7 月 4 日 - :cve:`2022-34265`"

msgid ""
"Potential SQL injection via ``Trunc(kind)`` and ``Extract(lookup_name)`` "
"arguments. `Full description <https://www.djangoproject.com/weblog/2022/"
"jul/04/security-releases/>`__"
msgstr ""
"通过 ``Trunc(kind)`` 和 ``Extract(lookup_name)`` 参数存在潜在的 SQL 注入漏"
"洞。详细信息请查看 `完整描述 <https://www.djangoproject.com/weblog/2022/"
"jul/04/security-releases/>`__"

msgid "Django 4.0 :commit:`(patch) <0dc9c016fadb71a067e5a42be30164e3f96c0492>`"
msgstr "Django 4.0 :commit:`(补丁) <0dc9c016fadb71a067e5a42be30164e3f96c0492>`"

msgid "Django 3.2 :commit:`(patch) <a9010fe5555e6086a9d9ae50069579400ef0685e>`"
msgstr "Django 3.2 :commit:`(补丁) <a9010fe5555e6086a9d9ae50069579400ef0685e>`"

msgid "April 11, 2022 - :cve:`2022-28346`"
msgstr "2022 年 4 月 11 日 - :cve:`2022-28346`"

msgid ""
"Potential SQL injection in ``QuerySet.annotate()``, ``aggregate()``, and "
"``extra()``. `Full description <https://www.djangoproject.com/weblog/2022/"
"apr/11/security-releases/>`__"
msgstr ""
"在 ``QuerySet.annotate()``, ``aggregate()`` 和 ``extra()`` 中存在潜在的 SQL "
"注入漏洞。详细信息请查看 `完整描述 <https://www.djangoproject.com/"
"weblog/2022/apr/11/security-releases/>`__"

msgid "Django 4.0 :commit:`(patch) <800828887a0509ad1162d6d407e94d8de7eafc60>`"
msgstr "Django 4.0 :commit:`(补丁) <800828887a0509ad1162d6d407e94d8de7eafc60>`"

msgid "Django 3.2 :commit:`(patch) <2044dac5c6968441be6f534c4139bcf48c5c7e48>`"
msgstr "Django 3.2 :commit:`(补丁) <2044dac5c6968441be6f534c4139bcf48c5c7e48>`"

msgid "Django 2.2 :commit:`(patch) <2c09e68ec911919360d5f8502cefc312f9e03c5d>`"
msgstr "Django 2.2 :commit:`(补丁) <2c09e68ec911919360d5f8502cefc312f9e03c5d>`"

msgid "April 11, 2022 - :cve:`2022-28347`"
msgstr "2022 年 4 月 11 日 - :cve:`2022-28347`"

msgid ""
"Potential SQL injection via ``QuerySet.explain(**options)`` on PostgreSQL. "
"`Full description <https://www.djangoproject.com/weblog/2022/apr/11/security-"
"releases/>`__"
msgstr ""
"通过 PostgreSQL 上的 ``QuerySet.explain(**options)`` 存在潜在的 SQL 注入漏"
"洞。详细信息请查看 `完整描述 <https://www.djangoproject.com/weblog/2022/"
"apr/11/security-releases/>`__"

msgid "Django 4.0 :commit:`(patch) <00b0fc50e1738c7174c495464a5ef069408a4402>`"
msgstr "Django 4.0 :commit:`(补丁) <00b0fc50e1738c7174c495464a5ef069408a4402>`"

msgid "Django 3.2 :commit:`(patch) <9e19accb6e0a00ba77d5a95a91675bf18877c72d>`"
msgstr "Django 3.2 :commit:`(补丁) <9e19accb6e0a00ba77d5a95a91675bf18877c72d>`"

msgid "Django 2.2 :commit:`(patch) <29a6c98b4c13af82064f993f0acc6e8fafa4d3f5>`"
msgstr "Django 2.2 :commit:`(补丁) <29a6c98b4c13af82064f993f0acc6e8fafa4d3f5>`"

msgid "February 1, 2022 - :cve:`2022-22818`"
msgstr "2022 年 2 月 1 日 - :cve:`2022-22818`"

msgid ""
"Possible XSS via ``{% debug %}`` template tag. `Full description <https://"
"www.djangoproject.com/weblog/2022/feb/01/security-releases/>`__"
msgstr ""
"可能通过 ``{% debug %}`` 模板标签存在跨站脚本攻击（XSS）漏洞。详细信息请查看 "
"`完整描述 <https://www.djangoproject.com/weblog/2022/feb/01/security-"
"releases/>`__"

msgid "Versions affected"
msgstr "受影响的版本"

msgid "Django 4.0 :commit:`(patch) <01422046065d2b51f8f613409cad2c81b39487e5>`"
msgstr "Django 4.0 :commit:`(补丁) <01422046065d2b51f8f613409cad2c81b39487e5>`"

msgid "Django 3.2 :commit:`(patch) <1a1e8278c46418bde24c86a65443b0674bae65e2>`"
msgstr "Django 3.2 :commit:`(补丁) <1a1e8278c46418bde24c86a65443b0674bae65e2>`"

msgid "Django 2.2 :commit:`(patch) <c27a7eb9f40b64990398978152e62b6ff839c2e6>`"
msgstr "Django 2.2 :commit:`(补丁) <c27a7eb9f40b64990398978152e62b6ff839c2e6>`"

msgid "February 1, 2022 - :cve:`2022-23833`"
msgstr "2022 年 2 月 1 日 - :cve:`2022-23833`"

msgid ""
"Denial-of-service possibility in file uploads. `Full description <https://"
"www.djangoproject.com/weblog/2022/feb/01/security-releases/>`__"
msgstr ""
"文件上传中存在拒绝服务可能性。详细信息请查看 `完整描述 <https://www."
"djangoproject.com/weblog/2022/feb/01/security-releases/>`__"

msgid "Django 4.0 :commit:`(patch) <f9c7d48fdd6f198a6494a9202f90242f176e4fc9>`"
msgstr "Django 4.0 :commit:`(补丁) <f9c7d48fdd6f198a6494a9202f90242f176e4fc9>`"

msgid "Django 3.2 :commit:`(patch) <d16133568ef9c9b42cb7a08bdf9ff3feec2e5468>`"
msgstr "Django 3.2 :commit:`(补丁) <d16133568ef9c9b42cb7a08bdf9ff3feec2e5468>`"

msgid "Django 2.2 :commit:`(patch) <c477b761804984c932704554ad35f78a2e230c6a>`"
msgstr "Django 2.2 :commit:`(补丁) <c477b761804984c932704554ad35f78a2e230c6a>`"

msgid "January 4, 2022 - :cve:`2021-45452`"
msgstr "2022 年 1 月 4 日 - :cve:`2021-45452`"

msgid ""
"Potential directory-traversal via ``Storage.save()``. `Full description "
"<https://www.djangoproject.com/weblog/2022/jan/04/security-releases/>`__"
msgstr ""
"通过 ``Storage.save()`` 存在潜在的目录遍历漏洞。详细信息请查看 `完整描述 "
"<https://www.djangoproject.com/weblog/2022/jan/04/security-releases/>`__"

msgid "Django 4.0 :commit:`(patch) <e1592e0f26302e79856cc7f2218ae848ae19b0f6>`"
msgstr "Django 4.0 :commit:`(补丁) <e1592e0f26302e79856cc7f2218ae848ae19b0f6>`"

msgid "Django 3.2 :commit:`(patch) <8d2f7cff76200cbd2337b2cf1707e383eb1fb54b>`"
msgstr "Django 3.2 :commit:`(补丁) <8d2f7cff76200cbd2337b2cf1707e383eb1fb54b>`"

msgid "Django 2.2 :commit:`(patch) <4cb35b384ceef52123fc66411a73c36a706825e1>`"
msgstr "Django 2.2 :commit:`(补丁) <4cb35b384ceef52123fc66411a73c36a706825e1>`"

msgid "January 4, 2022 - :cve:`2021-45116`"
msgstr "2022 年 1 月 4 日 - :cve:`2021-45116`"

msgid ""
"Potential information disclosure in ``dictsort`` template filter. `Full "
"description <https://www.djangoproject.com/weblog/2022/jan/04/security-"
"releases/>`__"
msgstr ""
"``dictsort`` 模板过滤器存在潜在的信息泄露漏洞。详细信息请查看 `完整描述 "
"<https://www.djangoproject.com/weblog/2022/jan/04/security-releases/>`__"

msgid "Django 4.0 :commit:`(patch) <2a8ec7f546d6d5806e221ec948c5146b55bd7489>`"
msgstr "Django 4.0 :commit:`(补丁) <2a8ec7f546d6d5806e221ec948c5146b55bd7489>`"

msgid "Django 3.2 :commit:`(patch) <c7fe895bca06daf12cc1670b56eaf72a1ef27a16>`"
msgstr "Django 3.2 :commit:`(补丁) <c7fe895bca06daf12cc1670b56eaf72a1ef27a16>`"

msgid "Django 2.2 :commit:`(patch) <c9f648ccfac5ab90fb2829a66da4f77e68c7f93a>`"
msgstr "Django 2.2 :commit:`(补丁) <c9f648ccfac5ab90fb2829a66da4f77e68c7f93a>`"

msgid "January 4, 2022 - :cve:`2021-45115`"
msgstr "2022 年 1 月 4 日 - :cve:`2021-45115`"

msgid ""
"Denial-of-service possibility in ``UserAttributeSimilarityValidator``. `Full "
"description <https://www.djangoproject.com/weblog/2022/jan/04/security-"
"releases/>`__"
msgstr ""
"``UserAttributeSimilarityValidator`` 存在拒绝服务可能性。详细信息请查看 `完整"
"描述 <https://www.djangoproject.com/weblog/2022/jan/04/security-releases/>`__"

msgid "Django 4.0 :commit:`(patch) <df79ef03ac867c93caaa6be56bc69e66abfeef8f>`"
msgstr "Django 4.0 :commit:`(补丁) <df79ef03ac867c93caaa6be56bc69e66abfeef8f>`"

msgid "Django 3.2 :commit:`(patch) <a8b32fe13bcaed1c0b772fdc53de84abc224fb20>`"
msgstr "Django 3.2 :commit:`(补丁) <a8b32fe13bcaed1c0b772fdc53de84abc224fb20>`"

msgid "Django 2.2 :commit:`(patch) <2135637fdd5ce994de110affef9e67dffdf77277>`"
msgstr "Django 2.2 :commit:`(补丁) <2135637fdd5ce994de110affef9e67dffdf77277>`"

msgid "December 7, 2021 - :cve:`2021-44420`"
msgstr "2021 年 12 月 7 日 - :cve:`2021-44420`"

msgid ""
"Potential bypass of an upstream access control based on URL paths. `Full "
"description <https://www.djangoproject.com/weblog/2021/dec/07/security-"
"releases/>`__"
msgstr ""
"存在潜在的绕过基于 URL 路径的上游访问控制漏洞。详细信息请查看 `完整描述 "
"<https://www.djangoproject.com/weblog/2021/dec/07/security-releases/>`__"

msgid "Django 3.2 :commit:`(patch) <333c65603032c377e682cdbd7388657a5463a05a>`"
msgstr "Django 3.2 :commit:`(补丁) <333c65603032c377e682cdbd7388657a5463a05a>`"

msgid "Django 3.1 :commit:`(patch) <22bd17488159601bf0741b70ae7932bffea8eced>`"
msgstr "Django 3.1 :commit:`(补丁) <22bd17488159601bf0741b70ae7932bffea8eced>`"

msgid "Django 2.2 :commit:`(patch) <7cf7d74e8a754446eeb85cacf2fef1247e0cb6d7>`"
msgstr "Django 2.2 :commit:`(补丁) <7cf7d74e8a754446eeb85cacf2fef1247e0cb6d7>`"

msgid "July 1, 2021 - :cve:`2021-35042`"
msgstr "2021 年 7 月 1 日 - :cve:`2021-35042`"

msgid ""
"Potential SQL injection via unsanitized ``QuerySet.order_by()`` input. `Full "
"description <https://www.djangoproject.com/weblog/2021/jul/01/security-"
"releases/>`__"
msgstr ""
"潜在的 SQL 注入，通过未检验的 ``QuerySet.order_by()`` 输入。`完整描述 "
"<https://www.djangoproject.com/weblog/2021/jul/01/security-releases/>`__"

msgid "Django 3.2 :commit:`(patch) <a34a5f724c5d5adb2109374ba3989ebb7b11f81f>`"
msgstr ""
"Django 3.2 :commit:`（补丁） <a34a5f724c5d5adb2109374ba3989ebb7b11f81f>`"

msgid "Django 3.1 :commit:`(patch) <0bd57a879a0d54920bb9038a732645fb917040e9>`"
msgstr ""
"Django 3.1 :commit:`（补丁） <0bd57a879a0d54920bb9038a732645fb917040e9>`"

msgid "June 2, 2021 - :cve:`2021-33203`"
msgstr "2021 年 6 月 2 日 - :cve:`2021-33203`"

msgid ""
"Potential directory traversal via ``admindocs``. `Full description <https://"
"www.djangoproject.com/weblog/2021/jun/02/security-releases/>`__"
msgstr ""
"可能通过 ``admindocs`` 进行目录遍历。`完整描述 <https://www.djangoproject."
"com/weblog/2021/jun/02/security-releases/>`__"

msgid "Django 3.2 :commit:`(patch) <dfaba12cda060b8b292ae1d271b44bf810b1c5b9>`"
msgstr ""
"Django 3.2 :commit:`（补丁） <dfaba12cda060b8b292ae1d271b44bf810b1c5b9>`"

msgid "Django 3.1 :commit:`(patch) <20c67a0693c4ede2b09af02574823485e82e4c8f>`"
msgstr ""
"Django 3.1 :commit:`（补丁） <20c67a0693c4ede2b09af02574823485e82e4c8f>`"

msgid "Django 2.2 :commit:`(patch) <053cc9534d174dc89daba36724ed2dcb36755b90>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <053cc9534d174dc89daba36724ed2dcb36755b90>`"

msgid "June 2, 2021 - :cve:`2021-33571`"
msgstr "2021 年 6 月 2 日 - :cve:`2021-33571`"

msgid ""
"Possible indeterminate SSRF, RFI, and LFI attacks since validators accepted "
"leading zeros in IPv4 addresses. `Full description <https://www."
"djangoproject.com/weblog/2021/jun/02/security-releases/>`__"
msgstr ""
"由于验证器接受 IPv4 地址中的前导零，因此可能出现不确定的 SSRF、RFI 和 LFI 攻"
"击。`完整描述 <https://www.djangoproject.com/weblog/2021/jun/02/security-"
"releases/>`__"

msgid "Django 3.2 :commit:`(patch) <9f75e2e562fa0c0482f3dde6fc7399a9070b4a3d>`"
msgstr ""
"Django 3.2 :commit:`（补丁） <9f75e2e562fa0c0482f3dde6fc7399a9070b4a3d>`"

msgid "Django 3.1 :commit:`(patch) <203d4ab9ebcd72fc4d6eb7398e66ed9e474e118e>`"
msgstr ""
"Django 3.1 :commit:`（补丁） <203d4ab9ebcd72fc4d6eb7398e66ed9e474e118e>`"

msgid "Django 2.2 :commit:`(patch) <f27c38ab5d90f68c9dd60cabef248a570c0be8fc>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <f27c38ab5d90f68c9dd60cabef248a570c0be8fc>`"

msgid "May 6, 2021 - :cve:`2021-32052`"
msgstr "2021 年 5 月 6 日 - :cve:`2021-32052`"

msgid ""
"Header injection possibility since ``URLValidator`` accepted newlines in "
"input on Python 3.9.5+. `Full description <https://www.djangoproject.com/"
"weblog/2021/may/06/security-releases/>`__"
msgstr ""
"由于 ``URLValidator`` 在 Python 3.9.5+ 上接受输入中的换行符，存在标头注入可能"
"性。详细信息请查看 `完整描述 <https://www.djangoproject.com/weblog/2021/"
"may/06/security-releases/>`__"

msgid "Django 3.2 :commit:`(patch) <2d2c1d0c97832860fbd6597977e2aae17dd7e5b2>`"
msgstr "Django 3.2 :commit:`(补丁) <2d2c1d0c97832860fbd6597977e2aae17dd7e5b2>`"

msgid "Django 3.1 :commit:`(patch) <afb23f5929944a407e4990edef1c7806a94c9879>`"
msgstr "Django 3.1 :commit:`(补丁) <afb23f5929944a407e4990edef1c7806a94c9879>`"

msgid "Django 2.2 :commit:`(patch) <d9594c4ea57b6309d93879805302cec9ae9f23ff>`"
msgstr "Django 2.2 :commit:`(补丁) <d9594c4ea57b6309d93879805302cec9ae9f23ff>`"

msgid "May 4, 2021 - :cve:`2021-31542`"
msgstr "2021 年 5 月 4 日 - :cve:`2021-31542`"

msgid ""
"Potential directory-traversal via uploaded files. `Full description <https://"
"www.djangoproject.com/weblog/2021/may/04/security-releases/>`__"
msgstr ""
"通过上传的文件进行潜在的目录遍历。`完整描述 <https://www.djangoproject.com/"
"weblog/2021/may/04/security-releases/>`__"

msgid "Django 3.2 :commit:`(patch) <c98f446c188596d4ba6de71d1b77b4a6c5c2a007>`"
msgstr ""
"Django 3.2 :commit:`（补丁） <c98f446c188596d4ba6de71d1b77b4a6c5c2a007>`"

msgid "Django 3.1 :commit:`(patch) <25d84d64122c15050a0ee739e859f22ddab5ac48>`"
msgstr ""
"Django 3.1 :commit:`（补丁） <25d84d64122c15050a0ee739e859f22ddab5ac48>`"

msgid "Django 2.2 :commit:`(patch) <04ac1624bdc2fa737188401757cf95ced122d26d>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <04ac1624bdc2fa737188401757cf95ced122d26d>`"

msgid "April 6, 2021 - :cve:`2021-28658`"
msgstr "2021 年 4 月 6 日 - :cve:`2021-28658`"

msgid ""
"Potential directory-traversal via uploaded files. `Full description <https://"
"www.djangoproject.com/weblog/2021/apr/06/security-releases/>`__"
msgstr ""
"通过上传的文件进行潜在的目录遍历。`完整描述 <https://www.djangoproject.com/"
"weblog/2021/apr/06/security-releases/>`__"

msgid "Django 3.2 :commit:`(patch) <2820fd1be5dfccbf1216c3845fad8580502473e1>`"
msgstr ""
"Django 3.2 :commit:`（补丁） <2820fd1be5dfccbf1216c3845fad8580502473e1>`"

msgid "Django 3.1 :commit:`(patch) <cca0d98118cccf9ae0c6dcf2d6c57fc50469fbf0>`"
msgstr ""
"Django 3.1 :commit:`（补丁） <cca0d98118cccf9ae0c6dcf2d6c57fc50469fbf0>`"

msgid "Django 3.0 :commit:`(patch) <e7fba62248f604c76da4f23dcf1db4a57b0808ea>`"
msgstr ""
"Django 3.0 :commit:`（补丁） <e7fba62248f604c76da4f23dcf1db4a57b0808ea>`"

msgid "Django 2.2 :commit:`(patch) <4036d62bda0e9e9f6172943794b744a454ca49c2>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <4036d62bda0e9e9f6172943794b744a454ca49c2>`"

msgid "February 19, 2021 - :cve:`2021-23336`"
msgstr "2021 年 2 月 19 日 - :cve:`2021-23336`"

msgid ""
"Web cache poisoning via ``django.utils.http.limited_parse_qsl()``. `Full "
"description <https://www.djangoproject.com/weblog/2021/feb/19/security-"
"releases/>`__"
msgstr ""
"通过 ``django.utils.http.limited_parse_qsl()`` 进行的网络缓存中毒。`完整描述 "
"<https://www.djangoproject.com/weblog/2021/feb/19/security-releases/>`__。"

msgid "Django 3.2 :commit:`(patch) <be8237c7cce24b06aabde0b97afce98ddabbe3b6>`"
msgstr ""
"Django 3.2 :commit:`（补丁） <be8237c7cce24b06aabde0b97afce98ddabbe3b6>`"

msgid "Django 3.1 :commit:`(patch) <8f6d431b08cbb418d9144b976e7b972546607851>`"
msgstr ""
"Django 3.1 :commit:`（补丁） <8f6d431b08cbb418d9144b976e7b972546607851>`"

msgid "Django 3.0 :commit:`(patch) <326a926beef869d3341bc9ef737887f0449b6b71>`"
msgstr ""
"Django 3.0 :commit:`（补丁） <326a926beef869d3341bc9ef737887f0449b6b71>`"

msgid "Django 2.2 :commit:`(patch) <fd6b6afd5959b638c62dbf4839ccff97e7f7dfda>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <fd6b6afd5959b638c62dbf4839ccff97e7f7dfda>`"

msgid "February 1, 2021 - :cve:`2021-3281`"
msgstr "2021 年 2 月 1 日 - :cve:`2021-3281`"

msgid ""
"Potential directory-traversal via ``archive.extract()``. `Full description "
"<https://www.djangoproject.com/weblog/2021/feb/01/security-releases/>`__"
msgstr ""
"通过 ``archive.extract()`` 进行潜在的目录遍历。`完整说明 <https://www."
"djangoproject.com/weblog/2021/feb/01/security-releases/>`__"

msgid "Django 3.1 :commit:`(patch) <02e6592835b4559909aa3aaaf67988fef435f624>`"
msgstr ""
"Django 3.1 :commit:`（补丁） <02e6592835b4559909aa3aaaf67988fef435f624>`"

msgid "Django 3.0 :commit:`(patch) <52e409ed17287e9aabda847b6afe58be2fa9f86a>`"
msgstr ""
"Django 3.0 :commit:`（补丁） <52e409ed17287e9aabda847b6afe58be2fa9f86a>`"

msgid "Django 2.2 :commit:`(patch) <21e7622dec1f8612c85c2fc37fe8efbfd3311e37>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <21e7622dec1f8612c85c2fc37fe8efbfd3311e37>`"

msgid "September 1, 2020 - :cve:`2020-24584`"
msgstr "2020 年 9 月 1 日 - :cve:`2020-24584`"

msgid ""
"Permission escalation in intermediate-level directories of the file system "
"cache on Python 3.7+. `Full description <https://www.djangoproject.com/"
"weblog/2020/sep/01/security-releases/>`__"
msgstr ""
"在 Python 3.7+ 上，文件系统缓存的中间层目录的权限升级。`完整说明 <https://"
"www.djangoproject.com/weblog/2020/sep/01/security-releases/>`__"

msgid "Django 3.1 :commit:`(patch) <2b099caa5923afa8cfb5f1e8c0d56b6e0e81915b>`"
msgstr ""
"Django 3.1 :commit:`（补丁） <2b099caa5923afa8cfb5f1e8c0d56b6e0e81915b>`"

msgid "Django 3.0 :commit:`(patch) <cdb367c92a0ba72ddc0cbd13ff42b0e6df709554>`"
msgstr ""
"Django 3.0 :commit:`（补丁） <cdb367c92a0ba72ddc0cbd13ff42b0e6df709554>`"

msgid "Django 2.2 :commit:`(patch) <a3aebfdc8153dc230686b6d2454ccd32ed4c9e6f>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <a3aebfdc8153dc230686b6d2454ccd32ed4c9e6f>`"

msgid "September 1, 2020 - :cve:`2020-24583`"
msgstr "2020 年 9 月 1 日 - :cve:`2020-24583`"

msgid ""
"Incorrect permissions on intermediate-level directories on Python 3.7+. "
"`Full description <https://www.djangoproject.com/weblog/2020/sep/01/security-"
"releases/>`__"
msgstr ""
"在 Python 3.7+ 上，中间层目录的权限不正确。`完整说明 <https://www."
"djangoproject.com/weblog/2020/sep/01/security-releases/>`__"

msgid "Django 3.1 :commit:`(patch) <934430d22aa5d90c2ba33495ff69a6a1d997d584>`"
msgstr ""
"Django 3.1 :commit:`（补丁） <934430d22aa5d90c2ba33495ff69a6a1d997d584>`"

msgid "Django 3.0 :commit:`(patch) <08892bffd275c79ee1f8f67639eb170aaaf1181e>`"
msgstr ""
"Django 3.0 :commit:`（补丁） <08892bffd275c79ee1f8f67639eb170aaaf1181e>`"

msgid "Django 2.2 :commit:`(patch) <375657a71c889c588f723469bd868bd1d40c369f>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <375657a71c889c588f723469bd868bd1d40c369f>`"

msgid "June 3, 2020 - :cve:`2020-13596`"
msgstr "2020 年 6 月 3 日 - :cve:`2020-13596`"

msgid ""
"Possible XSS via admin ``ForeignKeyRawIdWidget``. `Full description <https://"
"www.djangoproject.com/weblog/2020/jun/03/security-releases/>`__"
msgstr ""
"可能通过管理 ``ForeignKeyRawIdWidget`` 进行 XSS。`完整说明 <https://www."
"djangoproject.com/weblog/2020/jun/03/security-releases/>`__"

msgid "Django 3.0 :commit:`(patch) <1f2dd37f6fcefdd10ed44cb233b2e62b520afb38>`"
msgstr ""
"Django 3.0 :commit:`（补丁） <1f2dd37f6fcefdd10ed44cb233b2e62b520afb38>`"

msgid "Django 2.2 :commit:`(patch) <6d61860b22875f358fac83d903dc629897934815>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <6d61860b22875f358fac83d903dc629897934815>`"

msgid "June 3, 2020 - :cve:`2020-13254`"
msgstr "2020 年 6 月 3 日 - :cve:`2020-13254`"

msgid ""
"Potential data leakage via malformed memcached keys. `Full description "
"<https://www.djangoproject.com/weblog/2020/jun/03/security-releases/>`__"
msgstr ""
"通过畸形的 memcached 密钥可能造成数据泄露。`完整说明 <https://www."
"djangoproject.com/weblog/2020/jun/03/security-releases/>`__"

msgid "Django 3.0 :commit:`(patch) <84b2da5552e100ae3294f564f6c862fef8d0e693>`"
msgstr ""
"Django 3.0 :commit:`（补丁） <84b2da5552e100ae3294f564f6c862fef8d0e693>`"

msgid "Django 2.2 :commit:`(patch) <07e59caa02831c4569bbebb9eb773bdd9cb4b206>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <07e59caa02831c4569bbebb9eb773bdd9cb4b206>`"

msgid "March 4, 2020 - :cve:`2020-9402`"
msgstr "2020 年 3 月 4 日 - :cve:`2020-9402`"

msgid ""
"Potential SQL injection via ``tolerance`` parameter in GIS functions and "
"aggregates on Oracle. `Full description <https://www.djangoproject.com/"
"weblog/2020/mar/04/security-releases/>`__"
msgstr ""
"针对 Oracle 数据库， 通过 GIS 函数和聚合函数中的  ``tolerance``  参数带来的潜"
"在 SQL 注入。`完整说明 <https://www.djangoproject.com/weblog/2020/mar/04/"
"security-releases/>`__"

msgid "Django 3.0 :commit:`(patch) <26a5cf834526e291db00385dd33d319b8271fc4c>`"
msgstr ""
"Django 3.0 :commit:`（补丁） <26a5cf834526e291db00385dd33d319b8271fc4c>`"

msgid "Django 2.2 :commit:`(patch) <fe886a3b58a93cfbe8864b485f93cb6d426cd1f2>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <fe886a3b58a93cfbe8864b485f93cb6d426cd1f2>`"

msgid ""
"Django 1.11 :commit:`(patch) <02d97f3c9a88adc890047996e5606180bd1c6166>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <02d97f3c9a88adc890047996e5606180bd1c6166>`"

msgid "February 3, 2020 - :cve:`2020-7471`"
msgstr "2020 年 2 月 3 日 - :cve:`2020-7471`"

msgid ""
"Potential SQL injection via ``StringAgg(delimiter)``. `Full description "
"<https://www.djangoproject.com/weblog/2020/feb/03/security-releases/>`__"
msgstr ""
"通过 ``StringAgg(delimiter)`` 带来的潜在 SQL 注入。 `完整说明 <https://www."
"djangoproject.com/weblog/2020/feb/03/security-releases/>`__"

msgid "Django 3.0 :commit:`(patch) <505826b469b16ab36693360da9e11fd13213421b>`"
msgstr ""
"Django 3.0 :commit:`（补丁） <505826b469b16ab36693360da9e11fd13213421b>`"

msgid "Django 2.2 :commit:`(patch) <c67a368c16e4680b324b4f385398d638db4d8147>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <c67a368c16e4680b324b4f385398d638db4d8147>`"

msgid ""
"Django 1.11 :commit:`(patch) <001b0634cd309e372edb6d7d95d083d02b8e37bd>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <001b0634cd309e372edb6d7d95d083d02b8e37bd>`"

msgid "December 18, 2019 - :cve:`2019-19844`"
msgstr "2019 年 12 月 18 日 - :cve:`2019-19844`"

msgid ""
"Potential account hijack via password reset form. `Full description <https://"
"www.djangoproject.com/weblog/2019/dec/18/security-releases/>`__"
msgstr ""
"通过密码重置表单带来的潜在账户劫持。`完整说明 <https://www.djangoproject.com/"
"weblog/2019/dec/18/security-releases/>`__"

msgid "Django 3.0 :commit:`(patch) <302a4ff1e8b1c798aab97673909c7a3dfda42c26>`"
msgstr ""
"Django 3.0 :commit:`（补丁） <302a4ff1e8b1c798aab97673909c7a3dfda42c26>`"

msgid "Django 2.2 :commit:`(patch) <4d334bea06cac63dc1272abcec545b85136cca0e>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <4d334bea06cac63dc1272abcec545b85136cca0e>`"

msgid ""
"Django 1.11 :commit:`(patch) <f4cff43bf921fcea6a29b726eb66767f67753fa2>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <f4cff43bf921fcea6a29b726eb66767f67753fa2>`"

msgid "December 2, 2019 - :cve:`2019-19118`"
msgstr "2019 年 12 月 2 日 - :cve:`2019-19118`"

msgid ""
"Privilege escalation in the Django admin. `Full description <https://www."
"djangoproject.com/weblog/2019/dec/02/security-releases/>`__"
msgstr ""
"在 Django 管理中的特权提升。`完整说明 <https://www.djangoproject.com/"
"weblog/2019/dec/02/security-releases/>`__"

msgid "Django 3.0 :commit:`(patch) <092cd66cf3c3e175acce698d6ca2012068d878fa>`"
msgstr ""
"Django 3.0 :commit:`（补丁） <092cd66cf3c3e175acce698d6ca2012068d878fa>`"

msgid "Django 2.2 :commit:`(patch) <36f580a17f0b3cb087deadf3b65eea024f479c21>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <36f580a17f0b3cb087deadf3b65eea024f479c21>`"

msgid "Django 2.1 :commit:`(patch) <103ebe2b5ff1b2614b85a52c239f471904d26244>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <103ebe2b5ff1b2614b85a52c239f471904d26244>`"

msgid "August 1, 2019 - :cve:`2019-14235`"
msgstr "2019 年 8 月 1 日 - :cve:`2019-14235`"

msgid ""
"Potential memory exhaustion in ``django.utils.encoding.uri_to_iri()``. `Full "
"description <https://www.djangoproject.com/weblog/2019/aug/01/security-"
"releases/>`__"
msgstr ""
"在 ``django.utils.encoding.uri_to_iri()`` 函数中潜在的内存耗尽。 `完整说明 "
"<https://www.djangoproject.com/weblog/2019/aug/01/security-releases/>`__"

msgid "Django 2.2 :commit:`(patch) <cf694e6852b0da7799f8b53f1fb2f7d20cf17534>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <cf694e6852b0da7799f8b53f1fb2f7d20cf17534>`"

msgid "Django 2.1 :commit:`(patch) <5d50a2e5fa36ad23ab532fc54cf4073de84b3306>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <5d50a2e5fa36ad23ab532fc54cf4073de84b3306>`"

msgid ""
"Django 1.11 :commit:`(patch) <869b34e9b3be3a4cfcb3a145f218ffd3f5e3fd79>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <869b34e9b3be3a4cfcb3a145f218ffd3f5e3fd79>`"

msgid "August 1, 2019 - :cve:`2019-14234`"
msgstr "2019 年 8 月 1 日 - :cve:`2019-14234`"

msgid ""
"SQL injection possibility in key and index lookups for ``JSONField``/"
"``HStoreField``. `Full description <https://www.djangoproject.com/"
"weblog/2019/aug/01/security-releases/>`__"
msgstr ""
"针对 ``JSONField`` ／``HStoreField`` 在键和索引查询时带来的潜在 SQL 注入。 `"
"完整说明 <https://www.djangoproject.com/weblog/2019/aug/01/security-releases/"
">`__"

msgid "Django 2.2 :commit:`(patch) <4f5b58f5cd3c57fee9972ab074f8dc6895d8f387>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <4f5b58f5cd3c57fee9972ab074f8dc6895d8f387>`"

msgid "Django 2.1 :commit:`(patch) <f74b3ae3628c26e1b4f8db3d13a91d52a833a975>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <f74b3ae3628c26e1b4f8db3d13a91d52a833a975>`"

msgid ""
"Django 1.11 :commit:`(patch) <ed682a24fca774818542757651bfba576c3fc3ef>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <ed682a24fca774818542757651bfba576c3fc3ef>`"

msgid "August 1, 2019 - :cve:`2019-14233`"
msgstr "2019 年 8 月 1 日 - :cve:`2019-14233`"

msgid ""
"Denial-of-service possibility in ``strip_tags()``. `Full description "
"<https://www.djangoproject.com/weblog/2019/aug/01/security-releases/>`__"
msgstr ""
"存在于 ``strip_tags()`` 函数的拒绝服务攻击。`完整说明 <https://www."
"djangoproject.com/weblog/2019/aug/01/security-releases/>`__"

msgid "Django 2.2 :commit:`(patch) <e34f3c0e9ee5fc9022428fe91640638bafd4cda7>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <e34f3c0e9ee5fc9022428fe91640638bafd4cda7>`"

msgid "Django 2.1 :commit:`(patch) <5ff8e791148bd451180124d76a55cb2b2b9556eb>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <5ff8e791148bd451180124d76a55cb2b2b9556eb>`"

msgid ""
"Django 1.11 :commit:`(patch) <52479acce792ad80bb0f915f20b835f919993c72>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <52479acce792ad80bb0f915f20b835f919993c72>`"

msgid "August 1, 2019 - :cve:`2019-14232`"
msgstr "2019 年 8 月 1 日 - :cve:`2019-14232`"

msgid ""
"Denial-of-service possibility in ``django.utils.text.Truncator``. `Full "
"description <https://www.djangoproject.com/weblog/2019/aug/01/security-"
"releases/>`__"
msgstr ""
"存在于 ``django.utils.text.Truncator`` 的拒绝服务攻击。`完整说明 <https://"
"www.djangoproject.com/weblog/2019/aug/01/security-releases/>`__"

msgid "Django 2.2 :commit:`(patch) <c3289717c6f21a8cf23daff1c78c0c014b94041f>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <c3289717c6f21a8cf23daff1c78c0c014b94041f>`"

msgid "Django 2.1 :commit:`(patch) <c23723a1551340cc7d3126f04fcfd178fa224193>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <c23723a1551340cc7d3126f04fcfd178fa224193>`"

msgid ""
"Django 1.11 :commit:`(patch) <42a66e969023c00536256469f0e8b8a099ef109d>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <42a66e969023c00536256469f0e8b8a099ef109d>`"

msgid "July 1, 2019 - :cve:`2019-12781`"
msgstr "2019 年 7 月 1 日 - :cve:`2019-12781`"

msgid ""
"Incorrect HTTP detection with reverse-proxy connecting via HTTPS. `Full "
"description <https://www.djangoproject.com/weblog/2019/jul/01/security-"
"releases/>`__"
msgstr ""
"通过 HTTPS 连接反向代理的 HTTP 检测不正确。。`完整说明 <https://www."
"djangoproject.com/weblog/2019/jul/01/security-releases/>`__"

msgid "Django 2.2 :commit:`(patch) <77706a3e4766da5d5fb75c4db22a0a59a28e6cd6>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <77706a3e4766da5d5fb75c4db22a0a59a28e6cd6>`"

msgid "Django 2.1 :commit:`(patch) <1e40f427bb8d0fb37cc9f830096a97c36c97af6f>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <1e40f427bb8d0fb37cc9f830096a97c36c97af6f>`"

msgid ""
"Django 1.11 :commit:`(patch) <32124fc41e75074141b05f10fc55a4f01ff7f050>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <32124fc41e75074141b05f10fc55a4f01ff7f050>`"

msgid "June 3, 2019 - :cve:`2019-12308`"
msgstr "2019 年 6 月 3 日 - :cve:`2019-12308`"

msgid ""
"XSS via \"Current URL\" link generated by ``AdminURLFieldWidget``. `Full "
"description <https://www.djangoproject.com/weblog/2019/jun/03/security-"
"releases/>`__"
msgstr ""
"由 ``AdminURLFieldWidget`` 生成的 “Current URL”  连接引起的跨站脚本漏洞。`完"
"整说明 <https://www.djangoproject.com/weblog/2019/jun/03/security-releases/"
">`__"

msgid "Django 2.2 :commit:`(patch) <afddabf8428ddc89a332f7a78d0d21eaf2b5a673>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <afddabf8428ddc89a332f7a78d0d21eaf2b5a673>`"

msgid "Django 2.1 :commit:`(patch) <09186a13d975de6d049f8b3e05484f66b01ece62>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <09186a13d975de6d049f8b3e05484f66b01ece62>`"

msgid ""
"Django 1.11 :commit:`(patch) <c238701859a52d584f349cce15d56c8e8137c52b>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <c238701859a52d584f349cce15d56c8e8137c52b>`"

msgid "June 3, 2019 - :cve:`2019-11358`"
msgstr "2019 年 6 月 3 日 - :cve:`2019-11358`"

msgid ""
"Prototype pollution in bundled jQuery. `Full description <https://www."
"djangoproject.com/weblog/2019/jun/03/security-releases/>`__"
msgstr ""
"捆绑 jQuery 的原型污染。`完整说明 <https://www.djangoproject.com/weblog/2019/"
"jun/03/security-releases/>`__"

msgid "Django 2.2 :commit:`(patch) <baaf187a4e354bf3976c51e2c83a0d2f8ee6e6ad>`"
msgstr ""
"Django 2.2 :commit:`（补丁） <baaf187a4e354bf3976c51e2c83a0d2f8ee6e6ad>`"

msgid "Django 2.1 :commit:`(patch) <95649bc08547a878cebfa1d019edec8cb1b80829>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <95649bc08547a878cebfa1d019edec8cb1b80829>`"

msgid "February 11, 2019 - :cve:`2019-6975`"
msgstr "2019 年 2 月 11 日 - :cve:`2019-6975`"

msgid ""
"Memory exhaustion in ``django.utils.numberformat.format()``. `Full "
"description <https://www.djangoproject.com/weblog/2019/feb/11/security-"
"releases/>`__"
msgstr ""
"``django.utils.numberformat.format()`` 中内存耗尽。`完整说明 <https://www."
"djangoproject.com/weblog/2019/feb/11/security-releases/>`__"

msgid "Django 2.1 :commit:`(patch) <40cd19055773705301c3428ed5e08a036d2091f3>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <40cd19055773705301c3428ed5e08a036d2091f3>`"

msgid ""
"Django 2.0 :commit:`(patch <1f42f82566c9d2d73aff1c42790d6b1b243f7676>` and :"
"commit:`correction) <392e040647403fc8007708d52ce01d915b014849>`"
msgstr ""
"Django 2.0 :commit:`（补丁 <1f42f82566c9d2d73aff1c42790d6b1b243f7676>` 和 :"
"commit:`修正） <392e040647403fc8007708d52ce01d915b014849>`"

msgid ""
"Django 1.11 :commit:`(patch) <0bbb560183fabf0533289700845dafa94951f227>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <0bbb560183fabf0533289700845dafa94951f227>`"

msgid "January 4, 2019 - :cve:`2019-3498`"
msgstr "2019 年 1 月 4 日 - :cve:`2019-3498`"

msgid ""
"Content spoofing possibility in the default 404 page. `Full description "
"<https://www.djangoproject.com/weblog/2019/jan/04/security-releases/>`__"
msgstr ""
"默认 404 页面存在内容欺骗的可能。`完整说明 <https://www.djangoproject.com/"
"weblog/2019/jan/04/security-releases/>`__"

msgid "Django 2.1 :commit:`(patch) <64d2396e83aedba3fcc84ca40f23fbd22f0b9b5b>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <64d2396e83aedba3fcc84ca40f23fbd22f0b9b5b>`"

msgid "Django 2.0 :commit:`(patch) <9f4ed7c94c62e21644ef5115e393ac426b886f2e>`"
msgstr ""
"Django 2.0 :commit:`（补丁） <9f4ed7c94c62e21644ef5115e393ac426b886f2e>`"

msgid ""
"Django 1.11 :commit:`(patch) <1cd00fcf52d089ef0fe03beabd05d59df8ea052a>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <1cd00fcf52d089ef0fe03beabd05d59df8ea052a>`"

msgid "October 1, 2018 - :cve:`2018-16984`"
msgstr "2018 年 10 月 1 日 - :cve:`2018-16984`"

msgid ""
"Password hash disclosure to \"view only\" admin users. `Full description "
"<https://www.djangoproject.com/weblog/2018/oct/01/security-release/>`__"
msgstr ""
"密码哈希值披露给了 “只看” 的管理员用户。`完整说明 <https://www.djangoproject."
"com/weblog/2018/oct/01/security-release/>`__"

msgid "Django 2.1 :commit:`(patch) <c4bd5b597e0aa2432e4c867b86650f18af117851>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <c4bd5b597e0aa2432e4c867b86650f18af117851>`"

msgid "August 1, 2018 - :cve:`2018-14574`"
msgstr "2018 年 8 月 1 日 - :cve:`2018-14574`"

msgid ""
"Open redirect possibility in ``CommonMiddleware``. `Full description "
"<https://www.djangoproject.com/weblog/2018/aug/01/security-releases/>`__"
msgstr ""
"在 ``CommonMiddleware`` 中开放重定向的可能性。`完整说明 <https://www."
"djangoproject.com/weblog/2018/aug/01/security-releases/>`__"

msgid "Django 2.1 :commit:`(patch) <c4e5ff7fdb5fce447675e90291fd33fddd052b3c>`"
msgstr ""
"Django 2.1 :commit:`（补丁） <c4e5ff7fdb5fce447675e90291fd33fddd052b3c>`"

msgid "Django 2.0 :commit:`(patch) <6fffc3c6d420e44f4029d5643f38d00a39b08525>`"
msgstr ""
"Django 2.0 :commit:`（补丁） <6fffc3c6d420e44f4029d5643f38d00a39b08525>`"

msgid ""
"Django 1.11 :commit:`(patch) <d6eaee092709aad477a9894598496c6deec532ff>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <d6eaee092709aad477a9894598496c6deec532ff>`"

msgid "March 6, 2018 - :cve:`2018-7537`"
msgstr "2018 年 3 月 6 日 - :cve:`2018-7537`"

msgid ""
"Denial-of-service possibility in ``truncatechars_html`` and "
"``truncatewords_html`` template filters. `Full description <https://www."
"djangoproject.com/weblog/2018/mar/06/security-releases/>`__"
msgstr ""
"``truncatechars_html`` 和 ``truncatewords_html`` 模板过滤器中存在拒绝服务的可"
"能性。`完整说明 <https://www.djangoproject.com/weblog/2018/mar/06/security-"
"releases/>`__"

msgid "Django 2.0 :commit:`(patch) <94c5da1d17a6b0d378866c66b605102c19f7988c>`"
msgstr ""
"Django 2.0 :commit:`（补丁） <94c5da1d17a6b0d378866c66b605102c19f7988c>`"

msgid ""
"Django 1.11 :commit:`(patch) <a91436360b79a6ff995c3e5018bcc666dfaf1539>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <a91436360b79a6ff995c3e5018bcc666dfaf1539>`"

msgid ""
"Django 1.8  :commit:`(patch) <d17974a287a6ea2e361daff88fcc004cbd6835fa>`"
msgstr ""
"Django 1.8  :commit:`（补丁） <d17974a287a6ea2e361daff88fcc004cbd6835fa>`"

msgid "March 6, 2018 - :cve:`2018-7536`"
msgstr "2018 年 3 月 6 日 - :cve:`2018-7536`"

msgid ""
"Denial-of-service possibility in ``urlize`` and ``urlizetrunc`` template "
"filters. `Full description <https://www.djangoproject.com/weblog/2018/mar/06/"
"security-releases/>`__"
msgstr ""
"``urlize`` 和 ``urlizetrunc`` 模板过滤器中存在拒绝服务的可能性。`完整说明 "
"<https://www.djangoproject.com/weblog/2018/mar/06/security-releases/>`__"

msgid "Django 2.0 :commit:`(patch) <e157315da3ae7005fa0683ffc9751dbeca7306c8>`"
msgstr ""
"Django 2.0 :commit:`（补丁） <e157315da3ae7005fa0683ffc9751dbeca7306c8>`"

msgid ""
"Django 1.11 :commit:`(patch) <abf89d729f210c692a50e0ad3f75fb6bec6fae16>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <abf89d729f210c692a50e0ad3f75fb6bec6fae16>`"

msgid ""
"Django 1.8  :commit:`(patch) <1ca63a66ef3163149ad822701273e8a1844192c2>`"
msgstr ""
"Django 1.8  :commit:`（补丁） <1ca63a66ef3163149ad822701273e8a1844192c2>`"

msgid "February 1, 2018 - :cve:`2018-6188`"
msgstr "2018 年 2 月 1 日 - :cve:`2018-6188`"

msgid ""
"Information leakage in ``AuthenticationForm``. `Full description <https://"
"www.djangoproject.com/weblog/2018/feb/01/security-releases/>`__"
msgstr ""
"``AuthenticationForm`` 中的信息泄露。`完整说明 <https://www.djangoproject."
"com/weblog/2018/feb/01/security-releases/>`__"

msgid "Django 2.0 :commit:`(patch) <c37bb28677295f6edda61d8ac461014ef0d3aeb2>`"
msgstr ""
"Django 2.0 :commit:`（补丁） <c37bb28677295f6edda61d8ac461014ef0d3aeb2>`"

msgid ""
"Django 1.11 :commit:`(patch) <57b95fedad5e0b83fc9c81466b7d1751c6427aae>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <57b95fedad5e0b83fc9c81466b7d1751c6427aae>`"

msgid "September 5, 2017 - :cve:`2017-12794`"
msgstr "2017 年 9 月 5 日 - :cve:`2017-12794`"

msgid ""
"Possible XSS in traceback section of technical 500 debug page. `Full "
"description <https://www.djangoproject.com/weblog/2017/sep/05/security-"
"releases/>`__"
msgstr ""
"在技术 500 调试页面的回溯部分可能存在 XSS。`完整说明 <https://www."
"djangoproject.com/weblog/2017/sep/05/security-releases/>`__"

msgid ""
"Django 1.11 :commit:`(patch) <e35a0c56086924f331e9422daa266e907a4784cc>`"
msgstr ""
"Django 1.11 :commit:`（补丁） <e35a0c56086924f331e9422daa266e907a4784cc>`"

msgid ""
"Django 1.10 :commit:`(patch) <58e08e80e362db79eb0fd775dc81faad90dca47a>`"
msgstr ""
"Django 1.10 :commit:`（补丁） <58e08e80e362db79eb0fd775dc81faad90dca47a>`"

msgid "April 4, 2017 - :cve:`2017-7234`"
msgstr "2017 年 4 月 4 日 - :cve:`2017-7234`"

msgid ""
"Open redirect vulnerability in ``django.views.static.serve()``. `Full "
"description <https://www.djangoproject.com/weblog/2017/apr/04/security-"
"releases/>`__"
msgstr ""
"``django.views.static.service()`` 中的开放重定向漏洞。`完整说明 <https://www."
"djangoproject.com/weblog/2017/apr/04/security-releases/>`__"

msgid ""
"Django 1.10 :commit:`(patch) <2a9f6ef71b8e23fd267ee2be1be26dde8ab67037>`"
msgstr ""
"Django 1.10 :commit:`（补丁） <2a9f6ef71b8e23fd267ee2be1be26dde8ab67037>`"

msgid "Django 1.9 :commit:`(patch) <5f1ffb07afc1e59729ce2b283124116d6c0659e4>`"
msgstr ""
"Django 1.9 :commit:`（补丁） <5f1ffb07afc1e59729ce2b283124116d6c0659e4>`"

msgid "Django 1.8 :commit:`(patch) <4a6b945dffe8d10e7cec107d93e6efaebfbded29>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <4a6b945dffe8d10e7cec107d93e6efaebfbded29>`"

msgid "April 4, 2017 - :cve:`2017-7233`"
msgstr "2017 年 4 月 4 日 - :cve:`2017-7233`"

msgid ""
"Open redirect and possible XSS attack via user-supplied numeric redirect "
"URLs. `Full description <https://www.djangoproject.com/weblog/2017/apr/04/"
"security-releases/>`__"
msgstr ""
"通过用户提供的数字重定向 URL 打开重定向和可能的 XSS 攻击。`完整说明 <https://"
"www.djangoproject.com/weblog/2017/apr/04/security-releases/>`__"

msgid ""
"Django 1.10 :commit:`(patch) <f824655bc2c50b19d2f202d7640785caabc82787>`"
msgstr ""
"Django 1.10 :commit:`（补丁） <f824655bc2c50b19d2f202d7640785caabc82787>`"

msgid "Django 1.9 :commit:`(patch) <254326cb3682389f55f886804d2c43f7b9f23e4f>`"
msgstr ""
"Django 1.9 :commit:`（补丁） <254326cb3682389f55f886804d2c43f7b9f23e4f>`"

msgid "Django 1.8 :commit:`(patch) <8339277518c7d8ec280070a780915304654e3b66>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <8339277518c7d8ec280070a780915304654e3b66>`"

msgid "November 1, 2016 - :cve:`2016-9014`"
msgstr "2016 年 11 月 1 日 - :cve:`2016-9014`"

msgid ""
"DNS rebinding vulnerability when ``DEBUG=True``. `Full description <https://"
"www.djangoproject.com/weblog/2016/nov/01/security-releases/>`__"
msgstr ""
"当 ``DEBUG=Tr`` 时，DNS 重绑定漏洞。`完整说明 <https://www.djangoproject.com/"
"weblog/2016/nov/01/security-releases/>`__"

msgid ""
"Django 1.10 :commit:`(patch) <884e113838e5a72b4b0ec9e5e87aa480f6aa4472>`"
msgstr ""
"Django 1.10 :commit:`（补丁） <884e113838e5a72b4b0ec9e5e87aa480f6aa4472>`"

msgid "Django 1.9 :commit:`(patch) <45acd6d836895a4c36575f48b3fb36a3dae98d19>`"
msgstr ""
"Django 1.9 :commit:`（补丁） <45acd6d836895a4c36575f48b3fb36a3dae98d19>`"

msgid "Django 1.8 :commit:`(patch) <c401ae9a7dfb1a94a8a61927ed541d6f93089587>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <c401ae9a7dfb1a94a8a61927ed541d6f93089587>`"

msgid "November 1, 2016 - :cve:`2016-9013`"
msgstr "2016 年 11 月 1 日 - :cve:`2016-9013`"

msgid ""
"User with hardcoded password created when running tests on Oracle. `Full "
"description <https://www.djangoproject.com/weblog/2016/nov/01/security-"
"releases/>`__"
msgstr ""
"在 Oracle 上运行测试时创建的带有硬编码密码的用户。`完整说明 <https://www."
"djangoproject.com/weblog/2016/nov/01/security-releases/>`__"

msgid ""
"Django 1.10 :commit:`(patch) <34e10720d81b8d407aa14d763b6a7fe8f13b4f2e>`"
msgstr ""
"Django 1.10 :commit:`（补丁） <34e10720d81b8d407aa14d763b6a7fe8f13b4f2e>`"

msgid "Django 1.9 :commit:`(patch) <4844d86c7728c1a5a3bbce4ad336a8d32304072b>`"
msgstr ""
"Django 1.9 :commit:`（补丁） <4844d86c7728c1a5a3bbce4ad336a8d32304072b>`"

msgid "Django 1.8 :commit:`(patch) <70f99952965a430daf69eeb9947079aae535d2d0>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <70f99952965a430daf69eeb9947079aae535d2d0>`"

msgid "September 26, 2016 - :cve:`2016-7401`"
msgstr "2016 年 9 月 26 日 - :cve:`2016-7401`"

msgid ""
"CSRF protection bypass on a site with Google Analytics. `Full description "
"<https://www.djangoproject.com/weblog/2016/sep/26/security-releases/>`__"
msgstr ""
"在有 Google Analytics 的网站上绕过 CSRF 保护。`完整说明 <https://www."
"djangoproject.com/weblog/2016/sep/26/security-releases/>`__"

msgid "Django 1.9 :commit:`(patch) <d1bc980db1c0fffd6d60677e62f70beadb9fe64a>`"
msgstr ""
"Django 1.9 :commit:`（补丁） <d1bc980db1c0fffd6d60677e62f70beadb9fe64a>`"

msgid "Django 1.8 :commit:`(patch) <6118ab7d0676f0d622278e5be215f14fb5410b6a>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <6118ab7d0676f0d622278e5be215f14fb5410b6a>`"

msgid "July 18, 2016 - :cve:`2016-6186`"
msgstr "2016 年 7 月 18 日 - :cve:`2016-6186`"

msgid ""
"XSS in admin's add/change related popup. `Full description <https://www."
"djangoproject.com/weblog/2016/jul/18/security-releases/>`__"
msgstr ""
"管理员的添加／更改相关弹窗中的 XSS。`完整说明 <https://www.djangoproject.com/"
"weblog/2016/jul/18/security-releases/>`__"

msgid "Django 1.9 :commit:`(patch) <d03bf6fe4e9bf5b07de62c1a271c4b41a7d3d158>`"
msgstr ""
"Django 1.9 :commit:`（补丁） <d03bf6fe4e9bf5b07de62c1a271c4b41a7d3d158>`"

msgid "Django 1.8 :commit:`(patch) <f68e5a99164867ab0e071a936470958ed867479d>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <f68e5a99164867ab0e071a936470958ed867479d>`"

msgid "March 1, 2016 - :cve:`2016-2513`"
msgstr "2016 年 3 月 1 日 - :cve:`2016-2513`"

msgid ""
"User enumeration through timing difference on password hasher work factor "
"upgrade. `Full description <https://www.djangoproject.com/weblog/2016/mar/01/"
"security-releases/>`__"
msgstr ""
"通过时间差对密码哈希工作因子升级进行用户枚举。`完整说明 <https://www."
"djangoproject.com/weblog/2016/mar/01/security-releases/>`__"

msgid "Django 1.9 :commit:`(patch) <af7d09b0c5c6ab68e629fd9baf736f9dd203b18e>`"
msgstr ""
"Django 1.9 :commit:`（补丁） <af7d09b0c5c6ab68e629fd9baf736f9dd203b18e>`"

msgid "Django 1.8 :commit:`(patch) <f4e6e02f7713a6924d16540be279909ff4091eb6>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <f4e6e02f7713a6924d16540be279909ff4091eb6>`"

msgid "March 1, 2016 - :cve:`2016-2512`"
msgstr "2016 年 3 月 1 日 - :cve:`2016-2512`"

msgid ""
"Malicious redirect and possible XSS attack via user-supplied redirect URLs "
"containing basic auth. `Full description <https://www.djangoproject.com/"
"weblog/2016/mar/01/security-releases/>`__"
msgstr ""
"通过用户提供的包含基本认证的重定向 URL 进行恶意重定向和可能的 XSS 攻击。`完整"
"说明 <https://www.djangoproject.com/weblog/2016/mar/01/security-releases/>`__"

msgid "Django 1.9 :commit:`(patch) <fc6d147a63f89795dbcdecb0559256470fff4380>`"
msgstr ""
"Django 1.9 :commit:`（补丁） <fc6d147a63f89795dbcdecb0559256470fff4380>`"

msgid "Django 1.8 :commit:`(patch) <382ab137312961ad62feb8109d70a5a581fe8350>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <382ab137312961ad62feb8109d70a5a581fe8350>`"

msgid "February 1, 2016 - :cve:`2016-2048`"
msgstr "2016 年 2 月 1 日 - :cve:`2016-2048`"

msgid ""
"User with \"change\" but not \"add\" permission can create objects for "
"``ModelAdmin``’s with ``save_as=True``. `Full description <https://www."
"djangoproject.com/weblog/2016/feb/01/releases-192-and-189/>`__"
msgstr ""
"拥有 “变更” 而非 “添加” 权限的用户可以用 “保存为 True” 为 ``ModelAdmin`` 创建"
"对象。`完整说明 <https://www.djangoproject.com/weblog/2016/feb/01/"
"releases-192-and-189/>`__"

msgid "Django 1.9 :commit:`(patch) <adbca5e4db42542575734b8e5d26961c8ada7265>`"
msgstr ""
"Django 1.9 :commit:`（补丁） <adbca5e4db42542575734b8e5d26961c8ada7265>`"

msgid "November 24, 2015 - :cve:`2015-8213`"
msgstr "2015 年 11 月 24 日 - :cve:`2015-8213`"

msgid ""
"Settings leak possibility in ``date`` template filter. `Full description "
"<https://www.djangoproject.com/weblog/2015/nov/24/security-releases-issued/"
">`__"
msgstr ""
"``date`` 模板过滤器存在设置泄漏可能性。详细信息请查看 `完整描述 <https://www."
"djangoproject.com/weblog/2015/nov/24/security-releases-issued/>`__"

msgid "Django 1.8 :commit:`(patch) <9f83fc2f66f5a0bac7c291aec55df66050bb6991>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <9f83fc2f66f5a0bac7c291aec55df66050bb6991>`"

msgid "Django 1.7 :commit:`(patch) <8a01c6b53169ee079cb21ac5919fdafcc8c5e172>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <8a01c6b53169ee079cb21ac5919fdafcc8c5e172>`"

msgid "August 18, 2015 - :cve:`2015-5963` / :cve:`2015-5964`"
msgstr "2015 年 8 月 18 日 - :cve:`2015-5963` / :cve:`2015-5964`"

msgid ""
"Denial-of-service possibility in ``logout()`` view by filling session store. "
"`Full description <https://www.djangoproject.com/weblog/2015/aug/18/security-"
"releases/>`__"
msgstr ""
"通过填充会话存储，存在 ``logout()`` 视图的拒绝服务可能性。详细信息请查看 `完"
"整描述 <https://www.djangoproject.com/weblog/2015/aug/18/security-releases/"
">`__"

msgid "Django 1.8 :commit:`(patch) <2eb86b01d7b59be06076f6179a454d0fd0afaff6>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <2eb86b01d7b59be06076f6179a454d0fd0afaff6>`"

msgid "Django 1.7 :commit:`(patch) <2f5485346ee6f84b4e52068c04e043092daf55f7>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <2f5485346ee6f84b4e52068c04e043092daf55f7>`"

msgid "Django 1.4 :commit:`(patch) <575f59f9bc7c59a5e41a081d1f5f55fc859c5012>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <575f59f9bc7c59a5e41a081d1f5f55fc859c5012>`"

msgid "July 8, 2015 - :cve:`2015-5145`"
msgstr "2015 年 7 月 8 日 - :cve:`2015-5145`"

msgid ""
"Denial-of-service possibility in URL validation. `Full description <https://"
"www.djangoproject.com/weblog/2015/jul/08/security-releases/>`__"
msgstr ""
"URL 验证中存在拒绝服务可能性。详细信息请查看 `完整描述 <https://www."
"djangoproject.com/weblog/2015/jul/08/security-releases/>`__"

msgid "Django 1.8 :commit:`(patch) <8f9a4d3a2bc42f14bb437defd30c7315adbff22c>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <8f9a4d3a2bc42f14bb437defd30c7315adbff22c>`"

msgid "July 8, 2015 - :cve:`2015-5144`"
msgstr "2015 年 7 月 8 日 - :cve:`2015-5144`"

msgid ""
"Header injection possibility since validators accept newlines in input. "
"`Full description <https://www.djangoproject.com/weblog/2015/jul/08/security-"
"releases/>`__"
msgstr ""
"由于验证器接受输入中的换行符，存在标头注入可能性。详细信息请查看 `完整描述 "
"<https://www.djangoproject.com/weblog/2015/jul/08/security-releases/>`__"

msgid "Django 1.8 :commit:`(patch) <574dd5e0b0fbb877ae5827b1603d298edc9bb2a0>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <574dd5e0b0fbb877ae5827b1603d298edc9bb2a0>`"

msgid "Django 1.7 :commit:`(patch) <ae49b4d994656bc037513dcd064cb9ce5bb85649>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <ae49b4d994656bc037513dcd064cb9ce5bb85649>`"

msgid "Django 1.4 :commit:`(patch) <1ba1cdce7d58e6740fe51955d945b56ae51d072a>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <1ba1cdce7d58e6740fe51955d945b56ae51d072a>`"

msgid "July 8, 2015 - :cve:`2015-5143`"
msgstr "2015 年 7 月 8 日 - :cve:`2015-5143`"

msgid ""
"Denial-of-service possibility by filling session store. `Full description "
"<https://www.djangoproject.com/weblog/2015/jul/08/security-releases/>`__"
msgstr ""
"通过填充会话存储存在拒绝服务可能性。详细信息请查看 `完整描述 <https://www."
"djangoproject.com/weblog/2015/jul/08/security-releases/>`__"

msgid "Django 1.8 :commit:`(patch) <66d12d1ababa8f062857ee5eb43276493720bf16>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <66d12d1ababa8f062857ee5eb43276493720bf16>`"

msgid "Django 1.7 :commit:`(patch) <1828f4341ec53a8684112d24031b767eba557663>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <1828f4341ec53a8684112d24031b767eba557663>`"

msgid "Django 1.4 :commit:`(patch) <2e47f3e401c29bc2ba5ab794d483cb0820855fb9>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <2e47f3e401c29bc2ba5ab794d483cb0820855fb9>`"

msgid "May 20, 2015 - :cve:`2015-3982`"
msgstr "2015 年 5 月 20 日 - :cve:`2015-3982`"

msgid ""
"Fixed session flushing in the cached_db backend. `Full description <https://"
"www.djangoproject.com/weblog/2015/may/20/security-release/>`__"
msgstr ""
"修复了 cached_db 后端中的会话刷新问题。详细信息请查看 `完整描述 <https://www."
"djangoproject.com/weblog/2015/may/20/security-release/>`__"

msgid "Django 1.8 :commit:`(patch) <31cb25adecba930bdeee4556709f5a1c42d88fd6>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <31cb25adecba930bdeee4556709f5a1c42d88fd6>`"

msgid "March 18, 2015 - :cve:`2015-2317`"
msgstr "2015 年 3 月 18 日 - :cve:`2015-2317`"

msgid ""
"Mitigated possible XSS attack via user-supplied redirect URLs. `Full "
"description <https://www.djangoproject.com/weblog/2015/mar/18/security-"
"releases/>`__"
msgstr ""
"通过用户提供的重定向 URL 缓解了可能的跨站脚本（XSS）攻击。详细信息请查看 `完"
"整描述 <https://www.djangoproject.com/weblog/2015/mar/18/security-releases/"
">`__"

msgid "Django 1.4 :commit:`(patch) <2342693b31f740a422abf7267c53b4e7bc487c1b>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <2342693b31f740a422abf7267c53b4e7bc487c1b>`"

msgid "Django 1.6 :commit:`(patch) <5510f070711540aaa8d3707776cd77494e688ef9>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <5510f070711540aaa8d3707776cd77494e688ef9>`"

msgid "Django 1.7 :commit:`(patch) <2a4113dbd532ce952308992633d802dc169a75f1>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <2a4113dbd532ce952308992633d802dc169a75f1>`"

msgid "Django 1.8 :commit:`(patch) <770427c2896a078925abfca2317486b284d22f04>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <770427c2896a078925abfca2317486b284d22f04>`"

msgid "March 18, 2015 - :cve:`2015-2316`"
msgstr "2015年 3 月 18 日 - :cve:`2015-2316`"

msgid ""
"Denial-of-service possibility with ``strip_tags()``. `Full description "
"<https://www.djangoproject.com/weblog/2015/mar/18/security-releases/>`__"
msgstr ""
"使用 ``strip_tags()`` 存在拒绝服务可能性。详细信息请查看 `完整描述 <https://"
"www.djangoproject.com/weblog/2015/mar/18/security-releases/>`__"

msgid "Django 1.6 :commit:`(patch) <b6b3cb9899214a23ebb0f4ebf0e0b300b0ee524f>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <b6b3cb9899214a23ebb0f4ebf0e0b300b0ee524f>`"

msgid "Django 1.7 :commit:`(patch) <e63363f8e075fa8d66326ad6a1cc3391cc95cd97>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <e63363f8e075fa8d66326ad6a1cc3391cc95cd97>`"

msgid "Django 1.8 :commit:`(patch) <5447709a571cd5d95971f1d5d21d4a7edcf85bbd>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <5447709a571cd5d95971f1d5d21d4a7edcf85bbd>`"

msgid "March 9, 2015 - :cve:`2015-2241`"
msgstr "2015 年 3 月9 日 - :cve:`2015-2241`"

msgid ""
"XSS attack via properties in ``ModelAdmin.readonly_fields``. `Full "
"description <https://www.djangoproject.com/weblog/2015/mar/09/security-"
"releases/>`__"
msgstr ""
"通过 ``ModelAdmin.readonly_fields`` 中的属性存在跨站脚本（XSS）攻击漏洞。详细"
"信息请查看 `完整描述 <https://www.djangoproject.com/weblog/2015/mar/09/"
"security-releases/>`__"

msgid "Django 1.7 :commit:`(patch) <d16e4e1d6f95e6f46bff53cc4fd0ab398b8e5059>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <d16e4e1d6f95e6f46bff53cc4fd0ab398b8e5059>`"

msgid "Django 1.8 :commit:`(patch) <2654e1b93923bac55f12b4e66c5e39b16695ace5>`"
msgstr ""
"Django 1.8 :commit:`（补丁） <2654e1b93923bac55f12b4e66c5e39b16695ace5>`"

msgid "January 13, 2015 - :cve:`2015-0222`"
msgstr "2015 年 1 月 13 日 - :cve:`2015-0222`"

msgid ""
"Database denial-of-service with ``ModelMultipleChoiceField``. `Full "
"description <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""
"使用 ``ModelMultipleChoiceField`` 存在数据库拒绝服务漏洞。详细信息请查看 `完"
"整描述 <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"

msgid "Django 1.6 :commit:`(patch) <d7a06ee7e571b6dad07c0f5b519b1db02e2a476c>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <d7a06ee7e571b6dad07c0f5b519b1db02e2a476c>`"

msgid "Django 1.7 :commit:`(patch) <bcfb47780ce7caecb409a9e9c1c314266e41d392>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <bcfb47780ce7caecb409a9e9c1c314266e41d392>`"

msgid "January 13, 2015 - :cve:`2015-0221`"
msgstr "2015 年 1 月 13 日 - :cve:`2015-0221`"

msgid ""
"Denial-of-service attack against ``django.views.static.serve()``. `Full "
"description <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""
"存在针对 ``django.views.static.serve()`` 的拒绝服务攻击漏洞。详细信息请查看 `"
"完整描述 <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"

msgid "Django 1.4 :commit:`(patch) <d020da6646c5142bc092247d218a3d1ce3e993f7>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <d020da6646c5142bc092247d218a3d1ce3e993f7>`"

msgid "Django 1.6 :commit:`(patch) <553779c4055e8742cc832ed525b9ee34b174934f>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <553779c4055e8742cc832ed525b9ee34b174934f>`"

msgid "Django 1.7 :commit:`(patch) <818e59a3f0fbadf6c447754d202d88df025f8f2a>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <818e59a3f0fbadf6c447754d202d88df025f8f2a>`"

msgid "January 13, 2015 - :cve:`2015-0220`"
msgstr "2015 年 1 月 13 日 - :cve:`2015-0220`"

msgid ""
"Mitigated possible XSS attack via user-supplied redirect URLs. `Full "
"description <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""
"通过用户提供的重定向 URL 缓解了可能的跨站脚本（XSS）攻击。详细信息请查看 `完"
"整描述 <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"

msgid "Django 1.4 :commit:`(patch) <4c241f1b710da6419d9dca160e80b23b82db7758>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <4c241f1b710da6419d9dca160e80b23b82db7758>`"

msgid "Django 1.6 :commit:`(patch) <72e0b033662faa11bb7f516f18a132728aa0ae28>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <72e0b033662faa11bb7f516f18a132728aa0ae28>`"

msgid "Django 1.7 :commit:`(patch) <de67dedc771ad2edec15c1d00c083a1a084e1e89>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <de67dedc771ad2edec15c1d00c083a1a084e1e89>`"

msgid "January 13, 2015 - :cve:`2015-0219`"
msgstr "2015 年 1 月 13 日 - :cve:`2015-0219`"

msgid ""
"WSGI header spoofing via underscore/dash conflation. `Full description "
"<https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""
"通过下划线/短横线混合欺骗 WSGI 标头。`完整描述 <https://www.djangoproject."
"com/weblog/2015/jan/13/security/>`__"

msgid "Django 1.4 :commit:`(patch) <4f6fffc1dc429f1ad428ecf8e6620739e8837450>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <4f6fffc1dc429f1ad428ecf8e6620739e8837450>`"

msgid "Django 1.6 :commit:`(patch) <d7597b31d5c03106eeba4be14a33b32a5e25f4ee>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <d7597b31d5c03106eeba4be14a33b32a5e25f4ee>`"

msgid "Django 1.7 :commit:`(patch) <41b4bc73ee0da7b2e09f4af47fc1fd21144c710f>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <41b4bc73ee0da7b2e09f4af47fc1fd21144c710f>`"

msgid "August 20, 2014 - :cve:`2014-0483`"
msgstr "2014 年 8 月 20 日 - :cve:`2014-0483`"

msgid ""
"Data leakage via querystring manipulation in admin. `Full description "
"<https://www.djangoproject.com/weblog/2014/aug/20/security/>`__"
msgstr ""
"在管理员中通过查询字符串操纵导致数据泄漏。`完整描述 <https://www."
"djangoproject.com/weblog/2014/aug/20/security/>`__"

msgid "Django 1.4 :commit:`(patch) <027bd348642007617518379f8b02546abacaa6e0>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <027bd348642007617518379f8b02546abacaa6e0>`"

msgid "Django 1.5 :commit:`(patch) <2a446c896e7c814661fb9c4f212b071b2a7fa446>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <2a446c896e7c814661fb9c4f212b071b2a7fa446>`"

msgid "Django 1.6 :commit:`(patch) <f7c494f2506250b8cb5923714360a3642ed63e0f>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <f7c494f2506250b8cb5923714360a3642ed63e0f>`"

msgid "Django 1.7 :commit:`(patch) <2b31342cdf14fc20e07c43d258f1e7334ad664a6>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <2b31342cdf14fc20e07c43d258f1e7334ad664a6>`"

msgid "August 20, 2014 - :cve:`2014-0482`"
msgstr "2014 年 8 月 20 日 - :cve:`2014-0482`"

msgid ""
"``RemoteUserMiddleware`` session hijacking. `Full description <https://www."
"djangoproject.com/weblog/2014/aug/20/security/>`__"
msgstr ""
"``RemoteUserMiddleware`` 会话劫持。`完整描述 <https://www.djangoproject.com/"
"weblog/2014/aug/20/security/>`__"

msgid "Django 1.4 :commit:`(patch) <c9e3b9949cd55f090591fbdc4a114fcb8368b6d9>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <c9e3b9949cd55f090591fbdc4a114fcb8368b6d9>`"

msgid "Django 1.5 :commit:`(patch) <dd68f319b365f6cb38c5a6c106faf4f6142d7d88>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <dd68f319b365f6cb38c5a6c106faf4f6142d7d88>`"

msgid "Django 1.6 :commit:`(patch) <0268b855f9eab3377f2821164ef3e66037789e09>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <0268b855f9eab3377f2821164ef3e66037789e09>`"

msgid "Django 1.7 :commit:`(patch) <1a45d059c70385fcd6f4a3955f3b4e4cc96d0150>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <1a45d059c70385fcd6f4a3955f3b4e4cc96d0150>`"

msgid "August 20, 2014 - :cve:`2014-0481`"
msgstr "2014 年 8 月 20 日 - :cve:`2014-0481`"

msgid ""
"File upload denial of service. `Full description <https://www.djangoproject."
"com/weblog/2014/aug/20/security/>`__"
msgstr ""
"文件上传拒绝服务。`完整描述 <https://www.djangoproject.com/weblog/2014/"
"aug/20/security/>`__"

msgid "Django 1.4 :commit:`(patch) <30042d475bf084c6723c6217a21598d9247a9c41>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <30042d475bf084c6723c6217a21598d9247a9c41>`"

msgid "Django 1.5 :commit:`(patch) <26cd48e166ac4d84317c8ee6d63ac52a87e8da99>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <26cd48e166ac4d84317c8ee6d63ac52a87e8da99>`"

msgid "Django 1.6 :commit:`(patch) <dd0c3f4ee1a30c1a1e6055061c6ba6e58c6b54d1>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <dd0c3f4ee1a30c1a1e6055061c6ba6e58c6b54d1>`"

msgid "Django 1.7 :commit:`(patch) <3123f8452cf49071be9110e277eea60ba0032216>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <3123f8452cf49071be9110e277eea60ba0032216>`"

msgid "August 20, 2014 - :cve:`2014-0480`"
msgstr "2014 年 8 月 20 日 - :cve:`2014-0480`"

msgid ""
"``reverse()`` can generate URLs pointing to other hosts. `Full description "
"<https://www.djangoproject.com/weblog/2014/aug/20/security/>`__"
msgstr ""
"``reverse()`` 可以生成指向其他主机的 URL。`完整描述 <https://www."
"djangoproject.com/weblog/2014/aug/20/security/>`__"

msgid "Django 1.4 :commit:`(patch) <c2fe73133b62a1d9e8f7a6b43966570b14618d7e>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <c2fe73133b62a1d9e8f7a6b43966570b14618d7e>`"

msgid "Django 1.5 :commit:`(patch) <45ac9d4fb087d21902469fc22643f5201d41a0cd>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <45ac9d4fb087d21902469fc22643f5201d41a0cd>`"

msgid "Django 1.6 :commit:`(patch) <da051da8df5e69944745072611351d4cfc6435d5>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <da051da8df5e69944745072611351d4cfc6435d5>`"

msgid "Django 1.7 :commit:`(patch) <bf650a2ee78c6d1f4544a875dcc777cf27fe93e9>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <bf650a2ee78c6d1f4544a875dcc777cf27fe93e9>`"

msgid "May 18, 2014 - :cve:`2014-3730`"
msgstr "2014 年 5 月 18 日 - :cve:`2014-3730`"

msgid ""
"Malformed URLs from user input incorrectly validated. `Full description "
"<https://www.djangoproject.com/weblog/2014/may/14/security-releases-issued/"
">`__"
msgstr ""
"来自用户输入的格式不正确的 URL 被错误验证。`完整描述 <https://www."
"djangoproject.com/weblog/2014/may/14/security-releases-issued/>`__"

msgid "Django 1.4 :commit:`(patch) <7feb54bbae3f637ab3c4dd4831d4385964f574df>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <7feb54bbae3f637ab3c4dd4831d4385964f574df>`"

msgid "Django 1.5 :commit:`(patch) <ad32c218850ad40972dcef57beb460f8c979dd6d>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <ad32c218850ad40972dcef57beb460f8c979dd6d>`"

msgid "Django 1.6 :commit:`(patch) <601107524523bca02376a0ddc1a06c6fdb8f22f3>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <601107524523bca02376a0ddc1a06c6fdb8f22f3>`"

msgid "Django 1.7 :commit:`(patch) <e7b0cace455c2da24492660636bfd48c45a19cdf>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <e7b0cace455c2da24492660636bfd48c45a19cdf>`"

msgid "May 18, 2014 - :cve:`2014-1418`"
msgstr "2014 年 5 月 18 日 - :cve:`2014-1418`"

msgid ""
"Caches may be allowed to store and serve private data. `Full description "
"<https://www.djangoproject.com/weblog/2014/may/14/security-releases-issued/"
">`__"
msgstr ""
"缓存可能允许存储和提供私人数据。`完整描述 <https://www.djangoproject.com/"
"weblog/2014/may/14/security-releases-issued/>`__"

msgid "Django 1.4 :commit:`(patch) <28e23306aa53bbbb8fb87db85f99d970b051026c>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <28e23306aa53bbbb8fb87db85f99d970b051026c>`"

msgid "Django 1.5 :commit:`(patch) <4001ec8698f577b973c5a540801d8a0bbea1205b>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <4001ec8698f577b973c5a540801d8a0bbea1205b>`"

msgid "Django 1.6 :commit:`(patch) <1abcf3a808b35abae5d425ed4d44cb6e886dc769>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <1abcf3a808b35abae5d425ed4d44cb6e886dc769>`"

msgid "Django 1.7 :commit:`(patch) <7fef18ba9e5a8b47bc24b5bb259c8bf3d3879f2a>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <7fef18ba9e5a8b47bc24b5bb259c8bf3d3879f2a>`"

msgid "April 21, 2014 - :cve:`2014-0474`"
msgstr "2014 年 4 月 21 日 - :cve:`2014-0474`"

msgid ""
"MySQL typecasting causes unexpected query results. `Full description "
"<https://www.djangoproject.com/weblog/2014/apr/21/security/>`__"
msgstr ""
"MySQL 类型转换导致意外的查询结果。`完整描述 <https://www.djangoproject.com/"
"weblog/2014/apr/21/security/>`__"

msgid "Django 1.4 :commit:`(patch) <aa80f498de6d687e613860933ac58433ab71ea4b>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <aa80f498de6d687e613860933ac58433ab71ea4b>`"

msgid "Django 1.5 :commit:`(patch) <985434fb1d6bf2335bf96c6ebf91c3674f1f399f>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <985434fb1d6bf2335bf96c6ebf91c3674f1f399f>`"

msgid "Django 1.6 :commit:`(patch) <5f0829a27e85d89ad8c433f5c6a7a7d17c9e9292>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <5f0829a27e85d89ad8c433f5c6a7a7d17c9e9292>`"

msgid "Django 1.7 :commit:`(patch) <34526c2f56b863c2103655a0893ac801667e86ea>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <34526c2f56b863c2103655a0893ac801667e86ea>`"

msgid "April 21, 2014 - :cve:`2014-0473`"
msgstr "2014 年 4 月 21 日 - :cve:`2014-0473`"

msgid ""
"Caching of anonymous pages could reveal CSRF token. `Full description "
"<https://www.djangoproject.com/weblog/2014/apr/21/security/>`__"
msgstr ""
"匿名页面的缓存可能会显示 CSRF 令牌。`完整描述 <https://www.djangoproject.com/"
"weblog/2014/apr/21/security/>`__"

msgid "Django 1.4 :commit:`(patch) <1170f285ddd6a94a65f911a27788ba49ca08c0b0>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <1170f285ddd6a94a65f911a27788ba49ca08c0b0>`"

msgid "Django 1.5 :commit:`(patch) <6872f42757d7ef6a97e0b6ec5db4d2615d8a2bd8>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <6872f42757d7ef6a97e0b6ec5db4d2615d8a2bd8>`"

msgid "Django 1.6 :commit:`(patch) <d63e20942f3024f24cb8cd85a49461ba8a9b6736>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <d63e20942f3024f24cb8cd85a49461ba8a9b6736>`"

msgid "Django 1.7 :commit:`(patch) <380545bf85cbf17fc698d136815b7691f8d023ca>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <380545bf85cbf17fc698d136815b7691f8d023ca>`"

msgid "April 21, 2014 - :cve:`2014-0472`"
msgstr "2014 年 4 月 21 日 - :cve:`2014-0472`"

msgid ""
"Unexpected code execution using ``reverse()``. `Full description <https://"
"www.djangoproject.com/weblog/2014/apr/21/security/>`__"
msgstr ""
"使用 ``reverse()`` 导致意外的代码执行。`完整描述 <https://www.djangoproject."
"com/weblog/2014/apr/21/security/>`__"

msgid "Django 1.4 :commit:`(patch) <c1a8c420fe4b27fb2caf5e46d23b5712fc0ac535>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <c1a8c420fe4b27fb2caf5e46d23b5712fc0ac535>`"

msgid "Django 1.5 :commit:`(patch) <2a5bcb69f42b84464b24b5c835dca6467b6aa7f1>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <2a5bcb69f42b84464b24b5c835dca6467b6aa7f1>`"

msgid "Django 1.6 :commit:`(patch) <4352a50871e239ebcdf64eee6f0b88e714015c1b>`"
msgstr ""
"Django 1.6 :commit:`（补丁） <4352a50871e239ebcdf64eee6f0b88e714015c1b>`"

msgid "Django 1.7 :commit:`(patch) <546740544d7f69254a67b06a3fc7fa0c43512958>`"
msgstr ""
"Django 1.7 :commit:`（补丁） <546740544d7f69254a67b06a3fc7fa0c43512958>`"

msgid "September 14, 2013 - :cve:`2013-1443`"
msgstr "2013 年 9 月 14 日 - :cve:`2013-1443`"

msgid ""
"Denial-of-service via large passwords. `Full description <https://www."
"djangoproject.com/weblog/2013/sep/15/security/>`__"
msgstr ""
"通过大型密码进行拒绝服务攻击。`完整描述 <https://www.djangoproject.com/"
"weblog/2013/sep/15/security/>`__"

msgid ""
"Django 1.4 :commit:`(patch <3f3d887a6844ec2db743fee64c9e53e04d39a368>` and :"
"commit:`Python compatibility fix) <6903d1690a92aa040adfb0c8eb37cf62e4206714>`"
msgstr ""
"Django 1.4 :commit:`（补丁 <3f3d887a6844ec2db743fee64c9e53e04d39a368>` 和 :"
"commit:`Python 兼容性修复） <6903d1690a92aa040adfb0c8eb37cf62e4206714>`"

msgid "Django 1.5 :commit:`(patch) <22b74fa09d7ccbc8c52270d648a0da7f3f0fa2bc>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <22b74fa09d7ccbc8c52270d648a0da7f3f0fa2bc>`"

msgid "September 10, 2013 - :cve:`2013-4315`"
msgstr "2013 年 9 月 10 日 - :cve:`2013-4315`"

msgid ""
"Directory-traversal via ``ssi`` template tag. `Full description <https://www."
"djangoproject.com/weblog/2013/sep/10/security-releases-issued/>`__"
msgstr ""
"通过 ``ssi`` 模板标签进行目录遍历。`完整描述 <https://www.djangoproject.com/"
"weblog/2013/sep/10/security-releases-issued/>`__"

msgid "Django 1.4 :commit:`(patch) <87d2750b39f6f2d54b7047225521a44dcd37e896>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <87d2750b39f6f2d54b7047225521a44dcd37e896>`"

msgid "Django 1.5 :commit:`(patch) <988b61c550d798f9a66d17ee0511fb7a9a7f33ca>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <988b61c550d798f9a66d17ee0511fb7a9a7f33ca>`"

msgid "August 13, 2013 - :cve:`2013-6044`"
msgstr "2013 年 8 月 13 日 - :cve:`2013-6044`"

msgid ""
"Possible XSS via unvalidated URL redirect schemes. `Full description "
"<https://www.djangoproject.com/weblog/2013/aug/13/security-releases-issued/"
">`__"
msgstr ""
"可能通过未经验证的 URL 重定向方案进行跨站脚本（XSS）攻击。`完整描述 <https://"
"www.djangoproject.com/weblog/2013/aug/13/security-releases-issued/>`__"

msgid "Django 1.4 :commit:`(patch) <ec67af0bd609c412b76eaa4cc89968a2a8e5ad6a>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <ec67af0bd609c412b76eaa4cc89968a2a8e5ad6a>`"

msgid "Django 1.5 :commit:`(patch) <1a274ccd6bc1afbdac80344c9b6e5810c1162b5f>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <1a274ccd6bc1afbdac80344c9b6e5810c1162b5f>`"

msgid "August 13, 2013 - :cve:`2013-4249`"
msgstr "2013 年 8 月 13 日 - :cve:`2013-4249`"

msgid ""
"XSS via admin trusting ``URLField`` values. `Full description <https://www."
"djangoproject.com/weblog/2013/aug/13/security-releases-issued/>`__"
msgstr ""
"通过管理员信任的 ``URLField`` 值进行跨站脚本（XSS）攻击。`完整描述 <https://"
"www.djangoproject.com/weblog/2013/aug/13/security-releases-issued/>`__"

msgid "Django 1.5 :commit:`(patch) <90363e388c61874add3f3557ee654a996ec75d78>`"
msgstr ""
"Django 1.5 :commit:`（补丁） <90363e388c61874add3f3557ee654a996ec75d78>`"

msgid "February 19, 2013 - :cve:`2013-0306`"
msgstr "2013 年 1 月 19 日 - :cve:`2013-0306`"

msgid ""
"Denial-of-service via formset ``max_num`` bypass. `Full description <https://"
"www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""
"通过 formset 的 ``max_num`` 绕过进行拒绝服务攻击。`完整描述 <https://www."
"djangoproject.com/weblog/2013/feb/19/security/>`__"

msgid "Django 1.3 :commit:`(patch) <d7094bbce8cb838f3b40f504f198c098ff1cf727>`"
msgstr ""
"Django 1.3 :commit:`（补丁） <d7094bbce8cb838f3b40f504f198c098ff1cf727>`"

msgid "Django 1.4 :commit:`(patch) <0cc350a896f70ace18280410eb616a9197d862b0>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <0cc350a896f70ace18280410eb616a9197d862b0>`"

msgid "February 19, 2013 - :cve:`2013-0305`"
msgstr "2013 年 1 月 19 日 - :cve:`2013-0305`"

msgid ""
"Information leakage via admin history log. `Full description <https://www."
"djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""
"通过管理员历史记录日志泄露信息。`完整描述 <https://www.djangoproject.com/"
"weblog/2013/feb/19/security/>`__"

msgid "Django 1.3 :commit:`(patch) <d3a45e10c8ac8268899999129daa27652ec0da35>`"
msgstr ""
"Django 1.3 :commit:`（补丁） <d3a45e10c8ac8268899999129daa27652ec0da35>`"

msgid "Django 1.4 :commit:`(patch) <0e7861aec73702f7933ce2a93056f7983939f0d6>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <0e7861aec73702f7933ce2a93056f7983939f0d6>`"

msgid "February 19, 2013 - :cve:`2013-1664` / :cve:`2013-1665`"
msgstr "2013 年 1 月 19 日 - :cve:`2013-1664` / :cve:`2013-1665`"

msgid ""
"Entity-based attacks against Python XML libraries. `Full description "
"<https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""
"针对 Python XML 库的实体攻击。`完整描述 <https://www.djangoproject.com/"
"weblog/2013/feb/19/security/>`__"

msgid "Django 1.3 :commit:`(patch) <d19a27066b2247102e65412aa66917aff0091112>`"
msgstr ""
"Django 1.3 :commit:`（补丁） <d19a27066b2247102e65412aa66917aff0091112>`"

msgid "Django 1.4 :commit:`(patch) <1c60d07ba23e0350351c278ad28d0bd5aa410b40>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <1c60d07ba23e0350351c278ad28d0bd5aa410b40>`"

msgid "February 19, 2013 - No CVE"
msgstr "2013 年 2 月 19 日 - 无 CVE"

msgid ""
"Additional hardening of ``Host`` header handling. `Full description <https://"
"www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""
"对 ``Host`` 头处理的额外加固。`完整描述 <https://www.djangoproject.com/"
"weblog/2013/feb/19/security/>`__"

msgid "Django 1.3 :commit:`(patch) <27cd872e6e36a81d0bb6f5b8765a1705fecfc253>`"
msgstr ""
"Django 1.3 :commit:`（补丁） <27cd872e6e36a81d0bb6f5b8765a1705fecfc253>`"

msgid "Django 1.4 :commit:`(patch) <9936fdb11d0bbf0bd242f259bfb97bbf849d16f8>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <9936fdb11d0bbf0bd242f259bfb97bbf849d16f8>`"

msgid "December 10, 2012 - No CVE 2"
msgstr "2012 年 12 月 10 日 - 无 CVE 2"

msgid ""
"Additional hardening of redirect validation. `Full description <https://www."
"djangoproject.com/weblog/2012/dec/10/security/>`__"
msgstr ""
"对重定向验证的额外加固。`完整描述 <https://www.djangoproject.com/weblog/2012/"
"dec/10/security/>`__"

msgid ""
"Django 1.3: :commit:`(patch) <1515eb46daa0897ba5ad5f0a2db8969255f1b343>`"
msgstr ""
"Django 1.3: :commit:`（补丁） <1515eb46daa0897ba5ad5f0a2db8969255f1b343>`"

msgid ""
"Django 1.4: :commit:`(patch) <b2ae0a63aeec741f1e51bac9a95a27fd635f9652>`"
msgstr ""
"Django 1.4: :commit:`（补丁） <b2ae0a63aeec741f1e51bac9a95a27fd635f9652>`"

msgid "December 10, 2012 - No CVE 1"
msgstr "2012 年 12 月 10 日 - 无 CVE 1"

msgid ""
"Additional hardening of ``Host`` header handling. `Full description <https://"
"www.djangoproject.com/weblog/2012/dec/10/security/>`__"
msgstr ""
"对 ``Host`` 头处理的额外加固。`完整描述 <https://www.djangoproject.com/"
"weblog/2012/dec/10/security/>`__"

msgid "Django 1.3 :commit:`(patch) <2da4ace0bc1bc1d79bf43b368cb857f6f0cd6b1b>`"
msgstr ""
"Django 1.3 :commit:`（补丁） <2da4ace0bc1bc1d79bf43b368cb857f6f0cd6b1b>`"

msgid "Django 1.4 :commit:`(patch) <319627c184e71ae267d6b7f000e293168c7b6e09>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <319627c184e71ae267d6b7f000e293168c7b6e09>`"

msgid "October 17, 2012 - :cve:`2012-4520`"
msgstr "2012 年 10 月 17 日 - :cve:`2012-4520`"

msgid ""
"``Host`` header poisoning. `Full description <https://www.djangoproject.com/"
"weblog/2012/oct/17/security/>`__"
msgstr ""
"``Host`` 头部污染。`完整描述 <https://www.djangoproject.com/weblog/2012/"
"oct/17/security/>`__"

msgid "Django 1.3 :commit:`(patch) <b45c377f8f488955e0c7069cad3f3dd21910b071>`"
msgstr ""
"Django 1.3 :commit:`（补丁） <b45c377f8f488955e0c7069cad3f3dd21910b071>`"

msgid "Django 1.4 :commit:`(patch) <92d3430f12171f16f566c9050c40feefb830a4a3>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <92d3430f12171f16f566c9050c40feefb830a4a3>`"

msgid "July 30, 2012 - :cve:`2012-3444`"
msgstr "2012 年 7 月 30 日 - :cve:`2012-3444`"

msgid ""
"Denial-of-service via large image files. `Full description <https://www."
"djangoproject.com/weblog/2012/jul/30/security-releases-issued/>`__"
msgstr ""
"通过大型图像文件进行拒绝服务攻击。`完整描述 <https://www.djangoproject.com/"
"weblog/2012/jul/30/security-releases-issued/>`__"

msgid "Django 1.3 :commit:`(patch) <9ca0ff6268eeff92d0d0ac2c315d4b6a8e229155>`"
msgstr ""
"Django 1.3 :commit:`（补丁） <9ca0ff6268eeff92d0d0ac2c315d4b6a8e229155>`"

msgid "Django 1.4 :commit:`(patch) <da33d67181b53fe6cc737ac1220153814a1509f6>`"
msgstr ""
"Django 1.4 :commit:`（补丁） <da33d67181b53fe6cc737ac1220153814a1509f6>`"

msgid "July 30, 2012 - :cve:`2012-3443`"
msgstr "2012 年 7 月 30 日 - :cve:`2012-3443`"

msgid ""
"Denial-of-service via compressed image files. `Full description <https://www."
"djangoproject.com/weblog/2012/jul/30/security-releases-issued/>`__"
msgstr ""
"通过压缩的图像文件进行拒绝服务攻击。`完整描述 <https://www.djangoproject.com/"
"weblog/2012/jul/30/security-releases-issued/>`__"

msgid ""
"Django 1.3: :commit:`(patch) <b2eb4787a0fff9c9993b78be5c698e85108f3446>`"
msgstr ""
"Django 1.3: :commit:`（补丁） <b2eb4787a0fff9c9993b78be5c698e85108f3446>`"

msgid ""
"Django 1.4: :commit:`(patch) <c14f325c4eef628bc7bfd8873c3a72aeb0219141>`"
msgstr ""
"Django 1.4: :commit:`（补丁） <c14f325c4eef628bc7bfd8873c3a72aeb0219141>`"

msgid "July 30, 2012 - :cve:`2012-3442`"
msgstr "2012 年 7 月 30 日 - :cve:`2012-3442`"

msgid ""
"XSS via failure to validate redirect scheme. `Full description <https://www."
"djangoproject.com/weblog/2012/jul/30/security-releases-issued/>`__"
msgstr ""
"通过未能验证重定向方案进行跨站脚本（XSS）攻击。`完整描述 <https://www."
"djangoproject.com/weblog/2012/jul/30/security-releases-issued/>`__"

msgid ""
"Django 1.3: :commit:`(patch) <4dea4883e6c50d75f215a6b9bcbd95273f57c72d>`"
msgstr ""
"Django 1.3: :commit:`（补丁） <4dea4883e6c50d75f215a6b9bcbd95273f57c72d>`"

msgid ""
"Django 1.4: :commit:`(patch) <e34685034b60be1112160e76091e5aee60149fa1>`"
msgstr ""
"Django 1.4: :commit:`（补丁） <e34685034b60be1112160e76091e5aee60149fa1>`"

msgid "September 9, 2011 - :cve:`2011-4140`"
msgstr "2011 年 9 月 9 日 - :cve:`2011-4140`"

msgid ""
"Potential CSRF via ``Host`` header. `Full description <https://www."
"djangoproject.com/weblog/2011/sep/09/security-releases-issued/>`__"
msgstr ""
"潜在的 CSRF（跨站请求伪造）攻击通过 ``Host`` 头部。`完整描述 <https://www."
"djangoproject.com/weblog/2011/sep/09/security-releases-issued/>`__"

msgid "This notification was an advisory only, so no patches were issued."
msgstr "此通知仅为提醒，因此没有发布补丁。"

msgid "Django 1.2"
msgstr "Django 1.2"

msgid "Django 1.3"
msgstr "Django 1.3"

msgid "September 9, 2011 - :cve:`2011-4139`"
msgstr "2011 年9月9日 - :cve:`2011-4139`"

msgid ""
"``Host`` header cache poisoning. `Full description <https://www."
"djangoproject.com/weblog/2011/sep/09/security-releases-issued/>`__"
msgstr ""
"``Host`` 头部缓存污染。`完整描述 <https://www.djangoproject.com/weblog/2011/"
"sep/09/security-releases-issued/>`__"

msgid "Django 1.2 :commit:`(patch) <c613af4d6485586c79d692b70a9acac429f3ca9d>`"
msgstr ""
"Django 1.2 :commit:`（补丁） <c613af4d6485586c79d692b70a9acac429f3ca9d>`"

msgid "Django 1.3 :commit:`(patch) <2f7fadc38efa58ac0a8f93f936b82332a199f396>`"
msgstr ""
"Django 1.3 :commit:`（补丁） <2f7fadc38efa58ac0a8f93f936b82332a199f396>`"

msgid "September 9, 2011 - :cve:`2011-4138`"
msgstr "2011 年9月9日 - :cve:`2011-4138`"

msgid ""
"Information leakage/arbitrary request issuance via ``URLField."
"verify_exists``. `Full description <https://www.djangoproject.com/"
"weblog/2011/sep/09/security-releases-issued/>`__"
msgstr ""
"通过 ``URLField.verify_exists`` 存在信息泄露/任意请求发出。`完整描述 "
"<https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/"
">`__"

msgid ""
"Django 1.2: :commit:`(patch) <7268f8af86186518821d775c530d5558fd726930>`"
msgstr ""
"Django 1.2: :commit:`（补丁） <7268f8af86186518821d775c530d5558fd726930>`"

msgid ""
"Django 1.3: :commit:`(patch) <1a76dbefdfc60e2d5954c0ba614c3d054ba9c3f0>`"
msgstr ""
"Django 1.3: :commit:`（补丁） <1a76dbefdfc60e2d5954c0ba614c3d054ba9c3f0>`"

msgid "September 9, 2011 - :cve:`2011-4137`"
msgstr "2011 年 9 月 9 日 - :cve:`2011-4137`"

msgid ""
"Denial-of-service via ``URLField.verify_exists``. `Full description <https://"
"www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/>`__"
msgstr ""
"通过 ``URLField.verify_exists`` 进行拒绝服务攻击。`完整描述 <https://www."
"djangoproject.com/weblog/2011/sep/09/security-releases-issued/>`__"

msgid "Django 1.2 :commit:`(patch) <7268f8af86186518821d775c530d5558fd726930>`"
msgstr ""
"Django 1.2 :commit:`（补丁） <7268f8af86186518821d775c530d5558fd726930>`"

msgid "Django 1.3 :commit:`(patch) <1a76dbefdfc60e2d5954c0ba614c3d054ba9c3f0>`"
msgstr ""
"Django 1.3 :commit:`（补丁） <1a76dbefdfc60e2d5954c0ba614c3d054ba9c3f0>`"

msgid "September 9, 2011 - :cve:`2011-4136`"
msgstr "2011 年9月9日 - :cve:`2011-4136`"

msgid ""
"Session manipulation when using memory-cache-backed session. `Full "
"description <https://www.djangoproject.com/weblog/2011/sep/09/security-"
"releases-issued/>`__"
msgstr ""
"在使用内存缓存支持的会话时进行会话操纵。`完整描述 <https://www.djangoproject."
"com/weblog/2011/sep/09/security-releases-issued/>`__"

msgid "Django 1.2 :commit:`(patch) <ac7c3a110f906e4dfed3a17451bf7fd9fcb81296>`"
msgstr ""
"Django 1.2 :commit:`（补丁） <ac7c3a110f906e4dfed3a17451bf7fd9fcb81296>`"

msgid "Django 1.3 :commit:`(patch) <fbe2eead2fa9d808658ca582241bcacb02618840>`"
msgstr ""
"Django 1.3 :commit:`（补丁） <fbe2eead2fa9d808658ca582241bcacb02618840>`"

msgid "February 8, 2011 - :cve:`2011-0698`"
msgstr "2011 年 2 月 8 日 - :cve:`2011-0698`"

msgid ""
"Directory-traversal on Windows via incorrect path-separator handling. `Full "
"description <https://www.djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""
"通过不正确的路径分隔符处理在 Windows 上进行目录遍历。`完整描述 <https://www."
"djangoproject.com/weblog/2011/feb/08/security/>`__"

msgid "Django 1.1 :commit:`(patch) <570a32a047ea56265646217264b0d3dab1a14dbd>`"
msgstr ""
"Django 1.1 :commit:`（补丁） <570a32a047ea56265646217264b0d3dab1a14dbd>`"

msgid "Django 1.2 :commit:`(patch) <194566480b15cf4e294d3f03ff587019b74044b2>`"
msgstr ""
"Django 1.2 :commit:`（补丁） <194566480b15cf4e294d3f03ff587019b74044b2>`"

msgid "February 8, 2011 - :cve:`2011-0697`"
msgstr "2011 年 2 月 8 日 - :cve:`2011-0697`"

msgid ""
"XSS via unsanitized names of uploaded files. `Full description <https://www."
"djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""
"通过未经过滤的上传文件的名称进行跨站脚本（XSS）攻击。`完整描述 <https://www."
"djangoproject.com/weblog/2011/feb/08/security/>`__"

msgid "Django 1.1 :commit:`(patch) <1966786d2dde73e17f39cf340eb33fcb5d73904e>`"
msgstr ""
"Django 1.1 :commit:`（补丁） <1966786d2dde73e17f39cf340eb33fcb5d73904e>`"

msgid "Django 1.2 :commit:`(patch) <1f814a9547842dcfabdae09573055984af9d3fab>`"
msgstr ""
"Django 1.2 :commit:`（补丁） <1f814a9547842dcfabdae09573055984af9d3fab>`"

msgid "February 8, 2011 - :cve:`2011-0696`"
msgstr "2011 年 2 月 8 日 - :cve:`2011-0696`"

msgid ""
"CSRF via forged HTTP headers. `Full description <https://www.djangoproject."
"com/weblog/2011/feb/08/security/>`__"
msgstr ""
"通过伪造的 HTTP 头部进行 CSRF 攻击。`完整描述 <https://www.djangoproject.com/"
"weblog/2011/feb/08/security/>`__"

msgid "Django 1.1 :commit:`(patch) <408c5c873ce1437c7eee9544ff279ecbad7e150a>`"
msgstr ""
"Django 1.1 :commit:`（补丁） <408c5c873ce1437c7eee9544ff279ecbad7e150a>`"

msgid "Django 1.2 :commit:`(patch) <818e70344e7193f6ebc73c82ed574e6ce3c91afc>`"
msgstr ""
"Django 1.2 :commit:`（补丁） <818e70344e7193f6ebc73c82ed574e6ce3c91afc>`"

msgid "December 22, 2010 - :cve:`2010-4535`"
msgstr "2010 年 12 月 22 日 - :cve:`2010-4535`"

msgid ""
"Denial-of-service in password-reset mechanism. `Full description <https://"
"www.djangoproject.com/weblog/2010/dec/22/security/>`__"
msgstr ""
"在密码重置机制中的拒绝服务攻击。`完整描述 <https://www.djangoproject.com/"
"weblog/2010/dec/22/security/>`__"

msgid "Django 1.1 :commit:`(patch) <7f8dd9cbac074389af8d8fd235bf2cb657227b9a>`"
msgstr ""
"Django 1.1 :commit:`（补丁） <7f8dd9cbac074389af8d8fd235bf2cb657227b9a>`"

msgid "Django 1.2 :commit:`(patch) <d5d8942a160685c403d381a279e72e09de5489a9>`"
msgstr ""
"Django 1.2 :commit:`（补丁） <d5d8942a160685c403d381a279e72e09de5489a9>`"

msgid "December 22, 2010 - :cve:`2010-4534`"
msgstr "2010 年 12 月 22 日 - :cve:`2010-4534`"

msgid ""
"Information leakage in administrative interface. `Full description <https://"
"www.djangoproject.com/weblog/2010/dec/22/security/>`__"
msgstr ""
"界面管理中的信息泄漏`完整描述<https://www.djangoproject.com/weblog/2010/"
"dec/22/security/>`__"

msgid "Django 1.1 :commit:`(patch) <17084839fd7e267da5729f2a27753322b9d415a0>`"
msgstr ""
"Django 1.1 :commit:`（补丁） <17084839fd7e267da5729f2a27753322b9d415a0>`"

msgid "Django 1.2 :commit:`(patch) <85207a245bf09fdebe486b4c7bbcb65300f2a693>`"
msgstr ""
"Django 1.2 :commit:`（补丁） <85207a245bf09fdebe486b4c7bbcb65300f2a693>`"

msgid "September 8, 2010 - :cve:`2010-3082`"
msgstr "2010年9月8日 - :cve:`2010-3082`"

msgid ""
"XSS via trusting unsafe cookie value. `Full description <https://www."
"djangoproject.com/weblog/2010/sep/08/security-release/>`__"
msgstr ""
"XSS通过信任不安全的cookie值。完整描述<https://www.djangoproject.com/"
"weblog/2010/sep/08/security-release/>`__"

msgid "Django 1.2 :commit:`(patch) <7f84657b6b2243cc787bdb9f296710c8d13ad0bd>`"
msgstr ""
"Django 1.2 :commit:`（补丁） <7f84657b6b2243cc787bdb9f296710c8d13ad0bd>`"

msgid "October 9, 2009 - :cve:`2009-3695`"
msgstr ""

msgid ""
"Denial-of-service via pathological regular expression performance. `Full "
"description <https://www.djangoproject.com/weblog/2009/oct/09/security/>`__"
msgstr ""
"通过缺陷正则表达性能拒绝服务。`完整说明 <https://www.djangoproject.com/"
"weblog/2009/oct/09/security/>`__"

msgid "Django 1.0 :commit:`(patch) <594a28a9044120bed58671dde8a805c9e0f6c79a>`"
msgstr ""
"Django 1.0 :commit:`（补丁） <594a28a9044120bed58671dde8a805c9e0f6c79a>`"

msgid "Django 1.1 :commit:`(patch) <e3e992e18b368fcd56aabafc1b5bf80a6e11b495>`"
msgstr ""
"Django 1.1 :commit:`（补丁） <e3e992e18b368fcd56aabafc1b5bf80a6e11b495>`"

msgid "July 28, 2009 - :cve:`2009-2659`"
msgstr "2009 年 7 月 28 日 - :cve:`2009-2659`"

msgid ""
"Directory-traversal in development server media handler. `Full description "
"<https://www.djangoproject.com/weblog/2009/jul/28/security/>`__"
msgstr ""
"开发服务器媒体处理程序中的目录遍历。`完整说明 <https://www.djangoproject.com/"
"weblog/2009/jul/28/security/>`__"

msgid ""
"Django 0.96 :commit:`(patch) <da85d76fd6ca846f3b0ff414e042ddb5e62e2e69>`"
msgstr ""
"Django 0.96 :commit:`（补丁） <da85d76fd6ca846f3b0ff414e042ddb5e62e2e69>`"

msgid "Django 1.0 :commit:`(patch) <df7f917b7f51ba969faa49d000ffc79572c5dcb4>`"
msgstr ""
"Django 1.0 :commit:`（补丁） <df7f917b7f51ba969faa49d000ffc79572c5dcb4>`"

msgid "September 2, 2008 - :cve:`2008-3909`"
msgstr "2008 年 9 月 2 日 - :cve:`2008-3909`"

msgid ""
"CSRF via preservation of POST data during admin login. `Full description "
"<https://www.djangoproject.com/weblog/2008/sep/02/security/>`__"
msgstr ""
"在管理员登录时通过保存 POST 数据进行 CSRF。`完整说明 <https://www."
"djangoproject.com/weblog/2008/sep/02/security/>`__"

msgid ""
"Django 0.91 :commit:`(patch) <44debfeaa4473bd28872c735dd3d9afde6886752>`"
msgstr ""
"Django 0.91 :commit:`（补丁） <44debfeaa4473bd28872c735dd3d9afde6886752>`"

msgid ""
"Django 0.95 :commit:`(patch) <aee48854a164382c655acb9f18b3c06c3d238e81>`"
msgstr ""
"Django 0.95 :commit:`（补丁） <aee48854a164382c655acb9f18b3c06c3d238e81>`"

msgid ""
"Django 0.96 :commit:`(patch) <7e0972bded362bc4b851c109df2c8a6548481a8e>`"
msgstr ""
"Django 0.96 :commit:`（补丁） <7e0972bded362bc4b851c109df2c8a6548481a8e>`"

msgid "May 14, 2008 - :cve:`2008-2302`"
msgstr "2008 年 5 月 14 日 - :cve:`2008-2302`"

msgid ""
"XSS via admin login redirect. `Full description <https://www.djangoproject."
"com/weblog/2008/may/14/security/>`__"
msgstr ""
"通过管理员登录重定向进行 XSS。`完整说明 <https://www.djangoproject.com/"
"weblog/2008/may/14/security/>`__"

msgid ""
"Django 0.91 :commit:`(patch) <6e657e2c404a96e744748209e896d8a69c15fdf2>`"
msgstr ""
"Django 0.91 :commit:`（补丁） <6e657e2c404a96e744748209e896d8a69c15fdf2>`"

msgid ""
"Django 0.95 :commit:`(patch) <50ce7fb57d79e8940ccf6e2781f2f01df029b5c5>`"
msgstr ""
"Django 0.95 :commit:`（补丁） <50ce7fb57d79e8940ccf6e2781f2f01df029b5c5>`"

msgid ""
"Django 0.96 :commit:`(patch) <7791e5c050cebf86d868c5dab7092185b125fdc9>`"
msgstr ""
"Django 0.96 :commit:`（补丁） <7791e5c050cebf86d868c5dab7092185b125fdc9>`"

msgid "October 26, 2007 - :cve:`2007-5712`"
msgstr "2007 年 10 月 26 日 - :cve:`2007-5712`"

msgid ""
"Denial-of-service via arbitrarily-large ``Accept-Language`` header. `Full "
"description <https://www.djangoproject.com/weblog/2007/oct/26/security-fix/"
">`__"
msgstr ""
"通过任意大的 ``Accept-Language`` 头拒绝服务。`完整说明 <https://www."
"djangoproject.com/weblog/2007/oct/26/security-fix/>`__"

msgid ""
"Django 0.91 :commit:`(patch) <8bc36e726c9e8c75c681d3ad232df8e882aaac81>`"
msgstr ""
"Django 0.91 :commit:`（补丁） <8bc36e726c9e8c75c681d3ad232df8e882aaac81>`"

msgid ""
"Django 0.95 :commit:`(patch) <412ed22502e11c50dbfee854627594f0e7e2c234>`"
msgstr ""
"Django 0.95 :commit:`（补丁） <412ed22502e11c50dbfee854627594f0e7e2c234>`"

msgid ""
"Django 0.96 :commit:`(patch) <7dd2dd08a79e388732ce00e2b5514f15bd6d0f6f>`"
msgstr ""
"Django 0.96 :commit:`（补丁） <7dd2dd08a79e388732ce00e2b5514f15bd6d0f6f>`"

msgid "Issues prior to Django's security process"
msgstr "Django 安全进程之前的问题"

msgid ""
"Some security issues were handled before Django had a formalized security "
"process in use. For these, new releases may not have been issued at the time "
"and CVEs may not have been assigned."
msgstr ""
"有些安全问题是在 Django 还没有正式使用安全流程之前就已经处理好的。对于这些问"
"题，当时可能还没有发布新的版本，可能还没有分配 CVE。"

msgid "January 21, 2007 - :cve:`2007-0405`"
msgstr "2007 年 1 月 21 日 - :cve:`2007-0405`"

msgid ""
"Apparent \"caching\" of authenticated user. `Full description <https://www."
"djangoproject.com/weblog/2007/jan/21/0951/>`__"
msgstr ""
"对认证用户进行明显的 “缓存”。`完整说明 <https://www.djangoproject.com/"
"weblog/2007/jan/21/0951/>`__"

msgid ""
"Django 0.95 :commit:`(patch) <e89f0a65581f82a5740bfe989136cea75d09cd67>`"
msgstr ""
"Django 0.95 :commit:`（补丁） <e89f0a65581f82a5740bfe989136cea75d09cd67>`"

msgid "August 16, 2006 - :cve:`2007-0404`"
msgstr "2006 年 8 月 16 日 - :cve:`2007-0404`"

msgid ""
"Filename validation issue in translation framework. `Full description "
"<https://www.djangoproject.com/weblog/2006/aug/16/compilemessages/>`__"
msgstr ""
"翻译框架中的文件名验证问题。`完整说明 <https://www.djangoproject.com/"
"weblog/2006/aug/16/compilemessages/>`__"

msgid ""
"Django 0.90 :commit:`(patch) <6eefa521be3c658dc0b38f8d62d52e9801e198ab>`"
msgstr ""
"Django 0.90 :commit:`（补丁） <6eefa521be3c658dc0b38f8d62d52e9801e198ab>`"

msgid ""
"Django 0.91 :commit:`(patch) <d31e39173c29537e6a1613278c93634c18a3206e>`"
msgstr ""
"Django 0.91 :commit:`（补丁） <d31e39173c29537e6a1613278c93634c18a3206e>`"

msgid ""
"Django 0.95 :commit:`(patch) <a132d411c6986418ee6c0edc331080aa792fee6e>` "
"(released January 21 2007)"
msgstr ""
"Django 0.95 :commit:`（补丁） <a132d411c6986418ee6c0edc331080aa792fee6e>` "
"（2007 年 1 月 21 日发布）"
