# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-04 09:46+0200\n"
"PO-Revision-Date: 2014-02-12 17:27+0500\n"
"Last-Translator: Vitaliy Dorokhin <seryimysh@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.6.4\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"Language: ru_RU\n"

# b91ed08e89964a5399fcc57195d69425
#: ../../howto/auth-remote-user.txt:3
msgid "Authentication using ``REMOTE_USER``"
msgstr ""

# daa338fcf27743e78bd2a3c18113ca18
#: ../../howto/auth-remote-user.txt:7
msgid ""
"This document describes how to make use of external authentication sources "
"(where the Web server sets the ``REMOTE_USER`` environment variable) in your "
"Django applications.  This type of authentication solution is typically seen "
"on intranet sites, with single sign-on solutions such as IIS and Integrated "
"Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, `Cosign`_, "
"`WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""

# 257a2956a14246518731c52f55948de8
#: ../../howto/auth-remote-user.txt:20
msgid ""
"When the Web server takes care of authentication it typically sets the "
"``REMOTE_USER`` environment variable for use in the underlying application.  "
"In Django, ``REMOTE_USER`` is made available in the :attr:`request.META "
"<django.http.HttpRequest.META>` attribute.  Django can be configured to make "
"use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` and "
"``RemoteUserBackend`` classes found in :mod:`django.contrib.auth`."
msgstr ""

# b299b93d4d654541af268b6ca930b8f1
#: ../../howto/auth-remote-user.txt:28
msgid "Configuration"
msgstr ""

# 3b90b05b5e5c4159b7ecd1e1158d1994
#: ../../howto/auth-remote-user.txt:32
msgid ""
"First, you must add the :class:`django.contrib.auth.middleware."
"RemoteUserMiddleware` to the :setting:`MIDDLEWARE_CLASSES` setting **after** "
"the :class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""

# 44f56c188b954520a86e6fb86ee98d1b
#: ../../howto/auth-remote-user.txt:44
msgid ""
"Next, you must replace the :class:`~django.contrib.auth.backends."
"ModelBackend` with ``RemoteUserBackend`` in the :setting:"
"`AUTHENTICATION_BACKENDS` setting::"
msgstr ""

# c41d639872d54dac830244f5c4704376
#: ../../howto/auth-remote-user.txt:51
msgid ""
"With this setup, ``RemoteUserMiddleware`` will detect the username in "
"``request.META['REMOTE_USER']`` and will authenticate and auto-login that "
"user using the ``RemoteUserBackend``."
msgstr ""

# 33420f45736948fca84b443d34c62efb
#: ../../howto/auth-remote-user.txt:56
msgid ""
"Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will "
"still have all of the same permissions checking that is implemented in "
"``ModelBackend``."
msgstr ""

# f7c9cfd2ab9a4a3b9c9dd21ae6051210
#: ../../howto/auth-remote-user.txt:60
msgid ""
"If your authentication mechanism uses a custom HTTP header and not "
"``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the "
"``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""

# da0306e525084efda83f2f2cd8ed2c25
#: ../../howto/auth-remote-user.txt:71
msgid "``RemoteUserBackend``"
msgstr ""

# d689faf44cfe464dbce2eca66b1fb969
#: ../../howto/auth-remote-user.txt:75
msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from ``RemoteUserBackend`` and overrides certain parts:"
msgstr ""

# 8521181873ac45b6927963482bfe1f73
# 23bf431a93cb4f3b8b09aa3be9d1db30
#: ../../howto/auth-remote-user.txt:79
#: ../../howto/custom-management-commands.txt:186
msgid "Attributes"
msgstr ""

# 3e817cb6662245c28c912594c6143ff7
#: ../../howto/auth-remote-user.txt:83
msgid ""
"``True`` or ``False``.  Determines whether or not a :class:`~django.contrib."
"auth.models.User` object is created if not already in the database.  "
"Defaults to ``True``."
msgstr ""

# 8b005b71c3334ec3b50d9a1478270d08
# 22569b9952074fc19ee7e224175480c1
#: ../../howto/auth-remote-user.txt:88
#: ../../howto/custom-management-commands.txt:232
msgid "Methods"
msgstr ""

# 613cbf1b0fd547008c9893ef88766481
#: ../../howto/auth-remote-user.txt:92
msgid ""
"The username passed as ``remote_user`` is considered trusted. This method "
"simply returns the ``User`` object with the given username, creating a new "
"``User`` object if :attr:`~RemoteUserBackend.create_unknown_user` is "
"``True``."
msgstr ""

# 7ad7b876f4984173b0e538c50b77f2b0
#: ../../howto/auth-remote-user.txt:97
msgid ""
"Returns ``None`` if :attr:`~RemoteUserBackend.create_unknown_user` is "
"``False`` and a ``User`` object with the given username is not found in the "
"database."
msgstr ""

# eee7da766d1f4974b77ee491f7bdb4c7
#: ../../howto/auth-remote-user.txt:103
msgid ""
"Performs any cleaning on the ``username`` (e.g. stripping LDAP DN "
"information) prior to using it to get or create a :class:`~django.contrib."
"auth.models.User` object.  Returns the cleaned username."
msgstr ""

# cfb4c3c408924a618eda11de8774ff4a
#: ../../howto/auth-remote-user.txt:110
msgid ""
"Configures a newly created user.  This method is called immediately after a "
"new user is created, and can be used to perform custom setup actions, such "
"as setting the user's groups based on attributes in an LDAP directory. "
"Returns the user object."
msgstr ""

# 10321592406d49d3a8a9dd1e71f9998d
#: ../../howto/custom-file-storage.txt:2
msgid "Writing a custom storage system"
msgstr ""

# 7bfc29668d5848f7b2ec11545af75c50
#: ../../howto/custom-file-storage.txt:6
msgid ""
"If you need to provide custom file storage -- a common example is storing "
"files on some remote system -- you can do so by defining a custom storage "
"class. You'll need to follow these steps:"
msgstr ""

# 3720dfd79f6943f6b647fed841f49c6b
#: ../../howto/custom-file-storage.txt:10
msgid ""
"Your custom storage system must be a subclass of ``django.core.files.storage."
"Storage``::"
msgstr ""

# b376def9c7894234ba3153202ba369eb
#: ../../howto/custom-file-storage.txt:18
msgid ""
"Django must be able to instantiate your storage system without any "
"arguments. This means that any settings should be taken from ``django.conf."
"settings``::"
msgstr ""

# a2d4c342778242f19f81054d8dfff09a
#: ../../howto/custom-file-storage.txt:30
msgid ""
"Your storage class must implement the :meth:`_open()` and :meth:`_save()` "
"methods, along with any other methods appropriate to your storage class. See "
"below for more on these methods."
msgstr ""

# 8dd2e1284dac4fb9a5e86817e3ef5330
#: ../../howto/custom-file-storage.txt:34
msgid ""
"In addition, if your class provides local file storage, it must override the "
"``path()`` method."
msgstr ""

# d70dcb60289341138fce34a3c5c5529d
#: ../../howto/custom-file-storage.txt:37
msgid ""
"Your custom storage system may override any of the storage methods explained "
"in :doc:`/ref/files/storage`, but you **must** implement the following "
"methods:"
msgstr ""

# aab85a10ce674492b4f97e50dd16c3e8
#: ../../howto/custom-file-storage.txt:40
msgid ":meth:`Storage.delete`"
msgstr ""

# 44b8248072d245bc8f2b202fa6a726c6
#: ../../howto/custom-file-storage.txt:41
msgid ":meth:`Storage.exists`"
msgstr ""

# 29dd1a3e3da34f3c99213ba9ee35b9d8
#: ../../howto/custom-file-storage.txt:42
msgid ":meth:`Storage.listdir`"
msgstr ""

# e87f7c368a8d4a439aa00c719e2134af
#: ../../howto/custom-file-storage.txt:43
msgid ":meth:`Storage.size`"
msgstr ""

# 41381694f2974d2cace877a47995b14f
#: ../../howto/custom-file-storage.txt:44
msgid ":meth:`Storage.url`"
msgstr ""

# 4c79223909f244d5909c1286d8b6ad33
#: ../../howto/custom-file-storage.txt:46
msgid ""
"You'll also usually want to use hooks specifically designed for custom "
"storage objects. These are:"
msgstr ""

# 393f0cbd3bcd4ac9ae0ee9ec9f93fa0e
#: ../../howto/custom-file-storage.txt:51
msgid "**Required**."
msgstr ""

# 49b1f3bcb4f04d639d99a12b79a3c90f
#: ../../howto/custom-file-storage.txt:53
msgid ""
"Called by ``Storage.open()``, this is the actual mechanism the storage class "
"uses to open the file. This must return a ``File`` object, though in most "
"cases, you'll want to return some subclass here that implements logic "
"specific to the backend storage system."
msgstr ""

# e98b92e22c154c878508af64140d5a65
#: ../../howto/custom-file-storage.txt:60
msgid ""
"Called by ``Storage.save()``. The ``name`` will already have gone through "
"``get_valid_name()`` and ``get_available_name()``, and the ``content`` will "
"be a ``File`` object itself."
msgstr ""

# 1110f4a1162b438b8bb3bfd8d0359b8d
#: ../../howto/custom-file-storage.txt:64
msgid ""
"Should return the actual name of name of the file saved (usually the "
"``name`` passed in, but if the storage needs to change the file name return "
"the new name instead)."
msgstr ""

# bfcfb91a1aaa4849b3721b28857ce201
#: ../../howto/custom-file-storage.txt:71
msgid ""
"Returns a filename suitable for use with the underlying storage system. The "
"``name`` argument passed to this method is the original filename sent to the "
"server, after having any path information removed. Override this to "
"customize how non-standard characters are converted to safe filenames."
msgstr ""

# 38d1f9a0ab7646d6a3e2094724067b03
#: ../../howto/custom-file-storage.txt:76
msgid ""
"The code provided on ``Storage`` retains only alpha-numeric characters, "
"periods and underscores from the original filename, removing everything else."
msgstr ""

# 029fafbb91f54c8a9b8f73c7c374930e
#: ../../howto/custom-file-storage.txt:81
msgid ""
"Returns a filename that is available in the storage mechanism, possibly "
"taking the provided filename into account. The ``name`` argument passed to "
"this method will have already cleaned to a filename valid for the storage "
"system, according to the ``get_valid_name()`` method described above."
msgstr ""

# 8b7b52a65aca4eccb3ffaf34c3e0bd73
#: ../../howto/custom-file-storage.txt:86
msgid ""
"The code provided on ``Storage`` simply appends ``\"_1\"``, ``\"_2\"``, etc. "
"to the filename until it finds one that's available in the destination "
"directory."
msgstr ""

# a5489d34535643b5a5685460f2c31437
#: ../../howto/custom-management-commands.txt:3
msgid "Writing custom django-admin commands"
msgstr ""

# 3f13f6d2b03c4f96b5a5083f4a4be15d
#: ../../howto/custom-management-commands.txt:7
msgid ""
"Applications can register their own actions with ``manage.py``. For example, "
"you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the :doc:`tutorial</intro/"
"tutorial01>`."
msgstr ""

# 32f3e029d8b94967b574d29b206ae9a0
#: ../../howto/custom-management-commands.txt:13
msgid ""
"To do this, just add a ``management/commands`` directory to the application. "
"Django will register a ``manage.py`` command for each Python module in that "
"directory whose name doesn't begin with an underscore. For example::"
msgstr ""

# 09a3e9e850404f0a8050f25c90241027
#: ../../howto/custom-management-commands.txt:29
msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""

# 492cb337368944488eb671e3f5fc66c5
#: ../../howto/custom-management-commands.txt:32
msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr ""

# 519ef7a4dd0f420cb50b25a27559c006
#: ../../howto/custom-management-commands.txt:34
msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 97a43481df46461f8549057c9ba63419
#: ../../howto/custom-management-commands.txt:38
msgid "Standalone scripts"
msgstr ""

# b24038c7f6004e03999800466aff371f
#: ../../howto/custom-management-commands.txt:40
msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""

# 253133e121d64736ba2325f3d2bc0fb0
#: ../../howto/custom-management-commands.txt:44
msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to "
"look like this:"
msgstr ""

# 7f5927755d394f079f69206ef890830f
#: ../../howto/custom-management-commands.txt:71
msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing "
"to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command. Note also that you don't need to "
"end messages with a newline character, it will be added automatically, "
"unless you specify the ``ending`` parameter::"
msgstr ""

# 21041825028a4c44abe0ce0950353fb7
#: ../../howto/custom-management-commands.txt:81
msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_id>``."
msgstr ""

# c46546b85cfb43f5bc6f4b45caf7ca59
#: ../../howto/custom-management-commands.txt:84
msgid ""
"The ``handle()`` method takes zero or more ``poll_ids`` and sets ``poll."
"opened`` to ``False`` for each one. If the user referenced any nonexistent "
"polls, a :class:`CommandError` is raised. The ``poll.opened`` attribute does "
"not exist in the :doc:`tutorial</intro/tutorial01>` and was added to ``polls."
"models.Poll`` for this example."
msgstr ""

# 92e9ffc521814b25aadd429c71118ef7
#: ../../howto/custom-management-commands.txt:90
msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options must be added to :attr:`~BaseCommand.option_list` like this:"
msgstr ""

# 5dca0b1f5685495b82b1aae74ac3feec
#: ../../howto/custom-management-commands.txt:113
msgid ""
"The option (``delete`` in our example) is available in the options dict "
"parameter of the handle method. See the :py:mod:`optparse` Python "
"documentation for more about ``make_option`` usage."
msgstr ""

# dad06e8f3acc48cba50878cb3b06c74c
#: ../../howto/custom-management-commands.txt:117
msgid ""
"In addition to being able to add custom command line options, all :doc:"
"`management commands</ref/django-admin>` can accept some default options "
"such as :djadminopt:`--verbosity` and :djadminopt:`--traceback`."
msgstr ""

# 4068e2f0967643b5bcda27eccba95806
#: ../../howto/custom-management-commands.txt:121
msgid "Management commands and locales"
msgstr ""

# c87d6fbe8f074e7ba2feed651b68abe7
#: ../../howto/custom-management-commands.txt:123
msgid ""
"The :meth:`BaseCommand.execute` method sets the hardcoded ``en-us`` locale "
"because the commands shipped with Django perform several tasks (for example, "
"user-facing content rendering and database population) that require a system-"
"neutral string language (for which we use ``en-us``)."
msgstr ""

# 921b85a536ed40c690b93e57df337091
#: ../../howto/custom-management-commands.txt:128
msgid ""
"If your custom management command uses another locale, you should manually "
"activate and deactivate it in your :meth:`~BaseCommand.handle` or :meth:"
"`~NoArgsCommand.handle_noargs` method using the functions provided by the "
"I18N support code:"
msgstr ""

# e6e70fde61d8499883fbaf4011003802
#: ../../howto/custom-management-commands.txt:158
msgid ""
"Take into account though, that system management commands typically have to "
"be very careful about running in non-uniform locales, so:"
msgstr ""

# 7469b96436e1422ca24247b4b7a94f74
#: ../../howto/custom-management-commands.txt:161
msgid ""
"Make sure the :setting:`USE_I18N` setting is always ``True`` when running "
"the command (this is one good example of the potential problems stemming "
"from a dynamic runtime environment that Django commands avoid offhand by "
"always using a fixed locale)."
msgstr ""

# e39249302bcc4be2a5ed1bd2fd0eefd9
#: ../../howto/custom-management-commands.txt:166
msgid ""
"Review the code of your command and the code it calls for behavioral "
"differences when locales are changed and evaluate its impact on predictable "
"behavior of your command."
msgstr ""

# 281c11fb84d143b1b3b38177ee04b689
#: ../../howto/custom-management-commands.txt:171
msgid "Command objects"
msgstr ""

# 1c218a00be884a6ebdaacdc0a0c56e8a
#: ../../howto/custom-management-commands.txt:175
msgid "The base class from which all management commands ultimately derive."
msgstr ""

# 720f2732b9bc480286781f76aa9d68a1
#: ../../howto/custom-management-commands.txt:177
msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 8d1e70f73c39416abe68ffbd57a7e50b
#: ../../howto/custom-management-commands.txt:182
msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the :"
"meth:`~BaseCommand.handle` method."
msgstr ""

# 8c5889dd7db242cc8cff8ad96d30130b
#: ../../howto/custom-management-commands.txt:188
msgid ""
"All attributes can be set in your derived class and can be used in :class:"
"`BaseCommand`'s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 91051a88b82f444993a202ee5acc807c
#: ../../howto/custom-management-commands.txt:193
msgid ""
"A string listing the arguments accepted by the command, suitable for use in "
"help messages; e.g., a command which takes a list of application names might "
"set this to '<appname appname ...>'."
msgstr ""

# e3c8a7fd70dd4d50928addd2bce9a57b
#: ../../howto/custom-management-commands.txt:200
msgid ""
"A boolean indicating whether the command needs to be able to import Django "
"settings; if ``True``, ``execute()`` will verify that this is possible "
"before proceeding. Default value is ``True``."
msgstr ""

# c5cac8149e24431680b0a42a643a53f0
#: ../../howto/custom-management-commands.txt:207
msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr ""

# a9fd82dd32db439ba582e1ffe7434c87
#: ../../howto/custom-management-commands.txt:213
msgid ""
"This is the list of ``optparse`` options which will be fed into the "
"command's ``OptionParser`` for parsing arguments."
msgstr ""

# f492b39dd2d347128f3fe291213e7e63
#: ../../howto/custom-management-commands.txt:218
msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""

# dd93b1803b95426c88a6c93c591e07b5
#: ../../howto/custom-management-commands.txt:225
msgid ""
"A boolean; if ``True``, validation of installed models will be performed "
"prior to executing the command. Default value is ``True``. To validate an "
"individual application's models rather than all applications' models, call :"
"meth:`~BaseCommand.validate` from :meth:`~BaseCommand.handle`."
msgstr ""

# 890d1133d8a5498f9c9de7743f84f3d9
#: ../../howto/custom-management-commands.txt:234
msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the :"
"meth:`~BaseCommand.handle` method must be implemented."
msgstr ""

# b89015d562a94310a76719515bb239f1
#: ../../howto/custom-management-commands.txt:237
msgid "Implementing a constructor in a subclass"
msgstr ""

# cb223e72b1e944cba8dc2e8f72453887
#: ../../howto/custom-management-commands.txt:239
msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`'s ``__init__``."
msgstr ""

# a945e7a9393f4a879c334b9dbbb9d4da
#: ../../howto/custom-management-commands.txt:251
msgid ""
"Return the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""

# c6719d131f2b47efb6d304462634a569
#: ../../howto/custom-management-commands.txt:257
msgid ""
"Try to execute this command, performing model validation if needed (as "
"controlled by the attribute :attr:`requires_model_validation`). If the "
"command raises a :class:`CommandError`, intercept it and print it sensibly "
"to stderr."
msgstr ""

# 9f34563c87ba44938d071541b962760e
#: ../../howto/custom-management-commands.txt:263
msgid "Calling a management command in your code"
msgstr ""

# 8fea741f470d402cae341efb1a72b28b
#: ../../howto/custom-management-commands.txt:265
msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :ref:`call_command <call-command>` instead."
msgstr ""

# 2c5292a7a9794086958880f72e54c3d2
#: ../../howto/custom-management-commands.txt:270
msgid "The actual logic of the command. Subclasses must implement this method."
msgstr ""

# ca81f7be67cb4a6296f945f4a5f95f7f
#: ../../howto/custom-management-commands.txt:274
msgid "Validates the given app, raising :class:`CommandError` for any errors."
msgstr ""

# ed7b548b934a465c85d8d03f5a498e1f
#: ../../howto/custom-management-commands.txt:276
msgid "If ``app`` is None, then all installed apps are validated."
msgstr ""

# 93529d23c7c04ac58016a0b78fcc57e1
#: ../../howto/custom-management-commands.txt:282
msgid "BaseCommand subclasses"
msgstr ""

# 146c120f67a640be8c3425b7ca151f4a
#: ../../howto/custom-management-commands.txt:286
msgid ""
"A management command which takes one or more installed application names as "
"arguments, and does something with each of them."
msgstr ""

# 21460557043a4a6593bc45a5335bc9fd
#: ../../howto/custom-management-commands.txt:289
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app`, which will be called once for each "
"application."
msgstr ""

# 3b0ecae2c16a40999359a3afd90b0f8d
#: ../../howto/custom-management-commands.txt:294
msgid ""
"Perform the command's actions for ``app``, which will be the Python module "
"corresponding to an application name given on the command line."
msgstr ""

# d53ae7bb4c884f76a8d39be512845cd6
#: ../../howto/custom-management-commands.txt:300
msgid ""
"A management command which takes one or more arbitrary arguments (labels) on "
"the command line, and does something with each of them."
msgstr ""

# 86a4d2860eab494e96fdefdf606b2566
#: ../../howto/custom-management-commands.txt:304
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""

# 1c77209036214a03a0afec1ffd07c78d
#: ../../howto/custom-management-commands.txt:309
msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""

# 565be7497a034ac1909b59a0328a4b82
#: ../../howto/custom-management-commands.txt:314
msgid "A command which takes no arguments on the command line."
msgstr ""

# 318903e803954804a14513831908ca97
#: ../../howto/custom-management-commands.txt:316
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` "
"itself is overridden to ensure no arguments are passed to the command."
msgstr ""

# 48840df88d3d49b8945bef0cb875a7ae
#: ../../howto/custom-management-commands.txt:322
msgid "Perform this command's actions"
msgstr ""

# 5e2830f72ba4442cb286a143596f766d
#: ../../howto/custom-management-commands.txt:327
msgid "Command exceptions"
msgstr ""

# 643e54ed2a8942b1912c964a0576561a
#: ../../howto/custom-management-commands.txt:331
msgid ""
"Exception class indicating a problem while executing a management command."
msgstr ""

# 83fce2e99da64d7f9e8a0cf0d7e49b5c
#: ../../howto/custom-management-commands.txt:334
msgid ""
"If this exception is raised during the execution of a management command "
"from a command line console, it will be caught and turned into a nicely-"
"printed error message to the appropriate output stream (i.e., stderr); as a "
"result, raising this exception (with a sensible description of the error) is "
"the preferred way to indicate that something has gone wrong in the execution "
"of a command."
msgstr ""

# 3fdc76f307344027804335769cd653f9
#: ../../howto/custom-management-commands.txt:341
msgid ""
"If a management command is called from code through :ref:`call_command <call-"
"command>`, it's up to you to catch the exception when needed."
msgstr ""

# 11752952fa5040a09f450a629ef432f6
#: ../../howto/custom-model-fields.txt:3
msgid "Writing custom model fields"
msgstr ""

# baf3434707c949d7b7e13474ef7cfdb4
#: ../../howto/custom-model-fields.txt:8
msgid "Introduction"
msgstr ""

# 480beb4fd9744081ae82a48d5b0c20e8
#: ../../howto/custom-model-fields.txt:10
msgid ""
"The :doc:`model reference </topics/db/models>` documentation explains how to "
"use Django's standard field classes -- :class:`~django.db.models."
"CharField`, :class:`~django.db.models.DateField`, etc. For many purposes, "
"those classes are all you'll need. Sometimes, though, the Django version "
"won't meet your precise requirements, or you'll want to use a field that is "
"entirely different from those shipped with Django."
msgstr ""

# 4c394c55de6a4a33882166d86f24d80f
#: ../../howto/custom-model-fields.txt:17
msgid ""
"Django's built-in field types don't cover every possible database column "
"type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more "
"obscure column types, such as geographic polygons or even user-created types "
"such as `PostgreSQL custom types`_, you can define your own Django ``Field`` "
"subclasses."
msgstr ""

# 76f4c814024b48bcb93cf2044746ca11
#: ../../howto/custom-model-fields.txt:24
msgid ""
"Alternatively, you may have a complex Python object that can somehow be "
"serialized to fit into a standard database column type. This is another case "
"where a ``Field`` subclass will help you use your object with your models."
msgstr ""

# 102b0b96da184ec1911812d699b2c000
#: ../../howto/custom-model-fields.txt:29
msgid "Our example object"
msgstr ""

# 2a0fc13836a2447ab4a859d41401b12c
#: ../../howto/custom-model-fields.txt:31
msgid ""
"Creating custom fields requires a bit of attention to detail. To make things "
"easier to follow, we'll use a consistent example throughout this document: "
"wrapping a Python object representing the deal of cards in a hand of "
"Bridge_. Don't worry, you don't have to know how to play Bridge to follow "
"this example. You only need to know that 52 cards are dealt out equally to "
"four players, who are traditionally called *north*, *east*, *south* and "
"*west*.  Our class looks something like this::"
msgstr ""

# 55a93b103dd74f82a4fb10064268aa6a
#: ../../howto/custom-model-fields.txt:53
msgid ""
"This is just an ordinary Python class, with nothing Django-specific about "
"it. We'd like to be able to do things like this in our models (we assume the "
"``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""

# ffbd5d0cfd54410e95023e355020098a
#: ../../howto/custom-model-fields.txt:64
msgid ""
"We assign to and retrieve from the ``hand`` attribute in our model just like "
"any other Python class. The trick is to tell Django how to handle saving and "
"loading such an object."
msgstr ""

# fceca724c5bb494db726463e560e3df0
#: ../../howto/custom-model-fields.txt:68
msgid ""
"In order to use the ``Hand`` class in our models, we **do not** have to "
"change this class at all. This is ideal, because it means you can easily "
"write model support for existing classes where you cannot change the source "
"code."
msgstr ""

# 38ff55f907ef46658bb635f83aab04b0
#: ../../howto/custom-model-fields.txt:73
msgid ""
"You might only be wanting to take advantage of custom database column types "
"and deal with the data as standard Python types in your models; strings, or "
"floats, for example. This case is similar to our ``Hand`` example and we'll "
"note any differences as we go along."
msgstr ""

# 75a8b640b21a49ec997707d35c1b6bcc
#: ../../howto/custom-model-fields.txt:79
msgid "Background theory"
msgstr ""

# 8b526fbea91a4cd0a6ffaf4087cb17f1
#: ../../howto/custom-model-fields.txt:82
msgid "Database storage"
msgstr ""

# 2cbba8a8ab754f67b2f7e49377e492e6
#: ../../howto/custom-model-fields.txt:84
msgid ""
"The simplest way to think of a model field is that it provides a way to take "
"a normal Python object -- string, boolean, ``datetime``, or something more "
"complex like ``Hand`` -- and convert it to and from a format that is useful "
"when dealing with the database (and serialization, but, as we'll see later, "
"that falls out fairly naturally once you have the database side under "
"control)."
msgstr ""

# 387bc242d94e4d188f98d76b50f7cb66
#: ../../howto/custom-model-fields.txt:90
msgid ""
"Fields in a model must somehow be converted to fit into an existing database "
"column type. Different databases provide different sets of valid column "
"types, but the rule is still the same: those are the only types you have to "
"work with. Anything you want to store in the database must fit into one of "
"those types."
msgstr ""

# 0bf351059a75498db51924dc1d1368f8
#: ../../howto/custom-model-fields.txt:96
msgid ""
"Normally, you're either writing a Django field to match a particular "
"database column type, or there's a fairly straightforward way to convert "
"your data to, say, a string."
msgstr ""

# 2f7dd82affa344b8a157ee10f0078dba
#: ../../howto/custom-model-fields.txt:100
msgid ""
"For our ``Hand`` example, we could convert the card data to a string of 104 "
"characters by concatenating all the cards together in a pre-determined order "
"-- say, all the *north* cards first, then the *east*, *south* and *west* "
"cards. So ``Hand`` objects can be saved to text or character columns in the "
"database."
msgstr ""

# 89702b350f3b4e5bb282555f00e073be
#: ../../howto/custom-model-fields.txt:106
msgid "What does a field class do?"
msgstr ""

# c59358a3e69548399955e2ec0c0c1323
#: ../../howto/custom-model-fields.txt:110
msgid ""
"All of Django's fields (and when we say *fields* in this document, we always "
"mean model fields and not :doc:`form fields </ref/forms/fields>`) are "
"subclasses of :class:`django.db.models.Field`. Most of the information that "
"Django records about a field is common to all fields -- name, help text, "
"uniqueness and so forth. Storing all that information is handled by "
"``Field``. We'll get into the precise details of what ``Field`` can do later "
"on; for now, suffice it to say that everything descends from ``Field`` and "
"then customizes key pieces of the class behavior."
msgstr ""

# 3824fab868b94bf4a0ea125707aabcf7
#: ../../howto/custom-model-fields.txt:119
msgid ""
"It's important to realize that a Django field class is not what is stored in "
"your model attributes. The model attributes contain normal Python objects. "
"The field classes you define in a model are actually stored in the ``Meta`` "
"class when the model class is created (the precise details of how this is "
"done are unimportant here). This is because the field classes aren't "
"necessary when you're just creating and modifying attributes. Instead, they "
"provide the machinery for converting between the attribute value and what is "
"stored in the database or sent to the :doc:`serializer </topics/"
"serialization>`."
msgstr ""

# a070a8e3742f41c6a5f84d7c988ec939
#: ../../howto/custom-model-fields.txt:128
msgid ""
"Keep this in mind when creating your own custom fields. The Django ``Field`` "
"subclass you write provides the machinery for converting between your Python "
"instances and the database/serializer values in various ways (there are "
"differences between storing a value and using a value for lookups, for "
"example). If this sounds a bit tricky, don't worry -- it will become clearer "
"in the examples below. Just remember that you will often end up creating two "
"classes when you want a custom field:"
msgstr ""

# 1386dbd136b747028cd97e54a4b2a846
#: ../../howto/custom-model-fields.txt:136
msgid ""
"The first class is the Python object that your users will manipulate. They "
"will assign it to the model attribute, they will read from it for displaying "
"purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""

# 110d56f255384ec08a9de654dfc07562
#: ../../howto/custom-model-fields.txt:141
msgid ""
"The second class is the ``Field`` subclass. This is the class that knows how "
"to convert your first class back and forth between its permanent storage "
"form and the Python form."
msgstr ""

# 225a0102187948569fc5c471423e4671
#: ../../howto/custom-model-fields.txt:146
msgid "Writing a field subclass"
msgstr ""

# 6f1af9747f044e618c7363b01d1dd45a
#: ../../howto/custom-model-fields.txt:148
msgid ""
"When planning your :class:`~django.db.models.Field` subclass, first give "
"some thought to which existing :class:`~django.db.models.Field` class your "
"new field is most similar to. Can you subclass an existing Django field and "
"save yourself some work? If not, you should subclass the :class:`~django.db."
"models.Field` class, from which everything is descended."
msgstr ""

# af6aa44dde184228a8bd05df0e65adfc
#: ../../howto/custom-model-fields.txt:154
msgid ""
"Initializing your new field is a matter of separating out any arguments that "
"are specific to your case from the common arguments and passing the latter "
"to the ``__init__()`` method of :class:`~django.db.models.Field` (or your "
"parent class)."
msgstr ""

# 3a5ca0f7f5354fdcb419114813c3a422
#: ../../howto/custom-model-fields.txt:159
msgid ""
"In our example, we'll call our field ``HandField``. (It's a good idea to "
"call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so "
"it's easily identifiable as a :class:`~django.db.models.Field` subclass.) It "
"doesn't behave like any existing field, so we'll subclass directly from :"
"class:`~django.db.models.Field`::"
msgstr ""

# 9238fc508a4d493991ea421505852feb
#: ../../howto/custom-model-fields.txt:175
msgid ""
"Our ``HandField`` accepts most of the standard field options (see the list "
"below), but we ensure it has a fixed length, since it only needs to hold 52 "
"card values plus their suits; 104 characters in total."
msgstr ""

# c012a82dd1844b0f97384ae59c839ab3
#: ../../howto/custom-model-fields.txt:181
msgid ""
"Many of Django's model fields accept options that they don't do anything "
"with. For example, you can pass both :attr:`~django.db.models.Field."
"editable` and :attr:`~django.db.models.DateField.auto_now` to a :class:"
"`django.db.models.DateField` and it will simply ignore the :attr:`~django.db."
"models.Field.editable` parameter (:attr:`~django.db.models.DateField."
"auto_now` being set implies ``editable=False``). No error is raised in this "
"case."
msgstr ""

# b914a4e66bd942268e4d3667fe0699d9
#: ../../howto/custom-model-fields.txt:190
msgid ""
"This behavior simplifies the field classes, because they don't need to check "
"for options that aren't necessary. They just pass all the options to the "
"parent class and then don't use them later on. It's up to you whether you "
"want your fields to be more strict about the options they select, or to use "
"the simpler, more permissive behavior of the current fields."
msgstr ""

# 581b3ff3cf23467ba0c5ad0a50a11548
#: ../../howto/custom-model-fields.txt:198
msgid ""
"The :meth:`~django.db.models.Field.__init__` method takes the following "
"parameters:"
msgstr ""

# ba74ecf8a73a40b0a4d4eb0e742db1c4
#: ../../howto/custom-model-fields.txt:201
msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ""

# de4b2eb4fa674f57bae44f30395f3b79
#: ../../howto/custom-model-fields.txt:202
msgid "``name``"
msgstr ""

# c69e1f07b70d40e0a4d31ed724252786
#: ../../howto/custom-model-fields.txt:203
msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ""

# a854b3f1680c4bb69668d7cd1f485e66
#: ../../howto/custom-model-fields.txt:204
msgid ":attr:`~django.db.models.CharField.max_length`"
msgstr ""

# b53c08637af84d3f8c8bb166368b5316
#: ../../howto/custom-model-fields.txt:205
msgid ":attr:`~django.db.models.Field.unique`"
msgstr ""

# 02e2874b8a6a44d7972f5fbd6ca312dd
#: ../../howto/custom-model-fields.txt:206
msgid ":attr:`~django.db.models.Field.blank`"
msgstr ""

# cef9c365d18c4de9b7a9dacf2fb67525
#: ../../howto/custom-model-fields.txt:207
msgid ":attr:`~django.db.models.Field.null`"
msgstr ""

# 6ed7ff0b8c6648a0a0bec0394408999e
#: ../../howto/custom-model-fields.txt:208
msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ""

# 99ac23d388a14c08b431750ee2bc67d7
#: ../../howto/custom-model-fields.txt:209
msgid ""
"``rel``: Used for related fields (like :class:`ForeignKey`). For advanced "
"use only."
msgstr ""

# b77814525a474070b77864a9735cd2dc
#: ../../howto/custom-model-fields.txt:211
msgid ":attr:`~django.db.models.Field.default`"
msgstr ""

# d6fb6d5fd77d4c4ca4f0c6167f24e4da
#: ../../howto/custom-model-fields.txt:212
msgid ":attr:`~django.db.models.Field.editable`"
msgstr ""

# e7b625879a054304b6e4974b64a45b0d
#: ../../howto/custom-model-fields.txt:213
msgid ""
"``serialize``: If ``False``, the field will not be serialized when the model "
"is passed to Django's :doc:`serializers </topics/serialization>`. Defaults "
"to ``True``."
msgstr ""

# afa8b812bfbc46d5aabc78508d5c1d36
#: ../../howto/custom-model-fields.txt:216
msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ""

# 4576af4a4bc2415cb98722935cbd4aee
#: ../../howto/custom-model-fields.txt:217
msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ""

# c331cb347a024f36aaf5ff0125010823
#: ../../howto/custom-model-fields.txt:218
msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ""

# 872bb3565f674ad3859df2b5f5145acc
#: ../../howto/custom-model-fields.txt:219
msgid ":attr:`~django.db.models.Field.choices`"
msgstr ""

# 1212ff6734fd426f92f3e4e7d5d2c276
#: ../../howto/custom-model-fields.txt:220
msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ""

# 2c19603308fd498fa4a8bc19bb92e07c
#: ../../howto/custom-model-fields.txt:221
msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ""

# 55626ed7a81a4d4ca8dafbfbcf6c1a8e
#: ../../howto/custom-model-fields.txt:222
msgid ""
":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if "
"the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can "
"usually ignore this option."
msgstr ""

# e541b156ce854100b69f8d0a53761804
#: ../../howto/custom-model-fields.txt:225
msgid ""
"``auto_created``: ``True`` if the field was automatically created, as for "
"the :class:`~django.db.models.OneToOneField` used by model inheritance. For "
"advanced use only."
msgstr ""

# 81e070c94b3949ec8baf5fb604b69d98
#: ../../howto/custom-model-fields.txt:229
msgid ""
"All of the options without an explanation in the above list have the same "
"meaning they do for normal Django fields. See the :doc:`field documentation "
"</ref/models/fields>` for examples and details."
msgstr ""

# 30afe21c2db341ec8ec42f8ab0355f8f
#: ../../howto/custom-model-fields.txt:234
msgid "The ``SubfieldBase`` metaclass"
msgstr ""

# 895c9f4a126f46eb9f82b768e094d985
#: ../../howto/custom-model-fields.txt:238
msgid ""
"As we indicated in the introduction_, field subclasses are often needed for "
"two reasons: either to take advantage of a custom database column type, or "
"to handle complex Python types. Obviously, a combination of the two is also "
"possible. If you're only working with custom database column types and your "
"model fields appear in Python as standard Python types direct from the "
"database backend, you don't need to worry about this section."
msgstr ""

# 27ad2584ef4a4c17b00b2cf1e05c4b7d
#: ../../howto/custom-model-fields.txt:245
msgid ""
"If you're handling custom Python types, such as our ``Hand`` class, we need "
"to make sure that when Django initializes an instance of our model and "
"assigns a database value to our custom field attribute, we convert that "
"value into the appropriate Python object. The details of how this happens "
"internally are a little complex, but the code you need to write in your "
"``Field`` class is simple: make sure your field subclass uses a special "
"metaclass:"
msgstr ""

# 75eca2e546c94db69d2bcfd366cb071a
#: ../../howto/custom-model-fields.txt:252
msgid "For example, on Python 2::"
msgstr ""

# 4601422ac5fc4c47bbf6f1bd076cbf59
#: ../../howto/custom-model-fields.txt:263
msgid ""
"On Python 3, in lieu of setting the ``__metaclass__`` attribute, add "
"``metaclass`` to the class definition::"
msgstr ""

# 61ed3a3e86e447858f3994db625fc22e
#: ../../howto/custom-model-fields.txt:269
msgid ""
"If you want your code to work on Python 2 & 3, you can use :func:`six."
"with_metaclass`::"
msgstr ""

# 203c3e3e3f2d4ad6a1c8029e7195d101
#: ../../howto/custom-model-fields.txt:277
msgid ""
"This ensures that the :meth:`.to_python` method, documented below, will "
"always be called when the attribute is initialized."
msgstr ""

# 345bc923a01b4ae2bd34bdd7f77b0414
#: ../../howto/custom-model-fields.txt:267
msgid "ModelForms and custom fields"
msgstr ""

# edc871198aff4b7d9388485c2810bf53
#: ../../howto/custom-model-fields.txt:269
msgid ""
"If you use :class:`~django.db.models.SubfieldBase`, :meth:`.to_python` will "
"be called every time an instance of the field is assigned a value. This "
"means that whenever a value may be assigned to the field, you need to ensure "
"that it will be of the correct datatype, or that you handle any exceptions."
msgstr ""

# 317721e12eb049eb8967a98723b99558
#: ../../howto/custom-model-fields.txt:275
msgid ""
"This is especially important if you use :doc:`ModelForms </topics/forms/"
"modelforms>`. When saving a ModelForm, Django will use form values to "
"instantiate model instances. However, if the cleaned form data can't be used "
"as valid input to the field, the normal form validation process will break."
msgstr ""

# 5daa84ccdccb4d76b005aa7020125761
#: ../../howto/custom-model-fields.txt:281
msgid ""
"Therefore, you must ensure that the form field used to represent your custom "
"field performs whatever input validation and data cleaning is necessary to "
"convert user-provided form input into a `to_python()`-compatible model field "
"value. This may require writing a custom form field, and/or implementing "
"the :meth:`.formfield` method on your field to return a form field class "
"whose `to_python()` returns the correct datatype."
msgstr ""

# 751ee09072a04a9f90acce59c69d8937
#: ../../howto/custom-model-fields.txt:290
msgid "Documenting your custom field"
msgstr ""

# 6f4321db47fe42ae8e6831268499299e
#: ../../howto/custom-model-fields.txt:294
msgid ""
"As always, you should document your field type, so users will know what it "
"is. In addition to providing a docstring for it, which is useful for "
"developers, you can also allow users of the admin app to see a short "
"description of the field type via the :doc:`django.contrib.admindocs </ref/"
"contrib/admin/admindocs>` application. To do this simply provide descriptive "
"text in a ``description`` class attribute of your custom field. In the above "
"example, the description displayed by the ``admindocs`` application for a "
"``HandField`` will be 'A hand of cards (bridge style)'."
msgstr ""

# c64445dc4e604be6bd01f88d0d3899b0
#: ../../howto/custom-model-fields.txt:317
msgid ""
"In the :mod:`django.contrib.admindocs` display, the field description is "
"interpolated with ``field.__dict__`` which allows the description to "
"incorporate arguments of the field. For example, the description for :class:"
"`~django.db.models.CharField` is::"
msgstr ""

# 3ab2b255cad240dd8d01b26899521c78
#: ../../howto/custom-model-fields.txt:325
msgid "Useful methods"
msgstr ""

# ac6d4f4da6894c0fa34349c5f24e762a
#: ../../howto/custom-model-fields.txt:306
msgid ""
"Once you've created your :class:`~django.db.models.Field` subclass and set "
"up the ``__metaclass__``, you might consider overriding a few standard "
"methods, depending on your field's behavior. The list of methods below is in "
"approximately decreasing order of importance, so start from the top."
msgstr ""

# f76db2f5f12a44a7b038c6ee0331d89c
#: ../../howto/custom-model-fields.txt:312
msgid "Custom database types"
msgstr ""

# 38e7758c359649a3a7f4ef6fef4bbaea
#: ../../howto/custom-model-fields.txt:316
msgid ""
"Returns the database column data type for the :class:`~django.db.models."
"Field`, taking into account the connection object, and the settings "
"associated with it."
msgstr ""

# 83ec22197ceb4f73bf9240d774bdbb75
#: ../../howto/custom-model-fields.txt:319
msgid ""
"Say you've created a PostgreSQL custom type called ``mytype``. You can use "
"this field with Django by subclassing ``Field`` and implementing the :meth:`."
"db_type` method, like so::"
msgstr ""

# b08dce301a6b41d68db8329c2a913ea7
#: ../../howto/custom-model-fields.txt:329
msgid ""
"Once you have ``MytypeField``, you can use it in any model, just like any "
"other ``Field`` type::"
msgstr ""

# 1ae5efef1d18487cae8b1558ecfaf9b1
#: ../../howto/custom-model-fields.txt:336
msgid ""
"If you aim to build a database-agnostic application, you should account for "
"differences in database column types. For example, the date/time column type "
"in PostgreSQL is called ``timestamp``, while the same column in MySQL is "
"called ``datetime``. The simplest way to handle this in a :meth:`.db_type` "
"method is to check the ``connection.settings_dict['ENGINE']`` attribute."
msgstr ""

# c9b8b02bb69544e894472c45764fc22b
# 5bfa76362c47424b9259872f69d39595
# 4603ac2bd7cf430f9e7790920bd12c05
#: ../../howto/custom-model-fields.txt:363
#: ../../howto/custom-model-fields.txt:495
#: ../../howto/custom-model-fields.txt:666
msgid "For example::"
msgstr ""

# 13d1b3c1e9ae46edaf7444874bc390ad
#: ../../howto/custom-model-fields.txt:372
msgid ""
"The :meth:`.db_type` method is only called by Django when the framework "
"constructs the ``CREATE TABLE`` statements for your application -- that is, "
"when you first create your tables. It's not called at any other time, so it "
"can afford to execute slightly complex code, such as the ``connection."
"settings_dict`` check in the above example."
msgstr ""

# d039040c8381426eac50ef0fd5f8c289
#: ../../howto/custom-model-fields.txt:357
msgid ""
"Some database column types accept parameters, such as ``CHAR(25)``, where "
"the parameter ``25`` represents the maximum column length. In cases like "
"these, it's more flexible if the parameter is specified in the model rather "
"than being hard-coded in the ``db_type()`` method. For example, it wouldn't "
"make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""

# 05624bd823a7469aad97574aebff8345
#: ../../howto/custom-model-fields.txt:373
msgid ""
"The better way of doing this would be to make the parameter specifiable at "
"run time -- i.e., when the class is instantiated. To do that, just "
"implement :meth:`django.db.models.Field.__init__`, like so::"
msgstr ""

# c4c0e52f442d4a8298083ddb4f8e5ac2
#: ../../howto/custom-model-fields.txt:391
msgid ""
"Finally, if your column requires truly complex SQL setup, return ``None`` "
"from :meth:`.db_type`. This will cause Django's SQL creation code to skip "
"over this field. You are then responsible for creating the column in the "
"right table in some other way, of course, but this gives you a way to tell "
"Django to get out of the way."
msgstr ""

# e63f218fec7244e4b4a8388ae76e49e3
#: ../../howto/custom-model-fields.txt:398
msgid "Converting database values to Python objects"
msgstr ""

# 63163107e972434c94ef341fb52b5b70
#: ../../howto/custom-model-fields.txt:402
msgid ""
"Converts a value as returned by your database (or a serializer) to a Python "
"object."
msgstr ""

# c6fc039f14b44433942e4cab6cd94d8a
#: ../../howto/custom-model-fields.txt:405
msgid ""
"The default implementation simply returns ``value``, for the common case in "
"which the database backend already returns data in the correct format (as a "
"Python string, for example)."
msgstr ""

# 6793dfe1f4c34fed93086f1fdf2895b5
#: ../../howto/custom-model-fields.txt:409
msgid ""
"If your custom :class:`~django.db.models.Field` class deals with data "
"structures that are more complex than strings, dates, integers or floats, "
"then you'll need to override this method. As a general rule, the method "
"should deal gracefully with any of the following arguments:"
msgstr ""

# 8b4d28af9aa7494795e223237ec09f53
#: ../../howto/custom-model-fields.txt:414
msgid ""
"An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr ""

# abeaeea428d84048b8c226b58267545e
#: ../../howto/custom-model-fields.txt:416
msgid "A string (e.g., from a deserializer)."
msgstr ""

# e81be59297de4f9e93774385bcc372ca
#: ../../howto/custom-model-fields.txt:418
msgid "Whatever the database returns for the column type you're using."
msgstr ""

# 8aa2ae9b00ca47beabbb56d384628ba2
#: ../../howto/custom-model-fields.txt:420
msgid ""
"In our ``HandField`` class, we're storing the data as a VARCHAR field in the "
"database, so we need to be able to process strings and ``Hand`` instances "
"in :meth:`.to_python`::"
msgstr ""

# 9549993e88d54540975c9ba9ceed839a
#: ../../howto/custom-model-fields.txt:441
msgid ""
"Notice that we always return a ``Hand`` instance from this method. That's "
"the Python object type we want to store in the model's attribute. If "
"anything is going wrong during value conversion, you should raise a :exc:"
"`~django.core.exceptions.ValidationError` exception."
msgstr ""

# 8d8239ea25064e3aac426ab5ffaf6ba6
#: ../../howto/custom-model-fields.txt:446
msgid ""
"**Remember:** If your custom field needs the :meth:`.to_python` method to be "
"called when it is created, you should be using `The SubfieldBase metaclass`_ "
"mentioned earlier. Otherwise :meth:`.to_python` won't be called "
"automatically."
msgstr ""

# 3aacb6ea6b734491ae0c747d44d5e484
#: ../../howto/custom-model-fields.txt:453
msgid ""
"If your custom field allows ``null=True``, any field method that takes "
"``value`` as an argument, like :meth:`~Field.to_python` and :meth:`~Field."
"get_prep_value`, should handle the case when ``value`` is ``None``."
msgstr ""

# a7c41f5fad0f46c1a42b3107e8722fbb
#: ../../howto/custom-model-fields.txt:459
msgid "Converting Python objects to query values"
msgstr ""

# f776183d46744940a0eded4ad1e5a5a5
#: ../../howto/custom-model-fields.txt:463
msgid ""
"This is the reverse of :meth:`.to_python` when working with the database "
"backends (as opposed to serialization). The ``value`` parameter is the "
"current value of the model's attribute (a field has no reference to its "
"containing model, so it cannot retrieve the value itself), and the method "
"should return data in a format that has been prepared for use as a parameter "
"in a query."
msgstr ""

# 1a65aa0c46774cb6ad4ff7b7f6316140
#: ../../howto/custom-model-fields.txt:470
msgid ""
"This conversion should *not* include any database-specific conversions. If "
"database-specific conversions are required, they should be made in the call "
"to :meth:`.get_db_prep_value`."
msgstr ""

# 8a9daeda5a47486b9ae26f75b8a038b1
#: ../../howto/custom-model-fields.txt:484
msgid "Converting query values to database values"
msgstr ""

# 6061d7c81aba41ab943e91c22571e6b6
#: ../../howto/custom-model-fields.txt:488
msgid ""
"Some data types (for example, dates) need to be in a specific format before "
"they can be used by a database backend. :meth:`.get_db_prep_value` is the "
"method where those conversions should be made. The specific connection that "
"will be used for the query is passed as the ``connection`` parameter. This "
"allows you to use backend-specific conversion logic if it is required."
msgstr ""

# c277aca6b719462892a412895af1ff49
#: ../../howto/custom-model-fields.txt:495
msgid ""
"The ``prepared`` argument describes whether or not the value has already "
"been passed through :meth:`.get_prep_value` conversions. When ``prepared`` "
"is False, the default implementation of :meth:`.get_db_prep_value` will "
"call :meth:`.get_prep_value` to do initial data conversions before "
"performing any database-specific processing."
msgstr ""

# f6b1e3a4e92f414da197f1e77028c9b2
#: ../../howto/custom-model-fields.txt:504
msgid ""
"Same as the above, but called when the Field value must be *saved* to the "
"database. As the default implementation just calls :meth:`."
"get_db_prep_value`, you shouldn't need to implement this method unless your "
"custom field needs a special conversion when being saved that is not the "
"same as the conversion used for normal query parameters (which is "
"implemented by :meth:`.get_db_prep_value`)."
msgstr ""

# bc2e5172a9c243f5a45707d6567869ea
#: ../../howto/custom-model-fields.txt:512
msgid "Preprocessing values before saving"
msgstr ""

# da58a21d9ac140dc9ba9013540e371f7
#: ../../howto/custom-model-fields.txt:516
msgid ""
"This method is called just prior to :meth:`.get_db_prep_save` and should "
"return the value of the appropriate attribute from ``model_instance`` for "
"this field. The attribute name is in ``self.attname`` (this is set up by :"
"class:`~django.db.models.Field`). If the model is being saved to the "
"database for the first time, the ``add`` parameter will be ``True``, "
"otherwise it will be ``False``."
msgstr ""

# 62993d8eb3314be7bb32191d754c4dce
#: ../../howto/custom-model-fields.txt:523
msgid ""
"You only need to override this method if you want to preprocess the value "
"somehow, just before saving. For example, Django's :class:`~django.db.models."
"DateTimeField` uses this method to set the attribute correctly in the case "
"of :attr:`~django.db.models.DateField.auto_now` or :attr:`~django.db.models."
"DateField.auto_now_add`."
msgstr ""

# d0048df0a75d427591affc2f0e3b6588
#: ../../howto/custom-model-fields.txt:529
msgid ""
"If you do override this method, you must return the value of the attribute "
"at the end. You should also update the model's attribute if you make any "
"changes to the value so that code holding references to the model will "
"always see the correct value."
msgstr ""

# c8f27cb676bc427b898a6824ebd522da
#: ../../howto/custom-model-fields.txt:535
msgid "Preparing values for use in database lookups"
msgstr ""

# 8e2871347f084fb4b46e237c1215cf3c
#: ../../howto/custom-model-fields.txt:537
msgid ""
"As with value conversions, preparing a value for database lookups is a two "
"phase process."
msgstr ""

# 475b6b0d798444669b148ededa068fc5
#: ../../howto/custom-model-fields.txt:542
msgid ""
":meth:`.get_prep_lookup` performs the first phase of lookup preparation, "
"performing generic data validity checks"
msgstr ""

# f7f17465f34747298b9a7f444c61d8c0
#: ../../howto/custom-model-fields.txt:545
msgid ""
"Prepares the ``value`` for passing to the database when used in a lookup (a "
"``WHERE`` constraint in SQL). The ``lookup_type`` will be one of the valid "
"Django filter lookups: ``exact``, ``iexact``, ``contains``, ``icontains``, "
"``gt``, ``gte``, ``lt``, ``lte``, ``in``, ``startswith``, ``istartswith``, "
"``endswith``, ``iendswith``, ``range``, ``year``, ``month``, ``day``, "
"``isnull``, ``search``, ``regex``, and ``iregex``."
msgstr ""

# 553719013e7d4e0fafecca03f843b607
#: ../../howto/custom-model-fields.txt:552
msgid ""
"Your method must be prepared to handle all of these ``lookup_type`` values "
"and should raise either a ``ValueError`` if the ``value`` is of the wrong "
"sort (a list when you were expecting an object, for example) or a "
"``TypeError`` if your field does not support that type of lookup. For many "
"fields, you can get by with handling the lookup types that need special "
"handling for your field and pass the rest to the :meth:`.get_db_prep_lookup` "
"method of the parent class."
msgstr ""

# b56a1291120a401d8bc608bffc6c01ca
#: ../../howto/custom-model-fields.txt:559
msgid ""
"If you needed to implement ``get_db_prep_save()``, you will usually need to "
"implement ``get_prep_lookup()``. If you don't, ``get_prep_value`` will be "
"called by the default implementation, to manage ``exact``, ``gt``, ``gte``, "
"``lt``, ``lte``, ``in`` and ``range`` lookups."
msgstr ""

# c25b221b63c045cc8335ff7b02503900
#: ../../howto/custom-model-fields.txt:564
msgid ""
"You may also want to implement this method to limit the lookup types that "
"could be used with your custom field type."
msgstr ""

# 6f5a02440a1d433aa051abdfe5222a08
#: ../../howto/custom-model-fields.txt:567
msgid ""
"Note that, for ``range`` and ``in`` lookups, ``get_prep_lookup`` will "
"receive a list of objects (presumably of the right type) and will need to "
"convert them to a list of things of the right type for passing to the "
"database. Most of the time, you can reuse ``get_prep_value()``, or at least "
"factor out some common pieces."
msgstr ""

# 72e26223abfe49488fd39b7f44b77b6f
#: ../../howto/custom-model-fields.txt:573
msgid ""
"For example, the following code implements ``get_prep_lookup`` to limit the "
"accepted lookup types to ``exact`` and ``in``::"
msgstr ""

# b67ff015a8a7475e98ac1590a172ea49
#: ../../howto/custom-model-fields.txt:590
msgid ""
"Performs any database-specific data conversions required by a lookup. As "
"with :meth:`.get_db_prep_value`, the specific connection that will be used "
"for the query is passed as the ``connection`` parameter. The ``prepared`` "
"argument describes whether the value has already been prepared with :meth:`."
"get_prep_lookup`."
msgstr ""

# 9b306f120b914c248dd9e65eb409e499
#: ../../howto/custom-model-fields.txt:597
msgid "Specifying the form field for a model field"
msgstr ""

# 92258d9e87044a2cbce06f199e8163dd
#: ../../howto/custom-model-fields.txt:601
msgid ""
"Returns the default form field to use when this field is displayed in a "
"model. This method is called by the :class:`~django.forms.ModelForm` helper."
msgstr ""

# d3b83a903b5d40b9918516b1343905ce
#: ../../howto/custom-model-fields.txt:604
msgid ""
"All of the ``kwargs`` dictionary is passed directly to the form field's "
"``__init__()`` method. Normally, all you need to do is set up a good default "
"for the ``form_class`` argument and then delegate further handling to the "
"parent class. This might require you to write a custom form field (and even "
"a form widget). See the :doc:`forms documentation </topics/forms/index>` for "
"information about this, and take a look at the code in :mod:`django.contrib."
"localflavor` for some examples of custom widgets."
msgstr ""

# f233f3b29189456c9503dbe39cfe2eb7
#: ../../howto/custom-model-fields.txt:612
msgid ""
"Continuing our ongoing example, we can write the :meth:`.formfield` method "
"as::"
msgstr ""

# c4555798a8c641aeb2cb47ff6b52ffa5
#: ../../howto/custom-model-fields.txt:624
msgid ""
"This assumes we've imported a ``MyFormField`` field class (which has its own "
"default widget). This document doesn't cover the details of writing custom "
"form fields."
msgstr ""

# a97637d21bc343d389e21085bbdd88eb
#: ../../howto/custom-model-fields.txt:632
msgid "Emulating built-in field types"
msgstr ""

# 84cf4d9f21b045fcaeccf7974054e9b4
#: ../../howto/custom-model-fields.txt:636
msgid ""
"Returns a string giving the name of the :class:`~django.db.models.Field` "
"subclass we are emulating at the database level. This is used to determine "
"the type of database column for simple cases."
msgstr ""

# efc88ba34f874f148d7ea820e70907b9
#: ../../howto/custom-model-fields.txt:640
msgid ""
"If you have created a :meth:`.db_type` method, you don't need to worry "
"about :meth:`.get_internal_type` -- it won't be used much. Sometimes, "
"though, your database storage is similar in type to some other field, so you "
"can use that other field's logic to create the right column."
msgstr ""

# 888b2c7a51804445b1b7ecbcccd88b44
#: ../../howto/custom-model-fields.txt:653
msgid ""
"No matter which database backend we are using, this will mean that "
"``syncdb`` and other SQL commands create the right column type for storing a "
"string."
msgstr ""

# e86fc51d70a64aecba8f2edfe7e94a89
#: ../../howto/custom-model-fields.txt:656
msgid ""
"If :meth:`.get_internal_type` returns a string that is not known to Django "
"for the database backend you are using -- that is, it doesn't appear in "
"``django.db.backends.<db_name>.creation.DATA_TYPES`` -- the string will "
"still be used by the serializer, but the default :meth:`.db_type` method "
"will return ``None``. See the documentation of :meth:`.db_type` for reasons "
"why this might be useful. Putting a descriptive string in as the type of the "
"field for the serializer is a useful idea if you're ever going to be using "
"the serializer output in some other place, outside of Django."
msgstr ""

# 65986826c78548d597d8961a1d1b3198
#: ../../howto/custom-model-fields.txt:666
msgid "Converting field data for serialization"
msgstr ""

# 5f6b765939414741a2c67d85b1ac4d1e
#: ../../howto/custom-model-fields.txt:670
msgid ""
"This method is used by the serializers to convert the field into a string "
"for output. Calling ``Field._get_val_from_obj(obj)`` is the best way to get "
"the value to serialize. For example, since our ``HandField`` uses strings "
"for its data storage anyway, we can reuse some existing conversion code::"
msgstr ""

# e5201c7686a544a5b76c3cc2711a384f
#: ../../howto/custom-model-fields.txt:683
msgid "Some general advice"
msgstr ""

# 78f580785fac4f7a98369ae81a461a61
#: ../../howto/custom-model-fields.txt:685
msgid ""
"Writing a custom field can be a tricky process, particularly if you're doing "
"complex conversions between your Python types and your database and "
"serialization formats. Here are a couple of tips to make things go more "
"smoothly:"
msgstr ""

# 2f646915894141afbda2d2a5d75ec29c
#: ../../howto/custom-model-fields.txt:690
msgid ""
"Look at the existing Django fields (in :file:`django/db/models/fields/"
"__init__.py`) for inspiration. Try to find a field that's similar to what "
"you want and extend it a little bit, instead of creating an entirely new "
"field from scratch."
msgstr ""

# 927dacf8afdd49ae83bdf403e710ffbc
#: ../../howto/custom-model-fields.txt:695
msgid ""
"Put a ``__str__()`` or ``__unicode__()`` method on the class you're wrapping "
"up as a field. There are a lot of places where the default behavior of the "
"field code is to call :func:`~django.utils.encoding.force_text` on the "
"value. (In our examples in this document, ``value`` would be a ``Hand`` "
"instance, not a ``HandField``). So if your ``__unicode__()`` method "
"automatically converts to the string form of your Python object, you can "
"save yourself a lot of work."
msgstr ""

# 58400c5cb09e47faae3c2c5cfeadbe3c
#: ../../howto/custom-model-fields.txt:706
msgid "Writing a ``FileField`` subclass"
msgstr ""

# 73d16a14660b4d55b9092290ef702a15
#: ../../howto/custom-model-fields.txt:708
msgid ""
"In addition to the above methods, fields that deal with files have a few "
"other special requirements which must be taken into account. The majority of "
"the mechanics provided by ``FileField``, such as controlling database "
"storage and retrieval, can remain unchanged, leaving subclasses to deal with "
"the challenge of supporting a particular type of file."
msgstr ""

# 8175d2cd25ca44539c4ce7e2d15624c5
#: ../../howto/custom-model-fields.txt:714
msgid ""
"Django provides a ``File`` class, which is used as a proxy to the file's "
"contents and operations. This can be subclassed to customize how the file is "
"accessed, and what methods are available. It lives at ``django.db.models."
"fields.files``, and its default behavior is explained in the :doc:`file "
"documentation </ref/files/file>`."
msgstr ""

# eab3da53ae2949a0851308370b883cdf
#: ../../howto/custom-model-fields.txt:720
msgid ""
"Once a subclass of ``File`` is created, the new ``FileField`` subclass must "
"be told to use it. To do so, simply assign the new ``File`` subclass to the "
"special ``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""

# 5f5cd56d8618499a960701856ca0a19c
#: ../../howto/custom-model-fields.txt:725
msgid "A few suggestions"
msgstr ""

# 0edb009100894b2d864d5a0bcc5fef9a
#: ../../howto/custom-model-fields.txt:727
msgid ""
"In addition to the above details, there are a few guidelines which can "
"greatly improve the efficiency and readability of the field's code."
msgstr ""

# f192d57e25b346d284cc1f34844aa68f
#: ../../howto/custom-model-fields.txt:730
msgid ""
"The source for Django's own ``ImageField`` (in ``django/db/models/fields/"
"files.py``) is a great example of how to subclass ``FileField`` to support a "
"particular type of file, as it incorporates all of the techniques described "
"above."
msgstr ""

# 2f5f1ff5bd8f45bba0aeb0b53844bd1e
#: ../../howto/custom-model-fields.txt:735
msgid ""
"Cache file attributes wherever possible. Since files may be stored in remote "
"storage systems, retrieving them may cost extra time, or even money, that "
"isn't always necessary. Once a file is retrieved to obtain some data about "
"its content, cache as much of that data as possible to reduce the number of "
"times the file must be retrieved on subsequent calls for that information."
msgstr ""

# b6645c35524946929cbbca973bc5414b
#: ../../howto/custom-template-tags.txt:3
msgid "Custom template tags and filters"
msgstr ""

# 937930efb74a4221a39a77289efc81b5
#: ../../howto/custom-template-tags.txt:5
msgid ""
"Django's template system comes with a wide variety of :doc:`built-in tags "
"and filters </ref/templates/builtins>` designed to address the presentation "
"logic needs of your application. Nevertheless, you may find yourself needing "
"functionality that is not covered by the core set of template primitives. "
"You can extend the template engine by defining custom tags and filters using "
"Python, and then make them available to your templates using the :ttag:`{% "
"load %}<load>` tag."
msgstr ""

# 5a1f34a743b546499430ee7dbb2a95ea
#: ../../howto/custom-template-tags.txt:14
msgid "Code layout"
msgstr ""

# 54eeda95eede4e4fa39bea1c4923aaff
#: ../../howto/custom-template-tags.txt:16
msgid ""
"Custom template tags and filters must live inside a Django app. If they "
"relate to an existing app it makes sense to bundle them there; otherwise, "
"you should create a new app to hold them."
msgstr ""

# b3ef066bd52d4001a4d9e01263a38c02
#: ../../howto/custom-template-tags.txt:20
msgid ""
"The app should contain a ``templatetags`` directory, at the same level as "
"``models.py``, ``views.py``, etc. If this doesn't already exist, create it - "
"don't forget the ``__init__.py`` file to ensure the directory is treated as "
"a Python package. After adding this module, you will need to restart your "
"server before you can use the tags or filters in templates."
msgstr ""

# d169e8da53c84b19a45795b21a677bd1
#: ../../howto/custom-template-tags.txt:26
msgid ""
"Your custom tags and filters will live in a module inside the "
"``templatetags`` directory. The name of the module file is the name you'll "
"use to load the tags later, so be careful to pick a name that won't clash "
"with custom tags and filters in another app."
msgstr ""

# f0845ca918be422c9112998228c8da26
#: ../../howto/custom-template-tags.txt:31
msgid ""
"For example, if your custom tags/filters are in a file called ``poll_extras."
"py``, your app layout might look like this::"
msgstr ""

# b670ad5ea81e4a40837879210c0b2d83
#: ../../howto/custom-template-tags.txt:41
msgid "And in your template you would use the following:"
msgstr ""

# 0e5b80279cad492aa944cb99139afaeb
#: ../../howto/custom-template-tags.txt:47
msgid ""
"The app that contains the custom tags must be in :setting:`INSTALLED_APPS` "
"in order for the :ttag:`{% load %}<load>` tag to work. This is a security "
"feature: It allows you to host Python code for many template libraries on a "
"single host machine without enabling access to all of them for every Django "
"installation."
msgstr ""

# 8e8bde7bb79c42ba9a74d2342e8bee7b
#: ../../howto/custom-template-tags.txt:52
msgid ""
"There's no limit on how many modules you put in the ``templatetags`` "
"package. Just keep in mind that a :ttag:`{% load %}<load>` statement will "
"load tags/filters for the given Python module name, not the name of the app."
msgstr ""

# 16263d002fec412ab3ac19477701ccf6
#: ../../howto/custom-template-tags.txt:56
msgid ""
"To be a valid tag library, the module must contain a module-level variable "
"named ``register`` that is a ``template.Library`` instance, in which all the "
"tags and filters are registered. So, near the top of your module, put the "
"following:"
msgstr ""

# 51a5eb2bd00a42b282ce51162325517e
#: ../../howto/custom-template-tags.txt:68
msgid "Behind the scenes"
msgstr ""

# e72f532b837147b88858efb428cb083a
#: ../../howto/custom-template-tags.txt:70
msgid ""
"For a ton of examples, read the source code for Django's default filters and "
"tags. They're in ``django/template/defaultfilters.py`` and ``django/template/"
"defaulttags.py``, respectively."
msgstr ""

# 19c9345569ee417f83ff16ff2d637371
#: ../../howto/custom-template-tags.txt:74
msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr ""

# 27f2099e268b4978b6598edfcbd12aaa
#: ../../howto/custom-template-tags.txt:79
msgid "Writing custom template filters"
msgstr ""

# 0dfeb6b20cd04ea58cbc3ae35e71168c
#: ../../howto/custom-template-tags.txt:81
msgid ""
"Custom filters are just Python functions that take one or two arguments:"
msgstr ""

# 2829b11bb5494269b507775588880452
#: ../../howto/custom-template-tags.txt:83
msgid "The value of the variable (input) -- not necessarily a string."
msgstr ""

# 672bd03625c2402c8ef6c86b13d47e41
#: ../../howto/custom-template-tags.txt:84
msgid ""
"The value of the argument -- this can have a default value, or be left out "
"altogether."
msgstr ""

# e9addf86b1d247e9bb656c4e5e836e7f
#: ../../howto/custom-template-tags.txt:87
msgid ""
"For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` "
"would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""

# 5b48c52d08b84375b0afd1271f575cd6
#: ../../howto/custom-template-tags.txt:90
msgid ""
"Filter functions should always return something. They shouldn't raise "
"exceptions. They should fail silently. In case of error, they should return "
"either the original input or an empty string -- whichever makes more sense."
msgstr ""

# 6234a46ce9614c97bcdef6f6d460f2f2
#: ../../howto/custom-template-tags.txt:94
msgid "Here's an example filter definition:"
msgstr ""

# 30e9366e20b54e77b1a8b0d7abfe78ce
#: ../../howto/custom-template-tags.txt:102
msgid "And here's an example of how that filter would be used:"
msgstr ""

# 9e4ac80683ed425b832a783b7497bfb4
#: ../../howto/custom-template-tags.txt:108
msgid ""
"Most filters don't take arguments. In this case, just leave the argument out "
"of your function. Example:"
msgstr ""

# b5c5787b9e804d52b3119f043896d4e6
#: ../../howto/custom-template-tags.txt:118
msgid "Registering custom filters"
msgstr ""

# af4d8680dd214057a7305fbe21563023
#: ../../howto/custom-template-tags.txt:122
msgid ""
"Once you've written your filter definition, you need to register it with "
"your ``Library`` instance, to make it available to Django's template "
"language:"
msgstr ""

# c1b65f6703b64d0e9fc09726cb56b6f0
#: ../../howto/custom-template-tags.txt:130
msgid "The ``Library.filter()`` method takes two arguments:"
msgstr ""

# 9ec3e5c7738e441c92f9c681049da7be
#: ../../howto/custom-template-tags.txt:132
msgid "The name of the filter -- a string."
msgstr ""

# 512c97644f8b4b2a9a998b9a81f0d30b
# 2b53dcd3c8d64b8d88e61087c6a56789
#: ../../howto/custom-template-tags.txt:133
#: ../../howto/custom-template-tags.txt:643
msgid ""
"The compilation function -- a Python function (not the name of the function "
"as a string)."
msgstr ""

# 7c253a562eeb4e9d84868081e7384eb5
#: ../../howto/custom-template-tags.txt:136
msgid "You can use ``register.filter()`` as a decorator instead:"
msgstr ""

# ff2bd62b937d4cc7bd98587b661327b0
#: ../../howto/custom-template-tags.txt:148
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the filter name."
msgstr ""

# bee0f988ae394d60be9129988bd478c6
#: ../../howto/custom-template-tags.txt:151
msgid ""
"Finally, ``register.filter()`` also accepts three keyword arguments, "
"``is_safe``, ``needs_autoescape``, and ``expects_localtime``. These "
"arguments are described in :ref:`filters and auto-escaping <filters-auto-"
"escaping>` and :ref:`filters and time zones <filters-timezones>` below."
msgstr ""

# 052cad663be4437ab9f7ef643c35562e
#: ../../howto/custom-template-tags.txt:157
msgid "Template filters that expect strings"
msgstr ""

# 79e7797c0efa4db69734fd2e0c107959
#: ../../howto/custom-template-tags.txt:161
msgid ""
"If you're writing a template filter that only expects a string as the first "
"argument, you should use the decorator ``stringfilter``. This will convert "
"an object to its string value before being passed to your function:"
msgstr ""

# ade470dd93e544d3a4a12a4fecf7121e
#: ../../howto/custom-template-tags.txt:177
msgid ""
"This way, you'll be able to pass, say, an integer to this filter, and it "
"won't cause an ``AttributeError`` (because integers don't have ``lower()`` "
"methods)."
msgstr ""

# 9f567ff2b68d4a9594bb988eb8b7de93
#: ../../howto/custom-template-tags.txt:184
msgid "Filters and auto-escaping"
msgstr ""

# a4acc55e74134fd8b14d3b01d39837e4
#: ../../howto/custom-template-tags.txt:186
msgid ""
"When writing a custom filter, give some thought to how the filter will "
"interact with Django's auto-escaping behavior. Note that three types of "
"strings can be passed around inside the template code:"
msgstr ""

# 0ef03ccea31d4653b6aa96a67a99a4ec
#: ../../howto/custom-template-tags.txt:190
msgid ""
"**Raw strings** are the native Python ``str`` or ``unicode`` types. On "
"output, they're escaped if auto-escaping is in effect and presented "
"unchanged, otherwise."
msgstr ""

# 217b98ea5c2044ec8cec91f2c5f2d56e
#: ../../howto/custom-template-tags.txt:194
msgid ""
"**Safe strings** are strings that have been marked safe from further "
"escaping at output time. Any necessary escaping has already been done. "
"They're commonly used for output that contains raw HTML that is intended to "
"be interpreted as-is on the client side."
msgstr ""

# 99e5e389102043c5ae43050b218fa974
#: ../../howto/custom-template-tags.txt:199
msgid ""
"Internally, these strings are of type ``SafeBytes`` or ``SafeText``. They "
"share a common base class of ``SafeData``, so you can test for them using "
"code like:"
msgstr ""

# 9816a272265f46338075e07603d8cb20
#: ../../howto/custom-template-tags.txt:209
msgid ""
"**Strings marked as \"needing escaping\"** are *always* escaped on output, "
"regardless of whether they are in an :ttag:`autoescape` block or not. These "
"strings are only escaped once, however, even if auto-escaping applies."
msgstr ""

# 7adbdb831d1a4cd28654ea5c2c274d5d
#: ../../howto/custom-template-tags.txt:214
msgid ""
"Internally, these strings are of type ``EscapeBytes`` or ``EscapeText``. "
"Generally you don't have to worry about these; they exist for the "
"implementation of the :tfilter:`escape` filter."
msgstr ""

# 75020ecffd014827814525facbbfbb55
#: ../../howto/custom-template-tags.txt:218
msgid "Template filter code falls into one of two situations:"
msgstr ""

# 90ed550c65fe452ca884ee25a4447387
#: ../../howto/custom-template-tags.txt:220
msgid ""
"Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, "
"``'``, ``\"`` or ``&``) into the result that were not already present. In "
"this case, you can let Django take care of all the auto-escaping handling "
"for you. All you need to do is set the ``is_safe`` flag to ``True`` when you "
"register your filter function, like so:"
msgstr ""

# 479c890a65c54b0a85ef1c5338f13da2
#: ../../howto/custom-template-tags.txt:232
msgid ""
"This flag tells Django that if a \"safe\" string is passed into your filter, "
"the result will still be \"safe\" and if a non-safe string is passed in, "
"Django will automatically escape it, if necessary."
msgstr ""

# d4464965f67f449e85fc4288bf4ca8c0
#: ../../howto/custom-template-tags.txt:236
msgid ""
"You can think of this as meaning \"this filter is safe -- it doesn't "
"introduce any possibility of unsafe HTML.\""
msgstr ""

# bcb218aa926f41d5882a055b3c6b1ba7
#: ../../howto/custom-template-tags.txt:239
msgid ""
"The reason ``is_safe`` is necessary is because there are plenty of normal "
"string operations that will turn a ``SafeData`` object back into a normal "
"``str`` or ``unicode`` object and, rather than try to catch them all, which "
"would be very difficult, Django repairs the damage after the filter has "
"completed."
msgstr ""

# a847a8bca5f14ae6931a20aabd950666
#: ../../howto/custom-template-tags.txt:245
msgid ""
"For example, suppose you have a filter that adds the string ``xx`` to the "
"end of any input. Since this introduces no dangerous HTML characters to the "
"result (aside from any that were already present), you should mark your "
"filter with ``is_safe``:"
msgstr ""

# 4d86222b8f944ef3b593a1adcdecbf9d
#: ../../howto/custom-template-tags.txt:256
msgid ""
"When this filter is used in a template where auto-escaping is enabled, "
"Django will escape the output whenever the input is not already marked as "
"\"safe\"."
msgstr ""

# 241ae0e36271482d80fe7dff76003f9e
#: ../../howto/custom-template-tags.txt:260
msgid ""
"By default, ``is_safe`` is ``False``, and you can omit it from any filters "
"where it isn't required."
msgstr ""

# 00d2238c83414a5baa6da951fa039286
#: ../../howto/custom-template-tags.txt:263
msgid ""
"Be careful when deciding if your filter really does leave safe strings as "
"safe. If you're *removing* characters, you might inadvertently leave "
"unbalanced HTML tags or entities in the result. For example, removing a "
"``>`` from the input might turn ``<a>`` into ``<a``, which would need to be "
"escaped on output to avoid causing problems. Similarly, removing a semicolon "
"(``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity "
"and thus needs further escaping. Most cases won't be nearly this tricky, but "
"keep an eye out for any problems like that when reviewing your code."
msgstr ""

# 65a7ccd5390443a88cbda0d72a34b2c5
#: ../../howto/custom-template-tags.txt:273
msgid ""
"Marking a filter ``is_safe`` will coerce the filter's return value to a "
"string.  If your filter should return a boolean or other non-string value, "
"marking it ``is_safe`` will probably have unintended consequences (such as "
"converting a boolean False to the string 'False')."
msgstr ""

# e7c0911e4bdc4d04b13eeb4052f29c59
#: ../../howto/custom-template-tags.txt:279
msgid ""
"Alternatively, your filter code can manually take care of any necessary "
"escaping. This is necessary when you're introducing new HTML markup into the "
"result. You want to mark the output as safe from further escaping so that "
"your HTML markup isn't escaped further, so you'll need to handle the input "
"yourself."
msgstr ""

# 557e912f30f64ffab39d2ed779b04435
#: ../../howto/custom-template-tags.txt:285
msgid ""
"To mark the output as a safe string, use :func:`django.utils.safestring."
"mark_safe`."
msgstr ""

# 693ccbbe87894958a710f541db712e2c
#: ../../howto/custom-template-tags.txt:288
msgid ""
"Be careful, though. You need to do more than just mark the output as safe. "
"You need to ensure it really *is* safe, and what you do depends on whether "
"auto-escaping is in effect. The idea is to write filters than can operate in "
"templates where auto-escaping is either on or off in order to make things "
"easier for your template authors."
msgstr ""

# a1576369eec64ba2a946a0e8bee62246
#: ../../howto/custom-template-tags.txt:294
msgid ""
"In order for your filter to know the current auto-escaping state, set the "
"``needs_autoescape`` flag to ``True`` when you register your filter "
"function. (If you don't specify this flag, it defaults to ``False``). This "
"flag tells Django that your filter function wants to be passed an extra "
"keyword argument, called ``autoescape``, that is ``True`` if auto-escaping "
"is in effect and ``False`` otherwise."
msgstr ""

# ab93237c7a0f4749a9c854ab8a6dbd71
#: ../../howto/custom-template-tags.txt:301
msgid ""
"For example, let's write a filter that emphasizes the first character of a "
"string:"
msgstr ""

# 6e12d29544694190a4e416bc1eba3f1a
#: ../../howto/custom-template-tags.txt:319
msgid ""
"The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean "
"that our function will know whether automatic escaping is in effect when the "
"filter is called. We use ``autoescape`` to decide whether the input data "
"needs to be passed through ``django.utils.html.conditional_escape`` or not. "
"(In the latter case, we just use the identity function as the \"escape\" "
"function.) The ``conditional_escape()`` function is like ``escape()`` except "
"it only escapes input that is **not** a ``SafeData`` instance. If a "
"``SafeData`` instance is passed to ``conditional_escape()``, the data is "
"returned unchanged."
msgstr ""

# ca53f0fd77a64e819396991a0ee86f54
#: ../../howto/custom-template-tags.txt:329
msgid ""
"Finally, in the above example, we remember to mark the result as safe so "
"that our HTML is inserted directly into the template without further "
"escaping."
msgstr ""

# 63ac030cc61341659c515bce6adb4a2e
#: ../../howto/custom-template-tags.txt:333
msgid ""
"There's no need to worry about the ``is_safe`` flag in this case (although "
"including it wouldn't hurt anything). Whenever you manually handle the auto-"
"escaping issues and return a safe string, the ``is_safe`` flag won't change "
"anything either way."
msgstr ""

# 6efdd553b44f4fb58528e7c4066e6194
#: ../../howto/custom-template-tags.txt:340
msgid ""
"``is_safe`` and ``needs_autoescape`` used to be attributes of the filter "
"function; this syntax is deprecated."
msgstr ""

# e85e044f3ec445c79aab20fb38779fe1
#: ../../howto/custom-template-tags.txt:361
msgid "Filters and time zones"
msgstr ""

# 063ee92f8e7f44e9a5f1e8758e45e139
#: ../../howto/custom-template-tags.txt:365
msgid ""
"If you write a custom filter that operates on :class:`~datetime.datetime` "
"objects, you'll usually register it with the ``expects_localtime`` flag set "
"to ``True``:"
msgstr ""

# b3cb4ae0a98c4dce9a138cc554dd78dd
#: ../../howto/custom-template-tags.txt:378
msgid ""
"When this flag is set, if the first argument to your filter is a time zone "
"aware datetime, Django will convert it to the current time zone before "
"passing it to your filter when appropriate, according to :ref:`rules for "
"time zones conversions in templates <time-zones-in-templates>`."
msgstr ""

# 80bbe86f9ab4406ba46595c8b91c5e56
#: ../../howto/custom-template-tags.txt:384
msgid "Writing custom template tags"
msgstr ""

# b3ff9f051bb149fdb5b9acb35ddf0c49
#: ../../howto/custom-template-tags.txt:386
msgid "Tags are more complex than filters, because tags can do anything."
msgstr ""

# 7e90102dc9da4899b5d2e11b9f7e1afe
#: ../../howto/custom-template-tags.txt:389
msgid "A quick overview"
msgstr ""

# a949feb922134b7da37c64b9ecb3508f
#: ../../howto/custom-template-tags.txt:391
msgid ""
"Above, this document explained that the template system works in a two-step "
"process: compiling and rendering. To define a custom template tag, you "
"specify how the compilation works and how the rendering works."
msgstr ""

# 06194b0d87ec476193f88fe2d73526b8
#: ../../howto/custom-template-tags.txt:395
msgid ""
"When Django compiles a template, it splits the raw template text into "
"''nodes''. Each node is an instance of ``django.template.Node`` and has a "
"``render()`` method. A compiled template is, simply, a list of ``Node`` "
"objects. When you call ``render()`` on a compiled template object, the "
"template calls ``render()`` on each ``Node`` in its node list, with the "
"given context. The results are all concatenated together to form the output "
"of the template."
msgstr ""

# d7d473036dbd4a039ca7208d9f2bf649
#: ../../howto/custom-template-tags.txt:402
msgid ""
"Thus, to define a custom template tag, you specify how the raw template tag "
"is converted into a ``Node`` (the compilation function), and what the node's "
"``render()`` method does."
msgstr ""

# d8ae32db4b944ed4855e5bcb8c944cb7
#: ../../howto/custom-template-tags.txt:407
msgid "Writing the compilation function"
msgstr ""

# 4654055e7dc24c7d80638a8116c7d075
#: ../../howto/custom-template-tags.txt:409
msgid ""
"For each template tag the template parser encounters, it calls a Python "
"function with the tag contents and the parser object itself. This function "
"is responsible for returning a ``Node`` instance based on the contents of "
"the tag."
msgstr ""

# 4d2ce1c3a0494254b64e2134aee4a50e
#: ../../howto/custom-template-tags.txt:413
msgid ""
"For example, let's write a template tag, ``{% current_time %}``, that "
"displays the current date/time, formatted according to a parameter given in "
"the tag, in :func:`~time.strftime` syntax. It's a good idea to decide the "
"tag syntax before anything else. In our case, let's say the tag should be "
"used like this:"
msgstr ""

# a526ff46e34849699451c75b4dcc380d
#: ../../howto/custom-template-tags.txt:422
msgid ""
"The parser for this function should grab the parameter and create a ``Node`` "
"object:"
msgstr ""

# f9e086bbef0146d6b7cd43d4a8dd0224
# 3fde3c62c6954d5f8583ecdc8580913b
#: ../../howto/custom-template-tags.txt:438
#: ../../howto/custom-template-tags.txt:490
msgid "Notes:"
msgstr ""

# 1f4f141931124fe68038ed22a600c14f
#: ../../howto/custom-template-tags.txt:440
msgid ""
"``parser`` is the template parser object. We don't need it in this example."
msgstr ""

# e3e30c3df2e84cc0b0d4a7e309471bb6
#: ../../howto/custom-template-tags.txt:443
msgid ""
"``token.contents`` is a string of the raw contents of the tag. In our "
"example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""

# 308800884e4148ec98313f11419f3a49
#: ../../howto/custom-template-tags.txt:446
msgid ""
"The ``token.split_contents()`` method separates the arguments on spaces "
"while keeping quoted strings together. The more straightforward ``token."
"contents.split()`` wouldn't be as robust, as it would naively split on *all* "
"spaces, including those within quoted strings. It's a good idea to always "
"use ``token.split_contents()``."
msgstr ""

# 560b5eb035f840e4919071d9a9cc2666
#: ../../howto/custom-template-tags.txt:452
msgid ""
"This function is responsible for raising ``django.template."
"TemplateSyntaxError``, with helpful messages, for any syntax error."
msgstr ""

# 6a24d5a3e2cc47c18b4bcb7a7b8394cf
#: ../../howto/custom-template-tags.txt:456
msgid ""
"The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't "
"hard-code the tag's name in your error messages, because that couples the "
"tag's name to your function. ``token.contents.split()[0]`` will ''always'' "
"be the name of your tag -- even when the tag has no arguments."
msgstr ""

# e39bc8223c7f49bfaf7fa522fbd772c2
#: ../../howto/custom-template-tags.txt:462
msgid ""
"The function returns a ``CurrentTimeNode`` with everything the node needs to "
"know about this tag. In this case, it just passes the argument -- ``\"%Y-%m-"
"%d %I:%M %p\"``. The leading and trailing quotes from the template tag are "
"removed in ``format_string[1:-1]``."
msgstr ""

# 846febcc485b4aa4af479f226b6ea873
#: ../../howto/custom-template-tags.txt:467
msgid ""
"The parsing is very low-level. The Django developers have experimented with "
"writing small frameworks on top of this parsing system, using techniques "
"such as EBNF grammars, but those experiments made the template engine too "
"slow. It's low-level because that's fastest."
msgstr ""

# 1a7291d7fd274094b07fe1b8b1e4303f
#: ../../howto/custom-template-tags.txt:473
msgid "Writing the renderer"
msgstr ""

# 658041cf5f224eaa8a444b4165125f57
#: ../../howto/custom-template-tags.txt:475
msgid ""
"The second step in writing custom tags is to define a ``Node`` subclass that "
"has a ``render()`` method."
msgstr ""

# 2e6526ec09ac4474ab35ae8baa563f7c
#: ../../howto/custom-template-tags.txt:478
msgid "Continuing the above example, we need to define ``CurrentTimeNode``:"
msgstr ""

# d86a4265e5684e7385b2b91cfc519d79
#: ../../howto/custom-template-tags.txt:492
msgid ""
"``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always "
"pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""

# b273d3a9d319482caf8b8f61ba405f5b
#: ../../howto/custom-template-tags.txt:496
msgid "The ``render()`` method is where the work actually happens."
msgstr ""

# 140393e1fa534ca09267fd58ec482459
#: ../../howto/custom-template-tags.txt:498
msgid ""
"``render()`` should never raise ``TemplateSyntaxError`` or any other "
"exception. It should fail silently, just as template filters should."
msgstr ""

# 3ba5dd78dc544420ad54aa9877173966
#: ../../howto/custom-template-tags.txt:501
msgid ""
"Ultimately, this decoupling of compilation and rendering results in an "
"efficient template system, because a template can render multiple contexts "
"without having to be parsed multiple times."
msgstr ""

# 4d3c58f5f299429e8454ec629e5e51c8
#: ../../howto/custom-template-tags.txt:506
msgid "Auto-escaping considerations"
msgstr ""

# 89d5b5d36145437da777a7529a864990
#: ../../howto/custom-template-tags.txt:508
msgid ""
"The output from template tags is **not** automatically run through the auto-"
"escaping filters. However, there are still a couple of things you should "
"keep in mind when writing a template tag."
msgstr ""

# a936a689444c4283b37e750f0a514eae
#: ../../howto/custom-template-tags.txt:512
msgid ""
"If the ``render()`` function of your template stores the result in a context "
"variable (rather than returning the result in a string), it should take care "
"to call ``mark_safe()`` if appropriate. When the variable is ultimately "
"rendered, it will be affected by the auto-escape setting in effect at the "
"time, so content that should be safe from further escaping needs to be "
"marked as such."
msgstr ""

# c8d4e392e14f425db44424774d5c6aac
#: ../../howto/custom-template-tags.txt:519
msgid ""
"Also, if your template tag creates a new context for performing some sub-"
"rendering, set the auto-escape attribute to the current context's value. The "
"``__init__`` method for the ``Context`` class takes a parameter called "
"``autoescape`` that you can use for this purpose. For example:"
msgstr ""

# eb080db32a684ee3a03e568dc62dce1c
#: ../../howto/custom-template-tags.txt:531
msgid ""
"This is not a very common situation, but it's useful if you're rendering a "
"template yourself. For example:"
msgstr ""

# 4e9263c7c06742e18a585243f5eeb80c
#: ../../howto/custom-template-tags.txt:540
msgid ""
"If we had neglected to pass in the current ``context.autoescape`` value to "
"our new ``Context`` in this example, the results would have *always* been "
"automatically escaped, which may not be the desired behavior if the template "
"tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""

# 029b53d867cc45b7ae3b796931206864
#: ../../howto/custom-template-tags.txt:548
msgid "Thread-safety considerations"
msgstr ""

# 1ee31c83808c4dd3868d34d352999dcb
#: ../../howto/custom-template-tags.txt:550
msgid ""
"Once a node is parsed, its ``render`` method may be called any number of "
"times. Since Django is sometimes run in multi-threaded environments, a "
"single node may be simultaneously rendering with different contexts in "
"response to two separate requests. Therefore, it's important to make sure "
"your template tags are thread safe."
msgstr ""

# 5d0336dd25614bafba891bdcb2908117
#: ../../howto/custom-template-tags.txt:556
msgid ""
"To make sure your template tags are thread safe, you should never store "
"state information on the node itself. For example, Django provides a "
"builtin :ttag:`cycle` template tag that cycles among a list of given strings "
"each time it's rendered:"
msgstr ""

# 5a628d0577f742c58947ca56827734d0
#: ../../howto/custom-template-tags.txt:569
msgid "A naive implementation of ``CycleNode`` might look something like this:"
msgstr ""

# 50047c4dce534076a3a69a454d663026
#: ../../howto/custom-template-tags.txt:579
msgid ""
"But, suppose we have two templates rendering the template snippet from above "
"at the same time:"
msgstr ""

# 972be72b4591423d8290cd8314f8b650
#: ../../howto/custom-template-tags.txt:582
msgid ""
"Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

# ed0ad88f89bd42e792585195244e64f5
#: ../../howto/custom-template-tags.txt:584
msgid ""
"Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

# 2b5ee5ded2f64f6c90b74b1948e00608
#: ../../howto/custom-template-tags.txt:586
msgid ""
"Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

# 409393f9f31a44d4bc112b46f0efba8a
#: ../../howto/custom-template-tags.txt:588
msgid ""
"Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

# 13a8188541b14c3a95d76884880f7027
#: ../../howto/custom-template-tags.txt:591
msgid ""
"The CycleNode is iterating, but it's iterating globally. As far as Thread 1 "
"and Thread 2 are concerned, it's always returning the same value. This is "
"obviously not what we want!"
msgstr ""

# f6dbf3159db24659b38441772e5c5a9a
#: ../../howto/custom-template-tags.txt:595
msgid ""
"To address this problem, Django provides a ``render_context`` that's "
"associated with the ``context`` of the template that is currently being "
"rendered. The ``render_context`` behaves like a Python dictionary, and "
"should be used to store ``Node`` state between invocations of the ``render`` "
"method."
msgstr ""

# 6ff3226c9041474bb5d4a8d172ab1e56
#: ../../howto/custom-template-tags.txt:600
msgid ""
"Let's refactor our ``CycleNode`` implementation to use the "
"``render_context``:"
msgstr ""

# 294762012aa04f358b2aa624a6be3795
#: ../../howto/custom-template-tags.txt:613
msgid ""
"Note that it's perfectly safe to store global information that will not "
"change throughout the life of the ``Node`` as an attribute. In the case of "
"``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` "
"is instantiated, so we don't need to put it in the ``render_context``. But "
"state information that is specific to the template that is currently being "
"rendered, like the current iteration of the ``CycleNode``, should be stored "
"in the ``render_context``."
msgstr ""

# 57dc39624fb049c3bdcf6db3d4cd5dc5
#: ../../howto/custom-template-tags.txt:622
msgid ""
"Notice how we used ``self`` to scope the ``CycleNode`` specific information "
"within the ``render_context``. There may be multiple ``CycleNodes`` in a "
"given template, so we need to be careful not to clobber another node's state "
"information. The easiest way to do this is to always use ``self`` as the key "
"into ``render_context``. If you're keeping track of several state variables, "
"make ``render_context[self]`` a dictionary."
msgstr ""

# 45a8119c259d4c7ea69c78080fdd2840
#: ../../howto/custom-template-tags.txt:630
msgid "Registering the tag"
msgstr ""

# 505b45357945450787466eee1ad75973
#: ../../howto/custom-template-tags.txt:632
msgid ""
"Finally, register the tag with your module's ``Library`` instance, as "
"explained in \"Writing custom template filters\" above. Example:"
msgstr ""

# 6cf4a7e6fa9e4f5ca9e68231b308d4bb
#: ../../howto/custom-template-tags.txt:639
msgid "The ``tag()`` method takes two arguments:"
msgstr ""

# 299c646f7163436897d27ac40bf3bb62
#: ../../howto/custom-template-tags.txt:641
msgid ""
"The name of the template tag -- a string. If this is left out, the name of "
"the compilation function will be used."
msgstr ""

# 9ec751a78d514da08938ec01e539c3fc
#: ../../howto/custom-template-tags.txt:646
msgid ""
"As with filter registration, it is also possible to use this as a decorator:"
msgstr ""

# ebe67b5bffad4ac19f805af22e69402c
#: ../../howto/custom-template-tags.txt:658
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the tag name."
msgstr ""

# a93492a992d4461b8366d63a07658de1
#: ../../howto/custom-template-tags.txt:662
msgid "Passing template variables to the tag"
msgstr ""

# a9ad290a703945f1851975600e682c6d
#: ../../howto/custom-template-tags.txt:664
msgid ""
"Although you can pass any number of arguments to a template tag using "
"``token.split_contents()``, the arguments are all unpacked as string "
"literals. A little more work is required in order to pass dynamic content (a "
"template variable) to a template tag as an argument."
msgstr ""

# 849e5df118754bddb7749023975de924
#: ../../howto/custom-template-tags.txt:669
msgid ""
"While the previous examples have formatted the current time into a string "
"and returned the string, suppose you wanted to pass in a :class:`~django.db."
"models.DateTimeField` from an object and have the template tag format that "
"date-time:"
msgstr ""

# f573f06af69d416a852654b7d66cefb1
#: ../../howto/custom-template-tags.txt:678
msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr ""

# 7252ba3297ce4d27ae285a76bc501823
#: ../../howto/custom-template-tags.txt:680
msgid "The tag name ``format_time``."
msgstr ""

# a3e8cfbb413c483d967fd2e00b5e932e
#: ../../howto/custom-template-tags.txt:681
msgid ""
"The string ``\"blog_entry.date_updated\"`` (without the surrounding quotes)."
msgstr ""

# a721381737644b6c9205947579d27f6d
#: ../../howto/custom-template-tags.txt:683
msgid ""
"The formatting string ``\"%Y-%m-%d %I:%M %p\"``. The return value from "
"``split_contents()`` will include the leading and trailing quotes for string "
"literals like this."
msgstr ""

# 13531dd555cd41089fbc9362869ca40d
#: ../../howto/custom-template-tags.txt:687
msgid "Now your tag should begin to look like this:"
msgstr ""

# 660e602f34ce457f9a90718bc56327b8
#: ../../howto/custom-template-tags.txt:702
msgid ""
"You also have to change the renderer to retrieve the actual contents of the "
"``date_updated`` property of the ``blog_entry`` object.  This can be "
"accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""

# 4c374dad4e0d43b396d1ab5fd6e21b9e
#: ../../howto/custom-template-tags.txt:706
msgid ""
"To use the ``Variable`` class, simply instantiate it with the name of the "
"variable to be resolved, and then call ``variable.resolve(context)``. So, "
"for example:"
msgstr ""

# 6d2e325e5f58447d81d63b4dfce90274
#: ../../howto/custom-template-tags.txt:724
msgid ""
"Variable resolution will throw a ``VariableDoesNotExist`` exception if it "
"cannot resolve the string passed to it in the current context of the page."
msgstr ""

# ad58a07c4c484687a97b31847255e9eb
#: ../../howto/custom-template-tags.txt:730
msgid "Simple tags"
msgstr ""

# 8b8cafc5b4cb45ec80d8f31cce9ebccf
#: ../../howto/custom-template-tags.txt:734
msgid ""
"Many template tags take a number of arguments -- strings or template "
"variables -- and return a string after doing some processing based solely on "
"the input arguments and some external information. For example, the "
"``current_time`` tag we wrote above is of this variety: we give it a format "
"string, it returns the time as a string."
msgstr ""

# 63779a1e33f2446594e1ac50c5f4703d
#: ../../howto/custom-template-tags.txt:740
msgid ""
"To ease the creation of these types of tags, Django provides a helper "
"function, ``simple_tag``. This function, which is a method of ``django."
"template.Library``, takes a function that accepts any number of arguments, "
"wraps it in a ``render`` function and the other necessary bits mentioned "
"above and registers it with the template system."
msgstr ""

# 94efeb4ad61144c982b8fe58512156ad
# 8960fe1e21e84baca1c0f96358c80bc7
#: ../../howto/custom-template-tags.txt:746
#: ../../howto/custom-template-tags.txt:1086
msgid "Our earlier ``current_time`` function could thus be written like this:"
msgstr ""

# 3ba7e0a4fd564eb3aac8e58093d8c612
# d3d2d6ec8534495caf229116a754b0d1
#: ../../howto/custom-template-tags.txt:755
#: ../../howto/custom-template-tags.txt:1095
msgid "The decorator syntax also works:"
msgstr ""

# 40337f491af940129eb28a2ec79bd870
#: ../../howto/custom-template-tags.txt:763
msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr ""

# b874d680a24841b9af8ef5d2e1d16a62
#: ../../howto/custom-template-tags.txt:765
msgid ""
"Checking for the required number of arguments, etc., has already been done "
"by the time our function is called, so we don't need to do that."
msgstr ""

# 6658c68792da4e338be827c8f6f8f114
#: ../../howto/custom-template-tags.txt:767
msgid ""
"The quotes around the argument (if any) have already been stripped away, so "
"we just receive a plain string."
msgstr ""

# e445e561acf24a3582751a93cd0ec2a3
#: ../../howto/custom-template-tags.txt:769
msgid ""
"If the argument was a template variable, our function is passed the current "
"value of the variable, not the variable itself."
msgstr ""

# 203c5912d62b4e6a87664c22bd2775e8
# 0efb592e7524436fbd005c51c8dc8773
#: ../../howto/custom-template-tags.txt:772
#: ../../howto/custom-template-tags.txt:1111
msgid ""
"If your template tag needs to access the current context, you can use the "
"``takes_context`` argument when registering your tag:"
msgstr ""

# 0f2e491beba5495d8b3cfb58910ec59d
# d4a839681b2345dfae9bffd571e04d4c
#: ../../howto/custom-template-tags.txt:784
#: ../../howto/custom-template-tags.txt:1123
msgid "Or, using decorator syntax:"
msgstr ""

# 65decd54dfeb452e935cfdf6f7bc09eb
# 5b5a9add4ea24a55886dafd532653e09
#: ../../howto/custom-template-tags.txt:793
#: ../../howto/custom-template-tags.txt:1132
msgid ""
"For more information on how the ``takes_context`` option works, see the "
"section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

# 96d8541c56424c7db8cd31400a888118
#: ../../howto/custom-template-tags.txt:798
msgid "If you need to rename your tag, you can provide a custom name for it:"
msgstr ""

# c599a62d84074963bf59dd3de94c4121
#: ../../howto/custom-template-tags.txt:810
msgid ""
"``simple_tag`` functions may accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# 0cdb91f543694c66980053f52e7c6837
# 7ac1d415e47d430fa5834be5b94cc55e
# 2bf932d2c1b4418381f14325222893b8
#: ../../howto/custom-template-tags.txt:822
#: ../../howto/custom-template-tags.txt:978
#: ../../howto/custom-template-tags.txt:1147
msgid ""
"Then in the template any number of arguments, separated by spaces, may be "
"passed to the template tag. Like in Python, the values for keyword arguments "
"are set using the equal sign (\"``=``\") and must be provided after the "
"positional arguments. For example:"
msgstr ""

# 51a2b03d9fef4b17bdd9613dff20a2ad
#: ../../howto/custom-template-tags.txt:834
msgid "Inclusion tags"
msgstr ""

# d2eda87300554a03a4dd2ff8e864232a
#: ../../howto/custom-template-tags.txt:836
msgid ""
"Another common type of template tag is the type that displays some data by "
"rendering *another* template. For example, Django's admin interface uses "
"custom template tags to display the buttons along the bottom of the \"add/"
"change\" form pages. Those buttons always look the same, but the link "
"targets change depending on the object being edited -- so they're a perfect "
"case for using a small template that is filled with details from the current "
"object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""

# a9604762c18c4359933f08e72d97e938
#: ../../howto/custom-template-tags.txt:844
msgid "These sorts of tags are called \"inclusion tags\"."
msgstr ""

# a460c0868dd94cf0b167360e4cf4a8a1
#: ../../howto/custom-template-tags.txt:846
msgid ""
"Writing inclusion tags is probably best demonstrated by example. Let's write "
"a tag that outputs a list of choices for a given ``Poll`` object, such as "
"was created in the :ref:`tutorials <creating-models>`. We'll use the tag "
"like this:"
msgstr ""

# c8ccc7a0ba004031b990ceead8655922
#: ../../howto/custom-template-tags.txt:854
msgid "...and the output will be something like this:"
msgstr ""

# aa59a613ac614bbd92ee76bd6d4dea8c
#: ../../howto/custom-template-tags.txt:864
msgid ""
"First, define the function that takes the argument and produces a dictionary "
"of data for the result. The important point here is we only need to return a "
"dictionary, not anything more complex. This will be used as a template "
"context for the template fragment. Example:"
msgstr ""

# eba441e29f6e44ab8f1da6c578e44f4a
#: ../../howto/custom-template-tags.txt:875
msgid ""
"Next, create the template used to render the tag's output. This template is "
"a fixed feature of the tag: the tag writer specifies it, not the template "
"designer. Following our example, the template is very simple:"
msgstr ""

# c2d09196f14e4a00a2a5511076cc124c
#: ../../howto/custom-template-tags.txt:887
msgid ""
"Now, create and register the inclusion tag by calling the "
"``inclusion_tag()`` method on a ``Library`` object. Following our example, "
"if the above template is in a file called ``results.html`` in a directory "
"that's searched by the template loader, we'd register the tag like this:"
msgstr ""

# 6737ea7804a04ba1ad52084125e2a505
#: ../../howto/custom-template-tags.txt:908
msgid "As always, decorator syntax works as well, so we could have written:"
msgstr ""

# 1650e7c2c47745759f729b12dd7dc0f4
#: ../../howto/custom-template-tags.txt:916
msgid "...when first creating the function."
msgstr ""

# 585679c0bf5b4b8e9ef520dd4461c9bd
#: ../../howto/custom-template-tags.txt:918
msgid ""
"Sometimes, your inclusion tags might require a large number of arguments, "
"making it a pain for template authors to pass in all the arguments and "
"remember their order. To solve this, Django provides a ``takes_context`` "
"option for inclusion tags. If you specify ``takes_context`` in creating a "
"template tag, the tag will have no required arguments, and the underlying "
"Python function will have one argument -- the template context as of when "
"the tag was called."
msgstr ""

# 97867cd148c14289b4fa62d430e95776
#: ../../howto/custom-template-tags.txt:925
msgid ""
"For example, say you're writing an inclusion tag that will always be used in "
"a context that contains ``home_link`` and ``home_title`` variables that "
"point back to the main page. Here's what the Python function would look like:"
msgstr ""

# 3eafd7fff77d4df49efecc640a50e70c
#: ../../howto/custom-template-tags.txt:940
msgid ""
"(Note that the first parameter to the function *must* be called ``context``.)"
msgstr ""

# 128381b08dd8436cb5191f969eaf3f8c
#: ../../howto/custom-template-tags.txt:942
msgid ""
"In that ``register.inclusion_tag()`` line, we specified "
"``takes_context=True`` and the name of the template. Here's what the "
"template ``link.html`` might look like:"
msgstr ""

# a757baebb82548bc823964418813a3c9
#: ../../howto/custom-template-tags.txt:950
msgid ""
"Then, any time you want to use that custom tag, load its library and call it "
"without any arguments, like so:"
msgstr ""

# e1b6fff685fc4fe39a102f546b6c0c46
#: ../../howto/custom-template-tags.txt:957
msgid ""
"Note that when you're using ``takes_context=True``, there's no need to pass "
"arguments to the template tag. It automatically gets access to the context."
msgstr ""

# fb08951f221f4d719e1911eacbb7b3b9
#: ../../howto/custom-template-tags.txt:960
msgid ""
"The ``takes_context`` parameter defaults to ``False``. When it's set to "
"``True``, the tag is passed the context object, as in this example. That's "
"the only difference between this case and the previous ``inclusion_tag`` "
"example."
msgstr ""

# d4c941d1307b4b40abae056a605fbc20
#: ../../howto/custom-template-tags.txt:966
msgid ""
"``inclusion_tag`` functions may accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# 90b1eacf477649a280d0a764768cea1a
#: ../../howto/custom-template-tags.txt:988
msgid "Setting a variable in the context"
msgstr ""

# e5a85db5484040c6928d8b2c0e69e507
#: ../../howto/custom-template-tags.txt:990
msgid ""
"The above examples simply output a value. Generally, it's more flexible if "
"your template tags set template variables instead of outputting values. That "
"way, template authors can reuse the values that your template tags create."
msgstr ""

# 9d0002540d154862a91138218ee2a440
#: ../../howto/custom-template-tags.txt:994
msgid ""
"To set a variable in the context, just use dictionary assignment on the "
"context object in the ``render()`` method. Here's an updated version of "
"``CurrentTimeNode`` that sets a template variable ``current_time`` instead "
"of outputting it:"
msgstr ""

# 2c6b69faf6fb4010b1d8205049d91868
#: ../../howto/custom-template-tags.txt:1008
msgid ""
"Note that ``render()`` returns the empty string. ``render()`` should always "
"return string output. If all the template tag does is set a variable, "
"``render()`` should return the empty string."
msgstr ""

# 1f6864d9ec764219ac8321987dbf2cfa
#: ../../howto/custom-template-tags.txt:1012
msgid "Here's how you'd use this new version of the tag:"
msgstr ""

# 293467654a6b444bb6c4a45e72566774
#: ../../howto/custom-template-tags.txt:1018
msgid "Variable scope in context"
msgstr ""

# e80b01d790684b0eba2a824bc6902cfc
#: ../../howto/custom-template-tags.txt:1020
msgid ""
"Any variable set in the context will only be available in the same ``block`` "
"of the template in which it was assigned. This behavior is intentional; it "
"provides a scope for variables so that they don't conflict with context in "
"other blocks."
msgstr ""

# 0331d86b501047c6bc20da202d38b358
#: ../../howto/custom-template-tags.txt:1025
msgid ""
"But, there's a problem with ``CurrentTimeNode2``: The variable name "
"``current_time`` is hard-coded. This means you'll need to make sure your "
"template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% "
"current_time %}`` will blindly overwrite that variable's value. A cleaner "
"solution is to make the template tag specify the name of the output "
"variable, like so:"
msgstr ""

# 7ad7dfd121b64b60b28d857ce6558875
#: ../../howto/custom-template-tags.txt:1037
msgid ""
"To do that, you'll need to refactor both the compilation function and "
"``Node`` class, like so:"
msgstr ""

# 28532597c6234ba6a27eed5413a77c86
#: ../../howto/custom-template-tags.txt:1066
msgid ""
"The difference here is that ``do_current_time()`` grabs the format string "
"and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""

# 4f26546ef0584a1a8be735f40c81e0cf
#: ../../howto/custom-template-tags.txt:1069
msgid ""
"Finally, if you only need to have a simple syntax for your custom context-"
"updating template tag, you might want to consider using an :ref:`assignment "
"tag <howto-custom-template-tags-assignment-tags>`."
msgstr ""

# aefcf7a5101d4a848821dd31b23c410b
#: ../../howto/custom-template-tags.txt:1076
msgid "Assignment tags"
msgstr ""

# 5f11371d54de4405b04c7d50ad686c43
#: ../../howto/custom-template-tags.txt:1080
msgid ""
"To ease the creation of tags setting a variable in the context, Django "
"provides a helper function, ``assignment_tag``. This function works the same "
"way as :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, except "
"that it stores the tag's result in a specified context variable instead of "
"directly outputting it."
msgstr ""

# 43b93a7d61544a69a8da585d32317ef1
#: ../../howto/custom-template-tags.txt:1103
msgid ""
"You may then store the result in a template variable using the ``as`` "
"argument followed by the variable name, and output it yourself where you see "
"fit:"
msgstr ""

# c99fe9ba7ba84f07862b3545bd1d633c
#: ../../howto/custom-template-tags.txt:1135
msgid ""
"``assignment_tag`` functions may accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# bf2934c9a1a04e678f4676f0ae17357f
#: ../../howto/custom-template-tags.txt:1157
msgid "Parsing until another block tag"
msgstr ""

# a4cefd9021fd4712863708e375fc65a7
#: ../../howto/custom-template-tags.txt:1159
msgid ""
"Template tags can work in tandem. For instance, the standard :ttag:`{% "
"comment %}<comment>` tag hides everything until ``{% endcomment %}``. To "
"create a template tag such as this, use ``parser.parse()`` in your "
"compilation function."
msgstr ""

# a59e7abfa1b34f14a8ef7e20e820dfbe
#: ../../howto/custom-template-tags.txt:1164
msgid "Here's how a simplified ``{% comment %}`` tag might be implemented:"
msgstr ""

# 7e9437851ab24eeeb949145ddc50ad99
#: ../../howto/custom-template-tags.txt:1178
msgid ""
"The actual implementation of :ttag:`{% comment %}<comment>` is slightly "
"different in that it allows broken template tags to appear between ``{% "
"comment %}`` and ``{% endcomment %}``. It does so by calling ``parser."
"skip_past('endcomment')`` instead of ``parser.parse(('endcomment',))`` "
"followed by ``parser.delete_first_token()``, thus avoiding the generation of "
"a node list."
msgstr ""

# cf83235b3b0d44aeabd2b683f982d6a5
#: ../../howto/custom-template-tags.txt:1185
msgid ""
"``parser.parse()`` takes a tuple of names of block tags ''to parse until''. "
"It returns an instance of ``django.template.NodeList``, which is a list of "
"all ``Node`` objects that the parser encountered ''before'' it encountered "
"any of the tags named in the tuple."
msgstr ""

# fa13ab2f36784e45a8e3500742091213
#: ../../howto/custom-template-tags.txt:1190
msgid ""
"In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, "
"``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% "
"endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` "
"themselves."
msgstr ""

# 8285af8a269d4ff39f6cc31dcb3f5304
#: ../../howto/custom-template-tags.txt:1195
msgid ""
"After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the "
"``{% endcomment %}`` tag, so the code needs to explicitly call ``parser."
"delete_first_token()``."
msgstr ""

# 1ac5b22e6fa344dea614c9918ece37f9
#: ../../howto/custom-template-tags.txt:1199
msgid ""
"``CommentNode.render()`` simply returns an empty string. Anything between "
"``{% comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""

# e0cc8cf9b71648c9aa5da31cf95914d7
#: ../../howto/custom-template-tags.txt:1203
msgid "Parsing until another block tag, and saving contents"
msgstr ""

# c6fc500b88b049ddb0876cd49e7ad838
#: ../../howto/custom-template-tags.txt:1205
msgid ""
"In the previous example, ``do_comment()`` discarded everything between ``{% "
"comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible "
"to do something with the code between block tags."
msgstr ""

# 85cab8df077b4e1ea142a802d8b313ba
#: ../../howto/custom-template-tags.txt:1209
msgid ""
"For example, here's a custom template tag, ``{% upper %}``, that capitalizes "
"everything between itself and ``{% endupper %}``."
msgstr ""

# 184414f37f1f45bfa8e0a4feee0a21db
#: ../../howto/custom-template-tags.txt:1212
msgid "Usage:"
msgstr ""

# 937e5e7c9eb74b6f839f39588c8fdb0f
#: ../../howto/custom-template-tags.txt:1218
msgid ""
"As in the previous example, we'll use ``parser.parse()``. But this time, we "
"pass the resulting ``nodelist`` to the ``Node``:"
msgstr ""

# 5400dc01b68342c6a17cf61c96620641
#: ../../howto/custom-template-tags.txt:1235
msgid ""
"The only new concept here is the ``self.nodelist.render(context)`` in "
"``UpperNode.render()``."
msgstr ""

# f9f2f5462fb3487286657421c66871d9
#: ../../howto/custom-template-tags.txt:1238
msgid ""
"For more examples of complex rendering, see the source code for :ttag:`{% if "
"%}<if>`, :ttag:`{% for %}<for>`, :ttag:`{% ifequal %}<ifequal>` or :ttag:`{% "
"ifchanged %}<ifchanged>`. They live in ``django/template/defaulttags.py``."
msgstr ""

# 0497feeac8ec4f8091afa5d820ed7daf
#: ../../howto/deployment/fastcgi.txt:3
msgid "How to use Django with FastCGI, SCGI, or AJP"
msgstr ""

# c33ece8d53db4d4ab3576c8b923eccf0
#: ../../howto/deployment/fastcgi.txt:7
msgid ""
"Although :doc:`WSGI</howto/deployment/wsgi/index>` is the preferred "
"deployment platform for Django, many people use shared hosting, on which "
"protocols such as FastCGI, SCGI or AJP are the only viable options."
msgstr ""

# 72d9b73f299a48dd9730fccc911985a8
# 5f96c3d324aa44bb87906f6aff0e97e2
# 3145b072f7ba4d26980e368111d7ed4c
#: ../../howto/deployment/fastcgi.txt:11 ../../howto/deployment/fastcgi.txt:61
#: ../../howto/deployment/fastcgi.txt:335
msgid "Note"
msgstr ""

# 082188865a1c4f7fab23a7488cb48ab8
#: ../../howto/deployment/fastcgi.txt:13
msgid ""
"This document primarily focuses on FastCGI. Other protocols, such as SCGI "
"and AJP, are also supported, through the ``flup`` Python package. See the "
"Protocols_ section below for specifics about SCGI and AJP."
msgstr ""

# acec0b04d8704f68900fc2220db01db6
#: ../../howto/deployment/fastcgi.txt:17
msgid ""
"Essentially, FastCGI is an efficient way of letting an external application "
"serve pages to a Web server. The Web server delegates the incoming Web "
"requests (via a socket) to FastCGI, which executes the code and passes the "
"response back to the Web server, which, in turn, passes it back to the "
"client's Web browser."
msgstr ""

# 3f2402bff3cc41729a21815ff429b6d1
#: ../../howto/deployment/fastcgi.txt:22
msgid ""
"Like WSGI, FastCGI allows code to stay in memory, allowing requests to be "
"served with no startup time. While e.g. :doc:`mod_wsgi</howto/deployment/"
"wsgi/modwsgi>` can either be configured embedded in the Apache Web server "
"process or as a separate daemon process, a FastCGI process never runs inside "
"the Web server process, always in a separate, persistent process."
msgstr ""

# 0fc4361c2d5b484280d25396705521eb
#: ../../howto/deployment/fastcgi.txt:31
msgid "Why run code in a separate process?"
msgstr ""

# dbe4ff68444f4db09dfce31541eaa633
#: ../../howto/deployment/fastcgi.txt:33
msgid ""
"The traditional ``mod_*`` arrangements in Apache embed various scripting "
"languages (most notably PHP, Python and Perl) inside the process space of "
"your Web server. Although this lowers startup time -- because code doesn't "
"have to be read off disk for every request -- it comes at the cost of memory "
"use."
msgstr ""

# 61dd2336644b41d88781a89f3cabe413
#: ../../howto/deployment/fastcgi.txt:39
msgid ""
"Due to the nature of FastCGI, it's even possible to have processes that run "
"under a different user account than the Web server process. That's a nice "
"security benefit on shared systems, because it means you can secure your "
"code from other users."
msgstr ""

# d12129d18fbe45fe8feb2acdb368bdef
#: ../../howto/deployment/fastcgi.txt:45
msgid "Prerequisite: flup"
msgstr ""

# e2583a2e9a39411e87bd7658aa65bafa
#: ../../howto/deployment/fastcgi.txt:47
msgid ""
"Before you can start using FastCGI with Django, you'll need to install "
"flup_, a Python library for dealing with FastCGI. Version 0.5 or newer "
"should work fine."
msgstr ""

# b2faff9923ef468b8e2171237720159f
#: ../../howto/deployment/fastcgi.txt:53
msgid "Starting your FastCGI server"
msgstr ""

# ceb72cee60e14b9795730267e773b0b5
#: ../../howto/deployment/fastcgi.txt:55
msgid ""
"FastCGI operates on a client-server model, and in most cases you'll be "
"starting the FastCGI process on your own. Your Web server (be it Apache, "
"lighttpd, or otherwise) only contacts your Django-FastCGI process when the "
"server needs a dynamic page to be loaded. Because the daemon is already "
"running with the code in memory, it's able to serve the response very "
"quickly."
msgstr ""

# 87855eb1570b4213ac2fa96fec5daa3d
#: ../../howto/deployment/fastcgi.txt:63
msgid ""
"If you're on a shared hosting system, you'll probably be forced to use Web "
"server-managed FastCGI processes. See the section below on running Django "
"with Web server-managed processes for more information."
msgstr ""

# d137858b9bd34c9b911500045a55d72c
#: ../../howto/deployment/fastcgi.txt:67
msgid ""
"A Web server can connect to a FastCGI server in one of two ways: It can use "
"either a Unix domain socket (a \"named pipe\" on Win32 systems), or it can "
"use a TCP socket. What you choose is a manner of preference; a TCP socket is "
"usually easier due to permissions issues."
msgstr ""

# c34c22851e964323b1c0b8dfebc1bea9
#: ../../howto/deployment/fastcgi.txt:72
msgid ""
"To start your server, first change into the directory of your project "
"(wherever your :doc:`manage.py </ref/django-admin>` is), and then run the :"
"djadmin:`runfcgi` command::"
msgstr ""

# 3704f75512b141d9be8548a7d1666796
#: ../../howto/deployment/fastcgi.txt:78
msgid ""
"If you specify ``help`` as the only option after :djadmin:`runfcgi`, it'll "
"display a list of all the available options."
msgstr ""

# 80d0e9db486d47d9b267cbaaec07a2d3
#: ../../howto/deployment/fastcgi.txt:81
msgid ""
"You'll need to specify either a :djadminopt:`socket`, a :djadminopt:"
"`protocol` or both :djadminopt:`host` and :djadminopt:`port`. Then, when you "
"set up your Web server, you'll just need to point it at the host/port or "
"socket you specified when starting the FastCGI server. See the examples_, "
"below."
msgstr ""

# 7946174012e74ae2b9d1dfbbc6959017
#: ../../howto/deployment/fastcgi.txt:87
msgid "Protocols"
msgstr ""

# d3808047c15c412b8aef2e8cbf2def7c
#: ../../howto/deployment/fastcgi.txt:89
msgid ""
"Django supports all the protocols that flup_ does, namely fastcgi_, `SCGI`_ "
"and `AJP1.3`_ (the Apache JServ Protocol, version 1.3). Select your "
"preferred protocol by using the :djadminopt:`protocol=\\<protocol_name\\> "
"<protocol>` option with ``./manage.py runfcgi`` -- where ``<protocol_name>`` "
"may be one of: ``fcgi`` (the default), ``scgi`` or ``ajp``. For example::"
msgstr ""

# 5f0adab1814b4da48cf9fea8cc30d734
#: ../../howto/deployment/fastcgi.txt:103
msgid "Examples"
msgstr ""

# c89f5d794c324ebfb7479d252306fa73
#: ../../howto/deployment/fastcgi.txt:105
msgid "Running a threaded server on a TCP port::"
msgstr ""

# 0f390436a2ee4ef69c23dc28c2a88c94
#: ../../howto/deployment/fastcgi.txt:109
msgid "Running a preforked server on a Unix domain socket::"
msgstr ""

# f751bc9d06984660b935403fcff1d779
#: ../../howto/deployment/fastcgi.txt:113
msgid "Socket security"
msgstr ""

# c90518b7a3bd41069f8274915a053f7b
#: ../../howto/deployment/fastcgi.txt:115
msgid ""
"Django's default umask requires that the webserver and the Django fastcgi "
"process be run with the same group **and** user. For increased security, you "
"can run them under the same group but as different users. If you do this, "
"you will need to set the umask to 0002 using the ``umask`` argument to "
"``runfcgi``."
msgstr ""

# b99a01133eac4246909d5a8c103ff308
#: ../../howto/deployment/fastcgi.txt:121
msgid ""
"Run without daemonizing (backgrounding) the process (good for debugging)::"
msgstr ""

# f70bcb07f3b4448eb96733d4735927fd
#: ../../howto/deployment/fastcgi.txt:126
msgid "Stopping the FastCGI daemon"
msgstr ""

# b333afb46d6145cd9ab1d9e473d9cd87
#: ../../howto/deployment/fastcgi.txt:128
msgid ""
"If you have the process running in the foreground, it's easy enough to stop "
"it: Simply hitting ``Ctrl-C`` will stop and quit the FastCGI server. "
"However, when you're dealing with background processes, you'll need to "
"resort to the Unix ``kill`` command."
msgstr ""

# 7d5574e601a24e82807ac74f5d819b5c
#: ../../howto/deployment/fastcgi.txt:133
msgid ""
"If you specify the :djadminopt:`pidfile` option to :djadmin:`runfcgi`, you "
"can kill the running FastCGI daemon like this::"
msgstr ""

# 4aabeb01a2384c09814a30ce822ee75e
#: ../../howto/deployment/fastcgi.txt:138
msgid "...where ``$PIDFILE`` is the ``pidfile`` you specified."
msgstr ""

# 3c55ab6b5f194553a9de8a125f8bed70
#: ../../howto/deployment/fastcgi.txt:140
msgid ""
"To easily restart your FastCGI daemon on Unix, try this small shell script::"
msgstr ""

# a7e48a9f2ac8498b8e9e33f8e533e901
#: ../../howto/deployment/fastcgi.txt:160
msgid "Apache setup"
msgstr ""

# 5688d9670fe84949a9f7a31222e16b4a
#: ../../howto/deployment/fastcgi.txt:162
msgid ""
"To use Django with Apache and FastCGI, you'll need Apache installed and "
"configured, with `mod_fastcgi`_ installed and enabled. Consult the Apache "
"documentation for instructions."
msgstr ""

# d622f85b835a4d04ac09c1e6b2ed252f
#: ../../howto/deployment/fastcgi.txt:166
msgid ""
"Once you've got that set up, point Apache at your Django FastCGI instance by "
"editing the ``httpd.conf`` (Apache configuration) file. You'll need to do "
"two things:"
msgstr ""

# 6bdf405346774d02a881ffe3ea7fbec5
#: ../../howto/deployment/fastcgi.txt:170
msgid ""
"Use the ``FastCGIExternalServer`` directive to specify the location of your "
"FastCGI server."
msgstr ""

# ee360e313caa49d0a7614dff1b85ab12
#: ../../howto/deployment/fastcgi.txt:172
msgid "Use ``mod_rewrite`` to point URLs at FastCGI as appropriate."
msgstr ""

# 9424f5cc8b10457db060d676bb3db9e8
#: ../../howto/deployment/fastcgi.txt:177
msgid "Specifying the location of the FastCGI server"
msgstr ""

# 11a42caf64b5485490641abbf2bee370
#: ../../howto/deployment/fastcgi.txt:179
msgid ""
"The ``FastCGIExternalServer`` directive tells Apache how to find your "
"FastCGI server. As the `FastCGIExternalServer docs`_ explain, you can "
"specify either a ``socket`` or a ``host``. Here are examples of both:"
msgstr ""

# 45c9291c17ba40d484d603a5d9cc8327
#: ../../howto/deployment/fastcgi.txt:191
msgid ""
"In either case, the file ``/home/user/public_html/mysite.fcgi`` doesn't "
"actually have to exist. It's just a URL used by the Web server internally -- "
"a hook for signifying which requests at a URL should be handled by FastCGI. "
"(More on this in the next section.)"
msgstr ""

# 802013fba1b1461c8ac01268ff6e65d8
#: ../../howto/deployment/fastcgi.txt:199
msgid "Using mod_rewrite to point URLs at FastCGI"
msgstr ""

# 94434c172df94684a28ea8a271c64980
#: ../../howto/deployment/fastcgi.txt:201
msgid ""
"The second step is telling Apache to use FastCGI for URLs that match a "
"certain pattern. To do this, use the `mod_rewrite`_ module and rewrite URLs "
"to ``mysite.fcgi`` (or whatever you specified in the "
"``FastCGIExternalServer`` directive, as explained in the previous section)."
msgstr ""

# e22a897761394ea2b075fd7db6d448c7
#: ../../howto/deployment/fastcgi.txt:206
msgid ""
"In this example, we tell Apache to use FastCGI to handle any request that "
"doesn't represent a file on the filesystem and doesn't start with ``/media/"
"``. This is probably the most common case, if you're using Django's admin "
"site:"
msgstr ""

# d0717cd1a6344eefa8bb97eb04eca760
#: ../../howto/deployment/fastcgi.txt:224
msgid ""
"Django will automatically use the pre-rewrite version of the URL when "
"constructing URLs with the :ttag:`{% url %}<url>` template tag (and similar "
"methods)."
msgstr ""

# a4477694a1f24c08a6d86498d2f09be0
#: ../../howto/deployment/fastcgi.txt:229
msgid "Using mod_fcgid as alternative to mod_fastcgi"
msgstr ""

# 5e77769f8d31492f82c8bcb2e2524848
#: ../../howto/deployment/fastcgi.txt:231
msgid ""
"Another way to serve applications through FastCGI is by using Apache's "
"`mod_fcgid`_ module. Compared to mod_fastcgi mod_fcgid handles FastCGI "
"applications differently in that it manages the spawning of worker processes "
"by itself and doesn't offer something like ``FastCGIExternalServer``. This "
"means that the configuration looks slightly different."
msgstr ""

# 70afac03033e4c0a9f0405c891d11b8f
#: ../../howto/deployment/fastcgi.txt:237
msgid ""
"In effect, you have to go the way of adding a script handler similar to what "
"is described later on regarding running Django in a :ref:`shared-hosting "
"environment <apache_shared_hosting>`. For further details please refer to "
"the `mod_fcgid reference`_"
msgstr ""

# 615eaec052d7493390d6c71e44916118
#: ../../howto/deployment/fastcgi.txt:246
msgid "lighttpd setup"
msgstr ""

# 9880f69291884f1f82803bca047229e8
#: ../../howto/deployment/fastcgi.txt:248
msgid ""
"lighttpd_ is a lightweight Web server commonly used for serving static "
"files. It supports FastCGI natively and, thus, is a good choice for serving "
"both static and dynamic pages, if your site doesn't have any Apache-specific "
"needs."
msgstr ""

# 2bf99d1b90a8422aadacfdbd4b81f661
#: ../../howto/deployment/fastcgi.txt:254
msgid ""
"Make sure ``mod_fastcgi`` is in your modules list, somewhere after "
"``mod_rewrite`` and ``mod_access``, but not after ``mod_accesslog``. You'll "
"probably want ``mod_alias`` as well, for serving admin media."
msgstr ""

# 47161444e514455f8d74654b2fbd6d87
#: ../../howto/deployment/fastcgi.txt:258
msgid "Add the following to your lighttpd config file:"
msgstr ""

# e22036adb0f842aa9cf15978927a2ec6
#: ../../howto/deployment/fastcgi.txt:285
msgid "Running multiple Django sites on one lighttpd"
msgstr ""

# 6bc083c3ef724a2a9ed68d29c463ed60
#: ../../howto/deployment/fastcgi.txt:287
msgid ""
"lighttpd lets you use \"conditional configuration\" to allow configuration "
"to be customized per host. To specify multiple FastCGI sites, just add a "
"conditional block around your FastCGI config for each site::"
msgstr ""

# f61158dd885141efa021587cc3e54e70
#: ../../howto/deployment/fastcgi.txt:309
msgid ""
"You can also run multiple Django installations on the same site simply by "
"specifying multiple entries in the ``fastcgi.server`` directive. Add one "
"FastCGI host for each."
msgstr ""

# ea7741c331a34076990cf7f2c7c11397
#: ../../howto/deployment/fastcgi.txt:314
msgid "Cherokee setup"
msgstr ""

# 23a7f7aff24e46a4afeb64231f8aee57
#: ../../howto/deployment/fastcgi.txt:316
msgid ""
"Cherokee is a very fast, flexible and easy to configure Web Server. It "
"supports the widespread technologies nowadays: FastCGI, SCGI, PHP, CGI, SSI, "
"TLS and SSL encrypted connections, Virtual hosts, Authentication, on the fly "
"encoding, Load Balancing, Apache compatible log files, Data Base Balancer, "
"Reverse HTTP Proxy and much more."
msgstr ""

# 72760f0498474d688b90b9e319cc6852
#: ../../howto/deployment/fastcgi.txt:322
msgid ""
"The Cherokee project provides a documentation to `setting up Django`_ with "
"Cherokee."
msgstr ""

# 3d7fbd181c1d4adfbb0af9484f3a472d
#: ../../howto/deployment/fastcgi.txt:329
msgid "Running Django on a shared-hosting provider with Apache"
msgstr ""

# e60efd57929b43f98b539eb1497f1770
#: ../../howto/deployment/fastcgi.txt:331
msgid ""
"Many shared-hosting providers don't allow you to run your own server daemons "
"or edit the ``httpd.conf`` file. In these cases, it's still possible to run "
"Django using Web server-spawned processes."
msgstr ""

# 54c848c4c68f49208c650ee0c63fb042
#: ../../howto/deployment/fastcgi.txt:337
msgid ""
"If you're using Web server-spawned processes, as explained in this section, "
"there's no need for you to start the FastCGI server on your own. Apache will "
"spawn a number of processes, scaling as it needs to."
msgstr ""

# 3ba9fbf8eca4497aaf43a327fe8883a4
#: ../../howto/deployment/fastcgi.txt:341
msgid "In your Web root directory, add this to a file named ``.htaccess``:"
msgstr ""

# a3b50e3e8a4a435a9d772d95810c5c8e
#: ../../howto/deployment/fastcgi.txt:350
msgid ""
"Then, create a small script that tells Apache how to spawn your FastCGI "
"program. Create a file ``mysite.fcgi`` and place it in your Web directory, "
"and be sure to make it executable:"
msgstr ""

# 83df5441414e489ba7659a45fc50febe
#: ../../howto/deployment/fastcgi.txt:371
msgid ""
"This works if your server uses mod_fastcgi. If, on the other hand, you are "
"using mod_fcgid the setup is mostly the same except for a slight change in "
"the ``.htaccess`` file. Instead of adding a fastcgi-script handler, you have "
"to add a fcgid-handler:"
msgstr ""

# 2851a0ff5cd3489db5868e7b228280fa
#: ../../howto/deployment/fastcgi.txt:384
msgid "Restarting the spawned server"
msgstr ""

# 3a012fd99fa1416ba33c2c54b12482c4
#: ../../howto/deployment/fastcgi.txt:386
msgid ""
"If you change any Python code on your site, you'll need to tell FastCGI the "
"code has changed. But there's no need to restart Apache in this case. "
"Rather, just reupload ``mysite.fcgi``, or edit the file, so that the "
"timestamp on the file will change. When Apache sees the file has been "
"updated, it will restart your Django application for you."
msgstr ""

# 802917bb1c70473fac2ecbf79a08b4b5
#: ../../howto/deployment/fastcgi.txt:392
msgid ""
"If you have access to a command shell on a Unix system, you can accomplish "
"this easily by using the ``touch`` command::"
msgstr ""

# 60ceb859adda4701a804ace274678c92
#: ../../howto/deployment/fastcgi.txt:398
msgid "Serving admin media files"
msgstr ""

# 4df4df821e3c40bead1e85188fed73b9
#: ../../howto/deployment/fastcgi.txt:400
msgid ""
"Regardless of the server and configuration you eventually decide to use, you "
"will also need to give some thought to how to serve the admin media files. "
"The advice given in the :ref:`mod_wsgi <serving-the-admin-files>` "
"documentation is also applicable in the setups detailed above."
msgstr ""

# eb87ee28b1814ca8917465274c9b95dc
#: ../../howto/deployment/fastcgi.txt:406
msgid "Forcing the URL prefix to a particular value"
msgstr ""

# 0cbd9a99ad994fe4b18e31b9d24c7a1a
#: ../../howto/deployment/fastcgi.txt:408
msgid ""
"Because many of these fastcgi-based solutions require rewriting the URL at "
"some point inside the Web server, the path information that Django sees may "
"not resemble the original URL that was passed in. This is a problem if the "
"Django application is being served from under a particular prefix and you "
"want your URLs from the :ttag:`{% url %}<url>` tag to look like the prefix, "
"rather than the rewritten version, which might contain, for example, "
"``mysite.fcgi``."
msgstr ""

# 273408e3290149c39cc48421e8063a84
#: ../../howto/deployment/fastcgi.txt:415
msgid ""
"Django makes a good attempt to work out what the real script name prefix "
"should be. In particular, if the Web server sets the ``SCRIPT_URL`` "
"(specific to Apache's mod_rewrite), or ``REDIRECT_URL`` (set by a few "
"servers, including Apache + mod_rewrite in some situations), Django will "
"work out the original prefix automatically."
msgstr ""

# 605dd0e201724a4e81c9f9705517b4a6
#: ../../howto/deployment/fastcgi.txt:421
msgid ""
"In the cases where Django cannot work out the prefix correctly and where you "
"want the original value to be used in URLs, you can set the :setting:"
"`FORCE_SCRIPT_NAME` setting in your main ``settings`` file. This sets the "
"script name uniformly for every URL served via that settings file. Thus "
"you'll need to use different settings files if you want different sets of "
"URLs to have different script names in this case, but that is a rare "
"situation."
msgstr ""

# ecbb41694a634e2f811af554c7c4ce21
#: ../../howto/deployment/fastcgi.txt:428
msgid ""
"As an example of how to use it, if your Django configuration is serving all "
"of the URLs under ``'/'`` and you wanted to use this setting, you would set "
"``FORCE_SCRIPT_NAME = ''`` in your settings file."
msgstr ""

# ec2600dc3b674d9fa1ac9b266768c740
#: ../../howto/deployment/index.txt:2
msgid "Deploying Django"
msgstr ""

# d937323e43294238806b7f7a93a9fddb
#: ../../howto/deployment/index.txt:4
msgid ""
"Django's chock-full of shortcuts to make Web developer's lives easier, but "
"all those tools are of no use if you can't easily deploy your sites. Since "
"Django's inception, ease of deployment has been a major goal. There's a "
"number of good ways to easily deploy Django:"
msgstr ""

# cc73aee3c4c94108a9df2d3137b06b67
#: ../../howto/deployment/index.txt:15
msgid ""
"If you're new to deploying Django and/or Python, we'd recommend you try :doc:"
"`mod_wsgi </howto/deployment/wsgi/modwsgi>` first. In most cases it'll be "
"the easiest, fastest, and most stable deployment choice."
msgstr ""

# 4318e93cc96a4aeaac74e85894c3ae81
#: ../../howto/deployment/index.txt:21
msgid ""
"`Chapter 12 of the Django Book (second edition)`_ discusses deployment and "
"especially scaling in more detail. However, note that this edition was "
"written against Django version 1.1 and has not been updated since "
"`mod_python` was first deprecated, then completely removed in Django 1.5."
msgstr ""

# 1382da8ba60146ea8cb616f5b52d8267
# b2beb3afb5324b4fa06b125ee1f6dc28
#: ../../howto/deployment/wsgi/apache-auth.txt:3
#: ../../howto/deployment/wsgi/modwsgi.txt:202
msgid "Authenticating against Django's user database from Apache"
msgstr ""

# fa6fe849cd4f4ae189d031b9ceb7e785
#: ../../howto/deployment/wsgi/apache-auth.txt:5
msgid ""
"Since keeping multiple authentication databases in sync is a common problem "
"when dealing with Apache, you can configure Apache to authenticate against "
"Django's :doc:`authentication system </topics/auth/index>` directly. This "
"requires Apache version >= 2.2 and mod_wsgi >= 2.0. For example, you could:"
msgstr ""

# 6f173f094a1c4e91ad6cb4d9edd14e2b
#: ../../howto/deployment/wsgi/apache-auth.txt:10
msgid ""
"Serve static/media files directly from Apache only to authenticated users."
msgstr ""

# f5b22329bd98417d9fd98cccacd0fa17
#: ../../howto/deployment/wsgi/apache-auth.txt:12
msgid ""
"Authenticate access to a Subversion_ repository against Django users with a "
"certain permission."
msgstr ""

# a33d2cd6bb404794bf19ed8eb9d56ac7
#: ../../howto/deployment/wsgi/apache-auth.txt:15
msgid "Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""

# a67d102898974ddab738de2df998712b
#: ../../howto/deployment/wsgi/apache-auth.txt:18
msgid ""
"If you have installed a :ref:`custom User model <auth-custom-user>` and want "
"to use this default auth handler, it must support an `is_active` attribute. "
"If you want to use group based authorization, your custom user must have a "
"relation named 'groups', referring to a related object that has a 'name' "
"field. You can also specify your own custom mod_wsgi auth handler if your "
"custom cannot conform to these requirements."
msgstr ""

# af62b1828df3423a862e96a31541ad94
#: ../../howto/deployment/wsgi/apache-auth.txt:29
msgid "Authentication with mod_wsgi"
msgstr ""

# bf89f381b3314c52bd914a533d700d15
#: ../../howto/deployment/wsgi/apache-auth.txt:31
msgid ""
"Make sure that mod_wsgi is installed and activated and that you have "
"followed the steps to setup :doc:`Apache with mod_wsgi </howto/deployment/"
"wsgi/modwsgi>`"
msgstr ""

# b563c97d239646ef891f9cc7aeb63832
#: ../../howto/deployment/wsgi/apache-auth.txt:35
msgid ""
"Next, edit your Apache configuration to add a location that you want only "
"authenticated users to be able to view:"
msgstr ""

# 5c941c0c641c463a94324c549d5c0278
#: ../../howto/deployment/wsgi/apache-auth.txt:53
msgid ""
"The ``WSGIAuthUserScript`` directive tells mod_wsgi to execute the "
"``check_password`` function in specified wsgi script, passing the user name "
"and password that it receives from the prompt. In this example, the "
"``WSGIAuthUserScript`` is the same as the ``WSGIScriptAlias`` that defines "
"your application :doc:`that is created by django-admin.py startproject </"
"howto/deployment/wsgi/index>`."
msgstr ""

# c8a7916361db48e0b58e4d6100ab3bb5
#: ../../howto/deployment/wsgi/apache-auth.txt:60
msgid "Using Apache 2.2 with authentication"
msgstr ""

# 5d4abdbba8404737849ed514cbf34bed
#: ../../howto/deployment/wsgi/apache-auth.txt:62
msgid "Make sure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded."
msgstr ""

# df9d6a8fd94f4e9b81af4fcd3f378b8c
#: ../../howto/deployment/wsgi/apache-auth.txt:64
msgid ""
"These might be compiled statically into Apache, or you might need to use "
"LoadModule to load them dynamically in your ``httpd.conf``:"
msgstr ""

# 3685310a3a5a4229b81e95ee4bba3aa3
#: ../../howto/deployment/wsgi/apache-auth.txt:72
msgid ""
"Finally, edit your WSGI script ``mysite.wsgi`` to tie Apache's "
"authentication to your site's authentication mechanisms by importing the "
"check_user function:"
msgstr ""

# ff8118ed9a8a4e1aaa80c08e98c62466
#: ../../howto/deployment/wsgi/apache-auth.txt:89
msgid ""
"Requests beginning with ``/secret/`` will now require a user to authenticate."
msgstr ""

# 2d26d5dccc81415889e3fcc7afe70c47
#: ../../howto/deployment/wsgi/apache-auth.txt:91
msgid ""
"The mod_wsgi `access control mechanisms documentation`_ provides additional "
"details and information about alternative methods of authentication."
msgstr ""

# 8155ddf4593b4cc8b78a08c0b8a32c6e
#: ../../howto/deployment/wsgi/apache-auth.txt:97
msgid "Authorization with mod_wsgi and Django groups"
msgstr ""

# ae9563b698b04d50a594074946cc4031
#: ../../howto/deployment/wsgi/apache-auth.txt:99
msgid ""
"mod_wsgi also provides functionality to restrict a particular location to "
"members of a group."
msgstr ""

# 83c4de228ddd468b90e93a51514dafa1
#: ../../howto/deployment/wsgi/apache-auth.txt:102
msgid "In this case, the Apache configuration should look like this:"
msgstr ""

# 731db9062c2f463f83c5b968072cf598
#: ../../howto/deployment/wsgi/apache-auth.txt:121
msgid ""
"To support the ``WSGIAuthGroupScript`` directive, the same WSGI script "
"``mysite.wsgi`` must also import the ``groups_for_user`` function which "
"returns a list groups the given user belongs to."
msgstr ""

# 7b84b6bf176b4f009ff13ed7dc05b0bb
#: ../../howto/deployment/wsgi/apache-auth.txt:129
msgid ""
"Requests for ``/secret/`` will now also require user to be a member of the "
"\"secret-agents\" group."
msgstr ""

# 4d488a1db12447208530d2c731cf04b5
#: ../../howto/deployment/wsgi/gunicorn.txt:3
msgid "How to use Django with Gunicorn"
msgstr ""

# 3f6ddf53b0924a0395a3f58856b43f04
#: ../../howto/deployment/wsgi/gunicorn.txt:7
msgid ""
"Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no "
"dependencies and is easy to install and use."
msgstr ""

# bd1e9580ad9c4296bc5a9b48cdb49ab0
#: ../../howto/deployment/wsgi/gunicorn.txt:12
msgid ""
"There are two ways to use Gunicorn with Django. One is to have Gunicorn "
"treat Django as just another WSGI application. The second is to use "
"Gunicorn's special `integration with Django`_."
msgstr ""

# b89678e4cb7149209da540c3b95d9f66
#: ../../howto/deployment/wsgi/gunicorn.txt:19
msgid "Installing Gunicorn"
msgstr ""

# aad6fc62a06b49f8a7c6403ffd33ceae
#: ../../howto/deployment/wsgi/gunicorn.txt:21
msgid ""
"Installing gunicorn is as easy as ``sudo pip install gunicorn``. For more "
"details, see the `gunicorn documentation`_."
msgstr ""

# 4d6491d4fa9243929eeccfa0567a8c25
#: ../../howto/deployment/wsgi/gunicorn.txt:27
msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr ""

# c8811a73f69642de9f4299c6a43f6b57
#: ../../howto/deployment/wsgi/gunicorn.txt:29
msgid ""
"When Gunicorn is installed, a ``gunicorn`` command is available which starts "
"the Gunicorn server process. At its simplest, gunicorn just needs to be "
"called with a the location of a WSGI application object.::"
msgstr ""

# 597ac019cd914e22950e218abfc61bee
#: ../../howto/deployment/wsgi/gunicorn.txt:35
msgid ""
"Where ``APP_MODULE`` is of the pattern ``MODULE_NAME:VARIABLE_NAME``. The "
"module name should be a full dotted path. The variable name refers to a WSGI "
"callable that should be found in the specified module."
msgstr ""

# 630cd23c6cad441dae83ef395eba4239
#: ../../howto/deployment/wsgi/gunicorn.txt:39
msgid "So for a typical Django project, invoking gunicorn would look like::"
msgstr ""

# 23be2b4840c64de08b24b7a3b7e07f5b
#: ../../howto/deployment/wsgi/gunicorn.txt:43
msgid ""
"(This requires that your project be on the Python path; the simplest way to "
"ensure that is to run this command from the same directory as your ``manage."
"py`` file.)"
msgstr ""

# abd8db87b67b4aa28f08c213e09d0e74
#: ../../howto/deployment/wsgi/gunicorn.txt:49
msgid "Using Gunicorn's Django integration"
msgstr ""

# 4a23ad3d7ccd4c7e9dabf4e803d85490
#: ../../howto/deployment/wsgi/gunicorn.txt:53
msgid ""
"If you are using Django 1.4 or newer, it’s highly recommended to simply run "
"your application with the WSGI interface using the ``gunicorn`` command as "
"described above."
msgstr ""

# daa4a9f7caae45a590e088bb4e375a6a
#: ../../howto/deployment/wsgi/gunicorn.txt:57
msgid ""
"To use Gunicorn's built-in Django integration, first add ``\"gunicorn\"`` "
"to :setting:`INSTALLED_APPS`. Then run ``python manage.py run_gunicorn``."
msgstr ""

# d6b6037066b74a6a82e38f100cdb58e0
#: ../../howto/deployment/wsgi/gunicorn.txt:60
msgid "This provides a few Django-specific niceties:"
msgstr ""

# 90e3a02f670945c58c3ba3f2373c1bb2
#: ../../howto/deployment/wsgi/gunicorn.txt:62
msgid "sets the gunicorn process name to be that of the project"
msgstr ""

# 69d37755d7594c3bb09a6257182ff5a6
#: ../../howto/deployment/wsgi/gunicorn.txt:64
msgid "validates installed models"
msgstr ""

# 43d93846fa28420a953268183beb1230
#: ../../howto/deployment/wsgi/gunicorn.txt:66
msgid ""
"allows an ``--adminmedia`` option for passing in the location of the admin "
"media files."
msgstr ""

# 2855d4d806224cf3851d493a7d62b4aa
#: ../../howto/deployment/wsgi/gunicorn.txt:69
msgid ""
"See Gunicorn's `deployment documentation`_ for additional tips on starting "
"and maintaining the Gunicorn server."
msgstr ""

# 571d7a7ce8104037b4d954f3d8da9ad3
#: ../../howto/deployment/wsgi/index.txt:3
msgid "How to deploy with WSGI"
msgstr ""

# 3cd1083ed3b04a5ca7dc64f0d81156fc
#: ../../howto/deployment/wsgi/index.txt:5
msgid ""
"Django's primary deployment platform is WSGI_, the Python standard for web "
"servers and applications."
msgstr ""

# 73efc84e88fc4faf9566d1fd78462e0f
#: ../../howto/deployment/wsgi/index.txt:10
msgid ""
"Django's :djadmin:`startproject` management command sets up a simple default "
"WSGI configuration for you, which you can tweak as needed for your project, "
"and direct any WSGI-compliant webserver to use. Django includes getting-"
"started documentation for the following WSGI servers:"
msgstr ""

# 7fc1d7bcf0f94ff9a5aa05395f58ba58
#: ../../howto/deployment/wsgi/index.txt:24
msgid "The ``application`` object"
msgstr ""

# a79e946ecd4b4341bf3de4e756831f6a
#: ../../howto/deployment/wsgi/index.txt:26
msgid ""
"One key concept of deploying with WSGI is to specify a central "
"``application`` callable object which the webserver uses to communicate with "
"your code. This is commonly specified as an object named ``application`` in "
"a Python module accessible to the server."
msgstr ""

# d766150394a5411f8b41ed6e09aeb012
#: ../../howto/deployment/wsgi/index.txt:33
msgid ""
"The :djadmin:`startproject` command creates a :file:`projectname/wsgi.py` "
"that contains such an application callable."
msgstr ""

# c09ded8101574b2987080de5c1671ed2
#: ../../howto/deployment/wsgi/index.txt:38
msgid ""
"Upgrading from a previous release of Django and don't have a :file:`wsgi.py` "
"file in your project? You can simply add one to your project's top-level "
"Python package (probably next to :file:`settings.py` and :file:`urls.py`) "
"with the contents below. If you want :djadmin:`runserver` to also make use "
"of this WSGI file, you can also add ``WSGI_APPLICATION = \"mysite.wsgi."
"application\"`` in your settings (replacing ``mysite`` with the name of your "
"project)."
msgstr ""

# 16797709d3e241eba276cea9b880e615
#: ../../howto/deployment/wsgi/index.txt:46
msgid "Initially this file contains::"
msgstr ""

# 7291af1122a845c2b8a621b59e573d94
#: ../../howto/deployment/wsgi/index.txt:57
msgid ""
"The ``os.environ.setdefault`` line just sets the default settings module to "
"use, if you haven't explicitly set the :envvar:`DJANGO_SETTINGS_MODULE` "
"environment variable. You'll need to edit this line to replace ``mysite`` "
"with the name of your project package, so the path to your settings module "
"is correct."
msgstr ""

# a31ac4350ea94763a4875425f1d92075
#: ../../howto/deployment/wsgi/index.txt:63
msgid ""
"To apply `WSGI middleware`_ you can simply wrap the application object in "
"the same file::"
msgstr ""

# 0b97aad7df4e458bb30522a710c60ff4
#: ../../howto/deployment/wsgi/index.txt:69
msgid ""
"You could also replace the Django WSGI application with a custom WSGI "
"application that later delegates to the Django WSGI application, if you want "
"to combine a Django application with a WSGI application of another framework."
msgstr ""

# a96fa397382c41aaa99331c3bc7520a4
#: ../../howto/deployment/wsgi/index.txt:77
msgid ""
"Some third-party WSGI middleware do not call ``close`` on the response "
"object after handling a request — most notably Sentry's error reporting "
"middleware up to version 2.0.7. In those cases the :data:`~django.core."
"signals.request_finished` signal isn't sent. This can result in idle "
"connections to database and memcache servers."
msgstr ""

# d46e0fb26ea4454a8e2f17645a372874
#: ../../howto/deployment/wsgi/modwsgi.txt:3
msgid "How to use Django with Apache and mod_wsgi"
msgstr ""

# 7f374100e31f4f87b442451e0d5eb34c
#: ../../howto/deployment/wsgi/modwsgi.txt:5
msgid ""
"Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to "
"get Django into production."
msgstr ""

# 88853f8dc45748248932bc7d2f032b9d
#: ../../howto/deployment/wsgi/modwsgi.txt:11
msgid ""
"mod_wsgi is an Apache module which can host any Python WSGI_ application, "
"including Django. Django will work with any version of Apache which supports "
"mod_wsgi."
msgstr ""

# 8ee82f0281ca4cdeb15efb77a3ce78ec
#: ../../howto/deployment/wsgi/modwsgi.txt:17
msgid ""
"The `official mod_wsgi documentation`_ is fantastic; it's your source for "
"all the details about how to use mod_wsgi. You'll probably want to start "
"with the `installation and configuration documentation`_."
msgstr ""

# 608e468d33714f979c7e563feacc266f
#: ../../howto/deployment/wsgi/modwsgi.txt:25
msgid "Basic configuration"
msgstr ""

# 088683759f4f454aacb8883ab042ed20
#: ../../howto/deployment/wsgi/modwsgi.txt:27
msgid ""
"Once you've got mod_wsgi installed and activated, edit your Apache server's "
"``httpd.conf`` file and add the following. If you are using a version of "
"Apache older than 2.4, replace ``Require all granted`` with ``Allow from "
"all``."
msgstr ""

# 421b79e13bef44dbad0af270db711535
#: ../../howto/deployment/wsgi/modwsgi.txt:42
msgid ""
"The first bit in the ``WSGIScriptAlias`` line is the base URL path you want "
"to serve your application at (``/`` indicates the root url), and the second "
"is the location of a \"WSGI file\" -- see below -- on your system, usually "
"inside of your project package (``mysite`` in this example). This tells "
"Apache to serve any request below the given URL using the WSGI application "
"defined in that file."
msgstr ""

# d10ef2d9f71d4a52a5e80841af336758
#: ../../howto/deployment/wsgi/modwsgi.txt:49
msgid ""
"The ``WSGIPythonPath`` line ensures that your project package is available "
"for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""

# 6f29dd6b8a4545938831709b4e3d9a9b
#: ../../howto/deployment/wsgi/modwsgi.txt:52
msgid ""
"The ``<Directory>`` piece just ensures that Apache can access your :file:"
"`wsgi.py` file."
msgstr ""

# 7895ff870a0a4dc6bc8a238eaa097274
#: ../../howto/deployment/wsgi/modwsgi.txt:55
msgid ""
"Next we'll need to ensure this :file:`wsgi.py` with a WSGI application "
"object exists. As of Django version 1.4, :djadmin:`startproject` will have "
"created one for you; otherwise, you'll need to create it. See the :doc:`WSGI "
"overview documentation</howto/deployment/wsgi/index>` for the default "
"contents you should put in this file, and what else you can add to it."
msgstr ""

# 86bbe3bc5d38441f8f994050c818c9ab
#: ../../howto/deployment/wsgi/modwsgi.txt:63
msgid ""
"If multiple Django sites are run in a single mod_wsgi process, all of them "
"will use the settings of whichever one happens to run first. This can be "
"solved with a minor edit to ``wsgi.py`` (see comment in the file for "
"details), or by :ref:`using mod_wsgi daemon mode<daemon-mode>` and ensuring "
"that each site runs in its own daemon process."
msgstr ""

# aede6e5b46ce417e877d47bb563b539c
#: ../../howto/deployment/wsgi/modwsgi.txt:71
msgid "Using a virtualenv"
msgstr ""

# 298ac3ecc7d149758cbcabd0df6a72f9
#: ../../howto/deployment/wsgi/modwsgi.txt:73
msgid ""
"If you install your project's Python dependencies inside a `virtualenv`_, "
"you'll need to add the path to this virtualenv's ``site-packages`` directory "
"to your Python path as well. To do this, add an additional path to your "
"`WSGIPythonPath` directive, with multiple paths separated by a colon::"
msgstr ""

# abc4431e508241469414a51203a91203
#: ../../howto/deployment/wsgi/modwsgi.txt:80
msgid ""
"Make sure you give the correct path to your virtualenv, and replace "
"``python2.X`` with the correct Python version (e.g. ``python2.7``)."
msgstr ""

# 71092707ab3249ffaa8ac8deb9e4127b
#: ../../howto/deployment/wsgi/modwsgi.txt:88
msgid "Using mod_wsgi daemon mode"
msgstr ""

# 4abe48fc24d34094a5b23da288857537
#: ../../howto/deployment/wsgi/modwsgi.txt:90
msgid ""
"\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows "
"platforms). To create the required daemon process group and delegate the "
"Django instance to run in it, you will need to add appropriate "
"``WSGIDaemonProcess`` and ``WSGIProcessGroup`` directives. A further change "
"required to the above configuration if you use daemon mode is that you can't "
"use ``WSGIPythonPath``; instead you should use the ``python-path`` option to "
"``WSGIDaemonProcess``, for example::"
msgstr ""

# 89cfecfa7060482c9e285713b49b46a3
#: ../../howto/deployment/wsgi/modwsgi.txt:101
msgid ""
"See the official mod_wsgi documentation for `details on setting up daemon "
"mode`_."
msgstr ""

# 03e896e637664bf8a5ef51ec88d0783c
#: ../../howto/deployment/wsgi/modwsgi.txt:109
msgid "Serving files"
msgstr ""

# 1377071a2f5845399d58f2dc7d5f5973
#: ../../howto/deployment/wsgi/modwsgi.txt:111
msgid ""
"Django doesn't serve files itself; it leaves that job to whichever Web "
"server you choose."
msgstr ""

# 7b6fb7ffbc934791a50715d728b6add9
#: ../../howto/deployment/wsgi/modwsgi.txt:114
msgid ""
"We recommend using a separate Web server -- i.e., one that's not also "
"running Django -- for serving media. Here are some good choices:"
msgstr ""

# cc3aaef06bfc4abc8baa27a79be97ffe
# 9b1c4c5af0c6456cba53812398459c81
#: ../../howto/deployment/wsgi/modwsgi.txt:117
#: ../../howto/static-files/deployment.txt:73
msgid "lighttpd_"
msgstr ""

# 3d8bf7d5c11c4fd49ed7740c5be70722
# eb46b0dda871409fbef95e831c4ec08b
#: ../../howto/deployment/wsgi/modwsgi.txt:118
#: ../../howto/static-files/deployment.txt:74
msgid "Nginx_"
msgstr ""

# bc5eff4999f7459d81fb4479db401646
# 7216a9bbe75e42f2ab1772d86afcb628
#: ../../howto/deployment/wsgi/modwsgi.txt:119
#: ../../howto/static-files/deployment.txt:75
msgid "TUX_"
msgstr ""

# d27608c69cb3461387a81c88b85d47a8
# ec1313bdc0eb479a9e8c4ab5e0cf1948
#: ../../howto/deployment/wsgi/modwsgi.txt:120
#: ../../howto/static-files/deployment.txt:77
msgid "A stripped-down version of Apache_"
msgstr ""

# 45e5d4ba038a48699134f2e264a8c678
# cb54379eaca24ce381879ccac9fb1748
#: ../../howto/deployment/wsgi/modwsgi.txt:121
#: ../../howto/static-files/deployment.txt:76
msgid "Cherokee_"
msgstr ""

# 94142e3c895f451399d5be4a3116a9bf
#: ../../howto/deployment/wsgi/modwsgi.txt:123
msgid ""
"If, however, you have no option but to serve media files on the same Apache "
"``VirtualHost`` as Django, you can set up Apache to serve some URLs as "
"static media, and others using the mod_wsgi interface to Django."
msgstr ""

# 445da549d0dc4134970805549d55334c
#: ../../howto/deployment/wsgi/modwsgi.txt:127
msgid ""
"This example sets up Django at the site root, but explicitly serves ``robots."
"txt``, ``favicon.ico``, any CSS file, and anything in the ``/static/`` and "
"``/media/`` URL space as a static file. All other URLs will be served using "
"mod_wsgi::"
msgstr ""

# f4ef6b1850754d158db276ab22d98792
#: ../../howto/deployment/wsgi/modwsgi.txt:173
msgid "Serving the admin files"
msgstr ""

# 49d6116fc5584005be99e0a401f3063f
#: ../../howto/deployment/wsgi/modwsgi.txt:175
msgid ""
"Note that the Django development server automatically serves the static "
"files of the admin app (and any other installed apps), but this is not the "
"case when you use any other server arrangement. You're responsible for "
"setting up Apache, or whichever media server you're using, to serve the "
"admin files."
msgstr ""

# 3e87f9ff5f8c4298b395932a8e1b729e
#: ../../howto/deployment/wsgi/modwsgi.txt:180
msgid ""
"The admin files live in (:file:`django/contrib/admin/static/admin`) of the "
"Django distribution."
msgstr ""

# ac907e2a1ef1455bb2df4bbe57fee0c6
#: ../../howto/deployment/wsgi/modwsgi.txt:183
msgid ""
"We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle "
"the admin files (along with a Web server as outlined in the previous "
"section; this means using the :djadmin:`collectstatic` management command to "
"collect the static files in :setting:`STATIC_ROOT`, and then configuring "
"your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), "
"but here are three other approaches:"
msgstr ""

# ae3ae8e2ccfb445e9d1c439fda9435a1
#: ../../howto/deployment/wsgi/modwsgi.txt:190
msgid ""
"Create a symbolic link to the admin static files from within your document "
"root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""

# 72f2eeb935234f29bec769d700583b9e
#: ../../howto/deployment/wsgi/modwsgi.txt:194
msgid ""
"Use an ``Alias`` directive, as demonstrated above, to alias the appropriate "
"URL (probably :setting:`STATIC_URL` + `admin/`) to the actual location of "
"the admin files."
msgstr ""

# 69a50e3db3f14334a0fd954130b0ffce
#: ../../howto/deployment/wsgi/modwsgi.txt:198
msgid ""
"Copy the admin static files so that they live within your Apache document "
"root."
msgstr ""

# 03b277dc923647cf84cb48947d4c7362
#: ../../howto/deployment/wsgi/modwsgi.txt:204
msgid ""
"Django provides a handler to allow Apache to authenticate users directly "
"against Django's authentication backends. See the :doc:`mod_wsgi "
"authentication documentation </howto/deployment/wsgi/apache-auth>`."
msgstr ""

# 072c6e5295814507b16fc9cbb2edf8ff
#: ../../howto/deployment/wsgi/modwsgi.txt:209
msgid "If you get a UnicodeEncodeError"
msgstr ""

# 15496be7f43b4c099eb563e0ba4f57d6
#: ../../howto/deployment/wsgi/modwsgi.txt:211
msgid ""
"If you're taking advantage of the internationalization features of Django "
"(see :doc:`/topics/i18n/index`) and you intend to allow users to upload "
"files, you must ensure that the environment used to start Apache is "
"configured to accept non-ASCII file names. If your environment is not "
"correctly configured, you will trigger ``UnicodeEncodeError`` exceptions "
"when calling functions like ``os.path()`` on filenames that contain non-"
"ASCII characters."
msgstr ""

# a3d5ddffbc6047f2a0c4b3d7ad6811c2
#: ../../howto/deployment/wsgi/modwsgi.txt:218
msgid ""
"To avoid these problems, the environment used to start Apache should contain "
"settings analogous to the following::"
msgstr ""

# 0ca6847178774872984d484d231dcfb5
#: ../../howto/deployment/wsgi/modwsgi.txt:224
msgid ""
"Consult the documentation for your operating system for the appropriate "
"syntax and location to put these configuration items; ``/etc/apache2/"
"envvars`` is a common location on Unix platforms. Once you have added these "
"statements to your environment, restart Apache."
msgstr ""

# b216263f87d848819999e18414b73046
#: ../../howto/deployment/wsgi/uwsgi.txt:3
msgid "How to use Django with uWSGI"
msgstr ""

# 751cb001fc6848e5b297d6c5ddd3fd74
#: ../../howto/deployment/wsgi/uwsgi.txt:7
msgid ""
"uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application "
"container server coded in pure C."
msgstr ""

# 42c680d36fe2490b88745622a0ff2724
#: ../../howto/deployment/wsgi/uwsgi.txt:14
msgid ""
"The uWSGI docs offer a `tutorial`_ covering Django, nginx, and uWSGI (one "
"possible deployment setup of many). The docs below are focused on how to "
"integrate Django with uWSGI."
msgstr ""

# 505c04d7cfce40e2b41813d30157e504
#: ../../howto/deployment/wsgi/uwsgi.txt:21
msgid "Prerequisite: uWSGI"
msgstr ""

# be77cd48a1364100a1acacf90df21ce0
#: ../../howto/deployment/wsgi/uwsgi.txt:23
msgid ""
"The uWSGI wiki describes several `installation procedures`_. Using pip, the "
"Python package manager, you can install any uWSGI version with a single "
"command. For example:"
msgstr ""

# 1b9fff75938a4f168a03c9ef369e4abd
#: ../../howto/deployment/wsgi/uwsgi.txt:39
msgid ""
"Some distributions, including Debian and Ubuntu, ship an outdated version of "
"uWSGI that does not conform to the WSGI specification. Versions prior to "
"1.2.6 do not call ``close`` on the response object after handling a request. "
"In those cases the :data:`~django.core.signals.request_finished` signal "
"isn't sent. This can result in idle connections to database and memcache "
"servers."
msgstr ""

# 2d62df840539450491876f1a63153c40
#: ../../howto/deployment/wsgi/uwsgi.txt:47
msgid "uWSGI model"
msgstr ""

# cffea69f085e486291c5168b74291175
#: ../../howto/deployment/wsgi/uwsgi.txt:40
msgid ""
"uWSGI operates on a client-server model. Your Web server (e.g., nginx, "
"Apache) communicates with a django-uwsgi \"worker\" process to serve dynamic "
"content. See uWSGI's `background documentation`_ for more detail."
msgstr ""

# 44e06c119495485297601ca214a20ee5
#: ../../howto/deployment/wsgi/uwsgi.txt:47
msgid "Configuring and starting the uWSGI server for Django"
msgstr ""

# c6907b39203b4a2e83d73c84b6d54639
#: ../../howto/deployment/wsgi/uwsgi.txt:49
msgid ""
"uWSGI supports multiple ways to configure the process. See uWSGI's "
"`configuration documentation`_ and `examples`_"
msgstr ""

# c292f99b1d2840fc88efdd1f9c5a85b7
#: ../../howto/deployment/wsgi/uwsgi.txt:55
msgid "Here's an example command to start a uWSGI server::"
msgstr ""

# 3cb787b8104745f9889094d09bbe7213
#: ../../howto/deployment/wsgi/uwsgi.txt:71
msgid ""
"This assumes you have a top-level project package named ``mysite``, and "
"within it a module :file:`mysite/wsgi.py` that contains a WSGI "
"``application`` object. This is the layout you'll have if you ran ``django-"
"admin.py startproject mysite`` (using your own project name in place of "
"``mysite``) with a recent version of Django. If this file doesn't exist, "
"you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` "
"documentation for the default contents you should put in this file and what "
"else you can add to it."
msgstr ""

# 46cc64e25e9c412eacb22feceea1f5e9
#: ../../howto/deployment/wsgi/uwsgi.txt:79
msgid "The Django-specific options here are:"
msgstr ""

# 50669c2c7f77438690733a407587ae7d
#: ../../howto/deployment/wsgi/uwsgi.txt:81
msgid ""
"``chdir``: The path to the directory that needs to be on Python's import "
"path -- i.e., the directory containing the ``mysite`` package."
msgstr ""

# ceed4c41e20b48eb9d031d5d0d4df45d
#: ../../howto/deployment/wsgi/uwsgi.txt:83
msgid ""
"``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module "
"that :djadmin:`startproject` creates."
msgstr ""

# 3a9c17fb119248c3ac917d8c4195edc1
#: ../../howto/deployment/wsgi/uwsgi.txt:85
msgid "``env``: Should probably contain at least ``DJANGO_SETTINGS_MODULE``."
msgstr ""

# a56f03e9ff5948e19f7ed015c6b45bae
#: ../../howto/deployment/wsgi/uwsgi.txt:86
msgid "``home``: Optional path to your project virtualenv."
msgstr ""

# 4865e806d4634dd19c5c758637e431c5
#: ../../howto/deployment/wsgi/uwsgi.txt:88
msgid "Example ini configuration file::"
msgstr ""

# 2da9596c21bb4d878dd555baea6ca42c
#: ../../howto/deployment/wsgi/uwsgi.txt:99
msgid "Example ini configuration file usage::"
msgstr ""

# 56654794dca9414ba4219d23b33080fb
#: ../../howto/deployment/wsgi/uwsgi.txt:112
msgid ""
"See the uWSGI docs on `managing the uWSGI process`_ for information on "
"starting, stopping and reloading the uWSGI workers."
msgstr ""

# b1a160c545664dce883cf00ea075cc41
#: ../../howto/error-reporting.txt:2
msgid "Error reporting"
msgstr ""

# cd8125b7f0064b0b817d855668345aa1
#: ../../howto/error-reporting.txt:4
msgid ""
"When you're running a public site you should always turn off the :setting:"
"`DEBUG` setting. That will make your server run much faster, and will also "
"prevent malicious users from seeing details of your application that can be "
"revealed by the error pages."
msgstr ""

# cd2a6751e6194422afb2d9ad07d2f43c
#: ../../howto/error-reporting.txt:9
msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will just see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr ""

# 3845569d3bcf4fd398ab4c0b79ed44ac
#: ../../howto/error-reporting.txt:15
msgid "Email reports"
msgstr ""

# ba57d962539943f892ce00af521580ad
#: ../../howto/error-reporting.txt:18
msgid "Server errors"
msgstr ""

# 6c075145367240399738333a665930e9
#: ../../howto/error-reporting.txt:20
msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (HTTP status code 500). "
"This gives the administrators immediate notification of any errors. The :"
"setting:`ADMINS` will get a description of the error, a complete Python "
"traceback, and details about the HTTP request that caused the error."
msgstr ""

# 7e253f2a4a654fe896c4743cc6a0466a
#: ../../howto/error-reporting.txt:29
msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify :"
"setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and :setting:"
"`EMAIL_HOST_PASSWORD`, though other settings may be also required depending "
"on your mail server's configuration. Consult :doc:`the Django settings "
"documentation </ref/settings>` for a full list of email-related settings."
msgstr ""

# 332e87e2b83e4a6d9d1beb6f32ee2979
#: ../../howto/error-reporting.txt:38
msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""

# 0c3779ad93aa4818a1810e8ad0aaec7b
#: ../../howto/error-reporting.txt:42
msgid ""
"To disable this behavior, just remove all entries from the :setting:`ADMINS` "
"setting."
msgstr ""

# ca2dd1623f774ae1beea21425b6b950c
#: ../../howto/error-reporting.txt:47
msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration </"
"topics/logging>`."
msgstr ""

# 2bc2a76a4ef74329a4e3c98f73ab0ff8
#: ../../howto/error-reporting.txt:52
msgid "404 errors"
msgstr ""

# 962743bc32df4b329fc6c7b4a3164572
#: ../../howto/error-reporting.txt:54
msgid ""
"Django can also be configured to email errors about broken links (404 \"page "
"not found\" errors). Django sends emails about 404 errors when:"
msgstr ""

# 6cdcf87f54ce401e9061c86dfb715f76
#: ../../howto/error-reporting.txt:57
msgid ":setting:`DEBUG` is ``False``"
msgstr ""

# e717d49d46c740c3addb12fa7412cb37
#: ../../howto/error-reporting.txt:59
msgid ":setting:`SEND_BROKEN_LINK_EMAILS` is ``True``"
msgstr ""

# 1a5d4f71b0454dabbff3b8d103f0a90f
#: ../../howto/error-reporting.txt:61
msgid ""
"Your :setting:`MIDDLEWARE_CLASSES` setting includes ``CommonMiddleware`` "
"(which it does by default)."
msgstr ""

# 2bba42b57b0049d184380e019ae60b85
#: ../../howto/error-reporting.txt:64
msgid ""
"If those conditions are met, Django will email the users listed in the :"
"setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. (It doesn't bother to email for 404s that don't have a "
"referer -- those are usually just people typing in broken URLs or broken Web "
"'bots)."
msgstr ""

# 7533967ccede4a1bb9c36bc295a35f48
#: ../../howto/error-reporting.txt:69
msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the :"
"setting:`IGNORABLE_404_URLS` setting. It should be a tuple of compiled "
"regular expression objects. For example::"
msgstr ""

# 0e4e90ab92c14db6b08bc8e8fe7da9b6
#: ../../howto/error-reporting.txt:79
msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""

# b912b7d03ce445d6bd96d2c908eb5ad4
#: ../../howto/error-reporting.txt:82
msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr ""

# 2ce6c476b2fa4adcac27f3e8196a66c6
#: ../../howto/error-reporting.txt:92
msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr ""

# 787b766f23b244f4803ea8177b0d8e00
#: ../../howto/error-reporting.txt:95
msgid ""
"The best way to disable this behavior is to set :setting:"
"`SEND_BROKEN_LINK_EMAILS` to ``False``."
msgstr ""

# 44b9e53077ae45e098f02dc56d11a770
#: ../../howto/error-reporting.txt:100
msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""

# b751b8db455145dba79ab658255509c2
#: ../../howto/error-reporting.txt:108
msgid ""
"Previously, two settings were used to control which URLs not to report: :"
"setting:`IGNORABLE_404_STARTS` and :setting:`IGNORABLE_404_ENDS`. They were "
"replaced by :setting:`IGNORABLE_404_URLS`."
msgstr ""

# ec2d16f0b9c4482a8ec96d4be8972f09
#: ../../howto/error-reporting.txt:115
msgid "Filtering error reports"
msgstr ""

# ed3ff94650694f0b80b063cfc3b7c1bb
#: ../../howto/error-reporting.txt:120
msgid "Filtering sensitive information"
msgstr ""

# 5ac8002e0a0d40b790c9ca524fccca36
#: ../../howto/error-reporting.txt:122
msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_'s local variables, and the :"
"class:`~django.http.HttpRequest`'s :ref:`attributes<httprequest-attributes>`."
msgstr ""

# 09b9386342f74ca3832555e3cd248417
#: ../../howto/error-reporting.txt:128
msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So Django offers a set of function "
"decorators to help you control which information should be filtered out of "
"error reports in a production environment (that is, where :setting:`DEBUG` "
"is set to ``False``): :func:`sensitive_variables` and :func:"
"`sensitive_post_parameters`."
msgstr ""

# a876767f32a44784909d28b0db1d9b3b
#: ../../howto/error-reporting.txt:140
msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr ""

# 10f5091bd54d489eb660d9997bd5ef66
#: ../../howto/error-reporting.txt:154
msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (`**********`) in the error "
"reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

# 1b2874792fd44e18a2b6d91a449414aa
#: ../../howto/error-reporting.txt:159
msgid ""
"To systematically hide all local variables of a function from error logs, do "
"not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""

# 844430242d72456d8a86842331c9ef5e
#: ../../howto/error-reporting.txt:168
msgid "When using mutiple decorators"
msgstr ""

# 3150cc9ee1914dbd8b1d7df7aebf5466
#: ../../howto/error-reporting.txt:170
msgid ""
"If the variable you want to hide is also a function argument (e.g. "
"'``user``' in the following example), and if the decorated function has "
"mutiple decorators, then make sure to place ``@sensitive_variables`` at the "
"top of the decorator chain. This way it will also hide the function argument "
"as it gets passed through the other decorators::"
msgstr ""

# fbc99f7bd6a64ccb939d4e051ec06dac
#: ../../howto/error-reporting.txt:182
msgid ""
"If one of your views receives an :class:`~django.http.HttpRequest` object "
"with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to "
"contain sensitive information, you may prevent the values of those "
"parameters from being included in the error reports using the "
"``sensitive_post_parameters`` decorator::"
msgstr ""

# 5b7d6bb4506a47bdaf6df7a2c83c48a9
#: ../../howto/error-reporting.txt:198
msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (`**********`) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

# 3a3ce924a75b47b0acec35ad536233f7
#: ../../howto/error-reporting.txt:203
msgid ""
"To systematically hide all POST parameters of a request in error reports, do "
"not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""

# afd6d919b7994e4c85df287163b80309
#: ../../howto/error-reporting.txt:214
msgid ""
"Since version 1.4, all POST parameters are systematically filtered out of "
"error reports for certain :mod:`django.contrib.auth.views` views "
"( ``login``, ``password_reset_confirm``, ``password_change``, and "
"``add_view`` and ``user_change_password`` in the ``auth`` admin) to prevent "
"the leaking of sensitive information such as user passwords."
msgstr ""

# cc316bc277554055806ff9dfd2685f29
#: ../../howto/error-reporting.txt:223
msgid "Custom error reports"
msgstr ""

# 058d5972426f4d23ba0678ac0747fee7
#: ../../howto/error-reporting.txt:225
msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is, "
"respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: :class:`django.views.debug."
"SafeExceptionReporterFilter`. This filter uses the decorators' annotations "
"to replace the corresponding values with stars (`**********`) when the error "
"reports are produced. If you wish to override or customize this default "
"behavior for your entire site, you need to define your own filter class and "
"tell Django to use it via the :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` "
"setting::"
msgstr ""

# 3aaa87bcdf334521a03180bcdd376c02
#: ../../howto/error-reporting.txt:240
msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``'s ``exception_reporter_filter`` "
"attribute::"
msgstr ""

# 12448c632f9d410fac62656f117e3a51
#: ../../howto/error-reporting.txt:249
msgid ""
"Your custom filter class needs to inherit from :class:`django.views.debug."
"SafeExceptionReporterFilter` and may override the following methods:"
msgstr ""

# 8333a7d499b04c9a9f9187054fe1bce9
#: ../../howto/error-reporting.txt:257
msgid ""
"Returns ``True`` to activate the filtering operated in the other methods. By "
"default the filter is active if :setting:`DEBUG` is ``False``."
msgstr ""

# e6e11f0d67474505bb794c6d8623c820
#: ../../howto/error-reporting.txt:262
msgid ""
"Returns the representation string of the request object, that is, the value "
"that would be returned by ``repr(request)``, except it uses the filtered "
"dictionary of POST parameters as determined by :meth:"
"`SafeExceptionReporterFilter.get_post_parameters`."
msgstr ""

# 00316757748b4eb997018553c8c7fffd
#: ../../howto/error-reporting.txt:269
msgid ""
"Returns the filtered dictionary of POST parameters. By default it replaces "
"the values of sensitive parameters with stars (`**********`)."
msgstr ""

# 520a872860f348aebd332fea4ed5fe2c
#: ../../howto/error-reporting.txt:274
msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. By default it replaces the values of sensitive variables with stars "
"(`**********`)."
msgstr ""

# b64e6a36a6814d7ba4ba0759335054c9
#: ../../howto/error-reporting.txt:280
msgid ""
"You can also set up custom error reporting by writing a custom piece of :ref:"
"`exception middleware <exception-middleware>`. If you do write custom error "
"handling, it's a good idea to emulate Django's built-in error handling and "
"only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""

# 175111c308bd442db265fb128087965a
#: ../../howto/index.txt:2
msgid "\"How-to\" guides"
msgstr ""

# 2ab865e827c444acb279408d049e0016
#: ../../howto/index.txt:4
msgid ""
"Here you'll find short answers to \"How do I....?\" types of questions. "
"These how-to guides don't cover topics in depth -- you'll find that material "
"in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these guides "
"will help you quickly accomplish common tasks."
msgstr ""

# 5899f53447b9496083455e0e303d3d7a
#: ../../howto/index.txt:30
msgid ""
"The `Django community aggregator`_, where we aggregate content from the "
"global Django community. Many writers in the aggregator write this sort of "
"how-to material."
msgstr ""

# 028989ed718a477697e76b2b13a60003
#: ../../howto/initial-data.txt:3
msgid "Providing initial data for models"
msgstr ""

# ad6abbf6903847a7abccd1eb95bb53b7
#: ../../howto/initial-data.txt:5
msgid ""
"It's sometimes useful to pre-populate your database with hard-coded data "
"when you're first setting up an app. There's a couple of ways you can have "
"Django automatically create this data: you can provide `initial data via "
"fixtures`_, or you can provide `initial data as SQL`_."
msgstr ""

# 04216fe24a8d49bd8ccabf80e5e61abf
#: ../../howto/initial-data.txt:10
msgid ""
"In general, using a fixture is a cleaner method since it's database-"
"agnostic, but initial SQL is also quite a bit more flexible."
msgstr ""

# dca288fb9296474a89f261a6cef6046c
#: ../../howto/initial-data.txt:19
msgid "Providing initial data with fixtures"
msgstr ""

# d25a970e92484cc99d3540f40b1cce92
#: ../../howto/initial-data.txt:21
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. The most straightforward way of creating a fixture if you've "
"already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>` "
"command. Or, you can write fixtures by hand; fixtures can be written as XML, "
"YAML, or JSON documents. The :doc:`serialization documentation </topics/"
"serialization>` has more details about each of these supported :ref:"
"`serialization formats <serialization-formats>`."
msgstr ""

# eb90758f0594488bab2cac9343301255
#: ../../howto/initial-data.txt:29
msgid ""
"As an example, though, here's what a fixture for a simple ``Person`` model "
"might look like in JSON:"
msgstr ""

# 204a7309ee4848bb8f52791834b14b9a
#: ../../howto/initial-data.txt:53
msgid "And here's that same fixture as YAML:"
msgstr ""

# 080f879d505944778c19dcd103cbd50e
#: ../../howto/initial-data.txt:68
msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""

# 808c5fb052274028a8805359b195360f
#: ../../howto/initial-data.txt:70
msgid ""
"Loading data is easy: just call :djadmin:`manage.py loaddata <loaddata>` "
"``<fixturename>``, where ``<fixturename>`` is the name of the fixture file "
"you've created. Each time you run :djadmin:`loaddata`, the data will be read "
"from the fixture and re-loaded into the database. Note this means that if "
"you change one of the rows created by a fixture and then run :djadmin:"
"`loaddata` again, you'll wipe out any changes you've made."
msgstr ""

# 08ef674af0d24cb6910929ce7244d2e9
#: ../../howto/initial-data.txt:78
msgid "Automatically loading initial data fixtures"
msgstr ""

# 9aab9bf0b54b42028d1a057bbba1b75c
#: ../../howto/initial-data.txt:80
msgid ""
"If you create a fixture named ``initial_data.[xml/yaml/json]``, that fixture "
"will be loaded every time you run :djadmin:`syncdb`. This is extremely "
"convenient, but be careful: remember that the data will be refreshed *every "
"time* you run :djadmin:`syncdb`. So don't use ``initial_data`` for data "
"you'll want to edit."
msgstr ""

# 46fc5a6c14c34469bea058e6adc0180b
#: ../../howto/initial-data.txt:86
msgid "Where Django finds fixture files"
msgstr ""

# fe685a1ab50147fcb02c001120844734
#: ../../howto/initial-data.txt:88
msgid ""
"By default, Django looks in the ``fixtures`` directory inside each app for "
"fixtures. You can set the :setting:`FIXTURE_DIRS` setting to a list of "
"additional directories where Django should look."
msgstr ""

# 4a64226f962d4b4780e24dd5e637fb0e
#: ../../howto/initial-data.txt:92
msgid ""
"When running :djadmin:`manage.py loaddata <loaddata>`, you can also specify "
"an absolute path to a fixture file, which overrides searching the usual "
"directories."
msgstr ""

# 35b8afd3e34740c9a6cd28f9406bea16
#: ../../howto/initial-data.txt:98
msgid ""
"Fixtures are also used by the :ref:`testing framework <topics-testing-"
"fixtures>` to help set up a consistent test environment."
msgstr ""

# adaf0257b1674df4ac45d7daf9c96093
#: ../../howto/initial-data.txt:104
msgid "Providing initial SQL data"
msgstr ""

# 0df2fdd33efb4d618614314fe1a99914
#: ../../howto/initial-data.txt:106
msgid ""
"Django provides a hook for passing the database arbitrary SQL that's "
"executed just after the CREATE TABLE statements when you run :djadmin:"
"`syncdb`. You can use this hook to populate default records, or you could "
"also create SQL functions, views, triggers, etc."
msgstr ""

# 1f5a728448f0453c848e54df655d5fdb
#: ../../howto/initial-data.txt:111
msgid ""
"The hook is simple: Django just looks for a file called ``sql/<modelname>."
"sql``, in your app directory, where ``<modelname>`` is the model's name in "
"lowercase."
msgstr ""

# 3350b0a152f4481091a266d2088122d8
#: ../../howto/initial-data.txt:114
msgid ""
"So, if you had a ``Person`` model in an app called ``myapp``, you could add "
"arbitrary SQL to the file ``sql/person.sql`` inside your ``myapp`` "
"directory. Here's an example of what the file might contain:"
msgstr ""

# 89b49285d3c443f8b8d9e30143635184
#: ../../howto/initial-data.txt:123
msgid ""
"Each SQL file, if given, is expected to contain valid SQL statements which "
"will insert the desired data (e.g., properly-formatted ``INSERT`` statements "
"separated by semicolons)."
msgstr ""

# 16826c69a4964e92aa7888e894fce116
#: ../../howto/initial-data.txt:127
msgid ""
"The SQL files are read by the :djadmin:`sqlcustom` and :djadmin:`sqlall` "
"commands in :doc:`manage.py </ref/django-admin>`. Refer to the :doc:`manage."
"py documentation </ref/django-admin>` for more information."
msgstr ""

# 6b46371837c34fe9a9e7325b72603635
#: ../../howto/initial-data.txt:131
msgid ""
"Note that if you have multiple SQL data files, there's no guarantee of the "
"order in which they're executed. The only thing you can assume is that, by "
"the time your custom data files are executed, all the database tables "
"already will have been created."
msgstr ""

# b0e3700d481741038b5ec58a8693e652
#: ../../howto/initial-data.txt:136
msgid "Initial SQL data and testing"
msgstr ""

# 6eddbd2be90a41f28f50d91200f03f11
#: ../../howto/initial-data.txt:138
msgid ""
"This technique *cannot* be used to provide initial data for testing "
"purposes. Django's test framework flushes the contents of the test database "
"after each test; as a result, any data added using the custom SQL hook will "
"be lost."
msgstr ""

# b6d9a0bdedbe470a91ce51243d1e8fde
#: ../../howto/initial-data.txt:143
msgid ""
"If you require data for a test case, you should add it using either a :ref:"
"`test fixture <topics-testing-fixtures>`, or programatically add it during "
"the ``setUp()`` of your test case."
msgstr ""

# 5d221db5680349f7808236df1bd5d247
#: ../../howto/initial-data.txt:148
msgid "Database-backend-specific SQL data"
msgstr ""

# 7316bc5666f44d59af3950797fe9d35d
#: ../../howto/initial-data.txt:150
msgid ""
"There's also a hook for backend-specific SQL data. For example, you can have "
"separate initial-data files for PostgreSQL and SQLite. For each app, Django "
"looks for a file called ``<appname>/sql/<modelname>.<backend>.sql``, where "
"``<appname>`` is your app directory, ``<modelname>`` is the model's name in "
"lowercase and ``<backend>`` is the last part of the module name provided for "
"the :setting:`ENGINE <DATABASE-ENGINE>` in your settings file (e.g., if you "
"have defined a database with an :setting:`ENGINE <DATABASE-ENGINE>` value of "
"``django.db.backends.sqlite3``, Django will look for ``<appname>/sql/"
"<modelname>.sqlite3.sql``)."
msgstr ""

# b750b61dda9e46c78ee615ec2d68b8f9
#: ../../howto/initial-data.txt:161
msgid ""
"Backend-specific SQL data is executed before non-backend-specific SQL data. "
"For example, if your app contains the files ``sql/person.sql`` and ``sql/"
"person.sqlite3.sql`` and you're installing the app on SQLite, Django will "
"execute the contents of ``sql/person.sqlite3.sql`` first, then ``sql/person."
"sql``."
msgstr ""

# 5ecf6067a2df498588cc4775756e4ae4
#: ../../howto/jython.txt:3
msgid "Running Django on Jython"
msgstr ""

# 373d43ebee8c4138871d15042ffae30c
#: ../../howto/jython.txt:7
msgid "Python 2.6 support"
msgstr ""

# 2fa2aa5fc12c43709ae3b55be7106009
#: ../../howto/jython.txt:9
msgid ""
"Django 1.5 has dropped support for Python 2.5. Therefore, you have to use a "
"Jython 2.7 alpha release if you want to use Django 1.5 with Jython. Please "
"use Django 1.4 if you want to keep using Django on a stable Jython version."
msgstr ""

# ef500a64438f425e900f383b82351d13
#: ../../howto/jython.txt:14
msgid ""
"Jython_ is an implementation of Python that runs on the Java platform (JVM). "
"Django runs cleanly on Jython version 2.5 or later, which means you can "
"deploy Django on any Java platform."
msgstr ""

# 178c84e705414c8c8b86eb674c0e5f7f
#: ../../howto/jython.txt:18
msgid "This document will get you up and running with Django on top of Jython."
msgstr ""

# dbd58596e05e4d2a82703c84224b2fb3
#: ../../howto/jython.txt:23
msgid "Installing Jython"
msgstr ""

# a2871ff089424fd488202d153db20bec
#: ../../howto/jython.txt:25
msgid ""
"Django works with Jython versions 2.5b3 and higher. Download Jython at "
"http://www.jython.org/."
msgstr ""

# 5b6d9ffbfd544d9582fc0badb661d10b
#: ../../howto/jython.txt:29
msgid "Creating a servlet container"
msgstr ""

# 9f7e58df1b944961bedaad64b7f34793
#: ../../howto/jython.txt:31
msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight Web server you can use for testing, so you "
"won't need to set up anything else until you're ready to deploy Django in "
"production."
msgstr ""

# 974c817fd4184b139aeeb0ac7d255421
#: ../../howto/jython.txt:35
msgid ""
"If you want to use Django on a production site, use a Java servlet "
"container, such as `Apache Tomcat`_. Full JavaEE applications servers such "
"as `GlassFish`_ or `JBoss`_ are also OK, if you need the extra features they "
"include."
msgstr ""

# 3d06350780684021962e9f6255ae6d17
#: ../../howto/jython.txt:44
msgid "Installing Django"
msgstr ""

# edc4bc9b11b34070804bab0a4974b722
#: ../../howto/jython.txt:46
msgid ""
"The next step is to install Django itself. This is exactly the same as "
"installing Django on standard Python, so see :ref:`removing-old-versions-of-"
"django` and :ref:`install-django-code` for instructions."
msgstr ""

# b6db467b4e64491cb216f3ad4c1f502e
#: ../../howto/jython.txt:52
msgid "Installing Jython platform support libraries"
msgstr ""

# 5303da62d7ab4ad0acb835c3c507da08
#: ../../howto/jython.txt:54
msgid ""
"The `django-jython`_ project contains database backends and management "
"commands for Django/Jython development. Note that the builtin Django "
"backends won't work on top of Jython."
msgstr ""

# 3456b8f2d7b64f85af92d0570913e71e
#: ../../howto/jython.txt:60
msgid ""
"To install it, follow the `installation instructions`_ detailed on the "
"project Web site. Also, read the `database backends`_ documentation there."
msgstr ""

# 0be1982796b64a90b2660bc3069ca126
#: ../../howto/jython.txt:67
msgid "Differences with Django on Jython"
msgstr ""

# d12489d61a294aa0ab267117dd8560d1
#: ../../howto/jython.txt:71
msgid ""
"At this point, Django on Jython should behave nearly identically to Django "
"running on standard Python. However, are a few differences to keep in mind:"
msgstr ""

# 277c8c50046d43c4a1fdbe78eb8fec26
#: ../../howto/jython.txt:74
msgid ""
"Remember to use the ``jython`` command instead of ``python``. The "
"documentation uses ``python`` for consistency, but if you're using Jython "
"you'll want to mentally replace ``python`` with ``jython`` every time it "
"occurs."
msgstr ""

# 7e05c6762ca74df9baef5346b2caddc2
#: ../../howto/jython.txt:79
msgid ""
"Similarly, you'll need to use the ``JYTHONPATH`` environment variable "
"instead of ``PYTHONPATH``."
msgstr ""

# cb8dde65156f4787b46ecfaf0e988d5c
#: ../../howto/jython.txt:5
msgid "Jython"
msgstr ""

# cb8dde65156f4787b46ecfaf0e988d5c
#: ../../howto/jython.txt:5
msgid "Java"
msgstr ""

# cb8dde65156f4787b46ecfaf0e988d5c
#: ../../howto/jython.txt:5
msgid "JVM"
msgstr ""

# 22387ed97083419780aca185a6199152
#: ../../howto/jython.txt:69
msgid "JYTHONPATH"
msgstr ""

# 508c2a2cc8ca458a83c1d6c0367ecc88
#: ../../howto/legacy-databases.txt:3
msgid "Integrating Django with a legacy database"
msgstr ""

# 99f26430933e41a29c2ccedb7047af39
#: ../../howto/legacy-databases.txt:5
msgid ""
"While Django is best suited for developing new applications, it's quite "
"possible to integrate it into legacy databases. Django includes a couple of "
"utilities to automate as much of this process as possible."
msgstr ""

# 5c0a26805d28478e868b7afb33d237e0
#: ../../howto/legacy-databases.txt:9
msgid ""
"This document assumes you know the Django basics, as covered in the :doc:"
"`tutorial </intro/tutorial01>`."
msgstr ""

# 85b057047c054aeab4fb6ed156262cc1
#: ../../howto/legacy-databases.txt:12
msgid ""
"Once you've got Django set up, you'll follow this general process to "
"integrate with an existing database."
msgstr ""

# 345ee23fb66f405fb616d22892e4764a
#: ../../howto/legacy-databases.txt:16
msgid "Give Django your database parameters"
msgstr ""

# 1ee039edfef04d11b1ffae8a4a362eba
#: ../../howto/legacy-databases.txt:18
msgid ""
"You'll need to tell Django what your database connection parameters are, and "
"what the name of the database is. Do that by editing the :setting:"
"`DATABASES` setting and assigning values to the following keys for the "
"``'default'`` connection:"
msgstr ""

# 3f721eff6f0f49d4b0e0b682fe6451ce
#: ../../howto/legacy-databases.txt:23
msgid ":setting:`NAME`"
msgstr ""

# 66a1fb3e64374bd59fb5818c5cd13f57
#: ../../howto/legacy-databases.txt:24
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ""

# c0ab9666d1e847b78340d188c29a86a2
#: ../../howto/legacy-databases.txt:25
msgid ":setting:`USER`"
msgstr ""

# 62ed6dd6e8b040979ac547501bbd5d33
#: ../../howto/legacy-databases.txt:26
msgid ":setting:`PASSWORD`"
msgstr ""

# dd8a6daffad34defb2db2f58fa78b22e
#: ../../howto/legacy-databases.txt:27
msgid ":setting:`HOST`"
msgstr ""

# 964e41231c254d8cac8c0cf5f9a5aaf6
#: ../../howto/legacy-databases.txt:28
msgid ":setting:`PORT`"
msgstr ""

# d97bed4b4c2e42d28a45a14c78893df7
#: ../../howto/legacy-databases.txt:31
msgid "Auto-generate the models"
msgstr ""

# ac4ee11c55a74a1380fe7c46c1a09586
#: ../../howto/legacy-databases.txt:35
msgid ""
"Django comes with a utility called :djadmin:`inspectdb` that can create "
"models by introspecting an existing database. You can view the output by "
"running this command::"
msgstr ""

# 1f68f101bd6d44dc8783d91eba6e3ef2
#: ../../howto/legacy-databases.txt:41
msgid "Save this as a file by using standard Unix output redirection::"
msgstr ""

# e318aae29be646388df5ce92fd6a5cbd
#: ../../howto/legacy-databases.txt:45
msgid ""
"This feature is meant as a shortcut, not as definitive model generation. See "
"the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""

# f006de14a54c49e0b35efde5946d755b
#: ../../howto/legacy-databases.txt:48
msgid ""
"Once you've cleaned up your models, name the file ``models.py`` and put it "
"in the Python package that holds your app. Then add the app to your :setting:"
"`INSTALLED_APPS` setting."
msgstr ""

# fca1225fbb764e4eb407d1e6faf35a64
#: ../../howto/legacy-databases.txt:53
msgid "Install the core Django tables"
msgstr ""

# 1500e6cc112f4081ac8f37373582a05a
#: ../../howto/legacy-databases.txt:55
msgid ""
"Next, run the :djadmin:`syncdb` command to install any extra needed database "
"records such as admin permissions and content types::"
msgstr ""

# a97c18f50c53467b9082427e03806044
#: ../../howto/legacy-databases.txt:61
msgid "Test and tweak"
msgstr ""

# 79af3e31977a4d699307261d9f283560
#: ../../howto/legacy-databases.txt:63
msgid ""
"Those are the basic steps -- from here you'll want to tweak the models "
"Django generated until they work the way you'd like. Try accessing your data "
"via the Django database API, and try editing objects via Django's admin "
"site, and edit the models file accordingly."
msgstr ""

# 1f79e431c0914d36af613412d033883f
#: ../../howto/outputting-csv.txt:3
msgid "Outputting CSV with Django"
msgstr ""

# a159472497cb4c6ab7cf7329eabd6d7c
#: ../../howto/outputting-csv.txt:5
msgid ""
"This document explains how to output CSV (Comma Separated Values) "
"dynamically using Django views. To do this, you can either use the Python "
"CSV library or the Django template system."
msgstr ""

# 835b87faaa4a4acdb561efb9a2713483
#: ../../howto/outputting-csv.txt:10
msgid "Using the Python CSV library"
msgstr ""

# e5f14d0a9fba443b8389d96e8dd6e867
#: ../../howto/outputting-csv.txt:12
msgid ""
"Python comes with a CSV library, :mod:`csv`. The key to using it with Django "
"is that the :mod:`csv` module's CSV-creation capability acts on file-like "
"objects, and Django's :class:`~django.http.HttpResponse` objects are file-"
"like objects."
msgstr ""

# 2bdbfd612f4043d6bc351c6e896a5a07
#: ../../howto/outputting-csv.txt:16
msgid "Here's an example::"
msgstr ""

# acd9859ee36c465e8da0ba7ca4e3e09c
# e79f4c198970474e8d6af7ab4df48cf4
#: ../../howto/outputting-csv.txt:32 ../../howto/outputting-pdf.txt:69
msgid ""
"The code and comments should be self-explanatory, but a few things deserve a "
"mention:"
msgstr ""

# 9f2b3d8a0d48405c913ca4b37972224f
#: ../../howto/outputting-csv.txt:35
msgid ""
"The response gets a special MIME type, :mimetype:`text/csv`. This tells "
"browsers that the document is a CSV file, rather than an HTML file. If you "
"leave this off, browsers will probably interpret the output as HTML, which "
"will result in ugly, scary gobbledygook in the browser window."
msgstr ""

# 92e688ee59c64756a184f83f35cbb9bf
#: ../../howto/outputting-csv.txt:40
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the CSV file. This filename is arbitrary; call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, "
"etc."
msgstr ""

# 6874eb1f14f940bc972fba1be7a97bf7
#: ../../howto/outputting-csv.txt:45
msgid ""
"Hooking into the CSV-generation API is easy: Just pass ``response`` as the "
"first argument to ``csv.writer``. The ``csv.writer`` function expects a file-"
"like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

# 0e198204aa644047800965b794bb7caa
#: ../../howto/outputting-csv.txt:50
msgid ""
"For each row in your CSV file, call ``writer.writerow``, passing it an "
"iterable object such as a list or tuple."
msgstr ""

# 87517c61ba2c4f56b4840a5e1ac45f73
#: ../../howto/outputting-csv.txt:53
msgid ""
"The CSV module takes care of quoting for you, so you don't have to worry "
"about escaping strings with quotes or commas in them. Just pass "
"``writerow()`` your raw strings, and it'll do the right thing."
msgstr ""

# e70844ebb3cc49a8bd3709f97c608fa1
#: ../../howto/outputting-csv.txt:58
msgid "Handling Unicode"
msgstr ""

# 6033989057ef4b4ea152a1a460bcd848
#: ../../howto/outputting-csv.txt:60
msgid ""
"Python's :mod:`csv` module does not support Unicode input. Since Django uses "
"Unicode internally this means strings read from sources such as :class:"
"`~django.http.HttpRequest` are potentially problematic. There are a few "
"options for handling this:"
msgstr ""

# 54a9c10f8c8d4f22858446f9edc0a7cd
#: ../../howto/outputting-csv.txt:65
msgid "Manually encode all Unicode objects to a compatible encoding."
msgstr ""

# 53279289e757404ba7206e45dc844f55
#: ../../howto/outputting-csv.txt:67
msgid ""
"Use the ``UnicodeWriter`` class provided in the `csv module's examples "
"section`_."
msgstr ""

# 2cf08150aecd4752a878ce0b6e05bca0
#: ../../howto/outputting-csv.txt:70
msgid ""
"Use the `python-unicodecsv module`_, which aims to be a drop-in replacement "
"for :mod:`csv` that gracefully handles Unicode."
msgstr ""

# d270681719824c1b86f965b9b322edb0
#: ../../howto/outputting-csv.txt:73
msgid ""
"For more information, see the Python documentation of the :mod:`csv` module."
msgstr ""

# d276f4ae84154be3b5acf9b9e647f827
#: ../../howto/outputting-csv.txt:79
msgid "Using the template system"
msgstr ""

# 04b0f5ad8f854fc2b80bcdde2f2542ee
#: ../../howto/outputting-csv.txt:81
msgid ""
"Alternatively, you can use the :doc:`Django template system </topics/"
"templates>` to generate CSV. This is lower-level than using the convenient "
"Python :mod:`csv` module, but the solution is presented here for "
"completeness."
msgstr ""

# a36cc5f83553438dac6d91c9f4e398db
#: ../../howto/outputting-csv.txt:85
msgid ""
"The idea here is to pass a list of items to your template, and have the "
"template output the commas in a :ttag:`for` loop."
msgstr ""

# 3eada9fb2a3f4803b053f2edd8c582af
#: ../../howto/outputting-csv.txt:88
msgid "Here's an example, which generates the same CSV file as above::"
msgstr ""

# 3b97bc6103d74988b18a9220e6910f34
#: ../../howto/outputting-csv.txt:112
msgid ""
"The only difference between this example and the previous example is that "
"this one uses template loading instead of the CSV module. The rest of the "
"code -- such as the ``content_type='text/csv'`` -- is the same."
msgstr ""

# 28166999a9e9416ab1adb7168eee9107
#: ../../howto/outputting-csv.txt:116
msgid ""
"Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""

# 8489bbc7be084558a6ae6a691aac22fc
#: ../../howto/outputting-csv.txt:123
msgid ""
"This template is quite basic. It just iterates over the given data and "
"displays a line of CSV for each row. It uses the :tfilter:`addslashes` "
"template filter to ensure there aren't any problems with quotes."
msgstr ""

# ccf04822bce844ea88db134904b13055
#: ../../howto/outputting-csv.txt:128
msgid "Other text-based formats"
msgstr ""

# e54414cb4ccd4cb89d3059ca783d8e89
#: ../../howto/outputting-csv.txt:130
msgid ""
"Notice that there isn't very much specific to CSV here -- just the specific "
"output format. You can use either of these techniques to output any text-"
"based format you can dream of. You can also use a similar technique to "
"generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an "
"example."
msgstr ""

# 3cf0df487e1744ca8cdd82b8ac06fab7
#: ../../howto/outputting-pdf.txt:3
msgid "Outputting PDFs with Django"
msgstr ""

# c91d23af24f144149f8aaef9ae07512e
#: ../../howto/outputting-pdf.txt:5
msgid ""
"This document explains how to output PDF files dynamically using Django "
"views. This is made possible by the excellent, open-source ReportLab_ Python "
"PDF library."
msgstr ""

# 6d0a121330554ff9ac07516ed1b72557
#: ../../howto/outputting-pdf.txt:9
msgid ""
"The advantage of generating PDF files dynamically is that you can create "
"customized PDFs for different purposes -- say, for different users or "
"different pieces of content."
msgstr ""

# eba9981c17f242dbb9fae77eb2dabe7c
#: ../../howto/outputting-pdf.txt:13
msgid ""
"For example, Django was used at kusports.com_ to generate customized, "
"printer-friendly NCAA tournament brackets, as PDF files, for people "
"participating in a March Madness contest."
msgstr ""

# e487a5ef9a6049daa1f79de57a2225ad
#: ../../howto/outputting-pdf.txt:21
msgid "Install ReportLab"
msgstr ""

# 9a915307bce54e9da741ec9645eb1149
#: ../../howto/outputting-pdf.txt:23
msgid ""
"Download and install the ReportLab library from http://www.reportlab.com/"
"software/opensource/rl-toolkit/download/. The `user guide`_ (not "
"coincidentally, a PDF file) explains how to install it. Alternatively, you "
"can also install it with ``pip``:"
msgstr ""

# 686303bcf76942f0b144fe4002561b18
#: ../../howto/outputting-pdf.txt:32
msgid ""
"Test your installation by importing it in the Python interactive "
"interpreter::"
msgstr ""

# 3215e4e792044a62add324125887743e
#: ../../howto/outputting-pdf.txt:36
msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""

# 497060084b12478da96137c2f5360c52
#: ../../howto/outputting-pdf.txt:41
msgid "Write your view"
msgstr ""

# 6105bdc7e94847c0a8f70f473c1966ed
#: ../../howto/outputting-pdf.txt:43
msgid ""
"The key to generating PDFs dynamically with Django is that the ReportLab API "
"acts on file-like objects, and Django's :class:`~django.http.HttpResponse` "
"objects are file-like objects."
msgstr ""

# 0c23d6ce78e14f6391506a89961f673f
#: ../../howto/outputting-pdf.txt:47
msgid "Here's a \"Hello World\" example::"
msgstr ""

# d4c8da2b414f4944adab6aa5e13c402a
#: ../../howto/outputting-pdf.txt:72
msgid ""
"The response gets a special MIME type, :mimetype:`application/pdf`. This "
"tells browsers that the document is a PDF file, rather than an HTML file. If "
"you leave this off, browsers will probably interpret the output as HTML, "
"which would result in ugly, scary gobbledygook in the browser window."
msgstr ""

# c0f72f490a724dbea67584eb94c733f8
#: ../../howto/outputting-pdf.txt:78
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the PDF file. This filename is arbitrary: Call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, "
"etc."
msgstr ""

# 9d1642ca8b5349a0a07691c031122c42
#: ../../howto/outputting-pdf.txt:83
msgid ""
"The ``Content-Disposition`` header starts with ``'attachment; '`` in this "
"example. This forces Web browsers to pop-up a dialog box prompting/"
"confirming how to handle the document even if a default is set on the "
"machine. If you leave off ``'attachment;'``, browsers will handle the PDF "
"using whatever program/plugin they've been configured to use for PDFs. "
"Here's what that code would look like::"
msgstr ""

# 52df2ba46f134b7a8ad6724c95dbeace
#: ../../howto/outputting-pdf.txt:92
msgid ""
"Hooking into the ReportLab API is easy: Just pass ``response`` as the first "
"argument to ``canvas.Canvas``. The ``Canvas`` class expects a file-like "
"object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

# de1e93af9a1448afb1050ed961b198c6
#: ../../howto/outputting-pdf.txt:97
msgid ""
"Note that all subsequent PDF-generation methods are called on the PDF object "
"(in this case, ``p``) -- not on ``response``."
msgstr ""

# 97412e3de0874681b3a27901e4c10949
#: ../../howto/outputting-pdf.txt:100
msgid ""
"Finally, it's important to call ``showPage()`` and ``save()`` on the PDF "
"file."
msgstr ""

# 4c436067e8c44336a8ff76aebe175c16
#: ../../howto/outputting-pdf.txt:105
msgid ""
"ReportLab is not thread-safe. Some of our users have reported odd issues "
"with building PDF-generating Django views that are accessed by many people "
"at the same time."
msgstr ""

# b994f708a1b346d3b068976ffab72eeb
#: ../../howto/outputting-pdf.txt:110
msgid "Complex PDFs"
msgstr ""

# da5b37400e4c4d199ca4733855f80ae6
#: ../../howto/outputting-pdf.txt:112
msgid ""
"If you're creating a complex PDF document with ReportLab, consider using "
"the :mod:`io` library as a temporary holding place for your PDF file. This "
"library provides a file-like object interface that is particularly "
"efficient. Here's the above \"Hello World\" example rewritten to use :mod:"
"`io`::"
msgstr ""

# 29886788f81a4bd6a8b60aa05c140790
#: ../../howto/outputting-pdf.txt:146
msgid "Further resources"
msgstr ""

# 0daf92c443184fc691ded914a3860fdf
#: ../../howto/outputting-pdf.txt:148
msgid ""
"PDFlib_ is another PDF-generation library that has Python bindings. To use "
"it with Django, just use the same concepts explained in this article."
msgstr ""

# da26983904f34debafe921394a1eee70
#: ../../howto/outputting-pdf.txt:150
msgid ""
"`Pisa XHTML2PDF`_ is yet another PDF-generation library. Pisa ships with an "
"example of how to integrate Pisa with Django."
msgstr ""

# d408795c1a044cc2a95654f160be2997
#: ../../howto/outputting-pdf.txt:152
msgid ""
"HTMLdoc_ is a command-line script that can convert HTML to PDF. It doesn't "
"have a Python interface, but you can escape out to the shell using "
"``system`` or ``popen`` and retrieve the output in Python."
msgstr ""

# 4393c3985a2c4eb29a2934b0127d6ae9
#: ../../howto/outputting-pdf.txt:161
msgid "Other formats"
msgstr ""

# 0e12cff174df45968ec02f0d7cb274e3
#: ../../howto/outputting-pdf.txt:163
msgid ""
"Notice that there isn't a lot in these examples that's PDF-specific -- just "
"the bits using ``reportlab``. You can use a similar technique to generate "
"any arbitrary format that you can find a Python library for. Also see :doc:`/"
"howto/outputting-csv` for another example and some techniques you can use "
"when generated text-based formats."
msgstr ""

# 1f255b650a9244129d6dacc70ca376f9
#: ../../howto/static-files/deployment.txt:3
msgid "Deploying static files"
msgstr ""

# 8f227e44c73747998f7a4712912b791a
#: ../../howto/static-files/deployment.txt:7
msgid ""
"For an introduction to the use of :mod:`django.contrib.staticfiles`, see :"
"doc:`/howto/static-files/index`."
msgstr ""

# e0b065c69ffc4527a39d75fac3fcfdda
#: ../../howto/static-files/deployment.txt:13
msgid "Serving static files in production"
msgstr ""

# a9df9c87b4f64368b1b494c9010d9be5
#: ../../howto/static-files/deployment.txt:15
msgid ""
"The basic outline of putting static files into production is simple: run "
"the :djadmin:`collectstatic` command when static files change, then arrange "
"for the collected static files directory (:setting:`STATIC_ROOT`) to be "
"moved to the static file server and served. Depending on :setting:"
"`STATICFILES_STORAGE`, files may need to be moved to a new location manually "
"or the :func:`post_process <django.contrib.staticfiles.storage."
"StaticFilesStorage.post_process>` method of the ``Storage`` class might take "
"care of that."
msgstr ""

# 48fd992f4d614ec7b9b69f4cb4ea7329
#: ../../howto/static-files/deployment.txt:23
msgid ""
"Of course, as with all deployment tasks, the devil's in the details. Every "
"production setup will be a bit different, so you'll need to adapt the basic "
"outline to fit your needs. Below are a few common patterns that might help."
msgstr ""

# 401e78a065d94e1f82dda8461fc21b4f
#: ../../howto/static-files/deployment.txt:28
msgid "Serving the site and your static files from the same server"
msgstr ""

# bbc48240663943c582f52fccec4eb807
#: ../../howto/static-files/deployment.txt:30
msgid ""
"If you want to serve your static files from the same server that's already "
"serving your site, the process may look something like:"
msgstr ""

# 3cba184f179c46e099e2a0ce57491735
#: ../../howto/static-files/deployment.txt:33
msgid "Push your code up to the deployment server."
msgstr ""

# ab0d9cc421f34c6782bfa45e286f6e4c
#: ../../howto/static-files/deployment.txt:34
msgid ""
"On the server, run :djadmin:`collectstatic` to copy all the static files "
"into :setting:`STATIC_ROOT`."
msgstr ""

# 7c2c95d37ca9483d8150e52cacced607
#: ../../howto/static-files/deployment.txt:36
msgid ""
"Configure your web server to serve the files in :setting:`STATIC_ROOT` under "
"the URL :setting:`STATIC_URL`. For example, here's :ref:`how to do this with "
"Apache and mod_wsgi <serving-files>`."
msgstr ""

# ec226ffaedba40cc85db0c6750834fee
#: ../../howto/static-files/deployment.txt:40
msgid ""
"You'll probably want to automate this process, especially if you've got "
"multiple web servers. There's any number of ways to do this automation, but "
"one option that many Django developers enjoy is `Fabric <http://fabfile.org/"
">`_."
msgstr ""

# fc02024580534346b2041e37f47b1d6e
#: ../../howto/static-files/deployment.txt:45
msgid ""
"Below, and in the following sections, we'll show off a few example fabfiles "
"(i.e. Fabric scripts) that automate these file deployment options. The "
"syntax of a fabfile is fairly straightforward but won't be covered here; "
"consult `Fabric's documentation <http://docs.fabfile.org/>`_, for a complete "
"explanation of the syntax."
msgstr ""

# a41ad300dfe24d13aca48b29ee1f2c34
#: ../../howto/static-files/deployment.txt:51
msgid ""
"So, a fabfile to deploy static files to a couple of web servers might look "
"something like::"
msgstr ""

# 864c3cbb6a1b48ce8e77d2bcd185c3d9
#: ../../howto/static-files/deployment.txt:67
msgid "Serving static files from a dedicated server"
msgstr ""

# b6758ee55e644a4f9717b49216b2ab03
#: ../../howto/static-files/deployment.txt:69
msgid ""
"Most larger Django sites use a separate Web server -- i.e., one that's not "
"also running Django -- for serving static files. This server often runs a "
"different type of web server -- faster but less full-featured. Some common "
"choices are:"
msgstr ""

# 6fc7fac2846543eb945fbbc7a5320686
#: ../../howto/static-files/deployment.txt:85
msgid ""
"Configuring these servers is out of scope of this document; check each "
"server's respective documentation for instructions."
msgstr ""

# 2fa570504e4e4ab6891995ef43e012ea
#: ../../howto/static-files/deployment.txt:88
msgid ""
"Since your static file server won't be running Django, you'll need to modify "
"the deployment strategy to look something like:"
msgstr ""

# cd15e5b3a78340eeb7c7c85685a12974
#: ../../howto/static-files/deployment.txt:91
msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""

# 94f1793a3c3e48deb98a8bd61febdb0c
#: ../../howto/static-files/deployment.txt:93
msgid ""
"Push your local :setting:`STATIC_ROOT` up to the static file server into the "
"directory that's being served. `rsync <https://rsync.samba.org/>`_ is a "
"common choice for this step since it only needs to transfer the bits of "
"static files that have changed."
msgstr ""

# aebae313d2a144858f83a725313e45f9
#: ../../howto/static-files/deployment.txt:98
msgid "Here's how this might look in a fabfile::"
msgstr ""

# 58c073c46bfb4268bbd141eb40359951
#: ../../howto/static-files/deployment.txt:121
msgid "Serving static files from a cloud service or CDN"
msgstr ""

# 8a32a93311ca4c3484c67c647ab9aa9c
#: ../../howto/static-files/deployment.txt:123
msgid ""
"Another common tactic is to serve static files from a cloud storage provider "
"like Amazon's S3 and/or a CDN (content delivery network). This lets you "
"ignore the problems of serving static files and can often make for faster-"
"loading webpages (especially when using a CDN)."
msgstr ""

# 0048c83e7d994b4a89af206b261c669b
#: ../../howto/static-files/deployment.txt:128
msgid ""
"When using these services, the basic workflow would look a bit like the "
"above, except that instead of using ``rsync`` to transfer your static files "
"to the server you'd need to transfer the static files to the storage "
"provider or CDN."
msgstr ""

# 86a7ddf9c1a841fe843aa874ba5cd651
#: ../../howto/static-files/deployment.txt:132
msgid ""
"There's any number of ways you might do this, but if the provider has an API "
"a :doc:`custom file storage backend </howto/custom-file-storage>` will make "
"the process incredibly simple. If you've written or are using a 3rd party "
"custom storage backend, you can tell :djadmin:`collectstatic` to use it by "
"setting :setting:`STATICFILES_STORAGE` to the storage engine."
msgstr ""

# 26b56dcd524d4ae29a978c7ebb5cee97
#: ../../howto/static-files/deployment.txt:138
msgid ""
"For example, if you've written an S3 storage backend in ``myproject.storage."
"S3Storage`` you could use it with::"
msgstr ""

# c5bee1893ed34be8a347b26efa01046a
#: ../../howto/static-files/deployment.txt:143
msgid ""
"Once that's done, all you have to do is run :djadmin:`collectstatic` and "
"your static files would be pushed through your storage package up to S3. If "
"you later needed to switch to a different storage provider, it could be as "
"simple as changing your :setting:`STATICFILES_STORAGE` setting."
msgstr ""

# 7f651497d5f24154b3165fca4335c90f
#: ../../howto/static-files/deployment.txt:148
msgid ""
"For details on how you'd write one of these backends, see :doc:`/howto/"
"custom-file-storage`. There are 3rd party apps available that provide "
"storage backends for many common file storage APIs. A good starting point is "
"the `overview at djangopackages.com <https://www.djangopackages.com/grids/g/"
"storage-backends/>`_."
msgstr ""

# c28651f6c9c6402c8061006054ddbf59
# 6a9cfa32714a4931a216bae2653255be
#: ../../howto/static-files/deployment.txt:155
#: ../../howto/static-files/index.txt:126
msgid "Learn more"
msgstr ""

# d0ae0f8c0f5d427ca97b0ed7277f1888
#: ../../howto/static-files/deployment.txt:157
msgid ""
"For complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

# a298d23fcd94472f9a512705428d1bd5
#: ../../howto/static-files/index.txt:3
msgid "Managing static files (CSS, images)"
msgstr ""

# cbc105aed693448d9856466ec617c5e2
#: ../../howto/static-files/index.txt:5
msgid ""
"Websites generally need to serve additional files such as images, "
"JavaScript, or CSS. In Django, we refer to these files as \"static files\".  "
"Django provides :mod:`django.contrib.staticfiles` to help you manage them."
msgstr ""

# 7ac96c74086d4363a6534e755dcc1866
#: ../../howto/static-files/index.txt:9
msgid "This page describes how you can serve these static files."
msgstr ""

# 2b3d752bcb2c47dea84793fa990eec55
#: ../../howto/static-files/index.txt:12
msgid "Configuring static files"
msgstr ""

# 29fbbca994894f4288926a0d0fe190f1
#: ../../howto/static-files/index.txt:14
msgid ""
"Make sure that ``django.contrib.staticfiles`` is included in your :setting:"
"`INSTALLED_APPS`."
msgstr ""

# c45edb0892e0454aa243c40c613ddb3b
#: ../../howto/static-files/index.txt:17
msgid "In your settings file, define :setting:`STATIC_URL`, for example::"
msgstr ""

# e8d3ea5272dd49f99dc0bc0ebc78272e
#: ../../howto/static-files/index.txt:21
msgid ""
"In your templates, either hardcode the url like ``/static/my_app/myexample."
"jpg`` or, preferably, use the :ttag:`static<staticfiles-static>` template "
"tag to build the URL for the given relative path by using the configured :"
"setting:`STATICFILES_STORAGE` storage (this makes it much easier when you "
"want to switch to a content delivery network (CDN) for serving static files)."
msgstr ""

# 8fc7fa0c48a349adace223ce8b1af924
#: ../../howto/static-files/index.txt:35
msgid ""
"Store your static files in a folder called ``static`` in your app. For "
"example ``my_app/static/my_app/myimage.jpg``."
msgstr ""

# b2416dbb32264676ae6d6f64c9ed3cd8
#: ../../howto/static-files/index.txt:38
msgid "Serving the files"
msgstr ""

# a82d0377270a4384a34f4732ba979d08
#: ../../howto/static-files/index.txt:40
msgid ""
"In addition to these configuration steps, you'll also need to actually serve "
"the static files."
msgstr ""

# 5d1ae80c5c6b4213a4da85642043054d
#: ../../howto/static-files/index.txt:43
msgid ""
"During development, this will be done automatically if you use :djadmin:"
"`runserver` and :setting:`DEBUG` is set to ``True`` (see :func:`django."
"contrib.staticfiles.views.serve`)."
msgstr ""

# 6e3cf795cb47446a83dea0d7f0a31ca3
#: ../../howto/static-files/index.txt:47
msgid ""
"This method is **grossly inefficient** and probably **insecure**, so it is "
"**unsuitable for production**."
msgstr ""

# 79b54b6679c04993bb9155162ac86a1b
#: ../../howto/static-files/index.txt:50
msgid ""
"See :doc:`/howto/static-files/deployment` for proper strategies to serve "
"static files in production environments."
msgstr ""

# 7c9b5c1faf214d0bbbb228ec7b5e28cc
#: ../../howto/static-files/index.txt:53
msgid ""
"Your project will probably also have static assets that aren't tied to a "
"particular app. In addition to using a ``static/`` directory inside your "
"apps, you can define a list of directories (:setting:`STATICFILES_DIRS`) in "
"your settings file where Django will also look for static files. For "
"example::"
msgstr ""

# fc7344d7a70a4cfd9ab0a979b64f6c22
#: ../../howto/static-files/index.txt:63
msgid ""
"See the documentation for the :setting:`STATICFILES_FINDERS` setting for "
"details on how ``staticfiles`` finds your files."
msgstr ""

# 1ee6651774354691bacdfcec14b87f16
#: ../../howto/static-files/index.txt:66
msgid "Static file namespacing"
msgstr ""

# 993d6ef40098428e9071e1ed69548083
#: ../../howto/static-files/index.txt:68
msgid ""
"Now we *might* be able to get away with putting our static files directly in "
"``my_app/static/`` (rather than creating another ``my_app`` subdirectory), "
"but it would actually be a bad idea. Django will use the first static file "
"it finds whose name matches, and if you had a static file with the same name "
"in a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"static files inside *another* directory named for the application itself."
msgstr ""

# 9126eebc78c6422e85c994d2c7e7c844
#: ../../howto/static-files/index.txt:80
msgid "Serving files uploaded by a user"
msgstr ""

# 3779c3b9f5814940bc69b3c6d87f2402
#: ../../howto/static-files/index.txt:82
msgid ""
"During development, you can serve user-uploaded media files from :setting:"
"`MEDIA_ROOT` using the :func:`django.contrib.staticfiles.views.serve` view. "
"This is not suitable for production use! For some common deployment "
"strategies, see :doc:`/howto/static-files/deployment`."
msgstr ""

# 198ed1c5c5cb4df8b28d1158606ee3e1
#: ../../howto/static-files/index.txt:87
msgid ""
"For example, if your :setting:`MEDIA_URL` is defined as '/media/', you can "
"do this by adding the following snippet to your urls.py::"
msgstr ""

# 82c84a50e03441818702833790094ec6
#: ../../howto/static-files/index.txt:99
msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/static/``) and not a URL (e.g. ``http://static.example.com/"
"``)."
msgstr ""

# f127bcda0cd548e793fd40bcac69eb19
# d81e87797c984022a7e2f7e443871190
#: ../../howto/static-files/index.txt:104 ../../howto/upgrade-version.txt:87
msgid "Deployment"
msgstr ""

# 699ec9934c92458ba412cdd7dc7a7992
#: ../../howto/static-files/index.txt:106
msgid ""
":mod:`django.contrib.staticfiles` provides a convenience management command "
"for gathering static files in a single directory so you can serve them "
"easily."
msgstr ""

# 0aed1c60f99c4a6dafe8e032cc53075f
#: ../../howto/static-files/index.txt:109
msgid ""
"Set the :setting:`STATIC_ROOT` setting to the directory from which you'd "
"like to serve these files, for example::"
msgstr ""

# b5bda817d2e94720b5e6b3adb656ae60
#: ../../howto/static-files/index.txt:114
msgid "Run the :djadmin:`collectstatic` management command::"
msgstr ""

# e8c7972747aa416e91c35a9e530f3930
#: ../../howto/static-files/index.txt:118
msgid ""
"This will copy all files from your static folders into the :setting:"
"`STATIC_ROOT` directory."
msgstr ""

# 9b5f45db642b4a4390eea4397810ac9a
#: ../../howto/static-files/index.txt:121
msgid ""
"Use a webserver of your choice to serve the files. :doc:`/howto/static-files/"
"deployment` covers some common deployment strategies for static files."
msgstr ""

# b2f99da3b627474492af8d862a4d99dd
#: ../../howto/static-files/index.txt:128
msgid ""
"This document has covered the basics and some common usage patterns. For "
"complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

# eb5dabb136f040bda8cee538ddf14f44
#: ../../howto/upgrade-version.txt:3
msgid "Upgrading Django to a newer version"
msgstr ""

# f54bfb4500a046d0bf85a41d27350d71
#: ../../howto/upgrade-version.txt:5
msgid ""
"While it can be a complex process at times, upgrading to the latest Django "
"version has several benefits:"
msgstr ""

# 54c329bbd6d84d0aa09ba56b0dbff933
#: ../../howto/upgrade-version.txt:8
msgid "New features and improvements are added."
msgstr ""

# dd82a396e9fd4ab29377fc5fdb858701
#: ../../howto/upgrade-version.txt:9
msgid "Bugs are fixed."
msgstr ""

# 61efe2c581c548d1ab5a83598f438b7f
#: ../../howto/upgrade-version.txt:10
msgid ""
"Older version of Django will eventually no longer receive security updates. "
"(see :ref:`backwards-compatibility-policy`)."
msgstr ""

# 1669c32680ee4340973ffbf2966d7563
#: ../../howto/upgrade-version.txt:12
msgid ""
"Upgrading as each new Django release is available makes future upgrades less "
"painful by keeping your code base up to date."
msgstr ""

# 2d7babe4db1e43168dee421caa503ccf
#: ../../howto/upgrade-version.txt:15
msgid ""
"Here are some things to consider to help make your upgrade process as smooth "
"as possible."
msgstr ""

# 4726017b97554b129b8cadba95b3f53d
#: ../../howto/upgrade-version.txt:19
msgid "Required Reading"
msgstr ""

# 904188e1bdee45dab1e1f6fb0f3b865b
#: ../../howto/upgrade-version.txt:21
msgid ""
"If it's your first time doing an upgrade, it is useful to read the :doc:"
"`guide on the different release processes </internals/release-process>`."
msgstr ""

# e775e8fcaddb491b8193246105925b6b
#: ../../howto/upgrade-version.txt:24
msgid ""
"Afterwards, you should familiarize yourself with the changes that were made "
"in the new Django version(s):"
msgstr ""

# 76ba9c9327764f6d9145017aa87c569b
#: ../../howto/upgrade-version.txt:27
msgid ""
"Read the :doc:`release notes </releases/index>` for each 'final' release "
"from the one after your current Django version, up to and including the "
"version to which you plan to upgrade."
msgstr ""

# 98c8ec98670041628114a00d4bc913b6
#: ../../howto/upgrade-version.txt:30
msgid ""
"Look at the :doc:`deprecation timeline</internals/deprecation>` for the "
"relevant versions."
msgstr ""

# e4ab48a3b86c4303bcdd1d3e3bc4e909
#: ../../howto/upgrade-version.txt:33
msgid ""
"Pay particular attention to backwards incompatible changes to get a clear "
"idea of what will be needed for a successful upgrade."
msgstr ""

# 00e7e67ff45d4b9cad0102cff0c3cfa8
#: ../../howto/upgrade-version.txt:37
msgid "Dependencies"
msgstr ""

# 8a03c2b0c37948899c72f53cd990df3a
#: ../../howto/upgrade-version.txt:39
msgid ""
"In most cases it will be necessary to upgrade to the latest version of your "
"Django-related dependencies as well. If the Django version was recently "
"released or if some of your dependencies are not well-maintained, some of "
"your dependencies may not yet support the new Django version. In these cases "
"you may have to wait until new versions of your dependencies are released."
msgstr ""

# 5d251ecfcf354892aa70e17751b4e7e6
#: ../../howto/upgrade-version.txt:46
msgid "Installation"
msgstr ""

# a486d21f865141849cc4586e7f225454
#: ../../howto/upgrade-version.txt:48
msgid ""
"Once you're ready, it is time to :doc:`install the new Django version </"
"topics/install>`. If you are using virtualenv_ and it is a major upgrade, "
"you might want to set up a new environment with all the dependencies first."
msgstr ""

# ffc3a94ddc13425da40d9a3dbd488566
#: ../../howto/upgrade-version.txt:52
msgid ""
"Exactly which steps you will need to take depends on your installation "
"process. The most convenient way is to use pip_ with the ``--upgrade`` or ``-"
"U`` flag:"
msgstr ""

# 5f192f712fd44123828d12f431dd6321
#: ../../howto/upgrade-version.txt:59
msgid "pip_ also automatically uninstalls the previous version of Django."
msgstr ""

# 692165f2e12946cb85de1878c2509ed1
#: ../../howto/upgrade-version.txt:61
msgid ""
"If you use some other installation process, you might have to manually :ref:"
"`uninstall the old Django version <removing-old-versions-of-django>` and "
"should look at the complete installation instructions."
msgstr ""

# 74c61f12363340dfb595da6a95b92b02
#: ../../howto/upgrade-version.txt:69
msgid "Testing"
msgstr ""

# 85a921a5ee774608aa4778cc135e3c8a
#: ../../howto/upgrade-version.txt:71
msgid ""
"When the new environment is set up, :doc:`run the full test suite </topics/"
"testing/overview>` for your application. In Python 2.7+, deprecation "
"warnings are silenced by default. It is useful to turn the warnings on so "
"they are shown in the test output (you can also use the flag if you test "
"your app manually using ``manage.py runserver``):"
msgstr ""

# 6f4dba1cf717401c981aa9b49223df97
#: ../../howto/upgrade-version.txt:81
msgid ""
"After you have run the tests, fix any failures. While you have the release "
"notes fresh in your mind, it may also be a good time to take advantage of "
"new features in Django by refactoring your code to eliminate any deprecation "
"warnings."
msgstr ""

# 4c9ee4f137bd4c4eacd12cc24d06206f
#: ../../howto/upgrade-version.txt:89
msgid ""
"When you are sufficiently confident your app works with the new version of "
"Django, you're ready to go ahead and :doc:`deploy </howto/deployment/index>` "
"your upgraded Django project."
msgstr ""

# 5c8e7bfe182e4b35addbac79a08fd9c8
#: ../../howto/upgrade-version.txt:93
msgid ""
"If you are using caching provided by Django, you should consider clearing "
"your cache after upgrading. Otherwise you may run into problems, for "
"example, if you are caching pickled objects as these objects are not "
"guaranteed to be pickle-compatible across Django versions. A past instance "
"of incompatibility was caching pickled :class:`~django.http.HttpResponse` "
"objects, either directly or indirectly via the :func:`~django.views."
"decorators.cache.cache_page` decorator."
msgstr ""
