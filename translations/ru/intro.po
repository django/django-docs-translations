# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-04 09:46+0200\n"
"PO-Revision-Date: 2014-02-14 15:28+0500\n"
"Last-Translator: Vitaliy Dorokhin <seryimysh@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.6.4\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"Language: ru_RU\n"

# 17548582e3d94133b4b7463f61fd71d9
#: ../../intro/contributing.txt:3
msgid "Writing your first patch for Django"
msgstr ""

# 77cedbe94cb347fcb8eeb75e42a181b2
#: ../../intro/contributing.txt:6
msgid "Introduction"
msgstr ""

# dcefa08301dd413f95c29f10d77c40fc
#: ../../intro/contributing.txt:8
msgid ""
"Interested in giving back to the community a little? Maybe you've found a "
"bug in Django that you'd like to see fixed, or maybe there's a small feature "
"you want added."
msgstr ""

# fc7d17c01c51456dbd1e34eff9375f89
#: ../../intro/contributing.txt:12
msgid ""
"Contributing back to Django itself is the best way to see your own concerns "
"addressed. This may seem daunting at first, but it's really pretty simple. "
"We'll walk you through the entire process, so you can learn by example."
msgstr ""

# 67410acc08cb4dff900d14c6f0840125
#: ../../intro/contributing.txt:17
msgid "Who's this tutorial for?"
msgstr ""

# a2f93c18a94d45ccb9676b0d1fc556c1
#: ../../intro/contributing.txt:19
msgid ""
"For this tutorial, we expect that you have at least a basic understanding of "
"how Django works. This means you should be comfortable going through the "
"existing tutorials on :doc:`writing your first Django app</intro/"
"tutorial01>`. In addition, you should have a good understanding of Python "
"itself. But if you don't, `Dive Into Python`__ is a fantastic (and free) "
"online book for beginning Python programmers."
msgstr ""

# 2feb848cd38344afbd66240e7d312214
#: ../../intro/contributing.txt:26
msgid ""
"Those of you who are unfamiliar with version control systems and Trac will "
"find that this tutorial and its links include just enough information to get "
"started. However, you'll probably want to read some more about these "
"different tools if you plan on contributing to Django regularly."
msgstr ""

# c34b753b99134773aee4f871eb07fe7a
#: ../../intro/contributing.txt:31
msgid ""
"For the most part though, this tutorial tries to explain as much as "
"possible, so that it can be of use to the widest audience."
msgstr ""

# 55afd5586fc44471a970a292e7c64c07
# 4c2ab5c084874611a876d29aee3332c2
#: ../../intro/contributing.txt:34 ../../intro/tutorial01.txt:35
msgid "Where to get help:"
msgstr ""

# 5159d63b8f284e8aa99227c2d16569dc
#: ../../intro/contributing.txt:36
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-developers`__ or drop by `#django-dev on irc.freenode.net`__ to "
"chat with other Django users who might be able to help."
msgstr ""

# 6ba7b1c7f8244fa194408d32a094e593
#: ../../intro/contributing.txt:45
msgid "What does this tutorial cover?"
msgstr ""

# c07eb323f8aa4416b11becac2a6100a4
#: ../../intro/contributing.txt:47
msgid ""
"We'll be walking you through contributing a patch to Django for the first "
"time. By the end of this tutorial, you should have a basic understanding of "
"both the tools and the processes involved. Specifically, we'll be covering "
"the following:"
msgstr ""

# 876f282441cf4682825987961d43d2f3
#: ../../intro/contributing.txt:51
msgid "Installing Git."
msgstr ""

# ef2283011db648a2b6b6e886a9b781b1
#: ../../intro/contributing.txt:52
msgid "How to download a development copy of Django."
msgstr ""

# 6e77c0bb518840e2b35b1c9850672e96
#: ../../intro/contributing.txt:53
msgid "Running Django's test suite."
msgstr ""

# 35ed18ae90ce475c82ade26baee4f36d
#: ../../intro/contributing.txt:54
msgid "Writing a test for your patch."
msgstr ""

# 9b78e39eb19d450ca8c5cd9fd05de627
#: ../../intro/contributing.txt:55
msgid "Writing the code for your patch."
msgstr ""

# f28499f5239c4e9fa83018873680580e
#: ../../intro/contributing.txt:56
msgid "Testing your patch."
msgstr ""

# c711ed79cfd048f6b3ed3d37c48cb9a8
#: ../../intro/contributing.txt:57
msgid "Generating a patch file for your changes."
msgstr ""

# 62f851f1156e4ce0a1ca0e4e825f992f
#: ../../intro/contributing.txt:58
msgid "Where to look for more information."
msgstr ""

# 2107baf766f14fd0aad7d16b0010e36b
#: ../../intro/contributing.txt:60
msgid ""
"Once you're done with the tutorial, you can look through the rest of :doc:"
"`Django's documentation on contributing</internals/contributing/index>`. It "
"contains lots of great information and is a must read for anyone who'd like "
"to become a regular contributor to Django. If you've got questions, it's "
"probably got the answers."
msgstr ""

# 5cf17baaebaa4403993d2736f4a2fd9f
#: ../../intro/contributing.txt:67
msgid "Installing Git"
msgstr ""

# 12c9bd2bb3eb4295b2dddb4a244127a6
#: ../../intro/contributing.txt:69
msgid ""
"For this tutorial, you'll need Git installed to download the current "
"development version of Django and to generate patch files for the changes "
"you make."
msgstr ""

# 19d2299efeff4af68cf527e977c0eef0
#: ../../intro/contributing.txt:73
msgid ""
"To check whether or not you have Git installed, enter ``git`` into the "
"command line. If you get messages saying that this command could be found, "
"you'll have to download and install it, see `Git's download page`__."
msgstr ""

# 4b8f3de812fa4d9fa40818432b9d9597
#: ../../intro/contributing.txt:77
msgid ""
"If you're not that familiar with Git, you can always find out more about its "
"commands (once it's installed) by typing ``git help`` into the command line."
msgstr ""

# bc64e04e34424f3a8f5686813da1b967
#: ../../intro/contributing.txt:83
msgid "Getting a copy of Django's development version"
msgstr ""

# dc0b108c542f409bbc60d1e4830c0489
#: ../../intro/contributing.txt:85
msgid ""
"The first step to contributing to Django is to get a copy of the source "
"code. From the command line, use the ``cd`` command to navigate to the "
"directory where you'll want your local copy of Django to live."
msgstr ""

# 2453dad1084048009e1bb599e4cc9acf
#: ../../intro/contributing.txt:89
msgid ""
"Download the Django source code repository using the following command::"
msgstr ""

# b723f3a17e404a4dbf9c51e6cb6da56a
#: ../../intro/contributing.txt:95
msgid "For users who wish to use `virtualenv`__, you can use::"
msgstr ""

# 7690cbd0d8684d969a3e8346bbbf03c5
#: ../../intro/contributing.txt:99
msgid ""
"(where ``django`` is the directory of your clone that contains ``setup.py``) "
"to link your cloned checkout into a virtual environment. This is a great "
"option to isolate your development copy of Django from the rest of your "
"system and avoids potential package conflicts."
msgstr ""

# d91a61701c9148d6ac2daff1f605f56b
#: ../../intro/contributing.txt:107
msgid "Rolling back to a previous revision of Django"
msgstr ""

# 6aea40b224654411a20e54992d8235f6
#: ../../intro/contributing.txt:109
msgid ""
"For this tutorial, we'll be using `ticket #17549`__ as a case study, so "
"we'll rewind Django's version history in git to before that ticket's patch "
"was applied. This will allow us to go through all of the steps involved in "
"writing that patch from scratch, including running Django's test suite."
msgstr ""

# 6fd3d2c2eca443459eb5972d8ba35967
#: ../../intro/contributing.txt:114
msgid ""
"**Keep in mind that while we'll be using an older revision of Django's trunk "
"for the purposes of the tutorial below, you should always use the current "
"development revision of Django when working on your own patch for a ticket!**"
msgstr ""

# 0acc54a11b6e4ca88a8edce4494c5c0b
#: ../../intro/contributing.txt:120
msgid ""
"The patch for this ticket was written by Ulrich Petri, and it was applied to "
"Django as `commit ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__. Consequently, "
"we'll be using the revision of Django just prior to that, `commit "
"39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__."
msgstr ""

# d1d31b67965f49f0a80d4e9c8677cc59
#: ../../intro/contributing.txt:129
msgid ""
"Navigate into Django's root directory (that's the one that contains "
"``django``, ``docs``, ``tests``, ``AUTHORS``, etc.). You can then check out "
"the older revision of Django that we'll be using in the tutorial below::"
msgstr ""

# cc434395e66441e680b6d231dad51933
#: ../../intro/contributing.txt:136
msgid "Running Django's test suite for the first time"
msgstr ""

# f06de7b1316047f8bf36e0cb8ae1cf9c
#: ../../intro/contributing.txt:138
msgid ""
"When contributing to Django it's very important that your code changes don't "
"introduce bugs into other areas of Django.  One way to check that Django "
"still works after you make your changes is by running Django's test suite. "
"If all the tests still pass, then you can be reasonably sure that your "
"changes haven't completely broken Django. If you've never run Django's test "
"suite before, it's a good idea to run it once beforehand just to get "
"familiar with what its output is supposed to look like."
msgstr ""

# 1e4d6c3b733449a99c58275821087293
#: ../../intro/contributing.txt:146
msgid ""
"We can run the test suite by simply ``cd``-ing into the Django ``tests/`` "
"directory and, if you're using GNU/Linux, Mac OS X or some other flavor of "
"Unix, run::"
msgstr ""

# d93cdd47d0b848bcb0b4333d7d943032
#: ../../intro/contributing.txt:152
msgid ""
"If you're on Windows, the above should work provided that you are using "
"\"Git Bash\" provided by the default Git install. GitHub has a `nice "
"tutorial`__."
msgstr ""

# 4ee76de8c0f64ea6a3a7c91acf3ff807
#: ../../intro/contributing.txt:159
msgid ""
"If you're using ``virtualenv``, you can omit ``PYTHONPATH=..`` when running "
"the tests. This instructs Python to look for Django in the parent directory "
"of ``tests``. ``virtualenv`` puts your copy of Django on the ``PYTHONPATH`` "
"automatically."
msgstr ""

# d94519b573b940669af5cb28836009b6
#: ../../intro/contributing.txt:164
msgid ""
"Now sit back and relax. Django's entire test suite has over 4800 different "
"tests, so it can take anywhere from 5 to 15 minutes to run, depending on the "
"speed of your computer."
msgstr ""

# 776278b2115f41f099f7c8f8b591a172
#: ../../intro/contributing.txt:168
msgid ""
"While Django's test suite is running, you'll see a stream of characters "
"representing the status of each test as it's run. ``E`` indicates that an "
"error was raised during a test, and ``F`` indicates that a test's assertions "
"failed. Both of these are considered to be test failures. Meanwhile, ``x`` "
"and ``s`` indicated expected failures and skipped tests, respectively. Dots "
"indicate passing tests."
msgstr ""

# 006ab8b59a4742788d44ca8f37a77ea3
#: ../../intro/contributing.txt:175
msgid ""
"Skipped tests are typically due to missing external libraries required to "
"run the test; see :ref:`running-unit-tests-dependencies` for a list of "
"dependencies and be sure to install any for tests related to the changes you "
"are making (we won't need any for this tutorial)."
msgstr ""

# 08f43e3a60ed4941bc9ea765d5c60db2
#: ../../intro/contributing.txt:180
msgid ""
"Once the tests complete, you should be greeted with a message informing you "
"whether the test suite passed or failed. Since you haven't yet made any "
"changes to Django's code, the entire test suite **should** pass. If you get "
"failures or errors make sure you've followed all of the previous steps "
"properly. See :ref:`running-unit-tests` for more information."
msgstr ""

# 8576f818805e45709e47699bb906f7f6
#: ../../intro/contributing.txt:186
msgid ""
"Note that the latest Django trunk may not always be stable. When developing "
"against trunk, you can check `Django's continuous integration builds`__ to "
"determine if the failures are specific to your machine or if they are also "
"present in Django's official builds. If you click to view a particular "
"build, you can view the \"Configuration Matrix\" which shows failures broken "
"down by Python version and database backend."
msgstr ""

# ce9bf4b9e8dc4d728336a476ece8daa2
#: ../../intro/contributing.txt:197
msgid ""
"For this tutorial and the ticket we're working on, testing against SQLite is "
"sufficient, however, it's possible (and sometimes necessary) to :ref:`run "
"the tests using a different database <running-unit-tests-settings>`."
msgstr ""

# 73162dba581b42cb82ba005454a25080
#: ../../intro/contributing.txt:203
msgid "Writing some tests for your ticket"
msgstr ""

# f36ecdbcfb5c4f178045ce0d24c9f892
#: ../../intro/contributing.txt:205
msgid ""
"In most cases, for a patch to be accepted into Django it has to include "
"tests. For bug fix patches, this means writing a regression test to ensure "
"that the bug is never reintroduced into Django later on. A regression test "
"should be written in such a way that it will fail while the bug still exists "
"and pass once the bug has been fixed. For patches containing new features, "
"you'll need to include tests which ensure that the new features are working "
"correctly. They too should fail when the new feature is not present, and "
"then pass once it has been implemented."
msgstr ""

# 32b96357013d4124a813a992c668d703
#: ../../intro/contributing.txt:214
msgid ""
"A good way to do this is to write your new tests first, before making any "
"changes to the code. This style of development is called `test-driven "
"development`__ and can be applied to both entire projects and single "
"patches. After writing your tests, you then run them to make sure that they "
"do indeed fail (since you haven't fixed that bug or added that feature yet). "
"If your new tests don't fail, you'll need to fix them so that they do. After "
"all, a regression test that passes regardless of whether a bug is present is "
"not very helpful at preventing that bug from reoccurring down the road."
msgstr ""

# d9122636e36e47499d87223795522cb4
#: ../../intro/contributing.txt:223
msgid "Now for our hands-on example."
msgstr ""

# 57303baaee5d485c8fa131d7ba27885e
#: ../../intro/contributing.txt:228
msgid "Writing some tests for ticket #17549"
msgstr ""

# f5896159c96148c9b2661275dc8d114a
#: ../../intro/contributing.txt:230
msgid "`Ticket #17549`__ describes the following, small feature addition:"
msgstr ""

# 2cb59f22578648ca95712fa2ab27defb
#: ../../intro/contributing.txt:232
msgid ""
"It's useful for URLField to give you a way to open the URL; otherwise you "
"might as well use a CharField."
msgstr ""

# 12af7f2d4a4442afbc064094352f085b
#: ../../intro/contributing.txt:235
msgid ""
"In order to resolve this ticket, we'll add a ``render`` method to the "
"``AdminURLFieldWidget`` in order to display a clickable link above the input "
"widget. Before we make those changes though, we're going to write a couple "
"tests to verify that our modification functions correctly and continues to "
"function correctly in the future."
msgstr ""

# 5aaeebf2804442c5b8c013537aa4cdc3
#: ../../intro/contributing.txt:241
msgid ""
"Navigate to Django's ``tests/regressiontests/admin_widgets/`` folder and "
"open the ``tests.py`` file. Add the following code on line 269 right before "
"the ``AdminFileWidgetTest`` class::"
msgstr ""

# e0ce4e43d83b490d9b47079ef344b2a6
#: ../../intro/contributing.txt:275
msgid ""
"The new tests check to see that the ``render`` method we'll be adding works "
"correctly in a couple different situations."
msgstr ""

# edfbf530b56e44d8a7960177453a8114
#: ../../intro/contributing.txt:278
msgid "But this testing thing looks kinda hard..."
msgstr ""

# 89ce5106d1dc4294ac1444e9f4724082
#: ../../intro/contributing.txt:280
msgid ""
"If you've never had to deal with tests before, they can look a little hard "
"to write at first glance. Fortunately, testing is a *very* big subject in "
"computer programming, so there's lots of information out there:"
msgstr ""

# 203861d121434809aa13fdd0171b20f3
#: ../../intro/contributing.txt:284
msgid ""
"A good first look at writing tests for Django can be found in the "
"documentation on :doc:`Testing Django applications </topics/testing/"
"overview>`."
msgstr ""

# 81f1fb50e2ef400a83d4ed43d7d4416b
#: ../../intro/contributing.txt:286
msgid ""
"Dive Into Python (a free online book for beginning Python developers) "
"includes a great `introduction to Unit Testing`__."
msgstr ""

# ed456339101d46c585c99b062c0b283f
#: ../../intro/contributing.txt:288
msgid ""
"After reading those, if you want something a little meatier to sink your "
"teeth into, there's always the `Python unittest documentation`__."
msgstr ""

# 7b0415887283419d854b212b87963be3
#: ../../intro/contributing.txt:296
msgid "Running your new test"
msgstr ""

# 55f63050784d493ab3598f7ff97af41d
#: ../../intro/contributing.txt:298
msgid ""
"Remember that we haven't actually made any modifications to "
"``AdminURLFieldWidget`` yet, so our tests are going to fail. Let's run all "
"the tests in the ``model_forms_regress`` folder to make sure that's really "
"what happens. From the command line, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""

# ad2e03001263475a8201cba357479bac
#: ../../intro/contributing.txt:306
msgid ""
"If the tests ran correctly, you should see three failures corresponding to "
"each of the test methods we added. If all of the tests passed, then you'll "
"want to make sure that you added the new test shown above to the appropriate "
"folder and class."
msgstr ""

# f7f38fcde2f748a98b0f16ca7cd09dfc
#: ../../intro/contributing.txt:312
msgid "Writing the code for your ticket"
msgstr ""

# 32fede330b9344c9a0690691abd76a30
#: ../../intro/contributing.txt:314
msgid ""
"Next we'll be adding the functionality described in `ticket #17549`__ to "
"Django."
msgstr ""

# 6f2055a3eb4a465aa334c7c3bad72042
#: ../../intro/contributing.txt:317
msgid "Writing the code for ticket #17549"
msgstr ""

# eba8d3c87ce846b5b2a64c2356f4afa9
#: ../../intro/contributing.txt:319
msgid ""
"Navigate to the ``django/django/contrib/admin/`` folder and open the "
"``widgets.py`` file. Find the ``AdminURLFieldWidget`` class on line 302 and "
"add the following ``render`` method after the existing ``__init__`` method::"
msgstr ""

# 777d2d5c7f794415a36a0a06266af3fa
#: ../../intro/contributing.txt:336
msgid "Verifying your test now passes"
msgstr ""

# 42c55024410f4e65b39075321c23a68b
#: ../../intro/contributing.txt:338
msgid ""
"Once you're done modifying Django, we need to make sure that the tests we "
"wrote earlier pass, so we can see whether the code we wrote above is working "
"correctly. To run the tests in the ``admin_widgets`` folder, ``cd`` into the "
"Django ``tests/`` directory and run::"
msgstr ""

# 0de53a18c6be475aa73c4bfd76969a2b
#: ../../intro/contributing.txt:345
msgid ""
"Oops, good thing we wrote those tests! You should still see 3 failures with "
"the following exception::"
msgstr ""

# 4b912a7dc4a54dd8b35b88332bf817f1
#: ../../intro/contributing.txt:350
msgid ""
"We forgot to add the import for that method.  Go ahead and add the "
"``smart_urlquote`` import at the end of line 13 of ``django/contrib/admin/"
"widgets.py`` so it looks as follows::"
msgstr ""

# f25f3874f70543c192e034a5ca1caa12
#: ../../intro/contributing.txt:356
msgid ""
"Re-run the tests and everything should pass. If it doesn't, make sure you "
"correctly modified the ``AdminURLFieldWidget`` class as shown above and "
"copied the new tests correctly."
msgstr ""

# 46ee5cbf39dc4624a3dde61df9b6b219
#: ../../intro/contributing.txt:363
msgid "Running Django's test suite for the second time"
msgstr ""

# 3b68328a161745e1b29f38c40d7b0b59
#: ../../intro/contributing.txt:365
msgid ""
"Once you've verified that your patch and your test are working correctly, "
"it's a good idea to run the entire Django test suite just to verify that "
"your change hasn't introduced any bugs into other areas of Django. While "
"successfully passing the entire test suite doesn't guarantee your code is "
"bug free, it does help identify many bugs and regressions that might "
"otherwise go unnoticed."
msgstr ""

# b20fe5699b324e74ae6dabf58be3d0dd
#: ../../intro/contributing.txt:371
msgid ""
"To run the entire Django test suite, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""

# 286ffc191f7046b2be78fff8ac776da2
#: ../../intro/contributing.txt:376
msgid ""
"As long as you don't see any failures, you're good to go. Note that this fix "
"also made a `small CSS change`__ to format the new widget. You can make the "
"change if you'd like, but we'll skip it for now in the interest of brevity."
msgstr ""

# 9d3b3cfb6e4b4fb38cd0171cd5b3593d
#: ../../intro/contributing.txt:383
msgid "Writing Documentation"
msgstr ""

# ca6e96174cba4b24b44d00044d12937e
#: ../../intro/contributing.txt:385
msgid ""
"This is a new feature, so it should be documented.  Add the following on "
"line 925 of ``django/docs/ref/models/fields.txt`` beneath the existing docs "
"for ``URLField``::"
msgstr ""

# 82847a8cb08d4081ae60c7fd41ffe479
#: ../../intro/contributing.txt:394
msgid ""
"For more information on writing documentation, including an explanation of "
"what the ``versionadded`` bit is all about, see :doc:`/internals/"
"contributing/writing-documentation`. That page also includes an explanation "
"of how to build a copy of the documentation locally, so you can preview the "
"HTML that will be generated."
msgstr ""

# 3f3c50387a6641f4ae5a1e2f79be5ef7
#: ../../intro/contributing.txt:401
msgid "Generating a patch for your changes"
msgstr ""

# 98a26eeb6aca43ccb5a76c8fb714d98a
#: ../../intro/contributing.txt:403
msgid ""
"Now it's time to generate a patch file that can be uploaded to Trac or "
"applied to another copy of Django. To get a look at the content of your "
"patch, run the following command::"
msgstr ""

# 1a6339f9be554f20a379168ac3611f26
#: ../../intro/contributing.txt:409
msgid ""
"This will display the differences between your current copy of Django (with "
"your changes) and the revision that you initially checked out earlier in the "
"tutorial."
msgstr ""

# a3417f9ce6b7432e9365f0a530602f55
#: ../../intro/contributing.txt:413
msgid ""
"Once you're done looking at the patch, hit the ``q`` key to exit back to the "
"command line.  If the patch's content looked okay, you can run the following "
"command to save the patch file to your current working directory::"
msgstr ""

# 195f746c40fc4a2ca243d1104a9003f7
#: ../../intro/contributing.txt:419
msgid ""
"You should now have a file in the root Django directory called ``17549."
"diff``. This patch file contains all your changes and should look this:"
msgstr ""

# cae794b9aabf494a90d9cf28fca537e0
#: ../../intro/contributing.txt:513
msgid "So what do I do next?"
msgstr ""

# 5c0f38675c1749508663740df9a43075
#: ../../intro/contributing.txt:515
msgid ""
"Congratulations, you've generated your very first Django patch! Now that "
"you've got that under your belt, you can put those skills to good use by "
"helping to improve Django's codebase. Generating patches and attaching them "
"to Trac tickets is useful, however, since we are using git - adopting a "
"more :doc:`git oriented workflow </internals/contributing/writing-code/"
"working-with-git>` is recommended."
msgstr ""

# 62b2fbeb97f04ab0aef6397b617fe431
#: ../../intro/contributing.txt:522
msgid ""
"Since we never committed our changes locally, perform the following to get "
"your git branch back to a good starting point::"
msgstr ""

# 07378490899e4e98a90abb52b7281fd8
#: ../../intro/contributing.txt:529
msgid "More information for new contributors"
msgstr ""

# b1d09de0cdd94926822ae30af7cbce06
#: ../../intro/contributing.txt:531
msgid ""
"Before you get too into writing patches for Django, there's a little more "
"information on contributing that you should probably take a look at:"
msgstr ""

# 2cee5899e0e148ad807a461c0be765b4
#: ../../intro/contributing.txt:534
msgid ""
"You should make sure to read Django's documentation on :doc:`claiming "
"tickets and submitting patches </internals/contributing/writing-code/"
"submitting-patches>`. It covers Trac etiquette, how to claim tickets for "
"yourself, expected coding style for patches, and many other important "
"details."
msgstr ""

# 2b55eedbd9f14dd8a5c861231c483ad8
#: ../../intro/contributing.txt:539
msgid ""
"First time contributors should also read Django's :doc:`documentation for "
"first time contributors</internals/contributing/new-contributors/>`. It has "
"lots of good advice for those of us who are new to helping out with Django."
msgstr ""

# c17bc1181ef446c68bd604ce101a4196
#: ../../intro/contributing.txt:543
msgid ""
"After those, if you're still hungry for more information about contributing, "
"you can always browse through the rest of :doc:`Django's documentation on "
"contributing</internals/contributing/index>`. It contains a ton of useful "
"information and should be your first source for answering any questions you "
"might have."
msgstr ""

# f9c54c9471ec4cbfa8762521d981935d
#: ../../intro/contributing.txt:550
msgid "Finding your first real ticket"
msgstr ""

# 3b90152ada0e4b3bae386cd59cc53cc9
#: ../../intro/contributing.txt:552
msgid ""
"Once you've looked through some of that information, you'll be ready to go "
"out and find a ticket of your own to write a patch for. Pay special "
"attention to tickets with the \"easy pickings\" criterion. These tickets are "
"often much simpler in nature and are great for first time contributors.  "
"Once you're familiar with contributing to Django, you can move on to writing "
"patches for more difficult and complicated tickets."
msgstr ""

# b177e76145fb4b7db6ad5013fc34862d
#: ../../intro/contributing.txt:559
msgid ""
"If you just want to get started already (and nobody would blame you!), try "
"taking a look at the list of `easy tickets that need patches`__ and the "
"`easy tickets that have patches which need improvement`__. If you're "
"familiar with writing tests, you can also look at the list of `easy tickets "
"that need tests`__. Just remember to follow the guidelines about claiming "
"tickets that were mentioned in the link to Django's documentation on :doc:"
"`claiming tickets and submitting patches </internals/contributing/writing-"
"code/submitting-patches>`."
msgstr ""

# 903130208f694ada847e1a43cab63a1b
# 74cebba2451e450190c4326a7312400d
# 082b312606af426786192550154a5542
#: ../../intro/contributing.txt:573 ../../intro/tutorial05.txt:642
#: ../../intro/tutorial06.txt:117
msgid "What's next?"
msgstr ""

# 42e69ce114fc464097a9c45c1a629c32
#: ../../intro/contributing.txt:575
msgid ""
"After a ticket has a patch, it needs to be reviewed by a second set of eyes. "
"After uploading a patch or submitting a pull request, be sure to update the "
"ticket metadata by setting the flags on the ticket to say \"has patch\", "
"\"doesn't need tests\", etc, so others can find it for review. Contributing "
"doesn't necessarily always mean writing a patch from scratch. Reviewing "
"existing patches is also a very helpful contribution. See :doc:`/internals/"
"contributing/triaging-tickets` for details."
msgstr ""

# 7110773ebbec4adba64dc008e8cd0621
#: ../../intro/index.txt:2
msgid "Getting started"
msgstr ""

# 3f7cc9b2ddd941ae8e116cb4e8dce080
#: ../../intro/index.txt:4
msgid ""
"New to Django? Or to Web development in general? Well, you came to the right "
"place: read this material to quickly get up and running."
msgstr ""

# 0ea7062bbf3f48819e47e176a8f2159a
#: ../../intro/index.txt:24
msgid ""
"If you're new to Python_, you might want to start by getting an idea of what "
"the language is like. Django is 100% Python, so if you've got minimal "
"comfort with Python you'll probably get a lot more out of Django."
msgstr ""

# d26de972c8e84855adc13b6c7dc28d57
#: ../../intro/index.txt:28
msgid ""
"If you're new to programming entirely, you might want to start with this "
"`list of Python resources for non-programmers`_"
msgstr ""

# 16c4ed691f6c4061ab9ec03c4bc43d44
#: ../../intro/index.txt:31
msgid ""
"If you already know a few other languages and want to get up to speed with "
"Python quickly, we recommend `Dive Into Python`_ (also available in a `dead-"
"tree version`_). If that's not quite your style, there are quite a few other "
"`books about Python`_."
msgstr ""

# b41d12599aa5465daeae90c45077c041
#: ../../intro/install.txt:2
msgid "Quick install guide"
msgstr ""

# 2e5d4f4d29f74b03b352e5548a8abf45
#: ../../intro/install.txt:4
msgid ""
"Before you can use Django, you'll need to get it installed. We have a :doc:"
"`complete installation guide </topics/install>` that covers all the "
"possibilities; this guide will guide you to a simple, minimal installation "
"that'll work while you walk through the introduction."
msgstr ""

# 5bef229885b048f5ae1f248668a1e935
#: ../../intro/install.txt:10
msgid "Install Python"
msgstr ""

# f326433d443a4b279fcb856d24b75246
#: ../../intro/install.txt:12
msgid ""
"Being a Python Web framework, Django requires Python. It works with any "
"Python version from 2.6.5 to 2.7. It also features experimental support for "
"versions 3.2 and 3.3. All these versions of Python include a lightweight "
"database called SQLite_ so you won't need to set up a database just yet."
msgstr ""

# 1f895822124f477289ababb7f0348b70
#: ../../intro/install.txt:19
msgid ""
"Get Python at http://www.python.org. If you're running Linux or Mac OS X, "
"you probably already have it installed."
msgstr ""

# 4c96b4d6e4094e3d91fca32ac0edde6a
#: ../../intro/install.txt:22
msgid "Django on Jython"
msgstr ""

# b16ad799f68b4acdaa46a54ab4c3dbf5
#: ../../intro/install.txt:24
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

# a8bb4881050f40a78656386f457d508a
#: ../../intro/install.txt:29
msgid ""
"You can verify that Python is installed by typing ``python`` from your "
"shell; you should see something like::"
msgstr ""

# 933e5b67d14a40caa90e2d7a546b16df
#: ../../intro/install.txt:38
msgid "Set up a database"
msgstr ""

# b493b736ff6f4bcfa50cd0fe6bad26e0
#: ../../intro/install.txt:40
msgid ""
"This step is only necessary if you'd like to work with a \"large\" database "
"engine like PostgreSQL, MySQL, or Oracle. To install such a database, "
"consult the :ref:`database installation information <database-installation>`."
msgstr ""

# 2f5a1946f114427d8538cbe729016127
#: ../../intro/install.txt:45
msgid "Remove any old versions of Django"
msgstr ""

# c8cd0695154f43fda8393dab7625e696
#: ../../intro/install.txt:47
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to :ref:`uninstall the old Django version before installing "
"the new version <removing-old-versions-of-django>`."
msgstr ""

# b45706c87e334232b94440cbc67edd10
#: ../../intro/install.txt:52
msgid "Install Django"
msgstr ""

# dd5b1d46bd734cbf8a52b9cc9f62bdd5
#: ../../intro/install.txt:54
msgid "You've got three easy options to install Django:"
msgstr ""

# 35756a4c58044057b9e62922e8780e8c
#: ../../intro/install.txt:56
msgid ""
"Install a version of Django :doc:`provided by your operating system "
"distribution </misc/distributions>`. This is the quickest option for those "
"who have operating systems that distribute Django."
msgstr ""

# e37d20ea36014ba0a60beab19233c21a
#: ../../intro/install.txt:60
msgid ""
":ref:`Install an official release <installing-official-release>`. This is "
"the best approach for users who want a stable version number and aren't "
"concerned about running a slightly older version of Django."
msgstr ""

# 2b68d5da741840a085cb8d890c066c1b
#: ../../intro/install.txt:64
msgid ""
":ref:`Install the latest development version <installing-development-"
"version>`. This is best for users who want the latest-and-greatest features "
"and aren't afraid of running brand-new code."
msgstr ""

# 99098268416347baa2079a6fc9ffe626
#: ../../intro/install.txt:68
msgid ""
"Always refer to the documentation that corresponds to the version of Django "
"you're using!"
msgstr ""

# 1b2e9311154549a18e7b15e741598e34
#: ../../intro/install.txt:71
msgid ""
"If you do either of the first two steps, keep an eye out for parts of the "
"documentation marked **new in development version**. That phrase flags "
"features that are only available in development versions of Django, and they "
"likely won't work with an official release."
msgstr ""

# ec6861ed46774c88a2e6fdd44ac53ac0
#: ../../intro/install.txt:78
msgid "Verifying"
msgstr ""

# 77578798256b4412a4e7fbf413b3782d
#: ../../intro/install.txt:80
msgid ""
"To verify that Django can be seen by Python, type ``python`` from your "
"shell. Then at the Python prompt, try to import Django:"
msgstr ""

# e3acd19344c5439184a32eff28cdc2fb
#: ../../intro/install.txt:89
msgid "You may have another version of Django installed."
msgstr ""

# 90f0deb788564dab935d71ebcb74e60b
#: ../../intro/install.txt:92
msgid "That's it!"
msgstr ""

# 020d9fc362e04b3096d24ad7bd3b963b
#: ../../intro/install.txt:94
msgid ""
"That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr ""

# 8a3a4919fabc453b9ef6fd5fd98c298c
#: ../../intro/overview.txt:3
msgid "Django at a glance"
msgstr ""

# 2c9d977978a24f8f99643146f8e77c76
#: ../../intro/overview.txt:5
msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common Web-development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven Web app with Django."
msgstr ""

# d2e5f22244a447b19f18932de3f70671
#: ../../intro/overview.txt:9
msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right "
"into more detailed documentation </topics/index>`."
msgstr ""

# 6c34338b3ccc450a88692324c912bf55
#: ../../intro/overview.txt:16
msgid "Design your model"
msgstr ""

# 684f92a2ccd44a2dac1fd71ac0cbe57f
#: ../../intro/overview.txt:18
msgid ""
"Although you can use Django without a database, it comes with an `object-"
"relational mapper`_ in which you describe your database layout in Python "
"code."
msgstr ""

# 2d8f0660b7cf4a4199bb3caed5e3a74b
#: ../../intro/overview.txt:24
msgid ""
"The :doc:`data-model syntax </topics/db/models>` offers many rich ways of "
"representing your models -- so far, it's been solving two years' worth of "
"database-schema problems. Here's a quick example, which might be saved in "
"the file ``mysite/news/models.py``::"
msgstr ""

# 0476a499ab4249e8985779e25272c177
#: ../../intro/overview.txt:47
msgid "Install it"
msgstr ""

# 1ff90b2318474dfc90f267547ef865da
#: ../../intro/overview.txt:49
msgid ""
"Next, run the Django command-line utility to create the database tables "
"automatically:"
msgstr ""

# 76277e2d606e471687970c3004f32853
#: ../../intro/overview.txt:56
msgid ""
"The :djadmin:`syncdb` command looks at all your available models and creates "
"tables in your database for whichever tables don't already exist."
msgstr ""

# 3242039228b7460c87a1541fb2b4fd69
#: ../../intro/overview.txt:60
msgid "Enjoy the free API"
msgstr ""

# 39163b94bd8241dfbd8c1e8210f641d0
#: ../../intro/overview.txt:62
msgid ""
"With that, you've got a free, and rich, :doc:`Python API </topics/db/"
"queries>` to access your data. The API is created on the fly, no code "
"generation necessary:"
msgstr ""

# 951aac57c8c84ac1aaad547219062d07
#: ../../intro/overview.txt:138
msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""

# fa02dcf0605f4850a132f18c701ccfc5
#: ../../intro/overview.txt:140
msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready :doc:`administrative interface </ref/contrib/"
"admin/index>` -- a Web site that lets authenticated users add, change and "
"delete objects. It's as easy as registering your model in the admin site::"
msgstr ""

# 4128ab23897f4ff6829a860e7fc1f5ef
#: ../../intro/overview.txt:163
msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces just to manage content."
msgstr ""

# 4dedb60ae54c4554acb6b3a95c317ded
#: ../../intro/overview.txt:167
msgid ""
"One typical workflow in creating Django apps is to create models and get the "
"admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""

# 781867c57636487286cc343e79d00c74
#: ../../intro/overview.txt:172
msgid "Design your URLs"
msgstr ""

# 59e8b89231234f168a4855d66aca4c21
#: ../../intro/overview.txt:174
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""

# 34f710e090f2405d8e6be5de49ff5127
#: ../../intro/overview.txt:178
msgid ""
"To design URLs for an app, you create a Python module called a :doc:`URLconf "
"</topics/http/urls>`. A table of contents for your app, it contains a simple "
"mapping between URL patterns and Python callback functions. URLconfs also "
"serve to decouple URLs from Python code."
msgstr ""

# cbfdcbb8ca2e40c39fb31a791f52e058
#: ../../intro/overview.txt:183
msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above::"
msgstr ""

# e54aabec19e04450bcdeaab776df551b
#: ../../intro/overview.txt:194
msgid ""
"The code above maps URLs, as simple `regular expressions`_, to the location "
"of Python callback functions (\"views\"). The regular expressions use "
"parenthesis to \"capture\" values from the URLs. When a user requests a "
"page, Django runs through each pattern, in order, and stops at the first one "
"that matches the requested URL. (If none of them matches, Django calls a "
"special-case 404 view.) This is blazingly fast, because the regular "
"expressions are compiled at load time."
msgstr ""

# db3b071e148141b6965598d0a0f11f47
#: ../../intro/overview.txt:204
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function. Each view gets passed a request object -- "
"which contains request metadata -- and the values captured in the regex."
msgstr ""

# fca85e86f7e7421b93d8b602b92bca7e
#: ../../intro/overview.txt:208
msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, '2005', "
"'05', '39323')``."
msgstr ""

# 026a47795cee469ab74630f18263f3af
#: ../../intro/overview.txt:213
msgid "Write your views"
msgstr ""

# 2ba94021b27c4151b81b090c474a0b2c
#: ../../intro/overview.txt:215
msgid ""
"Each view is responsible for doing one of two things: Returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :class:`~django.http.Http404`. The "
"rest is up to you."
msgstr ""

# 470f6cf4e8154adc9dc9770c0d8a7d00
#: ../../intro/overview.txt:220
msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example "
"view for ``year_archive`` from above::"
msgstr ""

# 04b03a8f8c424f9ba212ae4a7b7870e7
#: ../../intro/overview.txt:230
msgid ""
"This example uses Django's :doc:`template system </topics/templates>`, which "
"has several powerful features but strives to stay simple enough for non-"
"programmers to use."
msgstr ""

# c357ee4e7ea844aaaca9294de7bd99a7
#: ../../intro/overview.txt:235
msgid "Design your templates"
msgstr ""

# 1092b733d7f543e0b35d1ae0f5be1727
#: ../../intro/overview.txt:237
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""

# 964b01d06e8c4a2396fe1a11751248ec
#: ../../intro/overview.txt:239
msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates with :setting:`TEMPLATE_DIRS`. If a template doesn't "
"exist in the first directory, it checks the second, and so on."
msgstr ""

# 3d23396035934b9e9b2eb6b69a9c1cc3
#: ../../intro/overview.txt:244
msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""

# 986a508dc39c403f85c70f3d7f7dd597
#: ../../intro/overview.txt:263
msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup: They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""

# 1885de916a2c4682a964137b78c862b8
#: ../../intro/overview.txt:268
msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe"
"\" (the \"|\" character). This is called a template filter, and it's a way "
"to filter the value of a variable. In this case, the date filter formats a "
"Python datetime object in the given format (as found in PHP's date function)."
msgstr ""

# 69e43cdb22f742a1b3436321010bc32a
#: ../../intro/overview.txt:273
msgid ""
"You can chain together as many filters as you'd like. You can write :ref:"
"`custom template filters <howto-writing-custom-template-filters>`. You can "
"write :doc:`custom template tags </howto/custom-template-tags>`, which run "
"custom Python code behind the scenes."
msgstr ""

# d4bce6405a4d439d90c9c851478427b0
#: ../../intro/overview.txt:278
msgid ""
"Finally, Django uses the concept of \"template inheritance\": That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template "
"called 'base', which has defined a bunch of blocks, and fill the blocks with "
"the following blocks.\" In short, that lets you dramatically cut down on "
"redundancy in templates: each template has to define only what's unique to "
"that template."
msgstr ""

# 37b4b7446964474c8f6b09d5845249b1
#: ../../intro/overview.txt:284
msgid ""
"Here's what the \"base.html\" template, including the use of :doc:`static "
"files </howto/static-files/index>`, might look like:"
msgstr ""

# f62b0b0a64d64ae19721c4319a6e6ea3
#: ../../intro/overview.txt:300
msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This makes a site "
"redesign as easy as changing a single file -- the base template."
msgstr ""

# 363b0dfbab85411789cd1d3051f7b874
#: ../../intro/overview.txt:304
msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different cell-phone editions of sites -- "
"simply by creating a new base template."
msgstr ""

# 5907ba450f4c40b3ad2d0ffcecbcd293
#: ../../intro/overview.txt:309
msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that "
"matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views, "
"templates -- is decoupled from the next."
msgstr ""

# 0f880cab6a9e4d05bc5edb02a98e1f20
#: ../../intro/overview.txt:318
msgid "This is just the surface"
msgstr ""

# 4eeb449ef95947708289f9f5bf4ecbc1
#: ../../intro/overview.txt:320
msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""

# 8c22ce8404f64e12b7b0b01e5ef16243
#: ../../intro/overview.txt:323
msgid ""
"A :doc:`caching framework </topics/cache>` that integrates with memcached or "
"other backends."
msgstr ""

# 877c575046304f0ebbd63e0155cdfd46
#: ../../intro/overview.txt:326
msgid ""
"A :doc:`syndication framework </ref/contrib/syndication>` that makes "
"creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""

# 9941e51b15ef4bbb97afb58760496433
#: ../../intro/overview.txt:329
msgid ""
"More sexy automatically-generated admin features -- this overview barely "
"scratched the surface."
msgstr ""

# ae4eba9209634fdc9e09e864d4462b12
#: ../../intro/overview.txt:332
msgid ""
"The next obvious steps are for you to `download Django`_, read :doc:`the "
"tutorial </intro/tutorial01>` and join `the community`_. Thanks for your "
"interest!"
msgstr ""

# 478481b8b9ec4b0fba65cdfe476d3052
#: ../../intro/reusable-apps.txt:3
msgid "Advanced tutorial: How to write reusable apps"
msgstr ""

# 5b1194ab18dd42b9955a60bd1e13a203
#: ../../intro/reusable-apps.txt:5
msgid ""
"This advanced tutorial begins where :doc:`Tutorial 6 </intro/tutorial06>` "
"left off. We'll be turning our Web-poll into a standalone Python package you "
"can reuse in new projects and share with other people."
msgstr ""

# 7d7eb71682c245b69c376afc5ad1b611
#: ../../intro/reusable-apps.txt:9
msgid ""
"If you haven't recently completed Tutorials 1–6, we encourage you to review "
"these so that your example project matches the one described below."
msgstr ""

# 32b34af0033e45428d664bc1dd25f89d
#: ../../intro/reusable-apps.txt:13
msgid "Reusability matters"
msgstr ""

# dbbf9351fe5c4cbfad3ac2619de73230
#: ../../intro/reusable-apps.txt:15
msgid ""
"It's a lot of work to design, build, test and maintain a web application. "
"Many Python and Django projects share common problems. Wouldn't it be great "
"if we could save some of this repeated work?"
msgstr ""

# 916bc068494d446d8f039b78f92bb213
#: ../../intro/reusable-apps.txt:19
msgid ""
"Reusability is the way of life in Python. `The Python Package Index (PyPI) "
"<http://guide.python-distribute.org/contributing.html#pypi-info>`_ has a "
"vast range of packages you can use in your own Python programs. Check out "
"`Django Packages <http://www.djangopackages.com>`_ for existing reusable "
"apps you could incorporate in your project. Django itself is also just a "
"Python package. This means that you can take existing Python packages or "
"Django apps and compose them into your own web project. You only need to "
"write the parts that make your project unique."
msgstr ""

# abb7d0e0efe4410ab708f116a4c20d42
#: ../../intro/reusable-apps.txt:28
msgid ""
"Let's say you were starting a new project that needed a polls app like the "
"one we've been working on. How do you make this app reusable? Luckily, "
"you're well on the way already. In :doc:`Tutorial 3 </intro/tutorial03>`, we "
"saw how we could decouple polls from the project-level URLconf using an "
"``include``. In this tutorial, we'll take further steps to make the app easy "
"to use in new projects and ready to publish for others to install and use."
msgstr ""

# 888fe34937f5410292cb919e8edbda2f
#: ../../intro/reusable-apps.txt:35
msgid "Package? App?"
msgstr ""

# 59a0bffbe7c6465292d37c3c365f565b
#: ../../intro/reusable-apps.txt:37
msgid ""
"A Python `package <http://docs.python.org/tutorial/modules.html#packages>`_ "
"provides a way of grouping related Python code for easy reuse. A package "
"contains one or more files of Python code (also known as \"modules\")."
msgstr ""

# e7379c2470c34d31afabdc096ec26f82
#: ../../intro/reusable-apps.txt:41
msgid ""
"A package can be imported with ``import foo.bar`` or ``from foo import "
"bar``. For a directory (like ``polls``) to form a package, it must contain a "
"special file ``__init__.py``, even if this file is empty."
msgstr ""

# 2807538d8ab44921a77381dd8ef31d61
#: ../../intro/reusable-apps.txt:45
msgid ""
"A Django *app* is just a Python package that is specifically intended for "
"use in a Django project. An app may also use common Django conventions, such "
"as having a ``models.py`` file."
msgstr ""

# dbef079509b9445087f8026f0c520777
#: ../../intro/reusable-apps.txt:49
msgid ""
"Later on we use the term *packaging* to describe the process of making a "
"Python package easy for others to install. It can be a little confusing, we "
"know."
msgstr ""

# 5ddcef6bde504a56b86ac87133c1a0ec
#: ../../intro/reusable-apps.txt:54
msgid "Your project and your reusable app"
msgstr ""

# 7ecb8ea0c6ac45cbbb367ee587153300
#: ../../intro/reusable-apps.txt:56
msgid "After the previous tutorials, our project should look like this::"
msgstr ""

# 88f8d9d01da64d8a90917b0b9aef2ff8
#: ../../intro/reusable-apps.txt:85
msgid ""
"You created ``mysite/templates`` in :doc:`Tutorial 2 </intro/tutorial02>`, "
"and ``polls/templates`` in :doc:`Tutorial 3 </intro/tutorial03>`. Now "
"perhaps it is clearer why we chose to have separate template directories for "
"the project and application: everything that is part of the polls "
"application is in ``polls``. It makes the application self-contained and "
"easier to drop into a new project."
msgstr ""

# cf7564fa46c647278ad37edf2693c858
#: ../../intro/reusable-apps.txt:92
msgid ""
"The ``polls`` directory could now be copied into a new Django project and "
"immediately reused. It's not quite ready to be published though. For that, "
"we need to package the app to make it easy for others to install."
msgstr ""

# 8cfe28f9fd9c4c0cbf6eb4825ab9e69d
#: ../../intro/reusable-apps.txt:99
msgid "Installing some prerequisites"
msgstr ""

# db8a8ddf707f45ffbd86e5da205eddba
#: ../../intro/reusable-apps.txt:102
msgid ""
"The current state of Python packaging is a bit muddled with various tools. "
"For this tutorial, we're going to use distribute_ to build our package. It's "
"a community-maintained fork of the older ``setuptools`` project. We'll also "
"be using `pip`_ to install and uninstall it. You should install these two "
"packages now. If you need help, you can refer to :ref:`how to install Django "
"with pip<installing-official-release>`. You can install ``distribute`` the "
"same way."
msgstr ""

# aec1faf6a3ff4f74bad8c87b45361783
#: ../../intro/reusable-apps.txt:113
msgid "Packaging your app"
msgstr ""

# c89d2846600c44bf8f1c364eee894a10
#: ../../intro/reusable-apps.txt:115
msgid ""
"Python *packaging* refers to preparing your app in a specific format that "
"can be easily installed and used. Django itself is packaged very much like "
"this. For a small app like polls, this process isn't too difficult."
msgstr ""

# bd3bd2bcfd5347dbbcaac6dd39cf40ae
#: ../../intro/reusable-apps.txt:119
msgid ""
"First, create a parent directory for ``polls``, outside of your Django "
"project. Call this directory ``django-polls``."
msgstr ""

# d3d8d0f07811494495062738d4877640
#: ../../intro/reusable-apps.txt:123
msgid "Choosing a name for your app"
msgstr ""

# 3b32ab38b5d047f48aecbec31d10dd4d
#: ../../intro/reusable-apps.txt:125
msgid ""
"When choosing a name for your package, check resources like PyPI to avoid "
"naming conflicts with existing packages. It's often useful to prepend "
"``django-`` to your module name when creating a package to distribute. This "
"helps others looking for Django apps identify your app as Django specific."
msgstr ""

# a1bd0371fac34fc4956d9f9e6606800f
#: ../../intro/reusable-apps.txt:130
msgid "Move the ``polls`` directory into the ``django-polls`` directory."
msgstr ""

# df723478701d440d9b739b45df4307a7
#: ../../intro/reusable-apps.txt:132
msgid "Create a file ``django-polls/README.rst`` with the following contents::"
msgstr ""

# 7073a2663e2040768ad291de99d4f1b0
#: ../../intro/reusable-apps.txt:164
msgid ""
"4. Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the "
"scope of this tutorial, but suffice it to say that code released publicly "
"without a license is *useless*. Django and many Django-compatible apps are "
"distributed under the BSD license; however, you're free to pick your own "
"license. Just be aware that your licensing choice will affect who is able to "
"use your code."
msgstr ""

# 4ac126dbc2ea41859a842299ecc20f34
#: ../../intro/reusable-apps.txt:171
msgid ""
"5. Next we'll create a ``setup.py`` file which provides details about how to "
"build and install the app.  A full explanation of this file is beyond the "
"scope of this tutorial, but the `distribute docs <http://packages.python.org/"
"distribute/setuptools.html>`_ have a good explanation. Create a file "
"``django-polls/setup.py`` with the following contents::"
msgstr ""

# 426f0c31633941a496ef9b708fdd27f8
#: ../../intro/reusable-apps.txt:211
msgid "I thought you said we were going to use ``distribute``?"
msgstr ""

# 2e8714ea1f9649438e23cdc63d540a4c
#: ../../intro/reusable-apps.txt:213
msgid ""
"Distribute is a drop-in replacement for ``setuptools``. Even though we "
"appear to import from ``setuptools``, since we have ``distribute`` "
"installed, it will override the import."
msgstr ""

# ffbaf20f50ff41cca2023fb010c44947
#: ../../intro/reusable-apps.txt:216
msgid ""
"Only Python modules and packages are included in the package by default. To "
"include additional files, we'll need to create a ``MANIFEST.in`` file. The "
"distribute docs referred to in the previous step discuss this file in more "
"details. To include the templates, the ``README.rst`` and our ``LICENSE`` "
"file, create a file ``django-polls/MANIFEST.in`` with the following "
"contents::"
msgstr ""

# ec8cd6340eac4db3a91235129220b0cc
#: ../../intro/reusable-apps.txt:228
msgid ""
"It's optional, but recommended, to include detailed documentation with your "
"app. Create an empty directory ``django-polls/docs`` for future "
"documentation. Add an additional line to ``django-polls/MANIFEST.in``::"
msgstr ""

# 9ee4bd920d4d4eeeb924fa9aa32587bb
#: ../../intro/reusable-apps.txt:234
msgid ""
"Note that the ``docs`` directory won't be included in your package unless "
"you add some files to it. Many Django apps also provide their documentation "
"online through sites like `readthedocs.org <http://readthedocs.org>`_."
msgstr ""

# 79195f66f25a492a9818469b57f0c28b
#: ../../intro/reusable-apps.txt:238
msgid ""
"Try building your package with ``python setup.py sdist`` (run from inside "
"``django-polls``). This creates a directory called ``dist`` and builds your "
"new package, ``django-polls-0.1.tar.gz``."
msgstr ""

# bbe7d7a0a4a043a19f9a2ecdc569f8ba
#: ../../intro/reusable-apps.txt:242
msgid ""
"For more information on packaging, see `The Hitchhiker's Guide to Packaging "
"<http://guide.python-distribute.org/quickstart.html>`_."
msgstr ""

# 1ebcaf9e15df465c9b2fedd5f315b79a
#: ../../intro/reusable-apps.txt:246
msgid "Using your own package"
msgstr ""

# 10d8f80670404c7195c4c71bf4be01d4
#: ../../intro/reusable-apps.txt:248
msgid ""
"Since we moved the ``polls`` directory out of the project, it's no longer "
"working. We'll now fix this by installing our new ``django-polls`` package."
msgstr ""

# 6960ca1829ce4f0887a30960abd74729
#: ../../intro/reusable-apps.txt:252
msgid "Installing as a user library"
msgstr ""

# f3376aa94d744999adbb3c847f178031
#: ../../intro/reusable-apps.txt:254
msgid ""
"The following steps install ``django-polls`` as a user library. Per-user "
"installs have a lot of advantages over installing the package system-wide, "
"such as being usable on systems where you don't have administrator access as "
"well as preventing the package from affecting system services and other "
"users of the machine. Python 2.6 added support for user libraries, so if you "
"are using an older version this won't work, but Django 1.5 requires Python "
"2.6 or newer anyway."
msgstr ""

# bdf24081ab924dd78256eb0864cf8e7d
#: ../../intro/reusable-apps.txt:262
msgid ""
"Note that per-user installations can still affect the behavior of system "
"tools that run as that user, so ``virtualenv`` is a more robust solution "
"(see below)."
msgstr ""

# 091ea07fd09c4cdb9aba0da330128f7b
#: ../../intro/reusable-apps.txt:266
msgid ""
"To install the package, use pip (you already :ref:`installed it <installing-"
"reusable-apps-prerequisites>`, right?)::"
msgstr ""

# f1dfee06ea7342dd8df465c7b9740d01
#: ../../intro/reusable-apps.txt:277
msgid ""
"With luck, your Django project should now work correctly again. Run the "
"server again to confirm this."
msgstr ""

# 396c7f925f0a4780ab7762285f12b85e
#: ../../intro/reusable-apps.txt:274
msgid "To uninstall the package, use pip::"
msgstr ""

# 08b365d830cf43fd8128ae2d74873460
#: ../../intro/reusable-apps.txt:290
msgid "Publishing your app"
msgstr ""

# 5409b61c246e4cef9a03ae062eb7ada1
#: ../../intro/reusable-apps.txt:292
msgid ""
"Now that we've packaged and tested ``django-polls``, it's ready to share "
"with the world! If this wasn't just an example, you could now:"
msgstr ""

# 4617770fc10a482180d0aa60b452ea4e
#: ../../intro/reusable-apps.txt:295
msgid "Email the package to a friend."
msgstr ""

# 16a55412aba44e27a5b8d4d29832e0eb
#: ../../intro/reusable-apps.txt:297
msgid "Upload the package on your Web site."
msgstr ""

# 0c575133a695490bb1eafb3ae866f916
#: ../../intro/reusable-apps.txt:299
msgid ""
"Post the package on a public repository, such as `The Python Package Index "
"(PyPI) <http://guide.python-distribute.org/contributing.html#pypi-info>`_."
msgstr ""

# dcbe4c4c30bd4d2a81cf7af46f066a7f
#: ../../intro/reusable-apps.txt:302
msgid ""
"For more information on PyPI, see the `Quickstart <http://guide.python-"
"distribute.org/quickstart.html#register-your-package-with-the-python-package-"
"index-pypi>`_ section of The Hitchhiker's Guide to Packaging. One detail "
"this guide mentions is choosing the license under which your code is "
"distributed."
msgstr ""

# c5b673a035a84e55bc734269db6d78e1
#: ../../intro/reusable-apps.txt:308
msgid "Installing Python packages with virtualenv"
msgstr ""

# 02914e3f1e6a47b88d87d22a8a181a55
#: ../../intro/reusable-apps.txt:310
msgid ""
"Earlier, we installed the polls app as a user library. This has some "
"disadvantages:"
msgstr ""

# 17a82e59125943fbb5bfea0b5c6afffb
#: ../../intro/reusable-apps.txt:313
msgid ""
"Modifying the user libraries can affect other Python software on your system."
msgstr ""

# 7e636312da014c5fbd82d38f0e47b7ab
#: ../../intro/reusable-apps.txt:315
msgid ""
"You won't be able to run multiple versions of this package (or others with "
"the same name)."
msgstr ""

# c4fe2c9be5d444199f021f58522e95ec
#: ../../intro/reusable-apps.txt:318
msgid ""
"Typically, these situations only arise once you're maintaining several "
"Django projects. When they do, the best solution is to use `virtualenv "
"<http://www.virtualenv.org/>`_. This tool allows you to maintain multiple "
"isolated Python environments, each with its own copy of the libraries and "
"package namespace."
msgstr ""

# 1c45406e50564faa82a442f3e9ca419d
#: ../../intro/tutorial01.txt:3
msgid "Writing your first Django app, part 1"
msgstr ""

# d0678ebb40b24e1d82acb783d65335c3
#: ../../intro/tutorial01.txt:5
msgid "Let's learn by example."
msgstr ""

# c165fbdc64a84b5fa3b1b4830ea3307d
#: ../../intro/tutorial01.txt:7
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""

# 39a8b1e8a5d948bd97a6a4cecde6395c
#: ../../intro/tutorial01.txt:10
msgid "It'll consist of two parts:"
msgstr ""

# ed4f71b6741d4ba787b0d8ec9023a2da
#: ../../intro/tutorial01.txt:12
msgid "A public site that lets people view polls and vote in them."
msgstr ""

# 678115f7cdd84252a18cd2959e43746b
#: ../../intro/tutorial01.txt:13
msgid "An admin site that lets you add, change and delete polls."
msgstr ""

# f31dedb818854f35adae0a2f8c592255
#: ../../intro/tutorial01.txt:15
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed and which version by running the following "
"command:"
msgstr ""

# b55cd69ffd1b44c9bc8fa54ddf612bee
#: ../../intro/tutorial01.txt:22
msgid ""
"If Django is installed, you should see the version of your installation. If "
"it isn't, you'll get an error telling \"No module named django\"."
msgstr ""

# 98afa235fe054f2e9d6420d8836c3381
#: ../../intro/tutorial01.txt:25
msgid ""
"This tutorial is written for Django |version| and Python 2.x. If the Django "
"version doesn't match, you can refer to the tutorial for your version of "
"Django or update Django to the newest version. If you are using Python 3.x, "
"be aware that your code may need to differ from what is in the tutorial and "
"you should continue using the tutorial only if you know what you are doing "
"with Python 3.x."
msgstr ""

# d847e6dc079f4699bad308ffb2ab66c7
#: ../../intro/tutorial01.txt:32
msgid ""
"See :doc:`How to install Django </topics/install>` for advice on how to "
"remove older versions of Django and install a newer one."
msgstr ""

# d1f15197193843ed8b6d66adebe22ceb
#: ../../intro/tutorial01.txt:37
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-users`__ or drop by `#django on irc.freenode.net`__ to chat with "
"other Django users who might be able to help."
msgstr ""

# c96ba4ff8eb249488e02a1cd1bb7b7da
#: ../../intro/tutorial01.txt:45
msgid "Creating a project"
msgstr ""

# c7cf24b9c1f34a75b2dd1496df9d87cd
#: ../../intro/tutorial01.txt:47
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""

# 38e6e70f7397479083d3fb7243f667fe
#: ../../intro/tutorial01.txt:53
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""

# 9ad73fec37364df181c363cbb63b315e
#: ../../intro/tutorial01.txt:60
msgid ""
"This will create a ``mysite`` directory in your current directory. If it "
"didn't work, see :ref:`troubleshooting-django-admin-py`."
msgstr ""

# a3a86a22f3f5426183e806c427ac3ae7
#: ../../intro/tutorial01.txt:65
msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""

# e1047ce453c341169b2498ad53678392
#: ../../intro/tutorial01.txt:70
msgid "Where should this code live?"
msgstr ""

# 78e028a4b11d44f6a6b7fb3a2fdfed20
#: ../../intro/tutorial01.txt:72
msgid ""
"If your background is in plain old PHP (with no use of modern frameworks), "
"you're probably used to putting code under the Web server's document root "
"(in a place such as ``/var/www``). With Django, you don't do that. It's not "
"a good idea to put any of this Python code within your Web server's document "
"root, because it risks the possibility that people may be able to view your "
"code over the Web. That's not good for security."
msgstr ""

# 08bcb5d684264803bf97f439a57699b7
#: ../../intro/tutorial01.txt:79
msgid ""
"Put your code in some directory **outside** of the document root, such as :"
"file:`/home/mycode`."
msgstr ""

# 222af3d49c2345c1ac5ea06ae43d27ac
#: ../../intro/tutorial01.txt:82
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ""

# 73172ee8ffc347ad92de9ab50aa6b2c6
# 731503d39a724975878048968bbaeb44
#: ../../intro/tutorial01.txt:92 ../../intro/tutorial02.txt:80
msgid "Doesn't match what you see?"
msgstr ""

# 323bec7b7515447fa4f7faeec19a7f58
#: ../../intro/tutorial01.txt:94
msgid ""
"The default project layout recently changed. If you're seeing a \"flat\" "
"layout (with no inner :file:`mysite/` directory), you're probably using a "
"version of Django that doesn't match this tutorial version.  You'll want to "
"either switch to the older tutorial or the newer Django version."
msgstr ""

# 4c24f2d0e79b48b39cac49f7aa6a3716
#: ../../intro/tutorial01.txt:99
msgid "These files are:"
msgstr ""

# 8461f0e7bb0f4897b0968acae32ae776
#: ../../intro/tutorial01.txt:101
msgid ""
"The outer :file:`mysite/` root directory is just a container for your "
"project. Its name doesn't matter to Django; you can rename it to anything "
"you like."
msgstr ""

# 54896ae52cfb49868dab2945195d4c58
#: ../../intro/tutorial01.txt:105
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about :file:"
"`manage.py` in :doc:`/ref/django-admin`."
msgstr ""

# cfa57af71ce6470ba46e2355b4e4af00
#: ../../intro/tutorial01.txt:109
msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``mysite.urls``)."
msgstr ""

# 58436384bcea48458353bb3d5b92513d
#: ../../intro/tutorial01.txt:113
msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. (Read `more about "
"packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""

# 5480b6f1de1a4bf28d2902341c70b4f0
#: ../../intro/tutorial01.txt:117
msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django "
"project.  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""

# 033277ace8604b05baa8c2356425063c
#: ../../intro/tutorial01.txt:121
msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in :doc:`/topics/http/urls`."
msgstr ""

# 7027a47faa3a471da160e722a1f85103
#: ../../intro/tutorial01.txt:125
msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible webservers to "
"serve your project. See :doc:`/howto/deployment/wsgi/index` for more details."
msgstr ""

# f704f0953ae042c4bde135dc6aa1feee
#: ../../intro/tutorial01.txt:131
msgid "The development server"
msgstr ""

# 56b81168471548d0b0da8879f10f387e
#: ../../intro/tutorial01.txt:133
msgid ""
"Let's verify this worked. Change into the outer :file:`mysite` directory, if "
"you haven't already, and run the command ``python manage.py runserver``. "
"You'll see the following output on the command line:"
msgstr ""

# 6696bac7b2904cd4917f008a01b7d62c
#: ../../intro/tutorial01.txt:147
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop "
"things rapidly, without having to deal with configuring a production server "
"-- such as Apache -- until you're ready for production."
msgstr ""

# e6dd5e73739d4b21bf92dac5df226d56
#: ../../intro/tutorial01.txt:152
msgid ""
"Now's a good time to note: **Don't** use this server in anything resembling "
"a production environment. It's intended only for use while developing. "
"(We're in the business of making Web frameworks, not Web servers.)"
msgstr ""

# 17c720d22b44405ea06d692b6099da0b
#: ../../intro/tutorial01.txt:156
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel. It worked!"
msgstr ""

# dab28784a2ca4f0189db8bd76e368288
#: ../../intro/tutorial01.txt:160
msgid "Changing the port"
msgstr ""

# c28c1469868b4ce99b389240cac4915f
#: ../../intro/tutorial01.txt:162
msgid ""
"By default, the :djadmin:`runserver` command starts the development server "
"on the internal IP at port 8000."
msgstr ""

# a73897f38d504b15a219ce1a02d3a5da
#: ../../intro/tutorial01.txt:165
msgid ""
"If you want to change the server's port, pass it as a command-line argument. "
"For instance, this command starts the server on port 8080:"
msgstr ""

# e4fc9c2ee78f42ae9b5377b590ac22a1
#: ../../intro/tutorial01.txt:173
msgid ""
"If you want to change the server's IP, pass it along with the port. So to "
"listen on all public IPs (useful if you want to show off your work on other "
"computers), use:"
msgstr ""

# 08cd21cd20844910bf0a4a4a62372c8a
#: ../../intro/tutorial01.txt:181
msgid ""
"Full docs for the development server can be found in the :djadmin:"
"`runserver` reference."
msgstr ""

# 36572d887ad54213b354ce1a3f69bd22
#: ../../intro/tutorial01.txt:185
msgid "Database setup"
msgstr ""

# 5f530a40924a4f73b79ce586f16fd6fc
#: ../../intro/tutorial01.txt:187
msgid ""
"Now, edit :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings. Change the following "
"keys in the :setting:`DATABASES` ``'default'`` item to match your database "
"connection settings."
msgstr ""

# 96b8aa4bb93046ac91357ce4007cd52c
#: ../../intro/tutorial01.txt:192
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends."
"postgresql_psycopg2'``, ``'django.db.backends.mysql'``, ``'django.db."
"backends.sqlite3'`` or ``'django.db.backends.oracle'``. Other backends are :"
"setting:`also available <DATABASE-ENGINE>`."
msgstr ""

# 3cefd41ac6cb4ee3b8ac1167e02477af
#: ../../intro/tutorial01.txt:198
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. If the "
"file doesn't exist, it will automatically be created when you synchronize "
"the database for the first time (see below)."
msgstr ""

# 339ed93827dd485183c55de66f2b9142
#: ../../intro/tutorial01.txt:205
msgid ""
"When specifying the path, always use forward slashes, even on Windows (e.g. "
"``C:/homes/user/mysite/sqlite3.db``)."
msgstr ""

# 1faf9617956a4e1ebf0a5bccbba7051a
#: ../../intro/tutorial01.txt:208
msgid ":setting:`USER` -- Your database username (not used for SQLite)."
msgstr ""

# 190996e042c74c939b7902701e6271a2
#: ../../intro/tutorial01.txt:210
msgid ":setting:`PASSWORD` -- Your database password (not used for SQLite)."
msgstr ""

# b62f17f52a18447bb3b62da5b27dfc65
#: ../../intro/tutorial01.txt:213
msgid ""
":setting:`HOST` -- The host your database is on. Leave this as an empty "
"string (or possibly ``127.0.0.1``) if your database server is on the same "
"physical machine (not used for SQLite). See :setting:`HOST` for details."
msgstr ""

# 5539f88ae09d4c2dbab74713e2701f5d
#: ../../intro/tutorial01.txt:217
msgid ""
"If you're new to databases, we recommend simply using SQLite by setting :"
"setting:`ENGINE <DATABASE-ENGINE>` to ``'django.db.backends.sqlite3'`` and :"
"setting:`NAME` to the place where you'd like to store the database. SQLite "
"is included in Python, so you won't need to install anything else to support "
"your database."
msgstr ""

# 5207de95d5dd4640aad00824e1cff047
#: ../../intro/tutorial01.txt:225
msgid ""
"If you're using PostgreSQL or MySQL, make sure you've created a database by "
"this point. Do that with \"``CREATE DATABASE database_name;``\" within your "
"database's interactive prompt."
msgstr ""

# b4875116151b4c6892fe7b72f44e2460
#: ../../intro/tutorial01.txt:229
msgid ""
"If you're using SQLite, you don't need to create anything beforehand - the "
"database file will be created automatically when it is needed."
msgstr ""

# a1dd57389f68480c9079cb00e326cb8c
#: ../../intro/tutorial01.txt:232
msgid ""
"While you're editing :file:`settings.py`, set :setting:`TIME_ZONE` to your "
"time zone. The default value is the Central time zone in the U.S. (Chicago)."
msgstr ""

# edc92731cd21476bbee6e10df5a02e57
#: ../../intro/tutorial01.txt:235
msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting toward the bottom of the "
"file. That holds the names of all Django applications that are activated in "
"this Django instance. Apps can be used in multiple projects, and you can "
"package and distribute them for use by others in their projects."
msgstr ""

# f165c68b397f41668ee9241522f4a89f
#: ../../intro/tutorial01.txt:240
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""

# 38697b0b384740c3a7931a93d988b49f
#: ../../intro/tutorial01.txt:243
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ""

# 0b7c8ae25b114ac4a3eb8f0302bf30e1
#: ../../intro/tutorial01.txt:245
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""

# 4f8ae0f76c624853ba1eef75a2842549
#: ../../intro/tutorial01.txt:247
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""

# 316c11670e85456187998c5509df7967
#: ../../intro/tutorial01.txt:249
msgid ""
":mod:`django.contrib.sites` -- A framework for managing multiple sites with "
"one Django installation."
msgstr ""

# 6c292e8341e84e59bca4c82fd4d94397
#: ../../intro/tutorial01.txt:252
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ""

# 1b13e00ea514466db4972385e4b96ae5
#: ../../intro/tutorial01.txt:254
msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""

# e3b2ccf31ac340ab994364c68c2f5878
#: ../../intro/tutorial01.txt:257
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr ""

# 4e24bdded54746a1981c35baa6d4b182
#: ../../intro/tutorial01.txt:259
msgid ""
"Each of these applications makes use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""

# 225269d77c2c44559141964f2850844b
#: ../../intro/tutorial01.txt:267
msgid ""
"The :djadmin:`syncdb` command looks at the :setting:`INSTALLED_APPS` setting "
"and creates any necessary database tables according to the database settings "
"in your :file:`mysite/settings.py` file. You'll see a message for each "
"database table it creates, and you'll get a prompt asking you if you'd like "
"to create a superuser account for the authentication system. Go ahead and do "
"that."
msgstr ""

# 032e6b4307b44201894d2bb79d3c53e1
#: ../../intro/tutorial01.txt:274
msgid ""
"If you're interested, run the command-line client for your database and type "
"``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` (SQLite) to "
"display the tables Django created."
msgstr ""

# 1822f77dc8a445f0a3674f7a6db82bd1
#: ../../intro/tutorial01.txt:278
msgid "For the minimalists"
msgstr ""

# d7f1440ace844b00919d7d28d15e2ca8
#: ../../intro/tutorial01.txt:280
msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from :setting:"
"`INSTALLED_APPS` before running :djadmin:`syncdb`. The :djadmin:`syncdb` "
"command will only create tables for apps in :setting:`INSTALLED_APPS`."
msgstr ""

# 636ef0ecec644992826cc39140783ca9
#: ../../intro/tutorial01.txt:290
msgid "Creating models"
msgstr ""

# 60a000f3f84f4407838b1cce97664590
#: ../../intro/tutorial01.txt:292
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start "
"doing work."
msgstr ""

# f65117c16cb840bcb0090eb12fd68aa8
#: ../../intro/tutorial01.txt:295
msgid ""
"Each application you write in Django consists of a Python package, somewhere "
"on your `Python path`_, that follows a certain convention. Django comes with "
"a utility that automatically generates the basic directory structure of an "
"app, so you can focus on writing code rather than creating directories."
msgstr ""

# a11565e258ff4757b06d579e72c7f7bf
#: ../../intro/tutorial01.txt:300
msgid "Projects vs. apps"
msgstr ""

# 9fec427a0658467a91c916d45f3cb10d
#: ../../intro/tutorial01.txt:302
msgid ""
"What's the difference between a project and an app? An app is a Web "
"application that does something -- e.g., a Weblog system, a database of "
"public records or a simple poll app. A project is a collection of "
"configuration and apps for a particular Web site. A project can contain "
"multiple apps. An app can be in multiple projects."
msgstr ""

# 63e96cbec517475099e1f91ebae31546
#: ../../intro/tutorial01.txt:308
msgid ""
"Your apps can live anywhere on your `Python path`_. In this tutorial, we'll "
"create our poll app right next to your :file:`manage.py` file so that it can "
"be imported as its own top-level module, rather than a submodule of "
"``mysite``."
msgstr ""

# d64eab0a1c3a4ead938c4828e4351673
#: ../../intro/tutorial01.txt:312
msgid ""
"To create your app, make sure you're in the same directory as :file:`manage."
"py` and type this command:"
msgstr ""

# ff62881eca30429ab4e9b1168b31d86c
#: ../../intro/tutorial01.txt:319
msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""

# 09143c72805140fba2c9731787fa84d3
#: ../../intro/tutorial01.txt:327
msgid "This directory structure will house the poll application."
msgstr ""

# 2bbc63aff26142ee934277dc56426cc2
#: ../../intro/tutorial01.txt:329
msgid ""
"The first step in writing a database Web app in Django is to define your "
"models -- essentially, your database layout, with additional metadata."
msgstr ""

# 2bd57febb74a408bbd4570dd4b148640
# faed19a2340a4473bb6b9b05f8d3e68a
# e01accdee33b4ef3b19a49b0cf88c896
# 7eaa188879f147f8981682897232f1e2
# 04bdc95fb9b74720bdded77d333b34b9
#: ../../intro/tutorial01.txt:332 ../../intro/tutorial01.txt:406
#: ../../intro/tutorial02.txt:9 ../../intro/tutorial03.txt:10
#: ../../intro/tutorial03.txt:434
msgid "Philosophy"
msgstr ""

# 6ed4b2904a3749129041a3371109340f
#: ../../intro/tutorial01.txt:334
msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the :ref:`DRY Principle <dry>`. The goal is to define your "
"data model in one place and automatically derive things from it."
msgstr ""

# 733db84ca8d942de96781fc30a757fd9
#: ../../intro/tutorial01.txt:339
msgid ""
"In our simple poll app, we'll create two models: ``Poll`` and ``Choice``. A "
"``Poll`` has a question and a publication date. A ``Choice`` has two fields: "
"the text of the choice and a vote tally. Each ``Choice`` is associated with "
"a ``Poll``."
msgstr ""

# b62ac2ddf6d84d07a0d869eb8abbac48
#: ../../intro/tutorial01.txt:344
msgid ""
"These concepts are represented by simple Python classes. Edit the :file:"
"`polls/models.py` file so it looks like this::"
msgstr ""

# 79abe1b684fd457a8081bba6e9b0bbf3
#: ../../intro/tutorial01.txt:358
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class "
"variables, each of which represents a database field in the model."
msgstr ""

# 201996d875044440b24d5f08c61a0b46
#: ../../intro/tutorial01.txt:362
msgid ""
"Each field is represented by an instance of a :class:`~django.db.models."
"Field` class -- e.g., :class:`~django.db.models.CharField` for character "
"fields and :class:`~django.db.models.DateTimeField` for datetimes. This "
"tells Django what type of data each field holds."
msgstr ""

# b5e1ec6070ba402db0c42f0efcc9736b
#: ../../intro/tutorial01.txt:367
msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question`` or ``pub_date`` ) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""

# 52fc2fc4682e490888092d9bfbbe89cd
#: ../../intro/tutorial01.txt:371
msgid ""
"You can use an optional first positional argument to a :class:`~django.db."
"models.Field` to designate a human-readable name. That's used in a couple of "
"introspective parts of Django, and it doubles as documentation. If this "
"field isn't provided, Django will use the machine-readable name. In this "
"example, we've only defined a human-readable name for ``Poll.pub_date``. For "
"all other fields in this model, the field's machine-readable name will "
"suffice as its human-readable name."
msgstr ""

# c0b5440a5a314386a6f45d80e0ac6a8e
#: ../../intro/tutorial01.txt:379
msgid ""
"Some :class:`~django.db.models.Field` classes have required arguments. :"
"class:`~django.db.models.CharField`, for example, requires that you give it "
"a :attr:`~django.db.models.CharField.max_length`. That's used not only in "
"the database schema, but in validation, as we'll soon see."
msgstr ""

# c1c366ba6a0d4c16b4ddcbdc4baa78a7
#: ../../intro/tutorial01.txt:384
msgid ""
"A :class:`~django.db.models.Field` can also have various optional arguments; "
"in this case, we've set the :attr:`~django.db.models.Field.default` value of "
"``votes`` to 0."
msgstr ""

# 5de6d80f61be485a86380fa89d820047
#: ../../intro/tutorial01.txt:388
msgid ""
"Finally, note a relationship is defined, using :class:`~django.db.models."
"ForeignKey`. That tells Django each ``Choice`` is related to a single "
"``Poll``. Django supports all the common database relationships: many-to-"
"ones, many-to-manys and one-to-ones."
msgstr ""

# f6d0d38725304f90be27aa1eec80e940
#: ../../intro/tutorial01.txt:396
msgid "Activating models"
msgstr ""

# 8fc17c90998a4b1e8dacb3595759ef6b
#: ../../intro/tutorial01.txt:398
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""

# e18e8d4bb06049a5b422da49c3b34372
#: ../../intro/tutorial01.txt:401
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""

# 2695268dfe0d41dca1126680b031d45d
#: ../../intro/tutorial01.txt:402
msgid ""
"Create a Python database-access API for accessing ``Poll`` and ``Choice`` "
"objects."
msgstr ""

# 111dbd1597d84726b371d1655eb87d32
#: ../../intro/tutorial01.txt:404
msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""

# 16ffc41451c44189bf208994d903d075
#: ../../intro/tutorial01.txt:408
msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""

# 0b59a71a00024623a1c26b930a21f6f0
#: ../../intro/tutorial01.txt:412
msgid ""
"Edit the :file:`settings.py` file again, and change the :setting:"
"`INSTALLED_APPS` setting to include the string ``'polls'``. So it'll look "
"like this::"
msgstr ""

# 162be0785f2e479bb8784a927cf1eef3
#: ../../intro/tutorial01.txt:430
msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""

# 0bdfd8aadb0140498d3c1a1389b62a5b
#: ../../intro/tutorial01.txt:437
msgid ""
"You should see something similar to the following (the ``CREATE TABLE`` SQL "
"statements for the polls app):"
msgstr ""

# 5f7ae3346af5468c9a24189c7a2cddae
#: ../../intro/tutorial01.txt:456
msgid "Note the following:"
msgstr ""

# e3d287143ab5401e8ce6ab3545a746fa
#: ../../intro/tutorial01.txt:458
msgid "The exact output will vary depending on the database you are using."
msgstr ""

# 7497f1dd4f1f4925ad094bbb0144b7ac
#: ../../intro/tutorial01.txt:460
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``poll`` and ``choice``. "
"(You can override this behavior.)"
msgstr ""

# 57b5f8577d9246ada333b75b93c7650f
#: ../../intro/tutorial01.txt:464
msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""

# 17888421dbff49ebaf44d514f4b4c0d2
#: ../../intro/tutorial01.txt:466
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""

# e81fe173455d44aab127f2210182c72f
#: ../../intro/tutorial01.txt:469
msgid ""
"The foreign key relationship is made explicit by a ``REFERENCES`` statement."
msgstr ""

# 5381f39332824533b2924a3e5488e0c8
#: ../../intro/tutorial01.txt:472
msgid ""
"It's tailored to the database you're using, so database-specific field types "
"such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key`` (SQLite) are handled for you automatically. Same goes for "
"quoting of field names -- e.g., using double quotes or single quotes. The "
"author of this tutorial runs PostgreSQL, so the example output is in "
"PostgreSQL syntax."
msgstr ""

# 352dd828f34d468680ea3bea8d3e31be
#: ../../intro/tutorial01.txt:479
msgid ""
"The :djadmin:`sql` command doesn't actually run the SQL in your database - "
"it just prints it to the screen so that you can see what SQL Django thinks "
"is required. If you wanted to, you could copy and paste this SQL into your "
"database prompt. However, as we will see shortly, Django provides an easier "
"way of committing the SQL to the database."
msgstr ""

# 7349110ab58b493d93162b935449d49e
#: ../../intro/tutorial01.txt:485
msgid "If you're interested, also run the following commands:"
msgstr ""

# 8fa7a7bf5a134a4db0ecb978379fab43
#: ../../intro/tutorial01.txt:487
msgid ""
":djadmin:`python manage.py validate <validate>` -- Checks for any errors in "
"the construction of your models."
msgstr ""

# 89cf0faa02354b83abb01199e9abf680
#: ../../intro/tutorial01.txt:490
msgid ""
":djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- Outputs any :ref:"
"`custom SQL statements <initial-sql>` (such as table modifications or "
"constraints) that are defined for the application."
msgstr ""

# 6f9e70a132114883b2324db20d52006b
#: ../../intro/tutorial01.txt:494
msgid ""
":djadmin:`python manage.py sqlclear polls <sqlclear>` -- Outputs the "
"necessary ``DROP TABLE`` statements for this app, according to which tables "
"already exist in your database (if any)."
msgstr ""

# 4ec9563ed5fa4da88f83da9a1f56fd3d
#: ../../intro/tutorial01.txt:498
msgid ""
":djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- Outputs the "
"``CREATE INDEX`` statements for this app."
msgstr ""

# 127c9329fa004773b8b33714b4704233
#: ../../intro/tutorial01.txt:501
msgid ""
":djadmin:`python manage.py sqlall polls <sqlall>` -- A combination of all "
"the SQL from the :djadmin:`sql`, :djadmin:`sqlcustom`, and :djadmin:"
"`sqlindexes` commands."
msgstr ""

# 3e2ca3ba2ded4761b732c04e0ec77ac5
#: ../../intro/tutorial01.txt:505
msgid ""
"Looking at the output of those commands can help you understand what's "
"actually happening under the hood."
msgstr ""

# 3b40d9ce57f146c1af72680f5a3a884d
#: ../../intro/tutorial01.txt:508
msgid ""
"Now, run :djadmin:`syncdb` again to create those model tables in your "
"database:"
msgstr ""

# 8439dfa7158e439394c60469f78da1b2
#: ../../intro/tutorial01.txt:514
msgid ""
"The :djadmin:`syncdb` command runs the SQL from :djadmin:`sqlall` on your "
"database for all apps in :setting:`INSTALLED_APPS` that don't already exist "
"in your database. This creates all the tables, initial data and indexes for "
"any apps you've added to your project since the last time you ran syncdb. :"
"djadmin:`syncdb` can be called as often as you like, and it will only ever "
"create the tables that don't exist."
msgstr ""

# 1877eab9fc9c4a77866e3893d904ef1b
#: ../../intro/tutorial01.txt:521
msgid ""
"Read the :doc:`django-admin.py documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""

# 33568de0dfce4ea79b862c13340b5a4a
#: ../../intro/tutorial01.txt:525
msgid "Playing with the API"
msgstr ""

# 2b702bf0c24c43fdb8d7d0e3dbe59fa5
#: ../../intro/tutorial01.txt:527
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""

# ecb1c235b3154be6ba0d613a92b081cc
#: ../../intro/tutorial01.txt:534
msgid ""
"We're using this instead of simply typing \"python\", because :file:`manage."
"py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives "
"Django the Python import path to your :file:`mysite/settings.py` file."
msgstr ""

# 47306229d4b34d5f8ecf41a2d827e960
#: ../../intro/tutorial01.txt:538
msgid "Bypassing manage.py"
msgstr ""

# 3878532f9d964449b6fb67ad8a32a45a
#: ../../intro/tutorial01.txt:540
msgid ""
"If you'd rather not use :file:`manage.py`, no problem. Just set the "
"``DJANGO_SETTINGS_MODULE`` environment variable to ``mysite.settings`` and "
"run ``python`` from the same directory :file:`manage.py` is in (or ensure "
"that directory is on the Python path, so that ``import mysite`` works)."
msgstr ""

# 0b9d990d8e52496eb493d85dc39a4810
#: ../../intro/tutorial01.txt:545
msgid ""
"For more information on all of this, see the :doc:`django-admin.py "
"documentation </ref/django-admin>`."
msgstr ""

# 898b4269d96c4412b54e0e8e06641d89
#: ../../intro/tutorial01.txt:548
msgid ""
"Once you're in the shell, explore the :doc:`database API </topics/db/"
"queries>`::"
msgstr ""

# 3ff6f0b5004b429381bcabbc84fa2250
#: ../../intro/tutorial01.txt:588
msgid ""
"Wait a minute. ``<Poll: Poll object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the polls model (in "
"the ``polls/models.py`` file) and adding a :meth:`~django.db.models.Model."
"__unicode__` method to both ``Poll`` and ``Choice``. On Python 3, simply "
"replace ``__unicode__`` by ``__str__`` in the following example::"
msgstr ""

# e0aae80baa81449aa258648e3e176e35
#: ../../intro/tutorial01.txt:605
msgid ""
"It's important to add :meth:`~django.db.models.Model.__unicode__` methods "
"(or :meth:`~django.db.models.Model.__str__` on Python 3) to your models, not "
"only for your own sanity when dealing with the interactive prompt, but also "
"because objects' representations are used throughout Django's automatically-"
"generated admin."
msgstr ""

# d1c6b3a95f9746f5a09fc5467f0ad8b8
#: ../../intro/tutorial01.txt:611
msgid ""
":meth:`~django.db.models.Model.__unicode__` or             :meth:`~django.db."
"models.Model.__str__`?"
msgstr ""

# 221132452eba45b1b8971c8b28e90331
#: ../../intro/tutorial01.txt:614
msgid ""
"On Python 3, things are simpler, just use :meth:`~django.db.models.Model."
"__str__` and forget about :meth:`~django.db.models.Model.__unicode__`."
msgstr ""

# 533a8f1767c54676ba723b2f7a2cb235
#: ../../intro/tutorial01.txt:618
msgid ""
"If you're familiar with Python 2, you might be in the habit of adding :meth:"
"`~django.db.models.Model.__str__` methods to your classes, not :meth:"
"`~django.db.models.Model.__unicode__` methods. We use :meth:`~django.db."
"models.Model.__unicode__` here because Django models deal with Unicode by "
"default. All data stored in your database is converted to Unicode when it's "
"returned."
msgstr ""

# 28a4d48f3a86431e968854e353d2abde
#: ../../intro/tutorial01.txt:625
msgid ""
"Django models have a default :meth:`~django.db.models.Model.__str__` method "
"that calls :meth:`~django.db.models.Model.__unicode__` and converts the "
"result to a UTF-8 bytestring. This means that ``unicode(p)`` will return a "
"Unicode string, and ``str(p)`` will return a normal string, with characters "
"encoded as UTF-8."
msgstr ""

# 63de1b795199499eb18a2e6969f854d0
#: ../../intro/tutorial01.txt:631
msgid ""
"If all of this is gibberish to you, just remember to add :meth:`~django.db."
"models.Model.__unicode__` methods to your models. With any luck, things "
"should Just Work for you."
msgstr ""

# 6f83577a5449420289b4a49941e3baf5
#: ../../intro/tutorial01.txt:629
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration::"
msgstr ""

# b4da9c8598a74110bfb2a8eeb87e48ce
#: ../../intro/tutorial01.txt:640
msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the :doc:`time zone support docs </topics/i18n/timezones>`."
msgstr ""

# 8173eea8c22b406a96d9591b2de49424
#: ../../intro/tutorial01.txt:646
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""

# 73cbd4f837b74d5e92dbbbf2055874af
#: ../../intro/tutorial01.txt:725
msgid ""
"For more information on model relations, see :doc:`Accessing related objects "
"</ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see :ref:`Field lookups <field-lookups-"
"intro>`. For full details on the database API, see our :doc:`Database API "
"reference </topics/db/queries>`."
msgstr ""

# ac9f0643a92d45bc9404835effa3c813
#: ../../intro/tutorial01.txt:731
msgid ""
"When you're comfortable with the API, read :doc:`part 2 of this tutorial </"
"intro/tutorial02>` to get Django's automatic admin working."
msgstr ""

# 161b79a180314947ad9f25e97beab3f3
#: ../../intro/tutorial02.txt:3
msgid "Writing your first Django app, part 2"
msgstr ""

# 25aef9932d234632a919f921a9a83e77
#: ../../intro/tutorial02.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We're continuing the Web-poll application and will focus on Django's "
"automatically-generated admin site."
msgstr ""

# 61ea69e4d9564d4b8c51f443ce5281b2
#: ../../intro/tutorial02.txt:11
msgid ""
"Generating admin sites for your staff or clients to add, change and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""

# 1bf144560d384954a705383a1c04a8d9
#: ../../intro/tutorial02.txt:15
msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""

# 8445fa3d01814b9faccfc28fc1350054
#: ../../intro/tutorial02.txt:21
msgid ""
"The admin isn't intended to be used by site visitors. It's for site managers."
msgstr ""

# 55149e13189349b68518e64aecc34c5d
#: ../../intro/tutorial02.txt:25
msgid "Activate the admin site"
msgstr ""

# ba71980c24d5486787a52799840b9a90
#: ../../intro/tutorial02.txt:27
msgid ""
"The Django admin site is not activated by default -- it's an opt-in thing. "
"To activate the admin site for your installation, do these three things:"
msgstr ""

# 5738c1a4fed34a5fa2d120311741a1b9
#: ../../intro/tutorial02.txt:30
msgid ""
"Uncomment ``\"django.contrib.admin\"`` in the :setting:`INSTALLED_APPS` "
"setting."
msgstr ""

# dfa68ab5d62d4874801833d2d639e55d
#: ../../intro/tutorial02.txt:32
msgid ""
"Run ``python manage.py syncdb``. Since you have added a new application to :"
"setting:`INSTALLED_APPS`, the database tables need to be updated."
msgstr ""

# 051565329257486ea59403dc094fe95e
#: ../../intro/tutorial02.txt:35
msgid ""
"Edit your ``mysite/urls.py`` file and uncomment the lines that reference the "
"admin -- there are three lines in total to uncomment. This file is a "
"URLconf; we'll dig into URLconfs in the next tutorial. For now, all you need "
"to know is that it maps URL roots to applications. In the end, you should "
"have a ``urls.py`` file that looks like this:"
msgstr ""

# fb072fb1277942e7a862d7613ee785d4
#: ../../intro/tutorial02.txt:61
msgid "(The bold lines are the ones that needed to be uncommented.)"
msgstr ""

# 30918bd2daac4edf9ddc28a1e957b25a
#: ../../intro/tutorial02.txt:64
msgid "Start the development server"
msgstr ""

# b93cd62060164799a3abfd1bb1e1dc19
#: ../../intro/tutorial02.txt:66
msgid "Let's start the development server and explore the admin site."
msgstr ""

# 30fdbb5eaf2d4a9281b793446ee96320
#: ../../intro/tutorial02.txt:68
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""

# 3ede1efce2984c71ba16bf8a82be6267
#: ../../intro/tutorial02.txt:74
msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""

# 058952c3793b459c9411d19c2ccc2f23
#: ../../intro/tutorial02.txt:82
msgid ""
"If at this point, instead of the above login page, you get an error page "
"reporting something like::"
msgstr ""

# 814331fb2ee94bc4a799790e4a522c62
#: ../../intro/tutorial02.txt:89
msgid ""
"then you're probably using a version of Django that doesn't match this "
"tutorial version. You'll want to either switch to the older tutorial or the "
"newer Django version."
msgstr ""

# 653227aab5f342179dd4bf93a5735526
#: ../../intro/tutorial02.txt:94
msgid "Enter the admin site"
msgstr ""

# c4a6e578d02f41b988867cc144208558
#: ../../intro/tutorial02.txt:96
msgid ""
"Now, try logging in. (You created a superuser account in the first part of "
"this tutorial, remember?  If you didn't create one or forgot the password "
"you can :ref:`create another one <topics-auth-creating-superusers>`.) You "
"should see the Django admin index page:"
msgstr ""

# c73891ed26a14ae58ea199d41c0f89fd
#: ../../intro/tutorial02.txt:104
msgid ""
"You should see a few types of editable content, including groups, users and "
"sites. These are core features Django ships with by default."
msgstr ""

# 76d9dd6327da48c185898d3059fe89a8
#: ../../intro/tutorial02.txt:108
msgid "Make the poll app modifiable in the admin"
msgstr ""

# a3532e04387a437f9b51a683723aa4d1
#: ../../intro/tutorial02.txt:110
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""

# fba0672921ae4cd194da8ba481ad7721
#: ../../intro/tutorial02.txt:112
msgid ""
"Just one thing to do: we need to tell the admin that ``Poll`` objects have "
"an admin interface. To do this, create a file called :file:`admin.py` in "
"your ``polls`` directory, and edit it to look like this::"
msgstr ""

# 9484a56585624042ad647eef29efe852
#: ../../intro/tutorial02.txt:121
msgid ""
"You'll need to restart the development server to see your changes. Normally, "
"the server auto-reloads code every time you modify a file, but the action of "
"creating a new file doesn't trigger the auto-reloading logic."
msgstr ""

# 01402fbf67e94eb9bbe4781c3a861143
#: ../../intro/tutorial02.txt:126
msgid "Explore the free admin functionality"
msgstr ""

# fc759829e97645249e2172956efed697
#: ../../intro/tutorial02.txt:128
msgid ""
"Now that we've registered ``Poll``, Django knows that it should be displayed "
"on the admin index page:"
msgstr ""

# 52c8620bd2454697979427c3e6564d0e
#: ../../intro/tutorial02.txt:134
msgid ""
"Click \"Polls.\" Now you're at the \"change list\" page for polls. This page "
"displays all the polls in the database and lets you choose one to change it. "
"There's the \"What's up?\" poll we created in the first tutorial:"
msgstr ""

# 2cf55607c66c4307bce70607ad094a50
#: ../../intro/tutorial02.txt:141
msgid "Click the \"What's up?\" poll to edit it:"
msgstr ""

# 0a03275f98d94100b8d7cb8dd71ccfde
#: ../../intro/tutorial02.txt:146
msgid "Things to note here:"
msgstr ""

# 582476008ecb4df387c858bab26be95d
#: ../../intro/tutorial02.txt:148
msgid "The form is automatically generated from the Poll model."
msgstr ""

# 00cfd15bc753456a88b849e4e6295da4
#: ../../intro/tutorial02.txt:150
msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, :"
"class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""

# 364f76f6afe5446bb3a72dd4a93402d1
#: ../../intro/tutorial02.txt:155
msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""

# 3b022cfab8c44dc2b84a460f463cdca9
#: ../../intro/tutorial02.txt:159
msgid "The bottom part of the page gives you a couple of options:"
msgstr ""

# 906e003aaf604d068d86f772612cafbf
#: ../../intro/tutorial02.txt:161
msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""

# f29827d3be5a4674b73bc185269c5f3e
#: ../../intro/tutorial02.txt:164
msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""

# 17fd833fab0b4e6b8c13b99daf200e34
#: ../../intro/tutorial02.txt:167
msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""

# 2f0dd23ab7ee42a18091374b01dbb331
#: ../../intro/tutorial02.txt:170
msgid "Delete -- Displays a delete confirmation page."
msgstr ""

# e6b4019497814d9288685b12661dfbd8
#: ../../intro/tutorial02.txt:172
msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the poll in Tutorial 1, it probably means you forgot to set the correct "
"value for the :setting:`TIME_ZONE` setting. Change it, reload the page and "
"check that the correct value appears."
msgstr ""

# baa70f22fcce4a1abb7d08abd1220c97
#: ../../intro/tutorial02.txt:177
msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""

# b9b8b04ebbf04b86aa5a00783181451b
#: ../../intro/tutorial02.txt:186
msgid "Customize the admin form"
msgstr ""

# 8ea4ca3faee34d11961b6279d5974ccd
#: ../../intro/tutorial02.txt:188
msgid ""
"Take a few minutes to marvel at all the code you didn't have to write. By "
"registering the Poll model with ``admin.site.register(Poll)``, Django was "
"able to construct a default form representation. Often, you'll want to "
"customize how the admin form looks and works. You'll do this by telling "
"Django the options you want when you register the object."
msgstr ""

# daa50f2cddbf4b4689769d8dcdf2d1cb
#: ../../intro/tutorial02.txt:194
msgid ""
"Let's see how this works by re-ordering the fields on the edit form. Replace "
"the ``admin.site.register(Poll)`` line with::"
msgstr ""

# 6ad8de7c75bc4523b5f5e01b4fd1d132
#: ../../intro/tutorial02.txt:202
msgid ""
"You'll follow this pattern -- create a model admin object, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for an object."
msgstr ""

# f15048f7085a43afb84427a3a29140ab
#: ../../intro/tutorial02.txt:206
msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""

# 14e92b15d67649c49ba2360e02bedd32
#: ../../intro/tutorial02.txt:212
msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""

# 3b8a393cf7d74dbc8425ce836b6bd868
#: ../../intro/tutorial02.txt:215
msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets::"
msgstr ""

# dc662d3beb0f4ec08276ded4584a8a1a
#: ../../intro/tutorial02.txt:226
msgid ""
"The first element of each tuple in ``fieldsets`` is the title of the "
"fieldset. Here's what our form looks like now:"
msgstr ""

# 5b14c20d6c7146859765d7c209401118
#: ../../intro/tutorial02.txt:232
msgid ""
"You can assign arbitrary HTML classes to each fieldset. Django provides a ``"
"\"collapse\"`` class that displays a particular fieldset initially "
"collapsed. This is useful when you have a long form that contains a number "
"of fields that aren't commonly used::"
msgstr ""

# edae7c778f1c4cd4a994800cfd37ecdc
#: ../../intro/tutorial02.txt:247
msgid "Adding related objects"
msgstr ""

# 560a36d7b719428da80a76e8bc32b04b
#: ../../intro/tutorial02.txt:249
msgid ""
"OK, we have our Poll admin page. But a ``Poll`` has multiple ``Choices``, "
"and the admin page doesn't display choices."
msgstr ""

# 22cb59c983a44a6daaa9179ff66ae764
#: ../../intro/tutorial02.txt:252
msgid "Yet."
msgstr ""

# 7af7d0af3bdb4164b9f09be63970bdd0
#: ../../intro/tutorial02.txt:254
msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Poll``. That's easy::"
msgstr ""

# 05ac7c101e3c4e768aaeea0064342af6
#: ../../intro/tutorial02.txt:261
msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add choice"
"\" form looks like this:"
msgstr ""

# e772f2cd90614880beaa59ecfef94a1d
#: ../../intro/tutorial02.txt:267
msgid ""
"In that form, the \"Poll\" field is a select box containing every poll in "
"the database. Django knows that a :class:`~django.db.models.ForeignKey` "
"should be represented in the admin as a ``<select>`` box. In our case, only "
"one poll exists at this point."
msgstr ""

# 9e7156c5118749cf80a5a6819a70b637
#: ../../intro/tutorial02.txt:272
msgid ""
"Also note the \"Add Another\" link next to \"Poll.\" Every object with a "
"``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another,\" you'll get a popup window with the \"Add poll\" form. If "
"you add a poll in that window and click \"Save,\" Django will save the poll "
"to the database and dynamically add it as the selected choice on the \"Add "
"choice\" form you're looking at."
msgstr ""

# 329114e0a4974e8eae746870e50f6cd5
#: ../../intro/tutorial02.txt:279
msgid ""
"But, really, this is an inefficient way of adding ``Choice`` objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you "
"create the ``Poll`` object. Let's make that happen."
msgstr ""

# ac41d80ed0e84721acaeb1508c33c153
#: ../../intro/tutorial02.txt:283
msgid ""
"Remove the ``register()`` call for the ``Choice`` model. Then, edit the "
"``Poll`` registration code to read::"
msgstr ""

# 73c81d20af2b4d76b396a94301fd3a2f
#: ../../intro/tutorial02.txt:302
msgid ""
"This tells Django: \"``Choice`` objects are edited on the ``Poll`` admin "
"page. By default, provide enough fields for 3 choices.\""
msgstr ""

# de612a9cd5504aecb3fa093843b5474f
#: ../../intro/tutorial02.txt:305
msgid ""
"Load the \"Add poll\" page to see how that looks, you may need to restart "
"your development server:"
msgstr ""

# eff26888739c4e1695e7f04a86258b6a
#: ../../intro/tutorial02.txt:310
msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page "
"for an already-created object, you get another three extra slots."
msgstr ""

# 51b795ae768e4d419be9dd17b170bd45
#: ../../intro/tutorial02.txt:314
msgid ""
"At the end of the three current slots you will find an \"Add another Choice"
"\" link.  If you click on it, a new slot will be added. If you want to "
"remove the added slot, you can click on the X to the top right of the added "
"slot. Note that you can't remove the original three slots. This image shows "
"an added slot:"
msgstr ""

# 78a7db4dd1294fe18099186021a61143
#: ../../intro/tutorial02.txt:322
msgid ""
"One small problem, though. It takes a lot of screen space to display all the "
"fields for entering related ``Choice`` objects. For that reason, Django "
"offers a tabular way of displaying inline related objects; you just need to "
"change the ``ChoiceInline`` declaration to read::"
msgstr ""

# 6e3415f8d6a243f296a9f6594e1387ae
#: ../../intro/tutorial02.txt:330
msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""

# 7ddeae1edc834d549837e821394cd650
#: ../../intro/tutorial02.txt:336
msgid ""
"Note that there is an extra \"Delete?\" column that allows removing rows "
"added using the \"Add Another Choice\" button and rows that have already "
"been saved."
msgstr ""

# 8067ae7085364628bfaf6a709e9a6d97
#: ../../intro/tutorial02.txt:340
msgid "Customize the admin change list"
msgstr ""

# 6c14baf28ed141f88e725067a85a4e1b
#: ../../intro/tutorial02.txt:342
msgid ""
"Now that the Poll admin page is looking good, let's make some tweaks to the "
"\"change list\" page -- the one that displays all the polls in the system."
msgstr ""

# 5716fe5b47ae4486b9fb1a58189f5e57
#: ../../intro/tutorial02.txt:345
msgid "Here's what it looks like at this point:"
msgstr ""

# 22beeb93720442688b58738c94ad2ce8
#: ../../intro/tutorial02.txt:350
msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd "
"be more helpful if we could display individual fields. To do that, use the "
"``list_display`` admin option, which is a tuple of field names to display, "
"as columns, on the change list page for the object::"
msgstr ""

# 0197d1d490bc411182128574872eb106
#: ../../intro/tutorial02.txt:359
msgid ""
"Just for good measure, let's also include the ``was_published_recently`` "
"custom method from Tutorial 1::"
msgstr ""

# dd5cca3ce0e24eeb89b6c56bba52bae4
#: ../../intro/tutorial02.txt:366
msgid "Now the poll change list page looks like this:"
msgstr ""

# 9b4cf4fedb234ea48b74d3ff9ed45519
#: ../../intro/tutorial02.txt:371
msgid ""
"You can click on the column headers to sort by those values -- except in the "
"case of the ``was_published_recently`` header, because sorting by the output "
"of an arbitrary method is not supported. Also note that the column header "
"for ``was_published_recently`` is, by default, the name of the method (with "
"underscores replaced with spaces), and that each line contains the string "
"representation of the output."
msgstr ""

# 4122398e7cbd4fd3be8f1ec72098c0dd
#: ../../intro/tutorial02.txt:378
msgid ""
"You can improve that by giving that method (in :file:`polls/models.py`) a "
"few attributes, as follows::"
msgstr ""

# ea5958c26ae44ad5a0c188568186b14e
#: ../../intro/tutorial02.txt:389
msgid ""
"Edit your :file:`polls/admin.py` file again and add an improvement to the "
"Poll change list page: Filters. Add the following line to ``PollAdmin``::"
msgstr ""

# 476e5a846503407185d3ffcc20e3ccfe
#: ../../intro/tutorial02.txt:394
msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""

# 6ca21476029242fa91f2a906532f520e
#: ../../intro/tutorial02.txt:400
msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, "
"Django knows to give appropriate filter options: \"Any date,\" \"Today,\" "
"\"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""

# 5157f351c36d4ff9ba14e1aa26b5e283
#: ../../intro/tutorial02.txt:405
msgid "This is shaping up well. Let's add some search capability::"
msgstr ""

# 5761fb6b0ca34bd983fa1cc6a03b9049
#: ../../intro/tutorial02.txt:409
msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question`` field. You can use as many "
"fields as you'd like -- although because it uses a ``LIKE`` query behind the "
"scenes, keep it reasonable, to keep your database happy."
msgstr ""

# d20820b67fb240ab859067082f457e5b
#: ../../intro/tutorial02.txt:414
msgid ""
"Finally, because ``Poll`` objects have dates, it'd be convenient to be able "
"to drill down by date. Add this line::"
msgstr ""

# 41fc5791244743ba96b2d777237627d4
#: ../../intro/tutorial02.txt:419
msgid ""
"That adds hierarchical navigation, by date, to the top of the change list "
"page. At top level, it displays all available years. Then it drills down to "
"months and, ultimately, days."
msgstr ""

# aaf0a9214aa04ae597938313c5ff33ba
#: ../../intro/tutorial02.txt:423
msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. Change-list pagination, search "
"boxes, filters, date-hierarchies and column-header-ordering all work "
"together like you think they should."
msgstr ""

# 4fd2532ada124515a41361641ffe016c
#: ../../intro/tutorial02.txt:429
msgid "Customize the admin look and feel"
msgstr ""

# ca506017f0974d1e8b486c78f0f70867
#: ../../intro/tutorial02.txt:431
msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""

# b2353d3bce1649668656fc770829d630
#: ../../intro/tutorial02.txt:434
msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""

# 292fa5d927f144ad84c9de5128400374
#: ../../intro/tutorial02.txt:441
msgid "Customizing your *project's* templates"
msgstr ""

# 1745f90e395e499ab7d3501920e9c0eb
#: ../../intro/tutorial02.txt:443
msgid ""
"Create a ``templates`` directory in your project directory. Templates can "
"live anywhere on your filesystem that Django can access. (Django runs as "
"whatever user your server runs.) However, keeping your templates within the "
"project is a good convention to follow."
msgstr ""

# 25468e6dd696421a86c8f3bc5da2118d
#: ../../intro/tutorial02.txt:448
msgid ""
"Open your settings file (:file:`mysite/settings.py`, remember) and add a :"
"setting:`TEMPLATE_DIRS` setting::"
msgstr ""

# 60881c0fec094a4cb9dd350fff803968
#: ../../intro/tutorial02.txt:455
msgid ""
"Now copy the template ``admin/base_site.html`` from within the default "
"Django admin template directory in the source code of Django itself "
"(``django/contrib/admin/templates``) into an ``admin`` subdirectory of "
"whichever directory you're using in :setting:`TEMPLATE_DIRS`. For example, "
"if your :setting:`TEMPLATE_DIRS` includes ``'/path/to/mysite/templates'``, "
"as above, then copy ``django/contrib/admin/templates/admin/base_site.html`` "
"to ``/path/to/mysite/templates/admin/base_site.html``. Don't forget that "
"``admin`` subdirectory."
msgstr ""

# 5ba50bae04964fe98040d37156042e6f
#: ../../intro/tutorial02.txt:464
msgid "Where are the Django source files?"
msgstr ""

# 210906ce62ca48d896a2237fc22f69fa
#: ../../intro/tutorial02.txt:466
msgid ""
"If you have difficulty finding where the Django source files are located on "
"your system, run the following command:"
msgstr ""

# f6cec04afd8d4e419675e3c3e0d02c30
#: ../../intro/tutorial02.txt:477
msgid ""
"Then, just edit the file and replace the generic Django text with your own "
"site's name as you see fit."
msgstr ""

# a96dc26e4d3c48d48edb549709d994a4
#: ../../intro/tutorial02.txt:480
msgid ""
"This template file contains lots of text like ``{% block branding %}`` and "
"``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page. Don't worry if "
"you can't make any sense of the template right now -- we'll delve into "
"Django's templating language in Tutorial 3."
msgstr ""

# 50df6c0f1cc24c9c811da1bfb8decd57
#: ../../intro/tutorial02.txt:487
msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""

# 2eb5ad21a356474ab362739b56bcbca5
#: ../../intro/tutorial02.txt:493
msgid "Customizing your *application's* templates"
msgstr ""

# 18f81ac0dfbc4f50a4a1424d72fba003
#: ../../intro/tutorial02.txt:495
msgid ""
"Astute readers will ask: But if :setting:`TEMPLATE_DIRS` was empty by "
"default, how was Django finding the default admin templates? The answer is "
"that, by default, Django automatically looks for a ``templates/`` "
"subdirectory within each application package, for use as a fallback (don't "
"forget that ``django.contrib.admin`` is an application)."
msgstr ""

# 5eb2cfc0eaa1439ea4091c08107ea311
#: ../../intro/tutorial02.txt:501
msgid ""
"Our poll application is not very complex and doesn't need custom admin "
"templates. But if it grew more sophisticated and required modification of "
"Django's standard admin templates for some of its functionality, it would be "
"more sensible to modify the *application's* templates, rather than those in "
"the *project*. That way, you could include the polls application in any new "
"project and be assured that it would find the custom templates it needed."
msgstr ""

# b4780dd7b3144ca2be9023e230d4bec4
#: ../../intro/tutorial02.txt:508
msgid ""
"See the :ref:`template loader documentation <template-loaders>` for more "
"information about how Django finds its templates."
msgstr ""

# afb58535338a4a8a887d97e6cfce46b2
#: ../../intro/tutorial02.txt:512
msgid "Customize the admin index page"
msgstr ""

# 1b2d14eaa8ac4387b8025236254a08ef
#: ../../intro/tutorial02.txt:514
msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""

# 6b1dd770f05340c4aa76a02e32993388
#: ../../intro/tutorial02.txt:517
msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""

# e2a0a9a6f29f4c08a75b17e3c428222e
#: ../../intro/tutorial02.txt:522
msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default "
"directory to your custom template directory.) Edit the file, and you'll see "
"it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best. Again, "
"don't worry if you can't understand the template language -- we'll cover "
"that in more detail in Tutorial 3."
msgstr ""

# 76c44e88d71a4260a5b5ba9b74beb906
#: ../../intro/tutorial02.txt:531
msgid ""
"When you're comfortable with the admin site, read :doc:`part 3 of this "
"tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""

# 56b7aaa9502f4470a4038f28f6851ec3
#: ../../intro/tutorial03.txt:3
msgid "Writing your first Django app, part 3"
msgstr ""

# ab8271c79cc74a20a24a0c3848c8b1ff
#: ../../intro/tutorial03.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. "
"We're continuing the Web-poll application and will focus on creating the "
"public interface -- \"views.\""
msgstr ""

# 7d9c8ae43562487290fc783380d9c899
#: ../../intro/tutorial03.txt:12
msgid ""
"A view is a \"type\" of Web page in your Django application that generally "
"serves a specific function and has a specific template. For example, in a "
"blog application, you might have the following views:"
msgstr ""

# 2ee07530367c4e0fbeb0ca70a6582338
#: ../../intro/tutorial03.txt:16
msgid "Blog homepage -- displays the latest few entries."
msgstr ""

# 99395fce8cc147c99aa448f49fad50d4
#: ../../intro/tutorial03.txt:18
msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr ""

# 7fb06f2547914ee8acb830935e0cfd58
#: ../../intro/tutorial03.txt:20
msgid ""
"Year-based archive page -- displays all months with entries in the given "
"year."
msgstr ""

# e544f8bf8ca849d5aa11afbb2ad94ba5
#: ../../intro/tutorial03.txt:23
msgid ""
"Month-based archive page -- displays all days with entries in the given "
"month."
msgstr ""

# 28ec0b63ed744e04ab64ccda0172ceb9
#: ../../intro/tutorial03.txt:26
msgid "Day-based archive page -- displays all entries in the given day."
msgstr ""

# a18403c519c14f108d1cc3ece95987f5
#: ../../intro/tutorial03.txt:28
msgid "Comment action -- handles posting comments to a given entry."
msgstr ""

# a046314273c2446a8b7c49b051934188
#: ../../intro/tutorial03.txt:30
msgid "In our poll application, we'll have the following four views:"
msgstr ""

# ff64003794eb460cafbb891318d69353
#: ../../intro/tutorial03.txt:32
msgid "Poll \"index\" page -- displays the latest few polls."
msgstr ""

# 1a183da9a9d24ac0a8eae95fbe77052b
#: ../../intro/tutorial03.txt:34
msgid ""
"Poll \"detail\" page -- displays a poll question, with no results but with a "
"form to vote."
msgstr ""

# b57cf131cd174f9eb6e6eb14d87b18d4
#: ../../intro/tutorial03.txt:37
msgid "Poll \"results\" page -- displays results for a particular poll."
msgstr ""

# d20ae3aad91b44d5abc7dbec5e66348b
#: ../../intro/tutorial03.txt:39
msgid ""
"Vote action -- handles voting for a particular choice in a particular poll."
msgstr ""

# 97d0e7e1808b49bc8c6f41dc320fb77d
#: ../../intro/tutorial03.txt:42
msgid ""
"In Django, web pages and other content are delivered by views. Each view is "
"represented by a simple Python function (or method, in the case of class-"
"based views). Django will choose a view by examining the URL that's "
"requested (to be precise, the part of the URL after the domain name)."
msgstr ""

# 8f1f0be6b5d04d91ad13e9bd54b6d961
#: ../../intro/tutorial03.txt:47
msgid ""
"Now in your time on the web you may have come across such beauties as \"ME2/"
"Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\". "
"You will be pleased to know that Django allows us much more elegant *URL "
"patterns* than that."
msgstr ""

# 7cbda8665d1a43ddb11d2feeac8dedfa
#: ../../intro/tutorial03.txt:52
msgid ""
"A URL pattern is simply the general form of a URL - for example: ``/"
"newsarchive/<year>/<month>/``."
msgstr ""

# 8ece3557011f430d8d7fb7d351aa36e4
#: ../../intro/tutorial03.txt:55
msgid ""
"To get from a URL to a view, Django uses what are known as 'URLconfs'. A "
"URLconf maps URL patterns (described as regular expressions) to views."
msgstr ""

# 0006e2c72e104bb98954ab5658a0e25d
#: ../../intro/tutorial03.txt:58
msgid ""
"This tutorial provides basic instruction in the use of URLconfs, and you can "
"refer to :mod:`django.core.urlresolvers` for more information."
msgstr ""

# 895491977d2d47129cb241c0726fb2b6
#: ../../intro/tutorial03.txt:62
msgid "Write your first view"
msgstr ""

# 4e92c84f2d53429981e9be23b63a9e32
#: ../../intro/tutorial03.txt:64
msgid ""
"Let's write the first view. Open the file ``polls/views.py`` and put the "
"following Python code in it::"
msgstr ""

# f4a6aa7e28bd43ef94e04b4a507fb402
#: ../../intro/tutorial03.txt:72
msgid ""
"This is the simplest view possible in Django. To call the view, we need to "
"map it to a URL - and for this we need a URLconf."
msgstr ""

# 2027d853aa894b479d4cc97157bed8e8
#: ../../intro/tutorial03.txt:75
msgid ""
"To create a URLconf in the polls directory, create a file called ``urls."
"py``. Your app directory should now look like::"
msgstr ""

# 720c2c88dd4146ee8c71318349ae0ed0
#: ../../intro/tutorial03.txt:86
msgid "In the ``polls/urls.py`` file include the following code::"
msgstr ""

# f811abc1e32f4bd9b4544a7720c59bae
#: ../../intro/tutorial03.txt:96
msgid ""
"The next step is to point the root URLconf at the ``polls.urls`` module. In "
"``mysite/urls.py`` insert an :func:`~django.conf.urls.include`, leaving you "
"with::"
msgstr ""

# 5032b5e836a2418489f99be26c4e187b
#: ../../intro/tutorial03.txt:110
msgid ""
"You have now wired an ``index`` view into the URLconf. Go to http://"
"localhost:8000/polls/ in your browser, and you should see the text \"*Hello, "
"world. You're at the poll index.*\", which you defined in the ``index`` view."
msgstr ""

# 6bf54f0abbe74a4e96de5107bd9cc326
#: ../../intro/tutorial03.txt:115
msgid ""
"The :func:`~django.conf.urls.url` function is passed four arguments, two "
"required: ``regex`` and ``view``, and two optional: ``kwargs``, and "
"``name``. At this point, it's worth reviewing what these arguments are for."
msgstr ""

# 4f33b3d71f5045d283337d93edc8d1a7
#: ../../intro/tutorial03.txt:120
msgid ":func:`~django.conf.urls.url` argument: regex"
msgstr ""

# bb010a7c2bb2429db187d6f1839ccad4
#: ../../intro/tutorial03.txt:122
msgid ""
"The term \"regex\" is a commonly used short form meaning \"regular expression"
"\", which is a syntax for matching patterns in strings, or in this case, url "
"patterns. Django starts at the first regular expression and makes its way "
"down the list,  comparing the requested URL against each regular expression "
"until it finds one that matches."
msgstr ""

# 4b9a37a96884468daa429f5bfa1b5990
#: ../../intro/tutorial03.txt:128
msgid ""
"Note that these regular expressions do not search GET and POST parameters, "
"or the domain name. For example, in a request to ``http://www.example.com/"
"myapp/``, the URLconf will look for ``myapp/``. In a request to ``http://www."
"example.com/myapp/?page=3``, the URLconf will also look for ``myapp/``."
msgstr ""

# 8171c7599a204a55b86cc6d51e745a3f
#: ../../intro/tutorial03.txt:134
msgid ""
"If you need help with regular expressions, see `Wikipedia's entry`_ and the "
"documentation of the :mod:`re` module. Also, the O'Reilly book \"Mastering "
"Regular Expressions\" by Jeffrey Friedl is fantastic. In practice, however, "
"you don't need to be an expert on regular expressions, as you really only "
"need to know how to capture simple patterns. In fact, complex regexes can "
"have poor lookup performance, so you probably shouldn't rely on the full "
"power of regexes."
msgstr ""

# cdfc6f34356d42cb9e94c7f77eb6ae8c
#: ../../intro/tutorial03.txt:141
msgid ""
"Finally, a performance note: these regular expressions are compiled the "
"first time the URLconf module is loaded. They're super fast (as long as the "
"lookups aren't too complex as noted above)."
msgstr ""

# 9b0c4c13f33043939f1459fa9c9e9e87
#: ../../intro/tutorial03.txt:148
msgid ":func:`~django.conf.urls.url` argument: view"
msgstr ""

# e5091e8e7cfd4a189ea35642703897fb
#: ../../intro/tutorial03.txt:150
msgid ""
"When Django finds a regular expression match, Django calls the specified "
"view function, with an :class:`~django.http.HttpRequest` object as the first "
"argument and any “captured” values from the regular expression as other "
"arguments. If the regex uses simple captures, values are passed as "
"positional arguments; if it uses named captures, values are passed as "
"keyword arguments. We'll give an example of this in a bit."
msgstr ""

# b29d04eb73c948de8590a15ae1d64fe1
#: ../../intro/tutorial03.txt:158
msgid ":func:`~django.conf.urls.url` argument: kwargs"
msgstr ""

# c4f86b5ab31149938da5f7bb08a86438
#: ../../intro/tutorial03.txt:160
msgid ""
"Arbitrary keyword arguments can be passed in a dictionary to the target "
"view. We aren't going to use this feature of Django in the tutorial."
msgstr ""

# ae19eae9517d4e5fb9a7fc0c9d659358
#: ../../intro/tutorial03.txt:164
msgid ":func:`~django.conf.urls.url` argument: name"
msgstr ""

# 3967784a4c9d4ed9b98eaa8d59d44035
#: ../../intro/tutorial03.txt:166
msgid ""
"Naming your URL lets you refer to it unambiguously from elsewhere in Django "
"especially templates. This powerful feature allows you to make  global "
"changes to the url patterns of your project while only touching a single "
"file."
msgstr ""

# 95249b35511749b98a66c84ce03ea874
#: ../../intro/tutorial03.txt:171
msgid "Writing more views"
msgstr ""

# 84ae095734334a7c93a9305d24767871
#: ../../intro/tutorial03.txt:173
msgid ""
"Now let's add a few more views to ``polls/views.py``. These views are "
"slightly different, because they take an argument::"
msgstr ""

# 9288a407282d406bb079361b7c059aa3
#: ../../intro/tutorial03.txt:185
msgid ""
"Wire these new views into the ``polls.urls`` module by adding the following :"
"func:`~django.conf.urls.url` calls::"
msgstr ""

# 4ea61ca79ee345e88c7559e6f0947e3c
#: ../../intro/tutorial03.txt:203
msgid ""
"Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` "
"method and display whatever ID you provide in the URL. Try \"/polls/34/"
"results/\" and \"/polls/34/vote/\" too -- these will display the placeholder "
"results and voting pages."
msgstr ""

# 86c57c69ba1449bfb8f4c3c1ed9d0cd7
#: ../../intro/tutorial03.txt:208
msgid ""
"When somebody requests a page from your Web site -- say, \"/polls/34/\", "
"Django will load the ``mysite.urls`` Python module because it's pointed to "
"by the :setting:`ROOT_URLCONF` setting. It finds the variable named "
"``urlpatterns`` and traverses the regular expressions in order. The :func:"
"`~django.conf.urls.include` functions we are using simply reference other "
"URLconfs. Note that the regular expressions for the :func:`~django.conf.urls."
"include` functions don't have a ``$`` (end-of-string match character) but "
"rather a trailing slash. Whenever Django encounters :func:`~django.conf.urls."
"include`, it chops off whatever part of the URL matched up to that point and "
"sends the remaining string to the included URLconf for further processing."
msgstr ""

# cf23bac5302a4808bef275beaf2d0050
#: ../../intro/tutorial03.txt:220
msgid ""
"The idea behind :func:`~django.conf.urls.include` is to make it easy to plug-"
"and-play URLs. Since polls are in their own URLconf (``polls/urls.py``), "
"they can be placed under \"/polls/\", or under \"/fun_polls/\", or under \"/"
"content/polls/\", or any other path root, and the app will still work."
msgstr ""

# 05114167781e47bb8b64b675761697b5
#: ../../intro/tutorial03.txt:226
msgid "Here's what happens if a user goes to \"/polls/34/\" in this system:"
msgstr ""

# ae7babb90e6e42f0a5270a0ff44aa20c
#: ../../intro/tutorial03.txt:228
msgid "Django will find the match at ``'^polls/'``"
msgstr ""

# 4e7bd7e7c5e244759a13bc2f1bfdfa9a
#: ../../intro/tutorial03.txt:230
msgid ""
"Then, Django will strip off the matching text (``\"polls/\"``) and send the "
"remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further "
"processing which matches ``r'^(?P<poll_id>\\d+)/$'`` resulting in a call to "
"the ``detail()`` view like so::"
msgstr ""

# 97deee4e866c414e94668e5aa8813993
#: ../../intro/tutorial03.txt:237
msgid ""
"The ``poll_id='34'`` part comes from ``(?P<poll_id>\\d+)``. Using "
"parentheses around a pattern \"captures\" the text matched by that pattern "
"and sends it as an argument to the view function; ``?P<poll_id>`` defines "
"the name that will be used to identify the matched pattern; and ``\\d+`` is "
"a regular expression to match a sequence of digits (i.e., a number)."
msgstr ""

# 8d6e5594b6fd401f96dcc61c1a75a8f3
#: ../../intro/tutorial03.txt:243
msgid ""
"Because the URL patterns are regular expressions, there really is no limit "
"on what you can do with them. And there's no need to add URL cruft such as "
"``.html`` -- unless you want to, in which case you can do something like "
"this::"
msgstr ""

# 6e1880b7fcaa4dd29d4c86f695e558b6
#: ../../intro/tutorial03.txt:250
msgid "But, don't do that. It's silly."
msgstr ""

# d891f8427a9f4ac099cc1b06f564928f
#: ../../intro/tutorial03.txt:253
msgid "Write views that actually do something"
msgstr ""

# 943953cfb3ad4d889be197e3284b5509
#: ../../intro/tutorial03.txt:255
msgid ""
"Each view is responsible for doing one of two things: returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :exc:`~django.http.Http404`. The rest "
"is up to you."
msgstr ""

# 277676eaa5394e7b90bf25a1405c63c2
#: ../../intro/tutorial03.txt:260
msgid ""
"Your view can read records from a database, or not. It can use a template "
"system such as Django's -- or a third-party Python template system -- or "
"not. It can generate a PDF file, output XML, create a ZIP file on the fly, "
"anything you want, using whatever Python libraries you want."
msgstr ""

# 504f3c26b71d4345a36dbdbc75eafa8e
#: ../../intro/tutorial03.txt:265
msgid ""
"All Django wants is that :class:`~django.http.HttpResponse`. Or an exception."
msgstr ""

# dabf15d0324b410883c74ba91338cad6
#: ../../intro/tutorial03.txt:267
msgid ""
"Because it's convenient, let's use Django's own database API, which we "
"covered in :doc:`Tutorial 1 </intro/tutorial01>`. Here's one stab at the "
"``index()`` view, which displays the latest 5 poll questions in the system, "
"separated by commas, according to publication date::"
msgstr ""

# fa4bd85f92c5447fa8934ee43679eaad
#: ../../intro/tutorial03.txt:281
msgid ""
"There's a problem here, though: the page's design is hard-coded in the view. "
"If you want to change the way the page looks, you'll have to edit this "
"Python code. So let's use Django's template system to separate the design "
"from Python by creating a template that the view can use."
msgstr ""

# b81baca46d4c429a916c68e1f2483f0d
#: ../../intro/tutorial03.txt:286
msgid ""
"First, create a directory called ``templates`` in your ``polls`` directory. "
"Django will look for templates in there."
msgstr ""

# 9c25d2e536184edcb15878960d19d4e8
#: ../../intro/tutorial03.txt:289
msgid ""
"Django's :setting:`TEMPLATE_LOADERS` setting contains a list of callables "
"that know how to import templates from various sources. One of the defaults "
"is :class:`django.template.loaders.app_directories.Loader` which looks for a "
"\"templates\" subdirectory in each of the :setting:`INSTALLED_APPS` - this "
"is how Django knows to find the polls templates even though we didn't "
"modify :setting:`TEMPLATE_DIRS`, as we did in :ref:`Tutorial 2 <ref-"
"customizing-your-projects-templates>`."
msgstr ""

# 5732ed12dffa45e4bcf8f2ff48f057f3
#: ../../intro/tutorial03.txt:297
msgid "Organizing templates"
msgstr ""

# be7f0f167f1b4233bf7b84ced9216a13
#: ../../intro/tutorial03.txt:299
msgid ""
"We *could* have all our templates together, in one big templates directory, "
"and it would work perfectly well. However, this template belongs to the "
"polls application, so unlike the admin template we created in the previous "
"tutorial, we'll put this one in the application's template directory "
"(``polls/templates``) rather than the project's (``templates``). We'll "
"discuss in more detail in the :doc:`reusable apps tutorial </intro/reusable-"
"apps>` *why* we do this."
msgstr ""

# 7698609b855a4a759a4ae3cca2b03891
#: ../../intro/tutorial03.txt:307
msgid ""
"Within the ``templates`` directory you have just created, create another "
"directory called ``polls``, and within that create a file called ``index."
"html``. In other words, your template should be at ``polls/templates/polls/"
"index.html``. Because of how the ``app_directories`` template loader works "
"as described above, you can refer to this template within Django simply as "
"``polls/index.html``."
msgstr ""

# adeda0ac9b3e46b2bbba3f79a07cc50a
#: ../../intro/tutorial03.txt:314
msgid "Template namespacing"
msgstr ""

# caa8d545a7934db9b7dc343695975371
#: ../../intro/tutorial03.txt:316
msgid ""
"Now we *might* be able to get away with putting our templates directly in "
"``polls/templates`` (rather than creating another ``polls`` subdirectory), "
"but it would actually be a bad idea. Django will choose the first template "
"it finds whose name matches, and if you had a template with the same name in "
"a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"templates inside *another* directory named for the application itself."
msgstr ""

# 1cffc24e7f5e4ce099365cc4ecbdb413
#: ../../intro/tutorial03.txt:325
msgid "Put the following code in that template:"
msgstr ""

# bcd2309c2cdc426786dcedf007ef98f3
#: ../../intro/tutorial03.txt:339
msgid ""
"Now let's update our ``index`` view in ``polls/views.py`` to use the "
"template::"
msgstr ""

# 0da4bb92e1224af3ae86318cf530bebb
#: ../../intro/tutorial03.txt:354
msgid ""
"That code loads the template called  ``polls/index.html`` and passes it a "
"context. The context is a dictionary mapping template variable names to "
"Python objects."
msgstr ""

# 2e30d3da6364418daa872b833733518c
#: ../../intro/tutorial03.txt:358
msgid ""
"Load the page by pointing your browser at \"/polls/\", and you should see a "
"bulleted-list containing the \"What's up\" poll from Tutorial 1. The link "
"points to the poll's detail page."
msgstr ""

# fd61e8070c674dfa8d1a8af073ab324b
#: ../../intro/tutorial03.txt:363
msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr ""

# 862e4220f75343f6959e06646a1eed31
#: ../../intro/tutorial03.txt:365
msgid ""
"It's a very common idiom to load a template, fill a context and return an :"
"class:`~django.http.HttpResponse` object with the result of the rendered "
"template. Django provides a shortcut. Here's the full ``index()`` view, "
"rewritten::"
msgstr ""

# ff4db0ce56c54315ba8e69d74af4d315
#: ../../intro/tutorial03.txt:379
msgid ""
"Note that once we've done this in all these views, we no longer need to "
"import :mod:`~django.template.loader`, :class:`~django.template."
"RequestContext` and :class:`~django.http.HttpResponse` (you'll want to keep "
"``HttpResponse`` if you still have the stub methods for ``detail``, "
"``results``, and ``vote``)."
msgstr ""

# f01f37c5930b4d0cbe71fb6068863183
#: ../../intro/tutorial03.txt:384
msgid ""
"The :func:`~django.shortcuts.render` function takes the request object as "
"its first argument, a template name as its second argument and a dictionary "
"as its optional third argument. It returns an :class:`~django.http."
"HttpResponse` object of the given template rendered with the given context."
msgstr ""

# a113aeb3cd55464cad2f800a27da1b10
#: ../../intro/tutorial03.txt:390
msgid "Raising a 404 error"
msgstr ""

# 18552580e12b43f690d79adc06ca9df8
#: ../../intro/tutorial03.txt:392
msgid ""
"Now, let's tackle the poll detail view -- the page that displays the "
"question for a given poll. Here's the view::"
msgstr ""

# 2bde11dcf8c04c6bbabdc06f1adafa91
#: ../../intro/tutorial03.txt:404
msgid ""
"The new concept here: The view raises the :exc:`~django.http.Http404` "
"exception if a poll with the requested ID doesn't exist."
msgstr ""

# 437b4951cc1b4fa2ba89933ec67a1e14
#: ../../intro/tutorial03.txt:407
msgid ""
"We'll discuss what you could put in that ``polls/detail.html`` template a "
"bit later, but if you'd like to quickly get the above example working, a "
"file containing just::"
msgstr ""

# 607c72d9772f49429ef4fe1f98732439
#: ../../intro/tutorial03.txt:413
msgid "will get you started for now."
msgstr ""

# 4fa464dfb1b84018bc551de526dbba46
#: ../../intro/tutorial03.txt:416
msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr ""

# 9a0584b5aa3344caa3f47d84c405c1a0
#: ../../intro/tutorial03.txt:418
msgid ""
"It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get` "
"and raise :exc:`~django.http.Http404` if the object doesn't exist. Django "
"provides a shortcut. Here's the ``detail()`` view, rewritten::"
msgstr ""

# c5bab8c3c7bd48d0b718ccb6a1e28542
#: ../../intro/tutorial03.txt:428
msgid ""
"The :func:`~django.shortcuts.get_object_or_404` function takes a Django "
"model as its first argument and an arbitrary number of keyword arguments, "
"which it passes to the :meth:`~django.db.models.query.QuerySet.get` function "
"of the model's manager. It raises :exc:`~django.http.Http404` if the object "
"doesn't exist."
msgstr ""

# ecfaa70b282f422ba0ddce24639d088a
#: ../../intro/tutorial03.txt:436
msgid ""
"Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` "
"instead of automatically catching the :exc:`~django.core.exceptions."
"ObjectDoesNotExist` exceptions at a higher level, or having the model API "
"raise :exc:`~django.http.Http404` instead of :exc:`~django.core.exceptions."
"ObjectDoesNotExist`?"
msgstr ""

# cce02d9b700946dab86c85245dad6c2c
#: ../../intro/tutorial03.txt:442
msgid ""
"Because that would couple the model layer to the view layer. One of the "
"foremost design goals of Django is to maintain loose coupling. Some "
"controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""

# c801c2cabaf14776aec270663667c2f2
#: ../../intro/tutorial03.txt:446
msgid ""
"There's also a :func:`~django.shortcuts.get_list_or_404` function, which "
"works just as :func:`~django.shortcuts.get_object_or_404` -- except using :"
"meth:`~django.db.models.query.QuerySet.filter` instead of :meth:`~django.db."
"models.query.QuerySet.get`. It raises :exc:`~django.http.Http404` if the "
"list is empty."
msgstr ""

# 18c5d264d207466b90cfcd5648530867
#: ../../intro/tutorial03.txt:453
msgid "Write a 404 (page not found) view"
msgstr ""

# 1f4463928bde464a9d68af3733abcd2d
#: ../../intro/tutorial03.txt:455
msgid ""
"When you raise :exc:`~django.http.Http404` from within a view, Django will "
"load a special view devoted to handling 404 errors. It finds it by looking "
"for the variable ``handler404`` in your root URLconf (and only in your root "
"URLconf; setting ``handler404`` anywhere else will have no effect), which is "
"a string in Python dotted syntax -- the same format the normal URLconf "
"callbacks use. A 404 view itself has nothing special: It's just a normal "
"view."
msgstr ""

# 8ae10df87e4f4f1c80b1955d671a6f81
#: ../../intro/tutorial03.txt:463
msgid ""
"You normally won't have to bother with writing 404 views. If you don't set "
"``handler404``, the built-in view :func:`django.views.defaults."
"page_not_found` is used by default. Optionally, you can create a ``404."
"html`` template in the root of your template directory. The default 404 view "
"will then use that template for all 404 errors when :setting:`DEBUG` is set "
"to ``False`` (in your settings module). If you do create the template, add "
"at least some dummy content like \"Page not found\"."
msgstr ""

# ef9f587f082d438b95b9d0b517b5e697
#: ../../intro/tutorial03.txt:473
msgid ""
"If :setting:`DEBUG` is set to ``False``, all responses will be \"Bad Request "
"(400)\" unless you specify the proper :setting:`ALLOWED_HOSTS` as well "
"(something like ``['localhost', '127.0.0.1']`` for local development)."
msgstr ""

# 2012e51f1fda463784e0a961955dc4b1
#: ../../intro/tutorial03.txt:478
msgid "A couple more things to note about 404 views:"
msgstr ""

# 43072f0247cb41b39ae2a9fb120bee79
#: ../../intro/tutorial03.txt:473
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module) then your "
"404 view will never be used (and thus the ``404.html`` template will never "
"be rendered) because the traceback will be displayed instead."
msgstr ""

# 080760c86495442497ba52fbc88e9eaf
#: ../../intro/tutorial03.txt:477
msgid ""
"The 404 view is also called if Django doesn't find a match after checking "
"every regular expression in the URLconf."
msgstr ""

# b74e6670b2e34ea1bf876f27c5724b04
#: ../../intro/tutorial03.txt:481
msgid "Write a 500 (server error) view"
msgstr ""

# 3bd9e3b7aa8a43fdbdd534b0fc226da6
#: ../../intro/tutorial03.txt:483
msgid ""
"Similarly, your root URLconf may define a ``handler500``, which points to a "
"view to call in case of server errors. Server errors happen when you have "
"runtime errors in view code."
msgstr ""

# 1851b2bf764f4e02b161c441ff1b906f
#: ../../intro/tutorial03.txt:487
msgid ""
"Likewise, you should create a ``500.html`` template at the root of your "
"template directory and add some content like \"Something went wrong\"."
msgstr ""

# 7544357774fc4c298480b06d9ed6d27f
#: ../../intro/tutorial03.txt:491
msgid "Use the template system"
msgstr ""

# 0f0627ad348f47a5bd826e7bda5372ce
#: ../../intro/tutorial03.txt:493
msgid ""
"Back to the ``detail()`` view for our poll application. Given the context "
"variable ``poll``, here's what the ``polls/detail.html`` template might look "
"like:"
msgstr ""

# 769067354d7e4cef9ff55642b0219fc8
#: ../../intro/tutorial03.txt:506
msgid ""
"The template system uses dot-lookup syntax to access variable attributes. In "
"the example of ``{{ poll.question }}``, first Django does a dictionary "
"lookup on the object ``poll``. Failing that, it tries an attribute lookup -- "
"which works, in this case. If attribute lookup had failed, it would've tried "
"a list-index lookup."
msgstr ""

# d04f33247fd24d73b6957dc7fade38fd
#: ../../intro/tutorial03.txt:512
msgid ""
"Method-calling happens in the :ttag:`{% for %}<for>` loop: ``poll.choice_set."
"all`` is interpreted as the Python code ``poll.choice_set.all()``, which "
"returns an iterable of ``Choice`` objects and is suitable for use in the :"
"ttag:`{% for %}<for>` tag."
msgstr ""

# a5dedf7a1c82493fa34caa0e1f7078b4
#: ../../intro/tutorial03.txt:517
msgid ""
"See the :doc:`template guide </topics/templates>` for more about templates."
msgstr ""

# de36a281603b4ec29d8e014be4ab9ccc
#: ../../intro/tutorial03.txt:520
msgid "Removing hardcoded URLs in templates"
msgstr ""

# 825bf23b2c034cc98ae76c3eb2d275bc
#: ../../intro/tutorial03.txt:522
msgid ""
"Remember, when we wrote the link to a poll in the ``polls/index.html`` "
"template, the link was partially hardcoded like this:"
msgstr ""

# 90329e1e36094a7fbd8440a2d91df270
#: ../../intro/tutorial03.txt:529
msgid ""
"The problem with this hardcoded, tightly-coupled approach is that it becomes "
"challenging to change URLs on projects with a lot of templates. However, "
"since you defined the name argument in the :func:`~django.conf.urls.url` "
"functions in the ``polls.urls`` module, you can remove a reliance on "
"specific URL paths defined in your url configurations by using the ``{% url "
"%}`` template tag:"
msgstr ""

# 40d3cc8111624b2495b79eee0a96f289
#: ../../intro/tutorial03.txt:541
msgid ""
"If ``{% url 'detail' poll.id %}`` (with quotes) doesn't work, but ``{% url "
"detail poll.id %}`` (without quotes) does, that means you're using a version "
"of Django < 1.5. In this case, add the following declaration at the top of "
"your template:"
msgstr ""

# 849b7994ecc747ebbb69c3f593bb2cef
#: ../../intro/tutorial03.txt:550
msgid ""
"The way this works is by looking up the URL definition as specified in the "
"``polls.urls`` module. You can see exactly where the URL name of 'detail' is "
"defined below::"
msgstr ""

# 08f72b0ae26b4dd9a6e74fd7f97e57db
#: ../../intro/tutorial03.txt:559
msgid ""
"If you want to change the URL of the polls detail view to something else, "
"perhaps to something like ``polls/specifics/12/`` instead of doing it in the "
"template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""

# dd758e7dfecf42e5b00f32db44a65a22
#: ../../intro/tutorial03.txt:569
msgid "Namespacing URL names"
msgstr ""

# cdb60c73274747dfa33a8c8e82ef70cf
#: ../../intro/tutorial03.txt:571
msgid ""
"The tutorial project has just one app, ``polls``. In real Django projects, "
"there might be five, ten, twenty apps or more. How does Django differentiate "
"the URL names between them? For example, the ``polls`` app has a ``detail`` "
"view, and so might an app on the same project that is for a blog. How does "
"one make it so that Django knows which app view to create for a url when "
"using the ``{% url %}`` template tag?"
msgstr ""

# 798d0cca0d1d4b12bc4df092930570bc
#: ../../intro/tutorial03.txt:578
msgid ""
"The answer is to add namespaces to your root URLconf. In the ``mysite/urls."
"py`` file (the project's ``urls.py``, not the application's), go ahead and "
"change it to include namespacing::"
msgstr ""

# bfbc26032ff74a8eac3b92541429e61b
#: ../../intro/tutorial03.txt:592
msgid "Now change your ``polls/index.html`` template from:"
msgstr ""

# 06ea39e1a2334b60ac7a6cf7b5d62ae1
#: ../../intro/tutorial03.txt:598
msgid "to point at the namespaced detail view:"
msgstr ""

# 94430d9ab37b4d85b36a98f2d23f4d1c
#: ../../intro/tutorial03.txt:604
msgid ""
"When you're comfortable with writing views, read :doc:`part 4 of this "
"tutorial </intro/tutorial04>` to learn about simple form processing and "
"generic views."
msgstr ""

# 07eee3922e6a49e590cd038aee208c82
#: ../../intro/tutorial04.txt:3
msgid "Writing your first Django app, part 4"
msgstr ""

# a4632f7c07cb4a63a699616efcb20417
#: ../../intro/tutorial04.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""

# 5b2e67ac293449159847d8ab0be4eb81
#: ../../intro/tutorial04.txt:10
msgid "Write a simple form"
msgstr ""

# b032f768e0ad488a91bb43d720333305
#: ../../intro/tutorial04.txt:12
msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""

# 313baa0645c24eda8afc1236f57bb79d
#: ../../intro/tutorial04.txt:30
msgid "A quick rundown:"
msgstr ""

# 494f6157f968490aa5f01a7d58c7e089
#: ../../intro/tutorial04.txt:32
msgid ""
"The above template displays a radio button for each poll choice. The "
"``value`` of each radio button is the associated poll choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=3``. This is the basic concept of HTML forms."
msgstr ""

# 5e42e62ea1414603b70db4379a628fad
#: ../../intro/tutorial04.txt:38
msgid ""
"We set the form's ``action`` to ``{% url 'polls:vote' poll.id %}``, and we "
"set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to ``method="
"\"get\"``) is very important, because the act of submitting this form will "
"alter data server-side. Whenever you create a form that alters data server-"
"side, use ``method=\"post\"``. This tip isn't specific to Django; it's just "
"good Web development practice."
msgstr ""

# 2f2deadd71834c86968d9f20bc2825d0
#: ../../intro/tutorial04.txt:45
msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr ""

# d6f7697b31184617ab58757bfff48096
#: ../../intro/tutorial04.txt:48
msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted "
"at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""

# 9662e8e3984e4814b4542962378bfd17
#: ../../intro/tutorial04.txt:55
msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line::"
msgstr ""

# 16a89de757314225aad1cf1709e9b351
#: ../../intro/tutorial04.txt:61
msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``::"
msgstr ""

# ac39114172bf4beb99e6013e4a33faf3
#: ../../intro/tutorial04.txt:87
msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""

# 3fc5408eae5a4f82a38e7d82f0c800c7
#: ../../intro/tutorial04.txt:89
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""

# 6b31506eb4c74e959e68b785badb686b
#: ../../intro/tutorial04.txt:95
msgid ""
"Note that Django also provides :attr:`request.GET <django.http.HttpRequest."
"GET>` for accessing GET data in the same way -- but we're explicitly using :"
"attr:`request.POST <django.http.HttpRequest.POST>` in our code, to ensure "
"that data is only altered via a POST call."
msgstr ""

# fa3e764554c14abda4639a6814401ef3
#: ../../intro/tutorial04.txt:101
msgid ""
"``request.POST['choice']`` will raise :exc:`~exceptions.KeyError` if "
"``choice`` wasn't provided in POST data. The above code checks for :exc:"
"`~exceptions.KeyError` and redisplays the poll form with an error message if "
"``choice`` isn't given."
msgstr ""

# 4a2cb0bce0004507b655ebb57115f91e
#: ../../intro/tutorial04.txt:106
msgid ""
"After incrementing the choice count, the code returns an :class:`~django."
"http.HttpResponseRedirect` rather than a normal :class:`~django.http."
"HttpResponse`. :class:`~django.http.HttpResponseRedirect` takes a single "
"argument: the URL to which the user will be redirected (see the following "
"point for how we construct the URL in this case)."
msgstr ""

# 315c022f40e24b1e90a9f40bc82e471e
#: ../../intro/tutorial04.txt:113
msgid ""
"As the Python comment above points out, you should always return an :class:"
"`~django.http.HttpResponseRedirect` after successfully dealing with POST "
"data. This tip isn't specific to Django; it's just good Web development "
"practice."
msgstr ""

# df334de2eb1a4d8bb06a8c2d1daf4c9e
#: ../../intro/tutorial04.txt:118
msgid ""
"We are using the :func:`~django.core.urlresolvers.reverse` function in the :"
"class:`~django.http.HttpResponseRedirect` constructor in this example. This "
"function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the "
"URLconf we set up in Tutorial 3, this :func:`~django.core.urlresolvers."
"reverse` call will return a string like ::"
msgstr ""

# 48908193b86844e29d9cead123fa1620
#: ../../intro/tutorial04.txt:129
msgid ""
"... where the ``3`` is the value of ``p.id``. This redirected URL will then "
"call the ``'results'`` view to display the final page."
msgstr ""

# 2f57d642b1d34400ae95a87a7e84a58b
#: ../../intro/tutorial04.txt:132
msgid ""
"As mentioned in Tutorial 3, ``request`` is a :class:`~django.http."
"HttpRequest` object. For more on :class:`~django.http.HttpRequest` objects, "
"see the :doc:`request and response documentation </ref/request-response>`."
msgstr ""

# 1d498b4fac5b489ea512d10c35e21de1
#: ../../intro/tutorial04.txt:136
msgid ""
"After somebody votes in a poll, the ``vote()`` view redirects to the results "
"page for the poll. Let's write that view::"
msgstr ""

# f1d0691d5fbf4c62a5ecc4dd31a4b90e
#: ../../intro/tutorial04.txt:143
msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial "
"3 </intro/tutorial03>`. The only difference is the template name. We'll fix "
"this redundancy later."
msgstr ""

# 5491beda068841029a0b1e14dc53dce3
#: ../../intro/tutorial04.txt:147
msgid "Now, create a ``polls/results.html`` template:"
msgstr ""

# 40edbbca914d4020b754072e5254b72c
#: ../../intro/tutorial04.txt:161
msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the poll. You should "
"see a results page that gets updated each time you vote. If you submit the "
"form without having chosen a choice, you should see the error message."
msgstr ""

# f432572162bc4c129f2daf6eb47a38c3
#: ../../intro/tutorial04.txt:166
msgid "Use generic views: Less code is better"
msgstr ""

# 8fc3eac1d25842e89260619e2452fb96
#: ../../intro/tutorial04.txt:168
msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and "
"``results()`` views are stupidly simple -- and, as mentioned above, "
"redundant. The ``index()`` view (also from Tutorial 3), which displays a "
"list of polls, is similar."
msgstr ""

# c13f39f40d3b43a6821ff104cfe476f4
#: ../../intro/tutorial04.txt:172
msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""

# b5e8c3d72bf246b6ab9fb1676180a3ca
#: ../../intro/tutorial04.txt:177
msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""

# 4e2498fbcd274bb7b6e0440a075acc0c
#: ../../intro/tutorial04.txt:180
msgid ""
"Let's convert our poll app to use the generic views system, so we can delete "
"a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""

# 73922f38f92f430194e79d5f221ea6be
#: ../../intro/tutorial04.txt:184
msgid "Convert the URLconf."
msgstr ""

# 5a000fb2ba774ee3993de00abc3a89e4
#: ../../intro/tutorial04.txt:186
msgid "Delete some of the old, unneeded views."
msgstr ""

# a442016e5d1c4502948ffa9fdc001c5b
#: ../../intro/tutorial04.txt:188
msgid "Introduce new views based on Django's generic views."
msgstr ""

# 96eaa8defb4a4a378b7f58dd487b229f
#: ../../intro/tutorial04.txt:190
msgid "Read on for details."
msgstr ""

# 1479bd62c1c84b2dbc33222fe6a08574
#: ../../intro/tutorial04.txt:192
msgid "Why the code-shuffle?"
msgstr ""

# e02b02cb992846c0a334b070ddcba6ab
#: ../../intro/tutorial04.txt:194
msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""

# 2f12887597864dc9b1c58c8869ea2671
#: ../../intro/tutorial04.txt:200
msgid "You should know basic math before you start using a calculator."
msgstr ""

# a49dcc4157064800a44550fd12aa6bef
#: ../../intro/tutorial04.txt:203
msgid "Amend URLconf"
msgstr ""

# 6571f551bc444975b70306fc89788743
#: ../../intro/tutorial04.txt:205
msgid "First, open the ``polls/urls.py`` URLconf and change it like so::"
msgstr ""

# f93e2bcffaa64931a5ce99f936226a4a
#: ../../intro/tutorial04.txt:219
msgid "Amend views"
msgstr ""

# 62e8ae52f47046309514212e7877ed10
#: ../../intro/tutorial04.txt:221
msgid ""
"Next, we're going to remove our old ``index``, ``detail``, and ``results`` "
"views and use Django's generic views instead. To do so, open the ``polls/"
"views.py`` file and change it like so::"
msgstr ""

# 5e4fdf1c95d44aeea14974b5e7a408f2
#: ../../intro/tutorial04.txt:253
msgid ""
"We're using two generic views here: :class:`~django.views.generic.list."
"ListView` and :class:`~django.views.generic.detail.DetailView`. "
"Respectively, those two views abstract the concepts of \"display a list of "
"objects\" and \"display a detail page for a particular type of object.\""
msgstr ""

# 2833dcb3b7a54ab5a531eb32a3dac4cd
#: ../../intro/tutorial04.txt:259
msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` attribute."
msgstr ""

# a892a4b39e40487cad42aecb007e3a2d
#: ../../intro/tutorial04.txt:262
msgid ""
"The :class:`~django.views.generic.detail.DetailView` generic view expects "
"the primary key value captured from the URL to be called ``\"pk\"``, so "
"we've changed ``poll_id`` to ``pk`` for the generic views."
msgstr ""

# 129ea5220fa04ab09cd8b982b016b2db
#: ../../intro/tutorial04.txt:267
msgid ""
"By default, the :class:`~django.views.generic.detail.DetailView` generic "
"view uses a template called ``<app name>/<model name>_detail.html``. In our "
"case, it'll use the template ``\"polls/poll_detail.html\"``. The "
"``template_name`` attribute is used to tell Django to use a specific "
"template name instead of the autogenerated default template name. We also "
"specify the ``template_name`` for the ``results`` list view -- this ensures "
"that the results view and the detail view have a different appearance when "
"rendered, even though they're both a :class:`~django.views.generic.detail."
"DetailView` behind the scenes."
msgstr ""

# e393a07194df44e4903dee3ad5dd09f1
#: ../../intro/tutorial04.txt:277
msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use "
"``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""

# e6d206ddffa94824871421ae04d5a781
#: ../../intro/tutorial04.txt:283
msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``poll`` and ``latest_poll_list`` context "
"variables. For ``DetailView`` the ``poll`` variable is provided "
"automatically -- since we're using a Django model (``Poll``), Django is able "
"to determine an appropriate name for the context variable. However, for "
"ListView, the automatically generated context variable is ``poll_list``. To "
"override this we provide the ``context_object_name`` attribute, specifying "
"that we want to use ``latest_poll_list`` instead. As an alternative "
"approach, you could change your templates to match the new default context "
"variables -- but it's a lot easier to just tell Django to use the variable "
"you want."
msgstr ""

# 64f63f09593e4935bea8a7e4be7e9322
#: ../../intro/tutorial04.txt:295
msgid "Run the server, and use your new polling app based on generic views."
msgstr ""

# 8a947a5fbbb243498d3e18816d41bc1c
#: ../../intro/tutorial04.txt:297
msgid ""
"For full details on generic views, see the :doc:`generic views documentation "
"</topics/class-based-views/index>`."
msgstr ""

# 0fb9205eaa1347a1a52760cbf22d2ee7
#: ../../intro/tutorial04.txt:300
msgid ""
"When you're comfortable with forms and generic views, read :doc:`part 5 of "
"this tutorial</intro/tutorial05>` to learn about testing our polls app."
msgstr ""

# 006fc38a8b52468eb03de0a0f50d22ce
#: ../../intro/tutorial05.txt:3
msgid "Writing your first Django app, part 5"
msgstr ""

# baf74af83591447d9596932f40601ac9
#: ../../intro/tutorial05.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. "
"We've built a Web-poll application, and we'll now create some automated "
"tests for it."
msgstr ""

# 15832cdaa9db4fd9a26bc44e7184d7dd
#: ../../intro/tutorial05.txt:10
msgid "Introducing automated testing"
msgstr ""

# 1bc36ed745b94856a6f76b859f091dfd
#: ../../intro/tutorial05.txt:13
msgid "What are automated tests?"
msgstr ""

# f0734e9f9bbf4216b540ea39f54749c0
#: ../../intro/tutorial05.txt:15
msgid "Tests are simple routines that check the operation of your code."
msgstr ""

# f8fdaf3f7e7b4af09aa99693946f694e
#: ../../intro/tutorial05.txt:17
msgid ""
"Testing operates at different levels. Some tests might apply to a tiny "
"detail - *does a particular model method return values as expected?*, while "
"others examine the overall operation of the software - *does a sequence of "
"user inputs on the site produce the desired result?* That's no different "
"from the kind of testing you did earlier in :doc:`Tutorial 1 </intro/"
"tutorial01>`, using the shell to examine the behavior of a method, or "
"running the application and entering data to check how it behaves."
msgstr ""

# eccbcfe7b283419b8b064115b26da535
#: ../../intro/tutorial05.txt:25
msgid ""
"What's different in *automated* tests is that the testing work is done for "
"you by the system. You create a set of tests once, and then as you make "
"changes to your app, you can check that your code still works as you "
"originally intended, without having to perform time consuming manual testing."
msgstr ""

# cd7a1dfecb334ac7822d50dbaebe7620
#: ../../intro/tutorial05.txt:31
msgid "Why you need to create tests"
msgstr ""

# 43e0b5fa930848098c04e441335f5c04
#: ../../intro/tutorial05.txt:33
msgid "So why create tests, and why now?"
msgstr ""

# 75800ff960b94512924ab5df0a1d8c15
#: ../../intro/tutorial05.txt:35
msgid ""
"You may feel that you have quite enough on your plate just learning Python/"
"Django, and having yet another thing to learn and do may seem overwhelming "
"and perhaps unnecessary. After all, our polls application is working quite "
"happily now; going through the trouble of creating automated tests is not "
"going to make it work any better. If creating the polls application is the "
"last bit of Django programming you will ever do, then true, you don't need "
"to know how to create automated tests. But, if that's not the case, now is "
"an excellent time to learn."
msgstr ""

# 47c69ed3f0a7434d896b4b9a03fea5f3
#: ../../intro/tutorial05.txt:45
msgid "Tests will save you time"
msgstr ""

# 80c0c67814f442cda4e2b20011d74b6f
#: ../../intro/tutorial05.txt:47
msgid ""
"Up to a certain point, 'checking that it seems to work' will be a "
"satisfactory test. In a more sophisticated application, you might have "
"dozens of complex interactions between components."
msgstr ""

# 65f03d3b9cb74fa395cf5a98ca478347
#: ../../intro/tutorial05.txt:51
msgid ""
"A change in any of those components could have unexpected consequences on "
"the application's behavior. Checking that it still 'seems to work' could "
"mean running through your code's functionality with twenty different "
"variations of your test data just to make sure you haven't broken something "
"- not a good use of your time."
msgstr ""

# 1937bef684a64b7399521123300ab05e
#: ../../intro/tutorial05.txt:57
msgid ""
"That's especially true when automated tests could do this for you in "
"seconds. If something's gone wrong, tests will also assist in identifying "
"the code that's causing the unexpected behavior."
msgstr ""

# 03f0c596bf454bcb89199addc5a98322
#: ../../intro/tutorial05.txt:61
msgid ""
"Sometimes it may seem a chore to tear yourself away from your productive, "
"creative programming work to face the unglamorous and unexciting business of "
"writing tests, particularly when you know your code is working properly."
msgstr ""

# 079e9465c92e444a89cefc874c73e486
#: ../../intro/tutorial05.txt:65
msgid ""
"However, the task of writing tests is a lot more fulfilling than spending "
"hours testing your application manually or trying to identify the cause of a "
"newly-introduced problem."
msgstr ""

# 12fdeeb5bb644cb595c2d2415a98d3f3
#: ../../intro/tutorial05.txt:70
msgid "Tests don't just identify problems, they prevent them"
msgstr ""

# 8c81677866b9464999da3e4e15f34c1f
#: ../../intro/tutorial05.txt:72
msgid ""
"It's a mistake to think of tests merely as a negative aspect of development."
msgstr ""

# 4251fefe869e492ca74c7f169fcb4db8
#: ../../intro/tutorial05.txt:74
msgid ""
"Without tests, the purpose or intended behavior of an application might be "
"rather opaque. Even when it's your own code, you will sometimes find "
"yourself poking around in it trying to find out what exactly it's doing."
msgstr ""

# ebe76679f61b41da990ef6434de52d8b
#: ../../intro/tutorial05.txt:78
msgid ""
"Tests change that; they light up your code from the inside, and when "
"something goes wrong, they focus light on the part that has gone wrong - "
"*even if you hadn't even realized it had gone wrong*."
msgstr ""

# b80beaad83c64df6ae16c7387dcb5f47
#: ../../intro/tutorial05.txt:83
msgid "Tests make your code more attractive"
msgstr ""

# 499e61da021b42398b8c2cbfc1892594
#: ../../intro/tutorial05.txt:85
msgid ""
"You might have created a brilliant piece of software, but you will find that "
"many other developers will simply refuse to look at it because it lacks "
"tests; without tests, they won't trust it. Jacob Kaplan-Moss, one of "
"Django's original developers, says \"Code without tests is broken by design."
"\""
msgstr ""

# 65335f1c491646c7bac6aa2de54a693a
#: ../../intro/tutorial05.txt:90
msgid ""
"That other developers want to see tests in your software before they take it "
"seriously is yet another reason for you to start writing tests."
msgstr ""

# ae430e6a91a34fe3a194bb60fff416e4
#: ../../intro/tutorial05.txt:94
msgid "Tests help teams work together"
msgstr ""

# c383910de46a474ebb7930318766b770
#: ../../intro/tutorial05.txt:96
msgid ""
"The previous points are written from the point of view of a single developer "
"maintaining an application. Complex applications will be maintained by "
"teams. Tests guarantee that colleagues don't inadvertently break your code "
"(and that you don't break theirs without knowing). If you want to make a "
"living as a Django programmer, you must be good at writing tests!"
msgstr ""

# 8bf07000da34418496fc8504f89de827
#: ../../intro/tutorial05.txt:103
msgid "Basic testing strategies"
msgstr ""

# 1ec49b665b9e4396a25ed3300d46db9b
#: ../../intro/tutorial05.txt:105
msgid "There are many ways to approach writing tests."
msgstr ""

# b82cd0e9916d48a6a8d1bfed3de174e0
#: ../../intro/tutorial05.txt:107
msgid ""
"Some programmers follow a discipline called \"`test-driven development`_\"; "
"they actually write their tests before they write their code. This might "
"seem counter-intuitive, but in fact it's similar to what most people will "
"often do anyway: they describe a problem, then create some code to solve it. "
"Test-driven development simply formalizes the problem in a Python test case."
msgstr ""

# 2f1069988c684173830b604ebdebbde4
#: ../../intro/tutorial05.txt:113
msgid ""
"More often, a newcomer to testing will create some code and later decide "
"that it should have some tests. Perhaps it would have been better to write "
"some tests earlier, but it's never too late to get started."
msgstr ""

# 23271f6860c24bd9a8b2fda8b89034a4
#: ../../intro/tutorial05.txt:117
msgid ""
"Sometimes it's difficult to figure out where to get started with writing "
"tests. If you have written several thousand lines of Python, choosing "
"something to test might not be easy. In such a case, it's fruitful to write "
"your first test the next time you make a change, either when you add a new "
"feature or fix a bug."
msgstr ""

# 3cec30ef7a944fba89ad85200a643fd6
#: ../../intro/tutorial05.txt:122
msgid "So let's do that right away."
msgstr ""

# 18583ea7a4e54aa4b32c5d0ee8ae0ae1
#: ../../intro/tutorial05.txt:127
msgid "Writing our first test"
msgstr ""

# 96d723f754c84b90ac0c8705d6c6fdd6
#: ../../intro/tutorial05.txt:130
msgid "We identify a bug"
msgstr ""

# 97b29c60b73b45cf99a6ed91d4791dc9
#: ../../intro/tutorial05.txt:132
msgid ""
"Fortunately, there's a little bug in the ``polls`` application for us to fix "
"right away: the ``Poll.was_published_recently()`` method returns ``True`` if "
"the ``Poll`` was published within the last day (which is correct) but also "
"if the ``Poll``'s ``pub_date`` field is in the future (which certainly "
"isn't)."
msgstr ""

# fc180066e53749cbba63a590553b988a
#: ../../intro/tutorial05.txt:137
msgid ""
"You can see this in the Admin; create a poll whose date lies in the future; "
"you'll see that the ``Poll`` change list claims it was published recently."
msgstr ""

# f5ea89bf1226419d883e8c894662a977
#: ../../intro/tutorial05.txt:140
msgid "You can also see this using the shell::"
msgstr ""

# 4352fac0a52e466db5d9bdca5f05ca9d
#: ../../intro/tutorial05.txt:151
msgid "Since things in the future are not 'recent', this is clearly wrong."
msgstr ""

# 4c1907f519574da69bcebf2ad057b1fd
#: ../../intro/tutorial05.txt:154
msgid "Create a test to expose the bug"
msgstr ""

# edd2f1833be74a219bf6bede5ddfeb89
#: ../../intro/tutorial05.txt:156
msgid ""
"What we've just done in the shell to test for the problem is exactly what we "
"can do in an automated test, so let's turn that into an automated test."
msgstr ""

# 123022fe57a94d659c01e83f07cdec39
#: ../../intro/tutorial05.txt:159
msgid ""
"The best place for an application's tests is in the application's ``tests."
"py`` file - the testing system will look there for tests automatically."
msgstr ""

# a0c2ab4e1a094505b6219c120eb91a23
#: ../../intro/tutorial05.txt:162
msgid ""
"Put the following in the ``tests.py`` file in the ``polls`` application "
"(you'll notice  ``tests.py`` contains some dummy tests, you can remove "
"those)::"
msgstr ""

# 8343725c00c84a38aa877fbb5f22b375
#: ../../intro/tutorial05.txt:182
msgid ""
"What we have done here is created a :class:`django.test.TestCase` subclass "
"with a method that creates a ``Poll`` instance with a ``pub_date`` in the "
"future. We then check the output of ``was_published_recently()`` - which "
"*ought* to be False."
msgstr ""

# 1fe2d73d27c749abbb5ba54cfea93557
#: ../../intro/tutorial05.txt:188
msgid "Running tests"
msgstr ""

# d38780165d184d1996d74d9604a756a5
#: ../../intro/tutorial05.txt:190
msgid "In the terminal, we can run our test::"
msgstr ""

# 4b084da580504c3aa8b502549482e231
#: ../../intro/tutorial05.txt:194
msgid "and you'll see something like::"
msgstr ""

# 2cc6dfb17ef1429dac3348747a596f4a
#: ../../intro/tutorial05.txt:212
msgid "What happened is this:"
msgstr ""

# 83933635e60d488682b4c302ed79792e
#: ../../intro/tutorial05.txt:214
msgid ""
"``python manage.py test polls`` looked for tests in the ``polls`` application"
msgstr ""

# eb571cf8f984407282df9ed0faf61474
#: ../../intro/tutorial05.txt:216
msgid "it found a subclass of the :class:`django.test.TestCase` class"
msgstr ""

# f88966b4c988405ea6c38b302e64d09e
#: ../../intro/tutorial05.txt:218
msgid "it created a special database for the purpose of testing"
msgstr ""

# 29f727170c1447e8b2789a7c3e936a53
#: ../../intro/tutorial05.txt:220
msgid "it looked for test methods - ones whose names begin with ``test``"
msgstr ""

# 998b46b25740429194edb7fe960ccf8d
#: ../../intro/tutorial05.txt:222
msgid ""
"in ``test_was_published_recently_with_future_poll`` it created a ``Poll`` "
"instance whose ``pub_date`` field is 30 days in the future"
msgstr ""

# 71a7c66ce7ee4dedab95f44bd0b8d52e
#: ../../intro/tutorial05.txt:225
msgid ""
"... and using the ``assertEqual()`` method, it discovered that its "
"``was_published_recently()`` returns ``True``, though we wanted it to return "
"``False``"
msgstr ""

# e1c19f0293e943c7b506f9a3691b5fe7
#: ../../intro/tutorial05.txt:229
msgid ""
"The test informs us which test failed and even the line on which the failure "
"occurred."
msgstr ""

# 9b736de38b0f4b139b5129eadc047df6
#: ../../intro/tutorial05.txt:233
msgid "Fixing the bug"
msgstr ""

# 860d265149884c5dad568dc26e61ee08
#: ../../intro/tutorial05.txt:235
msgid ""
"We already know what the problem is: ``Poll.was_published_recently()`` "
"should return ``False`` if its ``pub_date`` is in the future. Amend the "
"method in ``models.py``, so that it will only return ``True`` if the date is "
"also in the past::"
msgstr ""

# 134dd6d108ff47ea9284e37c5e8f4f33
#: ../../intro/tutorial05.txt:244
msgid "and run the test again::"
msgstr ""

# 8a5f535776e549a8b3187f8a02d8db45
#: ../../intro/tutorial05.txt:254
msgid ""
"After identifying a bug, we wrote a test that exposes it and corrected the "
"bug in the code so our test passes."
msgstr ""

# 5c194f569b15436dbc7516b7993b4d19
#: ../../intro/tutorial05.txt:257
msgid ""
"Many other things might go wrong with our application in the future, but we "
"can be sure that we won't inadvertently reintroduce this bug, because simply "
"running the test will warn us immediately. We can consider this little "
"portion of the application pinned down safely forever."
msgstr ""

# 6ad4f369955d478d92590723427b75c4
#: ../../intro/tutorial05.txt:263
msgid "More comprehensive tests"
msgstr ""

# 321009ff3bfe457b90400b0b25f67b30
#: ../../intro/tutorial05.txt:265
msgid ""
"While we're here, we can further pin down the ``was_published_recently()`` "
"method; in fact, it would be positively embarrassing if in fixing one bug we "
"had introduced another."
msgstr ""

# a38fd71ae4c14e8fa3373b2289071093
#: ../../intro/tutorial05.txt:269
msgid ""
"Add two more test methods to the same class, to test the behavior of the "
"method more comprehensively::"
msgstr ""

# 46689e962feb455094511ec2a59715b9
#: ../../intro/tutorial05.txt:288
msgid ""
"And now we have three tests that confirm that ``Poll."
"was_published_recently()`` returns sensible values for past, recent, and "
"future polls."
msgstr ""

# 4f4215c95def492aaa52bdc6a4d75511
#: ../../intro/tutorial05.txt:291
msgid ""
"Again, ``polls`` is a simple application, but however complex it grows in "
"the future and whatever other code it interacts with, we now have some "
"guarantee that the method we have written tests for will behave in expected "
"ways."
msgstr ""

# 120810009bee4449b4450be98a35b010
#: ../../intro/tutorial05.txt:296
msgid "Test a view"
msgstr ""

# f0add963beab46f18093971a9c0a35c5
#: ../../intro/tutorial05.txt:298
msgid ""
"The polls application is fairly undiscriminating: it will publish any poll, "
"including ones whose ``pub_date`` field lies in the future. We should "
"improve this. Setting a ``pub_date`` in the future should mean that the Poll "
"is published at that moment, but invisible until then."
msgstr ""

# d2297ede48224712ab5ed891cb1dad34
#: ../../intro/tutorial05.txt:304
msgid "A test for a view"
msgstr ""

# 343cc0986bbf4e98881b1f6ebb5f7c89
#: ../../intro/tutorial05.txt:306
msgid ""
"When we fixed the bug above, we wrote the test first and then the code to "
"fix it. In fact that was a simple example of test-driven development, but it "
"doesn't really matter in which order we do the work."
msgstr ""

# 5a7cea9bce94406490a7ad9d126b5aa6
#: ../../intro/tutorial05.txt:310
msgid ""
"In our first test, we focused closely on the internal behavior of the code. "
"For this test, we want to check its behavior as it would be experienced by a "
"user through a web browser."
msgstr ""

# 60c58044649f499fbc02a41fbc2cc678
#: ../../intro/tutorial05.txt:314
msgid ""
"Before we try to fix anything, let's have a look at the tools at our "
"disposal."
msgstr ""

# 02625f1c1a9b441482fa100301dd8c2b
#: ../../intro/tutorial05.txt:317
msgid "The Django test client"
msgstr ""

# f194cda9505e4ec181a1050f6a06c657
#: ../../intro/tutorial05.txt:319
msgid ""
"Django provides a test :class:`~django.test.client.Client` to simulate a "
"user interacting with the code at the view level.  We can use it in ``tests."
"py`` or even in the shell."
msgstr ""

# 0fd6cb1c18df4218a77c4b9d360a4869
#: ../../intro/tutorial05.txt:323
msgid ""
"We will start again with the shell, where we need to do a couple of things "
"that won't be necessary in ``tests.py``. The first is to set up the test "
"environment in the shell::"
msgstr ""

# 00912f1effa040f787a2cf6631110014
#: ../../intro/tutorial05.txt:330
msgid ""
":meth:`~django.test.utils.setup_test_environment` installs a template "
"renderer which will allow us to examine some additional attributes on "
"responses such as ``response.context`` that otherwise wouldn't be available. "
"Note that this method *does not* setup a test database, so the following "
"will be run against the existing database and the output may differ slightly "
"depending on what polls you already created."
msgstr ""

# 98b215cfabc940d2b418a0db0ca6dcbc
#: ../../intro/tutorial05.txt:337
msgid ""
"Next we need to import the test client class (later in ``tests.py`` we will "
"use the :class:`django.test.TestCase` class, which comes with its own "
"client, so this won't be required)::"
msgstr ""

# 66be16e4e9714648b53afdb1d8797965
#: ../../intro/tutorial05.txt:345
msgid "With that ready, we can ask the client to do some work for us::"
msgstr ""

# 4dfbe002c5754a519ff4973f07f9738d
#: ../../intro/tutorial05.txt:376
msgid "Improving our view"
msgstr ""

# e5d5b3142e854c509c9a433dd610e982
#: ../../intro/tutorial05.txt:378
msgid ""
"The list of polls shows polls that aren't published yet (i.e. those that "
"have a ``pub_date`` in the future). Let's fix that."
msgstr ""

# f65991d202ca4ef299c9e28b83fda476
#: ../../intro/tutorial05.txt:381
msgid ""
"In :doc:`Tutorial 4 </intro/tutorial04>` we introduced a class-based view, "
"based on :class:`~django.views.generic.list.ListView`::"
msgstr ""

# 4b2bb8a78c6f4f3ba86e6b7a899f13cf
#: ../../intro/tutorial05.txt:392
msgid ""
"``response.context_data['latest_poll_list']`` extracts the data this view "
"places into the context."
msgstr ""

# a4ab58406b024160972bd56f2538d551
#: ../../intro/tutorial05.txt:395
msgid ""
"We need to amend the ``get_queryset`` method and change it so that it also "
"checks the date by comparing it with ``timezone.now()``. First we need to "
"add an import::"
msgstr ""

# 3ae7ff4c57df4376bf9bb31d80591619
#: ../../intro/tutorial05.txt:401
msgid "and then we must amend the ``get_queryset`` method like so::"
msgstr ""

# 2c947dd8b6cc4311aceea1e6438a936a
#: ../../intro/tutorial05.txt:412
msgid ""
"``Poll.objects.filter(pub_date__lte=timezone.now())`` returns a queryset "
"containing Polls whose ``pub_date`` is less than or equal to - that is, "
"earlier than or equal to - ``timezone.now``."
msgstr ""

# 223f978965eb448c8931a341c9f02a79
#: ../../intro/tutorial05.txt:417
msgid "Testing our new view"
msgstr ""

# 447b8235bb4747e4920330cecca2fbd5
#: ../../intro/tutorial05.txt:419
msgid ""
"Now you can satisfy yourself that this behaves as expected by firing up the "
"runserver, loading the site in your browser, creating ``Polls`` with dates "
"in the past and future, and checking that only those that have been "
"published are listed.  You don't want to have to do that *every single time "
"you make any change that might affect this* - so let's also create a test, "
"based on our shell session above."
msgstr ""

# 2672985039be41e6b4453fe2bcd1a348
#: ../../intro/tutorial05.txt:426
msgid "Add the following to ``polls/tests.py``::"
msgstr ""

# 8dd76988e84c417d8bc152de0eb7c1de
#: ../../intro/tutorial05.txt:430
msgid ""
"and we'll create a factory method to create polls as well as a new test "
"class::"
msgstr ""

# a7d39d4f17454e6eac33b6cc20adc97d
#: ../../intro/tutorial05.txt:497
msgid "Let's look at some of these more closely."
msgstr ""

# 7e6453c804a243c8ba638230a8fbc6d7
#: ../../intro/tutorial05.txt:499
msgid ""
"First is a poll factory method, ``create_poll``, to take some repetition out "
"of the process of creating polls."
msgstr ""

# e499047038ed48ef89c9fe3ea9c2b786
#: ../../intro/tutorial05.txt:502
msgid ""
"``test_index_view_with_no_polls`` doesn't create any polls, but checks the "
"message: \"No polls are available.\" and verifies the ``latest_poll_list`` "
"is empty. Note that the :class:`django.test.TestCase` class provides some "
"additional assertion methods. In these examples, we use :meth:`~django.test."
"TestCase.assertContains()` and :meth:`~django.test.TestCase."
"assertQuerysetEqual()`."
msgstr ""

# bb6b468564f548b7a2c7c3f1b8626e3e
#: ../../intro/tutorial05.txt:509
msgid ""
"In ``test_index_view_with_a_past_poll``, we create a poll and verify that it "
"appears in the list."
msgstr ""

# 35c220a83d164005874cff79f6e31e4c
#: ../../intro/tutorial05.txt:512
msgid ""
"In ``test_index_view_with_a_future_poll``, we create a poll with a "
"``pub_date`` in the future. The database is reset for each test method, so "
"the first poll is no longer there, and so again the index shouldn't have any "
"polls in it."
msgstr ""

# 24d2fc49bfcf4049a166e143a472cbbb
#: ../../intro/tutorial05.txt:516
msgid ""
"And so on. In effect, we are using the tests to tell a story of admin input "
"and user experience on the site, and checking that at every state and for "
"every new change in the state of the system, the expected results are "
"published."
msgstr ""

# b682a461dedf409891584c525fcd690c
#: ../../intro/tutorial05.txt:521
msgid "Testing the ``DetailView``"
msgstr ""

# 955dd138849342c38591331e956d2616
#: ../../intro/tutorial05.txt:523
msgid ""
"What we have works well; however, even though future polls don't appear in "
"the *index*, users can still reach them if they know or guess the right URL. "
"So we need to add a similar  constraint to ``DetailView``::"
msgstr ""

# 25d30adfd73a4d7791f9a6a132541768
#: ../../intro/tutorial05.txt:536
msgid ""
"And of course, we will add some tests, to check that a ``Poll`` whose "
"``pub_date`` is in the past can be displayed, and that one with a "
"``pub_date`` in the future is not::"
msgstr ""

# edfccf13160645baa71a4b13e9b489c0
#: ../../intro/tutorial05.txt:560
msgid "Ideas for more tests"
msgstr ""

# cbfcd72ec55a428992e7f427d6d7b9cc
#: ../../intro/tutorial05.txt:562
msgid ""
"We ought to add a similar ``get_queryset`` method to ``ResultsView`` and "
"create a new test class for that view. It'll be very similar to what we have "
"just created; in fact there will be a lot of repetition."
msgstr ""

# 94767f1ddba341ccae378e1a1a6e5024
#: ../../intro/tutorial05.txt:566
msgid ""
"We could also improve our application in other ways, adding tests along the "
"way. For example, it's silly that ``Polls`` can be published on the site "
"that have no ``Choices``. So, our views could check for this, and exclude "
"such ``Polls``. Our tests would create a ``Poll`` without ``Choices`` and "
"then test that it's not published, as well as create a similar ``Poll`` "
"*with* ``Choices``, and test that it *is* published."
msgstr ""

# 03a5aca0c1c3423c8bf864fceab3c2ce
#: ../../intro/tutorial05.txt:573
msgid ""
"Perhaps logged-in admin users should be allowed to see unpublished "
"``Polls``, but not ordinary visitors. Again: whatever needs to be added to "
"the software to accomplish this should be accompanied by a test, whether you "
"write the test first and then make the code pass the test, or work out the "
"logic in your code first and then write a test to prove it."
msgstr ""

# dfaf176d99524237822beecab7b1611a
#: ../../intro/tutorial05.txt:579
msgid ""
"At a certain point you are bound to look at your tests and wonder whether "
"your code is suffering from test bloat, which brings us to:"
msgstr ""

# 7f4dc062a44642a18b2014167fcb63e1
#: ../../intro/tutorial05.txt:583
msgid "When testing, more is better"
msgstr ""

# e943abd13b41481a8ae81f9bba766a0b
#: ../../intro/tutorial05.txt:585
msgid ""
"It might seem that our tests are growing out of control. At this rate there "
"will soon be more code in our tests than in our application, and the "
"repetition is unaesthetic, compared to the elegant conciseness of the rest "
"of our code."
msgstr ""

# b282d1ec5e0b497d834c59c0aad51bc0
#: ../../intro/tutorial05.txt:589
msgid ""
"**It doesn't matter**. Let them grow. For the most part, you can write a "
"test once and then forget about it. It will continue performing its useful "
"function as you continue to develop your program."
msgstr ""

# 7e2f0d4d6d05401e8047854525240f31
#: ../../intro/tutorial05.txt:593
msgid ""
"Sometimes tests will need to be updated. Suppose that we amend our views so "
"that only ``Polls`` with ``Choices`` are published. In that case, many of "
"our existing tests will fail - *telling us exactly which tests need to be "
"amended to bring them up to date*, so to that extent tests help look after "
"themselves."
msgstr ""

# f30ec12345e74607ad9e362117907d38
#: ../../intro/tutorial05.txt:598
msgid ""
"At worst, as you continue developing, you might find that you have some "
"tests that are now redundant. Even that's not a problem; in testing "
"redundancy is a *good* thing."
msgstr ""

# 3ada775793ea4add9b271765bc7b1a49
#: ../../intro/tutorial05.txt:602
msgid ""
"As long as your tests are sensibly arranged, they won't become unmanageable. "
"Good rules-of-thumb include having:"
msgstr ""

# 541982f66db5400286c9edd5a7158c4b
#: ../../intro/tutorial05.txt:605
msgid "a separate ``TestClass`` for each model or view"
msgstr ""

# e36bcd0db9554e5781f99bacb786f606
#: ../../intro/tutorial05.txt:606
msgid "a separate test method for each set of conditions you want to test"
msgstr ""

# 15a4422186034ebca3345aa703f3dfad
#: ../../intro/tutorial05.txt:607
msgid "test method names that describe their function"
msgstr ""

# 0ff87d19eb84415a858ebb590263bd38
#: ../../intro/tutorial05.txt:610
msgid "Further testing"
msgstr ""

# 276104aa5fd1432cb16bb30f93523db1
#: ../../intro/tutorial05.txt:612
msgid ""
"This tutorial only introduces some of the basics of testing. There's a great "
"deal more you can do, and a number of very useful tools at your disposal to "
"achieve some very clever things."
msgstr ""

# 55d196caca52488ab258be9cd90e9081
#: ../../intro/tutorial05.txt:616
msgid ""
"For example, while our tests here have covered some of the internal logic of "
"a model and the way our views publish information, you can use an \"in-"
"browser\" framework such as Selenium_ to test the way your HTML actually "
"renders in a browser. These tools allow you to check not just the behavior "
"of your Django code, but also, for example, of your JavaScript. It's quite "
"something to see the tests launch a browser, and start interacting with your "
"site, as if a human being were driving it! Django includes :class:`~django."
"test.LiveServerTestCase` to facilitate integration with tools like Selenium."
msgstr ""

# 080e119d2e5340998d53f8f5b30bc7f2
#: ../../intro/tutorial05.txt:625
msgid ""
"If you have a complex application, you may want to run tests automatically "
"with every commit for the purposes of `continuous integration`_, so that "
"quality control is itself - at least partially - automated."
msgstr ""

# feef16db881f4846bb38d688674e16ce
#: ../../intro/tutorial05.txt:629
msgid ""
"A good way to spot untested parts of your application is to check code "
"coverage. This also helps identify fragile or even dead code. If you can't "
"test a piece of code, it usually means that code should be refactored or "
"removed. Coverage will help to identify dead code. See :ref:`topics-testing-"
"code-coverage` for details."
msgstr ""

# ef9b7dd2ea9d4b24905bf2d2d207648e
#: ../../intro/tutorial05.txt:635
msgid ""
":doc:`Testing Django applications </topics/testing/index>` has comprehensive "
"information about testing."
msgstr ""

# e24c143a1ad14e74858693b51986da6a
#: ../../intro/tutorial05.txt:644
msgid ""
"For full details on testing, see :doc:`Testing in Django </topics/testing/"
"index>`."
msgstr ""

# 1cae6e9a9c3d4694814b8d38554e25fb
#: ../../intro/tutorial05.txt:647
msgid ""
"When you're comfortable with testing Django views, read :doc:`part 6 of this "
"tutorial</intro/tutorial06>` to learn about static files management."
msgstr ""

# 493c711099984697ae7459d5c1816265
#: ../../intro/tutorial06.txt:3
msgid "Writing your first Django app, part 6"
msgstr ""

# d4d775cd99c34ebdb1d986d425be3aaf
#: ../../intro/tutorial06.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 5 </intro/tutorial05>` left off. "
"We've built a tested Web-poll application, and we'll now add a stylesheet "
"and an image."
msgstr ""

# 7d36ab3470a14898a35fa5d2b4f23e1e
#: ../../intro/tutorial06.txt:9
msgid ""
"Aside from the HTML generated by the server, web applications generally need "
"to serve additional files — such as images, JavaScript, or CSS — necessary "
"to render the complete web page. In Django, we refer to these files as "
"\"static files\"."
msgstr ""

# ac6445e76bb845a291132a81f264900a
#: ../../intro/tutorial06.txt:14
msgid ""
"For small projects, this isn't a big deal, because you can just keep the "
"static files somewhere your web server can find it. However, in bigger "
"projects -- especially those comprised of multiple apps -- dealing with the "
"multiple sets of static files provided by each application starts to get "
"tricky."
msgstr ""

# 3f94d6a6389c4567a836544a7df2a34b
#: ../../intro/tutorial06.txt:20
msgid ""
"That's what ``django.contrib.staticfiles`` is for: it collects static files "
"from each of your applications (and any other places you specify) into a "
"single location that can easily be served in production."
msgstr ""

# 009d0fb64b634352b7e2af827d4baea9
#: ../../intro/tutorial06.txt:25
msgid "Customize your *app's* look and feel"
msgstr ""

# 570bc87d63814717b368d6c6403f736b
#: ../../intro/tutorial06.txt:27
msgid ""
"First, create a directory called ``static`` in your ``polls`` directory. "
"Django will look for static files there, similarly to how Django finds "
"templates inside ``polls/templates/``."
msgstr ""

# d8ffd4b13d1a473391eedd29528068f8
#: ../../intro/tutorial06.txt:31
msgid ""
"Django's :setting:`STATICFILES_FINDERS` setting contains a list of finders "
"that know how to discover static files from various sources. One of the "
"defaults is ``AppDirectoriesFinder`` which looks for a \"static\" "
"subdirectory in each of the :setting:`INSTALLED_APPS`, like the one in "
"``polls`` we just created. The admin site uses the same directory structure "
"for its static files."
msgstr ""

# 945402fe2d324171913bdedf03cf4831
#: ../../intro/tutorial06.txt:38
msgid ""
"Within the ``static`` directory you have just created, create another "
"directory called ``polls`` and within that create a file called ``style."
"css``. In other words, your stylesheet should be at ``polls/static/polls/"
"style.css``. Because of how the ``AppDirectoriesFinder`` staticfile finder "
"works, you can refer to this static file in Django simply as ``polls/style."
"css``, similar to how you reference the path for templates."
msgstr ""

# fb543314f091475992569550ba743df6
#: ../../intro/tutorial06.txt:45
msgid "Static file namespacing"
msgstr ""

# c26ca7a2a236481aa21d6a3e6155cebf
#: ../../intro/tutorial06.txt:47
msgid ""
"Just like templates, we *might* be able to get away with putting our static "
"files directly in ``polls/static`` (rather than creating another ``polls`` "
"subdirectory), but it would actually be a bad idea. Django will choose the "
"first static file it finds whose name matches, and if you had a static file "
"with the same name in a *different* application, Django would be unable to "
"distinguish between them. We need to be able to point Django at the right "
"one, and the easiest way to ensure this is by *namespacing* them. That is, "
"by putting those static files inside *another* directory named for the "
"application itself."
msgstr ""

# 42d6cb413d094623b9fce838d0c96087
#: ../../intro/tutorial06.txt:57
msgid ""
"Put the following code in that stylesheet (``polls/static/polls/style.css``):"
msgstr ""

# 42c40ecb894c4cdf842b4f23c5302d92
#: ../../intro/tutorial06.txt:65
msgid ""
"Next, add the following at the top of ``polls/templates/polls/index.html``:"
msgstr ""

# aa98b3a0f2474cbdade6f20c4dd20e27
#: ../../intro/tutorial06.txt:73
msgid ""
"``{% load staticfiles %}`` loads the :ttag:`{% static %} <staticfiles-"
"static>` template tag from the ``staticfiles`` template library. The ``{% "
"static %}`` template tag generates the absolute URL of the static file."
msgstr ""

# ab4c76bbfb01483c907027ffc1c5b4e8
#: ../../intro/tutorial06.txt:77
msgid ""
"That's all you need to do for development. Reload ``http://localhost:8000/"
"polls/`` and you should see that the poll links are green (Django style!) "
"which means that your stylesheet was properly loaded."
msgstr ""

# 6526b627717544fc9eb1b82c4f81d79a
#: ../../intro/tutorial06.txt:82
msgid "Adding a background-image"
msgstr ""

# ba70b9ee63af40409d4a1182038d41d4
#: ../../intro/tutorial06.txt:84
msgid ""
"Next, we'll create a subdirectory for images. Create an ``images`` "
"subdirectory in the ``polls/static/polls/`` directory. Inside this "
"directory, put an image called ``background.gif``. In other words, put your "
"image in ``polls/static/polls/images/background.gif``."
msgstr ""

# b39f91c398ec476f9a4bf6e791a359f5
#: ../../intro/tutorial06.txt:89
msgid "Then, add to your stylesheet (``polls/static/polls/style.css``):"
msgstr ""

# 4ab665ff00014e56bedbc16524bc3332
#: ../../intro/tutorial06.txt:97
msgid ""
"Reload ``http://localhost:8000/polls/`` and you should see the background "
"loaded in the bottom right of the screen."
msgstr ""

# ac8a565bf75744c0a87a79d0a84aefa0
#: ../../intro/tutorial06.txt:102
msgid ""
"Of course the ``{% static %}`` template tag is not available for use in "
"static files like your stylesheet which aren't generated by Django. You "
"should always use **relative paths** to link your static files between each "
"other, because then you can change :setting:`STATIC_URL` (used by the :ttag:"
"`static` template tag to generate its URLs) without having to modify a bunch "
"of paths in your static files as well."
msgstr ""

# ee553981012b40e9bbd014607356f6c8
#: ../../intro/tutorial06.txt:109
msgid ""
"These are the **basics**. For more details on settings and other bits "
"included with the framework see :doc:`the static files howto </howto/static-"
"files/index>` and :doc:`the staticfiles reference </ref/contrib/"
"staticfiles>`. :doc:`Deploying static files </howto/static-files/"
"deployment>` discusses how to use static files on a real server."
msgstr ""

# 9dfb1ddd056448c082fa7e5bebee65bd
#: ../../intro/tutorial06.txt:119
msgid ""
"The beginner tutorial ends here for the time being. In the meantime, you "
"might want to check out some pointers on :doc:`where to go from here </intro/"
"whatsnext>`."
msgstr ""

# 4488b1532ecc40a39a8c6276afa8f1e7
#: ../../intro/tutorial06.txt:123
msgid ""
"If you are familiar with Python packaging and interested in learning how to "
"turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How "
"to write reusable apps</intro/reusable-apps>`."
msgstr ""

# 534397eb70f0486d848e025640da73d7
#: ../../intro/whatsnext.txt:3
msgid "What to read next"
msgstr ""

# 0cbb4523b6e243778ff9cbf7f27bd2da
#: ../../intro/whatsnext.txt:5
msgid ""
"So you've read all the :doc:`introductory material </intro/index>` and have "
"decided you'd like to keep using Django. We've only just scratched the "
"surface with this intro (in fact, if you've read every single word you've "
"still read less than 10% of the overall documentation)."
msgstr ""

# 3bfd1c9e574d4fd0a2c5e315cafc77ef
#: ../../intro/whatsnext.txt:10
msgid "So what's next?"
msgstr ""

# 1a0654f9a659446eab7f64010436c215
#: ../../intro/whatsnext.txt:12
msgid ""
"Well, we've always been big fans of learning by doing. At this point you "
"should know enough to start a project of your own and start fooling around. "
"As you need to learn new tricks, come back to the documentation."
msgstr ""

# 332f06e622f64fd29e746cec45302fa9
#: ../../intro/whatsnext.txt:16
msgid ""
"We've put a lot of effort into making Django's documentation useful, easy to "
"read and as complete as possible. The rest of this document explains more "
"about how the documentation works so that you can get the most out of it."
msgstr ""

# 25219b9865234515bbf1816b940cc880
#: ../../intro/whatsnext.txt:20
msgid ""
"(Yes, this is documentation about documentation. Rest assured we have no "
"plans to write a document about how to read the document about "
"documentation.)"
msgstr ""

# 91cfe52726854622922c10c16054816c
#: ../../intro/whatsnext.txt:24
msgid "Finding documentation"
msgstr ""

# 7f2a926f64bd4a15911a71902c04a5cf
#: ../../intro/whatsnext.txt:26
msgid ""
"Django's got a *lot* of documentation -- almost 200,000 words -- so finding "
"what you need can sometimes be tricky. A few good places to start are the :"
"ref:`search` and the :ref:`genindex`."
msgstr ""

# 29f4a6e241f64a459d3b4367076fc8f6
#: ../../intro/whatsnext.txt:30
msgid "Or you can just browse around!"
msgstr ""

# a2c42d8641124561abb0d47850d25d37
#: ../../intro/whatsnext.txt:33
msgid "How the documentation is organized"
msgstr ""

# 74d107f9c79c46208f29671b220670d3
#: ../../intro/whatsnext.txt:35
msgid ""
"Django's main documentation is broken up into \"chunks\" designed to fill "
"different needs:"
msgstr ""

# 872714c95a3e416cbc21878be03942b3
#: ../../intro/whatsnext.txt:38
msgid ""
"The :doc:`introductory material </intro/index>` is designed for people new "
"to Django -- or to Web development in general. It doesn't cover anything in "
"depth, but instead gives a high-level overview of how developing in Django "
"\"feels\"."
msgstr ""

# cda3d352b7e847d7afae5c10da11222d
#: ../../intro/whatsnext.txt:43
msgid ""
"The :doc:`topic guides </topics/index>`, on the other hand, dive deep into "
"individual parts of Django. There are complete guides to Django's :doc:"
"`model system </topics/db/index>`, :doc:`template engine </topics/"
"templates>`, :doc:`forms framework </topics/forms/index>`, and much more."
msgstr ""

# 03982d5718914ddd8fe794044a9c8a8c
#: ../../intro/whatsnext.txt:49
msgid ""
"This is probably where you'll want to spend most of your time; if you work "
"your way through these guides you should come out knowing pretty much "
"everything there is to know about Django."
msgstr ""

# 1eadf481a57649fa8e826ec97084ac58
#: ../../intro/whatsnext.txt:53
msgid ""
"Web development is often broad, not deep -- problems span many domains. "
"We've written a set of :doc:`how-to guides </howto/index>` that answer "
"common \"How do I ...?\" questions. Here you'll find information about :doc:"
"`generating PDFs with Django </howto/outputting-pdf>`, :doc:`writing custom "
"template tags </howto/custom-template-tags>`, and more."
msgstr ""

# 018a9e7e16bf4d30a055c1cdaf587238
#: ../../intro/whatsnext.txt:59
msgid ""
"Answers to really common questions can also be found in the :doc:`FAQ </faq/"
"index>`."
msgstr ""

# 609fb5eca1924580b6e6b82c870a6da2
#: ../../intro/whatsnext.txt:62
msgid ""
"The guides and how-to's don't cover every single class, function, and method "
"available in Django -- that would be overwhelming when you're trying to "
"learn. Instead, details about individual classes, functions, methods, and "
"modules are kept in the :doc:`reference </ref/index>`. This is where you'll "
"turn to find the details of a particular function or whathaveyou."
msgstr ""

# 1d48ba03c7c94a35a03fe32c7746a191
#: ../../intro/whatsnext.txt:69
msgid ""
"Finally, there's some \"specialized\" documentation not usually relevant to "
"most developers. This includes the :doc:`release notes </releases/index>` "
"and :doc:`internals documentation </internals/index>` for those who want to "
"add code to Django itself, and a :doc:`few other things that simply don't "
"fit elsewhere </misc/index>`."
msgstr ""

# 7403d1b0727640fa8629ec6a98f20c93
#: ../../intro/whatsnext.txt:77
msgid "How documentation is updated"
msgstr ""

# 63c93765304242cea7aed1b837a4e741
#: ../../intro/whatsnext.txt:79
msgid ""
"Just as the Django code base is developed and improved on a daily basis, our "
"documentation is consistently improving. We improve documentation for "
"several reasons:"
msgstr ""

# a24da8467d2b44c185ad2b81bc59451d
#: ../../intro/whatsnext.txt:83
msgid "To make content fixes, such as grammar/typo corrections."
msgstr ""

# 9c8cdad4d6fd4fbf9a643136ef79d5be
#: ../../intro/whatsnext.txt:85
msgid ""
"To add information and/or examples to existing sections that need to be "
"expanded."
msgstr ""

# 672e886ded7945b5bc055d543de5b592
#: ../../intro/whatsnext.txt:88
msgid ""
"To document Django features that aren't yet documented. (The list of such "
"features is shrinking but exists nonetheless.)"
msgstr ""

# c4a1fd1045374cada17a3357d423fc88
#: ../../intro/whatsnext.txt:91
msgid ""
"To add documentation for new features as new features get added, or as "
"Django APIs or behaviors change."
msgstr ""

# 239fefd29c6e407780ba71aa3c40e8e5
#: ../../intro/whatsnext.txt:94
msgid ""
"Django's documentation is kept in the same source control system as its "
"code. It lives in the `docs`_ directory of our Git repository. Each document "
"online is a separate text file in the repository."
msgstr ""

# f54c8a2783d044799afa455b14892bc5
#: ../../intro/whatsnext.txt:101
msgid "Where to get it"
msgstr ""

# 402892ffd02d48a18887e7ab03500c14
#: ../../intro/whatsnext.txt:103
msgid ""
"You can read Django documentation in several ways. They are, in order of "
"preference:"
msgstr ""

# 5008b91f73064e54b11eccf4acdaa2ad
#: ../../intro/whatsnext.txt:107
msgid "On the Web"
msgstr ""

# a8249dc3db6e42c9b6cf629c70c7a829
#: ../../intro/whatsnext.txt:109
msgid ""
"The most recent version of the Django documentation lives at https://docs."
"djangoproject.com/en/dev/. These HTML pages are generated automatically from "
"the text files in source control. That means they reflect the \"latest and "
"greatest\" in Django -- they include the very latest corrections and "
"additions, and they discuss the latest Django features, which may only be "
"available to users of the Django development version. (See \"Differences "
"between versions\" below.)"
msgstr ""

# 0a70d683016c499fae08f9c050195320
#: ../../intro/whatsnext.txt:117
msgid ""
"We encourage you to help improve the docs by submitting changes, corrections "
"and suggestions in the `ticket system`_. The Django developers actively "
"monitor the ticket system and use your feedback to improve the documentation "
"for everybody."
msgstr ""

# 140cad4c3eab4113848fa3442c390e8a
#: ../../intro/whatsnext.txt:121
msgid ""
"Note, however, that tickets should explicitly relate to the documentation, "
"rather than asking broad tech-support questions. If you need help with your "
"particular Django setup, try the `django-users mailing list`_ or the "
"`#django IRC channel`_ instead."
msgstr ""

# 3c3dd3fc0b9c4293ae0bed4540598709
#: ../../intro/whatsnext.txt:131
msgid "In plain text"
msgstr ""

# f5dd072ef2b14d118d1f2e86711e1980
#: ../../intro/whatsnext.txt:133
msgid ""
"For offline reading, or just for convenience, you can read the Django "
"documentation in plain text."
msgstr ""

# 6704e86a2b4f40aeadd5c7853743897f
#: ../../intro/whatsnext.txt:136
msgid ""
"If you're using an official release of Django, note that the zipped package "
"(tarball) of the code includes a ``docs/`` directory, which contains all the "
"documentation for that release."
msgstr ""

# 410bb8521b644c0589efef8aa971dce2
#: ../../intro/whatsnext.txt:140
msgid ""
"If you're using the development version of Django (aka \"trunk\"), note that "
"the ``docs/`` directory contains all of the documentation. You can update "
"your Git checkout to get the latest changes."
msgstr ""

# 6352529ab8444538a81ef67a65210bb5
#: ../../intro/whatsnext.txt:144
msgid ""
"One low-tech way of taking advantage of the text documentation is by using "
"the Unix ``grep`` utility to search for a phrase in all of the "
"documentation. For example, this will show you each mention of the phrase "
"\"max_length\" in any Django document:"
msgstr ""

# 0794ca318cd74dfebc7a58836a8480f2
#: ../../intro/whatsnext.txt:154
msgid "As HTML, locally"
msgstr ""

# 69d467a94f2e45339b2357ed13627d5c
#: ../../intro/whatsnext.txt:156
msgid ""
"You can get a local copy of the HTML documentation following a few easy "
"steps:"
msgstr ""

# ba7c742044e94d38a84781312cc8faaa
#: ../../intro/whatsnext.txt:158
msgid ""
"Django's documentation uses a system called Sphinx__ to convert from plain "
"text to HTML. You'll need to install Sphinx by either downloading and "
"installing the package from the Sphinx Web site, or with ``pip``:"
msgstr ""

# 78e456c1fc1f4862aac72fab77a36562
#: ../../intro/whatsnext.txt:166
msgid ""
"Then, just use the included ``Makefile`` to turn the documentation into HTML:"
msgstr ""

# 0cd8cfaaee4049d48e1a05779b996d74
#: ../../intro/whatsnext.txt:174
msgid "You'll need `GNU Make`__ installed for this."
msgstr ""

# bf2de8bf0b6c4c63aefa17c5267e8d8e
#: ../../intro/whatsnext.txt:176
msgid "If you're on Windows you can alternatively use the included batch file:"
msgstr ""

# 8580a1e6df0b45f481a3332fa8553659
#: ../../intro/whatsnext.txt:183
msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr ""

# fefd72e5d47443ac9ce7c43a951e705d
#: ../../intro/whatsnext.txt:187
msgid ""
"Generation of the Django documentation will work with Sphinx version 0.6 or "
"newer, but we recommend going straight to Sphinx 1.0.2 or newer."
msgstr ""

# 4e016d16f0e6433a8a71d25eff9ba885
#: ../../intro/whatsnext.txt:196
msgid "Differences between versions"
msgstr ""

# b0b0c179ae944e03862dcd0ea0df0fe9
#: ../../intro/whatsnext.txt:198
msgid ""
"As previously mentioned, the text documentation in our Git repository "
"contains the \"latest and greatest\" changes and additions. These changes "
"often include documentation of new features added in the Django development "
"version -- the Git (\"trunk\") version of Django. For that reason, it's "
"worth pointing out our policy on keeping straight the documentation for "
"various versions of the framework."
msgstr ""

# 5e16a2630e994e069a51c731b6163a39
#: ../../intro/whatsnext.txt:205
msgid "We follow this policy:"
msgstr ""

# bac5b43c10274b9f88f2c1247681edda
#: ../../intro/whatsnext.txt:207
msgid ""
"The primary documentation on djangoproject.com is an HTML version of the "
"latest docs in Git. These docs always correspond to the latest official "
"Django release, plus whatever features we've added/changed in the framework "
"*since* the latest release."
msgstr ""

# e9d559e515cf4117bf0e83dd5a377638
#: ../../intro/whatsnext.txt:212
msgid ""
"As we add features to Django's development version, we try to update the "
"documentation in the same Git commit transaction."
msgstr ""

# 5e81a549afb1420f83539c5eef40d958
#: ../../intro/whatsnext.txt:215
msgid ""
"To distinguish feature changes/additions in the docs, we use the phrase: "
"\"New in version X.Y\", being X.Y the next release version (hence, the one "
"being developed)."
msgstr ""

# c1322802e2cc451e913a9ed2a4058f30
#: ../../intro/whatsnext.txt:219
msgid ""
"Documentation fixes and improvements may be backported to the last release "
"branch, at the discretion of the committer, however, once a version of "
"Django is :ref:`no longer supported<backwards-compatibility-policy>`, that "
"version of the docs won't get any further updates."
msgstr ""

# 8dea1881b35647f6b4d790f8f2ccea28
#: ../../intro/whatsnext.txt:224
msgid ""
"The `main documentation Web page`_ includes links to documentation for all "
"previous versions. Be sure you are using the version of the docs "
"corresponding to the version of Django you are using!"
msgstr ""
