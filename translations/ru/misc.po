# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-06-08 14:28\n"
"PO-Revision-Date: 2014-02-14 15:30+0500\n"
"Last-Translator: Vitaliy Dorokhin <seryimysh@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.6.4\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"Language: ru_RU\n"

# cbc91a42ebac40d18094b4ff5797e125
#: ../../misc/api-stability.txt:3
msgid "API stability"
msgstr ""

# 95cf3fddc50d46bfbee73ee5e2416c4e
#: ../../misc/api-stability.txt:5
msgid ""
":doc:`The release of Django 1.0 </releases/1.0>` comes with a promise of API "
"stability and forwards-compatibility. In a nutshell, this means that code "
"you develop against a 1.X version of Django will continue to work with "
"future 1.X releases. You may need to make minor changes when upgrading the "
"version of Django your project uses: see the \"Backwards incompatible changes"
"\" section of the :doc:`release note </releases/index>` for the version or "
"versions to which you are upgrading."
msgstr ""

# c880e39743574f6fa8f3bfa570f79769
#: ../../misc/api-stability.txt:14
msgid "What \"stable\" means"
msgstr ""

# d2cc422e1964456f8b6fdd403af32f8c
#: ../../misc/api-stability.txt:16
msgid "In this context, stable means:"
msgstr ""

# 882072b7c74f4ee79538c5f8e83aa1e9
#: ../../misc/api-stability.txt:18
msgid ""
"All the public APIs (everything in this documentation) will not be moved or "
"renamed without providing backwards-compatible aliases."
msgstr ""

# c75461d05acd4fb2beefda56f2bc99bd
#: ../../misc/api-stability.txt:21
msgid ""
"If new features are added to these APIs -- which is quite possible -- they "
"will not break or change the meaning of existing methods. In other words, "
"\"stable\" does not (necessarily) mean \"complete.\""
msgstr ""

# 70afac3669ea4182b1dcc8d943f8ce8b
#: ../../misc/api-stability.txt:25
msgid ""
"If, for some reason, an API declared stable must be removed or replaced, it "
"will be declared deprecated but will remain in the API for at least two "
"minor version releases. Warnings will be issued when the deprecated method "
"is called."
msgstr ""

# 8fcccef31c30483e8517b7de5d3cb269
#: ../../misc/api-stability.txt:30
msgid ""
"See :ref:`official-releases` for more details on how Django's version "
"numbering scheme works, and how features will be deprecated."
msgstr ""

# 4696623103a847a0a2288f7ecc00b7de
#: ../../misc/api-stability.txt:33
msgid ""
"We'll only break backwards compatibility of these APIs if a bug or security "
"hole makes it completely unavoidable."
msgstr ""

# 72938b353ee04264ba86f1bf60e1cc13
#: ../../misc/api-stability.txt:37
msgid "Stable APIs"
msgstr ""

# 5d289b39c82648248416328682dc6f36
#: ../../misc/api-stability.txt:39
msgid ""
"In general, everything covered in the documentation -- with the exception of "
"anything in the :doc:`internals area </internals/index>` is considered "
"stable."
msgstr ""

# 0b5d269c4184460bbc03e191911341b0
#: ../../misc/api-stability.txt:43
msgid "Exceptions"
msgstr ""

# 6fb48ac9476444b88625f7d87a4c69f5
#: ../../misc/api-stability.txt:45
msgid ""
"There are a few exceptions to this stability and backwards-compatibility "
"promise."
msgstr ""

# 8926a466a9654cbf991b79ca9ab83fef
#: ../../misc/api-stability.txt:49
msgid "Security fixes"
msgstr ""

# 3b198b37c2fe43aa9b1fce9688cbf72a
#: ../../misc/api-stability.txt:51
msgid ""
"If we become aware of a security problem -- hopefully by someone following "
"our :ref:`security reporting policy <reporting-security-issues>` -- we'll do "
"everything necessary to fix it. This might mean breaking backwards "
"compatibility; security trumps the compatibility guarantee."
msgstr ""

# e6bbd9bade6e4aaa98fb58cd8963d954
#: ../../misc/api-stability.txt:57
msgid "APIs marked as internal"
msgstr ""

# 41285506fc85417199c5ba0ba4fe5495
#: ../../misc/api-stability.txt:59
msgid "Certain APIs are explicitly marked as \"internal\" in a couple of ways:"
msgstr ""

# 0bfbc7ee96da46798f869c2de9547f34
#: ../../misc/api-stability.txt:61
msgid ""
"Some documentation refers to internals and mentions them as such. If the "
"documentation says that something is internal, we reserve the right to "
"change it."
msgstr ""

# 9ba831c63ab146d3b3ecf9dc41a287f8
#: ../../misc/api-stability.txt:65
msgid ""
"Functions, methods, and other objects prefixed by a leading underscore "
"(``_``). This is the standard Python way of indicating that something is "
"private; if any method starts with a single ``_``, it's an internal API."
msgstr ""

# 38e7d052030f4dd6accf7b8ade9ce8e7
#: ../../misc/api-stability.txt:72
msgid "Local flavors"
msgstr ""

# 0d028c93fed8458b96fc6bd1b8a802c2
#: ../../misc/api-stability.txt:74
msgid ""
":mod:`django.contrib.localflavor` contains assorted pieces of code that are "
"useful for particular countries or cultures. This data is local in nature, "
"and is subject to change on timelines that will almost never correlate with "
"Django's own release schedules. For example, a common change is to split a "
"province into two new provinces, or to rename an existing province."
msgstr ""

# a424ebdd04aa4231a511efefd05132bb
#: ../../misc/api-stability.txt:81
msgid ""
"These changes present two competing compatibility issues. Moving forward, "
"displaying the names of deprecated, renamed and dissolved provinces in a "
"selection widget is bad from a user interface perspective. However, "
"maintaining full backwards compatibility requires that we support historical "
"values that may be stored in a database -- including values that may no "
"longer be valid."
msgstr ""

# 23faab3390bf4769a09b28851ec49cdf
#: ../../misc/api-stability.txt:88
msgid ""
"Therefore, Django has the following policy with respect to changes in local "
"flavor:"
msgstr ""

# 4e9e31a7146e4cc3bd3fe26fe8467726
#: ../../misc/api-stability.txt:91
msgid ""
"At the time of a Django release, the data and algorithms contained in :mod:"
"`django.contrib.localflavor` will, to the best of our ability, reflect the "
"officially gazetted policies of the appropriate local government authority. "
"If a province has been added, altered, or removed, that change will be "
"reflected in Django's localflavor."
msgstr ""

# 01e62a41b3374eca88fe5f6d69187ead
#: ../../misc/api-stability.txt:98
msgid ""
"These changes will *not* be backported to the previous stable release. "
"Upgrading a minor version of Django should not require any data migration or "
"audits for UI changes; therefore, if you want to get the latest province "
"list, you will either need to upgrade your Django install, or backport the "
"province list you need."
msgstr ""

# ea42648b5c4e448d86bc57f47f6b0ea2
#: ../../misc/api-stability.txt:105
msgid ""
"For one release, the affected localflavor module will raise a "
"``RuntimeWarning`` when it is imported."
msgstr ""

# 6379b82df5044e70a794357fc2c1665b
#: ../../misc/api-stability.txt:108
msgid ""
"The change will be announced in the release notes as a backwards "
"incompatible change requiring attention. The change will also be annotated "
"in the documentation for the localflavor module."
msgstr ""

# 9252adee5beb4a0fa1d51c307e1f296b
#: ../../misc/api-stability.txt:112
msgid ""
"Where necessary and feasible, a migration script will be provided to aid the "
"migration process."
msgstr ""

# 11b0ec181b674f918cce81156c45a7fb
#: ../../misc/api-stability.txt:115
msgid ""
"For example, Django 1.2 contains an Indonesian localflavor. It has a "
"province list that includes \"Nanggroe Aceh Darussalam (NAD)\" as a "
"province. The Indonesian government has changed the official name of the "
"province to \"Aceh (ACE)\". As a result, Django 1.3 does *not* contain "
"\"Nanggroe Aceh Darussalam (NAD)\" in the province list, but *does* contain "
"\"Aceh (ACE)\"."
msgstr ""

# 4a30d4a496c04154978b38fd6328d5fb
#: ../../misc/design-philosophies.txt:3
msgid "Design philosophies"
msgstr ""

# c02a389212d74ee18b5f249660883f8d
#: ../../misc/design-philosophies.txt:5
msgid ""
"This document explains some of the fundamental philosophies Django's "
"developers have used in creating the framework. Its goal is to explain the "
"past and guide the future."
msgstr ""

# 988a4444b3a8483f90a86e71bb172f4d
#: ../../misc/design-philosophies.txt:10
msgid "Overall"
msgstr ""

# f326a30c0357465da8e2d75ce01a271a
# 9564f94cc89f459ea22534fab8772bc8
# ed581d16c9cd4c2c8bb677d23a48822b
#: ../../misc/design-philosophies.txt:15
#: ../../misc/design-philosophies.txt:155
#: ../../misc/design-philosophies.txt:300
msgid "Loose coupling"
msgstr ""

# 790c7cea18b84c6595153a2e6e8f50d9
#: ../../misc/design-philosophies.txt:19
msgid ""
"A fundamental goal of Django's stack is `loose coupling and tight "
"cohesion`_. The various layers of the framework shouldn't \"know\" about "
"each other unless absolutely necessary."
msgstr ""

# afaa7dab04dc43b6b04f3ffd69b770d2
#: ../../misc/design-philosophies.txt:23
msgid ""
"For example, the template system knows nothing about Web requests, the "
"database layer knows nothing about data display and the view system doesn't "
"care which template system a programmer uses."
msgstr ""

# 9331eb36dae742cfa7887dafd4c3f5bc
#: ../../misc/design-philosophies.txt:27
msgid ""
"Although Django comes with a full stack for convenience, the pieces of the "
"stack are independent of another wherever possible."
msgstr ""

# e560520a95b34b709219f89fba95654e
#: ../../misc/design-philosophies.txt:35
msgid "Less code"
msgstr ""

# 4286b5407d874837bea1ae826fd15a5a
#: ../../misc/design-philosophies.txt:37
msgid ""
"Django apps should use as little code as possible; they should lack "
"boilerplate. Django should take full advantage of Python's dynamic "
"capabilities, such as introspection."
msgstr ""

# 1c6e0a35c69943e69cfc420ac4f0728e
#: ../../misc/design-philosophies.txt:44
msgid "Quick development"
msgstr ""

# 8fd5237ece6b4fd58a9c81e61d6c5e1e
#: ../../misc/design-philosophies.txt:46
msgid ""
"The point of a Web framework in the 21st century is to make the tedious "
"aspects of Web development fast. Django should allow for incredibly quick "
"Web development."
msgstr ""

# ce03586ff9cd4d70956b0f1f767b3afc
#: ../../misc/design-philosophies.txt:53
msgid "Don't repeat yourself (DRY)"
msgstr ""

# 5472f1acb1c543d987c40e6d6ce6a5a2
#: ../../misc/design-philosophies.txt:59
msgid ""
"Every distinct concept and/or piece of data should live in one, and only "
"one, place. Redundancy is bad. Normalization is good."
msgstr ""

# 2a36ea2988824b13be9627e5e4e9a869
#: ../../misc/design-philosophies.txt:62
msgid ""
"The framework, within reason, should deduce as much as possible from as "
"little as possible."
msgstr ""

# 6ad8e860d70d409cae507d38f0660449
#: ../../misc/design-philosophies.txt:67
msgid "The `discussion of DRY on the Portland Pattern Repository`__"
msgstr ""

# 75016b8a47744d918f8d2b7d26df42f1
# 88ead8a45b1c4aa397a7119463207535
#: ../../misc/design-philosophies.txt:74 ../../misc/design-philosophies.txt:95
msgid "Explicit is better than implicit"
msgstr ""

# 07b2311915a34364befc7f24869795aa
#: ../../misc/design-philosophies.txt:76
msgid ""
"This is a core Python principle listed in :pep:`20`, and it means Django "
"shouldn't do too much \"magic.\" Magic shouldn't happen unless there's a "
"really good reason for it. Magic is worth using only if it creates a huge "
"convenience unattainable in other ways, and it isn't implemented in a way "
"that confuses developers who are trying to learn how to use the feature."
msgstr ""

# ddd19dd1e221421eac237d6f6be989ab
#: ../../misc/design-philosophies.txt:85
msgid "Consistency"
msgstr ""

# 919d891bf93f487a9c9ff4067d4ec5c1
#: ../../misc/design-philosophies.txt:87
msgid ""
"The framework should be consistent at all levels. Consistency applies to "
"everything from low-level (the Python coding style used) to high-level (the "
"\"experience\" of using Django)."
msgstr ""

# 0bc61a19697d4c74ad8fd6004e873304
#: ../../misc/design-philosophies.txt:92
msgid "Models"
msgstr ""

# 5541f1a13f744aaca79a55892ef703f1
#: ../../misc/design-philosophies.txt:97
msgid ""
"Fields shouldn't assume certain behaviors based solely on the name of the "
"field. This requires too much knowledge of the system and is prone to "
"errors. Instead, behaviors should be based on keyword arguments and, in some "
"cases, on the type of the field."
msgstr ""

# 5c945434effb443dbdc78c7bc24d61b3
#: ../../misc/design-philosophies.txt:103
msgid "Include all relevant domain logic"
msgstr ""

# ea6f7c2b39a54b6e8e83550f244f7f5a
#: ../../misc/design-philosophies.txt:105
msgid ""
"Models should encapsulate every aspect of an \"object,\" following Martin "
"Fowler's `Active Record`_ design pattern."
msgstr ""

# e2e863932f054c948188f9105f4b7355
#: ../../misc/design-philosophies.txt:108
msgid ""
"This is why both the data represented by a model and information about it "
"(its human-readable name, options like default ordering, etc.) are defined "
"in the model class; all the information needed to understand a given model "
"should be stored *in* the model."
msgstr ""

# 43ce38a7ff5e47dd83d1163d8f052209
#: ../../misc/design-philosophies.txt:116
msgid "Database API"
msgstr ""

# 4b412995acac45bdbc02aa66324b1ec9
#: ../../misc/design-philosophies.txt:118
msgid "The core goals of the database API are:"
msgstr ""

# 26313e47e4544ba1a8ee27c4402ae09a
#: ../../misc/design-philosophies.txt:121
msgid "SQL efficiency"
msgstr ""

# 78db51812cd7479084f56ad8bc5cc384
#: ../../misc/design-philosophies.txt:123
msgid ""
"It should execute SQL statements as few times as possible, and it should "
"optimize statements internally."
msgstr ""

# 104f405eb6374de296353bec1cdb1f4f
#: ../../misc/design-philosophies.txt:126
msgid ""
"This is why developers need to call ``save()`` explicitly, rather than the "
"framework saving things behind the scenes silently."
msgstr ""

# 082c947823bf42879d45e6db9d237b2d
#: ../../misc/design-philosophies.txt:129
msgid ""
"This is also why the ``select_related()`` ``QuerySet`` method exists. It's "
"an optional performance booster for the common case of selecting \"every "
"related object.\""
msgstr ""

# deded0ffcda241cba93d9762088e2aec
#: ../../misc/design-philosophies.txt:134
msgid "Terse, powerful syntax"
msgstr ""

# 16659997c4a545cdbdcfe237e10926ef
#: ../../misc/design-philosophies.txt:136
msgid ""
"The database API should allow rich, expressive statements in as little "
"syntax as possible. It should not rely on importing other modules or helper "
"objects."
msgstr ""

# 0edd14b82ea84b1aa77c37b303fc1bd1
#: ../../misc/design-philosophies.txt:139
msgid ""
"Joins should be performed automatically, behind the scenes, when necessary."
msgstr ""

# 711c79efd0404b42941f2df4b6670db0
#: ../../misc/design-philosophies.txt:141
msgid ""
"Every object should be able to access every related object, systemwide. This "
"access should work both ways."
msgstr ""

# 079058ec5b9145adbcb1169e863fb329
#: ../../misc/design-philosophies.txt:145
msgid "Option to drop into raw SQL easily, when needed"
msgstr ""

# cbf67138fc814fd086e51994bf0ef7d3
#: ../../misc/design-philosophies.txt:147
msgid ""
"The database API should realize it's a shortcut but not necessarily an end-"
"all-be-all. The framework should make it easy to write custom SQL -- entire "
"statements, or just custom ``WHERE`` clauses as custom parameters to API "
"calls."
msgstr ""

# 66d28342c4744c248dc5e5bc375136e1
#: ../../misc/design-philosophies.txt:152
msgid "URL design"
msgstr ""

# 55e7bb70dd654fd4aa54871b9c5c2ca7
#: ../../misc/design-philosophies.txt:157
msgid ""
"URLs in a Django app should not be coupled to the underlying Python code. "
"Tying URLs to Python function names is a Bad And Ugly Thing."
msgstr ""

# c79eb4ce8417459c94105dbcb11d5b30
#: ../../misc/design-philosophies.txt:160
msgid ""
"Along these lines, the Django URL system should allow URLs for the same app "
"to be different in different contexts. For example, one site may put stories "
"at ``/stories/``, while another may use ``/news/``."
msgstr ""

# 73347f31fab948738f5bfc5529084e91
#: ../../misc/design-philosophies.txt:165
msgid "Infinite flexibility"
msgstr ""

# 49bdf14bdb4e410d9377a58364d29d38
#: ../../misc/design-philosophies.txt:167
msgid ""
"URLs should be as flexible as possible. Any conceivable URL design should be "
"allowed."
msgstr ""

# f79036c737a14be3a557f7db90d855e1
#: ../../misc/design-philosophies.txt:171
msgid "Encourage best practices"
msgstr ""

# 8273ec931f154621991d58d7e430d126
#: ../../misc/design-philosophies.txt:173
msgid ""
"The framework should make it just as easy (or even easier) for a developer "
"to design pretty URLs than ugly ones."
msgstr ""

# 86ccdb5dbcaf43ebae2da1c5e9aef879
#: ../../misc/design-philosophies.txt:176
msgid "File extensions in Web-page URLs should be avoided."
msgstr ""

# 5182e57dd463486e8afacb66e804c4b5
#: ../../misc/design-philosophies.txt:178
msgid "Vignette-style commas in URLs deserve severe punishment."
msgstr ""

# cda1b4f3c45c4741acca1d6d2cb81096
#: ../../misc/design-philosophies.txt:183
msgid "Definitive URLs"
msgstr ""

# 9e572484ea1d480999e5afdf4a148b93
#: ../../misc/design-philosophies.txt:187
msgid ""
"Technically, ``foo.com/bar`` and ``foo.com/bar/`` are two different URLs, "
"and search-engine robots (and some Web traffic-analyzing tools) would treat "
"them as separate pages. Django should make an effort to \"normalize\" URLs "
"so that search-engine robots don't get confused."
msgstr ""

# 85898e08a9ed4d028b2223bfc4a54c64
#: ../../misc/design-philosophies.txt:192
msgid "This is the reasoning behind the :setting:`APPEND_SLASH` setting."
msgstr ""

# 41a9f137295d479ab308f0c04995e49b
#: ../../misc/design-philosophies.txt:195
msgid "Template system"
msgstr ""

# a431805746e84a2f8bb1f6cbb4b0c7f3
#: ../../misc/design-philosophies.txt:200
msgid "Separate logic from presentation"
msgstr ""

# dae0c51f10fb45a9aa1d2d1b6ab91506
#: ../../misc/design-philosophies.txt:202
msgid ""
"We see a template system as a tool that controls presentation and "
"presentation-related logic -- and that's it. The template system shouldn't "
"support functionality that goes beyond this basic goal."
msgstr ""

# 087b392f97954d42a91bc18db22a0e96
#: ../../misc/design-philosophies.txt:207
msgid "Discourage redundancy"
msgstr ""

# 622275e053de45579f0a044c94b3dc2a
#: ../../misc/design-philosophies.txt:209
msgid ""
"The majority of dynamic Web sites use some sort of common sitewide design -- "
"a common header, footer, navigation bar, etc. The Django template system "
"should make it easy to store those elements in a single place, eliminating "
"duplicate code."
msgstr ""

# ed6210fb2a5746b4b1b3a6e1f2eb0d6d
#: ../../misc/design-philosophies.txt:214
msgid ""
"This is the philosophy behind :ref:`template inheritance <template-"
"inheritance>`."
msgstr ""

# e87ecdc02c0846a9bc145ead113b2508
#: ../../misc/design-philosophies.txt:218
msgid "Be decoupled from HTML"
msgstr ""

# 41d9b05e0c0a488bbc822f8c9acdb99a
#: ../../misc/design-philosophies.txt:220
msgid ""
"The template system shouldn't be designed so that it only outputs HTML. It "
"should be equally good at generating other text-based formats, or just plain "
"text."
msgstr ""

# e350b9e7515f42329ac6846ed675582d
#: ../../misc/design-philosophies.txt:225
msgid "XML should not be used for template languages"
msgstr ""

# db8b7642bf0648c6a7845730858b04d2
#: ../../misc/design-philosophies.txt:229
msgid ""
"Using an XML engine to parse templates introduces a whole new world of human "
"error in editing templates -- and incurs an unacceptable level of overhead "
"in template processing."
msgstr ""

# 4a16778382ac4ec0a7e264e7f501c988
#: ../../misc/design-philosophies.txt:234
msgid "Assume designer competence"
msgstr ""

# 19d07ade911b41aab60762bcf2197802
#: ../../misc/design-philosophies.txt:236
msgid ""
"The template system shouldn't be designed so that templates necessarily are "
"displayed nicely in WYSIWYG editors such as Dreamweaver. That is too severe "
"of a limitation and wouldn't allow the syntax to be as nice as it is. Django "
"expects template authors are comfortable editing HTML directly."
msgstr ""

# f3b3e767fc0e4b3a9316524e96137917
#: ../../misc/design-philosophies.txt:242
msgid "Treat whitespace obviously"
msgstr ""

# 415e3aba303949869fd9f9ec04d603cb
#: ../../misc/design-philosophies.txt:244
msgid ""
"The template system shouldn't do magic things with whitespace. If a template "
"includes whitespace, the system should treat the whitespace as it treats "
"text -- just display it. Any whitespace that's not in a template tag should "
"be displayed."
msgstr ""

# 61b1355a1f2d468181ffcea2a6d81d4f
#: ../../misc/design-philosophies.txt:250
msgid "Don't invent a programming language"
msgstr ""

# 2e4ab8e1a5864831bb5d18d29d85443a
#: ../../misc/design-philosophies.txt:252
msgid "The template system intentionally doesn't allow the following:"
msgstr ""

# 5e527d75bc384d418622968b0f637215
#: ../../misc/design-philosophies.txt:254
msgid "Assignment to variables"
msgstr ""

# de5c4d303bcb43efbd55f72d68c49a73
#: ../../misc/design-philosophies.txt:255
msgid "Advanced logic"
msgstr ""

# a1857f322dcc4cb7886b51f0cc55695d
#: ../../misc/design-philosophies.txt:257
msgid ""
"The goal is not to invent a programming language. The goal is to offer just "
"enough programming-esque functionality, such as branching and looping, that "
"is essential for making presentation-related decisions."
msgstr ""

# 47a2eb8e39f4464da66cb31927cc3cc6
#: ../../misc/design-philosophies.txt:261
msgid ""
"The Django template system recognizes that templates are most often written "
"by *designers*, not *programmers*, and therefore should not assume Python "
"knowledge."
msgstr ""

# 6a624d9b0eaa41c7993de6f272741a47
#: ../../misc/design-philosophies.txt:266
msgid "Safety and security"
msgstr ""

# 502a7b18f3484114bb5d402ade8f518d
#: ../../misc/design-philosophies.txt:268
msgid ""
"The template system, out of the box, should forbid the inclusion of "
"malicious code -- such as commands that delete database records."
msgstr ""

# 4a47441315af4a0a978d38fe38e69710
#: ../../misc/design-philosophies.txt:271
msgid ""
"This is another reason the template system doesn't allow arbitrary Python "
"code."
msgstr ""

# b53c8b356e3e4c93ab0beeba37958f5a
#: ../../misc/design-philosophies.txt:274
msgid "Extensibility"
msgstr ""

# 67f5fca80478462eb8cc8ebf2af4d7e3
#: ../../misc/design-philosophies.txt:276
msgid ""
"The template system should recognize that advanced template authors may want "
"to extend its technology."
msgstr ""

# 07be02ddcfef4ce8abf1381568c6854f
#: ../../misc/design-philosophies.txt:279
msgid "This is the philosophy behind custom template tags and filters."
msgstr ""

# ec62792ae291497fb00429c52d8851b3
#: ../../misc/design-philosophies.txt:282
msgid "Views"
msgstr ""

# 17f80a631c364cf2a9dfec6b6754837b
#: ../../misc/design-philosophies.txt:285
msgid "Simplicity"
msgstr ""

# d73192bfbc614aa4a28b88faa9a6caa3
#: ../../misc/design-philosophies.txt:287
msgid ""
"Writing a view should be as simple as writing a Python function. Developers "
"shouldn't have to instantiate a class when a function will do."
msgstr ""

# 25cb78a51cc5456ba55f44a69faf3696
#: ../../misc/design-philosophies.txt:291
msgid "Use request objects"
msgstr ""

# 4d5d3e6bfd944052b1324d527dc33bf1
#: ../../misc/design-philosophies.txt:293
msgid ""
"Views should have access to a request object -- an object that stores "
"metadata about the current request. The object should be passed directly to "
"a view function, rather than the view function having to access the request "
"data from a global variable. This makes it light, clean and easy to test "
"views by passing in \"fake\" request objects."
msgstr ""

# 76b818bcdd284f06ae18bec7f7581679
#: ../../misc/design-philosophies.txt:302
msgid ""
"A view shouldn't care about which template system the developer uses -- or "
"even whether a template system is used at all."
msgstr ""

# b5cc3c0f5dc84335b45f3d8caffa919f
#: ../../misc/design-philosophies.txt:306
msgid "Differentiate between GET and POST"
msgstr ""

# 54f9cf6fd63641a3be301898123987c6
#: ../../misc/design-philosophies.txt:308
msgid ""
"GET and POST are distinct; developers should explicitly use one or the "
"other. The framework should make it easy to distinguish between GET and POST "
"data."
msgstr ""

# 4d4f0578af55489aaa14e3a214520cfb
#: ../../misc/design-philosophies.txt:17
msgid "coupling"
msgstr ""

# 4d4f0578af55489aaa14e3a214520cfb
#: ../../misc/design-philosophies.txt:17
msgid "loose"
msgstr ""

# 9153c08b438c4158b5192f746dec9ef5
#: ../../misc/design-philosophies.txt:55
msgid "DRY"
msgstr ""

# 9153c08b438c4158b5192f746dec9ef5
#: ../../misc/design-philosophies.txt:55
msgid "Don't repeat yourself"
msgstr ""

# a12220345aa44e5c829295960648a220
#: ../../misc/design-philosophies.txt:185
msgid "urls"
msgstr ""

# a12220345aa44e5c829295960648a220
#: ../../misc/design-philosophies.txt:185
msgid "definitive"
msgstr ""

# 3064abd65f00486da88ea7e26e6ebe1e
#: ../../misc/design-philosophies.txt:227
msgid "xml"
msgstr ""

# 3064abd65f00486da88ea7e26e6ebe1e
#: ../../misc/design-philosophies.txt:227
msgid "suckiness of"
msgstr ""

# c55cb26d39cc4471a788deff055dcad2
#: ../../misc/distributions.txt:3
msgid "Third-party distributions of Django"
msgstr ""

# 85f3d8cf98384540a7baddfd5d26ef91
#: ../../misc/distributions.txt:5
msgid ""
"Many third-party distributors are now providing versions of Django "
"integrated with their package-management systems. These can make "
"installation and upgrading much easier for users of Django since the "
"integration includes the ability to automatically install dependencies (like "
"database adapters) that Django requires."
msgstr ""

# bb79c19e98fe4abf95ab29056d12bde6
#: ../../misc/distributions.txt:11
msgid ""
"Typically, these packages are based on the latest stable release of Django, "
"so if you want to use the development version of Django you'll need to "
"follow the instructions for :ref:`installing the development version "
"<installing-development-version>` from our Git repository."
msgstr ""

# 17634a9bc32d4819b31fc8e1c3a8091a
#: ../../misc/distributions.txt:16
msgid ""
"If you're using Linux or a Unix installation, such as OpenSolaris, check "
"with your distributor to see if they already package Django. If you're using "
"a Linux distro and don't know how to find out if a package is available, "
"then now is a good time to learn.  The Django Wiki contains a list of `Third "
"Party Distributions`_ to help you out."
msgstr ""

# 34f2c31c771c463ead644658b46faa2d
#: ../../misc/distributions.txt:26
msgid "For distributors"
msgstr ""

# 26bd1ff2672849b8a010e0d41483b4b7
#: ../../misc/distributions.txt:28
msgid ""
"If you'd like to package Django for distribution, we'd be happy to help out! "
"Please join the `django-developers mailing list`_ and introduce yourself."
msgstr ""

# d1dcad3cdf0a4df294f16c70cf249551
#: ../../misc/distributions.txt:31
msgid ""
"We also encourage all distributors to subscribe to the `django-announce "
"mailing list`_, which is a (very) low-traffic list for announcing new "
"releases of Django and important bugfixes."
msgstr ""

# 6b2fa5adef7e419abea1e1d11c20b35e
#: ../../misc/index.txt:2
msgid "Meta-documentation and miscellany"
msgstr ""

# 82a07f5ab7db42d5a475629c2115e3b2
#: ../../misc/index.txt:4
msgid ""
"Documentation that we can't find a more organized place for. Like that "
"drawer in your kitchen with the scissors, batteries, duct tape, and other "
"junk."
msgstr ""
