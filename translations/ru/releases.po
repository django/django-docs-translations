# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-04 09:46+0200\n"
"PO-Revision-Date: 2014-02-18 21:14+0600\n"
"Last-Translator: Vitaliy Dorokhin <seryimysh@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.6.4\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"Language: ru_RU\n"

# a9a830527e764afdaa6aa955ebf801f3
#: ../../releases/0.95.txt:3
msgid "Django version 0.95 release notes"
msgstr ""

# 73c8b6b2cb784424b7c4c3434296b7c9
#: ../../releases/0.95.txt:5
msgid "Welcome to the Django 0.95 release."
msgstr ""

# 0a6d42b10ea546808796b073447b32b4
#: ../../releases/0.95.txt:7
msgid ""
"This represents a significant advance in Django development since the 0.91 "
"release in January 2006. The details of every change in this release would "
"be too extensive to list in full, but a summary is presented below."
msgstr ""

# 785f174552b047ffb0fdf6d05f3b2955
#: ../../releases/0.95.txt:12
msgid "Suitability and API stability"
msgstr ""

# aa419d2a97974c27b69f8f3a71e02e4e
#: ../../releases/0.95.txt:14
msgid ""
"This release is intended to provide a stable reference point for developers "
"wanting to work on production-level applications that use Django."
msgstr ""

# c83e7a5547324854a98ca4cf46430d6e
#: ../../releases/0.95.txt:17
msgid ""
"However, it's not the 1.0 release, and we'll be introducing further changes "
"before 1.0. For a clear look at which areas of the framework will change "
"(and which ones will *not* change) before 1.0, see the api-stability.txt "
"file, which lives in the docs/ directory of the distribution."
msgstr ""

# 8e77463cdfa2439d8eee313088b93eb5
#: ../../releases/0.95.txt:22
msgid ""
"You may have a need to use some of the features that are marked as \"subject "
"to API change\" in that document, but that's OK with us as long as it's OK "
"with you, and as long as you understand APIs may change in the future."
msgstr ""

# 0a65010b85424ed4b583b1d705a2ae29
#: ../../releases/0.95.txt:26
msgid ""
"Fortunately, most of Django's core APIs won't be changing before version "
"1.0. There likely won't be as big of a change between 0.95 and 1.0 versions "
"as there was between 0.91 and 0.95."
msgstr ""

# c36a6868af13482991fcc504097468cc
#: ../../releases/0.95.txt:31
msgid "Changes and new features"
msgstr ""

# 79a68a5583ac4006990b1cf12d8f75de
#: ../../releases/0.95.txt:33
msgid ""
"The major changes in this release (for developers currently using the 0.91 "
"release) are a result of merging the 'magic-removal' branch of development. "
"This branch removed a number of constraints in the way Django code had to be "
"written that were a consequence of decisions made in the early days of "
"Django, prior to its open-source release. It's now possible to write more "
"natural, Pythonic code that works as expected, and there's less \"black magic"
"\" happening behind the scenes."
msgstr ""

# e611518b93914317aa59e2bb01e0c093
#: ../../releases/0.95.txt:41
msgid ""
"Aside from that, another main theme of this release is a dramatic increase "
"in usability. We've made countless improvements in error messages, "
"documentation, etc., to improve developers' quality of life."
msgstr ""

# 4e625b0cbeea45a088d97caa959ce603
#: ../../releases/0.95.txt:45
msgid "The new features and changes introduced in 0.95 include:"
msgstr ""

# 177858702de44744bbc636d13ebe8bb8
#: ../../releases/0.95.txt:47
msgid ""
"Django now uses a more consistent and natural filtering interface for "
"retrieving objects from the database."
msgstr ""

# 056b6393b2b8414c90073210c24ba1b4
#: ../../releases/0.95.txt:50
msgid ""
"User-defined models, functions and constants now appear in the module "
"namespace they were defined in. (Previously everything was magically "
"transferred to the django.models.* namespace.)"
msgstr ""

# 92fd3b61054e4ea1ab57907c45bfd323
#: ../../releases/0.95.txt:54
msgid ""
"Some optional applications, such as the FlatPage, Sites and Redirects apps, "
"have been decoupled and moved into django.contrib. If you don't want to use "
"these applications, you no longer have to install their database tables."
msgstr ""

# 57ad5e365bde4b6693263e7a4e60c387
#: ../../releases/0.95.txt:59
msgid "Django now has support for managing database transactions."
msgstr ""

# 22cee149097e43e197b5be1efd9ac3b1
#: ../../releases/0.95.txt:61
msgid ""
"We've added the ability to write custom authentication and authorization "
"backends for authenticating users against alternate systems, such as LDAP."
msgstr ""

# fc3c46d4b81e452885fb2bde087624bb
#: ../../releases/0.95.txt:65
msgid ""
"We've made it easier to add custom table-level functions to models, through "
"a new \"Manager\" API."
msgstr ""

# ee506e7b35c14d63905d4861da4da34d
#: ../../releases/0.95.txt:68
msgid ""
"It's now possible to use Django without a database. This simply means that "
"the framework no longer requires you to have a working database set up just "
"to serve dynamic pages. In other words, you can just use URLconfs/views on "
"their own. Previously, the framework required that a database be configured, "
"regardless of whether you actually used it."
msgstr ""

# cb2513c292cf418eb56b4ef3065f186d
#: ../../releases/0.95.txt:74
msgid ""
"It's now more explicit and natural to override save() and delete() methods "
"on models, rather than needing to hook into the pre_save() and post_save() "
"method hooks."
msgstr ""

# d31d3b9b3168491f84367edc54e42378
#: ../../releases/0.95.txt:78
msgid ""
"Individual pieces of the framework now can be configured without requiring "
"the setting of an environment variable. This permits use of, for example, "
"the Django templating system inside other applications."
msgstr ""

# 9125a5929b8b455f8cab8707554a3621
#: ../../releases/0.95.txt:82
msgid ""
"More and more parts of the framework have been internationalized, as we've "
"expanded internationalization (i18n) support. The Django codebase, including "
"code and templates, has now been translated, at least in part, into 31 "
"languages. From Arabic to Chinese to Hungarian to Welsh, it is now possible "
"to use Django's admin site in your native language."
msgstr ""

# 17f28d4cf7a74313a663f5b99f1500d7
#: ../../releases/0.95.txt:88
msgid ""
"The number of changes required to port from 0.91-compatible code to the 0.95 "
"code base are significant in some cases. However, they are, for the most "
"part, reasonably routine and only need to be done once. A list of the "
"necessary changes is described in the `Removing The Magic`_ wiki page. There "
"is also an easy checklist_ for reference when undertaking the porting "
"operation."
msgstr ""

# 4dd1c4e2ea014d63bfd7a6dfc2677c98
#: ../../releases/0.95.txt:98
msgid "Problem reports and getting help"
msgstr ""

# 809a327ab35b497e902288a4baaf4c22
#: ../../releases/0.95.txt:100
msgid ""
"Need help resolving a problem with Django? The documentation in the "
"distribution is also available :doc:`online </index>` at the `Django Web "
"site`_. The :doc:`FAQ </faq/index>` document is especially recommended, as "
"it contains a number of issues that come up time and again."
msgstr ""

# f82d44c0911e4357b8a6503ce4b53cf0
#: ../../releases/0.95.txt:105
msgid ""
"For more personalized help, the `django-users`_ mailing list is a very "
"active list, with more than 2,000 subscribers who can help you solve any "
"sort of Django problem. We recommend you search the archives first, though, "
"because many common questions appear with some regularity, and any "
"particular problem may already have been answered."
msgstr ""

# 1611b1d74bed4c9fb360b92c2878090c
#: ../../releases/0.95.txt:111
msgid ""
"Finally, for those who prefer the more immediate feedback offered by IRC, "
"there's a #django channel on irc.freenode.net that is regularly populated by "
"Django users and developers from around the world. Friendly people are "
"usually available at any hour of the day -- to help, or just to chat."
msgstr ""

# d5159485c38542a8aafc15bdc508976f
#: ../../releases/0.95.txt:119
msgid "Thanks for using Django!"
msgstr ""

# b67f0a8b11d84aafb1b4777fd09c684c
#: ../../releases/0.95.txt:121
msgid "The Django Team July 2006"
msgstr ""

# 5b338d54a077400588dedba49108bb9e
#: ../../releases/0.96.txt:3
msgid "Django version 0.96 release notes"
msgstr ""

# 1a5d0e9c38f6419794db0d85b6889b04
#: ../../releases/0.96.txt:5
msgid "Welcome to Django 0.96!"
msgstr ""

# e8f7d4424ea14e06a926a6b3eb27150d
#: ../../releases/0.96.txt:7
msgid ""
"The primary goal for 0.96 is a cleanup and stabilization of the features "
"introduced in 0.95. There have been a few small `backwards-incompatible "
"changes`_ since 0.95, but the upgrade process should be fairly simple and "
"should not require major changes to existing applications."
msgstr ""

# 2717bd73f2344b3a8c17b5208e10592f
#: ../../releases/0.96.txt:12
msgid ""
"However, we're also releasing 0.96 now because we have a set of backwards-"
"incompatible changes scheduled for the near future. Once completed, they "
"will involve some code changes for application developers, so we recommend "
"that you stick with Django 0.96 until the next official release; then you'll "
"be able to upgrade in one step instead of needing to make incremental "
"changes to keep up with the development version of Django."
msgstr ""

# f3f8df5e129c44b39b2ad88a2c221845
# 838d876fd2664156a41a7dc4d42d86af
#: ../../releases/0.96.txt:21 ../../releases/1.0.txt:33
msgid "Backwards-incompatible changes"
msgstr ""

# 32b55b1711fb4c19a55445fe042ee9e1
#: ../../releases/0.96.txt:23
msgid ""
"The following changes may require you to update your code when you switch "
"from 0.95 to 0.96:"
msgstr ""

# 39acd865aa8d4584a61b2f80e2433bc6
#: ../../releases/0.96.txt:27
msgid "``MySQLdb`` version requirement"
msgstr ""

# 5771a045f67f4e79bd39125bbea6d096
#: ../../releases/0.96.txt:29
msgid ""
"Due to a bug in older versions of the ``MySQLdb`` Python module (which "
"Django uses to connect to MySQL databases), Django's MySQL backend now "
"requires version 1.2.1p2 or higher of ``MySQLdb``, and will raise exceptions "
"if you attempt to use an older version."
msgstr ""

# 9d07c20aea474a5b8fbc2fec281239c8
#: ../../releases/0.96.txt:34
msgid ""
"If you're currently unable to upgrade your copy of ``MySQLdb`` to meet this "
"requirement, a separate, backwards-compatible backend, called \"mysql_old\", "
"has been added to Django. To use this backend, change the "
"``DATABASE_ENGINE`` setting in your Django settings file from this::"
msgstr ""

# 02b5e069ec0e42d6966083fd8bb29fcd
# e755a4dcb8a946a883e5147220a6eb02
#: ../../releases/0.96.txt:41 ../../releases/1.2.txt:596
msgid "to this::"
msgstr ""

# 7b1ee7c680a64704b16f8a94f087160b
#: ../../releases/0.96.txt:45
msgid ""
"However, we strongly encourage MySQL users to upgrade to a more recent "
"version of ``MySQLdb`` as soon as possible, The \"mysql_old\" backend is "
"provided only to ease this transition, and is considered deprecated; aside "
"from any necessary security fixes, it will not be actively maintained, and "
"it will be removed in a future release of Django."
msgstr ""

# e1aea991c0134ae695f43dda6bea1dfe
#: ../../releases/0.96.txt:51
msgid ""
"Also, note that some features, like the new ``DATABASE_OPTIONS`` setting "
"(see the :doc:`databases documentation </ref/databases>` for details), are "
"only available on the \"mysql\" backend, and will not be made available for "
"\"mysql_old\"."
msgstr ""

# 00cc6f093f794d67af0e0743c894e97a
#: ../../releases/0.96.txt:57
msgid "Database constraint names changed"
msgstr ""

# 72fb0de2834e41d49a7e7753ddb15725
#: ../../releases/0.96.txt:59
msgid ""
"The format of the constraint names Django generates for foreign key "
"references have changed slightly. These names are generally only used when "
"it is not possible to put the reference directly on the affected column, so "
"they are not always visible."
msgstr ""

# e1534a1196d54f9585b46062d0b3033e
#: ../../releases/0.96.txt:64
msgid ""
"The effect of this change is that running ``manage.py reset`` and similar "
"commands against an existing database may generate SQL with the new form of "
"constraint name, while the database itself contains constraints named in the "
"old form; this will cause the database server to raise an error message "
"about modifying non-existent constraints."
msgstr ""

# 23b3db5a846743caaa3d9b61f72e466b
#: ../../releases/0.96.txt:70
msgid "If you need to work around this, there are two methods available:"
msgstr ""

# 8120fab54f3f4a65b7e09b6d3c2b2a14
#: ../../releases/0.96.txt:72
msgid ""
"Redirect the output of ``manage.py`` to a file, and edit the generated SQL "
"to use the correct constraint names before executing it."
msgstr ""

# c20fc2c3ad224bba8363e3c1300be010
#: ../../releases/0.96.txt:76
msgid ""
"Examine the output of ``manage.py sqlall`` to see the new-style constraint "
"names, and use that as a guide to rename existing constraints in your "
"database."
msgstr ""

# a46813018b4c409ea3c1798f172d0c03
#: ../../releases/0.96.txt:81
msgid "Name changes in ``manage.py``"
msgstr ""

# a6f07f61734a4952a228aba10c25a0e7
#: ../../releases/0.96.txt:83
msgid ""
"A few of the options to ``manage.py`` have changed with the addition of "
"fixture support:"
msgstr ""

# 2369505f0f924f36964fc3e2ee9b70a3
#: ../../releases/0.96.txt:86
msgid ""
"There are new ``dumpdata`` and ``loaddata`` commands which, as you might "
"expect, will dump and load data to/from the database. These commands can "
"operate against any of Django's supported serialization formats."
msgstr ""

# 63e1192c93c14e79a2c4060335df64e3
#: ../../releases/0.96.txt:91
msgid ""
"The ``sqlinitialdata`` command has been renamed to ``sqlcustom`` to "
"emphasize that ``loaddata`` should be used for data (and ``sqlcustom`` for "
"other custom SQL -- views, stored procedures, etc.)."
msgstr ""

# 0cc7bc4a2b434d4e9b9d050cc2e9bdb3
#: ../../releases/0.96.txt:95
msgid "The vestigial ``install`` command has been removed. Use ``syncdb``."
msgstr ""

# 3f9f635b834b4a21b3798746d6480760
#: ../../releases/0.96.txt:98
msgid "Backslash escaping changed"
msgstr ""

# a8d514f172554c29a321ef65aa911145
#: ../../releases/0.96.txt:100
msgid ""
"The Django database API now escapes backslashes given as query parameters. "
"If you have any database API code that matches backslashes, and it was "
"working before (despite the lack of escaping), you'll have to change your "
"code to \"unescape\" the slashes one level."
msgstr ""

# 5740262397f545979afd7ed2124b90a3
#: ../../releases/0.96.txt:105
msgid "For example, this used to work::"
msgstr ""

# 0e79c05adf4142e0923adb616375f891
#: ../../releases/0.96.txt:110
msgid "The above is now incorrect, and should be rewritten as::"
msgstr ""

# 9d7882f202dc4001aa741fcb33c5c2d4
#: ../../releases/0.96.txt:116
msgid "Removed ENABLE_PSYCO setting"
msgstr ""

# 89517d68a2974eaf98740759c9cc377e
#: ../../releases/0.96.txt:118
msgid ""
"The ``ENABLE_PSYCO`` setting no longer exists. If your settings file "
"includes ``ENABLE_PSYCO`` it will have no effect; to use Psyco_, we "
"recommend writing a middleware class to activate it."
msgstr ""

# 37cc942a1a5f417bad9d3100ab8e56ed
#: ../../releases/0.96.txt:125
msgid "What's new in 0.96?"
msgstr ""

# c971676dd9794ee0b94c7401ae0a6ca2
#: ../../releases/0.96.txt:127
msgid ""
"This revision represents over a thousand source commits and over four "
"hundred bug fixes, so we can't possibly catalog all the changes. Here, we "
"describe the most notable changes in this release."
msgstr ""

# 4fd6d8ab92fa4c7e91efd5322cf655c7
#: ../../releases/0.96.txt:132
msgid "New forms library"
msgstr ""

# 50af9a95f2c6468fa7a583a298befbc9
#: ../../releases/0.96.txt:134
msgid ""
"``django.newforms`` is Django's new form-handling library. It's a "
"replacement for ``django.forms``, the old form/manipulator/validation "
"framework.  Both APIs are available in 0.96, but over the next two releases "
"we plan to switch completely to the new forms system, and deprecate and "
"remove the old system."
msgstr ""

# 54cfcc36e61d4438919e45ed78f9de16
#: ../../releases/0.96.txt:140
msgid "There are three elements to this transition:"
msgstr ""

# 82fd27b5b68c4533b61206209fa80415
#: ../../releases/0.96.txt:142
msgid ""
"We've copied the current ``django.forms`` to ``django.oldforms``. This "
"allows you to upgrade your code *now* rather than waiting for the backwards-"
"incompatible change and rushing to fix your code after the fact.  Just "
"change your import statements like this::"
msgstr ""

# b8271b97d9db472599cd07becffadf0d
#: ../../releases/0.96.txt:151
msgid ""
"The next official release of Django will move the current ``django."
"newforms`` to ``django.forms``. This will be a backwards-incompatible "
"change, and anyone still using the old version of ``django.forms`` at that "
"time will need to change their import statements as described above."
msgstr ""

# ba367c659a9240baa3f31e28a6432240
#: ../../releases/0.96.txt:157
msgid "The next release after that will completely remove ``django.oldforms``."
msgstr ""

# e681f1201a6b429da1d81c779f50ac77
#: ../../releases/0.96.txt:160
msgid ""
"Although the ``newforms`` library will continue to evolve, it's ready for "
"use for most common cases. We recommend that anyone new to form handling "
"skip the old forms system and start with the new."
msgstr ""

# 7a93f2917f7c4da9930fd9f1ed8ebee6
#: ../../releases/0.96.txt:164
msgid ""
"For more information about ``django.newforms``, read the :doc:`newforms "
"documentation </topics/forms/index>`."
msgstr ""

# d6a236ae19c44e9789f0b280d797c11b
#: ../../releases/0.96.txt:168
msgid "URLconf improvements"
msgstr ""

# 822f17c34659404db5a0fbb6cefeef8e
#: ../../releases/0.96.txt:170
msgid ""
"You can now use any callable as the callback in URLconfs (previously, only "
"strings that referred to callables were allowed). This allows a much more "
"natural use of URLconfs. For example, this URLconf::"
msgstr ""

# aeb7594484f7430aa87f8e03d63ebd14
#: ../../releases/0.96.txt:180
msgid "can now be rewritten as::"
msgstr ""

# 90053027f45e4f37a48a953c1eee74de
#: ../../releases/0.96.txt:189
msgid ""
"One useful application of this can be seen when using decorators; this "
"change allows you to apply decorators to views *in your URLconf*. Thus, you "
"can make a generic view require login very easily::"
msgstr ""

# ed8a71ff3e914011bb2639bf60b2391f
#: ../../releases/0.96.txt:207
msgid ""
"Note that both syntaxes (strings and callables) are valid, and will continue "
"to be valid for the foreseeable future."
msgstr ""

# b5eb06d31bd84f95877f0bb06e520645
#: ../../releases/0.96.txt:211
msgid "The test framework"
msgstr ""

# ae3917e808c8451b87073e651e81b436
#: ../../releases/0.96.txt:213
msgid ""
"Django now includes a test framework so you can start transmuting fear into "
"boredom (with apologies to Kent Beck). You can write tests based on :mod:"
"`doctest` or :mod:`unittest` and test your views with a simple test client."
msgstr ""

# a5fe99aff1e54f779ef52e9010c83f9a
#: ../../releases/0.96.txt:217
msgid ""
"There is also new support for \"fixtures\" -- initial data, stored in any of "
"the supported :doc:`serialization formats </topics/serialization>`, that "
"will be loaded into your database at the start of your tests. This makes "
"testing with real data much easier."
msgstr ""

# aa5a092b533544fe971027caf72c2584
#: ../../releases/0.96.txt:222
msgid ""
"See :doc:`the testing documentation </topics/testing/index>` for the full "
"details."
msgstr ""

# 254438cf450d4f1a91ab91d85ac3e828
#: ../../releases/0.96.txt:225
msgid "Improvements to the admin interface"
msgstr ""

# d941652e0b10436b8d17e441cb2b93a5
#: ../../releases/0.96.txt:227
msgid ""
"A small change, but a very nice one: dedicated views for adding and updating "
"users have been added to the admin interface, so you no longer need to worry "
"about working with hashed passwords in the admin."
msgstr ""

# 2e6269c2d56e4a1aab64bf9ef9bca93e
#: ../../releases/0.96.txt:232
msgid "Thanks"
msgstr ""

# cd17b6056aca413191413057c2c8b1ed
#: ../../releases/0.96.txt:234
msgid ""
"Since 0.95, a number of people have stepped forward and taken a major new "
"role in Django's development. We'd like to thank these people for all their "
"hard work:"
msgstr ""

# 3e0703799498475e932fac13ff42d581
#: ../../releases/0.96.txt:238
msgid ""
"Russell Keith-Magee and Malcolm Tredinnick for their major code "
"contributions. This release wouldn't have been possible without them."
msgstr ""

# 34d3f96d93db4cbe92fa9f8ed9c5a008
#: ../../releases/0.96.txt:241
msgid ""
"Our new release manager, James Bennett, for his work in getting out 0.95.1, "
"0.96, and (hopefully) future release."
msgstr ""

# 1ab3a7bcc5364debbca118099ec0fffc
#: ../../releases/0.96.txt:244
msgid ""
"Our ticket managers Chris Beaven (aka SmileyChris), Simon Greenhill, Michael "
"Radziej, and Gary Wilson. They agreed to take on the monumental task of "
"wrangling our tickets into nicely cataloged submission. Figuring out what to "
"work on is now about a million times easier; thanks again, guys."
msgstr ""

# 9f32f452e69649f58c9b3c2c4c28e52d
#: ../../releases/0.96.txt:250
msgid ""
"Everyone who submitted a bug report, patch or ticket comment. We can't "
"possibly thank everyone by name -- over 200 developers submitted patches "
"that went into 0.96 -- but everyone who's contributed to Django is listed in "
"AUTHORS_."
msgstr ""

# 09967d7febb84cfa9b16c39a6ec1fcf9
#: ../../releases/1.0.txt:3
msgid "Django 1.0 release notes"
msgstr ""

# af62d9adc1a846c6a61119593620e5a4
#: ../../releases/1.0.txt:5
msgid "Welcome to Django 1.0!"
msgstr ""

# abe9a76b37454ace93f843bbd1e65ff1
#: ../../releases/1.0.txt:7
msgid ""
"We've been looking forward to this moment for over three years, and it's "
"finally here. Django 1.0 represents a the largest milestone in Django's "
"development to date: a Web framework that a group of perfectionists can "
"truly be proud of."
msgstr ""

# c77c2328197649519d2bb36cf2634c1b
#: ../../releases/1.0.txt:11
msgid ""
"Django 1.0 represents over three years of community development as an Open "
"Source project. Django's received contributions from hundreds of developers, "
"been translated into fifty languages, and today is used by developers on "
"every continent and in every kind of job."
msgstr ""

# 153341ad75044e619465f4be68214fe4
#: ../../releases/1.0.txt:16
msgid ""
"An interesting historical note: when Django was first released in July 2005, "
"the initial released version of Django came from an internal repository at "
"revision number 8825. Django 1.0 represents revision 8961 of our public "
"repository. It seems fitting that our 1.0 release comes at the moment where "
"community contributions overtake those made privately."
msgstr ""

# 475c807547b54858a0b3b39a00ce974e
#: ../../releases/1.0.txt:23
msgid "Stability and forwards-compatibility"
msgstr ""

# 6b8df8f0b36045028c49099834d9a009
#: ../../releases/1.0.txt:25
msgid ""
":doc:`The release of Django 1.0 </releases/1.0>` comes with a promise of API "
"stability and forwards-compatibility. In a nutshell, this means that code "
"you develop against Django 1.0 will continue to work against 1.1 unchanged, "
"and you should need to make only minor changes for any 1.X release."
msgstr ""

# 72fe0e028d094dab95797ebcdc365504
#: ../../releases/1.0.txt:30
msgid ""
"See the :doc:`API stability guide </misc/api-stability>` for full details."
msgstr ""

# 1eafbfb5b3b64ef28f18470cebf89914
#: ../../releases/1.0.txt:35
msgid ""
"Django 1.0 has a number of backwards-incompatible changes from Django 0.96. "
"If you have apps written against Django 0.96 that you need to port, see our "
"detailed porting guide:"
msgstr ""

# f515ef1d65ed4a4aa95ae8ffe8d8168a
#: ../../releases/1.0.txt:44
msgid ""
"A complete list of backwards-incompatible changes can be found at https://"
"code.djangoproject.com/wiki/BackwardsIncompatibleChanges."
msgstr ""

# 3dea379f194c414eacff964e806c1ada
#: ../../releases/1.0.txt:48
msgid "What's new in Django 1.0"
msgstr ""

# 657c1007bfee49b292f957066be86f1d
#: ../../releases/1.0.txt:50
msgid "A *lot*!"
msgstr ""

# e33a82113a84453e88742a76bff707d3
#: ../../releases/1.0.txt:52
msgid ""
"Since Django 0.96, we've made over 4,000 code commits, fixed more than 2,000 "
"bugs, and edited, added, or removed around 350,000 lines of code. We've also "
"added 40,000 lines of new documentation, and greatly improved what was "
"already there."
msgstr ""

# 1cac45e3965f4613abf4f4aa1a31db13
#: ../../releases/1.0.txt:57
msgid ""
"In fact, new documentation is one of our favorite features of Django 1.0, so "
"we might as well start there. First, there's a new documentation site:"
msgstr ""

# 4a9fee4af13242518b3a8ebf9a3690df
#: ../../releases/1.0.txt:60
msgid "https://docs.djangoproject.com/"
msgstr ""

# ee323f0a7b764773903b28b585483d5b
#: ../../releases/1.0.txt:62
msgid ""
"The documentation has been greatly improved, cleaned up, and generally made "
"awesome. There's now dedicated search, indexes, and more."
msgstr ""

# c758a4e3ba6545c7a25cdd3e824d536d
#: ../../releases/1.0.txt:65
msgid ""
"We can't possibly document everything that's new in 1.0, but the "
"documentation will be your definitive guide. Anywhere you see something like:"
msgstr ""

# 8a3ce46d9ea5445db824fc86da08f050
#: ../../releases/1.0.txt:71
msgid "You'll know that you're looking at something new or changed."
msgstr ""

# a086127b2a244a47b0f0458b07ba7604
#: ../../releases/1.0.txt:73
msgid "The other major highlights of Django 1.0 are:"
msgstr ""

# 397663de107c4783903808b2d7c8b9f5
#: ../../releases/1.0.txt:76
msgid "Re-factored admin application"
msgstr ""

# a01c02697ba74fb78df5fc5ebe69156a
# 87d434c06de74b678a762adf5ee38450
#: ../../releases/1.0.txt:78 ../../releases/1.0-alpha-1.txt:25
msgid ""
"The Django administrative interface (``django.contrib.admin``) has been "
"completely refactored; admin definitions are now completely decoupled from "
"model definitions (no more ``class Admin`` declaration in models!), "
"rewritten to use Django's new form-handling library (introduced in the 0.96 "
"release as ``django.newforms``, and now available as simply ``django."
"forms``) and redesigned with extensibility and customization in mind. Full "
"documentation for the admin application is available online in the official "
"Django documentation:"
msgstr ""

# ca055c4e1bca47f49ca7375e7a90ab7e
#: ../../releases/1.0.txt:86
msgid "See the :doc:`admin reference </ref/contrib/admin/index>` for details"
msgstr ""

# 9c02f5d550914bc181add40bd33a474f
# 4098d4e07c6c4b218f95e8718336caad
#: ../../releases/1.0.txt:89 ../../releases/1.0-alpha-1.txt:46
msgid "Improved Unicode handling"
msgstr ""

# c3f4cf091961446dbc4e0821791b5324
#: ../../releases/1.0.txt:91
msgid ""
"Django's internals have been refactored to use Unicode throughout; this "
"drastically simplifies the task of dealing with non-Western-European content "
"and data in Django. Additionally, utility functions have been provided to "
"ease interoperability with third-party libraries and systems which may or "
"may not handle Unicode gracefully. Details are available in Django's Unicode-"
"handling documentation."
msgstr ""

# d0de3529f8f341c09ef3ecbdf3cf1ac3
#: ../../releases/1.0.txt:98
msgid "See :doc:`/ref/unicode`."
msgstr ""

# a24e65e7e3074f7a8865890e04d1c220
#: ../../releases/1.0.txt:101
msgid "An improved ORM"
msgstr ""

# aa2f10d0745e4ffa8a0b332fd7c84fab
#: ../../releases/1.0.txt:103
msgid ""
"Django's object-relational mapper -- the component which provides the "
"mapping between Django model classes and your database, and which mediates "
"your database queries -- has been dramatically improved by a massive "
"refactoring. For most users of Django this is backwards-compatible; the "
"public-facing API for database querying underwent a few minor changes, but "
"most of the updates took place in the ORM's internals. A guide to the "
"changes, including backwards-incompatible modifications and mentions of new "
"features opened up by this refactoring, is `available on the Django wiki`__."
msgstr ""

# 35b47f7628774cc5a4d4d51dfbbca76d
# 7a8e970a4d5f4c3fbf6a64e77d3916a9
#: ../../releases/1.0.txt:115 ../../releases/1.0-alpha-1.txt:69
msgid "Automatic escaping of template variables"
msgstr ""

# 32a5dc23e01843ad9d0aa8ab236d0b09
# 10e360d681864385b207faac772cd290
#: ../../releases/1.0.txt:117 ../../releases/1.0-alpha-1.txt:63
msgid ""
"To provide improved security against cross-site scripting (XSS) "
"vulnerabilities, Django's template system now automatically escapes the "
"output of variables. This behavior is configurable, and allows both "
"variables and larger template constructs to be marked as safe (requiring no "
"escaping) or unsafe (requiring escaping). A full guide to this feature is in "
"the documentation for the :ttag:`autoescape` tag."
msgstr ""

# 922868f50ac7421997b08935e2d1001b
#: ../../releases/1.0.txt:125
msgid "``django.contrib.gis`` (GeoDjango)"
msgstr ""

# d77634703f924b9fa276116ac396cd7b
#: ../../releases/1.0.txt:127
msgid ""
"A project over a year in the making, this adds world-class GIS (`Geographic "
"Information Systems`_) support to Django, in the form of a ``contrib`` "
"application. Its documentation is currently being maintained externally, and "
"will be merged into the main Django documentation shortly. Huge thanks go to "
"Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their "
"efforts in creating and completing this feature."
msgstr ""

# a45368115f5b45aebed896d0b8707dba
#: ../../releases/1.0.txt:134
msgid "See http://geodjango.org/ for details."
msgstr ""

# dfab6cf214fb401997b04ae58aeb8935
# 9a9eabfe85424b1eaf6b347439026fc5
#: ../../releases/1.0.txt:139 ../../releases/1.0-alpha-2.txt:40
msgid "Pluggable file storage"
msgstr ""

# 6827c227f9ab43b9bf502e1da3c68878
# b9c2b28b97d34b22a561f4bb435c1d63
#: ../../releases/1.0.txt:141 ../../releases/1.0-alpha-2.txt:36
msgid ""
"Django's built-in ``FileField`` and ``ImageField`` now can take advantage of "
"pluggable file-storage backends, allowing extensive customization of where "
"and how uploaded files get stored by Django. For details, see :doc:`the "
"files documentation </topics/files>`; big thanks go to Marty Alchin for "
"putting in the hard work to get this completed."
msgstr ""

# 284c4dc0b12e4ca8b5a9c4a086762262
# d28b935a16b14a57a4ec9418dbffed67
#: ../../releases/1.0.txt:148 ../../releases/1.0-alpha-2.txt:48
msgid "Jython compatibility"
msgstr ""

# ce02190e3c5740d19fc953cf0873dcb4
# f07d315fa8f247449475ecda93beb6fa
#: ../../releases/1.0.txt:150 ../../releases/1.0-alpha-2.txt:43
msgid ""
"Thanks to a lot of work from Leo Soto during a Google Summer of Code "
"project, Django's codebase has been refactored to remove incompatibilities "
"with `Jython`_, an implementation of Python written in Java, which runs "
"Python code on the Java Virtual Machine. Django is now compatible with the "
"forthcoming Jython 2.5 release."
msgstr ""

# adffe1c94bf7425aa22146f2ceaae9a3
#: ../../releases/1.0.txt:156
msgid "See :doc:`/howto/jython`."
msgstr ""

# d29f6425610d47068f41f285d5b0d2af
# 86ab8cf523d148c49ef930683d8097a7
#: ../../releases/1.0.txt:161 ../../releases/1.0-beta.txt:32
msgid "Generic relations in forms and admin"
msgstr ""

# 9b616acecff34344a030a1296d5d7641
# ea94443b56f74497929e9ad46028fc3f
#: ../../releases/1.0.txt:163 ../../releases/1.0-beta.txt:29
msgid ""
"Classes are now included in ``django.contrib.contenttypes`` which can be "
"used to support generic relations in both the admin interface and in end-"
"user forms. See :ref:`the documentation for generic relations <generic-"
"relations>` for details."
msgstr ""

# 8af5b9599cec47c1ac64461dbcc24c6e
# 0f8a5268bc744e268b0da2169154568b
#: ../../releases/1.0.txt:168 ../../releases/1.0-beta.txt:49
msgid "``INSERT``/``UPDATE`` distinction"
msgstr ""

# 627a6c1f2d3b4c289c5352ba42800b7c
#: ../../releases/1.0.txt:170
msgid ""
"Although Django's default behavior of having a model's ``save()`` method "
"automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at "
"the SQL level is suitable for the majority of cases, there are occasional "
"situations where forcing one or the other is useful. As a result, models can "
"now support an additional parameter to ``save()`` which can force a specific "
"operation."
msgstr ""

# b07d9724ab2a45be86de6c034227df34
#: ../../releases/1.0.txt:176
msgid "See :ref:`ref-models-force-insert` for details."
msgstr ""

# 86e6290488f444b0bdc159ab06ad37aa
# 66121261f0784bf89eb7cad747751a17
#: ../../releases/1.0.txt:179 ../../releases/1.0-beta.txt:60
msgid "Split ``CacheMiddleware``"
msgstr ""

# d795db8b0f634d10bf5441ed47be6e86
#: ../../releases/1.0.txt:181
msgid ""
"Django's ``CacheMiddleware`` has been split into three classes: "
"``CacheMiddleware`` itself still exists and retains all of its previous "
"functionality, but it is now built from two separate middleware classes "
"which handle the two parts of caching (inserting into and reading from the "
"cache) separately, offering additional flexibility for situations where "
"combining these functions into a single middleware posed problems."
msgstr ""

# 5e8e17b77fb94b86955206a191c25415
#: ../../releases/1.0.txt:188
msgid ""
"Full details, including updated notes on appropriate use, are in :doc:`the "
"caching documentation </topics/cache>`."
msgstr ""

# 028431492b8c47abb85ce25b0414cdc6
# 53dd755161ca498a9f45145c95585b20
#: ../../releases/1.0.txt:192 ../../releases/1.0-beta-2.txt:37
msgid "Refactored ``django.contrib.comments``"
msgstr ""

# d814f5f6014246918b6721faf788b0bf
#: ../../releases/1.0.txt:194
msgid ""
"As part of a Google Summer of Code project, Thejaswi Puthraya carried out a "
"major rewrite and refactoring of Django's bundled comment system, greatly "
"increasing its flexibility and customizability. :doc:`Full documentation </"
"ref/contrib/comments/index>` is available, as well as an upgrade guide if "
"you were using the previous incarnation of the comments application."
msgstr ""

# 7fe40bb10bec4ab2bf449e5190a87c0d
# 8ff757c49d0a40efb2eee19d395f4746
#: ../../releases/1.0.txt:202 ../../releases/1.0-beta.txt:73
msgid "Removal of deprecated features"
msgstr ""

# 5a4dcb6dafb044a1985a47da4cfe38ca
#: ../../releases/1.0.txt:204
msgid ""
"A number of features and methods which had previously been marked as "
"deprecated, and which were scheduled for removal prior to the 1.0 release, "
"are no longer present in Django. These include imports of the form library "
"from ``django.newforms`` (now located simply at ``django.forms``), the "
"``form_for_model`` and ``form_for_instance`` helper functions (which have "
"been replaced by ``ModelForm``) and a number of deprecated features which "
"were replaced by the dispatcher, file-uploading and file-storage "
"refactorings introduced in the Django 1.0 alpha releases."
msgstr ""

# 4276758cdad34030b932acdc8c1baa50
#: ../../releases/1.0.txt:214
msgid "Known issues"
msgstr ""

# fd61d345e7684828a4ae67e8fc317487
#: ../../releases/1.0.txt:216
msgid ""
"We've done our best to make Django 1.0 as solid as possible, but "
"unfortunately there are a couple of issues that we know about in the release."
msgstr ""

# 9132e5ea7c6647b188038476564dc029
#: ../../releases/1.0.txt:220
msgid "Multi-table model inheritance with ``to_field``"
msgstr ""

# c4ab3a43187d450ba4600e5eb033a71c
#: ../../releases/1.0.txt:222
msgid ""
"If you're using :ref:`multiple table model inheritance <multi-table-"
"inheritance>`, be aware of this caveat: child models using a custom "
"``parent_link`` and ``to_field`` will cause database integrity errors. A set "
"of models like the following are **not valid**::"
msgstr ""

# da339ee042b840ec80aaa180c22d3257
#: ../../releases/1.0.txt:235
msgid "This bug will be fixed in the next release of Django."
msgstr ""

# 8592163693cc4ea9aabde4a167590e1b
#: ../../releases/1.0.txt:238
msgid "Caveats with support of certain databases"
msgstr ""

# 228315339b544aac90056bb45fe93374
#: ../../releases/1.0.txt:240
msgid ""
"Django attempts to support as many features as possible on all database "
"backends. However, not all database backends are alike, and in particular "
"many of the supported database differ greatly from version to version. It's "
"a good idea to checkout our :doc:`notes on supported database </ref/"
"databases>`:"
msgstr ""

# 38443443db944696996f4e3e028e562a
#: ../../releases/1.0.txt:243
msgid ":ref:`mysql-notes`"
msgstr ""

# 7ddedffbfbc14b259262f65ade7b9462
#: ../../releases/1.0.txt:244
msgid ":ref:`sqlite-notes`"
msgstr ""

# 7d76a5209df14cec9d92b155712d9f0e
#: ../../releases/1.0.txt:245
msgid ":ref:`oracle-notes`"
msgstr ""

# 3bba4f3fbfee4a6f80c3311258b0bb4f
#: ../../releases/1.0-alpha-1.txt:3
msgid "Django 1.0 alpha release notes"
msgstr ""

# a4260ba3bb25484280c95727b0c99904
#: ../../releases/1.0-alpha-1.txt:5
msgid "Welcome to Django 1.0 alpha!"
msgstr ""

# a016272b4413498cb3f7d7ad2c476475
#: ../../releases/1.0-alpha-1.txt:7
msgid ""
"This is the first in a series of preview/development releases leading up to "
"the eventual release of Django 1.0, currently scheduled to take place in "
"early September 2008. This release is primarily targeted at developers who "
"are interested in testing the Django codebase and helping to identify and "
"resolve bugs prior to the final 1.0 release."
msgstr ""

# e3cae6f7222e4305bf059e915f2b37f0
# 155decb946f74a85af6d91119afdc8a9
#: ../../releases/1.0-alpha-1.txt:13 ../../releases/1.0-alpha-2.txt:13
msgid ""
"As such, this release is *not* intended for production use, and any such use "
"is strongly discouraged."
msgstr ""

# 5add0def09b04c42819797cc3357f1db
#: ../../releases/1.0-alpha-1.txt:18
msgid "What's new in Django 1.0 alpha"
msgstr ""

# 8dec44556faa439e8df9fbed70ba3c28
#: ../../releases/1.0-alpha-1.txt:20
msgid ""
"Django's development trunk has been the site of nearly constant activity "
"over the past year, with several major new features landing since the 0.96 "
"release. Some of the highlights include:"
msgstr ""

# 2ff672f0d8fb416aa4eacf7159ba1f85
#: ../../releases/1.0-alpha-1.txt:35
msgid "Refactored admin application (newforms-admin)"
msgstr ""

# a42539e0f00d45448d0489905c902184
#: ../../releases/1.0-alpha-1.txt:35
msgid ":doc:`admin reference </ref/contrib/admin/index>`"
msgstr ""

# 1dd7f3b01b8c4422b0b264528e81bdd9
#: ../../releases/1.0-alpha-1.txt:38
msgid ""
"Django's internals have been refactored to use Unicode throughout; this "
"drastically simplifies the task of dealing with non-Western-European content "
"and data in Django. Additionally, utility functions have been provided to "
"ease interoperability with third-party libraries and systems which may or "
"may not handle Unicode gracefully. Details are available in Django's Unicode-"
"handling documentation:"
msgstr ""

# 75e40506a843479cae13eb872b773f0b
#: ../../releases/1.0-alpha-1.txt:46
msgid ":doc:`unicode reference </ref/unicode>`"
msgstr ""

# 43ccbcfc68bb487d8360529129837f3c
#: ../../releases/1.0-alpha-1.txt:60
msgid "An improved Django ORM"
msgstr ""

# 1b2bb5e49c954ed898aff609e82305b3
#: ../../releases/1.0-alpha-1.txt:49
msgid ""
"Django's object-relational mapper -- the component which provides the "
"mapping between Django model classes and your database, and which mediates "
"your database queries -- has been dramatically improved by a massive "
"refactoring. For most users of Django this is backwards-compatible; the "
"public-facing API for database querying underwent a few minor changes, but "
"most of the updates took place in the ORM's internals. A guide to the "
"changes, including backwards-incompatible modifications and mentions of new "
"features opened up by this refactoring, is available on the Django wiki:"
msgstr ""

# 2f743676f6c0460cb39064ca47ff5370
#: ../../releases/1.0-alpha-1.txt:60
msgid "https://code.djangoproject.com/wiki/QuerysetRefactorBranch"
msgstr ""

# 2c6c532050184bc8a37f8a21396aa346
#: ../../releases/1.0-alpha-1.txt:71
msgid ""
"There are many more new features, many bugfixes and many enhancements to "
"existing features from previous releases. The ``newforms`` library, for "
"example, has undergone massive improvements including several useful add-ons "
"in ``django.contrib`` which complement and build on Django's form-handling "
"capabilities, and Django's file-uploading handlers have been refactored to "
"allow finer-grained control over the uploading process as well as streaming "
"uploads of large files."
msgstr ""

# e088ffea87ae4fd9bf858990e2a33e79
#: ../../releases/1.0-alpha-1.txt:79
msgid ""
"Along with these improvements and additions, we've made a number of of "
"backwards-incompatible changes to the framework, as features have been "
"fleshed out and APIs have been finalized for the 1.0 release. A complete "
"guide to these changes will be available as part of the final Django 1.0 "
"release, and a comprehensive list of backwards-incompatible changes is also "
"available on the Django wiki for those who want to begin developing and "
"testing their upgrade process:"
msgstr ""

# b902212c465943c8867fff39e61c4f59
#: ../../releases/1.0-alpha-1.txt:87
msgid "https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges"
msgstr ""

# f10ea7d2442b4e96b6f42518eac4f292
# 12d718472e9f40f48a2814ecda8a2cd2
# 13f9fb04bd954d4fb31fee6d95f5b7f7
# bdc0ab8f05924c648c4903fb77417e45
#: ../../releases/1.0-alpha-1.txt:91 ../../releases/1.0-alpha-2.txt:64
#: ../../releases/1.0-beta.txt:86 ../../releases/1.0-beta-2.txt:65
msgid "The Django 1.0 roadmap"
msgstr ""

# c285f1b16a1a46c793e6ed60e1d70a55
#: ../../releases/1.0-alpha-1.txt:93
msgid ""
"One of the primary goals of this alpha release is to focus attention on the "
"remaining features to be implemented for Django 1.0, and on the bugs that "
"need to be resolved before the final release. Following this release, we'll "
"be conducting a series of sprints building up to a series of beta releases "
"and a release-candidate stage, followed soon after by Django 1.0. The "
"timeline is projected to be:"
msgstr ""

# 017b092c5ab844cda6478e70ef60d4e6
#: ../../releases/1.0-alpha-1.txt:100
msgid "August 1, 2008: Sprint (based in Washington, DC, and online)."
msgstr ""

# c65dc08e69e24efabeee24502b5744e3
#: ../../releases/1.0-alpha-1.txt:102
msgid ""
"August 5, 2008: Django 1.0 beta 1 release. This will also constitute the "
"feature freeze for 1.0. Any feature to be included in 1.0 must be completed "
"and in trunk by this time."
msgstr ""

# c09933c84e4f42218a3090d2423ce1c1
#: ../../releases/1.0-alpha-1.txt:106
msgid "August 8, 2008: Sprint (based in Lawrence, KS, and online)."
msgstr ""

# 42daac0e32ee4990ab56da50ee92754c
#: ../../releases/1.0-alpha-1.txt:108
msgid "August 12, 2008: Django 1.0 beta 2 release."
msgstr ""

# 628ec6ed37f54832b2c7b1db04c035d5
#: ../../releases/1.0-alpha-1.txt:110
msgid "August 15, 2008: Sprint (based in Austin, TX, and online)."
msgstr ""

# b997560ba8c240898d42fc78aced53bc
#: ../../releases/1.0-alpha-1.txt:112
msgid "August 19, 2008: Django 1.0 release candidate 1."
msgstr ""

# bbaf3c76a5634df2ad5b7b293a8e7483
#: ../../releases/1.0-alpha-1.txt:114
msgid "August 22, 2008: Sprint (based in Portland, OR, and online)."
msgstr ""

# 22b52f8c810a4dc5869c6d4d34fdced4
#: ../../releases/1.0-alpha-1.txt:116
msgid "August 26, 2008: Django 1.0 release candidate 2."
msgstr ""

# 0e75fe3a72074291ae97ba0649b413ac
#: ../../releases/1.0-alpha-1.txt:118
msgid ""
"September 2, 2008: Django 1.0 final release. The official Django 1.0 release "
"party will take place during the first-ever DjangoCon, to be held in "
"Mountain View, CA, September 6-7."
msgstr ""

# 491ed01feca947f5be32756de38ab41a
# 6bd534fb9097450495904b98f07d2351
# 77c3e5aef6054f12951371a2c4eecbfc
#: ../../releases/1.0-alpha-1.txt:122 ../../releases/1.0-alpha-2.txt:97
#: ../../releases/1.0-beta.txt:114
msgid ""
"Of course, like any estimated timeline, this is subject to change as "
"requirements dictate. The latest information will always be available on the "
"Django project wiki:"
msgstr ""

# a8408434dc6e47648692cc6dce73fa66
# b18aa5b607dd44e0acf00d7378f1b6af
# b291cfb09a934f67b8899cd6e912617f
#: ../../releases/1.0-alpha-1.txt:126 ../../releases/1.0-alpha-2.txt:101
#: ../../releases/1.0-beta.txt:118
msgid "https://code.djangoproject.com/wiki/VersionOneRoadmap"
msgstr ""

# eedfaf0a82064281b13b2f1c66408e02
# 2a1c4c77ee6f4b318c4744bfcf8f2c88
# 28b987785cfb405e89b007390f189698
# 5573caef9245478580208c37fe83704c
# 04699f43125f443e95fae04a512653a4
# 564c71bd4f094bc7acb8e39125576c6e
# 4175410c991f4872a67a5d45d038fd5c
# 75b5d8c113d04c9a913e82403df6d3a0
# 982f02a95a75490991c3efdda2f6e47a
# 044a1df71420484b8e2e34dcb88ccd9e
# 8333e391fdcb424da70b8a0198475bb3
# 2b0b3928b5dd4f61a25113f954d2f6f8
# aca7c7af389e4271b2120b6b1349c946
# 11624d1ad682444598f6f49d1096f563
#: ../../releases/1.0-alpha-1.txt:130 ../../releases/1.0-alpha-2.txt:105
#: ../../releases/1.0-beta.txt:122 ../../releases/1.0-beta-2.txt:88
#: ../../releases/1.1-alpha-1.txt:131 ../../releases/1.1-beta-1.txt:174
#: ../../releases/1.1-rc-1.txt:78 ../../releases/1.2-alpha-1.txt:554
#: ../../releases/1.2-beta-1.txt:137 ../../releases/1.2-rc-1.txt:70
#: ../../releases/1.3-alpha-1.txt:365 ../../releases/1.3-beta-1.txt:203
#: ../../releases/1.4-alpha-1.txt:1090 ../../releases/1.4-beta-1.txt:1162
msgid "What you can do to help"
msgstr ""

# 75bbbeb037804f22a3c987ec12dd772b
# 2520676ee45f40ff96ab57ae487f371e
#: ../../releases/1.0-alpha-1.txt:132 ../../releases/1.0-alpha-2.txt:107
msgid ""
"In order to provide a high-quality 1.0 release, we need your help. Although "
"this alpha release is, again, *not* intended for production use, you can "
"help the Django team by trying out the alpha codebase in a safe test "
"environment and reporting any bugs or issues you encounter. The Django "
"ticket tracker is the central place to search for open issues:"
msgstr ""

# 1b9cae7c1f0d4926b58c8ff9769ea900
# edd84a16c0c44dc4b83608e028a6fae9
# 365b26de020948b894423336f08d0af7
# 167be132122542a29b5953527886e27d
# 805a954ac167412aaa5585f03f771f64
# 2cbb0314165b4fa4905ac0d59f7d69bb
# 339f92597c9a4334b08b1d64d83f9b82
# 2150c2ba20de4b2486c77a1606dd1d26
# 2a93ca74afe243ad9748c1dc919fea4f
# a0330694efbc461dbc50a07026f2924a
# cef4d683288249b5b12471784e8b983e
# 371c4db2cb0148af8e1cc900727848c2
# 743433db7be54719a5e9562fc526d471
# 29e59c8651f54b3ab10cf064457b7227
#: ../../releases/1.0-alpha-1.txt:139 ../../releases/1.0-alpha-2.txt:114
#: ../../releases/1.0-beta.txt:131 ../../releases/1.0-beta-2.txt:97
#: ../../releases/1.1-alpha-1.txt:139 ../../releases/1.1-beta-1.txt:182
#: ../../releases/1.1-rc-1.txt:87 ../../releases/1.2-alpha-1.txt:562
#: ../../releases/1.2-beta-1.txt:146 ../../releases/1.2-rc-1.txt:79
#: ../../releases/1.3-alpha-1.txt:373 ../../releases/1.3-beta-1.txt:211
#: ../../releases/1.4-alpha-1.txt:1098 ../../releases/1.4-beta-1.txt:1170
msgid "https://code.djangoproject.com/timeline"
msgstr ""

# 4b854f3d898b481f97e23be713bc9e1a
# 47bb1571014d4e278918981adf66b57a
# db9def5e5aac41d78e8ab7997fbe2bce
# 0de3f910519243cbbb30767d3e7e3532
# f29b6359057e477e8aedde456218f8a7
# 64099c1e420c414db1f4d838d75a4820
# ae772054374c4b298adca4082146dd57
# 6bf8dcf3018446eeb66175cb4a0fd349
# a61501283dae454991f4d0c4d75555bf
# 4ed9555179e845658db77e802227b763
# be439e24f7954367a9ccb848fab6aaad
# 663227f22df84199ac3f9bb30379d184
#: ../../releases/1.0-alpha-1.txt:141 ../../releases/1.0-alpha-2.txt:116
#: ../../releases/1.0-beta.txt:133 ../../releases/1.0-beta-2.txt:99
#: ../../releases/1.1-alpha-1.txt:141 ../../releases/1.1-beta-1.txt:184
#: ../../releases/1.2-alpha-1.txt:564 ../../releases/1.2-beta-1.txt:148
#: ../../releases/1.3-alpha-1.txt:375 ../../releases/1.3-beta-1.txt:213
#: ../../releases/1.4-alpha-1.txt:1100 ../../releases/1.4-beta-1.txt:1172
msgid ""
"Please open new tickets if no existing ticket corresponds to a problem "
"you're running into."
msgstr ""

# a35fbe1c8b554515b9613ffd3902db14
# 8852473b02a04e5aa8c7f7001ffd8a90
# fca21f0f67e54d109a683638edb2cb44
# ae17bdfa3c4c4389b4ae786aa3ef5696
#: ../../releases/1.0-alpha-1.txt:144 ../../releases/1.0-alpha-2.txt:119
#: ../../releases/1.0-beta.txt:136 ../../releases/1.0-beta-2.txt:102
msgid ""
"Additionally, discussion of Django development, including progress toward "
"the 1.0 release, takes place daily on the django-developers mailing list:"
msgstr ""

# 6235c797614c492c89321b3ceaca727f
# df722c1828ff4d239b560f4f41475b9e
# 5a6833c893dd4bb1bdf739a272326ce0
# 5a1716ba661e424fabbc60ca4ac46a0b
# 0bd6985093b44db1bc4078d223f1a6eb
# 116bb9869d5f4f8e88679236990f1181
# 10da129608614e239ee85bdfcc87e939
# ae562f7a3ae54e8d8d75ab487d5ce192
# b967551086b84e4aaa84898b3f8c5f2c
# 9655d3a9705448478175671c48202542
# 1c1bfef0ff4847a7a15786e4608bba38
# 64f7bd71649a4142b4cb0a83a639e73c
# 3e56459ad0f64368a7f682e28f53140f
# cb91fdf326ee41cbb090c826aac6117a
# 0b96eaa07d504e0d94b2eaa7067a2584
#: ../../releases/1.0-alpha-1.txt:148 ../../releases/1.0-alpha-2.txt:123
#: ../../releases/1.0-beta.txt:140 ../../releases/1.0-beta-2.txt:106
#: ../../releases/1.1.txt:450 ../../releases/1.1-alpha-1.txt:147
#: ../../releases/1.1-beta-1.txt:190 ../../releases/1.1-rc-1.txt:96
#: ../../releases/1.2-alpha-1.txt:570 ../../releases/1.2-beta-1.txt:155
#: ../../releases/1.2-rc-1.txt:88 ../../releases/1.3-alpha-1.txt:381
#: ../../releases/1.3-beta-1.txt:219 ../../releases/1.4-alpha-1.txt:1106
#: ../../releases/1.4-beta-1.txt:1178
msgid "http://groups.google.com/group/django-developers"
msgstr ""

# 6ec222be4b694decb03e1e9db4d96c5e
# 871b467f9ca34ac9af2ea6a187dd4efd
# dc00cfa9f07d48749e4190fe380a7ea6
# ed0687bdcb154af3b79664bb38ae406f
#: ../../releases/1.0-alpha-1.txt:150 ../../releases/1.0-alpha-2.txt:125
#: ../../releases/1.0-beta.txt:142 ../../releases/1.0-beta-2.txt:108
msgid ""
"...and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If you're "
"interested in helping out with Django's development, feel free to join the "
"discussions there."
msgstr ""

# dfa5de5b52eb4750bb5144aa11140b98
# 158b2bc793814c7fad23d2e75b6b41d5
# 5b594a0d52314789a2c07a1407d018d1
# 26f83c7ccd30455cb88d8025995039cd
# 8c033a3716a84e1fb803b6f61bb779a2
# 6daa9a1129214875927e65c7944475d3
# 53fac9c7123649a4a7ab6a669fb7acbc
# 89313ac0a6a147eea49b4ca84faec1a9
# 5a4b872252634a1c8da7b27c240fb29a
# ac65f3b4bf484fe28bb32338e4e61cfd
# 0f79c40c7f264daaba8cd15a537db934
# 73c68c065ed740bcbb1ea15fb3b6d2de
# 244b7bfc625548268eeb030071ef15e6
# eb4360dede77481583850d0a68ae0c9b
# baad6afa9a8c4a17888c094cb1b04e39
#: ../../releases/1.0-alpha-1.txt:154 ../../releases/1.0-alpha-2.txt:129
#: ../../releases/1.0-beta.txt:146 ../../releases/1.0-beta-2.txt:112
#: ../../releases/1.1.txt:455 ../../releases/1.1-alpha-1.txt:153
#: ../../releases/1.1-beta-1.txt:196 ../../releases/1.1-rc-1.txt:102
#: ../../releases/1.2-alpha-1.txt:576 ../../releases/1.2-beta-1.txt:161
#: ../../releases/1.2-rc-1.txt:94 ../../releases/1.3-alpha-1.txt:387
#: ../../releases/1.3-beta-1.txt:225 ../../releases/1.4-alpha-1.txt:1112
#: ../../releases/1.4-beta-1.txt:1184
msgid ""
"Django's online documentation also includes pointers on how to contribute to "
"Django:"
msgstr ""

# 8fde5218e8b244c689e8c120964382b2
# a08b28251b074a448c61a02c616c7895
# dd94d22e1cba4283a4014f8db1b0c0f1
# 234978dee0cc4727b77fdfb4992db2a5
#: ../../releases/1.0-alpha-1.txt:157 ../../releases/1.0-alpha-2.txt:132
#: ../../releases/1.0-beta.txt:149 ../../releases/1.0-beta-2.txt:115
msgid ":doc:`contributing to Django </internals/contributing/index>`"
msgstr ""

# ce823360020b448f80762abeda052efa
# 6a9566d35ba04899991bc5a416a2be96
# 986dfd762fc84253a6013e8fd2ec5ade
# 8594ae0b02044581a224be24771cb875
# 3e9fd08dcb9b4763b02c1c9f0584a69f
# 9f29ff3b01c24b32a127e56051efb35a
# 500c22057b824b3a98f00a20bc45d25f
# af65d041a1b04016b83d406c11fbd52b
# 0c4c3ba0427d48ef866b9f3f09ae1a20
# 63d36c362f644131bb2463a061c81d18
# 5293524791c84e3fa11a126b1ce0a86f
# 6201b0cea26440099d0a3d9566253fbd
# 39d42f726de94c78ab631773d72f549a
# abdc97520d95461eb26b7bfe55d0e593
# e0d8e515f710452ab29edeab8c9abb92
#: ../../releases/1.0-alpha-1.txt:159 ../../releases/1.0-alpha-2.txt:134
#: ../../releases/1.0-beta.txt:151 ../../releases/1.0-beta-2.txt:117
#: ../../releases/1.1.txt:460 ../../releases/1.1-alpha-1.txt:158
#: ../../releases/1.1-beta-1.txt:201 ../../releases/1.1-rc-1.txt:107
#: ../../releases/1.2-alpha-1.txt:581 ../../releases/1.2-beta-1.txt:166
#: ../../releases/1.2-rc-1.txt:99 ../../releases/1.3-alpha-1.txt:392
#: ../../releases/1.3-beta-1.txt:230 ../../releases/1.4-alpha-1.txt:1117
#: ../../releases/1.4-beta-1.txt:1189
msgid ""
"Contributions on any level -- developing code, writing documentation or "
"simply triaging tickets and helping to test proposed bugfixes -- are always "
"welcome and appreciated."
msgstr ""

# 7042c3f72a9c4f3081f68637837b0011
#: ../../releases/1.0-alpha-2.txt:3
msgid "Django 1.0 alpha 2 release notes"
msgstr ""

# e9cfa0633da042eaa28c68d5f64ce05a
#: ../../releases/1.0-alpha-2.txt:5
msgid "Welcome to Django 1.0 alpha 2!"
msgstr ""

# 2a4bc8c27c6143f8adf9f197187f0230
#: ../../releases/1.0-alpha-2.txt:7
msgid ""
"This is the second in a series of preview/development releases leading up to "
"the eventual release of Django 1.0, currently scheduled to take place in "
"early September 2008. This releases is primarily targeted at developers who "
"are interested in testing the Django codebase and helping to identify and "
"resolve bugs prior to the final 1.0 release."
msgstr ""

# b62b3502f1fe4cffb689e85ff67d5787
#: ../../releases/1.0-alpha-2.txt:18
msgid "What's new in Django 1.0 alpha 2"
msgstr ""

# ca484338e0f34db1bab3f61f9fef46a0
#: ../../releases/1.0-alpha-2.txt:20
msgid ""
"Django's development trunk has been the site of nearly constant activity "
"over the past year, with several major new features landing since the 0.96 "
"release. For features which were new as of Django 1.0 alpha 1, see :doc:`the "
"1.0 alpha 1 release notes </releases/1.0-alpha-1>`. Since the 1.0 alpha 1 "
"release several new features have landed, including:"
msgstr ""

# 0830ebda4bcc43a2b62a66c83284026c
#: ../../releases/1.0-alpha-2.txt:33
msgid "``django.contrib.gis`` (`GeoDjango`_)"
msgstr ""

# eabe75d5e9194190a83dfe82a29876fa
#: ../../releases/1.0-alpha-2.txt:27
msgid ""
"A project over a year in the making, this adds world-class GIS (`Geographic "
"Information Systems`_) support to Django, in the form of a ``contrib`` "
"application.  `Its documentation`_ is currently being maintained externally, "
"and will be merged into the main Django documentation prior to the final 1.0 "
"release. Huge thanks go to Justin Bronn, Jeremy Dunck, Brett Hoerner and "
"Travis Pinney for their efforts in creating and completing this feature."
msgstr ""

# 778bb51791404f86a77d19bcebb34990
#: ../../releases/1.0-alpha-2.txt:50
msgid ""
"There are many other new features and improvements in this release, "
"including two major performance boosts: strings marked for translation "
"using :doc:`Django's internationalization system </topics/i18n/index>` now "
"consume far less memory, and Django's internal dispatcher -- which is "
"invoked frequently during request/response processing and when working with "
"Django's object-relational mapper -- is now significantly faster."
msgstr ""

# b9ed67048fe14e1db5547c586f0b8098
#: ../../releases/1.0-alpha-2.txt:66
msgid ""
"One of the primary goals of this alpha release is to focus attention on the "
"remaining features to be implemented for Django 1.0, and on the bugs that "
"need to be resolved before the final release. Following this release, we'll "
"be conducting a series of development sprints building up to the beta and "
"release-candidate stages, followed soon after by Django 1.0. The timeline is "
"projected to be:"
msgstr ""

# e51374989a394b13aded3793689b8f74
#: ../../releases/1.0-alpha-2.txt:73
msgid ""
"**August 14, 2008: Django 1.0 beta release.** Past this point Django will be "
"in a \"feature freeze\" for the 1.0 release; after Django 1.0 beta, the "
"development focus will be solely on bug fixes and stabilization."
msgstr ""

# ed180125f67f40c6b94f95804df3538f
# 7fa113191990428dafd8708048fe3a37
#: ../../releases/1.0-alpha-2.txt:78 ../../releases/1.0-beta.txt:95
msgid "August 15, 2008: Sprint (based in Austin, Texas, USA, and online)."
msgstr ""

# a10d6a83bbbf42e3b1601f3e80e16ef0
# 14201a1e13d245d7b112184680692ef0
#: ../../releases/1.0-alpha-2.txt:80 ../../releases/1.0-beta.txt:97
msgid "August 17, 2008: Sprint (based in Tel Aviv, Israel, and online)."
msgstr ""

# f0eef89af8dd4b54972f84aaba02c727
# b12c2274f9ce48d8aae27cb089924a21
#: ../../releases/1.0-alpha-2.txt:82 ../../releases/1.0-beta.txt:99
msgid ""
"**August 21, 2008: Django 1.0 release candidate 1.** At this point, all "
"strings marked for translation within Django's codebase will be frozen, to "
"provide contributors time to check and finalize all of Django's bundled "
"translation files prior to the final 1.0 release."
msgstr ""

# 027331a8a0d84e5592e407dc69384f0a
# d429cd2c5b4d472fb92b04f1b82c5844
#: ../../releases/1.0-alpha-2.txt:87 ../../releases/1.0-beta.txt:104
msgid "August 22, 2008: Sprint (based in Portland, Oregon, USA, and online)."
msgstr ""

# 1e290ece1e56476a9375df55b6d0f48f
# a5f79bab86e64e96b1884a538e3e9efa
#: ../../releases/1.0-alpha-2.txt:89 ../../releases/1.0-beta.txt:106
msgid "**August 26, 2008: Django 1.0 release candidate 2.**"
msgstr ""

# 36cadde356c0473b98e1651d4eba6395
# b6200b94ce6348af88eb9738abff3f56
#: ../../releases/1.0-alpha-2.txt:91 ../../releases/1.0-beta.txt:108
msgid "August 30, 2008: Sprint (based in London, England, UK, and online)."
msgstr ""

# 71ed386edc994c2a9a4bba1223d0e86f
# 4791c5fcc8be4c2ca534c567e5bfcf86
#: ../../releases/1.0-alpha-2.txt:93 ../../releases/1.0-beta.txt:110
msgid ""
"**September 2, 2008: Django 1.0 final release.** The official Django 1.0 "
"release party will take place during the first-ever DjangoCon, to be held in "
"Mountain View, California, USA, September 6-7."
msgstr ""

# c24aa468853744fcb605d5abf233313e
#: ../../releases/1.0-beta.txt:3
msgid "Django 1.0 beta 1 release notes"
msgstr ""

# 45ea01ef20254fe6a8270e40a75fee57
#: ../../releases/1.0-beta.txt:5
msgid "Welcome to Django 1.0 beta 1!"
msgstr ""

# 204a6499b5e24bd0855ca7b50e074239
#: ../../releases/1.0-beta.txt:7
msgid ""
"This is the third in a series of preview/development releases leading up to "
"the eventual release of Django 1.0, currently scheduled to take place in "
"early September 2008. This releases is primarily targeted at developers who "
"are interested in testing the Django codebase and helping to identify and "
"resolve bugs prior to the final 1.0 release."
msgstr ""

# 128832aad23f4649823ea029a78127ad
# 7e8e4b4528b348479f0beda9232dea56
# 29781e9ef1a44d95a449d696cdebef59
# e3601f2d57de42d182f2d5447cae3bc0
# 1685721ea6934d63a73707a4bc392e08
# 4b21f2875c094215beee86993d33d012
# 64ff26bcad2646f9bb48179cdc32cbe1
# 4c9ff5351ff5449499227588586cb247
# 1d0773a890b94a2b82824bfbf33044b8
# 825048bac84f477c9609915528537690
# cbe630dabe264998bd9204944d11c878
# 67d53071aaae4f84b64f49967dbdc31a
#: ../../releases/1.0-beta.txt:13 ../../releases/1.0-beta-2.txt:13
#: ../../releases/1.1-alpha-1.txt:15 ../../releases/1.1-beta-1.txt:15
#: ../../releases/1.2-alpha-1.txt:15 ../../releases/1.2-beta-1.txt:16
#: ../../releases/1.3-alpha-1.txt:15 ../../releases/1.3-beta-1.txt:13
#: ../../releases/1.4-alpha-1.txt:15 ../../releases/1.4-beta-1.txt:15
#: ../../releases/1.5-alpha-1.txt:15 ../../releases/1.5-beta-1.txt:15
msgid ""
"As such, this release is *not* intended for production use, and any such use "
"is discouraged."
msgstr ""

# cd6c38fce6d844ffa631fadd888b67d4
#: ../../releases/1.0-beta.txt:17
msgid "What's new in Django 1.0 beta 1"
msgstr ""

# 2b7229d2b52b41b2b605936081ae51a4
#: ../../releases/1.0-beta.txt:19
msgid ""
"Django's development trunk has been the site of nearly constant activity "
"over the past year, with several major new features landing since the 0.96 "
"release. For features which were new as of Django 1.0 alpha 1, see :doc:`the "
"1.0 alpha 1 release notes </releases/1.0-alpha-1>`. For features which were "
"new as of Django 1.0 alpha 2, see :doc:`the 1.0 alpha 2 release notes </"
"releases/1.0-alpha-2>`."
msgstr ""

# 748f0d0b6a5944edb4f7676c290d40b4
#: ../../releases/1.0-beta.txt:25
msgid ""
"This beta release does not contain any major new features, but does include "
"several smaller updates and improvements to Django:"
msgstr ""

# 94e4ed54db9b4e55b46e961f638e0458
#: ../../releases/1.0-beta.txt:39
msgid "Improved flexibility in the admin"
msgstr ""

# 2b4ce6773f1140bfa6aabfa2a55f2e4c
#: ../../releases/1.0-beta.txt:35
msgid ""
"Following up on the refactoring of Django's administrative interface "
"(``django.contrib.admin``), introduced in Django 1.0 alpha 1, two new hooks "
"have been added to allow customized pre- and post-save handling of model "
"instances in the admin. Full details are in :doc:`the admin documentation </"
"ref/contrib/admin/index>`."
msgstr ""

# 8bbee6463c904990ad06a6c46c12bb60
#: ../../releases/1.0-beta.txt:42
msgid ""
"Although Django's default behavior of having a model's ``save()`` method "
"automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at "
"the SQL level is suitable for the majority of cases, there are occasional "
"situations where forcing one or the other is useful. As a result, models can "
"now support an additional parameter to ``save()`` which can force a specific "
"operation. Consult the database API documentation for details and important "
"notes about appropriate use of this parameter."
msgstr ""

# 15acdb48a3f449babb2e78bac7765c2e
#: ../../releases/1.0-beta.txt:52
msgid ""
"Django's ``CacheMiddleware`` has been split into three classes: "
"``CacheMiddleware`` itself still exists and retains all of its previous "
"functionality, but it is now built from two separate middleware classes "
"which handle the two parts of caching (inserting into and reading from the "
"cache) separately, offering additional flexibility for situations where "
"combining these functions into a single middleware posed problems. Full "
"details, including updated notes on appropriate use, are in :doc:`the "
"caching documentation </topics/cache>`."
msgstr ""

# 65d1c1e433a94ce08549fca2811866f5
#: ../../releases/1.0-beta.txt:63
msgid ""
"A number of features and methods which had previously been marked as "
"deprecated, and which were scheduled for removal prior to the 1.0 release, "
"are no longer present in Django. These include imports of the form library "
"from ``django.newforms`` (now located simply at ``django.forms``), the "
"``form_for_model`` and ``form_for_instance`` helper functions (which have "
"been replaced by ``ModelForm``) and a number of deprecated features which "
"were replaced by the dispatcher, file-uploading and file-storage "
"refactorings introduced in the Django 1.0 alpha releases. A full list of "
"these and all other backwards-incompatible changes is available on `the "
"Django wiki`_."
msgstr ""

# dee805f6de064e7794ab926a3b731db8
#: ../../releases/1.0-beta.txt:75
msgid ""
"A number of other improvements and bugfixes have also been included: some "
"tricky cases involving case-sensitivity in differing MySQL collations have "
"been resolved, Windows packaging and installation has been improved and the "
"method by which Django generates unique session identifiers has been made "
"much more robust."
msgstr ""

# e6cd4c440d8948cabd13e1bcb36b03fa
#: ../../releases/1.0-beta.txt:88
msgid ""
"One of the primary goals of this beta release is to focus attention on the "
"remaining features to be implemented for Django 1.0, and on the bugs that "
"need to be resolved before the final release. Following this release, we'll "
"be conducting a series of development sprints building up to the release-"
"candidate stage, followed soon after by Django 1.0. The timeline is "
"projected to be:"
msgstr ""

# 0571019233ea4d90bda3ba3128131c50
# 255d6ca9e74c43798328da904ec013d1
#: ../../releases/1.0-beta.txt:124 ../../releases/1.0-beta-2.txt:90
msgid ""
"In order to provide a high-quality 1.0 release, we need your help. Although "
"this beta release is, again, *not* intended for production use, you can help "
"the Django team by trying out the beta codebase in a safe test environment "
"and reporting any bugs or issues you encounter. The Django ticket tracker is "
"the central place to search for open issues:"
msgstr ""

# 97c2e54e32a8417484a49fb02c18149c
#: ../../releases/1.0-beta-2.txt:3
msgid "Django 1.0 beta 2 release notes"
msgstr ""

# 0435626f241c47fbabeca10a6c46257c
#: ../../releases/1.0-beta-2.txt:5
msgid "Welcome to Django 1.0 beta 2!"
msgstr ""

# 0d3bb02edf36477492ca6382d6d2d95f
#: ../../releases/1.0-beta-2.txt:7
msgid ""
"This is the fourth in a series of preview/development releases leading up to "
"the eventual release of Django 1.0, currently scheduled to take place in "
"early September 2008. This releases is primarily targeted at developers who "
"are interested in testing the Django codebase and helping to identify and "
"resolve bugs prior to the final 1.0 release."
msgstr ""

# d4cefe60996447e89dc76758201522b8
#: ../../releases/1.0-beta-2.txt:17
msgid "What's new in Django 1.0 beta 2"
msgstr ""

# 4b6336c6bea84149a8dd952bd33750bf
#: ../../releases/1.0-beta-2.txt:19
msgid ""
"Django's development trunk has been the site of nearly constant activity "
"over the past year, with several major new features landing since the 0.96 "
"release.  For features which were new as of Django 1.0 alpha 1, see :doc:"
"`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. For features which "
"were new as of Django 1.0 alpha 2, see :doc:`the 1.0 alpha 2 release notes </"
"releases/1.0-alpha-2>`. For features which were new as of Django 1.0 beta 1, "
"see :doc:`the 1.0 beta 1 release notes </releases/1.0-beta>`."
msgstr ""

# 8593f2cefabd4346b259955e66e871be
#: ../../releases/1.0-beta-2.txt:28
msgid "This beta release includes two major features:"
msgstr ""

# 85d18d47b461480d9be10354d8d2eea9
#: ../../releases/1.0-beta-2.txt:31
msgid ""
"As part of a Google Summer of Code project, Thejaswi Puthraya carried out a "
"major rewrite and refactoring of Django's bundled comment system, greatly "
"increasing its flexibility and customizability. :doc:`Full documentation </"
"ref/contrib/comments/index>` is available, as well as an upgrade guide if "
"you were using the previous incarnation of the comments application.."
msgstr ""

# 7cb8a817dacb4f93824bf8d529cb2af0
#: ../../releases/1.0-beta-2.txt:46
msgid "Refactored documentation"
msgstr ""

# 2e91626dc0eb4afd8147064afe776e87
#: ../../releases/1.0-beta-2.txt:40
msgid ""
"Django's bundled and online documentation has also been significantly "
"refactored; the new documentation system uses `Sphinx`_ to build the docs "
"and handle such niceties as topical indexes, reference documentation and "
"cross-references within the docs. You can check out the new documentation "
"`online`_ or, if you have Sphinx installed, build the HTML yourself from the "
"documentation files bundled with Django."
msgstr ""

# f8d7e95cad8c4b918563aebc09647af4
#: ../../releases/1.0-beta-2.txt:51
msgid ""
"Along with these new features, the Django team has also been hard at work "
"polishing Django's codebase for the final 1.0 release; this beta release "
"contains a large number of smaller improvements and bugfixes from the "
"ongoing push to 1.0."
msgstr ""

# 55baa65e39444fe7af27ebe8286a5f51
#: ../../releases/1.0-beta-2.txt:56
msgid ""
"Also, as part of its ongoing deprecation process, Django's old form-handling "
"system has been removed; this means ``django.oldforms`` no longer exists, "
"and its various API hooks (such as automatic manipulators) are no longer "
"present in Django. This system has been completely replaced by :doc:`the new "
"form-handling system </topics/forms/index>` in ``django.forms``."
msgstr ""

# 700bcb25b4a249ed8871ba9b970b5dcc
#: ../../releases/1.0-beta-2.txt:67
msgid ""
"One of the primary goals of this beta release is to focus attention on the "
"remaining features to be implemented for Django 1.0, and on the bugs that "
"need to be resolved before the final release. As of this beta release, "
"Django is in its final \"feature freeze\" for 1.0; feature requests will be "
"deferred to later releases, and the development effort will be focused "
"solely on bugfixing and stability. Django is also now in a \"string freeze"
"\"; translatable strings (labels, error messages, etc.) in Django's codebase "
"will not be changed prior to the release, in order to allow our translators "
"to produce the final 1.0 version of Django's translation files."
msgstr ""

# ec0a7da402464f34a0e322c431db390d
#: ../../releases/1.0-beta-2.txt:78
msgid ""
"Following this release, we'll be conducting a final development sprint on "
"August 30, 2008, based in London and coordinated online; the goal of this "
"sprint will be to squash as many bugs as possible in anticipation of the "
"final 1.0 release, which is currently targeted for **September 2, 2008**. "
"The official Django 1.0 release party will take place during the first-ever "
"DjangoCon, to be held in Mountain View, California, USA, September 6-7."
msgstr ""

# 2aefbc1933dc4096913c42eff3e254f4
#: ../../releases/1.0-porting-guide.txt:3
msgid "Porting your apps from Django 0.96 to 1.0"
msgstr ""

# f5e23060b50d49dd8743a2032f085511
#: ../../releases/1.0-porting-guide.txt:7
msgid "Django 1.0 breaks compatibility with 0.96 in some areas."
msgstr ""

# 7a18f919fd1f45a08438f5d9f0eef333
#: ../../releases/1.0-porting-guide.txt:9
msgid ""
"This guide will help you port 0.96 projects and apps to 1.0. The first part "
"of this document includes the common changes needed to run with 1.0. If "
"after going through the first part your code still breaks, check the section "
"`Less-common Changes`_ for a list of a bunch of less-common compatibility "
"issues."
msgstr ""

# 010102a70b504cdd91ff17c53e9d1602
#: ../../releases/1.0-porting-guide.txt:16
msgid ""
"The :doc:`1.0 release notes </releases/1.0>`. That document explains the new "
"features in 1.0 more deeply; the porting guide is more concerned with "
"helping you quickly update your code."
msgstr ""

# 3ca525a9b6074f6c860d6a3ff3913903
#: ../../releases/1.0-porting-guide.txt:21
msgid "Common changes"
msgstr ""

# f2b7e4bf534e4fa693c29cb45995a8ce
#: ../../releases/1.0-porting-guide.txt:23
msgid ""
"This section describes the changes between 0.96 and 1.0 that most users will "
"need to make."
msgstr ""

# 0262b6faf6e742c68371a696dd0b6168
#: ../../releases/1.0-porting-guide.txt:27
msgid "Use Unicode"
msgstr ""

# c5f7e5ce16c147c181d00865ed14dbf9
#: ../../releases/1.0-porting-guide.txt:29
msgid ""
"Change string literals (``'foo'``) into Unicode literals (``u'foo'``). "
"Django now uses Unicode strings throughout. In most places, raw strings will "
"continue to work, but updating to use Unicode literals will prevent some "
"obscure problems."
msgstr ""

# 0c45432382b141a1b23603b0ada40148
#: ../../releases/1.0-porting-guide.txt:34
msgid "See :doc:`/ref/unicode` for full details."
msgstr ""

# 62d37fcc10f5436f93592825b61ea2b4
#: ../../releases/1.0-porting-guide.txt:37
msgid "Models"
msgstr ""

# 60a632e5b8504070a0f2aac0a4a68a66
#: ../../releases/1.0-porting-guide.txt:39
msgid "Common changes to your models file:"
msgstr ""

# 17d533ed97bb410799889d3f552b932a
#: ../../releases/1.0-porting-guide.txt:42
msgid "Rename ``maxlength`` to ``max_length``"
msgstr ""

# 0300bbc1a1ac456f8d9bc317a781c2d3
#: ../../releases/1.0-porting-guide.txt:44
msgid ""
"Rename your ``maxlength`` argument to ``max_length`` (this was changed to be "
"consistent with form fields):"
msgstr ""

# d6fbda18476f4313a2505ddd7e2ce7b4
#: ../../releases/1.0-porting-guide.txt:48
msgid "Replace ``__str__`` with ``__unicode__``"
msgstr ""

# f9e865b508e9484b943c803b4fa895c2
#: ../../releases/1.0-porting-guide.txt:50
msgid ""
"Replace your model's ``__str__`` function with a ``__unicode__`` method, and "
"make sure you `use Unicode`_ (``u'foo'``) in that method."
msgstr ""

# 29c9527b4bee4e06ad68b94434aa97b8
#: ../../releases/1.0-porting-guide.txt:54
msgid "Remove ``prepopulated_from``"
msgstr ""

# ad9300c8e2b44c57adb0a3d0f9f0df9e
#: ../../releases/1.0-porting-guide.txt:56
msgid ""
"Remove the ``prepopulated_from`` argument on model fields. It's no longer "
"valid and has been moved to the ``ModelAdmin`` class in ``admin.py``. See "
"`the admin`_, below, for more details about changes to the admin."
msgstr ""

# 65702876b6ed40d581237041fa9de5d5
#: ../../releases/1.0-porting-guide.txt:61
msgid "Remove ``core``"
msgstr ""

# 8ddf53d2d1704af0b0dfd9a4dd14063a
#: ../../releases/1.0-porting-guide.txt:63
msgid ""
"Remove the ``core`` argument from your model fields. It is no longer "
"necessary, since the equivalent functionality (part of :ref:`inline editing "
"<admin-inlines>`) is handled differently by the admin interface now. You "
"don't have to worry about inline editing until you get to `the admin`_ "
"section, below. For now, remove all references to ``core``."
msgstr ""

# ae97ae76ecb0462e83865f1d4578ab54
#: ../../releases/1.0-porting-guide.txt:70
msgid "Replace ``class Admin:`` with ``admin.py``"
msgstr ""

# 86e9f321eead4adc8b7290d190c24785
#: ../../releases/1.0-porting-guide.txt:72
msgid ""
"Remove all your inner ``class Admin`` declarations from your models. They "
"won't break anything if you leave them, but they also won't do anything. To "
"register apps with the admin you'll move those declarations to an ``admin."
"py`` file; see `the admin`_ below for more details."
msgstr ""

# ab9e3776f4924a40992d23d4bf3b8707
#: ../../releases/1.0-porting-guide.txt:79
msgid ""
"A contributor to djangosnippets__ has written a script that'll `scan your "
"models.py and generate a corresponding admin.py`__."
msgstr ""

# 55b0e61405c041c8a3d9fec7eef3f8ff
#: ../../releases/1.0-porting-guide.txt:86
msgid "Example"
msgstr ""

# a7afc2bf6d654445ba56c5516dc788ef
#: ../../releases/1.0-porting-guide.txt:88
msgid ""
"Below is an example ``models.py`` file with all the changes you'll need to "
"make:"
msgstr ""

# a2368aca899d4bbda1f2e94ad4828d96
#: ../../releases/1.0-porting-guide.txt:90
msgid "Old (0.96) ``models.py``::"
msgstr ""

# 6c03007e70144ac485ca0aac28f31eb9
#: ../../releases/1.0-porting-guide.txt:103
msgid "New (1.0) ``models.py``::"
msgstr ""

# 9b9efd88f6504da882894510fdadaa96
#: ../../releases/1.0-porting-guide.txt:113
msgid "New (1.0) ``admin.py``::"
msgstr ""

# 76d11ee007bc43f086b6d271269f04dd
#: ../../releases/1.0-porting-guide.txt:127
msgid "The Admin"
msgstr ""

# 3a97bd2c44f34c9fab77e3d16a712f3c
#: ../../releases/1.0-porting-guide.txt:129
msgid ""
"One of the biggest changes in 1.0 is the new admin. The Django "
"administrative interface (``django.contrib.admin``) has been completely "
"refactored; admin definitions are now completely decoupled from model "
"definitions, the framework has been rewritten to use Django's new form-"
"handling library and redesigned with extensibility and customization in mind."
msgstr ""

# 166d798592b74a1aae44bda7e95ecd90
#: ../../releases/1.0-porting-guide.txt:135
msgid ""
"Practically, this means you'll need to rewrite all of your ``class Admin`` "
"declarations. You've already seen in `models`_ above how to replace your "
"``class Admin`` with a ``admin.site.register()`` call in an ``admin.py`` "
"file. Below are some more details on how to rewrite that ``Admin`` "
"declaration into the new syntax."
msgstr ""

# 1d4dc516450a4f87a0963b261cd29ff1
#: ../../releases/1.0-porting-guide.txt:142
msgid "Use new inline syntax"
msgstr ""

# 1ceee999ed27490c86b9676655ea9745
#: ../../releases/1.0-porting-guide.txt:144
msgid ""
"The new ``edit_inline`` options have all been moved to ``admin.py``. Here's "
"an example:"
msgstr ""

# 23c88187452841fda22dfc1cbea5a799
# 53586bd1d0794123b5ed77717d5716aa
# 40d7ad8874fa43c0a059cdcb3adaef16
# 256623d9011c414a98119a1da3efce19
# 76e44b652d9940edafb4358b86f68a72
# b7468fd5a97b43d9ba74601c0efca62b
#: ../../releases/1.0-porting-guide.txt:147
#: ../../releases/1.0-porting-guide.txt:176
#: ../../releases/1.0-porting-guide.txt:484
#: ../../releases/1.0-porting-guide.txt:506
#: ../../releases/1.0-porting-guide.txt:523
#: ../../releases/1.0-porting-guide.txt:649
msgid "Old (0.96)::"
msgstr ""

# 9cc6dd999e954309a25985b7cab73889
# e49dad520aad47e6bb01533ac9fce951
# cdb6f5b46ffa40a585ae84f5928f8aa2
# 36ce5aa4dda046aa84409bb5347c174d
# 49f2c982808e473e931c4d9ffbdab991
# 9f9587355e95452da523456f84108eca
#: ../../releases/1.0-porting-guide.txt:156
#: ../../releases/1.0-porting-guide.txt:196
#: ../../releases/1.0-porting-guide.txt:491
#: ../../releases/1.0-porting-guide.txt:512
#: ../../releases/1.0-porting-guide.txt:529
#: ../../releases/1.0-porting-guide.txt:655
msgid "New (1.0)::"
msgstr ""

# cfd91dd91a06438ea238af3c69f86d5b
#: ../../releases/1.0-porting-guide.txt:168
msgid "See :ref:`admin-inlines` for more details."
msgstr ""

# ebb27f57a254404bb24494607028c4ca
#: ../../releases/1.0-porting-guide.txt:171
msgid "Simplify ``fields``, or use ``fieldsets``"
msgstr ""

# d9b4e9b022d74a24b70fc6d3b96fd1b4
#: ../../releases/1.0-porting-guide.txt:173
msgid ""
"The old ``fields`` syntax was quite confusing, and has been simplified. The "
"old syntax still works, but you'll need to use ``fieldsets`` instead."
msgstr ""

# e0c9d93980c14996aef20d030e1a4e0d
#: ../../releases/1.0-porting-guide.txt:210
msgid ""
"More detailed information about the changes and the reasons behind them can "
"be found on the `NewformsAdminBranch wiki page`__"
msgstr ""

# 558696cb49b341a1b082885c88d92d03
#: ../../releases/1.0-porting-guide.txt:213
msgid ""
"The new admin comes with a ton of new features; you can read about them in "
"the :doc:`admin documentation </ref/contrib/admin/index>`."
msgstr ""

# b1f01507b27a489086fc34b1cd44fa6e
#: ../../releases/1.0-porting-guide.txt:219
msgid "URLs"
msgstr ""

# 0050d0438e0f4accbe044388491d2054
#: ../../releases/1.0-porting-guide.txt:222
msgid "Update your root ``urls.py``"
msgstr ""

# 712649aaf72f4568ba1402eaa72db7c1
#: ../../releases/1.0-porting-guide.txt:224
msgid ""
"If you're using the admin site, you need to update your root ``urls.py``."
msgstr ""

# b0d687596ebc4572aae746a3ce0de2d6
#: ../../releases/1.0-porting-guide.txt:226
msgid "Old (0.96) ``urls.py``::"
msgstr ""

# c4292134712d49deba7440ab223fa624
#: ../../releases/1.0-porting-guide.txt:236
msgid "New (1.0) ``urls.py``::"
msgstr ""

# f615a41f973948539bd4eed13ffe5bd1
#: ../../releases/1.0-porting-guide.txt:251
msgid "Views"
msgstr ""

# b21045250bb8499a972a7deda0f1f3c4
#: ../../releases/1.0-porting-guide.txt:254
msgid "Use ``django.forms`` instead of ``newforms``"
msgstr ""

# 407723dd8a524b78838713e115168e0b
#: ../../releases/1.0-porting-guide.txt:256
msgid ""
"Replace ``django.newforms`` with ``django.forms`` -- Django 1.0 renamed the "
"``newforms`` module (introduced in 0.96) to plain old ``forms``. The "
"``oldforms`` module was also removed."
msgstr ""

# e5c95c2b635941fa9e303946bd5c5b7c
#: ../../releases/1.0-porting-guide.txt:260
msgid ""
"If you're already using the ``newforms`` library, and you used our "
"recommended ``import`` statement syntax, all you have to do is change your "
"import statements."
msgstr ""

# 52af5cf6ace14b858083cb987a1ec559
#: ../../releases/1.0-porting-guide.txt:264
msgid "Old::"
msgstr ""

# ff139820fb0240dbbf2d3ac83dbe42c5
#: ../../releases/1.0-porting-guide.txt:268
msgid "New::"
msgstr ""

# f77790abbd9f4f0c8a02c5849cd7dbf3
#: ../../releases/1.0-porting-guide.txt:272
msgid ""
"If you're using the old forms system (formerly known as ``django.forms`` and "
"``django.oldforms``), you'll have to rewrite your forms. A good place to "
"start is the :doc:`forms documentation </topics/forms/index>`"
msgstr ""

# cb64f0f8470c4232ba07512492b041f3
#: ../../releases/1.0-porting-guide.txt:277
msgid "Handle uploaded files using the new API"
msgstr ""

# 68e0544097eb46aa86a707a8caf73a8e
#: ../../releases/1.0-porting-guide.txt:279
msgid ""
"Replace use of uploaded files -- that is, entries in ``request.FILES`` -- as "
"simple dictionaries with the new :class:`~django.core.files.uploadedfile."
"UploadedFile`. The old dictionary syntax no longer works."
msgstr ""

# d993138e88414e47b8d7724a263b627c
#: ../../releases/1.0-porting-guide.txt:284
msgid "Thus, in a view like::"
msgstr ""

# 2d7428d66b674ff3b52d5d4b64faf584
#: ../../releases/1.0-porting-guide.txt:290
msgid "...you'd need to make the following changes:"
msgstr ""

# ba86a717226443718b5d1f8f5cf37545
# 1801fd1d83d949ac94ae760f2c3ed40f
# 3e5abfa0eb7b435fa19b3bfe7909f704
# 7b57c900cdc641fb9eab8450b14d63e3
#: ../../releases/1.0-porting-guide.txt:293
#: ../../releases/1.0-porting-guide.txt:310
#: ../../releases/1.0-porting-guide.txt:382
#: ../../releases/1.0-porting-guide.txt:741
msgid "Old (0.96)"
msgstr ""

# f3d13f692c4e4ef2a1929f6da2dae967
# ef5c67ee7e164d38873b74b44f16debd
# 93cc0fbf118b4842a1252871afb29b37
# 04abe9aee3934b58a1120f778c3bca19
#: ../../releases/1.0-porting-guide.txt:293
#: ../../releases/1.0-porting-guide.txt:310
#: ../../releases/1.0-porting-guide.txt:382
#: ../../releases/1.0-porting-guide.txt:741
msgid "New (1.0)"
msgstr ""

# 7b8c5b7f9b294c19a091e0a3c0f9e110
#: ../../releases/1.0-porting-guide.txt:295
msgid "``f['content']``"
msgstr ""

# f1f78083f0b84a9bbc46d9e266d5707b
#: ../../releases/1.0-porting-guide.txt:295
msgid "``f.read()``"
msgstr ""

# c773e754465a4edea5e25d900c7ddd2d
#: ../../releases/1.0-porting-guide.txt:296
msgid "``f['filename']``"
msgstr ""

# b034921cf83d42e88226c51a32dc57c3
#: ../../releases/1.0-porting-guide.txt:296
msgid "``f.name``"
msgstr ""

# e0abc4d9c0e740a4823afe6347854893
#: ../../releases/1.0-porting-guide.txt:297
msgid "``f['content-type']``"
msgstr ""

# 45dcc112fe1a436aaa96e6f87366d07d
#: ../../releases/1.0-porting-guide.txt:297
msgid "``f.content_type``"
msgstr ""

# 28768c31af4d48b9ad04952fd28da1d5
#: ../../releases/1.0-porting-guide.txt:301
msgid "Work with file fields using the new API"
msgstr ""

# a1462b77f4754a7f8dc5f4332b58524b
#: ../../releases/1.0-porting-guide.txt:303
msgid ""
"The internal implementation of :class:`django.db.models.FileField` have "
"changed. A visible result of this is that the way you access special "
"attributes (URL, filename, image size, etc) of these model fields has "
"changed. You will need to make the following changes, assuming your model's :"
"class:`~django.db.models.FileField` is called ``myfile``:"
msgstr ""

# 2d871b44454d4d2790772b977f92b1fc
#: ../../releases/1.0-porting-guide.txt:312
msgid "``myfile.get_content_filename()``"
msgstr ""

# 61ac9e8514bf43658dc963b7a2df912e
#: ../../releases/1.0-porting-guide.txt:312
msgid "``myfile.content.path``"
msgstr ""

# e20ef4dc83254ef4a971baad4d5b2929
#: ../../releases/1.0-porting-guide.txt:313
msgid "``myfile.get_content_url()``"
msgstr ""

# c65110bc1b114733a06b027efb20d7cf
#: ../../releases/1.0-porting-guide.txt:313
msgid "``myfile.content.url``"
msgstr ""

# 39613669805c4e55a3509e7d92efe3be
#: ../../releases/1.0-porting-guide.txt:314
msgid "``myfile.get_content_size()``"
msgstr ""

# a838da6a2c974609bdfe7d7f407a18a1
#: ../../releases/1.0-porting-guide.txt:314
msgid "``myfile.content.size``"
msgstr ""

# 11c09667f90248ed9db60dd512317c1f
#: ../../releases/1.0-porting-guide.txt:315
msgid "``myfile.save_content_file()``"
msgstr ""

# 525b1e89eb674527bf0655254edd1285
#: ../../releases/1.0-porting-guide.txt:315
msgid "``myfile.content.save()``"
msgstr ""

# aad6fb218f784efe89d0f6a95bfce61a
#: ../../releases/1.0-porting-guide.txt:316
msgid "``myfile.get_content_width()``"
msgstr ""

# b4aa2ce2fbdd4448aa43e665fc6ab364
#: ../../releases/1.0-porting-guide.txt:316
msgid "``myfile.content.width``"
msgstr ""

# 6f9a4abf30e84a2eb084a4270d4e244b
#: ../../releases/1.0-porting-guide.txt:317
msgid "``myfile.get_content_height()``"
msgstr ""

# 2541f4a0ebde491fb97877a13d956b7b
#: ../../releases/1.0-porting-guide.txt:317
msgid "``myfile.content.height``"
msgstr ""

# f8f6fe60b50b41eda479880005140d60
#: ../../releases/1.0-porting-guide.txt:320
msgid ""
"Note that the ``width`` and ``height`` attributes only make sense for :class:"
"`~django.db.models.ImageField` fields. More details can be found in the :doc:"
"`model API </ref/models/fields>` documentation."
msgstr ""

# 745a0efc2db5433b99562db4182bb2c5
#: ../../releases/1.0-porting-guide.txt:325
msgid "Use ``Paginator`` instead of ``ObjectPaginator``"
msgstr ""

# 80c195813bb84768aa86f76459898f3c
#: ../../releases/1.0-porting-guide.txt:327
msgid ""
"The ``ObjectPaginator`` in 0.96 has been removed and replaced with an "
"improved version, :class:`django.core.paginator.Paginator`."
msgstr ""

# dc3f8211596f48db92cb9ac479f50f0f
#: ../../releases/1.0-porting-guide.txt:331
msgid "Templates"
msgstr ""

# dc91127eef454b86b42e6af7c684a420
#: ../../releases/1.0-porting-guide.txt:334
msgid "Learn to love autoescaping"
msgstr ""

# 7d80979903954a4c8a128d5cad9f2f2f
#: ../../releases/1.0-porting-guide.txt:336
msgid ""
"By default, the template system now automatically HTML-escapes the output of "
"every variable. To learn more, see :ref:`automatic-html-escaping`."
msgstr ""

# fe4ffc3ffdc74408a29ecdc7aa525343
#: ../../releases/1.0-porting-guide.txt:339
msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe` "
"filter:"
msgstr ""

# 21d4301b27c34b8093a18c01df739656
#: ../../releases/1.0-porting-guide.txt:347
msgid ""
"To disable auto-escaping for an entire template, wrap the template (or just "
"a particular section of the template) in the :ttag:`autoescape` tag:"
msgstr ""

# 0beea0d5e0834fef94b6b33033a0137c
#: ../../releases/1.0-porting-guide.txt:357
msgid "Less-common changes"
msgstr ""

# 07ffe7247b89449dade2786b15de6724
#: ../../releases/1.0-porting-guide.txt:359
msgid ""
"The following changes are smaller, more localized changes. They should only "
"affect more advanced users, but it's probably worth reading through the list "
"and checking your code for these things."
msgstr ""

# b163d411e1fe418096d40b9b16bf0910
#: ../../releases/1.0-porting-guide.txt:364
msgid "Signals"
msgstr ""

# 87da45912ec34e7ab43caf30aed817ee
#: ../../releases/1.0-porting-guide.txt:366
msgid "Add ``**kwargs`` to any registered signal handlers."
msgstr ""

# de67e6a2d46a46daaaa50e3e3fc2bfd9
#: ../../releases/1.0-porting-guide.txt:368
msgid ""
"Connect, disconnect, and send signals via methods on the :class:`~django."
"dispatch.Signal` object instead of through module methods in ``django."
"dispatch.dispatcher``."
msgstr ""

# 144d307b5a6f436f8f7421ab3e2a3d0a
#: ../../releases/1.0-porting-guide.txt:372
msgid ""
"Remove any use of the ``Anonymous`` and ``Any`` sender options; they no "
"longer exist. You can still receive signals sent by any sender by using "
"``sender=None``"
msgstr ""

# 35813d2e7c1845b19a66771893978d46
#: ../../releases/1.0-porting-guide.txt:376
msgid ""
"Make any custom signals you've declared into instances of :class:`django."
"dispatch.Signal` instead of anonymous objects."
msgstr ""

# f8414bceb19b4d098c05e709f7fd2280
#: ../../releases/1.0-porting-guide.txt:379
msgid "Here's quick summary of the code changes you'll need to make:"
msgstr ""

# 943b65ca3b734f1e91e85a8497e4069d
#: ../../releases/1.0-porting-guide.txt:384
msgid "``def callback(sender)``"
msgstr ""

# cb93427800af4595b360a230df24ff30
#: ../../releases/1.0-porting-guide.txt:384
msgid "``def callback(sender, **kwargs)``"
msgstr ""

# 8aae82735fcf4b09bf3e2d03591b1305
#: ../../releases/1.0-porting-guide.txt:385
msgid "``sig = object()``"
msgstr ""

# 6a711029f94a483fb3a47f953eb02212
#: ../../releases/1.0-porting-guide.txt:385
msgid "``sig = django.dispatch.Signal()``"
msgstr ""

# e59428937c5246f594607a7bd4a79b03
#: ../../releases/1.0-porting-guide.txt:386
msgid "``dispatcher.connect(callback, sig)``"
msgstr ""

# 6c69f640410648d3bc4bfe0c4d28373d
#: ../../releases/1.0-porting-guide.txt:386
msgid "``sig.connect(callback)``"
msgstr ""

# 83673b9363e149afa604cb4172774e32
#: ../../releases/1.0-porting-guide.txt:387
msgid "``dispatcher.send(sig, sender)``"
msgstr ""

# e049d1a1b87549a2815c8165141a395b
#: ../../releases/1.0-porting-guide.txt:387
msgid "``sig.send(sender)``"
msgstr ""

# c18e546d7cee4fa085408309da8fe40f
#: ../../releases/1.0-porting-guide.txt:388
msgid "``dispatcher.connect(callback, sig, sender=Any)``"
msgstr ""

# a55c6da6cd774e22a52e01ead6d52034
#: ../../releases/1.0-porting-guide.txt:388
msgid "``sig.connect(callback, sender=None)``"
msgstr ""

# 8398247bdbfa491a964ddb15bfc5ae71
#: ../../releases/1.0-porting-guide.txt:392
msgid "Comments"
msgstr ""

# 6754c480224648ff83daece65b271264
#: ../../releases/1.0-porting-guide.txt:394
msgid ""
"If you were using Django 0.96's ``django.contrib.comments`` app, you'll need "
"to upgrade to the new comments app introduced in 1.0. See the upgrade guide "
"for details."
msgstr ""

# 8c83c1d04f15432284eccdb23a46fdc1
#: ../../releases/1.0-porting-guide.txt:399
msgid "Template tags"
msgstr ""

# 3ea3882ad5c943aa9ec0353efd176ea1
#: ../../releases/1.0-porting-guide.txt:402
msgid ":ttag:`spaceless` tag"
msgstr ""

# 1a7c7abde4844cc493f3715034ee18da
#: ../../releases/1.0-porting-guide.txt:404
msgid ""
"The spaceless template tag now removes *all* spaces between HTML tags, "
"instead of preserving a single space."
msgstr ""

# 482d3dadca3b4c54bec64eefc27493b2
#: ../../releases/1.0-porting-guide.txt:408
msgid "Local flavors"
msgstr ""

# 159ac975bb6d4194b99e7cafae678363
#: ../../releases/1.0-porting-guide.txt:411
msgid "U.S. local flavor"
msgstr ""

# 335bffe90cca4df5acdfa45f8a753278
#: ../../releases/1.0-porting-guide.txt:413
msgid ""
"``django.contrib.localflavor.usa`` has been renamed to ``django.contrib."
"localflavor.us``. This change was made to match the naming scheme of other "
"local flavors. To migrate your code, all you need to do is change the "
"imports."
msgstr ""

# dd44fcf5166c47a7a77b42cf6f2b8f76
#: ../../releases/1.0-porting-guide.txt:419
msgid "Sessions"
msgstr ""

# 15807f9b79b341b682481627d11b30a6
#: ../../releases/1.0-porting-guide.txt:422
msgid "Getting a new session key"
msgstr ""

# d9c0246a52804287a0ab01c56b6d7457
#: ../../releases/1.0-porting-guide.txt:424
msgid ""
"``SessionBase.get_new_session_key()`` has been renamed to "
"``_get_new_session_key()``. ``get_new_session_object()`` no longer exists."
msgstr ""

# c8df2710461848e08e1d9d0a99db6822
#: ../../releases/1.0-porting-guide.txt:428
msgid "Fixtures"
msgstr ""

# 63c7e77778d44ca3bcb88788356ee97a
#: ../../releases/1.0-porting-guide.txt:431
msgid "Loading a row no longer calls ``save()``"
msgstr ""

# c0cfc748553541f6b969789775627111
#: ../../releases/1.0-porting-guide.txt:433
msgid ""
"Previously, loading a row automatically ran the model's ``save()`` method. "
"This is no longer the case, so any fields (for example: timestamps) that "
"were auto-populated by a ``save()`` now need explicit values in any fixture."
msgstr ""

# 7b25c004258b4021b877c4ee92e1c661
#: ../../releases/1.0-porting-guide.txt:438
msgid "Settings"
msgstr ""

# 0ce6c1a9d4064240a47b043ec848c815
#: ../../releases/1.0-porting-guide.txt:441
msgid "Better exceptions"
msgstr ""

# 0c27a2773e74423ca97993776ad23228
#: ../../releases/1.0-porting-guide.txt:443
msgid ""
"The old :exc:`~exceptions.EnvironmentError` has split into an :exc:"
"`~exceptions.ImportError` when Django fails to find the settings module and "
"a :exc:`~exceptions.RuntimeError` when you try to reconfigure settings after "
"having already used them."
msgstr ""

# 78d5c0ee63dd4a9da57a1d3713c07093
#: ../../releases/1.0-porting-guide.txt:449
msgid ":setting:`LOGIN_URL` has moved"
msgstr ""

# e1ee849ec5a743cebfc619dab4cfd52e
#: ../../releases/1.0-porting-guide.txt:451
msgid ""
"The :setting:`LOGIN_URL` constant moved from ``django.contrib.auth`` into "
"the ``settings`` module. Instead of using ``from django.contrib.auth import "
"LOGIN_URL`` refer to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

# 8a5a531617014d8095a7ef62bcfa5841
#: ../../releases/1.0-porting-guide.txt:456
msgid ":setting:`APPEND_SLASH` behavior has been updated"
msgstr ""

# 639caaaec3954034be58f5a4da0cf454
#: ../../releases/1.0-porting-guide.txt:458
msgid ""
"In 0.96, if a URL didn't end in a slash or have a period in the final "
"component of its path, and :setting:`APPEND_SLASH` was True, Django would "
"redirect to the same URL, but with a slash appended to the end. Now, Django "
"checks to see whether the pattern without the trailing slash would be "
"matched by something in your URL patterns. If so, no redirection takes "
"place, because it is assumed you deliberately wanted to catch that pattern."
msgstr ""

# b63753748a3b4760b4ce621a6a736e28
#: ../../releases/1.0-porting-guide.txt:465
msgid ""
"For most people, this won't require any changes. Some people, though, have "
"URL patterns that look like this::"
msgstr ""

# b3ee4cbfd2584b48972b17b3587caadc
#: ../../releases/1.0-porting-guide.txt:470
msgid ""
"Previously, those patterns would have been redirected to have a trailing "
"slash. If you always want a slash on such URLs, rewrite the pattern as::"
msgstr ""

# 71de81ded39746c2aded4194e2be9528
#: ../../releases/1.0-porting-guide.txt:476
msgid "Smaller model changes"
msgstr ""

# e1402bdd87444777bb585959c2c00d12
#: ../../releases/1.0-porting-guide.txt:479
msgid "Different exception from ``get()``"
msgstr ""

# 92c77fec4cd74b49adf1a60fdf782caf
#: ../../releases/1.0-porting-guide.txt:481
msgid ""
"Managers now return a :exc:`~django.core.exceptions.MultipleObjectsReturned` "
"exception instead of :exc:`~exceptions.AssertionError`:"
msgstr ""

# 414e2d8c6060467786d96fa76b713a4b
#: ../../releases/1.0-porting-guide.txt:499
msgid "``LazyDate`` has been fired"
msgstr ""

# 94373c340f9d410d84b4e395f48af215
#: ../../releases/1.0-porting-guide.txt:501
msgid "The ``LazyDate`` helper class no longer exists."
msgstr ""

# 8007db6c86304c60aa5e89381bd20aed
#: ../../releases/1.0-porting-guide.txt:503
msgid ""
"Default field values and query arguments can both be callable objects, so "
"instances of ``LazyDate`` can be replaced with a reference to ``datetime."
"datetime.now``:"
msgstr ""

# de2a33589bb54295a037308a2b5e60f8
#: ../../releases/1.0-porting-guide.txt:521
msgid "``DecimalField`` is new, and ``FloatField`` is now a proper float"
msgstr ""

# 61e6859d68094afdbdee72503bc37e4f
#: ../../releases/1.0-porting-guide.txt:535
msgid ""
"If you forget to make this change, you will see errors about ``FloatField`` "
"not taking a ``max_digits`` attribute in ``__init__``, because the new "
"``FloatField`` takes no precision-related arguments."
msgstr ""

# a208437df1194fd18c7ae77f466b6914
#: ../../releases/1.0-porting-guide.txt:539
msgid ""
"If you're using MySQL or PostgreSQL, no further changes are needed. The "
"database column types for ``DecimalField`` are the same as for the old "
"``FloatField``."
msgstr ""

# 9a624334be9d46c2bc3b571fcd9b2b7a
#: ../../releases/1.0-porting-guide.txt:543
msgid ""
"If you're using SQLite, you need to force the database to view the "
"appropriate columns as decimal types, rather than floats. To do this, you'll "
"need to reload your data. Do this after you have made the change to using "
"``DecimalField`` in your code and updated the Django code."
msgstr ""

# 45025d6d67a04bf6afdbe747692a8abd
#: ../../releases/1.0-porting-guide.txt:550
msgid "**Back up your database first!**"
msgstr ""

# aa2274f8c74c45a8b6dddef93d655065
#: ../../releases/1.0-porting-guide.txt:552
msgid ""
"For SQLite, this means making a copy of the single file that stores the "
"database (the name of that file is the ``DATABASE_NAME`` in your settings.py "
"file)."
msgstr ""

# 376678be99314cee907fdb88ce78858d
#: ../../releases/1.0-porting-guide.txt:556
msgid ""
"To upgrade each application to use a ``DecimalField``, you can do the "
"following, replacing ``<app>`` in the code below with each app's name:"
msgstr ""

# 33bd692131c54494a15bfa000e19c858
#: ../../releases/1.0-porting-guide.txt:565
msgid "Notes:"
msgstr ""

# d3cf87e5172b42899df15acfa89c5215
#: ../../releases/1.0-porting-guide.txt:567
msgid ""
"It's important that you remember to use XML format in the first step of this "
"process. We are exploiting a feature of the XML data dumps that makes "
"porting floats to decimals with SQLite possible."
msgstr ""

# 7348215c3bbb4bd9b6c2238f1e91ad69
#: ../../releases/1.0-porting-guide.txt:571
msgid ""
"In the second step you will be asked to confirm that you are prepared to "
"lose the data for the application(s) in question. Say yes; we'll restore "
"this data in the third step, of course."
msgstr ""

# fa193501e0d54833bc993e57af0efb90
#: ../../releases/1.0-porting-guide.txt:575
msgid ""
"``DecimalField`` is not used in any of the apps shipped with Django prior to "
"this change being made, so you do not need to worry about performing this "
"procedure for any of the standard Django models."
msgstr ""

# b44f581881db452387b20a8d76094b8e
#: ../../releases/1.0-porting-guide.txt:579
msgid ""
"If something goes wrong in the above process, just copy your backed up "
"database file over the original file and start again."
msgstr ""

# 7748503d7279486aae5006eb9d1802ff
#: ../../releases/1.0-porting-guide.txt:583
msgid "Internationalization"
msgstr ""

# 5b6783b253b44fdca7f0ea1ea5628fff
#: ../../releases/1.0-porting-guide.txt:586
msgid ":func:`django.views.i18n.set_language` now requires a POST request"
msgstr ""

# 8683dd68d5c24deda96c3eff175abfe3
#: ../../releases/1.0-porting-guide.txt:588
msgid ""
"Previously, a GET request was used. The old behavior meant that state (the "
"locale used to display the site) could be changed by a GET request, which is "
"against the HTTP specification's recommendations. Code calling this view "
"must ensure that a POST request is now made, instead of a GET. This means "
"you can no longer use a link to access the view, but must use a form "
"submission of some kind (e.g. a button)."
msgstr ""

# fe3e2042e13f4fb1b13664fe6a81df29
#: ../../releases/1.0-porting-guide.txt:596
msgid "``_()`` is no longer in builtins"
msgstr ""

# b30449d711f14894a162412cc8ef49fa
#: ../../releases/1.0-porting-guide.txt:598
msgid ""
"``_()`` (the callable object whose name is a single underscore) is no longer "
"monkeypatched into builtins -- that is, it's no longer available magically "
"in every module."
msgstr ""

# 780ffbe02c254485b70f5ce4782ffc0a
#: ../../releases/1.0-porting-guide.txt:602
msgid ""
"If you were previously relying on ``_()`` always being present, you should "
"now explicitly import ``ugettext`` or ``ugettext_lazy``, if appropriate, and "
"alias it to ``_`` yourself::"
msgstr ""

# 3bd5c8bff3bf40fba3bc37ff21604e65
#: ../../releases/1.0-porting-guide.txt:609
msgid "HTTP request/response objects"
msgstr ""

# 46286a58d7f2498191da51c3d044e1ed
#: ../../releases/1.0-porting-guide.txt:612
msgid "Dictionary access to ``HttpRequest``"
msgstr ""

# 73d2e32896ce4316bf00aa5cb0b197d8
#: ../../releases/1.0-porting-guide.txt:614
msgid ""
"``HttpRequest`` objects no longer directly support dictionary-style access; "
"previously, both ``GET`` and ``POST`` data were directly available on the "
"``HttpRequest`` object (e.g., you could check for a piece of form data by "
"using ``if 'some_form_key' in request`` or by reading "
"``request['some_form_key']``. This is no longer supported; if you need "
"access to the combined ``GET`` and ``POST`` data, use ``request.REQUEST`` "
"instead."
msgstr ""

# 425eacb7c37942c1ace3ccd024be9eb0
#: ../../releases/1.0-porting-guide.txt:622
msgid ""
"It is strongly suggested, however, that you always explicitly look in the "
"appropriate dictionary for the type of request you expect to receive "
"(``request.GET`` or ``request.POST``); relying on the combined ``request."
"REQUEST`` dictionary can mask the origin of incoming data."
msgstr ""

# c76a6374c121425c9470abdaa0e3f0a7
#: ../../releases/1.0-porting-guide.txt:628
msgid "Accessing ``HTTPResponse`` headers"
msgstr ""

# c24a6d1831cf489396583674cfe34b7d
#: ../../releases/1.0-porting-guide.txt:630
msgid ""
"``django.http.HttpResponse.headers`` has been renamed to ``_headers`` and :"
"class:`~django.http.HttpResponse` now supports containment checking "
"directly. So use ``if header in response:`` instead of ``if header in "
"response.headers:``."
msgstr ""

# 15abbf34eac5436d905f4521ea718399
#: ../../releases/1.0-porting-guide.txt:635
msgid "Generic relations"
msgstr ""

# def139bd3d484f1e902ff98a028a7216
#: ../../releases/1.0-porting-guide.txt:638
msgid "Generic relations have been moved out of core"
msgstr ""

# bed740c4e56b4b6aa8a436da30ae4aae
#: ../../releases/1.0-porting-guide.txt:640
msgid ""
"The generic relation classes -- ``GenericForeignKey`` and "
"``GenericRelation`` -- have moved into the :mod:`django.contrib."
"contenttypes` module."
msgstr ""

# e1eb543cc1134af982079a9a00073f85
#: ../../releases/1.0-porting-guide.txt:644
msgid "Testing"
msgstr ""

# e9c59dd75cf442dfb7f1700f3bcd4389
#: ../../releases/1.0-porting-guide.txt:647
msgid ":meth:`django.test.client.Client.login` has changed"
msgstr ""

# 3335488bcd414e528f263fc56a909ba7
#: ../../releases/1.0-porting-guide.txt:661
msgid "Management commands"
msgstr ""

# 96821421281c456eb3102191f42bf298
#: ../../releases/1.0-porting-guide.txt:664
msgid "Running management commands from your code"
msgstr ""

# ce5bbd6c5367407fbc168af411323ef4
#: ../../releases/1.0-porting-guide.txt:666
msgid ":mod:`django.core.management` has been greatly refactored."
msgstr ""

# 3c00945cb6724a479caf0b0aae2d03c2
#: ../../releases/1.0-porting-guide.txt:668
msgid ""
"Calls to management services in your code now need to use ``call_command``. "
"For example, if you have some test code that calls flush and load_data::"
msgstr ""

# 247d1c76481f42f3a21d6010775b808f
#: ../../releases/1.0-porting-guide.txt:676
msgid "...you'll need to change this code to read::"
msgstr ""

# ffa3f2243f714bb0a90ef9d9d205b10b
#: ../../releases/1.0-porting-guide.txt:683
msgid "Subcommands must now precede options"
msgstr ""

# 123eddb856df4b8a8f2ddbe8109c797b
#: ../../releases/1.0-porting-guide.txt:685
msgid ""
"``django-admin.py`` and ``manage.py`` now require subcommands to precede "
"options. So:"
msgstr ""

# b73505fb61314f70a3bc8d661b2d9922
#: ../../releases/1.0-porting-guide.txt:692
msgid "...no longer works and should be changed to:"
msgstr ""

# 5ab73658966842048a6e86a33512c84d
#: ../../releases/1.0-porting-guide.txt:699
msgid "Syndication"
msgstr ""

# 7605e4e99ba94cf488db73768241f5f1
#: ../../releases/1.0-porting-guide.txt:702
msgid "``Feed.__init__`` has changed"
msgstr ""

# 9512f9f9b7f84648b96b4cdd5193f647
#: ../../releases/1.0-porting-guide.txt:704
msgid ""
"The ``__init__()`` method of the syndication framework's ``Feed`` class now "
"takes an ``HttpRequest`` object as its second parameter, instead of the "
"feed's URL. This allows the syndication framework to work without requiring "
"the sites framework. This only affects code that subclasses ``Feed`` and "
"overrides the ``__init__()`` method, and code that calls ``Feed.__init__()`` "
"directly."
msgstr ""

# 01685457d7b3493fba518afc7e590523
#: ../../releases/1.0-porting-guide.txt:711
msgid "Data structures"
msgstr ""

# 857ecdd501494df2a6a15082a5274af4
#: ../../releases/1.0-porting-guide.txt:714
msgid "``SortedDictFromList`` is gone"
msgstr ""

# cfff4eda3d894a5dafee7c0072029bd6
#: ../../releases/1.0-porting-guide.txt:716
msgid ""
"``django.newforms.forms.SortedDictFromList`` was removed. :class:`django."
"utils.datastructures.SortedDict` can now be instantiated with a sequence of "
"tuples."
msgstr ""

# 0e3cfeb6d17c4ed8a69fc73f12ea84f4
#: ../../releases/1.0-porting-guide.txt:720
msgid "To update your code:"
msgstr ""

# 0d472813c29348199004b090556f54c2
#: ../../releases/1.0-porting-guide.txt:722
msgid ""
"Use :class:`django.utils.datastructures.SortedDict` wherever you were using "
"``django.newforms.forms.SortedDictFromList``."
msgstr ""

# ebb4fe35f63f48439db1fec7b54a22b9
#: ../../releases/1.0-porting-guide.txt:725
msgid ""
"Because ``django.utils.datastructures.SortedDict.copy`` doesn't return a "
"deepcopy as ``SortedDictFromList.copy()`` did, you will need to update your "
"code if you were relying on a deepcopy. Do this by using ``copy.deepcopy`` "
"directly."
msgstr ""

# 6ffbb708b454465cb1343a5cf85ce9d1
#: ../../releases/1.0-porting-guide.txt:731
msgid "Database backend functions"
msgstr ""

# 00151ce5c27b4258938b908b0c8b4b12
#: ../../releases/1.0-porting-guide.txt:734
msgid "Database backend functions have been renamed"
msgstr ""

# 58bcc7f86a684b1b86ae55698ec4d213
#: ../../releases/1.0-porting-guide.txt:736
msgid ""
"Almost *all* of the database backend-level functions have been renamed and/"
"or relocated. None of these were documented, but you'll need to change your "
"code if you're using any of these functions, all of which are in :mod:"
"`django.db`:"
msgstr ""

# 1dcb4042e1134ec2b5e0998fc393d5c7
#: ../../releases/1.0-porting-guide.txt:743
msgid "``backend.get_autoinc_sql``"
msgstr ""

# 4a726fb3104e4e68908e44892786d478
#: ../../releases/1.0-porting-guide.txt:743
msgid "``connection.ops.autoinc_sql``"
msgstr ""

# e9aeafc49ddd42fbb362b809d79f7f65
#: ../../releases/1.0-porting-guide.txt:744
msgid "``backend.get_date_extract_sql``"
msgstr ""

# 3360219cbb274612a8dc153d76ed2642
#: ../../releases/1.0-porting-guide.txt:744
msgid "``connection.ops.date_extract_sql``"
msgstr ""

# 8e5d892b254c427b9a33540d724cf328
#: ../../releases/1.0-porting-guide.txt:745
msgid "``backend.get_date_trunc_sql``"
msgstr ""

# cf21064cecae41e6a1c89f44a6bd023c
#: ../../releases/1.0-porting-guide.txt:745
msgid "``connection.ops.date_trunc_sql``"
msgstr ""

# 3bf5272fbb4743af8daac01ff0953088
#: ../../releases/1.0-porting-guide.txt:746
msgid "``backend.get_datetime_cast_sql``"
msgstr ""

# aac42e044de242349381a387f9bf34cd
#: ../../releases/1.0-porting-guide.txt:746
msgid "``connection.ops.datetime_cast_sql``"
msgstr ""

# 38340583f8f84096a5b13ea79aa2c9f0
#: ../../releases/1.0-porting-guide.txt:747
msgid "``backend.get_deferrable_sql``"
msgstr ""

# c70c051ebc4144ddaaef5dc9d566be6a
#: ../../releases/1.0-porting-guide.txt:747
msgid "``connection.ops.deferrable_sql``"
msgstr ""

# 33226ae685914466a50fe348190d50bd
#: ../../releases/1.0-porting-guide.txt:748
msgid "``backend.get_drop_foreignkey_sql``"
msgstr ""

# 3a089e8bf5c04f32a5ec38098670422b
#: ../../releases/1.0-porting-guide.txt:748
msgid "``connection.ops.drop_foreignkey_sql``"
msgstr ""

# 85f13a876de6415fa63a23ab0714072f
#: ../../releases/1.0-porting-guide.txt:749
msgid "``backend.get_fulltext_search_sql``"
msgstr ""

# 71a13d8e3103405aa143d64fa891c712
#: ../../releases/1.0-porting-guide.txt:749
msgid "``connection.ops.fulltext_search_sql``"
msgstr ""

# 1818ef9a1b7c4fe2aadaf979bde1e528
#: ../../releases/1.0-porting-guide.txt:750
msgid "``backend.get_last_insert_id``"
msgstr ""

# ddc8f6e6cfb844de8b35b91bc91b3fbb
#: ../../releases/1.0-porting-guide.txt:750
msgid "``connection.ops.last_insert_id``"
msgstr ""

# e8b94a962b094d29bcd09f29e884da3c
#: ../../releases/1.0-porting-guide.txt:751
msgid "``backend.get_limit_offset_sql``"
msgstr ""

# e36ca51b992c4ec48ed58a8d73127a96
#: ../../releases/1.0-porting-guide.txt:751
msgid "``connection.ops.limit_offset_sql``"
msgstr ""

# 063ff1addfc9460d808dd0e858b45a71
#: ../../releases/1.0-porting-guide.txt:752
msgid "``backend.get_max_name_length``"
msgstr ""

# 3f583464ff80448a80c53b50963f8d7c
#: ../../releases/1.0-porting-guide.txt:752
msgid "``connection.ops.max_name_length``"
msgstr ""

# d2356394ce4c4fe0ad9127edbba68733
#: ../../releases/1.0-porting-guide.txt:753
msgid "``backend.get_pk_default_value``"
msgstr ""

# d57857c6d10545e5a2fbebf3adf7ed9a
#: ../../releases/1.0-porting-guide.txt:753
msgid "``connection.ops.pk_default_value``"
msgstr ""

# e754b46256a84530be89af2ff151070a
#: ../../releases/1.0-porting-guide.txt:754
msgid "``backend.get_random_function_sql``"
msgstr ""

# 6b3aa8a10eca46d4a28a0e0f09fb03ec
#: ../../releases/1.0-porting-guide.txt:754
msgid "``connection.ops.random_function_sql``"
msgstr ""

# ddddb99dedcd4727bd5ed8cadc41475e
#: ../../releases/1.0-porting-guide.txt:755
msgid "``backend.get_sql_flush``"
msgstr ""

# f345bd252c65495fb6f7595fa64d3127
#: ../../releases/1.0-porting-guide.txt:755
msgid "``connection.ops.sql_flush``"
msgstr ""

# a7143ddf352b4d26844432aa20ef3d1f
#: ../../releases/1.0-porting-guide.txt:756
msgid "``backend.get_sql_sequence_reset``"
msgstr ""

# 0f5daabd313c4f3d98deca0efd2752d7
#: ../../releases/1.0-porting-guide.txt:756
msgid "``connection.ops.sequence_reset_sql``"
msgstr ""

# 6cf047b97b0d4acd97828e5b4fef57fb
#: ../../releases/1.0-porting-guide.txt:757
msgid "``backend.get_start_transaction_sql``"
msgstr ""

# 7820044bdce54288aaee474297464577
#: ../../releases/1.0-porting-guide.txt:757
msgid "``connection.ops.start_transaction_sql``"
msgstr ""

# 7229e077f1304c11a8237c3f0f115f6b
#: ../../releases/1.0-porting-guide.txt:758
msgid "``backend.get_tablespace_sql``"
msgstr ""

# cd928e1d9c1649c3a229e309c7070d68
#: ../../releases/1.0-porting-guide.txt:758
msgid "``connection.ops.tablespace_sql``"
msgstr ""

# c27c8049ee784ae9a4e963a2459f347f
#: ../../releases/1.0-porting-guide.txt:759
msgid "``backend.quote_name``"
msgstr ""

# c052af50ccb54846a363033e37642332
#: ../../releases/1.0-porting-guide.txt:759
msgid "``connection.ops.quote_name``"
msgstr ""

# a859554fea514674bcdc9351f25f593b
#: ../../releases/1.0-porting-guide.txt:760
msgid "``backend.get_query_set_class``"
msgstr ""

# 44c383a461c84edebf969ad3d2e0ad8f
#: ../../releases/1.0-porting-guide.txt:760
msgid "``connection.ops.query_set_class``"
msgstr ""

# ff0ec72ab66f486fb47510ac30d45e6f
#: ../../releases/1.0-porting-guide.txt:761
msgid "``backend.get_field_cast_sql``"
msgstr ""

# f55f1293f3844e8589a9e2bd6d3c5c24
#: ../../releases/1.0-porting-guide.txt:761
msgid "``connection.ops.field_cast_sql``"
msgstr ""

# eafc27dc6b994c4887da889cfb3a2c9a
#: ../../releases/1.0-porting-guide.txt:762
msgid "``backend.get_drop_sequence``"
msgstr ""

# c607a19ed7a947c088cbfc8869e04e9e
#: ../../releases/1.0-porting-guide.txt:762
msgid "``connection.ops.drop_sequence_sql``"
msgstr ""

# 36aa362ce91346b4a4bc82897876bc08
#: ../../releases/1.0-porting-guide.txt:763
msgid "``backend.OPERATOR_MAPPING``"
msgstr ""

# 9b345e5e6c7c43f5aaee00f290113ddf
#: ../../releases/1.0-porting-guide.txt:763
msgid "``connection.operators``"
msgstr ""

# e69c3b414ab440e39983b1a3a2f4d4f9
#: ../../releases/1.0-porting-guide.txt:764
msgid "``backend.allows_group_by_ordinal``"
msgstr ""

# 13d57ce0299c437abb453c6635c61444
#: ../../releases/1.0-porting-guide.txt:764
msgid "``connection.features.allows_group_by_ordinal``"
msgstr ""

# db1d0bdbf64d4448a8db83a4c9963846
#: ../../releases/1.0-porting-guide.txt:765
msgid "``backend.allows_unique_and_pk``"
msgstr ""

# caa2f683efd24744b5087f64d142037b
#: ../../releases/1.0-porting-guide.txt:765
msgid "``connection.features.allows_unique_and_pk``"
msgstr ""

# 9ad97546405b4a4397d2f99cb6e61edc
#: ../../releases/1.0-porting-guide.txt:766
msgid "``backend.autoindexes_primary_keys``"
msgstr ""

# 5345a82e580f45678d59272733a88250
#: ../../releases/1.0-porting-guide.txt:766
msgid "``connection.features.autoindexes_primary_keys``"
msgstr ""

# 68b35e5331594803ac72dd40aa1465b6
#: ../../releases/1.0-porting-guide.txt:767
msgid "``backend.needs_datetime_string_cast``"
msgstr ""

# 69252e4469ae49f9967816f95fb1d6fe
#: ../../releases/1.0-porting-guide.txt:767
msgid "``connection.features.needs_datetime_string_cast``"
msgstr ""

# bc78b739be99410cac313a8395ad287d
#: ../../releases/1.0-porting-guide.txt:768
msgid "``backend.needs_upper_for_iops``"
msgstr ""

# 0f2643b297c64917b4e8fee4a20c21eb
#: ../../releases/1.0-porting-guide.txt:768
msgid "``connection.features.needs_upper_for_iops``"
msgstr ""

# cf6ce1745a6a4233a2c5579d2954b8ae
#: ../../releases/1.0-porting-guide.txt:769
msgid "``backend.supports_constraints``"
msgstr ""

# b10b022bd3ef41a4b29645c95f39e8f6
#: ../../releases/1.0-porting-guide.txt:769
msgid "``connection.features.supports_constraints``"
msgstr ""

# 0c7c8d16aa5444e499b78e7a33bac7fa
#: ../../releases/1.0-porting-guide.txt:770
msgid "``backend.supports_tablespaces``"
msgstr ""

# 5d5ee793409c4b3b88acf3c11f3900a2
#: ../../releases/1.0-porting-guide.txt:770
msgid "``connection.features.supports_tablespaces``"
msgstr ""

# 52beb6fd69064bc2aea8871a8cf7f544
#: ../../releases/1.0-porting-guide.txt:771
msgid "``backend.uses_case_insensitive_names``"
msgstr ""

# ef3783e24f15450ab7424d4a77721bbc
#: ../../releases/1.0-porting-guide.txt:771
msgid "``connection.features.uses_case_insensitive_names``"
msgstr ""

# c29fd73fa0e848a8ad52395422ac3210
#: ../../releases/1.0-porting-guide.txt:772
msgid "``backend.uses_custom_queryset``"
msgstr ""

# 2186f1a1689d4c608a6e1accc67af323
#: ../../releases/1.0-porting-guide.txt:772
msgid "``connection.features.uses_custom_queryset``"
msgstr ""

# f018c6c8b88b490f814eb5b48525cb5f
#: ../../releases/1.0.1.txt:3
msgid "Django 1.0.1 release notes"
msgstr ""

# 0e10d68a606844d680925cb23170fb95
#: ../../releases/1.0.1.txt:5
msgid "Welcome to Django 1.0.1!"
msgstr ""

# ddf96ee9734b44cd9dc38b30f9ed264b
#: ../../releases/1.0.1.txt:7
msgid ""
"This is the first \"bugfix\" release in the Django 1.0 series, improving the "
"stability and performance of the Django 1.0 codebase. As such, Django 1.0.1 "
"contains no new features (and, pursuant to :doc:`our compatibility policy </"
"misc/api-stability/>`, maintains backwards compatibility with Django 1.0), "
"but does contain a number of fixes and other improvements. Django 1.0.1 is a "
"recommended upgrade for any development or deployment currently using or "
"targeting Django 1.0."
msgstr ""

# 065575ac081f42ccaf700bb438304e72
#: ../../releases/1.0.1.txt:17
msgid "Fixes and improvements in Django 1.0.1"
msgstr ""

# 3eb84d433b1241d3b3bd16c45f093015
#: ../../releases/1.0.1.txt:19
msgid ""
"Django 1.0.1 contains over two hundred fixes to the original Django 1.0 "
"codebase; full details of every fix are available in `the history of the 1.0."
"X branch`_, but here are some of the highlights:"
msgstr ""

# e7fef1449aa144f4af78b3118c37a1a6
#: ../../releases/1.0.1.txt:24
msgid ""
"Several fixes in ``django.contrib.comments``, pertaining to RSS feeds of "
"comments, default ordering of comments and the XHTML and "
"internationalization of the default templates for comments."
msgstr ""

# 9ab3cea7f15d4efbb662994c95243232
#: ../../releases/1.0.1.txt:28
msgid ""
"Multiple fixes for Django's support of Oracle databases, including "
"pagination support for GIS QuerySets, more efficient slicing of results and "
"improved introspection of existing databases."
msgstr ""

# ee5883c1dbf141f7b8846effb5e723f9
#: ../../releases/1.0.1.txt:32
msgid ""
"Several fixes for query support in the Django object-relational mapper, "
"including repeated setting and resetting of ordering and fixes for working "
"with ``INSERT``-only queries."
msgstr ""

# 184d41c9166446ad95eae10d020ebc96
#: ../../releases/1.0.1.txt:36
msgid "Multiple fixes for inline forms in formsets."
msgstr ""

# 5c254c1f1df74456920d96cb7d807d8c
#: ../../releases/1.0.1.txt:38
msgid ""
"Multiple fixes for ``unique`` and ``unique_together`` model constraints in "
"automatically-generated forms."
msgstr ""

# d8fd98c570dd4b05836153e9c577d219
#: ../../releases/1.0.1.txt:41
msgid ""
"Fixed support for custom callable ``upload_to`` declarations when handling "
"file uploads through automatically-generated forms."
msgstr ""

# b2420b4b0e1b4b5ebc6d4fd51b1e0921
#: ../../releases/1.0.1.txt:44
msgid ""
"Fixed support for sorting an admin change list based on a callable "
"attributes in ``list_display``."
msgstr ""

# 981c35448e684ef385a4b74473420a10
#: ../../releases/1.0.1.txt:47
msgid ""
"A fix to the application of autoescaping for literal strings passed to the "
"``join`` template filter. Previously, literal strings passed to ``join`` "
"were automatically escaped, contrary to :ref:`the documented behavior for "
"autoescaping and literal strings <string-literals-and-automatic-escaping>`. "
"Literal strings passed to ``join`` are no longer automatically escaped, "
"meaning you must now manually escape them; this is an incompatibility if you "
"were relying on this bug, but not if you were relying on escaping behaving "
"as documented."
msgstr ""

# 23ecdcf81a0644be9e0fc44bba07da4c
#: ../../releases/1.0.1.txt:57
msgid ""
"Improved and expanded translation files for many of the languages Django "
"supports by default."
msgstr ""

# c8486774feda4264af2e653408427af6
#: ../../releases/1.0.1.txt:60
msgid ""
"And as always, a large number of improvements to Django's documentation, "
"including both corrections to existing documents and expanded and new "
"documentation."
msgstr ""

# 8000530f9d79436492261c7291460050
#: ../../releases/1.0.2.txt:3
msgid "Django 1.0.2 release notes"
msgstr ""

# 5e871bbc5c9849cdb792323a7a3a6f64
#: ../../releases/1.0.2.txt:5
msgid "Welcome to Django 1.0.2!"
msgstr ""

# 7086f2740db74b1faa09588f9c69df12
#: ../../releases/1.0.2.txt:7
msgid ""
"This is the second \"bugfix\" release in the Django 1.0 series, improving "
"the stability and performance of the Django 1.0 codebase. As such, Django "
"1.0.2 contains no new features (and, pursuant to :doc:`our compatibility "
"policy </misc/api-stability>`, maintains backwards compatibility with Django "
"1.0.0), but does contain a number of fixes and other improvements. Django "
"1.0.2 is a recommended upgrade for any development or deployment currently "
"using or targeting Django 1.0."
msgstr ""

# 45a758c36a5a4182804a26f707307189
#: ../../releases/1.0.2.txt:17
msgid "Fixes and improvements in Django 1.0.2"
msgstr ""

# 50ea733e1d98446fa5ccaadcb5c6ab5e
#: ../../releases/1.0.2.txt:19
msgid ""
"The primary reason behind this release is to remedy an issue in the recently-"
"released Django 1.0.1; the packaging scripts used for Django 1.0.1 omitted "
"some directories from the final release package, including one directory "
"required by ``django.contrib.gis`` and part of Django's unit-test suite."
msgstr ""

# a2e7775973514910820985df7ec58c7d
#: ../../releases/1.0.2.txt:25
msgid ""
"Django 1.0.2 contains updated packaging scripts, and the release package "
"contains the directories omitted from Django 1.0.1. As such, this release "
"contains all of the fixes and improvements from Django 1.0.1; see :doc:`the "
"Django 1.0.1 release notes </releases/1.0.1>` for details."
msgstr ""

# 40490cf8995645c29a30271f7cda17e9
#: ../../releases/1.0.2.txt:31
msgid "Additionally, in the period since Django 1.0.1 was released:"
msgstr ""

# dc3f2048489a470ea13cce31fb378f5b
#: ../../releases/1.0.2.txt:33
msgid "Updated Hebrew and Danish translations have been added."
msgstr ""

# e22fed980396454ab652f6a8f3a29e26
#: ../../releases/1.0.2.txt:35
msgid ""
"The default ``__repr__`` method of Django models has been made more robust "
"in the face of bad Unicode data coming from the ``__unicode__`` method; "
"rather than raise an exception in such cases, ``repr()`` will now contain "
"the string \"[Bad Unicode data]\" in place of the invalid Unicode."
msgstr ""

# 05fd30e9c8c14a5bb7d3926a7c3e55a5
#: ../../releases/1.0.2.txt:41
msgid ""
"A bug involving the interaction of Django's ``SafeUnicode`` class and the "
"MySQL adapter has been resolved; ``SafeUnicode`` instances (generated, for "
"example, by template rendering) can now be assigned to model attributes and "
"saved to MySQL without requiring an explicit intermediate cast to "
"``unicode``."
msgstr ""

# 53f514abf4734566bbfe6319b99e0fc6
#: ../../releases/1.0.2.txt:47
msgid ""
"A bug affecting filtering on a nullable ``DateField`` in SQLite has been "
"resolved."
msgstr ""

# 63bd60d9319f4f66b4116b9c62ca93f4
#: ../../releases/1.0.2.txt:50
msgid ""
"Several updates and improvements have been made to Django's documentation."
msgstr ""

# 7d4f254445124d2d8294b2bbb494150f
#: ../../releases/1.1.txt:3
msgid "Django 1.1 release notes"
msgstr ""

# bf7ae681704f4d4d9c83544b301e22fb
#: ../../releases/1.1.txt:6
msgid "July 29, 2009"
msgstr ""

# 532c586811e2474e8e1cbceb8cec475d
#: ../../releases/1.1.txt:8
msgid "Welcome to Django 1.1!"
msgstr ""

# faa06306bf0343229abd5711669cea44
#: ../../releases/1.1.txt:10
msgid ""
"Django 1.1 includes a number of nifty `new features`_, lots of bug fixes, "
"and an easy upgrade path from Django 1.0."
msgstr ""

# 961e551c4b7a46cf9a5d5c959cf41b18
#: ../../releases/1.1.txt:18
msgid "Backwards-incompatible changes in 1.1"
msgstr ""

# f6689a69bde94224a86f1171bfa00502
#: ../../releases/1.1.txt:20
msgid ""
"Django has a policy of :doc:`API stability </misc/api-stability>`. This "
"means that, in general, code you develop against Django 1.0 should continue "
"to work against 1.1 unchanged. However, we do sometimes make backwards-"
"incompatible changes if they're necessary to resolve bugs, and there are a "
"handful of such (minor) changes between Django 1.0 and Django 1.1."
msgstr ""

# 2d7b4e007c674998972cded4f3897a65
#: ../../releases/1.1.txt:26
msgid ""
"Before upgrading to Django 1.1 you should double-check that the following "
"changes don't impact you, and upgrade your code if they do."
msgstr ""

# 86c319e7ac7642b695b3473ca5e863a9
#: ../../releases/1.1.txt:30
msgid "Changes to constraint names"
msgstr ""

# aecd4f4090c741bfad55f11bf8a5ae62
#: ../../releases/1.1.txt:32
msgid ""
"Django 1.1 modifies the method used to generate database constraint names so "
"that names are consistent regardless of machine word size. This change is "
"backwards incompatible for some users."
msgstr ""

# 4f8ae7030f0746bf836b15cdb0da2050
#: ../../releases/1.1.txt:36
msgid ""
"If you are using a 32-bit platform, you're off the hook; you'll observe no "
"differences as a result of this change."
msgstr ""

# 4fec17426d4c4d05a31a7177da70d9c6
#: ../../releases/1.1.txt:39
msgid ""
"However, **users on 64-bit platforms may experience some problems** using "
"the ``reset`` management command. Prior to this change, 64-bit platforms "
"would generate a 64-bit, 16 character digest in the constraint name; for "
"example::"
msgstr ""

# a6585213d8704e118712edf4ea07df86
#: ../../releases/1.1.txt:46
msgid ""
"Following this change, all platforms, regardless of word size, will generate "
"a 32-bit, 8 character digest in the constraint name; for example::"
msgstr ""

# 638d09715aba44c99bb2d7ca42d0b31e
#: ../../releases/1.1.txt:51
msgid ""
"As a result of this change, you will not be able to use the ``reset`` "
"management command on any table made by a 64-bit machine. This is because "
"the the new generated name will not match the historically generated name; "
"as a result, the SQL constructed by the reset command will be invalid."
msgstr ""

# 5445256c641543858fea699756880fd7
#: ../../releases/1.1.txt:56
msgid ""
"If you need to reset an application that was created with 64-bit "
"constraints, you will need to manually drop the old constraint prior to "
"invoking ``reset``."
msgstr ""

# dd5265ef620a476f83ede728907d8777
#: ../../releases/1.1.txt:61
msgid "Test cases are now run in a transaction"
msgstr ""

# 3fa06504827e40468df17347c8c5303e
#: ../../releases/1.1.txt:63
msgid ""
"Django 1.1 runs tests inside a transaction, allowing better test performance "
"(see `test performance improvements`_ for details)."
msgstr ""

# f75c365491a448718144767e39ccc138
#: ../../releases/1.1.txt:66
msgid ""
"This change is slightly backwards incompatible if existing tests need to "
"test transactional behavior, if they rely on invalid assumptions about the "
"test environment, or if they require a specific test case ordering."
msgstr ""

# 3ece1c4676d7407a9765126b700cef9f
#: ../../releases/1.1.txt:70
msgid ""
"For these cases, :class:`~django.test.TransactionTestCase` can be used "
"instead. This is a just a quick fix to get around test case errors revealed "
"by the new rollback approach; in the long-term tests should be rewritten to "
"correct the test case."
msgstr ""

# 9e60cc476b54400194908b867588db52
#: ../../releases/1.1.txt:78
msgid "Removed ``SetRemoteAddrFromForwardedFor`` middleware"
msgstr ""

# e218f675f6964c1da112b598af8b9223
#: ../../releases/1.1.txt:80
msgid ""
"For convenience, Django 1.0 included an optional middleware class -- "
"``django.middleware.http.SetRemoteAddrFromForwardedFor`` -- which updated "
"the value of ``REMOTE_ADDR`` based on the HTTP ``X-Forwarded-For`` header "
"commonly set by some proxy configurations."
msgstr ""

# 7759f48f832f4cac9f989002c5fefaaa
#: ../../releases/1.1.txt:85
msgid ""
"It has been demonstrated that this mechanism cannot be made reliable enough "
"for general-purpose use, and that (despite documentation to the contrary) "
"its inclusion in Django may lead application developers to assume that the "
"value of ``REMOTE_ADDR`` is \"safe\" or in some way reliable as a source of "
"authentication."
msgstr ""

# 403eef4b28204ea983ca0d04a7482530
#: ../../releases/1.1.txt:90
msgid ""
"While not directly a security issue, we've decided to remove this middleware "
"with the Django 1.1 release. It has been replaced with a class that does "
"nothing other than raise a ``DeprecationWarning``."
msgstr ""

# aa7e39303c4b442aa8897c8956c63ab0
#: ../../releases/1.1.txt:94
msgid "If you've been relying on this middleware, the easiest upgrade path is:"
msgstr ""

# 1d28c7a8bf5c4859a349b54b89a757b4
#: ../../releases/1.1.txt:96
msgid "Examine `the code as it existed before it was removed`__."
msgstr ""

# 315b1723657f4e26ae52b018376b5d18
#: ../../releases/1.1.txt:98
msgid ""
"Verify that it works correctly with your upstream proxy, modifying it to "
"support your particular proxy (if necessary)."
msgstr ""

# d25f837d9879487fb2998224ea7a07b6
#: ../../releases/1.1.txt:101
msgid ""
"Introduce your modified version of ``SetRemoteAddrFromForwardedFor`` as a "
"piece of middleware in your own project."
msgstr ""

# 540565f9ff784c6bae0675b550770379
#: ../../releases/1.1.txt:107
msgid "Names of uploaded files are available later"
msgstr ""

# 4b49676785dd405bbfd2c2067ce9cfb9
#: ../../releases/1.1.txt:111
msgid ""
"In Django 1.0, files uploaded and stored in a model's :class:`FileField` "
"were saved to disk before the model was saved to the database. This meant "
"that the actual file name assigned to the file was available before saving. "
"For example, it was available in a model's pre-save signal handler."
msgstr ""

# 7af77f2b436c47dcba19f7d92038c1c3
#: ../../releases/1.1.txt:116
msgid ""
"In Django 1.1 the file is saved as part of saving the model in the database, "
"so the actual file name used on disk cannot be relied on until *after* the "
"model has been saved."
msgstr ""

# d5f987a0e00c4f3ebad2a895366c8b08
#: ../../releases/1.1.txt:121
msgid "Changes to how model formsets are saved"
msgstr ""

# d1a84256f5de4723ad77120d90f93f95
#: ../../releases/1.1.txt:123
msgid ""
"In Django 1.1, :class:`~django.forms.models.BaseModelFormSet` now calls "
"``ModelForm.save()``."
msgstr ""

# b60f1308a5fc40b99a0ea016b4bb7f19
#: ../../releases/1.1.txt:126
msgid ""
"This is backwards-incompatible if you were modifying ``self.initial`` in a "
"model formset's ``__init__``, or if you relied on the internal "
"``_total_form_count`` or ``_initial_form_count`` attributes of BaseFormSet. "
"Those attributes are now public methods."
msgstr ""

# c014f416f5a2477f9e4352a35712958f
#: ../../releases/1.1.txt:132
msgid "Fixed the ``join`` filter's escaping behavior"
msgstr ""

# 7354a2af43024190b8f97277ea0ff2b5
#: ../../releases/1.1.txt:134
msgid ""
"The :tfilter:`join` filter no longer escapes the literal value that is "
"passed in for the connector."
msgstr ""

# fda31bb83e1e4902a1734f976c4665cb
#: ../../releases/1.1.txt:137
msgid ""
"This is backwards incompatible for the special situation of the literal "
"string containing one of the five special HTML characters. Thus, if you were "
"writing ``{{ foo|join:\"&\" }}``, you now have to write ``{{ foo|join:\"&amp;"
"\" }}``."
msgstr ""

# fc2cf306ba13438182d46224fa308d32
#: ../../releases/1.1.txt:141
msgid ""
"The previous behavior was a bug and contrary to what was documented and "
"expected."
msgstr ""

# 0ae5e2edd12246b0ac38aae50687d417
#: ../../releases/1.1.txt:145
msgid "Permanent redirects and the ``redirect_to()`` generic view"
msgstr ""

# f29fa6f696ad4714b56e5bb7f0fa1501
#: ../../releases/1.1.txt:147
msgid ""
"Django 1.1 adds a ``permanent`` argument to the ``django.views.generic."
"simple.redirect_to()`` view. This is technically backwards-incompatible if "
"you were using the ``redirect_to`` view with a format-string key called "
"'permanent', which is highly unlikely."
msgstr ""

# 6032b6eef8074181a445f455c56a8751
#: ../../releases/1.1.txt:155
msgid "Features deprecated in 1.1"
msgstr ""

# 5b3a4f7961554e60a264b5edf5a4b5ad
#: ../../releases/1.1.txt:157
msgid "One feature has been marked as deprecated in Django 1.1:"
msgstr ""

# f372c0d86292465fbcbcd872ffd2696b
#: ../../releases/1.1.txt:159
msgid ""
"You should no longer use ``AdminSite.root()`` to register that admin views. "
"That is, if your URLconf contains the line::"
msgstr ""

# ab54732950c44916b9f93b7a25e96f7b
#: ../../releases/1.1.txt:164
msgid "You should change it to read::"
msgstr ""

# 9bd05979dde441ad917e57cf73d9ab3e
#: ../../releases/1.1.txt:168
msgid ""
"You should begin to remove use of this feature from your code immediately."
msgstr ""

# b99ac3dfc30b46759c0a92ca7c5b277d
#: ../../releases/1.1.txt:170
msgid ""
"``AdminSite.root`` will raise a ``PendingDeprecationWarning`` if used in "
"Django 1.1. This warning is hidden by default. In Django 1.2, this warning "
"will be upgraded to a ``DeprecationWarning``, which will be displayed "
"loudly. Django 1.3 will remove ``AdminSite.root()`` entirely."
msgstr ""

# c06b562bf9af42cbbf96006a95415ed9
#: ../../releases/1.1.txt:175
msgid ""
"For more details on our deprecation policies and strategy, see :doc:`/"
"internals/release-process`."
msgstr ""

# 3c4e5b292e0b467588162c63eed19d9a
#: ../../releases/1.1.txt:179
msgid "What's new in Django 1.1"
msgstr ""

# 6f9dbfafcfb44a29a2e84b5085255770
#: ../../releases/1.1.txt:181
msgid ""
"Quite a bit: since Django 1.0, we've made 1,290 code commits, fixed 1,206 "
"bugs, and added roughly 10,000 lines of documentation."
msgstr ""

# 6e6dd9e543f844d79eca3dc618e58ef8
#: ../../releases/1.1.txt:184
msgid "The major new features in Django 1.1 are:"
msgstr ""

# 5abc6924fbeb4b35b9b251aa52670676
# 809f70bd1a84499787a11f2a753736f5
#: ../../releases/1.1.txt:187 ../../releases/1.1-alpha-1.txt:22
msgid "ORM improvements"
msgstr ""

# 0ff6d196852b4a9185db5f1d9f9496ed
#: ../../releases/1.1.txt:191
msgid ""
"Two major enhancements have been added to Django's object-relational mapper "
"(ORM): aggregate support, and query expressions."
msgstr ""

# 769ea104c5234b5a99298157b16dcfae
# 878faa72f2e44b9590aea9f5049e3af6
#: ../../releases/1.1.txt:195 ../../releases/1.1-alpha-1.txt:28
msgid "Aggregate support"
msgstr ""

# 722da7b3d7794aec848c138e820ca8af
# 4286c7b6077048a589080600a915aa0b
#: ../../releases/1.1.txt:197 ../../releases/1.1-alpha-1.txt:32
msgid ""
"It's now possible to run SQL aggregate queries (i.e. ``COUNT()``, ``MAX()``, "
"``MIN()``, etc.) from within Django's ORM. You can choose to either return "
"the results of the aggregate directly, or else annotate the objects in a :"
"class:`~django.db.models.query.QuerySet` with the results of the aggregate "
"query."
msgstr ""

# eefd0b22813843f081ea65ced528fe6c
# 797c8f06a4c9452d8a3f55d779db02f5
#: ../../releases/1.1.txt:203 ../../releases/1.1-alpha-1.txt:38
msgid ""
"This feature is available as new :meth:`~django.db.models.query.QuerySet."
"aggregate` and :meth:`~django.db.models.query.QuerySet.annotate` methods, "
"and is covered in detail in :doc:`the ORM aggregation documentation </topics/"
"db/aggregation>`."
msgstr ""

# adc546ce712a48df9c6919958097dc8d
# 1db0307f03e8401ca2f62d6331e75c38
#: ../../releases/1.1.txt:209 ../../releases/1.1-alpha-1.txt:44
msgid "Query expressions"
msgstr ""

# b47725d3b0b5495db5348465e28e1f09
#: ../../releases/1.1.txt:211
msgid ""
"Queries can now refer to a another field on the query and can traverse "
"relationships to refer to fields on related models. This is implemented in "
"the new :class:`~django.db.models.F` object; for full details, including "
"examples, consult the :ref:`documentation for F expressions <query-"
"expressions>`."
msgstr ""

# 18cc2d11fbcd4898ac4ce25c3d28b5e9
# bf1041dff62e468dbd2918eb93bbce6d
#: ../../releases/1.1.txt:217 ../../releases/1.1-beta-1.txt:27
msgid "Model improvements"
msgstr ""

# 1ac92a59ce5f47dcba9b056828ed1f01
# 8059cd1f13294527a300333f0040dde8
#: ../../releases/1.1.txt:219 ../../releases/1.1-beta-1.txt:31
msgid "A number of features have been added to Django's model layer:"
msgstr ""

# 2e3bee95b110498dbf6dfadbb0961323
# 6e0407b9a9574c06b746eb7a66f94016
#: ../../releases/1.1.txt:222 ../../releases/1.1-beta-1.txt:34
msgid "\"Unmanaged\" models"
msgstr ""

# bed43a0993404de29ba6d8ad92f6015c
#: ../../releases/1.1.txt:224
msgid ""
"You can now control whether or not Django manages the life-cycle of the "
"database tables for a model using the :attr:`~Options.managed` model option. "
"This defaults to ``True``, meaning that Django will create the appropriate "
"database tables in :djadmin:`syncdb` and remove them as part of the "
"``reset`` command. That is, Django *manages* the database table's lifecycle."
msgstr ""

# 57eef404311e4f55a397183710c529ef
# f9045ec54f134f4d8f69095f2d4debb8
#: ../../releases/1.1.txt:230 ../../releases/1.1-beta-1.txt:42
msgid ""
"If you set this to ``False``, however, no database table creating or "
"deletion will be automatically performed for this model. This is useful if "
"the model represents an existing table or a database view that has been "
"created by some other means."
msgstr ""

# 84f996c74804429eb55e1cb21a911f91
# 0e573085c8494706a23f8734805fd648
#: ../../releases/1.1.txt:235 ../../releases/1.1-beta-1.txt:47
msgid ""
"For more details, see the documentation for the :attr:`~Options.managed` "
"option."
msgstr ""

# 14320faa87114876b743cc5f8e64c9ff
# f4fccefafefb46829add58eaba6de87b
#: ../../releases/1.1.txt:239 ../../releases/1.1-beta-1.txt:51
msgid "Proxy models"
msgstr ""

# dbfe95b1f4e84c44b4e97478901aa946
#: ../../releases/1.1.txt:241
msgid ""
"You can now create :ref:`proxy models <proxy-models>`: subclasses of "
"existing models that only add Python-level (rather than database-level) "
"behavior and aren't represented by a new table. That is, the new model is a "
"*proxy* for some underlying model, which stores all the real data."
msgstr ""

# 48216f2a343d4e0a9141ffce2f60def6
# f4c81bcb0c6848eabf2191b77f901256
#: ../../releases/1.1.txt:246 ../../releases/1.1-beta-1.txt:58
msgid ""
"All the details can be found in the :ref:`proxy models documentation <proxy-"
"models>`. This feature is similar on the surface to unmanaged models, so the "
"documentation has an explanation of :ref:`how proxy models differ from "
"unmanaged models <proxy-vs-unmanaged-models>`."
msgstr ""

# 2026fa732252403cbfbbdf9fcfc517a6
# bca8b937ea264045a0ba74ae8ed6e71f
#: ../../releases/1.1.txt:252 ../../releases/1.1-beta-1.txt:64
msgid "Deferred fields"
msgstr ""

# c3e341fb09e04d73a3572cd12dfeb967
# 9f8290b3c2584d6d8a7e1afdb3438402
#: ../../releases/1.1.txt:254 ../../releases/1.1-beta-1.txt:66
msgid ""
"In some complex situations, your models might contain fields which could "
"contain a lot of data (for example, large text fields), or require expensive "
"processing to convert them to Python objects. If you know you don't need "
"those particular fields, you can now tell Django not to retrieve them from "
"the database."
msgstr ""

# b9ced27ff3b7418da84d8c9903d43944
# a44744600bae452bb8d26c4a6294045e
#: ../../releases/1.1.txt:260 ../../releases/1.1-beta-1.txt:72
msgid ""
"You'll do this with the new queryset methods :meth:`~django.db.models.query."
"QuerySet.defer` and :meth:`~django.db.models.query.QuerySet.only`."
msgstr ""

# 29df5f66d0b74f6aa4cd29f2729134e4
# 1ae3619a784d4567809a8ec02bf7e74c
#: ../../releases/1.1.txt:265 ../../releases/1.1-beta-1.txt:100
msgid "Testing improvements"
msgstr ""

# 6b9810a644d14ab3b4bb36a67c426125
#: ../../releases/1.1.txt:267
msgid ""
"A few notable improvements have been made to the :doc:`testing framework </"
"topics/testing/index>`."
msgstr ""

# 5bbc4e251090414dad2f04096813f1dd
#: ../../releases/1.1.txt:271
msgid "Test performance improvements"
msgstr ""

# db4c3275dbe94fa68e1b8ea8cd015748
# 5bb4940414814d339dba94c4df8740be
#: ../../releases/1.1.txt:275 ../../releases/1.1-alpha-1.txt:56
msgid ""
"Tests written using Django's :doc:`testing framework </topics/testing/"
"index>` now run dramatically faster (as much as 10 times faster in many "
"cases)."
msgstr ""

# 6f3ffdd903b742f8886b410031016b09
# b989d0cf873844f488d6fcc81ebf4ec2
#: ../../releases/1.1.txt:278 ../../releases/1.1-alpha-1.txt:59
msgid ""
"This was accomplished through the introduction of transaction-based tests: "
"when using :class:`django.test.TestCase`, your tests will now be run in a "
"transaction which is rolled back when finished, instead of by flushing and "
"re-populating the database. This results in an immense speedup for most "
"types of unit tests. See the documentation for :class:`TestCase` and :class:"
"`TransactionTestCase` for a full description, and some important notes on "
"database support."
msgstr ""

# 2c23a79044354d28a805255d7efdb155
#: ../../releases/1.1.txt:286
msgid "Test client improvements"
msgstr ""

# 57cabb97bdde4c62a7fb60135eb01605
#: ../../releases/1.1.txt:290
msgid ""
"A couple of small -- but highly useful -- improvements have been made to the "
"test client:"
msgstr ""

# 21a6503c8a1745b4997924d4bf93a1d5
# 355d986083a74058b42ef28f38328199
#: ../../releases/1.1.txt:293 ../../releases/1.1-beta-1.txt:107
msgid ""
"The test :class:`Client` now can automatically follow redirects with the "
"``follow`` argument to :meth:`Client.get` and :meth:`Client.post`. This "
"makes testing views that issue redirects simpler."
msgstr ""

# 64b03b50e5444d98a65b872b4912f9f9
#: ../../releases/1.1.txt:297
msgid ""
"It's now easier to get at the template context in the response returned the "
"test client: you'll simply access the context as ``request.context[key]``. "
"The old way, which treats ``request.context`` as a list of contexts, one for "
"each rendered template in the inheritance chain, is still available if you "
"need it."
msgstr ""

# faf71268354648a9b3ae49e7a0234ac5
# e4f92038d97d42a78c60bd81bce4036d
#: ../../releases/1.1.txt:304 ../../releases/1.1-beta-1.txt:77
msgid "New admin features"
msgstr ""

# 410217aa0e334c58a0d610475299406c
#: ../../releases/1.1.txt:306
msgid ""
"Django 1.1 adds a couple of nifty new features to Django's admin interface:"
msgstr ""

# ff27122a81e240c68bfc6b9f9d9f829a
# 6cfc0956ef3e4674b3fe523c3797b4db
#: ../../releases/1.1.txt:309 ../../releases/1.1-beta-1.txt:83
msgid "Editable fields on the change list"
msgstr ""

# c2b84dc2f7c14995b9a70f9bc219aaba
# c71600b0671c47b08eb0f9d9c917186b
#: ../../releases/1.1.txt:311 ../../releases/1.1-beta-1.txt:85
msgid ""
"You can now make fields editable on the admin list views via the new :ref:"
"`list_editable <admin-list-editable>` admin option. These fields will show "
"up as form widgets on the list pages, and can be edited and saved in bulk."
msgstr ""

# 6e5c57ae3f1a486f8861a6e871a9dad0
# 25263aca16a840c2a18ef4403696174e
#: ../../releases/1.1.txt:316 ../../releases/1.1-beta-1.txt:90
msgid "Admin \"actions\""
msgstr ""

# 85ba071172924fb0907635788e2122ae
# 2f70f21a51ca40b097aee3d22bea0e4d
#: ../../releases/1.1.txt:318 ../../releases/1.1-beta-1.txt:92
msgid ""
"You can now define :doc:`admin actions </ref/contrib/admin/actions>` that "
"can perform some action to a group of models in bulk. Users will be able to "
"select objects on the change list page and then apply these bulk actions to "
"all selected objects."
msgstr ""

# 956800f436a04e0b95ffb2f8231f8d52
# b372dbc99c0a476c96c63c6829de87fc
#: ../../releases/1.1.txt:323 ../../releases/1.1-beta-1.txt:96
msgid ""
"Django ships with one pre-defined admin action to delete a group of objects "
"in one fell swoop."
msgstr ""

# cabc607b08e9444d9e54a8b722036c96
# 5e7afa6121f940e1a5a78428aeadb31d
#: ../../releases/1.1.txt:327 ../../releases/1.1-beta-1.txt:118
msgid "Conditional view processing"
msgstr ""

# 8154a90a11bd46688ba14fdb06d0ecbe
# daf9ac9ea7d6413bb2422c1923287d87
#: ../../releases/1.1.txt:329 ../../releases/1.1-beta-1.txt:120
msgid ""
"Django now has much better support for :doc:`conditional view processing </"
"topics/conditional-view-processing>` using the standard ``ETag`` and ``Last-"
"Modified`` HTTP headers. This means you can now easily short-circuit view "
"processing by testing less-expensive conditions. For many views this can "
"lead to a serious improvement in speed and reduction in bandwidth."
msgstr ""

# 22449d6aa7d24f55926dff5e2965d241
# 5ae97c5852e24400a56c05806541fc8e
#: ../../releases/1.1.txt:336 ../../releases/1.1-rc-1.txt:36
msgid "URL namespaces"
msgstr ""

# 7e33098b063943c9a0861f7a0a091822
#: ../../releases/1.1.txt:338
msgid ""
"Django 1.1 improves :ref:`named URL patterns <naming-url-patterns>` with the "
"introduction of URL \"namespaces.\""
msgstr ""

# cbd504f765bb4336a65a8e4104f1b4df
#: ../../releases/1.1.txt:341
msgid ""
"In short, this feature allows the same group of URLs, from the same "
"application, to be included in a Django URLConf multiple times, with varying "
"(and potentially nested) named prefixes which will be used when performing "
"reverse resolution. In other words, reusable applications like Django's "
"admin interface may be registered multiple times without URL conflicts."
msgstr ""

# 544ea33328964a66abb4ec929ac9ef61
#: ../../releases/1.1.txt:347
msgid ""
"For full details, see :ref:`the documentation on defining URL namespaces "
"<topics-http-defining-url-namespaces>`."
msgstr ""

# d63ba19e686d4f57ad2210b8a4a7d096
# 7286a7efa5574316afa8a4076d9c9521
# 0cfd8635a4d647c08a2a96ca117fd8f9
# c15b890e3941467b88e3649df6413075
# 5ffacf0e26994ee1b5bc21841e501790
# 819b82db30f24ccfb0ca7916fca049e2
# 377da6f0a81849eea9affdbb1b51548e
# 93963eb2da884c03a3cd0c36b8bc9de0
# 3679ce3daeed4f0dbae4da945a269331
#: ../../releases/1.1.txt:351 ../../releases/1.2.txt:341
#: ../../releases/1.2.txt:1084 ../../releases/1.2.4.txt:76
#: ../../releases/1.3.txt:261 ../../releases/1.3.txt:799
#: ../../releases/1.5.txt:219 ../../releases/1.5-alpha-1.txt:222
#: ../../releases/1.5-beta-1.txt:220
msgid "GeoDjango"
msgstr ""

# 3a40219cc3954bc997b70fec7f9399f0
#: ../../releases/1.1.txt:353
msgid ""
"In Django 1.1, GeoDjango_ (i.e. ``django.contrib.gis``) has several new "
"features:"
msgstr ""

# 6801206106ff465caacb2b300d34536d
#: ../../releases/1.1.txt:356
msgid ""
"Support for SpatiaLite_ -- a spatial database for SQLite -- as a spatial "
"backend."
msgstr ""

# 93040bdb911740338eae7520fc8420f2
#: ../../releases/1.1.txt:359
msgid ""
"Geographic aggregates (``Collect``, ``Extent``, ``MakeLine``, ``Union``) and "
"``F`` expressions."
msgstr ""

# 2dc730c630da435da749ba973c7a80af
#: ../../releases/1.1.txt:362
msgid ""
"New ``GeoQuerySet`` methods: ``collect``, ``geojson``, and ``snap_to_grid``."
msgstr ""

# e3ffcf9e79b045729d4a631b8e7312b5
#: ../../releases/1.1.txt:365
msgid "A new list interface methods for ``GEOSGeometry`` objects."
msgstr ""

# e2bdb51fbbe048ec9b679c16c74e359d
#: ../../releases/1.1.txt:367
msgid "For more details, see the `GeoDjango documentation`_."
msgstr ""

# d2057b308c5d4ed387e1fc2909a1ef9c
# cca3e7496d82460293899aa438574565
# a32441f0b0a14c7db3d02210c0f9f610
#: ../../releases/1.1.txt:374 ../../releases/1.1-alpha-1.txt:67
#: ../../releases/1.1-beta-1.txt:127
msgid "Other improvements"
msgstr ""

# 2b2028c2a2d446eea635dd65b29059f9
# 9d33ea8d5619420a92bb9ebabb65b5bd
#: ../../releases/1.1.txt:376 ../../releases/1.1-alpha-1.txt:69
msgid "Other new features and changes introduced since Django 1.0 include:"
msgstr ""

# 4107786164ef44448f16e5afff6c107f
# 58f2b6342b9c4c688a11289106e08df5
#: ../../releases/1.1.txt:378 ../../releases/1.1-alpha-1.txt:71
msgid ""
"The :doc:`CSRF protection middleware </ref/contrib/csrf>` has been split "
"into two classes -- ``CsrfViewMiddleware`` checks incoming requests, and "
"``CsrfResponseMiddleware`` processes outgoing responses. The combined "
"``CsrfMiddleware`` class (which does both) remains for backwards-"
"compatibility, but using the split classes is now recommended in order to "
"allow fine-grained control of when and where the CSRF processing takes place."
msgstr ""

# 34ac99dcf756462eace22fb571dc5e66
# 8790388cdea74da7b7429ede7f6c8fdc
#: ../../releases/1.1.txt:386 ../../releases/1.1-alpha-1.txt:79
msgid ""
":func:`~django.core.urlresolvers.reverse` and code which uses it (e.g., the "
"``{% url %}`` template tag) now works with URLs in Django's administrative "
"site, provided that the admin URLs are set up via ``include(admin.site."
"urls)`` (sending admin requests to the ``admin.site.root`` view still works, "
"but URLs in the admin will not be \"reversible\" when configured this way)."
msgstr ""

# d84231aab035413fa8959539eb7cb8ce
# 469fdce5f8764afb848b274caa95c824
#: ../../releases/1.1.txt:392 ../../releases/1.1-alpha-1.txt:85
msgid ""
"The ``include()`` function in Django URLconf modules can now accept "
"sequences of URL patterns (generated by ``patterns()``) in addition to "
"module names."
msgstr ""

# 99ba2f0ff0644b438e3d898e4a752106
# 99730633f41a45d4bb52daaa53c7d8df
#: ../../releases/1.1.txt:395 ../../releases/1.1-alpha-1.txt:88
msgid ""
"Instances of Django forms (see :doc:`the forms overview </topics/forms/"
"index>`) now have two additional methods, ``hidden_fields()`` and "
"``visible_fields()``, which return the list of hidden -- i.e., ``<input type="
"\"hidden\">`` -- and visible fields on the form, respectively."
msgstr ""

# 10b3f53f8d08488fb1d6093a20a535e4
# 39a5f04bd9044b78888028417cf317e1
#: ../../releases/1.1.txt:400 ../../releases/1.1-alpha-1.txt:93
msgid ""
"The ``redirect_to`` generic view now accepts an additional keyword argument "
"``permanent``. If ``permanent`` is ``True``, the view will emit an HTTP "
"permanent redirect (status code 301). If ``False``, the view will emit an "
"HTTP temporary redirect (status code 302)."
msgstr ""

# 22e2cf2904354cc984c6cc473dbb63e3
# 5b9e377a871b47caa0807e78213ee79f
#: ../../releases/1.1.txt:406 ../../releases/1.1-alpha-1.txt:99
msgid ""
"A new database lookup type -- ``week_day`` -- has been added for "
"``DateField`` and ``DateTimeField``. This type of lookup accepts a number "
"between 1 (Sunday) and 7 (Saturday), and returns objects where the field "
"value matches that day of the week. See :ref:`the full list of lookup types "
"<field-lookups>` for details."
msgstr ""

# 7f14ced1683f4906835471de9d36acd9
# ef348b917c5f4e449fc0816b5dc486d1
#: ../../releases/1.1.txt:412 ../../releases/1.1-alpha-1.txt:105
msgid ""
"The ``{% for %}`` tag in Django's template language now accepts an optional "
"``{% empty %}`` clause, to be displayed when ``{% for %}`` is asked to loop "
"over an empty sequence. See :doc:`the list of built-in template tags </ref/"
"templates/builtins>` for examples of this."
msgstr ""

# 40d0affb246e4b48855c6a1adc798346
# 8dfb8f565564498780196eaa64561e17
#: ../../releases/1.1.txt:417 ../../releases/1.1-beta-1.txt:132
msgid ""
"The :djadmin:`dumpdata` management command now accepts individual model "
"names as arguments, allowing you to export the data just from particular "
"models."
msgstr ""

# 1315edcd4a874f389de00c647ad35f02
# 671bc9922a0446ce9ee69fea842aa0c2
#: ../../releases/1.1.txt:421 ../../releases/1.1-beta-1.txt:136
msgid ""
"There's a new :tfilter:`safeseq` template filter which works just like :"
"tfilter:`safe` for lists, marking each item in the list as safe."
msgstr ""

# 88bd9dd4589d4bed9a46ee8a731faad1
# 1a06967d512f44ed95105baf653ee87c
#: ../../releases/1.1.txt:424 ../../releases/1.1-beta-1.txt:139
msgid ""
":doc:`Cache backends </topics/cache>` now support ``incr()`` and ``decr()`` "
"commands to increment and decrement the value of a cache key. On cache "
"backends that support atomic increment/decrement -- most notably, the "
"memcached backend -- these operations will be atomic, and quite fast."
msgstr ""

# 39ed5d1ff51e473cb18a8a490fa78e42
# 44e185abf71f497a9661c70558165c27
#: ../../releases/1.1.txt:430 ../../releases/1.1-beta-1.txt:145
msgid ""
"Django now can :doc:`easily delegate authentication to the Web server </"
"howto/auth-remote-user>` via a new authentication backend that supports the "
"standard ``REMOTE_USER`` environment variable used for this purpose."
msgstr ""

# 51b93ef7660040fab21007e7c635c572
# bc53a7959cb546ef9250ec8edab5b569
#: ../../releases/1.1.txt:434 ../../releases/1.1-beta-1.txt:149
msgid ""
"There's a new :func:`django.shortcuts.redirect` function that makes it "
"easier to issue redirects given an object, a view name, or a URL."
msgstr ""

# 00b8b8b51a5b402b8ca769625bde4ac0
# 5acb3d2082bd485fbe03e56036d8780a
#: ../../releases/1.1.txt:437 ../../releases/1.1-beta-1.txt:152
msgid ""
"The ``postgresql_psycopg2`` backend now supports :ref:`native PostgreSQL "
"autocommit <postgresql-notes>`. This is an advanced, PostgreSQL-specific "
"feature, that can make certain read-heavy applications a good deal faster."
msgstr ""

# e29f61677b164839bc8a1cefaec4f0fe
#: ../../releases/1.1.txt:443
msgid "What's next?"
msgstr ""

# 7017793ccdef41209ae26d63e99e4dc4
#: ../../releases/1.1.txt:445
msgid ""
"We'll take a short break, and then work on Django 1.2 will begin -- no rest "
"for the weary! If you'd like to help, discussion of Django development, "
"including progress toward the 1.2 release, takes place daily on the django-"
"developers mailing list:"
msgstr ""

# 0531fbdfd2a2418fb904fe666ce50be3
#: ../../releases/1.1.txt:452
msgid ""
"... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. Feel "
"free to join the discussions!"
msgstr ""

# aecc0ea5de2d409f98e3c98cf1fb2a6d
# 2e1807f3774b473ea126b0c0a13fe134
# df63a3193a3b401a81825a2f568845e0
# e0a7e3c27a1f4063b279350bc0bd2787
# 193420e701134f37a907820b5a2de8d8
# 932be01179cd4f248043292b40037e45
# 1b1faeef361f45f7be80e9687693a23b
# 1d7d2921b25949dab7bd9269bc062212
# 7de641c9dc884a63b772438b2d5ca7a0
# 0bdf90f571f24e1097488f6ea04f22fe
# ef55c70a1d274fa6b214c844b6c42700
#: ../../releases/1.1.txt:458 ../../releases/1.1-alpha-1.txt:156
#: ../../releases/1.1-beta-1.txt:199 ../../releases/1.1-rc-1.txt:105
#: ../../releases/1.2-alpha-1.txt:579 ../../releases/1.2-beta-1.txt:164
#: ../../releases/1.2-rc-1.txt:97 ../../releases/1.3-alpha-1.txt:390
#: ../../releases/1.3-beta-1.txt:228 ../../releases/1.4-alpha-1.txt:1115
#: ../../releases/1.4-beta-1.txt:1187
msgid ":doc:`How to contribute to Django </internals/contributing/index>`"
msgstr ""

# 24350c0208b84cff944021d7439bba04
#: ../../releases/1.1.txt:464
msgid "And that's the way it is."
msgstr ""

# aa3a2235bcc54a2f951d671defa167a6
#: ../../releases/1.1-alpha-1.txt:3
msgid "Django 1.1 alpha 1 release notes"
msgstr ""

# 8a30e6c5b70c42629aec114962c7a298
#: ../../releases/1.1-alpha-1.txt:5
msgid "February 23, 2009"
msgstr ""

# 6ed7d1b0a48e42628c1d7e1eb18785cb
#: ../../releases/1.1-alpha-1.txt:7
msgid "Welcome to Django 1.1 alpha 1!"
msgstr ""

# f83b7474285c4c9489618d6b58e94428
#: ../../releases/1.1-alpha-1.txt:9
msgid ""
"This is the first in a series of preview/development releases leading up to "
"the eventual release of Django 1.1, currently scheduled to take place in "
"April 2009. This release is primarily targeted at developers who are "
"interested in trying out new features and testing the Django codebase to "
"help identify and resolve bugs prior to the final 1.1 release."
msgstr ""

# 94a35b56b1084d65a3c07935c88b8228
#: ../../releases/1.1-alpha-1.txt:19
msgid "What's new in Django 1.1 alpha 1"
msgstr ""

# 90016536fcb24611b3a215aeccf5a00b
#: ../../releases/1.1-alpha-1.txt:24
msgid ""
"Two major enhancements have been added to Django's object-relational mapper "
"(ORM):"
msgstr ""

# a413cead54a0432a830266af4c0850ef
#: ../../releases/1.1-alpha-1.txt:46
msgid ""
"Queries can now refer to a another field on the query and can traverse "
"relationships to refer to fields on related models. This is implemented in "
"the new :class:`F` object; for full details, including examples, consult "
"the :ref:`documentation for F expressions <query-expressions>`."
msgstr ""

# 6924cee731b04a16a030c7aa49c7d918
#: ../../releases/1.1-alpha-1.txt:52
msgid "Performance improvements"
msgstr ""

# ec471c708eae4d80a74906444effb0c3
# 32fc49b6a32f4d189239b17bd7c9effd
# c2bfdcbd3c8941208ce2e863a96b7fbb
#: ../../releases/1.1-alpha-1.txt:111 ../../releases/1.1-beta-1.txt:158
#: ../../releases/1.1-rc-1.txt:64
msgid "The Django 1.1 roadmap"
msgstr ""

# 9b37234a53b8404db1a4dc8c79327d37
#: ../../releases/1.1-alpha-1.txt:113
msgid ""
"Before Django 1.1 goes final, several other preview/development releases "
"will be made available. The current schedule consists of at least the "
"following:"
msgstr ""

# a0b420b5938948c5a2784f40b0348de6
#: ../../releases/1.1-alpha-1.txt:116
msgid ""
"Week of *March 20, 2009:* Django 1.1 beta 1, at which point Django 1.1 will "
"be in \"feature freeze\": no new features will be implemented for 1.1 past "
"that point, and all new feature work will be deferred to Django 1.2."
msgstr ""

# ae3314848f0e419591242d8a896c604d
# bc1f50ef81ba402493de1793c428db6d
#: ../../releases/1.1-alpha-1.txt:121 ../../releases/1.1-beta-1.txt:164
msgid ""
"Week of *April 2, 2009:* Django 1.1 release candidate. At this point all "
"strings marked for translation must freeze to allow translations to be "
"submitted in advance of the final release."
msgstr ""

# da6db8aa93df4613acb2cb4a65c88a8f
# 1d5ed4e825c94c9b9526f338b5768f6b
#: ../../releases/1.1-alpha-1.txt:125 ../../releases/1.1-beta-1.txt:168
msgid "Week of *April 13, 2009:* Django 1.1 final."
msgstr ""

# 7858cf0671dc42e0be659bad69d3289b
#: ../../releases/1.1-alpha-1.txt:127
msgid ""
"If deemed necessary, additional alpha, beta or release candidate packages "
"will be issued prior to the final 1.1 release."
msgstr ""

# d59e68abda204797b62bdd791f2c6c63
#: ../../releases/1.1-alpha-1.txt:133
msgid ""
"In order to provide a high-quality 1.1 release, we need your help. Although "
"this alpha release is, again, *not* intended for production use, you can "
"help the Django team by trying out the alpha codebase in a safe test "
"environment and reporting any bugs or issues you encounter. The Django "
"ticket tracker is the central place to search for open issues:"
msgstr ""

# 3e2a6f9a964147a89a1fb33198275298
# c1785a17e6154ee38a0ac254fbc957b1
# 20e47cca1f9049b39affaebe8f8d73eb
#: ../../releases/1.1-alpha-1.txt:144 ../../releases/1.1-beta-1.txt:187
#: ../../releases/1.1-rc-1.txt:92
msgid ""
"Additionally, discussion of Django development, including progress toward "
"the 1.1 release, takes place daily on the django-developers mailing list:"
msgstr ""

# 1b0095bf95cc4fc3bc277624f0d5dcac
# cf4f207bbdb04a15a05c524dbf55d17c
# 227fef3e58854982bf100d6c4df523fd
# d3e975d2e1bf4229adfb77e377c05b06
# a5cd7cb439fe44e1af5fffe2f7e8a7a2
# cde753037f944161b570f0ffe31129b6
# 7b86c3bc3bc74be483426d1744b1a805
# a543e20ec30b4b34a7816b4495ebcb31
# 6b950e2f645f4a149e23e0f4c16b01d3
# f99239912c9c4ddd8be048883e6abb2d
#: ../../releases/1.1-alpha-1.txt:149 ../../releases/1.1-beta-1.txt:192
#: ../../releases/1.1-rc-1.txt:98 ../../releases/1.2-alpha-1.txt:572
#: ../../releases/1.2-beta-1.txt:157 ../../releases/1.2-rc-1.txt:90
#: ../../releases/1.3-alpha-1.txt:383 ../../releases/1.3-beta-1.txt:221
#: ../../releases/1.4-alpha-1.txt:1108 ../../releases/1.4-beta-1.txt:1180
msgid ""
"... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If "
"you're interested in helping out with Django's development, feel free to "
"join the discussions there."
msgstr ""

# 7f1f7d0d3ae848cd8d79abe10336e156
# 9c4a6476799d4b4f8865218ac140f32b
#: ../../releases/1.1-alpha-1.txt:162 ../../releases/1.1-beta-1.txt:205
msgid ""
"Development sprints for Django 1.1 will also be taking place at PyCon US "
"2009, on the dedicated sprint days (March 30 through April 2), and anyone "
"who wants to help out is welcome to join in, either in person at PyCon or "
"virtually in the IRC channel or on the mailing list."
msgstr ""

# 10ad866251fe4766877926e161c7d5e8
#: ../../releases/1.1-beta-1.txt:3
msgid "Django 1.1 beta 1 release notes"
msgstr ""

# c2355be2b9b44abcb021cb9320760985
#: ../../releases/1.1-beta-1.txt:5
msgid "March 23, 2009"
msgstr ""

# 63310fbefccd490bbdf8b563da79277f
#: ../../releases/1.1-beta-1.txt:7
msgid "Welcome to Django 1.1 beta 1!"
msgstr ""

# bd7e3cb9ee294f23a7cbc40721ad5609
#: ../../releases/1.1-beta-1.txt:9
msgid ""
"This is the second in a series of preview/development releases leading up to "
"the eventual release of Django 1.1, currently scheduled to take place in "
"April 2009. This release is primarily targeted at developers who are "
"interested in trying out new features and testing the Django codebase to "
"help identify and resolve bugs prior to the final 1.1 release."
msgstr ""

# 91c912c637134df7acf8387a6eb5a34f
#: ../../releases/1.1-beta-1.txt:19
msgid "What's new in Django 1.1 beta 1"
msgstr ""

# e05bee6fa4874e248267897d1ecbbf6e
#: ../../releases/1.1-beta-1.txt:23
msgid ""
"The :doc:`1.1 alpha release notes </releases/1.1-alpha-1>`, which has a list "
"of everything new between Django 1.0 and Django 1.1 alpha."
msgstr ""

# e069a1602598483f8b63ef6756fc7acb
#: ../../releases/1.1-beta-1.txt:36
msgid ""
"You can now control whether or not Django creates database tables for a "
"model using the :attr:`~Options.managed` model option. This defaults to "
"``True``, meaning that Django will create the appropriate database tables "
"in :djadmin:`syncdb` and remove them as part of ``reset`` command. That is, "
"Django *manages* the database table's lifecycle."
msgstr ""

# 4291a9b8961947ecab39a5ae94f932ee
#: ../../releases/1.1-beta-1.txt:53
msgid ""
"You can now create :ref:`proxy models <proxy-models>`: subclasses of "
"existing models that only add Python behavior and aren't represented by a "
"new table. That is, the new model is a *proxy* for some underlying model, "
"which stores all the real data."
msgstr ""

# a36e1bd4b1e14dfea42decc20dd38fe2
#: ../../releases/1.1-beta-1.txt:79
msgid ""
"Since 1.1 alpha, a couple of new features have been added to Django's admin "
"application:"
msgstr ""

# 7a7827eee6ac485b9801b7122eee4d69
#: ../../releases/1.1-beta-1.txt:104
msgid ""
"A couple of small but very useful improvements have been made to the :doc:"
"`testing framework </topics/testing/index>`:"
msgstr ""

# 4ebd82eec43c4841afd1ccc7034a683c
#: ../../releases/1.1-beta-1.txt:111
msgid ""
"It's now easier to get at the template context in the response returned the "
"test client: you'll simply access the context as ``request.context[key]``. "
"The old way, which treats ``request.context`` as a list of contexts, one for "
"each rendered template, is still available if you need it."
msgstr ""

# da05bd0d578e4f1cb4f5ba524ea3724a
#: ../../releases/1.1-beta-1.txt:129
msgid ""
"Finally, a grab-bag of other neat features made their way into this beta "
"release, including:"
msgstr ""

# d301e526eff04b569ba7bc9d47cff82d
#: ../../releases/1.1-beta-1.txt:160
msgid ""
"Before Django 1.1 goes final, at least one other preview/development release "
"will be made available. The current schedule consists of at least the "
"following:"
msgstr ""

# c579fc97f0a748c0a7e6617d8d5dc34c
#: ../../releases/1.1-beta-1.txt:170
msgid ""
"If deemed necessary, additional beta or release candidate packages will be "
"issued prior to the final 1.1 release."
msgstr ""

# d5dbb048a1a6441a834f094d85e8619b
#: ../../releases/1.1-beta-1.txt:176
msgid ""
"In order to provide a high-quality 1.1 release, we need your help. Although "
"this beta release is, again, *not* intended for production use, you can help "
"the Django team by trying out the beta codebase in a safe test environment "
"and reporting any bugs or issues you encounter. The Django ticket tracker is "
"the central place to search for open issues:"
msgstr ""

# b7b7b1d16be146029854c4088b8b0232
#: ../../releases/1.1-rc-1.txt:3
msgid "Django 1.1 RC 1 release notes"
msgstr ""

# 08b4986217024076864b980726efe4e7
#: ../../releases/1.1-rc-1.txt:6
msgid "July 21, 2009"
msgstr ""

# aaab857732ef4d848652cacbc012fb15
#: ../../releases/1.1-rc-1.txt:8
msgid "Welcome to the first Django 1.1 release candidate!"
msgstr ""

# d97198eeb8904b518c07bd2728d1ca6a
#: ../../releases/1.1-rc-1.txt:10
msgid ""
"This is the third -- and likely last -- in a series of preview/development "
"releases leading up to the eventual release of Django 1.1, currently "
"scheduled to take place approximately one week after this release candidate. "
"This release is targeted primarily at developers who are interested in "
"trying out new features and testing the Django codebase to help identify and "
"resolve any critical bugs prior to the final 1.1 release."
msgstr ""

# 6155f04f4fe44feb945e43033b874813
# a899a5020c194594b06f4755d8c00324
#: ../../releases/1.1-rc-1.txt:18 ../../releases/1.2-rc-1.txt:17
msgid ""
"As such, this release is not yet intended for production use, and any such "
"use is discouraged."
msgstr ""

# ce122aa4a4e64cefbd213fe5aef5e51c
#: ../../releases/1.1-rc-1.txt:23
msgid "What's new in Django 1.1 RC 1"
msgstr ""

# 4ada10dbefe743ec91f1f1b0d8efff67
#: ../../releases/1.1-rc-1.txt:25
msgid ""
"The Django codebase has -- with one exception -- been in feature freeze "
"since the first 1.1 beta release, and so this release candidate contains "
"only one new feature (see below); work leading up to this release candidate "
"has instead been focused on bugfixing, particularly on the new features "
"introduced prior to the 1.1 beta."
msgstr ""

# be7cd20f898249a5b5416178e6a033a6
#: ../../releases/1.1-rc-1.txt:31
msgid ""
"For an overview of those features, consult :doc:`the Django 1.1 beta release "
"notes </releases/1.1-beta-1>`."
msgstr ""

# 7379dcece7ae4c23b2b79ec113575e53
#: ../../releases/1.1-rc-1.txt:38
msgid ""
"The 1.1 beta release introduced the ability to use reverse URL resolution "
"with Django's admin application, which exposed a set of :ref:`named URLs "
"<naming-url-patterns>`. Unfortunately, achieving consistent and correct "
"reverse resolution for admin URLs proved extremely difficult, and so one "
"additional feature was added to Django to resolve this issue: URL namespaces."
msgstr ""

# 6f058aeabe024da1a7090bfa571bb813
#: ../../releases/1.1-rc-1.txt:45
msgid ""
"In short, this feature allows the same group of URLs, from the same "
"application, to be included in a Django URLConf multiple times, with varying "
"(and potentially nested) named prefixes which will be used when performing "
"reverse resolution. For full details, see :ref:`the documentation on "
"defining URL namespaces <topics-http-defining-url-namespaces>`."
msgstr ""

# b511aa93d53b4756a875e37f45cd55c8
#: ../../releases/1.1-rc-1.txt:52
msgid ""
"Due to the changes needed to support this feature, the URL pattern names "
"used when reversing admin URLs have changed since the 1.1 beta release; if "
"you were developing applications which took advantage of this new feature, "
"you will need to update your code to reflect the new names (for most "
"purposes, changing ``admin_`` to ``admin:`` in names to be reversed will "
"suffice). For a full list of URL pattern names used by the admin and "
"information on how namespaces are applied to them, consult the documentation "
"on :ref:`reversing admin URLs <admin-reverse-urls>`."
msgstr ""

# 27d84a47b0724cd38e02e0c168d1aed9
#: ../../releases/1.1-rc-1.txt:66
msgid ""
"As of this release candidate, Django 1.1 is in both feature freeze and "
"\"string freeze\" -- all strings marked for translation in the Django "
"codebase will retain their current form in the final Django 1.1 release. "
"Only critical release-blocking bugs will receive attention between now and "
"the final 1.1 release."
msgstr ""

# a0d472d83e634540a5a9d61cffb5a14b
#: ../../releases/1.1-rc-1.txt:72
msgid ""
"If no such bugs are discovered, Django 1.1 will be released approximately "
"one week after this release candidate, on or about July 28, 2009."
msgstr ""

# 4ce261652a7a422f938e4aba4f9d3e65
#: ../../releases/1.1-rc-1.txt:80
msgid ""
"In order to provide a high-quality 1.1 release, we need your help. Although "
"this release candidate is, again, *not* intended for production use, you can "
"help the Django team by trying out this release candidate in a safe testing "
"environment and reporting any bugs or issues you encounter. The Django "
"ticket tracker is the central place to search for open issues:"
msgstr ""

# a1c4b23b2c304ce0b77af2c8b25f28ea
# 361d3bbab6cb4542ac4c56afe5abc8a8
#: ../../releases/1.1-rc-1.txt:89 ../../releases/1.2-rc-1.txt:81
msgid ""
"Please open a new ticket only if no existing ticket corresponds to a problem "
"you're running into."
msgstr ""

# 75ac5ba53b9b4b7db764a930a8567820
#: ../../releases/1.1.2.txt:3
msgid "Django 1.1.2 release notes"
msgstr ""

# e90dad962fbe4982a4d3ae5105b39a44
#: ../../releases/1.1.2.txt:5
msgid "Welcome to Django 1.1.2!"
msgstr ""

# c7e38a5804c14e7790c8e44a062794d5
#: ../../releases/1.1.2.txt:7
msgid ""
"This is the second \"bugfix\" release in the Django 1.1 series, improving "
"the stability and performance of the Django 1.1 codebase."
msgstr ""

# 6afeda4c432e4869983b03267cde4c20
#: ../../releases/1.1.2.txt:10
msgid ""
"Django 1.1.2 maintains backwards compatibility with Django 1.1.0, but "
"contain a number of fixes and other improvements. Django 1.1.2 is a "
"recommended upgrade for any development or deployment currently using or "
"targeting Django 1.1."
msgstr ""

# b074d5fbac8b4df99dc07edf72512db7
# 206206ae2b124cc4aec7571135a641c1
# 85726390d9dc47158f5e3938bdc6aaef
#: ../../releases/1.1.2.txt:15 ../../releases/1.1.3.txt:15
#: ../../releases/1.1.4.txt:15
msgid ""
"For full details on the new features, backwards incompatibilities, and "
"deprecated features in the 1.1 branch, see the :doc:`/releases/1.1`."
msgstr ""

# df8e008f4f86493fb6a306b05e769cd8
#: ../../releases/1.1.2.txt:19
msgid "Backwards-incompatible changes in 1.1.2"
msgstr ""

# ed6e35f7d68e4ca2a58f8368b1565a81
# 88d65c4905c54b48b85a4e3843457324
# b145cd4659444c0a8052c6535e282b9c
#: ../../releases/1.1.2.txt:22 ../../releases/1.2.txt:675
#: ../../releases/1.2-alpha-1.txt:181
msgid "Test runner exit status code"
msgstr ""

# e27f1a7004464694a3b26544d33a2cfa
# b3c024d9774a4a31841053e0b97c10e2
#: ../../releases/1.1.2.txt:24 ../../releases/1.2-alpha-1.txt:183
msgid ""
"The exit status code of the test runners (``tests/runtests.py`` and ``python "
"manage.py test``) no longer represents the number of failed tests, since a "
"failure of 256 or more tests resulted in a wrong exit status code.  The exit "
"status code for the test runner is now 0 for success (no failing tests) and "
"1 for any number of test failures.  If needed, the number of test failures "
"can be found at the end of the test runner's output."
msgstr ""

# 5aee0201794f42a191656b8103464ed6
# d0186b601a4644ecb2cb4c8fc7427c48
# 4e8aad03b82d42c099fdcabefa8e7d22
#: ../../releases/1.1.2.txt:32 ../../releases/1.2.txt:685
#: ../../releases/1.2-beta-1.txt:66
msgid "Cookie encoding"
msgstr ""

# 1ab395526ff94831a0efff49996a8a3b
#: ../../releases/1.1.2.txt:34
msgid ""
"To fix bugs with cookies in Internet Explorer, Safari, and possibly other "
"browsers, our encoding of cookie values was changed so that the characters "
"comma and semi-colon are treated as non-safe characters, and are therefore "
"encoded as ``\\054`` and ``\\073`` respectively.  This could produce "
"backwards incompatibilities, especially if you are storing comma or semi-"
"colon in cookies and have javascript code that parses and manipulates cookie "
"values client-side."
msgstr ""

# 89b86870b7df485c9549151510255505
# 74bc715e052e4e19a4af2c055718313e
# 924f8ad740d14cd894517e70d71513f2
#: ../../releases/1.1.2.txt:43 ../../releases/1.2.2.txt:19
#: ../../releases/1.2.4.txt:53
msgid "One new feature"
msgstr ""

# ad85454df36544cd8f1647c145215263
#: ../../releases/1.1.2.txt:45
msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.1.2, we have made an exception to this rule. Django 1.2 (the "
"next major release of Django) will contain a feature that will improve "
"protection against Cross-Site Request Forgery (CSRF) attacks. This feature "
"requires the use of a new :ttag:`csrf_token` template tag in all forms that "
"Django renders."
msgstr ""

# 6ebe4722a5d94f04a481b4c5998cb553
#: ../../releases/1.1.2.txt:52
msgid ""
"To make it easier to support both 1.1.X and 1.2.X versions of Django with "
"the same templates, we have decided to introduce the :ttag:`csrf_token` "
"template tag to the 1.1.X branch. In the 1.1.X branch, :ttag:`csrf_token` "
"does nothing - it has no effect on templates or form processing. However, it "
"means that the same template will work with Django 1.2."
msgstr ""

# 129ed3db2f6043c9ad3d9aa2484a1164
#: ../../releases/1.1.3.txt:3
msgid "Django 1.1.3 release notes"
msgstr ""

# 965dc345e2eb42e8aff6b095ca24f119
#: ../../releases/1.1.3.txt:5
msgid "Welcome to Django 1.1.3!"
msgstr ""

# 9ff261bef466491e8cc534869cbb12ae
#: ../../releases/1.1.3.txt:7
msgid ""
"This is the third \"bugfix\" release in the Django 1.1 series, improving the "
"stability and performance of the Django 1.1 codebase."
msgstr ""

# e9a8f9ba180a4492a5beeb5e7724fb42
#: ../../releases/1.1.3.txt:10
msgid ""
"With one exception, Django 1.1.3 maintains backwards compatibility with "
"Django 1.1.2. It also contains a number of fixes and other improvements. "
"Django 1.1.2 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.1."
msgstr ""

# cd0d2820854848f68a76abba69b2f0e5
# 480efebe056a4680981e0892cc177a5c
# b2b4417b214b4230bea08933d694da45
# dd6ed74e9afe4ffea0f73b73d850b42e
# cb20cb9e8dce4229a40f8e0d86e54b69
#: ../../releases/1.1.3.txt:19 ../../releases/1.1.4.txt:19
#: ../../releases/1.2.4.txt:19 ../../releases/1.2.5.txt:19
#: ../../releases/1.4.2.txt:39
msgid "Backwards incompatible changes"
msgstr ""

# 73918e6c90244ec6b078f32f5efcba18
# e77eb777f1d7453c8401744e56123106
# 72771c229f8b49fcba573166a406332a
#: ../../releases/1.1.3.txt:22 ../../releases/1.2.4.txt:22
#: ../../releases/1.3.txt:352
msgid "Restricted filters in admin interface"
msgstr ""

# e7fa60e391ff440fb26e8fec16e6a580
# 22242549a2b8424bba9be4a5d0020042
#: ../../releases/1.1.3.txt:24 ../../releases/1.2.4.txt:24
msgid ""
"The Django administrative interface, django.contrib.admin, supports "
"filtering of displayed lists of objects by fields on the corresponding "
"models, including across database-level relationships. This is implemented "
"by passing lookup arguments in the querystring portion of the URL, and "
"options on the ModelAdmin class allow developers to specify particular "
"fields or relationships which will generate automatic links for filtering."
msgstr ""

# 6d53611897a04253be9b4d78f33f5608
# 51cf5c83d51946a98b070e17756b1051
#: ../../releases/1.1.3.txt:32 ../../releases/1.2.4.txt:32
msgid ""
"One historically-undocumented and -unofficially-supported feature has been "
"the ability for a user with sufficient knowledge of a model's structure and "
"the format of these lookup arguments to invent useful new filters on the fly "
"by manipulating the querystring."
msgstr ""

# 751493fdb53c4695aea11f3c32d11d35
# 6f034b40c6f94f98917e50119cb5f1b7
#: ../../releases/1.1.3.txt:37 ../../releases/1.2.4.txt:37
msgid ""
"However, it has been demonstrated that this can be abused to gain access to "
"information outside of an admin user's permissions; for example, an attacker "
"with access to the admin and sufficient knowledge of model structure and "
"relations could construct query strings which -- with repeated use of "
"regular-expression lookups supported by the Django database API -- expose "
"sensitive information such as users' password hashes."
msgstr ""

# 2db7dcf143ed41b29c22ace8d6d8d5a4
# b91b74652d344a2c8baa5b07d8341105
#: ../../releases/1.1.3.txt:45 ../../releases/1.2.4.txt:45
msgid ""
"To remedy this, django.contrib.admin will now validate that querystring "
"lookup arguments either specify only fields on the model being viewed, or "
"cross relations which have been explicitly whitelisted by the application "
"developer using the pre-existing mechanism mentioned above. This is "
"backwards-incompatible for any users relying on the prior ability to insert "
"arbitrary lookups."
msgstr ""

# 1552d69bd22e4bd39e1effe511974561
#: ../../releases/1.1.4.txt:3
msgid "Django 1.1.4 release notes"
msgstr ""

# 7cfacbd0472c45ada1d5dc974e729d87
#: ../../releases/1.1.4.txt:5
msgid "Welcome to Django 1.1.4!"
msgstr ""

# 7cd2b2c64cd94442a37a7cf28715f3a4
#: ../../releases/1.1.4.txt:7
msgid ""
"This is the fourth \"bugfix\" release in the Django 1.1 series, improving "
"the stability and performance of the Django 1.1 codebase."
msgstr ""

# 79be088b2ae24c5aada9ad6517d28eef
#: ../../releases/1.1.4.txt:10
msgid ""
"With one exception, Django 1.1.4 maintains backwards compatibility with "
"Django 1.1.3. It also contains a number of fixes and other improvements. "
"Django 1.1.4 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.1."
msgstr ""

# 31c7253ef13a41c38d885aa1bda0c082
# 2bbbc8f9dab44f57b9689854251e77d8
#: ../../releases/1.1.4.txt:22 ../../releases/1.2.5.txt:22
msgid "CSRF exception for AJAX requests"
msgstr ""

# 879f90920cff499c84c1cea0d0b72aad
# 10959bc2a21c4c1bb9876b7b37ecb0e4
#: ../../releases/1.1.4.txt:24 ../../releases/1.2.5.txt:24
msgid ""
"Django includes a CSRF-protection mechanism, which makes use of a token "
"inserted into outgoing forms. Middleware then checks for the token's "
"presence on form submission, and validates it."
msgstr ""

# f441237d7a1141f88e6291d758c8a375
# 9dab8585cec04e458d826cfec90ce3a7
#: ../../releases/1.1.4.txt:28 ../../releases/1.2.5.txt:28
msgid ""
"Prior to Django 1.2.5, our CSRF protection made an exception for AJAX "
"requests, on the following basis:"
msgstr ""

# 4fdb6c75c1af4121a1252242e036a7ae
# 2b99691a1588440b8726573129dbb1e5
#: ../../releases/1.1.4.txt:31 ../../releases/1.2.5.txt:31
msgid ""
"Many AJAX toolkits add an X-Requested-With header when using XMLHttpRequest."
msgstr ""

# 38992a425d11402e843c80cbbb489e29
# 3ba2276ef82d48af98ab676c157428cf
#: ../../releases/1.1.4.txt:34 ../../releases/1.2.5.txt:34
msgid "Browsers have strict same-origin policies regarding XMLHttpRequest."
msgstr ""

# 592621cd386449b283e860dbf3c7ecfe
# 80aae300f1694eb190d6d61d01732cfa
#: ../../releases/1.1.4.txt:37 ../../releases/1.2.5.txt:37
msgid ""
"In the context of a browser, the only way that a custom header of this "
"nature can be added is with XMLHttpRequest."
msgstr ""

# e0bb7b1226684d0f8d678e535e3d084f
# a9044926315246219d4db312b0049d08
#: ../../releases/1.1.4.txt:40 ../../releases/1.2.5.txt:40
msgid ""
"Therefore, for ease of use, we did not apply CSRF checks to requests that "
"appeared to be AJAX on the basis of the X-Requested-With header. The Ruby on "
"Rails web framework had a similar exemption."
msgstr ""

# 980dd25eeefd42bb98869ef7195f8d5e
# 618ab3b700054ca2a38e0ae41d4ff156
#: ../../releases/1.1.4.txt:44 ../../releases/1.2.5.txt:44
msgid ""
"Recently, engineers at Google made members of the Ruby on Rails development "
"team aware of a combination of browser plugins and redirects which can allow "
"an attacker to provide custom HTTP headers on a request to any website. This "
"can allow a forged request to appear to be an AJAX request, thereby "
"defeating CSRF protection which trusts the same-origin nature of AJAX "
"requests."
msgstr ""

# b1bd2553f7c24e54a805b56f7ec4d32a
# fc28fb64920546e7a43dc3e92fe7f7ce
#: ../../releases/1.1.4.txt:51 ../../releases/1.2.5.txt:51
msgid ""
"Michael Koziarski of the Rails team brought this to our attention, and we "
"were able to produce a proof-of-concept demonstrating the same vulnerability "
"in Django's CSRF handling."
msgstr ""

# 306ae50fb14d460c886e89f2612a27dd
# 214e7203268e49d6b86a124514a19362
#: ../../releases/1.1.4.txt:55 ../../releases/1.2.5.txt:55
msgid ""
"To remedy this, Django will now apply full CSRF validation to all requests, "
"regardless of apparent AJAX origin. This is technically backwards-"
"incompatible, but the security risks have been judged to outweigh the "
"compatibility concerns in this case."
msgstr ""

# 62452de3472745adb7086695ae378bb5
# 6768a8334c894d05a2caa7250afc28da
#: ../../releases/1.1.4.txt:60 ../../releases/1.2.5.txt:60
msgid ""
"Additionally, Django will now accept the CSRF token in the custom HTTP "
"header X-CSRFTOKEN, as well as in the form submission itself, for ease of "
"use with popular JavaScript toolkits which allow insertion of custom headers "
"into all AJAX requests."
msgstr ""

# 32f5d9e9981f4644a81bdf8d2224c6b3
# b4ea2cd71b1245d3b622f819550a0d90
#: ../../releases/1.1.4.txt:65 ../../releases/1.2.5.txt:65
msgid ""
"Please see the :ref:`CSRF docs for example jQuery code <csrf-ajax>` that "
"demonstrates this technique, ensuring that you are looking at the "
"documentation for your version of Django, as the exact code necessary is "
"different for some older versions of Django."
msgstr ""

# 6e4242c373fc4311b5885327e5af06ad
#: ../../releases/1.2.txt:3
msgid "Django 1.2 release notes"
msgstr ""

# 2fb44092c6b9480e9a6384e6f5a59532
#: ../../releases/1.2.txt:5
msgid "*May 17, 2010.*"
msgstr ""

# 7dbff1fce9bc46f6ae12647235b48780
#: ../../releases/1.2.txt:7
msgid "Welcome to Django 1.2!"
msgstr ""

# 53f20172e6fb46fdac23e162e2a870e9
#: ../../releases/1.2.txt:9
msgid ""
"Nearly a year in the making, Django 1.2 packs an impressive list of `new "
"features`_ and lots of bug fixes. These release notes cover the new "
"features, as well as important changes you'll want to be aware of when "
"upgrading from Django 1.1 or older versions."
msgstr ""

# 10dc15e8a02b45379932feb6c618a960
# 3d14caf283bd41ffa3a3df7fe9024260
# 958ad4c888544a1a9c53fc7029fac5e8
# a27f2de2282247f09054fd31845f25b3
# 2eac8a6313de4a75ac05472eab4b16ea
# 56fe76ce6df443a49f7dbfbbee38eecd
#: ../../releases/1.2.txt:17 ../../releases/1.3.txt:16
#: ../../releases/1.4.txt:21 ../../releases/1.5.txt:21
#: ../../releases/1.5-alpha-1.txt:34 ../../releases/1.5-beta-1.txt:30
msgid "Overview"
msgstr ""

# 348a089f3c0b4509a9424e90752f867c
#: ../../releases/1.2.txt:19
msgid "Django 1.2 introduces several large, important new features, including:"
msgstr ""

# 6134adc7493d4c789a3cf1cbe742fd48
#: ../../releases/1.2.txt:21
msgid ""
"Support for `multiple database connections`_ in a single Django instance."
msgstr ""

# b1a47b0b49bb4a33b4d008c5082051d5
#: ../../releases/1.2.txt:23
msgid "`Model validation`_ inspired by Django's form validation."
msgstr ""

# 3db78f4e262449269c6e001a0036e238
#: ../../releases/1.2.txt:25
msgid ""
"Vastly `improved protection against Cross-Site Request Forgery`_ (CSRF)."
msgstr ""

# d8bdeab36f0d47818a64fdeb39be6069
#: ../../releases/1.2.txt:27
msgid ""
"A new `user \"messages\" framework`_ with support for cookie- and session-"
"based message for both anonymous and authenticated users."
msgstr ""

# 849797c37360441780a272ce1fcfe23b
#: ../../releases/1.2.txt:30
msgid ""
"Hooks for `object-level permissions`_, `permissions for anonymous users`_, "
"and `more flexible username requirements`_."
msgstr ""

# 6c2cb96fc39d41699025605f124df79d
#: ../../releases/1.2.txt:33
msgid "Customization of email sending via `email backends`_."
msgstr ""

# 5bc47afd630c4f7aa0cbd91d40d4635f
#: ../../releases/1.2.txt:35
msgid ""
"New :ref:`\"smart\" if template tag <new-in-1.2-smart-if>` which supports "
"comparison operators."
msgstr ""

# 5e64c859ceb14614938d2dc4be3eeb1d
#: ../../releases/1.2.txt:43
msgid ""
"These are just the highlights; full details and a complete list of features "
"`may be found below`_."
msgstr ""

# f775cef29d744ec79571cfc5581a133e
#: ../../releases/1.2.txt:50
msgid ""
"`Django Advent`_ covered the release of Django 1.2 with a series of articles "
"and tutorials that cover some of the new features in depth."
msgstr ""

# f092b94663f141018d4139446ce7d7f1
#: ../../releases/1.2.txt:55
msgid ""
"Wherever possible these features have been introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy."
msgstr ""

# 10de19327f5c4dfc983b80125d5beda6
#: ../../releases/1.2.txt:58
msgid ""
"However, a handful of features *have* changed in ways that, for some users, "
"will be backwards-incompatible. The big changes are:"
msgstr ""

# fc86499dbbdd4e1286d13b4f89ac1e41
#: ../../releases/1.2.txt:61
msgid "Support for Python 2.3 has been dropped. See the full notes below."
msgstr ""

# 13b281e2a73a4060ab98a2cb0630ea73
#: ../../releases/1.2.txt:64
msgid ""
"The new CSRF protection framework is not backwards-compatible with the old "
"system. Users of the old system will not be affected until the old system is "
"removed in Django 1.4."
msgstr ""

# db429e560f5a42ef939238c7e85bbf48
#: ../../releases/1.2.txt:68
msgid ""
"However, upgrading to the new CSRF protection framework requires a few "
"important backwards-incompatible changes, detailed in `CSRF Protection`_, "
"below."
msgstr ""

# 394f3d71aa2c451f9978cf6ecffb16d1
#: ../../releases/1.2.txt:72
msgid ""
"Authors of custom :class:`~django.db.models.Field` subclasses should be "
"aware that a number of methods have had a change in prototype, detailed "
"under `get_db_prep_*() methods on Field`_, below."
msgstr ""

# 3a8ee1314d6d466da394c99398084853
#: ../../releases/1.2.txt:76
msgid ""
"The internals of template tags have changed somewhat; authors of custom "
"template tags that need to store state (e.g. custom control flow tags) "
"should ensure that their code follows the new rules for `stateful template "
"tags`_"
msgstr ""

# 8e149049fcdd46e8ac067af60ff5f631
#: ../../releases/1.2.txt:81
msgid ""
"The :func:`~django.contrib.auth.decorators.user_passes_test`, :func:`~django."
"contrib.auth.decorators.login_required`, and :func:`~django.contrib.auth."
"decorators.permission_required`, decorators from :mod:`django.contrib.auth` "
"only apply to functions and no longer work on methods. There's a simple one-"
"line fix `detailed below`_."
msgstr ""

# f6c6776ea67b4461a99d0c95d21a45c9
#: ../../releases/1.2.txt:89
msgid ""
"Again, these are just the big features that will affect the most users. "
"Users upgrading from previous versions of Django are heavily encouraged to "
"consult the complete list of :ref:`backwards-incompatible changes <backwards-"
"incompatible-changes-1.2>` and the list of :ref:`deprecated features "
"<deprecated-features-1.2>`."
msgstr ""

# bac3bc5a695741ea8d800481eb7261ab
# afa9275bf99842308344c6545de9c2a7
# 91f5e161285f487b9da3df325e5de07e
# e0dda45593d44274a56b521cfd04e8a9
# 7a61dbc2ae514263ad9730ea7de6b7bc
# 2adbb04b2e3445a9ab484ef4f61f1539
# 4ebadf1348ec45a091e6b59ff1cfec18
# 6ff6cc33adf44f7a94b3c2b03a2989c8
# cb4642798a29440bbbf3cf6151166a84
#: ../../releases/1.2.txt:96 ../../releases/1.2-rc-1.txt:28
#: ../../releases/1.3.txt:54 ../../releases/1.4.txt:63
#: ../../releases/1.4-alpha-1.txt:28 ../../releases/1.4-beta-1.txt:44
#: ../../releases/1.5.txt:70 ../../releases/1.5-alpha-1.txt:83
#: ../../releases/1.5-beta-1.txt:79
msgid "Python compatibility"
msgstr ""

# 352c36ff3f114445aada3119554ec971
# f556937da2494c25a877c357cb2d7b93
#: ../../releases/1.2.txt:98 ../../releases/1.2-rc-1.txt:30
msgid ""
"While not a new feature, it's important to note that Django 1.2 introduces "
"the first shift in our Python compatibility policy since Django's initial "
"public debut. Previous Django releases were tested and supported on 2.x "
"Python versions from 2.3 up; Django 1.2, however, drops official support for "
"Python 2.3. As such, the minimum Python version required for Django is now "
"2.4, and Django is tested and supported on Python 2.4, 2.5 and 2.6, and will "
"be supported on the as-yet-unreleased Python 2.7."
msgstr ""

# d6e3e72a86434d23a80bf3a42a734856
# d386c8f289f544168d63cef255577e12
#: ../../releases/1.2.txt:107 ../../releases/1.2-rc-1.txt:39
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.4 or newer as their "
"default version. If you're still using Python 2.3, however, you'll need to "
"stick to Django 1.1 until you can upgrade; per :doc:`our support policy </"
"internals/release-process>`, Django 1.1 will continue to receive security "
"support until the release of Django 1.3."
msgstr ""

# 5c12f7a5bf4b413fbaee4e506442ad00
# 38489347db01468898400445b3f4792b
#: ../../releases/1.2.txt:114 ../../releases/1.2-rc-1.txt:46
msgid ""
"A roadmap for Django's overall 2.x Python support, and eventual transition "
"to Python 3.x, is currently being developed, and will be announced prior to "
"the release of Django 1.3."
msgstr ""

# 13edf5f7a70044d790666b20aefd0272
#: ../../releases/1.2.txt:119
msgid "What's new in Django 1.2"
msgstr ""

# 38feb834cd4447d7b2587d3d257fb74b
# bca8893a3b8d462ebc19a9a2943ba73e
#: ../../releases/1.2.txt:122 ../../releases/1.2-alpha-1.txt:427
msgid "Support for multiple databases"
msgstr ""

# f6ef873f5f0c49069aff9710b6ad009a
#: ../../releases/1.2.txt:124
msgid ""
"Django 1.2 adds the ability to use :doc:`more than one database </topics/db/"
"multi-db>` in your Django project. Queries can be issued at a specific "
"database with the ``using()`` method on ``QuerySet`` objects. Individual "
"objects can be saved to a specific database by providing a ``using`` "
"argument when you call ``save()``."
msgstr ""

# a2059329db9542c49a5d14aa22a339b3
#: ../../releases/1.2.txt:131
msgid "Model validation"
msgstr ""

# c9f3abc3743f4af1a4bfea26a26087df
#: ../../releases/1.2.txt:133
msgid ""
"Model instances now have support for :ref:`validating their own data "
"<validating-objects>`, and both model and form fields now accept "
"configurable lists of :doc:`validators </ref/validators>` specifying "
"reusable, encapsulated validation behavior. Note, however, that validation "
"must still be performed explicitly. Simply invoking a model instance's "
"``save()`` method will not perform any validation of the instance's data."
msgstr ""

# f5539dc87d58420386ddeeed08125cd5
#: ../../releases/1.2.txt:141
msgid "Improved CSRF protection"
msgstr ""

# 6b0485690d50471ead828fe7df001751
#: ../../releases/1.2.txt:143
msgid ""
"Django now has much improved protection against :doc:`Cross-Site Request "
"Forgery (CSRF) attacks</ref/contrib/csrf>`. This type of attack occurs when "
"a malicious Web site contains a link, a form button or some JavaScript that "
"is intended to perform some action on your Web site, using the credentials "
"of a logged-in user who visits the malicious site in their browser. A "
"related type of attack, \"login CSRF,\" where an attacking site tricks a "
"user's browser into logging into a site with someone else's credentials, is "
"also covered."
msgstr ""

# 05b35751e6b2419eaf472922cc6d910b
#: ../../releases/1.2.txt:152
msgid "Messages framework"
msgstr ""

# 72ea67908e174a39899becfdc22b5d75
# cb7671a8024c47deb0d53ec0d6c98b1d
#: ../../releases/1.2.txt:154 ../../releases/1.2-alpha-1.txt:419
msgid ""
"Django now includes a robust and configurable :doc:`messages framework </ref/"
"contrib/messages>` with built-in support for cookie- and session-based "
"messaging, for both anonymous and authenticated clients. The messages "
"framework replaces the deprecated user message API and allows you to "
"temporarily store messages in one request and retrieve them for display in a "
"subsequent request (usually the next one)."
msgstr ""

# d8e6a067a4884af3a65f85d1c8a1e225
# 86ac0880a39a4e70b695abe4748e0836
#: ../../releases/1.2.txt:162 ../../releases/1.2-beta-1.txt:87
msgid "Object-level permissions"
msgstr ""

# 052840c3a3354b46bfeda3eb6c4cadef
#: ../../releases/1.2.txt:164
msgid ""
"A foundation for specifying permissions at the per-object level has been "
"added. Although there is no implementation of this in core, a custom "
"authentication backend can provide this implementation and it will be used "
"by :class:`django.contrib.auth.models.User`. See the :doc:`authentication "
"docs </topics/auth/index>` for more information."
msgstr ""

# 2defb1fde4a4439c8d36bcb2e63a78b6
# 051c2c21be654f3f9f4c147cd6f8d45b
#: ../../releases/1.2.txt:171 ../../releases/1.2-beta-1.txt:99
msgid "Permissions for anonymous users"
msgstr ""

# 7e6c1c1824c4417a98cde72a7361f56f
#: ../../releases/1.2.txt:173
msgid ""
"If you provide a custom auth backend with ``supports_anonymous_user`` set to "
"``True``, AnonymousUser will check the backend for permissions, just like "
"User already did.  This is useful for centralizing permission handling - "
"apps can always delegate the question of whether something is allowed or not "
"to the authorization/authentication backend. See the :doc:`authentication "
"docs </topics/auth/index>` for more details."
msgstr ""

# cc2986e4b6ca4255ae4fc98a0b399253
#: ../../releases/1.2.txt:181
msgid "Relaxed requirements for usernames"
msgstr ""

# 95860e6a0e4b4073aa1986045cdd2a6e
#: ../../releases/1.2.txt:183
msgid ""
"The built-in :class:`~django.contrib.auth.models.User` model's :attr:"
"`~django.contrib.auth.models.User.username` field now allows a wider range "
"of characters, including ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

# cac1e35a6d5848208e83711d86dd35d2
#: ../../releases/1.2.txt:188
msgid "Email backends"
msgstr ""

# 62be831f24ac44e8bd225be613a773ed
# 3d4f5d53410e4d6398602b505bd3d472
#: ../../releases/1.2.txt:190 ../../releases/1.2-alpha-1.txt:401
msgid ""
"You can now :ref:`configure the way that Django sends email <topic-email-"
"backends>`. Instead of using SMTP to send all email, you can now choose a "
"configurable email backend to send messages. If your hosting provider uses a "
"sandbox or some other non-SMTP technique for sending mail, you can now "
"construct an email backend that will allow Django's standard :doc:`mail "
"sending methods</topics/email>` to use those facilities."
msgstr ""

# 128bf807ed88401486fe7661dbfb3265
#: ../../releases/1.2.txt:198
msgid ""
"This also makes it easier to debug mail sending. Django ships with backend "
"implementations that allow you to send email to a :ref:`file<topic-email-"
"file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :"
"ref:`memory<topic-email-memory-backend>`. You can even configure all email "
"to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

# 8a9823f641814195b0d8efb423088ae2
#: ../../releases/1.2.txt:208
msgid "\"Smart\" :ttag:`if` tag"
msgstr ""

# 2a8fad2f29bb4eccb40bce32a568e70b
#: ../../releases/1.2.txt:210
msgid ""
"The :ttag:`if` tag has been upgraded to be much more powerful. First, we've "
"added support for comparison operators. No longer will you have to type:"
msgstr ""

# 17d566d9f6d24df695839efe1558c012
#: ../../releases/1.2.txt:219
msgid "You can now do this:"
msgstr ""

# 1d67770ddec4499cb1020a60464c5ef0
#: ../../releases/1.2.txt:227
msgid ""
"There's really no reason to use ``{% ifequal %}`` or ``{% ifnotequal %}`` "
"anymore, unless you're the nostalgic type."
msgstr ""

# 8ea5a12c1c884da2a17eb34405224480
#: ../../releases/1.2.txt:230
msgid ""
"The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``, "
"``in`` and ``not in``, all of which work like the Python operators, in "
"addition to ``and``, ``or`` and ``not``, which were already supported."
msgstr ""

# 2b6b7d3ee9704e23a58278605ab38202
# 76db07997e024002ad504ff42ca256ba
#: ../../releases/1.2.txt:234 ../../releases/1.2-alpha-1.txt:459
msgid "Also, filters may now be used in the ``if`` expression. For example:"
msgstr ""

# 6c442a84be2e47ce8882b1622b2b470b
# ea689f1ab0614875a14bf9c46ce48383
#: ../../releases/1.2.txt:245 ../../releases/1.2-alpha-1.txt:470
msgid "Template caching"
msgstr ""

# fe86eeef84c143b196a32a114d122ed3
#: ../../releases/1.2.txt:247
msgid ""
"In previous versions of Django, every time you rendered a template, it would "
"be reloaded from disk. In Django 1.2, you can use a :ref:`cached template "
"loader <template-loaders>` to load templates once, then cache the result for "
"every subsequent render. This can lead to a significant performance "
"improvement if your templates are broken into lots of smaller subtemplates "
"(using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

# 285042843e9f461fbe83520b59227d35
# eb8f2d9862c841a09aee1552af185048
#: ../../releases/1.2.txt:255 ../../releases/1.2-alpha-1.txt:480
msgid ""
"As a side effect, it is now much easier to support non-Django template "
"languages. For more details, see the :ref:`notes on supporting non-Django "
"template languages<topic-template-alternate-language>`."
msgstr ""

# 51fd2702482d48db9972a41a96f35f62
#: ../../releases/1.2.txt:260
msgid "Class-based template loaders"
msgstr ""

# ed8ed2172b9a46999c805816f4ade4f7
#: ../../releases/1.2.txt:262
msgid ""
"As part of the changes made to introduce `Template caching`_  and following "
"a general trend in Django, the template loaders API has been modified to use "
"template loading mechanisms that are encapsulated in Python classes as "
"opposed to functions, the only method available until Django 1.1."
msgstr ""

# 919ae5f7f5154e1d973938830fa3a177
#: ../../releases/1.2.txt:267
msgid ""
"All the template loaders :ref:`shipped with Django <template-loaders>` have "
"been ported to the new API but they still implement the function-based API "
"and the template core machinery still accepts function-based loaders "
"(builtin or third party) so there is no immediate need to modify your :"
"setting:`TEMPLATE_LOADERS` setting in existing projects, things will keep "
"working if you leave it untouched up to and including the Django 1.3 release."
msgstr ""

# c53d87db070c4d7f84c5934a1a6d024f
#: ../../releases/1.2.txt:274
msgid ""
"If you have developed your own custom template loaders we suggest to "
"consider porting them to a class-based implementation because the code for "
"backwards compatibility with function-based loaders starts its deprecation "
"process in Django 1.2 and will be removed in Django 1.4.  There is a "
"description of the API these loader classes must implement :ref:`here <topic-"
"template-alternate-language>` and you can also examine the source code of "
"the loaders shipped with Django."
msgstr ""

# 0a2bd1bbb8d4479595ba520e8510c15b
# fdfd81de492a4c83b2e01ebe42d30c66
#: ../../releases/1.2.txt:283 ../../releases/1.2-alpha-1.txt:485
msgid "Natural keys in fixtures"
msgstr ""

# b0abb33b44d24f55b582140f15427488
#: ../../releases/1.2.txt:285
msgid ""
"Fixtures can now refer to remote objects using :ref:`topics-serialization-"
"natural-keys`. This lookup scheme is an alternative to the normal primary-"
"key based object references in a fixture, improving readability and "
"resolving problems referring to objects whose primary key value may not be "
"predictable or known."
msgstr ""

# 289225e36a534315aa89335d0bb72620
#: ../../releases/1.2.txt:292
msgid "Fast failure for tests"
msgstr ""

# 839f48a32ea140b0adf1c2a76d7d1637
#: ../../releases/1.2.txt:294
msgid ""
"Both the :djadmin:`test` subcommand of ``django-admin.py`` and the "
"``runtests.py`` script used to run Django's own test suite now support a ``--"
"failfast`` option. When specified, this option causes the test runner to "
"exit after encountering a failure instead of continuing with the test run. "
"In addition, the handling of ``Ctrl-C`` during a test run has been improved "
"to trigger a graceful exit from the test run that reports details of the "
"tests that were run before the interruption."
msgstr ""

# eca92e370ae04939a67a887ba19bfe42
# 5030a796a54b4ed4a882c8bbee2eee52
#: ../../releases/1.2.txt:303 ../../releases/1.2-alpha-1.txt:494
msgid "``BigIntegerField``"
msgstr ""

# 4b83773c5c134dd88341163a5c359871
#: ../../releases/1.2.txt:305
msgid ""
"Models can now use a 64-bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

# acb9ca0f4ca44dd097e5b3a659257939
# 2dabde058871485c8fa4dd7eee746034
#: ../../releases/1.2.txt:308 ../../releases/1.2-alpha-1.txt:509
msgid "Improved localization"
msgstr ""

# a2cb0b4c7a5d43dd9170006b0c22b7d0
#: ../../releases/1.2.txt:310
msgid ""
"Django's :doc:`internationalization framework </topics/i18n/index>` has been "
"expanded with locale-aware formatting and form processing. That means, if "
"enabled, dates and numbers on templates will be displayed using the format "
"specified for the current locale. Django will also use localized formats "
"when parsing data in forms. See :ref:`Format localization <format-"
"localization>` for more details."
msgstr ""

# befc5f510d5d44a581e237a54dea78f2
#: ../../releases/1.2.txt:317
msgid "``readonly_fields`` in ``ModelAdmin``"
msgstr ""

# b72c1c20f7db47209da3600238af07c0
#: ../../releases/1.2.txt:319
msgid ""
":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to "
"enable non-editable fields in add/change pages for models and inlines. Field "
"and calculated values can be displayed alongside editable fields."
msgstr ""

# e87a3b012a954c5aba99d4ed4a598225
# e3d258fe064b4ef3a6daaf749e04438b
#: ../../releases/1.2.txt:324 ../../releases/1.2-alpha-1.txt:526
msgid "Customizable syntax highlighting"
msgstr ""

# 8e3dd7b4c75f44b0ae898694c02a5925
#: ../../releases/1.2.txt:326
msgid ""
"You can now use a ``DJANGO_COLORS`` environment variable to modify or "
"disable the colors used by ``django-admin.py`` to provide :ref:`syntax "
"highlighting <syntax-coloring>`."
msgstr ""

# f6da8e01075f42a5b79564c15dc31cd1
#: ../../releases/1.2.txt:331
msgid "Syndication feeds as views"
msgstr ""

# 54e9fdc312f64577a0ed24ac63ac0591
#: ../../releases/1.2.txt:333
msgid ""
":doc:`Syndication feeds </ref/contrib/syndication>` can now be used directly "
"as views in your :doc:`URLconf </topics/http/urls>`. This means that you can "
"maintain complete control over the URL structure of your feeds. Like any "
"other view, feeds views are passed a ``request`` object, so you can do "
"anything you would normally do with a view, like user based access control, "
"or making a feed a named URL."
msgstr ""

# 589ed6eaf7934fa18d7bbab1aa2f6588
#: ../../releases/1.2.txt:343
msgid ""
"The most significant new feature for :doc:`GeoDjango </ref/contrib/gis/"
"index>` in 1.2 is support for multiple spatial databases.  As a result, the "
"following :ref:`spatial database backends <spatial-backends>` are now "
"included:"
msgstr ""

# aa042495fcb84713bf357c35de987529
#: ../../releases/1.2.txt:348
msgid "``django.contrib.gis.db.backends.postgis``"
msgstr ""

# 9ff4eeb47d4f4b16b0e8d0521cbe7238
#: ../../releases/1.2.txt:349
msgid "``django.contrib.gis.db.backends.mysql``"
msgstr ""

# 97df48ff3128422c84bea76e2835b8c3
#: ../../releases/1.2.txt:350
msgid "``django.contrib.gis.db.backends.oracle``"
msgstr ""

# db01dc76bc65480aba198f8a0443da01
#: ../../releases/1.2.txt:351
msgid "``django.contrib.gis.db.backends.spatialite``"
msgstr ""

# 72b44791386046dfa9741012f60d9ecd
#: ../../releases/1.2.txt:353
msgid ""
"GeoDjango now supports the rich capabilities added in the `PostGIS 1.5 "
"release <http://postgis.refractions.net/documentation/manual-1.5/>`_. New "
"features include suppport for the :ref:`geography type <geography-type>` and "
"enabling of :ref:`distance queries <distance-queries>` with non-point "
"geometries on geographic coordinate systems."
msgstr ""

# a80115805d7949aaac173a02ddace116
#: ../../releases/1.2.txt:359
msgid ""
"Support for 3D geometry fields was added, and may be enabled by setting the :"
"attr:`~django.contrib.gis.db.models.GeometryField.dim` keyword to 3 in your :"
"class:`~django.contrib.gis.db.models.GeometryField`. The :class:`~django."
"contrib.gis.db.models.Extent3D` aggregate and :meth:`~django.contrib.gis.db."
"models.GeoQuerySet.extent3d` ``GeoQuerySet`` method were added as a part of "
"this feature."
msgstr ""

# b45336c461494704b8b8bf3681fff804
#: ../../releases/1.2.txt:366
msgid ""
"The following :class:`~django.contrib.gis.db.models.GeoQuerySet` methods are "
"new in 1.2:"
msgstr ""

# 3876ec27835e44a9be112cd99b13a344
#: ../../releases/1.2.txt:369
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.force_rhr`"
msgstr ""

# c1bddc1dabf541d2b3026a2ef8b45fa4
#: ../../releases/1.2.txt:370
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.reverse_geom`"
msgstr ""

# 82cd22e115ce43a9a23833d239f3aeb9
#: ../../releases/1.2.txt:371
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.geohash`"
msgstr ""

# 3fadbbbb476746538bc15e8b5400a9e0
#: ../../releases/1.2.txt:373
msgid ""
"The :ref:`GEOS interface <ref-geos>` was updated to use thread-safe C "
"library functions when available on the platform."
msgstr ""

# c18851f0934a4053b45f29ee46f9fcf1
#: ../../releases/1.2.txt:376
msgid ""
"The :ref:`GDAL interface <ref-gdal>` now allows the user to set a :attr:"
"`~django.contrib.gis.gdal.Layer.spatial_filter` on the features returned "
"when iterating over a :class:`~django.contrib.gis.gdal.Layer`."
msgstr ""

# 188cd01e07dc427d94fff85094c38451
#: ../../releases/1.2.txt:381
msgid ""
"Finally, :doc:`GeoDjango's documentation </ref/contrib/gis/index>` is now "
"included with Django's and is no longer hosted separately at `geodjango.org "
"<http://geodjango.org/>`_."
msgstr ""

# a6aea1c7839643e78082dda1cfc0e5e8
#: ../../releases/1.2.txt:388
msgid "JavaScript-assisted handling of inline related objects in the admin"
msgstr ""

# 82b16f1b35754620a1b72e79fafb4782
#: ../../releases/1.2.txt:390
msgid ""
"If a user has JavaScript enabled in their browser, the interface for inline "
"objects in the admin now allows inline objects to be dynamically added and "
"removed. Users without JavaScript-enabled browsers will see no change in the "
"behavior of inline objects."
msgstr ""

# 2026cab00bbe48b8a4d941f65caac5d5
#: ../../releases/1.2.txt:396
msgid "New ``now`` template tag format specifier characters: ``c`` and ``u``"
msgstr ""

# 20c5857d71d141d59e76f23322667988
#: ../../releases/1.2.txt:398
msgid ""
"The argument to the :ttag:`now` has gained two new format characters: ``c`` "
"to specify that a datetime value should be formatted in ISO 8601 format, and "
"``u`` that allows output of the microseconds part of a datetime or time "
"value."
msgstr ""

# 57f9da884f0f4d55a325ac792c560847
#: ../../releases/1.2.txt:403
msgid ""
"These are also available in others parts like the :tfilter:`date` and :"
"tfilter:`time` template filters, the ``humanize`` template tag library and "
"the new `format localization`_ framework."
msgstr ""

# d545f4f98aeb417d9adc7e9069bd8b56
# d4a2415950b84c23bb1bd72a35b895f3
#: ../../releases/1.2.txt:412 ../../releases/1.2-alpha-1.txt:20
msgid "Backwards-incompatible changes in 1.2"
msgstr ""

# bb211c862dc446a99e40f3d258ed4ca7
#: ../../releases/1.2.txt:414
msgid ""
"Wherever possible the new features above have been introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy. This means that practically all existing code which worked with "
"Django 1.1 will continue to work with Django 1.2; such code will, however, "
"begin issuing warnings (see below for details)."
msgstr ""

# 80f3d2a60b324ab888ce6ad6f82966f1
#: ../../releases/1.2.txt:421
msgid ""
"However, a handful of features *have* changed in ways that, for some users, "
"will be immediately backwards-incompatible. Those changes are detailed below."
msgstr ""

# 46876564158942919221892fef6bfa86
# 443372de7f6542b98adcd5d2c46acfa7
#: ../../releases/1.2.txt:426 ../../releases/1.2-alpha-1.txt:23
msgid "CSRF Protection"
msgstr ""

# b73419d0b0d04508b045528da8c334d6
#: ../../releases/1.2.txt:428
msgid ""
"We've made large changes to the way CSRF protection works, detailed in :doc:"
"`the CSRF documentation </ref/contrib/csrf>`. Here are the major changes you "
"should be aware of:"
msgstr ""

# 48223acb5324419880ca2c94f2d67949
#: ../../releases/1.2.txt:432
msgid ""
"``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated and "
"will be removed completely in Django 1.4, in favor of a template tag that "
"should be inserted into forms."
msgstr ""

# 619afa354cc349afbc6b6eb7745c7472
#: ../../releases/1.2.txt:436
msgid ""
"All contrib apps use a ``csrf_protect`` decorator to protect the view. This "
"requires the use of the ``csrf_token`` template tag in the template. If you "
"have used custom templates for contrib views, you MUST READ THE UPGRADE "
"INSTRUCTIONS to fix those templates."
msgstr ""

# c497d08ab75c4ecf960d474a89291d37
# 171bd7d4349f45e3b385598f64f3b6ec
# 0e7eb19aa6ab400b9c514a6ab329a723
# 6f1c02ea76674af7bb78bf00df4c467d
#: ../../releases/1.2.txt:441 ../../releases/1.2.txt:869
#: ../../releases/1.2-alpha-1.txt:38 ../../releases/1.2-alpha-1.txt:206
msgid "Documentation removed"
msgstr ""

# a6da9b4eb2b24736b9bd0e66499304c3
# 951fc0e1bacb4c3a837f5b6ecd0a6d27
# 354c1dce4d8f4076a1b428fc9aa57fcc
# 60b199433cd14a63b47a296813dd970a
#: ../../releases/1.2.txt:443 ../../releases/1.2.txt:871
#: ../../releases/1.2-alpha-1.txt:40 ../../releases/1.2-alpha-1.txt:208
msgid ""
"The upgrade notes have been removed in current Django docs. Please refer to "
"the docs for Django 1.3 or older to find these instructions."
msgstr ""

# 3bb51a5ba51d423f8668a52f1e4ebf3a
#: ../../releases/1.2.txt:446
msgid ""
"``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by "
"default. This turns on CSRF protection by default, so views that accept POST "
"requests need to be written to work with the middleware. Instructions on how "
"to do this are found in the CSRF docs."
msgstr ""

# d1753b8b418042d7bacffdfd48441585
#: ../../releases/1.2.txt:451
msgid ""
"All of the CSRF has moved from contrib to core (with backwards compatible "
"imports in the old locations, which are deprecated and will cease to be "
"supported in Django 1.4)."
msgstr ""

# 746d21ed6021496fbf3c6624e784216e
#: ../../releases/1.2.txt:456
msgid "``get_db_prep_*()`` methods on ``Field``"
msgstr ""

# 8d9bbcad62cb4357b6e208ab84cebc89
#: ../../releases/1.2.txt:458
msgid ""
"Prior to Django 1.2, a custom ``Field`` had the option of defining several "
"functions to support conversion of Python values into database-compatible "
"values. A custom field might look something like::"
msgstr ""

# 3f88164da2144cfebb2ec58125173d1f
# 3488de7fff104b038962694dfbe45d60
#: ../../releases/1.2.txt:476 ../../releases/1.2-alpha-1.txt:117
msgid ""
"In 1.2, these three methods have undergone a change in prototype, and two "
"extra methods have been introduced::"
msgstr ""

# ce657d763d8a479f818b8717c901b134
#: ../../releases/1.2.txt:500
msgid ""
"These changes are required to support multiple databases -- ``db_type`` and "
"``get_db_prep_*`` can no longer make any assumptions regarding the database "
"for which it is preparing. The ``connection`` argument now provides the "
"preparation methods with the specific connection for which the value is "
"being prepared."
msgstr ""

# 4dcfda86bbc2497781a54ab3ba69b6fa
#: ../../releases/1.2.txt:506
msgid ""
"The two new methods exist to differentiate general data-preparation "
"requirements from requirements that are database-specific. The ``prepared`` "
"argument is used to indicate to the database-preparation methods whether "
"generic value preparation has been performed. If an unprepared (i.e., "
"``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they "
"should invoke the corresponding ``get_prep_*()`` calls to perform generic "
"data preparation."
msgstr ""

# 5aa5cb3c1d334bc4ae7ff1db1db91ada
#: ../../releases/1.2.txt:514
msgid ""
"We've provided conversion functions that will transparently convert "
"functions adhering to the old prototype into functions compatible with the "
"new prototype. However, these conversion functions will be removed in Django "
"1.4, so you should upgrade your ``Field`` definitions to use the new "
"prototype as soon as possible."
msgstr ""

# a364fdb2566c4b7dad308493f3932784
#: ../../releases/1.2.txt:520
msgid ""
"If your ``get_db_prep_*()`` methods made no use of the database connection, "
"you should be able to upgrade by renaming ``get_db_prep_value()`` to "
"``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()``. "
"If you require database specific conversions, then you will need to provide "
"an implementation ``get_db_prep_*`` that uses the ``connection`` argument to "
"resolve database-specific values."
msgstr ""

# e6306a9f96714d8c8c039db042f99b85
# 62fd834fcad5416fa09fa4629b95eb4e
#: ../../releases/1.2.txt:529 ../../releases/1.2-alpha-1.txt:167
msgid "Stateful template tags"
msgstr ""

# 632b2612add04f75996ec578b05ab025
#: ../../releases/1.2.txt:531
msgid ""
"Template tags that store rendering state on their ``Node`` subclass have "
"always been vulnerable to thread-safety and other issues; as of Django 1.2, "
"however, they may also cause problems when used with the new :ref:`cached "
"template loader<template-loaders>`."
msgstr ""

# 2a4aa43b70ef48ac91ccf8e5aad888d6
#: ../../releases/1.2.txt:536
msgid ""
"All of the built-in Django template tags are safe to use with the cached "
"loader, but if you're using custom template tags that come from third party "
"packages, or from your own code, you should ensure that the ``Node`` "
"implementation for each tag is thread-safe. For more information, see :ref:"
"`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

# 244ff0d36a03400e86f0a11198b3c25b
#: ../../releases/1.2.txt:543
msgid ""
"You may also need to update your templates if you were relying on the "
"implementation of Django's template tags *not* being thread safe. The :ttag:"
"`cycle` tag is the most likely to be affected in this way, especially when "
"used in conjunction with the :ttag:`include` tag. Consider the following "
"template fragment::"
msgstr ""

# 8d0a53576c7d4699925e536b21c7eeed
#: ../../releases/1.2.txt:553
msgid "with a ``subtemplate.html`` that reads::"
msgstr ""

# 3162cfca1c114dcb8e3ac56c06010765
#: ../../releases/1.2.txt:557
msgid "Using the non-thread-safe, pre-Django 1.2 renderer, this would output::"
msgstr ""

# d40491c4ce8e461c8678b3539a2faace
#: ../../releases/1.2.txt:561
msgid "Using the thread-safe Django 1.2 renderer, you will instead get::"
msgstr ""

# 6d8a440646044a639102fb18f601186b
#: ../../releases/1.2.txt:565
msgid ""
"This is because each rendering of the :ttag:`include` tag is an independent "
"rendering. When the :ttag:`cycle` tag was not thread safe, the state of the :"
"ttag:`cycle` tag would leak between multiple renderings of the same :ttag:"
"`include`. Now that the :ttag:`cycle` tag is thread safe, this leakage no "
"longer occurs."
msgstr ""

# 6276710b3aac409594920b33137a2331
#: ../../releases/1.2.txt:572
msgid "``user_passes_test``, ``login_required`` and ``permission_required``"
msgstr ""

# 69833c495add487d85bfc98506c4b742
#: ../../releases/1.2.txt:574
msgid ""
"``django.contrib.auth.decorators`` provides the decorators "
"``login_required``, ``permission_required`` and ``user_passes_test``. "
"Previously it was possible to use these decorators both on functions (where "
"the first argument is 'request') and on methods (where the first argument is "
"'self', and the second argument is 'request'). Unfortunately, flaws were "
"discovered in the code supporting this: it only works in limited "
"circumstances, and produces errors that are very difficult to debug when it "
"does not work."
msgstr ""

# 28e58143f429457d82ebedf0b2208f76
#: ../../releases/1.2.txt:584
msgid ""
"For this reason, the 'auto adapt' behavior has been removed, and if you are "
"using these decorators on methods, you will need to manually apply :func:"
"`django.utils.decorators.method_decorator` to convert the decorator to one "
"that works with methods. For example, you would change code from this::"
msgstr ""

# 79c6fe1c2ce84b0dbd644d55ed5597b3
#: ../../releases/1.2.txt:606
msgid "or::"
msgstr ""

# 1ca3c891b7774b00b549ffaed5eb2ad7
#: ../../releases/1.2.txt:618
msgid ""
"For those of you who've been following the development trunk, this change "
"also applies to other decorators introduced since 1.1, including "
"``csrf_protect``, ``cache_control`` and anything created using "
"``decorator_from_middleware``."
msgstr ""

# abb8f0d6698d46c7b07b658b000d8095
# c24f5a43933f4541ac061b80dcaed3fa
#: ../../releases/1.2.txt:624 ../../releases/1.2-alpha-1.txt:53
msgid ":ttag:`if` tag changes"
msgstr ""

# 1429466975524daabf9bdddcfbfbe8fb
#: ../../releases/1.2.txt:626
msgid ""
"Due to new features in the :ttag:`if` template tag, it no longer accepts "
"'and', 'or' and 'not' as valid **variable** names. Previously, these strings "
"could be used as variable names. Now, the keyword status is always enforced, "
"and template code such as ``{% if not %}`` or ``{% if and %}`` will throw a "
"``TemplateSyntaxError``. Also, ``in`` is a new keyword and so is not a valid "
"variable name in this tag."
msgstr ""

# d3ae79e2b88241d28f455e028cf0f7ee
# 9627dec601fe46cf8068cb9f31061c67
#: ../../releases/1.2.txt:634 ../../releases/1.2-alpha-1.txt:62
msgid "``LazyObject``"
msgstr ""

# be46250a0e814dbbb4398c608f329a0d
#: ../../releases/1.2.txt:636
msgid ""
"``LazyObject`` is an undocumented-but-often-used utility class used for "
"lazily wrapping other objects of unknown type."
msgstr ""

# 9c2f079a06654833b9501281409ef2bd
#: ../../releases/1.2.txt:639
msgid ""
"In Django 1.1 and earlier, it handled introspection in a non-standard way, "
"depending on wrapped objects implementing a public method named "
"``get_all_members()``. Since this could easily lead to name clashes, it has "
"been changed to use the standard Python introspection method, involving "
"``__members__`` and ``__dir__()``."
msgstr ""

# c2b3a81b26834993a58ad42c314dc6a8
#: ../../releases/1.2.txt:645
msgid ""
"If you used ``LazyObject`` in your own code and implemented the "
"``get_all_members()`` method for wrapped objects, you'll need to make a "
"couple of changes:"
msgstr ""

# 0aa5baad1f4f417386b8f9c045191953
#: ../../releases/1.2.txt:649
msgid ""
"First, if your class does not have special requirements for introspection (i."
"e., you have not implemented ``__getattr__()`` or other methods that allow "
"for attributes not discoverable by normal mechanisms), you can simply remove "
"the ``get_all_members()`` method. The default implementation on "
"``LazyObject`` will do the right thing."
msgstr ""

# 4a52ca6133cd44e4832b387ea4bea0bd
#: ../../releases/1.2.txt:655
msgid ""
"If you have more complex requirements for introspection, first rename the "
"``get_all_members()`` method to ``__dir__()``. This is the standard "
"introspection method for Python 2.6 and above. If you require support for "
"Python versions earlier than 2.6, add the following code to the class::"
msgstr ""

# 231500b28dd2495c916cb524c7154ade
#: ../../releases/1.2.txt:663
msgid "``__dict__`` on model instances"
msgstr ""

# 4703ddd28a4e40f5bc1c768329435f40
# 44ee2bd38365407bbd76cc908d3d630b
#: ../../releases/1.2.txt:665 ../../releases/1.2-alpha-1.txt:89
msgid ""
"Historically, the ``__dict__`` attribute of a model instance has only "
"contained attributes corresponding to the fields on a model."
msgstr ""

# 60739b7ea15b457d87da9eaddc087ee2
#: ../../releases/1.2.txt:668
msgid ""
"In order to support multiple database configurations, Django 1.2 has added a "
"``_state`` attribute to object instances. This attribute will appear in "
"``__dict__`` for a model instance. If your code relies on iterating over "
"``__dict__`` to obtain a list of fields, you must now be prepared to handle "
"or filter out the ``_state`` attribute."
msgstr ""

# 686cb3b591084c62a2226895b5243a21
#: ../../releases/1.2.txt:677
msgid ""
"The exit status code of the test runners (``tests/runtests.py`` and ``python "
"manage.py test``) no longer represents the number of failed tests, because a "
"failure of 256 or more tests resulted in a wrong exit status code. The exit "
"status code for the test runner is now 0 for success (no failing tests) and "
"1 for any number of test failures. If needed, the number of test failures "
"can be found at the end of the test runner's output."
msgstr ""

# a31ff6af7ffc4fea834935c49fdf809c
#: ../../releases/1.2.txt:687
msgid ""
"To fix bugs with cookies in Internet Explorer, Safari, and possibly other "
"browsers, our encoding of cookie values was changed so that the comma and "
"semicolon are treated as non-safe characters, and are therefore encoded as ``"
"\\054`` and ``\\073`` respectively.  This could produce backwards "
"incompatibilities, especially if you are storing comma or semi-colon in "
"cookies and have javascript code that parses and manipulates cookie values "
"client-side."
msgstr ""

# 32a065e23ac6496f94768306b8dba1b9
#: ../../releases/1.2.txt:696
msgid "``ModelForm.is_valid()`` and ``ModelForm.errors``"
msgstr ""

# f69da45847274972b48e1174146a18e9
#: ../../releases/1.2.txt:698
msgid ""
"Much of the validation work for ModelForms has been moved down to the model "
"level. As a result, the first time you call ``ModelForm.is_valid()``, access "
"``ModelForm.errors`` or otherwise trigger form validation, your model will "
"be cleaned in-place. This conversion used to happen when the model was "
"saved. If you need an unmodified instance of your model, you should pass a "
"copy to the ``ModelForm`` constructor."
msgstr ""

# 1767ef17c8ef4937bf2fa969a6e339d7
#: ../../releases/1.2.txt:706
msgid "``BooleanField`` on MySQL"
msgstr ""

# d9a6c229619c4f4c9eba2bef66312f58
#: ../../releases/1.2.txt:708
msgid ""
"In previous versions of Django, a model's ``BooleanField`` under MySQL would "
"return its value as either ``1`` or ``0``, instead of ``True`` or ``False``; "
"for most people this wasn't a problem because ``bool`` is a subclass of "
"``int`` in Python. In Django 1.2, however, ``BooleanField`` on MySQL "
"correctly returns a real ``bool``.  The only time this should ever be an "
"issue is if you were expecting the ``repr`` of a ``BooleanField`` to print "
"``1`` or ``0``."
msgstr ""

# 30561684907e47d180b599afcf0ee552
#: ../../releases/1.2.txt:717
msgid "Changes to the interpretation of ``max_num`` in FormSets"
msgstr ""

# 379352fb95554812853f1e003fbf734d
#: ../../releases/1.2.txt:719
msgid ""
"As part of enhancements made to the handling of FormSets, the default value "
"and interpretation of the ``max_num`` parameter to the :ref:`django.forms."
"formsets.formset_factory() <formsets-max-num>` and :ref:`django.forms.models."
"modelformset_factory() <model-formsets-max-num>` functions has changed "
"slightly. This change also affects the way the ``max_num`` argument is :ref:"
"`used for inline admin objects <ref-contrib-admin-inline-max-num>`"
msgstr ""

# d032e261a7414f4ba67446b7e4661b74
#: ../../releases/1.2.txt:727
msgid ""
"Previously, the default value for ``max_num`` was ``0`` (zero). FormSets "
"then used the boolean value of ``max_num`` to determine if a limit was to be "
"imposed on the number of generated forms. The default value of ``0`` meant "
"that there was no default limit on the number of forms in a FormSet."
msgstr ""

# 0d93c04c2d6f4dad8c827a751b5c0d3d
#: ../../releases/1.2.txt:733
msgid ""
"Starting with 1.2, the default value for ``max_num`` has been changed to "
"``None``, and FormSets will differentiate between a value of ``None`` and a "
"value of ``0``. A value of ``None`` indicates that no limit on the number of "
"forms is to be imposed; a value of ``0`` indicates that a maximum of 0 forms "
"should be imposed. This doesn't necessarily mean that no forms will be "
"displayed -- see the :ref:`ModelFormSet documentation <model-formsets-max-"
"num>` for more details."
msgstr ""

# 0cf5fe3b46df4536b2efe2a8955e50d7
#: ../../releases/1.2.txt:742
msgid ""
"If you were manually specifying a value of ``0`` for ``max_num``, you will "
"need to update your FormSet and/or admin definitions."
msgstr ""

# 454959db2bba400aaa7b17cfe319c3cc
#: ../../releases/1.2.txt:747
msgid ":ref:`1.2-js-assisted-inlines`"
msgstr ""

# 62d6b56c41b2432e9bca2b3b1ffac618
#: ../../releases/1.2.txt:750
msgid "``email_re``"
msgstr ""

# dbca8759d9564ec38c93affb984048b1
#: ../../releases/1.2.txt:752
msgid ""
"An undocumented regular expression for validating email addresses has been "
"moved from ``django.form.fields`` to ``django.core.validators``. You will "
"need to update your imports if you are using it."
msgstr ""

# f4fdfc46b2ec48ac8ac43b49db5e9822
# 14e06f6df2914439a8bfcc6822cccc89
#: ../../releases/1.2.txt:759 ../../releases/1.2-alpha-1.txt:191
msgid "Features deprecated in 1.2"
msgstr ""

# d9f6572b1ece43f2ade0d7085a9908b7
#: ../../releases/1.2.txt:761
msgid ""
"Finally, Django 1.2 deprecates some features from earlier releases. These "
"features are still supported, but will be gradually phased out over the next "
"few release cycles."
msgstr ""

# 8e4e1cfa74f942edb2d8931aac1c311c
#: ../../releases/1.2.txt:765
msgid ""
"Code taking advantage of any of the features below will raise a "
"``PendingDeprecationWarning`` in Django 1.2. This warning will be silent by "
"default, but may be turned on using Python's :mod:`warnings` module, or by "
"running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""

# 68c5d989d0624b81983ee2922e07c993
#: ../../releases/1.2.txt:770
msgid ""
"In Django 1.3, these warnings will become a ``DeprecationWarning``, which is "
"*not* silent. In Django 1.4 support for these features will be removed "
"entirely."
msgstr ""

# 2efb4a890f9044078c49480d6de889a1
#: ../../releases/1.2.txt:776
msgid ""
"For more details, see the documentation :doc:`Django's release process </"
"internals/release-process>` and our :doc:`deprecation timeline </internals/"
"deprecation>`.`"
msgstr ""

# fd2740a8b76040fca97620d30138ce59
# 7a5998eb5623434e8ed4614a8d13e1d0
#: ../../releases/1.2.txt:783 ../../releases/1.2-alpha-1.txt:248
msgid "Specifying databases"
msgstr ""

# c999d35cda8c48ce92074923366aba8f
#: ../../releases/1.2.txt:785
msgid ""
"Prior to Django 1.2, Django used a number of settings to control access to a "
"single database. Django 1.2 introduces support for multiple databases, and "
"as a result the way you define database settings has changed."
msgstr ""

# a46bb42ca45e4144ad7cd51f1ded2a5e
#: ../../releases/1.2.txt:790
msgid ""
"Any existing Django settings file will continue to work as expected until "
"Django 1.4. Until then, old-style database settings will be automatically "
"translated to the new-style format."
msgstr ""

# 339b297fac024d01bf50c30e2de80ea4
#: ../../releases/1.2.txt:794
msgid ""
"In the old-style (pre 1.2) format, you had a number of ``DATABASE_`` "
"settings in your settings file. For example::"
msgstr ""

# 17efaa67a0944ff7b3a5f23ac1345960
#: ../../releases/1.2.txt:802
msgid ""
"These settings are now in a dictionary named :setting:`DATABASES`. Each item "
"in the dictionary corresponds to a single database connection, with the name "
"``'default'`` describing the default database connection. The setting names "
"have also been shortened. The previous sample settings would now look like "
"this::"
msgstr ""

# 8775bf20c5414a1fbbfebd7da6fa2270
# 0c4f7af18d8a4d799f009107eb205245
#: ../../releases/1.2.txt:817 ../../releases/1.2-alpha-1.txt:283
msgid "This affects the following settings:"
msgstr ""

# 38b50f3337fd416b926e3a2663624e63
# a4ac422bbe6240f08db0369025326766
#: ../../releases/1.2.txt:820 ../../releases/1.2-alpha-1.txt:286
msgid "Old setting"
msgstr ""

# 2db668a81b934822bd1bf7d6917880d0
# 37d6859e997b4e37ac7838b1b601f6be
#: ../../releases/1.2.txt:820 ../../releases/1.2-alpha-1.txt:286
msgid "New Setting"
msgstr ""

# ac721ed4c23541dca00d45ff764991c1
# add257ab6f0448e38e803f55501b4e27
#: ../../releases/1.2.txt:822 ../../releases/1.2-alpha-1.txt:288
msgid "`DATABASE_ENGINE`"
msgstr ""

# 6ddd9a4d2ee44545a9a15795b63b2496
# 5de4b24b75b042a0b85acc0e72b1c1b7
#: ../../releases/1.2.txt:822 ../../releases/1.2-alpha-1.txt:288
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ""

# e052fdfe4aee4dd486a1246daba72a9a
# 0003f4a467c7479e8cf453d818b74717
#: ../../releases/1.2.txt:823 ../../releases/1.2-alpha-1.txt:289
msgid "`DATABASE_HOST`"
msgstr ""

# e3590a72fe6b470c99b279a941fff7f3
# 69fccc7d0ef14e38af5d97683f17147f
#: ../../releases/1.2.txt:823 ../../releases/1.2-alpha-1.txt:289
msgid ":setting:`HOST`"
msgstr ""

# 6a8444166e8441d3887946ef94da044f
# 17a52e59d78c4a9985b5688bf442357c
#: ../../releases/1.2.txt:824 ../../releases/1.2-alpha-1.txt:290
msgid "`DATABASE_NAME`"
msgstr ""

# e6fc57538a5d4dd6a522cd620619515f
# 3dbb1d562fe3407cb59d429b7fb2d0d2
#: ../../releases/1.2.txt:824 ../../releases/1.2-alpha-1.txt:290
msgid ":setting:`NAME`"
msgstr ""

# 9e1abc3dc4824556a9ff8c72dbf8e542
# d0e287f820714a178df5151fcfe66902
#: ../../releases/1.2.txt:825 ../../releases/1.2-alpha-1.txt:291
msgid "`DATABASE_OPTIONS`"
msgstr ""

# 8c825ad6fa4b49ccb3cb6e5673a194e5
# c9f64c9e014f42d190a27788237c7755
#: ../../releases/1.2.txt:825 ../../releases/1.2-alpha-1.txt:291
msgid ":setting:`OPTIONS`"
msgstr ""

# acb95496583448d59a42269e456240be
# 1ec9335ff3854622ae9c5b5b463202b5
#: ../../releases/1.2.txt:826 ../../releases/1.2-alpha-1.txt:292
msgid "`DATABASE_PASSWORD`"
msgstr ""

# 6280cf6e7ec84ae7929a642d2fa265b6
# 18af126dd2d84a0fba8f12023c1185af
#: ../../releases/1.2.txt:826 ../../releases/1.2-alpha-1.txt:292
msgid ":setting:`PASSWORD`"
msgstr ""

# 6121440d5ba84750b0cd73a4a80e20b2
# 8a69f68b716849878b8e0e6b35044103
#: ../../releases/1.2.txt:827 ../../releases/1.2-alpha-1.txt:293
msgid "`DATABASE_PORT`"
msgstr ""

# 51b7030c4d9140d0a0fa607e58e28dbf
# f474ce2f586d49819c74a1113b3c7b8b
#: ../../releases/1.2.txt:827 ../../releases/1.2-alpha-1.txt:293
msgid ":setting:`PORT`"
msgstr ""

# f1f5e7c11ec24aa285919c6ddc31cad2
# fce11ffbf4cb44a29fe6c9a24fb1e342
#: ../../releases/1.2.txt:828 ../../releases/1.2-alpha-1.txt:294
msgid "`DATABASE_USER`"
msgstr ""

# ed752648b2294e649c51b935a1146c33
# 8ea02da748aa44c0a44a760cf3c3a1d5
#: ../../releases/1.2.txt:828 ../../releases/1.2-alpha-1.txt:294
msgid ":setting:`USER`"
msgstr ""

# bc2064112d304fb4868f3788e3eb8fae
# 015f130d5ff54124bc9e884686b77199
#: ../../releases/1.2.txt:829 ../../releases/1.2-alpha-1.txt:295
msgid "`TEST_DATABASE_CHARSET`"
msgstr ""

# bb8169a42007423fb3234c1dce69562f
# e9a36985f0a84edb917df194f7c7136c
#: ../../releases/1.2.txt:829 ../../releases/1.2-alpha-1.txt:295
msgid ":setting:`TEST_CHARSET`"
msgstr ""

# e32b1c6e613f4ffebb00bf14a624434a
# 019805f49d8f405a9152ee318d01e44a
#: ../../releases/1.2.txt:830 ../../releases/1.2-alpha-1.txt:296
msgid "`TEST_DATABASE_COLLATION`"
msgstr ""

# ce71d368c8b6454b84f0f497235d1ddb
# 6f8ead4f8f684196b24a0c5f281f2136
#: ../../releases/1.2.txt:830 ../../releases/1.2-alpha-1.txt:296
msgid ":setting:`TEST_COLLATION`"
msgstr ""

# 1e91a88aabd643cfb105c43a82671d8f
# 6380b48fb96d4df4a88468e6f569404d
#: ../../releases/1.2.txt:831 ../../releases/1.2-alpha-1.txt:297
msgid "`TEST_DATABASE_NAME`"
msgstr ""

# ba3671177fe74552ad509cf222e220a1
# 341ff802159d4e43870be4e5cc575afe
#: ../../releases/1.2.txt:831 ../../releases/1.2-alpha-1.txt:297
msgid ":setting:`TEST_NAME`"
msgstr ""

# 2b347283b074439b9d35ad13b1f4ca70
# 705d88ec62174ee5800141bffdd28b20
#: ../../releases/1.2.txt:834 ../../releases/1.2-alpha-1.txt:300
msgid ""
"These changes are also required if you have manually created a database "
"connection using ``DatabaseWrapper()`` from your database backend of choice."
msgstr ""

# 511309b4ce59422496f1b09b16cbc9aa
# 8e759328676d47f59aba3ea26f1df700
#: ../../releases/1.2.txt:837 ../../releases/1.2-alpha-1.txt:303
msgid ""
"In addition to the change in structure, Django 1.2 removes the special "
"handling for the built-in database backends. All database backends must now "
"be specified by a fully qualified module name (i.e., ``django.db.backends."
"postgresql_psycopg2``, rather than just ``postgresql_psycopg2``)."
msgstr ""

# a91a24a2647445faa0172094e31d73aa
#: ../../releases/1.2.txt:844
msgid "``postgresql`` database backend"
msgstr ""

# f44dcad1f55d4e3996e69f0d6ea3c038
#: ../../releases/1.2.txt:846
msgid ""
"The ``psycopg1`` library has not been updated since October 2005. As a "
"result, the ``postgresql`` database backend, which uses this library, has "
"been deprecated."
msgstr ""

# d92a949a1d5845868e3191de76243f38
#: ../../releases/1.2.txt:850
msgid ""
"If you are currently using the ``postgresql`` backend, you should migrate to "
"using the ``postgresql_psycopg2`` backend. To update your code, install the "
"``psycopg2`` library and change the :setting:`ENGINE <DATABASE-ENGINE>` "
"setting to use ``django.db.backends.postgresql_psycopg2``."
msgstr ""

# 77d8ae19b9b04cafa085a58d2a69d049
#: ../../releases/1.2.txt:857
msgid "CSRF response-rewriting middleware"
msgstr ""

# cfaf0eb4b4604f209e705dcce12f5b88
#: ../../releases/1.2.txt:859
msgid ""
"``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF "
"tokens into ``POST`` forms in outgoing pages, has been deprecated in favor "
"of a template tag method (see above), and will be removed completely in "
"Django 1.4. ``CsrfMiddleware``, which includes the functionality of "
"``CsrfResponseMiddleware`` and ``CsrfViewMiddleware``, has likewise been "
"deprecated."
msgstr ""

# 090e21f9aa0646898c65125833655568
# b8fe64fb0f89490faa06a4dc9ca80a62
#: ../../releases/1.2.txt:866 ../../releases/1.2-alpha-1.txt:203
msgid ""
"Also, the CSRF module has moved from contrib to core, and the old imports "
"are deprecated, as described in the upgrading notes."
msgstr ""

# 46f1a44b2da04a7d9632635f5ff894f8
# 0c41d7ca9db24cd0892a57df072840f8
#: ../../releases/1.2.txt:875 ../../releases/1.2-alpha-1.txt:212
msgid "``SMTPConnection``"
msgstr ""

# 544b537f68ae4a4482d57751db7a41fc
#: ../../releases/1.2.txt:877
msgid ""
"The ``SMTPConnection`` class has been deprecated in favor of a generic email "
"backend API. Old code that explicitly instantiated an instance of an "
"SMTPConnection::"
msgstr ""

# e25bd93239f94f749797c6f24e68ffbc
#: ../../releases/1.2.txt:886
msgid ""
"...should now call :meth:`~django.core.mail.get_connection()` to instantiate "
"a generic email connection::"
msgstr ""

# f444d8061ee142119febeda126d08222
# cbd2bfd5a79d4f4aa50de6439ee436ac
#: ../../releases/1.2.txt:894 ../../releases/1.2-alpha-1.txt:231
msgid ""
"Depending on the value of the :setting:`EMAIL_BACKEND` setting, this may not "
"return an SMTP connection. If you explicitly require an SMTP connection with "
"which to send email, you can explicitly request an SMTP connection::"
msgstr ""

# 7c3e172aa7cc4dc1b59320022da34a19
# 627eeb6ad1864bdbb65ccf32edaca427
#: ../../releases/1.2.txt:904 ../../releases/1.2-alpha-1.txt:241
msgid ""
"If your call to construct an instance of ``SMTPConnection`` required "
"additional arguments, those arguments can be passed to the :meth:`~django."
"core.mail.get_connection()` call::"
msgstr ""

# 370ebf15027c40ffbc2ca6ef1f7cd81f
# 2ddddda20f044a549b80c7d856c732e1
#: ../../releases/1.2.txt:911 ../../releases/1.2-alpha-1.txt:310
msgid "User Messages API"
msgstr ""

# 8c49cf0c243741818e5a29da4fefcedd
# 9c1b9a55854148f997d03eb6b7ab2ffa
#: ../../releases/1.2.txt:913 ../../releases/1.2-alpha-1.txt:312
msgid ""
"The API for storing messages in the user ``Message`` model (via ``user."
"message_set.create``) is now deprecated and will be removed in Django 1.4 "
"according to the standard :doc:`release process </internals/release-"
"process>`."
msgstr ""

# e6b7c59f6c5943b689d8f42caff67654
#: ../../releases/1.2.txt:917
msgid "To upgrade your code, you need to replace any instances of this::"
msgstr ""

# ef6bab880ffe4bbeabfbf0e2b2ed1536
#: ../../releases/1.2.txt:921
msgid "...with the following::"
msgstr ""

# f9aa0b2708ed4dd4973a7f7fb27e3895
# bad5abb92484440b8e3a86c04c15fbc9
#: ../../releases/1.2.txt:926 ../../releases/1.2-alpha-1.txt:325
msgid ""
"Additionally, if you make use of the method, you need to replace the "
"following::"
msgstr ""

# 31184f2ec01c4d959e74efbdadfd90e9
#: ../../releases/1.2.txt:932
msgid "...with::"
msgstr ""

# 78cf12b7b4d14e7eb82e3eb78c8660ca
# a0e41007115a46bea3894c816ba16cb8
#: ../../releases/1.2.txt:938 ../../releases/1.2-alpha-1.txt:337
msgid ""
"For more information, see the full :doc:`messages documentation </ref/"
"contrib/messages>`. You should begin to update your code to use the new API "
"immediately."
msgstr ""

# 24af4e604889444889ebcdbc3acb2b6d
# b669264fb28a4cc193e0eed316408a48
#: ../../releases/1.2.txt:943 ../../releases/1.2-alpha-1.txt:342
msgid "Date format helper functions"
msgstr ""

# 87ad518fe72b425ca083df6531d0f0a8
#: ../../releases/1.2.txt:945
msgid ""
"``django.utils.translation.get_date_formats()`` and ``django.utils."
"translation.get_partial_date_formats()`` have been deprecated in favor of "
"the appropriate calls to ``django.utils.formats.get_format()``, which is "
"locale-aware when :setting:`USE_L10N` is set to ``True``, and falls back to "
"default settings if set to ``False``."
msgstr ""

# c51e5c58bb54438c97ca326564ab75bd
#: ../../releases/1.2.txt:951
msgid "To get the different date formats, instead of writing this::"
msgstr ""

# 68a3ef18c4d843aa8162d31ccd672fce
#: ../../releases/1.2.txt:956
msgid "...use::"
msgstr ""

# 443ca7cbc39748c9b1f660b2b8a9bddc
#: ../../releases/1.2.txt:963
msgid "Or, when directly formatting a date value::"
msgstr ""

# 0d555f7eb7a04df6ae3854ca66cb19c3
# 40b09d7e57a6486c8103ef5b82f515a6
#: ../../releases/1.2.txt:968 ../../releases/1.2-alpha-1.txt:368
msgid "The same applies to the globals found in ``django.forms.fields``:"
msgstr ""

# 9f2904ab11234e21ad940d17bbcfe540
# f57f14a678c64358a69d4611059cf314
#: ../../releases/1.2.txt:970 ../../releases/1.2-alpha-1.txt:370
msgid "``DEFAULT_DATE_INPUT_FORMATS``"
msgstr ""

# 76f0a1d7904f46a0b785e7e74cd0fc3f
# bd0b9f4d955e4ce1aca45a1a0837dd33
#: ../../releases/1.2.txt:971 ../../releases/1.2-alpha-1.txt:371
msgid "``DEFAULT_TIME_INPUT_FORMATS``"
msgstr ""

# 13e8f5799a204e1da17e1155a39ed7fa
# 2af1fd451bec48cb8fd1abfbaa72dcfd
#: ../../releases/1.2.txt:972 ../../releases/1.2-alpha-1.txt:372
msgid "``DEFAULT_DATETIME_INPUT_FORMATS``"
msgstr ""

# cba728d803a3464aa456ad17f117602f
# 3c55bc276df24ac5b76b874f7cb3fb19
#: ../../releases/1.2.txt:974 ../../releases/1.2-alpha-1.txt:374
msgid ""
"Use ``django.utils.formats.get_format()`` to get the appropriate formats."
msgstr ""

# 47999e32e09846a3a2971759d2c6acf3
#: ../../releases/1.2.txt:977
msgid "Function-based test runners"
msgstr ""

# 66d425ce0f14425684e153f2480a21b5
# 8417b2e00608469b9cf716e386b8d338
#: ../../releases/1.2.txt:979 ../../releases/1.2-beta-1.txt:41
msgid ""
"Django 1.2 changes the test runner tools to use a class-based approach. Old "
"style function-based test runners will still work, but should be updated to "
"use the new :ref:`class-based runners <topics-testing-test_runner>`."
msgstr ""

# 2a7cc0295a6e4c75a23c1d0b88d4cebb
#: ../../releases/1.2.txt:987
msgid "``Feed`` in ``django.contrib.syndication.feeds``"
msgstr ""

# 2d442989728a474c969af90ee78d3f7f
#: ../../releases/1.2.txt:989
msgid ""
"The ``django.contrib.syndication.feeds.Feed`` class has been replaced by "
"the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds."
"Feed`` class is deprecated, and will be removed in Django 1.4."
msgstr ""

# b49f6f1d959f4edcab8f602c48a11d34
#: ../../releases/1.2.txt:994
msgid ""
"The new class has an almost identical API, but allows instances to be used "
"as views. For example, consider the use of the old framework in the "
"following :doc:`URLconf </topics/http/urls>`::"
msgstr ""

# 2b1fb49d1b57475e900129bbdfa98323
#: ../../releases/1.2.txt:1013
msgid ""
"Using the new Feed class, these feeds can be deployed directly as views::"
msgstr ""

# 44b9e21149a34406a697331481eb3cb3
#: ../../releases/1.2.txt:1025
msgid ""
"If you currently use the ``feed()`` view, the ``LatestEntries`` class would "
"often not need to be modified apart from subclassing the new :class:`~django."
"contrib.syndication.views.Feed` class. The exception is if Django was "
"automatically working out the name of the template to use to render the "
"feed's description and title elements (if you were not specifying the "
"``title_template`` and ``description_template`` attributes). You should "
"ensure that you always specify ``title_template`` and "
"``description_template`` attributes, or provide ``item_title()`` and "
"``item_description()`` methods."
msgstr ""

# ace590f0162241f9ae2603dd797e10bc
#: ../../releases/1.2.txt:1034
msgid ""
"However, ``LatestEntriesByCategory`` uses the ``get_object()`` method with "
"the ``bits`` argument to specify a specific category to show. In the new :"
"class:`~django.contrib.syndication.views.Feed` class, ``get_object()`` "
"method takes a ``request`` and arguments from the URL, so it would look like "
"this::"
msgstr ""

# edad0f94eaf44f72ae6f92802e135777
#: ../../releases/1.2.txt:1050
msgid ""
"Additionally, the ``get_feed()`` method on ``Feed`` classes now take "
"different arguments, which may impact you if you use the ``Feed`` classes "
"directly. Instead of just taking an optional ``url`` argument, it now takes "
"two arguments: the object returned by its own ``get_object()`` method, and "
"the current ``request`` object."
msgstr ""

# e560a87c3d3e44a7b1e9c28a90c0de91
#: ../../releases/1.2.txt:1056
msgid ""
"To take into account ``Feed`` classes not being initialized for each "
"request, the ``__init__()`` method now takes no arguments by default. "
"Previously it would have taken the ``slug`` from the URL and the ``request`` "
"object."
msgstr ""

# fdf4523f2a224ec7bc86613cc16e8622
#: ../../releases/1.2.txt:1061
msgid ""
"In accordance with `RSS best practices`_, RSS feeds will now include an "
"``atom:link`` element. You may need to update your tests to take this into "
"account."
msgstr ""

# b31acdeab004466a8840b8a034d4494c
# f4581191dcca4c889198a63e9e074a51
#: ../../releases/1.2.txt:1065 ../../releases/1.2-beta-1.txt:59
msgid ""
"For more information, see the full :doc:`syndication framework documentation "
"</ref/contrib/syndication>`."
msgstr ""

# 1e5840c509da45939b04d20a75953bbf
#: ../../releases/1.2.txt:1071
msgid "Technical message IDs"
msgstr ""

# ebbf828419ee411da44532e4ab4e0689
#: ../../releases/1.2.txt:1073
msgid ""
"Up to version 1.1 Django used technical message IDs to provide localizers "
"the possibility to translate date and time formats. They were translatable :"
"term:`translation strings <translation string>` that could be recognized "
"because they were all upper case (for example :setting:`DATETIME_FORMAT`, :"
"setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`). They have been deprecated in "
"favor of the new :ref:`Format localization <format-localization>` "
"infrastructure that allows localizers to specify that information in a "
"``formats.py`` file in the corresponding ``django/conf/locale/<locale name>/"
"`` directory."
msgstr ""

# 7aa203325d2e4ec39e70dbe440ed23b6
#: ../../releases/1.2.txt:1086
msgid ""
"To allow support for multiple databases, the GeoDjango database internals "
"were changed substantially.  The largest backwards-incompatible change is "
"that the module ``django.contrib.gis.db.backend`` was renamed to :mod:"
"`django.contrib.gis.db.backends`, where the full-fledged :ref:`spatial "
"database backends <spatial-backends>` now exist.  The following sections "
"provide information on the most-popular APIs that were affected by these "
"changes."
msgstr ""

# d9e0d0e41dd64991a551ec118692fe16
#: ../../releases/1.2.txt:1095
msgid "``SpatialBackend``"
msgstr ""

# 1e6017981ebf49e2abdd796b29e02ca2
#: ../../releases/1.2.txt:1097
msgid ""
"Prior to the creation of the separate spatial backends, the ``django.contrib."
"gis.db.backend.SpatialBackend`` object was provided as an abstraction to "
"introspect on the capabilities of the spatial database.  All of the "
"attributes and routines provided by ``SpatialBackend`` are now a part of the "
"``ops`` attribute of the database backend."
msgstr ""

# 721aad33c9754e35bba57704141d473e
#: ../../releases/1.2.txt:1104
msgid ""
"The old module ``django.contrib.gis.db.backend`` is still provided for "
"backwards-compatibility access to a ``SpatialBackend`` object, which is just "
"an alias to the ``ops`` module of the *default* spatial database connection."
msgstr ""

# a24fda8910d548678dff3004b1e6a34c
#: ../../releases/1.2.txt:1109
msgid ""
"Users that were relying on undocumented modules and objects within ``django."
"contrib.gis.db.backend``, rather the abstractions provided by "
"``SpatialBackend``, are required to modify their code. For example, the "
"following import which would work in 1.1 and below::"
msgstr ""

# e8ce962950a64420b43f012ef4f315b7
#: ../../releases/1.2.txt:1117
msgid "Would need to be changed::"
msgstr ""

# 692982c3ce2d48d58ed0a3428db65dcc
#: ../../releases/1.2.txt:1123
msgid "``SpatialRefSys`` and ``GeometryColumns`` models"
msgstr ""

# 106e25253cc549ac909fd291bcf7c518
#: ../../releases/1.2.txt:1125
msgid ""
"In previous versions of GeoDjango, :mod:`django.contrib.gis.db.models` had "
"``SpatialRefSys`` and ``GeometryColumns`` models for querying the OGC "
"spatial metadata tables ``spatial_ref_sys`` and ``geometry_columns``, "
"respectively."
msgstr ""

# d3e67748c352493babd8e6d4fb6dde3b
#: ../../releases/1.2.txt:1130
msgid ""
"While these aliases are still provided, they are only for the *default* "
"database connection and exist only if the default connection is using a "
"supported spatial database backend."
msgstr ""

# 536093f420d541c39d59292a9b2398bf
#: ../../releases/1.2.txt:1136
msgid ""
"Because the table structure of the OGC spatial metadata tables differs "
"across spatial databases, the ``SpatialRefSys`` and ``GeometryColumns`` "
"models can no longer be associated with the ``gis`` application name.  Thus, "
"no models will be returned when using the ``get_models`` method in the "
"following example::"
msgstr ""

# 9f2200ee954944e38a0f83ffba28b7c1
#: ../../releases/1.2.txt:1146
msgid ""
"To get the correct ``SpatialRefSys`` and ``GeometryColumns`` for your "
"spatial database use the methods provided by the spatial backend::"
msgstr ""

# 1c135193ab814434b4755939db2ce6f5
#: ../../releases/1.2.txt:1155
msgid ""
"When using the models returned from the ``spatial_ref_sys()`` and "
"``geometry_columns()`` method, you'll still need to use the correct database "
"alias when querying on the non-default connection. In other words, to ensure "
"that the models in the example above use the correct database::"
msgstr ""

# 6f548a865f174ca69969e7bf72db9d22
#: ../../releases/1.2.txt:1165
msgid "Language code ``no``"
msgstr ""

# 73158b76e2f74e94a891bff07b2ba45c
#: ../../releases/1.2.txt:1167
msgid ""
"The currently used language code for Norwegian Bokmål ``no`` is being "
"replaced by the more common language code ``nb``."
msgstr ""

# d3656b065ba5411da71722fab5c86f81
#: ../../releases/1.2.txt:1171
msgid "Function-based template loaders"
msgstr ""

# 0d44ee15e38846859ba05e769689b09c
#: ../../releases/1.2.txt:1173
msgid ""
"Django 1.2 changes the template loading mechanism to use a class-based "
"approach. Old style function-based template loaders will still work, but "
"should be updated to use the new :ref:`class-based template loaders <topic-"
"template-alternate-language>`."
msgstr ""

# 6a9da85cb9f94975a0bd1d6b19720217
#: ../../releases/1.2-alpha-1.txt:3
msgid "Django 1.2 alpha 1 release notes"
msgstr ""

# 9e91ea4c85ab4f328b694457850e8ea1
#: ../../releases/1.2-alpha-1.txt:5
msgid "January 5, 2010"
msgstr ""

# 25cb76a2fe3c4d6293a6e7dd61055ea0
#: ../../releases/1.2-alpha-1.txt:7
msgid "Welcome to Django 1.2 alpha 1!"
msgstr ""

# 3987572c5c1049149ab605b472f3fe4b
#: ../../releases/1.2-alpha-1.txt:9
msgid ""
"This is the first in a series of preview/development releases leading up to "
"the eventual release of Django 1.2, currently scheduled to take place in "
"March 2010. This release is primarily targeted at developers who are "
"interested in trying out new features and testing the Django codebase to "
"help identify and resolve bugs prior to the final 1.2 release."
msgstr ""

# 368f7b05c61a499693ffe94b9b4dde65
#: ../../releases/1.2-alpha-1.txt:25
msgid ""
"There have been large changes to the way that CSRF protection works, "
"detailed in :doc:`the CSRF documentation </ref/contrib/csrf>`.  The "
"following are the major changes that developers must be aware of:"
msgstr ""

# cab1c489978041f4a89a088551adb249
#: ../../releases/1.2-alpha-1.txt:29
msgid ""
"``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated, and "
"**will be removed completely in Django 1.4**, in favor of a template tag "
"that should be inserted into forms."
msgstr ""

# 8f93b4d03da6432f883fa6105829942c
#: ../../releases/1.2-alpha-1.txt:33
msgid ""
"All contrib apps use a ``csrf_protect`` decorator to protect the view. This "
"requires the use of the ``csrf_token`` template tag in the template, so if "
"you have used custom templates for contrib views, you MUST READ THE UPGRADE "
"INSTRUCTIONS to fix those templates."
msgstr ""

# be3a17c54c3e4d61add89277de44a215
#: ../../releases/1.2-alpha-1.txt:43
msgid ""
"``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by "
"default. This turns on CSRF protection by default, so that views that accept "
"POST requests need to be written to work with the middleware. Instructions "
"on how to do this are found in the CSRF docs."
msgstr ""

# 4dc8778c3772481bb62363caa1203026
#: ../../releases/1.2-alpha-1.txt:48
msgid ""
"CSRF-related code has moved from ``contrib`` to ``core`` (with backwards "
"compatible imports in the old locations, which are deprecated)."
msgstr ""

# 2ea228d69db34bcc8651bbf27ea69145
#: ../../releases/1.2-alpha-1.txt:55
msgid ""
"Due to new features in the :ttag:`if` template tag, it no longer accepts "
"'and', 'or' and 'not' as valid **variable** names.  Previously that worked "
"in some cases even though these strings were normally treated as keywords.  "
"Now, the keyword status is always enforced, and template code like ``{% if "
"not %}`` or ``{% if and %}`` will throw a TemplateSyntaxError."
msgstr ""

# 76abf2c2ece54fbd827a3d93d1f11684
#: ../../releases/1.2-alpha-1.txt:64
msgid ""
"``LazyObject`` is an undocumented utility class used for lazily wrapping "
"other objects of unknown type.  In Django 1.1 and earlier, it handled "
"introspection in a non-standard way, depending on wrapped objects "
"implementing a public method ``get_all_members()``. Since this could easily "
"lead to name clashes, it has been changed to use the standard method, "
"involving ``__members__`` and ``__dir__()``. If you used ``LazyObject`` in "
"your own code, and implemented the ``get_all_members()`` method for wrapped "
"objects, you need to make the following changes:"
msgstr ""

# c97e27cc7d824a97bb33e466da1b8056
#: ../../releases/1.2-alpha-1.txt:73
msgid ""
"If your class does not have special requirements for introspection (i.e. you "
"have not implemented ``__getattr__()`` or other methods that allow for "
"attributes not discoverable by normal mechanisms), you can simply remove the "
"``get_all_members()`` method.  The default implementation on ``LazyObject`` "
"will do the right thing."
msgstr ""

# 33a7f06db026497e9607c0b6cd98ee16
#: ../../releases/1.2-alpha-1.txt:79
msgid ""
"If you have more complex requirements for introspection, first rename the "
"``get_all_members()`` method to ``__dir__()``.  This is the standard method, "
"from Python 2.6 onwards, for supporting introspection.  If you are require "
"support for Python < 2.6, add the following code to the class::"
msgstr ""

# 1594d7d000ef41069416dac8dc56ebe9
#: ../../releases/1.2-alpha-1.txt:87
msgid "``__dict__`` on Model instances"
msgstr ""

# 85e05a304bc84dd3963eee5ef1bdf3e7
#: ../../releases/1.2-alpha-1.txt:92
msgid ""
"In order to support multiple database configurations, Django 1.2 has added a "
"``_state`` attribute to object instances. This attribute will appear in "
"``__dict__`` for a model instance. If your code relies on iterating over "
"__dict__ to obtain a list of fields, you must now filter the ``_state`` "
"attribute of out ``__dict__``."
msgstr ""

# 6afd35c26387451f89a22853cf7c9037
#: ../../releases/1.2-alpha-1.txt:99
msgid "``get_db_prep_*()`` methods on Field"
msgstr ""

# 69b7a2bc924a456cba4a81d9e9a29fcc
#: ../../releases/1.2-alpha-1.txt:101
msgid ""
"Prior to v1.2, a custom field had the option of defining several functions "
"to support conversion of Python values into database-compatible values. A "
"custom field might look something like::"
msgstr ""

# 33dbb0339bac4717bd9cd921d2f2b64d
#: ../../releases/1.2-alpha-1.txt:138
msgid ""
"These changes are required to support multiple databases: ``get_db_prep_*`` "
"can no longer make any assumptions regarding the database for which it is "
"preparing. The ``connection`` argument now provides the preparation methods "
"with the specific connection for which the value is being prepared."
msgstr ""

# b855bbae7fc64e85ae437f90c76b59a5
#: ../../releases/1.2-alpha-1.txt:144
msgid ""
"The two new methods exist to differentiate general data preparation "
"requirements, and requirements that are database-specific. The ``prepared`` "
"argument is used to indicate to the database preparation methods whether "
"generic value preparation has been performed. If an unprepared (i.e., "
"``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they "
"should invoke the corresponding ``get_prep_*()`` calls to perform generic "
"data preparation."
msgstr ""

# f31fbc431ae947849cfaad32d1822292
#: ../../releases/1.2-alpha-1.txt:152
msgid ""
"Conversion functions has been provided which will transparently convert "
"functions adhering to the old prototype into functions compatible with the "
"new prototype. However, this conversion function will be removed in Django "
"1.4, so you should upgrade your Field definitions to use the new prototype."
msgstr ""

# dad3327bf8864b0d97800b4bc14a0920
#: ../../releases/1.2-alpha-1.txt:158
msgid ""
"If your ``get_db_prep_*()`` methods made no use of the database connection, "
"you should be able to upgrade by renaming ``get_db_prep_value()`` to "
"``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()`. "
"If you require database specific conversions, then you will need to provide "
"an implementation ``get_db_prep_*`` that uses the ``connection`` argument to "
"resolve database-specific values."
msgstr ""

# 75a9e95590ad47e7a076d21c4e586675
#: ../../releases/1.2-alpha-1.txt:169
msgid ""
"Template tags that store rendering state on the node itself may experience "
"problems if they are used with the new :ref:`cached template loader<template-"
"loaders>`."
msgstr ""

# 7dbcd016292244a0b5e6520c3f5d106f
#: ../../releases/1.2-alpha-1.txt:173
msgid ""
"All of the built-in Django template tags are safe to use with the cached "
"loader, but if you're using custom template tags that come from third party "
"packages, or that you wrote yourself, you should ensure that the ``Node`` "
"implementation for each tag is thread-safe. For more information, see :ref:"
"`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

# 55a904126ef94728a58a5c6e17c88070
#: ../../releases/1.2-alpha-1.txt:194
msgid "CSRF response rewriting middleware"
msgstr ""

# 1605873f21de443293fafea6107ef1f1
#: ../../releases/1.2-alpha-1.txt:196
msgid ""
"``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF "
"tokens into POST forms in outgoing pages, has been deprecated in favor of a "
"template tag method (see above), and will be removed completely in Django "
"1.4. ``CsrfMiddleware``, which includes the functionality of "
"``CsrfResponseMiddleware`` and ``CsrfViewMiddleware`` has likewise been "
"deprecated."
msgstr ""

# e73627a9d42f4f7bbdaa1e421794466d
#: ../../releases/1.2-alpha-1.txt:214
msgid ""
"The ``SMTPConnection`` class has been deprecated in favor of a generic Email "
"backend API. Old code that explicitly instantiated an instance of an "
"SMTPConnection::"
msgstr ""

# 7b9a063579a24128ba82e8507de2125f
#: ../../releases/1.2-alpha-1.txt:223
msgid ""
"should now call :meth:`~django.core.mail.get_connection()` to instantiate a "
"generic email connection::"
msgstr ""

# f80cbd3e9d014925ac5a30c6c5384aed
#: ../../releases/1.2-alpha-1.txt:250
msgid ""
"Prior to Django 1.1, Django used a number of settings to control access to a "
"single database. Django 1.2 introduces support for multiple databases, and "
"as a result, the way you define database settings has changed."
msgstr ""

# dc9c676d36c840db98dda8d0e00a7782
#: ../../releases/1.2-alpha-1.txt:254
msgid ""
"**Any existing Django settings file will continue to work as expected until "
"Django 1.4.** Old-style database settings will be automatically translated "
"to the new-style format."
msgstr ""

# e1c33eac1d774b9da1fdecb0f1850665
#: ../../releases/1.2-alpha-1.txt:258
msgid ""
"In the old-style (pre 1.2) format, there were a number of ``DATABASE_`` "
"settings at the top level of your settings file. For example::"
msgstr ""

# 9d701b4d320a41e9b548378f7206ed86
#: ../../releases/1.2-alpha-1.txt:267
msgid ""
"These settings are now contained inside a dictionary named :setting:"
"`DATABASES`. Each item in the dictionary corresponds to a single database "
"connection, with the name ``'default'`` describing the default database "
"connection. The setting names have also been shortened to reflect the fact "
"that they are stored in a dictionary. The sample settings given previously "
"would now be stored using::"
msgstr ""

# c708505f92804ec2922cdb3105b9b336
#: ../../releases/1.2-alpha-1.txt:316
msgid "To upgrade your code, you need to replace any instances of::"
msgstr ""

# c746bd4c0f8f4f3e8757c2e631b2d683
#: ../../releases/1.2-alpha-1.txt:320
msgid "with the following::"
msgstr ""

# 92c934a276314caea73f3cfb1fbc9b14
#: ../../releases/1.2-alpha-1.txt:331
msgid "with::"
msgstr ""

# fa075721d2d14b6e9129dc5cd2310023
#: ../../releases/1.2-alpha-1.txt:344
msgid ""
"``django.utils.translation.get_date_formats()`` and ``django.utils."
"translation.get_partial_date_formats()`` have been deprecated in favor of "
"the appropriate calls to ``django.utils.formats.get_format()`` which is "
"locale aware when :setting:`USE_L10N` is set to ``True``, and falls back to "
"default settings if set to ``False``."
msgstr ""

# 0e8ba9e66b4d4a5ca6597624261cd051
#: ../../releases/1.2-alpha-1.txt:350
msgid "To get the different date formats, instead of writing::"
msgstr ""

# fc07c18d0ab4439fa14c0f55214dd010
#: ../../releases/1.2-alpha-1.txt:355
msgid "use::"
msgstr ""

# 496a37ed1dfe4257868e6e88844f89a3
#: ../../releases/1.2-alpha-1.txt:363
msgid "or, when directly formatting a date value::"
msgstr ""

# 55361e152b1f44dabf97f254c811d34e
#: ../../releases/1.2-alpha-1.txt:378
msgid "What's new in Django 1.2 alpha 1"
msgstr ""

# 4ee701cd17ce415cb95e6d83ab6a281e
#: ../../releases/1.2-alpha-1.txt:380
msgid ""
"The following new features are present as of this alpha release; this "
"release also marks the end of major feature development for the 1.2 release "
"cycle. Some minor features will continue development until the 1.2 beta "
"release, however."
msgstr ""

# 1c41df16793e413d9de42b3463af4018
#: ../../releases/1.2-alpha-1.txt:387
msgid "CSRF support"
msgstr ""

# ad7f427b939e4c8d823c6a2303d61d99
#: ../../releases/1.2-alpha-1.txt:389
msgid ""
"Django now has much improved protection against :doc:`Cross-Site Request "
"Forgery (CSRF) attacks</ref/contrib/csrf>`. This type of attack occurs when "
"a malicious Web site contains a link, a form button or some javascript that "
"is intended to perform some action on your Web site, using the credentials "
"of a logged-in user who visits the malicious site in their browser. A "
"related type of attack, 'login CSRF', where an attacking site tricks a "
"user's browser into logging into a site with someone else's credentials, is "
"also covered."
msgstr ""

# 57b2f9d83d624bb49c67b1b939fb08fa
#: ../../releases/1.2-alpha-1.txt:399
msgid "Email Backends"
msgstr ""

# d2e6247d46884e879bc89de695601d57
#: ../../releases/1.2-alpha-1.txt:409
msgid ""
"This also makes it easier to debug mail sending - Django ships with backend "
"implementations that allow you to send email to a :ref:`file<topic-email-"
"file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :"
"ref:`memory<topic-email-memory-backend>` - you can even configure all email "
"to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

# 2dd63a5529794fc7b675737d687723af
#: ../../releases/1.2-alpha-1.txt:417
msgid "Messages Framework"
msgstr ""

# 12a659c24a3249f283ba4cc20b307cc6
#: ../../releases/1.2-alpha-1.txt:429
msgid ""
"Django 1.2 adds the ability to use :doc:`more than one database </topics/db/"
"multi-db>` in your Django project. Queries can be issued at a specific "
"database with the ``using()`` method on querysets; individual objects can be "
"saved to a specific database by providing a ``using`` argument when you save "
"the instance."
msgstr ""

# ceb0ed6147684cb5891fd262cce6c06d
#: ../../releases/1.2-alpha-1.txt:436
msgid "'Smart' if tag"
msgstr ""

# 535db8790f3a4030966c36b28352f227
#: ../../releases/1.2-alpha-1.txt:438
msgid ""
"The :ttag:`if` tag has been upgraded to be much more powerful.  First, "
"support for comparison operators has been added. No longer will you have to "
"type:"
msgstr ""

# 49821b2caf344f66bbe0e55f20f702ec
#: ../../releases/1.2-alpha-1.txt:447
msgid "...as you can now do:"
msgstr ""

# d0641bcaa50b43a5b3163cd4ea854e53
#: ../../releases/1.2-alpha-1.txt:455
msgid ""
"The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=`` and "
"``in``, all of which work like the Python operators, in addition to ``and``, "
"``or`` and ``not`` which were already supported."
msgstr ""

# 5061f2fcc2864909b3f9dc6b66a41262
#: ../../releases/1.2-alpha-1.txt:472
msgid ""
"In previous versions of Django, every time you rendered a template it would "
"be reloaded from disk. In Django 1.2, you can use a :ref:`cached template "
"loader <template-loaders>` to load templates once, then use the cached "
"result for every subsequent render. This can lead to a significant "
"performance improvement if your templates are broken into lots of smaller "
"subtemplates (using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

# 3014efd01d514366a4f6770dffce384a
#: ../../releases/1.2-alpha-1.txt:487
msgid ""
"Fixtures can refer to remote objects using :ref:`topics-serialization-"
"natural-keys`. This lookup scheme is an alternative to the normal primary-"
"key based object references in a fixture, improving readability, and "
"resolving problems referring to objects whose primary key value may not be "
"predictable or known."
msgstr ""

# c0ebb62530bc47cc881fd03170dbd7bc
#: ../../releases/1.2-alpha-1.txt:496
msgid ""
"Models can now use a 64 bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

# b2a56175a5944461873a8b0b6ba0a0eb
#: ../../releases/1.2-alpha-1.txt:499
msgid "Fast Failure for Tests"
msgstr ""

# 76a30c441bb948adbe719fd9edd7d6b0
#: ../../releases/1.2-alpha-1.txt:501
msgid ""
"The :djadmin:`test` subcommand of ``django-admin.py``, and the ``runtests."
"py`` script used to run Django's own test suite, support a new ``--"
"failfast`` option. When specified, this option causes the test runner to "
"exit after encountering a failure instead of continuing with the test run.  "
"In addition, the handling of ``Ctrl-C`` during a test run has been improved "
"to trigger a graceful exit from the test run that reports details of the "
"tests run before the interruption."
msgstr ""

# e784a7f5b0434f9e9058c18cfcc58d16
#: ../../releases/1.2-alpha-1.txt:511
msgid ""
"Django's :doc:`internationalization framework </topics/i18n/index>` has been "
"expanded by locale aware formatting and form processing. That means, if "
"enabled, dates and numbers on templates will be displayed using the format "
"specified for the current locale. Django will also use localized formats "
"when parsing data in forms. See :ref:`Format localization <format-"
"localization>` for more details."
msgstr ""

# 3d82a25b2d0b488bbc5b41aa3b6962ba
#: ../../releases/1.2-alpha-1.txt:519
msgid "Added ``readonly_fields`` to ``ModelAdmin``"
msgstr ""

# 63c2ffa3283f4376b14844d8f31e182c
#: ../../releases/1.2-alpha-1.txt:521
msgid ""
":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to "
"enable non-editable fields in add/change pages for models and inlines. Field "
"and calculated values can be displayed along side editable fields."
msgstr ""

# c73b6755997d4a01aae520234261ba93
#: ../../releases/1.2-alpha-1.txt:528
msgid ""
"You can now use the ``DJANGO_COLORS`` environment variable to modify or "
"disable the colors used by ``django-admin.py`` to provide :ref:`syntax "
"highlighting <syntax-coloring>`."
msgstr ""

# a6e133b256674d83b292812bee117eeb
# e6520d45d11c41cdb970fed8f4e8b55f
# b1938ea94b994f889165ba63c7cc27f1
#: ../../releases/1.2-alpha-1.txt:534 ../../releases/1.2-beta-1.txt:120
#: ../../releases/1.2-rc-1.txt:52
msgid "The Django 1.2 roadmap"
msgstr ""

# d4b8e50283784310a28bf9dac40c170c
#: ../../releases/1.2-alpha-1.txt:536
msgid ""
"Before the final Django 1.2 release, several other preview/development "
"releases will be made available. The current schedule consists of at least "
"the following:"
msgstr ""

# 012b773e07b74ac297906ad1f1fe2a49
#: ../../releases/1.2-alpha-1.txt:540
msgid ""
"Week of **January 26, 2010**: First Django 1.2 beta release. Final feature "
"freeze for Django 1.2."
msgstr ""

# 9a0cc2f9a30449f6ae2ab977f75312d8
# a8d487b699974b62ba2d6827f2216303
#: ../../releases/1.2-alpha-1.txt:543 ../../releases/1.2-beta-1.txt:126
msgid ""
"Week of **March 2, 2010**: First Django 1.2 release candidate. String freeze "
"for translations."
msgstr ""

# 9a2eae1080b0491cbb07857c9882960d
# ab148c2d94cb487d8ba80073ba4b1429
#: ../../releases/1.2-alpha-1.txt:546 ../../releases/1.2-beta-1.txt:129
msgid "Week of **March 9, 2010**: Django 1.2 final release."
msgstr ""

# 634e956105514516b21f64330894d305
#: ../../releases/1.2-alpha-1.txt:548
msgid ""
"If necessary, additional alpha, beta or release-candidate packages will be "
"issued prior to the final 1.2 release. Django 1.2 will be released "
"approximately one week after the final release candidate."
msgstr ""

# 7486edf8149a43bd956a1fddaf0ade74
#: ../../releases/1.2-alpha-1.txt:556
msgid ""
"In order to provide a high-quality 1.2 release, we need your help. Although "
"this alpha release is, again, *not* intended for production use, you can "
"help the Django team by trying out the alpha codebase in a safe test "
"environment and reporting any bugs or issues you encounter. The Django "
"ticket tracker is the central place to search for open issues:"
msgstr ""

# 4998ae8b6186485b9b5a16bfe5a8463f
# c3e2df491a2247eaa602316a51cca6b0
# 012422b436744f3aa632893aca35f4e3
#: ../../releases/1.2-alpha-1.txt:567 ../../releases/1.2-beta-1.txt:151
#: ../../releases/1.2-rc-1.txt:84
msgid ""
"Additionally, discussion of Django development, including progress toward "
"the 1.2 release, takes place daily on the django-developers mailing list:"
msgstr ""

# de65e8a7f165482cba5df9edc7c23e25
# b2576ab20b984d05a333100baffd1ab8
#: ../../releases/1.2-alpha-1.txt:585 ../../releases/1.2-beta-1.txt:170
msgid ""
"Development sprints for Django 1.2 will also be taking place at PyCon US "
"2010, on the dedicated sprint days (February 22 through 25), and anyone who "
"wants to help out is welcome to join in, either in person at PyCon or "
"virtually in the IRC channel or on the mailing list."
msgstr ""

# 7c599b7ab44d4df6bc09332bbfb485fb
#: ../../releases/1.2-beta-1.txt:3
msgid "Django 1.2 beta 1 release notes"
msgstr ""

# 1b12b2a1f4084f10b076f588ab9506f7
#: ../../releases/1.2-beta-1.txt:5
msgid "February 5, 2010"
msgstr ""

# 81760ab3c01a4770a2c05679b9ed2e1a
#: ../../releases/1.2-beta-1.txt:7
msgid "Welcome to Django 1.2 beta 1!"
msgstr ""

# 5ab6b5206218424e973f2d8c3507c6da
#: ../../releases/1.2-beta-1.txt:9
msgid ""
"This is the second in a series of preview/development releases leading up to "
"the eventual release of Django 1.2, currently scheduled to take place in "
"March 2010. This release is primarily targeted at developers who are "
"interested in trying out new features and testing the Django codebase to "
"help identify and resolve bugs prior to the final 1.2 release."
msgstr ""

# a0f4ceb986f44b9bb2846ac5a2086270
#: ../../releases/1.2-beta-1.txt:19
msgid ""
"This document covers changes since the Django 1.2 alpha release; the :doc:"
"`1.2 alpha release notes </releases/1.2-alpha-1>` cover new and updated "
"features in Django between 1.1 and 1.2 alpha."
msgstr ""

# 689a4d2bc3dd44b2a8de50e33ddc7e7c
#: ../../releases/1.2-beta-1.txt:25
msgid "Deprecations and other changes in 1.2 beta"
msgstr ""

# 33109092572547f680f9ac98102301d2
#: ../../releases/1.2-beta-1.txt:27
msgid ""
"This beta release deprecates two portions of public API, and introduces a "
"potentially backwards-incompatible change to another. Under :doc:`our API "
"stability policy </misc/api-stability>`, deprecation proceeds over multiple "
"release cycles: initially, the deprecated API will raise "
"``PendingDeprecationWarning``, followed by raising ``DeprecationWarning`` in "
"the next release, and finally removal of the deprecated API in the release "
"after that. APIs beginning the deprecation process in Django 1.2 will be "
"removed in the Django 1.4 release."
msgstr ""

# 6682d4ed509143f99d09d05c26d302fb
#: ../../releases/1.2-beta-1.txt:39
msgid "Unit test runners"
msgstr ""

# 6382b1bdb35943a8bdcfd0f3fedeb4e0
#: ../../releases/1.2-beta-1.txt:48
msgid "Syndication feeds"
msgstr ""

# 251fefab65494ea2b4c2085ed35120c6
#: ../../releases/1.2-beta-1.txt:50
msgid ""
"The ``django.contrib.syndication.feeds.Feed`` class is being replaced by "
"the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds."
"Feed`` class is deprecated. The new class has an almost identical API, but "
"allows instances to be used as views."
msgstr ""

# f2fc64a2404d4a1faf6344a3e9d607ad
#: ../../releases/1.2-beta-1.txt:55
msgid ""
"Also, in accordance with `RSS best practices`_, RSS feeds will now include "
"an ``atom:link`` element. You may need to update your tests to take this "
"into account."
msgstr ""

# 5efee82089f04548950bf4def259c1cb
#: ../../releases/1.2-beta-1.txt:68
msgid ""
"Due to cookie-handling bugs in Internet Explorer, Safari, and possibly other "
"browsers, Django's encoding of cookie values was changed so that the "
"characters comma (',') and semi-colon (';') are treated as non-safe "
"characters, and are therefore encoded as ``\\054`` and ``\\073`` "
"respectively. This could produce backwards incompatibilities if you are "
"relying on the ability to set these characters directly in cookie values."
msgstr ""

# 407fba2d2fd7427eaaa9ffee3b293ae5
#: ../../releases/1.2-beta-1.txt:78
msgid "What's new in 1.2 beta"
msgstr ""

# c064aff47ec14559933bd29f526a9793
#: ../../releases/1.2-beta-1.txt:80
msgid ""
"This 1.2 beta release marks the final feature freeze for Django 1.2; while "
"most feature development was completed for 1.2 alpha (which constituted a "
"freeze on major features), a few other new features were added afterward and "
"so are new as of 1.2 beta."
msgstr ""

# 6d9eeba07c034769b983ef8424d7fa67
#: ../../releases/1.2-beta-1.txt:89
msgid ""
"A foundation for specifying permissions at the per-object level was added in "
"Django 1.2 alpha but not documented with the alpha release."
msgstr ""

# 36aa3f73a85445dd931a84ea6b0a87af
#: ../../releases/1.2-beta-1.txt:92
msgid ""
"The default authentication backends shipped with Django do not currently "
"make use of this, but third-party authentication backends are free to do so. "
"See the :doc:`authentication docs </topics/auth/index>` for more information."
msgstr ""

# 25c37f0e4da841cdabf00db3b5b62755
#: ../../releases/1.2-beta-1.txt:101
msgid ""
"If you provide a custom authentication backend with the attribute "
"``supports_anonymous_user`` set to ``True``, the ``AnonymousUser`` class "
"will check the backend for permissions, just as the normal ``User`` does. "
"This is intended to help centralize permission handling; apps can always "
"delegate the question of whether something is allowed or not to the "
"authorization/authentication system. See the :doc:`authentication docs </"
"topics/auth/index>` for more details."
msgstr ""

# 00bf4b91ec334211aa67a31c4190a0e5
#: ../../releases/1.2-beta-1.txt:111
msgid "``select_related()`` improvements"
msgstr ""

# c53d311f59a04521b0499a74b6185c84
#: ../../releases/1.2-beta-1.txt:113
msgid ""
"The ``select_related()`` method of ``QuerySet`` now accepts the "
"``related_name`` of a reverse one-to-one relation in the list of fields to "
"select. One-to-one relations will not, however, be traversed by a depth-"
"based ``select_related()`` call."
msgstr ""

# 0812899bbd8b48ba801beff326d4e439
#: ../../releases/1.2-beta-1.txt:122
msgid ""
"Before the final Django 1.2 release, at least one additional preview/"
"development releases will be made available. The current schedule consists "
"of at least the following:"
msgstr ""

# 38ca01ffe4f844c7a141e2898fb83e11
#: ../../releases/1.2-beta-1.txt:131
msgid ""
"If necessary, additional beta or release-candidate packages will be issued "
"prior to the final 1.2 release. Django 1.2 will be released approximately "
"one week after the final release candidate."
msgstr ""

# 22bc64ed4716410593786ae3cce1f724
#: ../../releases/1.2-beta-1.txt:139
msgid ""
"In order to provide a high-quality 1.2 release, we need your help. Although "
"this beta release is, again, *not* intended for production use, you can help "
"the Django team by trying out the beta codebase in a safe test environment "
"and reporting any bugs or issues you encounter. The Django ticket tracker is "
"the central place to search for open issues:"
msgstr ""

# 47763ed4c7a145e99494b4a7c23d0339
#: ../../releases/1.2-rc-1.txt:3
msgid "Django 1.2 RC 1 release notes"
msgstr ""

# 11f36b7a286d4562a0c9a7c276f1a8c3
#: ../../releases/1.2-rc-1.txt:6
msgid "May 5, 2010"
msgstr ""

# 30dda882aa224d378c2706d000aa4e9f
#: ../../releases/1.2-rc-1.txt:8
msgid "Welcome to the first Django 1.2 release candidate!"
msgstr ""

# 9440844059594be29e45dc90888ad0bb
#: ../../releases/1.2-rc-1.txt:10
msgid ""
"This is the third -- and likely last -- in a series of preview/development "
"releases leading up to the eventual release of Django 1.2. This release is "
"targeted primarily at developers who are interested in trying out new "
"features and testing the Django codebase to help identify and resolve any "
"critical bugs prior to the final 1.2 release."
msgstr ""

# b0e4365b92b84056a5951b6ad24fca6f
#: ../../releases/1.2-rc-1.txt:20
msgid ""
"Django has been feature frozen since the 1.2 beta release, so this release "
"candidate contains no new features, only bugfixes; for a summary of features "
"new to Django 1.2, consult the :doc:`1.2 alpha </releases/1.2-alpha-1>` and :"
"doc:`1.2 beta </releases/1.2-beta-1>` release notes."
msgstr ""

# 68964a54138a4bd1bfec4db7ded66563
#: ../../releases/1.2-rc-1.txt:54
msgid ""
"As of this release candidate, Django 1.2 is in both feature freeze and "
"\"string freeze\" -- all strings marked for translation in the Django "
"codebase will retain their current form in the final Django 1.2 release. "
"Only critical release-blocking bugs, documentation and updated translation "
"files will receive attention between now and the final 1.2 release. Note "
"that Django's localization infrastructure has been expanded for 1.2, and "
"translation packages should now include a ``formats.py`` file containing "
"data for localized formatting of numbers and dates."
msgstr ""

# ee09e5d3a0bf40e59ff933edc0ca7d14
#: ../../releases/1.2-rc-1.txt:64
msgid ""
"If no critical bugs are discovered, Django 1.2 will be released "
"approximately one week after this release candidate, on or about May 12, "
"2010."
msgstr ""

# 0357b1f1aea547a7b14d6a577f276ea4
#: ../../releases/1.2-rc-1.txt:72
msgid ""
"In order to provide a high-quality 1.2 release, we need your help. Although "
"this release candidate is, again, *not* intended for production use, you can "
"help the Django team by trying out this release candidate in a safe testing "
"environment and reporting any bugs or issues you encounter. The Django "
"ticket tracker is the central place to search for open issues:"
msgstr ""

# 439a0a4e1c974c92b72d7df136b7ef33
#: ../../releases/1.2.1.txt:3
msgid "Django 1.2.1 release notes"
msgstr ""

# 00f9b3a072364e89b6ca1502a11fd42f
#: ../../releases/1.2.1.txt:5
msgid ""
"Django 1.2.1 was released almost immediately after 1.2.0 to correct two "
"small bugs: one was in the documentation packaging script, the other was a "
"bug_ that affected datetime form field widgets when localisation was enabled."
msgstr ""

# e29fe2e4cbfc4f4185e5408393df4faf
#: ../../releases/1.2.2.txt:3
msgid "Django 1.2.2 release notes"
msgstr ""

# e88f65b5350a4391b71bfc2500090a6d
#: ../../releases/1.2.2.txt:5
msgid "Welcome to Django 1.2.2!"
msgstr ""

# 028da842f16c48aea9ce114b876061ef
#: ../../releases/1.2.2.txt:7
msgid ""
"This is the second \"bugfix\" release in the Django 1.2 series, improving "
"the stability and performance of the Django 1.2 codebase."
msgstr ""

# 629518d9eb5848fba4bad6aa557bb17c
#: ../../releases/1.2.2.txt:10
msgid ""
"Django 1.2.2 maintains backwards compatibility with Django 1.2.1, but "
"contain a number of fixes and other improvements. Django 1.2.2 is a "
"recommended upgrade for any development or deployment currently using or "
"targeting Django 1.2."
msgstr ""

# d73c6849e9ed40638dc83c8dba191254
# e2745ae1b11f437f90d11309e05e9956
# d4104bdb3b8749888ec2d7ccd7d5501f
#: ../../releases/1.2.2.txt:15 ../../releases/1.2.4.txt:15
#: ../../releases/1.2.5.txt:15
msgid ""
"For full details on the new features, backwards incompatibilities, and "
"deprecated features in the 1.2 branch, see the :doc:`/releases/1.2`."
msgstr ""

# 8401f711af76406eba76d254b2faeb04
#: ../../releases/1.2.2.txt:21
msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.2.2, we have made an exception to this rule."
msgstr ""

# 05777e858e9740688f8dd0b4b0820131
#: ../../releases/1.2.2.txt:24
msgid ""
"In order to test a bug fix that forms part of the 1.2.2 release, it was "
"necessary to add a feature -- the ``enforce_csrf_checks`` flag -- to the :"
"mod:`test client <django.test.client>`. This flag forces the test client to "
"perform full CSRF checks on forms. The default behavior of the test client "
"hasn't changed, but if you want to do CSRF checks with the test client, it "
"is now possible to do so."
msgstr ""

# 3641dde676044e9681496e7677c538c9
#: ../../releases/1.2.3.txt:3
msgid "Django 1.2.3 release notes"
msgstr ""

# 2e5af69e7923472e8501518115ab9077
#: ../../releases/1.2.3.txt:5
msgid ""
"Django 1.2.3 fixed a couple of release problems in the 1.2.2 release and was "
"released two days after 1.2.2."
msgstr ""

# 013299aadc144acfb4ccfc720a1ba8ce
#: ../../releases/1.2.3.txt:8
msgid "This release corrects the following problems:"
msgstr ""

# 17c392a824cd41b3b2257e575f3abdd5
#: ../../releases/1.2.3.txt:10
msgid ""
"The patch_ applied for the security issue covered in Django 1.2.2 caused "
"issues with non-ASCII responses using CSRF tokens."
msgstr ""

# 86e0011c3d7c4cbb9f351206dfee325b
#: ../../releases/1.2.3.txt:13
msgid ""
"The patch also caused issues with some forms, most notably the user-editing "
"forms in the Django administrative interface."
msgstr ""

# afb210e40d9a42eb9a088ce466658be9
#: ../../releases/1.2.3.txt:16
msgid "The packaging manifest did not contain the full list of required files."
msgstr ""

# 2a67881a6aa748eab798380ac3ff0a25
#: ../../releases/1.2.4.txt:3
msgid "Django 1.2.4 release notes"
msgstr ""

# 678a3c0ac8e848d78a1ff63fa7b3d47f
#: ../../releases/1.2.4.txt:5
msgid "Welcome to Django 1.2.4!"
msgstr ""

# 396115e248324ea4be9ed2520a3f7612
#: ../../releases/1.2.4.txt:7
msgid ""
"This is the fourth \"bugfix\" release in the Django 1.2 series, improving "
"the stability and performance of the Django 1.2 codebase."
msgstr ""

# d77ce711ee7f4da9805c96d21d2b3e59
#: ../../releases/1.2.4.txt:10
msgid ""
"With one exception, Django 1.2.4 maintains backwards compatibility with "
"Django 1.2.3. It also contains a number of fixes and other improvements. "
"Django 1.2.4 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.2."
msgstr ""

# 8dba1b87f2d946a8936e79bed4ad58c2
#: ../../releases/1.2.4.txt:55
msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.2.4, we have made an exception to this rule."
msgstr ""

# 1974b227839f4bd6af06db6a1235c39a
#: ../../releases/1.2.4.txt:58
msgid ""
"One of the bugs fixed in Django 1.2.4 involves a set of circumstances "
"whereby a running a test suite on a multiple database configuration could "
"cause the original source database (i.e., the actual production database) to "
"be dropped, causing catastrophic loss of data. In order to provide a fix for "
"this problem, it was necessary to introduce a new setting -- :setting:"
"`TEST_DEPENDENCIES` -- that allows you to define any creation order "
"dependencies in your database configuration."
msgstr ""

# 6b2be6b944164c2b9b3f15d105b584ec
#: ../../releases/1.2.4.txt:67
msgid ""
"Most users -- even users with multiple-database configurations -- need not "
"be concerned about the data loss bug, or the manual configuration of :"
"setting:`TEST_DEPENDENCIES`. See the `original problem report`_ "
"documentation on :ref:`controlling the creation order of test databases "
"<topics-testing-creation-dependencies>` for details."
msgstr ""

# 494baee89c044510a229fdae3a4fbe2c
#: ../../releases/1.2.4.txt:78
msgid ""
"The function-based :setting:`TEST_RUNNER` previously used to execute the "
"GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was "
"finally deprecated in favor of a class-based test runner, :class:`django."
"contrib.gis.tests.GeoDjangoTestSuiteRunner`, added in this release."
msgstr ""

# bdd0a4350b524acd8dcbb3f8cb7e9dd9
#: ../../releases/1.2.4.txt:84
msgid ""
"In addition, the GeoDjango test suite is now included when :ref:`running the "
"Django test suite <running-unit-tests>` with ``runtests.py`` and using :ref:"
"`spatial database backends <spatial-backends>`."
msgstr ""

# 8bf48921cac84b3b9c0ffa3373af2387
#: ../../releases/1.2.5.txt:3
msgid "Django 1.2.5 release notes"
msgstr ""

# 9a3c20760c1f42898b4a0ea70d7143d1
#: ../../releases/1.2.5.txt:5
msgid "Welcome to Django 1.2.5!"
msgstr ""

# 6bc34ffd2e3a469688c94afb3d403f99
#: ../../releases/1.2.5.txt:7
msgid ""
"This is the fifth \"bugfix\" release in the Django 1.2 series, improving the "
"stability and performance of the Django 1.2 codebase."
msgstr ""

# ed40cf025b9a4922b4c9f6a37a91de8f
#: ../../releases/1.2.5.txt:10
msgid ""
"With four exceptions, Django 1.2.5 maintains backwards compatibility with "
"Django 1.2.4. It also contains a number of fixes and other improvements. "
"Django 1.2.5 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.2."
msgstr ""

# 0237646b6d484703b35a3dae1480380e
#: ../../releases/1.2.5.txt:71
msgid "FileField no longer deletes files"
msgstr ""

# 8a59487048ac4e45826c6484758d1393
#: ../../releases/1.2.5.txt:73
msgid ""
"In earlier Django versions, when a model instance containing a :class:"
"`~django.db.models.FileField` was deleted, :class:`~django.db.models."
"FileField` took it upon itself to also delete the file from the backend "
"storage. This opened the door to several potentially serious data-loss "
"scenarios, including rolled-back transactions and fields on different models "
"referencing the same file. In Django 1.2.5, :class:`~django.db.models."
"FileField` will never delete files from the backend storage. If you need "
"cleanup of orphaned files, you'll need to handle it yourself (for instance, "
"with a custom management command that can be run manually or scheduled to "
"run periodically via e.g. cron)."
msgstr ""

# 394aea330221472db2ac07c9649c519b
# 89694cc0a71542079cad25d8e4850126
#: ../../releases/1.2.5.txt:85 ../../releases/1.3.txt:536
msgid "Use of custom SQL to load initial data in tests"
msgstr ""

# b88d1531df034e8bb74d3d2b95e79044
# 15f81172d1e44b148ceb365ad9dbad39
#: ../../releases/1.2.5.txt:87 ../../releases/1.3.txt:538
msgid ""
"Django provides a custom SQL hooks as a way to inject hand-crafted SQL into "
"the database synchronization process. One of the possible uses for this "
"custom SQL is to insert data into your database. If your custom SQL contains "
"``INSERT`` statements, those insertions will be performed every time your "
"database is synchronized. This includes the synchronization of any test "
"databases that are created when you run a test suite."
msgstr ""

# 234e2448c3374a7daf61e580e257d20a
# d1dd034c297d421fad269c13120516f5
#: ../../releases/1.2.5.txt:95 ../../releases/1.3.txt:546
msgid ""
"However, in the process of testing the Django 1.3, it was discovered that "
"this feature has never completely worked as advertised. When using database "
"backends that don't support transactions, or when using a "
"TransactionTestCase, data that has been inserted using custom SQL will not "
"be visible during the testing process."
msgstr ""

# 96ac55d0f95544f499e80ae19aa84dee
# bb91065441424454a5136fca6a2bd9c4
#: ../../releases/1.2.5.txt:101 ../../releases/1.3.txt:552
msgid ""
"Unfortunately, there was no way to rectify this problem without introducing "
"a backwards incompatibility. Rather than leave SQL-inserted initial data in "
"an uncertain state, Django now enforces the policy that data inserted by "
"custom SQL will *not* be visible during testing."
msgstr ""

# e71cee17fccc4f06b7f0b57ef65f3ee2
# 89d81d775da041289458930900791c59
#: ../../releases/1.2.5.txt:107 ../../releases/1.3.txt:558
msgid ""
"This change only affects the testing process. You can still use custom SQL "
"to load data into your production database as part of the syncdb process. If "
"you require data to exist during test conditions, you should either insert "
"it using :ref:`test fixtures <topics-testing-fixtures>`, or using the "
"``setUp()`` method of your test case."
msgstr ""

# 9ca310b38ce0481fb3fa5cf259d7ec15
#: ../../releases/1.2.5.txt:115
msgid "ModelAdmin.lookup_allowed signature changed"
msgstr ""

# 55507fbfc0f34bf19ee82260549ad1c2
#: ../../releases/1.2.5.txt:117
msgid ""
"Django 1.2.4 introduced a method ``lookup_allowed`` on ``ModelAdmin``, to "
"cope with a security issue (changeset `[15033] <https://code.djangoproject."
"com/changeset/15033>`_). Although this method was never documented, it seems "
"some people have overridden ``lookup_allowed``, especially to cope with "
"regressions introduced by that changeset. While the method is still "
"undocumented and not marked as stable, it may be helpful to know that the "
"signature of this function has changed."
msgstr ""

# a5b56014fa8f48509eb18bfa5db42be9
#: ../../releases/1.2.6.txt:3
msgid "Django 1.2.6 release notes"
msgstr ""

# 30f2dcc994e0496a8acc0258243d210d
# 100312af6ac1436e8984b6a1e799b54a
#: ../../releases/1.2.6.txt:5 ../../releases/1.3.1.txt:5
msgid "*September 9, 2011*"
msgstr ""

# bc29f3ac55424d8ba151df4c7f010be2
#: ../../releases/1.2.6.txt:7
msgid "Welcome to Django 1.2.6!"
msgstr ""

# 6515ec30be434bcdaa5e7bd089517246
#: ../../releases/1.2.6.txt:9
msgid ""
"This is the sixth bugfix/security release in the Django 1.2 series, fixing "
"several security issues present in Django 1.2.5.  Django 1.2.6 is a "
"recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""

# 3b5799f7c44c44cd879e3aa05ce7987f
# dc822971fbe3460082ed7c076dea8ddf
# 6efa27be155d466595bb5529b29e2f2d
# e51adb897d804f028a2607cf665622c1
#: ../../releases/1.2.6.txt:13 ../../releases/1.3.1.txt:13
#: ../../releases/1.3.2.txt:11 ../../releases/1.4.1.txt:11
msgid ""
"For a full list of issues addressed in this release, see the `security "
"advisory`_."
msgstr ""

# 02482eee62284d739b04c9e94cefa448
#: ../../releases/1.2.7.txt:3
msgid "Django 1.2.7 release notes"
msgstr ""

# 6cd1cb5f10cf4c278f03c2ccd376dea0
#: ../../releases/1.2.7.txt:5
msgid "*September 10, 2011*"
msgstr ""

# 3213bba4fb9943e6b8cf75835c9a31b8
#: ../../releases/1.2.7.txt:7
msgid "Welcome to Django 1.2.7!"
msgstr ""

# 9c6a799f07b847d18b1c3be62a56109c
#: ../../releases/1.2.7.txt:9
msgid ""
"This is the seventh bugfix/security release in the Django 1.2 series. It "
"replaces Django 1.2.6 due to problems with the 1.2.6 release tarball. Django "
"1.2.7 is a recommended upgrade for all users of any Django release in the "
"1.2.X series."
msgstr ""

# 4f427c1c079e41608a05c22aed669f67
#: ../../releases/1.2.7.txt:14
msgid "For more information, see the `release advisory`_."
msgstr ""

# b500b6a904b34cb782acaa1ed0557337
#: ../../releases/1.3.txt:3
msgid "Django 1.3 release notes"
msgstr ""

# f5d9065145b74df192d7483301607538
#: ../../releases/1.3.txt:5
msgid "*March 23, 2011*"
msgstr ""

# fe77e66ac3bb47febc733815f27633f4
#: ../../releases/1.3.txt:7
msgid "Welcome to Django 1.3!"
msgstr ""

# 94d26e6ad6754b88bed01b0f0cf58fec
#: ../../releases/1.3.txt:9
msgid ""
"Nearly a year in the making, Django 1.3 includes quite a few `new features`_ "
"and plenty of bug fixes and improvements to existing features. These release "
"notes cover the new features in 1.3, as well as some `backwards-incompatible "
"changes`_ you'll want to be aware of when upgrading from Django 1.2 or older "
"versions."
msgstr ""

# fd34888a63d7474192ea212d756373bc
#: ../../releases/1.3.txt:18
msgid ""
"Django 1.3's focus has mostly been on resolving smaller, long-standing "
"feature requests, but that hasn't prevented a few fairly significant new "
"features from landing, including:"
msgstr ""

# 3519a3e1ce3a4bba91d8e60c4c2cf427
#: ../../releases/1.3.txt:22
msgid "A framework for writing `class-based views`_."
msgstr ""

# d8eaa7d9382e4c93b9e0c71de01869b8
#: ../../releases/1.3.txt:24
msgid "Built-in support for `using Python's logging facilities`_."
msgstr ""

# 1d81e7f409b1493c93b5e4ea5dcad551
#: ../../releases/1.3.txt:26
msgid "Contrib support for `easy handling of static files`_."
msgstr ""

# 39678a316bd74b8eb3d3d87716e07690
#: ../../releases/1.3.txt:28
msgid ""
"Django's testing framework now supports (and ships with a copy of) `the "
"unittest2 library`_."
msgstr ""

# 57ac93cdd1a848f0804a19d382ba0872
#: ../../releases/1.3.txt:31
msgid ""
"There's plenty more, of course; see the coverage of `new features`_ below "
"for a full rundown and details."
msgstr ""

# 9631c0f9762e4e5f82c103cd05e8b287
#: ../../releases/1.3.txt:34
msgid ""
"Wherever possible, of course, new features are introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy. As a result of this policy, Django 1.3 `begins the deprecation "
"process for some features`_."
msgstr ""

# 9da1d9e0514e435284cf649b9a9c40bb
#: ../../releases/1.3.txt:39
msgid ""
"Some changes, unfortunately, are genuinely backwards-incompatible; in most "
"cases these are due to security issues or bugs which simply couldn't be "
"fixed any other way. Django 1.3 includes a few of these, and descriptions of "
"them -- along with the (minor) modifications you'll need to make to handle "
"them -- are documented in the list of `backwards-incompatible changes`_ "
"below."
msgstr ""

# a8089b86802f4e41b80ca1ca48b0080a
#: ../../releases/1.3.txt:56
msgid ""
"The release of Django 1.2 was notable for having the first shift in Django's "
"Python compatibility policy; prior to Django 1.2, Django supported any 2.x "
"version of Python from 2.3 up. As of Django 1.2, the minimum requirement was "
"raised to Python 2.4."
msgstr ""

# 1010676883a8470a9146ba79fcbeaf83
#: ../../releases/1.3.txt:61
msgid ""
"Django 1.3 continues to support Python 2.4, but will be the final Django "
"release series to do so; beginning with Django 1.4, the minimum supported "
"Python version will be 2.5. A document outlining our full timeline for "
"deprecating Python 2.x and moving to Python 3.x will be published shortly "
"after the release of Django 1.3."
msgstr ""

# 7ca5433357ae43cebb371541d53451fe
#: ../../releases/1.3.txt:68
msgid "What's new in Django 1.3"
msgstr ""

# 58e5ae6fb53e4a93978cc538e9d0a268
# 49fe65bb3da6487ea1da6b696ef80d33
#: ../../releases/1.3.txt:71 ../../releases/1.3-alpha-1.txt:30
msgid "Class-based views"
msgstr ""

# 1b99b47eb4034772a94bbd44801779aa
# e8fbe64b0f4f4afc8f03be9d3b68134d
#: ../../releases/1.3.txt:73 ../../releases/1.3-alpha-1.txt:32
msgid ""
"Django 1.3 adds a framework that allows you to use a class as a view. This "
"means you can compose a view out of a collection of methods that can be "
"subclassed and overridden to provide common views of data without having to "
"write too much code."
msgstr ""

# 1697c71ac4a44222b186d7776e9cb596
# 29eaba6cfe5647a3a08d01cbd307e70a
#: ../../releases/1.3.txt:78 ../../releases/1.3-alpha-1.txt:37
msgid ""
"Analogs of all the old function-based generic views have been provided, "
"along with a completely generic view base class that can be used as the "
"basis for reusable applications that can be easily extended."
msgstr ""

# d1d3fcc1beb6411181d9806417877a8a
#: ../../releases/1.3.txt:83
msgid ""
"See :doc:`the documentation on class-based generic views</topics/class-based-"
"views/index>` for more details. There is also a document to help you "
"`convert your function-based generic views to class-based views <https://"
"docs.djangoproject.com/en/1.4/topics/generic-views-migration/>`_."
msgstr ""

# 833889c97b3c4b569415d09b635faecf
# ac660fc25bff4626882a743a6a3b0f36
#: ../../releases/1.3.txt:89 ../../releases/1.3-alpha-1.txt:47
msgid "Logging"
msgstr ""

# 7f94b48b319c4f898171c3fef4b1ea86
#: ../../releases/1.3.txt:91
msgid ""
"Django 1.3 adds framework-level support for Python's ``logging`` module.  "
"This means you can now easily configure and control logging as part of your "
"Django project. A number of logging handlers and logging calls have been "
"added to Django's own code as well -- most notably, the error emails sent on "
"a HTTP 500 server error are now handled as a logging activity. See :doc:`the "
"documentation on Django's logging interface </topics/logging>` for more "
"details."
msgstr ""

# 227b803ac11d411a9a0c215e4e4dc8b4
# 83bdd3c1ade64e90afb2cbd81d65803f
#: ../../releases/1.3.txt:100 ../../releases/1.3-alpha-1.txt:58
msgid "Extended static files handling"
msgstr ""

# 6681cc0d2a5143589f1b41bc0d2aea54
#: ../../releases/1.3.txt:102
msgid ""
"Django 1.3 ships with a new contrib app -- ``django.contrib.staticfiles`` -- "
"to help developers handle the static media files (images, CSS, Javascript, "
"etc.) that are needed to render a complete web page."
msgstr ""

# 6a444c42b1b74a219f8642894b3ae89e
# cdebc3892cc7425bb9a6658bed284db6
#: ../../releases/1.3.txt:107 ../../releases/1.3-alpha-1.txt:64
msgid ""
"In previous versions of Django, it was common to place static assets in :"
"setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :"
"setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` "
"app is to make it easier to keep static files separate from user-uploaded "
"files. Static assets should now go in ``static/`` subdirectories of your "
"apps or in other static assets directories listed in :setting:"
"`STATICFILES_DIRS`, and will be served at :setting:`STATIC_URL`."
msgstr ""

# 9b4ec4d40c3b4f3fb3f5f80d13fdbba3
# ef69786b8cd0446191b9d144f0fdcd0b
#: ../../releases/1.3.txt:116 ../../releases/1.3-alpha-1.txt:73
msgid ""
"See the :doc:`reference documentation of the app </ref/contrib/staticfiles>` "
"for more details or learn how to :doc:`manage static files </howto/static-"
"files/index>`."
msgstr ""

# f433dfb941ff4e75ab1b9f27786956c4
#: ../../releases/1.3.txt:121
msgid "unittest2 support"
msgstr ""

# cb3289d1b3d042c0a8f909af34c5629b
#: ../../releases/1.3.txt:123
msgid ""
"Python 2.7 introduced some major changes to the ``unittest`` library, adding "
"some extremely useful features. To ensure that every Django project can "
"benefit from these new features, Django ships with a copy of unittest2_, a "
"copy of the Python 2.7 unittest library, backported for Python 2.4 "
"compatibility."
msgstr ""

# 0de16bd592cf4b5bb7cd26ccda581c5c
#: ../../releases/1.3.txt:129
msgid ""
"To access this library, Django provides the ``django.utils.unittest`` module "
"alias. If you are using Python 2.7, or you have installed ``unittest2`` "
"locally, Django will map the alias to the installed version of the unittest "
"library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

# 5d3ae609ddf44f11be8f7f7e3e737820
#: ../../releases/1.3.txt:135
msgid "To take advantage of this alias, simply use::"
msgstr ""

# ea218a553b3145609766c30d28d6d84e
# cd699d7b5e104148966f48229731c7f0
#: ../../releases/1.3.txt:139 ../../releases/1.3-alpha-1.txt:96
msgid "wherever you would have historically used::"
msgstr ""

# 71c59d696a8f4f2a9707b52a27c62994
#: ../../releases/1.3.txt:143
msgid ""
"If you want to continue to use the base unittest library, you can -- you "
"just won't get any of the nice new unittest2 features."
msgstr ""

# 893a32eb073146ffb3f18f93dbc25d05
# 21f5c014a0fd4d56af3373c060d9a78e
#: ../../releases/1.3.txt:149 ../../releases/1.3-alpha-1.txt:106
msgid "Transaction context managers"
msgstr ""

# 6ae74f45112642a985f75e3d0bdbe63b
# 25378cc9ba5d4addb64be6a439d8d66e
#: ../../releases/1.3.txt:151 ../../releases/1.3-alpha-1.txt:108
msgid ""
"Users of Python 2.5 and above may now use :ref:`transaction management "
"functions <transaction-management-functions>` as `context managers`_. For "
"example::"
msgstr ""

# c9f958f75bfa4dad8d43cec64729f183
# b6fdc04122a345fb9e4975ce2e388e07
#: ../../releases/1.3.txt:159 ../../releases/1.3-alpha-1.txt:116
msgid "For more information, see :ref:`transaction-management-functions`."
msgstr ""

# 16a6afdf051e4cc682030a6a4276c4ac
# 1f33212bc19d43edaa8a1f012ba4738d
#: ../../releases/1.3.txt:162 ../../releases/1.3-alpha-1.txt:119
msgid "Configurable delete-cascade"
msgstr ""

# abe98db93ae4452eaf71cce3e0d246e9
# 8a5902207c444cdbbc3bb98787a99743
#: ../../releases/1.3.txt:164 ../../releases/1.3-alpha-1.txt:121
msgid ""
":class:`~django.db.models.ForeignKey` and :class:`~django.db.models."
"OneToOneField` now accept an :attr:`~django.db.models.ForeignKey.on_delete` "
"argument to customize behavior when the referenced object is deleted. "
"Previously, deletes were always cascaded; available alternatives now include "
"set null, set default, set to any value, protect, or do nothing."
msgstr ""

# 83d8ba0c856042fc8b53f749da210fd2
# 84c469b219f74f65a883e830fbf736a1
#: ../../releases/1.3.txt:171 ../../releases/1.3-alpha-1.txt:128
msgid ""
"For more information, see the :attr:`~django.db.models.ForeignKey.on_delete` "
"documentation."
msgstr ""

# f5443d2b15c54ba09a9c0330b0d1ddae
#: ../../releases/1.3.txt:175
msgid "Contextual markers and comments for translatable strings"
msgstr ""

# 4d55e7c279274b53ae3d14f20ba1acd4
# 7284553edb8c4f4ab14906eed614ff85
#: ../../releases/1.3.txt:177 ../../releases/1.3-alpha-1.txt:134
msgid ""
"For translation strings with ambiguous meaning, you can now use the "
"``pgettext`` function to specify the context of the string."
msgstr ""

# 97cf96dfe59c43509b5311f1ae95e3d1
#: ../../releases/1.3.txt:180
msgid ""
"And if you just want to add some information for translators, you can also "
"add special translator comments in the source."
msgstr ""

# 3d101ac4d9d3435db99829b3ea9ce870
#: ../../releases/1.3.txt:183
msgid ""
"For more information, see :ref:`contextual-markers` and :ref:`translator-"
"comments`."
msgstr ""

# 7491d0b662584d519d5fb719e122738b
#: ../../releases/1.3.txt:187
msgid "Improvements to built-in template tags"
msgstr ""

# 1bdea4c1f4f2404385adfdc25ebb3c5b
#: ../../releases/1.3.txt:189
msgid ""
"A number of improvements have been made to Django's built-in template tags:"
msgstr ""

# 6db4308e8c9b4aa9a90bcd925f43ec3e
#: ../../releases/1.3.txt:191
msgid ""
"The :ttag:`include` tag now accepts a ``with`` option, allowing you to "
"specify context variables to the included template"
msgstr ""

# 3c2199ecb5624c2aa2f9911dc429f8c3
#: ../../releases/1.3.txt:194
msgid ""
"The :ttag:`include` tag now accepts an ``only`` option, allowing you to "
"exclude the current context from the included context"
msgstr ""

# 3924791929c2446d85d7c8eff9cbf4bc
#: ../../releases/1.3.txt:197
msgid ""
"The :ttag:`with` tag now allows you to define multiple context variables in "
"a single :ttag:`with` block."
msgstr ""

# 7dde2a81e46d4124a593577a9e5b1551
#: ../../releases/1.3.txt:200
msgid ""
"The :ttag:`load` tag now accepts a ``from`` argument, allowing you to load a "
"single tag or filter from a library."
msgstr ""

# 20f05d9b62bd438abd0bf6ad4210bf2a
#: ../../releases/1.3.txt:204
msgid "TemplateResponse"
msgstr ""

# 7ebcd93249d5457d8dd11414d59ab806
#: ../../releases/1.3.txt:206
msgid ""
"It can sometimes be beneficial to allow decorators or middleware to modify a "
"response *after* it has been constructed by the view. For example, you may "
"want to change the template that is used, or put additional data into the "
"context."
msgstr ""

# 5289d701df464989b6e88106add3589d
#: ../../releases/1.3.txt:211
msgid ""
"However, you can't (easily) modify the content of a basic :class:`~django."
"http.HttpResponse` after it has been constructed. To overcome this "
"limitation, Django 1.3 adds a new :class:`~django.template.response."
"TemplateResponse` class. Unlike basic :class:`~django.http.HttpResponse` "
"objects, :class:`~django.template.response.TemplateResponse` objects retain "
"the details of the template and context that was provided by the view to "
"compute the response. The final output of the response is not computed until "
"it is needed, later in the response process."
msgstr ""

# 7f213e7f3523456285ce87f2c0f6b114
#: ../../releases/1.3.txt:221
msgid ""
"For more details, see the :doc:`documentation </ref/template-response>` on "
"the :class:`~django.template.response.TemplateResponse` class."
msgstr ""

# 48f713f05a3f450e9f73b301658f200e
#: ../../releases/1.3.txt:225
msgid "Caching changes"
msgstr ""

# f03f4ddc4e44441dbf17997984b7063f
#: ../../releases/1.3.txt:227
msgid ""
"Django 1.3 sees the introduction of several improvements to the Django's "
"caching infrastructure."
msgstr ""

# f9ad7c93e66142eb89bfe6a9bb9d43d4
#: ../../releases/1.3.txt:230
msgid ""
"Firstly, Django now supports multiple named caches. In the same way that "
"Django 1.2 introduced support for multiple database connections, Django 1.3 "
"allows you to use the new :setting:`CACHES` setting to define multiple named "
"cache connections."
msgstr ""

# 18e6a9fdfa054c4d8e8c705ec3613ff2
#: ../../releases/1.3.txt:235
msgid ""
"Secondly, :ref:`versioning <cache_versioning>`, :ref:`site-wide prefixing "
"<cache_key_prefixing>` and :ref:`transformation <cache_key_transformation>` "
"have been added to the cache API."
msgstr ""

# 853c2e3a754842249d299f56a7d5a5e7
#: ../../releases/1.3.txt:239
msgid ""
"Thirdly, :ref:`cache key creation <using-vary-headers>` has been updated to "
"take the request query string into account on ``GET`` requests."
msgstr ""

# 5b10d87eb664425d9aa3a17628ca5239
#: ../../releases/1.3.txt:243
msgid ""
"Finally, support for pylibmc_ has been added to the memcached cache backend."
msgstr ""

# 84851e8cff10433d8d7a1ae9509eb6dc
#: ../../releases/1.3.txt:246
msgid ""
"For more details, see the :doc:`documentation on caching in Django</topics/"
"cache>`."
msgstr ""

# 0445c901ec114ca3b3fe64d5048f98f6
# ef17a4f426a840c4af15362225d7fe2c
#: ../../releases/1.3.txt:252 ../../releases/1.3-beta-1.txt:59
msgid "Permissions for inactive users"
msgstr ""

# 042912f5a55f41a3be5eb8681bed6aba
#: ../../releases/1.3.txt:254
msgid ""
"If you provide a custom auth backend with ``supports_inactive_user`` set to "
"``True``, an inactive ``User`` instance will check the backend for "
"permissions.  This is useful for further centralizing the permission "
"handling. See the :doc:`authentication docs </topics/auth/index>` for more "
"details."
msgstr ""

# 19b0e081eeae4b2c97b0ead08fcaa30b
#: ../../releases/1.3.txt:263
msgid ""
"The GeoDjango test suite is now included when :ref:`running the Django test "
"suite <running-unit-tests>` with ``runtests.py`` when using :ref:`spatial "
"database backends <spatial-backends>`."
msgstr ""

# 1c3c9811320e4fd6883b83ef11b71337
#: ../../releases/1.3.txt:268
msgid ":setting:`MEDIA_URL` and :setting:`STATIC_URL` must end in a slash"
msgstr ""

# dc01a41ab86b4f44bdc5fa4b388fdb5c
#: ../../releases/1.3.txt:270
msgid ""
"Previously, the :setting:`MEDIA_URL` setting only required a trailing slash "
"if it contained a suffix beyond the domain name."
msgstr ""

# aa5af4db674e4c2e804aaa7a8b1e7310
#: ../../releases/1.3.txt:273
msgid ""
"A trailing slash is now *required* for :setting:`MEDIA_URL` and the new :"
"setting:`STATIC_URL` setting as long as it is not blank. This ensures there "
"is a consistent way to combine paths in templates."
msgstr ""

# 7d2d01df5e384fa89339aebe8903bf20
#: ../../releases/1.3.txt:277
msgid ""
"Project settings which provide either of both settings without a trailing "
"slash will now raise a ``PendingDeprecationWarning``."
msgstr ""

# e3ca42a5e842420092fde0a683cead2c
#: ../../releases/1.3.txt:280
msgid ""
"In Django 1.4 this same condition will raise ``DeprecationWarning``, and in "
"Django 1.5 will raise an ``ImproperlyConfigured`` exception."
msgstr ""

# ba4eeea1a1d2423b9f9ae828f85f961c
# 826d89534a1d4b21a94c943f8e0d8baf
#: ../../releases/1.3.txt:284 ../../releases/1.3-alpha-1.txt:140
msgid "Everything else"
msgstr ""

# f6e05e2af9e34374be509ba19674aac6
# 169d18835f884c69b7c0107d032dc62a
#: ../../releases/1.3.txt:286 ../../releases/1.3-alpha-1.txt:142
msgid ""
"Django :doc:`1.1 <1.1>` and :doc:`1.2 <1.2>` added lots of big ticket items "
"to Django, like multiple-database support, model validation, and a session-"
"based messages framework. However, this focus on big features came at the "
"cost of lots of smaller features."
msgstr ""

# 0478276574954279b935f69189e3c2a3
# 65c193b3370542f791994b43cc0b90f4
#: ../../releases/1.3.txt:292 ../../releases/1.3-alpha-1.txt:148
msgid ""
"To compensate for this, the focus of the Django 1.3 development process has "
"been on adding lots of smaller, long standing feature requests. These "
"include:"
msgstr ""

# 4cc10c6282564f2f8d7bf165c61dd612
#: ../../releases/1.3.txt:296
msgid ""
"Improved tools for accessing and manipulating the current :class:`~django."
"contrib.sites.models.Site` object in :doc:`the sites framework </ref/contrib/"
"sites>`."
msgstr ""

# ac1c37842f8b4f5ca52ee27cd6acff6c
# 5273527f5a7e454b81396cae8aab80a8
#: ../../releases/1.3.txt:300 ../../releases/1.3-alpha-1.txt:155
msgid ""
"A :class:`~django.test.client.RequestFactory` for mocking requests in tests."
msgstr ""

# 45a42b1f0b574e639d1ecf8e5a58865c
# e97de74c1fb1410abb0aa4af5de19c6e
#: ../../releases/1.3.txt:303 ../../releases/1.3-alpha-1.txt:158
msgid ""
"A new test assertion -- :meth:`~django.test.TestCase.assertNumQueries` -- "
"making it easier to test the database activity associated with a view."
msgstr ""

# 08ae8b1f4d6046f695b3e5753b2aafdf
#: ../../releases/1.3.txt:307
msgid ""
"Support for lookups spanning relations in admin's :attr:`~django.contrib."
"admin.ModelAdmin.list_filter`."
msgstr ""

# e36b1bd922f04a16b5aaca396b48ebb6
#: ../../releases/1.3.txt:310
msgid "Support for HTTPOnly_ cookies."
msgstr ""

# 5ee437e7f460404a9070f2178cb48e8a
#: ../../releases/1.3.txt:312
msgid ""
":meth:`~django.core.mail.mail_admins()` and :meth:`~django.core.mail."
"mail_managers()` now support easily attaching HTML content to messages."
msgstr ""

# e7468162054247b2aad1a5175a4c6fb9
#: ../../releases/1.3.txt:316
msgid ":class:`~django.core.mail.EmailMessage` now supports CC's."
msgstr ""

# cbaf5d692eae4bc89a84adc8c104c17a
#: ../../releases/1.3.txt:318
msgid ""
"Error emails now include more of the detail and formatting of the debug "
"server error page."
msgstr ""

# 3c2dfce4bc494ea0a595291e5106e2d7
#: ../../releases/1.3.txt:321
msgid ""
":meth:`~django.template.Library.simple_tag` now accepts a ``takes_context`` "
"argument, making it easier to write simple template tags that require access "
"to template context."
msgstr ""

# 2983d20ee9c745c9be6ac5899e12bc1e
#: ../../releases/1.3.txt:325
msgid ""
"A new :meth:`~django.shortcuts.render()` shortcut -- an alternative to :meth:"
"`~django.shortcuts.render_to_response()` providing a :class:`~django."
"template.RequestContext` by default."
msgstr ""

# 078bbc56696e472db43db8496c7b4a89
#: ../../releases/1.3.txt:329
msgid ""
"Support for combining :ref:`F() expressions <query-expressions>` with "
"timedelta values when retrieving or updating database values."
msgstr ""

# 378e6d2a1c834876865cfdf7cc48af55
#: ../../releases/1.3.txt:337
msgid "Backwards-incompatible changes in 1.3"
msgstr ""

# 98a3ebe9267f419b8d05a9bb4b947c2f
#: ../../releases/1.3.txt:340
msgid "CSRF validation now applies to AJAX requests"
msgstr ""

# e69fa96c5c39450f9e733c70859b40fa
#: ../../releases/1.3.txt:342
msgid ""
"Prior to Django 1.2.5, Django's CSRF-prevention system exempted AJAX "
"requests from CSRF verification; due to `security issues`_ reported to us, "
"however, *all* requests are now subjected to CSRF verification. Consult :doc:"
"`the Django CSRF documentation </ref/contrib/csrf>` for details on how to "
"handle CSRF verification in AJAX requests."
msgstr ""

# 4de889bf73d34564af3e5c75b3d8849e
#: ../../releases/1.3.txt:354
msgid ""
"Prior to Django 1.2.5, the Django administrative interface allowed filtering "
"on any model field or relation -- not just those specified in "
"``list_filter`` -- via query string manipulation. Due to security issues "
"reported to us, however, query string lookup arguments in the admin must be "
"for fields or relations specified in ``list_filter`` or ``date_hierarchy``."
msgstr ""

# caf701377cc54860821c75768eff4dd4
#: ../../releases/1.3.txt:362
msgid "Deleting a model doesn't delete associated files"
msgstr ""

# a6b2f384c7a7425ab2ea2c7d30e58e22
#: ../../releases/1.3.txt:364
msgid ""
"In earlier Django versions, when a model instance containing a :class:"
"`~django.db.models.FileField` was deleted, :class:`~django.db.models."
"FileField` took it upon itself to also delete the file from the backend "
"storage. This opened the door to several data-loss scenarios, including "
"rolled-back transactions and fields on different models referencing the same "
"file. In Django 1.3, when a model is deleted the :class:`~django.db.models."
"FileField`'s ``delete()`` method won't be called. If you need cleanup of "
"orphaned files, you'll need to handle it yourself (for instance, with a "
"custom management command that can be run manually or scheduled to run "
"periodically via e.g. cron)."
msgstr ""

# 2c40b4179d6d4022bdf70d24a0b9d3ba
# 596ddc9ec4f244bd9069b4c2a0987121
#: ../../releases/1.3.txt:376 ../../releases/1.3-alpha-1.txt:169
msgid "PasswordInput default rendering behavior"
msgstr ""

# 2b72e1dcbcc943f4b7c1dde6963d0b4c
# d73d8af2c351484ab6d7b3208261e60b
#: ../../releases/1.3.txt:378 ../../releases/1.3-alpha-1.txt:171
msgid ""
"The :class:`~django.forms.PasswordInput` form widget, intended for use with "
"form fields which represent passwords, accepts a boolean keyword argument "
"``render_value`` indicating whether to send its data back to the browser "
"when displaying a submitted form with errors. Prior to Django 1.3, this "
"argument defaulted to ``True``, meaning that the submitted password would be "
"sent back to the browser as part of the form. Developers who wished to add a "
"bit of additional security by excluding that value from the redisplayed form "
"could instantiate a :class:`~django.forms.PasswordInput` passing "
"``render_value=False`` ."
msgstr ""

# 6bb1303c38e74a0bb5b6b4493c51558c
# 51cc36f2050d49c7910e796a7d6e27e9
#: ../../releases/1.3.txt:388 ../../releases/1.3-alpha-1.txt:181
msgid ""
"Due to the sensitive nature of passwords, however, Django 1.3 takes this "
"step automatically; the default value of ``render_value`` is now ``False``, "
"and developers who want the password value returned to the browser on a "
"submission with errors (the previous behavior) must now explicitly indicate "
"this. For example::"
msgstr ""

# 2dc3deabfaa64d3baf37d7459e283544
# 20b7476e8e2148bca95376afd9dec2b5
#: ../../releases/1.3.txt:399 ../../releases/1.3-alpha-1.txt:193
msgid "Clearable default widget for FileField"
msgstr ""

# eff4a66643294175acecd7227a4b4984
#: ../../releases/1.3.txt:401
msgid ""
"Django 1.3 now includes a :class:`~django.forms.ClearableFileInput` form "
"widget in addition to :class:`~django.forms.FileInput`. "
"``ClearableFileInput`` renders with a checkbox to clear the field's value "
"(if the field has a value and is not required); ``FileInput`` provided no "
"means for clearing an existing file from a ``FileField``."
msgstr ""

# c10b329a3e894a62addfb0fd08e21f3a
# a4331e9853bf46f0a908c8f9e60be99b
#: ../../releases/1.3.txt:407 ../../releases/1.3-alpha-1.txt:200
msgid ""
"``ClearableFileInput`` is now the default widget for a ``FileField``, so "
"existing forms including ``FileField`` without assigning a custom widget "
"will need to account for the possible extra checkbox in the rendered form "
"output."
msgstr ""

# 86114893b31644f3b12f7bbf3f1cd742
# db6af091305842d98f79082bf63dce85
#: ../../releases/1.3.txt:411 ../../releases/1.3-alpha-1.txt:204
msgid ""
"To return to the previous rendering (without the ability to clear the "
"``FileField``), use the ``FileInput`` widget in place of "
"``ClearableFileInput``. For instance, in a ``ModelForm`` for a hypothetical "
"``Document`` model with a ``FileField`` named ``document``::"
msgstr ""

# 02a984be5102455a91235171002441be
# f15a8cd5efb84cd190fc11d0b4ce2c79
#: ../../releases/1.3.txt:425 ../../releases/1.3-alpha-1.txt:218
msgid "New index on database session table"
msgstr ""

# b9c274f22ce64f498b10a1a39d411bf3
# 6be9017a55bb4684b8b94e616e015358
#: ../../releases/1.3.txt:427 ../../releases/1.3-alpha-1.txt:220
msgid ""
"Prior to Django 1.3, the database table used by the database backend for "
"the :doc:`sessions </topics/http/sessions>` app had no index on the "
"``expire_date`` column. As a result, date-based queries on the session table "
"-- such as the query that is needed to purge old sessions -- would be very "
"slow if there were lots of sessions."
msgstr ""

# f77fa7da8e18425b889bb381fb61932d
# 6414404b5c7a46c996454e9e2635e6c6
#: ../../releases/1.3.txt:433 ../../releases/1.3-alpha-1.txt:226
msgid ""
"If you have an existing project that is using the database session backend, "
"you don't have to do anything to accommodate this change. However, you may "
"get a significant performance boost if you manually add the new index to the "
"session table. The SQL that will add the index can be found by running the :"
"djadmin:`sqlindexes` admin command::"
msgstr ""

# ba4a2fdc5b874d57b7d4535ae22e53f3
# bf2159da4c5047d681c9d84ac8e80332
#: ../../releases/1.3.txt:443 ../../releases/1.3-alpha-1.txt:236
msgid "No more naughty words"
msgstr ""

# dd7be3900a104534b1184a252124563b
# c8ef08672edd44acb74ce6f66472c108
#: ../../releases/1.3.txt:445 ../../releases/1.3-alpha-1.txt:238
msgid ""
"Django has historically provided (and enforced) a list of profanities. The :"
"doc:`comments app </ref/contrib/comments/index>` has enforced this list of "
"profanities, preventing people from submitting comments that contained one "
"of those profanities."
msgstr ""

# f67dc2271eab45ce899fcb158a1d0e28
#: ../../releases/1.3.txt:450
msgid ""
"Unfortunately, the technique used to implement this profanities list was "
"woefully naive, and prone to the `Scunthorpe problem`_. Improving the built-"
"in filter to fix this problem would require significant effort, and since "
"natural language processing isn't the normal domain of a web framework, we "
"have \"fixed\" the problem by making the list of prohibited words an empty "
"list."
msgstr ""

# a1c85cae1a74480e9d634f61d2eb5636
# 8cbef144b2be42bda1a70fd295907be3
#: ../../releases/1.3.txt:457 ../../releases/1.3-alpha-1.txt:250
msgid ""
"If you want to restore the old behavior, simply put a :setting:"
"`PROFANITIES_LIST` setting in your settings file that includes the words "
"that you want to prohibit (see the `commit that implemented this change`_ if "
"you want to see the list of words that was historically prohibited). "
"However, if avoiding profanities is important to you, you would be well "
"advised to seek out a better, less naive approach to the problem."
msgstr ""

# 494c5ed065804874a47b3ded7d6904fd
# 15372604ed534edcbf31d0c658130b43
#: ../../releases/1.3.txt:469 ../../releases/1.3-alpha-1.txt:262
msgid "Localflavor changes"
msgstr ""

# ea70797839fc4d63ad792fce98808230
# 7ec893a33407464d8d61ae1fad24496d
#: ../../releases/1.3.txt:471 ../../releases/1.3-alpha-1.txt:264
msgid ""
"Django 1.3 introduces the following backwards-incompatible changes to local "
"flavors:"
msgstr ""

# 75a94e1118ae496cb4aadeb304a1dba8
#: ../../releases/1.3.txt:474
msgid ""
"Canada (ca) -- The province \"Newfoundland and Labrador\" has had its "
"province code updated to \"NL\", rather than the older \"NF\". In addition, "
"the Yukon Territory has had its province code corrected to \"YT\", instead "
"of \"YK\"."
msgstr ""

# b807f786bb794cf29bc9d1833414ad6e
# edb55efdfac7470eab9f86ba1eb4f2a5
#: ../../releases/1.3.txt:479 ../../releases/1.3-alpha-1.txt:267
msgid ""
"Indonesia (id) -- The province \"Nanggroe Aceh Darussalam (NAD)\" has been "
"removed from the province list in favor of the new official designation "
"\"Aceh (ACE)\"."
msgstr ""

# 7e71daa2b1e845a98f72031a0a0f9702
#: ../../releases/1.3.txt:483
msgid ""
"United States of America (us) -- The list of \"states\" used by "
"``USStateField`` has expanded to include Armed Forces postal codes. This is "
"backwards-incompatible if you were relying on ``USStateField`` not including "
"them."
msgstr ""

# dd9d8de13ca84547bb9b16047e54655c
#: ../../releases/1.3.txt:489
msgid "FormSet updates"
msgstr ""

# 59b14fdd3a1143c88888d44bbfd00910
#: ../../releases/1.3.txt:491
msgid ""
"In Django 1.3 ``FormSet`` creation behavior is modified slightly. "
"Historically the class didn't make a distinction between not being passed "
"data and being passed empty dictionary. This was inconsistent with behavior "
"in other parts of the framework. Starting with 1.3 if you pass in empty "
"dictionary the ``FormSet`` will raise a ``ValidationError``."
msgstr ""

# 06a321d442034532a57da57254bea1fd
#: ../../releases/1.3.txt:497
msgid "For example with a ``FormSet``::"
msgstr ""

# f0c2f00758274e40bac7923ddc51179c
#: ../../releases/1.3.txt:504
msgid "the following code will raise a ``ValidationError``::"
msgstr ""

# d65f74c3de294a74816f88a2eceb2f5e
#: ../../releases/1.3.txt:511
msgid ""
"if you need to instantiate an empty ``FormSet``, don't pass in the data or "
"use ``None``::"
msgstr ""

# caee1e925cd143348f1d19e94b382566
#: ../../releases/1.3.txt:518
msgid "Callables in templates"
msgstr ""

# 6d3a28fd66ba4ed58f638cdf279404b3
#: ../../releases/1.3.txt:520
msgid ""
"Previously, a callable in a template would only be called automatically as "
"part of the variable resolution process if it was retrieved via attribute "
"lookup. This was an inconsistency that could result in confusing and "
"unhelpful behavior::"
msgstr ""

# d1a5dca9e3bf4d20a0e0a7fc94e6387a
#: ../../releases/1.3.txt:530
msgid ""
"This has been resolved in Django 1.3 - the result in both cases will be "
"``u'Joe Bloggs'``. Although the previous behavior was not useful for a "
"template language designed for web designers, and was never deliberately "
"supported, it is possible that some templates may be broken by this change."
msgstr ""

# cd107cdd68d445009a0cf77029f07bcf
#: ../../releases/1.3.txt:566
msgid "Changed priority of translation loading"
msgstr ""

# cccd5ed423f248eaa25e88fad9ea163f
#: ../../releases/1.3.txt:568
msgid ""
"Work has been done to simplify, rationalize and properly document the "
"algorithm used by Django at runtime to build translations from the different "
"translations found on disk, namely:"
msgstr ""

# f687daf13d0c4ece8d5e8b950b155bd3
#: ../../releases/1.3.txt:572
msgid ""
"For translatable literals found in Python code and templates (``'django'`` "
"gettext domain):"
msgstr ""

# a2614ada91de44e4a2ae495b3ad0556f
#: ../../releases/1.3.txt:575
msgid ""
"Priorities of translations included with applications listed in the :setting:"
"`INSTALLED_APPS` setting were changed. To provide a behavior consistent with "
"other parts of Django that also use such setting (templates, etc.) now, when "
"building the translation that will be made available, the apps listed first "
"have higher precedence than the ones listed later."
msgstr ""

# e68b1286c35546a8b45f3f118ca41e0e
#: ../../releases/1.3.txt:581
msgid ""
"Now it is possible to override the translations shipped with applications by "
"using the :setting:`LOCALE_PATHS` setting whose translations have now higher "
"precedence than the translations of :setting:`INSTALLED_APPS` applications. "
"The relative priority among the values listed in this setting has also been "
"modified so the paths listed first have higher precedence than the ones "
"listed later."
msgstr ""

# 265a1804a03344dfad32482e08b67802
#: ../../releases/1.3.txt:588
msgid ""
"The ``locale`` subdirectory of the directory containing the settings, that "
"usually coincides with and is known as the *project directory* is being "
"deprecated in this release as a source of translations. (the precedence of "
"these translations is intermediate between applications and :setting:"
"`LOCALE_PATHS` translations). See the `corresponding deprecated features "
"section`_ of this document."
msgstr ""

# dd986242c8e545ffa739ae8749e29e06
#: ../../releases/1.3.txt:595
msgid ""
"For translatable literals found in Javascript code (``'djangojs'`` gettext "
"domain):"
msgstr ""

# e7b262b0059a479c8324e629345a6cc8
#: ../../releases/1.3.txt:598
msgid ""
"Similarly to the ``'django'`` domain translations: Overriding of "
"translations shipped with applications by using the :setting:`LOCALE_PATHS` "
"setting is now possible for this domain too. These translations have higher "
"precedence than the translations of Python packages passed to the :ref:"
"`javascript_catalog view <javascript_catalog-view>`.  Paths listed first "
"have higher precedence than the ones listed later."
msgstr ""

# 36196f347dc546379e962c1725ecf8c3
#: ../../releases/1.3.txt:605
msgid ""
"Translations under the ``locale`` subdirectory of the *project directory* "
"have never been taken in account for JavaScript translations and remain in "
"the same situation considering the deprecation of such location."
msgstr ""

# f3610fc0904746d6b993db5db570ab87
#: ../../releases/1.3.txt:612
msgid "Transaction management"
msgstr ""

# d6f9acb0f06a4d39be3753611315b41f
#: ../../releases/1.3.txt:614
msgid ""
"When using managed transactions -- that is, anything but the default "
"autocommit mode -- it is important when a transaction is marked as \"dirty"
"\". Dirty transactions are committed by the :func:`~django.db.transaction."
"commit_on_success` decorator or the :class:`~django.middleware.transaction."
"TransactionMiddleware`, and :func:`~django.db.transaction.commit_manually` "
"forces them to be closed explicitly; clean transactions \"get a pass\", "
"which means they are usually rolled back at the end of a request when the "
"connection is closed."
msgstr ""

# 5d84fc871c2145b8bff251d447289022
#: ../../releases/1.3.txt:624
msgid ""
"Until Django 1.3, transactions were only marked dirty when Django was aware "
"of a modifying operation performed in them; that is, either some model was "
"saved, some bulk update or delete was performed, or the user explicitly "
"called ``transaction.set_dirty()``. In Django 1.3, a transaction is marked "
"dirty when *any* database operation is performed."
msgstr ""

# 20ee042f03f04a919d870faa8bc735e8
#: ../../releases/1.3.txt:631
msgid ""
"As a result of this change, you no longer need to set a transaction dirty "
"explicitly when you execute raw SQL or use a data-modifying ``SELECT``. "
"However, you *do* need to explicitly close any read-only transactions that "
"are being managed using :func:`~django.db.transaction.commit_manually`. For "
"example::"
msgstr ""

# ac8a3569062f48ae96bd7324b75ac340
#: ../../releases/1.3.txt:642
msgid ""
"Prior to Django 1.3, this would work without error. However, under Django "
"1.3, this will raise a :class:`~django.db.transaction."
"TransactionManagementError` because the read operation that retrieves the "
"``MyObject`` instance leaves the transaction in a dirty state."
msgstr ""

# fa1ad519b5954fa790c45a25a4580ffe
#: ../../releases/1.3.txt:649
msgid "No password reset for inactive users"
msgstr ""

# 6a6585a9169e42e7aff686ffe1dcc1ae
#: ../../releases/1.3.txt:651
msgid ""
"Prior to Django 1.3, inactive users were able to request a password reset "
"email and reset their password. In Django 1.3 inactive users will receive "
"the same message as a nonexistent account."
msgstr ""

# 5bfbd03dc24c4f2c9ab96399e3766464
#: ../../releases/1.3.txt:656
msgid "Password reset view now accepts ``from_email``"
msgstr ""

# d7b62fbe6fe34966acc948d82e14f53f
#: ../../releases/1.3.txt:658
msgid ""
"The :func:`django.contrib.auth.views.password_reset` view now accepts a "
"``from_email`` parameter, which is passed to the ``password_reset_form``'s "
"``save()`` method as a keyword argument. If you are using this view with a "
"custom password reset form, then you will need to ensure your form's "
"``save()`` method accepts this keyword argument."
msgstr ""

# d745411feb854ef099aa83dc8955230d
# a7ddd1ac09e54d69a2e5d99f96970a18
#: ../../releases/1.3.txt:667 ../../releases/1.3-alpha-1.txt:273
msgid "Features deprecated in 1.3"
msgstr ""

# f16c7bd2a1fc4472aa551c9200434f9d
# 10252bbe7e4346dfb68a74c6eca29d85
#: ../../releases/1.3.txt:660 ../../releases/1.3-alpha-1.txt:275
msgid ""
"Django 1.3 deprecates some features from earlier releases. These features "
"are still supported, but will be gradually phased out over the next few "
"release cycles."
msgstr ""

# da91e6d46d664ad1860772de0f31dba3
# 8e70b51e603d44f7831c79f58ed40795
#: ../../releases/1.3.txt:664 ../../releases/1.3-alpha-1.txt:279
msgid ""
"Code taking advantage of any of the features below will raise a "
"``PendingDeprecationWarning`` in Django 1.3. This warning will be silent by "
"default, but may be turned on using Python's :mod:`warnings` module, or by "
"running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""

# 7d09f4963a4a494da215fdbfe7753b96
# 34b6cefaa4534e5b8558296655829a79
#: ../../releases/1.3.txt:669 ../../releases/1.3-alpha-1.txt:284
msgid ""
"In Django 1.4, these warnings will become a ``DeprecationWarning``, which is "
"*not* silent. In Django 1.5 support for these features will be removed "
"entirely."
msgstr ""

# c233ac6412f846838ab43415ed94bbea
# cb85387c9231473a807c76ff7bde947b
#: ../../releases/1.3.txt:675 ../../releases/1.3-alpha-1.txt:290
msgid ""
"For more details, see the documentation :doc:`Django's release process </"
"internals/release-process>` and our :doc:`deprecation timeline </internals/"
"deprecation>`."
msgstr ""

# 1cc1e4a77c634fe5bd5846731fe21791
# 289729440a524f6bbecf5864b2b57e72
#: ../../releases/1.3.txt:680 ../../releases/1.3-alpha-1.txt:295
msgid "``mod_python`` support"
msgstr ""

# 4222d8b411864af0928862461889ab7b
# 8d030b8705e44cf29df1bbdfbe549be5
#: ../../releases/1.3.txt:682 ../../releases/1.3-alpha-1.txt:297
msgid ""
"The ``mod_python`` library has not had a release since 2007 or a commit "
"since 2008. The Apache Foundation board voted to remove ``mod_python`` from "
"the set of active projects in its version control repositories, and its lead "
"developer has shifted all of his efforts toward the lighter, slimmer, more "
"stable, and more flexible ``mod_wsgi`` backend."
msgstr ""

# 40234015464b49559d892f6685efb0f8
#: ../../releases/1.3.txt:688
msgid ""
"If you are currently using the ``mod_python`` request handler, you should "
"redeploy your Django projects using another request handler. :doc:`mod_wsgi "
"</howto/deployment/wsgi/modwsgi>` is the request handler recommended by the "
"Django project, but :doc:`FastCGI </howto/deployment/fastcgi>` is also "
"supported. Support for ``mod_python`` deployment will be removed in Django "
"1.5."
msgstr ""

# 91c3baadc69043a880d7d1af64aa20fb
# 68b3cb0ee1c44bf690b57ba97626da9b
#: ../../releases/1.3.txt:696 ../../releases/1.3-alpha-1.txt:308
msgid "Function-based generic views"
msgstr ""

# e898b157d00449d9a6a378666385d3b3
# 3a5dc7ca481c4b0ba0b0c12b40767e11
#: ../../releases/1.3.txt:698 ../../releases/1.3-alpha-1.txt:310
msgid ""
"As a result of the introduction of class-based generic views, the function-"
"based generic views provided by Django have been deprecated. The following "
"modules and the views they contain have been deprecated:"
msgstr ""

# 445b620d8cd145f1a18f9f4535fe3b29
# e4798f360f0642e1b247b71fc73773ae
#: ../../releases/1.3.txt:702 ../../releases/1.3-alpha-1.txt:314
msgid "``django.views.generic.create_update``"
msgstr ""

# a3fe64b41b0f48a9808cf58fdbdbe51d
# b918f3eed12c4b8eb1b99c37ef78d601
#: ../../releases/1.3.txt:703 ../../releases/1.3-alpha-1.txt:315
msgid "``django.views.generic.date_based``"
msgstr ""

# 5307ba23a974436bae127db7206894e9
# 3c4dbc0d27d24662983c22823e84be15
#: ../../releases/1.3.txt:704 ../../releases/1.3-alpha-1.txt:316
msgid "``django.views.generic.list_detail``"
msgstr ""

# 1c936763ab0545419d84a5c8fdcee8cf
# 8c1ba38374334aacb95d6be8b79729ca
#: ../../releases/1.3.txt:705 ../../releases/1.3-alpha-1.txt:317
msgid "``django.views.generic.simple``"
msgstr ""

# a0f0339877a841a795905bdac0ea05b4
# d0cff779eb2b4663b78ac5580bcb5b88
#: ../../releases/1.3.txt:708 ../../releases/1.3-alpha-1.txt:320
msgid "Test client response ``template`` attribute"
msgstr ""

# 08abdfde2b02422c8fe5b3cb2f2117fe
# b235720da38d4c84b5635f5709b25cfd
#: ../../releases/1.3.txt:710 ../../releases/1.3-alpha-1.txt:322
msgid ""
"Django's :ref:`test client <test-client>` returns :class:`~django.test."
"client.Response` objects annotated with extra testing information. In Django "
"versions prior to 1.3, this included a ``template`` attribute containing "
"information about templates rendered in generating the response: either "
"None, a single :class:`~django.template.Template` object, or a list of :"
"class:`~django.template.Template` objects. This inconsistency in return "
"values (sometimes a list, sometimes not) made the attribute difficult to "
"work with."
msgstr ""

# 6e7d6bcf2aca4dadac8ffdec3de1c74e
# e2aedaa9d9144d8ab622a16b7839cdaa
#: ../../releases/1.3.txt:719 ../../releases/1.3-alpha-1.txt:331
msgid ""
"In Django 1.3 the ``template`` attribute is deprecated in favor of a new :"
"attr:`~django.test.client.Response.templates` attribute, which is always a "
"list, even if it has only a single element or no elements."
msgstr ""

# d34911fa36034148ab4bb60f40197f6b
# c79738f6b47c4164a02520c5181e5a46
#: ../../releases/1.3.txt:724 ../../releases/1.3-alpha-1.txt:336
msgid "``DjangoTestRunner``"
msgstr ""

# 0acc0b89897b4ac5957cf9d4d55c7799
# 86c636875d5743da9a87e58a2df03b55
#: ../../releases/1.3.txt:726 ../../releases/1.3-alpha-1.txt:338
msgid ""
"As a result of the introduction of support for unittest2, the features of "
"``django.test.simple.DjangoTestRunner`` (including fail-fast and Ctrl-C test "
"termination) have been made redundant. In view of this redundancy, "
"``DjangoTestRunner`` has been turned into an empty placeholder class, and "
"will be removed entirely in Django 1.5."
msgstr ""

# 9cea257b38a34d189b8680ca3b5d1aa5
#: ../../releases/1.3.txt:733
msgid "Changes to :ttag:`url` and :ttag:`ssi`"
msgstr ""

# 00516175d30a4b8e9b6ac0f9ab8e27fe
#: ../../releases/1.3.txt:735
msgid ""
"Most template tags will allow you to pass in either constants or variables "
"as arguments -- for example::"
msgstr ""

# 0fb2ad37f7de43a086385e0da57828b0
#: ../../releases/1.3.txt:740
msgid ""
"allows you to specify a base template as a constant, but if you have a "
"context variable ``templ`` that contains the value ``base.html``::"
msgstr ""

# 56f672aac3ef4f1b8b52f6ec7046d08b
#: ../../releases/1.3.txt:745
msgid "is also legal."
msgstr ""

# 47cd3f5b4f174ff9926fd2f53611b063
#: ../../releases/1.3.txt:747
msgid ""
"However, due to an accident of history, the :ttag:`url` and :ttag:`ssi` are "
"different. These tags use the second, quoteless syntax, but interpret the "
"argument as a constant. This means it isn't possible to use a context "
"variable as the target of a :ttag:`url` and :ttag:`ssi` tag."
msgstr ""

# 245bfb336b774f889a286c53b0471ee8
#: ../../releases/1.3.txt:753
msgid ""
"Django 1.3 marks the start of the process to correct this historical "
"accident. Django 1.3 adds a new template library -- ``future`` -- that "
"provides alternate implementations of the :ttag:`url` and :ttag:`ssi` "
"template tags. This ``future`` library implement behavior that makes the "
"handling of the first argument consistent with the handling of all other "
"variables. So, an existing template that contains::"
msgstr ""

# 8c608222d65e4596bc07ee7bea339990
#: ../../releases/1.3.txt:762
msgid "should be replaced with::"
msgstr ""

# 971fd7cd0ba74f7cb05f447b451c2e3b
#: ../../releases/1.3.txt:767
msgid ""
"The tags implementing the old behavior have been deprecated, and in Django "
"1.5, the old behavior will be replaced with the new behavior. To ensure "
"compatibility with future versions of Django, existing templates should be "
"modified to use the new ``future`` libraries and syntax."
msgstr ""

# 4bd8e4286c10492b86f4d0b8e8f8d61d
# c3efa1a14a94458f8ec8ba1910b1a673
#: ../../releases/1.3.txt:774 ../../releases/1.3-beta-1.txt:124
msgid "Changes to the login methods of the admin"
msgstr ""

# a0571911c82b424f8bebc0786dc8bab9
# 306c59eaffad475ebaadb6ded3d2a03f
#: ../../releases/1.3.txt:776 ../../releases/1.3-beta-1.txt:126
msgid ""
"In previous version the admin app defined login methods in multiple "
"locations and ignored the almost identical implementation in the already "
"used auth app. A side effect of this duplication was the missing adoption of "
"the changes made in r12634_ to support a broader set of characters for "
"usernames."
msgstr ""

# 9fd2c952bddb46579b5798da388ebf91
# 9711b3f170744811b8ff55fc291ca97b
#: ../../releases/1.3.txt:781 ../../releases/1.3-beta-1.txt:131
msgid ""
"This release refactors the admin's login mechanism to use a subclass of the :"
"class:`~django.contrib.auth.forms.AuthenticationForm` instead of a manual "
"form validation. The previously undocumented method ``'django.contrib.admin."
"sites.AdminSite.display_login_form'`` has been removed in favor of a new :"
"attr:`~django.contrib.admin.AdminSite.login_form` attribute."
msgstr ""

# 2eef3c9e4ed74abab9006707c83b971c
#: ../../releases/1.3.txt:791
msgid "``reset`` and ``sqlreset`` management commands"
msgstr ""

# f9f706595f71492889c003bd0f9c8192
#: ../../releases/1.3.txt:793
msgid ""
"Those commands have been deprecated. The ``flush`` and ``sqlflush`` commands "
"can be used to delete everything. You can also use ALTER TABLE or DROP TABLE "
"statements manually."
msgstr ""

# 3d2212d4d245479c9c4539d7ae3f704d
#: ../../releases/1.3.txt:801
msgid ""
"The function-based :setting:`TEST_RUNNER` previously used to execute the "
"GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was "
"deprecated for the class-based runner, :class:`django.contrib.gis.tests."
"GeoDjangoTestSuiteRunner`."
msgstr ""

# 006da90699d24cae8e2d33ed77c1d99c
#: ../../releases/1.3.txt:806
msgid ""
"Previously, calling :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` "
"would silently do nothing when GDAL wasn't available.  Now, a :class:"
"`~django.contrib.gis.geos.GEOSException` is properly raised to indicate "
"possible faulty application code.  A warning is now raised if :meth:`~django."
"contrib.gis.geos.GEOSGeometry.transform` is called when the SRID of the "
"geometry is less than 0 or ``None``."
msgstr ""

# a3021b7df72f40d4980514d1b3f32320
#: ../../releases/1.3.txt:815
msgid "``CZBirthNumberField.clean``"
msgstr ""

# c1195a1c95c34357a19c05176bdeae5a
#: ../../releases/1.3.txt:817
msgid ""
"Previously this field's ``clean()`` method accepted a second, gender, "
"argument which allowed stronger validation checks to be made, however since "
"this argument could never actually be passed from the Django form machinery "
"it is now pending deprecation."
msgstr ""

# ba0412900ff440c2a5513b313eef8314
#: ../../releases/1.3.txt:823
msgid "``CompatCookie``"
msgstr ""

# a8a845b1d73b49ea8ada66a5a333d282
#: ../../releases/1.3.txt:825
msgid ""
"Previously, ``django.http`` exposed an undocumented ``CompatCookie`` class, "
"which was a bugfix wrapper around the standard library ``SimpleCookie``. As "
"the fixes are moving upstream, this is now deprecated - you should use "
"``from django.http import SimpleCookie`` instead."
msgstr ""

# 1dc4fb49a72c41e48cba0ef89e154f68
#: ../../releases/1.3.txt:833
msgid "Loading of *project-level* translations"
msgstr ""

# 7d31f3ed468843b0a3f4a5bb25ee9ef5
#: ../../releases/1.3.txt:835
msgid ""
"This release of Django starts the deprecation process for inclusion of "
"translations located under the so-called *project path* in the translation "
"building process performed at runtime. The :setting:`LOCALE_PATHS` setting "
"can be used for the same task by adding the filesystem path to a ``locale`` "
"directory containing project-level translations to the value of that setting."
msgstr ""

# dc0db4f9845041e2b6241ca1c2864ee2
#: ../../releases/1.3.txt:841
msgid "Rationale for this decision:"
msgstr ""

# ab9012eed0c4466c9d9651ea0b46b7ce
#: ../../releases/1.3.txt:843
msgid ""
"The *project path* has always been a loosely defined concept (actually, the "
"directory used for locating project-level translations is the directory "
"containing the settings module) and there has been a shift in other parts of "
"the framework to stop using it as a reference for location of assets at "
"runtime."
msgstr ""

# 16991fda939f461eb0d7ceb8a501033b
#: ../../releases/1.3.txt:849
msgid ""
"Detection of the ``locale`` subdirectory tends to fail when the deployment "
"scenario is more complex than the basic one. e.g. it fails when the settings "
"module is a directory (ticket #10765)."
msgstr ""

# 7d924dbcc5de4864a587d3f686984168
#: ../../releases/1.3.txt:853
msgid ""
"There are potential strange development- and deployment-time problems like "
"the fact that the ``project_dir/locale/`` subdir can generate spurious error "
"messages when the project directory is added to the Python path (``manage.py "
"runserver`` does this) and then it clashes with the equally named standard "
"library module, this is a typical warning message::"
msgstr ""

# dc6b25054a23431a8de9397c33633378
#: ../../releases/1.3.txt:863
msgid ""
"This location wasn't included in the translation building process for "
"JavaScript literals. This deprecation removes such inconsistency."
msgstr ""

# 4e9e0e24c8e74b1bb9a9109bc2a5f6d1
#: ../../releases/1.3.txt:868
msgid "``PermWrapper`` moved to ``django.contrib.auth.context_processors``"
msgstr ""

# 4874ed2279f344bcb6ebf3c18035251e
#: ../../releases/1.3.txt:870
msgid ""
"In Django 1.2, we began the process of changing the location of the ``auth`` "
"context processor from ``django.core.context_processors`` to ``django."
"contrib.auth.context_processors``. However, the ``PermWrapper`` support "
"class was mistakenly omitted from that migration. In Django 1.3, the "
"``PermWrapper`` class has also been moved to ``django.contrib.auth."
"context_processors``, along with the ``PermLookupDict`` support class. The "
"new classes are functionally identical to their old versions; only the "
"module location has changed."
msgstr ""

# 90206a7cccbf4b1aaba983751314d833
#: ../../releases/1.3.txt:880
msgid "Removal of ``XMLField``"
msgstr ""

# fb54992f9a984216b6457f37c011b4fb
#: ../../releases/1.3.txt:882
msgid ""
"When Django was first released, Django included an ``XMLField`` that "
"performed automatic XML validation for any field input. However, this "
"validation function hasn't been performed since the introduction of "
"``newforms``, prior to the 1.0 release. As a result, ``XMLField`` as "
"currently implemented is functionally indistinguishable from a simple :class:"
"`~django.db.models.TextField`."
msgstr ""

# f250666ef91b42be98ef8d9c62aa2db7
#: ../../releases/1.3.txt:888
msgid ""
"For this reason, Django 1.3 has fast-tracked the deprecation of ``XMLField`` "
"-- instead of a two-release deprecation, ``XMLField`` will be removed "
"entirely in Django 1.4."
msgstr ""

# 1779cc1685c4463e9585be0fbd5fc218
#: ../../releases/1.3.txt:892
msgid ""
"It's easy to update your code to accommodate this change -- just replace all "
"uses of ``XMLField`` with ``TextField``, and remove the ``schema_path`` "
"keyword argument (if it is specified)."
msgstr ""

# f29ab0d91bf34585afc8e9aede81b74d
#: ../../releases/1.3-alpha-1.txt:3
msgid "Django 1.3 alpha 1 release notes"
msgstr ""

# 16345c57f87f41be811512b86c77fe8d
#: ../../releases/1.3-alpha-1.txt:5
msgid "November 11, 2010"
msgstr ""

# d36a01cd06164571be69edf17696ca36
#: ../../releases/1.3-alpha-1.txt:7
msgid "Welcome to Django 1.3 alpha 1!"
msgstr ""

# 43d718db9d524f709181531f088d37e9
#: ../../releases/1.3-alpha-1.txt:9
msgid ""
"This is the first in a series of preview/development releases leading up to "
"the eventual release of Django 1.3. This release is primarily targeted at "
"developers who are interested in trying out new features and testing the "
"Django codebase to help identify and resolve bugs prior to the final 1.3 "
"release."
msgstr ""

# 48374b3a8b7d4b8f9e57a70296a5bad8
#: ../../releases/1.3-alpha-1.txt:18
msgid ""
"As of this alpha release, Django 1.3 contains a number of nifty `new "
"features`_, lots of bug fixes, some minor `backwards incompatible changes`_ "
"and an easy upgrade path from Django 1.2."
msgstr ""

# 84bfff00e8504e9aaf3df37b873449b7
#: ../../releases/1.3-alpha-1.txt:27
msgid "What's new in Django 1.3 alpha 1"
msgstr ""

# caf9232ad8004bd196849684f3ad3240
#: ../../releases/1.3-alpha-1.txt:41
msgid ""
"See :doc:`the documentation on Class-based Generic Views </topics/class-"
"based-views/index>` for more details. There is also a document to help you "
"`convert your function-based generic views to class-based views <https://"
"docs.djangoproject.com/en/1.4/topics/generic-views-migration/>`_."
msgstr ""

# 6c481bda435547e981d46ea025add146
#: ../../releases/1.3-alpha-1.txt:49
msgid ""
"Django 1.3 adds framework-level support for Python's logging module. This "
"means you can now easily configure and control logging as part of your "
"Django project. A number of logging handlers and logging calls have been "
"added to Django's own code as well -- most notably, the error emails sent on "
"a HTTP 500 server error are now handled as a logging activity. See :doc:`the "
"documentation on Django's logging interface </topics/logging>` for more "
"details."
msgstr ""

# a171ac4328fc41379f7cc0c5ec2472f2
#: ../../releases/1.3-alpha-1.txt:60
msgid ""
"Django 1.3 ships with a new contrib app ``'django.contrib.staticfiles'`` to "
"help developers handle the static media files (images, CSS, Javascript, "
"etc.) that are needed to render a complete web page."
msgstr ""

# 60b90df043834318a525fda6b123a9cd
#: ../../releases/1.3-alpha-1.txt:78
msgid "``unittest2`` support"
msgstr ""

# a57d31d25193471ea95ff165fd2e6246
#: ../../releases/1.3-alpha-1.txt:80
msgid ""
"Python 2.7 introduced some major changes to the unittest library, adding "
"some extremely useful features. To ensure that every Django project can "
"benefit from these new features, Django ships with a copy of unittest2_, a "
"copy of the Python 2.7 unittest library, backported for Python 2.4 "
"compatibility."
msgstr ""

# 40c69a2027d24d68a43cff3c5c392dd3
#: ../../releases/1.3-alpha-1.txt:86
msgid ""
"To access this library, Django provides the ``django.utils.unittest`` module "
"alias. If you are using Python 2.7, or you have installed unittest2 locally, "
"Django will map the alias to the installed version of the unittest library. "
"Otherwise, Django will use it's own bundled version of unittest2."
msgstr ""

# 113ecb9465bf4b60bb6170783b9f3942
#: ../../releases/1.3-alpha-1.txt:92
msgid "To use this alias, simply use::"
msgstr ""

# 9fd8e357de254526b43ff995b4da925f
#: ../../releases/1.3-alpha-1.txt:100
msgid ""
"If you want to continue to use the base unittest libary, you can -- you just "
"won't get any of the nice new unittest2 features."
msgstr ""

# c895c18be8794c0795f289346b96a918
#: ../../releases/1.3-alpha-1.txt:132
msgid "Contextual markers in translatable strings"
msgstr ""

# 440ea77b76f74a5ca9be064bd072c1ff
#: ../../releases/1.3-alpha-1.txt:137
msgid "For more information, see :ref:`contextual-markers`"
msgstr ""

# 099fdae1dcbd4991a759203b6ec3ef49
#: ../../releases/1.3-alpha-1.txt:152
msgid ""
"Improved tools for accessing and manipulating the current Site via ``django."
"contrib.sites.models.get_current_site()``."
msgstr ""

# 8482eb1f4190452984be265462f31923
#: ../../releases/1.3-alpha-1.txt:166
msgid "Backwards-incompatible changes in 1.3 alpha 1"
msgstr ""

# c80b6a80adbc46888616ac571017a909
#: ../../releases/1.3-alpha-1.txt:195
msgid ""
"Django 1.3 now includes a ``ClearableFileInput`` form widget in addition to "
"``FileInput``. ``ClearableFileInput`` renders with a checkbox to clear the "
"field's value (if the field has a value and is not required); ``FileInput`` "
"provided no means for clearing an existing file from a ``FileField``."
msgstr ""

# 4c71400bf0ec46b0b1011bb6ed8b680d
#: ../../releases/1.3-alpha-1.txt:243
msgid ""
"Unfortunately, the technique used to implement this profanities list was "
"woefully naive, and prone to the `Scunthorpe problem`_. Fixing the built in "
"filter to fix this problem would require significant effort, and since "
"natural language processing isn't the normal domain of a web framework, we "
"have \"fixed\" the problem by making the list of prohibited words an empty "
"list."
msgstr ""

# 39340f1874ab4692aed70a04932aa63f
#: ../../releases/1.3-alpha-1.txt:303
msgid ""
"If you are currently using the ``mod_python`` request handler, you are "
"strongly encouraged to redeploy your Django instances using :doc:`mod_wsgi </"
"howto/deployment/wsgi/modwsgi>`."
msgstr ""

# 88917dad5d3f4a71b95089e241677332
# 9fc171f2ebc84c9e8fb3baced69da96a
#: ../../releases/1.3-alpha-1.txt:345 ../../releases/1.3-beta-1.txt:186
msgid "The Django 1.3 roadmap"
msgstr ""

# 2ec49b71cc4a440e97e51f69e7329a1a
# 818f657a5de54b6baec0dd7a5d8680ae
#: ../../releases/1.3-alpha-1.txt:347 ../../releases/1.3-beta-1.txt:188
msgid ""
"Before the final Django 1.3 release, several other preview/development "
"releases will be made available. The current schedule consists of at least "
"the following:"
msgstr ""

# fc3c877990694fc3937865fa3eec72a9
#: ../../releases/1.3-alpha-1.txt:351
msgid ""
"Week of **November 29, 2010**: First Django 1.3 beta release. Final feature "
"freeze for Django 1.3."
msgstr ""

# f6dbccb0d4e6495e8f61db84a7e5fb39
#: ../../releases/1.3-alpha-1.txt:354
msgid ""
"Week of **January 10, 2011**: First Django 1.3 release candidate. String "
"freeze for translations."
msgstr ""

# 13f93eb109644775af82da3de4217ee7
#: ../../releases/1.3-alpha-1.txt:357
msgid "Week of **January 17, 2011**: Django 1.3 final release."
msgstr ""

# 93421d7e1c0f4ed598e882a480ec3431
#: ../../releases/1.3-alpha-1.txt:359
msgid ""
"If necessary, additional alpha, beta or release-candidate packages will be "
"issued prior to the final 1.3 release. Django 1.3 will be released "
"approximately one week after the final release candidate."
msgstr ""

# 3b8009aa80f74545b9cc6a6d97e26da3
#: ../../releases/1.3-alpha-1.txt:367
msgid ""
"In order to provide a high-quality 1.3 release, we need your help. Although "
"this alpha release is, again, *not* intended for production use, you can "
"help the Django team by trying out the alpha codebase in a safe test "
"environment and reporting any bugs or issues you encounter. The Django "
"ticket tracker is the central place to search for open issues:"
msgstr ""

# 4ed80105f2be4f2390ca01a449266ad5
# 34da25dd95654106be6b2b0e8459e0c8
# fa61fb94e94f4b63a330605115e77711
#: ../../releases/1.3-alpha-1.txt:378 ../../releases/1.3-beta-1.txt:216
#: ../../releases/1.4-alpha-1.txt:1103
msgid ""
"Additionally, discussion of Django development, including progress toward "
"the 1.3 release, takes place daily on the django-developers mailing list:"
msgstr ""

# eac227b123e241c38901485b7b1a25ed
#: ../../releases/1.3-alpha-1.txt:396
msgid ""
"Several development sprints will also be taking place before the 1.3 "
"release; these will typically be announced in advance on the django-"
"developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""

# 382116fc057e4e288f7219c343a5e8c3
#: ../../releases/1.3-beta-1.txt:3
msgid "Django 1.3 beta 1 release notes"
msgstr ""

# c6114ec7a13f4e73a2b8520aada9dccf
#: ../../releases/1.3-beta-1.txt:5
msgid "Welcome to Django 1.3 beta 1!"
msgstr ""

# e18eb1744d724a6fb5706f21d234b29a
#: ../../releases/1.3-beta-1.txt:7
msgid ""
"This is the second in a series of preview/development releases leading up to "
"the eventual release of Django 1.3. This release is primarily targeted at "
"developers who are interested in trying out new features and testing the "
"Django codebase to help identify and resolve bugs prior to the final 1.3 "
"release."
msgstr ""

# 57350adfdde44a1a8ae0e9c3126d5d67
#: ../../releases/1.3-beta-1.txt:17
msgid "What's new in Django 1.3 beta 1"
msgstr ""

# a35e638f448343dcaeb550a4e8b542f9
#: ../../releases/1.3-beta-1.txt:20
msgid "Further tweaks to the staticfiles app"
msgstr ""

# 647cf3ca59d04be2b628b733ff55c765
#: ../../releases/1.3-beta-1.txt:22
msgid ""
"Django 1.3 ships with a new contrib app :mod:`django.contrib.staticfiles` to "
"help developers handle the static media files (images, CSS, JavaScript, "
"etc.) that are needed to render a complete web page."
msgstr ""

# d14e413e5b2f4a28a03a487c6f7d29dc
#: ../../releases/1.3-beta-1.txt:26
msgid ""
"The :mod:`~django.contrib.staticfiles` app ships with the ability to "
"automatically serve static files during development (if the :setting:`DEBUG` "
"setting is ``True``) when using the :djadmin:`runserver` management command. "
"Based on feedback from the community this release adds two new options to "
"the :djadmin:`runserver` command to modify this behavior:"
msgstr ""

# 2f71d1b2a41d48aaa7559cddbf6a1913
#: ../../releases/1.3-beta-1.txt:32
msgid ""
"``--nostatic``: prevents the :djadmin:`runserver` command from serving files "
"completely."
msgstr ""

# cf0cb039aa9644778eac69282b1a39f8
#: ../../releases/1.3-beta-1.txt:35
msgid ""
"``--insecure``: enables serving of static files even if running with :"
"setting:`DEBUG` set to False. (This is **not** recommended!)"
msgstr ""

# 1c333d40a6d64999a5fdfa54ad53aac4
#: ../../releases/1.3-beta-1.txt:38
msgid ""
"See the :doc:`staticfiles reference documentation </ref/contrib/"
"staticfiles>` for more details, or learn :doc:`how to manage static files </"
"howto/static-files/index>`."
msgstr ""

# 05b655d22dfc4d2b9d1ab7957854191a
#: ../../releases/1.3-beta-1.txt:43
msgid "Translation comments"
msgstr ""

# b3dc3c01aab4417d89b6e91f0b0064f4
#: ../../releases/1.3-beta-1.txt:45
msgid ""
"If you would like to give translators hints about a translatable string, you "
"can add a comment prefixed with the ``Translators`` keyword on the line "
"preceding the string, e.g.::"
msgstr ""

# cced63ad0abd4d739bc5fca67afa73cf
#: ../../releases/1.3-beta-1.txt:53
msgid ""
"The comment will appear in the resulting .po file and should also be "
"displayed by most translation tools."
msgstr ""

# 21959268d23846dda9a6ad011e23f4c6
#: ../../releases/1.3-beta-1.txt:56
msgid "For more information, see :ref:`translator-comments`."
msgstr ""

# f9059a4067604ba69d06b7a63768855d
#: ../../releases/1.3-beta-1.txt:61
msgid ""
"If you provide a custom auth backend with ``supports_inactive_user`` set to "
"``True``, an inactive user model will check the backend for permissions. "
"This is useful for further centralizing the permission handling. See the :"
"doc:`authentication docs </topics/auth/index>` for more details."
msgstr ""

# 064a287549aa4baeb2fc1ee3f5fa4a9d
#: ../../releases/1.3-beta-1.txt:67
msgid "Backwards-incompatible changes in 1.3 alpha 2"
msgstr ""

# e0e27216f4814a878d890452d8c57252
#: ../../releases/1.3-beta-1.txt:70
msgid "Change to admin lookup filters"
msgstr ""

# b08ffb1cfc8b4bde81d2f7f77a5571ee
#: ../../releases/1.3-beta-1.txt:72
msgid ""
"The Django admin has long had an undocumented \"feature\" allowing savvy "
"users to manipulate the query string of changelist pages to filter the list "
"of objects displayed. However, this also creates a security issue, as a "
"staff user with sufficient knowledge of model structure could use this "
"\"feature\" to gain access to information he or she would not normally have."
msgstr ""

# 19fd7658b8164aa9b924f7dbfe2c0486
#: ../../releases/1.3-beta-1.txt:79
msgid ""
"As a result, changelist filtering now explicitly validates all lookup "
"arguments in the query string, and permits only fields which are directly on "
"the model, or relations explicitly permitted by the ``ModelAdmin`` "
"definition. If you were relying on this undocumented feature, you will need "
"to update your ``ModelAdmin`` definitions to whitelist the relations you "
"choose to expose for filtering."
msgstr ""

# 712da475c99c46ac9da8641afce229ee
#: ../../releases/1.3-beta-1.txt:87
msgid "Introduction of STATIC_URL and STATIC_ROOT settings"
msgstr ""

# 087c3bb185d14d12add46e935eaf1054
#: ../../releases/1.3-beta-1.txt:89
msgid ""
"The newly introduced :mod:`~django.contrib.staticfiles` app -- which extends "
"Django's abilities to handle static files for apps and projects -- required "
"the additon of two new settings to refer to those files in templates and "
"code, especially in contrast to the :setting:`MEDIA_URL` and :setting:"
"`MEDIA_ROOT` settings that refer to user-uploaded files."
msgstr ""

# 2068ff6321ad4733bd1ab2deacbf4403
#: ../../releases/1.3-beta-1.txt:95
msgid ""
"Prior to 1.3 alpha 2 these settings were called ``STATICFILES_URL`` and "
"``STATICFILES_ROOT`` to follow the naming scheme for app-centric settings. "
"Based on feedback from the community it became apparent that those settings "
"created confusion, especially given the fact that handling static files is "
"also desired outside the use of the optional :mod:`~django.contrib."
"staticfiles` app."
msgstr ""

# cb45afe8b4214befb18be4bf4a578222
#: ../../releases/1.3-beta-1.txt:101
msgid "As a result, we took the following steps to rectify the issue:"
msgstr ""

# 55eb8f9d7fcd4ca485054e58cf4e52be
#: ../../releases/1.3-beta-1.txt:103
msgid ""
"Two new global settings were added that will be used by, **but are not "
"limited to**, the :doc:`staticfiles</ref/contrib/staticfiles>` app:"
msgstr ""

# 78dfd9e6fa0c4467b7ac094b59cc9c60
#: ../../releases/1.3-beta-1.txt:106
msgid ":setting:`STATIC_ROOT` (formally ``STATICFILES_ROOT``)"
msgstr ""

# 57c3eebc2dc041469d407ff44d42a0d0
#: ../../releases/1.3-beta-1.txt:108
msgid ":setting:`STATIC_URL` (formally ``STATICFILES_URL``)"
msgstr ""

# b156f898214749c6b0c6d7c9525a9d66
#: ../../releases/1.3-beta-1.txt:110
msgid ""
"The ``django.contrib.staticfiles.templatetags.staticfiles."
"get_staticfiles_prefix`` template tag was moved to Django's core (``django."
"templatetags.static``) and renamed to :ttag:`get_static_prefix`."
msgstr ""

# 54638e706cac4bae996cafeaa27e2198
#: ../../releases/1.3-beta-1.txt:114
msgid ""
"The ``django.contrib.staticfiles.context_processors.staticfiles`` context "
"processor was moved to Django's core (``django.core.context_processors."
"static``) and renamed to :func:`~django.core.context_processors.static`."
msgstr ""

# c95d545cd6f9467c90d91cc621fbbe31
#: ../../releases/1.3-beta-1.txt:119
msgid ""
":ref:`form-media-paths` now uses :setting:`STATIC_URL` as the prefix **if "
"the value is not None**, and falls back to the previously used :setting:"
"`MEDIA_URL` setting otherwise."
msgstr ""

# c4aab53040434f88a0e7597c9e23e686
#: ../../releases/1.3-beta-1.txt:141
msgid "Changes to ``USStateField``"
msgstr ""

# 746d223f95484602b4a69902a99dc6fc
#: ../../releases/1.3-beta-1.txt:143
msgid ""
"The ``django.contrib.localflavor`` application contains collections of code "
"relevant to specific countries or cultures. One such is ``USStateField``, "
"which provides a field for storing the two-letter postal abbreviation of a U."
"S. state. This field has consistently caused problems, however, because it "
"is often used to store the state portion of a U.S postal address, but not "
"all \"states\" recognized by the U.S Postal Service are actually states of "
"the U.S. or even U.S. territory. Several compromises over the list of "
"choices resulted in some users feeling the field supported too many "
"locations, while others felt it supported too few."
msgstr ""

# 05667d8f47cc4303958236597e9fcdbf
#: ../../releases/1.3-beta-1.txt:154
msgid ""
"In Django 1.3 we're taking a new approach to this problem, implemented as a "
"pair of changes:"
msgstr ""

# 1bf40d1352c7401bb244684396fc6f04
#: ../../releases/1.3-beta-1.txt:157
msgid ""
"The choice list for ``USStateField`` has changed. Previously, it consisted "
"of the 50 U.S. states, the District of Columbia and U.S. overseas "
"territories. As of Django 1.3 it includes all previous choices, plus the U."
"S. Armed Forces postal codes."
msgstr ""

# 8f0a1838afb74240b35c572465bb1b1f
#: ../../releases/1.3-beta-1.txt:162
msgid ""
"A new model field, ``django.contrib.localflavor.us.models."
"USPostalCodeField``, has been added which draws its choices from a list of "
"all postal abbreviations recognized by the U.S Postal Service. This includes "
"all abbreviations recognized by ``USStateField``, plus three independent "
"nations -- the Federated States of Micronesia, the Republic of the Marshall "
"Islands and the Republic of Palau -- which are serviced under treaty by the "
"U.S. postal system. A new form widget, ``django.contrib.localflavor.us.forms."
"USPSSelect``, is also available and provides the same set of choices."
msgstr ""

# f408d62589ed4289b504f6c487790e28
#: ../../releases/1.3-beta-1.txt:173
msgid ""
"Additionally, several finer-grained choice tuples are provided which allow "
"mixing and matching of subsets of the U.S. states and territories, and other "
"locations serviced by the U.S. postal system. Consult the ``django.contrib."
"localflavor`` documentation for more details."
msgstr ""

# 520afc5605e549438409acb58c063431
#: ../../releases/1.3-beta-1.txt:179
msgid ""
"The change to ``USStateField`` is technically backwards-incompatible for "
"users who expect this field to exclude Armed Forces locations. If you need "
"to support U.S. mailing addresses without Armed Forces locations, see the "
"list of choice tuples available in the localflavor documentation."
msgstr ""

# e1070c0a08d14ec491e513fd9cf86a7d
#: ../../releases/1.3-beta-1.txt:192
msgid ""
"Week of **January 24, 2011**: First Django 1.3 release candidate. String "
"freeze for translations."
msgstr ""

# 450d6d7aaad84eb38a53e57f7ba299f9
#: ../../releases/1.3-beta-1.txt:195
msgid "Week of **January 31, 2011**: Django 1.3 final release."
msgstr ""

# 52cd9bb302a746eb948bd64b338e429d
#: ../../releases/1.3-beta-1.txt:197
msgid ""
"If necessary, additional beta or release-candidate packages will be issued "
"prior to the final 1.3 release. Django 1.3 will be released approximately "
"one week after the final release candidate."
msgstr ""

# 10750f7015d74bdcb1bfb0a7e144a54d
#: ../../releases/1.3-beta-1.txt:205
msgid ""
"In order to provide a high-quality 1.3 release, we need your help. Although "
"this beta release is, again, *not* intended for production use, you can help "
"the Django team by trying out the beta codebase in a safe test environment "
"and reporting any bugs or issues you encounter. The Django ticket tracker is "
"the central place to search for open issues:"
msgstr ""

# 25f96cb518fb4072923ff9e7b013c05d
#: ../../releases/1.3.1.txt:3
msgid "Django 1.3.1 release notes"
msgstr ""

# f4ee837a041d4621b3159304ae291789
#: ../../releases/1.3.1.txt:7
msgid "Welcome to Django 1.3.1!"
msgstr ""

# 60fb6516c3924135bd7f54cf3ac76f16
#: ../../releases/1.3.1.txt:9
msgid ""
"This is the first security release in the Django 1.3 series, fixing several "
"security issues in Django 1.3.  Django 1.3.1 is a recommended upgrade for "
"all users of Django 1.3."
msgstr ""

# 1855613654be460990a03d8cb18e9d7b
#: ../../releases/1.3.2.txt:3
msgid "Django 1.3.2 release notes"
msgstr ""

# c5185406df564f25bbd45c0e98963011
# 1b7f4241af5045ff8e33b4e5c6e3d936
#: ../../releases/1.3.2.txt:5 ../../releases/1.4.1.txt:5
msgid "*July 30, 2012*"
msgstr ""

# 7114a9f86c884e608432a2b6aac58c3c
#: ../../releases/1.3.2.txt:7
msgid ""
"This is the second security release in the Django 1.3 series, fixing several "
"security issues in Django 1.3. Django 1.3.2 is a recommended upgrade for all "
"users of Django 1.3."
msgstr ""

# 4b36d575de1f4bc4983c2837d31f5ece
#: ../../releases/1.3.3.txt:3
msgid "Django 1.3.3 release notes"
msgstr ""

# 54793bf95d654221b84a6431341c2f85
#: ../../releases/1.3.3.txt:5
msgid "*August 1, 2012*"
msgstr ""

# c49ce47fd0254a89a14d43236e65a362
#: ../../releases/1.3.3.txt:7
msgid ""
"Following Monday's security release of :doc:`Django 1.3.2 </"
"releases/1.3.2>`, we began receiving reports that one of the fixes applied "
"was breaking Python 2.4 compatibility for Django 1.3. Since Python 2.4 is a "
"supported Python version for that release series, this release fixes "
"compatibility with Python 2.4."
msgstr ""

# f15006c83f304e7898af562fd17697cf
#: ../../releases/1.3.4.txt:3
msgid "Django 1.3.4 release notes"
msgstr ""

# 1307af908ad245099042b09f42ad9137
# 6d6700fd08fb458aa53298a02da89adb
#: ../../releases/1.3.4.txt:5 ../../releases/1.4.2.txt:5
msgid "*October 17, 2012*"
msgstr ""

# 81710f70d54b49a3b965ad47396a8016
#: ../../releases/1.3.4.txt:7
msgid "This is the fourth release in the Django 1.3 series."
msgstr ""

# c2c5e7c91883440c91deec074ac5f082
# 38722677702748d98011bde0f38dd658
# df1f5f562553472c9454ac6838fe2fc0
# 01738b7db45d49c39f8c256439ff5143
# e0e047421e2c4258abd7998e58259ac9
# 28f93ac6edcc44e69a3fae4366971b5b
#: ../../releases/1.3.4.txt:10 ../../releases/1.3.5.txt:17
#: ../../releases/1.3.6.txt:14 ../../releases/1.4.2.txt:10
#: ../../releases/1.4.3.txt:17 ../../releases/1.4.4.txt:15
msgid "Host header poisoning"
msgstr ""

# 26cd0f84f3ee4e13b0e491bf5a6d0fec
# e6bb8ddee89243679b97bc4fd2083ffe
#: ../../releases/1.3.4.txt:12 ../../releases/1.4.2.txt:12
msgid ""
"Some parts of Django -- independent of end-user-written applications -- make "
"use of full URLs, including domain name, which are generated from the HTTP "
"Host header. Some attacks against this are beyond Django's ability to "
"control, and require the web server to be properly configured; Django's "
"documentation has for some time contained notes advising users on such "
"configuration."
msgstr ""

# 9ebd08d2a0304f0cb880b3f9ac5e884b
# 2006abaf3dc94c70b6e9fa44e41b5a35
#: ../../releases/1.3.4.txt:18 ../../releases/1.4.2.txt:18
msgid ""
"Django's own built-in parsing of the Host header is, however, still "
"vulnerable, as was reported to us recently. The Host header parsing in "
"Django 1.3.3 and Django 1.4.1 -- specifically, ``django.http.HttpRequest."
"get_host()`` -- was incorrectly handling username/password information in "
"the header. Thus, for example, the following Host header would be accepted "
"by Django when running on \"validsite.com\"::"
msgstr ""

# 9ae03ff1dc544f1f89d1dcf37ca34f68
# d26a41678dea4d15ad4d47b4cc4f883d
#: ../../releases/1.3.4.txt:27 ../../releases/1.4.2.txt:27
msgid ""
"Using this, an attacker can cause parts of Django -- particularly the "
"password-reset mechanism -- to generate and display arbitrary URLs to users."
msgstr ""

# 0cd630bcef694131abd2a1a435da81d4
# 887959a270cf4311b03388e8f3fe0621
#: ../../releases/1.3.4.txt:30 ../../releases/1.4.2.txt:30
msgid ""
"To remedy this, the parsing in ``HttpRequest.get_host()`` is being modified; "
"Host headers which contain potentially dangerous content (such as username/"
"password pairs) now raise the exception :exc:`django.core.exceptions."
"SuspiciousOperation`."
msgstr ""

# f960481a333747178f3eea7557510ce4
# 47aa663d0df746d9b892500a0c7ad06c
#: ../../releases/1.3.4.txt:35 ../../releases/1.4.2.txt:35
msgid ""
"Details of this issue were initially posted online as a `security advisory`_."
msgstr ""

# 041afb02ee84414a9839bd336f7f5306
#: ../../releases/1.3.5.txt:3
msgid "Django 1.3.5 release notes"
msgstr ""

# b5144577eeb74c3c9207a2f2b6954afe
# cc36afb35e144f128879eb5c2daceb13
#: ../../releases/1.3.5.txt:5 ../../releases/1.4.3.txt:5
msgid "*December 10, 2012*"
msgstr ""

# e58a67627c684361b881981966fbf257
#: ../../releases/1.3.5.txt:7
msgid ""
"Django 1.3.5 addresses two security issues present in previous Django "
"releases in the 1.3 series."
msgstr ""

# d0d601338b094097b12ccab0e4ab1d93
# c5e5fa79b87447a6b81064cb3842ed58
#: ../../releases/1.3.5.txt:10 ../../releases/1.4.3.txt:10
msgid ""
"Please be aware that this security release is slightly different from "
"previous ones. Both issues addressed here have been dealt with in prior "
"security updates to Django. In one case, we have received ongoing reports of "
"problems, and in the other we've chosen to take further steps to tighten up "
"Django's code in response to independent discovery of potential problems "
"from multiple sources."
msgstr ""

# 584950abed4040df98c96154925d316c
# 3390d1aa9bbb43368d2fe846ba0c78ec
#: ../../releases/1.3.5.txt:19 ../../releases/1.4.3.txt:19
msgid ""
"Several earlier Django security releases focused on the issue of poisoning "
"the HTTP Host header, causing Django to generate URLs pointing to arbitrary, "
"potentially-malicious domains."
msgstr ""

# 7f1bac8d48234f948a71250679b1c7ea
# 9d061323e4d94db7bb18d5f728eeef66
#: ../../releases/1.3.5.txt:23 ../../releases/1.4.3.txt:23
msgid ""
"In response to further input received and reports of continuing issues "
"following the previous release, we're taking additional steps to tighten "
"Host header validation. Rather than attempt to accommodate all features HTTP "
"supports here, Django's Host header validation attempts to support a "
"smaller, but far more common, subset:"
msgstr ""

# 8529a19d9d8a4f62812990cf75c74df4
# 92a2e115a04e4664bd7c6d42053417a6
#: ../../releases/1.3.5.txt:29 ../../releases/1.4.3.txt:29
msgid ""
"Hostnames must consist of characters [A-Za-z0-9] plus hyphen ('-') or dot "
"('.')."
msgstr ""

# 0749f5ee3afe48e09dc8073dbbd02c39
# 2706299ee18b427898089abce2968508
#: ../../releases/1.3.5.txt:31 ../../releases/1.4.3.txt:31
msgid "IP addresses -- both IPv4 and IPv6 -- are permitted."
msgstr ""

# f167643e07584dc8ae8d9485a40d2e0f
# a1574bafe2a747da9d68ccf4c9f1bdd0
#: ../../releases/1.3.5.txt:32 ../../releases/1.4.3.txt:32
msgid "Port, if specified, is numeric."
msgstr ""

# 6ddefe28b92c4886932aa494d974b5b6
# 4a34ba430c5e4201ac118b70303ab982
#: ../../releases/1.3.5.txt:34 ../../releases/1.4.3.txt:34
msgid ""
"Any deviation from this will now be rejected, raising the exception :exc:"
"`django.core.exceptions.SuspiciousOperation`."
msgstr ""

# 5f6cbe27b0a843fbb935853a6e6add3c
# 19ec3cd8486b43a7a9a365963435bc8b
#: ../../releases/1.3.5.txt:38 ../../releases/1.4.3.txt:38
msgid "Redirect poisoning"
msgstr ""

# 036875b18003429a84cd3dc07dbf2c08
# abf8615b366246528d9eb8a14eb85be8
#: ../../releases/1.3.5.txt:40 ../../releases/1.4.3.txt:40
msgid ""
"Also following up on a previous issue: in July of this year, we made changes "
"to Django's HTTP redirect classes, performing additional validation of the "
"scheme of the URL to redirect to (since, both within Django's own supplied "
"applications and many third-party applications, accepting a user-supplied "
"redirect target is a common pattern)."
msgstr ""

# 936e9d8cdf66420480a45f81e784fdc7
# 89965a39e2694c6ba21883fabb99e849
#: ../../releases/1.3.5.txt:46 ../../releases/1.4.3.txt:46
msgid ""
"Since then, two independent audits of the code turned up further potential "
"problems. So, similar to the Host-header issue, we are taking steps to "
"provide tighter validation in response to reported problems (primarily with "
"third-party applications, but to a certain extent also within Django "
"itself). This comes in two parts:"
msgstr ""

# 1421d6f28ef64ee3aa7aa720c44a704b
# 6c31a0df71a14d08a878f56523527cd7
#: ../../releases/1.3.5.txt:52 ../../releases/1.4.3.txt:52
msgid ""
"1. A new utility function, ``django.utils.http.is_safe_url``, is added; this "
"function takes a URL and a hostname, and checks that the URL is either "
"relative, or if absolute matches the supplied hostname. This function is "
"intended for use whenever user-supplied redirect targets are accepted, to "
"ensure that such redirects cannot lead to arbitrary third-party sites."
msgstr ""

# 8587dcc05f0f40228fbc08f9e64bc886
# d0b1c56b022742a990e49a5ddc242df0
#: ../../releases/1.3.5.txt:58 ../../releases/1.4.3.txt:58
msgid ""
"2. All of Django's own built-in views -- primarily in the authentication "
"system -- which allow user-supplied redirect targets now use ``is_safe_url`` "
"to validate the supplied URL."
msgstr ""

# 1ea5e4cbbc9346de913f37096b4d2eb2
#: ../../releases/1.3.6.txt:3
msgid "Django 1.3.6 release notes"
msgstr ""

# 53e7401963654e869114278a46c7287c
# 64fd26020de944f6b2c97a396c0151a1
#: ../../releases/1.3.6.txt:5 ../../releases/1.4.4.txt:5
msgid "*February 19, 2013*"
msgstr ""

# 2974298800cb4a9ba7d2cfd2567a3ef4
#: ../../releases/1.3.6.txt:7
msgid ""
"Django 1.3.6 fixes four security issues present in previous Django releases "
"in the 1.3 series."
msgstr ""

# af1114d45e2548a79f54fab05ef91515
#: ../../releases/1.3.6.txt:10
msgid "This is the sixth bugfix/security release in the Django 1.3 series."
msgstr ""

# e4e9f26699934ba8ab15268e32c1b8ec
# 2d6fdb916f84440e84132150b163adef
#: ../../releases/1.3.6.txt:16 ../../releases/1.4.4.txt:17
msgid ""
"Some parts of Django -- independent of end-user-written applications -- make "
"use of full URLs, including domain name, which are generated from the HTTP "
"Host header. Django's documentation has for some time contained notes "
"advising users on how to configure webservers to ensure that only valid Host "
"headers can reach the Django application. However, it has been reported to "
"us that even with the recommended webserver configurations there are still "
"techniques available for tricking many common webservers into supplying the "
"application with an incorrect and possibly malicious Host header."
msgstr ""

# 7ae2d2a844134c6499154d9fb536042f
#: ../../releases/1.3.6.txt:25
msgid ""
"For this reason, Django 1.3.6 adds a new setting, ``ALLOWED_HOSTS``, which "
"should contain an explicit list of valid host/domain names for this site. A "
"request with a Host header not matching an entry in this list will raise "
"``SuspiciousOperation`` if ``request.get_host()`` is called. For full "
"details see the documentation for the :setting:`ALLOWED_HOSTS` setting."
msgstr ""

# 08da3f5bd5374df6874440839f8cd867
#: ../../releases/1.3.6.txt:31
msgid ""
"The default value for this setting in Django 1.3.6 is ``['*']`` (matching "
"any host), for backwards-compatibility, but we strongly encourage all sites "
"to set a more restrictive value."
msgstr ""

# 2cae293e3bed46b5b67eb8a9aea59a4f
# a222395b274440cdbfde8db87d0c3748
#: ../../releases/1.3.6.txt:35 ../../releases/1.4.4.txt:36
msgid ""
"This host validation is disabled when ``DEBUG`` is ``True`` or when running "
"tests."
msgstr ""

# f0cccee7a1e449a5be1033d67374c7cf
# 64b6e59e72734a9fa426c8011b035d06
#: ../../releases/1.3.6.txt:39 ../../releases/1.4.4.txt:40
msgid "XML deserialization"
msgstr ""

# fbac38290c4b4a7bbbb8fe07ecacf67f
#: ../../releases/1.3.6.txt:41
msgid ""
"The XML parser in the Python standard library is vulnerable to a number of "
"attacks via external entities and entity expansion. Django uses this parser "
"for deserializing XML-formatted database fixtures. The fixture deserializer "
"is not intended for use with untrusted data, but in order to err on the side "
"of safety in Django 1.3.6 the XML deserializer refuses to parse an XML "
"document with a DTD (DOCTYPE definition), which closes off these attack "
"avenues."
msgstr ""

# ed6d6c1a8853499194602e5ac7f01bf0
# e3067840a43e46fc81f5a4ee854f9b6b
#: ../../releases/1.3.6.txt:48 ../../releases/1.4.4.txt:49
msgid ""
"These issues in the Python standard library are CVE-2013-1664 and "
"CVE-2013-1665. More information available `from the Python security team`_."
msgstr ""

# 6800a9e905bd4bc4b5d942b0598f4ecd
# 37261c0dc54943b0ae9a73e92434aa40
#: ../../releases/1.3.6.txt:51 ../../releases/1.4.4.txt:52
msgid ""
"Django's XML serializer does not create documents with a DTD, so this should "
"not cause any issues with the typical round-trip from ``dumpdata`` to "
"``loaddata``, but if you feed your own XML documents to the ``loaddata`` "
"management command, you will need to ensure they do not contain a DTD."
msgstr ""

# 0941aeac322447e3b9b0c40f436e2fd9
# 705a67305bd9406b816e763b25c3762e
#: ../../releases/1.3.6.txt:60 ../../releases/1.4.4.txt:61
msgid "Formset memory exhaustion"
msgstr ""

# b0c8f6aeea5f46c7b75696b32bed810c
# 66d4e727d4734a0a932c3d2972444701
#: ../../releases/1.3.6.txt:62 ../../releases/1.4.4.txt:63
msgid ""
"Previous versions of Django did not validate or limit the form-count data "
"provided by the client in a formset's management form, making it possible to "
"exhaust a server's available memory by forcing it to create very large "
"numbers of forms."
msgstr ""

# 70943b91cd6347e394cb4dae5687e045
#: ../../releases/1.3.6.txt:67
msgid ""
"In Django 1.3.6, all formsets have a strictly-enforced maximum number of "
"forms (1000 by default, though it can be set higher via the ``max_num`` "
"formset factory argument)."
msgstr ""

# 8f6a699dc7104eafa8880e7a65e31e75
# 45ac2100d24f4ee79cbb544899bb188c
#: ../../releases/1.3.6.txt:73 ../../releases/1.4.4.txt:74
msgid "Admin history view information leakage"
msgstr ""

# 0f0cbff415c543259a8e6b3cf1a68694
#: ../../releases/1.3.6.txt:75
msgid ""
"In previous versions of Django, an admin user without change permission on a "
"model could still view the unicode representation of instances via their "
"admin history log. Django 1.3.6 now limits the admin history log view for an "
"object to users with change permission for that model."
msgstr ""

# 19e5827f177448a7b37fc4f1959c5958
#: ../../releases/1.3.7.txt:3
msgid "Django 1.3.7 release notes"
msgstr ""

# 252acee7488c4a78bebddb79358baa3b
# 27989ee2c4b7473da2fcf48861289f03
#: ../../releases/1.3.7.txt:5 ../../releases/1.4.5.txt:5
msgid "*February 20, 2013*"
msgstr ""

# ba21f5c1a3794a68a0388be2a6ccee0b
#: ../../releases/1.3.7.txt:7
msgid ""
"Django 1.3.7 corrects a packaging problem with yesterday's :doc:`1.3.6 "
"release </releases/1.3.6>`."
msgstr ""

# cc063ffb10884e7b94afb7b084dabd5d
# 9e25aa06a8b343a0b060b3ef89cb7ca2
#: ../../releases/1.3.7.txt:10 ../../releases/1.4.5.txt:10
msgid ""
"The release contained stray ``.pyc`` files that caused \"bad magic number\" "
"errors when running with some versions of Python. This releases corrects "
"this, and also fixes a bad documentation link in the project template "
"``settings.py`` file generated by ``manage.py startproject``."
msgstr ""

# 6c047414693d4b9b82bf604c1795e22a
#: ../../releases/1.4.txt:3
msgid "Django 1.4 release notes"
msgstr ""

# 90d44342d33f41a9b348eec6c91b7709
#: ../../releases/1.4.txt:5
msgid "*March 23, 2012*"
msgstr ""

# 9e3e9389a22c49f98eb3c8110417564f
#: ../../releases/1.4.txt:7
msgid "Welcome to Django 1.4!"
msgstr ""

# 2b306d3596324589b6fea2f544101ecc
#: ../../releases/1.4.txt:9
msgid ""
"These release notes cover the `new features`_, as well as some `backwards "
"incompatible changes`_ you'll want to be aware of when upgrading from Django "
"1.3 or older versions. We've also dropped some features, which are detailed "
"in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun "
"the deprecation process for some features`_."
msgstr ""

# 4eb3c71b29ac4a679b0e6986ac88f249
#: ../../releases/1.4.txt:23
msgid ""
"The biggest new feature in Django 1.4 is `support for time zones`_ when "
"handling date/times. When enabled, this Django will store date/times in UTC, "
"use timezone-aware objects internally, and translate them to users' local "
"timezones for display."
msgstr ""

# bb59ec0212d1484c93a69ca16b07031d
#: ../../releases/1.4.txt:28
msgid ""
"If you're upgrading an existing project to Django 1.4, switching to the "
"time- zone aware mode may take some care: the new mode disallows some rather "
"sloppy behavior that used to be accepted. We encourage anyone who's "
"upgrading to check out the :ref:`timezone migration guide <time-zones-"
"migration-guide>` and the :ref:`timezone FAQ <time-zones-faq>` for useful "
"pointers."
msgstr ""

# fd88c20e1a894389a07b4d2a71922521
#: ../../releases/1.4.txt:34
msgid "Other notable new features in Django 1.4 include:"
msgstr ""

# e1e3c8ad50da41188369a6be93a946cc
#: ../../releases/1.4.txt:36
msgid ""
"A number of ORM improvements, including `SELECT FOR UPDATE support`_, the "
"ability to `bulk insert <#model-objects-bulk-create-in-the-orm>`_ large "
"datasets for improved performance, and `QuerySet.prefetch_related`_, a "
"method to batch-load related objects in areas where :meth:`~django.db.models."
"query.QuerySet.select_related` doesn't work."
msgstr ""

# 850e3f3c3c7c4a5ab32ffb096aba901e
#: ../../releases/1.4.txt:43
msgid ""
"Some nice security additions, including `improved password hashing`_ "
"(featuring PBKDF2_ and bcrypt_ support), new `tools for cryptographic "
"signing`_, several `CSRF improvements`_, and `simple clickjacking "
"protection`_."
msgstr ""

# 97f584567838475ba812dbfa14c8547d
#: ../../releases/1.4.txt:48
msgid ""
"An `updated default project layout and manage.py`_ that removes the \"magic"
"\" from prior versions. And for those who don't like the new layout, you can "
"use `custom project and app templates`_ instead!"
msgstr ""

# 98def90d69504acfbe7ad125a425d327
#: ../../releases/1.4.txt:52
msgid "`Support for in-browser testing frameworks`_ (like Selenium_)."
msgstr ""

# fbba6e83d9724d26aa03bbe204236eda
#: ../../releases/1.4.txt:54
msgid "... and a whole lot more; `see below <#what-s-new-in-django-1-4>`_!"
msgstr ""

# 04ae50e739164ec9842a3ec8d8121d63
#: ../../releases/1.4.txt:56
msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible "
"manner per :doc:`our API stability policy </misc/api-stability>` policy. "
"However, as with previous releases, Django 1.4 ships with some minor "
"`backwards incompatible changes`_; people upgrading from previous versions "
"of Django should read that list carefully."
msgstr ""

# adbdbeeca4d24cc28cc2ac2b772c8b21
#: ../../releases/1.4.txt:65
msgid ""
"Django 1.4 has dropped support for Python 2.4. Python 2.5 is now the minimum "
"required Python version. Django is tested and supported on Python 2.5, 2.6 "
"and 2.7."
msgstr ""

# fe788d66651348758ec99a2208a40819
#: ../../releases/1.4.txt:69
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.5 or newer as their "
"default version. If you're still using Python 2.4, however, you'll need to "
"stick to Django 1.3 until you can upgrade. Per :doc:`our support policy </"
"internals/release-process>`, Django 1.3 will continue to receive security "
"support until the release of Django 1.5."
msgstr ""

# 4a9f94f6e0e14576a9aa88935828946a
#: ../../releases/1.4.txt:76
msgid ""
"Django does not support Python 3.x at this time. At some point before the "
"release of Django 1.4, we plan to publish a document outlining our full "
"timeline for deprecating Python 2.x and moving to Python 3.x."
msgstr ""

# d449f94ea23a4ff28756446d54cb6f03
# c9a48e8ea333459084db120cc318da02
# ca20925127b84177b946cd0ed1833cc8
#: ../../releases/1.4.txt:81 ../../releases/1.4-alpha-1.txt:48
#: ../../releases/1.4-beta-1.txt:64
msgid "What's new in Django 1.4"
msgstr ""

# 74fa94e6624c48c580c882e9672e5ee9
# 8eb01adcd58241eea34c978179fdbb20
# a396ab82fd234777a0eff7182b150d06
#: ../../releases/1.4.txt:84 ../../releases/1.4-alpha-1.txt:470
#: ../../releases/1.4-beta-1.txt:508
msgid "Support for time zones"
msgstr ""

# 34ee91deea94411cb6f119393d8fb3ae
#: ../../releases/1.4.txt:86
msgid ""
"In previous versions, Django used \"naive\" date/times (that is, date/times "
"without an associated time zone), leaving it up to each developer to "
"interpret what a given date/time \"really means\". This can cause all sorts "
"of subtle timezone-related bugs."
msgstr ""

# a1e9f4b3dcd049f2a80e105526c5215e
#: ../../releases/1.4.txt:91
msgid ""
"In Django 1.4, you can now switch Django into a more correct, time-zone "
"aware mode. In this mode, Django stores date and  time information in UTC in "
"the database, uses time-zone-aware datetime objects internally and "
"translates them to the end user's time zone in templates and forms. Reasons "
"for using this feature include:"
msgstr ""

# 99267d21fb524eb687d958dbc35589f4
# 2972ba15e0c244c5a4bb3b78a6f32713
# 8cd5eff1fe184b3faea9961aa47974d4
#: ../../releases/1.4.txt:97 ../../releases/1.4-alpha-1.txt:479
#: ../../releases/1.4-beta-1.txt:517
msgid "Customizing date and time display for users around the world."
msgstr ""

# 0d00867ae6434d24b1b786c07596740a
# bc81d4da33f543a3ac51f93dd57d18af
# 6d2186836c1c4b70ae293f8e2a937536
#: ../../releases/1.4.txt:99 ../../releases/1.4-alpha-1.txt:480
#: ../../releases/1.4-beta-1.txt:518
msgid ""
"Storing datetimes in UTC for database portability and interoperability. "
"(This argument doesn't apply to PostgreSQL, because it already stores "
"timestamps with time zone information in Django 1.3.)"
msgstr ""

# 8b04b3f213a641d6951cd663ea864833
# c58e7310e9964ac4a9cf4337132d7cf7
# b10541433c7a4e2199d3298b2717e43c
#: ../../releases/1.4.txt:103 ../../releases/1.4-alpha-1.txt:483
#: ../../releases/1.4-beta-1.txt:521
msgid "Avoiding data corruption problems around DST transitions."
msgstr ""

# 0084e7cc4c4f41808cdc1317d9cb9437
#: ../../releases/1.4.txt:105
msgid ""
"Time zone support is enabled by default in new projects created with :"
"djadmin:`startproject`. If you want to use this feature in an existing "
"project, read the :ref:`migration guide <time-zones-migration-guide>`. If "
"you encounter problems, there's a helpful :ref:`FAQ <time-zones-faq>`."
msgstr ""

# 978d6c40e23940b2aec17f3c55eb7fde
# 0521986a413a4c98a8a67c9094f2478d
# f72043953e844985a8b4ea503bff0094
#: ../../releases/1.4.txt:111 ../../releases/1.4-alpha-1.txt:51
#: ../../releases/1.4-beta-1.txt:67
msgid "Support for in-browser testing frameworks"
msgstr ""

# ef7f6b88185e40f89dbf6c58abf98941
# ed771e23c5dc41a7bbb747f03ff6112a
# da59b6d9c7a4472380a530ef877cc1ee
#: ../../releases/1.4.txt:113 ../../releases/1.4-alpha-1.txt:53
#: ../../releases/1.4-beta-1.txt:69
msgid ""
"Django 1.4 supports integration with in-browser testing frameworks like "
"Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets "
"you test the interactions between your site's front and back ends more "
"comprehensively. See the :class:`documentation<django.test."
"LiveServerTestCase>` for more details and concrete examples."
msgstr ""

# 48bd33212a3345e4a60f6c8af156e67e
# 8f88d3f5563748baa2dded8889c873fb
# 2fd2b834c1c14d158b926c41c8bfa4f6
#: ../../releases/1.4.txt:123 ../../releases/1.4-alpha-1.txt:366
#: ../../releases/1.4-beta-1.txt:404
msgid "Updated default project layout and ``manage.py``"
msgstr ""

# a064b374f6084b6e905219bc31f34b07
# fac5fbeff24d4282990d4ad246789b36
# 380441426e3f481589ef2403430d8f51
#: ../../releases/1.4.txt:125 ../../releases/1.4-alpha-1.txt:368
#: ../../releases/1.4-beta-1.txt:406
msgid ""
"Django 1.4 ships with an updated default project layout and ``manage.py`` "
"file for the :djadmin:`startproject` management command. These fix some "
"issues with the previous ``manage.py`` handling of Python import paths that "
"caused double imports, trouble moving from development to deployment, and "
"other difficult-to-debug path issues."
msgstr ""

# cc4dd7c9178e4286bfe4a451b1c694d4
#: ../../releases/1.4.txt:131
msgid ""
"The previous ``manage.py`` called functions that are now deprecated, and "
"thus projects upgrading to Django 1.4 should update their ``manage.py``. "
"(The old-style ``manage.py`` will continue to work as before until Django "
"1.6. In 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

# 06cf16409ee84c4c97d91fd014896eba
# e7096601920b4646b061ca2c26ce6796
# 59023c4c33934c718a04f3625c6b8e5c
#: ../../releases/1.4.txt:136 ../../releases/1.4-alpha-1.txt:379
#: ../../releases/1.4-beta-1.txt:417
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr ""

# b32cd954d14f48e2adb95476796f8dfb
# 89b82af280684d7aad56f750b270abc6
# b749dcaa54324b42b52be812e6944b92
#: ../../releases/1.4.txt:148 ../../releases/1.4-alpha-1.txt:391
#: ../../releases/1.4-beta-1.txt:429
msgid ""
"``{{ project_name }}`` should be replaced with the Python package name of "
"the actual project."
msgstr ""

# 5c45895ed34d4254a3ca06939f012a6e
#: ../../releases/1.4.txt:151
msgid ""
"If settings, URLconfs and apps within the project are imported or referenced "
"using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = "
"\"myproject.urls\"``, etc), the new ``manage.py`` will need to be moved one "
"directory up, so it is outside the project package rather than adjacent to "
"``settings.py`` and ``urls.py``."
msgstr ""

# c868b637a220418698fb004843023546
# e8acc391f011493a9d428806bf954b2c
# 0c82a727dbe8498cae163b964b7cda81
#: ../../releases/1.4.txt:157 ../../releases/1.4-alpha-1.txt:400
#: ../../releases/1.4-beta-1.txt:438
msgid "For instance, with the following layout::"
msgstr ""

# 3acd0a25b1324e3a8eef7f4c58c11ecf
# fe91d77d79764743acec50fb9f7762c0
# 06e877e243d4431fbe07c5dcf6a06f47
#: ../../releases/1.4.txt:168 ../../releases/1.4-alpha-1.txt:411
#: ../../releases/1.4-beta-1.txt:449
msgid ""
"You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``, "
"but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""

# 19c4631a62454a6aa186393db6a820ec
# f95cb34a7acf4e4b9a292c286fe492cd
# 67918289b95a4e68ab7d6e100d7ff1c4
#: ../../releases/1.4.txt:171 ../../releases/1.4-alpha-1.txt:414
#: ../../releases/1.4-beta-1.txt:452
msgid ""
"Anything imported as a top-level module can be placed adjacent to the new "
"``manage.py``. For instance, to decouple \"myapp\" from the project module "
"and import it as just ``myapp``, place it outside the ``mysite/`` directory::"
msgstr ""

# 5a009c68d26e45afbe5a29cf6f130045
# 5492a29e57ef4e99be37de6e85bb238a
# 4eb5e9508b4c4beeb5c3ed66439d622a
#: ../../releases/1.4.txt:184 ../../releases/1.4-alpha-1.txt:427
#: ../../releases/1.4-beta-1.txt:465
msgid ""
"If the same code is imported inconsistently (some places with the project "
"prefix, some places without it), the imports will need to be cleaned up when "
"switching to the new ``manage.py``."
msgstr ""

# f9f4037e48454985a4a549319e0a519d
# c569705c166a4e289fc8d4d01b05ea16
# 92ab284fc4274be195bc3ce910b9b2fb
#: ../../releases/1.4.txt:189 ../../releases/1.4-alpha-1.txt:449
#: ../../releases/1.4-beta-1.txt:487
msgid "Custom project and app templates"
msgstr ""

# abef7bb23b5843f5ae896c58c7aec6cd
#: ../../releases/1.4.txt:191
msgid ""
"The :djadmin:`startapp` and :djadmin:`startproject` management commands now "
"have a ``--template`` option for specifying a path or URL to a custom app or "
"project template."
msgstr ""

# 0f527f82d37b41fc9a5d1523a36e9da4
#: ../../releases/1.4.txt:195
msgid ""
"For example, Django will use the ``/path/to/my_project_template`` directory "
"when you run the following command::"
msgstr ""

# 107bbdef13664a1a92363465af09a4e9
# 084f91b970ea4a2aae699df469caf7dc
# 53efc9ebfa744656845d09df56d984fd
#: ../../releases/1.4.txt:200 ../../releases/1.4-alpha-1.txt:460
#: ../../releases/1.4-beta-1.txt:498
msgid ""
"You can also now provide a destination directory as the second argument to "
"both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""

# ad2ba98537494458a7cebb17abab9729
# 94fd150dc3eb432583d80b781b6b3ea0
# 6309c7cbb04642a7a8034937263ee5ad
#: ../../releases/1.4.txt:206 ../../releases/1.4-alpha-1.txt:466
#: ../../releases/1.4-beta-1.txt:504
msgid ""
"For more information, see the :djadmin:`startapp` and :djadmin:"
"`startproject` documentation."
msgstr ""

# 807744e92acb4606ae4ce609415485da
# 4322bf6864214f708a6ba8b5aed3bd1f
# e63dcf2d0a3349a79bceb9d0ce0f43c0
#: ../../releases/1.4.txt:210 ../../releases/1.4-alpha-1.txt:432
#: ../../releases/1.4-beta-1.txt:470
msgid "Improved WSGI support"
msgstr ""

# c551c7c1d7c943599bc2b0f7e9a617e2
# 87f85496d57341ddb7b2421e0f943be3
# 418832a546bd423cb1b9aacd08b9caea
#: ../../releases/1.4.txt:212 ../../releases/1.4-alpha-1.txt:434
#: ../../releases/1.4-beta-1.txt:472
msgid ""
"The :djadmin:`startproject` management command now adds a :file:`wsgi.py` "
"module to the initial project layout, containing a simple WSGI application "
"that can be used for :doc:`deploying with WSGI app servers</howto/deployment/"
"wsgi/index>`."
msgstr ""

# 462ec60076764e44a38e54946ac435c5
#: ../../releases/1.4.txt:217
msgid ""
"The :djadmin:`built-in development server<runserver>` now supports using an "
"externally-defined WSGI callable, which makes it possible to run runserver "
"with the same WSGI configuration that is used for deployment. The new :"
"setting:`WSGI_APPLICATION` setting lets you configure which WSGI callable :"
"djadmin:`runserver` uses."
msgstr ""

# aabd8d8f60ed421c9551c0a083e5a8dd
# eb0ad11080fd4934a12749c99aa76e87
# e7052c3c584c44cfbafc1ad291a94f3f
#: ../../releases/1.4.txt:223 ../../releases/1.4-alpha-1.txt:445
#: ../../releases/1.4-beta-1.txt:483
msgid ""
"(The :djadmin:`runfcgi` management command also internally wraps the WSGI "
"callable configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""

# f2c8bff7b11a464a898ec565b9ac6dbe
# 94124b3fd5764846952ff30aab1772fb
# 3ef5dba7fd0546be8172cc2934c18e24
#: ../../releases/1.4.txt:227 ../../releases/1.4-alpha-1.txt:63
#: ../../releases/1.4-beta-1.txt:79
msgid "``SELECT FOR UPDATE`` support"
msgstr ""

# d0a67b517146434bbecb71d7c8c101c7
#: ../../releases/1.4.txt:229
msgid ""
"Django 1.4 includes a :meth:`QuerySet.select_for_update() <django.db.models."
"query.QuerySet.select_for_update>` method, which generates a ``SELECT ... "
"FOR UPDATE`` SQL query. This will lock rows until the end of the "
"transaction, meaning other transactions cannot modify or delete rows matched "
"by a ``FOR UPDATE`` query."
msgstr ""

# 10d415c4839d430d901c9bf7fcf6f9f3
# e284d170d3ce43e4baebe7451ddb4cb8
# a1e5f708c55140b0be218fbe9addaa5f
#: ../../releases/1.4.txt:235 ../../releases/1.4-alpha-1.txt:71
#: ../../releases/1.4-beta-1.txt:87
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.select_for_update`."
msgstr ""

# fdc5f0dd3f01486a87164d6daacf84b9
# ef8c6279ecd0492f896056cc22c94825
# 794e09420cf4408d8ef2c727cd967874
#: ../../releases/1.4.txt:239 ../../releases/1.4-alpha-1.txt:75
#: ../../releases/1.4-beta-1.txt:91
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr ""

# 96e04a23945d4875acb408d20d1c17e8
#: ../../releases/1.4.txt:241
msgid ""
"This method lets you create multiple objects more efficiently. It can result "
"in significant performance increases if you have many objects."
msgstr ""

# 04e2fccb1847493ba98ccc92ba42ec45
#: ../../releases/1.4.txt:244
msgid ""
"Django makes use of this internally, meaning some operations (such as "
"database setup for test suites) have seen a performance benefit as a result."
msgstr ""

# a90be37803db4e6e82b99821d48d82cf
# 1eeb15060e3c484b915e7418d272eb17
# d860715d514844ada04b4da2bd26ce5f
#: ../../releases/1.4.txt:247 ../../releases/1.4-alpha-1.txt:82
#: ../../releases/1.4-beta-1.txt:98
msgid ""
"See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more "
"information."
msgstr ""

# 52d52d6b55b5469b93d799fdd28e79aa
# 1f1697d009a24fa8af4b10d423df5a5f
# 4f29f2d79a65461daee5650624d40dc4
#: ../../releases/1.4.txt:251 ../../releases/1.4-alpha-1.txt:86
#: ../../releases/1.4-beta-1.txt:102
msgid "``QuerySet.prefetch_related``"
msgstr ""

# ee5b5769d2114dd88f57ce9440a8f1bc
#: ../../releases/1.4.txt:253
msgid ""
"Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with "
"a different strategy and broader scope, :meth:`~django.db.models.query."
"QuerySet.prefetch_related` has been added to :class:`~django.db.models.query."
"QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of "
"the specified related lookups in a single batch as soon as the query begins "
"to be evaluated. Unlike ``select_related``, it does the joins in Python, not "
"in the database, and supports many-to-many relationships, :class:`~django."
"contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to "
"fix a very common performance problem in which your code ends up doing O(n) "
"database queries (or worse) if objects on your primary ``QuerySet`` each "
"have many related objects that you also need to fetch."
msgstr ""

# 72c337a982cd42b2b456b699c7640740
# 10f3e99065864637a2efbbe6dd470b4c
# 1aa0413065774949a7cbc2f44506a7f5
#: ../../releases/1.4.txt:267 ../../releases/1.4-alpha-1.txt:102
#: ../../releases/1.4-beta-1.txt:118
msgid "Improved password hashing"
msgstr ""

# 22341da2aab64534922f2462fc8ad264
# 8e0ca016e5e44caa83d12c8771c23824
# 6a8b7cc3c01c4eedb7d29a6fcbdf77dd
#: ../../releases/1.4.txt:269 ../../releases/1.4-alpha-1.txt:104
#: ../../releases/1.4-beta-1.txt:120
msgid ""
"Django's auth system (``django.contrib.auth``) stores passwords using a one-"
"way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor "
"speeds and theoretical attacks have revealed that SHA1 isn't as secure as "
"we'd like. Thus, Django 1.4 introduces a new password storage system: by "
"default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You "
"can also easily choose a different algorithm (including the popular bcrypt_ "
"algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""

# 8eb6183d421e45fc8602eadd96734513
#: ../../releases/1.4.txt:283
msgid "HTML5 doctype"
msgstr ""

# 14e631dc109441bc866b00684f2fed37
# 05e83095c1574085961a3f8cd160381d
# e2e7857e314e4957b42427e9afc0047f
#: ../../releases/1.4.txt:285 ../../releases/1.4-alpha-1.txt:121
#: ../../releases/1.4-beta-1.txt:152
msgid ""
"We've switched the admin and other bundled templates to use the HTML5 "
"doctype. While Django will be careful to maintain compatibility with older "
"browsers, this change means that you can use any HTML5 features you need in "
"admin pages without having to lose HTML validity or override the provided "
"templates to change the doctype."
msgstr ""

# 22f8a9be877644e697b95c2619f6bd32
# 0baf470953ca481cb3e848f70d008956
# 45ff173ef69d40fc8f22a65cbeb4ce4a
#: ../../releases/1.4.txt:292 ../../releases/1.4-alpha-1.txt:128
#: ../../releases/1.4-beta-1.txt:159
msgid "List filters in admin interface"
msgstr ""

# 6fe12a8cf2f24448bc1d261a1ba5fc7c
#: ../../releases/1.4.txt:294
msgid ""
"Prior to Django 1.4, the :mod:`~django.contrib.admin` app let you specify "
"change list filters by specifying a field lookup, but it didn't allow you to "
"create custom filters. This has been rectified with a simple API (previously "
"used internally and known as \"FilterSpec\"). For more details, see the "
"documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

# d138b10f3bb74bc1b98f3185e97704dc
# 23e9ef2864804ca8a9c3885055c57f00
# 15f196a7e51a4d53882a0344f3e2bc2b
#: ../../releases/1.4.txt:301 ../../releases/1.4-alpha-1.txt:137
#: ../../releases/1.4-beta-1.txt:168
msgid "Multiple sort in admin interface"
msgstr ""

# cd800ca6757f4e69b07a4ad0aeda54c4
#: ../../releases/1.4.txt:303
msgid ""
"The admin change list now supports sorting on multiple columns. It respects "
"all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` "
"attribute, and sorting on multiple columns by clicking on headers is "
"designed to mimic the behavior of desktop GUIs. We also added a :meth:"
"`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the "
"ordering dynamically (i.e., depending on the request)."
msgstr ""

# 9a413d6655664478b86a7d7e3ab10224
# 3d13b6aaa06d40a1bd81b0346d8bdfac
# c1addc3c5ef14a9589ad15700efd7896
#: ../../releases/1.4.txt:311 ../../releases/1.4-alpha-1.txt:147
#: ../../releases/1.4-beta-1.txt:178
msgid "New ``ModelAdmin`` methods"
msgstr ""

# 992edfc52f63486990d18e16b777d6f5
#: ../../releases/1.4.txt:313
msgid ""
"We added a :meth:`~django.contrib.admin.ModelAdmin.save_related` method to :"
"mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related "
"objects are saved in the admin."
msgstr ""

# b5a3a39f1d184dc1a517a532c5e428d4
#: ../../releases/1.4.txt:317
msgid ""
"Two other new :class:`~django.contrib.admin.ModelAdmin` methods, :meth:"
"`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django."
"contrib.admin.ModelAdmin.get_list_display_links` enable dynamic "
"customization of fields and links displayed on the admin change list."
msgstr ""

# e02bdd73499c4c5b8d1aaf404a7a5809
# 019b55b80c044e0f9dd9f340507fd4a7
# 955e83d3368e484f907b72476624ddef
#: ../../releases/1.4.txt:324 ../../releases/1.4-alpha-1.txt:160
#: ../../releases/1.4-beta-1.txt:191
msgid "Admin inlines respect user permissions"
msgstr ""

# b2b5c1a92aa342f29fef8dc48ab8196a
#: ../../releases/1.4.txt:326
msgid ""
"Admin inlines now only allow those actions for which the user has "
"permission. For ``ManyToMany`` relationships with an auto-created "
"intermediate model (which does not have its own permissions), the change "
"permission for the related model determines if the user has the permission "
"to add, change or delete relationships."
msgstr ""

# 931a881aad83445c8a78646847b52416
# 6dda190b380044e38b5dc32f2a5a4c25
# 85b0668855a2408bbe78491b856341e7
#: ../../releases/1.4.txt:333 ../../releases/1.4-alpha-1.txt:169
#: ../../releases/1.4-beta-1.txt:200
msgid "Tools for cryptographic signing"
msgstr ""

# 4ba4cfe843404798835332a6bf1101b7
# f06c225afba0428e93b9805605c16ccf
# 8760cc4e500940a58cb6d59063170e43
#: ../../releases/1.4.txt:335 ../../releases/1.4-alpha-1.txt:171
#: ../../releases/1.4-beta-1.txt:202
msgid ""
"Django 1.4 adds both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

# ef4e356440344dcc8ab658a272ce5a18
# c9a2535c2d2341d69e20d05d4b092f9b
# cf03cff57deb4e5388273e438fd197b5
#: ../../releases/1.4.txt:339 ../../releases/1.4-alpha-1.txt:175
#: ../../releases/1.4-beta-1.txt:206
msgid ""
"See the :doc:`cryptographic signing </topics/signing>` docs for more "
"information."
msgstr ""

# c2b4eb392aca4abe94b1ec70d90acf34
# 450e05818097400797f99f67a5c23e1c
# afb6bc52ee7e4d8ca1eea1e485dedca8
#: ../../releases/1.4.txt:343 ../../releases/1.4-alpha-1.txt:179
#: ../../releases/1.4-beta-1.txt:210
msgid "Cookie-based session backend"
msgstr ""

# fae4c4de31554ce5a17bca788a117994
#: ../../releases/1.4.txt:345
msgid ""
"Django 1.4 introduces a cookie-based session backend that uses the tools "
"for :doc:`cryptographic signing </topics/signing>` to store the session data "
"in the client's browser."
msgstr ""

# 70830afa1c7b422e8c51f74c3228f3b6
#: ../../releases/1.4.txt:351
msgid ""
"Session data is signed and validated by the server, but it's not encrypted. "
"This means a user can view any data stored in the session but cannot change "
"it. Please read the documentation for further clarification before using "
"this backend."
msgstr ""

# a616274a3f8047e8be0961384e56e7de
# a9dc4dfff9994a7488d07dffe13c6578
# 07e8d3a15d9d49819258a81c2c2d0b30
#: ../../releases/1.4.txt:356 ../../releases/1.4-alpha-1.txt:185
#: ../../releases/1.4-beta-1.txt:223
msgid ""
"See the :ref:`cookie-based session backend <cookie-session-backend>` docs "
"for more information."
msgstr ""

# cf335e7fd97345409f9d12d06f06ae56
# 2858429d901d40568f7650a9bf8e8ad0
# e01696ccef434aa384102824d5a288ad
#: ../../releases/1.4.txt:360 ../../releases/1.4-alpha-1.txt:189
#: ../../releases/1.4-beta-1.txt:227
msgid "New form wizard"
msgstr ""

# 7db54c32c7b24ae4bc86de8620b018c8
#: ../../releases/1.4.txt:362
msgid ""
"The previous ``FormWizard`` from :mod:`django.contrib.formtools` has been "
"replaced with a new implementation based on the class-based views introduced "
"in Django 1.3. It features a pluggable storage API and doesn't require the "
"wizard to pass around hidden fields for every previous step."
msgstr ""

# cdd93eb86a3f45aa85dd1af81388585b
# e514717cfcba477db8c5f1f32716dd0e
# 27820142951348fe815b585525d5b273
#: ../../releases/1.4.txt:367 ../../releases/1.4-alpha-1.txt:196
#: ../../releases/1.4-beta-1.txt:234
msgid ""
"Django 1.4 ships with a session-based storage backend and a cookie-based "
"storage backend. The latter uses the tools for :doc:`cryptographic signing </"
"topics/signing>` also introduced in Django 1.4 to store the wizard's state "
"in the user's cookies."
msgstr ""

# d546c1012f3a43348198dff952d562de
# b20226e60044486a9afecc9db952a75d
# c05447ff8be14081847289a95d945cd4
#: ../../releases/1.4.txt:372 ../../releases/1.4-alpha-1.txt:201
#: ../../releases/1.4-beta-1.txt:239
msgid ""
"See the :doc:`form wizard </ref/contrib/formtools/form-wizard>` docs for "
"more information."
msgstr ""

# d35f7f48ee8c4d918f38cf717abf473f
# 81a69112dcfc4b38a08367fbefc8c410
# aa4c44edb5b74d8d907a508787ba91cb
#: ../../releases/1.4.txt:376 ../../releases/1.4-alpha-1.txt:205
#: ../../releases/1.4-beta-1.txt:243
msgid "``reverse_lazy``"
msgstr ""

# 11a874d3fbd44581b9ed398a3b0a7d88
#: ../../releases/1.4.txt:378
msgid ""
"A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was "
"added to allow using URL reversals before the project's URLconf gets loaded."
msgstr ""

# 6dc5062727874fe1aa886dece388de72
# 3dab50aadcfa43f0a17791e0c3f2a353
# b584b8bba82447beb318e11042445c91
#: ../../releases/1.4.txt:382 ../../releases/1.4-alpha-1.txt:211
#: ../../releases/1.4-beta-1.txt:249
msgid "Translating URL patterns"
msgstr ""

# d60a112bd767497688bb7a7c136b0a57
#: ../../releases/1.4.txt:384
msgid ""
"Django can now look for a language prefix in the URLpattern when using the "
"new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. It's also "
"now possible to define translatable URL patterns using :func:`~django.utils."
"translation.ugettext_lazy`. See :ref:`url-internationalization` for more "
"information about the language prefix and how to internationalize URL "
"patterns."
msgstr ""

# a2f98217894c47ce8adc3fe2831ecacf
# 0aa47366dd884883b33e264909b75d48
# e26965ef1ec74d6d9bd176a1b9cbe978
#: ../../releases/1.4.txt:392 ../../releases/1.4-alpha-1.txt:221
#: ../../releases/1.4-beta-1.txt:259
msgid ""
"Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""

# 5d7c9b223e1c4a298d59cf0a95c8f728
# e719be64a5c9422ab291907db38d18ea
# 4aa9cbffe3a6409e962da3c49e5c6f83
#: ../../releases/1.4.txt:394 ../../releases/1.4-alpha-1.txt:223
#: ../../releases/1.4-beta-1.txt:261
msgid ""
"The :ref:`contextual translation<contextual-markers>` support introduced in "
"Django 1.3 via the ``pgettext`` function has been extended to the :ttag:"
"`trans` and :ttag:`blocktrans` template tags using the new ``context`` "
"keyword."
msgstr ""

# f7b1d9888c384babb81931302873322f
# 3213826ebe3e467f99e34bf2cef6d0cf
# 1dda8d18a1504526925e43c2b967c4b3
#: ../../releases/1.4.txt:400 ../../releases/1.4-alpha-1.txt:229
#: ../../releases/1.4-beta-1.txt:267
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr ""

# d75826fdffe543bdbdc52b6cdca5c893
#: ../../releases/1.4.txt:402
msgid ""
"Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail."
"SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views."
"generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:"
"`~django.views.generic.detail.SingleObjectMixin` to enable the customization "
"of URLconf keyword arguments used for single object generic views."
msgstr ""

# 8bd6025b09b840d5a3b0810f0b521843
# 8c1f1c67ba104cd2a41499e37f6fbed0
# be1cf16d8a4340898a9ba89f03c525b7
#: ../../releases/1.4.txt:411 ../../releases/1.4-alpha-1.txt:240
#: ../../releases/1.4-beta-1.txt:278
msgid "Assignment template tags"
msgstr ""

# 4c9b5722edec43508bafbb3d8be9d5ff
# d79c151f6be6410196e3ef70c6a112fe
# 611ea8641679406a8905e8551753cb64
#: ../../releases/1.4.txt:413 ../../releases/1.4-alpha-1.txt:242
#: ../../releases/1.4-beta-1.txt:280
msgid ""
"A new :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` "
"helper function was added to ``template.Library`` to ease the creation of "
"template tags that store data in a specified context variable."
msgstr ""

# d171664be7e345b9a12711b6724d43f1
# c28309fd6cc84e9aa9a4d1bc1768bfdc
# d927db324eea49afb66875187610ff90
#: ../../releases/1.4.txt:418 ../../releases/1.4-alpha-1.txt:247
#: ../../releases/1.4-beta-1.txt:285
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr ""

# c91bf2ac436e456c84d87b202b99855b
# 5a089e83888c473985c8c67bad51b606
# 1b45f5c6afd846f3a714bc5692423797
#: ../../releases/1.4.txt:420 ../../releases/1.4-alpha-1.txt:249
#: ../../releases/1.4-beta-1.txt:287
msgid ""
"The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :ref:"
"`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly "
"introduced :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` "
"template helper functions may now accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# 0c971c0a15c141239d382d4a58d89bbb
#: ../../releases/1.4.txt:436
msgid ""
"Then, in the template, any number of arguments may be passed to the template "
"tag. For example:"
msgstr ""

# 03c7002f9d9d46768da35dfb8fee9ddd
# 56edfdc98f794115a4e9581c48739dab
# 3858f619bc614a57af1f4128fdfab3fe
#: ../../releases/1.4.txt:444 ../../releases/1.4-alpha-1.txt:273
#: ../../releases/1.4-beta-1.txt:311
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr ""

# 4020d0f185ed4787b8de45c64b1286bd
# a9844a0bcb0f472a80a8d3174c15f3e7
# 55b9d3d7108e492eaefd9718daee7004
#: ../../releases/1.4.txt:446 ../../releases/1.4-alpha-1.txt:275
#: ../../releases/1.4-beta-1.txt:313
msgid ""
"In previous versions of Django, whenever the :setting:`TEMPLATE_DEBUG` "
"setting was ``True``, any exception raised during template rendering (even "
"exceptions unrelated to template syntax) were wrapped in "
"``TemplateSyntaxError`` and re-raised. This was done in order to provide "
"detailed template source location information in the debug 500 page."
msgstr ""

# 2f6fe9d169654823b76ffa731b2da7ca
# f7c23f664be647eaaf3e4d3182daee3b
# ae952a4d5fb74cbcb79876a3f8720f5e
#: ../../releases/1.4.txt:452 ../../releases/1.4-alpha-1.txt:281
#: ../../releases/1.4-beta-1.txt:319
msgid ""
"In Django 1.4, exceptions are no longer wrapped. Instead, the original "
"exception is annotated with the source information. This means that catching "
"exceptions from template rendering is now consistent regardless of the value "
"of :setting:`TEMPLATE_DEBUG`, and there's no need to catch and unwrap "
"``TemplateSyntaxError`` in order to catch other errors."
msgstr ""

# 157a845b82b74e82905a1529a45cd3f9
# 13494e0642484af282e210de3fd6bb86
# 6f5206468ce740afa348a842e766187d
#: ../../releases/1.4.txt:459 ../../releases/1.4-alpha-1.txt:288
#: ../../releases/1.4-beta-1.txt:326
msgid "``truncatechars`` template filter"
msgstr ""

# 3b728a915e8b4244b3504cd40945a39e
#: ../../releases/1.4.txt:461
msgid ""
"This new filter truncates a string to be no longer than the specified number "
"of characters. Truncated strings end with a translatable ellipsis sequence "
"(\"...\"). See the documentation for :tfilter:`truncatechars` for more "
"details."
msgstr ""

# 4790075fd14d4f0c8c1a04d4b1fc380f
# 819de1b7c71c4ea88de1ee4f8255f510
# 0aec63d0bcb743d2853bc3c679b7cab3
#: ../../releases/1.4.txt:467 ../../releases/1.4-alpha-1.txt:296
#: ../../releases/1.4-beta-1.txt:334
msgid "``static`` template tag"
msgstr ""

# eb43bb770dd9493fa06588c19b8f63f0
# d76a0ad0075e43fd94140f5a9a8b23fb
# 863bed2e9d47498aaa9e28676a4bd31f
#: ../../releases/1.4.txt:469 ../../releases/1.4-alpha-1.txt:298
#: ../../releases/1.4-beta-1.txt:336
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new :"
"ttag:`static<staticfiles-static>` template tag to refer to files saved with "
"the :setting:`STATICFILES_STORAGE` storage backend. It uses the storage "
"backend's ``url`` method and therefore supports advanced features such as :"
"ref:`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

# 532a27708dc147c1990f0e5e2fd36fcc
# 5b204f1aafc64acfb6c105f31f95b6bd
# 998c6ecb86e84b59bafe7185f26d8a9c
#: ../../releases/1.4.txt:476 ../../releases/1.4-alpha-1.txt:305
#: ../../releases/1.4-beta-1.txt:343
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr ""

# 202ade05622540428d1e10d67ddaffad
#: ../../releases/1.4.txt:478
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a :"
"class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` backend "
"that caches the files it saves (when running the :djadmin:`collectstatic` "
"management command) by appending the MD5 hash of the file's content to the "
"filename. For example, the file ``css/styles.css`` would also be saved as "
"``css/styles.55e7cbb9ba48.css``"
msgstr ""

# 36fc9d091f114ee497ec6030a5c12d99
# 6a5926d641024fc2a671d10e9e160263
# 34d2f44a07d240e2977a076417df0a98
#: ../../releases/1.4.txt:485 ../../releases/1.4-alpha-1.txt:315
#: ../../releases/1.4-beta-1.txt:353
msgid ""
"See the :class:`~django.contrib.staticfiles.storage."
"CachedStaticFilesStorage` docs for more information."
msgstr ""

# 9c1cd164e59a4416bb857b79b029cc41
# 4782c64e784a41dd8cbb9c176d0fa9a5
# 4308ec77b0694f67b00a474bfa4e9767
#: ../../releases/1.4.txt:489 ../../releases/1.4-alpha-1.txt:319
#: ../../releases/1.4-beta-1.txt:357
msgid "Simple clickjacking protection"
msgstr ""

# 8b75844e53534ecea6d476c85317e6f7
# 7e39297a0fdd41e586f2af46ff8e38ae
# 69fddb5138234ace8c138086f59c2753
#: ../../releases/1.4.txt:491 ../../releases/1.4-alpha-1.txt:321
#: ../../releases/1.4-beta-1.txt:359
msgid ""
"We've added a middleware to provide easy protection against `clickjacking "
"<http://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options`` "
"header. It's not enabled by default for backwards compatibility reasons, but "
"you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to "
"help plug that security hole for browsers that support the header."
msgstr ""

# f1f8e797245549c986b7b1da2184c0ff
# d73ccebd93fb45c3a177140284ae61ae
# 077564cbea0a456497ee711b41ee5e3c
#: ../../releases/1.4.txt:498 ../../releases/1.4-alpha-1.txt:328
#: ../../releases/1.4-beta-1.txt:366
msgid "CSRF improvements"
msgstr ""

# 68fd8c33b7ea4c3f91e8ba3d9cc09ca6
#: ../../releases/1.4.txt:500
msgid ""
"We've made various improvements to our CSRF features, including the :func:"
"`~django.views.decorators.csrf.ensure_csrf_cookie` decorator, which can help "
"with AJAX-heavy sites; protection for PUT and DELETE requests; and the :"
"setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings, which "
"can improve the security and usefulness of CSRF protection. See the :doc:"
"`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

# 26cbe99ca9744ffea9920973b361ce27
# 5166ef586b4a44229798cc68b1ee9f33
# 6a7d1f5e15854b13a2f4b0417e2abfb6
#: ../../releases/1.4.txt:508 ../../releases/1.4-alpha-1.txt:338
#: ../../releases/1.4-beta-1.txt:376
msgid "Error report filtering"
msgstr ""

# 16e40dddf5bd4171a5a0ca15ba4ef33c
# cbd1b93d0135465281566529332536d6
# bf97d11303ac43028e83b71179e6a25e
#: ../../releases/1.4.txt:510 ../../releases/1.4-alpha-1.txt:340
#: ../../releases/1.4-beta-1.txt:378
msgid ""
"We added two function decorators, :func:`~django.views.decorators.debug."
"sensitive_variables` and :func:`~django.views.decorators.debug."
"sensitive_post_parameters`, to allow designating the local variables and "
"POST parameters that may contain sensitive information and should be "
"filtered out of error reports."
msgstr ""

# 728a01b1b30744cd82e04fae06db3a51
#: ../../releases/1.4.txt:515
msgid ""
"All POST parameters are now systematically filtered out of error reports for "
"certain views (``login``, ``password_reset_confirm``, ``password_change`` "
"and ``add_view`` in :mod:`django.contrib.auth.views`, as well as "
"``user_change_password`` in the admin app) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

# 2aadc0ab10a24dbaa27efd95ff21fd8a
#: ../../releases/1.4.txt:521
msgid ""
"You can override or customize the default filtering by writing a :ref:"
"`custom filter<custom-error-reports>`. For more information see the docs on :"
"ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

# 91c83249da51497cb3be43ab589aacf3
# 24291a708127407f906ba7e906114da0
# cee98245f33c49488ac839714f4d1c15
#: ../../releases/1.4.txt:526 ../../releases/1.4-alpha-1.txt:356
#: ../../releases/1.4-beta-1.txt:394
msgid "Extended IPv6 support"
msgstr ""

# 217dd116b9e146a39d1c99d6a230d772
#: ../../releases/1.4.txt:528
msgid ""
"Django 1.4 can now better handle IPv6 addresses with the new :class:`~django."
"db.models.GenericIPAddressField` model field, :class:`~django.forms."
"GenericIPAddressField` form field and the validators :data:`~django.core."
"validators.validate_ipv46_address` and :data:`~django.core.validators."
"validate_ipv6_address`."
msgstr ""

# 808df4d70ecb4fefa9f60b1bd1a181e3
#: ../../releases/1.4.txt:535
msgid "HTML comparisons in tests"
msgstr ""

# 489740ac489a48e6898c0252a96478ca
#: ../../releases/1.4.txt:537
msgid ""
"The base classes in :mod:`django.test` now have some helpers to compare HTML "
"without tripping over irrelevant differences in whitespace, argument quoting/"
"ordering and closing of self-closing tags. You can either compare HTML "
"directly with the new :meth:`~django.test.SimpleTestCase.assertHTMLEqual` "
"and :meth:`~django.test.SimpleTestCase.assertHTMLNotEqual` assertions, or "
"use the ``html=True`` flag with :meth:`~django.test.TestCase.assertContains` "
"and :meth:`~django.test.TestCase.assertNotContains` to test whether the "
"client's response contains a given HTML fragment. See the :ref:`assertions "
"documentation <assertions>` for more."
msgstr ""

# 7e1487a9ea6043e0beee2a68538b7426
# 6845b5ab7ac94437ba5d01e74caf3249
#: ../../releases/1.4.txt:550 ../../releases/1.4-beta-1.txt:528
msgid "Two new date format strings"
msgstr ""

# c9deab2f419241b9b881459ccf43c5b0
# c0d65f72d9704df9bae45b7e5e35d588
#: ../../releases/1.4.txt:552 ../../releases/1.4-beta-1.txt:530
msgid ""
"Two new :tfilter:`date` formats were added for use in template filters, "
"template tags and :ref:`format-localization`:"
msgstr ""

# 98f0e8d92ac344d3ad39ee1aa0493502
# 47fb532a4ad941ecb0a5e0905f1f5ee5
#: ../../releases/1.4.txt:555 ../../releases/1.4-beta-1.txt:533
msgid "``e`` -- the name of the timezone of the given datetime object"
msgstr ""

# 6f556c17402f4e7bb286fafb67dba4ef
# 2eb4aee024b3461db731a19f5264c4f9
#: ../../releases/1.4.txt:556 ../../releases/1.4-beta-1.txt:534
msgid "``o`` -- the ISO 8601 year number"
msgstr ""

# 083d720cd8ce4ce4b7bf315da043b0e4
# a7185642cbff40aa9b8f2fc810d51788
#: ../../releases/1.4.txt:558 ../../releases/1.4-beta-1.txt:536
msgid ""
"Please make sure to update your :ref:`custom format files <custom-format-"
"files>` if they contain either ``e`` or ``o`` in a format string. For "
"example a Spanish localization format previously only escaped the ``d`` "
"format character::"
msgstr ""

# 86a72b9dfdc7461fbef43c1ca6412019
# 3dcd2b43e9f1459490e02414b52005a1
#: ../../releases/1.4.txt:565 ../../releases/1.4-beta-1.txt:543
msgid "But now it needs to also escape ``e`` and ``o``::"
msgstr ""

# 7c17032e988544128e14e10761498dfe
# 8ae18367fdf140678b04d00adbfe9069
#: ../../releases/1.4.txt:569 ../../releases/1.4-beta-1.txt:547
msgid "For more information, see the :tfilter:`date` documentation."
msgstr ""

# cabe38315d8040aa9daa724486799522
# 8aca3f9a406d4045b20478997f660249
# 349f1ad24be248e9ad94ebef9d52682e
# 0b55241f10f44e62a7778e3c02593f9a
# 074d5a0c080b4d5d8645a56b6224e408
# b04b7604572e48beb7d5d46112804b2d
#: ../../releases/1.4.txt:572 ../../releases/1.4-alpha-1.txt:490
#: ../../releases/1.4-beta-1.txt:550 ../../releases/1.5.txt:244
#: ../../releases/1.5-alpha-1.txt:238 ../../releases/1.5-beta-1.txt:236
msgid "Minor features"
msgstr ""

# 2f3183bd88414070a595a3f6d3197431
# e8b21ef67de745519924445e97aa914b
# 3571b271531d4f8fab0afb931d5780e4
#: ../../releases/1.4.txt:574 ../../releases/1.4-alpha-1.txt:492
#: ../../releases/1.4-beta-1.txt:552
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr ""

# bd1e9bc6f4af404db35b940b6d370634
#: ../../releases/1.4.txt:576
msgid ""
"A more usable stacktrace in the technical 500 page. Frames in the stack "
"trace that reference Django's framework code are dimmed out, while frames in "
"application code are slightly emphasized. This change makes it easier to "
"scan a stacktrace for issues in application code."
msgstr ""

# ba3b73a4b5724b428c446386b76e9b73
# f3d6415540954048bd18b0d9c29b716f
# 0cd0a751b4454048bb35d3ace75b3a2c
#: ../../releases/1.4.txt:581 ../../releases/1.4-alpha-1.txt:499
#: ../../releases/1.4-beta-1.txt:559
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ""

# a1c29211fa654c3a948b18063795d954
# 0a753b31a3c64664ba545af36ab46dc6
# 4b3fa74875254218af567f723e07eeca
#: ../../releases/1.4.txt:583 ../../releases/1.4-alpha-1.txt:501
#: ../../releases/1.4-beta-1.txt:561
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr ""

# f44eb34cd24b4a6caaf7ca3fd1b1b078
# dea9b576b41c482b85ca28a8332cb8c4
# 3028247d3dd746d39b552b346a69821a
#: ../../releases/1.4.txt:585 ../../releases/1.4-alpha-1.txt:503
#: ../../releases/1.4-beta-1.txt:563
msgid ""
"In the documentation, a helpful :doc:`security overview </topics/security>` "
"page."
msgstr ""

# 713f77d3a06b4fa7a52a72b552f971d6
#: ../../releases/1.4.txt:588
msgid ""
"The ``django.contrib.auth.models.check_password`` function has been moved to "
"the :mod:`django.contrib.auth.hashers` module. Importing it from the old "
"location will still work, but you should update your imports."
msgstr ""

# d099a0e1c909476ca0d06eb480fdf5fd
#: ../../releases/1.4.txt:592
msgid ""
"The :djadmin:`collectstatic` management command now has a ``--clear`` option "
"to delete all files at the destination before copying or linking the static "
"files."
msgstr ""

# 0c77bbe1491243bba4cc822ee576e0a8
#: ../../releases/1.4.txt:596
msgid ""
"It's now possible to load fixtures containing forward references when using "
"MySQL with the InnoDB database engine."
msgstr ""

# eed5be6d99f54aee808c9f434ffc1c38
# cbf5d9c55f7b418698c0b37c378bf5bd
# 1a199f2fcaf3447d93a15099b3bd2dcd
#: ../../releases/1.4.txt:599 ../../releases/1.4-alpha-1.txt:517
#: ../../releases/1.4-beta-1.txt:577
msgid ""
"A new 403 response handler has been added as ``'django.views.defaults."
"permission_denied'``. You can set your own handler by setting the value of :"
"data:`django.conf.urls.handler403`. See the documentation about :ref:`the "
"403 (HTTP Forbidden) view<http_forbidden_view>` for more information."
msgstr ""

# c70883e0f3854ccd8f869f509212fbd3
#: ../../releases/1.4.txt:605
msgid ""
"The :djadmin:`makemessages` command uses a new and more accurate lexer, "
"`JsLex`_, for extracting translatable strings from JavaScript files."
msgstr ""

# 30db155f068846069645a9aa1ae93059
# 5b998db8e787445299fee9bc19c7830b
# a05f68ce2e56450ba3ea835e42558161
#: ../../releases/1.4.txt:610 ../../releases/1.4-alpha-1.txt:523
#: ../../releases/1.4-beta-1.txt:583
msgid ""
"The :ttag:`trans` template tag now takes an optional ``as`` argument to be "
"able to retrieve a translation string without displaying it but setting a "
"template context variable instead."
msgstr ""

# 5cda1074d822419f8c422589976e67e0
# c399e5ced8424b44be3a23361baeb722
# 66d2466d1d6e4dbcbfaa3b714dd516f7
#: ../../releases/1.4.txt:614 ../../releases/1.4-alpha-1.txt:527
#: ../../releases/1.4-beta-1.txt:587
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ""

# 98fa6330b60d4afcaa02f32a2f139dcb
#: ../../releases/1.4.txt:616
msgid ""
"If your Django app is behind a proxy, you might find the new :setting:"
"`SECURE_PROXY_SSL_HEADER` setting useful. It solves the problem of your "
"proxy \"eating\" the fact that a request came in via HTTPS. But only use "
"this setting if you know what you're doing."
msgstr ""

# 34c9e4949c6248a0b2d8f2406f55de97
#: ../../releases/1.4.txt:621
msgid ""
"A new, plain-text, version of the HTTP 500 status code internal error page "
"served when :setting:`DEBUG` is ``True`` is now sent to the client when "
"Django detects that the request has originated in JavaScript code. (:meth:"
"`~django.http.HttpRequest.is_ajax` is used for this.)"
msgstr ""

# 317fc55c54a5476e8b2af8bbeb6978c6
#: ../../releases/1.4.txt:626
msgid ""
"Like its HTML counterpart, it contains a collection of different pieces of "
"information about the state of the application."
msgstr ""

# 644392651efd457ab54b04a3f9e9cadf
#: ../../releases/1.4.txt:629
msgid ""
"This should make it easier to read when debugging interaction with client-"
"side JavaScript."
msgstr ""

# 438916b874d74c4fa24711228d140a60
# dd2e614375fe48f29ebb8548717cdf3c
# e8c6200bc7de4f34875b2621e275a992
#: ../../releases/1.4.txt:632 ../../releases/1.4-alpha-1.txt:540
#: ../../releases/1.4-beta-1.txt:600
msgid ""
"Added the :djadminopt:`--no-location` option to the :djadmin:`makemessages` "
"command."
msgstr ""

# fb48a976359d464982ec4328faf253b1
# 09740c9c17d9418ab756c6bbad75d0bb
# 3df2c87a1cde4a2287770e34becb10fc
#: ../../releases/1.4.txt:635 ../../releases/1.4-alpha-1.txt:543
#: ../../releases/1.4-beta-1.txt:603
msgid ""
"Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for "
"better compatibility with the other cache backends."
msgstr ""

# 9cf8a1f6462847bb9f8d2a4d985ab1ab
# a2868557b72e473c98a5ee2edefdeb86
# 899072dabc8c403c99af1b0ed3cd27b2
#: ../../releases/1.4.txt:639 ../../releases/1.4-alpha-1.txt:547
#: ../../releases/1.4-beta-1.txt:607
msgid ""
"Added support in the ORM for generating ``SELECT`` queries containing "
"``DISTINCT ON``."
msgstr ""

# 98678ad674b2471296e150aa0af5f495
# 8ad7c22984ea412f83af3d74c2321137
# 297dba1a28af40738ad17f1d037bb699
#: ../../releases/1.4.txt:642 ../../releases/1.4-alpha-1.txt:550
#: ../../releases/1.4-beta-1.txt:610
msgid ""
"The ``distinct()`` ``QuerySet`` method now accepts an optional list of model "
"field names. If specified, then the ``DISTINCT`` statement is limited to "
"these fields. This is only supported in PostgreSQL."
msgstr ""

# b055d51e8f5e4a62bb4f2a9e092ddbcc
# d0d53662dabd4dbfa0d79b374a1df4b3
# 800bd5afcbb34ff59b0d875b5676a458
#: ../../releases/1.4.txt:646 ../../releases/1.4-alpha-1.txt:554
#: ../../releases/1.4-beta-1.txt:614
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.distinct`."
msgstr ""

# 4a47bf40a2cd4d08b9eae4a28c776211
#: ../../releases/1.4.txt:649
msgid ""
"The admin login page will add a password reset link if you include a URL "
"with the name `'admin_password_reset'` in your urls.py, so plugging in the "
"built-in password reset mechanism and making it available is now much "
"easier. For details, see :ref:`auth_password_reset`."
msgstr ""

# 8ebbccf112c54bcb8561353a128a0d15
#: ../../releases/1.4.txt:654
msgid ""
"The MySQL database backend can now make use of the savepoint feature "
"implemented by MySQL version 5.0.3 or newer with the InnoDB storage engine."
msgstr ""

# 564c065121a145ffaf97d2b26926f5c4
#: ../../releases/1.4.txt:657
msgid ""
"It's now possible to pass initial values to the model forms that are part of "
"both model formsets and inline model formsets as returned from factory "
"functions ``modelformset_factory`` and ``inlineformset_factory`` "
"respectively just like with regular formsets. However, initial values only "
"apply to extra forms, i.e. those which are not bound to an existing model "
"instance."
msgstr ""

# 5185e9e214dd44bd97dc335a4f94cda9
#: ../../releases/1.4.txt:663
msgid ""
"The sitemaps framework can now handle HTTPS links using the new :attr:"
"`Sitemap.protocol <django.contrib.sitemaps.Sitemap.protocol>` class "
"attribute."
msgstr ""

# 92a27f2d9afc476aa29a4ee640290dca
#: ../../releases/1.4.txt:667
msgid ""
"A new :class:`django.test.SimpleTestCase` subclass of :class:`unittest."
"TestCase` that's lighter than :class:`django.test.TestCase` and company. It "
"can be useful in tests that don't need to hit a database. See :ref:"
"`testcase_hierarchy_diagram`."
msgstr ""

# a1cd368c9db342d4a6ee3f0958f686e1
# f095449fac1c459481ab5e1f7fd51a6a
# 5cae2cd733a14d2a802b94627f7cd4f2
#: ../../releases/1.4.txt:674 ../../releases/1.4-alpha-1.txt:558
#: ../../releases/1.4-beta-1.txt:626
msgid "Backwards incompatible changes in 1.4"
msgstr ""

# efa653e2cb304e5993ee8624df3ba847
#: ../../releases/1.4.txt:677
msgid "SECRET_KEY setting is required"
msgstr ""

# 03ad2d5345ba40a0b59b922aad87c82e
#: ../../releases/1.4.txt:679
msgid ""
"Running Django with an empty or known :setting:`SECRET_KEY` disables many of "
"Django's security protections and can lead to remote-code-execution "
"vulnerabilities. No Django site should ever be run without a :setting:"
"`SECRET_KEY`."
msgstr ""

# f68a06e5133b4258bb3a406b78fd93bd
#: ../../releases/1.4.txt:684
msgid ""
"In Django 1.4, starting Django with an empty :setting:`SECRET_KEY` will "
"raise a `DeprecationWarning`. In Django 1.5, it will raise an exception and "
"Django will refuse to start. This is slightly accelerated from the usual "
"deprecation path due to the severity of the consequences of running Django "
"with no :setting:`SECRET_KEY`."
msgstr ""

# 28ba1cc151204bb0a11da4c1454c5dc6
# 32243de6bae64565ad7081b16618995b
# 4c8595b0073f4177a91d2b628d82166e
#: ../../releases/1.4.txt:691 ../../releases/1.4-alpha-1.txt:561
#: ../../releases/1.4-beta-1.txt:629
msgid "django.contrib.admin"
msgstr ""

# 1aa070fb13d3458dbc0b977d60b619c6
# 5b5421762cad423381a7ad8df22ac1ae
# ec8f7147bf4f469a85e584c637d5cadc
#: ../../releases/1.4.txt:693 ../../releases/1.4-alpha-1.txt:563
#: ../../releases/1.4-beta-1.txt:631
msgid ""
"The included administration app ``django.contrib.admin`` has for a long time "
"shipped with a default set of static files such as JavaScript, images and "
"stylesheets. Django 1.3 added a new contrib app ``django.contrib."
"staticfiles`` to handle such files in a generic way and defined conventions "
"for static files included in apps."
msgstr ""

# d4a9cf6c6cf040ea953b0a186cffdc40
#: ../../releases/1.4.txt:699
msgid ""
"Starting in Django 1.4, the admin's static files also follow this "
"convention, to make the files easier to deploy. In previous versions of "
"Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to "
"point to the URL where the admin's static files live on a Web server. This "
"setting has now been deprecated and replaced by the more general setting :"
"setting:`STATIC_URL`. Django will now expect to find the admin static files "
"under the URL ``<STATIC_URL>/admin/``."
msgstr ""

# 645ef4a7b21f4d138c49de22e6c0ae96
#: ../../releases/1.4.txt:707
msgid ""
"If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/"
"media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` "
"are configured and your Web server serves those files correctly. The "
"development server continues to serve the admin files just like before. Read "
"the :doc:`static files howto </howto/static-files/index>` for more details."
msgstr ""

# 45238ff6797d4c639ecd7b68d0615783
#: ../../releases/1.4.txt:713
msgid ""
"If your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. ``http://"
"media.example.com/admin/``), make sure to also set your :setting:"
"`STATIC_URL` setting to the correct URL -- for example, ``http://media."
"example.com/``."
msgstr ""

# 3e06461c7cc2483e97f1ef980f44ae6a
#: ../../releases/1.4.txt:720
msgid ""
"If you're implicitly relying on the path of the admin static files within "
"Django's source code, you'll need to update that path. The files were moved "
"from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/"
"static/admin/`."
msgstr ""

# 6b272f2b496b40a3ae0c88577c172986
# 1582c0e7663f4126bb7099c0b22b1139
# 46b4616c36484603a11ec3256527f01a
#: ../../releases/1.4.txt:726 ../../releases/1.4-alpha-1.txt:597
#: ../../releases/1.4-beta-1.txt:665
msgid "Supported browsers for the admin"
msgstr ""

# fcec36b8d1e248798319f983ce036819
#: ../../releases/1.4.txt:728
msgid ""
"Django hasn't had a clear policy on which browsers are supported by the "
"admin app. Our new policy formalizes existing practices: `YUI's A-grade`_ "
"browsers should provide a fully-functional admin experience, with the "
"notable exception of Internet Explorer 6, which is no longer supported."
msgstr ""

# 31192d7e5f2845058a87eb71fd6d9379
#: ../../releases/1.4.txt:733
msgid ""
"Released over 10 years ago, IE6 imposes many limitations on modern Web "
"development. The practical implications of this policy are that contributors "
"are free to improve the admin without consideration for these limitations."
msgstr ""

# da4e405f7462458f8328a13d4b8fdabe
#: ../../releases/1.4.txt:737
msgid ""
"Obviously, this new policy **has no impact** on sites you develop using "
"Django. It only applies to the Django admin. Feel free to develop apps "
"compatible with any range of browsers."
msgstr ""

# 1a3f86ead93c415b8313f1786e91c76a
# 1627d1146c9e46bd8cc93b4e92dbdc6b
# 199299d40dd74b7a9c23be8e54ff849b
#: ../../releases/1.4.txt:744 ../../releases/1.4-alpha-1.txt:614
#: ../../releases/1.4-beta-1.txt:682
msgid "Removed admin icons"
msgstr ""

# 087660102a4c4d01b4e5b5d483e9f610
#: ../../releases/1.4.txt:746
msgid ""
"As part of an effort to improve the performance and usability of the admin's "
"change-list sorting interface and :attr:`horizontal <django.contrib.admin."
"ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin."
"ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were "
"removed and grouped into two sprite files."
msgstr ""

# 6c81932b18164f55a4bf2316b84888ae
# 2389ba79c96c4555a141b6d3919c1a65
# bc0a9e05e5c942b986dd09d667e2cb9e
#: ../../releases/1.4.txt:752 ../../releases/1.4-alpha-1.txt:622
#: ../../releases/1.4-beta-1.txt:690
msgid ""
"Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-"
"remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and "
"``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; "
"and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-"
"icons.gif``."
msgstr ""

# 6632e2b70e5941189e7b459cd47bffb6
#: ../../releases/1.4.txt:758
msgid ""
"If you used those icons to customize the admin, then you'll need to replace "
"them with your own icons or get the files from a previous release."
msgstr ""

# f30b96cc05f74cef9f61417cccad699d
# 01a06f6179b7440eaf5eb27a19d47380
# da40a10d198d4d7f84c19b25d1d1166f
#: ../../releases/1.4.txt:762 ../../releases/1.4-alpha-1.txt:632
#: ../../releases/1.4-beta-1.txt:700
msgid "CSS class names in admin forms"
msgstr ""

# 06fc955b04064b23ad056f52e8992376
#: ../../releases/1.4.txt:764
msgid ""
"To avoid conflicts with other common CSS class names (e.g. \"button\"), we "
"added a prefix (\"field-\") to all CSS class names automatically generated "
"from the form field names in the main admin forms, stacked inline forms and "
"tabular inline cells. You'll need to take that prefix into account in your "
"custom style sheets or JavaScript files if you previously used plain field "
"names as selectors for custom styles or JavaScript transformations."
msgstr ""

# d3b38526d884480a8eaf4c19320ec000
# 7fe2be60bf754965be7f88deb38d447f
# 1c114edf66c44ceba8a668874e040b55
#: ../../releases/1.4.txt:772 ../../releases/1.4-alpha-1.txt:642
#: ../../releases/1.4-beta-1.txt:710
msgid "Compatibility with old signed data"
msgstr ""

# 49424a7d45b6471bb2c3a76c4cbadfb0
# d2f84800f2234962b379e79236b2edbe
# 53d0eaa0c37d4feabaccbe219da68684
#: ../../releases/1.4.txt:774 ../../releases/1.4-alpha-1.txt:644
#: ../../releases/1.4-beta-1.txt:712
msgid ""
"Django 1.3 changed the cryptographic signing mechanisms used in a number of "
"places in Django. While Django 1.3 kept fallbacks that would accept hashes "
"produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""

# 82bce7b3b1764912a6712884630f62f2
# c86686c843f6418d986b3731f9d0b6ba
# 7ac7d90003434cbaab45185371f520cc
#: ../../releases/1.4.txt:778 ../../releases/1.4-alpha-1.txt:648
#: ../../releases/1.4-beta-1.txt:716
msgid ""
"So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/"
"invalidate certain pieces of data that have been cryptographically signed "
"using an old method. To avoid this, use Django 1.3 first for a period of "
"time to allow the signed data to expire naturally. The affected parts are "
"detailed below, with 1) the consequences of ignoring this advice and 2) the "
"amount of time you need to run Django 1.3 for the data to expire or become "
"irrelevant."
msgstr ""

# 8bf72f2a655e48549b36c87f651f9f51
# 62831cbc8f26498ba02dae850d6abac5
# 363282e43eb94b6b87723d36735f4541
#: ../../releases/1.4.txt:785 ../../releases/1.4-alpha-1.txt:655
#: ../../releases/1.4-beta-1.txt:723
msgid "``contrib.sessions`` data integrity check"
msgstr ""

# 8c44b003691a47729cf18a884720ef1a
#: ../../releases/1.4.txt:787
msgid ""
"Consequences: The user will be logged out, and session data will be lost."
msgstr ""

# acf5e7b547aa40e7bb63ae4645837e56
#: ../../releases/1.4.txt:789
msgid "Time period: Defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# 6761f3fa6bf64b6da749df1233c7c39e
# ab0f4ec247f24ab5bdb77e2cac7b2a9a
# 455ed4dd77484b839ddd020bed0d0283
#: ../../releases/1.4.txt:791 ../../releases/1.4-alpha-1.txt:661
#: ../../releases/1.4-beta-1.txt:729
msgid "``contrib.auth`` password reset hash"
msgstr ""

# be42f71dd9af4cd8a6c8e84575772cb4
#: ../../releases/1.4.txt:793
msgid ""
"Consequences: Password reset links from before the upgrade will not work."
msgstr ""

# 58475c0f55d041f9914b9a60cbbcc321
#: ../../releases/1.4.txt:795
msgid "Time period: Defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

# b0525c0cc6874f4aba549de7e4d828ee
#: ../../releases/1.4.txt:797
msgid ""
"Form-related hashes: these have a are much shorter lifetime and are relevant "
"only for the short window where a user might fill in a form generated by the "
"pre-upgrade Django instance and try to submit it to the upgraded Django "
"instance:"
msgstr ""

# 5c37c0fafe654aa8be598b249306624b
# f0ec257b5b1f4ae1b5377099c41c5a11
# a36ae81f80be4c13a0da7f943d538001
#: ../../releases/1.4.txt:802 ../../releases/1.4-alpha-1.txt:671
#: ../../releases/1.4-beta-1.txt:739
msgid "``contrib.comments`` form security hash"
msgstr ""

# c99e13f0257d49658f302ccc8c736dc0
#: ../../releases/1.4.txt:804
msgid ""
"Consequences: The user will see the validation error \"Security hash failed."
"\""
msgstr ""

# ce0fe7e86f064c0d9137fbf1208210d9
#: ../../releases/1.4.txt:806
msgid ""
"Time period: The amount of time you expect users to take filling out comment "
"forms."
msgstr ""

# ef365d4a3eca4e00b2aacd47ddf538c4
# 734002e263264a9b9a1d3e07da817f89
# 7b7793c53d814c3e9f0c8d7a8be5b425
#: ../../releases/1.4.txt:809 ../../releases/1.4-alpha-1.txt:678
#: ../../releases/1.4-beta-1.txt:746
msgid "``FormWizard`` security hash"
msgstr ""

# f5f021a1f0994069a1dcf5a9a7438f41
#: ../../releases/1.4.txt:811
msgid ""
"Consequences: The user will see an error about the form having expired and "
"will be sent back to the first page of the wizard, losing the data he has "
"entered so far."
msgstr ""

# 092f5c9949d94c2081ac7123589b3821
#: ../../releases/1.4.txt:815
msgid ""
"Time period: The amount of time you expect users to take filling out the "
"affected forms."
msgstr ""

# ec4ee587f0454df7a473e263106b4bfb
# 37580a40613c49de9a827fe24e4980ed
# 4b31a7bdc3b94dc48d84eea431410f39
#: ../../releases/1.4.txt:818 ../../releases/1.4-alpha-1.txt:687
#: ../../releases/1.4-beta-1.txt:755
msgid "CSRF check"
msgstr ""

# 280fb49ae8a24cf49582406870888d49
#: ../../releases/1.4.txt:820
msgid ""
"Note: This is actually a Django 1.1 fallback, not Django 1.2, and it applies "
"only if you're upgrading from 1.1."
msgstr ""

# 5c66af3840564ce394b46a8c459d39f2
#: ../../releases/1.4.txt:823
msgid ""
"Consequences: The user will see a 403 error with any CSRF-protected POST "
"form."
msgstr ""

# 030caeb2f8bc471e9e21c5b15408529a
#: ../../releases/1.4.txt:826
msgid ""
"Time period: The amount of time you expect user to take filling out such "
"forms."
msgstr ""

# 2184ba604f524dd1b99bca9d4a16680b
#: ../../releases/1.4.txt:829
msgid "``contrib.auth`` user password hash-upgrade sequence"
msgstr ""

# 3d378b69928d4916b0d3597f76332548
#: ../../releases/1.4.txt:831
msgid ""
"Consequences: Each user's password will be updated to a stronger password "
"hash when it's written to the database in 1.4. This means that if you "
"upgrade to 1.4 and then need to downgrade to 1.3, version 1.3 won't be able "
"to read the updated passwords."
msgstr ""

# 52ee0c200d2b41a684f4328a74dbeb94
#: ../../releases/1.4.txt:836
msgid ""
"Remedy: Set :setting:`PASSWORD_HASHERS` to use your original password "
"hashing when you initially upgrade to 1.4. After you confirm your app works "
"well with Django 1.4 and you won't have to roll back to 1.3, enable the new "
"password hashes."
msgstr ""

# a47a90c8abec4a9ab901395cd36c0d90
# a7757287289e4b23a2dbf968fce3c396
# 576810738271423484d7d15b1e5955ac
#: ../../releases/1.4.txt:842 ../../releases/1.4-alpha-1.txt:699
#: ../../releases/1.4-beta-1.txt:767
msgid "django.contrib.flatpages"
msgstr ""

# 0f412e5f1072453faa35d489b8bcfdaa
#: ../../releases/1.4.txt:844
msgid ""
"Starting in 1.4, the :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the "
"resulting URL refers to an existing flatpage. For example, requesting ``/"
"notaflatpageoravalidurl`` in a previous version would redirect to ``/"
"notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting "
"``/notaflatpageoravalidurl`` now will immediately raise a 404."
msgstr ""

# 098c0db019b646ffaba0da7b2b896d72
#: ../../releases/1.4.txt:852
msgid ""
"Also, redirects returned by flatpages are now permanent (with 301 status "
"code), to match the behavior of :class:`~django.middleware.common."
"CommonMiddleware`."
msgstr ""

# ed5cf98175034f54b445155da84cb485
# c370a4c78ae140189b3bf75557b098ee
# 4aa76ce9bf194cc28b015cac7965ad78
#: ../../releases/1.4.txt:856 ../../releases/1.4-alpha-1.txt:712
#: ../../releases/1.4-beta-1.txt:780
msgid ""
"Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ""

# ec23736ffb0e4d5386c717e3e7ef47e4
#: ../../releases/1.4.txt:858
msgid ""
"As a consequence of time-zone support, and according to the ECMA-262 "
"specification, we made changes to the JSON serializer:"
msgstr ""

# 582bd4acbeb04bbb9d7c7d3e16c6ebf5
# 8515c00a782a4b4f8fac2a1c0ec91adb
# 5bd82aa1f7ab418b83e4e5e397918b5b
#: ../../releases/1.4.txt:861 ../../releases/1.4-alpha-1.txt:717
#: ../../releases/1.4-beta-1.txt:785
msgid ""
"It includes the time zone for aware datetime objects. It raises an exception "
"for aware time objects."
msgstr ""

# dd76880e3ee4454c844430ab8b7c2142
# 21dc2afd3bd348d6a78d2d20571f5f9e
# ed87b42abb234966b5889dd202953fd8
#: ../../releases/1.4.txt:863 ../../releases/1.4-alpha-1.txt:719
#: ../../releases/1.4-beta-1.txt:787
msgid ""
"It includes milliseconds for datetime and time objects. There is still some "
"precision loss, because Python stores microseconds (6 digits) and JSON only "
"supports milliseconds (3 digits). However, it's better than discarding "
"microseconds entirely."
msgstr ""

# c0176cbea3424453ac85911aac2417f5
#: ../../releases/1.4.txt:868
msgid ""
"We changed the XML serializer to use the ISO8601 format for datetimes. The "
"letter ``T`` is used to separate the date part from the time part, instead "
"of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

# 3ed1934b9120456685af394756e8227f
#: ../../releases/1.4.txt:872
msgid ""
"Though the serializers now use these new formats when creating fixtures, "
"they can still load fixtures that use the old format."
msgstr ""

# c9153a7d731b4fbdab1aed48607efe2b
# 2d764d9cec6742238a83f875bee75616
# 586b5c6abebf41c5a7f8b9edde0cc008
#: ../../releases/1.4.txt:876 ../../releases/1.4-alpha-1.txt:732
#: ../../releases/1.4-beta-1.txt:800
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr ""

# 90fe86940b5543b7a1e3b140b5362455
# 93b8b90730494d92954e81fc5ffc4748
# 102efaa47ddf43c1a2f76176bc98a97f
#: ../../releases/1.4.txt:878 ../../releases/1.4-alpha-1.txt:734
#: ../../releases/1.4-beta-1.txt:802
msgid ""
"The database feature ``supports_timezone`` used to be ``True`` for SQLite. "
"Indeed, if you saved an aware datetime object, SQLite stored a string that "
"included an UTC offset. However, this offset was ignored when loading the "
"value back from the database, which could corrupt the data."
msgstr ""

# e08f8114078b4ac6af763bf5f6e2fa51
#: ../../releases/1.4.txt:883
msgid ""
"In the context of time-zone support, this flag was changed to ``False``, and "
"datetimes are now stored without time-zone information in SQLite. When :"
"setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime "
"object, Django raises an exception."
msgstr ""

# a0616e0d27d648d98743a594ac6f6612
#: ../../releases/1.4.txt:889
msgid "``MySQLdb``-specific exceptions"
msgstr ""

# 0da805d779344c44a9c5d1d774c5bc46
#: ../../releases/1.4.txt:891
msgid ""
"The MySQL backend historically has raised ``MySQLdb.OperationalError`` when "
"a query triggered an exception. We've fixed this bug, and we now raise :exc:"
"`django.db.DatabaseError` instead. If you were testing for ``MySQLdb."
"OperationalError``, you'll need to update your ``except`` clauses."
msgstr ""

# d483106dcfcb4bfa9420248f857d05c9
# e22aea1d40424f119ee4baf306482850
# ed178fc59a6d4339b256cf420dec65e0
#: ../../releases/1.4.txt:898 ../../releases/1.4-alpha-1.txt:745
#: ../../releases/1.4-beta-1.txt:813
msgid "Database connection's thread-locality"
msgstr ""

# 38158c31e7dc4450bfe2d518a21db33b
# f48a2dfa0d0345de958ae7a8dbe1a5cc
# 3823500908d746ec9570f135d08e6058
#: ../../releases/1.4.txt:900 ../../releases/1.4-alpha-1.txt:747
#: ../../releases/1.4-beta-1.txt:815
msgid ""
"``DatabaseWrapper`` objects (i.e. the connection objects referenced by "
"``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used "
"to be thread-local. They are now global objects in order to be potentially "
"shared between multiple threads. While the individual connection objects are "
"now global, the ``django.db.connections`` dictionary referencing those "
"objects is still thread-local. Therefore if you just use the ORM or "
"``DatabaseWrapper.cursor()`` then the behavior is still the same as before. "
"Note, however, that ``django.db.connection`` does not directly reference the "
"default ``DatabaseWrapper`` object anymore and is now a proxy to access that "
"object's attributes. If you need to access the actual ``DatabaseWrapper`` "
"object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` instead."
msgstr ""

# 3e11134f24a447138574832d5f140cdf
# e5343b36ef45425cb32bfc7f298a5328
# df138bbebaeb4d519a9014a8f6254046
#: ../../releases/1.4.txt:912 ../../releases/1.4-alpha-1.txt:759
#: ../../releases/1.4-beta-1.txt:827
msgid ""
"As part of this change, all underlying SQLite connections are now enabled "
"for potential thread-sharing (by passing the ``check_same_thread=False`` "
"attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous "
"behavior by disabling thread-sharing by default, so this does not affect any "
"existing code that purely relies on the ORM or on ``DatabaseWrapper."
"cursor()``."
msgstr ""

# 5e25f8d2690244159e3e6fa7d81edb93
#: ../../releases/1.4.txt:918
msgid ""
"Finally, while it's now possible to pass connections between threads, Django "
"doesn't make any effort to synchronize access to the underlying backend. "
"Concurrency behavior is defined by the underlying backend implementation. "
"Check their documentation for details."
msgstr ""

# 1413ec918a4e4ac3ba4ea21e5bbc42ef
# 01507a10e5b0409e8559dedee83cd9a5
# 3efc821031784b0aaf5bb6d30893e86e
#: ../../releases/1.4.txt:924 ../../releases/1.4-alpha-1.txt:771
#: ../../releases/1.4-beta-1.txt:839
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr ""

# 2a403a1529604a75b6997af1d3d91a19
# 449e7b3948bd4a1f8ae0d6f9a93a16ad
# ea171f0ce54a40deb830af76440f5410
#: ../../releases/1.4.txt:926 ../../releases/1.4-alpha-1.txt:773
#: ../../releases/1.4-beta-1.txt:841
msgid ""
"Django's :doc:`comments app </ref/contrib/comments/index>` has historically "
"supported excluding the comments of a special user group, but we've never "
"documented the feature properly and didn't enforce the exclusion in other "
"parts of the app such as the template tags. To fix this problem, we removed "
"the code from the feed class."
msgstr ""

# 8611d1e4ff514db89ab399ea18adb047
#: ../../releases/1.4.txt:932
msgid ""
"If you rely on the feature and want to restore the old behavior, use a "
"custom comment model manager to exclude the user group, like this::"
msgstr ""

# 0e4bb7f1d8e44dd6848d3618935af323
#: ../../releases/1.4.txt:947
msgid ""
"Save this model manager in your custom comment app (e.g., in "
"``my_comments_app/managers.py``) and add it your :ref:`custom comment app "
"model <custom-comment-app-api>`::"
msgstr ""

# 38041d8be3bc433a88dd7b2f33c67667
# d655ce19c63c4cde979bf216ced645c9
# 8382ad950a62486eb5a8c40c2644968e
#: ../../releases/1.4.txt:961 ../../releases/1.4-alpha-1.txt:808
#: ../../releases/1.4-beta-1.txt:876
msgid ""
"For more details, see the documentation about :doc:`customizing the comments "
"framework </ref/contrib/comments/custom>`."
msgstr ""

# e87d6365dfe845a18846bc0f536738a0
# a7e3bd427c0d40f1a5e02564c20cc0a4
# 24af35eb88024a88bc87a0ac9ec91855
#: ../../releases/1.4.txt:965 ../../releases/1.4-alpha-1.txt:812
#: ../../releases/1.4-beta-1.txt:880
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr ""

# 47709a878cdf4a2e8c016eb6cccb014e
# 7f619a66662e4304817a0a7c0b35f2e0
# 412acdcb924d41168d983510adab7f53
#: ../../releases/1.4.txt:967 ../../releases/1.4-alpha-1.txt:814
#: ../../releases/1.4-beta-1.txt:882
msgid ""
"Until Django 1.3, it was possible to exclude some URLs from Django's :doc:"
"`404 error reporting</howto/error-reporting>` by adding prefixes to :setting:"
"`IGNORABLE_404_STARTS` and suffixes to :setting:`IGNORABLE_404_ENDS`."
msgstr ""

# 214ae253daae4cb48dc65492f6fde7d2
# be04bf2259d14446a4205c20deb86ad0
# 3a2fbcc0555f46c3b9fc8d58e33b0aeb
#: ../../releases/1.4.txt:971 ../../releases/1.4-alpha-1.txt:818
#: ../../releases/1.4-beta-1.txt:886
msgid ""
"In Django 1.4, these two settings are superseded by :setting:"
"`IGNORABLE_404_URLS`, which is a list of compiled regular expressions. "
"Django won't send an email for 404 errors on URLs that match any of them."
msgstr ""

# 242f566c664d4f209724f213311c37f7
# b0c2903d68f74ceb8231c867be937bc0
# d0c05802808240a09f686385733cf49a
#: ../../releases/1.4.txt:975 ../../releases/1.4-alpha-1.txt:822
#: ../../releases/1.4-beta-1.txt:890
msgid ""
"Furthermore, the previous settings had some rather arbitrary default values::"
msgstr ""

# 53617b10cb414bee8013a469cf8cedb7
# 6c22857374594f758249b11ff25996f7
# bd564f39074e418fa8e890b3a32f2727
#: ../../releases/1.4.txt:981 ../../releases/1.4-alpha-1.txt:828
#: ../../releases/1.4-beta-1.txt:896
msgid ""
"It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` "
"section or a ``favicon.ico``. As a consequence, the default values of :"
"setting:`IGNORABLE_404_URLS`, :setting:`IGNORABLE_404_STARTS` and :setting:"
"`IGNORABLE_404_ENDS` are all now empty."
msgstr ""

# ce25aa55ea8244c48d54b6d6eb0768b4
# 142946f91deb40058e9091083089b55d
# 3f7bcc3f690f4947a56dc4e029c08b3a
#: ../../releases/1.4.txt:986 ../../releases/1.4-alpha-1.txt:833
#: ../../releases/1.4-beta-1.txt:901
msgid ""
"If you have customized :setting:`IGNORABLE_404_STARTS` or :setting:"
"`IGNORABLE_404_ENDS`, or if you want to keep the old default value, you "
"should add the following lines in your settings file::"
msgstr ""

# 91816ae8e3644f98bd34ad4d0a62bdc5
#: ../../releases/1.4.txt:998
msgid ""
"Don't forget to escape characters that have a special meaning in a regular "
"expression, such as periods."
msgstr ""

# abf0ab0467af446c9617605f4464dc08
# fb7e3884f29e4ec78d284dcfe6f2e80b
# 7d7cd19ac8814a04ae0e1594e44c936f
#: ../../releases/1.4.txt:1002 ../../releases/1.4-alpha-1.txt:849
#: ../../releases/1.4-beta-1.txt:917
msgid "CSRF protection extended to PUT and DELETE"
msgstr ""

# c3079f1367d646fa9ea95803ae44ac02
#: ../../releases/1.4.txt:1004
msgid ""
"Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided "
"protection only against POST requests. Since use of PUT and DELETE methods "
"in AJAX applications is becoming more common, we now protect all methods not "
"defined as safe by :rfc:`2616` -- i.e., we exempt GET, HEAD, OPTIONS and "
"TRACE, and we enforce protection on everything else."
msgstr ""

# bc1f1bce51ce4e248d266c1ac8a80963
#: ../../releases/1.4.txt:1010
msgid ""
"If you're using PUT or DELETE methods in AJAX applications, please see the :"
"ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

# cdc4e850ba304fe2aa6b838a761b106a
#: ../../releases/1.4.txt:1014
msgid "Password reset view now accepts ``subject_template_name``"
msgstr ""

# de76e5c914434c1ab416ddce97b54101
#: ../../releases/1.4.txt:1016
msgid ""
"The ``password_reset`` view in ``django.contrib.auth`` now accepts a "
"``subject_template_name`` parameter, which is passed to the password save "
"form as a keyword argument. If you are using this view with a custom "
"password reset form, then you will need to ensure your form's ``save()`` "
"method accepts this keyword argument."
msgstr ""

# 51e4736e1ed9409bb544e2422476e622
# 09a911264d1e41f4b09805cf7b8a5393
# a9dd82a41eae42d6b8ce68ee9c780d65
#: ../../releases/1.4.txt:1023 ../../releases/1.4-alpha-1.txt:861
#: ../../releases/1.4-beta-1.txt:929
msgid "``django.core.template_loaders``"
msgstr ""

# 01edca6cb3f849eb91a11d4e6abe1629
#: ../../releases/1.4.txt:1025
msgid ""
"This was an alias to ``django.template.loader`` since 2005, and we've "
"removed it without emitting a warning due to the length of the deprecation. "
"If your code still referenced this, please use ``django.template.loader`` "
"instead."
msgstr ""

# 9caaebb3da144d68a29638d1f3c84abb
# 0ae318b06c2345f49c34372e4759dec0
# 2608ee86211547d0a874e0ffe80866f0
#: ../../releases/1.4.txt:1030 ../../releases/1.4-alpha-1.txt:868
#: ../../releases/1.4-beta-1.txt:936
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr ""

# e7ca97eb2db34b79a74d939257dfefd1
# 2587e5a9a3ce4b2ab58580333a31d4aa
# 684a014278b941f3aae5b5d19a77eda0
#: ../../releases/1.4.txt:1032 ../../releases/1.4-alpha-1.txt:870
#: ../../releases/1.4-beta-1.txt:938
msgid ""
"This functionality has been removed due to intractable performance and "
"security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""

# 7d08c76079664d1f9246907a246f55ab
# 397ed4a4518c438fbacc8e524e1ce683
# 37d45fd11882419a920a966eb7e58ae4
#: ../../releases/1.4.txt:1037 ../../releases/1.4-alpha-1.txt:875
#: ../../releases/1.4-beta-1.txt:943
msgid "``django.core.files.storage.Storage.open``"
msgstr ""

# e333c015f2ea4504938e691c1d3e2f02
#: ../../releases/1.4.txt:1039
msgid ""
"The ``open`` method of the base Storage class used to take an obscure "
"parameter ``mixin`` that allowed you to dynamically change the base classes "
"of the returned file object. This has been removed. In the rare case you "
"relied on the ``mixin`` parameter, you can easily achieve the same by "
"overriding the ``open`` method, like this::"
msgstr ""

# 066d5b9566b041fc8d9e468684786f4d
# ebfc33c9ba7645708b210751c399c935
# 2ad50849f7d74295a1024fbcb9fc94b9
#: ../../releases/1.4.txt:1063 ../../releases/1.4-alpha-1.txt:901
#: ../../releases/1.4-beta-1.txt:969
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr ""

# 6aee2d51df9948f1b4bffa86109be708
#: ../../releases/1.4.txt:1065
msgid ""
"``yaml.load`` is able to construct any Python object, which may trigger "
"arbitrary code execution if you process a YAML document that comes from an "
"untrusted source. This feature isn't necessary for Django's YAML "
"deserializer, whose primary use is to load fixtures consisting of simple "
"objects. Even though fixtures are trusted data, the YAML deserializer now "
"uses ``yaml.safe_load`` for additional security."
msgstr ""

# 7729305228fc4e268c631f7daea930cd
# 7e096defdb6d47c9bb292f92f31f6a55
# 13fa5ef50f604f29a945ec4e5b624982
#: ../../releases/1.4.txt:1073 ../../releases/1.4-alpha-1.txt:1044
#: ../../releases/1.4-beta-1.txt:1112
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr ""

# b90bb988737340aa932848008ae70445
#: ../../releases/1.4.txt:1075
msgid ""
"Session cookies now include the ``httponly`` attribute by default to help "
"reduce the impact of potential XSS attacks. As a consequence of this change, "
"session cookie data, including sessionid, is no longer accessible from "
"JavaScript in many browsers. For strict backwards compatibility, use "
"``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

# 675c36196ec9427fbf93851e6b514c35
#: ../../releases/1.4.txt:1083
msgid "The :tfilter:`urlize` filter no longer escapes every URL"
msgstr ""

# 088fe37562ba49d4a2159f1c539b7c3b
#: ../../releases/1.4.txt:1085
msgid ""
"When a URL contains a ``%xx`` sequence, where ``xx`` are two hexadecimal "
"digits, :tfilter:`urlize` now assumes that the URL is already escaped and "
"doesn't apply URL escaping again. This is wrong for URLs whose unquoted form "
"contains a ``%xx`` sequence, but such URLs are very unlikely to happen in "
"the wild, because they would confuse browsers too."
msgstr ""

# 2c99246cd8c945b5a6577272b62388d3
#: ../../releases/1.4.txt:1092
msgid "``assertTemplateUsed`` and ``assertTemplateNotUsed`` as context manager"
msgstr ""

# 1f50713ab5394426b6d3c1e19bf3ed17
#: ../../releases/1.4.txt:1094
msgid ""
"It's now possible to check whether a template was used within a block of "
"code with :meth:`~django.test.TestCase.assertTemplateUsed` and :meth:"
"`~django.test.TestCase.assertTemplateNotUsed`. And they can be used as a "
"context manager::"
msgstr ""

# ba9dae362b674489b7a05eb92c9970cd
#: ../../releases/1.4.txt:1104
msgid "See the :ref:`assertion documentation<assertions>` for more."
msgstr ""

# a1ad8d8f72744b348b21c7c79b404631
#: ../../releases/1.4.txt:1107
msgid "Database connections after running the test suite"
msgstr ""

# f591f95cab3b451b9813d06c4f514f7d
#: ../../releases/1.4.txt:1109
msgid ""
"The default test runner no longer restores the database connections after "
"tests' execution. This prevents the production database from being exposed "
"to potential threads that would still be running and attempting to create "
"new connections."
msgstr ""

# 097987b56c7b43aa903b3408984886dd
#: ../../releases/1.4.txt:1114
msgid ""
"If your code relied on connections to the production database being created "
"after tests' execution, then you can restore the previous behavior by "
"subclassing ``DjangoTestRunner`` and overriding its ``teardown_databases()`` "
"method."
msgstr ""

# b240a7fa289d413e9ad56866ca33c267
#: ../../releases/1.4.txt:1120
msgid "Output of :djadmin:`manage.py help <help>`"
msgstr ""

# 022fa2597af9444dba836a49fa6b873a
#: ../../releases/1.4.txt:1122
msgid ""
":djadmin:`manage.py help <help>` now groups available commands by "
"application. If you depended on the output of this command -- if you parsed "
"it, for example -- then you'll need to update your code. To get a list of "
"all available management commands in a script, use :djadmin:`manage.py help "
"--commands <help>` instead."
msgstr ""

# 40d9e5eb2f444a5fb20586b3957ec610
#: ../../releases/1.4.txt:1129
msgid "``extends`` template tag"
msgstr ""

# 5838671f4a7f4da38f88d746b6c7d905
#: ../../releases/1.4.txt:1131
msgid ""
"Previously, the :ttag:`extends` tag used a buggy method of parsing "
"arguments, which could lead to it erroneously considering an argument as a "
"string literal when it wasn't. It now uses ``parser.compile_filter``, like "
"other tags."
msgstr ""

# ef2d45df2f7140a98f051a77dd47b344
#: ../../releases/1.4.txt:1135
msgid ""
"The internals of the tag aren't part of the official stable API, but in the "
"interests of full disclosure, the ``ExtendsNode.__init__`` definition has "
"changed, which may break any custom tags that use this class."
msgstr ""

# 034652fbb4fd4661b45fbbdd69a86c7a
#: ../../releases/1.4.txt:1140
msgid "Loading some incomplete fixtures no longer works"
msgstr ""

# 35d22bde9c934d46a93a4cb32e6b050c
#: ../../releases/1.4.txt:1142
msgid ""
"Prior to 1.4, a default value was inserted for fixture objects that were "
"missing a specific date or datetime value when auto_now or auto_now_add was "
"set for the field. This was something that should not have worked, and in "
"1.4 loading such incomplete fixtures will fail. Because fixtures are a raw "
"import, they should explicitly specify all field values, regardless of field "
"options on the model."
msgstr ""

# 8da4baf374024554b2f92eedee3cd1b9
#: ../../releases/1.4.txt:1149
msgid "Development Server Multithreading"
msgstr ""

# a452bbc128ad4923a7d5d9e23950ca14
#: ../../releases/1.4.txt:1151
msgid ""
"The development server is now is multithreaded by default. Use the :"
"djadminopt:`--nothreading` option to disable the use of threading in the "
"development server::"
msgstr ""

# 4402016c15fd499e86bbb1470ac1c667
#: ../../releases/1.4.txt:1158
msgid "Attributes disabled in markdown when safe mode set"
msgstr ""

# da95f893c36749a58221bbc16549ddce
#: ../../releases/1.4.txt:1160
msgid ""
"Prior to Django 1.4, attributes were included in any markdown output "
"regardless of safe mode setting of the filter. With version > 2.1 of the "
"Python-Markdown library, an enable_attributes option was added. When the "
"safe argument is passed to the markdown filter, both the ``safe_mode=True`` "
"and ``enable_attributes=False`` options are set. If using a version of the "
"Python-Markdown library less than 2.1, a warning is issued that the output "
"is insecure."
msgstr ""

# 606571ff486e48e8a62b551220f89e50
#: ../../releases/1.4.txt:1169
msgid "FormMixin get_initial returns an instance-specific dictionary"
msgstr ""

# 1b194a2ae6cf4ea8ba7087ac41a8b0c6
#: ../../releases/1.4.txt:1171
msgid ""
"In Django 1.3, the ``get_initial`` method of the :class:`django.views."
"generic.edit.FormMixin` class was returning the class ``initial`` "
"dictionary. This has been fixed to return a copy of this dictionary, so form "
"instances can modify their initial data without messing with the class "
"variable."
msgstr ""

# 2a24e15bcc8d4292859c32c0c238c63e
# bc6dffc040434c15b0759be3c0687803
# ccc50d8d1d854bed970a79e431b672e0
#: ../../releases/1.4.txt:1178 ../../releases/1.4-alpha-1.txt:911
#: ../../releases/1.4-beta-1.txt:979
msgid "Features deprecated in 1.4"
msgstr ""

# 9822026a6da64305aded435b32a81165
# 204498f7f7a74ab5ae02f1ea631a93b8
# 3e9f8e23ca2b45fab1a53529f6001f37
#: ../../releases/1.4.txt:1181 ../../releases/1.4-alpha-1.txt:914
#: ../../releases/1.4-beta-1.txt:982
msgid "Old styles of calling ``cache_page`` decorator"
msgstr ""

# e2fef22566984d0bac478451af5b253e
#: ../../releases/1.4.txt:1183
msgid ""
"Some legacy ways of calling :func:`~django.views.decorators.cache."
"cache_page` have been deprecated. Please see the documentation for the "
"correct way to use this decorator."
msgstr ""

# 94dcdf7a02184e2cbc9f743571ba3423
# 5480a04d7518497e91f2a73ffe6e48d1
# d59b7e1a68154b29ba5805414f232082
#: ../../releases/1.4.txt:1188 ../../releases/1.4-alpha-1.txt:921
#: ../../releases/1.4-beta-1.txt:989
msgid "Support for PostgreSQL versions older than 8.2"
msgstr ""

# 9cbad8e46e234577b0ad30f950e56449
#: ../../releases/1.4.txt:1190
msgid ""
"Django 1.3 dropped support for PostgreSQL versions older than 8.0, and we "
"suggested using a more recent version because of performance improvements "
"and, more importantly, the end of upstream support periods for 8.0 and 8.1 "
"was near (November 2010)."
msgstr ""

# adb66076e1ab4aacb57f6b281a4979fa
# 49b9847358d7462f81860961045dd057
# edbd7ac3faac4191b01c87c378795623
#: ../../releases/1.4.txt:1195 ../../releases/1.4-alpha-1.txt:928
#: ../../releases/1.4-beta-1.txt:996
msgid ""
"Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL "
"version it officially supports."
msgstr ""

# 4bcda214a6ec46728acb46a86c294ba7
# 39e36bb54d534a60b424e1fcf47ce205
# f9015bf3da07409c82410be25605d5fa
#: ../../releases/1.4.txt:1199 ../../releases/1.4-alpha-1.txt:932
#: ../../releases/1.4-beta-1.txt:1000
msgid "Request exceptions are now always logged"
msgstr ""

# 0ca8e1e292764aeba8739e8caf93c1ad
#: ../../releases/1.4.txt:1201
msgid ""
"When we added :doc:`logging support </topics/logging/>` in Django in 1.3, "
"the admin error email support was moved into the :class:`django.utils.log."
"AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to "
"maintain the established behavior of error emails, the ``'django.request'`` "
"logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

# 741bfab3d3a945a6b26a9be5f4801149
# 0903367460744f5aa39f15c1dfdb6e20
# d2f8e2d471f8403987086462dcd52d7c
#: ../../releases/1.4.txt:1208 ../../releases/1.4-alpha-1.txt:941
#: ../../releases/1.4-beta-1.txt:1009
msgid ""
"To increase the flexibility of error logging for requests, the ``'django."
"request'`` logger is now called regardless of the value of :setting:`DEBUG`, "
"and the default settings file for new projects now includes a separate "
"filter attached to :class:`django.utils.log.AdminEmailHandler` to prevent "
"admin error emails in ``DEBUG`` mode::"
msgstr ""

# ccfb7eb5c8384b0a96a49033fc581d6a
#: ../../releases/1.4.txt:1227
msgid ""
"If your project was created prior to this change, your :setting:`LOGGING` "
"setting will not include this new filter. In order to maintain backwards-"
"compatibility, Django will detect that your ``'mail_admins'`` handler "
"configuration includes no ``'filters'`` section and will automatically add "
"this filter for you and issue a pending-deprecation warning. This will "
"become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-"
"compatibility shim will be removed entirely."
msgstr ""

# ccd40f6b25934850ae60ccb991103adf
# 3ea5f7169d17422596814521d6019081
# 73504d5d29784767b864a3ddd6c2cb69
#: ../../releases/1.4.txt:1235 ../../releases/1.4-alpha-1.txt:968
#: ../../releases/1.4-beta-1.txt:1036
msgid ""
"The existence of any ``'filters'`` key under the ``'mail_admins'`` handler "
"will disable this backward-compatibility shim and deprecation warning."
msgstr ""

# 21bb911f6ba5424ebd0e7bf2d1bb224a
# 011a2456b3464ffc94e0045f8047a018
# d6dd9110c8674f68aa8cf205ad8aab38
#: ../../releases/1.4.txt:1239 ../../releases/1.4-alpha-1.txt:972
#: ../../releases/1.4-beta-1.txt:1040
msgid "``django.conf.urls.defaults``"
msgstr ""

# af91c7305f764e0699800ca8997ac937
#: ../../releases/1.4.txt:1241
msgid ""
"Until Django 1.3, the functions :func:`~django.conf.urls.include`, :func:"
"`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:"
"`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were "
"located in a ``django.conf.urls.defaults`` module."
msgstr ""

# b79e3905201442b6a7d93c8f0518e32c
#: ../../releases/1.4.txt:1246
msgid "In Django 1.4, they live in :mod:`django.conf.urls`."
msgstr ""

# b16b90f710a24ca88ee3a0be1d5b61cc
# 75f9918aab7247bd8189707f312de4cb
# 5d146c88c6ed46979c74dc0ddcf41c43
#: ../../releases/1.4.txt:1249 ../../releases/1.4-alpha-1.txt:982
#: ../../releases/1.4-beta-1.txt:1050
msgid "``django.contrib.databrowse``"
msgstr ""

# be4bad41faf14c039c58969fe65eadbe
# 6fd49e07b35f44c6995d53142e0ce6b5
# 6a0eea7246b9439883d6e42107483b52
#: ../../releases/1.4.txt:1251 ../../releases/1.4-alpha-1.txt:984
#: ../../releases/1.4-beta-1.txt:1052
msgid ""
"Databrowse has not seen active development for some time, and this does not "
"show any sign of changing. There had been a suggestion for a `GSOC project`_ "
"to integrate the functionality of databrowse into the admin, but no progress "
"was made. While Databrowse has been deprecated, an enhancement of ``django."
"contrib.admin`` providing a similar feature set is still possible."
msgstr ""

# b3bf7361110e4d1db64def4dcf736d1b
#: ../../releases/1.4.txt:1259
msgid ""
"The code that powers Databrowse is licensed under the same terms as Django "
"itself, so it's available to be adopted by an individual or group as a third-"
"party project."
msgstr ""

# 364c86e6a8df485ca3856eb1a8f33a41
# 03be5543ca4345158144ee25b5b8a63c
# 7315d9acdb5845808b817a0b72263163
#: ../../releases/1.4.txt:1264 ../../releases/1.4-alpha-1.txt:997
#: ../../releases/1.4-beta-1.txt:1065
msgid "``django.core.management.setup_environ``"
msgstr ""

# 42933bf135944347bdd7d4fb328eea0d
# 1c749b0cc5ee4315a733b52384de5dc2
# d9d71524b46c4a62bf50b1ef2b0b3e95
#: ../../releases/1.4.txt:1266 ../../releases/1.4-alpha-1.txt:999
#: ../../releases/1.4-beta-1.txt:1067
msgid ""
"This function temporarily modified ``sys.path`` in order to make the parent "
"\"project\" directory importable under the old flat :djadmin:`startproject` "
"layout. This function is now deprecated, as its path workarounds are no "
"longer needed with the new ``manage.py`` and default project layout."
msgstr ""

# 6f18cdb32524441eb23ff2c10869b3a8
#: ../../releases/1.4.txt:1271
msgid ""
"This function was never documented or part of the public API, but it was "
"widely recommended for use in setting up a \"Django environment\" for a user "
"script. These uses should be replaced by setting the "
"``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf."
"settings.configure`."
msgstr ""

# b285027534b6441d929e50e20905e677
# 019d69840b884415bdc3c81cdd2c5b11
# a15b35c633234b7f8f6372f75d19f8d8
#: ../../releases/1.4.txt:1277 ../../releases/1.4-alpha-1.txt:1010
#: ../../releases/1.4-beta-1.txt:1078
msgid "``django.core.management.execute_manager``"
msgstr ""

# ef5919b0a12d4718a35f6002b412ec2b
# 5702c52965204ec7a3d0b15fd1820b02
# e9eb667dd876495a84f0e962ff441a9c
#: ../../releases/1.4.txt:1279 ../../releases/1.4-alpha-1.txt:1012
#: ../../releases/1.4-beta-1.txt:1080
msgid ""
"This function was previously used by ``manage.py`` to execute a management "
"command. It is identical to ``django.core.management."
"execute_from_command_line``, except that it first calls ``setup_environ``, "
"which is now deprecated. As such, ``execute_manager`` is also deprecated; "
"``execute_from_command_line`` can be used instead. Neither of these "
"functions is documented as part of the public API, but a deprecation path is "
"needed due to use in existing ``manage.py`` files."
msgstr ""

# 89c120fe40c04eb088932072d981179c
# e1b67fcb8f69469d8a43f1170a1ff74e
# bfff0b118bcc4d02a27a6e77ad9baf7a
#: ../../releases/1.4.txt:1288 ../../releases/1.4-alpha-1.txt:1021
#: ../../releases/1.4-beta-1.txt:1089
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr ""

# d6b1eedf4b8e40b3b218cc723f599556
# b776c2c8f4e1470fa8c38814e7b82471
# edae4c0a7dbf4db6bcc0e3360d75708b
#: ../../releases/1.4.txt:1290 ../../releases/1.4-alpha-1.txt:1023
#: ../../releases/1.4-beta-1.txt:1091
msgid ""
"Two flags, ``is_safe`` and ``needs_autoescape``, define how each template "
"filter interacts with Django's auto-escaping behavior. They used to be "
"attributes of the filter function::"
msgstr ""

# 6a0da0f4ef6340bdadfbc8436cb7ae0b
# a481bbfdd7ea45948d061081786c798d
# 633703a09f3044aba9ef595ef8856313
#: ../../releases/1.4.txt:1299 ../../releases/1.4-alpha-1.txt:1032
#: ../../releases/1.4-beta-1.txt:1100
msgid ""
"However, this technique caused some problems in combination with decorators, "
"especially :func:`@stringfilter <django.template.defaultfilters."
"stringfilter>`. Now, the flags are keyword arguments of :meth:`@register."
"filter <django.template.Library.filter>`::"
msgstr ""

# a22f9cfcec8e48e4b3081bc4e9f20379
# bdbff181147442d69958b5d48fff9ef1
# 513f948fb8244534a53566a3a2caf77e
#: ../../releases/1.4.txt:1308 ../../releases/1.4-alpha-1.txt:1041
#: ../../releases/1.4-beta-1.txt:1109
msgid ""
"See :ref:`filters and auto-escaping <filters-auto-escaping>` for more "
"information."
msgstr ""

# 8ff6ed15cb394c0f870878fcde8d3439
# f48b1bd799754d34a9df93a5408c0bdc
# 3b3ef1c2681f41378e900bd30db0532b
#: ../../releases/1.4.txt:1311 ../../releases/1.4-alpha-1.txt:1051
#: ../../releases/1.4-beta-1.txt:1122
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr ""

# 235803d1c69c4a4687f6cd5ee466d5b2
# 3a86d12db71f46549884588321639c0b
# e1b5d77c65f04baf87574f75a418cdeb
#: ../../releases/1.4.txt:1313 ../../releases/1.4-alpha-1.txt:1053
#: ../../releases/1.4-beta-1.txt:1124
msgid ""
"Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in "
"application names, like ``django.contrib.*``. The expansion was performed by "
"a filesystem-based implementation of ``from <package> import *``. "
"Unfortunately, `this can't be done reliably`_."
msgstr ""

# 1ddd9d7260b743518e4b8af02ba7fbdd
# 25c2d10fa2ca4721adf4e74c72433c02
# 6fc7a7a38a854b3ab52d6ecf3449d74b
#: ../../releases/1.4.txt:1318 ../../releases/1.4-alpha-1.txt:1058
#: ../../releases/1.4-beta-1.txt:1129
msgid ""
"This behavior was never documented. Since it is un-pythonic and not "
"obviously useful, it was removed in Django 1.4. If you relied on it, you "
"must edit your settings file to list all your applications explicitly."
msgstr ""

# 9253c305f92c4aa88c31d3eaf046e140
# 1f7dab5618444e559fc36bbba5f4e31b
# ac7e73fe83f543a5892f47b02ab21c06
#: ../../releases/1.4.txt:1325 ../../releases/1.4-alpha-1.txt:1065
#: ../../releases/1.4-beta-1.txt:1136
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr ""

# 65051cb9c8a7437498f9a6effa00d4fd
# de3e6de55ad848f09923789c1a8ded7f
# c8f5ec19aa3941989ea4ddb1e88cbbe0
#: ../../releases/1.4.txt:1327 ../../releases/1.4-alpha-1.txt:1067
#: ../../releases/1.4-beta-1.txt:1138
msgid ""
"This attribute was confusingly named ``HttpRequest.raw_post_data``, but it "
"actually provided the body of the HTTP request. It's been renamed to "
"``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""

# 6705e2006ec04df2b6b11b4346778abd
#: ../../releases/1.4.txt:1332
msgid ""
"``django.contrib.sitemaps`` bug fix with potential performance implications"
msgstr ""

# 448a705570a046df8a216c43cacc9d85
#: ../../releases/1.4.txt:1334
msgid ""
"In previous versions, ``Paginator`` objects used in sitemap classes were "
"cached, which could result in stale site maps. We've removed the caching, so "
"each request to a site map now creates a new Paginator object and calls the :"
"attr:`~django.contrib.sitemaps.Sitemap.items()` method of the :class:"
"`~django.contrib.sitemaps.Sitemap` subclass. Depending on what your "
"``items()`` method is doing, this may have a negative performance impact. To "
"mitigate the performance impact, consider using the :doc:`caching framework "
"</topics/cache>` within your ``Sitemap`` subclass."
msgstr ""

# e093f45160584b7eaf457b5a5ea9f4e5
#: ../../releases/1.4.txt:1344
msgid "Versions of Python-Markdown earlier than 2.1"
msgstr ""

# 5834ffa24c7543dc93b25d8501d490ab
#: ../../releases/1.4.txt:1346
msgid ""
"Versions of Python-Markdown earlier than 2.1 do not support the option to "
"disable attributes. As a security issue, earlier versions of this library "
"will not be supported by the markup contrib app in 1.5 under an accelerated "
"deprecation timeline."
msgstr ""

# f7a564ef4cc44b60b74b705120f4990f
#: ../../releases/1.4-alpha-1.txt:3
msgid "Django 1.4 alpha release notes"
msgstr ""

# 20274a9c8bbf44e28cf45d451da279a3
#: ../../releases/1.4-alpha-1.txt:5
msgid "December 22, 2011."
msgstr ""

# ff7237b5d6314a8cb5cba6badea17df6
#: ../../releases/1.4-alpha-1.txt:7
msgid "Welcome to Django 1.4 alpha!"
msgstr ""

# 11af0d5f60f84bec97557d1f3fc70752
#: ../../releases/1.4-alpha-1.txt:9
msgid ""
"This is the first in a series of preview/development releases leading up to "
"the eventual release of Django 1.4, scheduled for March 2012. This release "
"is primarily targeted at developers who are interested in trying out new "
"features and testing the Django codebase to help identify and resolve bugs "
"prior to the final 1.4 release."
msgstr ""

# 701650f126f942d9a80366933789cb70
#: ../../releases/1.4-alpha-1.txt:18
msgid ""
"Django 1.4 alpha includes various `new features`_ and some minor `backwards "
"incompatible changes`_. There are also some features that have been dropped, "
"which are detailed in :doc:`our deprecation plan </internals/deprecation>`, "
"and we've `begun the deprecation process for some features`_."
msgstr ""

# 9290f809963843c79458d0868805d363
# f6663c1843f8480990c44e0cc0203978
#: ../../releases/1.4-alpha-1.txt:30 ../../releases/1.4-beta-1.txt:46
msgid ""
"While not a new feature, it's important to note that Django 1.4 introduces "
"the second shift in our Python compatibility policy since Django's initial "
"public debut. Django 1.2 dropped support for Python 2.3; now Django 1.4 "
"drops support for Python 2.4. As such, the minimum Python version required "
"for Django is now 2.5, and Django is tested and supported on Python 2.5, 2.6 "
"and 2.7."
msgstr ""

# 1bd4d40216ee48e99d1568eed85bcf03
# fdbad13414ff4dc88820e72f4e61005b
#: ../../releases/1.4-alpha-1.txt:36 ../../releases/1.4-beta-1.txt:52
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.5 or newer as their "
"default version. If you're still using Python 2.4, however, you'll need to "
"stick to Django 1.3 until you can upgrade; per :doc:`our support policy </"
"internals/release-process>`, Django 1.3 will continue to receive security "
"support until the release of Django 1.5."
msgstr ""

# dd133326079b489692929c3f6e4da8fc
# 075ea9fe4b8a4b388241b58b9ff9f3b7
#: ../../releases/1.4-alpha-1.txt:43 ../../releases/1.4-beta-1.txt:59
msgid ""
"Django does not support Python 3.x at this time. A document outlining our "
"full timeline for deprecating Python 2.x and moving to Python 3.x will be "
"published before the release of Django 1.4."
msgstr ""

# 719eda254d084323beabf7690d29b692
# 926a387dfdd8405697c640f060035300
#: ../../releases/1.4-alpha-1.txt:65 ../../releases/1.4-beta-1.txt:81
msgid ""
"Django 1.4 now includes a :meth:`QuerySet.select_for_update() <django.db."
"models.query.QuerySet.select_for_update>` method which generates a "
"``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of "
"the transaction, meaning that other transactions cannot modify or delete "
"rows matched by a ``FOR UPDATE`` query."
msgstr ""

# 32d299f8c45b406297ddfb7a5b7d2643
# 776014613b1a4041975aeacc831fdb6f
#: ../../releases/1.4-alpha-1.txt:77 ../../releases/1.4-beta-1.txt:93
msgid ""
"This method allows for more efficient creation of multiple objects in the "
"ORM. It can provide significant performance increases if you have many "
"objects. Django makes use of this internally, meaning some operations (such "
"as database setup for test suites) have seen a performance benefit as a "
"result."
msgstr ""

# f89e5d339aa34ef983210931a071b03c
# 9bb21b48d0584ee689a1a440e06cda5b
#: ../../releases/1.4-alpha-1.txt:88 ../../releases/1.4-beta-1.txt:104
msgid ""
"Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with "
"a different strategy and broader scope, :meth:`~django.db.models.query."
"QuerySet.prefetch_related` has been added to :class:`~django.db.models.query."
"QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of "
"the specified related lookups in a single batch as soon as the query begins "
"to be evaluated. Unlike ``select_related``, it does the joins in Python, not "
"in the database, and supports many-to-many relationships, :class:`~django."
"contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to "
"fix a very common performance problem in which your code ends up doing O(n) "
"database queries (or worse) if objects on your primary ``QuerySet`` each "
"have many related objects that you also need."
msgstr ""

# 5ede0add2ee04744bb45e5839693c59e
# 2888a91c0eba40639bd49f0e06886163
#: ../../releases/1.4-alpha-1.txt:119 ../../releases/1.4-beta-1.txt:150
msgid "HTML5 Doctype"
msgstr ""

# 9f493dd51244493aa9aca8da85a69f5b
# aef56a0173f04d908723d793ea65dc78
#: ../../releases/1.4-alpha-1.txt:130 ../../releases/1.4-beta-1.txt:161
msgid ""
"Prior to Django 1.4, the :mod:`~django.contrib.admin` app allowed you to "
"specify change list filters by specifying a field lookup, but didn't allow "
"you to create custom filters. This has been rectified with a simple API "
"(previously used internally and known as \"FilterSpec\"). For more details, "
"see the documentation for :attr:`~django.contrib.admin.ModelAdmin."
"list_filter`."
msgstr ""

# 0be1606487664b26afef7ceb83bb0a5b
# b902d72241044e26b2faf9ddb98cf53a
#: ../../releases/1.4-alpha-1.txt:139 ../../releases/1.4-beta-1.txt:170
msgid ""
"The admin change list now supports sorting on multiple columns. It respects "
"all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` "
"attribute, and sorting on multiple columns by clicking on headers is "
"designed to mimic the behavior of desktop GUIs. The :meth:`~django.contrib."
"admin.ModelAdmin.get_ordering` method for specifying the ordering "
"dynamically (e.g. depending on the request) has also been added."
msgstr ""

# d0bebe79f03d48f79b88f1b028d15e39
# 8cad6af166414d20b1f4385a145ab174
#: ../../releases/1.4-alpha-1.txt:149 ../../releases/1.4-beta-1.txt:180
msgid ""
"A new :meth:`~django.contrib.admin.ModelAdmin.save_related` method was added "
"to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how "
"related objects are saved in the admin."
msgstr ""

# 65e5b572cd2e4286aeff00997f533063
# 444674234f6247c4900232dbeabf36e3
#: ../../releases/1.4-alpha-1.txt:153 ../../releases/1.4-beta-1.txt:184
msgid ""
"Two other new methods, :meth:`~django.contrib.admin.ModelAdmin."
"get_list_display` and :meth:`~django.contrib.admin.ModelAdmin."
"get_list_display_links` were added to :class:`~django.contrib.admin."
"ModelAdmin` to enable the dynamic customization of fields and links "
"displayed on the admin change list."
msgstr ""

# b396c6b746c848b380556a3df5ccd7e6
# d9f6400f8e97400e9074881f4fd7a995
#: ../../releases/1.4-alpha-1.txt:162 ../../releases/1.4-beta-1.txt:193
msgid ""
"Admin inlines will now only allow those actions for which the user has "
"permission. For ``ManyToMany`` relationships with an auto-created "
"intermediate model (which does not have its own permissions), the change "
"permission for the related model determines if the user has the permission "
"to add, change or delete relationships."
msgstr ""

# 2ac4fcd982da466d8188cc77b6c1e48d
# 552572af81d14eaca30cea771db34f1e
#: ../../releases/1.4-alpha-1.txt:181 ../../releases/1.4-beta-1.txt:212
msgid ""
"Django 1.4 introduces a new cookie-based backend for the session framework "
"which uses the tools for :doc:`cryptographic signing </topics/signing>` to "
"store the session data in the client's browser."
msgstr ""

# 06ddad013d23441285cffb1dba4af1cc
# cff56a11bfee4abcaac63b096843c69b
#: ../../releases/1.4-alpha-1.txt:191 ../../releases/1.4-beta-1.txt:229
msgid ""
"The previous ``FormWizard`` from the formtools contrib app has been replaced "
"with a new implementation based on the class-based views introduced in "
"Django 1.3. It features a pluggable storage API and doesn't require the "
"wizard to pass around hidden fields for every previous step."
msgstr ""

# 08364eab3b4c4e61b30e4483a2e09737
# cce2f9aaa7624d7db509c185a8bc9f69
#: ../../releases/1.4-alpha-1.txt:207 ../../releases/1.4-beta-1.txt:245
msgid ""
"A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was "
"added to allow using URL reversals before the project's URLConf gets loaded."
msgstr ""

# 84792d20269b461fb360484bb78e1196
# 4388f181054c46e9a7775917cfa065d2
#: ../../releases/1.4-alpha-1.txt:213 ../../releases/1.4-beta-1.txt:251
msgid ""
"Django 1.4 gained the ability to look for a language prefix in the URL "
"pattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` "
"helper function. Additionally, it's now possible to define translatable URL "
"patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:"
"`url-internationalization` for more information about the language prefix "
"and how to internationalize URL patterns."
msgstr ""

# b394d3333bcd485e8ce5e1a9a5ea534a
# e9210cc322284ddf8139e50805349b95
#: ../../releases/1.4-alpha-1.txt:231 ../../releases/1.4-beta-1.txt:269
msgid ""
"Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail."
"SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views."
"generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:"
"`~django.views.generic.detail.SingleObjectMixin` to enable the customization "
"of URLConf keyword arguments used for single object generic views."
msgstr ""

# 68dffe3d392c4754bf395fbef60c555f
# 903a929e93cb4641898d19a133860337
#: ../../releases/1.4-alpha-1.txt:265 ../../releases/1.4-beta-1.txt:303
msgid ""
"Then in the template any number of arguments may be passed to the template "
"tag. For example:"
msgstr ""

# 6f8c71a771934168afcba9baed7e111d
# f464929a4c5f4ba1a61f3e87bbcac23e
#: ../../releases/1.4-alpha-1.txt:290 ../../releases/1.4-beta-1.txt:328
msgid ""
"Added a filter which truncates a string to be no longer than the specified "
"number of characters. Truncated strings end with a translatable ellipsis "
"sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for "
"more details."
msgstr ""

# 2c62225fde1e4c978f144a83510d9d97
# 696f56bf2c2b45568192a0a0b8953861
#: ../../releases/1.4-alpha-1.txt:307 ../../releases/1.4-beta-1.txt:345
msgid ""
"In addition to the `static template tag`_, the :mod:`staticfiles<django."
"contrib.staticfiles>` contrib app now has a :class:`~django.contrib."
"staticfiles.storage.CachedStaticFilesStorage` backend which caches the files "
"it saves (when running the :djadmin:`collectstatic` management command) by "
"appending the MD5 hash of the file's content to the filename. For example, "
"the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48."
"css``"
msgstr ""

# eef696aa8c8b4391b7e000477b010ae4
# ae5fe2dfb26c41cda3b74890fe43cc73
#: ../../releases/1.4-alpha-1.txt:330 ../../releases/1.4-beta-1.txt:368
msgid ""
"We've made various improvements to our CSRF features, including the :func:"
"`~django.views.decorators.csrf.ensure_csrf_cookie` decorator which can help "
"with AJAX heavy sites, protection for PUT and DELETE requests, and the :"
"setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings which "
"can improve the security and usefulness of the CSRF protection. See the :doc:"
"`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

# 66355765ff35471b8d38259d45a6d108
# ccc1ff9462b64199b2fa4cb8045acf5d
#: ../../releases/1.4-alpha-1.txt:346 ../../releases/1.4-beta-1.txt:384
msgid ""
"All POST parameters are now systematically filtered out of error reports for "
"certain views (``login``, ``password_reset_confirm``, ``password_change``, "
"and ``add_view`` in :mod:`django.contrib.auth.views`, as well as "
"``user_change_password`` in the admin app) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

# 489023b44e6440c0a2c06057d8cbb49f
# 472b4ba7fdab495cbddde3b719740e18
#: ../../releases/1.4-alpha-1.txt:351 ../../releases/1.4-beta-1.txt:389
msgid ""
"You may override or customize the default filtering by writing a :ref:"
"`custom filter<custom-error-reports>`. For more information see the docs on :"
"ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

# ded73cf35d544bde8dfe40f99801072c
# 8f4dae508092476283a97684eaad8a67
#: ../../releases/1.4-alpha-1.txt:358 ../../releases/1.4-beta-1.txt:396
msgid ""
"The previously added support for IPv6 addresses when using the runserver "
"management command in Django 1.3 has now been further extended by adding a :"
"class:`~django.db.models.GenericIPAddressField` model field, a :class:"
"`~django.forms.GenericIPAddressField` form field and the validators :data:"
"`~django.core.validators.validate_ipv46_address` and :data:`~django.core."
"validators.validate_ipv6_address`"
msgstr ""

# f5529241a6764e4bb28e18e481f2a6ae
# 4f979db598d44c3989f625f82def558e
#: ../../releases/1.4-alpha-1.txt:374 ../../releases/1.4-beta-1.txt:412
msgid ""
"The previous ``manage.py`` called functions that are now deprecated, and "
"thus projects upgrading to Django 1.4 should update their ``manage.py``. "
"(The old-style ``manage.py`` will continue to work as before until Django "
"1.6; in 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

# 6a52ded4133f43be816550104179d2c7
# 6d7b9cf644cb47f888f3431fe50228d7
#: ../../releases/1.4-alpha-1.txt:394 ../../releases/1.4-beta-1.txt:432
msgid ""
"If settings, URLconfs, and apps within the project are imported or "
"referenced using the project name prefix (e.g. ``myproject.settings``, "
"``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need "
"to be moved one directory up, so it is outside the project package rather "
"than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

# ee392427f79e45f68884f54b083a9546
# 810d610cab83488689ec627363dc9da9
#: ../../releases/1.4-alpha-1.txt:439 ../../releases/1.4-beta-1.txt:477
msgid ""
"The :djadmin:`built-in development server<runserver>` now supports using an "
"externally-defined WSGI callable, so as to make it possible to run runserver "
"with the same WSGI configuration that is used for deployment. A new :setting:"
"`WSGI_APPLICATION` setting is available to configure which WSGI callable :"
"djadmin:`runserver` uses."
msgstr ""

# f6ed8d3160504462ae66605aeaff74d1
# cf3e36f3c3134a3db806b8822fefd9cc
#: ../../releases/1.4-alpha-1.txt:451 ../../releases/1.4-beta-1.txt:489
msgid ""
"The :djadmin:`startapp` and :djadmin:`startproject` management commands got "
"a ``--template`` option for specifying a path or URL to a custom app or "
"project template."
msgstr ""

# 38d4ea7464cd4b51946d2980ed2f62b0
# 904123737e0d473484c2aa11bbbb82f1
#: ../../releases/1.4-alpha-1.txt:455 ../../releases/1.4-beta-1.txt:493
msgid ""
"For example, Django will use the ``/path/to/my_project_template`` directory "
"when running the following command::"
msgstr ""

# 771ddc35902a4e63b34cf618bb58effe
# 270504e44dc34d6eae8c08b505975e37
#: ../../releases/1.4-alpha-1.txt:472 ../../releases/1.4-beta-1.txt:510
msgid ""
"Django 1.4 adds :ref:`support for time zones <time-zones>`. When it's "
"enabled, Django stores date and time information in UTC in the database, "
"uses time zone-aware datetime objects internally, and translates them to the "
"end user's time zone in templates and forms."
msgstr ""

# 417fa94864244bc58e840e61b77e9c9b
# 465c76e6e3924b9793a6e8a345d84f8f
#: ../../releases/1.4-alpha-1.txt:477 ../../releases/1.4-beta-1.txt:515
msgid "Reasons for using this feature include:"
msgstr ""

# 7fa5cf7adb2f42ba8b7b666f41f072b4
# 7da3982fb0c94e49bc0f47ea1770549c
#: ../../releases/1.4-alpha-1.txt:485 ../../releases/1.4-beta-1.txt:523
msgid ""
"Time zone support is enabled by default in new projects created with :"
"djadmin:`startproject`. If you want to use this feature in an existing "
"project, there is a :ref:`migration guide <time-zones-migration-guide>`."
msgstr ""

# 106294bad71b424e9b8f66b6413d55d0
# 0ac747a04de34d94a1f84f0fc0b4f953
#: ../../releases/1.4-alpha-1.txt:494 ../../releases/1.4-beta-1.txt:554
msgid ""
"A more usable stacktrace in the technical 500 page: frames in the stack "
"trace which reference Django's code are dimmed out, while frames in user "
"code are slightly emphasized. This change makes it easier to scan a "
"stacktrace for issues in user code."
msgstr ""

# fe472793c811458fa0cdd2574006a98a
# d865145c7fc7472b9751b27f3a1cbb89
#: ../../releases/1.4-alpha-1.txt:506 ../../releases/1.4-beta-1.txt:566
msgid ""
"The ``django.contrib.auth.models.check_password`` function has been moved to "
"the ``django.contrib.auth.utils`` module. Importing it from the old location "
"will still work, but you should update your imports."
msgstr ""

# 546de442292742738417c798a13d9cdf
# 19332f7b955b47d39e4041681d041fdb
#: ../../releases/1.4-alpha-1.txt:510 ../../releases/1.4-beta-1.txt:570
msgid ""
"The :djadmin:`collectstatic` management command gained a ``--clear`` option "
"to delete all files at the destination before copying or linking the static "
"files."
msgstr ""

# 11f92cf3f6cd427092a4a0f1dd3e2c2c
# 192273d54a09444ab6ac1d3d3dd3b793
#: ../../releases/1.4-alpha-1.txt:514 ../../releases/1.4-beta-1.txt:574
msgid ""
"It is now possible to load fixtures containing forward references when using "
"MySQL with the InnoDB database engine."
msgstr ""

# ae8cdcd51acf4f13a90e565da02e1884
# 602f2938c2b64f069b85057eb6acb74f
#: ../../releases/1.4-alpha-1.txt:529 ../../releases/1.4-beta-1.txt:589
msgid ""
"A new plain text version of the HTTP 500 status code internal error page "
"served when :setting:`DEBUG` is ``True`` is now sent to the client when "
"Django detects that the request has originated in JavaScript code (:meth:"
"`~django.http.HttpRequest.is_ajax` is used for this)."
msgstr ""

# 335341c92b4647c38581ec1bd123cfea
# e45c35af5c254fd5b75fd996d6c58e14
#: ../../releases/1.4-alpha-1.txt:534 ../../releases/1.4-beta-1.txt:594
msgid ""
"Similarly to its HTML counterpart, it contains a collection of different "
"pieces of information about the state of the web application."
msgstr ""

# 31f14bfcb2ee48a8b9826cd683dcc674
# 8856ac4664ad40f0aba7beec04b29f51
#: ../../releases/1.4-alpha-1.txt:537 ../../releases/1.4-beta-1.txt:597
msgid ""
"This should make it easier to read when debugging interaction with client-"
"side Javascript code."
msgstr ""

# 9c849f6c83e34c26aed86eda22d6c071
# 8db126d611fb447085efa5c799325fa3
#: ../../releases/1.4-alpha-1.txt:569 ../../releases/1.4-beta-1.txt:637
msgid ""
"Starting in Django 1.4 the admin's static files also follow this convention "
"to make it easier to deploy the included files. In previous versions of "
"Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to "
"point to the URL where the admin's static files are served by a web server. "
"This setting has now been deprecated and replaced by the more general "
"setting :setting:`STATIC_URL`. Django will now expect to find the admin "
"static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

# dc0681878ec541038b02f0b6439b7641
# dd950c15846446c38df5a62343ba631b
#: ../../releases/1.4-alpha-1.txt:577 ../../releases/1.4-beta-1.txt:645
msgid ""
"If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/"
"media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` "
"are configured and your web server serves the files correctly. The "
"development server continues to serve the admin files just like before. "
"Don't hesitate to consult the :doc:`static files howto </howto/static-files/"
"index>` for further details."
msgstr ""

# d25f8a7e89104b0d85477b587d2c1f14
# 39854a36d99045ac8d581861a11c64f9
#: ../../releases/1.4-alpha-1.txt:584 ../../releases/1.4-beta-1.txt:652
msgid ""
"In case your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. "
"``http://media.example.com/admin/``) make sure to also set your :setting:"
"`STATIC_URL` setting to the correct URL, for example ``http://media.example."
"com/``."
msgstr ""

# 59ea6a63f9cf474cbafe7ead67d762ce
# 3daf2d3e80c24a18bee31baf6f21b71a
#: ../../releases/1.4-alpha-1.txt:591 ../../releases/1.4-beta-1.txt:659
msgid ""
"If you're implicitly relying on the path of the admin static files on your "
"server's file system when you deploy your site, you have to update that "
"path. The files were moved from :file:`django/contrib/admin/media/` to :file:"
"`django/contrib/admin/static/admin/`."
msgstr ""

# b9faaeb68b3c4b228890945bf99520f2
# 72ab39da50d94662ae7efde6758501f3
#: ../../releases/1.4-alpha-1.txt:599 ../../releases/1.4-beta-1.txt:667
msgid ""
"Django hasn't had a clear policy on which browsers are supported for using "
"the admin app. Django's new policy formalizes existing practices: `YUI's A-"
"grade`_ browsers should provide a fully-functional admin experience, with "
"the notable exception of IE6, which is no longer supported."
msgstr ""

# 58efb4b80ce345cebad74febfd8ce33a
# eba7ee22390b4c02a79b09a5aa0db9c7
#: ../../releases/1.4-alpha-1.txt:604 ../../releases/1.4-beta-1.txt:672
msgid ""
"Released over ten years ago, IE6 imposes many limitations on modern web "
"development. The practical implications of this policy are that contributors "
"are free to improve the admin without consideration for these limitations."
msgstr ""

# 74d6278cb2304bf6931828aec36c2916
# c5e0ed9bbfbb4030bbc930691b24f4a5
#: ../../releases/1.4-alpha-1.txt:608 ../../releases/1.4-beta-1.txt:676
msgid ""
"This new policy **has no impact** on development outside of the admin. Users "
"of Django are free to develop webapps compatible with any range of browsers."
msgstr ""

# c36cdcd14c0c41d59445b6a69d5fdd75
# 07947c83557b484abcbed1f96dfa568c
#: ../../releases/1.4-alpha-1.txt:616 ../../releases/1.4-beta-1.txt:684
msgid ""
"As part of an effort to improve the performance and usability of the admin's "
"changelist sorting interface and of the admin's :attr:`horizontal <django."
"contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django."
"contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon "
"files were removed and grouped into two sprite files."
msgstr ""

# 826e59349d4e4380a5db47c2fb809043
# 115262bf35fb4f22b58fb914e0902f4f
#: ../../releases/1.4-alpha-1.txt:628 ../../releases/1.4-beta-1.txt:696
msgid ""
"If you used those icons to customize the admin then you will want to replace "
"them with your own icons or retrieve them from a previous release."
msgstr ""

# dbff9c789df9492388c161c8fcec8c89
# 834cc62e98fd42418d089dc2e93d46d6
#: ../../releases/1.4-alpha-1.txt:634 ../../releases/1.4-beta-1.txt:702
msgid ""
"To avoid conflicts with other common CSS class names (e.g. \"button\"), a "
"prefix \"field-\" has been added to all CSS class names automatically "
"generated from the form field names in the main admin forms, stacked inline "
"forms and tabular inline cells. You will need to take that prefix into "
"account in your custom style sheets or javascript files if you previously "
"used plain field names as selectors for custom styles or javascript "
"transformations."
msgstr ""

# ef8c61ccdba643c4ab57c68b1e55745e
# a929a5cc3b564dae8c47b0179d51db17
#: ../../releases/1.4-alpha-1.txt:657 ../../releases/1.4-beta-1.txt:725
msgid ""
"consequences: the user will be logged out, and session data will be lost."
msgstr ""

# 6117fb12924b41adbed893d00ff24808
# ef00b87a946b40e3bfe5c29b90aa3db4
#: ../../releases/1.4-alpha-1.txt:659 ../../releases/1.4-beta-1.txt:727
msgid "time period: defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# 32f77b7e0c7842d0a964a32650c2649c
# 5b75e6738890494bbe84250a9c303470
#: ../../releases/1.4-alpha-1.txt:663 ../../releases/1.4-beta-1.txt:731
msgid ""
"consequences: password reset links from before the upgrade will not work."
msgstr ""

# 0f563f0bff8745bf82bb726b07cb2193
# 0b53ed634e5343959ab379502835f00f
#: ../../releases/1.4-alpha-1.txt:665 ../../releases/1.4-beta-1.txt:733
msgid "time period: defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

# 24479528faff466dab1c27283cb52e24
# 780ebb6fefaf417dbc897dcf94e6927b
#: ../../releases/1.4-alpha-1.txt:667 ../../releases/1.4-beta-1.txt:735
msgid ""
"Form-related hashes — these are much shorter lifetime, and are relevant only "
"for the short window where a user might fill in a form generated by the pre-"
"upgrade Django instance, and try to submit it to the upgraded Django "
"instance:"
msgstr ""

# 4d98597c61e347e4b1af1bde40aa5807
# 7ad7417221114e948a8e725a60c235eb
#: ../../releases/1.4-alpha-1.txt:673 ../../releases/1.4-beta-1.txt:741
msgid ""
"consequences: the user will see a validation error \"Security hash failed\"."
msgstr ""

# 8c1d5937af2c40649fb53fab5de6b37f
# aa8c82cb703f4ccf9e7458defd12f8ff
#: ../../releases/1.4-alpha-1.txt:675 ../../releases/1.4-beta-1.txt:743
msgid ""
"time period: the amount of time you expect users to take filling out comment "
"forms."
msgstr ""

# 27448ad220bc4c12ada5325430360622
# 971e40e6e74448fab722ab9dc3a71514
#: ../../releases/1.4-alpha-1.txt:680 ../../releases/1.4-beta-1.txt:748
msgid ""
"consequences: the user will see an error about the form having expired, and "
"will be sent back to the first page of the wizard, losing the data they have "
"entered so far."
msgstr ""

# 1c6c227160e947e1b8632409b34c25e9
# d5b8487d87ca4c3cafa337a10ca1db83
#: ../../releases/1.4-alpha-1.txt:684 ../../releases/1.4-beta-1.txt:752
msgid ""
"time period: the amount of time you expect users to take filling out the "
"affected forms."
msgstr ""

# 7cbfd3eb44b648d5b2284983f5bd01f9
# 4285668b9d9f43fb8cec9f42c2883328
#: ../../releases/1.4-alpha-1.txt:689 ../../releases/1.4-beta-1.txt:757
msgid ""
"Note: This is actually a Django 1.1 fallback, not Django 1.2, and applies "
"only if you are upgrading from 1.1."
msgstr ""

# e3d1649fefc54f938397a12a728d861f
# 3a2191ee5c7740d9a0caa3a8ae707f78
#: ../../releases/1.4-alpha-1.txt:692 ../../releases/1.4-beta-1.txt:760
msgid ""
"consequences: the user will see a 403 error with any CSRF protected POST "
"form."
msgstr ""

# 0de216b510c84da09734885bd7c9ffba
# 7f7ede2a1fc94404929055b569cdd19f
#: ../../releases/1.4-alpha-1.txt:695 ../../releases/1.4-beta-1.txt:763
msgid ""
"time period: the amount of time you expect user to take filling out such "
"forms."
msgstr ""

# 7b20c05a82eb45e0a419f09b94c395fb
# 26fa7cd300ea4300a9fd58fb6907e640
#: ../../releases/1.4-alpha-1.txt:701 ../../releases/1.4-beta-1.txt:769
msgid ""
"Starting in the 1.4 release the :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the "
"resulting URL refers to an existing flatpage. For example, requesting ``/"
"notaflatpageoravalidurl`` in a previous version would redirect to ``/"
"notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting "
"``/notaflatpageoravalidurl`` now will immediately raise a 404. Additionally "
"redirects returned by flatpages are now permanent (301 status code) to match "
"the behavior of the :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

# 1a44d90289c94db9bae6349313a5ce6b
# 4e31164953714b268b29e92a4e572cd0
#: ../../releases/1.4-alpha-1.txt:714 ../../releases/1.4-beta-1.txt:782
msgid ""
"As a consequence of time zone support, and according to the ECMA-262 "
"specification, some changes were made to the JSON serializer:"
msgstr ""

# 089fe9986a8848f7b9498a734f68e0e6
# 78031c9ef0f94eb58049293be62305d4
#: ../../releases/1.4-alpha-1.txt:724 ../../releases/1.4-beta-1.txt:792
msgid ""
"The XML serializer was also changed to use the ISO8601 format for datetimes. "
"The letter ``T`` is used to separate the date part from the time part, "
"instead of a space. Time zone information is included in the ``[+-]HH:MM`` "
"format."
msgstr ""

# e3940f28729744e8b7bbb99ba7dde366
# 6e996a9d5b2d4e85a6c88991a7fa5d24
#: ../../releases/1.4-alpha-1.txt:728 ../../releases/1.4-beta-1.txt:796
msgid ""
"The serializers will dump datetimes in fixtures with these new formats. They "
"can still load fixtures that use the old format."
msgstr ""

# 256bc28ee4204b86a1b6d064d8079f09
# e724dfeea1b543ec93dcc8d525151340
#: ../../releases/1.4-alpha-1.txt:739 ../../releases/1.4-beta-1.txt:807
msgid ""
"In the context of time zone support, this flag was changed to ``False``, and "
"datetimes are now stored without time zone information in SQLite. When :"
"setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime "
"object, Django raises an exception."
msgstr ""

# b6d71f48d23a4652ad1f6414830faf55
# 9c22cdf787be4fb3b56182529cfe2e50
#: ../../releases/1.4-alpha-1.txt:765 ../../releases/1.4-beta-1.txt:833
msgid ""
"Finally, while it is now possible to pass connections between threads, "
"Django does not make any effort to synchronize access to the underlying "
"backend. Concurrency behavior is defined by the underlying backend "
"implementation. Check their documentation for details."
msgstr ""

# 107c2ba6720647f49374610f6017f478
# d83e72d7a9b94a7293e27883d150aa3e
#: ../../releases/1.4-alpha-1.txt:779 ../../releases/1.4-beta-1.txt:847
msgid ""
"If you rely on the feature and want to restore the old behavior, simply use "
"a custom comment model manager to exclude the user group, like this::"
msgstr ""

# 8796291a305d46f0b0d83d35b5cf80bd
# 9b281a04afb84750b61de0a53b9ae157
#: ../../releases/1.4-alpha-1.txt:794 ../../releases/1.4-beta-1.txt:862
msgid ""
"Save this model manager in your custom comment app (e.g. in "
"``my_comments_app/managers.py``) and add it your :ref:`custom comment app "
"model <custom-comment-app-api>`::"
msgstr ""

# 2e2c2321f7d740b3aa62c18ff5096f50
# b663d96483424523935f8ff3ce8f6e00
#: ../../releases/1.4-alpha-1.txt:845 ../../releases/1.4-beta-1.txt:913
msgid ""
"Don't forget to escape characters that have a special meaning in a regular "
"expression."
msgstr ""

# a288cda34d8242dc9581dd173ca065a9
# f00156966de34e4c9c1c454c63b5ac24
#: ../../releases/1.4-alpha-1.txt:851 ../../releases/1.4-beta-1.txt:919
msgid ""
"Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided "
"protection against only POST requests. Since use of PUT and DELETE methods "
"in AJAX applications is becoming more common, we now protect all methods not "
"defined as safe by :rfc:`2616` i.e. we exempt GET, HEAD, OPTIONS and TRACE, "
"and enforce protection on everything else."
msgstr ""

# a00ce2de0fdc4314a87c84526765f3d6
# 072edfa68126409793e913ad5c149e8f
#: ../../releases/1.4-alpha-1.txt:857 ../../releases/1.4-beta-1.txt:925
msgid ""
"If you are using PUT or DELETE methods in AJAX applications, please see the :"
"ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

# fba61795058641d9904175e535e43931
# d47f377d14d34dcba049531fa307be50
#: ../../releases/1.4-alpha-1.txt:863 ../../releases/1.4-beta-1.txt:931
msgid ""
"This was an alias to ``django.template.loader`` since 2005, it has been "
"removed without emitting a warning due to the length of the deprecation. If "
"your code still referenced this please use ``django.template.loader`` "
"instead."
msgstr ""

# 8c6e9406b7b445fc8040633edecf5a48
# 697463b4ebea425a90e9bbbedf54e1a3
#: ../../releases/1.4-alpha-1.txt:877 ../../releases/1.4-beta-1.txt:945
msgid ""
"The ``open`` method of the base Storage class took an obscure parameter "
"``mixin`` which allowed you to dynamically change the base classes of the "
"returned file object. This has been removed. In the rare case you relied on "
"the ``mixin`` parameter, you can easily achieve the same by overriding the "
"``open`` method, e.g.::"
msgstr ""

# 752b67fc0c8a473bb23befef2eb5ca92
# 8596f80c33ac495ebf4364f2e256f121
#: ../../releases/1.4-alpha-1.txt:903 ../../releases/1.4-beta-1.txt:971
msgid ""
"``yaml.load`` is able to construct any Python object, which may trigger "
"arbitrary code execution if you process a YAML document that comes from an "
"untrusted source. This feature isn't necessary for Django's YAML "
"deserializer, whose primary use is to load fixtures consisting of simple "
"objects. Even though fixtures are trusted data, for additional security, the "
"YAML deserializer now uses ``yaml.safe_load``."
msgstr ""

# daeaa4dbaa694e029d1d76b7ed39140b
# 201ed77e1e1046ab837e705c6083fa7a
#: ../../releases/1.4-alpha-1.txt:916 ../../releases/1.4-beta-1.txt:984
msgid ""
"Some legacy ways of calling :func:`~django.views.decorators.cache."
"cache_page` have been deprecated, please see the docs for the correct way to "
"use this decorator."
msgstr ""

# fe3801bf60af420b9a383355019c6925
# cc2e0d27bfc54f378ad5f395d477b612
#: ../../releases/1.4-alpha-1.txt:923 ../../releases/1.4-beta-1.txt:991
msgid ""
"Django 1.3 dropped support for PostgreSQL versions older than 8.0 and the "
"relevant documents suggested to use a recent version because of performance "
"reasons but more importantly because end of the upstream support periods for "
"releases 8.0 and 8.1 was near (November 2010)."
msgstr ""

# 0ddc614a4a8948a882ebb8f91b90a916
# 6e67e636f1444177ba4abbf66af5aeb7
#: ../../releases/1.4-alpha-1.txt:934 ../../releases/1.4-beta-1.txt:1002
msgid ""
"When :doc:`logging support </topics/logging/>` was added to Django in 1.3, "
"the admin error email support was moved into the :class:`django.utils.log."
"AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to "
"maintain the established behavior of error emails, the ``'django.request'`` "
"logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

# 14c7c347b610417b904d1fb1f18109d8
# 38ee16966a4844e69a44409888a322ee
#: ../../releases/1.4-alpha-1.txt:960 ../../releases/1.4-beta-1.txt:1028
msgid ""
"If your project was created prior to this change, your :setting:`LOGGING` "
"setting will not include this new filter. In order to maintain backwards-"
"compatibility, Django will detect that your ``'mail_admins'`` handler "
"configuration includes no ``'filters'`` section, and will automatically add "
"this filter for you and issue a pending-deprecation warning. This will "
"become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-"
"compatibility shim will be removed entirely."
msgstr ""

# 730e6cb1de474b94ba842b8701aa4e0d
# c870da1993ae4581b8025cfad9e9c9eb
#: ../../releases/1.4-alpha-1.txt:974 ../../releases/1.4-beta-1.txt:1042
msgid ""
"Until Django 1.3 the functions :func:`~django.conf.urls.include`, :func:"
"`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:"
"`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were "
"located in a ``django.conf.urls.defaults`` module."
msgstr ""

# 6268eccbcef848cbbd928e7051b12bea
# 9de638c5b7574448b86b4c1547927827
#: ../../releases/1.4-alpha-1.txt:979 ../../releases/1.4-beta-1.txt:1047
msgid ""
"Starting with Django 1.4 they are now available in :mod:`django.conf.urls`."
msgstr ""

# 079f1ac9331f4a279f2f94eb5941678b
# 36991211b2af4740b173566eb5c5e7c1
#: ../../releases/1.4-alpha-1.txt:992 ../../releases/1.4-beta-1.txt:1060
msgid ""
"The code that powers Databrowse is licensed under the same terms as Django "
"itself, and so is available to be adopted by an individual or group as a "
"third-party project."
msgstr ""

# 7b984cfbbbee4fc99dd77e4b4f68b669
# 45f450fd683e4f6391a837ae97f7f6ba
#: ../../releases/1.4-alpha-1.txt:1004 ../../releases/1.4-beta-1.txt:1072
msgid ""
"This function was never documented or part of the public API, but was widely "
"recommended for use in setting up a \"Django environment\" for a user "
"script. These uses should be replaced by setting the "
"``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf."
"settings.configure`."
msgstr ""

# b9d5d8a2b04a45cdb2c8cd1e13d8627c
#: ../../releases/1.4-alpha-1.txt:1046
msgid ""
"Session cookies now include the ``httponly`` attribute by default to help "
"reduce the impact of potential XSS attacks. For strict backwards "
"compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

# b4138bcbafde4c9594ffa0c3c334de36
# 4f74d880641242b3bfcb146f6c47e67f
#: ../../releases/1.4-alpha-1.txt:1072 ../../releases/1.4-beta-1.txt:1144
msgid "The Django 1.4 roadmap"
msgstr ""

# 33eb24db41fc4da9a9f487a2b9cf8aa4
# 840972f45e414b7daf76b2c4bb897fdf
#: ../../releases/1.4-alpha-1.txt:1074 ../../releases/1.4-beta-1.txt:1146
msgid ""
"Before the final Django 1.4 release, several other preview/development "
"releases will be made available. The current schedule consists of at least "
"the following:"
msgstr ""

# 9c8f7797986544a1b5f180e7811cfd16
#: ../../releases/1.4-alpha-1.txt:1077
msgid ""
"Week of **January 30, 2012**: First Django 1.4 beta release; final feature "
"freeze for Django 1.4."
msgstr ""

# 1c2b6f26767e4dce993c7149e6d16203
# 0d46c9835a1d4fc08170ff0246b9c6c9
#: ../../releases/1.4-alpha-1.txt:1080 ../../releases/1.4-beta-1.txt:1152
msgid ""
"Week of **February 27, 2012**: First Django 1.4 release candidate; string "
"freeze for translations."
msgstr ""

# 243c04ee6ff24d4a80361f8bb85e4e06
# e0efad9f5cad4dd58cade03ecc0ff7f1
#: ../../releases/1.4-alpha-1.txt:1083 ../../releases/1.4-beta-1.txt:1155
msgid "Week of **March 5, 2012**: Django 1.4 final release."
msgstr ""

# 7a05fa62f85b4235959559a5e79be1ff
# a30832be2d364232a87d454dd750a4f7
#: ../../releases/1.4-alpha-1.txt:1085 ../../releases/1.4-beta-1.txt:1157
msgid ""
"If necessary, additional alpha, beta or release-candidate packages will be "
"issued prior to the final 1.4 release. Django 1.4 will be released "
"approximately one week after the final release candidate."
msgstr ""

# b2ad08e09f4a40c3b3eba3f2faea9c67
#: ../../releases/1.4-alpha-1.txt:1092
msgid ""
"In order to provide a high-quality 1.4 release, we need your help. Although "
"this alpha release is, again, *not* intended for production use, you can "
"help the Django team by trying out the alpha codebase in a safe test "
"environment and reporting any bugs or issues you encounter. The Django "
"ticket tracker is the central place to search for open issues:"
msgstr ""

# 04e34435cd8741699689c1d8aa66ed8a
# 5bf03ad608c3400aae7153ff47d9ebdf
#: ../../releases/1.4-alpha-1.txt:1121 ../../releases/1.4-beta-1.txt:1193
msgid ""
"Several development sprints will also be taking place before the 1.4 "
"release; these will typically be announced in advance on the django-"
"developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""

# e6231acf793942d69d12367d0ca70292
#: ../../releases/1.4-beta-1.txt:3
msgid "Django 1.4 beta release notes"
msgstr ""

# 41e452f1a1b541399b5ea31b078bafde
#: ../../releases/1.4-beta-1.txt:5
msgid "February 15, 2012."
msgstr ""

# 7356dbfe0abb4c418e2a0b64b5de26d5
#: ../../releases/1.4-beta-1.txt:7
msgid "Welcome to Django 1.4 beta!"
msgstr ""

# 6f76bb402689419eb69c394ef129640f
#: ../../releases/1.4-beta-1.txt:9
msgid ""
"This is the second in a series of preview/development releases leading up to "
"the eventual release of Django 1.4, scheduled for March 2012. This release "
"is primarily targeted at developers who are interested in trying out new "
"features and testing the Django codebase to help identify and resolve bugs "
"prior to the final 1.4 release."
msgstr ""

# 4340b90a26484e20a333b4f892ec555a
#: ../../releases/1.4-beta-1.txt:18
msgid ""
"Django 1.4 beta includes various `new features`_ and some minor `backwards "
"incompatible changes`_. There are also some features that have been dropped, "
"which are detailed in :doc:`our deprecation plan </internals/deprecation>`, "
"and we've `begun the deprecation process for some features`_."
msgstr ""

# 39ae86e3522b453a83ec10c8ff9a4ef5
#: ../../releases/1.4-beta-1.txt:29
msgid "Version numbering"
msgstr ""

# da00aa9fde9c4b49a6677285e4df4e01
#: ../../releases/1.4-beta-1.txt:31
msgid ""
"Internally, Django's version number is represented by the tuple ``django."
"VERSION``. This is used to generate human-readable version number strings; "
"as of Django 1.4 beta 1, the algorithm for generating these strings has been "
"changed to match the recommendations of :pep:`386`. This only affects the "
"human-readable strings identifying Django alphas, betas and release "
"candidates, and should not affect end users in any way."
msgstr ""

# 74f255d5f50a4296ad5ab041e46a9294
#: ../../releases/1.4-beta-1.txt:38
msgid ""
"For example purposes, the old algorithm would give Django 1.4 beta 1 a "
"version string of the form \"1.4 beta 1\". The new algorithm generates the "
"version string \"1.4b1\"."
msgstr ""

# d5e096f8d861437bb7f518c4a7829ccf
#: ../../releases/1.4-beta-1.txt:135
msgid ""
"Django 1.4 alpha contained a bug that corrupted PBKDF2 hashes. To determine "
"which accounts are affected, run :djadmin:`manage.py shell <shell>` and "
"paste this snippet::"
msgstr ""

# 8dcbe763628d48ebaea10afc1c05cc03
#: ../../releases/1.4-beta-1.txt:147
msgid "These users should reset their passwords."
msgstr ""

# bf473540047a4c2cbf57526f2004ff44
#: ../../releases/1.4-beta-1.txt:218
msgid ""
"Session data is signed and validated by the server, but is not encrypted.  "
"This means that a user can view any data stored in the session, but cannot "
"change it. Please read the documentation for further clarification before "
"using this backend."
msgstr ""

# 145994f0441940bb8fcf1a53bc023a26
#: ../../releases/1.4-beta-1.txt:617
msgid ""
"New phrases added to ``HIDDEN_SETTINGS`` regex in `django/views/debug.py`_."
msgstr ""

# 4020dfc6bc2f4c81bbc7a7bb096af5f1
#: ../../releases/1.4-beta-1.txt:619
msgid ""
"``'API'``, ``'TOKEN'``, ``'KEY'`` were added, ``'PASSWORD'`` was changed to "
"``'PASS'``."
msgstr ""

# ae5711260ba6483e8ab082506b4b41d3
#: ../../releases/1.4-beta-1.txt:1114
msgid ""
"Session cookies now include the ``httponly`` attribute by default to help "
"reduce the impact of potential XSS attacks. As a consequence of this change, "
"session cookie data, including sessionid, is no longer accessible from "
"Javascript in many browsers. For strict backwards compatibility, use "
"``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

# ad36024179554f859682873b48d1f51a
#: ../../releases/1.4-beta-1.txt:1149
msgid ""
"Week of **January 13, 2012**: First Django 1.4 beta release; final feature "
"freeze for Django 1.4."
msgstr ""

# 96d08c72506e423382f4e676a4068a07
#: ../../releases/1.4-beta-1.txt:1164
msgid ""
"In order to provide a high-quality 1.4 release, we need your help. Although "
"this beta release is, again, *not* intended for production use, you can help "
"the Django team by trying out the beta codebase in a safe test environment "
"and reporting any bugs or issues you encounter. The Django ticket tracker is "
"the central place to search for open issues:"
msgstr ""

# 50eab2dda78b46839e96b461d86cb09e
#: ../../releases/1.4-beta-1.txt:1175
msgid ""
"Additionally, discussion of Django development, including progress toward "
"the 1.4 release, takes place daily on the django-developers mailing list:"
msgstr ""

# 660bd813ba2a4008b66c6b9f390abae4
#: ../../releases/1.4.1.txt:3
msgid "Django 1.4.1 release notes"
msgstr ""

# f8db338fa187490490d5fd92ec93f240
#: ../../releases/1.4.1.txt:7
msgid ""
"This is the first security release in the Django 1.4 series, fixing several "
"security issues in Django 1.4. Django 1.4.1 is a recommended upgrade for all "
"users of Django 1.4."
msgstr ""

# e69f02ad6de547849cbd021a0d3ecb55
#: ../../releases/1.4.2.txt:3
msgid "Django 1.4.2 release notes"
msgstr ""

# 0fa623eec1c44b6faaa2ff71ea634aca
#: ../../releases/1.4.2.txt:7
msgid "This is the second security release in the Django 1.4 series."
msgstr ""

# 51566d8273ca4390a9971b5b5f48da0a
#: ../../releases/1.4.2.txt:42
msgid ""
"The newly introduced :class:`~django.db.models.GenericIPAddressField` "
"constructor arguments have been adapted to match those of all other model "
"fields. The first two keyword arguments are now verbose_name and name."
msgstr ""

# 6023b6a4b6cf4a93b5c42d0930221050
# 98a241aaab5444a0a54ad17d7664cec5
#: ../../releases/1.4.2.txt:47 ../../releases/1.4.4.txt:83
msgid "Other bugfixes and changes"
msgstr ""

# b7c6776b49d340a9a50c5cfb010bcbfe
#: ../../releases/1.4.2.txt:49
msgid "Subclass HTMLParser only for appropriate Python versions (#18239)."
msgstr ""

# df0629995ac14e609473387291582ff6
#: ../../releases/1.4.2.txt:50
msgid "Added batch_size argument to qs.bulk_create() (#17788)."
msgstr ""

# 0b9f63711b2e4afa9803c5b4be71033f
#: ../../releases/1.4.2.txt:51
msgid ""
"Fixed a small regression in the admin filters where wrongly formatted dates "
"passed as url parameters caused an unhandled ValidationError (#18530)."
msgstr ""

# 928ee446aa5645129c2c87ec69e42a7f
#: ../../releases/1.4.2.txt:52
msgid ""
"Fixed an endless loop bug when accessing permissions in templates (#18979)"
msgstr ""

# 30f4517f9494409b85b3efa9ea0a676c
#: ../../releases/1.4.2.txt:53
msgid "Fixed some Python 2.5 compatibility issues"
msgstr ""

# 3a20de4e214049b89065e2f0e10ec258
#: ../../releases/1.4.2.txt:54
msgid ""
"Fixed an issue with quoted filenames in Content-Disposition header (#19006)"
msgstr ""

# 2450b20ceb0e434ca4a6c0b78741b176
#: ../../releases/1.4.2.txt:55
msgid ""
"Made the context option in ``trans`` and ``blocktrans`` tags accept literals "
"wrapped in single quotes (#18881)."
msgstr ""

# 98673c67f8174c7dbbab2db1b387924b
# 9a1670adcee84d3aa219bbe8e1e009da
#: ../../releases/1.4.2.txt:56 ../../releases/1.4.4.txt:88
msgid "Numerous documentation improvements and fixes."
msgstr ""

# 5f8c37cdd0794dae93dbcc9ef88bd434
#: ../../releases/1.4.3.txt:3
msgid "Django 1.4.3 release notes"
msgstr ""

# f125851c0ef84c969c9c994bb9f5f013
#: ../../releases/1.4.3.txt:7
msgid ""
"Django 1.4.3 addresses two security issues present in previous Django "
"releases in the 1.4 series."
msgstr ""

# 591f34bdef00458a877b151b9babf1cd
#: ../../releases/1.4.4.txt:3
msgid "Django 1.4.4 release notes"
msgstr ""

# 5466b42270d243aaa083b8cdeab53f63
#: ../../releases/1.4.4.txt:7
msgid ""
"Django 1.4.4 fixes four security issues present in previous Django releases "
"in the 1.4 series, as well as several other bugs and numerous documentation "
"improvements."
msgstr ""

# 933fefa87aa048b9991244bd1f66030c
#: ../../releases/1.4.4.txt:11
msgid "This is the fourth bugfix/security release in the Django 1.4 series."
msgstr ""

# 502dcfe230e14588ae4ac9e5cd9d6fe2
#: ../../releases/1.4.4.txt:26
msgid ""
"For this reason, Django 1.4.4 adds a new setting, ``ALLOWED_HOSTS``, "
"containing an explicit list of valid host/domain names for this site. A "
"request with a Host header not matching an entry in this list will raise "
"``SuspiciousOperation`` if ``request.get_host()`` is called. For full "
"details see the documentation for the :setting:`ALLOWED_HOSTS` setting."
msgstr ""

# be37c01771fd4080adb0e0f9364fed30
#: ../../releases/1.4.4.txt:32
msgid ""
"The default value for this setting in Django 1.4.4 is ``['*']`` (matching "
"any host), for backwards-compatibility, but we strongly encourage all sites "
"to set a more restrictive value."
msgstr ""

# fe6e53a72ba84867a94722891badd858
#: ../../releases/1.4.4.txt:42
msgid ""
"The XML parser in the Python standard library is vulnerable to a number of "
"attacks via external entities and entity expansion. Django uses this parser "
"for deserializing XML-formatted database fixtures. This deserializer is not "
"intended for use with untrusted data, but in order to err on the side of "
"safety in Django 1.4.4 the XML deserializer refuses to parse an XML document "
"with a DTD (DOCTYPE definition), which closes off these attack avenues."
msgstr ""

# e66f0c2bea7e4e2c81b4c1555fc2a840
#: ../../releases/1.4.4.txt:68
msgid ""
"In Django 1.4.4, all formsets have a strictly-enforced maximum number of "
"forms (1000 by default, though it can be set higher via the ``max_num`` "
"formset factory argument)."
msgstr ""

# 5d0c2b3748e444cf904d48581acac112
#: ../../releases/1.4.4.txt:76
msgid ""
"In previous versions of Django, an admin user without change permission on a "
"model could still view the unicode representation of instances via their "
"admin history log. Django 1.4.4 now limits the admin history log view for an "
"object to users with change permission for that model."
msgstr ""

# e850af2de5794502a2655d450f594a6b
#: ../../releases/1.4.4.txt:85
msgid ""
"Prevented transaction state from leaking from one request to the next "
"(#19707)."
msgstr ""

# 5deaa200b25c47d9974bdd2088615a37
#: ../../releases/1.4.4.txt:86
msgid "Changed a SQL command syntax to be MySQL 4 compatible (#19702)."
msgstr ""

# db89893f9eee4f7281616ae79ce0168d
#: ../../releases/1.4.4.txt:87
msgid "Added backwards-compatibility with old unsalted MD5 passwords (#18144)."
msgstr ""

# e7f94d3147e04ede90e1011982c9e9c7
#: ../../releases/1.4.5.txt:3
msgid "Django 1.4.5 release notes"
msgstr ""

# 201b08e8521c47a3b0fbc18eed8aff73
#: ../../releases/1.4.5.txt:7
msgid ""
"Django 1.4.5 corrects a packaging problem with yesterday's :doc:`1.4.4 "
"release </releases/1.4.4>`."
msgstr ""

# 884e630fb59645809c9025e4bf2dd330
#: ../../releases/1.4.6.txt:3
msgid "Django 1.4.6 release notes"
msgstr ""

# 4e6da3d7ea114ff0859100134dd6d769
# 6a4b86dcdeba45859830d977d1b6b1b2
#: ../../releases/1.4.6.txt:5 ../../releases/1.5.2.txt:5
msgid "*August 13, 2013*"
msgstr ""

# d159461e9cf44ea98900f3c93b82c3c1
#: ../../releases/1.4.6.txt:7
msgid ""
"Django 1.4.6 fixes one security issue present in previous Django releases in "
"the 1.4 series, as well as one other bug."
msgstr ""

# 36969143aadb4a52a57b0cfa446da453
#: ../../releases/1.4.6.txt:10
msgid "This is the sixth bugfix/security release in the Django 1.4 series."
msgstr ""

# 82c88832ee214acea90ae3398dec6f37
# 270461818dfd4c36bb6177c537cc65dc
#: ../../releases/1.4.6.txt:13 ../../releases/1.5.2.txt:10
msgid "Mitigated possible XSS attack via user-supplied redirect URLs"
msgstr ""

# fda80fa32ffe4a52a0d5dadb23249529
# b8ab02069b0d4fdf9661e54760d8cc37
#: ../../releases/1.4.6.txt:15 ../../releases/1.5.2.txt:12
msgid ""
"Django relies on user input in some cases (e.g. :func:`django.contrib.auth."
"views.login`, :mod:`django.contrib.comments`, and :doc:`i18n </topics/i18n/"
"index>`) to redirect the user to an \"on success\" URL. The security checks "
"for these redirects (namely ``django.util.http.is_safe_url()``) didn't check "
"if the scheme is ``http(s)`` and as such allowed ``javascript:...`` URLs to "
"be entered. If a developer relied on ``is_safe_url()`` to provide safe "
"redirect targets and put such a URL into a link, he could suffer from a XSS "
"attack. This bug doesn't affect Django currently, since we only put this URL "
"into the ``Location`` response header and browsers seem to ignore JavaScript "
"there."
msgstr ""

# 46bf65c723df4f9786136fb3119b8b9e
# 2ba1da3a75ce4c7583bac2e4bb1e509d
#: ../../releases/1.4.6.txt:27 ../../releases/1.5.2.txt:31
msgid "Bugfixes"
msgstr ""

# 3f2cdc41274c4c33964a4d3fbac5b262
# 5c1ffd2c89384142b6b2245286e478f0
#: ../../releases/1.4.6.txt:29 ../../releases/1.5.2.txt:60
msgid ""
"Fixed an obscure bug with the :func:`~django.test.utils.override_settings` "
"decorator. If you hit an ``AttributeError: 'Settings' object has no "
"attribute '_original_allowed_hosts'`` exception, it's probably fixed "
"(#20636)."
msgstr ""

# 8cf4eba648774910878a35aee031794f
#: ../../releases/1.4.7.txt:3
msgid "Django 1.4.7 release notes"
msgstr ""

# 09bb7cad40244ee0af9eefda71e07e8f
# e4e202b9534a4acbb9f9dcac542b87e4
#: ../../releases/1.4.7.txt:5 ../../releases/1.5.3.txt:5
msgid "*September 10, 2013*"
msgstr ""

# ccecc6c2e9664ed486d1f204fcd001d8
#: ../../releases/1.4.7.txt:7
msgid ""
"Django 1.4.7 fixes one security issue present in previous Django releases in "
"the 1.4 series."
msgstr ""

# 677c748b1b184afdadbec59889d88e56
# d47c142871d74acc94490e69cee92851
#: ../../releases/1.4.7.txt:11 ../../releases/1.5.3.txt:12
msgid "Directory traversal vulnerability in :ttag:`ssi` template tag"
msgstr ""

# 2732af36bde546c2b1ef59dd11606f73
# 64aed61f49274cbb965ecb7689102cef
#: ../../releases/1.4.7.txt:13 ../../releases/1.5.3.txt:14
msgid ""
"In previous versions of Django it was possible to bypass the :setting:"
"`ALLOWED_INCLUDE_ROOTS` setting used for security with the :ttag:`ssi` "
"template tag by specifying a relative path that starts with one of the "
"allowed roots. For example, if ``ALLOWED_INCLUDE_ROOTS = (\"/var/www\",)`` "
"the following would be possible:"
msgstr ""

# 0098b604356a4bb9a537ed9cda60fdbf
# c610cd45331d4d118b00e6295b56cb53
#: ../../releases/1.4.7.txt:23 ../../releases/1.5.3.txt:24
msgid ""
"In practice this is not a very common problem, as it would require the "
"template author to put the :ttag:`ssi` file in a user-controlled variable, "
"but it's possible in principle."
msgstr ""

# d58bf20db80845e7b1a375cdeec6d3ec
#: ../../releases/1.4.8.txt:3
msgid "Django 1.4.8 release notes"
msgstr ""

# 652411731a834e2c84bf7822a0b94816
# 625be3e903374dd28f3903f7d6e2a140
#: ../../releases/1.4.8.txt:5 ../../releases/1.5.4.txt:5
msgid "*September 14, 2013*"
msgstr ""

# a8698d08017c4761a8ee9e469eea17f6
#: ../../releases/1.4.8.txt:7
msgid ""
"Django 1.4.8 fixes two security issues present in previous Django releases "
"in the 1.4 series."
msgstr ""

# 7a32d26bc5074791a27a2dd37af98449
# 138b5f69e4e045638805a2edf59c5a08
#: ../../releases/1.4.8.txt:11 ../../releases/1.5.4.txt:11
msgid "Denial-of-service via password hashers"
msgstr ""

# 3963d31f0ec84ca39879c6db7328e378
# d4c1f50946324baca4355f030912fa5a
#: ../../releases/1.4.8.txt:13 ../../releases/1.5.4.txt:13
msgid ""
"In previous versions of Django, no limit was imposed on the plaintext length "
"of a password. This allowed a denial-of-service attack through submission of "
"bogus but extremely large passwords, tying up server resources performing "
"the (expensive, and increasingly expensive with the length of the password) "
"calculation of the corresponding hash."
msgstr ""

# 4b2ce542788f492c887279f593187894
#: ../../releases/1.4.8.txt:19
msgid ""
"As of 1.4.8, Django's authentication framework imposes a 4096-byte limit on "
"passwords and will fail authentication with any submitted password of "
"greater length."
msgstr ""

# 8878456900044bd39188d51c60499630
# db2defcc7788421ca7ac86ad617a8a2d
#: ../../releases/1.4.8.txt:24 ../../releases/1.5.4.txt:24
msgid ""
"Corrected usage of :func:`~django.views.decorators.debug."
"sensitive_post_parameters` in :mod:`django.contrib.auth`’s admin"
msgstr ""

# bb505ba0aa9941879c6f30a4a73c292e
# 88a537729d064347a3ae307592d540bb
#: ../../releases/1.4.8.txt:26 ../../releases/1.5.4.txt:26
msgid ""
"The decoration of the ``add_view`` and ``user_change_password`` user admin "
"views with :func:`~django.views.decorators.debug.sensitive_post_parameters` "
"did not include :func:`~django.utils.decorators.method_decorator` (required "
"since the views are methods) resulting in the decorator not being properly "
"applied. This usage has been fixed and :func:`~django.views.decorators.debug."
"sensitive_post_parameters` will now throw an exception if it's improperly "
"used."
msgstr ""

# 2baf4ca4c17746958e0c04e5ccf0116b
#: ../../releases/1.5.txt:3
msgid "Django 1.5 release notes"
msgstr ""

# 0e0f6e7fd3b24aad84a8e6b5d5e5df70
#: ../../releases/1.5.txt:5
msgid "*February 26, 2013*"
msgstr ""

# 2eee71a5acdf4c998dd81ed9d9593878
#: ../../releases/1.5.txt:7
msgid "Welcome to Django 1.5!"
msgstr ""

# 1fee7b4bb0b04812ace8383d0db2b8db
# 362e65c5af2c46a29f3aec3285ff2fc9
#: ../../releases/1.5.txt:9 ../../releases/1.5-beta-1.txt:18
msgid ""
"These release notes cover the `new features`_, as well as some `backwards "
"incompatible changes`_ you'll want to be aware of when upgrading from Django "
"1.4 or older versions. We've also dropped some features, which are detailed "
"in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun "
"the deprecation process for some features`_."
msgstr ""

# 0d23cb8d49214ec3a863a27022e6c2f7
# d29ad6b31d9847c199d9bea8b2013286
# aaed98eabc9a48cdbe8d74d866044660
#: ../../releases/1.5.txt:23 ../../releases/1.5-alpha-1.txt:36
#: ../../releases/1.5-beta-1.txt:32
msgid ""
"The biggest new feature in Django 1.5 is the `configurable User model`_. "
"Before Django 1.5, applications that wanted to use Django's auth framework (:"
"mod:`django.contrib.auth`) were forced to use Django's definition of a \"user"
"\". In Django 1.5, you can now swap out the ``User`` model for one that you "
"write yourself. This could be a simple extension to the existing ``User`` "
"model -- for example, you could add a Twitter or Facebook ID field -- or you "
"could completely replace the ``User`` with one totally customized for your "
"site."
msgstr ""

# e88fd123298a419d90a8c3a53703c41f
# f05c13f2fd664d5e9422e694788f4d08
# 0922670dfa234f01b4b435f0ec8e1c07
#: ../../releases/1.5.txt:31 ../../releases/1.5-alpha-1.txt:44
#: ../../releases/1.5-beta-1.txt:40
msgid ""
"Django 1.5 is also the first release with `Python 3 support`_! We're "
"labeling this support \"experimental\" because we don't yet consider it "
"production-ready, but everything's in place for you to start porting your "
"apps to Python 3. Our next release, Django 1.6, will support Python 3 "
"without reservations."
msgstr ""

# 60ce18da83d247b7b9a3e54d13946849
# 25070a68e6c346c089c1fe14cad2956c
# 5f6568a6b4634f66a58a08f303d02b64
#: ../../releases/1.5.txt:36 ../../releases/1.5-alpha-1.txt:49
#: ../../releases/1.5-beta-1.txt:45
msgid "Other notable new features in Django 1.5 include:"
msgstr ""

# 8239d0138ce44a718facaf13b947ef35
# 259156cf93cb48f086c81f13a1bfc8e4
# f581408575e9487184cbfb1c9f457a14
#: ../../releases/1.5.txt:38 ../../releases/1.5-alpha-1.txt:51
#: ../../releases/1.5-beta-1.txt:47
msgid ""
"`Support for saving a subset of model's fields`_ - :meth:`Model.save() "
"<django.db.models.Model.save()>` now accepts an ``update_fields`` argument, "
"letting you specify which fields are written back to the database when you "
"call ``save()``. This can help in high-concurrency operations, and can "
"improve performance."
msgstr ""

# 2f8ec2bb5cef4a699daf35311baa1ac1
# 75a6cf0a0bf04167967ca69a368df9ec
#: ../../releases/1.5.txt:44 ../../releases/1.5-alpha-1.txt:57
msgid ""
"Better `support for streaming responses <#explicit-streaming-responses>`_ "
"via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""

# bdcb30c5122141a6a0efe194ba321824
# be6e8434aa66463690d5e3f5124e1456
# 2921be0912b24d3c951f9c971cfd5c2c
#: ../../releases/1.5.txt:47 ../../releases/1.5-alpha-1.txt:60
#: ../../releases/1.5-beta-1.txt:56
msgid "`GeoDjango`_ now supports PostGIS 2.0."
msgstr ""

# 60be051ddf854fb9ad9866c301f1f423
# 32fb893ed2514d359f0ebbb5fef81197
# 365757f9d2364cf6920e14bd4d3c6506
#: ../../releases/1.5.txt:49 ../../releases/1.5-alpha-1.txt:62
#: ../../releases/1.5-beta-1.txt:58
msgid "... and more; `see below <#what-s-new-in-django-1-5>`_."
msgstr ""

# 95d27459ad6a414a8fa5507f0b8ef6b8
# 07e08d8106bf404f96effb2bfaac1aa2
#: ../../releases/1.5.txt:51 ../../releases/1.5-beta-1.txt:60
msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible "
"manner per :doc:`our API stability policy </misc/api-stability>`. However, "
"as with previous releases, Django 1.5 ships with some minor `backwards "
"incompatible changes`_; people upgrading from previous versions of Django "
"should read that list carefully."
msgstr ""

# f8a616da278045f49a2af127d4798e80
# 836ec3ba46b8474b8fdbd8c88c782dc6
# eb3220ba5b9f453292933da9bb505419
#: ../../releases/1.5.txt:57 ../../releases/1.5-alpha-1.txt:70
#: ../../releases/1.5-beta-1.txt:66
msgid ""
"One deprecated feature worth noting is the shift to \"new-style\" :ttag:"
"`url` tag. Prior to Django 1.3, syntax like ``{% url myview %}`` was "
"interpreted incorrectly (Django considered ``\"myview\"`` to be a literal "
"name of a view, not a template variable named ``myview``). Django 1.3 and "
"above introduced the ``{% load url from future %}`` syntax to bring in the "
"corrected behavior where ``myview`` was seen as a variable."
msgstr ""

# 846f310348ca44e6a377ecb9ee18e447
# 538d88de615e4649abb21d981dd8ed59
# 2c44bc3264984b429055add5bf6c90be
#: ../../releases/1.5.txt:64 ../../releases/1.5-alpha-1.txt:77
#: ../../releases/1.5-beta-1.txt:73
msgid ""
"The upshot of this is that if you are not using ``{% load url from future %}"
"`` in your templates, you'll need to change tags like ``{% url myview %}`` "
"to ``{% url \"myview\" %}``. If you *were* using ``{% load url from future %}"
"`` you can simply remove that line under Django 1.5"
msgstr ""

# 0a567aa0198f4bc0beeb3e47e3193957
# 88444f0aaf9f476c9fef7d979433662f
#: ../../releases/1.5.txt:72 ../../releases/1.5-beta-1.txt:81
msgid ""
"Django 1.5 requires Python 2.6.5 or above, though we **highly recommend** "
"Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

# 44242e29689f40fa8a653aa3ea7cc7bd
# 6773640ac7b74ad69bef2f82f18abaec
# 4cf42d7e7379441586b6e1ead8bff8af
#: ../../releases/1.5.txt:75 ../../releases/1.5-alpha-1.txt:88
#: ../../releases/1.5-beta-1.txt:84
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.6 or newer as their "
"default version. If you're still using Python 2.5, however, you'll need to "
"stick to Django 1.4 until you can upgrade your Python version. Per :doc:`our "
"support policy </internals/release-process>`, Django 1.4 will continue to "
"receive security support until the release of Django 1.6."
msgstr ""

# 8ab959260e9f49459185a00fa4ec89fe
# af6d670bb62e436298cbba698be8fca7
# d90fce8e33b44fe9a932c388dbe9f952
#: ../../releases/1.5.txt:82 ../../releases/1.5-alpha-1.txt:95
#: ../../releases/1.5-beta-1.txt:91
msgid ""
"Django 1.5 does not run on a Jython final release, because Jython's latest "
"release doesn't currently support Python 2.6. However, Jython currently does "
"offer an alpha release featuring 2.7 support, and Django 1.5 supports that "
"alpha release."
msgstr ""

# 56ea0e11f4b042c58ac5fdcd08a72898
# af968e33c3a64e5d8e1a87e9a3caf761
# 81acc1e946824e20bad778f1849fe0ef
#: ../../releases/1.5.txt:88 ../../releases/1.5-alpha-1.txt:101
#: ../../releases/1.5-beta-1.txt:97
msgid "Python 3 support"
msgstr ""

# 3953de7d63254466a4c5d369fd6c45fc
# dc037d9a70c347d4894cb4edcb17cdbb
#: ../../releases/1.5.txt:90 ../../releases/1.5-beta-1.txt:99
msgid ""
"Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and "
"above. This comes in the form of a **single** codebase; you don't need to "
"install a different version of Django on Python 3. This means that you can "
"write applications targeted for just Python 2, just Python 3, or single "
"applications that support both platforms."
msgstr ""

# 8d61d4db2fc7471ca73646c9a78c40fe
#: ../../releases/1.5.txt:96
msgid ""
"However, we're labeling this support \"experimental\" for now: although it's "
"received extensive testing via our automated test suite, it's received very "
"little real-world testing. We've done our best to eliminate bugs, but we "
"can't be sure we covered all possible uses of Django."
msgstr ""

# f6d8e9160d5049f8b03ea5d80b235241
#: ../../releases/1.5.txt:101
msgid ""
"Some features of Django aren't available because they depend on third-party "
"software that hasn't been ported to Python 3 yet, including:"
msgstr ""

# e79bcba50cc04c139e68d3b73b39e0cd
#: ../../releases/1.5.txt:104
msgid "the MySQL database backend (depends on MySQLdb)"
msgstr ""

# 458eca59400845368b7312decc6ad076
#: ../../releases/1.5.txt:105
msgid ":class:`~django.db.models.ImageField` (depends on PIL)"
msgstr ""

# 86e47f56974e44b7998c94576b896577
#: ../../releases/1.5.txt:106
msgid ""
":class:`~django.test.LiveServerTestCase` (depends on Selenium WebDriver)"
msgstr ""

# 8f672c0cac93445fbb03280dfa493868
#: ../../releases/1.5.txt:108
msgid ""
"Further, Django's more than a web framework; it's an ecosystem of pluggable "
"components. At this point, very few third-party applications have been "
"ported to Python 3, so it's unlikely that a real-world application will have "
"all its dependencies satisfied under Python 3."
msgstr ""

# 2ca62924b5f4434f8c541552f296ce68
# a77f4938d3bd46c39c882c24611e13b7
# e4a5f794c99c4bd9a5a33a01c7029044
#: ../../releases/1.5.txt:113 ../../releases/1.5-alpha-1.txt:118
#: ../../releases/1.5-beta-1.txt:114
msgid ""
"Thus, we're recommending that Django 1.5 not be used in production under "
"Python 3. Instead, use this opportunity to begin :doc:`porting applications "
"to Python 3 </topics/python3>`. If you're an author of a pluggable "
"component, we encourage you to start porting now."
msgstr ""

# face9ad6ac544fe1a04e7a37369369c1
# fe1d27db804c4889a751dd89d6b1673d
# 3ffbe3dfc5f543aa8add43853cd1006b
#: ../../releases/1.5.txt:118 ../../releases/1.5-alpha-1.txt:123
#: ../../releases/1.5-beta-1.txt:119
msgid ""
"We plan to offer first-class, production-ready support for Python 3 in our "
"next release, Django 1.6."
msgstr ""

# b66ad72a831246af8b3428160bab4f10
# 642aca716b9e416e8418f4ce5a5c12e7
# d2112088ae5849d2aa866e7f2aa44a6b
#: ../../releases/1.5.txt:122 ../../releases/1.5-alpha-1.txt:127
#: ../../releases/1.5-beta-1.txt:123
msgid "What's new in Django 1.5"
msgstr ""

# bd3c22e13d054d6d851a16a9666bbb68
# e156496ec4a74ea5a1f76a72b8ee763b
# c0c7a1475db84586857a180a9a8734e4
#: ../../releases/1.5.txt:125 ../../releases/1.5-alpha-1.txt:130
#: ../../releases/1.5-beta-1.txt:126
msgid "Configurable User model"
msgstr ""

# 75e04c8983664c16ab3366804b2e90e2
# 75b4648f24e4467193ff25c4fd05c5c8
#: ../../releases/1.5.txt:127 ../../releases/1.5-beta-1.txt:128
msgid ""
"In Django 1.5, you can now use your own model as the store for user-related "
"data. If your project needs a username with more than 30 characters, or if "
"you want to store user's names in a format other than first name/last name, "
"or you want to put custom profile information onto your User object, you can "
"now do so."
msgstr ""

# fe11eaff4c6d4285a30315cb76c3400f
# 213866f24d0a450e8edcec56af1f16e1
# 30b991d6891341d882f74acf13c81968
#: ../../releases/1.5.txt:133 ../../releases/1.5-alpha-1.txt:138
#: ../../releases/1.5-beta-1.txt:134
msgid ""
"If you have a third-party reusable application that references the User "
"model, you may need to make some changes to the way you reference User "
"instances. You should also document any specific features of the User model "
"that your application relies upon."
msgstr ""

# 06eac8bbf908437d924cb88bb4a029b6
# 9ac03240ecee438ebee8cff0d966effd
# df24d9fdee5648cca8c1b624acc03ed6
#: ../../releases/1.5.txt:138 ../../releases/1.5-alpha-1.txt:143
#: ../../releases/1.5-beta-1.txt:139
msgid ""
"See the :ref:`documentation on custom User models <auth-custom-user>` for "
"more details."
msgstr ""

# 57bbd496fc194747b0456c93c9795c7e
# 97b08f0a8cf941a38aa359b3631de79f
# 5cb6a13aa8d04f24a9e40d3fe9e244b4
#: ../../releases/1.5.txt:142 ../../releases/1.5-alpha-1.txt:147
#: ../../releases/1.5-beta-1.txt:143
msgid "Support for saving a subset of model's fields"
msgstr ""

# d9d46b94037e449faca9d3c58cb3e075
# 7fba53f35d9c433985a9839537c0efb3
# 03558ad33dbe486ca2b93b1cae9f32c5
#: ../../releases/1.5.txt:144 ../../releases/1.5-alpha-1.txt:149
#: ../../releases/1.5-beta-1.txt:145
msgid ""
"The method :meth:`Model.save() <django.db.models.Model.save()>` has a new "
"keyword argument ``update_fields``. By using this argument it is possible to "
"save only a select list of model's fields. This can be useful for "
"performance reasons or when trying to avoid overwriting concurrent changes."
msgstr ""

# 10802622ae8a495b91472f22129ae8b1
#: ../../releases/1.5.txt:149
msgid ""
"Deferred instances (those loaded by ``.only()`` or ``.defer()``) will "
"automatically save just the loaded fields. If any field is set manually "
"after load, that field will also get updated on save."
msgstr ""

# 1d269e35da944d319edf4baac57b1715
# e11110b4232742658a4c065ca0ff3ad9
# 0cb78421dadd4127b9b61efe5349a7a8
#: ../../releases/1.5.txt:153 ../../releases/1.5-alpha-1.txt:158
#: ../../releases/1.5-beta-1.txt:154
msgid ""
"See the :meth:`Model.save() <django.db.models.Model.save()>` documentation "
"for more details."
msgstr ""

# 27c68f3124154ec5b746264744c32370
# bf498dffeb754987937047118323a4ad
# de9350f8373049309bbbfcad7e808437
#: ../../releases/1.5.txt:157 ../../releases/1.5-alpha-1.txt:162
#: ../../releases/1.5-beta-1.txt:158
msgid "Caching of related model instances"
msgstr ""

# 6ceac85b47ed4f74a43cdc81a18b2d86
# a5fd586aaf2d4a72bb47f9e66d50f911
# 2fc69176ac97467aabb2072ed15bae64
#: ../../releases/1.5.txt:159 ../../releases/1.5-alpha-1.txt:164
#: ../../releases/1.5-beta-1.txt:160
msgid ""
"When traversing relations, the ORM will avoid re-fetching objects that were "
"previously loaded. For example, with the tutorial's models::"
msgstr ""

# 3f297c2cde3748e4b12fdce042ee49ae
# 576b74f5dbd0406c848a67407444fa9c
# d516e91057734197a4bebef70281b369
#: ../../releases/1.5.txt:167 ../../releases/1.5-alpha-1.txt:172
#: ../../releases/1.5-beta-1.txt:168
msgid ""
"In Django 1.5, the third line no longer triggers a new SQL query to fetch "
"``first_choice.poll``; it was set by the second line."
msgstr ""

# 6a52b7482c754e18ad7f172f1ef73ff7
# 9e45ca03eaf2454687a3c8d4cf701e37
# 549083168ee24902b6cb5ac5c70f40d6
#: ../../releases/1.5.txt:170 ../../releases/1.5-alpha-1.txt:175
#: ../../releases/1.5-beta-1.txt:171
msgid ""
"For one-to-one relationships, both sides can be cached. For many-to-one "
"relationships, only the single side of the relationship can be cached. This "
"is particularly helpful in combination with ``prefetch_related``."
msgstr ""

# 8394e18ce6854d10943027b5e0a27964
# e912a644fe294d3d8afdbe05fd7e75da
# 346a6b15326c450e9858324aae05f8b0
#: ../../releases/1.5.txt:177 ../../releases/1.5-alpha-1.txt:180
#: ../../releases/1.5-beta-1.txt:178
msgid "Explicit support for streaming responses"
msgstr ""

# 7d625f8f88c142c4be5fc9fa3a3ec805
# 86fa01fe104d4485a665ff6c796cc9e1
# 6648f592d638416693ebfc2dc1f8f3b5
#: ../../releases/1.5.txt:179 ../../releases/1.5-alpha-1.txt:182
#: ../../releases/1.5-beta-1.txt:180
msgid ""
"Before Django 1.5, it was possible to create a streaming response by passing "
"an iterator to :class:`~django.http.HttpResponse`. But this was unreliable: "
"any middleware that accessed the :attr:`~django.http.HttpResponse.content` "
"attribute would consume the iterator prematurely."
msgstr ""

# 5492bc97ca904b769b9f8072da27d998
# 1539d5f7ee1149dab800eae9a4a80bec
# dadc55cf699340aaa27ff7d8782af6c7
#: ../../releases/1.5.txt:184 ../../releases/1.5-alpha-1.txt:187
#: ../../releases/1.5-beta-1.txt:185
msgid ""
"You can now explicitly generate a streaming response with the new :class:"
"`~django.http.StreamingHttpResponse` class. This class exposes a :class:"
"`~django.http.StreamingHttpResponse.streaming_content` attribute which is an "
"iterator."
msgstr ""

# f07380fd76654bb5a6ca00905a5bc0a9
# a0566c0e895b4869bcee43b60fe6f692
# 8155ea5d50f14b33843fff0a782c902c
#: ../../releases/1.5.txt:189 ../../releases/1.5-alpha-1.txt:192
#: ../../releases/1.5-beta-1.txt:190
msgid ""
"Since :class:`~django.http.StreamingHttpResponse` does not have a "
"``content`` attribute, middleware that needs access to the response content "
"must test for streaming responses and behave accordingly. See :ref:`response-"
"middleware` for more information."
msgstr ""

# 2b28dc48ef974448929bf1029cda6667
# 6876a1632cc54343b9983a0e79e64ef6
# d7d7993d814f4b64a65d8278ddf476c0
#: ../../releases/1.5.txt:195 ../../releases/1.5-alpha-1.txt:198
#: ../../releases/1.5-beta-1.txt:196
msgid "``{% verbatim %}`` template tag"
msgstr ""

# 846962e6686f4441be79ff48cfa6f3e0
# 53629f70e1974509a4ec8ba856bef4e4
# 12242657c26f42138084818730ad98a4
#: ../../releases/1.5.txt:197 ../../releases/1.5-alpha-1.txt:200
#: ../../releases/1.5-beta-1.txt:198
msgid ""
"To make it easier to deal with javascript templates which collide with "
"Django's syntax, you can now use the :ttag:`verbatim` block tag to avoid "
"parsing the tag's content."
msgstr ""

# 4c70c3a79c5e436093f6b132005a7d3f
# bd0c90b5e42a4b689fdb93b617ccefd7
# 5099448b02b2493aaa7940b0a92234f2
#: ../../releases/1.5.txt:202 ../../releases/1.5-alpha-1.txt:205
#: ../../releases/1.5-beta-1.txt:203
msgid "Retrieval of ``ContentType`` instances associated with proxy models"
msgstr ""

# 93e8d34442fd4aecba99901efd619509
# dd366a40feb4471092a997b0d6fd1970
# 8e975ef915f14c5c8c6df360d650202c
#: ../../releases/1.5.txt:204 ../../releases/1.5-alpha-1.txt:207
#: ../../releases/1.5-beta-1.txt:205
msgid ""
"The methods :meth:`ContentTypeManager.get_for_model() <django.contrib."
"contenttypes.models.ContentTypeManager.get_for_model()>` and :meth:"
"`ContentTypeManager.get_for_models() <django.contrib.contenttypes.models."
"ContentTypeManager.get_for_models()>` have a new keyword argument – "
"respectively ``for_concrete_model`` and ``for_concrete_models``. By passing "
"``False`` using this argument it is now possible to retrieve the :class:"
"`ContentType <django.contrib.contenttypes.models.ContentType>` associated "
"with proxy models."
msgstr ""

# 44ed0aa08680443cb6b007a065a89291
# f2ff4a47dcd24995b4c9d6cb8f216fdd
# 4381168fbeaf4aba85d21f94a65e949a
#: ../../releases/1.5.txt:212 ../../releases/1.5-alpha-1.txt:215
#: ../../releases/1.5-beta-1.txt:213
msgid "New ``view`` variable in class-based views context"
msgstr ""

# c5159058f50542269a14441fe68cd1b3
# 2237bde39e3e48ac8e8e3dcfe6235f3e
# 32447c6ebd7040dabf0337b7887a0365
#: ../../releases/1.5.txt:214 ../../releases/1.5-alpha-1.txt:217
#: ../../releases/1.5-beta-1.txt:215
msgid ""
"In all :doc:`generic class-based views </topics/class-based-views/index>` "
"(or any class-based view inheriting from ``ContextMixin``), the context "
"dictionary contains a ``view`` variable that points to the ``View`` instance."
msgstr ""

# f05b27f7bf754cf5969302353e91c073
# 950a94f57d994a2f9725669864aa5526
# 3e63880bf21546c483569382501eaf70
#: ../../releases/1.5.txt:221 ../../releases/1.5-alpha-1.txt:224
#: ../../releases/1.5-beta-1.txt:222
msgid ""
":class:`~django.contrib.gis.geos.LineString` and :class:`~django.contrib.gis."
"geos.MultiLineString` GEOS objects now support the :meth:`~django.contrib."
"gis.geos.GEOSGeometry.interpolate()` and :meth:`~django.contrib.gis.geos."
"GEOSGeometry.project()` methods (so-called linear referencing)."
msgstr ""

# 2187d68f730d49e092f076908d8c8bff
# af07d47a821f459682cb0dda208d1717
# 766a35140008444d88b42f17bace7ed5
#: ../../releases/1.5.txt:227 ../../releases/1.5-alpha-1.txt:230
#: ../../releases/1.5-beta-1.txt:228
msgid ""
"The ``wkb`` and ``hex`` properties of :class:`~django.contrib.gis.geos."
"GEOSGeometry` objects preserve the Z dimension."
msgstr ""

# 0e88015d743f46dcb93660459f9c96a8
# 61ede2aa4b7d4f0492a13f6c76b05f7c
# 651441ed0d8746feadb4a07188e55d9d
#: ../../releases/1.5.txt:231 ../../releases/1.5-alpha-1.txt:234
#: ../../releases/1.5-beta-1.txt:232
msgid ""
"Support for PostGIS 2.0 has been added and support for GDAL < 1.5 has been "
"dropped."
msgstr ""

# b1f9b38ad6e94b94a6e46bdb073b429b
#: ../../releases/1.5.txt:235
msgid "New tutorials"
msgstr ""

# 19dbe2ffb8884aabb061b09808499e58
#: ../../releases/1.5.txt:237
msgid ""
"Additions to the docs include a revamped :doc:`Tutorial 3</intro/"
"tutorial03>` and a new :doc:`tutorial on testing</intro/tutorial05>`. A new "
"section, \"Advanced Tutorials\", offers :doc:`How to write reusable apps </"
"intro/reusable-apps>` as well as a step-by-step guide for new contributors "
"in :doc:`Writing your first patch for Django </intro/contributing>`."
msgstr ""

# a20bcb7a0a774193a7412559a8246da4
# 84a57cbede7143b2a683086c0de1cc82
# 1b99603ef34847959917d145dca8c244
#: ../../releases/1.5.txt:246 ../../releases/1.5-alpha-1.txt:240
#: ../../releases/1.5-beta-1.txt:238
msgid "Django 1.5 also includes several smaller improvements worth noting:"
msgstr ""

# aca15c7d66be492486be2ea59f2d698f
# 02b7ea5e60c54a9f88d161979ed8916f
# 24308e844aca41ca811bba33a1a998b3
#: ../../releases/1.5.txt:248 ../../releases/1.5-alpha-1.txt:242
#: ../../releases/1.5-beta-1.txt:240
msgid ""
"The template engine now interprets ``True``, ``False`` and ``None`` as the "
"corresponding Python objects."
msgstr ""

# 3e6beb2950c74fa8ac16cc0adab9b81b
# 705698e1d205441cbb0788d45347a17d
# daa874181b1c43a8bff3365ef5e989f2
#: ../../releases/1.5.txt:251 ../../releases/1.5-alpha-1.txt:245
#: ../../releases/1.5-beta-1.txt:243
msgid ""
":mod:`django.utils.timezone` provides a helper for converting aware "
"datetimes between time zones. See :func:`~django.utils.timezone.localtime`."
msgstr ""

# 64fa143e05b34acfba59b77f9fd7336b
# 191185f661ca40919d0196e84eee5223
# 1758aac8eaa74676882d5fa2733832e4
#: ../../releases/1.5.txt:254 ../../releases/1.5-alpha-1.txt:248
#: ../../releases/1.5-beta-1.txt:246
msgid "The generic views support OPTIONS requests."
msgstr ""

# b32bbbcbdd3448b3a38bd0fbd314ed51
# c65a9157d93443dbb64e324ad26c2f58
# e0991a4253ec40d4a2fa2df532d7f0f5
#: ../../releases/1.5.txt:256 ../../releases/1.5-alpha-1.txt:250
#: ../../releases/1.5-beta-1.txt:248
msgid ""
"Management commands do not raise ``SystemExit`` any more when called by code "
"from :ref:`call_command <call-command>`. Any exception raised by the command "
"(mostly :ref:`CommandError <ref-command-exceptions>`) is propagated."
msgstr ""

# c4f082d4e8d142199c599fcf3e730250
#: ../../releases/1.5.txt:260
msgid ""
"Moreover, when you output errors or messages in your custom commands, you "
"should now use ``self.stdout.write('message')`` and ``self.stderr."
"write('error')`` (see the note on :ref:`management commands output "
"<management-commands-output>`)."
msgstr ""

# 625b9de5f65449229ff28a440dc1a2ee
# 149f4ab5d16243caafd008e6c218d3d8
# 5fd41de515944bf58ed2266cbca07375
#: ../../releases/1.5.txt:265 ../../releases/1.5-alpha-1.txt:254
#: ../../releases/1.5-beta-1.txt:252
msgid ""
"The dumpdata management command outputs one row at a time, preventing out-of-"
"memory errors when dumping large datasets."
msgstr ""

# 7e05c9648d4045d3a09119fa53bed010
# 4932267c3c2a43cd82b73e75409286a5
# 6394c3553bd14f1ea09e98060c506473
#: ../../releases/1.5.txt:268 ../../releases/1.5-alpha-1.txt:257
#: ../../releases/1.5-beta-1.txt:255
msgid ""
"In the localflavor for Canada, \"pq\" was added to the acceptable codes for "
"Quebec. It's an old abbreviation."
msgstr ""

# dd6b87de81034d95be9d2026569557aa
# 3ebe910e0fc14f0a994f13249a6a4133
# b3441b8f35dc4c919bada8994fbbaaa4
#: ../../releases/1.5.txt:271 ../../releases/1.5-alpha-1.txt:260
#: ../../releases/1.5-beta-1.txt:258
msgid ""
"The :ref:`receiver <connecting-receiver-functions>` decorator is now able to "
"connect to more than one signal by supplying a list of signals."
msgstr ""

# 8b0696616128464d8c8ef19e60f599a8
# 6624ff3a506c415d99f5a2d207af6d2c
# 59101b85d81c46ff9ba3fa04002080ea
#: ../../releases/1.5.txt:274 ../../releases/1.5-alpha-1.txt:263
#: ../../releases/1.5-beta-1.txt:261
msgid ""
"In the admin, you can now filter users by groups which they are members of."
msgstr ""

# 6d5d0a14b54b4c7da675afdd3c4fc139
# edd9bd3809b94072b08a22003d6339d5
# 608538a4de6e46598911573d7ea0f04a
#: ../../releases/1.5.txt:276 ../../releases/1.5-alpha-1.txt:265
#: ../../releases/1.5-beta-1.txt:263
msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` "
"now has a batch_size argument. By default the batch_size is unlimited except "
"for SQLite where single batch is limited so that 999 parameters per query "
"isn't exceeded."
msgstr ""

# ffb1c9c6626b40bbb2ba72f05a028aec
# a9e4839510c847c5aa86bd12cf62277b
# fb0a5e7bdd8b4ed9b1d71bea7f189dbd
#: ../../releases/1.5.txt:281 ../../releases/1.5-alpha-1.txt:270
#: ../../releases/1.5-beta-1.txt:268
msgid ""
"The :setting:`LOGIN_URL` and :setting:`LOGIN_REDIRECT_URL` settings now also "
"accept view function names and :ref:`named URL patterns <naming-url-"
"patterns>`. This allows you to reduce configuration duplication. More "
"information can be found in the :func:`~django.contrib.auth.decorators."
"login_required` documentation."
msgstr ""

# 4ef76c12546542e2ae8c6a69820142e8
# 2e7174b566954a25a6bbf54689d0d096
# 7132ffe505fb475bb58edbcaeb725b88
#: ../../releases/1.5.txt:287 ../../releases/1.5-alpha-1.txt:276
#: ../../releases/1.5-beta-1.txt:274
msgid ""
"Django now provides a mod_wsgi :doc:`auth handler </howto/deployment/wsgi/"
"apache-auth>`."
msgstr ""

# f15b467369814e7ea4ebd159bff9b93d
# e91ee3da451347c7b1fe715d28dc56e7
# 08b2fd91cc0d42e5a48faad9f569917a
#: ../../releases/1.5.txt:290 ../../releases/1.5-alpha-1.txt:279
#: ../../releases/1.5-beta-1.txt:277
msgid ""
"The :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` and :"
"meth:`Model.delete() <django.db.models.Model.delete()>` can now take fast-"
"path in some cases. The fast-path allows for less queries and less objects "
"fetched into memory. See :meth:`QuerySet.delete() <django.db.models.query."
"QuerySet.delete>` for details."
msgstr ""

# 8e65014a375945fc8d51b29b7abee41e
# b541aaf77db54ef9a0732d25e156c263
# b4018307a98b4b6cbb95d7da848672b1
#: ../../releases/1.5.txt:296 ../../releases/1.5-alpha-1.txt:285
#: ../../releases/1.5-beta-1.txt:283
msgid ""
"An instance of :class:`~django.core.urlresolvers.ResolverMatch` is stored on "
"the request as ``resolver_match``."
msgstr ""

# 0cf4f9d949af46379f86fdd36ee4c3db
# 4c2e8b96b8ef4f18a48ad3d7ee829483
# 41506eccad5346f088d1af0f931740b2
#: ../../releases/1.5.txt:299 ../../releases/1.5-alpha-1.txt:288
#: ../../releases/1.5-beta-1.txt:286
msgid ""
"By default, all logging messages reaching the ``django`` logger when :"
"setting:`DEBUG` is ``True`` are sent to the console (unless you redefine the "
"logger in your :setting:`LOGGING` setting)."
msgstr ""

# 2365375c7fb8474c9a91cd253beb5f87
# c6a17ba7e1a948cfb3bc86c9b140fe8c
# 5e9a31a1f1854e7f8caae165743755c2
#: ../../releases/1.5.txt:303 ../../releases/1.5-alpha-1.txt:292
#: ../../releases/1.5-beta-1.txt:290
msgid ""
"When using :class:`~django.template.RequestContext`, it is now possible to "
"look up permissions by using ``{% if 'someapp.someperm' in perms %}`` in "
"templates."
msgstr ""

# 2f8e04d958554120b3e568dfcdf074b4
# b24ea67827fc4562a4fbc8f79931001d
# 53acb871515e49088a35b3b3ded28ed1
#: ../../releases/1.5.txt:307 ../../releases/1.5-alpha-1.txt:296
#: ../../releases/1.5-beta-1.txt:294
msgid ""
"It's not required any more to have ``404.html`` and ``500.html`` templates "
"in the root templates directory. Django will output some basic error "
"messages for both situations when those templates are not found. Of course, "
"it's still recommended as good practice to provide those templates in order "
"to present pretty error pages to the user."
msgstr ""

# a62ecd5233c04299b6bb4f58c613439e
# 7ac056065dc941de9b0a0c27cb4b80e9
# bf77a37641b1492bb38d2a757c0761a4
#: ../../releases/1.5.txt:313 ../../releases/1.5-alpha-1.txt:302
#: ../../releases/1.5-beta-1.txt:300
msgid ""
":mod:`django.contrib.auth` provides a new signal that is emitted whenever a "
"user fails to login successfully. See :data:`~django.contrib.auth.signals."
"user_login_failed`"
msgstr ""

# af4c7e857dbe4ebca1faaab9905f924f
# a8b7b447e7474605ac6698a5b157aa82
# eff716dd8bed4160bdee966cae335e6c
#: ../../releases/1.5.txt:317 ../../releases/1.5-alpha-1.txt:306
#: ../../releases/1.5-beta-1.txt:304
msgid ""
"The loaddata management command now supports an :djadminopt:`--"
"ignorenonexistent` option to ignore data for fields that no longer exist."
msgstr ""

# cba1623091ed49ed902cf233590457cf
# ca21fc6e0c4f42c7b06b2aef6077256b
# 6033e9b6d5b34a20a9e370b552ea5ed2
#: ../../releases/1.5.txt:321 ../../releases/1.5-alpha-1.txt:310
#: ../../releases/1.5-beta-1.txt:308
msgid ""
":meth:`~django.test.SimpleTestCase.assertXMLEqual` and :meth:`~django.test."
"SimpleTestCase.assertXMLNotEqual` new assertions allow you to test equality "
"for XML content at a semantic level, without caring for syntax differences "
"(spaces, attribute order, etc.)."
msgstr ""

# a28507ed28da41189f24bc63faa5f306
# 3528d47333ad4413ac658b83721ea036
#: ../../releases/1.5.txt:326 ../../releases/1.5-beta-1.txt:313
msgid ""
"RemoteUserMiddleware now forces logout when the REMOTE_USER header "
"disappears during the same browser session."
msgstr ""

# 5cf38ddc3a034970a8aba648885ece72
# 0ae9fd082d9f451fb4ff7a04b2af8e5f
#: ../../releases/1.5.txt:329 ../../releases/1.5-beta-1.txt:316
msgid ""
"The :ref:`cache-based session backend <cached-sessions-backend>` can store "
"session data in a non-default cache."
msgstr ""

# 277586168c6845e39bcee9a7cd83cb86
# 8d739f732459470eb4b47970d14684ab
#: ../../releases/1.5.txt:332 ../../releases/1.5-beta-1.txt:319
msgid ""
"Multi-column indexes can now be created on models. Read the :attr:`~django."
"db.models.Options.index_together` documentation for more information."
msgstr ""

# c19371d99a3849c682ce14f80e159fba
# f1d54fa93d94480aaf170da13b01200b
#: ../../releases/1.5.txt:336 ../../releases/1.5-beta-1.txt:323
msgid ""
"During Django's logging configuration verbose Deprecation warnings are "
"enabled and warnings are captured into the logging system. Logged warnings "
"are routed through the ``console`` logging handler, which by default "
"requires :setting:`DEBUG` to be True for output to be generated. The result "
"is that DeprecationWarnings should be printed to the console in development "
"environments the way they have been in Python versions < 2.7."
msgstr ""

# ab34399118a840e886cbff725bb9eed2
# 113131388a5d48aa82c8117fa7b5b895
#: ../../releases/1.5.txt:343 ../../releases/1.5-beta-1.txt:330
msgid ""
"The API for :meth:`django.contrib.admin.ModelAdmin.message_user` method has "
"been modified to accept additional arguments adding capabilities similar to :"
"func:`django.contrib.messages.add_message`. This is useful for generating "
"error messages from admin actions."
msgstr ""

# 37d77042240446d8a42eb95501b70bc0
# 17a13d66f18d4270ad15760a3fdf893f
#: ../../releases/1.5.txt:348 ../../releases/1.5-beta-1.txt:335
msgid ""
"The admin's list filters can now be customized per-request thanks to the "
"new :meth:`django.contrib.admin.ModelAdmin.get_list_filter` method."
msgstr ""

# 89da79e69a7b46a787f760230c00c0c4
# 2f9bc1f22374404eb3db6a2283c5be72
# 0fc39b2154684a2b93f211c2593b542c
#: ../../releases/1.5.txt:352 ../../releases/1.5-alpha-1.txt:316
#: ../../releases/1.5-beta-1.txt:339
msgid "Backwards incompatible changes in 1.5"
msgstr ""

# 1a5d66a9da844d0a86e5f4cab0c57293
# eb8d7957bb374a3a9d84a414f0391ee3
# bc5aa408a936426bbbe3accd11dbafba
#: ../../releases/1.5.txt:356 ../../releases/1.5-alpha-1.txt:320
#: ../../releases/1.5-beta-1.txt:343
msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"doc:`deprecation plan </internals/deprecation>` for any features that have "
"been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

# bc2f543bea3349e89c581af0c16b43af
#: ../../releases/1.5.txt:363
msgid "``ALLOWED_HOSTS`` required in production"
msgstr ""

# 86fdf0904ecb434d8d7e562569271224
#: ../../releases/1.5.txt:365
msgid ""
"The new :setting:`ALLOWED_HOSTS` setting validates the request's ``Host`` "
"header and protects against host-poisoning attacks. This setting is now "
"required whenever :setting:`DEBUG` is ``False``, or else :meth:`django.http."
"HttpRequest.get_host()` will raise :exc:`~django.core.exceptions."
"SuspiciousOperation`. For more details see the :setting:`full "
"documentation<ALLOWED_HOSTS>` for the new setting."
msgstr ""

# 8721c7d7146c47c7b3757db59acf69f2
#: ../../releases/1.5.txt:373
msgid "Managers on abstract models"
msgstr ""

# afd83141c03b47a78cffe1b122a79b57
#: ../../releases/1.5.txt:375
msgid ""
"Abstract models are able to define a custom manager, and that manager :ref:"
"`will be inherited by any concrete models extending the abstract model "
"<custom-managers-and-inheritance>`. However, if you try to use the abstract "
"model to call a method on the manager, an exception will now be raised. "
"Previously, the call would have been permitted, but would have failed as "
"soon as any database operation was attempted (usually with a \"table does "
"not exist\" error from the database)."
msgstr ""

# 328f5dcb47a847a5aab1e050ace417a5
#: ../../releases/1.5.txt:383
msgid ""
"If you have functionality on a manager that you have been invoking using the "
"abstract class, you should migrate that logic to a Python ``staticmethod`` "
"or ``classmethod`` on the abstract class."
msgstr ""

# 67f04ce0fec7429497254e16383e53b6
# 9ad9021998124fe0aaf0bd6ac9669058
# da1fb59d7d3145f9b36bce8ceaa8a269
#: ../../releases/1.5.txt:388 ../../releases/1.5-alpha-1.txt:327
#: ../../releases/1.5-beta-1.txt:350
msgid "Context in year archive class-based views"
msgstr ""

# e711e1ec491b4fd3a06f87aaf191e698
# 19626bc19db44b35898f69cc9e384937
# 1d3c04f2cdbe45f695b04d8f9ba71e16
#: ../../releases/1.5.txt:390 ../../releases/1.5-alpha-1.txt:329
#: ../../releases/1.5-beta-1.txt:352
msgid ""
"For consistency with the other date-based generic views, :class:`~django."
"views.generic.dates.YearArchiveView` now passes ``year`` in the context as "
"a :class:`datetime.date` rather than a string.  If you are using ``{{ year }}"
"`` in your templates, you must replace it with ``{{ year|date:\"Y\" }}``."
msgstr ""

# 936e4ef3c81143aa8b67131fc0c86f31
# b88001ba90dd40c4b0bed0e5c387a5c6
# 7fb819c2ea764777964dd53575bb4557
#: ../../releases/1.5.txt:396 ../../releases/1.5-alpha-1.txt:335
#: ../../releases/1.5-beta-1.txt:358
msgid ""
"``next_year`` and ``previous_year`` were also added in the context. They are "
"calculated according to ``allow_empty`` and ``allow_future``."
msgstr ""

# efb44dccd08c478d889fc9d7fc5154f2
# 966af00797c144fdb43ffe84df9178bb
# 25573c8544fb488ea6b28e8829673e0c
#: ../../releases/1.5.txt:400 ../../releases/1.5-alpha-1.txt:339
#: ../../releases/1.5-beta-1.txt:362
msgid "Context in year and month archive class-based views"
msgstr ""

# 94a1264656c44acbbc54733db2fa4944
# 3e7a6604ab2c4dfea7e3efd22a2009a4
# 8dea1f096fc842529aee75516c5b4825
#: ../../releases/1.5.txt:402 ../../releases/1.5-alpha-1.txt:341
#: ../../releases/1.5-beta-1.txt:364
msgid ""
":class:`~django.views.generic.dates.YearArchiveView` and :class:`~django."
"views.generic.dates.MonthArchiveView` were documented to provide a "
"``date_list`` sorted in ascending order in the context, like their function-"
"based predecessors, but it actually was in descending order. In 1.5, the "
"documented order was restored. You may want to add (or remove) the "
"``reversed`` keyword when you're iterating on ``date_list`` in a template::"
msgstr ""

# 0ac322e700d5484297f1f91d7908e11e
# 9b5cd331d9c142e1a532ebd81e77b350
# aeb231bdc5b046e7b75cd9fddf7467ca
#: ../../releases/1.5.txt:411 ../../releases/1.5-alpha-1.txt:350
#: ../../releases/1.5-beta-1.txt:373
msgid ""
":class:`~django.views.generic.dates.ArchiveIndexView` still provides a "
"``date_list`` in descending order."
msgstr ""

# a8f1dfd2ba9242f89e0d49ff5246be4e
# 72ca676ae56d46ba8070b3485165dcbd
# 7247693c446548ad98241d8ff37d77d2
#: ../../releases/1.5.txt:415 ../../releases/1.5-alpha-1.txt:354
#: ../../releases/1.5-beta-1.txt:377
msgid "Context in TemplateView"
msgstr ""

# 3fdcecd90be94d2498d64dc3842baa99
# 8d0fac9ef6b74d1b94ef8bac034d90b0
# 92c59998afca4d1db898c7c93d57a7ad
#: ../../releases/1.5.txt:417 ../../releases/1.5-alpha-1.txt:356
#: ../../releases/1.5-beta-1.txt:379
msgid ""
"For consistency with the design of the other generic views, :class:`~django."
"views.generic.base.TemplateView` no longer passes a ``params`` dictionary "
"into the context, instead passing the variables from the URLconf directly "
"into the context."
msgstr ""

# 13c6b68d78d640b8adb9ed05f84d9fac
# 3676c02c5b7d493687c07e5d204fb02f
# baf92a7b783d405e9ec3962696a36d62
#: ../../releases/1.5.txt:423 ../../releases/1.5-alpha-1.txt:362
#: ../../releases/1.5-beta-1.txt:385
msgid "Non-form data in HTTP requests"
msgstr ""

# b5103296b7704667af297bcb4ebc8c6f
# 6731333c26e64380903d1ed526657ffd
# 504ae03e2b8f4d0d9519504f2212cca7
#: ../../releases/1.5.txt:425 ../../releases/1.5-alpha-1.txt:364
#: ../../releases/1.5-beta-1.txt:387
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` will no longer include "
"data posted via HTTP requests with non form-specific content-types in the "
"header. In prior versions, data posted with content-types other than "
"``multipart/form-data`` or ``application/x-www-form-urlencoded`` would still "
"end up represented in the :attr:`request.POST <django.http.HttpRequest."
"POST>` attribute. Developers wishing to access the raw POST data for these "
"cases, should use the :attr:`request.body <django.http.HttpRequest.body>` "
"attribute instead."
msgstr ""

# c09e2edfc6c844418e24abdf70b47739
#: ../../releases/1.5.txt:435
msgid ":data:`~django.core.signals.request_finished` signal"
msgstr ""

# 16058a3f3d25418394c03022da9ba7db
#: ../../releases/1.5.txt:437
msgid ""
"Django used to send the :data:`~django.core.signals.request_finished` signal "
"as soon as the view function returned a response. This interacted badly "
"with :ref:`streaming responses <httpresponse-streaming>` that delay content "
"generation."
msgstr ""

# aa1d90e937b94d93984bcff7c50cdaa4
#: ../../releases/1.5.txt:442
msgid ""
"This signal is now sent after the content is fully consumed by the WSGI "
"gateway. This might be backwards incompatible if you rely on the signal "
"being fired before sending the response content to the client. If you do, "
"you should consider using :doc:`middleware </topics/http/middleware>` "
"instead."
msgstr ""

# 36df3085aff649a8b8f051bf62d29ff8
#: ../../releases/1.5.txt:449
msgid ""
"Some WSGI servers and middleware do not always call ``close`` on the "
"response object after handling a request, most notably uWSGI prior to 1.2.6 "
"and Sentry's error reporting middleware up to 2.0.7. In those cases the "
"``request_finished`` signal isn't sent at all. This can result in idle "
"connections to database and memcache servers."
msgstr ""

# a8e2c1206f184ddb8998ff3e66ee8c95
# f701090465494bdebd4afb43d871f4a4
# 02c01d19b67443ee8a8450ee5699ccd3
#: ../../releases/1.5.txt:448 ../../releases/1.5-alpha-1.txt:374
#: ../../releases/1.5-beta-1.txt:397
msgid "OPTIONS, PUT and DELETE requests in the test client"
msgstr ""

# e584f6b579d54a88941ae11bcceddeac
# 1829c15a396c4b81831dfd46d4160181
# 1a8bcb8bf8f34373b898824d28c10d1c
#: ../../releases/1.5.txt:450 ../../releases/1.5-alpha-1.txt:376
#: ../../releases/1.5-beta-1.txt:399
msgid ""
"Unlike GET and POST, these HTTP methods aren't implemented by web browsers. "
"Rather, they're used in APIs, which transfer data in various formats such as "
"JSON or XML. Since such requests may contain arbitrary data, Django doesn't "
"attempt to decode their body."
msgstr ""

# c1e53a097b6748758e5a2924c41a7955
# 413a23113a784b668474fedde5d2c31a
# 5d67cc2896084124a9e48b905ba8df7e
#: ../../releases/1.5.txt:455 ../../releases/1.5-alpha-1.txt:381
#: ../../releases/1.5-beta-1.txt:404
msgid ""
"However, the test client used to build a query string for OPTIONS and DELETE "
"requests like for GET, and a request body for PUT requests like for POST. "
"This encoding was arbitrary and inconsistent with Django's behavior when it "
"receives the requests, so it was removed in Django 1.5."
msgstr ""

# f01079adcb5b475b95c86c0dd9d1b3c4
# 6160d6771d034cc685b64b35982f2dbc
# 5b3f3f06c545448b9d3798054567ad33
#: ../../releases/1.5.txt:460 ../../releases/1.5-alpha-1.txt:386
#: ../../releases/1.5-beta-1.txt:409
msgid ""
"If you were using the ``data`` parameter in an OPTIONS or a DELETE request, "
"you must convert it to a query string and append it to the ``path`` "
"parameter."
msgstr ""

# 8a6d0e6b7165490696dc167c5e8f1534
# 20f7e54d486644909aade20bb64da358
# a52a64c3bbbd48dc988ca552612f3cd1
#: ../../releases/1.5.txt:463 ../../releases/1.5-alpha-1.txt:389
#: ../../releases/1.5-beta-1.txt:412
msgid ""
"If you were using the ``data`` parameter in a PUT request without a "
"``content_type``, you must encode your data before passing it to the test "
"client and set the ``content_type`` argument."
msgstr ""

# a904dc7ce23548b7be518f71e8564772
# d8ec26d1deee433cb893a81619e436e3
# 3713cb68a601479c9d082f7f6e629517
#: ../../releases/1.5.txt:470 ../../releases/1.5-alpha-1.txt:394
#: ../../releases/1.5-beta-1.txt:419
msgid "System version of :mod:`simplejson` no longer used"
msgstr ""

# 2a31fecb0cd84af488c2f546594e44d0
#: ../../releases/1.5.txt:472
msgid ""
":ref:`As explained below <simplejson-deprecation>`, Django 1.5 deprecates "
"``django.utils.simplejson`` in favor of Python 2.6's built-in :mod:`json` "
"module. In theory, this change is harmless. Unfortunately, because of "
"incompatibilities between versions of :mod:`simplejson`, it may trigger "
"errors in some circumstances."
msgstr ""

# 11fffd4169c345d0a498520dbfcb904b
# 5ed3f53ae56e4938a4f1c04422242a92
# afd83505839e4839821bb464adcd90db
#: ../../releases/1.5.txt:478 ../../releases/1.5-alpha-1.txt:402
#: ../../releases/1.5-beta-1.txt:427
msgid ""
"JSON-related features in Django 1.4 always used ``django.utils.simplejson``. "
"This module was actually:"
msgstr ""

# 33c63f578a65428cb7e2447edd19e178
# d3ca032b9d4a4ef98a3112b87dc1fed1
# a28880019b6647fb9b02acca89dca9f8
#: ../../releases/1.5.txt:481 ../../releases/1.5-alpha-1.txt:405
#: ../../releases/1.5-beta-1.txt:430
msgid ""
"A system version of :mod:`simplejson`, if one was available (ie. ``import "
"simplejson`` works), if it was more recent than Django's built-in copy or it "
"had the C speedups, or"
msgstr ""

# eed7556a409447b1852c10b6b42510c6
# 0c77205267404a92a202bec59f804179
# bfdf580b06164429b781b718dabc7050
#: ../../releases/1.5.txt:484 ../../releases/1.5-alpha-1.txt:408
#: ../../releases/1.5-beta-1.txt:433
msgid ""
"The :mod:`json` module from the standard library, if it was available (ie. "
"Python 2.6 or greater), or"
msgstr ""

# 6e2abd0805f941e1ab9dae52d23c9f13
# 1d3d3399ad93423ea9d2ac39a1e3debe
# 18ea3c74e1b34ca0b27e5a4d4670ad92
#: ../../releases/1.5.txt:486 ../../releases/1.5-alpha-1.txt:410
#: ../../releases/1.5-beta-1.txt:435
msgid "A built-in copy of version 2.0.7 of :mod:`simplejson`."
msgstr ""

# c686d4ea5c3d47b493b5bde46d93b291
# cfe323bd4d0a4341971e5d97d06c9081
# 496681c6a3dd479883df9f6e8c98a554
#: ../../releases/1.5.txt:488 ../../releases/1.5-alpha-1.txt:412
#: ../../releases/1.5-beta-1.txt:437
msgid ""
"In Django 1.5, those features use Python's :mod:`json` module, which is "
"based on version 2.0.9 of :mod:`simplejson`."
msgstr ""

# d1f4617510d5472280e530b8fed89414
# 421d71a53ae044e285015d154f8203d3
# 1cdf6f59a96541b38fd3e837a5027d26
#: ../../releases/1.5.txt:491 ../../releases/1.5-alpha-1.txt:415
#: ../../releases/1.5-beta-1.txt:440
msgid ""
"There are no known incompatibilities between Django's copy of version 2.0.7 "
"and Python's copy of version 2.0.9. However, there are some "
"incompatibilities between other versions of :mod:`simplejson`:"
msgstr ""

# 81ec6418ab604277be0dc746b6235427
# 0d8a848d5122480397eef56c3a92b05d
# 34ffbd254dbd4682a102160c16fc6d64
#: ../../releases/1.5.txt:495 ../../releases/1.5-alpha-1.txt:419
#: ../../releases/1.5-beta-1.txt:444
msgid ""
"While the :mod:`simplejson` API is documented as always returning unicode "
"strings, the optional C implementation can return a byte string. This was "
"fixed in Python 2.7."
msgstr ""

# 7a8cdf9e819c4506820ddfa0654859a5
# 57d6e4e0700b439c92c16f53da6d8b97
# 0feb6277558c42f39f1c713b532614b8
#: ../../releases/1.5.txt:498 ../../releases/1.5-alpha-1.txt:422
#: ../../releases/1.5-beta-1.txt:447
msgid ""
":class:`simplejson.JSONEncoder` gained a ``namedtuple_as_object`` keyword "
"argument in version 2.2."
msgstr ""

# b27f9b4aa7be45359425269391665f32
# b70a35169d4f4852adb25a1d8a7fa3cf
# 135e046348c24006ad33c456de5adf44
#: ../../releases/1.5.txt:501 ../../releases/1.5-alpha-1.txt:425
#: ../../releases/1.5-beta-1.txt:450
msgid ""
"More information on these incompatibilities is available in `ticket #18023`_."
msgstr ""

# 8d94e2207940489e878e9d3ed4aaeb7c
# ef273ca8dc0c4be2a3f9668e664c3bea
# a1c487f6403641559197801d78a54f5f
#: ../../releases/1.5.txt:503 ../../releases/1.5-alpha-1.txt:427
#: ../../releases/1.5-beta-1.txt:452
msgid ""
"The net result is that, if you have installed :mod:`simplejson` and your "
"code uses Django's serialization internals directly -- for instance ``django."
"core.serializers.json.DjangoJSONEncoder``, the switch from :mod:`simplejson` "
"to :mod:`json` could break your code. (In general, changes to internals "
"aren't documented; we're making an exception here.)"
msgstr ""

# 17c556163b5e45349954f68a67e9764e
# 292e35f226be4a9a8d9cab275c3a240e
# 2757717ba91c45c58d04971d68a3ac34
#: ../../releases/1.5.txt:509 ../../releases/1.5-alpha-1.txt:433
#: ../../releases/1.5-beta-1.txt:458
msgid ""
"At this point, the maintainers of Django believe that using :mod:`json` from "
"the standard library offers the strongest guarantee of backwards-"
"compatibility. They recommend to use it from now on."
msgstr ""

# 8405f3a9656f465d83cc8cc763ce95f8
# 511f883c148546d3a69af04087bc6abe
# ef4fa0b95bda4c939464f934ad3a6cf1
#: ../../releases/1.5.txt:516 ../../releases/1.5-alpha-1.txt:440
#: ../../releases/1.5-beta-1.txt:465
msgid "String types of hasher method parameters"
msgstr ""

# a1108aa553c5414cb7dd25e8ae4a135a
# 2d8d70f60a5141b7a9d96ffc915cdadd
# ff6770de0615481f987841b25f02e48b
#: ../../releases/1.5.txt:518 ../../releases/1.5-alpha-1.txt:442
#: ../../releases/1.5-beta-1.txt:467
msgid ""
"If you have written a :ref:`custom password hasher <auth_password_storage>`, "
"your ``encode()``, ``verify()`` or ``safe_summary()`` methods should accept "
"Unicode parameters (``password``, ``salt`` or ``encoded``). If any of the "
"hashing methods need byte strings, you can use the :func:`~django.utils."
"encoding.force_bytes` utility to encode the strings."
msgstr ""

# 10b8b0c3efaf4435b373ffdb92c48617
# ed8a802ad7664dad837c605cb704b82b
# 4e148c03c90a432589586eb151382be1
#: ../../releases/1.5.txt:525 ../../releases/1.5-alpha-1.txt:449
#: ../../releases/1.5-beta-1.txt:474
msgid "Validation of previous_page_number and next_page_number"
msgstr ""

# e5291f259d9b41dabbebcf4cb17cc4de
# 00ede253b7f8467a8f62a4259220bb36
# 2e03dc3440ee4c8a995637e6a19a156f
#: ../../releases/1.5.txt:527 ../../releases/1.5-alpha-1.txt:451
#: ../../releases/1.5-beta-1.txt:476
msgid ""
"When using :doc:`object pagination </topics/pagination>`, the "
"``previous_page_number()`` and ``next_page_number()`` methods of the :class:"
"`~django.core.paginator.Page` object did not check if the returned number "
"was inside the existing page range. It does check it now and raises an :exc:"
"`~django.core.paginator.InvalidPage` exception when the number is either too "
"low or too high."
msgstr ""

# f96d606b1268433d91ed13ff4a8c826b
# 1f35e0f0684e4e51b7f5ab914379b186
# 3044e3bf113d4d828e7b09775c38dac2
#: ../../releases/1.5.txt:535 ../../releases/1.5-alpha-1.txt:459
#: ../../releases/1.5-beta-1.txt:484
msgid "Behavior of autocommit database option on PostgreSQL changed"
msgstr ""

# 6a095d56fee04efa8fa5d5c1f9f76083
# 275634b4ea1544fc98e8aa95d7fd8b32
# fd84acbd459548488b7c610afba41801
#: ../../releases/1.5.txt:537 ../../releases/1.5-alpha-1.txt:461
#: ../../releases/1.5-beta-1.txt:486
msgid ""
"PostgreSQL's autocommit option didn't work as advertised previously. It did "
"work for single transaction block, but after the first block was left the "
"autocommit behavior was never restored. This bug is now fixed in 1.5. While "
"this is only a bug fix, it is worth checking your applications behavior if "
"you are using PostgreSQL together with the autocommit option."
msgstr ""

# 0a324aa3a99f40e3975b8e5e1d56c13a
# 61b6b94bec6e4d3485776b89f5062a78
# a3f9b0a04e5145ddad1960f84d18019d
#: ../../releases/1.5.txt:544 ../../releases/1.5-alpha-1.txt:468
#: ../../releases/1.5-beta-1.txt:493
msgid "Session not saved on 500 responses"
msgstr ""

# 87b956d7c7404226867434d0ae058ca3
# 7843c539775e4b2fb836c3b0c137af87
# 9940bf61974a40d9a82688d2a500f3f5
#: ../../releases/1.5.txt:546 ../../releases/1.5-alpha-1.txt:470
#: ../../releases/1.5-beta-1.txt:495
msgid ""
"Django's session middleware will skip saving the session data if the "
"response's status code is 500."
msgstr ""

# 3db5092c41df4887a32ba784a6df4288
# dde2a6634f6a4646bdd3ec5a5a224ade
# b02b2b93316c49709dac0e73bcf9697c
#: ../../releases/1.5.txt:550 ../../releases/1.5-alpha-1.txt:474
#: ../../releases/1.5-beta-1.txt:499
msgid "Email checks on failed admin login"
msgstr ""

# 78c885fbb73943069785a3e2b7c7541c
# 4bc4a334665f43d7a9b8146b5e7b507e
# 849b9fc24ed242e4888fb7af7f929294
#: ../../releases/1.5.txt:552 ../../releases/1.5-alpha-1.txt:476
#: ../../releases/1.5-beta-1.txt:501
msgid ""
"Prior to Django 1.5, if you attempted to log into the admin interface and "
"mistakenly used your email address instead of your username, the admin "
"interface would provide a warning advising that your email address was not "
"your username. In Django 1.5, the introduction of :ref:`custom User models "
"<auth-custom-user>` has required the removal of this warning. This doesn't "
"change the login behavior of the admin site; it only affects the warning "
"message that is displayed under one particular mode of login failure."
msgstr ""

# 49d090adc2fc410da62775eabe7bc508
# 6a1b0736f8fd4b228b10fc5ea2929fa6
# 3c9a6a5cb3d9438f8a6b129ecace9185
#: ../../releases/1.5.txt:562 ../../releases/1.5-alpha-1.txt:486
#: ../../releases/1.5-beta-1.txt:511
msgid "Changes in tests execution"
msgstr ""

# b3c92d8c7a984f18b477944a7bf81cfd
# 9524d3fe970c4d42b36cc9c0400e5ffd
# 582394589c1b4bdc857268ac685d9791
#: ../../releases/1.5.txt:564 ../../releases/1.5-alpha-1.txt:488
#: ../../releases/1.5-beta-1.txt:513
msgid ""
"Some changes have been introduced in the execution of tests that might be "
"backward-incompatible for some testing setups:"
msgstr ""

# 9af7e99d69294c859f5209119b8697f1
# 3dc2f9245e7d4b77bafa2e2c5cf903e4
# 7fefeb93df414aa88b5f931e3bbc0ee1
#: ../../releases/1.5.txt:568 ../../releases/1.5-alpha-1.txt:492
#: ../../releases/1.5-beta-1.txt:517
msgid "Database flushing in ``django.test.TransactionTestCase``"
msgstr ""

# 418b34eef1ba44929b463f1982634f29
# 9b415e6234684859934072277df26fd3
# 2944538a33954158b63a453eb5e80bca
#: ../../releases/1.5.txt:570 ../../releases/1.5-alpha-1.txt:494
#: ../../releases/1.5-beta-1.txt:519
msgid ""
"Previously, the test database was truncated *before* each test run in a :"
"class:`~django.test.TransactionTestCase`."
msgstr ""

# 6d4c51bf22a448958bb0c91e665746f0
# 3c073269216947199eb79a009520284c
# c16b08f9c5674cfe931f95dd31b958e8
#: ../../releases/1.5.txt:573 ../../releases/1.5-alpha-1.txt:497
#: ../../releases/1.5-beta-1.txt:522
msgid ""
"In order to be able to run unit tests in any order and to make sure they are "
"always isolated from each other, :class:`~django.test.TransactionTestCase` "
"will now reset the database *after* each test run instead."
msgstr ""

# 89bec8f434f74e568dbab612bdb0fee7
# 69c9d4dee51440f2a166bad65b07127b
# d3219d75558842219503973bd614c7da
#: ../../releases/1.5.txt:578 ../../releases/1.5-alpha-1.txt:502
#: ../../releases/1.5-beta-1.txt:527
msgid "No more implicit DB sequences reset"
msgstr ""

# 378dd15ba7b04ecbb40e896283cdef43
# a577aa974f5c4ed2bef937fa2716f6b6
# 2ed961ee13be4c92af21af30f5a52812
#: ../../releases/1.5.txt:580 ../../releases/1.5-alpha-1.txt:504
#: ../../releases/1.5-beta-1.txt:529
msgid ""
":class:`~django.test.TransactionTestCase` tests used to reset primary key "
"sequences automatically together with the database flushing actions "
"described above."
msgstr ""

# f021674522fa432bab1e382e8af5f9de
# 69558ffe0ba54bdf9ec8fd4e3c3af438
# d43d452b9dc44f70875642b9c3a8f7e5
#: ../../releases/1.5.txt:584 ../../releases/1.5-alpha-1.txt:508
#: ../../releases/1.5-beta-1.txt:533
msgid ""
"This has been changed so no sequences are implicitly reset. This can cause :"
"class:`~django.test.TransactionTestCase` tests that depend on hard-coded "
"primary key values to break."
msgstr ""

# 0e9e98443c2442d7b0a273ba1f399c89
# 2614afead10e4d378bbd86c630f17c32
# 354dd6143dd1483cb355cc788d0791eb
#: ../../releases/1.5.txt:588 ../../releases/1.5-alpha-1.txt:512
#: ../../releases/1.5-beta-1.txt:537
msgid ""
"The new :attr:`~django.test.TransactionTestCase.reset_sequences` attribute "
"can be used to force the old behavior for :class:`~django.test."
"TransactionTestCase` that might need it."
msgstr ""

# 9a69c9c5393b4cbbae9af0a56f03c639
# a3f25f75db4a43a39c28c79cada74b4d
# ff013fee05cd431aa32c6b2402ee09c7
#: ../../releases/1.5.txt:593 ../../releases/1.5-alpha-1.txt:517
#: ../../releases/1.5-beta-1.txt:542
msgid "Ordering of tests"
msgstr ""

# bd4ce0528cd94adaa1138422d72120ba
# a5474e3425b54ff9932827238e4d7956
# 2a348f0f8c2c4733aae9923d65e9bac9
#: ../../releases/1.5.txt:595 ../../releases/1.5-alpha-1.txt:519
#: ../../releases/1.5-beta-1.txt:544
msgid ""
"In order to make sure all ``TestCase`` code starts with a clean database, "
"tests are now executed in the following order:"
msgstr ""

# d14f3f6a54d644369beb662a30c4b064
# 938eb74820144ca4be0781674ae61000
# 395aa8ba64d34482940115d14b607f57
#: ../../releases/1.5.txt:598 ../../releases/1.5-alpha-1.txt:522
#: ../../releases/1.5-beta-1.txt:547
msgid ""
"First, all unittests (including :class:`unittest.TestCase`, :class:`~django."
"test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django."
"test.TransactionTestCase`) are run with no particular ordering guaranteed "
"nor enforced among them."
msgstr ""

# 7168f2bd10c44f6684f6a05d3a7c3042
# f4e80c02f83646c48a1442ecbee5d015
# 96014e758cae4b928852e5da7752d5b4
#: ../../releases/1.5.txt:603 ../../releases/1.5-alpha-1.txt:527
#: ../../releases/1.5-beta-1.txt:552
msgid ""
"Then any other tests (e.g. doctests) that may alter the database without "
"restoring it to its original state are run."
msgstr ""

# aa44a3da8dc94eda90c2fe27df5210b5
# 6dfec376fa0b4a03ab41578f46813eb4
# 0494a04863a44f2fbe9c28aa40a84a96
#: ../../releases/1.5.txt:606 ../../releases/1.5-alpha-1.txt:530
#: ../../releases/1.5-beta-1.txt:555
msgid ""
"This should not cause any problems unless you have existing doctests which "
"assume a :class:`~django.test.TransactionTestCase` executed earlier left "
"some database state behind or unit tests that rely on some form of state "
"being preserved after the execution of other tests. Such tests are already "
"very fragile, and must now be changed to be able to run independently."
msgstr ""

# 92d63aad6d354d839d6fc0b6004ddd7f
# 84607f6512b74175bf86025d2b85985b
# 11ca495496b24b1b924a6759d62794df
#: ../../releases/1.5.txt:613 ../../releases/1.5-alpha-1.txt:537
#: ../../releases/1.5-beta-1.txt:562
msgid "`cleaned_data` dictionary kept for invalid forms"
msgstr ""

# ddeedd92d17845cebee84269dbcb9953
# adf726921e6f455bb119491f3ba40dd3
# 1577dfcdb34d45d1bfbb79df3ae2c3e1
#: ../../releases/1.5.txt:615 ../../releases/1.5-alpha-1.txt:539
#: ../../releases/1.5-beta-1.txt:564
msgid ""
"The :attr:`~django.forms.Form.cleaned_data` dictionary is now always present "
"after form validation. When the form doesn't validate, it contains only the "
"fields that passed validation. You should test the success of the validation "
"with the :meth:`~django.forms.Form.is_valid()` method and not with the "
"presence or absence of the :attr:`~django.forms.Form.cleaned_data` attribute "
"on the form."
msgstr ""

# 0a5f6d6c5201443587c96b0d9d9f4dd7
# 8a5b3ddbb96647c0bb49dda795e25ffb
#: ../../releases/1.5.txt:623 ../../releases/1.5-beta-1.txt:572
msgid "Behavior of :djadmin:`syncdb` with multiple databases"
msgstr ""

# c24b2e5da09244dbbae7b2e755209efd
# 4231df9651bc458297e686788899b69a
#: ../../releases/1.5.txt:625 ../../releases/1.5-beta-1.txt:574
msgid ""
":djadmin:`syncdb` now queries the database routers to determine if content "
"types (when :mod:`~django.contrib.contenttypes` is enabled) and permissions "
"(when :mod:`~django.contrib.auth` is enabled) should be created in the "
"target database. Previously, it created them in the default database, even "
"when another database was specified with the :djadminopt:`--database` option."
msgstr ""

# ce48a07bfd0f4a9dbd4417caa375adb9
# 864c42bba3ef431da05c7c8b83c7850e
#: ../../releases/1.5.txt:631 ../../releases/1.5-beta-1.txt:580
msgid ""
"If you use :djadmin:`syncdb` on multiple databases, you should ensure that "
"your routers allow synchronizing content types and permissions to only one "
"of them. See the docs on the :ref:`behavior of contrib apps with multiple "
"databases <contrib_app_multiple_databases>` for more information."
msgstr ""

# 97190fe828f54ae8908e468f1ee7fab4
#: ../../releases/1.5.txt:637
msgid "XML deserializer will not parse documents with a DTD"
msgstr ""

# 08923e33848b41cf9adef6d65e9d696a
#: ../../releases/1.5.txt:639
msgid ""
"In order to prevent exposure to attacks related to external entity "
"references and entity expansion, the XML model deserializer now refuses to "
"parse XML documents containing a DTD (DOCTYPE definition). Since the XML "
"serializer does not output a DTD, this will not impact typical usage, only "
"cases where custom-created XML documents are passed to Django's model "
"deserializer."
msgstr ""

# e1ab417322024025b43f5fe14500624d
#: ../../releases/1.5.txt:646
msgid "Formsets default ``max_num``"
msgstr ""

# 3c7212ebd39d4caabdc2799216813104
#: ../../releases/1.5.txt:648
msgid ""
"A (default) value of ``None`` for the ``max_num`` argument to a formset "
"factory no longer defaults to allowing any number of forms in the formset. "
"Instead, in order to prevent memory-exhaustion attacks, it now defaults to a "
"limit of 1000 forms. This limit can be raised by explicitly setting a higher "
"value for ``max_num``."
msgstr ""

# fcb023c728b148a1a642a8d1dc939c44
# 6837c45619654b05a36f38577e3401df
# ec1e2c631de941d7a84ffbf21dbd84eb
#: ../../releases/1.5.txt:655 ../../releases/1.5-alpha-1.txt:547
#: ../../releases/1.5-beta-1.txt:586
msgid "Miscellaneous"
msgstr ""

# 55a1d80cf6ce4e26840f7c7ed57aa5d0
# 8cd37a8819c3407fbcba01565ce763b9
# 77726886de1d4e688659663e2f834d96
#: ../../releases/1.5.txt:657 ../../releases/1.5-alpha-1.txt:549
#: ../../releases/1.5-beta-1.txt:588
msgid ""
":class:`django.forms.ModelMultipleChoiceField` now returns an empty "
"``QuerySet`` as the empty value instead of an empty list."
msgstr ""

# 383363f7b97847d283693eaf20d4ec87
# 22878780a8b34036b497803ce9dfd20f
# c33abd22970a4174bca4332de89fff78
#: ../../releases/1.5.txt:660 ../../releases/1.5-alpha-1.txt:552
#: ../../releases/1.5-beta-1.txt:591
msgid ""
":func:`~django.utils.http.int_to_base36` properly raises a :exc:`~exceptions."
"TypeError` instead of :exc:`~exceptions.ValueError` for non-integer inputs."
msgstr ""

# 01c1951d1139482c98f93a145f2a3cc8
# d7fdc10db5e8469bbc2afd340c8451af
# 073c603599564886a0f09b086f21c935
#: ../../releases/1.5.txt:664 ../../releases/1.5-alpha-1.txt:556
#: ../../releases/1.5-beta-1.txt:595
msgid ""
"The ``slugify`` template filter is now available as a standard python "
"function at :func:`django.utils.text.slugify`. Similarly, ``remove_tags`` is "
"available at :func:`django.utils.html.remove_tags`."
msgstr ""

# 64d4e60cc50d459e8804cff84d04314f
# a3b0288aa16c4948873bfec558ac780b
# e9228d6dad984c0694571d3fd6f6f10a
#: ../../releases/1.5.txt:668 ../../releases/1.5-alpha-1.txt:560
#: ../../releases/1.5-beta-1.txt:599
msgid ""
"Uploaded files are no longer created as executable by default. If you need "
"them to be executable change :setting:`FILE_UPLOAD_PERMISSIONS` to your "
"needs. The new default value is ``0666`` (octal) and the current umask value "
"is first masked out."
msgstr ""

# a0bb4d408f2549b8a2e457f9cbebacac
# 078b25a86d6c437b996d363c3cf277f1
# 4940b86ac1e149e7adea7123b945f07b
#: ../../releases/1.5.txt:673 ../../releases/1.5-alpha-1.txt:565
#: ../../releases/1.5-beta-1.txt:604
msgid ""
"The :ref:`F() expressions <query-expressions>` supported bitwise operators "
"by ``&`` and ``|``. These operators are now available using ``.bitand()`` "
"and ``.bitor()`` instead. The removal of ``&`` and ``|`` was done to be "
"consistent with :ref:`Q() expressions <complex-lookups-with-q>` and "
"``QuerySet`` combining where the operators are used as boolean AND and OR "
"operators."
msgstr ""

# 0bcfcff4550b4a49b201f92dc85509e9
# eb4ae1fcc5cc441cbf4e80ed5e82a838
#: ../../releases/1.5.txt:679 ../../releases/1.5-beta-1.txt:610
msgid ""
"In a ``filter()`` call, when :ref:`F() expressions <query-expressions>` "
"contained lookups spanning multi-valued relations, they didn't always reuse "
"the same relations as other lookups along the same chain. This was changed, "
"and now F() expressions will always use the same relations as other lookups "
"within the same ``filter()`` call."
msgstr ""

# d231dec6ffeb417a8a47c3932097bb9b
# 7bd0ac243bad44c6a88e69d291b29db7
# 8d4653a842bc46508d3cf86b9774c8fd
#: ../../releases/1.5.txt:685 ../../releases/1.5-alpha-1.txt:571
#: ../../releases/1.5-beta-1.txt:616
msgid ""
"The :ttag:`csrf_token` template tag is no longer enclosed in a div. If you "
"need HTML validation against pre-HTML5 Strict DTDs, you should add a div "
"around it in your pages."
msgstr ""

# 289ffcbe68a94a5b8901919eabeb78d9
# 8be2c3765a1745b7966a7b77e3c9bb7d
#: ../../releases/1.5.txt:689 ../../releases/1.5-beta-1.txt:620
msgid ""
"The template tags library ``adminmedia``, which only contained the "
"deprecated template tag ``{% admin_media_prefix %}``, was removed. "
"Attempting to load it with ``{% load adminmedia %}`` will fail. If your "
"templates still contain that line you must remove it."
msgstr ""

# 0cd7e2c6cbf043fbbbf56afcff893b7e
#: ../../releases/1.5.txt:694
msgid ""
"Because of an implementation oversight, it was possible to use :doc:`django."
"contrib.redirects </ref/contrib/redirects>` without enabling :doc:`django."
"contrib.sites </ref/contrib/sites>`. This isn't allowed any longer. If "
"you're using ``django.contrib.redirects``, make sure :setting:"
"`INSTALLED_APPS` contains ``django.contrib.sites``."
msgstr ""

# 564685e4d48649608291154f64b42d93
#: ../../releases/1.5.txt:700
msgid ""
":meth:`BoundField.label_tag <django.forms.BoundField.label_tag>` now escapes "
"its ``contents`` argument. To avoid the HTML escaping, use :func:`django."
"utils.safestring.mark_safe` on the argument before passing it."
msgstr ""

# 15ec9e200091455dbdb0809f74ab2444
# dee1a43b5c6b400496778fbaa58e983e
# 2ff87b61e228460ba814d5b38419e59c
#: ../../releases/1.5.txt:705 ../../releases/1.5-alpha-1.txt:576
#: ../../releases/1.5-beta-1.txt:626
msgid "Features deprecated in 1.5"
msgstr ""

# b14288b30b414ac4868ccbb68e377154
#: ../../releases/1.5.txt:708
msgid "``django.contrib.localflavor``"
msgstr ""

# d2f246f7b6b54e588ad529191ca097e2
#: ../../releases/1.5.txt:710
msgid ""
"The localflavor contrib app has been split into separate packages. ``django."
"contrib.localflavor`` itself will be removed in Django 1.6, after an :ref:"
"`accelerated deprecation <localflavor-deprecation-policy>`. The docs "
"provide :ref:`migration instructions <localflavor-how-to-migrate>`."
msgstr ""

# 598a885190c4478ba6550d9895ae272d
#: ../../releases/1.5.txt:715
msgid ""
"The new packages are available :ref:`on Github <localflavor-packages>`. The "
"core team cannot efficiently maintain these packages in the long term — it "
"spans just a dozen countries at this time; similar to translations, "
"maintenance will be handed over to interested members of the community."
msgstr ""

# 19910e29ec384562af017fe73a06bb18
#: ../../releases/1.5.txt:721
msgid "``django.contrib.markup``"
msgstr ""

# 64ae0071404e48e7b20320c4ab4b45a0
# 7bf03999c7c84733a8b2458222b39a2c
# 77bfb978ee454a348e0175cb4987ba96
#: ../../releases/1.5.txt:723 ../../releases/1.5-alpha-1.txt:631
#: ../../releases/1.5-beta-1.txt:684
msgid ""
"The markup contrib module has been deprecated and will follow an accelerated "
"deprecation schedule. Direct use of python markup libraries or 3rd party tag "
"libraries is preferred to Django maintaining this functionality in the "
"framework."
msgstr ""

# b900a2e39f5249149c2929a6843f322e
# 2f0bb6c025094696bd2fd199c86c6135
# 9bb7d3aecba64c029eba5a1fd596b070
#: ../../releases/1.5.txt:729 ../../releases/1.5-alpha-1.txt:579
#: ../../releases/1.5-beta-1.txt:631
msgid ":setting:`AUTH_PROFILE_MODULE`"
msgstr ""

# bd99aed16a4b44bba41e9ae08fef631c
# 3aa893d03d2d4d778f445b2f4f257d05
# 5f290a2391254a1686195693036195ba
#: ../../releases/1.5.txt:731 ../../releases/1.5-alpha-1.txt:581
#: ../../releases/1.5-beta-1.txt:633
msgid ""
"With the introduction of :ref:`custom User models <auth-custom-user>`, there "
"is no longer any need for a built-in mechanism to store user profile data."
msgstr ""

# d4a2ffab0692416ca58ff68a5472073a
# e37e462c81344c7fba0e24ef9b8b36c0
# 0f4972e37e024f7c8d9a4f99684fd2a1
#: ../../releases/1.5.txt:734 ../../releases/1.5-alpha-1.txt:584
#: ../../releases/1.5-beta-1.txt:636
msgid ""
"You can still define user profiles models that have a one-to-one relation "
"with the User model - in fact, for many applications needing to associate "
"data with a User account, this will be an appropriate design pattern to "
"follow. However, the :setting:`AUTH_PROFILE_MODULE` setting, and the :meth:"
"`~django.contrib.auth.models.User.get_profile()` method for accessing the "
"user profile model, should not be used any longer."
msgstr ""

# 6228e78a4a544b5d90aa8f521c289412
# 49428155c3d646f2aceda4b229122ae6
# 7b544922560a40f8a687b44064a482e6
#: ../../releases/1.5.txt:742 ../../releases/1.5-alpha-1.txt:592
#: ../../releases/1.5-beta-1.txt:644
msgid "Streaming behavior of :class:`~django.http.HttpResponse`"
msgstr ""

# c124a7b548e64dfaac35a8b343a5f821
#: ../../releases/1.5.txt:744
msgid ""
"Django 1.5 deprecates the ability to stream a response by passing an "
"iterator to :class:`~django.http.HttpResponse`. If you rely on this "
"behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref:"
"`explicit-streaming-responses` above."
msgstr ""

# fdeab667c33449d59c8e337dc8db0f45
# d0a4a122aa6644f0a3062a3578e35952
# 07ae3faf433d4639b429b04bcc9bb9cd
#: ../../releases/1.5.txt:749 ../../releases/1.5-alpha-1.txt:598
#: ../../releases/1.5-beta-1.txt:651
msgid ""
"In Django 1.7 and above, the iterator will be consumed immediately by :class:"
"`~django.http.HttpResponse`."
msgstr ""

# 3d3ea6769dab4588931a168c955e0030
# 14e52fe95df84b1c99fa2ffc224181ad
# 4aa65dac463f42e499d827f51f8dbe91
#: ../../releases/1.5.txt:755 ../../releases/1.5-alpha-1.txt:602
#: ../../releases/1.5-beta-1.txt:655
msgid "``django.utils.simplejson``"
msgstr ""

# 93ea5f122a7e4bc2a7591e52d8100d4e
# 72dcd7f2c4284e9e812881c46947a813
# c613120977d54795898c5cbecfdc138f
#: ../../releases/1.5.txt:757 ../../releases/1.5-alpha-1.txt:604
#: ../../releases/1.5-beta-1.txt:657
msgid ""
"Since Django 1.5 drops support for Python 2.5, we can now rely on the :mod:"
"`json` module being available in Python's standard library, so we've removed "
"our own copy of :mod:`simplejson`. You should now import :mod:`json` instead "
"of ``django.utils.simplejson``."
msgstr ""

# 776365b443e44a83a2a60ee328dd174f
#: ../../releases/1.5.txt:762
msgid ""
"Unfortunately, this change might have unwanted side-effects, because of "
"incompatibilities between versions of :mod:`simplejson` -- see the :ref:"
"`backwards-incompatible changes <simplejson-incompatibilities>` section. If "
"you rely on features added to :mod:`simplejson` after it became Python's :"
"mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

# c96f1db00785412daf778029245b9936
# d774cc254f1140dfa2f2c34a7de456d9
# d35257a5b0ae4f0eb52ef806289457ac
#: ../../releases/1.5.txt:769 ../../releases/1.5-alpha-1.txt:616
#: ../../releases/1.5-beta-1.txt:669
msgid "``django.utils.encoding.StrAndUnicode``"
msgstr ""

# 987833884eac4f919037aed0c3cdcb15
# cd58ad2dcdee41d1bb72c5d3410c9a49
# c00d4e17f01e4f3a9e43ed54cb3fc73b
#: ../../releases/1.5.txt:771 ../../releases/1.5-alpha-1.txt:618
#: ../../releases/1.5-beta-1.txt:671
msgid ""
"The :class:`~django.utils.encoding.StrAndUnicode` mix-in has been "
"deprecated. Define a ``__str__`` method and apply the :func:`~django.utils."
"encoding.python_2_unicode_compatible` decorator instead."
msgstr ""

# 9abe9793251d4983b966915475fcdc84
# 00bdcf50ee8344318f34b5d049128213
# 76810a4652734ccebfd38008135a0299
#: ../../releases/1.5.txt:776 ../../releases/1.5-alpha-1.txt:623
#: ../../releases/1.5-beta-1.txt:676
msgid "``django.utils.itercompat.product``"
msgstr ""

# 76aecb095ae946398957d7e34add248e
# c1684cfec3f1424a8b70743f512b2fa8
# 39b5b7c8bb8d452b9121e5c1074058f8
#: ../../releases/1.5.txt:778 ../../releases/1.5-alpha-1.txt:625
#: ../../releases/1.5-beta-1.txt:678
msgid ""
"The ``django.utils.itercompat.product`` function has been deprecated. Use "
"the built-in :func:`itertools.product` instead."
msgstr ""

# f379dd2e195a47e9aab95ea78564c261
# dbd71db746dc49f0919d9bc307c43b36
#: ../../releases/1.5.txt:782 ../../releases/1.5-beta-1.txt:690
msgid "``cleanup`` management command"
msgstr ""

# fefab710f4574764b4a88deb9d5940b7
# f887c14809bd4c3b97172b777c18fb2e
#: ../../releases/1.5.txt:784 ../../releases/1.5-beta-1.txt:692
msgid ""
"The :djadmin:`cleanup` management command has been deprecated and replaced "
"by :djadmin:`clearsessions`."
msgstr ""

# c9f6121fa04a42e9be14aa1050a7b701
# 2cadd3f142d844efbfb567c9801267fe
#: ../../releases/1.5.txt:788 ../../releases/1.5-beta-1.txt:696
msgid "``daily_cleanup.py`` script"
msgstr ""

# 086024dbb78b4cd580addda4a5f2c952
# dc0e9e903db14b199ef784fe7733038f
#: ../../releases/1.5.txt:790 ../../releases/1.5-beta-1.txt:698
msgid ""
"The undocumented ``daily_cleanup.py`` script has been deprecated. Use the :"
"djadmin:`clearsessions` management command instead."
msgstr ""

# deb3b43f7a1a4a738ec9c152bb4d3f29
# a8df330e89b8484aa271875cf6c3a65c
#: ../../releases/1.5.txt:794 ../../releases/1.5-beta-1.txt:702
msgid "``depth`` keyword argument in ``select_related``"
msgstr ""

# 11f7ea2422364c37b3150e46603acd8d
# e5781f3711424da583a4e53e6b7a12e7
#: ../../releases/1.5.txt:796 ../../releases/1.5-beta-1.txt:704
msgid ""
"The ``depth`` keyword argument in :meth:`~django.db.models.query.QuerySet."
"select_related` has been deprecated. You should use field names instead."
msgstr ""

# 6d8affd7b5f94f0e8465f4edda04347f
#: ../../releases/1.5-alpha-1.txt:3
msgid "Django 1.5 alpha release notes"
msgstr ""

# 6ab65075c9cd4256b3642f9acdcac34e
#: ../../releases/1.5-alpha-1.txt:5
msgid "October 25, 2012."
msgstr ""

# de90bd31edbe4a0daf019f17616fa4e2
#: ../../releases/1.5-alpha-1.txt:7
msgid "Welcome to Django 1.5 alpha!"
msgstr ""

# 4e887b6a8dd54c7ab81370cc47758656
#: ../../releases/1.5-alpha-1.txt:9
msgid ""
"This is the first in a series of preview/development releases leading up to "
"the eventual release of Django 1.5, scheduled for December 2012. This "
"release is primarily targeted at developers who are interested in trying out "
"new features and testing the Django codebase to help identify and resolve "
"bugs prior to the final 1.5 release."
msgstr ""

# 83ead32aa3de4cee840adc0238ef7163
#: ../../releases/1.5-alpha-1.txt:18
msgid ""
"In particular, we need the community's help to test Django 1.5's new `Python "
"3 support`_ -- not just to report bugs on Python 3, but also regressions on "
"Python 2. While Django is very conservative with regards to backwards "
"compatibility, mistakes are always possible, and it's likely that the Python "
"3 refactoring work introduced some regressions."
msgstr ""

# 55f9678775c0405c953315cf3d9bce2f
#: ../../releases/1.5-alpha-1.txt:24
msgid ""
"Django 1.5 alpha includes various `new features`_ and some minor `backwards "
"incompatible changes`_. There are also some features that have been dropped, "
"which are detailed in :doc:`our deprecation plan </internals/deprecation>`, "
"and we've `begun the deprecation process for some features`_."
msgstr ""

# aca07e11a6ec4075b4ecc94644b0f5fd
#: ../../releases/1.5-alpha-1.txt:64
msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible "
"manner per :doc:`our API stability policy </misc/api-stability>` policy. "
"However, as with previous releases, Django 1.5 ships with some minor "
"`backwards incompatible changes`_; people upgrading from previous versions "
"of Django should read that list carefully."
msgstr ""

# 88e10c603c03479fbf4da70c15cecb60
#: ../../releases/1.5-alpha-1.txt:85
msgid ""
"Django 1.5 requires Python 2.6.5 or above, though we **highly recommended** "
"Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

# af3d0d2e47ec4769b4d4207338f6fa5e
#: ../../releases/1.5-alpha-1.txt:103
msgid ""
"Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and "
"above. This comes in the form of a **single** codebase; you don't need to "
"install a different version of Django on Python 3. This means that you can "
"write application targeted for just Python 2, just Python 3, or single "
"applications that support both platforms."
msgstr ""

# 8418b267337046008eb2711f6914a7a3
# 7a28e4461aa0435faafbd873ae937ec0
#: ../../releases/1.5-alpha-1.txt:109 ../../releases/1.5-beta-1.txt:105
msgid ""
"However, we're labeling this support \"experimental\" for now: although it's "
"received extensive testing via our automated test suite, it's received very "
"little real-world testing. We've done our best to eliminate bugs, but we "
"can't be sure we covered all possible uses of Django. Further, Django's more "
"than a web framework; it's an ecosystem of pluggable components. At this "
"point, very few third-party applications have been ported to Python 3, so "
"it's unlikely that a real-world application will have all its dependencies "
"satisfied under Python 3."
msgstr ""

# f0ccc11ce875462785a2f188edc90ea7
#: ../../releases/1.5-alpha-1.txt:132
msgid ""
"In Django 1.5, you can now use your own model as the store for user-related "
"data. If your project needs a username with more than 30 characters, or if "
"you want to store usernames in a format other than first name/last name, or "
"you want to put custom profile information onto your User object, you can "
"now do so."
msgstr ""

# 6e00132cb64549019f8ec74f0fcdfacb
# 6a708055790c4e888406e2decb96eaed
#: ../../releases/1.5-alpha-1.txt:154 ../../releases/1.5-beta-1.txt:150
msgid ""
"Deferred instances (those loaded by .only() or .defer()) will automatically "
"save just the loaded fields. If any field is set manually after load, that "
"field will also get updated on save."
msgstr ""

# 5eb26247b27d4b0484f1f5f35eca2152
#: ../../releases/1.5-alpha-1.txt:396
msgid ""
"As explained below, Django 1.5 deprecates ``django.utils.simplejson`` in "
"favor of Python 2.6's built-in :mod:`json` module. In theory, this change is "
"harmless. Unfortunately, because of incompatibilities between versions of :"
"mod:`simplejson`, it may trigger errors in some circumstances."
msgstr ""

# 7c8314c31f3f4d138bb63a869766375f
#: ../../releases/1.5-alpha-1.txt:594
msgid ""
"Django 1.5 deprecates the ability to stream a response by passing an "
"iterator to :class:`~django.http.HttpResponse`. If you rely on this "
"behavior, switch to :class:`~django.http.StreamingHttpResponse`. See above "
"for more details."
msgstr ""

# 4805ec37db184ca1ae280b2862abd9ad
#: ../../releases/1.5-alpha-1.txt:609
msgid ""
"Unfortunately, this change might have unwanted side-effects, because of "
"incompatibilities between versions of :mod:`simplejson` -- see the "
"backwards- incompatible changes section. If you rely on features added to :"
"mod:`simplejson` after it became Python's :mod:`json`, you should import :"
"mod:`simplejson` explicitly."
msgstr ""

# fa97de0f306e4049849530b593d0a658
# 299ff68ba33c4147bbbacab6c3ff7762
#: ../../releases/1.5-alpha-1.txt:629 ../../releases/1.5-beta-1.txt:682
msgid "``django.utils.markup``"
msgstr ""

# 9d30f16432b24b8d8f60bf4f8364b2bd
#: ../../releases/1.5-beta-1.txt:3
msgid "Django 1.5 beta release notes"
msgstr ""

# b76ca616ea9b43298132a5cac3cf7239
#: ../../releases/1.5-beta-1.txt:5
msgid "November 27, 2012."
msgstr ""

# 6b583892379f42cb8a08e0da5c556519
#: ../../releases/1.5-beta-1.txt:7
msgid "Welcome to Django 1.5 beta!"
msgstr ""

# a21cd190ac3a4ba5893326ce706828a3
#: ../../releases/1.5-beta-1.txt:9
msgid ""
"This is the second in a series of preview/development releases leading up to "
"the eventual release of Django 1.5, scheduled for Decemeber 2012. This "
"release is primarily targeted at developers who are interested in trying out "
"new features and testing the Django codebase to help identify and resolve "
"bugs prior to the final 1.5 release."
msgstr ""

# d37aadb0b5444e53a70a7551753dc2e4
#: ../../releases/1.5-beta-1.txt:53
msgid ""
"Better `support for streaming responses <#explicit-streaming-responses-"
"beta-1>`_ via the new  :class:`~django.http.StreamingHttpResponse` response "
"class."
msgstr ""

# c8123e566da544ab99974e435d51cf0d
#: ../../releases/1.5-beta-1.txt:421
msgid ""
":ref:`As explained below <simplejson-deprecation-beta-1>`, Django 1.5 "
"deprecates ``django.utils.simplejson`` in favor of Python 2.6's built-in :"
"mod:`json` module. In theory, this change is harmless. Unfortunately, "
"because of incompatibilities between versions of :mod:`simplejson`, it may "
"trigger errors in some circumstances."
msgstr ""

# 9d421a9e365344708b79dda9801a811d
#: ../../releases/1.5-beta-1.txt:646
msgid ""
"Django 1.5 deprecates the ability to stream a response by passing an "
"iterator to :class:`~django.http.HttpResponse`. If you rely on this "
"behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref:"
"`explicit-streaming-responses-beta-1` above."
msgstr ""

# a2c83d20db3e4edf985f21775fbcdec1
#: ../../releases/1.5-beta-1.txt:662
msgid ""
"Unfortunately, this change might have unwanted side-effects, because of "
"incompatibilities between versions of :mod:`simplejson` -- see the :ref:"
"`backwards-incompatible changes <simplejson-incompatibilities-beta-1>` "
"section. If you rely on features added to :mod:`simplejson` after it became "
"Python's :mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

# 86a9c053ecef483d9199364d1f7fff44
#: ../../releases/1.5.1.txt:3
msgid "Django 1.5.1 release notes"
msgstr ""

# f8cab273ca51416d9fdfa6e54a038367
#: ../../releases/1.5.1.txt:5
msgid "*March 28, 2013*"
msgstr ""

# ccb67366434a4c219101e60759d28dd1
#: ../../releases/1.5.1.txt:7
msgid ""
"This is Django 1.5.1, a bugfix release for Django 1.5. It's completely "
"backwards compatible with Django 1.5, but includes a handful of fixes."
msgstr ""

# f51823d51e134a20a7ddb54605dab9b4
#: ../../releases/1.5.1.txt:10
msgid ""
"The biggest fix is for a memory leak introduced in Django 1.5. Under certain "
"circumstances, repeated iteration over querysets could leak memory - "
"sometimes quite a bit of it. If you'd like more information, the details are "
"in `our ticket tracker`__ (and in `a related issue`__ in Python itself)."
msgstr ""

# 34e1192e9e914ea98e131f98180f2806
#: ../../releases/1.5.1.txt:18
msgid ""
"If you've noticed memory problems under Django 1.5, upgrading to 1.5.1 "
"should fix those issues."
msgstr ""

# 4045cda5bb5d46dcb33d4a9c58d08830
#: ../../releases/1.5.1.txt:21
msgid "Django 1.5.1 also includes a couple smaller fixes:"
msgstr ""

# 58616a527a604e0cb03b00baafc0a74e
#: ../../releases/1.5.1.txt:23
msgid ""
"Module-level warnings emitted during tests are no longer silently hidden "
"(`#18985`__)."
msgstr ""

# 76a404708f6d40e19661d349ba202e2c
#: ../../releases/1.5.1.txt:25
msgid "Prevented filtering on password hashes in the user admin (`#20078`__)."
msgstr ""

# d2ccbee857c74ce2b9440a09d325553a
#: ../../releases/1.5.2.txt:3
msgid "Django 1.5.2 release notes"
msgstr ""

# 6bc734d56f1f43a9a0e78c26d24104ac
#: ../../releases/1.5.2.txt:7
msgid "This is Django 1.5.2, a bugfix and security release for Django 1.5."
msgstr ""

# 5025483ee3fa442ea78402607cfedc89
#: ../../releases/1.5.2.txt:24
msgid "XSS vulnerability in :mod:`django.contrib.admin`"
msgstr ""

# fdc43e58013247509957ee2e733c6b72
#: ../../releases/1.5.2.txt:26
msgid ""
"If a :class:`~django.db.models.URLField` is used in Django 1.5, it displays "
"the current value of the field and a link to the target on the admin change "
"page. The display routine of this widget was flawed and allowed for XSS."
msgstr ""

# cb84fad6585c40b28e680e3e2608ceb9
#: ../../releases/1.5.2.txt:33
msgid ""
"Fixed a crash with :meth:`~django.db.models.query.QuerySet.prefetch_related` "
"(#19607) as well as some ``pickle`` regressions with ``prefetch_related`` "
"(#20157 and #20257)."
msgstr ""

# c24682c8a35c41a29ec7736ae579b9ef
#: ../../releases/1.5.2.txt:36
msgid ""
"Fixed a regression in :mod:`django.contrib.gis` in the Google Map output on "
"Python 3 (#20773)."
msgstr ""

# 368f216f95a243aab96f7642775ea00e
#: ../../releases/1.5.2.txt:38
msgid ""
"Made ``DjangoTestSuiteRunner.setup_databases`` properly handle aliases for "
"the default database (#19940) and prevented ``teardown_databases`` from "
"attempting to tear down aliases (#20681)."
msgstr ""

# f6c65b0a92a940bb9e29fe47c498327d
#: ../../releases/1.5.2.txt:41
msgid ""
"Fixed the ``django.core.cache.backends.memcached.MemcachedCache`` backend's "
"``get_many()`` method on Python 3 (#20722)."
msgstr ""

# 1c9030e9d12a4ce5ac7c2e2f6b579dcf
#: ../../releases/1.5.2.txt:43
msgid ""
"Fixed :mod:`django.contrib.humanize` translation syntax errors. Affected "
"languages: Mexican Spanish, Mongolian, Romanian, Turkish (#20695)."
msgstr ""

# ec7554db09b4436693fd268070c733ce
#: ../../releases/1.5.2.txt:45
msgid "Added support for wheel packages (#19252)."
msgstr ""

# 77d4d8cc9279415babdf7fc17c86661e
#: ../../releases/1.5.2.txt:46
msgid "The CSRF token now rotates when a user logs in."
msgstr ""

# 0000008653ce4efba5309478cf49a334
#: ../../releases/1.5.2.txt:47
msgid "Some Python 3 compatibility fixes including #20212 and #20025."
msgstr ""

# 01e5f9b83c114550ab9fd3e6a4d24442
#: ../../releases/1.5.2.txt:48
msgid ""
"Fixed some rare cases where :meth:`~django.db.models.query.QuerySet.get` "
"exceptions recursed infinitely (#20278)."
msgstr ""

# ba5057251d10488f88d290576ac0ba4f
#: ../../releases/1.5.2.txt:50
msgid ""
":djadmin:`makemessages` no longer crashes with ``UnicodeDecodeError`` "
"(#20354)."
msgstr ""

# 4142eca257804b39b785f7595c16111a
#: ../../releases/1.5.2.txt:52
msgid "Fixed ``geojson`` detection with Spatialite."
msgstr ""

# 9469f8186e344c51a3d4ad45328d14bd
#: ../../releases/1.5.2.txt:53
msgid ""
":meth:`~django.test.TestCase.assertContains` once again works with binary "
"content (#20237)."
msgstr ""

# ae2f930e45314d3db1625ea150a4407f
#: ../../releases/1.5.2.txt:55
msgid ""
"Fixed :class:`~django.db.models.ManyToManyField` if it has a unicode "
"``name`` parameter (#20207)."
msgstr ""

# 4879334d50114b82a2fc2538faf6627a
#: ../../releases/1.5.2.txt:57
msgid ""
"Ensured that the WSGI request's path is correctly based on the "
"``SCRIPT_NAME`` environment variable or the :setting:`FORCE_SCRIPT_NAME` "
"setting, regardless of whether or not either has a trailing slash (#20169)."
msgstr ""

# 10782e825b324055ab3fc9055221d691
#: ../../releases/1.5.3.txt:3
msgid "Django 1.5.3 release notes"
msgstr ""

# 6c36f51127ae40c4927c62a38a68ef51
#: ../../releases/1.5.3.txt:7
msgid ""
"This is Django 1.5.3, the third release in the Django 1.5 series. It "
"addresses one security issue and also contains an opt-in feature to enhance "
"the security of :mod:`django.contrib.sessions`."
msgstr ""

# 1907fc29e80e4a13862b1919596bd315
#: ../../releases/1.5.3.txt:29
msgid ""
"Mitigating a remote-code execution vulnerability in :mod:`django.contrib."
"sessions`"
msgstr ""

# 688249fe69c942cfaaaf9f84367f5c6e
#: ../../releases/1.5.3.txt:31
msgid ""
":mod:`django.contrib.sessions` currently uses :mod:`pickle` to serialize "
"session data before storing it in the backend. If you're using the :ref:"
"`signed cookie session backend<cookie-session-backend>` and :setting:"
"`SECRET_KEY` is known by an attacker (there isn't an inherent vulnerability "
"in Django that would cause it to leak), the attacker could insert a string "
"into his session which, when unpickled, executes arbitrary code on the "
"server. The technique for doing so is simple and easily available on the "
"internet. Although the cookie session storage signs the cookie-stored data "
"to prevent tampering, a :setting:`SECRET_KEY` leak immediately escalates to "
"a remote code execution vulnerability."
msgstr ""

# f8750228d99e4a34877f1b8f964f6b0e
#: ../../releases/1.5.3.txt:42
msgid ""
"This attack can be mitigated by serializing session data using JSON rather "
"than :mod:`pickle`. To facilitate this, Django 1.5.3 introduces a new "
"setting, :setting:`SESSION_SERIALIZER`, to customize the session "
"serialization format. For backwards compatibility, this setting defaults to "
"using :mod:`pickle`. While JSON serialization does not support all Python "
"objects like :mod:`pickle` does, we highly recommend switching to JSON-"
"serialized values. Also, as JSON requires string keys, you will likely run "
"into problems if you are using non-string keys in ``request.session``. See "
"the :ref:`session_serialization` documentation for more details."
msgstr ""

# adfd164eb68d47f69cf7b47197c885f1
#: ../../releases/1.5.4.txt:3
msgid "Django 1.5.4 release notes"
msgstr ""

# 74b584aa6a5048158ad08f12adbe2fcc
#: ../../releases/1.5.4.txt:7
msgid ""
"This is Django 1.5.4, the fourth release in the Django 1.5 series. It "
"addresses two security issues and one bug."
msgstr ""

# 16b63ea314f44488873c9348c5d4c05a
#: ../../releases/1.5.4.txt:19
msgid ""
"As of 1.5.4, Django's authentication framework imposes a 4096-byte limit on "
"passwords, and will fail authentication with any submitted password of "
"greater length."
msgstr ""

# 2ec772cb06ed43a195b8810b0d569986
#: ../../releases/1.5.4.txt:37
msgid ""
"Fixed a bug that prevented a ``QuerySet`` that uses :meth:`~django.db.models."
"query.QuerySet.prefetch_related` from being pickled and unpickled more than "
"once (the second pickling attempt raised an exception) (#21102)."
msgstr ""

# 6ee9eba4e717463ba9c526f280b5b334
#: ../../releases/index.txt:3
msgid "Release notes"
msgstr ""

# b4004188d2874acb959209e41aeed1db
#: ../../releases/index.txt:5
msgid ""
"Release notes for the official Django releases. Each release note will tell "
"you what's new in each version, and will also describe any backwards-"
"incompatible changes made in that version."
msgstr ""

# c87a37e2c70e4cebab752aa6f4a25434
#: ../../releases/index.txt:9
msgid ""
"For those :doc:`upgrading to a new version of Django</howto/upgrade-"
"version>`, you will need to check all the backwards-incompatible changes "
"and :doc:`deprecated features</internals/deprecation>` for each 'final' "
"release from the one after your current Django version, up to and including "
"the new version."
msgstr ""

# 37bd71b5e07e4ea29bccafdcf4ea1f2b
#: ../../releases/index.txt:16
msgid "Final releases"
msgstr ""

# f8027044ef434a709ba8a12457da478d
#: ../../releases/index.txt:21
msgid "1.5 release"
msgstr ""

# d33eeeac164e416ca9e071e66605b009
#: ../../releases/index.txt:29
msgid "1.4 release"
msgstr ""

# 3549b75a62f84293aeb933269d509c36
#: ../../releases/index.txt:38
msgid "1.3 release"
msgstr ""

# da3e5a82fe9a4037b8076740386f697c
#: ../../releases/index.txt:47
msgid "1.2 release"
msgstr ""

# fb219a1f326e4505a916ab8045973476
#: ../../releases/index.txt:61
msgid "1.1 release"
msgstr ""

# 55d465e4ea5d49eeb607d2de94130599
#: ../../releases/index.txt:71
msgid "1.0 release"
msgstr ""

# 6dd0795169fb48d68c2bef094b5b4dd5
#: ../../releases/index.txt:80
msgid "Pre-1.0 releases"
msgstr ""

# 6f5b36069d704df1a52b0ecb0ac65453
#: ../../releases/index.txt:102
msgid "Security releases"
msgstr ""

# b86cf670ad9f4c8bafd7b5633d795c65
#: ../../releases/index.txt:104
msgid ""
"Whenever a security issue is disclosed via :doc:`Django's security policies "
"</internals/security>`, appropriate release notes are now added to all "
"affected release series."
msgstr ""

# d8d6119babb649cc92d75f4096ec7974
#: ../../releases/index.txt:108
msgid ""
"Additionally, :doc:`an archive of disclosed security issues </releases/"
"security>` is maintained."
msgstr ""

# 7276cc412e3240b49f631905f167fc01
#: ../../releases/index.txt:112
msgid "Development releases"
msgstr ""

# ad51ae1373514f4cbcf301990668c56c
#: ../../releases/index.txt:90
msgid ""
"These notes are retained for historical purposes. If you are upgrading "
"between formal Django releases, you don't need to worry about these notes."
msgstr ""

# f762226f5e0047be8e6239df78b3e029
#: ../../releases/security.txt:5
msgid "Archive of security issues"
msgstr ""

# 7df9be3a86a640faab8b788ffd403949
#: ../../releases/security.txt:7
msgid ""
"Django's development team is strongly committed to responsible reporting and "
"disclosure of security-related issues, as outlined in :doc:`Django's "
"security policies </internals/security>`."
msgstr ""

# 9a552a1464b24783b8aba536559a5a57
#: ../../releases/security.txt:11
msgid ""
"As part of that commitment, we maintain the following historical list of "
"issues which have been fixed and disclosed. For each issue, the list below "
"includes the date, a brief description, the `CVE identifier <http://en."
"wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures>`_ if applicable, a "
"list of affected versions, a link to the full disclosure and links to the "
"appropriate patch(es)."
msgstr ""

# ebe6889dbbcb423f97cc0be4e3b416a2
#: ../../releases/security.txt:18
msgid "Some important caveats apply to this information:"
msgstr ""

# 52aca159a14f4c768564593d547b423a
#: ../../releases/security.txt:20
msgid ""
"Lists of affected versions include only those versions of Django which had "
"stable, security-supported releases at the time of disclosure. This means "
"older versions (whose security support had expired) and versions which were "
"in pre-release (alpha/beta/RC) states at the time of disclosure may have "
"been affected, but are not listed."
msgstr ""

# 58da4f8ccdf840fe977f956459023de2
#: ../../releases/security.txt:27
msgid ""
"The Django project has on occasion issued security advisories, pointing out "
"potential security problems which can arise from improper configuration or "
"from other issues outside of Django itself. Some of these advisories have "
"received CVEs; when that is the case, they are listed here, but as they have "
"no accompanying patches or releases, only the description, disclosure and "
"CVE will be listed."
msgstr ""

# 91eb481404874a53b17cb8d1b16dcfa7
#: ../../releases/security.txt:37
msgid "Issues prior to Django's security process"
msgstr ""

# 2f3f6bfab56c4a849f2058421f69f09b
#: ../../releases/security.txt:39
msgid ""
"Some security issues were handled before Django had a formalized security "
"process in use. For these, new releases may not have been issued at the time "
"and CVEs may not have been assigned."
msgstr ""

# 49043a2039044ee28cdbfae0accaab02
#: ../../releases/security.txt:45
msgid "August 16, 2006 - CVE-2007-0404"
msgstr ""

# 944d4523934f486d8b19e07adf925a9a
#: ../../releases/security.txt:47
msgid ""
"`CVE-2007-0404 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2007-0404&cid=3>`_: Filename validation issue in translation "
"framework. `Full description <https://www.djangoproject.com/weblog/2006/"
"aug/16/compilemessages/>`__"
msgstr ""

# 399882da492842459c1d3bf4e2d32dc4
# 29eac3825f91468e89341639adacf1d2
# ce379459394843f78f321cd0e37a6f60
# 8b1d09f5254a471394f99df43339338e
# 1bf979d6d57d4459a4a19e26b56e5951
# 169200dcc6ed485aa48d86f30fc1a8e3
# 1137886a4b5146eb8802f8a0d209aafd
# 1efab31b7ddf49a89e24a2baf3a1b941
# e229a99fbd6f4240adad571dcd789b61
# 42819339e5594d4891c7b5b0298c84d9
# 8e6a6bce47d34e5f9baca150781f1139
# ece27d8cef564af9bc37c59b260d5a83
# f79dc5d7653e424d9126e58f0c7fd2ca
# bdd640045c014f05bce8ed4fdad7b6bf
# d9de7fb4f2a64593bedf297ef6c7506c
# 2b1c17cadf774f5e969cc134a3fc9c78
# 115e7d4f166841bc8ca4a41d2c29017d
# 89759491020e445f8929455b8aa9cd06
# d37bcba252a2499cbcac925dcf07a419
# 264d73912c214ca198c7811ed308970f
# 8df32c9aa2d24c86be6ea1d688314d6f
# f438a19b427a4103beaad51827702219
# 1c2b33b96a664dc9a1ccef7c0498d988
# be3e6f828ce74834893c87b4de382a4e
# 0f9dcb18decd4998acbddcd255d28c33
# 263c18351e084ec0ad1ee35acc56351e
# fb349d57644e411bb714488637ce29b1
# 0de54190811c43e28e31565f0bc038b0
# a7d65470e8814d61b2f6fb5f96cd7de0
# 644fc677bea242b3a617c5693e806320
# 0d10e5c4b04b491880ee3d79cb586e70
# bf3dcc9d8c0a4bc4bd88e6cd2ce51ca9
#: ../../releases/security.txt:50 ../../releases/security.txt:64
#: ../../releases/security.txt:80 ../../releases/security.txt:95
#: ../../releases/security.txt:110 ../../releases/security.txt:124
#: ../../releases/security.txt:136 ../../releases/security.txt:148
#: ../../releases/security.txt:159 ../../releases/security.txt:171
#: ../../releases/security.txt:184 ../../releases/security.txt:197
#: ../../releases/security.txt:209 ../../releases/security.txt:222
#: ../../releases/security.txt:234 ../../releases/security.txt:246
#: ../../releases/security.txt:258 ../../releases/security.txt:270
#: ../../releases/security.txt:285 ../../releases/security.txt:298
#: ../../releases/security.txt:311 ../../releases/security.txt:324
#: ../../releases/security.txt:337 ../../releases/security.txt:350
#: ../../releases/security.txt:362 ../../releases/security.txt:374
#: ../../releases/security.txt:386 ../../releases/security.txt:399
#: ../../releases/security.txt:411 ../../releases/security.txt:421
#: ../../releases/security.txt:433 ../../releases/security.txt:446
msgid "Versions affected"
msgstr ""

# 4ba67050d62244d08acbc03222f0bb18
#: ../../releases/security.txt:52
msgid ""
"Django 0.90 `(patch) <https://github.com/django/django/commit/518d406e53>`__"
msgstr ""

# 53596a113e9449278b1efd1cc91cfdb8
#: ../../releases/security.txt:54
msgid ""
"Django 0.91 `(patch) <https://github.com/django/django/commit/518d406e53>`__"
msgstr ""

# cea1c1ab3e8f45a696965ffe0a826062
#: ../../releases/security.txt:56
msgid ""
"Django 0.95 `(patch) <https://github.com/django/django/commit/a132d411c6>`__ "
"(released January 21 2007)"
msgstr ""

# 4f7eb0c628984058992dbda969bdc445
#: ../../releases/security.txt:59
msgid "January 21, 2007 - CVE-2007-0405"
msgstr ""

# d9cb68fe55ec4a21bd75327ae50a6582
#: ../../releases/security.txt:61
msgid ""
"`CVE-2007-0405 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2007-0405&cid=3>`_: Apparent \"caching\" of authenticated user. "
"`Full description <https://www.djangoproject.com/weblog/2007/jan/21/0951/>`__"
msgstr ""

# f70ac01a51914c05b96a85958efb0e7e
#: ../../releases/security.txt:66
msgid ""
"Django 0.95 `(patch) <https://github.com/django/django/commit/e89f0a6558>`__"
msgstr ""

# dd19ae3f8b9d4f6e8ed23503be7d8759
#: ../../releases/security.txt:69
msgid "Issues under Django's security process"
msgstr ""

# d7d6ad34f51c4e3fb59c514d492cf174
#: ../../releases/security.txt:71
msgid ""
"All other security issues have been handled under versions of Django's "
"security process. These are listed below."
msgstr ""

# aa7231d409274643b8dc826e95f00506
#: ../../releases/security.txt:75
msgid "October 26, 2007 - CVE-2007-5712"
msgstr ""

# 18b02ef75b5b484eb948f465e852cf4e
#: ../../releases/security.txt:77
msgid ""
"`CVE-2007-5712 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2007-5712&cid=3>`_: Denial-of-service via arbitrarily-large "
"``Accept-Language`` header. `Full description <https://www.djangoproject.com/"
"weblog/2007/oct/26/security-fix/>`__"
msgstr ""

# ede3f87803d443c79f5dcdecb94f4666
#: ../../releases/security.txt:82
msgid ""
"Django 0.91 `(patch) <https://github.com/django/django/"
"commit/8bc36e726c9e8c75c681d3ad232df8e882aaac81>`__"
msgstr ""

# 3b36a604c9554e3d9bcbf082c5165870
#: ../../releases/security.txt:84
msgid ""
"Django 0.95 `(patch) <https://github.com/django/django/"
"commit/412ed22502e11c50dbfee854627594f0e7e2c234>`__"
msgstr ""

# 097b6758a3f04c42b6cbe9c1c693adc2
#: ../../releases/security.txt:86
msgid ""
"Django 0.96 `(patch) <https://github.com/django/django/"
"commit/7dd2dd08a79e388732ce00e2b5514f15bd6d0f6f>`__"
msgstr ""

# 3b15c2f073774299af928d3b8756d77f
#: ../../releases/security.txt:90
msgid "May 14, 2008 - CVE-2008-2302"
msgstr ""

# 5ed9ec183c654fa4aad420c8f55de9ed
#: ../../releases/security.txt:92
msgid ""
"`CVE-2008-2302 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2008-2302&cid=3>`_: XSS via admin login redirect. `Full "
"description <https://www.djangoproject.com/weblog/2008/may/14/security/>`__"
msgstr ""

# b6d39570d44b4083a33de9b223a10a63
#: ../../releases/security.txt:97
msgid ""
"Django 0.91 `(patch) <https://github.com/django/django/commit/50ce7fb57d>`__"
msgstr ""

# 03d39a1dbe194811986946672d6406e4
#: ../../releases/security.txt:99
msgid ""
"Django 0.95 `(patch) <https://github.com/django/django/commit/50ce7fb57d>`__"
msgstr ""

# d8c6561997ca4b0faf974b7463500a08
#: ../../releases/security.txt:101
msgid ""
"Django 0.96 `(patch) <https://github.com/django/django/commit/7791e5c050>`__"
msgstr ""

# f365c59de2dc410ab5c5bb2360b789c7
#: ../../releases/security.txt:105
msgid "September 2, 2008 - CVE-2008-3909"
msgstr ""

# d2675470d1e84b509493541866a5e475
#: ../../releases/security.txt:107
msgid ""
"`CVE-2008-3909 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2008-3909&cid=3>`_: CSRF via preservation of POST data during "
"admin login. `Full description <https://www.djangoproject.com/weblog/2008/"
"sep/02/security/>`__"
msgstr ""

# 42252974ba9b48169c09827576177a2d
#: ../../releases/security.txt:112
msgid ""
"Django 0.91 `(patch) <https://github.com/django/django/"
"commit/44debfeaa4473bd28872c735dd3d9afde6886752>`__"
msgstr ""

# 772c0ef5cc83468cacdb1da888923a6c
#: ../../releases/security.txt:114
msgid ""
"Django 0.95 `(patch) <https://github.com/django/django/commit/"
"aee48854a164382c655acb9f18b3c06c3d238e81>`__"
msgstr ""

# d83a7dd28afb42508d14971f4d3f824c
#: ../../releases/security.txt:116
msgid ""
"Django 0.96 `(patch) <https://github.com/django/django/"
"commit/7e0972bded362bc4b851c109df2c8a6548481a8e>`__"
msgstr ""

# cf555bb59f4a4886a3b0ee3204255538
#: ../../releases/security.txt:119
msgid "July 28, 2009 - CVE-2009-2659"
msgstr ""

# a4baaa56ac364c2b8bbc7bec36cfec58
#: ../../releases/security.txt:121
msgid ""
"`CVE-2009-2659 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2009-2659&cid=3>`_: Directory-traversal in development server "
"media handler. `Full description <https://www.djangoproject.com/weblog/2009/"
"jul/28/security/>`__"
msgstr ""

# 974bff1822ff4ba0a0d301cdac5128f3
#: ../../releases/security.txt:126
msgid ""
"Django 0.96 `(patch) <https://github.com/django/django/commit/da85d76fd6>`__"
msgstr ""

# b1bc77f2ec58461eb4dbad456022085d
#: ../../releases/security.txt:128
msgid ""
"Django 1.0 `(patch) <https://github.com/django/django/commit/df7f917b7f>`__"
msgstr ""

# 9b3365ef0ee9418b87fd5eba0745de3c
#: ../../releases/security.txt:131
msgid "October 9, 2009 - CVE-2009-3965"
msgstr ""

# db9542ae08c343cfad1a096071249bfc
#: ../../releases/security.txt:133
msgid ""
"`CVE-2009-3965 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2009-3695&cid=3>`_: Denial-of-service via pathological regular "
"expression performance. `Full description <https://www.djangoproject.com/"
"weblog/2009/oct/09/security/>`__"
msgstr ""

# 2cfc2da1457445c3b4f3c77cdc48b5e4
#: ../../releases/security.txt:138
msgid ""
"Django 1.0 `(patch) <https://github.com/django/django/commit/594a28a904>`__"
msgstr ""

# f7cfa5c220594f4ca1c37a6ee7d49668
#: ../../releases/security.txt:140
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/e3e992e18b>`__"
msgstr ""

# 102352c05423492d9ab200ef791d5700
#: ../../releases/security.txt:143
msgid "September 8, 2010 - CVE-2010-3082"
msgstr ""

# 992b9418c21a44559b7d424ab16928f1
#: ../../releases/security.txt:145
msgid ""
"`CVE-2010-3082 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2010-3082&cid=3>`_: XSS via trusting unsafe cookie value. `Full "
"description <https://www.djangoproject.com/weblog/2010/sep/08/security-"
"release/>`__"
msgstr ""

# cec302f69c744dac953aff13956cad08
#: ../../releases/security.txt:150
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/7f84657b6b>`__"
msgstr ""

# 99cd58a29b624bd6b26ef7715d3d7002
#: ../../releases/security.txt:154
msgid "December 22, 2010 - CVE-2010-4534"
msgstr ""

# 01b2b2b78b994eb985739b21c117d7df
#: ../../releases/security.txt:156
msgid ""
"`CVE-2010-4534 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2010-4534&cid=3>`_: Information leakage in administrative "
"interface. `Full description <https://www.djangoproject.com/weblog/2010/"
"dec/22/security/>`__"
msgstr ""

# 637a0194281c4dc3b822beb221c6ba43
#: ../../releases/security.txt:161
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/17084839fd>`__"
msgstr ""

# 0f26601fb6a241389123d9995aeda55a
#: ../../releases/security.txt:163
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/85207a245b>`__"
msgstr ""

# f9977364e62b4711be57cf7546b2b234
#: ../../releases/security.txt:166
msgid "December 22, 2010 - CVE-2010-4535"
msgstr ""

# b348cff1a0b346509597e40a63887b40
#: ../../releases/security.txt:168
msgid ""
"`CVE-2010-4535 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2010-4535&cid=2>`_: Denial-of-service in password-reset "
"mechanism. `Full description <https://www.djangoproject.com/weblog/2010/"
"dec/22/security/>`__"
msgstr ""

# edac35752ce547cd9b9c8dfa5cf10ada
#: ../../releases/security.txt:173
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/7f8dd9cbac>`__"
msgstr ""

# 2f3c5aa32623496b8579265f033a8df1
#: ../../releases/security.txt:175
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/d5d8942a16>`__"
msgstr ""

# 508121c1420f499e83eb19108fa45253
#: ../../releases/security.txt:179
msgid "February 8, 2011 - CVE-2011-0696"
msgstr ""

# 578a5f3d49b74a5aaa045d9ffba603ea
#: ../../releases/security.txt:181
msgid ""
"`CVE-2011-0696 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2011-0696&cid=2>`_: CSRF via forged HTTP headers. `Full "
"description <https://www.djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""

# fdbb1c829aed4d99a99c9a4a6c2f6ba6
#: ../../releases/security.txt:186
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/408c5c873c>`__"
msgstr ""

# 60db7ee19527403f997797ff29dccaad
#: ../../releases/security.txt:188
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/818e70344e>`__"
msgstr ""

# 98c796883b7249099f587416792cff9b
#: ../../releases/security.txt:192
msgid "February 8, 2011 - CVE-2011-0697"
msgstr ""

# 14c5e69782634bf39aa1fd66a6bdd315
#: ../../releases/security.txt:194
msgid ""
"`CVE-2011-0697 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2011-0697&cid=2>`_: XSS via unsanitized names of uploaded files. "
"`Full description <https://www.djangoproject.com/weblog/2011/feb/08/security/"
">`__"
msgstr ""

# bdfca55ba642466ca72199cbf51d1354
#: ../../releases/security.txt:199
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/1966786d2d>`__"
msgstr ""

# 526fb969b567412ea4f77c8d0a597c5f
#: ../../releases/security.txt:201
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/1f814a9547>`__"
msgstr ""

# d1f54afd451e476b94dc7efebd9fd6a3
#: ../../releases/security.txt:204
msgid "February 8, 2011 - CVE-2011-0698"
msgstr ""

# 958ea293bc264509bd11c1461d7a0dee
#: ../../releases/security.txt:206
msgid ""
"`CVE-2011-0698 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2011-0698&cid=2>`_: Directory-traversal on Windows via incorrect "
"path-separator handling. `Full description <https://www.djangoproject.com/"
"weblog/2011/feb/08/security/>`__"
msgstr ""

# df9bdec6b3d14dbfa79dfee8436f7400
#: ../../releases/security.txt:211
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/570a32a047>`__"
msgstr ""

# d4968884fcd143188dcfac9466697bee
#: ../../releases/security.txt:213
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/194566480b>`__"
msgstr ""

# ef42d1b2edc045a78329587ac055bd4a
#: ../../releases/security.txt:217
msgid "September 9, 2011 - CVE-2011-4136"
msgstr ""

# 0ef73971a2fb4f46a98707053c29e324
#: ../../releases/security.txt:219
msgid ""
"`CVE-2011-4136 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2011-4136&cid=2>`_: Session manipulation when using memory-cache-"
"backed session. `Full description <https://www.djangoproject.com/weblog/2011/"
"sep/09/security-releases-issued/>`__"
msgstr ""

# 8df7879aecec4ca18bfd42a70ed48725
#: ../../releases/security.txt:224
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/ac7c3a110f>`__"
msgstr ""

# a6df3fdf5eb64713a8b226a81e94c723
#: ../../releases/security.txt:226
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/fbe2eead2f>`__"
msgstr ""

# 5f6de53c24d04527893c6ee7aa6543ac
#: ../../releases/security.txt:229
msgid "September 9, 2011 - CVE-2011-4137"
msgstr ""

# caa58b25ffac453280ef29795cbd92d8
#: ../../releases/security.txt:231
msgid ""
"`CVE-2011-4137 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2011-4137&cid=2>`_: Denial-of-service via via ``URLField."
"verify_exists``. `Full description <https://www.djangoproject.com/"
"weblog/2011/sep/09/security-releases-issued/>`__"
msgstr ""

# 6db273a58acc4013b7af90897e1fd029
#: ../../releases/security.txt:236
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/7268f8af86>`__"
msgstr ""

# e7ba097e4c2a4d248b6ced08c0849dd0
#: ../../releases/security.txt:238
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/1a76dbefdf>`__"
msgstr ""

# 27bda37540d74f858a22016970484577
#: ../../releases/security.txt:241
msgid "September 9, 2011 - CVE-2011-4138"
msgstr ""

# bb14b965b59e4e90aa6eb853689023f6
#: ../../releases/security.txt:243
msgid ""
"`CVE-2011-4138 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2011-4138&cid=2>`_: Information leakage/arbitrary request "
"issuance via ``URLField.verify_exists``. `Full description <https://www."
"djangoproject.com/weblog/2011/sep/09/security-releases-issued/>`__"
msgstr ""

# 8731044391c341f58c9eeea5768020ca
#: ../../releases/security.txt:248
msgid ""
"Django 1.2: `(patch) <https://github.com/django/django/commit/7268f8af86>`__"
msgstr ""

# 325dccc21edb4f1f9ee2dc24f19eb00d
#: ../../releases/security.txt:250
msgid ""
"Django 1.3: `(patch) <https://github.com/django/django/commit/1a76dbefdf>`__"
msgstr ""

# 36cbfedfeb9841989d0899bfe4149a38
#: ../../releases/security.txt:253
msgid "September 9, 2011 - CVE-2011-4139"
msgstr ""

# f15c5b8b0ae54d419786c4284b022a6e
#: ../../releases/security.txt:255
msgid ""
"`CVE-2011-4139 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2011-4139&cid=2>`_: ``Host`` header cache poisoning. `Full "
"description <https://www.djangoproject.com/weblog/2011/sep/09/security-"
"releases-issued/>`__"
msgstr ""

# a7d76451cbcf4d6ba33038a78851c22b
#: ../../releases/security.txt:260
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/c613af4d64>`__"
msgstr ""

# c029a50096ee4b40ab16180be0031580
#: ../../releases/security.txt:262
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/2f7fadc38e>`__"
msgstr ""

# edbd91a064a04152b0ede71dc2181365
#: ../../releases/security.txt:265
msgid "September 9, 2011 - CVE-2011-4140"
msgstr ""

# e1f34089a2054855ac68f461ff856b63
#: ../../releases/security.txt:267
msgid ""
"`CVE-2011-4140 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2011-4140&cid=2>`_: Potential CSRF via ``Host`` header.  `Full "
"description <https://www.djangoproject.com/weblog/2011/sep/09/security-"
"releases-issued/>`__"
msgstr ""

# 0bcf7c0933894132a1e8c66f12986087
#: ../../releases/security.txt:272
msgid "This notification was an advisory only, so no patches were issued."
msgstr ""

# 12953d0a9126454c8ac2196be453a1e7
#: ../../releases/security.txt:274
msgid "Django 1.2"
msgstr ""

# eca3a283a6dc4ce88ca850dcfb610060
#: ../../releases/security.txt:276
msgid "Django 1.3"
msgstr ""

# 9ec1bc780c9d443bb6384f35b10af849
#: ../../releases/security.txt:280
msgid "July 30, 2012 - CVE-2012-3442"
msgstr ""

# fccf45dd87624e6ebcbeba806410b242
#: ../../releases/security.txt:282
msgid ""
"`CVE-2012-3442 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2012-3442&cid=2>`_: XSS via failure to validate redirect scheme. "
"`Full description <https://www.djangoproject.com/weblog/2012/jul/30/security-"
"releases-issued/>`__"
msgstr ""

# 09e55493eb2d4126a14f9fa944aa2971
#: ../../releases/security.txt:287
msgid ""
"Django 1.3: `(patch) <https://github.com/django/django/"
"commit/4dea4883e6c50d75f215a6b9bcbd95273f57c72d>`__"
msgstr ""

# 6f579c3670c5408faaf32649f604c33b
#: ../../releases/security.txt:289
msgid ""
"Django 1.4: `(patch) <https://github.com/django/django/commit/"
"e34685034b60be1112160e76091e5aee60149fa1>`__"
msgstr ""

# 4dfd0ad87ad047b9bc8ad33ec95729aa
#: ../../releases/security.txt:293
msgid "July 30, 2012 - CVE-2012-3443"
msgstr ""

# d442514237744911a4270178f4351bc8
#: ../../releases/security.txt:295
msgid ""
"`CVE-2012-3443 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2012-3443&cid=2>`_: Denial-of-service via compressed image files. "
"`Full description <https://www.djangoproject.com/weblog/2012/jul/30/security-"
"releases-issued/>`__"
msgstr ""

# d9bc74dd80864ba38341590e48cbd1c2
#: ../../releases/security.txt:300
msgid ""
"Django 1.3: `(patch) <https://github.com/django/django/commit/"
"b2eb4787a0fff9c9993b78be5c698e85108f3446>`__"
msgstr ""

# 3386d0db405148c7a858066ebe85ef3e
#: ../../releases/security.txt:302
msgid ""
"Django 1.4: `(patch) <https://github.com/django/django/commit/"
"c14f325c4eef628bc7bfd8873c3a72aeb0219141>`__"
msgstr ""

# 043173401fd146948ad8385a5a8a9f8b
#: ../../releases/security.txt:306
msgid "July 30, 2012 - CVE-2012-3444"
msgstr ""

# 9912ef65e0324cecb2cfa709b1e4f3a4
#: ../../releases/security.txt:308
msgid ""
"`CVE-2012-3444 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2012-3444&cid=2>`_: Denial-of-service via large image files. "
"`Full description <https://www.djangoproject.com/weblog/2012/jul/30/security-"
"releases-issued/>`__"
msgstr ""

# 506c74e18a4f441b8d94d6a9353f4dba
#: ../../releases/security.txt:313
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/"
"commit/9ca0ff6268eeff92d0d0ac2c315d4b6a8e229155>`__"
msgstr ""

# bbadb958c1c94672b54cde464bde8011
#: ../../releases/security.txt:315
msgid ""
"Django 1.4 `(patch) <https://github.com/django/django/commit/"
"da33d67181b53fe6cc737ac1220153814a1509f6>`__"
msgstr ""

# 6e58b69d6ee542148c38a2ab461d99d9
#: ../../releases/security.txt:319
msgid "October 17, 2012 - CVE-2012-4520"
msgstr ""

# d7f7b04a5f734baa95b3e5a05c337e56
#: ../../releases/security.txt:321
msgid ""
"`CVE-2012-4520 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2012-4520&cid=2>`_: ``Host`` header poisoning. `Full description "
"<https://www.djangoproject.com/weblog/2012/oct/17/security/>`__"
msgstr ""

# 90dbe0c0be5e4128893ec3a628781592
#: ../../releases/security.txt:326
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/"
"b45c377f8f488955e0c7069cad3f3dd21910b071>`__"
msgstr ""

# d1d3e3a129ba4fa7b38885d872761190
#: ../../releases/security.txt:328
msgid ""
"Django 1.4 `(patch) <https://github.com/django/django/"
"commit/92d3430f12171f16f566c9050c40feefb830a4a3>`__"
msgstr ""

# fd485d265f9f419e90ba5b36a0876e67
#: ../../releases/security.txt:332
msgid "December 10, 2012 - No CVE 1"
msgstr ""

# fba613ddec8f4b7c8ae7a3a155f786e3
#: ../../releases/security.txt:334
msgid ""
"Additional hardening of ``Host`` header handling. `Full description <https://"
"www.djangoproject.com/weblog/2012/dec/10/security/>`__"
msgstr ""

# ba330af096c94081b3e032a0d54de05a
#: ../../releases/security.txt:339
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/"
"commit/2da4ace0bc1bc1d79bf43b368cb857f6f0cd6b1b>`__"
msgstr ""

# b4c04b80f22d49698a419445ae4178cc
#: ../../releases/security.txt:341
msgid ""
"Django 1.4 `(patch) <https://github.com/django/django/"
"commit/319627c184e71ae267d6b7f000e293168c7b6e09>`__"
msgstr ""

# ad7c4594f95544a6b3e8d99b33e8ee9f
#: ../../releases/security.txt:345
msgid "December 10, 2012 - No CVE 2"
msgstr ""

# e7a544f357834cbfaab5fe15dab72af8
#: ../../releases/security.txt:347
msgid ""
"Additional hardening of redirect validation. `Full description <https://www."
"djangoproject.com/weblog/2012/dec/10/security/>`__"
msgstr ""

# 812e28c653164ee7bd25f1f14f274b06
#: ../../releases/security.txt:352
msgid ""
"Django 1.3: `(patch) <https://github.com/django/django/"
"commit/1515eb46daa0897ba5ad5f0a2db8969255f1b343>`__"
msgstr ""

# 7acdaf71a8a848549a9db0a50b7ac429
#: ../../releases/security.txt:354
msgid ""
"Django 1.4: `(patch) <https://github.com/django/django/commit/"
"b2ae0a63aeec741f1e51bac9a95a27fd635f9652>`__"
msgstr ""

# 8b33d2128296483bac68a2b46ac1d986
#: ../../releases/security.txt:357
msgid "February 19, 2013 - No CVE"
msgstr ""

# e5696d8c213b4416aef4ff0b789ef00c
#: ../../releases/security.txt:359
msgid ""
"Additional hardening of ``Host`` header handling. `Full description <https://"
"www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

# e4a2c947dbe84ffba95781eee4e4e75d
#: ../../releases/security.txt:364
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/"
"commit/27cd872e6e36a81d0bb6f5b8765a1705fecfc253>`__"
msgstr ""

# e5adc5d1f6f747b6ae22756e67c26ab0
#: ../../releases/security.txt:366
msgid ""
"Django 1.4 `(patch) <https://github.com/django/django/"
"commit/9936fdb11d0bbf0bd242f259bfb97bbf849d16f8>`__"
msgstr ""

# b27d472dd6c7493e94bd7b85981c983d
#: ../../releases/security.txt:369
msgid "February 19, 2013 - CVE-2013-1664/1665"
msgstr ""

# 662b67d03edd4cf887c98db0dfa39082
#: ../../releases/security.txt:371
msgid ""
"`CVE-2013-1664 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2013-1664&cid=2>`_ and `CVE-2013-1665 <http://web.nvd.nist.gov/"
"view/vuln/detail?vulnId=CVE-2013-1665&cid=2>`_: Entity-based attacks against "
"Python XML libraries. `Full description <https://www.djangoproject.com/"
"weblog/2013/feb/19/security/>`__"
msgstr ""

# 915fe474fb864984ac9c618e189b55bf
#: ../../releases/security.txt:376
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/"
"d19a27066b2247102e65412aa66917aff0091112>`__"
msgstr ""

# 65bc5a7f1b9445feb7988e3b3ed68224
#: ../../releases/security.txt:378
msgid ""
"Django 1.4 `(patch) <https://github.com/django/django/"
"commit/1c60d07ba23e0350351c278ad28d0bd5aa410b40>`__"
msgstr ""

# 9271930f351245cb92b13b039fae6daa
#: ../../releases/security.txt:381
msgid "February 19, 2013 - CVE-2013-0305"
msgstr ""

# 91926853fa9d40ddb540bd791cde276d
#: ../../releases/security.txt:383
msgid ""
"`CVE-2013-0305 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2013-0305&cid=2>`_: Information leakage via admin history log.  "
"`Full description <https://www.djangoproject.com/weblog/2013/feb/19/security/"
">`__"
msgstr ""

# 8ad1e429b4914636a2a15a0ccbabd9af
#: ../../releases/security.txt:388
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/"
"d3a45e10c8ac8268899999129daa27652ec0da35>`__"
msgstr ""

# 0b7e2c8bd11644aa8eedfee8c5f293c5
#: ../../releases/security.txt:390
msgid ""
"Django 1.4 `(patch) <https://github.com/django/django/"
"commit/0e7861aec73702f7933ce2a93056f7983939f0d6>`__"
msgstr ""

# ae07019b840b4af9b95e4f9a37ddc701
#: ../../releases/security.txt:394
msgid "February 19, 2013 - CVE-2013-0306"
msgstr ""

# 96ccb2bd19564f16ba95c2ff36807e45
#: ../../releases/security.txt:396
msgid ""
"`CVE-2013-0306 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2013-0306&cid=2>`_: Denial-of-service via formset ``max_num`` "
"bypass. `Full description <https://www.djangoproject.com/weblog/2013/feb/19/"
"security/>`__"
msgstr ""

# a5653ace699048d0b696c623fe727359
#: ../../releases/security.txt:401
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/"
"d7094bbce8cb838f3b40f504f198c098ff1cf727>`__"
msgstr ""

# cadb52a73a0f496e80dc2229401d30aa
#: ../../releases/security.txt:403
msgid ""
"Django 1.4 `(patch) <https://github.com/django/django/"
"commit/0cc350a896f70ace18280410eb616a9197d862b0>`__"
msgstr ""

# 4a07a5fe6a554e50806e3bfdcd2c75b2
#: ../../releases/security.txt:406
msgid "August 13, 2013 - Awaiting CVE 1"
msgstr ""

# 4287b04a5c2c4fc084e5b8e319b73ba5
#: ../../releases/security.txt:408
msgid ""
"(CVE not yet issued): XSS via admin trusting ``URLField`` values. `Full "
"description <https://www.djangoproject.com/weblog/2013/aug/13/security-"
"releases-issued/>`__"
msgstr ""

# 7d8e9452d5b643d1b706393d6d82605e
#: ../../releases/security.txt:413
msgid ""
"Django 1.5 `(patch) <https://github.com/django/django/"
"commit/90363e388c61874add3f3557ee654a996ec75d78>`__"
msgstr ""

# 2038378b4f1641b78a0eb394dc5bf404
#: ../../releases/security.txt:416
msgid "August 13, 2013 - Awaiting CVE 2"
msgstr ""

# 778384e048594d3ca1f37a1bd2b94b8f
#: ../../releases/security.txt:418
msgid ""
"(CVE not yet issued): Possible XSS via unvalidated URL redirect schemes. "
"`Full description <https://www.djangoproject.com/weblog/2013/aug/13/security-"
"releases-issued/>`__"
msgstr ""

# d7d4ab69a026428da2d665d6085f0440
#: ../../releases/security.txt:423
msgid ""
"Django 1.4 `(patch) <https://github.com/django/django/commit/"
"ec67af0bd609c412b76eaa4cc89968a2a8e5ad6a>`__"
msgstr ""

# 0ae7fdbfee6f4c738620c7a3fd354815
#: ../../releases/security.txt:425
msgid ""
"Django 1.5 `(patch) <https://github.com/django/django/"
"commit/1a274ccd6bc1afbdac80344c9b6e5810c1162b5f>`__"
msgstr ""

# 45866e6fad014d9c8985437ce51a7fd4
#: ../../releases/security.txt:428
msgid "September 10, 2013 - CVE-2013-4315"
msgstr ""

# 2db2da9612f544ce9740af937f4aba28
#: ../../releases/security.txt:430
msgid ""
"`CVE-2013-4315 <http://web.nvd.nist.gov/view/vuln/detail?"
"vulnId=CVE-2013-4315&cid=2>`_ Directory-traversal via ``ssi`` template tag. "
"`Full description <https://www.djangoproject.com/weblog/2013/sep/10/security-"
"releases-issued/>`__"
msgstr ""

# ea548268fe5d40a99522dd7678e9782d
#: ../../releases/security.txt:435
msgid ""
"Django 1.4 `(patch) <https://github.com/django/django/"
"commit/87d2750b39f6f2d54b7047225521a44dcd37e896>`__"
msgstr ""

# 782617866f1e45e186935df285a70066
#: ../../releases/security.txt:437
msgid ""
"Django 1.5 `(patch) <https://github.com/django/django/"
"commit/988b61c550d798f9a66d17ee0511fb7a9a7f33ca>`__"
msgstr ""

# 2db7fe6961e74174a5d837574a9c23c1
#: ../../releases/security.txt:441
msgid "September 14, 2013 - CVE-2013-1443"
msgstr ""

# c218092fa04147179026024054ae976c
#: ../../releases/security.txt:443
msgid ""
"CVE-2013-1443: Denial-of-service via large passwords. `Full description "
"<https://www.djangoproject.com/weblog/2013/sep/15/security/>`__"
msgstr ""

# 463422f225be406fa4e7dff11f781a64
#: ../../releases/security.txt:448
msgid ""
"Django 1.4 `(patch <https://github.com/django/django/"
"commit/3f3d887a6844ec2db743fee64c9e53e04d39a368>`__ and `Python "
"compatibility fix) <https://github.com/django/django/"
"commit/6903d1690a92aa040adfb0c8eb37cf62e4206714>`__"
msgstr ""

# 3dd37987ddac4a988504f47fc0172498
#: ../../releases/security.txt:450
msgid ""
"Django 1.5 `(patch) <https://github.com/django/django/"
"commit/22b74fa09d7ccbc8c52270d648a0da7f3f0fa2bc>`__"
msgstr ""
