# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-04 09:46+0200\n"
"PO-Revision-Date: 2014-02-17 19:51+0600\n"
"Last-Translator: Vitaliy Dorokhin <seryimysh@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.6.4\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"Language: ru_RU\n"

# dc1999d6248e49c4b6338bf0e588565f
#: ../../topics/auth/customizing.txt:3
msgid "Customizing authentication in Django"
msgstr "Пользовательская настройка аутентификации в Django"

# 144516011cab41b0a589fbc07481ace1
#: ../../topics/auth/customizing.txt:5
msgid ""
"The authentication that comes with Django is good enough for most common "
"cases, but you may have needs not met by the out-of-the-box defaults. To "
"customize authentication to your projects needs involves understanding what "
"points of the provided system are extendible or replaceable. This document "
"provides details about how the auth system can be customized."
msgstr ""
"Система аутентификации, встроенная в Django, вполне может использоваться в "
"большинстве общих случаев, но возникают ситуации когда вам может "
"понадобиться что-то особенное. Для адаптации системы аутентификации к "
"потребностям вашего проекта, может потребоватся понимание  вами, какие "
"компоненты существующей системы являются расширяемыми или вообще могут быть "
"заменены. Данный документ включает в себя подробную информацию обо всех "
"аспектах адаптации существующей системы аутентификации."

# a57e433fb0724475a6c781eb17aa0f25
#: ../../topics/auth/customizing.txt:11
msgid ""
":ref:`Authentication backends <authentication-backends>` provide an "
"extensible system for when a username and password stored with the User "
"model need to be authenticated against a different service than Django's "
"default."
msgstr ""
":ref:`Механизм аутентификации на стороне сервера <authentication-backends>` "
"представляет собой легко расширяемую систему и в случае когда имя "
"пользователя и пароль хранятся в модели \"Пользователь(User model)\" или "
"если возникнет необходимость аутентификации при помощи сторонних сервисов "
"совместно с системой используемой Django по-умолчанию."

# 04fda7fcc5314906bad198f0d7179672
#: ../../topics/auth/customizing.txt:15
msgid ""
"You can give your models :ref:`custom permissions <custom-permissions>` that "
"can be checked through Django's authorization system."
msgstr ""
"Вы можете дополнить свою модель  :ref:`специальными правами доступа <custom-"
"permissions>`, которые могут быть проверены при помощи системы авторизации "
"Django."

# 9b112e3d2dc04744b1c72e7527459e28
#: ../../topics/auth/customizing.txt:18
msgid ""
"You can :ref:`extend <extending-user>` the default User model, or :ref:"
"`substitute <auth-custom-user>` a completely customized model."
msgstr ""
"Вы можете :ref:`расширить <extending-user>` пользовательскую модель(User "
"model) или полностью :ref:`заменить <auth-custom-user>` специально "
"разработанной моделью."

# a05e6718ef6d408096c724f12f4c1d44
#: ../../topics/auth/customizing.txt:24
msgid "Other authentication sources"
msgstr "Дополнительные средства аутентификации"

# 07a08e2dcc9d45a4ad1c6daf6f0398d6
#: ../../topics/auth/customizing.txt:26
msgid ""
"There may be times you have the need to hook into another authentication "
"source -- that is, another source of usernames and passwords or "
"authentication methods."
msgstr ""
"Бывают случаи когда вам может понадобиться воспользоваться информацией для "
"аутентификации из дополнительных источников -- такой как, имя пользователя, "
"пароль или метод аутентификации. "

# 7e59bc5b8efb48da9513971e8acb7301
#: ../../topics/auth/customizing.txt:30
msgid ""
"For example, your company may already have an LDAP setup that stores a "
"username and password for every employee. It'd be a hassle for both the "
"network administrator and the users themselves if users had separate "
"accounts in LDAP and the Django-based applications."
msgstr ""
"Например, ваша компания уже имеет сервер LDAP настроенный в качестве "
"хранилища имён пользователей и паролей сотрудников. Наличие разных учетных "
"записей в службе LDAP и в Django-приложении могло бы стать проблемой как для "
"системных администраторов так и для самих пользователей."

# e81baf5105b2432a99da09b356d6bc48
#: ../../topics/auth/customizing.txt:35
msgid ""
"So, to handle situations like this, the Django authentication system lets "
"you plug in other authentication sources. You can override Django's default "
"database-based scheme, or you can use the default system in tandem with "
"other systems."
msgstr ""
"Для обработки подобной ситуации система аутентификации Django позволяет вам "
"подключить внешние источники аутентификационных данных. Вы можете "
"переопределить базовую систему Django основанную на использовании баз данных "
"или вы можете использовать разные механизмы совместно."

# 504ff3c35fce494a895598260f2069b0
#: ../../topics/auth/customizing.txt:40
msgid ""
"See the :ref:`authentication backend reference <authentication-backends-"
"reference>` for information on the authentication backends included with "
"Django."
msgstr ""
"Для более подробной информации обратитесь к :ref:`справке по аутентификации "
"на стороне сервера <authentication-backends-reference>` чтобы узнать о "
"встроенных алгоритмах аутентификации Django."

# 25440c03c8a14f3d8df7f2229da3a9f5
#: ../../topics/auth/customizing.txt:45
msgid "Specifying authentication backends"
msgstr "Определение механизма аутентификации на стороне сервера"

# 194ef4abe69144ccb51e791471733fe4
#: ../../topics/auth/customizing.txt:47
msgid ""
"Behind the scenes, Django maintains a list of \"authentication backends\" "
"that it checks for authentication. When somebody calls :func:`django.contrib."
"auth.authenticate()` -- as described in :ref:`How to log a user in <how-to-"
"log-a-user-in>` above -- Django tries authenticating across all of its "
"authentication backends. If the first authentication method fails, Django "
"tries the second one, and so on, until all backends have been attempted."
msgstr ""
"\"За кадром\" Django поддерживает набор \"методов авторизации на стороне "
"сервера\" для проверки аутентификации. В случае вызова функции :func:`django."
"contrib.auth.authenticate()` -- описанной в руководстве :ref:`Процесс "
"авторизации пользователя <how-to-log-a-user-in>` -- Django пытается "
"выполнить аутентификацию используя все доступные методы. Если первый метод "
"аутентификации не принёс результатов, вызывается второй, третий и т. д. до "
"тех пор пока аутентификация не будет выполнена."

# 053e9e89b35c4e21a0111f89b4b493e5
#: ../../topics/auth/customizing.txt:54
msgid ""
"The list of authentication backends to use is specified in the :setting:"
"`AUTHENTICATION_BACKENDS` setting. This should be a tuple of Python path "
"names that point to Python classes that know how to authenticate. These "
"classes can be anywhere on your Python path."
msgstr ""
"Список доступных для приложения методов аутентификации определяется "
"параметром :setting:`AUTHENTICATION_BACKENDS`. Данный параметр является "
"стандартным кортежем языка Python в котором через точку описываются пути к "
"классам языка Python в которых описан механизм аутентификации. Данные классы "
"могут находится в любом подкаталоге, каталога установки Python."

# 0008ccf4cf494d01b6aa39941337eacc
#: ../../topics/auth/customizing.txt:59
msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr ""
"По-умолчанию, параметр :setting:`AUTHENTICATION_BACKENDS` имеет следующее "
"значение::"

# f5cbd53ae57f4663afd34c484fe417f2
#: ../../topics/auth/customizing.txt:63
msgid ""
"That's the basic authentication backend that checks the Django users "
"database and queries the built-in permissions. It does not provide "
"protection against brute force attacks via any rate limiting mechanism. You "
"may either implement your own rate limiting mechanism in a custom auth "
"backend, or use the mechanisms provided by most Web servers."
msgstr ""
"Данное значение ссылается на стандартное серверное приложение выполняющее "
"аутентификацию согласно базы данных пользователей Django и выполняющее "
"проверку стандартных встроенных в фреймворк разрешений. Данное приложение не "
"предоставляет какой-либо защиты от атак выполняемых методом простого "
"перебора(brute-force) например, такой как, ограничению количества попыток "
"ввода пароля. Вы можете создать собственный механизм ограничения и проверок "
"или воспользоваться механизмами предоставляемыми большинством Web-серверов."

# 738825a5703b48d1a3becfef4c50cd16
#: ../../topics/auth/customizing.txt:69
msgid ""
"The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same "
"username and password is valid in multiple backends, Django will stop "
"processing at the first positive match."
msgstr ""
"Параметр :setting:`AUTHENTICATION_BACKENDS` является списком сущностьей и "
"таким образом если имя пользователя и пароль является действительным для "
"нескольких скриптов выполняющих проверку то в этом случае Django "
"остановиться при первом совпадении в списке."

# 75f50f010f1b41b2b2f9619347461018
#: ../../topics/auth/customizing.txt:75
msgid ""
"Once a user has authenticated, Django stores which backend was used to "
"authenticate the user in the user's session, and re-uses the same backend "
"for the duration of that session whenever access to the currently "
"authenticated user is needed. This effectively means that authentication "
"sources are cached on a per-session basis, so if you change :setting:"
"`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if you need "
"to force users to re-authenticate using different methods. A simple way to "
"do that is simply to execute ``Session.objects.all().delete()``."
msgstr ""

# 1996302e7486469eae775e88bcc5e738
#: ../../topics/auth/customizing.txt:85
msgid "Writing an authentication backend"
msgstr ""

# 8be172c384854fe099a32b55c1cfd332
#: ../../topics/auth/customizing.txt:87
msgid ""
"An authentication backend is a class that implements two required methods: "
"``get_user(user_id)`` and ``authenticate(**credentials)``, as well as a set "
"of optional permission related :ref:`authorization methods "
"<authorization_methods>`."
msgstr ""

# 1507494a729f42d7b44a7a24b9571ff2
#: ../../topics/auth/customizing.txt:91
msgid ""
"The ``get_user`` method takes a ``user_id`` -- which could be a username, "
"database ID or whatever, but has to be the primary key of your ``User`` "
"object -- and returns a ``User`` object."
msgstr ""

# 04dac7c411804f1d97bf835486cd1ec5
#: ../../topics/auth/customizing.txt:95
msgid ""
"The ``authenticate`` method takes credentials as keyword arguments. Most of "
"the time, it'll just look like this::"
msgstr ""

# 526299e7bf864dfb9853ec5f12989f72
#: ../../topics/auth/customizing.txt:103
msgid "But it could also authenticate a token, like so::"
msgstr ""

# 609e72072fc3471aa226bd09e47ca1f4
#: ../../topics/auth/customizing.txt:110
msgid ""
"Either way, ``authenticate`` should check the credentials it gets, and it "
"should return a ``User`` object that matches those credentials, if the "
"credentials are valid. If they're not valid, it should return ``None``."
msgstr ""

# 7dedce7ad7134bd28c23d39015b266ac
#: ../../topics/auth/customizing.txt:114
msgid ""
"The Django admin system is tightly coupled to the Django ``User`` object "
"described at the beginning of this document. For now, the best way to deal "
"with this is to create a Django ``User`` object for each user that exists "
"for your backend (e.g., in your LDAP directory, your external SQL database, "
"etc.) You can either write a script to do this in advance, or your "
"``authenticate`` method can do it the first time a user logs in."
msgstr ""

# 5ea77eaf9f2a4b558a1702738d1deba2
#: ../../topics/auth/customizing.txt:121
msgid ""
"Here's an example backend that authenticates against a username and password "
"variable defined in your ``settings.py`` file and creates a Django ``User`` "
"object the first time a user authenticates::"
msgstr ""

# b4e65f3903fd4848a6e402f96691fdd5
#: ../../topics/auth/customizing.txt:164
msgid "Handling authorization in custom backends"
msgstr ""

# e43910ffa7cc4fdda17ffe99f8be9ee0
#: ../../topics/auth/customizing.txt:166
msgid "Custom auth backends can provide their own permissions."
msgstr ""

# 935943d538cc4dfcaab4aa2645a9aa06
#: ../../topics/auth/customizing.txt:168
msgid ""
"The user model will delegate permission lookup functions (:meth:`~django."
"contrib.auth.models.User.get_group_permissions()`, :meth:`~django.contrib."
"auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth.models."
"User.has_perm()`, and :meth:`~django.contrib.auth.models.User."
"has_module_perms()`) to any authentication backend that implements these "
"functions."
msgstr ""

# 03a040062aa24dd582b2cc77836a8273
#: ../../topics/auth/customizing.txt:175
msgid ""
"The permissions given to the user will be the superset of all permissions "
"returned by all backends. That is, Django grants a permission to a user that "
"any one backend grants."
msgstr ""

# 38a0bee9c3074fda94a1dbee9468ef94
#: ../../topics/auth/customizing.txt:179
msgid ""
"The simple backend above could implement permissions for the magic admin "
"fairly simply::"
msgstr ""

# 16130391e3124dc092e44755bfad48b1
#: ../../topics/auth/customizing.txt:190
msgid ""
"This gives full permissions to the user granted access in the above example. "
"Notice that in addition to the same arguments given to the associated :class:"
"`django.contrib.auth.models.User` functions, the backend auth functions all "
"take the user object, which may be an anonymous user, as an argument."
msgstr ""

# b56d51cb0a174b5f8f9d440401907b98
#: ../../topics/auth/customizing.txt:195
msgid ""
"A full authorization implementation can be found in the ``ModelBackend`` "
"class in `django/contrib/auth/backends.py`_, which is the default backend "
"and queries the ``auth_permission`` table most of the time. If you wish to "
"provide custom behavior for only part of the backend API, you can take "
"advantage of Python inheritance and subclass ``ModelBackend`` instead of "
"implementing the complete API in a custom backend."
msgstr ""

# e1b9bd5d475a4b77a34e969c883dab68
#: ../../topics/auth/customizing.txt:207
msgid "Authorization for anonymous users"
msgstr ""

# a5184bffba954a52ae41b2f40de825e6
#: ../../topics/auth/customizing.txt:209
msgid ""
"An anonymous user is one that is not authenticated i.e. they have provided "
"no valid authentication details. However, that does not necessarily mean "
"they are not authorized to do anything. At the most basic level, most Web "
"sites authorize anonymous users to browse most of the site, and many allow "
"anonymous posting of comments etc."
msgstr ""

# 1038a41583a94fe2824bdcd820916a99
#: ../../topics/auth/customizing.txt:215
msgid ""
"Django's permission framework does not have a place to store permissions for "
"anonymous users. However, the user object passed to an authentication "
"backend may be an :class:`django.contrib.auth.models.AnonymousUser` object, "
"allowing the backend to specify custom authorization behavior for anonymous "
"users. This is especially useful for the authors of re-usable apps, who can "
"delegate all questions of authorization to the auth backend, rather than "
"needing settings, for example, to control anonymous access."
msgstr ""

# 816c05f7049e41fd9d2fe94fbbd50795
#: ../../topics/auth/customizing.txt:226
msgid "Authorization for inactive users"
msgstr ""

# d35e109799e346cc9de73755fc123dfb
#: ../../topics/auth/customizing.txt:228
msgid ""
"An inactive user is a one that is authenticated but has its attribute "
"``is_active`` set to ``False``. However this does not mean they are not "
"authorized to do anything. For example they are allowed to activate their "
"account."
msgstr ""

# 404e141fe8cd4f2c9dd30a8b550be500
#: ../../topics/auth/customizing.txt:233
msgid ""
"The support for anonymous users in the permission system allows for a "
"scenario where anonymous users have permissions to do something while "
"inactive authenticated users do not."
msgstr ""

# 6eedc7dc7fd14df69e9d704dcc37ce0b
#: ../../topics/auth/customizing.txt:237
msgid ""
"Do not forget to test for the ``is_active`` attribute of the user in your "
"own backend permission methods."
msgstr ""

# 83909fa1e70e4ff7bd9f124964fad354
#: ../../topics/auth/customizing.txt:242
msgid "Handling object permissions"
msgstr ""

# 0df1986d2d254785b769391fc8edbb93
#: ../../topics/auth/customizing.txt:244
msgid ""
"Django's permission framework has a foundation for object permissions, "
"though there is no implementation for it in the core. That means that "
"checking for object permissions will always return ``False`` or an empty "
"list (depending on the check performed). An authentication backend will "
"receive the keyword parameters ``obj`` and ``user_obj`` for each object "
"related authorization method and can return the object level permission as "
"appropriate."
msgstr ""

# 18ffe06343d74202a586f4e7129c9252
#: ../../topics/auth/customizing.txt:254
msgid "Custom permissions"
msgstr ""

# d5859ff952be4e609a9b6c997a34b763
#: ../../topics/auth/customizing.txt:256
msgid ""
"To create custom permissions for a given model object, use the "
"``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""

# efcb0abe52714c44ae02a421a492e681
#: ../../topics/auth/customizing.txt:259
msgid ""
"This example Task model creates three custom permissions, i.e., actions "
"users can or cannot do with Task instances, specific to your application::"
msgstr ""

# 2850ddfb19f14bb1827d56d8614106b9
#: ../../topics/auth/customizing.txt:271
msgid ""
"The only thing this does is create those extra permissions when you run :"
"djadmin:`manage.py syncdb <syncdb>`. Your code is in charge of checking the "
"value of these permissions when an user is trying to access the "
"functionality provided by the application (viewing tasks, changing the "
"status of tasks, closing tasks.) Continuing the above example, the following "
"checks if a user may view tasks::"
msgstr ""

# 96cc523ced4149dfb1cf159686744f4e
#: ../../topics/auth/customizing.txt:283
msgid "Extending the existing User model"
msgstr ""

# 9b3f58de875e434382822a34c78674fa
#: ../../topics/auth/customizing.txt:285
msgid ""
"There are two ways to extend the default :class:`~django.contrib.auth.models."
"User` model without substituting your own model. If the changes you need are "
"purely behavioral, and don't require any change to what is stored in the "
"database, you can create a :ref:`proxy model <proxy-models>` based on :class:"
"`~django.contrib.auth.models.User`. This allows for any of the features "
"offered by proxy models including default ordering, custom managers, or "
"custom model methods."
msgstr ""

# 6539e435da334cfea4c6eb3106514f6b
#: ../../topics/auth/customizing.txt:293
msgid ""
"If you wish to store information related to ``User``, you can use a :ref:"
"`one-to-one relationship <ref-onetoone>` to a model containing the fields "
"for additional information. This one-to-one model is often called a profile "
"model, as it might store non-auth related information about a site user. For "
"example you might create an Employee model::"
msgstr ""

# 443c8408ce9a4b44bfb207aab6e20659
#: ../../topics/auth/customizing.txt:305
msgid ""
"Assuming an existing Employee Fred Smith who has both a User and Employee "
"model, you can access the related information using Django's standard "
"related model conventions::"
msgstr ""

# 43e3bf1295734f129eeaa834dc63dfea
#: ../../topics/auth/customizing.txt:312
msgid ""
"To add a profile model's fields to the user page in the admin, define an :"
"class:`~django.contrib.admin.InlineModelAdmin` (for this example, we'll use "
"a :class:`~django.contrib.admin.StackedInline`) in your app's ``admin.py`` "
"and add it to a ``UserAdmin`` class which is registered with the :class:"
"`~django.contrib.auth.models.User` class::"
msgstr ""

# 31b71c29bdbc426e8942977fe52b956f
#: ../../topics/auth/customizing.txt:339
msgid ""
"These profile models are not special in any way - they are just Django "
"models that happen to have a one-to-one link with a User model. As such, "
"they do not get auto created when a user is created, but a :attr:`django.db."
"models.signals.post_save` could be used to create or update related models "
"as appropriate."
msgstr ""

# 0ffc14942cc34981ae7850c9f0c553be
#: ../../topics/auth/customizing.txt:345
msgid ""
"Note that using related models results in additional queries or joins to "
"retrieve the related data, and depending on your needs substituting the User "
"model and adding the related fields may be your better option.  However "
"existing links to the default User model within your project's apps may "
"justify the extra database load."
msgstr ""

# 2461916c662b4a2f9df759e81d651f90
#: ../../topics/auth/customizing.txt:353
msgid ""
"With the introduction of :ref:`custom User models <auth-custom-user>`, the "
"use of :setting:`AUTH_PROFILE_MODULE` to define a single profile model is no "
"longer supported. See the :doc:`Django 1.5 release notes</releases/1.5>` for "
"more information."
msgstr ""

# 1c2efaf44d424112ba92b80e2a836fe6
#: ../../topics/auth/customizing.txt:359
msgid ""
"Prior to 1.5, a single profile model could be specified site-wide with the "
"setting :setting:`AUTH_PROFILE_MODULE` with a string consisting of the "
"following items, separated by a dot:"
msgstr ""

# 3b36c4aba0e84468af7260c2a7732113
#: ../../topics/auth/customizing.txt:363
msgid ""
"The name of the application (case sensitive) in which the user profile model "
"is defined (in other words, the name which was passed to :djadmin:`manage.py "
"startapp <startapp>` to create the application)."
msgstr ""

# f5d1198ed5854262a54aeadc7920d15f
#: ../../topics/auth/customizing.txt:368
msgid "The name of the model (not case sensitive) class."
msgstr ""

# 50bb1d1378cf4736944a29c30e0839cd
#: ../../topics/auth/customizing.txt:370
msgid ""
"For example, if the profile model was a class named ``UserProfile`` and was "
"defined inside an application named ``accounts``, the appropriate setting "
"would be::"
msgstr ""

# e7814f6ea4644e27aa4bf91c593b5cb7
#: ../../topics/auth/customizing.txt:376
msgid ""
"When a user profile model has been defined and specified in this manner, "
"each :class:`~django.contrib.auth.models.User` object will have a method -- :"
"class:`~django.contrib.auth.models.User.get_profile()` -- which returns the "
"instance of the user profile model associated with that :class:`~django."
"contrib.auth.models.User`."
msgstr ""

# 470ee041340d4e83bf82449324def502
#: ../../topics/auth/customizing.txt:382
msgid ""
"The method :class:`~django.contrib.auth.models.User.get_profile()` does not "
"create a profile if one does not exist."
msgstr ""

# 349a784381a54c64bb237e094d36e508
#: ../../topics/auth/customizing.txt:388
msgid "Substituting a custom User model"
msgstr ""

# 58fe5904c22c4705a8b9c279430dfac7
#: ../../topics/auth/customizing.txt:392
msgid ""
"Some kinds of projects may have authentication requirements for which "
"Django's built-in :class:`~django.contrib.auth.models.User` model is not "
"always appropriate. For instance, on some sites it makes more sense to use "
"an email address as your identification token instead of a username."
msgstr ""

# 3fcb367e07264be282cf9cba6cae855e
#: ../../topics/auth/customizing.txt:397
msgid ""
"Django allows you to override the default User model by providing a value "
"for the :setting:`AUTH_USER_MODEL` setting that references a custom model::"
msgstr ""

# 4b3093ac3b604bd3bdd0c1b77c0c5e02
#: ../../topics/auth/customizing.txt:402
msgid ""
"This dotted pair describes the name of the Django app (which must be in "
"your :setting:`INSTALLED_APPS`), and the name of the Django model that you "
"wish to use as your User model."
msgstr ""

# 2ff36687594e44f39b4ed7ebf2a668a4
#: ../../topics/auth/customizing.txt:406
msgid "Warning"
msgstr ""

# 479c1cdd57dc4ed8a1013273d8f03e27
#: ../../topics/auth/customizing.txt:408
msgid ""
"Changing :setting:`AUTH_USER_MODEL` has a big effect on your database "
"structure. It changes the tables that are available, and it will affect the "
"construction of foreign keys and many-to-many relationships. If you intend "
"to set :setting:`AUTH_USER_MODEL`, you should set it before running ``manage."
"py syncdb`` for the first time."
msgstr ""

# 1a9327ec26d54cb3a5f25e6bed315b18
#: ../../topics/auth/customizing.txt:414
msgid ""
"If you have an existing project and you want to migrate to using a custom "
"User model, you may need to look into using a migration tool like South_ to "
"ease the transition."
msgstr ""

# 3313436d270848d0868fae98003a05f3
#: ../../topics/auth/customizing.txt:421
msgid "Referencing the User model"
msgstr ""

# fdc5eeb0a93f4ca38f9abde72bca08d4
#: ../../topics/auth/customizing.txt:425
msgid ""
"If you reference :class:`~django.contrib.auth.models.User` directly (for "
"example, by referring to it in a foreign key), your code will not work in "
"projects where the :setting:`AUTH_USER_MODEL` setting has been changed to a "
"different User model."
msgstr ""

# 45d702a2bc7a4bc99edfc3f6301791e8
#: ../../topics/auth/customizing.txt:432
msgid ""
"Instead of referring to :class:`~django.contrib.auth.models.User` directly, "
"you should reference the user model using ``django.contrib.auth."
"get_user_model()``. This method will return the currently active User model "
"-- the custom User model if one is specified, or :class:`~django.contrib."
"auth.models.User` otherwise."
msgstr ""

# 1416a98044f547a3b0090aee4db7d059
#: ../../topics/auth/customizing.txt:438
msgid ""
"When you define a foreign key or many-to-many relations to the User model, "
"you should specify the custom model using the :setting:`AUTH_USER_MODEL` "
"setting. For example::"
msgstr ""

# 38474557ab574309a3afe8f41e88058a
#: ../../topics/auth/customizing.txt:449
msgid "Specifying a custom User model"
msgstr ""

# 5c2f568041074f2c836d7613a3568942
#: ../../topics/auth/customizing.txt:451
msgid "Model design considerations"
msgstr ""

# df22bd5ab7a4494cbdf62a6b0d66c569
#: ../../topics/auth/customizing.txt:453
msgid ""
"Think carefully before handling information not directly related to "
"authentication in your custom User Model."
msgstr ""

# ef7129832b9947cd80608b90753cb3c1
#: ../../topics/auth/customizing.txt:456
msgid ""
"It may be better to store app-specific user information in a model that has "
"a relation with the User model. That allows each app to specify its own user "
"data requirements without risking conflicts with other apps. On the other "
"hand, queries to retrieve this related information will involve a database "
"join, which may have an effect on performance."
msgstr ""

# 3d6ee88337c4408eb4cb1980466c2a0c
#: ../../topics/auth/customizing.txt:462
msgid ""
"Django expects your custom User model to meet some minimum requirements."
msgstr ""

# c3ea535fc8554fcfb9e8b849f94e3942
#: ../../topics/auth/customizing.txt:464
msgid "Your model must have an integer primary key."
msgstr ""

# 4d0ca145d0954f7db0da924b76b1a19f
#: ../../topics/auth/customizing.txt:466
msgid ""
"Your model must have a single unique field that can be used for "
"identification purposes. This can be a username, an email address, or any "
"other unique attribute."
msgstr ""

# f44d1a6c65574108bef9c7ad821fd8a4
#: ../../topics/auth/customizing.txt:470
msgid ""
"Your model must provide a way to address the user in a \"short\" and \"long"
"\" form. The most common interpretation of this would be to use the user's "
"given name as the \"short\" identifier, and the user's full name as the "
"\"long\" identifier. However, there are no constraints on what these two "
"methods return - if you want, they can return exactly the same value."
msgstr ""

# 0a3efc47f9074a278203dcb79d4ec157
#: ../../topics/auth/customizing.txt:477
msgid ""
"The easiest way to construct a compliant custom User model is to inherit "
"from :class:`~django.contrib.auth.models.AbstractBaseUser`. :class:`~django."
"contrib.auth.models.AbstractBaseUser` provides the core implementation of a "
"``User`` model, including hashed passwords and tokenized password resets. "
"You must then provide some key implementation details:"
msgstr ""

# 1c5a25fc450740f5bdb9214dd3581e61
#: ../../topics/auth/customizing.txt:489
msgid ""
"A string describing the name of the field on the User model that is used as "
"the unique identifier. This will usually be a username of some kind, but it "
"can also be an email address, or any other unique identifier. The field "
"*must* be unique (i.e., have ``unique=True`` set in its definition)."
msgstr ""

# cbb22549022442ecb7b537a5807e0711
#: ../../topics/auth/customizing.txt:495
msgid ""
"In the following example, the field ``identifier`` is used as the "
"identifying field::"
msgstr ""

# 4753e322cb7146f7aa4e8a67f0cc8f23
#: ../../topics/auth/customizing.txt:505
msgid ""
"A list of the field names that will be prompted for when creating a user via "
"the :djadmin:`createsuperuser` management command. The user will be prompted "
"to supply a value for each of these fields. It must include any field for "
"which :attr:`~django.db.models.Field.blank` is ``False`` or undefined and "
"may include additional fields you want prompted for when a user is created "
"interactively. However, it will not work for :class:`~django.db.models."
"ForeignKey` fields. ``REQUIRED_FIELDS`` has no effect in other parts of "
"Django, like creating a user in the admin."
msgstr ""

# 47f1ba775d3c44ee931de455feb3e9ba
#: ../../topics/auth/customizing.txt:513
msgid ""
"For example, here is the partial definition for a ``User`` model that "
"defines two required fields - a date of birth and height::"
msgstr ""

# 6862413955614cc7aa737fab6359d398
#: ../../topics/auth/customizing.txt:525
msgid ""
"``REQUIRED_FIELDS`` must contain all required fields on your User model, but "
"should *not* contain the ``USERNAME_FIELD``."
msgstr ""

# 144719a7b79949fab7d46394553fea6f
#: ../../topics/auth/customizing.txt:530
msgid ""
"A boolean attribute that indicates whether the user is considered \"active"
"\".  This attribute is provided as an attribute on ``AbstractBaseUser`` "
"defaulting to ``True``. How you choose to implement it will depend on the "
"details of your chosen auth backends. See the documentation of the :attr:"
"`attribute on the builtin user model <django.contrib.auth.models.User."
"is_active>` for details."
msgstr ""

# ed669fe876784a46a2a99c88268f95b5
#: ../../topics/auth/customizing.txt:539
msgid ""
"A longer formal identifier for the user. A common interpretation would be "
"the full name name of the user, but it can be any string that identifies the "
"user."
msgstr ""

# 4d6319c33ef742d08242e839b7d8fa6d
#: ../../topics/auth/customizing.txt:545
msgid ""
"A short, informal identifier for the user. A common interpretation would be "
"the first name of the user, but it can be any string that identifies the "
"user in an informal way. It may also return the same value as :meth:`django."
"contrib.auth.models.User.get_full_name()`."
msgstr ""

# 8a2df2c0db4a4922b41d1ac2f5fc77f2
#: ../../topics/auth/customizing.txt:550
msgid ""
"The following methods are available on any subclass of :class:`~django."
"contrib.auth.models.AbstractBaseUser`:"
msgstr ""

# 9dba43e6384d4e398df631aa9a92c6a4
#: ../../topics/auth/customizing.txt:557
msgid "Returns the value of the field nominated by ``USERNAME_FIELD``."
msgstr ""

# f3c17178b86640e39b55a29ea2257bd5
#: ../../topics/auth/customizing.txt:561
msgid ""
"Always returns ``False``. This is a way of differentiating from  :class:"
"`~django.contrib.auth.models.AnonymousUser` objects. Generally, you should "
"prefer using :meth:`~django.contrib.auth.models.AbstractBaseUser."
"is_authenticated()` to this method."
msgstr ""

# b63c2cf2ea4142ffbaff106a8023276a
#: ../../topics/auth/customizing.txt:569
msgid ""
"Always returns ``True``. This is a way to tell if the user has been "
"authenticated. This does not imply any permissions, and doesn't check if the "
"user is active - it only indicates that the user has provided a valid "
"username and password."
msgstr ""

# 4d99bf0582b948b9ae33a3f7a882193b
#: ../../topics/auth/customizing.txt:576
msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models."
"AbstractBaseUser` object."
msgstr ""

# 3889406be63d4cc596c79e49448e8879
#: ../../topics/auth/customizing.txt:582
msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""

# c26efedf1e8742f6b8621ad4f9f9156b
#: ../../topics/auth/customizing.txt:588
msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models."
"AbstractBaseUser.check_password()` for this user will never return ``True``. "
"Doesn't save the :class:`~django.contrib.auth.models.AbstractBaseUser` "
"object."
msgstr ""

# 202697b66f1a43f69653285a6ae7b1f3
#: ../../topics/auth/customizing.txt:594
msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""

# 2f8ef7be59f847dab944df233c76544b
#: ../../topics/auth/customizing.txt:599
msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` has been called for this user."
msgstr ""

# c15486348ad44c7eb401115eaf0c9360
#: ../../topics/auth/customizing.txt:603
msgid ""
"You should also define a custom manager for your ``User`` model. If your "
"``User`` model defines ``username``, ``email``, ``is_staff``, ``is_active``, "
"``is_superuser``, ``last_login``, and ``date_joined`` fields the same as "
"Django's default ``User``, you can just install Django's :class:`~django."
"contrib.auth.models.UserManager`; however, if your ``User`` model defines "
"different fields, you will need to define a custom manager that extends :"
"class:`~django.contrib.auth.models.BaseUserManager` providing two additional "
"methods:"
msgstr ""

# e9242546fb3d45d4bba173f774ced6e1
#: ../../topics/auth/customizing.txt:615
msgid ""
"The prototype of ``create_user()`` should accept the username field, plus "
"all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"fields, then ``create_user`` should be defined as::"
msgstr ""

# 482a91d1fc2b4181abacf17c2da10c3c
#: ../../topics/auth/customizing.txt:626
msgid ""
"The prototype of ``create_superuser()`` should accept the username field, "
"plus all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"fields, then ``create_superuser`` should be defined as::"
msgstr ""

# 16aca2d507ec47f4ae76237b3a369709
#: ../../topics/auth/customizing.txt:635
msgid ""
"Unlike ``create_user()``, ``create_superuser()`` *must* require the caller "
"to provider a password."
msgstr ""

# 6c1d3708407a42a1b981cf8f988ddbf9
#: ../../topics/auth/customizing.txt:638
msgid ""
":class:`~django.contrib.auth.models.BaseUserManager` provides the following "
"utility methods:"
msgstr ""

# 4d66de91688a4a3f9ed6377cdd4e43f0
#: ../../topics/auth/customizing.txt:645
msgid ""
"A classmethod that normalizes email addresses by lowercasing the domain "
"portion of the email address."
msgstr ""

# 5f027f9d4c9740bc87c2ad608055324d
#: ../../topics/auth/customizing.txt:650
msgid ""
"Retrieves a user instance using the contents of the field nominated by "
"``USERNAME_FIELD``."
msgstr ""

# 3609c0a248a749b1803c1552b432bfe5
#: ../../topics/auth/customizing.txt:655
msgid ""
"Returns a random password with the given length and given string of allowed "
"characters. (Note that the default value of ``allowed_chars`` doesn't "
"contain letters that can cause user confusion, including:"
msgstr ""

# 30a57e3247d94e55b9f0288886c13690
#: ../../topics/auth/customizing.txt:659
msgid ""
"``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, "
"uppercase letter i, and the number one)"
msgstr ""

# 6a427bdd6c6141c29d7aa0ba6d76bb0e
#: ../../topics/auth/customizing.txt:661
msgid ""
"``o``, ``O``, and ``0`` (uppercase letter o, lowercase letter o, and zero)"
msgstr ""

# efd33856926343bc8d0d00d2b3635718
#: ../../topics/auth/customizing.txt:665
msgid "Extending Django's default User"
msgstr ""

# 50bc1d3781b24aba94359d9e376aff13
#: ../../topics/auth/customizing.txt:667
msgid ""
"If you're entirely happy with Django's :class:`~django.contrib.auth.models."
"User` model and you just want to add some additional profile information, "
"you can simply subclass ``django.contrib.auth.models.AbstractUser`` and add "
"your custom profile fields. This class provides the full implementation of "
"the default :class:`~django.contrib.auth.models.User` as an :ref:`abstract "
"model <abstract-base-classes>`."
msgstr ""

# 6d2729899cf9475dbe1388a2cf62fe0e
#: ../../topics/auth/customizing.txt:677
msgid "Custom users and the built-in auth forms"
msgstr ""

# 0148c4c96c5c4e09a95453908efab99e
#: ../../topics/auth/customizing.txt:679
msgid ""
"As you may expect, built-in Django's :ref:`forms <built-in-auth-forms>` and :"
"ref:`views <built-in-auth-views>` make certain assumptions about the user "
"model that they are working with."
msgstr ""

# 2af8a077975541fea68c70c216e0e869
#: ../../topics/auth/customizing.txt:683
msgid ""
"If your user model doesn't follow the same assumptions, it may be necessary "
"to define a replacement form, and pass that form in as part of the "
"configuration of the auth views."
msgstr ""

# 758a9701dcac408d9c076872f116ce27
#: ../../topics/auth/customizing.txt:687
msgid ":class:`~django.contrib.auth.forms.UserCreationForm`"
msgstr ""

# b59e87fbdb904574ad11301cb3be659f
# ed733a70c59642f9a61ae931157c6f8b
#: ../../topics/auth/customizing.txt:689 ../../topics/auth/customizing.txt:694
msgid ""
"Depends on the :class:`~django.contrib.auth.models.User` model. Must be re-"
"written for any custom user model."
msgstr ""

# 85389abe1c97488cbfe0c7afa3ea3013
#: ../../topics/auth/customizing.txt:692
msgid ":class:`~django.contrib.auth.forms.UserChangeForm`"
msgstr ""

# 1d1678f051e94838b2b6a7547a9b3123
#: ../../topics/auth/customizing.txt:697
msgid ":class:`~django.contrib.auth.forms.AuthenticationForm`"
msgstr ""

# 582c0e63aceb4446b7d4e0d0d01b4900
#: ../../topics/auth/customizing.txt:699
msgid ""
"Works with any subclass of :class:`~django.contrib.auth.models."
"AbstractBaseUser`, and will adapt to use the field defined in "
"`USERNAME_FIELD`."
msgstr ""

# 86327fc3824b4672ab5c005f43712c1d
#: ../../topics/auth/customizing.txt:702
msgid ":class:`~django.contrib.auth.forms.PasswordResetForm`"
msgstr ""

# 38141af66280497786cfcc69656fe6c4
#: ../../topics/auth/customizing.txt:704
msgid ""
"Assumes that the user model has an integer primary key, has a field named "
"``email`` that can be used to identify the user, and a boolean field named "
"`is_active` to prevent password resets for inactive users."
msgstr ""

# a03728ac91284af689606f14430d4979
#: ../../topics/auth/customizing.txt:708
msgid ":class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

# 217bca6018474cdd9f4d04725e2c0733
# ddd2a845d3a5409daa031f6c607d019f
# 487d13e2b1044c6e85c954a95945e27d
#: ../../topics/auth/customizing.txt:710 ../../topics/auth/customizing.txt:714
#: ../../topics/auth/customizing.txt:718
msgid ""
"Works with any subclass of :class:`~django.contrib.auth.models."
"AbstractBaseUser`"
msgstr ""

# 09f2138649894413aa876c5babae9b47
#: ../../topics/auth/customizing.txt:712
msgid ":class:`~django.contrib.auth.forms.PasswordChangeForm`"
msgstr ""

# 1a987f2b36b24448adf49d6cb635d265
#: ../../topics/auth/customizing.txt:716
msgid ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"
msgstr ""

# eddfb8c2712240e098774535c9f2d2fe
#: ../../topics/auth/customizing.txt:722
msgid "Custom users and :mod:`django.contrib.admin`"
msgstr ""

# baab8c118208442a9d34cb2545c11711
#: ../../topics/auth/customizing.txt:724
msgid ""
"If you want your custom User model to also work with Admin, your User model "
"must define some additional attributes and methods. These methods allow the "
"admin to control access of the User to admin content:"
msgstr ""

# b9d26115cb884ea6945d6239082e67a4
#: ../../topics/auth/customizing.txt:732
msgid ""
"Returns ``True`` if the user is allowed to have access to the admin site."
msgstr ""

# 67dd2da1d12c489f8f8d9539bfdba0c0
#: ../../topics/auth/customizing.txt:736
msgid "Returns ``True`` if the user account is currently active."
msgstr ""

# 7bd3ad8f4f1143ec9730bcfac2843dd7
#: ../../topics/auth/customizing.txt:740
msgid ""
"Returns ``True`` if the user has the named permission. If ``obj`` is "
"provided, the permission needs to be checked against a specific object "
"instance."
msgstr ""

# b615bfab5b4b468bb9933a20569f75fd
#: ../../topics/auth/customizing.txt:746
msgid ""
"Returns ``True`` if the user has permission to access models in the given "
"app."
msgstr ""

# 77a1c03d94184b4c9494573db24db489
#: ../../topics/auth/customizing.txt:749
msgid ""
"You will also need to register your custom User model with the admin. If "
"your custom User model extends ``django.contrib.auth.models.AbstractUser``, "
"you can use Django's existing ``django.contrib.auth.admin.UserAdmin`` class. "
"However, if your User model extends :class:`~django.contrib.auth.models."
"AbstractBaseUser`, you'll need to define a custom ModelAdmin class. It may "
"be possible to subclass the default ``django.contrib.auth.admin.UserAdmin``; "
"however, you'll need to override any of the definitions that refer to fields "
"on ``django.contrib.auth.models.AbstractUser`` that aren't on your custom "
"User class."
msgstr ""

# 9afd5726a1094231bcb3682c6a81d8aa
#: ../../topics/auth/customizing.txt:761
msgid "Custom users and permissions"
msgstr ""

# 078189c775e145298dabe1a554ad24a4
#: ../../topics/auth/customizing.txt:763
msgid ""
"To make it easy to include Django's permission framework into your own User "
"class, Django provides :class:`~django.contrib.auth.models."
"PermissionsMixin`. This is an abstract model you can include in the class "
"hierarchy for your User model, giving you all the methods and database "
"fields necessary to support Django's permission model."
msgstr ""

# 46317cbb19954f899d6368084b05f52f
#: ../../topics/auth/customizing.txt:769
msgid ""
":class:`~django.contrib.auth.models.PermissionsMixin` provides the following "
"methods and attributes:"
msgstr ""

# 111e656d332241c1b3b2fe2db63b9a2d
#: ../../topics/auth/customizing.txt:776
msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr ""

# f6cec89fd302491099fd8f4489bfec13
#: ../../topics/auth/customizing.txt:781
msgid ""
"Returns a set of permission strings that the user has, through his/her "
"groups."
msgstr ""

# 39c1c2220205479c8d2d1406e045520d
#: ../../topics/auth/customizing.txt:784
msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr ""

# 70533a7a3ae54f70907550c9bdda5a92
#: ../../topics/auth/customizing.txt:789
msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""

# 793748a15997494aaf0a9aa484405fa7
#: ../../topics/auth/customizing.txt:792
msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr ""

# 2ac1acc5ffb64041880855f600c68b04
#: ../../topics/auth/customizing.txt:797
msgid ""
"Returns ``True`` if the user has the specified permission, where perm is in "
"the format ``\"<app label>.<permission codename>\"`` (see :ref:`permissions "
"<topic-authorization>`). If the user is inactive, this method will always "
"return ``False``."
msgstr ""

# 28636b1473a54ca2afd6ff80b7060155
#: ../../topics/auth/customizing.txt:802
msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""

# 8d684232ea68426e9683585610609eaf
#: ../../topics/auth/customizing.txt:807
msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If the "
"user is inactive, this method will always return ``False``."
msgstr ""

# 6fed4597cf274e3eb4fa01737ee3ee64
#: ../../topics/auth/customizing.txt:812
msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""

# 8c76581841da4a4d9d310109db4e7ec3
#: ../../topics/auth/customizing.txt:817
msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If the user is inactive, this method will always return "
"``False``."
msgstr ""

# 0ce7fbfe64dc4f2bab18478725f729c1
#: ../../topics/auth/customizing.txt:824
msgid "ModelBackend"
msgstr ""

# b0b0e89272d4474b8b5d0c78b59080d6
#: ../../topics/auth/customizing.txt:826
msgid ""
"If you don't include the :class:`~django.contrib.auth.models."
"PermissionsMixin`, you must ensure you don't invoke the permissions methods "
"on ``ModelBackend``. ``ModelBackend`` assumes that certain fields are "
"available on your user model. If your User model doesn't provide  those "
"fields, you will receive database errors when you check permissions."
msgstr ""

# 910d0980a004465ca135d03cb91bdc50
#: ../../topics/auth/customizing.txt:831
msgid "Custom users and Proxy models"
msgstr ""

# 5a16d83fe61e4ed4a9f0634a61eb631e
#: ../../topics/auth/customizing.txt:833
msgid ""
"One limitation of custom User models is that installing a custom User model "
"will break any proxy model extending :class:`~django.contrib.auth.models."
"User`. Proxy models must be based on a concrete base class; by defining a "
"custom User model, you remove the ability of Django to reliably identify the "
"base class."
msgstr ""

# f364c01886654acba0f78adb6dc7dd79
#: ../../topics/auth/customizing.txt:838
msgid ""
"If your project uses proxy models, you must either modify the proxy to "
"extend the User model that is currently in use in your project, or merge "
"your proxy's behavior into your User subclass."
msgstr ""

# 650f69a2fce54ee7aeed7fbcc3410e14
#: ../../topics/auth/customizing.txt:843
msgid "Custom users and signals"
msgstr ""

# 65c3169864b043f6aa2fc4330bbfbba4
#: ../../topics/auth/customizing.txt:845
msgid ""
"Another limitation of custom User models is that you can't use :func:`django."
"contrib.auth.get_user_model()` as the sender or target of a signal handler. "
"Instead, you must register the handler with the resulting User model. See :"
"doc:`/topics/signals` for more information on registering an sending signals."
msgstr ""

# 65429fd1f59147b9a5a975017c6c5baa
#: ../../topics/auth/customizing.txt:852
msgid "Custom users and testing/fixtures"
msgstr ""

# 834132476aad44f38f751050d45a53ac
#: ../../topics/auth/customizing.txt:854
msgid ""
"If you are writing an application that interacts with the User model, you "
"must take some precautions to ensure that your test suite will run "
"regardless of the User model that is being used by a project. Any test that "
"instantiates an instance of User will fail if the User model has been "
"swapped out. This includes any attempt to create an instance of User with a "
"fixture."
msgstr ""

# 16f108ec5bab42a9b730035e9a2be600
#: ../../topics/auth/customizing.txt:860
msgid ""
"To ensure that your test suite will pass in any project configuration, "
"``django.contrib.auth.tests.utils`` defines a ``@skipIfCustomUser`` "
"decorator. This decorator will cause a test case to be skipped if any User "
"model other than the default Django user is in use. This decorator can be "
"applied to a single test, or to an entire test class."
msgstr ""

# 322d594327a74b3cbfdf74536d22d01a
#: ../../topics/auth/customizing.txt:866
msgid ""
"Depending on your application, tests may also be needed to be added to "
"ensure that the application works with *any* user model, not just the "
"default User model. To assist with this, Django provides two substitute user "
"models that can be used in test suites:"
msgstr ""

# 62a16bd15bea4bcd91c3e9f1886aa138
#: ../../topics/auth/customizing.txt:871
msgid ""
"``django.contrib.auth.tests.custom_user.CustomUser``, a custom user model "
"that uses an ``email`` field as the username, and has a basic admin-"
"compliant permissions setup"
msgstr ""

# d9664dd8b19d440e85b88f9a8a1df176
#: ../../topics/auth/customizing.txt:875
msgid ""
"``django.contrib.auth.tests.custom_user.ExtensionUser``, a custom user model "
"that extends ``django.contrib.auth.models.AbstractUser``, adding a "
"``date_of_birth`` field."
msgstr ""

# acb8e406b43549aa931340f9d3a40ca3
#: ../../topics/auth/customizing.txt:879
msgid ""
"You can then use the ``@override_settings`` decorator to make that test run "
"with the custom User model. For example, here is a skeleton for a test that "
"would test three possible User models -- the default, plus the two User "
"models provided by ``auth`` app::"
msgstr ""

# ef0f5e7b18df437a862d833064524e6f
# 1f5887d1b2454b2099fc959d8ea4aeff
#: ../../topics/auth/customizing.txt:907 ../../topics/forms/modelforms.txt:143
msgid "A full example"
msgstr ""

# c35abb7c3e7545a6a84f5f8590ce9d97
#: ../../topics/auth/customizing.txt:909
msgid ""
"Here is an example of an admin-compliant custom user app. This user model "
"uses an email address as the username, and has a required date of birth; it "
"provides no permission checking, beyond a simple ``admin`` flag on the user "
"account. This model would be compatible with all the built-in auth forms and "
"views, except for the User creation forms. This example illustrates how most "
"of the components work together, but is not intended to be copied directly "
"into projects for production use."
msgstr ""

# 13d968e9e7bb43f7a30d7f524f4ca463
#: ../../topics/auth/customizing.txt:917
msgid ""
"This code would all live in a ``models.py`` file for a custom authentication "
"app::"
msgstr ""

# 42bb5900da654187ba20dc18a0aa0827
#: ../../topics/auth/customizing.txt:1001
msgid ""
"Then, to register this custom User model with Django's admin, the following "
"code would be required in the app's ``admin.py`` file::"
msgstr ""

# ca7b2e4aca3b4f769480db22bb8002bc
#: ../../topics/auth/default.txt:3
msgid "Using the Django authentication system"
msgstr ""

# ec6b173acf684bd99c3ad91584a802c5
#: ../../topics/auth/default.txt:7
msgid ""
"This document explains the usage of Django's authentication system in its "
"default configuration. This configuration has evolved to serve the most "
"common project needs, handling a reasonably wide range of tasks, and has a "
"careful implementation of passwords and permissions, and can handle many "
"projects as is.  For projects where authentication needs differ from the "
"default, Django supports extensive :doc:`extension and customization </"
"topics/auth/customizing>` of authentication."
msgstr ""

# 89411895014a44938fe782d3a4e0ccde
#: ../../topics/auth/default.txt:15
msgid ""
"Django authentication provides both authentication and authorization, "
"together and is generally referred to as the authentication system, as these "
"features somewhat coupled."
msgstr ""

# 73fb7137b891400e8bd5386fdc48e80b
#: ../../topics/auth/default.txt:22
msgid "User objects"
msgstr ""

# 4c23ee7bd60d4cc38eb661eb3091335d
#: ../../topics/auth/default.txt:24
msgid ""
":class:`~django.contrib.auth.models.User` objects are the core of the "
"authentication system. They typically represent the people interacting with "
"your site and are used to enable things like restricting access, registering "
"user profiles, associating content with creators etc. Only one class of user "
"exists in Django's authentication framework, i.e., 'superusers' or admin "
"'staff' users are just user objects with special attributes set, not "
"different classes of user objects."
msgstr ""

# beb73e7b08524c8cb3b3805bd556b253
#: ../../topics/auth/default.txt:32
msgid "The primary attributes of the default user are:"
msgstr ""

# 5ecf59018f9d4643b23a1584e9756248
#: ../../topics/auth/default.txt:34
msgid "username"
msgstr ""

# c5f383a1d3fa4014bb3bd38d178c8802
#: ../../topics/auth/default.txt:35
msgid "password"
msgstr ""

# e2518c16ce6041b5a311617b36a54573
#: ../../topics/auth/default.txt:36
msgid "email"
msgstr ""

# 96bcf9cd06f8436e94973e422c8c5cf8
#: ../../topics/auth/default.txt:37
msgid "first name"
msgstr ""

# 52f3827f2a1c4e649bdf2b4cf9433afe
#: ../../topics/auth/default.txt:38
msgid "last name"
msgstr ""

# ba3ebac204de4fa783baae89fbb65f10
#: ../../topics/auth/default.txt:40
msgid ""
"See the :class:`full API documentation <django.contrib.auth.models.User>` "
"for full reference, the documentation that follows is more task oriented."
msgstr ""

# 5216c8842c2c4b729a6a80e476d7d654
#: ../../topics/auth/default.txt:46
msgid "Creating users"
msgstr ""

# 8b8cf29347c9406f85c0c7696ff1c8e4
#: ../../topics/auth/default.txt:48
msgid ""
"The most direct way to create users is to use the included :meth:`~django."
"contrib.auth.models.UserManager.create_user` helper function::"
msgstr ""

# d164641dafae493ab59a5d3aa26f6fff
#: ../../topics/auth/default.txt:60
msgid ""
"If you have the Django admin installed, you can also :ref:`create users "
"interactively <auth-admin>`."
msgstr ""

# ff2b679c148b4e51bd967ca03e49afc2
#: ../../topics/auth/default.txt:66
msgid "Creating superusers"
msgstr ""

# fb1d64435eeb4b22a414c5dd94e8cb07
#: ../../topics/auth/default.txt:68
msgid ""
":djadmin:`manage.py syncdb <syncdb>` prompts you to create a superuser the "
"first time you run it with ``'django.contrib.auth'`` in your :setting:"
"`INSTALLED_APPS`. If you need to create a superuser at a later date, you can "
"use a command line utility::"
msgstr ""

# 865458d36f7644e58cd5a2abca4dbf6c
#: ../../topics/auth/default.txt:75
msgid ""
"You will be prompted for a password. After you enter one, the user will be "
"created immediately. If you leave off the :djadminopt:`--username` or the :"
"djadminopt:`--email` options, it will prompt you for those values."
msgstr ""

# 900e10b16ad4420a88951419548788b1
#: ../../topics/auth/default.txt:80
msgid "Changing passwords"
msgstr ""

# 789299003bc4421f9eb0e4219dce3851
#: ../../topics/auth/default.txt:82
msgid ""
"Django does not store raw (clear text) passwords on the user model, but only "
"a hash (see :doc:`documentation of how passwords are managed </topics/auth/"
"passwords>` for full details). Because of this, do not attempt to manipulate "
"the password attribute of the user directly. This is why a helper function "
"is used when creating a user."
msgstr ""

# f4fec10148334049838e17010aac1499
#: ../../topics/auth/default.txt:88
msgid "To change a user's password, you have several options:"
msgstr ""

# d1f4952f6e504407a74de288f5acb162
#: ../../topics/auth/default.txt:90
msgid ""
":djadmin:`manage.py changepassword *username* <changepassword>` offers a "
"method of changing a User's password from the command line. It prompts you "
"to change the password of a given user which you must enter twice. If they "
"both match, the new password will be changed immediately. If you do not "
"supply a user, the command will attempt to change the password whose "
"username matches the current system user."
msgstr ""

# abb8988b5c9a4ea788b392a2a9fe1e1b
#: ../../topics/auth/default.txt:97
msgid ""
"You can also change a password programmatically, using :meth:`~django."
"contrib.auth.models.User.set_password()`:"
msgstr ""

# bfde4061792c4c868c93afc12c164048
#: ../../topics/auth/default.txt:107
msgid ""
"If you have the Django admin installed, you can also change user's passwords "
"on the :ref:`authentication system's admin pages <auth-admin>`."
msgstr ""

# fa0c48f1981c451faf7fa2780ab5bed9
#: ../../topics/auth/default.txt:110
msgid ""
"Django also provides :ref:`views <built-in-auth-views>` and :ref:`forms "
"<built-in-auth-forms>` that may be used to allow users to change their own "
"passwords."
msgstr ""

# 01dfa8847e914803aef638db33d39b57
#: ../../topics/auth/default.txt:115
msgid "Authenticating Users"
msgstr ""

# f92357135efb45798a614bb1539db0d7
#: ../../topics/auth/default.txt:119
msgid ""
"To authenticate a given username and password, use :func:`~django.contrib."
"auth.authenticate()`. It takes credentials in the form of keyword arguments, "
"for the default configuration this is ``username`` and ``password``, and it "
"returns a :class:`~django.contrib.auth.models.User` object if the password "
"is valid for the given username. If the password is invalid, :func:`~django."
"contrib.auth.authenticate()` returns ``None``. Example::"
msgstr ""

# 2392deac81e944b2aefcb86d2629732f
#: ../../topics/auth/default.txt:142
msgid "Permissions and Authorization"
msgstr ""

# 11ae84df1c524fee8bd0f36c91331339
#: ../../topics/auth/default.txt:144
msgid ""
"Django comes with a simple permissions system. It provides a way to assign "
"permissions to specific users and groups of users."
msgstr ""

# f46c81a77916460fb75ae63282112960
#: ../../topics/auth/default.txt:147
msgid ""
"It's used by the Django admin site, but you're welcome to use it in your own "
"code."
msgstr ""

# 80561774fb1f4b039371e602e631d4c5
#: ../../topics/auth/default.txt:150
msgid "The Django admin site uses permissions as follows:"
msgstr ""

# d496c8eeaa284500b749e349d1abd5a6
#: ../../topics/auth/default.txt:152
msgid ""
"Access to view the \"add\" form and add an object is limited to users with "
"the \"add\" permission for that type of object."
msgstr ""

# 687add3708ef4f84a02387cb9639af01
#: ../../topics/auth/default.txt:154
msgid ""
"Access to view the change list, view the \"change\" form and change an "
"object is limited to users with the \"change\" permission for that type of "
"object."
msgstr ""

# c2bd8b42700c4f6c994990356114f634
#: ../../topics/auth/default.txt:157
msgid ""
"Access to delete an object is limited to users with the \"delete\" "
"permission for that type of object."
msgstr ""

# b2873674a5934d65bceb51ce9a35204d
#: ../../topics/auth/default.txt:160
msgid ""
"Permissions can be set not only per type of object, but also per specific "
"object instance. By using the :meth:`~django.contrib.admin.ModelAdmin."
"has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_change_permission` and :meth:`~django.contrib.admin.ModelAdmin."
"has_delete_permission` methods provided by the :class:`~django.contrib.admin."
"ModelAdmin` class, it is possible to customize permissions for different "
"object instances of the same type."
msgstr ""

# ccc710fc8c094953854a98da8c25e1e6
#: ../../topics/auth/default.txt:168
msgid ""
":class:`~django.contrib.auth.models.User` objects have two many-to-many "
"fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth."
"models.User` objects can access their related objects in the same way as any "
"other :doc:`Django model </topics/db/models>`:"
msgstr ""

# 10b7b98ff3f647c7a2f7f0ae2ffdeada
#: ../../topics/auth/default.txt:186
msgid "Default permissions"
msgstr ""

# aa1f74c7c9cc40ae9ba8a439649208c9
#: ../../topics/auth/default.txt:188
msgid ""
"When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` "
"setting, it will ensure that three default permissions -- add, change and "
"delete -- are created for each Django model defined in one of your installed "
"applications."
msgstr ""

# 0f2499323fa14fa48ac523bfa76f3769
#: ../../topics/auth/default.txt:193
msgid ""
"These permissions will be created when you run :djadmin:`manage.py syncdb "
"<syncdb>`; the first time you run ``syncdb`` after adding ``django.contrib."
"auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created "
"for all previously-installed models, as well as for any new models being "
"installed at that time. Afterward, it will create default permissions for "
"new models each time you run :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

# 0c1ec8a2f1e143ae81e34bc73e58a613
#: ../../topics/auth/default.txt:201
msgid ""
"Assuming you have an application with an :attr:`~django.db.models.Options."
"app_label` ``foo`` and a model named ``Bar``, to test for basic permissions "
"you should use:"
msgstr ""

# c429a15570414706883039a2c0cd3490
#: ../../topics/auth/default.txt:205
msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr ""

# 6cc972e564324f7a8880e9465d0ddf5e
#: ../../topics/auth/default.txt:206
msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr ""

# ee7b3e7b61bc4768b1f91ae71030d4cc
#: ../../topics/auth/default.txt:207
msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr ""

# 710cd204332344f8bf317ab455e65c1b
#: ../../topics/auth/default.txt:209
msgid ""
"The :class:`~django.contrib.auth.models.Permission` model is rarely accessed "
"directly."
msgstr ""

# 6a6acec5c5aa4c2c88ae27f76b12d5b9
#: ../../topics/auth/default.txt:213
msgid "Groups"
msgstr ""

# ae46ef973ca04cbaabcd90b87e36ac4d
#: ../../topics/auth/default.txt:215
msgid ""
":class:`django.contrib.auth.models.Group` models are a generic way of "
"categorizing users so you can apply permissions, or some other label, to "
"those users. A user can belong to any number of groups."
msgstr ""

# 85fe50f0fccf4c12ba417fb5e2a9cbe0
#: ../../topics/auth/default.txt:219
msgid ""
"A user in a group automatically has the permissions granted to that group. "
"For example, if the group ``Site editors`` has the permission "
"``can_edit_home_page``, any user in that group will have that permission."
msgstr ""

# d5bab1f371c5475482b093966f04ec9a
#: ../../topics/auth/default.txt:223
msgid ""
"Beyond permissions, groups are a convenient way to categorize users to give "
"them some label, or extended functionality. For example, you could create a "
"group ``'Special users'``, and you could write code that could, say, give "
"them access to a members-only portion of your site, or send them members-"
"only email messages."
msgstr ""

# 02e799a3fd1446b1a7af80064adbc585
#: ../../topics/auth/default.txt:230
msgid "Programmatically creating permissions"
msgstr ""

# 48f3b4453f1e406dab693157d4b70a51
#: ../../topics/auth/default.txt:232
msgid ""
"While :ref:`custom permissions <custom-permissions>` can be defined within a "
"model's ``Meta`` class, you can also create permissions directly. For "
"example, you can create the ``can_publish`` permission for a ``BlogPost`` "
"model in ``myapp``::"
msgstr ""

# d766f29711c94dd5bc7c82f96e8b001f
#: ../../topics/auth/default.txt:245
msgid ""
"The permission can then be assigned to a :class:`~django.contrib.auth.models."
"User` via its ``user_permissions`` attribute or to a :class:`~django.contrib."
"auth.models.Group` via its ``permissions`` attribute."
msgstr ""

# 40679209f4024f47be23fba9a7c2082b
#: ../../topics/auth/default.txt:253
msgid "Authentication in Web requests"
msgstr ""

# 3d3b698e118f44ccb32bd8c9a4eceb6d
#: ../../topics/auth/default.txt:255
msgid ""
"Django uses :doc:`sessions </topics/http/sessions>` and middleware to hook "
"the authentication system into :class:`request objects <django.http."
"HttpRequest>`."
msgstr ""

# 84a52eaf6fc14676b06dbc09ccefb6b7
#: ../../topics/auth/default.txt:258
msgid ""
"These provide a :attr:`request.user <django.http.HttpRequest.user>`  "
"attribute on every request which represents the current user. If the current "
"user has not logged in, this attribute will be set to an instance of :class:"
"`~django.contrib.auth.models.AnonymousUser`, otherwise it will be an "
"instance of :class:`~django.contrib.auth.models.User`."
msgstr ""

# 7367641f796b47c18aa9004925db8de5
#: ../../topics/auth/default.txt:264
msgid ""
"You can tell them apart with :meth:`~django.contrib.auth.models.User."
"is_authenticated()`, like so::"
msgstr ""

# 4b580deae09a4245a904d55989fea204
#: ../../topics/auth/default.txt:275
msgid "How to log a user in"
msgstr ""

# 734d302d4cbc4f5cab409e1b524e873b
#: ../../topics/auth/default.txt:277
msgid ""
"If you have an authenticated user you want to attach to the current session "
"- this is done with a :func:`~django.contrib.auth.login` function."
msgstr ""

# 5dc4b527bce149fbabb41ffec089c4cd
#: ../../topics/auth/default.txt:282
msgid ""
"To log a user in, from a view, use :func:`~django.contrib.auth.login()`. It "
"takes an :class:`~django.http.HttpRequest` object and a :class:`~django."
"contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves "
"the user's ID in the session, using Django's session framework."
msgstr ""

# 4cc8cc7f99624dd9a69dbf75537590e7
#: ../../topics/auth/default.txt:288
msgid ""
"Note that any data set during the anonymous session is retained in the "
"session after a user logs in."
msgstr ""

# 168bdc9d1fc44fc8ba3ad2ce6fafb612
#: ../../topics/auth/default.txt:291
msgid ""
"This example shows how you might use both :func:`~django.contrib.auth."
"authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""

# 16fae940efa742ed9c28c8243191fd22
#: ../../topics/auth/default.txt:311
msgid "Calling ``authenticate()`` first"
msgstr ""

# 293570d80b4349f3a06b8b89f2a01d15
#: ../../topics/auth/default.txt:313
msgid ""
"When you're manually logging a user in, you *must* call :func:`~django."
"contrib.auth.authenticate()` before you call :func:`~django.contrib.auth."
"login()`. :func:`~django.contrib.auth.authenticate()` sets an attribute on "
"the :class:`~django.contrib.auth.models.User` noting which authentication "
"backend successfully authenticated that user (see the :ref:`backends "
"documentation <authentication-backends>` for details), and this information "
"is needed later during the login process. An error will be raised if you try "
"to login a user object retrieved from the database directly."
msgstr ""

# 884b89c7e0f54b4ebd119f5c829cafa8
#: ../../topics/auth/default.txt:324
msgid "How to log a user out"
msgstr ""

# 9d88dfe15463418a95102ad582b95893
#: ../../topics/auth/default.txt:328
msgid ""
"To log out a user who has been logged in via :func:`django.contrib.auth."
"login()`, use :func:`django.contrib.auth.logout()` within your view. It "
"takes an :class:`~django.http.HttpRequest` object and has no return value. "
"Example::"
msgstr ""

# c88c7c8405164ad9850223a517334af6
#: ../../topics/auth/default.txt:340
msgid ""
"Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if "
"the user wasn't logged in."
msgstr ""

# cc41435db12b405d98f88614f9a77dc1
#: ../../topics/auth/default.txt:343
msgid ""
"When you call :func:`~django.contrib.auth.logout()`, the session data for "
"the current request is completely cleaned out. All existing data is removed. "
"This is to prevent another person from using the same Web browser to log in "
"and have access to the previous user's session data. If you want to put "
"anything into the session that will be available to the user immediately "
"after logging out, do that *after* calling :func:`django.contrib.auth."
"logout()`."
msgstr ""

# 17f643082f8d4f999215c02654b09495
#: ../../topics/auth/default.txt:352
msgid "Limiting access to logged-in users"
msgstr ""

# 230de78b90a741b985ad0cbd3e5adca7
#: ../../topics/auth/default.txt:355
msgid "The raw way"
msgstr ""

# 3c42f559fe644982b16230be640c58f7
#: ../../topics/auth/default.txt:357
msgid ""
"The simple, raw way to limit access to pages is to check :meth:`request.user."
"is_authenticated() <django.contrib.auth.models.User.is_authenticated()>` and "
"either redirect to a login page::"
msgstr ""

# c764cc75e0c64caaaf22538f4409a887
#: ../../topics/auth/default.txt:369
msgid "...or display an error message::"
msgstr ""

# adfaf0f99f3446c2b18ba76ec1ed1d5f
#: ../../topics/auth/default.txt:381
msgid "The login_required decorator"
msgstr ""

# 18221e0864a44f6bacaf6268257629ad
#: ../../topics/auth/default.txt:385
msgid ""
"As a shortcut, you can use the convenient :func:`~django.contrib.auth."
"decorators.login_required` decorator::"
msgstr ""

# a24f0dbaf8e7410da245261232bc7af1
#: ../../topics/auth/default.txt:394
msgid ""
":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""

# bdbe9578708e401a8b40b15dacce839d
#: ../../topics/auth/default.txt:396
msgid ""
"If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, passing the current absolute path in the query string. "
"Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""

# 1e805e12c88740448dad8771186631b9
#: ../../topics/auth/default.txt:400
msgid ""
"If the user is logged in, execute the view normally. The view code is free "
"to assume the user is logged in."
msgstr ""

# 2566e99f2bc94ff8b4a916518c976359
#: ../../topics/auth/default.txt:403
msgid ""
"By default, the path that the user should be redirected to upon successful "
"authentication is stored in a query string parameter called ``\"next\"``. If "
"you would prefer to use a different name for this parameter, :func:`~django."
"contrib.auth.decorators.login_required` takes an optional "
"``redirect_field_name`` parameter::"
msgstr ""

# dd77dfa4b43b404fafdf9194990c45c6
#: ../../topics/auth/default.txt:415
msgid ""
"Note that if you provide a value to ``redirect_field_name``, you will most "
"likely need to customize your login template as well, since the template "
"context variable which stores the redirect path will use the value of "
"``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""

# 1ca86e92bcbb49f6b370a4c1b9c42990
#: ../../topics/auth/default.txt:420
msgid ""
":func:`~django.contrib.auth.decorators.login_required` also takes an "
"optional ``login_url`` parameter. Example::"
msgstr ""

# 52d55db24e1e4e0f9893c909942fe3c6
#: ../../topics/auth/default.txt:429
msgid ""
"Note that if you don't specify the ``login_url`` parameter, you'll need to "
"ensure that the :setting:`settings.LOGIN_URL <LOGIN_URL>` and your login "
"view are properly associated. For example, using the defaults, add the "
"following line to your URLconf::"
msgstr ""

# e2fc3b1aeda343b4a2b668ccd93b755e
#: ../../topics/auth/default.txt:438
msgid ""
"The :setting:`settings.LOGIN_URL <LOGIN_URL>` also accepts view function "
"names and :ref:`named URL patterns <naming-url-patterns>`. This allows you "
"to freely remap your login view within your URLconf without having to update "
"the setting."
msgstr ""

# 82838a7421c24b7885a962f2328baba7
#: ../../topics/auth/default.txt:445
msgid ""
"The login_required decorator does NOT check the is_active flag on a user."
msgstr ""

# 33bb69e5fb9e4ca79c3295d0a3ccc827
#: ../../topics/auth/default.txt:448
msgid "Limiting access to logged-in users that pass a test"
msgstr ""

# 36d11eb961db40438afa0be2b35f641c
#: ../../topics/auth/default.txt:450
msgid ""
"To limit access based on certain permissions or some other test, you'd do "
"essentially the same thing as described in the previous section."
msgstr ""

# 485a98d407bb4e3abbb93f66b305b1a1
#: ../../topics/auth/default.txt:453
msgid ""
"The simple way is to run your test on :attr:`request.user <django.http."
"HttpRequest.user>` in the view directly. For example, this view checks to "
"make sure the user has an email in the desired domain::"
msgstr ""

# 44ff010db9244167a9672cde05471154
#: ../../topics/auth/default.txt:464
msgid ""
"As a shortcut, you can use the convenient ``user_passes_test`` decorator::"
msgstr ""

# 6223f2434de74dae88cc6da34b4f0476
#: ../../topics/auth/default.txt:475
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes a required "
"argument: a callable that takes a :class:`~django.contrib.auth.models.User` "
"object and returns ``True`` if the user is allowed to view the page. Note "
"that :func:`~django.contrib.auth.decorators.user_passes_test` does not "
"automatically check that the :class:`~django.contrib.auth.models.User` is "
"not anonymous."
msgstr ""

# 1a44ca186eab414c96d65efa66ea1560
#: ../../topics/auth/default.txt:483
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test()` takes an optional "
"``login_url`` argument, which lets you specify the URL for your login page (:"
"setting:`settings.LOGIN_URL <LOGIN_URL>` by default)."
msgstr ""

# cada1c8e87564b27ab70bf48ecf110c8
# d48ad1d56e2c49a7868417f46279ac4a
# bd5b3031ebbf48b5a3ab0a027ff47bf4
# f3af247b2c6c45dc938bf25c2d1d1c18
# 78faa123fc83446b87f7f9873011b001
# da88e39b16d74af78dafb3f1c4cb5471
# 27c2e21196ae4cdbb60ab74b4d366e65
# 6563c93749e345fba76b9c9aab29a926
# be55cf4c8df64447bdc6641e154dd9b6
# d175cdddaa174e7c9ce837fc324a124e
# c821b7ae082642399a89ced476ba922e
# fdf91e73702f46be884b70b998030a9f
# 697deefc914b496ab52ab630d97fa177
# e1a32af1e53a4beebdadc46f98f9ddd6
# 29cd48350dfc4504a57eb26d25d86bc5
# 48262e2227ff4db48a4d1c03f2c444c2
# 97e4efab9cb04df49a009ff9606bb71b
# ccef0946779c4924be981c3bd56311b8
# 8ef31e0dc64a4e38b85f07b93c31449e
# e7a83f239d744c62a8addba684edbeb8
#: ../../topics/auth/default.txt:487 ../../topics/db/managers.txt:147
#: ../../topics/db/queries.txt:1237 ../../topics/email.txt:266
#: ../../topics/email.txt:309 ../../topics/forms/modelforms.txt:23
#: ../../topics/http/urls.txt:403 ../../topics/http/urls.txt:809
#: ../../topics/i18n/formatting.txt:119 ../../topics/i18n/formatting.txt:137
#: ../../topics/i18n/timezones.txt:339 ../../topics/i18n/timezones.txt:352
#: ../../topics/i18n/timezones.txt:368 ../../topics/i18n/translation.txt:190
#: ../../topics/i18n/translation.txt:276
#: ../../topics/i18n/translation.txt:1458 ../../topics/settings.txt:252
#: ../../topics/templates.txt:152 ../../topics/testing/overview.txt:1306
#: ../../topics/testing/overview.txt:1342
msgid "For example::"
msgstr ""

# 58910fe9e9b8479a85542e165c7f5b9b
#: ../../topics/auth/default.txt:494
msgid "The permission_required decorator"
msgstr ""

# 36d1055283db43ca8d661ff2bea96407
#: ../../topics/auth/default.txt:498
msgid ""
"It's a relatively common task to check whether a user has a particular "
"permission. For that reason, Django provides a shortcut for that case: the :"
"func:`~django.contrib.auth.decorators.permission_required()` decorator.::"
msgstr ""

# e94171d8fcc34d2eb4e1a44bfbb62ac1
#: ../../topics/auth/default.txt:508
msgid ""
"As for the :meth:`~django.contrib.auth.models.User.has_perm` method, "
"permission names take the form ``\"<app label>.<permission codename>\"`` (i."
"e. ``polls.can_vote`` for a permission on a model in the ``polls`` "
"application)."
msgstr ""

# ab251cfb19b04569bd45b47645eba025
#: ../../topics/auth/default.txt:513
msgid ""
"Note that :func:`~django.contrib.auth.decorators.permission_required()` also "
"takes an optional ``login_url`` parameter. Example::"
msgstr ""

# e0d6e2cecbbd4d998dd52c2e19ae5e9e
#: ../../topics/auth/default.txt:522
msgid ""
"As in the :func:`~django.contrib.auth.decorators.login_required` decorator, "
"``login_url`` defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

# 69a575aea5774075b72e4f244c19f85f
#: ../../topics/auth/default.txt:527
msgid ""
"Added ``raise_exception`` parameter. If given, the decorator will raise :exc:"
"`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP "
"Forbidden) view<http_forbidden_view>` instead of redirecting to the login "
"page."
msgstr ""

# 9d50de9bdc2742d49ad2d4188457c829
#: ../../topics/auth/default.txt:533
msgid "Applying permissions to generic views"
msgstr ""

# 981fbe8104064c7488e6d87048331397
#: ../../topics/auth/default.txt:535
msgid ""
"To apply a permission to a :doc:`class-based generic view </ref/class-based-"
"views/index>`, decorate the :meth:`View.dispatch <django.views.generic.base."
"View.dispatch>` method on the class. See :ref:`decorating-class-based-views` "
"for details."
msgstr ""

# 76be48895ff24452a8218e1d71e1e228
#: ../../topics/auth/default.txt:544
msgid "Authentication Views"
msgstr ""

# 166bbb55c39f49828deab16fca1d8389
#: ../../topics/auth/default.txt:548
msgid ""
"Django provides several views that you can use for handling login, logout, "
"and password management. These make use of the :ref:`stock auth forms <built-"
"in-auth-forms>` but you can pass in your own forms as well."
msgstr ""

# 76ff50e4833e4f78be1f4773fbba10ed
#: ../../topics/auth/default.txt:552
msgid ""
"Django provides no default template for the authentication views - however "
"the template context is documented for each view below."
msgstr ""

# 2b839b48526041a48438761027a4fac5
#: ../../topics/auth/default.txt:557
msgid ""
"The built-in views all return a :class:`~django.template.response."
"TemplateResponse` instance, which allows you to easily customize the "
"response data before rendering.  For more details, see the :doc:"
"`TemplateResponse documentation </ref/template-response>`."
msgstr ""

# 7493f307eec24b308e7a640f96c30697
#: ../../topics/auth/default.txt:562
msgid ""
"Most built-in authentication views provide a URL name for easier reference. "
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""

# 2abe61d70b23460da1a751ba0ec2bdbe
#: ../../topics/auth/default.txt:569
msgid "**URL name:** ``login``"
msgstr ""

# 419a4283c68e4999bb72b22da3736dc6
#: ../../topics/auth/default.txt:571
msgid ""
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""

# a6109747deae445c95c9fb376b9cc3e2
# 618d3929291a4023ba5cff9fe6a8fa02
# 4eb9fe93a9ee47358c576313f7dfd24d
# e4de17d59a794498b1f104d2ada353ec
# af956a759a6e4fa79510a2cc3d106a7f
# 7445fa86231f474f9ee48edb6a9170e2
# 2fa8d932978e413f94b9ebaee80106bc
# 2cecd05e1d5d423abce8cbfef3bb8b3f
# 725b02a5e1bc46638f1962d076b6cba1
# 074d3769e77a42a3b8211d178d9462a5
#: ../../topics/auth/default.txt:575 ../../topics/auth/default.txt:690
#: ../../topics/auth/default.txt:738 ../../topics/auth/default.txt:756
#: ../../topics/auth/default.txt:787 ../../topics/auth/default.txt:814
#: ../../topics/auth/default.txt:898 ../../topics/auth/default.txt:917
#: ../../topics/auth/default.txt:959 ../../topics/auth/default.txt:985
msgid "**Optional arguments:**"
msgstr ""

# 0b839611d132457780769be068dd4e30
#: ../../topics/auth/default.txt:577
msgid ""
"``template_name``: The name of a template to display for the view used to "
"log the user in. Defaults to :file:`registration/login.html`."
msgstr ""

# 2b34ee2323734dad8c7b9b192cafb711
#: ../../topics/auth/default.txt:580
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after login. Overrides ``next`` if the given ``GET`` parameter "
"is passed."
msgstr ""

# b26343a2dd1642ac85519059626699dc
#: ../../topics/auth/default.txt:584
msgid ""
"``authentication_form``: A callable (typically just a form class) to use for "
"authentication. Defaults to :class:`~django.contrib.auth.forms."
"AuthenticationForm`."
msgstr ""

# dbc2c7ded5fd463193ef8be94682aee4
# dbdb42b2fb9f4da88424b38cf8662bd0
# c725183d78ea42208548d5aa65fdf74b
# ade6ebe6159442df8b81a5bc322a6cf9
# 71d9abea63d24f668d77e566c7ef82df
# 0549ab6b2bfa46e1ac41a1a8019ea0bd
# 4301001a11ce45c8a4bb2b36d71bcd4c
# 3687e4099b174052ab170b17d466f858
# c70c07a498b344c2b48a8428b86cc076
# b5c8b571cc5f41b082cf95247dd7ba55
#: ../../topics/auth/default.txt:588 ../../topics/auth/default.txt:702
#: ../../topics/auth/default.txt:725 ../../topics/auth/default.txt:743
#: ../../topics/auth/default.txt:770 ../../topics/auth/default.txt:793
#: ../../topics/auth/default.txt:844 ../../topics/auth/default.txt:904
#: ../../topics/auth/default.txt:937 ../../topics/auth/default.txt:964
msgid ""
"``current_app``: A hint indicating which application contains the current "
"view. See the :ref:`namespaced URL resolution strategy <topics-http-"
"reversing-url-namespaces>` for more information."
msgstr ""

# 58d68c8d17e74bcab9d0f66f3de54a90
# f73a501083394d96af6d65723a3901a5
# b272f6df13b34fb5970a49727566a8f4
# 428996d3f3e54c6aa5f063c62f57f35c
# c57fc9cf4bc9469eb199a60be2fa1dd4
# e6aaea64c59340c79dd2dc249026bad2
# 6bb70e2c853048e0a18a14cbef570bca
# b0655d40c56440db89f810d3da377fd1
# 2ac198023ff548e89ede5f41084dc0a5
# 39a40128114c410ea83397077e7d9676
#: ../../topics/auth/default.txt:592 ../../topics/auth/default.txt:706
#: ../../topics/auth/default.txt:729 ../../topics/auth/default.txt:747
#: ../../topics/auth/default.txt:774 ../../topics/auth/default.txt:797
#: ../../topics/auth/default.txt:848 ../../topics/auth/default.txt:908
#: ../../topics/auth/default.txt:941 ../../topics/auth/default.txt:968
msgid ""
"``extra_context``: A dictionary of context data that will be added to the "
"default context data passed to the template."
msgstr ""

# 8b1adb933876412fa78e49acf26d5d6f
#: ../../topics/auth/default.txt:595
msgid "Here's what ``django.contrib.auth.views.login`` does:"
msgstr ""

# 23e76063d9a14edf9db226d0abfafb12
#: ../../topics/auth/default.txt:576
msgid ""
"If called via ``GET``, it displays a login form that POSTs to the same URL. "
"More on this in a bit."
msgstr ""

# f776e7bacadb476c9267a525b9dbe209
#: ../../topics/auth/default.txt:579
msgid ""
"If called via ``POST`` with user submitted credentials, it tries to log the "
"user in. If login is successful, the view redirects to the URL specified in "
"``next``. If ``next`` isn't provided, it redirects to :setting:`settings."
"LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/"
"profile/``). If login isn't successful, it redisplays the login form."
msgstr ""

# 79438f84c7534b0490cecfb0eccad8a2
#: ../../topics/auth/default.txt:586
msgid ""
"It's your responsibility to provide the html for the login template , called "
"``registration/login.html`` by default. This template gets passed four "
"template context variables:"
msgstr ""

# 55757e8b03da425a83ca803e79f1acdf
#: ../../topics/auth/default.txt:590
msgid ""
"``form``: A :class:`~django.forms.Form` object representing the :class:"
"`~django.contrib.auth.forms.AuthenticationForm`."
msgstr ""

# 4e6f4a7e229f4e249f2189a1c1e17d5e
#: ../../topics/auth/default.txt:593
msgid ""
"``next``: The URL to redirect to after successful login. This may contain a "
"query string, too."
msgstr ""

# b24914439788435aa700cfcbe1e139af
# 3230544b5a0547abb01110fa353024bf
#: ../../topics/auth/default.txt:596 ../../topics/auth/default.txt:685
msgid ""
"``site``: The current :class:`~django.contrib.sites.models.Site`, according "
"to the :setting:`SITE_ID` setting. If you don't have the site framework "
"installed, this will be set to an instance of :class:`~django.contrib.sites."
"models.RequestSite`, which derives the site name and domain from the "
"current :class:`~django.http.HttpRequest`."
msgstr ""

# d96cfb522f1d4f529f3ee16ad587aa55
# a8ddf205aac948b380d6f593306493be
# 84ffbfcaa4b645ebac5a895553c226ae
#: ../../topics/auth/default.txt:603 ../../topics/auth/default.txt:692
#: ../../topics/auth/default.txt:801
msgid ""
"``site_name``: An alias for ``site.name``. If you don't have the site "
"framework installed, this will be set to the value of :attr:`request."
"META['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :"
"doc:`/ref/contrib/sites`."
msgstr ""

# 4f5eb3efcd3a4b1ab2ede98727403b45
#: ../../topics/auth/default.txt:608
msgid ""
"If you'd prefer not to call the template :file:`registration/login.html`, "
"you can pass the ``template_name`` parameter via the extra arguments to the "
"view in your URLconf. For example, this URLconf line would use :file:`myapp/"
"login.html` instead::"
msgstr ""

# 4c8b84cb553f4956804fa7fa5e643cd1
#: ../../topics/auth/default.txt:615
msgid ""
"You can also specify the name of the ``GET`` field which contains the URL to "
"redirect to after login by passing ``redirect_field_name`` to the view. By "
"default, the field is called ``next``."
msgstr ""

# 67baf7890ff64098b4509cfa4dd1acae
#: ../../topics/auth/default.txt:619
msgid ""
"Here's a sample :file:`registration/login.html` template you can use as a "
"starting point. It assumes you have a :file:`base.html` template that "
"defines a ``content`` block:"
msgstr ""

# 488d2bf64f4a491bac80ac1c08f473eb
#: ../../topics/auth/default.txt:652
msgid ""
"If you have customized authentication (see :doc:`Customizing Authentication "
"</topics/auth/customizing>`) you can pass a custom authentication form to "
"the login view via the ``authentication_form`` parameter. This form must "
"accept a ``request`` keyword argument in its ``__init__`` method, and "
"provide a ``get_user`` method which returns the authenticated user object "
"(this method is only ever called after successful form validation)."
msgstr ""

# 0bb037ec3b894d7eb3c52cfe90fdb51d
#: ../../topics/auth/default.txt:665
msgid "Logs a user out."
msgstr ""

# 2ae81d5bbf1d4add81e716424a3d3862
#: ../../topics/auth/default.txt:667
msgid "**URL name:** ``logout``"
msgstr ""

# e6d14b545f50450f961c7949e799fd8c
#: ../../topics/auth/default.txt:692
msgid "``next_page``: The URL to redirect to after logout."
msgstr ""

# 36be25157d974d409bfe7dfd0f2cf7b3
#: ../../topics/auth/default.txt:673
msgid ""
"``template_name``: The full name of a template to display after logging the "
"user out. Defaults to :file:`registration/logged_out.html` if no argument is "
"supplied."
msgstr ""

# e443d9379ae9475e8c4fb3bb092b2a07
#: ../../topics/auth/default.txt:677
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next_page`` if the given ``GET`` "
"parameter is passed."
msgstr ""

# 569ba2a19f0a4235a1f9eb0e2c08e5f8
# 889a1e0c5d3745ee99e1542ffe68b5cb
# 69d9436ac910461c8c25628e2ad608e5
# 16b04f0c17324b32ac51c1efcfea3201
#: ../../topics/auth/default.txt:681 ../../topics/auth/default.txt:728
#: ../../topics/auth/default.txt:788 ../../topics/auth/default.txt:867
msgid "**Template context:**"
msgstr ""

# d2e43d6f16544ce09d9148d4a6843b22
#: ../../topics/auth/default.txt:683
msgid "``title``: The string \"Logged out\", localized."
msgstr ""

# c7bbb8889c4549d29e4df329d8267ff6
#: ../../topics/auth/default.txt:699
msgid "Logs a user out, then redirects to the login page."
msgstr ""

# fc042b81ab4f4d4bb005324b9b805574
#: ../../topics/auth/default.txt:701
msgid "**URL name:** No default URL provided"
msgstr ""

# 40e153bba27140f5af770f166a98c819
# 5b138857a29e4af788da2735d792aa44
#: ../../topics/auth/default.txt:705 ../../topics/auth/default.txt:903
msgid ""
"``login_url``: The URL of the login page to redirect to. Defaults to :"
"setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""

# fa198759bcbb4880bbf18ea923f24126
#: ../../topics/auth/default.txt:710
msgid "Allows a user to change their password."
msgstr ""

# 20d3d17950894c37801a4312e6bb5d45
#: ../../topics/auth/default.txt:712
msgid "**URL name:** ``password_change``"
msgstr ""

# d1ee73bd339743a3a155c31bbe5b7a83
#: ../../topics/auth/default.txt:716
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password change form. Defaults to :file:`registration/password_change_form."
"html` if not supplied."
msgstr ""

# 5aa799554d3349698572994dc633b9f1
#: ../../topics/auth/default.txt:720
msgid ""
"``post_change_redirect``: The URL to redirect to after a successful password "
"change."
msgstr ""

# 2b5c9dea721d4f52bf2b43fe8d304b8b
#: ../../topics/auth/default.txt:723
msgid ""
"``password_change_form``: A custom \"change password\" form which must "
"accept a ``user`` keyword argument. The form is responsible for actually "
"changing the user's password. Defaults to :class:`~django.contrib.auth.forms."
"PasswordChangeForm`."
msgstr ""

# 6c8524cc57514fc9bb2a473640cda1fc
#: ../../topics/auth/default.txt:730
msgid ""
"``form``: The password change form (see ``password_change_form`` above)."
msgstr ""

# 6b36d98055ec4944810cfaa211768521
#: ../../topics/auth/default.txt:734
msgid "The page shown after a user has changed their password."
msgstr ""

# 392073e0d9814912a4807de019c74125
#: ../../topics/auth/default.txt:736
msgid "**URL name:** ``password_change_done``"
msgstr ""

# 916e80c0ce254dcdb118c456b58354b3
#: ../../topics/auth/default.txt:740
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_change_done.html` if not supplied."
msgstr ""

# 4f9b6dc92f404a3cb82b08dd9e070b33
#: ../../topics/auth/default.txt:746
msgid ""
"Allows a user to reset their password by generating a one-time use link that "
"can be used to reset the password, and sending that link to the user's "
"registered email address."
msgstr ""

# c3f8e540e67d492a9dde83c62dfef80e
#: ../../topics/auth/default.txt:756
msgid "**URL name:** ``password_reset``"
msgstr ""

# 4816497d377641f0ae5a515d77f07890
#: ../../topics/auth/default.txt:760
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password reset form. Defaults to :file:`registration/password_reset_form."
"html` if not supplied."
msgstr ""

# 8b70c2833f8c4d0d9127e8b54d935a29
#: ../../topics/auth/default.txt:764
msgid ""
"``email_template_name``: The full name of a template to use for generating "
"the email with the reset password link. Defaults to :file:`registration/"
"password_reset_email.html` if not supplied."
msgstr ""

# e07d265768c14c00a8e98a2073596774
#: ../../topics/auth/default.txt:768
msgid ""
"``subject_template_name``: The full name of a template to use for the "
"subject of the email with the reset password link. Defaults to :file:"
"`registration/password_reset_subject.txt` if not supplied."
msgstr ""

# 04052ac2c4444596b8ce127e4eec48ba
#: ../../topics/auth/default.txt:774
msgid ""
"``password_reset_form``: Form that will be used to get the email of the user "
"to reset the password for. Defaults to :class:`~django.contrib.auth.forms."
"PasswordResetForm`."
msgstr ""

# dcafc49d3c954628805dcf115f2e7598
#: ../../topics/auth/default.txt:778
msgid ""
"``token_generator``: Instance of the class to check the one time link. This "
"will default to ``default_token_generator``, it's an instance of ``django."
"contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

# 930f93b60f07415bb718aa37f080df41
#: ../../topics/auth/default.txt:782
msgid ""
"``post_reset_redirect``: The URL to redirect to after a successful password "
"reset request."
msgstr ""

# f563bd3081804b37bb66afdaca194c67
#: ../../topics/auth/default.txt:785
msgid ""
"``from_email``: A valid email address. By default Django uses the :setting:"
"`DEFAULT_FROM_EMAIL`."
msgstr ""

# f15d4a046873481cae8538d294ce20db
#: ../../topics/auth/default.txt:790
msgid ""
"``form``: The form (see ``password_reset_form`` above) for resetting the "
"user's password."
msgstr ""

# e2dd8f4e3bea4790992f1a36527201a9
#: ../../topics/auth/default.txt:793
msgid "**Email template context:**"
msgstr ""

# f82360e630fa49de89eaa31008b87d48
#: ../../topics/auth/default.txt:795
msgid "``email``: An alias for ``user.email``"
msgstr ""

# 23c671891c014b0daddd18ed310fe98a
#: ../../topics/auth/default.txt:797
msgid ""
"``user``: The current :class:`~django.contrib.auth.models.User`, according "
"to the ``email`` form field. Only active users are able to reset their "
"passwords (``User.is_active is True``)."
msgstr ""

# a383523061db4342a525c6aac38d59c2
#: ../../topics/auth/default.txt:806
msgid ""
"``domain``: An alias for ``site.domain``. If you don't have the site "
"framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""

# 05d57ac313dd49ea88c4b7cfeeebcdad
#: ../../topics/auth/default.txt:810
msgid "``protocol``: http or https"
msgstr ""

# b86f737f9f2d4abe89e0e4a32daed5f1
#: ../../topics/auth/default.txt:812
msgid "``uid``: The user's id encoded in base 36."
msgstr ""

# 50e0c46972ba4d0fb521f861d25f0222
#: ../../topics/auth/default.txt:814
msgid "``token``: Token to check that the reset link is valid."
msgstr ""

# 157adc485b614bcba9bf8e826a94c227
#: ../../topics/auth/default.txt:816
msgid ""
"Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""

# 644ebd5616b84bee8d57d5d6073d13cd
#: ../../topics/auth/default.txt:823
msgid ""
"The same template context is used for subject template. Subject must be "
"single line plain text string."
msgstr ""

# 0effacbf390f43e1b019ac2ea963b03b
#: ../../topics/auth/default.txt:829
msgid ""
"The page shown after a user has been emailed a link to reset their password. "
"This view is called by default if the :func:`password_reset` view doesn't "
"have an explicit ``post_reset_redirect`` URL set."
msgstr ""

# f2dcd4bf664e4cb6bf890b74e34f8fa2
#: ../../topics/auth/default.txt:833
msgid "**URL name:** ``password_reset_done``"
msgstr ""

# 77d9a408eb9b4cf984a2249c6824c850
#: ../../topics/auth/default.txt:837
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_reset_done.html` if not supplied."
msgstr ""

# ca6d9ef98aca4ba3948ace0e4d6746cd
#: ../../topics/auth/default.txt:843
msgid "Presents a form for entering a new password."
msgstr ""

# 7d928b6cedc843098ea60c90d51acbc0
#: ../../topics/auth/default.txt:845
msgid "**URL name:** ``password_reset_confirm``"
msgstr ""

# 5a84b5be98394e0eb977b97e98fce229
#: ../../topics/auth/default.txt:849
msgid "``uidb36``: The user's id encoded in base 36. Defaults to ``None``."
msgstr ""

# fa032bfe63774c579d472b616e25ee9e
#: ../../topics/auth/default.txt:851
msgid ""
"``token``: Token to check that the password is valid. Defaults to ``None``."
msgstr ""

# 1224314f501f4d51a351f1a50618c3cf
#: ../../topics/auth/default.txt:854
msgid ""
"``template_name``: The full name of a template to display the confirm "
"password view. Default value is :file:`registration/password_reset_confirm."
"html`."
msgstr ""

# 25698a24b6744a61871210abf8beef7f
#: ../../topics/auth/default.txt:857
msgid ""
"``token_generator``: Instance of the class to check the password. This will "
"default to ``default_token_generator``, it's an instance of ``django.contrib."
"auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

# dbdce124c20c4b9fbd454f816dd29fba
#: ../../topics/auth/default.txt:861
msgid ""
"``set_password_form``: Form that will be used to set the password. Defaults "
"to :class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

# f8f198968bdf4698a44285b1e0ec90cf
#: ../../topics/auth/default.txt:864
msgid ""
"``post_reset_redirect``: URL to redirect after the password reset done. "
"Defaults to ``None``."
msgstr ""

# 192f1dcf85424adf8db9c6313fe08be7
#: ../../topics/auth/default.txt:869
msgid ""
"``form``: The form (see ``set_password_form`` above) for setting the new "
"user's password."
msgstr ""

# e3f7650bbc3340a2804260efd33014de
#: ../../topics/auth/default.txt:872
msgid ""
"``validlink``: Boolean, True if the link (combination of uidb36 and token) "
"is valid or unused yet."
msgstr ""

# 89a8d93ac0b345c59530372e4500a53d
#: ../../topics/auth/default.txt:877
msgid ""
"Presents a view which informs the user that the password has been "
"successfully changed."
msgstr ""

# de052b2acf7c419db5a3cfdf4d7e05a2
#: ../../topics/auth/default.txt:880
msgid "**URL name:** ``password_reset_complete``"
msgstr ""

# dffaf06cc5e649af99d6b260fa426fde
#: ../../topics/auth/default.txt:884
msgid ""
"``template_name``: The full name of a template to display the view. Defaults "
"to :file:`registration/password_reset_complete.html`."
msgstr ""

# f62418a219b249039ab202ebffeb6023
#: ../../topics/auth/default.txt:888
msgid "Helper functions"
msgstr ""

# ad7391de7a3a454196104a95e6fae528
#: ../../topics/auth/default.txt:894
msgid ""
"Redirects to the login page, and then back to another URL after a successful "
"login."
msgstr ""

# 2e5a5544ec424d188573de807a010b3e
#: ../../topics/auth/default.txt:897
msgid "**Required arguments:**"
msgstr ""

# 6ba9ccfbcfcb4a85ae09a696d26960f2
#: ../../topics/auth/default.txt:899
msgid "``next``: The URL to redirect to after a successful login."
msgstr ""

# 827a341608e84c569f22ddb948cd335b
#: ../../topics/auth/default.txt:906
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next`` if the given ``GET`` parameter "
"is passed."
msgstr ""

# 664fa9f970644ad6b61e383b81a6e22d
#: ../../topics/auth/default.txt:914
msgid "Built-in forms"
msgstr ""

# f15e18bf419147d697ca642062872428
#: ../../topics/auth/default.txt:918
msgid ""
"If you don't want to use the built-in views, but want the convenience of not "
"having to write forms for this functionality, the authentication system "
"provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""

# cb0073f01f38481991fa58806ce65be1
#: ../../topics/auth/default.txt:923
msgid ""
"The built-in authentication forms make certain assumptions about the user "
"model that they are working with. If you're using a :ref:`custom User model "
"<auth-custom-user>`, it may be necessary to define your own forms for the "
"authentication system. For more information, refer to the documentation "
"about :ref:`using the built-in authentication forms with custom user models "
"<custom-users-and-the-built-in-auth-forms>`."
msgstr ""

# cb74edb84d9c4e32b583316f3c13d682
#: ../../topics/auth/default.txt:932
msgid "A form used in the admin interface to change a user's password."
msgstr ""

# e385aafe2b1c495c8d3d0982089961cf
#: ../../topics/auth/default.txt:936
msgid "A form for logging a user in."
msgstr ""

# eaa3dcfaaedd40e2be9b588d7ea03896
#: ../../topics/auth/default.txt:940
msgid "A form for allowing a user to change their password."
msgstr ""

# 9e14aab5f33d40688725554381282277
#: ../../topics/auth/default.txt:944
msgid ""
"A form for generating and emailing a one-time use link to reset a user's "
"password."
msgstr ""

# 6d572649b29d4d7d88043c56e37c7d2f
#: ../../topics/auth/default.txt:949
msgid ""
"A form that lets a user change his/her password without entering the old "
"password."
msgstr ""

# 1fbf685178964149ad8294404096fcfd
#: ../../topics/auth/default.txt:954
msgid ""
"A form used in the admin interface to change a user's information and "
"permissions."
msgstr ""

# 31e42cae025b4b61b481710808911d14
#: ../../topics/auth/default.txt:959
msgid "A form for creating a new user."
msgstr ""

# bc7dfec73690435c86161e73087cf18b
#: ../../topics/auth/default.txt:965
msgid "Authentication data in templates"
msgstr ""

# fb11be9a4b8d43a48d2347e75f028192
#: ../../topics/auth/default.txt:967
msgid ""
"The currently logged-in user and his/her permissions are made available in "
"the :doc:`template context </ref/templates/api>` when you use :class:"
"`~django.template.RequestContext`."
msgstr ""

# b46c78d29a0c41deac967974cb80858a
#: ../../topics/auth/default.txt:1055
msgid "Technicality"
msgstr ""

# 32766844a771465a91e673d359b134aa
#: ../../topics/auth/default.txt:1057
msgid ""
"Technically, these variables are only made available in the template context "
"if you use :class:`~django.template.RequestContext` *and* your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` setting contains ``\"django.contrib.auth."
"context_processors.auth\"``, which is default. For more, see the :ref:"
"`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""

# b7b4426bbc854eb7a3f58509d5c67857
# 50c3e8450f5c488881b889e4be9ea205
#: ../../topics/auth/default.txt:980 ../../topics/auth/index.txt:31
msgid "Users"
msgstr ""

# 4640b5e9adcb4ae0af7c30d2502c05b4
#: ../../topics/auth/default.txt:982
msgid ""
"When rendering a template :class:`~django.template.RequestContext`, the "
"currently logged-in user, either a  :class:`~django.contrib.auth.models."
"User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` "
"instance, is stored in the template variable ``{{ user }}``:"
msgstr ""

# 51fdf95f70524a8ba7aed97064bdc424
#: ../../topics/auth/default.txt:995
msgid ""
"This template context variable is not available if a ``RequestContext`` is "
"not being used."
msgstr ""

# 09a0ef950bdd4f738817edb7048f41fc
#: ../../topics/auth/default.txt:999
msgid "Permissions"
msgstr ""

# 2ca00643beaa4f7d81c74e0f2b9dcd50
#: ../../topics/auth/default.txt:1001
msgid ""
"The currently logged-in user's permissions are stored in the template "
"variable ``{{ perms }}``. This is an instance of ``django.contrib.auth."
"context_processors.PermWrapper``, which is a template-friendly proxy of "
"permissions."
msgstr ""

# 7679b807b1e0496196a59d3077e86748
#: ../../topics/auth/default.txt:1006
msgid ""
"In the ``{{ perms }}`` object, single-attribute lookup is a proxy to :meth:"
"`User.has_module_perms <django.contrib.auth.models.User.has_module_perms>`. "
"This example would display ``True`` if the logged-in user had any "
"permissions in the ``foo`` app::"
msgstr ""

# 6999f86cdf7a4e489ca9d16f41722953
#: ../../topics/auth/default.txt:1013
msgid ""
"Two-level-attribute lookup is a proxy to :meth:`User.has_perm <django."
"contrib.auth.models.User.has_perm>`. This example would display ``True`` if "
"the logged-in user had the permission ``foo.can_vote``::"
msgstr ""

# 4041cf804f0045cca1a9a8931cf5e73b
#: ../../topics/auth/default.txt:1020
msgid "Thus, you can check permissions in template ``{% if %}`` statements:"
msgstr ""

# 8a5ff569f14c4e35aeb38f4140c91155
#: ../../topics/auth/default.txt:1039
msgid ""
"It is possible to also look permissions up by ``{% if in %}`` statements. "
"For example:"
msgstr ""

# a543f74621e8413a9540843195a24a97
#: ../../topics/auth/default.txt:1053
msgid "Managing users in the admin"
msgstr ""

# 88f6ff13c236499fa9fa25fbb123da0f
#: ../../topics/auth/default.txt:1055
msgid ""
"When you have both ``django.contrib.admin`` and ``django.contrib.auth`` "
"installed, the admin provides a convenient way to view and manage users, "
"groups, and permissions. Users can be created and deleted like any Django "
"model. Groups can be created, and permissions can be assigned to users or "
"groups. A log of user edits to models made within the admin is also stored "
"and displayed."
msgstr ""

# 107cdea3aa054029892a5ede3676ac21
#: ../../topics/auth/default.txt:1063
msgid "Creating Users"
msgstr ""

# 1264a0121f1c4335bb44d9a3dd5e4830
#: ../../topics/auth/default.txt:1065
msgid ""
"You should see a link to \"Users\" in the \"Auth\" section of the main admin "
"index page. The \"Add user\" admin page is different than standard admin "
"pages in that it requires you to choose a username and password before "
"allowing you to edit the rest of the user's fields."
msgstr ""

# 670d5388864e430a8c173afd960656bb
#: ../../topics/auth/default.txt:1070
msgid ""
"Also note: if you want a user account to be able to create users using the "
"Django admin site, you'll need to give them permission to add users *and* "
"change users (i.e., the \"Add user\" and \"Change user\" permissions). If an "
"account has permission to add users but not to change them, that account "
"won't be able to add users. Why? Because if you have permission to add "
"users, you have the power to create superusers, which can then, in turn, "
"change other users. So Django requires add *and* change permissions as a "
"slight security measure."
msgstr ""

# fc552c31006b4df983105383d953b36c
#: ../../topics/auth/default.txt:1080
msgid "Changing Passwords"
msgstr ""

# 47358de27f214a03af37210c6475c726
#: ../../topics/auth/default.txt:1082
msgid ""
"User passwords are not displayed in the admin (nor stored in the database), "
"but the :doc:`password storage details </topics/auth/passwords>` are "
"displayed. Included in the display of this information is a link to a "
"password change form that allows admins to change user passwords."
msgstr ""

# ed81e97ff9874a1faf76fd30c66fdbe4
#: ../../topics/auth/index.txt:3
msgid "User authentication in Django"
msgstr ""

# 69d251bf278e4b9ea45617774f87c0e8
#: ../../topics/auth/index.txt:15
msgid ""
"Django comes with an user authentication system. It handles user accounts, "
"groups, permissions and cookie-based user sessions. This section of the "
"documentation explains how the default implementation works out of the box, "
"as well as how to :doc:`extend and customize </topics/auth/customizing>` it "
"to suit your project's needs."
msgstr ""

# 4d592a9c9aa34e91bf28b7320554eb93
# bb710c6242ea456bac7a66f519a5fe7f
# 988dee0725c04a069486a44ba353382d
# ce54a6f1f0d34cbc827642e7c2a0d28e
# dbdff6720afd4730af7ee2b390714382
# 56762f4045de437aafa8f6defad172b3
# 1c54054980684d3ea39189c9d5620aad
#: ../../topics/auth/index.txt:22 ../../topics/forms/index.txt:26
#: ../../topics/http/urls.txt:18 ../../topics/i18n/formatting.txt:8
#: ../../topics/i18n/index.txt:14 ../../topics/i18n/timezones.txt:12
#: ../../topics/i18n/translation.txt:8
msgid "Overview"
msgstr ""

# 46ec8c1f10b3445490d53a022f448765
#: ../../topics/auth/index.txt:24
msgid ""
"The Django authentication system handles both authentication and "
"authorization. Briefly, authentication verifies a user is who they claim to "
"be, and authorization determines what an authenticated user is allowed to "
"do. Here the term authentication is used to refer to both tasks."
msgstr ""

# 52a55ac62bf4451fa055719ae2ff4ef1
#: ../../topics/auth/index.txt:29
msgid "The auth system consists of:"
msgstr ""

# 8d841aa5e01247ec85c7566c948e0853
#: ../../topics/auth/index.txt:32
msgid ""
"Permissions: Binary (yes/no) flags designating whether a user may perform a "
"certain task."
msgstr ""

# b73301ec7d584103b1d25d55601bdebd
#: ../../topics/auth/index.txt:34
msgid ""
"Groups: A generic way of applying labels and permissions to more than one "
"user."
msgstr ""

# 06870f2a04ac4624a29a228774aaa689
#: ../../topics/auth/index.txt:36
msgid "A configurable password hashing system"
msgstr ""

# 29b82bdf0a9043dca0d978f89260f745
#: ../../topics/auth/index.txt:37
msgid "Forms and view tools for logging in users, or restricting content"
msgstr ""

# 0210b86940964f1a951653703b659001
#: ../../topics/auth/index.txt:38
msgid "A pluggable backend system"
msgstr ""

# e4beb4ab7a37457e9fc6600cda192d09
#: ../../topics/auth/index.txt:40
msgid ""
"The authentication system in Django aims to be very generic and doesn't "
"provide some features commonly found in web authentication systems. "
"Solutions for some of these common problems have been implemented in third-"
"party packages:"
msgstr ""

# 9ba47de07063445ab08b20cac66d3540
#: ../../topics/auth/index.txt:44
msgid "Password strength checking"
msgstr ""

# 6432e15a225c40b98632316b5a71ad8b
#: ../../topics/auth/index.txt:45
msgid "Throttling of login attempts"
msgstr ""

# 10edc70163bc49e9a10394eff0ed1c13
#: ../../topics/auth/index.txt:46
msgid "Authentication against third-parties (OAuth, for example)"
msgstr ""

# bc4980bf00284d2d8b76a43203d366b3
#: ../../topics/auth/index.txt:49
msgid "Installation"
msgstr ""

# 8cc5f4d3e84441fabc2fe1fa5860943b
#: ../../topics/auth/index.txt:51
msgid ""
"Authentication support is bundled as a Django contrib module in ``django."
"contrib.auth``. By default, the required configuration is already included "
"in the :file:`settings.py` generated by :djadmin:`django-admin.py "
"startproject <startproject>`, these consist of two items listed in your :"
"setting:`INSTALLED_APPS` setting:"
msgstr ""

# 73ae793f04fb4a079759a796db6089af
#: ../../topics/auth/index.txt:57
msgid ""
"``'django.contrib.auth'`` contains the core of the authentication framework, "
"and its default models."
msgstr ""

# 70384dd23cad4aa69d81b621bb15b2b1
#: ../../topics/auth/index.txt:59
msgid ""
"``'django.contrib.contenttypes'`` is the Django :doc:`content type system </"
"ref/contrib/contenttypes>`, which allows permissions to be associated with "
"models you create."
msgstr ""

# 05d33f94ad604103a7b4d9ffc7b41b95
#: ../../topics/auth/index.txt:63
msgid "and two items in your :setting:`MIDDLEWARE_CLASSES` setting:"
msgstr ""

# 855e60d1af4d46df94fbd40e98dee837
#: ../../topics/auth/index.txt:65
msgid ""
":class:`~django.contrib.sessions.middleware.SessionMiddleware` manages :doc:"
"`sessions </topics/http/sessions>` across requests."
msgstr ""

# 2fc984bee0fa4bc4a6180066573103b8
#: ../../topics/auth/index.txt:67
msgid ""
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` associates "
"users with requests using sessions."
msgstr ""

# 99471be05bcd4d5b986f05c10671c8d8
#: ../../topics/auth/index.txt:70
msgid ""
"With these settings in place, running the command ``manage.py syncdb`` "
"creates the necessary database tables for auth related models, creates "
"permissions for any models defined in your installed apps, and prompts you "
"to create a superuser account the first time you run it."
msgstr ""

# 0e686a5a7e9949779313b9ed22cd4a1d
# 116cadbde9ad4e8c9785b3007200109b
#: ../../topics/auth/index.txt:76 ../../topics/i18n/timezones.txt:649
msgid "Usage"
msgstr ""

# c958bca1f33a4fa48e5cb5975a4f50cf
#: ../../topics/auth/index.txt:78
msgid ":doc:`Using Django's default implementation <default>`"
msgstr ""

# a731e26a16d94a6296d43111e24d8f20
#: ../../topics/auth/index.txt:80
msgid ":ref:`Working with User objects <user-objects>`"
msgstr ""

# 9ae52ff8ae904b30b9d52de5ec136809
#: ../../topics/auth/index.txt:81
msgid ":ref:`Permissions and authorization <topic-authorization>`"
msgstr ""

# 6b3e7bd4f3844889b08db100fe5915eb
#: ../../topics/auth/index.txt:82
msgid ":ref:`Authentication in web requests <auth-web-requests>`"
msgstr ""

# dcf981001ecf4b96829311e35b59e419
#: ../../topics/auth/index.txt:83
msgid ":ref:`Managing users in the admin <auth-admin>`"
msgstr ""

# 382928d3f0134a2a808256e33702e90c
#: ../../topics/auth/index.txt:85
msgid ":doc:`API reference for the default implementation </ref/contrib/auth>`"
msgstr ""

# c4ac00d789a44a13b400b26e96761813
#: ../../topics/auth/index.txt:87
msgid ":doc:`Customizing Users and authentication <customizing>`"
msgstr ""

# 0250638e3e56450485812ec8e52b4356
#: ../../topics/auth/index.txt:89
msgid ":doc:`Password management in Django <passwords>`"
msgstr ""

# 764f6e05741445959f75692ffe1141ab
#: ../../topics/auth/passwords.txt:3
msgid "Password management in Django"
msgstr ""

# 0dadab88cd4d4a6bbbd27e3146399f44
#: ../../topics/auth/passwords.txt:5
msgid ""
"Password management is something that should generally not be reinvented "
"unnecessarily, and Django endeavors to provide a secure and flexible set of "
"tools for managing user passwords. This document describes how Django stores "
"passwords, how the storage hashing can be configured, and some utilities to "
"work with hashed passwords."
msgstr ""

# 64d5027f3da64e42a9ee3f7c20f2a4e1
#: ../../topics/auth/passwords.txt:14
msgid "How Django stores passwords"
msgstr ""

# 3193e6ae52fd45468e920bb028bb48a2
#: ../../topics/auth/passwords.txt:21
msgid ""
"The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:"
"`~django.contrib.auth.models.User` object is a string in this format::"
msgstr ""

# c202b08fa9ca4308842672bfd728c9a6
#: ../../topics/auth/passwords.txt:26
msgid ""
"Those are the components used for storing a User's password, separated by "
"the dollar-sign character and consist of: the hashing algorithm, the number "
"of algorithm iterations (work factor), the random salt, and the resulting "
"password hash.  The algorithm is one of a number of one-way hashing or "
"password storage algorithms Django can use; see below. Iterations describe "
"the number of times the algorithm is run over the hash. Salt is the random "
"seed used and the hash is the result of the one-way function."
msgstr ""

# 25b4c3e0178349aebbc023a610616aa0
#: ../../topics/auth/passwords.txt:34
msgid ""
"By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password "
"stretching mechanism recommended by NIST_. This should be sufficient for "
"most users: it's quite secure, requiring massive amounts of computing time "
"to break."
msgstr ""

# df550d0aa2d044478dc02c989e2e2a7f
#: ../../topics/auth/passwords.txt:39
msgid ""
"However, depending on your requirements, you may choose a different "
"algorithm, or even use a custom algorithm to match your specific security "
"situation. Again, most users shouldn't need to do this -- if you're not "
"sure, you probably don't.  If you do, please read on:"
msgstr ""

# 567667f21aab4106a2c7ff4ae42e9998
#: ../../topics/auth/passwords.txt:44
msgid ""
"Django chooses the algorithm to use by consulting the :setting:"
"`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that "
"this Django installation supports. The first entry in this list (that is, "
"``settings.PASSWORD_HASHERS[0]``) will be used to store passwords, and all "
"the other entries are valid hashers that can be used to check existing "
"passwords.  This means that if you want to use a different algorithm, you'll "
"need to modify :setting:`PASSWORD_HASHERS` to list your preferred algorithm "
"first in the list."
msgstr ""

# d7aa9d297e614b198c186a6617a81a80
#: ../../topics/auth/passwords.txt:53
msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr ""

# df84b9b6bd0544ccb6e1998dc83d551e
#: ../../topics/auth/passwords.txt:64
msgid ""
"This means that Django will use PBKDF2_ to store all passwords, but will "
"support checking passwords stored with PBKDF2SHA1, bcrypt_, SHA1_, etc. The "
"next few sections describe a couple of common ways advanced users may want "
"to modify this setting."
msgstr ""

# 84cf4980cb714686b99f5ca82eeadbb7
#: ../../topics/auth/passwords.txt:72
msgid "Using bcrypt with Django"
msgstr ""

# 1b7ddde0ba8b4cabba513971b043e01f
#: ../../topics/auth/passwords.txt:74
msgid ""
"Bcrypt_ is a popular password storage algorithm that's specifically designed "
"for long-term password storage. It's not the default used by Django since it "
"requires the use of third-party libraries, but since many people may want to "
"use it Django supports bcrypt with minimal effort."
msgstr ""

# ff022c7f1ded40c8bc038b07ac9f5e14
#: ../../topics/auth/passwords.txt:79
msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""

# bc4fc52e69d04f269e34d065ef8a24f8
#: ../../topics/auth/passwords.txt:81
msgid ""
"Install the `py-bcrypt`_ library (probably by running ``sudo pip install py-"
"bcrypt``, or downloading the library and installing it with ``python setup."
"py install``)."
msgstr ""

# e1696ca6b1f8423ebee9075240430c2c
#: ../../topics/auth/passwords.txt:85
msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``BCryptPasswordHasher`` first. "
"That is, in your settings file, you'd put::"
msgstr ""

# 27e4562363d7494c9d3fd89eb3c0a5aa
#: ../../topics/auth/passwords.txt:97
msgid ""
"(You need to keep the other entries in this list, or else Django won't be "
"able to upgrade passwords; see below)."
msgstr ""

# 237ef33880f74d77a1d34a35301c2cca
#: ../../topics/auth/passwords.txt:100
msgid ""
"That's it -- now your Django install will use Bcrypt as the default storage "
"algorithm."
msgstr ""

# 0221f94c8f8c4c1aa61a818572c0723f
#: ../../topics/auth/passwords.txt:103
msgid "Password truncation with BCryptPasswordHasher"
msgstr ""

# 29b247dde2e54cc2b3225245bb7646b9
#: ../../topics/auth/passwords.txt:105
msgid ""
"The designers of bcrypt truncate all passwords at 72 characters which means "
"that ``bcrypt(password_with_100_chars) == "
"bcrypt(password_with_100_chars[:72])``. ``BCryptPasswordHasher`` does not "
"have any special handling and thus is also subject to this hidden password "
"length limit. The practical ramification of this truncation is pretty "
"marginal as the average user does not have a password greater than 72 "
"characters in length and even being truncated at 72 the compute powered "
"required to brute force bcrypt in any useful amount of time is still "
"astronomical."
msgstr ""

# 709df45d12df4d6bb27e63d8721011d4
#: ../../topics/auth/passwords.txt:114
msgid "Other bcrypt implementations"
msgstr ""

# 075021601ba54d3391893809c83bbadd
#: ../../topics/auth/passwords.txt:116
msgid ""
"There are several other implementations that allow bcrypt to be used with "
"Django. Django's bcrypt support is NOT directly compatible with these. To "
"upgrade, you will need to modify the hashes in your database to be in the "
"form ``bcrypt$(raw bcrypt output)``. For example: ``bcrypt$$2a"
"$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy``."
msgstr ""

# cd75be15a00d41e2b6e5f3636596966d
#: ../../topics/auth/passwords.txt:124
msgid "Increasing the work factor"
msgstr ""

# 87359b3cedab4b4297fef5712e9b0a0b
#: ../../topics/auth/passwords.txt:126
msgid ""
"The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of "
"hashing. This deliberately slows down attackers, making attacks against "
"hashed passwords harder. However, as computing power increases, the number "
"of iterations needs to be increased. We've chosen a reasonable default (and "
"will increase it with each release of Django), but you may wish to tune it "
"up or down, depending on your security needs and available processing power. "
"To do so, you'll subclass the appropriate algorithm and override the "
"``iterations`` parameters. For example, to increase the number of iterations "
"used by the default PBKDF2 algorithm:"
msgstr ""

# 6e2ef9f42f4c48ce9c4589f971bfa6be
#: ../../topics/auth/passwords.txt:136
msgid ""
"Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""

# e7572f51d02b454487a6b331843ad491
#: ../../topics/auth/passwords.txt:146
msgid ""
"Save this somewhere in your project. For example, you might put this in a "
"file like ``myproject/hashers.py``."
msgstr ""

# 05e36cb106f845848af829a839ee17f4
#: ../../topics/auth/passwords.txt:149
msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""

# c69db8a3308c4b6a93a2a9da4a45c798
#: ../../topics/auth/passwords.txt:162
msgid ""
"That's it -- now your Django install will use more iterations when it stores "
"passwords using PBKDF2."
msgstr ""

# 219c64f65d394be9b5e88f66e029d4d3
#: ../../topics/auth/passwords.txt:166
msgid "Password upgrading"
msgstr ""

# 34c64a47e0584217a2cc9361b161f0be
#: ../../topics/auth/passwords.txt:168
msgid ""
"When users log in, if their passwords are stored with anything other than "
"the preferred algorithm, Django will automatically upgrade the algorithm to "
"the preferred one. This means that old installs of Django will get "
"automatically more secure as users log in, and it also means that you can "
"switch to new (and better) storage algorithms as they get invented."
msgstr ""

# 9915f67ff8bc47b68506bddcf2b19324
#: ../../topics/auth/passwords.txt:174
msgid ""
"However, Django can only upgrade passwords that use algorithms mentioned in :"
"setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make "
"sure never to *remove* entries from this list. If you do, users using un- "
"mentioned algorithms won't be able to upgrade."
msgstr ""

# a582cc7bfee54a77b0f18343eb079f02
#: ../../topics/auth/passwords.txt:187
msgid "Manually managing a user's password"
msgstr ""

# 50b885ef75da4be89964a845bb3d325d
#: ../../topics/auth/passwords.txt:200
msgid ""
"If you'd like to manually authenticate a user by comparing a plain-text "
"password to the hashed password in the database, use the convenience "
"function :func:`check_password`. It takes two arguments: the plain-text "
"password to check, and the full value of a user's ``password`` field in the "
"database to check against, and returns ``True`` if they match, ``False`` "
"otherwise."
msgstr ""

# 667aa84b528043ddb0ef56b85e8d6ca2
#: ../../topics/auth/passwords.txt:211
msgid ""
"Creates a hashed password in the format used by this application. It takes "
"one mandatory argument: the password in plain-text. Optionally, you can "
"provide a salt and a hashing algorithm to use, if you don't want to use the "
"defaults (first entry of ``PASSWORD_HASHERS`` setting). Currently supported "
"algorithms are: ``'pbkdf2_sha256'``, ``'pbkdf2_sha1'``, ``'bcrypt'`` (see :"
"ref:`bcrypt_usage`), ``'sha1'``, ``'md5'``, ``'unsalted_md5'`` (only for "
"backward compatibility) and ``'crypt'`` if you have the ``crypt`` library "
"installed. If the password argument is ``None``, an unusable password is "
"returned (a one that will be never accepted by :func:`check_password`)."
msgstr ""

# 96c8185f4ce84d309a8b6038c58a3c58
#: ../../topics/auth/passwords.txt:226
msgid ""
"Checks if the given string is a hashed password that has a chance of being "
"verified against :func:`check_password`."
msgstr ""

# 7b86ac24f51246508029c6a1db8f2f54
#: ../../topics/cache.txt:3
msgid "Django's cache framework"
msgstr ""

# 2d111a9a9b8e480bbba86cb84618cde8
#: ../../topics/cache.txt:5
msgid ""
"A fundamental trade-off in dynamic Web sites is, well, they're dynamic. Each "
"time a user requests a page, the Web server makes all sorts of calculations "
"-- from database queries to template rendering to business logic -- to "
"create the page that your site's visitor sees. This is a lot more expensive, "
"from a processing-overhead perspective, than your standard read-a-file-off-"
"the-filesystem server arrangement."
msgstr ""

# 85d5a74cf60e48cf953bf3903a1c5a71
#: ../../topics/cache.txt:12
msgid ""
"For most Web applications, this overhead isn't a big deal. Most Web "
"applications aren't washingtonpost.com or slashdot.org; they're simply "
"small- to medium-sized sites with so-so traffic. But for medium- to high-"
"traffic sites, it's essential to cut as much overhead as possible."
msgstr ""

# b6869b5836b74abb848a668a59f2ec91
#: ../../topics/cache.txt:17
msgid "That's where caching comes in."
msgstr ""

# 71294a3520e7441aa558e6a5af01d3e5
#: ../../topics/cache.txt:19
msgid ""
"To cache something is to save the result of an expensive calculation so that "
"you don't have to perform the calculation next time. Here's some pseudocode "
"explaining how this would work for a dynamically generated Web page::"
msgstr ""

# 13a0d1dac4bb4beebe4c244dfcd64ec1
#: ../../topics/cache.txt:31
msgid ""
"Django comes with a robust cache system that lets you save dynamic pages so "
"they don't have to be calculated for each request. For convenience, Django "
"offers different levels of cache granularity: You can cache the output of "
"specific views, you can cache only the pieces that are difficult to produce, "
"or you can cache your entire site."
msgstr ""

# eba852e3f7f54b9abed994b2052e6fed
#: ../../topics/cache.txt:37
msgid ""
"Django also works well with \"upstream\" caches, such as `Squid <http://www."
"squid-cache.org>`_ and browser-based caches. These are the types of caches "
"that you don't directly control but to which you can provide hints (via HTTP "
"headers) about which parts of your site should be cached, and how."
msgstr ""

# 75b54f920e4c44ffad211eecd6eab31e
#: ../../topics/cache.txt:43
msgid "Setting up the cache"
msgstr ""

# ac3881feb4174ab0808da2c53b8202c7
#: ../../topics/cache.txt:45
msgid ""
"The cache system requires a small amount of setup. Namely, you have to tell "
"it where your cached data should live -- whether in a database, on the "
"filesystem or directly in memory. This is an important decision that affects "
"your cache's performance; yes, some cache types are faster than others."
msgstr ""

# 22747ff4e9814600a89b181ae2e20e5a
#: ../../topics/cache.txt:50
msgid ""
"Your cache preference goes in the :setting:`CACHES` setting in your settings "
"file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""

# b97d808733934ec78ebf498484353a37
#: ../../topics/cache.txt:57
msgid "Memcached"
msgstr ""

# df970bc8b51b4e39a488b62e18871ade
#: ../../topics/cache.txt:59
msgid ""
"By far the fastest, most efficient type of cache available to Django, "
"Memcached__ is an entirely memory-based cache framework originally developed "
"to handle high loads at LiveJournal.com and subsequently open-sourced by "
"Danga Interactive.  It is used by sites such as Facebook and Wikipedia to "
"reduce database access and dramatically increase site performance."
msgstr ""

# 2c9bfaac0b254df5942bdd46fd0b76be
#: ../../topics/cache.txt:67
msgid ""
"Memcached runs as a daemon and is allotted a specified amount of RAM. All it "
"does is provide a fast interface for adding, retrieving and deleting "
"arbitrary data in the cache.  All data is stored directly in memory, so "
"there's no overhead of database or filesystem usage."
msgstr ""

# d7c92897015e42ed9d594c50bb423428
#: ../../topics/cache.txt:72
msgid ""
"After installing Memcached itself, you'll need to install a memcached "
"binding. There are several python memcached bindings available; the two most "
"common are `python-memcached`_ and `pylibmc`_."
msgstr ""

# 3ad73084b5f34494b0d97c415ab70a0b
#: ../../topics/cache.txt:79
msgid "To use Memcached with Django:"
msgstr ""

# 3f97c74edb554ea78dce0f001b2c97cf
#: ../../topics/cache.txt:81
msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends."
"memcached.MemcachedCache`` or ``django.core.cache.backends.memcached."
"PyLibMCCache`` (depending on your chosen memcached binding)"
msgstr ""

# c6c32911ec7044799492f3816f04a329
#: ../../topics/cache.txt:86
msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where "
"``ip`` is the IP address of the Memcached daemon and ``port`` is the port on "
"which Memcached is running, or to a ``unix:path`` value, where ``path`` is "
"the path to a Memcached Unix socket file."
msgstr ""

# 98b1c8ffbd1d49afa5bd8d4bfb599622
#: ../../topics/cache.txt:91
msgid ""
"In this example, Memcached is running on localhost (127.0.0.1) port 11211, "
"using the ``python-memcached`` binding::"
msgstr ""

# 4bb2140514e745d19e8dab9f58268687
#: ../../topics/cache.txt:101
msgid ""
"In this example, Memcached is available through a local Unix socket file :"
"file:`/tmp/memcached.sock` using the ``python-memcached`` binding::"
msgstr ""

# 25cd0d58cb014b2984ecd4eab6e6cab1
#: ../../topics/cache.txt:111
msgid ""
"One excellent feature of Memcached is its ability to share cache over "
"multiple servers. This means you can run Memcached daemons on multiple "
"machines, and the program will treat the group of machines as a *single* "
"cache, without the need to duplicate cache values on each machine. To take "
"advantage of this feature, include all server addresses in :setting:"
"`LOCATION <CACHES-LOCATION>`, either separated by semicolons or as a list."
msgstr ""

# a85da6cd572c4a3c80e55ca70c40ff71
#: ../../topics/cache.txt:118
msgid ""
"In this example, the cache is shared over Memcached instances running on IP "
"address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""

# 7b7d215b74fe4a468aa67eafd3f64651
#: ../../topics/cache.txt:131
msgid ""
"In the following example, the cache is shared over Memcached instances "
"running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port "
"11212), and 172.19.26.244 (port 11213)::"
msgstr ""

# c7d1cb9bab6b49b4b4124cd9a0f99cde
#: ../../topics/cache.txt:146
msgid ""
"A final point about Memcached is that memory-based caching has one "
"disadvantage: Because the cached data is stored in memory, the data will be "
"lost if your server crashes. Clearly, memory isn't intended for permanent "
"data storage, so don't rely on memory-based caching as your only data "
"storage. Without a doubt, *none* of the Django caching backends should be "
"used for permanent storage -- they're all intended to be solutions for "
"caching, not storage -- but we point this out here because memory-based "
"caching is particularly temporary."
msgstr ""

# b5c4a1304d834c518635bb4896ec2304
#: ../../topics/cache.txt:156
msgid "Database caching"
msgstr ""

# 5d4de06cf85a449693169d4a52ff87dd
#: ../../topics/cache.txt:158
msgid ""
"To use a database table as your cache backend, first create a cache table in "
"your database by running this command::"
msgstr ""

# 86ee5d1bfc24467f9dfb3b883e17eb2b
#: ../../topics/cache.txt:163
msgid ""
"...where ``[cache_table_name]`` is the name of the database table to create. "
"(This name can be whatever you want, as long as it's a valid table name "
"that's not already being used in your database.) This command creates a "
"single table in your database that is in the proper format that Django's "
"database-cache system expects."
msgstr ""

# 6d7a7188c51d43469b25a423dcdfb3f0
#: ../../topics/cache.txt:169
msgid ""
"Once you've created that database table, set your :setting:`BACKEND <CACHES-"
"BACKEND>` setting to ``\"django.core.cache.backends.db.DatabaseCache\"``, "
"and :setting:`LOCATION <CACHES-LOCATION>` to ``tablename`` -- the name of "
"the database table. In this example, the cache table's name is "
"``my_cache_table``::"
msgstr ""

# 5af4c623b03a432b81583668899675dc
#: ../../topics/cache.txt:183
msgid ""
"The database caching backend uses the same database as specified in your "
"settings file. You can't use a different database backend for your cache "
"table."
msgstr ""

# 2b9c6742e9324e72a054f7df97786134
#: ../../topics/cache.txt:186
msgid ""
"Database caching works best if you've got a fast, well-indexed database "
"server."
msgstr ""

# a512fb4540164810a9a91fd659e98364
#: ../../topics/cache.txt:189
msgid "Database caching and multiple databases"
msgstr ""

# b16c170bef0f4628b6b7f02780d0eff3
#: ../../topics/cache.txt:191
msgid ""
"If you use database caching with multiple databases, you'll also need to set "
"up routing instructions for your database cache table. For the purposes of "
"routing, the database cache table appears as a model named ``CacheEntry``, "
"in an application named ``django_cache``. This model won't appear in the "
"models cache, but the model details can be used for routing purposes."
msgstr ""

# 47cbe1d69fe248d2927095a326d37879
#: ../../topics/cache.txt:198
msgid ""
"For example, the following router would direct all cache read operations to "
"``cache_slave``, and all write operations to ``cache_master``. The cache "
"table will only be synchronized onto ``cache_master``::"
msgstr ""

# 6c7e84e019814da088d531957738ac14
#: ../../topics/cache.txt:224
msgid ""
"If you don't specify routing directions for the database cache model, the "
"cache backend will use the ``default`` database."
msgstr ""

# bc41c851509d41fab1e5c8772048e235
#: ../../topics/cache.txt:227
msgid ""
"Of course, if you don't use the database cache backend, you don't need to "
"worry about providing routing instructions for the database cache model."
msgstr ""

# f3a9ba7c645841eabc6773904fafbc59
#: ../../topics/cache.txt:232
msgid "Filesystem caching"
msgstr ""

# 149378f0bcf946a8b62c59dfd053f4af
#: ../../topics/cache.txt:234
msgid ""
"To store cached items on a filesystem, use ``\"django.core.cache.backends."
"filebased.FileBasedCache\"`` for :setting:`BACKEND <CACHES-BACKEND>`. For "
"example, to store cached data in ``/var/tmp/django_cache``, use this "
"setting::"
msgstr ""

# 08fa196f08db4882931f44bbc5d232c4
#: ../../topics/cache.txt:247
msgid ""
"If you're on Windows, put the drive letter at the beginning of the path, "
"like this::"
msgstr ""

# 59a4530a8193490e9ff91ad390ddb3b6
#: ../../topics/cache.txt:257
msgid ""
"The directory path should be absolute -- that is, it should start at the "
"root of your filesystem. It doesn't matter whether you put a slash at the "
"end of the setting."
msgstr ""

# 47b96f1e14e14f6e9a2193d135550451
#: ../../topics/cache.txt:261
msgid ""
"Make sure the directory pointed-to by this setting exists and is readable "
"and writable by the system user under which your Web server runs. Continuing "
"the above example, if your server runs as the user ``apache``, make sure the "
"directory ``/var/tmp/django_cache`` exists and is readable and writable by "
"the user ``apache``."
msgstr ""

# 471bc871380d45fcbab2a36a6413373e
#: ../../topics/cache.txt:267
msgid ""
"Each cache value will be stored as a separate file whose contents are the "
"cache data saved in a serialized (\"pickled\") format, using Python's "
"``pickle`` module. Each file's name is the cache key, escaped for safe "
"filesystem use."
msgstr ""

# acbddef33ca84c9486a833f7aeaeecb6
#: ../../topics/cache.txt:272
msgid "Local-memory caching"
msgstr ""

# 8a988785ab5449df998f66df09da0357
#: ../../topics/cache.txt:274
msgid ""
"If you want the speed advantages of in-memory caching but don't have the "
"capability of running Memcached, consider the local-memory cache backend. "
"This cache is multi-process and thread-safe. To use it, set :setting:"
"`BACKEND <CACHES-BACKEND>` to ``\"django.core.cache.backends.locmem."
"LocMemCache\"``. For example::"
msgstr ""

# 425cc22061d34c5983537a05e34d50ac
#: ../../topics/cache.txt:287
msgid ""
"The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify "
"individual memory stores. If you only have one locmem cache, you can omit "
"the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more than "
"one local memory cache, you will need to assign a name to at least one of "
"them in order to keep them separate."
msgstr ""

# 65fe8a6b3d984fb2801ad643f0f1a5d7
#: ../../topics/cache.txt:293
msgid ""
"Note that each process will have its own private cache instance, which means "
"no cross-process caching is possible. This obviously also means the local "
"memory cache isn't particularly memory-efficient, so it's probably not a "
"good choice for production environments. It's nice for development."
msgstr ""

# 6c531c94c7c049f4b4b34242d98a3df8
#: ../../topics/cache.txt:299
msgid "Dummy caching (for development)"
msgstr ""

# ee5d659dd9864613836ef5406f6aa3f9
#: ../../topics/cache.txt:301
msgid ""
"Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- "
"it just implements the cache interface without doing anything."
msgstr ""

# f4c725466a4f482dbd36173d09ed558a
#: ../../topics/cache.txt:304
msgid ""
"This is useful if you have a production site that uses heavy-duty caching in "
"various places but a development/test environment where you don't want to "
"cache and don't want to have to change your code to special-case the latter. "
"To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like so::"
msgstr ""

# e76b5444c2aa4581a08a55d4e75bc791
#: ../../topics/cache.txt:316
msgid "Using a custom cache backend"
msgstr ""

# 3cadb24b4d004116bce24efa1c7cd66f
#: ../../topics/cache.txt:318
msgid ""
"While Django includes support for a number of cache backends out-of-the-box, "
"sometimes you might want to use a customized cache backend. To use an "
"external cache backend with Django, use the Python import path as the :"
"setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like "
"so::"
msgstr ""

# fe7a06e297344dddbddbd033a5ac1e18
#: ../../topics/cache.txt:329
msgid ""
"If you're building your own backend, you can use the standard cache backends "
"as reference implementations. You'll find the code in the ``django/core/"
"cache/backends/`` directory of the Django source."
msgstr ""

# 69add8d190994495bd5ce5f2c7159b47
#: ../../topics/cache.txt:333
msgid ""
"Note: Without a really compelling reason, such as a host that doesn't "
"support them, you should stick to the cache backends included with Django. "
"They've been well-tested and are easy to use."
msgstr ""

# d609b23b536a49d4931333dfcb3e2695
#: ../../topics/cache.txt:338
msgid "Cache arguments"
msgstr ""

# a8042c5a9bc54e038ee442bf9e8154f8
#: ../../topics/cache.txt:344
msgid ""
"Each cache backend can be given additional arguments to control caching "
"behavior. These arguments are provided as additional keys in the :setting:"
"`CACHES` setting. Valid arguments are as follows:"
msgstr ""

# 8359d999430148978839f8b03db9f4a3
#: ../../topics/cache.txt:348
msgid ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use "
"for the cache. This argument defaults to ``300`` seconds (5 minutes)."
msgstr ""

# 4d62a3d4d5d348b9a2f9833d3a884d8d
#: ../../topics/cache.txt:352
msgid ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to "
"the cache backend. The list of valid options will vary with each backend, "
"and cache backends backed by a third-party library will pass their options "
"directly to the underlying cache library."
msgstr ""

# 15f23646ef3d48a7abacf52bc5cc3738
#: ../../topics/cache.txt:357
msgid ""
"Cache backends that implement their own culling strategy (i.e., the "
"``locmem``, ``filesystem`` and ``database`` backends) will honor the "
"following options:"
msgstr ""

# 36d3760ab6ee4b82bf36036e364d2a75
#: ../../topics/cache.txt:361
msgid ""
"``MAX_ENTRIES``: The maximum number of entries allowed in the cache before "
"old values are deleted. This argument defaults to ``300``."
msgstr ""

# 457e09ef92304d5a960e82765a1a8660
#: ../../topics/cache.txt:365
msgid ""
"``CULL_FREQUENCY``: The fraction of entries that are culled when "
"``MAX_ENTRIES`` is reached. The actual ratio is ``1 / CULL_FREQUENCY``, so "
"set ``CULL_FREQUENCY`` to ``2`` to cull half the entries when "
"``MAX_ENTRIES`` is reached. This argument should be an integer and defaults "
"to ``3``."
msgstr ""

# 442f5220e0d64cd4a5a0b3a1dad3f5f3
#: ../../topics/cache.txt:371
msgid ""
"A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be "
"dumped when ``MAX_ENTRIES`` is reached. On some backends (``database`` in "
"particular) this makes culling *much* faster at the expense of more cache "
"misses."
msgstr ""

# b57ed1bf856d4bc8aa7a5289328b6cc4
#: ../../topics/cache.txt:375
msgid ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be "
"automatically included (prepended by default) to all cache keys used by the "
"Django server."
msgstr ""

# d1e66e51950c48d58d9b5137ea420266
#: ../../topics/cache.txt:379
msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr ""

# 6b05b8ccc9d04e629d40b41a817f2e32
#: ../../topics/cache.txt:382
msgid ""
":setting:`VERSION <CACHES-VERSION>`: The default version number for cache "
"keys generated by the Django server."
msgstr ""

# eeafeb283ed848bdb89d71a944775438
#: ../../topics/cache.txt:385
msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

# 190207711c9246e6be525e86b7b8fbf6
#: ../../topics/cache.txt:388
msgid ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted "
"path to a function that defines how to compose a prefix, version and key "
"into a final cache key."
msgstr ""

# 07fb1ea644e448a5b80f9a3847622d27
#: ../../topics/cache.txt:392
msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr ""

# 21e5e622623a4891a688debb670213dd
#: ../../topics/cache.txt:395
msgid ""
"In this example, a filesystem backend is being configured with a timeout of "
"60 seconds, and a maximum capacity of 1000 items::"
msgstr ""

# ffe3b6630c2b4788888a46d04430e573
#: ../../topics/cache.txt:409
msgid ""
"Invalid arguments are silently ignored, as are invalid values of known "
"arguments."
msgstr ""

# cdd1f6dd4a21499886fd907cec4e2140
#: ../../topics/cache.txt:413
msgid "The per-site cache"
msgstr ""

# d5fb98204eb04820a84e4c16055a2c50
#: ../../topics/cache.txt:415
msgid ""
"Once the cache is set up, the simplest way to use caching is to cache your "
"entire site. You'll need to add ``'django.middleware.cache."
"UpdateCacheMiddleware'`` and ``'django.middleware.cache."
"FetchFromCacheMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting, "
"as in this example::"
msgstr ""

# 0989a68c1a184283b5c552ec0156c5a8
#: ../../topics/cache.txt:429
msgid ""
"No, that's not a typo: the \"update\" middleware must be first in the list, "
"and the \"fetch\" middleware must be last. The details are a bit obscure, "
"but see `Order of MIDDLEWARE_CLASSES`_ below if you'd like the full story."
msgstr ""

# 7426fe5e55134cf4b24ff81855c5ca0f
#: ../../topics/cache.txt:433
msgid "Then, add the following required settings to your Django settings file:"
msgstr ""

# 0797e6e1c20f41d8962d99f6feca5099
#: ../../topics/cache.txt:435
msgid ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""

# 099389144dd14de28b1035a729deec05
#: ../../topics/cache.txt:436
msgid ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page "
"should be cached."
msgstr ""

# 88017c5de47140899e85941535d94be0
#: ../../topics/cache.txt:438
msgid ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across "
"multiple sites using the same Django installation, set this to the name of "
"the site, or some other string that is unique to this Django instance, to "
"prevent key collisions. Use an empty string if you don't care."
msgstr ""

# 6699f4b87c14422dad8b2d4d79684568
#: ../../topics/cache.txt:443
msgid ""
"The cache middleware caches GET and HEAD responses with status 200, where "
"the request and response headers allow. Responses to requests for the same "
"URL with different query parameters are considered to be unique pages and "
"are cached separately. Optionally, if the :setting:"
"`CACHE_MIDDLEWARE_ANONYMOUS_ONLY` setting is ``True``, only anonymous "
"requests (i.e., not those made by a logged-in user) will be cached. This is "
"a simple and effective way of disabling caching for any user-specific pages "
"(including Django's admin interface). Note that if you use :setting:"
"`CACHE_MIDDLEWARE_ANONYMOUS_ONLY`, you should make sure you've activated "
"``AuthenticationMiddleware``. The cache middleware expects that a HEAD "
"request is answered with the same response headers as the corresponding GET "
"request; in which case it can return a cached GET response for HEAD request."
msgstr ""

# 93757df784d54143a37025fbc7b3f987
#: ../../topics/cache.txt:456
msgid ""
"Additionally, the cache middleware automatically sets a few headers in each :"
"class:`~django.http.HttpResponse`:"
msgstr ""

# 78c395add0414f4b888c745128175def
#: ../../topics/cache.txt:459
msgid ""
"Sets the ``Last-Modified`` header to the current date/time when a fresh "
"(uncached) version of the page is requested."
msgstr ""

# 489db19c62c1406a93d3d400bb8b30dc
#: ../../topics/cache.txt:462
msgid ""
"Sets the ``Expires`` header to the current date/time plus the defined :"
"setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""

# 9dc509cf2a1f460f8c7fad1fcd03d4ea
#: ../../topics/cache.txt:465
msgid ""
"Sets the ``Cache-Control`` header to give a max age for the page -- again, "
"from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""

# 1364a8629f01457dae8603d1c14d0953
#: ../../topics/cache.txt:468
msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr ""

# f9cf44df900d43bd80eb251618ad89b7
#: ../../topics/cache.txt:470
msgid ""
"If a view sets its own cache expiry time (i.e. it has a ``max-age`` section "
"in its ``Cache-Control`` header) then the page will be cached until the "
"expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the "
"decorators in ``django.views.decorators.cache`` you can easily set a view's "
"expiry time (using the ``cache_control`` decorator) or disable caching for a "
"view (using the ``never_cache`` decorator). See the `using other headers`__ "
"section for more on these decorators."
msgstr ""

# f62faf59550b4e35ad9b81c62e4e12c8
#: ../../topics/cache.txt:480
msgid ""
"If :setting:`USE_I18N` is set to ``True`` then the generated cache key will "
"include the name of the active :term:`language<language code>` -- see also :"
"ref:`how-django-discovers-language-preference`). This allows you to easily "
"cache multilingual sites without having to create the cache key yourself."
msgstr ""

# 59190739db1d4b2ebe307f1beff3d4e4
#: ../../topics/cache.txt:487
msgid ""
"Cache keys also include the active :term:`language <language code>` when :"
"setting:`USE_L10N` is set to ``True`` and the :ref:`current time zone "
"<default-current-time-zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""

# 588c80d5905543b0bc7dc1fe720ede19
#: ../../topics/cache.txt:494
msgid "The per-view cache"
msgstr ""

# 4531656567bf4f44aaab71abb18efea1
#: ../../topics/cache.txt:498
msgid ""
"A more granular way to use the caching framework is by caching the output of "
"individual views. ``django.views.decorators.cache`` defines a ``cache_page`` "
"decorator that will automatically cache the view's response for you. It's "
"easy to use::"
msgstr ""

# b5faa2b072ec4f8083fdfba1d71c9382
#: ../../topics/cache.txt:509
msgid ""
"``cache_page`` takes a single argument: the cache timeout, in seconds. In "
"the above example, the result of the ``my_view()`` view will be cached for "
"15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of "
"readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes "
"multiplied by 60 seconds per minute.)"
msgstr ""

# af71ecfce4de434babffb97a00055058
#: ../../topics/cache.txt:515
msgid ""
"The per-view cache, like the per-site cache, is keyed off of the URL. If "
"multiple URLs point at the same view, each URL will be cached separately. "
"Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""

# 5f90c27cb5dc448e978c8975a0ad86d6
#: ../../topics/cache.txt:523
msgid ""
"then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as "
"you may expect. But once a particular URL (e.g., ``/foo/23/``) has been "
"requested, subsequent requests to that URL will use the cache."
msgstr ""

# 08b4aef1406f4a399b8020ecc269235d
#: ../../topics/cache.txt:527
msgid ""
"``cache_page`` can also take an optional keyword argument, ``cache``, which "
"directs the decorator to use a specific cache (from your :setting:`CACHES` "
"setting) when caching view results. By default, the ``default`` cache will "
"be used, but you can specify any cache you want::"
msgstr ""

# 5eccd95fd8084014b994f786fb915f94
#: ../../topics/cache.txt:537
msgid ""
"You can also override the cache prefix on a per-view basis. ``cache_page`` "
"takes an optional keyword argument, ``key_prefix``, which works in the same "
"way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the "
"middleware.  It can be used like this::"
msgstr ""

# 2698131ae7ab4e8196419103f74a7298
#: ../../topics/cache.txt:546
msgid ""
"The two settings can also be combined. If you specify a ``cache`` *and* a "
"``key_prefix``, you will get all the settings of the requested cache alias, "
"but with the key_prefix overridden."
msgstr ""

# 12c5b24511f9464eb27774c760b689f7
#: ../../topics/cache.txt:551
msgid "Specifying per-view cache in the URLconf"
msgstr ""

# ac30dee567804469ae370492c5ac6430
#: ../../topics/cache.txt:553
msgid ""
"The examples in the previous section have hard-coded the fact that the view "
"is cached, because ``cache_page`` alters the ``my_view`` function in place. "
"This approach couples your view to the cache system, which is not ideal for "
"several reasons. For instance, you might want to reuse the view functions on "
"another, cache-less site, or you might want to distribute the views to "
"people who might want to use them without being cached. The solution to "
"these problems is to specify the per-view cache in the URLconf rather than "
"next to the view functions themselves."
msgstr ""

# 268456181f884da9886d844a98396b20
#: ../../topics/cache.txt:562
msgid ""
"Doing so is easy: simply wrap the view function with ``cache_page`` when you "
"refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""

# 15d522ebe2eb4c268bd4ee021ea24852
#: ../../topics/cache.txt:569
msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""

# e1d24ca9076d465d9dbc1952a7b864a3
#: ../../topics/cache.txt:580
msgid "Template fragment caching"
msgstr ""

# f13b6b0711ca4fa6ad547d57e4baefc2
#: ../../topics/cache.txt:582
msgid ""
"If you're after even more control, you can also cache template fragments "
"using the ``cache`` template tag. To give your template access to this tag, "
"put ``{% load cache %}`` near the top of your template."
msgstr ""

# 798acd8cb2e04dce93dcaf5cb8fdbf35
#: ../../topics/cache.txt:586
msgid ""
"The ``{% cache %}`` template tag caches the contents of the block for a "
"given amount of time. It takes at least two arguments: the cache timeout, in "
"seconds, and the name to give the cache fragment. The name will be taken as "
"is, do not use a variable. For example:"
msgstr ""

# 8381556582f14ef8aefbcfdf03712e2c
#: ../../topics/cache.txt:598
msgid ""
"Sometimes you might want to cache multiple copies of a fragment depending on "
"some dynamic data that appears inside the fragment. For example, you might "
"want a separate cached copy of the sidebar used in the previous example for "
"every user of your site. Do this by passing additional arguments to the ``{% "
"cache %}`` template tag to uniquely identify the cache fragment:"
msgstr ""

# 896449f6beaa40578a8f9020c5629153
#: ../../topics/cache.txt:611
msgid ""
"It's perfectly fine to specify more than one argument to identify the "
"fragment. Simply pass as many arguments to ``{% cache %}`` as you need."
msgstr ""

# 49973757ba734f019dd1f8774974f471
#: ../../topics/cache.txt:614
msgid ""
"If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache "
"will :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` "
"template tag you could use one of the :ref:`translation-specific "
"variables<template-translation-vars>` available in templates to achieve the "
"same result:"
msgstr ""

# b58e13e7821d4a0c862ec2460b2bd6b7
#: ../../topics/cache.txt:631
msgid ""
"The cache timeout can be a template variable, as long as the template "
"variable resolves to an integer value. For example, if the template variable "
"``my_timeout`` is set to the value ``600``, then the following two examples "
"are equivalent:"
msgstr ""

# 7e79f34134f24770a3b15cfe11c82965
#: ../../topics/cache.txt:641
msgid ""
"This feature is useful in avoiding repetition in templates. You can set the "
"timeout in a variable, in one place, and just reuse that value."
msgstr ""

# dc0967742719439db9a748ad14785060
#: ../../topics/cache.txt:645
msgid "The low-level cache API"
msgstr ""

# 5689acc7a80a4d5190e1c018a2eff90c
#: ../../topics/cache.txt:649
msgid ""
"Sometimes, caching an entire rendered page doesn't gain you very much and "
"is, in fact, inconvenient overkill."
msgstr ""

# f8115d0407c64a8e8c58bd8c33b243d7
#: ../../topics/cache.txt:652
msgid ""
"Perhaps, for instance, your site includes a view whose results depend on "
"several expensive queries, the results of which change at different "
"intervals. In this case, it would not be ideal to use the full-page caching "
"that the per-site or per-view cache strategies offer, because you wouldn't "
"want to cache the entire result (since some of the data changes often), but "
"you'd still want to cache the results that rarely change."
msgstr ""

# 5342e0a302f74c4d8cf3a583a0c44166
#: ../../topics/cache.txt:659
msgid ""
"For cases like this, Django exposes a simple, low-level cache API. You can "
"use this API to store objects in the cache with any level of granularity you "
"like. You can cache any Python object that can be pickled safely: strings, "
"dictionaries, lists of model objects, and so forth. (Most common Python "
"objects can be pickled; refer to the Python documentation for more "
"information about pickling.)"
msgstr ""

# 274823f365424ec0a02649123e614b3c
#: ../../topics/cache.txt:667
msgid "Accessing the cache"
msgstr ""

# a8e21e413079451b8bee11a86a8b0072
#: ../../topics/cache.txt:671
msgid ""
"The cache module, ``django.core.cache``, has a ``cache`` object that's "
"automatically created from the ``'default'`` entry in the :setting:`CACHES` "
"setting::"
msgstr ""

# a25cb910ae8645a88f4c16c38baefae7
#: ../../topics/cache.txt:677
msgid ""
"If you have multiple caches defined in :setting:`CACHES`, then you can use :"
"func:`django.core.cache.get_cache` to retrieve a cache object for any key::"
msgstr ""

# 97810e641b5649ae9f5ad9e4844ef059
#: ../../topics/cache.txt:683
msgid ""
"If the named key does not exist, ``InvalidCacheBackendError`` will be raised."
msgstr ""

# daa4b42cb629443fbb6da7fd3066b38e
#: ../../topics/cache.txt:687
msgid "Basic usage"
msgstr ""

# ec7e38e9c7f643cd9680daa8199dcc0a
#: ../../topics/cache.txt:689
msgid "The basic interface is ``set(key, value, timeout)`` and ``get(key)``::"
msgstr ""

# 5fcd6936555d4f369228a8cb86603fac
#: ../../topics/cache.txt:695
msgid ""
"The ``timeout`` argument is optional and defaults to the ``timeout`` "
"argument of the appropriate backend in the :setting:`CACHES` setting "
"(explained above). It's the number of seconds the value should be stored in "
"the cache."
msgstr ""

# a4cd18f5dcb74a3b8d0f969334c05aea
#: ../../topics/cache.txt:700
msgid ""
"If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""

# 3c44ce6cff274affbb80e5af29548705
#: ../../topics/cache.txt:707
msgid ""
"We advise against storing the literal value ``None`` in the cache, because "
"you won't be able to distinguish between your stored ``None`` value and a "
"cache miss signified by a return value of ``None``."
msgstr ""

# 095fbe0b90424314a6fc9e7dd27cccf5
#: ../../topics/cache.txt:711
msgid ""
"``cache.get()`` can take a ``default`` argument. This specifies which value "
"to return if the object doesn't exist in the cache::"
msgstr ""

# 23fa292f4f534d80b0aa9f99bab90353
#: ../../topics/cache.txt:717
msgid ""
"To add a key only if it doesn't already exist, use the ``add()`` method. It "
"takes the same parameters as ``set()``, but it will not attempt to update "
"the cache if the key specified is already present::"
msgstr ""

# ec4f7b18acea4817bd54c0a787314cab
#: ../../topics/cache.txt:726
msgid ""
"If you need to know whether ``add()`` stored a value in the cache, you can "
"check the return value. It will return ``True`` if the value was stored, "
"``False`` otherwise."
msgstr ""

# 5d8b1afa84304c088842ce2c3470c8aa
#: ../../topics/cache.txt:730
msgid ""
"There's also a ``get_many()`` interface that only hits the cache once. "
"``get_many()`` returns a dictionary with all the keys you asked for that "
"actually exist in the cache (and haven't expired)::"
msgstr ""

# 129789d5d0eb404fa1d72943714896a5
#: ../../topics/cache.txt:740
msgid ""
"To set multiple values more efficiently, use ``set_many()`` to pass a "
"dictionary of key-value pairs::"
msgstr ""

# 8af0aaa37d034d06a84e1c681149a45c
#: ../../topics/cache.txt:747
msgid ""
"Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` parameter."
msgstr ""

# 9411e62e06dd4620af261e75a183c614
#: ../../topics/cache.txt:749
msgid ""
"You can delete keys explicitly with ``delete()``. This is an easy way of "
"clearing the cache for a particular object::"
msgstr ""

# c9af692fbb384ef2960053d74abde9c4
#: ../../topics/cache.txt:754
msgid ""
"If you want to clear a bunch of keys at once, ``delete_many()`` can take a "
"list of keys to be cleared::"
msgstr ""

# f2f2a2931bc34288b291361fde322038
#: ../../topics/cache.txt:759
msgid ""
"Finally, if you want to delete all the keys in the cache, use ``cache."
"clear()``.  Be careful with this; ``clear()`` will remove *everything* from "
"the cache, not just the keys set by your application. ::"
msgstr ""

# a83b45d7ad654aa9922bd09546d1114a
#: ../../topics/cache.txt:765
msgid ""
"You can also increment or decrement a key that already exists using the "
"``incr()`` or ``decr()`` methods, respectively. By default, the existing "
"cache value will incremented or decremented by 1. Other increment/decrement "
"values can be specified by providing an argument to the increment/decrement "
"call. A ValueError will be raised if you attempt to increment or decrement a "
"nonexistent cache key.::"
msgstr ""

# a6f869e7ca4f42ec926362c1cfa9ac12
#: ../../topics/cache.txt:784
msgid ""
"``incr()``/``decr()`` methods are not guaranteed to be atomic. On those "
"backends that support atomic increment/decrement (most notably, the "
"memcached backend), increment and decrement operations will be atomic. "
"However, if the backend doesn't natively provide an increment/decrement "
"operation, it will be implemented using a two-step retrieve/update."
msgstr ""

# 59123d72a2b44962a2621cf32bfd6143
#: ../../topics/cache.txt:793
msgid "Cache key prefixing"
msgstr ""

# 538923c49b3a4ba2be6a12d2d174ca7f
#: ../../topics/cache.txt:795
msgid ""
"If you are sharing a cache instance between servers, or between your "
"production and development environments, it's possible for data cached by "
"one server to be used by another server. If the format of cached data is "
"different between servers, this can lead to some very hard to diagnose "
"problems."
msgstr ""

# e3a839641b8146a4a82869818d73c0ce
#: ../../topics/cache.txt:801
msgid ""
"To prevent this, Django provides the ability to prefix all cache keys used "
"by a server. When a particular cache key is saved or retrieved, Django will "
"automatically prefix the cache key with the value of the :setting:"
"`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""

# 027846ac6a454d0580975e754c5cc368
#: ../../topics/cache.txt:806
msgid ""
"By ensuring each Django instance has a different :setting:`KEY_PREFIX "
"<CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in "
"cache values."
msgstr ""

# 8cd99e87421b4c1eb32b1a6d5c2ba553
#: ../../topics/cache.txt:813
msgid "Cache versioning"
msgstr ""

# 66fef3e016624f008a23c980deb7966b
#: ../../topics/cache.txt:815
msgid ""
"When you change running code that uses cached values, you may need to purge "
"any existing cached values. The easiest way to do this is to flush the "
"entire cache, but this can lead to the loss of cache values that are still "
"valid and useful."
msgstr ""

# 11f9742da7a94792b646d800288938fc
#: ../../topics/cache.txt:820
msgid ""
"Django provides a better way to target individual cache values. Django's "
"cache framework has a system-wide version identifier, specified using the :"
"setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting "
"is automatically combined with the cache prefix and the user-provided cache "
"key to obtain the final cache key."
msgstr ""

# 09ed9a7e9ce34a56bb0f78d5d64f57ed
#: ../../topics/cache.txt:826
msgid ""
"By default, any key request will automatically include the site default "
"cache key version. However, the primitive cache functions all include a "
"``version`` argument, so you can specify a particular cache key version to "
"set or get. For example::"
msgstr ""

# caaa261bcdcc4926825aab1c172d01e9
#: ../../topics/cache.txt:840
msgid ""
"The version of a specific key can be incremented and decremented using the "
"``incr_version()`` and ``decr_version()`` methods. This enables specific "
"keys to be bumped to a new version, leaving other keys unaffected. "
"Continuing our previous example::"
msgstr ""

# f94b0a3fc58249eb929df8b01fb082ca
#: ../../topics/cache.txt:860
msgid "Cache key transformation"
msgstr ""

# c319c39f1f9344e39564ff1660f7092c
#: ../../topics/cache.txt:862
msgid ""
"As described in the previous two sections, the cache key provided by a user "
"is not used verbatim -- it is combined with the cache prefix and key version "
"to provide a final cache key. By default, the three parts are joined using "
"colons to produce a final string::"
msgstr ""

# 5e82987ba05b46a89d4ca909d94bb6a4
#: ../../topics/cache.txt:870
msgid ""
"If you want to combine the parts in different ways, or apply other "
"processing to the final key (e.g., taking a hash digest of the key parts), "
"you can provide a custom key function."
msgstr ""

# 56486f19ed7347c0a7c9c5a2cd1b8c02
#: ../../topics/cache.txt:874
msgid ""
"The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a "
"dotted-path to a function matching the prototype of ``make_key()`` above. If "
"provided, this custom key function will be used instead of the default key "
"combining function."
msgstr ""

# 51117fd065074596b9ea47aba4ec7fc7
#: ../../topics/cache.txt:880
msgid "Cache key warnings"
msgstr ""

# 94fbbec12994439c86ce0709007989cf
#: ../../topics/cache.txt:882
msgid ""
"Memcached, the most commonly-used production cache backend, does not allow "
"cache keys longer than 250 characters or containing whitespace or control "
"characters, and using such keys will cause an exception. To encourage cache-"
"portable code and minimize unpleasant surprises, the other built-in cache "
"backends issue a warning (``django.core.cache.backends.base."
"CacheKeyWarning``) if a key is used that would cause an error on memcached."
msgstr ""

# ed12248710f3494a9de91b9fffe450de
#: ../../topics/cache.txt:889
msgid ""
"If you are using a production backend that can accept a wider range of keys "
"(a custom backend, or one of the non-memcached built-in backends), and want "
"to use this wider range without warnings, you can silence "
"``CacheKeyWarning`` with this code in the ``management`` module of one of "
"your :setting:`INSTALLED_APPS`::"
msgstr ""

# 644466d8f16045f0bbbc63380f96eb75
#: ../../topics/cache.txt:901
msgid ""
"If you want to instead provide custom key validation logic for one of the "
"built-in backends, you can subclass it, override just the ``validate_key`` "
"method, and follow the instructions for `using a custom cache backend`_. For "
"instance, to do this for the ``locmem`` backend, put this code in a module::"
msgstr ""

# e87a9dfac4b44794a64e77f29257b848
#: ../../topics/cache.txt:913
msgid ""
"...and use the dotted Python path to this class in the :setting:`BACKEND "
"<CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""

# 65087a8ced5740de8e4254f5520381d8
#: ../../topics/cache.txt:917
msgid "Upstream caches"
msgstr ""

# 6dbf5af260114729b56f87172b4d9e80
#: ../../topics/cache.txt:919
msgid ""
"So far, this document has focused on caching your *own* data. But another "
"type of caching is relevant to Web development, too: caching performed by "
"\"upstream\" caches. These are systems that cache pages for users even "
"before the request reaches your Web site."
msgstr ""

# b836c8a057e84beb8621ae20de7bd434
#: ../../topics/cache.txt:924
msgid "Here are a few examples of upstream caches:"
msgstr ""

# fbe6c516be8c4b8891a5641272647f5e
#: ../../topics/cache.txt:926
msgid ""
"Your ISP may cache certain pages, so if you requested a page from http://"
"example.com/, your ISP would send you the page without having to access "
"example.com directly. The maintainers of example.com have no knowledge of "
"this caching; the ISP sits between example.com and your Web browser, "
"handling all of the caching transparently."
msgstr ""

# f800886811a444c29f6a4bb5d58d6431
#: ../../topics/cache.txt:932
msgid ""
"Your Django Web site may sit behind a *proxy cache*, such as Squid Web Proxy "
"Cache (http://www.squid-cache.org/), that caches pages for performance. In "
"this case, each request first would be handled by the proxy, and it would be "
"passed to your application only if needed."
msgstr ""

# 43b90ed6e3d74717a793dc3646143b4a
#: ../../topics/cache.txt:937
msgid ""
"Your Web browser caches pages, too. If a Web page sends out the appropriate "
"headers, your browser will use the local cached copy for subsequent requests "
"to that page, without even contacting the Web page again to see whether it "
"has changed."
msgstr ""

# 7b405427b6224865b3dcad85738edab3
#: ../../topics/cache.txt:942
msgid ""
"Upstream caching is a nice efficiency boost, but there's a danger to it: "
"Many Web pages' contents differ based on authentication and a host of other "
"variables, and cache systems that blindly save pages based purely on URLs "
"could expose incorrect or sensitive data to subsequent visitors to those "
"pages."
msgstr ""

# 9d68a4adcd1a44f2a22fd477b87a80cd
#: ../../topics/cache.txt:947
msgid ""
"For example, say you operate a Web email system, and the contents of the "
"\"inbox\" page obviously depend on which user is logged in. If an ISP "
"blindly cached your site, then the first user who logged in through that ISP "
"would have his user-specific inbox page cached for subsequent visitors to "
"the site. That's not cool."
msgstr ""

# e204cdeed9e143109bd5f74bf6415c79
#: ../../topics/cache.txt:953
msgid ""
"Fortunately, HTTP provides a solution to this problem. A number of HTTP "
"headers exist to instruct upstream caches to differ their cache contents "
"depending on designated variables, and to tell caching mechanisms not to "
"cache particular pages. We'll look at some of these headers in the sections "
"that follow."
msgstr ""

# 82fa434e971849d1925a18b471ba7586
#: ../../topics/cache.txt:961
msgid "Using Vary headers"
msgstr ""

# 5fd7b35322b54df98e8868ae9107451c
#: ../../topics/cache.txt:963
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key. For example, if the contents "
"of a Web page depend on a user's language preference, the page is said to "
"\"vary on language.\""
msgstr ""

# b275d08d4ffe4f5ba01b0d7fe8bc193d
#: ../../topics/cache.txt:968
msgid ""
"By default, Django's cache system creates its cache keys using the requested "
"path and query -- e.g., ``\"/stories/2005/?order_by=author\"``. This means "
"every request to that URL will use the same cached version, regardless of "
"user-agent differences such as cookies or language preferences. However, if "
"this page produces different content based on some difference in request "
"headers -- such as a cookie, or a language, or a user-agent -- you'll need "
"to use the ``Vary`` header to tell caching mechanisms that the page output "
"depends on those things."
msgstr ""

# 9b2201b814cc4f8b95c4e1f559830a95
#: ../../topics/cache.txt:976
msgid ""
"To do this in Django, use the convenient ``vary_on_headers`` view decorator, "
"like so::"
msgstr ""

# d2bcd00af91849769c9f58730cd062e2
#: ../../topics/cache.txt:985
msgid ""
"In this case, a caching mechanism (such as Django's own cache middleware) "
"will cache a separate version of the page for each unique user-agent."
msgstr ""

# 6a7a0b6b938f4de3bb60c63537f75508
#: ../../topics/cache.txt:988
msgid ""
"The advantage to using the ``vary_on_headers`` decorator rather than "
"manually setting the ``Vary`` header (using something like "
"``response['Vary'] = 'user-agent'``) is that the decorator *adds* to the "
"``Vary`` header (which may already exist), rather than setting it from "
"scratch and potentially overriding anything that was already in there."
msgstr ""

# 527393eee3b449e79df6f59653e85855
#: ../../topics/cache.txt:994
msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr ""

# 1367fe2c4cc447a5ad8bedefd5c0c378
#: ../../topics/cache.txt:1000
msgid ""
"This tells upstream caches to vary on *both*, which means each combination "
"of user-agent and cookie will get its own cache value. For example, a "
"request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` "
"will be considered different from a request with the user-agent ``Mozilla`` "
"and the cookie value ``foo=ham``."
msgstr ""

# da17aa89959145d6bd9a4d9aeb6a1fe6
#: ../../topics/cache.txt:1006
msgid ""
"Because varying on cookie is so common, there's a ``vary_on_cookie`` "
"decorator. These two views are equivalent::"
msgstr ""

# fa6883817d194df1a17f9d8c60f5b742
#: ../../topics/cache.txt:1017
msgid ""
"The headers you pass to ``vary_on_headers`` are not case sensitive; ``\"User-"
"Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""

# 8093f67040254037bb72c217cd8c1e22
#: ../../topics/cache.txt:1020
msgid ""
"You can also use a helper function, ``django.utils.cache."
"patch_vary_headers``, directly. This function sets, or adds to, the ``Vary "
"header``. For example::"
msgstr ""

# 79f2403b3a124504bf8310c8500f42a1
#: ../../topics/cache.txt:1031
msgid ""
"``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance "
"as its first argument and a list/tuple of case-insensitive header names as "
"its second argument."
msgstr ""

# 8a2514f9fef946cd8f2496117a98328b
#: ../../topics/cache.txt:1035
msgid "For more on Vary headers, see the `official Vary spec`_."
msgstr ""

# 92a5895d275f48b698e19e1451955ae4
#: ../../topics/cache.txt:1040
msgid "Controlling cache: Using other headers"
msgstr ""

# 68baf7b2831148979843d081b65da212
#: ../../topics/cache.txt:1042
msgid ""
"Other problems with caching are the privacy of data and the question of "
"where data should be stored in a cascade of caches."
msgstr ""

# d66024174cf94700a203edd1cb0b4df8
#: ../../topics/cache.txt:1045
msgid ""
"A user usually faces two kinds of caches: his or her own browser cache (a "
"private cache) and his or her provider's cache (a public cache). A public "
"cache is used by multiple users and controlled by someone else. This poses "
"problems with sensitive data--you don't want, say, your bank account number "
"stored in a public cache. So Web applications need a way to tell caches "
"which data is private and which is public."
msgstr ""

# 19aecc7d34804135aacc49c27b703cde
#: ../../topics/cache.txt:1052
msgid ""
"The solution is to indicate a page's cache should be \"private.\" To do this "
"in Django, use the ``cache_control`` view decorator. Example::"
msgstr ""

# 64235a5e59974e39b16fe015196e46b0
#: ../../topics/cache.txt:1061
msgid ""
"This decorator takes care of sending out the appropriate HTTP header behind "
"the scenes."
msgstr ""

# 81e1d58a4b2245778ab7dd74034c723b
#: ../../topics/cache.txt:1064
msgid ""
"Note that the cache control settings \"private\" and \"public\" are mutually "
"exclusive. The decorator ensures that the \"public\" directive is removed if "
"\"private\" should be set (and vice versa). An example use of the two "
"directives would be a blog site that offers both private and public entries. "
"Public entries may be cached on any shared cache. The following code uses "
"``patch_cache_control``, the manual way to modify the cache control header "
"(it is internally called by the ``cache_control`` decorator)::"
msgstr ""

# d533b167b7a4469db5b2feb17e745028
#: ../../topics/cache.txt:1086
msgid ""
"There are a few other ways to control cache parameters. For example, HTTP "
"allows applications to do the following:"
msgstr ""

# 17c61d36b06a45d0a9e8b890c8145df0
#: ../../topics/cache.txt:1089
msgid "Define the maximum time a page should be cached."
msgstr ""

# edc8388ecb7b4fac892c560cc261ab21
#: ../../topics/cache.txt:1091
msgid ""
"Specify whether a cache should always check for newer versions, only "
"delivering the cached content when there are no changes. (Some caches might "
"deliver cached content even if the server page changed, simply because the "
"cache copy isn't yet expired.)"
msgstr ""

# 8ac071c02e0448a0bce22dcb2d21138b
#: ../../topics/cache.txt:1096
msgid ""
"In Django, use the ``cache_control`` view decorator to specify these cache "
"parameters. In this example, ``cache_control`` tells caches to revalidate "
"the cache on every access and to store cached versions for, at most, 3,600 "
"seconds::"
msgstr ""

# b17542567c024a2db7adf971cde10354
#: ../../topics/cache.txt:1106
msgid ""
"Any valid ``Cache-Control`` HTTP directive is valid in ``cache_control()``. "
"Here's a full list:"
msgstr ""

# 050155cb8d344c8e9ea73bfeb60d1757
#: ../../topics/cache.txt:1109
msgid "``public=True``"
msgstr ""

# f26971d7a25647db97a0bde402a1436a
#: ../../topics/cache.txt:1110
msgid "``private=True``"
msgstr ""

# c5b3eb4661d04feda52c1a7e272446d7
#: ../../topics/cache.txt:1111
msgid "``no_cache=True``"
msgstr ""

# 4bfc4b48b0fd4c19a5ddefcdb8d83d5a
#: ../../topics/cache.txt:1112
msgid "``no_transform=True``"
msgstr ""

# d213f55633ec447d866e9204d5ad0a05
#: ../../topics/cache.txt:1113
msgid "``must_revalidate=True``"
msgstr ""

# a74855a1c8164a9c8320cc9917eeccb1
#: ../../topics/cache.txt:1114
msgid "``proxy_revalidate=True``"
msgstr ""

# 54fbbda35fad4048b9e470e82dffe62f
#: ../../topics/cache.txt:1115
msgid "``max_age=num_seconds``"
msgstr ""

# b7733aea3c154e3faec3856671148caa
#: ../../topics/cache.txt:1116
msgid "``s_maxage=num_seconds``"
msgstr ""

# ab8dd502308d4253aa4024918716f731
#: ../../topics/cache.txt:1118
msgid ""
"For explanation of Cache-Control HTTP directives, see the `Cache-Control "
"spec`_."
msgstr ""

# 63ae5526865d4bda849401bf3373de5a
#: ../../topics/cache.txt:1120
msgid ""
"(Note that the caching middleware already sets the cache header's max-age "
"with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. If you "
"use a custom ``max_age`` in a ``cache_control`` decorator, the decorator "
"will take precedence, and the header values will be merged correctly.)"
msgstr ""

# 3d3711aee298477a82ba9a38911052f7
#: ../../topics/cache.txt:1125
msgid ""
"If you want to use headers to disable caching altogether, ``django.views."
"decorators.cache.never_cache`` is a view decorator that adds headers to "
"ensure the response won't be cached by browsers or other caches. Example::"
msgstr ""

# 33577f3d64bd456098afe48a2c15ff92
#: ../../topics/cache.txt:1139
msgid "Other optimizations"
msgstr ""

# 693af2875446491b9eb42f61bb87c72c
#: ../../topics/cache.txt:1141
msgid ""
"Django comes with a few other pieces of middleware that can help optimize "
"your site's performance:"
msgstr ""

# 2ad500f2d142498ca7dbd46b6cbb4bd4
#: ../../topics/cache.txt:1144
msgid ""
"``django.middleware.http.ConditionalGetMiddleware`` adds support for modern "
"browsers to conditionally GET responses based on the ``ETag`` and ``Last-"
"Modified`` headers."
msgstr ""

# 46443bced99e42109776eb1c06cfb5cf
#: ../../topics/cache.txt:1149
msgid ""
":class:`django.middleware.gzip.GZipMiddleware` compresses responses for all "
"modern browsers, saving bandwidth and transfer time. Be warned, however, "
"that compression techniques like ``GZipMiddleware`` are subject to attacks. "
"See the warning in :class:`~django.middleware.gzip.GZipMiddleware` for "
"details."
msgstr ""

# d8f3a1324b0f4f5bb7e2c78d0c2a366a
#: ../../topics/cache.txt:1152
msgid "Order of MIDDLEWARE_CLASSES"
msgstr ""

# a922d4118160480c838e6c63e2bcf464
#: ../../topics/cache.txt:1154
msgid ""
"If you use caching middleware, it's important to put each half in the right "
"place within the :setting:`MIDDLEWARE_CLASSES` setting. That's because the "
"cache middleware needs to know which headers by which to vary the cache "
"storage. Middleware always adds something to the ``Vary`` response header "
"when it can."
msgstr ""

# 2decccb5978b499f8224eae7c1d6a3da
#: ../../topics/cache.txt:1159
msgid ""
"``UpdateCacheMiddleware`` runs during the response phase, where middleware "
"is run in reverse order, so an item at the top of the list runs *last* "
"during the response phase. Thus, you need to make sure that "
"``UpdateCacheMiddleware`` appears *before* any other middleware that might "
"add something to the ``Vary`` header. The following middleware modules do so:"
msgstr ""

# a20c114b40014b579cb92334b44d160f
#: ../../topics/cache.txt:1165
msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr ""

# 742f62de253c437ab24ae88cc5d1e567
#: ../../topics/cache.txt:1166
msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr ""

# a90d88af67c648dba6298601acd1f589
#: ../../topics/cache.txt:1167
msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr ""

# 6ae71e1171d14c1494b2c99a221969dc
#: ../../topics/cache.txt:1169
msgid ""
"``FetchFromCacheMiddleware``, on the other hand, runs during the request "
"phase, where middleware is applied first-to-last, so an item at the top of "
"the list runs *first* during the request phase. The "
"``FetchFromCacheMiddleware`` also needs to run after other middleware "
"updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after* "
"any item that does so."
msgstr ""

# 006142c403f0420ba2aa287963ffeaad
#: ../../topics/class-based-views/generic-display.txt:5
msgid "Class-based generic views"
msgstr ""

# 4d7f5d7bc82542b59f60f8084f7873e4
#: ../../topics/class-based-views/generic-display.txt:7
msgid ""
"Writing Web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at "
"the model and template layers, but Web developers also experience this "
"boredom at the view level."
msgstr ""

# 06f4b879824842ff9f95b6293840b700
#: ../../topics/class-based-views/generic-display.txt:12
msgid ""
"Django's *generic views* were developed to ease that pain. They take certain "
"common idioms and patterns found in view development and abstract them so "
"that you can quickly write common views of data without having to write too "
"much code."
msgstr ""

# 94ac3c6f1fe648848c84dc38477c0636
#: ../../topics/class-based-views/generic-display.txt:17
msgid ""
"We can recognize certain common tasks, like displaying a list of objects, "
"and write code that displays a list of *any* object. Then the model in "
"question can be passed as an extra argument to the URLconf."
msgstr ""

# d4561fcc43ae47858a8206cd4ea93c1a
#: ../../topics/class-based-views/generic-display.txt:21
msgid "Django ships with generic views to do the following:"
msgstr ""

# 5b388e84736445abb15bf82077f71a01
#: ../../topics/class-based-views/generic-display.txt:23
msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``TalkListView`` and a "
"``RegisteredUserListView`` would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""

# 16eebf493d9f480db814270cd9e8c7f4
#: ../../topics/class-based-views/generic-display.txt:28
msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages."
msgstr ""

# fe77b2251b98437e9666daca269b57df
#: ../../topics/class-based-views/generic-display.txt:31
msgid ""
"Allow users to create, update, and delete objects -- with or without "
"authorization."
msgstr ""

# 91208d08f9664667a5c43937997285ed
#: ../../topics/class-based-views/generic-display.txt:34
msgid ""
"Taken together, these views provide easy interfaces to perform the most "
"common tasks developers encounter."
msgstr ""

# 4a9b37a52f9e42a09700ad7607b8c321
#: ../../topics/class-based-views/generic-display.txt:39
msgid "Extending generic views"
msgstr ""

# a0de8f4448aa4f0784d6d09831e6d70a
#: ../../topics/class-based-views/generic-display.txt:41
msgid ""
"There's no question that using generic views can speed up development "
"substantially. In most projects, however, there comes a moment when the "
"generic views no longer suffice. Indeed, the most common question asked by "
"new Django developers is how to make generic views handle a wider array of "
"situations."
msgstr ""

# b3ad9730986f46cba0e60769a0939bfa
#: ../../topics/class-based-views/generic-display.txt:47
msgid ""
"This is one of the reasons generic views were redesigned for the 1.3 release "
"- previously, they were just view functions with a bewildering array of "
"options; now, rather than passing in a large amount of configuration in the "
"URLconf, the recommended way to extend generic views is to subclass them, "
"and override their attributes or methods."
msgstr ""

# 4f50fd2a609a455fa2e01a218dde95e2
#: ../../topics/class-based-views/generic-display.txt:53
msgid ""
"That said, generic views will have a limit. If you find you're struggling to "
"implement your view as a subclass of a generic view, then you may find it "
"more effective to write just the code you need, using your own class-based "
"or functional views."
msgstr ""

# 092685e9c18d43cc8da70c310baf85b1
#: ../../topics/class-based-views/generic-display.txt:58
msgid ""
"More examples of generic views are available in some third party "
"applications, or you could write your own as needed."
msgstr ""

# c09fca73c6514b2f8a79527ea3c2b591
#: ../../topics/class-based-views/generic-display.txt:63
msgid "Generic views of objects"
msgstr ""

# 3c921767ee0f42a39be80828b514756e
#: ../../topics/class-based-views/generic-display.txt:65
msgid ""
":class:`~django.views.generic.base.TemplateView` certainly is useful, but "
"Django's generic views really shine when it comes to presenting views of "
"your database content. Because it's such a common task, Django comes with a "
"handful of built-in generic views that make generating list and detail views "
"of objects incredibly easy."
msgstr ""

# 34aa5ac8a8b045ba9332098d3a8b9d10
#: ../../topics/class-based-views/generic-display.txt:71
msgid ""
"Let's start by looking at some examples of showing a list of objects or an "
"individual object."
msgstr ""

# a5393c87e73f451ca833af202f285cd4
#: ../../topics/class-based-views/generic-display.txt:76
msgid "We'll be using these models::"
msgstr ""

# 4390e85f1dae49a48859fad1ce250062
#: ../../topics/class-based-views/generic-display.txt:101
msgid "Now we need to define a view::"
msgstr ""

# 8c2e0c0386e54c609155b8dddee63f13
#: ../../topics/class-based-views/generic-display.txt:110
msgid "Finally hook that view into your urls::"
msgstr ""

# 1d04ecb22b384b5592a0ea87a1f916b4
#: ../../topics/class-based-views/generic-display.txt:120
msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the view which template to use "
"by adding a ``template_name`` attribute to the view, but in the absence of "
"an explicit template Django will infer one from the object's name. In this "
"case, the inferred template will be ``\"books/publisher_list.html\"`` -- the "
"\"books\" part comes from the name of the app that defines the model, while "
"the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""

# 4c781f355bd149f799c299a355482071
#: ../../topics/class-based-views/generic-display.txt:130
msgid ""
"Thus, when (for example) the :class:`django.template.loaders.app_directories."
"Loader` template loader is enabled in :setting:`TEMPLATE_LOADERS`, a "
"template location could be: /path/to/project/books/templates/books/"
"publisher_list.html"
msgstr ""

# bf096dbb6d294c0497dcfdec97cf5148
#: ../../topics/class-based-views/generic-display.txt:144
msgid ""
"This template will be rendered against a context containing a variable "
"called ``object_list`` that contains all the publisher objects. A very "
"simple template might look like the following:"
msgstr ""

# fc47850b7724448e85547e846b304103
#: ../../topics/class-based-views/generic-display.txt:152
msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the attributes set on the generic view. The :doc:`generic "
"views reference</ref/class-based-views/index>` documents all the generic "
"views and their options in detail; the rest of this document will consider "
"some of the common ways you might customize and extend generic views."
msgstr ""

# 06ae5958bfad4e328edb529c87a1d58f
#: ../../topics/class-based-views/generic-display.txt:160
msgid "Making \"friendly\" template contexts"
msgstr ""

# 32775167ecce4514bdd285d47b350472
#: ../../topics/class-based-views/generic-display.txt:164
msgid ""
"You might have noticed that our sample publisher list template stores all "
"the publishers in a variable named ``object_list``. While this works just "
"fine, it isn't all that \"friendly\" to template authors: they have to "
"\"just know\" that they're dealing with publishers here."
msgstr ""

# 6bcba222d10f45fc82d09940aed37cfa
#: ../../topics/class-based-views/generic-display.txt:169
msgid ""
"Well, if you're dealing with a model object, this is already done for you. "
"When you are dealing with an object or queryset, Django is able to populate "
"the context using the lower cased version of the model class' name. This is "
"provided in addition to the default ``object_list`` entry, but contains "
"exactly the same data, i.e. ``publisher_list``."
msgstr ""

# c4e7022c5c844ae8b8033d74909690c5
#: ../../topics/class-based-views/generic-display.txt:175
msgid ""
"If this still isn't a good match, you can manually set the name of the "
"context variable. The ``context_object_name`` attribute on a generic view "
"specifies the context variable to use::"
msgstr ""

# 0c7b6acb4e7241f3844cd4024c17db89
#: ../../topics/class-based-views/generic-display.txt:187
msgid ""
"Providing a useful ``context_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""

# 2d5b25876cf84c41b5747a776c0aafef
#: ../../topics/class-based-views/generic-display.txt:192
msgid "Adding extra context"
msgstr ""

# 040231337a06475fb284b5df513acac2
#: ../../topics/class-based-views/generic-display.txt:201
msgid ""
"Often you simply need to present some extra information beyond that provided "
"by the generic view. For example, think of showing a list of all the books "
"on each publisher detail page. The :class:`~django.views.generic.detail."
"DetailView` generic view provides the publisher to the context, but how do "
"we get additional information in that template?"
msgstr ""

# 1e7a914df8b04ce493592701bb383698
#: ../../topics/class-based-views/generic-display.txt:208
msgid ""
"The answer is to subclass :class:`~django.views.generic.detail.DetailView` "
"and provide your own implementation of the ``get_context_data`` method. The "
"default implementation simply adds the object being displayed to the "
"template, but you can override it to send more::"
msgstr ""

# 7d54890326114135a2e58d121a1f995b
#: ../../topics/class-based-views/generic-display.txt:229
msgid ""
"Generally, ``get_context_data`` will merge the context data of all parent "
"classes with those of the current class. To preserve this behavior in your "
"own classes where you want to alter the context, you should be sure to call "
"``get_context_data`` on the super class. When no two classes try to define "
"the same key, this will give the expected results. However if any class "
"attempts to override a key after parent classes have set it (after the call "
"to super), any children of that class will also need to explictly set it "
"after super if they want to be sure to override all parents. If you're "
"having trouble, review the method resolution order of your view."
msgstr ""

# dd820917b3cf4c10bd7e73e9a7d94d00
#: ../../topics/class-based-views/generic-display.txt:238
msgid "Viewing subsets of objects"
msgstr ""

# bb7dc3a1e1504baba55d8c6f8256643d
#: ../../topics/class-based-views/generic-display.txt:240
msgid ""
"Now let's take a closer look at the ``model`` argument we've been using all "
"along. The ``model`` argument, which specifies the database model that the "
"view will operate upon, is available on all the generic views that operate "
"on a single object or a collection of objects. However, the ``model`` "
"argument is not the only way to specify the objects that the view will "
"operate upon -- you can also specify the list of objects using the "
"``queryset`` argument::"
msgstr ""

# dca388bd4bb84ff2b5d9dbfbe017d310
#: ../../topics/class-based-views/generic-display.txt:256
msgid ""
"Specifying ``model = Publisher`` is really just shorthand for saying "
"``queryset = Publisher.objects.all()``. However, by using ``queryset`` to "
"define a filtered list of objects you can be more specific about the objects "
"that will be visible in the view (see :doc:`/topics/db/queries` for more "
"information about :class:`~django.db.models.query.QuerySet` objects, and see "
"the :doc:`class-based views reference </ref/class-based-views/index>` for "
"the complete details)."
msgstr ""

# 1f1e36cf3938422fa9c03700a4207a59
#: ../../topics/class-based-views/generic-display.txt:264
msgid ""
"To pick a simple example, we might want to order a list of books by "
"publication date, with the most recent first::"
msgstr ""

# 5b8ebe4c8ffb4e61ae1664433565c34c
#: ../../topics/class-based-views/generic-display.txt:274
msgid ""
"That's a pretty simple example, but it illustrates the idea nicely. Of "
"course, you'll usually want to do more than just reorder objects. If you "
"want to present a list of books by a particular publisher, you can use the "
"same technique::"
msgstr ""

# b89ade3ff63b463b9723f2a98bd2a524
#: ../../topics/class-based-views/generic-display.txt:288
msgid ""
"Notice that along with a filtered ``queryset``, we're also using a custom "
"template name. If we didn't, the generic view would use the same template as "
"the \"vanilla\" object list, which might not be what we want."
msgstr ""

# 880759b4ca874d9bbf3abe94b2757f77
#: ../../topics/class-based-views/generic-display.txt:292
msgid ""
"Also notice that this isn't a very elegant way of doing publisher-specific "
"books. If we want to add another publisher page, we'd need another handful "
"of lines in the URLconf, and more than a few publishers would get "
"unreasonable. We'll deal with this problem in the next section."
msgstr ""

# 745eb3e59759443d98e2317b1baf21e2
#: ../../topics/class-based-views/generic-display.txt:299
msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-"
"views reference</ref/class-based-views/index>` for more details."
msgstr ""

# 540ce0798fe747f5a44e5ec6dad8bcb1
#: ../../topics/class-based-views/generic-display.txt:307
msgid "Dynamic filtering"
msgstr ""

# 979968addb7d4d7dbfaa71a70fd68189
#: ../../topics/class-based-views/generic-display.txt:309
msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher?"
msgstr ""

# 4236d63399444b628d100b24c1177734
#: ../../topics/class-based-views/generic-display.txt:314
msgid ""
"Handily, the ``ListView`` has a :meth:`~django.views.generic.list."
"MultipleObjectMixin.get_queryset` method we can override. Previously, it has "
"just been returning the value of the ``queryset`` attribute, but now we can "
"add more logic."
msgstr ""

# 6b3c3890b1c64bf281087d9939d450fb
#: ../../topics/class-based-views/generic-display.txt:319
msgid ""
"The key part to making this work is that when class-based views are called, "
"various useful things are stored on ``self``; as well as the request (``self."
"request``) this includes the positional (``self.args``) and name-based "
"(``self.kwargs``) arguments captured according to the URLconf."
msgstr ""

# f585511b8ea14515aab3b10ec2581727
#: ../../topics/class-based-views/generic-display.txt:324
msgid "Here, we have a URLconf with a single captured group::"
msgstr ""

# bee714941a08473cbf1fc036172a6e90
#: ../../topics/class-based-views/generic-display.txt:333
msgid "Next, we'll write the ``PublisherBookList`` view itself::"
msgstr ""

# 7882ed23c974419da836ec0d0cff7e7b
#: ../../topics/class-based-views/generic-display.txt:348
msgid ""
"As you can see, it's quite easy to add more logic to the queryset selection; "
"if we wanted, we could use ``self.request.user`` to filter using the current "
"user, or other more complex logic."
msgstr ""

# 50edebac1bc44a0ca10dd9032f3fb571
#: ../../topics/class-based-views/generic-display.txt:352
msgid ""
"We can also add the publisher into the context at the same time, so we can "
"use it in the template::"
msgstr ""

# b920e309f1714afb91717f5a3e34d6b2
#: ../../topics/class-based-views/generic-display.txt:367
msgid "Performing extra work"
msgstr ""

# 1713cdbd5af74cbfa2bba7bd7afce0c9
#: ../../topics/class-based-views/generic-display.txt:369
msgid ""
"The last common pattern we'll look at involves doing some extra work before "
"or after calling the generic view."
msgstr ""

# 1fd22d6015fd4a97b6e3f92ba46cfd9f
#: ../../topics/class-based-views/generic-display.txt:376
msgid ""
"Imagine we had a ``last_accessed`` field on our ``Author`` model that we "
"were using to keep track of the last time anybody looked at that author::"
msgstr ""

# b2d20884ebee4f9f98375ff042ce37a3
#: ../../topics/class-based-views/generic-display.txt:384
msgid ""
"The generic ``DetailView`` class, of course, wouldn't know anything about "
"this field, but once again we could easily write a custom view to keep that "
"field updated."
msgstr ""

# 163bd616e88f410e87bf0f89a27eeb83
#: ../../topics/class-based-views/generic-display.txt:388
msgid ""
"First, we'd need to add an author detail bit in the URLconf to point to a "
"custom view::"
msgstr ""

# 254f00e543f74ad79033ad3d4b25e316
#: ../../topics/class-based-views/generic-display.txt:398
msgid ""
"Then we'd write our new view -- ``get_object`` is the method that retrieves "
"the object -- so we simply override it and wrap the call::"
msgstr ""

# 43ce0a686d624d078fe1f787f8dcd966
#: ../../topics/class-based-views/generic-display.txt:421
msgid ""
"The URLconf here uses the named group ``pk`` - this name is the default name "
"that ``DetailView`` uses to find the value of the primary key used to filter "
"the queryset."
msgstr ""

# 209acaa323cf4ef7a8cc3188a08dbb5d
#: ../../topics/class-based-views/generic-display.txt:425
msgid ""
"If you want to call the group something else, you can set ``pk_url_kwarg`` "
"on the view. More details can be found in the reference for :class:`~django."
"views.generic.detail.DetailView`"
msgstr ""

# 140f83cc10c84092a74d9adfaf249838
#: ../../topics/class-based-views/generic-editing.txt:2
msgid "Form handling with class-based views"
msgstr ""

# f1eadc2e6adc42fc8d9ca497f23cb80c
#: ../../topics/class-based-views/generic-editing.txt:4
msgid "Form processing generally has 3 paths:"
msgstr ""

# 5553d783052b44edb158ad609e4f1a0c
#: ../../topics/class-based-views/generic-editing.txt:6
msgid "Initial GET (blank or prepopulated form)"
msgstr ""

# ba0033a281fa4ad2b9d9c4498d131e0c
#: ../../topics/class-based-views/generic-editing.txt:7
msgid "POST with invalid data (typically redisplay form with errors)"
msgstr ""

# fb5e7e8af8cb4230a149ad2bd29bb366
#: ../../topics/class-based-views/generic-editing.txt:8
msgid "POST with valid data (process the data and typically redirect)"
msgstr ""

# 06737883b3ab41a3a8d2dac5ed05a73b
#: ../../topics/class-based-views/generic-editing.txt:10
msgid ""
"Implementing this yourself often results in a lot of repeated boilerplate "
"code (see :ref:`Using a form in a view<using-a-form-in-a-view>`). To help "
"avoid this, Django provides a collection of generic class-based views for "
"form processing."
msgstr ""

# 67fa564e6e784ae09cbc9648ef446388
#: ../../topics/class-based-views/generic-editing.txt:16
msgid "Basic Forms"
msgstr ""

# 36f49dbc3f4a4ded91f837d19f7f474c
#: ../../topics/class-based-views/generic-editing.txt:18
msgid "Given a simple contact form::"
msgstr ""

# f72b7ce8f3694a5abc5b7845879a490d
#: ../../topics/class-based-views/generic-editing.txt:31
msgid "The view can be constructed using a ``FormView``::"
msgstr ""

# 229a31a017bf4758bcd8d99447082371
# cff394d31b1f4305a6b1f9a899919049
# 06a4108b2caf420bb1bb5a0caf92c723
#: ../../topics/class-based-views/generic-editing.txt:48
#: ../../topics/http/urls.txt:79 ../../topics/i18n/translation.txt:1573
msgid "Notes:"
msgstr ""

# 8e7e8dee47a5437f973437c63eab3817
#: ../../topics/class-based-views/generic-editing.txt:50
msgid ""
"FormView inherits :class:`~django.views.generic.base.TemplateResponseMixin` "
"so :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"can be used here."
msgstr ""

# aebdd8633b6b4aeb964a8533a847cbbb
#: ../../topics/class-based-views/generic-editing.txt:54
msgid ""
"The default implementation for :meth:`~django.views.generic.edit.FormMixin."
"form_valid` simply redirects to the :attr:`~django.views.generic.edit."
"FormMixin.success_url`."
msgstr ""

# f503e295673140baaab844028b655fa7
#: ../../topics/class-based-views/generic-editing.txt:59
msgid "Model Forms"
msgstr ""

# 509ad338591b44e994dba3426e8024be
#: ../../topics/class-based-views/generic-editing.txt:61
msgid ""
"Generic views really shine when working with models.  These generic views "
"will automatically create a :class:`~django.forms.ModelForm`, so long as "
"they can work out which model class to use:"
msgstr ""

# 3c9c96d1778f44989f39578c881b0259
#: ../../topics/class-based-views/generic-editing.txt:65
msgid ""
"If the :attr:`~django.views.generic.edit.ModelFormMixin.model` attribute is "
"given, that model class will be used."
msgstr ""

# 959d40877ecd40128b8b810729fe81cb
#: ../../topics/class-based-views/generic-editing.txt:67
msgid ""
"If :meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` "
"returns an object, the class of that object will be used."
msgstr ""

# ffd5eeeeb2334b9ca3d1dcf5e35dba69
#: ../../topics/class-based-views/generic-editing.txt:69
msgid ""
"If a :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` is "
"given, the model for that queryset will be used."
msgstr ""

# 5edaa870a4954bb9a75565d84b8f9e3c
#: ../../topics/class-based-views/generic-editing.txt:72
msgid ""
"Model form views provide a :meth:`~django.views.generic.edit.ModelFormMixin."
"form_valid()` implementation that saves the model automatically.  You can "
"override this if you have any special requirements; see below for examples."
msgstr ""

# 9c186d3ae94b425ebd2c7a4eb12f663d
#: ../../topics/class-based-views/generic-editing.txt:77
msgid ""
"You don't even need to provide a ``success_url`` for :class:`~django.views."
"generic.edit.CreateView` or :class:`~django.views.generic.edit.UpdateView` - "
"they will use :meth:`~django.db.models.Model.get_absolute_url()` on the "
"model object if available."
msgstr ""

# a9112ee9e6644107a5da3bbdb650c7f7
#: ../../topics/class-based-views/generic-editing.txt:82
msgid ""
"If you want to use a custom :class:`~django.forms.ModelForm` (for instance "
"to add extra validation) simply set :attr:`~django.views.generic.edit."
"FormMixin.form_class` on your view."
msgstr ""

# 264848a69c4e4ba79cbbc1b9b2c6193d
#: ../../topics/class-based-views/generic-editing.txt:87
msgid ""
"When specifying a custom form class, you must still specify the model, even "
"though the :attr:`~django.views.generic.edit.FormMixin.form_class` may be a :"
"class:`~django.forms.ModelForm`."
msgstr ""

# 908affb7c92d4231b48252d59d4e5c32
#: ../../topics/class-based-views/generic-editing.txt:91
msgid ""
"First we need to add :meth:`~django.db.models.Model.get_absolute_url()` to "
"our ``Author`` class:"
msgstr ""

# 8b677699746942ce8665142c25e6e690
#: ../../topics/class-based-views/generic-editing.txt:106
msgid ""
"Then we can use :class:`CreateView` and friends to do the actual work. "
"Notice how we're just configuring the generic class-based views here; we "
"don't have to write any logic ourselves::"
msgstr ""

# 9baebcec260a4b018da406d67c97ebb4
#: ../../topics/class-based-views/generic-editing.txt:126
msgid ""
"We have to use :func:`~django.core.urlresolvers.reverse_lazy` here, not just "
"``reverse`` as the urls are not loaded when the file is imported."
msgstr ""

# be61a00459df4e52a58461580c44fa0f
#: ../../topics/class-based-views/generic-editing.txt:129
msgid "Finally, we hook these new views into the URLconf::"
msgstr ""

# 1e1ec105b07c47ac9a9ac21e6c6487ff
#: ../../topics/class-based-views/generic-editing.txt:144
msgid ""
"These views inherit :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` which uses :attr:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin.template_name_suffix` to construct "
"the :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"based on the model."
msgstr ""

# c8593d5d1aba4046ad83c0529c8fda23
#: ../../topics/class-based-views/generic-editing.txt:152
msgid "In this example:"
msgstr ""

# 92f513feb0814e9cb9fdf71add010477
#: ../../topics/class-based-views/generic-editing.txt:154
msgid ""
":class:`CreateView` and :class:`UpdateView` use ``myapp/author_form.html``"
msgstr ""

# ff214af72b6b43c7a7bf0c9ecf90b34c
#: ../../topics/class-based-views/generic-editing.txt:155
msgid ":class:`DeleteView` uses ``myapp/author_confirm_delete.html``"
msgstr ""

# 2beb970fd89a42dba8fd98808a461ead
#: ../../topics/class-based-views/generic-editing.txt:157
msgid ""
"If you wish to have separate templates for :class:`CreateView` and :class:"
"`UpdateView`, you can set either :attr:`~django.views.generic.base."
"TemplateResponseMixin.template_name` or :attr:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin.template_name_suffix` on your view class."
msgstr ""

# 1fc41a75752c41baa4dc2c0c5b68f946
#: ../../topics/class-based-views/generic-editing.txt:164
msgid "Models and request.user"
msgstr ""

# cd0780528c55448ea925e344cd80653f
#: ../../topics/class-based-views/generic-editing.txt:166
msgid ""
"To track the user that created an object using a :class:`CreateView`, you "
"can use a custom :class:`~django.forms.ModelForm` to do this. First, add the "
"foreign key relation to the model::"
msgstr ""

# 864ccfbc8fe24f4fad22d10fbfe21d5f
#: ../../topics/class-based-views/generic-editing.txt:180
msgid ""
"Create a custom :class:`~django.forms.ModelForm` in order to exclude the "
"``created_by`` field and prevent the user from editing it:"
msgstr ""

# 0df546fdda0240a4b00835a3564b8cfe
#: ../../topics/class-based-views/generic-editing.txt:194
msgid ""
"In the view, use the custom :attr:`~django.views.generic.edit.FormMixin."
"form_class` and override :meth:`~django.views.generic.edit.ModelFormMixin."
"form_valid()` to add the user::"
msgstr ""

# 6815d5e87cc2494590cdca040691bd2d
#: ../../topics/class-based-views/generic-editing.txt:212
msgid ""
"Note that you'll need to :ref:`decorate this view<decorating-class-based-"
"views>` using :func:`~django.contrib.auth.decorators.login_required`, or "
"alternatively handle unauthorized users in the :meth:`~django.views.generic."
"edit.ModelFormMixin.form_valid()`."
msgstr ""

# 653229ae5a8846faac788f67edb1b960
#: ../../topics/class-based-views/generic-editing.txt:219
msgid "AJAX example"
msgstr ""

# 1d05218f97094812b5595b6de451ec6b
#: ../../topics/class-based-views/generic-editing.txt:221
msgid ""
"Here is a simple example showing how you might go about implementing a form "
"that works for AJAX requests as well as 'normal' form POSTs::"
msgstr ""

# 1dc485cecdee452b8d7635e2b301bc69
#: ../../topics/class-based-views/index.txt:3
msgid "Class-based views"
msgstr ""

# 0f6c2e8d61c2439996f64c561a84c962
#: ../../topics/class-based-views/index.txt:5
msgid ""
"A view is a callable which takes a request and returns a response. This can "
"be more than just a function, and Django provides an example of some classes "
"which can be used as views. These allow you to structure your views and "
"reuse code by harnessing inheritance and mixins. There are also some generic "
"views for simple tasks which we'll get to later, but you may want to design "
"your own structure of reusable views which suits your use case. For full "
"details, see the :doc:`class-based views reference documentation</ref/class-"
"based-views/index>`."
msgstr ""

# 105100ec866949a4a24d46a6709a7331
#: ../../topics/class-based-views/index.txt:23
msgid "Basic examples"
msgstr ""

# f0a5345637e14aadb55646210e7986a6
#: ../../topics/class-based-views/index.txt:25
msgid ""
"Django provides base view classes which will suit a wide range of "
"applications. All views inherit from the :class:`~django.views.generic.base."
"View` class, which handles linking the view in to the URLs, HTTP method "
"dispatching and other simple features. :class:`~django.views.generic.base."
"RedirectView` is for a simple HTTP redirect, and :class:`~django.views."
"generic.base.TemplateView` extends the base class to make it also render a "
"template."
msgstr ""

# 8a101872ed7349f49fe2ce98c4fcb8a6
#: ../../topics/class-based-views/index.txt:34
msgid "Simple usage in your URLconf"
msgstr ""

# 959bcf22032945af93402c0215d9bcd8
#: ../../topics/class-based-views/index.txt:36
msgid ""
"The simplest way to use generic views is to create them directly in your "
"URLconf. If you're only changing a few simple attributes on a class-based "
"view, you can simply pass them into the :meth:`~django.views.generic.base."
"View.as_view` method call itself::"
msgstr ""

# 4e629a9d2cf540d28278b1cd566608db
#: ../../topics/class-based-views/index.txt:48
msgid ""
"Any arguments passed to :meth:`~django.views.generic.base.View.as_view` will "
"override attributes set on the class. In this example, we set "
"``template_name`` on the ``TemplateView``. A similar overriding pattern can "
"be used for the ``url`` attribute on :class:`~django.views.generic.base."
"RedirectView`."
msgstr ""

# 45a596b928b74c7d9ba2dcbd20d2cfd0
#: ../../topics/class-based-views/index.txt:55
msgid "Subclassing generic views"
msgstr ""

# 8ae8e03fe73d44ca9562151a81097ae9
#: ../../topics/class-based-views/index.txt:57
msgid ""
"The second, more powerful way to use generic views is to inherit from an "
"existing view and override attributes (such as the ``template_name``) or "
"methods (such as ``get_context_data``) in your subclass to provide new "
"values or methods. Consider, for example, a view that just displays one "
"template, ``about.html``. Django has a generic view to do this - :class:"
"`~django.views.generic.base.TemplateView` - so we can just subclass it, and "
"override the template name::"
msgstr ""

# e1bdecc8f83441ecb9f1cf6bb6b0baa1
#: ../../topics/class-based-views/index.txt:71
msgid ""
"Then we just need to add this new view into our URLconf. `~django.views."
"generic.base.TemplateView` is a class, not a function, so we point the URL "
"to the :meth:`~django.views.generic.base.View.as_view` class method instead, "
"which provides a function-like entry to class-based views::"
msgstr ""

# 4c90fe644eee4af08c82140900470bb3
#: ../../topics/class-based-views/index.txt:85
msgid ""
"For more information on how to use the built in generic views, consult the "
"next topic on :doc:`generic class based views</topics/class-based-views/"
"generic-display>`."
msgstr ""

# 7b93f40ed58b43c8a34111ef55935e1b
#: ../../topics/class-based-views/index.txt:91
msgid "Supporting other HTTP methods"
msgstr ""

# 528a30229a2b439081ee41c404ba1e75
#: ../../topics/class-based-views/index.txt:93
msgid ""
"Suppose somebody wants to access our book library over HTTP using the views "
"as an API. The API client would connect every now and then and download book "
"data for the books published since last visit. But if no new books appeared "
"since then, it is a waste of CPU time and bandwidth to fetch the books from "
"the database, render a full response and send it to the client. It might be "
"preferable to ask the API when the most recent book was published."
msgstr ""

# 5b10e134dfe047ea95dffe0144f1731a
#: ../../topics/class-based-views/index.txt:100
msgid "We map the URL to book list view in the URLconf::"
msgstr ""

# b64e01aa133d440f91c5e9551031f0b2
#: ../../topics/class-based-views/index.txt:109
msgid "And the view::"
msgstr ""

# fcbf267efc1f4ec2b65f8359f4033666
#: ../../topics/class-based-views/index.txt:125
msgid ""
"If the view is accessed from a ``GET`` request, a plain-and-simple object "
"list is returned in the response (using ``book_list.html`` template). But if "
"the client issues a ``HEAD`` request, the response has an empty body and the "
"``Last-Modified`` header indicates when the most recent book was published. "
"Based on this information, the client may or may not download the full "
"object list."
msgstr ""

# 57ec59258d274b9480fa6ed91b57e4dd
#: ../../topics/class-based-views/intro.txt:3
msgid "Introduction to Class-based views"
msgstr ""

# 5c64199671e34ee39b1c7962ab636380
#: ../../topics/class-based-views/intro.txt:5
msgid ""
"Class-based views provide an alternative way to implement views as Python "
"objects instead of functions. They do not replace function-based views, but "
"have certain differences and advantages when compared to function-based "
"views:"
msgstr ""

# 08f7dbd228cb4234bbe772997084c603
#: ../../topics/class-based-views/intro.txt:9
msgid ""
"Organization of code related to specific HTTP methods (``GET``, ``POST``, "
"etc) can be addressed by separate methods instead of conditional branching."
msgstr ""

# fc77b197d98b4a4c874f72ed8546a201
#: ../../topics/class-based-views/intro.txt:12
msgid ""
"Object oriented techniques such as mixins (multiple inheritance) can be used "
"to factor code into reusable components."
msgstr ""

# 4c1f280f7b694b719f779f3f0e15cc01
#: ../../topics/class-based-views/intro.txt:16
msgid ""
"The relationship and history of generic views, class-based views, and class-"
"based generic views"
msgstr ""

# 5a0f17e083be44aa9bcb596521ffa0ed
#: ../../topics/class-based-views/intro.txt:18
msgid ""
"In the beginning there was only the view function contract, Django passed "
"your function an :class:`~django.http.HttpRequest` and expected back an :"
"class:`~django.http.HttpResponse`. This was the extent of what Django "
"provided."
msgstr ""

# 252d576fe3224999b1e102829aba5b9b
#: ../../topics/class-based-views/intro.txt:22
msgid ""
"Early on it was recognized that there were common idioms and patterns found "
"in view development. Function-based generic views were introduced to "
"abstract these patterns and ease view development for the common cases."
msgstr ""

# 6b6775d4b83744d3948c9761e2d68e8d
#: ../../topics/class-based-views/intro.txt:26
msgid ""
"The problem with function-based generic views is that while they covered the "
"simple cases well, there was no way to extend or customize them beyond some "
"simple configuration options, limiting their usefulness in many real-world "
"applications."
msgstr ""

# 54ae7e63ee49436a8eeb1bce06bb3462
#: ../../topics/class-based-views/intro.txt:31
msgid ""
"Class-based generic views were created with the same objective as function-"
"based generic views, to make view development easier. However, the way the "
"solution is implemented, through the use of mixins, provides a toolkit that "
"results in class-based generic views being more extensible and flexible than "
"their function-based counterparts."
msgstr ""

# a4fdc2cec75845228f27158ed949a275
#: ../../topics/class-based-views/intro.txt:37
msgid ""
"If you have tried function based generic views in the past and found them "
"lacking, you should not think of class-based generic views as simply a class-"
"based equivalent, but rather as a fresh approach to solving the original "
"problems that generic views were meant to solve."
msgstr ""

# 66c0662aac774cbfb06c3aef9b3157d3
#: ../../topics/class-based-views/intro.txt:42
msgid ""
"The toolkit of base classes and mixins that Django uses to build class-based "
"generic views are built for maximum flexibility, and as such have many hooks "
"in the form of default method implementations and attributes that you are "
"unlikely to be concerned with in the simplest use cases. For example, "
"instead of limiting you to a class based attribute for ``form_class``, the "
"implementation uses a ``get_form`` method, which calls a ``get_form_class`` "
"method, which in its default implementation just returns the ``form_class`` "
"attribute of the class. This gives you several options for specifying what "
"form to use, from a simple attribute, to a fully dynamic, callable hook. "
"These options seem to add hollow complexity for simple situations, but "
"without them, more advanced designs would be limited."
msgstr ""

# 17f09e1a0c86436791950335fdaf7fc6
#: ../../topics/class-based-views/intro.txt:55
msgid "Using class-based views"
msgstr ""

# 707ebf87483746ed8c9c4af91094088e
#: ../../topics/class-based-views/intro.txt:57
msgid ""
"At its core, a class-based view allows you to respond to different HTTP "
"request methods with different class instance methods, instead of with "
"conditionally branching code inside a single view function."
msgstr ""

# 7993d7647e3149a389868ad8fcf82e59
#: ../../topics/class-based-views/intro.txt:61
msgid ""
"So where the code to handle HTTP ``GET`` in a view function would look "
"something like::"
msgstr ""

# 8d6977b7975c49fd9234ee1e40e954c6
#: ../../topics/class-based-views/intro.txt:71
msgid "In a class-based view, this would become::"
msgstr ""

# eff1cd5c8f8a4e1383303447a64a23c6
#: ../../topics/class-based-views/intro.txt:81
msgid ""
"Because Django's URL resolver expects to send the request and associated "
"arguments to a callable function, not a class, class-based views have an :"
"meth:`~django.views.generic.base.View.as_view` class method which serves as "
"the callable entry point to your class. The ``as_view`` entry point creates "
"an instance of your class and calls its :meth:`~django.views.generic.base."
"View.dispatch` method. ``dispatch`` looks at the request to determine "
"whether it is a ``GET``, ``POST``, etc, and relays the request to a matching "
"method if one is defined, or raises :class:`~django.http."
"HttpResponseNotAllowed` if not::"
msgstr ""

# 9e0b77522ee74c0aaa57893fe899cc27
#: ../../topics/class-based-views/intro.txt:100
msgid ""
"It is worth noting that what your method returns is identical to what you "
"return from a function-based view, namely some form of :class:`~django.http."
"HttpResponse`. This means that :doc:`http shortcuts </topics/http/"
"shortcuts>` or :class:`~django.template.response.TemplateResponse` objects "
"are valid to use inside a class-based view."
msgstr ""

# 2262eeeacb5d425baf76c86c796ccb10
#: ../../topics/class-based-views/intro.txt:107
msgid ""
"While a minimal class-based view does not require any class attributes to "
"perform its job, class attributes are useful in many class-based designs, "
"and there are two ways to configure or set class attributes."
msgstr ""

# 31cf540a414043fd9529f178d72ea75c
#: ../../topics/class-based-views/intro.txt:111
msgid ""
"The first is the standard Python way of subclassing and overriding "
"attributes and methods in the subclass. So that if your parent class had an "
"attribute ``greeting`` like this::"
msgstr ""

# f8ad9746ba644a51a89b412826e652a8
#: ../../topics/class-based-views/intro.txt:124
msgid "You can override that in a subclass::"
msgstr ""

# efeee683c8b0493d816894ae3290f612
#: ../../topics/class-based-views/intro.txt:129
msgid ""
"Another option is to configure class attributes as keyword arguments to the :"
"meth:`~django.views.generic.base.View.as_view` call in the URLconf::"
msgstr ""

# cc53222da06d460b8ca429d17951d281
#: ../../topics/class-based-views/intro.txt:138
msgid ""
"While your class is instantiated for each request dispatched to it, class "
"attributes set through the :meth:`~django.views.generic.base.View.as_view` "
"entry point are configured only once at the time your URLs are imported."
msgstr ""

# ebcb95baa27f43b58acda05990340eeb
#: ../../topics/class-based-views/intro.txt:144
msgid "Using mixins"
msgstr ""

# 3982c24513b341ac9ecb8231aee0be26
#: ../../topics/class-based-views/intro.txt:146
msgid ""
"Mixins are a form of multiple inheritance where behaviors and attributes of "
"multiple parent classes can be combined."
msgstr ""

# 57d166cfa3c647ec9dd0064e7d44e4bd
#: ../../topics/class-based-views/intro.txt:149
msgid ""
"For example, in the generic class-based views there is a mixin called :class:"
"`~django.views.generic.base.TemplateResponseMixin` whose primary purpose is "
"to define the method :meth:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response`. When combined with the behavior of the :class:`~django."
"views.generic.base.View` base class, the result is a :class:`~django.views."
"generic.base.TemplateView` class that will dispatch requests to the "
"appropriate matching methods (a behavior defined in the ``View`` base "
"class), and that has a :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response` method that uses a :attr:`~django."
"views.generic.base.TemplateResponseMixin.template_name` attribute to return "
"a :class:`~django.template.response.TemplateResponse` object (a behavior "
"defined in the ``TemplateResponseMixin``)."
msgstr ""

# 45e9a36d81014abb9cec219999580ab1
#: ../../topics/class-based-views/intro.txt:163
msgid ""
"Mixins are an excellent way of reusing code across multiple classes, but "
"they come with some cost. The more your code is scattered among mixins, the "
"harder it will be to read a child class and know what exactly it is doing, "
"and the harder it will be to know which methods from which mixins to "
"override if you are subclassing something that has a deep inheritance tree."
msgstr ""

# e3aef15c5715451a882538082dd5569f
#: ../../topics/class-based-views/intro.txt:169
msgid ""
"Note also that you can only inherit from one generic view - that is, only "
"one parent class may inherit from :class:`~django.views.generic.base.View` "
"and the rest (if any) should be mixins. Trying to inherit from more than one "
"class that inherits from ``View`` - for example, trying to use a form at the "
"top of a list and combining :class:`~django.views.generic.edit."
"ProcessFormView` and :class:`~django.views.generic.list.ListView` - won't "
"work as expected."
msgstr ""

# e9950e7a8bf440d8b69ee1d4f424121c
#: ../../topics/class-based-views/intro.txt:177
msgid "Handling forms with class-based views"
msgstr ""

# a561023d2995424bb81dd0ec6e8a64f5
#: ../../topics/class-based-views/intro.txt:179
msgid ""
"A basic function-based view that handles forms may look something like this::"
msgstr ""

# b6f9f155465b45fb8642aa979120ad49
#: ../../topics/class-based-views/intro.txt:197
msgid "A similar class-based view might look like::"
msgstr ""

# b7aafd4b69764e6cbfab761d2cc8f536
#: ../../topics/class-based-views/intro.txt:221
msgid ""
"This is a very simple case, but you can see that you would then have the "
"option of customizing this view by overriding any of the class attributes, e."
"g. ``form_class``, via URLconf configuration, or subclassing and overriding "
"one or more of the methods (or both!)."
msgstr ""

# 9d9a54b8e2e54120ad1554ab07bdfc2a
#: ../../topics/class-based-views/intro.txt:227
msgid "Decorating class-based views"
msgstr ""

# 7ca52d9d11004e7384a5846d6c2af2e8
#: ../../topics/class-based-views/intro.txt:229
msgid ""
"The extension of class-based views isn't limited to using mixins. You can "
"use also use decorators. Since class-based views aren't functions, "
"decorating them works differently depending on if you're using ``as_view`` "
"or creating a subclass."
msgstr ""

# 59abdc36100544c5beb2bf1749ca7a7f
#: ../../topics/class-based-views/intro.txt:235
msgid "Decorating in URLconf"
msgstr ""

# 45c5a24936094066ad7460c0b276031e
#: ../../topics/class-based-views/intro.txt:237
msgid ""
"The simplest way of decorating class-based views is to decorate the result "
"of the :meth:`~django.views.generic.base.View.as_view` method. The easiest "
"place to do this is in the URLconf where you deploy your view::"
msgstr ""

# 52011d17ad784a6dbc876dcf9bdaf959
#: ../../topics/class-based-views/intro.txt:251
msgid ""
"This approach applies the decorator on a per-instance basis. If you want "
"every instance of a view to be decorated, you need to take a different "
"approach."
msgstr ""

# 911e8035309a4d92a3e050d119f99fd4
#: ../../topics/class-based-views/intro.txt:258
msgid "Decorating the class"
msgstr ""

# 8c4beb8e8cf340179ef269c1e7e77652
#: ../../topics/class-based-views/intro.txt:260
msgid ""
"To decorate every instance of a class-based view, you need to decorate the "
"class definition itself. To do this you apply the decorator to the :meth:"
"`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""

# 03ddb772a7ef41359d97517c2a38f336
#: ../../topics/class-based-views/intro.txt:264
msgid ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform "
"it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. For example::"
msgstr ""

# b56d3c8a422046ecb1c7f0a18ac01d8e
#: ../../topics/class-based-views/intro.txt:281
msgid ""
"In this example, every instance of ``ProtectedView`` will have login "
"protection."
msgstr ""

# 87d27009522e4fe892e8e123eee8f3ba
#: ../../topics/class-based-views/intro.txt:286
msgid ""
"``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the "
"decorated method on the class. If your method does not accept a compatible "
"set of parameters it will raise a ``TypeError`` exception."
msgstr ""

# 50cd6e6de15e43f58e51409a6f73c629
#: ../../topics/class-based-views/mixins.txt:3
msgid "Using mixins with class-based views"
msgstr ""

# d9478a03b9494bb6b868caa5554de6e7
#: ../../topics/class-based-views/mixins.txt:7
msgid ""
"This is an advanced topic. A working knowledge of :doc:`Django's class-based "
"views<index>` is advised before exploring these techniques."
msgstr ""

# ae85f3fb0b974306997f3ad33504b390
#: ../../topics/class-based-views/mixins.txt:11
msgid ""
"Django's built-in class-based views provide a lot of functionality, but some "
"of it you may want to use separately. For instance, you may want to write a "
"view that renders a template to make the HTTP response, but you can't use :"
"class:`~django.views.generic.base.TemplateView`; perhaps you need to render "
"a template only on ``POST``, with ``GET`` doing something else entirely. "
"While you could use :class:`~django.template.response.TemplateResponse` "
"directly, this will likely result in duplicate code."
msgstr ""

# f194bc08ab1d4d2ead39d965d0451452
#: ../../topics/class-based-views/mixins.txt:21
msgid ""
"For this reason, Django also provides a number of mixins that provide more "
"discrete functionality. Template rendering, for instance, is encapsulated in "
"the :class:`~django.views.generic.base.TemplateResponseMixin`. The Django "
"reference documentation contains :doc:`full documentation of all the mixins</"
"ref/class-based-views/mixins>`."
msgstr ""

# bde7f37dd45a4d9a8e856a13e02cbc9f
#: ../../topics/class-based-views/mixins.txt:29
msgid "Context and template responses"
msgstr ""

# b60c4eca0cf746e580645cc4a2c9f136
#: ../../topics/class-based-views/mixins.txt:31
msgid ""
"Two central mixins are provided that help in providing a consistent "
"interface to working with templates in class-based views."
msgstr ""

# a12028a6b2d2425bb2485f16fc4f36ef
#: ../../topics/class-based-views/mixins.txt:56
msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ""

# f0ed78797a16424dbc88c6407ba957ec
#: ../../topics/class-based-views/mixins.txt:35
msgid ""
"Every built in view which returns a :class:`~django.template.response."
"TemplateResponse` will call the :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response` method that "
"``TemplateResponseMixin`` provides. Most of the time this will be called for "
"you (for instance, it is called by the ``get()`` method implemented by both :"
"class:`~django.views.generic.base.TemplateView` and :class:`~django.views."
"generic.detail.DetailView`); similarly, it's unlikely that you'll need to "
"override it, although if you want your response to return something not "
"rendered via a Django template then you'll want to do it. For an example of "
"this, see the :ref:`JSONResponseMixin example <jsonresponsemixin-example>`."
msgstr ""

# 12c7ed546feb4fee894193790511193e
#: ../../topics/class-based-views/mixins.txt:47
msgid ""
"``render_to_response`` itself calls :meth:`~django.views.generic.base."
"TemplateResponseMixin.get_template_names`, which by default will just look "
"up :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` on "
"the class-based view; two other mixins (:class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` and :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`) override this to provide more flexible "
"defaults when dealing with actual objects."
msgstr ""

# 7b55059790fd41f3b886f073d2f70310
#: ../../topics/class-based-views/mixins.txt:67
msgid ":class:`~django.views.generic.base.ContextMixin`"
msgstr ""

# 16ab4adbf8914732b274f5843443c110
#: ../../topics/class-based-views/mixins.txt:61
msgid ""
"Every built in view which needs context data, such as for rendering a "
"template (including ``TemplateResponseMixin`` above), should call :meth:"
"`~django.views.generic.base.ContextMixin.get_context_data` passing any data "
"they want to ensure is in there as keyword arguments. ``get_context_data`` "
"returns a dictionary; in ``ContextMixin`` it simply returns its keyword "
"arguments, but it is common to override this to add more members to the "
"dictionary."
msgstr ""

# cf4f8c755e654fbca397aeabe35cfc5a
#: ../../topics/class-based-views/mixins.txt:70
msgid "Building up Django's generic class-based views"
msgstr ""

# 7e1654f7438b4619a12cbc641a354940
#: ../../topics/class-based-views/mixins.txt:72
msgid ""
"Let's look at how two of Django's generic class-based views are built out of "
"mixins providing discrete functionality. We'll consider :class:`~django."
"views.generic.detail.DetailView`, which renders a \"detail\" view of an "
"object, and :class:`~django.views.generic.list.ListView`, which will render "
"a list of objects, typically from a queryset, and optionally paginate them. "
"This will introduce us to four mixins which between them provide useful "
"functionality when working with either a single Django object, or multiple "
"objects."
msgstr ""

# a1e0c8158ab040e69a066a19148dfbc8
#: ../../topics/class-based-views/mixins.txt:82
msgid ""
"There are also mixins involved in the generic edit views (:class:`~django."
"views.generic.edit.FormView`, and the model-specific views :class:`~django."
"views.generic.edit.CreateView`, :class:`~django.views.generic.edit."
"UpdateView` and :class:`~django.views.generic.edit.DeleteView`), and in the "
"date-based generic views. These are covered in the :doc:`mixin reference "
"documentation</ref/class-based-views/mixins>`."
msgstr ""

# 60dff5a6877945239ec3c35bdaf581aa
#: ../../topics/class-based-views/mixins.txt:92
msgid "DetailView: working with a single Django object"
msgstr ""

# e6eca0f72789433f93e963fcb31237af
#: ../../topics/class-based-views/mixins.txt:94
msgid ""
"To show the detail of an object, we basically need to do two things: we need "
"to look up the object and then we need to make a :class:`~django.template."
"response.TemplateResponse` with a suitable template, and that object as "
"context."
msgstr ""

# d44813892c2142748ad85f5928192843
#: ../../topics/class-based-views/mixins.txt:99
msgid ""
"To get the object, :class:`~django.views.generic.detail.DetailView` relies "
"on :class:`~django.views.generic.detail.SingleObjectMixin`, which provides "
"a :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` method "
"that figures out the object based on the URL of the request (it looks for "
"``pk`` and ``slug`` keyword arguments as declared in the URLConf, and looks "
"the object up either from the :attr:`~django.views.generic.detail."
"SingleObjectMixin.model` attribute on the view, or the :attr:`~django.views."
"generic.detail.SingleObjectMixin.queryset` attribute if that's provided). "
"``SingleObjectMixin`` also overrides :meth:`~django.views.generic.base."
"ContextMixin.get_context_data`, which is used across all Django's built in "
"class-based views to supply context data for template renders."
msgstr ""

# e56f3b56be4d4c49bcf8dcfc24b055e0
#: ../../topics/class-based-views/mixins.txt:114
msgid ""
"To then make a :class:`~django.template.response.TemplateResponse`, :class:"
"`DetailView` uses :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`, which extends :class:`~django.views."
"generic.base.TemplateResponseMixin`, overriding :meth:`~django.views.generic."
"base.TemplateResponseMixin.get_template_names()` as discussed above. It "
"actually provides a fairly sophisticated set of options, but the main one "
"that most people are going to use is ``<app_label>/<object_name>_detail."
"html``. The ``_detail`` part can be changed by setting :attr:`~django.views."
"generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` on a "
"subclass to something else. (For instance, the :doc:`generic edit "
"views<generic-editing>` use ``_form`` for create and update views, and "
"``_confirm_delete`` for delete views.)"
msgstr ""

# ceef5328da874b8790de3a2ecc4d79a8
#: ../../topics/class-based-views/mixins.txt:130
msgid "ListView: working with many Django objects"
msgstr ""

# 58172239a91f40f8bf40bf4544aca6e3
#: ../../topics/class-based-views/mixins.txt:132
msgid ""
"Lists of objects follow roughly the same pattern: we need a (possibly "
"paginated) list of objects, typically a :class:`~django.db.models.query."
"QuerySet`, and then we need to make a :class:`~django.template.response."
"TemplateResponse` with a suitable template using that list of objects."
msgstr ""

# d972f1653805431d8e24f90530718529
#: ../../topics/class-based-views/mixins.txt:138
msgid ""
"To get the objects, :class:`~django.views.generic.list.ListView` uses :class:"
"`~django.views.generic.list.MultipleObjectMixin`, which provides both :meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_queryset` and :meth:"
"`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`. Unlike "
"with :class:`~django.views.generic.detail.SingleObjectMixin`, there's no "
"need to key off parts of the URL to figure out the queryset to work with, so "
"the default just uses the :attr:`~django.views.generic.list."
"MultipleObjectMixin.queryset` or :attr:`~django.views.generic.list."
"MultipleObjectMixin.model` attribute on the view class. A common reason to "
"override :meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` "
"here would be to dynamically vary the objects, such as depending on the "
"current user or to exclude posts in the future for a blog."
msgstr ""

# ccc0102cedab48f2827fe44d2a206fdd
#: ../../topics/class-based-views/mixins.txt:154
msgid ""
":class:`~django.views.generic.list.MultipleObjectMixin` also overrides :meth:"
"`~django.views.generic.base.ContextMixin.get_context_data` to include "
"appropriate context variables for pagination (providing dummies if "
"pagination is disabled). It relies on ``object_list`` being passed in as a "
"keyword argument, which :class:`ListView` arranges for it."
msgstr ""

# 266ce4e1c25d4d84b3275035a2be47b8
#: ../../topics/class-based-views/mixins.txt:161
msgid ""
"To make a :class:`~django.template.response.TemplateResponse`, :class:"
"`ListView` then uses :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`; as with :class:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin` above, this overrides "
"``get_template_names()`` to provide :meth:`a range of options <django.views."
"generic.list.MultipleObjectTemplateResponseMixin>`, with the most commonly-"
"used being ``<app_label>/<object_name>_list.html``, with the ``_list`` part "
"again being taken from the :attr:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin.template_name_suffix` attribute. (The "
"date based generic views use suffixes such as ``_archive``, "
"``_archive_year`` and so on to use different templates for the various "
"specialised date-based list views.)"
msgstr ""

# 984feb3484f34538809a744bb41949da
#: ../../topics/class-based-views/mixins.txt:176
msgid "Using Django's class-based view mixins"
msgstr ""

# 89006c49760c4033966044fe0b6a8c03
#: ../../topics/class-based-views/mixins.txt:178
msgid ""
"Now we've seen how Django's generic class-based views use the provided "
"mixins, let's look at other ways we can combine them. Of course we're still "
"going to be combining them with either built-in class-based views, or other "
"generic class-based views, but there are a range of rarer problems you can "
"solve than are provided for by Django out of the box."
msgstr ""

# 0a0aec1ee4b74e0685c139706bb56e51
#: ../../topics/class-based-views/mixins.txt:187
msgid ""
"Not all mixins can be used together, and not all generic class based views "
"can be used with all other mixins. Here we present a few examples that do "
"work; if you want to bring together other functionality then you'll have to "
"consider interactions between attributes and methods that overlap between "
"the different classes you're using, and how `method resolution order`_ will "
"affect which versions of the methods will be called in what order."
msgstr ""

# f33883adaa224de6a87a85d940af32f6
#: ../../topics/class-based-views/mixins.txt:195
msgid ""
"The reference documentation for Django's :doc:`class-based views</ref/class-"
"based-views/index>` and :doc:`class-based view mixins</ref/class-based-views/"
"mixins>` will help you in understanding which attributes and methods are "
"likely to cause conflict between different classes and mixins."
msgstr ""

# 8852d03b22e34347bc4fd81fee4c2ac9
#: ../../topics/class-based-views/mixins.txt:201
msgid ""
"If in doubt, it's often better to back off and base your work on :class:"
"`View` or :class:`TemplateView`, perhaps with :class:`~django.views.generic."
"detail.SingleObjectMixin` and :class:`~django.views.generic.list."
"MultipleObjectMixin`. Although you will probably end up writing more code, "
"it is more likely to be clearly understandable to someone else coming to it "
"later, and with fewer interactions to worry about you will save yourself "
"some thinking. (Of course, you can always dip into Django's implementation "
"of the generic class based views for inspiration on how to tackle problems.)"
msgstr ""

# 7dbc97dfd00a4ff5bbb8cd52a30838bf
#: ../../topics/class-based-views/mixins.txt:215
msgid "Using SingleObjectMixin with View"
msgstr ""

# d43c8eefee2b4461b017464fb9bb8160
#: ../../topics/class-based-views/mixins.txt:217
msgid ""
"If we want to write a simple class-based view that responds only to "
"``POST``, we'll subclass :class:`~django.views.generic.base.View` and write "
"a ``post()`` method in the subclass. However if we want our processing to "
"work on a particular object, identified from the URL, we'll want the "
"functionality provided by :class:`~django.views.generic.detail."
"SingleObjectMixin`."
msgstr ""

# 57146ec4415245b4acd80939ab8265db
#: ../../topics/class-based-views/mixins.txt:224
msgid ""
"We'll demonstrate this with the publisher modelling we used in the :doc:"
"`generic class-based views introduction<generic-display>`."
msgstr ""

# d30b341e07c94dfb81a0f91704131c78
#: ../../topics/class-based-views/mixins.txt:250
msgid ""
"In practice you'd probably want to record the interest in a key-value store "
"rather than in a relational database, so we've left that bit out. The only "
"bit of the view that needs to worry about using :class:`~django.views."
"generic.detail.SingleObjectMixin` is where we want to look up the author "
"we're interested in, which it just does with a simple call to ``self."
"get_object()``. Everything else is taken care of for us by the mixin."
msgstr ""

# a04f2f59828641f59b7edf5131b67513
#: ../../topics/class-based-views/mixins.txt:258
msgid "We can hook this into our URLs easily enough::"
msgstr ""

# 395b7bc8cf2b412eab53f9f67b254906
#: ../../topics/class-based-views/mixins.txt:268
msgid ""
"Note the ``pk`` named group, which :meth:`~django.views.generic.detail."
"SingleObjectMixin.get_object` uses to look up the ``Author`` instance. You "
"could also use a slug, or any of the other features of :class:`~django.views."
"generic.detail.SingleObjectMixin`."
msgstr ""

# e99337fe82f14afaaebe41cc7b5426d7
#: ../../topics/class-based-views/mixins.txt:275
msgid "Using SingleObjectMixin with ListView"
msgstr ""

# 318713f1708048e09120c85179f7efc4
#: ../../topics/class-based-views/mixins.txt:277
msgid ""
":class:`~django.views.generic.list.ListView` provides built-in pagination, "
"but you might want to paginate a list of objects that are all linked (by a "
"foreign key) to another object. In our publishing example, you might want to "
"paginate through all the books by a particular publisher."
msgstr ""

# 8f4c3b791c7e45f3b74b607f3105a198
#: ../../topics/class-based-views/mixins.txt:283
msgid ""
"One way to do this is to combine :class:`ListView` with :class:`~django."
"views.generic.detail.SingleObjectMixin`, so that the queryset for the "
"paginated list of books can hang off the publisher found as the single "
"object. In order to do this, we need to have two different querysets:"
msgstr ""

# b4914d5a825f4e1c839e2f908fcfeb34
#: ../../topics/class-based-views/mixins.txt:291
msgid "**``Publisher`` queryset for use in ``get_object``**"
msgstr ""

# cbbf59b13d5643a5a816f561ce0eed25
#: ../../topics/class-based-views/mixins.txt:289
msgid ""
"We'll set the ``model`` attribute on the view and rely on the default "
"implementation of ``get_object()`` to fetch the correct ``Publisher`` object."
msgstr ""

# b76d9ed5049047a5a6c18b0f613c2ff6
#: ../../topics/class-based-views/mixins.txt:298
msgid "**``Book`` queryset for use by ``ListView``**"
msgstr ""

# bcf36363164848429b8fa2e8bc6341d8
#: ../../topics/class-based-views/mixins.txt:294
msgid ""
"The default implementation of ``get_queryset`` uses the ``model`` attribute "
"to construct the queryset. This conflicts with our use of this attribute for "
"``get_object`` so we'll override that method and have it return the queryset "
"of ``Book`` objects linked to the ``Publisher`` we're looking at."
msgstr ""

# 889ed186071d4d0baefa7cc826ab8d0f
#: ../../topics/class-based-views/mixins.txt:302
msgid ""
"We have to think carefully about ``get_context_data()``. Since both :class:"
"`~django.views.generic.detail.SingleObjectMixin` and :class:`ListView` will "
"put things in the context data under the value of ``context_object_name`` if "
"it's set, we'll instead explictly ensure the ``Publisher`` is in the context "
"data. :class:`ListView` will add in the suitable ``page_obj`` and "
"``paginator`` for us providing we remember to call ``super()``."
msgstr ""

# 23b30516e0ac4c6eacb666c95b640069
#: ../../topics/class-based-views/mixins.txt:306
msgid "Now we can write a new ``PublisherDetail``::"
msgstr ""

# d65b616df7654a38907f086ee6156ede
#: ../../topics/class-based-views/mixins.txt:334
msgid ""
"Notice how we set ``self.object`` within ``get()`` so we can use it again "
"later in ``get_context_data()`` and ``get_queryset()``. If you don't set "
"``template_name``, the template will default to the normal :class:`ListView` "
"choice, which in this case would be ``\"books/book_list.html\"`` because "
"it's a list of books; :class:`ListView` knows nothing about :class:`~django."
"views.generic.detail.SingleObjectMixin`, so it doesn't have any clue this "
"view is anything to do with a ``Publisher``."
msgstr ""

# 83fda4de093e474aa71dfdd8d76f6af7
#: ../../topics/class-based-views/mixins.txt:343
msgid ""
"The ``paginate_by`` is deliberately small in the example so you don't have "
"to create lots of books to see the pagination working! Here's the template "
"you'd want to use:"
msgstr ""

# ea197c42d3114422938847338c0f05c8
#: ../../topics/class-based-views/mixins.txt:368
msgid "Avoid anything more complex"
msgstr ""

# e1706f19c3584784b9f590205145b8ac
#: ../../topics/class-based-views/mixins.txt:370
msgid ""
"Generally you can use :class:`~django.views.generic.base."
"TemplateResponseMixin` and :class:`~django.views.generic.detail."
"SingleObjectMixin` when you need their functionality. As shown above, with a "
"bit of care you can even combine ``SingleObjectMixin`` with :class:`~django."
"views.generic.list.ListView`. However things get increasingly complex as you "
"try to do so, and a good rule of thumb is:"
msgstr ""

# 2fefdfdc009349bbbd7eada8248688e3
#: ../../topics/class-based-views/mixins.txt:380
msgid ""
"Each of your views should use only mixins or views from one of the groups of "
"generic class-based views: :doc:`detail, list<generic-display>`, :doc:"
"`editing<generic-editing>` and date. For example it's fine to combine :class:"
"`TemplateView` (built in view) with :class:`~django.views.generic.list."
"MultipleObjectMixin` (generic list), but you're likely to have problems "
"combining ``SingleObjectMixin`` (generic detail) with "
"``MultipleObjectMixin`` (generic list)."
msgstr ""

# 0fdd93ced47d463d9bb9279c517e6c8c
#: ../../topics/class-based-views/mixins.txt:389
msgid ""
"To show what happens when you try to get more sophisticated, we show an "
"example that sacrifices readability and maintainability when there is a "
"simpler solution. First, let's look at a naive attempt to combine :class:"
"`~django.views.generic.detail.DetailView` with :class:`~django.views.generic."
"edit.FormMixin` to enable use to ``POST`` a Django :class:`~django.forms."
"Form` to the same URL as we're displaying an object using :class:"
"`DetailView`."
msgstr ""

# 4dbd537382f845999fd1cb87904d0b79
#: ../../topics/class-based-views/mixins.txt:398
msgid "Using FormMixin with DetailView"
msgstr ""

# f0e188cd689a455abd3496eb5e2b7e65
#: ../../topics/class-based-views/mixins.txt:400
msgid ""
"Think back to our earlier example of using :class:`View` and :class:`~django."
"views.generic.detail.SingleObjectMixin` together. We were recording a user's "
"interest in a particular author; say now that we want to let them leave a "
"message saying why they like them. Again, let's assume we're not going to "
"store this in a relational database but instead in something more esoteric "
"that we won't worry about here."
msgstr ""

# 38a3e8853e554f128c1052cebcd11a34
#: ../../topics/class-based-views/mixins.txt:407
msgid ""
"At this point it's natural to reach for a :class:`~django.forms.Form` to "
"encapsulate the information sent from the user's browser to Django. Say also "
"that we're heavily invested in `REST`_, so we want to use the same URL for "
"displaying the author as for capturing the message from the user. Let's "
"rewrite our ``AuthorDetailView`` to do that."
msgstr ""

# 06d888d3074e4ac0be98051ab24624a0
#: ../../topics/class-based-views/mixins.txt:415
msgid ""
"We'll keep the ``GET`` handling from :class:`DetailView`, although we'll "
"have to add a :class:`~django.forms.Form` into the context data so we can "
"render it in the template. We'll also want to pull in form processing from :"
"class:`~django.views.generic.edit.FormMixin`, and write a bit of code so "
"that on ``POST`` the form gets called appropriately."
msgstr ""

# ca3f8d347e1c41b1940e613147c860d8
#: ../../topics/class-based-views/mixins.txt:423
msgid ""
"We use :class:`~django.views.generic.edit.FormMixin` and implement "
"``post()`` ourselves rather than try to mix :class:`DetailView` with :class:"
"`FormView` (which provides a suitable ``post()`` already) because both of "
"the views implement ``get()``, and things would get much more confusing."
msgstr ""

# 64dff7f138b646f1b214f1df5a14115e
#: ../../topics/class-based-views/mixins.txt:431
msgid "Our new ``AuthorDetail`` looks like this::"
msgstr ""

# 27f3b0e2b1564cd78f88b75f286c2921
#: ../../topics/class-based-views/mixins.txt:481
msgid ""
"``get_success_url()`` is just providing somewhere to redirect to, which gets "
"used in the default implementation of ``form_valid()``. We have to provide "
"our own ``post()`` as noted earlier, and override ``get_context_data()`` to "
"make the :class:`~django.forms.Form` available in the context data."
msgstr ""

# 5f50e8a4c63744f0af0de3dd13b31138
#: ../../topics/class-based-views/mixins.txt:488
msgid "A better solution"
msgstr ""

# a992c91ac4e846b0b266ea9a5025e80c
#: ../../topics/class-based-views/mixins.txt:490
msgid ""
"It should be obvious that the number of subtle interactions between :class:"
"`~django.views.generic.edit.FormMixin` and :class:`DetailView` is already "
"testing our ability to manage things. It's unlikely you'd want to write this "
"kind of class yourself."
msgstr ""

# a5c0565a24d141ea806b84d41407b7bf
#: ../../topics/class-based-views/mixins.txt:495
msgid ""
"In this case, it would be fairly easy to just write the ``post()`` method "
"yourself, keeping :class:`DetailView` as the only generic functionality, "
"although writing :class:`~django.forms.Form` handling code involves a lot of "
"duplication."
msgstr ""

# 7b0f88c2c3374e849326a1a5989a0323
#: ../../topics/class-based-views/mixins.txt:500
msgid ""
"Alternatively, it would still be easier than the above approach to have a "
"separate view for processing the form, which could use :class:`~django.views."
"generic.edit.FormView` distinct from :class:`DetailView` without concerns."
msgstr ""

# f5b782b721474651a9ab8e46c558c7d0
#: ../../topics/class-based-views/mixins.txt:506
msgid "An alternative better solution"
msgstr ""

# bdd5b27b5dea45268ba8cb918b545938
#: ../../topics/class-based-views/mixins.txt:508
msgid ""
"What we're really trying to do here is to use two different class based "
"views from the same URL. So why not do just that? We have a very clear "
"division here: ``GET`` requests should get the :class:`DetailView` (with "
"the :class:`~django.forms.Form` added to the context data), and ``POST`` "
"requests should get the :class:`FormView`. Let's set up those views first."
msgstr ""

# 310cf90abef84d81b62c9afef0e42b4c
#: ../../topics/class-based-views/mixins.txt:515
msgid ""
"The ``AuthorDisplay`` view is almost the same as :ref:`when we first "
"introduced AuthorDetail<generic-views-extra-work>`; we have to write our own "
"``get_context_data()`` to make the ``AuthorInterestForm`` available to the "
"template. We'll skip the ``get_object()`` override from before for clarity."
msgstr ""

# 2a8475d86c7f4b56981adb847f61ff85
#: ../../topics/class-based-views/mixins.txt:541
msgid ""
"Then the ``AuthorInterest`` is a simple :class:`FormView`, but we have to "
"bring in :class:`~django.views.generic.detail.SingleObjectMixin` so we can "
"find the author we're talking about, and we have to remember to set "
"``template_name`` to ensure that form errors will render the same template "
"as ``AuthorDisplay`` is using on ``GET``."
msgstr ""

# 387fc4778a14468f98eb5abb349c28a8
#: ../../topics/class-based-views/mixins.txt:576
msgid ""
"Finally we bring this together in a new ``AuthorDetail`` view. We already "
"know that calling :meth:`~django.views.generic.base.View.as_view()` on a "
"class-based view gives us something that behaves exactly like a function "
"based view, so we can do that at the point we choose between the two "
"subviews."
msgstr ""

# 35987d0399f9491c8c850e3a7f4c6121
#: ../../topics/class-based-views/mixins.txt:581
msgid ""
"You can of course pass through keyword arguments to :meth:`~django.views."
"generic.base.View.as_view()` in the same way you would in your URLconf, such "
"as if you wanted the ``AuthorInterest`` behavior to also appear at another "
"URL but using a different template."
msgstr ""

# dd777b497b4b40d49f36e680df7b74eb
#: ../../topics/class-based-views/mixins.txt:600
msgid ""
"This approach can also be used with any other generic class-based views or "
"your own class-based views inheriting directly from :class:`View` or :class:"
"`TemplateView`, as it keeps the different views as separate as possible."
msgstr ""

# b2f14f05d1a2435187e032a14916692c
#: ../../topics/class-based-views/mixins.txt:608
msgid "More than just HTML"
msgstr ""

# 6c472d1b39f64b82849a2caf15915568
#: ../../topics/class-based-views/mixins.txt:610
msgid ""
"Where class based views shine is when you want to do the same thing many "
"times. Suppose you're writing an API, and every view should return JSON "
"instead of rendered HTML."
msgstr ""

# 5afdb855c18948058f2b69a98603d41c
#: ../../topics/class-based-views/mixins.txt:614
msgid ""
"We can create a mixin class to use in all of our views, handling the "
"conversion to JSON once."
msgstr ""

# 6b67db9a2dc349f28bbae52c164545f5
#: ../../topics/class-based-views/mixins.txt:617
msgid "For example, a simple JSON mixin might look something like this::"
msgstr ""

# 1e3cbe2986284e3aa925a04ca45d8607
#: ../../topics/class-based-views/mixins.txt:646
msgid "Now we mix this into the base TemplateView::"
msgstr ""

# 0c0cec9443bd42118fdd7bb5d7c1ff59
#: ../../topics/class-based-views/mixins.txt:653
msgid ""
"Equally we could use our mixin with one of the generic views. We can make "
"our own version of :class:`~django.views.generic.detail.DetailView` by "
"mixing ``JSONResponseMixin`` with the ``django.views.generic.detail."
"BaseDetailView`` -- (the :class:`~django.views.generic.detail.DetailView` "
"before template rendering behavior has been mixed in)::"
msgstr ""

# 5562e29101764e609c17708858e92113
#: ../../topics/class-based-views/mixins.txt:663
msgid ""
"This view can then be deployed in the same way as any other :class:`~django."
"views.generic.detail.DetailView`, with exactly the same behavior -- except "
"for the format of the response."
msgstr ""

# df13b844b4a54e349fa645cb1e2aae39
#: ../../topics/class-based-views/mixins.txt:667
msgid ""
"If you want to be really adventurous, you could even mix a :class:`~django."
"views.generic.detail.DetailView` subclass that is able to return *both* HTML "
"and JSON content, depending on some property of the HTTP request, such as a "
"query argument or a HTTP header. Just mix in both the ``JSONResponseMixin`` "
"and a :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`, and override the implementation of :func:"
"`~django.views.generic.base.TemplateResponseMixin.render_to_response()` to "
"defer to the appropriate subclass depending on the type of response that the "
"user requested::"
msgstr ""

# 1bf7188429084ba389587e85db461e36
#: ../../topics/class-based-views/mixins.txt:686
msgid ""
"Because of the way that Python resolves method overloading, the local "
"``render_to_response()`` implementation will override the versions provided "
"by ``JSONResponseMixin`` and :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`."
msgstr ""

# 80e2dfa60efe44b6ab1d5aabb3d57da4
#: ../../topics/conditional-view-processing.txt:3
msgid "Conditional View Processing"
msgstr ""

# 7c0f96e409a140b3a39b161433a14b78
#: ../../topics/conditional-view-processing.txt:5
msgid ""
"HTTP clients can send a number of headers to tell the server about copies of "
"a resource that they have already seen. This is commonly used when "
"retrieving a Web page (using an HTTP ``GET`` request) to avoid sending all "
"the data for something the client has already retrieved. However, the same "
"headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, "
"etc)."
msgstr ""

# 1f04a9f5fccc413eb25a72fe3353c0ba
#: ../../topics/conditional-view-processing.txt:11
msgid ""
"For each page (response) that Django sends back from a view, it might "
"provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` "
"header. These headers are optional on HTTP responses. They can be set by "
"your view function, or you can rely on the :class:`~django.middleware.common."
"CommonMiddleware` middleware to set the ``ETag`` header."
msgstr ""

# 7a57f45bbbce4afab4b7e122118e85a4
#: ../../topics/conditional-view-processing.txt:17
msgid ""
"When the client next requests the same resource, it might send along a "
"header such as `If-modified-since`_, containing the date of the last "
"modification time it was sent, or `If-none-match`_, containing the ``ETag`` "
"it was sent. If the current version of the page matches the ``ETag`` sent by "
"the client, or if the resource has not been modified, a 304 status code can "
"be sent back, instead of a full response, telling the client that nothing "
"has changed."
msgstr ""

# 82838a0668fc4871b27eae98fbababc8
#: ../../topics/conditional-view-processing.txt:27
msgid ""
"When you need more fine-grained control you may use per-view conditional "
"processing functions."
msgstr ""

# 693d3e1091044bfeaadfd72a794e569c
#: ../../topics/conditional-view-processing.txt:33
msgid "The ``condition`` decorator"
msgstr ""

# 13d54e2a963543fd9316804a38da8372
#: ../../topics/conditional-view-processing.txt:35
msgid ""
"Sometimes (in fact, quite often) you can create functions to rapidly compute "
"the ETag_ value or the last-modified time for a resource, **without** "
"needing to do all the computations needed to construct the full view. Django "
"can then use these functions to provide an \"early bailout\" option for the "
"view processing. Telling the client that the content has not been modified "
"since the last request, perhaps."
msgstr ""

# abe1f820520949609057bdb6b4657f1c
#: ../../topics/conditional-view-processing.txt:44
msgid ""
"These two functions are passed as parameters the ``django.views.decorators."
"http.condition`` decorator. This decorator uses the two functions (you only "
"need to supply one, if you can't compute both quantities easily and quickly) "
"to work out if the headers in the HTTP request match those on the resource. "
"If they don't match, a new copy of the resource must be computed and your "
"normal view is called."
msgstr ""

# ee5205a39c8640619a65ee811bc17cd6
#: ../../topics/conditional-view-processing.txt:51
msgid "The ``condition`` decorator's signature looks like this::"
msgstr ""

# 20d2f569c7814994910e19df6fe6667c
#: ../../topics/conditional-view-processing.txt:55
msgid ""
"The two functions, to compute the ETag and the last modified time, will be "
"passed the incoming ``request`` object and the same parameters, in the same "
"order, as the view function they are helping to wrap. The function passed "
"``last_modified_func`` should return a standard datetime value specifying "
"the last time the resource was modified, or ``None`` if the resource doesn't "
"exist. The function passed to the ``etag`` decorator should return a string "
"representing the `Etag`_ for the resource, or ``None`` if it doesn't exist."
msgstr ""

# 4fa6dd0fae9b45f2b345473a2d123d57
#: ../../topics/conditional-view-processing.txt:63
msgid ""
"Using this feature usefully is probably best explained with an example. "
"Suppose you have this pair of models, representing a simple blog system::"
msgstr ""

# 369701e9fcd1465e82f236a73fde9307
#: ../../topics/conditional-view-processing.txt:77
msgid ""
"If the front page, displaying the latest blog entries, only changes when you "
"add a new blog entry, you can compute the last modified time very quickly. "
"You need the latest ``published`` date for every entry associated with that "
"blog. One way to do this would be::"
msgstr ""

# d7d39cc9ec8846d0be83a4e6d1693ab8
#: ../../topics/conditional-view-processing.txt:85
msgid ""
"You can then use this function to provide early detection of an unchanged "
"page for your front page view::"
msgstr ""

# a06d2522f1c948b3a6599c705118ee07
#: ../../topics/conditional-view-processing.txt:95
msgid "Shortcuts for only computing one value"
msgstr ""

# 950aefafc9a74ef1801248c9ee43ff15
#: ../../topics/conditional-view-processing.txt:97
msgid ""
"As a general rule, if you can provide functions to compute *both* the ETag "
"and the last modified time, you should do so. You don't know which headers "
"any given HTTP client will send you, so be prepared to handle both. However, "
"sometimes only one value is easy to compute and Django provides decorators "
"that handle only ETag or only last-modified computations."
msgstr ""

# 499351f480924affbd12b910258d67c3
#: ../../topics/conditional-view-processing.txt:103
msgid ""
"The ``django.views.decorators.http.etag`` and ``django.views.decorators.http."
"last_modified`` decorators are passed the same type of functions as the "
"``condition`` decorator. Their signatures are::"
msgstr ""

# 6ea0e581b69d4a5cbd44b2b484f57f90
#: ../../topics/conditional-view-processing.txt:110
msgid ""
"We could write the earlier example, which only uses a last-modified "
"function, using one of these decorators::"
msgstr ""

# f4556a8da7dd4cffb55322639b65108f
#: ../../topics/conditional-view-processing.txt:117
msgid "...or::"
msgstr ""

# 336c8aa233b44482851ebab80d8a0741
#: ../../topics/conditional-view-processing.txt:124
msgid "Use ``condition`` when testing both conditions"
msgstr ""

# 9e4a3308310c4e62bce78c91f1195730
#: ../../topics/conditional-view-processing.txt:126
msgid ""
"It might look nicer to some people to try and chain the ``etag`` and "
"``last_modified`` decorators if you want to test both preconditions. "
"However, this would lead to incorrect behavior."
msgstr ""

# 62618320c9054629bf37b03321b239e1
#: ../../topics/conditional-view-processing.txt:140
msgid ""
"The first decorator doesn't know anything about the second and might answer "
"that the response is not modified even if the second decorators would "
"determine otherwise. The ``condition`` decorator uses both callback "
"functions simultaneously to work out the right action to take."
msgstr ""

# fec66a499957452c98379fdbe986813a
#: ../../topics/conditional-view-processing.txt:146
msgid "Using the decorators with other HTTP methods"
msgstr ""

# 4bf518abc7e84523a35bd559c4f3fb0c
#: ../../topics/conditional-view-processing.txt:148
msgid ""
"The ``condition`` decorator is useful for more than only ``GET`` and "
"``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this "
"situation). It can also be used to provide checking for ``POST``, ``PUT`` "
"and ``DELETE`` requests. In these situations, the idea isn't to return a "
"\"not modified\" response, but to tell the client that the resource they are "
"trying to change has been altered in the meantime."
msgstr ""

# cf91947c4d2e4567a6bcba21194ed4a8
#: ../../topics/conditional-view-processing.txt:155
msgid ""
"For example, consider the following exchange between the client and server:"
msgstr ""

# 0f49a7cab99d49ff8bf966cb6ed0a560
#: ../../topics/conditional-view-processing.txt:157
msgid "Client requests ``/foo/``."
msgstr ""

# abd11fa39cf743a688106d58d96f3e79
#: ../../topics/conditional-view-processing.txt:158
msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""

# d922d0ef8e814d75884babab859454c9
#: ../../topics/conditional-view-processing.txt:159
msgid ""
"Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It "
"also sends an ``If-Match: \"abcd1234\"`` header to specify the version it is "
"trying to update."
msgstr ""

# 1f3485da5ec6456c97b537ea01a11a2a
#: ../../topics/conditional-view-processing.txt:162
msgid ""
"Server checks to see if the resource has changed, by computing the ETag the "
"same way it does for a ``GET`` request (using the same function). If the "
"resource *has* changed, it will return a 412 status code code, meaning "
"\"precondition failed\"."
msgstr ""

# faaba481c7fd4dbbb4ba2299f40ad63c
#: ../../topics/conditional-view-processing.txt:166
msgid ""
"Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response, "
"to retrieve an updated version of the content before updating it."
msgstr ""

# 53722f4ce22f4de78552ea127bdaeb01
#: ../../topics/conditional-view-processing.txt:170
msgid ""
"The important thing this example shows is that the same functions can be "
"used to compute the ETag and last modification values in all situations. In "
"fact, you **should** use the same functions, so that the same values are "
"returned every time."
msgstr ""

# 4237bbb7f91045b2b8682b15cfe4bdd4
#: ../../topics/conditional-view-processing.txt:176
msgid "Comparison with middleware conditional processing"
msgstr ""

# 96d4da3200ae404ca4eee122238b2937
#: ../../topics/conditional-view-processing.txt:178
msgid ""
"You may notice that Django already provides simple and straightforward "
"conditional ``GET`` handling via the :class:`django.middleware.http."
"ConditionalGetMiddleware` and :class:`~django.middleware.common."
"CommonMiddleware`. Whilst certainly being easy to use and suitable for many "
"situations, those pieces of middleware functionality have limitations for "
"advanced usage:"
msgstr ""

# 98d9b5f0715a424788eacff21cf76c33
#: ../../topics/conditional-view-processing.txt:185
msgid "They are applied globally to all views in your project"
msgstr ""

# 7ca48ac7c8d949da94255b27583d2169
#: ../../topics/conditional-view-processing.txt:186
msgid ""
"They don't save you from generating the response itself, which may be "
"expensive"
msgstr ""

# 4416b85bd7a44e2e8aab70c17c0600fd
#: ../../topics/conditional-view-processing.txt:188
msgid "They are only appropriate for HTTP ``GET`` requests."
msgstr ""

# 018b62b90bcc4238aa07ce51540184e2
#: ../../topics/conditional-view-processing.txt:190
msgid ""
"You should choose the most appropriate tool for your particular problem "
"here. If you have a way to compute ETags and modification times quickly and "
"if some view takes a while to generate the content, you should consider "
"using the ``condition`` decorator described in this document. If everything "
"already runs fairly quickly, stick to using the middleware and the amount of "
"network traffic sent back to the clients will still be reduced if the view "
"hasn't changed."
msgstr ""

# 25e229727f154aab842c6e0d2d5fedad
#: ../../topics/db/aggregation.txt:3
msgid "Aggregation"
msgstr ""

# f418f0e57a2042aa805477cb3c714877
#: ../../topics/db/aggregation.txt:7
msgid ""
"The topic guide on :doc:`Django's database-abstraction API </topics/db/"
"queries>` described the way that you can use Django queries that create, "
"retrieve, update and delete individual objects. However, sometimes you will "
"need to retrieve values that are derived by summarizing or *aggregating* a "
"collection of objects. This topic guide describes the ways that aggregate "
"values can be generated and returned using Django queries."
msgstr ""

# 3e7ff9d473fe485baec4bed209d8aef3
#: ../../topics/db/aggregation.txt:14
msgid ""
"Throughout this guide, we'll refer to the following models. These models are "
"used to track the inventory for a series of online bookstores:"
msgstr ""

# 92365c161d7548d8bcbb2e51aadfccd6
#: ../../topics/db/aggregation.txt:44
msgid "Cheat sheet"
msgstr ""

# a47830ee7afb4832965151ad840b2cc9
#: ../../topics/db/aggregation.txt:46
msgid ""
"In a hurry? Here's how to do common aggregate queries, assuming the models "
"above:"
msgstr ""

# 42b0126de3a64126a6c2c1401f1f133e
#: ../../topics/db/aggregation.txt:85
msgid "Generating aggregates over a QuerySet"
msgstr ""

# d538064f858d46488d037b327db0851b
#: ../../topics/db/aggregation.txt:87
msgid ""
"Django provides two ways to generate aggregates. The first way is to "
"generate summary values over an entire ``QuerySet``. For example, say you "
"wanted to calculate the average price of all books available for sale. "
"Django's query syntax provides a means for describing the set of all books::"
msgstr ""

# d0b495bc18a54085963145e86afe99ea
#: ../../topics/db/aggregation.txt:94
msgid ""
"What we need is a way to calculate summary values over the objects that "
"belong to this ``QuerySet``. This is done by appending an ``aggregate()`` "
"clause onto the ``QuerySet``::"
msgstr ""

# f4523bd784a14f4bbb1576a95604c5b7
#: ../../topics/db/aggregation.txt:102
msgid ""
"The ``all()`` is redundant in this example, so this could be simplified to::"
msgstr ""

# 86c20886af3e42f9832decb17a0831a0
#: ../../topics/db/aggregation.txt:107
msgid ""
"The argument to the ``aggregate()`` clause describes the aggregate value "
"that we want to compute - in this case, the average of the ``price`` field "
"on the ``Book`` model. A list of the aggregate functions that are available "
"can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""

# f242bddd3d924ffab28c79861bc7a064
#: ../../topics/db/aggregation.txt:112
msgid ""
"``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, "
"returns a dictionary of name-value pairs. The name is an identifier for the "
"aggregate value; the value is the computed aggregate. The name is "
"automatically generated from the name of the field and the aggregate "
"function. If you want to manually specify a name for the aggregate value, "
"you can do so by providing that name when you specify the aggregate clause::"
msgstr ""

# 73639df4f178479f9977ae081d2641ea
#: ../../topics/db/aggregation.txt:122
msgid ""
"If you want to generate more than one aggregate, you just add another "
"argument to the ``aggregate()`` clause. So, if we also wanted to know the "
"maximum and minimum price of all books, we would issue the query::"
msgstr ""

# aa648bcbc55c434b806b029af5a4af1f
#: ../../topics/db/aggregation.txt:131
msgid "Generating aggregates for each item in a QuerySet"
msgstr ""

# 6f9577c0cc3e461cafdf6699389fa696
#: ../../topics/db/aggregation.txt:133
msgid ""
"The second way to generate summary values is to generate an independent "
"summary for each object in a ``QuerySet``. For example, if you are "
"retrieving a list of books, you may want to know how many authors "
"contributed to each book. Each Book has a many-to-many relationship with the "
"Author; we want to summarize this relationship for each book in the "
"``QuerySet``."
msgstr ""

# 9626b2642d0a4f7ca0489d75b058c044
#: ../../topics/db/aggregation.txt:139
msgid ""
"Per-object summaries can be generated using the ``annotate()`` clause. When "
"an ``annotate()`` clause is specified, each object in the ``QuerySet`` will "
"be annotated with the specified values."
msgstr ""

# 8102ffd8b9f24912a8ff607645524858
#: ../../topics/db/aggregation.txt:143
msgid ""
"The syntax for these annotations is identical to that used for the "
"``aggregate()`` clause. Each argument to ``annotate()`` describes an "
"aggregate that is to be calculated. For example, to annotate books with the "
"number of authors:"
msgstr ""

# 113014a5f78644469bfd9887f3556c9c
#: ../../topics/db/aggregation.txt:163
msgid ""
"As with ``aggregate()``, the name for the annotation is automatically "
"derived from the name of the aggregate function and the name of the field "
"being aggregated. You can override this default name by providing an alias "
"when you specify the annotation::"
msgstr ""

# 62fb7f77524548ab8fe9f177d18b35bb
#: ../../topics/db/aggregation.txt:174
msgid ""
"Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The "
"output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can "
"be modified using any other ``QuerySet`` operation, including ``filter()``, "
"``order_by()``, or even additional calls to ``annotate()``."
msgstr ""

# c669deac759f41bb8600c85f498c8ddc
#: ../../topics/db/aggregation.txt:180
msgid "Joins and aggregates"
msgstr ""

# 91a5c02c488d4210b9a5e951ce96f786
#: ../../topics/db/aggregation.txt:182
msgid ""
"So far, we have dealt with aggregates over fields that belong to the model "
"being queried. However, sometimes the value you want to aggregate will "
"belong to a model that is related to the model you are querying."
msgstr ""

# 169cc618828d4e8299a94371ba284703
#: ../../topics/db/aggregation.txt:186
msgid ""
"When specifying the field to be aggregated in an aggregate function, Django "
"will allow you to use the same :ref:`double underscore notation <field-"
"lookups-intro>` that is used when referring to related fields in filters. "
"Django will then handle any table joins that are required to retrieve and "
"aggregate the related value."
msgstr ""

# 9b9bda1e6fc94c099c206f0035232c5f
#: ../../topics/db/aggregation.txt:192
msgid ""
"For example, to find the price range of books offered in each store, you "
"could use the annotation::"
msgstr ""

# 0fadcdf43786492389587a37f1597c2d
#: ../../topics/db/aggregation.txt:197
msgid ""
"This tells Django to retrieve the ``Store`` model, join (through the many-to-"
"many relationship) with the ``Book`` model, and aggregate on the price field "
"of the book model to produce a minimum and maximum value."
msgstr ""

# 4f10aca944544b13aa8daeeaeb2dd946
#: ../../topics/db/aggregation.txt:201
msgid ""
"The same rules apply to the ``aggregate()`` clause. If you wanted to know "
"the lowest and highest price of any book that is available for sale in a "
"store, you could use the aggregate::"
msgstr ""

# 3f34002e0df144eea0b3d33a0fed3719
#: ../../topics/db/aggregation.txt:207
msgid ""
"Join chains can be as deep as you require. For example, to extract the age "
"of the youngest author of any book available for sale, you could issue the "
"query::"
msgstr ""

# 537cd077126041479c7ff2493f0b12a9
#: ../../topics/db/aggregation.txt:214
msgid "Following relationships backwards"
msgstr ""

# fb09d939c81041deb1a06072062152c3
#: ../../topics/db/aggregation.txt:216
msgid ""
"In a way similar to :ref:`lookups-that-span-relationships`, aggregations and "
"annotations on fields of models or models that are related to the one you "
"are querying can include traversing \"reverse\" relationships. The lowercase "
"name of related models and double-underscores are used here too."
msgstr ""

# abcb4e7db3624d998d3258bcec84d9e2
#: ../../topics/db/aggregation.txt:221
msgid ""
"For example, we can ask for all publishers, annotated with their respective "
"total book stock counters (note how we use ``'book'`` to specify the "
"``Publisher`` -> ``Book`` reverse foreign key hop)::"
msgstr ""

# 7d5018c10b3a4607b1fde2accc532b6f
#: ../../topics/db/aggregation.txt:228
msgid ""
"(Every ``Publisher`` in the resulting ``QuerySet`` will have an extra "
"attribute called ``book__count``.)"
msgstr ""

# e685d1b2a001456c8471c5f55a67d70e
#: ../../topics/db/aggregation.txt:231
msgid ""
"We can also ask for the oldest book of any of those managed by every "
"publisher::"
msgstr ""

# e8f925195fba4720ba105c9e4cb4209c
#: ../../topics/db/aggregation.txt:235
msgid ""
"(The resulting dictionary will have a key called ``'oldest_pubdate'``. If no "
"such alias were specified, it would be the rather long "
"``'book__pubdate__min'``.)"
msgstr ""

# c52dca897ec7426e87220b904f145d71
#: ../../topics/db/aggregation.txt:238
msgid ""
"This doesn't apply just to foreign keys. It also works with many-to-many "
"relations. For example, we can ask for every author, annotated with the "
"total number of pages considering all the books he/she has (co-)authored "
"(note how we use ``'book'`` to specify the ``Author`` -> ``Book`` reverse "
"many-to-many hop)::"
msgstr ""

# 13c7413cfa5b4ef0b1a5b1850ef29fd9
#: ../../topics/db/aggregation.txt:245
msgid ""
"(Every ``Author`` in the resulting ``QuerySet`` will have an extra attribute "
"called ``total_pages``. If no such alias were specified, it would be the "
"rather long ``book__pages__sum``.)"
msgstr ""

# 21a217165121485eb3fdf8e52c034385
#: ../../topics/db/aggregation.txt:249
msgid ""
"Or ask for the average rating of all the books written by author(s) we have "
"on file::"
msgstr ""

# 33f631d4da864eeca9c950c9e303cdf5
#: ../../topics/db/aggregation.txt:254
msgid ""
"(The resulting dictionary will have a key called ``'average__rating'``. If "
"no such alias were specified, it would be the rather long "
"``'book__rating__avg'``.)"
msgstr ""

# b6cf0ef0dffb403297d3bd18e17f5a05
#: ../../topics/db/aggregation.txt:258
msgid "Aggregations and other QuerySet clauses"
msgstr ""

# b989ca0e283a46adba44dfcdf5e98b30
#: ../../topics/db/aggregation.txt:261
msgid "``filter()`` and ``exclude()``"
msgstr ""

# 778b5131b2a841339ade42823d4f38f6
#: ../../topics/db/aggregation.txt:263
msgid ""
"Aggregates can also participate in filters. Any ``filter()`` (or "
"``exclude()``) applied to normal model fields will have the effect of "
"constraining the objects that are considered for aggregation."
msgstr ""

# a1ebcf076c584d98be1c817117bd6144
#: ../../topics/db/aggregation.txt:267
msgid ""
"When used with an ``annotate()`` clause, a filter has the effect of "
"constraining the objects for which an annotation is calculated. For example, "
"you can generate an annotated list of all books that have a title starting "
"with \"Django\" using the query::"
msgstr ""

# 5ced4f6caae642118353be0379d7307c
#: ../../topics/db/aggregation.txt:274
msgid ""
"When used with an ``aggregate()`` clause, a filter has the effect of "
"constraining the objects over which the aggregate is calculated. For "
"example, you can generate the average price of all books with a title that "
"starts with \"Django\" using the query::"
msgstr ""

# 2f2ef1663eb74adfbb54bfdd05988222
#: ../../topics/db/aggregation.txt:282
msgid "Filtering on annotations"
msgstr ""

# 1a2b44e0094d4fc8881d898a773aef4c
#: ../../topics/db/aggregation.txt:284
msgid ""
"Annotated values can also be filtered. The alias for the annotation can be "
"used in ``filter()`` and ``exclude()`` clauses in the same way as any other "
"model field."
msgstr ""

# 13559661dd224d7dab58e8d9682c9cd3
#: ../../topics/db/aggregation.txt:288
msgid ""
"For example, to generate a list of books that have more than one author, you "
"can issue the query::"
msgstr ""

# 9e0f4a08a73f47a3a9a5c25ee71818fe
#: ../../topics/db/aggregation.txt:293
msgid ""
"This query generates an annotated result set, and then generates a filter "
"based upon that annotation."
msgstr ""

# 39a6776ccafc42bd94d49870ed898812
#: ../../topics/db/aggregation.txt:297
msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr ""

# 4a7fdece08c844c4a4fa502f88fdfaf8
#: ../../topics/db/aggregation.txt:299
msgid ""
"When developing a complex query that involves both ``annotate()`` and "
"``filter()`` clauses, particular attention should be paid to the order in "
"which the clauses are applied to the ``QuerySet``."
msgstr ""

# 1dd04d4226e24e4aaad6c828135d6584
#: ../../topics/db/aggregation.txt:303
msgid ""
"When an ``annotate()`` clause is applied to a query, the annotation is "
"computed over the state of the query up to the point where the annotation is "
"requested. The practical implication of this is that ``filter()`` and "
"``annotate()`` are not commutative operations -- that is, there is a "
"difference between the query::"
msgstr ""

# ecfddb37365045b4a708c5c3f008d52e
#: ../../topics/db/aggregation.txt:311
msgid "and the query::"
msgstr ""

# 1e1515cddf364807bfc35e5a650f2512
#: ../../topics/db/aggregation.txt:315
msgid ""
"Both queries will return a list of publishers that have at least one good "
"book (i.e., a book with a rating exceeding 3.0). However, the annotation in "
"the first query will provide the total number of all books published by the "
"publisher; the second query will only include good books in the annotated "
"count. In the first query, the annotation precedes the filter, so the filter "
"has no effect on the annotation. In the second query, the filter precedes "
"the annotation, and as a result, the filter constrains the objects "
"considered when calculating the annotation."
msgstr ""

# d8be7c63bec2415491694b240940faa0
#: ../../topics/db/aggregation.txt:325
msgid "``order_by()``"
msgstr ""

# 7f87f8b9c2564b5586d865538af6338a
#: ../../topics/db/aggregation.txt:327
msgid ""
"Annotations can be used as a basis for ordering. When you define an "
"``order_by()`` clause, the aggregates you provide can reference any alias "
"defined as part of an ``annotate()`` clause in the query."
msgstr ""

# 6674c8cb549e4cc980e1fa685182d427
#: ../../topics/db/aggregation.txt:331
msgid ""
"For example, to order a ``QuerySet`` of books by the number of authors that "
"have contributed to the book, you could use the following query::"
msgstr ""

# ed6961c3f97e4576b673bda60c230121
#: ../../topics/db/aggregation.txt:337
msgid "``values()``"
msgstr ""

# 87ce0f082af04c38b531560c30b68c53
#: ../../topics/db/aggregation.txt:339
msgid ""
"Ordinarily, annotations are generated on a per-object basis - an annotated "
"``QuerySet`` will return one result for each object in the original "
"``QuerySet``. However, when a ``values()`` clause is used to constrain the "
"columns that are returned in the result set, the method for evaluating "
"annotations is slightly different. Instead of returning an annotated result "
"for each result in the original ``QuerySet``, the original results are "
"grouped according to the unique combinations of the fields specified in the "
"``values()`` clause. An annotation is then provided for each unique group; "
"the annotation is computed over all members of the group."
msgstr ""

# 69c50a30f8de4fcc95e00f4381a2f749
#: ../../topics/db/aggregation.txt:349
msgid ""
"For example, consider an author query that attempts to find out the average "
"rating of books written by each author:"
msgstr ""

# 99eda419e2af4e13b032bb2d344dfbe5
#: ../../topics/db/aggregation.txt:354
msgid ""
"This will return one result for each author in the database, annotated with "
"their average book rating."
msgstr ""

# 470307e31f904e6ba61ca2c3e33db30e
#: ../../topics/db/aggregation.txt:357
msgid ""
"However, the result will be slightly different if you use a ``values()`` "
"clause::"
msgstr ""

# 47507c3cfb1e4be8ba6546ac254b3c11
#: ../../topics/db/aggregation.txt:361
msgid ""
"In this example, the authors will be grouped by name, so you will only get "
"an annotated result for each *unique* author name. This means if you have "
"two authors with the same name, their results will be merged into a single "
"result in the output of the query; the average will be computed as the "
"average over the books written by both authors."
msgstr ""

# 0b12d9459f634f71b2147b2622a881ef
#: ../../topics/db/aggregation.txt:368
msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr ""

# 514db0478e514824a44af4c5dc1ba7b3
#: ../../topics/db/aggregation.txt:370
msgid ""
"As with the ``filter()`` clause, the order in which ``annotate()`` and "
"``values()`` clauses are applied to a query is significant. If the "
"``values()`` clause precedes the ``annotate()``, the annotation will be "
"computed using the grouping described by the ``values()`` clause."
msgstr ""

# 905b7139540345ddac7933f5a75f4e4f
#: ../../topics/db/aggregation.txt:375
msgid ""
"However, if the ``annotate()`` clause precedes the ``values()`` clause, the "
"annotations will be generated over the entire query set. In this case, the "
"``values()`` clause only constrains the fields that are generated on output."
msgstr ""

# 2dffca822b9e4d2d8c532700aa79eac8
#: ../../topics/db/aggregation.txt:380
msgid ""
"For example, if we reverse the order of the ``values()`` and ``annotate()`` "
"clause from our previous example::"
msgstr ""

# bce4dba2a1e147ee9fe56a6b597b1d1b
#: ../../topics/db/aggregation.txt:385
msgid ""
"This will now yield one unique result for each author; however, only the "
"author's name and the ``average_rating`` annotation will be returned in the "
"output data."
msgstr ""

# 0a9448ef5a64447088d31852504086c3
#: ../../topics/db/aggregation.txt:389
msgid ""
"You should also note that ``average_rating`` has been explicitly included in "
"the list of values to be returned. This is required because of the ordering "
"of the ``values()`` and ``annotate()`` clause."
msgstr ""

# 294247d7c3e043a9bca3ca81b195f30a
#: ../../topics/db/aggregation.txt:393
msgid ""
"If the ``values()`` clause precedes the ``annotate()`` clause, any "
"annotations will be automatically added to the result set. However, if the "
"``values()`` clause is applied after the ``annotate()`` clause, you need to "
"explicitly include the aggregate column."
msgstr ""

# 4b64be8f4ff1433ca991fde50c970b05
#: ../../topics/db/aggregation.txt:399
msgid "Interaction with default ordering or ``order_by()``"
msgstr ""

# 827fe2b109fe491095657761e54e93c5
#: ../../topics/db/aggregation.txt:401
msgid ""
"Fields that are mentioned in the ``order_by()`` part of a queryset (or which "
"are used in the default ordering on a model) are used when selecting the "
"output data, even if they are not otherwise specified in the ``values()`` "
"call. These extra fields are used to group \"like\" results together and "
"they can make otherwise identical result rows appear to be separate. This "
"shows up, particularly, when counting things."
msgstr ""

# e622f5ed4ea54ef2b6d68bcafc5759cb
#: ../../topics/db/aggregation.txt:408
msgid "By way of example, suppose you have a model like this::"
msgstr ""

# f257f455299a4d1ca5fd7a3aa065aa1f
#: ../../topics/db/aggregation.txt:417
msgid ""
"The important part here is the default ordering on the ``name`` field. If "
"you want to count how many times each distinct ``data`` value appears, you "
"might try this::"
msgstr ""

# b4baf57e57424c52b2b7b45f79fc14ec
#: ../../topics/db/aggregation.txt:424
msgid ""
"...which will group the ``Item`` objects by their common ``data`` values and "
"then count the number of ``id`` values in each group. Except that it won't "
"quite work. The default ordering by ``name`` will also play a part in the "
"grouping, so this query will group by distinct ``(data, name)`` pairs, which "
"isn't what you want. Instead, you should construct this queryset::"
msgstr ""

# 7509805b5b314a2cb999380a590218f9
#: ../../topics/db/aggregation.txt:432
msgid ""
"...clearing any ordering in the query. You could also order by, say, "
"``data`` without any harmful effects, since that is already playing a role "
"in the query."
msgstr ""

# 633e4d89b61547938ce1b85945cbf95c
#: ../../topics/db/aggregation.txt:436
msgid ""
"This behavior is the same as that noted in the queryset documentation for :"
"meth:`~django.db.models.query.QuerySet.distinct` and the general rule is the "
"same: normally you won't want extra columns playing a part in the result, so "
"clear out the ordering, or at least make sure it's restricted only to those "
"fields you also select in a ``values()`` call."
msgstr ""

# df772a53d8c74d47b163ac6021c158b1
#: ../../topics/db/aggregation.txt:443
msgid ""
"You might reasonably ask why Django doesn't remove the extraneous columns "
"for you. The main reason is consistency with ``distinct()`` and other "
"places: Django **never** removes ordering constraints that you have "
"specified (and we can't change those other methods' behavior, as that would "
"violate our :doc:`/misc/api-stability` policy)."
msgstr ""

# a44a9246d2eb47eca4fc739a29e3be80
#: ../../topics/db/aggregation.txt:450
msgid "Aggregating annotations"
msgstr ""

# 99fc26536394477c89860e117db98b20
#: ../../topics/db/aggregation.txt:452
msgid ""
"You can also generate an aggregate on the result of an annotation. When you "
"define an ``aggregate()`` clause, the aggregates you provide can reference "
"any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

# 809d8b24cd50407a9fb126f9a342969f
#: ../../topics/db/aggregation.txt:456
msgid ""
"For example, if you wanted to calculate the average number of authors per "
"book you first annotate the set of books with the author count, then "
"aggregate that author count, referencing the annotation field::"
msgstr ""

# 2922724cb9a142ff860b0c6132372014
#: ../../topics/db/examples/index.txt:3
msgid "Examples of model relationship API usage"
msgstr ""

# 51eae65ef7024e4c9feb865038d7dc26
# e72cf217f6284675a668ca9ba5216cf0
# 8c1ae44c8f714ff387a861c792b6e218
#: ../../topics/db/examples/many_to_many.txt:3 ../../topics/db/models.txt:329
#: ../../topics/db/queries.txt:1203
msgid "Many-to-many relationships"
msgstr ""

# 7cca223e1d2746bebce44ea65685f446
#: ../../topics/db/examples/many_to_many.txt:7
msgid "To define a many-to-many relationship, use :ref:`ref-manytomany`."
msgstr ""

# 028c6c17c6d7429595c8f562bc8ca1a2
#: ../../topics/db/examples/many_to_many.txt:9
msgid ""
"In this example, an ``Article`` can be published in multiple ``Publication`` "
"objects, and a ``Publication`` has multiple ``Article`` objects:"
msgstr ""

# d199840cdea547c78f435083e559f638
# 675efd13d0fc4db6bb20b5640a231493
# 79003c00873f4a13becd04dccee46cbb
#: ../../topics/db/examples/many_to_many.txt:35
#: ../../topics/db/examples/many_to_one.txt:32
#: ../../topics/db/examples/one_to_one.txt:37
msgid ""
"What follows are examples of operations that can be performed using the "
"Python API facilities."
msgstr ""

# 132f1d1e8e414fd78246d28a4f1a4ecd
#: ../../topics/db/examples/many_to_many.txt:38
msgid "Create a couple of ``Publications``::"
msgstr ""

# c1ab37654fac4feda8021c856e98fadf
#: ../../topics/db/examples/many_to_many.txt:47
msgid "Create an ``Article``::"
msgstr ""

# 79a06eaacf29432895e79a44390fd5e0
#: ../../topics/db/examples/many_to_many.txt:51
msgid "You can't associate it with a ``Publication`` until it's been saved::"
msgstr ""

# 67ad3c6bb44441cc8064b3295007165e
#: ../../topics/db/examples/many_to_many.txt:58
msgid "Save it! ::"
msgstr ""

# 0f4fbc0cfe5a44558a637358220f6f2d
#: ../../topics/db/examples/many_to_many.txt:63
msgid "Associate the ``Article`` with a ``Publication``::"
msgstr ""

# 8b59b5413aed42509823cc3b009d7278
#: ../../topics/db/examples/many_to_many.txt:67
msgid ""
"Create another ``Article``, and set it to appear in both ``Publications``::"
msgstr ""

# 72fcd1261bcd4338a20475b86780ca86
#: ../../topics/db/examples/many_to_many.txt:74
msgid "Adding a second time is OK::"
msgstr ""

# 48d3c17d967d40f2831f2e3bdbd99eec
#: ../../topics/db/examples/many_to_many.txt:78
msgid ""
"Adding an object of the wrong type raises :exc:`~exceptions.TypeError`::"
msgstr ""

# c2c0fdca3e1a4cad9151fb304dea22f9
#: ../../topics/db/examples/many_to_many.txt:85
msgid ""
"Create and add a ``Publication`` to an ``Article`` in one step using :meth:"
"`~django.db.models.fields.related.RelatedManager.create`::"
msgstr ""

# 1a01ee74657147b3a4fb6bbf747396a8
#: ../../topics/db/examples/many_to_many.txt:90
msgid ""
"``Article`` objects have access to their related ``Publication`` objects::"
msgstr ""

# 42d921387f5946e5909dbadd2aeffc33
#: ../../topics/db/examples/many_to_many.txt:97
msgid ""
"``Publication`` objects have access to their related ``Article`` objects::"
msgstr ""

# a33ed9112f234a18951972672e30a521
#: ../../topics/db/examples/many_to_many.txt:106
msgid ""
"Many-to-many relationships can be queried using :ref:`lookups across "
"relationships <lookups-that-span-relationships>`::"
msgstr ""

# e2ab888c608047938babf7551260c9c1
#: ../../topics/db/examples/many_to_many.txt:124
msgid ""
"The :meth:`~django.db.models.query.QuerySet.count` function respects :meth:"
"`~django.db.models.query.QuerySet.distinct` as well::"
msgstr ""

# 37383024e0e34c2aa2ad6dee73095f35
#: ../../topics/db/examples/many_to_many.txt:138
msgid ""
"Reverse m2m queries are supported (i.e., starting at the table that doesn't "
"have a :class:`~django.db.models.ManyToManyField`)::"
msgstr ""

# 1eb865292f6046b0afaef5865c2d60fc
#: ../../topics/db/examples/many_to_many.txt:163
msgid ""
"Excluding a related item works as you would expect, too (although the SQL "
"involved is a little complex)::"
msgstr ""

# a4d02d85baa4428eaaea2da45c6a9e99
#: ../../topics/db/examples/many_to_many.txt:169
msgid ""
"If we delete a ``Publication``, its ``Articles`` won't be able to access it::"
msgstr ""

# 8d9dee2b3a6a45d093307e66ab82355c
#: ../../topics/db/examples/many_to_many.txt:178
msgid ""
"If we delete an ``Article``, its ``Publications`` won't be able to access "
"it::"
msgstr ""

# ebca32998c6c48f1b17531d820128875
#: ../../topics/db/examples/many_to_many.txt:186
msgid "Adding via the 'other' end of an m2m::"
msgstr ""

# e588450351984c009ceb2adaa92720eb
#: ../../topics/db/examples/many_to_many.txt:196
msgid "Adding via the other end using keywords::"
msgstr ""

# 4787bfe3d03d4a578be76d79df9c9177
#: ../../topics/db/examples/many_to_many.txt:205
msgid "Removing ``Publication`` from an ``Article``::"
msgstr ""

# e4aa171980d84001a557bae3318c9fcf
#: ../../topics/db/examples/many_to_many.txt:213
msgid "And from the other end::"
msgstr ""

# 6b04b31afd304a72a2783ddba3f73483
#: ../../topics/db/examples/many_to_many.txt:221
msgid ""
"Relation sets can be assigned. Assignment clears any existing set members::"
msgstr ""

# 5c0786c4033144ea9f0901aafb32330d
#: ../../topics/db/examples/many_to_many.txt:229
msgid "Relation sets can be cleared::"
msgstr ""

# dd939673f64d4ff2af44049bef84084f
#: ../../topics/db/examples/many_to_many.txt:235
msgid "And you can clear from the other end::"
msgstr ""

# c3a5946d93e6483da588efae86dd1d5a
#: ../../topics/db/examples/many_to_many.txt:248
msgid "Recreate the ``Article`` and ``Publication`` we have deleted::"
msgstr ""

# 6f7c96a387204b7cbc1884f105aa0318
#: ../../topics/db/examples/many_to_many.txt:256
msgid ""
"Bulk delete some ``Publications`` - references to deleted publications "
"should go::"
msgstr ""

# 02b53786eb67415e854956ad9e941a2e
#: ../../topics/db/examples/many_to_many.txt:267
msgid "Bulk delete some articles - references to deleted objects should go::"
msgstr ""

# c126f0778c51485d9ba0618ff7d9e7e8
#: ../../topics/db/examples/many_to_many.txt:274
msgid ""
"After the :meth:`~django.db.models.query.QuerySet.delete`, the :class:"
"`~django.db.models.query.QuerySet` cache needs to be cleared, and the "
"referenced objects should be gone::"
msgstr ""

# 13b9893e5b2e491cbe150e098ae95831
#: ../../topics/db/examples/many_to_many.txt:283
msgid ""
"An alternate to calling :meth:`~django.db.models.fields.related."
"RelatedManager.clear` is to assign the empty set::"
msgstr ""

# 8a1c23c9da1344a3b824b276c89b4623
# 9d9b487e648f4d3d877beac6b9f2d90e
#: ../../topics/db/examples/many_to_one.txt:3 ../../topics/db/models.txt:280
msgid "Many-to-one relationships"
msgstr ""

# a2a00609edf64b21af53e741e13d7217
#: ../../topics/db/examples/many_to_one.txt:7
msgid ""
"To define a many-to-one relationship, use :class:`~django.db.models."
"ForeignKey`."
msgstr ""

# b6483f7980304572b05363379d5676d7
#: ../../topics/db/examples/many_to_one.txt:35
msgid "Create a few Reporters::"
msgstr ""

# 22303328c9fa484eb5aec1f97c703b39
#: ../../topics/db/examples/many_to_one.txt:43
msgid "Create an Article::"
msgstr ""

# fe6f304ce4f6415896b3e3fa8c59afa6
#: ../../topics/db/examples/many_to_one.txt:55
msgid "Article objects have access to their related Reporter objects::"
msgstr ""

# 4706e807dc97482abe3f9872873d4049
#: ../../topics/db/examples/many_to_one.txt:59
msgid ""
"These are strings instead of unicode strings because that's what was used in "
"the creation of this reporter (and we haven't refreshed the data from the "
"database, which always returns unicode strings)::"
msgstr ""

# 0356ef15bd224b3e90843de251531b63
#: ../../topics/db/examples/many_to_one.txt:66
msgid "Create an Article via the Reporter object::"
msgstr ""

# 4f3c5b2327224753be94ce5743807e88
#: ../../topics/db/examples/many_to_one.txt:76
msgid "Create a new article, and add it to the article set::"
msgstr ""

# ca519d8d3a774bc6b8ddb2e1b166af15
#: ../../topics/db/examples/many_to_one.txt:87
msgid "Add the same article to a different article set - check that it moves::"
msgstr ""

# c3939169a4ff495eb631362e39f7773a
#: ../../topics/db/examples/many_to_one.txt:95
msgid "Adding an object of the wrong type raises TypeError::"
msgstr ""

# a3d715f76689478e9f67dc8c82fd3776
#: ../../topics/db/examples/many_to_one.txt:113
msgid "Note that in the last example the article has moved from John to Paul."
msgstr ""

# df0bc54b99ef43b2ab54d4ac005be7cc
#: ../../topics/db/examples/many_to_one.txt:115
msgid ""
"Related managers support field lookups as well. The API automatically "
"follows relationships as far as you need. Use double underscores to separate "
"relationships. This works as many levels deep as you want. There's no limit. "
"For example::"
msgstr ""

# 8db6497dd72e429c83c669d7787753f4
#: ../../topics/db/examples/many_to_one.txt:127
msgid "Exact match is implied here::"
msgstr ""

# ea4966b5534d4c3f85e84b33cd07e5ee
#: ../../topics/db/examples/many_to_one.txt:132
msgid ""
"Query twice over the related field. This translates to an AND condition in "
"the WHERE clause::"
msgstr ""

# 010ffe5a54e8406b9989ed3196c89618
#: ../../topics/db/examples/many_to_one.txt:138
msgid ""
"For the related lookup you can supply a primary key value or pass the "
"related object explicitly::"
msgstr ""

# 67d75815c5c24ff19fb3c6f73022dcab
#: ../../topics/db/examples/many_to_one.txt:153
msgid "You can also use a queryset instead of a literal list of instances::"
msgstr ""

# 68b96c30b9334e9fb4c5c5b935066ea9
#: ../../topics/db/examples/many_to_one.txt:158
msgid "Querying in the opposite direction::"
msgstr ""

# 7521cb7b0aa847caba051551f7b06379
#: ../../topics/db/examples/many_to_one.txt:172
msgid ""
"Counting in the opposite direction works in conjunction with distinct()::"
msgstr ""

# e3196fb28658437dac3e91bdeb898166
#: ../../topics/db/examples/many_to_one.txt:179
msgid "Queries can go round in circles::"
msgstr ""

# eeb49b986f334fd58d16fee9efacf6d9
#: ../../topics/db/examples/many_to_one.txt:188
msgid ""
"If you delete a reporter, his articles will be deleted (assuming that the "
"ForeignKey was defined with :attr:`django.db.models.ForeignKey.on_delete` "
"set to ``CASCADE``, which is the default)::"
msgstr ""

# bc71733545774625a0acda4f6f63db96
#: ../../topics/db/examples/many_to_one.txt:202
msgid "You can delete using a JOIN in the query::"
msgstr ""

# a3281ca540454650a7c9150f0f47efb8
# f5e41c3fe7f44d86860c8c54797ff6a6
# 6cd2b672a17d4dcdbc1763043ab7040e
#: ../../topics/db/examples/one_to_one.txt:3 ../../topics/db/models.txt:536
#: ../../topics/db/queries.txt:1230
msgid "One-to-one relationships"
msgstr ""

# 7b401e628a3b47b2ad3c54211daa0878
#: ../../topics/db/examples/one_to_one.txt:7
msgid "To define a one-to-one relationship, use :ref:`ref-onetoone`."
msgstr ""

# 57f9befc21ac4cd6bbb9a76ab7918019
#: ../../topics/db/examples/one_to_one.txt:9
msgid "In this example, a ``Place`` optionally can be a ``Restaurant``:"
msgstr ""

# bd383f510b31411f9843110e6f7b74c4
#: ../../topics/db/examples/one_to_one.txt:40
msgid "Create a couple of Places::"
msgstr ""

# e197fab344db4f2aa37116bca4942669
#: ../../topics/db/examples/one_to_one.txt:47
msgid ""
"Create a Restaurant. Pass the ID of the \"parent\" object as this object's "
"ID::"
msgstr ""

# b41078954b614a27b512899bfeaa06f7
#: ../../topics/db/examples/one_to_one.txt:52
msgid "A Restaurant can access its place::"
msgstr ""

# 0b618dbd88424752aaa275168599604d
#: ../../topics/db/examples/one_to_one.txt:57
msgid "A Place can access its restaurant, if available::"
msgstr ""

# 3832fd5296f543838730e9f08431df36
#: ../../topics/db/examples/one_to_one.txt:62
msgid "p2 doesn't have an associated restaurant::"
msgstr ""

# 09ad758ad4d44fceb5cd0f9a6836c107
#: ../../topics/db/examples/one_to_one.txt:69
msgid ""
"Set the place using assignment notation. Because place is the primary key on "
"Restaurant, the save will create a new restaurant::"
msgstr ""

# 79cde2c09d914ec9b6f56970018666bc
#: ../../topics/db/examples/one_to_one.txt:79
msgid "Set the place back again, using assignment in the reverse direction::"
msgstr ""

# 1fa5a436e65d4499a37c6de46cfb68f0
#: ../../topics/db/examples/one_to_one.txt:85
msgid ""
"Restaurant.objects.all() just returns the Restaurants, not the Places.  Note "
"that there are two restaurants - Ace Hardware the Restaurant was created in "
"the call to r.place = p2::"
msgstr ""

# fe94938ed74242b6a6ad06812c02973e
#: ../../topics/db/examples/one_to_one.txt:92
msgid ""
"Place.objects.all() returns all Places, regardless of whether they have "
"Restaurants::"
msgstr ""

# 59d020da5bd049e6932dcbf9442ca690
#: ../../topics/db/examples/one_to_one.txt:98
msgid ""
"You can query the models using :ref:`lookups across relationships <lookups-"
"that-span-relationships>`::"
msgstr ""

# 6e866a5be58e40bf809c5ed6e0cdd420
#: ../../topics/db/examples/one_to_one.txt:109
msgid "This of course works in reverse::"
msgstr ""

# ebfed21602614777a671ef89dc1d64cc
#: ../../topics/db/examples/one_to_one.txt:120
msgid "Add a Waiter to the Restaurant::"
msgstr ""

# e3645a56f5164c608333fc09f61eb4f6
#: ../../topics/db/examples/one_to_one.txt:127
msgid "Query the waiters::"
msgstr ""

# 1fb760adf4f6463fbef57b38579ca083
#: ../../topics/db/index.txt:2
msgid "Models and databases"
msgstr ""

# b22b2fe2ff86432593a77ec5c2612100
# 29179c50dc704a3793bca3b534a4d2db
#: ../../topics/db/index.txt:6 ../../topics/db/models.txt:7
msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr ""

# 3b47137b6ded4a77827a7a927777e975
#: ../../topics/db/managers.txt:3
msgid "Managers"
msgstr ""

# ccc6f6ddcd494aafa02ea01e04a79f5b
#: ../../topics/db/managers.txt:9
msgid ""
"A ``Manager`` is the interface through which database query operations are "
"provided to Django models. At least one ``Manager`` exists for every model "
"in a Django application."
msgstr ""

# 26ea9926b7f5471b9be5543b4fab6569
#: ../../topics/db/managers.txt:13
msgid ""
"The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`; "
"this document specifically touches on model options that customize "
"``Manager`` behavior."
msgstr ""

# 230cf05ad6144a48aa4bf32e8f237a2c
#: ../../topics/db/managers.txt:20
msgid "Manager names"
msgstr ""

# d48dcc2e23d9456f88394e57b1e2699f
#: ../../topics/db/managers.txt:22
msgid ""
"By default, Django adds a ``Manager`` with the name ``objects`` to every "
"Django model class. However, if you want to use ``objects`` as a field name, "
"or if you want to use a name other than ``objects`` for the ``Manager``, you "
"can rename it on a per-model basis. To rename the ``Manager`` for a given "
"class, define a class attribute of type ``models.Manager()`` on that model. "
"For example::"
msgstr ""

# 2cdf35b81e044345a001cccbb00610bc
#: ../../topics/db/managers.txt:34
msgid ""
"Using this example model, ``Person.objects`` will generate an "
"``AttributeError`` exception, but ``Person.people.all()`` will provide a "
"list of all ``Person`` objects."
msgstr ""

# 322731f96cc54d83a0d0b4939343f765
#: ../../topics/db/managers.txt:41
msgid "Custom Managers"
msgstr ""

# fff9bd5b6035414dbacc364e5d07f469
#: ../../topics/db/managers.txt:43
msgid ""
"You can use a custom ``Manager`` in a particular model by extending the base "
"``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""

# 3861ee70394c412a99fd7e2bb84722b5
#: ../../topics/db/managers.txt:46
msgid ""
"There are two reasons you might want to customize a ``Manager``: to add "
"extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the "
"``Manager`` returns."
msgstr ""

# ad71c30b65db4e8780ffbc7641628a38
#: ../../topics/db/managers.txt:51
msgid "Adding extra Manager methods"
msgstr ""

# ec8ccb0d562749cf801557abf128291c
#: ../../topics/db/managers.txt:53
msgid ""
"Adding extra ``Manager`` methods is the preferred way to add \"table-level\" "
"functionality to your models. (For \"row-level\" functionality -- i.e., "
"functions that act on a single instance of a model object -- use :ref:`Model "
"methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""

# c1465f4223c64469976014a4a8bd408b
#: ../../topics/db/managers.txt:58
msgid ""
"A custom ``Manager`` method can return anything you want. It doesn't have to "
"return a ``QuerySet``."
msgstr ""

# 7753e5859e154354bbace3c981d608cd
#: ../../topics/db/managers.txt:61
msgid ""
"For example, this custom ``Manager`` offers a method ``with_counts()``, "
"which returns a list of all ``OpinionPoll`` objects, each with an extra "
"``num_responses`` attribute that is the result of an aggregate query::"
msgstr ""

# dcb23b024f5146c886e8c8c84957af76
#: ../../topics/db/managers.txt:92
msgid ""
"With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return "
"that list of ``OpinionPoll`` objects with ``num_responses`` attributes."
msgstr ""

# 8722878c36124ddea80976f5b1fa6dc4
#: ../../topics/db/managers.txt:95
msgid ""
"Another thing to note about this example is that ``Manager`` methods can "
"access ``self.model`` to get the model class to which they're attached."
msgstr ""

# 7b160c192b8b436199612eb934995565
#: ../../topics/db/managers.txt:99
msgid "Modifying initial Manager QuerySets"
msgstr ""

# 405654f3075744ce97b68218b28cebb5
#: ../../topics/db/managers.txt:101
msgid ""
"A ``Manager``'s base ``QuerySet`` returns all objects in the system. For "
"example, using this model::"
msgstr ""

# b0dff24cbbc64f3a867afbb6c8bbbd7c
#: ../../topics/db/managers.txt:108
msgid ""
"...the statement ``Book.objects.all()`` will return all books in the "
"database."
msgstr ""

# af7c868e47d044cd9d68ea8aae4c03cd
#: ../../topics/db/managers.txt:110
msgid ""
"You can override a ``Manager``\\'s base ``QuerySet`` by overriding the "
"``Manager.get_query_set()`` method. ``get_query_set()`` should return a "
"``QuerySet`` with the properties you require."
msgstr ""

# b55d0c158d214653a37cee763ba78348
#: ../../topics/db/managers.txt:114
msgid ""
"For example, the following model has *two* ``Manager``\\s -- one that "
"returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""

# 3a3a9bdd03da4425a1149ad4ed90e621
#: ../../topics/db/managers.txt:130
msgid ""
"With this sample model, ``Book.objects.all()`` will return all books in the "
"database, but ``Book.dahl_objects.all()`` will only return the ones written "
"by Roald Dahl."
msgstr ""

# 416d7d2b69fb4ff3a7c0042297ed9eba
#: ../../topics/db/managers.txt:134
msgid ""
"Of course, because ``get_query_set()`` returns a ``QuerySet`` object, you "
"can use ``filter()``, ``exclude()`` and all the other ``QuerySet`` methods "
"on it. So these statements are all legal::"
msgstr ""

# 688d9c2565fe453eaea8ff222a252af3
#: ../../topics/db/managers.txt:142
msgid ""
"This example also pointed out another interesting technique: using multiple "
"managers on the same model. You can attach as many ``Manager()`` instances "
"to a model as you'd like. This is an easy way to define common \"filters\" "
"for your models."
msgstr ""

# aed0ea1cc96e4c8f9508a990d58bb337
#: ../../topics/db/managers.txt:165
msgid ""
"This example allows you to request ``Person.men.all()``, ``Person.women."
"all()``, and ``Person.people.all()``, yielding predictable results."
msgstr ""

# f7809b35cefe4da5a20e220045b60d6d
#: ../../topics/db/managers.txt:168
msgid ""
"If you use custom ``Manager`` objects, take note that the first ``Manager`` "
"Django encounters (in the order in which they're defined in the model) has a "
"special status. Django interprets the first ``Manager`` defined in a class "
"as the \"default\" ``Manager``, and several parts of Django (including :"
"djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. As "
"a result, it's a good idea to be careful in your choice of default manager "
"in order to avoid a situation where overriding ``get_query_set()`` results "
"in an inability to retrieve objects you'd like to work with."
msgstr ""

# 558e63066afc464991f67be3f9684885
#: ../../topics/db/managers.txt:181
msgid "Using managers for related object access"
msgstr ""

# a4afabf3f074497ca581e385df489eb9
#: ../../topics/db/managers.txt:183
msgid ""
"By default, Django uses an instance of a \"plain\" manager class when "
"accessing related objects (i.e. ``choice.poll``), not the default manager on "
"the related object. This is because Django needs to be able to retrieve the "
"related object, even if it would otherwise be filtered out (and hence be "
"inaccessible) by the default manager."
msgstr ""

# f2e9b83f7fa6439ea72d07c9c15cdfa3
#: ../../topics/db/managers.txt:189
msgid ""
"If the normal plain manager class (:class:`django.db.models.Manager`) is not "
"appropriate for your circumstances, you can force Django to use the same "
"class as the default manager for your model by setting the "
"``use_for_related_fields`` attribute on the manager class. This is "
"documented fully below_."
msgstr ""

# 968ff70be3bc45478271bed573a74558
#: ../../topics/db/managers.txt:199
msgid "Custom managers and model inheritance"
msgstr ""

# def349ec26254d40a30a6bf9686eb9b6
#: ../../topics/db/managers.txt:201
msgid ""
"Class inheritance and model managers aren't quite a perfect match for each "
"other. Managers are often specific to the classes they are defined on and "
"inheriting them in subclasses isn't necessarily a good idea. Also, because "
"the first manager declared is the *default manager*, it is important to "
"allow that to be controlled. So here's how Django handles custom managers "
"and :ref:`model inheritance <model-inheritance>`:"
msgstr ""

# d905b31250464aa98fa5cf58aa9dbdef
#: ../../topics/db/managers.txt:208
msgid ""
"Managers defined on non-abstract base classes are *not* inherited by child "
"classes. If you want to reuse a manager from a non-abstract base, redeclare "
"it explicitly on the child class. These sorts of managers are likely to be "
"fairly specific to the class they are defined on, so inheriting them can "
"often lead to unexpected results (particularly as far as the default manager "
"goes). Therefore, they aren't passed onto child classes."
msgstr ""

# 5dc1da5420174bae9ff1616c3a49959e
#: ../../topics/db/managers.txt:216
msgid ""
"Managers from abstract base classes are always inherited by the child class, "
"using Python's normal name resolution order (names on the child class "
"override all others; then come names on the first parent class, and so on). "
"Abstract base classes are designed to capture information and behavior that "
"is common to their child classes. Defining common managers is an appropriate "
"part of this common information."
msgstr ""

# a2c56d1d181c460d954cb4dd27baa9dc
#: ../../topics/db/managers.txt:223
msgid ""
"The default manager on a class is either the first manager declared on the "
"class, if that exists, or the default manager of the first abstract base "
"class in the parent hierarchy, if that exists. If no default manager is "
"explicitly declared, Django's normal default manager is used."
msgstr ""

# b0ad9be24c6a464c9112b857aef2627f
#: ../../topics/db/managers.txt:229
msgid ""
"These rules provide the necessary flexibility if you want to install a "
"collection of custom managers on a group of models, via an abstract base "
"class, but still customize the default manager. For example, suppose you "
"have this base class::"
msgstr ""

# fbd5fdd422fb4bd893b037dff1c3104a
#: ../../topics/db/managers.txt:241
msgid ""
"If you use this directly in a subclass, ``objects`` will be the default "
"manager if you declare no managers in the base class::"
msgstr ""

# fee4c517d50741b7b1b647ef821675f2
#: ../../topics/db/managers.txt:248
msgid ""
"If you want to inherit from ``AbstractBase``, but provide a different "
"default manager, you can provide the default manager on the child class::"
msgstr ""

# 38c2a09223b54292a8bbaba81cc48109
#: ../../topics/db/managers.txt:256
msgid ""
"Here, ``default_manager`` is the default. The ``objects`` manager is still "
"available, since it's inherited. It just isn't used as the default."
msgstr ""

# 497be05e98af4140a7bba7a1185d6f16
#: ../../topics/db/managers.txt:259
msgid ""
"Finally for this example, suppose you want to add extra managers to the "
"child class, but still use the default from ``AbstractBase``. You can't add "
"the new manager directly in the child class, as that would override the "
"default and you would have to also explicitly include all the managers from "
"the abstract base class. The solution is to put the extra managers in "
"another base class and introduce it into the inheritance hierarchy *after* "
"the defaults::"
msgstr ""

# 92036b8b9c9341999173c7462d5fee42
#: ../../topics/db/managers.txt:277
msgid ""
"Note that while you can *define* a custom manager on the abstract model, you "
"can't *invoke* any methods using the abstract model. That is::"
msgstr ""

# 95728aed627e45a48451bd7628691d1e
#: ../../topics/db/managers.txt:282
msgid "is legal, but::"
msgstr ""

# dfd0ba98f2fc465c8740d5edb12b40a9
#: ../../topics/db/managers.txt:286
msgid ""
"will raise an exception. This is because managers are intended to "
"encapsulate logic for managing collections of objects. Since you can't have "
"a collection of abstract objects, it doesn't make sense to be managing them. "
"If you have functionality that applies to the abstract model, you should put "
"that functionality in a ``staticmethod`` or ``classmethod`` on the abstract "
"model."
msgstr ""

# 1c824c0cc01c4e17a4bd47fc6de534c0
#: ../../topics/db/managers.txt:293
msgid "Implementation concerns"
msgstr ""

# 28ace2b958c049ceb9b1bf0bc252def2
#: ../../topics/db/managers.txt:295
msgid ""
"Whatever features you add to your custom ``Manager``, it must be possible to "
"make a shallow copy of a ``Manager`` instance; i.e., the following code must "
"work::"
msgstr ""

# e4b543adb5ed4ee19239144f890bb220
#: ../../topics/db/managers.txt:303
msgid ""
"Django makes shallow copies of manager objects during certain queries; if "
"your Manager cannot be copied, those queries will fail."
msgstr ""

# d7fcf648310440718f8c759b560f91c8
#: ../../topics/db/managers.txt:306
msgid ""
"This won't be an issue for most custom managers. If you are just adding "
"simple methods to your ``Manager``, it is unlikely that you will "
"inadvertently make instances of your ``Manager`` uncopyable. However, if "
"you're overriding ``__getattr__`` or some other private method of your "
"``Manager`` object that controls object state, you should ensure that you "
"don't affect the ability of your ``Manager`` to be copied."
msgstr ""

# ad62795f11534908b21625758f6a0b9a
#: ../../topics/db/managers.txt:317
msgid "Controlling automatic Manager types"
msgstr ""

# 6e96129e9ebd4e379ef24c0ddf83abe7
#: ../../topics/db/managers.txt:319
msgid ""
"This document has already mentioned a couple of places where Django creates "
"a manager class for you: `default managers`_ and the \"plain\" manager used "
"to `access related objects`_. There are other places in the implementation "
"of Django where temporary plain managers are needed. Those automatically "
"created managers will normally be instances of the :class:`django.db.models."
"Manager` class."
msgstr ""

# fe1ff6217cba4d96b889ae173d562f3a
#: ../../topics/db/managers.txt:329
msgid ""
"Throughout this section, we will use the term \"automatic manager\" to mean "
"a manager that Django creates for you -- either as a default manager on a "
"model with no managers, or to use temporarily when accessing related objects."
msgstr ""

# 9a3a4a7581b14994ade29ef0a6d4bbe9
#: ../../topics/db/managers.txt:333
msgid ""
"Sometimes this default class won't be the right choice. One example is in "
"the :mod:`django.contrib.gis` application that ships with Django itself. All "
"``gis`` models must use a special manager class (:class:`~django.contrib.gis."
"db.models.GeoManager`) because they need a special queryset (:class:`~django."
"contrib.gis.db.models.GeoQuerySet`) to be used for interacting with the "
"database.  It turns out that models which require a special manager like "
"this need to use the same manager class wherever an automatic manager is "
"created."
msgstr ""

# 93bba6d658d44b64846171083d67e2e0
#: ../../topics/db/managers.txt:341
msgid ""
"Django provides a way for custom manager developers to say that their "
"manager class should be used for automatic managers whenever it is the "
"default manager on a model. This is done by setting the "
"``use_for_related_fields`` attribute on the manager class::"
msgstr ""

# 8416d93e2545447184753fd3b3d69020
#: ../../topics/db/managers.txt:351
msgid ""
"If this attribute is set on the *default* manager for a model (only the "
"default manager is considered in these situations), Django will use that "
"class whenever it needs to automatically create a manager for the class.  "
"Otherwise, it will use :class:`django.db.models.Manager`."
msgstr ""

# ee6d986da6ae4aba8c3e16932426e30a
#: ../../topics/db/managers.txt:356
msgid "Historical Note"
msgstr ""

# f68c2eaf4a5f410dba38fe8020f5dae3
#: ../../topics/db/managers.txt:358
msgid ""
"Given the purpose for which it's used, the name of this attribute "
"(``use_for_related_fields``) might seem a little odd. Originally, the "
"attribute only controlled the type of manager used for related field access, "
"which is where the name came from. As it became clear the concept was more "
"broadly useful, the name hasn't been changed. This is primarily so that "
"existing code will :doc:`continue to work </misc/api-stability>` in future "
"Django versions."
msgstr ""

# 5d2dd4d4c5e04ff19a0cfd2bc9438194
#: ../../topics/db/managers.txt:367
msgid "Writing correct Managers for use in automatic Manager instances"
msgstr ""

# 6a73af37a9b54f669c2933c69cfcc488
#: ../../topics/db/managers.txt:369
msgid ""
"As already suggested by the :mod:`django.contrib.gis` example, above, the "
"``use_for_related_fields`` feature is primarily for managers that need to "
"return a custom ``QuerySet`` subclass. In providing this functionality in "
"your manager, there are a couple of things to remember."
msgstr ""

# bf890cb562074cc1a666a699497a2448
#: ../../topics/db/managers.txt:375
msgid "Do not filter away any results in this type of manager subclass"
msgstr ""

# d65bfe68c10c40138c9425d0039ae1ff
#: ../../topics/db/managers.txt:377
msgid ""
"One reason an automatic manager is used is to access objects that are "
"related to from some other model. In those situations, Django has to be able "
"to see all the objects for the model it is fetching, so that *anything* "
"which is referred to can be retrieved."
msgstr ""

# efba7e67181f41a892479ee9df51ec7e
#: ../../topics/db/managers.txt:382
msgid ""
"If you override the ``get_query_set()`` method and filter out any rows, "
"Django will return incorrect results. Don't do that. A manager that filters "
"results in ``get_query_set()`` is not appropriate for use as an automatic "
"manager."
msgstr ""

# 4170073f78784700808f22129931b487
#: ../../topics/db/managers.txt:387
msgid "Set ``use_for_related_fields`` when you define the class"
msgstr ""

# f7f69a34b6814ccfbe3b1c6f9ae64ece
#: ../../topics/db/managers.txt:389
msgid ""
"The ``use_for_related_fields`` attribute must be set on the manager *class*, "
"not on an *instance* of the class. The earlier example shows the correct way "
"to set it, whereas the following will not work::"
msgstr ""

# 7d908427dc2345709f25ea7ab1bd83f1
#: ../../topics/db/managers.txt:408
msgid ""
"You also shouldn't change the attribute on the class object after it has "
"been used in a model, since the attribute's value is processed when the "
"model class is created and not subsequently reread. Set the attribute on the "
"manager class when it is first defined, as in the initial example of this "
"section and everything will work smoothly."
msgstr ""

# 43d199560e3e44d099b1af56309557fa
#: ../../topics/db/models.txt:3
msgid "Models"
msgstr ""

# 814dd5d26c11471fa934aae0fe37872e
#: ../../topics/db/models.txt:11
msgid "The basics:"
msgstr ""

# 12c56b711f0f42aa80f3ad517158d2bb
#: ../../topics/db/models.txt:13
msgid ""
"Each model is a Python class that subclasses :class:`django.db.models.Model`."
msgstr ""

# aa540d73cefb4c0c8b364f48b90b3d65
#: ../../topics/db/models.txt:16
msgid "Each attribute of the model represents a database field."
msgstr ""

# f7468627f3cd41ac9fd8475c304ef057
#: ../../topics/db/models.txt:18
msgid ""
"With all of this, Django gives you an automatically-generated database-"
"access API; see :doc:`/topics/db/queries`."
msgstr ""

# 7a615483cb7f4f5690e36557fa891dda
# 8a96397d99f24f619ddb73a7bd4c2f4e
#: ../../topics/db/models.txt:23 ../../topics/email.txt:17
msgid "Quick example"
msgstr ""

# 62d71e38b93b4036a798b5a4c5366017
#: ../../topics/db/models.txt:25
msgid ""
"This example model defines a ``Person``, which has a ``first_name`` and "
"``last_name``::"
msgstr ""

# 9c4deb243172476883a860419861a85b
#: ../../topics/db/models.txt:34
msgid ""
"``first_name`` and ``last_name`` are fields_ of the model. Each field is "
"specified as a class attribute, and each attribute maps to a database column."
msgstr ""

# 97832043b1184644ba4e03cd4452883f
#: ../../topics/db/models.txt:37
msgid "The above ``Person`` model would create a database table like this:"
msgstr ""

# bef6fb14a6494958ad55172f263e61f6
#: ../../topics/db/models.txt:47
msgid "Some technical notes:"
msgstr ""

# f32ec4d9b4d94a2bb7e65d8ed92dbc9e
#: ../../topics/db/models.txt:49
msgid ""
"The name of the table, ``myapp_person``, is automatically derived from some "
"model metadata but can be overridden. See :ref:`table-names` for more "
"details.."
msgstr ""

# 3171ed26dce84fa89fbd0c132b14efdf
#: ../../topics/db/models.txt:53
msgid ""
"An ``id`` field is added automatically, but this behavior can be overridden. "
"See :ref:`automatic-primary-key-fields`."
msgstr ""

# 006ac6bf1b4c4f40a9984562ff31e83c
#: ../../topics/db/models.txt:56
msgid ""
"The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL "
"syntax, but it's worth noting Django uses SQL tailored to the database "
"backend specified in your :doc:`settings file </topics/settings>`."
msgstr ""

# fcbb7608ea774fa3b5140541d90650b6
#: ../../topics/db/models.txt:61
msgid "Using models"
msgstr ""

# 72d482991bf64094bdbcab54a6c636c7
#: ../../topics/db/models.txt:63
msgid ""
"Once you have defined your models, you need to tell Django you're going to "
"*use* those models. Do this by editing your settings file and changing the :"
"setting:`INSTALLED_APPS` setting to add the name of the module that contains "
"your ``models.py``."
msgstr ""

# 467451292e39403b94d92451ad5c986b
#: ../../topics/db/models.txt:68
msgid ""
"For example, if the models for your application live in the module ``myapp."
"models`` (the package structure that is created for an application by the :"
"djadmin:`manage.py startapp <startapp>` script), :setting:`INSTALLED_APPS` "
"should read, in part::"
msgstr ""

# d2cf3b21242d44e2aa490b24ca3c1b36
#: ../../topics/db/models.txt:79
msgid ""
"When you add new apps to :setting:`INSTALLED_APPS`, be sure to run :djadmin:"
"`manage.py syncdb <syncdb>`."
msgstr ""

# 5f62fdd35b4147ae8e8f52e8d2fd59d3
#: ../../topics/db/models.txt:83
msgid "Fields"
msgstr ""

# 28fdc2dd0d144e01ab50bcff5b4560d4
#: ../../topics/db/models.txt:85
msgid ""
"The most important part of a model -- and the only required part of a model "
"-- is the list of database fields it defines. Fields are specified by class "
"attributes. Be careful not to choose field names that conflict with the :doc:"
"`models API </ref/models/instances>` like ``clean``, ``save``, or ``delete``."
msgstr ""

# 5b0fc43a04d24874a6b3272845f4cf36
# e8d120bb06bf4b1eb19e3a251213e2f8
# dc65741d88c84011b646a8a70402b83d
# c0a5575a8d98475fb15b708b7d18a256
# 17f1b7156d8c4ab6bd40fe8c80eeb8e7
# 6fd1d8abe83346e79de7adf5828abdcc
#: ../../topics/db/models.txt:91 ../../topics/db/queries.txt:250
#: ../../topics/db/queries.txt:1082 ../../topics/db/queries.txt:1131
#: ../../topics/db/transactions.txt:121 ../../topics/settings.txt:182
msgid "Example::"
msgstr ""

# bbd8c9f069ee43d79bf6e20e9c743605
# ef68eabeb6d44cc8affc15b59bb350bd
#: ../../topics/db/models.txt:105 ../../topics/forms/modelforms.txt:40
msgid "Field types"
msgstr ""

# e23a4dbc0cd44ef0a39160e3527f1c7c
#: ../../topics/db/models.txt:107
msgid ""
"Each field in your model should be an instance of the appropriate :class:"
"`~django.db.models.Field` class. Django uses the field class types to "
"determine a few things:"
msgstr ""

# 7d7ec4e5f9ac456280a9e2d383c8e0d0
#: ../../topics/db/models.txt:111
msgid "The database column type (e.g. ``INTEGER``, ``VARCHAR``)."
msgstr ""

# b4a77cb3b57643b9ab060755c922acca
#: ../../topics/db/models.txt:113
msgid ""
"The default :doc:`widget </ref/forms/widgets>` to use when rendering a form "
"field (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr ""

# 8c2878d1ebcf4856b73a6cff1825cc00
#: ../../topics/db/models.txt:116
msgid ""
"The minimal validation requirements, used in Django's admin and in "
"automatically-generated forms."
msgstr ""

# d2d4827272ce48e9adf152fe5a80628f
#: ../../topics/db/models.txt:119
msgid ""
"Django ships with dozens of built-in field types; you can find the complete "
"list in the :ref:`model field reference <model-field-types>`. You can easily "
"write your own fields if Django's built-in ones don't do the trick; see :doc:"
"`/howto/custom-model-fields`."
msgstr ""

# 78abc6dd9f44469c9ee83016045bda28
#: ../../topics/db/models.txt:125
msgid "Field options"
msgstr ""

# d11adde430f8402c9a8c1c845f0acaff
#: ../../topics/db/models.txt:127
msgid ""
"Each field takes a certain set of field-specific arguments (documented in "
"the :ref:`model field reference <model-field-types>`). For example, :class:"
"`~django.db.models.CharField` (and its subclasses) require a :attr:`~django."
"db.models.CharField.max_length` argument which specifies the size of the "
"``VARCHAR`` database field used to store the data."
msgstr ""

# 54158877aaf34d889a7245121b64c2b7
#: ../../topics/db/models.txt:133
msgid ""
"There's also a set of common arguments available to all field types. All are "
"optional. They're fully explained in the :ref:`reference <common-model-field-"
"options>`, but here's a quick summary of the most often-used ones:"
msgstr ""

# 99e503989bb64755a5f3cd19908942e2
#: ../../topics/db/models.txt:140
msgid ":attr:`~Field.null`"
msgstr ""

# b4b00c49434948a8b81dc83aba8eeb4f
#: ../../topics/db/models.txt:139
msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""

# c9563e7c76aa4279829f6587623ee9ac
#: ../../topics/db/models.txt:150
msgid ":attr:`~Field.blank`"
msgstr ""

# 590b631097cb4be7afb73bdb345dcd05
#: ../../topics/db/models.txt:143
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

# e25846cc029243608710afe9ed9dd9e6
#: ../../topics/db/models.txt:145
msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is "
"purely database-related, whereas :attr:`~Field.blank` is validation-related. "
"If a field has :attr:`blank=True <Field.blank>`, form validation will allow "
"entry of an empty value. If a field has :attr:`blank=False <Field.blank>`, "
"the field will be required."
msgstr ""

# cf82f7a1b338477d9d3c45aa3bd1ef3e
#: ../../topics/db/models.txt:192
msgid ":attr:`~Field.choices`"
msgstr ""

# d84f8bc3f03d40fcacb80066a34b6aa5
#: ../../topics/db/models.txt:153
msgid ""
"An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this "
"field. If this is given, the default form widget will be a select box "
"instead of the standard text field and will limit choices to the choices "
"given."
msgstr ""

# f5c441df09334fec9f1a9a1b6640cd2c
#: ../../topics/db/models.txt:158
msgid "A choices list looks like this::"
msgstr ""

# f07416d28c9b4497ab870decb2195691
#: ../../topics/db/models.txt:168
msgid ""
"The first element in each tuple is the value that will be stored in the "
"database, the second element will be displayed by the default form widget or "
"in a ModelChoiceField. Given an instance of a model object, the display "
"value for a choices field can be accessed using the ``get_FOO_display`` "
"method. For example::"
msgstr ""

# fcebe19dd6f842599ea0eea927bb5a5d
#: ../../topics/db/models.txt:197
msgid ":attr:`~Field.default`"
msgstr ""

# bdb0819b41e146e4abf42a0157f022e6
#: ../../topics/db/models.txt:195
msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""

# 1dab2e391b814b6daea17b5183aa90a7
#: ../../topics/db/models.txt:201
msgid ":attr:`~Field.help_text`"
msgstr ""

# 7169492e18844cd2b20be96a6942775b
#: ../../topics/db/models.txt:200
msgid ""
"Extra \"help\" text to be displayed with the form widget. It's useful for "
"documentation even if your field isn't used on a form."
msgstr ""

# 47d4f01f71b84a8297b43b4062842cd0
#: ../../topics/db/models.txt:211
msgid ":attr:`~Field.primary_key`"
msgstr ""

# 6590810d13ed4de18beb2e811635224c
#: ../../topics/db/models.txt:204
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

# fbd5b53eb4b9479598cb562518f9d6ed
#: ../../topics/db/models.txt:206
msgid ""
"If you don't specify :attr:`primary_key=True <Field.primary_key>` for any "
"fields in your model, Django will automatically add an :class:`IntegerField` "
"to hold the primary key, so you don't need to set :attr:`primary_key=True "
"<Field.primary_key>` on any of your fields unless you want to override the "
"default primary-key behavior. For more, see :ref:`automatic-primary-key-"
"fields`."
msgstr ""

# 2c52f885d20842a481d934145ff59f7a
#: ../../topics/db/models.txt:214
msgid ":attr:`~Field.unique`"
msgstr ""

# 3a300bef394542a3b988b6cb35e51aab
#: ../../topics/db/models.txt:214
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

# 18dbe881c9e84af0aaeafb3c538adb47
#: ../../topics/db/models.txt:216
msgid ""
"Again, these are just short descriptions of the most common field options. "
"Full details can be found in the :ref:`common model field option reference "
"<common-model-field-options>`."
msgstr ""

# ab8160ce10dc482f8cc330dff037f29f
#: ../../topics/db/models.txt:223
msgid "Automatic primary key fields"
msgstr ""

# 9737d6ede6ef4234bfb4085416c6e2db
#: ../../topics/db/models.txt:225
msgid "By default, Django gives each model the following field::"
msgstr ""

# 4c55ab1f45c7423296380f5227171bd6
#: ../../topics/db/models.txt:229
msgid "This is an auto-incrementing primary key."
msgstr ""

# 35be88747f2742af95e40c919e9265e8
#: ../../topics/db/models.txt:231
msgid ""
"If you'd like to specify a custom primary key, just specify :attr:"
"`primary_key=True <Field.primary_key>` on one of your fields. If Django sees "
"you've explicitly set :attr:`Field.primary_key`, it won't add the automatic "
"``id`` column."
msgstr ""

# 356dcc88fee04b10a88d4812400b0c67
#: ../../topics/db/models.txt:236
msgid ""
"Each model requires exactly one field to have :attr:`primary_key=True <Field."
"primary_key>`."
msgstr ""

# 91b76b0ea33547fa93b74094289ff39d
#: ../../topics/db/models.txt:242
msgid "Verbose field names"
msgstr ""

# 0ff69ef467064923b2004c16900903fc
#: ../../topics/db/models.txt:244
msgid ""
"Each field type, except for :class:`~django.db.models.ForeignKey`, :class:"
"`~django.db.models.ManyToManyField` and :class:`~django.db.models."
"OneToOneField`, takes an optional first positional argument -- a verbose "
"name. If the verbose name isn't given, Django will automatically create it "
"using the field's attribute name, converting underscores to spaces."
msgstr ""

# 081de73c209042ccbb99a593f1c9ba0f
#: ../../topics/db/models.txt:251
msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr ""

# c692a8f81565466f9e10d349c6b6fe49
#: ../../topics/db/models.txt:255
msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr ""

# 47c5bbc06cd14ae88b9483b65cb38a4d
#: ../../topics/db/models.txt:259
msgid ""
":class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` and :class:`~django.db.models.OneToOneField` require the "
"first argument to be a model class, so use the :attr:`~Field.verbose_name` "
"keyword argument::"
msgstr ""

# c1c4c63aec864004b3eaf626a0a20db1
#: ../../topics/db/models.txt:268
msgid ""
"The convention is not to capitalize the first letter of the :attr:`~Field."
"verbose_name`. Django will automatically capitalize the first letter where "
"it needs to."
msgstr ""

# 8e0f051150ba4c50b4d143123f4fe3ca
#: ../../topics/db/models.txt:273
msgid "Relationships"
msgstr ""

# e33ed9b5ca684118b90369ba827bfde4
#: ../../topics/db/models.txt:275
msgid ""
"Clearly, the power of relational databases lies in relating tables to each "
"other. Django offers ways to define the three most common types of database "
"relationships: many-to-one, many-to-many and one-to-one."
msgstr ""

# c871aa63c60246f2a199f32bf7445741
#: ../../topics/db/models.txt:282
msgid ""
"To define a many-to-one relationship, use :class:`django.db.models."
"ForeignKey`. You use it just like any other :class:`~django.db.models.Field` "
"type: by including it as a class attribute of your model."
msgstr ""

# c19509c1de91402c83bfcb37dcfc750a
#: ../../topics/db/models.txt:286
msgid ""
":class:`~django.db.models.ForeignKey` requires a positional argument: the "
"class to which the model is related."
msgstr ""

# 32db4e1c59974d90b8a4578a1e9c6d01
#: ../../topics/db/models.txt:289
msgid ""
"For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a "
"``Manufacturer`` makes multiple cars but each ``Car`` only has one "
"``Manufacturer`` -- use the following definitions::"
msgstr ""

# 4d4648cfe4b041d69252c3e6213aa276
#: ../../topics/db/models.txt:300
msgid ""
"You can also create :ref:`recursive relationships <recursive-relationships>` "
"(an object with a many-to-one relationship to itself) and :ref:"
"`relationships to models not yet defined <lazy-relationships>`; see :ref:"
"`the model field reference <ref-foreignkey>` for details."
msgstr ""

# aa19ce96f58e437f97a390c6c7459aa3
#: ../../topics/db/models.txt:305
msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ForeignKey` field (``manufacturer`` in the example above) be the name "
"of the model, lowercase. You can, of course, call the field whatever you "
"want. For example::"
msgstr ""

# ed20ecf0e6b549be8ae982ac966073e7
#: ../../topics/db/models.txt:316
msgid ""
":class:`~django.db.models.ForeignKey` fields accept a number of extra "
"arguments which are explained in :ref:`the model field reference <foreign-"
"key-arguments>`. These options help define how the relationship should work; "
"all are optional."
msgstr ""

# cf3299e05a58485a914270ed7eded70f
#: ../../topics/db/models.txt:321
msgid ""
"For details on accessing backwards-related objects, see the :ref:`Following "
"relationships backward example <backwards-related-objects>`."
msgstr ""

# c83d8953551b4cf8a9e13064590fe8fb
#: ../../topics/db/models.txt:324
msgid ""
"For sample code, see the :doc:`Many-to-one relationship model example </"
"topics/db/examples/many_to_one>`."
msgstr ""

# 9f117f63d6044faaa282d34a3e366056
#: ../../topics/db/models.txt:331
msgid ""
"To define a many-to-many relationship, use :class:`~django.db.models."
"ManyToManyField`. You use it just like any other :class:`~django.db.models."
"Field` type: by including it as a class attribute of your model."
msgstr ""

# acc9cf31ea1b434c8e47405a0b18404a
#: ../../topics/db/models.txt:336
msgid ""
":class:`~django.db.models.ManyToManyField` requires a positional argument: "
"the class to which the model is related."
msgstr ""

# cab38d99faae4d1294066cc76ab37272
#: ../../topics/db/models.txt:339
msgid ""
"For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a "
"``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple "
"toppings -- here's how you'd represent that::"
msgstr ""

# 7509636839064e06beb0d9907637884e
#: ../../topics/db/models.txt:350
msgid ""
"As with :class:`~django.db.models.ForeignKey`, you can also create :ref:"
"`recursive relationships <recursive-relationships>` (an object with a many-"
"to-many relationship to itself) and :ref:`relationships to models not yet "
"defined <lazy-relationships>`; see :ref:`the model field reference <ref-"
"manytomany>` for details."
msgstr ""

# e427eea371864102b219bfb30ee5107f
#: ../../topics/db/models.txt:356
msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ManyToManyField` (``toppings`` in the example above) be a plural "
"describing the set of related model objects."
msgstr ""

# b5406d2e4b644fb7bd7ba95e59758255
#: ../../topics/db/models.txt:360
msgid ""
"It doesn't matter which model has the :class:`~django.db.models."
"ManyToManyField`, but you should only put it in one of the models -- not "
"both."
msgstr ""

# dc3a772df16a4d449693067a9bf0451a
#: ../../topics/db/models.txt:364
msgid ""
"Generally, :class:`~django.db.models.ManyToManyField` instances should go in "
"the object that's going to be edited on a form. In the above example, "
"``toppings`` is in ``Pizza`` (rather than ``Topping`` having a ``pizzas`` :"
"class:`~django.db.models.ManyToManyField` ) because it's more natural to "
"think about a pizza having toppings than a topping being on multiple pizzas. "
"The way it's set up above, the ``Pizza`` form would let users select the "
"toppings."
msgstr ""

# 86d68ccb0fb94282a39549d8f50d596d
#: ../../topics/db/models.txt:373
msgid ""
"See the :doc:`Many-to-many relationship model example </topics/db/examples/"
"many_to_many>` for a full example."
msgstr ""

# 9c7e10ebebf24e67a2c34e6b572615e6
#: ../../topics/db/models.txt:376
msgid ""
":class:`~django.db.models.ManyToManyField` fields also accept a number of "
"extra arguments which are explained in :ref:`the model field reference "
"<manytomany-arguments>`. These options help define how the relationship "
"should work; all are optional."
msgstr ""

# 830d023eb65146519c4b62ef115f68c0
#: ../../topics/db/models.txt:384
msgid "Extra fields on many-to-many relationships"
msgstr ""

# e88e17bdfd7341ad91890748985f90f1
#: ../../topics/db/models.txt:386
msgid ""
"When you're only dealing with simple many-to-many relationships such as "
"mixing and matching pizzas and toppings, a standard :class:`~django.db."
"models.ManyToManyField` is all you need. However, sometimes you may need to "
"associate data with the relationship between two models."
msgstr ""

# a2d814fd90a54918a8947e965fb245a0
#: ../../topics/db/models.txt:391
msgid ""
"For example, consider the case of an application tracking the musical groups "
"which musicians belong to. There is a many-to-many relationship between a "
"person and the groups of which they are a member, so you could use a :class:"
"`~django.db.models.ManyToManyField` to represent this relationship. However, "
"there is a lot of detail about the membership that you might want to "
"collect, such as the date at which the person joined the group."
msgstr ""

# 6b52594bc6f74040b5abf6ddb3cdc9de
#: ../../topics/db/models.txt:398
msgid ""
"For these situations, Django allows you to specify the model that will be "
"used to govern the many-to-many relationship. You can then put extra fields "
"on the intermediate model. The intermediate model is associated with the :"
"class:`~django.db.models.ManyToManyField` using the :attr:`through "
"<ManyToManyField.through>` argument to point to the model that will act as "
"an intermediary. For our musician example, the code would look something "
"like this::"
msgstr ""

# c2c54a6929314708a3748f5842dffbe1
#: ../../topics/db/models.txt:425
msgid ""
"When you set up the intermediary model, you explicitly specify foreign keys "
"to the models that are involved in the ManyToMany relation. This explicit "
"declaration defines how the two models are related."
msgstr ""

# f35e17a17aa248dabbe3e84e56be5941
#: ../../topics/db/models.txt:429
msgid "There are a few restrictions on the intermediate model:"
msgstr ""

# d6734a2c34954a6b95548ee508c9221e
#: ../../topics/db/models.txt:431
msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the target model (this would be ``Person`` in our example). If you have more "
"than one foreign key, a validation error will be raised."
msgstr ""

# cd738c4937c5472d8760fe13d0c941f5
#: ../../topics/db/models.txt:435
msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the source model (this would be ``Group`` in our example). If you have more "
"than one foreign key, a validation error will be raised."
msgstr ""

# 1a854f813ac84bc1bcfaf0eec138994a
#: ../../topics/db/models.txt:439
msgid ""
"The only exception to this is a model which has a many-to-many relationship "
"to itself, through an intermediary model. In this case, two foreign keys to "
"the same model are permitted, but they will be treated as the two "
"(different) sides of the many-to-many relation."
msgstr ""

# 08a3926d3cdd4e478a88e3cb9adf682d
#: ../../topics/db/models.txt:445
msgid ""
"When defining a many-to-many relationship from a model to itself, using an "
"intermediary model, you *must* use :attr:`symmetrical=False <ManyToManyField."
"symmetrical>` (see :ref:`the model field reference <manytomany-arguments>`)."
msgstr ""

# a122f2fd83f94f86a64ca2e48d8b0131
#: ../../topics/db/models.txt:450
msgid ""
"Now that you have set up your :class:`~django.db.models.ManyToManyField` to "
"use your intermediary model (``Membership``, in this case), you're ready to "
"start creating some many-to-many relationships. You do this by creating "
"instances of the intermediate model::"
msgstr ""

# 63dc8908253249d0a3de832c2b3319f7
#: ../../topics/db/models.txt:472
msgid ""
"Unlike normal many-to-many fields, you *can't* use ``add``, ``create``, or "
"assignment (i.e., ``beatles.members = [...]``) to create relationships::"
msgstr ""

# eee212dcebb742d9a98cb4ca2c3152d6
#: ../../topics/db/models.txt:482
msgid ""
"Why? You can't just create a relationship between a ``Person`` and a "
"``Group`` - you need to specify all the detail for the relationship required "
"by the ``Membership`` model. The simple ``add``, ``create`` and assignment "
"calls don't provide a way to specify this extra detail. As a result, they "
"are disabled for many-to-many relationships that use an intermediate model. "
"The only way to create this type of relationship is to create instances of "
"the intermediate model."
msgstr ""

# 6651b390b15b49a192b7b22fb6b962eb
#: ../../topics/db/models.txt:490
msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.remove` method is "
"disabled for similar reasons. However, the :meth:`~django.db.models.fields."
"related.RelatedManager.clear` method can be used to remove all many-to-many "
"relationships for an instance::"
msgstr ""

# 78da45fa238c462e93ebfe0dea768ac3
#: ../../topics/db/models.txt:498
msgid ""
"Once you have established the many-to-many relationships by creating "
"instances of your intermediate model, you can issue queries. Just as with "
"normal many-to-many relationships, you can query using the attributes of the "
"many-to-many-related model::"
msgstr ""

# 4ede407ec5c24be8af3d46a8838ed0f9
#: ../../topics/db/models.txt:507
msgid ""
"As you are using an intermediate model, you can also query on its "
"attributes::"
msgstr ""

# fa094f0e8ef743638b937a866809b7a4
#: ../../topics/db/models.txt:515
msgid ""
"If you need to access a membership's information you may do so by directly "
"querying the ``Membership`` model::"
msgstr ""

# 888f37bdfa254698ac3f42f497024cb4
#: ../../topics/db/models.txt:524
msgid ""
"Another way to access the same information is by querying the :ref:`many-to-"
"many reverse relationship<m2m-reverse-relationships>` from a ``Person`` "
"object::"
msgstr ""

# 8a5c45ea0b114266a5181bf81d2be737
#: ../../topics/db/models.txt:538
msgid ""
"To define a one-to-one relationship, use :class:`~django.db.models."
"OneToOneField`. You use it just like any other ``Field`` type: by including "
"it as a class attribute of your model."
msgstr ""

# 0cf90c871f774ad1bf527ae697f85512
#: ../../topics/db/models.txt:542
msgid ""
"This is most useful on the primary key of an object when that object "
"\"extends\" another object in some way."
msgstr ""

# f27aed2c47a74e03bfaddb3d86e66e55
#: ../../topics/db/models.txt:545
msgid ""
":class:`~django.db.models.OneToOneField` requires a positional argument: the "
"class to which the model is related."
msgstr ""

# 7476d6de123b4ac1a67293c085bda21c
#: ../../topics/db/models.txt:548
msgid ""
"For example, if you were building a database of \"places\", you would build "
"pretty standard stuff such as address, phone number, etc. in the database. "
"Then, if you wanted to build a database of restaurants on top of the places, "
"instead of repeating yourself and replicating those fields in the "
"``Restaurant`` model, you could make ``Restaurant`` have a :class:`~django."
"db.models.OneToOneField` to ``Place`` (because a restaurant \"is a\" place; "
"in fact, to handle this you'd typically use :ref:`inheritance <model-"
"inheritance>`, which involves an implicit one-to-one relation)."
msgstr ""

# 2f6e108718ad486b9b2c5608d6992627
#: ../../topics/db/models.txt:558
msgid ""
"As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive "
"relationship <recursive-relationships>` can be defined and :ref:`references "
"to as-yet undefined models <lazy-relationships>` can be made; see :ref:`the "
"model field reference <ref-onetoone>` for details."
msgstr ""

# 323e87092a084b069c44ea5dd10a95f4
#: ../../topics/db/models.txt:566
msgid ""
"See the :doc:`One-to-one relationship model example </topics/db/examples/"
"one_to_one>` for a full example."
msgstr ""

# aee5ddea9f1c4d69944a242189b2fb52
#: ../../topics/db/models.txt:569
msgid ""
":class:`~django.db.models.OneToOneField` fields also accept one specific, "
"optional ``parent_link`` argument described in the :ref:`model field "
"reference <ref-onetoone>`."
msgstr ""

# d80f1982db684994a1399441a302e2eb
#: ../../topics/db/models.txt:573
msgid ""
":class:`~django.db.models.OneToOneField` classes used to automatically "
"become the primary key on a model. This is no longer true (although you can "
"manually pass in the :attr:`~django.db.models.Field.primary_key` argument if "
"you like). Thus, it's now possible to have multiple fields of type :class:"
"`~django.db.models.OneToOneField` on a single model."
msgstr ""

# 97e0a96b782943a29cfc3be65070e9d6
#: ../../topics/db/models.txt:580
msgid "Models across files"
msgstr ""

# 07a79b68a8114d6c8a0d236fcd00b288
#: ../../topics/db/models.txt:582
msgid ""
"It's perfectly OK to relate a model to one from another app. To do this, "
"import the related model at the top of the file where your model is defined. "
"Then, just refer to the other model class wherever needed. For example::"
msgstr ""

# 7f35a9f0889d48249f55e5e3c9089240
#: ../../topics/db/models.txt:593
msgid "Field name restrictions"
msgstr ""

# 76ed020e48d24bab94523ba6b7a9868d
#: ../../topics/db/models.txt:595
msgid "Django places only two restrictions on model field names:"
msgstr ""

# fa566662562e4c74a4d45f2316757e19
#: ../../topics/db/models.txt:597
msgid ""
"A field name cannot be a Python reserved word, because that would result in "
"a Python syntax error. For example::"
msgstr ""

# 95c6505907334eec854646a8abb1fa6e
#: ../../topics/db/models.txt:603
msgid ""
"A field name cannot contain more than one underscore in a row, due to the "
"way Django's query lookup syntax works. For example::"
msgstr ""

# c28a07382c754c6c9e0644c5df6649f0
#: ../../topics/db/models.txt:609
msgid ""
"These limitations can be worked around, though, because your field name "
"doesn't necessarily have to match your database column name. See the :attr:"
"`~Field.db_column` option."
msgstr ""

# 7f15c0e8392a48a89bc3a0209115f63e
#: ../../topics/db/models.txt:613
msgid ""
"SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed "
"as model field names, because Django escapes all database table names and "
"column names in every underlying SQL query. It uses the quoting syntax of "
"your particular database engine."
msgstr ""

# 7b645e2d1b3c46308777be916f050057
#: ../../topics/db/models.txt:619
msgid "Custom field types"
msgstr ""

# 318747a4ec0d4906932c22b0f0e73bbf
#: ../../topics/db/models.txt:621
msgid ""
"If one of the existing model fields cannot be used to fit your purposes, or "
"if you wish to take advantage of some less common database column types, you "
"can create your own field class. Full coverage of creating your own fields "
"is provided in :doc:`/howto/custom-model-fields`."
msgstr ""

# 05b7b3ee90fa4e72a10e8d7944d40465
#: ../../topics/db/models.txt:629
msgid "Meta options"
msgstr ""

# 849791271a98446f92b79f90bfd80543
#: ../../topics/db/models.txt:631
msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr ""

# e244f42323214877b98e6148059707b0
#: ../../topics/db/models.txt:640
msgid ""
"Model metadata is \"anything that's not a field\", such as ordering options "
"(:attr:`~Options.ordering`), database table name (:attr:`~Options."
"db_table`), or human-readable singular and plural names (:attr:`~Options."
"verbose_name` and :attr:`~Options.verbose_name_plural`). None are required, "
"and adding ``class Meta`` to a model is completely optional."
msgstr ""

# 2481f7b3454c4a57875bb23cfede9234
#: ../../topics/db/models.txt:646
msgid ""
"A complete list of all possible ``Meta`` options can be found in the :doc:"
"`model option reference </ref/models/options>`."
msgstr ""

# 78a94494144e4d2abeffbe437fecfbcc
#: ../../topics/db/models.txt:652
msgid "Model methods"
msgstr ""

# 2d8dae7dede74d6b8b88f48bb97b9258
#: ../../topics/db/models.txt:654
msgid ""
"Define custom methods on a model to add custom \"row-level\" functionality "
"to your objects. Whereas :class:`~django.db.models.Manager` methods are "
"intended to do \"table-wide\" things, model methods should act on a "
"particular model instance."
msgstr ""

# 046cffeea48d440ea202b2b8df0b4841
#: ../../topics/db/models.txt:658
msgid ""
"This is a valuable technique for keeping business logic in one place -- the "
"model."
msgstr ""

# 68b765a5e12946cb9918b464ca447142
#: ../../topics/db/models.txt:661
msgid "For example, this model has a few custom methods::"
msgstr ""

# f48f89ab55964bc192fdd0c00ca8391b
#: ../../topics/db/models.txt:692
msgid "The last method in this example is a :term:`property`."
msgstr ""

# 11774a7dbd86428899a4999782bd7c85
#: ../../topics/db/models.txt:694
msgid ""
"The :doc:`model instance reference </ref/models/instances>` has a complete "
"list of :ref:`methods automatically given to each model <model-instance-"
"methods>`. You can override most of these -- see `overriding predefined "
"model methods`_, below -- but there are a couple that you'll almost always "
"want to define:"
msgstr ""

# d5f35cb107ef498bb534fe4c3e98d59f
#: ../../topics/db/models.txt:707
msgid ":meth:`~Model.__unicode__`"
msgstr ""

# 1c17e2248fb2438ead15b073bd9316c4
#: ../../topics/db/models.txt:700
msgid ""
"A Python \"magic method\" that returns a unicode \"representation\" of any "
"object. This is what Python and Django will use whenever a model instance "
"needs to be coerced and displayed as a plain string. Most notably, this "
"happens when you display an object in an interactive console or in the admin."
msgstr ""

# 96f1f89f658b426ba70c12e2b09dfd4d
#: ../../topics/db/models.txt:706
msgid ""
"You'll always want to define this method; the default isn't very helpful at "
"all."
msgstr ""

# 7db009b79afa48da8f5e6737c08a2eaf
#: ../../topics/db/models.txt:715
msgid ":meth:`~Model.get_absolute_url`"
msgstr ""

# 179269a88f874804aff3e7244bc169e5
#: ../../topics/db/models.txt:710
msgid ""
"This tells Django how to calculate the URL for an object. Django uses this "
"in its admin interface, and any time it needs to figure out a URL for an "
"object."
msgstr ""

# f87e4ff00ee74dec91ee1924d6092825
#: ../../topics/db/models.txt:714
msgid ""
"Any object that has a URL that uniquely identifies it should define this "
"method."
msgstr ""

# 33cb3f29da064c21ad5878836b4e217d
#: ../../topics/db/models.txt:720
msgid "Overriding predefined model methods"
msgstr ""

# 6b2da215184a471680f49cd96fb8de3a
#: ../../topics/db/models.txt:722
msgid ""
"There's another set of :ref:`model methods <model-instance-methods>` that "
"encapsulate a bunch of database behavior that you'll want to customize. In "
"particular you'll often want to change the way :meth:`~Model.save` and :meth:"
"`~Model.delete` work."
msgstr ""

# e9bcb6c07e194afeba8331663fb22153
#: ../../topics/db/models.txt:727
msgid ""
"You're free to override these methods (and any other model method) to alter "
"behavior."
msgstr ""

# 3c05e8bd662346bbac3527593439648c
#: ../../topics/db/models.txt:730
msgid ""
"A classic use-case for overriding the built-in methods is if you want "
"something to happen whenever you save an object. For example (see :meth:"
"`~Model.save` for documentation of the parameters it accepts)::"
msgstr ""

# a0b76470b23048ce88680eadb8461528
#: ../../topics/db/models.txt:743
msgid "You can also prevent saving::"
msgstr ""

# 19f44ca3b2a24d38b5d49034b8ce2369
#: ../../topics/db/models.txt:755
msgid ""
"It's important to remember to call the superclass method -- that's that "
"``super(Blog, self).save(*args, **kwargs)`` business -- to ensure that the "
"object still gets saved into the database. If you forget to call the "
"superclass method, the default behavior won't happen and the database won't "
"get touched."
msgstr ""

# b7fc4c36b7664b769af78f9ab1a2041c
#: ../../topics/db/models.txt:761
msgid ""
"It's also important that you pass through the arguments that can be passed "
"to the model method -- that's what the ``*args, **kwargs`` bit does. Django "
"will, from time to time, extend the capabilities of built-in model methods, "
"adding new arguments. If you use ``*args, **kwargs`` in your method "
"definitions, you are guaranteed that your code will automatically support "
"those arguments when they are added."
msgstr ""

# 8babb9bd55d84a1c8ca798ab707f9716
#: ../../topics/db/models.txt:768
msgid "Overridden model methods are not called on bulk operations"
msgstr ""

# 6eb16d88194a4ffc8e5f73bb1075b406
#: ../../topics/db/models.txt:770
msgid ""
"Note that the :meth:`~Model.delete()` method for an object is not "
"necessarily called when :ref:`deleting objects in bulk using a "
"QuerySet<topics-db-queries-delete>`. To ensure customized delete logic gets "
"executed, you can use :data:`~django.db.models.signals.pre_delete` and/or :"
"data:`~django.db.models.signals.post_delete` signals."
msgstr ""

# b54f90608f4844049ce16ead05d90e87
#: ../../topics/db/models.txt:776
msgid ""
"Unfortunately, there isn't a workaround when :meth:`creating<django.db."
"models.query.QuerySet.bulk_create>` or :meth:`updating<django.db.models."
"query.QuerySet.update>` objects in bulk, since none of :meth:`~Model."
"save()`, :data:`~django.db.models.signals.pre_save`, and :data:`~django.db."
"models.signals.post_save` are called."
msgstr ""

# 119fdbe17799417bae07e4c4b401c4ae
#: ../../topics/db/models.txt:784
msgid "Executing custom SQL"
msgstr ""

# 528b8792f83444f1aaf1b0a8e7eadfee
#: ../../topics/db/models.txt:786
msgid ""
"Another common pattern is writing custom SQL statements in model methods and "
"module-level methods. For more details on using raw SQL, see the "
"documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr ""

# 789edacf98194572ad3258b61f874bc7
#: ../../topics/db/models.txt:793
msgid "Model inheritance"
msgstr ""

# 52b60dfaf7744d88b8251708fbdeaf6f
#: ../../topics/db/models.txt:795
msgid ""
"Model inheritance in Django works almost identically to the way normal class "
"inheritance works in Python. The only decision you have to make is whether "
"you want the parent models to be models in their own right (with their own "
"database tables), or if the parents are just holders of common information "
"that will only be visible through the child models."
msgstr ""

# 4d87b61e0a8a4708b19f3bbd1db96f3a
#: ../../topics/db/models.txt:802
msgid "There are three styles of inheritance that are possible in Django."
msgstr ""

# b54b2a5a2682427dbafa1be4f833e027
#: ../../topics/db/models.txt:804
msgid ""
"Often, you will just want to use the parent class to hold information that "
"you don't want to have to type out for each child model. This class isn't "
"going to ever be used in isolation, so :ref:`abstract-base-classes` are what "
"you're after."
msgstr ""

# 2a86780e39d1437e87c03cfdc3910ae2
#: ../../topics/db/models.txt:808
msgid ""
"If you're subclassing an existing model (perhaps something from another "
"application entirely) and want each model to have its own database table, :"
"ref:`multi-table-inheritance` is the way to go."
msgstr ""

# 7e401f4b9e774ca2b42839e3f5d2149d
#: ../../topics/db/models.txt:811
msgid ""
"Finally, if you only want to modify the Python-level behavior of a model, "
"without changing the models fields in any way, you can use :ref:`proxy-"
"models`."
msgstr ""

# 374d76d489a142df874f8eedb1d1c78a
#: ../../topics/db/models.txt:818
msgid "Abstract base classes"
msgstr ""

# 243035caf6d14766a8aff22298c0c34e
#: ../../topics/db/models.txt:820
msgid ""
"Abstract base classes are useful when you want to put some common "
"information into a number of other models. You write your base class and put "
"``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will "
"then not be used to create any database table. Instead, when it is used as a "
"base class for other models, its fields will be added to those of the child "
"class. It is an error to have fields in the abstract base class with the "
"same name as those in the child (and Django will raise an exception)."
msgstr ""

# 4eb814d5f3fc450485dccb96a186f06a
# 39144af1db1f4df89ab42ef409043d24
#: ../../topics/db/models.txt:829 ../../topics/i18n/translation.txt:601
msgid "An example::"
msgstr ""

# eb17b8652b1d40cfa0713ac90ea9aed1
#: ../../topics/db/models.txt:841
msgid ""
"The ``Student`` model will have three fields: ``name``, ``age`` and "
"``home_group``. The ``CommonInfo`` model cannot be used as a normal Django "
"model, since it is an abstract base class. It does not generate a database "
"table or have a manager, and cannot be instantiated or saved directly."
msgstr ""

# 19aa7260d3df40518b22653c3236bba7
#: ../../topics/db/models.txt:846
msgid ""
"For many uses, this type of model inheritance will be exactly what you want. "
"It provides a way to factor out common information at the Python level, "
"whilst still only creating one database table per child model at the "
"database level."
msgstr ""

# 9b99b503ea1b4e52bc9f136672fe2468
#: ../../topics/db/models.txt:851
msgid "``Meta`` inheritance"
msgstr ""

# 2fa7bd4e082040dc9ebd9c4b08319a49
#: ../../topics/db/models.txt:853
msgid ""
"When an abstract base class is created, Django makes any :ref:`Meta <meta-"
"options>` inner class you declared in the base class available as an "
"attribute. If a child class does not declare its own :ref:`Meta <meta-"
"options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If "
"the child wants to extend the parent's :ref:`Meta <meta-options>` class, it "
"can subclass it. For example::"
msgstr ""

# d70c4fa19ac24da49f0949f1411faf72
#: ../../topics/db/models.txt:870
msgid ""
"Django does make one adjustment to the :ref:`Meta <meta-options>` class of "
"an abstract base class: before installing the :ref:`Meta <meta-options>` "
"attribute, it sets ``abstract=False``. This means that children of abstract "
"base classes don't automatically become abstract classes themselves. Of "
"course, you can make an abstract base class that inherits from another "
"abstract base class. You just need to remember to explicitly set "
"``abstract=True`` each time."
msgstr ""

# 068a38bd77f24fceac33d581131b7466
#: ../../topics/db/models.txt:877
msgid ""
"Some attributes won't make sense to include in the :ref:`Meta <meta-"
"options>` class of an abstract base class. For example, including "
"``db_table`` would mean that all the child classes (the ones that don't "
"specify their own :ref:`Meta <meta-options>`) would use the same database "
"table, which is almost certainly not what you want."
msgstr ""

# 4891d710e32c4621b0c3b379e0fdf772
#: ../../topics/db/models.txt:885
msgid "Be careful with ``related_name``"
msgstr ""

# 9572268a6bbe494493ac36fa87be5efd
#: ../../topics/db/models.txt:887
msgid ""
"If you are using the :attr:`~django.db.models.ForeignKey.related_name` "
"attribute on a ``ForeignKey`` or ``ManyToManyField``, you must always "
"specify a *unique* reverse name for the field. This would normally cause a "
"problem in abstract base classes, since the fields on this class are "
"included into each of the child classes, with exactly the same values for "
"the attributes (including :attr:`~django.db.models.ForeignKey.related_name`) "
"each time."
msgstr ""

# e72595071fc34daa9fd8c2e8e2f7e908
#: ../../topics/db/models.txt:893
msgid ""
"To work around this problem, when you are using :attr:`~django.db.models."
"ForeignKey.related_name` in an abstract base class (only), part of the name "
"should contain ``'%(app_label)s'`` and ``'%(class)s'``."
msgstr ""

# 4e73d95e3afc401f8c7fadce2797f1a1
#: ../../topics/db/models.txt:897
msgid ""
"``'%(class)s'`` is replaced by the lower-cased name of the child class that "
"the field is used in."
msgstr ""

# f794351baadb4bbca74b211661179d95
#: ../../topics/db/models.txt:899
msgid ""
"``'%(app_label)s'`` is replaced by the lower-cased name of the app the child "
"class is contained within. Each installed application name must be unique "
"and the model class names within each app must also be unique, therefore the "
"resulting name will end up being different."
msgstr ""

# 111204a4c21d40b781488cf00de3cc81
#: ../../topics/db/models.txt:904
msgid "For example, given an app ``common/models.py``::"
msgstr ""

# 4b00fa4a416343cb89bdd849ec68049f
#: ../../topics/db/models.txt:918
msgid "Along with another app ``rare/models.py``::"
msgstr ""

# d318890624c34b30a99e4fa49b783c18
#: ../../topics/db/models.txt:925
msgid ""
"The reverse name of the ``common.ChildA.m2m`` field will be "
"``common_childa_related``, whilst the reverse name of the ``common.ChildB."
"m2m`` field will be ``common_childb_related``, and finally the reverse name "
"of the ``rare.ChildB.m2m`` field will be ``rare_childb_related``. It is up "
"to you how you use the ``'%(class)s'`` and ``'%(app_label)s`` portion to "
"construct your related name, but if you forget to use it, Django will raise "
"errors when you validate your models (or run :djadmin:`syncdb`)."
msgstr ""

# ee1a93377d154ae2a808dd60b36c480c
#: ../../topics/db/models.txt:933
msgid ""
"If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` "
"attribute for a field in an abstract base class, the default reverse name "
"will be the name of the child class followed by ``'_set'``, just as it "
"normally would be if you'd declared the field directly on the child class. "
"For example, in the above code, if the :attr:`~django.db.models.ForeignKey."
"related_name` attribute was omitted, the reverse name for the ``m2m`` field "
"would be ``childa_set`` in the ``ChildA`` case and ``childb_set`` for the "
"``ChildB`` field."
msgstr ""

# 5a2c3da5a37a4b038801694c2eebb987
#: ../../topics/db/models.txt:945
msgid "Multi-table inheritance"
msgstr ""

# 7181918b04564908a9d02f6c0ddacd8b
#: ../../topics/db/models.txt:947
msgid ""
"The second type of model inheritance supported by Django is when each model "
"in the hierarchy is a model all by itself. Each model corresponds to its own "
"database table and can be queried and created individually. The inheritance "
"relationship introduces links between the child model and each of its "
"parents (via an automatically-created :class:`~django.db.models."
"OneToOneField`). For example::"
msgstr ""

# 6af9941d5f23475aac8085463cdaeff2
#: ../../topics/db/models.txt:962
msgid ""
"All of the fields of ``Place`` will also be available in ``Restaurant``, "
"although the data will reside in a different database table. So these are "
"both possible::"
msgstr ""

# e5d6570af20443c68226c9edfedd07f6
#: ../../topics/db/models.txt:969
msgid ""
"If you have a ``Place`` that is also a ``Restaurant``, you can get from the "
"``Place`` object to the ``Restaurant`` object by using the lower-case "
"version of the model name::"
msgstr ""

# 9958214e40fd494d82b7296537c5166f
#: ../../topics/db/models.txt:978
msgid ""
"However, if ``p`` in the above example was *not* a ``Restaurant`` (it had "
"been created directly as a ``Place`` object or was the parent of some other "
"class), referring to ``p.restaurant`` would raise a Restaurant.DoesNotExist "
"exception."
msgstr ""

# 0d7f5b3900694f7790dc350ddf721b0a
#: ../../topics/db/models.txt:983
msgid "``Meta`` and multi-table inheritance"
msgstr ""

# b5033bd68f164b9c89ea0dbb107e92d1
#: ../../topics/db/models.txt:985
msgid ""
"In the multi-table inheritance situation, it doesn't make sense for a child "
"class to inherit from its parent's :ref:`Meta <meta-options>` class. All "
"the :ref:`Meta <meta-options>` options have already been applied to the "
"parent class and applying them again would normally only lead to "
"contradictory behavior (this is in contrast with the abstract base class "
"case, where the base class doesn't exist in its own right)."
msgstr ""

# cb285843af0a4f03bfa6384a218eba2e
#: ../../topics/db/models.txt:992
msgid ""
"So a child model does not have access to its parent's :ref:`Meta <meta-"
"options>` class. However, there are a few limited cases where the child "
"inherits behavior from the parent: if the child does not specify an :attr:"
"`~django.db.models.Options.ordering` attribute or a :attr:`~django.db.models."
"Options.get_latest_by` attribute, it will inherit these from its parent."
msgstr ""

# 50ef8b7d46944dc88dc0f5fabad082cc
#: ../../topics/db/models.txt:999
msgid ""
"If the parent has an ordering and you don't want the child to have any "
"natural ordering, you can explicitly disable it::"
msgstr ""

# e90c63766eb54c03a8218bd8c8fdbc2e
#: ../../topics/db/models.txt:1009
msgid "Inheritance and reverse relations"
msgstr ""

# 45c70be40261426ebe5d2bbc65ef4637
#: ../../topics/db/models.txt:1011
msgid ""
"Because multi-table inheritance uses an implicit :class:`~django.db.models."
"OneToOneField` to link the child and the parent, it's possible to move from "
"the parent down to the child, as in the above example. However, this uses up "
"the name that is the default :attr:`~django.db.models.ForeignKey."
"related_name` value for :class:`~django.db.models.ForeignKey` and :class:"
"`~django.db.models.ManyToManyField` relations.  If you are putting those "
"types of relations on a subclass of another model, you **must** specify the :"
"attr:`~django.db.models.ForeignKey.related_name` attribute on each such "
"field. If you forget, Django will raise an error when you run :djadmin:"
"`validate` or :djadmin:`syncdb`."
msgstr ""

# 8d7c3efae7e24c9382a503f0738f6938
#: ../../topics/db/models.txt:1024
msgid ""
"For example, using the above ``Place`` class again, let's create another "
"subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr ""

# c2736f13c7784b50bfcf37072654c0cd
#: ../../topics/db/models.txt:1033
msgid "Specifying the parent link field"
msgstr ""

# 11a43fe18ae94ad49ea7fe5ba1fb1d4d
#: ../../topics/db/models.txt:1035
msgid ""
"As mentioned, Django will automatically create a :class:`~django.db.models."
"OneToOneField` linking your child class back any non-abstract parent models. "
"If you want to control the name of the attribute linking back to the parent, "
"you can create your own :class:`~django.db.models.OneToOneField` and set :"
"attr:`parent_link=True <django.db.models.OneToOneField.parent_link>` to "
"indicate that your field is the link back to the parent class."
msgstr ""

# e87689fbb99043e4a972b03f19149fbc
#: ../../topics/db/models.txt:1046
msgid "Proxy models"
msgstr ""

# 8eebc6e8e14d4c48ab1485b863ec45d8
#: ../../topics/db/models.txt:1048
msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new "
"database table is created for each subclass of a model. This is usually the "
"desired behavior, since the subclass needs a place to store any additional "
"data fields that are not present on the base class. Sometimes, however, you "
"only want to change the Python behavior of a model -- perhaps to change the "
"default manager, or add a new method."
msgstr ""

# 7ac4a190e60e481d9b0cb12ae4b2ba93
#: ../../topics/db/models.txt:1055
msgid ""
"This is what proxy model inheritance is for: creating a *proxy* for the "
"original model. You can create, delete and update instances of the proxy "
"model and all the data will be saved as if you were using the original (non-"
"proxied) model. The difference is that you can change things like the "
"default model ordering or the default manager in the proxy, without having "
"to alter the original."
msgstr ""

# daa28f30b8424265b6d58d54d15f2ec4
#: ../../topics/db/models.txt:1062
msgid ""
"Proxy models are declared like normal models. You tell Django that it's a "
"proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute "
"of the ``Meta`` class to ``True``."
msgstr ""

# 8e810ab6c71d4f90ba04840ce26e6ef2
#: ../../topics/db/models.txt:1066
msgid ""
"For example, suppose you want to add a method to the ``Person`` model "
"described above. You can do it like this::"
msgstr ""

# 4c184c615a634db5addd8f3c29a2c334
#: ../../topics/db/models.txt:1076
msgid ""
"The ``MyPerson`` class operates on the same database table as its parent "
"``Person`` class. In particular, any new instances of ``Person`` will also "
"be accessible through ``MyPerson``, and vice-versa::"
msgstr ""

# 0f4025d2266c4aa68e4f9ed9e2fe9f8c
#: ../../topics/db/models.txt:1084
msgid ""
"You could also use a proxy model to define a different default ordering on a "
"model. You might not always want to order the ``Person`` model, but "
"regularly order by the ``last_name`` attribute when you use the proxy. This "
"is easy::"
msgstr ""

# a1e65bb789db4cde8b58aee7bdf3fb97
#: ../../topics/db/models.txt:1093
msgid ""
"Now normal ``Person`` queries will be unordered and ``OrderedPerson`` "
"queries will be ordered by ``last_name``."
msgstr ""

# bac7b940949642cc824db0507dcc9cec
#: ../../topics/db/models.txt:1097
msgid "QuerySets still return the model that was requested"
msgstr ""

# 4b708d9e717f4bd58cbd80c2e07114a0
#: ../../topics/db/models.txt:1099
msgid ""
"There is no way to have Django return, say, a ``MyPerson`` object whenever "
"you query for ``Person`` objects. A queryset for ``Person`` objects will "
"return those types of objects. The whole point of proxy objects is that code "
"relying on the original ``Person`` will use those and your own code can use "
"the extensions you included (that no other code is relying on anyway). It is "
"not a way to replace the ``Person`` (or any other) model everywhere with "
"something of your own creation."
msgstr ""

# dbf8241836a5473cbe8508d5d4168323
#: ../../topics/db/models.txt:1108
msgid "Base class restrictions"
msgstr ""

# 3fc5f511393a48948511865fd4ecc22c
#: ../../topics/db/models.txt:1110
msgid ""
"A proxy model must inherit from exactly one non-abstract model class. You "
"can't inherit from multiple non-abstract models as the proxy model doesn't "
"provide any connection between the rows in the different database tables. A "
"proxy model can inherit from any number of abstract model classes, providing "
"they do *not* define any model fields."
msgstr ""

# 75a7c091535b4c729d494ae5fa9c8c9c
#: ../../topics/db/models.txt:1116
msgid ""
"Proxy models inherit any ``Meta`` options that they don't define from their "
"non-abstract model parent (the model they are proxying for)."
msgstr ""

# 1a70f1a6511641c3ab3710dabf1f7a90
#: ../../topics/db/models.txt:1120
msgid "Proxy model managers"
msgstr ""

# cde9bd07bcda4b79abf89777fafc05bf
#: ../../topics/db/models.txt:1122
msgid ""
"If you don't specify any model managers on a proxy model, it inherits the "
"managers from its model parents. If you define a manager on the proxy model, "
"it will become the default, although any managers defined on the parent "
"classes will still be available."
msgstr ""

# e4254d2552b442199196274e3209283b
#: ../../topics/db/models.txt:1127
msgid ""
"Continuing our example from above, you could change the default manager used "
"when you query the ``Person`` model like this::"
msgstr ""

# 773c47bcf5484d21ad5983e95211fba5
#: ../../topics/db/models.txt:1139
msgid ""
"If you wanted to add a new manager to the Proxy, without replacing the "
"existing default, you can use the techniques described in the :ref:`custom "
"manager <custom-managers-and-inheritance>` documentation: create a base "
"class containing the new managers and inherit that after the primary base "
"class::"
msgstr ""

# c324af30a66a498c82eb0690aae59af5
#: ../../topics/db/models.txt:1155
msgid ""
"You probably won't need to do this very often, but, when you do, it's "
"possible."
msgstr ""

# d8212feb207c4d35ac89f65aef680493
#: ../../topics/db/models.txt:1161
msgid "Differences between proxy inheritance and  unmanaged models"
msgstr ""

# a4a6530dac8c4a5d9428798033c8f152
#: ../../topics/db/models.txt:1163
msgid ""
"Proxy model inheritance might look fairly similar to creating an unmanaged "
"model, using the :attr:`~django.db.models.Options.managed` attribute on a "
"model's ``Meta`` class. The two alternatives are not quite the same and it's "
"worth considering which one you should use."
msgstr ""

# 2fcaa584a50f4b2092f23c418808860a
#: ../../topics/db/models.txt:1168
msgid ""
"One difference is that you can (and, in fact, must unless you want an empty "
"model) specify model fields on models with ``Meta.managed=False``. You "
"could, with careful setting of :attr:`Meta.db_table <django.db.models."
"Options.db_table>` create an unmanaged model that shadowed an existing model "
"and add Python methods to it. However, that would be very repetitive and "
"fragile as you need to keep both copies synchronized if you make any changes."
msgstr ""

# ce196571fed343dbac4225248c280680
#: ../../topics/db/models.txt:1176
msgid ""
"The other difference that is more important for proxy models, is how model "
"managers are handled. Proxy models are intended to behave exactly like the "
"model they are proxying for. So they inherit the parent model's managers, "
"including the default manager. In the normal multi-table model inheritance "
"case, children do not inherit managers from their parents as the custom "
"managers aren't always appropriate when extra fields are involved. The :ref:"
"`manager documentation <custom-managers-and-inheritance>` has more details "
"about this latter case."
msgstr ""

# 04b8a44c35454458af0da47d5040be8b
#: ../../topics/db/models.txt:1185
msgid ""
"When these two features were implemented, attempts were made to squash them "
"into a single option. It turned out that interactions with inheritance, in "
"general, and managers, in particular, made the API very complicated and "
"potentially difficult to understand and use. It turned out that two options "
"were needed in any case, so the current separation arose."
msgstr ""

# d3ba78cc891e4a2dad89fe7736081ce2
#: ../../topics/db/models.txt:1191
msgid "So, the general rules are:"
msgstr ""

# e7ff6e3b0c7f4e7aaec1b0701b5ed6bb
#: ../../topics/db/models.txt:1193
msgid ""
"If you are mirroring an existing model or database table and don't want all "
"the original database table columns, use ``Meta.managed=False``. That option "
"is normally useful for modeling database views and tables not under the "
"control of Django."
msgstr ""

# c7e7162956c34dc4bc9bd25aac5487c6
#: ../../topics/db/models.txt:1197
msgid ""
"If you are wanting to change the Python-only behavior of a model, but keep "
"all the same fields as in the original, use ``Meta.proxy=True``. This sets "
"things up so that the proxy model is an exact copy of the storage structure "
"of the original model when data is saved."
msgstr ""

# 0911843029b14029ace311645a6c5a0b
#: ../../topics/db/models.txt:1203
msgid "Multiple inheritance"
msgstr ""

# f4ef651b4c2d4611be351d7d7153bd54
#: ../../topics/db/models.txt:1205
msgid ""
"Just as with Python's subclassing, it's possible for a Django model to "
"inherit from multiple parent models. Keep in mind that normal Python name "
"resolution rules apply. The first base class that a particular name (e.g. :"
"ref:`Meta <meta-options>`) appears in will be the one that is used; for "
"example, this means that if multiple parents contain a :ref:`Meta <meta-"
"options>` class, only the first one is going to be used, and all others will "
"be ignored."
msgstr ""

# 221120fa2c5742cb9c129c9e6f861612
#: ../../topics/db/models.txt:1212
msgid ""
"Generally, you won't need to inherit from multiple parents. The main use-"
"case where this is useful is for \"mix-in\" classes: adding a particular "
"extra field or method to every class that inherits the mix-in. Try to keep "
"your inheritance hierarchies as simple and straightforward as possible so "
"that you won't have to struggle to work out where a particular piece of "
"information is coming from."
msgstr ""

# a48955ee51f44a04bacd3c47789bf48a
#: ../../topics/db/models.txt:1220
msgid "Field name \"hiding\" is not permitted"
msgstr ""

# 66dc55ee6780444188febc4acba02a29
#: ../../topics/db/models.txt:1222
msgid ""
"In normal Python class inheritance, it is permissible for a child class to "
"override any attribute from the parent class. In Django, this is not "
"permitted for attributes that are :class:`~django.db.models.Field` instances "
"(at least, not at the moment). If a base class has a field called "
"``author``, you cannot create another model field called ``author`` in any "
"class that inherits from that base class."
msgstr ""

# 31b1520edf9a46829fad48785600e022
#: ../../topics/db/models.txt:1229
msgid ""
"Overriding fields in a parent model leads to difficulties in areas such as "
"initializing new instances (specifying which field is being initialized in "
"``Model.__init__``) and serialization. These are features which normal "
"Python class inheritance doesn't have to deal with in quite the same way, so "
"the difference between Django model inheritance and Python class inheritance "
"isn't arbitrary."
msgstr ""

# 17bae3003325494997504f7fd1cdbd73
#: ../../topics/db/models.txt:1236
msgid ""
"This restriction only applies to attributes which are :class:`~django.db."
"models.Field` instances. Normal Python attributes can be overridden if you "
"wish. It also only applies to the name of the attribute as Python sees it: "
"if you are manually specifying the database column name, you can have the "
"same column name appearing in both a child and an ancestor model for multi-"
"table inheritance (they are columns in two different database tables)."
msgstr ""

# 73b5597d391948b7b10a80efc50aa922
#: ../../topics/db/models.txt:1244
msgid ""
"Django will raise a :exc:`~django.core.exceptions.FieldError` if you "
"override any model field in any ancestor model."
msgstr ""

# cb9d2d64b16a463fa6ab1855d1de4294
#: ../../topics/db/multi-db.txt:3
msgid "Multiple databases"
msgstr ""

# 6e9ed418a8564cc982c7fe724aaa890a
#: ../../topics/db/multi-db.txt:5
msgid ""
"This topic guide describes Django's support for interacting with multiple "
"databases. Most of the rest of Django's documentation assumes you are "
"interacting with a single database. If you want to interact with multiple "
"databases, you'll need to take some additional steps."
msgstr ""

# d3f842fbf1424e1f87008587e3e0660a
#: ../../topics/db/multi-db.txt:11
msgid "Defining your databases"
msgstr ""

# e7df0b4183f94f45bdcbb439c0e0bdb0
#: ../../topics/db/multi-db.txt:13
msgid ""
"The first step to using more than one database with Django is to tell Django "
"about the database servers you'll be using. This is done using the :setting:"
"`DATABASES` setting. This setting maps database aliases, which are a way to "
"refer to a specific database throughout Django, to a dictionary of settings "
"for that specific connection. The settings in the inner dictionaries are "
"described fully in the :setting:`DATABASES` documentation."
msgstr ""

# 6888723c4cd149108e35aa8eb894ecf9
#: ../../topics/db/multi-db.txt:21
msgid ""
"Databases can have any alias you choose. However, the alias ``default`` has "
"special significance. Django uses the database with the alias of ``default`` "
"when no other database has been selected."
msgstr ""

# 101eacfe518a498f84ac46e2b2756e11
#: ../../topics/db/multi-db.txt:25
msgid ""
"The following is an example ``settings.py`` snippet defining two databases "
"-- a default PostgreSQL database and a MySQL database called ``users``:"
msgstr ""

# 437503a8784940db8d2b433936b8c6c4
#: ../../topics/db/multi-db.txt:46
msgid ""
"If the concept of a ``default`` database doesn't make sense in the context "
"of your project, you need to be careful to always specify the database that "
"you want to use. Django requires that a ``default`` database entry be "
"defined, but the parameters dictionary can be left blank if it will not be "
"used. The following is an example ``settings.py`` snippet defining two non-"
"default databases, with the ``default`` entry intentionally left empty::"
msgstr ""

# 7df98f06ef2943bcb649dd4b29d8d652
#: ../../topics/db/multi-db.txt:69
msgid ""
"If you attempt to access a database that you haven't defined in your :"
"setting:`DATABASES` setting, Django will raise a ``django.db.utils."
"ConnectionDoesNotExist`` exception."
msgstr ""

# 7e31238b2cfb4a0c9711fde2be64f951
#: ../../topics/db/multi-db.txt:74
msgid "Synchronizing your databases"
msgstr ""

# 41b723fc91d94fefb59a48f9a3fbbb87
#: ../../topics/db/multi-db.txt:76
msgid ""
"The :djadmin:`syncdb` management command operates on one database at a time. "
"By default, it operates on the ``default`` database, but by providing a :"
"djadminopt:`--database` argument, you can tell syncdb to synchronize a "
"different database. So, to synchronize all models onto all databases in our "
"example, you would need to call::"
msgstr ""

# 13920dbffdd34e9092ec6f1718ffb2c5
#: ../../topics/db/multi-db.txt:85
msgid ""
"If you don't want every application to be synchronized onto a particular "
"database, you can define a :ref:`database router<topics-db-multi-db-"
"routing>` that implements a policy constraining the availability of "
"particular models."
msgstr ""

# 9a7fa2b55bdb47b6bd9fcc9467843398
#: ../../topics/db/multi-db.txt:90
msgid ""
"Alternatively, if you want fine-grained control of synchronization, you can "
"pipe all or part of the output of :djadmin:`sqlall` for a particular "
"application directly into your database prompt, like this::"
msgstr ""

# 3b7cd6fd01eb453683e1258a2abb23ab
#: ../../topics/db/multi-db.txt:97
msgid "Using other management commands"
msgstr ""

# 50fb4184f682421ba703227d15f00068
#: ../../topics/db/multi-db.txt:99
msgid ""
"The other ``django-admin.py`` commands that interact with the database "
"operate in the same way as :djadmin:`syncdb` -- they only ever operate on "
"one database at a time, using :djadminopt:`--database` to control the "
"database used."
msgstr ""

# 45d82778b3164afda0d1c62a9527b6e7
#: ../../topics/db/multi-db.txt:107
msgid "Automatic database routing"
msgstr ""

# 03c7326320ae4f3498f8169f6dc40713
#: ../../topics/db/multi-db.txt:109
msgid ""
"The easiest way to use multiple databases is to set up a database routing "
"scheme. The default routing scheme ensures that objects remain 'sticky' to "
"their original database (i.e., an object retrieved from the ``foo`` database "
"will be saved on the same database). The default routing scheme ensures that "
"if a database isn't specified, all queries fall back to the ``default`` "
"database."
msgstr ""

# 69f266b886ed4878a822d91a304c6a61
#: ../../topics/db/multi-db.txt:116
msgid ""
"You don't have to do anything to activate the default routing scheme -- it "
"is provided 'out of the box' on every Django project. However, if you want "
"to implement more interesting database allocation behaviors, you can define "
"and install your own database routers."
msgstr ""

# 775a54d011c24b83a8179a69a756f2ed
#: ../../topics/db/multi-db.txt:122
msgid "Database routers"
msgstr ""

# 2e12a4c86e4f429f80faf1a64ca7fc99
#: ../../topics/db/multi-db.txt:124
msgid "A database Router is a class that provides up to four methods:"
msgstr ""

# 5a767ff735ed4941ac0f234bf2eda18d
#: ../../topics/db/multi-db.txt:128
msgid ""
"Suggest the database that should be used for read operations for objects of "
"type ``model``."
msgstr ""

# 5ccbbcc90d94477495aac28e3b2f9db7
# 0e1d25ae26c8414a839c726045e2ae5a
#: ../../topics/db/multi-db.txt:131 ../../topics/db/multi-db.txt:143
msgid ""
"If a database operation is able to provide any additional information that "
"might assist in selecting a database, it will be provided in the ``hints`` "
"dictionary. Details on valid hints are provided :ref:`below <topics-db-multi-"
"db-hints>`."
msgstr ""

# a311454dcc60425bb4abe9653d15ad7d
# f86e3bd969164ecd86664f792342cfeb
#: ../../topics/db/multi-db.txt:136 ../../topics/db/multi-db.txt:148
msgid "Returns None if there is no suggestion."
msgstr ""

# 2d239d3ed1a943668f0243991e6fccb3
#: ../../topics/db/multi-db.txt:140
msgid ""
"Suggest the database that should be used for writes of objects of type Model."
msgstr ""

# 39fc4e92d2414fec8b75792fa4d95b88
#: ../../topics/db/multi-db.txt:152
msgid ""
"Return True if a relation between obj1 and obj2 should be allowed, False if "
"the relation should be prevented, or None if the router has no opinion. This "
"is purely a validation operation, used by foreign key and many to many "
"operations to determine if a relation should be allowed between two objects."
msgstr ""

# 7506f8ab8707437fa4d3992465f5417a
#: ../../topics/db/multi-db.txt:160
msgid ""
"Determine if the ``model`` should be synchronized onto the database with "
"alias ``db``. Return True if the model should be synchronized, False if it "
"should not be synchronized, or None if the router has no opinion. This "
"method can be used to determine the availability of a model on a given "
"database."
msgstr ""

# fedf2bf6cf334d539b7dd4709e1d5caf
#: ../../topics/db/multi-db.txt:166
msgid ""
"A router doesn't have to provide *all* these methods -- it may omit one or "
"more of them. If one of the methods is omitted, Django will skip that router "
"when performing the relevant check."
msgstr ""

# 56705a8eb5634afd9cffa6c21bdaa7d8
#: ../../topics/db/multi-db.txt:173
msgid "Hints"
msgstr ""

# 28f2dda97e804660ad9f0c17241ca285
#: ../../topics/db/multi-db.txt:175
msgid ""
"The hints received by the database router can be used to decide which "
"database should receive a given request."
msgstr ""

# 16ce6612428e47adaca077eca1169643
#: ../../topics/db/multi-db.txt:178
msgid ""
"At present, the only hint that will be provided is ``instance``, an object "
"instance that is related to the read or write operation that is underway. "
"This might be the instance that is being saved, or it might be an instance "
"that is being added in a many-to-many relation. In some cases, no instance "
"hint will be provided at all. The router checks for the existence of an "
"instance hint, and determine if that hint should be used to alter routing "
"behavior."
msgstr ""

# 0cab37898aa74c25be2bc5780de9a324
#: ../../topics/db/multi-db.txt:187
msgid "Using routers"
msgstr ""

# 74919e4efc9e4267ba53ca361c35ad5f
#: ../../topics/db/multi-db.txt:189
msgid ""
"Database routers are installed using the :setting:`DATABASE_ROUTERS` "
"setting. This setting defines a list of class names, each specifying a "
"router that should be used by the master router (``django.db.router``)."
msgstr ""

# 27caa06c32104389b821c4b67342755a
#: ../../topics/db/multi-db.txt:194
msgid ""
"The master router is used by Django's database operations to allocate "
"database usage. Whenever a query needs to know which database to use, it "
"calls the master router, providing a model and a hint (if available). Django "
"then tries each router in turn until a database suggestion can be found. If "
"no suggestion can be found, it tries the current ``_state.db`` of the hint "
"instance. If a hint instance wasn't provided, or the instance doesn't "
"currently have database state, the master router will allocate the "
"``default`` database."
msgstr ""

# 1e228e67ccf744c39d6044a5462499f7
# 7485199b2acf4ae3b01f7bddaeb91cd9
# 2beaac5f576641c09602843984a3ad12
#: ../../topics/db/multi-db.txt:204 ../../topics/db/tablespaces.txt:45
#: ../../topics/logging.txt:240
msgid "An example"
msgstr ""

# d01c17bd0eb349a3842152d609b47171
#: ../../topics/db/multi-db.txt:206
msgid "Example purposes only!"
msgstr ""

# 293176d0f8e64d78a21b57c6c530c1d2
#: ../../topics/db/multi-db.txt:208
msgid ""
"This example is intended as a demonstration of how the router infrastructure "
"can be used to alter database usage. It intentionally ignores some complex "
"issues in order to demonstrate how routers are used."
msgstr ""

# 5d24d704e74b46f993103372d3f1f33a
#: ../../topics/db/multi-db.txt:213
msgid ""
"This example won't work if any of the models in ``myapp`` contain "
"relationships to models outside of the ``other`` database. :ref:`Cross-"
"database relationships <no_cross_database_relations>` introduce referential "
"integrity problems that Django can't currently handle."
msgstr ""

# 17f938663909407196627136e4dc354b
#: ../../topics/db/multi-db.txt:219
msgid ""
"The master/slave configuration described is also flawed -- it doesn't "
"provide any solution for handling replication lag (i.e., query "
"inconsistencies introduced because of the time taken for a write to "
"propagate to the slaves). It also doesn't consider the interaction of "
"transactions with the database utilization strategy."
msgstr ""

# 719478dc860242b8a6f999288440c112
#: ../../topics/db/multi-db.txt:225
msgid ""
"So - what does this mean in practice? Let's consider another sample "
"configuration. This one will have several databases: one for the ``auth`` "
"application, and all other apps using a master/slave setup with two read "
"slaves. Here are the settings specifying these databases::"
msgstr ""

# 95e306ea5325456db27514cbeefcf93d
#: ../../topics/db/multi-db.txt:258
msgid ""
"Now we'll need to handle routing. First we want a router that knows to send "
"queries for the ``auth`` app to ``auth_db``::"
msgstr ""

# f9783db2786f4831b3a8effceb67a5db
#: ../../topics/db/multi-db.txt:302
msgid ""
"And we also want a router that sends all other apps to the master/slave "
"configuration, and randomly chooses a slave to read from::"
msgstr ""

# a49bf9eb38074c19845d8e9c3ddc90bc
#: ../../topics/db/multi-db.txt:337
msgid ""
"Finally, in the settings file, we add the following (substituting ``path.to."
"`` with the actual python path to the module(s) where the routers are "
"defined)::"
msgstr ""

# 0020082116cc4a3ba2221dffd36e1427
#: ../../topics/db/multi-db.txt:343
msgid ""
"The order in which routers are processed is significant. Routers will be "
"queried in the order the are listed in the :setting:`DATABASE_ROUTERS` "
"setting . In this example, the ``AuthRouter`` is processed before the "
"``MasterSlaveRouter``, and as a result, decisions concerning the models in "
"``auth`` are processed before any other decision is made. If the :setting:"
"`DATABASE_ROUTERS` setting listed the two routers in the other order, "
"``MasterSlaveRouter.allow_syncdb()`` would be processed first. The catch-all "
"nature of the MasterSlaveRouter implementation would mean that all models "
"would be available on all databases."
msgstr ""

# 6636ed9867964ef8b76c6ade697db685
#: ../../topics/db/multi-db.txt:354
msgid "With this setup installed, lets run some Django code::"
msgstr ""

# 27ed493a2bc74f30b60bb66c026eb7ef
#: ../../topics/db/multi-db.txt:381
msgid "Manually selecting a database"
msgstr ""

# 1698302b1d574ec8b7c94642b38ed202
#: ../../topics/db/multi-db.txt:383
msgid ""
"Django also provides an API that allows you to maintain complete control "
"over database usage in your code. A manually specified database allocation "
"will take priority over a database allocated by a router."
msgstr ""

# 1c94b8e7e52c46c09d9b7a7a57e5434d
#: ../../topics/db/multi-db.txt:388
msgid "Manually selecting a database for a ``QuerySet``"
msgstr ""

# 5ef4e0cd81084cbe9f8d35b0696ff4fb
#: ../../topics/db/multi-db.txt:390
msgid ""
"You can select the database for a ``QuerySet`` at any point in the "
"``QuerySet`` \"chain.\" Just call ``using()`` on the ``QuerySet`` to get "
"another ``QuerySet`` that uses the specified database."
msgstr ""

# c7833081e6df4958a5be628616c118e4
#: ../../topics/db/multi-db.txt:394
msgid ""
"``using()`` takes a single argument: the alias of the database on which you "
"want to run the query. For example::"
msgstr ""

# e4de6a6a52e94e369304674450a4ce2b
#: ../../topics/db/multi-db.txt:407
msgid "Selecting a database for ``save()``"
msgstr ""

# 444785d11ff64f7db5803d9f89bcc558
#: ../../topics/db/multi-db.txt:409
msgid ""
"Use the ``using`` keyword to ``Model.save()`` to specify to which database "
"the data should be saved."
msgstr ""

# 9f4d187080e144d59bc4bb2f14011409
#: ../../topics/db/multi-db.txt:412
msgid ""
"For example, to save an object to the ``legacy_users`` database, you'd use "
"this::"
msgstr ""

# 54cb35ce54ed45528066248169f66f2a
#: ../../topics/db/multi-db.txt:417
msgid ""
"If you don't specify ``using``, the ``save()`` method will save into the "
"default database allocated by the routers."
msgstr ""

# 4dd51dcf3ce242b38390f16717f50485
#: ../../topics/db/multi-db.txt:421
msgid "Moving an object from one database to another"
msgstr ""

# 22416ea6a1a64ce1b6610869c3a91e4c
#: ../../topics/db/multi-db.txt:423
msgid ""
"If you've saved an instance to one database, it might be tempting to use "
"``save(using=...)`` as a way to migrate the instance to a new database. "
"However, if you don't take appropriate steps, this could have some "
"unexpected consequences."
msgstr ""

# b510cb59ce7a484e95496a1cb0e5769d
#: ../../topics/db/multi-db.txt:428
msgid "Consider the following example::"
msgstr ""

# 4fbfb8737d264b4a91b282f0e49b3ec1
#: ../../topics/db/multi-db.txt:434
msgid ""
"In statement 1, a new ``Person`` object is saved to the ``first`` database. "
"At this time, ``p`` doesn't have a primary key, so Django issues a SQL "
"``INSERT`` statement. This creates a primary key, and Django assigns that "
"primary key to ``p``."
msgstr ""

# 6d43a97e4d324d8cb3bd2238addad8c2
#: ../../topics/db/multi-db.txt:439
msgid ""
"When the save occurs in statement 2, ``p`` already has a primary key value, "
"and Django will attempt to use that primary key on the new database. If the "
"primary key value isn't in use in the ``second`` database, then you won't "
"have any problems -- the object will be copied to the new database."
msgstr ""

# 3f7e3bb3a30041e68e637a8fb3608124
#: ../../topics/db/multi-db.txt:445
msgid ""
"However, if the primary key of ``p`` is already in use on the ``second`` "
"database, the existing object in the ``second`` database will be overridden "
"when ``p`` is saved."
msgstr ""

# 689b83f5e8144a12a1812f1d1c4a81a5
#: ../../topics/db/multi-db.txt:449
msgid ""
"You can avoid this in two ways. First, you can clear the primary key of the "
"instance. If an object has no primary key, Django will treat it as a new "
"object, avoiding any loss of data on the ``second`` database::"
msgstr ""

# f2082d1750b54a4db039fa0f759d6f91
#: ../../topics/db/multi-db.txt:459
msgid ""
"The second option is to use the ``force_insert`` option to ``save()`` to "
"ensure that Django does a SQL ``INSERT``::"
msgstr ""

# 89729fe881d749878bbe74a5782df3a9
#: ../../topics/db/multi-db.txt:466
msgid ""
"This will ensure that the person named ``Fred`` will have the same primary "
"key on both databases. If that primary key is already in use when you try to "
"save onto the ``second`` database, an error will be raised."
msgstr ""

# a680c5772969405b8b114ef4c8734c14
#: ../../topics/db/multi-db.txt:472
msgid "Selecting a database to delete from"
msgstr ""

# ef50d2a088224edeaa3ba58b4be7c2b9
#: ../../topics/db/multi-db.txt:474
msgid ""
"By default, a call to delete an existing object will be executed on the same "
"database that was used to retrieve the object in the first place::"
msgstr ""

# a2cc50fcb7cc405da30a69a0942159ec
#: ../../topics/db/multi-db.txt:481
msgid ""
"To specify the database from which a model will be deleted, pass a ``using`` "
"keyword argument to the ``Model.delete()`` method. This argument works just "
"like the ``using`` keyword argument to ``save()``."
msgstr ""

# 18d62d3b80be441dbd64985892917ba5
#: ../../topics/db/multi-db.txt:485
msgid ""
"For example, if you're migrating a user from the ``legacy_users`` database "
"to the ``new_users`` database, you might use these commands::"
msgstr ""

# 11ed7a34a8304f53810c5bc12d31cdbe
#: ../../topics/db/multi-db.txt:492
msgid "Using managers with multiple databases"
msgstr ""

# 951700bfabef435faae399f2b344edb2
#: ../../topics/db/multi-db.txt:494
msgid ""
"Use the ``db_manager()`` method on managers to give managers access to a non-"
"default database."
msgstr ""

# 5d448bd56b9e432fb6b24aa13d0570fb
#: ../../topics/db/multi-db.txt:497
msgid ""
"For example, say you have a custom manager method that touches the database "
"-- ``User.objects.create_user()``. Because ``create_user()`` is a manager "
"method, not a ``QuerySet`` method, you can't do ``User.objects."
"using('new_users').create_user()``. (The ``create_user()`` method is only "
"available on ``User.objects``, the manager, not on ``QuerySet`` objects "
"derived from the manager.) The solution is to use ``db_manager()``, like "
"this::"
msgstr ""

# 9bdcda97b68d4684910eba0849af28d0
#: ../../topics/db/multi-db.txt:507
msgid ""
"``db_manager()`` returns a copy of the manager bound to the database you "
"specify."
msgstr ""

# 982a41ec9dbd44cca5fc593f25ee4472
#: ../../topics/db/multi-db.txt:510
msgid "Using ``get_query_set()`` with multiple databases"
msgstr ""

# e9d71eb9eb794d67a94a961dc4b71276
#: ../../topics/db/multi-db.txt:512
msgid ""
"If you're overriding ``get_query_set()`` on your manager, be sure to either "
"call the method on the parent (using ``super()``) or do the appropriate "
"handling of the ``_db`` attribute on the manager (a string containing the "
"name of the database to use)."
msgstr ""

# e1a23170a6a149239b2e18d4e7595c9c
#: ../../topics/db/multi-db.txt:517
msgid ""
"For example, if you want to return a custom ``QuerySet`` class from the "
"``get_query_set`` method, you could do this::"
msgstr ""

# 0e7b7f7fead5468bbe18235b704ac56e
#: ../../topics/db/multi-db.txt:528
msgid "Exposing multiple databases in Django's admin interface"
msgstr ""

# 02a7d74c84454fc9973f42357a0ac497
#: ../../topics/db/multi-db.txt:530
msgid ""
"Django's admin doesn't have any explicit support for multiple databases. If "
"you want to provide an admin interface for a model on a database other than "
"that specified by your router chain, you'll need to write custom :class:"
"`~django.contrib.admin.ModelAdmin` classes that will direct the admin to use "
"a specific database for content."
msgstr ""

# 3cac26eabcb84e729985da32889508be
#: ../../topics/db/multi-db.txt:536
msgid ""
"``ModelAdmin`` objects have five methods that require customization for "
"multiple-database support::"
msgstr ""

# f4acd1177391441a947a6f45b6809f1e
#: ../../topics/db/multi-db.txt:565
msgid ""
"The implementation provided here implements a multi-database strategy where "
"all objects of a given type are stored on a specific database (e.g., all "
"``User`` objects are in the ``other`` database). If your usage of multiple "
"databases is more complex, your ``ModelAdmin`` will need to reflect that "
"strategy."
msgstr ""

# a6580fdae51d42e79fbdbc6158f12749
#: ../../topics/db/multi-db.txt:571
msgid ""
"Inlines can be handled in a similar fashion. They require three customized "
"methods::"
msgstr ""

# a17a32aa417547d9bbd06095f15a1a43
#: ../../topics/db/multi-db.txt:590
msgid ""
"Once you've written your model admin definitions, they can be registered "
"with any ``Admin`` instance::"
msgstr ""

# a14201adbed948d6a300e621cb6e3749
#: ../../topics/db/multi-db.txt:608
msgid ""
"This example sets up two admin sites. On the first site, the ``Author`` and "
"``Publisher`` objects are exposed; ``Publisher`` objects have an tabular "
"inline showing books published by that publisher. The second site exposes "
"just publishers, without the inlines."
msgstr ""

# 71f94833c2a1494ab6fbe11621783bd9
#: ../../topics/db/multi-db.txt:615
msgid "Using raw cursors with multiple databases"
msgstr ""

# 5e9d98d197004a85bb9be9b77efd7db1
#: ../../topics/db/multi-db.txt:617
msgid ""
"If you are using more than one database you can use ``django.db."
"connections`` to obtain the connection (and cursor) for a specific database. "
"``django.db.connections`` is a dictionary-like object that allows you to "
"retrieve a specific connection using its alias::"
msgstr ""

# f7fbf20b72cd43e68067e587954cef31
#: ../../topics/db/multi-db.txt:627
msgid "Limitations of multiple databases"
msgstr ""

# 0552e5bc93e844d3ba8ebda3e9cbf4d4
#: ../../topics/db/multi-db.txt:632
msgid "Cross-database relations"
msgstr ""

# 1542af1a2d2d47049d151e41114c4fbc
#: ../../topics/db/multi-db.txt:634
msgid ""
"Django doesn't currently provide any support for foreign key or many-to-many "
"relationships spanning multiple databases. If you have used a router to "
"partition models to different databases, any foreign key and many-to-many "
"relationships defined by those models must be internal to a single database."
msgstr ""

# bcefb2f3f79d4f50bdb254ad2d8dd3cc
#: ../../topics/db/multi-db.txt:640
msgid ""
"This is because of referential integrity. In order to maintain a "
"relationship between two objects, Django needs to know that the primary key "
"of the related object is valid. If the primary key is stored on a separate "
"database, it's not possible to easily evaluate the validity of a primary key."
msgstr ""

# f7968e1a26e8463bbb86cbb46c902ebd
#: ../../topics/db/multi-db.txt:646
msgid ""
"If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at "
"the database integrity level -- database level key constraints prevent the "
"creation of relations that can't be validated."
msgstr ""

# 1ad825bfc3754da68343c3476d23557c
#: ../../topics/db/multi-db.txt:650
msgid ""
"However, if you're using SQLite or MySQL with MyISAM tables, there is no "
"enforced referential integrity; as a result, you may be able to 'fake' cross "
"database foreign keys. However, this configuration is not officially "
"supported by Django."
msgstr ""

# fc7197f51da2418ca2085c10759cc70b
#: ../../topics/db/multi-db.txt:658
msgid "Behavior of contrib apps"
msgstr ""

# 2e78949a3b2646f6a2138b66a80255b4
#: ../../topics/db/multi-db.txt:660
msgid ""
"Several contrib apps include models, and some apps depend on others. Since "
"cross-database relationships are impossible, this creates some restrictions "
"on how you can split these models across databases:"
msgstr ""

# 1674177f358c4d2099309712488369fb
#: ../../topics/db/multi-db.txt:664
msgid ""
"each one of ``contenttypes.ContentType``, ``sessions.Session`` and ``sites."
"Site`` can be stored in any database, given a suitable router."
msgstr ""

# 06aa42a6c9f4409199a9e50ab5505e6a
#: ../../topics/db/multi-db.txt:666
msgid ""
"``auth`` models — ``User``, ``Group`` and ``Permission`` — are linked "
"together and linked to ``ContentType``, so they must be stored in the same "
"database as ``ContentType``."
msgstr ""

# 7a44ef39c0634b02bbf0da90d3941e3f
#: ../../topics/db/multi-db.txt:669
msgid ""
"``admin`` and ``comments`` depend on ``auth``, so their models must be in "
"the same database as ``auth``."
msgstr ""

# 1fd681efe24849ffbced419b2653e878
#: ../../topics/db/multi-db.txt:671
msgid ""
"``flatpages`` and ``redirects`` depend on ``sites``, so their models must be "
"in the same database as ``sites``."
msgstr ""

# a839d32f04e64cbb9946b2553b69270d
#: ../../topics/db/multi-db.txt:674
msgid ""
"In addition, some objects are automatically created just after :djadmin:"
"`syncdb` creates a table to hold them in a database:"
msgstr ""

# 2c4fe64db9a742a6923b36c29141e03f
#: ../../topics/db/multi-db.txt:677
msgid "a default ``Site``,"
msgstr ""

# abbaf4e6c4024a0c8bc2241b2e0447eb
#: ../../topics/db/multi-db.txt:678
msgid ""
"a ``ContentType`` for each model (including those not stored in that "
"database),"
msgstr ""

# b2038c6f61b848e7ad44876a35c9b63e
#: ../../topics/db/multi-db.txt:680
msgid ""
"three ``Permission`` for each model (including those not stored in that "
"database)."
msgstr ""

# 5511307cd3c8496e8e26fc21f831b042
#: ../../topics/db/multi-db.txt:687
msgid ""
"For common setups with multiple databases, it isn't useful to have these "
"objects in more than one database. Common setups include master / slave and "
"connecting to external databases. Therefore, it's recommended:"
msgstr ""

# 482fcf6cbcda49fcbfb211db9634607c
#: ../../topics/db/multi-db.txt:691
msgid "either to run :djadmin:`syncdb` only for the default database;"
msgstr ""

# f991a14f20e04c0082f78e349e97c904
#: ../../topics/db/multi-db.txt:692
msgid ""
"or to write :ref:`database router<topics-db-multi-db-routing>` that allows "
"synchronizing these three models only to one database."
msgstr ""

# adb92e1a113b4930a693123c359cbee2
#: ../../topics/db/multi-db.txt:697
msgid ""
"If you're synchronizing content types to more that one database, be aware "
"that their primary keys may not match across databases. This may result in "
"data corruption or data loss."
msgstr ""

# 1626d0bbec4f42c7a4163754498b98c7
#: ../../topics/db/optimization.txt:3
msgid "Database access optimization"
msgstr ""

# 5cd02917ec1a414aa755d2d99a8c1e0d
#: ../../topics/db/optimization.txt:5
msgid ""
"Django's database layer provides various ways to help developers get the "
"most out of their databases. This document gathers together links to the "
"relevant documentation, and adds various tips, organized under a number of "
"headings that outline the steps to take when attempting to optimize your "
"database usage."
msgstr ""

# 5d8237fad1f84303930977e46e1c2eb4
#: ../../topics/db/optimization.txt:11
msgid "Profile first"
msgstr ""

# 9aadd2e67805431eaf37fcd6b154ccf7
#: ../../topics/db/optimization.txt:13
msgid ""
"As general programming practice, this goes without saying. Find out :ref:"
"`what queries you are doing and what they are costing you <faq-see-raw-sql-"
"queries>`. You may also want to use an external project like django-debug-"
"toolbar_, or a tool that monitors your database directly."
msgstr ""

# e36559de2430428784517dd80925f202
#: ../../topics/db/optimization.txt:18
msgid ""
"Remember that you may be optimizing for speed or memory or both, depending "
"on your requirements. Sometimes optimizing for one will be detrimental to "
"the other, but sometimes they will help each other. Also, work that is done "
"by the database process might not have the same cost (to you) as the same "
"amount of work done in your Python process. It is up to you to decide what "
"your priorities are, where the balance must lie, and profile all of these as "
"required since this will depend on your application and server."
msgstr ""

# 8ed84baf6f534026aad6d0cec884ee42
#: ../../topics/db/optimization.txt:26
msgid ""
"With everything that follows, remember to profile after every change to "
"ensure that the change is a benefit, and a big enough benefit given the "
"decrease in readability of your code. **All** of the suggestions below come "
"with the caveat that in your circumstances the general principle might not "
"apply, or might even be reversed."
msgstr ""

# aa37eb1f4d2343388ea4e76b122f9bdf
#: ../../topics/db/optimization.txt:35
msgid "Use standard DB optimization techniques"
msgstr ""

# c182720d25d34d0fb868effc6f28000d
#: ../../topics/db/optimization.txt:37
msgid "...including:"
msgstr ""

# b4681d70b9ed464a950f3261c21b40db
#: ../../topics/db/optimization.txt:39
msgid ""
"Indexes. This is a number one priority, *after* you have determined from "
"profiling what indexes should be added. Use :attr:`django.db.models.Field."
"db_index` or :attr:`Meta.index_together <django.db.models.Options."
"index_together>` to add these from Django."
msgstr ""

# 783364e8a7144fa2a51e9e4c47c7372b
#: ../../topics/db/optimization.txt:43
msgid "Appropriate use of field types."
msgstr ""

# a3cffdf4b4f44b7f9744b12c44502f9a
#: ../../topics/db/optimization.txt:45
msgid ""
"We will assume you have done the obvious things above. The rest of this "
"document focuses on how to use Django in such a way that you are not doing "
"unnecessary work. This document also does not address other optimization "
"techniques that apply to all expensive operations, such as :doc:`general "
"purpose caching </topics/cache>`."
msgstr ""

# fb937aeb07d84983b4e9887da0368a02
#: ../../topics/db/optimization.txt:52
msgid "Understand QuerySets"
msgstr ""

# a31298edcbb5419f8033ffe5e6cda911
#: ../../topics/db/optimization.txt:54
msgid ""
"Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting "
"good performance with simple code. In particular:"
msgstr ""

# 4bd38f1952ee4f0a8d0b84106b76a3c7
#: ../../topics/db/optimization.txt:58
msgid "Understand QuerySet evaluation"
msgstr ""

# 636d792d39694496b13903e782c22a00
#: ../../topics/db/optimization.txt:60
msgid "To avoid performance problems, it is important to understand:"
msgstr ""

# ec5b8a6409ca440b9530413ce2b3aff8
#: ../../topics/db/optimization.txt:62
msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr ""

# 47e7e47e0c944ab280d38ed52ce19f69
#: ../../topics/db/optimization.txt:64
msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr ""

# 2a41bef7f5c5474eb11a4c887c689d97
#: ../../topics/db/optimization.txt:66
msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr ""

# 6ec5b9ab2efe4fb2bf9a38504113caec
#: ../../topics/db/optimization.txt:69
msgid "Understand cached attributes"
msgstr ""

# 18f11f4680014908be42fcf823b6049f
#: ../../topics/db/optimization.txt:71
msgid ""
"As well as caching of the whole ``QuerySet``, there is caching of the result "
"of attributes on ORM objects. In general, attributes that are not callable "
"will be cached. For example, assuming the :ref:`example Weblog models "
"<queryset-model-example>`::"
msgstr ""

# e30457a65e5045e690ea291cb8353a22
#: ../../topics/db/optimization.txt:80
msgid "But in general, callable attributes cause DB lookups every time::"
msgstr ""

# 213052c8acad497cb1df19e7d9fdf65a
#: ../../topics/db/optimization.txt:86
msgid ""
"Be careful when reading template code - the template system does not allow "
"use of parentheses, but will call callables automatically, hiding the above "
"distinction."
msgstr ""

# 43346cf7bddf4152a7cca017072da3d5
#: ../../topics/db/optimization.txt:90
msgid ""
"Be careful with your own custom properties - it is up to you to implement "
"caching."
msgstr ""

# 429dd2d403fe4549aa67c2d67957f799
#: ../../topics/db/optimization.txt:94
msgid "Use the ``with`` template tag"
msgstr ""

# d9cbb480222147b0b41e39e307b4b34b
#: ../../topics/db/optimization.txt:96
msgid ""
"To make use of the caching behavior of ``QuerySet``, you may need to use "
"the :ttag:`with` template tag."
msgstr ""

# fed0aa77679542f2af917e2d9f62a44a
#: ../../topics/db/optimization.txt:100
msgid "Use ``iterator()``"
msgstr ""

# 5355fa40ee86495cb947d58012b07087
#: ../../topics/db/optimization.txt:102
msgid ""
"When you have a lot of objects, the caching behavior of the ``QuerySet`` can "
"cause a large amount of memory to be used. In this case, :meth:`~django.db."
"models.query.QuerySet.iterator()` may help."
msgstr ""

# 5347e79959ab43a09b99b833d335dd82
#: ../../topics/db/optimization.txt:107
msgid "Do database work in the database rather than in Python"
msgstr ""

# 1365f639ebfe4b24bc0dc2a89c270b11
#: ../../topics/db/optimization.txt:109
msgid "For instance:"
msgstr ""

# 4d9ace2bec3940108bd9a983d95cf08b
#: ../../topics/db/optimization.txt:111
msgid ""
"At the most basic level, use :ref:`filter and exclude <queryset-api>` to do "
"filtering in the database."
msgstr ""

# 163cf484aad7443aac7dfa0100e2ac4d
#: ../../topics/db/optimization.txt:114
msgid ""
"Use :ref:`F() object query expressions <query-expressions>` to do filtering "
"against other fields within the same model."
msgstr ""

# c3b89646f5584581b65532b2cf86971c
#: ../../topics/db/optimization.txt:117
msgid ""
"Use :doc:`annotate to do aggregation in the database </topics/db/"
"aggregation>`."
msgstr ""

# 016c0cd3376c4e24ac8cad4d5b873304
#: ../../topics/db/optimization.txt:119
msgid "If these aren't enough to generate the SQL you need:"
msgstr ""

# ea121622476846e0bcc0d38062d687b1
#: ../../topics/db/optimization.txt:122
msgid "Use ``QuerySet.extra()``"
msgstr ""

# 0e49f967d4184d21b665e895c1061408
#: ../../topics/db/optimization.txt:124
msgid ""
"A less portable but more powerful method is :meth:`~django.db.models.query."
"QuerySet.extra()`, which allows some SQL to be explicitly added to the "
"query. If that still isn't powerful enough:"
msgstr ""

# 23895b6637084f52ab1f4e57d506a13d
#: ../../topics/db/optimization.txt:129
msgid "Use raw SQL"
msgstr ""

# 2d90ffde287c4f27bcf5cff438e083e8
#: ../../topics/db/optimization.txt:131
msgid ""
"Write your own :doc:`custom SQL to retrieve data or populate models </topics/"
"db/sql>`. Use ``django.db.connection.queries`` to find out what Django is "
"writing for you and start from there."
msgstr ""

# c72ccee0fa444e11a39b151fee1e53e3
#: ../../topics/db/optimization.txt:136
msgid "Retrieve individual objects using a unique, indexed column"
msgstr ""

# 1ed5dda8b20b494495df7512e98b7e0c
#: ../../topics/db/optimization.txt:138
msgid ""
"There are two reasons to use a column with :attr:`~django.db.models.Field."
"unique` or :attr:`~django.db.models.Field.db_index` when using :meth:"
"`~django.db.models.query.QuerySet.get` to retrieve individual objects. "
"First, the query will be quicker because of the underlying database index. "
"Also, the query could run much slower if multiple objects match the lookup; "
"having a unique constraint on the column guarantees this will never happen."
msgstr ""

# a0d5f153241c4ed882963ba9c62c9ec6
#: ../../topics/db/optimization.txt:146
msgid "So using the :ref:`example Weblog models <queryset-model-example>`::"
msgstr ""

# 0637c07aec6e4e8480ffd229e0858131
#: ../../topics/db/optimization.txt:150
msgid "will be quicker than:"
msgstr ""

# 50d3f31e252049baa551ef3c532ae3de
#: ../../topics/db/optimization.txt:154
msgid ""
"because ``id`` is indexed by the database and is guaranteed to be unique."
msgstr ""

# e219be0b51924c7c83a2c61ffe79794c
#: ../../topics/db/optimization.txt:156
msgid "Doing the following is potentially quite slow:"
msgstr ""

# d6c3f75cacc84d9a9dff8b36945f8182
#: ../../topics/db/optimization.txt:160
msgid ""
"First of all, ``headline`` is not indexed, which will make the underlying "
"database fetch slower."
msgstr ""

# 55e191515e444d6faebde0006c3be262
#: ../../topics/db/optimization.txt:163
msgid ""
"Second, the lookup doesn't guarantee that only one object will be returned. "
"If the query matches more than one object, it will retrieve and transfer all "
"of them from the database. This penalty could be substantial if hundreds or "
"thousands of records are returned. The penalty will be compounded if the "
"database lives on a separate server, where network overhead and latency also "
"play a factor."
msgstr ""

# 878b9eb220d94c498426cdb063a7ee98
#: ../../topics/db/optimization.txt:171
msgid "Retrieve everything at once if you know you will need it"
msgstr ""

# 51e69af504fe4f7093034a9109ec18e7
#: ../../topics/db/optimization.txt:173
msgid ""
"Hitting the database multiple times for different parts of a single 'set' of "
"data that you will need all parts of is, in general, less efficient than "
"retrieving it all in one query. This is particularly important if you have a "
"query that is executed in a loop, and could therefore end up doing many "
"database queries, when only one was needed. So:"
msgstr ""

# 19cbc1ec48044cffa0da50b405e720c9
#: ../../topics/db/optimization.txt:180
msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr ""

# 850c7aaeefdb452395a9c64f4332c115
#: ../../topics/db/optimization.txt:182
msgid ""
"Understand :meth:`~django.db.models.query.QuerySet.select_related` and :meth:"
"`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and use them:"
msgstr ""

# 4143a311b36148f2a178d626ddd233e4
#: ../../topics/db/optimization.txt:186
msgid "in view code,"
msgstr ""

# 5bcb3163ed83408c9ac5277d186ee8e1
#: ../../topics/db/optimization.txt:188
msgid ""
"and in :doc:`managers and default managers </topics/db/managers>` where "
"appropriate. Be aware when your manager is and is not used; sometimes this "
"is tricky so don't make assumptions."
msgstr ""

# c7d04638d6244cb2a2999b0bc21db57a
#: ../../topics/db/optimization.txt:193
msgid "Don't retrieve things you don't need"
msgstr ""

# 6180a7a566384897b107c4f116cbca96
#: ../../topics/db/optimization.txt:196
msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr ""

# b0051f16b845426db8f0b10112ae63a9
#: ../../topics/db/optimization.txt:198
msgid ""
"When you just want a ``dict`` or ``list`` of values, and don't need ORM "
"model objects, make appropriate usage of :meth:`~django.db.models.query."
"QuerySet.values()`. These can be useful for replacing model objects in "
"template code - as long as the dicts you supply have the same attributes as "
"those used in the template, you are fine."
msgstr ""

# 24d4f5e37fcf4d939a2e46c61954e53d
#: ../../topics/db/optimization.txt:206
msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr ""

# 8a9780b9604b4e38916e2e2ac5ac3ea2
#: ../../topics/db/optimization.txt:208
msgid ""
"Use :meth:`~django.db.models.query.QuerySet.defer()` and :meth:`~django.db."
"models.query.QuerySet.only()` if there are database columns you know that "
"you won't need (or won't need in most cases) to avoid loading them. Note "
"that if you *do* use them, the ORM will have to go and get them in a "
"separate query, making this a pessimization if you use it inappropriately."
msgstr ""

# b9e6045ee92f4a81903eaa84ffd98407
#: ../../topics/db/optimization.txt:214
msgid ""
"Also, be aware that there is some (small extra) overhead incurred inside "
"Django when constructing a model with deferred fields. Don't be too "
"aggressive in deferring fields without profiling as the database has to read "
"most of the non-text, non-VARCHAR data from the disk for a single row in the "
"results, even if it ends up only using a few columns. The ``defer()`` and "
"``only()`` methods are most useful when you can avoid loading a lot of text "
"data or for fields that might take a lot of processing to convert back to "
"Python. As always, profile first, then optimize."
msgstr ""

# d98905d542b441a7a53134598bfc4b49
#: ../../topics/db/optimization.txt:224
msgid "Use QuerySet.count()"
msgstr ""

# 771a50c02c4843ba8154210b62878c3b
#: ../../topics/db/optimization.txt:226
msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr ""

# be45cfffd0de420e8e8d354a292bfbb8
#: ../../topics/db/optimization.txt:229
msgid "Use QuerySet.exists()"
msgstr ""

# c684a59361324616932d0bbb948d9a8c
#: ../../topics/db/optimization.txt:231
msgid ""
"...if you only want to find out if at least one result exists, rather than "
"``if queryset``."
msgstr ""

# c591fced4bbe4f0b880eaa0f5ba638e3
#: ../../topics/db/optimization.txt:234
msgid "But:"
msgstr ""

# 32e4180da9c146dc90dd8da2f808f30b
#: ../../topics/db/optimization.txt:237
msgid "Don't overuse ``count()`` and ``exists()``"
msgstr ""

# 2ead54ff97614dcaa9091a8a2a61f377
#: ../../topics/db/optimization.txt:239
msgid ""
"If you are going to need other data from the QuerySet, just evaluate it."
msgstr ""

# 72a2c4a2d6c347068dd4c7caaaaa8cd5
#: ../../topics/db/optimization.txt:241
msgid ""
"For example, assuming an Email model that has a ``body`` attribute and a "
"many-to-many relation to User, the following template code is optimal:"
msgstr ""

# 781125d8ee654737be3ee40dcd47f78a
#: ../../topics/db/optimization.txt:260
msgid "It is optimal because:"
msgstr ""

# 16f0d176faaa42a3aa528d2f0a0dcc43
#: ../../topics/db/optimization.txt:262
msgid ""
"Since QuerySets are lazy, this does no database queries if 'display_inbox' "
"is False."
msgstr ""

# a89aadf545cc4ee39e66827e95861770
#: ../../topics/db/optimization.txt:265
msgid ""
"Use of :ttag:`with` means that we store ``user.emails.all`` in a variable "
"for later use, allowing its cache to be re-used."
msgstr ""

# 540c970c65774e4a8198576b52d56d77
#: ../../topics/db/optimization.txt:268
msgid ""
"The line ``{% if emails %}`` causes ``QuerySet.__bool__()`` to be called, "
"which causes the ``user.emails.all()`` query to be run on the database, and "
"at the least the first line to be turned into an ORM object. If there aren't "
"any results, it will return False, otherwise True."
msgstr ""

# f5813efb79574144a218ca205e6e9dd8
#: ../../topics/db/optimization.txt:273
msgid ""
"The use of ``{{ emails|length }}`` calls ``QuerySet.__len__()``, filling out "
"the rest of the cache without doing another query."
msgstr ""

# 75694e1d0f5648988e902e0cc0cb5c40
#: ../../topics/db/optimization.txt:276
msgid "The :ttag:`for` loop iterates over the already filled cache."
msgstr ""

# 3d59fc820d194049a417a5fce3739003
#: ../../topics/db/optimization.txt:278
msgid ""
"In total, this code does either one or zero database queries. The only "
"deliberate optimization performed is the use of the :ttag:`with` tag. Using "
"``QuerySet.exists()`` or ``QuerySet.count()`` at any point would cause "
"additional queries."
msgstr ""

# 6d329c5e81b544f891e6bb4ced35ef4e
#: ../../topics/db/optimization.txt:284
msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr ""

# a46731fd6b604ab59e15d1450e90caf0
#: ../../topics/db/optimization.txt:286
msgid ""
"Rather than retrieve a load of objects, set some values, and save them "
"individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() "
"<topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-"
"queries-delete>` where possible."
msgstr ""

# 212b040283284fc58df210ac954cbf18
#: ../../topics/db/optimization.txt:291
msgid ""
"Note, however, that these bulk update methods cannot call the ``save()`` or "
"``delete()`` methods of individual instances, which means that any custom "
"behavior you have added for these methods will not be executed, including "
"anything driven from the normal database object :doc:`signals </ref/"
"signals>`."
msgstr ""

# 1acb09aa1ec04b0d93d5163f1e9d820b
#: ../../topics/db/optimization.txt:297
msgid "Use foreign key values directly"
msgstr ""

# deaaebab61924b22b3cfcc5a312e95fd
#: ../../topics/db/optimization.txt:299
msgid ""
"If you only need a foreign key value, use the foreign key value that is "
"already on the object you've got, rather than getting the whole related "
"object and taking its primary key. i.e. do::"
msgstr ""

# 1b21acf812ee41c5bf5a2a15a3241f5b
#: ../../topics/db/optimization.txt:305
msgid "instead of::"
msgstr ""

# 9bcd5bed6a9542de8165617d39fd9d24
#: ../../topics/db/optimization.txt:310
msgid "Insert in bulk"
msgstr ""

# efa92c76523f4036a9244fee19f72252
#: ../../topics/db/optimization.txt:312
msgid ""
"When creating objects, where possible, use the :meth:`~django.db.models."
"query.QuerySet.bulk_create()` method to reduce the number of SQL queries. "
"For example::"
msgstr ""

# a5fee08198a34971b01ca6e4702828c7
# 8730e8b162c94f6c81eee805e1aa2956
#: ../../topics/db/optimization.txt:321 ../../topics/db/optimization.txt:335
msgid "...is preferable to::"
msgstr ""

# d503041d0c4c499d8182db8cff5cab03
#: ../../topics/db/optimization.txt:326
msgid ""
"Note that there are a number of :meth:`caveats to this method <django.db."
"models.query.QuerySet.bulk_create>`, so make sure it's appropriate for your "
"use case."
msgstr ""

# 72c7d37aaea9426e814391b13583496b
#: ../../topics/db/optimization.txt:330
msgid ""
"This also applies to :class:`ManyToManyFields <django.db.models."
"ManyToManyField>`, so doing::"
msgstr ""

# c01fed455dd94455a032b074a472c44a
#: ../../topics/db/optimization.txt:340
msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr ""

# c2bc0acab6914f509cdf092c17d19214
#: ../../topics/db/queries.txt:3
msgid "Making queries"
msgstr ""

# 0b2b09841de0408da66837bf42f0d05c
#: ../../topics/db/queries.txt:7
msgid ""
"Once you've created your :doc:`data models </topics/db/models>`, Django "
"automatically gives you a database-abstraction API that lets you create, "
"retrieve, update and delete objects. This document explains how to use this "
"API. Refer to the :doc:`data model reference </ref/models/index>` for full "
"details of all the various model lookup options."
msgstr ""

# 3066ff2cb44241b59d8a8d9e92cd6108
#: ../../topics/db/queries.txt:13
msgid ""
"Throughout this guide (and in the reference), we'll refer to the following "
"models, which comprise a Weblog application:"
msgstr ""

# aae51602bd3a4367a208e93891db87ca
#: ../../topics/db/queries.txt:49
msgid "Creating objects"
msgstr ""

# 1ce9be4439b34adab35a2bfa42982f9b
#: ../../topics/db/queries.txt:51
msgid ""
"To represent database-table data in Python objects, Django uses an intuitive "
"system: A model class represents a database table, and an instance of that "
"class represents a particular record in the database table."
msgstr ""

# 5a8cea42274a4caab50820b5c669b6c6
#: ../../topics/db/queries.txt:55
msgid ""
"To create an object, instantiate it using keyword arguments to the model "
"class, then call :meth:`~django.db.models.Model.save` to save it to the "
"database."
msgstr ""

# 32f52d1c22494d20ac50e976a355d06f
#: ../../topics/db/queries.txt:58
msgid ""
"You import the model class from wherever it lives on the Python path, as you "
"may expect. (We point this out here because previous Django versions "
"required funky model importing.)"
msgstr ""

# b68fd90c978b4683ad4944b005d84ba8
#: ../../topics/db/queries.txt:62
msgid ""
"Assuming models live in a file ``mysite/blog/models.py``, here's an example::"
msgstr ""

# cb6978d09e8346fa81bf60adafd1fe8e
#: ../../topics/db/queries.txt:68
msgid ""
"This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""

# ce6d17f1c7e6481a94cb28e2f9940266
#: ../../topics/db/queries.txt:71
msgid "The :meth:`~django.db.models.Model.save` method has no return value."
msgstr ""

# 268368d4f2d54f21b9b713d93be18eed
#: ../../topics/db/queries.txt:75
msgid ""
":meth:`~django.db.models.Model.save` takes a number of advanced options not "
"described here. See the documentation for :meth:`~django.db.models.Model."
"save` for complete details."
msgstr ""

# 7dc111c4aada4be2ae0383f919a451e0
#: ../../topics/db/queries.txt:79
msgid ""
"To create and save an object in a single step, use the :meth:`~django.db."
"models.query.QuerySet.create()` method."
msgstr ""

# a0a2d1db82564802bd282c4017e9cf47
#: ../../topics/db/queries.txt:83
msgid "Saving changes to objects"
msgstr ""

# 71dffc1494194ac5962b275509df8e02
#: ../../topics/db/queries.txt:85
msgid ""
"To save changes to an object that's already in the database, use :meth:"
"`~django.db.models.Model.save`."
msgstr ""

# 95ca59d0451e4bf4ad8359987e09b9dd
#: ../../topics/db/queries.txt:88
msgid ""
"Given a ``Blog`` instance ``b5`` that has already been saved to the "
"database, this example changes its name and updates its record in the "
"database::"
msgstr ""

# e8fa87a5ec634dec993d4c15f2da5e3d
#: ../../topics/db/queries.txt:94
msgid ""
"This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""

# 1ea95ab1263f47b38773c54af2130787
#: ../../topics/db/queries.txt:98
msgid "Saving ``ForeignKey`` and ``ManyToManyField`` fields"
msgstr ""

# 4d5a63e16a814f9585ff757f80a6a6ca
#: ../../topics/db/queries.txt:100
msgid ""
"Updating a :class:`~django.db.models.ForeignKey` field works exactly the "
"same way as saving a normal field -- simply assign an object of the right "
"type to the field in question. This example updates the ``blog`` attribute "
"of an ``Entry`` instance ``entry``, assuming appropriate instances of "
"``Entry`` and ``Blog`` are already saved to the database (so we can retrieve "
"them below)::"
msgstr ""

# 43cf3021d33c47ada45bacafc7c3d7fd
#: ../../topics/db/queries.txt:112
msgid ""
"Updating a :class:`~django.db.models.ManyToManyField` works a little "
"differently -- use the :meth:`~django.db.models.fields.related."
"RelatedManager.add` method on the field to add a record to the relation. "
"This example adds the ``Author`` instance ``joe`` to the ``entry`` object::"
msgstr ""

# 6ea1dfd0c05d44b293a33d5872d1f9f1
#: ../../topics/db/queries.txt:122
msgid ""
"To add multiple records to a :class:`~django.db.models.ManyToManyField` in "
"one go, include multiple arguments in the call to :meth:`~django.db.models."
"fields.related.RelatedManager.add`, like this::"
msgstr ""

# 7f45d7223eaf44488ff511c8d4f6ed3a
#: ../../topics/db/queries.txt:132
msgid ""
"Django will complain if you try to assign or add an object of the wrong type."
msgstr ""

# 6bfb026c298a443d8108387133b0d435
#: ../../topics/db/queries.txt:135
msgid "Retrieving objects"
msgstr ""

# 36afc1d76cc24f88a5e6bb166b16dd4c
#: ../../topics/db/queries.txt:137
msgid ""
"To retrieve objects from your database, construct a :class:`~django.db."
"models.query.QuerySet` via a :class:`~django.db.models.Manager` on your "
"model class."
msgstr ""

# 4e297e3402344c78be592e489e93101b
#: ../../topics/db/queries.txt:141
msgid ""
"A :class:`~django.db.models.query.QuerySet` represents a collection of "
"objects from your database. It can have zero, one or many *filters* -- "
"criteria that narrow down the collection based on given parameters. In SQL "
"terms, a :class:`~django.db.models.query.QuerySet` equates to a ``SELECT`` "
"statement, and a filter is a limiting clause such as ``WHERE`` or ``LIMIT``."
msgstr ""

# 560a4e7998a54008afaafce4ee626172
#: ../../topics/db/queries.txt:147
msgid ""
"You get a :class:`~django.db.models.query.QuerySet` by using your model's :"
"class:`~django.db.models.Manager`. Each model has at least one :class:"
"`~django.db.models.Manager`, and it's called ``objects`` by default. Access "
"it directly via the model class, like so::"
msgstr ""

# 5ae5ce6a9c1c44a886b1e0a4398681ee
#: ../../topics/db/queries.txt:162
msgid ""
"``Managers`` are accessible only via model classes, rather than from model "
"instances, to enforce a separation between \"table-level\" operations and "
"\"record-level\" operations."
msgstr ""

# 5aedc6cbc4934559af1b77e55dbe3317
#: ../../topics/db/queries.txt:166
msgid ""
"The :class:`~django.db.models.Manager` is the main source of ``QuerySets`` "
"for a model. For example, ``Blog.objects.all()`` returns a :class:`~django."
"db.models.query.QuerySet` that contains all ``Blog`` objects in the database."
msgstr ""

# 5efebad3ab04457d93869d05173d4f14
#: ../../topics/db/queries.txt:172
msgid "Retrieving all objects"
msgstr ""

# c99da9d5d3e54f72ad6516d6acdb3762
#: ../../topics/db/queries.txt:174
msgid ""
"The simplest way to retrieve objects from a table is to get all of them. To "
"do this, use the :meth:`~django.db.models.query.QuerySet.all` method on a :"
"class:`~django.db.models.Manager`::"
msgstr ""

# 7fa4bd767a22411e98e2094237dcc0f5
#: ../../topics/db/queries.txt:180
msgid ""
"The :meth:`~django.db.models.query.QuerySet.all` method returns a :class:"
"`~django.db.models.query.QuerySet` of all the objects in the database."
msgstr ""

# e3bd9ff830184090beb5036d8996394a
#: ../../topics/db/queries.txt:184
msgid "Retrieving specific objects with filters"
msgstr ""

# 84c54c0432b44c70b0042956ed2630f4
#: ../../topics/db/queries.txt:186
msgid ""
"The :class:`~django.db.models.query.QuerySet` returned by :meth:`~django.db."
"models.query.QuerySet.all` describes all objects in the database table. "
"Usually, though, you'll need to select only a subset of the complete set of "
"objects."
msgstr ""

# 9ab0ff6684034d46b60f2ebd66612209
#: ../../topics/db/queries.txt:191
msgid ""
"To create such a subset, you refine the initial :class:`~django.db.models."
"query.QuerySet`, adding filter conditions. The two most common ways to "
"refine a :class:`~django.db.models.query.QuerySet` are:"
msgstr ""

# 29e2206dc07349528739c7915924a0c2
#: ../../topics/db/queries.txt:197
msgid "``filter(**kwargs)``"
msgstr ""

# 04d0060d25bc43fc8a29c4d22fbe9af2
#: ../../topics/db/queries.txt:196
msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that match the given lookup parameters."
msgstr ""

# 8ff6bc2a6ff545a0903cdb31183f1c8c
#: ../../topics/db/queries.txt:201
msgid "``exclude(**kwargs)``"
msgstr ""

# 1bfd3156523c4d4cac7f8337fb780304
#: ../../topics/db/queries.txt:200
msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that do *not* match the given lookup parameters."
msgstr ""

# 57bc86c2b2654289a83c1ce0c8242a52
#: ../../topics/db/queries.txt:203
msgid ""
"The lookup parameters (``**kwargs`` in the above function definitions) "
"should be in the format described in `Field lookups`_ below."
msgstr ""

# e10d77ac4c8049db9d9b8ee0d542f8e6
#: ../../topics/db/queries.txt:206
msgid ""
"For example, to get a :class:`~django.db.models.query.QuerySet` of blog "
"entries from the year 2006, use :meth:`~django.db.models.query.QuerySet."
"filter` like so::"
msgstr ""

# 1dd77e3d8bb7480b90e78375db8af718
#: ../../topics/db/queries.txt:212
msgid "With the default manager class, it is the same as::"
msgstr ""

# 27c0329ee4054b14bff9d92884b4dffc
#: ../../topics/db/queries.txt:219
msgid "Chaining filters"
msgstr ""

# cd077628ebf14dd0b290b8e20e4f6545
#: ../../topics/db/queries.txt:221
msgid ""
"The result of refining a :class:`~django.db.models.query.QuerySet` is itself "
"a :class:`~django.db.models.query.QuerySet`, so it's possible to chain "
"refinements together. For example::"
msgstr ""

# ea9493ef898a4c78b3b2f002921520c5
#: ../../topics/db/queries.txt:233
msgid ""
"This takes the initial :class:`~django.db.models.query.QuerySet` of all "
"entries in the database, adds a filter, then an exclusion, then another "
"filter. The final result is a :class:`~django.db.models.query.QuerySet` "
"containing all entries with a headline that starts with \"What\", that were "
"published between January 30, 2005, and the current day."
msgstr ""

# 1a657e61cf1949c88b2b74b962680a36
#: ../../topics/db/queries.txt:242
msgid "Filtered QuerySets are unique"
msgstr ""

# b5cab80467144fbea7bb57c103187f97
#: ../../topics/db/queries.txt:244
msgid ""
"Each time you refine a :class:`~django.db.models.query.QuerySet`, you get a "
"brand-new :class:`~django.db.models.query.QuerySet` that is in no way bound "
"to the previous :class:`~django.db.models.query.QuerySet`. Each refinement "
"creates a separate and distinct :class:`~django.db.models.query.QuerySet` "
"that can be stored, used and reused."
msgstr ""

# 3107ada7e2744ef29c129014a3d38540
#: ../../topics/db/queries.txt:256
msgid ""
"These three ``QuerySets`` are separate. The first is a base :class:`~django."
"db.models.query.QuerySet` containing all entries that contain a headline "
"starting with \"What\". The second is a subset of the first, with an "
"additional criteria that excludes records whose ``pub_date`` is greater than "
"now. The third is a subset of the first, with an additional criteria that "
"selects only the records whose ``pub_date`` is greater than now. The "
"initial :class:`~django.db.models.query.QuerySet` (``q1``) is unaffected by "
"the refinement process."
msgstr ""

# fb4f4940bafb475988136d97ebd2dcda
#: ../../topics/db/queries.txt:268
msgid "QuerySets are lazy"
msgstr ""

# 655962c48dfc48e2b30a231e61ea366f
#: ../../topics/db/queries.txt:270
msgid ""
"``QuerySets`` are lazy -- the act of creating a :class:`~django.db.models."
"query.QuerySet` doesn't involve any database activity. You can stack filters "
"together all day long, and Django won't actually run the query until the :"
"class:`~django.db.models.query.QuerySet` is *evaluated*. Take a look at this "
"example::"
msgstr ""

# d8f589c511e347aa9131692bde1d6d5f
#: ../../topics/db/queries.txt:281
msgid ""
"Though this looks like three database hits, in fact it hits the database "
"only once, at the last line (``print(q)``). In general, the results of a :"
"class:`~django.db.models.query.QuerySet` aren't fetched from the database "
"until you \"ask\" for them. When you do, the :class:`~django.db.models.query."
"QuerySet` is *evaluated* by accessing the database. For more details on "
"exactly when evaluation takes place, see :ref:`when-querysets-are-evaluated`."
msgstr ""

# c01dc648902a498dbe6f93d99a44f3bd
#: ../../topics/db/queries.txt:293
msgid "Retrieving a single object with get"
msgstr ""

# c19841b3ffd9498b880662724da44e32
#: ../../topics/db/queries.txt:295
msgid ""
":meth:`~django.db.models.query.QuerySet.filter` will always give you a :"
"class:`~django.db.models.query.QuerySet`, even if only a single object "
"matches the query - in this case, it will be a :class:`~django.db.models."
"query.QuerySet` containing a single element."
msgstr ""

# dd4ef897ecf24389b465a64a7fc8ac9c
#: ../../topics/db/queries.txt:300
msgid ""
"If you know there is only one object that matches your query, you can use "
"the :meth:`~django.db.models.query.QuerySet.get` method on a :class:`~django."
"db.models.Manager` which returns the object directly::"
msgstr ""

# 8e42e36a3ce040e8888d9315871caa17
#: ../../topics/db/queries.txt:306
msgid ""
"You can use any query expression with :meth:`~django.db.models.query."
"QuerySet.get`, just like with :meth:`~django.db.models.query.QuerySet."
"filter` - again, see `Field lookups`_ below."
msgstr ""

# 5747f9d79d874c66aaf9e87d2fe9c40f
#: ../../topics/db/queries.txt:311
msgid ""
"Note that there is a difference between using :meth:`~django.db.models.query."
"QuerySet.get`, and using :meth:`~django.db.models.query.QuerySet.filter` "
"with a slice of ``[0]``. If there are no results that match the query, :meth:"
"`~django.db.models.query.QuerySet.get` will raise a ``DoesNotExist`` "
"exception. This exception is an attribute of the model class that the query "
"is being performed on - so in the code above, if there is no ``Entry`` "
"object with a primary key of 1, Django will raise ``Entry.DoesNotExist``."
msgstr ""

# 5fe2bc9bb36d447fb32ed411232e499a
#: ../../topics/db/queries.txt:320
msgid ""
"Similarly, Django will complain if more than one item matches the :meth:"
"`~django.db.models.query.QuerySet.get` query. In this case, it will raise :"
"exc:`~django.core.exceptions.MultipleObjectsReturned`, which again is an "
"attribute of the model class itself."
msgstr ""

# d5be980bf3b3439ca57b06bfcf75e9f3
#: ../../topics/db/queries.txt:327
msgid "Other QuerySet methods"
msgstr ""

# 8bba9a96e5c34281b66b72bee395aab1
#: ../../topics/db/queries.txt:329
msgid ""
"Most of the time you'll use :meth:`~django.db.models.query.QuerySet.all`, :"
"meth:`~django.db.models.query.QuerySet.get`, :meth:`~django.db.models.query."
"QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` when "
"you need to look up objects from the database. However, that's far from all "
"there is; see the :ref:`QuerySet API Reference <queryset-api>` for a "
"complete list of all the various :class:`~django.db.models.query.QuerySet` "
"methods."
msgstr ""

# 118a7b82e3624d7d834f73b8e9b27fd7
#: ../../topics/db/queries.txt:340
msgid "Limiting QuerySets"
msgstr ""

# 714fa1012b3d49ec9ed0731acec4e41b
#: ../../topics/db/queries.txt:342
msgid ""
"Use a subset of Python's array-slicing syntax to limit your :class:`~django."
"db.models.query.QuerySet` to a certain number of results. This is the "
"equivalent of SQL's ``LIMIT`` and ``OFFSET`` clauses."
msgstr ""

# e8c7180995dd497297039f36a4d7b8bf
#: ../../topics/db/queries.txt:346
msgid "For example, this returns the first 5 objects (``LIMIT 5``)::"
msgstr ""

# bd4a2d1972f14ad68c49580fd4d570e9
#: ../../topics/db/queries.txt:350
msgid "This returns the sixth through tenth objects (``OFFSET 5 LIMIT 5``)::"
msgstr ""

# 84914f3a9fe044c2a543d840457c307e
#: ../../topics/db/queries.txt:354
msgid "Negative indexing (i.e. ``Entry.objects.all()[-1]``) is not supported."
msgstr ""

# 3b5838af3aaf4c85be54d53d96d146d1
#: ../../topics/db/queries.txt:356
msgid ""
"Generally, slicing a :class:`~django.db.models.query.QuerySet` returns a "
"new :class:`~django.db.models.query.QuerySet` -- it doesn't evaluate the "
"query. An exception is if you use the \"step\" parameter of Python slice "
"syntax. For example, this would actually execute the query in order to "
"return a list of every *second* object of the first 10::"
msgstr ""

# 5955818daca54c4c90c5be9cfc3c11f2
#: ../../topics/db/queries.txt:364
msgid ""
"To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar "
"LIMIT 1``), use a simple index instead of a slice. For example, this returns "
"the first ``Entry`` in the database, after ordering entries alphabetically "
"by headline::"
msgstr ""

# 6f6ec33f82874991933231dc3a73ce71
#: ../../topics/db/queries.txt:371
msgid "This is roughly equivalent to::"
msgstr ""

# 60a751323d5840bf99c0c2cdf4c77a44
#: ../../topics/db/queries.txt:375
msgid ""
"Note, however, that the first of these will raise ``IndexError`` while the "
"second will raise ``DoesNotExist`` if no objects match the given criteria. "
"See :meth:`~django.db.models.query.QuerySet.get` for more details."
msgstr ""

# 7f198575387246f583e2431a8f76b38a
#: ../../topics/db/queries.txt:382
msgid "Field lookups"
msgstr ""

# c47da5cc75524cc1b99b0081b6c62c85
#: ../../topics/db/queries.txt:384
msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the :class:`~django.db.models."
"query.QuerySet` methods :meth:`~django.db.models.query.QuerySet.filter`, :"
"meth:`~django.db.models.query.QuerySet.exclude` and :meth:`~django.db.models."
"query.QuerySet.get`."
msgstr ""

# a164b626bca14b7e8b272f2710cfa33c
#: ../../topics/db/queries.txt:390
msgid ""
"Basic lookups keyword arguments take the form ``field__lookuptype=value``. "
"(That's a double-underscore). For example::"
msgstr ""

# c1a43a78e7b844c1b0c32f3e809b9e31
#: ../../topics/db/queries.txt:395
msgid "translates (roughly) into the following SQL::"
msgstr ""

# 98977629159c47e69ca9e4052efbfc2b
#: ../../topics/db/queries.txt:399
msgid "How this is possible"
msgstr ""

# 3fdb1b8ffa914a20ae979bdfc0c29fe9
#: ../../topics/db/queries.txt:401
msgid ""
"Python has the ability to define functions that accept arbitrary name-value "
"arguments whose names and values are evaluated at runtime. For more "
"information, see `Keyword Arguments`_ in the official Python tutorial."
msgstr ""

# 8efe7b8522fb43309296fef22391a748
#: ../../topics/db/queries.txt:416
msgid ""
"If you pass an invalid keyword argument, a lookup function will raise "
"``TypeError``."
msgstr ""

# e630bf5ac88a4387b24e9a3b063592d3
#: ../../topics/db/queries.txt:419
msgid ""
"The database API supports about two dozen lookup types; a complete reference "
"can be found in the :ref:`field lookup reference <field-lookups>`. To give "
"you a taste of what's available, here's some of the more common lookups "
"you'll probably use:"
msgstr ""

# 6be5228381fd4e03a4aaa44a31d80066
#: ../../topics/db/queries.txt:444
msgid ":lookup:`exact`"
msgstr ""

# 543127803e724b9eb5a26f14d1cba7f0
#: ../../topics/db/queries.txt:425
msgid "An \"exact\" match. For example::"
msgstr ""

# add2e159d53b466bb014634b38e32c34
#: ../../topics/db/queries.txt:429
msgid "Would generate SQL along these lines:"
msgstr ""

# f0964e1e7f974bb0895aeb3701be5826
#: ../../topics/db/queries.txt:435
msgid ""
"If you don't provide a lookup type -- that is, if your keyword argument "
"doesn't contain a double underscore -- the lookup type is assumed to be "
"``exact``."
msgstr ""

# 8e2eacbd1be3418db8945741dec68df2
#: ../../topics/db/queries.txt:439
msgid "For example, the following two statements are equivalent::"
msgstr ""

# 422f793cb3c441869b49356dbb375277
#: ../../topics/db/queries.txt:444
msgid "This is for convenience, because ``exact`` lookups are the common case."
msgstr ""

# 4820fd4799c74a38ac5b7d24c9db3d4d
#: ../../topics/db/queries.txt:452
msgid ":lookup:`iexact`"
msgstr ""

# b918963ebee1408aa4ff1eff264e6f1a
#: ../../topics/db/queries.txt:447
msgid "A case-insensitive match. So, the query::"
msgstr ""

# a6443c06d15542cd8df5b5895d2ea667
#: ../../topics/db/queries.txt:451
msgid ""
"Would match a ``Blog`` titled \"Beatles Blog\", \"beatles blog\", or even "
"\"BeAtlES blOG\"."
msgstr ""

# 243103ba869c45ddaf026b6629ab02d6
#: ../../topics/db/queries.txt:468
msgid ":lookup:`contains`"
msgstr ""

# 4aa00a34cfde4564b567d0935727cfa0
#: ../../topics/db/queries.txt:455
msgid "Case-sensitive containment test. For example::"
msgstr ""

# adb7a9ce2c654de8a73b1e280db4468a
#: ../../topics/db/queries.txt:459
msgid "Roughly translates to this SQL:"
msgstr ""

# b4d7f24b041a4b04a14177f3b514581b
#: ../../topics/db/queries.txt:465
msgid ""
"Note this will match the headline ``'Today Lennon honored'`` but not "
"``'today lennon honored'``."
msgstr ""

# ebe5b58e89c0461c8dd75d699e67e32f
#: ../../topics/db/queries.txt:468
msgid "There's also a case-insensitive version, :lookup:`icontains`."
msgstr ""

# 8f73b0eb82aa4ade916f532dc6a10184
#: ../../topics/db/queries.txt:473
msgid ":lookup:`startswith`, :lookup:`endswith`"
msgstr ""

# c305d74a1ec244e1a36729a728fec7bc
#: ../../topics/db/queries.txt:471
msgid ""
"Starts-with and ends-with search, respectively. There are also case-"
"insensitive versions called :lookup:`istartswith` and :lookup:`iendswith`."
msgstr ""

# 25d8b0c6a92a487f9090c442b56864ff
#: ../../topics/db/queries.txt:475
msgid ""
"Again, this only scratches the surface. A complete reference can be found in "
"the :ref:`field lookup reference <field-lookups>`."
msgstr ""

# 49d29b56bcda4493ac3256221bda547f
#: ../../topics/db/queries.txt:481
msgid "Lookups that span relationships"
msgstr ""

# ddc356e85baa404ca65af765040ba285
#: ../../topics/db/queries.txt:483
msgid ""
"Django offers a powerful and intuitive way to \"follow\" relationships in "
"lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind "
"the scenes. To span a relationship, just use the field name of related "
"fields across models, separated by double underscores, until you get to the "
"field you want."
msgstr ""

# 2422407b50b343dc90848a3dc65d40d9
#: ../../topics/db/queries.txt:489
msgid ""
"This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` "
"is ``'Beatles Blog'``::"
msgstr ""

# f0b63443040f4552aff2b1ecb28c3f90
#: ../../topics/db/queries.txt:494
msgid "This spanning can be as deep as you'd like."
msgstr ""

# d3e101ee86344212a2b25e6493124fb0
#: ../../topics/db/queries.txt:496
msgid ""
"It works backwards, too. To refer to a \"reverse\" relationship, just use "
"the lowercase name of the model."
msgstr ""

# f06897f836e54fbe922ff004f5b4f1bf
#: ../../topics/db/queries.txt:499
msgid ""
"This example retrieves all ``Blog`` objects which have at least one "
"``Entry`` whose ``headline`` contains ``'Lennon'``::"
msgstr ""

# fca91127a67a4d5ebbf92c54bb6c8f90
#: ../../topics/db/queries.txt:504
msgid ""
"If you are filtering across multiple relationships and one of the "
"intermediate models doesn't have a value that meets the filter condition, "
"Django will treat it as if there is an empty (all values are ``NULL``), but "
"valid, object there. All this means is that no error will be raised. For "
"example, in this filter::"
msgstr ""

# 0a883e94d1404ba6b416e8320da88ce7
#: ../../topics/db/queries.txt:511
msgid ""
"(if there was a related ``Author`` model), if there was no ``author`` "
"associated with an entry, it would be treated as if there was also no "
"``name`` attached, rather than raising an error because of the missing "
"``author``. Usually this is exactly what you want to have happen. The only "
"case where it might be confusing is if you are using :lookup:`isnull`. Thus::"
msgstr ""

# 91268ad4a7f5410fa1f6e64fa2c33183
#: ../../topics/db/queries.txt:519
msgid ""
"will return ``Blog`` objects that have an empty ``name`` on the ``author`` "
"and also those which have an empty ``author`` on the ``entry``. If you don't "
"want those latter objects, you could write::"
msgstr ""

# fe07de0a59ac4f34af2cd3c9f07ec654
#: ../../topics/db/queries.txt:527
msgid "Spanning multi-valued relationships"
msgstr ""

# 4890e45959c4491a985d8d753b0a0e3a
#: ../../topics/db/queries.txt:529
msgid ""
"When you are filtering an object based on a :class:`~django.db.models."
"ManyToManyField` or a reverse :class:`~django.db.models.ForeignKey`, there "
"are two different sorts of filter you may be interested in. Consider the "
"``Blog``/``Entry`` relationship (``Blog`` to ``Entry`` is a one-to-many "
"relation). We might be interested in finding blogs that have an entry which "
"has both *\"Lennon\"* in the headline and was published in 2008. Or we might "
"want to find blogs that have an entry with *\"Lennon\"* in the headline as "
"well as an entry that was published in 2008. Since there are multiple "
"entries associated with a single ``Blog``, both of these queries are "
"possible and make sense in some situations."
msgstr ""

# add0dd128f4c41c091631488bf1f9d9b
#: ../../topics/db/queries.txt:540
msgid ""
"The same type of situation arises with a :class:`~django.db.models."
"ManyToManyField`. For example, if an ``Entry`` has a :class:`~django.db."
"models.ManyToManyField` called ``tags``, we might want to find entries "
"linked to tags called *\"music\"* and *\"bands\"* or we might want an entry "
"that contains a tag with a name of *\"music\"* and a status of *\"public\"*."
msgstr ""

# 408e1038c075434a8f42829fab80705f
#: ../../topics/db/queries.txt:546
msgid ""
"To handle both of these situations, Django has a consistent way of "
"processing :meth:`~django.db.models.query.QuerySet.filter` and :meth:"
"`~django.db.models.query.QuerySet.exclude` calls. Everything inside a "
"single :meth:`~django.db.models.query.QuerySet.filter` call is applied "
"simultaneously to filter out items matching all those requirements. "
"Successive :meth:`~django.db.models.query.QuerySet.filter` calls further "
"restrict the set of objects, but for multi-valued relations, they apply to "
"any object linked to the primary model, not necessarily those objects that "
"were selected by an earlier :meth:`~django.db.models.query.QuerySet.filter` "
"call."
msgstr ""

# ad305c1beabb45e2b0741c59d4374085
#: ../../topics/db/queries.txt:556
msgid ""
"That may sound a bit confusing, so hopefully an example will clarify. To "
"select all blogs that contain entries with both *\"Lennon\"* in the headline "
"and that were published in 2008 (the same entry satisfying both conditions), "
"we would write::"
msgstr ""

# 085496c083564001bd70a3dd8ff87ba8
#: ../../topics/db/queries.txt:564
msgid ""
"To select all blogs that contain an entry with *\"Lennon\"* in the headline "
"**as well as** an entry that was published in 2008, we would write::"
msgstr ""

# 3e2dd9d8c5ad4eb59a3f64de5d8593f7
#: ../../topics/db/queries.txt:570
msgid ""
"Suppose there is only one blog that had both entries containing *\"Lennon\"* "
"and entries from 2008, but that none of the entries from 2008 contained *"
"\"Lennon\"*. The first query would not return any blogs, but the second "
"query would return that one blog."
msgstr ""

# cb0d82ae87664f0ab01497393e715f7c
#: ../../topics/db/queries.txt:575
msgid ""
"In the second example, the first filter restricts the queryset to all those "
"blogs linked to entries with *\"Lennon\"* in the headline. The second filter "
"restricts the set of blogs *further* to those that are also linked to "
"entries that were published in 2008. The entries selected by the second "
"filter may or may not be the same as the entries in the first filter. We are "
"filtering the ``Blog`` items with each filter statement, not the ``Entry`` "
"items."
msgstr ""

# b77261a747784806bd14d9f50c46415f
#: ../../topics/db/queries.txt:582
msgid ""
"All of this behavior also applies to :meth:`~django.db.models.query.QuerySet."
"exclude`: all the conditions in a single :meth:`~django.db.models.query."
"QuerySet.exclude` statement apply to a single instance (if those conditions "
"are talking about the same multi-valued relation). Conditions in subsequent :"
"meth:`~django.db.models.query.QuerySet.filter` or :meth:`~django.db.models."
"query.QuerySet.exclude` calls that refer to the same relation may end up "
"filtering on different linked objects."
msgstr ""

# 77216b3936024d73994f17f0bdea98e5
#: ../../topics/db/queries.txt:594
msgid "Filters can reference fields on the model"
msgstr ""

# 6329a6818d6e4a09b5f512825a2ac31b
#: ../../topics/db/queries.txt:598
msgid ""
"In the examples given so far, we have constructed filters that compare the "
"value of a model field with a constant. But what if you want to compare the "
"value of a model field with another field on the same model?"
msgstr ""

# 1d331cd1909f48da81def2ffa8842988
#: ../../topics/db/queries.txt:602
msgid ""
"Django provides the :ref:`F() expressions <query-expressions>` to allow such "
"comparisons. Instances of ``F()`` act as a reference to a model field within "
"a query. These references can then be used in query filters to compare the "
"values of two different fields on the same model instance."
msgstr ""

# 78a378b7d14046b58b8da2d1155e7da1
#: ../../topics/db/queries.txt:607
msgid ""
"For example, to find a list of all blog entries that have had more comments "
"than pingbacks, we construct an ``F()`` object to reference the pingback "
"count, and use that ``F()`` object in the query::"
msgstr ""

# f6cfe0fed4ad4780a5b0fe4edc00ae5b
#: ../../topics/db/queries.txt:614
msgid ""
"Django supports the use of addition, subtraction, multiplication, division "
"and modulo arithmetic with ``F()`` objects, both with constants and with "
"other ``F()`` objects. To find all the blog entries with more than *twice* "
"as many comments as pingbacks, we modify the query::"
msgstr ""

# c49af3009971450cac502e395805ce2b
#: ../../topics/db/queries.txt:621
msgid ""
"To find all the entries where the rating of the entry is less than the sum "
"of the pingback count and comment count, we would issue the query::"
msgstr ""

# 4bfbf39677cb4dfa9972828014546040
#: ../../topics/db/queries.txt:627
msgid ""
"You can also use the double underscore notation to span relationships in an "
"``F()`` object. An ``F()`` object with a double underscore will introduce "
"any joins needed to access the related object. For example, to retrieve all "
"the entries where the author's name is the same as the blog name, we could "
"issue the query::"
msgstr ""

# a002d596952f46d88a6e4a529af780fc
#: ../../topics/db/queries.txt:635
msgid ""
"For date and date/time fields, you can add or subtract a :class:`~datetime."
"timedelta` object. The following would return all entries that were modified "
"more than 3 days after they were published::"
msgstr ""

# e8a26934b0324f9b9788fde1d1cdc8e5
#: ../../topics/db/queries.txt:645
msgid ""
"The ``F()`` objects now support bitwise operations by ``.bitand()`` and ``."
"bitor()``, for example::"
msgstr ""

# 22c2c353824547d5a7bd503bed7850ef
#: ../../topics/db/queries.txt:655
msgid "The pk lookup shortcut"
msgstr ""

# 32f4b0a508914362ad1d096ec39c520b
#: ../../topics/db/queries.txt:657
msgid ""
"For convenience, Django provides a ``pk`` lookup shortcut, which stands for "
"\"primary key\"."
msgstr ""

# 028481b9dfee4eaaab794d43d53607c5
#: ../../topics/db/queries.txt:660
msgid ""
"In the example ``Blog`` model, the primary key is the ``id`` field, so these "
"three statements are equivalent::"
msgstr ""

# ada4aebdedda4d18af5f5757b7f714da
#: ../../topics/db/queries.txt:667
msgid ""
"The use of ``pk`` isn't limited to ``__exact`` queries -- any query term can "
"be combined with ``pk`` to perform a query on the primary key of a model::"
msgstr ""

# aa92f32583bc4af08f2980bb5a2f7234
#: ../../topics/db/queries.txt:676
msgid ""
"``pk`` lookups also work across joins. For example, these three statements "
"are equivalent::"
msgstr ""

# 8668fd84c54b4f82b3dba37e746c9082
#: ../../topics/db/queries.txt:684
msgid "Escaping percent signs and underscores in LIKE statements"
msgstr ""

# 5f2642171d324606b8ba3797cbbfce61
#: ../../topics/db/queries.txt:686
msgid ""
"The field lookups that equate to ``LIKE`` SQL statements (``iexact``, "
"``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` "
"and ``iendswith``) will automatically escape the two special characters used "
"in ``LIKE`` statements -- the percent sign and the underscore. (In a "
"``LIKE`` statement, the percent sign signifies a multiple-character wildcard "
"and the underscore signifies a single-character wildcard.)"
msgstr ""

# 9a1b8bd8bb384a888d645003e98c6b58
#: ../../topics/db/queries.txt:693
msgid ""
"This means things should work intuitively, so the abstraction doesn't leak. "
"For example, to retrieve all the entries that contain a percent sign, just "
"use the percent sign as any other character::"
msgstr ""

# d43914c2a1f84e28959f70f4610590b4
#: ../../topics/db/queries.txt:699
msgid ""
"Django takes care of the quoting for you; the resulting SQL will look "
"something like this:"
msgstr ""

# cf8d06725829418baadd36c4b59762e8
#: ../../topics/db/queries.txt:706
msgid ""
"Same goes for underscores. Both percentage signs and underscores are handled "
"for you transparently."
msgstr ""

# c110f80de44549149aca62693e2eeadb
#: ../../topics/db/queries.txt:712
msgid "Caching and QuerySets"
msgstr ""

# 4d52f6ddc4cf443194fd8b7f01dcae5e
#: ../../topics/db/queries.txt:714
msgid ""
"Each :class:`~django.db.models.query.QuerySet` contains a cache to minimize "
"database access. Understanding how it works will allow you to write the most "
"efficient code."
msgstr ""

# cb7a2a608a8b4587a33769082b268993
#: ../../topics/db/queries.txt:718
msgid ""
"In a newly created :class:`~django.db.models.query.QuerySet`, the cache is "
"empty. The first time a :class:`~django.db.models.query.QuerySet` is "
"evaluated -- and, hence, a database query happens -- Django saves the query "
"results in the :class:`~django.db.models.query.QuerySet`\\'s cache and "
"returns the results that have been explicitly requested (e.g., the next "
"element, if the :class:`~django.db.models.query.QuerySet` is being iterated "
"over). Subsequent evaluations of the :class:`~django.db.models.query."
"QuerySet` reuse the cached results."
msgstr ""

# a53dced53a2b475380b7517a557767a3
#: ../../topics/db/queries.txt:727
msgid ""
"Keep this caching behavior in mind, because it may bite you if you don't use "
"your :class:`~django.db.models.query.QuerySet`\\s correctly. For example, "
"the following will create two :class:`~django.db.models.query.QuerySet`\\s, "
"evaluate them, and throw them away::"
msgstr ""

# 85a2181caeab4a3788d8d7c8bfc9e2f1
#: ../../topics/db/queries.txt:735
msgid ""
"That means the same database query will be executed twice, effectively "
"doubling your database load. Also, there's a possibility the two lists may "
"not include the same database records, because an ``Entry`` may have been "
"added or deleted in the split second between the two requests."
msgstr ""

# dde7bb91376a4f819e87a0660de2f46a
#: ../../topics/db/queries.txt:740
msgid ""
"To avoid this problem, simply save the :class:`~django.db.models.query."
"QuerySet` and reuse it::"
msgstr ""

# b86effff46e64823a7e1b3a1fbb0f877
#: ../../topics/db/queries.txt:748
msgid "When querysets are not cached"
msgstr ""

# 4ef6dbb624084cbba8e633ad8b46a6f2
#: ../../topics/db/queries.txt:750
msgid ""
"Querysets do not always cache their results.  When evaluating only *part* of "
"the queryset, the cache is checked, but if it is not populated then the "
"items returned by the subsequent query are not cached. Specifically, this "
"means that :ref:`limiting the queryset <limiting-querysets>` using an array "
"slice or an index will not populate the cache."
msgstr ""

# 71804e1f21b945b8b311fe2b1ebe1392
#: ../../topics/db/queries.txt:756
msgid ""
"For example, repeatedly getting a certain index in a queryset object will "
"query the database each time::"
msgstr ""

# 2e47bccbcd96465991690cd275f6c967
#: ../../topics/db/queries.txt:763
msgid ""
"However, if the entire queryset has already been evaluated, the cache will "
"be checked instead::"
msgstr ""

# aed3d5eb364847f3839f66ef108d08c7
#: ../../topics/db/queries.txt:771
msgid ""
"Here are some examples of other actions that will result in the entire "
"queryset being evaluated and therefore populate the cache::"
msgstr ""

# 230ccf43955d4ec8be67f25936268360
#: ../../topics/db/queries.txt:781
msgid ""
"Simply printing the queryset will not populate the cache. This is because "
"the call to ``__repr__()`` only returns a slice of the entire queryset."
msgstr ""

# deae28f77eb840faa2f04802182d2a09
#: ../../topics/db/queries.txt:787
msgid "Complex lookups with Q objects"
msgstr ""

# 37bf444bc5574cb0a9efb4380532d2ce
#: ../../topics/db/queries.txt:791
msgid ""
"Keyword argument queries -- in :meth:`~django.db.models.query.QuerySet."
"filter`, etc. -- are \"AND\"ed together. If you need to execute more complex "
"queries (for example, queries with ``OR`` statements), you can use ``Q`` "
"objects."
msgstr ""

# b649f8f82e5741e6a76fb368a5c56357
#: ../../topics/db/queries.txt:797
msgid ""
"A :class:`~django.db.models.Q` object (``django.db.models.Q``) is an object "
"used to encapsulate a collection of keyword arguments. These keyword "
"arguments are specified as in \"Field lookups\" above."
msgstr ""

# 2420ac5ae7104c4596ac593acb903a62
#: ../../topics/db/queries.txt:801
msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""

# 8ed5235e757c41b4ab5c1595eb99f6f9
#: ../../topics/db/queries.txt:806
msgid ""
"``Q`` objects can be combined using the ``&`` and ``|`` operators. When an "
"operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""

# a7c6f2a01e5e43c9aa7bac969d967861
#: ../../topics/db/queries.txt:809
msgid ""
"For example, this statement yields a single ``Q`` object that represents the "
"\"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""

# d849eebd26a347f7b2ac1614c57a23bd
#: ../../topics/db/queries.txt:814
msgid "This is equivalent to the following SQL ``WHERE`` clause::"
msgstr ""

# eee986e8589b4af4b5b17a4eb4fe6430
#: ../../topics/db/queries.txt:818
msgid ""
"You can compose statements of arbitrary complexity by combining ``Q`` "
"objects with the ``&`` and ``|`` operators and use parenthetical grouping. "
"Also, ``Q`` objects can be negated using the ``~`` operator, allowing for "
"combined lookups that combine both a normal query and a negated (``NOT``) "
"query::"
msgstr ""

# cff4f721270d48569e3dae4a722552a7
#: ../../topics/db/queries.txt:825
msgid ""
"Each lookup function that takes keyword-arguments (e.g. :meth:`~django.db."
"models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet."
"exclude`, :meth:`~django.db.models.query.QuerySet.get`) can also be passed "
"one or more ``Q`` objects as positional (not-named) arguments. If you "
"provide multiple ``Q`` object arguments to a lookup function, the arguments "
"will be \"AND\"ed together. For example::"
msgstr ""

# 308081b56d97424188973c70c5d854fd
#: ../../topics/db/queries.txt:838
msgid "... roughly translates into the SQL::"
msgstr ""

# 0d98ea0e8d57439ea5c8f1d46e2ed207
#: ../../topics/db/queries.txt:843
msgid ""
"Lookup functions can mix the use of ``Q`` objects and keyword arguments. All "
"arguments provided to a lookup function (be they keyword arguments or ``Q`` "
"objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it "
"must precede the definition of any keyword arguments. For example::"
msgstr ""

# d36b3b9ef28647f39f0a4cf61e3ac56c
#: ../../topics/db/queries.txt:852
msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr ""

# be5ec4e0fac2444ea783b398be99c964
#: ../../topics/db/queries.txt:859
msgid "... would not be valid."
msgstr ""

# f872fd05d583401cb5e12210f8474a14
#: ../../topics/db/queries.txt:863
msgid ""
"The `OR lookups examples`_ in the Django unit tests show some possible uses "
"of ``Q``."
msgstr ""

# de4154caf13e40a49c7a79afc3694b5c
#: ../../topics/db/queries.txt:869
msgid "Comparing objects"
msgstr ""

# 051bd256a64f4ca6ab651595b0eda333
#: ../../topics/db/queries.txt:871
msgid ""
"To compare two model instances, just use the standard Python comparison "
"operator, the double equals sign: ``==``. Behind the scenes, that compares "
"the primary key values of two models."
msgstr ""

# 83aaef9760ef428bbc8a3ca66ec4a55d
#: ../../topics/db/queries.txt:875
msgid ""
"Using the ``Entry`` example above, the following two statements are "
"equivalent::"
msgstr ""

# 3508cac420c84aeeb06ab9f9dc304abb
#: ../../topics/db/queries.txt:880
msgid ""
"If a model's primary key isn't called ``id``, no problem. Comparisons will "
"always use the primary key, whatever it's called. For example, if a model's "
"primary key field is called ``name``, these two statements are equivalent::"
msgstr ""

# ccf1cbc270a24650957abee211fd82d7
#: ../../topics/db/queries.txt:890
msgid "Deleting objects"
msgstr ""

# 4050f022f1024093a8633c86567ddda5
#: ../../topics/db/queries.txt:892
msgid ""
"The delete method, conveniently, is named :meth:`~django.db.models.Model."
"delete`. This method immediately deletes the object and has no return value. "
"Example::"
msgstr ""

# 4934e011f4e746d78b4c5a18a5fcb5bf
#: ../../topics/db/queries.txt:898
msgid ""
"You can also delete objects in bulk. Every :class:`~django.db.models.query."
"QuerySet` has a :meth:`~django.db.models.query.QuerySet.delete` method, "
"which deletes all members of that :class:`~django.db.models.query.QuerySet`."
msgstr ""

# d666ec45df8d4275bf952dc6244d70db
#: ../../topics/db/queries.txt:903
msgid ""
"For example, this deletes all ``Entry`` objects with a ``pub_date`` year of "
"2005::"
msgstr ""

# 0c773c902e2d4dcbb22f4266f7724128
#: ../../topics/db/queries.txt:908
msgid ""
"Keep in mind that this will, whenever possible, be executed purely in SQL, "
"and so the ``delete()`` methods of individual object instances will not "
"necessarily be called during the process. If you've provided a custom "
"``delete()`` method on a model class and want to ensure that it is called, "
"you will need to \"manually\" delete instances of that model (e.g., by "
"iterating over a :class:`~django.db.models.query.QuerySet` and calling "
"``delete()`` on each object individually) rather than using the bulk :meth:"
"`~django.db.models.query.QuerySet.delete` method of a :class:`~django.db."
"models.query.QuerySet`."
msgstr ""

# bc16de92a2f441e5a4a5ec8912183e8c
#: ../../topics/db/queries.txt:918
msgid ""
"When Django deletes an object, by default it emulates the behavior of the "
"SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which "
"had foreign keys pointing at the object to be deleted will be deleted along "
"with it. For example::"
msgstr ""

# dd758873dc894708931fa37a49cec1ac
#: ../../topics/db/queries.txt:927
msgid ""
"This cascade behavior is customizable via the :attr:`~django.db.models."
"ForeignKey.on_delete` argument to the :class:`~django.db.models.ForeignKey`."
msgstr ""

# c330735f9d1048889cef700cac60cdef
#: ../../topics/db/queries.txt:931
msgid ""
"Note that :meth:`~django.db.models.query.QuerySet.delete` is the only :class:"
"`~django.db.models.query.QuerySet` method that is not exposed on a :class:"
"`~django.db.models.Manager` itself. This is a safety mechanism to prevent "
"you from accidentally requesting ``Entry.objects.delete()``, and deleting "
"*all* the entries. If you *do* want to delete all the objects, then you have "
"to explicitly request a complete query set::"
msgstr ""

# 563278e6e723454c9ad06074aa0d1bf5
#: ../../topics/db/queries.txt:943
msgid "Copying model instances"
msgstr ""

# 54d76bd9c3e1452f8fa5e2ae27045149
#: ../../topics/db/queries.txt:945
msgid ""
"Although there is no built-in method for copying model instances, it is "
"possible to easily create new instance with all fields' values copied. In "
"the simplest case, you can just set ``pk`` to ``None``. Using our blog "
"example::"
msgstr ""

# d687e08e36414d47a71b170253de8eec
#: ../../topics/db/queries.txt:955
msgid ""
"Things get more complicated if you use inheritance. Consider a subclass of "
"``Blog``::"
msgstr ""

# 76ff4ed1cea64adea5329c08fe21ba5e
#: ../../topics/db/queries.txt:964
msgid ""
"Due to how inheritance works, you have to set both ``pk`` and ``id`` to "
"None::"
msgstr ""

# 617c60be4c8d4dc785a193d0ed4f8f73
#: ../../topics/db/queries.txt:970
msgid ""
"This process does not copy related objects. If you want to copy relations, "
"you have to write a little bit more code. In our example, ``Entry`` has a "
"many to many field to ``Author``::"
msgstr ""

# 3e8774c4c1624fe1abe983103f3f3b0b
#: ../../topics/db/queries.txt:983
msgid "Updating multiple objects at once"
msgstr ""

# d213e292a5c345afad0089b3b7c295a5
#: ../../topics/db/queries.txt:985
msgid ""
"Sometimes you want to set a field to a particular value for all the objects "
"in a :class:`~django.db.models.query.QuerySet`. You can do this with the :"
"meth:`~django.db.models.query.QuerySet.update` method. For example::"
msgstr ""

# aa9bd93a6a5d41d4975bc75e27c4a512
#: ../../topics/db/queries.txt:992
msgid ""
"You can only set non-relation fields and :class:`~django.db.models."
"ForeignKey` fields using this method. To update a non-relation field, "
"provide the new value as a constant. To update :class:`~django.db.models."
"ForeignKey` fields, set the new value to be the new model instance you want "
"to point to. For example::"
msgstr ""

# 374d8dccf63f4a11b5c3edbcf325a3b3
#: ../../topics/db/queries.txt:1002
msgid ""
"The ``update()`` method is applied instantly and returns the number of rows "
"matched by the query (which may not be equal to the number of rows updated "
"if some rows already have the new value). The only restriction on the :class:"
"`~django.db.models.query.QuerySet` that is updated is that it can only "
"access one database table, the model's main table. You can filter based on "
"related fields, but you can only update columns in the model's main table. "
"Example::"
msgstr ""

# 6ac486de3c974b12915c2803606a203f
#: ../../topics/db/queries.txt:1015
msgid ""
"Be aware that the ``update()`` method is converted directly to an SQL "
"statement. It is a bulk operation for direct updates. It doesn't run any :"
"meth:`~django.db.models.Model.save` methods on your models, or emit the "
"``pre_save`` or ``post_save`` signals (which are a consequence of calling :"
"meth:`~django.db.models.Model.save`), or honor the :attr:`~django.db.models."
"DateField.auto_now` field option. If you want to save every item in a :class:"
"`~django.db.models.query.QuerySet` and make sure that the :meth:`~django.db."
"models.Model.save` method is called on each instance, you don't need any "
"special function to handle that. Just loop over them and call :meth:`~django."
"db.models.Model.save`::"
msgstr ""

# 1398e0ed47b644c7a028fbaa6ef8bf0b
#: ../../topics/db/queries.txt:1029
msgid ""
"Calls to update can also use :ref:`F() objects <query-expressions>` to "
"update one field based on the value of another field in the model. This is "
"especially useful for incrementing counters based upon their current value. "
"For example, to increment the pingback count for every entry in the blog::"
msgstr ""

# e04f1eec1f1e42b78146e5085aa24660
#: ../../topics/db/queries.txt:1036
msgid ""
"However, unlike ``F()`` objects in filter and exclude clauses, you can't "
"introduce joins when you use ``F()`` objects in an update -- you can only "
"reference fields local to the model being updated. If you attempt to "
"introduce a join with an ``F()`` object, a ``FieldError`` will be raised::"
msgstr ""

# efd99fcfde55401f9289cb99a64cc65c
#: ../../topics/db/queries.txt:1047
msgid "Related objects"
msgstr ""

# a891c501660f415399c4d62834e37258
#: ../../topics/db/queries.txt:1049
msgid ""
"When you define a relationship in a model (i.e., a :class:`~django.db.models."
"ForeignKey`, :class:`~django.db.models.OneToOneField`, or :class:`~django.db."
"models.ManyToManyField`), instances of that model will have a convenient API "
"to access the related object(s)."
msgstr ""

# 6350b6d78a64447c980ed9e8798bdabe
#: ../../topics/db/queries.txt:1055
msgid ""
"Using the models at the top of this page, for example, an ``Entry`` object "
"``e`` can get its associated ``Blog`` object by accessing the ``blog`` "
"attribute: ``e.blog``."
msgstr ""

# 483acf0c140b4f7aba4af16adbd8a5b7
#: ../../topics/db/queries.txt:1059
msgid ""
"(Behind the scenes, this functionality is implemented by Python "
"descriptors_. This shouldn't really matter to you, but we point it out here "
"for the curious.)"
msgstr ""

# cbc5cabf63aa4024b9451f7703738bd6
#: ../../topics/db/queries.txt:1062
msgid ""
"Django also creates API accessors for the \"other\" side of the relationship "
"-- the link from the related model to the model that defines the "
"relationship. For example, a ``Blog`` object ``b`` has access to a list of "
"all related ``Entry`` objects via the ``entry_set`` attribute: ``b.entry_set."
"all()``."
msgstr ""

# fdfb056904fe4991a6ed0d882fd63590
#: ../../topics/db/queries.txt:1067
msgid ""
"All examples in this section use the sample ``Blog``, ``Author`` and "
"``Entry`` models defined at the top of this page."
msgstr ""

# a401df2c1ea94dbbb07ac839fb0536b3
#: ../../topics/db/queries.txt:1073
msgid "One-to-many relationships"
msgstr ""

# d22ca55fff8c4031985a757bcbb07f09
#: ../../topics/db/queries.txt:1076
msgid "Forward"
msgstr ""

# 044ec281e67542a5904c69dec3aa9b78
#: ../../topics/db/queries.txt:1078
msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of that "
"model will have access to the related (foreign) object via a simple "
"attribute of the model."
msgstr ""

# 9f39d3c29df547fdbc5da19e8811b9a6
#: ../../topics/db/queries.txt:1087
msgid ""
"You can get and set via a foreign-key attribute. As you may expect, changes "
"to the foreign key aren't saved to the database until you call :meth:"
"`~django.db.models.Model.save`. Example::"
msgstr ""

# 4a3b53f7f8a94ffea95a19c7089c6648
#: ../../topics/db/queries.txt:1095
msgid ""
"If a :class:`~django.db.models.ForeignKey` field has ``null=True`` set (i."
"e., it allows ``NULL`` values), you can assign ``None`` to it. Example::"
msgstr ""

# b0c2317d2ed64344b21d84ffdeaf2f57
#: ../../topics/db/queries.txt:1102
msgid ""
"Forward access to one-to-many relationships is cached the first time the "
"related object is accessed. Subsequent accesses to the foreign key on the "
"same object instance are cached. Example::"
msgstr ""

# e1818dc1fb1b47a3910b0fd1d1d59be0
#: ../../topics/db/queries.txt:1110
msgid ""
"Note that the :meth:`~django.db.models.query.QuerySet.select_related` :class:"
"`~django.db.models.query.QuerySet` method recursively prepopulates the cache "
"of all one-to-many relationships ahead of time. Example::"
msgstr ""

# 43f125bde7e54a9ea3287ff2fac14a37
#: ../../topics/db/queries.txt:1121
msgid "Following relationships \"backward\""
msgstr ""

# 8635364dce1a4cf9b76c8347c4a1706b
#: ../../topics/db/queries.txt:1123
msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of the "
"foreign-key model will have access to a :class:`~django.db.models.Manager` "
"that returns all instances of the first model. By default, this :class:"
"`~django.db.models.Manager` is named ``FOO_set``, where ``FOO`` is the "
"source model name, lowercased. This :class:`~django.db.models.Manager` "
"returns ``QuerySets``, which can be filtered and manipulated as described in "
"the \"Retrieving objects\" section above."
msgstr ""

# 6babc9f9464a4774a8ed017c4e0bfd1c
#: ../../topics/db/queries.txt:1140
msgid ""
"You can override the ``FOO_set`` name by setting the ``related_name`` "
"parameter in the ``ForeignKey()`` definition. For example, if the ``Entry`` "
"model was altered to ``blog = ForeignKey(Blog, related_name='entries')``, "
"the above example code would look like this::"
msgstr ""

# 59b19f38b7cd4dfeab689cd589ecb7cc
#: ../../topics/db/queries.txt:1152
msgid ""
"You cannot access a reverse :class:`~django.db.models.ForeignKey` :class:"
"`~django.db.models.Manager` from the class; it must be accessed from an "
"instance::"
msgstr ""

# 66f7fa7f33b64643b27c4e59e96cbd61
#: ../../topics/db/queries.txt:1161
msgid ""
"In addition to the :class:`~django.db.models.query.QuerySet` methods defined "
"in \"Retrieving objects\" above, the :class:`~django.db.models.ForeignKey` :"
"class:`~django.db.models.Manager` has additional methods used to handle the "
"set of related objects. A synopsis of each is below, and complete details "
"can be found in the :doc:`related objects reference </ref/models/relations>`."
msgstr ""

# 4e23e231d02b45038cbbfbbd6363f2f9
#: ../../topics/db/queries.txt:1168
msgid "``add(obj1, obj2, ...)``"
msgstr ""

# 7a3e5d53a4f04d06b66e2c9451be4d78
#: ../../topics/db/queries.txt:1168
msgid "Adds the specified model objects to the related object set."
msgstr ""

# a8c512cb8e344366898e33850a144204
#: ../../topics/db/queries.txt:1172
msgid "``create(**kwargs)``"
msgstr ""

# e22c0eefdc404ada8b55efc228ac6430
#: ../../topics/db/queries.txt:1171
msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object."
msgstr ""

# e9dae486ddca45cfae5b4019988e5fcb
#: ../../topics/db/queries.txt:1175
msgid "``remove(obj1, obj2, ...)``"
msgstr ""

# 6e587c4523b84161b2e78d39c68076d6
#: ../../topics/db/queries.txt:1175
msgid "Removes the specified model objects from the related object set."
msgstr ""

# 6eed1d8e80a941f2b895c0d213f49068
#: ../../topics/db/queries.txt:1178
msgid "``clear()``"
msgstr ""

# 856d56996b4e44b4b1c529cdbfd6aa12
#: ../../topics/db/queries.txt:1178
msgid "Removes all objects from the related object set."
msgstr ""

# fb1816bfcf804614878da314b3954bf1
#: ../../topics/db/queries.txt:1180
msgid ""
"To assign the members of a related set in one fell swoop, just assign to it "
"from any iterable object. The iterable can contain object instances, or just "
"a list of primary key values. For example::"
msgstr ""

# 0732cad9d514470b9cc5e37edc09e53a
#: ../../topics/db/queries.txt:1187
msgid ""
"In this example, ``e1`` and ``e2`` can be full Entry instances, or integer "
"primary key values."
msgstr ""

# 6065d653351349d590e655872f9aec28
#: ../../topics/db/queries.txt:1190
msgid ""
"If the ``clear()`` method is available, any pre-existing objects will be "
"removed from the ``entry_set`` before all objects in the iterable (in this "
"case, a list) are added to the set. If the ``clear()`` method is *not* "
"available, all objects in the iterable will be added without removing any "
"existing elements."
msgstr ""

# ce10568bc75a48a290bcd1c206b9f4c9
#: ../../topics/db/queries.txt:1196
msgid ""
"Each \"reverse\" operation described in this section has an immediate effect "
"on the database. Every addition, creation and deletion is immediately and "
"automatically saved to the database."
msgstr ""

# 8001281114b24fb1807860ff28bc5ee6
#: ../../topics/db/queries.txt:1205
msgid ""
"Both ends of a many-to-many relationship get automatic API access to the "
"other end. The API works just as a \"backward\" one-to-many relationship, "
"above."
msgstr ""

# 7dfbd1017e3040a9a3cf86c42420c745
#: ../../topics/db/queries.txt:1208
msgid ""
"The only difference is in the attribute naming: The model that defines the :"
"class:`~django.db.models.ManyToManyField` uses the attribute name of that "
"field itself, whereas the \"reverse\" model uses the lowercased model name "
"of the original model, plus ``'_set'`` (just like reverse one-to-many "
"relationships)."
msgstr ""

# ae6fb9bc1f394e07b1e6b840fb924bd2
#: ../../topics/db/queries.txt:1213
msgid "An example makes this easier to understand::"
msgstr ""

# 201db166c18a49dda198985f2862b208
#: ../../topics/db/queries.txt:1223
msgid ""
"Like :class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` can specify ``related_name``. In the above example, if the :"
"class:`~django.db.models.ManyToManyField` in ``Entry`` had specified "
"``related_name='entries'``, then each ``Author`` instance would have an "
"``entries`` attribute instead of ``entry_set``."
msgstr ""

# 7175a33e717448c1a8c44aac87f95ace
#: ../../topics/db/queries.txt:1232
msgid ""
"One-to-one relationships are very similar to many-to-one relationships. If "
"you define a :class:`~django.db.models.OneToOneField` on your model, "
"instances of that model will have access to the related object via a simple "
"attribute of the model."
msgstr ""

# bf137d644eea46e18ea355c7c61caf1e
#: ../../topics/db/queries.txt:1246
msgid ""
"The difference comes in \"reverse\" queries. The related model in a one-to-"
"one relationship also has access to a :class:`~django.db.models.Manager` "
"object, but that :class:`~django.db.models.Manager` represents a single "
"object, rather than a collection of objects::"
msgstr ""

# 0d9dfc001b884317b84459c7929e58a2
#: ../../topics/db/queries.txt:1254
msgid ""
"If no object has been assigned to this relationship, Django will raise a "
"``DoesNotExist`` exception."
msgstr ""

# 066faf70a17d463ab6d0e7589600ca30
#: ../../topics/db/queries.txt:1257
msgid ""
"Instances can be assigned to the reverse relationship in the same way as you "
"would assign the forward relationship::"
msgstr ""

# cffdeb4183c14defbbe631b5d765c30f
#: ../../topics/db/queries.txt:1263
msgid "How are the backward relationships possible?"
msgstr ""

# a5a77ed42e194d25bca14d65b4aa240e
#: ../../topics/db/queries.txt:1265
msgid ""
"Other object-relational mappers require you to define relationships on both "
"sides. The Django developers believe this is a violation of the DRY (Don't "
"Repeat Yourself) principle, so Django only requires you to define the "
"relationship on one end."
msgstr ""

# a245caab22234e1fbe4ec7af2fbad7cf
#: ../../topics/db/queries.txt:1270
msgid ""
"But how is this possible, given that a model class doesn't know which other "
"model classes are related to it until those other model classes are loaded?"
msgstr ""

# 3b1e0738fe8b4299ac4315a772fae05f
#: ../../topics/db/queries.txt:1273
msgid ""
"The answer lies in the :setting:`INSTALLED_APPS` setting. The first time any "
"model is loaded, Django iterates over every model in :setting:"
"`INSTALLED_APPS` and creates the backward relationships in memory as needed. "
"Essentially, one of the functions of :setting:`INSTALLED_APPS` is to tell "
"Django the entire model domain."
msgstr ""

# 52f03bd858854fffbbe5db173db873c3
#: ../../topics/db/queries.txt:1280
msgid "Queries over related objects"
msgstr ""

# 9c0344607c584b879e6d963d40a349ac
#: ../../topics/db/queries.txt:1282
msgid ""
"Queries involving related objects follow the same rules as queries involving "
"normal value fields. When specifying the value for a query to match, you may "
"use either an object instance itself, or the primary key value for the "
"object."
msgstr ""

# aa80694b85934f66b5de559c7d9b7f60
#: ../../topics/db/queries.txt:1286
msgid ""
"For example, if you have a Blog object ``b`` with ``id=5``, the following "
"three queries would be identical::"
msgstr ""

# 220ddf19c45d4aeea14f1bed14095d35
#: ../../topics/db/queries.txt:1294
msgid "Falling back to raw SQL"
msgstr ""

# 4b8b8ea046844a19897a891980dad963
#: ../../topics/db/queries.txt:1296
msgid ""
"If you find yourself needing to write an SQL query that is too complex for "
"Django's database-mapper to handle, you can fall back on writing SQL by "
"hand. Django has a couple of options for writing raw SQL queries; see :doc:`/"
"topics/db/sql`."
msgstr ""

# 77ba1260b2494846a3f82e98858b0111
#: ../../topics/db/queries.txt:1301
msgid ""
"Finally, it's important to note that the Django database layer is merely an "
"interface to your database. You can access your database via other tools, "
"programming languages or database frameworks; there's nothing Django-"
"specific about your database."
msgstr ""

# f0c3e6eecb9f4267a40bb8bc5ab6897c
#: ../../topics/db/sql.txt:3
msgid "Performing raw SQL queries"
msgstr ""

# fbf5c2f22d9d4fb6bb9e452e62c5fc94
#: ../../topics/db/sql.txt:7
msgid ""
"When the :doc:`model query APIs </topics/db/queries>` don't go far enough, "
"you can fall back to writing raw SQL. Django gives you two ways of "
"performing raw SQL queries: you can use :meth:`Manager.raw()` to `perform "
"raw queries and return model instances`__, or you can avoid the model layer "
"entirely and `execute custom SQL directly`__."
msgstr ""

# 8f8764cd7d2e4eb6bf13642e3b9876c5
#: ../../topics/db/sql.txt:19
msgid "Performing raw queries"
msgstr ""

# b409c194f9a746948b1648feb8c95b6d
#: ../../topics/db/sql.txt:21
msgid ""
"The ``raw()`` manager method can be used to perform raw SQL queries that "
"return model instances:"
msgstr ""

# 219d9d90be3b4b1ba433b639d8ff1996
#: ../../topics/db/sql.txt:26
msgid ""
"This method method takes a raw SQL query, executes it, and returns a "
"``django.db.models.query.RawQuerySet`` instance. This ``RawQuerySet`` "
"instance can be iterated over just like an normal QuerySet to provide object "
"instances."
msgstr ""

# 99e52380768948bfaabd382b28f83bf2
#: ../../topics/db/sql.txt:30
msgid ""
"This is best illustrated with an example. Suppose you've got the following "
"model::"
msgstr ""

# 00f538ec3dde46dbabe1fc140bc74479
#: ../../topics/db/sql.txt:37
msgid "You could then execute custom SQL like so::"
msgstr ""

# d8c0d8ea603e4aca9ec9dc2213e6f03f
#: ../../topics/db/sql.txt:44
msgid ""
"Of course, this example isn't very exciting -- it's exactly the same as "
"running ``Person.objects.all()``. However, ``raw()`` has a bunch of other "
"options that make it very powerful."
msgstr ""

# dc8d87aad25648158bec7a8f0d2555bc
#: ../../topics/db/sql.txt:48
msgid "Model table names"
msgstr ""

# 8e5f26d3a7864787b6cbb764f3d7298b
#: ../../topics/db/sql.txt:50
msgid "Where'd the name of the ``Person`` table come from in that example?"
msgstr ""

# 51ca3f13eda1443c885e96200736abca
#: ../../topics/db/sql.txt:52
msgid ""
"By default, Django figures out a database table name by joining the model's "
"\"app label\" -- the name you used in ``manage.py startapp`` -- to the "
"model's class name, with an underscore between them. In the example we've "
"assumed that the ``Person`` model lives in an app named ``myapp``, so its "
"table would be ``myapp_person``."
msgstr ""

# e0595905ec6845b48953c233ea963dc4
#: ../../topics/db/sql.txt:58
msgid ""
"For more details check out the documentation for the :attr:`~Options."
"db_table` option, which also lets you manually set the database table name."
msgstr ""

# 1be83ad6dad74218b1eff83231bad500
#: ../../topics/db/sql.txt:64
msgid ""
"No checking is done on the SQL statement that is passed in to ``.raw()``. "
"Django expects that the statement will return a set of rows from the "
"database, but does nothing to enforce that. If the query does not return "
"rows, a (possibly cryptic) error will result."
msgstr ""

# 937a8961b60f420ba3eabb91bfa1b49f
#: ../../topics/db/sql.txt:70
msgid "Mapping query fields to model fields"
msgstr ""

# 0f05d2f7f79a4fcba7e5c13c3bb5bfb3
#: ../../topics/db/sql.txt:72
msgid ""
"``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""

# 3548f25b4a1445ce945fa452f371ecee
#: ../../topics/db/sql.txt:74
msgid ""
"The order of fields in your query doesn't matter. In other words, both of "
"the following queries work identically::"
msgstr ""

# 6de45d928339410dbe628377292205df
#: ../../topics/db/sql.txt:82
msgid ""
"Matching is done by name. This means that you can use SQL's ``AS`` clauses "
"to map fields in the query to model fields. So if you had some other table "
"that had ``Person`` data in it, you could easily map it into ``Person`` "
"instances::"
msgstr ""

# 5fb2bb71f3a34ac495140784e11319d8
#: ../../topics/db/sql.txt:92
msgid ""
"As long as the names match, the model instances will be created correctly."
msgstr ""

# f13535b8186648e494f54571c13cc578
#: ../../topics/db/sql.txt:94
msgid ""
"Alternatively, you can map fields in the query to model fields using the "
"``translations`` argument to ``raw()``. This is a dictionary mapping names "
"of fields in the query to names of fields on the model. For example, the "
"above query could also be written::"
msgstr ""

# be04e7c06a8e4ffbae0888b44b1e2ece
#: ../../topics/db/sql.txt:103
msgid "Index lookups"
msgstr ""

# 6c5016f3d2cb42cc812e9e78de1d5508
#: ../../topics/db/sql.txt:105
msgid ""
"``raw()`` supports indexing, so if you need only the first result you can "
"write::"
msgstr ""

# 2092d60e8c2d4e358bd28e4ecd2c1ea9
#: ../../topics/db/sql.txt:110
msgid ""
"However, the indexing and slicing are not performed at the database level. "
"If you have a big amount of ``Person`` objects in your database, it is more "
"efficient to limit the query at the SQL level::"
msgstr ""

# 0fde49c35f014fd2b97098a17f772f4a
#: ../../topics/db/sql.txt:117
msgid "Deferring model fields"
msgstr ""

# b4db187026d04ad88db64b011ae0e6ce
#: ../../topics/db/sql.txt:119
msgid "Fields may also be left out::"
msgstr ""

# d311be38070d4f93a998ddaee4d83019
#: ../../topics/db/sql.txt:123
msgid ""
"The ``Person`` objects returned by this query will be deferred model "
"instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means "
"that the fields that are omitted from the query will be loaded on demand. "
"For example::"
msgstr ""

# 1a30a7e0fa084d5e88aedcb3517f9239
#: ../../topics/db/sql.txt:134
msgid ""
"From outward appearances, this looks like the query has retrieved both the "
"first name and last name. However, this example actually issued 3 queries. "
"Only the first names were retrieved by the raw() query -- the last names "
"were both retrieved on demand when they were printed."
msgstr ""

# 71433a2fe0a44a558e3e938748487051
#: ../../topics/db/sql.txt:139
msgid ""
"There is only one field that you can't leave out - the primary key field. "
"Django uses the primary key to identify model instances, so it must always "
"be included in a raw query. An ``InvalidQuery`` exception will be raised if "
"you forget to include the primary key."
msgstr ""

# 6cfcd06ec4ff4353ae3c0de4f0463327
#: ../../topics/db/sql.txt:145
msgid "Adding annotations"
msgstr ""

# ea8f277c20a7454fb3d6b6c15c0cc2db
#: ../../topics/db/sql.txt:147
msgid ""
"You can also execute queries containing fields that aren't defined on the "
"model. For example, we could use `PostgreSQL's age() function`__ to get a "
"list of people with their ages calculated by the database::"
msgstr ""

# 336e42525e584a79b0c52e58332ef214
#: ../../topics/db/sql.txt:161
msgid "Passing parameters into ``raw()``"
msgstr ""

# f8ed0d50a5194bb5a2c92348a73e597e
#: ../../topics/db/sql.txt:163
msgid ""
"If you need to perform parameterized queries, you can use the ``params`` "
"argument to ``raw()``::"
msgstr ""

# a084dcdd8a3c45f5a9f8097dbee5fcde
#: ../../topics/db/sql.txt:169
msgid ""
"``params`` is a list of parameters. You'll use ``%s`` placeholders in the "
"query string (regardless of your database engine); they'll be replaced with "
"parameters from the ``params`` list."
msgstr ""

# 4261d6b2424b47b2975a4d9dd7680b89
#: ../../topics/db/sql.txt:175
msgid "**Do not use string formatting on raw queries!**"
msgstr ""

# 2fb02a08bc2543878fb2abb25fa88e22
#: ../../topics/db/sql.txt:177
msgid "It's tempting to write the above query as::"
msgstr ""

# 66e4775f9bef4a0b824e3932b851af32
#: ../../topics/db/sql.txt:182
msgid "**Don't.**"
msgstr ""

# 74e5ce79ba6e478d8e3845e2d7884d92
#: ../../topics/db/sql.txt:184
msgid ""
"Using the ``params`` list completely protects you from `SQL injection "
"attacks`__, a common exploit where attackers inject arbitrary SQL into your "
"database. If you use string interpolation, sooner or later you'll fall "
"victim to SQL injection. As long as you remember to always use the "
"``params`` list you'll be protected."
msgstr ""

# 25098d1943a1402c945fc630e5ccec84
#: ../../topics/db/sql.txt:195
msgid "Executing custom SQL directly"
msgstr ""

# 8e2a96a61aff4200904fc657999fb061
#: ../../topics/db/sql.txt:197
msgid ""
"Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to "
"perform queries that don't map cleanly to models, or directly execute "
"``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""

# 630954f849d04b25bfb36fc0b91f95ce
#: ../../topics/db/sql.txt:201
msgid ""
"In these cases, you can always access the database directly, routing around "
"the model layer entirely."
msgstr ""

# 142f306ef61b49a58a30b501d158c72e
#: ../../topics/db/sql.txt:204
msgid ""
"The object ``django.db.connection`` represents the default database "
"connection, and ``django.db.transaction`` represents the default database "
"transaction. To use the database connection, call ``connection.cursor()`` to "
"get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute "
"the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the "
"resulting rows. After performing a data changing operation, you should then "
"call ``transaction.commit_unless_managed()`` to ensure your changes are "
"committed to the database. If your query is purely a data retrieval "
"operation, no commit is required. For example::"
msgstr ""

# 744788523c8748da81ae1eb878554e63
#: ../../topics/db/sql.txt:229
msgid ""
"If you are using :doc:`more than one database </topics/db/multi-db>`, you "
"can use ``django.db.connections`` to obtain the connection (and cursor) for "
"a specific database. ``django.db.connections`` is a dictionary-like object "
"that allows you to retrieve a specific connection using its alias::"
msgstr ""

# 98df3ca2eef04086b8d9f91efe75facc
#: ../../topics/db/sql.txt:240
msgid ""
"By default, the Python DB API will return results without their field names, "
"which means you end up with a ``list`` of values, rather than a ``dict``. At "
"a small performance cost, you can return results as a ``dict`` by using "
"something like this::"
msgstr ""

# aa562303b6cd4d209d7abaa089372e17
#: ../../topics/db/sql.txt:253
msgid "Here is an example of the difference between the two::"
msgstr ""

# 7a707c08ee2d4978b6bbf2d4097c0112
#: ../../topics/db/sql.txt:267
msgid "Transactions and raw SQL"
msgstr ""

# f2ff80f055274508ad557b38db9de268
#: ../../topics/db/sql.txt:269
msgid ""
"When you make a raw SQL call, Django will automatically mark the current "
"transaction as dirty. You must then ensure that the transaction containing "
"those calls is closed correctly. See :ref:`the notes on the requirements of "
"Django's transaction handling <topics-db-transactions-requirements>` for "
"more details."
msgstr ""

# 8751cc2bc0e342fdb900cf890cb87d91
#: ../../topics/db/sql.txt:276
msgid "Connections and cursors"
msgstr ""

# dd8bc5d4292647eea1299123ccc86c86
#: ../../topics/db/sql.txt:278
msgid ""
"``connection`` and ``cursor`` mostly implement the standard Python DB-API "
"described in :pep:`249` (except when it comes to :doc:`transaction handling "
"</topics/db/transactions>`). If you're not familiar with the Python DB-API, "
"note that the SQL statement in ``cursor.execute()`` uses placeholders, ``\"%s"
"\"``, rather than adding parameters directly within the SQL. If you use this "
"technique, the underlying database library will automatically add quotes and "
"escaping to your parameter(s) as necessary. (Also note that Django expects "
"the ``\"%s\"`` placeholder, *not* the ``\"?\"`` placeholder, which is used "
"by the SQLite Python bindings. This is for the sake of consistency and "
"sanity.)"
msgstr ""

# 9b82b75051bf4b5d83a17794f4d37d40
#: ../../topics/db/tablespaces.txt:3
msgid "Tablespaces"
msgstr ""

# 895706fa35d548dcb0f01fe340d3161a
#: ../../topics/db/tablespaces.txt:5
msgid ""
"A common paradigm for optimizing performance in database systems is the use "
"of `tablespaces`_ to organize disk layout."
msgstr ""

# 1dec288aaf244bd7a654f97f00440d87
#: ../../topics/db/tablespaces.txt:11
msgid ""
"Django does not create the tablespaces for you. Please refer to your "
"database engine's documentation for details on creating and managing "
"tablespaces."
msgstr ""

# 5cb376bf667d4595a24e6bff58da7d51
#: ../../topics/db/tablespaces.txt:17
msgid "Declaring tablespaces for tables"
msgstr ""

# f4b77a8c35f442cf8f048a51ee216014
#: ../../topics/db/tablespaces.txt:19
msgid ""
"A tablespace can be specified for the table generated by a model by "
"supplying the :attr:`~django.db.models.Options.db_tablespace` option inside "
"the model's ``class Meta``. This option also affects tables automatically "
"created for :class:`~django.db.models.ManyToManyField`\\ s in the model."
msgstr ""

# afedab8fa7d84f9e8da3468765892aa9
#: ../../topics/db/tablespaces.txt:24
msgid ""
"You can use the :setting:`DEFAULT_TABLESPACE` setting to specify a default "
"value for :attr:`~django.db.models.Options.db_tablespace`. This is useful "
"for setting a tablespace for the built-in Django apps and other applications "
"whose code you cannot control."
msgstr ""

# 6257536f21344672852431c4dce30737
#: ../../topics/db/tablespaces.txt:30
msgid "Declaring tablespaces for indexes"
msgstr ""

# a1ed187978b0456da0e46cc78c8de57c
#: ../../topics/db/tablespaces.txt:32
msgid ""
"You can pass the :attr:`~django.db.models.Field.db_tablespace` option to a "
"``Field`` constructor to specify an alternate tablespace for the ``Field``'s "
"column index. If no index would be created for the column, the option is "
"ignored."
msgstr ""

# 995194087ffb436cb2071aeea95fe5a1
#: ../../topics/db/tablespaces.txt:37
msgid ""
"You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify a "
"default value for :attr:`~django.db.models.Field.db_tablespace`."
msgstr ""

# 4dddae3c200c4ccdb1a497f10d28831d
#: ../../topics/db/tablespaces.txt:40
msgid ""
"If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you "
"didn't set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the "
"same tablespace as the tables."
msgstr ""

# 8c01a56eb8c2441ca31f4932fd9681f5
#: ../../topics/db/tablespaces.txt:57
msgid ""
"In this example, the tables generated by the ``TablespaceExample`` model (i."
"e. the model table and the many-to-many table) would be stored in the "
"``tables`` tablespace. The index for the name field and the indexes on the "
"many-to-many table would be stored in the ``indexes`` tablespace. The "
"``data`` field would also generate an index, but no tablespace for it is "
"specified, so it would be stored in the model tablespace ``tables`` by "
"default."
msgstr ""

# ee982de5637f474092b3907123a0137a
#: ../../topics/db/tablespaces.txt:65
msgid "Database support"
msgstr ""

# fe10a04fcecd4569ae72f2dc0beb14a3
#: ../../topics/db/tablespaces.txt:67
msgid "PostgreSQL and Oracle support tablespaces. SQLite and MySQL don't."
msgstr ""

# 45b4d4e2ddc0460da20d3fda0f23a513
#: ../../topics/db/tablespaces.txt:69
msgid ""
"When you use a backend that lacks support for tablespaces, Django ignores "
"all tablespace-related options."
msgstr ""

# 3affd453bed040fea2000ee9ad9e0c8b
#: ../../topics/db/transactions.txt:3
msgid "Managing database transactions"
msgstr ""

# 790411517c4f4500926274b63672721b
#: ../../topics/db/transactions.txt:7
msgid ""
"Django gives you a few ways to control how database transactions are "
"managed, if you're using a database that supports transactions."
msgstr ""

# 8adb430c5aa44740a922432ca0c6d1a0
#: ../../topics/db/transactions.txt:11
msgid "Django's default transaction behavior"
msgstr ""

# 81cc1e0253254e1da3bd7557bac74eee
#: ../../topics/db/transactions.txt:13
msgid ""
"Django's default behavior is to run with an open transaction which it "
"commits automatically when any built-in, data-altering model function is "
"called. For example, if you call ``model.save()`` or ``model.delete()``, the "
"change will be committed immediately."
msgstr ""

# 1c864520ca9f4ce7be27fbde13db9b67
#: ../../topics/db/transactions.txt:18
msgid ""
"This is much like the auto-commit setting for most databases. As soon as you "
"perform an action that needs to write to the database, Django produces the "
"``INSERT``/``UPDATE``/``DELETE`` statements and then does the ``COMMIT``. "
"There's no implicit ``ROLLBACK``."
msgstr ""

# 8094e2f0663643259bb9c08cedc725d0
#: ../../topics/db/transactions.txt:24
msgid "Tying transactions to HTTP requests"
msgstr ""

# 612ef8bd958f4125942949077e80bf8f
#: ../../topics/db/transactions.txt:26
msgid ""
"The recommended way to handle transactions in Web requests is to tie them to "
"the request and response phases via Django's ``TransactionMiddleware``."
msgstr ""

# c0188ffe04ac4267a72d3b4d2a7f13e3
#: ../../topics/db/transactions.txt:29
msgid ""
"It works like this: When a request starts, Django starts a transaction. If "
"the response is produced without problems, Django commits any pending "
"transactions. If the view function produces an exception, Django rolls back "
"any pending transactions."
msgstr ""

# 55a91159bb6c41458297a76014f46321
#: ../../topics/db/transactions.txt:34
msgid ""
"To activate this feature, just add the ``TransactionMiddleware`` middleware "
"to your :setting:`MIDDLEWARE_CLASSES` setting::"
msgstr ""

# 91bebff3c04b4fde9f680cc0441714d3
#: ../../topics/db/transactions.txt:45
msgid ""
"The order is quite important. The transaction middleware applies not only to "
"view functions, but also for all middleware modules that come after it. So "
"if you use the session middleware after the transaction middleware, session "
"creation will be part of the transaction."
msgstr ""

# 0d4da68cf614447584a9b60808ed47a2
#: ../../topics/db/transactions.txt:50
msgid ""
"The various cache middlewares are an exception: ``CacheMiddleware``, :class:"
"`~django.middleware.cache.UpdateCacheMiddleware`, and :class:`~django."
"middleware.cache.FetchFromCacheMiddleware` are never affected. Even when "
"using database caching, Django's cache backend uses its own database cursor "
"(which is mapped to its own database connection internally)."
msgstr ""

# d70295314a0f422eab42c45118e1f7f1
#: ../../topics/db/transactions.txt:58
msgid ""
"The ``TransactionMiddleware`` only affects the database aliased as \"default"
"\" within your :setting:`DATABASES` setting.  If you are using multiple "
"databases and want transaction control over databases other than \"default"
"\", you will need to write your own transaction middleware."
msgstr ""

# 06e2f13b40fc4f9a9e6c3a293714c12a
#: ../../topics/db/transactions.txt:66
msgid "Controlling transaction management in views"
msgstr ""

# 945aae6b99cf4e12bd881dbfee61eafa
#: ../../topics/db/transactions.txt:68
msgid ""
"For most people, implicit request-based transactions work wonderfully. "
"However, if you need more fine-grained control over how transactions are "
"managed, you can use a set of functions in ``django.db.transaction`` to "
"control transactions on a per-function or per-code-block basis."
msgstr ""

# d27cb5704c134ce391f1b870e2586428
#: ../../topics/db/transactions.txt:73
msgid ""
"These functions, described in detail below, can be used in two different "
"ways:"
msgstr ""

# 72e787b95ccb431c91868d11b230517a
#: ../../topics/db/transactions.txt:75
msgid "As a decorator_ on a particular function. For example::"
msgstr ""

# e6f3e831046e48e5b804020bb57d1721
#: ../../topics/db/transactions.txt:85
msgid "As a `context manager`_ around a particular block of code::"
msgstr ""

# e79a7c0b1b9246569b27af2e221b5f12
#: ../../topics/db/transactions.txt:99
msgid "Both techniques work with all supported version of Python."
msgstr ""

# fdfb220ce20c4543a0d4f4816d02918c
#: ../../topics/db/transactions.txt:104
msgid ""
"For maximum compatibility, all of the examples below show transactions using "
"the decorator syntax, but all of the follow functions may be used as context "
"managers, too."
msgstr ""

# 9cd81fc61a194feb9d271ac1166a58b6
#: ../../topics/db/transactions.txt:110
msgid ""
"Although the examples below use view functions as examples, these decorators "
"and context managers can be used anywhere in your code that you need to deal "
"with transactions."
msgstr ""

# eef57b7e28e24b239a658b40412c648e
#: ../../topics/db/transactions.txt:118
msgid ""
"Use the ``autocommit`` decorator to switch a view function to Django's "
"default commit behavior, regardless of the global transaction setting."
msgstr ""

# 12e09321624a4576b693e7a1ad0e52a5
#: ../../topics/db/transactions.txt:133
msgid ""
"Within ``viewfunc()``, transactions will be committed as soon as you call "
"``model.save()``, ``model.delete()``, or any other function that writes to "
"the database.  ``viewfunc2()`` will have this same behavior, but for the ``"
"\"my_other_database\"`` connection."
msgstr ""

# 35a735bcfdd641f584e86b41b4456f19
#: ../../topics/db/transactions.txt:140
msgid ""
"Use the ``commit_on_success`` decorator to use a single transaction for all "
"the work done in a function::"
msgstr ""

# 1f159b32b2664ea3b54c437344d47045
#: ../../topics/db/transactions.txt:153
msgid ""
"If the function returns successfully, then Django will commit all work done "
"within the function at that point. If the function raises an exception, "
"though, Django will roll back the transaction."
msgstr ""

# b1a394a699f3407bb44bbe2f453391d9
#: ../../topics/db/transactions.txt:159
msgid ""
"Use the ``commit_manually`` decorator if you need full control over "
"transactions. It tells Django you'll be managing the transaction on your own."
msgstr ""

# a0fbee1285ce42d5b75b4ddab4c5e634
#: ../../topics/db/transactions.txt:163
msgid ""
"Whether you are writing or simply reading from the database, you must "
"``commit()`` or ``rollback()`` explicitly or Django will raise a :exc:"
"`TransactionManagementError` exception. This is required when reading from "
"the database because ``SELECT`` statements may call functions which modify "
"tables, and thus it is impossible to know if any data has been modified."
msgstr ""

# 23326f608b25430aa5cbea3dec578ab2
#: ../../topics/db/transactions.txt:170
msgid "Manual transaction management looks like this::"
msgstr ""

# 5f9b3d43f684460bab43478ca54fdc5f
#: ../../topics/db/transactions.txt:196
msgid "Requirements for transaction handling"
msgstr ""

# 5e1a58eb333e4ced95485397c527f022
#: ../../topics/db/transactions.txt:198
msgid ""
"Django requires that every transaction that is opened is closed before the "
"completion of a request. If you are using :func:`autocommit` (the default "
"commit mode) or :func:`commit_on_success`, this will be done for you "
"automatically (with the exception of :ref:`executing custom SQL <executing-"
"custom-sql>`). However, if you are manually managing transactions (using "
"the :func:`commit_manually` decorator), you must ensure that the transaction "
"is either committed or rolled back before a request is completed."
msgstr ""

# 9fd9ae3641424b0da68f341bf0176add
#: ../../topics/db/transactions.txt:207
msgid ""
"This applies to all database operations, not just write operations. Even if "
"your transaction only reads from the database, the transaction must be "
"committed or rolled back before you complete a request."
msgstr ""

# 106da03ff81941bc88567e0e39eac2d0
#: ../../topics/db/transactions.txt:214
msgid "How to globally deactivate transaction management"
msgstr ""

# 2fc03aeddf09450bab6b4b7f4b4ccbcb
#: ../../topics/db/transactions.txt:216
msgid ""
"Control freaks can totally disable all transaction management by setting :"
"setting:`TRANSACTIONS_MANAGED` to ``True`` in the Django settings file."
msgstr ""

# 449c9b38532d47a8a5be3be39f0a7aec
#: ../../topics/db/transactions.txt:219
msgid ""
"If you do this, Django won't provide any automatic transaction management "
"whatsoever. Middleware will no longer implicitly commit transactions, and "
"you'll need to roll management yourself. This even requires you to commit "
"changes done by middleware somewhere else."
msgstr ""

# ec52af4b9d7c488a82f0145835519194
#: ../../topics/db/transactions.txt:224
msgid ""
"Thus, this is best used in situations where you want to run your own "
"transaction-controlling middleware or do something really strange. In almost "
"all situations, you'll be better off using the default behavior, or the "
"transaction middleware, and only modify selected functions as needed."
msgstr ""

# 96e7728ba61c4ba49b4de3f35c58ff63
#: ../../topics/db/transactions.txt:232
msgid "Savepoints"
msgstr ""

# 037bfb06cd6a47f8be421f916c1679b3
#: ../../topics/db/transactions.txt:234
msgid ""
"A savepoint is a marker within a transaction that enables you to roll back "
"part of a transaction, rather than the full transaction. Savepoints are "
"available with the PostgreSQL 8, Oracle and MySQL (when using the InnoDB "
"storage engine) backends. Other backends provide the savepoint functions, "
"but they're empty operations -- they don't actually do anything."
msgstr ""

# fd032ec63a534af5ba867fea5bb710d3
#: ../../topics/db/transactions.txt:243
msgid ""
"Savepoints aren't especially useful if you are using the default "
"``autocommit`` behavior of Django. However, if you are using "
"``commit_on_success`` or ``commit_manually``, each open transaction will "
"build up a series of database operations, awaiting a commit or rollback. If "
"you issue a rollback, the entire transaction is rolled back. Savepoints "
"provide the ability to perform a fine-grained rollback, rather than the full "
"rollback that would be performed by ``transaction.rollback()``."
msgstr ""

# c653ebcb00394e659e3bf5fd1a833099
#: ../../topics/db/transactions.txt:251
msgid ""
"Each of these functions takes a ``using`` argument which should be the name "
"of a database for which the behavior applies.  If no ``using`` argument is "
"provided then the ``\"default\"`` database is used."
msgstr ""

# 2e5a6934e20241a3ac8c915c1e47673a
#: ../../topics/db/transactions.txt:255
msgid "Savepoints are controlled by three methods on the transaction object:"
msgstr ""

# 36f5245de27d486ab61f8e59bc82ff95
#: ../../topics/db/transactions.txt:259
msgid ""
"Creates a new savepoint. This marks a point in the transaction that is known "
"to be in a \"good\" state."
msgstr ""

# f34e7735ca9c4f7197b3eeb464e3cb31
#: ../../topics/db/transactions.txt:262
msgid "Returns the savepoint ID (sid)."
msgstr ""

# b7f22fcafdc34b4cb1512b292d630475
#: ../../topics/db/transactions.txt:266
msgid ""
"Updates the savepoint to include any operations that have been performed "
"since the savepoint was created, or since the last commit."
msgstr ""

# cdbf2fafb1b24e5ab5f5ae40a4b143dc
#: ../../topics/db/transactions.txt:271
msgid ""
"Rolls the transaction back to the last point at which the savepoint was "
"committed."
msgstr ""

# ed1b61684dd64dc4a8ddf50bf5e713ac
#: ../../topics/db/transactions.txt:274
msgid "The following example demonstrates the use of savepoints::"
msgstr ""

# 2d327f44953e4f9981fe28a7de416f53
#: ../../topics/db/transactions.txt:298
msgid "Transactions in MySQL"
msgstr ""

# 74f37ca6d9c34d90b3d81c804dde6614
#: ../../topics/db/transactions.txt:300
msgid ""
"If you're using MySQL, your tables may or may not support transactions; it "
"depends on your MySQL version and the table types you're using. (By \"table "
"types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction "
"peculiarities are outside the scope of this article, but the MySQL site has "
"`information on MySQL transactions`_."
msgstr ""

# 1ab0e0f300c94e669234cfbb9acab136
#: ../../topics/db/transactions.txt:306
msgid ""
"If your MySQL setup does *not* support transactions, then Django will "
"function in auto-commit mode: Statements will be executed and committed as "
"soon as they're called. If your MySQL setup *does* support transactions, "
"Django will handle transactions as explained in this document."
msgstr ""

# d02769385d4f4769acf1e7aefbb70f93
#: ../../topics/db/transactions.txt:314
msgid "Handling exceptions within PostgreSQL transactions"
msgstr ""

# 2355358267a74eada4ff565f3bdbe517
#: ../../topics/db/transactions.txt:316
msgid ""
"When a call to a PostgreSQL cursor raises an exception (typically "
"``IntegrityError``), all subsequent SQL in the same transaction will fail "
"with the error \"current transaction is aborted, queries ignored until end "
"of transaction block\". Whilst simple use of ``save()`` is unlikely to raise "
"an exception in PostgreSQL, there are more advanced usage patterns which "
"might, such as saving objects with unique fields, saving using the "
"force_insert/force_update flag, or invoking custom SQL."
msgstr ""

# 6ffe32392cb34c80b83fa6742168886a
#: ../../topics/db/transactions.txt:324
msgid "There are several ways to recover from this sort of error."
msgstr ""

# f294e95f3c2148ee80e74fcf3e94e9e5
#: ../../topics/db/transactions.txt:327
msgid "Transaction rollback"
msgstr ""

# e8334d30d9a446f3b09c2a48d2950b67
#: ../../topics/db/transactions.txt:329
msgid "The first option is to roll back the entire transaction. For example::"
msgstr ""

# 621cda9204ab4f6981279e3d563272f5
#: ../../topics/db/transactions.txt:338
msgid ""
"Calling ``transaction.rollback()`` rolls back the entire transaction. Any "
"uncommitted database operations will be lost. In this example, the changes "
"made by ``a.save()`` would be lost, even though that operation raised no "
"error itself."
msgstr ""

# 965890fa257e487c82c291fb47a0f98c
#: ../../topics/db/transactions.txt:344
msgid "Savepoint rollback"
msgstr ""

# ffc109fe3a57475b8f1a67b0a9247986
#: ../../topics/db/transactions.txt:346
msgid ""
"If you are using PostgreSQL 8 or later, you can use :ref:`savepoints <topics-"
"db-transactions-savepoints>` to control the extent of a rollback. Before "
"performing a database operation that could fail, you can set or update the "
"savepoint; that way, if the operation fails, you can roll back the single "
"offending operation, rather than the entire transaction. For example::"
msgstr ""

# 413079fa25be41b692cc91c3b2d8be33
#: ../../topics/db/transactions.txt:361
msgid ""
"In this example, ``a.save()`` will not be undone in the case where ``b."
"save()`` raises an exception."
msgstr ""

# e207526400e841a3b73eb1d996a8b0b6
#: ../../topics/db/transactions.txt:365
msgid "Database-level autocommit"
msgstr ""

# eb54efff4f694c0db609f7d1e3140554
#: ../../topics/db/transactions.txt:367
msgid ""
"With PostgreSQL 8.2 or later, there is an advanced option to run PostgreSQL "
"with :doc:`database-level autocommit </ref/databases>`. If you use this "
"option, there is no constantly open transaction, so it is always possible to "
"continue after catching an exception. For example::"
msgstr ""

# e724abdedf624d36b305d638c2778dcc
#: ../../topics/db/transactions.txt:381
msgid ""
"This is not the same as the :ref:`autocommit decorator <topics-db-"
"transactions-autocommit>`. When using database level autocommit there is no "
"database transaction at all. The ``autocommit`` decorator still uses "
"transactions, automatically committing each transaction when a database "
"modifying operation occurs."
msgstr ""

# 5d64b322d1504d4db78f8ade5770324f
#: ../../topics/email.txt:3
msgid "Sending email"
msgstr ""

# 9a255c87f567415985b6902743d819b2
#: ../../topics/email.txt:8
msgid ""
"Although Python makes sending email relatively easy via the :mod:`smtplib` "
"module, Django provides a couple of light wrappers over it. These wrappers "
"are provided to make sending email extra quick, to make it easy to test "
"email sending during development, and to provide support for platforms that "
"can't use SMTP."
msgstr ""

# 4f37f44a1e124d23bace2090e8dfb24d
#: ../../topics/email.txt:14
msgid "The code lives in the ``django.core.mail`` module."
msgstr ""

# e473342233e8436d96c8206a73d8c5b5
#: ../../topics/email.txt:19
msgid "In two lines::"
msgstr ""

# 2b12bb185ac441c0ac8c87585b8fd9e6
#: ../../topics/email.txt:26
msgid ""
"Mail is sent using the SMTP host and port specified in the :setting:"
"`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The :setting:"
"`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if set, are "
"used to authenticate to the SMTP server, and the :setting:`EMAIL_USE_TLS` "
"setting controls whether a secure connection is used."
msgstr ""

# bd8c6b7054174438876aa1351ae5f3a9
#: ../../topics/email.txt:34
msgid ""
"The character set of email sent with ``django.core.mail`` will be set to the "
"value of your :setting:`DEFAULT_CHARSET` setting."
msgstr ""

# 6e8699ff29984226b840bb509a5501b9
#: ../../topics/email.txt:38
msgid "send_mail()"
msgstr ""

# 225272aa5acb46be8758f4a9bab2dae9
#: ../../topics/email.txt:42
msgid ""
"The simplest way to send email is using ``django.core.mail.send_mail()``."
msgstr ""

# c417044472cc4ce38f475f89e0de4ebe
#: ../../topics/email.txt:45
msgid ""
"The ``subject``, ``message``, ``from_email`` and ``recipient_list`` "
"parameters are required."
msgstr ""

# ca15f9e828eb43fbbdf2031eb0973347
#: ../../topics/email.txt:48
msgid "``subject``: A string."
msgstr ""

# 635a27b092f74688adbc6beeeb79206d
#: ../../topics/email.txt:49
msgid "``message``: A string."
msgstr ""

# a2fc733938664e50b08045d14bc2e00c
#: ../../topics/email.txt:50
msgid "``from_email``: A string."
msgstr ""

# e2bfd17df5ad4aa7802d34f21fbae4ec
#: ../../topics/email.txt:51
msgid ""
"``recipient_list``: A list of strings, each an email address. Each member of "
"``recipient_list`` will see the other recipients in the \"To:\" field of the "
"email message."
msgstr ""

# 706580edffcd4d82a9eb6638d8a05e57
#: ../../topics/email.txt:54
msgid ""
"``fail_silently``: A boolean. If it's ``False``, ``send_mail`` will raise "
"an :exc:`smtplib.SMTPException`. See the :mod:`smtplib` docs for a list of "
"possible exceptions, all of which are subclasses of :exc:`~smtplib."
"SMTPException`."
msgstr ""

# eced36b594d04c249039ee7694014546
#: ../../topics/email.txt:58
msgid ""
"``auth_user``: The optional username to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_USER` setting."
msgstr ""

# 9d61b98f272c46d0acafc7ceecb3e7db
#: ../../topics/email.txt:61
msgid ""
"``auth_password``: The optional password to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_PASSWORD` setting."
msgstr ""

# c0cea9d967544ed2b26a8d59c2a508ef
#: ../../topics/email.txt:64
msgid ""
"``connection``: The optional email backend to use to send the mail. If "
"unspecified, an instance of the default backend will be used. See the "
"documentation on :ref:`Email backends <topic-email-backends>` for more "
"details."
msgstr ""

# 039e105692074ff5ab9755cc294eb01d
#: ../../topics/email.txt:70
msgid "send_mass_mail()"
msgstr ""

# 990edc408971401b9ae2edc945a4c02d
#: ../../topics/email.txt:74
msgid ""
"``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr ""

# 3ef09e65fbf84a5c8615543bc827429d
#: ../../topics/email.txt:76
msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr ""

# d55113f99ea546f38631335ea5e6cd78
#: ../../topics/email.txt:80
msgid ""
"``fail_silently``, ``auth_user`` and ``auth_password`` have the same "
"functions as in :meth:`~django.core.mail.send_mail()`."
msgstr ""

# 6df09892d21548b2a03449f38c8cc4f7
#: ../../topics/email.txt:83
msgid ""
"Each separate element of ``datatuple`` results in a separate email message. "
"As in :meth:`~django.core.mail.send_mail()`, recipients in the same "
"``recipient_list`` will all see the other addresses in the email messages' "
"\"To:\" field."
msgstr ""

# 9d16740057e44b259e193701d491634b
#: ../../topics/email.txt:88
msgid ""
"For example, the following code would send two different messages to two "
"different sets of recipients; however, only one connection to the mail "
"server would be opened::"
msgstr ""

# 11fd71e8b148447e85cc5f8915e81e6a
#: ../../topics/email.txt:97
msgid "send_mass_mail() vs. send_mail()"
msgstr ""

# 070892977b8e4f17b58c1dbc7e54f0d4
#: ../../topics/email.txt:99
msgid ""
"The main difference between :meth:`~django.core.mail.send_mass_mail()` and :"
"meth:`~django.core.mail.send_mail()` is that :meth:`~django.core.mail."
"send_mail()` opens a connection to the mail server each time it's executed, "
"while :meth:`~django.core.mail.send_mass_mail()` uses a single connection "
"for all of its messages. This makes :meth:`~django.core.mail."
"send_mass_mail()` slightly more efficient."
msgstr ""

# bcbfd0a184f44d2c882798d8607de4d4
#: ../../topics/email.txt:107
msgid "mail_admins()"
msgstr ""

# 7e48d16fcb8c46a0bef8ddf966f56dfa
#: ../../topics/email.txt:111
msgid ""
"``django.core.mail.mail_admins()`` is a shortcut for sending an email to the "
"site admins, as defined in the :setting:`ADMINS` setting."
msgstr ""

# b5c5838782b24cd18bb9788332b52395
#: ../../topics/email.txt:114
msgid ""
"``mail_admins()`` prefixes the subject with the value of the :setting:"
"`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by default."
msgstr ""

# a26fc993ad8c48bd8234e290a94e0c77
#: ../../topics/email.txt:117
msgid ""
"The \"From:\" header of the email will be the value of the :setting:"
"`SERVER_EMAIL` setting."
msgstr ""

# 18e4bc4ac1554142b8f2ba681ff5ecca
#: ../../topics/email.txt:120
msgid "This method exists for convenience and readability."
msgstr ""

# 7d15a7992a2249fba581c4e1284a14a3
#: ../../topics/email.txt:122
msgid ""
"If ``html_message`` is provided, the resulting email will be a :mimetype:"
"`multipart/alternative` email with ``message`` as the :mimetype:`text/plain` "
"content type and ``html_message`` as the :mimetype:`text/html` content type."
msgstr ""

# 7692ed2af758402b9b25140c88ec0877
#: ../../topics/email.txt:128
msgid "mail_managers()"
msgstr ""

# bf90fed7dde745b196bfbb69c54235a7
#: ../../topics/email.txt:132
msgid ""
"``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except "
"it sends an email to the site managers, as defined in the :setting:"
"`MANAGERS` setting."
msgstr ""

# 5d3acdab4a6942a8824cf8e9467285b3
# f848aed9c9744fac9874c4904c0d406c
# d5a2dcf681d44542a59fe58dae570879
# dfc717d27ae9438391604d7bfc8f4b36
#: ../../topics/email.txt:137 ../../topics/http/sessions.txt:304
#: ../../topics/http/shortcuts.txt:182 ../../topics/http/urls.txt:564
msgid "Examples"
msgstr ""

# a63eb495ba47499db8d71f800543bdc7
#: ../../topics/email.txt:139
msgid ""
"This sends a single email to john@example.com and jane@example.com, with "
"them both appearing in the \"To:\"::"
msgstr ""

# 38132c89fdcc47ec90ccbd807b5ca527
#: ../../topics/email.txt:145
msgid ""
"This sends a message to john@example.com and jane@example.com, with them "
"both receiving a separate email::"
msgstr ""

# 4e69096c6d914413bcb68a2ca79ac775
#: ../../topics/email.txt:155
msgid "Preventing header injection"
msgstr ""

# 33dadf52ac1b4355a8f375f2f30f1f3c
#: ../../topics/email.txt:157
msgid ""
"`Header injection`_ is a security exploit in which an attacker inserts extra "
"email headers to control the \"To:\" and \"From:\" in email messages that "
"your scripts generate."
msgstr ""

# 97b00880434f465381f3b85bad78e8e7
#: ../../topics/email.txt:161
msgid ""
"The Django email functions outlined above all protect against header "
"injection by forbidding newlines in header values. If any ``subject``, "
"``from_email`` or ``recipient_list`` contains a newline (in either Unix, "
"Windows or Mac style), the email function (e.g. :meth:`~django.core.mail."
"send_mail()`) will raise ``django.core.mail.BadHeaderError`` (a subclass of "
"``ValueError``) and, hence, will not send the email. It's your "
"responsibility to validate all data before passing it to the email functions."
msgstr ""

# 15665dd6237745e09487ce6aa624c662
#: ../../topics/email.txt:169
msgid ""
"If a ``message`` contains headers at the start of the string, the headers "
"will simply be printed as the first bit of the email message."
msgstr ""

# 17efa3c7bb7249deb40014cee49552a5
#: ../../topics/email.txt:172
msgid ""
"Here's an example view that takes a ``subject``, ``message`` and "
"``from_email`` from the request's POST data, sends that to admin@example.com "
"and redirects to \"/contact/thanks/\" when it's done::"
msgstr ""

# 5c9f34fffbeb4411bfca5d5e25dfb97a
#: ../../topics/email.txt:198
msgid "The EmailMessage class"
msgstr ""

# 11630958b83d4338bc8ac028f4c3715e
#: ../../topics/email.txt:200
msgid ""
"Django's :meth:`~django.core.mail.send_mail()` and :meth:`~django.core.mail."
"send_mass_mail()` functions are actually thin wrappers that make use of the :"
"class:`~django.core.mail.EmailMessage` class."
msgstr ""

# 7ddb3fc714654ec2a5b029d84876ca9b
#: ../../topics/email.txt:204
msgid ""
"Not all features of the :class:`~django.core.mail.EmailMessage` class are "
"available through the :meth:`~django.core.mail.send_mail()` and related "
"wrapper functions. If you wish to use advanced features, such as BCC'ed "
"recipients, file attachments, or multi-part email, you'll need to create :"
"class:`~django.core.mail.EmailMessage` instances directly."
msgstr ""

# a594cf196b134f5eaad13df57212896f
#: ../../topics/email.txt:211
msgid ""
"This is a design feature. :meth:`~django.core.mail.send_mail()` and related "
"functions were originally the only interface Django provided. However, the "
"list of parameters they accepted was slowly growing over time. It made sense "
"to move to a more object-oriented design for email messages and retain the "
"original functions only for backwards compatibility."
msgstr ""

# ea1e78262e3149fcb22e51fb022ed8e6
#: ../../topics/email.txt:218
msgid ""
":class:`~django.core.mail.EmailMessage` is responsible for creating the "
"email message itself. The :ref:`email backend <topic-email-backends>` is "
"then responsible for sending the email."
msgstr ""

# 42162f50a4144e6f84d53f2b46a79b79
#: ../../topics/email.txt:222
msgid ""
"For convenience, :class:`~django.core.mail.EmailMessage` provides a simple "
"``send()`` method for sending a single email. If you need to send multiple "
"messages, the email backend API :ref:`provides an alternative <topics-"
"sending-multiple-emails>`."
msgstr ""

# 587b9944e1984a95a1e19cebf2fbae76
#: ../../topics/email.txt:228
msgid "EmailMessage Objects"
msgstr ""

# 3e71099e63e346a98d15e564acd0e1bb
#: ../../topics/email.txt:232
msgid ""
"The :class:`~django.core.mail.EmailMessage` class is initialized with the "
"following parameters (in the given order, if positional arguments are used). "
"All parameters are optional and can be set at any time prior to calling the "
"``send()`` method."
msgstr ""

# 89c8e7672e5e46539c9cee6878b4955d
#: ../../topics/email.txt:237
msgid "``subject``: The subject line of the email."
msgstr ""

# 0497e86d1e9649bdbcedf938e2c17836
#: ../../topics/email.txt:239
msgid "``body``: The body text. This should be a plain text message."
msgstr ""

# 396f5304ea884951b816425a31fae8d1
#: ../../topics/email.txt:241
msgid ""
"``from_email``: The sender's address. Both ``fred@example.com`` and ``Fred "
"<fred@example.com>`` forms are legal. If omitted, the :setting:"
"`DEFAULT_FROM_EMAIL` setting is used."
msgstr ""

# 6b27739e9b9b493ead2e9b110f95c4a4
#: ../../topics/email.txt:245
msgid "``to``: A list or tuple of recipient addresses."
msgstr ""

# 39316386f66f4ea5b46b83264d59aded
#: ../../topics/email.txt:247
msgid ""
"``bcc``: A list or tuple of addresses used in the \"Bcc\" header when "
"sending the email."
msgstr ""

# 5b95fe7e3c0b471a964756ef1a3bfc25
#: ../../topics/email.txt:250
msgid ""
"``connection``: An email backend instance. Use this parameter if you want to "
"use the same connection for multiple messages. If omitted, a new connection "
"is created when ``send()`` is called."
msgstr ""

# bf4f5caaf57249acae420a103749737f
#: ../../topics/email.txt:254
msgid ""
"``attachments``: A list of attachments to put on the message. These can be "
"either ``email.MIMEBase.MIMEBase`` instances, or ``(filename, content, "
"mimetype)`` triples."
msgstr ""

# a6f4218bb28a4f52ad305194a94651a8
#: ../../topics/email.txt:258
msgid ""
"``headers``: A dictionary of extra headers to put on the message. The keys "
"are the header name, values are the header values. It's up to the caller to "
"ensure header names and values are in the correct format for an email "
"message."
msgstr ""

# ec6b599b19774d698c4e002448313829
#: ../../topics/email.txt:263
msgid ""
"``cc``: A list or tuple of recipient addresses used in the \"Cc\" header "
"when sending the email."
msgstr ""

# 31373317d344415e8f1f762f2ba14354
#: ../../topics/email.txt:272
msgid "The class has the following methods:"
msgstr ""

# b98f691a347442e5abf849f3f3397849
#: ../../topics/email.txt:274
msgid ""
"``send(fail_silently=False)`` sends the message. If a connection was "
"specified when the email was constructed, that connection will be used. "
"Otherwise, an instance of the default backend will be instantiated and used. "
"If the keyword argument ``fail_silently`` is ``True``, exceptions raised "
"while sending the message will be quashed."
msgstr ""

# 2b74e5b906de42d6bac08f904fff7517
#: ../../topics/email.txt:280
msgid ""
"``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a "
"subclass of Python's ``email.MIMEText.MIMEText`` class) or a ``django.core."
"mail.SafeMIMEMultipart`` object holding the message to be sent. If you ever "
"need to extend the :class:`~django.core.mail.EmailMessage` class, you'll "
"probably want to override this method to put the content you want into the "
"MIME object."
msgstr ""

# 3ab4c0aa619b47a38a541b69c2a545cc
#: ../../topics/email.txt:287
msgid ""
"``recipients()`` returns a list of all the recipients of the message, "
"whether they're recorded in the ``to``, ``cc`` or ``bcc`` attributes. This "
"is another method you might need to override when subclassing, because the "
"SMTP server needs to be told the full list of recipients when the message is "
"sent. If you add another way to specify recipients in your class, they need "
"to be returned from this method as well."
msgstr ""

# 9f56668756a94069b5ea00733912b2c2
#: ../../topics/email.txt:294
msgid ""
"``attach()`` creates a new file attachment and adds it to the message. There "
"are two ways to call ``attach()``:"
msgstr ""

# 66542cd1e68340c499547bca6580fc25
#: ../../topics/email.txt:297
msgid ""
"You can pass it a single argument that is an ``email.MIMEBase.MIMEBase`` "
"instance. This will be inserted directly into the resulting message."
msgstr ""

# ae5f677a1eb6455eb09c4733ea689a8f
#: ../../topics/email.txt:301
msgid ""
"Alternatively, you can pass ``attach()`` three arguments: ``filename``, "
"``content`` and ``mimetype``. ``filename`` is the name of the file "
"attachment as it will appear in the email, ``content`` is the data that will "
"be contained inside the attachment and ``mimetype`` is the optional MIME "
"type for the attachment. If you omit ``mimetype``, the MIME content type "
"will be guessed from the filename of the attachment."
msgstr ""

# ec39930304b1421d9350ad8a391d1b20
#: ../../topics/email.txt:313
msgid ""
"``attach_file()`` creates a new attachment using a file from your "
"filesystem. Call it with the path of the file to attach and, optionally, the "
"MIME type to use for the attachment. If the MIME type is omitted, it will be "
"guessed from the filename. The simplest use would be::"
msgstr ""

# c05d63d211a04ebdb5790a120ffbcffb
#: ../../topics/email.txt:323
msgid "Sending alternative content types"
msgstr ""

# 8f1f703aa3f04b0fbc45898cfb86bfd8
#: ../../topics/email.txt:325
msgid ""
"It can be useful to include multiple versions of the content in an email; "
"the classic example is to send both text and HTML versions of a message. "
"With Django's email library, you can do this using the "
"``EmailMultiAlternatives`` class. This subclass of :class:`~django.core.mail."
"EmailMessage` has an ``attach_alternative()`` method for including extra "
"versions of the message body in the email. All the other methods (including "
"the class initialization) are inherited directly from :class:`~django.core."
"mail.EmailMessage`."
msgstr ""

# 0d740b149ed14e6f8608d0b08d97c319
#: ../../topics/email.txt:333
msgid "To send a text and HTML combination, you could write::"
msgstr ""

# 199fdcd7ecee4175ba11cb4ff9c4a0dd
#: ../../topics/email.txt:344
msgid ""
"By default, the MIME type of the ``body`` parameter in an :class:`~django."
"core.mail.EmailMessage` is ``\"text/plain\"``. It is good practice to leave "
"this alone, because it guarantees that any recipient will be able to read "
"the email, regardless of their mail client. However, if you are confident "
"that your recipients can handle an alternative content type, you can use the "
"``content_subtype`` attribute on the :class:`~django.core.mail.EmailMessage` "
"class to change the main content type. The major type will always be ``\"text"
"\"``, but you can change the subtype. For example::"
msgstr ""

# ae936d9cde7542b1a0a0b772055830ec
#: ../../topics/email.txt:361
msgid "Email backends"
msgstr ""

# 16f90479a5404139881e9b64438d5432
#: ../../topics/email.txt:363
msgid "The actual sending of an email is handled by the email backend."
msgstr ""

# d21ed7c3414b4bf4a0f4bb564c4c6485
#: ../../topics/email.txt:365
msgid "The email backend class has the following methods:"
msgstr ""

# 833f8681648b4d3182f32957a9cb076f
#: ../../topics/email.txt:367
msgid "``open()`` instantiates an long-lived email-sending connection."
msgstr ""

# b47e8cfd9ea943e0a462070b58dcb88f
#: ../../topics/email.txt:369
msgid "``close()`` closes the current email-sending connection."
msgstr ""

# 9c1135a5845840209d2211907522931e
#: ../../topics/email.txt:371
msgid ""
"``send_messages(email_messages)`` sends a list of :class:`~django.core.mail."
"EmailMessage` objects. If the connection is not open, this call will "
"implicitly open the connection, and close the connection afterwards. If the "
"connection is already open, it will be left open after mail has been sent."
msgstr ""

# 583a06d2fb4740d3bb089c770cbbd6bc
#: ../../topics/email.txt:378
msgid "Obtaining an instance of an email backend"
msgstr ""

# 4bcc96ea61f3464ab9ddaeb471cb80e3
#: ../../topics/email.txt:380
msgid ""
"The :meth:`get_connection` function in ``django.core.mail`` returns an "
"instance of the email backend that you can use."
msgstr ""

# ced04d59bc944a2e9a4cb8edcc678e74
#: ../../topics/email.txt:387
msgid ""
"By default, a call to ``get_connection()`` will return an instance of the "
"email backend specified in :setting:`EMAIL_BACKEND`. If you specify the "
"``backend`` argument, an instance of that backend will be instantiated."
msgstr ""

# 1e54f81a508b4218b84a52fe3088c9c5
#: ../../topics/email.txt:391
msgid ""
"The ``fail_silently`` argument controls how the backend should handle "
"errors. If ``fail_silently`` is True, exceptions during the email sending "
"process will be silently ignored."
msgstr ""

# 9accd72a511143ee9aabbbd644876e36
#: ../../topics/email.txt:395
msgid ""
"All other arguments are passed directly to the constructor of the email "
"backend."
msgstr ""

# 3c9df2ef704f4ea094f48b3ce57af401
#: ../../topics/email.txt:398
msgid ""
"Django ships with several email sending backends. With the exception of the "
"SMTP backend (which is the default), these backends are only useful during "
"testing and development. If you have special email sending requirements, you "
"can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr ""

# 9876af6d2e7f4bb9a4fa89bc5e642ad5
#: ../../topics/email.txt:406
msgid "SMTP backend"
msgstr ""

# ab5f08f1ade74a9fa0dcfa885c89eeaa
#: ../../topics/email.txt:408
msgid ""
"This is the default backend. Email will be sent through a SMTP server. The "
"server address and authentication credentials are set in the :setting:"
"`EMAIL_HOST`, :setting:`EMAIL_PORT`, :setting:`EMAIL_HOST_USER`, :setting:"
"`EMAIL_HOST_PASSWORD` and :setting:`EMAIL_USE_TLS` settings in your settings "
"file."
msgstr ""

# c97818cd25f9441480d406c13848a89c
#: ../../topics/email.txt:414
msgid ""
"The SMTP backend is the default configuration inherited by Django. If you "
"want to specify it explicitly, put the following in your settings::"
msgstr ""

# 68037f67365d4ef18f9450b8a41d2faa
#: ../../topics/email.txt:422
msgid "Console backend"
msgstr ""

# 4e0cb3dc00d4490985be86effed82722
#: ../../topics/email.txt:424
msgid ""
"Instead of sending out real emails the console backend just writes the "
"emails that would be send to the standard output. By default, the console "
"backend writes to ``stdout``. You can use a different stream-like object by "
"providing the ``stream`` keyword argument when constructing the connection."
msgstr ""

# 5295fab2943248eda0bc74479094c966
# afecc81b4a8f433caceff5b3926c8463
# 9d3e756d724e4ca59846243f94fde0b6
#: ../../topics/email.txt:429 ../../topics/email.txt:447
#: ../../topics/email.txt:466
msgid "To specify this backend, put the following in your settings::"
msgstr ""

# 24b6f52b94bc4754883eea9160c49a90
# 3e61abe063e146abbbee7b98f127d0e5
# b923cc1c93314e659fcf92733255761b
#: ../../topics/email.txt:433 ../../topics/email.txt:452
#: ../../topics/email.txt:483
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development."
msgstr ""

# 0b0781ea6daf48e7b7521f4ccc6e06fe
#: ../../topics/email.txt:439
msgid "File backend"
msgstr ""

# 891d6950f1c74519ac354cb0a6fffdc7
#: ../../topics/email.txt:441
msgid ""
"The file backend writes emails to a file. A new file is created for each new "
"session that is opened on this backend. The directory to which the files are "
"written is either taken from the :setting:`EMAIL_FILE_PATH` setting or from "
"the ``file_path`` keyword when creating a connection with :meth:`~django."
"core.mail.get_connection`."
msgstr ""

# 217ae214410842b09dece4682a81bf21
#: ../../topics/email.txt:458
msgid "In-memory backend"
msgstr ""

# 35f6c1dfe0c749b4af62c8d1b6deb394
#: ../../topics/email.txt:460
msgid ""
"The ``'locmem'`` backend stores messages in a special attribute of the "
"``django.core.mail`` module. The ``outbox`` attribute is created when the "
"first message is sent. It's a list with an :class:`~django.core.mail."
"EmailMessage` instance for each message that would be send."
msgstr ""

# 53e2818843754a0d971bf557cc002de5
#: ../../topics/email.txt:470
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development and testing."
msgstr ""

# c6fe96db6ccb430dac9fa1d8f26542b8
#: ../../topics/email.txt:476
msgid "Dummy backend"
msgstr ""

# 22949cbff3dd449aa6600f9599477510
#: ../../topics/email.txt:478
msgid ""
"As the name suggests the dummy backend does nothing with your messages. To "
"specify this backend, put the following in your settings::"
msgstr ""

# ea25d2d7504b4629953a733cea88e883
#: ../../topics/email.txt:489
msgid "Defining a custom email backend"
msgstr ""

# 2241274685bb4d9d8dacc38d0a04d2d2
#: ../../topics/email.txt:491
msgid ""
"If you need to change how emails are sent you can write your own email "
"backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then "
"the Python import path for your backend class."
msgstr ""

# 52a2c100c4834946a8bceac393321634
#: ../../topics/email.txt:495
msgid ""
"Custom email backends should subclass ``BaseEmailBackend`` that is located "
"in the ``django.core.mail.backends.base`` module. A custom email backend "
"must implement the ``send_messages(email_messages)`` method. This method "
"receives a list of :class:`~django.core.mail.EmailMessage` instances and "
"returns the number of successfully delivered messages. If your backend has "
"any concept of a persistent session or connection, you should also implement "
"the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for a "
"reference implementation."
msgstr ""

# 16a0c6ca9db94f7d9d099a41ff881159
#: ../../topics/email.txt:507
msgid "Sending multiple emails"
msgstr ""

# fa5efef73ec44e1baa85d6d09da50928
#: ../../topics/email.txt:509
msgid ""
"Establishing and closing an SMTP connection (or any other network "
"connection, for that matter) is an expensive process. If you have a lot of "
"emails to send, it makes sense to reuse an SMTP connection, rather than "
"creating and destroying a connection every time you want to send an email."
msgstr ""

# cd531db02b19400aae4478fbbe4121f6
#: ../../topics/email.txt:514
msgid "There are two ways you tell an email backend to reuse a connection."
msgstr ""

# b34b882f71f045b288fdf5f084252215
#: ../../topics/email.txt:516
msgid ""
"Firstly, you can use the ``send_messages()`` method. ``send_messages()`` "
"takes a list of :class:`~django.core.mail.EmailMessage` instances (or "
"subclasses), and sends them all using a single connection."
msgstr ""

# 0fec44d225cd44ed8711f988011213db
#: ../../topics/email.txt:520
msgid ""
"For example, if you have a function called ``get_notification_email()`` that "
"returns a list of :class:`~django.core.mail.EmailMessage` objects "
"representing some periodic email you wish to send out, you could send these "
"emails using a single call to send_messages::"
msgstr ""

# 58d36e989b9d4c898649c13d2dd6532d
#: ../../topics/email.txt:530
msgid ""
"In this example, the call to ``send_messages()`` opens a connection on the "
"backend, sends the list of messages, and then closes the connection again."
msgstr ""

# c4297b08312e4c668d8ef4fc2449eb4e
#: ../../topics/email.txt:533
msgid ""
"The second approach is to use the ``open()`` and ``close()`` methods on the "
"email backend to manually control the connection. ``send_messages()`` will "
"not manually open or close the connection if it is already open, so if you "
"manually open the connection, you can control when it is closed. For "
"example::"
msgstr ""

# 94c001b95e2441cb9e48cd9916e676ec
#: ../../topics/email.txt:563
msgid "Testing email sending"
msgstr ""

# 32e4de5812d948f9a79faff5adab3468
#: ../../topics/email.txt:565
msgid ""
"There are times when you do not want Django to send emails at all. For "
"example, while developing a Web site, you probably don't want to send out "
"thousands of emails -- but you may want to validate that emails will be sent "
"to the right people under the right conditions, and that those emails will "
"contain the correct content."
msgstr ""

# 4030b98c083d4b66b8e5ea8252f531e7
#: ../../topics/email.txt:571
msgid ""
"The easiest way to test your project's use of email is to use the "
"``console`` email backend. This backend redirects all email to stdout, "
"allowing you to inspect the content of mail."
msgstr ""

# 576eba639689469f9fa02150f76b4f14
#: ../../topics/email.txt:575
msgid ""
"The ``file`` email backend can also be useful during development -- this "
"backend dumps the contents of every SMTP connection to a file that can be "
"inspected at your leisure."
msgstr ""

# a968e1d478ad4c558c78477dcb3a2291
#: ../../topics/email.txt:579
msgid ""
"Another approach is to use a \"dumb\" SMTP server that receives the emails "
"locally and displays them to the terminal, but does not actually send "
"anything. Python has a built-in way to accomplish this with a single "
"command::"
msgstr ""

# fc351101270c4fccb57a8af26324e7e6
#: ../../topics/email.txt:585
msgid ""
"This command will start a simple SMTP server listening on port 1025 of "
"localhost. This server simply prints to standard output all email headers "
"and the email body. You then only need to set the :setting:`EMAIL_HOST` and :"
"setting:`EMAIL_PORT` accordingly, and you are set."
msgstr ""

# 934d4987b49c40488d07ad2448c47459
#: ../../topics/email.txt:590
msgid ""
"For a more detailed discussion of testing and processing of emails locally, "
"see the Python documentation for the :mod:`smtpd` module."
msgstr ""

# 6dc23b6bef5a47919cbb1487a795fa40
#: ../../topics/files.txt:3
msgid "Managing files"
msgstr ""

# 4a99601c9a8b4fafac9ce8fc1db4ac4f
#: ../../topics/files.txt:5
msgid ""
"This document describes Django's file access APIs for files such as those "
"uploaded by a user. The lower level APIs are general enough that you could "
"use them for other purposes. If you want to handle \"static files\" (JS, "
"CSS, etc), see :doc:`/howto/static-files/index`."
msgstr ""

# efbebd6b7e3b40919012036757b3aa36
#: ../../topics/files.txt:10
msgid ""
"By default, Django stores files locally, using the :setting:`MEDIA_ROOT` "
"and :setting:`MEDIA_URL` settings. The examples below assume that you're "
"using these defaults."
msgstr ""

# 5526b3a906874c68a9158ae646d76acf
#: ../../topics/files.txt:14
msgid ""
"However, Django provides ways to write custom `file storage systems`_ that "
"allow you to completely customize where and how Django stores files. The "
"second half of this document describes how these storage systems work."
msgstr ""

# f92460f1d4ae4e7db32fbf0eacd7dab4
#: ../../topics/files.txt:21
msgid "Using files in models"
msgstr ""

# d7ec21a440c24f0285d4858b53afd0e0
#: ../../topics/files.txt:23
msgid ""
"When you use a :class:`~django.db.models.FileField` or :class:`~django.db."
"models.ImageField`, Django provides a set of APIs you can use to deal with "
"that file."
msgstr ""

# 6640cd24c63742eb8015652c9013fad1
#: ../../topics/files.txt:27
msgid ""
"Consider the following model, using an :class:`~django.db.models.ImageField` "
"to store a photo::"
msgstr ""

# 01c603fbefdb4e3d8ecf04b953b5134d
#: ../../topics/files.txt:35
msgid ""
"Any ``Car`` instance will have a ``photo`` attribute that you can use to get "
"at the details of the attached photo::"
msgstr ""

# eb6b14151488434ba7915e4aefd4693d
#: ../../topics/files.txt:48
msgid ""
"This object -- ``car.photo`` in the example -- is a ``File`` object, which "
"means it has all the methods and attributes described below."
msgstr ""

# 7e7abaf39c36416484f084df23a75513
#: ../../topics/files.txt:52
msgid ""
"The file is saved as part of saving the model in the database, so the actual "
"file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""

# 2e809e85d76b4007824395cd7250810a
#: ../../topics/files.txt:58
msgid "The ``File`` object"
msgstr ""

# 8687059390d441a197b121a4f7a0726c
#: ../../topics/files.txt:60
msgid ""
"Internally, Django uses a :class:`django.core.files.File` instance any time "
"it needs to represent a file. This object is a thin wrapper around Python's "
"`built-in file object`_ with some Django-specific additions."
msgstr ""

# 691153b8f813442c8cf471b3091a5f01
#: ../../topics/files.txt:66
msgid ""
"Most of the time you'll simply use a ``File`` that Django's given you (i.e. "
"a file attached to a model as above, or perhaps an uploaded file)."
msgstr ""

# 30cb8c0adeda42fcaff953b266846fe6
#: ../../topics/files.txt:69
msgid ""
"If you need to construct a ``File`` yourself, the easiest way is to create "
"one using a Python built-in ``file`` object::"
msgstr ""

# 752a765ea75244bf95f94aadb3f1ef97
#: ../../topics/files.txt:78
msgid ""
"Now you can use any of the documented attributes and methods of the :class:"
"`~django.core.files.File` class."
msgstr ""

# cec1b7eacceb40d3b562fbe4c9d5006c
#: ../../topics/files.txt:81
msgid ""
"Be aware that files created in this way are not automatically closed. The "
"following approach may be used to close files automatically::"
msgstr ""

# 604bdb9c69b349348ab271f402a3fbc0
#: ../../topics/files.txt:96
msgid ""
"Closing files is especially important when accessing file fields in a loop "
"over a large number of objects. If files are not manually closed after "
"accessing them, the risk of running out of file descriptors may arise. This "
"may lead to the following error::"
msgstr ""

# dc984d6125ab477fb3a5697d90191821
#: ../../topics/files.txt:105
msgid "File storage"
msgstr ""

# 05e7428a752a41019d15f315579423f2
#: ../../topics/files.txt:107
msgid ""
"Behind the scenes, Django delegates decisions about how and where to store "
"files to a file storage system. This is the object that actually understands "
"things like file systems, opening and reading files, etc."
msgstr ""

# 84433331f4a7412bb8777e8736632bcb
#: ../../topics/files.txt:111
msgid ""
"Django's default file storage is given by the :setting:"
"`DEFAULT_FILE_STORAGE` setting; if you don't explicitly provide a storage "
"system, this is the one that will be used."
msgstr ""

# 75394f13a23c4c639cd352baf75364ce
#: ../../topics/files.txt:115
msgid ""
"See below for details of the built-in default file storage system, and see :"
"doc:`/howto/custom-file-storage` for information on writing your own file "
"storage system."
msgstr ""

# 9c5465c039db4e0aa529a33349dd9fcd
#: ../../topics/files.txt:120
msgid "Storage objects"
msgstr ""

# ba804a93dbc44710a4c4c5e16b13cc35
#: ../../topics/files.txt:122
msgid ""
"Though most of the time you'll want to use a ``File`` object (which "
"delegates to the proper storage for that file), you can use file storage "
"systems directly. You can create an instance of some custom file storage "
"class, or -- often more useful -- you can use the global default storage "
"system::"
msgstr ""

# 7ee32175433c495e85bd6c8743958346
#: ../../topics/files.txt:143
msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr ""

# 10a866a87b15468fbc36c5ce78082963
#: ../../topics/files.txt:148
msgid "The built-in filesystem storage class"
msgstr ""

# 3ab05751f9f4455390bb4a9dfad7491b
#: ../../topics/files.txt:150
msgid ""
"Django ships with a built-in ``FileSystemStorage`` class (defined in "
"``django.core.files.storage``) which implements basic local filesystem file "
"storage. Its initializer takes two arguments:"
msgstr ""

# 5b16570019424d4da55eb5ea9c44f2ec
#: ../../topics/files.txt:155
msgid "Argument"
msgstr ""

# 3e7e0b0e355c408cbbc7749625e80403
#: ../../topics/files.txt:155
msgid "Description"
msgstr ""

# 1c4bdf0981204356a0108689952b14c1
#: ../../topics/files.txt:157
msgid "``location``"
msgstr ""

# 28450101190e464c92952836a48931c7
#: ../../topics/files.txt:157
msgid ""
"Optional. Absolute path to the directory that will hold the files. If "
"omitted, it will be set to the value of your :setting:`MEDIA_ROOT` setting."
msgstr ""

# d47cc336580f4f788aca79471745f6c8
#: ../../topics/files.txt:160
msgid "``base_url``"
msgstr ""

# f442b56caebf428f90c58665d3758a49
#: ../../topics/files.txt:160
msgid ""
"Optional. URL that serves the files stored at this location. If omitted, it "
"will default to the value of your :setting:`MEDIA_URL` setting."
msgstr ""

# 48ca1748748046029599f0fb4c76e81d
#: ../../topics/files.txt:165
msgid ""
"For example, the following code will store uploaded files under ``/media/"
"photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""

# 58faeee9a5764389b2e22d0ff71a8e4b
#: ../../topics/files.txt:177
msgid ""
":doc:`Custom storage systems </howto/custom-file-storage>` work the same "
"way: you can pass them in as the ``storage`` argument to a :class:`~django."
"db.models.FileField`."
msgstr ""

# 08492a60c6f34ce4ba2c6e1699fd2c30
#: ../../topics/forms/formsets.txt:4
msgid "Formsets"
msgstr ""

# 94bb84bae13d4dfea877ffab8cc081ad
#: ../../topics/forms/formsets.txt:8
msgid ""
"A formset is a layer of abstraction to work with multiple forms on the same "
"page. It can be best compared to a data grid. Let's say you have the "
"following form::"
msgstr ""

# 9de87ece64a7410aae72964a2ec378a2
#: ../../topics/forms/formsets.txt:17
msgid ""
"You might want to allow the user to create several articles at once. To "
"create a formset out of an ``ArticleForm`` you would do::"
msgstr ""

# 77e05fae9a874266aea4dba1a4157959
#: ../../topics/forms/formsets.txt:23
msgid ""
"You now have created a formset named ``ArticleFormSet``. The formset gives "
"you the ability to iterate over the forms in the formset and display them as "
"you would with a regular form::"
msgstr ""

# 2477b26bf86846d593e88c532ea1720d
#: ../../topics/forms/formsets.txt:33
msgid ""
"As you can see it only displayed one empty form. The number of empty forms "
"that is displayed is controlled by the ``extra`` parameter. By default, "
"``formset_factory`` defines one extra form; the following example will "
"display two blank forms::"
msgstr ""

# 8efc69742caa4105a3d52651dfb9cb3e
#: ../../topics/forms/formsets.txt:40
msgid ""
"Iterating over the ``formset`` will render the forms in the order they were "
"created. You can change this order by providing an alternate implementation "
"for the ``__iter__()`` method."
msgstr ""

# 60e877e9dada4bf4bfbc039a7a5411fc
#: ../../topics/forms/formsets.txt:44
msgid ""
"Formsets can also be indexed into, which returns the corresponding form. If "
"you override ``__iter__``, you will need to also override ``__getitem__`` to "
"have matching behavior."
msgstr ""

# c00525ab8cf345bc92b6c08c9e09f330
#: ../../topics/forms/formsets.txt:51
msgid "Using initial data with a formset"
msgstr ""

# 8bd1221e1a6a486e9d04c754109266d9
#: ../../topics/forms/formsets.txt:53
msgid ""
"Initial data is what drives the main usability of a formset. As shown above "
"you can define the number of extra forms. What this means is that you are "
"telling the formset how many additional forms to show in addition to the "
"number of forms it generates from the initial data. Lets take a look at an "
"example::"
msgstr ""

# f1eb279ad2a543d1837a537e157603af
#: ../../topics/forms/formsets.txt:74
msgid ""
"There are now a total of three forms showing above. One for the initial data "
"that was passed in and two extra forms. Also note that we are passing in a "
"list of dictionaries as the initial data."
msgstr ""

# 8e7cdf5fcefc4f3297a2e5456b419850
#: ../../topics/forms/formsets.txt:80
msgid ""
":ref:`Creating formsets from models with model formsets <model-formsets>`."
msgstr ""

# 1c7d093c97904d398059f6ecdfb177b0
#: ../../topics/forms/formsets.txt:85
msgid "Limiting the maximum number of forms"
msgstr ""

# baf8afa41e5a48cbaac996b4230ffb35
#: ../../topics/forms/formsets.txt:87
msgid ""
"The ``max_num`` parameter to ``formset_factory`` gives you the ability to "
"limit the maximum number of empty forms the formset will display::"
msgstr ""

# 083b2388e0e140c69878b71eaea090a9
#: ../../topics/forms/formsets.txt:97
msgid ""
"If the value of ``max_num`` is greater than the number of existing objects, "
"up to ``extra`` additional blank forms will be added to the formset, so long "
"as the total number of forms does not exceed ``max_num``."
msgstr ""

# 0df16d0817f244fcba1dbb879dce5ff9
# 9171173cb5b64aa68ed592ffa73b7f98
#: ../../topics/forms/formsets.txt:101 ../../topics/forms/modelforms.txt:730
msgid ""
"A ``max_num`` value of ``None`` (the default) puts a high limit on the "
"number of forms displayed (1000). In practice this is equivalent to no limit."
msgstr ""

# c41fc93926d7446390072e503942b00f
#: ../../topics/forms/formsets.txt:105
msgid "Formset validation"
msgstr ""

# a42853fe99f1412b9c398a2170809bef
#: ../../topics/forms/formsets.txt:107
msgid ""
"Validation with a formset is almost identical to a regular ``Form``. There "
"is an ``is_valid`` method on the formset to provide a convenient way to "
"validate all forms in the formset::"
msgstr ""

# 824e597017f648e98b60eb682a8d80d4
#: ../../topics/forms/formsets.txt:121
msgid ""
"We passed in no data to the formset which is resulting in a valid form. The "
"formset is smart enough to ignore extra forms that were not changed. If we "
"provide an invalid article::"
msgstr ""

# 508b8f9362344103968ec744c65d884e
#: ../../topics/forms/formsets.txt:140
msgid ""
"As we can see, ``formset.errors`` is a list whose entries correspond to the "
"forms in the formset. Validation was performed for each of the two forms, "
"and the expected error message appears for the second item."
msgstr ""

# 228e1e9be93c41529e2e70658409fea4
#: ../../topics/forms/formsets.txt:146
msgid ""
"We can also check if form data differs from the initial data (i.e. the form "
"was sent without any data)::"
msgstr ""

# 3dc65a0bca124442b3b60592f098ef15
#: ../../topics/forms/formsets.txt:163
msgid "Understanding the ManagementForm"
msgstr ""

# f49730e4d37049b48fefa56d4496317a
#: ../../topics/forms/formsets.txt:165
msgid ""
"You may have noticed the additional data (``form-TOTAL_FORMS``, ``form-"
"INITIAL_FORMS`` and ``form-MAX_NUM_FORMS``) that was required in the "
"formset's data above. This data is required for the ``ManagementForm``. This "
"form is used by the formset to manage the collection of forms contained in "
"the formset. If you don't provide this management data, an exception will be "
"raised::"
msgstr ""

# 6b3a7f7704e74144aa9f9eb4d903cf34
#: ../../topics/forms/formsets.txt:181
msgid ""
"It is used to keep track of how many form instances are being displayed. If "
"you are adding new forms via JavaScript, you should increment the count "
"fields in this form as well. On the other hand, if you are using JavaScript "
"to allow deletion of existing objects, then you need to ensure the ones "
"being removed are properly marked for deletion by including ``form-#-"
"DELETE`` in the ``POST`` data. It is expected that all forms are present in "
"the ``POST`` data regardless."
msgstr ""

# 404a14f3f3784057bdda49a97b1a330d
#: ../../topics/forms/formsets.txt:188
msgid ""
"The management form is available as an attribute of the formset itself. When "
"rendering a formset in a template, you can include all the management data "
"by rendering ``{{ my_formset.management_form }}`` (substituting the name of "
"your formset as appropriate)."
msgstr ""

# d51b56b42f26476c99d7cd8e985915df
#: ../../topics/forms/formsets.txt:194
msgid "``total_form_count`` and ``initial_form_count``"
msgstr ""

# a5c1ac7c93ba4734ae9ded497cd06dc0
#: ../../topics/forms/formsets.txt:196
msgid ""
"``BaseFormSet`` has a couple of methods that are closely related to the "
"``ManagementForm``, ``total_form_count`` and ``initial_form_count``."
msgstr ""

# b00adbca4f6b478b91b6d408757fcaee
#: ../../topics/forms/formsets.txt:199
msgid ""
"``total_form_count`` returns the total number of forms in this formset. "
"``initial_form_count`` returns the number of forms in the formset that were "
"pre-filled, and is also used to determine how many forms are required. You "
"will probably never need to override either of these methods, so please be "
"sure you understand what they do before doing so."
msgstr ""

# b18577f7dce24a6390b60b0bdf0d1621
#: ../../topics/forms/formsets.txt:206
msgid "``empty_form``"
msgstr ""

# 48d267fdc7e34986ab606fbb3ee5407e
#: ../../topics/forms/formsets.txt:208
msgid ""
"``BaseFormSet`` provides an additional attribute ``empty_form`` which "
"returns a form instance with a prefix of ``__prefix__`` for easier use in "
"dynamic forms with JavaScript."
msgstr ""

# 9c330180d25c40ef9c9a26d00c45e317
#: ../../topics/forms/formsets.txt:213
msgid "Custom formset validation"
msgstr ""

# eaec76deefaf4db196ce7e7f202cba87
#: ../../topics/forms/formsets.txt:215
msgid ""
"A formset has a ``clean`` method similar to the one on a ``Form`` class. "
"This is where you define your own validation that works at the formset "
"level::"
msgstr ""

# 2f95b32cf207411badcff8f0ad69cc0d
#: ../../topics/forms/formsets.txt:252
msgid ""
"The formset ``clean`` method is called after all the ``Form.clean`` methods "
"have been called. The errors will be found using the ``non_form_errors()`` "
"method on the formset."
msgstr ""

# 86ef1150e2074da09070237cde7a8419
#: ../../topics/forms/formsets.txt:257
msgid "Dealing with ordering and deletion of forms"
msgstr ""

# 711d564c9fab47ac8ead0b7a3e98f5b7
#: ../../topics/forms/formsets.txt:259
msgid ""
"Common use cases with a formset is dealing with ordering and deletion of the "
"form instances. This has been dealt with for you. The ``formset_factory`` "
"provides two optional parameters ``can_order`` and ``can_delete`` that will "
"do the extra work of adding the extra fields and providing simpler ways of "
"getting to that data."
msgstr ""

# 96a15130c6d54f309ec1c89ff6853389
#: ../../topics/forms/formsets.txt:266
msgid "``can_order``"
msgstr ""

# 58494457985d4dd496b20e815fa14290
# 6b52012b00514ebb8263cd3dda01b010
# 13fbbac6acea4ecca508e8a3c1334050
# 80eb915cf8284c3d9d7044d575cd98a5
# ddc5b8c8be3f4c1faf6e5dd317b3189e
#: ../../topics/forms/formsets.txt:268 ../../topics/forms/formsets.txt:324
#: ../../topics/http/sessions.txt:598 ../../topics/http/sessions.txt:607
#: ../../topics/http/sessions.txt:615
msgid "Default: ``False``"
msgstr ""

# cb04f58a1696438ea64fcbd9722bc7e6
#: ../../topics/forms/formsets.txt:270
msgid "Lets you create a formset with the ability to order::"
msgstr ""

# 774468f3bfab40b4bef35cdefc3949f3
#: ../../topics/forms/formsets.txt:289
msgid ""
"This adds an additional field to each form. This new field is named "
"``ORDER`` and is an ``forms.IntegerField``. For the forms that came from the "
"initial data it automatically assigned them a numeric value. Let's look at "
"what will happen when the user changes these values::"
msgstr ""

# 2b4c024328f54ae8ac01da123ac6d944
#: ../../topics/forms/formsets.txt:322
msgid "``can_delete``"
msgstr ""

# df951525b79e47ea866fffbe22d7d6dd
#: ../../topics/forms/formsets.txt:326
msgid ""
"Lets you create a formset with the ability to select forms for deletion::"
msgstr ""

# 9ac66f1bd70849de83051aef27f18af1
#: ../../topics/forms/formsets.txt:346
msgid ""
"Similar to ``can_order`` this adds a new field to each form named ``DELETE`` "
"and is a ``forms.BooleanField``. When data comes through marking any of the "
"delete fields you can access them with ``deleted_forms``::"
msgstr ""

# 83930c1858b84ca3bce8f217e535be0b
#: ../../topics/forms/formsets.txt:372
msgid ""
"If you are using a :class:`ModelFormSet<django.forms.models."
"BaseModelFormSet>`, model instances for deleted forms will be deleted when "
"you call ``formset.save()``. On the other hand, if you are using a plain "
"``FormSet``, it's up to you to handle ``formset.deleted_forms``, perhaps in "
"your formset's ``save()`` method, as there's no general notion of what it "
"means to delete a form."
msgstr ""

# 495397656fa34a17bd9ce662614f2752
#: ../../topics/forms/formsets.txt:380
msgid "Adding additional fields to a formset"
msgstr ""

# aaecaabba4d94b2a985f82fe6d097e3f
#: ../../topics/forms/formsets.txt:375
msgid ""
"If you need to add additional fields to the formset this can be easily "
"accomplished. The formset base class provides an ``add_fields`` method. You "
"can simply override this method to add your own fields or even redefine the "
"default fields/attributes of the order and deletion fields::"
msgstr ""

# 2e9c3d28ea2940ad8d53638e1cbd831b
#: ../../topics/forms/formsets.txt:394
msgid "Using a formset in views and templates"
msgstr ""

# bf215a9dfbc146b890705fadf965ff50
#: ../../topics/forms/formsets.txt:396
msgid ""
"Using a formset inside a view is as easy as using a regular ``Form`` class. "
"The only thing you will want to be aware of is making sure to use the "
"management form inside the template. Let's look at a sample view:"
msgstr ""

# 6a9a07a96f824744b7fc5349c7681975
#: ../../topics/forms/formsets.txt:413
msgid "The ``manage_articles.html`` template might look like this:"
msgstr ""

# 4faa350860a24756af638f79b225c75a
#: ../../topics/forms/formsets.txt:426
msgid ""
"However the above can be slightly shortcutted and let the formset itself "
"deal with the management form:"
msgstr ""

# d76a96610f9b4aab8f06acc07cab2661
#: ../../topics/forms/formsets.txt:437
msgid "The above ends up calling the ``as_table`` method on the formset class."
msgstr ""

# b11f0ba989e34b949dbbe249995f79f3
#: ../../topics/forms/formsets.txt:442
msgid "Manually rendered ``can_delete`` and ``can_order``"
msgstr ""

# ddb79f4c6e4846a4ae50b6b14f6e2530
#: ../../topics/forms/formsets.txt:444
msgid ""
"If you manually render fields in the template, you can render ``can_delete`` "
"parameter with ``{{ form.DELETE }}``:"
msgstr ""

# faf0327cd4394588999da98c842b8519
#: ../../topics/forms/formsets.txt:463
msgid ""
"Similarly, if the formset has the ability to order (``can_order=True``), it "
"is possible to render it with ``{{ form.ORDER }}``."
msgstr ""

# 8a62b029b1724d4fa27036445282a5c2
#: ../../topics/forms/formsets.txt:467
msgid "Using more than one formset in a view"
msgstr ""

# 5540f033a609410c9eddbb9e244fb38c
#: ../../topics/forms/formsets.txt:469
msgid ""
"You are able to use more than one formset in a view if you like. Formsets "
"borrow much of its behavior from forms. With that said you are able to use "
"``prefix`` to prefix formset form field names with a given value to allow "
"more than one formset to be sent to a view without name clashing. Lets take "
"a look at how this might be accomplished:"
msgstr ""

# e1684ce2057b40d5ade46e7a8424f092
#: ../../topics/forms/formsets.txt:494
msgid ""
"You would then render the formsets as normal. It is important to point out "
"that you need to pass ``prefix`` on both the POST and non-POST cases so that "
"it is rendered and processed correctly."
msgstr ""

# 2ebb4f2099bb45168eceda79150bcf00
#: ../../topics/forms/index.txt:3
msgid "Working with forms"
msgstr ""

# 3e8390d7cf58446f8fdcbfbc113aa1ef
# 40895fca2e8b4855b8c0b581a2845197
#: ../../topics/forms/index.txt:5 ../../topics/templates.txt:5
msgid "About this document"
msgstr ""

# e8f689ca413b45b28a5ab24ce6187862
#: ../../topics/forms/index.txt:7
msgid ""
"This document provides an introduction to Django's form handling features. "
"For a more detailed look at specific areas of the forms API, see :doc:`/ref/"
"forms/api`, :doc:`/ref/forms/fields`, and :doc:`/ref/forms/validation`."
msgstr ""

# 899534a448c04aa8995e96bffeb2b7ae
#: ../../topics/forms/index.txt:14
msgid "``django.forms`` is Django's form-handling library."
msgstr ""

# d38c3e77407b47958521e476f2ff1366
#: ../../topics/forms/index.txt:16
msgid ""
"While it is possible to process form submissions just using Django's :class:"
"`~django.http.HttpRequest` class, using the form library takes care of a "
"number of common form-related tasks. Using it, you can:"
msgstr ""

# 5abda847df944f1385ced4ec94fcc971
#: ../../topics/forms/index.txt:20
msgid "Display an HTML form with automatically generated form widgets."
msgstr ""

# 10f657fba3664adca492374e67527a15
#: ../../topics/forms/index.txt:21
msgid "Check submitted data against a set of validation rules."
msgstr ""

# 54b5c81a14c4446e83df80251b4b1087
#: ../../topics/forms/index.txt:22
msgid "Redisplay a form in the case of validation errors."
msgstr ""

# 85874537b039415c856f2b010dbe2eee
#: ../../topics/forms/index.txt:23
msgid "Convert submitted form data to the relevant Python data types."
msgstr ""

# 72a4d49569ab4c9ea1b02be7c1bb5698
#: ../../topics/forms/index.txt:28
msgid "The library deals with these concepts:"
msgstr ""

# 279bbc95a9ad41568399f4c5207007cc
#: ../../topics/forms/index.txt:31
msgid "Widget"
msgstr ""

# 90474c5246314aec8aafbc60002147bf
#: ../../topics/forms/index.txt:33
msgid ""
"A class that corresponds to an HTML form widget, e.g. ``<input type=\"text"
"\">`` or ``<textarea>``. This handles rendering of the widget as HTML."
msgstr ""

# 4f802da1c6724459a2aa047d0fb3c05c
#: ../../topics/forms/index.txt:36
msgid "Field"
msgstr ""

# b03043d346d44e72909a847846ca1160
#: ../../topics/forms/index.txt:38
msgid ""
"A class that is responsible for doing validation, e.g. an ``EmailField`` "
"that makes sure its data is a valid email address."
msgstr ""

# 27904ab948fa4bd4a3ee06139c16afa4
#: ../../topics/forms/index.txt:40
msgid "Form"
msgstr ""

# 14b5b9573893470792a647cd16c798be
#: ../../topics/forms/index.txt:42
msgid ""
"A collection of fields that knows how to validate itself and display itself "
"as HTML."
msgstr ""

# 266c95cf39134f9cb3ef7320715aa5e4
# 5df2647c79464fc8b9f77080a52fb34f
#: ../../topics/forms/index.txt:44 ../../topics/forms/media.txt:2
msgid "Form Media"
msgstr ""

# 8a0e9ad1588e40f09515dd3e3d1f5e43
#: ../../topics/forms/index.txt:46
msgid "The CSS and JavaScript resources that are required to render a form."
msgstr ""

# d849fc5c86bc4d22a4fdb1d4fcb6b97a
#: ../../topics/forms/index.txt:48
msgid ""
"The library is decoupled from the other Django components, such as the "
"database layer, views and templates. It relies only on Django settings, a "
"couple of ``django.utils`` helper functions and Django's "
"internationalization hooks (but you're not required to be using "
"internationalization features to use this library)."
msgstr ""

# 1ac4c86fb945436fb5e6a4fefe9a8d28
#: ../../topics/forms/index.txt:55
msgid "Form objects"
msgstr ""

# 331c655805f943e98b0fb7842a2fe887
#: ../../topics/forms/index.txt:57
msgid ""
"A Form object encapsulates a sequence of form fields and a collection of "
"validation rules that must be fulfilled in order for the form to be "
"accepted. Form classes are created as subclasses of ``django.forms.Form`` "
"and make use of a declarative style that you'll be familiar with if you've "
"used Django's database models."
msgstr ""

# 7372deae578a49f5862143dfcb83dfba
#: ../../topics/forms/index.txt:63
msgid ""
"For example, consider a form used to implement \"contact me\" functionality "
"on a personal Web site:"
msgstr ""

# 8e0be70cbb82423a96114488192de4f2
#: ../../topics/forms/index.txt:76
msgid ""
"A form is composed of ``Field`` objects. In this case, our form has four "
"fields: ``subject``, ``message``, ``sender`` and ``cc_myself``. "
"``CharField``, ``EmailField`` and ``BooleanField`` are just three of the "
"available field types; a full list can be found in :doc:`/ref/forms/fields`."
msgstr ""

# b9c192e44e9f41768d18719dcfdca5dd
#: ../../topics/forms/index.txt:81
msgid ""
"If your form is going to be used to directly add or edit a Django model, you "
"can use a :doc:`ModelForm </topics/forms/modelforms>` to avoid duplicating "
"your model description."
msgstr ""

# a071fe5fadfd4315ad28bee2443395f2
#: ../../topics/forms/index.txt:88
msgid "Using a form in a view"
msgstr ""

# 25931a5809784793be65cfbaeb919694
#: ../../topics/forms/index.txt:90
msgid "The standard pattern for processing a form in a view looks like this:"
msgstr ""

# d08d3ebca8b3432fb9d30765eaa2481e
#: ../../topics/forms/index.txt:112
msgid "There are three possible code paths here:"
msgstr ""

# 30220e5313954e11882ec29585eb1f31
#: ../../topics/forms/index.txt:115
msgid "Form submitted?"
msgstr ""

# 06c4029105e94398b4890bdca30926a5
#: ../../topics/forms/index.txt:115
msgid "Data?"
msgstr ""

# dc54323e08ee443db5b9665f80e17584
#: ../../topics/forms/index.txt:115
msgid "What occurs"
msgstr ""

# 42dc3bfd9f8b40d9b7bd8942d218388c
#: ../../topics/forms/index.txt:117
msgid "Unsubmitted"
msgstr ""

# 5304478ecf07443db206459ce39927d0
#: ../../topics/forms/index.txt:117
msgid "None yet"
msgstr ""

# 248a111331f54f11950ed2b1d8ca3d1d
#: ../../topics/forms/index.txt:117
msgid "Template gets passed unbound instance of ContactForm."
msgstr ""

# 1a20c60e1cb94f9baf5eed1f3148d440
# 33391fd016e1487a85a28a81f6ff9891
#: ../../topics/forms/index.txt:120 ../../topics/forms/index.txt:123
msgid "Submitted"
msgstr ""

# 7a21e637dbac4e628e5981ab1aad7eb0
#: ../../topics/forms/index.txt:120
msgid "Invalid data"
msgstr ""

# 75d0bb58e3164fa2916928941d3c627e
#: ../../topics/forms/index.txt:120
msgid "Template gets passed bound instance of ContactForm."
msgstr ""

# a2955eaee9254525b7c31794c6c7b1b1
#: ../../topics/forms/index.txt:123
msgid "Valid data"
msgstr ""

# 99f35f8bfd104fd4b1a332b741cf514b
#: ../../topics/forms/index.txt:123
msgid "Valid data is processed. Redirect to a \"thanks\" page."
msgstr ""

# 7657bca669a64a4caa32e7749c1fbed0
#: ../../topics/forms/index.txt:127
msgid ""
"The distinction between :ref:`ref-forms-api-bound-unbound` is important:"
msgstr ""

# 325ccff3569f469ea637a623c5c30ec7
#: ../../topics/forms/index.txt:129
msgid ""
"An unbound form has no data associated with it. When rendered to the user, "
"it will be empty or will contain default values."
msgstr ""

# 4abe7bb0b11d4e7cae732f7426b83065
#: ../../topics/forms/index.txt:132
msgid ""
"A bound form has submitted data, and hence can be used to tell if that data "
"is valid. If an invalid bound form is rendered, it can include inline error "
"messages telling the user what data to correct."
msgstr ""

# ae7436eaf20e4bd8b6f4f6f63104d443
#: ../../topics/forms/index.txt:137
msgid "Handling file uploads with a form"
msgstr ""

# 468ae79f67bb4c2ca4c0151527f59b98
#: ../../topics/forms/index.txt:139
msgid ""
"To see how to handle file uploads with your form, see :ref:`binding-uploaded-"
"files`."
msgstr ""

# affc9acc64ed49349b049bc7d2810f99
#: ../../topics/forms/index.txt:143
msgid "Processing the data from a form"
msgstr ""

# 3657c4025b074e6eb197ff64976bd8d4
#: ../../topics/forms/index.txt:145
msgid ""
"Once ``is_valid()`` returns ``True``, the successfully validated form data "
"will be in the ``form.cleaned_data`` dictionary. This data will have been "
"converted nicely into Python types for you."
msgstr ""

# 002bb80e514a482695b64b929e4c7a16
#: ../../topics/forms/index.txt:151
msgid ""
"You can still access the unvalidated data directly from ``request.POST`` at "
"this point, but the validated data is better."
msgstr ""

# aa91faf5b69645a38d5318b84d0530de
#: ../../topics/forms/index.txt:154
msgid ""
"In the above example, ``cc_myself`` will be a boolean value. Likewise, "
"fields such as ``IntegerField`` and ``FloatField`` convert values to a "
"Python int and float respectively."
msgstr ""

# a49bea1cb700415895d52952d94ae943
#: ../../topics/forms/index.txt:158
msgid ""
"Read-only fields are not available in ``form.cleaned_data`` (and setting a "
"value in a custom ``clean()`` method won't have any effect). These fields "
"are displayed as text rather than as input elements, and thus are not posted "
"back to the server."
msgstr ""

# c08a9d6ea2994c87a45de454ddf341a5
#: ../../topics/forms/index.txt:163
msgid ""
"Extending the earlier example, here's how the form data could be processed:"
msgstr ""

# 8386153b823349a68287980143832b26
#: ../../topics/forms/index.txt:183
msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr ""

# d0dc3783b57a4a17abf4e9e3465b614e
#: ../../topics/forms/index.txt:186
msgid "Displaying a form using a template"
msgstr ""

# 777716095f33483b9156748027b4e093
#: ../../topics/forms/index.txt:188
msgid ""
"Forms are designed to work with the Django template language. In the above "
"example, we passed our ``ContactForm`` instance to the template using the "
"context variable ``form``. Here's a simple example template::"
msgstr ""

# 4c2c6b66c9864e1cb1cd2766c82d5eab
#: ../../topics/forms/index.txt:197
msgid ""
"The form only outputs its own fields; it is up to you to provide the "
"surrounding ``<form>`` tags and the submit button."
msgstr ""

# 4a954088224b49b681a95801c08656ea
#: ../../topics/forms/index.txt:200
msgid ""
"If your form includes uploaded files, be sure to include ``enctype="
"\"multipart/form-data\"`` in the ``form`` element. If you wish to write a "
"generic template that will work whether or not the form has files, you can "
"use the :meth:`~django.forms.Form.is_multipart` attribute on the form::"
msgstr ""

# b5971edfe37c4c73b4b560a15404917f
#: ../../topics/forms/index.txt:208
msgid "Forms and Cross Site Request Forgery protection"
msgstr ""

# 25d4398296a2425d869f5eea0462f065
#: ../../topics/forms/index.txt:210
msgid ""
"Django ships with an easy-to-use :doc:`protection against Cross Site Request "
"Forgeries </ref/contrib/csrf>`. When submitting a form via POST with CSRF "
"protection enabled you must use the :ttag:`csrf_token` template tag as in "
"the preceding example. However, since CSRF protection is not directly tied "
"to forms in templates, this tag is omitted from the following examples in "
"this document."
msgstr ""

# f39d91cbab744aeea3d5c5931ecfd513
#: ../../topics/forms/index.txt:217
msgid ""
"``form.as_p`` will output the form with each form field and accompanying "
"label wrapped in a paragraph. Here's the output for our example template::"
msgstr ""

# 2d5104bb82fe4e7895692265f3cf9964
#: ../../topics/forms/index.txt:232
msgid ""
"Note that each form field has an ID attribute set to ``id_<field-name>``, "
"which is referenced by the accompanying label tag. This is important for "
"ensuring forms are accessible to assistive technology such as screen reader "
"software. You can also :ref:`customize the way in which labels and ids are "
"generated <ref-forms-api-configuring-label>`."
msgstr ""

# 187bfbb2a04b4004815cea3cb9fda87b
#: ../../topics/forms/index.txt:238
msgid ""
"You can also use ``form.as_table`` to output table rows (you'll need to "
"provide your own ``<table>`` tags) and ``form.as_ul`` to output list items."
msgstr ""

# a9abf85d1def440b9a8e7d91c0a26057
#: ../../topics/forms/index.txt:242
msgid "Customizing the form template"
msgstr ""

# 15c955617c94410985c5817760680ba6
#: ../../topics/forms/index.txt:244
msgid ""
"If the default generated HTML is not to your taste, you can completely "
"customize the way a form is presented using the Django template language. "
"Extending the above example::"
msgstr ""

# 23f69bd2c38d41ebb9c4653496d5312d
#: ../../topics/forms/index.txt:273
msgid ""
"Each named form-field can be output to the template using ``{{ form."
"name_of_field }}``, which will produce the HTML needed to display the form "
"widget. Using ``{{ form.name_of_field.errors }}`` displays a list of form "
"errors, rendered as an unordered list. This might look like::"
msgstr ""

# ed6a6918e0e54daa9cb127fca10dd58f
#: ../../topics/forms/index.txt:282
msgid ""
"The list has a CSS class of ``errorlist`` to allow you to style its "
"appearance. If you wish to further customize the display of errors you can "
"do so by looping over them::"
msgstr ""

# e8c4abad07464361bcb33b30ccb5d0b8
#: ../../topics/forms/index.txt:295
msgid "Looping over the form's fields"
msgstr ""

# 5b17a181fd6e42118d7da3d4f9d9df0d
#: ../../topics/forms/index.txt:297
msgid ""
"If you're using the same HTML for each of your form fields, you can reduce "
"duplicate code by looping through each field in turn using a ``{% for %}`` "
"loop::"
msgstr ""

# c8c0981ec9424c129519beddb83ea33d
#: ../../topics/forms/index.txt:311
msgid ""
"Within this loop, ``{{ field }}`` is an instance of :class:`~django.forms."
"BoundField`. ``BoundField`` also has the following attributes, which can be "
"useful in your templates:"
msgstr ""

# aef8eaefcb4547d1ae935cb0b014c591
#: ../../topics/forms/index.txt:316
msgid "``{{ field.label }}``"
msgstr ""

# 8ebf3197408b44cc8097408244986f35
#: ../../topics/forms/index.txt:316
msgid "The label of the field, e.g. ``Email address``."
msgstr ""

# 61d57ed4014641bab3878d6c277c93a6
#: ../../topics/forms/index.txt:320
msgid "``{{ field.label_tag }}``"
msgstr ""

# c48ddf03807f44079b7e9a292fd235c9
#: ../../topics/forms/index.txt:319
msgid ""
"The field's label wrapped in the appropriate HTML ``<label>`` tag, e.g. "
"``<label for=\"id_email\">Email address</label>``"
msgstr ""

# a3d3a84c0fdf47de8a0b9e22d93abf75
#: ../../topics/forms/index.txt:323
msgid "``{{ field.value }}``"
msgstr ""

# 21d9bdeb5caa4b04a1d1cd60260703d9
#: ../../topics/forms/index.txt:323
msgid "The value of the field. e.g ``someone@example.com``"
msgstr ""

# 919fc8ce10144a3bb7f3e55d89e58c5c
#: ../../topics/forms/index.txt:327
msgid "``{{ field.html_name }}``"
msgstr ""

# 006faf10cf844a668e5dbbadc6b64591
#: ../../topics/forms/index.txt:326
msgid ""
"The name of the field that will be used in the input element's name field. "
"This takes the form prefix into account, if it has been set."
msgstr ""

# aca90f0cc8404db79cf648ec42b286c7
#: ../../topics/forms/index.txt:330
msgid "``{{ field.help_text }}``"
msgstr ""

# 9edbe23d3f00477c93fed1c15f2d18ac
#: ../../topics/forms/index.txt:330
msgid "Any help text that has been associated with the field."
msgstr ""

# a3942ecea9204dd49cd41a37f987f5bd
#: ../../topics/forms/index.txt:337
msgid "``{{ field.errors }}``"
msgstr ""

# ae548deac8d046309234a78eec674511
#: ../../topics/forms/index.txt:333
msgid ""
"Outputs a ``<ul class=\"errorlist\">`` containing any validation errors "
"corresponding to this field. You can customize the presentation of the "
"errors with a ``{% for error in field.errors %}`` loop. In this case, each "
"object in the loop is a simple string containing the error message."
msgstr ""

# 907734c6b6844e85876f4368448d977a
#: ../../topics/forms/index.txt:346
msgid "``{{ field.is_hidden }}``"
msgstr ""

# f89e1b3424f54ddda43c907a8b4b37ba
#: ../../topics/forms/index.txt:340
msgid ""
"This attribute is ``True`` if the form field is a hidden field and ``False`` "
"otherwise. It's not particularly useful as a template variable, but could be "
"useful in conditional tests such as::"
msgstr ""

# 0d2697b22ccd4a0e925dc3dd1510c205
#: ../../topics/forms/index.txt:352
msgid "``{{ field.field }}``"
msgstr ""

# e5b10595d1b641249e37a9f17b05ab64
#: ../../topics/forms/index.txt:349
msgid ""
"The :class:`~django.forms.Field` instance from the form class that this :"
"class:`~django.forms.BoundField` wraps. You can use it to access :class:"
"`~django.forms.Field` attributes , e.g. ``{{ char_field.field.max_length }}"
"``."
msgstr ""

# 9e92f896372a42bc9cfab842fc326de4
#: ../../topics/forms/index.txt:355
msgid "Looping over hidden and visible fields"
msgstr ""

# 2b8cb3313c3e4d32bcada756a053b536
#: ../../topics/forms/index.txt:357
msgid ""
"If you're manually laying out a form in a template, as opposed to relying on "
"Django's default form layout, you might want to treat ``<input type=\"hidden"
"\">`` fields differently than non-hidden fields. For example, because hidden "
"fields don't display anything, putting error messages \"next to\" the field "
"could cause confusion for your users -- so errors for those fields should be "
"handled differently."
msgstr ""

# 49704959a38349aaa06574366aabb6bf
#: ../../topics/forms/index.txt:364
msgid ""
"Django provides two methods on a form that allow you to loop over the hidden "
"and visible fields independently: ``hidden_fields()`` and "
"``visible_fields()``. Here's a modification of an earlier example that uses "
"these two methods::"
msgstr ""

# 464a44e69e3942dcaa56983b8c1f571e
#: ../../topics/forms/index.txt:384
msgid ""
"This example does not handle any errors in the hidden fields. Usually, an "
"error in a hidden field is a sign of form tampering, since normal form "
"interaction won't alter them. However, you could easily insert some error "
"displays for those form errors, as well."
msgstr ""

# 5d4090755fd74f558504f036aaed3958
#: ../../topics/forms/index.txt:390
msgid "Reusable form templates"
msgstr ""

# 759070fb05bb46ac98cc3c7195d887a5
#: ../../topics/forms/index.txt:392
msgid ""
"If your site uses the same rendering logic for forms in multiple places, you "
"can reduce duplication by saving the form's loop in a standalone template "
"and using the :ttag:`include` tag to reuse it in other templates::"
msgstr ""

# c63a6624ad1d4659a5912af7b72080c1
#: ../../topics/forms/index.txt:410
msgid ""
"If the form object passed to a template has a different name within the "
"context, you can alias it using the ``with`` argument of the :ttag:`include` "
"tag::"
msgstr ""

# 3f86a621f85f443d8b8836852d645f12
#: ../../topics/forms/index.txt:419
msgid ""
"If you find yourself doing this often, you might consider creating a custom :"
"ref:`inclusion tag<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

# 1fbcbf5714fb48d7a9ce0da3de099544
#: ../../topics/forms/index.txt:423
msgid "Further topics"
msgstr ""

# 05f34416dda5455b849e8a8803e3f6df
#: ../../topics/forms/index.txt:425
msgid "This covers the basics, but forms can do a whole lot more:"
msgstr ""

# 35664c5f2d4a4cb1a5f9732a5e681c83
#: ../../topics/forms/index.txt:437
msgid ":doc:`The Forms Reference </ref/forms/index>`"
msgstr ""

# aeb13fb9375f4f3cb69c3a3fad65f2ec
#: ../../topics/forms/index.txt:437
msgid ""
"Covers the full API reference, including form fields, form widgets, and form "
"and field validation."
msgstr ""

# 1046d449ab4643c9a2128d61ef5bbff6
#: ../../topics/forms/media.txt:4
msgid ""
"Rendering an attractive and easy-to-use Web form requires more than just "
"HTML - it also requires CSS stylesheets, and if you want to use fancy "
"\"Web2.0\" widgets, you may also need to include some JavaScript on each "
"page. The exact combination of CSS and JavaScript that is required for any "
"given page will depend upon the widgets that are in use on that page."
msgstr ""

# 1e152e0cc44942da8a3cc93ea94aeab1
#: ../../topics/forms/media.txt:10
msgid ""
"This is where Django media definitions come in. Django allows you to "
"associate different media files with the forms and widgets that require that "
"media. For example, if you want to use a calendar to render DateFields, you "
"can define a custom Calendar widget. This widget can then be associated with "
"the CSS and JavaScript that is required to render the calendar. When the "
"Calendar widget is used on a form, Django is able to identify the CSS and "
"JavaScript files that are required, and provide the list of file names in a "
"form suitable for easy inclusion on your Web page."
msgstr ""

# f7c08e7b5385417cb77afb7831583234
#: ../../topics/forms/media.txt:19
msgid "Media and Django Admin"
msgstr ""

# 5648a52ba9884901bbbd2aeea6d6ec4d
#: ../../topics/forms/media.txt:21
msgid ""
"The Django Admin application defines a number of customized widgets for "
"calendars, filtered selections, and so on. These widgets define media "
"requirements, and the Django Admin uses the custom widgets in place of the "
"Django defaults. The Admin templates will only include those media files "
"that are required to render the widgets on any given page."
msgstr ""

# 77e7323ca8c4494aaaf102c4cf7deb49
#: ../../topics/forms/media.txt:28
msgid ""
"If you like the widgets that the Django Admin application uses, feel free to "
"use them in your own application! They're all stored in ``django.contrib."
"admin.widgets``."
msgstr ""

# 62bf59c1594a4fcc8aa75542d99de44e
#: ../../topics/forms/media.txt:32
msgid "Which JavaScript toolkit?"
msgstr ""

# e14d493a27004e17b8a620360eb553f4
#: ../../topics/forms/media.txt:34
msgid ""
"Many JavaScript toolkits exist, and many of them include widgets (such as "
"calendar widgets) that can be used to enhance your application. Django has "
"deliberately avoided blessing any one JavaScript toolkit. Each toolkit has "
"its own relative strengths and weaknesses - use whichever toolkit suits your "
"requirements. Django is able to integrate with any JavaScript toolkit."
msgstr ""

# 0a55984e1ee347f6a521a4a542adf186
#: ../../topics/forms/media.txt:44
msgid "Media as a static definition"
msgstr ""

# 28aa038618bf4eada0672884967a70b7
#: ../../topics/forms/media.txt:46
msgid ""
"The easiest way to define media is as a static definition. Using this "
"method, the media declaration is an inner class. The properties of the inner "
"class define the media requirements."
msgstr ""

# a8be712b57bb465aaded728bdc0841ec
#: ../../topics/forms/media.txt:50
msgid "Here's a simple example::"
msgstr ""

# d244908409544f07b33a2f84f970538e
#: ../../topics/forms/media.txt:59
msgid ""
"This code defines a ``CalendarWidget``, which will be based on "
"``TextInput``. Every time the CalendarWidget is used on a form, that form "
"will be directed to include the CSS file ``pretty.css``, and the JavaScript "
"files ``animations.js`` and ``actions.js``."
msgstr ""

# 667b30d30e0646dcadf803c9c80ded33
#: ../../topics/forms/media.txt:64
msgid ""
"This static media definition is converted at runtime into a widget property "
"named ``media``. The media for a CalendarWidget instance can be retrieved "
"through this property::"
msgstr ""

# d6c3eeaa158f4fc88a8ad7249d735d58
#: ../../topics/forms/media.txt:74
msgid ""
"Here's a list of all possible ``Media`` options. There are no required "
"options."
msgstr ""

# 8816f84cdc5e476f89ba6436f8ba1348
#: ../../topics/forms/media.txt:77
msgid "``css``"
msgstr ""

# d8fb6333f6b548c18ffa16b84759f56d
#: ../../topics/forms/media.txt:79
msgid ""
"A dictionary describing the CSS files required for various forms of output "
"media."
msgstr ""

# ba31c6c0d55244479779f18379fc8e95
#: ../../topics/forms/media.txt:82
msgid ""
"The values in the dictionary should be a tuple/list of file names. See :ref:"
"`the section on media paths <form-media-paths>` for details of how to "
"specify paths to media files."
msgstr ""

# fe2b49c5ea504337984dcd358898ede0
#: ../../topics/forms/media.txt:86
msgid ""
"The keys in the dictionary are the output media types. These are the same "
"types accepted by CSS files in media declarations: 'all', 'aural', "
"'braille', 'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' "
"and 'tv'. If you need to have different stylesheets for different media "
"types, provide a list of CSS files for each output medium. The following "
"example would provide two CSS options -- one for the screen, and one for "
"print::"
msgstr ""

# 0f6617197c274faf9e4a1f4b051f8bd0
#: ../../topics/forms/media.txt:99
msgid ""
"If a group of CSS files are appropriate for multiple output media types, the "
"dictionary key can be a comma separated list of output media types. In the "
"following example, TV's and projectors will have the same media "
"requirements::"
msgstr ""

# e878d7a539194c179ea89c0615023979
#: ../../topics/forms/media.txt:111
msgid ""
"If this last CSS definition were to be rendered, it would become the "
"following HTML::"
msgstr ""

# 730b8dbd6b614a9a810d25e5d70bc429
#: ../../topics/forms/media.txt:118
msgid "``js``"
msgstr ""

# 3097de3c1c1c4c3e99f0a995ad859f0a
#: ../../topics/forms/media.txt:120
msgid ""
"A tuple describing the required JavaScript files. See :ref:`the section on "
"media paths <form-media-paths>` for details of how to specify paths to media "
"files."
msgstr ""

# aff067086e604cd282ca9262cf5b0ae3
#: ../../topics/forms/media.txt:125
msgid "``extend``"
msgstr ""

# b1ac9dcaace841c687cfbd88bb82a437
#: ../../topics/forms/media.txt:127
msgid "A boolean defining inheritance behavior for media declarations."
msgstr ""

# a641d036c55a4bd49db42abbd1ec85ba
#: ../../topics/forms/media.txt:129
msgid ""
"By default, any object using a static media definition will inherit all the "
"media associated with the parent widget. This occurs regardless of how the "
"parent defines its media requirements. For example, if we were to extend our "
"basic Calendar widget from the example above::"
msgstr ""

# b445bc4b0b0f43eb90551ba0f4310fb0
#: ../../topics/forms/media.txt:149
msgid ""
"The FancyCalendar widget inherits all the media from it's parent widget. If "
"you don't want media to be inherited in this way, add an ``extend=False`` "
"declaration to the media declaration::"
msgstr ""

# 907449b97e6843ada4532d0d096fb1dc
#: ../../topics/forms/media.txt:166
msgid ""
"If you require even more control over media inheritance, define your media "
"using a :ref:`dynamic property <dynamic-property>`. Dynamic properties give "
"you complete control over which media files are inherited, and which are not."
msgstr ""

# b3791ae78e3346429fa023dc6e7d6a76
#: ../../topics/forms/media.txt:173
msgid "Media as a dynamic property"
msgstr ""

# e5ad310626c043c5b971314c8095fde9
#: ../../topics/forms/media.txt:175
msgid ""
"If you need to perform some more sophisticated manipulation of media "
"requirements, you can define the media property directly. This is done by "
"defining a widget property that returns an instance of ``forms.Media``. The "
"constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword arguments "
"in the same format as that used in a static media definition."
msgstr ""

# c34bb59e48c0438684bf481a632d6292
#: ../../topics/forms/media.txt:181
msgid ""
"For example, the static media definition for our Calendar Widget could also "
"be defined in a dynamic fashion::"
msgstr ""

# c2fe7328f0b04a01a2ee2d1a4a9707db
#: ../../topics/forms/media.txt:190
msgid ""
"See the section on `Media objects`_ for more details on how to construct "
"return values for dynamic media properties."
msgstr ""

# 87149e0629b7420eaa02d5ff1f67082e
#: ../../topics/forms/media.txt:196
msgid "Paths in media definitions"
msgstr ""

# 93dfe7d8b9284bd68a0ab36bf03388a4
#: ../../topics/forms/media.txt:198
msgid ""
"Paths used to specify media can be either relative or absolute. If a path "
"starts with ``/``, ``http://`` or ``https://``, it will be interpreted as an "
"absolute path, and left as-is. All other paths will be prepended with the "
"value of the appropriate prefix."
msgstr ""

# 60836b14306047cfa8a8352391692255
#: ../../topics/forms/media.txt:203
msgid ""
"As part of the introduction of the :doc:`staticfiles app </ref/contrib/"
"staticfiles>` two new settings were added to refer to \"static files"
"\" (images, CSS, Javascript, etc.) that are needed to render a complete web "
"page: :setting:`STATIC_URL` and :setting:`STATIC_ROOT`."
msgstr ""

# bedee58c6b674d1a906f60f3e0b81a09
#: ../../topics/forms/media.txt:208
msgid ""
"To find the appropriate prefix to use, Django will check if the :setting:"
"`STATIC_URL` setting is not ``None`` and automatically fall back to using :"
"setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for your site "
"was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL` was "
"``None``::"
msgstr ""

# bf044fc13c504f7597fa85a5eb9c9939
#: ../../topics/forms/media.txt:227
msgid "But if :setting:`STATIC_URL` is ``'http://static.example.com/'``::"
msgstr ""

# 03563d61bed545f3a6ea4971bf0774fc
#: ../../topics/forms/media.txt:237
msgid "Media objects"
msgstr ""

# cd1fd8538b204fd894169632c98bfa3f
#: ../../topics/forms/media.txt:239
msgid ""
"When you interrogate the media attribute of a widget or form, the value that "
"is returned is a ``forms.Media`` object. As we have already seen, the string "
"representation of a Media object is the HTML required to include media in "
"the ``<head>`` block of your HTML page."
msgstr ""

# ab8e5edeb2854e7a802ae359a302c493
#: ../../topics/forms/media.txt:244
msgid "However, Media objects have some other interesting properties."
msgstr ""

# 0f3c7654f71149ae9e69cf7e0c8f8b34
#: ../../topics/forms/media.txt:247
msgid "Media subsets"
msgstr ""

# 54264564576045c48573c1b8b80c45ca
#: ../../topics/forms/media.txt:249
msgid ""
"If you only want media of a particular type, you can use the subscript "
"operator to filter out a medium of interest. For example::"
msgstr ""

# 0164aa2b55164afea4ca08b34d5c75d9
#: ../../topics/forms/media.txt:261
msgid ""
"When you use the subscript operator, the value that is returned is a new "
"Media object -- but one that only contains the media of interest."
msgstr ""

# 33c8df1d8c9f4d989139e255d8b50daf
#: ../../topics/forms/media.txt:265
msgid "Combining media objects"
msgstr ""

# 7b3fd0e8ec4c486288d4f9249ca0d311
#: ../../topics/forms/media.txt:267
msgid ""
"Media objects can also be added together. When two media objects are added, "
"the resulting Media object contains the union of the media from both files::"
msgstr ""

# 69a3d0ab777e496cab78df65400ecd48
#: ../../topics/forms/media.txt:290
msgid "Media on Forms"
msgstr ""

# a126dc72df9744ef8da82d2f028663e6
#: ../../topics/forms/media.txt:292
msgid ""
"Widgets aren't the only objects that can have media definitions -- forms can "
"also define media. The rules for media definitions on forms are the same as "
"the rules for widgets: declarations can be static or dynamic; path and "
"inheritance rules for those declarations are exactly the same."
msgstr ""

# 6db4bd4127b04685b5bb543ae631d6ee
#: ../../topics/forms/media.txt:297
msgid ""
"Regardless of whether you define a media declaration, *all* Form objects "
"have a media property. The default value for this property is the result of "
"adding the media definitions for all widgets that are part of the form::"
msgstr ""

# 474f09a911744ac2a7028683ef830753
#: ../../topics/forms/media.txt:312
msgid ""
"If you want to associate additional media with a form -- for example, CSS "
"for form layout -- simply add a media declaration to the form::"
msgstr ""

# 9e622e80992b45ea84e6d00befa0b01e
#: ../../topics/forms/modelforms.txt:3
msgid "Creating forms from models"
msgstr ""

# e73a53abcb9f46dcb7e11e57591f9c6a
#: ../../topics/forms/modelforms.txt:11
msgid "``ModelForm``"
msgstr ""

# 5ba97109d9a0473ca74fd3f71a3a2d2e
#: ../../topics/forms/modelforms.txt:14
msgid ""
"If you're building a database-driven app, chances are you'll have forms that "
"map closely to Django models. For instance, you might have a ``BlogComment`` "
"model, and you want to create a form that lets people submit comments. In "
"this case, it would be redundant to define the field types in your form, "
"because you've already defined the fields in your model."
msgstr ""

# 30ff20074e8c4fe599d623c5d0ddde2f
#: ../../topics/forms/modelforms.txt:20
msgid ""
"For this reason, Django provides a helper class that lets you create a "
"``Form`` class from a Django model."
msgstr ""

# 28c191b8ebf943fcb58e276396a46df9
#: ../../topics/forms/modelforms.txt:42
msgid ""
"The generated ``Form`` class will have a form field for every model field. "
"Each model field has a corresponding default form field. For example, a "
"``CharField`` on a model is represented as a ``CharField`` on a form. A "
"model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here "
"is the full list of conversions:"
msgstr ""

# 04c2d2df2ac14c048f1f8c1f8a71516f
#: ../../topics/forms/modelforms.txt:49
msgid "Model field"
msgstr ""

# 8fb12f3dcbc74c748906d4ce0077a5d2
#: ../../topics/forms/modelforms.txt:49
msgid "Form field"
msgstr ""

# d3afd1d4f6574f1aabded0cc9802d5c5
#: ../../topics/forms/modelforms.txt:51
msgid "``AutoField``"
msgstr ""

# 74e7202aacbf4748bdc82b4f6a360d43
#: ../../topics/forms/modelforms.txt:51
msgid "Not represented in the form"
msgstr ""

# 9e322a1690f14eb0a7174c7c0c9fda70
#: ../../topics/forms/modelforms.txt:53
msgid "``BigIntegerField``"
msgstr ""

# 982d6bc88fea4750a06f7d55438e31e0
#: ../../topics/forms/modelforms.txt:53
msgid ""
"``IntegerField`` with ``min_value`` set to -9223372036854775808 and "
"``max_value`` set to 9223372036854775807."
msgstr ""

# b18bb314fafd4bccaeffc9d01af084be
# cc9ffcd4428540eb835b9e796e7f5cff
#: ../../topics/forms/modelforms.txt:57
msgid "``BooleanField``"
msgstr ""

# efa04064ec754659bfcc618a532e7fb3
# 59facc10dbc047129e5a448c131d5c25
# 1df3ed42206b4c2580190a3706d63c21
#: ../../topics/forms/modelforms.txt:59 ../../topics/forms/modelforms.txt:62
#: ../../topics/forms/modelforms.txt:91
msgid "``CharField``"
msgstr ""

# c98ba1e3824f445fb8e6936188884732
#: ../../topics/forms/modelforms.txt:59
msgid ""
"``CharField`` with ``max_length`` set to the model field's ``max_length``"
msgstr ""

# 1b55f6c7557849a9b3550b6c5cad9e3b
#: ../../topics/forms/modelforms.txt:62
msgid "``CommaSeparatedIntegerField``"
msgstr ""

# d5c8650e13c44262aa840202e9e35cb4
# 1f5dfaf8d2ba4ca0a961ac7a91f3aedc
#: ../../topics/forms/modelforms.txt:64
msgid "``DateField``"
msgstr ""

# 3d35dbf19ed148c38d24e72315c63be8
# 391c534dd53449eca195674720470a8b
#: ../../topics/forms/modelforms.txt:66
msgid "``DateTimeField``"
msgstr ""

# 8ea773c10c0546e48c629f68b99ab579
# 6bbfd87c6ee74c2698c105f49e68d620
#: ../../topics/forms/modelforms.txt:68
msgid "``DecimalField``"
msgstr ""

# d62ed4bcf11844258947f95cbb802b5f
# b7fe5ced68e54c289ef634dd8d063035
#: ../../topics/forms/modelforms.txt:70
msgid "``EmailField``"
msgstr ""

# 71ec5e3e5b9a44ac81480709d478c33f
# 02d4a269dbf5463a942f1a17d2a4d7d1
#: ../../topics/forms/modelforms.txt:72
msgid "``FileField``"
msgstr ""

# 796df242fc114bb89943c9c0ac8c515b
# 3dbbdb38b4084dd988d7e617bb7c6cc0
#: ../../topics/forms/modelforms.txt:74
msgid "``FilePathField``"
msgstr ""

# 490dabcec2c040bca1ffa2e61f7460f0
# 696a1155144a4f509ac6c89ef30db5f5
#: ../../topics/forms/modelforms.txt:76
msgid "``FloatField``"
msgstr ""

# bc6916ed495e49b993df550e658363a6
#: ../../topics/forms/modelforms.txt:78
msgid "``ForeignKey``"
msgstr ""

# ca6a43fce27541c891b52e541b9b20b0
#: ../../topics/forms/modelforms.txt:78
msgid "``ModelChoiceField`` (see below)"
msgstr ""

# da34d2d992384760927d1b960cb13ec6
# ba05ec66338648fe97b7014b776c8da8
#: ../../topics/forms/modelforms.txt:80
msgid "``ImageField``"
msgstr ""

# b5f461b26d414ac4ab25e0f0235c316d
# b7523a97d76c45488f36eb6c9ae4d06f
# fb4abb07242b41e7a0af1dbc911aa38f
# e3cbc6eeb0a34bd38daf7aba3a678246
# e4d0363d587944f99a17ceeb412f7448
#: ../../topics/forms/modelforms.txt:82 ../../topics/forms/modelforms.txt:93
#: ../../topics/forms/modelforms.txt:95 ../../topics/forms/modelforms.txt:99
msgid "``IntegerField``"
msgstr ""

# 82c8ce1d0592491e98d57854e10b1ccf
# b5d5bd1981404335817e790148c1b171
#: ../../topics/forms/modelforms.txt:84
msgid "``IPAddressField``"
msgstr ""

# 932a2689c5be4a3189596629b12cca82
# f0a9e63487354dcfac4f8f98696da803
#: ../../topics/forms/modelforms.txt:86
msgid "``GenericIPAddressField``"
msgstr ""

# 691d5cffd63346f793adfc68eabfab50
#: ../../topics/forms/modelforms.txt:88
msgid "``ManyToManyField``"
msgstr ""

# 015eec54b15e463ab7e111f2f6c0a9e6
#: ../../topics/forms/modelforms.txt:88
msgid "``ModelMultipleChoiceField`` (see below)"
msgstr ""

# 417faab25bdd420b98c755a6aeea672f
#: ../../topics/forms/modelforms.txt:91
msgid "``NullBooleanField``"
msgstr ""

# e86589a5d66b4eee8a0e548027c6bb23
#: ../../topics/forms/modelforms.txt:93
msgid "``PositiveIntegerField``"
msgstr ""

# 3670faea829f4223ba02115216b624bd
#: ../../topics/forms/modelforms.txt:95
msgid "``PositiveSmallIntegerField``"
msgstr ""

# 090769b7d65a4e73bbda28e90dc63793
# d21c9326aa0043c4b5c765a9e764b09d
#: ../../topics/forms/modelforms.txt:97
msgid "``SlugField``"
msgstr ""

# c2a85fa15cce420c8518105ec18124be
#: ../../topics/forms/modelforms.txt:99
msgid "``SmallIntegerField``"
msgstr ""

# cb527b21b5c74de6921f17ad9775fee1
#: ../../topics/forms/modelforms.txt:101
msgid "``TextField``"
msgstr ""

# 79220bbec8bd41e0836caa5686b0b48a
#: ../../topics/forms/modelforms.txt:101
msgid "``CharField`` with ``widget=forms.Textarea``"
msgstr ""

# 7cdbe8579423402683cc892996474b82
# 652b3b7cfe804af8a7e56029fc926e46
#: ../../topics/forms/modelforms.txt:104
msgid "``TimeField``"
msgstr ""

# 45a1dc19891540199ca9af3f5b8e2ee6
# b0dc4662ee674f12a38b1a715f0c7e7c
#: ../../topics/forms/modelforms.txt:106
msgid "``URLField``"
msgstr ""

# 49013fb9486341e1b50685d5b10028b4
#: ../../topics/forms/modelforms.txt:110
msgid ""
"As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field "
"types are special cases:"
msgstr ""

# 31bebd47490844fb8d51a98dc22066a1
#: ../../topics/forms/modelforms.txt:113
msgid ""
"``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is "
"a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""

# bedf02be7df444858afa2e962203a810
#: ../../topics/forms/modelforms.txt:116
msgid ""
"``ManyToManyField`` is represented by ``django.forms."
"ModelMultipleChoiceField``, which is a ``MultipleChoiceField`` whose choices "
"are a model ``QuerySet``."
msgstr ""

# 18d74043baf84dc2acdd948522b86fd1
#: ../../topics/forms/modelforms.txt:120
msgid "In addition, each generated form field has attributes set as follows:"
msgstr ""

# b663abdeca854db6908cce5f5b17ad55
#: ../../topics/forms/modelforms.txt:122
msgid ""
"If the model field has ``blank=True``, then ``required`` is set to ``False`` "
"on the form field. Otherwise, ``required=True``."
msgstr ""

# 88371d9753434079a5b6f77f952a71fb
#: ../../topics/forms/modelforms.txt:125
msgid ""
"The form field's ``label`` is set to the ``verbose_name`` of the model "
"field, with the first character capitalized."
msgstr ""

# c6bb28ce3d1d43529305b1cf6484fbf0
#: ../../topics/forms/modelforms.txt:128
msgid ""
"The form field's ``help_text`` is set to the ``help_text`` of the model "
"field."
msgstr ""

# d8f1d60fc0ea4d9ebde341bea6c02fad
#: ../../topics/forms/modelforms.txt:131
msgid ""
"If the model field has ``choices`` set, then the form field's ``widget`` "
"will be set to ``Select``, with choices coming from the model field's "
"``choices``. The choices will normally include the blank choice which is "
"selected by default. If the field is required, this forces the user to make "
"a selection. The blank choice will not be included if the model field has "
"``blank=False`` and an explicit ``default`` value (the ``default`` value "
"will be initially selected instead)."
msgstr ""

# 7215451f824647fc804c53360103e818
#: ../../topics/forms/modelforms.txt:139
msgid ""
"Finally, note that you can override the form field used for a given model "
"field. See `Overriding the default field types or widgets`_ below."
msgstr ""

# 4548b146dd614ccbbd7a8824a10642a9
#: ../../topics/forms/modelforms.txt:145
msgid "Consider this set of models::"
msgstr ""

# 4e2d54f0335f44dc850d6f54076d938e
#: ../../topics/forms/modelforms.txt:176
msgid ""
"With these models, the ``ModelForm`` subclasses above would be roughly "
"equivalent to this (the only difference being the ``save()`` method, which "
"we'll discuss in a moment.)::"
msgstr ""

# 2fb29fbcea134be49d136562b8dcee5f
#: ../../topics/forms/modelforms.txt:195
msgid "Validation on a ``ModelForm``"
msgstr ""

# ffb8e0ba43ac4e25808d066815e9d9f6
#: ../../topics/forms/modelforms.txt:197
msgid "There are two main steps involved in validating a ``ModelForm``:"
msgstr ""

# d9c3edf0b46c46a2b8a3a804ea67bc31
#: ../../topics/forms/modelforms.txt:199
msgid ":ref:`Validating the form <form-and-field-validation>`"
msgstr ""

# 776ee07b845c464788db8091496a935f
#: ../../topics/forms/modelforms.txt:200
msgid ":ref:`Validating the model instance <validating-objects>`"
msgstr ""

# 7da92d2016154b4aac6e0ef97c14e735
#: ../../topics/forms/modelforms.txt:202
msgid ""
"Just like normal form validation, model form validation is triggered "
"implicitly when calling :meth:`~django.forms.Form.is_valid()` or accessing "
"the :attr:`~django.forms.Form.errors` attribute and explicitly when calling "
"``full_clean()``, although you will typically not use the latter method in "
"practice."
msgstr ""

# f0637f5c08a744d8927b6259fe868268
#: ../../topics/forms/modelforms.txt:208
msgid ""
"``Model`` validation (:meth:`Model.full_clean() <django.db.models.Model."
"full_clean()>`) is triggered from within the form validation step, right "
"after the form's ``clean()`` method is called."
msgstr ""

# 6900aa14e3d94533893536b029066a6a
#: ../../topics/forms/modelforms.txt:214
msgid ""
"The cleaning process modifies the model instance passed to the ``ModelForm`` "
"constructor in various ways. For instance, any date fields on the model are "
"converted into actual date objects. Failed validation may leave the "
"underlying model instance in an inconsistent state and therefore it's not "
"recommended to reuse it."
msgstr ""

# 022a8b434d22428d959489e9febd1710
#: ../../topics/forms/modelforms.txt:223
msgid "Overriding the clean() method"
msgstr ""

# 4ced26285af9461eb7e9ba7c338c6c6f
#: ../../topics/forms/modelforms.txt:225
msgid ""
"You can override the ``clean()`` method on a model form to provide "
"additional validation in the same way you can on a normal form."
msgstr ""

# 3ee9a48c9cdf4bf28a6cd6609ab3d9d7
#: ../../topics/forms/modelforms.txt:228
msgid ""
"A model form instance bound to a model object will contain an ``instance`` "
"attribute that gives its methods access to that specific model instance."
msgstr ""

# a57e07b30ce74d448a1010a3a6deb618
#: ../../topics/forms/modelforms.txt:233
msgid ""
"The ``ModelForm.clean()`` method sets a flag that makes the :ref:`model "
"validation <validating-objects>` step validate the uniqueness of model "
"fields that are marked as ``unique``, ``unique_together`` or "
"``unique_for_date|month|year``."
msgstr ""

# 4aa211e7d7d740558924fad73f6b953b
#: ../../topics/forms/modelforms.txt:238
msgid ""
"If you would like to override the ``clean()`` method and maintain this "
"validation, you must call the parent class's ``clean()`` method."
msgstr ""

# 99fa2437390e4bd99c5b08630a25bc27
#: ../../topics/forms/modelforms.txt:242
msgid "Interaction with model validation"
msgstr ""

# c8d8dcde70a141a0a0202ebf08e11a02
#: ../../topics/forms/modelforms.txt:244
msgid ""
"As part of the validation process, ``ModelForm`` will call the ``clean()`` "
"method of each field on your model that has a corresponding field on your "
"form. If you have excluded any model fields, validation will not be run on "
"those fields. See the :doc:`form validation </ref/forms/validation>` "
"documentation for more on how field cleaning and validation work."
msgstr ""

# 998403ebce814a77b4011a7e56058237
#: ../../topics/forms/modelforms.txt:250
msgid ""
"The model's ``clean()`` method will be called before any uniqueness checks "
"are made. See :ref:`Validating objects <validating-objects>` for more "
"information on the model's ``clean()`` hook."
msgstr ""

# 529a9441af014bee95621ab25596e374
#: ../../topics/forms/modelforms.txt:255
msgid "The ``save()`` method"
msgstr ""

# 5528c4b2532c4302b6cf310e87d643bb
#: ../../topics/forms/modelforms.txt:257
msgid ""
"Every ``ModelForm`` also has a ``save()`` method. This method creates and "
"saves a database object from the data bound to the form. A subclass of "
"``ModelForm`` can accept an existing model instance as the keyword argument "
"``instance``; if this is supplied, ``save()`` will update that instance. If "
"it's not supplied, ``save()`` will create a new instance of the specified "
"model:"
msgstr ""

# bdf1f4a75fd147dd986f5c29d86a3886
#: ../../topics/forms/modelforms.txt:277
msgid ""
"Note that if the form :ref:`hasn't been validated <validation-on-"
"modelform>`, calling ``save()`` will do so by checking ``form.errors``. A "
"``ValueError`` will be raised if the data in the form doesn't validate -- i."
"e., if ``form.errors`` evaluates to ``True``."
msgstr ""

# 1ffe0fe4a76c4992a68a213243bf04c3
#: ../../topics/forms/modelforms.txt:236
msgid ""
"This ``save()`` method accepts an optional ``commit`` keyword argument, "
"which accepts either ``True`` or ``False``. If you call ``save()`` with "
"``commit=False``, then it will return an object that hasn't yet been saved "
"to the database. In this case, it's up to you to call ``save()`` on the "
"resulting model instance. This is useful if you want to do custom processing "
"on the object before saving it, or if you want to use one of the "
"specialized :ref:`model saving options <ref-models-force-insert>`. "
"``commit`` is ``True`` by default."
msgstr ""

# 4b0097eece8441e18b1dd09ea00ec159
#: ../../topics/forms/modelforms.txt:245
msgid ""
"Another side effect of using ``commit=False`` is seen when your model has a "
"many-to-many relation with another model. If your model has a many-to-many "
"relation and you specify ``commit=False`` when you save a form, Django "
"cannot immediately save the form data for the many-to-many relation. This is "
"because it isn't possible to save many-to-many data for an instance until "
"the instance exists in the database."
msgstr ""

# 504b2a3174b44b328f9dd5f1977f41b9
#: ../../topics/forms/modelforms.txt:298
msgid ""
"To work around this problem, every time you save a form using "
"``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` "
"subclass. After you've manually saved the instance produced by the form, you "
"can invoke ``save_m2m()`` to save the many-to-many form data. For example:"
msgstr ""

# 2b0bc69269b744a2be9d5f519a2e1be1
#: ../../topics/forms/modelforms.txt:320
msgid ""
"Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. "
"When you use a simple ``save()`` on a form, all data -- including many-to-"
"many data -- is saved without the need for any additional method calls. For "
"example:"
msgstr ""

# 7ec72863306d4671a532cb8c7d02b8bb
#: ../../topics/forms/modelforms.txt:284
msgid ""
"Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works "
"exactly the same way as any other ``forms`` form. For example, the "
"``is_valid()`` method is used to check for validity, the ``is_multipart()`` "
"method is used to determine whether a form requires multipart file upload "
"(and hence whether ``request.FILES`` must be passed to the form), etc. See :"
"ref:`binding-uploaded-files` for more information."
msgstr ""

# b9e1170abeb24447bf24827542e11233
#: ../../topics/forms/modelforms.txt:292
msgid "Using a subset of fields on the form"
msgstr ""

# 91ee957fca9e41c9a8056e53bd21ad70
#: ../../topics/forms/modelforms.txt:294
msgid ""
"In some cases, you may not want all the model fields to appear on the "
"generated form. There are three ways of telling ``ModelForm`` to use only a "
"subset of the model fields:"
msgstr ""

# 92a6eadb97364e7eb8cc4d6cb0c7557b
#: ../../topics/forms/modelforms.txt:298
msgid ""
"Set ``editable=False`` on the model field. As a result, *any* form created "
"from the model via ``ModelForm`` will not include that field."
msgstr ""

# 25d67a1845e04bcc81ed16d2a5c96718
#: ../../topics/forms/modelforms.txt:302
msgid ""
"Use the ``fields`` attribute of the ``ModelForm``'s inner ``Meta`` class.  "
"This attribute, if given, should be a list of field names to include in the "
"form. The order in which the fields names are specified in that list is "
"respected when the form renders them."
msgstr ""

# c7ad91fadcb645af9e3c7c2d77258c4a
#: ../../topics/forms/modelforms.txt:307
msgid ""
"Use the ``exclude`` attribute of the ``ModelForm``'s inner ``Meta`` class.  "
"This attribute, if given, should be a list of field names to exclude from "
"the form."
msgstr ""

# 4f394eb04d0146e78fb711944d7e4b1b
#: ../../topics/forms/modelforms.txt:311
msgid ""
"For example, if you want a form for the ``Author`` model (defined above) "
"that includes only the ``name`` and ``birth_date`` fields, you would specify "
"``fields`` or ``exclude`` like this::"
msgstr ""

# ff56608d333548f4b85a291a67dea101
#: ../../topics/forms/modelforms.txt:325
msgid ""
"Since the Author model has only 3 fields, 'name', 'title', and 'birth_date', "
"the forms above will contain exactly the same fields."
msgstr ""

# b627b5948c304366a1bbaaff85e67f30
#: ../../topics/forms/modelforms.txt:330
msgid ""
"If you specify ``fields`` or ``exclude`` when creating a form with "
"``ModelForm``, then the fields that are not in the resulting form will not "
"be set by the form's ``save()`` method. Also, if you manually add the "
"excluded fields back to the form, they will not be initialized from the "
"model instance."
msgstr ""

# cce5c26820134ce7808951fb6db77eea
#: ../../topics/forms/modelforms.txt:336
msgid ""
"Django will prevent any attempt to save an incomplete model, so if the model "
"does not allow the missing fields to be empty, and does not provide a "
"default value for the missing fields, any attempt to ``save()`` a "
"``ModelForm`` with missing fields will fail.  To avoid this failure, you "
"must instantiate your model with initial values for the missing, but "
"required fields::"
msgstr ""

# 65233f9299654da2a47244ac16accd80
#: ../../topics/forms/modelforms.txt:347
msgid ""
"Alternatively, you can use ``save(commit=False)`` and manually set any extra "
"required fields::"
msgstr ""

# df4522a611ae458b9fe914f3c788da9d
#: ../../topics/forms/modelforms.txt:355
msgid ""
"See the `section on saving forms`_ for more details on using "
"``save(commit=False)``."
msgstr ""

# 64da5e50f90749b9829cb56238ff7e3d
#: ../../topics/forms/modelforms.txt:361
msgid "Overriding the default field types or widgets"
msgstr ""

# 60dca8c661c0430aa2509a5c16d6d332
#: ../../topics/forms/modelforms.txt:363
msgid ""
"The default field types, as described in the `Field types`_ table above, are "
"sensible defaults. If you have a ``DateField`` in your model, chances are "
"you'd want that to be represented as a ``DateField`` in your form. But "
"``ModelForm`` gives you the flexibility of changing the form field type and "
"widget for a given model field."
msgstr ""

# 8d6d4ff4a2654cabb70574b5565d6b64
#: ../../topics/forms/modelforms.txt:369
msgid ""
"To specify a custom widget for a field, use the ``widgets`` attribute of the "
"inner ``Meta`` class. This should be a dictionary mapping field names to "
"widget classes or instances."
msgstr ""

# bdacc31cf40f47e5a7be26148543e5f5
#: ../../topics/forms/modelforms.txt:373
msgid ""
"For example, if you want the a ``CharField`` for the ``name`` attribute of "
"``Author`` to be represented by a ``<textarea>`` instead of its default "
"``<input type=\"text\">``, you can override the field's widget::"
msgstr ""

# be498dea8a1748b587f3e876aaa77c7c
#: ../../topics/forms/modelforms.txt:388
msgid ""
"The ``widgets`` dictionary accepts either widget instances (e.g., "
"``Textarea(...)``) or classes (e.g., ``Textarea``)."
msgstr ""

# ea6b23c95ddc42a596bb23b3424e0275
#: ../../topics/forms/modelforms.txt:391
msgid ""
"If you want to further customize a field -- including its type, label, etc. "
"-- you can do this by declaratively specifying fields like you would in a "
"regular ``Form``. Declared fields will override the default ones generated "
"by using the ``model`` attribute."
msgstr ""

# 1543f39876194c1c8a137bac49f648e8
#: ../../topics/forms/modelforms.txt:396
msgid ""
"For example, if you wanted to use ``MyDateFormField`` for the ``pub_date`` "
"field, you could do the following::"
msgstr ""

# dc026d6d25604692b7eb775e7ab197f3
#: ../../topics/forms/modelforms.txt:405
msgid ""
"If you want to override a field's default label, then specify the ``label`` "
"parameter when declaring the form field::"
msgstr ""

# 692badc2aae14eb1964cd825be0c27d0
#: ../../topics/forms/modelforms.txt:416
msgid ""
"If you explicitly instantiate a form field like this, Django assumes that "
"you want to completely define its behavior; therefore, default attributes "
"(such as ``max_length`` or ``required``) are not drawn from the "
"corresponding model. If you want to maintain the behavior specified in the "
"model, you must set the relevant arguments explicitly when declaring the "
"form field."
msgstr ""

# de8899fccf3e4106991b9797071ad2ae
#: ../../topics/forms/modelforms.txt:422
msgid "For example, if the ``Article`` model looks like this::"
msgstr ""

# 7aee96e4a1f744319738521ff7af8558
#: ../../topics/forms/modelforms.txt:429
msgid ""
"and you want to do some custom validation for ``headline``, while keeping "
"the ``blank`` and ``help_text`` values as specified, you might define "
"``ArticleForm`` like this::"
msgstr ""

# b7220c5cf4fd4037840485ab6b8c50da
#: ../../topics/forms/modelforms.txt:440
msgid ""
"You must ensure that the type of the form field can be used to set the "
"contents of the corresponding model field. When they are not compatible, you "
"will get a ``ValueError`` as no implicit conversion takes place."
msgstr ""

# cd5afce14f184faf981c526d8e2ba3b8
#: ../../topics/forms/modelforms.txt:444
msgid ""
"See the :doc:`form field documentation </ref/forms/fields>` for more "
"information on fields and their arguments."
msgstr ""

# 3ebf98415ea74ecd886c252fa46d16bd
#: ../../topics/forms/modelforms.txt:448
msgid "Changing the order of fields"
msgstr ""

# c76c64a12a4d45ff863127c4537bb0c0
#: ../../topics/forms/modelforms.txt:450
msgid ""
"By default, a ``ModelForm`` will render fields in the same order that they "
"are defined on the model, with ``ManyToManyField`` instances appearing last. "
"If you want to change the order in which fields are rendered, you can use "
"the ``fields`` attribute on the ``Meta`` class."
msgstr ""

# 732b9f64a32946e4a4019bb076385d9f
#: ../../topics/forms/modelforms.txt:455
msgid ""
"The ``fields`` attribute defines the subset of model fields that will be "
"rendered, and the order in which they will be rendered. For example given "
"this model::"
msgstr ""

# 4914a9afd9b44ae0a66fce454d638675
#: ../../topics/forms/modelforms.txt:463
msgid ""
"the ``author`` field would be rendered first. If we wanted the title field "
"to be rendered first, we could specify the following ``ModelForm``::"
msgstr ""

# 10f7710da2ec45028fe93e5cfd67996d
#: ../../topics/forms/modelforms.txt:522
msgid "Form inheritance"
msgstr ""

# 081797a7905743a386238c614e120ddf
#: ../../topics/forms/modelforms.txt:495
msgid ""
"As with basic forms, you can extend and reuse ``ModelForms`` by inheriting "
"them. This is useful if you need to declare extra fields or extra methods on "
"a parent class for use in a number of forms derived from models. For "
"example, using the previous ``ArticleForm`` class::"
msgstr ""

# 0d05c0ac01d24fca952e1eda59c8e3a4
#: ../../topics/forms/modelforms.txt:504
msgid ""
"This creates a form that behaves identically to ``ArticleForm``, except "
"there's some extra validation and cleaning for the ``pub_date`` field."
msgstr ""

# 98ac32ab92b64494a639b36afaf118d4
#: ../../topics/forms/modelforms.txt:507
msgid ""
"You can also subclass the parent's ``Meta`` inner class if you want to "
"change the ``Meta.fields`` or ``Meta.excludes`` lists::"
msgstr ""

# c4080855aac443dca036f22cda5eb29d
#: ../../topics/forms/modelforms.txt:514
msgid ""
"This adds the extra method from the ``EnhancedArticleForm`` and modifies the "
"original ``ArticleForm.Meta`` to remove one field."
msgstr ""

# 4f8cf28c33924425ba6f2216c3902169
#: ../../topics/forms/modelforms.txt:517
msgid "There are a couple of things to note, however."
msgstr ""

# a835d6e8dfd447c1b9c4ad4b465b72ac
#: ../../topics/forms/modelforms.txt:519
msgid ""
"Normal Python name resolution rules apply. If you have multiple base classes "
"that declare a ``Meta`` inner class, only the first one will be used. This "
"means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the "
"first parent, etc."
msgstr ""

# c1afb507340640cbacaeae2a77198119
#: ../../topics/forms/modelforms.txt:524
msgid ""
"For technical reasons, a subclass cannot inherit from both a ``ModelForm`` "
"and a ``Form`` simultaneously."
msgstr ""

# 2a81412f3aad44d286f079b9986318c6
#: ../../topics/forms/modelforms.txt:527
msgid ""
"Chances are these notes won't affect you unless you're trying to do "
"something tricky with subclassing."
msgstr ""

# 0047fcddfe8d4f46a5aec460d94a9a14
#: ../../topics/forms/modelforms.txt:562
msgid "ModelForm factory function"
msgstr ""

# 6a382705323b49f58419366576a960fa
#: ../../topics/forms/modelforms.txt:547
msgid ""
"You can create forms from a given model using the standalone function :func:"
"`~django.forms.models.modelform_factory`, instead of using a class "
"definition. This may be more convenient if you do not have many "
"customizations to make::"
msgstr ""

# 4546298d420a4e4d865a60bc6651acf4
#: ../../topics/forms/modelforms.txt:555
msgid ""
"This can also be used to make simple modifications to existing forms, for "
"example by specifying which fields should be displayed::"
msgstr ""

# 6e2d3ede83b9410c8db18e0c06e16f67
#: ../../topics/forms/modelforms.txt:560
msgid "... or which fields should be excluded::"
msgstr ""

# 4e6ec3ceecce4283bece15887b156eff
#: ../../topics/forms/modelforms.txt:564
msgid "You can also specify the widgets to be used for a given field::"
msgstr ""

# 40cf0a084755452ab8a5427104161146
#: ../../topics/forms/modelforms.txt:572
msgid "Model formsets"
msgstr ""

# fb57d2b1c98045688a2d84c7a61f6d31
#: ../../topics/forms/modelforms.txt:576
msgid ""
"Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a "
"couple of enhanced formset classes that make it easy to work with Django "
"models. Let's reuse the ``Author`` model from above::"
msgstr ""

# 6f52e22e0ab14f1589c505a89583d862
#: ../../topics/forms/modelforms.txt:583
msgid ""
"This will create a formset that is capable of working with the data "
"associated with the ``Author`` model. It works just like a regular formset::"
msgstr ""

# 8556e7bb3a354cb7b3560e66af61a779
#: ../../topics/forms/modelforms.txt:600
msgid ""
":func:`~django.forms.models.modelformset_factory` uses ``formset_factory`` "
"to generate formsets. This means that a model formset is just an extension "
"of a basic formset that knows how to interact with a particular model."
msgstr ""

# 23e5edf20c724d428d4d76cbb42e8f05
#: ../../topics/forms/modelforms.txt:605
msgid "Changing the queryset"
msgstr ""

# 8d96f7c76b6140a1b1267f963d301eb3
#: ../../topics/forms/modelforms.txt:607
msgid ""
"By default, when you create a formset from a model, the formset will use a "
"queryset that includes all objects in the model (e.g., ``Author.objects."
"all()``). You can override this behavior by using the ``queryset`` argument::"
msgstr ""

# 30f5cd4e7c68433e94e99113faec27e3
#: ../../topics/forms/modelforms.txt:614
msgid ""
"Alternatively, you can create a subclass that sets ``self.queryset`` in "
"``__init__``::"
msgstr ""

# f613d07d89f247578041af26cecbff75
#: ../../topics/forms/modelforms.txt:624
msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function::"
msgstr ""

# 8785361948e14a7aa0cc012b0320d562
#: ../../topics/forms/modelforms.txt:628
msgid ""
"If you want to return a formset that doesn't include *any* pre-existing "
"instances of the model, you can specify an empty QuerySet::"
msgstr ""

# 18797754f93746c4b43c258846600f6e
#: ../../topics/forms/modelforms.txt:635
msgid "Controlling which fields are used with ``fields`` and ``exclude``"
msgstr ""

# 6399990e68564d97bc5662b46e488e87
#: ../../topics/forms/modelforms.txt:637
msgid ""
"By default, a model formset uses all fields in the model that are not marked "
"with ``editable=False``. However, this can be overridden at the formset "
"level::"
msgstr ""

# 7e7a7f0037994b0688665538f9c3b5b6
#: ../../topics/forms/modelforms.txt:642
msgid ""
"Using ``fields`` restricts the formset to use only the given fields. "
"Alternatively, you can take an \"opt-out\" approach, specifying which fields "
"to exclude::"
msgstr ""

# 3d0383127e5846eda973d744061f24d9
#: ../../topics/forms/modelforms.txt:649
msgid "Providing initial values"
msgstr ""

# 39d0828886544f89bc65f42bf35d392f
#: ../../topics/forms/modelforms.txt:653
msgid ""
"As with regular formsets, it's possible to :ref:`specify initial data "
"<formsets-initial-data>` for forms in the formset by specifying an "
"``initial`` parameter when instantiating the model formset class returned "
"by :func:`~django.forms.models.modelformset_factory`. However, with model "
"formsets, the initial values only apply to extra forms, those that aren't "
"bound to an existing object instance."
msgstr ""

# b47973be51a14974bae7850bdce33797
#: ../../topics/forms/modelforms.txt:663
msgid "Saving objects in the formset"
msgstr ""

# 92da183be16c483087d8699d1a6cf3d9
#: ../../topics/forms/modelforms.txt:665
msgid ""
"As with a ``ModelForm``, you can save the data as a model object. This is "
"done with the formset's ``save()`` method::"
msgstr ""

# a8a44b53879741d78efdf4ffaec929e9
#: ../../topics/forms/modelforms.txt:674
msgid ""
"The ``save()`` method returns the instances that have been saved to the "
"database. If a given instance's data didn't change in the bound data, the "
"instance won't be saved to the database and won't be included in the return "
"value (``instances``, in the above example)."
msgstr ""

# 00c8d38f38b045889dcdbfb7f7173dcf
#: ../../topics/forms/modelforms.txt:679
msgid ""
"When fields are missing from the form (for example because they have been "
"excluded), these fields will not be set by the ``save()`` method. You can "
"find more information about this restriction, which also holds for regular "
"``ModelForms``, in `Using a subset of fields on the form`_."
msgstr ""

# 8b585ad35ecf4346b4c72e3a141974f3
#: ../../topics/forms/modelforms.txt:685
msgid "Pass ``commit=False`` to return the unsaved model instances::"
msgstr ""

# 171653a2999a49b48a0b038b36a6b87e
#: ../../topics/forms/modelforms.txt:693
msgid ""
"This gives you the ability to attach data to the instances before saving "
"them to the database. If your formset contains a ``ManyToManyField``, you'll "
"also need to call ``formset.save_m2m()`` to ensure the many-to-many "
"relationships are saved properly."
msgstr ""

# 98a4298a65424454b18c2ff61ae35af4
#: ../../topics/forms/modelforms.txt:701
msgid "Limiting the number of editable objects"
msgstr ""

# b582f108287c44d78cfb9617bc16f060
#: ../../topics/forms/modelforms.txt:703
msgid ""
"As with regular formsets, you can use the ``max_num`` and ``extra`` "
"parameters to :func:`~django.forms.models.modelformset_factory` to limit the "
"number of extra forms displayed."
msgstr ""

# a073296aaf7c425a982c06a59a5951d3
#: ../../topics/forms/modelforms.txt:707
msgid "``max_num`` does not prevent existing objects from being displayed::"
msgstr ""

# 2033ef880b534b3b90f36a4d09e59fb9
#: ../../topics/forms/modelforms.txt:717
msgid ""
"If the value of ``max_num`` is greater than the number of existing related "
"objects, up to ``extra`` additional blank forms will be added to the "
"formset, so long as the total number of forms does not exceed ``max_num``::"
msgstr ""

# 34026bcacbee4fb8b4aed2bf795a8b49
#: ../../topics/forms/modelforms.txt:734
msgid "Using a model formset in a view"
msgstr ""

# cc25caaa085749b997ab32c383562b78
#: ../../topics/forms/modelforms.txt:736
msgid ""
"Model formsets are very similar to formsets. Let's say we want to present a "
"formset to edit ``Author`` model instances::"
msgstr ""

# 9640627ef6574c93bd8aabc93ac0cdd6
#: ../../topics/forms/modelforms.txt:752
msgid ""
"As you can see, the view logic of a model formset isn't drastically "
"different than that of a \"normal\" formset. The only difference is that we "
"call ``formset.save()`` to save the data into the database. (This was "
"described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""

# 2814fd46144640c8bfaebe3467863a9d
#: ../../topics/forms/modelforms.txt:777
msgid "Overriding ``clean()`` on a ``ModelFormSet``"
msgstr ""

# 4c64ff9950aa4ec5a0a48964ca5d28b5
#: ../../topics/forms/modelforms.txt:779
msgid ""
"Just like with ``ModelForms``, by default the ``clean()`` method of a "
"``ModelFormSet`` will validate that none of the items in the formset violate "
"the unique constraints on your model (either ``unique``, ``unique_together`` "
"or ``unique_for_date|month|year``).  If you want to override the ``clean()`` "
"method on a ``ModelFormSet`` and maintain this validation, you must call the "
"parent class's ``clean`` method::"
msgstr ""

# 4df4dc3e30dc44708b3b56daaaf40c28
#: ../../topics/forms/modelforms.txt:775
msgid "Using a custom queryset"
msgstr ""

# fd05b4d2177f4bcd90be1dde54c99a0d
#: ../../topics/forms/modelforms.txt:777
msgid ""
"As stated earlier, you can override the default queryset used by the model "
"formset::"
msgstr ""

# 2edbf3a941224f789ec1a18c13cf608b
#: ../../topics/forms/modelforms.txt:794
msgid ""
"Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET`` "
"cases in this example."
msgstr ""

# a111b55a0bd24bbd9908489261d7593c
#: ../../topics/forms/modelforms.txt:798
msgid "Using the formset in the template"
msgstr ""

# 7b080e3411cc4c129ea1bf49791a2f8d
#: ../../topics/forms/modelforms.txt:802
msgid "There are three ways to render a formset in a Django template."
msgstr ""

# cbab5b9950614712926372deb5b73653
#: ../../topics/forms/modelforms.txt:804
msgid "First, you can let the formset do most of the work::"
msgstr ""

# 0c6f2f8aff6d479b87254961987ab181
#: ../../topics/forms/modelforms.txt:810
msgid ""
"Second, you can manually render the formset, but let the form deal with "
"itself::"
msgstr ""

# 71200c13923d4fb48df071418f039afa
#: ../../topics/forms/modelforms.txt:820
msgid ""
"When you manually render the forms yourself, be sure to render the "
"management form as shown above. See the :ref:`management form documentation "
"<understanding-the-managementform>`."
msgstr ""

# 0886bdf56de749879686b90faf162972
#: ../../topics/forms/modelforms.txt:824
msgid "Third, you can manually render each field::"
msgstr ""

# 563e11ce171d46ca825f96b3f5944361
#: ../../topics/forms/modelforms.txt:835
msgid ""
"If you opt to use this third method and you don't iterate over the fields "
"with a ``{% for %}`` loop, you'll need to render the primary key field. For "
"example, if you were rendering the ``name`` and ``age`` fields of a model::"
msgstr ""

# abbc38615dfe49288da1e38ab6edce7f
#: ../../topics/forms/modelforms.txt:850
msgid ""
"Notice how we need to explicitly render ``{{ form.id }}``. This ensures that "
"the model formset, in the ``POST`` case, will work correctly. (This example "
"assumes a primary key named ``id``. If you've explicitly defined your own "
"primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""

# db81dcee196a4af988bef7572b6c623b
#: ../../topics/forms/modelforms.txt:860
msgid "Inline formsets"
msgstr ""

# bde7dbf4362742d59e2d4c81f16280c8
#: ../../topics/forms/modelforms.txt:862
msgid ""
"Inline formsets is a small abstraction layer on top of model formsets. These "
"simplify the case of working with related objects via a foreign key. Suppose "
"you have these two models::"
msgstr ""

# 0233c928a8d0425096594af92ac5685a
#: ../../topics/forms/modelforms.txt:873
msgid ""
"If you want to create a formset that allows you to edit books belonging to a "
"particular author, you could do this::"
msgstr ""

# ded64bbb85db489386a8d73d908dac84
#: ../../topics/forms/modelforms.txt:883
msgid ""
":func:`~django.forms.models.inlineformset_factory` uses :func:`~django.forms."
"models.modelformset_factory` and marks ``can_delete=True``."
msgstr ""

# ea5ed880e5f141f7be19f7dae2151aeb
#: ../../topics/forms/modelforms.txt:889
msgid ""
":ref:`Manually rendered can_delete and can_order <manually-rendered-can-"
"delete-and-can-order>`."
msgstr ""

# c499033f496b488ca37068c187598fcc
#: ../../topics/forms/modelforms.txt:913
msgid "Overriding ``clean()`` on an ``InlineFormSet``"
msgstr ""

# 5c4880f4e5f44cf1ba36251bb1b65373
#: ../../topics/forms/modelforms.txt:915
msgid ""
"See :ref:`model-formsets-overriding-clean`, but subclass :class:`~models."
"BaseInlineFormSet` rather than :class:`~models.BaseModelFormSet`."
msgstr ""

# 00a213ee89c64e51a3bb99b6b09196d8
#: ../../topics/forms/modelforms.txt:920
msgid "More than one foreign key to the same model"
msgstr ""

# c9cc7a27ca134d94a6de214e126f8b23
#: ../../topics/forms/modelforms.txt:894
msgid ""
"If your model contains more than one foreign key to the same model, you'll "
"need to resolve the ambiguity manually using ``fk_name``. For example, "
"consider the following model::"
msgstr ""

# 992afa22b90c48e786bf7afac7d1791c
#: ../../topics/forms/modelforms.txt:903
msgid ""
"To resolve this, you can use ``fk_name`` to :func:`~django.forms.models."
"inlineformset_factory`::"
msgstr ""

# 99e1e12e528f4ad78e86366e319ca3db
#: ../../topics/forms/modelforms.txt:909
msgid "Using an inline formset in a view"
msgstr ""

# 4ee9dafd256343e583eded292dc96086
#: ../../topics/forms/modelforms.txt:911
msgid ""
"You may want to provide a view that allows a user to edit the related "
"objects of a model. Here's how you can do that::"
msgstr ""

# 0639416fbc564bc3835e94ec519a6be7
#: ../../topics/forms/modelforms.txt:929
msgid "Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""

# 3e1774d132774f04a88afba356ff1ce9
#: ../../topics/http/decorators.txt:3
msgid "View decorators"
msgstr ""

# cba5684f9f2d48d0871b6a8f2d159fa0
#: ../../topics/http/decorators.txt:7
msgid ""
"Django provides several decorators that can be applied to views to support "
"various HTTP features."
msgstr ""

# 75ead867e9c449b2ad6f533ec60cc3fc
#: ../../topics/http/decorators.txt:11
msgid "Allowed HTTP methods"
msgstr ""

# 82efb38648894c79a75312d590f8cda7
#: ../../topics/http/decorators.txt:13
msgid ""
"The decorators in :mod:`django.views.decorators.http` can be used to "
"restrict access to views based on the request method. These decorators will "
"return a :class:`django.http.HttpResponseNotAllowed` if the conditions are "
"not met."
msgstr ""

# 781fcb91e1474a7ab97963d784dd2ca8
#: ../../topics/http/decorators.txt:19
msgid ""
"Decorator to require that a view only accept particular request methods. "
"Usage::"
msgstr ""

# 112878f667404348aed423e0762c4668
#: ../../topics/http/decorators.txt:30
msgid "Note that request methods should be in uppercase."
msgstr ""

# ce67a932562a4f109986fa7137b058a6
#: ../../topics/http/decorators.txt:34
msgid "Decorator to require that a view only accept the GET method."
msgstr ""

# 70cf03d3e7bf405d8f6db54de21bfd85
#: ../../topics/http/decorators.txt:38
msgid "Decorator to require that a view only accept the POST method."
msgstr ""

# 1ff1c802573c467782135eae62c6c632
#: ../../topics/http/decorators.txt:44
msgid ""
"Decorator to require that a view only accept the GET and HEAD methods. These "
"methods are commonly considered \"safe\" because they should not have the "
"significance of taking an action other than retrieving the requested "
"resource."
msgstr ""

# 58a142711a7e46928e59c3675ecdcecf
#: ../../topics/http/decorators.txt:50
msgid ""
"Django will automatically strip the content of responses to HEAD requests "
"while leaving the headers unchanged, so you may handle HEAD requests exactly "
"like GET requests in your views. Since some software, such as link checkers, "
"rely on HEAD requests, you might prefer using ``require_safe`` instead of "
"``require_GET``."
msgstr ""

# 9005a61dc9924aa9b1dc53bc4ceebb86
#: ../../topics/http/decorators.txt:57
msgid "Conditional view processing"
msgstr ""

# 6cd4c4c08e3440fcbe5f8c735203e1f6
#: ../../topics/http/decorators.txt:59
msgid ""
"The following decorators in :mod:`django.views.decorators.http` can be used "
"to control caching behavior on particular views."
msgstr ""

# 14f93b59f13440d88f17853fea28ceee
#: ../../topics/http/decorators.txt:68
msgid ""
"These decorators can be used to generate ``ETag`` and ``Last-Modified`` "
"headers; see :doc:`conditional view processing </topics/conditional-view-"
"processing>`."
msgstr ""

# dca445d8ab80419996659d450873b4d5
#: ../../topics/http/decorators.txt:75
msgid "GZip compression"
msgstr ""

# 940931958e8c4283aa2aa385fa9211f6
#: ../../topics/http/decorators.txt:77
msgid ""
"The decorators in :mod:`django.views.decorators.gzip` control content "
"compression on a per-view basis."
msgstr ""

# d5e27e980fb746a6b603f4c8e2f73b57
#: ../../topics/http/decorators.txt:82
msgid ""
"This decorator compresses content if the browser allows gzip compression. It "
"sets the ``Vary`` header accordingly, so that caches will base their storage "
"on the ``Accept-Encoding`` header."
msgstr ""

# 303c74a4acc0418caab8bfe1ceaefc0c
#: ../../topics/http/decorators.txt:89
msgid "Vary headers"
msgstr ""

# 9aef0a5d0cd14d71a5cca0a8bd3a2ea9
#: ../../topics/http/decorators.txt:91
msgid ""
"The decorators in :mod:`django.views.decorators.vary` can be used to control "
"caching based on specific request headers."
msgstr ""

# 28adc380c6f14341a3e04f8c79c468a7
#: ../../topics/http/decorators.txt:98
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key."
msgstr ""

# cd2afc1e8c0f48ddb2352d9d6ce2be7d
#: ../../topics/http/decorators.txt:101
msgid "See :ref:`using vary headers <using-vary-headers>`."
msgstr ""

# 1aa7c195bff240c9b2a383a3d1836000
#: ../../topics/http/file-uploads.txt:3
msgid "File Uploads"
msgstr ""

# 0419f8d9292a4259b14386fd546d324c
#: ../../topics/http/file-uploads.txt:7
msgid ""
"When Django handles a file upload, the file data ends up placed in :attr:"
"`request.FILES <django.http.HttpRequest.FILES>` (for more on the ``request`` "
"object see the documentation for :doc:`request and response objects </ref/"
"request-response>`). This document explains how files are stored on disk and "
"in memory, and how to customize the default behavior."
msgstr ""

# 6c199e3d330a466fb78d39a04fc75b0b
#: ../../topics/http/file-uploads.txt:14
msgid "Basic file uploads"
msgstr ""

# 51310c659e2e46e28edb5b24aa8cc972
#: ../../topics/http/file-uploads.txt:16
msgid "Consider a simple form containing a :class:`~django.forms.FileField`::"
msgstr ""

# 41feb236bb01489ca11745007e3a99c3
#: ../../topics/http/file-uploads.txt:24
msgid ""
"A view handling this form will receive the file data in :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`, which is a dictionary containing a key for "
"each :class:`~django.forms.FileField` (or :class:`~django.forms.ImageField`, "
"or other :class:`~django.forms.FileField` subclass) in the form. So the data "
"from the above form would be accessible as ``request.FILES['file']``."
msgstr ""

# c4aec175f8be4799ba6e95eafd9ff008
#: ../../topics/http/file-uploads.txt:31
msgid ""
"Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only "
"contain data if the request method was ``POST`` and the ``<form>`` that "
"posted the request has the attribute ``enctype=\"multipart/form-data\"``. "
"Otherwise, ``request.FILES`` will be empty."
msgstr ""

# dca5f7dd9e834b97a2a1fded682038e4
#: ../../topics/http/file-uploads.txt:36
msgid ""
"Most of the time, you'll simply pass the file data from ``request`` into the "
"form as described in :ref:`binding-uploaded-files`. This would look "
"something like::"
msgstr ""

# de9d6539fd274424ba07210a0128ffd7
#: ../../topics/http/file-uploads.txt:56
msgid ""
"Notice that we have to pass :attr:`request.FILES <django.http.HttpRequest."
"FILES>` into the form's constructor; this is how file data gets bound into a "
"form."
msgstr ""

# 0f83454715924431a93dc42a349e8925
#: ../../topics/http/file-uploads.txt:60
msgid "Handling uploaded files"
msgstr ""

# 8f4d7169067d48d38d4297f3154fa269
#: ../../topics/http/file-uploads.txt:64
msgid ""
"The final piece of the puzzle is handling the actual file data from :attr:"
"`request.FILES <django.http.HttpRequest.FILES>`. Each entry in this "
"dictionary is an ``UploadedFile`` object -- a simple wrapper around an "
"uploaded file. You'll usually use one of these methods to access the "
"uploaded content:"
msgstr ""

# 03accf45edc84f71966eeae063f305da
#: ../../topics/http/file-uploads.txt:71
msgid ""
"Read the entire uploaded data from the file. Be careful with this method: if "
"the uploaded file is huge it can overwhelm your system if you try to read it "
"into memory. You'll probably want to use ``chunks()`` instead; see below."
msgstr ""

# 2201597f3c99468f9e976469664e2de8
#: ../../topics/http/file-uploads.txt:78
msgid ""
"Returns ``True`` if the uploaded file is big enough to require reading in "
"multiple chunks. By default this will be any file larger than 2.5 megabytes, "
"but that's configurable; see below."
msgstr ""

# a9175e13b1824d0d8070c5e3d2bb0ab4
#: ../../topics/http/file-uploads.txt:84
msgid ""
"A generator returning chunks of the file. If ``multiple_chunks()`` is "
"``True``, you should use this method in a loop instead of ``read()``."
msgstr ""

# 7ab2c772238c4af8a7901bb7626bc899
#: ../../topics/http/file-uploads.txt:87
msgid ""
"In practice, it's often easiest simply to use ``chunks()`` all the time; see "
"the example below."
msgstr ""

# 18d173bf5f624016980e325a655c458d
#: ../../topics/http/file-uploads.txt:92
msgid "The name of the uploaded file (e.g. ``my_file.txt``)."
msgstr ""

# 1157a582a90340a1ad763199c344837c
#: ../../topics/http/file-uploads.txt:96
msgid "The size, in bytes, of the uploaded file."
msgstr ""

# ae4858318541481ca7408b91d8e363a3
#: ../../topics/http/file-uploads.txt:98
msgid ""
"There are a few other methods and attributes available on ``UploadedFile`` "
"objects; see `UploadedFile objects`_ for a complete reference."
msgstr ""

# 86d4497b9a054727bdd044aabd9628ec
#: ../../topics/http/file-uploads.txt:101
msgid ""
"Putting it all together, here's a common way you might handle an uploaded "
"file::"
msgstr ""

# 67efd485a0464157981a4ac08f68f5ba
#: ../../topics/http/file-uploads.txt:108
msgid ""
"Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures "
"that large files don't overwhelm your system's memory."
msgstr ""

# 130bcabd180341c8a33f31990e5a565d
#: ../../topics/http/file-uploads.txt:112
msgid "Where uploaded data is stored"
msgstr ""

# 4542ebd3207e4ce59187bddcbf197ce9
#: ../../topics/http/file-uploads.txt:114
msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""

# 8463a60a62e14926bcf40da1e8166257
#: ../../topics/http/file-uploads.txt:116
msgid ""
"By default, if an uploaded file is smaller than 2.5 megabytes, Django will "
"hold the entire contents of the upload in memory. This means that saving the "
"file involves only a read from memory and a write to disk and thus is very "
"fast."
msgstr ""

# de9de59d59074a38b16225c39e8cea5d
#: ../../topics/http/file-uploads.txt:120
msgid ""
"However, if an uploaded file is too large, Django will write the uploaded "
"file to a temporary file stored in your system's temporary directory. On a "
"Unix-like platform this means you can expect Django to generate a file "
"called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large "
"enough, you can watch this file grow in size as Django streams the data onto "
"disk."
msgstr ""

# 6855229ec99e4942bd247fab901f4170
#: ../../topics/http/file-uploads.txt:126
msgid ""
"These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are simply \"reasonable "
"defaults\". Read on for details on how you can customize or completely "
"replace upload behavior."
msgstr ""

# 3e3103ff570c409a91242f587e8ad3ce
#: ../../topics/http/file-uploads.txt:131
msgid "Changing upload handler behavior"
msgstr ""

# fb2995e2313f4a0484bc230e734f5c65
#: ../../topics/http/file-uploads.txt:133
msgid "Three settings control Django's file upload behavior:"
msgstr ""

# 3dab88dc5c63498c9eeb35ddb43b8fdb
#: ../../topics/http/file-uploads.txt:140
msgid ":setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`"
msgstr ""

# 4bba60d4e6f8484a82fe5f74abc3337f
#: ../../topics/http/file-uploads.txt:136
msgid ""
"The maximum size, in bytes, for files that will be uploaded into memory. "
"Files larger than :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` will be streamed to "
"disk."
msgstr ""

# f25887639357493296573747663cd1ed
#: ../../topics/http/file-uploads.txt:140
msgid "Defaults to 2.5 megabytes."
msgstr ""

# a96c256b7f5c4e359868f6e9cd8cf422
#: ../../topics/http/file-uploads.txt:147
msgid ":setting:`FILE_UPLOAD_TEMP_DIR`"
msgstr ""

# 5e7957de83394df5aebc2dad5b3910f9
#: ../../topics/http/file-uploads.txt:143
msgid ""
"The directory where uploaded files larger than :setting:"
"`FILE_UPLOAD_MAX_MEMORY_SIZE` will be stored."
msgstr ""

# 239518e45f7548cb91776ef0e4594370
#: ../../topics/http/file-uploads.txt:146
msgid ""
"Defaults to your system's standard temporary directory (i.e. ``/tmp`` on "
"most Unix-like systems)."
msgstr ""

# ae41301b9ad34ac08841a370624a2d5c
#: ../../topics/http/file-uploads.txt:166
msgid ":setting:`FILE_UPLOAD_PERMISSIONS`"
msgstr ""

# 65550d94244d4a76a8963f6e8b5ec403
#: ../../topics/http/file-uploads.txt:150
msgid ""
"The numeric mode (i.e. ``0644``) to set newly uploaded files to. For more "
"information about what these modes mean, see the documentation for :func:`os."
"chmod`."
msgstr ""

# 40c42dfe9e784ac1bc4c6c85fa1bd0be
#: ../../topics/http/file-uploads.txt:154
msgid ""
"If this isn't given or is ``None``, you'll get operating-system dependent "
"behavior. On most platforms, temporary files will have a mode of ``0600``, "
"and files saved from memory will be saved using the system's standard umask."
msgstr ""

# 5cfcc5da410a4263984f6452424ec854
#: ../../topics/http/file-uploads.txt:161
msgid ""
"If you're not familiar with file modes, please note that the leading ``0`` "
"is very important: it indicates an octal number, which is the way that modes "
"must be specified. If you try to use ``644``, you'll get totally incorrect "
"behavior."
msgstr ""

# 769c334f2ca94b428693a3f71214e296
#: ../../topics/http/file-uploads.txt:166
msgid "**Always prefix the mode with a 0.**"
msgstr ""

# 923d5e1e525d42b1a81beb1cdcd93664
#: ../../topics/http/file-uploads.txt:179
msgid ":setting:`FILE_UPLOAD_HANDLERS`"
msgstr ""

# d6c89c887cc0416d859f757896056b51
#: ../../topics/http/file-uploads.txt:169
msgid ""
"The actual handlers for uploaded files. Changing this setting allows "
"complete customization -- even replacement -- of Django's upload process. "
"See `upload handlers`_, below, for details."
msgstr ""

# bcc6d38335294c0d886a556ae962a33e
#: ../../topics/http/file-uploads.txt:173
msgid "Defaults to::"
msgstr ""

# cdfe2dae5ff34b17ab74e7ad0a5cb2f4
#: ../../topics/http/file-uploads.txt:178
msgid ""
"Which means \"try to upload to memory first, then fall back to temporary "
"files.\""
msgstr ""

# 35985870888648a2ab063f0734eb6a52
#: ../../topics/http/file-uploads.txt:182
msgid "Handling uploaded files with a model"
msgstr ""

# 1347eeb8bd934f998564109e8c1ef84f
#: ../../topics/http/file-uploads.txt:184
msgid ""
"If you're saving a file on a :class:`~django.db.models.Model` with a :class:"
"`~django.db.models.FileField`, using a :class:`~django.forms.ModelForm` "
"makes this process much easier. The file object will be saved to the "
"location specified by the :attr:`~django.db.models.FileField.upload_to` "
"argument of the corresponding :class:`~django.db.models.FileField` when "
"calling ``form.save()``::"
msgstr ""

# 288dd44c6a0b46588718ed5214d87ee7
#: ../../topics/http/file-uploads.txt:206
msgid ""
"If you are constructing an object manually, you can simply assign the file "
"object from :attr:`request.FILES <django.http.HttpRequest.FILES>` to the "
"file field in the model::"
msgstr ""

# 79cd14abff974a3aaa24d06baf02c7a5
#: ../../topics/http/file-uploads.txt:228
msgid "``UploadedFile`` objects"
msgstr ""

# eaea08f24da2472a85c085ede28f59b0
#: ../../topics/http/file-uploads.txt:230
msgid ""
"In addition to those inherited from :class:`~django.core.files.File`, all "
"``UploadedFile`` objects define the following methods/attributes:"
msgstr ""

# e30a34e759d348f5956eaa1fae0c3629
#: ../../topics/http/file-uploads.txt:235
msgid ""
"The content-type header uploaded with the file (e.g. :mimetype:`text/plain` "
"or :mimetype:`application/pdf`). Like any data supplied by the user, you "
"shouldn't trust that the uploaded file is actually this type. You'll still "
"need to validate that the file contains the content that the content-type "
"header claims -- \"trust but verify.\""
msgstr ""

# dae6ff23d2164eb59732cfe23245ca6a
#: ../../topics/http/file-uploads.txt:243
msgid ""
"For :mimetype:`text/*` content-types, the character set (i.e. ``utf8``) "
"supplied by the browser. Again, \"trust but verify\" is the best policy here."
msgstr ""

# bfc5b385bf0845a48123924d7c5fc5e4
#: ../../topics/http/file-uploads.txt:248
msgid ""
"Only files uploaded onto disk will have this method; it returns the full "
"path to the temporary uploaded file."
msgstr ""

# a2fdea1f0c404a6ea83ddf2d113ada32
#: ../../topics/http/file-uploads.txt:253
msgid ""
"Like regular Python files, you can read the file line-by-line simply by "
"iterating over the uploaded file:"
msgstr ""

# 5be7f1c99ca24c47b70a339372ecb4f4
#: ../../topics/http/file-uploads.txt:261
msgid ""
"However, *unlike* standard Python files, :class:`UploadedFile` only "
"understands ``\\n`` (also known as \"Unix-style\") line endings. If you know "
"that you need to handle uploaded files with different line endings, you'll "
"need to do so in your view."
msgstr ""

# f9193693ada34b678b38b0c283d0e6db
#: ../../topics/http/file-uploads.txt:267
msgid "Upload Handlers"
msgstr ""

# fb9e045dbec740c2ae2f17a12f22e812
#: ../../topics/http/file-uploads.txt:269
msgid ""
"When a user uploads a file, Django passes off the file data to an *upload "
"handler* -- a small class that handles file data as it gets uploaded. Upload "
"handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` "
"setting, which defaults to::"
msgstr ""

# 6e73d4ec1f734f3795731767f3bcbd53
#: ../../topics/http/file-uploads.txt:277
msgid ""
"Together the ``MemoryFileUploadHandler`` and ``TemporaryFileUploadHandler`` "
"provide Django's default file upload behavior of reading small files into "
"memory and large ones onto disk."
msgstr ""

# cd4e4bdad1d144e0a245ef03dff941b1
#: ../../topics/http/file-uploads.txt:281
msgid ""
"You can write custom handlers that customize how Django handles files. You "
"could, for example, use custom handlers to enforce user-level quotas, "
"compress data on the fly, render progress bars, and even send data to "
"another storage location directly without storing it locally."
msgstr ""

# 0a06cff3e5b247898f3e7e1aff6b0305
#: ../../topics/http/file-uploads.txt:289
msgid "Modifying upload handlers on the fly"
msgstr ""

# 6963bb5b7b694617820f4ce7fc5e166d
#: ../../topics/http/file-uploads.txt:291
msgid ""
"Sometimes particular views require different upload behavior. In these "
"cases, you can override upload handlers on a per-request basis by modifying "
"``request.upload_handlers``. By default, this list will contain the upload "
"handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the "
"list as you would any other list."
msgstr ""

# 31a6e5c4d551418fbe7628c68017e7df
#: ../../topics/http/file-uploads.txt:297
msgid ""
"For instance, suppose you've written a ``ProgressBarUploadHandler`` that "
"provides feedback on upload progress to some sort of AJAX widget. You'd add "
"this handler to your upload handlers like this::"
msgstr ""

# 9e383792b82f4d5b8cc9b0d57177ed1f
#: ../../topics/http/file-uploads.txt:303
msgid ""
"You'd probably want to use ``list.insert()`` in this case (instead of "
"``append()``) because a progress bar handler would need to run *before* any "
"other handlers. Remember, the upload handlers are processed in order."
msgstr ""

# 05728c57b9f34a1a94ac18cf134462d1
#: ../../topics/http/file-uploads.txt:307
msgid ""
"If you want to replace the upload handlers completely, you can just assign a "
"new list::"
msgstr ""

# a1cd05debdb3457fb9379dee5f0bc7dd
#: ../../topics/http/file-uploads.txt:314
msgid ""
"You can only modify upload handlers *before* accessing ``request.POST`` or "
"``request.FILES`` -- it doesn't make sense to change upload handlers after "
"upload handling has already started. If you try to modify ``request."
"upload_handlers`` after reading from ``request.POST`` or ``request.FILES`` "
"Django will throw an error."
msgstr ""

# 5cfe9dc9cd9c456da645f2050b456c18
#: ../../topics/http/file-uploads.txt:321
msgid ""
"Thus, you should always modify uploading handlers as early in your view as "
"possible."
msgstr ""

# 0e111c0eb311487bac044cc1ab61a4ce
#: ../../topics/http/file-uploads.txt:324
msgid ""
"Also, ``request.POST`` is accessed by :class:`~django.middleware.csrf."
"CsrfViewMiddleware` which is enabled by default. This means you will need to "
"use :func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow "
"you to change the upload handlers.  You will then need to use :func:`~django."
"views.decorators.csrf.csrf_protect` on the function that actually processes "
"the request.  Note that this means that the handlers may start receiving the "
"file upload before the CSRF checks have been done. Example code:"
msgstr ""

# 566c0f315aca4afd980c46c7e324d06c
#: ../../topics/http/file-uploads.txt:349
msgid "Writing custom upload handlers"
msgstr ""

# 5bb45255a5d44df8823910a8a53e23f9
#: ../../topics/http/file-uploads.txt:351
msgid ""
"All file upload handlers should be subclasses of ``django.core.files."
"uploadhandler.FileUploadHandler``. You can define upload handlers wherever "
"you wish."
msgstr ""

# 5373b5c05e844b67bc2e7d1e8833e010
#: ../../topics/http/file-uploads.txt:356
msgid "Required methods"
msgstr ""

# afad5660b9af420fbdaba78f64a7a143
#: ../../topics/http/file-uploads.txt:358
msgid "Custom file upload handlers **must** define the following methods:"
msgstr ""

# 3831132fde434c1a80c428d59f708c3a
#: ../../topics/http/file-uploads.txt:378
msgid "``FileUploadHandler.receive_data_chunk(self, raw_data, start)``"
msgstr ""

# ec191698126d46b58eee06d1bc815867
#: ../../topics/http/file-uploads.txt:361
msgid "Receives a \"chunk\" of data from the file upload."
msgstr ""

# dc88ff1689bf424d83ff290af809c122
#: ../../topics/http/file-uploads.txt:363
msgid "``raw_data`` is a byte string containing the uploaded data."
msgstr ""

# efb1d91d35564b51a5f6885737f65550
#: ../../topics/http/file-uploads.txt:365
msgid ""
"``start`` is the position in the file where this ``raw_data`` chunk begins."
msgstr ""

# de3c23ec1b024f78b8a18d8d3e1c5ceb
#: ../../topics/http/file-uploads.txt:368
msgid ""
"The data you return will get fed into the subsequent upload handlers' "
"``receive_data_chunk`` methods. In this way, one handler can be a \"filter\" "
"for other handlers."
msgstr ""

# 1fd1af986fd34bb6837867ca109e6fbd
#: ../../topics/http/file-uploads.txt:372
msgid ""
"Return ``None`` from ``receive_data_chunk`` to short-circuit remaining "
"upload handlers from getting this chunk. This is useful if you're storing "
"the uploaded data yourself and don't want future handlers to store a copy of "
"the data."
msgstr ""

# 5f12fa61ae63411d9dcc9a7a869ec8e8
#: ../../topics/http/file-uploads.txt:377
msgid ""
"If you raise a ``StopUpload`` or a ``SkipFile`` exception, the upload will "
"abort or the file will be completely skipped."
msgstr ""

# ab82f95d546642f2af197a81f7c0d9eb
#: ../../topics/http/file-uploads.txt:385
msgid "``FileUploadHandler.file_complete(self, file_size)``"
msgstr ""

# 071bcc9697624448b5b4dc524485bf31
#: ../../topics/http/file-uploads.txt:381
msgid "Called when a file has finished uploading."
msgstr ""

# 1ba918a0af484069ac4fc045f4e1fa40
#: ../../topics/http/file-uploads.txt:383
msgid ""
"The handler should return an ``UploadedFile`` object that will be stored in "
"``request.FILES``. Handlers may also return ``None`` to indicate that the "
"``UploadedFile`` object should come from subsequent upload handlers."
msgstr ""

# 9bd7c3621b494bc89e74a8422ba89751
#: ../../topics/http/file-uploads.txt:388
msgid "Optional methods"
msgstr ""

# 236771abe05f4fb3a82533e8939a41ab
#: ../../topics/http/file-uploads.txt:390
msgid ""
"Custom upload handlers may also define any of the following optional methods "
"or attributes:"
msgstr ""

# 1e47669d957d407fba799de5cafc1742
#: ../../topics/http/file-uploads.txt:403
msgid "``FileUploadHandler.chunk_size``"
msgstr ""

# 87992efdf28d4a3fb489e9289c3ea769
#: ../../topics/http/file-uploads.txt:394
msgid ""
"Size, in bytes, of the \"chunks\" Django should store into memory and feed "
"into the handler. That is, this attribute controls the size of chunks fed "
"into ``FileUploadHandler.receive_data_chunk``."
msgstr ""

# 9755fc3dc8264a4dbe74c5e112d3b724
#: ../../topics/http/file-uploads.txt:398
msgid ""
"For maximum performance the chunk sizes should be divisible by ``4`` and "
"should not exceed 2 GB (2\\ :sup:`31` bytes) in size. When there are "
"multiple chunk sizes provided by multiple handlers, Django will use the "
"smallest chunk size defined by any handler."
msgstr ""

# fd1421bf1af5491cbf9decc8bf7e0728
#: ../../topics/http/file-uploads.txt:403
msgid "The default is 64*2\\ :sup:`10` bytes, or 64 KB."
msgstr ""

# 70e43e25f03f491f9594a1eb1b3a1f8e
#: ../../topics/http/file-uploads.txt:423
msgid ""
"``FileUploadHandler.new_file(self, field_name, file_name, content_type, "
"content_length, charset)``"
msgstr ""

# d481b0c3cc9849beb77d1373f2dc07b2
#: ../../topics/http/file-uploads.txt:406
msgid ""
"Callback signaling that a new file upload is starting. This is called before "
"any data has been fed to any upload handlers."
msgstr ""

# b1c8622a10f844bea4dc191e43540e17
#: ../../topics/http/file-uploads.txt:409
msgid "``field_name`` is a string name of the file ``<input>`` field."
msgstr ""

# 5f49b4ee820a4f48aa109ff4cc095999
#: ../../topics/http/file-uploads.txt:411
msgid "``file_name`` is the unicode filename that was provided by the browser."
msgstr ""

# adce6f6de8664f938994bf8397b89a5f
#: ../../topics/http/file-uploads.txt:413
msgid ""
"``content_type`` is the MIME type provided by the browser -- E.g. ``'image/"
"jpeg'``."
msgstr ""

# 343d08c1927b450299c0efaad028f08d
#: ../../topics/http/file-uploads.txt:416
msgid ""
"``content_length`` is the length of the image given by the browser. "
"Sometimes this won't be provided and will be ``None``."
msgstr ""

# 7b2165d815b5499cbfd949c43cea4bf0
#: ../../topics/http/file-uploads.txt:419
msgid ""
"``charset`` is the character set (i.e. ``utf8``) given by the browser. Like "
"``content_length``, this sometimes won't be provided."
msgstr ""

# ad6a6c2c327c4ce3b6c3d30754f07852
#: ../../topics/http/file-uploads.txt:422
msgid ""
"This method may raise a ``StopFutureHandlers`` exception to prevent future "
"handlers from handling this file."
msgstr ""

# ad58fe9f673c478998ebef05935927e6
#: ../../topics/http/file-uploads.txt:426
msgid "``FileUploadHandler.upload_complete(self)``"
msgstr ""

# 5f09daa28e524cd6a1af4462c482feab
#: ../../topics/http/file-uploads.txt:426
msgid "Callback signaling that the entire upload (all files) has completed."
msgstr ""

# 7a6f990a5cdc4bcaa274cb774b166f81
#: ../../topics/http/file-uploads.txt:444
msgid ""
"``FileUploadHandler.handle_raw_input(self, input_data, META, content_length, "
"boundary, encoding)``"
msgstr ""

# 191c4f8bf96a4445b0e8f86fa1a574c0
#: ../../topics/http/file-uploads.txt:429
msgid ""
"Allows the handler to completely override the parsing of the raw HTTP input."
msgstr ""

# 9b6e461cc6cd45369b62f660bdb3877a
#: ../../topics/http/file-uploads.txt:432
msgid "``input_data`` is a file-like object that supports ``read()``-ing."
msgstr ""

# 5b8ff2935376486eb2795216925c5a04
#: ../../topics/http/file-uploads.txt:434
msgid "``META`` is the same object as ``request.META``."
msgstr ""

# ea7b9948311d495ab6175cc96defe3ee
#: ../../topics/http/file-uploads.txt:436
msgid ""
"``content_length`` is the length of the data in ``input_data``. Don't read "
"more than ``content_length`` bytes from ``input_data``."
msgstr ""

# 1e93e6e276fa4174af222aff40d99931
#: ../../topics/http/file-uploads.txt:439
msgid "``boundary`` is the MIME boundary for this request."
msgstr ""

# 05b4c047d95140f6b7f89ac0b885cdcc
#: ../../topics/http/file-uploads.txt:441
msgid "``encoding`` is the encoding of the request."
msgstr ""

# 710387a9bb914cbfa58e677d7427a1b4
#: ../../topics/http/file-uploads.txt:443
msgid ""
"Return ``None`` if you want upload handling to continue, or a tuple of "
"``(POST, FILES)`` if you want to return the new data structures suitable for "
"the request directly."
msgstr ""

# f05b64da0ebd40d1a99d23782f5f8c26
#: ../../topics/http/generic-views.txt:3
msgid "Generic views"
msgstr ""

# 7b0929c0c38e4e3abbfc59df5baf0218
#: ../../topics/http/generic-views.txt:5
msgid "See :doc:`/ref/class-based-views/index`."
msgstr ""

# c3d985bd352f461480908c647706f2c5
#: ../../topics/http/index.txt:2
msgid "Handling HTTP requests"
msgstr ""

# cad00fa977294144a2d85239db23625a
#: ../../topics/http/index.txt:4
msgid "Information on handling HTTP requests in Django:"
msgstr ""

# 630395a600ad492cb7888315cd0d67f4
#: ../../topics/http/middleware.txt:3
msgid "Middleware"
msgstr ""

# 15c4dd2f68904abb84e9b184f924a19b
#: ../../topics/http/middleware.txt:5
msgid ""
"Middleware is a framework of hooks into Django's request/response "
"processing. It's a light, low-level \"plugin\" system for globally altering "
"Django's input and/or output."
msgstr ""

# 3f31462281ad41459bbd79b422355a8c
#: ../../topics/http/middleware.txt:9
msgid ""
"Each middleware component is responsible for doing some specific function. "
"For example, Django includes a middleware component, ``XViewMiddleware``, "
"that adds an ``\"X-View\"`` HTTP header to every response to a ``HEAD`` "
"request."
msgstr ""

# 766e2a4bc10944f487354f682223e4c9
#: ../../topics/http/middleware.txt:13
msgid ""
"This document explains how middleware works, how you activate middleware, "
"and how to write your own middleware. Django ships with some built-in "
"middleware you can use right out of the box; they're documented in the :doc:"
"`built-in middleware reference </ref/middleware>`."
msgstr ""

# a6a89151cd954ce1a800b2955e3e0bf2
#: ../../topics/http/middleware.txt:19
msgid "Activating middleware"
msgstr ""

# cd7af54402a44850814a238e4df755e5
#: ../../topics/http/middleware.txt:21
msgid ""
"To activate a middleware component, add it to the :setting:"
"`MIDDLEWARE_CLASSES` list in your Django settings. In :setting:"
"`MIDDLEWARE_CLASSES`, each middleware component is represented by a string: "
"the full Python path to the middleware's class name. For example, here's the "
"default :setting:`MIDDLEWARE_CLASSES` created by :djadmin:`django-admin.py "
"startproject <startproject>`::"
msgstr ""

# da005634a8364472b6f3d8635dfd130c
#: ../../topics/http/middleware.txt:35
msgid ""
"During the request phases (:meth:`process_request` and :meth:`process_view` "
"middleware), Django applies middleware in the order it's defined in :setting:"
"`MIDDLEWARE_CLASSES`, top-down. During the response phases (:meth:"
"`process_response` and :meth:`process_exception` middleware), the classes "
"are applied in reverse order, from the bottom up. You can think of it like "
"an onion: each middleware class is a \"layer\" that wraps the view:"
msgstr ""

# d4c4d23df7c346578757ab50d32a34c8
#: ../../topics/http/middleware.txt:47
msgid ""
"A Django installation doesn't require any middleware -- e.g., :setting:"
"`MIDDLEWARE_CLASSES` can be empty, if you'd like -- but it's strongly "
"suggested that you at least use :class:`~django.middleware.common."
"CommonMiddleware`."
msgstr ""

# 9b0854681de842cc8eef772714739a30
#: ../../topics/http/middleware.txt:53
msgid "Writing your own middleware"
msgstr ""

# e142c30064f04eb49f3b917202017db4
#: ../../topics/http/middleware.txt:55
msgid ""
"Writing your own middleware is easy. Each middleware component is a single "
"Python class that defines one or more of the following methods:"
msgstr ""

# f50b656fe58043f99ad464e99c301d21
#: ../../topics/http/middleware.txt:61
msgid "``process_request``"
msgstr ""

# 460ff330c35a480e9504055dd84c6bc0
#: ../../topics/http/middleware.txt:65
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. This method is "
"called on each request, before Django decides which view to execute."
msgstr ""

# 4fe6575ce0f84ade9560337631e9fe99
#: ../../topics/http/middleware.txt:68
msgid ""
"``process_request()`` should return either ``None`` or an :class:`~django."
"http.HttpResponse` object. If it returns ``None``, Django will continue "
"processing this request, executing any other middleware and, then, the "
"appropriate view. If it returns an :class:`~django.http.HttpResponse` "
"object, Django won't bother calling ANY other request, view or exception "
"middleware, or the appropriate view; it'll return that :class:`~django.http."
"HttpResponse`. Response middleware is always called on every response."
msgstr ""

# b6675ac4adbb49959f680abb7da5e401
#: ../../topics/http/middleware.txt:79
msgid "``process_view``"
msgstr ""

# b71c8d862490485b87e201e38082b958
#: ../../topics/http/middleware.txt:83
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is "
"the Python function that Django is about to use. (It's the actual function "
"object, not the name of the function as a string.) ``view_args`` is a list "
"of positional arguments that will be passed to the view, and ``view_kwargs`` "
"is a dictionary of keyword arguments that will be passed to the view. "
"Neither ``view_args`` nor ``view_kwargs`` include the first view argument "
"(``request``)."
msgstr ""

# 5a64206f0a4f4795bb9122b8555899ab
#: ../../topics/http/middleware.txt:91
msgid ""
"``process_view()`` is called just before Django calls the view. It should "
"return either ``None`` or an :class:`~django.http.HttpResponse` object. If "
"it returns ``None``, Django will continue processing this request, executing "
"any other ``process_view()`` middleware and, then, the appropriate view. If "
"it returns an :class:`~django.http.HttpResponse` object, Django won't bother "
"calling ANY other request, view or exception middleware, or the appropriate "
"view; it'll return that :class:`~django.http.HttpResponse`. Response "
"middleware is always called on every response."
msgstr ""

# 8563749c7a91442d9d2c4b42d49c285a
#: ../../topics/http/middleware.txt:102
msgid ""
"Accessing :attr:`request.POST <django.http.HttpRequest.POST>` or :attr:"
"`request.REQUEST <django.http.HttpRequest.REQUEST>` inside middleware from "
"``process_request`` or ``process_view`` will prevent any view running after "
"the middleware from being able to :ref:`modify the upload handlers for the "
"request <modifying_upload_handlers_on_the_fly>`, and should normally be "
"avoided."
msgstr ""

# 160ffd2d5f8945518591366727de09ed
#: ../../topics/http/middleware.txt:109
msgid ""
"The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be "
"considered an exception, as it provides the :func:`~django.views.decorators."
"csrf.csrf_exempt` and :func:`~django.views.decorators.csrf.csrf_protect` "
"decorators which allow views to explicitly control at what point the CSRF "
"validation should occur."
msgstr ""

# fa4471fcd66445d1bea86c30bb5a8cb3
#: ../../topics/http/middleware.txt:118
msgid "``process_template_response``"
msgstr ""

# 49d00122a8be46f5b15b50c75d5ff7b7
#: ../../topics/http/middleware.txt:122
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"a subclass of :class:`~django.template.response.SimpleTemplateResponse` (e."
"g. :class:`~django.template.response.TemplateResponse`) or any response "
"object that implements a ``render`` method."
msgstr ""

# 2ebe6562016d447a96e93fdc7ecaa6e1
#: ../../topics/http/middleware.txt:127
msgid ""
"``process_template_response()`` must return a response object that "
"implements a ``render`` method. It could alter the given ``response`` by "
"changing ``response.template_name`` and ``response.context_data``, or it "
"could create and return a brand-new :class:`~django.template.response."
"SimpleTemplateResponse` or equivalent."
msgstr ""

# f7798b2c83eb4ce5a35c87979e1e47d4
#: ../../topics/http/middleware.txt:133
msgid ""
"``process_template_response()`` will only be called if the response instance "
"has a ``render()`` method, indicating that it is a :class:`~django.template."
"response.TemplateResponse` or equivalent."
msgstr ""

# 7fbcea7a8952439281e5f2e1183dfe44
#: ../../topics/http/middleware.txt:137
msgid ""
"You don't need to explicitly render responses -- responses will be "
"automatically rendered once all template response middleware has been called."
msgstr ""

# 735349aafe09451c926ac3ed4b4b99c8
#: ../../topics/http/middleware.txt:141
msgid ""
"Middleware are run in reverse order during the response phase, which "
"includes process_template_response."
msgstr ""

# 9c162bc609394372a2a56de56629aaf2
#: ../../topics/http/middleware.txt:147
msgid "``process_response``"
msgstr ""

# b47f58d32c3d4e9d8f48b8ebdb9b9b66
#: ../../topics/http/middleware.txt:151
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.http.HttpResponse` object returned by a Django view."
msgstr ""

# 9c672ca9e44047cdbe39141dd29f2911
#: ../../topics/http/middleware.txt:154
msgid ""
"``process_response()`` must return an :class:`~django.http.HttpResponse` "
"object. It could alter the given ``response``, or it could create and return "
"a brand-new :class:`~django.http.HttpResponse`."
msgstr ""

# 8d14432d9b57423b845593fa8173cdcd
#: ../../topics/http/middleware.txt:158
msgid ""
"Unlike the ``process_request()`` and ``process_view()`` methods, the "
"``process_response()`` method is always called, even if the "
"``process_request()`` and ``process_view()`` methods of the same middleware "
"class were skipped because an earlier middleware method returned an :class:"
"`~django.http.HttpResponse` (this means that your ``process_response()`` "
"method cannot rely on setup done in ``process_request()``, for example). In "
"addition, during the response phase the classes are applied in reverse "
"order, from the bottom up. This means classes defined at the end of :setting:"
"`MIDDLEWARE_CLASSES` will be run first."
msgstr ""

# 7c63c85172b74c0db11ff176f5c37b90
#: ../../topics/http/middleware.txt:171
msgid ""
"Unlike :class:`~django.http.HttpResponse`, :class:`~django.http."
"StreamingHttpResponse` does not have a ``content`` attribute. As a result, "
"middleware can no longer assume that all responses will have a ``content`` "
"attribute. If they need access to the content, they must test for streaming "
"responses and adjust their behavior accordingly::"
msgstr ""

# 0788fb2c63844cb38bdf35249485e227
#: ../../topics/http/middleware.txt:182
msgid ""
"``streaming_content`` should be assumed to be too large to hold in memory. "
"Middleware may wrap it in a new generator, but must not consume it."
msgstr ""

# 1c9bbfdd6c684a23803b824742ce3ce9
#: ../../topics/http/middleware.txt:188
msgid "``process_exception``"
msgstr ""

# ad57e1fcc5ae442cb13521bb42be81df
#: ../../topics/http/middleware.txt:192
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is "
"an ``Exception`` object raised by the view function."
msgstr ""

# 961fe593c9e1483784d3112e2a43f42e
#: ../../topics/http/middleware.txt:195
msgid ""
"Django calls ``process_exception()`` when a view raises an exception. "
"``process_exception()`` should return either ``None`` or an :class:`~django."
"http.HttpResponse` object. If it returns an :class:`~django.http."
"HttpResponse` object, the response will be returned to the browser. "
"Otherwise, default exception handling kicks in."
msgstr ""

# f7f30628dec6433eae76268c1784b00e
#: ../../topics/http/middleware.txt:201
msgid ""
"Again, middleware are run in reverse order during the response phase, which "
"includes ``process_exception``. If an exception middleware returns a "
"response, the middleware classes above that middleware will not be called at "
"all."
msgstr ""

# 5f0216db5b764f0cb8de69a9ea13af3a
#: ../../topics/http/middleware.txt:206
msgid "``__init__``"
msgstr ""

# 5931c0dc0f134267be9f9a3baac40063
#: ../../topics/http/middleware.txt:208
msgid ""
"Most middleware classes won't need an initializer since middleware classes "
"are essentially placeholders for the ``process_*`` methods. If you do need "
"some global state you may use ``__init__`` to set up. However, keep in mind "
"a couple of caveats:"
msgstr ""

# 8b75fa1860654ed68b1209d4168c5500
#: ../../topics/http/middleware.txt:213
msgid ""
"Django initializes your middleware without any arguments, so you can't "
"define ``__init__`` as requiring any arguments."
msgstr ""

# 87144a40ab0d4f11870e16374e444e52
#: ../../topics/http/middleware.txt:216
msgid ""
"Unlike the ``process_*`` methods which get called once per request, "
"``__init__`` gets called only *once*, when the Web server responds to the "
"first request."
msgstr ""

# 4c8ab1f20181404a8d7201ac2a4d1318
#: ../../topics/http/middleware.txt:221
msgid "Marking middleware as unused"
msgstr ""

# 5ad5cf949f6d426395c1844dde3f97c2
#: ../../topics/http/middleware.txt:223
msgid ""
"It's sometimes useful to determine at run-time whether a piece of middleware "
"should be used. In these cases, your middleware's ``__init__`` method may "
"raise ``django.core.exceptions.MiddlewareNotUsed``. Django will then remove "
"that piece of middleware from the middleware process."
msgstr ""

# 46380ed7cbc649d0a5ee3d8528babc42
#: ../../topics/http/middleware.txt:229
msgid "Guidelines"
msgstr ""

# 852cff6fd4a24eaeb1763195952202e1
#: ../../topics/http/middleware.txt:231
msgid "Middleware classes don't have to subclass anything."
msgstr ""

# e77db3b24f654652976a5378f125ca40
#: ../../topics/http/middleware.txt:233
msgid ""
"The middleware class can live anywhere on your Python path. All Django cares "
"about is that the :setting:`MIDDLEWARE_CLASSES` setting includes the path to "
"it."
msgstr ""

# c7c85d48a4104e46bada14101c9df7d9
#: ../../topics/http/middleware.txt:237
msgid ""
"Feel free to look at :doc:`Django's available middleware </ref/middleware>` "
"for examples."
msgstr ""

# 3caca41301b64174aebb4ad0a487cbba
#: ../../topics/http/middleware.txt:240
msgid ""
"If you write a middleware component that you think would be useful to other "
"people, contribute to the community! :doc:`Let us know </internals/"
"contributing/index>`, and we'll consider adding it to Django."
msgstr ""

# 4be1bf80d15944e2a2cc8093fd32ce98
#: ../../topics/http/sessions.txt:3
msgid "How to use sessions"
msgstr ""

# a469f7acdaf447958d71fae3e5bc2921
#: ../../topics/http/sessions.txt:8
msgid ""
"Django provides full support for anonymous sessions. The session framework "
"lets you store and retrieve arbitrary data on a per-site-visitor basis. It "
"stores data on the server side and abstracts the sending and receiving of "
"cookies. Cookies contain a session ID -- not the data itself (unless you're "
"using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""

# dae4d55cd1ea4dd5b8de444cafd37c18
#: ../../topics/http/sessions.txt:15
msgid "Enabling sessions"
msgstr ""

# 16c83d4f361e4a03af17a6606aa9a8d3
#: ../../topics/http/sessions.txt:17
msgid ""
"Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr ""

# 8a5481672c8a4df8bfbc4580d6a8bc56
#: ../../topics/http/sessions.txt:19
msgid "To enable session functionality, do the following:"
msgstr ""

# b8f168c43f3d4977a8628919173e3f0f
#: ../../topics/http/sessions.txt:21
msgid ""
"Edit the :setting:`MIDDLEWARE_CLASSES` setting and make sure it contains "
"``'django.contrib.sessions.middleware.SessionMiddleware'``. The default "
"``settings.py`` created by ``django-admin.py startproject`` has "
"``SessionMiddleware`` activated."
msgstr ""

# 4c48ef7af1a44030b052b052bb17869a
#: ../../topics/http/sessions.txt:26
msgid ""
"If you don't want to use sessions, you might as well remove the "
"``SessionMiddleware`` line from :setting:`MIDDLEWARE_CLASSES` and ``'django."
"contrib.sessions'`` from your :setting:`INSTALLED_APPS`. It'll save you a "
"small bit of overhead."
msgstr ""

# 743265c7ef3343c0a23c357355ecfcd7
#: ../../topics/http/sessions.txt:32
msgid "Configuring the session engine"
msgstr ""

# 7dbaed9c58bf4c0792857b022db291c6
#: ../../topics/http/sessions.txt:34
msgid ""
"By default, Django stores sessions in your database (using the model "
"``django.contrib.sessions.models.Session``). Though this is convenient, in "
"some setups it's faster to store session data elsewhere, so Django can be "
"configured to store session data on your filesystem or in your cache."
msgstr ""

# bea0637e0148432d9f954c84deab9a23
#: ../../topics/http/sessions.txt:40
msgid "Using database-backed sessions"
msgstr ""

# 2eb4d1c76b8f48c09a631435a7878a86
#: ../../topics/http/sessions.txt:42
msgid ""
"If you want to use a database-backed session, you need to add ``'django."
"contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

# 24f3732e7f1d41e3a599804daf07fcb0
#: ../../topics/http/sessions.txt:45
msgid ""
"Once you have configured your installation, run ``manage.py syncdb`` to "
"install the single database table that stores session data."
msgstr ""

# 395a499ab2f6415ca7066045a25bccc3
#: ../../topics/http/sessions.txt:51
msgid "Using cached sessions"
msgstr ""

# 45cb6722f90c4091bf7c1e03ece2cd6e
#: ../../topics/http/sessions.txt:53
msgid ""
"For better performance, you may want to use a cache-based session backend."
msgstr ""

# 44be9a91c4ed4cd6b6e7418e36809de9
#: ../../topics/http/sessions.txt:55
msgid ""
"To store session data using Django's cache system, you'll first need to make "
"sure you've configured your cache; see the :doc:`cache documentation </"
"topics/cache>` for details."
msgstr ""

# 515e4d437e5d4b48af6add4a751bc6b8
#: ../../topics/http/sessions.txt:61
msgid ""
"You should only use cache-based sessions if you're using the Memcached cache "
"backend. The local-memory cache backend doesn't retain data long enough to "
"be a good choice, and it'll be faster to use file or database sessions "
"directly instead of sending everything through the file or database cache "
"backends."
msgstr ""

# d1482b215d5e4559a581e66705bbb780
#: ../../topics/http/sessions.txt:67
msgid ""
"If you have multiple caches defined in :setting:`CACHES`, Django will use "
"the default cache. To use another cache, set :setting:`SESSION_CACHE_ALIAS` "
"to the name of that cache."
msgstr ""

# 715aa570128f4adbacd4816882deaa53
#: ../../topics/http/sessions.txt:74
msgid ""
"Once your cache is configured, you've got two choices for how to store data "
"in the cache:"
msgstr ""

# 4aacb59730424acd9aeabf87092282e7
#: ../../topics/http/sessions.txt:77
msgid ""
"Set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cache"
"\"`` for a simple caching session store. Session data will be stored "
"directly in your cache. However, session data may not be persistent: cached "
"data can be evicted if the cache fills up or if the cache server is "
"restarted."
msgstr ""

# f2567292471845c1b57b814a4c033e45
#: ../../topics/http/sessions.txt:83
msgid ""
"For persistent, cached data, set :setting:`SESSION_ENGINE` to ``\"django."
"contrib.sessions.backends.cached_db\"``. This uses a write-through cache -- "
"every write to the cache will also be written to the database. Session reads "
"only use the database if the data is not already in the cache."
msgstr ""

# f6c24506a30346fb91bb720978b39226
#: ../../topics/http/sessions.txt:89
msgid ""
"Both session stores are quite fast, but the simple cache is faster because "
"it disregards persistence. In most cases, the ``cached_db`` backend will be "
"fast enough, but if you need that last bit of performance, and are willing "
"to let session data be expunged from time to time, the ``cache`` backend is "
"for you."
msgstr ""

# 55e2bb0a5b7d44cdba81fc6f06f08887
#: ../../topics/http/sessions.txt:94
msgid ""
"If you use the ``cached_db`` session backend, you also need to follow the "
"configuration instructions for the `using database-backed sessions`_."
msgstr ""

# bc12e915ef77437184ea9789757c0c05
#: ../../topics/http/sessions.txt:98
msgid "Using file-based sessions"
msgstr ""

# 2ddba325dfa14daea2f18ea611884bca
#: ../../topics/http/sessions.txt:100
msgid ""
"To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to ``"
"\"django.contrib.sessions.backends.file\"``."
msgstr ""

# ec2df0a3bd6541408784478689058af3
#: ../../topics/http/sessions.txt:103
msgid ""
"You might also want to set the :setting:`SESSION_FILE_PATH` setting (which "
"defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to "
"control where Django stores session files. Be sure to check that your Web "
"server has permissions to read and write to this location."
msgstr ""

# d6a1c545c7e640fc92679ac802ec137e
#: ../../topics/http/sessions.txt:111
msgid "Using cookie-based sessions"
msgstr ""

# b416bb1036954732a066e456190ea40b
#: ../../topics/http/sessions.txt:115
msgid ""
"To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.signed_cookies\"``. The session data "
"will be stored using Django's tools for :doc:`cryptographic signing </topics/"
"signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""

# 8d07ec68660446c1bee609755a8af6a4
#: ../../topics/http/sessions.txt:122
msgid ""
"It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting "
"``True`` to prevent tampering of the stored data from JavaScript."
msgstr ""

# b55e0fd754314d9b96736494031628cb
#: ../../topics/http/sessions.txt:127
msgid ""
"**If the SECRET_KEY is not kept secret and you are using the** :class:"
"`~django.contrib.sessions.serializers.PickleSerializer`, **this can lead to "
"arbitrary remote code execution.**"
msgstr ""

# b7cb31484f79407796d18aa8f57c6c22
#: ../../topics/http/sessions.txt:131
msgid ""
"An attacker in possession of the :setting:`SECRET_KEY` can not only generate "
"falsified session data, which your site will trust, but also remotely "
"execute arbitrary code, as the data is serialized using pickle."
msgstr ""

# a6e704404bf140fd941d486e01795beb
#: ../../topics/http/sessions.txt:135
msgid ""
"If you use cookie-based sessions, pay extra care that your secret key is "
"always kept completely secret, for any system which might be remotely "
"accessible."
msgstr ""

# 54801e8ff1bc41859e17b3708fa770ff
#: ../../topics/http/sessions.txt:139
msgid "**The session data is signed but not encrypted**"
msgstr ""

# f45d13d0465c4a328f6d1be0cc28df0d
#: ../../topics/http/sessions.txt:129
msgid ""
"When using the cookies backend the session data can be read by the client."
msgstr ""

# 6aa69a971e0446789ef13383f38c133a
#: ../../topics/http/sessions.txt:131
msgid ""
"A MAC (Message Authentication Code) is used to protect the data against "
"changes by the client, so that the session data will be invalidated when "
"being tampered with. The same invalidation happens if the client storing the "
"cookie (e.g. your user's browser) can't store all of the session cookie and "
"drops data. Even though Django compresses the data, it's still entirely "
"possible to exceed the `common limit of 4096 bytes`_ per cookie."
msgstr ""

# b6dc6298029d4a07a4ab450dcbbfc995
#: ../../topics/http/sessions.txt:138
msgid "**No freshness guarantee**"
msgstr ""

# 72af9363662b49d8af351d3544346c40
#: ../../topics/http/sessions.txt:152
msgid ""
"Note also that while the MAC can guarantee the authenticity of the data "
"(that it was generated by your site, and not someone else), and the "
"integrity of the data (that it is all there and correct), it cannot "
"guarantee freshness i.e. that you are being sent back the last thing you "
"sent to the client. This means that for some uses of session data, the "
"cookie backend might open you up to `replay attacks`_. Unlike other session "
"backends which keep a server-side record of each session and invalidate it "
"when a user logs out, cookie-based sessions are not invalidated when a user "
"logs out. Thus if an attacker steals a user's cookie, he can use that cookie "
"to login as that user even if the user logs out. Cookies will only be "
"detected as 'stale' if they are older than your :setting:"
"`SESSION_COOKIE_AGE`."
msgstr ""

# 3cf25b5522aa44dc8b0f69b023a960e5
#: ../../topics/http/sessions.txt:149
msgid "**Performance**"
msgstr ""

# 4434af6d77ae4e3794cc85f4ca44cad8
#: ../../topics/http/sessions.txt:151
msgid ""
"Finally, the size of a cookie can have an impact on the `speed of your "
"site`_."
msgstr ""

# f379980327a948468aad2c2218175aa2
#: ../../topics/http/sessions.txt:158
msgid "Using sessions in views"
msgstr ""

# 9b36f4d2752049d7ac7fd0a1685edd91
#: ../../topics/http/sessions.txt:160
msgid ""
"When ``SessionMiddleware`` is activated, each :class:`~django.http."
"HttpRequest` object -- the first argument to any Django view function -- "
"will have a ``session`` attribute, which is a dictionary-like object."
msgstr ""

# 159e192b89a54816ac486648feafddd2
#: ../../topics/http/sessions.txt:164
msgid ""
"You can read it and write to ``request.session`` at any point in your view. "
"You can edit it multiple times."
msgstr ""

# d89d5ce94a7d4315bc5752fe7c1139fd
#: ../../topics/http/sessions.txt:169
msgid ""
"This is the base class for all session objects. It has the following "
"standard dictionary methods:"
msgstr ""

# 97b41fa2f8ff4b569709a78b94a26125
#: ../../topics/http/sessions.txt:174
msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr ""

# 7edfb786b25b4836bd028372c1ce2d2a
#: ../../topics/http/sessions.txt:178
msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr ""

# 8ac2a247907c4eefb4d1162813dcdd72
#: ../../topics/http/sessions.txt:182
msgid ""
"Example: ``del request.session['fav_color']``. This raises ``KeyError`` if "
"the given ``key`` isn't already in the session."
msgstr ""

# 899ea295025343269327b9db0cd1b893
#: ../../topics/http/sessions.txt:187
msgid "Example: ``'fav_color' in request.session``"
msgstr ""

# ba50cecb60b74ec4b4302c8178a86e42
#: ../../topics/http/sessions.txt:191
msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr ""

# 8b70a2cab945458aa6d5184f23793360
#: ../../topics/http/sessions.txt:195
msgid "Example: ``fav_color = request.session.pop('fav_color')``"
msgstr ""

# 0e4ef4aa827a44de81d4efa9c1a014b4
#: ../../topics/http/sessions.txt:205
msgid "It also has these methods:"
msgstr ""

# 22a72f5da7e04a0d9af6cb866c4766f8
#: ../../topics/http/sessions.txt:209
msgid ""
"Delete the current session data from the session and regenerate the session "
"key value that is sent back to the user in the cookie. This is used if you "
"want to ensure that the previous session data can't be accessed again from "
"the user's browser (for example, the :func:`django.contrib.auth.logout()` "
"function calls it)."
msgstr ""

# b6fd5e5fd81a469298706e88c24a3413
#: ../../topics/http/sessions.txt:217
msgid ""
"Sets a test cookie to determine whether the user's browser supports cookies. "
"Due to the way cookies work, you won't be able to test this until the user's "
"next page request. See `Setting test cookies`_ below for more information."
msgstr ""

# 72ceddbaa124449192a7e58c9acbc3af
#: ../../topics/http/sessions.txt:224
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"browser accepted the test cookie. Due to the way cookies work, you'll have "
"to call ``set_test_cookie()`` on a previous, separate page request. See "
"`Setting test cookies`_ below for more information."
msgstr ""

# 3a7a77a7ba2248669dacca995c5c90ca
#: ../../topics/http/sessions.txt:231
msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""

# 5250e8d0345344aa9e28db0734405216
#: ../../topics/http/sessions.txt:235
msgid ""
"Sets the expiration time for the session. You can pass a number of different "
"values:"
msgstr ""

# b3549e4811c44a53ac99b4cf3be4722c
#: ../../topics/http/sessions.txt:238
msgid ""
"If ``value`` is an integer, the session will expire after that many seconds "
"of inactivity. For example, calling ``request.session.set_expiry(300)`` "
"would make the session expire in 5 minutes."
msgstr ""

# d852b0f6b5a94cec88df31e20a189d65
#: ../../topics/http/sessions.txt:255
msgid ""
"If ``value`` is a ``datetime`` or ``timedelta`` object, the session will "
"expire at that specific date/time. Note that ``datetime`` and ``timedelta`` "
"values are only serializable if you are using the :class:`~django.contrib."
"sessions.serializers.PickleSerializer`."
msgstr ""

# eb5e68251a614810a1e03cf6c6d8ace5
#: ../../topics/http/sessions.txt:246
msgid ""
"If ``value`` is ``0``, the user's session cookie will expire when the user's "
"Web browser is closed."
msgstr ""

# 633ef4714cf9439b9884c70c1190baac
#: ../../topics/http/sessions.txt:249
msgid ""
"If ``value`` is ``None``, the session reverts to using the global session "
"expiry policy."
msgstr ""

# d59975e7cebe4cdf905a715cbc87264e
#: ../../topics/http/sessions.txt:252
msgid ""
"Reading a session is not considered activity for expiration purposes. "
"Session expiration is computed from the last time the session was *modified*."
msgstr ""

# e0a588c7313842e69132bccc0488bd3e
#: ../../topics/http/sessions.txt:258
msgid ""
"Returns the number of seconds until this session expires. For sessions with "
"no custom expiration (or those set to expire at browser close), this will "
"equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# 96187a6bb53241639670dcfd98e601ad
#: ../../topics/http/sessions.txt:262
msgid "This function accepts two optional keyword arguments:"
msgstr ""

# 62fd4b4a72e642d6b6b91729193d750b
#: ../../topics/http/sessions.txt:264
msgid ""
"``modification``: last modification of the session, as a :class:`~datetime."
"datetime` object. Defaults to the current time."
msgstr ""

# debaa2cc51554c399ab5e479fd274d39
#: ../../topics/http/sessions.txt:266
msgid ""
"``expiry``: expiry information for the session, as a :class:`~datetime."
"datetime` object, an :func:`int` (in seconds), or ``None``. Defaults to the "
"value stored in the session by :meth:`set_expiry`, if there is one, or "
"``None``."
msgstr ""

# 241d07ddbdac4cb6aa16aa97429571e6
#: ../../topics/http/sessions.txt:273
msgid ""
"Returns the date this session will expire. For sessions with no custom "
"expiration (or those set to expire at browser close), this will equal the "
"date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

# 88fd8b56ea814047a29ab11b78e0b2d7
#: ../../topics/http/sessions.txt:277
msgid ""
"This function accepts the same keyword argumets as :meth:`get_expiry_age`."
msgstr ""

# ca316b271b54448198133c7240f7d1fc
#: ../../topics/http/sessions.txt:281
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"session cookie will expire when the user's Web browser is closed."
msgstr ""

# e3ab02c7abcd4b819f403a6c123eff29
#: ../../topics/http/sessions.txt:288
msgid ""
"Removes expired sessions from the session store. This class method is called "
"by :djadmin:`clearsessions`."
msgstr ""

# c33067a4595446edb4b412cc88be1876
#: ../../topics/http/sessions.txt:308
msgid "Session serialization"
msgstr ""

# b0568f41e8d243a98bf203ab630a86cc
#: ../../topics/http/sessions.txt:316
msgid ""
"Before version 1.6, Django defaulted to using :mod:`pickle` to serialize "
"session data before storing it in the backend. If you're using the :ref:"
"`signed cookie session backend<cookie-session-backend>` and :setting:"
"`SECRET_KEY` is known by an attacker (there isn't an inherent vulnerability "
"in Django that would cause it to leak), the attacker could insert a string "
"into his session which, when unpickled, executes arbitrary code on the "
"server. The technique for doing so is simple and easily available on the "
"internet. Although the cookie session storage signs the cookie-stored data "
"to prevent tampering, a :setting:`SECRET_KEY` leak immediately escalates to "
"a remote code execution vulnerability."
msgstr ""

# 3d8bd208fc364c159d018579de1e87f2
#: ../../topics/http/sessions.txt:322
msgid ""
"This attack can be mitigated by serializing session data using JSON rather "
"than :mod:`pickle`. To facilitate this, Django 1.5.3 introduced a new "
"setting, :setting:`SESSION_SERIALIZER`, to customize the session "
"serialization format. For backwards compatibility, this setting defaults to "
"using :class:`django.contrib.sessions.serializers.PickleSerializer` in "
"Django 1.5.x, but, for security hardening, defaults to :class:`django."
"contrib.sessions.serializers.JSONSerializer` in Django 1.6. If you upgrade "
"and switch from pickle to JSON, sessions created before the upgrade will be "
"lost. Even with the caveats described in :ref:`custom-serializers`, we "
"highly recommend using JSON serialization *especially if you are using the "
"cookie backend*."
msgstr ""

# c3efd2bb6e294eb3ad9595dfc1a005c5
#: ../../topics/http/sessions.txt:335
msgid "Bundled Serializers"
msgstr ""

# 9edce26db94943a88456c59a575bf2fa
#: ../../topics/http/sessions.txt:344
msgid ""
"A wrapper around the JSON serializer from :mod:`django.core.signing`. Can "
"only serialize basic data types."
msgstr ""

# 9082cf0429ee41c6acd5d012496eff58
#: ../../topics/http/sessions.txt:347
msgid ""
"In addition, as JSON supports only string keys, note that using non-string "
"keys in ``request.session`` won't work as expected::"
msgstr ""

# 41d75bd410b24844ab147f356912e5d2
#: ../../topics/http/sessions.txt:358
msgid ""
"See the :ref:`custom-serializers` section for more details on limitations of "
"JSON serialization."
msgstr ""

# 164ffedf64744e1bbe94268c23bbfda0
#: ../../topics/http/sessions.txt:345
msgid ""
"Supports arbitrary Python objects, but, as described above, can lead to a "
"remote code execution vulnerability if :setting:`SECRET_KEY` becomes known "
"by an attacker."
msgstr ""

# 59264c1ccca84e42b649bf0ec11a5d87
#: ../../topics/http/sessions.txt:352
msgid "Write Your Own Serializer"
msgstr ""

# 3ad5fac0a59247ca89cc8fbb265d4e50
#: ../../topics/http/sessions.txt:354
msgid ""
"Note that unlike :class:`~django.contrib.sessions.serializers."
"PickleSerializer`, the :class:`~django.contrib.sessions.serializers."
"JSONSerializer` cannot handle arbitrary Python data types. As is often the "
"case, there is a trade-off between convenience and security. If you wish to "
"store more advanced data types including ``datetime`` and ``Decimal`` in "
"JSON backed sessions, you will need to write a custom serializer (or convert "
"such values to a JSON serializable object before storign them in ``request."
"session``). While serializing these values is fairly straightforward "
"(``django.core.serializers.json.DateTimeAwareJSONEncoder`` may be helpful), "
"writing a decoder that can reliably get back the same thing that you put in "
"is more fragile. For example, you run the risk of returning a ``datetime`` "
"that was actually a string that just happened to be in the same format "
"chosen for ``datetime``\\s)."
msgstr ""

# 1f08cdea1b624398a308db4b0dc14dab
#: ../../topics/http/sessions.txt:368
msgid ""
"Your serializer class must implement two methods, ``dumps(self, obj)`` and "
"``loads(self, data)``, to serialize and deserialize the dictionary of "
"session data, respectively."
msgstr ""

# 71d6644fb1a3450e9e4e53244eb4c78a
#: ../../topics/http/sessions.txt:373
msgid "Session object guidelines"
msgstr ""

# b754b2911d7b4827945194407b6738dc
#: ../../topics/http/sessions.txt:294
msgid ""
"Use normal Python strings as dictionary keys on ``request.session``. This is "
"more of a convention than a hard-and-fast rule."
msgstr ""

# 324f981eb7394a3ba69e808b71ccb730
#: ../../topics/http/sessions.txt:297
msgid ""
"Session dictionary keys that begin with an underscore are reserved for "
"internal use by Django."
msgstr ""

# 17b7c98334de4c3084cf7a98e187419d
#: ../../topics/http/sessions.txt:300
msgid ""
"Don't override ``request.session`` with a new object, and don't access or "
"set its attributes. Use it like a Python dictionary."
msgstr ""

# 82ecf1d0e203431c86e3ad60b4d17d9b
#: ../../topics/http/sessions.txt:306
msgid ""
"This simplistic view sets a ``has_commented`` variable to ``True`` after a "
"user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""

# b3e09bc9439544ddb64dc7ed9ccb9c40
#: ../../topics/http/sessions.txt:317
msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

# f9b7745b18a9435496966490e204ce32
#: ../../topics/http/sessions.txt:327
msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""

# b222c72a1c1840b9bd6354a484b0b883
#: ../../topics/http/sessions.txt:336
msgid ""
"The standard :meth:`django.contrib.auth.logout` function actually does a bit "
"more than this to prevent inadvertent data leakage. It calls the :meth:"
"`~backends.base.SessionBase.flush` method of ``request.session``. We are "
"using this example as a demonstration of how to work with session objects, "
"not as a full ``logout()`` implementation."
msgstr ""

# ec69f443e795434f8a915320019326e6
#: ../../topics/http/sessions.txt:343
msgid "Setting test cookies"
msgstr ""

# f6f9e43de91d4d8780a481e4dbbcd662
#: ../../topics/http/sessions.txt:345
msgid ""
"As a convenience, Django provides an easy way to test whether the user's "
"browser accepts cookies. Just call the :meth:`~backends.base.SessionBase."
"set_test_cookie` method of ``request.session`` in a view, and call :meth:"
"`~backends.base.SessionBase.test_cookie_worked` in a subsequent view -- not "
"in the same view call."
msgstr ""

# e4c2c075aebc461d8c877f1f722ff0b7
#: ../../topics/http/sessions.txt:352
msgid ""
"This awkward split between ``set_test_cookie()`` and "
"``test_cookie_worked()`` is necessary due to the way cookies work. When you "
"set a cookie, you can't actually tell whether a browser accepted it until "
"the browser's next request."
msgstr ""

# b7849bd6541b4847bff7c8dcf06556cb
#: ../../topics/http/sessions.txt:356
msgid ""
"It's good practice to use :meth:`~backends.base.SessionBase."
"delete_test_cookie()` to clean up after yourself. Do this after you've "
"verified that the test cookie worked."
msgstr ""

# ddbb9ec0d6de4a3387f691fca42b30b8
#: ../../topics/http/sessions.txt:360
msgid "Here's a typical usage example::"
msgstr ""

# 0556eb6c321f42b49518b4edfe8f9211
#: ../../topics/http/sessions.txt:373
msgid "Using sessions out of views"
msgstr ""

# 191c47abed8947e895c91b2144ce0e04
#: ../../topics/http/sessions.txt:375
msgid "An API is available to manipulate session data outside of a view::"
msgstr ""

# 66e7a8068396425aace1010fb70ca7a1
#: ../../topics/http/sessions.txt:389
msgid ""
"In order to prevent session fixation attacks, sessions keys that don't exist "
"are regenerated::"
msgstr ""

# 9a9293652b7d45cb93828333f0d5f000
#: ../../topics/http/sessions.txt:398
msgid ""
"If you're using the ``django.contrib.sessions.backends.db`` backend, each "
"session is just a normal Django model. The ``Session`` model is defined in "
"``django/contrib/sessions/models.py``. Because it's a normal model, you can "
"access sessions using the normal Django database API::"
msgstr ""

# a44c71221ea841908aae2fcfcac0e883
#: ../../topics/http/sessions.txt:408
msgid ""
"Note that you'll need to call ``get_decoded()`` to get the session "
"dictionary. This is necessary because the dictionary is stored in an encoded "
"format::"
msgstr ""

# d69ebbe8ba2e4e1cbb4e4a99b0f643cd
#: ../../topics/http/sessions.txt:417
msgid "When sessions are saved"
msgstr ""

# 3ee78738f4924119be5604579009eb58
#: ../../topics/http/sessions.txt:419
msgid ""
"By default, Django only saves to the session database when the session has "
"been modified -- that is if any of its dictionary values have been assigned "
"or deleted::"
msgstr ""

# 45cd35027aa44899a5ae914fce8500da
#: ../../topics/http/sessions.txt:436
msgid ""
"In the last case of the above example, we can tell the session object "
"explicitly that it has been modified by setting the ``modified`` attribute "
"on the session object::"
msgstr ""

# ba0339b2ec80421bb77e0be90d706932
#: ../../topics/http/sessions.txt:442
msgid ""
"To change this default behavior, set the :setting:"
"`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to ``True``, "
"Django will save the session to the database on every single request."
msgstr ""

# 5f9c8743d38c4263a1d1141edccb02f9
#: ../../topics/http/sessions.txt:446
msgid ""
"Note that the session cookie is only sent when a session has been created or "
"modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session "
"cookie will be sent on every request."
msgstr ""

# e81612c1e36c441f8ba6512385f2172b
#: ../../topics/http/sessions.txt:450
msgid ""
"Similarly, the ``expires`` part of a session cookie is updated each time the "
"session cookie is sent."
msgstr ""

# 3ebfd80d33284f2cb724fe1a0ae14eff
#: ../../topics/http/sessions.txt:457
msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

# d84dc4a5193d4831b3b87a4263ff5d1a
#: ../../topics/http/sessions.txt:459
msgid ""
"You can control whether the session framework uses browser-length sessions "
"vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting."
msgstr ""

# a475d26f5c564a95ab0fb895c1d58dc9
#: ../../topics/http/sessions.txt:463
msgid ""
"By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, "
"which means session cookies will be stored in users' browsers for as long "
"as :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have "
"to log in every time they open a browser."
msgstr ""

# 18f7d341bcfe47d58dfdf74443fb47c4
#: ../../topics/http/sessions.txt:468
msgid ""
"If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django "
"will use browser-length cookies -- cookies that expire as soon as the user "
"closes his or her browser. Use this if you want people to have to log in "
"every time they open a browser."
msgstr ""

# 88938e6132c74030852385122c0a829d
#: ../../topics/http/sessions.txt:473
msgid ""
"This setting is a global default and can be overwritten at a per-session "
"level by explicitly calling the :meth:`~backends.base.SessionBase."
"set_expiry` method of ``request.session`` as described above in `using "
"sessions in views`_."
msgstr ""

# 06000d01195843398330624dfd73c9d3
#: ../../topics/http/sessions.txt:479
msgid ""
"Some browsers (Chrome, for example) provide settings that allow users to "
"continue browsing sessions after closing and re-opening the browser. In some "
"cases, this can interfere with the :setting:"
"`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting and prevent sessions from expiring "
"on browser close. Please be aware of this while testing Django applications "
"which have the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting enabled."
msgstr ""

# f6c698fb688d42a082b13264a5d7dcea
#: ../../topics/http/sessions.txt:488
msgid "Clearing the session store"
msgstr ""

# b2424fa8e26d470da8058ee151a0dcd9
#: ../../topics/http/sessions.txt:490
msgid ""
"As users create new sessions on your website, session data can accumulate in "
"your session store. If you're using the database backend, the "
"``django_session`` database table will grow. If you're using the file "
"backend, your temporary directory will contain an increasing number of files."
msgstr ""

# 70ed9daac96c42b294c791265f053ff4
#: ../../topics/http/sessions.txt:495
msgid ""
"To understand this problem, consider what happens with the database backend. "
"When a user logs in, Django adds a row to the ``django_session`` database "
"table. Django updates this row each time the session data changes. If the "
"user logs out manually, Django deletes the row. But if the user does *not* "
"log out, the row never gets deleted. A similar process happens with the file "
"backend."
msgstr ""

# 4ea3f8ff0dc44cfd9fdfa7aeef50cd9a
#: ../../topics/http/sessions.txt:501
msgid ""
"Django does *not* provide automatic purging of expired sessions. Therefore, "
"it's your job to purge expired sessions on a regular basis. Django provides "
"a clean-up management command for this purpose: :djadmin:`clearsessions`. "
"It's recommended to call this command on a regular basis, for example as a "
"daily cron job."
msgstr ""

# 9bc2512a298647e79d8266a9681370bd
#: ../../topics/http/sessions.txt:507
msgid ""
"Note that the cache backend isn't vulnerable to this problem, because caches "
"automatically delete stale data. Neither is the cookie backend, because the "
"session data is stored by the users' browsers."
msgstr ""

# 74baeff1a6644e3d8bb6050da7d053d1
#: ../../topics/http/sessions.txt:512
msgid "Settings"
msgstr ""

# 2e8ba1a20d4643aa90f35bb8c2a3e7dd
#: ../../topics/http/sessions.txt:514
msgid ""
"A few :doc:`Django settings </ref/settings>` give you control over session "
"behavior:"
msgstr ""

# 28b2d90ec0564e8fab9335722e68e187
#: ../../topics/http/sessions.txt:518
msgid "SESSION_ENGINE"
msgstr ""

# 8d0437b7f7bc42168c4f4ade2e300e74
#: ../../topics/http/sessions.txt:520
msgid "Default: ``django.contrib.sessions.backends.db``"
msgstr ""

# 7592b0e7ff6d4a25a5ecc406b84be96f
#: ../../topics/http/sessions.txt:522
msgid "Controls where Django stores session data. Valid values are:"
msgstr ""

# d2ff4c03796d452f85a0e715650c5df9
#: ../../topics/http/sessions.txt:524
msgid "``'django.contrib.sessions.backends.db'``"
msgstr ""

# 7914d830ec5e43a3a3348b2a1c1547b2
#: ../../topics/http/sessions.txt:525
msgid "``'django.contrib.sessions.backends.file'``"
msgstr ""

# 11c9331086994b45a5c03c5bc6ae3d7d
#: ../../topics/http/sessions.txt:526
msgid "``'django.contrib.sessions.backends.cache'``"
msgstr ""

# 8c72d04f20714779ab90f5d0417781a2
#: ../../topics/http/sessions.txt:527
msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr ""

# 85b3c1e2e32b4d5983b6161c2482a27a
#: ../../topics/http/sessions.txt:528
msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr ""

# 38d6ddf351fd4a5191d3861618401387
#: ../../topics/http/sessions.txt:530
msgid "See `configuring the session engine`_ for more details."
msgstr ""

# 6b9f9dbfc5ba48658a4101df46700515
#: ../../topics/http/sessions.txt:533
msgid "SESSION_FILE_PATH"
msgstr ""

# 34b859d19dbe42a58e530b716d42bf9c
#: ../../topics/http/sessions.txt:535
msgid "Default: ``/tmp/``"
msgstr ""

# 8b809c4461004964a7e2bfaf67ebbfbb
#: ../../topics/http/sessions.txt:537
msgid ""
"If you're using file-based session storage, this sets the directory in which "
"Django will store session data."
msgstr ""

# 3bfface60232409f990345c9fd0b952a
#: ../../topics/http/sessions.txt:541
msgid "SESSION_COOKIE_AGE"
msgstr ""

# f6b47d2dab974747b9ea577baa5040f6
#: ../../topics/http/sessions.txt:543
msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr ""

# 46cbac27f5b24dc59e029cbc4cbab3fd
#: ../../topics/http/sessions.txt:545
msgid "The age of session cookies, in seconds."
msgstr ""

# 709f127c5bb846459a96030810df22af
#: ../../topics/http/sessions.txt:548
msgid "SESSION_COOKIE_DOMAIN"
msgstr ""

# 89fa53d80d214b20805d9ecee39912e2
#: ../../topics/http/sessions.txt:550
msgid "Default: ``None``"
msgstr ""

# 4ac21e0d37124ad2a241e83741a4ca71
#: ../../topics/http/sessions.txt:552
msgid ""
"The domain to use for session cookies. Set this to a string such as ``\"."
"example.com\"`` (note the leading dot!) for cross-domain cookies, or use "
"``None`` for a standard domain cookie."
msgstr ""

# 9c93cbbdbdc7492d91f7f908074aa1ec
#: ../../topics/http/sessions.txt:557
msgid "SESSION_COOKIE_HTTPONLY"
msgstr ""

# 6e27d45f40904f49a72bca8dabf6bef5
#: ../../topics/http/sessions.txt:559
msgid "Default: ``True``"
msgstr ""

# fc0ad98a1a5e4d61b157136fc86eaf94
#: ../../topics/http/sessions.txt:561
msgid ""
"Whether to use HTTPOnly flag on the session cookie. If this is set to "
"``True``, client-side JavaScript will not to be able to access the session "
"cookie."
msgstr ""

# a0b1f1a0669d4fda97ed0f545c831f6c
#: ../../topics/http/sessions.txt:565
msgid ""
"HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not "
"part of the :rfc:`2109` standard for cookies, and it isn't honored "
"consistently by all browsers. However, when it is honored, it can be a "
"useful way to mitigate the risk of client side script accessing the "
"protected cookie data."
msgstr ""

# 9e4a389b46d8483aa7660d0fc630a3fe
#: ../../topics/http/sessions.txt:577
msgid "SESSION_COOKIE_NAME"
msgstr ""

# 31ceb9fc32444d1cb0f24e2ba65c130b
#: ../../topics/http/sessions.txt:579
msgid "Default: ``'sessionid'``"
msgstr ""

# b1457dffb76d4580a027b7fdae7e1881
#: ../../topics/http/sessions.txt:581
msgid ""
"The name of the cookie to use for sessions. This can be whatever you want."
msgstr ""

# f4ded455e1854a9da01bca3f0d24c61c
#: ../../topics/http/sessions.txt:584
msgid "SESSION_COOKIE_PATH"
msgstr ""

# 8df7b0f6a7b3470384b57be6838df664
#: ../../topics/http/sessions.txt:586
msgid "Default: ``'/'``"
msgstr ""

# 947c3118628f4d2dac93fc883a862313
#: ../../topics/http/sessions.txt:588
msgid ""
"The path set on the session cookie. This should either match the URL path of "
"your Django installation or be parent of that path."
msgstr ""

# 4ad35515a35547f6b443d265426b73e7
#: ../../topics/http/sessions.txt:591
msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths, and each instance will only "
"see its own session cookie."
msgstr ""

# 37abb802602547dcbf24a193da1cad99
#: ../../topics/http/sessions.txt:596
msgid "SESSION_COOKIE_SECURE"
msgstr ""

# cac2f423e45d4b88bddf411609b1f1f3
#: ../../topics/http/sessions.txt:600
msgid ""
"Whether to use a secure cookie for the session cookie. If this is set to "
"``True``, the cookie will be marked as \"secure,\" which means browsers may "
"ensure that the cookie is only sent under an HTTPS connection."
msgstr ""

# be8a9216c4af46758b65d0d4bb4b6f4c
#: ../../topics/http/sessions.txt:605
msgid "SESSION_EXPIRE_AT_BROWSER_CLOSE"
msgstr ""

# 3f4bacceb4064b7296ecd1b732911885
#: ../../topics/http/sessions.txt:609
msgid ""
"Whether to expire the session when the user closes his or her browser. See "
"\"Browser-length sessions vs. persistent sessions\" above."
msgstr ""

# e1bf6e9ea8d74a0e99f742d091944d28
#: ../../topics/http/sessions.txt:613
msgid "SESSION_SAVE_EVERY_REQUEST"
msgstr ""

# 57188c795af847e48efa84ea58e58830
#: ../../topics/http/sessions.txt:617
msgid ""
"Whether to save the session data on every request. If this is ``False`` "
"(default), then the session data will only be saved if it has been modified "
"-- that is, if any of its dictionary values have been assigned or deleted."
msgstr ""

# ae1f4e660558408ca017925802a4e965
#: ../../topics/http/sessions.txt:624
msgid "Technical details"
msgstr ""

# 2ade1dad22b74532b0a4989dfe9a42a7
#: ../../topics/http/sessions.txt:708
msgid ""
"The session dictionary accepts any :mod:`json` serializable value when "
"using :class:`~django.contrib.sessions.serializers.JSONSerializer` or any "
"pickleable Python object when using :class:`~django.contrib.sessions."
"serializers.PickleSerializer`. See the :mod:`pickle` module for more "
"information."
msgstr ""

# 6c5b9e501bc44e7bb6b76950d1daa6fc
#: ../../topics/http/sessions.txt:629
msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""

# 2262b15126ef4cbe82f6bc7566201f9c
#: ../../topics/http/sessions.txt:631
msgid ""
"Django only sends a cookie if it needs to. If you don't set any session "
"data, it won't send a session cookie."
msgstr ""

# a9c8d7243c524b6994c8ed5a47442963
#: ../../topics/http/sessions.txt:635
msgid "Session IDs in URLs"
msgstr ""

# 9ef3589db17f4a418f63f0027c83211c
#: ../../topics/http/sessions.txt:637
msgid ""
"The Django sessions framework is entirely, and solely, cookie-based. It does "
"not fall back to putting session IDs in URLs as a last resort, as PHP does. "
"This is an intentional design decision. Not only does that behavior make "
"URLs ugly, it makes your site vulnerable to session-ID theft via the "
"\"Referer\" header."
msgstr ""

# 7c91e32fc1c84b85886d2dc4f3b7bc0b
#: ../../topics/http/shortcuts.txt:3
msgid "Django shortcut functions"
msgstr ""

# 54c7d6051d3a4f6185c7743e882b89cd
#: ../../topics/http/shortcuts.txt:11
msgid ""
"The package ``django.shortcuts`` collects helper functions and classes that "
"\"span\" multiple levels of MVC. In other words, these functions/classes "
"introduce controlled coupling for convenience's sake."
msgstr ""

# 66a8b511b33947aebdd1b744a12f3132
#: ../../topics/http/shortcuts.txt:16
msgid "``render``"
msgstr ""

# 67a2c2e19550418c9004d4beea5c9da2
#: ../../topics/http/shortcuts.txt:20
msgid ""
"Combines a given template with a given context dictionary and returns an :"
"class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

# 7c5b5d6ca803467b8d1bcd7ad986e3f5
#: ../../topics/http/shortcuts.txt:23
msgid ""
":func:`render()` is the same as a call to :func:`render_to_response()` with "
"a `context_instance` argument that forces the use of a :class:`~django."
"template.RequestContext`."
msgstr ""

# bf1a5cee68ae415098850cfc8698d1e6
# 24cfebc7e3f14ad6bdd7a2a4a87626b6
# fadabb8dcb6e42dcaf671a852284b966
# 17a7247e9c144105b558ff2221407494
# ac4d1229362645a7a937142e9823bd5b
#: ../../topics/http/shortcuts.txt:28 ../../topics/http/shortcuts.txt:99
#: ../../topics/http/shortcuts.txt:236 ../../topics/http/shortcuts.txt:282
#: ../../topics/pagination.txt:143
msgid "Required arguments"
msgstr ""

# a3803b5d4292434b8f9ffbb2a5d92f0b
#: ../../topics/http/shortcuts.txt:31
msgid "``request``"
msgstr ""

# d6a89793d66645fab12ba77a14bcb680
#: ../../topics/http/shortcuts.txt:31
msgid "The request object used to generate this response."
msgstr ""

# d2b55a77288f45578666482b48e21b30
# 89abe4bab12f4d76977cba28033c4e1a
#: ../../topics/http/shortcuts.txt:34 ../../topics/http/shortcuts.txt:105
msgid "``template_name``"
msgstr ""

# b371163c3eaf43cca39ea70557f1edc3
#: ../../topics/http/shortcuts.txt:34
msgid "The full name of a template to use or sequence of template names."
msgstr ""

# d45c51d259464e12a266e825fc60602a
# 395def0f14654090a6e2b05b16f1e21e
# e26f42e7e89741fdaab559806319c985
#: ../../topics/http/shortcuts.txt:37 ../../topics/http/shortcuts.txt:108
#: ../../topics/pagination.txt:154
msgid "Optional arguments"
msgstr ""

# 43f792ccfde64d58ac7ff1e4f3b2a7b5
# 3c853da49b924a93a5ca35c800e3570e
#: ../../topics/http/shortcuts.txt:42 ../../topics/http/shortcuts.txt:113
msgid "``dictionary``"
msgstr ""

# c8edebcb78014707b144d4d3e0c42cc8
# 72a0bd93f7ad4c6786147474c1a9c7af
#: ../../topics/http/shortcuts.txt:40 ../../topics/http/shortcuts.txt:111
msgid ""
"A dictionary of values to add to the template context. By default, this is "
"an empty dictionary. If a value in the dictionary is callable, the view will "
"call it just before rendering the template."
msgstr ""

# dc0818c233ae4564b440ae1ffbc397f7
# a42e641b29b84ea78766ad5d2a60fc4c
#: ../../topics/http/shortcuts.txt:47 ../../topics/http/shortcuts.txt:125
msgid "``context_instance``"
msgstr ""

# b70b0518b47a4d509d361f7d8c0d2a07
#: ../../topics/http/shortcuts.txt:45
msgid ""
"The context instance to render the template with. By default, the template "
"will be rendered with a ``RequestContext`` instance (filled with values from "
"``request`` and ``dictionary``)."
msgstr ""

# 5d012f21fbaf40cbb88191c803a87987
# 839cc7a189b24674a975bf23930c8601
#: ../../topics/http/shortcuts.txt:54 ../../topics/http/shortcuts.txt:133
msgid "``content_type``"
msgstr ""

# 9d0699c6e9b240e3b87cd3ce0778d7b5
# 6a59f9d54a214a7c9dd91e60137d7772
#: ../../topics/http/shortcuts.txt:50 ../../topics/http/shortcuts.txt:128
msgid ""
"The MIME type to use for the resulting document. Defaults to the value of "
"the :setting:`DEFAULT_CONTENT_TYPE` setting."
msgstr ""

# 245e45999b454131b9f3eca7c6f2a3ff
#: ../../topics/http/shortcuts.txt:57
msgid "``status``"
msgstr ""

# 87472dfee9f9420cb14980175c68f7bd
#: ../../topics/http/shortcuts.txt:57
msgid "The status code for the response. Defaults to ``200``."
msgstr ""

# 8e2f10d402ad4645a7975db1dbfabc17
#: ../../topics/http/shortcuts.txt:62
msgid "``current_app``"
msgstr ""

# c94232ce11934fc89bba7d17df80a12e
#: ../../topics/http/shortcuts.txt:60
msgid ""
"A hint indicating which application contains the current view. See the :ref:"
"`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>` "
"for more information."
msgstr ""

# 68a065644e5f48c3a7720298e811d4eb
# e500a16da0514314b73497f1997b7c37
# 82c1fbd4749645e6aafafb22c57f07c5
# b3e274786f3c4b92bb81e5837a354fc1
# 719e8391f6ce4859b1918b9a4a20d3f0
# faf90fd655a04c0180de1030f88309ed
# 460705aa106c4b8d9cdd4dc6c539e86c
# 3beaeac644dc45ec928c9a1c8876836d
# 3011babefeea49f883ca34a51611c375
#: ../../topics/http/shortcuts.txt:65 ../../topics/http/shortcuts.txt:136
#: ../../topics/http/shortcuts.txt:248 ../../topics/http/shortcuts.txt:294
#: ../../topics/http/urls.txt:66 ../../topics/http/urls.txt:749
#: ../../topics/pagination.txt:13 ../../topics/testing/advanced.txt:36
#: ../../topics/testing/overview.txt:816
msgid "Example"
msgstr ""

# 59b14dd60f5a408d8022291c6f186b77
# 831e5a46c29041598641d26cf01c21a0
#: ../../topics/http/shortcuts.txt:67 ../../topics/http/shortcuts.txt:138
msgid ""
"The following example renders the template ``myapp/index.html`` with the "
"MIME type :mimetype:`application/xhtml+xml`::"
msgstr ""

# de9581b7af574c4087388c7b7fdabedb
# 20f9b7bffd9a48178a0f1115a3c4680a
# a4de7e37712f40f4955ac61a38d280b8
# 54a5ef1a0f6c4db490625ef7568f18cb
#: ../../topics/http/shortcuts.txt:77 ../../topics/http/shortcuts.txt:148
#: ../../topics/http/shortcuts.txt:258 ../../topics/http/shortcuts.txt:303
msgid "This example is equivalent to::"
msgstr ""

# 67dc337fd56a4552ab843e41f16d9fcb
#: ../../topics/http/shortcuts.txt:91
msgid "``render_to_response``"
msgstr ""

# 1b3f4f43278942e4b2cdaffb98db8494
#: ../../topics/http/shortcuts.txt:95
msgid ""
"Renders a given template with a given context dictionary and returns an :"
"class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

# 6199f63ff48d4cd2abd7a2f12d94068b
#: ../../topics/http/shortcuts.txt:102
msgid ""
"The full name of a template to use or sequence of template names. If a "
"sequence is given, the first template that exists will be used. See the :ref:"
"`template loader documentation <ref-templates-api-the-python-api>` for more "
"information on how templates are found."
msgstr ""

# 9ff1fb0186194e029fd27f2af68e49e7
#: ../../topics/http/shortcuts.txt:116
msgid ""
"The context instance to render the template with. By default, the template "
"will be rendered with a :class:`~django.template.Context` instance (filled "
"with values from ``dictionary``). If you need to use :ref:`context "
"processors <subclassing-context-requestcontext>`, render the template with "
"a :class:`~django.template.RequestContext` instance instead. Your code might "
"look something like this::"
msgstr ""

# 142a25e9443141f9a67e1203f300ed8a
#: ../../topics/http/shortcuts.txt:161
msgid "``redirect``"
msgstr ""

# 3b43ed239b2e484e91f2717923ddb0a2
#: ../../topics/http/shortcuts.txt:165
msgid ""
"Returns an :class:`~django.http.HttpResponseRedirect` to the appropriate URL "
"for the arguments passed."
msgstr ""

# b3773892aba74693b167fe9fb5b538d2
#: ../../topics/http/shortcuts.txt:168
msgid "The arguments could be:"
msgstr ""

# dcfec5cd58154535a1d8b9b2e391ed92
#: ../../topics/http/shortcuts.txt:170
msgid "A model: the model's `get_absolute_url()` function will be called."
msgstr ""

# b553e62dcde64afb8e1c6e5ba961226c
#: ../../topics/http/shortcuts.txt:172
msgid ""
"A view name, possibly with arguments: :func:`urlresolvers.reverse <django."
"core.urlresolvers.reverse>` will be used to reverse-resolve the name."
msgstr ""

# b5d3eb1fcfe74c58a4cb8946dd54a0bc
#: ../../topics/http/shortcuts.txt:176
msgid "A URL, which will be used as-is for the redirect location."
msgstr ""

# 63d0078949e64bf6a99497ce94c58239
#: ../../topics/http/shortcuts.txt:178
msgid ""
"By default issues a temporary redirect; pass ``permanent=True`` to issue a "
"permanent redirect"
msgstr ""

# 78edf2d5d0624a34862f73f4f28c110b
#: ../../topics/http/shortcuts.txt:184
msgid "You can use the :func:`redirect` function in a number of ways."
msgstr ""

# 3b32b072226647f5aa4b834a63378def
#: ../../topics/http/shortcuts.txt:186
msgid ""
"By passing some object; that object's :meth:`~django.db.models.Model."
"get_absolute_url` method will be called to figure out the redirect URL::"
msgstr ""

# 99cca7fe6c6d4b47a3e0d28b828d214e
#: ../../topics/http/shortcuts.txt:197
msgid ""
"By passing the name of a view and optionally some positional or keyword "
"arguments; the URL will be reverse resolved using the :func:`~django.core."
"urlresolvers.reverse` method::"
msgstr ""

# 5ec32fa4234a4972b248943e7ec44bd1
#: ../../topics/http/shortcuts.txt:205
msgid "By passing a hardcoded URL to redirect to::"
msgstr ""

# 12189b7bdaf24324b9a91810f3567dc1
#: ../../topics/http/shortcuts.txt:211
msgid "This also works with full URLs::"
msgstr ""

# 557e792e17124354b9adeb1af5d96da9
#: ../../topics/http/shortcuts.txt:217
msgid ""
"By default, :func:`redirect` returns a temporary redirect. All of the above "
"forms accept a ``permanent`` argument; if set to ``True`` a permanent "
"redirect will be returned::"
msgstr ""

# cac4d2ccfe69413bae3ab4e66d8822b8
#: ../../topics/http/shortcuts.txt:227
msgid "``get_object_or_404``"
msgstr ""

# d69d423095f74ddb9c052495e5eb13ba
#: ../../topics/http/shortcuts.txt:231
msgid ""
"Calls :meth:`~django.db.models.query.QuerySet.get()` on a given model "
"manager, but it raises :class:`~django.http.Http404` instead of the model's :"
"class:`~django.core.exceptions.DoesNotExist` exception."
msgstr ""

# 0f9f46556e014aabb55ec342a3773a74
# b05ccbfa3d16422c908091ab7cacd220
#: ../../topics/http/shortcuts.txt:241 ../../topics/http/shortcuts.txt:287
msgid "``klass``"
msgstr ""

# 6b01caf904d8448da33bb967a40c5b6e
#: ../../topics/http/shortcuts.txt:239
msgid ""
"A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :"
"class:`~django.db.models.query.QuerySet` instance from which to get the "
"object."
msgstr ""

# 5e25e2f7448348d58affd7276715db68
# 2ff338ea28ae461a994335f95764c111
#: ../../topics/http/shortcuts.txt:245 ../../topics/http/shortcuts.txt:291
msgid "``**kwargs``"
msgstr ""

# d5366a7deedf4c4894f9b79dbef70c8a
# d0668940e8b945cf988b80075171e2a7
#: ../../topics/http/shortcuts.txt:244 ../../topics/http/shortcuts.txt:290
msgid ""
"Lookup parameters, which should be in the format accepted by ``get()`` and "
"``filter()``."
msgstr ""

# 1acd8bbaaa2f49a698b07d63fd2a8fb7
#: ../../topics/http/shortcuts.txt:250
msgid ""
"The following example gets the object with the primary key of 1 from "
"``MyModel``::"
msgstr ""

# 3d621bccc4514cf9b44ee2960d325df1
#: ../../topics/http/shortcuts.txt:268
msgid ""
"Note: As with ``get()``, a :class:`~django.core.exceptions."
"MultipleObjectsReturned` exception will be raised if more than one object is "
"found."
msgstr ""

# 7753ada750a14dc18ca2053850aba334
#: ../../topics/http/shortcuts.txt:273
msgid "``get_list_or_404``"
msgstr ""

# 6320d0c21c2b4d1ba008203f8473f2db
#: ../../topics/http/shortcuts.txt:277
msgid ""
"Returns the result of :meth:`~django.db.models.query.QuerySet.filter()` on a "
"given model manager cast to a list, raising :class:`~django.http.Http404` if "
"the resulting list is empty."
msgstr ""

# 6873a287941c47269bc8c81ed18b1fdb
#: ../../topics/http/shortcuts.txt:285
msgid ""
"A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :"
"class:`~django.db.models.query.QuerySet` instance from which to get the list."
msgstr ""

# 94e965d06a0a4161a02a808c02d7ec60
#: ../../topics/http/shortcuts.txt:296
msgid "The following example gets all published objects from ``MyModel``::"
msgstr ""

# 13bee62817f644408bb5a322cead27ca
#: ../../topics/http/shortcuts.txt:9
msgid "shortcuts"
msgstr ""

# 071fdd4d2f7b4f3ba53690942b723d3d
#: ../../topics/http/urls.txt:3
msgid "URL dispatcher"
msgstr ""

# 099d5f2e8a72433e84b010631d78f978
#: ../../topics/http/urls.txt:5
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django lets you design URLs however you want, with no framework "
"limitations."
msgstr ""

# 2f89f5bc21834816916e5e7405c88d72
#: ../../topics/http/urls.txt:9
msgid ""
"There's no ``.php`` or ``.cgi`` required, and certainly none of that "
"``0,2097,1-1-1928,00`` nonsense."
msgstr ""

# 0a0116ecfc134827959bd2ea8208a486
#: ../../topics/http/urls.txt:12
msgid ""
"See `Cool URIs don't change`_, by World Wide Web creator Tim Berners-Lee, "
"for excellent arguments on why URLs should be clean and usable."
msgstr ""

# 586ee4a9554f4d738432ec7efce99f93
#: ../../topics/http/urls.txt:20
msgid ""
"To design URLs for an app, you create a Python module informally called a "
"**URLconf** (URL configuration). This module is pure Python code and is a "
"simple mapping between URL patterns (simple regular expressions) to Python "
"functions (your views)."
msgstr ""

# 8f52a0659b37438f9a3a7a6dd65f01c8
#: ../../topics/http/urls.txt:25
msgid ""
"This mapping can be as short or as long as needed. It can reference other "
"mappings. And, because it's pure Python code, it can be constructed "
"dynamically."
msgstr ""

# c4d34640c5d542a7851f127e00872e12
#: ../../topics/http/urls.txt:37
msgid "How Django processes a request"
msgstr ""

# 8c5a2d3e4540402998fb63e0df7c455e
#: ../../topics/http/urls.txt:39
msgid ""
"When a user requests a page from your Django-powered site, this is the "
"algorithm the system follows to determine which Python code to execute:"
msgstr ""

# 587526aed44e4f149ccd8768bfa6f7e9
#: ../../topics/http/urls.txt:42
msgid ""
"Django determines the root URLconf module to use. Ordinarily, this is the "
"value of the :setting:`ROOT_URLCONF` setting, but if the incoming "
"``HttpRequest`` object has an attribute called ``urlconf`` (set by "
"middleware :ref:`request processing <request-middleware>`), its value will "
"be used in place of the :setting:`ROOT_URLCONF` setting."
msgstr ""

# 4b6bdcb0390343108a6efc0808fe381f
#: ../../topics/http/urls.txt:48
msgid ""
"Django loads that Python module and looks for the variable ``urlpatterns``. "
"This should be a Python list, in the format returned by the function :func:"
"`django.conf.urls.patterns`."
msgstr ""

# 36f8a02cd859401e9c47bb5f6bb50799
#: ../../topics/http/urls.txt:52
msgid ""
"Django runs through each URL pattern, in order, and stops at the first one "
"that matches the requested URL."
msgstr ""

# e9529ef13fc246cda534b11aa1fa7550
#: ../../topics/http/urls.txt:55
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function (or a :doc:`class based view </topics/"
"class-based-views/index>`). The view gets passed an :class:`~django.http."
"HttpRequest` as its first argument and any values captured in the regex as "
"remaining arguments."
msgstr ""

# 7edf19ca36a849d0acfe934a4caf0f53
#: ../../topics/http/urls.txt:61
msgid ""
"If no regex matches, or if an exception is raised during any point in this "
"process, Django invokes an appropriate error-handling view. See `Error "
"handling`_ below."
msgstr ""

# 8743eb0de256405183f00a8b71e37e96
#: ../../topics/http/urls.txt:68
msgid "Here's a sample URLconf::"
msgstr ""

# 7e6d1558192547caafa47c0578961276
#: ../../topics/http/urls.txt:81
msgid "To capture a value from the URL, just put parenthesis around it."
msgstr ""

# 3a85dd3901684cf6ab96419051d6b022
#: ../../topics/http/urls.txt:83
msgid ""
"There's no need to add a leading slash, because every URL has that. For "
"example, it's ``^articles``, not ``^/articles``."
msgstr ""

# 1ed0e9f6909c4600a5d8810a5d9c573b
#: ../../topics/http/urls.txt:86
msgid ""
"The ``'r'`` in front of each regular expression string is optional but "
"recommended. It tells Python that a string is \"raw\" -- that nothing in the "
"string should be escaped. See `Dive Into Python's explanation`_."
msgstr ""

# 578ded9ac99f49d5a1d9d323ec5ded46
#: ../../topics/http/urls.txt:90
msgid "Example requests:"
msgstr ""

# e91591ec7b554fda9c00256fd0671f69
#: ../../topics/http/urls.txt:92
msgid ""
"A request to ``/articles/2005/03/`` would match the third entry in the list. "
"Django would call the function ``news.views.month_archive(request, '2005', "
"'03')``."
msgstr ""

# c59a273a44e548e0b4b849611228dea6
#: ../../topics/http/urls.txt:96
msgid ""
"``/articles/2005/3/`` would not match any URL patterns, because the third "
"entry in the list requires two digits for the month."
msgstr ""

# 47693f6e72f249afba039c4c38ffff6a
#: ../../topics/http/urls.txt:99
msgid ""
"``/articles/2003/`` would match the first pattern in the list, not the "
"second one, because the patterns are tested in order, and the first one is "
"the first test to pass. Feel free to exploit the ordering to insert special "
"cases like this."
msgstr ""

# ce01bba328e24654a0744776c3f0210e
#: ../../topics/http/urls.txt:104
msgid ""
"``/articles/2003`` would not match any of these patterns, because each "
"pattern requires that the URL end with a slash."
msgstr ""

# cd03e599f74e413dac7132c9c0f88ecc
#: ../../topics/http/urls.txt:107
msgid ""
"``/articles/2003/03/03/`` would match the final pattern. Django would call "
"the function ``news.views.article_detail(request, '2003', '03', '03')``."
msgstr ""

# 3b6d4b11cf8d4fbb80977f097ff29f36
#: ../../topics/http/urls.txt:113
msgid "Named groups"
msgstr ""

# a2b6bd0fa10144ee8cd30af3f96d5608
#: ../../topics/http/urls.txt:115
msgid ""
"The above example used simple, *non-named* regular-expression groups (via "
"parenthesis) to capture bits of the URL and pass them as *positional* "
"arguments to a view. In more advanced usage, it's possible to use *named* "
"regular-expression groups to capture URL bits and pass them as *keyword* "
"arguments to a view."
msgstr ""

# 3986a2ac658b4e829d2e80a6821aa404
#: ../../topics/http/urls.txt:121
msgid ""
"In Python regular expressions, the syntax for named regular-expression "
"groups is ``(?P<name>pattern)``, where ``name`` is the name of the group and "
"``pattern`` is some pattern to match."
msgstr ""

# 1747ec2af62c455e966aba97f1ea4e72
#: ../../topics/http/urls.txt:125
msgid "Here's the above example URLconf, rewritten to use named groups::"
msgstr ""

# eb54a03cbdd64c6fad34de709cd5b9ae
#: ../../topics/http/urls.txt:134
msgid ""
"This accomplishes exactly the same thing as the previous example, with one "
"subtle difference: The captured values are passed to view functions as "
"keyword arguments rather than positional arguments. For example:"
msgstr ""

# b08fbebd21814c49b43b1429a4859f57
#: ../../topics/http/urls.txt:138
msgid ""
"A request to ``/articles/2005/03/`` would call the function ``news.views."
"month_archive(request, year='2005', month='03')``, instead of ``news.views."
"month_archive(request, '2005', '03')``."
msgstr ""

# d943801e4ac34771b5d90990ecdfe10d
#: ../../topics/http/urls.txt:142
msgid ""
"A request to ``/articles/2003/03/03/`` would call the function ``news.views."
"article_detail(request, year='2003', month='03', day='03')``."
msgstr ""

# 6662dec11a8e41538bded8890b72e64f
#: ../../topics/http/urls.txt:145
msgid ""
"In practice, this means your URLconfs are slightly more explicit and less "
"prone to argument-order bugs -- and you can reorder the arguments in your "
"views' function definitions. Of course, these benefits come at the cost of "
"brevity; some developers find the named-group syntax ugly and too verbose."
msgstr ""

# 47a6e11c1c094bd8af115ccb2b4469ad
#: ../../topics/http/urls.txt:151
msgid "The matching/grouping algorithm"
msgstr ""

# 75a786f233fd4ce28f4cfd17639894a7
#: ../../topics/http/urls.txt:153
msgid ""
"Here's the algorithm the URLconf parser follows, with respect to named "
"groups vs. non-named groups in a regular expression:"
msgstr ""

# e41a5392a96c46e7a6dc0a20a666ad18
#: ../../topics/http/urls.txt:156
msgid ""
"If there are any named arguments, it will use those, ignoring non-named "
"arguments."
msgstr ""

# 8a2316cf20904e9484c3150429129b2d
#: ../../topics/http/urls.txt:159
msgid ""
"Otherwise, it will pass all non-named arguments as positional arguments."
msgstr ""

# 09e9d3eb63074e54a51134dacd0706d2
#: ../../topics/http/urls.txt:161
msgid ""
"In both cases, any extra keyword arguments that have been given as per "
"`Passing extra options to view functions`_ (below) will also be passed to "
"the view."
msgstr ""

# e813ac776b6a4a3396fb1e5b15974699
#: ../../topics/http/urls.txt:165
msgid "What the URLconf searches against"
msgstr ""

# e5d7d234787d472990bf5193d7cc2dae
#: ../../topics/http/urls.txt:167
msgid ""
"The URLconf searches against the requested URL, as a normal Python string. "
"This does not include GET or POST parameters, or the domain name."
msgstr ""

# 62e7885129bc405e852cb751d5bede91
#: ../../topics/http/urls.txt:170
msgid ""
"For example, in a request to ``http://www.example.com/myapp/``, the URLconf "
"will look for ``myapp/``."
msgstr ""

# 0bdaceeebb774139802de0f4be8e0b69
#: ../../topics/http/urls.txt:173
msgid ""
"In a request to ``http://www.example.com/myapp/?page=3``, the URLconf will "
"look for ``myapp/``."
msgstr ""

# f8b4b045f5e540a7ab5ba89437ce3939
#: ../../topics/http/urls.txt:176
msgid ""
"The URLconf doesn't look at the request method. In other words, all request "
"methods -- ``POST``, ``GET``, ``HEAD``, etc. -- will be routed to the same "
"function for the same URL."
msgstr ""

# 440ed46c045f4204923060fd39b21934
#: ../../topics/http/urls.txt:181
msgid "Notes on capturing text in URLs"
msgstr ""

# 8da5cd331e46447cae28460fa9e869f4
#: ../../topics/http/urls.txt:183
msgid ""
"Each captured argument is sent to the view as a plain Python string, "
"regardless of what sort of match the regular expression makes. For example, "
"in this URLconf line::"
msgstr ""

# 0ee486e92f0546ea86c3180026ed06d9
#: ../../topics/http/urls.txt:189
msgid ""
"...the ``year`` argument to ``news.views.year_archive()`` will be a string, "
"not an integer, even though the ``\\d{4}`` will only match integer strings."
msgstr ""

# f3d6c2d7cf19434c9a06f8400184c230
#: ../../topics/http/urls.txt:192
msgid ""
"A convenient trick is to specify default parameters for your views' "
"arguments. Here's an example URLconf and view::"
msgstr ""

# 5755bfbdf1a0427a9db85d49c4efcad6
#: ../../topics/http/urls.txt:206
msgid ""
"In the above example, both URL patterns point to the same view -- ``blog."
"views.page`` -- but the first pattern doesn't capture anything from the URL. "
"If the first pattern matches, the ``page()`` function will use its default "
"argument for ``num``, ``\"1\"``. If the second pattern matches, ``page()`` "
"will use whatever ``num`` value was captured by the regex."
msgstr ""

# 0da4b3a82ed04cddbf00415d3dc6391d
#: ../../topics/http/urls.txt:213
msgid "Performance"
msgstr ""

# 81031ce327f748d4b9ed925fffccb3e9
#: ../../topics/http/urls.txt:215
msgid ""
"Each regular expression in a ``urlpatterns`` is compiled the first time it's "
"accessed. This makes the system blazingly fast."
msgstr ""

# 87b4cf4a9a67434081bba3e9c95e67db
#: ../../topics/http/urls.txt:219
msgid "Syntax of the urlpatterns variable"
msgstr ""

# f891a50123024d0a9b909a4d118ac2a7
#: ../../topics/http/urls.txt:221
msgid ""
"``urlpatterns`` should be a Python list, in the format returned by the "
"function :func:`django.conf.urls.patterns`. Always use ``patterns()`` to "
"create the ``urlpatterns`` variable."
msgstr ""

# 7036b58502514543833e2c9e8ed523fa
#: ../../topics/http/urls.txt:226
msgid "Error handling"
msgstr ""

# 93cdcdcf41f64e7f804c47d075337348
#: ../../topics/http/urls.txt:228
msgid ""
"When Django can't find a regex matching the requested URL, or when an "
"exception is raised, Django will invoke an error-handling view."
msgstr ""

# ff61938d575d47d48d82adb8c8715d49
#: ../../topics/http/urls.txt:231
msgid ""
"The views to use for these cases are specified by three variables. Their "
"default values should suffice for most projects, but further customization "
"is possible by assigning values to them."
msgstr ""

# e725016dba774cecbd81dca1f7b3668b
#: ../../topics/http/urls.txt:235
msgid ""
"See the documentation on :ref:`customizing error views <customizing-error-"
"views>` for the full details."
msgstr ""

# 37aaf8db86a045ae9f6849018ec4cbc0
#: ../../topics/http/urls.txt:238
msgid ""
"Such values can be set in your root URLconf. Setting these variables in any "
"other URLconf will have no effect."
msgstr ""

# 0357ebae74ea4d4a8d8efa6938883cab
#: ../../topics/http/urls.txt:241
msgid ""
"Values must be callables, or strings representing the full Python import "
"path to the view that should be called to handle the error condition at hand."
msgstr ""

# 809df929183c443ba2a5be1d2849b7a6
#: ../../topics/http/urls.txt:244
msgid "The variables are:"
msgstr ""

# 3e897990f5cc4af7879d65b7bc45c14e
#: ../../topics/http/urls.txt:246
msgid "``handler404`` -- See :data:`django.conf.urls.handler404`."
msgstr ""

# 80b2d0aab38a44e68169c8b87ebecb85
#: ../../topics/http/urls.txt:247
msgid "``handler500`` -- See :data:`django.conf.urls.handler500`."
msgstr ""

# 1d49d342abc64c2ab25b2214dff18773
#: ../../topics/http/urls.txt:248
msgid "``handler403`` -- See :data:`django.conf.urls.handler403`."
msgstr ""

# 31f51e7b7e414e4e892498909572666e
#: ../../topics/http/urls.txt:256
msgid "The view prefix"
msgstr ""

# b8fcea47873c4a79b28b4ca039ac1367
#: ../../topics/http/urls.txt:258
msgid ""
"You can specify a common prefix in your ``patterns()`` call, to cut down on "
"code duplication."
msgstr ""

# 31243db57df54bd2a166e25a39a77e83
#: ../../topics/http/urls.txt:261
msgid ""
"Here's the example URLconf from the :doc:`Django overview </intro/"
"overview>`::"
msgstr ""

# bde227618d7d49dd98f8b5407474de83
#: ../../topics/http/urls.txt:271
msgid ""
"In this example, each view has a common prefix -- ``'news.views'``. Instead "
"of typing that out for each entry in ``urlpatterns``, you can use the first "
"argument to the ``patterns()`` function to specify a prefix to apply to each "
"view function."
msgstr ""

# e610532f2138494aa150e096cd17d33b
#: ../../topics/http/urls.txt:276
msgid "With this in mind, the above example can be written more concisely as::"
msgstr ""

# 329d8bc9e3254d508da33533845100b0
#: ../../topics/http/urls.txt:286
msgid ""
"Note that you don't put a trailing dot (``\".\"``) in the prefix. Django "
"puts that in automatically."
msgstr ""

# c65f5a0e39054abebf6547a497c7e6bf
#: ../../topics/http/urls.txt:290
msgid "Multiple view prefixes"
msgstr ""

# 99d9de996a45401985dc085748a932cd
#: ../../topics/http/urls.txt:292
msgid ""
"In practice, you'll probably end up mixing and matching views to the point "
"where the views in your ``urlpatterns`` won't have a common prefix. However, "
"you can still take advantage of the view prefix shortcut to remove "
"duplication. Just add multiple ``patterns()`` objects together, like this:"
msgstr ""

# 8b7f4195d87747b49eb55324dfb5f956
#: ../../topics/http/urls.txt:297
msgid "Old::"
msgstr ""

# 16460b879c574cc8ab87952e9741b755
#: ../../topics/http/urls.txt:307
msgid "New::"
msgstr ""

# f693ab606aeb4cf1ad07fff70a179a4a
#: ../../topics/http/urls.txt:323
msgid "Including other URLconfs"
msgstr ""

# 6c7bc7dd716845ff91fa1824f31d10f1
#: ../../topics/http/urls.txt:325
msgid ""
"At any point, your ``urlpatterns`` can \"include\" other URLconf modules. "
"This essentially \"roots\" a set of URLs below other ones."
msgstr ""

# e0dd8ea3d2c94d7396dc772a46735c58
#: ../../topics/http/urls.txt:328
msgid ""
"For example, here's an excerpt of the URLconf for the `Django Web site`_ "
"itself. It includes a number of other URLconfs::"
msgstr ""

# 001a9067221f4bdc9c1bbad22ad18c30
#: ../../topics/http/urls.txt:342
msgid ""
"Note that the regular expressions in this example don't have a ``$`` (end-of-"
"string match character) but do include a trailing slash. Whenever Django "
"encounters ``include()`` (:func:`django.conf.urls.include()`), it chops off "
"whatever part of the URL matched up to that point and sends the remaining "
"string to the included URLconf for further processing."
msgstr ""

# 789ec6a5e4874e28864b69473cc27bfd
#: ../../topics/http/urls.txt:348
msgid ""
"Another possibility is to include additional URL patterns not by specifying "
"the URLconf Python module defining them as the ``include()`` argument but by "
"using directly the pattern list as returned by :func:`~django.conf.urls."
"patterns` instead. For example, consider this URLconf::"
msgstr ""

# af5257f288b3412bb242d31ada278069
#: ../../topics/http/urls.txt:366
msgid ""
"In this example, the ``/credit/reports/`` URL will be handled by the "
"``credit.views.report()`` Django view."
msgstr ""

# 1606e1fb9ec04ef6845bbcf046908ebe
#: ../../topics/http/urls.txt:369
msgid ""
"This can be used to remove redundancy from URLconfs where a single pattern "
"prefix is used repeatedly. For example, consider this URLconf::"
msgstr ""

# 7c329abb34824b489418c0109879c4e3
#: ../../topics/http/urls.txt:381
msgid ""
"We can improve this by stating the common path prefix only once and grouping "
"the suffixes that differ::"
msgstr ""

# 6c3c0ca5a40344a5a588677a942de093
#: ../../topics/http/urls.txt:398
msgid "Captured parameters"
msgstr ""

# f9ada0d806dd4d949c331eeb635f2dd1
#: ../../topics/http/urls.txt:374
msgid ""
"An included URLconf receives any captured parameters from parent URLconfs, "
"so the following example is valid::"
msgstr ""

# 574a1b95d2534f3eabff3100e2942866
#: ../../topics/http/urls.txt:388
msgid ""
"In the above example, the captured ``\"username\"`` variable is passed to "
"the included URLconf, as expected."
msgstr ""

# 322aaaecc352461a8f15737011b53724
#: ../../topics/http/urls.txt:394
msgid "Passing extra options to view functions"
msgstr ""

# bd00e85535ca49bf97aea64d07df6644
#: ../../topics/http/urls.txt:396
msgid ""
"URLconfs have a hook that lets you pass extra arguments to your view "
"functions, as a Python dictionary."
msgstr ""

# f1fbfe9be45b40bdbd4381341bfdf1bd
#: ../../topics/http/urls.txt:399
msgid ""
"The :func:`django.conf.urls.url` function can take an optional third "
"argument which should be a dictionary of extra keyword arguments to pass to "
"the view function."
msgstr ""

# 1ba5e7f9d9ac49ec87dd46e6dc9ee526
#: ../../topics/http/urls.txt:409
msgid ""
"In this example, for a request to ``/blog/2005/``, Django will call ``blog."
"views.year_archive(request, year='2005', foo='bar')``."
msgstr ""

# e7af9b3d501c49358a92f80ae9e5438d
#: ../../topics/http/urls.txt:412
msgid ""
"This technique is used in the :doc:`syndication framework </ref/contrib/"
"syndication>` to pass metadata and options to views."
msgstr ""

# c84cdd281786430daee81a653658a1c6
#: ../../topics/http/urls.txt:442
msgid "Dealing with conflicts"
msgstr ""

# 2dc23efc875d4b4bb2662a8a65163b10
#: ../../topics/http/urls.txt:444
msgid ""
"It's possible to have a URL pattern which captures named keyword arguments, "
"and also passes arguments with the same names in its dictionary of extra "
"arguments. When this happens, the arguments in the dictionary will be used "
"instead of the arguments captured in the URL."
msgstr ""

# da1e4ea67cb1404bacf193f36e0ae004
#: ../../topics/http/urls.txt:424
msgid "Passing extra options to ``include()``"
msgstr ""

# ed26308dde09485f81d0a0e1fd4d3a75
#: ../../topics/http/urls.txt:426
msgid ""
"Similarly, you can pass extra options to :func:`~django.conf.urls.include`. "
"When you pass extra options to ``include()``, *each* line in the included "
"URLconf will be passed the extra options."
msgstr ""

# 920aab4471304dafb31cfd38ba8f194c
#: ../../topics/http/urls.txt:430
msgid "For example, these two URLconf sets are functionally identical:"
msgstr ""

# 93a5a0649a1140d482d7b23766ed38fb
#: ../../topics/http/urls.txt:432
msgid "Set one::"
msgstr ""

# 655e554289a74452a7c727fd6d02368f
#: ../../topics/http/urls.txt:445
msgid "Set two::"
msgstr ""

# 48fd63198a83402ea2a4d1da1243121a
#: ../../topics/http/urls.txt:458
msgid ""
"Note that extra options will *always* be passed to *every* line in the "
"included URLconf, regardless of whether the line's view actually accepts "
"those options as valid. For this reason, this technique is only useful if "
"you're certain that every view in the included URLconf accepts the extra "
"options you're passing."
msgstr ""

# 0c5e49b6f5824796bc785cf3b55b6bd6
#: ../../topics/http/urls.txt:464
msgid "Passing callable objects instead of strings"
msgstr ""

# 624a23f61a4144a8b098f70ec08184e7
#: ../../topics/http/urls.txt:466
msgid ""
"Some developers find it more natural to pass the actual Python function "
"object rather than a string containing the path to its module. This "
"alternative is supported -- you can pass any callable object as the view."
msgstr ""

# 7e97db8058f44f1d8298cc64c80fd1be
#: ../../topics/http/urls.txt:470
msgid "For example, given this URLconf in \"string\" notation::"
msgstr ""

# 9cc2ae61c68840d79e2cf4833603597b
#: ../../topics/http/urls.txt:478
msgid ""
"You can accomplish the same thing by passing objects rather than strings. "
"Just be sure to import the objects::"
msgstr ""

# 52023de764c348fd8c88c3f164ffd7a6
#: ../../topics/http/urls.txt:489
msgid ""
"The following example is functionally identical. It's just a bit more "
"compact because it imports the module that contains the views, rather than "
"importing each view individually::"
msgstr ""

# 1f6a38fc66e0416d97d10562afa5a2de
#: ../../topics/http/urls.txt:501
msgid "The style you use is up to you."
msgstr ""

# 3361ae0b7f08494fbc7749cc863c8cf5
#: ../../topics/http/urls.txt:503
msgid ""
"Note that if you use this technique -- passing objects rather than strings "
"-- the view prefix (as explained in \"The view prefix\" above) will have no "
"effect."
msgstr ""

# ccdb45b739134df4838eedfa9ea0eb60
#: ../../topics/http/urls.txt:506
msgid ""
"Note that :doc:`class based views</topics/class-based-views/index>` must be "
"imported::"
msgstr ""

# 50ce4d0373dc47edbca1b4bc89e6ab60
#: ../../topics/http/urls.txt:516
msgid "Reverse resolution of URLs"
msgstr ""

# 08b63bf346a04853b6feb56f117551ed
#: ../../topics/http/urls.txt:518
msgid ""
"A common need when working on a Django project is the possibility to obtain "
"URLs in their final forms either for embedding in generated content (views "
"and assets URLs, URLs shown to the user, etc.) or for handling of the "
"navigation flow on the server side (redirections, etc.)"
msgstr ""

# fade0de34033409bba35dd67552c4f6b
#: ../../topics/http/urls.txt:523
msgid ""
"It is strongly desirable not having to hard-code these URLs (a laborious, "
"non-scalable and error-prone strategy) or having to devise ad-hoc mechanisms "
"for generating URLs that are parallel to the design described by the URLconf "
"and as such in danger of producing stale URLs at some point."
msgstr ""

# c4d5af00d04b45f2ba6a21afbd26a42c
#: ../../topics/http/urls.txt:528
msgid ""
"In other words, what's needed is a DRY mechanism. Among other advantages it "
"would allow evolution of the URL design without having to go all over the "
"project source code to search and replace outdated URLs."
msgstr ""

# 849d172e227c4e468386769681225b04
#: ../../topics/http/urls.txt:532
msgid ""
"The piece of information we have available as a starting point to get a URL "
"is an identification (e.g. the name) of the view in charge of handling it, "
"other pieces of information that necessarily must participate in the lookup "
"of the right URL are the types (positional, keyword) and values of the view "
"arguments."
msgstr ""

# c6e21f77e3374425991deb1a95cbcd2d
#: ../../topics/http/urls.txt:537
msgid ""
"Django provides a solution such that the URL mapper is the only repository "
"of the URL design. You feed it with your URLconf and then it can be used in "
"both directions:"
msgstr ""

# 5ed19aaef27b437d9d06b4e98afcd274
#: ../../topics/http/urls.txt:541
msgid ""
"Starting with a URL requested by the user/browser, it calls the right Django "
"view providing any arguments it might need with their values as extracted "
"from the URL."
msgstr ""

# b45f31bb80324f88b12a90cbfc192c68
#: ../../topics/http/urls.txt:545
msgid ""
"Starting with the identification of the corresponding Django view plus the "
"values of arguments that would be passed to it, obtain the associated URL."
msgstr ""

# b4e1ed29bce14c14af14f78b55578c18
#: ../../topics/http/urls.txt:548
msgid ""
"The first one is the usage we've been discussing in the previous sections. "
"The second one is what is known as *reverse resolution of URLs*, *reverse "
"URL matching*, *reverse URL lookup*, or simply *URL reversing*."
msgstr ""

# 33c9511cb84f4ce794ee8faa50016073
#: ../../topics/http/urls.txt:552
msgid ""
"Django provides tools for performing URL reversing that match the different "
"layers where URLs are needed:"
msgstr ""

# 8ffca7c86edb475aa2d344ad86a82402
#: ../../topics/http/urls.txt:555
msgid "In templates: Using the :ttag:`url` template tag."
msgstr ""

# 4efd41a2bd35427c87ef0918151d5c9d
#: ../../topics/http/urls.txt:557
msgid ""
"In Python code: Using the :func:`django.core.urlresolvers.reverse` function."
msgstr ""

# 34dc02a373154bbb9ab322f723db69ac
#: ../../topics/http/urls.txt:560
msgid ""
"In higher level code related to handling of URLs of Django model instances: "
"The :meth:`~django.db.models.Model.get_absolute_url` method."
msgstr ""

# b803d610d0a746bfad9c8f91a60f8f0a
#: ../../topics/http/urls.txt:566
msgid "Consider again this URLconf entry::"
msgstr ""

# f833f23a4dd14b249eb73bf043ebd952
#: ../../topics/http/urls.txt:576
msgid ""
"According to this design, the URL for the archive corresponding to year "
"*nnnn* is ``/articles/nnnn/``."
msgstr ""

# 40d49bce5e874042b6f049aa6c51b296
#: ../../topics/http/urls.txt:579
msgid "You can obtain these in template code by using:"
msgstr ""

# 00aaaa2d48bd4f3dbcf910ae2963a406
#: ../../topics/http/urls.txt:591
msgid "Or in Python code::"
msgstr ""

# d99f9e0ce0c842f683e6b77b706ecd2f
#: ../../topics/http/urls.txt:602
msgid ""
"If, for some reason, it was decided that the URLs where content for yearly "
"article archives are published at should be changed then you would only need "
"to change the entry in the URLconf."
msgstr ""

# f07d34e21a064755bdee377ed02be9bd
#: ../../topics/http/urls.txt:606
msgid ""
"In some scenarios where views are of a generic nature, a many-to-one "
"relationship might exist between URLs and views. For these cases the view "
"name isn't a good enough identificator for it when it comes the time of "
"reversing URLs. Read the next section to know about the solution Django "
"provides for this."
msgstr ""

# a340fc46829f4b3f96099340513e0d25
#: ../../topics/http/urls.txt:614
msgid "Naming URL patterns"
msgstr ""

# 773dad84d35e4a759ad2fffc07675698
#: ../../topics/http/urls.txt:616
msgid ""
"It's fairly common to use the same view function in multiple URL patterns in "
"your URLconf. For example, these two URL patterns both point to the "
"``archive`` view::"
msgstr ""

# 763ad2972bdd4dd080571ff0b9752b55
#: ../../topics/http/urls.txt:625
msgid ""
"This is completely valid, but it leads to problems when you try to do "
"reverse URL matching (through the :func:`~django.core.urlresolvers.reverse` "
"function or the :ttag:`url` template tag). Continuing this example, if you "
"wanted to retrieve the URL for the ``archive`` view, Django's reverse URL "
"matcher would get confused, because *two* URL patterns point at that view."
msgstr ""

# eaafe3595588496685244d4ab9f174ce
#: ../../topics/http/urls.txt:631
msgid ""
"To solve this problem, Django supports **named URL patterns**. That is, you "
"can give a name to a URL pattern in order to distinguish it from other "
"patterns using the same view and parameters. Then, you can use this name in "
"reverse URL matching."
msgstr ""

# 8a47f425f9db410f9e094d50e299c57a
#: ../../topics/http/urls.txt:636
msgid "Here's the above example, rewritten to use named URL patterns::"
msgstr ""

# a59e0a9d437d4343a30fcaad62cd10b2
#: ../../topics/http/urls.txt:643
msgid ""
"With these names in place (``full-archive`` and ``arch-summary``), you can "
"target each pattern individually by using its name:"
msgstr ""

# e9447187e08d4be981e36952cb270455
#: ../../topics/http/urls.txt:651
msgid ""
"Even though both URL patterns refer to the ``archive`` view here, using the "
"``name`` parameter to :func:`django.conf.urls.url` allows you to tell them "
"apart in templates."
msgstr ""

# 30841e1cab044451b6e031f2513a5a07
#: ../../topics/http/urls.txt:655
msgid ""
"The string used for the URL name can contain any characters you like. You "
"are not restricted to valid Python names."
msgstr ""

# fcf176536abb47a29712f8ad4deb37b5
#: ../../topics/http/urls.txt:660
msgid ""
"When you name your URL patterns, make sure you use names that are unlikely "
"to clash with any other application's choice of names. If you call your URL "
"pattern ``comment``, and another application does the same thing, there's no "
"guarantee which URL will be inserted into your template when you use this "
"name."
msgstr ""

# 44bfb62134f84e4ca95b508b4ee05ed4
#: ../../topics/http/urls.txt:666
msgid ""
"Putting a prefix on your URL names, perhaps derived from the application "
"name, will decrease the chances of collision. We recommend something like "
"``myapp-comment`` instead of ``comment``."
msgstr ""

# dd7eb5cec0ee4a49ad3e57c391092ec1
#: ../../topics/http/urls.txt:673
msgid "URL namespaces"
msgstr ""

# 3b996630e5ea4553a312c6429781a518
#: ../../topics/http/urls.txt:676
msgid "Introduction"
msgstr ""

# 2e81a4c38d4a4fbe8e6665b07c9a1399
#: ../../topics/http/urls.txt:678
msgid ""
"When you need to deploy multiple instances of a single application, it can "
"be helpful to be able to differentiate between instances. This is especially "
"important when using :ref:`named URL patterns <naming-url-patterns>`, since "
"multiple instances of a single application will share named URLs. Namespaces "
"provide a way to tell these named URLs apart."
msgstr ""

# f551352a98af443993197cc18634d44e
#: ../../topics/http/urls.txt:684
msgid "A URL namespace comes in two parts, both of which are strings:"
msgstr ""

# baf20692e93e4c238231f7d85ea2cc42
#: ../../topics/http/urls.txt:687
msgid "application namespace"
msgstr ""

# 70f5a36eff644aecb7d516fc0eb9cf97
#: ../../topics/http/urls.txt:689
msgid ""
"This describes the name of the application that is being deployed. Every "
"instance of a single application will have the same application namespace. "
"For example, Django's admin application has the somewhat predictable "
"application namespace of ``'admin'``."
msgstr ""

# 44630e77977643b59153085d96dfbb23
#: ../../topics/http/urls.txt:693
msgid "instance namespace"
msgstr ""

# c81efa59ee174cf08e8baaf6efcc03e2
#: ../../topics/http/urls.txt:695
msgid ""
"This identifies a specific instance of an application. Instance namespaces "
"should be unique across your entire project. However, an instance namespace "
"can be the same as the application namespace. This is used to specify a "
"default instance of an application. For example, the default Django Admin "
"instance has an instance namespace of ``'admin'``."
msgstr ""

# 2e2afcc78b8846978b1ac38ad613d9b2
#: ../../topics/http/urls.txt:701
msgid ""
"Namespaced URLs are specified using the ``':'`` operator. For example, the "
"main index page of the admin application is referenced using ``'admin:"
"index'``. This indicates a namespace of ``'admin'``, and a named URL of "
"``'index'``."
msgstr ""

# ae021be9740e4c208d3f3d7e239cfc1b
#: ../../topics/http/urls.txt:705
msgid ""
"Namespaces can also be nested. The named URL ``'foo:bar:whiz'`` would look "
"for a pattern named ``'whiz'`` in the namespace ``'bar'`` that is itself "
"defined within the top-level namespace ``'foo'``."
msgstr ""

# 5382f20465b64677adc25aa80010a740
#: ../../topics/http/urls.txt:712
msgid "Reversing namespaced URLs"
msgstr ""

# 6b4312f6dcf74f169e5ac95e670e2ae6
#: ../../topics/http/urls.txt:714
msgid ""
"When given a namespaced URL (e.g. ``'myapp:index'``) to resolve, Django "
"splits the fully qualified name into parts, and then tries the following "
"lookup:"
msgstr ""

# 7284ce5367044ee8b07c5e67fb85e1b0
#: ../../topics/http/urls.txt:717
msgid ""
"First, Django looks for a matching :term:`application namespace` (in this "
"example, ``'myapp'``). This will yield a list of instances of that "
"application."
msgstr ""

# 84c3d5bd188d4124846b5092df8848bd
#: ../../topics/http/urls.txt:721
msgid ""
"If there is a *current* application defined, Django finds and returns the "
"URL resolver for that instance. The *current* application can be specified "
"as an attribute on the template context - applications that expect to have "
"multiple deployments should set the ``current_app`` attribute on any "
"``Context`` or ``RequestContext`` that is used to render a template."
msgstr ""

# cbf774de42674c2c80939c772bf925fd
#: ../../topics/http/urls.txt:728
msgid ""
"The current application can also be specified manually as an argument to "
"the :func:`django.core.urlresolvers.reverse` function."
msgstr ""

# a94032bda34c4bd08cfae19e6a1f21de
#: ../../topics/http/urls.txt:731
msgid ""
"If there is no current application. Django looks for a default application "
"instance. The default application instance is the instance that has an :term:"
"`instance namespace` matching the :term:`application namespace` (in this "
"example, an instance of the ``myapp`` called ``'myapp'``)."
msgstr ""

# c447eaed84be4f71a793617abded7daa
#: ../../topics/http/urls.txt:737
msgid ""
"If there is no default application instance, Django will pick the last "
"deployed instance of the application, whatever its instance name may be."
msgstr ""

# d5a00810442a4ce49641f97a881ac96e
#: ../../topics/http/urls.txt:740
msgid ""
"If the provided namespace doesn't match an :term:`application namespace` in "
"step 1, Django will attempt a direct lookup of the namespace as an :term:"
"`instance namespace`."
msgstr ""

# cc9f424e467b4ba1b24261a342dc7645
#: ../../topics/http/urls.txt:744
msgid ""
"If there are nested namespaces, these steps are repeated for each part of "
"the namespace until only the view name is unresolved. The view name will "
"then be resolved into a URL in the namespace that has been found."
msgstr ""

# f5dee0607b7046cba29a519ce2bcc342
#: ../../topics/http/urls.txt:751
msgid ""
"To show this resolution strategy in action, consider an example of two "
"instances of ``myapp``: one called ``'foo'``, and one called ``'bar'``. "
"``myapp`` has a main index page with a URL named ``'index'``. Using this "
"setup, the following lookups are possible:"
msgstr ""

# dfacd7a5cb5242db8381568a3ffd918b
# f3a9362050db4f7387c451fc3c88ee7b
#: ../../topics/http/urls.txt:756 ../../topics/http/urls.txt:773
msgid ""
"If one of the instances is current - say, if we were rendering a utility "
"page in the instance ``'bar'`` - ``'myapp:index'`` will resolve to the index "
"page of the instance ``'bar'``."
msgstr ""

# c979a101c11a453590aeb28ccfa9d825
#: ../../topics/http/urls.txt:760
msgid ""
"If there is no current instance - say, if we were rendering a page somewhere "
"else on the site - ``'myapp:index'`` will resolve to the last registered "
"instance of ``myapp``. Since there is no default instance, the last instance "
"of ``myapp`` that is registered will be used. This could be ``'foo'`` or "
"``'bar'``, depending on the order they are introduced into the urlpatterns "
"of the project."
msgstr ""

# 22eded961da749e6877771e4e22346fd
#: ../../topics/http/urls.txt:767
msgid ""
"``'foo:index'`` will always resolve to the index page of the instance "
"``'foo'``."
msgstr ""

# a2065407077649a3b49ab9d89a4dd7d5
#: ../../topics/http/urls.txt:770
msgid ""
"If there was also a default instance - i.e., an instance named ``'myapp'`` - "
"the following would happen:"
msgstr ""

# c8fe7e79fd684669ab1a54f12322cd84
#: ../../topics/http/urls.txt:777
msgid ""
"If there is no current instance - say, if we were rendering a page somewhere "
"else on the site - ``'myapp:index'`` will resolve to the index page of the "
"default instance."
msgstr ""

# 37a84cb9466d44198326896daf6d1157
#: ../../topics/http/urls.txt:781
msgid ""
"``'foo:index'`` will again resolve to the index page of the instance "
"``'foo'``."
msgstr ""

# e9e6111d3d56403a85aa7055d567b1f2
#: ../../topics/http/urls.txt:787
msgid "URL namespaces and included URLconfs"
msgstr ""

# 35cf779879aa4bf1a7b0297db74f6fae
#: ../../topics/http/urls.txt:789
msgid "URL namespaces of included URLconfs can be specified in two ways."
msgstr ""

# 1070217ddbed41038ca959da383174b1
#: ../../topics/http/urls.txt:791
msgid ""
"Firstly, you can provide the :term:`application <application namespace>` "
"and :term:`instance <instance namespace>` namespaces as arguments to :func:"
"`django.conf.urls.include()` when you construct your URL patterns. For "
"example,::"
msgstr ""

# e03f48be0e054849adb532b171c6e53b
#: ../../topics/http/urls.txt:798
msgid ""
"This will include the URLs defined in ``apps.help.urls`` into the :term:"
"`application namespace` ``'bar'``, with the :term:`instance namespace` "
"``'foo'``."
msgstr ""

# eed5c067979043d5bd7d3b71a198649b
#: ../../topics/http/urls.txt:802
msgid ""
"Secondly, you can include an object that contains embedded namespace data. "
"If you ``include()`` an object as returned by :func:`~django.conf.urls."
"patterns`, the URLs contained in that object will be added to the global "
"namespace. However, you can also ``include()`` a 3-tuple containing::"
msgstr ""

# 83a42f4a78c3423ba9dd5cc0a6c8496f
#: ../../topics/http/urls.txt:818
msgid ""
"This will include the nominated URL patterns into the given application and "
"instance namespace."
msgstr ""

# 304bfbe27e674d8fbadc64608875b7c1
#: ../../topics/http/urls.txt:821
msgid ""
"For example, the Django Admin is deployed as instances of :class:`~django."
"contrib.admin.AdminSite`.  ``AdminSite`` objects have a ``urls`` attribute: "
"A 3-tuple that contains all the patterns in the corresponding admin site, "
"plus the application namespace ``'admin'``, and the name of the admin "
"instance. It is this ``urls`` attribute that you ``include()`` into your "
"projects ``urlpatterns`` when you deploy an Admin instance."
msgstr ""

# 46fea1c37c13470e8cf7acf8f61da3c0
#: ../../topics/http/views.txt:3
msgid "Writing views"
msgstr ""

# 8fcfed49781d43b0abf78f905f35f12d
#: ../../topics/http/views.txt:5
msgid ""
"A view function, or *view* for short, is simply a Python function that takes "
"a Web request and returns a Web response. This response can be the HTML "
"contents of a Web page, or a redirect, or a 404 error, or an XML document, "
"or an image . . . or anything, really. The view itself contains whatever "
"arbitrary logic is necessary to return that response. This code can live "
"anywhere you want, as long as it's on your Python path. There's no other "
"requirement--no \"magic,\" so to speak. For the sake of putting the code "
"*somewhere*, the convention is to put views in a file called ``views.py``, "
"placed in your project or application directory."
msgstr ""

# 40d0fbc83c8941f99d1cc99b5a9e0ae5
#: ../../topics/http/views.txt:16
msgid "A simple view"
msgstr ""

# 6945e2601a6a46d394e367f0329b51c0
#: ../../topics/http/views.txt:18
msgid ""
"Here's a view that returns the current date and time, as an HTML document:"
msgstr ""

# f4d6ef4786424cd1a07ca6d0c0c781ca
#: ../../topics/http/views.txt:30
msgid "Let's step through this code one line at a time:"
msgstr ""

# 82a8478868064f54a7f2eac22b565bf5
#: ../../topics/http/views.txt:32
msgid ""
"First, we import the class :class:`~django.http.HttpResponse` from the :mod:"
"`django.http` module, along with Python's ``datetime`` library."
msgstr ""

# ef1bd43fb0bf4096b872dc389d95f8c9
#: ../../topics/http/views.txt:35
msgid ""
"Next, we define a function called ``current_datetime``. This is the view "
"function. Each view function takes an :class:`~django.http.HttpRequest` "
"object as its first parameter, which is typically named ``request``."
msgstr ""

# 75568b13dfe74d5ba0e57c4a905c59ec
#: ../../topics/http/views.txt:39
msgid ""
"Note that the name of the view function doesn't matter; it doesn't have to "
"be named in a certain way in order for Django to recognize it. We're calling "
"it ``current_datetime`` here, because that name clearly indicates what it "
"does."
msgstr ""

# 2cc8a8d6a25249758b7da82c3d04dedd
#: ../../topics/http/views.txt:44
msgid ""
"The view returns an :class:`~django.http.HttpResponse` object that contains "
"the generated response. Each view function is responsible for returning an :"
"class:`~django.http.HttpResponse` object. (There are exceptions, but we'll "
"get to those later.)"
msgstr ""

# 9cdf987625cf46069ac330034505c31b
#: ../../topics/http/views.txt:49
msgid "Django's Time Zone"
msgstr ""

# 798b1d0924c741f3a61bdc549052c71a
#: ../../topics/http/views.txt:51
msgid ""
"Django includes a :setting:`TIME_ZONE` setting that defaults to ``America/"
"Chicago``. This probably isn't where you live, so you might want to change "
"it in your settings file."
msgstr ""

# 0d209ed2c406410f9c43cb5a89f47350
#: ../../topics/http/views.txt:56
msgid "Mapping URLs to views"
msgstr ""

# 2c5194e9bae64d568ac1d21c781975a3
#: ../../topics/http/views.txt:58
msgid ""
"So, to recap, this view function returns an HTML page that includes the "
"current date and time. To display this view at a particular URL, you'll need "
"to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""

# 7998be469a5e42d8ac076b2b8864b23a
#: ../../topics/http/views.txt:63
msgid "Returning errors"
msgstr ""

# 14550baa14e44cb9b2b8426f6f9d2787
#: ../../topics/http/views.txt:65
msgid ""
"Returning HTTP error codes in Django is easy. There are subclasses of :class:"
"`~django.http.HttpResponse` for a number of common HTTP status codes other "
"than 200 (which means *\"OK\"*). You can find the full list of available "
"subclasses in the :ref:`request/response <ref-httpresponse-subclasses>` "
"documentation.  Just return an instance of one of those subclasses instead "
"of a normal :class:`~django.http.HttpResponse` in order to signify an error. "
"For example::"
msgstr ""

# d5899cf5178f409985832f9ae9ca5859
#: ../../topics/http/views.txt:80
msgid ""
"There isn't a specialized subclass for every possible HTTP response code, "
"since many of them aren't going to be that common. However, as documented in "
"the :class:`~django.http.HttpResponse` documentation, you can also pass the "
"HTTP status code into the constructor for :class:`~django.http.HttpResponse` "
"to create a return class for any status code you like. For example::"
msgstr ""

# 6c8e2c1adfa34a5696b84532524fa8e1
#: ../../topics/http/views.txt:92
msgid ""
"Because 404 errors are by far the most common HTTP error, there's an easier "
"way to handle those errors."
msgstr ""

# b39a2c5b280843ba99facc2c9b5efffa
#: ../../topics/http/views.txt:96
msgid "The Http404 exception"
msgstr ""

# 2db00a1060134d5ea82df75e963f3870
#: ../../topics/http/views.txt:100
msgid ""
"When you return an error such as :class:`~django.http.HttpResponseNotFound`, "
"you're responsible for defining the HTML of the resulting error page::"
msgstr ""

# 38258e490aef421e8079be1033069ba8
#: ../../topics/http/views.txt:105
msgid ""
"For convenience, and because it's a good idea to have a consistent 404 error "
"page across your site, Django provides an ``Http404`` exception. If you "
"raise ``Http404`` at any point in a view function, Django will catch it and "
"return the standard error page for your application, along with an HTTP "
"error code 404."
msgstr ""

# 0aab64b77d474f3d8a9188c66f70fc56
#: ../../topics/http/views.txt:110
msgid "Example usage::"
msgstr ""

# b40321d1510b4c64b3c1794ade63ef48
#: ../../topics/http/views.txt:121
msgid ""
"In order to use the ``Http404`` exception to its fullest, you should create "
"a template that is displayed when a 404 error is raised. This template "
"should be called ``404.html`` and located in the top level of your template "
"tree."
msgstr ""

# 06e6b633e8f942ae80c48bf384fc31fe
#: ../../topics/http/views.txt:128
msgid "Customizing error views"
msgstr ""

# 43c947c553774a5caf653992c017cc9f
#: ../../topics/http/views.txt:133
msgid "The 404 (page not found) view"
msgstr ""

# 3f8c13b6988246ebb98ae7fbbd069da0
#: ../../topics/http/views.txt:137
msgid ""
"When you raise an ``Http404`` exception, Django loads a special view devoted "
"to handling 404 errors. By default, it's the view ``django.views.defaults."
"page_not_found``, which either produces a very simple \"Not Found\" message "
"or loads and renders the template ``404.html`` if you created it in your "
"root template directory."
msgstr ""

# 1b7cc2aabe7c49f6a9eda06f3bb977b7
#: ../../topics/http/views.txt:143
msgid ""
"The default 404 view will pass one variable to the template: "
"``request_path``, which is the URL that resulted in the error."
msgstr ""

# 64f46cb946424d6292a3a549211faa78
#: ../../topics/http/views.txt:146
msgid ""
"The ``page_not_found`` view should suffice for 99% of Web applications, but "
"if you want to override it, you can specify ``handler404`` in your URLconf, "
"like so::"
msgstr ""

# 94af8c347838427e8b6b76086862c154
#: ../../topics/http/views.txt:152
msgid ""
"Behind the scenes, Django determines the 404 view by looking for "
"``handler404`` in your root URLconf, and falling back to ``django.views."
"defaults.page_not_found`` if you did not define one."
msgstr ""

# e43d9cada10245d58f38e055bb5a30c5
#: ../../topics/http/views.txt:156
msgid "Three things to note about 404 views:"
msgstr ""

# 3a3f531f715740baaadf0f77a863d2a7
#: ../../topics/http/views.txt:158
msgid ""
"The 404 view is also called if Django doesn't find a match after checking "
"every regular expression in the URLconf."
msgstr ""

# 7ab8974cad2b4fa3b3cca317a2aeac2f
#: ../../topics/http/views.txt:161
msgid ""
"The 404 view is passed a :class:`~django.template.RequestContext` and will "
"have access to variables supplied by your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` setting (e.g., ``MEDIA_URL``)."
msgstr ""

# b9fa8a83c9ab43248b915e2d0c5f74f6
#: ../../topics/http/views.txt:165
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"404 view will never be used, and your URLconf will be displayed instead, "
"with some debug information."
msgstr ""

# a5365ad900be49c0a32b67ebb4db2463
#: ../../topics/http/views.txt:172
msgid "The 500 (server error) view"
msgstr ""

# 2f31996def144154b8b0bdf23ba2bb2b
#: ../../topics/http/views.txt:174
msgid ""
"Similarly, Django executes special-case behavior in the case of runtime "
"errors in view code. If a view results in an exception, Django will, by "
"default, call the view ``django.views.defaults.server_error``, which either "
"produces a very simple \"Server Error\" message or loads and renders the "
"template ``500.html`` if you created it in your root template directory."
msgstr ""

# 51c3178c769945b4b423b9c600e732e7
#: ../../topics/http/views.txt:180
msgid ""
"The default 500 view passes no variables to the ``500.html`` template and is "
"rendered with an empty ``Context`` to lessen the chance of additional errors."
msgstr ""

# fbfbb02bf4e44ecca6fc174c9e63bb45
#: ../../topics/http/views.txt:183
msgid ""
"This ``server_error`` view should suffice for 99% of Web applications, but "
"if you want to override the view, you can specify ``handler500`` in your "
"URLconf, like so::"
msgstr ""

# 8c5ded3d116a47e29520cc06770fdc14
#: ../../topics/http/views.txt:189
msgid ""
"Behind the scenes, Django determines the 500 view by looking for "
"``handler500`` in your root URLconf, and falling back to ``django.views."
"defaults.server_error`` if you did not define one."
msgstr ""

# a8c8a2b0177340ee8bfd16714bc70ab7
#: ../../topics/http/views.txt:193
msgid "One thing to note about 500 views:"
msgstr ""

# 52820cdabf8f4099a23af2a58563c40d
#: ../../topics/http/views.txt:195
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"500 view will never be used, and the traceback will be displayed instead, "
"with some debug information."
msgstr ""

# 14013d0ce96046b3b3564a8d0b27d7eb
#: ../../topics/http/views.txt:202
msgid "The 403 (HTTP Forbidden) view"
msgstr ""

# 0549027951724630a91fab0328ea1f09
#: ../../topics/http/views.txt:206
msgid ""
"In the same vein as the 404 and 500 views, Django has a view to handle 403 "
"Forbidden errors. If a view results in a 403 exception then Django will, by "
"default, call the view ``django.views.defaults.permission_denied``."
msgstr ""

# fec53e42907c4a5ca4e31faa56140d80
#: ../../topics/http/views.txt:210
msgid ""
"This view loads and renders the template ``403.html`` in your root template "
"directory, or if this file does not exist, instead serves the text \"403 "
"Forbidden\", as per :rfc:`2616` (the HTTP 1.1 Specification)."
msgstr ""

# adbf4d39408442a9ab855e3920e10b91
#: ../../topics/http/views.txt:214
msgid ""
"``django.views.defaults.permission_denied`` is triggered by a :exc:`~django."
"core.exceptions.PermissionDenied` exception. To deny access in a view you "
"can use code like this::"
msgstr ""

# 45fa2957733d4a28b67a0f018990ff9d
#: ../../topics/http/views.txt:225
msgid ""
"It is possible to override ``django.views.defaults.permission_denied`` in "
"the same way you can for the 404 and 500 views by specifying a "
"``handler403`` in your URLconf::"
msgstr ""

# 3996cd1a4f3a40fab09d8f8e3f2436ff
#: ../../topics/i18n/formatting.txt:5
msgid "Format localization"
msgstr ""

# c089c2f38d45451a9e14261739ceaddd
#: ../../topics/i18n/formatting.txt:10
msgid ""
"Django's formatting system is capable to display dates, times and numbers in "
"templates using the format specified for the current :term:`locale <locale "
"name>`. It also handles localized input in forms."
msgstr ""

# f0d82990348747beb280e74b637d46be
#: ../../topics/i18n/formatting.txt:13
msgid ""
"When it's enabled, two users accessing the same content may see dates, times "
"and numbers formatted in different ways, depending on the formats for their "
"current locale."
msgstr ""

# fe9b5b3f0c2d43f1aff2fb8d978591fe
#: ../../topics/i18n/formatting.txt:17
msgid ""
"The formatting system is disabled by default. To enable it, it's necessary "
"to set :setting:`USE_L10N = True <USE_L10N>` in your settings file."
msgstr ""

# b15b82f83de44db3975b3d1769570975
#: ../../topics/i18n/formatting.txt:22
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin.py "
"startproject <startproject>` includes :setting:`USE_L10N = True <USE_L10N>` "
"for convenience.  Note, however, that to enable number formatting with "
"thousand separators it is necessary to set :setting:`USE_THOUSAND_SEPARATOR "
"= True <USE_THOUSAND_SEPARATOR>` in your settings file. Alternatively, you "
"could use :tfilter:`intcomma` to format numbers in your template."
msgstr ""

# 605ef1fcc87940909c1ac8752d88dcc0
#: ../../topics/i18n/formatting.txt:31
msgid ""
"There is also an independent but related :setting:`USE_I18N` setting that "
"controls if Django should activate translation. See :doc:`/topics/i18n/"
"translation` for more details."
msgstr ""

# 77339ca737d54cb0b55f55d8f9df4c6c
#: ../../topics/i18n/formatting.txt:36
msgid "Locale aware input in forms"
msgstr ""

# 229f1bcf134b421ebdf8921dc4c83ad2
#: ../../topics/i18n/formatting.txt:38
msgid ""
"When formatting is enabled, Django can use localized formats when parsing "
"dates, times and numbers in forms. That means it tries different formats for "
"different locales when guessing the format used by the user when inputting "
"data on forms."
msgstr ""

# 8eaf24dbdf944e3ab3e23e6e0cb8e92a
#: ../../topics/i18n/formatting.txt:43
msgid ""
"Django uses different formats for displaying data to those it uses for "
"parsing data. Most notably, the formats for parsing dates can't use the ``"
"%a`` (abbreviated weekday name), ``%A`` (full weekday name), ``%b`` "
"(abbreviated month name), ``%B`` (full month name), or ``%p`` (AM/PM)."
msgstr ""

# 15dd8b9cf66f4369bd218dc2447088b3
#: ../../topics/i18n/formatting.txt:49
msgid ""
"To enable a form field to localize input and output data simply use its "
"``localize`` argument::"
msgstr ""

# cbe3b9e2dd8a4f069d901a66958b744f
#: ../../topics/i18n/formatting.txt:59
msgid "Controlling localization in templates"
msgstr ""

# a44aeaa39c2c462fa21ce0e791cbcd6d
#: ../../topics/i18n/formatting.txt:61
msgid ""
"When you have enabled formatting with :setting:`USE_L10N`, Django will try "
"to use a locale specific format whenever it outputs a value in a template."
msgstr ""

# 71670ed249c34df38912ca9dab78ca0b
#: ../../topics/i18n/formatting.txt:65
msgid ""
"However, it may not always be appropriate to use localized values -- for "
"example, if you're outputting Javascript or XML that is designed to be "
"machine-readable, you will always want unlocalized values. You may also want "
"to use localization in selected templates, rather than using localization "
"everywhere."
msgstr ""

# 30a53da59f2c4060ab801930015ed51e
#: ../../topics/i18n/formatting.txt:71
msgid ""
"To allow for fine control over the use of localization, Django provides the "
"``l10n`` template library that contains the following tags and filters."
msgstr ""

# e7e1d33693544498a97d47d8cc1cb5fe
# e11ac3c394614702bd3ffb8f888e3ed3
#: ../../topics/i18n/formatting.txt:76 ../../topics/i18n/timezones.txt:259
msgid "Template tags"
msgstr ""

# bdf728642241450687942a5bbb40151a
# 22cd4908034c4b6686f361bfe39c9c56
#: ../../topics/i18n/formatting.txt:81 ../../topics/i18n/formatting.txt:115
msgid "localize"
msgstr ""

# a00a5172815747cfa1411c1320cc832b
#: ../../topics/i18n/formatting.txt:83
msgid ""
"Enables or disables localization of template variables in the contained "
"block."
msgstr ""

# 15525ca662314540a4875b811b719689
#: ../../topics/i18n/formatting.txt:86
msgid ""
"This tag allows a more fine grained control of localization than :setting:"
"`USE_L10N`."
msgstr ""

# 54eea9cec16047529a2d585ddf10b91c
#: ../../topics/i18n/formatting.txt:89
msgid "To activate or deactivate localization for a template block, use::"
msgstr ""

# c5ac8773e42b40e8a2743ee614f45e18
#: ../../topics/i18n/formatting.txt:103
msgid ""
"The value of :setting:`USE_L10N` isn't respected inside of a ``{% localize %}"
"`` block."
msgstr ""

# 355525070e34482890e4e116e979b567
#: ../../topics/i18n/formatting.txt:106
msgid ""
"See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that "
"will do the same job on a per-variable basis."
msgstr ""

# e257dc26f8da43fa9601b6ba531bbfa4
# c94e01c0d1094c04a0672fe14f74636b
#: ../../topics/i18n/formatting.txt:110 ../../topics/i18n/timezones.txt:326
msgid "Template filters"
msgstr ""

# 015b9b5ed9dc45d4a1e002b467696811
#: ../../topics/i18n/formatting.txt:117
msgid "Forces localization of a single value."
msgstr ""

# 54a84211f89147e79bfbf72b229bdc3e
#: ../../topics/i18n/formatting.txt:125
msgid ""
"To disable localization on a single value, use :tfilter:`unlocalize`. To "
"control localization over a large section of a template, use the :ttag:"
"`localize` template tag."
msgstr ""

# a059115b75324925b230bc9a7061ad9c
#: ../../topics/i18n/formatting.txt:133
msgid "unlocalize"
msgstr ""

# 284413b242f5450e8bfa0b477ce442ea
#: ../../topics/i18n/formatting.txt:135
msgid "Forces a single value to be printed without localization."
msgstr ""

# e2858bf5d0784d21b3b370cb3ecc9c88
#: ../../topics/i18n/formatting.txt:143
msgid ""
"To force localization of a single value, use :tfilter:`localize`. To control "
"localization over a large section of a template, use the :ttag:`localize` "
"template tag."
msgstr ""

# d218da77a32b4587ace620f180174194
#: ../../topics/i18n/formatting.txt:150
msgid "Creating custom format files"
msgstr ""

# da910302b1894bb0982e12274bffa88c
#: ../../topics/i18n/formatting.txt:152
msgid ""
"Django provides format definitions for many locales, but sometimes you might "
"want to create your own, because a format files doesn't exist for your "
"locale, or because you want to overwrite some of the values."
msgstr ""

# fc57daa6dfc949009928f80b4fa171e1
#: ../../topics/i18n/formatting.txt:156
msgid ""
"To use custom formats, specify the path where you'll place format files "
"first. To do that, just set your :setting:`FORMAT_MODULE_PATH` setting to "
"the package where format files will exist, for instance::"
msgstr ""

# 4286986a9e204eed8c3185a9704631c9
#: ../../topics/i18n/formatting.txt:162
msgid ""
"Files are not placed directly in this directory, but in a directory named as "
"the locale, and must be named ``formats.py``."
msgstr ""

# 0441cb991eaa44dbb230308dc032dfa3
#: ../../topics/i18n/formatting.txt:165
msgid ""
"To customize the English formats, a structure like this would be needed::"
msgstr ""

# bf5d0c4e59444582b1a5e5123c219fa1
#: ../../topics/i18n/formatting.txt:174
msgid ""
"where :file:`formats.py` contains custom format definitions. For example::"
msgstr ""

# 14deb2c8d682492a824de821ffad2b58
#: ../../topics/i18n/formatting.txt:178
msgid ""
"to use a non-breaking space (Unicode ``00A0``) as a thousand separator, "
"instead of the default for English, a comma."
msgstr ""

# b71247627880414b9ff8faa405e2189a
#: ../../topics/i18n/formatting.txt:182
msgid "Limitations of the provided locale formats"
msgstr ""

# 0b0eb6792fa34afdbb92bfede283f3a0
#: ../../topics/i18n/formatting.txt:184
msgid ""
"Some locales use context-sensitive formats for numbers, which Django's "
"localization system cannot handle automatically."
msgstr ""

# c8ae471adff342239a413e62f2cc81fc
#: ../../topics/i18n/formatting.txt:188
msgid "Switzerland (German)"
msgstr ""

# 085edb98111d48169bdc1f92047bc0e7
#: ../../topics/i18n/formatting.txt:190
msgid ""
"The Swiss number formatting depends on the type of number that is being "
"formatted. For monetary values, a comma is used as the thousand separator "
"and a decimal point for the decimal separator. For all other numbers, a "
"comma is used as decimal separator and a space as thousand separator. The "
"locale format provided by Django uses the generic separators, a comma for "
"decimal and a space for thousand separators."
msgstr ""

# af193a906fee4a5aa71079820e70df87
#: ../../topics/i18n/index.txt:3
msgid "Internationalization and localization"
msgstr ""

# 7e955a1f687643fd96a0337309973143
#: ../../topics/i18n/index.txt:16
msgid ""
"The goal of internationalization and localization is to allow a single Web "
"application to offer its content in languages and formats tailored to the "
"audience."
msgstr ""

# b83c841cefcb4a24b123bc4d969509a7
#: ../../topics/i18n/index.txt:20
msgid ""
"Django has full support for :doc:`translation of text </topics/i18n/"
"translation>`, :doc:`formatting of dates, times and numbers </topics/i18n/"
"formatting>`, and :doc:`time zones </topics/i18n/timezones>`."
msgstr ""

# 5bd18e3089c54f25971c57ac76710704
#: ../../topics/i18n/index.txt:24
msgid "Essentially, Django does two things:"
msgstr ""

# cef29b190af74b2eb45d898d41b77b84
#: ../../topics/i18n/index.txt:26
msgid ""
"It allows developers and template authors to specify which parts of their "
"apps should be translated or formatted for local languages and cultures."
msgstr ""

# 31ac081a77fa4fd4b530c7312bd111de
#: ../../topics/i18n/index.txt:28
msgid ""
"It uses these hooks to localize Web apps for particular users according to "
"their preferences."
msgstr ""

# a1fa36cf3f4e4ad38525e7c31beff338
#: ../../topics/i18n/index.txt:31
msgid ""
"Obviously, translation depends on the target language, and formatting "
"usually depends on the target country. These informations are provided by "
"browsers in the ``Accept-Language`` header. However, the time zone isn't "
"readily available."
msgstr ""

# 7b336e9686384f2a98f47b20e90a8a7e
#: ../../topics/i18n/index.txt:36
msgid "Definitions"
msgstr ""

# f21440441078444694a50d6926a68b5e
#: ../../topics/i18n/index.txt:38
msgid ""
"The words \"internationalization\" and \"localization\" often cause "
"confusion; here's a simplified definition:"
msgstr ""

# 610a06d1f7774cf9b229babeaa11cb8b
#: ../../topics/i18n/index.txt:42
msgid "internationalization"
msgstr ""

# 19fe8ac75ac149f9a764c3ed1a50aaaf
#: ../../topics/i18n/index.txt:44
msgid "Preparing the software for localization. Usually done by developers."
msgstr ""

# 9003dcfc495e4d469b691bad226f7627
#: ../../topics/i18n/index.txt:45
msgid "localization"
msgstr ""

# 8730941f3f3d452485a699cbd2579961
#: ../../topics/i18n/index.txt:47
msgid ""
"Writing the translations and local formats. Usually done by translators."
msgstr ""

# 20b6dbac99484c8ca92f68d434a68d60
#: ../../topics/i18n/index.txt:49
msgid ""
"More details can be found in the `W3C Web Internationalization FAQ`_, the "
"`Wikipedia article`_ or the `GNU gettext documentation`_."
msgstr ""

# 25f681ed701a411cb298e63a9378fcdf
#: ../../topics/i18n/index.txt:57
msgid ""
"Translation and formatting are controlled by :setting:`USE_I18N` and :"
"setting:`USE_L10N` settings respectively. However, both features involve "
"internationalization and localization. The names of the settings are an "
"unfortunate result of Django's history."
msgstr ""

# da3d0866fe4747d789d36c73a6934844
#: ../../topics/i18n/index.txt:62
msgid ""
"Here are some other terms that will help us to handle a common language:"
msgstr ""

# fe282ac8f84e4420974a4ae270dca478
#: ../../topics/i18n/index.txt:65
msgid "locale name"
msgstr ""

# 76db1226c91e4177b56b8b0763442d9d
#: ../../topics/i18n/index.txt:67
msgid ""
"A locale name, either a language specification of the form ``ll`` or a "
"combined language and country specification of the form ``ll_CC``. Examples: "
"``it``, ``de_AT``, ``es``, ``pt_BR``. The language part is always is lower "
"case and the country part in upper case. The separator is an underscore."
msgstr ""

# 57d877f0b9b040a9b66518d748b5e755
#: ../../topics/i18n/index.txt:72
msgid "language code"
msgstr ""

# 61a75135d9254fe386357583dffbd649
#: ../../topics/i18n/index.txt:74
msgid ""
"Represents the name of a language. Browsers send the names of the languages "
"they accept in the ``Accept-Language`` HTTP header using this format. "
"Examples: ``it``, ``de-at``, ``es``, ``pt-br``. Both the language and the "
"country parts are in lower case. The separator is a dash."
msgstr ""

# a0a016754f284ad8aed75e62c273ec18
#: ../../topics/i18n/index.txt:78
msgid "message file"
msgstr ""

# e10694294ac441cd98d0ade775800a31
#: ../../topics/i18n/index.txt:80
msgid ""
"A message file is a plain-text file, representing a single language, that "
"contains all available :term:`translation strings <translation string>` and "
"how they should be represented in the given language. Message files have a "
"``.po`` file extension."
msgstr ""

# 89fecb6f98e44e8cb726c27a15cfde71
#: ../../topics/i18n/index.txt:84
msgid "translation string"
msgstr ""

# 48e03ed168aa4a0c81261eb180ac38c1
#: ../../topics/i18n/index.txt:86
msgid "A literal that can be translated."
msgstr ""

# 3640314b352b4d57b334b037c3d7c6ef
#: ../../topics/i18n/index.txt:87
msgid "format file"
msgstr ""

# 3af6deeee4c74e66b8db78f941052cbc
#: ../../topics/i18n/index.txt:89
msgid ""
"A format file is a Python module that defines the data formats for a given "
"locale."
msgstr ""

# 802b6d0937584d379c00e6111f905f3e
#: ../../topics/i18n/timezones.txt:5
msgid "Time zones"
msgstr ""

# 22750d1242da4e998c8801af76adb8e1
#: ../../topics/i18n/timezones.txt:14
msgid ""
"When support for time zones is enabled, Django stores date and time "
"information in UTC in the database, uses time-zone-aware datetime objects "
"internally, and translates them to the end user's time zone in templates and "
"forms."
msgstr ""

# 056e3a45fde84272ba5e598a1574f4dd
#: ../../topics/i18n/timezones.txt:19
msgid ""
"This is handy if your users live in more than one time zone and you want to "
"display date and time information according to each user's wall clock."
msgstr ""

# a4f7e6c913564ca7a55df88dc995cfda
#: ../../topics/i18n/timezones.txt:22
msgid ""
"Even if your Web site is available in only one time zone, it's still good "
"practice to store data in UTC in your database. One main reason is Daylight "
"Saving Time (DST). Many countries have a system of DST, where clocks are "
"moved forward in spring and backward in autumn. If you're working in local "
"time, you're likely to encounter errors twice a year, when the transitions "
"happen. (The pytz_ documentation discusses `these issues`_ in greater "
"detail.) This probably doesn't matter for your blog, but it's a problem if "
"you over-bill or under-bill your customers by one hour, twice a year, every "
"year. The solution to this problem is to use UTC in the code and use local "
"time only when interacting with end users."
msgstr ""

# 14b8bb2023cd4250a6207386bc5a9406
#: ../../topics/i18n/timezones.txt:33
msgid ""
"Time zone support is disabled by default. To enable it, set :setting:`USE_TZ "
"= True <USE_TZ>` in your settings file. Installing pytz_ is highly "
"recommended, but not mandatory. It's as simple as:"
msgstr ""

# 678f5731102341ada71da823f2a42579
#: ../../topics/i18n/timezones.txt:43
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin.py "
"startproject <startproject>` includes :setting:`USE_TZ = True <USE_TZ>` for "
"convenience."
msgstr ""

# e2724f556e2946ef861d265dda5a0570
#: ../../topics/i18n/timezones.txt:49
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls whether Django should activate format localization. See :doc:`/"
"topics/i18n/formatting` for more details."
msgstr ""

# 70d28b6bde964bb59afeb2931c335cc1
#: ../../topics/i18n/timezones.txt:53
msgid ""
"If you're wrestling with a particular problem, start with the :ref:`time "
"zone FAQ <time-zones-faq>`."
msgstr ""

# b3ca8f9d71b6472491252874a8e55a2f
#: ../../topics/i18n/timezones.txt:57
msgid "Concepts"
msgstr ""

# 92610c5df23744119e9821bc48e03b19
#: ../../topics/i18n/timezones.txt:60
msgid "Naive and aware datetime objects"
msgstr ""

# 53499f2a83bc4cf7b5b4c5280e8fb70f
#: ../../topics/i18n/timezones.txt:62
msgid ""
"Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that "
"can be used to store time zone information, represented as an instance of a "
"subclass of :class:`datetime.tzinfo`. When this attribute is set and "
"describes an offset, a datetime object is **aware**. Otherwise, it's "
"**naive**."
msgstr ""

# 3d8442aaf877445e821abbd19f0cac41
#: ../../topics/i18n/timezones.txt:67
msgid ""
"You can use :func:`~django.utils.timezone.is_aware` and :func:`~django.utils."
"timezone.is_naive` to determine whether datetimes are aware or naive."
msgstr ""

# fa6fbf4fd7644ed7a59a074e3972b925
#: ../../topics/i18n/timezones.txt:71
msgid ""
"When time zone support is disabled, Django uses naive datetime objects in "
"local time. This is simple and sufficient for many use cases. In this mode, "
"to obtain the current time, you would write::"
msgstr ""

# 79fb344feb064764941b95efae8fcb24
#: ../../topics/i18n/timezones.txt:79
msgid ""
"When time zone support is enabled, Django uses time-zone-aware datetime "
"objects. If your code creates datetime objects, they should be aware too. In "
"this mode, the example above becomes::"
msgstr ""

# 9f4509aeac4643ffa1c71e5cf4e31c3a
#: ../../topics/i18n/timezones.txt:90
msgid ""
":mod:`django.utils.timezone` provides a :func:`~django.utils.timezone.now()` "
"function that returns a naive or aware datetime object according to the "
"value of :setting:`USE_TZ`."
msgstr ""

# aede0ab7799a40d3a8afa724aca039b2
#: ../../topics/i18n/timezones.txt:96
msgid ""
"Dealing with aware datetime objects isn't always intuitive. For instance, "
"the ``tzinfo`` argument of the standard datetime constructor doesn't work "
"reliably for time zones with DST. Using UTC is generally safe; if you're "
"using other time zones, you should review the `pytz`_ documentation "
"carefully."
msgstr ""

# 29261020e8ec417584dc40a89a190f3f
#: ../../topics/i18n/timezones.txt:104
msgid ""
"Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute, "
"and PostgreSQL has a matching ``time with time zone`` type. However, as "
"PostgreSQL's docs put it, this type \"exhibits properties which lead to "
"questionable usefulness\"."
msgstr ""

# d664d610b74443a7b0cc3ad59bfa8e1c
#: ../../topics/i18n/timezones.txt:109
msgid ""
"Django only supports naive time objects and will raise an exception if you "
"attempt to save an aware time object."
msgstr ""

# 80a37caf429c4534816ca8557951c2bb
#: ../../topics/i18n/timezones.txt:115
msgid "Interpretation of naive datetime objects"
msgstr ""

# 8133f2397d5c44fea516531d066c54d1
#: ../../topics/i18n/timezones.txt:117
msgid ""
"When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime "
"objects, in order to preserve backwards-compatibility. When the database "
"layer receives one, it attempts to make it aware by interpreting it in the :"
"ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""

# adbf9ce06db24891bf04400e662922ad
#: ../../topics/i18n/timezones.txt:122
msgid ""
"Unfortunately, during DST transitions, some datetimes don't exist or are "
"ambiguous. In such situations, pytz_ raises an exception. Other :class:"
"`~datetime.tzinfo` implementations, such as the local time zone used as a "
"fallback when pytz_ isn't installed, may raise an exception or return "
"inaccurate results. That's why you should always create aware datetime "
"objects when time zone support is enabled."
msgstr ""

# ec419c76b45e4576a2155279b5b5f5cf
#: ../../topics/i18n/timezones.txt:129
msgid ""
"In practice, this is rarely an issue. Django gives you aware datetime "
"objects in the models and forms, and most often, new datetime objects are "
"created from existing ones through :class:`~datetime.timedelta` arithmetic. "
"The only datetime that's often created in application code is the current "
"time, and :func:`timezone.now() <django.utils.timezone.now>` automatically "
"does the right thing."
msgstr ""

# 698efeb9acd84482bb0b6da450d4a968
#: ../../topics/i18n/timezones.txt:139
msgid "Default time zone and current time zone"
msgstr ""

# c5f7515a9eb04abda987c0e688a307f0
#: ../../topics/i18n/timezones.txt:141
msgid ""
"The **default time zone** is the time zone defined by the :setting:"
"`TIME_ZONE` setting."
msgstr ""

# a0ff63a5829f429e9b5b951a01429258
#: ../../topics/i18n/timezones.txt:144
msgid "The **current time zone** is the time zone that's used for rendering."
msgstr ""

# ad997c18bc3b454db7e248a2f7704f75
#: ../../topics/i18n/timezones.txt:146
msgid ""
"You should set the current time zone to the end user's actual time zone "
"with :func:`~django.utils.timezone.activate`. Otherwise, the default time "
"zone is used."
msgstr ""

# 2fea2db9e24449f4906f280d00d058f5
#: ../../topics/i18n/timezones.txt:152
msgid ""
"As explained in the documentation of :setting:`TIME_ZONE`, Django sets "
"environment variables so that its process runs in the default time zone. "
"This happens regardless of the value of :setting:`USE_TZ` and of the current "
"time zone."
msgstr ""

# 611efb11ff204f2ebc12baead2e9a0c9
#: ../../topics/i18n/timezones.txt:157
msgid ""
"When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-"
"compatibility with applications that still rely on local time. However, :ref:"
"`as explained above <naive-datetime-objects>`, this isn't entirely reliable, "
"and you should always work with aware datetimes in UTC in your own code. For "
"instance, use :meth:`~datetime.datetime.utcfromtimestamp` instead of :meth:"
"`~datetime.datetime.fromtimestamp` -- and don't forget to set ``tzinfo`` to :"
"data:`~django.utils.timezone.utc`."
msgstr ""

# c45f63ee8c7a40148f3c53191d3ce0cc
#: ../../topics/i18n/timezones.txt:167
msgid "Selecting the current time zone"
msgstr ""

# 89bb187535eb4b63bf225d2d905018d0
#: ../../topics/i18n/timezones.txt:169
msgid ""
"The current time zone is the equivalent of the current :term:`locale <locale "
"name>` for translations. However, there's no equivalent of the ``Accept-"
"Language`` HTTP header that Django could use to determine the user's time "
"zone automatically. Instead, Django provides :ref:`time zone selection "
"functions <time-zone-selection-functions>`. Use them to build the time zone "
"selection logic that makes sense for you."
msgstr ""

# 1fdbf44fb9324e548950f2886cd378a5
#: ../../topics/i18n/timezones.txt:176
msgid ""
"Most Web sites that care about time zones just ask users in which time zone "
"they live and store this information in the user's profile. For anonymous "
"users, they use the time zone of their primary audience or UTC. pytz_ "
"provides helpers_, like a list of time zones per country, that you can use "
"to pre-select the most likely choices."
msgstr ""

# 272dba6b2121485b9d9b041a7453aedc
#: ../../topics/i18n/timezones.txt:182
msgid ""
"Here's an example that stores the current timezone in the session. (It skips "
"error handling entirely for the sake of simplicity.)"
msgstr ""

# 5642c5a7fc90404fb98f310fea0d65e2
#: ../../topics/i18n/timezones.txt:185
msgid "Add the following middleware to :setting:`MIDDLEWARE_CLASSES`::"
msgstr ""

# f4ed0e89e6414cb4adbe9654be92db22
#: ../../topics/i18n/timezones.txt:195
msgid "Create a view that can set the current timezone::"
msgstr ""

# 21c53031d6dc43788f1fbef4d24ef166
#: ../../topics/i18n/timezones.txt:207
msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr ""

# 227ad88084964d9d9c3aeb82ec4a2646
#: ../../topics/i18n/timezones.txt:226
msgid "Time zone aware input in forms"
msgstr ""

# 5d8a08a216a040c6b7bc743faa810f5b
#: ../../topics/i18n/timezones.txt:228
msgid ""
"When you enable time zone support, Django interprets datetimes entered in "
"forms in the :ref:`current time zone <default-current-time-zone>` and "
"returns aware datetime objects in ``cleaned_data``."
msgstr ""

# 29ebf937f6684837ace1e027c7e21285
#: ../../topics/i18n/timezones.txt:232
msgid ""
"If the current time zone raises an exception for datetimes that don't exist "
"or are ambiguous because they fall in a DST transition (the timezones "
"provided by pytz_ do this), such datetimes will be reported as invalid "
"values."
msgstr ""

# 358ed4bff2764b10adf8a44ce640b61c
#: ../../topics/i18n/timezones.txt:239
msgid "Time zone aware output in templates"
msgstr ""

# ea6efc8ea381442788cd297c9aeca231
#: ../../topics/i18n/timezones.txt:241
msgid ""
"When you enable time zone support, Django converts aware datetime objects to "
"the :ref:`current time zone <default-current-time-zone>` when they're "
"rendered in templates. This behaves very much like :doc:`format localization "
"</topics/i18n/formatting>`."
msgstr ""

# 5536aacd19764a72a95a8e9cbb71f912
#: ../../topics/i18n/timezones.txt:248
msgid ""
"Django doesn't convert naive datetime objects, because they could be "
"ambiguous, and because your code should never produce naive datetimes when "
"time zone support is enabled. However, you can force conversion with the "
"template filters described below."
msgstr ""

# 40de2431ccac4f1fb1ea6f9ab4484a0f
#: ../../topics/i18n/timezones.txt:253
msgid ""
"Conversion to local time isn't always appropriate -- you may be generating "
"output for computers rather than for humans. The following filters and tags, "
"provided by the ``tz`` template tag library, allow you to control the time "
"zone conversions."
msgstr ""

# a1fd1d556ec0473a994cd97f38ad1a48
# b82cb14a50c64252886dc81407bd260c
#: ../../topics/i18n/timezones.txt:264 ../../topics/i18n/timezones.txt:335
msgid "localtime"
msgstr ""

# 3cc819acde20455ba1f82642df51b25e
#: ../../topics/i18n/timezones.txt:266
msgid ""
"Enables or disables conversion of aware datetime objects to the current time "
"zone in the contained block."
msgstr ""

# 9c47f69c59c04db5b24bf7913ebf8849
#: ../../topics/i18n/timezones.txt:269
msgid ""
"This tag has exactly the same effects as the :setting:`USE_TZ` setting as "
"far as the template engine is concerned. It allows a more fine grained "
"control of conversion."
msgstr ""

# c7e9437caa5e4a06bbed048b2f761fac
#: ../../topics/i18n/timezones.txt:273
msgid "To activate or deactivate conversion for a template block, use::"
msgstr ""

# b719500e3b0648bfab9eb4c58130ab55
#: ../../topics/i18n/timezones.txt:287
msgid ""
"The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime %}"
"`` block."
msgstr ""

# e4ecb8c33c664cec9e7011c52b2eba88
# b4e6d83690f44385b3c9ef25cdc9ce7a
#: ../../topics/i18n/timezones.txt:293 ../../topics/i18n/timezones.txt:361
msgid "timezone"
msgstr ""

# 9913599ad01446a2b5d083be447ab3d6
#: ../../topics/i18n/timezones.txt:295
msgid ""
"Sets or unsets the current time zone in the contained block. When the "
"current time zone is unset, the default time zone applies."
msgstr ""

# ce7bbee0f1344e848459487beced6f4b
#: ../../topics/i18n/timezones.txt:313
msgid "get_current_timezone"
msgstr ""

# 47d1220534d54b98a4270b5a97a0c079
#: ../../topics/i18n/timezones.txt:315
msgid ""
"When the ``django.core.context_processors.tz`` context processor is enabled "
"-- by default, it is -- each :class:`~django.template.RequestContext` "
"contains a ``TIME_ZONE`` variable that provides the name of the current time "
"zone."
msgstr ""

# 1cb51e6d615b4134a2e807bb3aa97ea0
#: ../../topics/i18n/timezones.txt:320
msgid ""
"If you don't use a :class:`~django.template.RequestContext`, you can obtain "
"this value with the ``get_current_timezone`` tag::"
msgstr ""

# 84c70565b9b64a9683a489547bd9e3c1
#: ../../topics/i18n/timezones.txt:328
msgid ""
"These filters accept both aware and naive datetimes. For conversion "
"purposes, they assume that naive datetimes are in the default time zone. "
"They always return aware datetimes."
msgstr ""

# 2accfdd8094e45938ae510b1ee6ce423
#: ../../topics/i18n/timezones.txt:337
msgid "Forces conversion of a single value to the current time zone."
msgstr ""

# 4ff08c76fc534c2aa628c39d3bc0b725
#: ../../topics/i18n/timezones.txt:348
msgid "utc"
msgstr ""

# 95e49ca0ec524f6686e197c6a9c2d9a0
#: ../../topics/i18n/timezones.txt:350
msgid "Forces conversion of a single value to UTC."
msgstr ""

# 22482327fb1c4a9491ff6c4966df4ffb
#: ../../topics/i18n/timezones.txt:363
msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr ""

# 6e57723aa3bb4232a511caeed99be756
#: ../../topics/i18n/timezones.txt:365
msgid ""
"The argument must be an instance of a :class:`~datetime.tzinfo` subclass or "
"a time zone name. If it is a time zone name, pytz_ is required."
msgstr ""

# da1d04b7c1ec4bd4968589e315dfbdf8
#: ../../topics/i18n/timezones.txt:377
msgid "Migration guide"
msgstr ""

# 0dbcf607e7e746cda88c67e29700f9a8
#: ../../topics/i18n/timezones.txt:379
msgid ""
"Here's how to migrate a project that was started before Django supported "
"time zones."
msgstr ""

# 15d7b555e07b4bf9ad89d5a4c277d2ed
#: ../../topics/i18n/timezones.txt:383
msgid "Database"
msgstr ""

# fdbacf0e1f0645d5a260d731d104e409
#: ../../topics/i18n/timezones.txt:386
msgid "PostgreSQL"
msgstr ""

# 92c02d029d18460a8cbe513303ac42f4
#: ../../topics/i18n/timezones.txt:388
msgid ""
"The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In "
"practice, this means it converts datetimes from the connection's time zone "
"to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""

# 16f661aaf523490f983377ee8f61443a
#: ../../topics/i18n/timezones.txt:392
msgid ""
"As a consequence, if you're using PostgreSQL, you can switch between "
"``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's "
"time zone will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so "
"that Django obtains correct datetimes in all cases. You don't need to "
"perform any data conversions."
msgstr ""

# 4ab34883573145bd993b2442732fdf39
#: ../../topics/i18n/timezones.txt:399
msgid "Other databases"
msgstr ""

# 30ef125b11a248fcba4fd599a2dc127b
#: ../../topics/i18n/timezones.txt:401
msgid ""
"Other backends store datetimes without time zone information. If you switch "
"from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data "
"from local time to UTC -- which isn't deterministic if your local time has "
"DST."
msgstr ""

# 97af1bd4ac1e48e482d2a62083fc9e00
#: ../../topics/i18n/timezones.txt:406
msgid "Code"
msgstr ""

# d0fa8403d3bf44a8a70c58a0f84689ac
#: ../../topics/i18n/timezones.txt:408
msgid ""
"The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings "
"file and install pytz_ (if possible). At this point, things should mostly "
"work. If you create naive datetime objects in your code, Django makes them "
"aware when necessary."
msgstr ""

# e321f87464b447a98b13a95df826296b
#: ../../topics/i18n/timezones.txt:413
msgid ""
"However, these conversions may fail around DST transitions, which means you "
"aren't getting the full benefits of time zone support yet. Also, you're "
"likely to run into a few problems because it's impossible to compare a naive "
"datetime with an aware datetime. Since Django now gives you aware datetimes, "
"you'll get exceptions wherever you compare a datetime that comes from a "
"model or a form with a naive datetime that you've created in your code."
msgstr ""

# 6084f122f269455097a6672bd60c90f5
#: ../../topics/i18n/timezones.txt:420
msgid ""
"So the second step is to refactor your code wherever you instantiate "
"datetime objects to make them aware. This can be done incrementally. :mod:"
"`django.utils.timezone` defines some handy helpers for compatibility code: :"
"func:`~django.utils.timezone.now`, :func:`~django.utils.timezone.is_aware`, :"
"func:`~django.utils.timezone.is_naive`, :func:`~django.utils.timezone."
"make_aware`, and :func:`~django.utils.timezone.make_naive`."
msgstr ""

# dda0e6ef8dff4b3b821dbedc67f57536
#: ../../topics/i18n/timezones.txt:429
msgid ""
"Finally, in order to help you locate code that needs upgrading, Django "
"raises a warning when you attempt to save a naive datetime to the database::"
msgstr ""

# 665eb8f5a2dc4bf7b41a2cfcf1d1b08a
#: ../../topics/i18n/timezones.txt:434
msgid ""
"During development, you can turn such warnings into exceptions and get a "
"traceback by adding the following to your settings file::"
msgstr ""

# 2d3dd6ebfa27424eaa63c0ce38fb832b
#: ../../topics/i18n/timezones.txt:443
msgid "Fixtures"
msgstr ""

# d536904124a24a0e952086b75dc49283
#: ../../topics/i18n/timezones.txt:445
msgid ""
"When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""

# 9998915d9adc40de959f75644a8b0c96
#: ../../topics/i18n/timezones.txt:449
msgid "For a naive datetime, it obviously isn't::"
msgstr ""

# 1787d41658fd4c7aa1878c5881c7e1ae
#: ../../topics/i18n/timezones.txt:453
msgid ""
"For models with :class:`~django.db.models.DateTimeField`\\ s, this "
"difference makes it impossible to write a fixture that works both with and "
"without time zone support."
msgstr ""

# e8dcf1be0aa14bd180c17c6178b897bd
#: ../../topics/i18n/timezones.txt:457
msgid ""
"Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the "
"\"naive\" format. If your project contains such fixtures, after you enable "
"time zone support, you'll see :exc:`~exceptions.RuntimeWarning`\\ s when you "
"load them. To get rid of the warnings, you must convert your fixtures to the "
"\"aware\" format."
msgstr ""

# b7ce82c8e4e043a18661f15fe84c6902
#: ../../topics/i18n/timezones.txt:463
msgid ""
"You can regenerate fixtures with :djadmin:`loaddata` then :djadmin:"
"`dumpdata`. Or, if they're small enough, you can simply edit them to add the "
"UTC offset that matches your :setting:`TIME_ZONE` to each serialized "
"datetime."
msgstr ""

# c405a3960f344542bf895aeac54a44c3
#: ../../topics/i18n/timezones.txt:470
msgid "FAQ"
msgstr ""

# 0bfdbec86601485891e0dae6a81af158
#: ../../topics/i18n/timezones.txt:473
msgid "Setup"
msgstr ""

# a09348449052413ab0bff0e9f05421e8
#: ../../topics/i18n/timezones.txt:475
msgid ""
"**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""

# ef607c60fb1b489e8f5e6b289c09774e
#: ../../topics/i18n/timezones.txt:477
msgid ""
"Yes. When time zone support is enabled, Django uses a more accurate model of "
"local time. This shields you from subtle and unreproducible bugs around "
"Daylight Saving Time (DST) transitions."
msgstr ""

# c41dbfba146b45bd9eb2e9dd2ddc058a
#: ../../topics/i18n/timezones.txt:481
msgid ""
"In this regard, time zones are comparable to ``unicode`` in Python. At first "
"it's hard. You get encoding and decoding errors. Then you learn the rules. "
"And some problems disappear -- you never get mangled output again when your "
"application receives non-ASCII input."
msgstr ""

# a094c797ead543708eb11bb96cac304c
#: ../../topics/i18n/timezones.txt:486
msgid ""
"When you enable time zone support, you'll encounter some errors because "
"you're using naive datetimes where Django expects aware datetimes. Such "
"errors show up when running tests and they're easy to fix. You'll quickly "
"learn how to avoid invalid operations."
msgstr ""

# 0f4fcdcba9cc463da5713c37a2a38fe3
#: ../../topics/i18n/timezones.txt:491
msgid ""
"On the other hand, bugs caused by the lack of time zone support are much "
"harder to prevent, diagnose and fix. Anything that involves scheduled tasks "
"or datetime arithmetic is a candidate for subtle bugs that will bite you "
"only once or twice a year."
msgstr ""

# 44bd9820d8d6403eae88f45e3d9230c2
#: ../../topics/i18n/timezones.txt:496
msgid ""
"For these reasons, time zone support is enabled by default in new projects, "
"and you should keep it unless you have a very good reason not to."
msgstr ""

# 3268c3f3e61f4283841fe1f0d61e45bc
#: ../../topics/i18n/timezones.txt:499
msgid "**I've enabled time zone support. Am I safe?**"
msgstr ""

# 2dd710fd94354f129360ea894baeb2dd
#: ../../topics/i18n/timezones.txt:501
msgid ""
"Maybe. You're better protected from DST-related bugs, but you can still "
"shoot yourself in the foot by carelessly turning naive datetimes into aware "
"datetimes, and vice-versa."
msgstr ""

# 831af46d3c0a4cab9c790a7d851ccaa4
#: ../../topics/i18n/timezones.txt:505
msgid ""
"If your application connects to other systems -- for instance, if it queries "
"a Web service -- make sure datetimes are properly specified. To transmit "
"datetimes safely, their representation should include the UTC offset, or "
"their values should be in UTC (or both!)."
msgstr ""

# a81704e2983740008414f17746e1f7ef
#: ../../topics/i18n/timezones.txt:510
msgid "Finally, our calendar system contains interesting traps for computers::"
msgstr ""

# e049c7a631f54e529f7ffd8d57344f16
#: ../../topics/i18n/timezones.txt:522
msgid ""
"(To implement this function, you must decide whether 2012-02-29 minus one "
"year is 2011-02-28 or 2011-03-01, which depends on your business "
"requirements.)"
msgstr ""

# 1ca872437c75490fa0c75fe627681b89
#: ../../topics/i18n/timezones.txt:526
msgid "**Should I install pytz?**"
msgstr ""

# a6212f7d716c4d8fb7d2edf35171e4ef
#: ../../topics/i18n/timezones.txt:528
msgid ""
"Yes. Django has a policy of not requiring external dependencies, and for "
"this reason pytz_ is optional. However, it's much safer to install it."
msgstr ""

# f722f967f6f64ae38d7fdb209ed872ba
#: ../../topics/i18n/timezones.txt:531
msgid ""
"As soon as you activate time zone support, Django needs a definition of the "
"default time zone. When pytz is available, Django loads this definition from "
"the `tz database`_. This is the most accurate solution. Otherwise, it relies "
"on the difference between local time and UTC, as reported by the operating "
"system, to compute conversions. This is less reliable, especially around DST "
"transitions."
msgstr ""

# ebc4f2bc0b914a56a9516d40c3fe286b
#: ../../topics/i18n/timezones.txt:538
msgid ""
"Furthermore, if you want to support users in more than one time zone, pytz "
"is the reference for time zone definitions."
msgstr ""

# e6915cc38b504f20a63ade23fa1b4c68
#: ../../topics/i18n/timezones.txt:542
msgid "Troubleshooting"
msgstr ""

# e822cf73851041169416d3acae2999e9
#: ../../topics/i18n/timezones.txt:544
msgid ""
"**My application crashes with** ``TypeError: can't compare offset-naive`` "
"``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""

# 675ba1332c924c49a11ce6fe7027dd48
#: ../../topics/i18n/timezones.txt:547
msgid "Let's reproduce this error by comparing a naive and an aware datetime::"
msgstr ""

# 952eb97a1fce4fc39e44ca39eb7c9b2d
#: ../../topics/i18n/timezones.txt:558
msgid ""
"If you encounter this error, most likely your code is comparing these two "
"things:"
msgstr ""

# 37874752077c4cb0848e0b18a29ceec5
#: ../../topics/i18n/timezones.txt:561
msgid ""
"a datetime provided by Django -- for instance, a value read from a form or a "
"model field. Since you enabled time zone support, it's aware."
msgstr ""

# 2e6000112eab4dd696c4eef3321b5906
#: ../../topics/i18n/timezones.txt:563
msgid ""
"a datetime generated by your code, which is naive (or you wouldn't be "
"reading this)."
msgstr ""

# 3d7358fd17f848beab84d5658f1467a9
#: ../../topics/i18n/timezones.txt:566
msgid ""
"Generally, the correct solution is to change your code to use an aware "
"datetime instead."
msgstr ""

# 1d73f7bbd43840df90a9e26078837e7a
#: ../../topics/i18n/timezones.txt:569
msgid ""
"If you're writing a pluggable application that's expected to work "
"independently of the value of :setting:`USE_TZ`, you may find :func:`django."
"utils.timezone.now` useful. This function returns the current date and time "
"as a naive datetime when ``USE_TZ = False`` and as an aware datetime when "
"``USE_TZ = True``. You can add or subtract :class:`datetime.timedelta` as "
"needed."
msgstr ""

# 6c1a1fe6a7e54d4186cb64284d12a4b2
#: ../../topics/i18n/timezones.txt:576
msgid ""
"**I see lots of** ``RuntimeWarning: DateTimeField received a naive "
"datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` "
"**-- is that bad?**"
msgstr ""

# 5b81d70c2e1444be810f55326a5f8bcd
#: ../../topics/i18n/timezones.txt:580
msgid ""
"When time zone support is enabled, the database layer expects to receive "
"only aware datetimes from your code. This warning occurs when it receives a "
"naive datetime. This indicates that you haven't finished porting your code "
"for time zone support. Please refer to the :ref:`migration guide <time-zones-"
"migration-guide>` for tips on this process."
msgstr ""

# 6eab3ff9ab8f4d398cad96bb9f961572
#: ../../topics/i18n/timezones.txt:586
msgid ""
"In the meantime, for backwards compatibility, the datetime is considered to "
"be in the default time zone, which is generally what you expect."
msgstr ""

# 03075504b3084da3a47078bacfcde791
#: ../../topics/i18n/timezones.txt:589
msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr ""

# dbd493feb14c47259bab9d57e4c14e4d
#: ../../topics/i18n/timezones.txt:591
msgid ""
"If you've always used naive datetimes, you probably believe that you can "
"convert a datetime to a date by calling its :meth:`~datetime.datetime.date` "
"method. You also consider that a :class:`~datetime.date` is a lot like a :"
"class:`~datetime.datetime`, except that it's less accurate."
msgstr ""

# 34cc2cc3c40e431b8e65b81aec855a33
#: ../../topics/i18n/timezones.txt:596
msgid "None of this is true in a time zone aware environment::"
msgstr ""

# 3bbf039a1a474206a908b2cd9ba1cd86
#: ../../topics/i18n/timezones.txt:614
msgid ""
"As this example shows, the same datetime has a different date, depending on "
"the time zone in which it is represented. But the real problem is more "
"fundamental."
msgstr ""

# 4041b9bb20824df78c8bbcdb6591ff51
#: ../../topics/i18n/timezones.txt:618
msgid ""
"A datetime represents a **point in time**. It's absolute: it doesn't depend "
"on anything. On the contrary, a date is a **calendaring concept**. It's a "
"period of time whose bounds depend on the time zone in which the date is "
"considered. As you can see, these two concepts are fundamentally different, "
"and converting a datetime to a date isn't a deterministic operation."
msgstr ""

# 78cef654efdc4c48805c36d05b610108
#: ../../topics/i18n/timezones.txt:624
msgid "What does this mean in practice?"
msgstr ""

# 7789b57f7dae4d39aa069e99302b3ebb
#: ../../topics/i18n/timezones.txt:626
msgid ""
"Generally, you should avoid converting a :class:`~datetime.datetime` to :"
"class:`~datetime.date`. For instance, you can use the :tfilter:`date` "
"template filter to only show the date part of a datetime. This filter will "
"convert the datetime into the current time zone before formatting it, "
"ensuring the results appear correctly."
msgstr ""

# 4e0f1673cfd24f8a87372b00d40b7baa
#: ../../topics/i18n/timezones.txt:632
msgid ""
"If you really need to do the conversion yourself, you must ensure the "
"datetime is converted to the appropriate time zone first. Usually, this will "
"be the current timezone::"
msgstr ""

# e3132a2fd5254b62a75583ea15bccd60
#: ../../topics/i18n/timezones.txt:651
msgid ""
"**I have a string** ``\"2012-02-21 10:28:45\"`` **and I know it's in the** ``"
"\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware datetime?"
"**"
msgstr ""

# 21caed1bd64a46b2bad03332f9a73ad1
#: ../../topics/i18n/timezones.txt:655
msgid "This is exactly what pytz_ is for."
msgstr ""

# 3eb699cb7a8d4fc4bf924a61d0c663e5
#: ../../topics/i18n/timezones.txt:663
msgid ""
"Note that ``localize`` is a pytz extension to the :class:`~datetime.tzinfo` "
"API. Also, you may want to catch ``pytz.InvalidTimeError``. The "
"documentation of pytz contains `more examples`_. You should review it before "
"attempting to manipulate aware datetimes."
msgstr ""

# 1ad4069b2a1f41e5939d2fa082dbca80
#: ../../topics/i18n/timezones.txt:668
msgid "**How can I obtain the local time in the current time zone?**"
msgstr ""

# 92b16a17b88649109e19a83151eaabf8
#: ../../topics/i18n/timezones.txt:670
msgid "Well, the first question is, do you really need to?"
msgstr ""

# 52810860eeb445a2b6710e396623143f
#: ../../topics/i18n/timezones.txt:672
msgid ""
"You should only use local time when you're interacting with humans, and the "
"template layer provides :ref:`filters and tags <time-zones-in-templates>` to "
"convert datetimes to the time zone of your choice."
msgstr ""

# 6866bf917e3c47ecaf91c0ea58ef3944
#: ../../topics/i18n/timezones.txt:676
msgid ""
"Furthermore, Python knows how to compare aware datetimes, taking into "
"account UTC offsets when necessary. It's much easier (and possibly faster) "
"to write all your model and view code in UTC. So, in most circumstances, the "
"datetime in UTC returned by :func:`django.utils.timezone.now` will be "
"sufficient."
msgstr ""

# 97693e257a054bdf9a118557d0e861e5
#: ../../topics/i18n/timezones.txt:682
msgid ""
"For the sake of completeness, though, if you really want the local time in "
"the current time zone, here's how you can obtain it::"
msgstr ""

# 30a880437a3b481c817fcc31d6ff696b
#: ../../topics/i18n/timezones.txt:689
msgid ""
"In this example, pytz_ is installed and the current time zone is ``\"Europe/"
"Paris\"``."
msgstr ""

# 1f8089fda20b401285dc1ba4d0d53bcd
#: ../../topics/i18n/timezones.txt:692
msgid "**How can I see all available time zones?**"
msgstr ""

# 4c411498c35f465891dce580ad2e0516
#: ../../topics/i18n/timezones.txt:694
msgid ""
"pytz_ provides helpers_, including a list of current time zones and a list "
"of all available time zones -- some of which are only of historical interest."
msgstr ""

# 088ea0ce810d4e779f8545967c465b4a
#: ../../topics/i18n/translation.txt:3
msgid "Translation"
msgstr ""

# daeb59bd81bd4191be63ba930cd1ae11
#: ../../topics/i18n/translation.txt:10
msgid ""
"In order to make a Django project translatable, you have to add a minimal "
"amount of hooks to your Python code and templates. These hooks are called :"
"term:`translation strings <translation string>`. They tell Django: \"This "
"text should be translated into the end user's language, if a translation for "
"this text is available in that language.\" It's your responsibility to mark "
"translatable strings; the system can only translate strings it knows about."
msgstr ""

# f0e1df059b704a4abfbe1aa123d11bf2
#: ../../topics/i18n/translation.txt:17
msgid ""
"Django then provides utilities to extract the translation strings into a :"
"term:`message file`. This file is a convenient way for translators to "
"provide the equivalent of the translation strings in the target language. "
"Once the translators have filled in the message file, it must be compiled. "
"This process relies on the GNU gettext toolset."
msgstr ""

# 5e5f56e885cb450f8f45580cd4ccde8b
#: ../../topics/i18n/translation.txt:23
msgid ""
"Once this is done, Django takes care of translating Web apps on the fly in "
"each available language, according to users' language preferences."
msgstr ""

# e41082abc01c429f80f54c5456e4de83
#: ../../topics/i18n/translation.txt:26
msgid ""
"Django's internationalization hooks are on by default, and that means "
"there's a bit of i18n-related overhead in certain places of the framework. "
"If you don't use internationalization, you should take the two seconds to "
"set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then "
"Django will make some optimizations so as not to load the "
"internationalization machinery. You'll probably also want to remove "
"``'django.core.context_processors.i18n'`` from your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

# d89806b4631e41d780b3b1f425ceb7bb
#: ../../topics/i18n/translation.txt:36
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls if Django should implement format localization. See :doc:`/topics/"
"i18n/formatting` for more details."
msgstr ""

# b27c05b75f194d59b05e627c1fe939a4
#: ../../topics/i18n/translation.txt:42
msgid ""
"Make sure you've activated translation for your project (the fastest way is "
"to check if :setting:`MIDDLEWARE_CLASSES` includes :mod:`django.middleware."
"locale.LocaleMiddleware`). If you haven't yet, see :ref:`how-django-"
"discovers-language-preference`."
msgstr ""

# 1a7b992095f54c66a25d54e713d036d4
#: ../../topics/i18n/translation.txt:48
msgid "Internationalization: in Python code"
msgstr ""

# 61781dc07562429192d241779fdd1829
#: ../../topics/i18n/translation.txt:51
msgid "Standard translation"
msgstr ""

# 83679d21a8134b438c86642c0bddccc7
#: ../../topics/i18n/translation.txt:53
msgid ""
"Specify a translation string by using the function :func:`~django.utils."
"translation.ugettext`. It's convention to import this as a shorter alias, "
"``_``, to save typing."
msgstr ""

# b3596539b93c449782c5f7861ed558a0
#: ../../topics/i18n/translation.txt:58
msgid ""
"Python's standard library ``gettext`` module installs ``_()`` into the "
"global namespace, as an alias for ``gettext()``. In Django, we have chosen "
"not to follow this practice, for a couple of reasons:"
msgstr ""

# 7c65681d27a8414c8a9799d939172482
#: ../../topics/i18n/translation.txt:62
msgid ""
"For international character set (Unicode) support, :func:`~django.utils."
"translation.ugettext` is more useful than ``gettext()``. Sometimes, you "
"should be using :func:`~django.utils.translation.ugettext_lazy` as the "
"default translation method for a particular file. Without ``_()`` in the "
"global namespace, the developer has to think about which is the most "
"appropriate translation function."
msgstr ""

# 1103fac31c5b41d9980733d58d785b1a
#: ../../topics/i18n/translation.txt:70
msgid ""
"The underscore character (``_``) is used to represent \"the previous result"
"\" in Python's interactive shell and doctest tests. Installing a global "
"``_()`` function causes interference. Explicitly importing ``ugettext()`` as "
"``_()`` avoids this problem."
msgstr ""

# b852127132ca43099fb58179cbe59d02
#: ../../topics/i18n/translation.txt:77
msgid ""
"In this example, the text ``\"Welcome to my site.\"`` is marked as a "
"translation string::"
msgstr ""

# c79364a07dfe4aed898ea37f280b199f
#: ../../topics/i18n/translation.txt:86
msgid ""
"Obviously, you could code this without using the alias. This example is "
"identical to the previous one::"
msgstr ""

# bc3f264c1fb8464d9655b8504dd203a4
#: ../../topics/i18n/translation.txt:95
msgid ""
"Translation works on computed values. This example is identical to the "
"previous two::"
msgstr ""

# 3dd63616cfbe42aca7c5cf8a7f59e663
#: ../../topics/i18n/translation.txt:103
msgid "Translation works on variables. Again, here's an identical example::"
msgstr ""

# 25a5d2ddc27748e58438091fcb2cea53
#: ../../topics/i18n/translation.txt:110
msgid ""
"(The caveat with using variables or computed values, as in the previous two "
"examples, is that Django's translation-string-detecting utility, :djadmin:"
"`django-admin.py makemessages <makemessages>`, won't be able to find these "
"strings. More on :djadmin:`makemessages` later.)"
msgstr ""

# bbb7136f865f4ff492efe1aaf3bb53a4
#: ../../topics/i18n/translation.txt:115
msgid ""
"The strings you pass to ``_()`` or ``ugettext()`` can take placeholders, "
"specified with Python's standard named-string interpolation syntax. Example::"
msgstr ""

# 930131e99fcd4273a99d33e40f6eb743
#: ../../topics/i18n/translation.txt:122
msgid ""
"This technique lets language-specific translations reorder the placeholder "
"text. For example, an English translation may be ``\"Today is November 26."
"\"``, while a Spanish translation may be ``\"Hoy es 26 de Noviembre.\"`` -- "
"with the the month and the day placeholders swapped."
msgstr ""

# c92e6e0918894ece86567201b5977957
#: ../../topics/i18n/translation.txt:127
msgid ""
"For this reason, you should use named-string interpolation (e.g., ``"
"%(day)s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) "
"whenever you have more than a single parameter. If you used positional "
"interpolation, translations wouldn't be able to reorder placeholder text."
msgstr ""

# 857e8d7ea82d414f90559f640d0c1da1
#: ../../topics/i18n/translation.txt:135
msgid "Comments for translators"
msgstr ""

# 0d4eaad5a71348b9bc29e4298954faeb
#: ../../topics/i18n/translation.txt:137
msgid ""
"If you would like to give translators hints about a translatable string, you "
"can add a comment prefixed with the ``Translators`` keyword on the line "
"preceding the string, e.g.::"
msgstr ""

# 7c2038e9bd7a4081bf1152daea512669
#: ../../topics/i18n/translation.txt:145
msgid ""
"The comment will then appear in the resulting ``.po`` file associated with "
"the translatable contruct located below it and should also be displayed by "
"most translation tools."
msgstr ""

# accf2b6724c446f7bfa45407eded56ae
#: ../../topics/i18n/translation.txt:149
msgid ""
"Just for completeness, this is the corresponding fragment of the resulting "
"``.po`` file:"
msgstr ""

# 29ee1c87e8454a589472771fcf336e69
#: ../../topics/i18n/translation.txt:159
msgid ""
"This also works in templates. See :ref:`translator-comments-in-templates` "
"for more details."
msgstr ""

# fba04f3249aa46b1b44beb202fe0fd0d
#: ../../topics/i18n/translation.txt:163
msgid "Marking strings as no-op"
msgstr ""

# 20516638b7384267a383e27b985790d3
#: ../../topics/i18n/translation.txt:165
msgid ""
"Use the function :func:`django.utils.translation.ugettext_noop()` to mark a "
"string as a translation string without translating it. The string is later "
"translated from a variable."
msgstr ""

# 6cb666596fa84fe294e80e06afb86fdf
#: ../../topics/i18n/translation.txt:169
msgid ""
"Use this if you have constant strings that should be stored in the source "
"language because they are exchanged over systems or users -- such as strings "
"in a database -- but should be translated at the last possible point in "
"time, such as when the string is presented to the user."
msgstr ""

# 71c4a811706c454f9b26315724b05a87
#: ../../topics/i18n/translation.txt:175
msgid "Pluralization"
msgstr ""

# 51c6940cd66a44abab4c1239d67f15cc
#: ../../topics/i18n/translation.txt:177
msgid ""
"Use the function :func:`django.utils.translation.ungettext()` to specify "
"pluralized messages."
msgstr ""

# c539c0ba634744eb91282807e2291e00
#: ../../topics/i18n/translation.txt:180
msgid ""
"``ungettext`` takes three arguments: the singular translation string, the "
"plural translation string and the number of objects."
msgstr ""

# 1eb5fc717297420ea19fd472e7588144
#: ../../topics/i18n/translation.txt:183
msgid ""
"This function is useful when you need your Django application to be "
"localizable to languages where the number and complexity of `plural forms "
"<http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is "
"greater than the two forms used in English ('object' for the singular and "
"'objects' for all the cases where ``count`` is different from one, "
"irrespective of its value.)"
msgstr ""

# 84b86d10a27d4f56a8efcee6fa3b0f23
#: ../../topics/i18n/translation.txt:203
msgid ""
"In this example the number of objects is passed to the translation languages "
"as the ``count`` variable."
msgstr ""

# 3b1a14077c5b4142b1575fe5501c6046
#: ../../topics/i18n/translation.txt:206
msgid "Lets see a slightly more complex usage example::"
msgstr ""

# 2b7a11f20873497f8f0fa3ef1a082c9a
#: ../../topics/i18n/translation.txt:225
msgid ""
"Here we reuse localizable, hopefully already translated literals (contained "
"in the ``verbose_name`` and ``verbose_name_plural`` model ``Meta`` options) "
"for other parts of the sentence so all of it is consistently based on the "
"cardinality of the elements at play."
msgstr ""

# f5bbeb4691ad42d5a1783b10d9abb03f
#: ../../topics/i18n/translation.txt:234
msgid ""
"When using this technique, make sure you use a single name for every "
"extrapolated variable included in the literal. In the example above note how "
"we used the ``name`` Python variable in both translation strings. This "
"example would fail::"
msgstr ""

# 632c5b6af0b34e44998c38c386147647
#: ../../topics/i18n/translation.txt:254
msgid ""
"You would get an error when running :djadmin:`django-admin.py "
"compilemessages <compilemessages>`::"
msgstr ""

# 5a7d243457c045aabea19093f6cfa193
#: ../../topics/i18n/translation.txt:262
msgid "Contextual markers"
msgstr ""

# 7282a420a7ce4befbedf9c3f1579d1ca
#: ../../topics/i18n/translation.txt:264
msgid ""
"Sometimes words have several meanings, such as ``\"May\"`` in English, which "
"refers to a month name and to a verb. To enable translators to translate "
"these words correctly in different contexts, you can use the :func:`django."
"utils.translation.pgettext()` function, or the :func:`django.utils."
"translation.npgettext()` function if the string needs pluralization. Both "
"take a context string as the first variable."
msgstr ""

# caeead97051c4d7ab602454ecc27e19b
#: ../../topics/i18n/translation.txt:271
msgid ""
"In the resulting ``.po`` file, the string will then appear as often as there "
"are different contextual markers for the same string (the context will "
"appear on the ``msgctxt`` line), allowing the translator to give a different "
"translation for each of them."
msgstr ""

# 874d547fe5914bfeabc95708dd0b7010
#: ../../topics/i18n/translation.txt:282
msgid "or::"
msgstr ""

# c4530f3f3bd44d4393204512d0f3b40b
#: ../../topics/i18n/translation.txt:290
msgid "will appear in the ``.po`` file as:"
msgstr ""

# afee5b60628f4ec0a5594e52436070c3
#: ../../topics/i18n/translation.txt:300
msgid ""
"Contextual markers are also supported by the :ttag:`trans` and :ttag:"
"`blocktrans` template tags."
msgstr ""

# d714190706664bd38572d31f1a2e82f3
#: ../../topics/i18n/translation.txt:306
msgid "Lazy translation"
msgstr ""

# cbf1cd1d08124897867cce5b1ffcf176
#: ../../topics/i18n/translation.txt:308
msgid ""
"Use the lazy versions of translation functions in :mod:`django.utils."
"translation` (easily recognizable by the ``lazy`` suffix in their names) to "
"translate strings lazily -- when the value is accessed rather than when "
"they're called."
msgstr ""

# 322d6d9c179341079986c39196b04c6d
#: ../../topics/i18n/translation.txt:313
msgid ""
"These functions store a lazy reference to the string -- not the actual "
"translation. The translation itself will be done when the string is used in "
"a string context, such as in template rendering."
msgstr ""

# caa7489b706d412fa1158c5f8d5de1d3
#: ../../topics/i18n/translation.txt:317
msgid ""
"This is essential when calls to these functions are located in code paths "
"that are executed at module load time."
msgstr ""

# 05d1cc6fd57646ebab5e38255853eb3e
#: ../../topics/i18n/translation.txt:320
msgid ""
"This is something that can easily happen when defining models, forms and "
"model forms, because Django implements these such that their fields are "
"actually class-level attributes. For that reason, make sure to use lazy "
"translations in the following cases:"
msgstr ""

# c294d3ea5f7346ad858491c603ede150
#: ../../topics/i18n/translation.txt:326
msgid ""
"Model fields and relationships ``verbose_name`` and ``help_text`` option "
"values"
msgstr ""

# 4a919aa6d79b4eb9a56338ade736c06b
#: ../../topics/i18n/translation.txt:328
msgid ""
"For example, to translate the help text of the *name* field in the following "
"model, do the following::"
msgstr ""

# 5d64b2457e1741758670d43d12fda4e3
#: ../../topics/i18n/translation.txt:336
msgid ""
"You can mark names of ``ForeignKey``, ``ManyTomanyField`` or "
"``OneToOneField`` relationship as translatable by using their "
"``verbose_name`` options::"
msgstr ""

# 483a31e0717f42ef945e052f5154cd7c
#: ../../topics/i18n/translation.txt:345
msgid ""
"Just like you would do in :attr:`~django.db.models.Options.verbose_name` you "
"should provide a lowercase verbose name text for the relation as Django will "
"automatically titlecase it when required."
msgstr ""

# ea6df6fd477447cd90034b37a0a41772
#: ../../topics/i18n/translation.txt:350
msgid "Model verbose names values"
msgstr ""

# 95ed9aa3eb8c48f18e1fd713cedcc191
#: ../../topics/i18n/translation.txt:352
msgid ""
"It is recommended to always provide explicit :attr:`~django.db.models."
"Options.verbose_name` and :attr:`~django.db.models.Options."
"verbose_name_plural` options rather than relying on the fallback English-"
"centric and somewhat naïve determination of verbose names Django performs by "
"looking at the model's class name::"
msgstr ""

# e7cc28cf08ad4479a313fd4118630ee1
#: ../../topics/i18n/translation.txt:368
msgid "Model methods ``short_description`` attribute values"
msgstr ""

# 975e31fb30e24257af2bd100fb432866
#: ../../topics/i18n/translation.txt:370
msgid ""
"For model methods, you can provide translations to Django and the admin site "
"with the ``short_description`` attribute::"
msgstr ""

# 31d04e743898443386d71d9928d97f27
#: ../../topics/i18n/translation.txt:384
msgid "Working with lazy translation objects"
msgstr ""

# 1bc7c0fc60374588b86f0c52bb959803
#: ../../topics/i18n/translation.txt:386
msgid ""
"The result of a ``ugettext_lazy()`` call can be used wherever you would use "
"a unicode string (an object with type ``unicode``) in Python. If you try to "
"use it where a bytestring (a ``str`` object) is expected, things will not "
"work as expected, since a ``ugettext_lazy()`` object doesn't know how to "
"convert itself to a bytestring. You can't use a unicode string inside a "
"bytestring, either, so this is consistent with normal Python behavior. For "
"example::"
msgstr ""

# b16ace00cd234cc9bdef9c20011302a3
#: ../../topics/i18n/translation.txt:400
msgid ""
"If you ever see output that looks like ``\"hello <django.utils.functional...>"
"\"``, you have tried to insert the result of ``ugettext_lazy()`` into a "
"bytestring. That's a bug in your code."
msgstr ""

# abb5b0232b714719af6b78457194c0a9
#: ../../topics/i18n/translation.txt:404
msgid ""
"If you don't like the long ``ugettext_lazy`` name, you can just alias it as "
"``_`` (underscore), like so::"
msgstr ""

# 6ad14247f0e94221ac7c2f01a72dee08
#: ../../topics/i18n/translation.txt:412
msgid ""
"Using ``ugettext_lazy()`` and ``ungettext_lazy()`` to mark strings in models "
"and utility functions is a common operation. When you're working with these "
"objects elsewhere in your code, you should ensure that you don't "
"accidentally convert them to strings, because they should be converted as "
"late as possible (so that the correct locale is in effect). This "
"necessitates the use of the helper function described next."
msgstr ""

# 692eeeb6ac634171a0c83360321896e0
#: ../../topics/i18n/translation.txt:420
msgid "Joining strings: string_concat()"
msgstr ""

# d9dcff91ffda488db9d861be92e8786b
#: ../../topics/i18n/translation.txt:422
msgid ""
"Standard Python string joins (``''.join([...])``) will not work on lists "
"containing lazy translation objects. Instead, you can use :func:`django."
"utils.translation.string_concat()`, which creates a lazy object that "
"concatenates its contents *and* converts them to strings only when the "
"result is included in a string. For example::"
msgstr ""

# c363ebb0187a4720a82afef0a228fb0f
#: ../../topics/i18n/translation.txt:434
msgid ""
"In this case, the lazy translations in ``result`` will only be converted to "
"strings when ``result`` itself is used in a string (usually at template "
"rendering time)."
msgstr ""

# 4c9a7a79df814f4688519847abf51aa2
#: ../../topics/i18n/translation.txt:439
msgid "Other uses of lazy in delayed translations"
msgstr ""

# 5dc6a2455fce47829909e47ffd038244
#: ../../topics/i18n/translation.txt:441
msgid ""
"For any other case where you would like to delay the translation, but have "
"to pass the translatable string as argument to another function, you can "
"wrap this function inside a lazy call yourself. For example::"
msgstr ""

# c3dea5188294462b8dbd25976dd01e4f
#: ../../topics/i18n/translation.txt:452
msgid "And then later::"
msgstr ""

# 93c19976993448bb8c5892023216a00c
#: ../../topics/i18n/translation.txt:457
msgid "Localized names of languages"
msgstr ""

# b779ee917f5c4ffca664d5fb9cf22986
#: ../../topics/i18n/translation.txt:461
msgid ""
"The ``get_language_info()`` function provides detailed information about "
"languages::"
msgstr ""

# cfc87377df504805ad8414bcbe9e7660
#: ../../topics/i18n/translation.txt:469
msgid ""
"The ``name`` and ``name_local`` attributes of the dictionary contain the "
"name of the language in English and in the language itself, respectively.  "
"The ``bidi`` attribute is True only for bi-directional languages."
msgstr ""

# 2a420ba1367b46f493a206d94027527a
#: ../../topics/i18n/translation.txt:473
msgid ""
"The source of the language information is the ``django.conf.locale`` module. "
"Similar access to this information is available for template code. See below."
msgstr ""

# ee98f81508424694862e9f9b6b26b3ff
#: ../../topics/i18n/translation.txt:479
msgid "Internationalization: in template code"
msgstr ""

# 925cf1bcff6744c0901faf4808daaa35
#: ../../topics/i18n/translation.txt:483
msgid ""
"Translations in :doc:`Django templates </topics/templates>` uses two "
"template tags and a slightly different syntax than in Python code. To give "
"your template access to these tags, put ``{% load i18n %}`` toward the top "
"of your template. As with all template tags, this tag needs to be loaded in "
"all templates which use translations, even those templates that extend from "
"other templates which have already loaded the ``i18n`` tag."
msgstr ""

# 99038b6979c04664bc67d8987547c72e
#: ../../topics/i18n/translation.txt:493
msgid "``trans`` template tag"
msgstr ""

# 649d4a72c5eb4d269136b870b3908e70
#: ../../topics/i18n/translation.txt:495
msgid ""
"The ``{% trans %}`` template tag translates either a constant string "
"(enclosed in single or double quotes) or variable content::"
msgstr ""

# 946e88f338d744509883564c2e204172
#: ../../topics/i18n/translation.txt:501
msgid ""
"If the ``noop`` option is present, variable lookup still takes place but the "
"translation is skipped. This is useful when \"stubbing out\" content that "
"will require translation in the future::"
msgstr ""

# b6001b5cd44346d3a6e2c460b2c1687b
#: ../../topics/i18n/translation.txt:507
msgid ""
"Internally, inline translations use an :func:`~django.utils.translation."
"ugettext` call."
msgstr ""

# 484f89c80bca429186a9b3be95e7cac6
#: ../../topics/i18n/translation.txt:510
msgid ""
"In case a template var (``myvar`` above) is passed to the tag, the tag will "
"first resolve such variable to a string at run-time and then look up that "
"string in the message catalogs."
msgstr ""

# 8d084512115b4b85bea92ef0075347b1
#: ../../topics/i18n/translation.txt:514
msgid ""
"It's not possible to mix a template variable inside a string within ``{% "
"trans %}``. If your translations require strings with variables "
"(placeholders), use ``{% blocktrans %}`` instead."
msgstr ""

# af6f8b17f14942a280f6085f25366107
#: ../../topics/i18n/translation.txt:520
msgid ""
"If you'd like to retrieve a translated string without displaying it, you can "
"use the following syntax::"
msgstr ""

# b2a21439895b46b2b98eafce77d08c87
#: ../../topics/i18n/translation.txt:528
msgid ""
"In practice you'll use this to get strings that are used in multiple places "
"or should be used as arguments for other template tags or filters::"
msgstr ""

# 7eff3bb699134c4d92d21156141f7ee3
#: ../../topics/i18n/translation.txt:546
msgid ""
"``{% trans %}`` also supports :ref:`contextual markers<contextual-markers>` "
"using the ``context`` keyword:"
msgstr ""

# 4680e9686c7a4890ac1b459acd2d395a
#: ../../topics/i18n/translation.txt:556
msgid "``blocktrans`` template tag"
msgstr ""

# 4196e0bae60146cf82d76923e14efe1e
#: ../../topics/i18n/translation.txt:558
msgid ""
"Contrarily to the :ttag:`trans` tag, the ``blocktrans`` tag allows you to "
"mark complex sentences consisting of literals and variable content for "
"translation by making use of placeholders::"
msgstr ""

# 45d728817e3d4bd4b234fea6f4b58539
#: ../../topics/i18n/translation.txt:564
msgid ""
"To translate a template expression -- say, accessing object attributes or "
"using template filters -- you need to bind the expression to a local "
"variable for use within the translation block. Examples::"
msgstr ""

# 670f699db8e14f7bbb22e6a02d608527
#: ../../topics/i18n/translation.txt:576
msgid "You can use multiple expressions inside a single ``blocktrans`` tag::"
msgstr ""

# 374f2489f48a4a13ba2894ced36901f3
#: ../../topics/i18n/translation.txt:582
msgid ""
"The previous more verbose format is still supported: ``{% blocktrans with "
"book|title as book_t and author|title as author_t %}``"
msgstr ""

# 69052a71dfb54b2d91ceaef4c5d5f0de
#: ../../topics/i18n/translation.txt:587
msgid ""
"If resolving one of the block arguments fails, blocktrans will fall back to "
"the default language by deactivating the currently active language "
"temporarily with the :func:`~django.utils.translation.deactivate_all` "
"function."
msgstr ""

# 3450dbefca92401dabd5d2d3ec512d9d
#: ../../topics/i18n/translation.txt:592
msgid "This tag also provides for pluralization. To use it:"
msgstr ""

# b56f7217330d4c969abda89c5dbb317c
#: ../../topics/i18n/translation.txt:594
msgid ""
"Designate and bind a counter value with the name ``count``. This value will "
"be the one used to select the right plural form."
msgstr ""

# 9679965529bf473585722c21a9216758
#: ../../topics/i18n/translation.txt:597
msgid ""
"Specify both the singular and plural forms separating them with the ``{% "
"plural %}`` tag within the ``{% blocktrans %}`` and ``{% endblocktrans %}`` "
"tags."
msgstr ""

# d610cdc9e5e349e79c447ab075e93fea
#: ../../topics/i18n/translation.txt:609
msgid "A more complex example::"
msgstr ""

# 0c243244355e4caeb172fb4c07808aaa
#: ../../topics/i18n/translation.txt:617
msgid ""
"When you use both the pluralization feature and bind values to local "
"variables in addition to the counter value, keep in mind that the "
"``blocktrans`` construct is internally converted to an ``ungettext`` call. "
"This means the same :ref:`notes regarding ungettext variables <pluralization-"
"var-notes>` apply."
msgstr ""

# 0d45775d5c5a4929b3b1eeb198b6f335
#: ../../topics/i18n/translation.txt:623
msgid ""
"Reverse URL lookups cannot be carried out within the ``blocktrans`` and "
"should be retrieved (and stored) beforehand::"
msgstr ""

# 7a074a39b7a042648158ec23c45241cc
#: ../../topics/i18n/translation.txt:633
msgid ""
"``{% blocktrans %}`` also supports :ref:`contextual markers<contextual-"
"markers>` using the ``context`` keyword:"
msgstr ""

# 97aa370c90c44b26a4b4de0d77711deb
#: ../../topics/i18n/translation.txt:641
msgid "String literals passed to tags and filters"
msgstr ""

# 93d789cf6d384cd986a1b80bd426bba3
#: ../../topics/i18n/translation.txt:643
msgid ""
"You can translate string literals passed as arguments to tags and filters by "
"using the familiar ``_()`` syntax::"
msgstr ""

# fe0eda6896ce4c87bceffd6b8859f3bf
#: ../../topics/i18n/translation.txt:648
msgid ""
"In this case, both the tag and the filter will see the translated string, so "
"they don't need to be aware of translations."
msgstr ""

# 51e4d8833e7f495c936755d73ad0356d
#: ../../topics/i18n/translation.txt:652
msgid ""
"In this example, the translation infrastructure will be passed the string ``"
"\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The "
"translated string will need to contain the comma so that the filter parsing "
"code knows how to split up the arguments. For example, a German translator "
"might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the "
"comma intact)."
msgstr ""

# 45125e0f1d514dcc8b59e7bef93d74a2
#: ../../topics/i18n/translation.txt:662
msgid "Comments for translators in templates"
msgstr ""

# 08ac8f2e06e0470394faeb5005254273
#: ../../topics/i18n/translation.txt:645
msgid ""
"Just like with :ref:`Python code <translator-comments>`, these notes for "
"translators can be specified using comments, either with the :ttag:`comment` "
"tag:"
msgstr ""

# 96693b35211a4faf9dc378f3b8e041c3
#: ../../topics/i18n/translation.txt:658
msgid ""
"or with the ``{#`` ... ``#}`` :ref:`one-line comment constructs <template-"
"comments>`:"
msgstr ""

# 12bb2797f6a849bc81759ed5684adb48
#: ../../topics/i18n/translation.txt:668
msgid ""
"Just for completeness, these are the corresponding fragments of the "
"resulting ``.po`` file:"
msgstr ""

# 711ea65b873548bd9c780b2798326acf
#: ../../topics/i18n/translation.txt:700
msgid "Switching language in templates"
msgstr ""

# 7ee3cd0d68c8478dabd1aa9d907876e1
#: ../../topics/i18n/translation.txt:702
msgid ""
"If you want to select a language within a template, you can use the "
"``language`` template tag:"
msgstr ""

# 57fa4fc5739040b1a02db08797267d4e
#: ../../topics/i18n/translation.txt:719
msgid ""
"While the first occurrence of \"Welcome to our page\" uses the current "
"language, the second will always be in English."
msgstr ""

# 772d9e111ca0402ca1d583243940880d
#: ../../topics/i18n/translation.txt:725
msgid "Other tags"
msgstr ""

# 461b0608061b467c91e1fe04f467123c
#: ../../topics/i18n/translation.txt:727
msgid ""
"Each ``RequestContext`` has access to three translation-specific variables:"
msgstr ""

# aebffb39e3da48ac94b46b4428d050ff
#: ../../topics/i18n/translation.txt:729
msgid ""
"``LANGUAGES`` is a list of tuples in which the first element is the :term:"
"`language code` and the second is the language name (translated into the "
"currently active locale)."
msgstr ""

# 00b958f14cb24e05a39ffa69abed033e
#: ../../topics/i18n/translation.txt:733
msgid ""
"``LANGUAGE_CODE`` is the current user's preferred language, as a string. "
"Example: ``en-us``. (See :ref:`how-django-discovers-language-preference`.)"
msgstr ""

# 5a39ee3105ec4cf29c5bafb451ec2d49
#: ../../topics/i18n/translation.txt:736
msgid ""
"``LANGUAGE_BIDI`` is the current locale's direction. If True, it's a right-"
"to-left language, e.g.: Hebrew, Arabic. If False it's a left-to-right "
"language, e.g.: English, French, German etc."
msgstr ""

# 69e895d1be294ef7a17dcbc1834ecc3c
#: ../../topics/i18n/translation.txt:740
msgid ""
"If you don't use the ``RequestContext`` extension, you can get those values "
"with three tags::"
msgstr ""

# 72c78c0c43bf4f948de6a47e1e488454
#: ../../topics/i18n/translation.txt:747
msgid "These tags also require a ``{% load i18n %}``."
msgstr ""

# bd7049e8b0d94db08e9c038adb8a2440
#: ../../topics/i18n/translation.txt:768
msgid ""
"You can also retrieve information about any of the available languages using "
"provided template tags and filters. To get information about a single "
"language, use the ``{% get_language_info %}`` tag::"
msgstr ""

# 933422c720e54db2a7485f341bc2e334
#: ../../topics/i18n/translation.txt:773
msgid "You can then access the information::"
msgstr ""

# 5188c7dd4cc84f5b97c9e82f6f972de1
#: ../../topics/i18n/translation.txt:780
msgid ""
"You can also use the ``{% get_language_info_list %}`` template tag to "
"retrieve information for a list of languages (e.g. active languages as "
"specified in :setting:`LANGUAGES`). See :ref:`the section about the "
"set_language redirect view <set_language-redirect-view>` for an example of "
"how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""

# 0b1cfcdb9fa8422198f6e9a1ad30352f
#: ../../topics/i18n/translation.txt:786
msgid ""
"In addition to :setting:`LANGUAGES` style nested tuples, ``{% "
"get_language_info_list %}`` supports simple lists of language codes. If you "
"do this in your view:"
msgstr ""

# 9bbf257ece8c41e0a5c58395a2e55e19
#: ../../topics/i18n/translation.txt:796
msgid "you can iterate over those languages in the template::"
msgstr ""

# c03b7f0552444e9599a28c936bc9faad
#: ../../topics/i18n/translation.txt:801
msgid "There are also simple filters available for convenience:"
msgstr ""

# 878da82b276942f888d7578b963802b1
#: ../../topics/i18n/translation.txt:803
msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr ""

# aa1aa21dbdcc45509c585fc6c0e14ae3
#: ../../topics/i18n/translation.txt:804
msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr ""

# 9b4344ab754147a0aaf9f5a61b810ae4
#: ../../topics/i18n/translation.txt:805
msgid "``{{ LANGUAGE_CODE|bidi }}`` (False)"
msgstr ""

# 2d549a5457ea4ce397aca51aef30b8d0
#: ../../topics/i18n/translation.txt:810
msgid "Internationalization: in JavaScript code"
msgstr ""

# b8563af975474025bc73ace59e6dc3c3
#: ../../topics/i18n/translation.txt:814
msgid "Adding translations to JavaScript poses some problems:"
msgstr ""

# fe3be5ca90ad48b0bba5def40dca7120
#: ../../topics/i18n/translation.txt:816
msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr ""

# 1fc474acb3e44a0388d6f135bfc0e6f3
#: ../../topics/i18n/translation.txt:818
msgid ""
"JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need "
"to be delivered by the server."
msgstr ""

# 8c780aa831b747dbbef8d095c0c686ca
#: ../../topics/i18n/translation.txt:821
msgid ""
"The translation catalogs for JavaScript should be kept as small as possible."
msgstr ""

# a27790bff147434aa0df8765f9b4a5dc
#: ../../topics/i18n/translation.txt:824
msgid ""
"Django provides an integrated solution for these problems: It passes the "
"translations into JavaScript, so you can call ``gettext``, etc., from within "
"JavaScript."
msgstr ""

# 467a9a0b138b4e3c8572442246add6ee
#: ../../topics/i18n/translation.txt:831
msgid "The ``javascript_catalog`` view"
msgstr ""

# fefd23251e264cbc81b43e9a6f4cead0
#: ../../topics/i18n/translation.txt:837
msgid ""
"The main solution to these problems is the :meth:`django.views.i18n."
"javascript_catalog` view, which sends out a JavaScript code library with "
"functions that mimic the ``gettext`` interface, plus an array of translation "
"strings. Those translation strings are taken from applications or Django "
"core, according to what you specify in either the ``info_dict`` or the URL. "
"Paths listed in :setting:`LOCALE_PATHS` are also included."
msgstr ""

# d70d51546cee4cc5bfa86a7683036c16
#: ../../topics/i18n/translation.txt:844
msgid "You hook it up like this::"
msgstr ""

# 3ed6f3d1fe7e4ec39ba689191be6e393
#: ../../topics/i18n/translation.txt:854
msgid ""
"Each string in ``packages`` should be in Python dotted-package syntax (the "
"same format as the strings in :setting:`INSTALLED_APPS`) and should refer to "
"a package that contains a ``locale`` directory. If you specify multiple "
"packages, all those catalogs are merged into one catalog. This is useful if "
"you have JavaScript that uses strings from different applications."
msgstr ""

# 556fa8c5ff2243bb86ac6163b0a44f15
#: ../../topics/i18n/translation.txt:860
msgid ""
"The precedence of translations is such that the packages appearing later in "
"the ``packages`` argument have higher precedence than the ones appearing at "
"the beginning, this is important in the case of clashing translations for "
"the same literal."
msgstr ""

# a22f8c3cea0b46b582aa1ede99be878d
#: ../../topics/i18n/translation.txt:865
msgid ""
"By default, the view uses the ``djangojs`` gettext domain. This can be "
"changed by altering the ``domain`` argument."
msgstr ""

# f1bd66994a7b49798552fa201e2fd54a
#: ../../topics/i18n/translation.txt:868
msgid ""
"You can make the view dynamic by putting the packages into the URL pattern::"
msgstr ""

# ec38f8665cd8406d943972e9119fdbfa
#: ../../topics/i18n/translation.txt:874
msgid ""
"With this, you specify the packages as a list of package names delimited by "
"'+' signs in the URL. This is especially useful if your pages use code from "
"different apps and this changes often and you don't want to pull in one big "
"catalog file. As a security measure, these values can only be either "
"``django.conf`` or any package from the :setting:`INSTALLED_APPS` setting."
msgstr ""

# 3450f1c36c7c4aaa97aacd2eb7876a19
#: ../../topics/i18n/translation.txt:880
msgid ""
"The JavaScript translations found in the paths listed in the :setting:"
"`LOCALE_PATHS` setting are also always included. To keep consistency with "
"the translations lookup order algorithm used for Python and templates, the "
"directories listed in :setting:`LOCALE_PATHS` have the highest precedence "
"with the ones appearing first having higher precedence than the ones "
"appearing later."
msgstr ""

# 6640b311152744f8a889016650db4532
#: ../../topics/i18n/translation.txt:888
msgid "Using the JavaScript translation catalog"
msgstr ""

# fd7aa7ece80947bbae811b8f1c26b20c
#: ../../topics/i18n/translation.txt:892
msgid ""
"To use the catalog, just pull in the dynamically generated script like this:"
msgstr ""

# e81265d2c3a74c5f825237ac9dfe8d8e
#: ../../topics/i18n/translation.txt:898
msgid ""
"This uses reverse URL lookup to find the URL of the JavaScript catalog view. "
"When the catalog is loaded, your JavaScript code can use the standard "
"``gettext`` interface to access it::"
msgstr ""

# 38b5122edeb2485faa767a2b7ff381cd
#: ../../topics/i18n/translation.txt:904
msgid "There is also an ``ngettext`` interface::"
msgstr ""

# d440418b8dc242c28d28ba21cb753239
#: ../../topics/i18n/translation.txt:910
msgid "and even a string interpolation function::"
msgstr ""

# 5bf7266cb7b741c08398324db6d312da
#: ../../topics/i18n/translation.txt:914
msgid ""
"The interpolation syntax is borrowed from Python, so the ``interpolate`` "
"function supports both positional and named interpolation:"
msgstr ""

# 3b285a7ef7044edebcf7c0a00ee433af
#: ../../topics/i18n/translation.txt:917
msgid ""
"Positional interpolation: ``obj`` contains a JavaScript Array object whose "
"elements values are then sequentially interpolated in their corresponding "
"``fmt`` placeholders in the same order they appear. For example::"
msgstr ""

# d90a7e5fffae48b0979d8744fcd4affe
#: ../../topics/i18n/translation.txt:927
msgid ""
"Named interpolation: This mode is selected by passing the optional boolean "
"``named`` parameter as true. ``obj`` contains a JavaScript object or "
"associative array. For example::"
msgstr ""

# 7805b73b23fd430b8c9755aee445f6f0
#: ../../topics/i18n/translation.txt:940
msgid ""
"You shouldn't go over the top with string interpolation, though: this is "
"still JavaScript, so the code has to make repeated regular-expression "
"substitutions. This isn't as fast as string interpolation in Python, so keep "
"it to those cases where you really need it (for example, in conjunction with "
"``ngettext`` to produce proper pluralizations)."
msgstr ""

# d029760aff11417a9ba000aa1f1ab46d
#: ../../topics/i18n/translation.txt:947
msgid "Note on performance"
msgstr ""

# ddd4196e080f4796800826ffe1c88f7d
#: ../../topics/i18n/translation.txt:949
msgid ""
"The :func:`~django.views.i18n.javascript_catalog` view generates the catalog "
"from ``.mo`` files on every request. Since its output is constant — at least "
"for a given version of a site — it's a good candidate for caching."
msgstr ""

# bac9930fa76b49d8a43d473ccb0194b5
#: ../../topics/i18n/translation.txt:953
msgid ""
"Server-side caching will reduce CPU load. It's easily implemented with the :"
"func:`~django.views.decorators.cache.cache_page` decorator. To trigger cache "
"invalidation when your translations change, provide a version-dependant key "
"prefix, as shown in the example below, or map the view at a version-"
"dependant URL."
msgstr ""

# 8a8188385a324b739abdb37e9e7082e4
#: ../../topics/i18n/translation.txt:969
msgid ""
"Client-side caching will save bandwidth and make your site load faster. If "
"you're using ETags (:setting:`USE_ETAGS = True <USE_ETAGS>`), you're already "
"covered. Otherwise, you can apply :ref:`conditional decorators <conditional-"
"decorators>`. In the following example, the cache is invalidated whenever "
"your restart your application server."
msgstr ""

# 3985d581c2b6463e9c368f0c28d526bc
#: ../../topics/i18n/translation.txt:986
msgid ""
"You can even pre-generate the javascript catalog as part of your deployment "
"procedure and serve it as a static file. This radical technique is "
"implemented in django-statici18n_."
msgstr ""

# cf92b2ee71d14937a70ce93d511c2821
#: ../../topics/i18n/translation.txt:995
msgid "Internationalization: in URL patterns"
msgstr ""

# c2cd8479cbd2433f99ef5422f1bc2423
#: ../../topics/i18n/translation.txt:1001
msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr ""

# 37246efbe7ac4d3aace8590f5a4cd348
#: ../../topics/i18n/translation.txt:1003
msgid ""
"Adding the language prefix to the root of the URL patterns to make it "
"possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect "
"the language to activate from the requested URL."
msgstr ""

# 0db200d8e99343f6a5b3aad98baa58be
#: ../../topics/i18n/translation.txt:1007
msgid ""
"Making URL patterns themselves translatable via the :func:`django.utils."
"translation.ugettext_lazy()` function."
msgstr ""

# 83bba688958847beabb206db08c25110
#: ../../topics/i18n/translation.txt:1012
msgid ""
"Using either one of these features requires that an active language be set "
"for each request; in other words, you need to have :class:`django.middleware."
"locale.LocaleMiddleware` in your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

# 2f814662fdc542a8805d0f481c9a572c
#: ../../topics/i18n/translation.txt:1018
msgid "Language prefix in URL patterns"
msgstr ""

# e21d99b23e39435aa8946c38be4d257e
#: ../../topics/i18n/translation.txt:1022
msgid ""
"This function can be used in your root URLconf as a replacement for the "
"normal :func:`django.conf.urls.patterns` function. Django will automatically "
"prepend the current active language code to all url patterns defined within :"
"func:`~django.conf.urls.i18n.i18n_patterns`. Example URL patterns::"
msgstr ""

# 69a59bd59ba24a78974777ae76e5b743
#: ../../topics/i18n/translation.txt:1046
msgid ""
"After defining these URL patterns, Django will automatically add the "
"language prefix to the URL patterns that were added by the ``i18n_patterns`` "
"function. Example::"
msgstr ""

# 45ba9df4d8b84e1c978290035309efdf
#: ../../topics/i18n/translation.txt:1065
msgid ""
":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in your root "
"URLconf. Using it within an included URLconf will throw an :exc:`~django."
"core.exceptions.ImproperlyConfigured` exception."
msgstr ""

# d0ccd1aa8f7649caa3285e7b2233de81
#: ../../topics/i18n/translation.txt:1071
msgid ""
"Ensure that you don't have non-prefixed URL patterns that might collide with "
"an automatically-added language prefix."
msgstr ""

# e0f5fb377e5c4b1f9fe3cc39b136feef
#: ../../topics/i18n/translation.txt:1076
msgid "Translating URL patterns"
msgstr ""

# 2c4ba71304464b9aab84df7693cbe69f
#: ../../topics/i18n/translation.txt:1078
msgid ""
"URL patterns can also be marked translatable using the :func:`~django.utils."
"translation.ugettext_lazy` function. Example::"
msgstr ""

# 5eacf1acd2e645f0b34a0ec73bf299b2
#: ../../topics/i18n/translation.txt:1101
msgid ""
"After you've created the translations, the :func:`~django.core.urlresolvers."
"reverse` function will return the URL in the active language. Example::"
msgstr ""

# 0e6f7edb6c0c4d098f86521403bbc752
#: ../../topics/i18n/translation.txt:1118
msgid ""
"In most cases, it's best to use translated URLs only within a language-code-"
"prefixed block of patterns (using :func:`~django.conf.urls.i18n."
"i18n_patterns`), to avoid the possibility that a carelessly translated URL "
"causes a collision with a non-translated URL pattern."
msgstr ""

# 48797a76c40c41d48886f233f8637bba
#: ../../topics/i18n/translation.txt:1127
msgid "Reversing in templates"
msgstr ""

# e392cf8e61094bac8ff861401bc1ad34
#: ../../topics/i18n/translation.txt:1129
msgid ""
"If localized URLs get reversed in templates they always use the current "
"language. To link to a URL in another language use the :ttag:`language` "
"template tag. It enables the given language in the enclosed template section:"
msgstr ""

# cf5246dc0f90430896f559cbb4540439
#: ../../topics/i18n/translation.txt:1146
msgid ""
"The :ttag:`language` tag expects the language code as the only argument."
msgstr ""

# adf864806967477a94789d8cf6620234
#: ../../topics/i18n/translation.txt:1151
msgid "Localization: how to create language files"
msgstr ""

# 8aa518ee620c49b6a399276cd59242b3
#: ../../topics/i18n/translation.txt:1153
msgid ""
"Once the string literals of an application have been tagged for later "
"translation, the translation themselves need to be written (or obtained). "
"Here's how that works."
msgstr ""

# 2534d9c5294c4cc995f8add26430717d
#: ../../topics/i18n/translation.txt:1161
msgid "Locale restrictions"
msgstr ""

# eed1841dfb79473bbee439404c4ae70e
#: ../../topics/i18n/translation.txt:1163
msgid ""
"Django does not support localizing your application into a locale for which "
"Django itself has not been translated. In this case, it will ignore your "
"translation files. If you were to try this and Django supported it, you "
"would inevitably see a mixture of translated strings (from your application) "
"and English strings (from Django itself). If you want to support a locale "
"for your application that is not already part of Django, you'll need to make "
"at least a minimal translation of the Django core."
msgstr ""

# f6f9186ca4904d829c97c64a174ba840
#: ../../topics/i18n/translation.txt:1169
msgid ""
"A good starting point is to copy the Django English ``.po`` file and to "
"translate at least some :term:`translation strings <translation string>`."
msgstr ""

# 96a808db79ce4760beca6d773727bd85
#: ../../topics/i18n/translation.txt:1173
msgid "Message files"
msgstr ""

# f2392d535050440c859a158f5b06bd6f
#: ../../topics/i18n/translation.txt:1175
msgid ""
"The first step is to create a :term:`message file` for a new language. A "
"message file is a plain-text file, representing a single language, that "
"contains all available translation strings and how they should be "
"represented in the given language. Message files have a ``.po`` file "
"extension."
msgstr ""

# 4326d7b614094f848612570c566849dc
#: ../../topics/i18n/translation.txt:1180
msgid ""
"Django comes with a tool, :djadmin:`django-admin.py makemessages "
"<makemessages>`, that automates the creation and upkeep of these files."
msgstr ""

# 5ba0efc6dfd4458d804835749b661ef5
#: ../../topics/i18n/translation.txt:1185
msgid "Gettext utilities"
msgstr ""

# 16b7b1a55a8c435a9fd3865e7268ccd3
#: ../../topics/i18n/translation.txt:1187
msgid ""
"The ``makemessages`` command (and ``compilemessages`` discussed later) use "
"commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, "
"``msgmerge`` and ``msguniq``."
msgstr ""

# 6f44bd312cda4e52a39a744f7fecddf0
#: ../../topics/i18n/translation.txt:1189
msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr ""

# 69b151ad5c384da09ead9f66e6e2a2f1
#: ../../topics/i18n/translation.txt:1191
msgid "To create or update a message file, run this command::"
msgstr ""

# 44072a7103d7433dbfde95ff1586942f
#: ../../topics/i18n/translation.txt:1195
msgid ""
"...where ``de`` is the language code for the message file you want to "
"create. The language code, in this case, is in :term:`locale format<locale "
"name>`. For example, it's ``pt_BR`` for Brazilian Portuguese and ``de_AT`` "
"for Austrian German."
msgstr ""

# 2ddc997dc2704b7fa705b4fd807bb95d
#: ../../topics/i18n/translation.txt:1200
msgid "The script should be run from one of two places:"
msgstr ""

# 3a888af221a84f3683d0f00a0da33a60
#: ../../topics/i18n/translation.txt:1202
msgid ""
"The root directory of your Django project (the one that contains ``manage."
"py``)."
msgstr ""

# af24ec620dcd49e6bd8ac616d8d72a1c
#: ../../topics/i18n/translation.txt:1204
msgid "The root directory of one of your Django apps."
msgstr ""

# 09539d6f7b274a43a587254b88fcdf84
#: ../../topics/i18n/translation.txt:1206
msgid ""
"The script runs over your project source tree or your application source "
"tree and pulls out all strings marked for translation (see :ref:`how-django-"
"discovers-translations` and be sure :setting:`LOCALE_PATHS` is configured "
"correctly). It creates (or updates) a message file in the directory ``locale/"
"LANG/LC_MESSAGES``. In the ``de`` example, the file will be ``locale/de/"
"LC_MESSAGES/django.po``."
msgstr ""

# 4bb4a47b3ac5458185c5fb7526e2cb55
#: ../../topics/i18n/translation.txt:1210
msgid ""
"By default :djadmin:`django-admin.py makemessages <makemessages>` examines "
"every file that has the ``.html`` or ``.txt`` file extension. In case you "
"want to override that default, use the ``--extension`` or ``-e`` option to "
"specify the file extensions to examine::"
msgstr ""

# 14a8d03a909342fb9acbabe5dcdf80c7
#: ../../topics/i18n/translation.txt:1217
msgid ""
"Separate multiple extensions with commas and/or use ``-e`` or ``--"
"extension`` multiple times::"
msgstr ""

# dddaa299cc1948109bcbcddf5a73c670
#: ../../topics/i18n/translation.txt:1224
msgid ""
"When :ref:`creating message files from JavaScript source code <creating-"
"message-files-from-js-code>` you need to use the special 'djangojs' domain, "
"**not** ``-e js``."
msgstr ""

# a66da27ed88e432cac3ea61539f7e6fd
#: ../../topics/i18n/translation.txt:1233
msgid "No gettext?"
msgstr ""

# 754179482db5450da99016c8317d274f
#: ../../topics/i18n/translation.txt:1235
msgid ""
"If you don't have the ``gettext`` utilities installed, :djadmin:"
"`makemessages` will create empty files. If that's the case, either install "
"the ``gettext`` utilities or just copy the English message file (``locale/en/"
"LC_MESSAGES/django.po``) if available and use it as a starting point; it's "
"just an empty translation file."
msgstr ""

# cbc152f4e22e48d7b1e50004b95863e9
# 5f69b8cb9f284db884822b294144fcfd
#: ../../topics/i18n/translation.txt:1241
#: ../../topics/i18n/translation.txt:1313
msgid "Working on Windows?"
msgstr ""

# 67d29d15b33c4447ae049aedcdce1a86
#: ../../topics/i18n/translation.txt:1243
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more "
"information."
msgstr ""

# 7af1aa7faa964155b8bdc23a977c7ef9
#: ../../topics/i18n/translation.txt:1242
msgid ""
"The format of ``.po`` files is straightforward. Each ``.po`` file contains a "
"small bit of metadata, such as the translation maintainer's contact "
"information, but the bulk of the file is a list of **messages** -- simple "
"mappings between translation strings and the actual translated text for the "
"particular language."
msgstr ""

# 6480f8bc7bab4f7185b224c29d9f78c9
#: ../../topics/i18n/translation.txt:1248
msgid ""
"For example, if your Django app contained a translation string for the text "
"``\"Welcome to my site.\"``, like so::"
msgstr ""

# 5f1347255ba2413ea22f19f7ed00c83b
#: ../../topics/i18n/translation.txt:1253
msgid ""
"...then :djadmin:`django-admin.py makemessages <makemessages>` will have "
"created a ``.po`` file containing the following snippet -- a message::"
msgstr ""

# c69265bb961d464f9a92a9c5fe7eafd0
#: ../../topics/i18n/translation.txt:1260
msgid "A quick explanation:"
msgstr ""

# 7a2059b932d9414d8643ad4c65c27ce0
#: ../../topics/i18n/translation.txt:1262
msgid ""
"``msgid`` is the translation string, which appears in the source. Don't "
"change it."
msgstr ""

# 1acf1ea80eb34bb7a95db61840544d5a
#: ../../topics/i18n/translation.txt:1264
msgid ""
"``msgstr`` is where you put the language-specific translation. It starts out "
"empty, so it's your responsibility to change it. Make sure you keep the "
"quotes around your translation."
msgstr ""

# c8a6d58cb1e54877afb82527dac89ec1
#: ../../topics/i18n/translation.txt:1267
msgid ""
"As a convenience, each message includes, in the form of a comment line "
"prefixed with ``#`` and located above the ``msgid`` line, the filename and "
"line number from which the translation string was gleaned."
msgstr ""

# fd1d74c6f6af4277810e96553cccc479
#: ../../topics/i18n/translation.txt:1271
msgid ""
"Long messages are a special case. There, the first string directly after the "
"``msgstr`` (or ``msgid``) is an empty string. Then the content itself will "
"be written over the next few lines as one string per line. Those strings are "
"directly concatenated. Don't forget trailing spaces within the strings; "
"otherwise, they'll be tacked together without whitespace!"
msgstr ""

# ac0afe6516a6487c905462ce5eeae06e
#: ../../topics/i18n/translation.txt:1282
msgid "Mind your charset"
msgstr ""

# 19ca543e78fa4fc4a9503354b05c8461
#: ../../topics/i18n/translation.txt:1284
msgid ""
"When creating a PO file with your favorite text editor, first edit the "
"charset line (search for ``\"CHARSET\"``) and set it to the charset you'll "
"be using to edit the content. Due to the way the ``gettext`` tools work "
"internally and because we want to allow non-ASCII source strings in Django's "
"core and your applications, you **must** use UTF-8 as the encoding for your "
"PO file. This means that everybody will be using the same encoding, which is "
"important when Django processes the PO files."
msgstr ""

# 16c6b14e2a6b4eddb9ab8d1343758d2c
#: ../../topics/i18n/translation.txt:1287
msgid ""
"To reexamine all source code and templates for new translation strings and "
"update all message files for **all** languages, run this::"
msgstr ""

# deea6099f596434a88b1539399446e23
#: ../../topics/i18n/translation.txt:1293
msgid "Compiling message files"
msgstr ""

# 0ac9b14fa8ca452aba1c1c65e3d01db0
#: ../../topics/i18n/translation.txt:1295
msgid ""
"After you create your message file -- and each time you make changes to it "
"-- you'll need to compile it into a more efficient form, for use by "
"``gettext``. Do this with the :djadmin:`django-admin.py compilemessages "
"<compilemessages>` utility."
msgstr ""

# 4d59ea4ee4ac447781758265c5aba004
#: ../../topics/i18n/translation.txt:1300
msgid ""
"This tool runs over all available ``.po`` files and creates ``.mo`` files, "
"which are binary files optimized for use by ``gettext``. In the same "
"directory from which you ran :djadmin:`django-admin.py makemessages "
"<makemessages>`, run :djadmin:`django-admin.py compilemessages "
"<compilemessages>` like this::"
msgstr ""

# 826f63f35e6f44fe9ef41d72673c8d5c
#: ../../topics/i18n/translation.txt:1306
msgid "That's it. Your translations are ready for use."
msgstr ""

# 2050f33fd55c497cafc44a71b4e0b862
#: ../../topics/i18n/translation.txt:1310
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`django-admin.py compilemessages <compilemessages>` works see :ref:"
"`gettext_on_windows` for more information."
msgstr ""

# db8bc984ced545e88f4bf1021851a6d2
#: ../../topics/i18n/translation.txt:1319
msgid ".po files: Encoding and BOM usage."
msgstr ""

# 906b375b184e4585ae0790d56451b060
#: ../../topics/i18n/translation.txt:1321
msgid ""
"Django only supports ``.po`` files encoded in UTF-8 and without any BOM "
"(Byte Order Mark) so if your text editor adds such marks to the beginning of "
"files by default then you will need to reconfigure it."
msgstr ""

# 498167f2abcd4485a72a21a11348299b
#: ../../topics/i18n/translation.txt:1323
msgid "Creating message files from JavaScript source code"
msgstr ""

# 8e5ea4981f5542c5a8a4d340bfffd3ec
#: ../../topics/i18n/translation.txt:1325
msgid ""
"You create and update the message files the same way as the other Django "
"message files -- with the :djadmin:`django-admin.py makemessages "
"<makemessages>` tool. The only difference is you need to explicitly specify "
"what in gettext parlance is known as a domain in this case the ``djangojs`` "
"domain, by providing a ``-d djangojs`` parameter, like this::"
msgstr ""

# cd14886a6567436f8ffa9cc42d9c7002
#: ../../topics/i18n/translation.txt:1333
msgid ""
"This would create or update the message file for JavaScript for German. "
"After updating message files, just run :djadmin:`django-admin.py "
"compilemessages <compilemessages>` the same way as you do with normal Django "
"message files."
msgstr ""

# 3c9f69d355ad49fab34086fc3f654cfb
#: ../../topics/i18n/translation.txt:1340
msgid "``gettext`` on Windows"
msgstr ""

# be2ac388714c44ceae51fadd725ac7bf
#: ../../topics/i18n/translation.txt:1342
msgid ""
"This is only needed for people who either want to extract message IDs or "
"compile message files (``.po``). Translation work itself just involves "
"editing existing files of this type, but if you want to create your own "
"message files, or want to test or compile a changed message file, you will "
"need the ``gettext`` utilities:"
msgstr ""

# 7c1acc7829ef49dbba2baab4612486ba
#: ../../topics/i18n/translation.txt:1347
msgid ""
"Download the following zip files from the GNOME servers http://ftp.gnome.org/"
"pub/gnome/binaries/win32/dependencies/ or from one of its mirrors_"
msgstr ""

# 6da6d90f065e4a0a9f5db728c2aabc74
#: ../../topics/i18n/translation.txt:1351
msgid "``gettext-runtime-X.zip``"
msgstr ""

# e53cff722445421b977ff794720adb3a
#: ../../topics/i18n/translation.txt:1352
msgid "``gettext-tools-X.zip``"
msgstr ""

# cfb57fd72e824e37a6722beb976ed166
#: ../../topics/i18n/translation.txt:1354
msgid "``X`` is the version number, we are requiring ``0.15`` or higher."
msgstr ""

# b56f6d067a384adc920c789d1e1a8726
#: ../../topics/i18n/translation.txt:1356
msgid ""
"Extract the contents of the ``bin\\`` directories in both files to the same "
"folder on your system (i.e. ``C:\\Program Files\\gettext-utils``)"
msgstr ""

# d6d15553f1de47efbb35476b7a6b2a42
#: ../../topics/i18n/translation.txt:1359
msgid "Update the system PATH:"
msgstr ""

# 88acac1c5525400593e705173cc696d3
#: ../../topics/i18n/translation.txt:1361
msgid "``Control Panel > System > Advanced > Environment Variables``."
msgstr ""

# 76ad047a7af5415a8d759ba28aa6303b
#: ../../topics/i18n/translation.txt:1362
msgid "In the ``System variables`` list, click ``Path``, click ``Edit``."
msgstr ""

# f2ccf13878f34a39b40607d8deb3d769
#: ../../topics/i18n/translation.txt:1363
msgid ""
"Add ``;C:\\Program Files\\gettext-utils\\bin`` at the end of the ``Variable "
"value`` field."
msgstr ""

# 751fcfc564994f46b4109a47ad67e40e
#: ../../topics/i18n/translation.txt:1368
msgid ""
"You may also use ``gettext`` binaries you have obtained elsewhere, so long "
"as the ``xgettext --version`` command works properly. Do not attempt to use "
"Django translation utilities with a ``gettext`` package if the command "
"``xgettext --version`` entered at a Windows command prompt causes a popup "
"window saying \"xgettext.exe has generated errors and will be closed by "
"Windows\"."
msgstr ""

# fe23f186aa074260b40045771cc1efa8
#: ../../topics/i18n/translation.txt:1376
msgid "Miscellaneous"
msgstr ""

# 51fe3ec667f74acaa1c4eba91dd6b984
#: ../../topics/i18n/translation.txt:1381
msgid "The ``set_language`` redirect view"
msgstr ""

# ada98858b58b4625bbedc4e1c0bae5ce
#: ../../topics/i18n/translation.txt:1389
msgid ""
"As a convenience, Django comes with a view, :func:`django.views.i18n."
"set_language`, that sets a user's language preference and redirects to a "
"given URL or, by default, back to the previous page."
msgstr ""

# cfbb0671d74e45ae900b61d09d34d397
#: ../../topics/i18n/translation.txt:1393
msgid ""
"Make sure that the following item is in your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` list in your settings file::"
msgstr ""

# 8073abf09b994f848d637ac277faa667
#: ../../topics/i18n/translation.txt:1398
msgid "Activate this view by adding the following line to your URLconf::"
msgstr ""

# 66060ca45b454cebadabcaeeb7462c6a
#: ../../topics/i18n/translation.txt:1402
msgid ""
"(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""

# 2d6788b3aa64412bb367f85d33ad4c9b
#: ../../topics/i18n/translation.txt:1406
msgid ""
"Make sure that you don't include the above URL within :func:`~django.conf."
"urls.i18n.i18n_patterns` - it needs to be language-independent itself to "
"work correctly."
msgstr ""

# fc35221258dd4af9971c899d5aacbfa5
#: ../../topics/i18n/translation.txt:1410
msgid ""
"The view expects to be called via the ``POST`` method, with a ``language`` "
"parameter set in request. If session support is enabled, the view saves the "
"language choice in the user's session. Otherwise, it saves the language "
"choice in a cookie that is by default named ``django_language``. (The name "
"can be changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""

# 88f43dde2f1e42f6af6c8e53bf39f923
#: ../../topics/i18n/translation.txt:1416
msgid ""
"After setting the language choice, Django redirects the user, following this "
"algorithm:"
msgstr ""

# a8b46ec76c97458eb5fe8fd0c344b3d5
#: ../../topics/i18n/translation.txt:1419
msgid "Django looks for a ``next`` parameter in the ``POST`` data."
msgstr ""

# 5b224e41c8fc43599cfb274b580c0175
#: ../../topics/i18n/translation.txt:1420
msgid ""
"If that doesn't exist, or is empty, Django tries the URL in the ``Referrer`` "
"header."
msgstr ""

# 33a1a37b6e9b47d98aff8227fefd2eac
#: ../../topics/i18n/translation.txt:1422
msgid ""
"If that's empty -- say, if a user's browser suppresses that header -- then "
"the user will be redirected to ``/`` (the site root) as a fallback."
msgstr ""

# 81c587a91bf2447f9b2fcd4d4bc7ce3d
#: ../../topics/i18n/translation.txt:1425
msgid "Here's example HTML template code:"
msgstr ""

# a606373871024fe8b07ce3b96834d0fb
#: ../../topics/i18n/translation.txt:1443
msgid ""
"In this example, Django looks up the URL of the page to which the user will "
"be redirected in the ``redirect_to`` context variable."
msgstr ""

# 7313cc58005f4fcaaab5a7b9d2bef9ac
#: ../../topics/i18n/translation.txt:1447
msgid "Using translations outside views and templates"
msgstr ""

# a54fde8254744c1f84b91993189ccb1a
#: ../../topics/i18n/translation.txt:1449
msgid ""
"While Django provides a rich set of i18n tools for use in views and "
"templates, it does not restrict the usage to Django-specific code. The "
"Django translation mechanisms can be used to translate arbitrary texts to "
"any language that is supported by Django (as long as an appropriate "
"translation catalog exists, of course). You can load a translation catalog, "
"activate it and translate text to language of your choice, but remember to "
"switch back to original language, as activating a translation catalog is "
"done on per-thread basis and such change will affect code running in the "
"same thread."
msgstr ""

# 153a7dda550444f58896c05762ea187d
#: ../../topics/i18n/translation.txt:1470
msgid ""
"Calling this function with the value 'de' will give you ``\"Willkommen\"``, "
"regardless of :setting:`LANGUAGE_CODE` and language set by middleware."
msgstr ""

# cbf2c6b5b5f4418f82189c47a53a27f7
#: ../../topics/i18n/translation.txt:1473
msgid ""
"Functions of particular interest are ``django.utils.translation."
"get_language()`` which returns the language used in the current thread, "
"``django.utils.translation.activate()`` which activates a translation "
"catalog for the current thread, and ``django.utils.translation."
"check_for_language()`` which checks if the given language is supported by "
"Django."
msgstr ""

# 6fcfa9bde77f47ad801139db1dfd832b
#: ../../topics/i18n/translation.txt:1480
msgid "Implementation notes"
msgstr ""

# ffb66d0046cf41a5bfff337014e937e3
#: ../../topics/i18n/translation.txt:1485
msgid "Specialties of Django translation"
msgstr ""

# a022a05531b4496fa112acb41e1dc913
#: ../../topics/i18n/translation.txt:1487
msgid ""
"Django's translation machinery uses the standard ``gettext`` module that "
"comes with Python. If you know ``gettext``, you might note these specialties "
"in the way Django does translation:"
msgstr ""

# a1420fcacbf0459ea865f55f58479639
#: ../../topics/i18n/translation.txt:1491
msgid ""
"The string domain is ``django`` or ``djangojs``. This string domain is used "
"to differentiate between different programs that store their data in a "
"common message-file library (usually ``/usr/share/locale/``). The ``django`` "
"domain is used for python and template translation strings and is loaded "
"into the global translation catalogs. The ``djangojs`` domain is only used "
"for JavaScript translation catalogs to make sure that those are as small as "
"possible."
msgstr ""

# 34c4825848e14602ae7d1a8d4c261018
#: ../../topics/i18n/translation.txt:1498
msgid ""
"Django doesn't use ``xgettext`` alone. It uses Python wrappers around "
"``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""

# 7a799e37d0f841c1b02fb7fa4739336d
#: ../../topics/i18n/translation.txt:1504
msgid "How Django discovers language preference"
msgstr ""

# 4c02337c9c3e4966beca6af921e72f5b
#: ../../topics/i18n/translation.txt:1506
msgid ""
"Once you've prepared your translations -- or, if you just want to use the "
"translations that come with Django -- you'll just need to activate "
"translation for your app."
msgstr ""

# a3240017c2d6493ba4c228c11cea3e4f
#: ../../topics/i18n/translation.txt:1510
msgid ""
"Behind the scenes, Django has a very flexible model of deciding which "
"language should be used -- installation-wide, for a particular user, or both."
msgstr ""

# 5317796cdf29421b84e893956b28a84a
#: ../../topics/i18n/translation.txt:1516
msgid ""
"To set an installation-wide language preference, set :setting:"
"`LANGUAGE_CODE`. Django uses this language as the default translation -- the "
"final attempt if no better matching translation is found through one of the "
"methods employed by the locale middleware (see below)."
msgstr ""

# c56ac54e07094a6cb44cb47a89e68ca1
#: ../../topics/i18n/translation.txt:1521
msgid ""
"If all you want is to run Django with your native language all you need to "
"do is set :setting:`LANGUAGE_CODE` and make sure the corresponding :term:"
"`message files <message file>` and their compiled versions (``.mo``) exist."
msgstr ""

# a77aa6f3e9404a32b8b14955c0155db7
#: ../../topics/i18n/translation.txt:1525
msgid ""
"If you want to let each individual user specify which language he or she "
"prefers, then you also need to use use the ``LocaleMiddleware``. "
"``LocaleMiddleware`` enables language selection based on data from the "
"request. It customizes content for each user."
msgstr ""

# 0445544f0b95475fa8c9f8f0097c08cc
#: ../../topics/i18n/translation.txt:1524
msgid ""
"To use ``LocaleMiddleware``, add ``'django.middleware.locale."
"LocaleMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting. Because "
"middleware order matters, you should follow these guidelines:"
msgstr ""

# 0b4c7d18c3e54116b629b88e5e3f5855
#: ../../topics/i18n/translation.txt:1528
msgid "Make sure it's one of the first middlewares installed."
msgstr ""

# ec1bcd6318764aa594437de17e5347f0
#: ../../topics/i18n/translation.txt:1529
msgid ""
"It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` "
"makes use of session data. And it should come before ``CommonMiddleware`` "
"because ``CommonMiddleware`` needs an activated language in order to resolve "
"the requested URL."
msgstr ""

# 1effa8080a5a4c478725c50b652e8c54
#: ../../topics/i18n/translation.txt:1533
msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""

# fae9521f2b64468d8d342097aea6e2fc
#: ../../topics/i18n/translation.txt:1535
msgid "For example, your :setting:`MIDDLEWARE_CLASSES` might look like this::"
msgstr ""

# 7c51a96fd31041d8854706d34409e6a5
#: ../../topics/i18n/translation.txt:1543
msgid ""
"(For more on middleware, see the :doc:`middleware documentation </topics/"
"http/middleware>`.)"
msgstr ""

# df5ddf5668624019b56833542e327488
#: ../../topics/i18n/translation.txt:1546
msgid ""
"``LocaleMiddleware`` tries to determine the user's language preference by "
"following this algorithm:"
msgstr ""

# ef14d2d9c9164694bb38e6755519f059
#: ../../topics/i18n/translation.txt:1551
msgid ""
"First, it looks for the language prefix in the requested URL.  This is only "
"performed when you are using the ``i18n_patterns`` function in your root "
"URLconf. See :ref:`url-internationalization` for more information about the "
"language prefix and how to internationalize URL patterns."
msgstr ""

# e9d6524e71834ab4a3970d7dedfb84bc
#: ../../topics/i18n/translation.txt:1556
msgid ""
"Failing that, it looks for a ``django_language`` key in the current user's "
"session."
msgstr ""

# 60586469abbc4735afd14fbe97c06ee7
#: ../../topics/i18n/translation.txt:1559
msgid "Failing that, it looks for a cookie."
msgstr ""

# 703f8037b1c84dd7bfdd00c43b5a174f
#: ../../topics/i18n/translation.txt:1561
msgid ""
"The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` "
"setting. (The default name is ``django_language``.)"
msgstr ""

# 90af3e4d521845ed85bf9f282dd37eb4
#: ../../topics/i18n/translation.txt:1564
msgid ""
"Failing that, it looks at the ``Accept-Language`` HTTP header. This header "
"is sent by your browser and tells the server which language(s) you prefer, "
"in order by priority. Django tries each language in the header until it "
"finds one with available translations."
msgstr ""

# d0afaa8a49994244b5d966df9e83efe1
#: ../../topics/i18n/translation.txt:1569
msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""

# 2df82aae033542b09058105a47dc9ae0
#: ../../topics/i18n/translation.txt:1575
msgid ""
"In each of these places, the language preference is expected to be in the "
"standard :term:`language format<language code>`, as a string. For example, "
"Brazilian Portuguese is ``pt-br``."
msgstr ""

# a6971bf5fc124e44936852362843ae4a
#: ../../topics/i18n/translation.txt:1579
msgid ""
"If a base language is available but the sublanguage specified is not, Django "
"uses the base language. For example, if a user specifies ``de-at`` (Austrian "
"German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""

# 89df76525a4a4db0a0abdee3fa24df30
#: ../../topics/i18n/translation.txt:1584
msgid ""
"Only languages listed in the :setting:`LANGUAGES` setting can be selected. "
"If you want to restrict the language selection to a subset of provided "
"languages (because your application doesn't provide all those languages), "
"set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""

# 4e008bb3ec194f6f8f7d897a8e166852
#: ../../topics/i18n/translation.txt:1594
msgid ""
"This example restricts languages that are available for automatic selection "
"to German and English (and any sublanguage, like de-ch or en-us)."
msgstr ""

# 0828913e78c54d56877da84a411fbbc1
#: ../../topics/i18n/translation.txt:1598
msgid ""
"If you define a custom :setting:`LANGUAGES` setting, as explained in the "
"previous bullet, it's OK to mark the languages as translation strings -- but "
"use a \"dummy\" ``ugettext()`` function, not the one in ``django.utils."
"translation``. You should *never* import ``django.utils.translation`` from "
"within your settings file, because that module in itself depends on the "
"settings, and that would cause a circular import."
msgstr ""

# dc0e4eac86c646ddb0b44fd7523785b0
#: ../../topics/i18n/translation.txt:1606
msgid ""
"The solution is to use a \"dummy\" ``ugettext()`` function. Here's a sample "
"settings file::"
msgstr ""

# dc5ce6be72d44f59ae2b5910a9418643
#: ../../topics/i18n/translation.txt:1616
msgid ""
"With this arrangement, :djadmin:`django-admin.py makemessages "
"<makemessages>` will still find and mark these strings for translation, but "
"the translation won't happen at runtime -- so you'll have to remember to "
"wrap the languages in the *real* ``ugettext()`` in any code that uses :"
"setting:`LANGUAGES` at runtime."
msgstr ""

# 70483f6569f040c1a3718ca1e3552c6d
#: ../../topics/i18n/translation.txt:1622
msgid ""
"The ``LocaleMiddleware`` can only select languages for which there is a "
"Django-provided base translation. If you want to provide translations for "
"your application that aren't already in the set of translations in Django's "
"source tree, you'll want to provide at least a basic one as described in "
"the :ref:`Locale restrictions<locale-restrictions>` note."
msgstr ""

# 92ecab13af7f41c09e0277b48503a8e2
#: ../../topics/i18n/translation.txt:1629
msgid ""
"Once ``LocaleMiddleware`` determines the user's preference, it makes this "
"preference available as ``request.LANGUAGE_CODE`` for each :class:`~django."
"http.HttpRequest`. Feel free to read this value in your view code. Here's a "
"simple example::"
msgstr ""

# edb8b82bcdcc4f3d9423375be953a65d
#: ../../topics/i18n/translation.txt:1640
msgid ""
"Note that, with static (middleware-less) translation, the language is in "
"``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, "
"it's in ``request.LANGUAGE_CODE``."
msgstr ""

# dfb48b153ea44ec4a43d260929159722
#: ../../topics/i18n/translation.txt:1652
msgid "How Django discovers translations"
msgstr ""

# 713ef47f8c7541f28edc6100749fbf99
#: ../../topics/i18n/translation.txt:1654
msgid ""
"At runtime, Django builds an in-memory unified catalog of literals-"
"translations. To achieve this it looks for translations by following this "
"algorithm regarding the order in which it examines the different file paths "
"to load the compiled :term:`message files <message file>` (``.mo``) and the "
"precedence of multiple translations for the same literal:"
msgstr ""

# fa4a7a683aaf4f5e9c3828207c8552b4
#: ../../topics/i18n/translation.txt:1660
msgid ""
"The directories listed in :setting:`LOCALE_PATHS` have the highest "
"precedence, with the ones appearing first having higher precedence than the "
"ones appearing later."
msgstr ""

# 1bfdbbc480004abc86b3fb5a0f20cd67
#: ../../topics/i18n/translation.txt:1663
msgid ""
"Then, it looks for and uses if it exists a ``locale`` directory in each of "
"the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing "
"first have higher precedence than the ones appearing later."
msgstr ""

# 216ed7e83d3d433e984b9ece61339622
#: ../../topics/i18n/translation.txt:1666
msgid ""
"Finally, the Django-provided base translation in ``django/conf/locale`` is "
"used as a fallback."
msgstr ""

# a778dfad3c32462695366c3ed5f04d81
#: ../../topics/i18n/translation.txt:1671
msgid ""
"The translations for literals included in JavaScript assets are looked up "
"following a similar but not identical algorithm. See the :ref:"
"`javascript_catalog view documentation <javascript_catalog-view>` for more "
"details."
msgstr ""

# ee10e206e0d14c3b88014d4bc11cda39
#: ../../topics/i18n/translation.txt:1676
msgid ""
"In all cases the name of the directory containing the translation is "
"expected to be named using :term:`locale name` notation. E.g. ``de``, "
"``pt_BR``, ``es_AR``, etc."
msgstr ""

# a4cd8d934ac2423ea298aeb58c7ae7ff
#: ../../topics/i18n/translation.txt:1680
msgid ""
"This way, you can write applications that include their own translations, "
"and you can override base translations in your project. Or, you can just "
"build a big project out of several apps and put all translations into one "
"big common message file specific to the project you are composing. The "
"choice is yours."
msgstr ""

# a9ecb46ccc1e4e2980ae01f73b36da9b
#: ../../topics/i18n/translation.txt:1685
msgid "All message file repositories are structured the same way. They are:"
msgstr ""

# b29a7bf522774dfeb56f30dd91a31c48
#: ../../topics/i18n/translation.txt:1687
msgid ""
"All paths listed in :setting:`LOCALE_PATHS` in your settings file are "
"searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# 5c7d4a9bb22a4b1db3fa0987d4bcdd2a
#: ../../topics/i18n/translation.txt:1689
msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# 2f98321aa83046779b19389242ae3ce5
#: ../../topics/i18n/translation.txt:1690
msgid ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# d4b1fa211cf04cfbb4c0279bcfb0b6dd
#: ../../topics/i18n/translation.txt:1692
msgid ""
"To create message files, you use the :djadmin:`django-admin.py makemessages "
"<makemessages>` tool. You only need to be in the same directory where the "
"``locale/`` directory is located. And you use :djadmin:`django-admin.py "
"compilemessages <compilemessages>` to produce the binary ``.mo`` files that "
"are used by ``gettext``."
msgstr ""

# 792b2dd28b1542e58f82ae9a273d76ee
#: ../../topics/i18n/translation.txt:1697
msgid ""
"You can also run :djadmin:`django-admin.py compilemessages --settings=path."
"to.settings <compilemessages>` to make the compiler process all the "
"directories in your :setting:`LOCALE_PATHS` setting."
msgstr ""

# 1af622eb3e6e4a33b3fc7cfbd3517a11
#: ../../topics/i18n/translation.txt:1701
msgid ""
"Finally, you should give some thought to the structure of your translation "
"files. If your applications need to be delivered to other users and will be "
"used in other projects, you might want to use app-specific translations. But "
"using app-specific translations and project-specific translations could "
"produce weird problems with :djadmin:`makemessages`: it will traverse all "
"directories below the current path and so might put message IDs into a "
"unified, common message file for the current project that are already in "
"application message files."
msgstr ""

# fb98940c682d48b4be0ed5d526d7596e
#: ../../topics/i18n/translation.txt:1709
msgid ""
"The easiest way out is to store applications that are not part of the "
"project (and so carry their own translations) outside the project tree. That "
"way, :djadmin:`django-admin.py makemessages <makemessages>`, when ran on a "
"project level will only extract strings that are connected to your explicit "
"project and not strings that are distributed independently."
msgstr ""

# 00804653c2aa4e869a79893a0d8c0487
#: ../../topics/index.txt:2
msgid "Using Django"
msgstr ""

# 5f1e4074bc644cf89be4a0d89be11d4f
#: ../../topics/index.txt:4
msgid "Introductions to all the key parts of Django you'll need to know:"
msgstr ""

# b89d6ba6f03e43859048c686eb66cfc3
#: ../../topics/install.txt:3
msgid "How to install Django"
msgstr ""

# c28e25bbf9f34e50810418fe90e0c8b7
#: ../../topics/install.txt:5
msgid "This document will get you up and running with Django."
msgstr ""

# f4f20c3fec564e1abda4f260295a7c6d
#: ../../topics/install.txt:8
msgid "Install Python"
msgstr ""

# 88a8f262ad524108a021567d1f3a5f65
#: ../../topics/install.txt:10
msgid "Being a Python Web framework, Django requires Python."
msgstr ""

# 39c1a4a70fd44bb8856d0f8e6f1112ba
#: ../../topics/install.txt:12
msgid ""
"It works with any Python version from 2.6.5 to 2.7. It also features "
"experimental support for versions from 3.2.3 to 3.3."
msgstr ""

# da35a0fa23a54cf987551f72ff1a2225
#: ../../topics/install.txt:15
msgid ""
"Get Python at http://www.python.org. If you're running Linux or Mac OS X, "
"you probably already have it installed."
msgstr ""

# 10dc5b7156f24c1abe16dc713ba128f0
#: ../../topics/install.txt:18
msgid "Django on Jython"
msgstr ""

# 3e35c0264cbb45db85e703f6829b27f7
#: ../../topics/install.txt:20
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

# cc6ead7bd6f64eb69c766f08a30d4a70
#: ../../topics/install.txt:25
msgid "Python on Windows"
msgstr ""

# da9a5b1ae71b4bd988dfa78c671bf99a
#: ../../topics/install.txt:27
msgid ""
"On Windows, you might need to adjust your ``PATH`` environment variable to "
"include paths to Python executable and additional scripts. For example, if "
"your Python is installed in ``C:\\Python27\\``, the following paths need to "
"be added to ``PATH``::"
msgstr ""

# eaa0c237a09c4fe08ef68f734fca6895
#: ../../topics/install.txt:35
msgid "Install Apache and mod_wsgi"
msgstr ""

# fec648d1816449c299f6d036b17e992b
#: ../../topics/install.txt:37
msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight web server you can use for testing, so you "
"won't need to set up Apache until you're ready to deploy Django in "
"production."
msgstr ""

# 7b762446d04346a6bc047e56dbbe4676
#: ../../topics/install.txt:42
msgid ""
"If you want to use Django on a production site, use `Apache`_ with "
"`mod_wsgi`_. mod_wsgi can operate in one of two modes: an embedded mode and "
"a daemon mode. In embedded mode, mod_wsgi is similar to mod_perl -- it "
"embeds Python within Apache and loads Python code into memory when the "
"server starts. Code stays in memory throughout the life of an Apache "
"process, which leads to significant performance gains over other server "
"arrangements. In daemon mode, mod_wsgi spawns an independent daemon process "
"that handles requests. The daemon process can run as a different user than "
"the Web server, possibly leading to improved security, and the daemon "
"process can be restarted without restarting the entire Apache Web server, "
"possibly making refreshing your codebase more seamless. Consult the mod_wsgi "
"documentation to determine which mode is right for your setup. Make sure you "
"have Apache installed, with the mod_wsgi module activated. Django will work "
"with any version of Apache that supports mod_wsgi."
msgstr ""

# 927a0797680f4495b15b4d1b5b914df4
#: ../../topics/install.txt:58
msgid ""
"See :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` "
"for information on how to configure mod_wsgi once you have it installed."
msgstr ""

# c06dd3fbc716436cb51df74a6a21ba4d
#: ../../topics/install.txt:62
msgid ""
"If you can't use mod_wsgi for some reason, fear not: Django supports many "
"other deployment options. One is :doc:`uWSGI </howto/deployment/wsgi/"
"uwsgi>`; it works very well with `nginx`_. Another is :doc:`FastCGI </howto/"
"deployment/fastcgi>`, perfect for using Django with servers other than "
"Apache. Additionally, Django follows the WSGI spec (:pep:`3333`), which "
"allows it to run on a variety of server platforms. See the `server-"
"arrangements wiki page`_ for specific installation instructions for each "
"platform."
msgstr ""

# 7bcbcfe8496a4dc5b1ecbe5bcdc83ea8
#: ../../topics/install.txt:78
msgid "Get your database running"
msgstr ""

# c83a64c1cd5b40818414d0c83dae2a32
#: ../../topics/install.txt:80
msgid ""
"If you plan to use Django's database API functionality, you'll need to make "
"sure a database server is running. Django supports many different database "
"servers and is officially supported with PostgreSQL_, MySQL_, Oracle_ and "
"SQLite_."
msgstr ""

# ff8c0436d4174a80a101fc6af0fb2a3a
#: ../../topics/install.txt:85
msgid ""
"If you are developing a simple project or something you don't plan to deploy "
"in a production environment, SQLite is generally the simplest option as it "
"doesn't require running a separate server. However, SQLite has many "
"differences from other databases, so if you are working on something "
"substantial, it's recommended to develop with the same database as you plan "
"on using in production."
msgstr ""

# 14bbb879582d4201a1899ab61d88367d
#: ../../topics/install.txt:92
msgid ""
"In addition to the officially supported databases, there are backends "
"provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

# 234072076e0548758f0825b7114d8aa7
#: ../../topics/install.txt:95
msgid "`Sybase SQL Anywhere`_"
msgstr ""

# b03bcc45d02a490dac61888f727bd2ca
#: ../../topics/install.txt:96
msgid "`IBM DB2`_"
msgstr ""

# 181abee8eeec4dfd858b52992e74c234
#: ../../topics/install.txt:97
msgid "`Microsoft SQL Server 2005`_"
msgstr ""

# da4cc71b3bdf42cca89ddbf6060752c5
#: ../../topics/install.txt:98
msgid "Firebird_"
msgstr ""

# 79b47f53a36a47f88341f6de615c1418
#: ../../topics/install.txt:99
msgid "ODBC_"
msgstr ""

# aa00a409f66a49be9a4eb56f3280743a
#: ../../topics/install.txt:101
msgid ""
"The Django versions and ORM features supported by these unofficial backends "
"vary considerably. Queries regarding the specific capabilities of these "
"unofficial backends, along with any support queries, should be directed to "
"the support channels provided by each 3rd party project."
msgstr ""

# 8371b97057ad406e83a05f62b09f9a67
#: ../../topics/install.txt:106
msgid ""
"In addition to a database backend, you'll need to make sure your Python "
"database bindings are installed."
msgstr ""

# e6d60ec91e1d410685c9bcdb89ded0c2
#: ../../topics/install.txt:109
msgid ""
"If you're using PostgreSQL, you'll need the `postgresql_psycopg2`_ package. "
"You might want to refer to our :ref:`PostgreSQL notes <postgresql-notes>` "
"for further technical details specific to this database."
msgstr ""

# 45ec8a8c144446a5aff0161f75ef640e
#: ../../topics/install.txt:113
msgid ""
"If you're on Windows, check out the unofficial `compiled Windows version`_."
msgstr ""

# b131332e34b341d2ab038ddeac3549fe
#: ../../topics/install.txt:115
msgid ""
"If you're using MySQL, you'll need the ``MySQL-python`` package, version "
"1.2.1p2 or higher. You will also want to read the database-specific :ref:"
"`notes for the MySQL backend <mysql-notes>`."
msgstr ""

# 83a2fb66eca04b238dfa6bb32be83897
#: ../../topics/install.txt:119
msgid ""
"If you're using Oracle, you'll need a copy of cx_Oracle_, but please read "
"the database-specific :ref:`notes for the Oracle backend <oracle-notes>` for "
"important information regarding supported versions of both Oracle and "
"``cx_Oracle``."
msgstr ""

# 58c82f2e261748ae9d9b5fb0f367ea8d
#: ../../topics/install.txt:124
msgid ""
"If you're using an unofficial 3rd party backend, please consult the "
"documentation provided for any additional requirements."
msgstr ""

# 3a0011fe709b416583798b9ca0ef09c1
#: ../../topics/install.txt:127
msgid ""
"If you plan to use Django's ``manage.py syncdb`` command to automatically "
"create database tables for your models (after first installing Django and "
"creating a project), you'll need to ensure that Django has permission to "
"create and alter tables in the database you're using; if you plan to "
"manually create the tables, you can simply grant Django ``SELECT``, "
"``INSERT``, ``UPDATE`` and ``DELETE`` permissions. On some databases, Django "
"will need ``ALTER TABLE`` privileges during ``syncdb`` but won't issue "
"``ALTER TABLE`` statements on a table once ``syncdb`` has created it. After "
"creating a database user with these permissions, you'll specify the details "
"in your project's settings file, see :setting:`DATABASES` for details."
msgstr ""

# a4572c17361b4ebda21e1114347b0035
#: ../../topics/install.txt:138
msgid ""
"If you're using Django's :doc:`testing framework</topics/testing/index>` to "
"test database queries, Django will need permission to create a test database."
msgstr ""

# 3867948671b84216ad2795353b346c71
#: ../../topics/install.txt:157
msgid "Remove any old versions of Django"
msgstr ""

# 8d7e74b5e56b4c1cbb8a6c9f10202be7
#: ../../topics/install.txt:159
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to uninstall the old Django version before installing the new "
"version."
msgstr ""

# cd251f89d0ca4bddbb4109eb6060b229
#: ../../topics/install.txt:163
msgid ""
"If you installed Django using pip_ or ``easy_install`` previously, "
"installing with pip_ or ``easy_install`` again will automatically take care "
"of the old version, so you don't need to do it yourself."
msgstr ""

# 8e2d79af329446b2b7ba986fad9eae90
#: ../../topics/install.txt:167
msgid ""
"If you previously installed Django using ``python setup.py install``, "
"uninstalling is as simple as deleting the ``django`` directory from your "
"Python ``site-packages``. To find the directory you need to remove, you can "
"run the following at your shell prompt (not the interactive Python prompt):"
msgstr ""

# 1519b6d236e242eb81a77caa24d2de50
#: ../../topics/install.txt:180
msgid "Install the Django code"
msgstr ""

# 4ccc7a609d414da387745b1d1a6e5fa9
#: ../../topics/install.txt:182
msgid ""
"Installation instructions are slightly different depending on whether you're "
"installing a distribution-specific package, downloading the latest official "
"release, or fetching the latest development version."
msgstr ""

# 522fe18f6cbf4a38b7dc8aba4dbe6967
#: ../../topics/install.txt:186
msgid "It's easy, no matter which way you choose."
msgstr ""

# 8c065030ce08427e873c04ff92ce8c7a
#: ../../topics/install.txt:189
msgid "Installing a distribution-specific package"
msgstr ""

# cc878d16ce6942f0815c041112121503
#: ../../topics/install.txt:191
msgid ""
"Check the :doc:`distribution specific notes </misc/distributions>` to see if "
"your platform/distribution provides official Django packages/installers. "
"Distribution-provided packages will typically allow for automatic "
"installation of dependencies and easy upgrade paths."
msgstr ""

# 642581b2e01d45c4ad1d6d1776a3bcb6
#: ../../topics/install.txt:199
msgid "Installing an official release with ``pip``"
msgstr ""

# 47ab1e8d060244f4bd57f9934143d091
#: ../../topics/install.txt:201
msgid "This is the recommended way to install Django."
msgstr ""

# 2439fcc1af9d40d2b6dd77e44cf9d3f4
#: ../../topics/install.txt:203
msgid ""
"Install pip_. The easiest is to use the `standalone pip installer`_. If your "
"distribution already has ``pip`` installed, you might need to update it if "
"it's outdated. (If it's outdated, you'll know because installation won't "
"work.)"
msgstr ""

# 8470dd9d4a114660880f90c71d4c0d68
#: ../../topics/install.txt:208
msgid ""
"(optional) Take a look at virtualenv_ and virtualenvwrapper_. These tools "
"provide isolated Python environments, which are more practical than "
"installing packages systemwide. They also allow installing packages without "
"administrator privileges. It's up to you to decide if you want to learn and "
"use them."
msgstr ""

# 5419ea6226ac4e60b885a5f58a0d3f55
#: ../../topics/install.txt:214
msgid ""
"If you're using Linux, Mac OS X or some other flavor of Unix, enter the "
"command ``sudo pip install Django`` at the shell prompt. If you're using "
"Windows, start a command shell with administrator privileges and run the "
"command ``pip install Django``. This will install Django in your Python "
"installation's ``site-packages`` directory."
msgstr ""

# b7c7c00d668f45a78b76a6dcfc31dda7
#: ../../topics/install.txt:220
msgid ""
"If you're using a virtualenv, you don't need ``sudo`` or administrator "
"privileges, and this will install Django in the virtualenv's ``site-"
"packages`` directory."
msgstr ""

# 74c87681d7d64f23af85d6b02d67d1de
#: ../../topics/install.txt:230
msgid "Installing an official release manually"
msgstr ""

# 700fbcfcd95b4ab18769018b47524bb4
#: ../../topics/install.txt:232
msgid "Download the latest release from our `download page`_."
msgstr ""

# 5aca3256243747dc9d326a6ec730d2ce
#: ../../topics/install.txt:234
msgid ""
"Untar the downloaded file (e.g. ``tar xzvf Django-X.Y.tar.gz``, where ``X."
"Y`` is the version number of the latest release). If you're using Windows, "
"you can download the command-line tool bsdtar_ to do this, or you can use a "
"GUI-based tool such as 7-zip_."
msgstr ""

# c6d0c3a689c24f628a1e5f819d74f44b
#: ../../topics/install.txt:239
msgid "Change into the directory created in step 2 (e.g. ``cd Django-X.Y``)."
msgstr ""

# 553b189b51d44f93a50842095198084c
#: ../../topics/install.txt:241
msgid ""
"If you're using Linux, Mac OS X or some other flavor of Unix, enter the "
"command ``sudo python setup.py install`` at the shell prompt. If you're "
"using Windows, start a command shell with administrator privileges and run "
"the command ``python setup.py install``. This will install Django in your "
"Python installation's ``site-packages`` directory."
msgstr ""

# 828de36aa7884bc9b2b85394ab6a6283
#: ../../topics/install.txt:247
msgid "Removing an old version"
msgstr ""

# ebfd095ea351470d983cb105ff31996e
#: ../../topics/install.txt:249
msgid ""
"If you use this installation technique, it is particularly important that "
"you :ref:`remove any existing installations<removing-old-versions-of-"
"django>` of Django first. Otherwise, you can end up with a broken "
"installation that includes files from previous versions that have since been "
"removed from Django."
msgstr ""

# b10824e81fa04dc6b3a560f49c25122b
#: ../../topics/install.txt:263
msgid "Installing the development version"
msgstr ""

# e624e61b042349a694f6680c328ea615
#: ../../topics/install.txt:265
msgid "Tracking Django development"
msgstr ""

# 1b8db89071834efea9c65422062e2a7e
#: ../../topics/install.txt:267
msgid ""
"If you decide to use the latest development version of Django, you'll want "
"to pay close attention to `the development timeline`_, and you'll want to "
"keep an eye on the :ref:`release notes for the upcoming release "
"<development_release_notes>`. This will help you stay on top of any new "
"features you might want to use, as well as any changes you'll need to make "
"to your code when updating your copy of Django. (For stable releases, any "
"necessary changes are documented in the release notes.)"
msgstr ""

# 41df6702a0604bfba3a1c64fa76fe7fa
#: ../../topics/install.txt:278
msgid ""
"If you'd like to be able to update your Django code occasionally with the "
"latest bug fixes and improvements, follow these instructions:"
msgstr ""

# 785fa46ee83a493db113697a5538a8ae
#: ../../topics/install.txt:281
msgid ""
"Make sure that you have Git_ installed and that you can run its commands "
"from a shell. (Enter ``git help`` at a shell prompt to test this.)"
msgstr ""

# f15f859fdd004b1ca7f86acff75d21bd
#: ../../topics/install.txt:284
msgid ""
"Check out Django's main development branch (the 'trunk' or 'master') like so:"
msgstr ""

# b850fd8799bb4063a50367d048ac931c
#: ../../topics/install.txt:291
msgid ""
"This will create a directory ``django-trunk`` in your current directory."
msgstr ""

# 173438582a224b4c87ce5ee99d870c57
#: ../../topics/install.txt:293
msgid ""
"Make sure that the Python interpreter can load Django's code. The most "
"convenient way to do this is via pip_. Run the following command:"
msgstr ""

# 2aeb67b027304e3a9ce5c3476fea8bbb
#: ../../topics/install.txt:300
msgid "(If using a virtualenv_ you can omit ``sudo``.)"
msgstr ""

# 14057306363d4dd7be6a437271a71710
#: ../../topics/install.txt:302
msgid ""
"This will make Django's code importable, and will also make the ``django-"
"admin.py`` utility command available. In other words, you're all set!"
msgstr ""

# 57c65b78534a4b7786338374d481f92a
#: ../../topics/install.txt:306
msgid ""
"If you don't have pip_ available, see the alternative instructions for "
"`installing the development version without pip`_."
msgstr ""

# f13a371fb39e4b1685548d0e7b117b32
#: ../../topics/install.txt:311
msgid ""
"Don't run ``sudo python setup.py install``, because you've already carried "
"out the equivalent actions in step 3."
msgstr ""

# 6b1830f860ef4f06befd0665dce739bf
#: ../../topics/install.txt:314
msgid ""
"When you want to update your copy of the Django source code, just run the "
"command ``git pull`` from within the ``django-trunk`` directory. When you do "
"this, Git will automatically download any changes."
msgstr ""

# c7929dcf2dee4f63a9643c67ee9eb698
#: ../../topics/install.txt:323
msgid "Installing the development version without pip"
msgstr ""

# 35124a385d454ad6969e40dd29d2086f
#: ../../topics/install.txt:325
msgid ""
"If you don't have pip_, you can instead manually `modify Python's search "
"path`_."
msgstr ""

# 957eb80f3b3a414a949a7b0025974bf9
#: ../../topics/install.txt:328
msgid ""
"First follow steps 1 and 2 above, so that you have a ``django-trunk`` "
"directory with a checkout of Django's latest code in it. Then add a ``.pth`` "
"file containing the full path to the ``django-trunk`` directory to your "
"system's ``site-packages`` directory. For example, on a Unix-like system:"
msgstr ""

# 4656641d4e92409291cfb5310acc53f6
#: ../../topics/install.txt:337
msgid ""
"In the above line, change ``WORKING-DIR/django-trunk`` to match the full "
"path to your new ``django-trunk`` directory, and change ``SITE-PACKAGES-"
"DIR`` to match the location of your system's ``site-packages`` directory."
msgstr ""

# 3936853818574659941c91b3807a3f9a
#: ../../topics/install.txt:341
msgid ""
"The location of the ``site-packages`` directory depends on the operating "
"system, and the location in which Python was installed. To find your "
"system's ``site-packages`` location, execute the following:"
msgstr ""

# 8392b1d2e773452199d19a1f75d61b4f
#: ../../topics/install.txt:349
msgid ""
"(Note that this should be run from a shell prompt, not a Python interactive "
"prompt.)"
msgstr ""

# ab12255606874655930dbccf26ff1c09
#: ../../topics/install.txt:352
msgid ""
"Some Debian-based Linux distributions have separate ``site-packages`` "
"directories for user-installed packages, such as when installing Django from "
"a downloaded tarball. The command listed above will give you the system's "
"``site-packages``, the user's directory can be found in ``/usr/local/lib/`` "
"instead of ``/usr/lib/``."
msgstr ""

# 356895b9d4474e358a435ea4342f827e
#: ../../topics/install.txt:358
msgid ""
"Next you need to make the ``django-admin.py`` utility available in your "
"shell PATH."
msgstr ""

# 415a38a6ff484ae4be7fac4fb807a5e0
#: ../../topics/install.txt:361
msgid ""
"On Unix-like systems, create a symbolic link to the file ``django-trunk/"
"django/bin/django-admin.py`` in a directory on your system path, such as ``/"
"usr/local/bin``. For example:"
msgstr ""

# 126cdf37941845c4bd01bc84192244a0
#: ../../topics/install.txt:369
msgid ""
"(In the above line, change WORKING-DIR to match the full path to your new "
"``django-trunk`` directory.)"
msgstr ""

# 03ef30d77bcf411f80fcb3a054ebac76
#: ../../topics/install.txt:372
msgid ""
"This simply lets you type ``django-admin.py`` from within any directory, "
"rather than having to qualify the command with the full path to the file."
msgstr ""

# a5ae172b1c624f1997eff1fe34597643
#: ../../topics/install.txt:375
msgid ""
"On Windows systems, the same result can be achieved by copying the file "
"``django-trunk/django/bin/django-admin.py`` to somewhere on your system "
"path, for example ``C:\\Python27\\Scripts``."
msgstr ""

# 62a102aa2b8944c0b0a9f7c0e5cc728a
#: ../../topics/logging.txt:3
msgid "Logging"
msgstr ""

# 8727d26f6f214690ab8a61e9ffdd8a77
#: ../../topics/logging.txt:9
msgid "A quick logging primer"
msgstr ""

# be2c09e3de26441db2de531162d152c1
#: ../../topics/logging.txt:11
msgid ""
"Django uses Python's builtin :mod:`logging` module to perform system "
"logging. The usage of this module is discussed in detail in Python's own "
"documentation. However, if you've never used Python's logging framework (or "
"even if you have), here's a quick primer."
msgstr ""

# d30bd48cf36746bb8afa31eda786f80b
#: ../../topics/logging.txt:17
msgid "The cast of players"
msgstr ""

# 046c6b16be7740b794d021fbace041e3
#: ../../topics/logging.txt:19
msgid "A Python logging configuration consists of four parts:"
msgstr ""

# b06d19b8660b414897df8d533d2115a4
#: ../../topics/logging.txt:21
msgid ":ref:`topic-logging-parts-loggers`"
msgstr ""

# a2cc5c2c86e9484cb842415c9cffd64c
#: ../../topics/logging.txt:22
msgid ":ref:`topic-logging-parts-handlers`"
msgstr ""

# ed3f28fb009c43f8a3d3a41db5b9bab5
#: ../../topics/logging.txt:23
msgid ":ref:`topic-logging-parts-filters`"
msgstr ""

# f9aa516b73c54ce9a03165e6d333a85e
#: ../../topics/logging.txt:24
msgid ":ref:`topic-logging-parts-formatters`"
msgstr ""

# 3ff09d2e702e403fb18b5483e647f364
# ecb43d3c3c864fff937d026b5911cee1
#: ../../topics/logging.txt:29 ../../topics/logging.txt:395
msgid "Loggers"
msgstr ""

# 17a50b94b4074a9284ca68ec8292f2ad
#: ../../topics/logging.txt:31
msgid ""
"A logger is the entry point into the logging system. Each logger is a named "
"bucket to which messages can be written for processing."
msgstr ""

# 02efe0323b2f41aab00f4b28f347b3bc
#: ../../topics/logging.txt:34
msgid ""
"A logger is configured to have a *log level*. This log level describes the "
"severity of the messages that the logger will handle. Python defines the "
"following log levels:"
msgstr ""

# 9a20f5a4e4a64a74bf8a93f57551c4be
#: ../../topics/logging.txt:38
msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr ""

# 728bf1b7dbaa4dea84920158bf638abf
#: ../../topics/logging.txt:40
msgid "``INFO``: General system information"
msgstr ""

# b77ce988c976417b8ca78655204e06d7
#: ../../topics/logging.txt:42
msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr ""

# 1f89204c7eac4106ae5015bf69e6f480
#: ../../topics/logging.txt:45
msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr ""

# 7f894ace9d4c4a54b9e2fb7c93ce9482
#: ../../topics/logging.txt:48
msgid ""
"``CRITICAL``: Information describing a critical problem that has occurred."
msgstr ""

# 14a3926642bd447598826e6d722db0c4
#: ../../topics/logging.txt:51
msgid ""
"Each message that is written to the logger is a *Log Record*. Each log "
"record also has a *log level* indicating the severity of that specific "
"message. A log record can also contain useful metadata that describes the "
"event that is being logged. This can include details such as a stack trace "
"or an error code."
msgstr ""

# 0697a03fa1ae499996391f8d8d6c1dc4
#: ../../topics/logging.txt:57
msgid ""
"When a message is given to the logger, the log level of the message is "
"compared to the log level of the logger. If the log level of the message "
"meets or exceeds the log level of the logger itself, the message will "
"undergo further processing. If it doesn't, the message will be ignored."
msgstr ""

# 09016ee6b3b64304a5faa8a223f59851
#: ../../topics/logging.txt:63
msgid ""
"Once a logger has determined that a message needs to be processed, it is "
"passed to a *Handler*."
msgstr ""

# 533b255ca6234b06b34762b3fadbc56f
# db977c2986cd4e7aa55d67e42ce2f981
#: ../../topics/logging.txt:69 ../../topics/logging.txt:438
msgid "Handlers"
msgstr ""

# 9bb1dce394ca4c4595958254c58dc22b
#: ../../topics/logging.txt:71
msgid ""
"The handler is the engine that determines what happens to each message in a "
"logger. It describes a particular logging behavior, such as writing a "
"message to the screen, to a file, or to a network socket."
msgstr ""

# 98b16679cf5b4f5a82ee4cc4a43716fd
#: ../../topics/logging.txt:75
msgid ""
"Like loggers, handlers also have a log level. If the log level of a log "
"record doesn't meet or exceed the level of the handler, the handler will "
"ignore the message."
msgstr ""

# ea1267b97fdb4f2491742841e5b136aa
#: ../../topics/logging.txt:79
msgid ""
"A logger can have multiple handlers, and each handler can have a different "
"log level. In this way, it is possible to provide different forms of "
"notification depending on the importance of a message. For example, you "
"could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages "
"to a paging service, while a second handler logs all messages (including "
"``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""

# edd412ca2647419f88fa417fc9bd39f0
# 3f95f90db3b449c9971737c3a995b44a
# 50defd9e548740e7a14e7f91bd27bda5
#: ../../topics/logging.txt:90 ../../topics/logging.txt:483
#: ../../topics/templates.txt:124
msgid "Filters"
msgstr ""

# fa35398a43bf40f2926731672ff1574d
#: ../../topics/logging.txt:92
msgid ""
"A filter is used to provide additional control over which log records are "
"passed from logger to handler."
msgstr ""

# c3a297a89d7f4b4e9ab91308f8c8355b
#: ../../topics/logging.txt:95
msgid ""
"By default, any log message that meets log level requirements will be "
"handled. However, by installing a filter, you can place additional criteria "
"on the logging process. For example, you could install a filter that only "
"allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""

# 1709adbfad4445c09dad4f0933f4fdaa
#: ../../topics/logging.txt:101
msgid ""
"Filters can also be used to modify the logging record prior to being "
"emitted. For example, you could write a filter that downgrades ``ERROR`` log "
"records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""

# 1db0f223774246dabffb4989bbaae708
#: ../../topics/logging.txt:106
msgid ""
"Filters can be installed on loggers or on handlers; multiple filters can be "
"used in a chain to perform multiple filtering actions."
msgstr ""

# 0827370887824ac3925d8436b9ddd19b
#: ../../topics/logging.txt:112
msgid "Formatters"
msgstr ""

# 7866039e076d463490ff31c217ecffb5
#: ../../topics/logging.txt:114
msgid ""
"Ultimately, a log record needs to be rendered as text. Formatters describe "
"the exact format of that text. A formatter usually consists of a Python "
"formatting string; however, you can also write custom formatters to "
"implement specific formatting behavior."
msgstr ""

# a02c63f6c24c496089a87eb49e75ee56
#: ../../topics/logging.txt:120
msgid "Using logging"
msgstr ""

# 6f59fe2c73e5480aa3b2ed09c7381c63
#: ../../topics/logging.txt:122
msgid ""
"Once you have configured your loggers, handlers, filters and formatters, you "
"need to place logging calls into your code. Using the logging framework is "
"very simple. Here's an example::"
msgstr ""

# 3fd5cfab810b415a9b7a9c7b906dc7ff
#: ../../topics/logging.txt:138
msgid ""
"And that's it! Every time the ``bad_mojo`` condition is activated, an error "
"log record will be written."
msgstr ""

# ec2ad7c19c4e4b6ca0e9708167018b27
#: ../../topics/logging.txt:142
msgid "Naming loggers"
msgstr ""

# af4ae97e9dbc48dc8e457e4abe8bc618
#: ../../topics/logging.txt:144
msgid ""
"The call to :func:`logging.getLogger()` obtains (creating, if necessary) an "
"instance of a logger. The logger instance is identified by a name. This name "
"is used to identify the logger for configuration purposes."
msgstr ""

# 78f40fd315f04e47bde1477fa8f06c2d
#: ../../topics/logging.txt:149
msgid ""
"By convention, the logger name is usually ``__name__``, the name of the "
"python module that contains the logger. This allows you to filter and handle "
"logging calls on a per-module basis. However, if you have some other way of "
"organizing your logging messages, you can provide any dot-separated name to "
"identify your logger::"
msgstr ""

# 165a0dac8e554799a6abf66d9fa5c6ba
#: ../../topics/logging.txt:158
msgid ""
"The dotted paths of logger names define a hierarchy. The ``project."
"interesting`` logger is considered to be a parent of the ``project."
"interesting.stuff`` logger; the ``project`` logger is a parent of the "
"``project.interesting`` logger."
msgstr ""

# c9e0fd55f0cd4b09aa0e30bed900ecd7
#: ../../topics/logging.txt:163
msgid ""
"Why is the hierarchy important? Well, because loggers can be set to "
"*propagate* their logging calls to their parents. In this way, you can "
"define a single set of handlers at the root of a logger tree, and capture "
"all logging calls in the subtree of loggers. A logging handler defined in "
"the ``project`` namespace will catch all logging messages issued on the "
"``project.interesting`` and ``project.interesting.stuff`` loggers."
msgstr ""

# 1b506fc3755841b8aa552e25b4b3d56e
#: ../../topics/logging.txt:171
msgid ""
"This propagation can be controlled on a per-logger basis. If you don't want "
"a particular logger to propagate to it's parents, you can turn off this "
"behavior."
msgstr ""

# 49e7296ddc9643b49b53bb952a5e48c6
#: ../../topics/logging.txt:176
msgid "Making logging calls"
msgstr ""

# b9d0b9640455402ead32e55b9c213191
#: ../../topics/logging.txt:178
msgid ""
"The logger instance contains an entry method for each of the default log "
"levels:"
msgstr ""

# 629056cc18aa438d8635e30a80ae420f
#: ../../topics/logging.txt:181
msgid "``logger.critical()``"
msgstr ""

# bb7c7f0111934b30a351260426108a6a
#: ../../topics/logging.txt:182
msgid "``logger.error()``"
msgstr ""

# 7ee3b277ea4d4fa0b308aa146ff9747c
#: ../../topics/logging.txt:183
msgid "``logger.warning()``"
msgstr ""

# e89b6b86f4b14603b7e762881c7be0c1
#: ../../topics/logging.txt:184
msgid "``logger.info()``"
msgstr ""

# 99c7298aafb34e2687fb9a56fc7272f0
#: ../../topics/logging.txt:185
msgid "``logger.debug()``"
msgstr ""

# f76e380893684672b6f6c06eea04e6b0
#: ../../topics/logging.txt:187
msgid "There are two other logging calls available:"
msgstr ""

# 26eca5b16d5d487cb500cb03ebd6fd23
#: ../../topics/logging.txt:189
msgid ""
"``logger.log()``: Manually emits a logging message with a specific log level."
msgstr ""

# 702ebc25ab784369853d656b9e6730a9
#: ../../topics/logging.txt:192
msgid ""
"``logger.exception()``: Creates an ``ERROR`` level logging message wrapping "
"the current exception stack frame."
msgstr ""

# e0db49a8f70d4701b4ffa0199f26ec72
#: ../../topics/logging.txt:198
msgid "Configuring logging"
msgstr ""

# 827fe066a0604c6591c8e521ee32bd8f
#: ../../topics/logging.txt:200
msgid ""
"Of course, it isn't enough to just put logging calls into your code. You "
"also need to configure the loggers, handlers, filters and formatters to "
"ensure that logging output is output in a useful way."
msgstr ""

# bb80bdf5c22e49b58cb6b39d16e3f270
#: ../../topics/logging.txt:204
msgid ""
"Python's logging library provides several techniques to configure logging, "
"ranging from a programmatic interface to configuration files. By default, "
"Django uses the `dictConfig format`_."
msgstr ""

# 8f42271e63204b44b7238999d4ab0e55
#: ../../topics/logging.txt:209
msgid ""
"``logging.dictConfig`` is a builtin library in Python 2.7. In order to make "
"this library available for users of earlier Python versions, Django includes "
"a copy as part of ``django.utils.log``. If you have Python 2.7 or later, the "
"system native library will be used; if you have Python 2.6, Django's copy "
"will be used."
msgstr ""

# 60616b52bcd94ec181fbf659539161a0
#: ../../topics/logging.txt:215
msgid ""
"In order to configure logging, you use :setting:`LOGGING` to define a "
"dictionary of logging settings. These settings describes the loggers, "
"handlers, filters and formatters that you want in your logging setup, and "
"the log levels and other properties that you want those components to have."
msgstr ""

# a59bc4d532ea4a8c86e2a2ee6aa99c9d
#: ../../topics/logging.txt:221
msgid ""
"Prior to Django 1.5, the :setting:`LOGGING` setting always overwrote the :"
"ref:`default Django logging configuration <default-logging-configuration>`. "
"From Django 1.5 forward, it is possible to get the project's logging "
"configuration merged with Django's defaults, hence you can decide if you "
"want to add to, or replace the existing configuration."
msgstr ""

# f538e0da16474a6384729c268bb1022a
#: ../../topics/logging.txt:227
msgid ""
"If the ``disable_existing_loggers`` key in the :setting:`LOGGING` dictConfig "
"is set to ``True`` (which is the default) the default configuration is "
"completely overridden. Alternatively you can redefine some or all of the "
"loggers by setting ``disable_existing_loggers`` to ``False``."
msgstr ""

# 109a835a5e6d47c989397b1ba970a50d
#: ../../topics/logging.txt:229
msgid ""
"Logging is configured as soon as settings have been loaded (either manually "
"using :func:`~django.conf.settings.configure` or when at least one setting "
"is accessed). Since the loading of settings is one of the first things that "
"Django does, you can be certain that loggers are always ready for use in "
"your project code."
msgstr ""

# 4885f06148b446c69380d73b5907427f
#: ../../topics/logging.txt:242
msgid ""
"The full documentation for `dictConfig format`_ is the best source of "
"information about logging configuration dictionaries. However, to give you a "
"taste of what is possible, here is an example of a fairly complex logging "
"setup, configured using :func:`logging.config.dictConfig`::"
msgstr ""

# d2f137b5fd69417b8d7cf44e114206bc
#: ../../topics/logging.txt:299
msgid "This logging configuration does the following things:"
msgstr ""

# eff9c362d2644669bbac4eed1f1af29f
#: ../../topics/logging.txt:301
msgid ""
"Identifies the configuration as being in 'dictConfig version 1' format. At "
"present, this is the only dictConfig format version."
msgstr ""

# 0fadd7dc71b640a5869cf5451663f98e
#: ../../topics/logging.txt:304
msgid "Disables all existing logging configurations."
msgstr ""

# 0e4fed8819504275abbde42dcd78a7ae
#: ../../topics/logging.txt:306
msgid "Defines two formatters:"
msgstr ""

# 5a94bed6b89549cd9e2d6db80782db4c
#: ../../topics/logging.txt:308
msgid ""
"``simple``, that just outputs the log level name (e.g., ``DEBUG``) and the "
"log message."
msgstr ""

# 69a1d5d37f194fcd90502c35eb07f21e
#: ../../topics/logging.txt:311
msgid ""
"The ``format`` string is a normal Python formatting string describing the "
"details that are to be output on each logging line. The full list of detail "
"that can be output can be found in the `formatter documentation`_."
msgstr ""

# 3b07a4550ed245feb268391cfc116093
#: ../../topics/logging.txt:316
msgid ""
"``verbose``, that outputs the log level name, the log message, plus the "
"time, process, thread and module that generate the log message."
msgstr ""

# 1a1994cb024b40a8bffe0e027ca65aca
#: ../../topics/logging.txt:320
msgid ""
"Defines one filter -- ``project.logging.SpecialFilter``, using the alias "
"``special``. If this filter required additional arguments at time of "
"construction, they can be provided as additional keys in the filter "
"configuration dictionary. In this case, the argument ``foo`` will be given a "
"value of ``bar`` when instantiating the ``SpecialFilter``."
msgstr ""

# f8ff7d8dfeb84895ad941acf6e72c37b
#: ../../topics/logging.txt:327
msgid "Defines three handlers:"
msgstr ""

# 621977f6ddd0405d913d756f8f8c275a
#: ../../topics/logging.txt:329
msgid ""
"``null``, a NullHandler, which will pass any ``DEBUG`` (or higher) message "
"to ``/dev/null``."
msgstr ""

# 1d18a3f432b441b9b42a3df4173e53c3
#: ../../topics/logging.txt:332
msgid ""
"``console``, a StreamHandler, which will print any ``DEBUG`` (or higher) "
"message to stderr. This handler uses the ``simple`` output format."
msgstr ""

# bcdda892f03c4f63b4afa3b6ebd16407
#: ../../topics/logging.txt:336
msgid ""
"``mail_admins``, an AdminEmailHandler, which will email any ``ERROR`` (or "
"higher) message to the site admins. This handler uses the ``special`` filter."
msgstr ""

# 1dbe6531197d474e864e5dbf9e03f6a0
#: ../../topics/logging.txt:340
msgid "Configures three loggers:"
msgstr ""

# 7ac689a383b341df994d731669113b05
#: ../../topics/logging.txt:342
msgid ""
"``django``, which passes all messages at ``INFO`` or higher to the ``null`` "
"handler."
msgstr ""

# d313e20801cd43f28776cb5c14ffe4ea
#: ../../topics/logging.txt:345
msgid ""
"``django.request``, which passes all ``ERROR`` messages to the "
"``mail_admins`` handler. In addition, this logger is marked to *not* "
"propagate messages. This means that log messages written to ``django."
"request`` will not be handled by the ``django`` logger."
msgstr ""

# ceacc7b7c2fc4f2ab2bebb81dcfba27f
#: ../../topics/logging.txt:351
msgid ""
"``myproject.custom``, which passes all messages at ``INFO`` or higher that "
"also pass the ``special`` filter to two handlers -- the ``console``, and "
"``mail_admins``. This means that all ``INFO`` level messages (or higher) "
"will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will "
"also be output via email."
msgstr ""

# c641efe6f200497e9ec80e84b8feb7c0
#: ../../topics/logging.txt:361
msgid "Custom logging configuration"
msgstr ""

# bfb633cbee254f6ead5f6a1021853918
#: ../../topics/logging.txt:363
msgid ""
"If you don't want to use Python's dictConfig format to configure your "
"logger, you can specify your own configuration scheme."
msgstr ""

# d47844f6cd8c4f89a69453dda629a093
#: ../../topics/logging.txt:366
msgid ""
"The :setting:`LOGGING_CONFIG` setting defines the callable that will be used "
"to configure Django's loggers. By default, it points at Python's :func:"
"`logging.config.dictConfig()` function. However, if you want to use a "
"different configuration process, you can use any other callable that takes a "
"single argument. The contents of :setting:`LOGGING` will be provided as the "
"value of that argument when logging is configured."
msgstr ""

# b68984ecc48948d0be94ab6c811f6d1f
#: ../../topics/logging.txt:374
msgid "Disabling logging configuration"
msgstr ""

# 5e707dc8af9d4166bde228efa3274978
#: ../../topics/logging.txt:376
msgid ""
"If you don't want to configure logging at all (or you want to manually "
"configure logging using your own approach), you can set :setting:"
"`LOGGING_CONFIG` to ``None``. This will disable the configuration process."
msgstr ""

# befe06f4922c462e8fddf3aa847b9e02
#: ../../topics/logging.txt:382
msgid ""
"Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the "
"configuration process is disabled, not logging itself. If you disable the "
"configuration process, Django will still make logging calls, falling back to "
"whatever default logging behavior is defined."
msgstr ""

# 5cd70e0a06c8429fb7586469cd02db2f
#: ../../topics/logging.txt:389
msgid "Django's logging extensions"
msgstr ""

# 812714bb6bd74a89b12ca8e2df5f2205
#: ../../topics/logging.txt:391
msgid ""
"Django provides a number of utilities to handle the unique requirements of "
"logging in Web server environment."
msgstr ""

# d8527c6f5c1d475e95f50aaca599d7a4
#: ../../topics/logging.txt:397
msgid "Django provides three built-in loggers."
msgstr ""

# da19321ce40d4ac88392be562cf63dca
#: ../../topics/logging.txt:400
msgid "``django``"
msgstr ""

# 4e22d9dff012405381813caa9a0d7a49
#: ../../topics/logging.txt:402
msgid ""
"``django`` is the catch-all logger. No messages are posted directly to this "
"logger."
msgstr ""

# 5fdf5f568f5348b29f900bf62a53c30d
#: ../../topics/logging.txt:406
msgid "``django.request``"
msgstr ""

# dfdced597663440392380a5ffad52d74
#: ../../topics/logging.txt:408
msgid ""
"Log messages related to the handling of requests. 5XX responses are raised "
"as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages."
msgstr ""

# eedd86dd5e2a44e390fbadf9649c726f
# b39a463028814c90b80d7aedbace44cd
#: ../../topics/logging.txt:412 ../../topics/logging.txt:427
msgid "Messages to this logger have the following extra context:"
msgstr ""

# 3904bf7ccede445aa9e8a18242e9fad8
#: ../../topics/logging.txt:414
msgid "``status_code``: The HTTP response code associated with the request."
msgstr ""

# 2241db3e019a46ce82fa2e445d8799f2
#: ../../topics/logging.txt:417
msgid "``request``: The request object that generated the logging message."
msgstr ""

# 5cfb618fa0ff470fb680822f622080f0
#: ../../topics/logging.txt:421
msgid "``django.db.backends``"
msgstr ""

# cd1640158d81490faa89027ceaf8daa8
#: ../../topics/logging.txt:423
msgid ""
"Messages relating to the interaction of code with the database. For example, "
"every SQL statement executed by a request is logged at the ``DEBUG`` level "
"to this logger."
msgstr ""

# d6bdd02efcdd4376a80c2ad482c0486f
#: ../../topics/logging.txt:429
msgid "``duration``: The time taken to execute the SQL statement."
msgstr ""

# 25271c1168c142c198592b61bf7632aa
#: ../../topics/logging.txt:430
msgid "``sql``: The SQL statement that was executed."
msgstr ""

# c1c1167c647a4eb899f044b9b7840262
#: ../../topics/logging.txt:431
msgid "``params``: The parameters that were used in the SQL call."
msgstr ""

# 9248a57639194500bf1a7618273c37bc
#: ../../topics/logging.txt:433
msgid ""
"For performance reasons, SQL logging is only enabled when ``settings.DEBUG`` "
"is set to ``True``, regardless of the logging level or handlers that are "
"installed."
msgstr ""

# 9011ee85c1f04c7da8d071d763a39c83
#: ../../topics/logging.txt:440
msgid ""
"Django provides one log handler in addition to those provided by the Python "
"logging module."
msgstr ""

# c45ac72f569040f9b8e3b8447a309a6c
#: ../../topics/logging.txt:445
msgid ""
"This handler sends an email to the site admins for each log message it "
"receives."
msgstr ""

# 5c3fb6e399704d15a4e95ac5a71cb7e0
#: ../../topics/logging.txt:448
msgid ""
"If the log record contains a ``request`` attribute, the full details of the "
"request will be included in the email."
msgstr ""

# 16cbb8bfae4f44c398ec88d9b63ee5f6
#: ../../topics/logging.txt:451
msgid ""
"If the log record contains stack trace information, that stack trace will be "
"included in the email."
msgstr ""

# 46c7e3ace99e4460b2792f69b9a05d02
#: ../../topics/logging.txt:454
msgid ""
"The ``include_html`` argument of ``AdminEmailHandler`` is used to control "
"whether the traceback email includes an HTML attachment containing the full "
"content of the debug Web page that would have been produced if :setting:"
"`DEBUG` were ``True``. To set this value in your configuration, include it "
"in the handler definition for ``django.utils.log.AdminEmailHandler``, like "
"this::"
msgstr ""

# 44e0741f9c23440198d0abf5c9d1d6d6
#: ../../topics/logging.txt:469
msgid ""
"Note that this HTML version of the email contains a full traceback, with "
"names and values of local variables at each level of the stack, plus the "
"values of your Django settings. This information is potentially very "
"sensitive, and you may not want to send it over email. Consider using "
"something such as `Sentry`_ to get the best of both worlds -- the rich "
"information of full tracebacks plus the security of *not* sending the "
"information over email. You may also explicitly designate certain sensitive "
"information to be filtered out of error reports -- learn more on :ref:"
"`Filtering error reports<filtering-error-reports>`."
msgstr ""

# 7a9d276e109c4ff8a3eee14d8553d403
#: ../../topics/logging.txt:485
msgid ""
"Django provides two log filters in addition to those provided by the Python "
"logging module."
msgstr ""

# 84b648e391da428390af220d23e9d06e
#: ../../topics/logging.txt:492
msgid ""
"This filter accepts a callback function (which should accept a single "
"argument, the record to be logged), and calls it for each record that passes "
"through the filter. Handling of that record will not proceed if the callback "
"returns False."
msgstr ""

# ce3fff20914a40bebd23c4dff3b2fdb9
#: ../../topics/logging.txt:497
msgid ""
"For instance, to filter out :exc:`~django.http.UnreadablePostError` (raised "
"when a user cancels an upload) from the admin emails, you would create a "
"filter function::"
msgstr ""

# efcc9d87e10e42fea431e82f87571f5f
#: ../../topics/logging.txt:510
msgid "and then add it to your logging config::"
msgstr ""

# aff41322fb294047b8e21d2f3cd0d8ff
#: ../../topics/logging.txt:530
msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""

# 1549edfea4144dd5a9ba1bd93594f7bc
#: ../../topics/logging.txt:532
msgid ""
"This filter is used as follows in the default :setting:`LOGGING` "
"configuration to ensure that the :class:`AdminEmailHandler` only sends error "
"emails to admins when :setting:`DEBUG` is ``False``::"
msgstr ""

# e19f79dfbd304349b21dcac0516bc849
#: ../../topics/logging.txt:553
msgid ""
"This filter is similar to :class:`RequireDebugFalse`, except that records "
"are passed only when :setting:`DEBUG` is ``True``."
msgstr ""

# 81731ad344b048c49ebbed0d270c6b45
#: ../../topics/logging.txt:559
msgid "Django's default logging configuration"
msgstr ""

# ee4f621e35dd43e6b154a8e7b5a72664
#: ../../topics/logging.txt:561
msgid ""
"By default, Django configures the ``django.request`` logger so that all "
"messages with ``ERROR`` or ``CRITICAL`` level are sent to :class:"
"`AdminEmailHandler`, as long as the :setting:`DEBUG` setting is set to "
"``False``."
msgstr ""

# 7bb65d21ab244e7aa3ad72c98c9762a2
#: ../../topics/logging.txt:565
msgid ""
"All messages reaching the ``django`` catch-all logger when :setting:`DEBUG` "
"is ``True`` are sent to the console. They are simply discarded (sent to "
"``NullHandler``) when :setting:`DEBUG` is ``False``."
msgstr ""

# 6e0fec7d6e234d9a88b7b151b6b29874
#: ../../topics/logging.txt:574
msgid ""
"See also :ref:`Configuring logging <configuring-logging>` to learn how you "
"can complement or replace this default logging configuration."
msgstr ""

# c4d1ce94182343f4a457ade4b47161d0
#: ../../topics/pagination.txt:3
msgid "Pagination"
msgstr ""

# 804b40aec6a64c94b693a808f5a9bd4c
#: ../../topics/pagination.txt:8
msgid ""
"Django provides a few classes that help you manage paginated data -- that "
"is, data that's split across several pages, with \"Previous/Next\" links. "
"These classes live in :file:`django/core/paginator.py`."
msgstr ""

# 99b5851f59934546b10fe347f9bfef8e
#: ../../topics/pagination.txt:15
msgid ""
"Give :class:`Paginator` a list of objects, plus the number of items you'd "
"like to have on each page, and it gives you methods for accessing the items "
"for each page::"
msgstr ""

# 42006acaabf54e9e979d08b854b7a6e9
#: ../../topics/pagination.txt:67
msgid ""
"Note that you can give ``Paginator`` a list/tuple, a Django ``QuerySet``, or "
"any other object with a ``count()`` or ``__len__()`` method. When "
"determining the number of objects contained in the passed object, "
"``Paginator`` will first try calling ``count()``, then fallback to using "
"``len()`` if the passed object has no ``count()`` method. This allows "
"objects such as Django's ``QuerySet`` to use a more efficient ``count()`` "
"method when available."
msgstr ""

# d2a533921ae540d6ad9ddbf9b124afd5
#: ../../topics/pagination.txt:77
msgid "Using ``Paginator`` in a view"
msgstr ""

# bbb3dd5bc6914612a634afc025dca349
#: ../../topics/pagination.txt:79
msgid ""
"Here's a slightly more complex example using :class:`Paginator` in a view to "
"paginate a queryset. We give both the view and the accompanying template to "
"show how you can display the results. This example assumes you have a "
"``Contacts`` model that has already been imported."
msgstr ""

# f177d35ecac4446788c2f3961c4cbaee
#: ../../topics/pagination.txt:84
msgid "The view function looks like this::"
msgstr ""

# 7678fb4d36314e8594132db0fe775003
#: ../../topics/pagination.txt:104
msgid ""
"In the template :file:`list.html`, you'll want to include navigation between "
"pages along with any interesting information from the objects themselves::"
msgstr ""

# df537825cc604e40a957a1960ae59065
#: ../../topics/pagination.txt:136
msgid "``Paginator`` objects"
msgstr ""

# 101fc3b847b8484f93b83db37020475b
#: ../../topics/pagination.txt:138
msgid "The :class:`Paginator` class has this constructor:"
msgstr ""

# ebb830c01e6f4b1ebea55851fbed5042
#: ../../topics/pagination.txt:147
msgid "``object_list``"
msgstr ""

# 2a0953bc71a14547bd3fdc6ae0317c17
#: ../../topics/pagination.txt:146
msgid ""
"A list, tuple, Django ``QuerySet``, or other sliceable object with a "
"``count()`` or ``__len__()`` method."
msgstr ""

# ab18f8da668748fba886b1b3c40446d1
#: ../../topics/pagination.txt:151
msgid "``per_page``"
msgstr ""

# c0b01bae2f464035bf417e201adf49ff
#: ../../topics/pagination.txt:150
msgid ""
"The maximum number of items to include on a page, not including orphans (see "
"the ``orphans`` optional argument below)."
msgstr ""

# 4604855578c94a1f9b0eb7577bae9d3a
#: ../../topics/pagination.txt:164
msgid "``orphans``"
msgstr ""

# 06be23e7ee424e08abb83a461b4f664a
#: ../../topics/pagination.txt:157
msgid ""
"The minimum number of items allowed on the last page, defaults to zero. Use "
"this when you don't want to have a last page with very few items. If the "
"last page would normally have a number of items less than or equal to "
"``orphans``, then those items will be added to the previous page (which "
"becomes the last page) instead of leaving the items on a page by themselves. "
"For example, with 23 items, ``per_page=10``, and ``orphans=3``, there will "
"be two pages; the first page with 10 items and the  second (and last) page "
"with 13 items."
msgstr ""

# f55ce7b1f4f24880ad837d5c15863b51
#: ../../topics/pagination.txt:168
msgid "``allow_empty_first_page``"
msgstr ""

# 1be9f6863b554113ae39a3c080042eb7
#: ../../topics/pagination.txt:167
msgid ""
"Whether or not the first page is allowed to be empty.  If ``False`` and "
"``object_list`` is  empty, then an ``EmptyPage`` error will be raised."
msgstr ""

# 2b585ce689684b6286b966d7342a625f
# c110fcd0713e4edfad9b3d54c59ba6e4
# 3a88df2ff6d443248948863331f6fdbb
#: ../../topics/pagination.txt:171 ../../topics/pagination.txt:242
#: ../../topics/testing/advanced.txt:268
msgid "Methods"
msgstr ""

# c347a321c6664a5cb5c60bae5909b60d
#: ../../topics/pagination.txt:175
msgid ""
"Returns a :class:`Page` object with the given 1-based index. Raises :exc:"
"`InvalidPage` if the given page number doesn't exist."
msgstr ""

# c6b8f228956a4ce793ed670579d607f9
# d87030dff3db4a72a0cfbeec8c971728
# 49d2a4873d404bdea963991d1d73b92c
#: ../../topics/pagination.txt:179 ../../topics/pagination.txt:287
#: ../../topics/testing/advanced.txt:257
msgid "Attributes"
msgstr ""

# 965dcfe333a44631ab304b1e6f04f81b
#: ../../topics/pagination.txt:183
msgid "The total number of objects, across all pages."
msgstr ""

# 3ab1ef190d5a48c98f0663316ce5732b
#: ../../topics/pagination.txt:187
msgid ""
"When determining the number of objects contained in ``object_list``, "
"``Paginator`` will first try calling ``object_list.count()``. If "
"``object_list`` has no ``count()`` method, then ``Paginator`` will fallback "
"to using ``len(object_list)``. This allows objects, such as Django's "
"``QuerySet``, to use a more efficient ``count()`` method when available."
msgstr ""

# a1be4150d6044247953d17e1d214b4d5
#: ../../topics/pagination.txt:196
msgid "The total number of pages."
msgstr ""

# 628f2479fe694a9d8312d60243606978
#: ../../topics/pagination.txt:200
msgid "A 1-based range of page numbers, e.g., ``[1, 2, 3, 4]``."
msgstr ""

# 6045d390d73b4c938e713230db67bf5c
#: ../../topics/pagination.txt:204
msgid "``InvalidPage`` exceptions"
msgstr ""

# a38b4f8cab4e41eeb4ae47839558e5d9
#: ../../topics/pagination.txt:208
msgid ""
"A base class for exceptions raised when a paginator is passed an invalid "
"page number."
msgstr ""

# 94969829d9d148faa6880042046eb9f2
#: ../../topics/pagination.txt:211
msgid ""
"The :meth:`Paginator.page` method raises an exception if the requested page "
"is invalid (i.e., not an integer) or contains no objects. Generally, it's "
"enough to trap the ``InvalidPage`` exception, but if you'd like more "
"granularity, you can trap either of the following exceptions:"
msgstr ""

# 6b5d9d8368514763b8846aa97a3c7bd3
#: ../../topics/pagination.txt:218
msgid "Raised when ``page()`` is given a value that isn't an integer."
msgstr ""

# 3abfbeea42784a26aac66b1ae8bf3bcc
#: ../../topics/pagination.txt:222
msgid ""
"Raised when ``page()`` is given a valid value but no objects exist on that "
"page."
msgstr ""

# b462978fb3b149928734313ec620c64a
#: ../../topics/pagination.txt:225
msgid ""
"Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can "
"handle them both with a simple ``except InvalidPage``."
msgstr ""

# c91895bd50e44847afac739d94be1ce5
#: ../../topics/pagination.txt:230
msgid "``Page`` objects"
msgstr ""

# 98985a4cc6db487b875bd62905f3f090
#: ../../topics/pagination.txt:232
msgid ""
"You usually won't construct ``Page`` objects by hand -- you'll get them "
"using :meth:`Paginator.page`."
msgstr ""

# f5c5a09b36bc4b4699b5c3d5646397fa
#: ../../topics/pagination.txt:246
msgid "Returns ``True`` if there's a next page."
msgstr ""

# 04d7fc488c724758a2ee35681840db9b
#: ../../topics/pagination.txt:250
msgid "Returns ``True`` if there's a previous page."
msgstr ""

# 7f75ae9845f5430c8072fbc9628c5a28
#: ../../topics/pagination.txt:254
msgid "Returns ``True`` if there's a next *or* previous page."
msgstr ""

# 648a44b6d2254c938b531ae568e3d29a
#: ../../topics/pagination.txt:258
msgid "Returns the next page number."
msgstr ""

# 7a5335a8a6b44d25a04f0162806413d3
#: ../../topics/pagination.txt:262
msgid "Raises :exc:`InvalidPage` if next page doesn't exist."
msgstr ""

# 24ed636975c64a9d97d88513e610f609
#: ../../topics/pagination.txt:266
msgid "Returns the previous page number."
msgstr ""

# 25a897382e7f4ef4b2fac73ccee8ba5d
#: ../../topics/pagination.txt:270
msgid "Raises :exc:`InvalidPage` if previous page doesn't exist."
msgstr ""

# 0f2581ee29024c9ca5b5e5480aace90e
#: ../../topics/pagination.txt:274
msgid ""
"Returns the 1-based index of the first object on the page, relative to all "
"of the objects in the paginator's list. For example, when paginating a list "
"of 5 objects with 2 objects per page, the second page's :meth:`~Page."
"start_index` would return ``3``."
msgstr ""

# 073d678ce1dd41c7b16f88b3ba923b11
#: ../../topics/pagination.txt:281
msgid ""
"Returns the 1-based index of the last object on the page, relative to all of "
"the objects in the paginator's list. For example, when paginating a list of "
"5 objects with 2 objects per page, the second page's :meth:`~Page.end_index` "
"would return ``4``."
msgstr ""

# 8eee779cc7394585ad9ab0d9defb4393
#: ../../topics/pagination.txt:291
msgid "The list of objects on this page."
msgstr ""

# a432dd4b3e2241d9b4a7c8365a730565
#: ../../topics/pagination.txt:295
msgid "The 1-based page number for this page."
msgstr ""

# 2d2b9a4b507d46e4859e01a088ab634c
#: ../../topics/pagination.txt:299
msgid "The associated :class:`Paginator` object."
msgstr ""

# 93ded019fb174579b2d4c4871d93aa06
#: ../../topics/python3.txt:3
msgid "Porting to Python 3"
msgstr ""

# dd47715947a04908ad4fbe2eaf31fd4a
#: ../../topics/python3.txt:5
msgid ""
"Django 1.5 is the first version of Django to support Python 3. The same code "
"runs both on Python 2 (≥ 2.6.5) and Python 3 (≥ 3.2), thanks to the six_ "
"compatibility layer."
msgstr ""

# 56807734d4d6435695122c876a7b7977
#: ../../topics/python3.txt:11
msgid ""
"This document is primarily targeted at authors of pluggable application who "
"want to support both Python 2 and 3. It also describes guidelines that apply "
"to Django's code."
msgstr ""

# a891afae54fe41148cf04cdb16f961ff
#: ../../topics/python3.txt:16
msgid "Philosophy"
msgstr ""

# 19cda1a353934321a89260f8c4b1e9e2
#: ../../topics/python3.txt:18
msgid ""
"This document assumes that you are familiar with the changes between Python "
"2 and Python 3. If you aren't, read `Python's official porting guide`_ "
"first. Refreshing your knowledge of unicode handling on Python 2 and 3 will "
"help; the `Pragmatic Unicode`_ presentation is a good resource."
msgstr ""

# 2f17a6600f9e448fbd1243f2e3f9ffba
#: ../../topics/python3.txt:23
msgid ""
"Django uses the *Python 2/3 Compatible Source* strategy. Of course, you're "
"free to chose another strategy for your own code, especially if you don't "
"need to stay compatible with Python 2. But authors of pluggable applications "
"are encouraged to use the same porting strategy as Django itself."
msgstr ""

# f9c01bb9656e4866abd69be431e67b3d
#: ../../topics/python3.txt:28
msgid ""
"Writing compatible code is much easier if you target Python ≥ 2.6. Django "
"1.5 introduces compatibility tools such as :mod:`django.utils.six`, which is "
"a customized version of the :mod:`six module <six>`. For convenience, "
"forwards-compatible aliases were introduced in Django 1.4.2. If your "
"application takes advantage of these tools, it will require Django ≥ 1.4.2."
msgstr ""

# fd7c6548669f47118a0f70a3c79a870e
#: ../../topics/python3.txt:34
msgid ""
"Obviously, writing compatible source code adds some overhead, and that can "
"cause frustration. Django's developers have found that attempting to write "
"Python 3 code that's compatible with Python 2 is much more rewarding than "
"the opposite. Not only does that make your code more future-proof, but "
"Python 3's advantages (like the saner string handling) start shining "
"quickly. Dealing with Python 2 becomes a backwards compatibility "
"requirement, and we as developers are used to dealing with such constraints."
msgstr ""

# a9d50e342d30418b84d79584f1e517a0
#: ../../topics/python3.txt:42
msgid ""
"Porting tools provided by Django are inspired by this philosophy, and it's "
"reflected throughout this guide."
msgstr ""

# c272427946a44a6c96212b2e366dd9f7
#: ../../topics/python3.txt:49
msgid "Porting tips"
msgstr ""

# 28593413731a49a8a42d96e62dde9541
#: ../../topics/python3.txt:52
msgid "Unicode literals"
msgstr ""

# f0b4ee7eb1814abbae1266781e6d5888
#: ../../topics/python3.txt:54
msgid "This step consists in:"
msgstr ""

# fb6a7192afd245bb8b884f0b6159e97b
#: ../../topics/python3.txt:56
msgid ""
"Adding ``from __future__ import unicode_literals`` at the top of your Python "
"modules -- it's best to put it in each and every module, otherwise you'll "
"keep checking the top of your files to see which mode is in effect;"
msgstr ""

# e523cd7af9f14dafa4b1c21b489edec8
#: ../../topics/python3.txt:59
msgid "Removing the ``u`` prefix before unicode strings;"
msgstr ""

# 45ed712fc4a546b2985154a0347e5ba8
#: ../../topics/python3.txt:60
msgid "Adding a ``b`` prefix before bytestrings."
msgstr ""

# d5417cb5f3834fd88d3c6902ad85cd06
#: ../../topics/python3.txt:62
msgid ""
"Performing these changes systematically guarantees backwards compatibility."
msgstr ""

# a146a282d8cb4d4ebf7cd6b95c5bfd81
#: ../../topics/python3.txt:64
msgid ""
"However, Django applications generally don't need bytestrings, since Django "
"only exposes unicode interfaces to the programmer. Python 3 discourages "
"using bytestrings, except for binary data or byte-oriented interfaces. "
"Python 2 makes bytestrings and unicode strings effectively interchangeable, "
"as long as they only contain ASCII data. Take advantage of this to use "
"unicode strings wherever possible and avoid the ``b`` prefixes."
msgstr ""

# 6dfb753bd8f44baba8d349408cf36d53
#: ../../topics/python3.txt:73
msgid ""
"Python 2's ``u`` prefix is a syntax error in Python 3.2 but it will be "
"allowed again in Python 3.3 thanks to :pep:`414`. Thus, this transformation "
"is optional if you target Python ≥ 3.3. It's still recommended, per the "
"\"write Python 3 code\" philosophy."
msgstr ""

# adb8627899744e18928bf691b9108ee7
# c2e430a3dac8432a851711dc715d525b
#: ../../topics/python3.txt:79 ../../topics/python3.txt:336
msgid "String handling"
msgstr ""

# 6375c0f8e5c84420be3a4f3dee246c74
#: ../../topics/python3.txt:81
msgid ""
"Python 2's :func:`unicode` type was renamed :func:`str` in Python 3, :func:"
"`str` was renamed ``bytes()``, and :func:`basestring` disappeared. six_ "
"provides :ref:`tools <string-handling-with-six>` to deal with these changes."
msgstr ""

# d06f704329754032a1faec5828563eee
#: ../../topics/python3.txt:86
msgid ""
"Django also contains several string related classes and functions in the :"
"mod:`django.utils.encoding` and :mod:`django.utils.safestring` modules. "
"Their names used the words ``str``, which doesn't mean the same thing in "
"Python 2 and Python 3, and ``unicode``, which doesn't exist in Python 3. In "
"order to avoid ambiguity and confusion these concepts were renamed ``bytes`` "
"and ``text``."
msgstr ""

# dfcb265f2d614ce899d83f31d498451b
#: ../../topics/python3.txt:93
msgid "Here are the name changes in :mod:`django.utils.encoding`:"
msgstr ""

# caa303747eb34b8cb459a12481d13f4c
# f286b172d9c145979217145c24e15a31
#: ../../topics/python3.txt:96 ../../topics/python3.txt:120
msgid "Old name"
msgstr ""

# 6cbda7e98481470daccb8461be5054f0
# a17bade8ef714801a1ebb76bc44217c9
#: ../../topics/python3.txt:96 ../../topics/python3.txt:120
msgid "New name"
msgstr ""

# a39ba8e04b6649c189c39519b3dab3d4
#: ../../topics/python3.txt:98
msgid "``smart_str``"
msgstr ""

# d83d5b99100f4614a18a5a14a10cddde
#: ../../topics/python3.txt:98
msgid "``smart_bytes``"
msgstr ""

# 9d9c3addd21c44aa82e06debd45e92f0
#: ../../topics/python3.txt:99
msgid "``smart_unicode``"
msgstr ""

# 4c2662e956f6435bb78a69fb82cc87b9
#: ../../topics/python3.txt:99
msgid "``smart_text``"
msgstr ""

# 744a83b14db14473949958b446d6a8f1
#: ../../topics/python3.txt:100
msgid "``force_unicode``"
msgstr ""

# 3e75f68e470443cdaff7e34cc35c4d1d
#: ../../topics/python3.txt:100
msgid "``force_text``"
msgstr ""

# 4a6a796fb6a44b978c2e96a05c67d8e8
#: ../../topics/python3.txt:103
msgid ""
"For backwards compatibility, the old names still work on Python 2. Under "
"Python 3, ``smart_str`` is an alias for ``smart_text``."
msgstr ""

# 112b7f3b44394239a3683185c34d2ce9
# 786f2cf450424a1c8ac28e2a572eec44
#: ../../topics/python3.txt:106 ../../topics/python3.txt:132
msgid "For forwards compatibility, the new names work as of Django 1.4.2."
msgstr ""

# 9160a304e34841dd9bc67168fc089f1f
#: ../../topics/python3.txt:110
msgid ""
":mod:`django.utils.encoding` was deeply refactored in Django 1.5 to provide "
"a more consistent API. Check its documentation for more information."
msgstr ""

# f79baa07769f4c498477275c7c4f0e62
#: ../../topics/python3.txt:114
msgid ""
":mod:`django.utils.safestring` is mostly used via the :func:`~django.utils."
"safestring.mark_safe` and :func:`~django.utils.safestring.mark_for_escaping` "
"functions, which didn't change. In case you're using the internals, here are "
"the name changes:"
msgstr ""

# 1b077e8203df43939ecc71850b2dadf3
#: ../../topics/python3.txt:122
msgid "``EscapeString``"
msgstr ""

# ca7f2c56c99b47b4adba9005a57604e1
#: ../../topics/python3.txt:122
msgid "``EscapeBytes``"
msgstr ""

# 61de51d2fbef48009f9fbe09903f3f3a
#: ../../topics/python3.txt:123
msgid "``EscapeUnicode``"
msgstr ""

# e7ad8062f5cb4a05928444226dacbb45
#: ../../topics/python3.txt:123
msgid "``EscapeText``"
msgstr ""

# 3c89876d0a554755a7e871ea37634bc2
#: ../../topics/python3.txt:124
msgid "``SafeString``"
msgstr ""

# 08b35f9e2ecb4a29a274d46f04773ac1
#: ../../topics/python3.txt:124
msgid "``SafeBytes``"
msgstr ""

# 7da7a0971c5441ffbe7892fbf346a78b
#: ../../topics/python3.txt:125
msgid "``SafeUnicode``"
msgstr ""

# 5eab92601e7e492b95be2087184c0f22
#: ../../topics/python3.txt:125
msgid "``SafeText``"
msgstr ""

# 0bac75a5504940df8f5fd08ef1306582
#: ../../topics/python3.txt:128
msgid ""
"For backwards compatibility, the old names still work on Python 2. Under "
"Python 3, ``EscapeString`` and ``SafeString`` are aliases for ``EscapeText`` "
"and ``SafeText`` respectively."
msgstr ""

# 56c11eeb405f4a73a29e07312f1e6554
#: ../../topics/python3.txt:135
msgid ":meth:`~object.__str__` and :meth:`~object.__unicode__` methods"
msgstr ""

# 99330583c72942029357db383fb23d57
#: ../../topics/python3.txt:137
msgid ""
"In Python 2, the object model specifies :meth:`~object.__str__` and :meth:"
"`~object.__unicode__` methods. If these methods exist, they must return "
"``str`` (bytes) and ``unicode`` (text) respectively."
msgstr ""

# 8256032f763f457ba9f25680c794e0a4
#: ../../topics/python3.txt:141
msgid ""
"The ``print`` statement and the :func:`str` built-in call :meth:`~object."
"__str__` to determine the human-readable representation of an object. The :"
"func:`unicode` built-in calls :meth:`~object.__unicode__` if it exists, and "
"otherwise falls back to :meth:`~object.__str__` and decodes the result with "
"the system encoding. Conversely, the :class:`~django.db.models.Model` base "
"class automatically derives :meth:`~object.__str__` from :meth:`~object."
"__unicode__` by encoding to UTF-8."
msgstr ""

# d9f8adccbbb442579c9407c25f4184ce
#: ../../topics/python3.txt:149
msgid ""
"In Python 3, there's simply :meth:`~object.__str__`, which must return "
"``str`` (text)."
msgstr ""

# 024cdf9ac0454de2bae86a79c6f77879
#: ../../topics/python3.txt:152
msgid ""
"(It is also possible to define ``__bytes__()``, but Django application have "
"little use for that method, because they hardly ever deal with ``bytes``.)"
msgstr ""

# 6dee811cdece49fd96ab8a02d77f12ab
#: ../../topics/python3.txt:156
msgid ""
"Django provides a simple way to define :meth:`~object.__str__` and :meth:"
"`~object.__unicode__` methods that work on Python 2 and 3: you must define "
"a :meth:`~object.__str__` method returning text and to apply the :func:"
"`~django.utils.encoding.python_2_unicode_compatible` decorator."
msgstr ""

# 1a28c0cd2ae149969dc79af2118a572d
#: ../../topics/python3.txt:161
msgid ""
"On Python 3, the decorator is a no-op. On Python 2, it defines appropriate :"
"meth:`~object.__unicode__` and :meth:`~object.__str__` methods (replacing "
"the original :meth:`~object.__str__` method in the process). Here's an "
"example::"
msgstr ""

# d826c73408a74afd9a517923f3622e06
#: ../../topics/python3.txt:173
msgid "This technique is the best match for Django's porting philosophy."
msgstr ""

# 39b0f51ac7d34433bb629afc70f7d2c2
#: ../../topics/python3.txt:175
msgid ""
"For forwards compatibility, this decorator is available as of Django 1.4.2."
msgstr ""

# 8efee0d6f3f54f71a74b3417d6e93339
#: ../../topics/python3.txt:177
msgid ""
"Finally, note that :meth:`~object.__repr__` must return a ``str`` on all "
"versions of Python."
msgstr ""

# 78947b2c21d54dde96e49f15534a7e5d
#: ../../topics/python3.txt:181
msgid ":class:`dict` and :class:`dict`-like classes"
msgstr ""

# 081f8b667c9c4ddaabdad0d4ab6953fb
#: ../../topics/python3.txt:183
msgid ""
":meth:`dict.keys`, :meth:`dict.items` and :meth:`dict.values` return lists "
"in Python 2 and iterators in Python 3. :class:`~django.http.QueryDict` and "
"the :class:`dict`-like classes defined in :mod:`django.utils.datastructures` "
"behave likewise in Python 3."
msgstr ""

# 853fd8a68257409fbd47059ddfaa5123
#: ../../topics/python3.txt:188
msgid ""
"six_ provides compatibility functions to work around this change: :func:"
"`~six.iterkeys`, :func:`~six.iteritems`, and :func:`~six.itervalues`. It "
"also contains an undocumented ``iterlists`` function that works well for "
"``django.utils.datastructures.MultiValueDict`` and its subclasses."
msgstr ""

# 8a1a60e5ec25439da8e8095c0ef1fdea
#: ../../topics/python3.txt:194
msgid ""
":class:`~django.http.HttpRequest` and :class:`~django.http.HttpResponse` "
"objects"
msgstr ""

# 021f334bb8394ecf866ad52725f6de8e
#: ../../topics/python3.txt:196
msgid "According to :pep:`3333`:"
msgstr ""

# b55a9f810fdc48e39eb230443c8eff13
#: ../../topics/python3.txt:198
msgid "headers are always ``str`` objects,"
msgstr ""

# 1feffb38a2644d9c8809edef4f8627a9
#: ../../topics/python3.txt:199
msgid "input and output streams are always ``bytes`` objects."
msgstr ""

# 2e46eff4e6e347d8bbd007b4c594d33b
#: ../../topics/python3.txt:201
msgid ""
"Specifically, :attr:`HttpResponse.content <django.http.HttpResponse."
"content>` contains ``bytes``, which may become an issue if you compare it "
"with a ``str`` in your tests. The preferred solution is to rely on :meth:"
"`~django.test.TestCase.assertContains` and :meth:`~django.test.TestCase."
"assertNotContains`. These methods accept a response and a unicode string as "
"arguments."
msgstr ""

# 6d4f6d45c11d4340b46b255563a9670a
#: ../../topics/python3.txt:209
msgid "Coding guidelines"
msgstr ""

# 20aca8af86b64d5e8a7560820b4bc37e
#: ../../topics/python3.txt:211
msgid ""
"The following guidelines are enforced in Django's source code. They're also "
"recommended for third-party application who follow the same porting strategy."
msgstr ""

# b6dbd4b0359046288d4cac50ce535ada
#: ../../topics/python3.txt:215
msgid "Syntax requirements"
msgstr ""

# 3aade7a4c44a41f7ad6a056bb2866e22
#: ../../topics/python3.txt:218
msgid "Unicode"
msgstr ""

# d50dbca380a74c499a75e9c9b8eca560
#: ../../topics/python3.txt:220
msgid ""
"In Python 3, all strings are considered Unicode by default. The ``unicode`` "
"type from Python 2 is called ``str`` in Python 3, and ``str`` becomes "
"``bytes``."
msgstr ""

# b1c8efd009e644acb27d2a02a11cf814
#: ../../topics/python3.txt:224
msgid ""
"You mustn't use the ``u`` prefix before a unicode string literal because "
"it's a syntax error in Python 3.2. You must prefix byte strings with ``b``."
msgstr ""

# eb813e2f73cb4f9eba6801d4c2f995e9
#: ../../topics/python3.txt:227
msgid ""
"In order to enable the same behavior in Python 2, every module must import "
"``unicode_literals`` from ``__future__``::"
msgstr ""

# 7f20670fba174fdab9a69320ae29bd6d
#: ../../topics/python3.txt:235
msgid ""
"If you need a byte string literal under Python 2 and a unicode string "
"literal under Python 3, use the :func:`str` builtin::"
msgstr ""

# 2e061c68f83e4910aba060a393d4f0b4
#: ../../topics/python3.txt:240
msgid ""
"In Python 3, there aren't any automatic conversions between ``str`` and "
"``bytes``, and the :mod:`codecs` module became more strict. :meth:`str."
"encode` always returns ``bytes``, and ``bytes.decode`` always returns "
"``str``. As a consequence, the following pattern is sometimes necessary::"
msgstr ""

# 682608cbfad34d24a334f8a50a4b498d
#: ../../topics/python3.txt:247
msgid "Be cautious if you have to `index bytestrings`_."
msgstr ""

# 56b362991ec246d5b10421c33cc7c3c6
# 0cc7ec01140f409f971c50e744729655
#: ../../topics/python3.txt:252 ../../topics/testing/overview.txt:770
msgid "Exceptions"
msgstr ""

# 54f6975f958b44eba5812a42322fa1c4
#: ../../topics/python3.txt:254
msgid "When you capture exceptions, use the ``as`` keyword::"
msgstr ""

# 94abc2acbc89457888f8e5cf7890f72d
#: ../../topics/python3.txt:261
msgid "This older syntax was removed in Python 3::"
msgstr ""

# 559f3b16a6c7443ba43852e953a53bc5
#: ../../topics/python3.txt:268
msgid ""
"The syntax to reraise an exception with a different traceback also changed. "
"Use :func:`six.reraise`."
msgstr ""

# 5c6719b673164e3485aebaec209e2ecf
#: ../../topics/python3.txt:272
msgid "Magic methods"
msgstr ""

# 13937a6045b94ebea631b01b06120794
#: ../../topics/python3.txt:274
msgid "Use the patterns below to handle magic methods renamed in Python 3."
msgstr ""

# 6b4df3ab3fbe4e5d85fe3339bd966012
#: ../../topics/python3.txt:277
msgid "Iterators"
msgstr ""

# b950cd0d63424b0b95535bab3992e4fe
#: ../../topics/python3.txt:289
msgid "Boolean evaluation"
msgstr ""

# a01be8b3a0cc47ad95cd011bc0c37f6e
#: ../../topics/python3.txt:302
msgid "Division"
msgstr ""

# 66cf644bbcca44a3a1b727314f3e42c6
#: ../../topics/python3.txt:323
msgid "Writing compatible code with six"
msgstr ""

# 5296815fee5d439f85f518a32eb78c52
#: ../../topics/python3.txt:325
msgid ""
"six_ is the canonical compatibility library for supporting Python 2 and 3 in "
"a single codebase. Read its documentation!"
msgstr ""

# 632cb41db57c4baeb120b76ea6f0ac72
#: ../../topics/python3.txt:328
msgid ""
"A :mod:`customized version of six <django.utils.six>` is bundled with Django "
"as of version 1.4.2. You can import it as ``django.utils.six``."
msgstr ""

# ff8a0a76a9364387956c38bec8fa726d
#: ../../topics/python3.txt:331
msgid "Here are the most common changes required to write compatible code."
msgstr ""

# d4c8ab29778849c4bd5783cc863b7365
#: ../../topics/python3.txt:338
msgid ""
"The ``basestring`` and ``unicode`` types were removed in Python 3, and the "
"meaning of ``str`` changed. To test these types, use the following idioms::"
msgstr ""

# f8f087b2fd254803bf5671fa595fa04e
#: ../../topics/python3.txt:345
msgid ""
"Python ≥ 2.6 provides ``bytes`` as an alias for ``str``, so you don't need :"
"data:`six.binary_type`."
msgstr ""

# 533b09608b534023b212ecc519a7da49
#: ../../topics/python3.txt:349
msgid "``long``"
msgstr ""

# 763904a32d2c4ea79faf8fc6186994f3
#: ../../topics/python3.txt:351
msgid ""
"The ``long`` type no longer exists in Python 3. ``1L`` is a syntax error. "
"Use :data:`six.integer_types` check if a value is an integer or a long::"
msgstr ""

# 2f6d07ac15fc4a35ba382bffc97abe32
#: ../../topics/python3.txt:357
msgid "``xrange``"
msgstr ""

# 20f59b04b6dc4c03a92fb45d2396b341
#: ../../topics/python3.txt:359
msgid "Import ``six.moves.xrange`` wherever you use ``xrange``."
msgstr ""

# 0f15a1803c274ef89508c3786d30b185
#: ../../topics/python3.txt:362
msgid "Moved modules"
msgstr ""

# 40c8d003ac004dd2b15937c4fe8393e0
#: ../../topics/python3.txt:364
msgid ""
"Some modules were renamed in Python 3. The ``django.utils.six.moves`` module "
"(based on the :mod:`six.moves module <six.moves>`) provides a compatible "
"location to import them."
msgstr ""

# 43e8ae59795a486ea6c5133e94534cbd
#: ../../topics/python3.txt:367
msgid ""
"The ``urllib``, ``urllib2`` and ``urlparse`` modules were reworked in depth "
"and :mod:`django.utils.six.moves <six.moves>` doesn't handle them. Django "
"explicitly tries both locations, as follows::"
msgstr ""

# 5c81aa509fba4e34a409249b92122ea1
#: ../../topics/python3.txt:377
msgid "PY3"
msgstr ""

# 41df7723622742b2a6cd316f483cb93d
#: ../../topics/python3.txt:379
msgid ""
"If you need different code in Python 2 and Python 3, check :data:`six.PY3`::"
msgstr ""

# b0d3d22210e74a37aa7b5fca03ed722e
#: ../../topics/python3.txt:386
msgid ""
"This is a last resort solution when :mod:`six` doesn't provide an "
"appropriate function."
msgstr ""

# 71af908f71ca4d5f953674dd9a32d81c
#: ../../topics/python3.txt:393
msgid "Django customized version of six"
msgstr ""

# d6afe46a58854b0db4ef380f94cdc2ac
#: ../../topics/python3.txt:395
msgid ""
"The version of six bundled with Django (``django.utils.six``) includes a few "
"extras."
msgstr ""

# 943885c5924344558899ff863124e2d9
#: ../../topics/python3.txt:398
msgid ""
"This replaces ``testcase.assertRaisesRegexp`` on Python 2, and ``testcase."
"assertRaisesRegex`` on Python 3. ``assertRaisesRegexp`` still exists in "
"current Python3 versions, but issues a warning."
msgstr ""

# 005d330fca994c9eb8cd593ef2a7a7e5
#: ../../topics/python3.txt:403
msgid ""
"In addition to six' defaults moves, Django's version provides ``thread`` as "
"``_thread`` and ``dummy_thread`` as ``_dummy_thread``."
msgstr ""

# d6c1fbf58e4340bd9e8dab410c02bc59
#: ../../topics/security.txt:3
msgid "Security in Django"
msgstr ""

# ec715947a25c4fed9258fe44cbb0e834
#: ../../topics/security.txt:5
msgid ""
"This document is an overview of Django's security features. It includes "
"advice on securing a Django-powered site."
msgstr ""

# f94b0b4a25dc4cccac924c1e2660a5bc
#: ../../topics/security.txt:11
msgid "Cross site scripting (XSS) protection"
msgstr ""

# 65adf5304c0141bf84cf358ecce93a13
#: ../../topics/security.txt:15
msgid ""
"XSS attacks allow a user to inject client side scripts into the browsers of "
"other users. This is usually achieved by storing the malicious scripts in "
"the database where it will be retrieved and displayed to other users, or by "
"getting users to click a link which will cause the attacker's JavaScript to "
"be executed by the user's browser. However, XSS attacks can originate from "
"any untrusted source of data, such as cookies or Web services, whenever the "
"data is not sufficiently sanitized before including in a page."
msgstr ""

# 31822087535345519033d59f7580a045
#: ../../topics/security.txt:23
msgid ""
"Using Django templates protects you against the majority of XSS attacks. "
"However, it is important to understand what protections it provides and its "
"limitations."
msgstr ""

# 414f0daaf813411d9dd8b6f6dce74e2c
#: ../../topics/security.txt:27
msgid ""
"Django templates :ref:`escape specific characters <automatic-html-escaping>` "
"which are particularly dangerous to HTML. While this protects users from "
"most malicious input, it is not entirely foolproof. For example, it will not "
"protect the following:"
msgstr ""

# 8e0e277fc5964528a86ca2754d9b40ae
#: ../../topics/security.txt:36
msgid ""
"If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can "
"result in unauthorized JavaScript execution, depending on how the browser "
"renders imperfect HTML."
msgstr ""

# 59eed2e86c3348ce9cec2c7315058fd7
#: ../../topics/security.txt:40
msgid ""
"It is also important to be particularly careful when using ``is_safe`` with "
"custom template tags, the :tfilter:`safe` template tag, :mod:`mark_safe "
"<django.utils.safestring>`, and when autoescape is turned off."
msgstr ""

# 43771f623ea94e03aac82977cb300321
#: ../../topics/security.txt:44
msgid ""
"In addition, if you are using the template system to output something other "
"than HTML, there may be entirely separate characters and words which require "
"escaping."
msgstr ""

# 767e03ba254c4100b085c25b1a21d424
#: ../../topics/security.txt:48
msgid ""
"You should also be very careful when storing HTML in the database, "
"especially when that HTML is retrieved and displayed."
msgstr ""

# 969b63d19d7d407bbc4618fb5dceeda8
#: ../../topics/security.txt:52
msgid "Markup library"
msgstr ""

# 0ca311e692d3413d86f844c07ab17e5c
#: ../../topics/security.txt:54
msgid ""
"If you use :mod:`django.contrib.markup`, you need to ensure that the filters "
"are only used on trusted input, or that you have correctly configured them "
"to ensure they do not allow raw HTML output. See the documentation of that "
"module for more information."
msgstr ""

# 8628985c33564ab389ab7719535a7099
#: ../../topics/security.txt:60
msgid "Cross site request forgery (CSRF) protection"
msgstr ""

# 069d2b24c33d4c32bfcbc9737be99f94
#: ../../topics/security.txt:62
msgid ""
"CSRF attacks allow a malicious user to execute actions using the credentials "
"of another user without that user's knowledge or consent."
msgstr ""

# 390f34f4d3ee45eb91f0ea84fae795e0
#: ../../topics/security.txt:65
msgid ""
"Django has built-in protection against most types of CSRF attacks, providing "
"you have :ref:`enabled and used it <using-csrf>` where appropriate. However, "
"as with any mitigation technique, there are limitations. For example, it is "
"possible to disable the CSRF module globally or for particular views. You "
"should only do this if you know what you are doing. There are other :ref:"
"`limitations <csrf-limitations>` if your site has subdomains that are "
"outside of your control."
msgstr ""

# 5c36d81c72d2463095ed9b6f8dfae3d8
#: ../../topics/security.txt:73
msgid ""
":ref:`CSRF protection works <how-csrf-works>` by checking for a nonce in "
"each POST request. This ensures that a malicious user cannot simply \"replay"
"\" a form POST to your Web site and have another logged in user unwittingly "
"submit that form. The malicious user would have to know the nonce, which is "
"user specific (using a cookie)."
msgstr ""

# feff8017e3e54102a3343c2f429f370f
#: ../../topics/security.txt:79
msgid ""
"When deployed with :ref:`HTTPS <security-recommendation-ssl>`, "
"``CsrfViewMiddleware`` will check that the HTTP referer header is set to a "
"URL on the same origin (including subdomain and port). Because HTTPS "
"provides additional security, it is imperative to ensure connections use "
"HTTPS where it is available by forwarding insecure connection requests and "
"using HSTS for supported browsers."
msgstr ""

# 73a06096901b41e0906ccd6d24fff90f
#: ../../topics/security.txt:86
msgid ""
"Be very careful with marking views with the ``csrf_exempt`` decorator unless "
"it is absolutely necessary."
msgstr ""

# 4113e3c63f03433da8c3d63bc693715b
#: ../../topics/security.txt:91
msgid "SQL injection protection"
msgstr ""

# b99d82ca5d554acfb6cb623f9bc1ac6e
#: ../../topics/security.txt:93
msgid ""
"SQL injection is a type of attack where a malicious user is able to execute "
"arbitrary SQL code on a database. This can result in records being deleted "
"or data leakage."
msgstr ""

# 51eda33933f14b75b79867a9f0f5b252
#: ../../topics/security.txt:97
msgid ""
"By using Django's querysets, the resulting SQL will be properly escaped by "
"the underlying database driver. However, Django also gives developers power "
"to write :ref:`raw queries <executing-raw-queries>` or execute :ref:`custom "
"sql <executing-custom-sql>`. These capabilities should be used sparingly and "
"you should always be careful to properly escape any parameters that the user "
"can control. In addition, you should exercise caution when using :meth:"
"`extra() <django.db.models.query.QuerySet.extra>`."
msgstr ""

# 8977876e1176464a969f559ec7e72b40
#: ../../topics/security.txt:106
msgid "Clickjacking protection"
msgstr ""

# 5ae0f88ca21c45c98175879c75584c84
#: ../../topics/security.txt:108
msgid ""
"Clickjacking is a type of attack where a malicious site wraps another site "
"in a frame. This attack can result in an unsuspecting user being tricked "
"into performing unintended actions on the target site."
msgstr ""

# 1a1be18d34534d2c8e0858f11a008714
#: ../../topics/security.txt:112
msgid ""
"Django contains :ref:`clickjacking protection <clickjacking-prevention>` in "
"the form of the :mod:`X-Frame-Options middleware <django.middleware."
"clickjacking.XFrameOptionsMiddleware>` which in a supporting browser can "
"prevent a site from being rendered inside a frame. It is possible to disable "
"the protection on a per view basis or to configure the exact header value "
"sent."
msgstr ""

# 395bd3dcae474af4a57e5a72b5e26485
#: ../../topics/security.txt:119
msgid ""
"The middleware is strongly recommended for any site that does not need to "
"have its pages wrapped in a frame by third party sites, or only needs to "
"allow that for a small section of the site."
msgstr ""

# b849784f3f2d4c12be4a8f5ed080c6a4
#: ../../topics/security.txt:126
msgid "SSL/HTTPS"
msgstr ""

# a170d614053d44a5a397a28624d35b5a
#: ../../topics/security.txt:128
msgid ""
"It is always better for security, though not always practical in all cases, "
"to deploy your site behind HTTPS. Without this, it is possible for malicious "
"network users to sniff authentication credentials or any other information "
"transferred between client and server, and in some cases -- **active** "
"network attackers -- to alter data that is sent in either direction."
msgstr ""

# 495d5cfc2e6748dc8c294263e053293f
#: ../../topics/security.txt:134
msgid ""
"If you want the protection that HTTPS provides, and have enabled it on your "
"server, there are some additional steps you may need:"
msgstr ""

# c9dd871e580b420f8a8aad8b772cb6ec
#: ../../topics/security.txt:137
msgid ""
"If necessary, set :setting:`SECURE_PROXY_SSL_HEADER`, ensuring that you have "
"understood the warnings there thoroughly. Failure to do this can result in "
"CSRF vulnerabilities, and failure to do it correctly can also be dangerous!"
msgstr ""

# 632b716b6f6a4c1fae3054bd27e9c89d
#: ../../topics/security.txt:142
msgid "Set up redirection so that requests over HTTP are redirected to HTTPS."
msgstr ""

# a70f173862b442309e46ecedb19d60ec
#: ../../topics/security.txt:144
msgid ""
"This could be done using a custom middleware. Please note the caveats under :"
"setting:`SECURE_PROXY_SSL_HEADER`. For the case of a reverse proxy, it may "
"be easier or more secure to configure the main Web server to do the redirect "
"to HTTPS."
msgstr ""

# 762a12fa21b24f2cad97bc9d09299d26
#: ../../topics/security.txt:149
msgid "Use 'secure' cookies."
msgstr ""

# 5f0269df657d4acf922ef0eb25d6fed0
#: ../../topics/security.txt:151
msgid ""
"If a browser connects initially via HTTP, which is the default for most "
"browsers, it is possible for existing cookies to be leaked. For this reason, "
"you should set your :setting:`SESSION_COOKIE_SECURE` and :setting:"
"`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser to "
"only send these cookies over HTTPS connections. Note that this will mean "
"that sessions will not work over HTTP, and the CSRF protection will prevent "
"any POST data being accepted over HTTP (which will be fine if you are "
"redirecting all HTTP traffic to HTTPS)."
msgstr ""

# b3984d91ded44dad8595656f3eabc022
#: ../../topics/security.txt:160
msgid "Use HTTP Strict Transport Security (HSTS)"
msgstr ""

# afc56b3e4851446185d9f5657a1cc132
#: ../../topics/security.txt:162
msgid ""
"HSTS is an HTTP header that informs a browser that all future connections to "
"a particular site should always use HTTPS. Combined with redirecting "
"requests over HTTP to HTTPS, this will ensure that connections always enjoy "
"the added security of SSL provided one successful connection has occurred. "
"HSTS is usually configured on the web server."
msgstr ""

# 9162f5f36ce143c080447fe47a7f280e
#: ../../topics/security.txt:171
msgid "Host header validation"
msgstr ""

# 8e05512fc2d942879050a2405bb3d294
#: ../../topics/security.txt:173
msgid ""
"Django uses the ``Host`` header provided by the client to construct URLs in "
"certain cases. While these values are sanitized to prevent Cross Site "
"Scripting attacks, a fake ``Host`` value can be used for Cross-Site Request "
"Forgery, cache poisoning attacks, and poisoning links in emails."
msgstr ""

# 039bbc76106c47afb4dab8a94f1220b9
#: ../../topics/security.txt:178
msgid ""
"Because even seemingly-secure webserver configurations are susceptible to "
"fake ``Host`` headers, Django validates ``Host`` headers against the :"
"setting:`ALLOWED_HOSTS` setting in the :meth:`django.http.HttpRequest."
"get_host()` method."
msgstr ""

# b94ff69289fb4aa1895739f518caa40f
#: ../../topics/security.txt:183
msgid ""
"This validation only applies via :meth:`~django.http.HttpRequest."
"get_host()`; if your code accesses the ``Host`` header directly from "
"``request.META`` you are bypassing this security protection."
msgstr ""

# 09dbccbbafa94f60b7c111f5297200eb
#: ../../topics/security.txt:187
msgid "For more details see the full :setting:`ALLOWED_HOSTS` documentation."
msgstr ""

# 620bc9b2dbd24e4f8b274cec7f0c4d9f
#: ../../topics/security.txt:191
msgid ""
"Previous versions of this document recommended configuring your webserver to "
"ensure it validates incoming HTTP ``Host`` headers. While this is still "
"recommended, in many common webservers a configuration that seems to "
"validate the ``Host`` header may not in fact do so. For instance, even if "
"Apache is configured such that your Django site is served from a non-default "
"virtual host with the ``ServerName`` set, it is still possible for an HTTP "
"request to match this virtual host and supply a fake ``Host`` header. Thus, "
"Django now requires that you set :setting:`ALLOWED_HOSTS` explicitly rather "
"than relying on webserver configuration."
msgstr ""

# 88318ca6f6f243558762bc2e847ce322
#: ../../topics/security.txt:201
msgid ""
"Additionally, as of 1.3.1, Django requires you to explicitly enable support "
"for the ``X-Forwarded-Host`` header (via the :setting:`USE_X_FORWARDED_HOST` "
"setting) if your configuration requires it."
msgstr ""

# 3aff745b7c4c4aff8f1775a3d23d55be
#: ../../topics/security.txt:209
msgid "Additional security topics"
msgstr ""

# 2c0042066a9340439442d9818609b926
#: ../../topics/security.txt:211
msgid ""
"While Django provides good security protection out of the box, it is still "
"important to properly deploy your application and take advantage of the "
"security protection of the Web server, operating system and other components."
msgstr ""

# 1137e13ef62d4e48a5b449f6f71d8360
#: ../../topics/security.txt:215
msgid ""
"Make sure that your Python code is outside of the Web server's root. This "
"will ensure that your Python code is not accidentally served as plain text "
"(or accidentally executed)."
msgstr ""

# e0ef638589c34dd392e164904cd3ab03
#: ../../topics/security.txt:218
msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""

# e83372ea42b642078dd212ac28880692
#: ../../topics/security.txt:219
msgid ""
"Django does not throttle requests to authenticate users. To protect against "
"brute-force attacks against the authentication system, you may consider "
"deploying a Django plugin or Web server module to throttle these requests."
msgstr ""

# b5ffdedde23f4af0975c272a8b079322
#: ../../topics/security.txt:222
msgid ""
"If your site accepts file uploads, it is strongly advised that you limit "
"these uploads in your Web server configuration to a reasonable size in order "
"to prevent denial of service (DOS) attacks. In Apache, this can be easily "
"set using the LimitRequestBody_ directive."
msgstr ""

# 7bdde1a07dc64907bfe30c9889cc3199
#: ../../topics/security.txt:226
msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr ""

# c0546fc0c4364db6b2cc558ae5ef6a43
#: ../../topics/security.txt:227
msgid ""
"It is a good idea to limit the accessibility of your caching system and "
"database using a firewall."
msgstr ""

# 0f5b352f43734e32a4b0605cce7ec23a
#: ../../topics/serialization.txt:3
msgid "Serializing Django objects"
msgstr ""

# 43e3565fb8bc4d01991e8dc329a788ac
#: ../../topics/serialization.txt:5
msgid ""
"Django's serialization framework provides a mechanism for \"translating\" "
"Django models into other formats. Usually these other formats will be text-"
"based and used for sending Django data over a wire, but it's possible for a "
"serializer to handle any format (text-based or not)."
msgstr ""

# 872393d198ae4007bf7623f9e5ee8714
#: ../../topics/serialization.txt:12
msgid ""
"If you just want to get some data from your tables into a serialized form, "
"you could use the :djadmin:`dumpdata` management command."
msgstr ""

# a45a6656ff8e415fa7897e6944f11dd0
#: ../../topics/serialization.txt:16
msgid "Serializing data"
msgstr ""

# 277d2f404b5d4e60b236e529b51b3b65
#: ../../topics/serialization.txt:18
msgid "At the highest level, serializing data is a very simple operation::"
msgstr ""

# 59bbdba5a5234090acca2816845984f1
#: ../../topics/serialization.txt:23
msgid ""
"The arguments to the ``serialize`` function are the format to serialize the "
"data to (see `Serialization formats`_) and a :class:`~django.db.models.query."
"QuerySet` to serialize. (Actually, the second argument can be any iterator "
"that yields Django model instances, but it'll almost always be a QuerySet)."
msgstr ""

# 7d014c7051494a70814cf8f6af7e5fbf
#: ../../topics/serialization.txt:31
msgid "You can also use a serializer object directly::"
msgstr ""

# 111366d7f5764fc0a8aabee5a827a659
#: ../../topics/serialization.txt:38
msgid ""
"This is useful if you want to serialize data directly to a file-like object "
"(which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""

# 12038921a6464f8084e9150faa1e91f4
#: ../../topics/serialization.txt:46
msgid ""
"Calling :func:`~django.core.serializers.get_serializer` with an unknown :ref:"
"`format <serialization-formats>` will raise a ``django.core.serializers."
"SerializerDoesNotExist`` exception."
msgstr ""

# 6237d490dcb241c89f1a561ceaf7a794
#: ../../topics/serialization.txt:51
msgid "Subset of fields"
msgstr ""

# 55f91d750ed3463186eabcfc71bd4551
#: ../../topics/serialization.txt:53
msgid ""
"If you only want a subset of fields to be serialized, you can specify a "
"``fields`` argument to the serializer::"
msgstr ""

# 856345e56c874dcb8bf6c72d2c00652f
#: ../../topics/serialization.txt:59
msgid ""
"In this example, only the ``name`` and ``size`` attributes of each model "
"will be serialized."
msgstr ""

# 07387a34b0a74235829dab0bd593b414
#: ../../topics/serialization.txt:64
msgid ""
"Depending on your model, you may find that it is not possible to deserialize "
"a model that only serializes a subset of its fields. If a serialized object "
"doesn't specify all the fields that are required by a model, the "
"deserializer will not be able to save deserialized instances."
msgstr ""

# d3dbc3ede39644208af1c6a7651fcbd5
#: ../../topics/serialization.txt:70
msgid "Inherited Models"
msgstr ""

# 791e1b966e814b8cbdb708883d802bb1
#: ../../topics/serialization.txt:72
msgid ""
"If you have a model that is defined using an :ref:`abstract base class "
"<abstract-base-classes>`, you don't have to do anything special to serialize "
"that model. Just call the serializer on the object (or objects) that you "
"want to serialize, and the output will be a complete representation of the "
"serialized object."
msgstr ""

# d62cb2299fd74ab78a5faf8142573368
#: ../../topics/serialization.txt:78
msgid ""
"However, if you have a model that uses :ref:`multi-table inheritance <multi-"
"table-inheritance>`, you also need to serialize all of the base classes for "
"the model. This is because only the fields that are locally defined on the "
"model will be serialized. For example, consider the following models::"
msgstr ""

# 6064fc6e1f3247f095954738ae4a8a87
#: ../../topics/serialization.txt:89
msgid "If you only serialize the Restaurant model::"
msgstr ""

# f2bc2b59b9884171b4094d3fc3fe9d99
#: ../../topics/serialization.txt:93
msgid ""
"the fields on the serialized output will only contain the "
"``serves_hot_dogs`` attribute. The ``name`` attribute of the base class will "
"be ignored."
msgstr ""

# 8c77e7eb90d44bd78731b966a6c7521e
#: ../../topics/serialization.txt:96
msgid ""
"In order to fully serialize your ``Restaurant`` instances, you will need to "
"serialize the ``Place`` models as well::"
msgstr ""

# 792c9fb31ee347ce9369a502f04773fa
#: ../../topics/serialization.txt:103
msgid "Deserializing data"
msgstr ""

# 6d06cc07969b4bb4a968bcd5de5fb967
#: ../../topics/serialization.txt:105
msgid "Deserializing data is also a fairly simple operation::"
msgstr ""

# cb75787a3b834b038e2f87e1f45dc343
#: ../../topics/serialization.txt:110
msgid ""
"As you can see, the ``deserialize`` function takes the same format argument "
"as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""

# ef89cfb7a7f24e0a9a578be68e6617aa
#: ../../topics/serialization.txt:113
msgid ""
"However, here it gets slightly complicated. The objects returned by the "
"``deserialize`` iterator *aren't* simple Django objects. Instead, they are "
"special ``DeserializedObject`` instances that wrap a created -- but unsaved "
"-- object and any associated relationship data."
msgstr ""

# 230ca24d2db641fbbb8948a06680bf09
#: ../../topics/serialization.txt:118
msgid "Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr ""

# 9387d12cd7034c19b097e09c9788d6b1
#: ../../topics/serialization.txt:120
msgid ""
"This ensures that deserializing is a non-destructive operation even if the "
"data in your serialized representation doesn't match what's currently in the "
"database. Usually, working with these ``DeserializedObject`` instances looks "
"something like::"
msgstr ""

# 428185c919844bb8aae100d8a99a6101
#: ../../topics/serialization.txt:129
msgid ""
"In other words, the usual use is to examine the deserialized objects to make "
"sure that they are \"appropriate\" for saving before doing so.  Of course, "
"if you trust your data source you could just save the object and move on."
msgstr ""

# 90e06d23414241dba5c8914f2376e986
#: ../../topics/serialization.txt:133
msgid ""
"The Django object itself can be inspected as ``deserialized_object.object``."
msgstr ""

# 43128e820b6c4614b66cacb0bcfb29c7
#: ../../topics/serialization.txt:137
msgid ""
"If fields in the serialized data do not exist on a model, a "
"``DeserializationError`` will be raised unless the ``ignorenonexistent`` "
"argument is passed in as True::"
msgstr ""

# 5ec9db9118054db1a9b866bf9f865826
#: ../../topics/serialization.txt:146
msgid "Serialization formats"
msgstr ""

# fda6c608a6e84cd5ba5accaa6a89e308
#: ../../topics/serialization.txt:148
msgid ""
"Django supports a number of serialization formats, some of which require you "
"to install third-party Python modules:"
msgstr ""

# 32b55f612098409fa2032c7045c82e9e
#: ../../topics/serialization.txt:152
msgid "Identifier"
msgstr ""

# 1c5713d0e6384050ae2006200606321b
#: ../../topics/serialization.txt:152
msgid "Information"
msgstr ""

# e3ea06b2a7dd47c583b917863d3bb6db
#: ../../topics/serialization.txt:154
msgid "``xml``"
msgstr ""

# e31d7d7c3d04482a834a82be11951baf
#: ../../topics/serialization.txt:154
msgid "Serializes to and from a simple XML dialect."
msgstr ""

# 60184a0f2ac849aba2c769b6447595a5
#: ../../topics/serialization.txt:156
msgid "``json``"
msgstr ""

# 0a740ef4920242a3a25160f82c9aa3f3
#: ../../topics/serialization.txt:156
msgid "Serializes to and from JSON_."
msgstr ""

# 39d4aeb53a2b4c2ba5433371d708b010
#: ../../topics/serialization.txt:158
msgid "``yaml``"
msgstr ""

# 834e8b622e8e491ca6fa3ed6da269919
#: ../../topics/serialization.txt:158
msgid ""
"Serializes to YAML (YAML Ain't a Markup Language). This serializer is only "
"available if PyYAML_ is installed."
msgstr ""

# a976f3d933c544a0a01c01d653e3ec98
#: ../../topics/serialization.txt:166
msgid "Notes for specific serialization formats"
msgstr ""

# d4914116b5d84d2ca88450d45c20baad
#: ../../topics/serialization.txt:169
msgid "json"
msgstr ""

# 74e829f2435c476c934e6a2577a37917
#: ../../topics/serialization.txt:171
msgid ""
"Be aware that not all Django output can be passed unmodified to :mod:`json`. "
"In particular, :ref:`lazy translation objects <lazy-translations>` need a "
"`special encoder`_ written for them. Something like this will work::"
msgstr ""

# fdb3fabfac5849d1ab3f713d5e53b942
#: ../../topics/serialization.txt:190
msgid "Natural keys"
msgstr ""

# 23b7b59f3c8b44e6b5aeb2586b30fbd5
#: ../../topics/serialization.txt:192
msgid ""
"The default serialization strategy for foreign keys and many-to-many "
"relations is to serialize the value of the primary key(s) of the objects in "
"the relation. This strategy works well for most objects, but it can cause "
"difficulty in some circumstances."
msgstr ""

# e2c771b5a6ea4d80a6253ad51023e8a9
#: ../../topics/serialization.txt:197
msgid ""
"Consider the case of a list of objects that have a foreign key referencing :"
"class:`~django.contrib.contenttypes.models.ContentType`. If you're going to "
"serialize an object that refers to a content type, then you need to have a "
"way to refer to that content type to begin with. Since ``ContentType`` "
"objects are automatically created by Django during the database "
"synchronization process, the primary key of a given content type isn't easy "
"to predict; it will depend on how and when :djadmin:`syncdb` was executed. "
"This is true for all models which automatically generate objects, notably "
"including :class:`~django.contrib.auth.models.Permission`, :class:`~django."
"contrib.auth.models.Group`, and :class:`~django.contrib.auth.models.User`."
msgstr ""

# 501e6c1152c9446c98f5171ae3aef5c9
#: ../../topics/serialization.txt:211
msgid ""
"You should never include automatically generated objects in a fixture or "
"other serialized data. By chance, the primary keys in the fixture may match "
"those in the database and loading the fixture will have no effect. In the "
"more likely case that they don't match, the fixture loading will fail with "
"an :class:`~django.db.IntegrityError`."
msgstr ""

# 6d9deb7d049d4015b86ea53079a8138d
#: ../../topics/serialization.txt:217
msgid ""
"There is also the matter of convenience. An integer id isn't always the most "
"convenient way to refer to an object; sometimes, a more natural reference "
"would be helpful."
msgstr ""

# 7116e63319904766a5eddcb5f4d2cb20
#: ../../topics/serialization.txt:221
msgid ""
"It is for these reasons that Django provides *natural keys*. A natural key "
"is a tuple of values that can be used to uniquely identify an object "
"instance without using the primary key value."
msgstr ""

# 3089c1c3dc884bb0a16a00f08ae6186e
#: ../../topics/serialization.txt:226
msgid "Deserialization of natural keys"
msgstr ""

# ca6be2737ad640d5abe5fda7191b696f
#: ../../topics/serialization.txt:228
msgid "Consider the following two models::"
msgstr ""

# a46740a7f883480bb93ab4caeacb44fd
#: ../../topics/serialization.txt:245
msgid ""
"Ordinarily, serialized data for ``Book`` would use an integer to refer to "
"the author. For example, in JSON, a Book might be serialized as::"
msgstr ""

# 51c4e3f738f14011b3b80a32ccca2062
#: ../../topics/serialization.txt:259
msgid ""
"This isn't a particularly natural way to refer to an author. It requires "
"that you know the primary key value for the author; it also requires that "
"this primary key value is stable and predictable."
msgstr ""

# 8143d2662e9f4b43b2f7d49af0434f2d
#: ../../topics/serialization.txt:263
msgid ""
"However, if we add natural key handling to Person, the fixture becomes much "
"more humane. To add natural key handling, you define a default Manager for "
"Person with a ``get_by_natural_key()`` method. In the case of a Person, a "
"good natural key might be the pair of first and last name::"
msgstr ""

# b68b87968d9a4bcc8e9ee68edef5b7f0
#: ../../topics/serialization.txt:286
msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""

# b51599c061c246a395f9ca283b89fe60
#: ../../topics/serialization.txt:299
msgid ""
"When you try to load this serialized data, Django will use the "
"``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into "
"the primary key of an actual ``Person`` object."
msgstr ""

# 6a9349ada83f4367adcafbdab2edc4f1
#: ../../topics/serialization.txt:305
msgid ""
"Whatever fields you use for a natural key must be able to uniquely identify "
"an object. This will usually mean that your model will have a uniqueness "
"clause (either unique=True on a single field, or ``unique_together`` over "
"multiple fields) for the field or fields in your natural key. However, "
"uniqueness doesn't need to be enforced at the database level. If you are "
"certain that a set of fields will be effectively unique, you can still use "
"those fields as a natural key."
msgstr ""

# cdcc099da7db4062a8b4e08270d4303c
#: ../../topics/serialization.txt:315
msgid "Serialization of natural keys"
msgstr ""

# 7d39a5462c9140a38645f10b2a9c2227
#: ../../topics/serialization.txt:317
msgid ""
"So how do you get Django to emit a natural key when serializing an object? "
"Firstly, you need to add another method -- this time to the model itself::"
msgstr ""

# beae51b0b4a94b8f9374f0eb39742552
#: ../../topics/serialization.txt:334
msgid ""
"That method should always return a natural key tuple -- in this example, "
"``(first name, last name)``. Then, when you call ``serializers."
"serialize()``, you provide a ``use_natural_keys=True`` argument::"
msgstr ""

# ffd584af57fd441880756c655fcab51f
#: ../../topics/serialization.txt:341
msgid ""
"When ``use_natural_keys=True`` is specified, Django will use the "
"``natural_key()`` method to serialize any reference to objects of the type "
"that defines the method."
msgstr ""

# b4a4a442c7b940eda432fbdbdbbdde78
#: ../../topics/serialization.txt:345
msgid ""
"If you are using :djadmin:`dumpdata` to generate serialized data, you use "
"the :djadminopt:`--natural` command line flag to generate natural keys."
msgstr ""

# 02838398407149b596be175df891d1b8
#: ../../topics/serialization.txt:350
msgid ""
"You don't need to define both ``natural_key()`` and "
"``get_by_natural_key()``. If you don't want Django to output natural keys "
"during serialization, but you want to retain the ability to load natural "
"keys, then you can opt to not implement the ``natural_key()`` method."
msgstr ""

# 104dc77a252947c68fa3e6d330cc095c
#: ../../topics/serialization.txt:356
msgid ""
"Conversely, if (for some strange reason) you want Django to output natural "
"keys during serialization, but *not* be able to load those key values, just "
"don't define the ``get_by_natural_key()`` method."
msgstr ""

# 4001ad6e3dd746d39614fda352087bca
#: ../../topics/serialization.txt:361
msgid "Dependencies during serialization"
msgstr ""

# 2083acc0f9e840078107d371cb135def
#: ../../topics/serialization.txt:363
msgid ""
"Since natural keys rely on database lookups to resolve references, it is "
"important that the data exists before it is referenced. You can't make a "
"\"forward reference\" with natural keys -- the data you're referencing must "
"exist before you include a natural key reference to that data."
msgstr ""

# ac245578124e4a049185df61795f491e
#: ../../topics/serialization.txt:368
msgid ""
"To accommodate this limitation, calls to :djadmin:`dumpdata` that use the :"
"djadminopt:`--natural` option will serialize any model with a "
"``natural_key()`` method before serializing standard primary key objects."
msgstr ""

# 83bab91a91484fb48f4a65c0a34f3a5e
#: ../../topics/serialization.txt:372
msgid ""
"However, this may not always be enough. If your natural key refers to "
"another object (by using a foreign key or natural key to another object as "
"part of a natural key), then you need to be able to ensure that the objects "
"on which a natural key depends occur in the serialized data before the "
"natural key requires them."
msgstr ""

# c8f09ded80e0450fb3b85c9b91efe299
#: ../../topics/serialization.txt:378
msgid ""
"To control this ordering, you can define dependencies on your "
"``natural_key()`` methods. You do this by setting a ``dependencies`` "
"attribute on the ``natural_key()`` method itself."
msgstr ""

# 7a608f8133904d07a38fc7e2c3f33b5b
#: ../../topics/serialization.txt:382
msgid ""
"For example, let's add a natural key to the ``Book`` model from the example "
"above::"
msgstr ""

# c56cd7a3a4314326996742e813607c91
#: ../../topics/serialization.txt:392
msgid ""
"The natural key for a ``Book`` is a combination of its name and its author. "
"This means that ``Person`` must be serialized before ``Book``. To define "
"this dependency, we add one extra line::"
msgstr ""

# d4989184542447dab6f6f0e657faeca8
#: ../../topics/serialization.txt:400
msgid ""
"This definition ensures that all ``Person`` objects are serialized before "
"any ``Book`` objects. In turn, any object referencing ``Book`` will be "
"serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""

# 9f9c0ecaf8d5440c9a7c33e39709a597
#: ../../topics/settings.txt:3
msgid "Django settings"
msgstr ""

# 377df18140914cea8ecaa61fd7214de7
#: ../../topics/settings.txt:5
msgid ""
"A Django settings file contains all the configuration of your Django "
"installation. This document explains how settings work and which settings "
"are available."
msgstr ""

# 7bc292c92bbe4e54affeefdf615873dc
#: ../../topics/settings.txt:10
msgid "The basics"
msgstr ""

# 955dd0f77d2d40cc8acf08ff676d4a7c
#: ../../topics/settings.txt:12
msgid "A settings file is just a Python module with module-level variables."
msgstr ""

# ff2c5013be674f4781aa406e92bc92a3
#: ../../topics/settings.txt:14
msgid "Here are a couple of example settings::"
msgstr ""

# 869af768671d4c37995c932a76ec79f2
#: ../../topics/settings.txt:22
msgid ""
"If you set :setting:`DEBUG` to ``False``, you also need to properly set the :"
"setting:`ALLOWED_HOSTS` setting."
msgstr ""

# ca5f537399de49a3927ce258b0e93ea2
#: ../../topics/settings.txt:25
msgid "Because a settings file is a Python module, the following apply:"
msgstr ""

# 7c6224b23b1b4fd1a18ab8a5d5a57df2
#: ../../topics/settings.txt:22
msgid "It doesn't allow for Python syntax errors."
msgstr ""

# 9801bc9445bf43639f423794b6e61070
#: ../../topics/settings.txt:23
msgid ""
"It can assign settings dynamically using normal Python syntax. For example::"
msgstr ""

# 6bdfd9e52cc247eeac437ffb9cfce929
#: ../../topics/settings.txt:28
msgid "It can import values from other settings files."
msgstr ""

# 35b6cc766b81429890a48ff4c1ec0261
#: ../../topics/settings.txt:33
msgid "Designating the settings"
msgstr ""

# de2740e5916448d4a5f597767c9e49fa
#: ../../topics/settings.txt:37
msgid ""
"When you use Django, you have to tell it which settings you're using. Do "
"this by using an environment variable, ``DJANGO_SETTINGS_MODULE``."
msgstr ""

# 0476da7b91f243e1853b4c09483e6e7f
#: ../../topics/settings.txt:40
msgid ""
"The value of ``DJANGO_SETTINGS_MODULE`` should be in Python path syntax, e."
"g. ``mysite.settings``. Note that the settings module should be on the "
"Python `import search path`_."
msgstr ""

# 42bd3d3a4c924721aa01b6831e34c856
#: ../../topics/settings.txt:47
msgid "The django-admin.py utility"
msgstr ""

# f66d9ed25cfe418cb26bce5addb71044
#: ../../topics/settings.txt:49
msgid ""
"When using :doc:`django-admin.py </ref/django-admin>`, you can either set "
"the environment variable once, or explicitly pass in the settings module "
"each time you run the utility."
msgstr ""

# da401ee8b1c8440bae9094e1fa2841cd
#: ../../topics/settings.txt:53
msgid "Example (Unix Bash shell)::"
msgstr ""

# e8ed8d8de75c49db953b282d3f1bc9b4
#: ../../topics/settings.txt:58
msgid "Example (Windows shell)::"
msgstr ""

# 178a95d840bb413d865a35767cfe7bd6
#: ../../topics/settings.txt:63
msgid ""
"Use the ``--settings`` command-line argument to specify the settings "
"manually::"
msgstr ""

# 87bc5d61282749c7bbdaf1f1c728a63b
#: ../../topics/settings.txt:70
msgid "On the server (mod_wsgi)"
msgstr ""

# 524d8556618d41409d917d59f82bb6ed
#: ../../topics/settings.txt:72
msgid ""
"In your live server environment, you'll need to tell your WSGI application "
"what settings file to use. Do that with ``os.environ``::"
msgstr ""

# 951c337c3727439997fc31e0bb6ebdee
#: ../../topics/settings.txt:79
msgid ""
"Read the :doc:`Django mod_wsgi documentation </howto/deployment/wsgi/"
"modwsgi>` for more information and other common elements to a Django WSGI "
"application."
msgstr ""

# ac72d61508064b198c701978d5e8dc80
#: ../../topics/settings.txt:84
msgid "Default settings"
msgstr ""

# e207f1c26cd5401fb7e518bc071a709c
#: ../../topics/settings.txt:86
msgid ""
"A Django settings file doesn't have to define any settings if it doesn't "
"need to. Each setting has a sensible default value. These defaults live in "
"the module :file:`django/conf/global_settings.py`."
msgstr ""

# fd92cc05d732493ab365f8995049180d
#: ../../topics/settings.txt:90
msgid "Here's the algorithm Django uses in compiling settings:"
msgstr ""

# ca458df453c048938d808dded0da35b0
#: ../../topics/settings.txt:92
msgid "Load settings from ``global_settings.py``."
msgstr ""

# f5e246d61d0e4949bb39818336636c58
#: ../../topics/settings.txt:93
msgid ""
"Load settings from the specified settings file, overriding the global "
"settings as necessary."
msgstr ""

# b52486f6fd0c40c99f95ea8b0facb92e
#: ../../topics/settings.txt:96
msgid ""
"Note that a settings file should *not* import from ``global_settings``, "
"because that's redundant."
msgstr ""

# bf51e5a844be4465ab588804372aaf1e
#: ../../topics/settings.txt:100
msgid "Seeing which settings you've changed"
msgstr ""

# 8f3d3b50f411413882a45cc25a5df597
#: ../../topics/settings.txt:102
msgid ""
"There's an easy way to view which of your settings deviate from the default "
"settings. The command ``python manage.py diffsettings`` displays differences "
"between the current settings file and Django's default settings."
msgstr ""

# 5f8d388b06924b90bddf30d5a94eccbc
#: ../../topics/settings.txt:106
msgid "For more, see the :djadmin:`diffsettings` documentation."
msgstr ""

# 45f6365b2110496b838254008eddf456
#: ../../topics/settings.txt:109
msgid "Using settings in Python code"
msgstr ""

# bf6ff290a1c3434dace7afc7746d7de7
#: ../../topics/settings.txt:111
msgid ""
"In your Django apps, use settings by importing the object ``django.conf."
"settings``. Example::"
msgstr ""

# 94545ad7bd9941938f4bdaefd29eda7e
#: ../../topics/settings.txt:119
msgid ""
"Note that ``django.conf.settings`` isn't a module -- it's an object. So "
"importing individual settings is not possible::"
msgstr ""

# 6f0991fae11d426eae7416e77802b11f
#: ../../topics/settings.txt:124
msgid ""
"Also note that your code should *not* import from either ``global_settings`` "
"or your own settings file. ``django.conf.settings`` abstracts the concepts "
"of default settings and site-specific settings; it presents a single "
"interface. It also decouples the code that uses settings from the location "
"of your settings."
msgstr ""

# b17ea40b56e04b42a4aedab4d4d5c757
#: ../../topics/settings.txt:131
msgid "Altering settings at runtime"
msgstr ""

# 0dee22e08c9a4983a670d90620be4449
#: ../../topics/settings.txt:133
msgid ""
"You shouldn't alter settings in your applications at runtime. For example, "
"don't do this in a view::"
msgstr ""

# ac9ae1d57aa941a1a5b11c3c84dda468
#: ../../topics/settings.txt:140
msgid "The only place you should assign to settings is in a settings file."
msgstr ""

# c43cf6e5d5174aec8c02ce57088d854e
#: ../../topics/settings.txt:143
msgid "Security"
msgstr ""

# 0e7461369eac4f6bab07fe9b3145af8e
#: ../../topics/settings.txt:145
msgid ""
"Because a settings file contains sensitive information, such as the database "
"password, you should make every attempt to limit access to it. For example, "
"change its file permissions so that only you and your Web server's user can "
"read it. This is especially important in a shared-hosting environment."
msgstr ""

# debe659d3e6447d083891fa793a839dc
#: ../../topics/settings.txt:151
msgid "Available settings"
msgstr ""

# 4424abc4a6a04dc8bf8a1b5495021ccf
#: ../../topics/settings.txt:153
msgid ""
"For a full list of available settings, see the :doc:`settings reference </"
"ref/settings>`."
msgstr ""

# e77355f9e8c8478da6ee3fa5eefe4d2a
#: ../../topics/settings.txt:156
msgid "Creating your own settings"
msgstr ""

# 0f0c12ce95734a5abbf572862ccf7748
#: ../../topics/settings.txt:158
msgid ""
"There's nothing stopping you from creating your own settings, for your own "
"Django apps. Just follow these conventions:"
msgstr ""

# d3cea644cf17418f861b648d4d8f62e4
#: ../../topics/settings.txt:161
msgid "Setting names are in all uppercase."
msgstr ""

# bccf4ba3d5c542268d1e510b5974b977
#: ../../topics/settings.txt:162
msgid "Don't reinvent an already-existing setting."
msgstr ""

# 5d9bcf07bfb44c1cbe69ad751e7f7361
#: ../../topics/settings.txt:164
msgid ""
"For settings that are sequences, Django itself uses tuples, rather than "
"lists, but this is only a convention."
msgstr ""

# 58269f303219498fb12400e4bf15dddc
#: ../../topics/settings.txt:170
msgid "Using settings without setting DJANGO_SETTINGS_MODULE"
msgstr ""

# 1effa46e346c4a8c828dc7cb66139a26
#: ../../topics/settings.txt:172
msgid ""
"In some cases, you might want to bypass the ``DJANGO_SETTINGS_MODULE`` "
"environment variable. For example, if you're using the template system by "
"itself, you likely don't want to have to set up an environment variable "
"pointing to a settings module."
msgstr ""

# 92e72265c57748ae98ba8b0d4090db5d
#: ../../topics/settings.txt:177
msgid ""
"In these cases, you can configure Django's settings manually. Do this by "
"calling:"
msgstr ""

# 50d8b5940bc44a7790d0e55f279aa47e
#: ../../topics/settings.txt:189
msgid ""
"Pass ``configure()`` as many keyword arguments as you'd like, with each "
"keyword argument representing a setting and its value. Each argument name "
"should be all uppercase, with the same name as the settings described above. "
"If a particular setting is not passed to ``configure()`` and is needed at "
"some later point, Django will use the default setting value."
msgstr ""

# 5048c1936fdb48999ca2cceb501809b8
#: ../../topics/settings.txt:195
msgid ""
"Configuring Django in this fashion is mostly necessary -- and, indeed, "
"recommended -- when you're using a piece of the framework inside a larger "
"application."
msgstr ""

# fb94a2e08b47422eafa12555ca198066
#: ../../topics/settings.txt:199
msgid ""
"Consequently, when configured via ``settings.configure()``, Django will not "
"make any modifications to the process environment variables (see the "
"documentation of :setting:`TIME_ZONE` for why this would normally occur). "
"It's assumed that you're already in full control of your environment in "
"these cases."
msgstr ""

# 6078011ab8b3442dbb7115fbfb41af2c
#: ../../topics/settings.txt:206
msgid "Custom default settings"
msgstr ""

# 172e6ed2eafb455490dbee4a5059f87b
#: ../../topics/settings.txt:208
msgid ""
"If you'd like default values to come from somewhere other than ``django.conf."
"global_settings``, you can pass in a module or class that provides the "
"default settings as the ``default_settings`` argument (or as the first "
"positional argument) in the call to ``configure()``."
msgstr ""

# e7a0f8cd23a64bb89658f7a90c65bf33
#: ../../topics/settings.txt:213
msgid ""
"In this example, default settings are taken from ``myapp_defaults``, and "
"the :setting:`DEBUG` setting is set to ``True``, regardless of its value in "
"``myapp_defaults``::"
msgstr ""

# e1fc4b05a8064a7c8a43405a524cd52f
#: ../../topics/settings.txt:222
msgid ""
"The following example, which uses ``myapp_defaults`` as a positional "
"argument, is equivalent::"
msgstr ""

# 3a7bfe036dde4a469a26b86be6aa3c6f
#: ../../topics/settings.txt:227
msgid ""
"Normally, you will not need to override the defaults in this fashion. The "
"Django defaults are sufficiently tame that you can safely use them. Be aware "
"that if you do pass in a new default module, it entirely *replaces* the "
"Django defaults, so you must specify a value for every possible setting that "
"might be used in that code you are importing. Check in ``django.conf."
"settings.global_settings`` for the full list."
msgstr ""

# 08f2161f45a049ce9c765f6326562169
#: ../../topics/settings.txt:235
msgid "Either configure() or DJANGO_SETTINGS_MODULE is required"
msgstr ""

# 2ddb0ba0856142ed98d11817891e9700
#: ../../topics/settings.txt:237
msgid ""
"If you're not setting the ``DJANGO_SETTINGS_MODULE`` environment variable, "
"you *must* call ``configure()`` at some point before using any code that "
"reads settings."
msgstr ""

# f76418768db6456d9d71dd0e144bfe99
#: ../../topics/settings.txt:241
msgid ""
"If you don't set ``DJANGO_SETTINGS_MODULE`` and don't call ``configure()``, "
"Django will raise an ``ImportError`` exception the first time a setting is "
"accessed."
msgstr ""

# 2464a1774b3a45bb9fdaf3851c4959c1
#: ../../topics/settings.txt:245
msgid ""
"If you set ``DJANGO_SETTINGS_MODULE``, access settings values somehow, "
"*then* call ``configure()``, Django will raise a ``RuntimeError`` indicating "
"that settings have already been configured. There is a property just for "
"this purpose:"
msgstr ""

# 15d3869d325f4765b83b70b375f2b28d
#: ../../topics/settings.txt:258
msgid ""
"Also, it's an error to call ``configure()`` more than once, or to call "
"``configure()`` after any setting has been accessed."
msgstr ""

# c802e00199a3471ebfc8f44e1533d8c4
#: ../../topics/settings.txt:261
msgid ""
"It boils down to this: Use exactly one of either ``configure()`` or "
"``DJANGO_SETTINGS_MODULE``. Not both, and not neither."
msgstr ""

# aad7a0d89230431092640516574fdb30
#: ../../topics/signals.txt:3
msgid "Signals"
msgstr ""

# b0785cc542c5414b9b8fa87dc1e2b3e2
#: ../../topics/signals.txt:8
msgid ""
"Django includes a \"signal dispatcher\" which helps allow decoupled "
"applications get notified when actions occur elsewhere in the framework. In "
"a nutshell, signals allow certain *senders* to notify a set of *receivers* "
"that some action has taken place. They're especially useful when many pieces "
"of code may be interested in the same events."
msgstr ""

# eea1b3d4632440b19ecfdf89a34757fd
#: ../../topics/signals.txt:14
msgid ""
"Django provides a :doc:`set of built-in signals </ref/signals>` that let "
"user code get notified by Django itself of certain actions. These include "
"some useful notifications:"
msgstr ""

# ece830493ead4b4cbb3fe8c8682ea4a9
#: ../../topics/signals.txt:18
msgid ""
":data:`django.db.models.signals.pre_save` & :data:`django.db.models.signals."
"post_save`"
msgstr ""

# 18ddcd27de8f4b118881b56d28cf5540
#: ../../topics/signals.txt:21
msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.save` method "
"is called."
msgstr ""

# 17962476093240d888b4e856dc9a8776
#: ../../topics/signals.txt:24
msgid ""
":data:`django.db.models.signals.pre_delete` & :data:`django.db.models."
"signals.post_delete`"
msgstr ""

# adee8d8211764e14aa19e82811df424f
#: ../../topics/signals.txt:27
msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.delete` method "
"or queryset's :meth:`~django.db.models.query.QuerySet.delete` method is "
"called."
msgstr ""

# fdf7c359699d4047838873bdf1b39c0a
#: ../../topics/signals.txt:31
msgid ":data:`django.db.models.signals.m2m_changed`"
msgstr ""

# 9e0a943fd9db409a9c322ea7a3bc5707
#: ../../topics/signals.txt:33
msgid ""
"Sent when a :class:`~django.db.models.ManyToManyField` on a model is changed."
msgstr ""

# 145c64bac2e34d778292bb5ea2a6f8ed
#: ../../topics/signals.txt:35
msgid ""
":data:`django.core.signals.request_started` & :data:`django.core.signals."
"request_finished`"
msgstr ""

# 0f29b1099eb9444d9417814ab8576577
#: ../../topics/signals.txt:38
msgid "Sent when Django starts or finishes an HTTP request."
msgstr ""

# 0f704fd0b300428390fa49949c00817f
#: ../../topics/signals.txt:40
msgid ""
"See the :doc:`built-in signal documentation </ref/signals>` for a complete "
"list, and a complete explanation of each signal."
msgstr ""

# 4c4d07bc9c1b4732b4f1d89b01968c08
#: ../../topics/signals.txt:43
msgid "You can also `define and send your own custom signals`_; see below."
msgstr ""

# 02053bf4ee2a42d6b44b0076a7b3c137
#: ../../topics/signals.txt:48
msgid "Listening to signals"
msgstr ""

# c6a58f26975741ca9b0627251be2dbe7
#: ../../topics/signals.txt:50
msgid ""
"To receive a signal, you need to register a *receiver* function that gets "
"called when the signal is sent by using the :meth:`.Signal.connect` method:"
msgstr ""

# 277ed4ba4e50464c86fb29012a2fa2db
#: ../../topics/signals.txt:56
msgid ""
"The callback function which will be connected to this signal. See :ref:"
"`receiver-functions` for more information."
msgstr ""

# 936547c78c9b485cb1f92a5fa94eb7ff
#: ../../topics/signals.txt:59
msgid ""
"Specifies a particular sender to receive signals from. See :ref:`connecting-"
"to-specific-signals` for more information."
msgstr ""

# 0304033042fb45ccb4c78a7ad2085d58
#: ../../topics/signals.txt:62
msgid ""
"Django stores signal handlers as weak references by default. Thus, if your "
"receiver is a local function, it may be garbage collected. To prevent this, "
"pass ``weak=False`` when you call the signal's ``connect()`` method."
msgstr ""

# 18b31872261c42b9abd97a39e0725a12
#: ../../topics/signals.txt:67
msgid ""
"A unique identifier for a signal receiver in cases where duplicate signals "
"may be sent. See :ref:`preventing-duplicate-signals` for more information."
msgstr ""

# 7c0fac8c1b83431ba3b2ad0e36db97f5
#: ../../topics/signals.txt:71
msgid ""
"Let's see how this works by registering a signal that gets called after each "
"HTTP request is finished. We'll be connecting to the :data:`~django.core."
"signals.request_finished` signal."
msgstr ""

# 22e6f51619cd42d9ae31d6a9ffd2a6a0
#: ../../topics/signals.txt:78
msgid "Receiver functions"
msgstr ""

# 48de71f4c0754c30962106bc1cff6957
#: ../../topics/signals.txt:80
msgid ""
"First, we need to define a receiver function. A receiver can be any Python "
"function or method:"
msgstr ""

# 09c64ef8eaab4912a6561d95af2cbcf1
#: ../../topics/signals.txt:88
msgid ""
"Notice that the function takes a ``sender`` argument, along with wildcard "
"keyword arguments (``**kwargs``); all signal handlers must take these "
"arguments."
msgstr ""

# 90bfa43c464147e6b95654f3c89f521d
#: ../../topics/signals.txt:91
msgid ""
"We'll look at senders `a bit later`_, but right now look at the ``**kwargs`` "
"argument. All signals send keyword arguments, and may change those keyword "
"arguments at any time. In the case of :data:`~django.core.signals."
"request_finished`, it's documented as sending no arguments, which means we "
"might be tempted to write our signal handling as ``my_callback(sender)``."
msgstr ""

# a6627ffcdd5b41f9a7ab0559b452d3e7
#: ../../topics/signals.txt:100
msgid ""
"This would be wrong -- in fact, Django will throw an error if you do so. "
"That's because at any point arguments could get added to the signal and your "
"receiver must be able to handle those new arguments."
msgstr ""

# eb643cbe8e9e4792a568a2d483fcd25a
#: ../../topics/signals.txt:107
msgid "Connecting receiver functions"
msgstr ""

# 1af151b33e5347c9bd250f932ecaf223
#: ../../topics/signals.txt:109
msgid ""
"There are two ways you can connect a receiver to a signal. You can take the "
"manual connect route:"
msgstr ""

# caad7975f257413f9e1de67d956e426c
#: ../../topics/signals.txt:118
msgid ""
"Alternatively, you can use a ``receiver`` decorator when you define your "
"receiver:"
msgstr ""

# 26b8a6ef275544aaadf03f654e12f5fb
#: ../../topics/signals.txt:130
msgid ""
"Now, our ``my_callback`` function will be called each time a request "
"finishes."
msgstr ""

# 902d140a017d42f68a4e50869a705356
#: ../../topics/signals.txt:132
msgid ""
"Note that ``receiver`` can also take a list of signals to connect a function "
"to."
msgstr ""

# 1235bc8e97f8421cab6cf735ec03abad
#: ../../topics/signals.txt:137
msgid "The ability to pass a list of signals was added."
msgstr ""

# 20a44add59484d97a28fff9ee80e772b
#: ../../topics/signals.txt:139
msgid "Where should this code live?"
msgstr ""

# c80048eb29f14df6b89363115c19a87f
#: ../../topics/signals.txt:141
msgid ""
"You can put signal handling and registration code anywhere you like. "
"However, you'll need to make sure that the module it's in gets imported "
"early on so that the signal handling gets registered before any signals need "
"to be sent. This makes your app's ``models.py`` a good place to put "
"registration of signal handlers."
msgstr ""

# 62690d60d8124bb19839056325eca774
#: ../../topics/signals.txt:150
msgid "Connecting to signals sent by specific senders"
msgstr ""

# 150bb07b3e3d451fa22650da10dff5d8
#: ../../topics/signals.txt:152
msgid ""
"Some signals get sent many times, but you'll only be interested in receiving "
"a certain subset of those signals. For example, consider the :data:`django."
"db.models.signals.pre_save` signal sent before a model gets saved. Most of "
"the time, you don't need to know when *any* model gets saved -- just when "
"one *specific* model is saved."
msgstr ""

# 816456b3118340c893e9a79b6eb354ef
#: ../../topics/signals.txt:158
msgid ""
"In these cases, you can register to receive signals sent only by particular "
"senders. In the case of :data:`django.db.models.signals.pre_save`, the "
"sender will be the model class being saved, so you can indicate that you "
"only want signals sent by some model:"
msgstr ""

# 89f98528f45d47a9bfa45f193356d6e7
#: ../../topics/signals.txt:173
msgid ""
"The ``my_handler`` function will only be called when an instance of "
"``MyModel`` is saved."
msgstr ""

# bbfd4d533ab3440e881c554d646a89eb
#: ../../topics/signals.txt:176
msgid ""
"Different signals use different objects as their senders; you'll need to "
"consult the :doc:`built-in signal documentation </ref/signals>` for details "
"of each particular signal."
msgstr ""

# a08ddc3392cf424db8975af39f1cfed0
#: ../../topics/signals.txt:183
msgid "Preventing duplicate signals"
msgstr ""

# e4092eb29e6f46d2abe3ef3a45f62da2
#: ../../topics/signals.txt:185
msgid ""
"In some circumstances, the module in which you are connecting signals may be "
"imported multiple times. This can cause your receiver function to be "
"registered more than once, and thus called multiples times for a single "
"signal event."
msgstr ""

# d1e44d2d56ba435db652f16ab1c31315
#: ../../topics/signals.txt:190
msgid ""
"If this behavior is problematic (such as when using signals to send an email "
"whenever a model is saved), pass a unique identifier as the ``dispatch_uid`` "
"argument to identify your receiver function. This identifier will usually be "
"a string, although any hashable object will suffice. The end result is that "
"your receiver function will only be bound to the signal once for each unique "
"``dispatch_uid`` value."
msgstr ""

# c6098b067b364f7889f0b09686531c76
#: ../../topics/signals.txt:204
msgid "Defining and sending signals"
msgstr ""

# faec857b16eb4387a56d1b8a34fafd2b
#: ../../topics/signals.txt:206
msgid ""
"Your applications can take advantage of the signal infrastructure and "
"provide its own signals."
msgstr ""

# 5bcf7f23c19646bbadd34f7771ee1060
#: ../../topics/signals.txt:210
msgid "Defining signals"
msgstr ""

# 086cb62f96924c8eb80916260af39a36
#: ../../topics/signals.txt:214
msgid ""
"All signals are :class:`django.dispatch.Signal` instances. The "
"``providing_args`` is a list of the names of arguments the signal will "
"provide to listeners. This is purely documentational, however, as there is "
"nothing that checks that the signal actually provides these arguments to its "
"listeners."
msgstr ""

# b0b6ad610f7a45e9a98c8d1fbf4c5758
#: ../../topics/signals.txt:219
msgid "For example:"
msgstr ""

# d55974152d404cf4b4ad1998f47f0f29
#: ../../topics/signals.txt:227
msgid ""
"This declares a ``pizza_done`` signal that will provide receivers with "
"``toppings`` and ``size`` arguments."
msgstr ""

# fa3fcd3b9ed94f0db0ad30fa02aa33b0
#: ../../topics/signals.txt:230
msgid ""
"Remember that you're allowed to change this list of arguments at any time, "
"so getting the API right on the first try isn't necessary."
msgstr ""

# 5119aaacb63a4256895a511a18446988
#: ../../topics/signals.txt:233
msgid "Sending signals"
msgstr ""

# f052ce83abdf42f59d0110f260a6ffba
#: ../../topics/signals.txt:235
msgid "There are two ways to send signals in Django."
msgstr ""

# 554209a5cd2b47629d062ddc3d982f25
#: ../../topics/signals.txt:240
msgid ""
"To send a signal, call either :meth:`Signal.send` or :meth:`Signal."
"send_robust`. You must provide the ``sender`` argument, and may provide as "
"many other keyword arguments as you like."
msgstr ""

# 56de65f9b0774babb30df6da06c341a2
#: ../../topics/signals.txt:244
msgid "For example, here's how sending our ``pizza_done`` signal might look:"
msgstr ""

# 017a8beda3e3471a9a61f6cac47787da
#: ../../topics/signals.txt:255
msgid ""
"Both ``send()`` and ``send_robust()`` return a list of tuple pairs "
"``[(receiver, response), ... ]``, representing the list of called receiver "
"functions and their response values."
msgstr ""

# b182b8b7c31a4e15a94b26a0bf8affa8
#: ../../topics/signals.txt:259
msgid ""
"``send()`` differs from ``send_robust()`` in how exceptions raised by "
"receiver functions are handled. ``send()`` does *not* catch any exceptions "
"raised by receivers; it simply allows errors to propagate. Thus not all "
"receivers may be notified of a signal in the face of an error."
msgstr ""

# 4da483119faa4dcfb88e65fb77c55809
#: ../../topics/signals.txt:264
msgid ""
"``send_robust()`` catches all errors derived from Python's ``Exception`` "
"class, and ensures all receivers are notified of the signal. If an error "
"occurs, the error instance is returned in the tuple pair for the receiver "
"that raised the error."
msgstr ""

# cb3d8ce28ce1458f9068661e0f353ff1
#: ../../topics/signals.txt:269
msgid "Disconnecting signals"
msgstr ""

# 7a770cdc2db04c219b9dcf31a2fa32e9
#: ../../topics/signals.txt:273
msgid ""
"To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The "
"arguments are as described in :meth:`.Signal.connect`."
msgstr ""

# 1a6a5e0c41564d8f9dcc0bc7f01f8db2
#: ../../topics/signals.txt:276
msgid ""
"The *receiver* argument indicates the registered receiver to disconnect. It "
"may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr ""

# db8481136da34927878c164920644cb6
#: ../../topics/signing.txt:3
msgid "Cryptographic signing"
msgstr ""

# 4fccc54f376a49abb7b752875bf336e2
#: ../../topics/signing.txt:10
msgid ""
"The golden rule of Web application security is to never trust data from "
"untrusted sources. Sometimes it can be useful to pass data through an "
"untrusted medium. Cryptographically signed values can be passed through an "
"untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""

# 0a99434e81cc4acd8573cceb45dbce63
#: ../../topics/signing.txt:15
msgid ""
"Django provides both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

# 3595ba393ae440e2aefe9bf273cbe972
#: ../../topics/signing.txt:19
msgid "You may also find signing useful for the following:"
msgstr ""

# 8ef57eda8a254920b7a5d6c1ea204ecf
#: ../../topics/signing.txt:21
msgid ""
"Generating \"recover my account\" URLs for sending to users who have lost "
"their password."
msgstr ""

# c4c814b930ec424a9f7fe962aad68bb1
#: ../../topics/signing.txt:24
msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""

# 937a2199d31a4a4eb4731df2a1b29e0a
#: ../../topics/signing.txt:26
msgid ""
"Generating one-time secret URLs for allowing temporary access to a protected "
"resource, for example a downloadable file that a user has paid for."
msgstr ""

# a62ee81dd7fa4a00bb8e4063eee5069e
#: ../../topics/signing.txt:31
msgid "Protecting the SECRET_KEY"
msgstr ""

# ed20522737934c9f8c96afc3a33e9c49
#: ../../topics/signing.txt:33
msgid ""
"When you create a new Django project using :djadmin:`startproject`, the "
"``settings.py`` file is generated automatically and gets a random :setting:"
"`SECRET_KEY` value. This value is the key to securing signed data -- it is "
"vital you keep this secure, or attackers could use it to generate their own "
"signed values."
msgstr ""

# fd8d8295899c42cdb98c08b70e472a2a
#: ../../topics/signing.txt:40
msgid "Using the low-level API"
msgstr ""

# 208b65434c9042a481715594802e479d
#: ../../topics/signing.txt:44
msgid ""
"Django's signing methods live in the ``django.core.signing`` module. To sign "
"a value, first instantiate a ``Signer`` instance::"
msgstr ""

# a32b84c6e6c244c497625762250aacad
#: ../../topics/signing.txt:53
msgid ""
"The signature is appended to the end of the string, following the colon. You "
"can retrieve the original value using the ``unsign`` method::"
msgstr ""

# 2849cb539e2f4f3fac29cc634a0d5edf
#: ../../topics/signing.txt:60
msgid ""
"If the signature or value have been altered in any way, a ``django.core."
"signing.BadSignature`` exception will be raised::"
msgstr ""

# 9401da578cb2427eaee39e3fe6852a2a
#: ../../topics/signing.txt:70
msgid ""
"By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to "
"generate signatures. You can use a different secret by passing it to the "
"``Signer`` constructor::"
msgstr ""

# 2386b4a21deb4121a5e267a609382422
#: ../../topics/signing.txt:79
msgid ""
"Returns a signer which uses ``key`` to generate signatures and ``sep`` to "
"separate values."
msgstr ""

# b7c8449670f24f03988dad7140ac614d
#: ../../topics/signing.txt:83
msgid "Using the salt argument"
msgstr ""

# e0eaccf2553a41a88a1eb68e770843b6
#: ../../topics/signing.txt:82
msgid ""
"If you do not wish for every occurrence of a particular string to have the "
"same signature hash, you can use the optional ``salt`` argument to the "
"``Signer`` class. Using a salt will seed the signing hash function with both "
"the salt and your :setting:`SECRET_KEY`::"
msgstr ""

# 99e1f1f618a041de9b71f4b7272fc84e
#: ../../topics/signing.txt:96
msgid ""
"Using salt in this way puts the different signatures into different "
"namespaces.  A signature that comes from one namespace (a particular salt "
"value) cannot be used to validate the same plaintext string in a different "
"namespace that is using a different salt setting. The result is to prevent "
"an attacker from using a signed string generated in one place in the code as "
"input to another piece of code that is generating (and verifying) signatures "
"using a different salt."
msgstr ""

# 18e32838120144ffb0922041a59bfb08
#: ../../topics/signing.txt:104
msgid ""
"Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay "
"secret."
msgstr ""

# adbc7917c7cd4596af78b66d8e29b227
#: ../../topics/signing.txt:108
msgid "Verifying timestamped values"
msgstr ""

# ef875611cb074144a9dd05e1b584d646
#: ../../topics/signing.txt:112
msgid ""
"``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed "
"timestamp to the value. This allows you to confirm that a signed value was "
"created within a specified period of time::"
msgstr ""

# e0bf9c3671e341299ccfebd75cba78bf
#: ../../topics/signing.txt:134
msgid "Sign ``value`` and append current timestamp to it."
msgstr ""

# d3861c14b61e4161b7d19e4fa066b1ba
#: ../../topics/signing.txt:138
msgid ""
"Checks if ``value`` was signed less than ``max_age`` seconds ago, otherwise "
"raises ``SignatureExpired``."
msgstr ""

# 383d47f36a314e17b68eae1c5d2286ab
#: ../../topics/signing.txt:142
msgid "Protecting complex data structures"
msgstr ""

# 258d5c22751348ca873273d7b9922761
#: ../../topics/signing.txt:132
msgid ""
"If you wish to protect a list, tuple or dictionary you can do so using the "
"signing module's ``dumps`` and ``loads`` functions. These imitate Python's "
"pickle module, but use JSON serialization under the hood. JSON ensures that "
"even if your :setting:`SECRET_KEY` is stolen an attacker will not be able to "
"execute arbitrary commands by exploiting the pickle format.::"
msgstr ""

# 535484c128b74384915bfe7747c92f2b
#: ../../topics/signing.txt:159
msgid ""
"Returns URL-safe, sha1 signed base64 compressed JSON string. Serialized "
"object is signed using :class:`~TimestampSigner`."
msgstr ""

# ac5be39ba43249e19c094e46f56ce502
#: ../../topics/signing.txt:164
msgid ""
"Reverse of ``dumps()``, raises ``BadSignature`` if signature fails. Checks "
"``max_age`` (in seconds) if given."
msgstr ""

# e7eb6f5b34b949d9a9a8371403b4b4a2
#: ../../topics/templates.txt:3
msgid "The Django template language"
msgstr ""

# 7ccc2f6ca4c94830bcf464ec7cfcffa3
#: ../../topics/templates.txt:7
msgid ""
"This document explains the language syntax of the Django template system. If "
"you're looking for a more technical perspective on how it works and how to "
"extend it, see :doc:`/ref/templates/api`."
msgstr ""

# e10e13437f6f4df0b62e5ae830e7582b
#: ../../topics/templates.txt:11
msgid ""
"Django's template language is designed to strike a balance between power and "
"ease. It's designed to feel comfortable to those used to working with HTML. "
"If you have any exposure to other text-based template languages, such as "
"Smarty_ or CheetahTemplate_, you should feel right at home with Django's "
"templates."
msgstr ""

# 0fb3d882d5ad4fdcafcea4d7dfb15883
#: ../../topics/templates.txt:18
msgid ""
"If you have a background in programming, or if you're used to languages "
"which mix programming code directly into HTML, you'll want to bear in mind "
"that the Django template system is not simply Python embedded into HTML. "
"This is by design: the template system is meant to express presentation, not "
"program logic."
msgstr ""

# 6ebe70d832b14d22b6310a89ae36b70c
#: ../../topics/templates.txt:24
msgid ""
"The Django template system provides tags which function similarly to some "
"programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for` "
"tag for looping, etc. -- but these are not simply executed as the "
"corresponding Python code, and the template system will not execute "
"arbitrary Python expressions. Only the tags, filters and syntax listed below "
"are supported by default (although you can add :doc:`your own extensions </"
"howto/custom-template-tags>` to the template language as needed)."
msgstr ""

# d1129837ba5444d6807056f087f6daa2
#: ../../topics/templates.txt:37
msgid "Templates"
msgstr ""

# f4b57fa35ce440549aaac75c9922e6c3
#: ../../topics/templates.txt:41
msgid ""
"A template is simply a text file. It can generate any text-based format "
"(HTML, XML, CSV, etc.)."
msgstr ""

# 0e4886ec32d149e7910dd27672eab794
#: ../../topics/templates.txt:44
msgid ""
"A template contains **variables**, which get replaced with values when the "
"template is evaluated, and **tags**, which control the logic of the template."
msgstr ""

# de2229a32a3a401981efa9eeb32ac8a6
#: ../../topics/templates.txt:47
msgid ""
"Below is a minimal template that illustrates a few basics. Each element will "
"be explained later in this document."
msgstr ""

# 8d2c1ef9dd8f46d19ef7479af03ca95e
#: ../../topics/templates.txt:69
msgid ""
"Why use a text-based template instead of an XML-based one (like Zope's TAL)? "
"We wanted Django's template language to be usable for more than just XML/"
"HTML templates. At World Online, we use it for emails, JavaScript and CSV. "
"You can use the template language for any text-based format."
msgstr ""

# b30a14ae7b26489dafaeb8f32b3343b5
#: ../../topics/templates.txt:75
msgid "Oh, and one more thing: Making humans edit XML is sadistic!"
msgstr ""

# b798db6f7f9d492ab9ff7edb7fe109d7
#: ../../topics/templates.txt:78
msgid "Variables"
msgstr ""

# abb3c3e92f794302b150684cead3a420
#: ../../topics/templates.txt:80
msgid ""
"Variables look like this: ``{{ variable }}``. When the template engine "
"encounters a variable, it evaluates that variable and replaces it with the "
"result. Variable names consist of any combination of alphanumeric characters "
"and the underscore (``\"_\"``). The dot (``\".\"``) also appears in variable "
"sections, although that has a special meaning, as indicated below. "
"Importantly, *you cannot have spaces or punctuation characters in variable "
"names.*"
msgstr ""

# 5542c249e53d4aeeb0067d01e04f8223
#: ../../topics/templates.txt:88
msgid "Use a dot (``.``) to access attributes of a variable."
msgstr ""

# 02f0d94fffc34900b397b149c2d9163f
#: ../../topics/templates.txt:92
msgid "Behind the scenes"
msgstr ""

# bbab87ccc4584d75a74d3c4c61a8ab1f
#: ../../topics/templates.txt:94
msgid ""
"Technically, when the template system encounters a dot, it tries the "
"following lookups, in this order:"
msgstr ""

# 33703edae4f74f4487f371742179506d
#: ../../topics/templates.txt:95
msgid "Dictionary lookup"
msgstr ""

# a3f0fb951eed493db312c9a05472f6c2
#: ../../topics/templates.txt:96
msgid "Attribute lookup"
msgstr ""

# 28ea52de3a094b709bc4c7ab66b14e93
#: ../../topics/templates.txt:97
msgid "Method call"
msgstr ""

# 38d05ad2c46742ecbfaa0ed04ebe43ee
#: ../../topics/templates.txt:98
msgid "List-index lookup"
msgstr ""

# 03f91543868c427bb0d59fb892dc1c68
#: ../../topics/templates.txt:100
msgid ""
"This can cause some unexpected behavior with objects that override "
"dictionary lookup. For example, consider the following code snippet that "
"attempts to loop over a ``collections.defaultdict``::"
msgstr ""

# 22d452a7bcf548af8aae56f775ba9119
#: ../../topics/templates.txt:108
msgid ""
"Because dictionary lookup happens first, that behavior kicks in and provides "
"a default value instead of using the intended ``.iteritems()`` method. In "
"this case, consider converting to a dictionary first."
msgstr ""

# 1bf4fbed4d1249dcb0715780c13ff8c9
#: ../../topics/templates.txt:112
msgid ""
"In the above example, ``{{ section.title }}`` will be replaced with the "
"``title`` attribute of the ``section`` object."
msgstr ""

# fc3338949c374e2fa020c059afbdf29d
#: ../../topics/templates.txt:115
msgid ""
"If you use a variable that doesn't exist, the template system will insert "
"the value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is set "
"to ``''`` (the empty string) by default."
msgstr ""

# 7ce2f8f5a2cd49eb8290de719fd25009
#: ../../topics/templates.txt:119
msgid ""
"Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be "
"interpreted as a literal string and not using the value of the variable \"bar"
"\", if one exists in the template context."
msgstr ""

# 45b50f3b67864c75a82e9912d377e845
#: ../../topics/templates.txt:126
msgid "You can modify variables for display by using **filters**."
msgstr ""

# 97e6e9c324b546649e59fe202fb32992
#: ../../topics/templates.txt:128
msgid ""
"Filters look like this: ``{{ name|lower }}``. This displays the value of the "
"``{{ name }}`` variable after being filtered through the :tfilter:`lower` "
"filter, which converts text to lowercase. Use a pipe (``|``) to apply a "
"filter."
msgstr ""

# bc70cc59eab74168bea401d4bf3790fa
#: ../../topics/templates.txt:132
msgid ""
"Filters can be \"chained.\" The output of one filter is applied to the next. "
"``{{ text|escape|linebreaks }}`` is a common idiom for escaping text "
"contents, then converting line breaks to ``<p>`` tags."
msgstr ""

# 12fdb925e9a94c778dba111f3a363936
#: ../../topics/templates.txt:136
msgid ""
"Some filters take arguments. A filter argument looks like this: ``{{ bio|"
"truncatewords:30 }}``. This will display the first 30 words of the ``bio`` "
"variable."
msgstr ""

# 9834b742495f43d6817a5bea84f9abd2
#: ../../topics/templates.txt:140
msgid ""
"Filter arguments that contain spaces must be quoted; for example, to join a "
"list with commas and spaced you'd use ``{{ list|join:\", \" }}``."
msgstr ""

# e9a7c165a9af4b49be41b71879d8c874
#: ../../topics/templates.txt:143
msgid ""
"Django provides about thirty built-in template filters. You can read all "
"about them in the :ref:`built-in filter reference <ref-templates-builtins-"
"filters>`. To give you a taste of what's available, here are some of the "
"more commonly used template filters:"
msgstr ""

# 83fd42f779c84e5292f313b71f686c78
#: ../../topics/templates.txt:157
msgid ":tfilter:`default`"
msgstr ""

# 2038156cd4a84ad5872610491cb60dc3
#: ../../topics/templates.txt:149
msgid ""
"If a variable is false or empty, use given default. Otherwise, use the value "
"of the variable"
msgstr ""

# ceaa356f3a6a4936865f4b277b2f0818
#: ../../topics/templates.txt:156
msgid ""
"If ``value`` isn't provided or is empty, the above will display \"``nothing``"
"\"."
msgstr ""

# a0537860783a4535bbc15fe04cf98e99
#: ../../topics/templates.txt:165
msgid ":tfilter:`length`"
msgstr ""

# f19fde4019b34ebeb8586ff7a4e8fedf
#: ../../topics/templates.txt:160
msgid ""
"Returns the length of the value. This works for both strings and lists; for "
"example::"
msgstr ""

# 882a663a61c84e7cbc7761632e10414b
#: ../../topics/templates.txt:165
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

# acfe3b15fb374448913453c2efe4ac68
#: ../../topics/templates.txt:173
msgid ":tfilter:`striptags`"
msgstr ""

# a518945ef0bf4720ba8f977e6361601b
#: ../../topics/templates.txt:168
msgid "Strips all [X]HTML tags. For example::"
msgstr ""

# 9337a622a4ed466695aea0c3ba5f7292
#: ../../topics/templates.txt:172
msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, "
"the output will be ``\"Joel is a slug\"``."
msgstr ""

# fb3a7cbe41784f74901d0f83c65fb066
#: ../../topics/templates.txt:175
msgid ""
"Again, these are just a few examples; see the :ref:`built-in filter "
"reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""

# addf6fc760664576913b7660d3a0337d
#: ../../topics/templates.txt:178
msgid ""
"You can also create your own custom template filters; see :doc:`/howto/"
"custom-template-tags`."
msgstr ""

# 0ef7d1419e674eedb2f7c7605bb600b0
# f6db5afc88bf44a59bcb4b1ecbd10544
#: ../../topics/templates.txt:183 ../../topics/templates.txt:249
msgid ""
"Django's admin interface can include a complete reference of all template "
"tags and filters available for a given site. See :doc:`/ref/contrib/admin/"
"admindocs`."
msgstr ""

# 37f57e0c760f45ca9d9b1fd9dec2e46b
#: ../../topics/templates.txt:188
msgid "Tags"
msgstr ""

# f076d84fdbfb4c749a7410c3139e957a
#: ../../topics/templates.txt:190
msgid ""
"Tags look like this: ``{% tag %}``. Tags are more complex than variables: "
"Some create text in the output, some control flow by performing loops or "
"logic, and some load external information into the template to be used by "
"later variables."
msgstr ""

# df7dd879205e4f7f8191a94d10286f48
#: ../../topics/templates.txt:194
msgid ""
"Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag "
"contents ... {% endtag %}``)."
msgstr ""

# a7a5ff70f3154c7aa1ab79e0e9a0e4ae
#: ../../topics/templates.txt:197
msgid ""
"Django ships with about two dozen built-in template tags. You can read all "
"about them in the :ref:`built-in tag reference <ref-templates-builtins-"
"tags>`. To give you a taste of what's available, here are some of the more "
"commonly used tags:"
msgstr ""

# 12afa48a5f674726a7c54013f87218a7
#: ../../topics/templates.txt:210
msgid ":ttag:`for`"
msgstr ""

# b0f82f39be014091bfc53f9e39f5cadd
#: ../../topics/templates.txt:203
msgid ""
"Loop over each item in an array.  For example, to display a list of athletes "
"provided in ``athlete_list``::"
msgstr ""

# 2f55934910f348bead78c5765b5ba88b
#: ../../topics/templates.txt:235
msgid ":ttag:`if` and ``else``"
msgstr ""

# c3c0cb326b9044b6a89ce7581211faa4
#: ../../topics/templates.txt:213
msgid ""
"Evaluates a variable, and if that variable is \"true\" the contents of the "
"block are displayed::"
msgstr ""

# 1ad0a067b82c4b8db41e3bd944f115db
#: ../../topics/templates.txt:222
msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""

# 7f000cb9f3ee4f67842d74e53e098e85
#: ../../topics/templates.txt:225
msgid "You can also use filters and various operators in the :ttag:`if` tag::"
msgstr ""

# a75cf5ffa3c944e3ac6f205247c8d0c6
#: ../../topics/templates.txt:233
msgid ""
"While the above example works, be aware that most template filters return "
"strings, so mathematical comparisons using filters will generally not work "
"as you expect. :tfilter:`length` is an exception."
msgstr ""

# c43431f970424e43baab0edf4ab0d5a8
#: ../../topics/templates.txt:239
msgid ":ttag:`block` and :ttag:`extends`"
msgstr ""

# 5840245253734bcfae805a7a81ea0dba
#: ../../topics/templates.txt:238
msgid ""
"Set up `template inheritance`_ (see below), a powerful way of cutting down "
"on \"boilerplate\" in templates."
msgstr ""

# 5d8e32b955b54e24bf2632cff6c900c7
#: ../../topics/templates.txt:241
msgid ""
"Again, the above is only a selection of the whole list; see the :ref:`built-"
"in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""

# 59f6c7178db2479b8bd05a83163b1498
#: ../../topics/templates.txt:244
msgid ""
"You can also create your own custom template tags; see :doc:`/howto/custom-"
"template-tags`."
msgstr ""

# 84bf33fa08904575a8fb4f204984181e
#: ../../topics/templates.txt:256
msgid "Comments"
msgstr ""

# 3e418648e4344c95a6e943c14ecadc52
#: ../../topics/templates.txt:258
msgid ""
"To comment-out part of a line in a template, use the comment syntax: ``{# #}"
"``."
msgstr ""

# b2c2de3190a34a92adc900aadb858bfd
#: ../../topics/templates.txt:260
msgid "For example, this template would render as ``'hello'``::"
msgstr ""

# 6762a36ab7b34b9e9e81b2d5fea53c47
#: ../../topics/templates.txt:264
msgid "A comment can contain any template code, invalid or not. For example::"
msgstr ""

# aff4d920127444278242b0b57b785dfb
#: ../../topics/templates.txt:268
msgid ""
"This syntax can only be used for single-line comments (no newlines are "
"permitted between the ``{#`` and ``#}`` delimiters). If you need to comment "
"out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""

# 6676318ac90649e2b9fa91192ecdc4c7
#: ../../topics/templates.txt:275
msgid "Template inheritance"
msgstr ""

# d37ca4694334444bac968d2d0b6fb7e3
#: ../../topics/templates.txt:277
msgid ""
"The most powerful -- and thus the most complex -- part of Django's template "
"engine is template inheritance. Template inheritance allows you to build a "
"base \"skeleton\" template that contains all the common elements of your "
"site and defines **blocks** that child templates can override."
msgstr ""

# 5f5b59dadcf7420093620fce3e38f270
#: ../../topics/templates.txt:282
msgid ""
"It's easiest to understand template inheritance by starting with an example::"
msgstr ""

# 8f33f3e57b054a71a6edb0062e405bae
#: ../../topics/templates.txt:307
msgid ""
"This template, which we'll call ``base.html``, defines a simple HTML "
"skeleton document that you might use for a simple two-column page. It's the "
"job of \"child\" templates to fill the empty blocks with content."
msgstr ""

# eeb0289538114e05bbb1f0d8275164bf
#: ../../topics/templates.txt:311
msgid ""
"In this example, the :ttag:`block` tag defines three blocks that child "
"templates can fill in. All the :ttag:`block` tag does is to tell the "
"template engine that a child template may override those portions of the "
"template."
msgstr ""

# 0bca6c84759341f8b3c65ebfca466d3d
#: ../../topics/templates.txt:315
msgid "A child template might look like this::"
msgstr ""

# 40ec8c7984a9439f87c9aeae1c0caa0a
#: ../../topics/templates.txt:328
msgid ""
"The :ttag:`extends` tag is the key here. It tells the template engine that "
"this template \"extends\" another template. When the template system "
"evaluates this template, first it locates the parent -- in this case, \"base."
"html\"."
msgstr ""

# 2b25c938b97c4a2486148660b07b19b3
#: ../../topics/templates.txt:332
msgid ""
"At that point, the template engine will notice the three :ttag:`block` tags "
"in ``base.html`` and replace those blocks with the contents of the child "
"template. Depending on the value of ``blog_entries``, the output might look "
"like::"
msgstr ""

# e9097fe0a54d4bf2a3864ce33090778b
#: ../../topics/templates.txt:362
msgid ""
"Note that since the child template didn't define the ``sidebar`` block, the "
"value from the parent template is used instead. Content within a ``{% block "
"%}`` tag in a parent template is always used as a fallback."
msgstr ""

# 65f63d0838924d8d92e7cb4c3bd69fe8
#: ../../topics/templates.txt:366
msgid ""
"You can use as many levels of inheritance as needed. One common way of using "
"inheritance is the following three-level approach:"
msgstr ""

# 6a26701fd22c4cc7b706a18cc327732b
#: ../../topics/templates.txt:369
msgid ""
"Create a ``base.html`` template that holds the main look-and-feel of your "
"site."
msgstr ""

# 0621abc9d5a844798ab1a69d39c930e9
#: ../../topics/templates.txt:371
msgid ""
"Create a ``base_SECTIONNAME.html`` template for each \"section\" of your "
"site. For example, ``base_news.html``, ``base_sports.html``. These templates "
"all extend ``base.html`` and include section-specific styles/design."
msgstr ""

# e927b8e61f94424a9ef7d55632fd0556
#: ../../topics/templates.txt:375
msgid ""
"Create individual templates for each type of page, such as a news article or "
"blog entry. These templates extend the appropriate section template."
msgstr ""

# 802491d1f0b144a6b1a0003451b353b6
#: ../../topics/templates.txt:379
msgid ""
"This approach maximizes code reuse and makes it easy to add items to shared "
"content areas, such as section-wide navigation."
msgstr ""

# 4c077563e2554de29a6f1ba8a4d193c3
#: ../../topics/templates.txt:382
msgid "Here are some tips for working with inheritance:"
msgstr ""

# d060cf9a4d004de78594404192e19786
#: ../../topics/templates.txt:384
msgid ""
"If you use :ttag:`{% extends %}<extends>` in a template, it must be the "
"first template tag in that template. Template inheritance won't work, "
"otherwise."
msgstr ""

# 4ccb3d26bd5b4ee78981695cd48460f3
#: ../../topics/templates.txt:387
msgid ""
"More :ttag:`{% block %}<block>` tags in your base templates are better. "
"Remember, child templates don't have to define all parent blocks, so you can "
"fill in reasonable defaults in a number of blocks, then only define the ones "
"you need later. It's better to have more hooks than fewer hooks."
msgstr ""

# 0d06bff499914918b725cf5fa75228d3
#: ../../topics/templates.txt:392
msgid ""
"If you find yourself duplicating content in a number of templates, it "
"probably means you should move that content to a ``{% block %}`` in a parent "
"template."
msgstr ""

# 49bc3ca9c64f4535b30b971efb6ac699
#: ../../topics/templates.txt:396
msgid ""
"If you need to get the content of the block from the parent template, the "
"``{{ block.super }}`` variable will do the trick. This is useful if you want "
"to add to the contents of a parent block instead of completely overriding "
"it. Data inserted using ``{{ block.super }}`` will not be automatically "
"escaped (see the `next section`_), since it was already escaped, if "
"necessary, in the parent template."
msgstr ""

# f077ba5df8b24d48b24380e9db67216e
#: ../../topics/templates.txt:403
msgid ""
"For extra readability, you can optionally give a *name* to your ``{% "
"endblock %}`` tag. For example::"
msgstr ""

# c9cd7ddcc1d44fed958439658c549c0b
#: ../../topics/templates.txt:410
msgid ""
"In larger templates, this technique helps you see which ``{% block %}`` tags "
"are being closed."
msgstr ""

# 18123c4fed044d25a797ae3d3c6de090
#: ../../topics/templates.txt:413
msgid ""
"Finally, note that you can't define multiple :ttag:`block` tags with the "
"same name in the same template. This limitation exists because a block tag "
"works in \"both\" directions. That is, a block tag doesn't just provide a "
"hole to fill -- it also defines the content that fills the hole in the "
"*parent*. If there were two similarly-named :ttag:`block` tags in a "
"template, that template's parent wouldn't know which one of the blocks' "
"content to use."
msgstr ""

# a12a0041e2e643e59b5e6b06a5a6e9e4
#: ../../topics/templates.txt:424
msgid "Automatic HTML escaping"
msgstr ""

# 617ad9c6c2a44f8c8d21efc38ab04977
#: ../../topics/templates.txt:426
msgid ""
"When generating HTML from templates, there's always a risk that a variable "
"will include characters that affect the resulting HTML. For example, "
"consider this template fragment::"
msgstr ""

# 05fb878c1cb846ad80c3d781cd8fc795
#: ../../topics/templates.txt:432
msgid ""
"At first, this seems like a harmless way to display a user's name, but "
"consider what would happen if the user entered his name as this::"
msgstr ""

# f93e4989a9fb4b0999537c0fa46f5c99
#: ../../topics/templates.txt:437
msgid "With this name value, the template would be rendered as::"
msgstr ""

# 6a06986d51164e6fa4335c59be8730d7
#: ../../topics/templates.txt:441
msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr ""

# 9d3545aaa6c34873a29ddd30d9ce14f6
#: ../../topics/templates.txt:443
msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr ""

# 5a722b7c05264c008c8411db3ea59932
#: ../../topics/templates.txt:449
msgid "That would result in a rendered template like this::"
msgstr ""

# 09e45311f45249be8179fcb99301c926
#: ../../topics/templates.txt:453
msgid ""
"...which, in turn, would result in the remainder of the Web page being "
"bolded!"
msgstr ""

# 14143196e67f46fe93df33a9bac1c65a
#: ../../topics/templates.txt:455
msgid ""
"Clearly, user-submitted data shouldn't be trusted blindly and inserted "
"directly into your Web pages, because a malicious user could use this kind "
"of hole to do potentially bad things. This type of security exploit is "
"called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""

# 214ff3fe06514b1a8707ce27db9f3da6
#: ../../topics/templates.txt:460
msgid "To avoid this problem, you have two options:"
msgstr ""

# 8aa99a8ce7bd4c7baeed7ba44a9ddcf0
#: ../../topics/templates.txt:462
msgid ""
"One, you can make sure to run each untrusted variable through the :tfilter:"
"`escape` filter (documented below), which converts potentially harmful HTML "
"characters to unharmful ones. This was the default solution in Django for "
"its first few years, but the problem is that it puts the onus on *you*, the "
"developer / template author, to ensure you're escaping everything. It's easy "
"to forget to escape data."
msgstr ""

# 1f197a1c4a5d4d15ba289c05666c4eef
#: ../../topics/templates.txt:469
msgid ""
"Two, you can take advantage of Django's automatic HTML escaping. The "
"remainder of this section describes how auto-escaping works."
msgstr ""

# 118ec8a987104681ae4ebacdbe68e3ac
#: ../../topics/templates.txt:472
msgid ""
"By default in Django, every template automatically escapes the output of "
"every variable tag. Specifically, these five characters are escaped:"
msgstr ""

# 4ed9e8649a964ebca3a28a0a77f42920
#: ../../topics/templates.txt:476
msgid "``<`` is converted to ``&lt;``"
msgstr ""

# 4eefcf0933474f5ca9b3952cff340886
#: ../../topics/templates.txt:477
msgid "``>`` is converted to ``&gt;``"
msgstr ""

# 2849fa05f4d44610bfd709a0233a725c
#: ../../topics/templates.txt:478
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

# 984b0b054ecc45fa840581c25823c0f7
#: ../../topics/templates.txt:479
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

# 5687bf21440947b898720cb41d461a37
#: ../../topics/templates.txt:480
msgid "``&`` is converted to ``&amp;``"
msgstr ""

# d0328ab1a1e24074bb11e7cb60a577a9
#: ../../topics/templates.txt:482
msgid ""
"Again, we stress that this behavior is on by default. If you're using "
"Django's template system, you're protected."
msgstr ""

# 66f396f9861b40b39a16341b24f8207b
#: ../../topics/templates.txt:488
msgid "How to turn it off"
msgstr ""

# 12417ef48f7f43a385ad4b1962f5b88b
#: ../../topics/templates.txt:490
msgid ""
"If you don't want data to be auto-escaped, on a per-site, per-template level "
"or per-variable level, you can turn it off in several ways."
msgstr ""

# 22f4750b0d314814bc40617164628d28
#: ../../topics/templates.txt:493
msgid ""
"Why would you want to turn it off? Because sometimes, template variables "
"contain data that you *intend* to be rendered as raw HTML, in which case you "
"don't want their contents to be escaped. For example, you might store a blob "
"of HTML in your database and want to embed that directly into your template. "
"Or, you might be using Django's template system to produce text that is "
"*not* HTML -- like an email message, for instance."
msgstr ""

# 07c609c27d6e4051bc607abb346a94bf
#: ../../topics/templates.txt:501
msgid "For individual variables"
msgstr ""

# c9095d8a53334e1b84c9f677cf352a6e
#: ../../topics/templates.txt:503
msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe` "
"filter::"
msgstr ""

# 8814932cfc3e45319477a19cb2cb72d4
#: ../../topics/templates.txt:509
msgid ""
"Think of *safe* as shorthand for *safe from further escaping* or *can be "
"safely interpreted as HTML*. In this example, if ``data`` contains "
"``'<b>'``, the output will be::"
msgstr ""

# 54f6ec40f61244f795d362824f66ab5e
#: ../../topics/templates.txt:517
msgid "For template blocks"
msgstr ""

# f602a774be094993a0a88e363defce80
#: ../../topics/templates.txt:519
msgid ""
"To control auto-escaping for a template, wrap the template (or just a "
"particular section of the template) in the :ttag:`autoescape` tag, like so::"
msgstr ""

# 56634457b6e14d819df427ab01db1048
#: ../../topics/templates.txt:526
msgid ""
"The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. "
"At times, you might want to force auto-escaping when it would otherwise be "
"disabled. Here is an example template::"
msgstr ""

# a32833d91a6b498d8141fbe1d97340d6
#: ../../topics/templates.txt:541
msgid ""
"The auto-escaping tag passes its effect onto templates that extend the "
"current one as well as templates included via the :ttag:`include` tag, just "
"like all block tags. For example::"
msgstr ""

# 3f5158f1f61e4452a3bc679ceacc66ac
#: ../../topics/templates.txt:560
msgid ""
"Because auto-escaping is turned off in the base template, it will also be "
"turned off in the child template, resulting in the following rendered HTML "
"when the ``greeting`` variable contains the string ``<b>Hello!</b>``::"
msgstr ""

# a0bbf18e3a7c416398c116db1fd0bb6e
#: ../../topics/templates.txt:568
msgid "Notes"
msgstr ""

# 366e78897efe4e158e94a6f644b71d80
#: ../../topics/templates.txt:570
msgid ""
"Generally, template authors don't need to worry about auto-escaping very "
"much. Developers on the Python side (people writing views and custom "
"filters) need to think about the cases in which data shouldn't be escaped, "
"and mark data appropriately, so things Just Work in the template."
msgstr ""

# c51e06febfb743a18a9c23a2b4986ad0
#: ../../topics/templates.txt:575
msgid ""
"If you're creating a template that might be used in situations where you're "
"not sure whether auto-escaping is enabled, then add an :tfilter:`escape` "
"filter to any variable that needs escaping. When auto-escaping is on, "
"there's no danger of the :tfilter:`escape` filter *double-escaping* data -- "
"the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""

# a860a5380b314e9b857b499c6de3c6f9
#: ../../topics/templates.txt:584
msgid "String literals and automatic escaping"
msgstr ""

# 1cff8788576c48dabc8fb37735a427e9
#: ../../topics/templates.txt:586
msgid "As we mentioned earlier, filter arguments can be strings::"
msgstr ""

# dcd7821b85274d8a8568db4a6276abf4
#: ../../topics/templates.txt:590
msgid ""
"All string literals are inserted **without** any automatic escaping into the "
"template -- they act as if they were all passed through the :tfilter:`safe` "
"filter. The reasoning behind this is that the template author is in control "
"of what goes into the string literal, so they can make sure the text is "
"correctly escaped when the template is written."
msgstr ""

# 7d2a18c148fb470ab624ab4ded07ea0b
#: ../../topics/templates.txt:596
msgid "This means you would write ::"
msgstr ""

# ae46a5925c844885a2a15e04016b876c
#: ../../topics/templates.txt:600
msgid "...rather than ::"
msgstr ""

# 3b5771fa65024f8ca11ea1cf8772b6a8
#: ../../topics/templates.txt:604
msgid ""
"This doesn't affect what happens to data coming from the variable itself. "
"The variable's contents are still automatically escaped, if necessary, "
"because they're beyond the control of the template author."
msgstr ""

# 21cc52b01c7240a8b86cd22ee66afd7f
#: ../../topics/templates.txt:611
msgid "Accessing method calls"
msgstr ""

# 1c755eb18e664608844a83bf709552c1
#: ../../topics/templates.txt:613
msgid ""
"Most method calls attached to objects are also available from within "
"templates. This means that templates have access to much more than just "
"class attributes (like field names) and variables passed in from views. For "
"example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-"
"related>` syntax for finding a collection of objects related on a foreign "
"key. Therefore, given a model called \"comment\" with a foreign key "
"relationship to a model called \"task\" you can loop through all comments "
"attached to a given task like this::"
msgstr ""

# 08135b4423ad41adaab6b2d1e3f7a4ef
#: ../../topics/templates.txt:625
msgid ""
"Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` "
"method to count the number of objects they contain. Therefore, you can "
"obtain a count of all comments related to the current task with::"
msgstr ""

# 12818e10d2ff4289822f5dd9235461a2
#: ../../topics/templates.txt:631
msgid ""
"And of course you can easily access methods you've explicitly defined on "
"your own models::"
msgstr ""

# 9211c4f0b0a84c59b276047fb9a688dc
#: ../../topics/templates.txt:642
msgid ""
"Because Django intentionally limits the amount of logic processing available "
"in the template language, it is not possible to pass arguments to method "
"calls accessed from within templates. Data should be calculated in views, "
"then passed to templates for display."
msgstr ""

# 44325538343d4cb990ec2debfc258126
#: ../../topics/templates.txt:650
msgid "Custom tag and filter libraries"
msgstr ""

# 9cd8f3dc394444fb870a85d9fcd45722
#: ../../topics/templates.txt:652
msgid ""
"Certain applications provide custom tag and filter libraries. To access them "
"in a template, use the :ttag:`load` tag::"
msgstr ""

# 17de23573b464bf6b9adf6614b44f469
#: ../../topics/templates.txt:659
msgid ""
"In the above, the :ttag:`load` tag loads the ``comments`` tag library, which "
"then makes the ``comment_form`` tag available for use. Consult the "
"documentation area in your admin to find the list of custom libraries in "
"your installation."
msgstr ""

# 27e8e644a9a643a0908b56d8632870f9
#: ../../topics/templates.txt:663
msgid ""
"The :ttag:`load` tag can take multiple library names, separated by spaces. "
"Example::"
msgstr ""

# ec237f23fcb84055b1976505b0bc7939
#: ../../topics/templates.txt:668
msgid ""
"See :doc:`/howto/custom-template-tags` for information on writing your own "
"custom template libraries."
msgstr ""

# df7c23a44b1d4e149dcf11fa784bf150
#: ../../topics/templates.txt:672
msgid "Custom libraries and template inheritance"
msgstr ""

# 50b189190df847cf88197e23d5edc7d8
#: ../../topics/templates.txt:674
msgid ""
"When you load a custom tag or filter library, the tags/filters are only made "
"available to the current template -- not any parent or child templates along "
"the template-inheritance path."
msgstr ""

# a38e1add0f194f018ab0cfb79a586229
#: ../../topics/templates.txt:678
msgid ""
"For example, if a template ``foo.html`` has ``{% load comments %}``, a child "
"template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* have "
"access to the comments template tags and filters. The child template is "
"responsible for its own ``{% load comments %}``."
msgstr ""

# 1f172e79a47841da93ba658fdcc6c35b
#: ../../topics/templates.txt:683
msgid "This is a feature for the sake of maintainability and sanity."
msgstr ""

# 5b261adadfe9404a82be576265c10c02
#: ../../topics/testing/advanced.txt:3
msgid "Advanced testing topics"
msgstr ""

# d461043e4f5f4d269f17bc734e255a4a
#: ../../topics/testing/advanced.txt:6
msgid "The request factory"
msgstr ""

# e8f6312d17b44ac78d6fb63cc1cc5d1a
#: ../../topics/testing/advanced.txt:12
msgid ""
"The :class:`~django.test.client.RequestFactory` shares the same API as the "
"test client. However, instead of behaving like a browser, the RequestFactory "
"provides a way to generate a request instance that can be used as the first "
"argument to any view. This means you can test a view function the same way "
"as you would test any other function -- as a black box, with exactly known "
"inputs, testing for specific outputs."
msgstr ""

# d3809f77cdeb41fe853c730c616fc467
#: ../../topics/testing/advanced.txt:19
msgid ""
"The API for the :class:`~django.test.client.RequestFactory` is a slightly "
"restricted subset of the test client API:"
msgstr ""

# 4bc631bd7a1c431998adddd8f7abcfd3
#: ../../topics/testing/advanced.txt:22
msgid ""
"It only has access to the HTTP methods :meth:`~Client.get()`, :meth:`~Client."
"post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, :meth:`~Client."
"head()` and :meth:`~Client.options()`."
msgstr ""

# fc688225febd4e73a89053507786406e
#: ../../topics/testing/advanced.txt:27
msgid ""
"These methods accept all the same arguments *except* for ``follows``. Since "
"this is just a factory for producing requests, it's up to you to handle the "
"response."
msgstr ""

# 06f893b6582e4e2b8cc9dba7a187de2f
#: ../../topics/testing/advanced.txt:31
msgid ""
"It does not support middleware. Session and authentication attributes must "
"be supplied by the test itself if required for the view to function properly."
msgstr ""

# 92e703fed6b14c98840da790b50dd42d
#: ../../topics/testing/advanced.txt:38
msgid "The following is a simple unit test using the request factory::"
msgstr ""

# 42f5279ab5414f62ac880bffa3aa919f
#: ../../topics/testing/advanced.txt:59
msgid "Tests and multiple databases"
msgstr ""

# 7d6abc62bbac49ef8fab9ffc67aee564
#: ../../topics/testing/advanced.txt:64
msgid "Testing master/slave configurations"
msgstr ""

# 5a754fc9cfcf4fa38026365b18018916
#: ../../topics/testing/advanced.txt:66
msgid ""
"If you're testing a multiple database configuration with master/slave "
"replication, this strategy of creating test databases poses a problem. When "
"the test databases are created, there won't be any replication, and as a "
"result, data created on the master won't be seen on the slave."
msgstr ""

# e1bea4f94ca44e6494c2d07406b22f44
#: ../../topics/testing/advanced.txt:72
msgid ""
"To compensate for this, Django allows you to define that a database is a "
"*test mirror*. Consider the following (simplified) example database "
"configuration::"
msgstr ""

# c53cc355b54842f78b9ef2bdf566dfef
#: ../../topics/testing/advanced.txt:92
msgid ""
"In this setup, we have two database servers: ``dbmaster``, described by the "
"database alias ``default``, and ``dbslave`` described by the alias "
"``slave``. As you might expect, ``dbslave`` has been configured by the "
"database administrator as a read slave of ``dbmaster``, so in normal "
"activity, any write to ``default`` will appear on ``slave``."
msgstr ""

# 0c7045fdc19a4946bdc7cc10a7204fb2
#: ../../topics/testing/advanced.txt:98
msgid ""
"If Django created two independent test databases, this would break any tests "
"that expected replication to occur. However, the ``slave`` database has been "
"configured as a test mirror (using the :setting:`TEST_MIRROR` setting), "
"indicating that under testing, ``slave`` should be treated as a mirror of "
"``default``."
msgstr ""

# 7185025b0326401e87fdc9beb543d31a
#: ../../topics/testing/advanced.txt:104
msgid ""
"When the test environment is configured, a test version of ``slave`` will "
"*not* be created. Instead the connection to ``slave`` will be redirected to "
"point at ``default``. As a result, writes to ``default`` will appear on "
"``slave`` -- but because they are actually the same database, not because "
"there is data replication between the two databases."
msgstr ""

# 3a383cdc535b4c5dafabaae2b1c8b052
#: ../../topics/testing/advanced.txt:114
msgid "Controlling creation order for test databases"
msgstr ""

# 2e05a5271c85411aa1e0d103e39350a3
#: ../../topics/testing/advanced.txt:116
msgid ""
"By default, Django will assume all databases depend on the ``default`` "
"database and therefore always create the ``default`` database first. "
"However, no guarantees are made on the creation order of any other databases "
"in your test setup."
msgstr ""

# 82753efac51341418de9533a3fa0a160
#: ../../topics/testing/advanced.txt:121
msgid ""
"If your database configuration requires a specific creation order, you can "
"specify the dependencies that exist using the :setting:`TEST_DEPENDENCIES` "
"setting. Consider the following (simplified) example database configuration::"
msgstr ""

# 6acf7e559dd147ceb5d70216cb821896
#: ../../topics/testing/advanced.txt:149
msgid ""
"Under this configuration, the ``diamonds`` database will be created first, "
"as it is the only database alias without dependencies. The ``default`` and "
"``clubs`` alias will be created next (although the order of creation of this "
"pair is not guaranteed); then ``hearts``; and finally ``spades``."
msgstr ""

# d687447e568a42c9b4404562294e1c7c
#: ../../topics/testing/advanced.txt:154
msgid ""
"If there are any circular dependencies in the :setting:`TEST_DEPENDENCIES` "
"definition, an ``ImproperlyConfigured`` exception will be raised."
msgstr ""

# 24095ece0c474ccea8afebfcea205b87
#: ../../topics/testing/advanced.txt:159
msgid "Running tests outside the test runner"
msgstr ""

# 86c50e4d77df42b0b42e9b71f17217ce
#: ../../topics/testing/advanced.txt:161
msgid ""
"If you want to run tests outside of ``./manage.py test`` -- for example, "
"from a shell prompt -- you will need to set up the test environment first. "
"Django provides a convenience method to do this::"
msgstr ""

# 01fb4895bc1f43e1aca175f41773d28f
#: ../../topics/testing/advanced.txt:168
msgid ""
":func:`~django.test.utils.setup_test_environment` puts several Django "
"features into modes that allow for repeatable testing, but does not create "
"the test databases; :func:`django.test.simple.DjangoTestSuiteRunner."
"setup_databases` takes care of that."
msgstr ""

# d685f8f3aa7b4989b039ef646f006dd6
#: ../../topics/testing/advanced.txt:173
msgid ""
"The call to :func:`~django.test.utils.setup_test_environment` is made "
"automatically as part of the setup of ``./manage.py test``. You only need to "
"manually invoke this method if you're not using running your tests via "
"Django's test runner."
msgstr ""

# f5172e45f2d24a6a8186e3871faf0cf2
#: ../../topics/testing/advanced.txt:181
msgid "Using different testing frameworks"
msgstr ""

# ead15f11400a4d6281357c40bb879d87
#: ../../topics/testing/advanced.txt:183
msgid ""
"Clearly, :mod:`doctest` and :mod:`unittest` are not the only Python testing "
"frameworks. While Django doesn't provide explicit support for alternative "
"frameworks, it does provide a way to invoke tests constructed for an "
"alternative framework as if they were normal Django tests."
msgstr ""

# 298e944eaa9b4d7491b0d13c25e97466
#: ../../topics/testing/advanced.txt:188
msgid ""
"When you run ``./manage.py test``, Django looks at the :setting:"
"`TEST_RUNNER` setting to determine what to do. By default, :setting:"
"`TEST_RUNNER` points to ``'django.test.simple.DjangoTestSuiteRunner'``. This "
"class defines the default Django testing behavior. This behavior involves:"
msgstr ""

# 83e2d9efb2f643c7af8eb16bdb4e7cf1
#: ../../topics/testing/advanced.txt:193
msgid "Performing global pre-test setup."
msgstr ""

# 4b34e11a5d7041f1b95f581bcfc86e34
#: ../../topics/testing/advanced.txt:195
msgid ""
"Looking for unit tests and doctests in the ``models.py`` and ``tests.py`` "
"files in each installed application."
msgstr ""

# f4178328a1114f9d85dba2a351fd6500
#: ../../topics/testing/advanced.txt:198
msgid "Creating the test databases."
msgstr ""

# e95dcd53bcd8453582d1d2cf554ad296
#: ../../topics/testing/advanced.txt:200
msgid ""
"Running ``syncdb`` to install models and initial data into the test "
"databases."
msgstr ""

# b03cee5dfd954aaa8c2c29b9de5fb306
#: ../../topics/testing/advanced.txt:203
msgid "Running the unit tests and doctests that are found."
msgstr ""

# a626e15baabd45309db603156bb8942c
#: ../../topics/testing/advanced.txt:205
msgid "Destroying the test databases."
msgstr ""

# c3d73425cd624a83ac42c7f6ab8f5ad5
#: ../../topics/testing/advanced.txt:207
msgid "Performing global post-test teardown."
msgstr ""

# 20ccebf889ab4f128db82325cbfd5699
#: ../../topics/testing/advanced.txt:209
msgid ""
"If you define your own test runner class and point :setting:`TEST_RUNNER` at "
"that class, Django will execute your test runner whenever you run ``./manage."
"py test``. In this way, it is possible to use any test framework that can be "
"executed from Python code, or to modify the Django test execution process to "
"satisfy whatever testing requirements you may have."
msgstr ""

# c6cae6125bfd42649b3717fdd6a2e662
#: ../../topics/testing/advanced.txt:218
msgid "Defining a test runner"
msgstr ""

# 6d8734d9977c4b1aa879c26ffc996785
#: ../../topics/testing/advanced.txt:222
msgid ""
"A test runner is a class defining a ``run_tests()`` method. Django ships "
"with a ``DjangoTestSuiteRunner`` class that defines the default Django "
"testing behavior. This class defines the ``run_tests()`` entry point, plus a "
"selection of other methods that are used to by ``run_tests()`` to set up, "
"execute and tear down the test suite."
msgstr ""

# ab463c7666764ac88f4db316f23dfa0d
#: ../../topics/testing/advanced.txt:230
msgid ""
"``verbosity`` determines the amount of notification and debug information "
"that will be printed to the console; ``0`` is no output, ``1`` is normal "
"output, and ``2`` is verbose output."
msgstr ""

# 3ccf8793f83d457481b30cd63543ee2d
#: ../../topics/testing/advanced.txt:234
msgid ""
"If ``interactive`` is ``True``, the test suite has permission to ask the "
"user for instructions when the test suite is executed. An example of this "
"behavior would be asking for permission to delete an existing test database. "
"If ``interactive`` is ``False``, the test suite must be able to run without "
"any manual intervention."
msgstr ""

# 5e8388c4c35949049f5e98b0467ac5f8
#: ../../topics/testing/advanced.txt:240
msgid ""
"If ``failfast`` is ``True``, the test suite will stop running after the "
"first test failure is detected."
msgstr ""

# 684c9a8894c74d9e94f9a491b5fab053
#: ../../topics/testing/advanced.txt:243
msgid ""
"Django will, from time to time, extend the capabilities of the test runner "
"by adding new arguments. The ``**kwargs`` declaration allows for this "
"expansion. If you subclass ``DjangoTestSuiteRunner`` or write your own test "
"runner, ensure accept and handle the ``**kwargs`` parameter."
msgstr ""

# f05d84ab875a4b10adbbb2126f32c774
#: ../../topics/testing/advanced.txt:251
msgid ""
"Your test runner may also define additional command-line options. If you add "
"an ``option_list`` attribute to a subclassed test runner, those options will "
"be added to the list of command-line options that the :djadmin:`test` "
"command can use."
msgstr ""

# 5c2ec3152e7c4fa9a1967aedb9a3619e
#: ../../topics/testing/advanced.txt:263
msgid ""
"This is the tuple of ``optparse`` options which will be fed into the "
"management command's ``OptionParser`` for parsing arguments. See the "
"documentation for Python's ``optparse`` module for more details."
msgstr ""

# d6c1397982ef43be8429c1332464da8a
#: ../../topics/testing/advanced.txt:272
msgid "Run the test suite."
msgstr ""

# 5ea6f8a4ac2849058aba1752ee4ac5ba
# 774b6c7999344b948bdd4fbf7b7ded4d
#: ../../topics/testing/advanced.txt:274 ../../topics/testing/advanced.txt:301
msgid ""
"``test_labels`` is a list of strings describing the tests to be run. A test "
"label can take one of three forms:"
msgstr ""

# 8f80a2d13c2340cb962848a7ba1f73d6
# 16f4849709154f3486bb05066acb4072
#: ../../topics/testing/advanced.txt:277 ../../topics/testing/advanced.txt:304
msgid ""
"``app.TestCase.test_method`` -- Run a single test method in a test case."
msgstr ""

# d3d7817d9e064faa9ab239887973e3a0
# 7f4c39ecb1ff45c297dc2c0db1b77915
#: ../../topics/testing/advanced.txt:279 ../../topics/testing/advanced.txt:306
msgid "``app.TestCase`` -- Run all the test methods in a test case."
msgstr ""

# e4378e1b4ae743ac8ce354dbd6a44989
# 6c0c6901f4fb4604a6c68cee8196a62c
#: ../../topics/testing/advanced.txt:280 ../../topics/testing/advanced.txt:307
msgid "``app`` -- Search for and run all tests in the named application."
msgstr ""

# 83915a2dee534ee6a4f5375a830ff636
# c888eb50c9414a44986a5b76f6429208
#: ../../topics/testing/advanced.txt:282 ../../topics/testing/advanced.txt:309
msgid ""
"If ``test_labels`` has a value of ``None``, the test runner should run "
"search for tests in all the applications in :setting:`INSTALLED_APPS`."
msgstr ""

# 02646813d2a24015ae8c4620bbad8538
# 0ce154d21e084a64b3ddec2a5d7935de
#: ../../topics/testing/advanced.txt:285 ../../topics/testing/advanced.txt:312
msgid ""
"``extra_tests`` is a list of extra ``TestCase`` instances to add to the "
"suite that is executed by the test runner. These extra tests are run in "
"addition to those discovered in the modules listed in ``test_labels``."
msgstr ""

# 142bb0af1a1a4b61a861b884f4ee2f5a
#: ../../topics/testing/advanced.txt:289
msgid "This method should return the number of tests that failed."
msgstr ""

# 499b602f118845a7b55c03eec9662599
#: ../../topics/testing/advanced.txt:293
msgid ""
"Sets up the test environment by calling :func:`~django.test.utils."
"setup_test_environment` and setting :setting:`DEBUG` to ``False``."
msgstr ""

# e36d9a4b4f654ef8b4ddb2a0fdd7243b
#: ../../topics/testing/advanced.txt:299
msgid "Constructs a test suite that matches the test labels provided."
msgstr ""

# 6566a7a7b321446f8da805c37809f512
#: ../../topics/testing/advanced.txt:316
msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr ""

# 88010ca3a0c74a058ec85c74cd427a2a
#: ../../topics/testing/advanced.txt:320
msgid "Creates the test databases."
msgstr ""

# 7c074be42ecf42988b20fb2887bc7ed8
#: ../../topics/testing/advanced.txt:322
msgid ""
"Returns a data structure that provides enough detail to undo the changes "
"that have been made. This data will be provided to the "
"``teardown_databases()`` function at the conclusion of testing."
msgstr ""

# 5be535db05e144ed9a85e752057b131e
#: ../../topics/testing/advanced.txt:328
msgid "Runs the test suite."
msgstr ""

# 05ca3a3a618241b6a1a44792f25ea0c3
#: ../../topics/testing/advanced.txt:330
msgid "Returns the result produced by the running the test suite."
msgstr ""

# 1389470395c74eaea56ef67429091df4
#: ../../topics/testing/advanced.txt:334
msgid "Destroys the test databases, restoring pre-test conditions."
msgstr ""

# 1c21a80be8bf43488cec9dd97db61058
#: ../../topics/testing/advanced.txt:336
msgid ""
"``old_config`` is a data structure defining the changes in the database "
"configuration that need to be reversed. It is the return value of the "
"``setup_databases()`` method."
msgstr ""

# 5c35adb2efaf4390afda7cb7f016388c
#: ../../topics/testing/advanced.txt:342
msgid "Restores the pre-test environment."
msgstr ""

# a4072c153aa14c15870fc609086fff51
#: ../../topics/testing/advanced.txt:346
msgid ""
"Computes and returns a return code based on a test suite, and the result "
"from that test suite."
msgstr ""

# 7c5e9c219e804bc3becc881edace6cc5
#: ../../topics/testing/advanced.txt:351
msgid "Testing utilities"
msgstr ""

# 3d840f56b03046ceb5293238a3ea5d04
#: ../../topics/testing/advanced.txt:354
msgid "django.test.utils"
msgstr ""

# 7570c64eb78a4e62b0c7ef1c6236fa83
#: ../../topics/testing/advanced.txt:359
msgid ""
"To assist in the creation of your own test runner, Django provides a number "
"of utility methods in the ``django.test.utils`` module."
msgstr ""

# a984a1f6e1684950ac0cb452b74cf00c
#: ../../topics/testing/advanced.txt:364
msgid ""
"Performs any global pre-test setup, such as the installing the "
"instrumentation of the template rendering system and setting up the dummy "
"email outbox."
msgstr ""

# 7ba9e4759ee74350b42a5528a9f1387f
#: ../../topics/testing/advanced.txt:370
msgid ""
"Performs any global post-test teardown, such as removing the black magic "
"hooks into the template system and restoring normal email services."
msgstr ""

# 36032c34225141a6bc8b690a7cb07b70
#: ../../topics/testing/advanced.txt:375
msgid "django.db.connection.creation"
msgstr ""

# 9fd6ece1c2084004ab2f8b76435f47f6
#: ../../topics/testing/advanced.txt:379
msgid ""
"The creation module of the database backend also provides some utilities "
"that can be useful during testing."
msgstr ""

# 1335109054d54431a42031988c811760
#: ../../topics/testing/advanced.txt:384
msgid "Creates a new test database and runs ``syncdb`` against it."
msgstr ""

# 3aad0e18103442b484ca988d353c9644
#: ../../topics/testing/advanced.txt:386
msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr ""

# 88030a658bf94398aa51d99d573b4587
#: ../../topics/testing/advanced.txt:388
msgid ""
"``autoclobber`` describes the behavior that will occur if a database with "
"the same name as the test database is discovered:"
msgstr ""

# d50af964c5174e15ae4c6c4e1e43c33c
#: ../../topics/testing/advanced.txt:391
msgid ""
"If ``autoclobber`` is ``False``, the user will be asked to approve "
"destroying the existing database. ``sys.exit`` is called if the user does "
"not approve."
msgstr ""

# 46572cfc3d0e49b4af2613bd42211bc6
#: ../../topics/testing/advanced.txt:395
msgid ""
"If autoclobber is ``True``, the database will be destroyed without "
"consulting the user."
msgstr ""

# 0cf10e76f10647eeb165b3dd0c0eaa8c
#: ../../topics/testing/advanced.txt:398
msgid "Returns the name of the test database that it created."
msgstr ""

# 0c97e5d8a9a346f5a2cf17dc9d1c577c
#: ../../topics/testing/advanced.txt:400
msgid ""
"``create_test_db()`` has the side effect of modifying the value of :setting:"
"`NAME` in :setting:`DATABASES` to match the name of the test database."
msgstr ""

# 350aa37cafe240518035fa0d7087f79d
#: ../../topics/testing/advanced.txt:406
msgid ""
"Destroys the database whose name is the value of :setting:`NAME` in :setting:"
"`DATABASES`, and sets :setting:`NAME` to the value of ``old_database_name``."
msgstr ""

# e0278f82e27d4e11b56dde6777751331
#: ../../topics/testing/advanced.txt:410
msgid ""
"The ``verbosity`` argument has the same behavior as for :class:`~django.test."
"simple.DjangoTestSuiteRunner`."
msgstr ""

# 93a5b667cf2e44b3b395ef6b4f5d9b7d
#: ../../topics/testing/advanced.txt:416
msgid "Integration with coverage.py"
msgstr ""

# 3a6212429cb14b3bb288448a6841dfd3
#: ../../topics/testing/advanced.txt:418
msgid ""
"Code coverage describes how much source code has been tested. It shows which "
"parts of your code are being exercised by tests and which are not. It's an "
"important part of testing applications, so it's strongly recommended to "
"check the coverage of your tests."
msgstr ""

# 1f1fc40c5c8547d7ba2773955bc071d5
#: ../../topics/testing/advanced.txt:423
msgid ""
"Django can be easily integrated with `coverage.py`_, a tool for measuring "
"code coverage of Python programs. First, `install coverage.py`_. Next, run "
"the following from your project folder containing ``manage.py``::"
msgstr ""

# b5fb6aa8e2c94b08b68b95ed642f3381
#: ../../topics/testing/advanced.txt:429
msgid ""
"This runs your tests and collects coverage data of the executed files in "
"your project. You can see a report of this data by typing following command::"
msgstr ""

# a0bdccac09904200ba2350175316f13c
#: ../../topics/testing/advanced.txt:434
msgid ""
"Note that some Django code was executed while running tests, but it is not "
"listed here because of the ``source`` flag passed to the previous command."
msgstr ""

# 26c63b77c9a84a0984bd9d96fc66fe10
#: ../../topics/testing/advanced.txt:437
msgid ""
"For more options like annotated HTML listings detailing missed lines, see "
"the `coverage.py`_ docs."
msgstr ""

# abda8bb9845a4e059d5f0aabf8e1cffb
#: ../../topics/testing/doctests.txt:3
msgid "Django and doctests"
msgstr ""

# 59b0f366d23c42ed9becc8117fa83762
#: ../../topics/testing/doctests.txt:5
msgid ""
"Doctests use Python's standard :mod:`doctest` module, which searches your "
"docstrings for statements that resemble a session of the Python interactive "
"interpreter. A full explanation of how :mod:`doctest` works is out of the "
"scope of this document; read Python's official documentation for the details."
msgstr ""

# 098fca5c739b4f87a9ee89bc975515ec
#: ../../topics/testing/doctests.txt:10
msgid "What's a **docstring**?"
msgstr ""

# cbb68df9e7c24cc4b694d738f51b00cf
#: ../../topics/testing/doctests.txt:12
msgid ""
"A good explanation of docstrings (and some guidelines for using them "
"effectively) can be found in :pep:`257`:"
msgstr ""

# 2f675f63d9ce412e828853f14ef4f46f
#: ../../topics/testing/doctests.txt:15
msgid ""
"A docstring is a string literal that occurs as the first statement in a "
"module, function, class, or method definition.  Such a docstring becomes the "
"``__doc__`` special attribute of that object."
msgstr ""

# 75789119a3974cbebb738bbfef5a69f0
#: ../../topics/testing/doctests.txt:19
msgid ""
"For example, this function has a docstring that describes what it does::"
msgstr ""

# 12a399631db14bf7a3f3ad95dbd059d4
#: ../../topics/testing/doctests.txt:25
msgid ""
"Because tests often make great documentation, putting tests directly in your "
"docstrings is an effective way to document *and* test your code."
msgstr ""

# 95c5a77124b740e08dd22b47bc168bb9
#: ../../topics/testing/doctests.txt:28
msgid ""
"As with unit tests, for a given Django application, the test runner looks "
"for doctests in two places:"
msgstr ""

# 402dbeb1665e41cd91de296b7a5a0aa5
#: ../../topics/testing/doctests.txt:31
msgid ""
"The ``models.py`` file. You can define module-level doctests and/or a "
"doctest for individual models. It's common practice to put application-level "
"doctests in the module docstring and model-level doctests in the model "
"docstrings."
msgstr ""

# 545f0509c22c4d879dacdb77c135fbeb
#: ../../topics/testing/doctests.txt:36
msgid ""
"A file called ``tests.py`` in the application directory -- i.e., the "
"directory that holds ``models.py``. This file is a hook for any and all "
"doctests you want to write that aren't necessarily related to models."
msgstr ""

# 3018af0fbf18439e8f2920989ef96eb9
#: ../../topics/testing/doctests.txt:40
msgid ""
"This example doctest is equivalent to the example given in the unittest "
"section above::"
msgstr ""

# d5ca0eea5690430aade15d91ca24857e
#: ../../topics/testing/doctests.txt:67
msgid ""
"When you :ref:`run your tests <running-tests>`, the test runner will find "
"this docstring, notice that portions of it look like an interactive Python "
"session, and execute those lines while checking that the results match."
msgstr ""

# 90497de7d71d4152bdc3a809e138a3bd
#: ../../topics/testing/doctests.txt:71
msgid ""
"In the case of model tests, note that the test runner takes care of creating "
"its own test database. That is, any test that accesses a database -- by "
"creating and saving model instances, for example -- will not affect your "
"production database. However, the database is not refreshed between "
"doctests, so if your doctest requires a certain state you should consider "
"flushing the database or loading a fixture. (See the section on :ref:"
"`fixtures <topics-testing-fixtures>` for more on this.) Note that to use "
"this feature, the database user Django is connecting as must have ``CREATE "
"DATABASE`` rights."
msgstr ""

# fd43c3164fc14385ac2280202a9a5de9
#: ../../topics/testing/doctests.txt:81
msgid "For more details about :mod:`doctest`, see the Python documentation."
msgstr ""

# 17e1bfb2f9f14d00a82d92ab63d54e0c
#: ../../topics/testing/index.txt:3
msgid "Testing in Django"
msgstr ""

# cdb914e5301a47b8b49976528f495f41
#: ../../topics/testing/index.txt:12
msgid ""
"Automated testing is an extremely useful bug-killing tool for the modern Web "
"developer. You can use a collection of tests -- a **test suite** -- to "
"solve, or avoid, a number of problems:"
msgstr ""

# 2fbfb15279b84a008218e7928c896645
#: ../../topics/testing/index.txt:16
msgid ""
"When you're writing new code, you can use tests to validate your code works "
"as expected."
msgstr ""

# f390176cc93d454c976e99c141fe114e
#: ../../topics/testing/index.txt:19
msgid ""
"When you're refactoring or modifying old code, you can use tests to ensure "
"your changes haven't affected your application's behavior unexpectedly."
msgstr ""

# 0cc7123b8891425c8d6a4ad90cc01e66
#: ../../topics/testing/index.txt:23
msgid ""
"Testing a Web application is a complex task, because a Web application is "
"made of several layers of logic -- from HTTP-level request handling, to form "
"validation and processing, to template rendering. With Django's test-"
"execution framework and assorted utilities, you can simulate requests, "
"insert test data, inspect your application's output and generally verify "
"your code is doing what it should be doing."
msgstr ""

# fe6dc3ad2fe44cd5a5f226740c53343c
#: ../../topics/testing/index.txt:30
msgid "The best part is, it's really easy."
msgstr ""

# 23e92e55fe6b4c7bab9d68e9ad464d7a
#: ../../topics/testing/index.txt:33
msgid "Unit tests v. doctests"
msgstr ""

# e781c8a35d6e42c0a0b6aafbdaf2a4f0
#: ../../topics/testing/index.txt:35
msgid ""
"There are two primary ways to write tests with Django, corresponding to the "
"two test frameworks that ship in the Python standard library. The two "
"frameworks are:"
msgstr ""

# 89f22fd0c3b2419180c252aaeaf1cfc9
#: ../../topics/testing/index.txt:39
msgid ""
"**Unit tests** -- tests that are expressed as methods on a Python class that "
"subclasses :class:`unittest.TestCase` or Django's customized :class:`~django."
"test.TestCase`. For example::"
msgstr ""

# 94da085f5c874f4bad56c264dd1d75ec
#: ../../topics/testing/index.txt:51
msgid ""
"**Doctests** -- tests that are embedded in your functions' docstrings and "
"are written in a way that emulates a session of the Python interactive "
"interpreter. For example::"
msgstr ""

# 37df0dab083a4cf88c1bee1c0ea56304
#: ../../topics/testing/index.txt:66
msgid "Which should I use?"
msgstr ""

# b3f316b1328940efb4f35e60779773c7
#: ../../topics/testing/index.txt:68
msgid ""
"Because Django supports both of the standard Python test frameworks, it's up "
"to you and your tastes to decide which one to use. You can even decide to "
"use *both*."
msgstr ""

# f1979f4cf2d64571bfdfd36bbb0165ac
#: ../../topics/testing/index.txt:72
msgid ""
"For developers new to testing, however, this choice can seem confusing. "
"Here, then, are a few key differences to help you decide which approach is "
"right for you:"
msgstr ""

# c42e3e04cc024a0e860d0dfa0bde0e5d
#: ../../topics/testing/index.txt:76
msgid ""
"If you've been using Python for a while, :mod:`doctest` will probably feel "
"more \"pythonic\". It's designed to make writing tests as easy as possible, "
"so it requires no overhead of writing classes or methods. You simply put "
"tests in docstrings. This has the added advantage of serving as "
"documentation (and correct documentation, at that!). However, while doctests "
"are good for some simple example code, they are not very good if you want to "
"produce either high quality, comprehensive tests or high quality "
"documentation. Test failures are often difficult to debug as it can be "
"unclear exactly why the test failed. Thus, doctests should generally be "
"avoided and used primarily for documentation examples only."
msgstr ""

# a7ab50b7f4ab417fb2ebb5658ed801a4
#: ../../topics/testing/index.txt:87
msgid ""
"The :mod:`unittest` framework will probably feel very familiar to developers "
"coming from Java. :mod:`unittest` is inspired by Java's JUnit, so you'll "
"feel at home with this method if you've used JUnit or any test framework "
"inspired by JUnit."
msgstr ""

# 28fe97207bb14f2185e45893239909e3
#: ../../topics/testing/index.txt:92
msgid ""
"If you need to write a bunch of tests that share similar code, then you'll "
"appreciate the :mod:`unittest` framework's organization around classes and "
"methods. This makes it easy to abstract common tasks into common methods. "
"The framework also supports explicit setup and/or cleanup routines, which "
"give you a high level of control over the environment in which your test "
"cases are run."
msgstr ""

# fe708a5807ba43e0a83fb2be0350612a
#: ../../topics/testing/index.txt:99
msgid ""
"If you're writing tests for Django itself, you should use :mod:`unittest`."
msgstr ""

# f3d01430c9c14f8ba0334ae9467d20a5
#: ../../topics/testing/index.txt:102
msgid "Where to go from here"
msgstr ""

# daa55aa00ca04f55803c25919371fd49
#: ../../topics/testing/index.txt:104
msgid ""
"As unit tests are preferred in Django, we treat them in detail in the :doc:"
"`overview` document."
msgstr ""

# d32188c5453b432dae1fb107e62dd416
#: ../../topics/testing/index.txt:107
msgid ":doc:`doctests` describes Django-specific features when using doctests."
msgstr ""

# 367b1469196144c4b3877e3e7da8377d
#: ../../topics/testing/index.txt:109
msgid ""
"You can also use any *other* Python test framework, Django provides an API "
"and tools for that kind of integration. They are described in the :ref:"
"`other-testing-frameworks` section of :doc:`advanced`."
msgstr ""

# 566b11a24d3f470f921fcb34274ab575
#: ../../topics/testing/overview.txt:3
msgid "Testing Django applications"
msgstr ""

# a7f7d4debfae4b2c9ef837f7839e535f
#: ../../topics/testing/overview.txt:10
msgid ""
"The :doc:`testing tutorial </intro/tutorial05>` and the :doc:`advanced "
"testing topics </topics/testing/advanced>`."
msgstr ""

# 0650d9f0d52a49d98c78d5c03e2298e6
#: ../../topics/testing/overview.txt:13
msgid ""
"This document is split into two primary sections. First, we explain how to "
"write tests with Django. Then, we explain how to run them."
msgstr ""

# 76d9f83499e0410990661b5c6aeffd0a
#: ../../topics/testing/overview.txt:17
msgid "Writing tests"
msgstr ""

# d99daa2204b14d11b6aecd3154ce4571
#: ../../topics/testing/overview.txt:19
msgid ""
"Django's unit tests use a Python standard library module: :mod:`unittest`. "
"This module defines tests in class-based approach."
msgstr ""

# 2099f7d172744961a38ff97053ccf4eb
#: ../../topics/testing/overview.txt:22
msgid "unittest2"
msgstr ""

# 5610ddbcd98a45398235d2c2aadcf8a6
#: ../../topics/testing/overview.txt:24
msgid ""
"Python 2.7 introduced some major changes to the unittest library, adding "
"some extremely useful features. To ensure that every Django project can "
"benefit from these new features, Django ships with a copy of unittest2_, a "
"copy of the Python 2.7 unittest library, backported for Python 2.5 "
"compatibility."
msgstr ""

# 2061c1ebfbe44825ad83d97b34c85726
#: ../../topics/testing/overview.txt:30
msgid ""
"To access this library, Django provides the ``django.utils.unittest`` module "
"alias. If you are using Python 2.7, or you have installed unittest2 locally, "
"Django will map the alias to the installed version of the unittest library. "
"Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

# 900c8b5f03024cf4a8e1980d987f6bb0
#: ../../topics/testing/overview.txt:36
msgid "To use this alias, simply use::"
msgstr ""

# 1ad5a64161944081a468d4b03b6b3077
#: ../../topics/testing/overview.txt:40
msgid "wherever you would have historically used::"
msgstr ""

# 76dbb65aa84d4d16be0c725448d247ee
#: ../../topics/testing/overview.txt:44
msgid ""
"If you want to continue to use the base unittest library, you can -- you "
"just won't get any of the nice new unittest2 features."
msgstr ""

# 54b86abd0f8a4822a383de1d944f9c56
#: ../../topics/testing/overview.txt:49
msgid ""
"For a given Django application, the test runner looks for unit tests in two "
"places:"
msgstr ""

# cc8e1e054c76480d8554c21f2a9a4911
#: ../../topics/testing/overview.txt:52
msgid ""
"The ``models.py`` file. The test runner looks for any subclass of :class:"
"`unittest.TestCase` in this module."
msgstr ""

# ba7e2bfef40b442db5feede31a638df3
#: ../../topics/testing/overview.txt:55
msgid ""
"A file called ``tests.py`` in the application directory -- i.e., the "
"directory that holds ``models.py``. Again, the test runner looks for any "
"subclass of :class:`unittest.TestCase` in this module."
msgstr ""

# 16cc1bdac7fe43d4893eec27b1e66a64
#: ../../topics/testing/overview.txt:59
msgid ""
"Here is an example which subclasses from :class:`django.test.TestCase`, "
"which is a subclass of :class:`unittest.TestCase` that runs each test inside "
"a transaction to provide isolation::"
msgstr ""

# b5d7810bfb1244598ed801b0dd9bad52
#: ../../topics/testing/overview.txt:78
msgid ""
"When you :ref:`run your tests <running-tests>`, the default behavior of the "
"test utility is to find all the test cases (that is, subclasses of :class:"
"`unittest.TestCase`) in ``models.py`` and ``tests.py``, automatically build "
"a test suite out of those test cases, and run that suite."
msgstr ""

# 4d9cfa9fa881403a98bdb100e31b7f30
#: ../../topics/testing/overview.txt:83
msgid ""
"There is a second way to define the test suite for a module: if you define a "
"function called ``suite()`` in either ``models.py`` or ``tests.py``, the "
"Django test runner will use that function to construct the test suite for "
"that module. This follows the `suggested organization`_ for unit tests. See "
"the Python documentation for more details on how to construct a complex test "
"suite."
msgstr ""

# 055a2bb207a44586b327514ed49b576c
#: ../../topics/testing/overview.txt:90
msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr ""

# bfbcb3fe8cfc4b74aaa7a4e065db9c42
#: ../../topics/testing/overview.txt:96
msgid ""
"If your tests rely on database access such as creating or querying models, "
"be sure to create your test classes as subclasses of :class:`django.test."
"TestCase` rather than :class:`unittest.TestCase`."
msgstr ""

# edc1b061f819457e8b6bae44188f3aac
#: ../../topics/testing/overview.txt:100
msgid ""
"Using :class:`unittest.TestCase` avoids the cost of running each test in a "
"transaction and flushing the database, but if your tests interact with the "
"database their behavior will vary based on the order that the test runner "
"executes them. This can lead to unit tests that pass when run in isolation "
"but fail when run in a suite."
msgstr ""

# 1e6f37d6c727498ba9b46a1c4db141fc
#: ../../topics/testing/overview.txt:109
msgid "Running tests"
msgstr ""

# dfd008ed41e04d57a7344c016210d4a5
#: ../../topics/testing/overview.txt:111
msgid ""
"Once you've written tests, run them using the :djadmin:`test` command of "
"your project's ``manage.py`` utility::"
msgstr ""

# 07d51f909e054845969cbc2d6c022c5f
#: ../../topics/testing/overview.txt:116
msgid ""
"By default, this will run every test in every application in :setting:"
"`INSTALLED_APPS`. If you only want to run tests for a particular "
"application, add the application name to the command line. For example, if "
"your :setting:`INSTALLED_APPS` contains ``'myproject.polls'`` and "
"``'myproject.animals'``, you can run the ``myproject.animals`` unit tests "
"alone with this command::"
msgstr ""

# 8de8e5b4e2d94a5184c172a7d9a9b59d
#: ../../topics/testing/overview.txt:125
msgid "Note that we used ``animals``, not ``myproject.animals``."
msgstr ""

# 72094bd893fe43b69f437bfdf8085f05
#: ../../topics/testing/overview.txt:127
msgid ""
"You can be even *more* specific by naming an individual test case. To run a "
"single test case in an application (for example, the ``AnimalTestCase`` "
"described in the \"Writing unit tests\" section), add the name of the test "
"case to the label on the command line::"
msgstr ""

# 84b40e92aecc4250b2473cca69e82d3e
#: ../../topics/testing/overview.txt:134
msgid ""
"And it gets even more granular than that! To run a *single* test method "
"inside a test case, add the name of the test method to the label::"
msgstr ""

# da9d866a99e048c8847ecac08219f711
#: ../../topics/testing/overview.txt:140
msgid ""
"You can use the same rules if you're using doctests. Django will use the "
"test label as a path to the test method or class that you want to run. If "
"your ``models.py`` or ``tests.py`` has a function with a doctest, or class "
"with a class-level doctest, you can invoke that test by appending the name "
"of the test method or class to the label::"
msgstr ""

# 8be3fa57ed314032b70e2d05da3b3c1e
#: ../../topics/testing/overview.txt:148
msgid ""
"If you want to run the doctest for a specific method in a class, add the "
"name of the method to the label::"
msgstr ""

# 4628e2ba543844cd86e8544824b02405
#: ../../topics/testing/overview.txt:153
msgid ""
"If you're using a ``__test__`` dictionary to specify doctests for a module, "
"Django will use the label as a key in the ``__test__`` dictionary for "
"defined in ``models.py`` and ``tests.py``."
msgstr ""

# 948a51e0772d41258447269386e28ead
#: ../../topics/testing/overview.txt:157
msgid ""
"If you press ``Ctrl-C`` while the tests are running, the test runner will "
"wait for the currently running test to complete and then exit gracefully. "
"During a graceful exit the test runner will output details of any test "
"failures, report on how many tests were run and how many errors and failures "
"were encountered, and destroy any test databases as usual. Thus pressing "
"``Ctrl-C`` can be very useful if you forget to pass the :djadminopt:`--"
"failfast` option, notice that some tests are unexpectedly failing, and want "
"to get details on the failures without waiting for the full test run to "
"complete."
msgstr ""

# a861319b7cb54b27bb4f371f58368990
#: ../../topics/testing/overview.txt:166
msgid ""
"If you do not want to wait for the currently running test to finish, you can "
"press ``Ctrl-C`` a second time and the test run will halt immediately, but "
"not gracefully. No details of the tests run before the interruption will be "
"reported, and any test databases created by the run will not be destroyed."
msgstr ""

# 1b1c9ff5c85646778203ca785ebd4e42
#: ../../topics/testing/overview.txt:171
msgid "Test with warnings enabled"
msgstr ""

# be42711e0b28437a9d3bb2173491b995
#: ../../topics/testing/overview.txt:173
msgid ""
"It's a good idea to run your tests with Python warnings enabled: ``python -"
"Wall manage.py test``. The ``-Wall`` flag tells Python to display "
"deprecation warnings. Django, like many other Python libraries, uses these "
"warnings to flag when features are going away. It also might flag areas in "
"your code that aren't strictly wrong but could benefit from a better "
"implementation."
msgstr ""

# e9094ab340f74089bf78dfe7233eee2e
#: ../../topics/testing/overview.txt:183
msgid "The test database"
msgstr ""

# bcbedd91d8e14071bcf65d4d0e3d3c17
#: ../../topics/testing/overview.txt:185
msgid ""
"Tests that require a database (namely, model tests) will not use your \"real"
"\" (production) database. Separate, blank databases are created for the "
"tests."
msgstr ""

# 1fa63eaca401452d90ddb01f23ccae8d
#: ../../topics/testing/overview.txt:188
msgid ""
"Regardless of whether the tests pass or fail, the test databases are "
"destroyed when all the tests have been executed."
msgstr ""

# 681e9464ca504b228d5d1da037e4a21e
#: ../../topics/testing/overview.txt:191
msgid ""
"By default the test databases get their names by prepending ``test_`` to the "
"value of the :setting:`NAME` settings for the databases defined in :setting:"
"`DATABASES`. When using the SQLite database engine the tests will by default "
"use an in-memory database (i.e., the database will be created in memory, "
"bypassing the filesystem entirely!). If you want to use a different database "
"name, specify :setting:`TEST_NAME` in the dictionary for any given database "
"in :setting:`DATABASES`."
msgstr ""

# 63a8f02d1ac84e1db4d1db1792ca50ef
#: ../../topics/testing/overview.txt:200
msgid ""
"Aside from using a separate database, the test runner will otherwise use all "
"of the same database settings you have in your settings file: :setting:"
"`ENGINE <DATABASE-ENGINE>`, :setting:`USER`, :setting:`HOST`, etc. The test "
"database is created by the user specified by :setting:`USER`, so you'll need "
"to make sure that the given user account has sufficient privileges to create "
"a new database on the system."
msgstr ""

# f09ba33856074b74a36748b129039e93
#: ../../topics/testing/overview.txt:207
msgid ""
"For fine-grained control over the character encoding of your test database, "
"use the :setting:`TEST_CHARSET` option. If you're using MySQL, you can also "
"use the :setting:`TEST_COLLATION` option to control the particular collation "
"used by the test database. See the :doc:`settings documentation </ref/"
"settings>` for details of these advanced settings."
msgstr ""

# 226903371c524a6086507489d2802373
#: ../../topics/testing/overview.txt:214
msgid "Finding data from your production database when running tests?"
msgstr ""

# e83ea617e9d941ef9b8e2eac2afbaed2
#: ../../topics/testing/overview.txt:216
msgid ""
"If your code attempts to access the database when its modules are compiled, "
"this will occur *before* the test database is set up, with potentially "
"unexpected results. For example, if you have a database query in module-"
"level code and a real database exists, production data could pollute your "
"tests. *It is a bad idea to have such import-time database queries in your "
"code* anyway - rewrite your code so that it doesn't do this."
msgstr ""

# 95ab99ae8b914869bf6261fa859612bd
#: ../../topics/testing/overview.txt:225
msgid ""
"The :ref:`advanced multi-db testing topics <topics-testing-advanced-"
"multidb>`."
msgstr ""

# e496fc2d81da401ba7871628d3b2388c
#: ../../topics/testing/overview.txt:228
msgid "Order in which tests are executed"
msgstr ""

# 67c8a4b5eb1f4d08adf94e8d93133a24
#: ../../topics/testing/overview.txt:230
msgid ""
"In order to guarantee that all ``TestCase`` code starts with a clean "
"database, the Django test runner reorders tests in the following way:"
msgstr ""

# d3b30169081948baac32ae3d412acc57
#: ../../topics/testing/overview.txt:233
msgid ""
"First, all unittests (including :class:`unittest.TestCase`, :class:`~django."
"test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django."
"test.TransactionTestCase`) are run with no particular ordering guaranteed "
"nor enforced among them."
msgstr ""

# a81db22adfc34b9c8d86072646222df2
#: ../../topics/testing/overview.txt:238
msgid ""
"Then any other tests (e.g. doctests) that may alter the database without "
"restoring it to its original state are run."
msgstr ""

# 68171941145a4081af66c3532bed5225
#: ../../topics/testing/overview.txt:248
msgid ""
"The new ordering of tests may reveal unexpected dependencies on test case "
"ordering. This is the case with doctests that relied on state left in the "
"database by a given :class:`~django.test.TransactionTestCase` test, they "
"must be updated to be able to run independently."
msgstr ""

# ee93ac1389fd4ab8b49b7a84070e453d
#: ../../topics/testing/overview.txt:254
msgid "Other test conditions"
msgstr ""

# 56b0f01ab0c24d71ae5405838e1cb23f
#: ../../topics/testing/overview.txt:256
msgid ""
"Regardless of the value of the :setting:`DEBUG` setting in your "
"configuration file, all Django tests run with :setting:`DEBUG`\\=False. This "
"is to ensure that the observed output of your code matches what will be seen "
"in a production setting."
msgstr ""

# eae2b12a83404de0a1527538d9939912
#: ../../topics/testing/overview.txt:261
msgid ""
"Caches are not cleared after each test, and running \"manage.py test fooapp"
"\" can insert data from the tests into the cache of a live system if you run "
"your tests in production because, unlike databases, a separate \"test cache"
"\" is not used. This behavior `may change`_ in the future."
msgstr ""

# 596cbc83a7e74c4eb5979d7da63302ff
#: ../../topics/testing/overview.txt:269
msgid "Understanding the test output"
msgstr ""

# edd63bae2db74d44a8f75c87c430af88
#: ../../topics/testing/overview.txt:271
msgid ""
"When you run your tests, you'll see a number of messages as the test runner "
"prepares itself. You can control the level of detail of these messages with "
"the ``verbosity`` option on the command line::"
msgstr ""

# 074efedd66544561b5fcce12d4afa06c
#: ../../topics/testing/overview.txt:281
msgid ""
"This tells you that the test runner is creating a test database, as "
"described in the previous section."
msgstr ""

# 1c7a75ed2a004b94b34ef124c3847a48
#: ../../topics/testing/overview.txt:284
msgid ""
"Once the test database has been created, Django will run your tests. If "
"everything goes well, you'll see something like this::"
msgstr ""

# f2d55d3cad384e05bebfa8f1dd4f5842
#: ../../topics/testing/overview.txt:292
msgid ""
"If there are test failures, however, you'll see full details about which "
"tests failed::"
msgstr ""

# 063cc61a305e4a1c94902ecc07f9a98f
#: ../../topics/testing/overview.txt:318
msgid ""
"A full explanation of this error output is beyond the scope of this "
"document, but it's pretty intuitive. You can consult the documentation of "
"Python's :mod:`unittest` library for details."
msgstr ""

# 568a3238c7fe461d92c6aab06ebc6a7b
#: ../../topics/testing/overview.txt:322
msgid ""
"Note that the return code for the test-runner script is 1 for any number of "
"failed and erroneous tests. If all the tests pass, the return code is 0. "
"This feature is useful if you're using the test-runner script in a shell "
"script and need to test for success or failure at that level."
msgstr ""

# aed0a07126f748d0a81fdc004d12d62d
#: ../../topics/testing/overview.txt:328
msgid "Speeding up the tests"
msgstr ""

# 0e4b894b8fb24bc98643cc817b5994e9
#: ../../topics/testing/overview.txt:330
msgid ""
"In recent versions of Django, the default password hasher is rather slow by "
"design. If during your tests you are authenticating many users, you may want "
"to use a custom settings file and set the :setting:`PASSWORD_HASHERS` "
"setting to a faster hashing algorithm::"
msgstr ""

# cd92fea6a1904958b0dadcd5dfbf2a0e
#: ../../topics/testing/overview.txt:339
msgid ""
"Don't forget to also include in :setting:`PASSWORD_HASHERS` any hashing "
"algorithm used in fixtures, if any."
msgstr ""

# b705485ca660400fa50095797b6f8c43
#: ../../topics/testing/overview.txt:343
msgid "Testing tools"
msgstr ""

# 8a4662f9c20541ebb87fe2e28db13842
#: ../../topics/testing/overview.txt:345
msgid ""
"Django provides a small set of tools that come in handy when writing tests."
msgstr ""

# c0000e2142cd4fca9827f219afc3710a
#: ../../topics/testing/overview.txt:350
msgid "The test client"
msgstr ""

# c82aa84b263b42a08c64f6b08b54b14e
#: ../../topics/testing/overview.txt:355
msgid ""
"The test client is a Python class that acts as a dummy Web browser, allowing "
"you to test your views and interact with your Django-powered application "
"programmatically."
msgstr ""

# 08b31618d7a54c22b5674fda427e4fac
#: ../../topics/testing/overview.txt:359
msgid "Some of the things you can do with the test client are:"
msgstr ""

# 441b4c69061b4a8783045ce9fb989876
#: ../../topics/testing/overview.txt:361
msgid ""
"Simulate GET and POST requests on a URL and observe the response -- "
"everything from low-level HTTP (result headers and status codes) to page "
"content."
msgstr ""

# 0f41ba10004442679f2f1bd7ca68ec90
#: ../../topics/testing/overview.txt:365
msgid ""
"See the chain of redirects (if any) and check the URL and status code at "
"each step."
msgstr ""

# 2bd3f40948bd45bd8e31f916fbd44f10
#: ../../topics/testing/overview.txt:367
msgid ""
"Test that a given request is rendered by a given Django template, with a "
"template context that contains certain values."
msgstr ""

# caf122bb5a294b8aa10883b8b380069f
#: ../../topics/testing/overview.txt:370
msgid ""
"Note that the test client is not intended to be a replacement for Selenium_ "
"or other \"in-browser\" frameworks. Django's test client has a different "
"focus. In short:"
msgstr ""

# f784bd7be44b4c6db03ecc4131a301e1
#: ../../topics/testing/overview.txt:375
msgid ""
"Use Django's test client to establish that the correct template is being "
"rendered and that the template is passed the correct context data."
msgstr ""

# a782a638ba6f492c97a6309e1942bf58
#: ../../topics/testing/overview.txt:377
msgid ""
"Use in-browser frameworks like Selenium_ to test *rendered* HTML and the "
"*behavior* of Web pages, namely JavaScript functionality. Django also "
"provides special support for those frameworks; see the section on :class:"
"`~django.test.LiveServerTestCase` for more details."
msgstr ""

# 46ba398a4bcd4cc28b5e7894e7d22b87
#: ../../topics/testing/overview.txt:382
msgid "A comprehensive test suite should use a combination of both test types."
msgstr ""

# 992353be2071482cbf05c330c54e7518
#: ../../topics/testing/overview.txt:385
msgid "Overview and a quick example"
msgstr ""

# 8d45de5b3fa741cab4b273e39fa9a014
#: ../../topics/testing/overview.txt:387
msgid ""
"To use the test client, instantiate ``django.test.client.Client`` and "
"retrieve Web pages::"
msgstr ""

# 5585b306edd34a779abc6f444bed1425
#: ../../topics/testing/overview.txt:399
msgid ""
"As this example suggests, you can instantiate ``Client`` from within a "
"session of the Python interactive interpreter."
msgstr ""

# 4c1a7566765d4b5b816953d16dca9a23
#: ../../topics/testing/overview.txt:402
msgid "Note a few important things about how the test client works:"
msgstr ""

# 47f1ab59b7d949c48149e7c0b26f9850
#: ../../topics/testing/overview.txt:404
msgid ""
"The test client does *not* require the Web server to be running. In fact, it "
"will run just fine with no Web server running at all! That's because it "
"avoids the overhead of HTTP and deals directly with the Django framework. "
"This helps make the unit tests run quickly."
msgstr ""

# 1dcc8a7ccb5344b1a6dee9ad3798ec07
#: ../../topics/testing/overview.txt:409
msgid ""
"When retrieving pages, remember to specify the *path* of the URL, not the "
"whole domain. For example, this is correct::"
msgstr ""

# 65f5353380824ae1a579fe2e461768f2
#: ../../topics/testing/overview.txt:414
msgid "This is incorrect::"
msgstr ""

# 18edce6d74c44a098d8fcbbf8255a951
#: ../../topics/testing/overview.txt:418
msgid ""
"The test client is not capable of retrieving Web pages that are not powered "
"by your Django project. If you need to retrieve other Web pages, use a "
"Python standard library module such as :mod:`urllib` or :mod:`urllib2`."
msgstr ""

# c1f98767851a4129917bb1e117583113
#: ../../topics/testing/overview.txt:423
msgid ""
"To resolve URLs, the test client uses whatever URLconf is pointed-to by "
"your :setting:`ROOT_URLCONF` setting."
msgstr ""

# 9806403bb47144a19218dfc2edd21d28
#: ../../topics/testing/overview.txt:426
msgid ""
"Although the above example would work in the Python interactive interpreter, "
"some of the test client's functionality, notably the template-related "
"functionality, is only available *while tests are running*."
msgstr ""

# ae753afb95f748dca3f299a098939c7d
#: ../../topics/testing/overview.txt:431
msgid ""
"The reason for this is that Django's test runner performs a bit of black "
"magic in order to determine which template was loaded by a given view. This "
"black magic (essentially a patching of Django's template system in memory) "
"only happens during test running."
msgstr ""

# 6e6ba228ef1f4128b5d477879a7dc70b
#: ../../topics/testing/overview.txt:436
msgid ""
"By default, the test client will disable any CSRF checks performed by your "
"site."
msgstr ""

# 9395eba72c524ebf99ab384e4f169f42
#: ../../topics/testing/overview.txt:439
msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks. To do "
"this, pass in the ``enforce_csrf_checks`` argument when you construct your "
"client::"
msgstr ""

# fbbaaac8416341d2814061df14a4da24
#: ../../topics/testing/overview.txt:449
msgid "Making requests"
msgstr ""

# 3805217f098c4403ad77e784bec23730
#: ../../topics/testing/overview.txt:451
msgid "Use the ``django.test.client.Client`` class to make requests."
msgstr ""

# a7725b543e134ae0a5364fd73dfea729
#: ../../topics/testing/overview.txt:455
msgid ""
"It requires no arguments at time of construction. However, you can use "
"keywords arguments to specify some default headers. For example, this will "
"send a ``User-Agent`` HTTP header in each request::"
msgstr ""

# 147536e0e4ef4bce81490761c406c644
#: ../../topics/testing/overview.txt:461
msgid ""
"The values from the ``extra`` keywords arguments passed to :meth:`~django."
"test.client.Client.get()`, :meth:`~django.test.client.Client.post()`, etc. "
"have precedence over the defaults passed to the class constructor."
msgstr ""

# a6c7dcf0c11d4cd18e2bb4af921c84a6
#: ../../topics/testing/overview.txt:466
msgid ""
"The ``enforce_csrf_checks`` argument can be used to test CSRF protection "
"(see above)."
msgstr ""

# 2ac0f504b5f4453b82e2a5baf7b9baeb
#: ../../topics/testing/overview.txt:469
msgid ""
"Once you have a ``Client`` instance, you can call any of the following "
"methods:"
msgstr ""

# 58ed5290a384443bbd28dd1c76e100f4
#: ../../topics/testing/overview.txt:475
msgid ""
"Makes a GET request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# 2bbe6a1fae3c42478c461cbc2cc6512b
#: ../../topics/testing/overview.txt:478
msgid ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data "
"payload. For example::"
msgstr ""

# 3b8db8f8d591423791b0e49e8f6b8331
#: ../../topics/testing/overview.txt:484
msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

# 7788f87f33d845b1b5c7907d79eedcde
#: ../../topics/testing/overview.txt:488
msgid ""
"The ``extra`` keyword arguments parameter can be used to specify headers to "
"be sent in the request. For example::"
msgstr ""

# d9eaa0ec178940dd85efc7e05f5932f5
#: ../../topics/testing/overview.txt:495
msgid ""
"...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, "
"which is a good way to test code paths that use the :meth:`django.http."
"HttpRequest.is_ajax()` method."
msgstr ""

# 5906b85787c44eb9982ff5844481d80b
#: ../../topics/testing/overview.txt:500
msgid "CGI specification"
msgstr ""

# cc5c45bda1ac4257af7c5be2d0be3c73
#: ../../topics/testing/overview.txt:502
msgid ""
"The headers sent via ``**extra`` should follow CGI_ specification. For "
"example, emulating a different \"Host\" header as sent in the HTTP request "
"from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

# e7c34c6d87d64bb8824f89e9966701ca
#: ../../topics/testing/overview.txt:508
msgid ""
"If you already have the GET arguments in URL-encoded form, you can use that "
"encoding instead of using the data argument. For example, the previous GET "
"request could also be posed as::"
msgstr ""

# 0e1e6345927e4656b36008130147672d
#: ../../topics/testing/overview.txt:515
msgid ""
"If you provide a URL with both an encoded GET data and a data argument, the "
"data argument will take precedence."
msgstr ""

# f15e5d010e814d91ad2b2102cab0fabe
# adc998836ac2403684ec26937d47bcdb
#: ../../topics/testing/overview.txt:518 ../../topics/testing/overview.txt:599
msgid ""
"If you set ``follow`` to ``True`` the client will follow any redirects and a "
"``redirect_chain`` attribute will be set in the response object containing "
"tuples of the intermediate urls and status codes."
msgstr ""

# 8db3b5775c934475801eb981dc80d15c
#: ../../topics/testing/overview.txt:522
msgid ""
"If you had a URL ``/redirect_me/`` that redirected to ``/next/``, that "
"redirected to ``/final/``, this is what you'd see::"
msgstr ""

# cecdabbe047f44b1829d2ed41f5033d9
#: ../../topics/testing/overview.txt:531
msgid ""
"Makes a POST request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# 3a625af5fc18488e94ef0892440ceee8
#: ../../topics/testing/overview.txt:534
msgid ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data. "
"For example::"
msgstr ""

# 3f0cd75950fd4002b95072d8046a3750
#: ../../topics/testing/overview.txt:540
msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

# ebe5cd88c72c4ea49462cd062900e2f1
#: ../../topics/testing/overview.txt:544
msgid "...with this POST data::"
msgstr ""

# 01d1b53e18d140cb99442a8810dd3421
#: ../../topics/testing/overview.txt:548
msgid ""
"If you provide ``content_type`` (e.g. :mimetype:`text/xml` for an XML "
"payload), the contents of ``data`` will be sent as-is in the POST request, "
"using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

# a3c91d88dd824283898b5c4157c26261
#: ../../topics/testing/overview.txt:552
msgid ""
"If you don't provide a value for ``content_type``, the values in ``data`` "
"will be transmitted with a content type of :mimetype:`multipart/form-data`. "
"In this case, the key-value pairs in ``data`` will be encoded as a multipart "
"message and used to create the POST data payload."
msgstr ""

# 7979f263adea47dbba2f1ccf98996a5d
#: ../../topics/testing/overview.txt:558
msgid ""
"To submit multiple values for a given key -- for example, to specify the "
"selections for a ``<select multiple>`` -- provide the values as a list or "
"tuple for the required key. For example, this value of ``data`` would submit "
"three selected values for the field named ``choices``::"
msgstr ""

# 9134cec76ede4230934df5d08457dedf
#: ../../topics/testing/overview.txt:565
msgid ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. For example::"
msgstr ""

# 7f3f465e41cc4c72838dfb358a37c311
#: ../../topics/testing/overview.txt:573
msgid ""
"(The name ``attachment`` here is not relevant; use whatever name your file-"
"processing code expects.)"
msgstr ""

# 7b5148bd9ef247efb141cb34b0db3505
#: ../../topics/testing/overview.txt:576
msgid ""
"Note that if you wish to use the same file handle for multiple ``post()`` "
"calls then you will need to manually reset the file pointer between posts. "
"The easiest way to do this is to manually close the file after it has been "
"provided to ``post()``, as demonstrated above."
msgstr ""

# edb64d2f16614af795f057fed3196036
#: ../../topics/testing/overview.txt:582
msgid ""
"You should also ensure that the file is opened in a way that allows the data "
"to be read. If your file contains binary data such as an image, this means "
"you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

# 38745092abea485e91b9d12ce68bfda3
#: ../../topics/testing/overview.txt:587
msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

# 3ca8252667b24683a461a1a67491d356
#: ../../topics/testing/overview.txt:589
msgid ""
"If the URL you request with a POST contains encoded parameters, these "
"parameters will be made available in the request.GET data. For example, if "
"you were to make the request::"
msgstr ""

# c6552e0a3482468ab32a5f7123dabd15
#: ../../topics/testing/overview.txt:595
msgid ""
"... the view handling this request could interrogate request.POST to "
"retrieve the username and password, and could interrogate request.GET to "
"determine if the user was a visitor."
msgstr ""

# 44f52fbf7c1e47218d8eab0e9cb743c9
#: ../../topics/testing/overview.txt:605
msgid ""
"Makes a HEAD request on the provided ``path`` and returns a ``Response`` "
"object. This method works just like :meth:`Client.get`, including the "
"``follow`` and ``extra`` arguments, except it does not return a message body."
msgstr ""

# 058f76321ae242e99a6e31bd9faec21d
#: ../../topics/testing/overview.txt:612
msgid ""
"Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# 6a65beb1cfd8441fb689fd099a3999c1
# 0778304290fe4a7dbd20b02467ec0b9f
# 6faa756bf0f04c6cae7656fb88f35896
#: ../../topics/testing/overview.txt:615 ../../topics/testing/overview.txt:630
#: ../../topics/testing/overview.txt:645
msgid ""
"When ``data`` is provided, it is used as the request body, and a ``Content-"
"Type`` header is set to ``content_type``."
msgstr ""

# 33ce9ffbd5c442bf9292a7571b97117e
# 40df48d8c820404c9bbe80bb90d760ad
# 32a87f0eac4e45d79563d2ce6e75dcc1
#: ../../topics/testing/overview.txt:622 ../../topics/testing/overview.txt:637
#: ../../topics/testing/overview.txt:652
msgid ""
"The ``follow`` and ``extra`` arguments act the same as for :meth:`Client."
"get`."
msgstr ""

# f88db7a4d5eb4b84b60c6a1b0d21f927
#: ../../topics/testing/overview.txt:627
msgid ""
"Makes a PUT request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# dd155ae301fc4d479ab9fca0f5e66a39
#: ../../topics/testing/overview.txt:642
msgid ""
"Makes an DELETE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# a865fc2bee504afbacdd7f9621f70f2b
#: ../../topics/testing/overview.txt:658
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>` "
"and you deal with logging in users, you can use the test client's "
"``login()`` method to simulate the effect of a user logging into the site."
msgstr ""

# 9161d75c90f7472cb755297c63f00073
#: ../../topics/testing/overview.txt:663
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data required to pass any login-based tests that may form part of a "
"view."
msgstr ""

# 7e5ce26ac6f247ccb64ea556fb1ba7d3
#: ../../topics/testing/overview.txt:667
msgid ""
"The format of the ``credentials`` argument depends on which :ref:"
"`authentication backend <authentication-backends>` you're using (which is "
"configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're "
"using the standard authentication backend provided by Django "
"(``ModelBackend``), ``credentials`` should be the user's username and "
"password, provided as keyword arguments::"
msgstr ""

# 0600ea2e00ad493dbe649a4a0dfc0578
#: ../../topics/testing/overview.txt:679
msgid ""
"If you're using a different authentication backend, this method may require "
"different credentials. It requires whichever credentials are required by "
"your backend's ``authenticate()`` method."
msgstr ""

# a13cb96bb2d2490ab0b8617f5bf3aa66
#: ../../topics/testing/overview.txt:683
msgid ""
"``login()`` returns ``True`` if it the credentials were accepted and login "
"was successful."
msgstr ""

# a810011b77b74194a74ccd1fbc95ef89
#: ../../topics/testing/overview.txt:686
msgid ""
"Finally, you'll need to remember to create user accounts before you can use "
"this method. As we explained above, the test runner is executed using a test "
"database, which contains no users by default. As a result, user accounts "
"that are valid on your production site will not work under test conditions. "
"You'll need to create users as part of the test suite -- either manually "
"(using the Django model API) or with a test fixture. Remember that if you "
"want your test user to have a password, you can't set the user's password by "
"setting the password attribute directly -- you must use the :meth:`~django."
"contrib.auth.models.User.set_password()` function to store a correctly "
"hashed password. Alternatively, you can use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper method to create a new user with a "
"correctly hashed password."
msgstr ""

# 4ca3b5d3f9e44750955f35174e7aa90a
#: ../../topics/testing/overview.txt:702
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`, "
"the ``logout()`` method can be used to simulate the effect of a user logging "
"out of your site."
msgstr ""

# b4b1db6cbb8e42809881b9b6bbe30bcc
#: ../../topics/testing/overview.txt:706
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data cleared to defaults. Subsequent requests will appear to come "
"from an AnonymousUser."
msgstr ""

# 3c3e17307de345858849e9bc71c60597
#: ../../topics/testing/overview.txt:711
msgid "Testing responses"
msgstr ""

# ac448bdfb53e4e6984c7360457e9489d
#: ../../topics/testing/overview.txt:713
msgid ""
"The ``get()`` and ``post()`` methods both return a ``Response`` object. This "
"``Response`` object is *not* the same as the ``HttpResponse`` object "
"returned Django views; the test response object has some additional data "
"useful for test code to verify."
msgstr ""

# 8e052ffe4c9147ec87bc91cd3c5e3510
#: ../../topics/testing/overview.txt:718
msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

# 9f7cd31c9a0f438e9de2422ec5d9cb2a
#: ../../topics/testing/overview.txt:724
msgid ""
"The test client that was used to make the request that resulted in the "
"response."
msgstr ""

# cdb9ab8f3ec84cef9fde08a1347c7b5a
#: ../../topics/testing/overview.txt:729
msgid ""
"The body of the response, as a string. This is the final page content as "
"rendered by the view, or any error message."
msgstr ""

# dd331a3c03a148dd91f11752a3e2fbf2
#: ../../topics/testing/overview.txt:734
msgid ""
"The template ``Context`` instance that was used to render the template that "
"produced the response content."
msgstr ""

# 72f94ff488544e20a20890cd31ff475b
#: ../../topics/testing/overview.txt:737
msgid ""
"If the rendered page used multiple templates, then ``context`` will be a "
"list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

# 6c9b5466047047bf926d40f298cb8b64
#: ../../topics/testing/overview.txt:740
msgid ""
"Regardless of the number of templates used during rendering, you can "
"retrieve context values using the ``[]`` operator. For example, the context "
"variable ``name`` could be retrieved using::"
msgstr ""

# 23ece19153fb4d578fb56bc64ba3141f
#: ../../topics/testing/overview.txt:750
msgid "The request data that stimulated the response."
msgstr ""

# ff3796f2773848dd942f3d710b63ada4
#: ../../topics/testing/overview.txt:754
msgid ""
"The HTTP status of the response, as an integer. See :rfc:`2616#section-10` "
"for a full list of HTTP status codes."
msgstr ""

# 61366bbf1dd5420db3cc41b4fd4c8c23
#: ../../topics/testing/overview.txt:759
msgid ""
"A list of ``Template`` instances used to render the final content, in the "
"order they were rendered. For each template in the list, use ``template."
"name`` to get the template's file name, if the template was loaded from a "
"file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

# 815d4a7df2fd4c44bc149cb788b1a7cd
#: ../../topics/testing/overview.txt:765
msgid ""
"You can also use dictionary syntax on the response object to query the value "
"of any settings in the HTTP headers. For example, you could determine the "
"content type of a response using ``response['Content-Type']``."
msgstr ""

# 313989960abd40409a7e4d5cdfbfc7fa
#: ../../topics/testing/overview.txt:772
msgid ""
"If you point the test client at a view that raises an exception, that "
"exception will be visible in the test case. You can then use a standard "
"``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test "
"for exceptions."
msgstr ""

# 4ca7447f93fb44faac818840face2f30
#: ../../topics/testing/overview.txt:776
msgid ""
"The only exceptions that are not visible to the test client are ``Http404``, "
"``PermissionDenied`` and ``SystemExit``. Django catches these exceptions "
"internally and converts them into the appropriate HTTP response codes. In "
"these cases, you can check ``response.status_code`` in your test."
msgstr ""

# dd58f69621b742f2bbdbfb218a6f4ccf
#: ../../topics/testing/overview.txt:782
msgid "Persistent state"
msgstr ""

# 774ec9928397497fbdb43bfaca3a69ad
#: ../../topics/testing/overview.txt:784
msgid ""
"The test client is stateful. If a response returns a cookie, then that "
"cookie will be stored in the test client and sent with all subsequent "
"``get()`` and ``post()`` requests."
msgstr ""

# d3254e689d284470ab49d200ed72d7ae
#: ../../topics/testing/overview.txt:788
msgid ""
"Expiration policies for these cookies are not followed. If you want a cookie "
"to expire, either delete it manually or create a new ``Client`` instance "
"(which will effectively delete all cookies)."
msgstr ""

# e745594287c44491ba2f4d793e889954
#: ../../topics/testing/overview.txt:792
msgid ""
"A test client has two attributes that store persistent state information. "
"You can access these properties as part of a test condition."
msgstr ""

# 22c8308cc45c4ea39795beceda70432b
#: ../../topics/testing/overview.txt:797
msgid ""
"A Python :class:`~Cookie.SimpleCookie` object, containing the current values "
"of all the client cookies. See the documentation of the :mod:`Cookie` module "
"for more."
msgstr ""

# 29f5160533ba49ddb6ef86b1ed93f2df
#: ../../topics/testing/overview.txt:803
msgid ""
"A dictionary-like object containing session information. See the :doc:"
"`session documentation</topics/http/sessions>` for full details."
msgstr ""

# 74f882e3560849de864524a9e5616ab7
#: ../../topics/testing/overview.txt:806
msgid ""
"To modify the session and then save it, it must be stored in a variable "
"first (because a new ``SessionStore`` is created every time this property is "
"accessed)::"
msgstr ""

# 2d6fb79f7157454294f3fa522958e8a3
#: ../../topics/testing/overview.txt:818
msgid "The following is a simple unit test using the test client::"
msgstr ""

# be49571b44724b059bd83991848cc3de
#: ../../topics/testing/overview.txt:840
msgid ":class:`django.test.client.RequestFactory`"
msgstr ""

# e7ae045f8df040bda0f35d45bd2a0ba9
#: ../../topics/testing/overview.txt:843
msgid "Provided test case classes"
msgstr ""

# bea8720636794f838501095e3782f7b4
#: ../../topics/testing/overview.txt:847
msgid ""
"Normal Python unit test classes extend a base class of :class:`unittest."
"TestCase`. Django provides a few extensions of this base class:"
msgstr ""

# 7678c15fc2e0436f9b3df8e6663c463e
#: ../../topics/testing/overview.txt:0
msgid "Hierarchy of Django unit testing classes"
msgstr ""

# 9c3907e658a94fc2bf6f2b8def5fa484
#: ../../topics/testing/overview.txt:857
msgid ""
"Regardless of the version of Python you're using, if you've installed "
"``unittest2``, ``django.utils.unittest`` will point to that library."
msgstr ""

# 9fdfb08e7a5249c4a60c9bcebfb70353
#: ../../topics/testing/overview.txt:861
msgid "SimpleTestCase"
msgstr ""

# 2f292b51512b4ef98dc32d1ba3647c7b
#: ../../topics/testing/overview.txt:867
msgid ""
"A very thin subclass of :class:`unittest.TestCase`, it extends it with some "
"basic functionality like:"
msgstr ""

# 5c503b8903cc4db4aea146299fe28293
#: ../../topics/testing/overview.txt:870
msgid "Saving and restoring the Python warning machinery state."
msgstr ""

# 8d1802955cc148fb937511ee4a216c76
#: ../../topics/testing/overview.txt:871
msgid ""
"Checking that a callable :meth:`raises a certain exception <SimpleTestCase."
"assertRaisesMessage>`."
msgstr ""

# 3f7b898ad7464762b4c7dcd33dd845cb
#: ../../topics/testing/overview.txt:872
msgid ""
":meth:`Testing form field rendering <SimpleTestCase.assertFieldOutput>`."
msgstr ""

# e14c6f662c7741a4b9f22a152a2a9f8d
#: ../../topics/testing/overview.txt:873
msgid ""
"Testing server :ref:`HTML responses for the presence/lack of a given "
"fragment <assertions>`."
msgstr ""

# 8729c0f626b84063a99c3e7b3d38e41c
#: ../../topics/testing/overview.txt:874
msgid ""
"The ability to run tests with :ref:`modified settings <overriding-settings>`"
msgstr ""

# 0d217653e606456fa795cd62b718f861
#: ../../topics/testing/overview.txt:876
msgid ""
"If you need any of the other more complex and heavyweight Django-specific "
"features like:"
msgstr ""

# c07979259fea4a1aa9dc4908abab02f1
#: ../../topics/testing/overview.txt:879
msgid "Using the :attr:`~TestCase.client` :class:`~django.test.client.Client`."
msgstr ""

# a25b8d9bda4047da950f56752f93cf2c
#: ../../topics/testing/overview.txt:880
msgid "Testing or using the ORM."
msgstr ""

# 4565274bbad14732a54398906cf4a69c
#: ../../topics/testing/overview.txt:881
msgid "Database :attr:`~TestCase.fixtures`."
msgstr ""

# 95cace2f44d84784b1b213ad58de7dea
#: ../../topics/testing/overview.txt:882
msgid "Custom test-time :attr:`URL maps <TestCase.urls>`."
msgstr ""

# a535ac19cf3a4519a5daf4037715b9af
#: ../../topics/testing/overview.txt:883
msgid ""
"Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""

# 4c49aac79b7e4ec9aec4f058f60121cf
#: ../../topics/testing/overview.txt:884
msgid "The remaining specialized :ref:`assert* <assertions>` methods."
msgstr ""

# 385cae75d051425dbdee8c07a2f0cdf4
#: ../../topics/testing/overview.txt:886
msgid ""
"then you should use :class:`~django.test.TransactionTestCase` or :class:"
"`~django.test.TestCase` instead."
msgstr ""

# da964dbadc964fd3a0faf5db4bcf135f
#: ../../topics/testing/overview.txt:889
msgid "``SimpleTestCase`` inherits from ``django.utils.unittest.TestCase``."
msgstr ""

# de09d69fc00e40feaa21c8e2e699f499
#: ../../topics/testing/overview.txt:892
msgid "TransactionTestCase"
msgstr ""

# 716177286dfc400da1242b15d19634d8
#: ../../topics/testing/overview.txt:896
msgid ""
"Django ``TestCase`` classes make use of database transaction facilities, if "
"available, to speed up the process of resetting the database to a known "
"state at the beginning of each test. A consequence of this, however, is that "
"the effects of transaction commit and rollback cannot be tested by a Django "
"``TestCase`` class. If your test requires testing of such transactional "
"behavior, you should use a Django ``TransactionTestCase``."
msgstr ""

# d619aca0813142b4a48f89d07c35cc03
#: ../../topics/testing/overview.txt:903
msgid ""
"``TransactionTestCase`` and ``TestCase`` are identical except for the manner "
"in which the database is reset to a known state and the ability for test "
"code to test the effects of commit and rollback:"
msgstr ""

# 1dd76d1c313045a499fe5d347296f6d8
#: ../../topics/testing/overview.txt:907
msgid ""
"A ``TransactionTestCase`` resets the database after the test runs by "
"truncating all tables. A ``TransactionTestCase`` may call commit and "
"rollback and observe the effects of these calls on the database."
msgstr ""

# 8d8a021bf7e1461590e948339184af03
#: ../../topics/testing/overview.txt:911
msgid ""
"A ``TestCase``, on the other hand, does not truncate tables after a test. "
"Instead, it encloses the test code in a database transaction that is rolled "
"back at the end of the test. Both explicit commits like ``transaction."
"commit()`` and implicit ones that may be caused by ``Model.save()`` are "
"replaced with a ``nop`` operation. This guarantees that the rollback at the "
"end of the test restores the database to its initial state."
msgstr ""

# b1c16a5a505b4a66b9d93d41074b6273
#: ../../topics/testing/overview.txt:919
msgid ""
"When running on a database that does not support rollback (e.g. MySQL with "
"the MyISAM storage engine), ``TestCase`` falls back to initializing the "
"database by truncating tables and reloading initial data."
msgstr ""

# a9ba89bd02b748f9bb130c59d7472fe4
#: ../../topics/testing/overview.txt:925
msgid ""
"While ``commit`` and ``rollback`` operations still *appear* to work when "
"used in ``TestCase``, no actual commit or rollback will be performed by the "
"database. This can cause your tests to pass or fail unexpectedly. Always use "
"``TransactionalTestCase`` when testing transactional behavior."
msgstr ""

# e22c19d578af46f6be30ca546678ddac
#: ../../topics/testing/overview.txt:934
msgid ""
"Prior to 1.5, ``TransactionTestCase`` flushed the database tables *before* "
"each test. In Django 1.5, this is instead done *after* the test has been run."
msgstr ""

# 90074d18418f490ead67f2446e08c51a
#: ../../topics/testing/overview.txt:937
msgid ""
"When the flush took place before the test, it was guaranteed that primary "
"key values started at one in :class:`~django.test.TransactionTestCase` tests."
msgstr ""

# 27eef4f6d1f146cba596d9d9eed2977d
#: ../../topics/testing/overview.txt:941
msgid ""
"Tests should not depend on this behaviour, but for legacy tests that do, "
"the :attr:`~TransactionTestCase.reset_sequences` attribute can be used until "
"the test has been properly updated."
msgstr ""

# 19fd6dff690f47d79ed8bb469551ca29
#: ../../topics/testing/overview.txt:949
msgid ""
"``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase`."
msgstr ""

# d9a73ec4eae24daab1c33b0a3effee63
#: ../../topics/testing/overview.txt:955
msgid ""
"Setting ``reset_sequences = True`` on a ``TransactionTestCase`` will make "
"sure sequences are always reset before the test run::"
msgstr ""

# 5aeb60999067419d88a80759d7b7f591
#: ../../topics/testing/overview.txt:966
msgid ""
"Unless you are explicitly testing primary keys sequence numbers, it is "
"recommended that you do not hard code primary key values in tests."
msgstr ""

# ff445f8def0e4871a3fdcb7dab916d43
#: ../../topics/testing/overview.txt:969
msgid ""
"Using ``reset_sequences = True`` will slow down the test, since the primary "
"key reset is an relatively expensive database operation."
msgstr ""

# 3d0470e37ee547ddb06e7902a47b0f51
#: ../../topics/testing/overview.txt:973
msgid "TestCase"
msgstr ""

# b8fd589eec6647639bd9558c4bc5bc29
#: ../../topics/testing/overview.txt:977
msgid ""
"This class provides some additional capabilities that can be useful for "
"testing Web sites."
msgstr ""

# 07103d52c78841bb966dc03f8b8bbc9d
#: ../../topics/testing/overview.txt:980
msgid ""
"Converting a normal :class:`unittest.TestCase` to a Django :class:`TestCase` "
"is easy: Just change the base class of your test from ``'unittest."
"TestCase'`` to ``'django.test.TestCase'``. All of the standard Python unit "
"test functionality will continue to be available, but it will be augmented "
"with some useful additions, including:"
msgstr ""

# aabcd5d537b644069dea4ca3509acd91
#: ../../topics/testing/overview.txt:986
msgid "Automatic loading of fixtures."
msgstr ""

# 2b6154b37a2e476bbed75027d41a3425
#: ../../topics/testing/overview.txt:988
msgid "Wraps each test in a transaction."
msgstr ""

# 0aa7c6f65f104587b3d6c55209c45e38
#: ../../topics/testing/overview.txt:990
msgid "Creates a TestClient instance."
msgstr ""

# b03564c83fb54cd5b1a6d6daff28c3e6
#: ../../topics/testing/overview.txt:992
msgid ""
"Django-specific assertions for testing for things like redirection and form "
"errors."
msgstr ""

# e3de1d7cb7c3415297f25e7d0b038c5c
#: ../../topics/testing/overview.txt:999
msgid "``TestCase`` inherits from :class:`~django.test.TransactionTestCase`."
msgstr ""

# e983f507978b4c7ea64490d22ef442ec
#: ../../topics/testing/overview.txt:1004
msgid "LiveServerTestCase"
msgstr ""

# c099538f4b874055b1b6724149c30cf2
#: ../../topics/testing/overview.txt:1010
msgid ""
"``LiveServerTestCase`` does basically the same as :class:`~django.test."
"TransactionTestCase` with one extra feature: it launches a live Django "
"server in the background on setup, and shuts it down on teardown. This "
"allows the use of automated test clients other than the :ref:`Django dummy "
"client <test-client>` such as, for example, the Selenium_ client, to execute "
"a series of functional tests inside a browser and simulate a real user's "
"actions."
msgstr ""

# 04b27ac2f90f494181a0d9870eb88727
#: ../../topics/testing/overview.txt:1018
msgid ""
"By default the live server's address is ``'localhost:8081'`` and the full "
"URL can be accessed during the tests with ``self.live_server_url``. If you'd "
"like to change the default address (in the case, for example, where the 8081 "
"port is already taken) then you may pass a different one to the :djadmin:"
"`test` command via the :djadminopt:`--liveserver` option, for example:"
msgstr ""

# bc04e78cfae84e4f86ff6a97e5cbe665
#: ../../topics/testing/overview.txt:1028
msgid ""
"Another way of changing the default server address is by setting the "
"`DJANGO_LIVE_TEST_SERVER_ADDRESS` environment variable somewhere in your "
"code (for example, in a :ref:`custom test runner<topics-testing-"
"test_runner>`):"
msgstr ""

# ad9877b899c04aaba965c2c615696402
#: ../../topics/testing/overview.txt:1037
msgid ""
"In the case where the tests are run by multiple processes in parallel (for "
"example, in the context of several simultaneous `continuous integration`_ "
"builds), the processes will compete for the same address, and therefore your "
"tests might randomly fail with an \"Address already in use\" error. To avoid "
"this problem, you can pass a comma-separated list of ports or ranges of "
"ports (at least as many as the number of potential parallel processes). For "
"example:"
msgstr ""

# b74aebcbfb4a4c79957cdc058d9d5514
#: ../../topics/testing/overview.txt:1048
msgid ""
"Then, during test execution, each new live test server will try every "
"specified port until it finds one that is free and takes it."
msgstr ""

# d281999e8f6d452ca89428cbac2da7e9
#: ../../topics/testing/overview.txt:1053
msgid ""
"To demonstrate how to use ``LiveServerTestCase``, let's write a simple "
"Selenium test. First of all, you need to install the `selenium package`_ "
"into your Python path:"
msgstr ""

# 2d644faaf1ec43e0a11b989530ce4b16
#: ../../topics/testing/overview.txt:1061
msgid ""
"Then, add a ``LiveServerTestCase``-based test to your app's tests module "
"(for example: ``myapp/tests.py``). The code for this test may look as "
"follows:"
msgstr ""

# 1a84efd5426f4f1cb00951c7bcbe41a2
#: ../../topics/testing/overview.txt:1090
msgid "Finally, you may run the test as follows:"
msgstr ""

# 5d9d045e15574db29c5ce859056c5195
#: ../../topics/testing/overview.txt:1096
msgid ""
"This example will automatically open Firefox then go to the login page, "
"enter the credentials and press the \"Log in\" button. Selenium offers other "
"drivers in case you do not have Firefox installed or wish to use another "
"browser. The example above is just a tiny fraction of what the Selenium "
"client can do; check out the `full reference`_ for more details."
msgstr ""

# aeddeeeba7064c7d88a89dd66b652ac2
#: ../../topics/testing/overview.txt:1109
msgid ""
"``LiveServerTestCase`` makes use of the :doc:`staticfiles contrib app </"
"howto/static-files/index>` so you'll need to have your project configured "
"accordingly (in particular by setting :setting:`STATIC_URL`)."
msgstr ""

# 7692f537477b40f38622fdd0f76daa28
#: ../../topics/testing/overview.txt:1115
msgid ""
"When using an in-memory SQLite database to run the tests, the same database "
"connection will be shared by two threads in parallel: the thread in which "
"the live server is run and the thread in which the test case is run. It's "
"important to prevent simultaneous database queries via this shared "
"connection by the two threads, as that may sometimes randomly cause the "
"tests to fail. So you need to ensure that the two threads don't access the "
"database at the same time. In particular, this means that in some cases (for "
"example, just after clicking a link or submitting a form), you might need to "
"check that a response is received by Selenium and that the next page is "
"loaded before proceeding with further test execution. Do this, for example, "
"by making Selenium wait until the ``<body>`` HTML tag is found in the "
"response (requires Selenium > 2.13):"
msgstr ""

# 7e19f3d0f81e400b8838703557b7a096
#: ../../topics/testing/overview.txt:1139
msgid ""
"The tricky thing here is that there's really no such thing as a \"page load,"
"\" especially in modern Web apps that generate HTML dynamically after the "
"server generates the initial document. So, simply checking for the presence "
"of ``<body>`` in the response might not necessarily be appropriate for all "
"use cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ "
"for more information."
msgstr ""

# 249d3e1c51fa4d61a947be13795058c4
#: ../../topics/testing/overview.txt:1150
msgid "Test cases features"
msgstr ""

# 133e655ed9c74688a834e08a4bcf6f89
#: ../../topics/testing/overview.txt:1153
msgid "Default test client"
msgstr ""

# c250e2f9b1c643b78b35c21453804332
#: ../../topics/testing/overview.txt:1157
msgid ""
"Every test case in a ``django.test.TestCase`` instance has access to an "
"instance of a Django test client. This client can be accessed as ``self."
"client``. This client is recreated for each test, so you don't have to worry "
"about state (such as cookies) carrying over from one test to another."
msgstr ""

# 3ddce3e9ebf14840bc88af36562e6deb
#: ../../topics/testing/overview.txt:1162
msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

# e12676b1daf646c895a839b06440eb1e
#: ../../topics/testing/overview.txt:1178
msgid "...you can just refer to ``self.client``, like so::"
msgstr ""

# 1d1f47f6ab884518a525b239eabc611e
#: ../../topics/testing/overview.txt:1192
msgid "Customizing the test client"
msgstr ""

# 0fa6108acd8e4e0a854bfcf282d16f2c
#: ../../topics/testing/overview.txt:1196
msgid ""
"If you want to use a different ``Client`` class (for example, a subclass "
"with customized behavior), use the :attr:`~TestCase.client_class` class "
"attribute::"
msgstr ""

# a60a07a3017749a5a399129210e7711b
#: ../../topics/testing/overview.txt:1216
msgid "Fixture loading"
msgstr ""

# 82f2147a8fab43468910dd0fc63adf76
#: ../../topics/testing/overview.txt:1220
msgid ""
"A test case for a database-backed Web site isn't much use if there isn't any "
"data in the database. To make it easy to put test data into the database, "
"Django's custom ``TestCase`` class provides a way of loading **fixtures**."
msgstr ""

# 50cc0eaa148946219b8c5365fa396914
#: ../../topics/testing/overview.txt:1224
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. For example, if your site has user accounts, you might set up a "
"fixture of fake user accounts in order to populate your database during "
"tests."
msgstr ""

# fd51413b759b440880cfc76d4bbff52b
#: ../../topics/testing/overview.txt:1228
msgid ""
"The most straightforward way of creating a fixture is to use the :djadmin:"
"`manage.py dumpdata <dumpdata>` command. This assumes you already have some "
"data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` "
"for more details."
msgstr ""

# e57eeeb9e48943aaab1f86827719ec0b
#: ../../topics/testing/overview.txt:1235
msgid ""
"If you've ever run :djadmin:`manage.py syncdb<syncdb>`, you've already used "
"a fixture without even knowing it! When you call :djadmin:`syncdb` in the "
"database for the first time, Django installs a fixture called "
"``initial_data``. This gives you a way of populating a new database with any "
"initial data, such as a default set of categories."
msgstr ""

# a6c07142dbcd43bea962151465e9d1c1
#: ../../topics/testing/overview.txt:1242
msgid ""
"Fixtures with other names can always be installed manually using the :"
"djadmin:`manage.py loaddata<loaddata>` command."
msgstr ""

# d9917d96a81d423bac00dd1e5d88982d
#: ../../topics/testing/overview.txt:1246
msgid "Initial SQL data and testing"
msgstr ""

# afb6b7e36d8f4fdf98a1c078132abbd3
#: ../../topics/testing/overview.txt:1248
msgid ""
"Django provides a second way to insert initial data into models -- the :ref:"
"`custom SQL hook <initial-sql>`. However, this technique *cannot* be used to "
"provide initial data for testing purposes. Django's test framework flushes "
"the contents of the test database after each test; as a result, any data "
"added using the custom SQL hook will be lost."
msgstr ""

# 46b702d1fb6b4bb08b5422f45974168d
#: ../../topics/testing/overview.txt:1254
msgid ""
"Once you've created a fixture and placed it in a ``fixtures`` directory in "
"one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by "
"specifying a ``fixtures`` class attribute on your :class:`django.test."
"TestCase` subclass::"
msgstr ""

# 6a4852325240450eb321f3733c8dc4ad
#: ../../topics/testing/overview.txt:1273
msgid "Here's specifically what will happen:"
msgstr ""

# 7fd004bc9414452599c6b0d6665a5324
#: ../../topics/testing/overview.txt:1275
msgid ""
"At the start of each test case, before ``setUp()`` is run, Django will flush "
"the database, returning the database to the state it was in directly after :"
"djadmin:`syncdb` was called."
msgstr ""

# 8cec99da34314b1abb7cacd0ea7b57e4
#: ../../topics/testing/overview.txt:1279
msgid ""
"Then, all the named fixtures are installed. In this example, Django will "
"install any JSON fixture named ``mammals``, followed by any fixture named "
"``birds``. See the :djadmin:`loaddata` documentation for more details on "
"defining and installing fixtures."
msgstr ""

# 5e91e3ecbf2b44d593ad2344ba331874
#: ../../topics/testing/overview.txt:1284
msgid ""
"This flush/load procedure is repeated for each test in the test case, so you "
"can be certain that the outcome of a test will not be affected by another "
"test, or by the order of test execution."
msgstr ""

# 2789109ab9484308be5468db06334465
#: ../../topics/testing/overview.txt:1289
msgid "URLconf configuration"
msgstr ""

# a1145cd333f34f2b944b3722bd31de38
#: ../../topics/testing/overview.txt:1293
msgid ""
"If your application provides views, you may want to include tests that use "
"the test client to exercise those views. However, an end user is free to "
"deploy the views in your application at any URL of their choosing. This "
"means that your tests can't rely upon the fact that your views will be "
"available at a particular URL."
msgstr ""

# 01a02e6da3bf4ef1a37d49dd4e3d207f
#: ../../topics/testing/overview.txt:1299
msgid ""
"In order to provide a reliable URL space for your test, ``django.test."
"TestCase`` provides the ability to customize the URLconf configuration for "
"the duration of the execution of a test suite. If your ``TestCase`` instance "
"defines an ``urls`` attribute, the ``TestCase`` will use the value of that "
"attribute as the :setting:`ROOT_URLCONF` for the duration of that test."
msgstr ""

# cac50acb97fe4c0982c6325ecda74c5e
#: ../../topics/testing/overview.txt:1317
msgid ""
"This test case will use the contents of ``myapp.test_urls`` as the URLconf "
"for the duration of the test case."
msgstr ""

# 2da87364067b47928898fe8d5040c1ee
#: ../../topics/testing/overview.txt:1323
msgid "Multi-database support"
msgstr ""

# abe75b5671b74e0ba14df1f72fbd7fd3
#: ../../topics/testing/overview.txt:1327
msgid ""
"Django sets up a test database corresponding to every database that is "
"defined in the :setting:`DATABASES` definition in your settings file. "
"However, a big part of the time taken to run a Django TestCase is consumed "
"by the call to ``flush`` that ensures that you have a clean database at the "
"start of each test run. If you have multiple databases, multiple flushes are "
"required (one for each database), which can be a time consuming activity -- "
"especially if your tests don't need to test multi-database activity."
msgstr ""

# 517736c0edce48a6bd5b386f22f1f0ab
#: ../../topics/testing/overview.txt:1336
msgid ""
"As an optimization, Django only flushes the ``default`` database at the "
"start of each test run. If your setup contains multiple databases, and you "
"have a test that requires every database to be clean, you can use the "
"``multi_db`` attribute on the test suite to request a full flush."
msgstr ""

# 026a404b5fa44a9a9504d9ac106714e2
#: ../../topics/testing/overview.txt:1350
msgid ""
"This test case will flush *all* the test databases before running "
"``testIndexPageView``."
msgstr ""

# 389e8a949971441088e283c657ef53dd
#: ../../topics/testing/overview.txt:1356
msgid "Overriding settings"
msgstr ""

# 97a662307206400bb1b20ddf61a59298
#: ../../topics/testing/overview.txt:1362
msgid ""
"For testing purposes it's often useful to change a setting temporarily and "
"revert to the original value after running the testing code. For this use "
"case Django provides a standard Python context manager (see :pep:`343`) :"
"meth:`~django.test.TestCase.settings`, which can be used like this::"
msgstr ""

# 7a4c2a3fab67451dbd5378f3b65e092f
#: ../../topics/testing/overview.txt:1382
msgid ""
"This example will override the :setting:`LOGIN_URL` setting for the code in "
"the ``with`` block and reset its value to the previous state afterwards."
msgstr ""

# 11ef7fd74e024699a3192bbf3f7688f5
#: ../../topics/testing/overview.txt:1389
msgid ""
"In case you want to override a setting for just one test method or even the "
"whole :class:`~django.test.TestCase` class, Django provides the :func:"
"`~django.test.utils.override_settings` decorator (see :pep:`318`). It's used "
"like this::"
msgstr ""

# bb0f50a70f4a46bfbb454632efe386e7
#: ../../topics/testing/overview.txt:1404
msgid "The decorator can also be applied to test case classes::"
msgstr ""

# 36a524ffa6e7403290bd6ba17963576b
#: ../../topics/testing/overview.txt:1418
msgid ""
"When given a class, the decorator modifies the class directly and returns "
"it; it doesn't create and return a modified copy of it.  So if you try to "
"tweak the above example to assign the return value to a different name than "
"``LoginTestCase``, you may be surprised to find that the original "
"``LoginTestCase`` is still equally affected by the decorator."
msgstr ""

# f4abd3e79e064b02bf0f8b44a2de33aa
#: ../../topics/testing/overview.txt:1425
msgid ""
"When overriding settings, make sure to handle the cases in which your app's "
"code uses a cache or similar feature that retains state even if the setting "
"is changed. Django provides the :data:`django.test.signals.setting_changed` "
"signal that lets you register callbacks to clean up and otherwise reset "
"state when settings are changed."
msgstr ""

# 4423b50dd8fe4fb2b04890c8f4c713bb
#: ../../topics/testing/overview.txt:1431
msgid "Django itself uses this signal to reset various data:"
msgstr ""

# 93d11bcb398a4f1c875d99efbc50a512
#: ../../topics/testing/overview.txt:1434
msgid "Overriden settings"
msgstr ""

# ffec433f6b734cdfa350bcde6cbd3068
#: ../../topics/testing/overview.txt:1434
msgid "Data reset"
msgstr ""

# 0e0cb31d824d402c8218b43b63585dea
#: ../../topics/testing/overview.txt:1436
msgid "USE_TZ, TIME_ZONE"
msgstr ""

# 772392dda55d4659a49d8bb84608a935
#: ../../topics/testing/overview.txt:1436
msgid "Databases timezone"
msgstr ""

# 953c541bf2b54e0d98f349a8eefecb2d
#: ../../topics/testing/overview.txt:1437
msgid "TEMPLATE_CONTEXT_PROCESSORS"
msgstr ""

# 1f99ddb4577e4372a9de9f5d51a3f199
#: ../../topics/testing/overview.txt:1437
msgid "Context processors cache"
msgstr ""

# d6bb1e2ae1a44c1fa23853dce372c861
#: ../../topics/testing/overview.txt:1438
msgid "TEMPLATE_LOADERS"
msgstr ""

# 877fe13de4584732b2c4fcbce5f7dbfc
#: ../../topics/testing/overview.txt:1438
msgid "Template loaders cache"
msgstr ""

# e4888c1c09164d1699942bc34086938d
#: ../../topics/testing/overview.txt:1439
msgid "SERIALIZATION_MODULES"
msgstr ""

# 89c1bd4170a148c79e8af9f5b672f366
#: ../../topics/testing/overview.txt:1439
msgid "Serializers cache"
msgstr ""

# 026564ca1d9c4930a3887316c72a7925
#: ../../topics/testing/overview.txt:1440
msgid "LOCALE_PATHS, LANGUAGE_CODE"
msgstr ""

# 296378b42ab54167879c31ae6ccc304b
#: ../../topics/testing/overview.txt:1440
msgid "Default translation and loaded translations"
msgstr ""

# cbc94a6fc3334732b83572d168f0b2d3
#: ../../topics/testing/overview.txt:1441
msgid "MEDIA_ROOT, DEFAULT_FILE_STORAGE"
msgstr ""

# 9c6d41f294c7487b9776ab91190aef8f
#: ../../topics/testing/overview.txt:1441
msgid "Default file storage"
msgstr ""

# cb74b5c2639d466f980fc4f53b9e8345
#: ../../topics/testing/overview.txt:1445
msgid "Emptying the test outbox"
msgstr ""

# f3244737a4054f18aa56019337bb4075
#: ../../topics/testing/overview.txt:1447
msgid ""
"If you use Django's custom ``TestCase`` class, the test runner will clear "
"the contents of the test email outbox at the start of each test case."
msgstr ""

# 112b5ffb4f2d4924bd181332283897c9
#: ../../topics/testing/overview.txt:1450
msgid ""
"For more detail on email services during tests, see `Email services`_ below."
msgstr ""

# d456062070784ce49177817152325e2e
#: ../../topics/testing/overview.txt:1455
msgid "Assertions"
msgstr ""

# aa8afa67ff9141638c57119e5566967a
#: ../../topics/testing/overview.txt:1459
msgid ""
"As Python's normal :class:`unittest.TestCase` class implements assertion "
"methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest."
"TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a "
"number of custom assertion methods that are useful for testing Web "
"applications:"
msgstr ""

# 81dd7cdbeaad4c64a68fc98eff8a7e2a
#: ../../topics/testing/overview.txt:1465
msgid ""
"The failure messages given by most of these assertion methods can be "
"customized with the ``msg_prefix`` argument. This string will be prefixed to "
"any failure message generated by the assertion. This allows you to provide "
"additional details that may help you to identify the location and cause of "
"an failure in your test suite."
msgstr ""

# 7bf5541e14194e3e909cd29cb8915610
#: ../../topics/testing/overview.txt:1475
msgid ""
"Asserts that execution of callable ``callable_obj`` raised the "
"``expected_exception`` exception and that such exception has an "
"``expected_message`` representation. Any other outcome is reported as a "
"failure. Similar to unittest's :meth:`~unittest.TestCase.assertRaisesRegexp` "
"with the difference that ``expected_message`` isn't a regular expression."
msgstr ""

# c5167dc5a46346d3966e515c86da9b06
#: ../../topics/testing/overview.txt:1485
msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

# f715e1cd4c6c4c0ea3d213cdb90ef5d4
#: ../../topics/testing/overview.txt:1487
msgid "the class of the field to be tested."
msgstr ""

# 006f21fc21bb40758fe54551a5f4431b
#: ../../topics/testing/overview.txt:1488
msgid "a dictionary mapping valid inputs to their expected cleaned values."
msgstr ""

# 5116005c444f4ebda8a84d4f6f8aec00
#: ../../topics/testing/overview.txt:1490
msgid ""
"a dictionary mapping invalid inputs to one or more raised error messages."
msgstr ""

# 645de8240bbe41ad8bd9affeeb68ac06
#: ../../topics/testing/overview.txt:1492
msgid "the args passed to instantiate the field."
msgstr ""

# 237cfe06b6894b8f948429b60045a99d
#: ../../topics/testing/overview.txt:1493
msgid "the kwargs passed to instantiate the field."
msgstr ""

# 11090640b044499d8945941114cae973
#: ../../topics/testing/overview.txt:1494
msgid "the expected clean output for inputs in ``EMPTY_VALUES``."
msgstr ""

# 8921f1b606824ac4b8cbacf4cf5fe083
#: ../../topics/testing/overview.txt:1496
msgid ""
"For example, the following code tests that an ``EmailField`` accepts \"a@a."
"com\" as a valid email address, but rejects \"aaa\" with a reasonable error "
"message::"
msgstr ""

# b2b0e0db09044afbab885bc0cb45e1bf
#: ../../topics/testing/overview.txt:1505
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` appears in the content of the response. If ``count`` is "
"provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

# b1cb431b007f4bf7a99996cadfa4fa5c
# 7e7353d54b524823ac3b659977085139
#: ../../topics/testing/overview.txt:1511
#: ../../topics/testing/overview.txt:1524
msgid ""
"Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the "
"response content will be based on HTML semantics instead of character-by-"
"character equality. Whitespace is ignored in most cases, attribute ordering "
"is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more "
"details."
msgstr ""

# 48e1c745608c4e4096a156e0b3e5e7de
#: ../../topics/testing/overview.txt:1519
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` does not appears in the content of the response."
msgstr ""

# 9cb943af1bcc4276a296c2f737e518d7
#: ../../topics/testing/overview.txt:1532
msgid ""
"Asserts that a field on a form raises the provided list of errors when "
"rendered on the form."
msgstr ""

# ebbb6bac586547e7b1de5dc1a07f1a92
#: ../../topics/testing/overview.txt:1535
msgid ""
"``form`` is the name the ``Form`` instance was given in the template context."
msgstr ""

# 2f06878964ba421fb9d532fca9914316
#: ../../topics/testing/overview.txt:1538
msgid ""
"``field`` is the name of the field on the form to check. If ``field`` has a "
"value of ``None``, non-field errors (errors you can access via ``form."
"non_field_errors()``) will be checked."
msgstr ""

# 0819276d034e40008bbfef771abdb13c
#: ../../topics/testing/overview.txt:1542
msgid ""
"``errors`` is an error string, or a list of error strings, that are expected "
"as a result of form validation."
msgstr ""

# 348d8785efb144c296af085710029352
#: ../../topics/testing/overview.txt:1547
msgid ""
"Asserts that the template with the given name was used in rendering the "
"response."
msgstr ""

# 009af550124240df8382ac6a96af28f2
#: ../../topics/testing/overview.txt:1550
msgid "The name is a string such as ``'admin/index.html'``."
msgstr ""

# 105332a83c174e9fb42a10d92a2689d6
#: ../../topics/testing/overview.txt:1554
msgid "You can use this as a context manager, like this::"
msgstr ""

# a48b223efef243ae8519d50c0aa8ff2b
#: ../../topics/testing/overview.txt:1563
msgid ""
"Asserts that the template with the given name was *not* used in rendering "
"the response."
msgstr ""

# e8d2b325cc3e4446b95025a7871d5ba0
#: ../../topics/testing/overview.txt:1568
msgid ""
"You can use this as a context manager in the same way as :meth:`~TestCase."
"assertTemplateUsed`."
msgstr ""

# c83572555360417c8e4e4ce0167013d5
#: ../../topics/testing/overview.txt:1573
msgid ""
"Asserts that the response return a ``status_code`` redirect status, it "
"redirected to ``expected_url`` (including any GET data), and the final page "
"was received with ``target_status_code``."
msgstr ""

# f6187a33b5c84563b8c3f1c223f85f9c
#: ../../topics/testing/overview.txt:1577
msgid ""
"If your request used the ``follow`` argument, the ``expected_url`` and "
"``target_status_code`` will be the url and status code for the final point "
"of the redirect chain."
msgstr ""

# b85e73b1da064e0ab5880e157e38e5c7
#: ../../topics/testing/overview.txt:1583
msgid ""
"Asserts that a queryset ``qs`` returns a particular list of values "
"``values``."
msgstr ""

# 8c04272b7d6347f491feb443ce922ddc
#: ../../topics/testing/overview.txt:1585
msgid ""
"The comparison of the contents of ``qs`` and ``values`` is performed using "
"the function ``transform``; by default, this means that the ``repr()`` of "
"each value is compared. Any other callable can be used if ``repr()`` doesn't "
"provide a unique or helpful comparison."
msgstr ""

# e1f1e120258848f592286c56a5bea4a6
#: ../../topics/testing/overview.txt:1590
msgid ""
"By default, the comparison is also ordering dependent. If ``qs`` doesn't "
"provide an implicit ordering, you can set the ``ordered`` parameter to "
"``False``, which turns the comparison into a Python set comparison."
msgstr ""

# 37250675ff144a35a1706e462849b583
#: ../../topics/testing/overview.txt:1603
msgid ""
"Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that "
"``num`` database queries are executed."
msgstr ""

# 5f0be70d4a8f4d97a4fd051ac4f8704c
#: ../../topics/testing/overview.txt:1606
msgid ""
"If a ``\"using\"`` key is present in ``kwargs`` it is used as the database "
"alias for which to check the number of queries.  If you wish to call a "
"function with a ``using`` parameter you can do it by wrapping the call with "
"a ``lambda`` to add an extra parameter::"
msgstr ""

# 65af50d6079e4e55921a7072934fae53
#: ../../topics/testing/overview.txt:1613
msgid "You can also use this as a context manager::"
msgstr ""

# 5208cf22728e4aab97e13a84b16c1c6c
#: ../../topics/testing/overview.txt:1623
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are equal. The comparison "
"is based on HTML semantics. The comparison takes following things into "
"account:"
msgstr ""

# 6aba949d3ce84501852974e997a35d4d
#: ../../topics/testing/overview.txt:1627
msgid "Whitespace before and after HTML tags is ignored."
msgstr ""

# ed67addc9293471293f97b2a0a584cb1
#: ../../topics/testing/overview.txt:1628
msgid "All types of whitespace are considered equivalent."
msgstr ""

# a256315d0fd04ed78a6a6bf28b05970a
#: ../../topics/testing/overview.txt:1629
msgid ""
"All open tags are closed implicitly, e.g. when a surrounding tag is closed "
"or the HTML document ends."
msgstr ""

# aef1fef837ee418aa3c20929e176673b
#: ../../topics/testing/overview.txt:1631
msgid "Empty tags are equivalent to their self-closing version."
msgstr ""

# fbb9ddad4d054c379049e9c5b85c77be
#: ../../topics/testing/overview.txt:1632
msgid "The ordering of attributes of an HTML element is not significant."
msgstr ""

# e80d523f2b9448429ad3c8968dea0ce8
#: ../../topics/testing/overview.txt:1633
msgid ""
"Attributes without an argument are equal to attributes that equal in name "
"and value (see the examples)."
msgstr ""

# 492c3df6fd2b401da507ace59ebd2fb9
#: ../../topics/testing/overview.txt:1636
msgid ""
"The following examples are valid tests and don't raise any "
"``AssertionError``::"
msgstr ""

# 4c9bae3fbd654066972a633872d1fcd9
# e0bcbe2a4d9b4dc281bebac081e6c823
#: ../../topics/testing/overview.txt:1647
#: ../../topics/testing/overview.txt:1658
msgid ""
"``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be "
"raised if one of them cannot be parsed."
msgstr ""

# 5d9d117a87e1494fb1ac083d83f30ef6
#: ../../topics/testing/overview.txt:1654
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are *not* equal. The "
"comparison is based on HTML semantics. See :meth:`~SimpleTestCase."
"assertHTMLEqual` for details."
msgstr ""

# e7f3f6fd420645c4b7651268077fa49d
#: ../../topics/testing/overview.txt:1665
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are equal. The comparison is "
"based on XML semantics. Similarily to :meth:`~SimpleTestCase."
"assertHTMLEqual`, the comparison is made on parsed content, hence only "
"semantic differences are considered, not syntax differences. When unvalid "
"XML is passed in any parameter, an ``AssertionError`` is always raised, even "
"if both string are identical."
msgstr ""

# 6e8a16a0f0994c6dac76bc49d969b260
#: ../../topics/testing/overview.txt:1676
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are *not* equal. The "
"comparison is based on XML semantics. See :meth:`~SimpleTestCase."
"assertXMLEqual` for details."
msgstr ""

# eae7e0c166984828989095706f1d8a25
#: ../../topics/testing/overview.txt:1683
msgid "Email services"
msgstr ""

# 431593277bba4695b6b32a59dfa3c62a
#: ../../topics/testing/overview.txt:1685
msgid ""
"If any of your Django views send email using :doc:`Django's email "
"functionality </topics/email>`, you probably don't want to send email each "
"time you run a test using that view. For this reason, Django's test runner "
"automatically redirects all Django-sent email to a dummy outbox. This lets "
"you test every aspect of sending email -- from the number of messages sent "
"to the contents of each message -- without actually sending the messages."
msgstr ""

# c99349ae2ed845aab91c263a92e14218
#: ../../topics/testing/overview.txt:1692
msgid ""
"The test runner accomplishes this by transparently replacing the normal "
"email backend with a testing backend. (Don't worry -- this has no effect on "
"any other email senders outside of Django, such as your machine's mail "
"server, if you're running one.)"
msgstr ""

# 1196299b24af472c96bce9ff274234f8
#: ../../topics/testing/overview.txt:1701
msgid ""
"During test running, each outgoing email is saved in ``django.core.mail."
"outbox``. This is a simple list of all :class:`~django.core.mail."
"EmailMessage` instances that have been sent. The ``outbox`` attribute is a "
"special attribute that is created *only* when the ``locmem`` email backend "
"is used. It doesn't normally exist as part of the :mod:`django.core.mail` "
"module and you can't import it directly. The code below shows how to access "
"this attribute correctly."
msgstr ""

# 7ca2129cb84f461da615bdaa09f7fb4f
#: ../../topics/testing/overview.txt:1709
msgid ""
"Here's an example test that examines ``django.core.mail.outbox`` for length "
"and contents::"
msgstr ""

# faccac7936d84d36b92bc99a44dcde35
#: ../../topics/testing/overview.txt:1728
msgid ""
"As noted :ref:`previously <emptying-test-outbox>`, the test outbox is "
"emptied at the start of every test in a Django ``TestCase``. To empty the "
"outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

# 57d8e3e0c3934be09f3ba7945fe6588e
#: ../../topics/testing/overview.txt:1740
msgid "Skipping tests"
msgstr ""

# fda48b64e7044041952faf1780e8bd0b
#: ../../topics/testing/overview.txt:1744
msgid ""
"The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :"
"func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip "
"tests if you know ahead of time that those tests are going to fail under "
"certain conditions."
msgstr ""

# 42de85b3da97475cb5200dff72b75222
#: ../../topics/testing/overview.txt:1749
msgid ""
"For example, if your test requires a particular optional library in order to "
"succeed, you could decorate the test case with :func:`@skipIf <unittest."
"skipIf>`. Then, the test runner will report that the test wasn't executed "
"and why, instead of failing the test or omitting the test altogether."
msgstr ""

# 124b31fe70f44521817953a4ad3924f5
#: ../../topics/testing/overview.txt:1754
msgid ""
"To supplement these test skipping behaviors, Django provides two additional "
"skip decorators. Instead of testing a generic boolean, these decorators "
"check the capabilities of the database, and skip the test if the database "
"doesn't support a specific named feature."
msgstr ""

# acfead61425548e1846ccdbe0bebb2bf
#: ../../topics/testing/overview.txt:1759
msgid ""
"The decorators use a string identifier to describe database features. This "
"string corresponds to attributes of the database connection features class. "
"See ``django.db.backends.BaseDatabaseFeatures`` class for a full list of "
"database features that can be used as a basis for skipping tests."
msgstr ""

# 0cb19644680344f188999599820ff58c
#: ../../topics/testing/overview.txt:1767
msgid "Skip the decorated test if the named database feature is supported."
msgstr ""

# ffc351d79b3048e094364c87280db37e
#: ../../topics/testing/overview.txt:1769
msgid ""
"For example, the following test will not be executed if the database "
"supports transactions (e.g., it would *not* run under PostgreSQL, but it "
"would under MySQL with MyISAM tables)::"
msgstr ""

# 0d569d73577645c7ad61ca61d3b3af58
#: ../../topics/testing/overview.txt:1780
msgid ""
"Skip the decorated test if the named database feature is *not* supported."
msgstr ""

# 16dc47b3c4054e5392432a8d80c471b8
#: ../../topics/testing/overview.txt:1783
msgid ""
"For example, the following test will only be executed if the database "
"supports transactions (e.g., it would run under PostgreSQL, but *not* under "
"MySQL with MyISAM tables)::"
msgstr ""
