# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# e4db27214f7e7544f2022c647b585925_bb0e321, 2015
# Leonardo J. Caballero G. <leonardocaballero@gmail.com>, 2016
# Samuel David Ramirez Mantione <venezuelapoliglota@hotmail.com>, 2016
# Uriel Medina <urimeba511@gmail.com>, 2021
# Yoel Acevedo, 2017
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-01 04:17-0500\n"
"PO-Revision-Date: 2021-08-11 22:01+0000\n"
"Last-Translator: Uriel Medina <urimeba511@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/django/django-docs/language/"
"es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "API stability"
msgstr "Estabilidad de la API"

msgid ""
"Django is committed to API stability and forwards-compatibility. In a "
"nutshell, this means that code you develop against a version of Django will "
"continue to work with future releases. You may need to make minor changes "
"when upgrading the version of Django your project uses: see the \"Backwards "
"incompatible changes\" section of the :doc:`release note </releases/index>` "
"for the version or versions to which you are upgrading."
msgstr ""

msgid ""
"At the same time as making API stability a very high priority, Django is "
"also committed to continual improvement, along with aiming for \"one way to "
"do it\" (eventually) in the APIs we provide. This means that when we "
"discover clearly superior ways to do things, we will deprecate and "
"eventually remove the old ways. Our aim is to provide a modern, dependable "
"web framework of the highest quality that encourages best practices in all "
"projects that use it. By using incremental improvements, we try to avoid "
"both stagnation and large breaking upgrades."
msgstr ""

msgid "What \"stable\" means"
msgstr "Qué significa \"estable\""

msgid "In this context, stable means:"
msgstr "En este contexto, estable significa:"

msgid ""
"All the public APIs (everything in this documentation) will not be moved or "
"renamed without providing backwards-compatible aliases."
msgstr ""
"Todas las API públicas (todo en esta documentación) no se pueden mover o "
"cambiar el nombre sin proporcionar alias compatibles con versiones "
"anteriores."

msgid ""
"If new features are added to these APIs -- which is quite possible -- they "
"will not break or change the meaning of existing methods. In other words, "
"\"stable\" does not (necessarily) mean \"complete.\""
msgstr ""

msgid ""
"If, for some reason, an API declared stable must be removed or replaced, it "
"will be declared deprecated but will remain in the API for at least two "
"feature releases. Warnings will be issued when the deprecated method is "
"called."
msgstr ""

msgid ""
"See :ref:`official-releases` for more details on how Django's version "
"numbering scheme works, and how features will be deprecated."
msgstr ""

msgid ""
"We'll only break backwards compatibility of these APIs without a deprecation "
"process if a bug or security hole makes it completely unavoidable."
msgstr ""

msgid "Stable APIs"
msgstr "APIs estables"

msgid ""
"In general, everything covered in the documentation -- with the exception of "
"anything in the :doc:`internals area </internals/index>` is considered "
"stable."
msgstr ""

msgid "Exceptions"
msgstr "Excepciones"

msgid ""
"There are a few exceptions to this stability and backwards-compatibility "
"promise."
msgstr ""

msgid "Security fixes"
msgstr " Parches de seguridad"

msgid ""
"If we become aware of a security problem -- hopefully by someone following "
"our :ref:`security reporting policy <reporting-security-issues>` -- we'll do "
"everything necessary to fix it. This might mean breaking backwards "
"compatibility; security trumps the compatibility guarantee."
msgstr ""

msgid "APIs marked as internal"
msgstr "APIs marcadas como internas"

msgid "Certain APIs are explicitly marked as \"internal\" in a couple of ways:"
msgstr ""

msgid ""
"Some documentation refers to internals and mentions them as such. If the "
"documentation says that something is internal, we reserve the right to "
"change it."
msgstr ""

msgid ""
"Functions, methods, and other objects prefixed by a leading underscore "
"(``_``). This is the standard Python way of indicating that something is "
"private; if any method starts with a single ``_``, it's an internal API."
msgstr ""

msgid "Design philosophies"
msgstr "Filosofía de diseño"

msgid ""
"This document explains some of the fundamental philosophies Django's "
"developers have used in creating the framework. Its goal is to explain the "
"past and guide the future."
msgstr ""

msgid "Overall"
msgstr "En general"

msgid "Loose coupling"
msgstr "Bajo acoplamiento"

msgid ""
"A fundamental goal of Django's stack is `loose coupling and tight "
"cohesion`_. The various layers of the framework shouldn't \"know\" about "
"each other unless absolutely necessary."
msgstr ""

msgid ""
"For example, the template system knows nothing about Web requests, the "
"database layer knows nothing about data display and the view system doesn't "
"care which template system a programmer uses."
msgstr ""

msgid ""
"Although Django comes with a full stack for convenience, the pieces of the "
"stack are independent of another wherever possible."
msgstr ""

msgid "Less code"
msgstr "Menos código"

msgid ""
"Django apps should use as little code as possible; they should lack "
"boilerplate. Django should take full advantage of Python's dynamic "
"capabilities, such as introspection."
msgstr ""

msgid "Quick development"
msgstr "Desarrollo rápido"

msgid ""
"The point of a Web framework in the 21st century is to make the tedious "
"aspects of Web development fast. Django should allow for incredibly quick "
"Web development."
msgstr ""

msgid "Don't repeat yourself (DRY)"
msgstr "No te repitas (NTR)"

msgid ""
"Every distinct concept and/or piece of data should live in one, and only "
"one, place. Redundancy is bad. Normalization is good."
msgstr ""
"Cada concepto distinto y/o dato debe ubicarse en un y sólo un lugar. La "
"redundancia es mala. La normalización es buena."

msgid ""
"The framework, within reason, should deduce as much as possible from as "
"little as possible."
msgstr ""

msgid "The `discussion of DRY on the Portland Pattern Repository`__"
msgstr ""
"La  `discusión del principio NTR en el Repositorio Patrón de Portland`__"

msgid "Explicit is better than implicit"
msgstr "Explícito es mejor que implícito"

msgid ""
"This is a core Python principle listed in :pep:`20`, and it means Django "
"shouldn't do too much \"magic.\" Magic shouldn't happen unless there's a "
"really good reason for it. Magic is worth using only if it creates a huge "
"convenience unattainable in other ways, and it isn't implemented in a way "
"that confuses developers who are trying to learn how to use the feature."
msgstr ""

msgid "Consistency"
msgstr "Consistencia"

msgid ""
"The framework should be consistent at all levels. Consistency applies to "
"everything from low-level (the Python coding style used) to high-level (the "
"\"experience\" of using Django)."
msgstr ""

msgid "Models"
msgstr "Modelos"

msgid ""
"Fields shouldn't assume certain behaviors based solely on the name of the "
"field. This requires too much knowledge of the system and is prone to "
"errors. Instead, behaviors should be based on keyword arguments and, in some "
"cases, on the type of the field."
msgstr ""

msgid "Include all relevant domain logic"
msgstr "Incluya toda la lógica de dominio relevante"

msgid ""
"Models should encapsulate every aspect of an \"object,\" following Martin "
"Fowler's `Active Record`_ design pattern."
msgstr ""
"Los modelos deberían encapsular todos los aspectos de un \"objeto\", "
"siguiendo el  patrón de diseño `ActiveRecord`_ de Martin Fowler."

msgid ""
"This is why both the data represented by a model and information about it "
"(its human-readable name, options like default ordering, etc.) are defined "
"in the model class; all the information needed to understand a given model "
"should be stored *in* the model."
msgstr ""

msgid "Database API"
msgstr "API de base de datos"

msgid "The core goals of the database API are:"
msgstr "Los objetivos principales de la API de base de datos son:"

msgid "SQL efficiency"
msgstr "La eficiencia de SQL"

msgid ""
"It should execute SQL statements as few times as possible, and it should "
"optimize statements internally."
msgstr ""

msgid ""
"This is why developers need to call ``save()`` explicitly, rather than the "
"framework saving things behind the scenes silently."
msgstr ""

msgid ""
"This is also why the ``select_related()`` ``QuerySet`` method exists. It's "
"an optional performance booster for the common case of selecting \"every "
"related object.\""
msgstr ""

msgid "Terse, powerful syntax"
msgstr "Sintaxis concisa y  potente"

msgid ""
"The database API should allow rich, expressive statements in as little "
"syntax as possible. It should not rely on importing other modules or helper "
"objects."
msgstr ""

msgid ""
"Joins should be performed automatically, behind the scenes, when necessary."
msgstr ""

msgid ""
"Every object should be able to access every related object, systemwide. This "
"access should work both ways."
msgstr ""

msgid "Option to drop into raw SQL easily, when needed"
msgstr ""

msgid ""
"The database API should realize it's a shortcut but not necessarily an end-"
"all-be-all. The framework should make it easy to write custom SQL -- entire "
"statements, or just custom ``WHERE`` clauses as custom parameters to API "
"calls."
msgstr ""

msgid "URL design"
msgstr "Diseño de URLs"

msgid ""
"URLs in a Django app should not be coupled to the underlying Python code. "
"Tying URLs to Python function names is a Bad And Ugly Thing."
msgstr ""

msgid ""
"Along these lines, the Django URL system should allow URLs for the same app "
"to be different in different contexts. For example, one site may put stories "
"at ``/stories/``, while another may use ``/news/``."
msgstr ""

msgid "Infinite flexibility"
msgstr "Flexibilidad infinita"

msgid ""
"URLs should be as flexible as possible. Any conceivable URL design should be "
"allowed."
msgstr ""

msgid "Encourage best practices"
msgstr "Fomente las buenas prácticas"

msgid ""
"The framework should make it just as easy (or even easier) for a developer "
"to design pretty URLs than ugly ones."
msgstr ""

msgid "File extensions in Web-page URLs should be avoided."
msgstr ""

msgid "Vignette-style commas in URLs deserve severe punishment."
msgstr ""

msgid "Definitive URLs"
msgstr "URLs definitivas"

msgid ""
"Technically, ``foo.com/bar`` and ``foo.com/bar/`` are two different URLs, "
"and search-engine robots (and some Web traffic-analyzing tools) would treat "
"them as separate pages. Django should make an effort to \"normalize\" URLs "
"so that search-engine robots don't get confused."
msgstr ""

msgid "This is the reasoning behind the :setting:`APPEND_SLASH` setting."
msgstr "Este es el razonamiento detrás de la opción :setting: `APPEND_SLASH`."

msgid "Template system"
msgstr "Sistema de plantillas"

msgid "Separate logic from presentation"
msgstr "Separe la lógica de la presentación"

msgid ""
"We see a template system as a tool that controls presentation and "
"presentation-related logic -- and that's it. The template system shouldn't "
"support functionality that goes beyond this basic goal."
msgstr ""

msgid "Discourage redundancy"
msgstr "No promueva la redundancia"

msgid ""
"The majority of dynamic websites use some sort of common sitewide design -- "
"a common header, footer, navigation bar, etc. The Django template system "
"should make it easy to store those elements in a single place, eliminating "
"duplicate code."
msgstr ""

msgid ""
"This is the philosophy behind :ref:`template inheritance <template-"
"inheritance>`."
msgstr ""

msgid "Be decoupled from HTML"
msgstr ""

msgid ""
"The template system shouldn't be designed so that it only outputs HTML. It "
"should be equally good at generating other text-based formats, or just plain "
"text."
msgstr ""

msgid "XML should not be used for template languages"
msgstr "XML no se debe utilizar para los lenguajes de plantillas"

msgid ""
"Using an XML engine to parse templates introduces a whole new world of human "
"error in editing templates -- and incurs an unacceptable level of overhead "
"in template processing."
msgstr ""

msgid "Assume designer competence"
msgstr "Adopte las competencias de diseñador"

msgid ""
"The template system shouldn't be designed so that templates necessarily are "
"displayed nicely in WYSIWYG editors such as Dreamweaver. That is too severe "
"of a limitation and wouldn't allow the syntax to be as nice as it is. Django "
"expects template authors are comfortable editing HTML directly."
msgstr ""

msgid "Treat whitespace obviously"
msgstr ""

msgid ""
"The template system shouldn't do magic things with whitespace. If a template "
"includes whitespace, the system should treat the whitespace as it treats "
"text -- just display it. Any whitespace that's not in a template tag should "
"be displayed."
msgstr ""

msgid "Don't invent a programming language"
msgstr "No invente un lenguaje de programación"

msgid ""
"The goal is not to invent a programming language. The goal is to offer just "
"enough programming-esque functionality, such as branching and looping, that "
"is essential for making presentation-related decisions. The :ref:`Django "
"Template Language (DTL) <template-language-intro>` aims to avoid advanced "
"logic."
msgstr ""

msgid ""
"The Django template system recognizes that templates are most often written "
"by *designers*, not *programmers*, and therefore should not assume Python "
"knowledge."
msgstr ""

msgid "Safety and security"
msgstr "Seguridad y protección"

msgid ""
"The template system, out of the box, should forbid the inclusion of "
"malicious code -- such as commands that delete database records."
msgstr ""

msgid ""
"This is another reason the template system doesn't allow arbitrary Python "
"code."
msgstr ""
"Esta es otra razón por la que el sistema de plantillas no permite código "
"Python arbitrario."

msgid "Extensibility"
msgstr "Extensibilidad"

msgid ""
"The template system should recognize that advanced template authors may want "
"to extend its technology."
msgstr ""

msgid "This is the philosophy behind custom template tags and filters."
msgstr ""
"Esta es la filosofía detrás de las etiquetas de plantillas y filtros "
"personalizados."

msgid "Views"
msgstr "Vistas"

msgid "Simplicity"
msgstr "Sencillez"

msgid ""
"Writing a view should be as simple as writing a Python function. Developers "
"shouldn't have to instantiate a class when a function will do."
msgstr ""

msgid "Use request objects"
msgstr "Utilice objetos de petición"

msgid ""
"Views should have access to a request object -- an object that stores "
"metadata about the current request. The object should be passed directly to "
"a view function, rather than the view function having to access the request "
"data from a global variable. This makes it light, clean and easy to test "
"views by passing in \"fake\" request objects."
msgstr ""

msgid ""
"A view shouldn't care about which template system the developer uses -- or "
"even whether a template system is used at all."
msgstr ""

msgid "Differentiate between GET and POST"
msgstr "Diferencie entre GET y POST"

msgid ""
"GET and POST are distinct; developers should explicitly use one or the "
"other. The framework should make it easy to distinguish between GET and POST "
"data."
msgstr ""

msgid "Cache Framework"
msgstr "Framework caché"

msgid "The core goals of Django's :doc:`cache framework </topics/cache>` are:"
msgstr ""
"Los objetivos centrales del :doc: `framework caché de Django </topics/"
"cache>` son:"

msgid ""
"A cache should be as fast as possible.  Hence, all framework code "
"surrounding the cache backend should be kept to the absolute minimum, "
"especially for ``get()`` operations."
msgstr ""

msgid ""
"The cache API should provide a consistent interface across the different "
"cache backends."
msgstr ""

msgid ""
"The cache API should be extensible at the application level based on the "
"developer's needs (for example, see :ref:`cache_key_transformation`)."
msgstr ""

msgid "Third-party distributions of Django"
msgstr "Distribuciones de terceros de Django"

msgid ""
"Many third-party distributors are now providing versions of Django "
"integrated with their package-management systems. These can make "
"installation and upgrading much easier for users of Django since the "
"integration includes the ability to automatically install dependencies (like "
"database adapters) that Django requires."
msgstr ""

msgid ""
"Typically, these packages are based on the latest stable release of Django, "
"so if you want to use the development version of Django you'll need to "
"follow the instructions for :ref:`installing the development version "
"<installing-development-version>` from our Git repository."
msgstr ""

msgid ""
"If you're using Linux or a Unix installation, such as OpenSolaris, check "
"with your distributor to see if they already package Django. If you're using "
"a Linux distro and don't know how to find out if a package is available, "
"then now is a good time to learn.  The Django Wiki contains a list of `Third "
"Party Distributions`_ to help you out."
msgstr ""

msgid "For distributors"
msgstr "Para los distribuidores"

msgid ""
"If you'd like to package Django for distribution, we'd be happy to help out! "
"Please join the |django-developers| mailing list and introduce yourself."
msgstr ""

msgid ""
"We also encourage all distributors to subscribe to the |django-announce| "
"mailing list, which is a (very) low-traffic list for announcing new releases "
"of Django and important bugfixes."
msgstr ""

msgid "Meta-documentation and miscellany"
msgstr "Documentación meta y miscelánea"

msgid ""
"Documentation that we can't find a more organized place for. Like that "
"drawer in your kitchen with the scissors, batteries, duct tape, and other "
"junk."
msgstr ""
