# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
# Adrian Antończyk <linkedin@antonczyk.it>, 2015
# m_aciek <maciej.olko@gmail.com>, 2016
# p <inactive+poczciwiec@transifex.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-04 00:26-0500\n"
"PO-Revision-Date: 2016-11-02 18:28+0000\n"
"Last-Translator: m_aciek <maciej.olko@gmail.com>\n"
"Language-Team: Polish (http://www.transifex.com/django/django-docs/language/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../../../sources/1.10/docs/releases/0.95.txt:3
msgid "Django version 0.95 release notes"
msgstr "Informacje o wydaniu Django w wersji 0.95"

#: ../../../../sources/1.10/docs/releases/0.95.txt:5
msgid "Welcome to the Django 0.95 release."
msgstr "Witaj w Django wydanie 0.95"

#: ../../../../sources/1.10/docs/releases/0.95.txt:7
msgid ""
"This represents a significant advance in Django development since the 0.91 "
"release in January 2006. The details of every change in this release would "
"be too extensive to list in full, but a summary is presented below."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:12
msgid "Suitability and API stability"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:14
msgid ""
"This release is intended to provide a stable reference point for developers "
"wanting to work on production-level applications that use Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:17
msgid ""
"However, it's not the 1.0 release, and we'll be introducing further changes "
"before 1.0. For a clear look at which areas of the framework will change "
"(and which ones will *not* change) before 1.0, see the ``api-stability.txt``"
" file, which lives in the docs/ directory of the distribution."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:22
msgid ""
"You may have a need to use some of the features that are marked as \"subject"
" to API change\" in that document, but that's OK with us as long as it's OK "
"with you, and as long as you understand APIs may change in the future."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:26
msgid ""
"Fortunately, most of Django's core APIs won't be changing before version "
"1.0. There likely won't be as big of a change between 0.95 and 1.0 versions "
"as there was between 0.91 and 0.95."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:31
msgid "Changes and new features"
msgstr "Zmiany i nowe funkcjonalności"

#: ../../../../sources/1.10/docs/releases/0.95.txt:33
msgid ""
"The major changes in this release (for developers currently using the 0.91 "
"release) are a result of merging the 'magic-removal' branch of development. "
"This branch removed a number of constraints in the way Django code had to be"
" written that were a consequence of decisions made in the early days of "
"Django, prior to its open-source release. It's now possible to write more "
"natural, Pythonic code that works as expected, and there's less \"black "
"magic\" happening behind the scenes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:41
msgid ""
"Aside from that, another main theme of this release is a dramatic increase "
"in usability. We've made countless improvements in error messages, "
"documentation, etc., to improve developers' quality of life."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:45
msgid "The new features and changes introduced in 0.95 include:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:47
msgid ""
"Django now uses a more consistent and natural filtering interface for "
"retrieving objects from the database."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:50
msgid ""
"User-defined models, functions and constants now appear in the module "
"namespace they were defined in. (Previously everything was magically "
"transferred to the django.models.* namespace.)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:54
msgid ""
"Some optional applications, such as the FlatPage, Sites and Redirects apps, "
"have been decoupled and moved into django.contrib. If you don't want to use "
"these applications, you no longer have to install their database tables."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:59
msgid "Django now has support for managing database transactions."
msgstr "Django posiada teraz wsparcie dla zarządzania transakcjami baz danych."

#: ../../../../sources/1.10/docs/releases/0.95.txt:61
msgid ""
"We've added the ability to write custom authentication and authorization "
"backends for authenticating users against alternate systems, such as LDAP."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:65
msgid ""
"We've made it easier to add custom table-level functions to models, through "
"a new \"Manager\" API."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:68
msgid ""
"It's now possible to use Django without a database. This simply means that "
"the framework no longer requires you to have a working database set up just "
"to serve dynamic pages. In other words, you can just use URLconfs/views on "
"their own. Previously, the framework required that a database be configured,"
" regardless of whether you actually used it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:74
msgid ""
"It's now more explicit and natural to override save() and delete() methods "
"on models, rather than needing to hook into the pre_save() and post_save() "
"method hooks."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:78
msgid ""
"Individual pieces of the framework now can be configured without requiring "
"the setting of an environment variable. This permits use of, for example, "
"the Django templating system inside other applications."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:82
msgid ""
"More and more parts of the framework have been internationalized, as we've "
"expanded internationalization (i18n) support. The Django codebase, including"
" code and templates, has now been translated, at least in part, into 31 "
"languages. From Arabic to Chinese to Hungarian to Welsh, it is now possible "
"to use Django's admin site in your native language."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:88
msgid ""
"The number of changes required to port from 0.91-compatible code to the 0.95"
" code base are significant in some cases. However, they are, for the most "
"part, reasonably routine and only need to be done once. A list of the "
"necessary changes is described in the `Removing The Magic`_ wiki page. There"
" is also an easy checklist_ for reference when undertaking the porting "
"operation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:98
msgid "Problem reports and getting help"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:100
msgid ""
"Need help resolving a problem with Django? The documentation in the "
"distribution is also available :doc:`online </index>` at the `Django "
"website`_. The :doc:`FAQ </faq/index>` document is especially recommended, "
"as it contains a number of issues that come up time and again."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:105
msgid ""
"For more personalized help, the `django-users`_ mailing list is a very "
"active list, with more than 2,000 subscribers who can help you solve any "
"sort of Django problem. We recommend you search the archives first, though, "
"because many common questions appear with some regularity, and any "
"particular problem may already have been answered."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:111
msgid ""
"Finally, for those who prefer the more immediate feedback offered by IRC, "
"there's a #django channel on irc.freenode.net that is regularly populated by"
" Django users and developers from around the world. Friendly people are "
"usually available at any hour of the day -- to help, or just to chat."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.95.txt:119
msgid "Thanks for using Django!"
msgstr "Dziękujemy za używanie Django!"

#: ../../../../sources/1.10/docs/releases/0.95.txt:121
msgid "The Django Team July 2006"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:3
msgid "Django version 0.96 release notes"
msgstr "Informacje o wydaniu Django w wersji 0.96"

#: ../../../../sources/1.10/docs/releases/0.96.txt:5
msgid "Welcome to Django 0.96!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:7
msgid ""
"The primary goal for 0.96 is a cleanup and stabilization of the features "
"introduced in 0.95. There have been a few small `backwards-incompatible "
"changes`_ since 0.95, but the upgrade process should be fairly simple and "
"should not require major changes to existing applications."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:12
msgid ""
"However, we're also releasing 0.96 now because we have a set of backwards-"
"incompatible changes scheduled for the near future. Once completed, they "
"will involve some code changes for application developers, so we recommend "
"that you stick with Django 0.96 until the next official release; then you'll"
" be able to upgrade in one step instead of needing to make incremental "
"changes to keep up with the development version of Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:21
#: ../../../../sources/1.10/docs/releases/1.0.txt:33
msgid "Backwards-incompatible changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:23
msgid ""
"The following changes may require you to update your code when you switch "
"from 0.95 to 0.96:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:27
msgid "``MySQLdb`` version requirement"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:29
msgid ""
"Due to a bug in older versions of the ``MySQLdb`` Python module (which "
"Django uses to connect to MySQL databases), Django's MySQL backend now "
"requires version 1.2.1p2 or higher of ``MySQLdb``, and will raise exceptions"
" if you attempt to use an older version."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:34
msgid ""
"If you're currently unable to upgrade your copy of ``MySQLdb`` to meet this "
"requirement, a separate, backwards-compatible backend, called \"mysql_old\","
" has been added to Django. To use this backend, change the "
"``DATABASE_ENGINE`` setting in your Django settings file from this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:41
#: ../../../../sources/1.10/docs/releases/1.2.txt:591
msgid "to this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:45
msgid ""
"However, we strongly encourage MySQL users to upgrade to a more recent "
"version of ``MySQLdb`` as soon as possible, The \"mysql_old\" backend is "
"provided only to ease this transition, and is considered deprecated; aside "
"from any necessary security fixes, it will not be actively maintained, and "
"it will be removed in a future release of Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:51
msgid ""
"Also, note that some features, like the new ``DATABASE_OPTIONS`` setting "
"(see the :doc:`databases documentation </ref/databases>` for details), are "
"only available on the \"mysql\" backend, and will not be made available for "
"\"mysql_old\"."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:57
msgid "Database constraint names changed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:59
msgid ""
"The format of the constraint names Django generates for foreign key "
"references have changed slightly. These names are generally only used when "
"it is not possible to put the reference directly on the affected column, so "
"they are not always visible."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:64
msgid ""
"The effect of this change is that running ``manage.py reset`` and similar "
"commands against an existing database may generate SQL with the new form of "
"constraint name, while the database itself contains constraints named in the"
" old form; this will cause the database server to raise an error message "
"about modifying non-existent constraints."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:70
msgid "If you need to work around this, there are two methods available:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:72
msgid ""
"Redirect the output of ``manage.py`` to a file, and edit the generated SQL "
"to use the correct constraint names before executing it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:76
msgid ""
"Examine the output of ``manage.py sqlall`` to see the new-style constraint "
"names, and use that as a guide to rename existing constraints in your "
"database."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:81
msgid "Name changes in ``manage.py``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:83
msgid ""
"A few of the options to ``manage.py`` have changed with the addition of "
"fixture support:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:86
msgid ""
"There are new ``dumpdata`` and ``loaddata`` commands which, as you might "
"expect, will dump and load data to/from the database. These commands can "
"operate against any of Django's supported serialization formats."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:91
msgid ""
"The ``sqlinitialdata`` command has been renamed to ``sqlcustom`` to "
"emphasize that ``loaddata`` should be used for data (and ``sqlcustom`` for "
"other custom SQL -- views, stored procedures, etc.)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:95
msgid "The vestigial ``install`` command has been removed. Use ``syncdb``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:98
msgid "Backslash escaping changed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:100
msgid ""
"The Django database API now escapes backslashes given as query parameters. "
"If you have any database API code that matches backslashes, and it was "
"working before (despite the lack of escaping), you'll have to change your "
"code to \"unescape\" the slashes one level."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:105
msgid "For example, this used to work::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:110
msgid "The above is now incorrect, and should be rewritten as::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:116
msgid "Removed ENABLE_PSYCO setting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:118
msgid ""
"The ``ENABLE_PSYCO`` setting no longer exists. If your settings file "
"includes ``ENABLE_PSYCO`` it will have no effect; to use Psyco_, we "
"recommend writing a middleware class to activate it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:125
msgid "What's new in 0.96?"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:127
msgid ""
"This revision represents over a thousand source commits and over four "
"hundred bug fixes, so we can't possibly catalog all the changes. Here, we "
"describe the most notable changes in this release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:132
msgid "New forms library"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:134
msgid ""
"``django.newforms`` is Django's new form-handling library. It's a "
"replacement for ``django.forms``, the old form/manipulator/validation "
"framework.  Both APIs are available in 0.96, but over the next two releases "
"we plan to switch completely to the new forms system, and deprecate and "
"remove the old system."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:140
msgid "There are three elements to this transition:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:142
msgid ""
"We've copied the current ``django.forms`` to ``django.oldforms``. This "
"allows you to upgrade your code *now* rather than waiting for the backwards-"
"incompatible change and rushing to fix your code after the fact.  Just "
"change your import statements like this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:151
msgid ""
"The next official release of Django will move the current "
"``django.newforms`` to ``django.forms``. This will be a backwards-"
"incompatible change, and anyone still using the old version of "
"``django.forms`` at that time will need to change their import statements as"
" described above."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:157
msgid ""
"The next release after that will completely remove ``django.oldforms``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:160
msgid ""
"Although the ``newforms`` library will continue to evolve, it's ready for "
"use for most common cases. We recommend that anyone new to form handling "
"skip the old forms system and start with the new."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:164
msgid ""
"For more information about ``django.newforms``, read the :doc:`newforms "
"documentation </topics/forms/index>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:168
msgid "URLconf improvements"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:170
msgid ""
"You can now use any callable as the callback in URLconfs (previously, only "
"strings that referred to callables were allowed). This allows a much more "
"natural use of URLconfs. For example, this URLconf::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:180
msgid "can now be rewritten as::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:189
msgid ""
"One useful application of this can be seen when using decorators; this "
"change allows you to apply decorators to views *in your URLconf*. Thus, you "
"can make a generic view require login very easily::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:207
msgid ""
"Note that both syntaxes (strings and callables) are valid, and will continue"
" to be valid for the foreseeable future."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:211
msgid "The test framework"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:213
msgid ""
"Django now includes a test framework so you can start transmuting fear into "
"boredom (with apologies to Kent Beck). You can write tests based on "
":mod:`doctest` or :mod:`unittest` and test your views with a simple test "
"client."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:217
msgid ""
"There is also new support for \"fixtures\" -- initial data, stored in any of"
" the supported :doc:`serialization formats </topics/serialization>`, that "
"will be loaded into your database at the start of your tests. This makes "
"testing with real data much easier."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:222
msgid ""
"See :doc:`the testing documentation </topics/testing/index>` for the full "
"details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:225
msgid "Improvements to the admin interface"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:227
msgid ""
"A small change, but a very nice one: dedicated views for adding and updating"
" users have been added to the admin interface, so you no longer need to "
"worry about working with hashed passwords in the admin."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:232
msgid "Thanks"
msgstr "Podziękowania"

#: ../../../../sources/1.10/docs/releases/0.96.txt:234
msgid ""
"Since 0.95, a number of people have stepped forward and taken a major new "
"role in Django's development. We'd like to thank these people for all their "
"hard work:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:238
msgid ""
"Russell Keith-Magee and Malcolm Tredinnick for their major code "
"contributions. This release wouldn't have been possible without them."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:241
msgid ""
"Our new release manager, James Bennett, for his work in getting out 0.95.1, "
"0.96, and (hopefully) future release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:244
msgid ""
"Our ticket managers Chris Beaven (aka SmileyChris), Simon Greenhill, Michael"
" Radziej, and Gary Wilson. They agreed to take on the monumental task of "
"wrangling our tickets into nicely cataloged submission. Figuring out what to"
" work on is now about a million times easier; thanks again, guys."
msgstr ""

#: ../../../../sources/1.10/docs/releases/0.96.txt:250
msgid ""
"Everyone who submitted a bug report, patch or ticket comment. We can't "
"possibly thank everyone by name -- over 200 developers submitted patches "
"that went into 0.96 -- but everyone who's contributed to Django is listed in"
" AUTHORS_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:3
msgid "Django 1.0 release notes"
msgstr "Informacje o wydaniu Django 1.0"

#: ../../../../sources/1.10/docs/releases/1.0.txt:5
msgid "Welcome to Django 1.0!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:7
msgid ""
"We've been looking forward to this moment for over three years, and it's "
"finally here. Django 1.0 represents the largest milestone in Django's "
"development to date: a Web framework that a group of perfectionists can "
"truly be proud of."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:11
msgid ""
"Django 1.0 represents over three years of community development as an Open "
"Source project. Django's received contributions from hundreds of developers,"
" been translated into fifty languages, and today is used by developers on "
"every continent and in every kind of job."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:16
msgid ""
"An interesting historical note: when Django was first released in July 2005,"
" the initial released version of Django came from an internal repository at "
"revision number 8825. Django 1.0 represents revision 8961 of our public "
"repository. It seems fitting that our 1.0 release comes at the moment where "
"community contributions overtake those made privately."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:23
msgid "Stability and forwards-compatibility"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:25
msgid ""
"The release of Django 1.0 comes with a promise of API stability and "
"forwards-compatibility. In a nutshell, this means that code you develop "
"against Django 1.0 will continue to work against 1.1 unchanged, and you "
"should need to make only minor changes for any 1.X release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:30
msgid ""
"See the :doc:`API stability guide </misc/api-stability>` for full details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:35
msgid ""
"Django 1.0 has a number of backwards-incompatible changes from Django 0.96. "
"If you have apps written against Django 0.96 that you need to port, see our "
"detailed porting guide:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:44
msgid ""
"A complete list of backwards-incompatible changes can be found at "
"https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:48
msgid "What's new in Django 1.0"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:50
msgid "A *lot*!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:52
msgid ""
"Since Django 0.96, we've made over 4,000 code commits, fixed more than 2,000"
" bugs, and edited, added, or removed around 350,000 lines of code. We've "
"also added 40,000 lines of new documentation, and greatly improved what was "
"already there."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:57
msgid ""
"In fact, new documentation is one of our favorite features of Django 1.0, so"
" we might as well start there. First, there's a new documentation site:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:60
msgid "https://docs.djangoproject.com/"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:62
msgid ""
"The documentation has been greatly improved, cleaned up, and generally made "
"awesome. There's now dedicated search, indexes, and more."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:65
msgid ""
"We can't possibly document everything that's new in 1.0, but the "
"documentation will be your definitive guide. Anywhere you see something "
"like:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:70
msgid "This feature is new in Django 1.0"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:72
msgid "You'll know that you're looking at something new or changed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:74
msgid "The other major highlights of Django 1.0 are:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:77
msgid "Re-factored admin application"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:79
msgid ""
"The Django administrative interface (``django.contrib.admin``) has been "
"completely refactored; admin definitions are now completely decoupled from "
"model definitions (no more ``class Admin`` declaration in models!), "
"rewritten to use Django's new form-handling library (introduced in the 0.96 "
"release as ``django.newforms``, and now available as simply "
"``django.forms``) and redesigned with extensibility and customization in "
"mind. Full documentation for the admin application is available online in "
"the official Django documentation:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:87
msgid "See the :doc:`admin reference </ref/contrib/admin/index>` for details"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:90
msgid "Improved Unicode handling"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:92
msgid ""
"Django's internals have been refactored to use Unicode throughout; this "
"drastically simplifies the task of dealing with non-Western-European content"
" and data in Django. Additionally, utility functions have been provided to "
"ease interoperability with third-party libraries and systems which may or "
"may not handle Unicode gracefully. Details are available in Django's "
"Unicode-handling documentation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:99
msgid "See :doc:`/ref/unicode`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:102
msgid "An improved ORM"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:104
msgid ""
"Django's object-relational mapper -- the component which provides the "
"mapping between Django model classes and your database, and which mediates "
"your database queries -- has been dramatically improved by a massive "
"refactoring. For most users of Django this is backwards-compatible; the "
"public-facing API for database querying underwent a few minor changes, but "
"most of the updates took place in the ORM's internals. A guide to the "
"changes, including backwards-incompatible modifications and mentions of new "
"features opened up by this refactoring, is `available on the Django wiki`__."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:116
msgid "Automatic escaping of template variables"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:118
msgid ""
"To provide improved security against cross-site scripting (XSS) "
"vulnerabilities, Django's template system now automatically escapes the "
"output of variables. This behavior is configurable, and allows both "
"variables and larger template constructs to be marked as safe (requiring no "
"escaping) or unsafe (requiring escaping). A full guide to this feature is in"
" the documentation for the :ttag:`autoescape` tag."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:126
msgid "``django.contrib.gis`` (GeoDjango)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:128
msgid ""
"A project over a year in the making, this adds world-class GIS (`Geographic "
"Information Systems`_) support to Django, in the form of a ``contrib`` "
"application. Its documentation is currently being maintained externally, and"
" will be merged into the main Django documentation shortly. Huge thanks go "
"to Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their "
"efforts in creating and completing this feature."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:135
msgid "See http://geodjango.org/ for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:140
msgid "Pluggable file storage"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:142
msgid ""
"Django's built-in ``FileField`` and ``ImageField`` now can take advantage of"
" pluggable file-storage backends, allowing extensive customization of where "
"and how uploaded files get stored by Django. For details, see :doc:`the "
"files documentation </topics/files>`; big thanks go to Marty Alchin for "
"putting in the hard work to get this completed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:149
msgid "Jython compatibility"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:151
msgid ""
"Thanks to a lot of work from Leo Soto during a Google Summer of Code "
"project, Django's codebase has been refactored to remove incompatibilities "
"with `Jython`_, an implementation of Python written in Java, which runs "
"Python code on the Java Virtual Machine. Django is now compatible with the "
"forthcoming Jython 2.5 release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:157
msgid "See :doc:`/howto/jython`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:162
msgid "Generic relations in forms and admin"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:164
msgid ""
"Classes are now included in ``django.contrib.contenttypes`` which can be "
"used to support generic relations in both the admin interface and in end-"
"user forms. See :ref:`the documentation for generic relations <generic-"
"relations>` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:169
msgid "``INSERT``/``UPDATE`` distinction"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:171
msgid ""
"Although Django's default behavior of having a model's ``save()`` method "
"automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at"
" the SQL level is suitable for the majority of cases, there are occasional "
"situations where forcing one or the other is useful. As a result, models can"
" now support an additional parameter to ``save()`` which can force a "
"specific operation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:177
msgid "See :ref:`ref-models-force-insert` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:180
msgid "Split ``CacheMiddleware``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:182
msgid ""
"Django's ``CacheMiddleware`` has been split into three classes: "
"``CacheMiddleware`` itself still exists and retains all of its previous "
"functionality, but it is now built from two separate middleware classes "
"which handle the two parts of caching (inserting into and reading from the "
"cache) separately, offering additional flexibility for situations where "
"combining these functions into a single middleware posed problems."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:189
msgid ""
"Full details, including updated notes on appropriate use, are in :doc:`the "
"caching documentation </topics/cache>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:193
msgid "Refactored ``django.contrib.comments``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:195
msgid ""
"As part of a Google Summer of Code project, Thejaswi Puthraya carried out a "
"major rewrite and refactoring of Django's bundled comment system, greatly "
"increasing its flexibility and customizability."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:200
msgid "Removal of deprecated features"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:202
msgid ""
"A number of features and methods which had previously been marked as "
"deprecated, and which were scheduled for removal prior to the 1.0 release, "
"are no longer present in Django. These include imports of the form library "
"from ``django.newforms`` (now located simply at ``django.forms``), the "
"``form_for_model`` and ``form_for_instance`` helper functions (which have "
"been replaced by ``ModelForm``) and a number of deprecated features which "
"were replaced by the dispatcher, file-uploading and file-storage "
"refactorings introduced in the Django 1.0 alpha releases."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:212
msgid "Known issues"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:214
msgid ""
"We've done our best to make Django 1.0 as solid as possible, but "
"unfortunately there are a couple of issues that we know about in the "
"release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:218
msgid "Multi-table model inheritance with ``to_field``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:220
msgid ""
"If you're using :ref:`multiple table model inheritance <multi-table-"
"inheritance>`, be aware of this caveat: child models using a custom "
"``parent_link`` and ``to_field`` will cause database integrity errors. A set"
" of models like the following are **not valid**::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:233
msgid "This bug will be fixed in the next release of Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:236
msgid "Caveats with support of certain databases"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:238
msgid ""
"Django attempts to support as many features as possible on all database "
"backends. However, not all database backends are alike, and in particular "
"many of the supported database differ greatly from version to version. It's "
"a good idea to checkout our :doc:`notes on supported database "
"</ref/databases>`:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:241
msgid ":ref:`mysql-notes`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:242
msgid ":ref:`sqlite-notes`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.txt:243
msgid ":ref:`oracle-notes`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:3
msgid "Porting your apps from Django 0.96 to 1.0"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:7
msgid "Django 1.0 breaks compatibility with 0.96 in some areas."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:9
msgid ""
"This guide will help you port 0.96 projects and apps to 1.0. The first part "
"of this document includes the common changes needed to run with 1.0. If "
"after going through the first part your code still breaks, check the section"
" `Less-common Changes`_ for a list of a bunch of less-common compatibility "
"issues."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:16
msgid ""
"The :doc:`1.0 release notes </releases/1.0>`. That document explains the new"
" features in 1.0 more deeply; the porting guide is more concerned with "
"helping you quickly update your code."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:21
msgid "Common changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:23
msgid ""
"This section describes the changes between 0.96 and 1.0 that most users will"
" need to make."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:27
msgid "Use Unicode"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:29
msgid ""
"Change string literals (``'foo'``) into Unicode literals (``u'foo'``). "
"Django now uses Unicode strings throughout. In most places, raw strings will"
" continue to work, but updating to use Unicode literals will prevent some "
"obscure problems."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:34
msgid "See :doc:`/ref/unicode` for full details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:37
#: ../../../../sources/1.10/docs/releases/1.10.txt:386
#: ../../../../sources/1.10/docs/releases/1.7.txt:744
#: ../../../../sources/1.10/docs/releases/1.8.txt:494
#: ../../../../sources/1.10/docs/releases/1.9.txt:482
msgid "Models"
msgstr "Modele"

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:39
msgid "Common changes to your models file:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:42
msgid "Rename ``maxlength`` to ``max_length``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:44
msgid ""
"Rename your ``maxlength`` argument to ``max_length`` (this was changed to be"
" consistent with form fields):"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:48
msgid "Replace ``__str__`` with ``__unicode__``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:50
msgid ""
"Replace your model's ``__str__`` function with a ``__unicode__`` method, and"
" make sure you `use Unicode`_ (``u'foo'``) in that method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:54
msgid "Remove ``prepopulated_from``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:56
msgid ""
"Remove the ``prepopulated_from`` argument on model fields. It's no longer "
"valid and has been moved to the ``ModelAdmin`` class in ``admin.py``. See "
"`the admin`_, below, for more details about changes to the admin."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:61
msgid "Remove ``core``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:63
msgid ""
"Remove the ``core`` argument from your model fields. It is no longer "
"necessary, since the equivalent functionality (part of :ref:`inline editing "
"<admin-inlines>`) is handled differently by the admin interface now. You "
"don't have to worry about inline editing until you get to `the admin`_ "
"section, below. For now, remove all references to ``core``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:70
msgid "Replace ``class Admin:`` with ``admin.py``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:72
msgid ""
"Remove all your inner ``class Admin`` declarations from your models. They "
"won't break anything if you leave them, but they also won't do anything. To "
"register apps with the admin you'll move those declarations to an "
"``admin.py`` file; see `the admin`_ below for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:79
msgid ""
"A contributor to djangosnippets__ has written a script that'll `scan your "
"models.py and generate a corresponding admin.py`__."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:86
msgid "Example"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:88
msgid ""
"Below is an example ``models.py`` file with all the changes you'll need to "
"make:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:90
msgid "Old (0.96) ``models.py``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:103
msgid "New (1.0) ``models.py``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:113
msgid "New (1.0) ``admin.py``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:127
msgid "The Admin"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:129
msgid ""
"One of the biggest changes in 1.0 is the new admin. The Django "
"administrative interface (``django.contrib.admin``) has been completely "
"refactored; admin definitions are now completely decoupled from model "
"definitions, the framework has been rewritten to use Django's new form-"
"handling library and redesigned with extensibility and customization in "
"mind."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:135
msgid ""
"Practically, this means you'll need to rewrite all of your ``class Admin`` "
"declarations. You've already seen in `models`_ above how to replace your "
"``class Admin`` with a ``admin.site.register()`` call in an ``admin.py`` "
"file. Below are some more details on how to rewrite that ``Admin`` "
"declaration into the new syntax."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:142
msgid "Use new inline syntax"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:144
msgid ""
"The new ``edit_inline`` options have all been moved to ``admin.py``. Here's "
"an example:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:147
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:176
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:484
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:506
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:523
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:649
msgid "Old (0.96)::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:156
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:196
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:491
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:512
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:529
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:655
msgid "New (1.0)::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:168
msgid "See :ref:`admin-inlines` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:171
msgid "Simplify ``fields``, or use ``fieldsets``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:173
msgid ""
"The old ``fields`` syntax was quite confusing, and has been simplified. The "
"old syntax still works, but you'll need to use ``fieldsets`` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:210
msgid ""
"More detailed information about the changes and the reasons behind them can "
"be found on the `NewformsAdminBranch wiki page`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:213
msgid ""
"The new admin comes with a ton of new features; you can read about them in "
"the :doc:`admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:219
#: ../../../../sources/1.10/docs/releases/1.10.txt:500
#: ../../../../sources/1.10/docs/releases/1.9.txt:653
msgid "URLs"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:222
msgid "Update your root ``urls.py``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:224
msgid ""
"If you're using the admin site, you need to update your root ``urls.py``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:226
msgid "Old (0.96) ``urls.py``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:236
msgid "New (1.0) ``urls.py``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:251
msgid "Views"
msgstr "Widoki"

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:254
msgid "Use ``django.forms`` instead of ``newforms``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:256
msgid ""
"Replace ``django.newforms`` with ``django.forms`` -- Django 1.0 renamed the "
"``newforms`` module (introduced in 0.96) to plain old ``forms``. The "
"``oldforms`` module was also removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:260
msgid ""
"If you're already using the ``newforms`` library, and you used our "
"recommended ``import`` statement syntax, all you have to do is change your "
"import statements."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:264
msgid "Old::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:268
msgid "New::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:272
msgid ""
"If you're using the old forms system (formerly known as ``django.forms`` and"
" ``django.oldforms``), you'll have to rewrite your forms. A good place to "
"start is the :doc:`forms documentation </topics/forms/index>`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:277
msgid "Handle uploaded files using the new API"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:279
msgid ""
"Replace use of uploaded files -- that is, entries in ``request.FILES`` -- as"
" simple dictionaries with the new "
":class:`~django.core.files.uploadedfile.UploadedFile`. The old dictionary "
"syntax no longer works."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:284
msgid "Thus, in a view like::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:290
msgid "...you'd need to make the following changes:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:293
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:310
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:382
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:741
msgid "Old (0.96)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:293
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:310
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:382
#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:741
msgid "New (1.0)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:295
msgid "``f['content']``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:295
msgid "``f.read()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:296
msgid "``f['filename']``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:296
msgid "``f.name``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:297
msgid "``f['content-type']``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:297
msgid "``f.content_type``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:301
msgid "Work with file fields using the new API"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:303
msgid ""
"The internal implementation of :class:`django.db.models.FileField` have "
"changed. A visible result of this is that the way you access special "
"attributes (URL, filename, image size, etc.) of these model fields has "
"changed. You will need to make the following changes, assuming your model's "
":class:`~django.db.models.FileField` is called ``myfile``:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:312
msgid "``myfile.get_content_filename()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:312
msgid "``myfile.content.path``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:313
msgid "``myfile.get_content_url()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:313
msgid "``myfile.content.url``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:314
msgid "``myfile.get_content_size()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:314
msgid "``myfile.content.size``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:315
msgid "``myfile.save_content_file()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:315
msgid "``myfile.content.save()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:316
msgid "``myfile.get_content_width()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:316
msgid "``myfile.content.width``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:317
msgid "``myfile.get_content_height()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:317
msgid "``myfile.content.height``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:320
msgid ""
"Note that the ``width`` and ``height`` attributes only make sense for "
":class:`~django.db.models.ImageField` fields. More details can be found in "
"the :doc:`model API </ref/models/fields>` documentation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:325
msgid "Use ``Paginator`` instead of ``ObjectPaginator``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:327
msgid ""
"The ``ObjectPaginator`` in 0.96 has been removed and replaced with an "
"improved version, :class:`django.core.paginator.Paginator`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:331
#: ../../../../sources/1.10/docs/releases/1.10.txt:469
#: ../../../../sources/1.10/docs/releases/1.7.txt:814
#: ../../../../sources/1.10/docs/releases/1.8.txt:561
#: ../../../../sources/1.10/docs/releases/1.9.txt:598
msgid "Templates"
msgstr "Szablony"

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:334
msgid "Learn to love autoescaping"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:336
msgid ""
"By default, the template system now automatically HTML-escapes the output of"
" every variable. To learn more, see :ref:`automatic-html-escaping`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:339
msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe`"
" filter:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:347
msgid ""
"To disable auto-escaping for an entire template, wrap the template (or just "
"a particular section of the template) in the :ttag:`autoescape` tag:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:357
msgid "Less-common changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:359
msgid ""
"The following changes are smaller, more localized changes. They should only "
"affect more advanced users, but it's probably worth reading through the list"
" and checking your code for these things."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:364
#: ../../../../sources/1.10/docs/releases/1.7.txt:804
#: ../../../../sources/1.10/docs/releases/1.8.txt:541
msgid "Signals"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:366
msgid "Add ``**kwargs`` to any registered signal handlers."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:368
msgid ""
"Connect, disconnect, and send signals via methods on the "
":class:`~django.dispatch.Signal` object instead of through module methods in"
" ``django.dispatch.dispatcher``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:372
msgid ""
"Remove any use of the ``Anonymous`` and ``Any`` sender options; they no "
"longer exist. You can still receive signals sent by any sender by using "
"``sender=None``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:376
msgid ""
"Make any custom signals you've declared into instances of "
":class:`django.dispatch.Signal` instead of anonymous objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:379
msgid "Here's quick summary of the code changes you'll need to make:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:384
msgid "``def callback(sender)``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:384
msgid "``def callback(sender, **kwargs)``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:385
msgid "``sig = object()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:385
msgid "``sig = django.dispatch.Signal()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:386
msgid "``dispatcher.connect(callback, sig)``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:386
msgid "``sig.connect(callback)``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:387
msgid "``dispatcher.send(sig, sender)``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:387
msgid "``sig.send(sender)``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:388
msgid "``dispatcher.connect(callback, sig, sender=Any)``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:388
msgid "``sig.connect(callback, sender=None)``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:392
msgid "Comments"
msgstr "Komentarze"

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:394
msgid ""
"If you were using Django 0.96's ``django.contrib.comments`` app, you'll need"
" to upgrade to the new comments app introduced in 1.0. See the upgrade guide"
" for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:399
msgid "Template tags"
msgstr "Tagi szablonu"

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:402
msgid ":ttag:`spaceless` tag"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:404
msgid ""
"The spaceless template tag now removes *all* spaces between HTML tags, "
"instead of preserving a single space."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:408
msgid "Local flavors"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:411
msgid "U.S. local flavor"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:413
msgid ""
"``django.contrib.localflavor.usa`` has been renamed to "
"``django.contrib.localflavor.us``. This change was made to match the naming "
"scheme of other local flavors. To migrate your code, all you need to do is "
"change the imports."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:419
msgid "Sessions"
msgstr "Sesje"

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:422
msgid "Getting a new session key"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:424
msgid ""
"``SessionBase.get_new_session_key()`` has been renamed to "
"``_get_new_session_key()``. ``get_new_session_object()`` no longer exists."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:428
msgid "Fixtures"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:431
msgid "Loading a row no longer calls ``save()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:433
msgid ""
"Previously, loading a row automatically ran the model's ``save()`` method. "
"This is no longer the case, so any fields (for example: timestamps) that "
"were auto-populated by a ``save()`` now need explicit values in any fixture."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:438
msgid "Settings"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:441
msgid "Better exceptions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:443
msgid ""
"The old :exc:`EnvironmentError` has split into an :exc:`ImportError` when "
"Django fails to find the settings module and a :exc:`RuntimeError` when you "
"try to reconfigure settings after having already used them."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:449
msgid ":setting:`LOGIN_URL` has moved"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:451
msgid ""
"The :setting:`LOGIN_URL` constant moved from ``django.contrib.auth`` into "
"the ``settings`` module. Instead of using ``from django.contrib.auth import "
"LOGIN_URL`` refer to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:456
msgid ":setting:`APPEND_SLASH` behavior has been updated"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:458
msgid ""
"In 0.96, if a URL didn't end in a slash or have a period in the final "
"component of its path, and :setting:`APPEND_SLASH` was True, Django would "
"redirect to the same URL, but with a slash appended to the end. Now, Django "
"checks to see whether the pattern without the trailing slash would be "
"matched by something in your URL patterns. If so, no redirection takes "
"place, because it is assumed you deliberately wanted to catch that pattern."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:465
msgid ""
"For most people, this won't require any changes. Some people, though, have "
"URL patterns that look like this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:470
msgid ""
"Previously, those patterns would have been redirected to have a trailing "
"slash. If you always want a slash on such URLs, rewrite the pattern as::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:476
msgid "Smaller model changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:479
msgid "Different exception from ``get()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:481
msgid ""
"Managers now return a :exc:`~django.core.exceptions.MultipleObjectsReturned`"
" exception instead of :exc:`AssertionError`:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:499
msgid "``LazyDate`` has been fired"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:501
msgid "The ``LazyDate`` helper class no longer exists."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:503
msgid ""
"Default field values and query arguments can both be callable objects, so "
"instances of ``LazyDate`` can be replaced with a reference to "
"``datetime.datetime.now``:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:521
msgid "``DecimalField`` is new, and ``FloatField`` is now a proper float"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:535
msgid ""
"If you forget to make this change, you will see errors about ``FloatField`` "
"not taking a ``max_digits`` attribute in ``__init__``, because the new "
"``FloatField`` takes no precision-related arguments."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:539
msgid ""
"If you're using MySQL or PostgreSQL, no further changes are needed. The "
"database column types for ``DecimalField`` are the same as for the old "
"``FloatField``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:543
msgid ""
"If you're using SQLite, you need to force the database to view the "
"appropriate columns as decimal types, rather than floats. To do this, you'll"
" need to reload your data. Do this after you have made the change to using "
"``DecimalField`` in your code and updated the Django code."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:550
msgid "**Back up your database first!**"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:552
msgid ""
"For SQLite, this means making a copy of the single file that stores the "
"database (the name of that file is the ``DATABASE_NAME`` in your settings.py"
" file)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:556
msgid ""
"To upgrade each application to use a ``DecimalField``, you can do the "
"following, replacing ``<app>`` in the code below with each app's name:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:565
msgid "Notes:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:567
msgid ""
"It's important that you remember to use XML format in the first step of this"
" process. We are exploiting a feature of the XML data dumps that makes "
"porting floats to decimals with SQLite possible."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:571
msgid ""
"In the second step you will be asked to confirm that you are prepared to "
"lose the data for the application(s) in question. Say yes; we'll restore "
"this data in the third step, of course."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:575
msgid ""
"``DecimalField`` is not used in any of the apps shipped with Django prior to"
" this change being made, so you do not need to worry about performing this "
"procedure for any of the standard Django models."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:579
msgid ""
"If something goes wrong in the above process, just copy your backed up "
"database file over the original file and start again."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:583
#: ../../../../sources/1.10/docs/releases/1.10.txt:302
#: ../../../../sources/1.10/docs/releases/1.7.txt:658
#: ../../../../sources/1.10/docs/releases/1.8.txt:391
#: ../../../../sources/1.10/docs/releases/1.9.txt:382
msgid "Internationalization"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:586
msgid ":func:`django.views.i18n.set_language` now requires a POST request"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:588
msgid ""
"Previously, a GET request was used. The old behavior meant that state (the "
"locale used to display the site) could be changed by a GET request, which is"
" against the HTTP specification's recommendations. Code calling this view "
"must ensure that a POST request is now made, instead of a GET. This means "
"you can no longer use a link to access the view, but must use a form "
"submission of some kind (e.g. a button)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:596
msgid "``_()`` is no longer in builtins"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:598
msgid ""
"``_()`` (the callable object whose name is a single underscore) is no longer"
" monkeypatched into builtins -- that is, it's no longer available magically "
"in every module."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:602
msgid ""
"If you were previously relying on ``_()`` always being present, you should "
"now explicitly import ``ugettext`` or ``ugettext_lazy``, if appropriate, and"
" alias it to ``_`` yourself::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:609
msgid "HTTP request/response objects"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:612
msgid "Dictionary access to ``HttpRequest``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:614
msgid ""
"``HttpRequest`` objects no longer directly support dictionary-style access; "
"previously, both ``GET`` and ``POST`` data were directly available on the "
"``HttpRequest`` object (e.g., you could check for a piece of form data by "
"using ``if 'some_form_key' in request`` or by reading "
"``request['some_form_key']``. This is no longer supported; if you need "
"access to the combined ``GET`` and ``POST`` data, use ``request.REQUEST`` "
"instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:622
msgid ""
"It is strongly suggested, however, that you always explicitly look in the "
"appropriate dictionary for the type of request you expect to receive "
"(``request.GET`` or ``request.POST``); relying on the combined "
"``request.REQUEST`` dictionary can mask the origin of incoming data."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:628
msgid "Accessing ``HTTPResponse`` headers"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:630
msgid ""
"``django.http.HttpResponse.headers`` has been renamed to ``_headers`` and "
":class:`~django.http.HttpResponse` now supports containment checking "
"directly. So use ``if header in response:`` instead of ``if header in "
"response.headers:``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:635
msgid "Generic relations"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:638
msgid "Generic relations have been moved out of core"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:640
msgid ""
"The generic relation classes -- ``GenericForeignKey`` and "
"``GenericRelation`` -- have moved into the "
":mod:`django.contrib.contenttypes` module."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:644
msgid "Testing"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:647
msgid ":meth:`django.test.Client.login` has changed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:661
msgid "Management commands"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:664
msgid "Running management commands from your code"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:666
msgid ":mod:`django.core.management` has been greatly refactored."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:668
msgid ""
"Calls to management services in your code now need to use ``call_command``. "
"For example, if you have some test code that calls flush and load_data::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:676
msgid "...you'll need to change this code to read::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:683
msgid "Subcommands must now precede options"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:685
msgid ""
"``django-admin.py`` and ``manage.py`` now require subcommands to precede "
"options. So:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:692
msgid "...no longer works and should be changed to:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:699
msgid "Syndication"
msgstr "Syndykacja treści"

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:702
msgid "``Feed.__init__`` has changed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:704
msgid ""
"The ``__init__()`` method of the syndication framework's ``Feed`` class now "
"takes an ``HttpRequest`` object as its second parameter, instead of the "
"feed's URL. This allows the syndication framework to work without requiring "
"the sites framework. This only affects code that subclasses ``Feed`` and "
"overrides the ``__init__()`` method, and code that calls ``Feed.__init__()``"
" directly."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:711
msgid "Data structures"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:714
msgid "``SortedDictFromList`` is gone"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:716
msgid ""
"``django.newforms.forms.SortedDictFromList`` was removed. "
"``django.utils.datastructures.SortedDict`` can now be instantiated with a "
"sequence of tuples."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:720
msgid "To update your code:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:722
msgid ""
"Use ``django.utils.datastructures.SortedDict`` wherever you were using "
"``django.newforms.forms.SortedDictFromList``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:725
msgid ""
"Because ``django.utils.datastructures.SortedDict.copy`` doesn't return a "
"deepcopy as ``SortedDictFromList.copy()`` did, you will need to update your "
"code if you were relying on a deepcopy. Do this by using ``copy.deepcopy`` "
"directly."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:731
msgid "Database backend functions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:734
msgid "Database backend functions have been renamed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:736
msgid ""
"Almost *all* of the database backend-level functions have been renamed "
"and/or relocated. None of these were documented, but you'll need to change "
"your code if you're using any of these functions, all of which are in "
":mod:`django.db`:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:743
msgid "``backend.get_autoinc_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:743
msgid "``connection.ops.autoinc_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:744
msgid "``backend.get_date_extract_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:744
msgid "``connection.ops.date_extract_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:745
msgid "``backend.get_date_trunc_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:745
msgid "``connection.ops.date_trunc_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:746
msgid "``backend.get_datetime_cast_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:746
msgid "``connection.ops.datetime_cast_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:747
msgid "``backend.get_deferrable_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:747
msgid "``connection.ops.deferrable_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:748
msgid "``backend.get_drop_foreignkey_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:748
msgid "``connection.ops.drop_foreignkey_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:749
msgid "``backend.get_fulltext_search_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:749
msgid "``connection.ops.fulltext_search_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:750
msgid "``backend.get_last_insert_id``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:750
msgid "``connection.ops.last_insert_id``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:751
msgid "``backend.get_limit_offset_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:751
msgid "``connection.ops.limit_offset_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:752
msgid "``backend.get_max_name_length``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:752
msgid "``connection.ops.max_name_length``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:753
msgid "``backend.get_pk_default_value``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:753
msgid "``connection.ops.pk_default_value``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:754
msgid "``backend.get_random_function_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:754
msgid "``connection.ops.random_function_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:755
msgid "``backend.get_sql_flush``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:755
msgid "``connection.ops.sql_flush``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:756
msgid "``backend.get_sql_sequence_reset``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:756
msgid "``connection.ops.sequence_reset_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:757
msgid "``backend.get_start_transaction_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:757
msgid "``connection.ops.start_transaction_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:758
msgid "``backend.get_tablespace_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:758
msgid "``connection.ops.tablespace_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:759
msgid "``backend.quote_name``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:759
msgid "``connection.ops.quote_name``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:760
msgid "``backend.get_query_set_class``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:760
msgid "``connection.ops.query_set_class``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:761
msgid "``backend.get_field_cast_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:761
msgid "``connection.ops.field_cast_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:762
msgid "``backend.get_drop_sequence``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:762
msgid "``connection.ops.drop_sequence_sql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:763
msgid "``backend.OPERATOR_MAPPING``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:763
msgid "``connection.operators``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:764
msgid "``backend.allows_group_by_ordinal``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:764
msgid "``connection.features.allows_group_by_ordinal``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:765
msgid "``backend.allows_unique_and_pk``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:765
msgid "``connection.features.allows_unique_and_pk``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:766
msgid "``backend.autoindexes_primary_keys``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:766
msgid "``connection.features.autoindexes_primary_keys``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:767
msgid "``backend.needs_datetime_string_cast``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:767
msgid "``connection.features.needs_datetime_string_cast``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:768
msgid "``backend.needs_upper_for_iops``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:768
msgid "``connection.features.needs_upper_for_iops``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:769
msgid "``backend.supports_constraints``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:769
msgid "``connection.features.supports_constraints``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:770
msgid "``backend.supports_tablespaces``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:770
msgid "``connection.features.supports_tablespaces``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:771
msgid "``backend.uses_case_insensitive_names``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:771
msgid "``connection.features.uses_case_insensitive_names``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:772
msgid "``backend.uses_custom_queryset``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0-porting-guide.txt:772
msgid "``connection.features.uses_custom_queryset``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:3
msgid "Django 1.0.1 release notes"
msgstr "Informacje o wydaniu Django 1.0.1"

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:5
msgid "Welcome to Django 1.0.1!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:7
msgid ""
"This is the first \"bugfix\" release in the Django 1.0 series, improving the"
" stability and performance of the Django 1.0 codebase. As such, Django 1.0.1"
" contains no new features (and, pursuant to :doc:`our compatibility policy "
"</misc/api-stability/>`, maintains backwards compatibility with Django 1.0),"
" but does contain a number of fixes and other improvements. Django 1.0.1 is "
"a recommended upgrade for any development or deployment currently using or "
"targeting Django 1.0."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:17
msgid "Fixes and improvements in Django 1.0.1"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:19
msgid ""
"Django 1.0.1 contains over two hundred fixes to the original Django 1.0 "
"codebase; full details of every fix are available in `the history of the "
"1.0.X branch`_, but here are some of the highlights:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:24
msgid ""
"Several fixes in ``django.contrib.comments``, pertaining to RSS feeds of "
"comments, default ordering of comments and the XHTML and "
"internationalization of the default templates for comments."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:28
msgid ""
"Multiple fixes for Django's support of Oracle databases, including "
"pagination support for GIS QuerySets, more efficient slicing of results and "
"improved introspection of existing databases."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:32
msgid ""
"Several fixes for query support in the Django object-relational mapper, "
"including repeated setting and resetting of ordering and fixes for working "
"with ``INSERT``-only queries."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:36
msgid "Multiple fixes for inline forms in formsets."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:38
msgid ""
"Multiple fixes for ``unique`` and ``unique_together`` model constraints in "
"automatically-generated forms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:41
msgid ""
"Fixed support for custom callable ``upload_to`` declarations when handling "
"file uploads through automatically-generated forms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:44
msgid ""
"Fixed support for sorting an admin change list based on a callable "
"attributes in ``list_display``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:47
msgid ""
"A fix to the application of autoescaping for literal strings passed to the "
"``join`` template filter. Previously, literal strings passed to ``join`` "
"were automatically escaped, contrary to :ref:`the documented behavior for "
"autoescaping and literal strings <string-literals-and-automatic-escaping>`. "
"Literal strings passed to ``join`` are no longer automatically escaped, "
"meaning you must now manually escape them; this is an incompatibility if you"
" were relying on this bug, but not if you were relying on escaping behaving "
"as documented."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:57
msgid ""
"Improved and expanded translation files for many of the languages Django "
"supports by default."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.1.txt:60
msgid ""
"And as always, a large number of improvements to Django's documentation, "
"including both corrections to existing documents and expanded and new "
"documentation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:3
msgid "Django 1.0.2 release notes"
msgstr "Informacje o wydaniu Django 1.0.2"

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:5
msgid "Welcome to Django 1.0.2!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:7
msgid ""
"This is the second \"bugfix\" release in the Django 1.0 series, improving "
"the stability and performance of the Django 1.0 codebase. As such, Django "
"1.0.2 contains no new features (and, pursuant to :doc:`our compatibility "
"policy </misc/api-stability>`, maintains backwards compatibility with Django"
" 1.0.0), but does contain a number of fixes and other improvements. Django "
"1.0.2 is a recommended upgrade for any development or deployment currently "
"using or targeting Django 1.0."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:17
msgid "Fixes and improvements in Django 1.0.2"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:19
msgid ""
"The primary reason behind this release is to remedy an issue in the "
"recently-released Django 1.0.1; the packaging scripts used for Django 1.0.1 "
"omitted some directories from the final release package, including one "
"directory required by ``django.contrib.gis`` and part of Django's unit-test "
"suite."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:25
msgid ""
"Django 1.0.2 contains updated packaging scripts, and the release package "
"contains the directories omitted from Django 1.0.1. As such, this release "
"contains all of the fixes and improvements from Django 1.0.1; see :doc:`the "
"Django 1.0.1 release notes </releases/1.0.1>` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:31
msgid "Additionally, in the period since Django 1.0.1 was released:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:33
msgid "Updated Hebrew and Danish translations have been added."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:35
msgid ""
"The default ``__repr__`` method of Django models has been made more robust "
"in the face of bad Unicode data coming from the ``__unicode__`` method; "
"rather than raise an exception in such cases, ``repr()`` will now contain "
"the string \"[Bad Unicode data]\" in place of the invalid Unicode."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:41
msgid ""
"A bug involving the interaction of Django's ``SafeUnicode`` class and the "
"MySQL adapter has been resolved; ``SafeUnicode`` instances (generated, for "
"example, by template rendering) can now be assigned to model attributes and "
"saved to MySQL without requiring an explicit intermediate cast to "
"``unicode``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:47
msgid ""
"A bug affecting filtering on a nullable ``DateField`` in SQLite has been "
"resolved."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.0.2.txt:50
msgid ""
"Several updates and improvements have been made to Django's documentation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:3
msgid "Django 1.1 release notes"
msgstr "Informacje o wydaniu Django 1.1"

#: ../../../../sources/1.10/docs/releases/1.1.txt:5
msgid "July 29, 2009"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:7
msgid "Welcome to Django 1.1!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:9
msgid ""
"Django 1.1 includes a number of nifty :ref:`new features <whats-new-1.1>`, "
"lots of bug fixes, and an easy upgrade path from Django 1.0."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:15
msgid "Backwards-incompatible changes in 1.1"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:17
msgid ""
"Django has a policy of :doc:`API stability </misc/api-stability>`. This "
"means that, in general, code you develop against Django 1.0 should continue "
"to work against 1.1 unchanged. However, we do sometimes make backwards-"
"incompatible changes if they're necessary to resolve bugs, and there are a "
"handful of such (minor) changes between Django 1.0 and Django 1.1."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:23
msgid ""
"Before upgrading to Django 1.1 you should double-check that the following "
"changes don't impact you, and upgrade your code if they do."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:27
msgid "Changes to constraint names"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:29
msgid ""
"Django 1.1 modifies the method used to generate database constraint names so"
" that names are consistent regardless of machine word size. This change is "
"backwards incompatible for some users."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:33
msgid ""
"If you are using a 32-bit platform, you're off the hook; you'll observe no "
"differences as a result of this change."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:36
msgid ""
"However, **users on 64-bit platforms may experience some problems** using "
"the ``reset`` management command. Prior to this change, 64-bit platforms "
"would generate a 64-bit, 16 character digest in the constraint name; for "
"example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:43
msgid ""
"Following this change, all platforms, regardless of word size, will generate"
" a 32-bit, 8 character digest in the constraint name; for example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:48
msgid ""
"As a result of this change, you will not be able to use the ``reset`` "
"management command on any table made by a 64-bit machine. This is because "
"the new generated name will not match the historically generated name; as a "
"result, the SQL constructed by the reset command will be invalid."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:53
msgid ""
"If you need to reset an application that was created with 64-bit "
"constraints, you will need to manually drop the old constraint prior to "
"invoking ``reset``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:58
msgid "Test cases are now run in a transaction"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:60
msgid ""
"Django 1.1 runs tests inside a transaction, allowing better test performance"
" (see `test performance improvements`_ for details)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:63
msgid ""
"This change is slightly backwards incompatible if existing tests need to "
"test transactional behavior, if they rely on invalid assumptions about the "
"test environment, or if they require a specific test case ordering."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:67
msgid ""
"For these cases, :class:`~django.test.TransactionTestCase` can be used "
"instead. This is a just a quick fix to get around test case errors revealed "
"by the new rollback approach; in the long-term tests should be rewritten to "
"correct the test case."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:75
msgid "Removed ``SetRemoteAddrFromForwardedFor`` middleware"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:77
msgid ""
"For convenience, Django 1.0 included an optional middleware class -- "
"``django.middleware.http.SetRemoteAddrFromForwardedFor`` -- which updated "
"the value of ``REMOTE_ADDR`` based on the HTTP ``X-Forwarded-For`` header "
"commonly set by some proxy configurations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:82
msgid ""
"It has been demonstrated that this mechanism cannot be made reliable enough "
"for general-purpose use, and that (despite documentation to the contrary) "
"its inclusion in Django may lead application developers to assume that the "
"value of ``REMOTE_ADDR`` is \"safe\" or in some way reliable as a source of "
"authentication."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:87
msgid ""
"While not directly a security issue, we've decided to remove this middleware"
" with the Django 1.1 release. It has been replaced with a class that does "
"nothing other than raise a ``DeprecationWarning``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:91
msgid ""
"If you've been relying on this middleware, the easiest upgrade path is:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:93
msgid "Examine `the code as it existed before it was removed`__."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:95
msgid ""
"Verify that it works correctly with your upstream proxy, modifying it to "
"support your particular proxy (if necessary)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:98
msgid ""
"Introduce your modified version of ``SetRemoteAddrFromForwardedFor`` as a "
"piece of middleware in your own project."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:104
msgid "Names of uploaded files are available later"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:108
msgid ""
"In Django 1.0, files uploaded and stored in a model's :class:`FileField` "
"were saved to disk before the model was saved to the database. This meant "
"that the actual file name assigned to the file was available before saving. "
"For example, it was available in a model's pre-save signal handler."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:113
msgid ""
"In Django 1.1 the file is saved as part of saving the model in the database,"
" so the actual file name used on disk cannot be relied on until *after* the "
"model has been saved."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:118
msgid "Changes to how model formsets are saved"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:120
msgid ""
"In Django 1.1, :class:`~django.forms.models.BaseModelFormSet` now calls "
"``ModelForm.save()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:123
msgid ""
"This is backwards-incompatible if you were modifying ``self.initial`` in a "
"model formset's ``__init__``, or if you relied on the internal "
"``_total_form_count`` or ``_initial_form_count`` attributes of BaseFormSet. "
"Those attributes are now public methods."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:129
msgid "Fixed the ``join`` filter's escaping behavior"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:131
msgid ""
"The :tfilter:`join` filter no longer escapes the literal value that is "
"passed in for the connector."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:134
msgid ""
"This is backwards incompatible for the special situation of the literal "
"string containing one of the five special HTML characters. Thus, if you were"
" writing ``{{ foo|join:\"&\" }}``, you now have to write ``{{ "
"foo|join:\"&amp;\" }}``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:138
msgid ""
"The previous behavior was a bug and contrary to what was documented and "
"expected."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:142
msgid "Permanent redirects and the ``redirect_to()`` generic view"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:144
msgid ""
"Django 1.1 adds a ``permanent`` argument to the "
"``django.views.generic.simple.redirect_to()`` view. This is technically "
"backwards-incompatible if you were using the ``redirect_to`` view with a "
"format-string key called 'permanent', which is highly unlikely."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:152
msgid "Features deprecated in 1.1"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:154
msgid "One feature has been marked as deprecated in Django 1.1:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:156
msgid ""
"You should no longer use ``AdminSite.root()`` to register that admin views. "
"That is, if your URLconf contains the line::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:161
msgid "You should change it to read::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:165
msgid ""
"You should begin to remove use of this feature from your code immediately."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:167
msgid ""
"``AdminSite.root`` will raise a ``PendingDeprecationWarning`` if used in "
"Django 1.1. This warning is hidden by default. In Django 1.2, this warning "
"will be upgraded to a ``DeprecationWarning``, which will be displayed "
"loudly. Django 1.3 will remove ``AdminSite.root()`` entirely."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:172
msgid ""
"For more details on our deprecation policies and strategy, see "
":doc:`/internals/release-process`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:178
msgid "What's new in Django 1.1"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:180
msgid ""
"Quite a bit: since Django 1.0, we've made 1,290 code commits, fixed 1,206 "
"bugs, and added roughly 10,000 lines of documentation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:183
msgid "The major new features in Django 1.1 are:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:186
msgid "ORM improvements"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:190
msgid ""
"Two major enhancements have been added to Django's object-relational mapper "
"(ORM): aggregate support, and query expressions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:194
msgid "Aggregate support"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:196
msgid ""
"It's now possible to run SQL aggregate queries (i.e. ``COUNT()``, ``MAX()``,"
" ``MIN()``, etc.) from within Django's ORM. You can choose to either return "
"the results of the aggregate directly, or else annotate the objects in a "
":class:`~django.db.models.query.QuerySet` with the results of the aggregate "
"query."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:202
msgid ""
"This feature is available as new "
":meth:`~django.db.models.query.QuerySet.aggregate` and "
":meth:`~django.db.models.query.QuerySet.annotate` methods, and is covered in"
" detail in :doc:`the ORM aggregation documentation "
"</topics/db/aggregation>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:208
msgid "Query expressions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:210
msgid ""
"Queries can now refer to a another field on the query and can traverse "
"relationships to refer to fields on related models. This is implemented in "
"the new :class:`~django.db.models.F` object; for full details, including "
"examples, consult the :class:`F expressions documentation "
"<django.db.models.F>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:216
msgid "Model improvements"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:218
msgid "A number of features have been added to Django's model layer:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:221
msgid "\"Unmanaged\" models"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:223
msgid ""
"You can now control whether or not Django manages the life-cycle of the "
"database tables for a model using the :attr:`~Options.managed` model option."
" This defaults to ``True``, meaning that Django will create the appropriate "
"database tables in ``syncdb`` and remove them as part of the ``reset`` "
"command. That is, Django *manages* the database table's lifecycle."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:229
msgid ""
"If you set this to ``False``, however, no database table creating or "
"deletion will be automatically performed for this model. This is useful if "
"the model represents an existing table or a database view that has been "
"created by some other means."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:234
msgid ""
"For more details, see the documentation for the :attr:`~Options.managed` "
"option."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:238
msgid "Proxy models"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:240
msgid ""
"You can now create :ref:`proxy models <proxy-models>`: subclasses of "
"existing models that only add Python-level (rather than database-level) "
"behavior and aren't represented by a new table. That is, the new model is a "
"*proxy* for some underlying model, which stores all the real data."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:245
msgid ""
"All the details can be found in the :ref:`proxy models documentation <proxy-"
"models>`. This feature is similar on the surface to unmanaged models, so the"
" documentation has an explanation of :ref:`how proxy models differ from "
"unmanaged models <proxy-vs-unmanaged-models>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:251
msgid "Deferred fields"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:253
msgid ""
"In some complex situations, your models might contain fields which could "
"contain a lot of data (for example, large text fields), or require expensive"
" processing to convert them to Python objects. If you know you don't need "
"those particular fields, you can now tell Django not to retrieve them from "
"the database."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:259
msgid ""
"You'll do this with the new queryset methods "
":meth:`~django.db.models.query.QuerySet.defer` and "
":meth:`~django.db.models.query.QuerySet.only`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:264
msgid "Testing improvements"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:266
msgid ""
"A few notable improvements have been made to the :doc:`testing framework "
"</topics/testing/index>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:270
msgid "Test performance improvements"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:274
msgid ""
"Tests written using Django's :doc:`testing framework "
"</topics/testing/index>` now run dramatically faster (as much as 10 times "
"faster in many cases)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:277
msgid ""
"This was accomplished through the introduction of transaction-based tests: "
"when using :class:`django.test.TestCase`, your tests will now be run in a "
"transaction which is rolled back when finished, instead of by flushing and "
"re-populating the database. This results in an immense speedup for most "
"types of unit tests. See the documentation for :class:`TestCase` and "
":class:`TransactionTestCase` for a full description, and some important "
"notes on database support."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:285
msgid "Test client improvements"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:287
msgid ""
"A couple of small -- but highly useful -- improvements have been made to the"
" test client:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:290
msgid ""
"The test :class:`Client` now can automatically follow redirects with the "
"``follow`` argument to :meth:`Client.get` and :meth:`Client.post`. This "
"makes testing views that issue redirects simpler."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:294
msgid ""
"It's now easier to get at the template context in the response returned the "
"test client: you'll simply access the context as ``request.context[key]``. "
"The old way, which treats ``request.context`` as a list of contexts, one for"
" each rendered template in the inheritance chain, is still available if you "
"need it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:301
msgid "New admin features"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:303
msgid ""
"Django 1.1 adds a couple of nifty new features to Django's admin interface:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:306
msgid "Editable fields on the change list"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:308
msgid ""
"You can now make fields editable on the admin list views via the new "
":ref:`list_editable <admin-list-editable>` admin option. These fields will "
"show up as form widgets on the list pages, and can be edited and saved in "
"bulk."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:313
msgid "Admin \"actions\""
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:315
msgid ""
"You can now define :doc:`admin actions </ref/contrib/admin/actions>` that "
"can perform some action to a group of models in bulk. Users will be able to "
"select objects on the change list page and then apply these bulk actions to "
"all selected objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:320
msgid ""
"Django ships with one pre-defined admin action to delete a group of objects "
"in one fell swoop."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:324
msgid "Conditional view processing"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:326
msgid ""
"Django now has much better support for :doc:`conditional view processing "
"</topics/conditional-view-processing>` using the standard ``ETag`` and "
"``Last-Modified`` HTTP headers. This means you can now easily short-circuit "
"view processing by testing less-expensive conditions. For many views this "
"can lead to a serious improvement in speed and reduction in bandwidth."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:333
msgid "URL namespaces"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:335
msgid ""
"Django 1.1 improves :ref:`named URL patterns <naming-url-patterns>` with the"
" introduction of URL \"namespaces.\""
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:338
msgid ""
"In short, this feature allows the same group of URLs, from the same "
"application, to be included in a Django URLConf multiple times, with varying"
" (and potentially nested) named prefixes which will be used when performing "
"reverse resolution. In other words, reusable applications like Django's "
"admin interface may be registered multiple times without URL conflicts."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:344
msgid ""
"For full details, see :ref:`the documentation on defining URL namespaces "
"<topics-http-defining-url-namespaces>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:348
#: ../../../../sources/1.10/docs/releases/1.2.txt:339
#: ../../../../sources/1.10/docs/releases/1.2.txt:1080
#: ../../../../sources/1.10/docs/releases/1.2.4.txt:76
#: ../../../../sources/1.10/docs/releases/1.3.txt:247
#: ../../../../sources/1.10/docs/releases/1.3.txt:787
#: ../../../../sources/1.10/docs/releases/1.5.txt:216
msgid "GeoDjango"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:350
msgid ""
"In Django 1.1, GeoDjango_ (i.e. ``django.contrib.gis``) has several new "
"features:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:353
msgid ""
"Support for SpatiaLite_ -- a spatial database for SQLite -- as a spatial "
"backend."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:356
msgid ""
"Geographic aggregates (``Collect``, ``Extent``, ``MakeLine``, ``Union``) and"
" ``F`` expressions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:359
msgid ""
"New ``GeoQuerySet`` methods: ``collect``, ``geojson``, and ``snap_to_grid``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:362
msgid "A new list interface methods for ``GEOSGeometry`` objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:364
msgid "For more details, see the GeoDjango documentation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:370
msgid "Other improvements"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:372
msgid "Other new features and changes introduced since Django 1.0 include:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:374
msgid ""
"The :doc:`CSRF protection middleware </ref/csrf>` has been split into two "
"classes -- ``CsrfViewMiddleware`` checks incoming requests, and "
"``CsrfResponseMiddleware`` processes outgoing responses. The combined "
"``CsrfMiddleware`` class (which does both) remains for backwards-"
"compatibility, but using the split classes is now recommended in order to "
"allow fine-grained control of when and where the CSRF processing takes "
"place."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:382
msgid ""
"``reverse()`` and code which uses it (e.g., the ``{% url %}`` template tag) "
"now works with URLs in Django's administrative site, provided that the admin"
" URLs are set up via ``include(admin.site.urls)`` (sending admin requests to"
" the ``admin.site.root`` view still works, but URLs in the admin will not be"
" \"reversible\" when configured this way)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:388
msgid ""
"The ``include()`` function in Django URLconf modules can now accept "
"sequences of URL patterns (generated by ``patterns()``) in addition to "
"module names."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:391
msgid ""
"Instances of Django forms (see :doc:`the forms overview "
"</topics/forms/index>`) now have two additional methods, ``hidden_fields()``"
" and ``visible_fields()``, which return the list of hidden -- i.e., ``<input"
" type=\"hidden\">`` -- and visible fields on the form, respectively."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:396
msgid ""
"The ``redirect_to`` generic view now accepts an additional keyword argument "
"``permanent``. If ``permanent`` is ``True``, the view will emit an HTTP "
"permanent redirect (status code 301). If ``False``, the view will emit an "
"HTTP temporary redirect (status code 302)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:402
msgid ""
"A new database lookup type -- ``week_day`` -- has been added for "
"``DateField`` and ``DateTimeField``. This type of lookup accepts a number "
"between 1 (Sunday) and 7 (Saturday), and returns objects where the field "
"value matches that day of the week. See :ref:`the full list of lookup types "
"<field-lookups>` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:408
msgid ""
"The ``{% for %}`` tag in Django's template language now accepts an optional "
"``{% empty %}`` clause, to be displayed when ``{% for %}`` is asked to loop "
"over an empty sequence. See :doc:`the list of built-in template tags "
"</ref/templates/builtins>` for examples of this."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:413
msgid ""
"The :djadmin:`dumpdata` management command now accepts individual model "
"names as arguments, allowing you to export the data just from particular "
"models."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:417
msgid ""
"There's a new :tfilter:`safeseq` template filter which works just like "
":tfilter:`safe` for lists, marking each item in the list as safe."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:420
msgid ""
":doc:`Cache backends </topics/cache>` now support ``incr()`` and ``decr()`` "
"commands to increment and decrement the value of a cache key. On cache "
"backends that support atomic increment/decrement -- most notably, the "
"memcached backend -- these operations will be atomic, and quite fast."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:426
msgid ""
"Django now can :doc:`easily delegate authentication to the Web server "
"</howto/auth-remote-user>` via a new authentication backend that supports "
"the standard ``REMOTE_USER`` environment variable used for this purpose."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:430
msgid ""
"There's a new :func:`django.shortcuts.redirect` function that makes it "
"easier to issue redirects given an object, a view name, or a URL."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:433
msgid ""
"The ``postgresql_psycopg2`` backend now supports :ref:`native PostgreSQL "
"autocommit <postgresql-notes>`. This is an advanced, PostgreSQL-specific "
"feature, that can make certain read-heavy applications a good deal faster."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:439
msgid "What's next?"
msgstr "Co dalej?"

#: ../../../../sources/1.10/docs/releases/1.1.txt:441
msgid ""
"We'll take a short break, and then work on Django 1.2 will begin -- no rest "
"for the weary! If you'd like to help, discussion of Django development, "
"including progress toward the 1.2 release, takes place daily on the django-"
"developers mailing list:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:446
msgid "https://groups.google.com/group/django-developers"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:448
msgid ""
"... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. Feel "
"free to join the discussions!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:451
msgid ""
"Django's online documentation also includes pointers on how to contribute to"
" Django:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:454
msgid ":doc:`How to contribute to Django </internals/contributing/index>`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:456
msgid ""
"Contributions on any level -- developing code, writing documentation or "
"simply triaging tickets and helping to test proposed bugfixes -- are always "
"welcome and appreciated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.txt:460
msgid "And that's the way it is."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:3
msgid "Django 1.1.2 release notes"
msgstr "Informacje o wydaniu Django 1.1.2"

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:5
msgid "Welcome to Django 1.1.2!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:7
msgid ""
"This is the second \"bugfix\" release in the Django 1.1 series, improving "
"the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:10
msgid ""
"Django 1.1.2 maintains backwards compatibility with Django 1.1.0, but "
"contain a number of fixes and other improvements. Django 1.1.2 is a "
"recommended upgrade for any development or deployment currently using or "
"targeting Django 1.1."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:15
#: ../../../../sources/1.10/docs/releases/1.1.3.txt:15
#: ../../../../sources/1.10/docs/releases/1.1.4.txt:15
msgid ""
"For full details on the new features, backwards incompatibilities, and "
"deprecated features in the 1.1 branch, see the :doc:`/releases/1.1`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:19
msgid "Backwards-incompatible changes in 1.1.2"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:22
#: ../../../../sources/1.10/docs/releases/1.2.txt:670
msgid "Test runner exit status code"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:24
msgid ""
"The exit status code of the test runners (``tests/runtests.py`` and ``python"
" manage.py test``) no longer represents the number of failed tests, since a "
"failure of 256 or more tests resulted in a wrong exit status code.  The exit"
" status code for the test runner is now 0 for success (no failing tests) and"
" 1 for any number of test failures.  If needed, the number of test failures "
"can be found at the end of the test runner's output."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:32
#: ../../../../sources/1.10/docs/releases/1.2.txt:680
msgid "Cookie encoding"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:34
msgid ""
"To fix bugs with cookies in Internet Explorer, Safari, and possibly other "
"browsers, our encoding of cookie values was changed so that the characters "
"comma and semi-colon are treated as non-safe characters, and are therefore "
"encoded as ``\\054`` and ``\\073`` respectively.  This could produce "
"backwards incompatibilities, especially if you are storing comma or semi-"
"colon in cookies and have JavaScript code that parses and manipulates cookie"
" values client-side."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:43
#: ../../../../sources/1.10/docs/releases/1.2.2.txt:19
#: ../../../../sources/1.10/docs/releases/1.2.4.txt:53
msgid "One new feature"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:45
msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.1.2, we have made an exception to this rule. Django 1.2 (the "
"next major release of Django) will contain a feature that will improve "
"protection against Cross-Site Request Forgery (CSRF) attacks. This feature "
"requires the use of a new :ttag:`csrf_token` template tag in all forms that "
"Django renders."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.2.txt:52
msgid ""
"To make it easier to support both 1.1.X and 1.2.X versions of Django with "
"the same templates, we have decided to introduce the :ttag:`csrf_token` "
"template tag to the 1.1.X branch. In the 1.1.X branch, :ttag:`csrf_token` "
"does nothing - it has no effect on templates or form processing. However, it"
" means that the same template will work with Django 1.2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.3.txt:3
msgid "Django 1.1.3 release notes"
msgstr "Informacje o wydaniu Django 1.1.3"

#: ../../../../sources/1.10/docs/releases/1.1.3.txt:5
msgid "Welcome to Django 1.1.3!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.3.txt:7
msgid ""
"This is the third \"bugfix\" release in the Django 1.1 series, improving the"
" stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.3.txt:10
msgid ""
"With one exception, Django 1.1.3 maintains backwards compatibility with "
"Django 1.1.2. It also contains a number of fixes and other improvements. "
"Django 1.1.2 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.1."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.3.txt:19
#: ../../../../sources/1.10/docs/releases/1.1.4.txt:19
#: ../../../../sources/1.10/docs/releases/1.2.4.txt:19
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:19
#: ../../../../sources/1.10/docs/releases/1.4.2.txt:40
#: ../../../../sources/1.10/docs/releases/1.5.5.txt:36
msgid "Backwards incompatible changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.3.txt:22
#: ../../../../sources/1.10/docs/releases/1.2.4.txt:22
#: ../../../../sources/1.10/docs/releases/1.3.txt:338
msgid "Restricted filters in admin interface"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.3.txt:24
#: ../../../../sources/1.10/docs/releases/1.2.4.txt:24
msgid ""
"The Django administrative interface, django.contrib.admin, supports "
"filtering of displayed lists of objects by fields on the corresponding "
"models, including across database-level relationships. This is implemented "
"by passing lookup arguments in the querystring portion of the URL, and "
"options on the ModelAdmin class allow developers to specify particular "
"fields or relationships which will generate automatic links for filtering."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.3.txt:32
#: ../../../../sources/1.10/docs/releases/1.2.4.txt:32
msgid ""
"One historically-undocumented and -unofficially-supported feature has been "
"the ability for a user with sufficient knowledge of a model's structure and "
"the format of these lookup arguments to invent useful new filters on the fly"
" by manipulating the querystring."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.3.txt:37
#: ../../../../sources/1.10/docs/releases/1.2.4.txt:37
msgid ""
"However, it has been demonstrated that this can be abused to gain access to "
"information outside of an admin user's permissions; for example, an attacker"
" with access to the admin and sufficient knowledge of model structure and "
"relations could construct query strings which -- with repeated use of "
"regular-expression lookups supported by the Django database API -- expose "
"sensitive information such as users' password hashes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.3.txt:45
#: ../../../../sources/1.10/docs/releases/1.2.4.txt:45
msgid ""
"To remedy this, django.contrib.admin will now validate that querystring "
"lookup arguments either specify only fields on the model being viewed, or "
"cross relations which have been explicitly whitelisted by the application "
"developer using the pre-existing mechanism mentioned above. This is "
"backwards-incompatible for any users relying on the prior ability to insert "
"arbitrary lookups."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:3
msgid "Django 1.1.4 release notes"
msgstr "Informacje o wydaniu Django 1.1.4"

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:5
msgid "Welcome to Django 1.1.4!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:7
msgid ""
"This is the fourth \"bugfix\" release in the Django 1.1 series, improving "
"the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:10
msgid ""
"With one exception, Django 1.1.4 maintains backwards compatibility with "
"Django 1.1.3. It also contains a number of fixes and other improvements. "
"Django 1.1.4 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.1."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:22
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:22
msgid "CSRF exception for AJAX requests"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:24
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:24
msgid ""
"Django includes a CSRF-protection mechanism, which makes use of a token "
"inserted into outgoing forms. Middleware then checks for the token's "
"presence on form submission, and validates it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:28
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:28
msgid ""
"Prior to Django 1.2.5, our CSRF protection made an exception for AJAX "
"requests, on the following basis:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:31
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:31
msgid ""
"Many AJAX toolkits add an X-Requested-With header when using XMLHttpRequest."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:34
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:34
msgid "Browsers have strict same-origin policies regarding XMLHttpRequest."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:37
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:37
msgid ""
"In the context of a browser, the only way that a custom header of this "
"nature can be added is with XMLHttpRequest."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:40
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:40
msgid ""
"Therefore, for ease of use, we did not apply CSRF checks to requests that "
"appeared to be AJAX on the basis of the X-Requested-With header. The Ruby on"
" Rails web framework had a similar exemption."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:44
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:44
msgid ""
"Recently, engineers at Google made members of the Ruby on Rails development "
"team aware of a combination of browser plugins and redirects which can allow"
" an attacker to provide custom HTTP headers on a request to any website. "
"This can allow a forged request to appear to be an AJAX request, thereby "
"defeating CSRF protection which trusts the same-origin nature of AJAX "
"requests."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:51
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:51
msgid ""
"Michael Koziarski of the Rails team brought this to our attention, and we "
"were able to produce a proof-of-concept demonstrating the same vulnerability"
" in Django's CSRF handling."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:55
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:55
msgid ""
"To remedy this, Django will now apply full CSRF validation to all requests, "
"regardless of apparent AJAX origin. This is technically backwards-"
"incompatible, but the security risks have been judged to outweigh the "
"compatibility concerns in this case."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:60
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:60
msgid ""
"Additionally, Django will now accept the CSRF token in the custom HTTP "
"header X-CSRFTOKEN, as well as in the form submission itself, for ease of "
"use with popular JavaScript toolkits which allow insertion of custom headers"
" into all AJAX requests."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.1.4.txt:65
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:65
msgid ""
"Please see the :ref:`CSRF docs for example jQuery code <csrf-ajax>` that "
"demonstrates this technique, ensuring that you are looking at the "
"documentation for your version of Django, as the exact code necessary is "
"different for some older versions of Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:3
msgid "Django 1.10 release notes"
msgstr "Informacje o wydaniu Django 1.10"

#: ../../../../sources/1.10/docs/releases/1.10.txt:5
#: ../../../../sources/1.10/docs/releases/1.9.9.txt:5
msgid "*August 1, 2016*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:7
msgid "Welcome to Django 1.10!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:9
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.10>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.10>` "
"you'll want to be aware of when upgrading from Django 1.9 or older versions."
" We've :ref:`dropped some features <removed-features-1.10>` that have "
"reached the end of their deprecation cycle, and we've :ref:`begun the "
"deprecation process for some features <deprecated-features-1.10>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:16
#: ../../../../sources/1.10/docs/releases/1.8.txt:16
#: ../../../../sources/1.10/docs/releases/1.9.txt:16
msgid ""
"See the :doc:`/howto/upgrade-version` guide if you're updating an existing "
"project."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:20
#: ../../../../sources/1.10/docs/releases/1.2.txt:94
#: ../../../../sources/1.10/docs/releases/1.3.txt:42
#: ../../../../sources/1.10/docs/releases/1.4.txt:59
#: ../../../../sources/1.10/docs/releases/1.4.10.txt:10
#: ../../../../sources/1.10/docs/releases/1.5.txt:66
#: ../../../../sources/1.10/docs/releases/1.6.txt:35
#: ../../../../sources/1.10/docs/releases/1.7.txt:17
#: ../../../../sources/1.10/docs/releases/1.8.txt:25
#: ../../../../sources/1.10/docs/releases/1.9.txt:20
msgid "Python compatibility"
msgstr "Kompatybilność Pythona"

#: ../../../../sources/1.10/docs/releases/1.10.txt:22
msgid ""
"Like Django 1.9, Django 1.10 requires Python 2.7, 3.4, or 3.5. We **highly "
"recommend** and only officially support the latest release of each series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:28
msgid "What's new in Django 1.10"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:31
msgid "Full text search for PostgreSQL"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:33
msgid ""
"``django.contrib.postgres`` now includes a :doc:`collection of database "
"functions </ref/contrib/postgres/search>` to allow the use of the full text "
"search engine. You can search across multiple fields in your relational "
"database, combine the searches with other lookups, use different language "
"configurations and weightings, and rank the results by relevance."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:39
msgid ""
"It also now includes trigram support, using the :lookup:`trigram_similar` "
"lookup, and the :class:`~django.contrib.postgres.search.TrigramSimilarity` "
"and :class:`~django.contrib.postgres.search.TrigramDistance` expressions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:44
msgid "New-style middleware"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:46
msgid ""
":doc:`A new style of middleware is introduced </topics/http/middleware>` to "
"solve the lack of strict request/response layering of the old-style of "
"middleware described in `DEP 0005 "
"<https://github.com/django/deps/blob/master/final/0005-improved-"
"middleware.rst>`_. You'll need to :ref:`adapt old, custom middleware "
"<upgrading-middleware>` and switch from the ``MIDDLEWARE_CLASSES`` setting "
"to the new :setting:`MIDDLEWARE` setting to take advantage of the "
"improvements."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:55
msgid "Official support for Unicode usernames"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:57
msgid ""
"The :class:`~django.contrib.auth.models.User` model in "
"``django.contrib.auth`` originally only accepted ASCII letters in usernames."
" Although it wasn't a deliberate choice, Unicode characters have always been"
" accepted when using Python 3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:62
msgid ""
"The username validator now explicitly accepts Unicode letters by default on "
"Python 3 only. This default behavior can be overridden by changing the "
":attr:`~django.contrib.auth.models.User.username_validator` attribute of the"
" ``User`` model, or to any proxy of that model, using either "
":class:`~django.contrib.auth.validators.ASCIIUsernameValidator` or "
":class:`~django.contrib.auth.validators.UnicodeUsernameValidator`. Custom "
"user models may also use those validators."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:71
#: ../../../../sources/1.10/docs/releases/1.4.txt:563
#: ../../../../sources/1.10/docs/releases/1.5.txt:241
#: ../../../../sources/1.10/docs/releases/1.6.txt:157
#: ../../../../sources/1.10/docs/releases/1.7.txt:361
#: ../../../../sources/1.10/docs/releases/1.8.txt:142
#: ../../../../sources/1.10/docs/releases/1.9.txt:148
msgid "Minor features"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:74
#: ../../../../sources/1.10/docs/releases/1.7.txt:364
#: ../../../../sources/1.10/docs/releases/1.8.txt:145
#: ../../../../sources/1.10/docs/releases/1.8.txt:1027
#: ../../../../sources/1.10/docs/releases/1.9.txt:151
msgid ":mod:`django.contrib.admin`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:76
msgid ""
"For sites running on a subpath, the default :attr:`URL for the \"View site\""
" link <django.contrib.admin.AdminSite.site_url>` at the top of each admin "
"page will now point to ``request.META['SCRIPT_NAME']`` if set, instead of "
"``/``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:80
msgid ""
"The success message that appears after adding or editing an object now "
"contains a link to the object's change form."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:83
msgid ""
"All inline JavaScript is removed so you can enable the ``Content-Security-"
"Policy`` HTTP header if you wish."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:86
msgid ""
"The new :attr:`InlineModelAdmin.classes "
"<django.contrib.admin.InlineModelAdmin.classes>` attribute allows specifying"
" classes on inline fieldsets. Inlines with a ``collapse`` class will be "
"initially collapsed and their header will have a small \"show\" link."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:91
msgid ""
"If a user doesn't have the add permission, the ``object-tools`` block on a "
"model's changelist will now be rendered (without the add button, of course)."
" This makes it easier to add custom tools in this case."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:95
msgid ""
"The :class:`~django.contrib.admin.models.LogEntry` model now stores change "
"messages in a JSON structure so that the message can be dynamically "
"translated using the current active language. A new "
"``LogEntry.get_change_message()`` method is now the preferred way of "
"retrieving the change message."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:100
msgid ""
"Selected objects for fields in ``ModelAdmin.raw_id_fields`` now have a link "
"to object's change form."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:103
msgid ""
"Added \"No date\" and \"Has date\" choices for ``DateFieldListFilter`` if "
"the field is nullable."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:106
msgid ""
"The jQuery library embedded in the admin is upgraded from version 2.1.4 to "
"2.2.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:110
#: ../../../../sources/1.10/docs/releases/1.7.txt:411
#: ../../../../sources/1.10/docs/releases/1.8.txt:195
#: ../../../../sources/1.10/docs/releases/1.9.txt:195
msgid ":mod:`django.contrib.auth`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:112
msgid ""
"Added support for the :ref:`Argon2 password hash <argon2_usage>`. It's "
"recommended over PBKDF2, however, it's not the default as it requires a "
"third-party library."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:116
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 25%. This backwards compatible change will not affect users who"
" have subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to "
"change the default value."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:121
msgid ""
"The :func:`~django.contrib.auth.views.logout` view sends \"no-cache\" "
"headers to prevent an issue where Safari caches redirects and prevents a "
"user from being able to log out."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:125
msgid ""
"Added the optional ``backend`` argument to "
":func:`~django.contrib.auth.login` to allow using it without credentials."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:128
msgid ""
"The new :setting:`LOGOUT_REDIRECT_URL` setting controls the redirect of the "
":func:`~django.contrib.auth.views.logout` view, if the view doesn't get a "
"``next_page`` argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:132
msgid ""
"The new ``redirect_authenticated_user`` parameter for the "
":func:`~django.contrib.auth.views.login` view allows redirecting "
"authenticated users visiting the login page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:136
msgid ""
"The new :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` and"
" :class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` "
"ignore the value of ``User.is_active``, while "
":class:`~django.contrib.auth.backends.ModelBackend` and "
":class:`~django.contrib.auth.backends.RemoteUserBackend` now reject inactive"
" users."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:144
#: ../../../../sources/1.10/docs/releases/1.10.txt:734
#: ../../../../sources/1.10/docs/releases/1.10.txt:958
#: ../../../../sources/1.10/docs/releases/1.7.txt:444
#: ../../../../sources/1.10/docs/releases/1.8.txt:220
#: ../../../../sources/1.10/docs/releases/1.8.txt:894
#: ../../../../sources/1.10/docs/releases/1.9.txt:230
msgid ":mod:`django.contrib.gis`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:146
msgid ""
":ref:`Distance lookups <distance-lookups>` now accept expressions as the "
"distance value parameter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:149
msgid ""
"The new :attr:`GEOSGeometry.unary_union "
"<django.contrib.gis.geos.GEOSGeometry.unary_union>` property computes the "
"union of all the elements of this geometry."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:153
msgid ""
"Added the :meth:`GEOSGeometry.covers() "
"<django.contrib.gis.geos.GEOSGeometry.covers>` binary predicate."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:156
msgid ""
"Added the :meth:`GDALBand.statistics() "
"<django.contrib.gis.gdal.GDALBand.statistics>` method and "
":attr:`~django.contrib.gis.gdal.GDALBand.mean` and "
":attr:`~django.contrib.gis.gdal.GDALBand.std` attributes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:161
msgid ""
"Added support for the :class:`~django.contrib.gis.db.models.MakeLine` "
"aggregate and :class:`~django.contrib.gis.db.models.functions.GeoHash` "
"function on SpatiaLite."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:165
msgid ""
"Added support for the "
":class:`~django.contrib.gis.db.models.functions.Difference`, "
":class:`~django.contrib.gis.db.models.functions.Intersection`, and "
":class:`~django.contrib.gis.db.models.functions.SymDifference` functions on "
"MySQL."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:171
msgid "Added support for instantiating empty GEOS geometries."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:173
msgid ""
"The new :attr:`~django.contrib.gis.geos.WKTWriter.trim` and "
":attr:`~django.contrib.gis.geos.WKTWriter.precision` properties of "
":class:`~django.contrib.gis.geos.WKTWriter` allow controlling output of the "
"fractional part of the coordinates in WKT."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:178
msgid ""
"Added the :attr:`LineString.closed "
"<django.contrib.gis.geos.LineString.closed>` and "
":attr:`MultiLineString.closed "
"<django.contrib.gis.geos.MultiLineString.closed>` properties."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:183
msgid ""
"The :doc:`GeoJSON serializer </ref/contrib/gis/serializers>` now outputs the"
" primary key of objects in the ``properties`` dictionary if specific fields "
"aren't specified."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:187
msgid ""
"The ability to replicate input data on the :meth:`GDALBand.data() "
"<django.contrib.gis.gdal.GDALBand.data>` method was added. Band data can now"
" be updated with repeated values efficiently."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:191
msgid ""
"Added database functions "
":class:`~django.contrib.gis.db.models.functions.IsValid` and "
":class:`~django.contrib.gis.db.models.functions.MakeValid`, as well as the "
":lookup:`isvalid` lookup, all for PostGIS. This allows filtering and "
"repairing invalid geometries on the database side."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:197
msgid ""
"Added raster support for all :doc:`spatial lookups "
"</ref/contrib/gis/geoquerysets>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:201
#: ../../../../sources/1.10/docs/releases/1.9.txt:263
msgid ":mod:`django.contrib.postgres`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:203
msgid ""
"For convenience, :class:`~django.contrib.postgres.fields.HStoreField` now "
"casts its keys and values to strings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:207
#: ../../../../sources/1.10/docs/releases/1.7.txt:479
#: ../../../../sources/1.10/docs/releases/1.8.txt:246
#: ../../../../sources/1.10/docs/releases/1.9.txt:276
msgid ":mod:`django.contrib.sessions`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:209
msgid ""
"The :djadmin:`clearsessions` management command now removes file-based "
"sessions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:213
#: ../../../../sources/1.10/docs/releases/1.7.txt:495
#: ../../../../sources/1.10/docs/releases/1.8.txt:258
#: ../../../../sources/1.10/docs/releases/1.9.txt:284
msgid ":mod:`django.contrib.sites`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:215
msgid ""
"The :class:`~django.contrib.sites.models.Site` model now supports "
":ref:`natural keys <topics-serialization-natural-keys>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:219
#: ../../../../sources/1.10/docs/releases/1.7.txt:501
msgid ":mod:`django.contrib.staticfiles`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:221
msgid ""
"The :ttag:`static` template tag now uses ``django.contrib.staticfiles`` if "
"it's in ``INSTALLED_APPS``. This is especially useful for third-party apps "
"which can now always use ``{% load static %}`` (instead of ``{% load "
"staticfiles %}`` or ``{% load static from staticfiles %}``) and not worry "
"about whether or not the ``staticfiles`` app is installed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:227
msgid ""
"You can :ref:`more easily customize <customize-staticfiles-ignore-patterns>`"
" the ``collectstatic --ignore_patterns`` option with a custom ``AppConfig``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:231
#: ../../../../sources/1.10/docs/releases/1.7.txt:536
#: ../../../../sources/1.10/docs/releases/1.8.txt:270
#: ../../../../sources/1.10/docs/releases/1.9.txt:300
msgid "Cache"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:233
msgid "The file-based cache backend now uses the highest pickling protocol."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:236
#: ../../../../sources/1.10/docs/releases/1.9.txt:310
msgid "CSRF"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:238
msgid ""
"The default :setting:`CSRF_FAILURE_VIEW`, ``views.csrf.csrf_failure()`` now "
"accepts an optional ``template_name`` parameter, defaulting to "
"``'403_csrf.html'``, to control the template used to render the page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:242
msgid ""
"To protect against `BREACH`_ attacks, the CSRF protection mechanism now "
"changes the form token value on every request (while keeping an invariant "
"secret which can be used to validate the different tokens)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:249
#: ../../../../sources/1.10/docs/releases/1.8.txt:283
#: ../../../../sources/1.10/docs/releases/1.9.txt:323
msgid "Database backends"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:251
msgid "Temporal data subtraction was unified on all backends."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:253
msgid ""
"If the database supports it, backends can set "
"``DatabaseFeatures.can_return_ids_from_bulk_insert=True`` and implement "
"``DatabaseOperations.fetch_returned_insert_ids()`` to set primary keys on "
"objects created using ``QuerySet.bulk_create()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:258
msgid ""
"Added keyword arguments to the ``as_sql()`` methods of various expressions "
"(``Func``, ``When``, ``Case``, and ``OrderBy``) to allow database backends "
"to customize them without mutating ``self``, which isn't safe when using "
"different database backends. See the ``arg_joiner`` and ``**extra_context`` "
"parameters of :meth:`Func.as_sql() <django.db.models.Func.as_sql>` for an "
"example."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:266
#: ../../../../sources/1.10/docs/releases/1.7.txt:567
#: ../../../../sources/1.10/docs/releases/1.8.txt:316
#: ../../../../sources/1.10/docs/releases/1.9.txt:330
msgid "File Storage"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:268
msgid ""
"Storage backends now present a timezone-aware API with new methods "
":meth:`~django.core.files.storage.Storage.get_accessed_time`, "
":meth:`~django.core.files.storage.Storage.get_created_time`, and "
":meth:`~django.core.files.storage.Storage.get_modified_time`. They return a "
"timezone-aware ``datetime`` if :setting:`USE_TZ` is ``True`` and a naive "
"``datetime`` in the local timezone otherwise."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:275
msgid ""
"The new :meth:`Storage.generate_filename() "
"<django.core.files.storage.Storage.generate_filename>` method makes it "
"easier to implement custom storages that don't use the ``os.path`` calls "
"previously in :class:`~django.db.models.FileField`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:281
#: ../../../../sources/1.10/docs/releases/1.7.txt:602
#: ../../../../sources/1.10/docs/releases/1.8.txt:329
#: ../../../../sources/1.10/docs/releases/1.9.txt:340
msgid "Forms"
msgstr "Formularze"

#: ../../../../sources/1.10/docs/releases/1.10.txt:283
msgid ""
"Form and widget ``Media`` is now served using "
":mod:`django.contrib.staticfiles` if installed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:286
msgid ""
"The ``<input>`` tag rendered by :class:`~django.forms.CharField` now "
"includes a ``minlength`` attribute if the field has a ``min_length``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:289
msgid ""
"Required form fields now have the ``required`` HTML attribute. Set the new "
":attr:`Form.use_required_attribute "
"<django.forms.Form.use_required_attribute>` attribute to ``False`` to "
"disable it. The ``required`` attribute isn't included on forms of formsets "
"because the browser validation may not be correct when adding and deleting "
"formsets."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:296
#: ../../../../sources/1.10/docs/releases/1.8.txt:367
#: ../../../../sources/1.10/docs/releases/1.9.txt:372
msgid "Generic Views"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:298
msgid ""
"The :class:`~django.views.generic.base.View` class can now be imported from "
"``django.views``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:304
msgid ""
"The :func:`~django.conf.urls.i18n.i18n_patterns` helper function can now be "
"used in a root URLConf specified using :attr:`request.urlconf "
"<django.http.HttpRequest.urlconf>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:308
msgid ""
"By setting the new ``prefix_default_language`` parameter for "
":func:`~django.conf.urls.i18n.i18n_patterns` to ``False``, you can allow "
"accessing the default language without a URL prefix."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:312
msgid ""
":func:`~django.views.i18n.set_language` now returns a 204 status code (No "
"Content) for AJAX requests when there is no ``next`` parameter in ``POST`` "
"or ``GET``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:316
msgid ""
"The :class:`~django.views.i18n.JavaScriptCatalog` and "
":class:`~django.views.i18n.JSONCatalog` class-based views supersede the "
"deprecated ``javascript_catalog()`` and ``json_catalog()`` function-based "
"views. The new views are almost equivalent to the old ones except that by "
"default the new views collect all JavaScript strings in the ``djangojs`` "
"translation domain from all installed apps rather than only the JavaScript "
"strings from :setting:`LOCALE_PATHS`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:325
#: ../../../../sources/1.10/docs/releases/1.7.txt:697
#: ../../../../sources/1.10/docs/releases/1.8.txt:406
#: ../../../../sources/1.10/docs/releases/1.9.txt:418
msgid "Management Commands"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:327
msgid ""
":func:`~django.core.management.call_command` now returns the value returned "
"from the ``command.handle()`` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:330
msgid ""
"The new :option:`check --fail-level` option allows specifying the message "
"level that will cause the command to exit with a non-zero status."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:333
msgid ""
"The new :option:`makemigrations --check` option makes the command exit with "
"a non-zero status when model changes without migrations are detected."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:336
msgid ""
":djadmin:`makemigrations` now displays the path to the migration files that "
"it generates."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:339
msgid ""
"The :option:`shell --interface` option now accepts ``python`` to force use "
"of the \"plain\" Python interpreter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:342
msgid ""
"The new :option:`shell --command` option lets you run a command as Django "
"and exit, instead of opening the interactive shell."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:345
msgid ""
"Added a warning to :djadmin:`dumpdata` if a proxy model is specified (which "
"results in no output) without its concrete parent."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:348
msgid ""
"The new :attr:`BaseCommand.requires_migrations_checks "
"<django.core.management.BaseCommand.requires_migrations_checks>` attribute "
"may be set to ``True`` if you want your command to print a warning, like "
":djadmin:`runserver` does, if the set of migrations on disk don't match the "
"migrations in the database."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:354
msgid ""
"To assist with testing, :func:`~django.core.management.call_command` now "
"accepts a command object as the first argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:357
msgid ""
"The :djadmin:`shell` command supports tab completion on systems using "
"``libedit``, e.g. Mac OSX."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:360
msgid ""
"The :djadmin:`inspectdb` command lets you choose what tables should be "
"inspected by specifying their names as arguments."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:364
#: ../../../../sources/1.10/docs/releases/1.8.txt:466
#: ../../../../sources/1.10/docs/releases/1.9.txt:451
msgid "Migrations"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:366
msgid "Added support for serialization of ``enum.Enum`` objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:368
msgid ""
"Added the ``elidable`` argument to the "
":class:`~django.db.migrations.operations.RunSQL` and "
":class:`~django.db.migrations.operations.RunPython` operations to allow them"
" to be removed when squashing migrations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:373
msgid ""
"Added support for :ref:`non-atomic migrations <non-atomic-migrations>` by "
"setting the ``atomic`` attribute on a ``Migration``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:376
msgid ""
"The ``migrate`` and ``makemigrations`` commands now :ref:`check for a "
"consistent migration history <migration-history-consistency>`. If they find "
"some unapplied dependencies of an applied migration, "
"``InconsistentMigrationHistory`` is raised."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:381
msgid ""
"The :func:`~django.db.models.signals.pre_migrate` and "
":func:`~django.db.models.signals.post_migrate` signals now dispatch their "
"migration ``plan`` and ``apps``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:388
msgid ""
"Reverse foreign keys from proxy models are now propagated to their concrete "
"class. The reverse relation attached by a "
":class:`~django.db.models.ForeignKey` pointing to a proxy model is now "
"accessible as a descriptor on the proxied model class and may be referenced "
"in queryset filtering."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:394
msgid ""
"The new :meth:`Field.rel_db_type() <django.db.models.Field.rel_db_type>` "
"method returns the database column data type for fields such as "
"``ForeignKey`` and ``OneToOneField`` that point to another field."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:398
msgid ""
"The :attr:`~django.db.models.Func.arity` class attribute is added to "
":class:`~django.db.models.Func`. This attribute can be used to set the "
"number of arguments the function accepts."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:402
msgid ""
"Added :class:`~django.db.models.BigAutoField` which acts much like an "
":class:`~django.db.models.AutoField` except that it is guaranteed to fit "
"numbers from ``1`` to ``9223372036854775807``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:406
msgid ""
":meth:`QuerySet.in_bulk() <django.db.models.query.QuerySet.in_bulk>` may be "
"called without any arguments to return all objects in the queryset."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:409
msgid ""
":attr:`~django.db.models.ForeignKey.related_query_name` now supports app "
"label and class interpolation using the ``'%(app_label)s'`` and "
"``'%(class)s'`` strings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:413
msgid "Allowed overriding model fields inherited from abstract base classes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:415
msgid ""
"The :func:`~django.db.models.prefetch_related_objects` function is now a "
"public API."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:418
msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>`"
" sets the primary key on objects when using PostgreSQL."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:421
msgid "Added the :class:`~django.db.models.functions.Cast` database function."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:423
msgid ""
"A proxy model may now inherit multiple proxy models that share a common non-"
"abstract parent class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:426
msgid ""
"Added :class:`~django.db.models.functions.datetime.Extract` functions to "
"extract datetime components as integers, such as year and hour."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:429
msgid ""
"Added :class:`~django.db.models.functions.datetime.Trunc` functions to "
"truncate a date or datetime to a significant component. They enable queries "
"like sales-per-day or sales-per-hour."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:433
msgid ""
"``Model.__init__()`` now sets values of virtual fields from its keyword "
"arguments."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:436
msgid ""
"The new :attr:`Meta.base_manager_name "
"<django.db.models.Options.base_manager_name>` and "
":attr:`Meta.default_manager_name "
"<django.db.models.Options.default_manager_name>` options allow controlling "
"the :attr:`~django.db.models.Model._base_manager` and "
":attr:`~django.db.models.Model._default_manager`, respectively."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:444
#: ../../../../sources/1.10/docs/releases/1.7.txt:871
#: ../../../../sources/1.10/docs/releases/1.8.txt:578
#: ../../../../sources/1.10/docs/releases/1.9.txt:554
msgid "Requests and Responses"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:446
msgid "Added ``request.user`` to the debug view."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:448
msgid ""
"Added :class:`~django.http.HttpResponse` methods "
":meth:`~django.http.HttpResponse.readable()` and "
":meth:`~django.http.HttpResponse.seekable()` to make an instance a stream-"
"like object and allow wrapping it with :py:class:`io.TextIOWrapper`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:453
msgid ""
"Added the :attr:`HttpResponse.content_type "
"<django.http.HttpRequest.content_type>` and "
":attr:`~django.http.HttpRequest.content_params` attributes which are parsed "
"from the ``CONTENT_TYPE`` header."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:458
msgid ""
"The parser for ``request.COOKIES`` is simplified to better match the "
"behavior of browsers. ``request.COOKIES`` may now contain cookies that are "
"invalid according to :rfc:`6265` but are possible to set via "
"``document.cookie``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:463
msgid "Serialization"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:465
msgid ""
"The ``django.core.serializers.json.DjangoJSONEncoder`` now knows how to "
"serialize lazy strings, typically used for translatable content."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:471
msgid ""
"Added the ``autoescape`` option to the "
":class:`~django.template.backends.django.DjangoTemplates` backend and the "
":class:`~django.template.Engine` class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:475
msgid ""
"Added the ``is`` and ``is not`` comparison operators to the :ttag:`if` tag."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:477
msgid ""
"Allowed :tfilter:`dictsort` to order a list of lists by an element at a "
"specified index."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:480
msgid ""
"The :func:`~django.template.context_processors.debug` context processor "
"contains queries for all database aliases instead of only the default alias."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:483
msgid ""
"Added relative path support for string arguments of the :ttag:`extends` and "
":ttag:`include` template tags."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:487
#: ../../../../sources/1.10/docs/releases/1.7.txt:884
#: ../../../../sources/1.10/docs/releases/1.8.txt:625
#: ../../../../sources/1.10/docs/releases/1.9.txt:642
msgid "Tests"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:489
msgid ""
"To better catch bugs, :class:`~django.test.TestCase` now checks deferrable "
"database constraints at the end of each test."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:492
msgid ""
"Tests and test cases can be :ref:`marked with tags <topics-tagging-tests>` "
"and run selectively with the new :option:`test --tag` and :option:`test "
"--exclude-tag` options."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:496
msgid ""
"You can now login and use sessions with the test client even if "
":mod:`django.contrib.sessions` is not in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:502
msgid ""
"An addition in :func:`django.setup()` allows URL resolving that happens "
"outside of the request/response cycle (e.g. in management commands and "
"standalone scripts) to take :setting:`FORCE_SCRIPT_NAME` into account when "
"it is set."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:508
#: ../../../../sources/1.10/docs/releases/1.7.txt:919
#: ../../../../sources/1.10/docs/releases/1.8.txt:660
#: ../../../../sources/1.10/docs/releases/1.9.txt:665
msgid "Validators"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:510
msgid ""
":class:`~django.core.validators.URLValidator` now limits the length of "
"domain name labels to 63 characters and the total length of domain names to "
"253 characters per :rfc:`1034`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:514
msgid ""
":func:`~django.core.validators.int_list_validator` now accepts an optional "
"``allow_negative`` boolean parameter, defaulting to ``False``, to allow "
"negative integers."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:521
msgid "Backwards incompatible changes in 1.10"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:525
msgid ""
"In addition to the changes outlined in this section, be sure to review the "
":ref:`removed-features-1.10` for the features that have reached the end of "
"their deprecation cycle and therefore been removed. If you haven't updated "
"your code within the deprecation timeline for a given feature, its removal "
"may appear as a backwards incompatible change."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:532
#: ../../../../sources/1.10/docs/releases/1.8.txt:998
#: ../../../../sources/1.10/docs/releases/1.9.txt:690
msgid "Database backend API"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:534
msgid ""
"GIS's ``AreaField`` uses an unspecified underlying numeric type that could "
"in practice be any numeric Python type. ``decimal.Decimal`` values retrieved"
" from the database are now converted to ``float`` to make it easier to "
"combine them with values used by the GIS libraries."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:539
msgid ""
"In order to enable temporal subtraction you must set the "
"``supports_temporal_subtraction`` database feature flag to ``True`` and "
"implement the ``DatabaseOperations.subtract_temporals()`` method. This "
"method should return the SQL and parameters required to compute the "
"difference in microseconds between the ``lhs`` and ``rhs`` arguments in the "
"datatype used to store :class:`~django.db.models.DurationField`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:547
msgid ""
"``select_related()`` prohibits non-relational fields for nested relations"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:549
msgid ""
"Django 1.8 added validation for non-relational fields in "
"``select_related()``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:556
msgid "But it didn't prohibit nested non-relation fields as it does now::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:564
msgid ""
"``_meta.get_fields()`` returns consistent reverse fields for proxy models"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:566
msgid ""
"Before Django 1.10, the :meth:`~django.db.models.options.Options.get_fields`"
" method returned different reverse fields when called on a proxy model "
"compared to its proxied concrete class. This inconsistency was fixed by "
"returning the full set of fields pointing to a concrete class or one of its "
"proxies in both cases."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:573
msgid ""
":attr:`AbstractUser.username <django.contrib.auth.models.User.username>` "
"``max_length`` increased to 150"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:575
msgid ""
"A migration for :attr:`django.contrib.auth.models.User.username` is "
"included. If you have a custom user model inheriting from ``AbstractUser``, "
"you'll need to generate and apply a database migration for your user model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:579
msgid ""
"We considered an increase to 254 characters to more easily allow the use of "
"email addresses (which are limited to 254 characters) as usernames but "
"rejected it due to a MySQL limitation.  When using the ``utf8mb4`` encoding "
"(recommended for proper Unicode support), MySQL can only create unique "
"indexes with 191 characters by default. Therefore, if you need a longer "
"length, please use a custom user model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:586
msgid ""
"If you want to preserve the 30 character limit for usernames, use a custom "
"form when creating a user or changing usernames::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:597
msgid ""
"If you wish to keep this restriction in the admin, set "
"``UserAdmin.add_form`` to use this form::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:610
msgid "Dropped support for PostgreSQL 9.1"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:612
msgid ""
"Upstream support for PostgreSQL 9.1 ends in September 2016. As a "
"consequence, Django 1.10 sets PostgreSQL 9.2 as the minimum version it "
"officially supports."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:616
msgid "``runserver`` output goes through logging"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:618
msgid ""
"Request and response handling of the ``runserver`` command is sent to the "
":ref:`django-server-logger` logger instead of to ``sys.stderr``. If you "
"disable Django's logging configuration or override it with your own, you'll "
"need to add the appropriate logging configuration if you want to see that "
"output::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:646
msgid ""
"``auth.CustomUser`` and ``auth.ExtensionUser`` test models were removed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:648
msgid ""
"Since the introduction of migrations for the contrib apps in Django 1.8, the"
" tables of these custom user test models were not created anymore making "
"them unusable in a testing context."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:653
msgid ""
"Apps registry is no longer auto-populated when unpickling models outside of "
"Django"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:655
msgid ""
"The apps registry is no longer auto-populated when unpickling models. This "
"was added in Django 1.7.2 as an attempt to allow unpickling models outside "
"of Django, such as in an RQ worker, without calling ``django.setup()``, but "
"it creates the possibility of a deadlock. To adapt your code in the case of "
"RQ, you can `provide your own worker script <http://python-"
"rq.org/docs/workers/>`_ that calls ``django.setup()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:663
msgid "Removed null assignment check for non-null foreign key fields"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:665
msgid ""
"In older versions, assigning ``None`` to a non-nullable ``ForeignKey`` or "
"``OneToOneField`` raised ``ValueError('Cannot assign None: \"model.field\" "
"does not allow null values.')``. For consistency with other model fields "
"which don't have a similar check, this check is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:671
msgid ""
"Removed weak password hashers from the default ``PASSWORD_HASHERS`` setting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:673
msgid ""
"Django 0.90 stored passwords as unsalted MD5. Django 0.91 added support for "
"salted SHA1 with automatic upgrade of passwords when a user logs in. Django "
"1.4 added PBKDF2 as the default password hasher."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:677
msgid ""
"If you have an old Django project with MD5 or SHA1 (even salted) encoded "
"passwords, be aware that these can be cracked fairly easily with today's "
"hardware. To make Django users acknowledge continued use of weak hashers, "
"the following hashers are removed from the default "
":setting:`PASSWORD_HASHERS` setting::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:689
msgid ""
"Consider using a :ref:`wrapped password hasher <wrapping-password-hashers>` "
"to strengthen the hashes in your database. If that's not feasible, add the "
":setting:`PASSWORD_HASHERS` setting to your project and add back any hashers"
" that you need."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:694
msgid ""
"You can check if your database has any of the removed hashers like this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:715
msgid ""
"``Field.get_prep_lookup()`` and ``Field.get_db_prep_lookup()`` methods are "
"removed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:717
msgid ""
"If you have a custom field that implements either of these methods, register"
" a custom lookup for it. For example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:736
msgid "Support for SpatiaLite < 3.0 and GEOS < 3.3 is dropped."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:738
msgid ""
"The ``add_postgis_srs()`` backwards compatibility alias for "
"``django.contrib.gis.utils.add_srs_entry()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:741
msgid ""
"On Oracle/GIS, the :class:`~django.contrib.gis.db.models.functions.Area` "
"aggregate function now returns a ``float`` instead of ``decimal.Decimal``. "
"(It's still wrapped in a measure of square meters.)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:745
msgid ""
"The default :class:`~django.contrib.gis.geos.GEOSGeometry` representation "
"(WKT output) is trimmed by default. That is, instead of ``POINT "
"(23.0000000000000000 5.5000000000000000)``, you'll get ``POINT (23 5.5)``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:751
msgid ""
"Maximum size of a request body and the number of GET/POST parameters is "
"limited"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:753
msgid ""
"Two new settings help mitigate denial-of-service attacks via large requests:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:755
msgid ""
":setting:`DATA_UPLOAD_MAX_MEMORY_SIZE` limits the size that a request body "
"may be. File uploads don't count towards this limit."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:757
msgid ""
":setting:`DATA_UPLOAD_MAX_NUMBER_FIELDS` limits the number of GET/POST "
"parameters that are parsed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:760
msgid ""
"Applications that receive unusually large form posts may need to tune these "
"settings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:764
#: ../../../../sources/1.10/docs/releases/1.10.txt:1137
#: ../../../../sources/1.10/docs/releases/1.5.txt:663
#: ../../../../sources/1.10/docs/releases/1.6.txt:853
#: ../../../../sources/1.10/docs/releases/1.7.txt:1296
#: ../../../../sources/1.10/docs/releases/1.8.txt:1064
#: ../../../../sources/1.10/docs/releases/1.9.txt:1054
#: ../../../../sources/1.10/docs/releases/1.9.txt:1341
msgid "Miscellaneous"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:766
msgid ""
"The ``repr()`` of a ``QuerySet`` is wrapped in ``<QuerySet >`` to "
"disambiguate it from a plain list when debugging."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:769
msgid ""
"``utils.version.get_version()`` returns :pep:`440` compliant release "
"candidate versions (e.g. '1.10rc1' instead of '1.10c1')."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:772
msgid ""
"CSRF token values are now required to be strings of 64 alphanumerics; values"
" of 32 alphanumerics, as set by older versions of Django by default, are "
"automatically replaced by strings of 64 characters. Other values are "
"considered invalid. This should only affect developers or users who replace "
"these tokens."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:778
msgid ""
"The ``LOGOUT_URL`` setting is removed as Django hasn't made use of it since "
"pre-1.0. If you use it in your project, you can add it to your project's "
"settings. The default value was ``'/accounts/logout/'``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:782
msgid ""
"Objects with a ``close()`` method such as files and generators passed to "
":class:`~django.http.HttpResponse` are now closed immediately instead of "
"when the WSGI server calls ``close()`` on the response."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:786
msgid ""
"A redundant ``transaction.atomic()`` call in ``QuerySet.update_or_create()``"
" is removed. This may affect query counts tested by "
"``TransactionTestCase.assertNumQueries()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:790
msgid ""
"Support for ``skip_validation`` in ``BaseCommand.execute(**options)`` is "
"removed. Use ``skip_checks`` (added in Django 1.7) instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:793
msgid ""
":djadmin:`loaddata` now raises a ``CommandError`` instead of showing a "
"warning when the specified fixture file is not found."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:796
msgid ""
"Instead of directly accessing the ``LogEntry.change_message`` attribute, "
"it's now better to call the ``LogEntry.get_change_message()`` method which "
"will provide the message in the current language."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:800
msgid ""
"The default error views now raise ``TemplateDoesNotExist`` if a nonexistent "
"``template_name`` is specified."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:803
msgid ""
"The unused ``choices`` keyword argument of the ``Select`` and "
"``SelectMultiple`` widgets' ``render()`` method is removed. The ``choices`` "
"argument of the ``render_options()`` method is also removed, making "
"``selected_choices`` the first argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:808
msgid ""
"Tests that violate deferrable database constraints will now error when run "
"on a database that supports deferrable constraints."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:811
msgid ""
"Built-in management commands now use indexing of keys in ``options``, e.g. "
"``options['verbosity']``, instead of ``options.get()`` and no longer perform"
" any type coercion. This could be a problem if you're calling commands using"
" ``Command.execute()`` (which bypasses the argument parser that sets a "
"default value) instead of :func:`~django.core.management.call_command`. "
"Instead of calling ``Command.execute()``, pass the command object as the "
"first argument to ``call_command()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:819
msgid ""
":class:`~django.contrib.auth.backends.ModelBackend` and "
":class:`~django.contrib.auth.backends.RemoteUserBackend` now reject inactive"
" users. This means that inactive users can't login and will be logged out if"
" they are switched from ``is_active=True`` to ``False``. If you need the "
"previous behavior, use the new "
":class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` or "
":class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` in "
":setting:`AUTHENTICATION_BACKENDS` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:828
msgid ""
"In light of the previous change, the test client's "
":meth:`~django.test.Client.login()` method no longer always rejects inactive"
" users but instead delegates this decision to the authentication backend. "
":meth:`~django.test.Client.force_login()` also delegates the decision to the"
" authentication backend, so if you're using the default backends, you need "
"to use an active user."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:835
msgid ""
":func:`django.views.i18n.set_language` may now return a 204 status code for "
"AJAX requests."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:838
msgid ""
"The ``base_field`` attribute of "
":class:`~django.contrib.postgres.fields.RangeField` is now a type of field, "
"not an instance of a field.  If you have created a custom subclass of "
":class:`~django.contrib.postgres.fields.RangeField`, you should change the "
"``base_field`` attribute."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:844
msgid ""
"Middleware classes are now initialized when the server starts rather than "
"during the first request."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:847
msgid ""
"If you override ``is_authenticated()`` or ``is_anonymous()`` in a custom "
"user model, you must convert them to attributes or properties as described "
"in :ref:`the deprecation note <user-is-auth-anon-deprecation>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:851
msgid ""
"When using :attr:`ModelAdmin.save_as=True "
"<django.contrib.admin.ModelAdmin.save_as>`, the \"Save as new\" button now "
"redirects to the change view for the new object instead of to the model's "
"changelist. If you need the previous behavior, set the new "
":attr:`ModelAdmin.save_as_continue "
"<django.contrib.admin.ModelAdmin.save_as_continue>` attribute to ``False``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:858
msgid ""
"Required form fields now have the ``required`` HTML attribute. Set the "
":attr:`Form.use_required_attribute "
"<django.forms.Form.use_required_attribute>` attribute to ``False`` to "
"disable it. You could also add the ``novalidate`` attribute to ``<form>`` if"
" you don't want browser validation. To disable the ``required`` attribute on"
" custom widgets, override the :meth:`Widget.use_required_attribute() "
"<django.forms.Widget.use_required_attribute>` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:866
msgid ""
"The WSGI handler no longer removes content of responses from ``HEAD`` "
"requests or responses with a ``status_code`` of 100-199, 204, or 304. Most "
"Web servers already implement this behavior. Responses retrieved using the "
"Django test client continue to have these \"response fixes\" applied."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:871
msgid ""
"``Model.__init__()`` now receives ``django.db.models.DEFERRED`` as the value"
" of deferred fields."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:874
msgid ""
"The ``Model._deferred`` attribute is removed as dynamic model classes when "
"using ``QuerySet.defer()`` and ``only()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:877
msgid ""
":meth:`Storage.save() <django.core.files.storage.Storage.save>` no longer "
"replaces ``'\\'`` with ``'/'``. This behavior is moved to "
":class:`~django.core.files.storage.FileSystemStorage` since this is a "
"storage specific implementation detail. Any Windows user with a custom "
"storage implementation that relies on this behavior will need to implement "
"it in the custom storage's ``save()`` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:884
msgid ""
"Private :class:`~django.db.models.FileField` methods "
"``get_directory_name()`` and ``get_filename()`` are no longer called (and "
"are now deprecated) which is a backwards incompatible change for users "
"overriding those methods on custom fields. To adapt such code, override "
"``FileField.generate_filename()`` or :meth:`Storage.generate_filename() "
"<django.core.files.storage.Storage.generate_filename>` instead. It might be "
"possible to use :attr:`~django.db.models.FileField.upload_to` also."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:892
msgid ""
"The subject of mail sent by ``AdminEmailHandler`` is no longer truncated at "
"989 characters. If you were counting on a limited length, truncate the "
"subject yourself."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:896
msgid ""
"Private expressions ``django.db.models.expressions.Date`` and ``DateTime`` "
"are removed. The new :class:`~django.db.models.functions.datetime.Trunc` "
"expressions provide the same functionality."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:900
msgid ""
"The ``_base_manager`` and ``_default_manager`` attributes are removed from "
"model instances. They remain accessible on the model class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:903
msgid ""
"Accessing a deleted field on a model instance, e.g. after ``del obj.field``,"
" reloads the field's value instead of raising ``AttributeError``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:906
msgid ""
"If you subclass ``AbstractBaseUser`` and override ``clean()``, be sure it "
"calls ``super()``. :meth:`.AbstractBaseUser.normalize_username` is called in"
" a new :meth:`.AbstractBaseUser.clean` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:910
msgid ""
"Private API ``django.forms.models.model_to_dict()`` returns a queryset "
"rather than a list of primary keys for ``ManyToManyField``\\s ."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:913
msgid ""
"If ``django.contrib.staticfiles`` is installed, the :ttag:`static`  template"
" tag uses the ``staticfiles`` storage to construct the URL rather than "
"simply joining the value with ``STATIC_ROOT``. The new approach encodes the "
"URL, which could be backwards-incompatible in cases such as including a "
"fragment in a path, e.g. ``{% static 'img.svg#fragment' %}``, since the "
"``#`` is encoded as ``%23``. To adapt, move the fragment outside the "
"template tag: ``{% static 'img.svg' %}#fragment``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:925
msgid "Features deprecated in 1.10"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:928
msgid "Direct assignment to a reverse foreign key or many-to-many relation"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:930
msgid "Instead of assigning related objects using direct assignment::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:935
msgid ""
"Use the :meth:`~django.db.models.fields.related.RelatedManager.set` method "
"added in Django 1.9::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:940
msgid ""
"This prevents confusion about an assignment resulting in an implicit save."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:943
msgid "Non-timezone-aware :class:`~django.core.files.storage.Storage` API"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:945
msgid ""
"The old, non-timezone-aware methods ``accessed_time()``, ``created_time()``,"
" and ``modified_time()`` are deprecated in favor of the new ``get_*_time()``"
" methods."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:949
msgid ""
"Third-party storage backends should implement the new methods and mark the "
"old ones as deprecated. Until then, the new ``get_*_time()`` methods on the "
"base :class:`~django.core.files.storage.Storage` class convert "
"``datetime``\\s from the old methods as required and emit a deprecation "
"warning as they do so."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:954
msgid ""
"Third-party storage backends may retain the old methods as long as they wish"
" to support earlier versions of Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:960
msgid ""
"The ``get_srid()`` and ``set_srid()`` methods of "
":class:`~django.contrib.gis.geos.GEOSGeometry` are deprecated in favor of "
"the :attr:`~django.contrib.gis.geos.GEOSGeometry.srid` property."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:964
msgid ""
"The ``get_x()``, ``set_x()``, ``get_y()``, ``set_y()``, ``get_z()``, and "
"``set_z()`` methods of :class:`~django.contrib.gis.geos.Point` are "
"deprecated in favor of the ``x``, ``y``, and ``z`` properties."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:968
msgid ""
"The ``get_coords()`` and ``set_coords()`` methods of "
":class:`~django.contrib.gis.geos.Point` are deprecated in favor of the "
"``tuple`` property."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:972
msgid ""
"The ``cascaded_union`` property of "
":class:`~django.contrib.gis.geos.MultiPolygon` is deprecated in favor of the"
" :attr:`~django.contrib.gis.geos.GEOSGeometry.unary_union` property."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:976
msgid ""
"The ``django.contrib.gis.utils.precision_wkt()`` function is deprecated in "
"favor of :class:`~django.contrib.gis.geos.WKTWriter`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:980
msgid "``CommaSeparatedIntegerField`` model field"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:982
msgid ""
"``CommaSeparatedIntegerField`` is deprecated in favor of "
":class:`~django.db.models.CharField` with the "
":func:`~django.core.validators.validate_comma_separated_integer_list` "
"validator::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:993
msgid ""
"If you're using Oracle, ``CharField`` uses a different database field  type "
"(``NVARCHAR2``) than ``CommaSeparatedIntegerField`` (``VARCHAR2``). "
"Depending on your database settings, this might imply a different encoding, "
"and thus a different length (in bytes) for the same contents. If your stored"
" values are longer than the 4000 byte limit of ``NVARCHAR2``, you should use"
" ``TextField`` (``NCLOB``) instead. In this case, if you have any queries "
"that group by the field (e.g. annotating the model with an aggregation or "
"using ``distinct()``) you'll need to change them (to defer the field)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1003
msgid ""
"Using a model name as a query lookup when ``default_related_name`` is set"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1005
msgid "Assume the following models::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1018
msgid ""
"In older versions, :attr:`~django.db.models.Options.default_related_name` "
"couldn't be used as a query lookup. This is fixed and support for the old "
"lookup name is deprecated. For example, since ``default_related_name`` is "
"set in model ``Bar``, instead of using the model name ``bar`` as the "
"lookup::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1026
msgid "use the default_related_name ``bars``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1033
msgid "``__search`` query lookup"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1035
msgid ""
"The ``search`` lookup, which supports MySQL only and is extremely limited in"
" features, is deprecated. Replace it with a custom lookup::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1055
msgid ""
"Using ``User.is_authenticated()`` and ``User.is_anonymous()`` as methods"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1057
msgid ""
"The ``is_authenticated()`` and ``is_anonymous()`` methods of "
":class:`~django.contrib.auth.models.AbstractBaseUser` and "
":class:`~django.contrib.auth.models.AnonymousUser` classes are now "
"properties. They will still work as methods until Django 2.0, but all usage "
"in Django now uses attribute access."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1063
msgid ""
"For example, if you use "
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` and want "
"to know whether the user is currently logged-in you would use::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1072
msgid "instead of ``request.user.is_authenticated()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1074
msgid ""
"This change avoids accidental information leakage if you forget to call the "
"method, e.g.::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1080
msgid ""
"If you override these methods in a custom user model, you must change them "
"to properties or attributes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1083
msgid ""
"Django uses a ``CallableBool`` object to allow these attributes to work as "
"both a property and a method. Thus, until the deprecation period ends, you "
"cannot compare these properties using the ``is`` operator. That is, the "
"following won't work::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1092
msgid ""
"Custom manager classes available through ``prefetch_related`` must define a "
"``_apply_rel_filters()`` method"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1094
msgid ""
"If you defined a custom manager class available through "
":meth:`~django.db.models.query.QuerySet.prefetch_related` you must make sure"
" it defines a ``_apply_rel_filters()`` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1098
msgid ""
"This method must accept a :class:`~django.db.models.query.QuerySet` instance"
" as its single argument and return a filtered version of the queryset for "
"the model instance the manager is bound to."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1103
msgid "The \"escape\" half of ``django.utils.safestring``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1105
msgid ""
"The ``mark_for_escaping()`` function and the classes it uses: "
"``EscapeData``, ``EscapeBytes``, ``EscapeText``, ``EscapeString``, and "
"``EscapeUnicode`` are deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1109
msgid ""
"As a result, the \"lazy\" behavior of the ``escape`` filter (where it would "
"always be applied as the last filter no matter where in the filter chain it "
"appeared) is deprecated. The filter will change to immediately apply "
":func:`~django.utils.html.conditional_escape` in Django 2.0."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1115
msgid "``Manager.use_for_related_fields`` and inheritance changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1117
msgid ""
"``Manager.use_for_related_fields`` is deprecated in favor of setting "
":attr:`Meta.base_manager_name <django.db.models.Options.base_manager_name>` "
"on the model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1121
msgid ""
"Model ``Manager`` inheritance will follow MRO inheritance rules in Django "
"2.0, changing the current behavior where managers defined on non-abstract "
"base classes aren't inherited by child classes. A deprecating warning with "
"instructions on how to adapt your code is raised if you have any affected "
"managers. You'll either redeclare a manager from an abstract model on the "
"child class to override the manager from the concrete model, or you'll set "
"the model's ``Meta.manager_inheritance_from_future=True`` option to opt-in "
"to the new inheritance behavior."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1130
msgid ""
"During the deprecation period, ``use_for_related_fields`` will be honored "
"and raise a warning, even if a ``base_manager_name`` is set. This allows "
"third-party code to preserve legacy behavior while transitioning to the new "
"API. The warning can be silenced by setting "
"``silence_use_for_related_fields_deprecation=True`` on the manager."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1139
msgid ""
"The ``makemigrations --exit`` option is deprecated in favor of the "
":option:`makemigrations --check` option."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1142
msgid ""
"``django.utils.functional.allow_lazy()`` is deprecated in favor of the new "
":func:`~django.utils.functional.keep_lazy` function which can be used with a"
" more natural decorator syntax."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1146
msgid ""
"The ``shell --plain`` option is deprecated in favor of ``-i python`` or "
"``--interface python``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1149
msgid ""
"Importing from the ``django.core.urlresolvers`` module is deprecated in "
"favor of its new location, :mod:`django.urls`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1152
msgid ""
"The template ``Context.has_key()`` method is deprecated in favor of ``in``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1154
msgid ""
"The private attribute ``virtual_fields`` of ``Model._meta`` is deprecated in"
" favor of ``private_fields``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1157
msgid ""
"The private keyword arguments ``virtual_only`` in "
"``Field.contribute_to_class()`` and ``virtual`` in "
"``Model._meta.add_field()`` are deprecated in favor of ``private_only`` and "
"``private``, respectively."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1162
msgid ""
"The ``javascript_catalog()`` and ``json_catalog()`` views are deprecated in "
"favor of class-based views :class:`~django.views.i18n.JavaScriptCatalog` and"
" :class:`~django.views.i18n.JSONCatalog`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1166
msgid ""
"In multi-table inheritance, implicit promotion of a ``OneToOneField`` to a "
"``parent_link`` is deprecated. Add ``parent_link=True`` to such fields."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1169
msgid ""
"The private API ``Widget._format_value()`` is made public and renamed to "
":meth:`~django.forms.Widget.format_value`. The old name will work through a "
"deprecation period."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1173
msgid ""
"Private ``FileField`` methods ``get_directory_name()`` and "
"``get_filename()`` are deprecated in favor of performing this work in "
":meth:`Storage.generate_filename() "
"<django.core.files.storage.Storage.generate_filename>`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1178
msgid ""
"Old-style middleware that uses  ``settings.MIDDLEWARE_CLASSES`` are "
"deprecated. :ref:`Adapt old, custom middleware <upgrading-middleware>` and "
"use the new :setting:`MIDDLEWARE` setting."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1185
msgid "Features removed in 1.10"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1187
msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 1.10. See :ref:`deprecated-features-1.8` for details, "
"including how to remove usage of these features."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1191
msgid ""
"Support for calling a ``SQLCompiler`` directly as an alias for calling its "
"``quote_name_unless_alias`` method is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1194
msgid ""
"The ``cycle`` and ``firstof`` template tags are removed from the ``future`` "
"template tag library."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1197
msgid "``django.conf.urls.patterns()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1199
msgid ""
"Support for the ``prefix`` argument to "
"``django.conf.urls.i18n.i18n_patterns()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1202
msgid "``SimpleTestCase.urls`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1204
msgid ""
"Using an incorrect count of unpacked values in the ``for`` template tag "
"raises an exception rather than failing silently."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1207
msgid ""
"The ability to :func:`~django.urls.reverse` URLs using a dotted Python path "
"is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1210
msgid ""
"The ability to use a dotted Python path for the ``LOGIN_URL`` and "
"``LOGIN_REDIRECT_URL`` settings is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1213
msgid "Support for ``optparse`` is dropped for custom management commands."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1215
msgid "The class ``django.core.management.NoArgsCommand`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1217
msgid "``django.core.context_processors`` module is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1219
msgid "``django.db.models.sql.aggregates`` module is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1221
msgid "``django.contrib.gis.db.models.sql.aggregates`` module is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1223
msgid ""
"The following methods and properties of ``django.db.sql.query.Query`` are "
"removed:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1226
msgid "Properties: ``aggregates`` and ``aggregate_select``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1227
msgid ""
"Methods: ``add_aggregate``, ``set_aggregate_mask``, and "
"``append_aggregate_mask``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1230
msgid "``django.template.resolve_variable`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1232
msgid ""
"The following private APIs are removed from "
":class:`django.db.models.options.Options` (``Model._meta``):"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1235
#: ../../../../sources/1.10/docs/releases/1.8.txt:1221
msgid "``get_field_by_name()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1236
#: ../../../../sources/1.10/docs/releases/1.8.txt:1215
msgid "``get_all_field_names()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1237
#: ../../../../sources/1.10/docs/releases/1.8.txt:1222
msgid "``get_fields_with_model()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1238
#: ../../../../sources/1.10/docs/releases/1.8.txt:1220
msgid "``get_concrete_fields_with_model()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1239
#: ../../../../sources/1.10/docs/releases/1.8.txt:1223
msgid "``get_m2m_with_model()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1240
#: ../../../../sources/1.10/docs/releases/1.8.txt:1216
msgid "``get_all_related_objects()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1241
#: ../../../../sources/1.10/docs/releases/1.8.txt:1217
msgid "``get_all_related_objects_with_model()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1242
#: ../../../../sources/1.10/docs/releases/1.8.txt:1218
msgid "``get_all_related_many_to_many_objects()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1243
#: ../../../../sources/1.10/docs/releases/1.8.txt:1219
msgid "``get_all_related_m2m_objects_with_model()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1245
msgid ""
"The ``error_message`` argument of ``django.forms.RegexField`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1247
msgid "The ``unordered_list`` filter no longer supports old style lists."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1249
msgid "Support for string ``view`` arguments to ``url()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1251
msgid ""
"The backward compatible shim  to rename ``django.forms.Form._has_changed()``"
" to ``has_changed()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1254
msgid "The ``removetags`` template filter is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1256
msgid ""
"The ``remove_tags()`` and ``strip_entities()`` functions in "
"``django.utils.html`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1259
msgid ""
"The ``is_admin_site`` argument to "
"``django.contrib.auth.views.password_reset()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1262
msgid "``django.db.models.field.subclassing.SubfieldBase`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1264
msgid "``django.utils.checksums`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1266
msgid ""
"The ``original_content_type_id`` attribute on "
"``django.contrib.admin.helpers.InlineAdminForm`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1269
msgid ""
"The backwards compatibility shim to allow ``FormMixin.get_form()`` to be "
"defined with no default value for its ``form_class`` argument is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1272
msgid ""
"The following settings are removed, and :doc:`you must upgrade "
"</ref/templates/upgrading>` to the :setting:`TEMPLATES` setting:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1275
#: ../../../../sources/1.10/docs/releases/1.8.txt:1302
msgid "``ALLOWED_INCLUDE_ROOTS``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1276
#: ../../../../sources/1.10/docs/releases/1.8.txt:1303
msgid "``TEMPLATE_CONTEXT_PROCESSORS``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1277
#: ../../../../sources/1.10/docs/releases/1.8.txt:1304
msgid "``TEMPLATE_DEBUG``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1278
#: ../../../../sources/1.10/docs/releases/1.8.txt:1305
msgid "``TEMPLATE_DIRS``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1279
#: ../../../../sources/1.10/docs/releases/1.8.txt:1306
msgid "``TEMPLATE_LOADERS``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1280
#: ../../../../sources/1.10/docs/releases/1.8.txt:1307
msgid "``TEMPLATE_STRING_IF_INVALID``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1282
msgid ""
"The backwards compatibility alias ``django.template.loader.BaseLoader`` is "
"removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1285
msgid ""
"Django template objects returned by "
":func:`~django.template.loader.get_template` and "
":func:`~django.template.loader.select_template` no longer accept a "
":class:`~django.template.Context` in their "
":meth:`~django.template.backends.base.Template.render()` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1291
msgid ""
":doc:`Template response APIs </ref/template-response>` enforce the use of "
":class:`dict` and backend-dependent template objects instead of "
":class:`~django.template.Context` and :class:`~django.template.Template` "
"respectively."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1296
msgid ""
"The ``current_app`` parameter for the following function and classes is "
"removed:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1299
#: ../../../../sources/1.10/docs/releases/1.10.txt:1307
#: ../../../../sources/1.10/docs/releases/1.10.txt:1315
#: ../../../../sources/1.10/docs/releases/1.8.txt:1551
#: ../../../../sources/1.10/docs/releases/1.8.txt:1566
msgid "``django.shortcuts.render()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1300
#: ../../../../sources/1.10/docs/releases/1.8.txt:1552
msgid "``django.template.Context()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1301
#: ../../../../sources/1.10/docs/releases/1.8.txt:1553
msgid "``django.template.RequestContext()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1302
#: ../../../../sources/1.10/docs/releases/1.8.txt:1554
msgid "``django.template.response.TemplateResponse()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1304
msgid ""
"The ``dictionary`` and ``context_instance`` parameters for the following "
"functions are removed:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1308
#: ../../../../sources/1.10/docs/releases/1.10.txt:1316
#: ../../../../sources/1.10/docs/releases/1.7.txt:854
#: ../../../../sources/1.10/docs/releases/1.8.txt:1567
#: ../../../../sources/1.10/docs/releases/1.8.txt:1587
msgid "``django.shortcuts.render_to_response()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1309
#: ../../../../sources/1.10/docs/releases/1.8.txt:1568
msgid "``django.template.loader.render_to_string()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1311
msgid "The ``dirs`` parameter for the following functions is removed:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1313
msgid "``django.template.loader.get_template()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1314
msgid "``django.template.loader.select_template()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1318
msgid ""
"Session verification is enabled regardless of whether or not "
"``'django.contrib.auth.middleware.SessionAuthenticationMiddleware'`` is in "
"``MIDDLEWARE_CLASSES``. ``SessionAuthenticationMiddleware`` no longer has "
"any purpose and can be removed from ``MIDDLEWARE_CLASSES``. It's kept as a "
"stub until Django 2.0 as a courtesy for users who don't read this note."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1324
msgid "Private attribute ``django.db.models.Field.related`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1326
msgid ""
"The ``--list`` option of the ``migrate`` management command is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1328
msgid "The ``ssi`` template tag is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1330
msgid ""
"Support for the ``=`` comparison operator in the ``if`` template tag is "
"removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1333
msgid ""
"The backwards compatibility shims to allow ``Storage.get_available_name()`` "
"and ``Storage.save()`` to be defined without a ``max_length`` argument are "
"removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1337
msgid ""
"Support for the legacy ``%(<foo>)s`` syntax in "
"``ModelFormMixin.success_url`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1340
msgid ""
"``GeoQuerySet`` aggregate methods ``collect()``, ``extent()``, "
"``extent3d()``, ``make_line()``, and ``unionagg()`` are removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1343
msgid ""
"The ability to specify ``ContentType.name`` when creating a content type "
"instance is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1346
msgid "Support for the old signature of ``allow_migrate`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1348
msgid ""
"Support for the syntax of ``{% cycle %}`` that uses comma-separated "
"arguments is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.txt:1351
msgid ""
"The warning that :class:`~django.core.signing.Signer` issued when given an "
"invalid separator is now a ``ValueError``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:3
msgid "Django 1.10.1 release notes"
msgstr "Informacje o wydaniu Django 1.10.1"

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:5
msgid "*September 1, 2016*"
msgstr "*1 września 2016*"

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:7
msgid "Django 1.10.1 fixes several bugs in 1.10."
msgstr "Django 1.10.1 zawiera poprawki błędów z wersji 1.10."

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:10
#: ../../../../sources/1.10/docs/releases/1.10.2.txt:10
#: ../../../../sources/1.10/docs/releases/1.10.3.txt:46
#: ../../../../sources/1.10/docs/releases/1.4.12.txt:10
#: ../../../../sources/1.10/docs/releases/1.4.15.txt:10
#: ../../../../sources/1.10/docs/releases/1.4.16.txt:11
#: ../../../../sources/1.10/docs/releases/1.4.17.txt:13
#: ../../../../sources/1.10/docs/releases/1.4.18.txt:64
#: ../../../../sources/1.10/docs/releases/1.4.19.txt:10
#: ../../../../sources/1.10/docs/releases/1.4.6.txt:27
#: ../../../../sources/1.10/docs/releases/1.4.9.txt:19
#: ../../../../sources/1.10/docs/releases/1.5.10.txt:10
#: ../../../../sources/1.10/docs/releases/1.5.11.txt:10
#: ../../../../sources/1.10/docs/releases/1.5.12.txt:10
#: ../../../../sources/1.10/docs/releases/1.5.2.txt:31
#: ../../../../sources/1.10/docs/releases/1.5.4.txt:35
#: ../../../../sources/1.10/docs/releases/1.5.5.txt:25
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:110
#: ../../../../sources/1.10/docs/releases/1.5.7.txt:10
#: ../../../../sources/1.10/docs/releases/1.6.4.txt:10
#: ../../../../sources/1.10/docs/releases/1.6.5.txt:50
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:67
#: ../../../../sources/1.10/docs/releases/1.6.7.txt:11
#: ../../../../sources/1.10/docs/releases/1.6.8.txt:10
#: ../../../../sources/1.10/docs/releases/1.6.9.txt:13
#: ../../../../sources/1.10/docs/releases/1.7.1.txt:10
#: ../../../../sources/1.10/docs/releases/1.7.11.txt:23
#: ../../../../sources/1.10/docs/releases/1.7.2.txt:13
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:72
#: ../../../../sources/1.10/docs/releases/1.7.4.txt:10
#: ../../../../sources/1.10/docs/releases/1.7.5.txt:10
#: ../../../../sources/1.10/docs/releases/1.7.6.txt:24
#: ../../../../sources/1.10/docs/releases/1.7.7.txt:46
#: ../../../../sources/1.10/docs/releases/1.7.9.txt:59
#: ../../../../sources/1.10/docs/releases/1.8.1.txt:11
#: ../../../../sources/1.10/docs/releases/1.8.10.txt:59
#: ../../../../sources/1.10/docs/releases/1.8.12.txt:10
#: ../../../../sources/1.10/docs/releases/1.8.13.txt:10
#: ../../../../sources/1.10/docs/releases/1.8.14.txt:21
#: ../../../../sources/1.10/docs/releases/1.8.2.txt:26
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:71
#: ../../../../sources/1.10/docs/releases/1.8.4.txt:24
#: ../../../../sources/1.10/docs/releases/1.8.5.txt:10
#: ../../../../sources/1.10/docs/releases/1.8.6.txt:11
#: ../../../../sources/1.10/docs/releases/1.8.7.txt:26
#: ../../../../sources/1.10/docs/releases/1.8.8.txt:19
#: ../../../../sources/1.10/docs/releases/1.8.9.txt:10
#: ../../../../sources/1.10/docs/releases/1.9.1.txt:10
#: ../../../../sources/1.10/docs/releases/1.9.2.txt:36
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:59
#: ../../../../sources/1.10/docs/releases/1.9.5.txt:10
#: ../../../../sources/1.10/docs/releases/1.9.6.txt:10
#: ../../../../sources/1.10/docs/releases/1.9.7.txt:10
#: ../../../../sources/1.10/docs/releases/1.9.8.txt:21
#: ../../../../sources/1.10/docs/releases/1.9.9.txt:10
msgid "Bugfixes"
msgstr "Poprawki błędów"

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:12
msgid ""
"Fixed a crash in MySQL connections where ``SELECT @@SQL_AUTO_IS_NULL`` "
"doesn't return a result (:ticket:`26991`)."
msgstr "Naprawiony crash w połączeniach MySQL, gdzie ``SELECT @@SQL_AUTO_IS_NULL`` nie zwraca wyniku (:ticket:`26991`)."

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:15
msgid ""
"Allowed ``User.is_authenticated`` and ``User.is_anonymous`` properties to be"
" compared using ``==``, ``!=``, and ``|`` (:ticket:`26988`, "
":ticket:`27154`)."
msgstr "Własności ``User.is_authenticated`` i ``User.is_anonymous`` mogą być porównywane przy użyciu ``==``, ``!=`` i ``|`` (:ticket:`26988`, :ticket:`27154`)."

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:18
msgid ""
"Removed the broken ``BaseCommand.usage()`` method which was for ``optparse``"
" support (:ticket:`27000`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:21
msgid ""
"Fixed a checks framework crash with an empty ``Meta.default_permissions`` "
"(:ticket:`26997`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:24
msgid ""
"Fixed a regression in the number of queries when using ``RadioSelect`` with "
"a ``ModelChoiceField`` form field (:ticket:`27001`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:27
msgid ""
"Fixed a crash if ``request.META['CONTENT_LENGTH']`` is an empty string "
"(:ticket:`27005`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:30
msgid ""
"Fixed the ``isnull`` lookup on a ``ForeignKey`` with its ``to_field`` "
"pointing to a ``CharField`` or pointing to a ``CharField`` defined with "
"``primary_key=True`` (:ticket:`26983`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:34
msgid ""
"Prevented the ``migrate`` command from raising "
"``InconsistentMigrationHistory`` in the presence of unapplied squashed "
"migrations (:ticket:`27004`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:38
msgid ""
"Fixed a regression in ``Client.force_login()`` which required specifying a "
"``backend`` rather than automatically using the first one if multiple "
"backends are configured (:ticket:`27027`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:42
msgid ""
"Made ``QuerySet.bulk_create()`` properly initialize model instances on "
"backends, such as PostgreSQL, that support returning the IDs of the created "
"records so that many-to-many relationships can be used on the new objects "
"(:ticket:`27026`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:47
msgid ""
"Fixed crash of ``django.views.static.serve()`` with ``show_indexes`` enabled"
" (:ticket:`26973`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:50
msgid ""
"Fixed ``ClearableFileInput`` to avoid the ``required`` HTML attribute when "
"initial data exists (:ticket:`27037`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:53
msgid ""
"Fixed annotations with database functions when combined with lookups on "
"PostGIS (:ticket:`27014`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:56
msgid ""
"Reallowed the ``{% for %}`` tag to unpack any iterable (:ticket:`27058`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:58
msgid ""
"Made ``makemigrations`` skip inconsistent history checks on non-default "
"databases if database routers aren't in use or if no apps can be migrated to"
" the database (:ticket:`27054`, :ticket:`27110`, :ticket:`27142`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:62
msgid ""
"Removed duplicated managers in ``Model._meta.managers`` (:ticket:`27073`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:64
msgid ""
"Fixed ``contrib.admindocs`` crash when a view is in a class, such as some of"
" the admin views (:ticket:`27018`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:67
msgid ""
"Reverted a few admin checks that checked ``field.many_to_many`` back to "
"``isinstance(field, models.ManyToManyField)`` since it turned out the checks"
" weren't suitable to be generalized like that (:ticket:`26998`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:71
msgid ""
"Added the database alias to the ``InconsistentMigrationHistory`` message "
"raised by ``makemigrations`` and ``migrate`` (:ticket:`27089`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:74
msgid ""
"Fixed the creation of ``ContentType`` and ``Permission`` objects for models "
"of applications without migrations when calling the ``migrate`` command with"
" no migrations to apply (:ticket:`27044`)."
msgstr "Naprawiono tworzenie obiektów ``ContentType`` i ``Permission``dla modeli aplikacji bez migracji podczas wywołania komendy ``migrate`` bez migracji do zastosowania (:ticket:`27044`)."

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:78
msgid ""
"Included the already applied migration state changes in the ``Apps`` "
"instance provided to the ``pre_migrate`` signal receivers to allow "
"``ContentType`` renaming to be performed on model rename (:ticket:`27100`)."
msgstr "Dołączono już zastosowane zmiany stanu migracji w instancji ``Apps`` dostarczonej do odbiorników sygnału ``pre_migrate``, aby umożliwić zmianę nazwy ``ContentType`` w czasie zmiany nazwy modelu (:ticket:`27100`)."

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:82
msgid ""
"Reallowed subclassing ``UserCreationForm`` without ``USERNAME_FIELD`` in "
"``Meta.fields`` (:ticket:`27111`)."
msgstr "Ponownie pozwolono na dziedziczenie ``UserCreationForm`` bez ``USERNAME_FIELD`` w ``Meta.fields`` (:ticket:`27111`)."

#: ../../../../sources/1.10/docs/releases/1.10.1.txt:85
msgid ""
"Fixed a regression in model forms where model fields with a ``default`` that"
" didn't appear in POST data no longer used the ``default`` "
"(:ticket:`27039`)."
msgstr "Naprawiona regresja w model forms, gdzie pola modelu z ``default``, które nie pojawiały się w danych POST, przestawały używać ``default`` (:ticket:`27039`)."

#: ../../../../sources/1.10/docs/releases/1.10.2.txt:3
msgid "Django 1.10.2 release notes"
msgstr "Informacje o wydaniu Django 1.10.2"

#: ../../../../sources/1.10/docs/releases/1.10.2.txt:5
msgid "*October 1, 2016*"
msgstr "*1 października 2016*"

#: ../../../../sources/1.10/docs/releases/1.10.2.txt:7
msgid "Django 1.10.2 fixes several bugs in 1.10.1."
msgstr "Django 1.10.2 zawiera poprawki błędów z wersji 1.10.1."

#: ../../../../sources/1.10/docs/releases/1.10.2.txt:12
msgid ""
"Fixed a crash in MySQL database validation where ``SELECT @@sql_mode`` "
"doesn't return a result (:ticket:`27180`)."
msgstr "Naprawiony crash w walidacji bazy danych MySQL, gdzie ``SELECT @@sql_mode`` nie zwraca wyniku (:ticket:`27180`)."

#: ../../../../sources/1.10/docs/releases/1.10.2.txt:15
msgid ""
"Allowed combining ``contrib.postgres.search.SearchQuery`` with more than one"
" ``&`` or ``|`` operators (:ticket:`27143`)."
msgstr "Dozwolone łączenie ``contrib.postgres.search.SearchQuery`` z więcej niż jednym operatorem ``&`` lub ``|`` (:ticket:`27143`)."

#: ../../../../sources/1.10/docs/releases/1.10.2.txt:18
msgid ""
"Disabled system check for URL patterns beginning with a '/' when "
"``APPEND_SLASH=False`` (:ticket:`27238`)."
msgstr "Wyłączone sprawdzenie systemowe dla wzorców URL rozpoczynających się „/”, kiedy ``APPEND_SLASH=False`` (:ticket:`27238`)."

#: ../../../../sources/1.10/docs/releases/1.10.2.txt:21
msgid ""
"Fixed model form ``default`` fallback for ``CheckboxSelectMultiple``, "
"``MultiWidget``, ``FileInput``, ``SplitDateTimeWidget``, "
"``SelectDateWidget``, and ``SplitArrayWidget`` (:ticket:`27186`). Custom "
"widgets affected by this issue should implement "
":meth:`~django.forms.Widget.value_omitted_from_data`."
msgstr "Naprawiony fallback ``default`` formularza modelu dla ``CheckboxSelectMultiple``, ``MultiWidget``, ``FileInput``, ``SplitDateTimeWidget``, ``SelectDateWidget`` i ``SplitArrayWidget`` (:ticket:`27186`). Własne widgety dotknięte tym problemem powinny implementować metodę :meth:`~django.forms.Widget.value_omitted_from_data`."

#: ../../../../sources/1.10/docs/releases/1.10.2.txt:26
msgid ""
"Fixed a crash in ``runserver`` logging during a \"Broken pipe\" error "
"(:ticket:`27271`)."
msgstr "Naprawiony crash w logowaniu ``runserver`` podczas błędu „Broken pipe” (:ticket:`27271`)."

#: ../../../../sources/1.10/docs/releases/1.10.2.txt:29
msgid ""
"Fixed a regression where unchanged localized date/time fields were listed as"
" changed in the admin's model history messages (:ticket:`27302`)."
msgstr "Naprawiona regresja, gdzie niezmienione zlokalizowane pola daty lub czasu były wylistowane jako zmienione w powiadomieniach panelu o historii modelu (:ticket:`27302`)."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:3
msgid "Django 1.10.3 release notes"
msgstr "Informacje o wydaniu Django 1.10.3"

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:5
#: ../../../../sources/1.10/docs/releases/1.8.16.txt:5
#: ../../../../sources/1.10/docs/releases/1.9.11.txt:5
msgid "*November 1, 2016*"
msgstr "*1 listopada 2016*"

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:7
msgid "Django 1.10.3 fixes two security issues and several bugs in 1.10.2."
msgstr "Django 1.10.3 naprawia dwa problemy bezpieczeństwa i kilka błędów z wydania 1.10.2."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:10
#: ../../../../sources/1.10/docs/releases/1.8.16.txt:10
#: ../../../../sources/1.10/docs/releases/1.9.11.txt:10
msgid "User with hardcoded password created when running tests on Oracle"
msgstr "Użytkownik tworzony z zahard-code'owanym hasłem podczas uruchamiania testów na Oracle'u"

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:12
#: ../../../../sources/1.10/docs/releases/1.8.16.txt:12
#: ../../../../sources/1.10/docs/releases/1.9.11.txt:12
msgid ""
"When running tests with an Oracle database, Django creates a temporary "
"database user. In older versions, if a password isn't manually specified in "
"the database settings ``TEST`` dictionary, a hardcoded password is used. "
"This could allow an attacker with network access to the database server to "
"connect."
msgstr "Podczas uruchamiania testów z bazą danych Oracle, Django tworzy tymczasowego użytkownika bazy danych. W starszych wersjach, jeśli hasło nie zostało podane ręcznie w słowniku ``TEST`` ustawień bazy danych, używane jest hasło zahard-code'owane. To mogło pozwalać atakującemu z dostępem sieciowym do serwera bazy danych na połączenie."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:17
#: ../../../../sources/1.10/docs/releases/1.8.16.txt:17
#: ../../../../sources/1.10/docs/releases/1.9.11.txt:17
msgid ""
"This user is usually dropped after the test suite completes, but not when "
"using the ``manage.py test --keepdb`` option or if the user has an active "
"session (such as an attacker's connection)."
msgstr "Ten użytkownik jest zazwyczaj usuwany po tym, jak zestaw testów skończy się wykonywać, lecz nie gdy używa się opcji ``manage.py test --keepdb`` lub kiedy użytkownik ma aktywną sesję (taką jak połączenie atakującego)."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:21
#: ../../../../sources/1.10/docs/releases/1.8.16.txt:21
#: ../../../../sources/1.10/docs/releases/1.9.11.txt:21
msgid "A randomly generated password is now used for each test run."
msgstr "Losowo generowane hasło jest teraz używane przy każdym uruchomieniu testu."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:24
#: ../../../../sources/1.10/docs/releases/1.8.16.txt:24
#: ../../../../sources/1.10/docs/releases/1.9.11.txt:24
msgid "DNS rebinding vulnerability when ``DEBUG=True``"
msgstr "Słabość rebindingu DNS, gdy ``DEBUG=True``"

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:26
#: ../../../../sources/1.10/docs/releases/1.8.16.txt:26
#: ../../../../sources/1.10/docs/releases/1.9.11.txt:26
msgid ""
"Older versions of Django don't validate the ``Host`` header against "
"``settings.ALLOWED_HOSTS`` when ``settings.DEBUG=True``. This makes them "
"vulnerable to a `DNS rebinding attack "
"<http://benmmurphy.github.io/blog/2016/07/11/rails-webconsole-dns-"
"rebinding/>`_."
msgstr "Starsze wersje Django nie walidują nagłówka ``Host`` względem ``settings.ALLOWED_HOSTS``, gdy ``settings.DEBUG=True``. To sprawia, że są podatne na `atak rebindingu DNS <http://benmmurphy.github.io/blog/2016/07/11/rails-webconsole-dns-rebinding/>`_."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:31
#: ../../../../sources/1.10/docs/releases/1.8.16.txt:31
#: ../../../../sources/1.10/docs/releases/1.9.11.txt:31
msgid ""
"While Django doesn't ship a module that allows remote code execution, this "
"is at least a cross-site scripting vector, which could be quite serious if "
"developers load a copy of the production database in development or connect "
"to some production services for which there's no development instance, for "
"example. If a project uses a package like the ``django-debug-toolbar``, then"
" the attacker could execute arbitrary SQL, which could be especially bad if "
"the developers connect to the database with a superuser account."
msgstr "Jako że Django nie dostarcza modułu, który zezwala na zdalne wykonywanie kodu, jest to co najmniej wektor cross-site scriptingu, który może być całkiem poważny, jeśli deweloperzy ładują kopię produkcyjnej bazy danych w dewelopmencie lub łączą się do jakiś produkcyjnych usług, które na przykład nie mają deweloperskich instancji. Jeśli projekt używa pakietu takiego jak ``django-debug-toolbar``, wtedy atakujący mógł wykonać własny SQL, który mógł być szczególnie zły, jeśli deweloperzy łączą się do bazy danych kontem superusera."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:39
#: ../../../../sources/1.10/docs/releases/1.8.16.txt:39
#: ../../../../sources/1.10/docs/releases/1.9.11.txt:39
msgid ""
"``settings.ALLOWED_HOSTS`` is now validated regardless of ``DEBUG``. For "
"convenience, if ``ALLOWED_HOSTS`` is empty and ``DEBUG=True``, the following"
" variations of localhost are allowed ``['localhost', '127.0.0.1', '::1']``. "
"If your local settings file has your production ``ALLOWED_HOSTS`` value, you"
" must now omit it to get those fallback values."
msgstr "``settings.ALLOWED_HOSTS`` jest teraz walidowane bez względu na ``DEBUG``. Dla wygody, jeśli ``ALLOWED_HOSTS`` jest puste i ``DEBUG=True``, następujące wariacje localhosta są dopuszczone ``['localhost', '127.0.0.1', '::1']``. Jeśli twoje lokalne ustawienia mają twoją produkcyjną wartość ``ALLOWED_HOSTS``, musisz teraz ją ominąć, aby uzyskać wypisane wartości fallback."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:48
msgid ""
"Allowed ``User.is_authenticated`` and ``User.is_anonymous`` properties to be"
" tested for ``set`` membership (:ticket:`27309`)."
msgstr "Można sprawdzać przynależność własności ``User.is_authenticated`` i ``User.is_anonymous`` w obiektach klasy ``set`` (:ticket:`27309`)."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:51
msgid ""
"Fixed a performance regression when running ``migrate`` in projects with "
"``RenameModel`` operations (:ticket:`27279`)."
msgstr "Naprawiona wydajnościowa regresja przy uruchamianiu ``migrate`` w projektach z operacjami ``RenameModel`` (:ticket:`27279`)."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:54
msgid ""
"Added ``model_name`` to the ``allow_migrate()`` calls in ``makemigrations`` "
"(:ticket:`27200`)."
msgstr "Dodane ``model_name`` do wywołań ``allow_migrate()`` w ``makemigrations`` (:ticket:`27200`)."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:57
msgid ""
"Made the ``JavaScriptCatalog`` view respect the ``packages`` argument; "
"previously it was ignored (:ticket:`27374`)."
msgstr "Sprawiono, że widok ``JavaScriptCatalog`` bierze pod uwagę argument ``packages``; wcześniej go ignorował (:ticket:`27374`)."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:60
msgid ""
"Fixed ``QuerySet.bulk_create()`` on PostgreSQL when the number of objects is"
" a multiple plus one of ``batch_size`` (:ticket:`27385`)."
msgstr "Naprawiono ``QuerySet.bulk_create()`` dla PostgreSQL-a, kiedy liczba obiektów jest o jeden większa od ``batch_size`` (:ticket:`27385`)."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:63
msgid ""
"Prevented ``i18n_patterns()`` from using too much of the URL as the language"
" to fix a use case for ``prefix_default_language=False`` (:ticket:`27063`)."
msgstr "Nie dopuszczamy użycia w ``i18n_patterns()`` zbyt dużej ilości URL-a jako języka, aby naprawić przypadek użycia dla ``prefix_default_language=False`` (:ticket:`27063`)."

#: ../../../../sources/1.10/docs/releases/1.10.3.txt:66
msgid ""
"Replaced a possibly incorrect redirect from ``SessionMiddleware`` when a "
"session is destroyed in a concurrent request with a ``SuspiciousOperation`` "
"to indicate that the request can't be completed (:ticket:`27363`)."
msgstr "Zastąpiono potencjalnie niepoprawne przekierowanie z ``SessionMiddleware``, kiedy sesja jest niszczona we współbieżnym żądaniu, przez ``SuspiciousOperation``, aby sygnalizować, że żądanie nie może być ukończone (:ticket:`27363`)."

#: ../../../../sources/1.10/docs/releases/1.2.txt:3
msgid "Django 1.2 release notes"
msgstr "Informacje o wydaniu Django 1.2"

#: ../../../../sources/1.10/docs/releases/1.2.txt:5
msgid "*May 17, 2010.*"
msgstr "*17 maja 2010*"

#: ../../../../sources/1.10/docs/releases/1.2.txt:7
msgid "Welcome to Django 1.2!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:9
msgid ""
"Nearly a year in the making, Django 1.2 packs an impressive list of "
":ref:`new features <whats-new-1.2>` and lots of bug fixes. These release "
"notes cover the new features, as well as important changes you'll want to be"
" aware of when upgrading from Django 1.1 or older versions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:15
#: ../../../../sources/1.10/docs/releases/1.3.txt:16
#: ../../../../sources/1.10/docs/releases/1.4.txt:17
#: ../../../../sources/1.10/docs/releases/1.5.txt:17
msgid "Overview"
msgstr "Przegląd"

#: ../../../../sources/1.10/docs/releases/1.2.txt:17
msgid ""
"Django 1.2 introduces several large, important new features, including:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:19
msgid ""
"Support for `multiple database connections`_ in a single Django instance."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:21
msgid "`Model validation`_ inspired by Django's form validation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:23
msgid ""
"Vastly `improved protection against Cross-Site Request Forgery`_ (CSRF)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:25
msgid ""
"A new `user \"messages\" framework`_ with support for cookie- and session-"
"based message for both anonymous and authenticated users."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:28
msgid ""
"Hooks for `object-level permissions`_, `permissions for anonymous users`_, "
"and `more flexible username requirements`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:31
msgid "Customization of email sending via `email backends`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:33
msgid ""
"New :ref:`\"smart\" if template tag <new-in-1.2-smart-if>` which supports "
"comparison operators."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:41
msgid ""
"These are just the highlights; full details and a complete list of features "
"`may be found below`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:48
msgid ""
"`Django Advent`_ covered the release of Django 1.2 with a series of articles"
" and tutorials that cover some of the new features in depth."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:53
msgid ""
"Wherever possible these features have been introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:56
msgid ""
"However, a handful of features *have* changed in ways that, for some users, "
"will be backwards-incompatible. The big changes are:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:59
msgid "Support for Python 2.3 has been dropped. See the full notes below."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:62
msgid ""
"The new CSRF protection framework is not backwards-compatible with the old "
"system. Users of the old system will not be affected until the old system is"
" removed in Django 1.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:66
msgid ""
"However, upgrading to the new CSRF protection framework requires a few "
"important backwards-incompatible changes, detailed in `CSRF Protection`_, "
"below."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:70
msgid ""
"Authors of custom :class:`~django.db.models.Field` subclasses should be "
"aware that a number of methods have had a change in prototype, detailed "
"under `get_db_prep_*() methods on Field`_, below."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:74
msgid ""
"The internals of template tags have changed somewhat; authors of custom "
"template tags that need to store state (e.g. custom control flow tags) "
"should ensure that their code follows the new rules for `stateful template "
"tags`_"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:79
msgid ""
"The :func:`~django.contrib.auth.decorators.user_passes_test`, "
":func:`~django.contrib.auth.decorators.login_required`, and "
":func:`~django.contrib.auth.decorators.permission_required`, decorators from"
" :mod:`django.contrib.auth` only apply to functions and no longer work on "
"methods. There's a simple one-line fix `detailed below`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:87
msgid ""
"Again, these are just the big features that will affect the most users. "
"Users upgrading from previous versions of Django are heavily encouraged to "
"consult the complete list of :ref:`backwards-incompatible changes "
"<backwards-incompatible-changes-1.2>` and the list of :ref:`deprecated "
"features <deprecated-features-1.2>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:96
msgid ""
"While not a new feature, it's important to note that Django 1.2 introduces "
"the first shift in our Python compatibility policy since Django's initial "
"public debut. Previous Django releases were tested and supported on 2.x "
"Python versions from 2.3 up; Django 1.2, however, drops official support for"
" Python 2.3. As such, the minimum Python version required for Django is now "
"2.4, and Django is tested and supported on Python 2.4, 2.5 and 2.6, and will"
" be supported on the as-yet-unreleased Python 2.7."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:105
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.4 or newer as their "
"default version. If you're still using Python 2.3, however, you'll need to "
"stick to Django 1.1 until you can upgrade; per :doc:`our support policy "
"</internals/release-process>`, Django 1.1 will continue to receive security "
"support until the release of Django 1.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:112
msgid ""
"A roadmap for Django's overall 2.x Python support, and eventual transition "
"to Python 3.x, is currently being developed, and will be announced prior to "
"the release of Django 1.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:119
msgid "What's new in Django 1.2"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:122
msgid "Support for multiple databases"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:124
msgid ""
"Django 1.2 adds the ability to use :doc:`more than one database </topics/db"
"/multi-db>` in your Django project. Queries can be issued at a specific "
"database with the ``using()`` method on ``QuerySet`` objects. Individual "
"objects can be saved to a specific database by providing a ``using`` "
"argument when you call ``save()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:131
msgid "Model validation"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:133
msgid ""
"Model instances now have support for :ref:`validating their own data "
"<validating-objects>`, and both model and form fields now accept "
"configurable lists of :doc:`validators </ref/validators>` specifying "
"reusable, encapsulated validation behavior. Note, however, that validation "
"must still be performed explicitly. Simply invoking a model instance's "
"``save()`` method will not perform any validation of the instance's data."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:141
msgid "Improved CSRF protection"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:143
msgid ""
"Django now has much improved protection against :doc:`Cross-Site Request "
"Forgery (CSRF) attacks</ref/csrf>`. This type of attack occurs when a "
"malicious website contains a link, a form button or some JavaScript that is "
"intended to perform some action on your website, using the credentials of a "
"logged-in user who visits the malicious site in their browser. A related "
"type of attack, \"login CSRF,\" where an attacking site tricks a user's "
"browser into logging into a site with someone else's credentials, is also "
"covered."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:152
msgid "Messages framework"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:154
msgid ""
"Django now includes a robust and configurable :doc:`messages framework "
"</ref/contrib/messages>` with built-in support for cookie- and session-based"
" messaging, for both anonymous and authenticated clients. The messages "
"framework replaces the deprecated user message API and allows you to "
"temporarily store messages in one request and retrieve them for display in a"
" subsequent request (usually the next one)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:162
msgid "Object-level permissions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:164
msgid ""
"A foundation for specifying permissions at the per-object level has been "
"added. Although there is no implementation of this in core, a custom "
"authentication backend can provide this implementation and it will be used "
"by :class:`django.contrib.auth.models.User`. See the :doc:`authentication "
"docs </topics/auth/index>` for more information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:171
msgid "Permissions for anonymous users"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:173
msgid ""
"If you provide a custom auth backend with ``supports_anonymous_user`` set to"
" ``True``, AnonymousUser will check the backend for permissions, just like "
"User already did.  This is useful for centralizing permission handling - "
"apps can always delegate the question of whether something is allowed or not"
" to the authorization/authentication backend. See the :doc:`authentication "
"docs </topics/auth/index>` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:181
msgid "Relaxed requirements for usernames"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:183
msgid ""
"The built-in :class:`~django.contrib.auth.models.User` model's "
":attr:`~django.contrib.auth.models.User.username` field now allows a wider "
"range of characters, including ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:188
msgid "Email backends"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:190
msgid ""
"You can now :ref:`configure the way that Django sends email <topic-email-"
"backends>`. Instead of using SMTP to send all email, you can now choose a "
"configurable email backend to send messages. If your hosting provider uses a"
" sandbox or some other non-SMTP technique for sending mail, you can now "
"construct an email backend that will allow Django's standard :doc:`mail "
"sending methods</topics/email>` to use those facilities."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:198
msgid ""
"This also makes it easier to debug mail sending. Django ships with backend "
"implementations that allow you to send email to a :ref:`file<topic-email-"
"file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to "
":ref:`memory<topic-email-memory-backend>`. You can even configure all email "
"to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:208
msgid "\"Smart\" :ttag:`if` tag"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:210
msgid ""
"The :ttag:`if` tag has been upgraded to be much more powerful. First, we've "
"added support for comparison operators. No longer will you have to type:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:219
msgid "You can now do this:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:227
msgid ""
"There's really no reason to use ``{% ifequal %}`` or ``{% ifnotequal %}`` "
"anymore, unless you're the nostalgic type."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:230
msgid ""
"The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``, "
"``in`` and ``not in``, all of which work like the Python operators, in "
"addition to ``and``, ``or`` and ``not``, which were already supported."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:234
msgid "Also, filters may now be used in the ``if`` expression. For example:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:245
msgid "Template caching"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:247
msgid ""
"In previous versions of Django, every time you rendered a template, it would"
" be reloaded from disk. In Django 1.2, you can use a :ref:`cached template "
"loader <template-loaders>` to load templates once, then cache the result for"
" every subsequent render. This can lead to a significant performance "
"improvement if your templates are broken into lots of smaller subtemplates "
"(using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:255
msgid ""
"As a side effect, it is now much easier to support non-Django template "
"languages."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:259
msgid "Class-based template loaders"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:261
msgid ""
"As part of the changes made to introduce `Template caching`_  and following "
"a general trend in Django, the template loaders API has been modified to use"
" template loading mechanisms that are encapsulated in Python classes as "
"opposed to functions, the only method available until Django 1.1."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:266
msgid ""
"All the template loaders :ref:`shipped with Django <template-loaders>` have "
"been ported to the new API but they still implement the function-based API "
"and the template core machinery still accepts function-based loaders "
"(builtin or third party) so there is no immediate need to modify your "
"``TEMPLATE_LOADERS`` setting in existing projects, things will keep working "
"if you leave it untouched up to and including the Django 1.3 release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:273
msgid ""
"If you have developed your own custom template loaders we suggest to "
"consider porting them to a class-based implementation because the code for "
"backwards compatibility with function-based loaders starts its deprecation "
"process in Django 1.2 and will be removed in Django 1.4.  There is a "
"description of the API these loader classes must implement in the template "
"API reference and you can also examine the source code of the loaders "
"shipped with Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:281
msgid "Natural keys in fixtures"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:283
msgid ""
"Fixtures can now refer to remote objects using :ref:`topics-serialization-"
"natural-keys`. This lookup scheme is an alternative to the normal primary-"
"key based object references in a fixture, improving readability and "
"resolving problems referring to objects whose primary key value may not be "
"predictable or known."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:290
msgid "Fast failure for tests"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:292
msgid ""
"Both the :djadmin:`test` subcommand of ``django-admin.py`` and the "
"``runtests.py`` script used to run Django's own test suite now support a "
"``--failfast`` option. When specified, this option causes the test runner to"
" exit after encountering a failure instead of continuing with the test run. "
"In addition, the handling of ``Ctrl-C`` during a test run has been improved "
"to trigger a graceful exit from the test run that reports details of the "
"tests that were run before the interruption."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:301
msgid "``BigIntegerField``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:303
msgid ""
"Models can now use a 64-bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:306
msgid "Improved localization"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:308
msgid ""
"Django's :doc:`internationalization framework </topics/i18n/index>` has been"
" expanded with locale-aware formatting and form processing. That means, if "
"enabled, dates and numbers on templates will be displayed using the format "
"specified for the current locale. Django will also use localized formats "
"when parsing data in forms. See :doc:`/topics/i18n/formatting` for more "
"details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:315
msgid "``readonly_fields`` in ``ModelAdmin``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:317
msgid ""
":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to "
"enable non-editable fields in add/change pages for models and inlines. Field"
" and calculated values can be displayed alongside editable fields."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:322
msgid "Customizable syntax highlighting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:324
msgid ""
"You can now use a ``DJANGO_COLORS`` environment variable to modify or "
"disable the colors used by ``django-admin.py`` to provide :ref:`syntax "
"highlighting <syntax-coloring>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:329
msgid "Syndication feeds as views"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:331
msgid ""
":doc:`Syndication feeds </ref/contrib/syndication>` can now be used directly"
" as views in your :doc:`URLconf </topics/http/urls>`. This means that you "
"can maintain complete control over the URL structure of your feeds. Like any"
" other view, feeds views are passed a ``request`` object, so you can do "
"anything you would normally do with a view, like user based access control, "
"or making a feed a named URL."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:341
msgid ""
"The most significant new feature for :doc:`GeoDjango "
"</ref/contrib/gis/index>` in 1.2 is support for multiple spatial databases."
"  As a result, the following :ref:`spatial database backends <spatial-"
"backends>` are now included:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:346
msgid "``django.contrib.gis.db.backends.postgis``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:347
msgid "``django.contrib.gis.db.backends.mysql``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:348
msgid "``django.contrib.gis.db.backends.oracle``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:349
msgid "``django.contrib.gis.db.backends.spatialite``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:351
msgid ""
"GeoDjango now supports the rich capabilities added in the PostGIS 1.5 "
"release. New features include support for the :ref:`geography type "
"<geography-type>` and enabling of :ref:`distance queries <distance-queries>`"
" with non-point geometries on geographic coordinate systems."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:356
msgid ""
"Support for 3D geometry fields was added, and may be enabled by setting the "
":attr:`~django.contrib.gis.db.models.GeometryField.dim` keyword to 3 in your"
" :class:`~django.contrib.gis.db.models.GeometryField`. The "
":class:`~django.contrib.gis.db.models.Extent3D` aggregate and ``extent3d()``"
" ``GeoQuerySet`` method were added as a part of this feature."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:362
msgid ""
"The following :class:`~django.contrib.gis.db.models.GeoQuerySet` methods are"
" new in 1.2:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:365
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.force_rhr`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:366
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.reverse_geom`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:367
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.geohash`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:369
msgid ""
"The GEOS interface was updated to use thread-safe C library functions when "
"available on the platform."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:372
msgid ""
"The GDAL interface now allows the user to set a "
":attr:`~django.contrib.gis.gdal.Layer.spatial_filter` on the features "
"returned when iterating over a :class:`~django.contrib.gis.gdal.Layer`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:376
msgid ""
"Finally, :doc:`GeoDjango's documentation </ref/contrib/gis/index>` is now "
"included with Django's and is no longer hosted separately at `geodjango.org "
"<http://geodjango.org/>`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:383
msgid "JavaScript-assisted handling of inline related objects in the admin"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:385
msgid ""
"If a user has JavaScript enabled in their browser, the interface for inline "
"objects in the admin now allows inline objects to be dynamically added and "
"removed. Users without JavaScript-enabled browsers will see no change in the"
" behavior of inline objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:391
msgid "New ``now`` template tag format specifier characters: ``c`` and ``u``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:393
msgid ""
"The argument to the :ttag:`now` has gained two new format characters: ``c`` "
"to specify that a datetime value should be formatted in ISO 8601 format, and"
" ``u`` that allows output of the microseconds part of a datetime or time "
"value."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:398
msgid ""
"These are also available in others parts like the :tfilter:`date` and "
":tfilter:`time` template filters, the ``humanize`` template tag library and "
"the new `format localization`_ framework."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:407
msgid "Backwards-incompatible changes in 1.2"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:409
msgid ""
"Wherever possible the new features above have been introduced in a "
"backwards-compatible manner per :doc:`our API stability policy </misc/api-"
"stability>` policy. This means that practically all existing code which "
"worked with Django 1.1 will continue to work with Django 1.2; such code "
"will, however, begin issuing warnings (see below for details)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:416
msgid ""
"However, a handful of features *have* changed in ways that, for some users, "
"will be immediately backwards-incompatible. Those changes are detailed "
"below."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:421
msgid "CSRF Protection"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:423
msgid ""
"We've made large changes to the way CSRF protection works, detailed in "
":doc:`the CSRF documentation </ref/csrf>`. Here are the major changes you "
"should be aware of:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:427
msgid ""
"``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated and "
"will be removed completely in Django 1.4, in favor of a template tag that "
"should be inserted into forms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:431
msgid ""
"All contrib apps use a ``csrf_protect`` decorator to protect the view. This "
"requires the use of the ``csrf_token`` template tag in the template. If you "
"have used custom templates for contrib views, you MUST READ THE UPGRADE "
"INSTRUCTIONS to fix those templates."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:436
#: ../../../../sources/1.10/docs/releases/1.2.txt:865
msgid "Documentation removed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:438
#: ../../../../sources/1.10/docs/releases/1.2.txt:867
msgid ""
"The upgrade notes have been removed in current Django docs. Please refer to "
"the docs for Django 1.3 or older to find these instructions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:441
msgid ""
"``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by "
"default. This turns on CSRF protection by default, so views that accept POST"
" requests need to be written to work with the middleware. Instructions on "
"how to do this are found in the CSRF docs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:446
msgid ""
"All of the CSRF has moved from contrib to core (with backwards compatible "
"imports in the old locations, which are deprecated and will cease to be "
"supported in Django 1.4)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:451
msgid "``get_db_prep_*()`` methods on ``Field``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:453
msgid ""
"Prior to Django 1.2, a custom ``Field`` had the option of defining several "
"functions to support conversion of Python values into database-compatible "
"values. A custom field might look something like::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:471
msgid ""
"In 1.2, these three methods have undergone a change in prototype, and two "
"extra methods have been introduced::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:495
msgid ""
"These changes are required to support multiple databases -- ``db_type`` and "
"``get_db_prep_*`` can no longer make any assumptions regarding the database "
"for which it is preparing. The ``connection`` argument now provides the "
"preparation methods with the specific connection for which the value is "
"being prepared."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:501
msgid ""
"The two new methods exist to differentiate general data-preparation "
"requirements from requirements that are database-specific. The ``prepared`` "
"argument is used to indicate to the database-preparation methods whether "
"generic value preparation has been performed. If an unprepared (i.e., "
"``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they"
" should invoke the corresponding ``get_prep_*()`` calls to perform generic "
"data preparation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:509
msgid ""
"We've provided conversion functions that will transparently convert "
"functions adhering to the old prototype into functions compatible with the "
"new prototype. However, these conversion functions will be removed in Django"
" 1.4, so you should upgrade your ``Field`` definitions to use the new "
"prototype as soon as possible."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:515
msgid ""
"If your ``get_db_prep_*()`` methods made no use of the database connection, "
"you should be able to upgrade by renaming ``get_db_prep_value()`` to "
"``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()``. "
"If you require database specific conversions, then you will need to provide "
"an implementation ``get_db_prep_*`` that uses the ``connection`` argument to"
" resolve database-specific values."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:524
msgid "Stateful template tags"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:526
msgid ""
"Template tags that store rendering state on their ``Node`` subclass have "
"always been vulnerable to thread-safety and other issues; as of Django 1.2, "
"however, they may also cause problems when used with the new :ref:`cached "
"template loader<template-loaders>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:531
msgid ""
"All of the built-in Django template tags are safe to use with the cached "
"loader, but if you're using custom template tags that come from third party "
"packages, or from your own code, you should ensure that the ``Node`` "
"implementation for each tag is thread-safe. For more information, see "
":ref:`template tag thread safety "
"considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:538
msgid ""
"You may also need to update your templates if you were relying on the "
"implementation of Django's template tags *not* being thread safe. The "
":ttag:`cycle` tag is the most likely to be affected in this way, especially "
"when used in conjunction with the :ttag:`include` tag. Consider the "
"following template fragment::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:548
msgid "with a ``subtemplate.html`` that reads::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:552
msgid ""
"Using the non-thread-safe, pre-Django 1.2 renderer, this would output::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:556
msgid "Using the thread-safe Django 1.2 renderer, you will instead get::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:560
msgid ""
"This is because each rendering of the :ttag:`include` tag is an independent "
"rendering. When the :ttag:`cycle` tag was not thread safe, the state of the "
":ttag:`cycle` tag would leak between multiple renderings of the same "
":ttag:`include`. Now that the :ttag:`cycle` tag is thread safe, this leakage"
" no longer occurs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:567
msgid "``user_passes_test``, ``login_required`` and ``permission_required``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:569
msgid ""
"``django.contrib.auth.decorators`` provides the decorators "
"``login_required``, ``permission_required`` and ``user_passes_test``. "
"Previously it was possible to use these decorators both on functions (where "
"the first argument is 'request') and on methods (where the first argument is"
" 'self', and the second argument is 'request'). Unfortunately, flaws were "
"discovered in the code supporting this: it only works in limited "
"circumstances, and produces errors that are very difficult to debug when it "
"does not work."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:579
msgid ""
"For this reason, the 'auto adapt' behavior has been removed, and if you are "
"using these decorators on methods, you will need to manually apply "
":func:`django.utils.decorators.method_decorator` to convert the decorator to"
" one that works with methods. For example, you would change code from this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:601
#: ../../../../sources/1.10/docs/releases/1.6.txt:1017
msgid "or::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:613
msgid ""
"For those of you who've been following the development trunk, this change "
"also applies to other decorators introduced since 1.1, including "
"``csrf_protect``, ``cache_control`` and anything created using "
"``decorator_from_middleware``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:619
msgid ":ttag:`if` tag changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:621
msgid ""
"Due to new features in the :ttag:`if` template tag, it no longer accepts "
"'and', 'or' and 'not' as valid **variable** names. Previously, these strings"
" could be used as variable names. Now, the keyword status is always "
"enforced, and template code such as ``{% if not %}`` or ``{% if and %}`` "
"will throw a ``TemplateSyntaxError``. Also, ``in`` is a new keyword and so "
"is not a valid variable name in this tag."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:629
msgid "``LazyObject``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:631
msgid ""
"``LazyObject`` is an undocumented-but-often-used utility class used for "
"lazily wrapping other objects of unknown type."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:634
msgid ""
"In Django 1.1 and earlier, it handled introspection in a non-standard way, "
"depending on wrapped objects implementing a public method named "
"``get_all_members()``. Since this could easily lead to name clashes, it has "
"been changed to use the standard Python introspection method, involving "
"``__members__`` and ``__dir__()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:640
msgid ""
"If you used ``LazyObject`` in your own code and implemented the "
"``get_all_members()`` method for wrapped objects, you'll need to make a "
"couple of changes:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:644
msgid ""
"First, if your class does not have special requirements for introspection "
"(i.e., you have not implemented ``__getattr__()`` or other methods that "
"allow for attributes not discoverable by normal mechanisms), you can simply "
"remove the ``get_all_members()`` method. The default implementation on "
"``LazyObject`` will do the right thing."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:650
msgid ""
"If you have more complex requirements for introspection, first rename the "
"``get_all_members()`` method to ``__dir__()``. This is the standard "
"introspection method for Python 2.6 and above. If you require support for "
"Python versions earlier than 2.6, add the following code to the class::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:658
msgid "``__dict__`` on model instances"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:660
msgid ""
"Historically, the ``__dict__`` attribute of a model instance has only "
"contained attributes corresponding to the fields on a model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:663
msgid ""
"In order to support multiple database configurations, Django 1.2 has added a"
" ``_state`` attribute to object instances. This attribute will appear in "
"``__dict__`` for a model instance. If your code relies on iterating over "
"``__dict__`` to obtain a list of fields, you must now be prepared to handle "
"or filter out the ``_state`` attribute."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:672
msgid ""
"The exit status code of the test runners (``tests/runtests.py`` and ``python"
" manage.py test``) no longer represents the number of failed tests, because "
"a failure of 256 or more tests resulted in a wrong exit status code. The "
"exit status code for the test runner is now 0 for success (no failing tests)"
" and 1 for any number of test failures. If needed, the number of test "
"failures can be found at the end of the test runner's output."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:682
msgid ""
"To fix bugs with cookies in Internet Explorer, Safari, and possibly other "
"browsers, our encoding of cookie values was changed so that the comma and "
"semicolon are treated as non-safe characters, and are therefore encoded as "
"``\\054`` and ``\\073`` respectively.  This could produce backwards "
"incompatibilities, especially if you are storing comma or semi-colon in "
"cookies and have JavaScript code that parses and manipulates cookie values "
"client-side."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:691
msgid "``ModelForm.is_valid()`` and ``ModelForm.errors``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:693
msgid ""
"Much of the validation work for ModelForms has been moved down to the model "
"level. As a result, the first time you call ``ModelForm.is_valid()``, access"
" ``ModelForm.errors`` or otherwise trigger form validation, your model will "
"be cleaned in-place. This conversion used to happen when the model was "
"saved. If you need an unmodified instance of your model, you should pass a "
"copy to the ``ModelForm`` constructor."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:701
msgid "``BooleanField`` on MySQL"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:703
msgid ""
"In previous versions of Django, a model's ``BooleanField`` under MySQL would"
" return its value as either ``1`` or ``0``, instead of ``True`` or "
"``False``; for most people this wasn't a problem because ``bool`` is a "
"subclass of ``int`` in Python. In Django 1.2, however, ``BooleanField`` on "
"MySQL correctly returns a real ``bool``.  The only time this should ever be "
"an issue is if you were expecting the ``repr`` of a ``BooleanField`` to "
"print ``1`` or ``0``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:712
msgid "Changes to the interpretation of ``max_num`` in FormSets"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:714
msgid ""
"As part of enhancements made to the handling of FormSets, the default value "
"and interpretation of the ``max_num`` parameter to the "
":ref:`django.forms.formsets.formset_factory() <formsets-max-num>` and "
":ref:`django.forms.models.modelformset_factory() <model-formsets-max-num>` "
"functions has changed slightly. This change also affects the way the "
":attr:`~django.contrib.admin.InlineModelAdmin.max_num` argument is used for "
"inline admin objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:723
msgid ""
"Previously, the default value for ``max_num`` was ``0`` (zero). FormSets "
"then used the boolean value of ``max_num`` to determine if a limit was to be"
" imposed on the number of generated forms. The default value of ``0`` meant "
"that there was no default limit on the number of forms in a FormSet."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:729
msgid ""
"Starting with 1.2, the default value for ``max_num`` has been changed to "
"``None``, and FormSets will differentiate between a value of ``None`` and a "
"value of ``0``. A value of ``None`` indicates that no limit on the number of"
" forms is to be imposed; a value of ``0`` indicates that a maximum of 0 "
"forms should be imposed. This doesn't necessarily mean that no forms will be"
" displayed -- see the :ref:`ModelFormSet documentation <model-formsets-max-"
"num>` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:738
msgid ""
"If you were manually specifying a value of ``0`` for ``max_num``, you will "
"need to update your FormSet and/or admin definitions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:743
msgid ":ref:`1.2-js-assisted-inlines`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:746
msgid "``email_re``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:748
msgid ""
"An undocumented regular expression for validating email addresses has been "
"moved from ``django.form.fields`` to ``django.core.validators``. You will "
"need to update your imports if you are using it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:755
msgid "Features deprecated in 1.2"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:757
msgid ""
"Finally, Django 1.2 deprecates some features from earlier releases. These "
"features are still supported, but will be gradually phased out over the next"
" few release cycles."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:761
msgid ""
"Code taking advantage of any of the features below will raise a "
"``PendingDeprecationWarning`` in Django 1.2. This warning will be silent by "
"default, but may be turned on using Python's :mod:`warnings` module, or by "
"running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:766
msgid ""
"In Django 1.3, these warnings will become a ``DeprecationWarning``, which is"
" *not* silent. In Django 1.4 support for these features will be removed "
"entirely."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:772
msgid ""
"For more details, see the documentation :doc:`Django's release process "
"</internals/release-process>` and our :doc:`deprecation timeline "
"</internals/deprecation>`.`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:779
msgid "Specifying databases"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:781
msgid ""
"Prior to Django 1.2, Django used a number of settings to control access to a"
" single database. Django 1.2 introduces support for multiple databases, and "
"as a result the way you define database settings has changed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:786
msgid ""
"Any existing Django settings file will continue to work as expected until "
"Django 1.4. Until then, old-style database settings will be automatically "
"translated to the new-style format."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:790
msgid ""
"In the old-style (pre 1.2) format, you had a number of ``DATABASE_`` "
"settings in your settings file. For example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:798
msgid ""
"These settings are now in a dictionary named :setting:`DATABASES`. Each item"
" in the dictionary corresponds to a single database connection, with the "
"name ``'default'`` describing the default database connection. The setting "
"names have also been shortened. The previous sample settings would now look "
"like this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:813
msgid "This affects the following settings:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:816
msgid "Old setting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:816
msgid "New Setting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:818
msgid "`DATABASE_ENGINE`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:818
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:819
msgid "`DATABASE_HOST`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:819
msgid ":setting:`HOST`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:820
msgid "`DATABASE_NAME`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:820
msgid ":setting:`NAME`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:821
msgid "`DATABASE_OPTIONS`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:821
msgid ":setting:`OPTIONS`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:822
msgid "`DATABASE_PASSWORD`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:822
msgid ":setting:`PASSWORD`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:823
msgid "`DATABASE_PORT`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:823
msgid ":setting:`PORT`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:824
msgid "`DATABASE_USER`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:824
msgid ":setting:`USER`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:825
msgid "`TEST_DATABASE_CHARSET`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:825
msgid ":setting:`TEST_CHARSET`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:826
msgid "`TEST_DATABASE_COLLATION`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:826
msgid ":setting:`TEST_COLLATION`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:827
msgid "`TEST_DATABASE_NAME`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:827
msgid ":setting:`TEST_NAME`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:830
msgid ""
"These changes are also required if you have manually created a database "
"connection using ``DatabaseWrapper()`` from your database backend of choice."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:833
msgid ""
"In addition to the change in structure, Django 1.2 removes the special "
"handling for the built-in database backends. All database backends must now "
"be specified by a fully qualified module name (i.e., "
"``django.db.backends.postgresql_psycopg2``, rather than just "
"``postgresql_psycopg2``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:840
msgid "``postgresql`` database backend"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:842
msgid ""
"The ``psycopg1`` library has not been updated since October 2005. As a "
"result, the ``postgresql`` database backend, which uses this library, has "
"been deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:846
msgid ""
"If you are currently using the ``postgresql`` backend, you should migrate to"
" using the ``postgresql_psycopg2`` backend. To update your code, install the"
" ``psycopg2`` library and change the :setting:`ENGINE <DATABASE-ENGINE>` "
"setting to use ``django.db.backends.postgresql_psycopg2``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:853
msgid "CSRF response-rewriting middleware"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:855
msgid ""
"``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF "
"tokens into ``POST`` forms in outgoing pages, has been deprecated in favor "
"of a template tag method (see above), and will be removed completely in "
"Django 1.4. ``CsrfMiddleware``, which includes the functionality of "
"``CsrfResponseMiddleware`` and ``CsrfViewMiddleware``, has likewise been "
"deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:862
msgid ""
"Also, the CSRF module has moved from contrib to core, and the old imports "
"are deprecated, as described in the upgrading notes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:871
msgid "``SMTPConnection``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:873
msgid ""
"The ``SMTPConnection`` class has been deprecated in favor of a generic email"
" backend API. Old code that explicitly instantiated an instance of an "
"SMTPConnection::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:882
msgid ""
"...should now call :meth:`~django.core.mail.get_connection()` to instantiate"
" a generic email connection::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:890
msgid ""
"Depending on the value of the :setting:`EMAIL_BACKEND` setting, this may not"
" return an SMTP connection. If you explicitly require an SMTP connection "
"with which to send email, you can explicitly request an SMTP connection::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:900
msgid ""
"If your call to construct an instance of ``SMTPConnection`` required "
"additional arguments, those arguments can be passed to the "
":meth:`~django.core.mail.get_connection()` call::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:907
msgid "User Messages API"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:909
msgid ""
"The API for storing messages in the user ``Message`` model (via "
"``user.message_set.create``) is now deprecated and will be removed in Django"
" 1.4 according to the standard :doc:`release process </internals/release-"
"process>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:913
msgid "To upgrade your code, you need to replace any instances of this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:917
msgid "...with the following::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:922
msgid ""
"Additionally, if you make use of the method, you need to replace the "
"following::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:928
msgid "...with::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:934
msgid ""
"For more information, see the full :doc:`messages documentation "
"</ref/contrib/messages>`. You should begin to update your code to use the "
"new API immediately."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:939
msgid "Date format helper functions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:941
msgid ""
"``django.utils.translation.get_date_formats()`` and "
"``django.utils.translation.get_partial_date_formats()`` have been deprecated"
" in favor of the appropriate calls to ``django.utils.formats.get_format()``,"
" which is locale-aware when :setting:`USE_L10N` is set to ``True``, and "
"falls back to default settings if set to ``False``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:947
msgid "To get the different date formats, instead of writing this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:952
msgid "...use::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:959
msgid "Or, when directly formatting a date value::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:964
msgid "The same applies to the globals found in ``django.forms.fields``:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:966
msgid "``DEFAULT_DATE_INPUT_FORMATS``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:967
msgid "``DEFAULT_TIME_INPUT_FORMATS``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:968
msgid "``DEFAULT_DATETIME_INPUT_FORMATS``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:970
msgid ""
"Use ``django.utils.formats.get_format()`` to get the appropriate formats."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:973
msgid "Function-based test runners"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:975
msgid ""
"Django 1.2 changes the test runner tools to use a class-based approach. Old "
"style function-based test runners will still work, but should be updated to "
"use the new :ref:`class-based runners <topics-testing-test_runner>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:983
msgid "``Feed`` in ``django.contrib.syndication.feeds``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:985
msgid ""
"The ``django.contrib.syndication.feeds.Feed`` class has been replaced by the"
" :class:`django.contrib.syndication.views.Feed` class. The old "
"``feeds.Feed`` class is deprecated, and will be removed in Django 1.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:990
msgid ""
"The new class has an almost identical API, but allows instances to be used "
"as views. For example, consider the use of the old framework in the "
"following :doc:`URLconf </topics/http/urls>`::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1009
msgid ""
"Using the new Feed class, these feeds can be deployed directly as views::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1021
msgid ""
"If you currently use the ``feed()`` view, the ``LatestEntries`` class would "
"often not need to be modified apart from subclassing the new "
":class:`~django.contrib.syndication.views.Feed` class. The exception is if "
"Django was automatically working out the name of the template to use to "
"render the feed's description and title elements (if you were not specifying"
" the ``title_template`` and ``description_template`` attributes). You should"
" ensure that you always specify ``title_template`` and "
"``description_template`` attributes, or provide ``item_title()`` and "
"``item_description()`` methods."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1030
msgid ""
"However, ``LatestEntriesByCategory`` uses the ``get_object()`` method with "
"the ``bits`` argument to specify a specific category to show. In the new "
":class:`~django.contrib.syndication.views.Feed` class, ``get_object()`` "
"method takes a ``request`` and arguments from the URL, so it would look like"
" this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1046
msgid ""
"Additionally, the ``get_feed()`` method on ``Feed`` classes now take "
"different arguments, which may impact you if you use the ``Feed`` classes "
"directly. Instead of just taking an optional ``url`` argument, it now takes "
"two arguments: the object returned by its own ``get_object()`` method, and "
"the current ``request`` object."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1052
msgid ""
"To take into account ``Feed`` classes not being initialized for each "
"request, the ``__init__()`` method now takes no arguments by default. "
"Previously it would have taken the ``slug`` from the URL and the ``request``"
" object."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1057
msgid ""
"In accordance with `RSS best practices`_, RSS feeds will now include an "
"``atom:link`` element. You may need to update your tests to take this into "
"account."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1061
msgid ""
"For more information, see the full :doc:`syndication framework documentation"
" </ref/contrib/syndication>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1067
msgid "Technical message IDs"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1069
msgid ""
"Up to version 1.1 Django used technical message IDs to provide localizers "
"the possibility to translate date and time formats. They were translatable "
":term:`translation strings <translation string>` that could be recognized "
"because they were all upper case (for example :setting:`DATETIME_FORMAT`, "
":setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`). They have been deprecated "
"in favor of the new :doc:`/topics/i18n/formatting` infrastructure that "
"allows localizers to specify that information in a ``formats.py`` file in "
"the corresponding ``django/conf/locale/<locale name>/`` directory."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1082
msgid ""
"To allow support for multiple databases, the GeoDjango database internals "
"were changed substantially.  The largest backwards-incompatible change is "
"that the module ``django.contrib.gis.db.backend`` was renamed to "
":mod:`django.contrib.gis.db.backends`, where the full-fledged :ref:`spatial "
"database backends <spatial-backends>` now exist.  The following sections "
"provide information on the most-popular APIs that were affected by these "
"changes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1091
msgid "``SpatialBackend``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1093
msgid ""
"Prior to the creation of the separate spatial backends, the "
"``django.contrib.gis.db.backend.SpatialBackend`` object was provided as an "
"abstraction to introspect on the capabilities of the spatial database.  All "
"of the attributes and routines provided by ``SpatialBackend`` are now a part"
" of the ``ops`` attribute of the database backend."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1100
msgid ""
"The old module ``django.contrib.gis.db.backend`` is still provided for "
"backwards-compatibility access to a ``SpatialBackend`` object, which is just"
" an alias to the ``ops`` module of the *default* spatial database "
"connection."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1105
msgid ""
"Users that were relying on undocumented modules and objects within "
"``django.contrib.gis.db.backend``, rather the abstractions provided by "
"``SpatialBackend``, are required to modify their code. For example, the "
"following import which would work in 1.1 and below::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1113
msgid "Would need to be changed::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1119
msgid "``SpatialRefSys`` and ``GeometryColumns`` models"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1121
msgid ""
"In previous versions of GeoDjango, :mod:`django.contrib.gis.db.models` had "
"``SpatialRefSys`` and ``GeometryColumns`` models for querying the OGC "
"spatial metadata tables ``spatial_ref_sys`` and ``geometry_columns``, "
"respectively."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1126
msgid ""
"While these aliases are still provided, they are only for the *default* "
"database connection and exist only if the default connection is using a "
"supported spatial database backend."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1132
msgid ""
"Because the table structure of the OGC spatial metadata tables differs "
"across spatial databases, the ``SpatialRefSys`` and ``GeometryColumns`` "
"models can no longer be associated with the ``gis`` application name.  Thus,"
" no models will be returned when using the ``get_models`` method in the "
"following example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1142
msgid ""
"To get the correct ``SpatialRefSys`` and ``GeometryColumns`` for your "
"spatial database use the methods provided by the spatial backend::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1151
msgid ""
"When using the models returned from the ``spatial_ref_sys()`` and "
"``geometry_columns()`` method, you'll still need to use the correct database"
" alias when querying on the non-default connection. In other words, to "
"ensure that the models in the example above use the correct database::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1161
msgid "Language code ``no``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1163
msgid ""
"The currently used language code for Norwegian Bokmål ``no`` is being "
"replaced by the more common language code ``nb``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1167
msgid "Function-based template loaders"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.txt:1169
msgid ""
"Django 1.2 changes the template loading mechanism to use a class-based "
"approach. Old style function-based template loaders will still work, but "
"should be updated to use the new class-based template loaders."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.1.txt:3
msgid "Django 1.2.1 release notes"
msgstr "Informacje o wydaniu Django 1.2.1"

#: ../../../../sources/1.10/docs/releases/1.2.1.txt:5
msgid ""
"Django 1.2.1 was released almost immediately after 1.2.0 to correct two "
"small bugs: one was in the documentation packaging script, the other was a "
"bug_ that affected datetime form field widgets when localization was "
"enabled."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.2.txt:3
msgid "Django 1.2.2 release notes"
msgstr "Informacje o wydaniu Django 1.2.2"

#: ../../../../sources/1.10/docs/releases/1.2.2.txt:5
msgid "Welcome to Django 1.2.2!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.2.txt:7
msgid ""
"This is the second \"bugfix\" release in the Django 1.2 series, improving "
"the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.2.txt:10
msgid ""
"Django 1.2.2 maintains backwards compatibility with Django 1.2.1, but "
"contain a number of fixes and other improvements. Django 1.2.2 is a "
"recommended upgrade for any development or deployment currently using or "
"targeting Django 1.2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.2.txt:15
#: ../../../../sources/1.10/docs/releases/1.2.4.txt:15
#: ../../../../sources/1.10/docs/releases/1.2.5.txt:15
msgid ""
"For full details on the new features, backwards incompatibilities, and "
"deprecated features in the 1.2 branch, see the :doc:`/releases/1.2`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.2.txt:21
msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.2.2, we have made an exception to this rule."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.2.txt:24
msgid ""
"In order to test a bug fix that forms part of the 1.2.2 release, it was "
"necessary to add a feature -- the ``enforce_csrf_checks`` flag -- to the "
":ref:`test client <test-client>`. This flag forces the test client to "
"perform full CSRF checks on forms. The default behavior of the test client "
"hasn't changed, but if you want to do CSRF checks with the test client, it "
"is now possible to do so."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.3.txt:3
msgid "Django 1.2.3 release notes"
msgstr "Informacje o wydaniu Django 1.2.3"

#: ../../../../sources/1.10/docs/releases/1.2.3.txt:5
msgid ""
"Django 1.2.3 fixed a couple of release problems in the 1.2.2 release and was"
" released two days after 1.2.2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.3.txt:8
msgid "This release corrects the following problems:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.3.txt:10
msgid ""
"The patch_ applied for the security issue covered in Django 1.2.2 caused "
"issues with non-ASCII responses using CSRF tokens."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.3.txt:13
msgid ""
"The patch also caused issues with some forms, most notably the user-editing "
"forms in the Django administrative interface."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.3.txt:16
msgid ""
"The packaging manifest did not contain the full list of required files."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.4.txt:3
msgid "Django 1.2.4 release notes"
msgstr "Informacje o wydaniu Django 1.2.4"

#: ../../../../sources/1.10/docs/releases/1.2.4.txt:5
msgid "Welcome to Django 1.2.4!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.4.txt:7
msgid ""
"This is the fourth \"bugfix\" release in the Django 1.2 series, improving "
"the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.4.txt:10
msgid ""
"With one exception, Django 1.2.4 maintains backwards compatibility with "
"Django 1.2.3. It also contains a number of fixes and other improvements. "
"Django 1.2.4 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.4.txt:55
msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.2.4, we have made an exception to this rule."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.4.txt:58
msgid ""
"One of the bugs fixed in Django 1.2.4 involves a set of circumstances "
"whereby a running a test suite on a multiple database configuration could "
"cause the original source database (i.e., the actual production database) to"
" be dropped, causing catastrophic loss of data. In order to provide a fix "
"for this problem, it was necessary to introduce a new setting -- "
":setting:`TEST_DEPENDENCIES` -- that allows you to define any creation order"
" dependencies in your database configuration."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.4.txt:67
msgid ""
"Most users -- even users with multiple-database configurations -- need not "
"be concerned about the data loss bug, or the manual configuration of "
":setting:`TEST_DEPENDENCIES`. See the `original problem report`_ "
"documentation on :ref:`controlling the creation order of test databases "
"<topics-testing-creation-dependencies>` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.4.txt:78
msgid ""
"The function-based :setting:`TEST_RUNNER` previously used to execute the "
"GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was "
"finally deprecated in favor of a class-based test runner, "
"``django.contrib.gis.tests.GeoDjangoTestSuiteRunner``, added in this "
"release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.4.txt:84
msgid ""
"In addition, the GeoDjango test suite is now included when :ref:`running the"
" Django test suite <running-unit-tests>` with ``runtests.py`` and using "
":ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:3
msgid "Django 1.2.5 release notes"
msgstr "Informacje o wydaniu Django 1.2.5"

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:5
msgid "Welcome to Django 1.2.5!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:7
msgid ""
"This is the fifth \"bugfix\" release in the Django 1.2 series, improving the"
" stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:10
msgid ""
"With four exceptions, Django 1.2.5 maintains backwards compatibility with "
"Django 1.2.4. It also contains a number of fixes and other improvements. "
"Django 1.2.5 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:71
msgid "FileField no longer deletes files"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:73
msgid ""
"In earlier Django versions, when a model instance containing a "
":class:`~django.db.models.FileField` was deleted, "
":class:`~django.db.models.FileField` took it upon itself to also delete the "
"file from the backend storage. This opened the door to several potentially "
"serious data-loss scenarios, including rolled-back transactions and fields "
"on different models referencing the same file. In Django 1.2.5, "
":class:`~django.db.models.FileField` will never delete files from the "
"backend storage. If you need cleanup of orphaned files, you'll need to "
"handle it yourself (for instance, with a custom management command that can "
"be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:85
#: ../../../../sources/1.10/docs/releases/1.3.txt:520
msgid "Use of custom SQL to load initial data in tests"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:87
#: ../../../../sources/1.10/docs/releases/1.3.txt:522
msgid ""
"Django provides a custom SQL hooks as a way to inject hand-crafted SQL into "
"the database synchronization process. One of the possible uses for this "
"custom SQL is to insert data into your database. If your custom SQL contains"
" ``INSERT`` statements, those insertions will be performed every time your "
"database is synchronized. This includes the synchronization of any test "
"databases that are created when you run a test suite."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:95
#: ../../../../sources/1.10/docs/releases/1.3.txt:530
msgid ""
"However, in the process of testing the Django 1.3, it was discovered that "
"this feature has never completely worked as advertised. When using database "
"backends that don't support transactions, or when using a "
"TransactionTestCase, data that has been inserted using custom SQL will not "
"be visible during the testing process."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:101
#: ../../../../sources/1.10/docs/releases/1.3.txt:536
msgid ""
"Unfortunately, there was no way to rectify this problem without introducing "
"a backwards incompatibility. Rather than leave SQL-inserted initial data in "
"an uncertain state, Django now enforces the policy that data inserted by "
"custom SQL will *not* be visible during testing."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:107
#: ../../../../sources/1.10/docs/releases/1.3.txt:542
msgid ""
"This change only affects the testing process. You can still use custom SQL "
"to load data into your production database as part of the ``syncdb`` "
"process. If you require data to exist during test conditions, you should "
"either insert it using :ref:`test fixtures <topics-testing-fixtures>`, or "
"using the ``setUp()`` method of your test case."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:115
msgid "ModelAdmin.lookup_allowed signature changed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.5.txt:117
msgid ""
"Django 1.2.4 introduced a method ``lookup_allowed`` on ``ModelAdmin``, to "
"cope with a security issue (changeset `[15033] "
"<https://code.djangoproject.com/changeset/15033>`_). Although this method "
"was never documented, it seems some people have overridden "
"``lookup_allowed``, especially to cope with regressions introduced by that "
"changeset. While the method is still undocumented and not marked as stable, "
"it may be helpful to know that the signature of this function has changed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.6.txt:3
msgid "Django 1.2.6 release notes"
msgstr "Informacje o wydaniu Django 1.2.6"

#: ../../../../sources/1.10/docs/releases/1.2.6.txt:5
#: ../../../../sources/1.10/docs/releases/1.3.1.txt:5
msgid "*September 9, 2011*"
msgstr "*9 września 2011*"

#: ../../../../sources/1.10/docs/releases/1.2.6.txt:7
msgid "Welcome to Django 1.2.6!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.6.txt:9
msgid ""
"This is the sixth bugfix/security release in the Django 1.2 series, fixing "
"several security issues present in Django 1.2.5.  Django 1.2.6 is a "
"recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.6.txt:13
#: ../../../../sources/1.10/docs/releases/1.3.1.txt:13
#: ../../../../sources/1.10/docs/releases/1.3.2.txt:11
#: ../../../../sources/1.10/docs/releases/1.4.1.txt:11
msgid ""
"For a full list of issues addressed in this release, see the `security "
"advisory`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.7.txt:3
msgid "Django 1.2.7 release notes"
msgstr "Informacje o wydaniu Django 1.2.7"

#: ../../../../sources/1.10/docs/releases/1.2.7.txt:5
msgid "*September 10, 2011*"
msgstr "*10 września 2011*"

#: ../../../../sources/1.10/docs/releases/1.2.7.txt:7
msgid "Welcome to Django 1.2.7!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.7.txt:9
msgid ""
"This is the seventh bugfix/security release in the Django 1.2 series. It "
"replaces Django 1.2.6 due to problems with the 1.2.6 release tarball. Django"
" 1.2.7 is a recommended upgrade for all users of any Django release in the "
"1.2.X series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.2.7.txt:14
msgid "For more information, see the `release advisory`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:3
msgid "Django 1.3 release notes"
msgstr "Informacje o wydaniu Django 1.3"

#: ../../../../sources/1.10/docs/releases/1.3.txt:5
msgid "*March 23, 2011*"
msgstr "*23 marca 2011*"

#: ../../../../sources/1.10/docs/releases/1.3.txt:7
msgid "Welcome to Django 1.3!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:9
msgid ""
"Nearly a year in the making, Django 1.3 includes quite a few :ref:`new "
"features <whats-new-1.3>` and plenty of bug fixes and improvements to "
"existing features. These release notes cover the new features in 1.3, as "
"well as some :ref:`backwards-incompatible changes <backwards-incompatible-"
"changes-1.3>` you'll want to be aware of when upgrading from Django 1.2 or "
"older versions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:18
msgid ""
"Django 1.3's focus has mostly been on resolving smaller, long-standing "
"feature requests, but that hasn't prevented a few fairly significant new "
"features from landing, including:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:22
msgid "A framework for writing `class-based views`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:24
msgid "Built-in support for `using Python's logging facilities`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:26
msgid "Contrib support for `easy handling of static files`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:28
msgid ""
"Django's testing framework now supports (and ships with a copy of) `the "
"unittest2 library`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:31
msgid ""
"Wherever possible, of course, new features are introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy. As a result of this policy, Django 1.3 :ref:`begins the deprecation "
"process for some features <deprecated-features-1.3>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:44
msgid ""
"The release of Django 1.2 was notable for having the first shift in Django's"
" Python compatibility policy; prior to Django 1.2, Django supported any 2.x "
"version of Python from 2.3 up. As of Django 1.2, the minimum requirement was"
" raised to Python 2.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:49
msgid ""
"Django 1.3 continues to support Python 2.4, but will be the final Django "
"release series to do so; beginning with Django 1.4, the minimum supported "
"Python version will be 2.5. A document outlining our full timeline for "
"deprecating Python 2.x and moving to Python 3.x will be published shortly "
"after the release of Django 1.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:58
msgid "What's new in Django 1.3"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:61
msgid "Class-based views"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:63
msgid ""
"Django 1.3 adds a framework that allows you to use a class as a view. This "
"means you can compose a view out of a collection of methods that can be "
"subclassed and overridden to provide common views of data without having to "
"write too much code."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:68
msgid ""
"Analogs of all the old function-based generic views have been provided, "
"along with a completely generic view base class that can be used as the "
"basis for reusable applications that can be easily extended."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:73
msgid ""
"See :doc:`the documentation on class-based generic views</topics/class-"
"based-views/index>` for more details. There is also a document to help you "
"`convert your function-based generic views to class-based views "
"<https://docs.djangoproject.com/en/1.4/topics/generic-views-migration/>`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:79
#: ../../../../sources/1.10/docs/releases/1.8.txt:399
msgid "Logging"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:81
msgid ""
"Django 1.3 adds framework-level support for Python's ``logging`` module.  "
"This means you can now easily configure and control logging as part of your "
"Django project. A number of logging handlers and logging calls have been "
"added to Django's own code as well -- most notably, the error emails sent on"
" a HTTP 500 server error are now handled as a logging activity. See "
":doc:`the documentation on Django's logging interface </topics/logging>` for"
" more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:90
msgid "Extended static files handling"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:92
msgid ""
"Django 1.3 ships with a new contrib app -- ``django.contrib.staticfiles`` --"
" to help developers handle the static media files (images, CSS, JavaScript, "
"etc.) that are needed to render a complete web page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:97
msgid ""
"In previous versions of Django, it was common to place static assets in "
":setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at"
" :setting:`MEDIA_URL`. Part of the purpose of introducing the "
"``staticfiles`` app is to make it easier to keep static files separate from "
"user-uploaded files. Static assets should now go in ``static/`` "
"subdirectories of your apps or in other static assets directories listed in "
":setting:`STATICFILES_DIRS`, and will be served at :setting:`STATIC_URL`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:106
msgid ""
"See the :doc:`reference documentation of the app </ref/contrib/staticfiles>`"
" for more details or learn how to :doc:`manage static files </howto/static-"
"files/index>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:111
msgid "unittest2 support"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:113
msgid ""
"Python 2.7 introduced some major changes to the ``unittest`` library, adding"
" some extremely useful features. To ensure that every Django project can "
"benefit from these new features, Django ships with a copy of unittest2_, a "
"copy of the Python 2.7 unittest library, backported for Python 2.4 "
"compatibility."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:119
msgid ""
"To access this library, Django provides the ``django.utils.unittest`` module"
" alias. If you are using Python 2.7, or you have installed ``unittest2`` "
"locally, Django will map the alias to the installed version of the unittest "
"library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:125
msgid "To take advantage of this alias, simply use::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:129
msgid "wherever you would have historically used::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:133
msgid ""
"If you want to continue to use the base unittest library, you can -- you "
"just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:139
msgid "Transaction context managers"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:141
msgid ""
"Users of Python 2.5 and above may now use transaction management functions "
"as context managers. For example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:148
msgid "Configurable delete-cascade"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:150
msgid ""
":class:`~django.db.models.ForeignKey` and "
":class:`~django.db.models.OneToOneField` now accept an "
":attr:`~django.db.models.ForeignKey.on_delete` argument to customize "
"behavior when the referenced object is deleted. Previously, deletes were "
"always cascaded; available alternatives now include set null, set default, "
"set to any value, protect, or do nothing."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:157
msgid ""
"For more information, see the :attr:`~django.db.models.ForeignKey.on_delete`"
" documentation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:161
msgid "Contextual markers and comments for translatable strings"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:163
msgid ""
"For translation strings with ambiguous meaning, you can now use the "
"``pgettext`` function to specify the context of the string."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:166
msgid ""
"And if you just want to add some information for translators, you can also "
"add special translator comments in the source."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:169
msgid ""
"For more information, see :ref:`contextual-markers` and :ref:`translator-"
"comments`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:173
msgid "Improvements to built-in template tags"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:175
msgid ""
"A number of improvements have been made to Django's built-in template tags:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:177
msgid ""
"The :ttag:`include` tag now accepts a ``with`` option, allowing you to "
"specify context variables to the included template"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:180
msgid ""
"The :ttag:`include` tag now accepts an ``only`` option, allowing you to "
"exclude the current context from the included context"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:183
msgid ""
"The :ttag:`with` tag now allows you to define multiple context variables in "
"a single :ttag:`with` block."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:186
msgid ""
"The :ttag:`load` tag now accepts a ``from`` argument, allowing you to load a"
" single tag or filter from a library."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:190
msgid "TemplateResponse"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:192
msgid ""
"It can sometimes be beneficial to allow decorators or middleware to modify a"
" response *after* it has been constructed by the view. For example, you may "
"want to change the template that is used, or put additional data into the "
"context."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:197
msgid ""
"However, you can't (easily) modify the content of a basic "
":class:`~django.http.HttpResponse` after it has been constructed. To "
"overcome this limitation, Django 1.3 adds a new "
":class:`~django.template.response.TemplateResponse` class. Unlike basic "
":class:`~django.http.HttpResponse` objects, "
":class:`~django.template.response.TemplateResponse` objects retain the "
"details of the template and context that was provided by the view to compute"
" the response. The final output of the response is not computed until it is "
"needed, later in the response process."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:207
msgid ""
"For more details, see the :doc:`documentation </ref/template-response>` on "
"the :class:`~django.template.response.TemplateResponse` class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:211
msgid "Caching changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:213
msgid ""
"Django 1.3 sees the introduction of several improvements to the Django's "
"caching infrastructure."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:216
msgid ""
"Firstly, Django now supports multiple named caches. In the same way that "
"Django 1.2 introduced support for multiple database connections, Django 1.3 "
"allows you to use the new :setting:`CACHES` setting to define multiple named"
" cache connections."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:221
msgid ""
"Secondly, :ref:`versioning <cache_versioning>`, :ref:`site-wide prefixing "
"<cache_key_prefixing>` and :ref:`transformation <cache_key_transformation>` "
"have been added to the cache API."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:225
msgid ""
"Thirdly, :ref:`cache key creation <using-vary-headers>` has been updated to "
"take the request query string into account on ``GET`` requests."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:229
msgid ""
"Finally, support for pylibmc_ has been added to the memcached cache backend."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:232
msgid ""
"For more details, see the :doc:`documentation on caching in "
"Django</topics/cache>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:238
msgid "Permissions for inactive users"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:240
msgid ""
"If you provide a custom auth backend with ``supports_inactive_user`` set to "
"``True``, an inactive ``User`` instance will check the backend for "
"permissions.  This is useful for further centralizing the permission "
"handling. See the :doc:`authentication docs </topics/auth/index>` for more "
"details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:249
msgid ""
"The GeoDjango test suite is now included when :ref:`running the Django test "
"suite <running-unit-tests>` with ``runtests.py`` when using :ref:`spatial "
"database backends <spatial-backends>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:254
msgid ":setting:`MEDIA_URL` and :setting:`STATIC_URL` must end in a slash"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:256
msgid ""
"Previously, the :setting:`MEDIA_URL` setting only required a trailing slash "
"if it contained a suffix beyond the domain name."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:259
msgid ""
"A trailing slash is now *required* for :setting:`MEDIA_URL` and the new "
":setting:`STATIC_URL` setting as long as it is not blank. This ensures there"
" is a consistent way to combine paths in templates."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:263
msgid ""
"Project settings which provide either of both settings without a trailing "
"slash will now raise a ``PendingDeprecationWarning``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:266
msgid ""
"In Django 1.4 this same condition will raise ``DeprecationWarning``, and in "
"Django 1.5 will raise an ``ImproperlyConfigured`` exception."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:270
msgid "Everything else"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:272
msgid ""
"Django :doc:`1.1 <1.1>` and :doc:`1.2 <1.2>` added lots of big ticket items "
"to Django, like multiple-database support, model validation, and a session-"
"based messages framework. However, this focus on big features came at the "
"cost of lots of smaller features."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:278
msgid ""
"To compensate for this, the focus of the Django 1.3 development process has "
"been on adding lots of smaller, long standing feature requests. These "
"include:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:282
msgid ""
"Improved tools for accessing and manipulating the current "
":class:`~django.contrib.sites.models.Site` object in :doc:`the sites "
"framework </ref/contrib/sites>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:286
msgid "A :class:`~django.test.RequestFactory` for mocking requests in tests."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:289
msgid ""
"A new test assertion -- "
":meth:`~django.test.TransactionTestCase.assertNumQueries` -- making it "
"easier to test the database activity associated with a view."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:293
msgid ""
"Support for lookups spanning relations in admin's "
":attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:296
msgid "Support for HTTPOnly_ cookies."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:298
msgid ""
":meth:`~django.core.mail.mail_admins()` and "
":meth:`~django.core.mail.mail_managers()` now support easily attaching HTML "
"content to messages."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:302
msgid ":class:`~django.core.mail.EmailMessage` now supports CC's."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:304
msgid ""
"Error emails now include more of the detail and formatting of the debug "
"server error page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:307
msgid ""
":meth:`~django.template.Library.simple_tag` now accepts a ``takes_context`` "
"argument, making it easier to write simple template tags that require access"
" to template context."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:311
msgid ""
"A new :meth:`~django.shortcuts.render()` shortcut -- an alternative to "
"``django.shortcuts.render_to_response()`` providing a "
":class:`~django.template.RequestContext` by default."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:315
msgid ""
"Support for combining :class:`F expressions <django.db.models.F>` with "
"timedelta values when retrieving or updating database values."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:323
msgid "Backwards-incompatible changes in 1.3"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:326
msgid "CSRF validation now applies to AJAX requests"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:328
msgid ""
"Prior to Django 1.2.5, Django's CSRF-prevention system exempted AJAX "
"requests from CSRF verification; due to `security issues`_ reported to us, "
"however, *all* requests are now subjected to CSRF verification. Consult "
":doc:`the Django CSRF documentation </ref/csrf>` for details on how to "
"handle CSRF verification in AJAX requests."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:340
msgid ""
"Prior to Django 1.2.5, the Django administrative interface allowed filtering"
" on any model field or relation -- not just those specified in "
"``list_filter`` -- via query string manipulation. Due to security issues "
"reported to us, however, query string lookup arguments in the admin must be "
"for fields or relations specified in ``list_filter`` or ``date_hierarchy``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:348
msgid "Deleting a model doesn't delete associated files"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:350
msgid ""
"In earlier Django versions, when a model instance containing a "
":class:`~django.db.models.FileField` was deleted, "
":class:`~django.db.models.FileField` took it upon itself to also delete the "
"file from the backend storage. This opened the door to several data-loss "
"scenarios, including rolled-back transactions and fields on different models"
" referencing the same file. In Django 1.3, when a model is deleted the "
":class:`~django.db.models.FileField`’s ``delete()`` method won't be called. "
"If you need cleanup of orphaned files, you'll need to handle it yourself "
"(for instance, with a custom management command that can be run manually or "
"scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:362
msgid "PasswordInput default rendering behavior"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:364
msgid ""
"The :class:`~django.forms.PasswordInput` form widget, intended for use with "
"form fields which represent passwords, accepts a boolean keyword argument "
"``render_value`` indicating whether to send its data back to the browser "
"when displaying a submitted form with errors. Prior to Django 1.3, this "
"argument defaulted to ``True``, meaning that the submitted password would be"
" sent back to the browser as part of the form. Developers who wished to add "
"a bit of additional security by excluding that value from the redisplayed "
"form could instantiate a :class:`~django.forms.PasswordInput` passing "
"``render_value=False`` ."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:374
msgid ""
"Due to the sensitive nature of passwords, however, Django 1.3 takes this "
"step automatically; the default value of ``render_value`` is now ``False``, "
"and developers who want the password value returned to the browser on a "
"submission with errors (the previous behavior) must now explicitly indicate "
"this. For example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:385
msgid "Clearable default widget for FileField"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:387
msgid ""
"Django 1.3 now includes a :class:`~django.forms.ClearableFileInput` form "
"widget in addition to :class:`~django.forms.FileInput`. "
"``ClearableFileInput`` renders with a checkbox to clear the field's value "
"(if the field has a value and is not required); ``FileInput`` provided no "
"means for clearing an existing file from a ``FileField``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:393
msgid ""
"``ClearableFileInput`` is now the default widget for a ``FileField``, so "
"existing forms including ``FileField`` without assigning a custom widget "
"will need to account for the possible extra checkbox in the rendered form "
"output."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:397
msgid ""
"To return to the previous rendering (without the ability to clear the "
"``FileField``), use the ``FileInput`` widget in place of "
"``ClearableFileInput``. For instance, in a ``ModelForm`` for a hypothetical "
"``Document`` model with a ``FileField`` named ``document``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:411
msgid "New index on database session table"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:413
msgid ""
"Prior to Django 1.3, the database table used by the database backend for the"
" :doc:`sessions </topics/http/sessions>` app had no index on the "
"``expire_date`` column. As a result, date-based queries on the session table"
" -- such as the query that is needed to purge old sessions -- would be very "
"slow if there were lots of sessions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:419
msgid ""
"If you have an existing project that is using the database session backend, "
"you don't have to do anything to accommodate this change. However, you may "
"get a significant performance boost if you manually add the new index to the"
" session table. The SQL that will add the index can be found by running the "
"``sqlindexes`` admin command::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:428
msgid "No more naughty words"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:430
msgid ""
"Django has historically provided (and enforced) a list of profanities. The "
"comments app has enforced this list of profanities, preventing people from "
"submitting comments that contained one of those profanities."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:434
msgid ""
"Unfortunately, the technique used to implement this profanities list was "
"woefully naive, and prone to the `Scunthorpe problem`_. Improving the built-"
"in filter to fix this problem would require significant effort, and since "
"natural language processing isn't the normal domain of a web framework, we "
"have \"fixed\" the problem by making the list of prohibited words an empty "
"list."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:441
msgid ""
"If you want to restore the old behavior, simply put a ``PROFANITIES_LIST`` "
"setting in your settings file that includes the words that you want to "
"prohibit (see the `commit that implemented this change`_ if you want to see "
"the list of words that was historically prohibited). However, if avoiding "
"profanities is important to you, you would be well advised to seek out a "
"better, less naive approach to the problem."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:453
msgid "Localflavor changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:455
msgid ""
"Django 1.3 introduces the following backwards-incompatible changes to local "
"flavors:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:458
msgid ""
"Canada (ca) -- The province \"Newfoundland and Labrador\" has had its "
"province code updated to \"NL\", rather than the older \"NF\". In addition, "
"the Yukon Territory has had its province code corrected to \"YT\", instead "
"of \"YK\"."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:463
msgid ""
"Indonesia (id) -- The province \"Nanggroe Aceh Darussalam (NAD)\" has been "
"removed from the province list in favor of the new official designation "
"\"Aceh (ACE)\"."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:467
msgid ""
"United States of America (us) -- The list of \"states\" used by "
"``USStateField`` has expanded to include Armed Forces postal codes. This is "
"backwards-incompatible if you were relying on ``USStateField`` not including"
" them."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:473
msgid "FormSet updates"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:475
msgid ""
"In Django 1.3 ``FormSet`` creation behavior is modified slightly. "
"Historically the class didn't make a distinction between not being passed "
"data and being passed empty dictionary. This was inconsistent with behavior "
"in other parts of the framework. Starting with 1.3 if you pass in empty "
"dictionary the ``FormSet`` will raise a ``ValidationError``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:481
msgid "For example with a ``FormSet``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:488
msgid "the following code will raise a ``ValidationError``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:495
msgid ""
"if you need to instantiate an empty ``FormSet``, don't pass in the data or "
"use ``None``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:502
msgid "Callables in templates"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:504
msgid ""
"Previously, a callable in a template would only be called automatically as "
"part of the variable resolution process if it was retrieved via attribute "
"lookup. This was an inconsistency that could result in confusing and "
"unhelpful behavior::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:514
msgid ""
"This has been resolved in Django 1.3 - the result in both cases will be "
"``u'Joe Bloggs'``. Although the previous behavior was not useful for a "
"template language designed for web designers, and was never deliberately "
"supported, it is possible that some templates may be broken by this change."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:550
msgid "Changed priority of translation loading"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:552
msgid ""
"Work has been done to simplify, rationalize and properly document the "
"algorithm used by Django at runtime to build translations from the different"
" translations found on disk, namely:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:556
msgid ""
"For translatable literals found in Python code and templates (``'django'`` "
"gettext domain):"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:559
msgid ""
"Priorities of translations included with applications listed in the "
":setting:`INSTALLED_APPS` setting were changed. To provide a behavior "
"consistent with other parts of Django that also use such setting (templates,"
" etc.) now, when building the translation that will be made available, the "
"apps listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:565
msgid ""
"Now it is possible to override the translations shipped with applications by"
" using the :setting:`LOCALE_PATHS` setting whose translations have now "
"higher precedence than the translations of :setting:`INSTALLED_APPS` "
"applications. The relative priority among the values listed in this setting "
"has also been modified so the paths listed first have higher precedence than"
" the ones listed later."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:572
msgid ""
"The ``locale`` subdirectory of the directory containing the settings, that "
"usually coincides with and is known as the *project directory* is being "
"deprecated in this release as a source of translations. (the precedence of "
"these translations is intermediate between applications and "
":setting:`LOCALE_PATHS` translations). See the `corresponding deprecated "
"features section`_ of this document."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:579
msgid ""
"For translatable literals found in JavaScript code (``'djangojs'`` gettext "
"domain):"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:582
msgid ""
"Similarly to the ``'django'`` domain translations: Overriding of "
"translations shipped with applications by using the :setting:`LOCALE_PATHS` "
"setting is now possible for this domain too. These translations have higher "
"precedence than the translations of Python packages passed to the "
":ref:`javascript_catalog view <javascript_catalog-view>`.  Paths listed "
"first have higher precedence than the ones listed later."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:589
msgid ""
"Translations under the ``locale`` subdirectory of the *project directory* "
"have never been taken in account for JavaScript translations and remain in "
"the same situation considering the deprecation of such location."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:596
msgid "Transaction management"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:598
msgid ""
"When using managed transactions -- that is, anything but the default "
"autocommit mode -- it is important when a transaction is marked as "
"\"dirty\". Dirty transactions are committed by the ``commit_on_success`` "
"decorator or the ``django.middleware.transaction.TransactionMiddleware``, "
"and ``commit_manually`` forces them to be closed explicitly; clean "
"transactions \"get a pass\", which means they are usually rolled back at the"
" end of a request when the connection is closed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:606
msgid ""
"Until Django 1.3, transactions were only marked dirty when Django was aware "
"of a modifying operation performed in them; that is, either some model was "
"saved, some bulk update or delete was performed, or the user explicitly "
"called ``transaction.set_dirty()``. In Django 1.3, a transaction is marked "
"dirty when *any* database operation is performed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:613
msgid ""
"As a result of this change, you no longer need to set a transaction dirty "
"explicitly when you execute raw SQL or use a data-modifying ``SELECT``. "
"However, you *do* need to explicitly close any read-only transactions that "
"are being managed using ``commit_manually()``. For example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:623
msgid ""
"Prior to Django 1.3, this would work without error. However, under Django "
"1.3, this will raise a "
":class:`~django.db.transaction.TransactionManagementError` because the read "
"operation that retrieves the ``MyObject`` instance leaves the transaction in"
" a dirty state."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:630
msgid "No password reset for inactive users"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:632
msgid ""
"Prior to Django 1.3, inactive users were able to request a password reset "
"email and reset their password. In Django 1.3 inactive users will receive "
"the same message as a nonexistent account."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:637
msgid "Password reset view now accepts ``from_email``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:639
msgid ""
"The :func:`django.contrib.auth.views.password_reset` view now accepts a "
"``from_email`` parameter, which is passed to the ``password_reset_form``’s "
"``save()`` method as a keyword argument. If you are using this view with a "
"custom password reset form, then you will need to ensure your form's "
"``save()`` method accepts this keyword argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:648
msgid "Features deprecated in 1.3"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:650
msgid ""
"Django 1.3 deprecates some features from earlier releases. These features "
"are still supported, but will be gradually phased out over the next few "
"release cycles."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:654
msgid ""
"Code taking advantage of any of the features below will raise a "
"``PendingDeprecationWarning`` in Django 1.3. This warning will be silent by "
"default, but may be turned on using Python's :mod:`warnings` module, or by "
"running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:659
msgid ""
"In Django 1.4, these warnings will become a ``DeprecationWarning``, which is"
" *not* silent. In Django 1.5 support for these features will be removed "
"entirely."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:665
msgid ""
"For more details, see the documentation :doc:`Django's release process "
"</internals/release-process>` and our :doc:`deprecation timeline "
"</internals/deprecation>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:670
msgid "``mod_python`` support"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:672
msgid ""
"The ``mod_python`` library has not had a release since 2007 or a commit "
"since 2008. The Apache Foundation board voted to remove ``mod_python`` from "
"the set of active projects in its version control repositories, and its lead"
" developer has shifted all of his efforts toward the lighter, slimmer, more "
"stable, and more flexible ``mod_wsgi`` backend."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:678
msgid ""
"If you are currently using the ``mod_python`` request handler, you should "
"redeploy your Django projects using another request handler. :doc:`mod_wsgi "
"</howto/deployment/wsgi/modwsgi>` is the request handler recommended by the "
"Django project, but FastCGI is also supported. Support for ``mod_python`` "
"deployment will be removed in Django 1.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:685
msgid "Function-based generic views"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:687
msgid ""
"As a result of the introduction of class-based generic views, the function-"
"based generic views provided by Django have been deprecated. The following "
"modules and the views they contain have been deprecated:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:691
msgid "``django.views.generic.create_update``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:692
msgid "``django.views.generic.date_based``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:693
msgid "``django.views.generic.list_detail``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:694
msgid "``django.views.generic.simple``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:697
msgid "Test client response ``template`` attribute"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:699
msgid ""
"Django's :ref:`test client <test-client>` returns "
":class:`~django.test.Response` objects annotated with extra testing "
"information. In Django versions prior to 1.3, this included a ``template`` "
"attribute containing information about templates rendered in generating the "
"response: either None, a single :class:`~django.template.Template` object, "
"or a list of :class:`~django.template.Template` objects. This inconsistency "
"in return values (sometimes a list, sometimes not) made the attribute "
"difficult to work with."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:708
msgid ""
"In Django 1.3 the ``template`` attribute is deprecated in favor of a new "
":attr:`~django.test.Response.templates` attribute, which is always a list, "
"even if it has only a single element or no elements."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:713
msgid "``DjangoTestRunner``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:715
msgid ""
"As a result of the introduction of support for unittest2, the features of "
"``django.test.simple.DjangoTestRunner`` (including fail-fast and Ctrl-C test"
" termination) have been made redundant. In view of this redundancy, "
"``DjangoTestRunner`` has been turned into an empty placeholder class, and "
"will be removed entirely in Django 1.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:722
msgid "Changes to ``url`` and ``ssi``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:724
msgid ""
"Most template tags will allow you to pass in either constants or variables "
"as arguments -- for example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:729
msgid ""
"allows you to specify a base template as a constant, but if you have a "
"context variable ``templ`` that contains the value ``base.html``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:734
msgid "is also legal."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:736
msgid ""
"However, due to an accident of history, the ``url`` and ``ssi`` are "
"different. These tags use the second, quoteless syntax, but interpret the "
"argument as a constant. This means it isn't possible to use a context "
"variable as the target of a ``url`` and ``ssi`` tag."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:741
msgid ""
"Django 1.3 marks the start of the process to correct this historical "
"accident. Django 1.3 adds a new template library -- ``future`` -- that "
"provides alternate implementations of the ``url`` and ``ssi`` template tags."
" This ``future`` library implement behavior that makes the handling of the "
"first argument consistent with the handling of all other variables. So, an "
"existing template that contains::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:750
msgid "should be replaced with::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:755
msgid ""
"The tags implementing the old behavior have been deprecated, and in Django "
"1.5, the old behavior will be replaced with the new behavior. To ensure "
"compatibility with future versions of Django, existing templates should be "
"modified to use the new ``future`` libraries and syntax."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:762
msgid "Changes to the login methods of the admin"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:764
msgid ""
"In previous version the admin app defined login methods in multiple "
"locations and ignored the almost identical implementation in the already "
"used auth app. A side effect of this duplication was the missing adoption of"
" the changes made in r12634_ to support a broader set of characters for "
"usernames."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:769
msgid ""
"This release refactors the admin's login mechanism to use a subclass of the "
":class:`~django.contrib.auth.forms.AuthenticationForm` instead of a manual "
"form validation. The previously undocumented method "
"``'django.contrib.admin.sites.AdminSite.display_login_form'`` has been "
"removed in favor of a new :attr:`~django.contrib.admin.AdminSite.login_form`"
" attribute."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:779
msgid "``reset`` and ``sqlreset`` management commands"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:781
msgid ""
"Those commands have been deprecated. The ``flush`` and ``sqlflush`` commands"
" can be used to delete everything. You can also use ALTER TABLE or DROP "
"TABLE statements manually."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:789
msgid ""
"The function-based :setting:`TEST_RUNNER` previously used to execute the "
"GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was "
"deprecated for the class-based runner, "
"``django.contrib.gis.tests.GeoDjangoTestSuiteRunner``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:794
msgid ""
"Previously, calling :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` "
"would silently do nothing when GDAL wasn't available.  Now, a "
":class:`~django.contrib.gis.geos.GEOSException` is properly raised to "
"indicate possible faulty application code.  A warning is now raised if "
":meth:`~django.contrib.gis.geos.GEOSGeometry.transform` is called when the "
"SRID of the geometry is less than 0 or ``None``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:803
msgid "``CZBirthNumberField.clean``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:805
msgid ""
"Previously this field's ``clean()`` method accepted a second, gender, "
"argument which allowed stronger validation checks to be made, however since "
"this argument could never actually be passed from the Django form machinery "
"it is now pending deprecation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:811
msgid "``CompatCookie``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:813
msgid ""
"Previously, ``django.http`` exposed an undocumented ``CompatCookie`` class, "
"which was a bugfix wrapper around the standard library ``SimpleCookie``. As "
"the fixes are moving upstream, this is now deprecated - you should use "
"``from django.http import SimpleCookie`` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:821
msgid "Loading of *project-level* translations"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:823
msgid ""
"This release of Django starts the deprecation process for inclusion of "
"translations located under the so-called *project path* in the translation "
"building process performed at runtime. The :setting:`LOCALE_PATHS` setting "
"can be used for the same task by adding the filesystem path to a ``locale`` "
"directory containing project-level translations to the value of that "
"setting."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:829
msgid "Rationale for this decision:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:831
msgid ""
"The *project path* has always been a loosely defined concept (actually, the "
"directory used for locating project-level translations is the directory "
"containing the settings module) and there has been a shift in other parts of"
" the framework to stop using it as a reference for location of assets at "
"runtime."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:837
msgid ""
"Detection of the ``locale`` subdirectory tends to fail when the deployment "
"scenario is more complex than the basic one. e.g. it fails when the settings"
" module is a directory (ticket #10765)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:841
msgid ""
"There are potential strange development- and deployment-time problems like "
"the fact that the ``project_dir/locale/`` subdir can generate spurious error"
" messages when the project directory is added to the Python path "
"(``manage.py runserver`` does this) and then it clashes with the equally "
"named standard library module, this is a typical warning message::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:851
msgid ""
"This location wasn't included in the translation building process for "
"JavaScript literals. This deprecation removes such inconsistency."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:856
msgid "``PermWrapper`` moved to ``django.contrib.auth.context_processors``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:858
msgid ""
"In Django 1.2, we began the process of changing the location of the ``auth``"
" context processor from ``django.core.context_processors`` to "
"``django.contrib.auth.context_processors``. However, the ``PermWrapper`` "
"support class was mistakenly omitted from that migration. In Django 1.3, the"
" ``PermWrapper`` class has also been moved to "
"``django.contrib.auth.context_processors``, along with the "
"``PermLookupDict`` support class. The new classes are functionally identical"
" to their old versions; only the module location has changed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:868
msgid "Removal of ``XMLField``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:870
msgid ""
"When Django was first released, Django included an ``XMLField`` that "
"performed automatic XML validation for any field input. However, this "
"validation function hasn't been performed since the introduction of "
"``newforms``, prior to the 1.0 release. As a result, ``XMLField`` as "
"currently implemented is functionally indistinguishable from a simple "
":class:`~django.db.models.TextField`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:876
msgid ""
"For this reason, Django 1.3 has fast-tracked the deprecation of ``XMLField``"
" -- instead of a two-release deprecation, ``XMLField`` will be removed "
"entirely in Django 1.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.txt:880
msgid ""
"It's easy to update your code to accommodate this change -- just replace all"
" uses of ``XMLField`` with ``TextField``, and remove the ``schema_path`` "
"keyword argument (if it is specified)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.1.txt:3
msgid "Django 1.3.1 release notes"
msgstr "Informacje o wydaniu Django 1.3.1"

#: ../../../../sources/1.10/docs/releases/1.3.1.txt:7
msgid "Welcome to Django 1.3.1!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.1.txt:9
msgid ""
"This is the first security release in the Django 1.3 series, fixing several "
"security issues in Django 1.3.  Django 1.3.1 is a recommended upgrade for "
"all users of Django 1.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.2.txt:3
msgid "Django 1.3.2 release notes"
msgstr "Informacje o wydaniu Django 1.3.2"

#: ../../../../sources/1.10/docs/releases/1.3.2.txt:5
#: ../../../../sources/1.10/docs/releases/1.4.1.txt:5
msgid "*July 30, 2012*"
msgstr "*30 lipca 2012*"

#: ../../../../sources/1.10/docs/releases/1.3.2.txt:7
msgid ""
"This is the second security release in the Django 1.3 series, fixing several"
" security issues in Django 1.3. Django 1.3.2 is a recommended upgrade for "
"all users of Django 1.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.3.txt:3
msgid "Django 1.3.3 release notes"
msgstr "Informacje o wydaniu Django 1.3.3"

#: ../../../../sources/1.10/docs/releases/1.3.3.txt:5
msgid "*August 1, 2012*"
msgstr "*1 sierpnia 2012*"

#: ../../../../sources/1.10/docs/releases/1.3.3.txt:7
msgid ""
"Following Monday's security release of :doc:`Django 1.3.2 "
"</releases/1.3.2>`, we began receiving reports that one of the fixes applied"
" was breaking Python 2.4 compatibility for Django 1.3. Since Python 2.4 is a"
" supported Python version for that release series, this release fixes "
"compatibility with Python 2.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.4.txt:3
msgid "Django 1.3.4 release notes"
msgstr "Informacje o wydaniu Django 1.3.4"

#: ../../../../sources/1.10/docs/releases/1.3.4.txt:5
#: ../../../../sources/1.10/docs/releases/1.4.2.txt:5
msgid "*October 17, 2012*"
msgstr "*17 października 2012*"

#: ../../../../sources/1.10/docs/releases/1.3.4.txt:7
msgid "This is the fourth release in the Django 1.3 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.4.txt:10
#: ../../../../sources/1.10/docs/releases/1.3.5.txt:17
#: ../../../../sources/1.10/docs/releases/1.3.6.txt:14
#: ../../../../sources/1.10/docs/releases/1.4.2.txt:10
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:17
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:15
msgid "Host header poisoning"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.4.txt:12
#: ../../../../sources/1.10/docs/releases/1.4.2.txt:12
msgid ""
"Some parts of Django -- independent of end-user-written applications -- make"
" use of full URLs, including domain name, which are generated from the HTTP "
"Host header. Some attacks against this are beyond Django's ability to "
"control, and require the web server to be properly configured; Django's "
"documentation has for some time contained notes advising users on such "
"configuration."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.4.txt:18
#: ../../../../sources/1.10/docs/releases/1.4.2.txt:18
msgid ""
"Django's own built-in parsing of the Host header is, however, still "
"vulnerable, as was reported to us recently. The Host header parsing in "
"Django 1.3.3 and Django 1.4.1 -- specifically, "
"``django.http.HttpRequest.get_host()`` -- was incorrectly handling "
"username/password information in the header. Thus, for example, the "
"following Host header would be accepted by Django when running on "
"\"validsite.com\"::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.4.txt:27
#: ../../../../sources/1.10/docs/releases/1.4.2.txt:27
msgid ""
"Using this, an attacker can cause parts of Django -- particularly the "
"password-reset mechanism -- to generate and display arbitrary URLs to users."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.4.txt:30
#: ../../../../sources/1.10/docs/releases/1.4.2.txt:30
msgid ""
"To remedy this, the parsing in ``HttpRequest.get_host()`` is being modified;"
" Host headers which contain potentially dangerous content (such as "
"username/password pairs) now raise the exception "
":exc:`django.core.exceptions.SuspiciousOperation`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.4.txt:35
#: ../../../../sources/1.10/docs/releases/1.4.2.txt:35
msgid ""
"Details of this issue were initially posted online as a `security "
"advisory`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:3
msgid "Django 1.3.5 release notes"
msgstr "Informacje o wydaniu Django 1.3.5"

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:5
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:5
msgid "*December 10, 2012*"
msgstr "*10 grudnia 2012*"

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:7
msgid ""
"Django 1.3.5 addresses two security issues present in previous Django "
"releases in the 1.3 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:10
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:10
msgid ""
"Please be aware that this security release is slightly different from "
"previous ones. Both issues addressed here have been dealt with in prior "
"security updates to Django. In one case, we have received ongoing reports of"
" problems, and in the other we've chosen to take further steps to tighten up"
" Django's code in response to independent discovery of potential problems "
"from multiple sources."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:19
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:19
msgid ""
"Several earlier Django security releases focused on the issue of poisoning "
"the HTTP Host header, causing Django to generate URLs pointing to arbitrary,"
" potentially-malicious domains."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:23
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:23
msgid ""
"In response to further input received and reports of continuing issues "
"following the previous release, we're taking additional steps to tighten "
"Host header validation. Rather than attempt to accommodate all features HTTP"
" supports here, Django's Host header validation attempts to support a "
"smaller, but far more common, subset:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:29
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:29
msgid ""
"Hostnames must consist of characters ``[A-Za-z0-9]`` plus hyphen ('-') or "
"dot ('.')."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:31
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:31
msgid "IP addresses -- both IPv4 and IPv6 -- are permitted."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:32
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:32
msgid "Port, if specified, is numeric."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:34
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:34
msgid ""
"Any deviation from this will now be rejected, raising the exception "
":exc:`django.core.exceptions.SuspiciousOperation`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:38
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:38
msgid "Redirect poisoning"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:40
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:40
msgid ""
"Also following up on a previous issue: in July of this year, we made changes"
" to Django's HTTP redirect classes, performing additional validation of the "
"scheme of the URL to redirect to (since, both within Django's own supplied "
"applications and many third-party applications, accepting a user-supplied "
"redirect target is a common pattern)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:46
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:46
msgid ""
"Since then, two independent audits of the code turned up further potential "
"problems. So, similar to the Host-header issue, we are taking steps to "
"provide tighter validation in response to reported problems (primarily with "
"third-party applications, but to a certain extent also within Django "
"itself). This comes in two parts:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:52
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:52
msgid ""
"1. A new utility function, ``django.utils.http.is_safe_url``, is added; this"
" function takes a URL and a hostname, and checks that the URL is either "
"relative, or if absolute matches the supplied hostname. This function is "
"intended for use whenever user-supplied redirect targets are accepted, to "
"ensure that such redirects cannot lead to arbitrary third-party sites."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.5.txt:58
#: ../../../../sources/1.10/docs/releases/1.4.3.txt:58
msgid ""
"2. All of Django's own built-in views -- primarily in the authentication "
"system -- which allow user-supplied redirect targets now use ``is_safe_url``"
" to validate the supplied URL."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:3
msgid "Django 1.3.6 release notes"
msgstr "Informacje o wydaniu Django 1.3.6"

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:5
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:5
msgid "*February 19, 2013*"
msgstr "*19 lutego 2013*"

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:7
msgid ""
"Django 1.3.6 fixes four security issues present in previous Django releases "
"in the 1.3 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:10
msgid "This is the sixth bugfix/security release in the Django 1.3 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:16
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:17
msgid ""
"Some parts of Django -- independent of end-user-written applications -- make"
" use of full URLs, including domain name, which are generated from the HTTP "
"Host header. Django's documentation has for some time contained notes "
"advising users on how to configure Web servers to ensure that only valid "
"Host headers can reach the Django application. However, it has been reported"
" to us that even with the recommended Web server configurations there are "
"still techniques available for tricking many common Web servers into "
"supplying the application with an incorrect and possibly malicious Host "
"header."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:25
msgid ""
"For this reason, Django 1.3.6 adds a new setting, ``ALLOWED_HOSTS``, which "
"should contain an explicit list of valid host/domain names for this site. A "
"request with a Host header not matching an entry in this list will raise "
"``SuspiciousOperation`` if ``request.get_host()`` is called. For full "
"details see the documentation for the :setting:`ALLOWED_HOSTS` setting."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:31
msgid ""
"The default value for this setting in Django 1.3.6 is ``['*']`` (matching "
"any host), for backwards-compatibility, but we strongly encourage all sites "
"to set a more restrictive value."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:35
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:36
msgid ""
"This host validation is disabled when ``DEBUG`` is ``True`` or when running "
"tests."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:39
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:40
msgid "XML deserialization"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:41
msgid ""
"The XML parser in the Python standard library is vulnerable to a number of "
"attacks via external entities and entity expansion. Django uses this parser "
"for deserializing XML-formatted database fixtures. The fixture deserializer "
"is not intended for use with untrusted data, but in order to err on the side"
" of safety in Django 1.3.6 the XML deserializer refuses to parse an XML "
"document with a DTD (DOCTYPE definition), which closes off these attack "
"avenues."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:48
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:49
msgid ""
"These issues in the Python standard library are CVE-2013-1664 and "
"CVE-2013-1665. More information available `from the Python security team`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:51
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:52
msgid ""
"Django's XML serializer does not create documents with a DTD, so this should"
" not cause any issues with the typical round-trip from ``dumpdata`` to "
"``loaddata``, but if you feed your own XML documents to the ``loaddata`` "
"management command, you will need to ensure they do not contain a DTD."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:60
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:61
msgid "Formset memory exhaustion"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:62
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:63
msgid ""
"Previous versions of Django did not validate or limit the form-count data "
"provided by the client in a formset's management form, making it possible to"
" exhaust a server's available memory by forcing it to create very large "
"numbers of forms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:67
msgid ""
"In Django 1.3.6, all formsets have a strictly-enforced maximum number of "
"forms (1000 by default, though it can be set higher via the ``max_num`` "
"formset factory argument)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:73
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:74
msgid "Admin history view information leakage"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.6.txt:75
msgid ""
"In previous versions of Django, an admin user without change permission on a"
" model could still view the unicode representation of instances via their "
"admin history log. Django 1.3.6 now limits the admin history log view for an"
" object to users with change permission for that model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.7.txt:3
msgid "Django 1.3.7 release notes"
msgstr "Informacje o wydaniu Django 1.3.7"

#: ../../../../sources/1.10/docs/releases/1.3.7.txt:5
#: ../../../../sources/1.10/docs/releases/1.4.5.txt:5
msgid "*February 20, 2013*"
msgstr "*20 lutego 2013*"

#: ../../../../sources/1.10/docs/releases/1.3.7.txt:7
msgid ""
"Django 1.3.7 corrects a packaging problem with yesterday's :doc:`1.3.6 "
"release </releases/1.3.6>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.3.7.txt:10
#: ../../../../sources/1.10/docs/releases/1.4.5.txt:10
msgid ""
"The release contained stray ``.pyc`` files that caused \"bad magic number\" "
"errors when running with some versions of Python. This releases corrects "
"this, and also fixes a bad documentation link in the project template "
"``settings.py`` file generated by ``manage.py startproject``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:3
msgid "Django 1.4 release notes"
msgstr "Informacje o wydaniu Django 1.4"

#: ../../../../sources/1.10/docs/releases/1.4.txt:5
msgid "*March 23, 2012*"
msgstr "*23 marca 2012*"

#: ../../../../sources/1.10/docs/releases/1.4.txt:7
msgid "Welcome to Django 1.4!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:9
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.4>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.4>` "
"you'll want to be aware of when upgrading from Django 1.3 or older versions."
" We've also dropped some features, which are detailed in :ref:`our "
"deprecation plan <deprecation-removed-in-1.4>`, and we've :ref:`begun the "
"deprecation process for some features <deprecated-features-1.4>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:19
msgid ""
"The biggest new feature in Django 1.4 is `support for time zones`_ when "
"handling date/times. When enabled, this Django will store date/times in UTC,"
" use timezone-aware objects internally, and translate them to users' local "
"timezones for display."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:24
msgid ""
"If you're upgrading an existing project to Django 1.4, switching to the "
"timezone aware mode may take some care: the new mode disallows some rather "
"sloppy behavior that used to be accepted. We encourage anyone who's "
"upgrading to check out the :ref:`timezone migration guide <time-zones-"
"migration-guide>` and the :ref:`timezone FAQ <time-zones-faq>` for useful "
"pointers."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:30
msgid "Other notable new features in Django 1.4 include:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:32
msgid ""
"A number of ORM improvements, including `SELECT FOR UPDATE support`_, the "
"ability to `bulk insert <#model-objects-bulk-create-in-the-orm>`_ large "
"datasets for improved performance, and `QuerySet.prefetch_related`_, a "
"method to batch-load related objects in areas where "
":meth:`~django.db.models.query.QuerySet.select_related` doesn't work."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:39
msgid ""
"Some nice security additions, including `improved password hashing`_ "
"(featuring PBKDF2_ and bcrypt_ support), new `tools for cryptographic "
"signing`_, several `CSRF improvements`_, and `simple clickjacking "
"protection`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:44
msgid ""
"An `updated default project layout and manage.py`_ that removes the "
"\"magic\" from prior versions. And for those who don't like the new layout, "
"you can use `custom project and app templates`_ instead!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:48
msgid "`Support for in-browser testing frameworks`_ (like Selenium_)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:50
msgid "... and a whole lot more; `see below <#what-s-new-in-django-1-4>`_!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:52
msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible"
" manner per :doc:`our API stability policy </misc/api-stability>` policy. "
"However, as with previous releases, Django 1.4 ships with some minor "
":ref:`backwards incompatible changes <backwards-incompatible-1.4>`; people "
"upgrading from previous versions of Django should read that list carefully."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:61
msgid ""
"Django 1.4 has dropped support for Python 2.4. Python 2.5 is now the minimum"
" required Python version. Django is tested and supported on Python 2.5, 2.6 "
"and 2.7."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:65
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.5 or newer as their "
"default version. If you're still using Python 2.4, however, you'll need to "
"stick to Django 1.3 until you can upgrade. Per :doc:`our support policy "
"</internals/release-process>`, Django 1.3 will continue to receive security "
"support until the release of Django 1.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:72
msgid ""
"Django does not support Python 3.x at this time. At some point before the "
"release of Django 1.4, we plan to publish a document outlining our full "
"timeline for deprecating Python 2.x and moving to Python 3.x."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:79
msgid "What's new in Django 1.4"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:82
msgid "Support for time zones"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:84
msgid ""
"In previous versions, Django used \"naive\" date/times (that is, date/times "
"without an associated time zone), leaving it up to each developer to "
"interpret what a given date/time \"really means\". This can cause all sorts "
"of subtle timezone-related bugs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:89
msgid ""
"In Django 1.4, you can now switch Django into a more correct, time-zone "
"aware mode. In this mode, Django stores date and  time information in UTC in"
" the database, uses time-zone-aware datetime objects internally and "
"translates them to the end user's time zone in templates and forms. Reasons "
"for using this feature include:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:95
msgid "Customizing date and time display for users around the world."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:97
msgid ""
"Storing datetimes in UTC for database portability and interoperability. "
"(This argument doesn't apply to PostgreSQL, because it already stores "
"timestamps with time zone information in Django 1.3.)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:101
msgid "Avoiding data corruption problems around DST transitions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:103
msgid ""
"Time zone support is enabled by default in new projects created with "
":djadmin:`startproject`. If you want to use this feature in an existing "
"project, read the :ref:`migration guide <time-zones-migration-guide>`. If "
"you encounter problems, there's a helpful :ref:`FAQ <time-zones-faq>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:109
msgid "Support for in-browser testing frameworks"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:111
msgid ""
"Django 1.4 supports integration with in-browser testing frameworks like "
"Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets "
"you test the interactions between your site's front and back ends more "
"comprehensively. See the "
":class:`documentation<django.test.LiveServerTestCase>` for more details and "
"concrete examples."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:121
msgid "Updated default project layout and ``manage.py``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:123
msgid ""
"Django 1.4 ships with an updated default project layout and ``manage.py`` "
"file for the :djadmin:`startproject` management command. These fix some "
"issues with the previous ``manage.py`` handling of Python import paths that "
"caused double imports, trouble moving from development to deployment, and "
"other difficult-to-debug path issues."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:129
msgid ""
"The previous ``manage.py`` called functions that are now deprecated, and "
"thus projects upgrading to Django 1.4 should update their ``manage.py``. "
"(The old-style ``manage.py`` will continue to work as before until Django "
"1.6. In 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:134
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:146
msgid ""
"``{{ project_name }}`` should be replaced with the Python package name of "
"the actual project."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:149
msgid ""
"If settings, URLconfs and apps within the project are imported or referenced"
" using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF "
"= \"myproject.urls\"``, etc.), the new ``manage.py`` will need to be moved "
"one directory up, so it is outside the project package rather than adjacent "
"to ``settings.py`` and ``urls.py``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:155
msgid "For instance, with the following layout::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:166
msgid ""
"You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``,"
" but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:169
msgid ""
"Anything imported as a top-level module can be placed adjacent to the new "
"``manage.py``. For instance, to decouple \"myapp\" from the project module "
"and import it as just ``myapp``, place it outside the ``mysite/`` "
"directory::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:182
msgid ""
"If the same code is imported inconsistently (some places with the project "
"prefix, some places without it), the imports will need to be cleaned up when"
" switching to the new ``manage.py``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:187
msgid "Custom project and app templates"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:189
msgid ""
"The :djadmin:`startapp` and :djadmin:`startproject` management commands now "
"have a ``--template`` option for specifying a path or URL to a custom app or"
" project template."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:193
msgid ""
"For example, Django will use the ``/path/to/my_project_template`` directory "
"when you run the following command::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:198
msgid ""
"You can also now provide a destination directory as the second argument to "
"both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:204
msgid ""
"For more information, see the :djadmin:`startapp` and "
":djadmin:`startproject` documentation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:208
msgid "Improved WSGI support"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:210
msgid ""
"The :djadmin:`startproject` management command now adds a :file:`wsgi.py` "
"module to the initial project layout, containing a simple WSGI application "
"that can be used for :doc:`deploying with WSGI app "
"servers</howto/deployment/wsgi/index>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:215
msgid ""
"The :djadmin:`built-in development server<runserver>` now supports using an "
"externally-defined WSGI callable, which makes it possible to run runserver "
"with the same WSGI configuration that is used for deployment. The new "
":setting:`WSGI_APPLICATION` setting lets you configure which WSGI callable "
":djadmin:`runserver` uses."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:221
msgid ""
"(The ``runfcgi`` management command also internally wraps the WSGI callable "
"configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:225
msgid "``SELECT FOR UPDATE`` support"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:227
msgid ""
"Django 1.4 includes a :meth:`QuerySet.select_for_update() "
"<django.db.models.query.QuerySet.select_for_update>` method, which generates"
" a ``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of"
" the transaction, meaning other transactions cannot modify or delete rows "
"matched by a ``FOR UPDATE`` query."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:233
msgid ""
"For more details, see the documentation for "
":meth:`~django.db.models.query.QuerySet.select_for_update`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:237
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:239
msgid ""
"This method lets you create multiple objects more efficiently. It can result"
" in significant performance increases if you have many objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:242
msgid ""
"Django makes use of this internally, meaning some operations (such as "
"database setup for test suites) have seen a performance benefit as a result."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:245
msgid ""
"See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more "
"information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:249
msgid "``QuerySet.prefetch_related``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:251
msgid ""
"Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with "
"a different strategy and broader scope, "
":meth:`~django.db.models.query.QuerySet.prefetch_related` has been added to "
":class:`~django.db.models.query.QuerySet`. This method returns a new "
"``QuerySet`` that will prefetch each of the specified related lookups in a "
"single batch as soon as the query begins to be evaluated. Unlike "
"``select_related``, it does the joins in Python, not in the database, and "
"supports many-to-many relationships, ``GenericForeignKey`` and more. This "
"allows you to fix a very common performance problem in which your code ends "
"up doing O(n) database queries (or worse) if objects on your primary "
"``QuerySet`` each have many related objects that you also need to fetch."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:264
msgid "Improved password hashing"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:266
msgid ""
"Django's auth system (``django.contrib.auth``) stores passwords using a one-"
"way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor"
" speeds and theoretical attacks have revealed that SHA1 isn't as secure as "
"we'd like. Thus, Django 1.4 introduces a new password storage system: by "
"default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You"
" can also easily choose a different algorithm (including the popular bcrypt_"
" algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:280
msgid "HTML5 doctype"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:282
msgid ""
"We've switched the admin and other bundled templates to use the HTML5 "
"doctype. While Django will be careful to maintain compatibility with older "
"browsers, this change means that you can use any HTML5 features you need in "
"admin pages without having to lose HTML validity or override the provided "
"templates to change the doctype."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:289
msgid "List filters in admin interface"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:291
msgid ""
"Prior to Django 1.4, the :mod:`~django.contrib.admin` app let you specify "
"change list filters by specifying a field lookup, but it didn't allow you to"
" create custom filters. This has been rectified with a simple API "
"(previously used internally and known as \"FilterSpec\"). For more details, "
"see the documentation for "
":attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:298
msgid "Multiple sort in admin interface"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:300
msgid ""
"The admin change list now supports sorting on multiple columns. It respects "
"all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` "
"attribute, and sorting on multiple columns by clicking on headers is "
"designed to mimic the behavior of desktop GUIs. We also added a "
":meth:`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying "
"the ordering dynamically (i.e., depending on the request)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:308
msgid "New ``ModelAdmin`` methods"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:310
msgid ""
"We added a :meth:`~django.contrib.admin.ModelAdmin.save_related` method to "
":mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related"
" objects are saved in the admin."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:314
msgid ""
"Two other new :class:`~django.contrib.admin.ModelAdmin` methods, "
":meth:`~django.contrib.admin.ModelAdmin.get_list_display` and "
":meth:`~django.contrib.admin.ModelAdmin.get_list_display_links` enable "
"dynamic customization of fields and links displayed on the admin change "
"list."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:321
msgid "Admin inlines respect user permissions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:323
msgid ""
"Admin inlines now only allow those actions for which the user has "
"permission. For ``ManyToMany`` relationships with an auto-created "
"intermediate model (which does not have its own permissions), the change "
"permission for the related model determines if the user has the permission "
"to add, change or delete relationships."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:330
msgid "Tools for cryptographic signing"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:332
msgid ""
"Django 1.4 adds both a low-level API for signing values and a high-level API"
" for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:336
msgid ""
"See the :doc:`cryptographic signing </topics/signing>` docs for more "
"information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:340
msgid "Cookie-based session backend"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:342
msgid ""
"Django 1.4 introduces a cookie-based session backend that uses the tools for"
" :doc:`cryptographic signing </topics/signing>` to store the session data in"
" the client's browser."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:348
msgid ""
"Session data is signed and validated by the server, but it's not encrypted. "
"This means a user can view any data stored in the session but cannot change "
"it. Please read the documentation for further clarification before using "
"this backend."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:353
msgid ""
"See the :ref:`cookie-based session backend <cookie-session-backend>` docs "
"for more information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:357
msgid "New form wizard"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:359
msgid ""
"The previous ``FormWizard`` from ``django.contrib.formtools`` has been "
"replaced with a new implementation based on the class-based views introduced"
" in Django 1.3. It features a pluggable storage API and doesn't require the "
"wizard to pass around hidden fields for every previous step."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:364
msgid ""
"Django 1.4 ships with a session-based storage backend and a cookie-based "
"storage backend. The latter uses the tools for :doc:`cryptographic signing "
"</topics/signing>` also introduced in Django 1.4 to store the wizard's state"
" in the user's cookies."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:370
msgid "``reverse_lazy``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:372
msgid ""
"A lazily evaluated version of ``reverse()`` was added to allow using URL "
"reversals before the project's URLconf gets loaded."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:376
msgid "Translating URL patterns"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:378
msgid ""
"Django can now look for a language prefix in the URLpattern when using the "
"new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. It's also "
"now possible to define translatable URL patterns using "
":func:`~django.utils.translation.ugettext_lazy`. See :ref:`url-"
"internationalization` for more information about the language prefix and how"
" to internationalize URL patterns."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:386
msgid ""
"Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:388
msgid ""
"The :ref:`contextual translation<contextual-markers>` support introduced in "
"Django 1.3 via the ``pgettext`` function has been extended to the "
":ttag:`trans` and :ttag:`blocktrans` template tags using the new ``context``"
" keyword."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:394
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:396
msgid ""
"Two new attributes, "
":attr:`pk_url_kwarg<django.views.generic.detail.SingleObjectMixin.pk_url_kwarg>`"
" and "
":attr:`slug_url_kwarg<django.views.generic.detail.SingleObjectMixin.slug_url_kwarg>`,"
" have been added to :class:`~django.views.generic.detail.SingleObjectMixin` "
"to enable the customization of URLconf keyword arguments used for single "
"object generic views."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:405
msgid "Assignment template tags"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:407
msgid ""
"A new ``assignment_tag`` helper function was added to ``template.Library`` "
"to ease the creation of template tags that store data in a specified context"
" variable."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:412
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:414
msgid ""
"The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, "
":ref:`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly "
"introduced ``assignment_tag`` template helper functions may now accept any "
"number of positional or keyword arguments. For example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:426
msgid ""
"Then, in the template, any number of arguments may be passed to the template"
" tag. For example:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:434
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:436
msgid ""
"In previous versions of Django, whenever the ``TEMPLATE_DEBUG`` setting was "
"``True``, any exception raised during template rendering (even exceptions "
"unrelated to template syntax) were wrapped in ``TemplateSyntaxError`` and "
"re-raised. This was done in order to provide detailed template source "
"location information in the debug 500 page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:442
msgid ""
"In Django 1.4, exceptions are no longer wrapped. Instead, the original "
"exception is annotated with the source information. This means that catching"
" exceptions from template rendering is now consistent regardless of the "
"value of ``TEMPLATE_DEBUG``, and there's no need to catch and unwrap "
"``TemplateSyntaxError`` in order to catch other errors."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:449
msgid "``truncatechars`` template filter"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:451
msgid ""
"This new filter truncates a string to be no longer than the specified number"
" of characters. Truncated strings end with a translatable ellipsis sequence "
"(\"...\"). See the documentation for :tfilter:`truncatechars` for more "
"details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:457
msgid "``static`` template tag"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:459
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new "
"``static`` template tag to refer to files saved with the "
":setting:`STATICFILES_STORAGE` storage backend. It uses the storage "
"backend's ``url`` method and therefore supports advanced features such as "
":ref:`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:466
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:468
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a "
":class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` "
"backend that caches the files it saves (when running the "
":djadmin:`collectstatic` management command) by appending the MD5 hash of "
"the file's content to the filename. For example, the file ``css/styles.css``"
" would also be saved as ``css/styles.55e7cbb9ba48.css``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:475
msgid ""
"See the "
":class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` docs "
"for more information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:479
msgid "Simple clickjacking protection"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:481
msgid ""
"We've added a middleware to provide easy protection against `clickjacking "
"<https://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options``"
" header. It's not enabled by default for backwards compatibility reasons, "
"but you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to"
" help plug that security hole for browsers that support the header."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:488
msgid "CSRF improvements"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:490
msgid ""
"We've made various improvements to our CSRF features, including the "
":func:`~django.views.decorators.csrf.ensure_csrf_cookie` decorator, which "
"can help with AJAX-heavy sites; protection for PUT and DELETE requests; and "
"the :setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings, "
"which can improve the security and usefulness of CSRF protection. See the "
":doc:`CSRF docs </ref/csrf>` for more information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:498
msgid "Error report filtering"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:500
msgid ""
"We added two function decorators, "
":func:`~django.views.decorators.debug.sensitive_variables` and "
":func:`~django.views.decorators.debug.sensitive_post_parameters`, to allow "
"designating the local variables and POST parameters that may contain "
"sensitive information and should be filtered out of error reports."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:506
msgid ""
"All POST parameters are now systematically filtered out of error reports for"
" certain views (``login``, ``password_reset_confirm``, ``password_change`` "
"and ``add_view`` in :mod:`django.contrib.auth.views`, as well as "
"``user_change_password`` in the admin app) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:512
msgid ""
"You can override or customize the default filtering by writing a "
":ref:`custom filter<custom-error-reports>`. For more information see the "
"docs on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:517
msgid "Extended IPv6 support"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:519
msgid ""
"Django 1.4 can now better handle IPv6 addresses with the new "
":class:`~django.db.models.GenericIPAddressField` model field, "
":class:`~django.forms.GenericIPAddressField` form field and the validators "
":data:`~django.core.validators.validate_ipv46_address` and "
":data:`~django.core.validators.validate_ipv6_address`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:526
msgid "HTML comparisons in tests"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:528
msgid ""
"The base classes in :mod:`django.test` now have some helpers to compare HTML"
" without tripping over irrelevant differences in whitespace, argument "
"quoting/ordering and closing of self-closing tags. You can either compare "
"HTML directly with the new "
":meth:`~django.test.SimpleTestCase.assertHTMLEqual` and "
":meth:`~django.test.SimpleTestCase.assertHTMLNotEqual` assertions, or use "
"the ``html=True`` flag with "
":meth:`~django.test.SimpleTestCase.assertContains` and "
":meth:`~django.test.SimpleTestCase.assertNotContains` to test whether the "
"client's response contains a given HTML fragment. See the :ref:`assertions "
"documentation <assertions>` for more."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:541
msgid "Two new date format strings"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:543
msgid ""
"Two new :tfilter:`date` formats were added for use in template filters, "
"template tags and :doc:`/topics/i18n/formatting`:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:546
msgid "``e`` -- the name of the timezone of the given datetime object"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:547
msgid "``o`` -- the ISO 8601 year number"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:549
msgid ""
"Please make sure to update your :ref:`custom format files <custom-format-"
"files>` if they contain either ``e`` or ``o`` in a format string. For "
"example a Spanish localization format previously only escaped the ``d`` "
"format character::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:556
msgid "But now it needs to also escape ``e`` and ``o``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:560
msgid "For more information, see the :tfilter:`date` documentation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:565
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:567
msgid ""
"A more usable stacktrace in the technical 500 page. Frames in the stack "
"trace that reference Django's framework code are dimmed out, while frames in"
" application code are slightly emphasized. This change makes it easier to "
"scan a stacktrace for issues in application code."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:572
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:574
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:576
msgid ""
"In the documentation, a helpful :doc:`security overview </topics/security>` "
"page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:579
msgid ""
"The ``django.contrib.auth.models.check_password`` function has been moved to"
" the :mod:`django.contrib.auth.hashers` module. Importing it from the old "
"location will still work, but you should update your imports."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:583
msgid ""
"The :djadmin:`collectstatic` management command now has a ``--clear`` option"
" to delete all files at the destination before copying or linking the static"
" files."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:587
msgid ""
"It's now possible to load fixtures containing forward references when using "
"MySQL with the InnoDB database engine."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:590
msgid ""
"A new 403 response handler has been added as "
"``'django.views.defaults.permission_denied'``. You can set your own handler "
"by setting the value of :data:`django.conf.urls.handler403`. See the "
"documentation about :ref:`the 403 (HTTP Forbidden) "
"view<http_forbidden_view>` for more information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:596
msgid ""
"The :djadmin:`makemessages` command uses a new and more accurate lexer, "
"`JsLex`_, for extracting translatable strings from JavaScript files."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:601
msgid ""
"The :ttag:`trans` template tag now takes an optional ``as`` argument to be "
"able to retrieve a translation string without displaying it but setting a "
"template context variable instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:605
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:607
msgid ""
"If your Django app is behind a proxy, you might find the new "
":setting:`SECURE_PROXY_SSL_HEADER` setting useful. It solves the problem of "
"your proxy \"eating\" the fact that a request came in via HTTPS. But only "
"use this setting if you know what you're doing."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:612
msgid ""
"A new, plain-text, version of the HTTP 500 status code internal error page "
"served when :setting:`DEBUG` is ``True`` is now sent to the client when "
"Django detects that the request has originated in JavaScript code. "
"(:meth:`~django.http.HttpRequest.is_ajax` is used for this.)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:617
msgid ""
"Like its HTML counterpart, it contains a collection of different pieces of "
"information about the state of the application."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:620
msgid ""
"This should make it easier to read when debugging interaction with client-"
"side JavaScript."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:623
msgid "Added the :option:`makemessages --no-location` option."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:625
msgid ""
"Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for "
"better compatibility with the other cache backends."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:629
msgid ""
"Added support in the ORM for generating ``SELECT`` queries containing "
"``DISTINCT ON``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:632
msgid ""
"The ``distinct()`` ``QuerySet`` method now accepts an optional list of model"
" field names. If specified, then the ``DISTINCT`` statement is limited to "
"these fields. This is only supported in PostgreSQL."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:636
msgid ""
"For more details, see the documentation for "
":meth:`~django.db.models.query.QuerySet.distinct`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:639
msgid ""
"The admin login page will add a password reset link if you include a URL "
"with the name `'admin_password_reset'` in your urls.py, so plugging in the "
"built-in password reset mechanism and making it available is now much "
"easier. For details, see :ref:`auth_password_reset`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:644
msgid ""
"The MySQL database backend can now make use of the savepoint feature "
"implemented by MySQL version 5.0.3 or newer with the InnoDB storage engine."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:647
msgid ""
"It's now possible to pass initial values to the model forms that are part of"
" both model formsets and inline model formsets as returned from factory "
"functions ``modelformset_factory`` and ``inlineformset_factory`` "
"respectively just like with regular formsets. However, initial values only "
"apply to extra forms, i.e. those which are not bound to an existing model "
"instance."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:653
msgid ""
"The sitemaps framework can now handle HTTPS links using the new "
":attr:`Sitemap.protocol <django.contrib.sitemaps.Sitemap.protocol>` class "
"attribute."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:657
msgid ""
"A new :class:`django.test.SimpleTestCase` subclass of "
":class:`unittest.TestCase` that's lighter than :class:`django.test.TestCase`"
" and company. It can be useful in tests that don't need to hit a database. "
"See :ref:`testcase_hierarchy_diagram`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:666
msgid "Backwards incompatible changes in 1.4"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:669
msgid "SECRET_KEY setting is required"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:671
msgid ""
"Running Django with an empty or known :setting:`SECRET_KEY` disables many of"
" Django's security protections and can lead to remote-code-execution "
"vulnerabilities. No Django site should ever be run without a "
":setting:`SECRET_KEY`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:676
msgid ""
"In Django 1.4, starting Django with an empty :setting:`SECRET_KEY` will "
"raise a `DeprecationWarning`. In Django 1.5, it will raise an exception and "
"Django will refuse to start. This is slightly accelerated from the usual "
"deprecation path due to the severity of the consequences of running Django "
"with no :setting:`SECRET_KEY`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:683
msgid "django.contrib.admin"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:685
msgid ""
"The included administration app ``django.contrib.admin`` has for a long time"
" shipped with a default set of static files such as JavaScript, images and "
"stylesheets. Django 1.3 added a new contrib app "
"``django.contrib.staticfiles`` to handle such files in a generic way and "
"defined conventions for static files included in apps."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:691
msgid ""
"Starting in Django 1.4, the admin's static files also follow this "
"convention, to make the files easier to deploy. In previous versions of "
"Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to "
"point to the URL where the admin's static files live on a Web server. This "
"setting has now been deprecated and replaced by the more general setting "
":setting:`STATIC_URL`. Django will now expect to find the admin static files"
" under the URL ``<STATIC_URL>/admin/``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:699
msgid ""
"If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. "
"``/media/``) simply make sure :setting:`STATIC_URL` and "
":setting:`STATIC_ROOT` are configured and your Web server serves those files"
" correctly. The development server continues to serve the admin files just "
"like before. Read the :doc:`static files howto </howto/static-files/index>` "
"for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:705
msgid ""
"If your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. "
"``http://media.example.com/admin/``), make sure to also set your "
":setting:`STATIC_URL` setting to the correct URL -- for example, "
"``http://media.example.com/``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:712
msgid ""
"If you're implicitly relying on the path of the admin static files within "
"Django's source code, you'll need to update that path. The files were moved "
"from :file:`django/contrib/admin/media/` to "
":file:`django/contrib/admin/static/admin/`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:718
msgid "Supported browsers for the admin"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:720
msgid ""
"Django hasn't had a clear policy on which browsers are supported by the "
"admin app. Our new policy formalizes existing practices: `YUI's A-grade`_ "
"browsers should provide a fully-functional admin experience, with the "
"notable exception of Internet Explorer 6, which is no longer supported."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:725
msgid ""
"Released over 10 years ago, IE6 imposes many limitations on modern Web "
"development. The practical implications of this policy are that contributors"
" are free to improve the admin without consideration for these limitations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:729
msgid ""
"Obviously, this new policy **has no impact** on sites you develop using "
"Django. It only applies to the Django admin. Feel free to develop apps "
"compatible with any range of browsers."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:736
msgid "Removed admin icons"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:738
msgid ""
"As part of an effort to improve the performance and usability of the admin's"
" change-list sorting interface and :attr:`horizontal "
"<django.contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical "
"<django.contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some "
"icon files were removed and grouped into two sprite files."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:744
msgid ""
"Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-"
"remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and "
"``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; "
"and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-"
"icons.gif``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:750
msgid ""
"If you used those icons to customize the admin, then you'll need to replace "
"them with your own icons or get the files from a previous release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:754
msgid "CSS class names in admin forms"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:756
msgid ""
"To avoid conflicts with other common CSS class names (e.g. \"button\"), we "
"added a prefix (\"field-\") to all CSS class names automatically generated "
"from the form field names in the main admin forms, stacked inline forms and "
"tabular inline cells. You'll need to take that prefix into account in your "
"custom style sheets or JavaScript files if you previously used plain field "
"names as selectors for custom styles or JavaScript transformations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:764
msgid "Compatibility with old signed data"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:766
msgid ""
"Django 1.3 changed the cryptographic signing mechanisms used in a number of "
"places in Django. While Django 1.3 kept fallbacks that would accept hashes "
"produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:770
msgid ""
"So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may "
"lose/invalidate certain pieces of data that have been cryptographically "
"signed using an old method. To avoid this, use Django 1.3 first for a period"
" of time to allow the signed data to expire naturally. The affected parts "
"are detailed below, with 1) the consequences of ignoring this advice and 2) "
"the amount of time you need to run Django 1.3 for the data to expire or "
"become irrelevant."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:777
msgid "``contrib.sessions`` data integrity check"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:779
msgid ""
"Consequences: The user will be logged out, and session data will be lost."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:781
msgid "Time period: Defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:783
msgid "``contrib.auth`` password reset hash"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:785
msgid ""
"Consequences: Password reset links from before the upgrade will not work."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:787
msgid "Time period: Defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:789
msgid ""
"Form-related hashes: these have a are much shorter lifetime and are relevant"
" only for the short window where a user might fill in a form generated by "
"the pre-upgrade Django instance and try to submit it to the upgraded Django "
"instance:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:794
msgid "``contrib.comments`` form security hash"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:796
msgid ""
"Consequences: The user will see the validation error \"Security hash "
"failed.\""
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:798
msgid ""
"Time period: The amount of time you expect users to take filling out comment"
" forms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:801
msgid "``FormWizard`` security hash"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:803
msgid ""
"Consequences: The user will see an error about the form having expired and "
"will be sent back to the first page of the wizard, losing the data entered "
"so far."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:807
msgid ""
"Time period: The amount of time you expect users to take filling out the "
"affected forms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:810
msgid "CSRF check"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:812
msgid ""
"Note: This is actually a Django 1.1 fallback, not Django 1.2, and it applies"
" only if you're upgrading from 1.1."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:815
msgid ""
"Consequences: The user will see a 403 error with any CSRF-protected POST "
"form."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:818
msgid ""
"Time period: The amount of time you expect user to take filling out such "
"forms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:821
msgid "``contrib.auth`` user password hash-upgrade sequence"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:823
msgid ""
"Consequences: Each user's password will be updated to a stronger password "
"hash when it's written to the database in 1.4. This means that if you "
"upgrade to 1.4 and then need to downgrade to 1.3, version 1.3 won't be able "
"to read the updated passwords."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:828
msgid ""
"Remedy: Set :setting:`PASSWORD_HASHERS` to use your original password "
"hashing when you initially upgrade to 1.4. After you confirm your app works "
"well with Django 1.4 and you won't have to roll back to 1.3, enable the new "
"password hashes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:834
msgid "django.contrib.flatpages"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:836
msgid ""
"Starting in 1.4, the "
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` "
"only adds a trailing slash and redirects if the resulting URL refers to an "
"existing flatpage. For example, requesting ``/notaflatpageoravalidurl`` in a"
" previous version would redirect to ``/notaflatpageoravalidurl/``, which "
"would subsequently raise a 404. Requesting ``/notaflatpageoravalidurl`` now "
"will immediately raise a 404."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:844
msgid ""
"Also, redirects returned by flatpages are now permanent (with 301 status "
"code), to match the behavior of "
":class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:848
msgid ""
"Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:850
msgid ""
"As a consequence of time-zone support, and according to the ECMA-262 "
"specification, we made changes to the JSON serializer:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:853
msgid ""
"It includes the time zone for aware datetime objects. It raises an exception"
" for aware time objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:855
msgid ""
"It includes milliseconds for datetime and time objects. There is still some "
"precision loss, because Python stores microseconds (6 digits) and JSON only "
"supports milliseconds (3 digits). However, it's better than discarding "
"microseconds entirely."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:860
msgid ""
"We changed the XML serializer to use the ISO8601 format for datetimes. The "
"letter ``T`` is used to separate the date part from the time part, instead "
"of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:864
msgid ""
"Though the serializers now use these new formats when creating fixtures, "
"they can still load fixtures that use the old format."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:868
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:870
msgid ""
"The database feature ``supports_timezone`` used to be ``True`` for SQLite. "
"Indeed, if you saved an aware datetime object, SQLite stored a string that "
"included an UTC offset. However, this offset was ignored when loading the "
"value back from the database, which could corrupt the data."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:875
msgid ""
"In the context of time-zone support, this flag was changed to ``False``, and"
" datetimes are now stored without time-zone information in SQLite. When "
":setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime "
"object, Django raises an exception."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:881
msgid "``MySQLdb``-specific exceptions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:883
msgid ""
"The MySQL backend historically has raised ``MySQLdb.OperationalError`` when "
"a query triggered an exception. We've fixed this bug, and we now raise "
":exc:`django.db.DatabaseError` instead. If you were testing for "
"``MySQLdb.OperationalError``, you'll need to update your ``except`` clauses."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:890
msgid "Database connection's thread-locality"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:892
msgid ""
"``DatabaseWrapper`` objects (i.e. the connection objects referenced by "
"``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used"
" to be thread-local. They are now global objects in order to be potentially "
"shared between multiple threads. While the individual connection objects are"
" now global, the ``django.db.connections`` dictionary referencing those "
"objects is still thread-local. Therefore if you just use the ORM or "
"``DatabaseWrapper.cursor()`` then the behavior is still the same as before. "
"Note, however, that ``django.db.connection`` does not directly reference the"
" default ``DatabaseWrapper`` object anymore and is now a proxy to access "
"that object's attributes. If you need to access the actual "
"``DatabaseWrapper`` object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` "
"instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:904
msgid ""
"As part of this change, all underlying SQLite connections are now enabled "
"for potential thread-sharing (by passing the ``check_same_thread=False`` "
"attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous "
"behavior by disabling thread-sharing by default, so this does not affect any"
" existing code that purely relies on the ORM or on "
"``DatabaseWrapper.cursor()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:910
msgid ""
"Finally, while it's now possible to pass connections between threads, Django"
" doesn't make any effort to synchronize access to the underlying backend. "
"Concurrency behavior is defined by the underlying backend implementation. "
"Check their documentation for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:916
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:918
msgid ""
"Django's comments has historically supported excluding the comments of a "
"special user group, but we've never documented the feature properly and "
"didn't enforce the exclusion in other parts of the app such as the template "
"tags. To fix this problem, we removed the code from the feed class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:924
msgid ""
"If you rely on the feature and want to restore the old behavior, use a "
"custom comment model manager to exclude the user group, like this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:939
msgid ""
"Save this model manager in your custom comment app (e.g., in "
"``my_comments_app/managers.py``) and add it your custom comment app model::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:953
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:955
msgid ""
"Until Django 1.3, it was possible to exclude some URLs from Django's "
":doc:`404 error reporting</howto/error-reporting>` by adding prefixes to "
"``IGNORABLE_404_STARTS`` and suffixes to ``IGNORABLE_404_ENDS``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:959
msgid ""
"In Django 1.4, these two settings are superseded by "
":setting:`IGNORABLE_404_URLS`, which is a list of compiled regular "
"expressions. Django won't send an email for 404 errors on URLs that match "
"any of them."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:964
msgid ""
"Furthermore, the previous settings had some rather arbitrary default "
"values::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:970
msgid ""
"It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` "
"section or a ``favicon.ico``. As a consequence, the default values of "
":setting:`IGNORABLE_404_URLS`, ``IGNORABLE_404_STARTS``, and "
"``IGNORABLE_404_ENDS`` are all now empty."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:975
msgid ""
"If you have customized ``IGNORABLE_404_STARTS`` or ``IGNORABLE_404_ENDS``, "
"or if you want to keep the old default value, you should add the following "
"lines in your settings file::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:987
msgid ""
"Don't forget to escape characters that have a special meaning in a regular "
"expression, such as periods."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:991
msgid "CSRF protection extended to PUT and DELETE"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:993
msgid ""
"Previously, Django's :doc:`CSRF protection </ref/csrf/>` provided protection"
" only against POST requests. Since use of PUT and DELETE methods in AJAX "
"applications is becoming more common, we now protect all methods not defined"
" as safe by :rfc:`2616` -- i.e., we exempt GET, HEAD, OPTIONS and TRACE, and"
" we enforce protection on everything else."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:999
msgid ""
"If you're using PUT or DELETE methods in AJAX applications, please see the "
":ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1003
msgid "Password reset view now accepts ``subject_template_name``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1005
msgid ""
"The ``password_reset`` view in ``django.contrib.auth`` now accepts a "
"``subject_template_name`` parameter, which is passed to the password save "
"form as a keyword argument. If you are using this view with a custom "
"password reset form, then you will need to ensure your form's ``save()`` "
"method accepts this keyword argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1012
msgid "``django.core.template_loaders``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1014
msgid ""
"This was an alias to ``django.template.loader`` since 2005, and we've "
"removed it without emitting a warning due to the length of the deprecation. "
"If your code still referenced this, please use ``django.template.loader`` "
"instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1019
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1021
msgid ""
"This functionality has been removed due to intractable performance and "
"security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1026
msgid "``django.core.files.storage.Storage.open``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1028
msgid ""
"The ``open`` method of the base Storage class used to take an obscure "
"parameter ``mixin`` that allowed you to dynamically change the base classes "
"of the returned file object. This has been removed. In the rare case you "
"relied on the ``mixin`` parameter, you can easily achieve the same by "
"overriding the ``open`` method, like this::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1052
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1054
msgid ""
"``yaml.load`` is able to construct any Python object, which may trigger "
"arbitrary code execution if you process a YAML document that comes from an "
"untrusted source. This feature isn't necessary for Django's YAML "
"deserializer, whose primary use is to load fixtures consisting of simple "
"objects. Even though fixtures are trusted data, the YAML deserializer now "
"uses ``yaml.safe_load`` for additional security."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1062
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1064
msgid ""
"Session cookies now include the ``httponly`` attribute by default to help "
"reduce the impact of potential XSS attacks. As a consequence of this change,"
" session cookie data, including sessionid, is no longer accessible from "
"JavaScript in many browsers. For strict backwards compatibility, use "
"``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1072
msgid "The :tfilter:`urlize` filter no longer escapes every URL"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1074
msgid ""
"When a URL contains a ``%xx`` sequence, where ``xx`` are two hexadecimal "
"digits, :tfilter:`urlize` now assumes that the URL is already escaped and "
"doesn't apply URL escaping again. This is wrong for URLs whose unquoted form"
" contains a ``%xx`` sequence, but such URLs are very unlikely to happen in "
"the wild, because they would confuse browsers too."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1081
msgid ""
"``assertTemplateUsed`` and ``assertTemplateNotUsed`` as context manager"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1083
msgid ""
"It's now possible to check whether a template was used within a block of "
"code with :meth:`~django.test.SimpleTestCase.assertTemplateUsed` and "
":meth:`~django.test.SimpleTestCase.assertTemplateNotUsed`. And they can be "
"used as a context manager::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1093
msgid "See the :ref:`assertion documentation<assertions>` for more."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1096
msgid "Database connections after running the test suite"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1098
msgid ""
"The default test runner no longer restores the database connections after "
"tests' execution. This prevents the production database from being exposed "
"to potential threads that would still be running and attempting to create "
"new connections."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1103
msgid ""
"If your code relied on connections to the production database being created "
"after tests' execution, then you can restore the previous behavior by "
"subclassing ``DjangoTestRunner`` and overriding its ``teardown_databases()``"
" method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1109
msgid "Output of :djadmin:`manage.py help <help>`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1111
msgid ""
":djadmin:`manage.py help <help>` now groups available commands by "
"application. If you depended on the output of this command -- if you parsed "
"it, for example -- then you'll need to update your code. To get a list of "
"all available management commands in a script, use :djadmin:`manage.py help "
"--commands <help>` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1118
msgid "``extends`` template tag"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1120
msgid ""
"Previously, the :ttag:`extends` tag used a buggy method of parsing "
"arguments, which could lead to it erroneously considering an argument as a "
"string literal when it wasn't. It now uses ``parser.compile_filter``, like "
"other tags."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1124
msgid ""
"The internals of the tag aren't part of the official stable API, but in the "
"interests of full disclosure, the ``ExtendsNode.__init__`` definition has "
"changed, which may break any custom tags that use this class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1129
msgid "Loading some incomplete fixtures no longer works"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1131
msgid ""
"Prior to 1.4, a default value was inserted for fixture objects that were "
"missing a specific date or datetime value when auto_now or auto_now_add was "
"set for the field. This was something that should not have worked, and in "
"1.4 loading such incomplete fixtures will fail. Because fixtures are a raw "
"import, they should explicitly specify all field values, regardless of field"
" options on the model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1138
msgid "Development Server Multithreading"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1140
msgid ""
"The development server is now is multithreaded by default. Use the "
":option:`runserver --nothreading` option to disable the use of threading in "
"the development server::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1147
msgid "Attributes disabled in markdown when safe mode set"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1149
msgid ""
"Prior to Django 1.4, attributes were included in any markdown output "
"regardless of safe mode setting of the filter. With version > 2.1 of the "
"Python-Markdown library, an enable_attributes option was added. When the "
"safe argument is passed to the markdown filter, both the ``safe_mode=True`` "
"and ``enable_attributes=False`` options are set. If using a version of the "
"Python-Markdown library less than 2.1, a warning is issued that the output "
"is insecure."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1158
msgid "FormMixin get_initial returns an instance-specific dictionary"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1160
msgid ""
"In Django 1.3, the ``get_initial`` method of the "
":class:`django.views.generic.edit.FormMixin` class was returning the class "
"``initial`` dictionary. This has been fixed to return a copy of this "
"dictionary, so form instances can modify their initial data without messing "
"with the class variable."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1169
msgid "Features deprecated in 1.4"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1172
msgid "Old styles of calling ``cache_page`` decorator"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1174
msgid ""
"Some legacy ways of calling "
":func:`~django.views.decorators.cache.cache_page` have been deprecated. "
"Please see the documentation for the correct way to use this decorator."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1179
msgid "Support for PostgreSQL versions older than 8.2"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1181
msgid ""
"Django 1.3 dropped support for PostgreSQL versions older than 8.0, and we "
"suggested using a more recent version because of performance improvements "
"and, more importantly, the end of upstream support periods for 8.0 and 8.1 "
"was near (November 2010)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1186
msgid ""
"Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL "
"version it officially supports."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1190
msgid "Request exceptions are now always logged"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1192
msgid ""
"When we added :doc:`logging support </topics/logging/>` in Django in 1.3, "
"the admin error email support was moved into the "
":class:`django.utils.log.AdminEmailHandler`, attached to the "
"``'django.request'`` logger. In order to maintain the established behavior "
"of error emails, the ``'django.request'`` logger was called only when "
":setting:`DEBUG` was ``False``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1199
msgid ""
"To increase the flexibility of error logging for requests, the "
"``'django.request'`` logger is now called regardless of the value of "
":setting:`DEBUG`, and the default settings file for new projects now "
"includes a separate filter attached to "
":class:`django.utils.log.AdminEmailHandler` to prevent admin error emails in"
" ``DEBUG`` mode::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1218
msgid ""
"If your project was created prior to this change, your :setting:`LOGGING` "
"setting will not include this new filter. In order to maintain backwards-"
"compatibility, Django will detect that your ``'mail_admins'`` handler "
"configuration includes no ``'filters'`` section and will automatically add "
"this filter for you and issue a pending-deprecation warning. This will "
"become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-"
"compatibility shim will be removed entirely."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1226
msgid ""
"The existence of any ``'filters'`` key under the ``'mail_admins'`` handler "
"will disable this backward-compatibility shim and deprecation warning."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1230
msgid "``django.conf.urls.defaults``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1232
msgid ""
"Until Django 1.3, the functions :func:`~django.conf.urls.include`, "
"``patterns()`` and :func:`~django.conf.urls.url` plus "
":data:`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` "
"were located in a ``django.conf.urls.defaults`` module."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1237
msgid "In Django 1.4, they live in :mod:`django.conf.urls`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1240
msgid "``django.contrib.databrowse``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1242
msgid ""
"Databrowse has not seen active development for some time, and this does not "
"show any sign of changing. There had been a suggestion for a `GSOC project`_"
" to integrate the functionality of databrowse into the admin, but no "
"progress was made. While Databrowse has been deprecated, an enhancement of "
"``django.contrib.admin`` providing a similar feature set is still possible."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1250
msgid ""
"The code that powers Databrowse is licensed under the same terms as Django "
"itself, so it's available to be adopted by an individual or group as a "
"third-party project."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1255
msgid "``django.core.management.setup_environ``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1257
msgid ""
"This function temporarily modified ``sys.path`` in order to make the parent "
"\"project\" directory importable under the old flat :djadmin:`startproject` "
"layout. This function is now deprecated, as its path workarounds are no "
"longer needed with the new ``manage.py`` and default project layout."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1262
msgid ""
"This function was never documented or part of the public API, but it was "
"widely recommended for use in setting up a \"Django environment\" for a user"
" script. These uses should be replaced by setting the "
"``DJANGO_SETTINGS_MODULE`` environment variable or using "
":func:`django.conf.settings.configure`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1268
msgid "``django.core.management.execute_manager``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1270
msgid ""
"This function was previously used by ``manage.py`` to execute a management "
"command. It is identical to "
"``django.core.management.execute_from_command_line``, except that it first "
"calls ``setup_environ``, which is now deprecated. As such, "
"``execute_manager`` is also deprecated; ``execute_from_command_line`` can be"
" used instead. Neither of these functions is documented as part of the "
"public API, but a deprecation path is needed due to use in existing "
"``manage.py`` files."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1279
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1281
msgid ""
"Two flags, ``is_safe`` and ``needs_autoescape``, define how each template "
"filter interacts with Django's auto-escaping behavior. They used to be "
"attributes of the filter function::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1290
msgid ""
"However, this technique caused some problems in combination with decorators,"
" especially :func:`@stringfilter "
"<django.template.defaultfilters.stringfilter>`. Now, the flags are keyword "
"arguments of :meth:`@register.filter <django.template.Library.filter>`::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1299
msgid ""
"See :ref:`filters and auto-escaping <filters-auto-escaping>` for more "
"information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1302
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1304
msgid ""
"Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in "
"application names, like ``django.contrib.*``. The expansion was performed by"
" a filesystem-based implementation of ``from <package> import *``. "
"Unfortunately, this can't be done reliably."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1309
msgid ""
"This behavior was never documented. Since it is unpythonic and not obviously"
" useful, it was removed in Django 1.4. If you relied on it, you must edit "
"your settings file to list all your applications explicitly."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1314
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1316
msgid ""
"This attribute was confusingly named ``HttpRequest.raw_post_data``, but it "
"actually provided the body of the HTTP request. It's been renamed to "
"``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1321
msgid ""
"``django.contrib.sitemaps`` bug fix with potential performance implications"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1323
msgid ""
"In previous versions, ``Paginator`` objects used in sitemap classes were "
"cached, which could result in stale site maps. We've removed the caching, so"
" each request to a site map now creates a new Paginator object and calls the"
" :attr:`~django.contrib.sitemaps.Sitemap.items()` method of the "
":class:`~django.contrib.sitemaps.Sitemap` subclass. Depending on what your "
"``items()`` method is doing, this may have a negative performance impact. To"
" mitigate the performance impact, consider using the :doc:`caching framework"
" </topics/cache>` within your ``Sitemap`` subclass."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1333
msgid "Versions of Python-Markdown earlier than 2.1"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.txt:1335
msgid ""
"Versions of Python-Markdown earlier than 2.1 do not support the option to "
"disable attributes. As a security issue, earlier versions of this library "
"will not be supported by the markup contrib app in 1.5 under an accelerated "
"deprecation timeline."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.1.txt:3
msgid "Django 1.4.1 release notes"
msgstr "Informacje o wydaniu Django 1.4.1"

#: ../../../../sources/1.10/docs/releases/1.4.1.txt:7
msgid ""
"This is the first security release in the Django 1.4 series, fixing several "
"security issues in Django 1.4. Django 1.4.1 is a recommended upgrade for all"
" users of Django 1.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.10.txt:3
msgid "Django 1.4.10 release notes"
msgstr "Informacje o wydaniu Django 1.4.10"

#: ../../../../sources/1.10/docs/releases/1.4.10.txt:5
#: ../../../../sources/1.10/docs/releases/1.6.txt:23
msgid "*November 6, 2013*"
msgstr "*6 listopada 2013*"

#: ../../../../sources/1.10/docs/releases/1.4.10.txt:7
msgid "Django 1.4.10 fixes a Python-compatibility bug in the 1.4 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.10.txt:12
msgid ""
"Django 1.4.9 inadvertently introduced issues with Python 2.5 compatibility. "
"Django 1.4.10 restores Python 2.5 compatibility. This was issue #21362 in "
"Django's Trac."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:3
msgid "Django 1.4.11 release notes"
msgstr "Informacje o wydaniu Django 1.4.11"

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:5
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:5
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:5
msgid "*April 21, 2014*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:7
msgid ""
"Django 1.4.11 fixes three security issues in 1.4.10. Additionally, Django's "
"vendored version of six, :mod:`django.utils.six`, has been upgraded to the "
"latest release (1.6.1)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:12
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:11
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:11
msgid "Unexpected code execution using ``reverse()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:14
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:13
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:13
msgid ""
"Django's URL handling is based on a mapping of regex patterns (representing "
"the URLs) to callable views, and Django's own processing consists of "
"matching a requested URL against those patterns to determine the appropriate"
" view to invoke."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:19
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:18
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:18
msgid ""
"Django also provides a convenience function -- ``reverse()`` -- which "
"performs this process in the opposite direction. The ``reverse()`` function "
"takes information about a view and returns a URL which would invoke that "
"view. Use of ``reverse()`` is encouraged for application developers, as the "
"output of ``reverse()`` is always based on the current URL patterns, meaning"
" developers do not need to change other code when making changes to URLs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:26
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:25
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:25
msgid ""
"One argument signature for ``reverse()`` is to pass a dotted Python path to "
"the desired view. In this situation, Django will import the module indicated"
" by that dotted path as part of generating the resulting URL. If such a "
"module has import-time side effects, those side effects will occur."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:32
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:31
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:31
msgid ""
"Thus it is possible for an attacker to cause unexpected code execution, "
"given the following conditions:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:35
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:34
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:34
msgid ""
"One or more views are present which construct a URL based on user input "
"(commonly, a \"next\" parameter in a querystring indicating where to "
"redirect upon successful completion of an action)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:39
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:38
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:38
msgid ""
"One or more modules are known to an attacker to exist on the server's Python"
" import path, which perform code execution with side effects on importing."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:43
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:42
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:42
msgid ""
"To remedy this, ``reverse()`` will now only accept and import dotted paths "
"based on the view-containing modules listed in the project's :doc:`URL "
"pattern configuration </topics/http/urls>`, so as to ensure that only "
"modules the developer intended to be imported in this fashion can or will be"
" imported."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:49
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:48
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:48
msgid "Caching of anonymous pages could reveal CSRF token"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:51
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:50
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:50
msgid ""
"Django includes both a :doc:`caching framework </topics/cache>` and a system"
" for :doc:`preventing cross-site request forgery (CSRF) attacks "
"</ref/csrf/>`. The CSRF-protection system is based on a random nonce sent to"
" the client in a cookie which must be sent by the client on future requests "
"and, in forms, a hidden value which must be submitted back with the form."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:58
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:57
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:57
msgid ""
"The caching framework includes an option to cache responses to anonymous "
"(i.e., unauthenticated) clients."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:61
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:60
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:60
msgid ""
"When the first anonymous request to a given page is by a client which did "
"not have a CSRF cookie, the cache framework will also cache the CSRF cookie "
"and serve the same nonce to other anonymous clients who do not have a CSRF "
"cookie. This can allow an attacker to obtain a valid CSRF cookie value and "
"perform attacks which bypass the check for the cookie."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:68
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:67
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:67
msgid ""
"To remedy this, the caching framework will no longer cache such responses. "
"The heuristic for this will be:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:71
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:70
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:70
msgid "If the incoming request did not submit any cookies, and"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:73
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:72
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:72
msgid "If the response did send one or more cookies, and"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:75
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:74
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:74
msgid ""
"If the ``Vary: Cookie`` header is set on the response, then the response "
"will not be cached."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:79
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:78
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:78
msgid "MySQL typecasting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:81
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:80
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:80
msgid ""
"The MySQL database is known to \"typecast\" on certain queries; for example,"
" when querying a table which contains string values, but using a query which"
" filters based on an integer value, MySQL will first silently coerce the "
"strings to integers and return a result based on that."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:86
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:85
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:85
msgid ""
"If a query is performed without first converting values to the appropriate "
"type, this can produce unexpected results, similar to what would occur if "
"the query itself had been manipulated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:90
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:89
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:89
msgid ""
"Django's model field classes are aware of their own types and most such "
"classes perform explicit conversion of query arguments to the correct "
"database-level type before querying. However, three model field classes did "
"not correctly convert their arguments:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:95
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:94
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:94
msgid ":class:`~django.db.models.FilePathField`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:96
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:95
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:95
msgid ":class:`~django.db.models.GenericIPAddressField`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:97
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:96
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:96
#: ../../../../sources/1.10/docs/releases/1.7.txt:1609
msgid "``IPAddressField``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:99
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:98
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:98
msgid ""
"These three fields have been updated to convert their arguments to the "
"correct types before querying."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.11.txt:102
#: ../../../../sources/1.10/docs/releases/1.5.6.txt:101
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:101
msgid ""
"Additionally, developers of custom model fields are now warned via "
"documentation to ensure their custom field classes will perform appropriate "
"type conversions, and users of the :meth:`raw() "
"<django.db.models.query.QuerySet.raw>` and :meth:`extra() "
"<django.db.models.query.QuerySet.extra>` query methods -- which allow the "
"developer to supply raw SQL or SQL fragments -- will be advised to ensure "
"they perform appropriate manual type conversions prior to executing queries."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.12.txt:3
msgid "Django 1.4.12 release notes"
msgstr "Informacje o wydaniu Django 1.4.12"

#: ../../../../sources/1.10/docs/releases/1.4.12.txt:5
#: ../../../../sources/1.10/docs/releases/1.5.7.txt:5
#: ../../../../sources/1.10/docs/releases/1.6.4.txt:5
msgid "*April 28, 2014*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.12.txt:7
msgid "Django 1.4.12 fixes a regression in the 1.4.11 security release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.12.txt:12
#: ../../../../sources/1.10/docs/releases/1.5.7.txt:12
#: ../../../../sources/1.10/docs/releases/1.6.4.txt:16
msgid ""
"Restored the ability to ``reverse()`` views created using "
":func:`functools.partial()` (:ticket:`22486`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.13.txt:3
msgid "Django 1.4.13 release notes"
msgstr "Informacje o wydaniu Django 1.4.13"

#: ../../../../sources/1.10/docs/releases/1.4.13.txt:5
#: ../../../../sources/1.10/docs/releases/1.5.8.txt:5
#: ../../../../sources/1.10/docs/releases/1.6.5.txt:5
msgid "*May 14, 2014*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.13.txt:7
msgid "Django 1.4.13 fixes two security issues in 1.4.12."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.13.txt:10
#: ../../../../sources/1.10/docs/releases/1.5.8.txt:10
msgid "Caches may incorrectly be allowed to store and serve private data"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.13.txt:12
#: ../../../../sources/1.10/docs/releases/1.5.8.txt:12
#: ../../../../sources/1.10/docs/releases/1.6.5.txt:12
msgid ""
"In certain situations, Django may allow caches to store private data related"
" to a particular session and then serve that data to requests with a "
"different session, or no session at all. This can lead to information "
"disclosure and can be a vector for cache poisoning."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.13.txt:17
#: ../../../../sources/1.10/docs/releases/1.5.8.txt:17
#: ../../../../sources/1.10/docs/releases/1.6.5.txt:17
msgid ""
"When using Django sessions, Django will set a ``Vary: Cookie`` header to "
"ensure caches do not serve cached data to requests from other sessions. "
"However, older versions of Internet Explorer (most likely only Internet "
"Explorer 6, and Internet Explorer 7 if run on Windows XP or Windows Server "
"2003) are unable to handle the ``Vary`` header in combination with many "
"content types. Therefore, Django would remove the header if the request was "
"made by Internet Explorer."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.13.txt:25
#: ../../../../sources/1.10/docs/releases/1.5.8.txt:25
#: ../../../../sources/1.10/docs/releases/1.6.5.txt:25
msgid ""
"To remedy this, the special behavior for these older Internet Explorer "
"versions has been removed, and the ``Vary`` header is no longer stripped "
"from the response. In addition, modifications to the ``Cache-Control`` "
"header for all Internet Explorer requests with a ``Content-Disposition`` "
"header have also been removed as they were found to have similar issues."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.13.txt:32
#: ../../../../sources/1.10/docs/releases/1.5.8.txt:32
msgid "Malformed redirect URLs from user input not correctly validated"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.13.txt:34
#: ../../../../sources/1.10/docs/releases/1.5.8.txt:34
#: ../../../../sources/1.10/docs/releases/1.6.5.txt:34
msgid ""
"The validation for redirects did not correctly validate some malformed URLs,"
" which are accepted by some browsers. This allows a user to be redirected to"
" an unsafe URL unexpectedly."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.13.txt:38
#: ../../../../sources/1.10/docs/releases/1.5.8.txt:38
#: ../../../../sources/1.10/docs/releases/1.6.5.txt:38
msgid ""
"Django relies on user input in some cases (e.g. "
":func:`django.contrib.auth.views.login`, ``django.contrib.comments``, and "
":doc:`i18n </topics/i18n/index>`) to redirect the user to an \"on success\" "
"URL. The security checks for these redirects (namely "
"``django.utils.http.is_safe_url()``) did not correctly validate some "
"malformed URLs, such as `http:\\\\\\\\\\\\djangoproject.com`, which are "
"accepted by some browsers with more liberal URL parsing."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.13.txt:46
#: ../../../../sources/1.10/docs/releases/1.5.8.txt:46
#: ../../../../sources/1.10/docs/releases/1.6.5.txt:46
msgid ""
"To remedy this, the validation in ``is_safe_url()`` has been tightened to be"
" able to handle and correctly validate these malformed URLs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:3
msgid "Django 1.4.14 release notes"
msgstr "Informacje o wydaniu Django 1.4.14"

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:5
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:5
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:5
msgid "*August 20, 2014*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:7
msgid "Django 1.4.14 fixes several security issues in 1.4.13."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:10
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:10
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:10
msgid "``reverse()`` could generate URLs pointing to other hosts"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:12
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:12
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:12
msgid ""
"In certain situations, URL reversing could generate scheme-relative URLs  "
"(URLs starting with two slashes), which could unexpectedly redirect a user  "
"to a different host. An attacker could exploit this, for example, by "
"redirecting users to a phishing site designed to ask for user's passwords."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:17
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:17
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:17
msgid ""
"To remedy this, URL reversing now ensures that no URL starts with two "
"slashes (//), replacing the second slash with its URL encoded counterpart "
"(%2F). This approach ensures that semantics stay the same, while making the "
"URL relative to the domain and not to the scheme."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:23
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:23
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:23
msgid "File upload denial-of-service"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:25
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:25
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:25
msgid ""
"Before this release, Django's file upload handing in its default "
"configuration may degrade to producing a huge number of ``os.stat()`` system"
" calls when a duplicate filename is uploaded. Since ``stat()`` may invoke "
"IO, this may produce a huge data-dependent slowdown that slowly worsens over"
" time. The net result is that given enough time, a user with the ability to "
"upload files can cause poor performance in the upload handler, eventually "
"causing it to become very slow simply by uploading 0-byte files. At this "
"point, even a slow network connection and few HTTP requests would be all "
"that is necessary to make a site unavailable."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:34
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:34
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:34
msgid ""
"We've remedied the issue by changing the algorithm for generating file names"
" if a file with the uploaded name already exists. "
":meth:`Storage.get_available_name() "
"<django.core.files.storage.Storage.get_available_name>` now appends an "
"underscore plus a random 7 character alphanumeric string (e.g. "
"``\"_x3a1gho\"``), rather than iterating through an underscore followed by a"
" number (e.g. ``\"_1\"``, ``\"_2\"``, etc.)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:43
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:43
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:43
msgid "``RemoteUserMiddleware`` session hijacking"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:45
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:45
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:45
msgid ""
"When using the :class:`~django.contrib.auth.middleware.RemoteUserMiddleware`"
" and the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header "
"between requests without an intervening logout could result in the prior "
"user's session being co-opted by the subsequent user. The middleware now "
"logs the user out on a failed login attempt."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:52
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:52
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:52
msgid "Data leakage via query string manipulation in ``contrib.admin``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:54
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:54
msgid ""
"In older versions of Django it was possible to reveal any field's data by "
"modifying the \"popup\" and \"to_field\" parameters of the query string on "
"an admin change form page. For example, requesting a URL like "
"``/admin/auth/user/?pop=1&t=password`` and viewing the page's HTML allowed "
"viewing the password hash of each user. While the admin requires users to "
"have permissions to view the change form pages in the first place, this "
"could leak data if you rely on users having access to view only certain "
"fields on a model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.14.txt:62
#: ../../../../sources/1.10/docs/releases/1.5.9.txt:62
#: ../../../../sources/1.10/docs/releases/1.6.6.txt:62
msgid ""
"To address the issue, an exception will now be raised if a ``to_field`` "
"value that isn't a related field to a model that has been registered with "
"the admin is specified."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.15.txt:3
msgid "Django 1.4.15 release notes"
msgstr "Informacje o wydaniu Django 1.4.15"

#: ../../../../sources/1.10/docs/releases/1.4.15.txt:5
#: ../../../../sources/1.10/docs/releases/1.5.10.txt:5
#: ../../../../sources/1.10/docs/releases/1.6.7.txt:5
#: ../../../../sources/1.10/docs/releases/1.7.txt:5
msgid "*September 2, 2014*"
msgstr "*2 września 2014*"

#: ../../../../sources/1.10/docs/releases/1.4.15.txt:7
msgid "Django 1.4.15 fixes a regression in the 1.4.14 security release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.15.txt:12
#: ../../../../sources/1.10/docs/releases/1.5.10.txt:12
msgid ""
"Allowed inherited and m2m fields to be referenced in the admin "
"(:ticket:`22486`)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.16.txt:3
msgid "Django 1.4.16 release notes"
msgstr "Informacje o wydaniu Django 1.4.16"

#: ../../../../sources/1.10/docs/releases/1.4.16.txt:5
#: ../../../../sources/1.10/docs/releases/1.5.11.txt:5
#: ../../../../sources/1.10/docs/releases/1.6.8.txt:5
#: ../../../../sources/1.10/docs/releases/1.7.1.txt:5
msgid "*October 22, 2014*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.16.txt:7
msgid ""
"Django 1.4.16 fixes a couple regressions in the 1.4.14 security release and "
"a bug preventing the use of some GEOS versions with GeoDjango."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.16.txt:13
#: ../../../../sources/1.10/docs/releases/1.5.11.txt:12
#: ../../../../sources/1.10/docs/releases/1.6.8.txt:12
#: ../../../../sources/1.10/docs/releases/1.7.1.txt:12
msgid ""
"Allowed related many-to-many fields to be referenced in the admin "
"(:ticket:`23604`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.16.txt:16
#: ../../../../sources/1.10/docs/releases/1.5.11.txt:15
#: ../../../../sources/1.10/docs/releases/1.6.8.txt:15
#: ../../../../sources/1.10/docs/releases/1.7.1.txt:28
msgid ""
"Allowed inline and hidden references to admin fields (:ticket:`23431`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.16.txt:19
msgid "Fixed parsing of the GEOS version string (:ticket:`20036`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.17.txt:3
msgid "Django 1.4.17 release notes"
msgstr "Informacje o wydaniu Django 1.4.17"

#: ../../../../sources/1.10/docs/releases/1.4.17.txt:5
#: ../../../../sources/1.10/docs/releases/1.5.12.txt:5
#: ../../../../sources/1.10/docs/releases/1.6.9.txt:5
#: ../../../../sources/1.10/docs/releases/1.7.2.txt:5
msgid "*January 2, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.17.txt:7
msgid "Django 1.4.17 fixes a regression in the 1.4.14 security release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.17.txt:9
#: ../../../../sources/1.10/docs/releases/1.6.9.txt:9
#: ../../../../sources/1.10/docs/releases/1.7.2.txt:9
msgid ""
"Additionally, Django's vendored version of six, :mod:`django.utils.six`, has"
" been upgraded to the latest release (1.9.0)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.17.txt:15
#: ../../../../sources/1.10/docs/releases/1.5.12.txt:12
#: ../../../../sources/1.10/docs/releases/1.6.9.txt:15
#: ../../../../sources/1.10/docs/releases/1.7.2.txt:87
msgid ""
"Fixed a regression with dynamically generated inlines and allowed field "
"references in the admin (:ticket:`23754`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:3
msgid "Django 1.4.18 release notes"
msgstr "Informacje o wydaniu Django 1.4.18"

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:5
#: ../../../../sources/1.10/docs/releases/1.6.10.txt:5
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:5
msgid "*January 13, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:7
msgid ""
"Django 1.4.18 fixes several security issues in 1.4.17 as well as a "
"regression on Python 2.5 in the 1.4.17 release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:11
#: ../../../../sources/1.10/docs/releases/1.6.10.txt:10
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:10
msgid "WSGI header spoofing via underscore/dash conflation"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:13
#: ../../../../sources/1.10/docs/releases/1.6.10.txt:12
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:12
msgid ""
"When HTTP headers are placed into the WSGI environ, they are normalized by "
"converting to uppercase, converting all dashes to underscores, and "
"prepending `HTTP_`. For instance, a header ``X-Auth-User`` would become "
"``HTTP_X_AUTH_USER`` in the WSGI environ (and thus also in Django's "
"``request.META`` dictionary)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:19
#: ../../../../sources/1.10/docs/releases/1.6.10.txt:18
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:18
msgid ""
"Unfortunately, this means that the WSGI environ cannot distinguish between "
"headers containing dashes and headers containing underscores: ``X-Auth-"
"User`` and ``X-Auth_User`` both become ``HTTP_X_AUTH_USER``. This means that"
" if a header is used in a security-sensitive way (for instance, passing "
"authentication information along from a front-end proxy), even if the proxy "
"carefully strips any incoming value for ``X-Auth-User``, an attacker may be "
"able to provide an ``X-Auth_User`` header (with underscore) and bypass this "
"protection."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:28
#: ../../../../sources/1.10/docs/releases/1.6.10.txt:27
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:27
msgid ""
"In order to prevent such attacks, both Nginx and Apache 2.4+ strip all "
"headers containing underscores from incoming requests by default. Django's "
"built-in development server now does the same. Django's development server "
"is not recommended for production use, but matching the behavior of common "
"production servers reduces the surface area for behavior changes during "
"deployment."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:35
#: ../../../../sources/1.10/docs/releases/1.4.20.txt:10
#: ../../../../sources/1.10/docs/releases/1.4.6.txt:13
#: ../../../../sources/1.10/docs/releases/1.5.2.txt:10
#: ../../../../sources/1.10/docs/releases/1.6.10.txt:34
#: ../../../../sources/1.10/docs/releases/1.6.11.txt:27
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:34
#: ../../../../sources/1.10/docs/releases/1.7.7.txt:27
msgid "Mitigated possible XSS attack via user-supplied redirect URLs"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:37
#: ../../../../sources/1.10/docs/releases/1.6.10.txt:36
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:36
msgid ""
"Django relies on user input in some cases (e.g. "
":func:`django.contrib.auth.views.login` and :doc:`i18n "
"</topics/i18n/index>`) to redirect the user to an \"on success\" URL. The "
"security checks for these redirects (namely "
"``django.utils.http.is_safe_url()``) didn't strip leading whitespace on the "
"tested URL and as such considered URLs like ``\\njavascript:...`` safe. If a"
" developer relied on ``is_safe_url()`` to provide safe redirect targets and "
"put such a URL into a link, they could suffer from a XSS attack. This bug "
"doesn't affect Django currently, since we only put this URL into the "
"``Location`` response header and browsers seem to ignore JavaScript there."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:49
#: ../../../../sources/1.10/docs/releases/1.6.10.txt:48
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:48
msgid "Denial-of-service attack against ``django.views.static.serve``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:51
#: ../../../../sources/1.10/docs/releases/1.6.10.txt:50
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:50
msgid ""
"In older versions of Django, the :func:`django.views.static.serve` view read"
" the files it served one line at a time. Therefore, a big file with no "
"newlines would result in memory usage equal to the size of that file. An "
"attacker could exploit this and launch a denial-of-service attack by "
"simultaneously requesting many large files. This view now reads the file in "
"chunks to prevent large memory usage."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:58
#: ../../../../sources/1.10/docs/releases/1.6.10.txt:57
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:57
msgid ""
"Note, however, that this view has always carried a warning that it is not "
"hardened for production use and should be used only as a development aid. "
"Now may be a good time to audit your project and serve your files in "
"production using a real front-end web server if you are not doing so."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.18.txt:66
msgid ""
"To maintain compatibility with Python 2.5, Django's vendored version of six,"
" :mod:`django.utils.six`, has been downgraded to 1.8.0 which is the last "
"version to support Python 2.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.19.txt:3
msgid "Django 1.4.19 release notes"
msgstr "Informacje o wydaniu Django 1.4.19"

#: ../../../../sources/1.10/docs/releases/1.4.19.txt:5
#: ../../../../sources/1.10/docs/releases/1.7.4.txt:5
msgid "*January 27, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.19.txt:7
msgid "Django 1.4.19 fixes a regression in the 1.4.18 security release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.19.txt:12
msgid ""
"``GZipMiddleware`` now supports streaming responses. As part of the 1.4.18 "
"security release, the ``django.views.static.serve()`` function was altered "
"to stream the files it serves. Unfortunately, the ``GZipMiddleware`` "
"consumed the stream prematurely and prevented files from being served "
"properly (:ticket:`24158`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:3
msgid "Django 1.4.2 release notes"
msgstr "Informacje o wydaniu Django 1.4.2"

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:7
msgid "This is the second security release in the Django 1.4 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:42
msgid ""
"The newly introduced :class:`~django.db.models.GenericIPAddressField` "
"constructor arguments have been adapted to match those of all other model "
"fields. The first two keyword arguments are now verbose_name and name."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:47
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:83
#: ../../../../sources/1.10/docs/releases/1.6.3.txt:133
msgid "Other bugfixes and changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:49
msgid "Subclass HTMLParser only for appropriate Python versions (#18239)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:50
msgid "Added batch_size argument to qs.bulk_create() (#17788)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:51
msgid ""
"Fixed a small regression in the admin filters where wrongly formatted dates "
"passed as url parameters caused an unhandled ValidationError (#18530)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:52
msgid ""
"Fixed an endless loop bug when accessing permissions in templates (#18979)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:53
msgid "Fixed some Python 2.5 compatibility issues"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:54
msgid ""
"Fixed an issue with quoted filenames in Content-Disposition header (#19006)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:55
msgid ""
"Made the context option in ``trans`` and ``blocktrans`` tags accept literals"
" wrapped in single quotes (#18881)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.2.txt:56
#: ../../../../sources/1.10/docs/releases/1.4.4.txt:88
msgid "Numerous documentation improvements and fixes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.20.txt:3
msgid "Django 1.4.20 release notes"
msgstr "Informacje o wydaniu Django 1.4.20"

#: ../../../../sources/1.10/docs/releases/1.4.20.txt:5
#: ../../../../sources/1.10/docs/releases/1.6.11.txt:5
#: ../../../../sources/1.10/docs/releases/1.7.7.txt:5
msgid "*March 18, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.20.txt:7
msgid "Django 1.4.20 fixes one security issue in 1.4.19."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.20.txt:12
#: ../../../../sources/1.10/docs/releases/1.6.11.txt:29
#: ../../../../sources/1.10/docs/releases/1.7.7.txt:29
msgid ""
"Django relies on user input in some cases (e.g. "
":func:`django.contrib.auth.views.login` and :doc:`i18n "
"</topics/i18n/index>`) to redirect the user to an \"on success\" URL. The "
"security checks for these redirects (namely "
"``django.utils.http.is_safe_url()``) accepted URLs with leading control "
"characters and so considered URLs like ``\\x08javascript:...`` safe. This "
"issue doesn't affect Django currently, since we only put this URL into the "
"``Location`` response header and browsers seem to ignore JavaScript there. "
"Browsers we tested also treat URLs prefixed with control characters such as "
"``%08//example.com`` as relative paths so redirection to an unsafe target "
"isn't a problem either."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.20.txt:23
#: ../../../../sources/1.10/docs/releases/1.6.11.txt:40
#: ../../../../sources/1.10/docs/releases/1.7.7.txt:40
msgid ""
"However, if a developer relies on ``is_safe_url()`` to provide safe redirect"
" targets and puts such a URL into a link, they could suffer from an XSS "
"attack as some browsers such as Google Chrome ignore control characters at "
"the start of a URL in an anchor ``href``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.21.txt:3
msgid "Django 1.4.21 release notes"
msgstr "Informacje o wydaniu Django 1.4.21"

#: ../../../../sources/1.10/docs/releases/1.4.21.txt:5
#: ../../../../sources/1.10/docs/releases/1.7.9.txt:5
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:5
msgid "*July 8, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.21.txt:7
msgid "Django 1.4.21 fixes several security issues in 1.4.20."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.21.txt:10
#: ../../../../sources/1.10/docs/releases/1.7.9.txt:10
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:15
msgid "Denial-of-service possibility by filling session store"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.21.txt:12
#: ../../../../sources/1.10/docs/releases/1.7.9.txt:12
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:17
msgid ""
"In previous versions of Django, the session backends created a new empty "
"record in the session storage anytime ``request.session`` was accessed and "
"there was a session key provided in the request cookies that didn't already "
"have a session record. This could allow an attacker to easily create many "
"new session records simply by sending repeated requests with unknown session"
" keys, potentially filling up the session store or causing other users' "
"session records to be evicted."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.21.txt:20
#: ../../../../sources/1.10/docs/releases/1.7.9.txt:20
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:25
msgid ""
"The built-in session backends now create a session record only if the "
"session is actually modified; empty session records are not created. Thus "
"this potential DoS is now only possible if the site chooses to expose a "
"session-modifying view to anonymous users."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.21.txt:25
#: ../../../../sources/1.10/docs/releases/1.7.9.txt:25
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:30
msgid ""
"As each built-in session backend was fixed separately (rather than a fix in "
"the core sessions framework), maintainers of third-party session backends "
"should check whether the same vulnerability is present in their backend and "
"correct it if so."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.21.txt:31
#: ../../../../sources/1.10/docs/releases/1.7.9.txt:31
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:36
msgid "Header injection possibility since validators accept newlines in input"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.21.txt:33
#: ../../../../sources/1.10/docs/releases/1.7.9.txt:33
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:38
msgid ""
"Some of Django's built-in validators "
"(:class:`~django.core.validators.EmailValidator`, most seriously) didn't "
"prohibit newline characters (due to the usage of ``$`` instead of ``\\Z`` in"
" the regular expressions). If you use values with newlines in HTTP response "
"or email headers, you can suffer from header injection attacks. Django "
"itself isn't vulnerable because :class:`~django.http.HttpResponse` and the "
"mail sending utilities in :mod:`django.core.mail` prohibit newlines in HTTP "
"and SMTP headers, respectively. While the validators have been fixed in "
"Django, if you're creating HTTP responses or email messages in other ways, "
"it's a good idea to ensure that those methods prohibit newlines as well. You"
" might also want to validate that any existing data in your application "
"doesn't contain unexpected newlines."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.21.txt:46
msgid ""
":func:`~django.core.validators.validate_ipv4_address`, "
":func:`~django.core.validators.validate_slug`, and "
":class:`~django.core.validators.URLValidator` and their usage in the "
"corresponding form fields ``GenericIPAddresseField``, ``IPAddressField``, "
"``SlugField``, and ``URLField`` are also affected."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.21.txt:52
#: ../../../../sources/1.10/docs/releases/1.7.9.txt:54
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:59
msgid ""
"The undocumented, internally unused ``validate_integer()`` function is now "
"stricter as it validates using a regular expression instead of simply "
"casting the value using ``int()`` and checking if an exception was raised."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.22.txt:3
msgid "Django 1.4.22 release notes"
msgstr "Informacje o wydaniu Django 1.4.22"

#: ../../../../sources/1.10/docs/releases/1.4.22.txt:5
#: ../../../../sources/1.10/docs/releases/1.7.10.txt:5
#: ../../../../sources/1.10/docs/releases/1.8.4.txt:5
msgid "*August 18, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.22.txt:7
msgid "Django 1.4.22 fixes a security issue in 1.4.21."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.22.txt:9
msgid ""
"It also fixes support with pip 7+ by disabling wheel support. Older versions"
" of 1.4 would silently build a broken wheel when installed with those "
"versions of pip."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.22.txt:14
#: ../../../../sources/1.10/docs/releases/1.7.10.txt:10
#: ../../../../sources/1.10/docs/releases/1.8.4.txt:10
msgid ""
"Denial-of-service possibility in ``logout()`` view by filling session store"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.22.txt:16
#: ../../../../sources/1.10/docs/releases/1.7.10.txt:12
#: ../../../../sources/1.10/docs/releases/1.8.4.txt:12
msgid ""
"Previously, a session could be created when anonymously accessing the "
":func:`django.contrib.auth.views.logout` view (provided it wasn't decorated "
"with :func:`~django.contrib.auth.decorators.login_required` as done in the "
"admin). This could allow an attacker to easily create many new session "
"records by sending repeated requests, potentially filling up the session "
"store or causing other users' session records to be evicted."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.22.txt:23
#: ../../../../sources/1.10/docs/releases/1.7.10.txt:19
#: ../../../../sources/1.10/docs/releases/1.8.4.txt:19
msgid ""
"The :class:`~django.contrib.sessions.middleware.SessionMiddleware` has been "
"modified to no longer create empty session records, including when "
":setting:`SESSION_SAVE_EVERY_REQUEST` is active."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.22.txt:27
#: ../../../../sources/1.10/docs/releases/1.7.10.txt:23
msgid ""
"Additionally, the ``contrib.sessions.backends.base.SessionBase.flush()`` and"
" ``cache_db.SessionStore.flush()`` methods have been modified to avoid "
"creating a new empty session. Maintainers of third-party session backends "
"should check if the same vulnerability is present in their backend and "
"correct it if so."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.3.txt:3
msgid "Django 1.4.3 release notes"
msgstr "Informacje o wydaniu Django 1.4.3"

#: ../../../../sources/1.10/docs/releases/1.4.3.txt:7
msgid ""
"Django 1.4.3 addresses two security issues present in previous Django "
"releases in the 1.4 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.4.txt:3
msgid "Django 1.4.4 release notes"
msgstr "Informacje o wydaniu Django 1.4.4"

#: ../../../../sources/1.10/docs/releases/1.4.4.txt:7
msgid ""
"Django 1.4.4 fixes four security issues present in previous Django releases "
"in the 1.4 series, as well as several other bugs and numerous documentation "
"improvements."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.4.txt:11
msgid "This is the fourth bugfix/security release in the Django 1.4 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.4.txt:26
msgid ""
"For this reason, Django 1.4.4 adds a new setting, ``ALLOWED_HOSTS``, "
"containing an explicit list of valid host/domain names for this site. A "
"request with a Host header not matching an entry in this list will raise "
"``SuspiciousOperation`` if ``request.get_host()`` is called. For full "
"details see the documentation for the :setting:`ALLOWED_HOSTS` setting."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.4.txt:32
msgid ""
"The default value for this setting in Django 1.4.4 is ``['*']`` (matching "
"any host), for backwards-compatibility, but we strongly encourage all sites "
"to set a more restrictive value."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.4.txt:42
msgid ""
"The XML parser in the Python standard library is vulnerable to a number of "
"attacks via external entities and entity expansion. Django uses this parser "
"for deserializing XML-formatted database fixtures. This deserializer is not "
"intended for use with untrusted data, but in order to err on the side of "
"safety in Django 1.4.4 the XML deserializer refuses to parse an XML document"
" with a DTD (DOCTYPE definition), which closes off these attack avenues."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.4.txt:68
msgid ""
"In Django 1.4.4, all formsets have a strictly-enforced maximum number of "
"forms (1000 by default, though it can be set higher via the ``max_num`` "
"formset factory argument)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.4.txt:76
msgid ""
"In previous versions of Django, an admin user without change permission on a"
" model could still view the unicode representation of instances via their "
"admin history log. Django 1.4.4 now limits the admin history log view for an"
" object to users with change permission for that model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.4.txt:85
msgid ""
"Prevented transaction state from leaking from one request to the next "
"(#19707)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.4.txt:86
msgid "Changed an SQL command syntax to be MySQL 4 compatible (#19702)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.4.txt:87
msgid ""
"Added backwards-compatibility with old unsalted MD5 passwords (#18144)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.5.txt:3
msgid "Django 1.4.5 release notes"
msgstr "Informacje o wydaniu Django 1.4.5"

#: ../../../../sources/1.10/docs/releases/1.4.5.txt:7
msgid ""
"Django 1.4.5 corrects a packaging problem with yesterday's :doc:`1.4.4 "
"release </releases/1.4.4>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.6.txt:3
msgid "Django 1.4.6 release notes"
msgstr "Informacje o wydaniu Django 1.4.6"

#: ../../../../sources/1.10/docs/releases/1.4.6.txt:5
#: ../../../../sources/1.10/docs/releases/1.5.2.txt:5
msgid "*August 13, 2013*"
msgstr "*13 sierpnia 2013*"

#: ../../../../sources/1.10/docs/releases/1.4.6.txt:7
msgid ""
"Django 1.4.6 fixes one security issue present in previous Django releases in"
" the 1.4 series, as well as one other bug."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.6.txt:10
msgid "This is the sixth bugfix/security release in the Django 1.4 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.6.txt:15
#: ../../../../sources/1.10/docs/releases/1.5.2.txt:12
msgid ""
"Django relies on user input in some cases (e.g. "
":func:`django.contrib.auth.views.login`, ``django.contrib.comments``, and "
":doc:`i18n </topics/i18n/index>`) to redirect the user to an \"on success\" "
"URL. The security checks for these redirects (namely "
"``django.utils.http.is_safe_url()``) didn't check if the scheme is "
"``http(s)`` and as such allowed ``javascript:...`` URLs to be entered. If a "
"developer relied on ``is_safe_url()`` to provide safe redirect targets and "
"put such a URL into a link, they could suffer from a XSS attack. This bug "
"doesn't affect Django currently, since we only put this URL into the "
"``Location`` response header and browsers seem to ignore JavaScript there."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.6.txt:29
#: ../../../../sources/1.10/docs/releases/1.5.2.txt:60
msgid ""
"Fixed an obscure bug with the :func:`~django.test.override_settings` "
"decorator. If you hit an ``AttributeError: 'Settings' object has no "
"attribute '_original_allowed_hosts'`` exception, it's probably fixed "
"(#20636)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.7.txt:3
msgid "Django 1.4.7 release notes"
msgstr "Informacje o wydaniu Django 1.4.7"

#: ../../../../sources/1.10/docs/releases/1.4.7.txt:5
#: ../../../../sources/1.10/docs/releases/1.5.3.txt:5
msgid "*September 10, 2013*"
msgstr "*10 września 2013*"

#: ../../../../sources/1.10/docs/releases/1.4.7.txt:7
msgid ""
"Django 1.4.7 fixes one security issue present in previous Django releases in"
" the 1.4 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.7.txt:11
#: ../../../../sources/1.10/docs/releases/1.5.3.txt:12
msgid "Directory traversal vulnerability in ``ssi`` template tag"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.7.txt:13
#: ../../../../sources/1.10/docs/releases/1.5.3.txt:14
msgid ""
"In previous versions of Django it was possible to bypass the "
"``ALLOWED_INCLUDE_ROOTS`` setting used for security with the ``ssi`` "
"template tag by specifying a relative path that starts with one of the "
"allowed roots. For example, if ``ALLOWED_INCLUDE_ROOTS = (\"/var/www\",)`` "
"the following would be possible:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.7.txt:23
#: ../../../../sources/1.10/docs/releases/1.5.3.txt:24
msgid ""
"In practice this is not a very common problem, as it would require the "
"template author to put the ``ssi`` file in a user-controlled variable, but "
"it's possible in principle."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.8.txt:3
msgid "Django 1.4.8 release notes"
msgstr "Informacje o wydaniu Django 1.4.8"

#: ../../../../sources/1.10/docs/releases/1.4.8.txt:5
#: ../../../../sources/1.10/docs/releases/1.5.4.txt:5
msgid "*September 14, 2013*"
msgstr "*14 września 2013*"

#: ../../../../sources/1.10/docs/releases/1.4.8.txt:7
msgid ""
"Django 1.4.8 fixes two security issues present in previous Django releases "
"in the 1.4 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.8.txt:11
#: ../../../../sources/1.10/docs/releases/1.5.4.txt:11
msgid "Denial-of-service via password hashers"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.8.txt:13
#: ../../../../sources/1.10/docs/releases/1.5.4.txt:13
msgid ""
"In previous versions of Django, no limit was imposed on the plaintext length"
" of a password. This allowed a denial-of-service attack through submission "
"of bogus but extremely large passwords, tying up server resources performing"
" the (expensive, and increasingly expensive with the length of the password)"
" calculation of the corresponding hash."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.8.txt:19
msgid ""
"As of 1.4.8, Django's authentication framework imposes a 4096-byte limit on "
"passwords and will fail authentication with any submitted password of "
"greater length."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.8.txt:24
#: ../../../../sources/1.10/docs/releases/1.5.4.txt:24
msgid ""
"Corrected usage of "
":func:`~django.views.decorators.debug.sensitive_post_parameters` in "
":mod:`django.contrib.auth`’s admin"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.8.txt:26
#: ../../../../sources/1.10/docs/releases/1.5.4.txt:26
msgid ""
"The decoration of the ``add_view`` and ``user_change_password`` user admin "
"views with :func:`~django.views.decorators.debug.sensitive_post_parameters` "
"did not include :func:`~django.utils.decorators.method_decorator` (required "
"since the views are methods) resulting in the decorator not being properly "
"applied. This usage has been fixed and "
":func:`~django.views.decorators.debug.sensitive_post_parameters` will now "
"throw an exception if it's improperly used."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.9.txt:3
msgid "Django 1.4.9 release notes"
msgstr "Informacje o wydaniu Django 1.4.9"

#: ../../../../sources/1.10/docs/releases/1.4.9.txt:5
#: ../../../../sources/1.10/docs/releases/1.5.5.txt:5
msgid "*October 23, 2013*"
msgstr "*23 października 2013*"

#: ../../../../sources/1.10/docs/releases/1.4.9.txt:7
msgid ""
"Django 1.4.9 fixes a security-related bug in the 1.4 series and one other "
"data corruption bug."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.9.txt:11
#: ../../../../sources/1.10/docs/releases/1.5.5.txt:11
msgid "Readdressed denial-of-service via password hashers"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.9.txt:13
msgid ""
"Django 1.4.8 imposes a 4096-byte limit on passwords in order to mitigate a "
"denial-of-service attack through submission of bogus but extremely large "
"passwords. In Django 1.4.9, we've reverted this change and instead improved "
"the speed of our PBKDF2 algorithm by not rehashing the key on every "
"iteration."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.4.9.txt:21
#: ../../../../sources/1.10/docs/releases/1.5.5.txt:27
msgid ""
"Fixed a data corruption bug with ``datetime_safe.datetime.combine`` "
"(#21256)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:3
msgid "Django 1.5 release notes"
msgstr "Informacje o wydaniu Django 1.5"

#: ../../../../sources/1.10/docs/releases/1.5.txt:5
msgid "*February 26, 2013*"
msgstr "*26 lutego 2013*"

#: ../../../../sources/1.10/docs/releases/1.5.txt:7
msgid "Welcome to Django 1.5!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:9
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.5>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.5>` "
"you'll want to be aware of when upgrading from Django 1.4 or older versions."
" We've also dropped some features, which are detailed in :ref:`our "
"deprecation plan <deprecation-removed-in-1.5>`, and we've :ref:`begun the "
"deprecation process for some features <deprecated-features-1.5>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:19
msgid ""
"The biggest new feature in Django 1.5 is the `configurable User model`_. "
"Before Django 1.5, applications that wanted to use Django's auth framework "
"(:mod:`django.contrib.auth`) were forced to use Django's definition of a "
"\"user\". In Django 1.5, you can now swap out the ``User`` model for one "
"that you write yourself. This could be a simple extension to the existing "
"``User`` model -- for example, you could add a Twitter or Facebook ID field "
"-- or you could completely replace the ``User`` with one totally customized "
"for your site."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:27
msgid ""
"Django 1.5 is also the first release with `Python 3 support`_! We're "
"labeling this support \"experimental\" because we don't yet consider it "
"production-ready, but everything's in place for you to start porting your "
"apps to Python 3. Our next release, Django 1.6, will support Python 3 "
"without reservations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:32
msgid "Other notable new features in Django 1.5 include:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:34
msgid ""
"`Support for saving a subset of model's fields`_ - :meth:`Model.save() "
"<django.db.models.Model.save()>` now accepts an ``update_fields`` argument, "
"letting you specify which fields are written back to the database when you "
"call ``save()``. This can help in high-concurrency operations, and can "
"improve performance."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:40
msgid ""
"Better `support for streaming responses <#explicit-streaming-responses>`_ "
"via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:43
msgid "`GeoDjango`_ now supports PostGIS 2.0."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:45
msgid "... and more; `see below <#what-s-new-in-django-1-5>`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:47
msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible"
" manner per :doc:`our API stability policy </misc/api-stability>`. However, "
"as with previous releases, Django 1.5 ships with some minor :ref:`backwards "
"incompatible changes <backwards-incompatible-1.5>`; people upgrading from "
"previous versions of Django should read that list carefully."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:53
msgid ""
"One deprecated feature worth noting is the shift to \"new-style\" "
":ttag:`url` tag. Prior to Django 1.3, syntax like ``{% url myview %}`` was "
"interpreted incorrectly (Django considered ``\"myview\"`` to be a literal "
"name of a view, not a template variable named ``myview``). Django 1.3 and "
"above introduced the ``{% load url from future %}`` syntax to bring in the "
"corrected behavior where ``myview`` was seen as a variable."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:60
msgid ""
"The upshot of this is that if you are not using ``{% load url from future "
"%}`` in your templates, you'll need to change tags like ``{% url myview %}``"
" to ``{% url \"myview\" %}``. If you *were* using ``{% load url from future "
"%}`` you can simply remove that line under Django 1.5"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:68
msgid ""
"Django 1.5 requires Python 2.6.5 or above, though we **highly recommend** "
"Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:71
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.6 or newer as their "
"default version. If you're still using Python 2.5, however, you'll need to "
"stick to Django 1.4 until you can upgrade your Python version. Per :doc:`our"
" support policy </internals/release-process>`, Django 1.4 will continue to "
"receive security support until the release of Django 1.6."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:78
msgid ""
"Django 1.5 does not run on a Jython final release, because Jython's latest "
"release doesn't currently support Python 2.6. However, Jython currently does"
" offer an alpha release featuring 2.7 support, and Django 1.5 supports that "
"alpha release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:84
msgid "Python 3 support"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:86
msgid ""
"Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and "
"above. This comes in the form of a **single** codebase; you don't need to "
"install a different version of Django on Python 3. This means that you can "
"write applications targeted for just Python 2, just Python 3, or single "
"applications that support both platforms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:92
msgid ""
"However, we're labeling this support \"experimental\" for now: although it's"
" received extensive testing via our automated test suite, it's received very"
" little real-world testing. We've done our best to eliminate bugs, but we "
"can't be sure we covered all possible uses of Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:97
msgid ""
"Some features of Django aren't available because they depend on third-party "
"software that hasn't been ported to Python 3 yet, including:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:100
msgid "the MySQL database backend (depends on MySQLdb)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:101
msgid ":class:`~django.db.models.ImageField` (depends on PIL)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:102
msgid ""
":class:`~django.test.LiveServerTestCase` (depends on Selenium WebDriver)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:104
msgid ""
"Further, Django's more than a web framework; it's an ecosystem of pluggable "
"components. At this point, very few third-party applications have been "
"ported to Python 3, so it's unlikely that a real-world application will have"
" all its dependencies satisfied under Python 3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:109
msgid ""
"Thus, we're recommending that Django 1.5 not be used in production under "
"Python 3. Instead, use this opportunity to begin :doc:`porting applications "
"to Python 3 </topics/python3>`. If you're an author of a pluggable "
"component, we encourage you to start porting now."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:114
msgid ""
"We plan to offer first-class, production-ready support for Python 3 in our "
"next release, Django 1.6."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:120
msgid "What's new in Django 1.5"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:123
msgid "Configurable User model"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:125
msgid ""
"In Django 1.5, you can now use your own model as the store for user-related "
"data. If your project needs a username with more than 30 characters, or if "
"you want to store user's names in a format other than first name/last name, "
"or you want to put custom profile information onto your User object, you can"
" now do so."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:131
msgid ""
"If you have a third-party reusable application that references the User "
"model, you may need to make some changes to the way you reference User "
"instances. You should also document any specific features of the User model "
"that your application relies upon."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:136
msgid ""
"See the :ref:`documentation on custom User models <auth-custom-user>` for "
"more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:140
msgid "Support for saving a subset of model's fields"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:142
msgid ""
"The method :meth:`Model.save() <django.db.models.Model.save()>` has a new "
"keyword argument ``update_fields``. By using this argument it is possible to"
" save only a select list of model's fields. This can be useful for "
"performance reasons or when trying to avoid overwriting concurrent changes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:147
msgid ""
"Deferred instances (those loaded by ``.only()`` or ``.defer()``) will "
"automatically save just the loaded fields. If any field is set manually "
"after load, that field will also get updated on save."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:151
msgid ""
"See the :meth:`Model.save() <django.db.models.Model.save()>` documentation "
"for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:155
msgid "Caching of related model instances"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:157
msgid ""
"When traversing relations, the ORM will avoid re-fetching objects that were "
"previously loaded. For example, with the tutorial's models::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:165
msgid ""
"In Django 1.5, the third line no longer triggers a new SQL query to fetch "
"``first_choice.poll``; it was set by the second line."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:168
msgid ""
"For one-to-one relationships, both sides can be cached. For many-to-one "
"relationships, only the single side of the relationship can be cached. This "
"is particularly helpful in combination with ``prefetch_related``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:175
msgid "Explicit support for streaming responses"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:177
msgid ""
"Before Django 1.5, it was possible to create a streaming response by passing"
" an iterator to :class:`~django.http.HttpResponse`. But this was unreliable:"
" any middleware that accessed the :attr:`~django.http.HttpResponse.content` "
"attribute would consume the iterator prematurely."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:182
msgid ""
"You can now explicitly generate a streaming response with the new "
":class:`~django.http.StreamingHttpResponse` class. This class exposes a "
":class:`~django.http.StreamingHttpResponse.streaming_content` attribute "
"which is an iterator."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:187
msgid ""
"Since :class:`~django.http.StreamingHttpResponse` does not have a "
"``content`` attribute, middleware that needs access to the response content "
"must test for streaming responses and behave accordingly."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:192
msgid "``{% verbatim %}`` template tag"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:194
msgid ""
"To make it easier to deal with JavaScript templates which collide with "
"Django's syntax, you can now use the :ttag:`verbatim` block tag to avoid "
"parsing the tag's content."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:199
msgid "Retrieval of ``ContentType`` instances associated with proxy models"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:201
msgid ""
"The methods :meth:`ContentTypeManager.get_for_model() "
"<django.contrib.contenttypes.models.ContentTypeManager.get_for_model()>` and"
" :meth:`ContentTypeManager.get_for_models() "
"<django.contrib.contenttypes.models.ContentTypeManager.get_for_models()>` "
"have a new keyword argument – respectively ``for_concrete_model`` and "
"``for_concrete_models``. By passing ``False`` using this argument it is now "
"possible to retrieve the :class:`ContentType "
"<django.contrib.contenttypes.models.ContentType>` associated with proxy "
"models."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:209
msgid "New ``view`` variable in class-based views context"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:211
msgid ""
"In all :doc:`generic class-based views </topics/class-based-views/index>` "
"(or any class-based view inheriting from ``ContextMixin``), the context "
"dictionary contains a ``view`` variable that points to the ``View`` "
"instance."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:218
msgid ""
":class:`~django.contrib.gis.geos.LineString` and "
":class:`~django.contrib.gis.geos.MultiLineString` GEOS objects now support "
"the :meth:`~django.contrib.gis.geos.GEOSGeometry.interpolate()` and "
":meth:`~django.contrib.gis.geos.GEOSGeometry.project()` methods (so-called "
"linear referencing)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:224
msgid ""
"The ``wkb`` and ``hex`` properties of "
":class:`~django.contrib.gis.geos.GEOSGeometry` objects preserve the Z "
"dimension."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:228
msgid ""
"Support for PostGIS 2.0 has been added and support for GDAL < 1.5 has been "
"dropped."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:232
msgid "New tutorials"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:234
msgid ""
"Additions to the docs include a revamped :doc:`Tutorial "
"3</intro/tutorial03>` and a new :doc:`tutorial on "
"testing</intro/tutorial05>`. A new section, \"Advanced Tutorials\", offers "
":doc:`How to write reusable apps </intro/reusable-apps>` as well as a step-"
"by-step guide for new contributors in :doc:`Writing your first patch for "
"Django </intro/contributing>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:243
msgid "Django 1.5 also includes several smaller improvements worth noting:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:245
msgid ""
"The template engine now interprets ``True``, ``False`` and ``None`` as the "
"corresponding Python objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:248
msgid ""
":mod:`django.utils.timezone` provides a helper for converting aware "
"datetimes between time zones. See :func:`~django.utils.timezone.localtime`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:251
msgid "The generic views support OPTIONS requests."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:253
msgid ""
"Management commands do not raise ``SystemExit`` any more when called by code"
" from :func:`~django.core.management.call_command`. Any exception raised by "
"the command (mostly :exc:`~django.core.management.CommandError`) is "
"propagated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:258
msgid ""
"Moreover, when you output errors or messages in your custom commands, you "
"should now use ``self.stdout.write('message')`` and "
"``self.stderr.write('error')`` (see the note on :ref:`management commands "
"output <management-commands-output>`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:263
msgid ""
"The dumpdata management command outputs one row at a time, preventing out-"
"of-memory errors when dumping large datasets."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:266
msgid ""
"In the localflavor for Canada, \"pq\" was added to the acceptable codes for "
"Quebec. It's an old abbreviation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:269
msgid ""
"The :ref:`receiver <connecting-receiver-functions>` decorator is now able to"
" connect to more than one signal by supplying a list of signals."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:272
msgid ""
"In the admin, you can now filter users by groups which they are members of."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:274
msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>`"
" now has a batch_size argument. By default the batch_size is unlimited "
"except for SQLite where single batch is limited so that 999 parameters per "
"query isn't exceeded."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:279
msgid ""
"The :setting:`LOGIN_URL` and :setting:`LOGIN_REDIRECT_URL` settings now also"
" accept view function names and :ref:`named URL patterns <naming-url-"
"patterns>`. This allows you to reduce configuration duplication. More "
"information can be found in the "
":func:`~django.contrib.auth.decorators.login_required` documentation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:285
msgid ""
"Django now provides a mod_wsgi :doc:`auth handler </howto/deployment/wsgi"
"/apache-auth>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:288
msgid ""
"The :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` and "
":meth:`Model.delete() <django.db.models.Model.delete()>` can now take fast-"
"path in some cases. The fast-path allows for less queries and less objects "
"fetched into memory. See :meth:`QuerySet.delete() "
"<django.db.models.query.QuerySet.delete>` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:294
msgid ""
"An instance of ``ResolverMatch`` is stored on the request as "
"``resolver_match``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:297
msgid ""
"By default, all logging messages reaching the ``django`` logger when "
":setting:`DEBUG` is ``True`` are sent to the console (unless you redefine "
"the logger in your :setting:`LOGGING` setting)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:301
msgid ""
"When using :class:`~django.template.RequestContext`, it is now possible to "
"look up permissions by using ``{% if 'someapp.someperm' in perms %}`` in "
"templates."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:305
msgid ""
"It's not required any more to have ``404.html`` and ``500.html`` templates "
"in the root templates directory. Django will output some basic error "
"messages for both situations when those templates are not found. Of course, "
"it's still recommended as good practice to provide those templates in order "
"to present pretty error pages to the user."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:311
msgid ""
":mod:`django.contrib.auth` provides a new signal that is emitted whenever a "
"user fails to login successfully. See "
":data:`~django.contrib.auth.signals.user_login_failed`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:315
msgid ""
"The new :option:`loaddata --ignorenonexistent` option ignore data for fields"
" that no longer exist."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:318
msgid ""
":meth:`~django.test.SimpleTestCase.assertXMLEqual` and "
":meth:`~django.test.SimpleTestCase.assertXMLNotEqual` new assertions allow "
"you to test equality for XML content at a semantic level, without caring for"
" syntax differences (spaces, attribute order, etc.)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:323
msgid ""
"RemoteUserMiddleware now forces logout when the REMOTE_USER header "
"disappears during the same browser session."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:326
msgid ""
"The :ref:`cache-based session backend <cached-sessions-backend>` can store "
"session data in a non-default cache."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:329
msgid ""
"Multi-column indexes can now be created on models. Read the "
":attr:`~django.db.models.Options.index_together` documentation for more "
"information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:333
msgid ""
"During Django's logging configuration verbose Deprecation warnings are "
"enabled and warnings are captured into the logging system. Logged warnings "
"are routed through the ``console`` logging handler, which by default "
"requires :setting:`DEBUG` to be True for output to be generated. The result "
"is that DeprecationWarnings should be printed to the console in development "
"environments the way they have been in Python versions < 2.7."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:340
msgid ""
"The API for :meth:`django.contrib.admin.ModelAdmin.message_user` method has "
"been modified to accept additional arguments adding capabilities similar to "
":func:`django.contrib.messages.add_message`. This is useful for generating "
"error messages from admin actions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:345
msgid ""
"The admin's list filters can now be customized per-request thanks to the new"
" :meth:`django.contrib.admin.ModelAdmin.get_list_filter` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:351
msgid "Backwards incompatible changes in 1.5"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:355
msgid ""
"In addition to the changes outlined in this section, be sure to review the "
":ref:`deprecation plan <deprecation-removed-in-1.5>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:362
msgid "``ALLOWED_HOSTS`` required in production"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:364
msgid ""
"The new :setting:`ALLOWED_HOSTS` setting validates the request's ``Host`` "
"header and protects against host-poisoning attacks. This setting is now "
"required whenever :setting:`DEBUG` is ``False``, or else "
":meth:`django.http.HttpRequest.get_host()` will raise "
":exc:`~django.core.exceptions.SuspiciousOperation`. For more details see the"
" :setting:`full documentation<ALLOWED_HOSTS>` for the new setting."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:372
msgid "Managers on abstract models"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:374
msgid ""
"Abstract models are able to define a custom manager, and that manager "
":ref:`will be inherited by any concrete models extending the abstract model "
"<custom-managers-and-inheritance>`. However, if you try to use the abstract "
"model to call a method on the manager, an exception will now be raised. "
"Previously, the call would have been permitted, but would have failed as "
"soon as any database operation was attempted (usually with a \"table does "
"not exist\" error from the database)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:382
msgid ""
"If you have functionality on a manager that you have been invoking using the"
" abstract class, you should migrate that logic to a Python ``staticmethod`` "
"or ``classmethod`` on the abstract class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:387
msgid "Context in year archive class-based views"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:389
msgid ""
"For consistency with the other date-based generic views, "
":class:`~django.views.generic.dates.YearArchiveView` now passes ``year`` in "
"the context as a :class:`datetime.date` rather than a string.  If you are "
"using ``{{ year }}`` in your templates, you must replace it with ``{{ "
"year|date:\"Y\" }}``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:395
msgid ""
"``next_year`` and ``previous_year`` were also added in the context. They are"
" calculated according to ``allow_empty`` and ``allow_future``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:399
msgid "Context in year and month archive class-based views"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:401
msgid ""
":class:`~django.views.generic.dates.YearArchiveView` and "
":class:`~django.views.generic.dates.MonthArchiveView` were documented to "
"provide a ``date_list`` sorted in ascending order in the context, like their"
" function-based predecessors, but it actually was in descending order. In "
"1.5, the documented order was restored. You may want to add (or remove) the "
"``reversed`` keyword when you're iterating on ``date_list`` in a template::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:410
msgid ""
":class:`~django.views.generic.dates.ArchiveIndexView` still provides a "
"``date_list`` in descending order."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:414
msgid "Context in TemplateView"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:416
msgid ""
"For consistency with the design of the other generic views, "
":class:`~django.views.generic.base.TemplateView` no longer passes a "
"``params`` dictionary into the context, instead passing the variables from "
"the URLconf directly into the context."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:422
msgid "Non-form data in HTTP requests"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:424
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` will no longer include "
"data posted via HTTP requests with non form-specific content-types in the "
"header. In prior versions, data posted with content-types other than "
"``multipart/form-data`` or ``application/x-www-form-urlencoded`` would still"
" end up represented in the :attr:`request.POST "
"<django.http.HttpRequest.POST>` attribute. Developers wishing to access the "
"raw POST data for these cases, should use the :attr:`request.body "
"<django.http.HttpRequest.body>` attribute instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:434
msgid ":data:`~django.core.signals.request_finished` signal"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:436
msgid ""
"Django used to send the :data:`~django.core.signals.request_finished` signal"
" as soon as the view function returned a response. This interacted badly "
"with :ref:`streaming responses <httpresponse-streaming>` that delay content "
"generation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:441
msgid ""
"This signal is now sent after the content is fully consumed by the WSGI "
"gateway. This might be backwards incompatible if you rely on the signal "
"being fired before sending the response content to the client. If you do, "
"you should consider using :doc:`middleware </topics/http/middleware>` "
"instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:448
msgid ""
"Some WSGI servers and middleware do not always call ``close`` on the "
"response object after handling a request, most notably uWSGI prior to 1.2.6 "
"and Sentry's error reporting middleware up to 2.0.7. In those cases the "
"``request_finished`` signal isn't sent at all. This can result in idle "
"connections to database and memcache servers."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:455
msgid "OPTIONS, PUT and DELETE requests in the test client"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:457
msgid ""
"Unlike GET and POST, these HTTP methods aren't implemented by web browsers. "
"Rather, they're used in APIs, which transfer data in various formats such as"
" JSON or XML. Since such requests may contain arbitrary data, Django doesn't"
" attempt to decode their body."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:462
msgid ""
"However, the test client used to build a query string for OPTIONS and DELETE"
" requests like for GET, and a request body for PUT requests like for POST. "
"This encoding was arbitrary and inconsistent with Django's behavior when it "
"receives the requests, so it was removed in Django 1.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:467
msgid ""
"If you were using the ``data`` parameter in an OPTIONS or a DELETE request, "
"you must convert it to a query string and append it to the ``path`` "
"parameter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:470
msgid ""
"If you were using the ``data`` parameter in a PUT request without a "
"``content_type``, you must encode your data before passing it to the test "
"client and set the ``content_type`` argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:477
msgid "System version of ``simplejson`` no longer used"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:479
msgid ""
":ref:`As explained below <simplejson-deprecation>`, Django 1.5 deprecates "
"``django.utils.simplejson`` in favor of Python 2.6's built-in :mod:`json` "
"module. In theory, this change is harmless. Unfortunately, because of "
"incompatibilities between versions of ``simplejson``, it may trigger errors "
"in some circumstances."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:485
msgid ""
"JSON-related features in Django 1.4 always used ``django.utils.simplejson``."
" This module was actually:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:488
msgid ""
"A system version of ``simplejson``, if one was available (ie. ``import "
"simplejson`` works), if it was more recent than Django's built-in copy or it"
" had the C speedups, or"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:491
msgid ""
"The :mod:`json` module from the standard library, if it was available (ie. "
"Python 2.6 or greater), or"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:493
msgid "A built-in copy of version 2.0.7 of ``simplejson``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:495
msgid ""
"In Django 1.5, those features use Python's :mod:`json` module, which is "
"based on version 2.0.9 of ``simplejson``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:498
msgid ""
"There are no known incompatibilities between Django's copy of version 2.0.7 "
"and Python's copy of version 2.0.9. However, there are some "
"incompatibilities between other versions of ``simplejson``:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:502
msgid ""
"While the ``simplejson`` API is documented as always returning unicode "
"strings, the optional C implementation can return a byte string. This was "
"fixed in Python 2.7."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:505
msgid ""
"``simplejson.JSONEncoder`` gained a ``namedtuple_as_object`` keyword "
"argument in version 2.2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:508
msgid ""
"More information on these incompatibilities is available in `ticket "
"#18023`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:510
msgid ""
"The net result is that, if you have installed ``simplejson`` and your code "
"uses Django's serialization internals directly -- for instance "
"``django.core.serializers.json.DjangoJSONEncoder``, the switch from "
"``simplejson`` to :mod:`json` could break your code. (In general, changes to"
" internals aren't documented; we're making an exception here.)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:516
msgid ""
"At this point, the maintainers of Django believe that using :mod:`json` from"
" the standard library offers the strongest guarantee of backwards-"
"compatibility. They recommend to use it from now on."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:523
msgid "String types of hasher method parameters"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:525
msgid ""
"If you have written a :ref:`custom password hasher <auth_password_storage>`,"
" your ``encode()``, ``verify()`` or ``safe_summary()`` methods should accept"
" Unicode parameters (``password``, ``salt`` or ``encoded``). If any of the "
"hashing methods need byte strings, you can use the "
":func:`~django.utils.encoding.force_bytes` utility to encode the strings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:532
msgid "Validation of previous_page_number and next_page_number"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:534
msgid ""
"When using :doc:`object pagination </topics/pagination>`, the "
"``previous_page_number()`` and ``next_page_number()`` methods of the "
":class:`~django.core.paginator.Page` object did not check if the returned "
"number was inside the existing page range. It does check it now and raises "
"an :exc:`~django.core.paginator.InvalidPage` exception when the number is "
"either too low or too high."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:542
msgid "Behavior of autocommit database option on PostgreSQL changed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:544
msgid ""
"PostgreSQL's autocommit option didn't work as advertised previously. It did "
"work for single transaction block, but after the first block was left the "
"autocommit behavior was never restored. This bug is now fixed in 1.5. While "
"this is only a bug fix, it is worth checking your applications behavior if "
"you are using PostgreSQL together with the autocommit option."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:551
msgid "Session not saved on 500 responses"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:553
msgid ""
"Django's session middleware will skip saving the session data if the "
"response's status code is 500."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:557
msgid "Email checks on failed admin login"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:559
msgid ""
"Prior to Django 1.5, if you attempted to log into the admin interface and "
"mistakenly used your email address instead of your username, the admin "
"interface would provide a warning advising that your email address was not "
"your username. In Django 1.5, the introduction of :ref:`custom User models "
"<auth-custom-user>` has required the removal of this warning. This doesn't "
"change the login behavior of the admin site; it only affects the warning "
"message that is displayed under one particular mode of login failure."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:569
msgid "Changes in tests execution"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:571
msgid ""
"Some changes have been introduced in the execution of tests that might be "
"backward-incompatible for some testing setups:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:575
msgid "Database flushing in ``django.test.TransactionTestCase``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:577
msgid ""
"Previously, the test database was truncated *before* each test run in a "
":class:`~django.test.TransactionTestCase`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:580
msgid ""
"In order to be able to run unit tests in any order and to make sure they are"
" always isolated from each other, :class:`~django.test.TransactionTestCase` "
"will now reset the database *after* each test run instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:585
msgid "No more implicit DB sequences reset"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:587
msgid ""
":class:`~django.test.TransactionTestCase` tests used to reset primary key "
"sequences automatically together with the database flushing actions "
"described above."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:591
msgid ""
"This has been changed so no sequences are implicitly reset. This can cause "
":class:`~django.test.TransactionTestCase` tests that depend on hard-coded "
"primary key values to break."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:595
msgid ""
"The new :attr:`~django.test.TransactionTestCase.reset_sequences` attribute "
"can be used to force the old behavior for "
":class:`~django.test.TransactionTestCase` that might need it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:600
msgid "Ordering of tests"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:602
msgid ""
"In order to make sure all ``TestCase`` code starts with a clean database, "
"tests are now executed in the following order:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:605
msgid ""
"First, all unittests (including :class:`unittest.TestCase`, "
":class:`~django.test.SimpleTestCase`, :class:`~django.test.TestCase` and "
":class:`~django.test.TransactionTestCase`) are run with no particular "
"ordering guaranteed nor enforced among them."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:610
msgid ""
"Then any other tests (e.g. doctests) that may alter the database without "
"restoring it to its original state are run."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:613
msgid ""
"This should not cause any problems unless you have existing doctests which "
"assume a :class:`~django.test.TransactionTestCase` executed earlier left "
"some database state behind or unit tests that rely on some form of state "
"being preserved after the execution of other tests. Such tests are already "
"very fragile, and must now be changed to be able to run independently."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:620
msgid "`cleaned_data` dictionary kept for invalid forms"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:622
msgid ""
"The :attr:`~django.forms.Form.cleaned_data` dictionary is now always present"
" after form validation. When the form doesn't validate, it contains only the"
" fields that passed validation. You should test the success of the "
"validation with the :meth:`~django.forms.Form.is_valid()` method and not "
"with the presence or absence of the :attr:`~django.forms.Form.cleaned_data` "
"attribute on the form."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:630
msgid "Behavior of ``syncdb`` with multiple databases"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:632
msgid ""
"``syncdb`` now queries the database routers to determine if content types "
"(when :mod:`~django.contrib.contenttypes` is enabled) and permissions (when "
":mod:`~django.contrib.auth` is enabled) should be created in the target "
"database. Previously, it created them in the default database, even when "
"another database was specified with the ``--database`` option."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:638
msgid ""
"If you use ``syncdb`` on multiple databases, you should ensure that your "
"routers allow synchronizing content types and permissions to only one of "
"them. See the docs on the :ref:`behavior of contrib apps with multiple "
"databases <contrib_app_multiple_databases>` for more information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:644
msgid "XML deserializer will not parse documents with a DTD"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:646
msgid ""
"In order to prevent exposure to denial-of-service attacks related to "
"external entity references and entity expansion, the XML model deserializer "
"now refuses to parse XML documents containing a DTD (DOCTYPE definition). "
"Since the XML serializer does not output a DTD, this will not impact typical"
" usage, only cases where custom-created XML documents are passed to Django's"
" model deserializer."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:654
msgid "Formsets default ``max_num``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:656
msgid ""
"A (default) value of ``None`` for the ``max_num`` argument to a formset "
"factory no longer defaults to allowing any number of forms in the formset. "
"Instead, in order to prevent memory-exhaustion attacks, it now defaults to a"
" limit of 1000 forms. This limit can be raised by explicitly setting a "
"higher value for ``max_num``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:665
msgid ""
":class:`django.forms.ModelMultipleChoiceField` now returns an empty "
"``QuerySet`` as the empty value instead of an empty list."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:668
msgid ""
":func:`~django.utils.http.int_to_base36` properly raises a :exc:`TypeError` "
"instead of :exc:`ValueError` for non-integer inputs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:671
msgid ""
"The ``slugify`` template filter is now available as a standard python "
"function at :func:`django.utils.text.slugify`. Similarly, ``remove_tags`` is"
" available at ``django.utils.html.remove_tags()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:675
msgid ""
"Uploaded files are no longer created as executable by default. If you need "
"them to be executable change :setting:`FILE_UPLOAD_PERMISSIONS` to your "
"needs. The new default value is ``0o666`` (octal) and the current umask "
"value is first masked out."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:680
msgid ""
"The :class:`F expressions <django.db.models.F>` supported bitwise operators "
"by ``&`` and ``|``. These operators are now available using ``.bitand()`` "
"and ``.bitor()`` instead. The removal of ``&`` and ``|`` was done to be "
"consistent with :ref:`Q() expressions <complex-lookups-with-q>` and "
"``QuerySet`` combining where the operators are used as boolean AND and OR "
"operators."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:687
msgid ""
"In a ``filter()`` call, when :class:`F expressions <django.db.models.F>` "
"contained lookups spanning multi-valued relations, they didn't always reuse "
"the same relations as other lookups along the same chain. This was changed, "
"and now F() expressions will always use the same relations as other lookups "
"within the same ``filter()`` call."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:693
msgid ""
"The :ttag:`csrf_token` template tag is no longer enclosed in a div. If you "
"need HTML validation against pre-HTML5 Strict DTDs, you should add a div "
"around it in your pages."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:697
msgid ""
"The template tags library ``adminmedia``, which only contained the "
"deprecated template tag ``{% admin_media_prefix %}``, was removed. "
"Attempting to load it with ``{% load adminmedia %}`` will fail. If your "
"templates still contain that line you must remove it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:702
msgid ""
"Because of an implementation oversight, it was possible to use "
":doc:`django.contrib.redirects </ref/contrib/redirects>` without enabling "
":doc:`django.contrib.sites </ref/contrib/sites>`. This isn't allowed any "
"longer. If you're using ``django.contrib.redirects``, make sure "
":setting:`INSTALLED_APPS` contains ``django.contrib.sites``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:708
msgid ""
":meth:`BoundField.label_tag <django.forms.BoundField.label_tag>` now escapes"
" its ``contents`` argument. To avoid the HTML escaping, use "
":func:`django.utils.safestring.mark_safe` on the argument before passing it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:712
msgid ""
"Accessing reverse one-to-one relations fetched via "
":meth:`~django.db.models.query.QuerySet.select_related` now raises "
":exc:`~django.db.models.Model.DoesNotExist` instead of returning ``None``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:719
msgid "Features deprecated in 1.5"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:722
msgid "``django.contrib.localflavor``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:724
msgid ""
"The localflavor contrib app has been split into separate packages. "
"``django.contrib.localflavor`` itself will be removed in Django 1.6, after "
"an accelerated deprecation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:728
msgid ""
"The new packages are available on GitHub. The core team cannot efficiently "
"maintain these packages in the long term — it spans just a dozen countries "
"at this time; similar to translations, maintenance will be handed over to "
"interested members of the community."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:734
msgid "``django.contrib.markup``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:736
msgid ""
"The markup contrib module has been deprecated and will follow an accelerated"
" deprecation schedule. Direct use of Python markup libraries or 3rd party "
"tag libraries is preferred to Django maintaining this functionality in the "
"framework."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:742
msgid "``AUTH_PROFILE_MODULE``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:744
msgid ""
"With the introduction of :ref:`custom User models <auth-custom-user>`, there"
" is no longer any need for a built-in mechanism to store user profile data."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:747
msgid ""
"You can still define user profiles models that have a one-to-one relation "
"with the User model - in fact, for many applications needing to associate "
"data with a User account, this will be an appropriate design pattern to "
"follow. However, the ``AUTH_PROFILE_MODULE`` setting, and the "
"``django.contrib.auth.models.User.get_profile()`` method for accessing the "
"user profile model, should not be used any longer."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:755
msgid "Streaming behavior of :class:`~django.http.HttpResponse`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:757
msgid ""
"Django 1.5 deprecates the ability to stream a response by passing an "
"iterator to :class:`~django.http.HttpResponse`. If you rely on this "
"behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref"
":`explicit-streaming-responses` above."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:762
msgid ""
"In Django 1.7 and above, the iterator will be consumed immediately by "
":class:`~django.http.HttpResponse`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:768
msgid "``django.utils.simplejson``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:770
msgid ""
"Since Django 1.5 drops support for Python 2.5, we can now rely on the "
":mod:`json` module being available in Python's standard library, so we've "
"removed our own copy of ``simplejson``. You should now import :mod:`json` "
"instead of ``django.utils.simplejson``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:775
msgid ""
"Unfortunately, this change might have unwanted side-effects, because of "
"incompatibilities between versions of ``simplejson`` -- see the :ref"
":`backwards-incompatible changes <simplejson-incompatibilities>` section. If"
" you rely on features added to ``simplejson`` after it became Python's "
":mod:`json`, you should import ``simplejson`` explicitly."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:782
msgid "``django.utils.encoding.StrAndUnicode``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:784
msgid ""
"The ``django.utils.encoding.StrAndUnicode`` mix-in has been deprecated. "
"Define a ``__str__`` method and apply the "
":func:`~django.utils.encoding.python_2_unicode_compatible` decorator "
"instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:789
msgid "``django.utils.itercompat.product``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:791
msgid ""
"The ``django.utils.itercompat.product`` function has been deprecated. Use "
"the built-in :func:`itertools.product` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:795
msgid "``cleanup`` management command"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:797
msgid ""
"The ``cleanup`` management command has been deprecated and replaced by "
":djadmin:`clearsessions`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:801
msgid "``daily_cleanup.py`` script"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:803
msgid ""
"The undocumented ``daily_cleanup.py`` script has been deprecated. Use the "
":djadmin:`clearsessions` management command instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:807
msgid "``depth`` keyword argument in ``select_related``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.txt:809
msgid ""
"The ``depth`` keyword argument in "
":meth:`~django.db.models.query.QuerySet.select_related` has been deprecated."
" You should use field names instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.1.txt:3
msgid "Django 1.5.1 release notes"
msgstr "Informacje o wydaniu Django 1.5.1"

#: ../../../../sources/1.10/docs/releases/1.5.1.txt:5
msgid "*March 28, 2013*"
msgstr "*28 marca 2013*"

#: ../../../../sources/1.10/docs/releases/1.5.1.txt:7
msgid ""
"This is Django 1.5.1, a bugfix release for Django 1.5. It's completely "
"backwards compatible with Django 1.5, but includes a handful of fixes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.1.txt:10
msgid ""
"The biggest fix is for a memory leak introduced in Django 1.5. Under certain"
" circumstances, repeated iteration over querysets could leak memory - "
"sometimes quite a bit of it. If you'd like more information, the details are"
" in `our ticket tracker`__ (and in `a related issue`__ in Python itself)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.1.txt:18
msgid ""
"If you've noticed memory problems under Django 1.5, upgrading to 1.5.1 "
"should fix those issues."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.1.txt:21
msgid "Django 1.5.1 also includes a couple smaller fixes:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.1.txt:23
msgid ""
"Module-level warnings emitted during tests are no longer silently hidden "
"(:ticket:`18985`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.1.txt:25
msgid ""
"Prevented filtering on password hashes in the user admin (:ticket:`20078`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.10.txt:3
msgid "Django 1.5.10 release notes"
msgstr "Informacje o wydaniu Django 1.5.10"

#: ../../../../sources/1.10/docs/releases/1.5.10.txt:7
msgid "Django 1.5.10 fixes a regression in the 1.5.9 security release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.11.txt:3
msgid "Django 1.5.11 release notes"
msgstr "Informacje o wydaniu Django 1.5.11"

#: ../../../../sources/1.10/docs/releases/1.5.11.txt:7
msgid ""
"Django 1.5.11 fixes a couple regressions in the 1.5.9 security release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.12.txt:3
msgid "Django 1.5.12 release notes"
msgstr "Informacje o wydaniu Django 1.5.12"

#: ../../../../sources/1.10/docs/releases/1.5.12.txt:7
msgid "Django 1.5.12 fixes a regression in the 1.5.9 security release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:3
msgid "Django 1.5.2 release notes"
msgstr "Informacje o wydaniu Django 1.5.2"

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:7
msgid "This is Django 1.5.2, a bugfix and security release for Django 1.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:24
msgid "XSS vulnerability in :mod:`django.contrib.admin`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:26
msgid ""
"If a :class:`~django.db.models.URLField` is used in Django 1.5, it displays "
"the current value of the field and a link to the target on the admin change "
"page. The display routine of this widget was flawed and allowed for XSS."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:33
msgid ""
"Fixed a crash with :meth:`~django.db.models.query.QuerySet.prefetch_related`"
" (#19607) as well as some ``pickle`` regressions with ``prefetch_related`` "
"(#20157 and #20257)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:36
msgid ""
"Fixed a regression in :mod:`django.contrib.gis` in the Google Map output on "
"Python 3 (#20773)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:38
msgid ""
"Made ``DjangoTestSuiteRunner.setup_databases`` properly handle aliases for "
"the default database (#19940) and prevented ``teardown_databases`` from "
"attempting to tear down aliases (#20681)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:41
msgid ""
"Fixed the ``django.core.cache.backends.memcached.MemcachedCache`` backend's "
"``get_many()`` method on Python 3 (#20722)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:43
msgid ""
"Fixed :mod:`django.contrib.humanize` translation syntax errors. Affected "
"languages: Mexican Spanish, Mongolian, Romanian, Turkish (#20695)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:45
msgid "Added support for wheel packages (#19252)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:46
msgid "The CSRF token now rotates when a user logs in."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:47
msgid "Some Python 3 compatibility fixes including #20212 and #20025."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:48
msgid ""
"Fixed some rare cases where :meth:`~django.db.models.query.QuerySet.get` "
"exceptions recursed infinitely (#20278)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:50
msgid ""
":djadmin:`makemessages` no longer crashes with ``UnicodeDecodeError`` "
"(#20354)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:52
msgid "Fixed ``geojson`` detection with SpatiaLite."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:53
msgid ""
":meth:`~django.test.SimpleTestCase.assertContains` once again works with "
"binary content (#20237)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:55
msgid ""
"Fixed :class:`~django.db.models.ManyToManyField` if it has a unicode "
"``name`` parameter (#20207)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.2.txt:57
msgid ""
"Ensured that the WSGI request's path is correctly based on the "
"``SCRIPT_NAME`` environment variable or the :setting:`FORCE_SCRIPT_NAME` "
"setting, regardless of whether or not either has a trailing slash (#20169)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.3.txt:3
msgid "Django 1.5.3 release notes"
msgstr "Informacje o wydaniu Django 1.5.3"

#: ../../../../sources/1.10/docs/releases/1.5.3.txt:7
msgid ""
"This is Django 1.5.3, the third release in the Django 1.5 series. It "
"addresses one security issue and also contains an opt-in feature to enhance "
"the security of :mod:`django.contrib.sessions`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.3.txt:29
msgid ""
"Mitigating a remote-code execution vulnerability in "
":mod:`django.contrib.sessions`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.3.txt:31
msgid ""
":mod:`django.contrib.sessions` currently uses :mod:`pickle` to serialize "
"session data before storing it in the backend. If you're using the "
":ref:`signed cookie session backend<cookie-session-backend>` and "
":setting:`SECRET_KEY` is known by an attacker (there isn't an inherent "
"vulnerability in Django that would cause it to leak), the attacker could "
"insert a string into his session which, when unpickled, executes arbitrary "
"code on the server. The technique for doing so is simple and easily "
"available on the internet. Although the cookie session storage signs the "
"cookie-stored data to prevent tampering, a :setting:`SECRET_KEY` leak "
"immediately escalates to a remote code execution vulnerability."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.3.txt:42
msgid ""
"This attack can be mitigated by serializing session data using JSON rather "
"than :mod:`pickle`. To facilitate this, Django 1.5.3 introduces a new "
"setting, :setting:`SESSION_SERIALIZER`, to customize the session "
"serialization format. For backwards compatibility, this setting defaults to "
"using :mod:`pickle`. While JSON serialization does not support all Python "
"objects like :mod:`pickle` does, we highly recommend switching to JSON-"
"serialized values. Also, as JSON requires string keys, you will likely run "
"into problems if you are using non-string keys in ``request.session``. See "
"the :ref:`session_serialization` documentation for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.4.txt:3
msgid "Django 1.5.4 release notes"
msgstr "Informacje o wydaniu Django 1.5.4"

#: ../../../../sources/1.10/docs/releases/1.5.4.txt:7
msgid ""
"This is Django 1.5.4, the fourth release in the Django 1.5 series. It "
"addresses two security issues and one bug."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.4.txt:19
msgid ""
"As of 1.5.4, Django's authentication framework imposes a 4096-byte limit on "
"passwords, and will fail authentication with any submitted password of "
"greater length."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.4.txt:37
msgid ""
"Fixed a bug that prevented a ``QuerySet`` that uses "
":meth:`~django.db.models.query.QuerySet.prefetch_related` from being pickled"
" and unpickled more than once (the second pickling attempt raised an "
"exception) (#21102)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.5.txt:3
msgid "Django 1.5.5 release notes"
msgstr "Informacje o wydaniu Django 1.5.5"

#: ../../../../sources/1.10/docs/releases/1.5.5.txt:7
msgid ""
"Django 1.5.5 fixes a couple security-related bugs and several other bugs in "
"the 1.5 series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.5.txt:13
msgid ""
"Django 1.5.4 imposes a 4096-byte limit on passwords in order to mitigate a "
"denial-of-service attack through submission of bogus but extremely large "
"passwords. In Django 1.5.5, we've reverted this change and instead improved "
"the speed of our PBKDF2 algorithm by not rehashing the key on every "
"iteration."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.5.txt:19
msgid "Properly rotate CSRF token on login"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.5.txt:21
msgid ""
"This behavior introduced as a security hardening measure in Django 1.5.2 did"
" not work properly and is now fixed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.5.txt:28
msgid ""
"Fixed a Python 3 incompatibility in "
"``django.utils.text.unescape_entities()`` (#21185)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.5.txt:30
msgid ""
"Fixed a couple data corruption issues with ``QuerySet`` edge cases under "
"Oracle and MySQL (#21203, #21126)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.5.txt:32
msgid ""
"Fixed crashes when using combinations of ``annotate()``, "
"``select_related()``, and ``only()`` (#16436)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.5.txt:38
msgid ""
"The undocumented ``django.core.servers.basehttp.WSGIServerException`` has "
"been removed. Use ``socket.error`` provided by the standard library instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.6.txt:3
msgid "Django 1.5.6 release notes"
msgstr "Informacje o wydaniu Django 1.5.6"

#: ../../../../sources/1.10/docs/releases/1.5.6.txt:7
msgid ""
"Django 1.5.6 fixes several bugs in 1.5.5, including three security issues."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.6.txt:112
#: ../../../../sources/1.10/docs/releases/1.6.1.txt:20
msgid ""
"Fixed :class:`~django.contrib.auth.backends.ModelBackend` raising "
"``UnboundLocalError`` if :func:`~django.contrib.auth.get_user_model` raised "
"an error (#21439)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.6.txt:116
msgid ""
"Additionally, Django's vendored version of six, :mod:`django.utils.six`, has"
" been upgraded to the latest release (1.6.1)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.7.txt:3
msgid "Django 1.5.7 release notes"
msgstr "Informacje o wydaniu Django 1..7"

#: ../../../../sources/1.10/docs/releases/1.5.7.txt:7
msgid "Django 1.5.7 fixes a regression in the 1.5.6 security release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.8.txt:3
msgid "Django 1.5.8 release notes"
msgstr "Informacje o wydaniu Django 1.5.8"

#: ../../../../sources/1.10/docs/releases/1.5.8.txt:7
msgid "Django 1.5.8 fixes two security issues in 1.5.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.5.9.txt:3
msgid "Django 1.5.9 release notes"
msgstr "Informacje o wydaniu Django 1.5.9"

#: ../../../../sources/1.10/docs/releases/1.5.9.txt:7
msgid "Django 1.5.9 fixes several security issues in 1.5.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:3
msgid "Django 1.6 release notes"
msgstr "Informacje o wydaniu Django 1.6"

#: ../../../../sources/1.10/docs/releases/1.6.txt:7
msgid "Dedicated to Malcolm Tredinnick"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:9
msgid ""
"On March 17, 2013, the Django project and the free software community lost a"
" very dear friend and developer."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:12
msgid ""
"Malcolm was a long-time contributor to Django, a model community member, a "
"brilliant mind, and a friend. His contributions to Django — and to many "
"other open source projects — are nearly impossible to enumerate. Many on the"
" core Django team had their first patches reviewed by him; his mentorship "
"enriched us. His consideration, patience, and dedication will always be an "
"inspiration to us."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:19
msgid "This release of Django is for Malcolm."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:21
msgid "-- The Django Developers"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:25
msgid "Welcome to Django 1.6!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:27
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.6>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.6>` "
"you'll want to be aware of when upgrading from Django 1.5 or older versions."
" We've also dropped some features, which are detailed in :ref:`our "
"deprecation plan <deprecation-removed-in-1.6>`, and we've :ref:`begun the "
"deprecation process for some features <deprecated-features-1.6>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:37
msgid ""
"Django 1.6, like Django 1.5, requires Python 2.6.5 or above. Python 3 is "
"also officially supported. We **highly recommend** the latest minor release "
"for each supported Python series (2.6.X, 2.7.X, 3.2.X, and 3.3.X)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:41
msgid ""
"Django 1.6 will be the final release series to support Python 2.6; beginning"
" with Django 1.7, the minimum supported Python version will be 2.7."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:44
msgid "Python 3.4 is not supported, but support will be added in Django 1.7."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:49
msgid "What's new in Django 1.6"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:52
msgid "Simplified default project and app templates"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:54
msgid ""
"The default templates used by :djadmin:`startproject` and "
":djadmin:`startapp` have been simplified and modernized. The :doc:`admin "
"</ref/contrib/admin/index>` is now enabled by default in new projects; the "
":doc:`sites </ref/contrib/sites>` framework no longer is. :ref:`clickjacking"
" prevention <clickjacking-prevention>` is now on and the database defaults "
"to SQLite."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:61
msgid ""
"If the default templates don't suit your tastes, you can use :ref:`custom "
"project and app templates <custom-app-and-project-templates>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:65
msgid "Improved transaction management"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:67
msgid ""
"Django's transaction management was overhauled. Database-level autocommit is"
" now turned on by default. This makes transaction handling more explicit and"
" should improve performance. The existing APIs were deprecated, and new APIs"
" were introduced, as described in the :doc:`transaction management docs "
"</topics/db/transactions>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:74
msgid "Persistent database connections"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:76
msgid ""
"Django now supports reusing the same database connection for several "
"requests. This avoids the overhead of re-establishing a connection at the "
"beginning of each request. For backwards compatibility, this feature is "
"disabled by default. See :ref:`persistent-database-connections` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:82
msgid "Discovery of tests in any test module"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:84
msgid ""
"Django 1.6 ships with a new test runner that allows more flexibility in the "
"location of tests. The previous runner "
"(``django.test.simple.DjangoTestSuiteRunner``) found tests only in the "
"``models.py`` and ``tests.py`` modules of a Python package in "
":setting:`INSTALLED_APPS`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:90
msgid ""
"The new runner (``django.test.runner.DiscoverRunner``) uses the test "
"discovery features built into ``unittest2`` (the version of ``unittest`` in "
"the Python 2.7+ standard library, and bundled with Django). With test "
"discovery, tests can be located in any module whose name matches the pattern"
" ``test*.py``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:95
msgid ""
"In addition, the test labels provided to ``./manage.py test`` to nominate "
"specific tests to run must now be full Python dotted paths (or directory "
"paths), rather than ``applabel.TestCase.test_method_name`` pseudo-paths. "
"This allows running tests located anywhere in your codebase, rather than "
"only in :setting:`INSTALLED_APPS`. For more details, see "
":doc:`/topics/testing/index`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:101
msgid ""
"This change is backwards-incompatible; see the :ref:`backwards-"
"incompatibility notes<new-test-runner>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:105
msgid "Time zone aware aggregation"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:107
msgid ""
"The support for :doc:`time zones </topics/i18n/timezones>` introduced in "
"Django 1.4 didn't work well with :meth:`QuerySet.dates() "
"<django.db.models.query.QuerySet.dates>`: aggregation was always performed "
"in UTC. This limitation was lifted in Django 1.6. Use "
":meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>` to "
"perform time zone aware aggregation on a "
":class:`~django.db.models.DateTimeField`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:115
msgid "Support for savepoints in SQLite"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:117
msgid ""
"Django 1.6 adds support for savepoints in SQLite, with some "
":ref:`limitations <savepoints-in-sqlite>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:121
msgid "``BinaryField`` model field"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:123
msgid ""
"A new :class:`django.db.models.BinaryField` model field allows storage of "
"raw binary data in the database."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:127
msgid "GeoDjango form widgets"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:129
msgid ""
"GeoDjango now provides :doc:`form fields and widgets </ref/contrib/gis"
"/forms-api>` for its geo-specialized fields. They are OpenLayers-based by "
"default, but they can be customized to use any other JS framework."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:134
msgid "``check`` management command added for verifying compatibility"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:136
msgid ""
"A :djadmin:`check` management command was added, enabling you to verify if "
"your current configuration (currently oriented at settings) is compatible "
"with the current version of Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:141
msgid ":meth:`Model.save() <django.db.models.Model.save()>` algorithm changed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:143
msgid ""
"The :meth:`Model.save() <django.db.models.Model.save()>` method now tries to"
" directly ``UPDATE`` the database if the instance has a primary key value. "
"Previously ``SELECT`` was performed to determine if ``UPDATE`` or ``INSERT``"
" were needed. The new algorithm needs only one query for updating an "
"existing row while the old algorithm needed two. See :meth:`Model.save() "
"<django.db.models.Model.save()>` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:150
msgid ""
"In some rare cases the database doesn't report that a matching row was found"
" when doing an ``UPDATE``. An example is the PostgreSQL ``ON UPDATE`` "
"trigger which returns ``NULL``. In such cases it is possible to set "
":attr:`django.db.models.Options.select_on_save` flag to force saving to use "
"the old algorithm."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:159
msgid ""
"Authentication backends can raise ``PermissionDenied`` to immediately fail "
"the authentication chain."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:162
msgid ""
"The ``HttpOnly`` flag can be set on the CSRF cookie with "
":setting:`CSRF_COOKIE_HTTPONLY`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:165
msgid ""
"The :meth:`~django.test.TransactionTestCase.assertQuerysetEqual` now checks "
"for undefined order and raises :exc:`ValueError` if undefined order is "
"spotted. The order is seen as undefined if the given ``QuerySet`` isn't "
"ordered and there are more than one ordered values to compare against."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:170
msgid ""
"Added :meth:`~django.db.models.query.QuerySet.earliest` for symmetry with "
":meth:`~django.db.models.query.QuerySet.latest`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:173
msgid ""
"In addition to :lookup:`year`, :lookup:`month` and :lookup:`day`, the ORM "
"now supports :lookup:`hour`, :lookup:`minute` and :lookup:`second` lookups."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:176
msgid "Django now wraps all PEP-249 exceptions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:178
msgid ""
"The default widgets for :class:`~django.forms.EmailField`, "
":class:`~django.forms.URLField`, :class:`~django.forms.IntegerField`, "
":class:`~django.forms.FloatField` and :class:`~django.forms.DecimalField` "
"use the new type attributes available in HTML5 (``type='email'``, "
"``type='url'``, ``type='number'``). Note that due to erratic support of the "
"``number`` input type with localized numbers in current browsers, Django "
"only uses it when numeric fields are not localized."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:186
msgid ""
"The ``number`` argument for :ref:`lazy plural translations <lazy-plural-"
"translations>` can be provided at translation time rather than at definition"
" time."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:190
msgid ""
"For custom management commands: Verification of the presence of valid "
"settings in commands that ask for it by using the "
":attr:`~django.core.management.BaseCommand.can_import_settings` internal "
"option is now performed independently from handling of the locale that "
"should be active during the execution of the command. The latter can now be "
"influenced by the new "
":attr:`~django.core.management.BaseCommand.leave_locale_alone` internal "
"option. See :ref:`management-commands-and-locales` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:199
msgid ""
"The :attr:`~django.views.generic.edit.DeletionMixin.success_url` of "
":class:`~django.views.generic.edit.DeletionMixin` is now interpolated with "
"its ``object``’s ``__dict__``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:203
msgid ""
":class:`~django.http.HttpResponseRedirect` and "
":class:`~django.http.HttpResponsePermanentRedirect` now provide an ``url`` "
"attribute (equivalent to the URL the response will redirect to)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:207
msgid ""
"The ``MemcachedCache`` cache backend now uses the latest :mod:`pickle` "
"protocol available."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:210
msgid ""
"Added :class:`~django.contrib.messages.views.SuccessMessageMixin` which "
"provides a ``success_message`` attribute for "
":class:`~django.views.generic.edit.FormView` based classes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:214
msgid ""
"Added the :attr:`django.db.models.ForeignKey.db_constraint` and "
":attr:`django.db.models.ManyToManyField.db_constraint` options."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:217
msgid ""
"The jQuery library embedded in the admin has been upgraded to version 1.9.1."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:219
msgid ""
"Syndication feeds (:mod:`django.contrib.syndication`) can now pass extra "
"context through to feed templates using a new :meth:`Feed.get_context_data()"
" <django.contrib.syndication.Feed.get_context_data>` callback."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:224
msgid ""
"The admin list columns have a ``column-<field_name>`` class in the HTML so "
"the columns header can be styled with CSS, e.g. to set a column width."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:227
msgid ""
"The :ref:`isolation level<database-isolation-level>` can be customized under"
" PostgreSQL."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:230
msgid ""
"The :ttag:`blocktrans` template tag now respects "
"``TEMPLATE_STRING_IF_INVALID`` for variables not present in the context, "
"just like other template constructs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:234
msgid ""
"``SimpleLazyObject``\\s will now present more helpful representations in "
"shell debugging situations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:237
msgid ""
"Generic :class:`~django.contrib.gis.db.models.GeometryField` is now editable"
" with the OpenLayers widget in the admin."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:240
msgid ""
"The documentation contains a :doc:`deployment checklist "
"</howto/deployment/checklist>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:243
msgid "The :djadmin:`diffsettings` command gained a ``--all`` option."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:245
msgid ""
"``django.forms.fields.Field.__init__`` now calls ``super()``, allowing field"
" mixins to implement ``__init__()`` methods that will reliably be called."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:249
msgid ""
"The ``validate_max`` parameter was added to ``BaseFormSet`` and "
":func:`~django.forms.formsets.formset_factory`, and ``ModelForm`` and inline"
" versions of the same.  The behavior of validation for formsets with "
"``max_num`` was clarified.  The previously undocumented behavior that "
"hardened formsets against memory exhaustion attacks was documented, and the "
"undocumented limit of the higher of 1000 or ``max_num`` forms was changed so"
" it is always 1000 more than ``max_num``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:257
msgid ""
"Added ``BCryptSHA256PasswordHasher`` to resolve the password truncation "
"issue with bcrypt."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:260
msgid ""
"`Pillow`_ is now the preferred image manipulation library to use with "
"Django. `PIL`_ is pending deprecation (support to be removed in Django 1.8)."
" To upgrade, you should **first** uninstall PIL, **then** install Pillow."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:267
msgid ":class:`~django.forms.ModelForm` accepts several new ``Meta`` options."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:270
msgid ""
"Fields included in the ``localized_fields`` list will be localized (by "
"setting ``localize`` on the form field)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:272
msgid ""
"The  ``labels``, ``help_texts`` and ``error_messages`` options may be used "
"to customize the default fields, see :ref:`modelforms-overriding-default-"
"fields` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:276
msgid ""
"The ``choices`` argument to model fields now accepts an iterable of "
"iterables instead of requiring an iterable of lists or tuples."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:279
msgid ""
"The reason phrase can be customized in HTTP responses using "
":attr:`~django.http.HttpResponse.reason_phrase`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:282
msgid ""
"When giving the URL of the next page for "
":func:`~django.contrib.auth.views.logout`, "
":func:`~django.contrib.auth.views.password_reset`, "
":func:`~django.contrib.auth.views.password_reset_confirm`, and "
":func:`~django.contrib.auth.views.password_change`, you can now pass URL "
"names and they will be resolved."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:289
msgid ""
"The new :option:`dumpdata --pks` option specifies the primary keys of "
"objects to dump. This option can only be used with one model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:292
msgid ""
"Added ``QuerySet`` methods :meth:`~django.db.models.query.QuerySet.first` "
"and :meth:`~django.db.models.query.QuerySet.last` which are convenience "
"methods returning the first or last object matching the filters. Returns "
"``None`` if there are no objects matching."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:297
msgid ""
":class:`~django.views.generic.base.View` and "
":class:`~django.views.generic.base.RedirectView` now support HTTP ``PATCH`` "
"method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:301
msgid ""
"``GenericForeignKey`` now takes an optional ``for_concrete_model`` argument,"
" which when set to ``False`` allows the field to reference proxy models. The"
" default is ``True`` to retain the old behavior."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:305
msgid ""
"The :class:`~django.middleware.locale.LocaleMiddleware` now stores the "
"active language in session if it is not present there. This prevents loss of"
" language settings after session flush, e.g. logout."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:309
msgid ""
":exc:`~django.core.exceptions.SuspiciousOperation` has been differentiated "
"into a number of subclasses, and each will log to a matching named logger "
"under the ``django.security`` logging hierarchy. Along with this change, a "
"``handler400`` mechanism and default view are used whenever a "
"``SuspiciousOperation`` reaches the WSGI handler to return an "
"``HttpResponseBadRequest``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:316
msgid ""
"The :exc:`~django.db.models.Model.DoesNotExist` exception now includes a "
"message indicating the name of the attribute used for the lookup."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:319
msgid ""
"The :meth:`~django.db.models.query.QuerySet.get_or_create` method no longer "
"requires at least one keyword argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:322
msgid ""
"The :class:`~django.test.SimpleTestCase` class includes a new assertion "
"helper for testing formset errors: "
":meth:`~django.test.SimpleTestCase.assertFormsetError`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:326
msgid ""
"The list of related fields added to a "
":class:`~django.db.models.query.QuerySet` by "
":meth:`~django.db.models.query.QuerySet.select_related` can be cleared using"
" ``select_related(None)``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:331
msgid ""
"The :meth:`~django.contrib.admin.InlineModelAdmin.get_extra` and "
":meth:`~django.contrib.admin.InlineModelAdmin.get_max_num` methods on "
":class:`~django.contrib.admin.InlineModelAdmin` may be overridden to "
"customize the extra and maximum number of inline forms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:336
msgid ""
"Formsets now have a "
":meth:`~django.forms.formsets.BaseFormSet.total_error_count` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:339
msgid ""
":class:`~django.forms.ModelForm` fields can now override error messages "
"defined in model fields by using the "
":attr:`~django.forms.Field.error_messages` argument of a ``Field``’s "
"constructor. To take advantage of this new feature with your custom fields, "
":ref:`see the updated recommendation <raising-validation-error>` for raising"
" a ``ValidationError``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:346
msgid ""
":class:`~django.contrib.admin.ModelAdmin` now preserves filters on the list "
"view after creating, editing or deleting an object. It's possible to restore"
" the previous behavior of clearing filters by setting the "
":attr:`~django.contrib.admin.ModelAdmin.preserve_filters` attribute to "
"``False``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:351
msgid ""
"Added "
":meth:`FormMixin.get_prefix<django.views.generic.edit.FormMixin.get_prefix>`"
" (which returns "
":attr:`FormMixin.prefix<django.views.generic.edit.FormMixin.prefix>` by "
"default) to allow customizing the :attr:`~django.forms.Form.prefix` of the "
"form."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:358
msgid ""
"Raw queries (``Manager.raw()`` or ``cursor.execute()``) can now use the "
"\"pyformat\" parameter style, where placeholders in the query are given as "
"``'%(name)s'`` and the parameters are passed as a dictionary rather than a "
"list (except on SQLite). This has long been possible (but not officially "
"supported) on MySQL and PostgreSQL, and is now also available on Oracle."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:364
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 20%. This backwards compatible change will not affect existing "
"passwords or users who have subclassed "
"``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to change the default "
"value. Passwords :ref:`will be upgraded <password-upgrades>` to use the new "
"iteration count as necessary."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:374
msgid "Backwards incompatible changes in 1.6"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:378
msgid ""
"In addition to the changes outlined in this section, be sure to review the "
":ref:`deprecation plan <deprecation-removed-in-1.6>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:385
msgid "New transaction management model"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:388
msgid "Behavior changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:390
msgid ""
"Database-level autocommit is enabled by default in Django 1.6. While this "
"doesn't change the general spirit of Django's transaction management, there "
"are a few backwards-incompatibilities."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:395
msgid "Savepoints and ``assertNumQueries``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:397
msgid ""
"The changes in transaction management may result in additional statements to"
" create, release or rollback savepoints. This is more likely to happen with "
"SQLite, since it didn't support savepoints until this release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:401
msgid ""
"If tests using :meth:`~django.test.TransactionTestCase.assertNumQueries` "
"fail because of a higher number of queries than expected, check that the "
"extra queries are related to savepoints, and adjust the expected number of "
"queries accordingly."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:407
msgid "Autocommit option for PostgreSQL"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:409
msgid ""
"In previous versions, database-level autocommit was only an option for "
"PostgreSQL, and it was disabled by default. This option is now ignored and "
"can be removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:416
msgid "New test runner"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:418
msgid ""
"In order to maintain greater consistency with Python's unittest module, the "
"new test runner (``django.test.runner.DiscoverRunner``) does not "
"automatically support some types of tests that were supported by the "
"previous runner:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:422
msgid ""
"Tests in ``models.py`` and ``tests/__init__.py`` files will no longer be "
"found and run. Move them to a file whose name begins with ``test``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:425
msgid ""
"Doctests will no longer be automatically discovered. To integrate doctests "
"in your test suite, follow the :ref:`recommendations in the Python "
"documentation <doctest-unittest-api>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:429
msgid ""
"Django bundles a modified version of the :mod:`doctest` module from the "
"Python standard library (in ``django.test._doctest``) and includes some "
"additional doctest utilities. These utilities are deprecated and will be "
"removed in Django 1.8; doctest suites should be updated to work with the "
"standard library's doctest module (or converted to unittest-compatible "
"tests)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:435
msgid ""
"If you wish to delay updates to your test suite, you can set your "
":setting:`TEST_RUNNER` setting to "
"``django.test.simple.DjangoTestSuiteRunner`` to fully restore the old test "
"behavior. ``DjangoTestSuiteRunner`` is deprecated but will not be removed "
"from Django until version 1.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:441
msgid ""
"Removal of ``django.contrib.gis.tests.GeoDjangoTestSuiteRunner`` GeoDjango "
"custom test runner"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:443
msgid ""
"This is for developers working on the GeoDjango application itself and "
"related to the item above about changes in the test runners:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:446
msgid ""
"The ``django.contrib.gis.tests.GeoDjangoTestSuiteRunner`` test runner has "
"been removed and the standalone GeoDjango tests execution setup it "
"implemented isn't supported anymore. To run the GeoDjango tests simply use "
"the new ``DiscoverRunner`` and specify the ``django.contrib.gis`` app."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:452
msgid "Custom User models in tests"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:454
msgid ""
"The introduction of the new test runner has also slightly changed the way "
"that test models are imported. As a result, any test that overrides "
"``AUTH_USER_MODEL`` to test behavior with one of Django's test user models ("
" ``django.contrib.auth.tests.custom_user.CustomUser`` and "
"``django.contrib.auth.tests.custom_user.ExtensionUser``) must now explicitly"
" import the User model in your test module::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:468
msgid ""
"This import forces the custom user model to be registered. Without this "
"import, the test will be unable to swap in the custom user model, and you "
"will get an error reporting::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:475
msgid "Time zone-aware ``day``, ``month``, and ``week_day`` lookups"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:477
msgid ""
"Django 1.6 introduces time zone support for :lookup:`day`, :lookup:`month`, "
"and :lookup:`week_day` lookups when :setting:`USE_TZ` is ``True``. These "
"lookups were previously performed in UTC regardless of the current time "
"zone."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:481
msgid ""
"This requires :ref:`time zone definitions in the database <database-time-"
"zone-definitions>`. If you're using SQLite, you must install pytz_. If "
"you're using MySQL, you must install pytz_ and load the time zone tables "
"with `mysql_tzinfo_to_sql`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:490
msgid "Addition of ``QuerySet.datetimes()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:492
msgid ""
"When the :doc:`time zone support </topics/i18n/timezones>` added in Django "
"1.4 was active, :meth:`QuerySet.dates() "
"<django.db.models.query.QuerySet.dates>` lookups returned unexpected "
"results, because the aggregation was performed in UTC. To fix this, Django "
"1.6 introduces a new API, :meth:`QuerySet.datetimes() "
"<django.db.models.query.QuerySet.datetimes>`. This requires a few changes in"
" your code."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:500
msgid "``QuerySet.dates()`` returns ``date`` objects"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:502
msgid ""
":meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` now returns"
" a list of :class:`~datetime.date`. It used to return a list of "
":class:`~datetime.datetime`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:506
msgid ""
":meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>` "
"returns a list of :class:`~datetime.datetime`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:510
msgid "``QuerySet.dates()`` no longer usable on ``DateTimeField``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:512
msgid ""
":meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` raises an "
"error if it's used on :class:`~django.db.models.DateTimeField` when time "
"zone support is active. Use :meth:`QuerySet.datetimes() "
"<django.db.models.query.QuerySet.datetimes>` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:518
msgid "``date_hierarchy`` requires time zone definitions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:520
msgid ""
"The :attr:`~django.contrib.admin.ModelAdmin.date_hierarchy` feature of the "
"admin now relies on :meth:`QuerySet.datetimes() "
"<django.db.models.query.QuerySet.datetimes>` when it's used on a "
":class:`~django.db.models.DateTimeField`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:525
msgid ""
"This requires time zone definitions in the database when :setting:`USE_TZ` "
"is ``True``. :ref:`Learn more <database-time-zone-definitions>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:529
msgid "``date_list`` in generic views requires time zone definitions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:531
msgid ""
"For the same reason, accessing ``date_list`` in the context of a date-based "
"generic view requires time zone definitions in the database when the view is"
" based on a :class:`~django.db.models.DateTimeField` and :setting:`USE_TZ` "
"is ``True``. :ref:`Learn more <database-time-zone-definitions>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:537
msgid "New lookups may clash with model fields"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:539
msgid ""
"Django 1.6 introduces ``hour``, ``minute``, and ``second`` lookups on "
":class:`~django.db.models.DateTimeField`. If you had model fields called "
"``hour``, ``minute``, or ``second``, the new lookups will clash with you "
"field names. Append an explicit :lookup:`exact` lookup if this is an issue."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:545
msgid "``BooleanField`` no longer defaults to ``False``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:547
msgid ""
"When a :class:`~django.db.models.BooleanField` doesn't have an explicit "
":attr:`~django.db.models.Field.default`, the implicit default value is "
"``None``. In previous version of Django, it was ``False``, but that didn't "
"represent accurately the lack of a value."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:552
msgid ""
"Code that relies on the default value being ``False`` may raise an exception"
" when saving new model instances to the database, because ``None`` isn't an "
"acceptable value for a :class:`~django.db.models.BooleanField`. You should "
"either specify ``default=False`` in the field definition, or ensure the "
"field is set to ``True`` or ``False`` before saving the object."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:559
msgid "Translations and comments in templates"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:562
msgid "Extraction of translations after comments"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:564
msgid ""
"Extraction of translatable literals from templates with the "
":djadmin:`makemessages` command now correctly detects i18n constructs when "
"they are located after a ``{#`` / ``#}``-type comment on the same line. "
"E.g.:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:573
msgid "Location of translator comments"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:575
msgid ""
":ref:`translator-comments-in-templates` specified using ``{#`` / ``#}`` need"
" to be at the end of a line. If they are not, the comments are ignored and "
":djadmin:`makemessages` will generate a warning. For example:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:586
msgid "Quoting in ``reverse()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:588
msgid ""
"When reversing URLs, Django didn't apply :func:`~django.utils.http.urlquote`"
" to arguments before interpolating them in URL patterns. This bug is fixed "
"in Django 1.6. If you worked around this bug by applying URL quoting before "
"passing arguments to ``reverse()``, this may result in double-quoting. If "
"this happens, simply remove the URL quoting from your code. You will also "
"have to replace special characters in URLs used in "
":func:`~django.test.SimpleTestCase.assertRedirects` with their encoded "
"versions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:598
msgid "Storage of IP addresses in the comments app"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:600
msgid ""
"The comments app now uses a ``GenericIPAddressField`` for storing "
"commenters' IP addresses, to support comments submitted from IPv6 addresses."
" Until now, it stored them in an ``IPAddressField``, which is only meant to "
"support IPv4. When saving a comment made from an IPv6 address, the address "
"would be silently truncated on MySQL databases, and raise an exception on "
"Oracle. You will need to change the column type in your database to benefit "
"from this change."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:608
msgid "For MySQL, execute this query on your project's database:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:614
msgid "For Oracle, execute this query:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:620
msgid ""
"If you do not apply this change, the behavior is unchanged: on MySQL, IPv6 "
"addresses are silently truncated; on Oracle, an exception is generated. No "
"database change is needed for SQLite or PostgreSQL databases."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:625
msgid "Percent literals in ``cursor.execute`` queries"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:627
msgid ""
"When you are running raw SQL queries through the :ref:`cursor.execute "
"<executing-custom-sql>` method, the rule about doubling percent literals "
"(``%``) inside the query has been unified. Past behavior depended on the "
"database backend. Now, across all backends, you only need to double literal "
"percent characters if you are also providing replacement parameters. For "
"example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:640
msgid "``SQLite`` users need to check and update such queries."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:645
msgid "Help text of model form fields for ManyToManyField fields"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:647
msgid ""
"HTML rendering of model form fields corresponding to "
":class:`~django.db.models.ManyToManyField` model fields used to get the "
"hard-coded sentence:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:651
msgid "*Hold down \"Control\", or \"Command\" on a Mac, to select more than one.*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:653
msgid ""
"(or its translation to the active locale) imposed as the help legend shown "
"along them if neither :attr:`model <django.db.models.Field.help_text>` nor "
":attr:`form <django.forms.Field.help_text>` ``help_text`` attributes were "
"specified by the user (or this string was appended to any ``help_text`` that"
" was provided)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:658
msgid ""
"Since this happened at the model layer, there was no way to prevent the text"
" from appearing in cases where it wasn't applicable such as form fields that"
" implement user interactions that don't involve a keyboard and/or a mouse."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:662
msgid ""
"Starting with Django 1.6, as an ad-hoc temporary backward-compatibility "
"provision, the logic to add the \"Hold down...\" sentence has been moved to "
"the model form field layer and modified to add the text only when the "
"associated widget is :class:`~django.forms.SelectMultiple` or selected "
"subclasses."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:667
msgid ""
"The change can affect you in a backward incompatible way if you employ "
"custom model form fields and/or widgets for ``ManyToManyField`` model fields"
" whose UIs do rely on the automatic provision of the mentioned hard-coded "
"sentence. These form field implementations need to adapt to the new scenario"
" by providing their own handling of the ``help_text`` attribute."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:673
msgid ""
"Applications that use Django :doc:`model form </topics/forms/modelforms>` "
"facilities together with Django built-in form :doc:`fields "
"</ref/forms/fields>` and :doc:`widgets </ref/forms/widgets>` aren't affected"
" but need to be aware of what's described in :ref:`m2m-help_text-"
"deprecation` below."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:679
msgid "QuerySet iteration"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:681
msgid ""
"The ``QuerySet`` iteration was changed to immediately convert all fetched "
"rows to ``Model`` objects. In Django 1.5 and earlier the fetched rows were "
"converted to ``Model`` objects in chunks of 100."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:685
msgid ""
"Existing code will work, but the amount of rows converted to objects might "
"change in certain use cases. Such usages include partially looping over a "
"queryset or any usage which ends up doing ``__bool__`` or ``__contains__``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:690
msgid ""
"Notably most database backends did fetch all the rows in one go already in "
"1.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:693
msgid ""
"It is still possible to convert the fetched rows to ``Model`` objects lazily"
" by using the :meth:`~django.db.models.query.QuerySet.iterator()` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:698
msgid ""
":meth:`BoundField.label_tag<django.forms.BoundField.label_tag>` now includes"
" the form's :attr:`~django.forms.Form.label_suffix`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:700
msgid ""
"This is consistent with how methods like "
":meth:`Form.as_p<django.forms.Form.as_p>` and "
":meth:`Form.as_ul<django.forms.Form.as_ul>` render labels."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:704
msgid "If you manually render ``label_tag`` in your templates:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:710
msgid ""
"you'll want to remove the colon (or whatever other separator you may be "
"using) to avoid duplicating it when upgrading to Django 1.6. The following "
"template in Django 1.6 will render identically to the above template in "
"Django 1.5, except that the colon will appear inside the ``<label>`` "
"element."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:719
msgid "will render something like:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:725
msgid ""
"If you want to keep the current behavior of rendering ``label_tag`` without "
"the ``label_suffix``, instantiate the form ``label_suffix=''``. You can also"
" customize the ``label_suffix`` on a per-field basis using the new "
"``label_suffix`` parameter on :meth:`~django.forms.BoundField.label_tag`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:731
msgid "Admin views ``_changelist_filters`` GET parameter"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:733
msgid ""
"To achieve preserving and restoring list view filters, admin views now pass "
"around the `_changelist_filters` GET parameter. It's important that you "
"account for that change if you have custom admin templates or if your tests "
"rely on the previous URLs. If you want to revert to the original behavior "
"you can set the :attr:`~django.contrib.admin.ModelAdmin.preserve_filters` "
"attribute to ``False``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:741
msgid ""
"``django.contrib.auth`` password reset uses base 64 encoding of ``User`` PK"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:743
msgid ""
"Past versions of Django used base 36 encoding of the ``User`` primary key in"
" the password reset views and URLs "
"(:func:`django.contrib.auth.views.password_reset_confirm`). Base 36 encoding"
" is sufficient if the user primary key is an integer, however, with the "
"introduction of custom user models in Django 1.5, that assumption may no "
"longer be true."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:750
msgid ""
":func:`django.contrib.auth.views.password_reset_confirm` has been modified "
"to take a ``uidb64`` parameter instead of ``uidb36``. If you are reversing "
"this view, for example in a custom ``password_reset_email.html`` template, "
"be sure to update your code."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:755
msgid ""
"A temporary shim for "
":func:`django.contrib.auth.views.password_reset_confirm` that will allow "
"password reset links generated prior to Django 1.6 to continue to work has "
"been added to provide backwards compatibility; this will be removed in "
"Django 1.7. Thus, as long as your site has been running Django 1.6 for more "
"than :setting:`PASSWORD_RESET_TIMEOUT_DAYS`, this change will have no "
"effect. If not (for example, if you upgrade directly from Django 1.5 to "
"Django 1.7), then any password reset links generated before you upgrade to "
"Django 1.7 or later won't work after the upgrade."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:764
msgid ""
"In addition, if you have any custom password reset URLs, you will need to "
"update them by replacing ``uidb36`` with ``uidb64`` and the dash that "
"follows that pattern with a slash. Also add ``_\\-`` to the list of "
"characters that may match the ``uidb64`` pattern."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:769
msgid "For example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:775
#: ../../../../sources/1.10/docs/releases/1.6.txt:923
#: ../../../../sources/1.10/docs/releases/1.9.txt:1252
msgid "becomes::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:781
msgid ""
"You may also want to add the shim to support the old style reset links. "
"Using the example above, you would modify the existing url by replacing "
"``django.contrib.auth.views.password_reset_confirm`` with "
"``django.contrib.auth.views.password_reset_confirm_uidb36`` and also remove "
"the ``name`` argument so it doesn't conflict with the new url::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:790
msgid ""
"You can remove this URL pattern after your app has been deployed with Django"
" 1.6 for :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:794
msgid "Default session serialization switched to JSON"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:796
msgid ""
"Historically, :mod:`django.contrib.sessions` used :mod:`pickle` to serialize"
" session data before storing it in the backend. If you're using the "
":ref:`signed cookie session backend<cookie-session-backend>` and "
":setting:`SECRET_KEY` is known by an attacker (there isn't an inherent "
"vulnerability in Django that would cause it to leak), the attacker could "
"insert a string into his session which, when unpickled, executes arbitrary "
"code on the server. The technique for doing so is simple and easily "
"available on the internet. Although the cookie session storage signs the "
"cookie-stored data to prevent tampering, a :setting:`SECRET_KEY` leak "
"immediately escalates to a remote code execution vulnerability."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:807
msgid ""
"This attack can be mitigated by serializing session data using JSON rather "
"than :mod:`pickle`. To facilitate this, Django 1.5.3 introduced a new "
"setting, :setting:`SESSION_SERIALIZER`, to customize the session "
"serialization format. For backwards compatibility, this setting defaulted to"
" using :mod:`pickle` in Django 1.5.3, but we've changed the default to JSON "
"in 1.6. If you upgrade and switch from pickle to JSON, sessions created "
"before the upgrade will be lost. While JSON serialization does not support "
"all Python objects like :mod:`pickle` does, we highly recommend using JSON-"
"serialized sessions. Be aware of the following when checking your code to "
"determine if JSON serialization will work for your application:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:818
msgid ""
"JSON requires string keys, so you will likely run into problems if you are "
"using non-string keys in ``request.session``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:820
msgid ""
"Setting session expiration by passing ``datetime`` values to "
":meth:`~django.contrib.sessions.backends.base.SessionBase.set_expiry` will "
"not work as ``datetime`` values are not serializable in JSON. You can use "
"integer values instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:825
msgid "See the :ref:`session_serialization` documentation for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:828
msgid "Object Relational Mapper changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:830
msgid ""
"Django 1.6 contains many changes to the ORM. These changes fall mostly in "
"three categories:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:833
msgid ""
"Bug fixes (e.g. proper join clauses for generic relations, query combining, "
"join promotion, and join trimming fixes)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:835
msgid ""
"Preparation for new features. For example the ORM is now internally ready "
"for multicolumn foreign keys."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:837
msgid "General cleanup."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:839
msgid ""
"These changes can result in some compatibility problems. For example, some "
"queries will now generate different table aliases. This can affect "
":meth:`QuerySet.extra() <django.db.models.query.QuerySet.extra>`. In "
"addition some queries will now produce different results. An example is "
":meth:`exclude(condition) <django.db.models.query.QuerySet.exclude>` where "
"the condition is a complex one (referencing multijoins inside :class:`Q "
"objects <django.db.models.Q>`). In many cases the affected queries didn't "
"produce correct results in Django 1.5 but do now. Unfortunately there are "
"also cases that produce different results, but neither Django 1.5 nor 1.6 "
"produce correct results."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:850
msgid "Finally, there have been many changes to the ORM internal APIs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:855
msgid ""
"The ``django.db.models.query.EmptyQuerySet`` can't be instantiated any more "
"- it is only usable as a marker class for checking if "
":meth:`~django.db.models.query.QuerySet.none` has been called: "
"``isinstance(qs.none(), EmptyQuerySet)``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:860
msgid ""
"If your CSS/JavaScript code used to access HTML input widgets by type, you "
"should review it as ``type='text'`` widgets might be now output as "
"``type='email'``, ``type='url'`` or ``type='number'`` depending on their "
"corresponding field type."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:865
msgid ""
"Form field's :attr:`~django.forms.Field.error_messages` that contain a "
"placeholder should now always use a named placeholder (``\"Value '%(value)s'"
" is too big\"`` instead of ``\"Value '%s' is too big\"``). See the "
"corresponding field documentation for details about the names of the "
"placeholders. The changes in 1.6 particularly affect "
":class:`~django.forms.DecimalField` and "
":class:`~django.forms.ModelMultipleChoiceField`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:872
msgid ""
"Some :attr:`~django.forms.Field.error_messages` for "
":class:`~django.forms.IntegerField`, :class:`~django.forms.EmailField`, "
"``IPAddressField``, :class:`~django.forms.GenericIPAddressField`, and "
":class:`~django.forms.SlugField` have been suppressed because they "
"duplicated error messages already provided by validators tied to the fields."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:878
msgid ""
"Due to a change in the form validation workflow, "
":class:`~django.forms.TypedChoiceField` ``coerce`` method should always "
"return a value present in the ``choices`` field attribute. That limitation "
"should be lift again in Django 1.7."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:883
msgid ""
"There have been changes in the way timeouts are handled in cache backends. "
"Explicitly passing in ``timeout=None`` no longer results in using the "
"default timeout. It will now set a non-expiring timeout. Passing 0 into the "
"memcache backend no longer uses the default timeout, and now will set-and-"
"expire-immediately the value."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:889
msgid ""
"The ``django.contrib.flatpages`` app used to set custom HTTP headers for "
"debugging purposes. This functionality was not documented and made caching "
"ineffective so it has been removed, along with its generic implementation, "
"previously available in ``django.core.xheaders``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:894
msgid ""
"The ``XViewMiddleware`` has been moved from ``django.middleware.doc`` to "
"``django.contrib.admindocs.middleware`` because it is an implementation "
"detail of admindocs, proven not to be reusable in general."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:898
msgid ""
":class:`~django.db.models.GenericIPAddressField` will now only allow "
"``blank`` values if ``null`` values are also allowed. Creating a "
"``GenericIPAddressField`` where ``blank`` is allowed but ``null`` is not "
"will trigger a model validation error because ``blank`` values are always "
"stored as ``null``. Previously, storing a ``blank`` value in a field which "
"did not allow ``null`` would cause a database exception at runtime."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:905
msgid ""
"If a ``NoReverseMatch`` exception is raised from a method when rendering a "
"template, it is not silenced. For example, ``{{ obj.view_href }}`` will "
"cause template rendering to fail if ``view_href()`` raises "
"``NoReverseMatch``. There is no change to the :ttag:`{% url %}<url>` tag, it"
" causes template rendering to fail like always when ``NoReverseMatch`` is "
"raised."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:912
msgid ""
":meth:`django.test.Client.logout` now calls "
":meth:`django.contrib.auth.logout` which will send the "
":func:`~django.contrib.auth.signals.user_logged_out` signal."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:916
msgid ""
":ref:`Authentication views <built-in-auth-views>` are now reversed by name, "
"not their locations in ``django.contrib.auth.views``. If you are using the "
"views without a ``name``, you should update your ``urlpatterns`` to use "
":meth:`~django.conf.urls.url` with the ``name`` parameter. For example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:927
msgid ""
":class:`~django.views.generic.base.RedirectView` now has a `pattern_name` "
"attribute which allows it to choose the target by reversing the URL."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:930
msgid ""
"In Django 1.4 and 1.5, a blank string was unintentionally not considered to "
"be a valid password. This meant "
":meth:`~django.contrib.auth.models.User.set_password()` would save a blank "
"password as an unusable password like "
":meth:`~django.contrib.auth.models.User.set_unusable_password()` does, and "
"thus :meth:`~django.contrib.auth.models.User.check_password()` always "
"returned ``False`` for blank passwords. This has been corrected in this "
"release: blank passwords are now valid."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:939
msgid ""
"The admin :attr:`~django.contrib.admin.ModelAdmin.changelist_view` "
"previously accepted a ``pop`` GET parameter to signify it was to be "
"displayed in a popup. This parameter has been renamed to ``_popup`` to be "
"consistent with the rest of the admin views. You should update your custom "
"templates if they use the previous parameter name."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:945
msgid ""
":meth:`~django.core.validators.validate_email` now accepts email addresses "
"with ``localhost`` as the domain."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:948
msgid ""
"The new :option:`makemessages --keep-pot` option prevents deleting the "
"temporary .pot file generated before creating the .po file."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:951
msgid ""
"The undocumented ``django.core.servers.basehttp.WSGIServerException`` has "
"been removed. Use ``socket.error`` provided by the standard library instead."
" This change was also released in Django 1.5.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:955
msgid ""
"The signature of "
":meth:`django.views.generic.base.RedirectView.get_redirect_url` has changed "
"and now accepts positional arguments as well (``*args, **kwargs``). Any "
"unnamed captured group will now be passed to ``get_redirect_url()`` which "
"may result in a ``TypeError`` if you don't update the signature of your "
"custom method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:964
msgid "Features deprecated in 1.6"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:967
msgid "Transaction management APIs"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:969
msgid ""
"Transaction management was completely overhauled in Django 1.6, and the "
"current APIs are deprecated:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:972
msgid "``django.middleware.transaction.TransactionMiddleware``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:973
msgid "``django.db.transaction.autocommit``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:974
msgid "``django.db.transaction.commit_on_success``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:975
msgid "``django.db.transaction.commit_manually``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:976
#: ../../../../sources/1.10/docs/releases/1.8.txt:1733
msgid "the ``TRANSACTIONS_MANAGED`` setting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:979
msgid "``django.contrib.comments``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:981
msgid ""
"Django's comment framework has been deprecated and is no longer supported. "
"It will be available in Django 1.6 and 1.7, and removed in Django 1.8. Most "
"users will be better served with a custom solution, or a hosted product like"
" Disqus__."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:985
msgid ""
"The code formerly known as ``django.contrib.comments`` is `still available "
"in an external repository`__."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:992
msgid "Support for PostgreSQL versions older than 8.4"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:994
msgid ""
"The end of upstream support periods was reached in December 2011 for "
"PostgreSQL 8.2 and in February 2013 for 8.3. As a consequence, Django 1.6 "
"sets 8.4 as the minimum PostgreSQL version it officially supports."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:998
msgid ""
"You're strongly encouraged to use the most recent version of PostgreSQL "
"available, because of performance improvements and to take advantage of the "
"native streaming replication available in PostgreSQL 9.x."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1003
msgid "Changes to :ttag:`cycle` and :ttag:`firstof`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1005
msgid ""
"The template system generally escapes all variables to avoid XSS attacks. "
"However, due to an accident of history, the :ttag:`cycle` and "
":ttag:`firstof` tags render their arguments as-is."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1009
msgid ""
"Django 1.6 starts a process to correct this inconsistency. The ``future`` "
"template library provides alternate implementations of :ttag:`cycle` and "
":ttag:`firstof` that autoescape their inputs. If you're using these tags, "
"you're encouraged to include the following line at the top of your templates"
" to enable the new behavior::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1021
msgid ""
"The tags implementing the old behavior have been deprecated, and in Django "
"1.8, the old behavior will be replaced with the new behavior. To ensure "
"compatibility with future versions of Django, existing templates should be "
"modified to use the ``future`` versions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1026
msgid ""
"If necessary, you can temporarily disable auto-escaping with "
":func:`~django.utils.safestring.mark_safe` or :ttag:`{% autoescape off %} "
"<autoescape>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1031
msgid "``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1033
msgid ""
"``CacheMiddleware`` and ``UpdateCacheMiddleware`` used to provide a way to "
"cache requests only if they weren't made by a logged-in user. This mechanism"
" was largely ineffective because the middleware correctly takes into account"
" the ``Vary: Cookie`` HTTP header, and this header is being set on a variety"
" of occasions, such as:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1039
msgid "accessing the session, or"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1040
msgid "using CSRF protection, which is turned on by default, or"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1041
msgid ""
"using a client-side library which sets cookies, like `Google Analytics`__."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1043
msgid ""
"This makes the cache effectively work on a per-session basis regardless of "
"the ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1049
msgid "``SEND_BROKEN_LINK_EMAILS`` setting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1051
msgid ""
":class:`~django.middleware.common.CommonMiddleware` used to provide basic "
"reporting of broken links by email when ``SEND_BROKEN_LINK_EMAILS`` is set "
"to ``True``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1055
msgid ""
"Because of intractable ordering problems between "
":class:`~django.middleware.common.CommonMiddleware` and "
":class:`~django.middleware.locale.LocaleMiddleware`, this feature was split "
"out into a new middleware: "
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1061
msgid ""
"If you're relying on this feature, you should add "
"``'django.middleware.common.BrokenLinkEmailsMiddleware'`` to your "
":setting:`MIDDLEWARE_CLASSES` setting and remove ``SEND_BROKEN_LINK_EMAILS``"
" from your settings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1067
msgid "``_has_changed`` method on widgets"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1069
msgid ""
"If you defined your own form widgets and defined the ``_has_changed`` method"
" on a widget, you should now define this method on the form field itself."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1073
msgid "``module_name`` model _meta attribute"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1075
msgid ""
"``Model._meta.module_name`` was renamed to ``model_name``. Despite being a "
"private API, it will go through a regular deprecation path."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1079
msgid "``get_(add|change|delete)_permission`` model _meta methods"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1081
msgid ""
"``Model._meta.get_(add|change|delete)_permission`` methods were deprecated. "
"Even if they were not part of the public API they'll also go through a "
"regular deprecation path. You can replace them with "
"``django.contrib.auth.get_permission_codename('action', Model._meta)`` where"
" ``'action'`` is ``'add'``, ``'change'``, or ``'delete'``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1088
msgid "``get_query_set`` and similar methods renamed to ``get_queryset``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1090
msgid ""
"Methods that return a ``QuerySet`` such as ``Manager.get_query_set`` or "
"``ModelAdmin.queryset`` have been renamed to ``get_queryset``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1093
msgid ""
"If you are writing a library that implements, for example, a "
"``Manager.get_query_set`` method, and you need to support old Django "
"versions, you should rename the method and conditionally add an alias with "
"the old name::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1107
msgid ""
"If you are writing a library that needs to call the ``get_queryset`` method "
"and must support old Django versions, you should write::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1115
msgid ""
"In the general case of a custom manager that both implements its own "
"``get_queryset`` method and calls that method, and needs to work with older "
"Django versions, and libraries that have not been updated yet, it is useful "
"to define a ``get_queryset_compat`` method as below and use it internally to"
" your manager::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1136
msgid ""
"This helps to minimize the changes that are needed, but also works correctly"
" in the case of subclasses (such as ``RelatedManagers`` from Django 1.5) "
"which might override either ``get_query_set`` or ``get_queryset``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1142
msgid "``shortcut`` view and URLconf"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1144
msgid ""
"The ``shortcut`` view was moved from ``django.views.defaults`` to "
"``django.contrib.contenttypes.views`` shortly after the 1.0 release, but the"
" old location was never deprecated. This oversight was corrected in Django "
"1.6 and you should now use the new location."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1149
msgid ""
"The URLconf ``django.conf.urls.shortcut`` was also deprecated. If you're "
"including it in an URLconf, simply replace::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1154
msgid "with::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1159
msgid "``ModelForm`` without ``fields`` or ``exclude``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1161
msgid ""
"Previously, if you wanted a :class:`~django.forms.ModelForm` to use all "
"fields on the model, you could simply omit the ``Meta.fields`` attribute, "
"and all fields would be used."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1165
msgid ""
"This can lead to security problems where fields are added to the model and, "
"unintentionally, automatically become editable by end users. In some cases, "
"particular with boolean fields, it is possible for this problem to be "
"completely invisible. This is a form of `Mass assignment vulnerability "
"<https://en.wikipedia.org/wiki/Mass_assignment_vulnerability>`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1171
msgid ""
"For this reason, this behavior is deprecated, and using the ``Meta.exclude``"
" option is strongly discouraged. Instead, all fields that are intended for "
"inclusion in the form should be listed explicitly in the ``fields`` "
"attribute."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1175
msgid ""
"If this security concern really does not apply in your case, there is a "
"shortcut to explicitly indicate that all fields should be used - use the "
"special value ``\"__all__\"`` for the fields attribute::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1184
msgid ""
"If you have custom ``ModelForms`` that only need to be used in the admin, "
"there is another option. The admin has its own methods for defining fields "
"(``fieldsets`` etc.), and so adding a list of fields to the ``ModelForm`` is"
" redundant. Instead, simply omit the ``Meta`` inner class of the "
"``ModelForm``, or omit the ``Meta.model`` attribute. Since the "
"``ModelAdmin`` subclass knows which model it is for, it can add the "
"necessary attributes to derive a functioning ``ModelForm``. This behavior "
"also works for earlier Django versions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1194
msgid "``UpdateView`` and ``CreateView`` without explicit fields"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1196
msgid ""
"The generic views :class:`~django.views.generic.edit.CreateView` and "
":class:`~django.views.generic.edit.UpdateView`, and anything else derived "
"from :class:`~django.views.generic.edit.ModelFormMixin`, are vulnerable to "
"the security problem described in the section above, because they can "
"automatically create a ``ModelForm`` that uses all fields for a model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1202
msgid ""
"For this reason, if you use these views for editing models, you must also "
"supply the ``fields`` attribute (new in Django 1.6), which is a list of "
"model fields and works in the same way as the "
":class:`~django.forms.ModelForm` ``Meta.fields`` attribute. Alternatively, "
"you can set the ``form_class`` attribute to a ``ModelForm`` that explicitly "
"defines the fields to be used. Defining an ``UpdateView`` or ``CreateView`` "
"subclass to be used with a model but without an explicit list of fields is "
"deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1213
msgid ""
"Munging of help text of model form fields for ``ManyToManyField`` fields"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1215
msgid ""
"All special handling of the ``help_text`` attribute of ``ManyToManyField`` "
"model fields performed by standard model or model form fields as described "
"in :ref:`m2m-help_text` above is deprecated and will be removed in Django "
"1.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.txt:1219
msgid ""
"Help text of these fields will need to be handled either by applications, "
"custom form fields or widgets, just like happens with the rest of the model "
"field types."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:3
msgid "Django 1.6.1 release notes"
msgstr "Informacje o wydaniu Django 1.6.1"

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:5
msgid "*December 12, 2013*"
msgstr "*12 grudnia 2013*"

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:7
msgid ""
"This is Django 1.6.1, a bugfix release for Django 1.6. In addition to the "
"bug fixes listed below, translations submitted since the 1.6 release are "
"also included."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:12
msgid "Bug fixes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:14
msgid ""
"Fixed ``BCryptSHA256PasswordHasher`` with py-bcrypt and Python 3 (#21398)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:15
msgid ""
"Fixed a regression that prevented a ``ForeignKey`` with a hidden reverse "
"manager (``related_name`` ending with '+') from being used as a lookup for "
"``prefetch_related`` (#21410)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:18
msgid ""
"Fixed :meth:`Queryset.datetimes<django.db.models.query.QuerySet.datetimes>` "
"raising ``AttributeError`` in some situations (#21432)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:23
msgid ""
"Fixed a regression that prevented editable ``GenericRelation`` subclasses "
"from working in ``ModelForms`` (#21428)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:25
msgid ""
"Added missing ``to_python`` method for ``ModelMultipleChoiceField`` which is"
" required in Django 1.6 to properly detect changes from initial values "
"(#21568)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:28
msgid ""
"Fixed ``django.contrib.humanize`` translations where the unicode sequence "
"for the non-breaking space was returned verbatim (#21415)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:30
msgid ""
"Fixed :djadmin:`loaddata` error when fixture file name contained any dots "
"not related to file extensions (#21457) or when fixture path was relative "
"but located in a subdirectory (#21551)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:33
msgid ""
"Fixed display of inline instances in formsets when parent has 0 for primary "
"key (#21472)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:35
msgid ""
"Fixed a regression where custom querysets for foreign keys were overwritten "
"if ``ModelAdmin`` had ordering set (#21405)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:37
msgid ""
"Removed mention of a feature in the ``--locale``/``-l`` option of the "
"``makemessages`` and ``compilemessages`` commands that never worked as "
"promised: Support of multiple locale names separated by commas. It's still "
"possible to specify multiple locales in one run by using the option multiple"
" times (#21488, #17181)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:42
msgid ""
"Fixed a regression that unnecessarily triggered settings configuration when "
"importing ``get_wsgi_application`` (#21486)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:44
msgid ""
"Fixed test client ``logout()`` method when using the cookie-based session "
"backend (#21448)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:46
msgid ""
"Fixed a crash when a ``GeometryField`` uses a non-geometric widget (#21496)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:47
msgid ""
"Fixed password hash upgrade when changing the iteration count (#21535)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:48
msgid ""
"Fixed a bug in the debug view when the URLconf only contains one element "
"(#21530)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:50
msgid ""
"Re-added missing search result count and reset link in changelist admin view"
" (#21510)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:52
msgid ""
"The current language is no longer saved to the session by "
"``LocaleMiddleware`` on every response, but rather only after a logout "
"(#21473)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:54
msgid ""
"Fixed a crash when executing ``runserver`` on non-English systems and when "
"the formatted date in its output contained non-ASCII characters (#21358)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:56
msgid ""
"Fixed a crash in the debug view after an exception occurred on Python ≥ 3.3 "
"(#21443)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:58
msgid ""
"Fixed a crash in :class:`~django.db.models.ImageField` on some platforms "
"(Homebrew and RHEL6 reported) (#21355)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.1.txt:60
msgid ""
"Fixed a regression when using generic relations in "
"``ModelAdmin.list_filter`` (#21431)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.10.txt:3
msgid "Django 1.6.10 release notes"
msgstr "Informacje o wydaniu Django 1.6.10"

#: ../../../../sources/1.10/docs/releases/1.6.10.txt:7
msgid "Django 1.6.10 fixes several security issues in 1.6.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.10.txt:63
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:63
msgid "Database denial-of-service with ``ModelMultipleChoiceField``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.10.txt:65
#: ../../../../sources/1.10/docs/releases/1.7.3.txt:65
msgid ""
"Given a form that uses ``ModelMultipleChoiceField`` and "
"``show_hidden_initial=True`` (not a documented API), it was possible for a "
"user to cause an unreasonable number of SQL queries by submitting duplicate "
"values for the field's data. The validation logic in "
"``ModelMultipleChoiceField`` now deduplicates submitted values to address "
"this issue."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.11.txt:3
msgid "Django 1.6.11 release notes"
msgstr "Informacje o wydaniu Django 1.6.11"

#: ../../../../sources/1.10/docs/releases/1.6.11.txt:7
msgid "Django 1.6.11 fixes two security issues in 1.6.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.11.txt:10
#: ../../../../sources/1.10/docs/releases/1.7.7.txt:10
msgid "Denial-of-service possibility with ``strip_tags()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.11.txt:12
#: ../../../../sources/1.10/docs/releases/1.7.7.txt:12
msgid ""
"Last year :func:`~django.utils.html.strip_tags`  was changed to work "
"iteratively. The problem is that the size of the input it's processing can "
"increase on each iteration which results in an infinite loop in "
"``strip_tags()``. This issue only affects versions of Python that haven't "
"received  `a bugfix in HTMLParser <https://bugs.python.org/issue20288>`_; "
"namely Python < 2.7.7 and 3.3.5. Some operating system vendors have also "
"backported the fix for the Python bug into their packages of earlier "
"versions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.11.txt:20
#: ../../../../sources/1.10/docs/releases/1.7.7.txt:20
msgid ""
"To remedy this issue, ``strip_tags()`` will now return the original input if"
" it detects the length of the string it's processing increases. Remember "
"that absolutely NO guarantee is provided about the results of "
"``strip_tags()`` being HTML safe. So NEVER mark safe the result of a "
"``strip_tags()`` call without escaping it first, for example with "
":func:`~django.utils.html.escape`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:3
msgid "Django 1.6.2 release notes"
msgstr "Informacje o wydaniu Django 1.6.2"

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:5
msgid "*February 6, 2014*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:7
msgid ""
"This is Django 1.6.2, a bugfix release for Django 1.6. Django 1.6.2 fixes "
"several bugs in 1.6.1:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:10
msgid ""
"Prevented the base geometry object of a prepared geometry to be garbage "
"collected, which could lead to crash Django (:ticket:`21662`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:14
msgid ""
"Fixed a crash when executing the :djadmin:`changepassword` command when the "
"user object representation contained non-ASCII characters (:ticket:`21627`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:18
msgid ""
"The :djadmin:`collectstatic` command will raise an error rather than default"
" to using the current working directory if :setting:`STATIC_ROOT` is not "
"set. Combined with the ``--clear`` option, the previous behavior could wipe "
"anything below the current working directory (:ticket:`21581`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:24
msgid "Fixed mail encoding on Python 3.3.3+ (:ticket:`21093`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:27
msgid ""
"Fixed an issue where when ``settings.DATABASES['default']['AUTOCOMMIT'] = "
"False``, the connection wasn't in autocommit mode but Django pretended it "
"was."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:31
msgid ""
"Fixed a regression in multiple-table inheritance ``exclude()`` queries "
"(:ticket:`21787`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:34
msgid ""
"Added missing items to ``django.utils.timezone.__all__`` (:ticket:`21880`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:37
msgid ""
"Fixed a field misalignment issue with ``select_related()`` and model "
"inheritance (:ticket:`21413`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:41
msgid "Fixed join promotion for negated ``AND`` conditions (:ticket:`21748`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:44
msgid ""
"Oracle database introspection now works with boolean and float fields "
"(:ticket:`19884`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:47
msgid ""
"Fixed an issue where lazy objects weren't actually marked as safe when "
"passed through :func:`~django.utils.safestring.mark_safe` and could end up "
"being double-escaped (:ticket:`21882`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.2.txt:51
msgid ""
"Additionally, Django's vendored version of six, :mod:`django.utils.six` has "
"been upgraded to the latest release (1.5.2)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:3
msgid "Django 1.6.3 release notes"
msgstr "Informacje o wydaniu Django 1.6.3"

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:7
msgid ""
"Django 1.6.3 fixes several bugs in 1.6.2, including three security issues, "
"and makes one backwards-incompatible change:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:110
#: ../../../../sources/1.10/docs/releases/1.7.txt:1251
msgid "``select_for_update()`` requires a transaction"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:112
#: ../../../../sources/1.10/docs/releases/1.7.txt:1253
msgid ""
"Historically, queries that use "
":meth:`~django.db.models.query.QuerySet.select_for_update()` could be "
"executed in autocommit mode, outside of a transaction. Before Django 1.6, "
"Django's automatic transactions mode allowed this to be used to lock records"
" until the next write operation. Django 1.6 introduced database-level "
"autocommit; since then, execution in such a context voids the effect of "
"``select_for_update()``. It is, therefore, assumed now to be an error and "
"raises an exception."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:121
msgid ""
"This change was made because such errors can be caused by including an app "
"which expects global transactions (e.g. :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` set to ``True``), or Django's old autocommit behavior, in "
"a project which runs without them; and further, such errors may manifest as "
"data-corruption bugs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:127
#: ../../../../sources/1.10/docs/releases/1.7.txt:1269
msgid ""
"This change may cause test failures if you use ``select_for_update()`` in a "
"test class which is a subclass of :class:`~django.test.TransactionTestCase` "
"rather than :class:`~django.test.TestCase`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:135
msgid ""
"Content retrieved from the GeoIP library is now properly decoded from its "
"default ``iso-8859-1`` encoding (:ticket:`21996`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:139
msgid ""
"Fixed ``AttributeError`` when using "
":meth:`~django.db.models.query.QuerySet.bulk_create` with ``ForeignObject`` "
"(:ticket:`21566`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:143
msgid ""
"Fixed crash of ``QuerySet``\\s that use ``F() + timedelta()`` when their "
"query was compiled more once (:ticket:`21643`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:147
msgid ""
"Prevented custom ``widget`` class attribute of "
":class:`~django.forms.IntegerField` subclasses from being overwritten by the"
" code in their ``__init__`` method (:ticket:`22245`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:152
#: ../../../../sources/1.10/docs/releases/1.7.txt:915
msgid ""
"Improved :func:`~django.utils.html.strip_tags` accuracy (but it still cannot"
" guarantee an HTML-safe result, as stated in the documentation)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:155
msgid ""
"Fixed a regression in the :mod:`django.contrib.gis` SQL compiler for non-"
"concrete fields (:ticket:`22250`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:158
msgid ""
"Fixed :attr:`ModelAdmin.preserve_filters "
"<django.contrib.admin.ModelAdmin.preserve_filters>` when running a site with"
" a URL prefix (:ticket:`21795`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:162
msgid ""
"Fixed a crash in the ``find_command`` management utility when the ``PATH`` "
"environment variable wasn't set (:ticket:`22256`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:166
msgid "Fixed :djadmin:`changepassword` on Windows (:ticket:`22364`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:169
msgid "Avoided shadowing deadlock exceptions on MySQL (:ticket:`22291`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:172
msgid "Wrapped database exceptions in ``_set_autocommit`` (:ticket:`22321`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:175
msgid ""
"Fixed atomicity when closing a database connection or when the database "
"server disconnects (:ticket:`21239` and :ticket:`21202`)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:178
msgid ""
"Fixed regression in ``prefetch_related`` that caused the related objects "
"query to include an unnecessary join (:ticket:`21760`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.3.txt:182
msgid ""
"Additionally, Django's vendored version of six, :mod:`django.utils.six` has "
"been upgraded to the latest release (1.6.1)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.4.txt:3
msgid "Django 1.6.4 release notes"
msgstr "Informacje o wydaniu Django 1.6.4"

#: ../../../../sources/1.10/docs/releases/1.6.4.txt:7
msgid "Django 1.6.4 fixes several bugs in 1.6.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.4.txt:12
msgid ""
"Added backwards compatibility support for the :mod:`django.contrib.messages`"
" cookie format of Django 1.4 and earlier to facilitate upgrading to 1.6 from"
" 1.4 (:ticket:`22426`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.4.txt:19
msgid ""
"Fixed the ``object_id`` of the ``LogEntry`` that's created after a user "
"password change in the admin (:ticket:`22515`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.5.txt:3
msgid "Django 1.6.5 release notes"
msgstr "Informacje o wydaniu Django 1.6.5"

#: ../../../../sources/1.10/docs/releases/1.6.5.txt:7
msgid "Django 1.6.5 fixes two security issues and several bugs in 1.6.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.5.txt:10
msgid ""
"Issue: Caches may incorrectly be allowed to store and serve private data"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.5.txt:32
msgid "Issue: Malformed redirect URLs from user input not correctly validated"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.5.txt:52
msgid ""
"Made the ``year_lookup_bounds_for_datetime_field`` Oracle backend method "
"Python 3 compatible (:ticket:`22551`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.5.txt:55
msgid ""
"Fixed ``pgettext_lazy`` crash when receiving bytestring content on Python 2 "
"(:ticket:`22565`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.5.txt:58
msgid ""
"Fixed the SQL generated when filtering by a negated ``Q`` object that "
"contains a ``F`` object. (:ticket:`22429`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.5.txt:61
msgid ""
"Avoided overwriting data fetched by ``select_related()`` in certain cases "
"which could cause minor performance regressions (:ticket:`22508`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:3
msgid "Django 1.6.6 release notes"
msgstr "Informacje o wydaniu Django 1.6.6"

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:7
msgid "Django 1.6.6 fixes several security issues and bugs in 1.6.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:54
msgid ""
"In older versions of Django it was possible to reveal any field's data by "
"modifying the \"popup\" and \"to_field\" parameters of the query string on "
"an admin change form page. For example, requesting a URL like "
"``/admin/auth/user/?_popup=1&t=password`` and viewing the page's HTML "
"allowed viewing the password hash of each user. While the admin requires "
"users to have permissions to view the change form pages in the first place, "
"this could leak data if you rely on users having access to view only certain"
" fields on a model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:69
msgid ""
"Corrected email and URL validation to reject a trailing dash "
"(:ticket:`22579`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:72
msgid "Prevented indexes on PostgreSQL virtual fields (:ticket:`22514`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:74
msgid ""
"Prevented edge case where values of FK fields could be initialized with a "
"wrong value when an inline model formset is created for a relationship "
"defined to point to a field other than the PK (:ticket:`13794`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:78
msgid ""
"Restored ``pre_delete``  signals for ``GenericRelation`` cascade deletion "
"(:ticket:`22998`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:81
msgid ""
"Fixed transaction handling when specifying non-default database in "
"``createcachetable`` and ``flush`` (:ticket:`23089`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:84
msgid ""
"Fixed the \"ORA-01843: not a valid month\" errors when using Unicode with "
"older versions of Oracle server (:ticket:`20292`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:87
msgid ""
"Restored bug fix for sending unicode email with Python 2.6.5 and below "
"(:ticket:`19107`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:90
msgid ""
"Prevented ``UnicodeDecodeError`` in ``runserver`` with non-UTF-8 and non-"
"English locale (:ticket:`23265`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:93
msgid ""
"Fixed JavaScript errors while editing multi-geometry objects in the "
"OpenLayers widget (:ticket:`23137`, :ticket:`23293`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.6.txt:96
msgid ""
"Prevented a crash on Python 3 with query strings containing unencoded non-"
"ASCII characters (:ticket:`22996`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.7.txt:3
msgid "Django 1.6.7 release notes"
msgstr "Informacje o wydaniu Django 1.6.7"

#: ../../../../sources/1.10/docs/releases/1.6.7.txt:7
msgid ""
"Django 1.6.7 fixes several bugs in 1.6.6, including a regression related to "
"a security fix in that release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.7.txt:13
msgid ""
"Allowed inherited and m2m fields to be referenced in the admin "
"(:ticket:`23329`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.7.txt:15
msgid ""
"Fixed a crash when using ``QuerySet.defer()`` with ``select_related()`` "
"(:ticket:`23370`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.8.txt:3
msgid "Django 1.6.8 release notes"
msgstr "Informacje o wydaniu Django 1.6.8"

#: ../../../../sources/1.10/docs/releases/1.6.8.txt:7
msgid "Django 1.6.8 fixes a couple regressions in the 1.6.6 security release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.6.9.txt:3
msgid "Django 1.6.9 release notes"
msgstr "Informacje o wydaniu Django 1.6.9"

#: ../../../../sources/1.10/docs/releases/1.6.9.txt:7
msgid "Django 1.6.9 fixes a regression in the 1.6.6 security release."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:3
msgid "Django 1.7 release notes"
msgstr "Informacje o wydaniu Django 1.7"

#: ../../../../sources/1.10/docs/releases/1.7.txt:7
msgid "Welcome to Django 1.7!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:9
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.7>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.7>` "
"you'll want to be aware of when upgrading from Django 1.6 or older versions."
" We've :ref:`begun the deprecation process for some features <deprecated-"
"features-1.7>`, and some features have reached the end of their deprecation "
"process and :ref:`have been removed <removed-features-1.7>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:19
msgid ""
"Django 1.7 requires Python 2.7, 3.2, 3.3, or 3.4. We **highly recommend** "
"and only officially support the latest release of each series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:22
msgid ""
"The Django 1.6 series is the last to support Python 2.6. Django 1.7 is the "
"first release to support Python 3.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:25
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.7 or newer as their "
"default version. If you're still using Python 2.6, however, you'll need to "
"stick to Django 1.6 until you can upgrade your Python version. Per :doc:`our"
" support policy </internals/release-process>`, Django 1.6 will continue to "
"receive security support until the release of Django 1.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:35
msgid "What's new in Django 1.7"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:38
msgid "Schema migrations"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:40
msgid ""
"Django now has built-in support for schema migrations. It allows models to "
"be updated, changed, and deleted by creating migration files that represent "
"the model changes and which can be run on any development, staging or "
"production database."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:45
msgid ""
"Migrations are covered in :doc:`their own "
"documentation</topics/migrations>`, but a few of the key features are:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:48
msgid ""
"``syncdb`` has been deprecated and replaced by ``migrate``. Don't worry - "
"calls to ``syncdb`` will still work as before."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:51
msgid ""
"A new ``makemigrations`` command provides an easy way to autodetect changes "
"to your models and make migrations for them."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:54
msgid ""
"``django.db.models.signals.pre_syncdb`` and "
"``django.db.models.signals.post_syncdb`` have been deprecated, to be "
"replaced by :data:`~django.db.models.signals.pre_migrate` and "
":data:`~django.db.models.signals.post_migrate` respectively. These new "
"signals have slightly different arguments. Check the documentation for "
"details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:61
msgid ""
"The ``allow_syncdb`` method on database routers is now called "
"``allow_migrate``, but still performs the same function. Routers with "
"``allow_syncdb`` methods will still work, but that method name is deprecated"
" and you should change it as soon as possible (nothing more than renaming is"
" required)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:66
msgid ""
"``initial_data`` fixtures are no longer loaded for apps with migrations; if "
"you want to load initial data for an app, we suggest you create a migration "
"for your application and define a "
":class:`~django.db.migrations.operations.RunPython` or "
":class:`~django.db.migrations.operations.RunSQL` operation in the "
"``operations`` section of the migration."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:71
msgid ""
"Test rollback behavior is different for apps with migrations; in particular,"
" Django will no longer emulate rollbacks on non-transactional databases or "
"inside ``TransactionTestCase`` :ref:`unless specifically requested <test-"
"case-serialized-rollback>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:76
msgid ""
"It is not advised to have apps without migrations depend on (have a "
":class:`~django.db.models.ForeignKey` or "
":class:`~django.db.models.ManyToManyField` to) apps with migrations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:83
msgid "App-loading refactor"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:85
msgid ""
"Historically, Django applications were tightly linked to models. A singleton"
" known as the \"app cache\" dealt with both installed applications and "
"models. The models module was used as an identifier for applications in many"
" APIs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:89
msgid ""
"As the concept of :doc:`Django applications </ref/applications>` matured, "
"this code showed some shortcomings. It has been refactored into an \"app "
"registry\" where models modules no longer have a central role and where it's"
" possible to attach configuration data to applications."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:94
msgid "Improvements thus far include:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:96
msgid ""
"Applications can run code at startup, before Django does anything else, with"
" the :meth:`~django.apps.AppConfig.ready` method of their configuration."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:99
msgid ""
"Application labels are assigned correctly to models even when they're "
"defined outside of ``models.py``. You don't have to set "
":attr:`~django.db.models.Options.app_label` explicitly any more."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:103
msgid ""
"It is possible to omit ``models.py`` entirely if an application doesn't have"
" any models."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:106
msgid ""
"Applications can be relabeled with the :attr:`~django.apps.AppConfig.label` "
"attribute of application configurations, to work around label conflicts."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:109
msgid ""
"The name of applications can be customized in the admin with the "
":attr:`~django.apps.AppConfig.verbose_name` of application configurations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:112
msgid ""
"The admin automatically calls :func:`~django.contrib.admin.autodiscover()` "
"when Django starts. You can consequently remove this line from your URLconf."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:116
msgid ""
"Django imports all application configurations and models as soon as it "
"starts, through a deterministic and straightforward process. This should "
"make it easier to diagnose import issues such as import loops."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:121
msgid "New method on Field subclasses"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:123
msgid ""
"To help power both schema migrations and to enable easier addition of "
"composite keys in future releases of Django, the "
":class:`~django.db.models.Field` API now has a new required method: "
"``deconstruct()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:128
msgid "This method takes no arguments, and returns a tuple of four items:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:130
msgid ""
"``name``: The field's attribute name on its parent model, or None if it is "
"not part of a model"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:131
msgid ""
"``path``: A dotted, Python path to the class of this field, including the "
"class name."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:132
msgid "``args``: Positional arguments, as a list"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:133
msgid "``kwargs``: Keyword arguments, as a dict"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:135
msgid ""
"These four values allow any field to be serialized into a file, as well as "
"allowing the field to be copied safely, both essential parts of these new "
"features."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:138
msgid ""
"This change should not affect you unless you write custom Field subclasses; "
"if you do, you may need to reimplement the ``deconstruct()`` method if your "
"subclass changes the method signature of ``__init__`` in any way. If your "
"field just inherits from a built-in Django field and doesn't override "
"``__init__``, no changes are necessary."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:144
msgid ""
"If you do need to override ``deconstruct()``, a good place to start is the "
"built-in Django fields (``django/db/models/fields/__init__.py``) as several "
"fields, including ``DecimalField`` and ``DateField``, override it and show "
"how to call the method on the superclass and simply add or remove extra "
"arguments."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:149
msgid ""
"This also means that all arguments to fields must themselves be "
"serializable; to see what we consider serializable, and to find out how to "
"make your own classes serializable, read the :ref:`migration serialization "
"documentation <migration-serializing>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:155
msgid "Calling custom ``QuerySet`` methods from the ``Manager``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:157
msgid ""
"Historically, the recommended way to make reusable model queries was to "
"create methods on a custom ``Manager`` class. The problem with this approach"
" was that after the first method call, you'd get back a ``QuerySet`` "
"instance and couldn't call additional custom manager methods."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:162
msgid ""
"Though not documented, it was common to work around this issue by creating a"
" custom ``QuerySet`` so that custom methods could be chained; but the "
"solution had a number of drawbacks:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:166
msgid ""
"The custom ``QuerySet`` and its custom methods were lost after the first "
"call to ``values()`` or ``values_list()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:169
msgid ""
"Writing a custom ``Manager`` was still necessary to return the custom "
"``QuerySet`` class and all methods that were desired on the ``Manager`` had "
"to be proxied to the ``QuerySet``. The whole process went against the DRY "
"principle."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:174
msgid ""
"The :meth:`QuerySet.as_manager() "
"<django.db.models.query.QuerySet.as_manager>` class method can now directly "
":ref:`create Manager with QuerySet methods <create-manager-with-queryset-"
"methods>`::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:193
msgid "Using a custom manager when traversing reverse relations"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:195
msgid ""
"It is now possible to :ref:`specify a custom manager <using-custom-reverse-"
"manager>` when traversing a reverse relationship::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:211
msgid "New system check framework"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:213
msgid ""
"We've added a new :doc:`System check framework </ref/checks>` for detecting "
"common problems (like invalid models) and providing hints for resolving "
"those problems. The framework is extensible so you can add your own checks "
"for your own apps and libraries."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:218
msgid ""
"To perform system checks, you use the :djadmin:`check` management command. "
"This command replaces the older ``validate`` management command."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:222
msgid "New ``Prefetch`` object for advanced ``prefetch_related`` operations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:224
msgid ""
"The new :class:`~django.db.models.Prefetch` object allows customizing "
"prefetch operations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:227
msgid ""
"You can specify the ``QuerySet`` used to traverse a given relation or "
"customize the storage location of prefetch results."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:230
msgid ""
"This enables things like filtering prefetched relations, calling "
":meth:`~django.db.models.query.QuerySet.select_related()` from a prefetched "
"relation, or prefetching the same relation multiple times with different "
"querysets. See :meth:`~django.db.models.query.QuerySet.prefetch_related()` "
"for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:237
msgid "Admin shortcuts support time zones"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:239
msgid ""
"The \"today\" and \"now\" shortcuts next to date and time input widgets in "
"the admin are now operating in the :ref:`current time zone <default-current-"
"time-zone>`. Previously, they used the browser time zone, which could result"
" in saving the wrong value when it didn't match the current time zone on the"
" server."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:245
msgid ""
"In addition, the widgets now display a help message when the browser and "
"server time zone are different, to clarify how the value inserted in the "
"field will be interpreted."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:250
msgid "Using database cursors as context managers"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:252
msgid ""
"Prior to Python 2.7, database cursors could be used as a context manager. "
"The specific backend's cursor defined the behavior of the context manager. "
"The behavior of magic method lookups was changed with Python 2.7 and cursors"
" were no longer usable as context managers."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:257
msgid ""
"Django 1.7 allows a cursor to be used as a context manager. That is, the "
"following can be used::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:263
msgid "instead of::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:272
msgid "Custom lookups"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:274
msgid ""
"It is now possible to write custom lookups and transforms for the ORM. "
"Custom lookups work just like Django's built-in lookups (e.g. ``lte``, "
"``icontains``) while transforms are a new concept."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:278
msgid ""
"The :class:`django.db.models.Lookup` class provides a way to add lookup "
"operators for model fields. As an example it is possible to add ``day_lte`` "
"operator for ``DateFields``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:282
msgid ""
"The :class:`django.db.models.Transform` class allows transformations of "
"database values prior to the final lookup. For example it is possible to "
"write a ``year`` transform that extracts year from the field's value. "
"Transforms allow for chaining. After the ``year`` transform has been added "
"to ``DateField`` it is possible to filter on the transformed value, for "
"example ``qs.filter(author__birthdate__year__lte=1981)``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:289
msgid ""
"For more information about both custom lookups and transforms refer to the "
":doc:`custom lookups </howto/custom-lookups>` documentation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:293
msgid "Improvements to ``Form`` error handling"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:296
msgid "``Form.add_error()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:298
msgid "Previously there were two main patterns for handling errors in forms:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:300
msgid ""
"Raising a :exc:`~django.core.exceptions.ValidationError` from within certain"
" functions (e.g. ``Field.clean()``, ``Form.clean_<fieldname>()``, or "
"``Form.clean()`` for non-field errors.)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:304
msgid ""
"Fiddling with ``Form._errors`` when targeting a specific field in "
"``Form.clean()`` or adding errors from outside of a \"clean\" method (e.g. "
"directly from a view)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:308
msgid ""
"Using the former pattern was straightforward since the form can guess from "
"the context (i.e. which method raised the exception) where the errors belong"
" and automatically process them. This remains the canonical way of adding "
"errors when possible. However the latter was fiddly and error-prone, since "
"the burden of handling edge cases fell on the user."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:314
msgid ""
"The new :meth:`~django.forms.Form.add_error()` method allows adding errors "
"to specific form fields from anywhere without having to worry about the "
"details such as creating instances of ``django.forms.utils.ErrorList`` or "
"dealing with ``Form.cleaned_data``. This new API replaces manipulating "
"``Form._errors`` which now becomes a private API."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:320
msgid ""
"See :ref:`validating-fields-with-clean` for an example using "
"``Form.add_error()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:324
msgid "Error metadata"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:326
msgid ""
"The :exc:`~django.core.exceptions.ValidationError` constructor accepts "
"metadata such as error ``code`` or ``params`` which are then available for "
"interpolating into the error message (see :ref:`raising-validation-error` "
"for more details); however, before Django 1.7 those metadata were discarded "
"as soon as the errors were added to :attr:`Form.errors "
"<django.forms.Form.errors>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:332
msgid ""
":attr:`Form.errors <django.forms.Form.errors>` and "
"``django.forms.utils.ErrorList`` now store the ``ValidationError`` instances"
" so these metadata can be retrieved at any time through the new "
":meth:`Form.errors.as_data <django.forms.Form.errors.as_data()>` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:337
msgid ""
"The retrieved ``ValidationError`` instances can then be identified thanks to"
" their error ``code`` which enables things like rewriting the error's "
"message or writing custom logic in a view when a given error is present. It "
"can also be used to serialize the errors in a custom format such as XML."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:342
msgid ""
"The new :meth:`Form.errors.as_json() <django.forms.Form.errors.as_json()>` "
"method is a convenience method which returns error messages along with error"
" codes serialized as JSON. ``as_json()`` uses ``as_data()`` and gives an "
"idea of how the new system could be extended."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:348
msgid "Error containers and backward compatibility"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:350
msgid ""
"Heavy changes to the various error containers were necessary in order to "
"support the features above, specifically :attr:`Form.errors "
"<django.forms.Form.errors>`, ``django.forms.utils.ErrorList``, and the "
"internal storages of :exc:`~django.core.exceptions.ValidationError`. These "
"containers which used to store error strings now store ``ValidationError`` "
"instances and public APIs have been adapted to make this as transparent as "
"possible, but if you've been using private APIs, some of the changes are "
"backwards incompatible; see :ref:`validation-error-constructor-and-internal-"
"storage` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:366
msgid ""
"You can now implement :attr:`~django.contrib.admin.AdminSite.site_header`, "
":attr:`~django.contrib.admin.AdminSite.site_title`, and "
":attr:`~django.contrib.admin.AdminSite.index_title` attributes on a custom "
":class:`~django.contrib.admin.AdminSite` in order to easily change the admin"
" site's page title and header text. No more needing to override templates!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:372
msgid ""
"Buttons in :mod:`django.contrib.admin` now use the ``border-radius`` CSS "
"property for rounded corners rather than GIF background images."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:375
msgid ""
"Some admin templates now have ``app-<app_name>`` and ``model-<model_name>`` "
"classes in their ``<body>`` tag to allow customizing the CSS per app or per "
"model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:379
msgid ""
"The admin changelist cells now have a ``field-<field_name>`` class in the "
"HTML to enable style customizations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:382
msgid ""
"The admin's search fields can now be customized per-request thanks to the "
"new :meth:`django.contrib.admin.ModelAdmin.get_search_fields` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:385
msgid ""
"The :meth:`ModelAdmin.get_fields() "
"<django.contrib.admin.ModelAdmin.get_fields>` method may be overridden to "
"customize the value of :attr:`ModelAdmin.fields "
"<django.contrib.admin.ModelAdmin.fields>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:390
msgid ""
"In addition to the existing ``admin.site.register`` syntax, you can use the "
"new :func:`~django.contrib.admin.register` decorator to register a "
":class:`~django.contrib.admin.ModelAdmin`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:394
msgid ""
"You may specify :meth:`ModelAdmin.list_display_links "
"<django.contrib.admin.ModelAdmin.list_display_links>` ``= None`` to disable "
"links on the change list page grid."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:398
msgid ""
"You may now specify :attr:`ModelAdmin.view_on_site "
"<django.contrib.admin.ModelAdmin.view_on_site>` to control whether or not to"
" display the \"View on site\" link."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:402
msgid ""
"You can specify a descending ordering for a :attr:`ModelAdmin.list_display "
"<django.contrib.admin.ModelAdmin.list_display>` value by prefixing the "
"``admin_order_field`` value with a hyphen."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:406
msgid ""
"The :meth:`ModelAdmin.get_changeform_initial_data() "
"<django.contrib.admin.ModelAdmin.get_changeform_initial_data>` method may be"
" overridden to define custom behavior for setting initial change form data."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:413
msgid ""
"Any ``**kwargs`` passed to "
":meth:`~django.contrib.auth.models.User.email_user()` are passed to the "
"underlying :meth:`~django.core.mail.send_mail()` call."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:417
msgid ""
"The :func:`~django.contrib.auth.decorators.permission_required` decorator "
"can take a list of permissions as well as a single permission."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:420
msgid ""
"You can override the new :meth:`AuthenticationForm.confirm_login_allowed() "
"<django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed>` method"
" to more easily customize the login policy."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:424
msgid ""
":func:`django.contrib.auth.views.password_reset` takes an optional "
"``html_email_template_name`` parameter used to send a multipart HTML email "
"for password resets."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:428
msgid ""
"The :meth:`AbstractBaseUser.get_session_auth_hash() "
"<django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash>` method "
"was added and if your :setting:`AUTH_USER_MODEL` inherits from "
":class:`~django.contrib.auth.models.AbstractBaseUser`, changing a user's "
"password now invalidates old sessions if the "
"``django.contrib.auth.middleware.SessionAuthenticationMiddleware`` is "
"enabled. See :ref:`session-invalidation-on-password-change` for more "
"details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:437
msgid "``django.contrib.formtools``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:439
msgid ""
"Calls to :meth:`WizardView.done() <formtools.wizard.views.WizardView.done>` "
"now include a ``form_dict`` to allow easier access to forms by their step "
"name."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:446
msgid ""
"The default OpenLayers library version included in widgets has been updated "
"from 2.11 to 2.13."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:449
msgid ""
"Prepared geometries now also support the ``crosses``, ``disjoint``, "
"``overlaps``, ``touches`` and ``within`` predicates, if GEOS 3.3 or later is"
" installed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:454
msgid ":mod:`django.contrib.messages`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:456
msgid ""
"The backends for :mod:`django.contrib.messages` that use cookies, will now "
"follow the :setting:`SESSION_COOKIE_SECURE` and "
":setting:`SESSION_COOKIE_HTTPONLY` settings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:460
msgid ""
"The :ref:`messages context processor <message-displaying>` now adds a "
"dictionary of default levels under the name ``DEFAULT_MESSAGE_LEVELS``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:463
msgid ""
":class:`~django.contrib.messages.storage.base.Message` objects now have a "
"``level_tag`` attribute that contains the string representation of the "
"message level."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:468
msgid ":mod:`django.contrib.redirects`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:470
msgid ""
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` has"
" two new attributes "
"(:attr:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_gone_class`"
" and "
":attr:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class`)"
" that specify the types of :class:`~django.http.HttpResponse` instances the "
"middleware returns."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:481
msgid ""
"The ``\"django.contrib.sessions.backends.cached_db\"`` session backend now "
"respects :setting:`SESSION_CACHE_ALIAS`. In previous versions, it always "
"used the `default` cache."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:486
#: ../../../../sources/1.10/docs/releases/1.8.txt:252
msgid ":mod:`django.contrib.sitemaps`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:488
msgid ""
"The :mod:`sitemap framework<django.contrib.sitemaps>` now makes use of "
":attr:`~django.contrib.sitemaps.Sitemap.lastmod` to set a ``Last-Modified`` "
"header in the response. This makes it possible for the "
":class:`~django.middleware.http.ConditionalGetMiddleware` to handle "
"conditional ``GET`` requests for sitemaps which set ``lastmod``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:497
msgid ""
"The new :class:`django.contrib.sites.middleware.CurrentSiteMiddleware` "
"allows setting the current site on each request."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:503
msgid ""
"The :ref:`static files storage classes <staticfiles-storages>` may be "
"subclassed to override the permissions that collected static files and "
"directories receive by setting the "
":attr:`~django.core.files.storage.FileSystemStorage.file_permissions_mode` "
"and "
":attr:`~django.core.files.storage.FileSystemStorage.directory_permissions_mode`"
" parameters. See :djadmin:`collectstatic` for example usage."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:510
msgid ""
"The :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` "
"backend gets a sibling class called "
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` that"
" doesn't use the cache system at all but instead a JSON file called "
"``staticfiles.json`` for storing the mapping between the original file name "
"(e.g. ``css/styles.css``) and the hashed file name (e.g. "
"``css/styles.55e7cbb9ba48.css``). The ``staticfiles.json`` file is created "
"when running the :djadmin:`collectstatic` management command and should be a"
" less expensive alternative for remote storages such as Amazon S3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:520
msgid ""
"See the "
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` docs"
" for more information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:523
msgid ""
":djadmin:`findstatic` now accepts verbosity flag level 2, meaning it will "
"show the relative paths of the directories it searched. See "
":djadmin:`findstatic` for example output."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:528
#: ../../../../sources/1.10/docs/releases/1.9.txt:293
msgid ":mod:`django.contrib.syndication`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:530
msgid ""
"The :class:`~django.utils.feedgenerator.Atom1Feed` syndication feed's "
"``updated`` element now utilizes ``updateddate`` instead of ``pubdate``, "
"allowing the ``published`` element to be included in the feed (which relies "
"on ``pubdate``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:538
msgid ""
"Access to caches configured in :setting:`CACHES` is now available via "
":data:`django.core.cache.caches`. This dict-like object provides a different"
" instance per thread. It supersedes ``django.core.cache.get_cache()`` which "
"is now deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:543
msgid ""
"If you instantiate cache backends directly, be aware that they aren't "
"thread-safe any more, as :data:`django.core.cache.caches` now yields "
"different instances per thread."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:547
msgid ""
"Defining the :setting:`TIMEOUT <CACHES-TIMEOUT>` argument of the "
":setting:`CACHES` setting as ``None`` will set the cache keys as \"non-"
"expiring\" by default. Previously, it was only possible to pass "
"``timeout=None`` to the cache backend's ``set()`` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:553
msgid "Cross Site Request Forgery"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:555
msgid ""
"The :setting:`CSRF_COOKIE_AGE` setting facilitates the use of session-based "
"CSRF cookies."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:559
#: ../../../../sources/1.10/docs/releases/1.8.txt:300
msgid "Email"
msgstr "Adres email"

#: ../../../../sources/1.10/docs/releases/1.7.txt:561
msgid ""
":func:`~django.core.mail.send_mail` now accepts an ``html_message`` "
"parameter for sending a multipart ``text/plain`` and ``text/html`` email."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:563
msgid ""
"The SMTP :class:`~django.core.mail.backends.smtp.EmailBackend` now accepts a"
" ``timeout`` parameter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:569
msgid ""
"File locking on Windows previously depended on the PyWin32 package; if it "
"wasn't installed, file locking failed silently. That dependency has been "
"removed, and file locking is now implemented natively on both Windows and "
"Unix."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:575
msgid "File Uploads"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:577
msgid ""
"The new :attr:`UploadedFile.content_type_extra "
"<django.core.files.uploadedfile.UploadedFile.content_type_extra>` attribute "
"contains extra parameters passed to the ``content-type`` header on a file "
"upload."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:582
msgid ""
"The new :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS` setting controls the "
"file system permissions of directories created during file upload, like "
":setting:`FILE_UPLOAD_PERMISSIONS` does for the files themselves."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:586
msgid ""
"The :attr:`FileField.upload_to <django.db.models.FileField.upload_to>` "
"attribute is now optional. If it is omitted or given ``None`` or an empty "
"string, a subdirectory won't be used for storing the uploaded files."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:590
msgid ""
"Uploaded files are now explicitly closed before the response is delivered to"
" the client. Partially uploaded files are also closed as long as they are "
"named ``file`` in the upload handler."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:594
msgid ""
":meth:`Storage.get_available_name() "
"<django.core.files.storage.Storage.get_available_name>` now appends an "
"underscore plus a random 7 character alphanumeric string (e.g. "
"``\"_x3a1gho\"``), rather than iterating through an underscore followed by a"
" number (e.g. ``\"_1\"``, ``\"_2\"``, etc.) to prevent a denial-of-service "
"attack. This change was also made in the 1.6.6, 1.5.9, and 1.4.14 security "
"releases."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:604
msgid ""
"The ``<label>`` and ``<input>`` tags rendered by "
":class:`~django.forms.RadioSelect` and "
":class:`~django.forms.CheckboxSelectMultiple` when looping over the radio "
"buttons or checkboxes now include ``for`` and ``id`` attributes, "
"respectively. Each radio button or checkbox includes an ``id_for_label`` "
"attribute to output the element's ID."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:611
msgid ""
"The ``<textarea>`` tags rendered by :class:`~django.forms.Textarea` now "
"include a ``maxlength`` attribute if the "
":class:`~django.db.models.TextField` model field has a ``max_length``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:615
msgid ""
":attr:`Field.choices<django.db.models.Field.choices>` now allows you to "
"customize the \"empty choice\" label by including a tuple with an empty "
"string or ``None`` for the key and the custom label as the value. The "
"default blank option ``\"----------\"`` will be omitted in this case."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:620
msgid ""
":class:`~django.forms.MultiValueField` allows optional subfields by setting "
"the ``require_all_fields`` argument to ``False``. The ``required`` attribute"
" for each individual field will be respected, and a new ``incomplete`` "
"validation error will be raised when any required fields are empty."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:625
msgid ""
"The :meth:`~django.forms.Form.clean` method on a form no longer needs to "
"return ``self.cleaned_data``. If it does return a changed dictionary then "
"that will still be used."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:629
msgid ""
"After a temporary regression in Django 1.6, it's now possible again to make "
":class:`~django.forms.TypedChoiceField` ``coerce`` method return an "
"arbitrary value."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:633
msgid ""
":attr:`SelectDateWidget.months <django.forms.SelectDateWidget.months>` can "
"be used to customize the wording of the months displayed in the select "
"widget."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:637
msgid ""
"The ``min_num`` and ``validate_min`` parameters were added to "
":func:`~django.forms.formsets.formset_factory` to allow validating a minimum"
" number of submitted forms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:641
msgid ""
"The metaclasses used by ``Form`` and ``ModelForm`` have been reworked to "
"support more inheritance scenarios. The previous limitation that prevented "
"inheriting from both ``Form`` and ``ModelForm`` simultaneously have been "
"removed as long as ``ModelForm`` appears first in the MRO."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:646
msgid ""
"It's now possible to remove a field from a ``Form`` when subclassing by "
"setting the name to ``None``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:649
msgid ""
"It's now possible to customize the error messages for ``ModelForm``’s "
"``unique``, ``unique_for_date``, and ``unique_together`` constraints. In "
"order to support ``unique_together`` or any other ``NON_FIELD_ERROR``, "
"``ModelForm`` now looks for the ``NON_FIELD_ERROR`` key in the "
"``error_messages`` dictionary of the ``ModelForm``’s inner ``Meta`` class. "
"See :ref:`considerations regarding model's error_messages <considerations-"
"regarding-model-errormessages>` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:660
msgid ""
"The "
":attr:`django.middleware.locale.LocaleMiddleware.response_redirect_class` "
"attribute allows you to customize the redirects issued by the middleware."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:663
msgid ""
"The :class:`~django.middleware.locale.LocaleMiddleware` now stores the "
"user's selected language with the session key ``_language``. This should "
"only be accessed using the "
":data:`~django.utils.translation.LANGUAGE_SESSION_KEY` constant. Previously "
"it was stored with the key ``django_language`` and the "
"``LANGUAGE_SESSION_KEY`` constant did not exist, but keys reserved for "
"Django should start with an underscore. For backwards compatibility "
"``django_language`` is still read from in 1.7. Sessions will be migrated to "
"the new key as they are written."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:672
msgid ""
"The :ttag:`blocktrans` tag now supports a ``trimmed`` option. This option "
"will remove newline characters from the beginning and the end of the content"
" of the ``{% blocktrans %}`` tag, replace any whitespace at the beginning "
"and end of a line and merge all lines into one using a space character to "
"separate them. This is quite useful for indenting the content of a ``{% "
"blocktrans %}`` tag without having the indentation characters end up in the "
"corresponding entry in the PO file, which makes the translation process "
"easier."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:681
msgid ""
"When you run :djadmin:`makemessages` from the root directory of your "
"project, any extracted strings will now be automatically distributed to the "
"proper app or project message file. See :ref:`how-to-create-language-files` "
"for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:686
msgid ""
"The :djadmin:`makemessages` command now always adds the ``--previous`` "
"command line flag to the ``msgmerge`` command, keeping previously translated"
" strings in po files for fuzzy strings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:690
msgid ""
"The following settings to adjust the language cookie options were "
"introduced: :setting:`LANGUAGE_COOKIE_AGE`, "
":setting:`LANGUAGE_COOKIE_DOMAIN` and :setting:`LANGUAGE_COOKIE_PATH`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:694
msgid "Added :doc:`/topics/i18n/formatting` for Esperanto."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:699
msgid ""
"The new :option:`--no-color` option for ``django-admin`` disables the "
"colorization of management command output."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:702
msgid ""
"The new :option:`dumpdata --natural-foreign` and :option:`dumpdata "
"--natural-primary` options, and the new ``use_natural_foreign_keys`` and "
"``use_natural_primary_keys`` arguments for ``serializers.serialize()``, "
"allow the use of natural primary keys when serializing."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:707
msgid ""
"It is no longer necessary to provide the cache table name or the "
"``--database`` option for the :djadmin:`createcachetable` command. Django "
"takes this information from your settings file. If you have configured "
"multiple caches or multiple databases, all cache tables are created."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:712
msgid "The :djadmin:`runserver` command received several improvements:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:714
msgid ""
"On Linux systems, if pyinotify_ is installed, the development server will "
"reload immediately when a file is changed. Previously, it polled the "
"filesystem for changes every second. That caused a small delay before "
"reloads and reduced battery life on laptops."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:721
msgid ""
"In addition, the development server automatically reloads when a translation"
" file is updated, i.e. after running :djadmin:`compilemessages`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:725
msgid ""
"All HTTP requests are logged to the console, including requests for static "
"files or ``favicon.ico`` that used to be filtered out."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:728
msgid ""
"Management commands can now produce syntax colored output under Windows if "
"the ANSICON third-party tool is installed and active."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:731
msgid ""
":djadmin:`collectstatic` command with symlink option is now supported on "
"Windows NT 6 (Windows Vista and newer)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:734
msgid ""
"Initial SQL data now works better if the sqlparse_ Python library is "
"installed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:737
msgid ""
"Note that it's deprecated in favor of the "
":class:`~django.db.migrations.operations.RunSQL` operation of migrations, "
"which benefits from the improved behavior."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:746
msgid ""
"The :meth:`QuerySet.update_or_create() "
"<django.db.models.query.QuerySet.update_or_create>` method was added."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:749
msgid ""
"The new :attr:`~django.db.models.Options.default_permissions` model ``Meta``"
" option allows you to customize (or disable) creation of the default add, "
"change, and delete permissions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:753
msgid ""
"Explicit :class:`~django.db.models.OneToOneField` for :ref:`multi-table-"
"inheritance` are now discovered in abstract classes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:756
msgid ""
"It is now possible to avoid creating a backward relation for "
":class:`~django.db.models.OneToOneField` by setting its "
":attr:`~django.db.models.ForeignKey.related_name` to ``'+'`` or ending it "
"with ``'+'``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:761
msgid ""
":class:`F expressions <django.db.models.F>` support the power operator "
"(``**``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:764
msgid ""
"The ``remove()`` and ``clear()`` methods of the related managers created by "
"``ForeignKey`` and ``GenericForeignKey`` now accept the ``bulk`` keyword "
"argument to control whether or not to perform operations in bulk (i.e. using"
" ``QuerySet.update()``). Defaults to ``True``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:769
msgid ""
"It is now possible to use ``None`` as a query value for the :lookup:`iexact`"
" lookup."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:772
msgid ""
"It is now possible to pass a callable as value for the attribute "
":attr:`~django.db.models.ForeignKey.limit_choices_to` when defining a "
"``ForeignKey`` or ``ManyToManyField``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:776
msgid ""
"Calling :meth:`only() <django.db.models.query.QuerySet.only>` and "
":meth:`defer() <django.db.models.query.QuerySet.defer>` on the result of "
":meth:`QuerySet.values() <django.db.models.query.QuerySet.values>` now "
"raises an error (before that, it would either result in a database error or "
"incorrect data)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:782
msgid ""
"You can use a single list for "
":attr:`~django.db.models.Options.index_together` (rather than a list of "
"lists) when specifying a single set of fields."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:785
msgid ""
"Custom intermediate models having more than one foreign key to any of the "
"models participating in a many-to-many relationship are now permitted, "
"provided you explicitly specify which foreign keys should be used by setting"
" the new :attr:`ManyToManyField.through_fields "
"<django.db.models.ManyToManyField.through_fields>` argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:791
msgid ""
"Assigning a model instance to a non-relation field will now throw an error. "
"Previously this used to work if the field accepted integers as input as it "
"took the primary key."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:795
msgid ""
"Integer fields are now validated against database backend specific min and "
"max values based on their :meth:`internal_type "
"<django.db.models.Field.get_internal_type>`. Previously model field "
"validation didn't prevent values out of their associated column data type "
"range from being saved resulting in an integrity error."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:800
msgid ""
"It is now possible to explicitly "
":meth:`~django.db.models.query.QuerySet.order_by` a relation ``_id`` field "
"by using its attribute name."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:806
msgid ""
"The ``enter`` argument was added to the "
":data:`~django.test.signals.setting_changed` signal."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:809
msgid ""
"The model signals can be now be connected to using a ``str`` of the "
"``'app_label.ModelName'`` form – just like related fields – to lazily "
"reference their senders."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:816
msgid ""
"The :meth:`Context.push() <django.template.Context.push>` method now returns"
" a context manager which automatically calls :meth:`pop() "
"<django.template.Context.pop>` upon exiting the ``with`` statement. "
"Additionally, :meth:`push() <django.template.Context.push>` now accepts "
"parameters that are passed to the ``dict`` constructor used to build the new"
" context level."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:823
msgid ""
"The new :meth:`Context.flatten() <django.template.Context.flatten>` method "
"returns a ``Context``'s stack as one flat dictionary."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:826
msgid ""
"``Context`` objects can now be compared for equality (internally, this uses "
":meth:`Context.flatten() <django.template.Context.flatten>` so the internal "
"structure of each ``Context``'s stack doesn't matter as long as their "
"flattened version is identical)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:831
msgid ""
"The :ttag:`widthratio` template tag now accepts an ``\"as\"`` parameter to "
"capture the result in a variable."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:834
msgid ""
"The :ttag:`include` template tag will now also accept anything with a "
"``render()`` method (such as a ``Template``) as an argument. String "
"arguments will be looked up using "
":func:`~django.template.loader.get_template` as always."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:839
msgid "It is now possible to :ttag:`include` templates recursively."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:841
msgid ""
"Template objects now have an origin attribute set when ``TEMPLATE_DEBUG`` is"
" ``True``. This allows template origins to be inspected and logged outside "
"of the ``django.template`` infrastructure."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:845
msgid ""
"``TypeError`` exceptions are no longer silenced when raised during the "
"rendering of a template."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:848
msgid ""
"The following functions now accept a ``dirs`` parameter which is a list or "
"tuple to override ``TEMPLATE_DIRS``:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:851
#: ../../../../sources/1.10/docs/releases/1.8.txt:1584
msgid ":func:`django.template.loader.get_template()`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:852
#: ../../../../sources/1.10/docs/releases/1.8.txt:1585
msgid ":func:`django.template.loader.select_template()`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:853
#: ../../../../sources/1.10/docs/releases/1.8.txt:1586
msgid ":func:`django.shortcuts.render()`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:856
msgid ""
"The :tfilter:`time` filter now accepts timezone-related :ref:`format "
"specifiers <date-and-time-formatting-specifiers>` ``'e'``, ``'O'`` , ``'T'``"
" and ``'Z'`` and is able to digest :ref:`time-zone-aware "
"<naive_vs_aware_datetimes>` ``datetime`` instances performing the expected "
"rendering."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:862
msgid ""
"The :ttag:`cache` tag will now try to use the cache called "
"\"template_fragments\" if it exists and fall back to using the default cache"
" otherwise. It also now accepts an optional ``using`` keyword argument to "
"control which cache it uses."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:867
msgid ""
"The new :tfilter:`truncatechars_html` filter truncates a string to be no "
"longer than the specified number of characters, taking HTML into account."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:873
msgid ""
"The new :attr:`HttpRequest.scheme <django.http.HttpRequest.scheme>` "
"attribute specifies the scheme of the request (``http`` or ``https`` "
"normally)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:877
msgid ""
"The shortcut :func:`redirect() <django.shortcuts.redirect>` now supports "
"relative URLs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:880
msgid ""
"The new :class:`~django.http.JsonResponse` subclass of "
":class:`~django.http.HttpResponse` helps easily create JSON-encoded "
"responses."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:886
msgid ""
":class:`~django.test.runner.DiscoverRunner` has two new attributes, "
":attr:`~django.test.runner.DiscoverRunner.test_suite` and "
":attr:`~django.test.runner.DiscoverRunner.test_runner`, which facilitate "
"overriding the way tests are collected and run."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:891
msgid ""
"The ``fetch_redirect_response`` argument was added to "
":meth:`~django.test.SimpleTestCase.assertRedirects`. Since the test client "
"can't fetch externals URLs, this allows you to use ``assertRedirects`` with "
"redirects that aren't part of your Django app."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:896
msgid ""
"Correct handling of scheme when making comparisons in "
":meth:`~django.test.SimpleTestCase.assertRedirects`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:899
msgid ""
"The ``secure`` argument was added to all the request methods of "
":class:`~django.test.Client`. If ``True``, the request will be made through "
"HTTPS."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:903
msgid ""
":meth:`~django.test.TransactionTestCase.assertNumQueries` now prints out the"
" list of executed queries if the assertion fails."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:906
msgid ""
"The ``WSGIRequest`` instance generated by the test handler is now attached "
"to the :attr:`django.test.Response.wsgi_request` attribute."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:909
msgid ""
"The database settings for testing have been collected into a dictionary "
"named :setting:`TEST <DATABASE-TEST>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:913
msgid "Utilities"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:921
msgid ""
":class:`~django.core.validators.RegexValidator` now accepts the optional "
":attr:`~django.core.validators.RegexValidator.flags` and Boolean "
":attr:`~django.core.validators.RegexValidator.inverse_match` arguments. The "
":attr:`~django.core.validators.RegexValidator.inverse_match` attribute "
"determines if the :exc:`~django.core.exceptions.ValidationError` should be "
"raised when the regular expression pattern matches (``True``) or does not "
"match (``False``, by default) the provided ``value``. The "
":attr:`~django.core.validators.RegexValidator.flags` attribute sets the "
"flags used when compiling a regular expression string."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:931
msgid ""
":class:`~django.core.validators.URLValidator` now accepts an optional "
"``schemes`` argument which allows customization of the accepted URI schemes "
"(instead of the defaults ``http(s)`` and ``ftp(s)``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:935
msgid ""
":func:`~django.core.validators.validate_email` now accepts addresses with "
"IPv6 literals, like ``example@[2001:db8::1]``, as specified in RFC 5321."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:941
msgid "Backwards incompatible changes in 1.7"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:945
msgid ""
"In addition to the changes outlined in this section, be sure to review the "
":ref:`deprecation plan <deprecation-removed-in-1.7>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:952
msgid "``allow_syncdb`` / ``allow_migrate``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:954
msgid ""
"While Django will still look at ``allow_syncdb`` methods even though they "
"should be renamed to ``allow_migrate``, there is a subtle difference in "
"which models get passed to these methods."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:958
msgid ""
"For apps with migrations, ``allow_migrate`` will now get passed "
":ref:`historical models <historical-models>`, which are special versioned "
"models without custom attributes, methods or managers. Make sure your "
"``allow_migrate`` methods are only referring to fields or other items in "
"``model._meta``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:964
msgid "initial_data"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:966
msgid ""
"Apps with migrations will not load ``initial_data`` fixtures when they have "
"finished migrating. Apps without migrations will continue to load these "
"fixtures during the phase of ``migrate`` which emulates the old ``syncdb`` "
"behavior, but any new apps will not have this support."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:971
msgid ""
"Instead, you are encouraged to load initial data in migrations if you need "
"it (using the ``RunPython`` operation and your model classes); this has the "
"added advantage that your initial data will not need updating every time you"
" change the schema."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:976
msgid ""
"Additionally, like the rest of Django's old ``syncdb`` code, "
"``initial_data`` has been started down the deprecation path and will be "
"removed in Django 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:980
msgid "deconstruct() and serializability"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:982
msgid ""
"Django now requires all Field classes and all of their constructor arguments"
" to be serializable. If you modify the constructor signature in your custom "
"Field in any way, you'll need to implement a deconstruct() method; we've "
"expanded the custom field documentation with :ref:`instructions on "
"implementing this method <custom-field-deconstruct-method>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:988
msgid ""
"The requirement for all field arguments to be :ref:`serializable <migration-"
"serializing>` means that any custom class instances being passed into Field "
"constructors - things like custom Storage subclasses, for instance - need to"
" have a :ref:`deconstruct method defined on them as well <custom-"
"deconstruct-method>`, though Django provides a handy class decorator that "
"will work for most applications."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:996
msgid "App-loading changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:999
msgid "Start-up sequence"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1001
msgid ""
"Django 1.7 loads application configurations and models as soon as it starts."
" While this behavior is more straightforward and is believed to be more "
"robust, regressions cannot be ruled out. See :ref:`applications-"
"troubleshooting` for solutions to some problems you may encounter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1007
msgid "Standalone scripts"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1009
msgid ""
"If you're using Django in a plain Python script — rather than a management "
"command — and you rely on the :envvar:`DJANGO_SETTINGS_MODULE` environment "
"variable, you must now explicitly initialize Django at the beginning of your"
" script with::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1017
msgid "Otherwise, you will hit an ``AppRegistryNotReady`` exception."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1020
msgid "WSGI scripts"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1022
msgid ""
"Until Django 1.3, the recommended way to create a WSGI application was::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1027
msgid "In Django 1.4, support for WSGI was improved and the API changed to::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1032
msgid ""
"If you're still using the former style in your WSGI script, you need to "
"upgrade to the latter, or you will hit an ``AppRegistryNotReady`` exception."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1036
msgid "App registry consistency"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1038
msgid ""
"It is no longer possible to have multiple installed applications with the "
"same label. In previous versions of Django, this didn't always work "
"correctly, but didn't crash outright either."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1042
msgid ""
"If you have two apps with the same label, you should create an "
":class:`~django.apps.AppConfig` for one of them and override its "
":class:`~django.apps.AppConfig.label` there. You should then adjust your "
"code wherever it references this application or its models with the old "
"label."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1047
msgid ""
"It isn't possible to import the same model twice through different paths any"
" more. As of Django 1.6, this may happen only if you're manually putting a "
"directory and a subdirectory on :envvar:`PYTHONPATH`. Refer to the section "
"on the new project layout in the :doc:`1.4 release notes </releases/1.4>` "
"for migration instructions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1053
msgid "You should make sure that:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1055
msgid ""
"All models are defined in applications that are listed in "
":setting:`INSTALLED_APPS` or have an explicit "
":attr:`~django.db.models.Options.app_label`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1059
msgid ""
"Models aren't imported as a side-effect of loading their application. "
"Specifically, you shouldn't import models in the root module of an "
"application nor in the module that define its configuration class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1063
msgid ""
"Django will enforce these requirements as of version 1.9, after a "
"deprecation period."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1067
msgid "Subclassing AppCommand"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1069
msgid ""
"Subclasses of :class:`~django.core.management.AppCommand` must now implement"
" a :meth:`~django.core.management.AppCommand.handle_app_config` method "
"instead of ``handle_app()``. This method receives an "
":class:`~django.apps.AppConfig` instance instead of a models module."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1075
msgid "Introspecting applications"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1077
msgid ""
"Since :setting:`INSTALLED_APPS` now supports application configuration "
"classes in addition to application modules, you should review code that "
"accesses this setting directly and use the app registry "
"(:attr:`django.apps.apps`) instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1081
msgid ""
"The app registry has preserved some features of the old app cache. Even "
"though the app cache was a private API, obsolete methods and arguments will "
"be removed through a standard deprecation path, with the exception of the "
"following changes that take effect immediately:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1086
msgid ""
"``get_model`` raises :exc:`LookupError` instead of returning ``None`` when "
"no model is found."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1089
msgid ""
"The ``only_installed`` argument of ``get_model`` and ``get_models`` no "
"longer exists, nor does the ``seed_cache`` argument of ``get_model``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1093
msgid "Management commands and order of :setting:`INSTALLED_APPS`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1095
msgid ""
"When several applications provide management commands with the same name, "
"Django loads the command from the application that comes first in "
":setting:`INSTALLED_APPS`. Previous versions loaded the command from the "
"application that came last."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1100
msgid ""
"This brings discovery of management commands in line with other parts of "
"Django that rely on the order of :setting:`INSTALLED_APPS`, such as static "
"files, templates, and translations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1107
msgid "``ValidationError`` constructor and internal storage"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1109
msgid ""
"The behavior of the ``ValidationError`` constructor has changed when it "
"receives a container of errors as an argument (e.g. a ``list`` or an "
"``ErrorList``):"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1113
msgid ""
"It converts any strings it finds to instances of ``ValidationError`` before "
"adding them to its internal storage."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1116
msgid ""
"It doesn't store the given container but rather copies its content to its "
"own internal storage; previously the container itself was added to the "
"``ValidationError`` instance and used as internal storage."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1120
msgid ""
"This means that if you access the ``ValidationError`` internal storages, "
"such as ``error_list``; ``error_dict``; or the return value of "
"``update_error_dict()`` you may find instances of ``ValidationError`` where "
"you would have previously found strings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1125
msgid ""
"Also if you directly assigned the return value of ``update_error_dict()`` to"
" ``Form._errors`` you may inadvertently add `list` instances where "
"``ErrorList`` instances are expected. This is a problem because unlike a "
"simple `list`, an ``ErrorList`` knows how to handle instances of "
"``ValidationError``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1131
msgid ""
"Most use-cases that warranted using these private APIs are now covered by "
"the newly introduced :meth:`Form.add_error() "
"<django.forms.Form.add_error()>` method::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1147
msgid ""
"If you need both Django <= 1.6 and 1.7 compatibility you can't use "
":meth:`Form.add_error() <django.forms.Form.add_error()>` since it wasn't "
"available before Django 1.7, but you can use the following workaround to "
"convert any ``list`` into ``ErrorList``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1164
msgid "Behavior of ``LocMemCache`` regarding pickle errors"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1166
msgid ""
"An inconsistency existed in previous versions of Django regarding how pickle"
" errors are handled by different cache backends. "
"``django.core.cache.backends.locmem.LocMemCache`` used to fail silently when"
" such an error occurs, which is inconsistent with other backends and leads "
"to cache-specific errors. This has been fixed in Django 1.7, see "
":ticket:`21200` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1174
msgid "Cache keys are now generated from the request's absolute URL"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1176
msgid ""
"Previous versions of Django generated cache keys using a request's path and "
"query string but not the scheme or host. If a Django application was serving"
" multiple subdomains or domains, cache keys could collide. In Django 1.7, "
"cache keys vary by the absolute URL of the request including scheme, host, "
"path, and query string. For example, the URL portion of a cache key is now "
"generated from ``https://www.example.com/path/to/?key=val`` rather than "
"``/path/to/?key=val``. The cache keys generated by Django 1.7 will be "
"different from the keys generated by older versions of Django. After "
"upgrading to Django 1.7, the first request to any previously cached URL will"
" be a cache miss."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1187
msgid "Passing ``None`` to ``Manager.db_manager()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1189
msgid ""
"In previous versions of Django, it was possible to use "
"``db_manager(using=None)`` on a model manager instance to obtain a manager "
"instance using default routing behavior, overriding any manually specified "
"database routing. In Django 1.7, a value of ``None`` passed to db_manager "
"will produce a router that *retains* any manually assigned database routing "
"-- the manager will *not* be reset. This was necessary to resolve an "
"inconsistency in the way routing information cascaded over joins. See "
":ticket:`13724` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1199
msgid "pytz may be required"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1201
msgid ""
"If your project handles datetimes before 1970 or after 2037 and Django "
"raises a :exc:`ValueError` when encountering them, you will have to install "
"pytz_. You may be affected by this problem if you use Django's time zone-"
"related date formats or :mod:`django.contrib.syndication`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1209
msgid "``remove()`` and ``clear()`` methods of related managers"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1211
msgid ""
"The ``remove()`` and ``clear()`` methods of the related managers created by "
"``ForeignKey``, ``GenericForeignKey``, and ``ManyToManyField`` suffered from"
" a number of issues. Some operations ran multiple data modifying queries "
"without wrapping them in a transaction, and some operations didn't respect "
"default filtering when it was present (i.e. when the default manager on the "
"related model implemented a custom ``get_queryset()``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1218
msgid "Fixing the issues introduced some backward incompatible changes:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1220
msgid ""
"The default implementation of ``remove()`` for ``ForeignKey`` related "
"managers changed from a series of ``Model.save()`` calls to a single "
"``QuerySet.update()`` call. The change means that ``pre_save`` and "
"``post_save`` signals aren't sent anymore. You can use the ``bulk=False`` "
"keyword argument to revert to the previous behavior."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1226
msgid ""
"The ``remove()`` and ``clear()`` methods for ``GenericForeignKey`` related "
"managers now perform bulk delete. The ``Model.delete()`` method isn't called"
" on each instance anymore. You can use the ``bulk=False`` keyword argument "
"to revert to the previous behavior."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1231
msgid ""
"The ``remove()`` and ``clear()`` methods for ``ManyToManyField`` related "
"managers perform nested queries when filtering is involved, which may or may"
" not be an issue depending on your database and your data itself. See "
":ref:`this note <nested-queries-performance>` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1237
msgid "Admin login redirection strategy"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1239
msgid ""
"Historically, the Django admin site passed the request from an unauthorized "
"or unauthenticated user directly to the login view, without HTTP "
"redirection. In Django 1.7, this behavior changed to conform to a more "
"traditional workflow where any unauthorized request to an admin page will be"
" redirected (by HTTP status code 302) to the login page, with the ``next`` "
"parameter set to the referring path. The user will be redirected there after"
" a successful login."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1246
msgid ""
"Note also that the admin login form has been updated to not contain the "
"``this_is_the_login_form`` field (now unused) and the ``ValidationError`` "
"code has been set to the more regular ``invalid_login`` key."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1262
msgid ""
"This change was made because such errors can be caused by including an app "
"which expects global transactions (e.g. :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` set to ``True``), or Django's old autocommit behavior, in "
"a project which runs without them; and further, such errors may manifest as "
"data-corruption bugs. It was also made in Django 1.6.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1275
msgid "Contrib middleware removed from default :setting:`MIDDLEWARE_CLASSES`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1277
msgid ""
"The :ref:`app-loading refactor <app-loading-refactor-17-release-note>` "
"deprecated using models from apps which are not part of the "
":setting:`INSTALLED_APPS` setting. This exposed an incompatibility between "
"the default :setting:`INSTALLED_APPS` and :setting:`MIDDLEWARE_CLASSES` in "
"the global defaults (``django.conf.global_settings``). To bring these "
"settings in sync and prevent deprecation warnings when doing things like "
"testing reusable apps with minimal settings, "
":class:`~django.contrib.sessions.middleware.SessionMiddleware`, "
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware`, and "
":class:`~django.contrib.messages.middleware.MessageMiddleware` were removed "
"from the defaults. These classes will still be included in the default "
"settings generated by :djadmin:`startproject`. Most projects will not be "
"affected by this change but if you were not previously declaring the "
":setting:`MIDDLEWARE_CLASSES` in your project settings and relying on the "
"global default you should ensure that the new defaults are in line with your"
" project's needs. You should also check for any code that accesses "
"``django.conf.global_settings.MIDDLEWARE_CLASSES`` directly."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1298
msgid ""
"The :meth:`django.core.files.uploadhandler.FileUploadHandler.new_file()` "
"method is now passed an additional ``content_type_extra`` parameter. If you "
"have a custom :class:`~django.core.files.uploadhandler.FileUploadHandler` "
"that implements ``new_file()``, be sure it accepts this new parameter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1303
msgid ""
":class:`ModelFormSet<django.forms.models.BaseModelFormSet>`\\s no longer "
"delete instances when ``save(commit=False)`` is called. See "
":attr:`~django.forms.formsets.BaseFormSet.can_delete` for instructions on "
"how to manually delete objects from deleted forms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1308
msgid ""
"Loading empty fixtures emits a ``RuntimeWarning`` rather than raising "
":exc:`~django.core.management.CommandError`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1311
msgid ""
":func:`django.contrib.staticfiles.views.serve` will now raise an "
":exc:`~django.http.Http404` exception instead of "
":exc:`~django.core.exceptions.ImproperlyConfigured` when :setting:`DEBUG` is"
" ``False``. This change removes the need to conditionally add the view to "
"your root URLconf, which in turn makes it safe to reverse by name. It also "
"removes the ability for visitors to generate spurious HTTP 500 errors by "
"requesting static files that don't exist or haven't been collected yet."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1319
msgid ""
"The :meth:`django.db.models.Model.__eq__` method is now defined in a way "
"where instances of a proxy model and its base model are considered equal "
"when primary keys match. Previously only instances of exact same class were "
"considered equal on primary key match."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1324
msgid ""
"The :meth:`django.db.models.Model.__eq__` method has changed such that two "
"``Model`` instances without primary key values won't be considered equal "
"(unless they are the same instance)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1328
msgid ""
"The :meth:`django.db.models.Model.__hash__` method will now raise "
"``TypeError`` when called on an instance without a primary key value. This "
"is done to avoid mutable ``__hash__`` values in containers."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1332
msgid ""
":class:`~django.db.models.AutoField` columns in SQLite databases will now be"
" created using the ``AUTOINCREMENT`` option, which guarantees monotonic "
"increments. This will cause primary key numbering behavior to change on "
"SQLite, becoming consistent with most other SQL databases. This will only "
"apply to newly created tables. If you have a database created with an older "
"version of Django, you will need to migrate it to take advantage of this "
"feature. For example, you could do the following:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1340
msgid "Use :djadmin:`dumpdata` to save your data."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1341
msgid "Rename the existing database file (keep it as a backup)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1342
msgid "Run :djadmin:`migrate` to create the updated schema."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1343
msgid "Use :djadmin:`loaddata` to import the fixtures you exported in (1)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1345
msgid ""
"``django.contrib.auth.models.AbstractUser`` no longer defines a "
":meth:`~django.db.models.Model.get_absolute_url()` method. The old "
"definition returned  ``\"/users/%s/\" % urlquote(self.username)`` which was "
"arbitrary since applications may or may not define such a url in "
"``urlpatterns``. Define a ``get_absolute_url()`` method on your own custom "
"user object or use :setting:`ABSOLUTE_URL_OVERRIDES` if you want a URL for "
"your user."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1352
msgid ""
"The static asset-serving functionality of the "
":class:`django.test.LiveServerTestCase` class has been simplified: Now it's "
"only able to serve content already present in :setting:`STATIC_ROOT` when "
"tests are run. The ability to transparently serve all the static assets "
"(similarly to what one gets with :setting:`DEBUG = True <DEBUG>` at "
"development-time) has been moved to a new class that lives in the "
"``staticfiles`` application (the one actually in charge of such feature): "
":class:`django.contrib.staticfiles.testing.StaticLiveServerTestCase`. In "
"other words, ``LiveServerTestCase`` itself is less powerful but at the same "
"time has less magic."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1363
msgid ""
"Rationale behind this is removal of dependency of non-contrib code on "
"contrib applications."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1366
msgid ""
"The old cache URI syntax (e.g. ``\"locmem://\"``) is no longer supported. It"
" still worked, even though it was not documented or officially supported. If"
" you're still using it, please update to the current :setting:`CACHES` "
"syntax."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1370
msgid ""
"The default ordering of ``Form`` fields in case of inheritance has changed "
"to follow normal Python MRO. Fields are now discovered by iterating through "
"the MRO in reverse with the topmost class coming last. This only affects you"
" if you relied on the default field ordering while having fields defined on "
"both the current class *and* on a parent ``Form``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1376
msgid ""
"The ``required`` argument of :class:`~django.forms.SelectDateWidget` has "
"been removed. This widget now respects the form field's ``is_required`` "
"attribute like other widgets."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1381
msgid ""
"``Widget.is_hidden`` is now a read-only property, getting its value by "
"introspecting the presence of ``input_type == 'hidden'``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1384
msgid ""
":meth:`~django.db.models.query.QuerySet.select_related` now chains in the "
"same way as other similar calls like ``prefetch_related``. That is, "
"``select_related('foo', 'bar')`` is equivalent to "
"``select_related('foo').select_related('bar')``. Previously the latter would"
" have been equivalent to ``select_related('bar')``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1390
msgid "GeoDjango dropped support for GEOS < 3.1."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1392
msgid ""
"The ``init_connection_state`` method of database backends now executes in "
"autocommit mode (unless you set :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` "
"to ``False``). If you maintain a custom database backend, you should check "
"that method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1397
msgid ""
"The ``django.db.backends.BaseDatabaseFeatures.allows_primary_key_0`` "
"attribute has been renamed to ``allows_auto_pk_0`` to better describe it. "
"It's ``True`` for all database backends included with Django except MySQL "
"which does allow primary keys with value 0. It only forbids *autoincrement* "
"primary keys with value 0."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1403
msgid ""
"Shadowing model fields defined in a parent model has been forbidden as this "
"creates ambiguity in the expected model behavior. In addition, clashing "
"fields in the model inheritance hierarchy result in a system check error. "
"For example, if you use multi-inheritance, you need to define custom primary"
" key fields on parent models, otherwise the default ``id`` fields will "
"clash. See :ref:`model-multiple-inheritance-topic` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1410
msgid ""
"``django.utils.translation.parse_accept_lang_header()`` now returns "
"lowercase locales, instead of the case as it was provided. As locales should"
" be treated case-insensitive this allows us to speed up locale detection."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1414
msgid ""
"``django.utils.translation.get_language_from_path()`` and "
"``django.utils.translation.trans_real.get_supported_language_variant()`` now"
" no longer have a ``supported`` argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1418
msgid ""
"The ``shortcut`` view in ``django.contrib.contenttypes.views`` now supports "
"protocol-relative URLs (e.g. ``//example.com``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1421
msgid ""
":class:`~django.contrib.contenttypes.fields.GenericRelation` now supports an"
" optional ``related_query_name`` argument. Setting ``related_query_name`` "
"adds a relation from the related object back to the content type for "
"filtering, ordering and other query operations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1426
msgid ""
"When running tests on PostgreSQL, the :setting:`USER` will need read access "
"to the built-in ``postgres`` database. This is in lieu of the previous "
"behavior of connecting to the actual non-test database."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1430
msgid ""
"As part of the :doc:`System check framework </ref/checks>`, :ref:`fields, "
"models, and model managers <field-checking>` all implement a ``check()`` "
"method that is registered with the check framework. If you have an existing "
"method called ``check()`` on one of these objects, you will need to rename "
"it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1435
msgid ""
"As noted above in the \"Cache\" section of \"Minor Features\", defining the "
":setting:`TIMEOUT <CACHES-TIMEOUT>` argument of the :setting:`CACHES` "
"setting as ``None`` will set the cache keys as \"non-expiring\". Previously,"
" with the memcache backend, a :setting:`TIMEOUT <CACHES-TIMEOUT>` of ``0`` "
"would set non-expiring keys, but this was inconsistent with the set-and-"
"expire (i.e. no caching) behavior of ``set(\"key\", \"value\", timeout=0)``."
" If you want non-expiring keys, please update your settings to use ``None`` "
"instead of ``0`` as the latter now designates set-and-expire in the settings"
" as well."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1445
msgid ""
"The ``sql*`` management commands now respect the ``allow_migrate()`` method "
"of :setting:`DATABASE_ROUTERS`. If you have models synced to non-default "
"databases, use the ``--database`` flag to get SQL for those models "
"(previously they would always be included in the output)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1450
msgid ""
"Decoding the query string from URLs now falls back to the ISO-8859-1 "
"encoding when the input is not valid UTF-8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1453
msgid ""
"With the addition of the "
"``django.contrib.auth.middleware.SessionAuthenticationMiddleware`` to the "
"default project template (pre-1.7.2 only), a database must be created before"
" accessing a page using :djadmin:`runserver`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1458
msgid ""
"The addition of the ``schemes`` argument to ``URLValidator`` will appear as "
"a backwards-incompatible change if you were previously using a custom "
"regular expression to validate schemes. Any scheme not listed in ``schemes``"
" will fail validation, even if the regular expression matches the given URL."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1466
msgid "Features deprecated in 1.7"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1469
msgid "``django.core.cache.get_cache``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1471
msgid ""
"``django.core.cache.get_cache`` has been supplanted by "
":data:`django.core.cache.caches`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1475
msgid "``django.utils.dictconfig``/``django.utils.importlib``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1477
msgid ""
"``django.utils.dictconfig`` and ``django.utils.importlib`` were copies of "
"respectively :mod:`logging.config` and :mod:`importlib` provided for Python "
"versions prior to 2.7. They have been deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1482
msgid "``django.utils.module_loading.import_by_path``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1484
msgid ""
"The current ``django.utils.module_loading.import_by_path`` function catches "
"``AttributeError``, ``ImportError``, and ``ValueError`` exceptions, and re-"
"raises :exc:`~django.core.exceptions.ImproperlyConfigured`. Such exception "
"masking makes it needlessly hard to diagnose circular import problems, "
"because it makes it look like the problem comes from inside Django. It has "
"been deprecated in favor of "
":meth:`~django.utils.module_loading.import_string`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1493
msgid "``django.utils.tzinfo``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1495
msgid ""
"``django.utils.tzinfo`` provided two :class:`~datetime.tzinfo` subclasses, "
"``LocalTimezone`` and ``FixedOffset``. They've been deprecated in favor of "
"more correct alternatives provided by :mod:`django.utils.timezone`, "
":func:`django.utils.timezone.get_default_timezone` and "
":func:`django.utils.timezone.get_fixed_timezone`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1502
msgid "``django.utils.unittest``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1504
msgid ""
"``django.utils.unittest`` provided uniform access to the ``unittest2`` "
"library on all Python versions. Since ``unittest2`` became the standard "
"library's :mod:`unittest` module in Python 2.7, and Django 1.7 drops support"
" for older Python versions, this module isn't useful anymore. It has been "
"deprecated. Use :mod:`unittest` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1511
msgid "``django.utils.datastructures.SortedDict``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1513
msgid ""
"As :class:`~collections.OrderedDict` was added to the standard library in "
"Python 2.7, ``SortedDict`` is no longer needed and has been deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1516
msgid ""
"The two additional, deprecated methods provided by ``SortedDict`` "
"(``insert()`` and ``value_for_index()``) have been removed. If you relied on"
" these methods to alter structures like form fields, you should now treat "
"these ``OrderedDict``\\s as immutable objects and override them to change "
"their content."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1521
msgid ""
"For example, you might want to override ``MyFormClass.base_fields`` "
"(although this attribute isn't considered a public API) to change the "
"ordering of fields for all ``MyFormClass`` instances; or similarly, you "
"could override ``self.fields`` from inside ``MyFormClass.__init__()``, to "
"change the fields for a particular form instance. For example (from Django "
"itself)::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1533
msgid "Custom SQL location for models package"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1535
msgid ""
"Previously, if models were organized in a package (``myapp/models/``) rather"
" than simply ``myapp/models.py``, Django would look for initial SQL data in "
"``myapp/models/sql/``. This bug has been fixed so that Django will search "
"``myapp/sql/`` as documented. After this issue was fixed, migrations were "
"added which deprecates initial SQL data. Thus, while this change still "
"exists, the deprecation is irrelevant as the entire feature will be removed "
"in Django 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1544
msgid "Reorganization of ``django.contrib.sites``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1546
msgid ""
"``django.contrib.sites`` provides reduced functionality when it isn't in "
":setting:`INSTALLED_APPS`. The app-loading refactor adds some constraints in"
" that situation. As a consequence, two objects were moved, and the old "
"locations are deprecated:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1551
msgid ""
":class:`~django.contrib.sites.requests.RequestSite` now lives in "
"``django.contrib.sites.requests``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1553
msgid ""
":func:`~django.contrib.sites.shortcuts.get_current_site` now lives in "
"``django.contrib.sites.shortcuts``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1557
msgid "``declared_fieldsets`` attribute on ``ModelAdmin``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1559
msgid ""
"``ModelAdmin.declared_fieldsets`` has been deprecated. Despite being a "
"private API, it will go through a regular deprecation path. This attribute "
"was mostly used by methods that bypassed ``ModelAdmin.get_fieldsets()`` but "
"this was considered a bug and has been addressed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1565
msgid "Reorganization of ``django.contrib.contenttypes``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1567
msgid ""
"Since ``django.contrib.contenttypes.generic`` defined both admin and model "
"related objects, an import of this module could trigger unexpected side "
"effects. As a consequence, its contents were split into "
":mod:`~django.contrib.contenttypes` submodules and the "
"``django.contrib.contenttypes.generic`` module is deprecated:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1572
msgid ""
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` and "
":class:`~django.contrib.contenttypes.fields.GenericRelation` now live in "
":mod:`~django.contrib.contenttypes.fields`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1575
msgid ""
":class:`~django.contrib.contenttypes.forms.BaseGenericInlineFormSet` and "
":func:`~django.contrib.contenttypes.forms.generic_inlineformset_factory` now"
" live in :mod:`~django.contrib.contenttypes.forms`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1578
msgid ""
":class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin`, "
":class:`~django.contrib.contenttypes.admin.GenericStackedInline` and "
":class:`~django.contrib.contenttypes.admin.GenericTabularInline` now live in"
" :mod:`~django.contrib.contenttypes.admin`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1584
msgid "``syncdb``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1586
msgid ""
"The ``syncdb`` command has been deprecated in favor of the new "
":djadmin:`migrate` command. ``migrate`` takes the same arguments as "
"``syncdb`` used to plus a few more, so it's safe to just change the name "
"you're calling and nothing else."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1591
msgid "``util`` modules renamed to ``utils``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1593
msgid ""
"The following instances of ``util.py`` in the Django codebase have been "
"renamed to ``utils.py`` in an effort to unify all util and utils references:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1596
#: ../../../../sources/1.10/docs/releases/1.9.txt:1453
msgid "``django.contrib.admin.util``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1597
#: ../../../../sources/1.10/docs/releases/1.9.txt:1454
msgid "``django.contrib.gis.db.backends.util``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1598
#: ../../../../sources/1.10/docs/releases/1.9.txt:1455
msgid "``django.db.backends.util``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1599
#: ../../../../sources/1.10/docs/releases/1.9.txt:1456
msgid "``django.forms.util``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1602
msgid "``get_formsets`` method on ``ModelAdmin``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1604
msgid ""
"``ModelAdmin.get_formsets`` has been deprecated in favor of the new "
":meth:`~django.contrib.admin.ModelAdmin.get_formsets_with_inlines`, in order"
" to better handle the case of selectively showing inlines on a "
"``ModelAdmin``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1611
msgid ""
"The ``django.db.models.IPAddressField`` and ``django.forms.IPAddressField`` "
"fields have been deprecated in favor of "
":class:`django.db.models.GenericIPAddressField` and "
":class:`django.forms.GenericIPAddressField`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1617
msgid "``BaseMemcachedCache._get_memcache_timeout`` method"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1619
msgid ""
"The ``BaseMemcachedCache._get_memcache_timeout()`` method has been renamed "
"to ``get_backend_timeout()``. Despite being a private API, it will go "
"through the normal deprecation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1624
msgid "Natural key serialization options"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1626
msgid ""
"The ``--natural`` and ``-n`` options for :djadmin:`dumpdata` have been "
"deprecated. Use :option:`dumpdata --natural-foreign` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1629
msgid ""
"Similarly, the ``use_natural_keys`` argument for ``serializers.serialize()``"
" has been deprecated. Use ``use_natural_foreign_keys`` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1633
msgid "Merging of ``POST`` and ``GET`` arguments into ``WSGIRequest.REQUEST``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1635
msgid ""
"It was already strongly suggested that you use ``GET`` and ``POST`` instead "
"of ``REQUEST``, because the former are more explicit. The property "
"``REQUEST`` is deprecated and will be removed in Django 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1640
msgid "``django.utils.datastructures.MergeDict`` class"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1642
msgid ""
"``MergeDict`` exists primarily to support merging ``POST`` and ``GET`` "
"arguments into a ``REQUEST`` property on ``WSGIRequest``. To merge "
"dictionaries, use ``dict.update()`` instead. The class ``MergeDict`` is "
"deprecated and will be removed in Django 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1648
msgid "Language codes ``zh-cn``, ``zh-tw`` and ``fy-nl``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1650
msgid ""
"The currently used language codes for Simplified Chinese ``zh-cn``, "
"Traditional Chinese ``zh-tw`` and (Western) Frysian ``fy-nl`` are deprecated"
" and should be replaced by the language codes ``zh-hans``, ``zh-hant`` and "
"``fy`` respectively. If you use these language codes, you should rename the "
"locale directories and update your settings to reflect these changes. The "
"deprecated language codes will be removed in Django 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1658
msgid "``django.utils.functional.memoize`` function"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1660
msgid ""
"The function ``memoize`` is deprecated and should be replaced by the "
"``functools.lru_cache`` decorator (available from Python 3.2 onwards)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1663
msgid ""
"Django ships a backport of this decorator for older Python versions and it's"
" available at ``django.utils.lru_cache.lru_cache``. The deprecated function "
"will be removed in Django 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1668
msgid "Geo Sitemaps"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1670
msgid ""
"Google has retired support for the Geo Sitemaps format. Hence Django support"
" for Geo Sitemaps is deprecated and will be removed in Django 1.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1674
msgid "Passing callable arguments to queryset methods"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1676
msgid ""
"Callable arguments for querysets were an undocumented feature that was "
"unreliable. It's been deprecated and will be removed in Django 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1679
msgid ""
"Callable arguments were evaluated when a queryset was constructed rather "
"than when it was evaluated, thus this feature didn't offer any benefit "
"compared to evaluating arguments before passing them to queryset and created"
" confusion that the arguments may have been evaluated at query time."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1685
msgid "``ADMIN_FOR`` setting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1687
msgid ""
"The ``ADMIN_FOR`` feature, part of the admindocs, has been removed. You can "
"remove the setting from your configuration at your convenience."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1691
msgid "``SplitDateTimeWidget`` with ``DateTimeField``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1693
msgid ""
"``SplitDateTimeWidget`` support in :class:`~django.forms.DateTimeField` is "
"deprecated, use ``SplitDateTimeWidget`` with "
":class:`~django.forms.SplitDateTimeField` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1698
msgid "``validate``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1700
msgid ""
"The ``validate`` management command is deprecated in favor of the "
":djadmin:`check` command."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1704
msgid "``django.core.management.BaseCommand``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1706
msgid ""
"``requires_model_validation`` is deprecated in favor of a new "
"``requires_system_checks`` flag. If the latter flag is missing, then the "
"value of the former flag is used. Defining both ``requires_system_checks`` "
"and ``requires_model_validation`` results in an error."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1711
msgid "The ``check()`` method has replaced the old ``validate()`` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1714
msgid "``ModelAdmin`` validators"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1716
msgid ""
"The ``ModelAdmin.validator_class`` and ``default_validator_class`` "
"attributes are deprecated in favor of the new ``checks_class`` attribute."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1719
msgid ""
"The ``ModelAdmin.validate()`` method is deprecated in favor of "
"``ModelAdmin.check()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1722
msgid "The ``django.contrib.admin.validation`` module is deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1725
msgid "``django.db.backends.DatabaseValidation.validate_field``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1727
msgid ""
"This method is deprecated in favor of a new ``check_field`` method. The "
"functionality required by ``check_field()`` is the same as that provided by "
"``validate_field()``, but the output format is different. Third-party "
"database backends needing this functionality should provide an "
"implementation of ``check_field()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1734
msgid "Loading ``ssi`` and ``url`` template tags from ``future`` library"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1736
msgid ""
"Django 1.3 introduced ``{% load ssi from future %}`` and ``{% load url from "
"future %}`` syntax for forward compatibility of the ``ssi`` and :ttag:`url` "
"template tags. This syntax is now deprecated and will be removed in Django "
"1.9. You can simply remove the ``{% load ... from future %}`` tags."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1743
msgid "``django.utils.text.javascript_quote``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1745
msgid ""
"``javascript_quote()`` was an undocumented function present in "
"``django.utils.text``. It was used internally in the "
":ref:`javascript_catalog view <javascript_catalog-view>` whose "
"implementation was changed to make use of ``json.dumps()`` instead. If you "
"were relying on this function to provide safe output from untrusted strings,"
" you should use ``django.utils.html.escapejs`` or the :tfilter:`escapejs` "
"template filter. If all you need is to generate valid JavaScript strings, "
"you can simply use ``json.dumps()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1755
msgid "``fix_ampersands`` utils method and template filter"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1757
msgid ""
"The ``django.utils.html.fix_ampersands`` method and the ``fix_ampersands`` "
"template filter are deprecated, as the escaping of ampersands is already "
"taken care of by Django's standard HTML escaping features. Combining this "
"with ``fix_ampersands`` would either result in double escaping, or, if the "
"output is assumed to be safe, a risk of introducing XSS vulnerabilities. "
"Along with ``fix_ampersands``, ``django.utils.html.clean_html`` is "
"deprecated, an undocumented function that calls ``fix_ampersands``. As this "
"is an accelerated deprecation, ``fix_ampersands`` and ``clean_html`` will be"
" removed in Django 1.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1768
msgid "Reorganization of database test settings"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1770
msgid ""
"All database settings with a ``TEST_`` prefix have been deprecated in favor "
"of entries in a :setting:`TEST <DATABASE-TEST>` dictionary in the database "
"settings. The old settings will be supported until Django 1.9. For backwards"
" compatibility with older versions of Django, you can define both versions "
"of the settings as long as they match."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1777
msgid "FastCGI support"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1779
msgid ""
"FastCGI support via the ``runfcgi`` management command will be removed in "
"Django 1.9. Please deploy your project using WSGI."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1783
msgid "Moved objects in ``contrib.sites``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1785
msgid ""
"Following the app-loading refactor, two objects in "
"``django.contrib.sites.models`` needed to be moved because they must be "
"available without importing ``django.contrib.sites.models`` when "
"``django.contrib.sites`` isn't installed. Import ``RequestSite`` from "
"``django.contrib.sites.requests`` and ``get_current_site()`` from "
"``django.contrib.sites.shortcuts``. The old import locations will work until"
" Django 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1794
msgid "``django.forms.forms.get_declared_fields()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1796
msgid ""
"Django no longer uses this functional internally. Even though it's a private"
" API, it'll go through the normal deprecation cycle."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1800
msgid "Private Query Lookup APIs"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1802
msgid ""
"Private APIs ``django.db.models.sql.where.WhereNode.make_atom()`` and "
"``django.db.models.sql.where.Constraint`` are deprecated in favor of the new"
" :doc:`custom lookups API </ref/models/lookups>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1809
msgid "Features removed in 1.7"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1811
msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 1.7. See :ref:`deprecated-features-1.5` for details, "
"including how to remove usage of these features."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1815
msgid "``django.utils.simplejson`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1817
msgid "``django.utils.itercompat.product`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1819
msgid ""
"INSTALLED_APPS and TEMPLATE_DIRS are no longer corrected from a plain string"
" into a tuple."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1822
msgid ""
":class:`~django.http.HttpResponse`, "
":class:`~django.template.response.SimpleTemplateResponse`, "
":class:`~django.template.response.TemplateResponse`, "
"``render_to_response()``, :func:`~django.contrib.sitemaps.views.index`, and "
":func:`~django.contrib.sitemaps.views.sitemap` no longer take a ``mimetype``"
" argument"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1829
msgid ""
":class:`~django.http.HttpResponse` immediately consumes its content if it's "
"an iterator."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1832
msgid ""
"The ``AUTH_PROFILE_MODULE`` setting, and the ``get_profile()`` method on the"
" User model are removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1835
msgid "The ``cleanup`` management command is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1837
msgid "The ``daily_cleanup.py`` script is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1839
msgid ""
":meth:`~django.db.models.query.QuerySet.select_related` no longer has a "
"``depth`` keyword argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1842
msgid ""
"The ``get_warnings_state()``/``restore_warnings_state()`` functions from "
":mod:`django.test.utils` and the ``save_warnings_state()``/ "
"``restore_warnings_state()`` :ref:`django.test.*TestCase <django-testcase-"
"subclasses>` are removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1847
msgid ""
"The ``check_for_test_cookie`` method in "
":class:`~django.contrib.auth.forms.AuthenticationForm` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1850
msgid ""
"The version of :func:`django.contrib.auth.views.password_reset_confirm` that"
" supports base36 encoded user IDs "
"(``django.contrib.auth.views.password_reset_confirm_uidb36``) is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.txt:1854
msgid "The ``django.utils.encoding.StrAndUnicode`` mix-in is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:3
msgid "Django 1.7.1 release notes"
msgstr "Informacje o wydaniu Django 1.7.1"

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:7
msgid "Django 1.7.1 fixes several bugs in 1.7."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:15
msgid ""
"Added a more helpful error message if you try to migrate an app without "
"first creating the ``contenttypes`` table (:ticket:`22411`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:18
msgid ""
"Modified migrations dependency algorithm to avoid possible infinite "
"recursion."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:20
msgid ""
"Fixed a ``UnicodeDecodeError`` when the ``flush`` error message contained "
"Unicode characters (:ticket:`22882`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:23
msgid ""
"Reinstated missing ``CHECK`` SQL clauses which were omitted on some backends"
" when not using migrations (:ticket:`23416`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:26
msgid ""
"Fixed serialization of ``type`` objects in migrations (:ticket:`22951`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:30
msgid ""
"The ``@deconstructible`` decorator now fails with a ``ValueError`` if the "
"decorated object cannot automatically be imported (:ticket:`23418`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:33
msgid ""
"Fixed a typo in an ``inlineformset_factory()`` error message that caused a "
"crash (:ticket:`23451`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:36
msgid ""
"Restored the ability to use :setting:`ABSOLUTE_URL_OVERRIDES` with the "
"``'auth.User'`` model (:ticket:`11775`). As a side effect, the setting now "
"adds a ``get_absolute_url()`` method to any model that appears in "
"``ABSOLUTE_URL_OVERRIDES`` but doesn't define ``get_absolute_url()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:41
msgid ""
"Avoided masking some `ImportError` exceptions during application loading "
"(:ticket:`22920`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:44
msgid ""
"Empty ``index_together`` or ``unique_together`` model options no longer "
"results in infinite migrations (:ticket:`23452`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:47
msgid ""
"Fixed crash in ``contrib.sitemaps`` if ``lastmod`` returned a ``date`` "
"rather than a ``datetime`` (:ticket:`23403`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:50
msgid ""
"Allowed migrations to work with ``app_label``\\s that have the same last "
"part (e.g. ``django.contrib.auth`` and ``vendor.auth``) (:ticket:`23483`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:53
msgid "Restored the ability to deepcopy ``F`` objects (:ticket:`23492`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:55
msgid ""
"Formats for Welsh (``cy``) and several Chinese locales (``zh_CN``, "
"``zh_Hans``, ``zh_Hant`` and ``zh_TW``) have been added. Formats for "
"Macedonian have been fixed (trailing dot removed, :ticket:`23532`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:59
msgid ""
"Added quoting of constraint names in the SQL generated by migrations to "
"prevent crash with uppercase characters in the name (:ticket:`23065`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:62
msgid ""
"Fixed renaming of models with a self-referential many-to-many field "
"(``ManyToManyField('self')``) (:ticket:`23503`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:65
msgid ""
"Added the :meth:`~django.contrib.admin.InlineModelAdmin.get_extra()`, "
":meth:`~django.contrib.admin.InlineModelAdmin.get_max_num()`, and "
":meth:`~django.contrib.admin.InlineModelAdmin.get_min_num()` hooks to "
":class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin` "
"(:ticket:`23539`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:71
msgid ""
"Made ``migrations.RunSQL`` no longer require percent sign escaping. This is "
"now consistent with ``cursor.execute()`` (:ticket:`23426`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:74
msgid ""
"Made the :setting:`SERIALIZE <TEST_SERIALIZE>` entry in the :setting:`TEST "
"<DATABASE-TEST>` dictionary usable (:ticket:`23421`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:77
msgid ""
"Fixed bug in migrations that prevented foreign key constraints to unmanaged "
"models with a custom primary key (:ticket:`23415`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:80
msgid ""
"Added ``SchemaEditor`` for MySQL GIS backend so that spatial indexes will be"
" created for apps with migrations (:ticket:`23538`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:83
msgid ""
"Added ``SchemaEditor`` for Oracle GIS backend so that spatial metadata and "
"indexes will be created for apps with migrations (:ticket:`23537`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:86
msgid ""
"Coerced the ``related_name`` model field option to unicode during migration "
"generation to generate migrations that work with both Python 2 and 3 "
"(:ticket:`23455`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:90
msgid ""
"Fixed ``MigrationWriter`` to handle builtin types without imports "
"(:ticket:`23560`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:93
msgid "Fixed ``deepcopy`` on ``ErrorList`` (:ticket:`23594`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:95
msgid ""
"Made the :mod:`~django.contrib.admindocs` view to browse view details check "
"if the view specified in the URL exists in the URLconf. Previously it was "
"possible to import arbitrary packages from the Python path. This was not "
"considered a security issue because ``admindocs`` is only accessible to "
"staff users (:ticket:`23601`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:101
msgid ""
"Fixed ``UnicodeDecodeError`` crash in ``AdminEmailHandler`` with non-ASCII "
"characters in the request (:ticket:`23593`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:104
msgid ""
"Fixed missing ``get_or_create`` and ``update_or_create`` on related managers"
" causing ``IntegrityError`` (:ticket:`23611`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:107
msgid ""
"Made :func:`~django.utils.http.urlsafe_base64_decode` return the proper type"
" (byte string) on Python 3 (:ticket:`23333`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:110
msgid ""
":djadmin:`makemigrations` can now serialize timezone-aware values "
"(:ticket:`23365`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:113
msgid ""
"Added a prompt to the migrations questioner when removing the null "
"constraint from a field to prevent an IntegrityError on existing NULL rows "
"(:ticket:`23609`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:117
msgid ""
"Fixed generic relations in ``ModelAdmin.list_filter`` (:ticket:`23616`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:119
msgid ""
"Restored RFC compliance for the SMTP backend on Python 3 (:ticket:`23063`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:121
msgid ""
"Fixed a crash while parsing cookies containing invalid content "
"(:ticket:`23638`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:124
msgid ""
"The system check framework now raises error **models.E020** when the class "
"method ``Model.check()`` is unreachable (:ticket:`23615`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:127
msgid ""
"Made the Oracle test database creation drop the test user in the event of an"
" unclean exit of a previous test run (:ticket:`23649`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:130
msgid ""
"Fixed :djadmin:`makemigrations` to detect changes to :attr:`Meta.db_table "
"<django.db.models.Options.db_table>` (:ticket:`23629`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:133
msgid ""
"Fixed a regression when feeding the Django test client with an empty data "
"string (:ticket:`21740`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.1.txt:136
msgid ""
"Fixed a regression in :djadmin:`makemessages` where static files were "
"unexpectedly ignored (:ticket:`23583`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.10.txt:3
msgid "Django 1.7.10 release notes"
msgstr "Informacje o wydaniu Django 1.7.10"

#: ../../../../sources/1.10/docs/releases/1.7.10.txt:7
msgid "Django 1.7.10 fixes a security issue in 1.7.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.11.txt:3
msgid "Django 1.7.11 release notes"
msgstr "Informacje o wydaniu Django 1.7.11"

#: ../../../../sources/1.10/docs/releases/1.7.11.txt:5
#: ../../../../sources/1.10/docs/releases/1.8.7.txt:5
msgid "*November 24, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.11.txt:7
msgid "Django 1.7.11 fixes a security issue and a data loss bug in 1.7.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.11.txt:10
#: ../../../../sources/1.10/docs/releases/1.8.7.txt:13
msgid "Fixed settings leak possibility in ``date`` template filter"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.11.txt:12
#: ../../../../sources/1.10/docs/releases/1.8.7.txt:15
msgid ""
"If an application allows users to specify an unvalidated format for dates "
"and passes this format to the :tfilter:`date` filter, e.g. ``{{ "
"last_updated|date:user_date_format }}``, then a malicious user could obtain "
"any secret in the application's settings by specifying a settings key "
"instead of a date format. e.g. ``\"SECRET_KEY\"`` instead of ``\"j/m/Y\"``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.11.txt:18
#: ../../../../sources/1.10/docs/releases/1.8.7.txt:21
msgid ""
"To remedy this, the underlying function used by the ``date`` template "
"filter, ``django.utils.formats.get_format()``, now only allows accessing the"
" date/time formatting settings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.11.txt:25
#: ../../../../sources/1.10/docs/releases/1.8.7.txt:41
msgid ""
"Fixed a data loss possibility with :class:`~django.db.models.Prefetch` if "
"``to_attr`` is set to a ``ManyToManyField`` (:ticket:`25693`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:3
msgid "Django 1.7.2 release notes"
msgstr "Informacje o wydaniu Django 1.7.2"

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:7
msgid "Django 1.7.2 fixes several bugs in 1.7.1."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:15
msgid ""
"Fixed migration's renaming of auto-created many-to-many tables when changing"
" :attr:`Meta.db_table <django.db.models.Options.db_table>` "
"(:ticket:`23630`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:18
msgid ""
"Fixed a migration crash when adding an explicit ``id`` field to a model on "
"SQLite (:ticket:`23702`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:21
msgid ""
"Added a warning for duplicate models when a module is reloaded. Previously a"
" ``RuntimeError`` was raised every time two models clashed in the app "
"registry. (:ticket:`23621`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:25
msgid ""
"Prevented :djadmin:`flush` from loading initial data for migrated apps "
"(:ticket:`23699`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:28
msgid ""
"Fixed a :djadmin:`makemessages` regression in 1.7.1 when "
":setting:`STATIC_ROOT` has the default ``None`` value (:ticket:`23717`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:31
msgid "Added GeoDjango compatibility with mysqlclient database driver."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:33
msgid ""
"Fixed MySQL 5.6+ crash with ``GeometryField``\\s in migrations "
"(:ticket:`23719`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:36
msgid ""
"Fixed a migration crash when removing a field that is referenced in "
"``AlterIndexTogether`` or ``AlterUniqueTogether`` (:ticket:`23614`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:39
msgid "Updated the first day of the week in the Ukrainian locale to Monday."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:41
msgid ""
"Added support for transactional spatial metadata initialization on "
"SpatiaLite 4.1+ (:ticket:`23152`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:44
msgid ""
"Fixed a migration crash that prevented changing a nullable field with a "
"default to non-nullable with the same default (:ticket:`23738`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:47
msgid ""
"Fixed a migration crash when adding ``GeometryField``\\s with ``blank=True``"
" on PostGIS (:ticket:`23731`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:50
msgid ""
"Allowed usage of ``DateTimeField()`` as ``Transform.output_field`` "
"(:ticket:`23420`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:53
msgid ""
"Fixed a migration serializing bug involving ``float(\"nan\")`` and "
"``float(\"inf\")`` (:ticket:`23770`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:56
msgid ""
"Fixed a regression where custom form fields having a ``queryset`` attribute "
"but no ``limit_choices_to`` could not be used in a "
":class:`~django.forms.ModelForm` (:ticket:`23795`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:60
msgid ""
"Fixed a custom field type validation error with MySQL backend when "
"``db_type`` returned ``None`` (:ticket:`23761`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:63
msgid ""
"Fixed a migration crash when a field is renamed that is part of an "
"``index_together`` (:ticket:`23859`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:66
msgid ""
"Fixed :djadmin:`squashmigrations` to respect the ``--no-optimize`` parameter"
" (:ticket:`23799`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:69
msgid ""
"Made :class:`~django.db.migrations.operations.RenameModel` reversible "
"(:ticket:`22248`)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:72
msgid ""
"Avoided unnecessary rollbacks of migrations from other apps when migrating "
"backwards (:ticket:`23410`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:75
msgid ""
"Fixed a rare query error when using deeply nested subqueries "
"(:ticket:`23605`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:78
msgid ""
"Fixed a crash in migrations when deleting a field that is part of a "
"``index/unique_together`` constraint (:ticket:`23794`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:81
msgid ""
"Fixed ``django.core.files.File.__repr__()`` when the file's ``name`` "
"contains Unicode characters (:ticket:`23888`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:84
msgid ""
"Added missing context to the admin's ``delete_selected`` view that prevented"
" custom site header, etc. from appearing (:ticket:`23898`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:90
msgid ""
"Fixed an infinite loop bug for certain cyclic migration dependencies, and "
"made the error message for cyclic dependencies much more helpful."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:93
msgid ""
"Added missing ``index_together`` handling for SQLite (:ticket:`23880`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:95
msgid ""
"Fixed a crash when ``RunSQL`` SQL content was collected by the schema "
"editor, typically when using ``sqlmigrate`` (:ticket:`23909`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:98
msgid ""
"Fixed a regression in ``contrib.admin`` add/change views which caused some "
"``ModelAdmin`` methods to receive the incorrect ``obj`` value "
"(:ticket:`23934`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:102
msgid ""
"Fixed ``runserver`` crash when socket error message contained Unicode "
"characters (:ticket:`23946`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:105
msgid ""
"Fixed serialization of ``type`` when adding a ``deconstruct()`` method "
"(:ticket:`23950`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:108
msgid ""
"Prevented the "
"``django.contrib.auth.middleware.SessionAuthenticationMiddleware`` from "
"setting a ``\"Vary: Cookie\"`` header on all responses (:ticket:`23939`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:112
msgid ""
"Fixed a crash when adding ``blank=True`` to ``TextField()`` on MySQL "
"(:ticket:`23920`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:115
msgid ""
"Fixed index creation by the migration infrastructure, particularly when "
"dealing with PostgreSQL specific ``{text|varchar}_pattern_ops`` indexes "
"(:ticket:`23954`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:119
msgid ""
"Fixed bug in ``makemigrations`` that created broken migration files when "
"dealing with multiple table inheritance and inheriting from more than one "
"model (:ticket:`23956`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:123
msgid ""
"Fixed a crash when a ``MultiValueField`` has invalid data (:ticket:`23674`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:125
msgid ""
"Fixed a crash in the admin when using \"Save as new\" and also deleting a "
"related inline (:ticket:`23857`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:128
msgid ""
"Always converted ``related_name`` to text (unicode), since that is required "
"on Python 3 for interpolation. Removed conversion of ``related_name`` to "
"text in migration deconstruction (:ticket:`23455` and :ticket:`23982`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:132
msgid ""
"Enlarged the sizes of tablespaces which are created by default for testing "
"on Oracle (the main tablespace was increased from 200M to 300M and the "
"temporary tablespace from 100M to 150M). This was required to accommodate "
"growth in Django's own test suite (:ticket:`23969`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:137
msgid "Fixed ``timesince`` filter translations in Korean (:ticket:`23989`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:139
msgid ""
"Fixed the SQLite ``SchemaEditor`` to properly add defaults in the absence of"
" a user specified ``default``. For example, a ``CharField`` with "
"``blank=True`` didn't set existing rows to an empty string which resulted in"
" a crash when adding the ``NOT NULL`` constraint (:ticket:`23987`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:144
msgid ""
"``makemigrations`` no longer prompts for a default value when adding "
"``TextField()`` or ``CharField()`` without a ``default`` (:ticket:`23405`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:147
msgid ""
"Fixed a migration crash when adding ``order_with_respect_to`` to a table "
"with existing rows (:ticket:`23983`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:150
msgid ""
"Restored the ``pre_migrate`` signal if all apps have migrations "
"(:ticket:`23975`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:153
msgid ""
"Made admin system checks run for custom ``AdminSite``\\s (:ticket:`23497`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:155
msgid ""
"Ensured the app registry is fully populated when unpickling models. When an "
"external script (like a queueing infrastructure) reloads pickled models, it "
"could crash with an ``AppRegistryNotReady`` exception (:ticket:`24007`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:159
msgid ""
"Added quoting to field indexes in the SQL generated by migrations to prevent"
" a crash when the index name requires it (:ticket:`#24015`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:162
msgid ""
"Added ``datetime.time`` support to migrations questioner (:ticket:`23998`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:164
msgid "Fixed admindocs crash on apps installed as eggs (:ticket:`23525`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:166
msgid ""
"Changed migrations autodetector to generate an ``AlterModelOptions`` "
"operation instead of ``DeleteModel`` and ``CreateModel`` operations when "
"changing ``Meta.managed``. This prevents data loss when changing ``managed``"
" from ``False`` to ``True`` and vice versa (:ticket:`24037`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:171
msgid ""
"Enabled the ``sqlsequencereset`` command on apps with migrations "
"(:ticket:`24054`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:174
msgid "Added tablespace SQL to apps with migrations (:ticket:`24051`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:176
msgid ""
"Corrected ``contrib.sites`` default site creation in a multiple database "
"setup (:ticket:`24000`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:179
msgid ""
"Restored support for objects that aren't :class:`str` or :class:`bytes` in "
"``django.utils.safestring.mark_for_escaping()`` on Python 3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:182
msgid ""
"Supported strings escaped by third-party libraries with the ``__html__`` "
"convention in the template engine (:ticket:`23831`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:185
msgid ""
"Prevented extraneous ``DROP DEFAULT`` SQL in migrations (:ticket:`23581`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:187
msgid ""
"Restored the ability to use more than five levels of subqueries "
"(:ticket:`23758`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:190
msgid ""
"Fixed crash when ``ValidationError`` is initialized with a "
"``ValidationError`` that is initialized with a dictionary (:ticket:`24008`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.2.txt:193
msgid ""
"Prevented a crash on apps without migrations when running ``migrate --list``"
" (:ticket:`23366`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.3.txt:3
msgid "Django 1.7.3 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.3.txt:7
msgid "Django 1.7.3 fixes several security issues and bugs in 1.7.2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.3.txt:74
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 25%. This part of the normal major release process was "
"inadvertently omitted in 1.7. This backwards compatible change will not "
"affect users who have subclassed "
"``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to change the default "
"value."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.3.txt:81
msgid ""
"Fixed a crash in the CSRF middleware when handling non-ASCII referer header "
"(:ticket:`23815`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.3.txt:84
msgid ""
"Fixed a crash in the ``django.contrib.auth.redirect_to_login`` view when "
"passing a ``reverse_lazy()`` result on Python 3 (:ticket:`24097`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.3.txt:87
msgid "Added correct formats for Greek (``el``) (:ticket:`23967`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.3.txt:89
msgid ""
"Fixed a migration crash when unapplying a migration where multiple "
"operations interact with the same model (:ticket:`24110`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.4.txt:3
msgid "Django 1.7.4 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.4.txt:7
msgid "Django 1.7.4 fixes several bugs in 1.7.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.4.txt:12
msgid ""
"Fixed a migration crash when unapplying ``contrib.contenttypes``’s or "
"``contrib.auth``’s first migration (:ticket:`24075`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.4.txt:15
msgid ""
"Made the migration's ``RenameModel`` operation rename ``ManyToManyField`` "
"tables (:ticket:`24135`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.4.txt:18
msgid ""
"Fixed a migration crash on MySQL when migrating from a ``OneToOneField`` to "
"a ``ForeignKey`` (:ticket:`24163`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.4.txt:21
msgid ""
"Prevented the ``static.serve`` view from producing ``ResourceWarning``\\s in"
" certain circumstances (security fix regression, :ticket:`24193`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.4.txt:24
msgid ""
"Fixed schema check for ManyToManyField to look for internal type instead of "
"checking class instance, so you can write custom m2m-like fields with the "
"same behavior. (:ticket:`24104`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.5.txt:3
msgid "Django 1.7.5 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.5.txt:5
msgid "*February 25, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.5.txt:7
msgid "Django 1.7.5 fixes several bugs in 1.7.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.5.txt:12
msgid ""
"Reverted a fix that prevented a migration crash when unapplying "
"``contrib.contenttypes``’s or ``contrib.auth``’s first migration "
"(:ticket:`24075`) due to severe impact on the test performance "
"(:ticket:`24251`) and problems in multi-database setups (:ticket:`24298`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.5.txt:17
msgid ""
"Fixed a regression that prevented custom fields inheriting from "
"``ManyToManyField`` from being recognized in migrations (:ticket:`24236`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.5.txt:20
msgid ""
"Fixed crash in ``contrib.sites`` migrations when a default database isn't "
"used (:ticket:`24332`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.5.txt:23
msgid ""
"Added the ability to set the isolation level on PostgreSQL with psycopg2 ≥ "
"2.4.2 (:ticket:`24318`). It was advertised as a new feature in Django 1.6 "
"but it didn't work in practice."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.5.txt:27
msgid "Formats for the Azerbaijani locale (``az``) have been added."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.6.txt:3
msgid "Django 1.7.6 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.6.txt:5
msgid "*March 9, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.6.txt:7
msgid "Django 1.7.6 fixes a security issue and several bugs in 1.7.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.6.txt:10
msgid ""
"Mitigated an XSS attack via properties in ``ModelAdmin.readonly_fields``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.6.txt:12
msgid ""
"The :attr:`ModelAdmin.readonly_fields "
"<django.contrib.admin.ModelAdmin.readonly_fields>` attribute in the Django "
"admin allows displaying model fields and model attributes. While the former "
"were correctly escaped, the latter were not. Thus untrusted content could be"
" injected into the admin, presenting an exploitation vector for XSS attacks."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.6.txt:18
msgid ""
"In this vulnerability, every model attribute used in ``readonly_fields`` "
"that is not an actual model field (e.g. a :class:`property`) will **fail to "
"be escaped** even if that attribute is not marked as safe. In this release, "
"autoescaping is now correctly applied."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.6.txt:26
msgid ""
"Fixed crash when coercing ``ManyRelatedManager`` to a string "
"(:ticket:`24352`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.6.txt:29
msgid ""
"Fixed a bug that prevented migrations from adding a foreign key constraint "
"when converting an existing field to a foreign key (:ticket:`24447`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.7.txt:3
msgid "Django 1.7.7 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.7.txt:7
msgid "Django 1.7.7 fixes several bugs and security issues in 1.7.6."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.7.txt:48
msgid ""
"Fixed renaming of classes in migrations where renaming a subclass would "
"cause incorrect state to be recorded for objects that referenced the "
"superclass (:ticket:`24354`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.7.txt:52
msgid ""
"Stopped writing migration files in dry run mode when merging migration "
"conflicts. When ``makemigrations --merge`` is called with ``verbosity=3`` "
"the migration file is written to ``stdout`` (:ticket:`24427`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.8.txt:3
msgid "Django 1.7.8 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.8.txt:5
#: ../../../../sources/1.10/docs/releases/1.8.1.txt:5
msgid "*May 1, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.8.txt:7
msgid "Django 1.7.8 fixes:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.8.txt:9
msgid ""
"Database introspection with SQLite 3.8.9 (released April 8, 2015) "
"(:ticket:`24637`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.8.txt:12
msgid "A database table name quoting regression in 1.7.2 (:ticket:`24605`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.8.txt:14
msgid ""
"The loss of ``null``/``not null`` column properties during field alteration "
"of MySQL databases (:ticket:`24595`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.9.txt:3
msgid "Django 1.7.9 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.9.txt:7
msgid "Django 1.7.9 fixes several security issues and bugs in 1.7.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.9.txt:46
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:51
msgid ""
":func:`~django.core.validators.validate_ipv4_address`, "
":func:`~django.core.validators.validate_slug`, and "
":class:`~django.core.validators.URLValidator` are also affected, however, as"
" of Django 1.6 the ``GenericIPAddresseField``, ``IPAddressField``, "
"``SlugField``, and ``URLField`` form fields which use these validators all "
"strip the input, so the possibility of newlines entering your data only "
"exists if you are using these validators outside of the form fields."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.9.txt:61
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:90
msgid ""
"Prevented the loss of ``null``/``not null`` column properties during field "
"renaming of MySQL databases (:ticket:`24817`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.7.9.txt:64
#: ../../../../sources/1.10/docs/releases/1.8.3.txt:124
msgid ""
"Fixed ``SimpleTestCase.assertRaisesMessage()`` on Python 2.7.10 "
"(:ticket:`24903`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:3
msgid "Django 1.8 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:5
msgid "*April 1, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:7
msgid "Welcome to Django 1.8!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:9
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.8>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.8>` "
"you'll want to be aware of when upgrading from Django 1.7 or older versions."
" We've also :ref:`begun the deprecation process for some features "
"<deprecated-features-1.8>`, and some features have reached the end of their "
"deprecation process and :ref:`have been removed <removed-features-1.8>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:19
msgid ""
"Django 1.8 has been designated as Django's second :term:`long-term support "
"release`. It will receive security updates for at least three years after "
"its release. Support for the previous LTS, Django 1.4, will end 6 months "
"from the release date of Django 1.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:27
msgid ""
"Django 1.8 requires Python 2.7, 3.2, 3.3, 3.4, or 3.5. We **highly "
"recommend** and only officially support the latest release of each series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:30
msgid "Django 1.8 is the first release to support Python 3.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:32
msgid ""
"Due to the end of upstream support for Python 3.2 in February 2016, we won't"
" test Django 1.8.x on Python 3.2 after the end of 2016."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:38
msgid "What's new in Django 1.8"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:41
msgid "``Model._meta`` API"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:43
msgid ""
"Django now has a formalized API for :doc:`Model._meta </ref/models/meta>`, "
"providing an officially supported way to :ref:`retrieve fields <model-meta-"
"field-api>` and filter fields based on their :ref:`attributes <model-field-"
"attributes>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:48
msgid ""
"The ``Model._meta`` object has been part of Django since the days of "
"pre-0.96 \"Magic Removal\" -- it just wasn't an official, stable API. In "
"recognition of this, we've endeavored to maintain backwards-compatibility "
"with the old API endpoint where possible. However, API endpoints that aren't"
" part of the new official API have been deprecated and will eventually be "
"removed. A :ref:`guide to migrating from the old API to the new API "
"<migrating-old-meta-api>` has been provided."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:57
msgid "Multiple template engines"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:59
msgid ""
"Django 1.8 defines a stable API for integrating template backends. It "
"includes built-in support for the Django template language and for "
":class:`~django.template.backends.jinja2.Jinja2`. It supports rendering "
"templates with multiple engines within the same project. Learn more about "
"the new features in the :doc:`topic guide </topics/templates>` and check the"
" :doc:`upgrade instructions </ref/templates/upgrading>` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:67
msgid "Security enhancements"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:69
msgid ""
"Several features of the django-secure_ third-party library have been "
"integrated into Django. "
":class:`django.middleware.security.SecurityMiddleware` provides several "
"security enhancements to the request/response cycle. The new :option:`check "
"--deploy` option allows you to check your production settings file for ways "
"to increase the security of your site."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:78
msgid "New PostgreSQL specific functionality"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:80
msgid ""
"Django now has a module with extensions for PostgreSQL specific features, "
"such as :class:`~django.contrib.postgres.fields.ArrayField`, "
":class:`~django.contrib.postgres.fields.HStoreField`, :ref:`range-fields`, "
"and :lookup:`unaccent` lookup. A full breakdown of the features is available"
" :doc:`in the documentation </ref/contrib/postgres/index>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:87
msgid "New data types"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:89
msgid ""
"Django now has a :class:`~django.db.models.UUIDField` for storing "
"universally unique identifiers. It is stored as the native ``uuid`` data "
"type on PostgreSQL and as a fixed length character field on other backends. "
"There is a corresponding :class:`form field <django.forms.UUIDField>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:94
msgid ""
"Django now has a :class:`~django.db.models.DurationField` for storing "
"periods of time - modeled in Python by :class:`~python:datetime.timedelta`. "
"It is stored in the native ``interval`` data type on PostgreSQL, as a "
"``INTERVAL DAY(9) TO SECOND(6)`` on Oracle, and as a ``bigint`` of "
"microseconds on other backends. Date and time related arithmetic has also "
"been improved on all backends. There is a corresponding :class:`form field "
"<django.forms.DurationField>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:103
msgid "Query Expressions, Conditional Expressions, and Database Functions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:105
msgid ""
":doc:`Query Expressions </ref/models/expressions>` allow you to create, "
"customize, and compose complex SQL expressions. This has enabled annotate to"
" accept expressions other than aggregates. Aggregates are now able to "
"reference multiple fields, as well as perform arithmetic, similar to ``F()``"
" objects. :meth:`~django.db.models.query.QuerySet.order_by` has also gained "
"the ability to accept expressions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:112
msgid ""
":doc:`Conditional Expressions </ref/models/conditional-expressions>` allow "
"you to use :keyword:`if` ... :keyword:`elif` ... :keyword:`else` logic "
"within queries."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:116
msgid ""
"A collection of :doc:`database functions </ref/models/database-functions>` "
"is also included with functionality such as "
":class:`~django.db.models.functions.Coalesce`, "
":class:`~django.db.models.functions.Concat`, and "
":class:`~django.db.models.functions.Substr`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:123
msgid "``TestCase`` data setup"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:125
msgid ""
":class:`~django.test.TestCase` has been refactored to allow for data "
"initialization at the class level using transactions and savepoints. "
"Database backends which do not support transactions, like MySQL with the "
"MyISAM storage engine, will still be able to run these tests but won't "
"benefit from the improvements. Tests are now run within two nested "
":func:`~django.db.transaction.atomic()` blocks: one for the whole class and "
"one for each test."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:133
msgid ""
"The class method :meth:`TestCase.setUpTestData() "
"<django.test.TestCase.setUpTestData>` adds the ability to setup test data at"
" the class level. Using this technique can speed up the tests as compared to"
" using ``setUp()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:138
msgid ""
"Fixture loading within ``TestCase`` is now performed once for the whole "
"``TestCase``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:147
msgid ""
":class:`~django.contrib.admin.ModelAdmin` now has a "
":meth:`~django.contrib.admin.ModelAdmin.has_module_permission` method to "
"allow limiting access to the module on the admin index page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:151
msgid ""
":class:`~django.contrib.admin.InlineModelAdmin` now has an attribute "
":attr:`~django.contrib.admin.InlineModelAdmin.show_change_link` that "
"supports showing a link to an inline object's change form."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:155
msgid ""
"Use the new ``django.contrib.admin.RelatedOnlyFieldListFilter`` in "
":attr:`ModelAdmin.list_filter <django.contrib.admin.ModelAdmin.list_filter>`"
" to limit the ``list_filter`` choices to foreign objects which are attached "
"to those from the ``ModelAdmin``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:160
msgid ""
"The :meth:`ModelAdmin.delete_view() "
"<django.contrib.admin.ModelAdmin.delete_view>` displays a summary of objects"
" to be deleted on the deletion confirmation page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:164
msgid ""
"The jQuery library embedded in the admin has been upgraded to version "
"1.11.2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:166
msgid ""
"You can now specify :attr:`AdminSite.site_url "
"<django.contrib.admin.AdminSite.site_url>` in order to display a link to the"
" front-end site."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:170
msgid ""
"You can now specify :attr:`ModelAdmin.show_full_result_count "
"<django.contrib.admin.ModelAdmin.show_full_result_count>` to control whether"
" or not the full count of objects should be displayed on a filtered admin "
"page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:174
msgid ""
"The ``AdminSite.password_change()`` method now has an ``extra_context`` "
"parameter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:177
msgid ""
"You can now control who may login to the admin site by overriding only "
":meth:`AdminSite.has_permission() "
"<django.contrib.admin.AdminSite.has_permission>` and "
":attr:`AdminSite.login_form <django.contrib.admin.AdminSite.login_form>`. "
"The ``base.html`` template has a new block ``usertools`` which contains the "
"user-specific header. A new context variable ``has_permission``, which gets "
"its value from :meth:`~django.contrib.admin.AdminSite.has_permission`, "
"indicates whether the user may access the site."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:186
msgid ""
"Foreign key dropdowns now have buttons for changing or deleting related "
"objects using a popup."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:190
#: ../../../../sources/1.10/docs/releases/1.9.txt:189
msgid ":mod:`django.contrib.admindocs`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:192
msgid "reStructuredText is now parsed in model docstrings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:197
msgid ""
"Authorization backends can now raise "
":class:`~django.core.exceptions.PermissionDenied` in "
":meth:`~django.contrib.auth.models.User.has_perm` and "
":meth:`~django.contrib.auth.models.User.has_module_perms` to short-circuit "
"permission checking."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:202
msgid ""
":class:`~django.contrib.auth.forms.PasswordResetForm` now has a method "
":meth:`~django.contrib.auth.forms.PasswordResetForm.send_email` that can be "
"overridden to customize the mail to be sent."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:206
msgid ""
"The ``max_length`` of :attr:`Permission.name "
"<django.contrib.auth.models.Permission.name>` has been increased from 50 to "
"255 characters. Please run the database migration."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:210
msgid ""
":attr:`~django.contrib.auth.models.CustomUser.USERNAME_FIELD` and "
":attr:`~django.contrib.auth.models.CustomUser.REQUIRED_FIELDS` now supports "
":class:`~django.db.models.ForeignKey`\\s."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:214
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 33%. This backwards compatible change will not affect users who"
" have subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to "
"change the default value."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:222
msgid ""
"A new :doc:`GeoJSON serializer </ref/contrib/gis/serializers>` is now "
"available."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:225
msgid ""
"It is now allowed to include a subquery as a geographic lookup argument, for"
" example "
"``City.objects.filter(point__within=Country.objects.filter(continent='Africa').values('mpoly'))``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:228
msgid ""
"The SpatiaLite backend now supports ``Collect`` and ``Extent`` aggregates "
"when the database version is 3.0 or later."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:231
msgid ""
"The PostGIS 2 ``CREATE EXTENSION postgis`` and the SpatiaLite ``SELECT "
"InitSpatialMetaData`` initialization commands are now automatically run by "
":djadmin:`migrate`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:235
msgid ""
"The GDAL interface now supports retrieving properties of :ref:`raster "
"(image) data file <raster-data-source-objects>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:238
msgid ""
"Compatibility shims for ``SpatialRefSys`` and ``GeometryColumns`` changed in"
" Django 1.2 have been removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:241
msgid ""
"All GDAL-related exceptions are now raised with ``GDALException``. The "
"former ``OGRException`` has been kept for backwards compatibility but should"
" not be used any longer."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:248
msgid ""
"Session cookie is now deleted after "
":meth:`~django.contrib.sessions.backends.base.SessionBase.flush()` is "
"called."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:254
msgid ""
"The new :attr:`Sitemap.i18n <django.contrib.sitemaps.Sitemap.i18n>` "
"attribute allows you to generate a sitemap based on the :setting:`LANGUAGES`"
" setting."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:260
msgid ""
":func:`~django.contrib.sites.shortcuts.get_current_site` will now lookup the"
" current site based on :meth:`request.get_host() "
"<django.http.HttpRequest.get_host>` if the :setting:`SITE_ID` setting is not"
" defined."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:265
msgid ""
"The default :class:`~django.contrib.sites.models.Site` created when running "
"``migrate`` now respects the :setting:`SITE_ID` setting (instead of always "
"using ``pk=1``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:272
msgid ""
"The ``incr()`` method of the "
"``django.core.cache.backends.locmem.LocMemCache`` backend is now thread-"
"safe."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:276
msgid "Cryptography"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:278
msgid ""
"The ``max_age`` parameter of the "
":meth:`django.core.signing.TimestampSigner.unsign` method now also accepts a"
" :py:class:`datetime.timedelta` object."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:285
msgid ""
"The MySQL backend no longer strips microseconds from ``datetime`` values as "
"MySQL 5.6.4 and up supports fractional seconds depending on the declaration "
"of the datetime field (when ``DATETIME`` includes fractional precision "
"greater than 0). New datetime database columns created with Django 1.8 and "
"MySQL 5.6.4 and up will support microseconds. See the :ref:`MySQL database "
"notes <mysql-fractional-seconds>` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:292
msgid ""
"The MySQL backend no longer creates explicit indexes for foreign keys when "
"using the InnoDB storage engine, as MySQL already creates them "
"automatically."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:295
msgid ""
"The Oracle backend no longer defines the ``connection_persists_old_columns``"
" feature as ``True``. Instead, Oracle will now include a cache busting "
"clause when getting the description of a table."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:302
msgid ""
":ref:`Email backends <topic-email-backends>` now support the context manager"
" protocol for opening and closing connections."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:305
msgid ""
"The SMTP email backend now supports ``keyfile`` and ``certfile`` "
"authentication with the :setting:`EMAIL_SSL_CERTFILE` and "
":setting:`EMAIL_SSL_KEYFILE` settings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:309
msgid ""
"The SMTP :class:`~django.core.mail.backends.smtp.EmailBackend` now supports "
"setting the ``timeout`` parameter with the :setting:`EMAIL_TIMEOUT` setting."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:312
msgid ""
":class:`~django.core.mail.EmailMessage` and ``EmailMultiAlternatives`` now "
"support the ``reply_to`` parameter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:318
msgid ""
":meth:`Storage.get_available_name() "
"<django.core.files.storage.Storage.get_available_name>` and "
":meth:`Storage.save() <django.core.files.storage.Storage.save>` now take a "
"``max_length`` argument to implement storage-level maximum filename length "
"constraints. Filenames exceeding this argument will get truncated. This "
"prevents a database error when appending a unique suffix to a long filename "
"that already exists on the storage. See the :ref:`deprecation note <storage-"
"max-length-update>` about adding this argument to your custom storage "
"classes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:331
msgid ""
"Form widgets now render attributes with a value of ``True`` or ``False`` as "
"HTML5 boolean attributes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:334
msgid ""
"The new :meth:`~django.forms.Form.has_error()` method allows checking if a "
"specific error has happened."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:337
msgid ""
"If :attr:`~django.forms.Form.required_css_class` is defined on a form, then "
"the ``<label>`` tags for required fields will have this class present in its"
" attributes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:341
msgid ""
"The rendering of non-field errors in unordered lists (``<ul>``) now includes"
" ``nonfield`` in its list of classes to distinguish them from field-specific"
" errors."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:345
msgid ""
":class:`~django.forms.Field` now accepts a "
":attr:`~django.forms.Field.label_suffix` argument, which will override the "
"form's :attr:`~django.forms.Form.label_suffix`. This enables customizing the"
" suffix on a per-field basis — previously it wasn't possible to override a "
"form's :attr:`~django.forms.Form.label_suffix` while using  shortcuts such "
"as ``{{ form.as_p }}`` in templates."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:352
msgid ""
":class:`~django.forms.SelectDateWidget` now accepts an "
":attr:`~django.forms.SelectDateWidget.empty_label` argument, which will "
"override the top list choice label when :class:`~django.forms.DateField` is "
"not required."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:357
msgid ""
"After an :class:`~django.forms.ImageField` has been cleaned and validated, "
"the ``UploadedFile`` object will have an additional ``image`` attribute "
"containing the Pillow ``Image`` instance used to check if the file was a "
"valid image. It will also update ``UploadedFile.content_type`` with the "
"image's content type as determined by Pillow."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:363
msgid ""
"You can now pass a callable that returns an iterable of choices when "
"instantiating a :class:`~django.forms.ChoiceField`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:369
msgid ""
"Generic views that use "
":class:`~django.views.generic.list.MultipleObjectMixin` may now specify the "
"ordering applied to the "
":attr:`~django.views.generic.list.MultipleObjectMixin.queryset` by setting "
":attr:`~django.views.generic.list.MultipleObjectMixin.ordering` or "
"overriding "
":meth:`~django.views.generic.list.MultipleObjectMixin.get_ordering()`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:375
msgid ""
"The new :attr:`SingleObjectMixin.query_pk_and_slug "
"<django.views.generic.detail.SingleObjectMixin.query_pk_and_slug>` attribute"
" allows changing the behavior of "
":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` so that "
"it'll perform its lookup using both the primary key and the slug."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:381
msgid ""
"The :meth:`~django.views.generic.edit.FormMixin.get_form()` method doesn't "
"require a ``form_class`` to be provided anymore. If not provided "
"``form_class`` defaults to "
":meth:`~django.views.generic.edit.FormMixin.get_form_class()`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:385
msgid ""
"Placeholders in :attr:`ModelFormMixin.success_url "
"<django.views.generic.edit.ModelFormMixin.success_url>` now support the "
"Python :py:meth:`str.format()` syntax. The legacy ``%(<foo>)s`` syntax is "
"still supported but will be removed in Django 1.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:393
msgid ""
":setting:`FORMAT_MODULE_PATH` can now be a list of strings representing "
"module paths. This allows importing several format modules from different "
"reusable apps. It also allows overriding those custom formats in your main "
"Django project."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:401
msgid ""
"The :class:`django.utils.log.AdminEmailHandler` class now has a "
":meth:`~django.utils.log.AdminEmailHandler.send_mail` method to make it more"
" subclass friendly."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:408
msgid ""
"Database connections are now always closed after a management command called"
" from the command line has finished doing its job."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:411
msgid ""
"Commands from alternate package formats like eggs are now also discovered."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:413
msgid ""
"The new :option:`dumpdata --output` option allows specifying a file to which"
" the serialized data is written."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:416
msgid ""
"The new :option:`makemessages --exclude` and :option:`compilemessages "
"--exclude` options allow excluding specific locales from processing."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:419
msgid ""
":djadmin:`compilemessages` now has a ``--use-fuzzy`` or ``-f`` option which "
"includes fuzzy translations into compiled files."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:422
msgid ""
"The :option:`loaddata --ignorenonexistent` option now ignores data for "
"models that no longer exist."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:425
msgid ":djadmin:`runserver` now uses daemon threads for faster reloading."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:427
msgid ""
":djadmin:`inspectdb` now outputs ``Meta.unique_together``. It is also able "
"to introspect :class:`~django.db.models.AutoField` for MySQL and PostgreSQL "
"databases."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:431
msgid ""
"When calling management commands with options using "
":func:`~django.core.management.call_command`, the option name can match the "
"command line option name (without the initial dashes) or the final option "
"destination variable name, but in either case, the resulting option received"
" by the command is now always the ``dest`` name specified in the command "
"option definition (as long as the command uses the :mod:`argparse` module)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:438
msgid ""
"The :djadmin:`dbshell` command now supports MySQL's optional SSL certificate"
" authority setting (``--ssl-ca``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:441
msgid ""
"The new :option:`makemigrations --name` allows giving the migration(s) a "
"custom name instead of a generated one."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:444
msgid ""
"The :djadmin:`loaddata` command now prevents repeated fixture loading. If "
":setting:`FIXTURE_DIRS` contains duplicates or a default fixture directory "
"path (``app_name/fixtures``), an exception is raised."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:448
msgid ""
"The new :option:`makemigrations --exit` option allows exiting with an error "
"code if no migrations are created."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:451
msgid ""
"The new :djadmin:`showmigrations` command allows listing all migrations and "
"their dependencies in a project."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:455
msgid "Middleware"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:457
msgid ""
"The :attr:`CommonMiddleware.response_redirect_class "
"<django.middleware.common.CommonMiddleware.response_redirect_class>` "
"attribute allows you to customize the redirects issued by the middleware."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:461
msgid ""
"A debug message will be logged to the ``django.request`` logger when a "
"middleware raises a :exc:`~django.core.exceptions.MiddlewareNotUsed` "
"exception in :setting:`DEBUG` mode."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:468
msgid ""
"The :class:`~django.db.migrations.operations.RunSQL` operation can now "
"handle parameters passed to the SQL statements."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:471
msgid ""
"It is now possible to have migrations (most probably :ref:`data migrations "
"<data-migrations>`) for applications without models."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:474
msgid ""
"Migrations can now :ref:`serialize model managers <using-managers-in-"
"migrations>` as part of the model state."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:477
msgid ""
"A :ref:`generic mechanism to handle the deprecation of model fields "
"<migrations-removing-model-fields>` was added."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:480
msgid ""
"The :meth:`RunPython.noop() "
"<django.db.migrations.operations.RunPython.noop>` and :attr:`RunSQL.noop "
"<django.db.migrations.operations.RunSQL.noop>` class method/attribute were "
"added to ease in making ``RunPython`` and ``RunSQL`` operations reversible."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:485
msgid ""
"The migration operations :class:`~django.db.migrations.operations.RunPython`"
" and :class:`~django.db.migrations.operations.RunSQL` now call the "
":meth:`allow_migrate` method of database routers. The router can use the "
"newly introduced ``app_label`` and ``hints`` arguments to make a routing "
"decision. To take advantage of this feature you need to update the router to"
" the new ``allow_migrate`` signature, see the :ref:`deprecation section "
"<deprecated-signature-of-allow-migrate>` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:496
msgid ""
"Django now logs at most 9000 queries in ``connections.queries``, in order to"
" prevent excessive memory usage in long-running processes in debug mode."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:499
msgid ""
"There is now a model ``Meta`` option to define a :attr:`default related name"
" <django.db.models.Options.default_related_name>` for all relational fields "
"of a model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:503
msgid ""
"Pickling models and querysets across different versions of Django isn't "
"officially supported (it may work, but there's no guarantee). An extra "
"variable that specifies the current Django version is now added to the "
"pickled state of models and querysets, and Django raises a "
"``RuntimeWarning`` when these objects are unpickled in a different version "
"than the one in which they were pickled."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:510
msgid ""
"Added :meth:`Model.from_db() <django.db.models.Model.from_db()>` which "
"Django uses whenever objects are loaded using the ORM. The method allows "
"customizing model loading behavior."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:514
msgid ""
"``extra(select={...})`` now allows you to escape a literal ``%s`` sequence "
"using ``%%s``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:517
msgid ""
":doc:`Custom Lookups</howto/custom-lookups>` can now be registered using a "
"decorator pattern."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:520
msgid ""
"The new :attr:`Transform.bilateral <django.db.models.Transform.bilateral>` "
"attribute allows creating bilateral transformations. These transformations "
"are applied to both ``lhs`` and ``rhs`` when used in a lookup expression, "
"providing opportunities for more sophisticated lookups."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:525
msgid ""
"SQL special characters (\\, %, _) are now escaped properly when a pattern "
"lookup (e.g. ``contains``, ``startswith``, etc.) is used with an ``F()`` "
"expression as the right-hand side. In those cases, the escaping is performed"
" by the database, which can lead to somewhat complex queries involving "
"nested ``REPLACE`` function calls."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:531
msgid ""
"You can now refresh model instances by using :meth:`Model.refresh_from_db() "
"<django.db.models.Model.refresh_from_db>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:534
msgid ""
"You can now get the set of deferred fields for a model using "
":meth:`Model.get_deferred_fields() "
"<django.db.models.Model.get_deferred_fields>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:537
msgid ""
"Model field ``default``’s are now used when primary key field's are set to "
"``None``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:543
msgid ""
"Exceptions from the ``(receiver, exception)`` tuples returned by "
":meth:`Signal.send_robust() <django.dispatch.Signal.send_robust>` now have "
"their traceback attached as a ``__traceback__`` attribute."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:547
msgid ""
"The ``environ`` argument, which contains the WSGI environment structure from"
" the request, was added to the :data:`~django.core.signals.request_started` "
"signal."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:551
msgid ""
"You can now import the :func:`~django.test.signals.setting_changed` signal "
"from ``django.core.signals`` to avoid loading ``django.test`` in non-test "
"situations. Django no longer does so itself."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:556
msgid "System Check Framework"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:558
msgid ":attr:`~django.core.checks.register` can now be used as a function."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:563
msgid ""
":tfilter:`urlize` now supports domain-only links that include characters "
"after the top-level domain (e.g. ``djangoproject.com/`` and "
"``djangoproject.com/download/``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:567
msgid ""
":tfilter:`urlize` doesn't treat exclamation marks at the end of a domain or "
"its query string as part of the URL (the URL in e.g. ``'djangoproject.com!``"
" is ``djangoproject.com``)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:571
msgid ""
"Added a :class:`locmem.Loader <django.template.loaders.locmem.Loader>` class"
" that loads Django templates from a Python dictionary."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:574
msgid ""
"The :ttag:`now` tag can now store its output in a context variable with the "
"usual syntax: ``{% now 'j n Y' as varname %}``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:580
msgid "``WSGIRequest`` now respects paths starting with ``//``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:582
msgid ""
"The :meth:`HttpRequest.build_absolute_uri() "
"<django.http.HttpRequest.build_absolute_uri>` method now handles paths "
"starting with ``//`` correctly."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:586
msgid ""
"If :setting:`DEBUG` is ``True`` and a request raises a "
":exc:`~django.core.exceptions.SuspiciousOperation`, the response will be "
"rendered with a detailed error page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:590
msgid ""
"The ``query_string`` argument of :class:`~django.http.QueryDict` is now "
"optional, defaulting to ``None``, so a blank ``QueryDict`` can now be "
"instantiated with ``QueryDict()`` instead of ``QueryDict(None)`` or "
"``QueryDict('')``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:595
msgid ""
"The ``GET`` and ``POST`` attributes of an :class:`~django.http.HttpRequest` "
"object are now :class:`~django.http.QueryDict`\\s rather than dictionaries, "
"and the ``FILES`` attribute is now a ``MultiValueDict``. This brings this "
"class into line with the documentation and with ``WSGIRequest``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:601
msgid ""
"The :attr:`HttpResponse.charset <django.http.HttpResponse.charset>` "
"attribute was added."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:604
msgid ""
"``WSGIRequestHandler`` now follows RFC in converting URI to IRI, using "
"``uri_to_iri()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:607
msgid ""
"The :meth:`HttpRequest.get_full_path() "
"<django.http.HttpRequest.get_full_path>` method now escapes unsafe "
"characters from the path portion of a Uniform Resource Identifier (URI) "
"properly."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:611
msgid ""
":class:`~django.http.HttpResponse` now implements a few additional methods "
"like :meth:`~django.http.HttpResponse.getvalue` so that instances can be "
"used as stream objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:615
msgid ""
"The new :meth:`HttpResponse.setdefault() "
"<django.http.HttpResponse.setdefault>` method allows setting a header unless"
" it has already been set."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:619
msgid ""
"You can use the new :class:`~django.http.FileResponse` to stream files."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:621
msgid ""
"The :func:`~django.views.decorators.http.condition` decorator for "
"conditional view processing now supports the ``If-unmodified-since`` header."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:627
msgid ""
"The :class:`RequestFactory.trace() <django.test.RequestFactory>` and "
":class:`Client.trace() <django.test.Client.trace>` methods were implemented,"
" allowing you to create ``TRACE`` requests in your tests."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:631
msgid ""
"The ``count`` argument was added to "
":meth:`~django.test.SimpleTestCase.assertTemplateUsed`. This allows you to "
"assert that a template was rendered a specific number of times."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:635
msgid ""
"The new :meth:`~django.test.SimpleTestCase.assertJSONNotEqual` assertion "
"allows you to test that two JSON fragments are not equal."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:638
msgid ""
"Added options to the :djadmin:`test` command to preserve the test database "
"(:option:`--keepdb <test --keepdb>`), to run the test cases in reverse order"
" (:option:`--reverse <test --reverse>`), and to enable SQL logging for "
"failing tests (:option:`--debug-sql <test --debug-sql>`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:643
msgid ""
"Added the :attr:`~django.test.Response.resolver_match` attribute to test "
"client responses."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:646
msgid ""
"Added several settings that allow customization of test tablespace "
"parameters for Oracle: :setting:`DATAFILE`, :setting:`DATAFILE_TMP`, "
":setting:`DATAFILE_MAXSIZE` and :setting:`DATAFILE_TMP_MAXSIZE`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:650
msgid ""
"The :func:`~django.test.override_settings` decorator can now affect the "
"master router in :setting:`DATABASE_ROUTERS`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:653
msgid "Added test client support for file uploads with file-like objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:655
msgid ""
"A shared cache is now used when testing with an SQLite in-memory database "
"when using Python 3.4+ and SQLite 3.7.13+. This allows sharing the database "
"between threads."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:662
msgid ""
":class:`~django.core.validators.URLValidator` now supports IPv6 addresses, "
"unicode domains, and URLs containing authentication data."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:668
msgid "Backwards incompatible changes in 1.8"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:672
msgid ""
"In addition to the changes outlined in this section, be sure to review the "
":ref:`deprecation plan <deprecation-removed-in-1.8>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:679
msgid "Related object operations are run in a transaction"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:681
msgid ""
"Some operations on related objects such as "
":meth:`~django.db.models.fields.related.RelatedManager.add()` or direct "
"assignment ran multiple data modifying queries without wrapping them in "
"transactions. To reduce the risk of data corruption, all data modifying "
"methods that affect multiple related objects (i.e. ``add()``, ``remove()``, "
"``clear()``, and direct assignment) now perform their data modifying queries"
" from within a transaction, provided your database supports transactions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:689
msgid ""
"This has one backwards incompatible side effect, signal handlers triggered "
"from these methods are now executed within the method's transaction and any "
"exception in a signal handler will prevent the whole operation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:696
msgid "Assigning unsaved objects to relations raises an error"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:700
msgid ""
"To more easily allow in-memory usage of models, this change was reverted in "
"Django 1.8.4 and replaced with a check during ``model.save()``. For "
"example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:710
msgid ""
"A similar check on assignment to reverse one-to-one relations was removed in"
" Django 1.8.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:713
msgid ""
"Assigning unsaved objects to a :class:`~django.db.models.ForeignKey`, "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey`, and "
":class:`~django.db.models.OneToOneField` now raises a :exc:`ValueError`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:717
msgid ""
"Previously, the assignment of an unsaved object would be silently ignored. "
"For example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:729
msgid "Now, an error will be raised to prevent data loss::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:736
msgid ""
"If you require allowing the assignment of unsaved instances (the old "
"behavior) and aren't concerned about the data loss possibility (e.g. you "
"never save the objects to the database), you can disable this check by using"
" the ``ForeignKey.allow_unsaved_instance_assignment`` attribute. (This "
"attribute was removed in 1.8.4 as it's no longer relevant.)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:743
msgid "Management commands that only accept positional arguments"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:745
msgid ""
"If you have written a custom management command that only accepts positional"
" arguments and you didn't specify the ``args`` command variable, you might "
"get an error like ``Error: unrecognized arguments: ...``, as variable "
"parsing is now based on :py:mod:`argparse` which doesn't implicitly accept "
"positional arguments. You can make your command backwards compatible by "
"simply setting the ``args`` class variable. However, if you don't have to "
"keep compatibility with older Django versions, it's better to implement the "
"new :meth:`~django.core.management.BaseCommand.add_arguments` method as "
"described in :doc:`/howto/custom-management-commands`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:756
msgid "Custom test management command arguments through test runner"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:758
msgid ""
"The method to add custom arguments to the `test` management command through "
"the test runner has changed. Previously, you could provide an `option_list` "
"class variable on the test runner to add more arguments (à la "
":py:mod:`optparse`). Now to implement the same behavior, you have to create "
"an ``add_arguments(cls, parser)`` class method on the test runner and call "
"``parser.add_argument`` to add any custom arguments, as parser is now an "
":py:class:`argparse.ArgumentParser` instance."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:767
msgid ""
"Model check ensures auto-generated column names are within limits specified "
"by database"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:769
msgid ""
"A field name that's longer than the column name length supported by a "
"database can create problems. For example, with MySQL you'll get an "
"exception trying to create the column, and with PostgreSQL the column name "
"is truncated by the database (you may see a warning in the PostgreSQL logs)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:774
msgid ""
"A model check has been introduced to better alert users to this scenario "
"before the actual creation of database tables."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:777
msgid ""
"If you have an existing model where this check seems to be a false positive,"
" for example on PostgreSQL where the name was already being truncated, "
"simply use :attr:`~django.db.models.Field.db_column` to specify the name "
"that's being used."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:782
msgid ""
"The check also applies to the columns generated in an implicit "
"``ManyToManyField.through`` model. If you run into an issue there, use "
":attr:`~django.db.models.ManyToManyField.through` to create an explicit "
"model and then specify :attr:`~django.db.models.Field.db_column` on its "
"column(s) as needed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:789
msgid "Query relation lookups now check object types"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:791
msgid ""
"Querying for model lookups now checks if the object passed is of correct "
"type and raises a :exc:`ValueError` if not. Previously, Django didn't care "
"if the object was of correct type; it just used the object's related field "
"attribute (e.g. ``id``) for the lookup. Now, an error is raised to prevent "
"incorrect lookups::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:804
msgid "``select_related()`` now checks given fields"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:806
msgid ""
"``select_related()`` now validates that the given fields actually exist. "
"Previously, nonexistent fields were silently ignored. Now, an error is "
"raised::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:814
msgid "The validation also makes sure that the given field is relational::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:822
msgid "Default ``EmailField.max_length`` increased to 254"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:824
msgid ""
"The old default 75 character ``max_length`` was not capable of storing all "
"possible RFC3696/5321-compliant email addresses. In order to store all "
"possible valid email addresses, the ``max_length`` has been increased to 254"
" characters. You will need to generate and apply database migrations for "
"your affected models (or add ``max_length=75`` if you wish to keep the "
"length on your current fields). A migration for "
":attr:`django.contrib.auth.models.User.email` is included."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:833
msgid "Support for PostgreSQL versions older than 9.0"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:835
msgid ""
"The end of upstream support periods was reached in July 2014 for PostgreSQL "
"8.4. As a consequence, Django 1.8 sets 9.0 as the minimum PostgreSQL version"
" it officially supports."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:839
msgid ""
"This also includes dropping support for PostGIS 1.3 and 1.4 as these "
"versions are not supported on versions of PostgreSQL later than 8.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:842
msgid ""
"Django also now requires the use of Psycopg2 version 2.4.5 or higher (or "
"2.5+ if you want to use :mod:`django.contrib.postgres`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:846
msgid "Support for MySQL versions older than 5.5"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:848
msgid ""
"The end of upstream support periods was reached in January 2012 for MySQL "
"5.0 and December 2013 for MySQL 5.1. As a consequence, Django 1.8 sets 5.5 "
"as the minimum MySQL version it officially supports."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:853
msgid "Support for Oracle versions older than 11.1"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:855
msgid ""
"The end of upstream support periods was reached in July 2010 for Oracle 9.2,"
" January 2012 for Oracle 10.1, and July 2013 for Oracle 10.2. As a "
"consequence, Django 1.8 sets 11.1 as the minimum Oracle version it "
"officially supports."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:860
msgid "Specific privileges used instead of roles for tests on Oracle"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:862
msgid ""
"Earlier versions of Django granted the CONNECT and RESOURCE roles to the "
"test user on Oracle. These roles have been deprecated, so Django 1.8 uses "
"the specific underlying privileges instead. This changes the privileges "
"required of the main user for running tests (unless the project is "
"configured to avoid creating a test user). The exact privileges required now"
" are detailed in :ref:`Oracle notes <oracle-notes>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:870
msgid "``AbstractUser.last_login`` allows null values"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:872
msgid ""
"The :attr:`AbstractUser.last_login "
"<django.contrib.auth.models.User.last_login>` field now allows null values. "
"Previously, it defaulted to the time when the user was created which was "
"misleading if the user never logged in. If you are using the default user "
"(:class:`django.contrib.auth.models.User`), run the database migration "
"included in ``contrib.auth``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:878
msgid ""
"If you are using a custom user model that inherits from ``AbstractUser``, "
"you'll need to run :djadmin:`makemigrations` and generate a migration for "
"your app that contains that model. Also, if wish to set ``last_login`` to "
"``NULL`` for users who haven't logged in, you can run this query::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:896
msgid "Support for GEOS 3.1 and GDAL 1.6 has been dropped."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:898
msgid "Support for SpatiaLite < 2.4 has been dropped."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:900
msgid ""
"GIS-specific lookups have been refactored to use the "
":class:`django.db.models.Lookup` API."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:903
msgid ""
"The default ``str`` representation of "
":class:`~django.contrib.gis.geos.GEOSGeometry` objects has been changed from"
" WKT to EWKT format (including the SRID). As this representation is used in "
"the serialization framework, that means that ``dumpdata`` output will now "
"contain the SRID value of geometry objects."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:910
msgid ""
"Priority of context processors for ``TemplateResponse`` brought in line with"
" ``render``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:912
msgid ""
"The :class:`~django.template.response.TemplateResponse` constructor is "
"designed to be a drop-in replacement for the "
":func:`~django.shortcuts.render` function. However, it had a slight "
"incompatibility, in that for ``TemplateResponse``, context data from the "
"passed in context dictionary could be shadowed by context data returned from"
" context processors, whereas for ``render`` it was the other way around. "
"This was a bug, and the behavior of ``render`` is more appropriate, since it"
" allows the globally defined context processors to be overridden locally in "
"the view. If you were relying on the fact context data in a "
"``TemplateResponse`` could be overridden using a context processor, you will"
" need to change your code."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:924
msgid "Overriding ``setUpClass`` / ``tearDownClass`` in test cases"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:926
msgid ""
"The decorators :func:`~django.test.override_settings` and "
":func:`~django.test.modify_settings` now act at the class level when used as"
" class decorators. As a consequence, when overriding ``setUpClass()`` or "
"``tearDownClass()``, the ``super`` implementation should always be called."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:932
msgid "Removal of ``django.contrib.formtools``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:934
msgid ""
"The formtools contrib app has been moved to a separate package and the "
"relevant documentation pages have been updated or removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:937
msgid "The new package is available `on GitHub`_ and on PyPI."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:942
msgid "Database connection reloading between tests"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:944
msgid ""
"Django previously closed database connections between each test within a "
"``TestCase``. This is no longer the case as Django now wraps the whole "
"``TestCase`` within a transaction. If some of your tests relied on the old "
"behavior, you should have them inherit from ``TransactionTestCase`` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:950
msgid "Cleanup of the ``django.template`` namespace"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:952
msgid ""
"If you've been relying on private APIs exposed in the ``django.template`` "
"module, you may have to import them from ``django.template.base`` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:955
msgid ""
"Also private APIs ``django.template.base.compile_string()``, "
"``django.template.loader.find_template()``, and "
"``django.template.loader.get_template_from_string()`` were removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:960
msgid "``model`` attribute on private model relations"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:962
msgid ""
"In earlier versions of Django, on a model with a reverse foreign key "
"relationship (for example), ``model._meta.get_all_related_objects()`` "
"returned the relationship as a ``django.db.models.related.RelatedObject`` "
"with the ``model`` attribute set to the source of the relationship. Now, "
"this method returns the relationship as "
"``django.db.models.fields.related.ManyToOneRel`` (private API "
"``RelatedObject`` has been removed), and the ``model`` attribute is set to "
"the target of the relationship instead of the source. The source model is "
"accessible on the ``related_model`` attribute instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:971
msgid "Consider this example from the tutorial in Django 1.8::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:981
msgid "and compare it to the behavior on older versions::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:988
msgid ""
"To access the source model, you can use a pattern like this to write code "
"that will work with both Django 1.8 and older versions::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:994
msgid ""
"Also note that ``get_all_related_objects()`` is deprecated in 1.8. See the "
":ref:`upgrade guide <migrating-old-meta-api>` for the new API."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1000
msgid ""
"The following changes to the database backend API are documented to assist "
"those writing third-party backends in updating their code:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1003
msgid ""
"``BaseDatabaseXXX`` classes have been moved to ``django.db.backends.base``. "
"Please import them from the new locations::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1016
msgid ""
"The ``data_types``, ``data_types_suffix``, and "
"``data_type_check_constraints`` attributes have moved from the "
"``DatabaseCreation`` class to ``DatabaseWrapper``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1020
msgid ""
"The ``SQLCompiler.as_sql()`` method now takes a ``subquery`` parameter "
"(:ticket:`24164`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1023
msgid ""
"The ``BaseDatabaseOperations.date_interval_sql()`` method now only takes a "
"``timedelta`` parameter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1029
msgid ""
"``AdminSite`` no longer takes an ``app_name`` argument and its ``app_name`` "
"attribute has been removed. The application name is always ``admin`` (as "
"opposed to the instance name which you can still customize using "
"``AdminSite(name=\"...\")``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1034
msgid ""
"The ``ModelAdmin.get_object()`` method (private API) now takes a third "
"argument named ``from_field`` in order to specify which field should match "
"the provided ``object_id``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1038
msgid ""
"The :meth:`ModelAdmin.response_delete() "
"<django.contrib.admin.ModelAdmin.response_delete>` method now takes a second"
" argument named ``obj_id`` which is the serialized identifier used to "
"retrieve the object before deletion."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1044
msgid ""
"Default autoescaping of functions in ``django.template.defaultfilters``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1046
msgid ""
"In order to make built-in template filters that output HTML \"safe by "
"default\" when calling them in Python code, the following functions in "
"``django.template.defaultfilters`` have been changed to automatically escape"
" their input value:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1051
msgid "``join``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1052
msgid "``linebreaksbr``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1053
msgid "``linebreaks_filter``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1054
msgid "``linenumbers``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1055
msgid "``unordered_list``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1056
msgid "``urlize``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1057
msgid "``urlizetrunc``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1059
msgid ""
"You can revert to the old behavior by specifying ``autoescape=False`` if you"
" are passing trusted content. This change doesn't have any effect when using"
" the corresponding filters in templates."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1066
msgid "``connections.queries`` is now a read-only attribute."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1068
msgid ""
"Database connections are considered equal only if they're the same object. "
"They aren't hashable any more."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1071
msgid ""
":class:`~django.middleware.gzip.GZipMiddleware` used to disable compression "
"for some content types when the request is from Internet Explorer, in order "
"to work around a bug in IE6 and earlier. This behavior could affect "
"performance on IE7 and later. It was removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1076
msgid ""
"``URLField.to_python`` no longer adds a trailing slash to pathless URLs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1078
msgid ""
"The :tfilter:`length` template filter now returns ``0`` for an undefined "
"variable, rather than an empty string."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1081
msgid ""
"``ForeignKey.default_error_message['invalid']`` has been changed from "
"``'%(model)s instance with pk %(pk)r does not exist.'`` to ``'%(model)s "
"instance with %(field)s %(value)r does not exist.'`` If you are using this "
"message in your own code, please update the list of interpolated parameters."
" Internally, Django will continue to provide the ``pk`` parameter in "
"``params`` for backwards compatibility."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1088
msgid ""
"``UserCreationForm.error_messages['duplicate_username']`` is no longer used."
" If you wish to customize that error message, :ref:`override it on the form "
"<modelforms-overriding-default-fields>` using the ``'unique'`` key in "
"``Meta.error_messages['username']`` or, if you have a custom form field for "
"``'username'``, using the the ``'unique'`` key in its "
":attr:`~django.forms.Field.error_messages` argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1095
msgid ""
"The block ``usertools`` in the ``base.html`` template of "
":mod:`django.contrib.admin` now requires the ``has_permission`` context "
"variable to be set. If you have any custom admin views that use this "
"template, update them to pass :meth:`AdminSite.has_permission() "
"<django.contrib.admin.AdminSite.has_permission>` as this new variable's "
"value or simply include :meth:`AdminSite.each_context(request) "
"<django.contrib.admin.AdminSite.each_context>` in the context."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1103
msgid ""
"Internal changes were made to the :class:`~django.forms.ClearableFileInput` "
"widget to allow more customization. The undocumented ``url_markup_template``"
" attribute was removed in favor of ``template_with_initial``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1107
msgid ""
"For consistency with other major vendors, the ``en_GB`` locale now has "
"Monday as the first day of the week."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1110
msgid ""
"Seconds have been removed from any locales that had them in ``TIME_FORMAT``,"
" ``DATETIME_FORMAT``, or ``SHORT_DATETIME_FORMAT``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1113
msgid ""
"The default max size of the Oracle test tablespace has increased from 300M "
"(or 200M, before 1.7.2) to 500M."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1116
msgid ""
"``reverse()`` and ``reverse_lazy()`` now return Unicode strings instead of "
"byte strings."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1119
msgid ""
"The ``CacheClass`` shim has been removed from all cache backends. These "
"aliases were provided for backwards compatibility with Django 1.3. If you "
"are still using them, please update your project to use the real class name "
"found in the :setting:`BACKEND <CACHES-BACKEND>` key of the "
":setting:`CACHES` setting."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1125
msgid ""
"By default, :func:`~django.core.management.call_command` now always skips "
"the check framework (unless you pass it ``skip_checks=False``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1128
msgid ""
"When iterating over lines, :class:`~django.core.files.File` now uses "
"`universal newlines`_. The following are recognized as ending a line: the "
"Unix end-of-line convention ``'\\n'``, the Windows convention ``'\\r\\n'``, "
"and the old Macintosh convention ``'\\r'``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1135
msgid ""
"The Memcached cache backends ``MemcachedCache`` and ``PyLibMCCache`` will "
"delete a key if ``set()`` fails. This is necessary to ensure the "
"``cache_db`` session store always fetches the most current session data."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1139
msgid ""
"Private APIs ``override_template_loaders`` and ``override_with_test_loader``"
" in ``django.test.utils`` were removed. Override ``TEMPLATES`` with "
"``override_settings`` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1143
msgid ""
"Warnings from the MySQL database backend are no longer converted to "
"exceptions when :setting:`DEBUG` is ``True``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1146
msgid ""
":class:`~django.http.HttpRequest` now has a simplified ``repr`` (e.g. "
"``<WSGIRequest: GET '/somepath/'>``). This won't change the behavior of the "
":class:`~django.views.debug.SafeExceptionReporterFilter` class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1150
msgid ""
"Class-based views that use "
":class:`~django.views.generic.edit.ModelFormMixin` will raise an "
":exc:`~django.core.exceptions.ImproperlyConfigured` exception when both the "
"``fields`` and ``form_class`` attributes are specified. Previously, "
"``fields`` was silently ignored."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1155
msgid ""
"When following redirects, the test client now raises "
":exc:`~django.test.client.RedirectCycleError` if it detects a loop or hits a"
" maximum redirect limit (rather than passing silently)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1159
msgid ""
"Translatable strings set as the ``default`` parameter of the field are cast "
"to concrete strings later, so the return type of ``Field.get_default()`` is "
"different in some cases. There is no change to default values which are the "
"result of a callable."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1164
msgid ""
"``GenericIPAddressField.empty_strings_allowed`` is now ``False``. Database "
"backends that interpret empty strings as null (only Oracle among the "
"backends that Django includes) will no longer convert null values back to an"
" empty string. This is consistent with other backends."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1169
msgid ""
"When the :attr:`~django.core.management.BaseCommand.leave_locale_alone` "
"attribute is ``False``, translations are now deactivated instead of forcing "
"the \"en-us\" locale. In the case your models contained non-English strings "
"and you counted on English translations to be activated in management "
"commands, this will not happen any longer. It might be that new database "
"migrations are generated (once) after migrating to 1.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1176
msgid ""
":func:`django.utils.translation.get_language()` now returns ``None`` instead"
" of :setting:`LANGUAGE_CODE` when translations are temporarily deactivated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1179
msgid ""
"When a translation doesn't exist for a specific literal, the fallback is now"
" taken from the :setting:`LANGUAGE_CODE` language (instead of from the "
"untranslated ``msgid`` message)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1183
msgid ""
"The ``name`` field of "
":class:`django.contrib.contenttypes.models.ContentType` has been removed by "
"a migration and replaced by a property. That means it's not possible to "
"query or filter a ``ContentType`` by this field any longer."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1187
msgid ""
"Be careful if you upgrade to Django 1.8 and skip Django 1.7. If you run "
"``manage.py migrate --fake``, this migration will be skipped and you'll see "
"a ``RuntimeError: Error creating new content types.`` exception because the "
"``name`` column won't be dropped from the database. Use ``manage.py migrate "
"--fake-initial`` to fake only the initial migration instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1193
msgid ""
"The new :option:`migrate --fake-initial` option allows faking initial "
"migrations. In 1.7, initial migrations were always automatically faked if "
"all tables created in an initial migration already existed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1197
msgid ""
"An app *without* migrations with a ``ForeignKey`` to an app *with* "
"migrations may now result in a foreign key constraint error when migrating "
"the database or running tests. In Django 1.7, this could fail silently and "
"result in a missing constraint. To resolve the error, add migrations to the "
"app without them."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1206
msgid "Features deprecated in 1.8"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1209
msgid "Selected methods in ``django.db.models.options.Options``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1211
msgid ""
"As part of the formalization of the ``Model._meta`` API (from the "
":class:`django.db.models.options.Options` class), a number of methods have "
"been deprecated and will be removed in Django 1.10:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1225
msgid ""
"A :ref:`migration guide <migrating-old-meta-api>` has been provided to "
"assist in converting your code from the old API to the new, official API."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1229
msgid ""
"Loading ``cycle`` and ``firstof`` template tags from ``future`` library"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1231
msgid ""
"Django 1.6 introduced ``{% load cycle from future %}`` and ``{% load firstof"
" from future %}`` syntax for forward compatibility of the :ttag:`cycle` and "
":ttag:`firstof` template tags. This syntax is now deprecated and will be "
"removed in Django 1.10. You can simply remove the ``{% load ... from future "
"%}`` tags."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1238
msgid "``django.conf.urls.patterns()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1240
msgid ""
"In the olden days of Django, it was encouraged to reference views as strings"
" in ``urlpatterns``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1247
msgid ""
"and Django would magically import ``myapp.views.myview`` internally and turn"
" the string into a real function reference. In order to reduce repetition "
"when referencing many views from the same module, the ``patterns()`` "
"function takes a required initial ``prefix`` argument which is prepended to "
"all views-as-strings in that set of ``urlpatterns``::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1258
msgid ""
"In the modern era, we have updated the tutorial to instead recommend "
"importing your views module and referencing your view functions (or classes)"
" directly. This has a number of advantages, all deriving from the fact that "
"we are using normal Python in place of \"Django String Magic\": the errors "
"when you mistype a view name are less obscure, IDEs can help with "
"autocompletion of view names, etc."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1265
msgid ""
"So these days, the above use of the ``prefix`` arg is much more likely to be"
" written (and is better written) as::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1275
msgid ""
"Thus ``patterns()`` serves little purpose and is a burden when teaching new "
"users (answering the newbie's question \"why do I need this empty string as "
"the first argument to ``patterns()``?\"). For these reasons, we are "
"deprecating it. Updating your code is as simple as ensuring that "
"``urlpatterns`` is a list of :func:`django.conf.urls.url` instances. For "
"example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1290
msgid "Passing a string as ``view`` to :func:`~django.conf.urls.url`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1292
msgid ""
"Related to the previous item, referencing views as strings in the ``url()`` "
"function is deprecated. Pass the callable view as described in the previous "
"section instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1297
msgid "Template-related settings"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1299
msgid ""
"As a consequence of the multiple template engines refactor, several settings"
" are deprecated in favor of :setting:`TEMPLATES`:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1310
msgid "``django.core.context_processors``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1312
msgid ""
"Built-in template context processors have been moved to "
"``django.template.context_processors``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1316
msgid "``django.test.SimpleTestCase.urls``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1318
msgid ""
"The attribute ``SimpleTestCase.urls`` for specifying URLconf configuration "
"in tests has been deprecated and will be removed in Django 1.10. Use "
":func:`@override_settings(ROOT_URLCONF=...) <django.test.override_settings>`"
" instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1324
msgid "``prefix`` argument to :func:`~django.conf.urls.i18n.i18n_patterns`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1326
msgid ""
"Related to the previous item, the ``prefix`` argument to "
":func:`django.conf.urls.i18n.i18n_patterns` has been deprecated. Simply pass"
" a list of :func:`django.conf.urls.url` instances instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1331
msgid ""
"Using an incorrect count of unpacked values in the :ttag:`for` template tag"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1333
msgid ""
"Using an incorrect count of unpacked values in :ttag:`for` tag will raise an"
" exception rather than fail silently in Django 1.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1337
msgid "Passing a dotted path to ``reverse()`` and :ttag:`url`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1339
msgid ""
"Reversing URLs by Python path is an expensive operation as it causes the "
"path being reversed to be imported. This behavior has also resulted in a "
"`security issue`_. Use :ref:`named URL patterns <naming-url-patterns>` for "
"reversing instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1344
msgid ""
"If you are using :mod:`django.contrib.sitemaps`, add the ``name`` argument "
"to the ``url`` that references "
":func:`django.contrib.sitemaps.views.sitemap`::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1352
msgid ""
"to ensure compatibility when reversing by Python path is removed in Django "
"1.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1354
msgid ""
"Similarly for GIS sitemaps, add "
"``name='django.contrib.gis.sitemaps.views.kml'`` or "
"``name='django.contrib.gis.sitemaps.views.kmz'``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1357
msgid ""
"If you are using a Python path for the :setting:`LOGIN_URL` or "
":setting:`LOGIN_REDIRECT_URL` setting, use the name of the ``url()`` "
"instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1363
msgid "Aggregate methods and modules"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1365
msgid ""
"The ``django.db.models.sql.aggregates`` and "
"``django.contrib.gis.db.models.sql.aggregates`` modules (both private API), "
"have been deprecated as ``django.db.models.aggregates`` and "
"``django.contrib.gis.db.models.aggregates`` are now also responsible for SQL"
" generation. The old modules will be removed in Django 1.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1371
msgid ""
"If you were using the old modules, see :doc:`Query Expressions "
"</ref/models/expressions>` for instructions on rewriting custom aggregates "
"using the new stable API."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1375
msgid ""
"The following methods and properties of ``django.db.models.sql.query.Query``"
" have also been deprecated and the backwards compatibility shims will be "
"removed in Django 1.10:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1379
msgid "``Query.aggregates``, replaced by ``annotations``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1380
msgid "``Query.aggregate_select``, replaced by ``annotation_select``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1381
msgid "``Query.add_aggregate()``, replaced by ``add_annotation()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1382
msgid "``Query.set_aggregate_mask()``, replaced by ``set_annotation_mask()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1383
msgid ""
"``Query.append_aggregate_mask()``, replaced by ``append_annotation_mask()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1386
msgid "Extending management command arguments through ``Command.option_list``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1388
msgid ""
"Management commands now use :py:mod:`argparse` instead of :py:mod:`optparse`"
" to parse command-line arguments passed to commands. This also means that "
"the way to add custom arguments to commands has changed: instead of "
"extending the ``option_list`` class list, you should now override the "
":meth:`~django.core.management.BaseCommand.add_arguments` method and add "
"arguments through ``argparse.add_argument()``. See :ref:`this example "
"<custom-commands-options>` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1397
msgid "``django.core.management.NoArgsCommand``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1399
msgid ""
"The class ``NoArgsCommand`` is now deprecated and will be removed in Django "
"1.10. Use :class:`~django.core.management.BaseCommand` instead, which takes "
"no arguments by default."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1404
msgid "Listing all migrations in a project"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1406
msgid ""
"The ``--list`` option of the :djadmin:`migrate` management command is "
"deprecated and will be removed in Django 1.10. Use :djadmin:`showmigrations`"
" instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1411
msgid ""
"``cache_choices`` option of ``ModelChoiceField`` and "
"``ModelMultipleChoiceField``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1413
msgid ""
":class:`~django.forms.ModelChoiceField` and "
":class:`~django.forms.ModelMultipleChoiceField` took an undocumented, "
"untested option ``cache_choices``. This cached querysets between multiple "
"renderings of the same ``Form`` object. This option is subject to an "
"accelerated deprecation and will be removed in Django 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1420
msgid "``django.template.resolve_variable()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1422
msgid ""
"The function has been informally marked as \"Deprecated\" for some time. "
"Replace ``resolve_variable(path, context)`` with "
"``django.template.Variable(path).resolve(context)``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1427
msgid "``django.contrib.webdesign``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1429
msgid ""
"It provided the :ttag:`lorem` template tag which is now included in the "
"built-in tags. Simply remove ``'django.contrib.webdesign'`` from "
":setting:`INSTALLED_APPS` and ``{% load webdesign %}`` from your templates."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1434
msgid "``error_message`` argument to ``django.forms.RegexField``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1436
msgid ""
"It provided backwards compatibility for pre-1.0 code, but its functionality "
"is redundant. Use ``Field.error_messages['invalid']`` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1440
msgid "Old :tfilter:`unordered_list` syntax"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1442
msgid ""
"An older (pre-1.0), more restrictive and verbose input format for the "
":tfilter:`unordered_list` template filter has been deprecated::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1447
msgid "Using the new syntax, this becomes::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1452
msgid "``django.forms.Field._has_changed()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1454
msgid ""
"Rename this method to :meth:`~django.forms.Field.has_changed` by removing "
"the leading underscore. The old name will still work until Django 1.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1458
msgid "``django.utils.html.remove_tags()`` and ``removetags`` template filter"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1460
msgid ""
"``django.utils.html.remove_tags()`` as well as the template filter "
"``removetags`` have been deprecated as they cannot guarantee safe output. "
"Their existence is likely to lead to their use in security-sensitive "
"contexts where they are not actually safe."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1465
msgid ""
"The unused and undocumented ``django.utils.html.strip_entities()`` function "
"has also been deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1469
msgid ""
"``is_admin_site`` argument to ``django.contrib.auth.views.password_reset()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1471
msgid "It's a legacy option that should no longer be necessary."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1474
msgid "``SubfieldBase``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1476
msgid ""
"``django.db.models.fields.subclassing.SubfieldBase`` has been deprecated and"
" will be removed in Django 1.10. Historically, it was used to handle fields "
"where type conversion was needed when loading from the database, but it was "
"not used in ``.values()`` calls or in aggregates. It has been replaced with "
":meth:`~django.db.models.Field.from_db_value`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1482
msgid ""
"The new approach doesn't call the :meth:`~django.db.models.Field.to_python` "
"method on assignment as was the case with ``SubfieldBase``. If you need that"
" behavior, reimplement the ``Creator`` class `from Django's source code "
"<https://github.com/django/django/blob/stable/1.8.x/django/db/models/fields/subclassing.py#L31-L44>`_"
" in your project."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1489
msgid "``django.utils.checksums``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1491
msgid ""
"The ``django.utils.checksums`` module has been deprecated and will be "
"removed in Django 1.10. The functionality it provided (validating checksum "
"using the Luhn algorithm) was undocumented and not used in Django. The "
"module has been moved to the `django-localflavor`_ package (version 1.1+)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1499
msgid "``InlineAdminForm.original_content_type_id``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1501
msgid ""
"The ``original_content_type_id`` attribute on ``InlineAdminForm`` has been "
"deprecated and will be removed in Django 1.10. Historically, it was used to "
"construct the \"view on site\" URL. This URL is now accessible using the "
"``absolute_url`` attribute of the form."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1507
msgid ""
"``django.views.generic.edit.FormMixin.get_form()``’s ``form_class`` argument"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1509
msgid ""
"``FormMixin`` subclasses that override the ``get_form()`` method should make"
" sure to provide a default value for the ``form_class`` argument since it's "
"now optional."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1514
msgid ""
"Rendering templates loaded by :func:`~django.template.loader.get_template()`"
" with a :class:`~django.template.Context`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1516
msgid ""
"The return type of :func:`~django.template.loader.get_template()` has "
"changed in Django 1.8: instead of a :class:`django.template.Template`, it "
"returns a ``Template`` instance whose exact type depends on which backend "
"loaded it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1520
msgid ""
"Both classes provide a ``render()`` method, however, the former takes a "
":class:`django.template.Context` as an argument while the latter expects a "
":class:`dict`. This change is enforced through a deprecation path for Django"
" templates."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1525
msgid ""
"Since it's easier to understand with examples, the :ref:`upgrade guide "
"<get_template-upgrade-django-18>` shows how to adapt affected code."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1528
msgid ""
"All this also applies to :func:`~django.template.loader.select_template()`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1531
msgid ""
":class:`~django.template.Template` and :class:`~django.template.Context` "
"classes in template responses"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1533
msgid ""
"Some methods of :class:`~django.template.response.SimpleTemplateResponse` "
"and :class:`~django.template.response.TemplateResponse` accepted "
":class:`django.template.Context` and :class:`django.template.Template` "
"objects as arguments. They should now receive :class:`dict` and backend-"
"dependent template objects respectively."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1539
msgid ""
"This also applies to the return types if you have subclassed either template"
" response class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1542
msgid ""
"Check the :doc:`template response API documentation </ref/template-"
"response>` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1546
msgid "``current_app`` argument of template-related APIs"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1548
msgid ""
"The following functions and classes will no longer accept a ``current_app`` "
"parameter to set an URL namespace in Django 1.10:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1556
msgid ""
"Set ``request.current_app`` instead, where ``request`` is the first argument"
" to these functions or classes. If you're using a plain ``Context``, use a "
"``RequestContext`` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1561
msgid ""
"``dictionary`` and ``context_instance`` arguments of rendering functions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1563
msgid ""
"The following functions will no longer accept the ``dictionary`` and "
"``context_instance`` parameters in Django 1.10:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1570
msgid ""
"Use the ``context`` parameter instead. When ``dictionary`` is passed as a "
"positional argument, which is the most common idiom, no changes are needed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1573
msgid ""
"If you're passing a :class:`~django.template.Context` in "
"``context_instance``, pass a :class:`dict` in the ``context`` parameter "
"instead. If you're passing a :class:`~django.template.RequestContext`, pass "
"the request separately in the ``request`` parameter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1579
msgid "``dirs`` argument of template-finding functions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1581
msgid ""
"The following functions will no longer accept a ``dirs`` parameter to "
"override ``TEMPLATE_DIRS`` in Django 1.10:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1589
msgid ""
"The parameter didn't work consistently across different template loaders and"
" didn't work for included templates."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1593
msgid "``django.template.loader.BaseLoader``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1595
msgid ""
"``django.template.loader.BaseLoader`` was renamed to "
"``django.template.loaders.base.Loader``. If you've written a custom template"
" loader that inherits ``BaseLoader``, you must inherit ``Loader`` instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1600
msgid "``django.test.utils.TestTemplateLoader``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1602
msgid ""
"Private API ``django.test.utils.TestTemplateLoader`` is deprecated in favor "
"of ``django.template.loaders.locmem.Loader`` and will be removed in Django "
"1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1608
msgid "Support for the ``max_length`` argument on custom ``Storage`` classes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1610
msgid ""
"``Storage`` subclasses should add ``max_length=None`` as a parameter to "
":meth:`~django.core.files.storage.Storage.get_available_name` and/or "
":meth:`~django.core.files.storage.Storage.save` if they override either "
"method. Support for storages that do not accept this argument will be "
"removed in Django 1.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1617
msgid "``qn`` replaced by ``compiler``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1619
msgid ""
"In previous Django versions, various internal ORM methods (mostly ``as_sql``"
" methods) accepted a ``qn`` (for \"quote name\") argument, which was a "
"reference to a function that quoted identifiers for sending to the database."
" In Django 1.8, that argument has been renamed to ``compiler`` and is now a "
"full ``SQLCompiler`` instance. For backwards-compatibility, calling a "
"``SQLCompiler`` instance performs the same name-quoting that the ``qn`` "
"function used to. However, this backwards-compatibility shim is immediately "
"deprecated: you should rename your ``qn`` arguments to ``compiler``, and "
"call ``compiler.quote_name_unless_alias(...)`` where you previously called "
"``qn(...)``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1631
msgid "Default value of ``RedirectView.permanent``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1633
msgid ""
"The default value of the :attr:`RedirectView.permanent "
"<django.views.generic.base.RedirectView.permanent>` attribute will change "
"from ``True`` to ``False`` in Django 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1638
msgid ""
"Using ``AuthenticationMiddleware`` without "
"``SessionAuthenticationMiddleware``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1640
msgid ""
"``django.contrib.auth.middleware.SessionAuthenticationMiddleware`` was added"
" in Django 1.7. In Django 1.7.2, its functionality was moved to "
"``auth.get_user()`` and, for backwards compatibility, enabled only if "
"``'django.contrib.auth.middleware.SessionAuthenticationMiddleware'`` appears"
" in :setting:`MIDDLEWARE_CLASSES`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1646
msgid ""
"In Django 1.10, session verification will be enabled regardless of whether "
"or not ``SessionAuthenticationMiddleware`` is enabled (at which point "
"``SessionAuthenticationMiddleware`` will have no significance). You can add "
"it to your ``MIDDLEWARE_CLASSES`` sometime before then to opt-in. Please "
"read the :ref:`upgrade considerations <session-invalidation-on-password-"
"change>` first."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1653
msgid "``django.contrib.sitemaps.FlatPageSitemap``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1655
msgid ""
"``django.contrib.sitemaps.FlatPageSitemap`` has moved to "
"``django.contrib.flatpages.sitemaps.FlatPageSitemap``. The old import "
"location is deprecated and will be removed in Django 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1660
msgid "Model ``Field.related``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1662
msgid ""
"Private attribute ``django.db.models.Field.related`` is deprecated in favor "
"of ``Field.rel``.  The latter is an instance of "
"``django.db.models.fields.related.ForeignObjectRel`` which replaces "
"``django.db.models.related.RelatedObject``. The ``django.db.models.related``"
" module has been removed and the ``Field.related`` attribute will be removed"
" in Django 1.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1670
msgid "``ssi`` template tag"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1672
msgid ""
"The ``ssi`` template tag allows files to be included in a template by "
"absolute path. This is of limited use in most deployment situations, and the"
" :ttag:`include` tag often makes more sense. This tag is now deprecated and "
"will be removed in Django 1.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1678
msgid "``=`` as comparison operator in ``if`` template tag"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1680
msgid ""
"Using a single equals sign with the ``{% if %}`` template tag for equality "
"testing was undocumented and untested. It's now deprecated in favor of "
"``==``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1684
msgid "``%(<foo>)s`` syntax in ``ModelFormMixin.success_url``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1686
msgid ""
"The legacy ``%(<foo>)s`` syntax in :attr:`ModelFormMixin.success_url "
"<django.views.generic.edit.ModelFormMixin.success_url>` is deprecated and "
"will be removed in Django 1.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1691
msgid "``GeoQuerySet`` aggregate methods"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1693
msgid ""
"The ``collect()``, ``extent()``, ``extent3d()``, ``make_line()``, and "
"``unionagg()`` aggregate methods are deprecated and should be replaced by "
"their function-based aggregate equivalents (``Collect``, ``Extent``, "
"``Extent3D``, ``MakeLine``, and ``Union``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1701
msgid "Signature of the ``allow_migrate`` router method"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1703
msgid ""
"The signature of the :meth:`allow_migrate` method of database routers has "
"changed from ``allow_migrate(db, model)`` to ``allow_migrate(db, app_label, "
"model_name=None, **hints)``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1707
msgid ""
"When ``model_name`` is set, the value that was previously given through the "
"``model`` positional argument may now be found inside the ``hints`` "
"dictionary under the key ``'model'``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1711
msgid ""
"After switching to the new signature the router will also be called by the "
":class:`~django.db.migrations.operations.RunPython` and "
":class:`~django.db.migrations.operations.RunSQL` operations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1718
msgid "Features removed in 1.8"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1720
msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 1.8. See :ref:`deprecated-features-1.6` for details, "
"including how to remove usage of these features."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1724
msgid "``django.contrib.comments`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1726
msgid "The following transaction management APIs are removed:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1728
msgid "``TransactionMiddleware``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1729
msgid ""
"the decorators and context managers ``autocommit``, ``commit_on_success``, "
"and ``commit_manually``, defined in ``django.db.transaction``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1731
msgid ""
"the functions ``commit_unless_managed`` and ``rollback_unless_managed``, "
"also defined in ``django.db.transaction``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1735
msgid ""
"The :ttag:`cycle` and :ttag:`firstof` template tags auto-escape their "
"arguments."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1738
msgid "The ``SEND_BROKEN_LINK_EMAILS`` setting is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1740
msgid "``django.middleware.doc.XViewMiddleware`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1742
msgid "The ``Model._meta.module_name`` alias is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1744
msgid ""
"The backward compatible shims introduced to rename ``get_query_set`` and "
"similar queryset methods are removed. This affects the following classes: "
"``BaseModelAdmin``, ``ChangeList``, ``BaseCommentNode``, "
"``GenericForeignKey``, ``Manager``, ``SingleRelatedObjectDescriptor`` and "
"``ReverseSingleRelatedObjectDescriptor``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1750
msgid ""
"The backward compatible shims introduced to rename the attributes "
"``ChangeList.root_query_set`` and ``ChangeList.query_set`` are removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1753
msgid ""
"``django.views.defaults.shortcut`` and ``django.conf.urls.shortcut`` are "
"removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1756
msgid "Support for the Python Imaging Library (PIL) module is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1758
msgid "The following private APIs are removed:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1760
msgid "``django.db.backend``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1761
msgid "``django.db.close_connection()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1762
msgid "``django.db.backends.creation.BaseDatabaseCreation.set_autocommit()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1763
msgid "``django.db.transaction.is_managed()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1764
msgid "``django.db.transaction.managed()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1766
msgid "``django.forms.widgets.RadioInput`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1768
msgid ""
"The module ``django.test.simple`` and the class "
"``django.test.simple.DjangoTestSuiteRunner`` are removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1771
msgid "The module ``django.test._doctest`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1773
msgid ""
"The ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting is removed. This change "
"affects both ``django.middleware.cache.CacheMiddleware`` and "
"``django.middleware.cache.UpdateCacheMiddleware`` despite the lack of a "
"deprecation warning in the latter class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1778
msgid ""
"Usage of the hard-coded *Hold down \"Control\", or \"Command\" on a Mac, to "
"select more than one.* string to override or append to user-provided "
"``help_text`` in forms for ``ManyToMany`` model fields is not performed by "
"Django anymore either at the model or forms layer."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1783
msgid ""
"The ``Model._meta.get_(add|change|delete)_permission`` methods are removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1785
msgid ""
"The session key ``django_language`` is no longer read for backwards "
"compatibility."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1788
msgid ""
"Geographic Sitemaps are removed (``django.contrib.gis.sitemaps.views.index``"
" and ``django.contrib.gis.sitemaps.views.sitemap``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.txt:1792
msgid ""
"``django.utils.html.fix_ampersands``, the ``fix_ampersands`` template "
"filter, and ``django.utils.html.clean_html`` are removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:3
msgid "Django 1.8.1 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:7
msgid ""
"Django 1.8.1 fixes several bugs in 1.8 and includes some optimizations in "
"the migrations framework."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:13
msgid ""
"Added support for serializing :class:`~datetime.timedelta` objects in "
"migrations (:ticket:`24566`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:16
msgid ""
"Restored proper parsing of the :djadmin:`testserver` command's positional "
"arguments (fixture names) (:ticket:`24571`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:19
msgid ""
"Prevented ``TypeError`` in translation functions ``check_for_language()`` "
"and ``get_language_bidi()`` when translations are deactivated "
"(:ticket:`24569`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:22
msgid ""
"Fixed :djadmin:`squashmigrations` command when using "
":class:`~django.db.migrations.operations.SeparateDatabaseAndState` "
"(:ticket:`24278`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:26
msgid ""
"Stripped microseconds from ``datetime`` values when using an older version "
"of the MySQLdb DB API driver as it does not support fractional seconds "
"(:ticket:`24584`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:30
msgid ""
"Fixed a migration crash when altering "
":class:`~django.db.models.ManyToManyField`\\s (:ticket:`24513`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:33
msgid ""
"Fixed a crash with ``QuerySet.update()`` on foreign keys to one-to-one "
"fields (:ticket:`24578`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:36
msgid ""
"Fixed a regression in the model detail view of "
":mod:`~django.contrib.admindocs` when a model has a reverse foreign key "
"relation (:ticket:`24624`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:40
msgid ""
"Prevented arbitrary file inclusions in :mod:`~django.contrib.admindocs` "
"(:ticket:`24625`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:43
msgid ""
"Fixed a crash with ``QuerySet.update()`` on foreign keys to instances with "
"``uuid`` primary keys (:ticket:`24611`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:46
msgid ""
"Fixed database introspection with SQLite 3.8.9 (released April 8, 2015) "
"(:ticket:`24637`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:49
msgid ""
"Updated ``urlpatterns`` examples generated by :djadmin:`startproject` to "
"remove usage of referencing views by dotted path in "
":func:`~django.conf.urls.url` which is deprecated in Django 1.8 "
"(:ticket:`24635`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:54
msgid ""
"Fixed queries where an expression was referenced in ``order_by()``, but "
"wasn't part of the select clause. An example query is "
"``qs.annotate(foo=F('field')).values('pk').order_by('foo'))`` "
"(:ticket:`24615`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:58
msgid "Fixed a database table name quoting regression (:ticket:`24605`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:60
msgid ""
"Prevented the loss of ``null``/``not null`` column properties during field "
"alteration of MySQL databases (:ticket:`24595`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:63
msgid ""
"Fixed JavaScript path of ``contrib.admin``’s related field widget when using"
" alternate static file storages (:ticket:`24655`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:66
msgid ""
"Fixed a migration crash when adding new relations to models "
"(:ticket:`24573`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:69
msgid ""
"Fixed a migration crash when applying migrations with model managers on "
"Python 3 that were generated on Python 2 (:ticket:`24701`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:72
msgid ""
"Restored the ability to use iterators as queryset filter arguments "
"(:ticket:`24719`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:75
msgid ""
"Fixed a migration crash when renaming the target model of a many-to-many "
"relation (:ticket:`24725`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:78
msgid ""
"Removed flushing of the test database with :option:`test --keepdb`, which "
"prevented apps with data migrations from using the option (:ticket:`24729`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:81
msgid "Fixed ``makemessages`` crash in some locales (:ticket:`23271`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:83
msgid ""
"Fixed help text positioning of ``contrib.admin`` fields that use the "
"``ModelAdmin.filter_horizontal`` and ``filter_vertical`` options "
"(:ticket:`24676`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:87
msgid ""
"Fixed `AttributeError: function 'GDALAllRegister' not found` error when "
"initializing ``contrib.gis`` on Windows."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:91
msgid "Optimizations"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.1.txt:93
msgid ""
"Changed ``ModelState`` to deepcopy fields instead of deconstructing and "
"reconstructing (:ticket:`24591`). This speeds up the rendering of model "
"states and reduces memory usage when running :djadmin:`manage.py migrate "
"<migrate>` (although other changes in this release may negate any "
"performance benefits)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:3
msgid "Django 1.8.10 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:5
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:5
msgid "*March 1, 2016*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:7
msgid "Django 1.8.10 fixes two security issues and several bugs in 1.8.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:10
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:10
msgid ""
"CVE-2016-2512: Malicious redirect and possible XSS attack via user-supplied "
"redirect URLs containing basic auth"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:12
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:12
msgid ""
"Django relies on user input in some cases (e.g. "
":func:`django.contrib.auth.views.login` and :doc:`i18n "
"</topics/i18n/index>`) to redirect the user to an \"on success\" URL. The "
"security check for these redirects (namely "
"``django.utils.http.is_safe_url()``) considered some URLs with basic "
"authentication credentials \"safe\" when they shouldn't be."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:18
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:18
msgid ""
"For example, a URL like ``http://mysite.example.com\\@attacker.com`` would "
"be considered safe if the request's host is ``http://mysite.example.com``, "
"but redirecting to this URL sends the user to ``attacker.com``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:22
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:22
msgid ""
"Also, if a developer relies on ``is_safe_url()`` to provide safe redirect "
"targets and puts such a URL into a link, they could suffer from an XSS "
"attack."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:26
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:26
msgid ""
"CVE-2016-2513: User enumeration through timing difference on password hasher"
" work factor upgrade"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:28
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:28
msgid ""
"In each major version of Django since 1.6, the default number of iterations "
"for the ``PBKDF2PasswordHasher`` and its subclasses has increased. This "
"improves the security of the password as the speed of hardware increases, "
"however, it also creates a timing difference between a login request for a "
"user with a password encoded in an older number of iterations and login "
"request for a nonexistent user (which runs the default hasher's default "
"number of iterations since Django 1.6)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:36
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:36
msgid ""
"This only affects users who haven't logged in since the iterations were "
"increased. The first time a user logs in after an iterations increase, their"
" password is updated with the new iterations and there is no longer a timing"
" difference."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:41
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:41
msgid ""
"The new ``BasePasswordHasher.harden_runtime()`` method allows hashers to "
"bridge the runtime gap between the work factor (e.g. iterations) supplied in"
" existing encoded passwords and the default work factor of the hasher. This "
"method is implemented for ``PBKDF2PasswordHasher``  and "
"``BCryptPasswordHasher``. The number of rounds for the latter hasher hasn't "
"changed since Django 1.4, but some projects may subclass it and increase the"
" work factor as needed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:48
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:48
msgid ""
"A warning will be emitted for any :ref:`third-party password hashers that "
"don't implement <write-your-own-password-hasher>` a ``harden_runtime()`` "
"method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:51
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:51
msgid ""
"If you have different password hashes in your database (such as SHA1 hashes "
"from users who haven't logged in since the default hasher switched to PBKDF2"
" in Django 1.4), the timing difference on a login request for these users "
"may be even greater and this fix doesn't remedy that difference (or any "
"difference when changing hashers). You may be able to :ref:`upgrade those "
"hashes <wrapping-password-hashers>` to prevent a timing attack for that "
"case."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:61
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:64
msgid ""
"Fixed a crash on PostgreSQL that prevented using ``TIME_ZONE=None`` and "
"``USE_TZ=False`` (:ticket:`26177`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:64
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:67
msgid ""
"Added system checks for query name clashes of hidden relationships "
"(:ticket:`26162`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:67
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:77
msgid ""
"Made ``forms.FileField`` and ``utils.translation.lazy_number()`` picklable "
"(:ticket:`26212`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:70
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:80
msgid ""
"Fixed :class:`~django.contrib.postgres.fields.RangeField` and "
":class:`~django.contrib.postgres.fields.ArrayField` serialization with "
"``None`` values (:ticket:`26215`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:74
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:87
msgid ""
"Reallowed dashes in top-level domain names of URLs checked by "
"``URLValidator`` to fix a regression in Django 1.8 (:ticket:`26204`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:77
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:93
msgid ""
"Fixed ``BoundField`` to reallow slices of subwidgets (:ticket:`26267`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.10.txt:79
#: ../../../../sources/1.10/docs/releases/1.9.3.txt:102
msgid ""
"Prevented ``ContentTypeManager`` instances from sharing their cache "
"(:ticket:`26286`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.11.txt:3
msgid "Django 1.8.11 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.11.txt:5
#: ../../../../sources/1.10/docs/releases/1.9.4.txt:5
msgid "*March 5, 2016*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.11.txt:7
msgid ""
"Django 1.8.11 fixes a regression on Python 2 in the 1.8.10 security release "
"where ``utils.http.is_safe_url()`` crashes on bytestring URLs "
"(:ticket:`26308`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.12.txt:3
msgid "Django 1.8.12 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.12.txt:5
#: ../../../../sources/1.10/docs/releases/1.9.5.txt:5
msgid "*April 1, 2016*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.12.txt:7
msgid "Django 1.8.12 fixes several bugs in 1.8.11."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.12.txt:12
#: ../../../../sources/1.10/docs/releases/1.9.5.txt:12
msgid ""
"Made ``MultiPartParser`` ignore filenames that normalize to an empty string "
"to fix crash in ``MemoryFileUploadHandler`` on specially crafted user input "
"(:ticket:`26325`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.12.txt:16
#: ../../../../sources/1.10/docs/releases/1.9.5.txt:20
msgid ""
"Fixed data loss on SQLite where ``DurationField`` values with fractional "
"seconds could be saved as ``None`` (:ticket:`26324`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.12.txt:19
#: ../../../../sources/1.10/docs/releases/1.9.5.txt:41
msgid ""
"Restored the functionality of the admin's ``raw_id_fields`` in "
"``list_editable`` (:ticket:`26387`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.13.txt:3
msgid "Django 1.8.13 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.13.txt:5
#: ../../../../sources/1.10/docs/releases/1.9.6.txt:5
msgid "*May 2, 2016*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.13.txt:7
msgid "Django 1.8.13 fixes several bugs in 1.8.12."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.13.txt:12
#: ../../../../sources/1.10/docs/releases/1.9.6.txt:16
msgid ""
"Fixed ``TimeField`` microseconds round-tripping on MySQL and SQLite "
"(:ticket:`26498`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.13.txt:15
#: ../../../../sources/1.10/docs/releases/1.9.6.txt:28
msgid ""
"Restored conversion of an empty string to null when saving values of "
"``GenericIPAddressField`` on SQLite and MySQL (:ticket:`26557`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.14.txt:3
msgid "Django 1.8.14 release notes"
msgstr "Informacje o wydaniu Django 1.8.14"

#: ../../../../sources/1.10/docs/releases/1.8.14.txt:5
#: ../../../../sources/1.10/docs/releases/1.9.8.txt:5
msgid "*July 18, 2016*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.14.txt:7
msgid "Django 1.8.14 fixes a security issue and a bug in 1.8.13."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.14.txt:10
#: ../../../../sources/1.10/docs/releases/1.9.8.txt:10
msgid "XSS in admin's add/change related popup"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.14.txt:12
#: ../../../../sources/1.10/docs/releases/1.9.8.txt:12
msgid ""
"Unsafe usage of JavaScript's ``Element.innerHTML`` could result in XSS in "
"the admin's add/change related popup. ``Element.textContent`` is now used to"
" prevent execution of the data."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.14.txt:16
#: ../../../../sources/1.10/docs/releases/1.9.8.txt:16
msgid ""
"The debug view also used ``innerHTML``. Although a security issue wasn't "
"identified there, out of an abundance of caution it's also updated to use "
"``textContent``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.14.txt:23
#: ../../../../sources/1.10/docs/releases/1.9.8.txt:23
msgid ""
"Fixed missing ``varchar/text_pattern_ops`` index on ``CharField`` and "
"``TextField`` respectively when using ``AddField`` on PostgreSQL "
"(:ticket:`26889`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.15.txt:3
msgid "Django 1.8.15 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.15.txt:5
#: ../../../../sources/1.10/docs/releases/1.9.10.txt:5
msgid "*September 26, 2016*"
msgstr "*26 września 2016*"

#: ../../../../sources/1.10/docs/releases/1.8.15.txt:7
msgid "Django 1.8.15 fixes a security issue in 1.8.14."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.15.txt:10
#: ../../../../sources/1.10/docs/releases/1.9.10.txt:10
msgid "CSRF protection bypass on a site with Google Analytics"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.15.txt:12
#: ../../../../sources/1.10/docs/releases/1.9.10.txt:12
msgid ""
"An interaction between Google Analytics and Django's cookie parsing could "
"allow an attacker to set arbitrary cookies leading to a bypass of CSRF "
"protection."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.15.txt:15
#: ../../../../sources/1.10/docs/releases/1.9.10.txt:15
msgid ""
"The parser for ``request.COOKIES`` is simplified to better match the "
"behavior of browsers and to mitigate this attack. ``request.COOKIES`` may "
"now contain cookies that are invalid according to :rfc:`6265` but are "
"possible to set via ``document.cookie``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.16.txt:3
msgid "Django 1.8.16 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.16.txt:7
msgid "Django 1.8.16 fixes two security issues in 1.8.15."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:3
msgid "Django 1.8.2 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:5
msgid "*May 20, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:7
msgid "Django 1.8.2 fixes a security issue and several bugs in 1.8.1."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:10
msgid "Fixed session flushing in the ``cached_db`` backend"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:12
msgid ""
"A change to ``session.flush()`` in the ``cached_db`` session backend in "
"Django 1.8 mistakenly sets the session key to an empty string rather than "
"``None``. An empty string is treated as a valid session key and the session "
"cookie is set accordingly. Any users with an empty string in their session "
"cookie will use the same session store. ``session.flush()`` is called by "
"``django.contrib.auth.logout()`` and, more seriously, by "
"``django.contrib.auth.login()`` when a user switches accounts. If a user is "
"logged in and logs in again to a different account (without logging out) the"
" session is flushed to avoid reuse. After the session is flushed (and its "
"session key becomes ``''``) the account details are set on the session and "
"the session is saved. Any users with an empty string in their session cookie"
" will now be logged into that account."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:28
msgid "Fixed check for template engine alias uniqueness (:ticket:`24685`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:30
msgid ""
"Fixed crash when reusing the same ``Case`` instance in a query "
"(:ticket:`24752`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:33
msgid ""
"Corrected join promotion for ``Case`` expressions. For example, annotating a"
" query with a  ``Case`` expression could unexpectedly filter out results "
"(:ticket:`24766`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:37
msgid ""
"Fixed negated ``Q`` objects in expressions. Cases like "
"``Case(When(~Q(friends__age__lte=30)))`` tried to generate a subquery which "
"resulted in a crash (:ticket:`24705`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:41
msgid ""
"Fixed incorrect GROUP BY clause generation on MySQL when the query's model "
"has a self-referential foreign key (:ticket:`24748`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:44
msgid ""
"Implemented ``ForeignKey.get_db_prep_value()`` so that ``ForeignKey``\\s "
"pointing to :class:`~django.db.models.UUIDField` and inheritance on models "
"with ``UUIDField`` primary keys work correctly (:ticket:`24698`, "
":ticket:`24712`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:49
msgid "Fixed ``isnull`` lookup for ``HStoreField`` (:ticket:`24751`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:51
msgid ""
"Fixed a MySQL crash when a migration removes a combined index "
"(unique_together or index_together) containing a foreign key "
"(:ticket:`24757`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:54
msgid ""
"Fixed session cookie deletion when using :setting:`SESSION_COOKIE_DOMAIN` "
"(:ticket:`24799`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:57
msgid ""
"On PostgreSQL, when no access is granted for the ``postgres`` database, "
"Django now falls back to the default database when it normally requires a "
"\"no database\" connection (:ticket:`24791`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.2.txt:61
msgid ""
"Fixed display of ``contrib.admin``’s ``ForeignKey`` widget when it's used in"
" a row with other fields (:ticket:`24784`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:3
msgid "Django 1.8.3 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:7
msgid "Django 1.8.3 fixes several security issues and bugs in 1.8.2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:9
msgid ""
"Also, ``django.utils.deprecation.RemovedInDjango20Warning`` was renamed to "
"``RemovedInDjango110Warning`` as the version roadmap was revised to 1.9, "
"1.10, 1.11 (LTS), 2.0 (drops Python 2 support). For backwards compatibility,"
" ``RemovedInDjango20Warning`` remains as an importable alias."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:64
msgid "Denial-of-service possibility in URL validation"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:66
msgid ""
":class:`~django.core.validators.URLValidator` included a regular expression "
"that was extremely slow to evaluate against certain invalid inputs. This "
"regular expression has been simplified and optimized."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:73
msgid ""
"Fixed ``BaseRangeField.prepare_value()`` to use each ``base_field``’s "
"``prepare_value()`` method (:ticket:`24841`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:76
msgid ""
"Fixed crash during :djadmin:`makemigrations` if a migrations module either "
"is missing ``__init__.py`` or is a file (:ticket:`24848`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:79
msgid ""
"Fixed ``QuerySet.exists()`` returning incorrect results after annotation "
"with ``Count()`` (:ticket:`24835`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:82
msgid "Corrected ``HStoreField.has_changed()`` (:ticket:`24844`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:84
msgid ""
"Reverted an optimization to the CSRF template context processor which caused"
" a regression (:ticket:`24836`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:87
msgid ""
"Fixed a regression which caused template context processors to overwrite "
"variables set on a ``RequestContext`` after it's created (:ticket:`24847`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:93
msgid ""
"Fixed a crash when using a reverse one-to-one relation in "
"``ModelAdmin.list_display`` (:ticket:`24851`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:96
msgid ""
"Fixed quoting of SQL when renaming a field to ``AutoField`` in PostgreSQL "
"(:ticket:`24892`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:99
msgid ""
"Fixed lack of unique constraint when changing a field from "
"``primary_key=True`` to ``unique=True`` (:ticket:`24893`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:102
msgid ""
"Fixed queryset pickling when using ``prefetch_related()`` after deleting "
"objects (:ticket:`24831`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:105
msgid ""
"Allowed using ``choices`` longer than 1 day with ``DurationField`` "
"(:ticket:`24897`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:108
msgid ""
"Fixed a crash when loading squashed migrations from two apps with a "
"dependency between them, where the dependent app's replaced migrations are "
"partially applied (:ticket:`24895`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:112
msgid ""
"Fixed recording of applied status for squashed (replacement) migrations "
"(:ticket:`24628`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:115
msgid ""
"Fixed queryset annotations when using ``Case`` expressions with "
"``exclude()`` (:ticket:`24833`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:118
msgid ""
"Corrected join promotion for multiple ``Case`` expressions. Annotating a "
"query with multiple  ``Case`` expressions could unexpectedly filter out "
"results (:ticket:`24924`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:122
msgid "Fixed usage of transforms in subqueries (:ticket:`24744`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:127
msgid ""
"Provided better backwards compatibility for the ``verbosity`` argument in "
"``optparse`` management commands by casting it to an integer "
"(:ticket:`24769`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:131
msgid ""
"Fixed ``prefetch_related()`` on databases other than PostgreSQL for models "
"using UUID primary keys (:ticket:`24912`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:134
msgid ""
"Fixed removing ``unique_together`` constraints on MySQL (:ticket:`24972`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:136
msgid ""
"Fixed crash when uploading images with MIME types that Pillow doesn't "
"detect, such as bitmap, in ``forms.ImageField`` (:ticket:`24948`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:139
msgid ""
"Fixed a regression when deleting a model through the admin that has a "
"``GenericRelation`` with a ``related_query_name`` (:ticket:`24940`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:142
msgid ""
"Reallowed non-ASCII values for ``ForeignKey.related_name`` on Python 3 by "
"fixing the false positive system check (:ticket:`25016`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:145
msgid ""
"Fixed inline forms that use a parent object that has a ``UUIDField`` primary"
" key and a child object that has an ``AutoField`` primary key "
"(:ticket:`24958`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:149
msgid ""
"Fixed a regression in the ``unordered_list`` template filter on certain "
"inputs (:ticket:`25031`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:152
msgid ""
"Fixed a regression in ``URLValidator`` that invalidated Punycode TLDs "
"(:ticket:`25059`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.3.txt:155
msgid "Improved `pyinotify` ``runserver`` polling (:ticket:`23882`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.4.txt:3
msgid "Django 1.8.4 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.4.txt:7
msgid "Django 1.8.4 fixes a security issue and several bugs in 1.8.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.4.txt:26
msgid ""
"Added the ability to serialize values from the newly added "
":class:`~django.db.models.UUIDField` (:ticket:`25019`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.4.txt:29
msgid ""
"Added a system check warning if the old ``TEMPLATE_*`` settings are defined "
"in addition to the new ``TEMPLATES`` setting."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.4.txt:32
msgid ""
"Fixed ``QuerySet.raw()`` so ``InvalidQuery`` is not raised when using the "
"``db_column`` name of a ``ForeignKey`` field with ``primary_key=True`` "
"(:ticket:`12768`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.4.txt:36
msgid ""
"Prevented an exception in ``TestCase.setUpTestData()`` from leaking the "
"transaction (:ticket:`25176`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.4.txt:39
msgid ""
"Fixed ``has_changed()`` method in ``contrib.postgres.forms.HStoreField`` "
"(:ticket:`25215`, :ticket:`25233`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.4.txt:42
msgid ""
"Fixed the recording of squashed migrations when running the ``migrate`` "
"command (:ticket:`25231`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.4.txt:45
msgid ""
"Moved the :ref:`unsaved model instance assignment data loss check <unsaved-"
"model-instance-check-18>` to ``Model.save()`` to allow easier usage of in-"
"memory models (:ticket:`25160`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.4.txt:49
msgid ""
"Prevented ``varchar_patterns_ops`` and ``text_patterns_ops`` indexes for "
"``ArrayField`` (:ticket:`25180`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:3
msgid "Django 1.8.5 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:5
msgid "*October 3, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:7
msgid "Django 1.8.5 fixes several bugs in 1.8.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:12
msgid ""
"Made the development server's autoreload more robust (:ticket:`24704`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:14
msgid ""
"Fixed ``AssertionError`` in some delete queries with a model containing a "
"field that is both a foreign and primary key (:ticket:`24951`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:17
msgid "Fixed ``AssertionError`` in some complex queries (:ticket:`24525`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:19
msgid "Fixed a migrations crash with ``GenericForeignKey`` (:ticket:`25040`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:21
msgid ""
"Made ``translation.override()`` clear the overridden language when a "
"translation isn't initially active (:ticket:`25295`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:24
msgid ""
"Fixed crash when using a value in ``ModelAdmin.list_display`` that clashed "
"with a reverse field on the model (:ticket:`25299`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:27
msgid ""
"Fixed autocompletion for options of non-``argparse`` management commands "
"(:ticket:`25372`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:30
msgid ""
"Alphabetized ordering of imports in ``from django.db import migrations, "
"models`` statement in newly created migrations (:ticket:`25384`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:33
msgid ""
"Fixed migrations crash on MySQL when adding a text or a blob field with an "
"unhashable default (:ticket:`25393`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:36
msgid ""
"Changed ``Count`` queries to execute ``COUNT(*)`` instead of ``COUNT('*')`` "
"as versions of Django before 1.8 did (:ticket:`25377`). This may fix a "
"performance regression on some databases."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:40
msgid ""
"Fixed custom queryset chaining with ``values()`` and ``values_list()`` "
"(:ticket:`20625`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:43
msgid ""
"Moved the :ref:`unsaved model instance assignment data loss check <unsaved-"
"model-instance-check-18>` on reverse relations to ``Model.save()`` "
"(:ticket:`25160`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:47
msgid ""
"Readded inline foreign keys to form instances when validating model formsets"
" (:ticket:`25431`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:50
msgid ""
"Allowed using ORM write methods after disabling autocommit with "
":func:`set_autocommit(False) <django.db.transaction.set_autocommit>` "
"(:ticket:`24921`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:54
msgid ""
"Fixed the ``manage.py test --keepdb`` option on Oracle (:ticket:`25421`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:56
msgid ""
"Fixed incorrect queries with multiple many-to-many fields on a model with "
"the same 'to' model and with ``related_name`` set to '+' (:ticket:`24505`, "
":ticket:`25486`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.5.txt:60
msgid ""
"Fixed pickling a ``SimpleLazyObject`` wrapping a model (:ticket:`25389`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:3
msgid "Django 1.8.6 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:5
msgid "*November 4, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:7
msgid ""
"Django 1.8.6 adds official support for Python 3.5 and fixes several bugs in "
"1.8.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:13
msgid ""
"Fixed a regression causing ``ModelChoiceField`` to ignore "
"``prefetch_related()`` on its queryset (:ticket:`25496`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:16
msgid ""
"Allowed \"mode=memory\" in SQLite test database name if supported "
"(:ticket:`12118`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:19
msgid ""
"Fixed system check crash on ``ForeignKey`` to abstract model "
"(:ticket:`25503`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:22
msgid ""
"Fixed incorrect queries when you have multiple ``ManyToManyField``\\s on "
"different models that have the same field name, point to the same model, and"
" have their reverse relations disabled (:ticket:`25545`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:26
msgid "Allowed filtering over a ``RawSQL`` annotation (:ticket:`25506`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:28
msgid ""
"Made the ``Concat`` database function idempotent on SQLite "
"(:ticket:`25517`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:30
msgid ""
"Avoided a confusing stack trace when starting :djadmin:`runserver` with an "
"invalid :setting:`INSTALLED_APPS` setting (:ticket:`25510`). This regression"
" appeared in 1.8.5 as a side effect of fixing :ticket:`24704`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:34
msgid ""
"Made deferred models use their proxied model's ``_meta.apps`` for caching "
"and retrieval (:ticket:`25563`). This prevents any models generated in data "
"migrations using ``QuerySet.defer()`` from leaking to test and application "
"code."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:39
msgid ""
"Fixed a typo in the name of the `strictly_above` PostGIS lookup "
"(:ticket:`25592`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:42
msgid ""
"Fixed crash with ``contrib.postgres.forms.SplitArrayField`` and "
"``IntegerField`` on invalid value (:ticket:`25597`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:45
msgid ""
"Added a helpful error message when Django and South migrations exist in the "
"same directory (:ticket:`25618`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:48
msgid ""
"Fixed a regression in ``URLValidator`` that allowed URLs with consecutive "
"dots in the domain section (like ``http://example..com/``) to pass "
"(:ticket:`25620`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.6.txt:52
msgid ""
"Fixed a crash with ``GenericRelation`` and "
"``BaseModelAdmin.to_field_allowed`` (:ticket:`25622`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:3
msgid "Django 1.8.7 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:7
msgid "Django 1.8.7 fixes a security issue and several bugs in 1.8.6."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:9
msgid ""
"Additionally, Django's vendored version of six, :mod:`django.utils.six`, has"
" been upgraded to the latest release (1.10.0)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:28
msgid ""
"Fixed a crash of the debug view during the autumn DST change when "
":setting:`USE_TZ` is ``False`` and ``pytz`` is installed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:31
msgid ""
"Fixed a regression in 1.8.6 that caused database routers without an "
"``allow_migrate()`` method to crash (:ticket:`25686`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:34
msgid ""
"Fixed a regression in 1.8.6 by restoring the ability to use ``Manager`` "
"objects for the ``queryset`` argument of ``ModelChoiceField`` "
"(:ticket:`25683`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:38
msgid ""
"Fixed a regression in 1.8.6 that caused an application with South migrations"
" in the ``migrations`` directory to fail (:ticket:`25618`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:44
msgid ""
"Fixed a regression in 1.8 by making ``gettext()`` once again return UTF-8 "
"bytestrings on Python 2 if the input is a bytestring (:ticket:`25720`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:47
msgid ""
"Fixed serialization of "
":class:`~django.contrib.postgres.fields.DateRangeField` and "
":class:`~django.contrib.postgres.fields.DateTimeRangeField` "
"(:ticket:`24937`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:51
msgid "Fixed the exact lookup of ``ArrayField`` (:ticket:`25666`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:53
msgid ""
"Fixed ``Model.refresh_from_db()`` updating of ``ForeignKey`` fields with "
"``on_delete=models.SET_NULL`` (:ticket:`25715`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:56
msgid ""
"Fixed a duplicate query regression in 1.8 on proxied model deletion "
"(:ticket:`25685`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:59
msgid ""
"Fixed ``set_FOO_order()`` crash when the ``ForeignKey`` of a model with "
"``order_with_respect_to`` references a model with a ``OneToOneField`` "
"primary key (:ticket:`25786`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.7.txt:63
msgid ""
"Fixed incorrect validation for ``PositiveIntegerField`` and "
"``PositiveSmallIntegerField`` on MySQL resulting in values greater than "
"4294967295 or 65535, respectively, passing validation and being silently "
"truncated by the database (:ticket:`25767`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:3
msgid "Django 1.8.8 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:5
#: ../../../../sources/1.10/docs/releases/1.9.1.txt:5
msgid "*January 2, 2016*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:7
msgid "Django 1.8.8 fixes several bugs in 1.8.7."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:9
msgid ""
"Python 3.2 users, please be advised that we've decided to drop support for "
"Python 3.2 in Django 1.8.x at the end of 2016. We won't break things "
"intentionally after that, but we won't test subsequent releases against "
"Python 3.2 either. Upstream support for Python 3.2 ends February 2016 so we "
"don't find much value in providing security updates for a version of Python "
"that could be insecure. To read more about the decision and to let us know "
"if this will be problematic for you, please read the `django-developers "
"thread <https://groups.google.com/d/topic/django-"
"developers/eMu5UQpUdWs/discussion>`_."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:21
msgid ""
"Fixed incorrect ``unique_together`` field name generation by ``inspectdb`` "
"(:ticket:`25274`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:24
msgid ""
"Corrected ``__len`` query lookup on ``ArrayField`` for empty arrays "
"(:ticket:`25772`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:27
msgid ""
"Restored the ability to use custom formats from ``formats.py`` with "
"``django.utils.formats.get_format()`` and the ``date`` template filter "
"(:ticket:`25812`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:31
#: ../../../../sources/1.10/docs/releases/1.9.1.txt:20
msgid ""
"Fixed a state bug when migrating a ``SeparateDatabaseAndState`` operation "
"backwards (:ticket:`25896`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:34
#: ../../../../sources/1.10/docs/releases/1.9.1.txt:26
msgid ""
"Fixed missing ``varchar/text_pattern_ops`` index on ``CharField`` and "
"``TextField`` respectively when using ``AlterField`` on PostgreSQL "
"(:ticket:`25412`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:38
#: ../../../../sources/1.10/docs/releases/1.9.1.txt:44
msgid ""
"Fixed a state bug when using an ``AlterModelManagers`` operation "
"(:ticket:`25852`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:41
#: ../../../../sources/1.10/docs/releases/1.9.1.txt:54
msgid ""
"Fixed a regression which prevented using a language not in Django's default "
"language list (:setting:`LANGUAGES`) (:ticket:`25915`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:44
msgid ""
"``django.views.decorators.cache.never_cache()`` now sends more persuasive "
"headers (added ``no-cache, no-store, must-revalidate`` to ``Cache-Control``)"
" to better prevent caching (:ticket:`13008`). This fixes a problem where a "
"page refresh in Firefox cleared the selected entries in the admin's "
"``filter_horizontal`` and ``filter_vertical`` widgets, which could result in"
" inadvertent data loss if a user didn't notice that and then submitted the "
"form (:ticket:`22955`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:52
#: ../../../../sources/1.10/docs/releases/1.9.1.txt:71
msgid ""
"Fixed a regression in the admin which ignored line breaks in read-only "
"fields instead of converting them to ``<br>`` (:ticket:`25465`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:55
#: ../../../../sources/1.10/docs/releases/1.9.1.txt:77
msgid ""
"Made ``loaddata`` skip disabling and enabling database constraints when it "
"doesn't load any fixtures (:ticket:`23372`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.8.txt:58
#: ../../../../sources/1.10/docs/releases/1.9.1.txt:83
msgid ""
"Fixed a crash in ``QuerySet.values()/values_list()`` after an ``annotate()``"
" and ``order_by()`` when ``values()/values_list()`` includes a field not in "
"the ``order_by()`` (:ticket:`25316`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.9.txt:3
msgid "Django 1.8.9 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.9.txt:5
#: ../../../../sources/1.10/docs/releases/1.9.2.txt:5
msgid "*February 1, 2016*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.9.txt:7
msgid "Django 1.8.9 fixes several bugs in 1.8.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.9.txt:12
#: ../../../../sources/1.10/docs/releases/1.9.2.txt:41
msgid ""
"Fixed a regression that caused the \"user-tools\" items to display on the "
"admin's logout page (:ticket:`26035`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.9.txt:15
#: ../../../../sources/1.10/docs/releases/1.9.2.txt:44
msgid ""
"Fixed a crash in the translations system when the current language has no "
"translations (:ticket:`26046`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.9.txt:18
#: ../../../../sources/1.10/docs/releases/1.9.2.txt:47
msgid ""
"Fixed a regression that caused the incorrect day to be selected when opening"
" the admin calendar widget for timezones from GMT+0100 to GMT+1200 "
"(:ticket:`24980`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.9.txt:22
#: ../../../../sources/1.10/docs/releases/1.9.2.txt:55
msgid ""
"Fixed a regression in 1.8.8 causing incorrect index handling in migrations "
"on PostgreSQL when adding ``db_index=True`` or ``unique=True`` to a "
"``CharField`` or ``TextField`` that already had the other specified, or when"
" removing one of them from a field that had both, or when adding "
"``unique=True`` to a field already listed in ``unique_together`` "
"(:ticket:`26034`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.9.txt:29
msgid ""
"Fixed a crash when using an ``__in`` lookup inside a ``Case`` expression "
"(:ticket:`26071`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.9.txt:32
#: ../../../../sources/1.10/docs/releases/1.9.2.txt:81
msgid ""
"Fixed a crash when using a reverse ``OneToOneField`` in "
"``ModelAdmin.readonly_fields`` (:ticket:`26060`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.9.txt:35
#: ../../../../sources/1.10/docs/releases/1.9.2.txt:95
msgid ""
"Fixed a regression in Django 1.8.5 that broke copying a ``SimpleLazyObject``"
" with ``copy.copy()`` (:ticket:`26122`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.8.9.txt:38
#: ../../../../sources/1.10/docs/releases/1.9.2.txt:101
msgid ""
"Fixed the ``contrib.gis`` map widgets when using "
"``USE_THOUSAND_SEPARATOR=True`` (:ticket:`20415`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:3
msgid "Django 1.9 release notes"
msgstr "Informacje o wydaniu Django 1.9"

#: ../../../../sources/1.10/docs/releases/1.9.txt:5
msgid "*December 1, 2015*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:7
msgid "Welcome to Django 1.9!"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:9
msgid ""
"These release notes cover the :ref:`new features <whats-new-1.9>`, as well "
"as some :ref:`backwards incompatible changes <backwards-incompatible-1.9>` "
"you'll want to be aware of when upgrading from Django 1.8 or older versions."
" We've :ref:`dropped some features<removed-features-1.9>` that have reached "
"the end of their deprecation cycle, and we've :ref:`begun the deprecation "
"process for some features <deprecated-features-1.9>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:22
msgid ""
"Django 1.9 requires Python 2.7, 3.4, or 3.5. We **highly recommend** and "
"only officially support the latest release of each series."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:25
msgid "The Django 1.8 series is the last to support Python 3.2 and 3.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:30
msgid "What's new in Django 1.9"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:33
msgid "Performing actions after a transaction commit"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:35
msgid ""
"The new :func:`~django.db.transaction.on_commit` hook allows performing "
"actions after a database transaction is successfully committed. This is "
"useful for tasks such as sending notification emails, creating queued tasks,"
" or invalidating caches."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:40
msgid ""
"This functionality from the `django-transaction-hooks`_ package has been "
"integrated into Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:46
msgid "Password validation"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:48
msgid ""
"Django now offers password validation to help prevent the usage of weak "
"passwords by users. The validation is integrated in the included password "
"change and reset forms and is simple to integrate in any other code. "
"Validation is performed by one or more validators, configured in the new "
":setting:`AUTH_PASSWORD_VALIDATORS` setting."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:54
msgid ""
"Four validators are included in Django, which can enforce a minimum length, "
"compare the password to the user's attributes like their name, ensure "
"passwords aren't entirely numeric, or check against an included list of "
"common passwords. You can combine multiple validators, and some validators "
"have custom configuration options. For example, you can choose to provide a "
"custom list of common passwords. Each validator provides a help text to "
"explain its requirements to the user."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:62
msgid ""
"By default, no validation is performed and all passwords are accepted, so if"
" you don't set :setting:`AUTH_PASSWORD_VALIDATORS`, you will not see any "
"change. In new projects created with the default :djadmin:`startproject` "
"template, a simple set of validators is enabled. To enable basic validation "
"in the included auth forms for your project, you could set, for example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:83
msgid "See :ref:`password-validation` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:86
msgid "Permission mixins for class-based views"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:88
msgid ""
"Django now ships with the mixins "
":class:`~django.contrib.auth.mixins.AccessMixin`, "
":class:`~django.contrib.auth.mixins.LoginRequiredMixin`, "
":class:`~django.contrib.auth.mixins.PermissionRequiredMixin`, and "
":class:`~django.contrib.auth.mixins.UserPassesTestMixin` to provide the "
"functionality of the ``django.contrib.auth.decorators`` for class-based "
"views. These mixins have been taken from, or are at least inspired by, the "
"`django-braces`_ project."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:97
msgid ""
"There are a few differences between Django's and django-braces' "
"implementation, though:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:100
msgid ""
"The :attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` "
"attribute can only be ``True`` or ``False``. Custom exceptions or callables "
"are not supported."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:104
msgid ""
"The :meth:`~django.contrib.auth.mixins.AccessMixin.handle_no_permission` "
"method does not take a ``request`` argument. The current request is "
"available in ``self.request``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:108
msgid ""
"The custom ``test_func()`` of "
":class:`~django.contrib.auth.mixins.UserPassesTestMixin` does not take a "
"``user`` argument. The current user is available in ``self.request.user``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:112
msgid ""
"The :attr:`permission_required "
"<django.contrib.auth.mixins.PermissionRequiredMixin>` attribute supports a "
"string (defining one permission) or a list/tuple of strings (defining "
"multiple permissions) that need to be fulfilled to grant access."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:117
msgid ""
"The new "
":attr:`~django.contrib.auth.mixins.AccessMixin.permission_denied_message` "
"attribute allows passing a message to the ``PermissionDenied`` exception."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:123
msgid "New styling for ``contrib.admin``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:125
msgid ""
"The admin sports a modern, flat design with new SVG icons which look perfect"
" on HiDPI screens. It still provides a fully-functional experience to `YUI's"
" A-grade`_ browsers. Older browser may experience varying levels of graceful"
" degradation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:133
msgid "Running tests in parallel"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:135
msgid ""
"The :djadmin:`test` command now supports a :option:`--parallel <test "
"--parallel>` option to run a project's tests in multiple processes in "
"parallel."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:138
msgid ""
"Each process gets its own database. You must ensure that different test "
"cases don't access the same resources. For instance, test cases that touch "
"the filesystem should create a temporary directory for their own use."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:142
msgid ""
"This option is enabled by default for Django's own test suite provided:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:144
msgid "the OS supports it (all but Windows)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:145
msgid ""
"the database backend supports it (all the built-in backends but Oracle)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:153
msgid "Admin views now have ``model_admin`` or ``admin_site`` attributes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:155
msgid ""
"The URL of the admin change view has been changed (was at "
"``/admin/<app>/<model>/<pk>/`` by default and is now at "
"``/admin/<app>/<model>/<pk>/change/``). This should not affect your "
"application unless you have hardcoded admin URLs. In that case, replace "
"those links by :ref:`reversing admin URLs <admin-reverse-urls>` instead. "
"Note that the old URL still redirects to the new one for backwards "
"compatibility, but it may be removed in a future version."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:163
msgid ""
":meth:`ModelAdmin.get_list_select_related() "
"<django.contrib.admin.ModelAdmin.get_list_select_related>` was added to "
"allow changing the ``select_related()`` values used in the admin's "
"changelist query based on the request."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:168
msgid ""
"The ``available_apps`` context variable, which lists the available "
"applications for the current user, has been added to the "
":meth:`AdminSite.each_context() "
"<django.contrib.admin.AdminSite.each_context>` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:173
msgid ""
":attr:`AdminSite.empty_value_display "
"<django.contrib.admin.AdminSite.empty_value_display>` and "
":attr:`ModelAdmin.empty_value_display "
"<django.contrib.admin.ModelAdmin.empty_value_display>` were added to "
"override the display of empty values in admin change list. You can also "
"customize the value for each field."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:180
msgid ""
"Added jQuery events :ref:`when an inline form is added or removed <admin-"
"javascript-inline-form-events>` on the change form page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:183
msgid ""
"The time picker widget includes a '6 p.m' option for consistency of having "
"predefined options every 6 hours."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:186
msgid "JavaScript slug generation now supports Romanian characters."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:191
msgid ""
"The model section of the ``admindocs`` now also describes methods that take "
"arguments, rather than ignoring them."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:197
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 20%. This backwards compatible change will not affect users who"
" have subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to "
"change the default value."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:202
msgid ""
"The ``BCryptSHA256PasswordHasher`` will now update passwords if its "
"``rounds`` attribute is changed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:205
msgid ""
"``AbstractBaseUser`` and ``BaseUserManager`` were moved to a new "
"``django.contrib.auth.base_user`` module so that they can be imported "
"without including ``django.contrib.auth`` in :setting:`INSTALLED_APPS` "
"(doing so raised a deprecation warning in older versions and is no longer "
"supported in Django 1.9)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:211
msgid ""
"The permission argument of "
":func:`~django.contrib.auth.decorators.permission_required()` accepts all "
"kinds of iterables, not only list and tuples."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:215
msgid ""
"The new "
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"makes it possible to use ``REMOTE_USER`` for setups where the header is only"
" populated on login pages instead of every request in the session."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:219
msgid ""
"The :func:`~django.contrib.auth.views.password_reset` view accepts an "
"``extra_email_context`` parameter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:223
msgid ":mod:`django.contrib.contenttypes`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:225
msgid ""
"It's now possible to use "
":attr:`~django.db.models.Options.order_with_respect_to` with a "
"``GenericForeignKey``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:232
msgid ""
"All ``GeoQuerySet`` methods have been deprecated and replaced by "
":doc:`equivalent database functions </ref/contrib/gis/functions>`. As soon "
"as the legacy methods have been replaced in your code, you should even be "
"able to remove the special ``GeoManager`` from your GIS-enabled classes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:237
msgid ""
"The GDAL interface now supports instantiating file-based and in-memory "
":ref:`GDALRaster objects <raster-data-source-objects>` from raw data. "
"Setters for raster properties such as projection or pixel values have been "
"added."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:242
msgid ""
"For PostGIS users, the new "
":class:`~django.contrib.gis.db.models.RasterField` allows :ref:`storing "
"GDALRaster objects <creating-and-saving-raster-models>`. It supports "
"automatic spatial index creation and reprojection when saving a model. It "
"does not yet support spatial querying."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:247
msgid ""
"The new :meth:`GDALRaster.warp() <django.contrib.gis.gdal.GDALRaster.warp>` "
"method allows warping a raster by specifying target raster properties such "
"as origin, width, height, or pixel size (amongst others)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:251
msgid ""
"The new :meth:`GDALRaster.transform() "
"<django.contrib.gis.gdal.GDALRaster.transform>` method allows transforming a"
" raster into a different spatial reference system by specifying a target "
"``srid``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:256
msgid ""
"The new :class:`~django.contrib.gis.geoip2.GeoIP2` class allows using "
"MaxMind's GeoLite2 databases which includes support for IPv6 addresses."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:259
msgid ""
"The default OpenLayers library version included in widgets has been updated "
"from 2.13 to 2.13.1."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:265
msgid ""
"Added support for the :lookup:`rangefield.contained_by` lookup for some "
"built in fields which correspond to the range fields."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:268
msgid "Added :class:`~django.contrib.postgres.fields.JSONField`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:270
msgid "Added :doc:`/ref/contrib/postgres/aggregates`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:272
msgid ""
"Added the :class:`~django.contrib.postgres.functions.TransactionNow` "
"database function."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:278
msgid ""
"The session model and ``SessionStore`` classes for the ``db`` and "
"``cached_db`` backends are refactored to allow a custom database session "
"backend to build upon them. See :ref:`extending-database-backed-session-"
"engines` for more details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:286
msgid ""
":func:`~django.contrib.sites.shortcuts.get_current_site` now handles the "
"case where ``request.get_host()`` returns ``domain:port``, e.g. "
"``example.com:80``. If the lookup fails because the host does not match a "
"record in the database and the host has a port, the port is stripped and the"
" lookup is retried with the domain part only."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:295
msgid ""
"Support for multiple enclosures per feed item has been added. If multiple "
"enclosures are defined on a RSS feed, an exception is raised as RSS feeds, "
"unlike Atom feeds, do not support multiple enclosures per feed item."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:302
msgid ""
"``django.core.cache.backends.base.BaseCache`` now has a ``get_or_set()`` "
"method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:305
msgid ""
":func:`django.views.decorators.cache.never_cache` now sends more persuasive "
"headers (added ``no-cache, no-store, must-revalidate`` to ``Cache-Control``)"
" to better prevent caching. This was also added in Django 1.8.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:312
msgid ""
"The request header's name used for CSRF authentication can be customized "
"with :setting:`CSRF_HEADER_NAME`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:315
msgid ""
"The CSRF referer header is now validated against the "
":setting:`CSRF_COOKIE_DOMAIN` setting if set. See :ref:`how-csrf-works` for "
"details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:319
msgid ""
"The new :setting:`CSRF_TRUSTED_ORIGINS` setting provides a way to allow "
"cross-origin unsafe requests (e.g. ``POST``) over HTTPS."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:325
msgid ""
"The PostgreSQL backend (``django.db.backends.postgresql_psycopg2``) is also "
"available as ``django.db.backends.postgresql``. The old name will continue "
"to be available for backwards compatibility."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:332
msgid ""
":meth:`Storage.get_valid_name() "
"<django.core.files.storage.Storage.get_valid_name>` is now called when the "
":attr:`~django.db.models.FileField.upload_to` is a callable."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:336
msgid ""
":class:`~django.core.files.File` now has the ``seekable()`` method when "
"using Python 3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:342
msgid ""
":class:`~django.forms.ModelForm` accepts the new ``Meta`` option "
"``field_classes`` to customize the type of the fields. See :ref:`modelforms-"
"overriding-default-fields` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:346
msgid ""
"You can now specify the order in which form fields are rendered with the "
":attr:`~django.forms.Form.field_order` attribute, the ``field_order`` "
"constructor argument , or the :meth:`~django.forms.Form.order_fields` "
"method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:350
msgid ""
"A form prefix can be specified inside a form class, not only when "
"instantiating a form. See :ref:`form-prefix` for details."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:353
msgid ""
"You can now :ref:`specify keyword arguments <custom-formset-form-kwargs>` "
"that you want to pass to the constructor of forms in a formset."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:356
msgid ""
":class:`~django.forms.SlugField` now accepts an "
":attr:`~django.forms.SlugField.allow_unicode` argument to allow Unicode "
"characters in slugs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:360
msgid ""
":class:`~django.forms.CharField` now accepts a "
":attr:`~django.forms.CharField.strip` argument to strip input data of "
"leading and trailing whitespace.  As this defaults to ``True`` this is "
"different behavior from previous releases."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:365
msgid ""
"Form fields now support the :attr:`~django.forms.Field.disabled` argument, "
"allowing the field widget to be displayed disabled by browsers."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:368
msgid ""
"It's now possible to customize bound fields by overriding a field's "
":meth:`~django.forms.Field.get_bound_field()` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:374
msgid ""
"Class-based views generated using ``as_view()`` now have ``view_class`` and "
"``view_initkwargs`` attributes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:377
msgid ""
":func:`~django.utils.decorators.method_decorator` can now be used with a "
"list or tuple of decorators. It can also be used to :ref:`decorate classes "
"instead of methods <decorating-class-based-views>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:384
msgid ""
"The :func:`django.views.i18n.set_language` view now properly redirects to "
":ref:`translated URLs <url-internationalization>`, when available."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:387
msgid ""
"The :func:`django.views.i18n.javascript_catalog` view now works correctly if"
" used multiple times with different configurations on the same page."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:390
msgid ""
"The :func:`django.utils.timezone.make_aware` function gained an ``is_dst`` "
"argument to help resolve ambiguous times during DST transitions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:393
msgid ""
"You can now use locale variants supported by gettext. These are usually used"
" for languages which can be written in different scripts, for example Latin "
"and Cyrillic (e.g. ``be@latin``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:397
msgid ""
"Added the :func:`django.views.i18n.json_catalog` view to help build a custom"
" client-side i18n library upon Django translations. It returns a JSON object"
" containing a translations catalog, formatting settings, and a plural rule."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:401
msgid ""
"Added the ``name_translated`` attribute to the object returned by the "
":ttag:`get_language_info` template tag. Also added a corresponding template "
"filter: :tfilter:`language_name_translated`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:405
msgid ""
"You can now run :djadmin:`compilemessages` from the root directory of your "
"project and it will find all the app message files that were created by "
":djadmin:`makemessages`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:409
msgid ""
":djadmin:`makemessages` now calls xgettext once per locale directory rather "
"than once per translatable file. This speeds up localization builds."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:412
msgid ""
":ttag:`blocktrans` supports assigning its output to a variable using "
"``asvar``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:415
msgid ""
"Two new languages are available: Colombian Spanish and Scottish Gaelic."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:420
msgid ""
"The new :djadmin:`sendtestemail` command lets you send a test email to "
"easily confirm that email sending through Django is working."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:423
msgid ""
"To increase the readability of the SQL code generated by "
":djadmin:`sqlmigrate`, the SQL code generated for each migration operation "
"is preceded by the operation's description."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:427
msgid ""
"The :djadmin:`dumpdata` command output is now deterministically ordered. "
"Moreover, when the ``--output`` option is specified, it also shows a "
"progress bar in the terminal."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:431
msgid ""
"The :djadmin:`createcachetable` command now has a ``--dry-run`` flag to "
"print out the SQL rather than execute it."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:434
msgid ""
"The :djadmin:`startapp` command creates an ``apps.py`` file. Since it "
"doesn't use ``default_app_config`` (:ref:`a discouraged API <configuring-"
"applications-ref>`), you must specify the app config's path, e.g. "
"``'polls.apps.PollsConfig'``, in :setting:`INSTALLED_APPS` for it to be used"
" (instead of just ``'polls'``)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:440
msgid ""
"When using the PostgreSQL backend, the :djadmin:`dbshell` command can "
"connect to the database using the password from your settings file (instead "
"of requiring it to be manually entered)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:444
msgid ""
"The ``django`` package may be run as a script, i.e. ``python -m django``, "
"which will behave the same as ``django-admin``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:447
msgid ""
"Management commands that have the ``--noinput`` option now also take ``--no-"
"input`` as an alias for that option."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:453
msgid ""
"Initial migrations are now marked with an :attr:`initial = True "
"<django.db.migrations.Migration.initial>` class attribute which allows "
":option:`migrate --fake-initial` to more easily detect initial migrations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:457
msgid ""
"Added support for serialization of ``functools.partial`` and ``LazyObject`` "
"instances."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:460
msgid ""
"When supplying ``None`` as a value in :setting:`MIGRATION_MODULES`, Django "
"will consider the app an app without migrations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:463
msgid ""
"When applying migrations, the \"Rendering model states\" step that's "
"displayed when running migrate with verbosity 2 or higher now computes only "
"the states for the migrations that have already been applied. The model "
"states for migrations being applied are generated on demand, drastically "
"reducing the amount of required memory."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:469
msgid ""
"However, this improvement is not available when unapplying migrations and "
"therefore still requires the precomputation and storage of the intermediate "
"migration states."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:473
msgid ""
"This improvement also requires that Django no longer supports mixed "
"migration plans. Mixed plans consist of a list of migrations where some are "
"being applied and others are being unapplied. This was never officially "
"supported and never had a public API that supports this behavior."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:478
msgid ""
"The :djadmin:`squashmigrations` command now supports specifying the starting"
" migration from which migrations will be squashed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:484
msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>`"
" now works on proxy models."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:487
msgid ""
"Database configuration gained a :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` "
"option for interacting with databases that store datetimes in local time and"
" don't support time zones when :setting:`USE_TZ` is ``True``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:491
msgid ""
"Added the :meth:`RelatedManager.set() "
"<django.db.models.fields.related.RelatedManager.set()>` method to the "
"related managers created by ``ForeignKey``, ``GenericForeignKey``, and "
"``ManyToManyField``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:496
msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.add` method on a "
"reverse foreign key now has a ``bulk`` parameter to allow executing one "
"query regardless of the number of objects being added rather than one query "
"per object."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:501
msgid ""
"Added the ``keep_parents`` parameter to :meth:`Model.delete() "
"<django.db.models.Model.delete>` to allow deleting only a child's data in a "
"model that uses multi-table inheritance."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:505
msgid ""
":meth:`Model.delete() <django.db.models.Model.delete>` and "
":meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` return "
"the number of objects deleted."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:509
msgid ""
"Added a system check to prevent defining both ``Meta.ordering`` and "
"``order_with_respect_to`` on the same model."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:512
msgid ""
":lookup:`Date and time <year>` lookups can be chained with other lookups "
"(such as :lookup:`exact`, :lookup:`gt`, :lookup:`lt`, etc.). For example: "
"``Entry.objects.filter(pub_date__month__gt=6)``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:516
msgid ""
"Time lookups (hour, minute, second) are now supported by "
":class:`~django.db.models.TimeField` for all database backends. Support for "
"backends other than SQLite was added but undocumented in Django 1.7."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:520
msgid ""
"You can specify the ``output_field`` parameter of the "
":class:`~django.db.models.Avg` aggregate in order to aggregate over non-"
"numeric columns, such as ``DurationField``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:524
msgid ""
"Added the :lookup:`date` lookup to :class:`~django.db.models.DateTimeField` "
"to allow querying the field by only the date portion."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:527
msgid ""
"Added the :class:`~django.db.models.functions.Greatest` and "
":class:`~django.db.models.functions.Least` database functions."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:530
msgid ""
"Added the :class:`~django.db.models.functions.Now` database function, which "
"returns the current date and time."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:533
msgid ""
":class:`~django.db.models.Transform` is now a subclass of :ref:`Func() "
"<func-expressions>` which allows ``Transform``\\s to be used on the right "
"hand side of an expression, just like regular ``Func``\\s. This allows "
"registering some database functions like "
":class:`~django.db.models.functions.Length`, "
":class:`~django.db.models.functions.Lower`, and "
":class:`~django.db.models.functions.Upper` as transforms."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:541
msgid ""
":class:`~django.db.models.SlugField` now accepts an "
":attr:`~django.db.models.SlugField.allow_unicode` argument to allow Unicode "
"characters in slugs."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:545
msgid "Added support for referencing annotations in ``QuerySet.distinct()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:547
msgid ""
"``connection.queries`` shows queries with substituted parameters on SQLite."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:549
msgid ""
":doc:`Query expressions </ref/models/expressions>` can now be used when "
"creating new model instances using ``save()``, ``create()``, and "
"``bulk_create()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:556
msgid ""
"Unless :attr:`HttpResponse.reason_phrase "
"<django.http.HttpResponse.reason_phrase>` is explicitly set, it now is "
"determined by the current value of :attr:`HttpResponse.status_code "
"<django.http.HttpResponse.status_code>`. Modifying the value of "
"``status_code`` outside of the constructor will also modify the value of "
"``reason_phrase``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:563
msgid "The debug view now shows details of chained exceptions on Python 3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:565
msgid ""
"The default 40x error views now accept a second positional parameter, the "
"exception that triggered the view."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:568
msgid ""
"View error handlers now support "
":class:`~django.template.response.TemplateResponse`, commonly used with "
"class-based views."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:572
msgid ""
"Exceptions raised by the ``render()`` method are now passed to the "
"``process_exception()`` method of each middleware."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:575
msgid ""
"Request middleware can now set :attr:`HttpRequest.urlconf "
"<django.http.HttpRequest.urlconf>` to ``None`` to revert any changes made by"
" previous middleware and return to using the :setting:`ROOT_URLCONF`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:579
msgid ""
"The :setting:`DISALLOWED_USER_AGENTS` check in "
":class:`~django.middleware.common.CommonMiddleware` now raises a "
":class:`~django.core.exceptions.PermissionDenied` exception as opposed to "
"returning an :class:`~django.http.HttpResponseForbidden` so that "
":data:`~django.conf.urls.handler403` is invoked."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:585
msgid ""
"Added :meth:`HttpRequest.get_port() <django.http.HttpRequest.get_port>` to "
"fetch the originating port of the request."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:588
msgid ""
"Added the ``json_dumps_params`` parameter to "
":class:`~django.http.JsonResponse` to allow passing keyword arguments to the"
" ``json.dumps()`` call used to generate the response."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:592
msgid ""
"The :class:`~django.middleware.common.BrokenLinkEmailsMiddleware` now "
"ignores 404s when the referer is equal to the requested URL. To circumvent "
"the empty referer check already implemented, some Web bots set the referer "
"to the requested URL."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:600
msgid ""
"Template tags created with the :meth:`~django.template.Library.simple_tag` "
"helper can now store results in a template variable by using the ``as`` "
"argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:604
msgid ""
"Added a :meth:`Context.setdefault() <django.template.Context.setdefault>` "
"method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:607
msgid ""
"The :ref:`django.template <django-template-logger>` logger was added and "
"includes the following messages:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:610
msgid "A ``DEBUG`` level message for missing context variables."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:612
msgid ""
"A ``WARNING`` level message for uncaught exceptions raised during the "
"rendering of an ``{% include %}`` when debug mode is off (helpful since ``{%"
" include %}`` silences the exception and returns an empty string)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:617
msgid ""
"The :ttag:`firstof` template tag supports storing the output in a variable "
"using 'as'."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:620
msgid ""
":meth:`Context.update() <django.template.Context.update>` can now be used as"
" a context manager."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:623
msgid "Django template loaders can now extend templates recursively."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:625
msgid ""
"The debug page template postmortem now include output from each engine that "
"is installed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:628
msgid ""
":ref:`Debug page integration <template-debug-integration>` for custom "
"template engines was added."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:631
msgid ""
"The :class:`~django.template.backends.django.DjangoTemplates` backend gained"
" the ability to register libraries and builtins explicitly through the "
"template :setting:`OPTIONS <TEMPLATES-OPTIONS>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:635
msgid ""
"The ``timesince`` and ``timeuntil`` filters were improved to deal with leap "
"years when given large time spans."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:638
msgid ""
"The ``include`` tag now caches parsed templates objects during template "
"rendering, speeding up reuse in places such as for loops."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:644
msgid ""
"Added the :meth:`json() <django.test.Response.json>` method to test client "
"responses to give access to the response body as JSON."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:647
msgid ""
"Added the :meth:`~django.test.Client.force_login()` method to the test "
"client. Use this method to simulate the effect of a user logging into the "
"site while skipping the authentication and verification steps of "
":meth:`~django.test.Client.login()`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:655
msgid ""
"Regular expression lookaround assertions are now allowed in URL patterns."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:657
msgid ""
"The application namespace can now be set using an ``app_name`` attribute on "
"the included module or object. It can also be set by passing a 2-tuple of "
"(<list of patterns>, <application namespace>) as the first argument to "
":func:`~django.conf.urls.include`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:662
msgid "System checks have been added for common URL pattern mistakes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:667
msgid ""
"Added :func:`django.core.validators.int_list_validator` to generate "
"validators of strings containing integers separated with a custom character."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:670
msgid ""
":class:`~django.core.validators.EmailValidator` now limits the length of "
"domain name labels to 63 characters per :rfc:`1034`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:673
msgid ""
"Added :func:`~django.core.validators.validate_unicode_slug` to validate "
"slugs that may contain Unicode characters."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:679
msgid "Backwards incompatible changes in 1.9"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:683
msgid ""
"In addition to the changes outlined in this section, be sure to review the "
":ref:`removed-features-1.9` for the features that have reached the end of "
"their deprecation cycle and therefore been removed. If you haven't updated "
"your code within the deprecation timeline for a given feature, its removal "
"may appear as a backwards incompatible change."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:692
msgid ""
"A couple of new tests rely on the ability of the backend to introspect "
"column defaults (returning the result as ``Field.default``). You can set the"
" ``can_introspect_default`` database feature to ``False`` if your backend "
"doesn't implement this. You may want to review the implementation on the "
"backends that Django includes for reference (:ticket:`24245`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:698
msgid ""
"Registering a global adapter or converter at the level of the DB-API module "
"to handle time zone information of :class:`~datetime.datetime` values passed"
" as query parameters or returned as query results on databases that don't "
"support time zones is discouraged. It can conflict with other libraries."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:703
msgid ""
"The recommended way to add a time zone to :class:`~datetime.datetime` values"
" fetched from the database is to register a converter for ``DateTimeField`` "
"in ``DatabaseOperations.get_db_converters()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:707
msgid ""
"The ``needs_datetime_string_cast`` database feature was removed. Database "
"backends that set it must register a converter instead, as explained above."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:710
msgid ""
"The ``DatabaseOperations.value_to_db_<type>()`` methods were renamed to "
"``adapt_<type>field_value()`` to mirror the ``convert_<type>field_value()`` "
"methods."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:714
msgid ""
"To use the new ``date`` lookup, third-party database backends may need to "
"implement the ``DatabaseOperations.datetime_cast_date_sql()`` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:717
msgid ""
"The ``DatabaseOperations.time_extract_sql()`` method was added. It calls the"
" existing ``date_extract_sql()`` method. This method is overridden by the "
"SQLite backend to add time lookups (hour, minute, second) to "
":class:`~django.db.models.TimeField`, and may be needed by third-party "
"database backends."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:723
msgid ""
"The ``DatabaseOperations.datetime_cast_sql()`` method (not to be confused "
"with ``DatabaseOperations.datetime_cast_date_sql()`` mentioned above) has "
"been removed. This method served to format dates on Oracle long before 1.0, "
"but hasn't been overridden by any core backend in years and hasn't been "
"called anywhere in Django's code or tests."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:729
msgid ""
"In order to support test parallelization, you must implement the "
"``DatabaseCreation._clone_test_db()`` method and set "
"``DatabaseFeatures.can_clone_databases = True``. You may have to adjust "
"``DatabaseCreation.get_test_db_clone_settings()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:735
msgid "Default settings that were tuples are now lists"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:737
msgid ""
"The default settings in ``django.conf.global_settings`` were a combination "
"of lists and tuples. All settings that were formerly tuples are now lists."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:741
msgid "``is_usable`` attribute on template loaders is removed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:743
msgid ""
"Django template loaders previously required an ``is_usable`` attribute to be"
" defined. If a loader was configured in the template settings and this "
"attribute was ``False``, the loader would be silently ignored. In practice, "
"this was only used by the egg loader to detect if setuptools was installed. "
"The ``is_usable`` attribute is now removed and the egg loader instead fails "
"at runtime if setuptools is not installed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:751
msgid "Related set direct assignment"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:753
msgid ""
"Direct assignment of related objects in the ORM used to perform a "
"``clear()`` followed by a call to ``add()``. This caused needlessly large "
"data changes and prevented using the "
":data:`~django.db.models.signals.m2m_changed` signal to track individual "
"changes in many-to-many relations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:758
msgid ""
"Direct assignment now relies on the the new "
":meth:`~django.db.models.fields.related.RelatedManager.set` method on "
"related managers which by default only processes changes between the "
"existing related set and the one that's newly assigned. The previous "
"behavior can be restored by replacing direct assignment by a call to "
"``set()`` with the keyword argument ``clear=True``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:765
msgid ""
"``ModelForm``, and therefore ``ModelAdmin``, internally rely on direct "
"assignment for many-to-many relations and as a consequence now use the new "
"behavior."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:770
msgid "Filesystem-based template loaders catch more specific exceptions"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:772
msgid ""
"When using the :class:`filesystem.Loader "
"<django.template.loaders.filesystem.Loader>` or "
":class:`app_directories.Loader "
"<django.template.loaders.app_directories.Loader>` template loaders, earlier "
"versions of Django raised a :exc:`~django.template.TemplateDoesNotExist` "
"error if a template source existed but was unreadable. This could happen "
"under many circumstances, such as if Django didn't have permissions to open "
"the file, or if the template source was a directory. Now, Django only "
"silences the exception if the template source does not exist. All other "
"situations result in the original ``IOError`` being raised."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:783
msgid "HTTP redirects no longer forced to absolute URIs"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:785
msgid ""
"Relative redirects are no longer converted to absolute URIs. :rfc:`2616` "
"required the ``Location`` header in redirect responses to be an absolute "
"URI, but it has been superseded by :rfc:`7231` which allows relative URIs in"
" ``Location``, recognizing the actual practice of user agents, almost all of"
" which support them."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:791
msgid ""
"Consequently, the expected URLs passed to ``assertRedirects`` should "
"generally no longer include the scheme and domain part of the URLs. For "
"example, ``self.assertRedirects(response, 'http://testserver/some-url/')`` "
"should be replaced by ``self.assertRedirects(response, '/some-url/')`` "
"(unless the redirection specifically contained an absolute URL, of course)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:797
msgid ""
"In the rare case that you need the old behavior (discovered with an ancient "
"version of Apache with ``mod_scgi`` that interprets a relative redirect as "
"an \"internal redirect\"), you can restore it by writing a custom "
"middleware::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:808
msgid "Dropped support for PostgreSQL 9.0"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:810
msgid ""
"Upstream support for PostgreSQL 9.0 ended in September 2015. As a "
"consequence, Django 1.9 sets 9.1 as the minimum PostgreSQL version it "
"officially supports."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:814
msgid "Dropped support for Oracle 11.1"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:816
msgid ""
"Upstream support for Oracle 11.1 ended in August 2015. As a consequence, "
"Django 1.9 sets 11.2 as the minimum Oracle version it officially supports."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:820
msgid "Bulk behavior of ``add()`` method of related managers"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:822
msgid ""
"To improve performance, the ``add()`` methods of the related managers "
"created by ``ForeignKey`` and ``GenericForeignKey`` changed from a series of"
" ``Model.save()`` calls to a single ``QuerySet.update()`` call. The change "
"means that ``pre_save`` and ``post_save`` signals aren't sent anymore. You "
"can use the ``bulk=False`` keyword argument to revert to the previous "
"behavior."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:829
msgid "Template ``LoaderOrigin`` and ``StringOrigin`` are removed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:831
msgid ""
"In previous versions of Django, when a template engine was initialized with "
"debug as ``True``, an instance of ``django.template.loader.LoaderOrigin`` or"
" ``django.template.base.StringOrigin`` was set as the origin attribute on "
"the template object. These classes have been combined into "
":class:`~django.template.base.Origin` and is now always set regardless of "
"the engine debug setting. For a minimal level of backwards compatibility, "
"the old class names will be kept as aliases to the new ``Origin`` class "
"until Django 2.0."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:843
msgid "Changes to the default logging configuration"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:845
msgid ""
"To make it easier to write custom logging configurations, Django's default "
"logging configuration no longer defines 'django.request' and "
"'django.security' loggers. Instead, it defines a single 'django' logger, "
"filtered at the ``INFO`` level, with two handlers:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:850
msgid ""
"'console': filtered at the ``INFO`` level and only active if ``DEBUG=True``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:851
msgid ""
"'mail_admins': filtered at the ``ERROR`` level and only active if "
"``DEBUG=False``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:854
msgid ""
"If you aren't overriding Django's default logging, you should see minimal "
"changes in behavior, but you might see some new logging to the ``runserver``"
" console, for example."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:858
msgid ""
"If you are overriding Django's default logging, you should check to see how "
"your configuration merges with the new defaults."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:862
msgid "``HttpRequest`` details in error reporting"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:864
msgid ""
"It was redundant to display the full details of the "
":class:`~django.http.HttpRequest` each time it appeared as a stack frame "
"variable in the HTML version of the debug page and error email. Thus, the "
"HTTP request will now display the same standard representation as other "
"variables (``repr(request)``). As a result, the "
"``ExceptionReporterFilter.get_request_repr()`` method and the undocumented "
"``django.http.build_request_repr()`` function were removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:872
msgid ""
"The contents of the text version of the email were modified to provide a "
"traceback of the same structure as in the case of AJAX requests. The "
"traceback details are rendered by the "
"``ExceptionReporter.get_traceback_text()`` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:877
msgid ""
"Removal of time zone aware global adapters and converters for datetimes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:879
msgid ""
"Django no longer registers global adapters and converters for managing time "
"zone information on :class:`~datetime.datetime` values sent to the database "
"as query parameters or read from the database in query results. This change "
"affects projects that meet all the following conditions:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:884
msgid "The :setting:`USE_TZ` setting is ``True``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:885
msgid ""
"The database is SQLite, MySQL, Oracle, or a third-party database that "
"doesn't support time zones. In doubt, you can check the value of "
"``connection.features.supports_timezones``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:888
msgid ""
"The code queries the database outside of the ORM, typically with "
"``cursor.execute(sql, params)``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:891
msgid ""
"If you're passing aware :class:`~datetime.datetime` parameters to such "
"queries, you should turn them into naive datetimes in UTC::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:897
msgid ""
"If you fail to do so, the conversion will be performed as in earlier "
"versions (with a deprecation warning) up until Django 1.11. Django 2.0 won't"
" perform any conversion, which may result in data corruption."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:901
msgid ""
"If you're reading :class:`~datetime.datetime` values from the results, they "
"will be naive instead of aware. You can compensate as follows::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:907
msgid ""
"You don't need any of this if you're querying the database through the ORM, "
"even if you're using :meth:`raw() <django.db.models.query.QuerySet.raw>` "
"queries. The ORM takes care of managing time zone information."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:912
msgid "Template tag modules are imported when templates are configured"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:914
msgid ""
"The :class:`~django.template.backends.django.DjangoTemplates` backend now "
"performs discovery on installed template tag modules when instantiated. This"
" update enables libraries to be provided explicitly via the ``'libraries'`` "
"key of :setting:`OPTIONS <TEMPLATES-OPTIONS>` when defining a "
":class:`~django.template.backends.django.DjangoTemplates` backend. Import or"
" syntax errors in template tag modules now fail early at instantiation time "
"rather than when a template with a :ttag:`{% load %}<load>` tag is first "
"compiled."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:924
msgid "``django.template.base.add_to_builtins()`` is removed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:926
msgid ""
"Although it was a private API, projects commonly used ``add_to_builtins()`` "
"to make template tags and filters available without using the :ttag:`{% load"
" %}<load>` tag. This API has been formalized. Projects should now define "
"built-in libraries via the ``'builtins'`` key of :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>` when defining a "
":class:`~django.template.backends.django.DjangoTemplates` backend."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:936
msgid "``simple_tag`` now wraps tag output in ``conditional_escape``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:938
msgid ""
"In general, template tags do not autoescape their contents, and this "
"behavior is :ref:`documented <tags-auto-escaping>`. For tags like "
":class:`~django.template.Library.inclusion_tag`, this is not a problem "
"because the included template will perform autoescaping. For "
":class:`~django.template.Library.assignment_tag`, the output will be escaped"
" when it is used as a variable in the template."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:945
msgid ""
"For the intended use cases of :class:`~django.template.Library.simple_tag`, "
"however, it is very easy to end up with incorrect HTML and possibly an XSS "
"exploit. For example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:953
msgid ""
"In older versions of Django, this will be an XSS issue because "
"``user.first_name`` is not escaped."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:956
msgid ""
"In Django 1.9, this is fixed: if the template context has "
"``autoescape=True`` set (the default), then ``simple_tag`` will wrap the "
"output of the tag function with "
":func:`~django.utils.html.conditional_escape`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:960
msgid ""
"To fix your ``simple_tag``\\s, it is best to apply the following practices:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:962
msgid ""
"Any code that generates HTML should use either the template system or "
":func:`~django.utils.html.format_html`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:965
msgid ""
"If the output of a ``simple_tag`` needs escaping, use "
":func:`~django.utils.html.escape` or "
":func:`~django.utils.html.conditional_escape`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:969
msgid ""
"If you are absolutely certain that you are outputting HTML from a trusted "
"source (e.g. a CMS field that stores HTML entered by admins), you can mark "
"it as such using :func:`~django.utils.safestring.mark_safe`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:973
msgid ""
"Tags that follow these rules will be correct and safe whether they are run "
"on Django 1.9+ or earlier."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:977
msgid "``Paginator.page_range``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:979
msgid ""
":attr:`Paginator.page_range <django.core.paginator.Paginator.page_range>` is"
" now an iterator instead of a list."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:982
msgid ""
"In versions of Django previous to 1.8, ``Paginator.page_range`` returned a "
"``list`` in Python 2 and a ``range`` in Python 3. Django 1.8 consistently "
"returned a list, but an iterator is more efficient."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:986
msgid ""
"Existing code that depends on ``list`` specific features, such as indexing, "
"can be ported by converting the iterator into a ``list`` using ``list()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:990
msgid "Implicit ``QuerySet`` ``__in`` lookup removed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:992
msgid "In earlier versions, queries such as::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:996
msgid "would implicitly convert to::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1000
msgid "resulting in SQL like ``\"related_id IN (SELECT id FROM ...)\"``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1002
msgid ""
"This implicit ``__in`` no longer happens so the \"IN\" SQL is now \"=\", and"
" if the subquery returns multiple results, at least some databases will "
"throw an error."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1008
msgid "``contrib.admin`` browser support"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1010
msgid ""
"The admin no longer supports Internet Explorer 8 and below, as these "
"browsers have reached end-of-life."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1013
msgid ""
"CSS and images to support Internet Explorer 6 and 7 have been removed. PNG "
"and GIF icons have been replaced with SVG icons, which are not supported by "
"Internet Explorer 8 and earlier."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1017
msgid ""
"The jQuery library embedded in the admin has been upgraded from version "
"1.11.2 to 2.1.4. jQuery 2.x has the same API as jQuery 1.x, but does not "
"support Internet Explorer 6, 7, or 8, allowing for better performance and a "
"smaller file size. If you need to support IE8 and must also use the latest "
"version of Django, you can override the admin's copy of jQuery with your own"
" by creating a Django application with this structure::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1031
msgid "``SyntaxError`` when installing Django setuptools 5.5.x"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1033
msgid ""
"When installing Django 1.9 or 1.9.1 with setuptools 5.5.x, you'll see::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1047
msgid ""
"It's safe to ignore these errors (Django will still install just fine), but "
"you can avoid them by upgrading setuptools to a more recent version. If "
"you're using pip, you can upgrade pip using ``pip install -U pip`` which "
"will also upgrade setuptools. This is resolved in later versions of Django "
"as described in the :doc:`/releases/1.9.2`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1056
msgid ""
"The jQuery static files in ``contrib.admin`` have been moved into a "
"``vendor/jquery`` subdirectory."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1059
msgid ""
"The text displayed for null columns in the admin changelist ``list_display``"
" cells has changed from ``(None)`` (or its translated equivalent) to ``-`` "
"(a dash)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1063
msgid ""
"``django.http.responses.REASON_PHRASES`` and "
"``django.core.handlers.wsgi.STATUS_CODE_TEXT`` have been removed. Use "
"Python's stdlib instead: :data:`http.client.responses` for Python 3 and "
"`httplib.responses`_ for Python 2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1070
msgid "``ValuesQuerySet`` and ``ValuesListQuerySet`` have been removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1072
msgid ""
"The ``admin/base.html`` template no longer sets "
"``window.__admin_media_prefix__`` or ``window.__admin_utc_offset__``. Image "
"references in JavaScript that used that value to construct absolute URLs "
"have been moved to CSS for easier customization. The UTC offset is stored on"
" a data attribute of the ``<body>`` tag."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1078
msgid ""
"``CommaSeparatedIntegerField`` validation has been refined to forbid values "
"like ``','``, ``',1'``, and ``'1,,2'``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1081
msgid ""
"Form initialization was moved from the :meth:`ProcessFormView.get() "
"<django.views.generic.edit.ProcessFormView.get>` method to the new "
":meth:`FormMixin.get_context_data() "
"<django.views.generic.edit.FormMixin.get_context_data>` method. This may be "
"backwards incompatible if you have overridden the ``get_context_data()`` "
"method without calling ``super()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1088
msgid "Support for PostGIS 1.5 has been dropped."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1090
msgid ""
"The ``django.contrib.sites.models.Site.domain`` field was changed to be "
":attr:`~django.db.models.Field.unique`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1093
msgid ""
"In order to enforce test isolation, database queries are not allowed by "
"default in :class:`~django.test.SimpleTestCase` tests anymore. You can "
"disable this behavior by setting the "
":attr:`~django.test.SimpleTestCase.allow_database_queries` class attribute "
"to ``True`` on your test class."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1099
msgid ""
"``ResolverMatch.app_name`` was changed to contain the full namespace path in"
" the case of nested namespaces. For consistency with "
"``ResolverMatch.namespace``, the empty value is now an empty string instead "
"of ``None``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1104
msgid "For security hardening, session keys must be at least 8 characters."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1106
msgid ""
"Private function ``django.utils.functional.total_ordering()`` has been "
"removed. It contained a workaround for a ``functools.total_ordering()`` bug "
"in Python versions older than 2.7.3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1110
msgid ""
"XML serialization (either through :djadmin:`dumpdata` or the syndication "
"framework) used to output any characters it received. Now if the content to "
"be serialized contains any control characters not allowed in the XML 1.0 "
"standard, the serialization will fail with a :exc:`ValueError`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1115
msgid ""
":class:`~django.forms.CharField` now strips input of leading and trailing "
"whitespace by default. This can be disabled by setting the new "
":attr:`~django.forms.CharField.strip` argument to ``False``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1119
msgid ""
"Template text that is translated and uses two or more consecutive percent "
"signs, e.g. ``\"%%\"``, may have a new `msgid` after ``makemessages`` is run"
" (most likely the translation will be marked fuzzy). The new ``msgid`` will "
"be marked ``\"#, python-format\"``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1124
msgid ""
"If neither :attr:`request.current_app <django.http.HttpRequest.current_app>`"
" nor :class:`Context.current_app <django.template.Context>` are set, the "
":ttag:`url` template tag will now use the namespace of the current request. "
"Set ``request.current_app`` to ``None`` if you don't want to use a namespace"
" hint."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1130
msgid ""
"The :setting:`SILENCED_SYSTEM_CHECKS` setting now silences messages of all "
"levels. Previously, messages of ``ERROR`` level or higher were printed to "
"the console."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1134
msgid ""
"The ``FlatPage.enable_comments`` field is removed from the ``FlatPageAdmin``"
" as it's unused by the application. If your project or a third-party app "
"makes use of it, :ref:`create a custom ModelAdmin <flatpages-admin>` to add "
"it back."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1138
msgid ""
"The return value of "
":meth:`~django.test.runner.DiscoverRunner.setup_databases` and the first "
"argument of :meth:`~django.test.runner.DiscoverRunner.teardown_databases` "
"changed. They used to be ``(old_names, mirrors)`` tuples. Now they're just "
"the first item, ``old_names``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1144
msgid ""
"By default :class:`~django.test.LiveServerTestCase` attempts to find an "
"available port in the 8081-8179 range instead of just trying port 8081."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1147
msgid ""
"The system checks for :class:`~django.contrib.admin.ModelAdmin` now check "
"instances rather than classes."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1150
msgid ""
"The private API to apply mixed migration plans has been dropped for "
"performance reasons. Mixed plans consist of a list of migrations where some "
"are being applied and others are being unapplied."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1154
msgid ""
"The related model object descriptor classes in "
"``django.db.models.fields.related`` (private API) are moved from the "
"``related`` module to ``related_descriptors`` and renamed as follows:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1158
msgid ""
"``ReverseSingleRelatedObjectDescriptor`` is ``ForwardManyToOneDescriptor``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1159
msgid "``SingleRelatedObjectDescriptor`` is ``ReverseOneToOneDescriptor``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1160
msgid "``ForeignRelatedObjectsDescriptor`` is ``ReverseManyToOneDescriptor``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1161
msgid "``ManyRelatedObjectsDescriptor`` is ``ManyToManyDescriptor``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1163
msgid ""
"If you implement a custom :data:`~django.conf.urls.handler404` view, it must"
" return a response with an HTTP 404 status code. Use "
":class:`~django.http.HttpResponseNotFound` or pass ``status=404`` to the "
":class:`~django.http.HttpResponse`. Otherwise, :setting:`APPEND_SLASH` won't"
" work correctly with ``DEBUG=False``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1172
msgid "Features deprecated in 1.9"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1175
msgid "``assignment_tag()``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1177
msgid ""
"Django 1.4 added the ``assignment_tag`` helper to ease the creation of "
"template tags that store results in a template variable. The "
":meth:`~django.template.Library.simple_tag` helper has gained this same "
"ability, making the ``assignment_tag`` obsolete. Tags that use "
"``assignment_tag`` should be updated to use ``simple_tag``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1184
msgid "``{% cycle %}`` syntax with comma-separated arguments"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1186
msgid ""
"The :ttag:`cycle` tag supports an inferior old syntax from previous Django "
"versions:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1193
msgid ""
"Its parsing caused bugs with the current syntax, so support for the old "
"syntax will be removed in Django 1.10 following an accelerated deprecation."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1197
msgid "``ForeignKey`` and ``OneToOneField`` ``on_delete`` argument"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1199
msgid ""
"In order to increase awareness about cascading model deletion, the "
"``on_delete`` argument of ``ForeignKey`` and ``OneToOneField`` will be "
"required in Django 2.0."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1203
msgid ""
"Update models and existing migrations to explicitly set the argument. Since "
"the default is ``models.CASCADE``, add ``on_delete=models.CASCADE`` to all "
"``ForeignKey`` and ``OneToOneField``\\s that don't use a different option. "
"You can also pass it as the second positional argument if you don't care "
"about compatibility with older versions of Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1210
msgid "``Field.rel`` changes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1212
msgid ""
"``Field.rel`` and its methods and attributes have changed to match the "
"related fields API. The ``Field.rel`` attribute is renamed to "
"``remote_field`` and many of its methods and attributes are either changed "
"or renamed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1216
msgid ""
"The aim of these changes is to provide a documented API for relation fields."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1219
msgid "``GeoManager`` and ``GeoQuerySet`` custom methods"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1221
msgid ""
"All custom ``GeoQuerySet`` methods (``area()``, ``distance()``, ``gml()``, "
"...) have been replaced by equivalent geographic expressions in annotations "
"(see in new features). Hence the need to set a custom ``GeoManager`` to GIS-"
"enabled models is now obsolete. As soon as your code doesn't call any of the"
" deprecated methods, you can simply remove the ``objects = GeoManager()`` "
"lines from your models."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1229
msgid "Template loader APIs have changed"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1231
msgid ""
"Django template loaders have been updated to allow recursive template "
"extending. This change necessitated a new template loader API. The old "
"``load_template()`` and ``load_template_sources()`` methods are now "
"deprecated. Details about the new API can be found :ref:`in the template "
"loader documentation <custom-template-loaders>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1238
msgid ""
"Passing a 3-tuple or an ``app_name`` to :func:`~django.conf.urls.include()`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1240
msgid ""
"The instance namespace part of passing a tuple as an argument to "
"``include()`` has been replaced by passing the ``namespace`` argument to "
"``include()``. For example::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1262
msgid ""
"The ``app_name`` argument to ``include()`` has been replaced by passing a "
"2-tuple (as above), or passing an object or module with an ``app_name`` "
"attribute (as below). If the ``app_name`` is set in this new way, the "
"``namespace`` argument is no longer required. It will default to the value "
"of ``app_name``. For example, the URL patterns in the tutorial are changed "
"from:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1276
msgid "to:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1292
msgid ""
"This change also means that the old way of including an ``AdminSite`` "
"instance is deprecated. Instead, pass ``admin.site.urls`` directly to "
":func:`~django.conf.urls.url()`:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1307
msgid "URL application namespace required if setting an instance namespace"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1309
msgid ""
"In the past, an instance namespace without an application namespace would "
"serve the same purpose as the application namespace, but it was impossible "
"to reverse the patterns if there was an application namespace with the same "
"name. Includes that specify an instance namespace require that the included "
"URLconf sets an application namespace."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1316
msgid "``current_app`` parameter to ``contrib.auth`` views"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1318
msgid ""
"All views in ``django.contrib.auth.views`` have the following structure::"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1329
msgid ""
"As of Django 1.8, ``current_app`` is set on the ``request`` object. For "
"consistency, these views will require the caller to set ``current_app`` on "
"the ``request`` instead of passing it in a separate argument."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1334
msgid "``django.contrib.gis.geoip``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1336
msgid ""
"The :mod:`django.contrib.gis.geoip2` module supersedes "
"``django.contrib.gis.geoip``. The new module provides a similar API except "
"that it doesn't provide the legacy GeoIP-Python API compatibility methods."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1343
msgid ""
"The ``weak`` argument to ``django.dispatch.signals.Signal.disconnect()`` has"
" been deprecated as it has no effect."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1346
msgid ""
"The ``check_aggregate_support()`` method of "
"``django.db.backends.base.BaseDatabaseOperations`` has been deprecated and "
"will be removed in Django 2.0. The more general "
"``check_expression_support()`` should be used instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1351
msgid ""
"``django.forms.extras`` is deprecated. You can find "
":class:`~django.forms.SelectDateWidget` in ``django.forms.widgets`` (or "
"simply ``django.forms``) instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1355
msgid ""
"Private API ``django.db.models.fields.add_lazy_relation()`` is deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1357
msgid ""
"The ``django.contrib.auth.tests.utils.skipIfCustomUser()`` decorator is "
"deprecated. With the test discovery changes in Django 1.6, the tests for "
"``django.contrib`` apps are no longer run as part of the user's project. "
"Therefore, the ``@skipIfCustomUser`` decorator is no longer needed to "
"decorate tests in ``django.contrib.auth``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1363
msgid ""
"If you customized some :ref:`error handlers <error-views>`, the view "
"signatures with only one request parameter are deprecated. The views should "
"now also accept a second ``exception`` positional parameter."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1367
msgid ""
"The ``django.utils.feedgenerator.Atom1Feed.mime_type`` and "
"``django.utils.feedgenerator.RssFeed.mime_type`` attributes are deprecated "
"in favor of ``content_type``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1371
msgid ""
":class:`~django.core.signing.Signer` now issues a warning if an invalid "
"separator is used. This will become an exception in Django 1.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1374
msgid ""
"``django.db.models.Field._get_val_from_obj()`` is deprecated in favor of "
"``Field.value_from_object()``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1377
msgid ""
"``django.template.loaders.eggs.Loader`` is deprecated as distributing "
"applications as eggs is not recommended."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1380
msgid ""
"The ``callable_obj`` keyword argument to "
"``SimpleTestCase.assertRaisesMessage()`` is deprecated. Pass the callable as"
" a positional argument instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1384
msgid ""
"The ``allow_tags`` attribute on methods of ``ModelAdmin`` has been "
"deprecated. Use :func:`~django.utils.html.format_html`, "
":func:`~django.utils.html.format_html_join`, or "
":func:`~django.utils.safestring.mark_safe` when constructing the method's "
"return value instead."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1390
msgid ""
"The ``enclosure`` keyword argument to ``SyndicationFeed.add_item()`` is "
"deprecated. Use the new ``enclosures`` argument which accepts a list of "
"``Enclosure`` objects instead of a single one."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1394
msgid ""
"The ``django.template.loader.LoaderOrigin`` and "
"``django.template.base.StringOrigin`` aliases for "
"``django.template.base.Origin`` are deprecated."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1401
msgid "Features removed in 1.9"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1403
msgid ""
"These features have reached the end of their deprecation cycle and are "
"removed in Django 1.9. See :ref:`deprecated-features-1.7` for details, "
"including how to remove usage of these features."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1407
msgid "``django.utils.dictconfig`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1409
msgid "``django.utils.importlib`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1411
msgid "``django.utils.tzinfo`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1413
msgid "``django.utils.unittest`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1415
msgid "The ``syncdb`` command is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1417
msgid ""
"``django.db.models.signals.pre_syncdb`` and "
"``django.db.models.signals.post_syncdb`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1420
msgid "Support for ``allow_syncdb`` on database routers is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1422
msgid ""
"Automatic syncing of apps without migrations is removed. Migrations are "
"compulsory for all apps unless you pass the :option:`migrate --run-syncdb` "
"option."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1426
msgid ""
"The SQL management commands for apps without migrations, ``sql``, "
"``sqlall``, ``sqlclear``, ``sqldropindexes``, and ``sqlindexes``, are "
"removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1429
msgid ""
"Support for automatic loading of ``initial_data`` fixtures and initial SQL "
"data is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1432
msgid ""
"All models need to be defined inside an installed application or declare an "
"explicit :attr:`~django.db.models.Options.app_label`. Furthermore, it isn't "
"possible to import them before their application is loaded. In particular, "
"it isn't possible to import models inside the root package of an "
"application."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1437
msgid ""
"The model and form ``IPAddressField`` is removed. A stub field remains for "
"compatibility with historical migrations."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1440
msgid "``AppCommand.handle_app()`` is no longer supported."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1442
msgid ""
"``RequestSite`` and ``get_current_site()`` are no longer importable from "
"``django.contrib.sites.models``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1445
msgid "FastCGI support via the ``runfcgi`` management command is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1447
msgid "``django.utils.datastructures.SortedDict`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1449
msgid "``ModelAdmin.declared_fieldsets`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1451
msgid ""
"The ``util`` modules that provided backwards compatibility are removed:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1458
msgid "``ModelAdmin.get_formsets`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1460
msgid ""
"The backward compatible shims introduced to rename the "
"``BaseMemcachedCache._get_memcache_timeout()`` method to "
"``get_backend_timeout()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1464
msgid ""
"The ``--natural`` and ``-n`` options for :djadmin:`dumpdata` are removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1466
msgid ""
"The ``use_natural_keys`` argument for ``serializers.serialize()`` is "
"removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1468
msgid "Private API ``django.forms.forms.get_declared_fields()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1470
msgid ""
"The ability to use a ``SplitDateTimeWidget`` with ``DateTimeField`` is "
"removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1473
msgid "The ``WSGIRequest.REQUEST`` property is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1475
msgid "The class ``django.utils.datastructures.MergeDict`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1477
msgid "The ``zh-cn`` and ``zh-tw`` language codes are removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1479
msgid "The internal ``django.utils.functional.memoize()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1481
msgid "``django.core.cache.get_cache`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1483
msgid "``django.db.models.loading`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1485
msgid "Passing callable arguments to querysets is no longer possible."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1487
msgid ""
"``BaseCommand.requires_model_validation`` is removed in favor of "
"``requires_system_checks``. Admin validators is replaced by admin checks."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1490
msgid ""
"The ``ModelAdmin.validator_class`` and ``default_validator_class`` "
"attributes are removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1493
msgid "``ModelAdmin.validate()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1495
msgid ""
"``django.db.backends.DatabaseValidation.validate_field`` is removed in favor"
" of the ``check_field`` method."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1498
msgid "The ``validate`` management command is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1500
msgid ""
"``django.utils.module_loading.import_by_path`` is removed in favor of "
"``django.utils.module_loading.import_string``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1503
msgid ""
"``ssi`` and ``url`` template tags are removed from the ``future`` template "
"tag library."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1506
msgid "``django.utils.text.javascript_quote()`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1508
msgid ""
"Database test settings as independent entries in the database settings, "
"prefixed by ``TEST_``, are no longer supported."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1511
msgid ""
"The `cache_choices` option to :class:`~django.forms.ModelChoiceField` and "
":class:`~django.forms.ModelMultipleChoiceField` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1514
msgid ""
"The default value of the :attr:`RedirectView.permanent "
"<django.views.generic.base.RedirectView.permanent>` attribute has changed "
"from ``True`` to ``False``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1518
msgid ""
"``django.contrib.sitemaps.FlatPageSitemap`` is removed in favor of "
"``django.contrib.flatpages.sitemaps.FlatPageSitemap``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1521
msgid "Private API ``django.test.utils.TestTemplateLoader`` is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.txt:1523
msgid "The ``django.contrib.contenttypes.generic`` module is removed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:3
msgid "Django 1.9.1 release notes"
msgstr "Informacje o wydaniu Django 1.9.1"

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:7
msgid "Django 1.9.1 fixes several bugs in 1.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:12
msgid ""
"Fixed ``BaseCache.get_or_set()`` with the ``DummyCache`` backend "
"(:ticket:`25840`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:15
msgid ""
"Fixed a regression in ``FormMixin`` causing forms to be validated twice "
"(:ticket:`25548`, :ticket:`26018`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:18
msgid ""
"Fixed a system check crash with nested ``ArrayField``\\s (:ticket:`25867`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:23
msgid ""
"Fixed a regression in ``CommonMiddleware`` causing ``If-None-Match`` checks "
"to always return HTTP 200 (:ticket:`25900`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:30
msgid ""
"Fixed admin's delete confirmation page's summary counts of related objects "
"(:ticket:`25883`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:33
msgid ""
"Added ``from __future__ import unicode_literals`` to the default ``apps.py``"
" created by ``startapp`` on Python 2 (:ticket:`25909`). Add this line to "
"your own ``apps.py`` files created using Django 1.9 if you want your "
"migrations to work on both Python 2 and Python 3."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:38
msgid ""
"Prevented ``QuerySet.delete()`` from crashing on MySQL when querying across "
"relations (:ticket:`25882`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:41
msgid ""
"Fixed evaluation of zero-length slices of ``QuerySet.values()`` "
"(:ticket:`25894`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:47
msgid ""
"Fixed ``TypedChoiceField`` change detection with nullable fields "
"(:ticket:`25942`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:50
msgid ""
"Fixed incorrect timezone warnings in custom admin templates that don't have "
"a ``data-admin-utc-offset`` attribute in the ``body`` tag. "
"(:ticket:`25845`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:57
msgid ""
"Avoided hiding some exceptions, like an invalid ``INSTALLED_APPS`` setting, "
"behind ``AppRegistryNotReady`` when starting ``runserver`` "
"(:ticket:`25510`). This regression appeared in 1.8.5 as a side effect of "
"fixing :ticket:`24704` and by mistake the fix wasn't applied to the "
"``stable/1.9.x`` branch."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:62
msgid ""
"Fixed ``migrate --fake-initial`` detection of many-to-many tables "
"(:ticket:`25922`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:65
msgid ""
"Restored the functionality of the admin's ``list_editable`` add and change "
"buttons (:ticket:`25903`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:68
msgid "Fixed ``isnull`` query lookup for ``ForeignObject`` (:ticket:`25972`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:74
msgid ""
"Fixed incorrect object reference in "
"``SingleObjectMixin.get_context_object_name()`` (:ticket:`26006`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.1.txt:80
msgid ""
"Restored ``contrib.auth`` hashers compatibility with py-bcrypt "
"(:ticket:`26016`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.10.txt:3
msgid "Django 1.9.10 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.10.txt:7
msgid "Django 1.9.10 fixes a security issue in 1.9.9."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.11.txt:3
msgid "Django 1.9.11 release notes"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.11.txt:7
msgid "Django 1.9.11 fixes two security issues in 1.9.10."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:3
msgid "Django 1.9.2 release notes"
msgstr "Informacje o wydaniu Django 1.9.2"

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:7
msgid ""
"Django 1.9.2 fixes a security regression in 1.9 and several bugs in 1.9.1. "
"It also makes a small backwards incompatible change that hopefully doesn't "
"affect any users."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:12
msgid ""
"Security issue: User with \"change\" but not \"add\" permission can create "
"objects for ``ModelAdmin``’s with ``save_as=True``"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:14
msgid ""
"If a ``ModelAdmin`` uses ``save_as=True`` (not the default), the admin "
"provides an option when editing objects to \"Save as new\". A regression in "
"Django 1.9 prevented that form submission from raising a \"Permission "
"Denied\" error for users without the \"add\" permission."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:20
msgid ""
"Backwards incompatible change: ``.py-tpl`` files rewritten in project/app "
"templates"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:22
msgid ""
"The addition of some Django template language syntax to the default app "
"template in Django 1.9 means those files now have some invalid Python "
"syntax. This causes difficulties for packaging systems that unconditionally "
"byte-compile ``*.py`` files."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:27
msgid ""
"To remedy this, a ``.py-tpl`` suffix is now used for the project and app "
"template files included in Django. The ``.py-tpl`` suffix is replaced with "
"``.py`` by the ``startproject`` and ``startapp`` commands. For example, a "
"template with the filename ``manage.py-tpl`` will be created as "
"``manage.py``."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:32
msgid ""
"Please file a ticket if you have a custom project template containing ``.py-"
"tpl`` files and find this behavior problematic."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:38
msgid ""
"Fixed a regression in ``ConditionalGetMiddleware`` causing ``If-None-Match``"
" checks to always return HTTP 200 (:ticket:`26024`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:51
msgid ""
"Fixed a regression in the admin's edit related model popup that caused an "
"escaped value to be displayed in the select dropdown of the parent window "
"(:ticket:`25997`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:62
msgid ""
"Fixed a regression where defining a relation on an abstract model's field "
"using a string model name without an app_label no longer resolved that "
"reference to the abstract model's app if using that model in another "
"application (:ticket:`25858`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:67
msgid ""
"Fixed a crash when destroying an existing test database on MySQL or "
"PostgreSQL (:ticket:`26096`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:70
msgid ""
"Fixed CSRF cookie check on POST requests when ``USE_X_FORWARDED_PORT=True`` "
"(:ticket:`26094`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:73
msgid ""
"Fixed a ``QuerySet.order_by()`` crash when ordering by a relational field of"
" a ``ManyToManyField`` ``through`` model (:ticket:`26092`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:76
msgid ""
"Fixed a regression that caused an exception when making database queries on "
"SQLite with more than 2000 parameters when :setting:`DEBUG` is ``True`` on "
"distributions that increase the ``SQLITE_MAX_VARIABLE_NUMBER`` compile-time "
"limit to over 2000, such as Debian (:ticket:`26063`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:84
msgid ""
"Fixed a crash when calling the ``migrate`` command in a test case with the "
"``available_apps`` attribute pointing to an application with migrations "
"disabled using the ``MIGRATION_MODULES`` setting (:ticket:`26135`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:88
msgid ""
"Restored the ability for testing and debugging tools to determine the "
"template from which a node came from, even during template inheritance or "
"inclusion. Prior to Django 1.9, debugging tools could access the template "
"origin from the node via ``Node.token.source[0]``. This was an undocumented,"
" private API. The origin is now available directly on each node using the "
"``Node.origin`` attribute (:ticket:`25848`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:98
msgid ""
"Always included ``geometry_field`` in the GeoJSON serializer output "
"regardless of the ``fields`` parameter (:ticket:`26138`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.2.txt:104
msgid ""
"Made invalid forms display the initial of values of their disabled fields "
"(:ticket:`26129`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.3.txt:3
msgid "Django 1.9.3 release notes"
msgstr "Informacje o wydaniu Django 1.9.3"

#: ../../../../sources/1.10/docs/releases/1.9.3.txt:7
msgid "Django 1.9.3 fixes two security issues and several bugs in 1.9.2."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.3.txt:61
msgid ""
"Skipped URL checks (new in 1.9) if the ``ROOT_URLCONF`` setting isn't "
"defined (:ticket:`26155`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.3.txt:70
msgid ""
"Fixed a regression for cases where "
"``ForeignObject.get_extra_descriptor_filter()`` returned a ``Q`` object "
"(:ticket:`26153`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.3.txt:74
msgid ""
"Fixed regression with an ``__in=qs`` lookup for a ``ForeignKey`` with "
"``to_field`` set (:ticket:`26196`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.3.txt:84
msgid ""
"Fixed a crash when filtering by a ``Decimal`` in ``RawQuery`` "
"(:ticket:`26219`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.3.txt:90
msgid ""
"Fixed some crashing deprecation shims in ``SimpleTemplateResponse`` that "
"regressed in Django 1.9 (:ticket:`26253`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.3.txt:95
msgid ""
"Changed the admin's \"permission denied\" message in the login template to "
"use ``get_username`` instead of ``username`` to support custom user models "
"(:ticket:`26231`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.3.txt:99
msgid ""
"Fixed a crash when passing a nonexistent template name to the cached "
"template loader's ``load_template()`` method (:ticket:`26280`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.3.txt:105
msgid ""
"Reverted a change in Django 1.9.2 (:ticket:`25858`) that prevented relative "
"lazy relationships defined on abstract models to be resolved according to "
"their concrete model's ``app_label`` (:ticket:`26186`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.4.txt:3
msgid "Django 1.9.4 release notes"
msgstr "Informacje o wydaniu Django 1.9.4"

#: ../../../../sources/1.10/docs/releases/1.9.4.txt:7
msgid ""
"Django 1.9.4 fixes a regression on Python 2 in the 1.9.3 security release "
"where ``utils.http.is_safe_url()`` crashes on bytestring URLs "
"(:ticket:`26308`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.5.txt:3
msgid "Django 1.9.5 release notes"
msgstr "Informacje o wydaniu Django 1.9.5"

#: ../../../../sources/1.10/docs/releases/1.9.5.txt:7
msgid "Django 1.9.5 fixes several bugs in 1.9.4."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.5.txt:16
msgid ""
"Fixed a race condition in ``BaseCache.get_or_set()`` (:ticket:`26332`). It "
"now returns the ``default`` value instead of ``False`` if there's an error "
"when trying to add the value to the cache."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.5.txt:23
msgid ""
"The forms in ``contrib.auth`` no longer strip trailing and leading "
"whitespace from the password fields (:ticket:`26334`). The change requires "
"users who set their password to something with such whitespace after a site "
"updated to Django 1.9 to reset their password. It provides backwards-"
"compatibility for earlier versions of Django."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.5.txt:29
msgid "Fixed a memory leak in the cached template loader (:ticket:`26306`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.5.txt:31
msgid ""
"Fixed a regression that caused ``collectstatic --clear`` to fail if the "
"storage doesn't implement ``path()`` (:ticket:`26297`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.5.txt:34
msgid ""
"Fixed a crash when using a reverse lookup with a subquery when a "
"``ForeignKey`` has a ``to_field`` set to something other than the primary "
"key (:ticket:`26373`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.5.txt:38
msgid ""
"Fixed a regression in ``CommonMiddleware`` that caused spurious warnings in "
"logs on requests missing a trailing slash (:ticket:`26293`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.5.txt:44
msgid ""
"Fixed a regression with abstract model inheritance and explicit parent links"
" (:ticket:`26413`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.5.txt:47
msgid ""
"Fixed a migrations crash on SQLite when renaming the primary key of a model "
"containing a ``ForeignKey`` to ``'self'`` (:ticket:`26384`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.5.txt:50
msgid ""
"Fixed ``JSONField`` inadvertently escaping its contents when displaying "
"values after failed form validation (:ticket:`25532`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.6.txt:3
msgid "Django 1.9.6 release notes"
msgstr "Informacje o wydaniu Django 1.9.6"

#: ../../../../sources/1.10/docs/releases/1.9.6.txt:7
msgid "Django 1.9.6 fixes several bugs in 1.9.5."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.6.txt:12
msgid ""
"Added support for relative path redirects to the test client and to "
"``SimpleTestCase.assertRedirects()`` because Django 1.9 no longer converts "
"redirects to absolute URIs (:ticket:`26428`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.6.txt:19
msgid ""
"Prevented ``makemigrations`` from generating infinite migrations for a model"
" field that references a ``functools.partial`` (:ticket:`26475`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.6.txt:22
msgid ""
"Fixed a regression where ``SessionBase.pop()`` returned ``None`` rather than"
" raising a ``KeyError`` for nonexistent values (:ticket:`26520`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.6.txt:25
msgid ""
"Fixed a regression causing the cached template loader to crash when using "
"template names starting with a dash (:ticket:`26536`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.6.txt:31
msgid ""
"Fixed a ``makemessages`` regression where temporary ``.py`` extensions were "
"leaked in source file paths (:ticket:`26341`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.7.txt:3
msgid "Django 1.9.7 release notes"
msgstr "Informacje o wydaniu Django 1.9.7"

#: ../../../../sources/1.10/docs/releases/1.9.7.txt:5
msgid "*June 4, 2016*"
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.7.txt:7
msgid "Django 1.9.7 fixes several bugs in 1.9.6."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.7.txt:12
msgid ""
"Removed the need for the ``request`` context processor on the admin login "
"page to fix a regression in 1.9 (:ticket:`26558`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.7.txt:15
msgid ""
"Fixed translation of password validators' ``help_text`` in forms "
"(:ticket:`26544`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.7.txt:18
msgid ""
"Fixed a regression causing the cached template loader to crash when using "
"lazy template names (:ticket:`26603`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.7.txt:21
msgid ""
"Fixed ``on_commit`` callbacks execution order when callbacks make "
"transactions (:ticket:`26627`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.7.txt:24
msgid ""
"Fixed ``HStoreField`` to raise a ``ValidationError`` instead of crashing on "
"non-dictionary JSON input (:ticket:`26672`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.7.txt:27
msgid ""
"Fixed ``dbshell`` crash on PostgreSQL with an empty database name "
"(:ticket:`26698`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.7.txt:30
msgid ""
"Fixed a regression in queries on a ``OneToOneField`` that has ``to_field`` "
"and ``primary_key=True`` (:ticket:`26667`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.8.txt:3
msgid "Django 1.9.8 release notes"
msgstr "Informacje o wydaniu Django 1.9.8"

#: ../../../../sources/1.10/docs/releases/1.9.8.txt:7
msgid "Django 1.9.8 fixes a security issue and several bugs in 1.9.7."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.8.txt:27
msgid ""
"Fixed ``makemessages`` crash on Python 2 with non-ASCII file names "
"(:ticket:`26897`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.9.txt:3
msgid "Django 1.9.9 release notes"
msgstr "Informacje o wydaniu Django 1.9.9"

#: ../../../../sources/1.10/docs/releases/1.9.9.txt:7
msgid "Django 1.9.9 fixes several bugs in 1.9.8."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.9.txt:12
msgid ""
"Fixed invalid HTML in template postmortem on the debug page "
"(:ticket:`26938`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/1.9.9.txt:15
msgid ""
"Fixed some GIS database function crashes on MySQL 5.7 (:ticket:`26657`)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/index.txt:3
msgid "Release notes"
msgstr "Informacje o wydaniach"

#: ../../../../sources/1.10/docs/releases/index.txt:5
msgid ""
"Release notes for the official Django releases. Each release note will tell "
"you what's new in each version, and will also describe any backwards-"
"incompatible changes made in that version."
msgstr "Informacje o oficjalnych wydaniach Django. Każde „informacje o wydaniu” powiedzą ci co jest nowego w każdej wersji i będą opisywać wszystkie zmiany niekompatybilne wstecz dokonane w tej wersji."

#: ../../../../sources/1.10/docs/releases/index.txt:9
msgid ""
"For those :doc:`upgrading to a new version of Django</howto/upgrade-"
"version>`, you will need to check all the backwards-incompatible changes and"
" :doc:`deprecated features</internals/deprecation>` for each 'final' release"
" from the one after your current Django version, up to and including the new"
" version."
msgstr "Ci, którzy :doc:`upgrade'ują się do nowej wersji Django</howto/upgrade-version>`, będą potrzebowali sprawdzić wszystkie zmiany niekompatybilne wstecz i :doc:`zdezaprobowane funkcjonalności</internals/deprecation>` dla każdego „ostatecznego” wydania od pierwszego po twojej bieżącej wersji Django, aż do nowej wersji włącznie."

#: ../../../../sources/1.10/docs/releases/index.txt:16
msgid "Final releases"
msgstr "Wydania ostateczne"

#: ../../../../sources/1.10/docs/releases/index.txt:18
msgid ""
"Below are release notes through Django |version| and its patch releases. "
"Newer versions of the documentation contain the release notes for any later "
"releases."
msgstr "Poniżej znajdują się informacje o wydaniach poczynając od Django |version| i jego wydań patchowych. Nowsze wersje dokumentacji zawierają informacje o wydaniach dla wszystkich wcześniejszych wydań."

#: ../../../../sources/1.10/docs/releases/index.txt:24
msgid "1.10 release"
msgstr "Wydanie 1.10"

#: ../../../../sources/1.10/docs/releases/index.txt:34
msgid "1.9 release"
msgstr "Wydanie 1.9"

#: ../../../../sources/1.10/docs/releases/index.txt:52
msgid "1.8 release"
msgstr "Wydanie 1.8"

#: ../../../../sources/1.10/docs/releases/index.txt:75
msgid "1.7 release"
msgstr "Wydanie 1.7"

#: ../../../../sources/1.10/docs/releases/index.txt:93
msgid "1.6 release"
msgstr "Wydanie 1.6"

#: ../../../../sources/1.10/docs/releases/index.txt:111
msgid "1.5 release"
msgstr "Wydanie 1.5"

#: ../../../../sources/1.10/docs/releases/index.txt:130
msgid "1.4 release"
msgstr "Wydanie 1.4"

#: ../../../../sources/1.10/docs/releases/index.txt:159
msgid "1.3 release"
msgstr "Wydanie 1.3"

#: ../../../../sources/1.10/docs/releases/index.txt:173
msgid "1.2 release"
msgstr "Wydanie 1.2"

#: ../../../../sources/1.10/docs/releases/index.txt:187
msgid "1.1 release"
msgstr "Wydanie 1.1"

#: ../../../../sources/1.10/docs/releases/index.txt:197
msgid "1.0 release"
msgstr "Wydanie 1.0"

#: ../../../../sources/1.10/docs/releases/index.txt:206
msgid "Pre-1.0 releases"
msgstr "Wydania przed-1.0"

#: ../../../../sources/1.10/docs/releases/index.txt:214
msgid "Security releases"
msgstr "Wydania bezpieczeństwa"

#: ../../../../sources/1.10/docs/releases/index.txt:216
msgid ""
"Whenever a security issue is disclosed via :doc:`Django's security policies "
"</internals/security>`, appropriate release notes are now added to all "
"affected release series."
msgstr "Ilekroć przez :doc:`polityki bezpieczeństwa Django </internals/security>` zostanie ujawniony problem bezpieczeństwa, do wszystkich dotkniętych tym problemem serii wydań są dodawane odpowiednie informacje."

#: ../../../../sources/1.10/docs/releases/index.txt:220
msgid ""
"Additionally, :doc:`an archive of disclosed security issues "
"</releases/security>` is maintained."
msgstr "Dodatkowo utrzymywane jest :doc:`archiwum ujawnionych problemów bezpieczeństwa </releases/security>`."

#: ../../../../sources/1.10/docs/releases/security.txt:3
msgid "Archive of security issues"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:5
msgid ""
"Django's development team is strongly committed to responsible reporting and"
" disclosure of security-related issues, as outlined in :doc:`Django's "
"security policies </internals/security>`."
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:9
msgid ""
"As part of that commitment, we maintain the following historical list of "
"issues which have been fixed and disclosed. For each issue, the list below "
"includes the date, a brief description, the `CVE identifier "
"<https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures>`_ if "
"applicable, a list of affected versions, a link to the full disclosure and "
"links to the appropriate patch(es)."
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:16
msgid "Some important caveats apply to this information:"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:18
msgid ""
"Lists of affected versions include only those versions of Django which had "
"stable, security-supported releases at the time of disclosure. This means "
"older versions (whose security support had expired) and versions which were "
"in pre-release (alpha/beta/RC) states at the time of disclosure may have "
"been affected, but are not listed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:25
msgid ""
"The Django project has on occasion issued security advisories, pointing out "
"potential security problems which can arise from improper configuration or "
"from other issues outside of Django itself. Some of these advisories have "
"received CVEs; when that is the case, they are listed here, but as they have"
" no accompanying patches or releases, only the description, disclosure and "
"CVE will be listed."
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:34
msgid "Issues prior to Django's security process"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:36
msgid ""
"Some security issues were handled before Django had a formalized security "
"process in use. For these, new releases may not have been issued at the time"
" and CVEs may not have been assigned."
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:41
msgid "August 16, 2006 - :cve:`2007-0404`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:43
msgid ""
"Filename validation issue in translation framework. `Full description "
"<https://www.djangoproject.com/weblog/2006/aug/16/compilemessages/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:47
#: ../../../../sources/1.10/docs/releases/security.txt:60
#: ../../../../sources/1.10/docs/releases/security.txt:77
#: ../../../../sources/1.10/docs/releases/security.txt:90
#: ../../../../sources/1.10/docs/releases/security.txt:103
#: ../../../../sources/1.10/docs/releases/security.txt:116
#: ../../../../sources/1.10/docs/releases/security.txt:128
#: ../../../../sources/1.10/docs/releases/security.txt:140
#: ../../../../sources/1.10/docs/releases/security.txt:151
#: ../../../../sources/1.10/docs/releases/security.txt:163
#: ../../../../sources/1.10/docs/releases/security.txt:175
#: ../../../../sources/1.10/docs/releases/security.txt:187
#: ../../../../sources/1.10/docs/releases/security.txt:199
#: ../../../../sources/1.10/docs/releases/security.txt:211
#: ../../../../sources/1.10/docs/releases/security.txt:223
#: ../../../../sources/1.10/docs/releases/security.txt:236
#: ../../../../sources/1.10/docs/releases/security.txt:248
#: ../../../../sources/1.10/docs/releases/security.txt:260
#: ../../../../sources/1.10/docs/releases/security.txt:274
#: ../../../../sources/1.10/docs/releases/security.txt:286
#: ../../../../sources/1.10/docs/releases/security.txt:298
#: ../../../../sources/1.10/docs/releases/security.txt:310
#: ../../../../sources/1.10/docs/releases/security.txt:322
#: ../../../../sources/1.10/docs/releases/security.txt:334
#: ../../../../sources/1.10/docs/releases/security.txt:346
#: ../../../../sources/1.10/docs/releases/security.txt:358
#: ../../../../sources/1.10/docs/releases/security.txt:370
#: ../../../../sources/1.10/docs/releases/security.txt:382
#: ../../../../sources/1.10/docs/releases/security.txt:394
#: ../../../../sources/1.10/docs/releases/security.txt:405
#: ../../../../sources/1.10/docs/releases/security.txt:417
#: ../../../../sources/1.10/docs/releases/security.txt:429
#: ../../../../sources/1.10/docs/releases/security.txt:441
#: ../../../../sources/1.10/docs/releases/security.txt:455
#: ../../../../sources/1.10/docs/releases/security.txt:469
#: ../../../../sources/1.10/docs/releases/security.txt:483
#: ../../../../sources/1.10/docs/releases/security.txt:497
#: ../../../../sources/1.10/docs/releases/security.txt:511
#: ../../../../sources/1.10/docs/releases/security.txt:525
#: ../../../../sources/1.10/docs/releases/security.txt:539
#: ../../../../sources/1.10/docs/releases/security.txt:553
#: ../../../../sources/1.10/docs/releases/security.txt:567
#: ../../../../sources/1.10/docs/releases/security.txt:580
#: ../../../../sources/1.10/docs/releases/security.txt:593
#: ../../../../sources/1.10/docs/releases/security.txt:606
#: ../../../../sources/1.10/docs/releases/security.txt:618
#: ../../../../sources/1.10/docs/releases/security.txt:630
#: ../../../../sources/1.10/docs/releases/security.txt:643
#: ../../../../sources/1.10/docs/releases/security.txt:657
#: ../../../../sources/1.10/docs/releases/security.txt:668
#: ../../../../sources/1.10/docs/releases/security.txt:681
#: ../../../../sources/1.10/docs/releases/security.txt:694
#: ../../../../sources/1.10/docs/releases/security.txt:705
#: ../../../../sources/1.10/docs/releases/security.txt:718
#: ../../../../sources/1.10/docs/releases/security.txt:731
#: ../../../../sources/1.10/docs/releases/security.txt:743
#: ../../../../sources/1.10/docs/releases/security.txt:756
#: ../../../../sources/1.10/docs/releases/security.txt:768
#: ../../../../sources/1.10/docs/releases/security.txt:780
#: ../../../../sources/1.10/docs/releases/security.txt:792
#: ../../../../sources/1.10/docs/releases/security.txt:805
msgid "Versions affected"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:49
msgid ""
"Django 0.90 `(patch) <https://github.com/django/django/commit/518d406e53>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:50
msgid ""
"Django 0.91 `(patch) <https://github.com/django/django/commit/518d406e53>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:51
msgid ""
"Django 0.95 `(patch) <https://github.com/django/django/commit/a132d411c6>`__"
" (released January 21 2007)"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:54
msgid "January 21, 2007 - :cve:`2007-0405`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:56
msgid ""
"Apparent \"caching\" of authenticated user. `Full description "
"<https://www.djangoproject.com/weblog/2007/jan/21/0951/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:62
msgid ""
"Django 0.95 `(patch) <https://github.com/django/django/commit/e89f0a6558>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:65
msgid "Issues under Django's security process"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:67
msgid ""
"All other security issues have been handled under versions of Django's "
"security process. These are listed below."
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:71
msgid "October 26, 2007 - :cve:`2007-5712`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:73
msgid ""
"Denial-of-service via arbitrarily-large ``Accept-Language`` header. `Full "
"description <https://www.djangoproject.com/weblog/2007/oct/26/security-"
"fix/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:79
msgid ""
"Django 0.91 `(patch) "
"<https://github.com/django/django/commit/8bc36e726c9e8c75c681d3ad232df8e882aaac81>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:80
msgid ""
"Django 0.95 `(patch) "
"<https://github.com/django/django/commit/412ed22502e11c50dbfee854627594f0e7e2c234>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:81
msgid ""
"Django 0.96 `(patch) "
"<https://github.com/django/django/commit/7dd2dd08a79e388732ce00e2b5514f15bd6d0f6f>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:84
msgid "May 14, 2008 - :cve:`2008-2302`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:86
msgid ""
"XSS via admin login redirect. `Full description "
"<https://www.djangoproject.com/weblog/2008/may/14/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:92
msgid ""
"Django 0.91 `(patch) <https://github.com/django/django/commit/50ce7fb57d>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:93
msgid ""
"Django 0.95 `(patch) <https://github.com/django/django/commit/50ce7fb57d>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:94
msgid ""
"Django 0.96 `(patch) <https://github.com/django/django/commit/7791e5c050>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:97
msgid "September 2, 2008 - :cve:`2008-3909`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:99
msgid ""
"CSRF via preservation of POST data during admin login. `Full description "
"<https://www.djangoproject.com/weblog/2008/sep/02/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:105
msgid ""
"Django 0.91 `(patch) "
"<https://github.com/django/django/commit/44debfeaa4473bd28872c735dd3d9afde6886752>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:106
msgid ""
"Django 0.95 `(patch) "
"<https://github.com/django/django/commit/aee48854a164382c655acb9f18b3c06c3d238e81>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:107
msgid ""
"Django 0.96 `(patch) "
"<https://github.com/django/django/commit/7e0972bded362bc4b851c109df2c8a6548481a8e>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:110
msgid "July 28, 2009 - :cve:`2009-2659`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:112
msgid ""
"Directory-traversal in development server media handler. `Full description "
"<https://www.djangoproject.com/weblog/2009/jul/28/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:118
msgid ""
"Django 0.96 `(patch) <https://github.com/django/django/commit/da85d76fd6>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:119
msgid ""
"Django 1.0 `(patch) <https://github.com/django/django/commit/df7f917b7f>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:122
msgid "October 9, 2009 - :cve:`2009-3965`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:124
msgid ""
"Denial-of-service via pathological regular expression performance. `Full "
"description <https://www.djangoproject.com/weblog/2009/oct/09/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:130
msgid ""
"Django 1.0 `(patch) <https://github.com/django/django/commit/594a28a904>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:131
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/e3e992e18b>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:134
msgid "September 8, 2010 - :cve:`2010-3082`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:136
msgid ""
"XSS via trusting unsafe cookie value. `Full description "
"<https://www.djangoproject.com/weblog/2010/sep/08/security-release/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:142
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/7f84657b6b>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:145
msgid "December 22, 2010 - :cve:`2010-4534`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:147
msgid ""
"Information leakage in administrative interface. `Full description "
"<https://www.djangoproject.com/weblog/2010/dec/22/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:153
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/17084839fd>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:154
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/85207a245b>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:157
msgid "December 22, 2010 - :cve:`2010-4535`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:159
msgid ""
"Denial-of-service in password-reset mechanism. `Full description "
"<https://www.djangoproject.com/weblog/2010/dec/22/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:165
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/7f8dd9cbac>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:166
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/d5d8942a16>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:169
msgid "February 8, 2011 - :cve:`2011-0696`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:171
msgid ""
"CSRF via forged HTTP headers. `Full description "
"<https://www.djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:177
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/408c5c873c>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:178
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/818e70344e>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:181
msgid "February 8, 2011 - :cve:`2011-0697`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:183
msgid ""
"XSS via unsanitized names of uploaded files. `Full description "
"<https://www.djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:189
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/1966786d2d>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:190
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/1f814a9547>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:193
msgid "February 8, 2011 - :cve:`2011-0698`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:195
msgid ""
"Directory-traversal on Windows via incorrect path-separator handling. `Full "
"description <https://www.djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:201
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/570a32a047>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:202
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/194566480b>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:205
msgid "September 9, 2011 - :cve:`2011-4136`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:207
msgid ""
"Session manipulation when using memory-cache-backed session. `Full "
"description <https://www.djangoproject.com/weblog/2011/sep/09/security-"
"releases-issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:213
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/ac7c3a110f>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:214
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/fbe2eead2f>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:217
msgid "September 9, 2011 - :cve:`2011-4137`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:219
msgid ""
"Denial-of-service via ``URLField.verify_exists``. `Full description "
"<https://www.djangoproject.com/weblog/2011/sep/09/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:225
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/7268f8af86>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:226
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/1a76dbefdf>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:229
msgid "September 9, 2011 - :cve:`2011-4138`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:231
msgid ""
"Information leakage/arbitrary request issuance via "
"``URLField.verify_exists``. `Full description "
"<https://www.djangoproject.com/weblog/2011/sep/09/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:238
msgid ""
"Django 1.2: `(patch) <https://github.com/django/django/commit/7268f8af86>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:239
msgid ""
"Django 1.3: `(patch) <https://github.com/django/django/commit/1a76dbefdf>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:242
msgid "September 9, 2011 - :cve:`2011-4139`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:244
msgid ""
"``Host`` header cache poisoning. `Full description "
"<https://www.djangoproject.com/weblog/2011/sep/09/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:250
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/c613af4d64>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:251
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/2f7fadc38e>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:254
msgid "September 9, 2011 - :cve:`2011-4140`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:256
msgid ""
"Potential CSRF via ``Host`` header. `Full description "
"<https://www.djangoproject.com/weblog/2011/sep/09/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:262
msgid "This notification was an advisory only, so no patches were issued."
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:264
msgid "Django 1.2"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:265
msgid "Django 1.3"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:268
msgid "July 30, 2012 - :cve:`2012-3442`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:270
msgid ""
"XSS via failure to validate redirect scheme. `Full description "
"<https://www.djangoproject.com/weblog/2012/jul/30/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:276
msgid ""
"Django 1.3: `(patch) "
"<https://github.com/django/django/commit/4dea4883e6c50d75f215a6b9bcbd95273f57c72d>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:277
msgid ""
"Django 1.4: `(patch) "
"<https://github.com/django/django/commit/e34685034b60be1112160e76091e5aee60149fa1>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:280
msgid "July 30, 2012 - :cve:`2012-3443`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:282
msgid ""
"Denial-of-service via compressed image files. `Full description "
"<https://www.djangoproject.com/weblog/2012/jul/30/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:288
msgid ""
"Django 1.3: `(patch) "
"<https://github.com/django/django/commit/b2eb4787a0fff9c9993b78be5c698e85108f3446>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:289
msgid ""
"Django 1.4: `(patch) "
"<https://github.com/django/django/commit/c14f325c4eef628bc7bfd8873c3a72aeb0219141>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:292
msgid "July 30, 2012 - :cve:`2012-3444`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:294
msgid ""
"Denial-of-service via large image files. `Full description "
"<https://www.djangoproject.com/weblog/2012/jul/30/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:300
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/9ca0ff6268eeff92d0d0ac2c315d4b6a8e229155>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:301
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/da33d67181b53fe6cc737ac1220153814a1509f6>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:304
msgid "October 17, 2012 - :cve:`2012-4520`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:306
msgid ""
"``Host`` header poisoning. `Full description "
"<https://www.djangoproject.com/weblog/2012/oct/17/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:312
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/b45c377f8f488955e0c7069cad3f3dd21910b071>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:313
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/92d3430f12171f16f566c9050c40feefb830a4a3>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:316
msgid "December 10, 2012 - No CVE 1"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:318
msgid ""
"Additional hardening of ``Host`` header handling. `Full description "
"<https://www.djangoproject.com/weblog/2012/dec/10/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:324
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/2da4ace0bc1bc1d79bf43b368cb857f6f0cd6b1b>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:325
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/319627c184e71ae267d6b7f000e293168c7b6e09>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:328
msgid "December 10, 2012 - No CVE 2"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:330
msgid ""
"Additional hardening of redirect validation. `Full description "
"<https://www.djangoproject.com/weblog/2012/dec/10/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:336
msgid ""
"Django 1.3: `(patch) "
"<https://github.com/django/django/commit/1515eb46daa0897ba5ad5f0a2db8969255f1b343>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:337
msgid ""
"Django 1.4: `(patch) "
"<https://github.com/django/django/commit/b2ae0a63aeec741f1e51bac9a95a27fd635f9652>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:340
msgid "February 19, 2013 - No CVE"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:342
msgid ""
"Additional hardening of ``Host`` header handling. `Full description "
"<https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:348
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/27cd872e6e36a81d0bb6f5b8765a1705fecfc253>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:349
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/9936fdb11d0bbf0bd242f259bfb97bbf849d16f8>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:352
msgid "February 19, 2013 - :cve:`2013-1664` / :cve:`2013-1665`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:354
msgid ""
"Entity-based attacks against Python XML libraries. `Full description "
"<https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:360
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/d19a27066b2247102e65412aa66917aff0091112>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:361
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/1c60d07ba23e0350351c278ad28d0bd5aa410b40>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:364
msgid "February 19, 2013 - :cve:`2013-0305`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:366
msgid ""
"Information leakage via admin history log. `Full description "
"<https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:372
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/d3a45e10c8ac8268899999129daa27652ec0da35>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:373
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/0e7861aec73702f7933ce2a93056f7983939f0d6>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:376
msgid "February 19, 2013 - :cve:`2013-0306`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:378
msgid ""
"Denial-of-service via formset ``max_num`` bypass. `Full description "
"<https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:384
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/d7094bbce8cb838f3b40f504f198c098ff1cf727>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:385
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/0cc350a896f70ace18280410eb616a9197d862b0>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:388
msgid "August 13, 2013 - :cve:`2013-4249`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:390
msgid ""
"XSS via admin trusting ``URLField`` values. `Full description "
"<https://www.djangoproject.com/weblog/2013/aug/13/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:396
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/90363e388c61874add3f3557ee654a996ec75d78>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:399
msgid "August 13, 2013 - :cve:`2013-6044`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:401
msgid ""
"Possible XSS via unvalidated URL redirect schemes. `Full description "
"<https://www.djangoproject.com/weblog/2013/aug/13/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:407
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/ec67af0bd609c412b76eaa4cc89968a2a8e5ad6a>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:408
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/1a274ccd6bc1afbdac80344c9b6e5810c1162b5f>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:411
msgid "September 10, 2013 - :cve:`2013-4315`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:413
msgid ""
"Directory-traversal via ``ssi`` template tag. `Full description "
"<https://www.djangoproject.com/weblog/2013/sep/10/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:419
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/87d2750b39f6f2d54b7047225521a44dcd37e896>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:420
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/988b61c550d798f9a66d17ee0511fb7a9a7f33ca>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:423
msgid "September 14, 2013 - :cve:`2013-1443`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:425
msgid ""
"Denial-of-service via large passwords. `Full description "
"<https://www.djangoproject.com/weblog/2013/sep/15/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:431
msgid ""
"Django 1.4 `(patch "
"<https://github.com/django/django/commit/3f3d887a6844ec2db743fee64c9e53e04d39a368>`__"
" and `Python compatibility fix) "
"<https://github.com/django/django/commit/6903d1690a92aa040adfb0c8eb37cf62e4206714>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:432
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/22b74fa09d7ccbc8c52270d648a0da7f3f0fa2bc>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:435
msgid "April 21, 2014 - :cve:`2014-0472`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:437
msgid ""
"Unexpected code execution using ``reverse()``. `Full description "
"<https://www.djangoproject.com/weblog/2014/apr/21/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:443
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/c1a8c420fe4b27fb2caf5e46d23b5712fc0ac535>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:444
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/2a5bcb69f42b84464b24b5c835dca6467b6aa7f1>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:445
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/4352a50871e239ebcdf64eee6f0b88e714015c1b>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:446
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/546740544d7f69254a67b06a3fc7fa0c43512958>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:449
msgid "April 21, 2014 - :cve:`2014-0473`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:451
msgid ""
"Caching of anonymous pages could reveal CSRF token. `Full description "
"<https://www.djangoproject.com/weblog/2014/apr/21/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:457
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/1170f285ddd6a94a65f911a27788ba49ca08c0b0>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:458
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/6872f42757d7ef6a97e0b6ec5db4d2615d8a2bd8>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:459
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/d63e20942f3024f24cb8cd85a49461ba8a9b6736>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:460
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/380545bf85cbf17fc698d136815b7691f8d023ca>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:463
msgid "April 21, 2014 - :cve:`2014-0474`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:465
msgid ""
"MySQL typecasting causes unexpected query results. `Full description "
"<https://www.djangoproject.com/weblog/2014/apr/21/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:471
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/aa80f498de6d687e613860933ac58433ab71ea4b>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:472
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/985434fb1d6bf2335bf96c6ebf91c3674f1f399f>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:473
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/5f0829a27e85d89ad8c433f5c6a7a7d17c9e9292>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:474
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/34526c2f56b863c2103655a0893ac801667e86ea>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:477
msgid "May 18, 2014 - :cve:`2014-1418`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:479
msgid ""
"Caches may be allowed to store and serve private data. `Full description "
"<https://www.djangoproject.com/weblog/2014/may/14/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:485
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/28e23306aa53bbbb8fb87db85f99d970b051026c>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:486
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/4001ec8698f577b973c5a540801d8a0bbea1205b>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:487
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/1abcf3a808b35abae5d425ed4d44cb6e886dc769>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:488
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/7fef18ba9e5a8b47bc24b5bb259c8bf3d3879f2a>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:491
msgid "May 18, 2014 - :cve:`2014-3730`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:493
msgid ""
"Malformed URLs from user input incorrectly validated. `Full description "
"<https://www.djangoproject.com/weblog/2014/may/14/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:499
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/7feb54bbae3f637ab3c4dd4831d4385964f574df>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:500
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/ad32c218850ad40972dcef57beb460f8c979dd6d>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:501
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/601107524523bca02376a0ddc1a06c6fdb8f22f3>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:502
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/e7b0cace455c2da24492660636bfd48c45a19cdf>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:505
msgid "August 20, 2014 - :cve:`2014-0480`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:507
msgid ""
"``reverse()`` can generate URLs pointing to other hosts. `Full description "
"<https://www.djangoproject.com/weblog/2014/aug/20/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:513
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/c2fe73133b62a1d9e8f7a6b43966570b14618d7e>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:514
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/45ac9d4fb087d21902469fc22643f5201d41a0cd>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:515
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/da051da8df5e69944745072611351d4cfc6435d5>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:516
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/bf650a2ee78c6d1f4544a875dcc777cf27fe93e9>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:519
msgid "August 20, 2014 - :cve:`2014-0481`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:521
msgid ""
"File upload denial of service. `Full description "
"<https://www.djangoproject.com/weblog/2014/aug/20/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:527
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/30042d475bf084c6723c6217a21598d9247a9c41>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:528
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/26cd48e166ac4d84317c8ee6d63ac52a87e8da99>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:529
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/dd0c3f4ee1a30c1a1e6055061c6ba6e58c6b54d1>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:530
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/3123f8452cf49071be9110e277eea60ba0032216>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:533
msgid "August 20, 2014 - :cve:`2014-0482`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:535
msgid ""
"``RemoteUserMiddleware`` session hijacking. `Full description "
"<https://www.djangoproject.com/weblog/2014/aug/20/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:541
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/c9e3b9949cd55f090591fbdc4a114fcb8368b6d9>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:542
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/dd68f319b365f6cb38c5a6c106faf4f6142d7d88>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:543
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/0268b855f9eab3377f2821164ef3e66037789e09>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:544
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/1a45d059c70385fcd6f4a3955f3b4e4cc96d0150>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:547
msgid "August 20, 2014 - :cve:`2014-0483`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:549
msgid ""
"Data leakage via querystring manipulation in admin. `Full description "
"<https://www.djangoproject.com/weblog/2014/aug/20/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:555
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/027bd348642007617518379f8b02546abacaa6e0>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:556
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/2a446c896e7c814661fb9c4f212b071b2a7fa446>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:557
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/f7c494f2506250b8cb5923714360a3642ed63e0f>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:558
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:561
msgid "January 13, 2015 - :cve:`2015-0219`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:563
msgid ""
"WSGI header spoofing via underscore/dash conflation. `Full description "
"<https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:569
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/4f6fffc1dc429f1ad428ecf8e6620739e8837450>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:570
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/d7597b31d5c03106eeba4be14a33b32a5e25f4ee>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:571
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/41b4bc73ee0da7b2e09f4af47fc1fd21144c710f>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:574
msgid "January 13, 2015 - :cve:`2015-0220`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:576
msgid ""
"Mitigated possible XSS attack via user-supplied redirect URLs. `Full "
"description <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:582
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/4c241f1b710da6419d9dca160e80b23b82db7758>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:583
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/72e0b033662faa11bb7f516f18a132728aa0ae28>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:584
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/de67dedc771ad2edec15c1d00c083a1a084e1e89>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:587
msgid "January 13, 2015 - :cve:`2015-0221`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:589
msgid ""
"Denial-of-service attack against ``django.views.static.serve()``. `Full "
"description <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:595
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/d020da6646c5142bc092247d218a3d1ce3e993f7>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:596
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/553779c4055e8742cc832ed525b9ee34b174934f>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:597
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/818e59a3f0fbadf6c447754d202d88df025f8f2a>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:600
msgid "January 13, 2015 - :cve:`2015-0222`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:602
msgid ""
"Database denial-of-service with ``ModelMultipleChoiceField``. `Full "
"description <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:608
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/d7a06ee7e571b6dad07c0f5b519b1db02e2a476c>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:609
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/bcfb47780ce7caecb409a9e9c1c314266e41d392>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:612
msgid "March 9, 2015 - :cve:`2015-2241`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:614
msgid ""
"XSS attack via properties in ``ModelAdmin.readonly_fields``. `Full "
"description <https://www.djangoproject.com/weblog/2015/mar/09/security-"
"releases/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:620
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/d16e4e1d6f95e6f46bff53cc4fd0ab398b8e5059>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:621
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/2654e1b93923bac55f12b4e66c5e39b16695ace5>`_"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:624
msgid "March 18, 2015 - :cve:`2015-2316`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:626
msgid ""
"Denial-of-service possibility with ``strip_tags()``. `Full description "
"<https://www.djangoproject.com/weblog/2015/mar/18/security-releases/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:632
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/b6b3cb9899214a23ebb0f4ebf0e0b300b0ee524f>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:633
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/e63363f8e075fa8d66326ad6a1cc3391cc95cd97>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:634
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/5447709a571cd5d95971f1d5d21d4a7edcf85bbd>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:637
msgid "March 18, 2015 - :cve:`2015-2317`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:639
msgid ""
"Mitigated possible XSS attack via user-supplied redirect URLs. `Full "
"description <https://www.djangoproject.com/weblog/2015/mar/18/security-"
"releases/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:645
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/2342693b31f740a422abf7267c53b4e7bc487c1b>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:646
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/5510f070711540aaa8d3707776cd77494e688ef9>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:647
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/2a4113dbd532ce952308992633d802dc169a75f1>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:648
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/770427c2896a078925abfca2317486b284d22f04>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:651
msgid "May 20, 2015 - :cve:`2015-3982`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:653
msgid ""
"Fixed session flushing in the cached_db backend. `Full description "
"<https://www.djangoproject.com/weblog/2015/may/20/security-release/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:659
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/31cb25adecba930bdeee4556709f5a1c42d88fd6>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:662
msgid "July 8, 2015 - :cve:`2015-5143`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:664
msgid ""
"Denial-of-service possibility by filling session store. `Full description "
"<https://www.djangoproject.com/weblog/2015/jul/08/security-releases/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:670
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/66d12d1ababa8f062857ee5eb43276493720bf16>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:671
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/1828f4341ec53a8684112d24031b767eba557663>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:672
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/2e47f3e401c29bc2ba5ab794d483cb0820855fb9>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:675
msgid "July 8, 2015 - :cve:`2015-5144`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:677
msgid ""
"Header injection possibility since validators accept newlines in input. "
"`Full description <https://www.djangoproject.com/weblog/2015/jul/08"
"/security-releases/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:683
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/574dd5e0b0fbb877ae5827b1603d298edc9bb2a0>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:684
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/ae49b4d994656bc037513dcd064cb9ce5bb85649>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:685
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/1ba1cdce7d58e6740fe51955d945b56ae51d072a>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:688
msgid "July 8, 2015 - :cve:`2015-5145`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:690
msgid ""
"Denial-of-service possibility in URL validation. `Full description "
"<https://www.djangoproject.com/weblog/2015/jul/08/security-releases/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:696
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/8f9a4d3a2bc42f14bb437defd30c7315adbff22c>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:699
msgid "August 18, 2015 - :cve:`2015-5963` / :cve:`2015-5964`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:701
msgid ""
"Denial-of-service possibility in ``logout()`` view by filling session store."
" `Full description <https://www.djangoproject.com/weblog/2015/aug/18"
"/security-releases/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:707
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/2eb86b01d7b59be06076f6179a454d0fd0afaff6>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:708
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/2f5485346ee6f84b4e52068c04e043092daf55f7>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:709
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/575f59f9bc7c59a5e41a081d1f5f55fc859c5012>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:712
msgid "November 24, 2015 - :cve:`2015-8213`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:714
msgid ""
"Settings leak possibility in ``date`` template filter. `Full description "
"<https://www.djangoproject.com/weblog/2015/nov/24/security-releases-"
"issued/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:720
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/9f83fc2f66f5a0bac7c291aec55df66050bb6991>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:721
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/8a01c6b53169ee079cb21ac5919fdafcc8c5e172>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:724
msgid "February 1, 2016 - :cve:`2016-2048`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:726
msgid ""
"User with \"change\" but not \"add\" permission can create objects for "
"``ModelAdmin``’s with ``save_as=True``. `Full description "
"<https://www.djangoproject.com/weblog/2016/feb/01/releases-192-and-189/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:733
msgid ""
"Django 1.9 `(patch) "
"<https://github.com/django/django/commit/adbca5e4db42542575734b8e5d26961c8ada7265>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:736
msgid "March 1, 2016 - :cve:`2016-2512`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:738
msgid ""
"Malicious redirect and possible XSS attack via user-supplied redirect URLs "
"containing basic auth. `Full description "
"<https://www.djangoproject.com/weblog/2016/mar/01/security-releases/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:745
msgid ""
"Django 1.9 `(patch) "
"<https://github.com/django/django/commit/fc6d147a63f89795dbcdecb0559256470fff4380>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:746
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/382ab137312961ad62feb8109d70a5a581fe8350>`__"
msgstr "Django 1.8 `(łata) <https://github.com/django/django/commit/382ab137312961ad62feb8109d70a5a581fe8350>`__"

#: ../../../../sources/1.10/docs/releases/security.txt:749
msgid "March 1, 2016 - :cve:`2016-2513`"
msgstr "1 marca 2016 – :cve:`2016-2513`"

#: ../../../../sources/1.10/docs/releases/security.txt:751
msgid ""
"User enumeration through timing difference on password hasher work factor "
"upgrade. `Full description <https://www.djangoproject.com/weblog/2016/mar/01"
"/security-releases/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:758
msgid ""
"Django 1.9 `(patch) "
"<https://github.com/django/django/commit/af7d09b0c5c6ab68e629fd9baf736f9dd203b18e>`__"
msgstr "Django 1.9 `(łata) <https://github.com/django/django/commit/af7d09b0c5c6ab68e629fd9baf736f9dd203b18e>`__"

#: ../../../../sources/1.10/docs/releases/security.txt:759
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/f4e6e02f7713a6924d16540be279909ff4091eb6>`__"
msgstr "Django 1.8 `(łata) <https://github.com/django/django/commit/f4e6e02f7713a6924d16540be279909ff4091eb6>`__"

#: ../../../../sources/1.10/docs/releases/security.txt:762
msgid "July 18, 2016 - :cve:`2016-6186`"
msgstr "18 lipca 2016 – :cve:`2016-6186`"

#: ../../../../sources/1.10/docs/releases/security.txt:764
msgid ""
"XSS in admin's add/change related popup. `Full description "
"<https://www.djangoproject.com/weblog/2016/jul/18/security-releases/>`__"
msgstr "XSS w popupie „dodaj/zmień powiązane” panelu administracyjnego. `Pełny opis <https://www.djangoproject.com/weblog/2016/jul/18/security-releases/>`__"

#: ../../../../sources/1.10/docs/releases/security.txt:770
msgid ""
"Django 1.9 `(patch) "
"<https://github.com/django/django/commit/d03bf6fe4e9bf5b07de62c1a271c4b41a7d3d158>`__"
msgstr "Django 1.9 `(łata) <https://github.com/django/django/commit/d03bf6fe4e9bf5b07de62c1a271c4b41a7d3d158>`__"

#: ../../../../sources/1.10/docs/releases/security.txt:771
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/f68e5a99164867ab0e071a936470958ed867479d>`__"
msgstr "Django 1.8 `(łata) <https://github.com/django/django/commit/f68e5a99164867ab0e071a936470958ed867479d>`__"

#: ../../../../sources/1.10/docs/releases/security.txt:774
msgid "September 26, 2016 - :cve:`2016-7401`"
msgstr "26 września 2016 – :cve:`2016-7401`"

#: ../../../../sources/1.10/docs/releases/security.txt:776
msgid ""
"CSRF protection bypass on a site with Google Analytics. `Full description "
"<https://www.djangoproject.com/weblog/2016/sep/26/security-releases/>`__"
msgstr "Obejście ochrony CSRF na stronie z Google Analytics. `Pełny opis <https://www.djangoproject.com/weblog/2016/sep/26/security-releases/>`__"

#: ../../../../sources/1.10/docs/releases/security.txt:782
msgid ""
"Django 1.9 `(patch) "
"<https://github.com/django/django/commit/d1bc980db1c0fffd6d60677e62f70beadb9fe64a>`__"
msgstr "Django 1.9 `(łata) <https://github.com/django/django/commit/d1bc980db1c0fffd6d60677e62f70beadb9fe64a>`__"

#: ../../../../sources/1.10/docs/releases/security.txt:783
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/6118ab7d0676f0d622278e5be215f14fb5410b6a>`__"
msgstr "Django 1.8 `(łata) <https://github.com/django/django/commit/6118ab7d0676f0d622278e5be215f14fb5410b6a>`__"

#: ../../../../sources/1.10/docs/releases/security.txt:786
msgid "November 1, 2016 - :cve:`2016-9013`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:788
msgid ""
"User with hardcoded password created when running tests on Oracle. `Full "
"description <https://www.djangoproject.com/weblog/2016/nov/01/security-"
"releases/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:794
msgid ""
"Django 1.10 `(patch) "
"<https://github.com/django/django/commit/34e10720d81b8d407aa14d763b6a7fe8f13b4f2e>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:795
msgid ""
"Django 1.9 `(patch) "
"<https://github.com/django/django/commit/4844d86c7728c1a5a3bbce4ad336a8d32304072b>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:796
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/70f99952965a430daf69eeb9947079aae535d2d0>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:799
msgid "November 1, 2016 - :cve:`2016-9014`"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:801
msgid ""
"DNS rebinding vulnerability when ``DEBUG=True``. `Full description "
"<https://www.djangoproject.com/weblog/2016/nov/01/security-releases/>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:807
msgid ""
"Django 1.10 `(patch) "
"<https://github.com/django/django/commit/884e113838e5a72b4b0ec9e5e87aa480f6aa4472>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:808
msgid ""
"Django 1.9 `(patch) "
"<https://github.com/django/django/commit/45acd6d836895a4c36575f48b3fb36a3dae98d19>`__"
msgstr ""

#: ../../../../sources/1.10/docs/releases/security.txt:809
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/c401ae9a7dfb1a94a8a61927ed541d6f93089587>`__"
msgstr ""
