# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# 0d21a39e384d88c2313b89b5042c04cb, 2017
# FrancescoLucia <cisco.lucia@gmail.com>, 2021
# Davide Ferrero <info@davideferrero.com>, 2016
# Fabio Goglia <cryfware@gmail.com>, 2021
# Luca Gallo <lucamichele.gallo@gmail.com>, 2017
# Luciano De Falco Alfano, 2016-2017,2019
# Marco Leasi <marco.leasi@gmail.com>, 2021
# Marco Ventura, 2018
# Mattia Procopio <promat85@gmail.com>, 2015
# Nicola Guglielmi <nicola.guglielmi@gmail.com>, 2021
# palmux <palmux@gmail.com>, 2016
# Paolo Melchiorre <paolo@melchiorre.org>, 2021
# Stefano Brentegani <sbrentegani@gmail.com>, 2019
# 0d21a39e384d88c2313b89b5042c04cb, 2018
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-06 14:49-0500\n"
"PO-Revision-Date: 2021-05-07 14:54+0000\n"
"Last-Translator: FrancescoLucia <cisco.lucia@gmail.com>\n"
"Language-Team: Italian (http://www.transifex.com/django/django-docs/language/"
"it/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: it\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Authentication using ``REMOTE_USER``"
msgstr "Autenticazione usando ``REMOTE_USER``"

msgid ""
"This document describes how to make use of external authentication sources "
"(where the Web server sets the ``REMOTE_USER`` environment variable) in your "
"Django applications.  This type of authentication solution is typically seen "
"on intranet sites, with single sign-on solutions such as IIS and Integrated "
"Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, `Cosign`_, "
"`WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""
"Questo documento descrive come usare sorgenti di autenticazione esterne "
"(dove il Web server imposta la variabile d'ambiente ``REMOTE_USER`` ) nelle "
"tue applicazioni Django. Questo tipo di soluzioni di autenticazione "
"tipicamente è utlizzato in siti intranet, con soluzioni single sign-on come "
"ad esempio IIS e Integrated Windows Authentication o Apache e "
"`mod_authnz_ldap`_, `CAS`_, `Cosign`_, `WebAuth`_, `mod_auth_sspi`_, etc."

msgid ""
"When the Web server takes care of authentication it typically sets the "
"``REMOTE_USER`` environment variable for use in the underlying application.  "
"In Django, ``REMOTE_USER`` is made available in the :attr:`request.META "
"<django.http.HttpRequest.META>` attribute.  Django can be configured to make "
"use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` or "
"``PersistentRemoteUserMiddleware``, and :class:`~django.contrib.auth."
"backends.RemoteUserBackend` classes found in :mod:`django.contrib.auth`."
msgstr ""
"Quando il Web server si occupa dell'autenticazione, tipicamente imposta la "
"variabile d'ambiente ``REMOTE_USER`` affinchè venga usata nella applicazione "
"sottostante.  In Django, ``REMOTE_USER`` è resa disponibile nell'attributo :"
"attr:`request.META <django.http.HttpRequest.META>` .  Django può essere "
"configurato per fare uso del valore di ``REMOTE_USER`` usando il "
"``RemoteUserMiddleware`` o il ``PersistentRemoteUserMiddleware``, e le "
"classi and :class:`~django.contrib.auth.backends.RemoteUserBackend` che si "
"trovano in :mod:`django.contrib.auth`."

msgid "Configuration"
msgstr "Configurazione"

msgid ""
"First, you must add the :class:`django.contrib.auth.middleware."
"RemoteUserMiddleware` to the :setting:`MIDDLEWARE` setting **after** the :"
"class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""
"In primo luogo, devi aggiungere la classe :class:`django.contrib.auth."
"middleware.RemoteUserMiddleware` nell'impostazione :setting:`MIDDLEWARE`  "
"**in seguito** la classe :class:`django.contrib.auth.middleware."
"AuthenticationMiddleware`::"

msgid ""
"Next, you must replace the :class:`~django.contrib.auth.backends."
"ModelBackend` with :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"in the :setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr ""
"Poi, devi sostituire :class:`~django.contrib.auth.backends.ModelBackend` "
"con :class:`~django.contrib.auth.backends.RemoteUserBackend` nella "
"impostazione di :setting:`AUTHENTICATION_BACKENDS` ::"

msgid ""
"With this setup, ``RemoteUserMiddleware`` will detect the username in "
"``request.META['REMOTE_USER']`` and will authenticate and auto-login that "
"user using the :class:`~django.contrib.auth.backends.RemoteUserBackend`."
msgstr ""
"Con questa configurazione, ``RemoteUserMiddleware`` rileverà il nome utente "
"in ``request.META['REMOTE_USER']`` e autenticherà e farà login "
"automaticamente di quell'utente usando la :class:`~django.contrib.auth."
"backends.RemoteUserBackend`."

msgid ""
"Be aware that this particular setup disables authentication with the default "
"``ModelBackend``. This means that if the ``REMOTE_USER`` value is not set "
"then the user is unable to log in, even using Django's admin interface. "
"Adding ``'django.contrib.auth.backends.ModelBackend'`` to the "
"``AUTHENTICATION_BACKENDS`` list will use ``ModelBackend`` as a fallback if "
"``REMOTE_USER`` is absent, which will solve these issues."
msgstr ""
"Sii cosciente che questa particolare configurazione disabilita "
"l'autenticazione con il ``ModelBackend`` di default. Questo significa che se "
"il valore di  ``REMOTE_USER`` non è impostato, l'utente non potrà fare log "
"in, anche utilizzando l'interfaccia di amministrazione di Django. "
"Aggiungendo ``'django.contrib.auth.backends.ModelBackend'`` all'elenco "
"``AUTHENTICATION_BACKENDS`` si userà ``ModelBackend`` come ripiego se è "
"assente ``REMOTE_USER`` , risolvendo questo inconveniente."

msgid ""
"Django's user management, such as the views in ``contrib.admin`` and the :"
"djadmin:`createsuperuser` management command, doesn't integrate with remote "
"users. These interfaces work with users stored in the database regardless of "
"``AUTHENTICATION_BACKENDS``."
msgstr ""
"La gestione utenti di Django, come le view in ``contrib.admin`` e il comando "
"di gestione :djadmin:`createsuperuser` , non si integrano con gli utenti "
"remoti. Queste interfacce lavorano con gli utenti memorizzati nel database, "
"indipendentemente dagli ``AUTHENTICATION_BACKENDS``."

msgid ""
"Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will "
"still have all of the same permissions checking that is implemented in "
"``ModelBackend``."
msgstr ""
"Poiché il ``RemoteUserBackend`` eredita da ``ModelBackend``, avrai ancora "
"tutto il controllo sui permessi che è implementato in ``ModelBackend``."

msgid ""
"Users with :attr:`is_active=False <django.contrib.auth.models.User."
"is_active>` won't be allowed to authenticate. Use :class:`~django.contrib."
"auth.backends.AllowAllUsersRemoteUserBackend` if you want to allow them to."
msgstr ""
"Gli utenti con :attr:`is_active=False <django.contrib.auth.models.User."
"is_active>` non avranno il permesso di autenticarsi. Usa :class:`~django."
"contrib.auth.backends.AllowAllUsersRemoteUserBackend` se vuoi permettere "
"l'autenticazione."

msgid ""
"If your authentication mechanism uses a custom HTTP header and not "
"``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the "
"``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""
"Se il tuo meccanismo di autenticazione usa una intestazione HTTP "
"personalizzata, e non ``REMOTE_USER``, puoi derivare "
"``RemoteUserMiddleware`` e impostare l'attributo ``header`` alla chiave "
"``request.META`` desiderata.  Per esempio::"

msgid ""
"Be very careful if using a ``RemoteUserMiddleware`` subclass with a custom "
"HTTP header. You must be sure that your front-end web server always sets or "
"strips that header based on the appropriate authentication checks, never "
"permitting an end-user to submit a fake (or \"spoofed\") header value. Since "
"the HTTP headers ``X-Auth-User`` and ``X-Auth_User`` (for example) both "
"normalize to the ``HTTP_X_AUTH_USER`` key in ``request.META``, you must also "
"check that your web server doesn't allow a spoofed header using underscores "
"in place of dashes."
msgstr ""
"Sii molto attento se utilizzi una sottoclasse di ``RemoteUserMiddleware`` "
"con un'intersatione HTTP personalizzata. Devi essere sicuro che il tuo  "
"front-end web server imposti sempre o rimuova quella intestazione in base "
"agli appropriati controlli di autenticazione, impedendo ad un utente di "
"inviare un falso (o \"spoofed\") valore di intestazione . Poiché le "
"intestazioni HTTP ``X-Auth-User`` e ``X-Auth_User`` (per esempio) sono "
"entrambe normalizzate alla chiave ``HTTP_X_AUTH_USER`` in ``request.META``, "
"devi anche controllare che il tuo  web server non permetta intestazioni "
"false utilizzando trattini bassi al posto dei trattini."

msgid ""
"This warning doesn't apply to ``RemoteUserMiddleware`` in its default "
"configuration with ``header = 'REMOTE_USER'``, since a key that doesn't "
"start with ``HTTP_`` in ``request.META`` can only be set by your WSGI "
"server, not directly from an HTTP request header."
msgstr ""
"Questo avvertimento non si applica a ``RemoteUserMiddleware`` nella sua "
"configurazione di default con ``header = 'REMOTE_USER'``, perché una chiave "
"che non inizia con ``HTTP_`` in ``request.META`` può essere impostata solo "
"dal tuo server WSGI, non direttamente da una intestazione di richiesta HTTP."

msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"and override one or more of its attributes and methods."
msgstr ""
"Se hai necessità di più controllo, puoi creare il tuo backend di "
"autenticazione che eredita da :class:`~django.contrib.auth.backends."
"RemoteUserBackend` e sostituisce uno o più dei suoi attributi e metodi."

msgid "Using ``REMOTE_USER`` on login pages only"
msgstr "Usare ``REMOTE_USER`` solo sulle pagine di login"

msgid ""
"The ``RemoteUserMiddleware`` authentication middleware assumes that the HTTP "
"request header ``REMOTE_USER`` is present with all authenticated requests. "
"That might be expected and practical when Basic HTTP Auth with ``htpasswd`` "
"or similar mechanisms are used, but with Negotiate (GSSAPI/Kerberos) or "
"other resource intensive authentication methods, the authentication in the "
"front-end HTTP server is usually only set up for one or a few login URLs, "
"and after successful authentication, the application is supposed to maintain "
"the authenticated session itself."
msgstr ""

msgid ""
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"provides support for this use case. It will maintain the authenticated "
"session until explicit logout by the user. The class can be used as a drop-"
"in replacement of :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware` in the documentation above."
msgstr ""
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"fornisce supporto per questo caso d'uso. Mantiene la sessione autenticata "
"fino ad un logout esplicito dell'utente. La classe può essere usata in "
"sostituzione in cascata di :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware` nella documentazione di cui sopra."

msgid "Writing a custom storage system"
msgstr "Scrittura di un sistema di storage personalizzato"

msgid ""
"If you need to provide custom file storage -- a common example is storing "
"files on some remote system -- you can do so by defining a custom storage "
"class. You'll need to follow these steps:"
msgstr ""
"Se necessiti di utilizzare un file storage personalizzato -- un esempio "
"comune è salvare files su un sistema remoto -- puoi farlo definendo una "
"classe di storage personalizzata. Dovrai seguire i seguenti passi:"

msgid ""
"Your custom storage system must be a subclass of ``django.core.files.storage."
"Storage``::"
msgstr ""
"Il tuo sistema di storage personalizzato deve essere una sottoclasse di "
"``django.core.files.storage.Storage``::"

msgid ""
"Django must be able to instantiate your storage system without any "
"arguments. This means that any settings should be taken from ``django.conf."
"settings``::"
msgstr ""
"Django deve essere in grado di instanziare il tuo sistema di storage senza "
"nessun argomento. Ciò significa che qualsiasi impostazione deve essere "
"reperita da ``django.conf.settings``::"

msgid ""
"Your storage class must implement the :meth:`_open()` and :meth:`_save()` "
"methods, along with any other methods appropriate to your storage class. See "
"below for more on these methods."
msgstr ""
"La tua classe di storage deve implementare i metodi :meth:`_open()` e :meth:"
"`_save()`, insieme ad ogni altro metodo appropriato per la tua classe di "
"storage. Vedi di seguito per sapere di più su questi metodi."

msgid ""
"In addition, if your class provides local file storage, it must override the "
"``path()`` method."
msgstr ""
"In aggiunta, se la tua classe fornisce un file storage locale, deve "
"sovrascrivere il methodo ``path()``."

msgid ""
"Your storage class must be :ref:`deconstructible <custom-deconstruct-"
"method>` so it can be serialized when it's used on a field in a migration. "
"As long as your field has arguments that are themselves :ref:`serializable "
"<migration-serializing>`, you can use the ``django.utils.deconstruct."
"deconstructible`` class decorator for this (that's what Django uses on "
"FileSystemStorage)."
msgstr ""
"La tua classe di storage deve essere :ref:`deconstructible <custom-"
"deconstruct-method>` così che possa essere serializzata quando è utilizzata "
"in un campo all'interno di una migrazione. Fintanto che i tuoi campi hanno "
"argomenti che sono essi stessi :ref:`serializable <migration-serializing>`, "
"puoi usare il class decorator ``django.utils.deconstruct.deconstructible`` "
"(è ciò che usa Django nel FileSystemStorage)."

msgid ""
"By default, the following methods raise ``NotImplementedError`` and will "
"typically have to be overridden:"
msgstr ""
"Di default, i metodi seguenti sollevano un \"NotImplementedError\" e devono "
"essere sovrascritti."

msgid ":meth:`Storage.delete`"
msgstr ":meth:`Storage.delete`"

msgid ":meth:`Storage.exists`"
msgstr ":meth:`Storage.exists`"

msgid ":meth:`Storage.listdir`"
msgstr ":meth:`Storage.listdir`"

msgid ":meth:`Storage.size`"
msgstr ":meth:`Storage.size`"

msgid ":meth:`Storage.url`"
msgstr ":meth:`Storage.url`"

msgid ""
"Note however that not all these methods are required and may be deliberately "
"omitted. As it happens, it is possible to leave each method unimplemented "
"and still have a working Storage."
msgstr ""
"Nota comunque che non tutti questi metodi sono necessari a posso essere "
"deliberatamente omessi. Come succede, è possibile lasciare tutti i metodi "
"non implementati e avere uno Storage funzionante."

msgid ""
"By way of example, if listing the contents of certain storage backends turns "
"out to be expensive, you might decide not to implement ``Storage.listdir()``."
msgstr ""

msgid ""
"Another example would be a backend that only handles writing to files. In "
"this case, you would not need to implement any of the above methods."
msgstr ""
"Un altro esempio potrebbe essere un backend che scrive solamente su file. In "
"questo caso potrebbe non essere necessario implementare nessuno dei metodi "
"sopracitati."

msgid ""
"Ultimately, which of these methods are implemented is up to you. Leaving "
"some methods unimplemented will result in a partial (possibly broken) "
"interface."
msgstr ""
"In ultimo,  l'implementazione di questi metodi dipende da te. Lasciare "
"alcuni metodi non implementati risulterà in un'interfaccia parziale "
"(probabilmente non funzionante)."

msgid ""
"You'll also usually want to use hooks specifically designed for custom "
"storage objects. These are:"
msgstr ""
"Generalmente vorrai anche usare un hook disegnato appositamente per gli "
"oggetti del custom storage.\n"
"Questi sono:"

msgid "**Required**."
msgstr "**Richiesto**."

msgid ""
"Called by ``Storage.open()``, this is the actual mechanism the storage class "
"uses to open the file. This must return a ``File`` object, though in most "
"cases, you'll want to return some subclass here that implements logic "
"specific to the backend storage system."
msgstr ""
"Chiamato tramite ``Storage.open()``, questo è il meccanismo attuale che la "
"casse di storage usa per aprire il file. Questo deve ritornare un oggetto "
"``File``, anche se nella maggior parte dei casi, vorrai ritornare qualche "
"sottoclasse che implementa una logica specifica al sistema di storage di "
"backend."

msgid ""
"Called by ``Storage.save()``. The ``name`` will already have gone through "
"``get_valid_name()`` and ``get_available_name()``, and the ``content`` will "
"be a ``File`` object itself."
msgstr ""
"Chiamato da  ``Storage.save()``. ``name`` sarà già passato attraverso "
"``get_valid_name()`` e ``get_available_name()``, e ``content`` sarà un "
"oggetto ``File`` ."

msgid ""
"Should return the actual name of name of the file saved (usually the "
"``name`` passed in, but if the storage needs to change the file name return "
"the new name instead)."
msgstr ""
"Deve restituire il nome reale del file salvato (di solito il ``name`` "
"utilizzato in chiamata, ma se la memoria di massa deve cambiare il nome del "
"file, il nome restituito deve essere il nuovo nome)."

msgid ""
"Returns a filename suitable for use with the underlying storage system. The "
"``name`` argument passed to this method is either the original filename sent "
"to the server or, if ``upload_to`` is a callable, the filename returned by "
"that method after any path information is removed. Override this to "
"customize how non-standard characters are converted to safe filenames."
msgstr ""
"Restituisce un nome di file idoneo all'uso con il sottostante sistema di "
"memorizzazione. L'argomento ``name`` passato a questo metodo o è il nome del "
"file inviato al server o, se  ``upload_to`` è un metodo richiamabile, è il "
"nome del file restituito da quel metodo dopo avere rimosso ogni informazione "
"sul path. Effettua l'override di questo per personalizzare il modo di "
"convertire i caratteri non-standard in nomi di file sicuri."

msgid ""
"The code provided on ``Storage`` retains only alpha-numeric characters, "
"periods and underscores from the original filename, removing everything else."
msgstr ""
"Il codice fornito in ``Storage`` conserva dai nomi originali dei file solo i "
"caratteri alfanumerici, i punti e i trattini bassi, rimuovendo qualunque "
"altra cosa."

msgid ""
"Returns an alternative filename based on the ``file_root`` and ``file_ext`` "
"parameters. By default, an underscore plus a random 7 character alphanumeric "
"string is appended to the filename before the extension."
msgstr ""

msgid ""
"Returns a filename that is available in the storage mechanism, possibly "
"taking the provided filename into account. The ``name`` argument passed to "
"this method will have already cleaned to a filename valid for the storage "
"system, according to the ``get_valid_name()`` method described above."
msgstr ""
"Restituisce un nome di file che sia disponibile nel sistema di "
"memorizzazione, possibilmente prendendo in considerazione il nome del file "
"fornito. L'argomento ``name`` passato a questo metodo dovrà essere già "
"trasformato per essere un nome di file valido per il sistema di "
"memorizzazione, in accordo al metodo ``get_valid_name()`` descritto "
"precedentemente."

msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a "
"free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception is raised."
msgstr ""
"La lunghezza del nome del file non supererà ``max_length``, se indicata. Se "
"non sarà trovato un nome di file univoco libero, verrà sollevata una "
"eccezione :exc:`SuspiciousFileOperation <django.core.exceptions."
"SuspiciousOperation>` ."

msgid ""
"If a file with ``name`` already exists, ``get_alternative_name()`` is called "
"to obtain an alternative name."
msgstr ""
"se un file con \"nome\" esiste già, viene chiamato "
"\"get_alternative_name()\" per ottenere un nome alternativo"

msgid "Custom Lookups"
msgstr "Criteri di ricerca personalizzati"

msgid ""
"Django offers a wide variety of :ref:`built-in lookups <field-lookups>` for "
"filtering (for example, ``exact`` and ``icontains``). This documentation "
"explains how to write custom lookups and how to alter the working of "
"existing lookups. For the API references of lookups, see the :doc:`/ref/"
"models/lookups`."
msgstr ""
"Django offre una ampia varietà di :ref:`built-in lookups <field-lookups>` "
"per la selezione (per esempio, ``exact`` e ``icontains``). Questo documento "
"spiega come scrivere criteri di ricerca personalizzati e come modificare il "
"comportamento di quelli esistenti. Per i riferimenti alle API dei criteri di "
"ricerca, vedi :doc:`/ref/models/lookups`."

msgid "A lookup example"
msgstr "Un esempio di criterio di ricerca"

msgid ""
"Let's start with a small custom lookup. We will write a custom lookup ``ne`` "
"which works opposite to ``exact``. ``Author.objects."
"filter(name__ne='Jack')`` will translate to the SQL:"
msgstr ""

msgid ""
"This SQL is backend independent, so we don't need to worry about different "
"databases."
msgstr ""
"Questo comando SQL è indipendente dal backend, non ci dobbiamo quindi "
"preoccupare di differenti basi di dati."

msgid ""
"There are two steps to making this work. Firstly we need to implement the "
"lookup, then we need to tell Django about it::"
msgstr ""
"Sono richiesti due passaggi per farlo funzionare. Primo devi implementare il "
"criterio di ricerca, poi occorre dichiaralo in Django."

msgid ""
"To register the ``NotEqual`` lookup we will need to call ``register_lookup`` "
"on the field class we want the lookup to be available for. In this case, the "
"lookup makes sense on all ``Field`` subclasses, so we register it with "
"``Field`` directly::"
msgstr ""

msgid "Lookup registration can also be done using a decorator pattern::"
msgstr ""
"La registrazione di un criterio di ricerca si puo' fare anche usando un "
"modello decoratore::"

msgid ""
"We can now use ``foo__ne`` for any field ``foo``. You will need to ensure "
"that this registration happens before you try to create any querysets using "
"it. You could place the implementation in a ``models.py`` file, or register "
"the lookup in the ``ready()`` method of an ``AppConfig``."
msgstr ""
"Adesso possiamo usare ``foo__ne`` per ogni campo ``foo``. Ti devi assicurare "
"che questa registrazione avvenga prima che cerchi di creare un qualunque "
"queryset che la usi. Puoi mettere l'implementazione in un file ``models."
"py`` , o registrare il criterio di ricerca nel metodo ``ready()`` di un "
"``AppConfig``."

msgid ""
"Taking a closer look at the implementation, the first required attribute is "
"``lookup_name``. This allows the ORM to understand how to interpret "
"``name__ne`` and use ``NotEqual`` to generate the SQL. By convention, these "
"names are always lowercase strings containing only letters, but the only "
"hard requirement is that it must not contain the string ``__``."
msgstr ""
"Dando un'occhiata più attenta all'implementazione, il primo attributo "
"richiesto é ``lookup_name``. Questo permette alla ORM di capire come "
"interpretare ``name__ne`` e usare ``NotEqual`` per generare il codice SQL. "
"Per convenzione, questi nomi sono sempre stringhe in minuscolo contenenti "
"solo lettere, ma l'unico requisito mandatorio è che non contengano la "
"stringa ``__``."

msgid ""
"We then need to define the ``as_sql`` method. This takes a ``SQLCompiler`` "
"object, called ``compiler``,  and the active database connection. "
"``SQLCompiler`` objects are not documented, but the only thing we need to "
"know about them is that they have a ``compile()`` method which returns a "
"tuple containing an SQL string, and the parameters to be interpolated into "
"that string. In most cases, you don't need to use it directly and can pass "
"it on to ``process_lhs()`` and ``process_rhs()``."
msgstr ""
"Poi dobbiamo definire il metodo ``as_sql`` . Questo usa un oggetto "
"``SQLCompiler`` , chiamato ``compiler``,  e la connessione al database "
"attivo. Gli oggetti ``SQLCompiler`` non sono documentati, ma la sola cosa "
"che dobbiamo sapere a loro riguardo è che hanno un metodo ``compile()`` che "
"restituisce una tupla contenente una stringa SQL, e i parametri da "
"interpolare in quella stringa. Nella maggior parte dei casi, non hai "
"necessità di usarli direttamente e puoi passarli a ``process_lhs()`` e "
"``process_rhs()``."

msgid ""
"A ``Lookup`` works against two values, ``lhs`` and ``rhs``, standing for "
"left-hand side and right-hand side. The left-hand side is usually a field "
"reference, but it can be anything implementing the :ref:`query expression "
"API <query-expression>`. The right-hand is the value given by the user. In "
"the example ``Author.objects.filter(name__ne='Jack')``, the left-hand side "
"is a reference to the ``name`` field of the ``Author`` model, and ``'Jack'`` "
"is the right-hand side."
msgstr ""
"Un ``Lookup`` lavora verso due valori, ``lhs`` e ``rhs``, che rappresentano "
"la parte sinistra e la parte destra. La parte sinistra di solito è un "
"riferimento a un campo, ma può essere qualunque cosa implementi una :ref:"
"`query expression API <query-expression>`. La parte destra è il valore dato "
"dall'utente. Nell'esempio ``Author.objects.filter(name__ne='Jack')``, la "
"parte sinistra è un riferimento al campo ``name`` del modello ``Author`` , e "
"``'Jack'`` è la parte destra."

msgid ""
"We call ``process_lhs`` and ``process_rhs`` to convert them into the values "
"we need for SQL using the ``compiler`` object described before. These "
"methods return tuples containing some SQL and the parameters to be "
"interpolated into that SQL, just as we need to return from our ``as_sql`` "
"method. In the above example, ``process_lhs`` returns ``('\"author\".\"name"
"\"', [])`` and ``process_rhs`` returns ``('\"%s\"', ['Jack'])``. In this "
"example there were no parameters for the left hand side, but this would "
"depend on the object we have, so we still need to include them in the "
"parameters we return."
msgstr ""
"Chiamiamo ``process_lhs`` e ``process_rhs`` per convertirli nei valori che "
"ci servono per il codice SQL usando l'oggetto ``compiler`` descritto in "
"precedenza. Questi metodi ritornano tuple contenenti il codice SQL e i "
"parametri che devono essere interpolati in quel codice SQL, esattamente come "
"si devono essere restituiti dal nostro metodo ``as_sql`` . Nell'esempio "
"precedente, ``process_lhs`` restituisce ``('\"author\".\"name\"', [])`` e "
"``process_rhs`` restituisce ``('\"%s\"', ['Jack'])``. In questo esempio non "
"c'erano parametri per la parte sinistra, ma può dipendere dall'oggetto che "
"abbiamo, per questo dobbiamo includerli nei parametri che restituiamo."

msgid ""
"Finally we combine the parts into an SQL expression with ``<>``, and supply "
"all the parameters for the query. We then return a tuple containing the "
"generated SQL string and the parameters."
msgstr ""
"Finalmente combiniamo le parti in una espressione SQL con ``<>``, e "
"riforniamo? con tutti i parametri per l'interrogazione. Dopodiché ritorniamo "
"una tupla contenente la stringa SQL e i parametri generati."

msgid "A transformer example"
msgstr ""

msgid ""
"The custom lookup above is great, but in some cases you may want to be able "
"to chain lookups together. For example, let's suppose we are building an "
"application where we want to make use of the ``abs()`` operator. We have an "
"``Experiment`` model which records a start value, end value, and the change "
"(start - end). We would like to find all experiments where the change was "
"equal to a certain amount (``Experiment.objects.filter(change__abs=27)``), "
"or where it did not exceed a certain amount (``Experiment.objects."
"filter(change__abs__lt=27)``)."
msgstr ""
"La ricerca personalizzata sopra indicata è fantastica, ma in alcuni casi "
"potresti aver bisogno di concatenare le ricerche insieme. Per esempio, "
"supponiamo che stiamo costruendo la nostra applicazione laddove vogliamo "
"fare uso del operatore ``abs()``. Abbiamo un modello ``Experiment`` che "
"registra un valore inizio, un valore fine, e che un valore cambio ( inizio - "
"fine ). Ci piacerebe cercare tutti gli esperimenti dove valore cambio è "
"uguale ad alcuni valori (``Experiment.objects.filter(change__abs=27)``),o "
"qualsiasi vaolore che non supera un certo quantitativo  (``Experiment."
"objects.filter(change__abs__lt=27)``)."

msgid ""
"This example is somewhat contrived, but it nicely demonstrates the range of "
"functionality which is possible in a database backend independent manner, "
"and without duplicating functionality already in Django."
msgstr ""
"Questo esempio è in qualche modo ?forzato?, ma ci mostra il range di "
"funzionalita possibili nel database backend in maniera indipendete, e senza "
"duplicare funzionalita gia esistenti in Django"

msgid ""
"We will start by writing an ``AbsoluteValue`` transformer. This will use the "
"SQL function ``ABS()`` to transform the value before comparison::"
msgstr ""
"Cominceremo con la scrittura del convertitore``AbsoluteValue``. Utilizzeremo "
"le funzioni SQL ``ABS()`` per convertire il valore prima del confronto::"

msgid "Next, let's register it for ``IntegerField``::"
msgstr "Successivamente registriamolo per il campo ``IntegerField``::"

msgid ""
"We can now run the queries we had before. ``Experiment.objects."
"filter(change__abs=27)`` will generate the following SQL:"
msgstr ""

msgid ""
"By using ``Transform`` instead of ``Lookup`` it means we are able to chain "
"further lookups afterwards. So ``Experiment.objects."
"filter(change__abs__lt=27)`` will generate the following SQL:"
msgstr ""

msgid ""
"Note that in case there is no other lookup specified, Django interprets "
"``change__abs=27`` as ``change__abs__exact=27``."
msgstr ""
"Nel caso non ci siano altre ricerche specificate, Django interpreta "
"``change__abs=27``  come ``change__abs__exact=27``."

msgid ""
"This also allows the result to be used in ``ORDER BY`` and ``DISTINCT ON`` "
"clauses. For example ``Experiment.objects.order_by('change__abs')`` "
"generates:"
msgstr ""
"Questo consente anche al risultato di essere usato in espressioni ``ORDER "
"BY`` e ``DISTINCT ON``. Per esempio ``Experiment.objects."
"order_by('change__abs')`` produce:"

msgid ""
"And on databases that support distinct on fields (such as PostgreSQL), "
"``Experiment.objects.distinct('change__abs')`` generates:"
msgstr ""
"E nei database che supportano distinct sui campi (come PostgreSQL), "
"``Experiment.objects.distinct('change__abs')``  produce:"

msgid ""
"When looking for which lookups are allowable after the ``Transform`` has "
"been applied, Django uses the ``output_field`` attribute. We didn't need to "
"specify this here as it didn't change, but supposing we were applying "
"``AbsoluteValue`` to some field which represents a more complex type (for "
"example a point relative to an origin, or a complex number) then we may have "
"wanted to specify that the transform returns a ``FloatField`` type for "
"further lookups. This can be done by adding an ``output_field`` attribute to "
"the transform::"
msgstr ""
"Quando cerca quali lookup sono disponibili dopo avere applicato la "
"``Transform``, Django usa l'attributo ``output_field``. Se l'attributo non è "
"cambiato, non abbiamo necessità di specificarlo, ma supponiamo che stavamo "
"applicando la  ``AbsoluteValue`` ad un campo che rappresenta un tipo più "
"complesso (per esempio un punto relativo ad una origine, o un numero "
"complesso), allora per ulteriori lookup avremmo voluto specificare il fatto "
"che la trasformazione ritorna un tipo ``FloatField``. Ciò può essere fatto "
"aggiungendo un attributo  ``output_field`` alla trasformazione:: "

msgid ""
"This ensures that further lookups like ``abs__lte`` behave as they would for "
"a ``FloatField``."
msgstr ""
"Questo assicura che future ricerce come ``abs__lte`` si comportino come per "
"``FloatField``."

msgid "Writing an efficient ``abs__lt`` lookup"
msgstr "Scrivere una ``abs__lt`` ricerca efficiente"

msgid ""
"When using the above written ``abs`` lookup, the SQL produced will not use "
"indexes efficiently in some cases. In particular, when we use "
"``change__abs__lt=27``, this is equivalent to ``change__gt=-27`` AND "
"``change__lt=27``. (For the ``lte`` case we could use the SQL ``BETWEEN``)."
msgstr ""

msgid ""
"So we would like ``Experiment.objects.filter(change__abs__lt=27)`` to "
"generate the following SQL:"
msgstr ""
"Ci piacerebbe che ``Experiment.objects.filter(change__abs__lt=27)`` generi "
"la seguente SQL:"

msgid "The implementation is::"
msgstr "L'implemetazione è::"

msgid ""
"There are a couple of notable things going on. First, "
"``AbsoluteValueLessThan`` isn't calling ``process_lhs()``. Instead it skips "
"the transformation of the ``lhs`` done by ``AbsoluteValue`` and uses the "
"original ``lhs``. That is, we want to get ``\"experiments\".\"change\"`` not "
"``ABS(\"experiments\".\"change\")``. Referring directly to ``self.lhs.lhs`` "
"is safe as ``AbsoluteValueLessThan`` can be accessed only from the "
"``AbsoluteValue`` lookup, that is the ``lhs`` is always an instance of "
"``AbsoluteValue``."
msgstr ""

msgid ""
"Notice also that  as both sides are used multiple times in the query the "
"params need to contain ``lhs_params`` and ``rhs_params`` multiple times."
msgstr ""

msgid ""
"The final query does the inversion (``27`` to ``-27``) directly in the "
"database. The reason for doing this is that if the ``self.rhs`` is something "
"else than a plain integer value (for example an ``F()`` reference) we can't "
"do the transformations in Python."
msgstr ""

msgid ""
"In fact, most lookups with ``__abs`` could be implemented as range queries "
"like this, and on most database backends it is likely to be more sensible to "
"do so as you can make use of the indexes. However with PostgreSQL you may "
"want to add an index on ``abs(change)`` which would allow these queries to "
"be very efficient."
msgstr ""

msgid "A bilateral transformer example"
msgstr "Un esempio di trasformatore bilaterale"

msgid ""
"The ``AbsoluteValue`` example we discussed previously is a transformation "
"which applies to the left-hand side of the lookup. There may be some cases "
"where you want the transformation to be applied to both the left-hand side "
"and the right-hand side. For instance, if you want to filter a queryset "
"based on the equality of the left and right-hand side insensitively to some "
"SQL function."
msgstr ""

msgid ""
"Let's examine case-insensitive transformations here. This transformation "
"isn't very useful in practice as Django already comes with a bunch of built-"
"in case-insensitive lookups, but it will be a nice demonstration of "
"bilateral transformations in a database-agnostic way."
msgstr ""

msgid ""
"We define an ``UpperCase`` transformer which uses the SQL function "
"``UPPER()`` to transform the values before comparison. We define :attr:"
"`bilateral = True <django.db.models.Transform.bilateral>` to indicate that "
"this transformation should apply to both ``lhs`` and ``rhs``::"
msgstr ""

msgid "Next, let's register it::"
msgstr "Successivamente registriamolo::"

msgid ""
"Now, the queryset ``Author.objects.filter(name__upper=\"doe\")`` will "
"generate a case insensitive query like this:"
msgstr ""

msgid "Writing alternative implementations for existing lookups"
msgstr "Scrivendo implementazioni alternative per le ricerche esistenti"

msgid ""
"Sometimes different database vendors require different SQL for the same "
"operation. For this example we will rewrite a custom implementation for "
"MySQL for the NotEqual operator. Instead of ``<>`` we will be using ``!=`` "
"operator. (Note that in reality almost all databases support both, including "
"all the official databases supported by Django)."
msgstr ""

msgid ""
"We can change the behavior on a specific backend by creating a subclass of "
"``NotEqual`` with an ``as_mysql`` method::"
msgstr ""
"Puoi cambiare il comportamento di uno specifico backend creando una "
"sottoclasse di \"NotEqual\" con un metodo \"as_mysql\""

msgid ""
"We can then register it with ``Field``. It takes the place of the original "
"``NotEqual`` class as it has the same ``lookup_name``."
msgstr ""

msgid ""
"When compiling a query, Django first looks for ``as_%s % connection.vendor`` "
"methods, and then falls back to ``as_sql``. The vendor names for the in-"
"built backends are ``sqlite``, ``postgresql``, ``oracle`` and ``mysql``."
msgstr ""

msgid "How Django determines the lookups and transforms which are used"
msgstr "Come Django determina le ricerche e trasforma quelle in uso"

msgid ""
"In some cases you may wish to dynamically change which ``Transform`` or "
"``Lookup`` is returned based on the name passed in, rather than fixing it. "
"As an example, you could have a field which stores coordinates or an "
"arbitrary dimension, and wish to allow a syntax like ``."
"filter(coords__x7=4)`` to return the objects where the 7th coordinate has "
"value 4. In order to do this, you would override ``get_lookup`` with "
"something like::"
msgstr ""

msgid ""
"You would then define ``get_coordinate_lookup`` appropriately to return a "
"``Lookup`` subclass which handles the relevant value of ``dimension``."
msgstr ""

msgid ""
"There is a similarly named method called ``get_transform()``. "
"``get_lookup()`` should always return a ``Lookup`` subclass, and "
"``get_transform()`` a ``Transform`` subclass. It is important to remember "
"that ``Transform`` objects can be further filtered on, and ``Lookup`` "
"objects cannot."
msgstr ""

msgid ""
"When filtering, if there is only one lookup name remaining to be resolved, "
"we will look for a ``Lookup``. If there are multiple names, it will look for "
"a ``Transform``. In the situation where there is only one name and a "
"``Lookup`` is not found, we look for a ``Transform`` and then the ``exact`` "
"lookup on that ``Transform``. All call sequences always end with a "
"``Lookup``. To clarify:"
msgstr ""

msgid ""
"``.filter(myfield__mylookup)`` will call ``myfield.get_lookup('mylookup')``."
msgstr ""
"``.filter(myfield__mylookup)`` chiamera ``myfield.get_lookup('mylookup')``."

msgid ""
"``.filter(myfield__mytransform__mylookup)`` will call ``myfield."
"get_transform('mytransform')``, and then ``mytransform."
"get_lookup('mylookup')``."
msgstr ""

msgid ""
"``.filter(myfield__mytransform)`` will first call ``myfield."
"get_lookup('mytransform')``, which will fail, so it will fall back to "
"calling ``myfield.get_transform('mytransform')`` and then ``mytransform."
"get_lookup('exact')``."
msgstr ""

msgid "Writing custom ``django-admin`` commands"
msgstr "Scrivere comandi personalizzati per ``django-admin``"

msgid ""
"Applications can register their own actions with ``manage.py``. For example, "
"you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the :doc:`tutorial</intro/"
"tutorial01>`."
msgstr ""

msgid ""
"To do this, add a ``management/commands`` directory to the application. "
"Django will register a ``manage.py`` command for each Python module in that "
"directory whose name doesn't begin with an underscore. For example::"
msgstr ""

msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""

msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr ""

msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""

msgid "Standalone scripts"
msgstr "Script standalone"

msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""

msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to "
"look like this::"
msgstr ""
"Per implementare il comando, modifica ``polls/management/commands/closepoll."
"py`` in questo modo :"

msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing "
"to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command. Note also that you don't need to "
"end messages with a newline character, it will be added automatically, "
"unless you specify the ``ending`` parameter::"
msgstr ""

msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_ids>``."
msgstr ""

msgid ""
"The ``handle()`` method takes one or more ``poll_ids`` and sets ``poll."
"opened`` to ``False`` for each one. If the user referenced any nonexistent "
"polls, a :exc:`CommandError` is raised. The ``poll.opened`` attribute does "
"not exist in the :doc:`tutorial</intro/tutorial02>` and was added to ``polls."
"models.Question`` for this example."
msgstr ""

msgid "Accepting optional arguments"
msgstr "Accetta argomenti opzionali"

msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options can be added in the :meth:`~BaseCommand.add_arguments` method "
"like this::"
msgstr ""

msgid ""
"The option (``delete`` in our example) is available in the options dict "
"parameter of the handle method. See the :py:mod:`argparse` Python "
"documentation for more about ``add_argument`` usage."
msgstr ""

msgid ""
"In addition to being able to add custom command line options, all :doc:"
"`management commands</ref/django-admin>` can accept some default options "
"such as :option:`--verbosity` and :option:`--traceback`."
msgstr ""

msgid "Management commands and locales"
msgstr "Commandi di gestione e traduzioni/locale"

msgid ""
"By default, management commands are executed with the current active locale."
msgstr ""

msgid ""
"If, for some reason, your custom management command must run without an "
"active locale (for example, to prevent translated content from being "
"inserted into the database), deactivate translations using the "
"``@no_translations`` decorator on your :meth:`~BaseCommand.handle` method::"
msgstr ""

msgid ""
"Since translation deactivation requires access to configured settings, the "
"decorator can't be used for commands that work without configured settings."
msgstr ""

msgid "Testing"
msgstr "Testing"

msgid ""
"Information on how to test custom management commands can be found in the :"
"ref:`testing docs <topics-testing-management-commands>`."
msgstr ""

msgid "Overriding commands"
msgstr ""

msgid ""
"Django registers the built-in commands and then searches for commands in :"
"setting:`INSTALLED_APPS` in reverse. During the search, if a command name "
"duplicates an already registered command, the newly discovered command "
"overrides the first."
msgstr ""

msgid ""
"In other words, to override a command, the new command must have the same "
"name and its app must be before the overridden command's app in :setting:"
"`INSTALLED_APPS`."
msgstr ""

msgid ""
"Management commands from third-party apps that have been unintentionally "
"overridden can be made available under a new name by creating a new command "
"in one of your project's apps (ordered before the third-party app in :"
"setting:`INSTALLED_APPS`) which imports the ``Command`` of the overridden "
"command."
msgstr ""

msgid "Command objects"
msgstr ""

msgid "The base class from which all management commands ultimately derive."
msgstr ""

msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""

msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the :"
"meth:`~BaseCommand.handle` method."
msgstr ""

msgid "Attributes"
msgstr "Attributi"

msgid ""
"All attributes can be set in your derived class and can be used in :class:"
"`BaseCommand`’s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr ""

msgid ""
"If your command defines mandatory positional arguments, you can customize "
"the message error returned in the case of missing arguments. The default is "
"output by :py:mod:`argparse` (\"too few arguments\")."
msgstr ""

msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""

msgid ""
"A boolean; if ``True``, the command prints a warning if the set of "
"migrations on disk don't match the migrations in the database. A warning "
"doesn't prevent the command from executing. Default value is ``False``."
msgstr ""

msgid ""
"A list or tuple of tags, e.g. ``[Tags.staticfiles, Tags.models]``. System "
"checks :ref:`registered in the chosen tags <registering-labeling-checks>` "
"will be checked for errors prior to executing the command. The value "
"``'__all__'`` can be used to specify that all system checks should be "
"performed. Default value is ``'__all__'``."
msgstr ""

msgid ""
"In older versions, the ``requires_system_checks`` attribute expects a "
"boolean value instead of a list or tuple of tags."
msgstr ""

msgid ""
"An instance attribute that helps create colored output when writing to "
"``stdout`` or ``stderr``. For example::"
msgstr ""

msgid ""
"See :ref:`syntax-coloring` to learn how to modify the color palette and to "
"see the available styles (use uppercased versions of the \"roles\" described "
"in that section)."
msgstr ""

msgid ""
"If you pass the :option:`--no-color` option when running your command, all "
"``self.style()`` calls will return the original string uncolored."
msgstr ""

msgid "Methods"
msgstr "Metodi"

msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the :"
"meth:`~BaseCommand.handle` method must be implemented."
msgstr ""

msgid "Implementing a constructor in a subclass"
msgstr "Implementazione di un constructor in una subclasse"

msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`’s ``__init__``::"
msgstr ""

msgid ""
"Returns a ``CommandParser`` instance, which is an :class:`~argparse."
"ArgumentParser` subclass with a few customizations for Django."
msgstr ""

msgid ""
"You can customize the instance by overriding this method and calling "
"``super()`` with ``kwargs`` of :class:`~argparse.ArgumentParser` parameters."
msgstr ""

msgid ""
"Entry point to add parser arguments to handle command line arguments passed "
"to the command. Custom commands should override this method to add both "
"positional and optional arguments accepted by the command. Calling "
"``super()`` is not needed when directly subclassing ``BaseCommand``."
msgstr ""

msgid ""
"Returns the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""

msgid ""
"Tries to execute this command, performing system checks if needed (as "
"controlled by the :attr:`requires_system_checks` attribute). If the command "
"raises a :exc:`CommandError`, it's intercepted and printed to stderr."
msgstr ""

msgid "Calling a management command in your code"
msgstr "Chiamata di un commando di ?gestione? nel tuo codice"

msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :func:`~django.core.management.call_command` instead."
msgstr ""

msgid "The actual logic of the command. Subclasses must implement this method."
msgstr ""
"La logica attuale del comando. Le sottoclassi devono implementare questo "
"metodo"

msgid ""
"It may return a string which will be printed to ``stdout`` (wrapped by "
"``BEGIN;`` and ``COMMIT;`` if :attr:`output_transaction` is ``True``)."
msgstr ""

msgid ""
"Uses the system check framework to inspect the entire Django project for "
"potential problems. Serious problems are raised as a :exc:`CommandError`; "
"warnings are output to stderr; minor notifications are output to stdout."
msgstr ""

msgid ""
"If ``app_configs`` and ``tags`` are both ``None``, all system checks are "
"performed. ``tags`` can be a list of check tags, like ``compatibility`` or "
"``models``."
msgstr ""

msgid "``BaseCommand`` subclasses"
msgstr "sottoclassi ``BaseCommand``"

msgid ""
"A management command which takes one or more installed application labels as "
"arguments, and does something with each of them."
msgstr ""

msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app_config`, which will be called once "
"for each application."
msgstr ""

msgid ""
"Perform the command's actions for ``app_config``, which will be an :class:"
"`~django.apps.AppConfig` instance corresponding to an application label "
"given on the command line."
msgstr ""

msgid ""
"A management command which takes one or more arbitrary arguments (labels) on "
"the command line, and does something with each of them."
msgstr ""

msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""

msgid ""
"A string describing the arbitrary arguments passed to the command. The "
"string is used in the usage text and error messages of the command. Defaults "
"to ``'label'``."
msgstr ""

msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""

msgid "Command exceptions"
msgstr "Eccezioni di comando"

msgid ""
"Exception class indicating a problem while executing a management command."
msgstr ""

msgid ""
"If this exception is raised during the execution of a management command "
"from a command line console, it will be caught and turned into a nicely-"
"printed error message to the appropriate output stream (i.e., stderr); as a "
"result, raising this exception (with a sensible description of the error) is "
"the preferred way to indicate that something has gone wrong in the execution "
"of a command. It accepts the optional ``returncode`` argument to customize "
"the exit status for the management command to exit with, using :func:`sys."
"exit`."
msgstr ""

msgid ""
"If a management command is called from code through :func:`~django.core."
"management.call_command`, it's up to you to catch the exception when needed."
msgstr ""

msgid "The ``returncode`` argument was added."
msgstr ""

msgid "Writing custom model fields"
msgstr "Scrivere campi modello personalizzati"

msgid "Introduction"
msgstr "Introduzione"

msgid ""
"The :doc:`model reference </topics/db/models>` documentation explains how to "
"use Django's standard field classes -- :class:`~django.db.models."
"CharField`, :class:`~django.db.models.DateField`, etc. For many purposes, "
"those classes are all you'll need. Sometimes, though, the Django version "
"won't meet your precise requirements, or you'll want to use a field that is "
"entirely different from those shipped with Django."
msgstr ""

msgid ""
"Django's built-in field types don't cover every possible database column "
"type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more "
"obscure column types, such as geographic polygons or even user-created types "
"such as `PostgreSQL custom types`_, you can define your own Django ``Field`` "
"subclasses."
msgstr ""

msgid ""
"Alternatively, you may have a complex Python object that can somehow be "
"serialized to fit into a standard database column type. This is another case "
"where a ``Field`` subclass will help you use your object with your models."
msgstr ""

msgid "Our example object"
msgstr "Il nostro oggetto di esempio"

msgid ""
"Creating custom fields requires a bit of attention to detail. To make things "
"easier to follow, we'll use a consistent example throughout this document: "
"wrapping a Python object representing the deal of cards in a hand of "
"Bridge_. Don't worry, you don't have to know how to play Bridge to follow "
"this example. You only need to know that 52 cards are dealt out equally to "
"four players, who are traditionally called *north*, *east*, *south* and "
"*west*.  Our class looks something like this::"
msgstr ""

msgid ""
"This is an ordinary Python class, with nothing Django-specific about it. "
"We'd like to be able to do things like this in our models (we assume the "
"``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""

msgid ""
"We assign to and retrieve from the ``hand`` attribute in our model just like "
"any other Python class. The trick is to tell Django how to handle saving and "
"loading such an object."
msgstr ""

msgid ""
"In order to use the ``Hand`` class in our models, we **do not** have to "
"change this class at all. This is ideal, because it means you can easily "
"write model support for existing classes where you cannot change the source "
"code."
msgstr ""

msgid ""
"You might only be wanting to take advantage of custom database column types "
"and deal with the data as standard Python types in your models; strings, or "
"floats, for example. This case is similar to our ``Hand`` example and we'll "
"note any differences as we go along."
msgstr ""

msgid "Background theory"
msgstr ""

msgid "Database storage"
msgstr "Stoccaggio DB"

msgid ""
"Let's start with model fields. If you break it down, a model field provides "
"a way to take a normal Python object -- string, boolean, ``datetime``, or "
"something more complex like ``Hand`` -- and convert it to and from a format "
"that is useful when dealing with the database. (Such a format is also useful "
"for serialization, but as we'll see later, that is easier once you have the "
"database side under control)."
msgstr ""

msgid ""
"Fields in a model must somehow be converted to fit into an existing database "
"column type. Different databases provide different sets of valid column "
"types, but the rule is still the same: those are the only types you have to "
"work with. Anything you want to store in the database must fit into one of "
"those types."
msgstr ""

msgid ""
"Normally, you're either writing a Django field to match a particular "
"database column type, or you will need a way to convert your data to, say, a "
"string."
msgstr ""

msgid ""
"For our ``Hand`` example, we could convert the card data to a string of 104 "
"characters by concatenating all the cards together in a pre-determined order "
"-- say, all the *north* cards first, then the *east*, *south* and *west* "
"cards. So ``Hand`` objects can be saved to text or character columns in the "
"database."
msgstr ""

msgid "What does a field class do?"
msgstr "Cosa fa una classe di campo?"

msgid ""
"All of Django's fields (and when we say *fields* in this document, we always "
"mean model fields and not :doc:`form fields </ref/forms/fields>`) are "
"subclasses of :class:`django.db.models.Field`. Most of the information that "
"Django records about a field is common to all fields -- name, help text, "
"uniqueness and so forth. Storing all that information is handled by "
"``Field``. We'll get into the precise details of what ``Field`` can do later "
"on; for now, suffice it to say that everything descends from ``Field`` and "
"then customizes key pieces of the class behavior."
msgstr ""

msgid ""
"It's important to realize that a Django field class is not what is stored in "
"your model attributes. The model attributes contain normal Python objects. "
"The field classes you define in a model are actually stored in the ``Meta`` "
"class when the model class is created (the precise details of how this is "
"done are unimportant here). This is because the field classes aren't "
"necessary when you're just creating and modifying attributes. Instead, they "
"provide the machinery for converting between the attribute value and what is "
"stored in the database or sent to the :doc:`serializer </topics/"
"serialization>`."
msgstr ""

msgid ""
"Keep this in mind when creating your own custom fields. The Django ``Field`` "
"subclass you write provides the machinery for converting between your Python "
"instances and the database/serializer values in various ways (there are "
"differences between storing a value and using a value for lookups, for "
"example). If this sounds a bit tricky, don't worry -- it will become clearer "
"in the examples below. Just remember that you will often end up creating two "
"classes when you want a custom field:"
msgstr ""

msgid ""
"The first class is the Python object that your users will manipulate. They "
"will assign it to the model attribute, they will read from it for displaying "
"purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""

msgid ""
"The second class is the ``Field`` subclass. This is the class that knows how "
"to convert your first class back and forth between its permanent storage "
"form and the Python form."
msgstr ""

msgid "Writing a field subclass"
msgstr "Scrivere una sottoclasse di campo"

msgid ""
"When planning your :class:`~django.db.models.Field` subclass, first give "
"some thought to which existing :class:`~django.db.models.Field` class your "
"new field is most similar to. Can you subclass an existing Django field and "
"save yourself some work? If not, you should subclass the :class:`~django.db."
"models.Field` class, from which everything is descended."
msgstr ""

msgid ""
"Initializing your new field is a matter of separating out any arguments that "
"are specific to your case from the common arguments and passing the latter "
"to the ``__init__()`` method of :class:`~django.db.models.Field` (or your "
"parent class)."
msgstr ""

msgid ""
"In our example, we'll call our field ``HandField``. (It's a good idea to "
"call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so "
"it's easily identifiable as a :class:`~django.db.models.Field` subclass.) It "
"doesn't behave like any existing field, so we'll subclass directly from :"
"class:`~django.db.models.Field`::"
msgstr ""

msgid ""
"Our ``HandField`` accepts most of the standard field options (see the list "
"below), but we ensure it has a fixed length, since it only needs to hold 52 "
"card values plus their suits; 104 characters in total."
msgstr ""

msgid ""
"Many of Django's model fields accept options that they don't do anything "
"with. For example, you can pass both :attr:`~django.db.models.Field."
"editable` and :attr:`~django.db.models.DateField.auto_now` to a :class:"
"`django.db.models.DateField` and it will ignore the :attr:`~django.db.models."
"Field.editable` parameter (:attr:`~django.db.models.DateField.auto_now` "
"being set implies ``editable=False``). No error is raised in this case."
msgstr ""

msgid ""
"This behavior simplifies the field classes, because they don't need to check "
"for options that aren't necessary. They pass all the options to the parent "
"class and then don't use them later on. It's up to you whether you want your "
"fields to be more strict about the options they select, or to use the more "
"permissive behavior of the current fields."
msgstr ""

msgid "The ``Field.__init__()`` method takes the following parameters:"
msgstr ""

msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ""

msgid "``name``"
msgstr "``name``"

msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ":attr:`~django.db.models.Field.primary_key`"

msgid ":attr:`~django.db.models.CharField.max_length`"
msgstr ":attr:`~django.db.models.CharField.max_length`"

msgid ":attr:`~django.db.models.Field.unique`"
msgstr ":attr:`~django.db.models.Field.unique`"

msgid ":attr:`~django.db.models.Field.blank`"
msgstr ":attr:`~django.db.models.Field.blank`"

msgid ":attr:`~django.db.models.Field.null`"
msgstr ":attr:`~django.db.models.Field.null`"

msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ":attr:`~django.db.models.Field.db_index`"

msgid ""
"``rel``: Used for related fields (like :class:`ForeignKey`). For advanced "
"use only."
msgstr ""

msgid ":attr:`~django.db.models.Field.default`"
msgstr ":attr:`~django.db.models.Field.default`"

msgid ":attr:`~django.db.models.Field.editable`"
msgstr ":attr:`~django.db.models.Field.editable`"

msgid ""
"``serialize``: If ``False``, the field will not be serialized when the model "
"is passed to Django's :doc:`serializers </topics/serialization>`. Defaults "
"to ``True``."
msgstr ""

msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ":attr:`~django.db.models.Field.unique_for_date`"

msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ":attr:`~django.db.models.Field.unique_for_month`"

msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ":attr:`~django.db.models.Field.unique_for_year`"

msgid ":attr:`~django.db.models.Field.choices`"
msgstr ":attr:`~django.db.models.Field.choices`"

msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ":attr:`~django.db.models.Field.help_text`"

msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ":attr:`~django.db.models.Field.db_column`"

msgid ""
":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if "
"the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can "
"usually ignore this option."
msgstr ""

msgid ""
":attr:`~django.db.models.Field.auto_created`: ``True`` if the field was "
"automatically created, as for the :class:`~django.db.models.OneToOneField` "
"used by model inheritance. For advanced use only."
msgstr ""

msgid ""
"All of the options without an explanation in the above list have the same "
"meaning they do for normal Django fields. See the :doc:`field documentation "
"</ref/models/fields>` for examples and details."
msgstr ""

msgid "Field deconstruction"
msgstr "Scomposizione di un campo"

msgid ""
"The counterpoint to writing your ``__init__()`` method is writing the :meth:"
"`~.Field.deconstruct` method. It's used during :doc:`model migrations </"
"topics/migrations>` to tell Django how to take an instance of your new field "
"and reduce it to a serialized form - in particular, what arguments to pass "
"to ``__init__()`` to re-create it."
msgstr ""

msgid ""
"If you haven't added any extra options on top of the field you inherited "
"from, then there's no need to write a new ``deconstruct()`` method. If, "
"however, you're changing the arguments passed in ``__init__()`` (like we are "
"in ``HandField``), you'll need to supplement the values being passed."
msgstr ""

msgid ""
"``deconstruct()`` returns a tuple of four items: the field's attribute name, "
"the full import path of the field class, the positional arguments (as a "
"list), and the keyword arguments (as a dict). Note this is different from "
"the ``deconstruct()`` method :ref:`for custom classes <custom-deconstruct-"
"method>` which returns a tuple of three things."
msgstr ""

msgid ""
"As a custom field author, you don't need to care about the first two values; "
"the base ``Field`` class has all the code to work out the field's attribute "
"name and import path. You do, however, have to care about the positional and "
"keyword arguments, as these are likely the things you are changing."
msgstr ""

msgid ""
"For example, in our ``HandField`` class we're always forcibly setting "
"max_length in ``__init__()``. The ``deconstruct()`` method on the base "
"``Field`` class will see this and try to return it in the keyword arguments; "
"thus, we can drop it from the keyword arguments for readability::"
msgstr ""

msgid ""
"If you add a new keyword argument, you need to write code in "
"``deconstruct()`` that puts its value into ``kwargs`` yourself. You should "
"also omit the value from ``kwargs`` when it isn't necessary to reconstruct "
"the state of the field, such as when the default value is being used::"
msgstr ""

msgid ""
"More complex examples are beyond the scope of this document, but remember - "
"for any configuration of your Field instance, ``deconstruct()`` must return "
"arguments that you can pass to ``__init__`` to reconstruct that state."
msgstr ""

msgid ""
"Pay extra attention if you set new default values for arguments in the "
"``Field`` superclass; you want to make sure they're always included, rather "
"than disappearing if they take on the old default value."
msgstr ""

msgid ""
"In addition, try to avoid returning values as positional arguments; where "
"possible, return values as keyword arguments for maximum future "
"compatibility. If you change the names of things more often than their "
"position in the constructor's argument list, you might prefer positional, "
"but bear in mind that people will be reconstructing your field from the "
"serialized version for quite a while (possibly years), depending how long "
"your migrations live for."
msgstr ""

msgid ""
"You can see the results of deconstruction by looking in migrations that "
"include the field, and you can test deconstruction in unit tests by "
"deconstructing and reconstructing the field::"
msgstr ""

msgid "Changing a custom field's base class"
msgstr ""

msgid ""
"You can't change the base class of a custom field because Django won't "
"detect the change and make a migration for it. For example, if you start "
"with::"
msgstr ""

msgid ""
"and then decide that you want to use ``TextField`` instead, you can't change "
"the subclass like this::"
msgstr ""

msgid ""
"Instead, you must create a new custom field class and update your models to "
"reference it::"
msgstr ""

msgid ""
"As discussed in :ref:`removing fields <migrations-removing-model-fields>`, "
"you must retain the original ``CustomCharField`` class as long as you have "
"migrations that reference it."
msgstr ""

msgid "Documenting your custom field"
msgstr ""

msgid ""
"As always, you should document your field type, so users will know what it "
"is. In addition to providing a docstring for it, which is useful for "
"developers, you can also allow users of the admin app to see a short "
"description of the field type via the :doc:`django.contrib.admindocs </ref/"
"contrib/admin/admindocs>` application. To do this provide descriptive text "
"in a :attr:`~Field.description` class attribute of your custom field. In the "
"above example, the description displayed by the ``admindocs`` application "
"for a ``HandField`` will be 'A hand of cards (bridge style)'."
msgstr ""

msgid ""
"In the :mod:`django.contrib.admindocs` display, the field description is "
"interpolated with ``field.__dict__`` which allows the description to "
"incorporate arguments of the field. For example, the description for :class:"
"`~django.db.models.CharField` is::"
msgstr ""

msgid "Useful methods"
msgstr "Metodi utili"

msgid ""
"Once you've created your :class:`~django.db.models.Field` subclass, you "
"might consider overriding a few standard methods, depending on your field's "
"behavior. The list of methods below is in approximately decreasing order of "
"importance, so start from the top."
msgstr ""

msgid "Custom database types"
msgstr "Tipi di database personalizzati"

msgid ""
"Say you've created a PostgreSQL custom type called ``mytype``. You can "
"subclass ``Field`` and implement the :meth:`~Field.db_type` method, like so::"
msgstr ""

msgid ""
"Once you have ``MytypeField``, you can use it in any model, just like any "
"other ``Field`` type::"
msgstr ""

msgid ""
"If you aim to build a database-agnostic application, you should account for "
"differences in database column types. For example, the date/time column type "
"in PostgreSQL is called ``timestamp``, while the same column in MySQL is "
"called ``datetime``. You can handle this in a :meth:`~Field.db_type` method "
"by checking the ``connection.settings_dict['ENGINE']`` attribute."
msgstr ""

msgid "For example::"
msgstr "Per esempio::"

msgid ""
"The :meth:`~Field.db_type` and :meth:`~Field.rel_db_type` methods are called "
"by Django when the framework constructs the ``CREATE TABLE`` statements for "
"your application -- that is, when you first create your tables. The methods "
"are also called when constructing a ``WHERE`` clause that includes the model "
"field -- that is, when you retrieve data using QuerySet methods like "
"``get()``, ``filter()``, and ``exclude()`` and have the model field as an "
"argument. They are not called at any other time, so it can afford to execute "
"slightly complex code, such as the ``connection.settings_dict`` check in the "
"above example."
msgstr ""

msgid ""
"Some database column types accept parameters, such as ``CHAR(25)``, where "
"the parameter ``25`` represents the maximum column length. In cases like "
"these, it's more flexible if the parameter is specified in the model rather "
"than being hard-coded in the ``db_type()`` method. For example, it wouldn't "
"make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""

msgid ""
"The better way of doing this would be to make the parameter specifiable at "
"run time -- i.e., when the class is instantiated. To do that, implement "
"``Field.__init__()``, like so::"
msgstr ""

msgid ""
"Finally, if your column requires truly complex SQL setup, return ``None`` "
"from :meth:`.db_type`. This will cause Django's SQL creation code to skip "
"over this field. You are then responsible for creating the column in the "
"right table in some other way, but this gives you a way to tell Django to "
"get out of the way."
msgstr ""

msgid ""
"The :meth:`~Field.rel_db_type` method is called by fields such as "
"``ForeignKey`` and ``OneToOneField`` that point to another field to "
"determine their database column data types. For example, if you have an "
"``UnsignedAutoField``, you also need the foreign keys that point to that "
"field to use the same data type::"
msgstr ""

msgid "Converting values to Python objects"
msgstr "Conversione di valori a oggetti Python"

msgid ""
"If your custom :class:`~Field` class deals with data structures that are "
"more complex than strings, dates, integers, or floats, then you may need to "
"override :meth:`~Field.from_db_value` and :meth:`~Field.to_python`."
msgstr ""

msgid ""
"If present for the field subclass, ``from_db_value()`` will be called in all "
"circumstances when the data is loaded from the database, including in "
"aggregates and :meth:`~django.db.models.query.QuerySet.values` calls."
msgstr ""

msgid ""
"``to_python()`` is called by deserialization and during the :meth:`~django."
"db.models.Model.clean` method used from forms."
msgstr ""

msgid ""
"As a general rule, ``to_python()`` should deal gracefully with any of the "
"following arguments:"
msgstr ""

msgid ""
"An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr ""

msgid "A string"
msgstr "Una stringa"

msgid "``None`` (if the field allows ``null=True``)"
msgstr "``None`` (se il campo permette ``null=True``)"

msgid ""
"In our ``HandField`` class, we're storing the data as a VARCHAR field in the "
"database, so we need to be able to process strings and ``None`` in the "
"``from_db_value()``. In ``to_python()``, we need to also handle ``Hand`` "
"instances::"
msgstr ""

msgid ""
"Notice that we always return a ``Hand`` instance from these methods. That's "
"the Python object type we want to store in the model's attribute."
msgstr ""

msgid ""
"For ``to_python()``, if anything goes wrong during value conversion, you "
"should raise a :exc:`~django.core.exceptions.ValidationError` exception."
msgstr ""

msgid "Converting Python objects to query values"
msgstr "Convertire oggetti Python in query di valori"

msgid ""
"Since using a database requires conversion in both ways, if you override :"
"meth:`~Field.from_db_value` you also have to override :meth:`~Field."
"get_prep_value` to convert Python objects back to query values."
msgstr ""

msgid ""
"If your custom field uses the ``CHAR``, ``VARCHAR`` or ``TEXT`` types for "
"MySQL, you must make sure that :meth:`.get_prep_value` always returns a "
"string type. MySQL performs flexible and unexpected matching when a query is "
"performed on these types and the provided value is an integer, which can "
"cause queries to include unexpected objects in their results. This problem "
"cannot occur if you always return a string type from :meth:`.get_prep_value`."
msgstr ""

msgid "Converting query values to database values"
msgstr ""

msgid ""
"Some data types (for example, dates) need to be in a specific format before "
"they can be used by a database backend. :meth:`~Field.get_db_prep_value` is "
"the method where those conversions should be made. The specific connection "
"that will be used for the query is passed as the ``connection`` parameter. "
"This allows you to use backend-specific conversion logic if it is required."
msgstr ""

msgid ""
"For example, Django uses the following method for its :class:`BinaryField`::"
msgstr ""

msgid ""
"In case your custom field needs a special conversion when being saved that "
"is not the same as the conversion used for normal query parameters, you can "
"override :meth:`~Field.get_db_prep_save`."
msgstr ""

msgid "Preprocessing values before saving"
msgstr "Pre elaborazione dei valori prima del salvataggio"

msgid ""
"If you want to preprocess the value just before saving, you can use :meth:"
"`~Field.pre_save`. For example, Django's :class:`~django.db.models."
"DateTimeField` uses this method to set the attribute correctly in the case "
"of :attr:`~django.db.models.DateField.auto_now` or :attr:`~django.db.models."
"DateField.auto_now_add`."
msgstr ""

msgid ""
"If you do override this method, you must return the value of the attribute "
"at the end. You should also update the model's attribute if you make any "
"changes to the value so that code holding references to the model will "
"always see the correct value."
msgstr ""

msgid "Specifying the form field for a model field"
msgstr ""

msgid ""
"To customize the form field used by :class:`~django.forms.ModelForm`, you "
"can override :meth:`~Field.formfield`."
msgstr ""

msgid ""
"The form field class can be specified via the ``form_class`` and "
"``choices_form_class`` arguments; the latter is used if the field has "
"choices specified, the former otherwise. If these arguments are not "
"provided, :class:`~django.forms.CharField` or :class:`~django.forms."
"TypedChoiceField` will be used."
msgstr ""

msgid ""
"All of the ``kwargs`` dictionary is passed directly to the form field's "
"``__init__()`` method. Normally, all you need to do is set up a good default "
"for the ``form_class`` (and maybe ``choices_form_class``) argument and then "
"delegate further handling to the parent class. This might require you to "
"write a custom form field (and even a form widget). See the :doc:`forms "
"documentation </topics/forms/index>` for information about this."
msgstr ""

msgid ""
"Continuing our ongoing example, we can write the :meth:`~Field.formfield` "
"method as::"
msgstr ""

msgid ""
"This assumes we've imported a ``MyFormField`` field class (which has its own "
"default widget). This document doesn't cover the details of writing custom "
"form fields."
msgstr ""

msgid "Emulating built-in field types"
msgstr ""

msgid ""
"If you have created a :meth:`.db_type` method, you don't need to worry "
"about :meth:`.get_internal_type` -- it won't be used much. Sometimes, "
"though, your database storage is similar in type to some other field, so you "
"can use that other field's logic to create the right column."
msgstr ""

msgid ""
"No matter which database backend we are using, this will mean that :djadmin:"
"`migrate` and other SQL commands create the right column type for storing a "
"string."
msgstr ""

msgid ""
"If :meth:`.get_internal_type` returns a string that is not known to Django "
"for the database backend you are using -- that is, it doesn't appear in "
"``django.db.backends.<db_name>.base.DatabaseWrapper.data_types`` -- the "
"string will still be used by the serializer, but the default :meth:`~Field."
"db_type` method will return ``None``. See the documentation of :meth:`~Field."
"db_type` for reasons why this might be useful. Putting a descriptive string "
"in as the type of the field for the serializer is a useful idea if you're "
"ever going to be using the serializer output in some other place, outside of "
"Django."
msgstr ""

msgid "Converting field data for serialization"
msgstr ""

msgid ""
"To customize how the values are serialized by a serializer, you can "
"override :meth:`~Field.value_to_string`. Using :meth:`~Field."
"value_from_object` is the best way to get the field's value prior to "
"serialization. For example, since ``HandField`` uses strings for its data "
"storage anyway, we can reuse some existing conversion code::"
msgstr ""

msgid "Some general advice"
msgstr "Alcuni consigli generali"

msgid ""
"Writing a custom field can be a tricky process, particularly if you're doing "
"complex conversions between your Python types and your database and "
"serialization formats. Here are a couple of tips to make things go more "
"smoothly:"
msgstr ""

msgid ""
"Look at the existing Django fields (in :file:`django/db/models/fields/"
"__init__.py`) for inspiration. Try to find a field that's similar to what "
"you want and extend it a little bit, instead of creating an entirely new "
"field from scratch."
msgstr ""

msgid ""
"Put a ``__str__()`` method on the class you're wrapping up as a field. There "
"are a lot of places where the default behavior of the field code is to call "
"``str()`` on the value. (In our examples in this document, ``value`` would "
"be a ``Hand`` instance, not a ``HandField``). So if your ``__str__()`` "
"method automatically converts to the string form of your Python object, you "
"can save yourself a lot of work."
msgstr ""

msgid "Writing a ``FileField`` subclass"
msgstr "Scrivere una sottoclasse  ``FileField``"

msgid ""
"In addition to the above methods, fields that deal with files have a few "
"other special requirements which must be taken into account. The majority of "
"the mechanics provided by ``FileField``, such as controlling database "
"storage and retrieval, can remain unchanged, leaving subclasses to deal with "
"the challenge of supporting a particular type of file."
msgstr ""

msgid ""
"Django provides a ``File`` class, which is used as a proxy to the file's "
"contents and operations. This can be subclassed to customize how the file is "
"accessed, and what methods are available. It lives at ``django.db.models."
"fields.files``, and its default behavior is explained in the :doc:`file "
"documentation </ref/files/file>`."
msgstr ""

msgid ""
"Once a subclass of ``File`` is created, the new ``FileField`` subclass must "
"be told to use it. To do so, assign the new ``File`` subclass to the special "
"``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""

msgid "A few suggestions"
msgstr "Alcuni suggerimenti"

msgid ""
"In addition to the above details, there are a few guidelines which can "
"greatly improve the efficiency and readability of the field's code."
msgstr ""

msgid ""
"The source for Django's own ``ImageField`` (in ``django/db/models/fields/"
"files.py``) is a great example of how to subclass ``FileField`` to support a "
"particular type of file, as it incorporates all of the techniques described "
"above."
msgstr ""

msgid ""
"Cache file attributes wherever possible. Since files may be stored in remote "
"storage systems, retrieving them may cost extra time, or even money, that "
"isn't always necessary. Once a file is retrieved to obtain some data about "
"its content, cache as much of that data as possible to reduce the number of "
"times the file must be retrieved on subsequent calls for that information."
msgstr ""

msgid "Custom template backend"
msgstr ""

msgid "Custom backends"
msgstr ""

msgid ""
"Here's how to implement a custom template backend in order to use another "
"template system. A template backend is a class that inherits ``django."
"template.backends.base.BaseEngine``. It must implement ``get_template()`` "
"and optionally ``from_string()``. Here's an example for a fictional "
"``foobar`` template library::"
msgstr ""

msgid "See `DEP 182`_ for more information."
msgstr ""

msgid "Debug integration for custom engines"
msgstr ""

msgid ""
"The Django debug page has hooks to provide detailed information when a "
"template error arises. Custom template engines can use these hooks to "
"enhance the traceback information that appears to users. The following hooks "
"are available:"
msgstr ""

msgid "Template postmortem"
msgstr ""

msgid ""
"The postmortem appears when :exc:`~django.template.TemplateDoesNotExist` is "
"raised. It lists the template engines and loaders that were used when trying "
"to find a given template. For example, if two Django engines are configured, "
"the postmortem will appear like:"
msgstr ""

msgid ""
"Custom engines can populate the postmortem by passing the ``backend`` and "
"``tried`` arguments when raising :exc:`~django.template."
"TemplateDoesNotExist`. Backends that use the postmortem :ref:`should specify "
"an origin <template-origin-api>` on the template object."
msgstr ""

msgid "Contextual line information"
msgstr ""

msgid ""
"If an error happens during template parsing or rendering, Django can display "
"the line the error happened on. For example:"
msgstr ""

msgid ""
"Custom engines can populate this information by setting a ``template_debug`` "
"attribute on exceptions raised during parsing and rendering. This attribute "
"is a :class:`dict` with the following values:"
msgstr ""

msgid "``'name'``: The name of the template in which the exception occurred."
msgstr ""

msgid "``'message'``: The exception message."
msgstr ""

msgid ""
"``'source_lines'``: The lines before, after, and including the line the "
"exception occurred on. This is for context, so it shouldn't contain more "
"than 20 lines or so."
msgstr ""

msgid "``'line'``: The line number on which the exception occurred."
msgstr ""

msgid ""
"``'before'``: The content on the error line before the token that raised the "
"error."
msgstr ""

msgid "``'during'``: The token that raised the error."
msgstr ""

msgid ""
"``'after'``: The content on the error line after the token that raised the "
"error."
msgstr ""

msgid "``'total'``: The number of lines in ``source_lines``."
msgstr ""

msgid "``'top'``: The line number where ``source_lines`` starts."
msgstr ""

msgid "``'bottom'``: The line number where ``source_lines`` ends."
msgstr ""

msgid "Given the above template error, ``template_debug`` would look like::"
msgstr ""

msgid "Origin API and 3rd-party integration"
msgstr ""

msgid ""
"Django templates have an :class:`~django.template.base.Origin` object "
"available through the ``template.origin`` attribute. This enables debug "
"information to be displayed in the :ref:`template postmortem <template-"
"postmortem>`, as well as in 3rd-party libraries, like the `Django Debug "
"Toolbar`_."
msgstr ""

msgid ""
"Custom engines can provide their own ``template.origin`` information by "
"creating an object that specifies the following attributes:"
msgstr ""

msgid "``'name'``: The full path to the template."
msgstr ""

msgid ""
"``'template_name'``: The relative path to the template as passed into the "
"template loading methods."
msgstr ""

msgid ""
"``'loader_name'``: An optional string identifying the function or class used "
"to load the template, e.g. ``django.template.loaders.filesystem.Loader``."
msgstr ""

msgid "Custom template tags and filters"
msgstr "Template tags e filtri personalizzati"

msgid ""
"Django's template language comes with a wide variety of :doc:`built-in tags "
"and filters </ref/templates/builtins>` designed to address the presentation "
"logic needs of your application. Nevertheless, you may find yourself needing "
"functionality that is not covered by the core set of template primitives. "
"You can extend the template engine by defining custom tags and filters using "
"Python, and then make them available to your templates using the :ttag:`{% "
"load %}<load>` tag."
msgstr ""

msgid "Code layout"
msgstr "Layout del codice"

msgid ""
"The most common place to specify custom template tags and filters is inside "
"a Django app. If they relate to an existing app, it makes sense to bundle "
"them there; otherwise, they can be added to a new app. When a Django app is "
"added to :setting:`INSTALLED_APPS`, any tags it defines in the conventional "
"location described below are automatically made available to load within "
"templates."
msgstr ""

msgid ""
"The app should contain a ``templatetags`` directory, at the same level as "
"``models.py``, ``views.py``, etc. If this doesn't already exist, create it - "
"don't forget the ``__init__.py`` file to ensure the directory is treated as "
"a Python package."
msgstr ""

msgid "Development server won't automatically restart"
msgstr "I server di sviluppo non si riavviano in automatico"

msgid ""
"After adding the ``templatetags``  module, you will need to restart your "
"server before you can use the tags or filters in templates."
msgstr ""

msgid ""
"Your custom tags and filters will live in a module inside the "
"``templatetags`` directory. The name of the module file is the name you'll "
"use to load the tags later, so be careful to pick a name that won't clash "
"with custom tags and filters in another app."
msgstr ""

msgid ""
"For example, if your custom tags/filters are in a file called ``poll_extras."
"py``, your app layout might look like this::"
msgstr ""
"Per esempio, se i tags/filtri personalizzati sono in un file chiamato "
"``poll_extras.py``, il layout della tua applicazione potrebbe assomigliare a "
"questo::"

msgid "And in your template you would use the following:"
msgstr "E nel tuo template utilizzerai i seguenti:"

msgid ""
"The app that contains the custom tags must be in :setting:`INSTALLED_APPS` "
"in order for the :ttag:`{% load %}<load>` tag to work. This is a security "
"feature: It allows you to host Python code for many template libraries on a "
"single host machine without enabling access to all of them for every Django "
"installation."
msgstr ""

msgid ""
"There's no limit on how many modules you put in the ``templatetags`` "
"package. Just keep in mind that a :ttag:`{% load %}<load>` statement will "
"load tags/filters for the given Python module name, not the name of the app."
msgstr ""

msgid ""
"To be a valid tag library, the module must contain a module-level variable "
"named ``register`` that is a ``template.Library`` instance, in which all the "
"tags and filters are registered. So, near the top of your module, put the "
"following::"
msgstr ""

msgid ""
"Alternatively, template tag modules can be registered through the "
"``'libraries'`` argument to :class:`~django.template.backends.django."
"DjangoTemplates`. This is useful if you want to use a different label from "
"the template tag module name when loading template tags. It also enables you "
"to register tags without installing an application."
msgstr ""

msgid "Behind the scenes"
msgstr "Dietro le scene"

msgid ""
"For a ton of examples, read the source code for Django's default filters and "
"tags. They're in ``django/template/defaultfilters.py`` and ``django/template/"
"defaulttags.py``, respectively."
msgstr ""

msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr ""

msgid "Writing custom template filters"
msgstr "Scrivere filtri template personalizzati"

msgid "Custom filters are Python functions that take one or two arguments:"
msgstr ""

msgid "The value of the variable (input) -- not necessarily a string."
msgstr "Il valore della variabile (input) - non necessariamente una stringa."

msgid ""
"The value of the argument -- this can have a default value, or be left out "
"altogether."
msgstr ""
"Il valore dell'argomento - può avere un valore di default o può essere "
"lasciata fuori."

msgid ""
"For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` "
"would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""
"Per esempio, nel filtro \"{{ var|foo:\"bar\" }}\", al filtro foo sarà "
"passata la variabile \"var\" e l'argomento \"bar\"."

msgid ""
"Since the template language doesn't provide exception handling, any "
"exception raised from a template filter will be exposed as a server error. "
"Thus, filter functions should avoid raising exceptions if there is a "
"reasonable fallback value to return. In case of input that represents a "
"clear bug in a template, raising an exception may still be better than "
"silent failure which hides the bug."
msgstr ""

msgid "Here's an example filter definition::"
msgstr "Un esempio della definizione di un filtro"

msgid "And here's an example of how that filter would be used:"
msgstr "E qui un esempio di come il viene usato"

msgid ""
"Most filters don't take arguments. In this case, leave the argument out of "
"your function::"
msgstr ""

msgid "Registering custom filters"
msgstr "Registrazione di filtri personalizzati"

msgid ""
"Once you've written your filter definition, you need to register it with "
"your ``Library`` instance, to make it available to Django's template "
"language::"
msgstr ""
"Dopo aver scritto la definizione del filtro, bisogna registrarlo con "
"l'istanza di \"Library\" al fine di renderlo disponibile per l'uso nel "
"linguaggio dei template di Django."

msgid "The ``Library.filter()`` method takes two arguments:"
msgstr "Il metodo \"Library.filter()\" prende due argomenti:"

msgid "The name of the filter -- a string."
msgstr "Il nome del filtro -- una stringa"

msgid ""
"The compilation function -- a Python function (not the name of the function "
"as a string)."
msgstr ""

msgid "You can use ``register.filter()`` as a decorator instead::"
msgstr "In alternativa puoi usare ``register.filter()`` come decorator ::"

msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the filter name."
msgstr ""

msgid ""
"Finally, ``register.filter()`` also accepts three keyword arguments, "
"``is_safe``, ``needs_autoescape``, and ``expects_localtime``. These "
"arguments are described in :ref:`filters and auto-escaping <filters-auto-"
"escaping>` and :ref:`filters and time zones <filters-timezones>` below."
msgstr ""

msgid "Template filters that expect strings"
msgstr "Template filtri che si aspettano delle stringhe"

msgid ""
"If you're writing a template filter that only expects a string as the first "
"argument, you should use the decorator ``stringfilter``. This will convert "
"an object to its string value before being passed to your function::"
msgstr ""

msgid ""
"This way, you'll be able to pass, say, an integer to this filter, and it "
"won't cause an ``AttributeError`` (because integers don't have ``lower()`` "
"methods)."
msgstr ""

msgid "Filters and auto-escaping"
msgstr "Filtri e auto escaping"

msgid ""
"When writing a custom filter, give some thought to how the filter will "
"interact with Django's auto-escaping behavior. Note that two types of "
"strings can be passed around inside the template code:"
msgstr ""

msgid ""
"**Raw strings** are the native Python strings. On output, they're escaped if "
"auto-escaping is in effect and presented unchanged, otherwise."
msgstr ""

msgid ""
"**Safe strings** are strings that have been marked safe from further "
"escaping at output time. Any necessary escaping has already been done. "
"They're commonly used for output that contains raw HTML that is intended to "
"be interpreted as-is on the client side."
msgstr ""

msgid ""
"Internally, these strings are of type :class:`~django.utils.safestring."
"SafeString`. You can test for them using code like::"
msgstr ""

msgid "Template filter code falls into one of two situations:"
msgstr ""

msgid ""
"Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, "
"``'``, ``\"`` or ``&``) into the result that were not already present. In "
"this case, you can let Django take care of all the auto-escaping handling "
"for you. All you need to do is set the ``is_safe`` flag to ``True`` when you "
"register your filter function, like so::"
msgstr ""

msgid ""
"This flag tells Django that if a \"safe\" string is passed into your filter, "
"the result will still be \"safe\" and if a non-safe string is passed in, "
"Django will automatically escape it, if necessary."
msgstr ""

msgid ""
"You can think of this as meaning \"this filter is safe -- it doesn't "
"introduce any possibility of unsafe HTML.\""
msgstr ""

msgid ""
"The reason ``is_safe`` is necessary is because there are plenty of normal "
"string operations that will turn a ``SafeData`` object back into a normal "
"``str`` object and, rather than try to catch them all, which would be very "
"difficult, Django repairs the damage after the filter has completed."
msgstr ""

msgid ""
"For example, suppose you have a filter that adds the string ``xx`` to the "
"end of any input. Since this introduces no dangerous HTML characters to the "
"result (aside from any that were already present), you should mark your "
"filter with ``is_safe``::"
msgstr ""

msgid ""
"When this filter is used in a template where auto-escaping is enabled, "
"Django will escape the output whenever the input is not already marked as "
"\"safe\"."
msgstr ""

msgid ""
"By default, ``is_safe`` is ``False``, and you can omit it from any filters "
"where it isn't required."
msgstr ""

msgid ""
"Be careful when deciding if your filter really does leave safe strings as "
"safe. If you're *removing* characters, you might inadvertently leave "
"unbalanced HTML tags or entities in the result. For example, removing a "
"``>`` from the input might turn ``<a>`` into ``<a``, which would need to be "
"escaped on output to avoid causing problems. Similarly, removing a semicolon "
"(``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity "
"and thus needs further escaping. Most cases won't be nearly this tricky, but "
"keep an eye out for any problems like that when reviewing your code."
msgstr ""

msgid ""
"Marking a filter ``is_safe`` will coerce the filter's return value to a "
"string.  If your filter should return a boolean or other non-string value, "
"marking it ``is_safe`` will probably have unintended consequences (such as "
"converting a boolean False to the string 'False')."
msgstr ""

msgid ""
"Alternatively, your filter code can manually take care of any necessary "
"escaping. This is necessary when you're introducing new HTML markup into the "
"result. You want to mark the output as safe from further escaping so that "
"your HTML markup isn't escaped further, so you'll need to handle the input "
"yourself."
msgstr ""

msgid ""
"To mark the output as a safe string, use :func:`django.utils.safestring."
"mark_safe`."
msgstr ""

msgid ""
"Be careful, though. You need to do more than just mark the output as safe. "
"You need to ensure it really *is* safe, and what you do depends on whether "
"auto-escaping is in effect. The idea is to write filters that can operate in "
"templates where auto-escaping is either on or off in order to make things "
"easier for your template authors."
msgstr ""

msgid ""
"In order for your filter to know the current auto-escaping state, set the "
"``needs_autoescape`` flag to ``True`` when you register your filter "
"function. (If you don't specify this flag, it defaults to ``False``). This "
"flag tells Django that your filter function wants to be passed an extra "
"keyword argument, called ``autoescape``, that is ``True`` if auto-escaping "
"is in effect and ``False`` otherwise. It is recommended to set the default "
"of the ``autoescape`` parameter to ``True``, so that if you call the "
"function from Python code it will have escaping enabled by default."
msgstr ""

msgid ""
"For example, let's write a filter that emphasizes the first character of a "
"string::"
msgstr ""
"Ad esempio, scriviamo un filtro che enfatizza il primo carattere di una "
"stringa::"

msgid ""
"The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean "
"that our function will know whether automatic escaping is in effect when the "
"filter is called. We use ``autoescape`` to decide whether the input data "
"needs to be passed through ``django.utils.html.conditional_escape`` or not. "
"(In the latter case, we use the identity function as the \"escape\" "
"function.) The ``conditional_escape()`` function is like ``escape()`` except "
"it only escapes input that is **not** a ``SafeData`` instance. If a "
"``SafeData`` instance is passed to ``conditional_escape()``, the data is "
"returned unchanged."
msgstr ""

msgid ""
"Finally, in the above example, we remember to mark the result as safe so "
"that our HTML is inserted directly into the template without further "
"escaping."
msgstr ""

msgid ""
"There's no need to worry about the ``is_safe`` flag in this case (although "
"including it wouldn't hurt anything). Whenever you manually handle the auto-"
"escaping issues and return a safe string, the ``is_safe`` flag won't change "
"anything either way."
msgstr ""

msgid "Avoiding XSS vulnerabilities when reusing built-in filters"
msgstr "Evitare le vulnerabilità XSS quando si riutilizzano i filtri built-in"

msgid ""
"Django's built-in filters have ``autoescape=True`` by default in order to "
"get the proper autoescaping behavior and avoid a cross-site script "
"vulnerability."
msgstr ""
"I filtri built-in di Django hanno di default \"autoescape=True\" al fine di "
"assicurare il corretto autoescaping ed evitare vulnerabilità di tipo cross-"
"site script."

msgid ""
"In older versions of Django, be careful when reusing Django's built-in "
"filters as ``autoescape`` defaults to ``None``. You'll need to pass "
"``autoescape=True`` to get autoescaping."
msgstr ""

msgid ""
"For example, if you wanted to write a custom filter called "
"``urlize_and_linebreaks`` that combined the :tfilter:`urlize` and :tfilter:"
"`linebreaksbr` filters, the filter would look like::"
msgstr ""

msgid "Then:"
msgstr "Poi"

msgid "would be equivalent to:"
msgstr ""

msgid "Filters and time zones"
msgstr "Filtri e time zones"

msgid ""
"If you write a custom filter that operates on :class:`~datetime.datetime` "
"objects, you'll usually register it with the ``expects_localtime`` flag set "
"to ``True``::"
msgstr ""

msgid ""
"When this flag is set, if the first argument to your filter is a time zone "
"aware datetime, Django will convert it to the current time zone before "
"passing it to your filter when appropriate, according to :ref:`rules for "
"time zones conversions in templates <time-zones-in-templates>`."
msgstr ""

msgid "Writing custom template tags"
msgstr "Scrivere template tag personalizzati"

msgid ""
"Tags are more complex than filters, because tags can do anything. Django "
"provides a number of shortcuts that make writing most types of tags easier. "
"First we'll explore those shortcuts, then explain how to write a tag from "
"scratch for those cases when the shortcuts aren't powerful enough."
msgstr ""

msgid "Simple tags"
msgstr "Semplici tag"

msgid ""
"Many template tags take a number of arguments -- strings or template "
"variables -- and return a result after doing some processing based solely on "
"the input arguments and some external information. For example, a "
"``current_time`` tag might accept a format string and return the time as a "
"string formatted accordingly."
msgstr ""

msgid ""
"To ease the creation of these types of tags, Django provides a helper "
"function, ``simple_tag``. This function, which is a method of ``django."
"template.Library``, takes a function that accepts any number of arguments, "
"wraps it in a ``render`` function and the other necessary bits mentioned "
"above and registers it with the template system."
msgstr ""

msgid "Our ``current_time`` function could thus be written like this::"
msgstr ""

msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr ""

msgid ""
"Checking for the required number of arguments, etc., has already been done "
"by the time our function is called, so we don't need to do that."
msgstr ""

msgid ""
"The quotes around the argument (if any) have already been stripped away, so "
"we receive a plain string."
msgstr ""

msgid ""
"If the argument was a template variable, our function is passed the current "
"value of the variable, not the variable itself."
msgstr ""

msgid ""
"Unlike other tag utilities, ``simple_tag`` passes its output through :func:"
"`~django.utils.html.conditional_escape` if the template context is in "
"autoescape mode, to ensure correct HTML and protect you from XSS "
"vulnerabilities."
msgstr ""

msgid ""
"If additional escaping is not desired, you will need to use :func:`~django."
"utils.safestring.mark_safe` if you are absolutely sure that your code does "
"not contain XSS vulnerabilities. For building small HTML snippets, use of :"
"func:`~django.utils.html.format_html` instead of ``mark_safe()`` is strongly "
"recommended."
msgstr ""

msgid ""
"If your template tag needs to access the current context, you can use the "
"``takes_context`` argument when registering your tag::"
msgstr ""

msgid "Note that the first argument *must* be called ``context``."
msgstr "Nota che il primo argomento deve chiamarsi \"context\""

msgid ""
"For more information on how the ``takes_context`` option works, see the "
"section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

msgid "If you need to rename your tag, you can provide a custom name for it::"
msgstr ""
"Se hai bisogno dirinominare il tag, puoi fornirne un nome personalizzato::"

msgid ""
"``simple_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""

msgid ""
"Then in the template any number of arguments, separated by spaces, may be "
"passed to the template tag. Like in Python, the values for keyword arguments "
"are set using the equal sign (\"``=``\") and must be provided after the "
"positional arguments. For example:"
msgstr ""

msgid ""
"It's possible to store the tag results in a template variable rather than "
"directly outputting it. This is done by using the ``as`` argument followed "
"by the variable name. Doing so enables you to output the content yourself "
"where you see fit:"
msgstr ""

msgid "Inclusion tags"
msgstr "Tag di inclusione"

msgid ""
"Another common type of template tag is the type that displays some data by "
"rendering *another* template. For example, Django's admin interface uses "
"custom template tags to display the buttons along the bottom of the \"add/"
"change\" form pages. Those buttons always look the same, but the link "
"targets change depending on the object being edited -- so they're a perfect "
"case for using a small template that is filled with details from the current "
"object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""

msgid "These sorts of tags are called \"inclusion tags\"."
msgstr "I tag di questo tipo sono detti \"tag di inclusione\""

msgid ""
"Writing inclusion tags is probably best demonstrated by example. Let's write "
"a tag that outputs a list of choices for a given ``Poll`` object, such as "
"was created in the :ref:`tutorials <creating-models>`. We'll use the tag "
"like this:"
msgstr ""

msgid "...and the output will be something like this:"
msgstr "... e l'output sarà qualcosa di simile a questo::"

msgid ""
"First, define the function that takes the argument and produces a dictionary "
"of data for the result. The important point here is we only need to return a "
"dictionary, not anything more complex. This will be used as a template "
"context for the template fragment. Example::"
msgstr ""

msgid ""
"Next, create the template used to render the tag's output. This template is "
"a fixed feature of the tag: the tag writer specifies it, not the template "
"designer. Following our example, the template is very short:"
msgstr ""

msgid ""
"Now, create and register the inclusion tag by calling the "
"``inclusion_tag()`` method on a ``Library`` object. Following our example, "
"if the above template is in a file called ``results.html`` in a directory "
"that's searched by the template loader, we'd register the tag like this::"
msgstr ""

msgid ""
"Alternatively it is possible to register the inclusion tag using a :class:"
"`django.template.Template` instance::"
msgstr ""

msgid "...when first creating the function."
msgstr ""

msgid ""
"Sometimes, your inclusion tags might require a large number of arguments, "
"making it a pain for template authors to pass in all the arguments and "
"remember their order. To solve this, Django provides a ``takes_context`` "
"option for inclusion tags. If you specify ``takes_context`` in creating a "
"template tag, the tag will have no required arguments, and the underlying "
"Python function will have one argument -- the template context as of when "
"the tag was called."
msgstr ""

msgid ""
"For example, say you're writing an inclusion tag that will always be used in "
"a context that contains ``home_link`` and ``home_title`` variables that "
"point back to the main page. Here's what the Python function would look "
"like::"
msgstr ""

msgid ""
"Note that the first parameter to the function *must* be called ``context``."
msgstr ""

msgid ""
"In that ``register.inclusion_tag()`` line, we specified "
"``takes_context=True`` and the name of the template. Here's what the "
"template ``link.html`` might look like:"
msgstr ""

msgid ""
"Then, any time you want to use that custom tag, load its library and call it "
"without any arguments, like so:"
msgstr ""

msgid ""
"Note that when you're using ``takes_context=True``, there's no need to pass "
"arguments to the template tag. It automatically gets access to the context."
msgstr ""

msgid ""
"The ``takes_context`` parameter defaults to ``False``. When it's set to "
"``True``, the tag is passed the context object, as in this example. That's "
"the only difference between this case and the previous ``inclusion_tag`` "
"example."
msgstr ""

msgid ""
"``inclusion_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""

msgid "Advanced custom template tags"
msgstr ""

msgid ""
"Sometimes the basic features for custom template tag creation aren't enough. "
"Don't worry, Django gives you complete access to the internals required to "
"build a template tag from the ground up."
msgstr ""

msgid "A quick overview"
msgstr "Una rapida panoramica"

msgid ""
"The template system works in a two-step process: compiling and rendering. To "
"define a custom template tag, you specify how the compilation works and how "
"the rendering works."
msgstr ""

msgid ""
"When Django compiles a template, it splits the raw template text into "
"''nodes''. Each node is an instance of ``django.template.Node`` and has a "
"``render()`` method. A compiled template is a list of ``Node`` objects. When "
"you call ``render()`` on a compiled template object, the template calls "
"``render()`` on each ``Node`` in its node list, with the given context.  The "
"results are all concatenated together to form the output of the template."
msgstr ""

msgid ""
"Thus, to define a custom template tag, you specify how the raw template tag "
"is converted into a ``Node`` (the compilation function), and what the node's "
"``render()`` method does."
msgstr ""

msgid "Writing the compilation function"
msgstr "Scrivere la funzione di compilazione"

msgid ""
"For each template tag the template parser encounters, it calls a Python "
"function with the tag contents and the parser object itself. This function "
"is responsible for returning a ``Node`` instance based on the contents of "
"the tag."
msgstr ""

msgid ""
"For example, let's write a full implementation of our template tag, ``{% "
"current_time %}``, that displays the current date/time, formatted according "
"to a parameter given in the tag, in :func:`~time.strftime` syntax. It's a "
"good idea to decide the tag syntax before anything else. In our case, let's "
"say the tag should be used like this:"
msgstr ""

msgid ""
"The parser for this function should grab the parameter and create a ``Node`` "
"object::"
msgstr ""

msgid "Notes:"
msgstr "Note:"

msgid ""
"``parser`` is the template parser object. We don't need it in this example."
msgstr ""
"``parser`` è l'oggetto parser di template. Non ne abbiamo bisogno in questo "
"esempio."

msgid ""
"``token.contents`` is a string of the raw contents of the tag. In our "
"example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""

msgid ""
"The ``token.split_contents()`` method separates the arguments on spaces "
"while keeping quoted strings together. The more straightforward ``token."
"contents.split()`` wouldn't be as robust, as it would naively split on *all* "
"spaces, including those within quoted strings. It's a good idea to always "
"use ``token.split_contents()``."
msgstr ""

msgid ""
"This function is responsible for raising ``django.template."
"TemplateSyntaxError``, with helpful messages, for any syntax error."
msgstr ""

msgid ""
"The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't "
"hard-code the tag's name in your error messages, because that couples the "
"tag's name to your function. ``token.contents.split()[0]`` will ''always'' "
"be the name of your tag -- even when the tag has no arguments."
msgstr ""

msgid ""
"The function returns a ``CurrentTimeNode`` with everything the node needs to "
"know about this tag. In this case, it passes the argument -- ``\"%Y-%m-%d %I:"
"%M %p\"``. The leading and trailing quotes from the template tag are removed "
"in ``format_string[1:-1]``."
msgstr ""

msgid ""
"The parsing is very low-level. The Django developers have experimented with "
"writing small frameworks on top of this parsing system, using techniques "
"such as EBNF grammars, but those experiments made the template engine too "
"slow. It's low-level because that's fastest."
msgstr ""

msgid "Writing the renderer"
msgstr "Scrivere il renderer"

msgid ""
"The second step in writing custom tags is to define a ``Node`` subclass that "
"has a ``render()`` method."
msgstr ""

msgid "Continuing the above example, we need to define ``CurrentTimeNode``::"
msgstr ""

msgid ""
"``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always "
"pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""

msgid "The ``render()`` method is where the work actually happens."
msgstr ""

msgid ""
"``render()`` should generally fail silently, particularly in a production "
"environment. In some cases however, particularly if ``context.template."
"engine.debug`` is ``True``, this method may raise an exception to make "
"debugging easier. For example, several core tags raise ``django.template."
"TemplateSyntaxError`` if they receive the wrong number or type of arguments."
msgstr ""

msgid ""
"Ultimately, this decoupling of compilation and rendering results in an "
"efficient template system, because a template can render multiple contexts "
"without having to be parsed multiple times."
msgstr ""

msgid "Auto-escaping considerations"
msgstr ""

msgid ""
"The output from template tags is **not** automatically run through the auto-"
"escaping filters (with the exception of :meth:`~django.template.Library."
"simple_tag` as described above). However, there are still a couple of things "
"you should keep in mind when writing a template tag."
msgstr ""

msgid ""
"If the ``render()`` method of your template tag stores the result in a "
"context variable (rather than returning the result in a string), it should "
"take care to call ``mark_safe()`` if appropriate. When the variable is "
"ultimately rendered, it will be affected by the auto-escape setting in "
"effect at the time, so content that should be safe from further escaping "
"needs to be marked as such."
msgstr ""

msgid ""
"Also, if your template tag creates a new context for performing some sub-"
"rendering, set the auto-escape attribute to the current context's value. The "
"``__init__`` method for the ``Context`` class takes a parameter called "
"``autoescape`` that you can use for this purpose. For example::"
msgstr ""

msgid ""
"This is not a very common situation, but it's useful if you're rendering a "
"template yourself. For example::"
msgstr ""
"Non è una situazione molto comune, ma è utile se si fa rendering di un "
"template da soli. Per esempio::"

msgid ""
"If we had neglected to pass in the current ``context.autoescape`` value to "
"our new ``Context`` in this example, the results would have *always* been "
"automatically escaped, which may not be the desired behavior if the template "
"tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""

msgid "Thread-safety considerations"
msgstr "Considerazioni sulla sicurezza"

msgid ""
"Once a node is parsed, its ``render`` method may be called any number of "
"times. Since Django is sometimes run in multi-threaded environments, a "
"single node may be simultaneously rendering with different contexts in "
"response to two separate requests. Therefore, it's important to make sure "
"your template tags are thread safe."
msgstr ""

msgid ""
"To make sure your template tags are thread safe, you should never store "
"state information on the node itself. For example, Django provides a "
"builtin :ttag:`cycle` template tag that cycles among a list of given strings "
"each time it's rendered:"
msgstr ""

msgid ""
"A naive implementation of ``CycleNode`` might look something like this::"
msgstr ""

msgid ""
"But, suppose we have two templates rendering the template snippet from above "
"at the same time:"
msgstr ""

msgid ""
"Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

msgid ""
"Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

msgid ""
"Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

msgid ""
"Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

msgid ""
"The CycleNode is iterating, but it's iterating globally. As far as Thread 1 "
"and Thread 2 are concerned, it's always returning the same value. This is "
"not what we want!"
msgstr ""

msgid ""
"To address this problem, Django provides a ``render_context`` that's "
"associated with the ``context`` of the template that is currently being "
"rendered. The ``render_context`` behaves like a Python dictionary, and "
"should be used to store ``Node`` state between invocations of the ``render`` "
"method."
msgstr ""

msgid ""
"Let's refactor our ``CycleNode`` implementation to use the "
"``render_context``::"
msgstr ""

msgid ""
"Note that it's perfectly safe to store global information that will not "
"change throughout the life of the ``Node`` as an attribute. In the case of "
"``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` "
"is instantiated, so we don't need to put it in the ``render_context``. But "
"state information that is specific to the template that is currently being "
"rendered, like the current iteration of the ``CycleNode``, should be stored "
"in the ``render_context``."
msgstr ""

msgid ""
"Notice how we used ``self`` to scope the ``CycleNode`` specific information "
"within the ``render_context``. There may be multiple ``CycleNodes`` in a "
"given template, so we need to be careful not to clobber another node's state "
"information. The easiest way to do this is to always use ``self`` as the key "
"into ``render_context``. If you're keeping track of several state variables, "
"make ``render_context[self]`` a dictionary."
msgstr ""

msgid "Registering the tag"
msgstr ""

msgid ""
"Finally, register the tag with your module's ``Library`` instance, as "
"explained in :ref:`writing custom template tags<howto-writing-custom-"
"template-tags>` above. Example::"
msgstr ""

msgid "The ``tag()`` method takes two arguments:"
msgstr "Il methodo ``tag()`` ha bisogni di due argomenti:"

msgid ""
"The name of the template tag -- a string. If this is left out, the name of "
"the compilation function will be used."
msgstr ""
"Il nome del template tag -- una stringa. Se viene tralasciato, il nome della "
"fu..?"

msgid ""
"As with filter registration, it is also possible to use this as a decorator::"
msgstr ""

msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the tag name."
msgstr ""

msgid "Passing template variables to the tag"
msgstr "Passare variabili del template ai tag"

msgid ""
"Although you can pass any number of arguments to a template tag using "
"``token.split_contents()``, the arguments are all unpacked as string "
"literals. A little more work is required in order to pass dynamic content (a "
"template variable) to a template tag as an argument."
msgstr ""

msgid ""
"While the previous examples have formatted the current time into a string "
"and returned the string, suppose you wanted to pass in a :class:`~django.db."
"models.DateTimeField` from an object and have the template tag format that "
"date-time:"
msgstr ""

msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr ""

msgid "The tag name ``format_time``."
msgstr "Il nome tag ``format_time``."

msgid ""
"The string ``'blog_entry.date_updated'`` (without the surrounding quotes)."
msgstr ""

msgid ""
"The formatting string ``'\"%Y-%m-%d %I:%M %p\"'``. The return value from "
"``split_contents()`` will include the leading and trailing quotes for string "
"literals like this."
msgstr ""

msgid "Now your tag should begin to look like this::"
msgstr ""

msgid ""
"You also have to change the renderer to retrieve the actual contents of the "
"``date_updated`` property of the ``blog_entry`` object.  This can be "
"accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""

msgid ""
"To use the ``Variable`` class, instantiate it with the name of the variable "
"to be resolved, and then call ``variable.resolve(context)``. So, for "
"example::"
msgstr ""

msgid ""
"Variable resolution will throw a ``VariableDoesNotExist`` exception if it "
"cannot resolve the string passed to it in the current context of the page."
msgstr ""

msgid "Setting a variable in the context"
msgstr "Impostare una variabile nel contesto"

msgid ""
"The above examples output a value. Generally, it's more flexible if your "
"template tags set template variables instead of outputting values. That way, "
"template authors can reuse the values that your template tags create."
msgstr ""

msgid ""
"To set a variable in the context, use dictionary assignment on the context "
"object in the ``render()`` method. Here's an updated version of "
"``CurrentTimeNode`` that sets a template variable ``current_time`` instead "
"of outputting it::"
msgstr ""

msgid ""
"Note that ``render()`` returns the empty string. ``render()`` should always "
"return string output. If all the template tag does is set a variable, "
"``render()`` should return the empty string."
msgstr ""

msgid "Here's how you'd use this new version of the tag:"
msgstr ""

msgid "Variable scope in context"
msgstr ""

msgid ""
"Any variable set in the context will only be available in the same ``block`` "
"of the template in which it was assigned. This behavior is intentional; it "
"provides a scope for variables so that they don't conflict with context in "
"other blocks."
msgstr ""

msgid ""
"But, there's a problem with ``CurrentTimeNode2``: The variable name "
"``current_time`` is hard-coded. This means you'll need to make sure your "
"template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% "
"current_time %}`` will blindly overwrite that variable's value. A cleaner "
"solution is to make the template tag specify the name of the output "
"variable, like so:"
msgstr ""

msgid ""
"To do that, you'll need to refactor both the compilation function and "
"``Node`` class, like so::"
msgstr ""

msgid ""
"The difference here is that ``do_current_time()`` grabs the format string "
"and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""

msgid ""
"Finally, if you only need to have a simple syntax for your custom context-"
"updating template tag, consider using the :meth:`~django.template.Library."
"simple_tag` shortcut, which supports assigning the tag results to a template "
"variable."
msgstr ""

msgid "Parsing until another block tag"
msgstr ""

msgid ""
"Template tags can work in tandem. For instance, the standard :ttag:`{% "
"comment %}<comment>` tag hides everything until ``{% endcomment %}``. To "
"create a template tag such as this, use ``parser.parse()`` in your "
"compilation function."
msgstr ""

msgid "Here's how a simplified ``{% comment %}`` tag might be implemented::"
msgstr ""

msgid ""
"The actual implementation of :ttag:`{% comment %}<comment>` is slightly "
"different in that it allows broken template tags to appear between ``{% "
"comment %}`` and ``{% endcomment %}``. It does so by calling ``parser."
"skip_past('endcomment')`` instead of ``parser.parse(('endcomment',))`` "
"followed by ``parser.delete_first_token()``, thus avoiding the generation of "
"a node list."
msgstr ""

msgid ""
"``parser.parse()`` takes a tuple of names of block tags ''to parse until''. "
"It returns an instance of ``django.template.NodeList``, which is a list of "
"all ``Node`` objects that the parser encountered ''before'' it encountered "
"any of the tags named in the tuple."
msgstr ""

msgid ""
"In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, "
"``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% "
"endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` "
"themselves."
msgstr ""

msgid ""
"After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the "
"``{% endcomment %}`` tag, so the code needs to explicitly call ``parser."
"delete_first_token()``."
msgstr ""

msgid ""
"``CommentNode.render()`` returns an empty string. Anything between ``{% "
"comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""

msgid "Parsing until another block tag, and saving contents"
msgstr ""

msgid ""
"In the previous example, ``do_comment()`` discarded everything between ``{% "
"comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible "
"to do something with the code between block tags."
msgstr ""

msgid ""
"For example, here's a custom template tag, ``{% upper %}``, that capitalizes "
"everything between itself and ``{% endupper %}``."
msgstr ""

msgid "Usage:"
msgstr "Utilizzo:"

msgid ""
"As in the previous example, we'll use ``parser.parse()``. But this time, we "
"pass the resulting ``nodelist`` to the ``Node``::"
msgstr ""

msgid ""
"The only new concept here is the ``self.nodelist.render(context)`` in "
"``UpperNode.render()``."
msgstr ""

msgid ""
"For more examples of complex rendering, see the source code of :ttag:`{% for "
"%}<for>` in ``django/template/defaulttags.py`` and :ttag:`{% if %}<if>` in "
"``django/template/smartif.py``."
msgstr ""

msgid "How to use Django with Daphne"
msgstr ""

msgid ""
"Daphne_ is a pure-Python ASGI server for UNIX, maintained by members of the "
"Django project. It acts as the reference server for ASGI."
msgstr ""

msgid "Installing Daphne"
msgstr ""

msgid "You can install Daphne with ``pip``::"
msgstr ""

msgid "Running Django in Daphne"
msgstr ""

msgid ""
"When Daphne is installed, a ``daphne`` command is available which starts the "
"Daphne server process. At its simplest, Daphne needs to be called with the "
"location of a module containing an ASGI application object, followed by what "
"the application is called (separated by a colon)."
msgstr ""

msgid "For a typical Django project, invoking Daphne would look like::"
msgstr ""

msgid ""
"This will start one process listening on ``127.0.0.1:8000``. It requires "
"that your project be on the Python path; to ensure that run this command "
"from the same directory as your ``manage.py`` file."
msgstr ""

msgid "How to use Django with Hypercorn"
msgstr ""

msgid ""
"Hypercorn_ is an ASGI server that supports HTTP/1, HTTP/2, and HTTP/3 with "
"an emphasis on protocol support."
msgstr ""

msgid "Installing Hypercorn"
msgstr ""

msgid "You can install Hypercorn with ``pip``::"
msgstr ""

msgid "Running Django in Hypercorn"
msgstr ""

msgid ""
"When Hypercorn is installed, a ``hypercorn`` command is available which runs "
"ASGI applications. Hypercorn needs to be called with the location of a "
"module containing an ASGI application object, followed by what the "
"application is called (separated by a colon)."
msgstr ""

msgid "For a typical Django project, invoking Hypercorn would look like::"
msgstr ""

msgid ""
"For more advanced usage, please read the `Hypercorn documentation "
"<Hypercorn_>`_."
msgstr ""

msgid "How to deploy with ASGI"
msgstr ""

msgid ""
"As well as WSGI, Django also supports deploying on ASGI_, the emerging "
"Python standard for asynchronous web servers and applications."
msgstr ""

msgid ""
"Django's :djadmin:`startproject` management command sets up a default ASGI "
"configuration for you, which you can tweak as needed for your project, and "
"direct any ASGI-compliant application server to use."
msgstr ""

msgid ""
"Django includes getting-started documentation for the following ASGI servers:"
msgstr ""

msgid "The ``application`` object"
msgstr ""

msgid ""
"Like WSGI, ASGI has you supply an ``application`` callable which the "
"application server uses to communicate with your code. It's commonly "
"provided as an object named ``application`` in a Python module accessible to "
"the server."
msgstr ""

msgid ""
"The :djadmin:`startproject` command creates a file :file:`<project_name>/"
"asgi.py` that contains such an ``application`` callable."
msgstr ""

msgid ""
"It's not used by the development server (``runserver``), but can be used by "
"any ASGI server either in development or in production."
msgstr ""

msgid ""
"ASGI servers usually take the path to the application callable as a string; "
"for most Django projects, this will look like ``myproject.asgi:application``."
msgstr ""

msgid ""
"While Django's default ASGI handler will run all your code in a synchronous "
"thread, if you choose to run your own async handler you must be aware of "
"async-safety."
msgstr ""

msgid ""
"Do not call blocking synchronous functions or libraries in any async code. "
"Django prevents you from doing this with the parts of Django that are not "
"async-safe, but the same may not be true of third-party apps or Python "
"libraries."
msgstr ""

msgid "Configuring the settings module"
msgstr ""

msgid ""
"When the ASGI server loads your application, Django needs to import the "
"settings module — that's where your entire application is defined."
msgstr ""

msgid ""
"Django uses the :envvar:`DJANGO_SETTINGS_MODULE` environment variable to "
"locate the appropriate settings module. It must contain the dotted path to "
"the settings module. You can use a different value for development and "
"production; it all depends on how you organize your settings."
msgstr ""

msgid ""
"If this variable isn't set, the default :file:`asgi.py` sets it to ``mysite."
"settings``, where ``mysite`` is the name of your project."
msgstr ""

msgid "Applying ASGI middleware"
msgstr ""

msgid ""
"To apply ASGI middleware, or to embed Django in another ASGI application, "
"you can wrap Django's ``application`` object in the ``asgi.py`` file. For "
"example::"
msgstr ""

msgid "How to use Django with Uvicorn"
msgstr ""

msgid ""
"Uvicorn_ is an ASGI server based on ``uvloop`` and ``httptools``, with an "
"emphasis on speed."
msgstr ""

msgid "Installing Uvicorn"
msgstr ""

msgid "You can install Uvicorn with ``pip``::"
msgstr ""

msgid "Running Django in Uvicorn"
msgstr ""

msgid ""
"When Uvicorn is installed, a ``uvicorn`` command is available which runs "
"ASGI applications. Uvicorn needs to be called with the location of a module "
"containing an ASGI application object, followed by what the application is "
"called (separated by a colon)."
msgstr ""

msgid "For a typical Django project, invoking Uvicorn would look like::"
msgstr ""

msgid ""
"For more advanced usage, please read the `Uvicorn documentation <Uvicorn_>`_."
msgstr ""

msgid "Deployment checklist"
msgstr ""

msgid ""
"The Internet is a hostile environment. Before deploying your Django project, "
"you should take some time to review your settings, with security, "
"performance, and operations in mind."
msgstr ""

msgid ""
"Django includes many :doc:`security features </topics/security>`. Some are "
"built-in and always enabled. Others are optional because they aren't always "
"appropriate, or because they're inconvenient for development. For example, "
"forcing HTTPS may not be suitable for all websites, and it's impractical for "
"local development."
msgstr ""

msgid ""
"Performance optimizations are another category of trade-offs with "
"convenience. For instance, caching is useful in production, less so for "
"local development. Error reporting needs are also widely different."
msgstr ""

msgid "The following checklist includes settings that:"
msgstr ""

msgid ""
"must be set properly for Django to provide the expected level of security;"
msgstr ""

msgid "are expected to be different in each environment;"
msgstr ""

msgid "enable optional security features;"
msgstr ""

msgid "enable performance optimizations;"
msgstr ""

msgid "provide error reporting."
msgstr ""

msgid ""
"Many of these settings are sensitive and should be treated as confidential. "
"If you're releasing the source code for your project, a common practice is "
"to publish suitable settings for development, and to use a private settings "
"module for production."
msgstr ""

msgid "Run ``manage.py check --deploy``"
msgstr ""

msgid ""
"Some of the checks described below can be automated using the :option:`check "
"--deploy` option. Be sure to run it against your production settings file as "
"described in the option's documentation."
msgstr ""

msgid "Critical settings"
msgstr ""

msgid ":setting:`SECRET_KEY`"
msgstr ""

msgid ""
"**The secret key must be a large random value and it must be kept secret.**"
msgstr ""

msgid ""
"Make sure that the key used in production isn't used anywhere else and avoid "
"committing it to source control. This reduces the number of vectors from "
"which an attacker may acquire the key."
msgstr ""

msgid ""
"Instead of hardcoding the secret key in your settings module, consider "
"loading it from an environment variable::"
msgstr ""

msgid "or from a file::"
msgstr ""

msgid ":setting:`DEBUG`"
msgstr ""

msgid "**You must never enable debug in production.**"
msgstr ""

msgid ""
"You're certainly developing your project with :setting:`DEBUG = True "
"<DEBUG>`, since this enables handy features like full tracebacks in your "
"browser."
msgstr ""

msgid ""
"For a production environment, though, this is a really bad idea, because it "
"leaks lots of information about your project: excerpts of your source code, "
"local variables, settings, libraries used, etc."
msgstr ""

msgid "Environment-specific settings"
msgstr ""

msgid ":setting:`ALLOWED_HOSTS`"
msgstr ""

msgid ""
"When :setting:`DEBUG = False <DEBUG>`, Django doesn't work at all without a "
"suitable value for :setting:`ALLOWED_HOSTS`."
msgstr ""

msgid ""
"This setting is required to protect your site against some CSRF attacks. If "
"you use a wildcard, you must perform your own validation of the ``Host`` "
"HTTP header, or otherwise ensure that you aren't vulnerable to this category "
"of attacks."
msgstr ""

msgid ""
"You should also configure the Web server that sits in front of Django to "
"validate the host. It should respond with a static error page or ignore "
"requests for incorrect hosts instead of forwarding the request to Django. "
"This way you'll avoid spurious errors in your Django logs (or emails if you "
"have error reporting configured that way). For example, on nginx you might "
"setup a default server to return \"444 No Response\" on an unrecognized host:"
msgstr ""

msgid ":setting:`CACHES`"
msgstr ""

msgid ""
"If you're using a cache, connection parameters may be different in "
"development and in production. Django defaults to per-process :ref:`local-"
"memory caching <local-memory-caching>` which may not be desirable."
msgstr ""

msgid ""
"Cache servers often have weak authentication. Make sure they only accept "
"connections from your application servers."
msgstr ""

msgid ":setting:`DATABASES`"
msgstr ""

msgid ""
"Database connection parameters are probably different in development and in "
"production."
msgstr ""

msgid ""
"Database passwords are very sensitive. You should protect them exactly like :"
"setting:`SECRET_KEY`."
msgstr ""

msgid ""
"For maximum security, make sure database servers only accept connections "
"from your application servers."
msgstr ""

msgid "If you haven't set up backups for your database, do it right now!"
msgstr ""

msgid ":setting:`EMAIL_BACKEND` and related settings"
msgstr ""

msgid "If your site sends emails, these values need to be set correctly."
msgstr ""

msgid ""
"By default, Django sends email from webmaster@localhost and root@localhost. "
"However, some mail providers reject email from these addresses. To use "
"different sender addresses, modify the :setting:`DEFAULT_FROM_EMAIL` and :"
"setting:`SERVER_EMAIL` settings."
msgstr ""

msgid ":setting:`STATIC_ROOT` and :setting:`STATIC_URL`"
msgstr ""

msgid ""
"Static files are automatically served by the development server. In "
"production, you must define a :setting:`STATIC_ROOT` directory where :"
"djadmin:`collectstatic` will copy them."
msgstr ""

msgid "See :doc:`/howto/static-files/index` for more information."
msgstr ""

msgid ":setting:`MEDIA_ROOT` and :setting:`MEDIA_URL`"
msgstr ""

msgid ""
"Media files are uploaded by your users. They're untrusted! Make sure your "
"web server never attempts to interpret them. For instance, if a user uploads "
"a ``.php`` file, the web server shouldn't execute it."
msgstr ""

msgid "Now is a good time to check your backup strategy for these files."
msgstr ""

msgid "HTTPS"
msgstr ""

msgid ""
"Any website which allows users to log in should enforce site-wide HTTPS to "
"avoid transmitting access tokens in clear. In Django, access tokens include "
"the login/password, the session cookie, and password reset tokens. (You "
"can't do much to protect password reset tokens if you're sending them by "
"email.)"
msgstr ""

msgid ""
"Protecting sensitive areas such as the user account or the admin isn't "
"sufficient, because the same session cookie is used for HTTP and HTTPS. Your "
"web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS "
"requests to Django."
msgstr ""

msgid "Once you've set up HTTPS, enable the following settings."
msgstr ""

msgid ":setting:`CSRF_COOKIE_SECURE`"
msgstr ""

msgid ""
"Set this to ``True`` to avoid transmitting the CSRF cookie over HTTP "
"accidentally."
msgstr ""

msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ""

msgid ""
"Set this to ``True`` to avoid transmitting the session cookie over HTTP "
"accidentally."
msgstr ""

msgid "Performance optimizations"
msgstr ""

msgid ""
"Setting :setting:`DEBUG = False <DEBUG>` disables several features that are "
"only useful in development. In addition, you can tune the following settings."
msgstr ""

msgid "Sessions"
msgstr "Sessioni"

msgid ""
"Consider using :ref:`cached sessions <cached-sessions-backend>` to improve "
"performance."
msgstr ""

msgid ""
"If using database-backed sessions, regularly :ref:`clear old sessions "
"<clearing-the-session-store>` to avoid storing unnecessary data."
msgstr ""

msgid ":setting:`CONN_MAX_AGE`"
msgstr ""

msgid ""
"Enabling :ref:`persistent database connections <persistent-database-"
"connections>` can result in a nice speed-up when connecting to the database "
"accounts for a significant part of the request processing time."
msgstr ""

msgid "This helps a lot on virtualized hosts with limited network performance."
msgstr ""

msgid ":setting:`TEMPLATES`"
msgstr ""

msgid ""
"Enabling the cached template loader often improves performance drastically, "
"as it avoids compiling each template every time it needs to be rendered. See "
"the :ref:`template loaders docs <template-loaders>` for more information."
msgstr ""

msgid "Error reporting"
msgstr ""

msgid ""
"By the time you push your code to production, it's hopefully robust, but you "
"can't rule out unexpected errors. Thankfully, Django can capture errors and "
"notify you accordingly."
msgstr ""

msgid ":setting:`LOGGING`"
msgstr ""

msgid ""
"Review your logging configuration before putting your website in production, "
"and check that it works as expected as soon as you have received some "
"traffic."
msgstr ""

msgid "See :doc:`/topics/logging` for details on logging."
msgstr ""

msgid ":setting:`ADMINS` and :setting:`MANAGERS`"
msgstr ""

msgid ":setting:`ADMINS` will be notified of 500 errors by email."
msgstr ""

msgid ""
":setting:`MANAGERS` will be notified of 404 errors. :setting:"
"`IGNORABLE_404_URLS` can help filter out spurious reports."
msgstr ""

msgid ""
"See :doc:`/howto/error-reporting` for details on error reporting by email."
msgstr ""

msgid "Error reporting by email doesn't scale very well"
msgstr ""

msgid ""
"Consider using an error monitoring system such as Sentry_ before your inbox "
"is flooded by reports. Sentry can also aggregate logs."
msgstr ""

msgid "Customize the default error views"
msgstr ""

msgid ""
"Django includes default views and templates for several HTTP error codes. "
"You may want to override the default templates by creating the following "
"templates in your root template directory: ``404.html``, ``500.html``, ``403."
"html``, and ``400.html``. The :ref:`default error views <error-views>` that "
"use these templates should suffice for 99% of Web applications, but you can :"
"ref:`customize them <customizing-error-views>` as well."
msgstr ""

msgid "Deploying Django"
msgstr ""

msgid ""
"Django is full of shortcuts to make Web developers' lives easier, but all "
"those tools are of no use if you can't easily deploy your sites. Since "
"Django's inception, ease of deployment has been a major goal."
msgstr ""

msgid ""
"There are many options for deploying your Django application, based on your "
"architecture or your particular business needs, but that discussion is "
"outside the scope of what Django can give you as guidance."
msgstr ""

msgid ""
"Django, being a web framework, needs a web server in order to operate. And "
"since most web servers don't natively speak Python, we need an interface to "
"make that communication happen."
msgstr ""

msgid "Django currently supports two interfaces: WSGI and ASGI."
msgstr ""

msgid ""
"`WSGI`_ is the main Python standard for communicating between Web servers "
"and applications, but it only supports synchronous code."
msgstr ""

msgid ""
"`ASGI`_ is the new, asynchronous-friendly standard that will allow your "
"Django site to use asynchronous Python features, and asynchronous Django "
"features as they are developed."
msgstr ""

msgid ""
"You should also consider how you will handle :doc:`static files </howto/"
"static-files/deployment>` for your application, and how to handle :doc:"
"`error reporting</howto/error-reporting>`."
msgstr ""

msgid ""
"Finally, before you deploy your application to production, you should run "
"through our :doc:`deployment checklist<checklist>` to ensure that your "
"configurations are suitable."
msgstr ""

msgid "Authenticating against Django's user database from Apache"
msgstr ""

msgid ""
"Since keeping multiple authentication databases in sync is a common problem "
"when dealing with Apache, you can configure Apache to authenticate against "
"Django's :doc:`authentication system </topics/auth/index>` directly. This "
"requires Apache version >= 2.2 and mod_wsgi >= 2.0. For example, you could:"
msgstr ""

msgid ""
"Serve static/media files directly from Apache only to authenticated users."
msgstr ""

msgid ""
"Authenticate access to a Subversion_ repository against Django users with a "
"certain permission."
msgstr ""

msgid "Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""

msgid ""
"If you have installed a :ref:`custom user model <auth-custom-user>` and want "
"to use this default auth handler, it must support an ``is_active`` "
"attribute. If you want to use group based authorization, your custom user "
"must have a relation named 'groups', referring to a related object that has "
"a 'name' field. You can also specify your own custom mod_wsgi auth handler "
"if your custom cannot conform to these requirements."
msgstr ""

msgid "Authentication with ``mod_wsgi``"
msgstr "Autenticazione con ``mod_wsgi``"

msgid ""
"The use of ``WSGIApplicationGroup %{GLOBAL}`` in the configurations below "
"presumes that your Apache instance is running only one Django application. "
"If you are running more than one Django application, please refer to the "
"`Defining Application Groups`_ section of the mod_wsgi docs for more "
"information about this setting."
msgstr ""

msgid ""
"Make sure that mod_wsgi is installed and activated and that you have "
"followed the steps to setup :doc:`Apache with mod_wsgi </howto/deployment/"
"wsgi/modwsgi>`."
msgstr ""

msgid ""
"Next, edit your Apache configuration to add a location that you want only "
"authenticated users to be able to view:"
msgstr ""

msgid ""
"The ``WSGIAuthUserScript`` directive tells mod_wsgi to execute the "
"``check_password`` function in specified wsgi script, passing the user name "
"and password that it receives from the prompt. In this example, the "
"``WSGIAuthUserScript`` is the same as the ``WSGIScriptAlias`` that defines "
"your application :doc:`that is created by django-admin startproject </howto/"
"deployment/wsgi/index>`."
msgstr ""

msgid "Using Apache 2.2 with authentication"
msgstr "Utilizzo di Apache 2.2 con autenticazione"

msgid "Make sure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded."
msgstr ""
"Controlla bene che  ``mod_auth_basic`` e ``mod_authz_user`` siano caricati"

msgid ""
"These might be compiled statically into Apache, or you might need to use "
"LoadModule to load them dynamically in your ``httpd.conf``:"
msgstr ""

msgid ""
"Finally, edit your WSGI script ``mysite.wsgi`` to tie Apache's "
"authentication to your site's authentication mechanisms by importing the "
"``check_password`` function::"
msgstr ""

msgid ""
"Requests beginning with ``/secret/`` will now require a user to authenticate."
msgstr ""
"Le richieste che iniziano con  ``/secret/`` richiederanno un utente per "
"l'autenticazione"

msgid ""
"The mod_wsgi `access control mechanisms documentation`_ provides additional "
"details and information about alternative methods of authentication."
msgstr ""

msgid "Authorization with ``mod_wsgi`` and Django groups"
msgstr "Autorizzazione con ``mod_wsgi`` e gruppi Django"

msgid ""
"mod_wsgi also provides functionality to restrict a particular location to "
"members of a group."
msgstr ""
"mod_wsgi fornisce anche funzionalita di restringere una location particolare "
"a un membro del gruppo."

msgid "In this case, the Apache configuration should look like this:"
msgstr "In questo caso, la configurazione di Apache dovrebbe essere cosi :"

msgid ""
"To support the ``WSGIAuthGroupScript`` directive, the same WSGI script "
"``mysite.wsgi`` must also import the ``groups_for_user`` function which "
"returns a list groups the given user belongs to."
msgstr ""

msgid ""
"Requests for ``/secret/`` will now also require user to be a member of the "
"\"secret-agents\" group."
msgstr ""

msgid "How to use Django with Gunicorn"
msgstr "Come installare Django con Gunicorn"

msgid ""
"Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no "
"dependencies and can be installed using ``pip``."
msgstr ""

msgid "Installing Gunicorn"
msgstr "Installazione Gunicorn"

msgid ""
"Install gunicorn by running ``python -m pip install gunicorn``. For more "
"details, see the `gunicorn documentation`_."
msgstr ""

msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr "Girare Django in Gunicorn come una applicazione generica WSGI"

msgid ""
"When Gunicorn is installed, a ``gunicorn`` command is available which starts "
"the Gunicorn server process. The simplest invocation of gunicorn is to pass "
"the location of a module containing a WSGI application object named "
"``application``, which for a typical Django project would look like::"
msgstr ""

msgid ""
"This will start one process running one thread listening on "
"``127.0.0.1:8000``. It requires that your project be on the Python path; the "
"simplest way to ensure that is to run this command from the same directory "
"as your ``manage.py`` file."
msgstr ""

msgid "See Gunicorn's `deployment documentation`_ for additional tips."
msgstr ""

msgid "How to deploy with WSGI"
msgstr ""

msgid ""
"Django's primary deployment platform is WSGI_, the Python standard for web "
"servers and applications."
msgstr ""

msgid ""
"Django's :djadmin:`startproject` management command sets up a minimal "
"default WSGI configuration for you, which you can tweak as needed for your "
"project, and direct any WSGI-compliant application server to use."
msgstr ""

msgid ""
"Django includes getting-started documentation for the following WSGI servers:"
msgstr ""

msgid ""
"The key concept of deploying with WSGI is the ``application`` callable which "
"the application server uses to communicate with your code. It's commonly "
"provided as an object named ``application`` in a Python module accessible to "
"the server."
msgstr ""

msgid ""
"The :djadmin:`startproject` command creates a file :file:`<project_name>/"
"wsgi.py` that contains such an ``application`` callable."
msgstr ""

msgid ""
"It's used both by Django's development server and in production WSGI "
"deployments."
msgstr ""

msgid ""
"WSGI servers obtain the path to the ``application`` callable from their "
"configuration. Django's built-in server, namely the :djadmin:`runserver` "
"command, reads it from the :setting:`WSGI_APPLICATION` setting. By default, "
"it's set to ``<project_name>.wsgi.application``, which points to the "
"``application`` callable in :file:`<project_name>/wsgi.py`."
msgstr ""

msgid ""
"When the WSGI server loads your application, Django needs to import the "
"settings module — that's where your entire application is defined."
msgstr ""

msgid ""
"If this variable isn't set, the default :file:`wsgi.py` sets it to ``mysite."
"settings``, where ``mysite`` is the name of your project. That's how :"
"djadmin:`runserver` discovers the default settings file by default."
msgstr ""

msgid ""
"Since environment variables are process-wide, this doesn't work when you run "
"multiple Django sites in the same process. This happens with mod_wsgi."
msgstr ""

msgid ""
"To avoid this problem, use mod_wsgi's daemon mode with each site in its own "
"daemon process, or override the value from the environment by enforcing ``os."
"environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"`` in your :file:"
"`wsgi.py`."
msgstr ""

msgid "Applying WSGI middleware"
msgstr ""

msgid ""
"To apply :pep:`WSGI middleware <3333#middleware-components-that-play-both-"
"sides>` you can wrap the application object. For instance you could add "
"these lines at the bottom of :file:`wsgi.py`::"
msgstr ""

msgid ""
"You could also replace the Django WSGI application with a custom WSGI "
"application that later delegates to the Django WSGI application, if you want "
"to combine a Django application with a WSGI application of another framework."
msgstr ""

msgid "How to use Django with Apache and ``mod_wsgi``"
msgstr ""

msgid ""
"Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to "
"get Django into production."
msgstr ""

msgid ""
"mod_wsgi is an Apache module which can host any Python WSGI_ application, "
"including Django. Django will work with any version of Apache which supports "
"mod_wsgi."
msgstr ""

msgid ""
"The `official mod_wsgi documentation`_ is your source for all the details "
"about how to use mod_wsgi. You'll probably want to start with the "
"`installation and configuration documentation`_."
msgstr ""

msgid "Basic configuration"
msgstr "Configurazione di base"

msgid ""
"Once you've got mod_wsgi installed and activated, edit your Apache server's "
"`httpd.conf`_ file and add the following."
msgstr ""

msgid ""
"The first bit in the ``WSGIScriptAlias`` line is the base URL path you want "
"to serve your application at (``/`` indicates the root url), and the second "
"is the location of a \"WSGI file\" -- see below -- on your system, usually "
"inside of your project package (``mysite`` in this example). This tells "
"Apache to serve any request below the given URL using the WSGI application "
"defined in that file."
msgstr ""

msgid ""
"If you install your project's Python dependencies inside a :mod:`virtual "
"environment <venv>`, add the path using ``WSGIPythonHome``. See the "
"`mod_wsgi virtual environment guide`_ for more details."
msgstr ""

msgid ""
"The ``WSGIPythonPath`` line ensures that your project package is available "
"for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""

msgid ""
"The ``<Directory>`` piece ensures that Apache can access your :file:`wsgi."
"py` file."
msgstr ""

msgid ""
"Next we'll need to ensure this :file:`wsgi.py` with a WSGI application "
"object exists. As of Django version 1.4, :djadmin:`startproject` will have "
"created one for you; otherwise, you'll need to create it. See the :doc:`WSGI "
"overview documentation</howto/deployment/wsgi/index>` for the default "
"contents you should put in this file, and what else you can add to it."
msgstr ""

msgid ""
"If multiple Django sites are run in a single mod_wsgi process, all of them "
"will use the settings of whichever one happens to run first. This can be "
"solved by changing::"
msgstr ""

msgid "in ``wsgi.py``, to::"
msgstr ""

msgid ""
"or by :ref:`using mod_wsgi daemon mode<daemon-mode>` and ensuring that each "
"site runs in its own daemon process."
msgstr ""

msgid "Fixing ``UnicodeEncodeError`` for file uploads"
msgstr ""

msgid ""
"If you get a ``UnicodeEncodeError`` when uploading files with file names "
"that contain non-ASCII characters, make sure Apache is configured to accept "
"non-ASCII file names::"
msgstr ""

msgid ""
"A common location to put this configuration is ``/etc/apache2/envvars``."
msgstr ""

msgid ""
"See the :ref:`unicode-files` section of the Unicode reference guide for "
"details."
msgstr ""

msgid "Using ``mod_wsgi`` daemon mode"
msgstr ""

msgid ""
"\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows "
"platforms). To create the required daemon process group and delegate the "
"Django instance to run in it, you will need to add appropriate "
"``WSGIDaemonProcess`` and ``WSGIProcessGroup`` directives. A further change "
"required to the above configuration if you use daemon mode is that you can't "
"use ``WSGIPythonPath``; instead you should use the ``python-path`` option to "
"``WSGIDaemonProcess``, for example:"
msgstr ""

msgid ""
"If you want to serve your project in a subdirectory (``https://example.com/"
"mysite`` in this example), you can add ``WSGIScriptAlias`` to the "
"configuration above:"
msgstr ""

msgid ""
"See the official mod_wsgi documentation for `details on setting up daemon "
"mode`_."
msgstr ""

msgid "Serving files"
msgstr ""

msgid ""
"Django doesn't serve files itself; it leaves that job to whichever Web "
"server you choose."
msgstr ""

msgid ""
"We recommend using a separate Web server -- i.e., one that's not also "
"running Django -- for serving media. Here are some good choices:"
msgstr ""

msgid "Nginx_"
msgstr ""

msgid "A stripped-down version of Apache_"
msgstr ""

msgid ""
"If, however, you have no option but to serve media files on the same Apache "
"``VirtualHost`` as Django, you can set up Apache to serve some URLs as "
"static media, and others using the mod_wsgi interface to Django."
msgstr ""

msgid ""
"This example sets up Django at the site root, but serves ``robots.txt``, "
"``favicon.ico``, and anything in the ``/static/`` and ``/media/`` URL space "
"as a static file. All other URLs will be served using mod_wsgi:"
msgstr ""

msgid "Serving the admin files"
msgstr ""

msgid ""
"When :mod:`django.contrib.staticfiles` is in :setting:`INSTALLED_APPS`, the "
"Django development server automatically serves the static files of the admin "
"app (and any other installed apps). This is however not the case when you "
"use any other server arrangement. You're responsible for setting up Apache, "
"or whichever Web server you're using, to serve the admin files."
msgstr ""

msgid ""
"The admin files live in (:file:`django/contrib/admin/static/admin`) of the "
"Django distribution."
msgstr ""

msgid ""
"We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle "
"the admin files (along with a Web server as outlined in the previous "
"section; this means using the :djadmin:`collectstatic` management command to "
"collect the static files in :setting:`STATIC_ROOT`, and then configuring "
"your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), "
"but here are three other approaches:"
msgstr ""

msgid ""
"Create a symbolic link to the admin static files from within your document "
"root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""

msgid ""
"Use an ``Alias`` directive, as demonstrated above, to alias the appropriate "
"URL (probably :setting:`STATIC_URL` + ``admin/``) to the actual location of "
"the admin files."
msgstr ""

msgid ""
"Copy the admin static files so that they live within your Apache document "
"root."
msgstr ""

msgid ""
"Django provides a handler to allow Apache to authenticate users directly "
"against Django's authentication backends. See the :doc:`mod_wsgi "
"authentication documentation </howto/deployment/wsgi/apache-auth>`."
msgstr ""

msgid "How to use Django with uWSGI"
msgstr "Come usare Django con uWSGI"

msgid ""
"uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application "
"container server coded in pure C."
msgstr ""

msgid ""
"The uWSGI docs offer a `tutorial`_ covering Django, nginx, and uWSGI (one "
"possible deployment setup of many). The docs below are focused on how to "
"integrate Django with uWSGI."
msgstr ""

msgid "Prerequisite: uWSGI"
msgstr ""

msgid ""
"The uWSGI wiki describes several `installation procedures`_. Using pip, the "
"Python package manager, you can install any uWSGI version with a single "
"command. For example:"
msgstr ""

msgid "uWSGI model"
msgstr ""

msgid ""
"uWSGI operates on a client-server model. Your Web server (e.g., nginx, "
"Apache) communicates with a ``django-uwsgi`` \"worker\" process to serve "
"dynamic content."
msgstr ""

msgid "Configuring and starting the uWSGI server for Django"
msgstr ""

msgid ""
"uWSGI supports multiple ways to configure the process. See uWSGI's "
"`configuration documentation`_."
msgstr ""

msgid "Here's an example command to start a uWSGI server::"
msgstr ""

msgid ""
"This assumes you have a top-level project package named ``mysite``, and "
"within it a module :file:`mysite/wsgi.py` that contains a WSGI "
"``application`` object. This is the layout you'll have if you ran ``django-"
"admin startproject mysite`` (using your own project name in place of "
"``mysite``) with a recent version of Django. If this file doesn't exist, "
"you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` "
"documentation for the default contents you should put in this file and what "
"else you can add to it."
msgstr ""

msgid "The Django-specific options here are:"
msgstr ""

msgid ""
"``chdir``: The path to the directory that needs to be on Python's import "
"path -- i.e., the directory containing the ``mysite`` package."
msgstr ""

msgid ""
"``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module "
"that :djadmin:`startproject` creates."
msgstr ""

msgid ""
"``env``: Should probably contain at least :envvar:`DJANGO_SETTINGS_MODULE`."
msgstr ""

msgid "``home``: Optional path to your project virtual environment."
msgstr ""

msgid "Example ini configuration file::"
msgstr ""

msgid "Example ini configuration file usage::"
msgstr ""

msgid ""
"If you get a ``UnicodeEncodeError`` when uploading files with file names "
"that contain non-ASCII characters, make sure uWSGI is configured to accept "
"non-ASCII file names by adding this to your ``uwsgi.ini``::"
msgstr ""

msgid ""
"See the uWSGI docs on `managing the uWSGI process`_ for information on "
"starting, stopping and reloading the uWSGI workers."
msgstr ""

msgid ""
"When you're running a public site you should always turn off the :setting:"
"`DEBUG` setting. That will make your server run much faster, and will also "
"prevent malicious users from seeing details of your application that can be "
"revealed by the error pages."
msgstr ""

msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will instead see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr ""

msgid "Email reports"
msgstr ""

msgid "Server errors"
msgstr ""

msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (strictly speaking, for "
"any response with an HTTP status code of 500 or greater). This gives the "
"administrators immediate notification of any errors. The :setting:`ADMINS` "
"will get a description of the error, a complete Python traceback, and "
"details about the HTTP request that caused the error."
msgstr ""

msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify :"
"setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and :setting:"
"`EMAIL_HOST_PASSWORD`, though other settings may be also required depending "
"on your mail server's configuration. Consult :doc:`the Django settings "
"documentation </ref/settings>` for a full list of email-related settings."
msgstr ""

msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""

msgid ""
"To activate this behavior, put the email addresses of the recipients in the :"
"setting:`ADMINS` setting."
msgstr ""

msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration </"
"topics/logging>`."
msgstr ""

msgid "404 errors"
msgstr "Errori 404"

msgid ""
"Django can also be configured to email errors about broken links (404 \"page "
"not found\" errors). Django sends emails about 404 errors when:"
msgstr ""

msgid ":setting:`DEBUG` is ``False``;"
msgstr ""

msgid ""
"Your :setting:`MIDDLEWARE` setting includes :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware`."
msgstr ""

msgid ""
"If those conditions are met, Django will email the users listed in the :"
"setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. It doesn't bother to email for 404s that don't have a referer "
"-- those are usually people typing in broken URLs or broken Web bots. It "
"also ignores 404s when the referer is equal to the requested URL, since this "
"behavior is from broken Web bots too."
msgstr ""

msgid ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` must appear "
"before other middleware that intercepts 404 errors, such as :class:`~django."
"middleware.locale.LocaleMiddleware` or :class:`~django.contrib.flatpages."
"middleware.FlatpageFallbackMiddleware`. Put it towards the top of your :"
"setting:`MIDDLEWARE` setting."
msgstr ""

msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the :"
"setting:`IGNORABLE_404_URLS` setting. It should be a list of compiled "
"regular expression objects. For example::"
msgstr ""

msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""

msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr ""

msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr ""

msgid ""
"If you'd like to customize the behavior of :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware` further (for example to ignore requests coming "
"from web crawlers), you should subclass it and override its methods."
msgstr ""

msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""

msgid "Filtering error reports"
msgstr ""

msgid ""
"Filtering sensitive data is a hard problem, and it's nearly impossible to "
"guarantee that sensitive data won't leak into an error report. Therefore, "
"error reports should only be available to trusted team members and you "
"should avoid transmitting error reports unencrypted over the Internet (such "
"as through email)."
msgstr ""

msgid "Filtering sensitive information"
msgstr ""

msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_’s local variables, and the :"
"class:`~django.http.HttpRequest`’s :ref:`attributes<httprequest-attributes>`."
msgstr ""

msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So in addition to filtering out settings "
"that appear to be sensitive as described in the :setting:`DEBUG` "
"documentation, Django offers a set of function decorators to help you "
"control which information should be filtered out of error reports in a "
"production environment (that is, where :setting:`DEBUG` is set to "
"``False``): :func:`sensitive_variables` and :func:"
"`sensitive_post_parameters`."
msgstr ""

msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr ""

msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (``**********``) in the "
"error reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

msgid ""
"To systematically hide all local variables of a function from error logs, do "
"not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""

msgid "When using multiple decorators"
msgstr ""

msgid ""
"If the variable you want to hide is also a function argument (e.g. "
"'``user``’ in the following example), and if the decorated function has "
"multiple decorators, then make sure to place ``@sensitive_variables`` at the "
"top of the decorator chain. This way it will also hide the function argument "
"as it gets passed through the other decorators::"
msgstr ""

msgid ""
"If one of your views receives an :class:`~django.http.HttpRequest` object "
"with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to "
"contain sensitive information, you may prevent the values of those "
"parameters from being included in the error reports using the "
"``sensitive_post_parameters`` decorator::"
msgstr ""

msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (``**********``) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

msgid ""
"To systematically hide all POST parameters of a request in error reports, do "
"not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""

msgid ""
"All POST parameters are systematically filtered out of error reports for "
"certain :mod:`django.contrib.auth.views` views (``login``, "
"``password_reset_confirm``, ``password_change``, and ``add_view`` and "
"``user_change_password`` in the ``auth`` admin) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

msgid "Custom error reports"
msgstr ""

msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is, "
"respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: :class:`django.views.debug."
"SafeExceptionReporterFilter`. This filter uses the decorators' annotations "
"to replace the corresponding values with stars (``**********``) when the "
"error reports are produced. If you wish to override or customize this "
"default behavior for your entire site, you need to define your own filter "
"class and tell Django to use it via the :setting:"
"`DEFAULT_EXCEPTION_REPORTER_FILTER` setting::"
msgstr ""

msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``’s ``exception_reporter_filter`` "
"attribute::"
msgstr ""

msgid ""
"Your custom filter class needs to inherit from :class:`django.views.debug."
"SafeExceptionReporterFilter` and may override the following attributes and "
"methods:"
msgstr ""

msgid ""
"The string value to replace sensitive value with. By default it replaces the "
"values of sensitive variables with stars (``**********``)."
msgstr ""

msgid ""
"A compiled regular expression object used to match settings and ``request."
"META`` values considered as sensitive. By default equivalent to::"
msgstr ""

msgid ""
"Returns ``True`` to activate the filtering in :meth:`get_post_parameters` "
"and :meth:`get_traceback_frame_variables`. By default the filter is active "
"if :setting:`DEBUG` is ``False``. Note that sensitive ``request.META`` "
"values are always filtered along with sensitive setting values, as described "
"in the :setting:`DEBUG` documentation."
msgstr ""

msgid ""
"Returns the filtered dictionary of POST parameters. Sensitive values are "
"replaced with :attr:`cleansed_substitute`."
msgstr ""

msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. Sensitive values are replaced with :attr:`cleansed_substitute`."
msgstr ""

msgid ""
"If you need to customize error reports beyond filtering you may specify a "
"custom error reporter class by defining the :setting:"
"`DEFAULT_EXCEPTION_REPORTER` setting::"
msgstr ""

msgid ""
"The exception reporter is responsible for compiling the exception report "
"data, and formatting it as text or HTML appropriately. (The exception "
"reporter uses :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` when preparing "
"the exception report data.)"
msgstr ""

msgid ""
"Your custom reporter class needs to inherit from :class:`django.views.debug."
"ExceptionReporter`."
msgstr ""

msgid ""
"Property that returns a :class:`pathlib.Path` representing the absolute "
"filesystem path to a template for rendering the HTML representation of the "
"exception. Defaults to the Django provided template."
msgstr ""

msgid ""
"Property that returns a :class:`pathlib.Path` representing the absolute "
"filesystem path to a template for rendering the plain-text representation of "
"the exception. Defaults to the Django provided template."
msgstr ""

msgid "Return a dictionary containing traceback information."
msgstr ""

msgid ""
"This is the main extension point for customizing exception reports, for "
"example::"
msgstr ""

msgid "Return HTML version of exception report."
msgstr ""

msgid "Used for HTML version of debug 500 HTTP error page."
msgstr ""

msgid "Return plain text version of exception report."
msgstr ""

msgid ""
"Used for plain text version of debug 500 HTTP error page and email reports."
msgstr ""

msgid ""
"As with the filter class, you may control which exception reporter class to "
"use within any given view by setting the ``HttpRequest``’s "
"``exception_reporter_class`` attribute::"
msgstr ""

msgid ""
"You can also set up custom error reporting by writing a custom piece of :ref:"
"`exception middleware <exception-middleware>`. If you do write custom error "
"handling, it's a good idea to emulate Django's built-in error handling and "
"only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""

msgid "\"How-to\" guides"
msgstr ""

msgid ""
"Here you'll find short answers to \"How do I....?\" types of questions. "
"These how-to guides don't cover topics in depth -- you'll find that material "
"in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these guides "
"will help you quickly accomplish common tasks."
msgstr ""

msgid ""
"The `Django community aggregator`_, where we aggregate content from the "
"global Django community. Many writers in the aggregator write this sort of "
"how-to material."
msgstr ""

msgid "Providing initial data for models"
msgstr ""

msgid ""
"It's sometimes useful to pre-populate your database with hard-coded data "
"when you're first setting up an app. You can provide initial data with "
"migrations or fixtures."
msgstr ""

msgid "Providing initial data with migrations"
msgstr ""

msgid ""
"If you want to automatically load initial data for an app, create a :ref:"
"`data migration <data-migrations>`. Migrations are run when setting up the "
"test database, so the data will be available there, subject to :ref:`some "
"limitations <test-case-serialized-rollback>`."
msgstr ""

msgid "Providing data with fixtures"
msgstr ""

msgid ""
"You can also provide data using fixtures, however, this data isn't loaded "
"automatically, except if you use :attr:`.TransactionTestCase.fixtures`."
msgstr ""

msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. The most straightforward way of creating a fixture if you've "
"already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>` "
"command. Or, you can write fixtures by hand; fixtures can be written as "
"JSON, XML or YAML (with PyYAML_ installed) documents. The :doc:"
"`serialization documentation </topics/serialization>` has more details about "
"each of these supported :ref:`serialization formats <serialization-formats>`."
msgstr ""

msgid ""
"As an example, though, here's what a fixture for a ``Person`` model might "
"look like in JSON:"
msgstr ""

msgid "And here's that same fixture as YAML:"
msgstr ""

msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""

msgid ""
"You can load data by calling :djadmin:`manage.py loaddata <loaddata>` "
"``<fixturename>``, where ``<fixturename>`` is the name of the fixture file "
"you've created. Each time you run :djadmin:`loaddata`, the data will be read "
"from the fixture and re-loaded into the database. Note this means that if "
"you change one of the rows created by a fixture and then run :djadmin:"
"`loaddata` again, you'll wipe out any changes you've made."
msgstr ""

msgid "Where Django finds fixture files"
msgstr ""

msgid ""
"By default, Django looks in the ``fixtures`` directory inside each app for "
"fixtures. You can set the :setting:`FIXTURE_DIRS` setting to a list of "
"additional directories where Django should look."
msgstr ""

msgid ""
"When running :djadmin:`manage.py loaddata <loaddata>`, you can also specify "
"a path to a fixture file, which overrides searching the usual directories."
msgstr ""

msgid ""
"Fixtures are also used by the :ref:`testing framework <topics-testing-"
"fixtures>` to help set up a consistent test environment."
msgstr ""

msgid "Integrating Django with a legacy database"
msgstr "Integrazione di Django con database obsoleti"

msgid ""
"While Django is best suited for developing new applications, it's quite "
"possible to integrate it into legacy databases. Django includes a couple of "
"utilities to automate as much of this process as possible."
msgstr ""
"Mentre Django è adatto a sviluppare nuove applicazioni, e tuttavia possibile "
"integrarlo con database obsoleti. Django include alcuni strumenti per "
"automatizzare il più possibile il processo."

msgid ""
"This document assumes you know the Django basics, as covered in the :doc:"
"`tutorial </intro/tutorial01>`."
msgstr ""
"Questo documento presume che tu sappia le basi di Django, come ?descritto? "
"nella sezione :doc:`tutorial </intro/tutorial01>`."

msgid ""
"Once you've got Django set up, you'll follow this general process to "
"integrate with an existing database."
msgstr ""

msgid "Give Django your database parameters"
msgstr "Dai a Django i tuoi parametri del database"

msgid ""
"You'll need to tell Django what your database connection parameters are, and "
"what the name of the database is. Do that by editing the :setting:"
"`DATABASES` setting and assigning values to the following keys for the "
"``'default'`` connection:"
msgstr ""

msgid ":setting:`NAME`"
msgstr ":setting:`NAME`"

msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ":setting:`ENGINE <DATABASE-ENGINE>`"

msgid ":setting:`USER`"
msgstr ":setting:`USER`"

msgid ":setting:`PASSWORD`"
msgstr ":setting:`PASSWORD`"

msgid ":setting:`HOST`"
msgstr ":setting:`HOST`"

msgid ":setting:`PORT`"
msgstr ":setting:`PORT`"

msgid "Auto-generate the models"
msgstr "Generazione automatica dei modelli"

msgid ""
"Django comes with a utility called :djadmin:`inspectdb` that can create "
"models by introspecting an existing database. You can view the output by "
"running this command::"
msgstr ""

msgid "Save this as a file by using standard Unix output redirection::"
msgstr ""

msgid ""
"This feature is meant as a shortcut, not as definitive model generation. See "
"the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""

msgid ""
"Once you've cleaned up your models, name the file ``models.py`` and put it "
"in the Python package that holds your app. Then add the app to your :setting:"
"`INSTALLED_APPS` setting."
msgstr ""

msgid ""
"By default, :djadmin:`inspectdb` creates unmanaged models. That is, "
"``managed = False`` in the model's ``Meta`` class tells Django not to manage "
"each table's creation, modification, and deletion::"
msgstr ""

msgid ""
"If you do want to allow Django to manage the table's lifecycle, you'll need "
"to change the :attr:`~django.db.models.Options.managed` option above to "
"``True`` (or remove it because ``True`` is its default value)."
msgstr ""

msgid "Install the core Django tables"
msgstr ""

msgid ""
"Next, run the :djadmin:`migrate` command to install any extra needed "
"database records such as admin permissions and content types::"
msgstr ""

msgid "Test and tweak"
msgstr "Test ed aggiustamenti"

msgid ""
"Those are the basic steps -- from here you'll want to tweak the models "
"Django generated until they work the way you'd like. Try accessing your data "
"via the Django database API, and try editing objects via Django's admin "
"site, and edit the models file accordingly."
msgstr ""

msgid "Outputting CSV with Django"
msgstr ""

msgid ""
"This document explains how to output CSV (Comma Separated Values) "
"dynamically using Django views. To do this, you can either use the Python "
"CSV library or the Django template system."
msgstr ""

msgid "Using the Python CSV library"
msgstr "Utilizzando la libreria CSV di Python"

msgid ""
"Python comes with a CSV library, :mod:`csv`. The key to using it with Django "
"is that the :mod:`csv` module's CSV-creation capability acts on file-like "
"objects, and Django's :class:`~django.http.HttpResponse` objects are file-"
"like objects."
msgstr ""

msgid "Here's an example::"
msgstr "Qui un esempio::"

msgid ""
"The code and comments should be self-explanatory, but a few things deserve a "
"mention:"
msgstr ""

msgid ""
"The response gets a special MIME type, :mimetype:`text/csv`. This tells "
"browsers that the document is a CSV file, rather than an HTML file. If you "
"leave this off, browsers will probably interpret the output as HTML, which "
"will result in ugly, scary gobbledygook in the browser window."
msgstr ""

msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the CSV file. This filename is arbitrary; call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialog, "
"etc."
msgstr ""

msgid ""
"You can hook into the CSV-generation API by passing ``response`` as the "
"first argument to ``csv.writer``. The ``csv.writer`` function expects a file-"
"like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

msgid ""
"For each row in your CSV file, call ``writer.writerow``, passing it an :term:"
"`iterable`."
msgstr ""

msgid ""
"The CSV module takes care of quoting for you, so you don't have to worry "
"about escaping strings with quotes or commas in them. Pass ``writerow()`` "
"your raw strings, and it'll do the right thing."
msgstr ""

msgid "Streaming large CSV files"
msgstr "Streaming di grossi file CSV"

msgid ""
"When dealing with views that generate very large responses, you might want "
"to consider using Django's :class:`~django.http.StreamingHttpResponse` "
"instead. For example, by streaming a file that takes a long time to generate "
"you can avoid a load balancer dropping a connection that might have "
"otherwise timed out while the server was generating the response."
msgstr ""

msgid ""
"In this example, we make full use of Python generators to efficiently handle "
"the assembly and transmission of a large CSV file::"
msgstr ""

msgid "Using the template system"
msgstr "Utilizzare il template system"

msgid ""
"Alternatively, you can use the :doc:`Django template system </topics/"
"templates>` to generate CSV. This is lower-level than using the convenient "
"Python :mod:`csv` module, but the solution is presented here for "
"completeness."
msgstr ""

msgid ""
"The idea here is to pass a list of items to your template, and have the "
"template output the commas in a :ttag:`for` loop."
msgstr ""

msgid "Here's an example, which generates the same CSV file as above::"
msgstr ""

msgid ""
"The only difference between this example and the previous example is that "
"this one uses template loading instead of the CSV module. The rest of the "
"code -- such as the ``content_type='text/csv'`` -- is the same."
msgstr ""

msgid ""
"Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""

msgid ""
"This short template iterates over the given data and displays a line of CSV "
"for each row. It uses the :tfilter:`addslashes` template filter to ensure "
"there aren't any problems with quotes."
msgstr ""

msgid "Other text-based formats"
msgstr ""

msgid ""
"Notice that there isn't very much specific to CSV here -- just the specific "
"output format. You can use either of these techniques to output any text-"
"based format you can dream of. You can also use a similar technique to "
"generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an "
"example."
msgstr ""

msgid "Outputting PDFs with Django"
msgstr "?Elaborazioni/Generazioni? di PDF con Django"

msgid ""
"This document explains how to output PDF files dynamically using Django "
"views. This is made possible by the excellent, open-source ReportLab_ Python "
"PDF library."
msgstr ""

msgid ""
"The advantage of generating PDF files dynamically is that you can create "
"customized PDFs for different purposes -- say, for different users or "
"different pieces of content."
msgstr ""

msgid ""
"For example, Django was used at kusports.com_ to generate customized, "
"printer-friendly NCAA tournament brackets, as PDF files, for people "
"participating in a March Madness contest."
msgstr ""

msgid "Install ReportLab"
msgstr "Installa ReportLab"

msgid ""
"The ReportLab library is `available on PyPI`_. A `user guide`_ (not "
"coincidentally, a PDF file) is also available for download. You can install "
"ReportLab with ``pip``:"
msgstr ""

msgid ""
"Test your installation by importing it in the Python interactive "
"interpreter::"
msgstr ""

msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""

msgid "Write your view"
msgstr "Scrivi la tua vista"

msgid ""
"The key to generating PDFs dynamically with Django is that the ReportLab API "
"acts on file-like objects, and Django's :class:`~django.http.FileResponse` "
"objects accept file-like objects."
msgstr ""

msgid "Here's a \"Hello World\" example::"
msgstr "Qui un esempio di \"Hello World\"::"

msgid ""
"The response will automatically set the MIME type :mimetype:`application/"
"pdf` based on the filename extension. This tells browsers that the document "
"is a PDF file, rather than an HTML file or a generic :mimetype:`application/"
"octet-stream` binary content."
msgstr ""

msgid ""
"When ``as_attachment=True`` is passed to ``FileResponse``, it sets the "
"appropriate ``Content-Disposition`` header and that tells Web browsers to "
"pop-up a dialog box prompting/confirming how to handle the document even if "
"a default is set on the machine. If the ``as_attachment`` parameter is "
"omitted, browsers will handle the PDF using whatever program/plugin they've "
"been configured to use for PDFs."
msgstr ""

msgid ""
"You can provide an arbitrary ``filename`` parameter. It'll be used by "
"browsers in the \"Save as...\" dialog."
msgstr ""

msgid ""
"You can hook into the ReportLab API: The same buffer passed as the first "
"argument to ``canvas.Canvas`` can be fed to the :class:`~django.http."
"FileResponse` class."
msgstr ""

msgid ""
"Note that all subsequent PDF-generation methods are called on the PDF object "
"(in this case, ``p``) -- not on ``buffer``."
msgstr ""

msgid ""
"Finally, it's important to call ``showPage()`` and ``save()`` on the PDF "
"file."
msgstr ""

msgid ""
"ReportLab is not thread-safe. Some of our users have reported odd issues "
"with building PDF-generating Django views that are accessed by many people "
"at the same time."
msgstr ""

msgid "Other formats"
msgstr "Altri formati"

msgid ""
"Notice that there isn't a lot in these examples that's PDF-specific -- just "
"the bits using ``reportlab``. You can use a similar technique to generate "
"any arbitrary format that you can find a Python library for. Also see :doc:`/"
"howto/outputting-csv` for another example and some techniques you can use "
"when generated text-based formats."
msgstr ""

msgid ""
"Django Packages provides a `comparison of packages <https://djangopackages."
"org/grids/g/pdf/>`_ that help generate PDF files from Django."
msgstr ""

msgid "Overriding templates"
msgstr ""

msgid ""
"In your project, you might want to override a template in another Django "
"application, whether it be a third-party application or a contrib "
"application such as ``django.contrib.admin``. You can either put template "
"overrides in your project's templates directory or in an application's "
"templates directory."
msgstr ""

msgid ""
"If you have app and project templates directories that both contain "
"overrides, the default Django template loader will try to load the template "
"from the project-level directory first. In other words, :setting:`DIRS "
"<TEMPLATES-DIRS>` is searched before :setting:`APP_DIRS <TEMPLATES-"
"APP_DIRS>`."
msgstr ""

msgid ""
"Read :ref:`overriding-built-in-widget-templates` if you're looking to do "
"that."
msgstr ""

msgid "Overriding from the project's templates directory"
msgstr ""

msgid ""
"First, we'll explore overriding templates by creating replacement templates "
"in your project's templates directory."
msgstr ""

msgid ""
"Let's say you're trying to override the templates for a third-party "
"application called ``blog``, which provides the templates ``blog/post.html`` "
"and ``blog/list.html``. The relevant settings for your project would look "
"like::"
msgstr ""

msgid ""
"The :setting:`TEMPLATES` setting and ``BASE_DIR`` will already exist if you "
"created your project using the default project template. The setting that "
"needs to be modified is :setting:`DIRS<TEMPLATES-DIRS>`."
msgstr ""

msgid ""
"These settings assume you have a ``templates`` directory in the root of your "
"project. To override the templates for the ``blog`` app, create a folder in "
"the ``templates`` directory, and add the template files to that folder:"
msgstr ""

msgid ""
"The template loader first looks for templates in the ``DIRS`` directory. "
"When the views in the ``blog`` app ask for the ``blog/post.html`` and ``blog/"
"list.html`` templates, the loader will return the files you just created."
msgstr ""

msgid "Overriding from an app's template directory"
msgstr ""

msgid ""
"Since you're overriding templates located outside of one of your project's "
"apps, it's more common to use the first method and put template overrides in "
"a project's templates folder. If you prefer, however, it's also possible to "
"put the overrides in an app's template directory."
msgstr ""

msgid ""
"First, make sure your template settings are checking inside app directories::"
msgstr ""

msgid ""
"If you want to put the template overrides in an app called ``myapp`` and the "
"templates to override are named ``blog/list.html`` and ``blog/post.html``, "
"then your directory structure will look like:"
msgstr ""

msgid ""
"With :setting:`APP_DIRS<TEMPLATES-APP_DIRS>` set to ``True``, the template "
"loader will look in the app's templates directory and find the templates."
msgstr ""

msgid "Extending an overridden template"
msgstr ""

msgid ""
"With your template loaders configured, you can extend a template using the :"
"ttag:`{% extends %}<extends>` template tag whilst at the same time "
"overriding it. This can allow you to make small customizations without "
"needing to reimplement the entire template."
msgstr ""

msgid ""
"For example, you can use this technique to add a custom logo to the ``admin/"
"base_site.html`` template:"
msgstr ""

msgid "templates/admin/base_site.html"
msgstr ""

msgid "Key points to note:"
msgstr ""

msgid ""
"The example creates a file at ``templates/admin/base_site.html`` that uses "
"the configured project-level ``templates`` directory to override ``admin/"
"base_site.html``."
msgstr ""

msgid ""
"The new template extends ``admin/base_site.html``, which is the same "
"template as is being overridden."
msgstr ""

msgid ""
"The template replaces just the ``branding`` block, adding a custom logo, and "
"using ``block.super`` to retain the prior content."
msgstr ""

msgid ""
"The rest of the template is inherited unchanged from ``admin/base_site."
"html``."
msgstr ""

msgid ""
"This technique works because the template loader does not consider the "
"already loaded override template (at ``templates/admin/base_site.html``) "
"when resolving the ``extends`` tag. Combined with ``block.super`` it is a "
"powerful technique to make small customizations."
msgstr ""

msgid "Deploying static files"
msgstr "Deploying di file statici"

msgid ""
"For an introduction to the use of :mod:`django.contrib.staticfiles`, see :"
"doc:`/howto/static-files/index`."
msgstr ""

msgid "Serving static files in production"
msgstr ""

msgid ""
"The basic outline of putting static files into production consists of two "
"steps: run the :djadmin:`collectstatic` command when static files change, "
"then arrange for the collected static files directory (:setting:"
"`STATIC_ROOT`) to be moved to the static file server and served. Depending "
"on :setting:`STATICFILES_STORAGE`, files may need to be moved to a new "
"location manually or the :func:`post_process <django.contrib.staticfiles."
"storage.StaticFilesStorage.post_process>` method of the ``Storage`` class "
"might take care of that."
msgstr ""

msgid ""
"As with all deployment tasks, the devil's in the details. Every production "
"setup will be a bit different, so you'll need to adapt the basic outline to "
"fit your needs. Below are a few common patterns that might help."
msgstr ""

msgid "Serving the site and your static files from the same server"
msgstr ""

msgid ""
"If you want to serve your static files from the same server that's already "
"serving your site, the process may look something like:"
msgstr ""

msgid "Push your code up to the deployment server."
msgstr ""

msgid ""
"On the server, run :djadmin:`collectstatic` to copy all the static files "
"into :setting:`STATIC_ROOT`."
msgstr ""

msgid ""
"Configure your web server to serve the files in :setting:`STATIC_ROOT` under "
"the URL :setting:`STATIC_URL`. For example, here's :ref:`how to do this with "
"Apache and mod_wsgi <serving-files>`."
msgstr ""

msgid ""
"You'll probably want to automate this process, especially if you've got "
"multiple web servers."
msgstr ""

msgid "Serving static files from a dedicated server"
msgstr ""

msgid ""
"Most larger Django sites use a separate Web server -- i.e., one that's not "
"also running Django -- for serving static files. This server often runs a "
"different type of web server -- faster but less full-featured. Some common "
"choices are:"
msgstr ""

msgid ""
"Configuring these servers is out of scope of this document; check each "
"server's respective documentation for instructions."
msgstr ""

msgid ""
"Since your static file server won't be running Django, you'll need to modify "
"the deployment strategy to look something like:"
msgstr ""

msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""

msgid ""
"Push your local :setting:`STATIC_ROOT` up to the static file server into the "
"directory that's being served. `rsync <https://rsync.samba.org/>`_ is a "
"common choice for this step since it only needs to transfer the bits of "
"static files that have changed."
msgstr ""

msgid "Serving static files from a cloud service or CDN"
msgstr ""

msgid ""
"Another common tactic is to serve static files from a cloud storage provider "
"like Amazon's S3 and/or a CDN (content delivery network). This lets you "
"ignore the problems of serving static files and can often make for faster-"
"loading Web pages (especially when using a CDN)."
msgstr ""

msgid ""
"When using these services, the basic workflow would look a bit like the "
"above, except that instead of using ``rsync`` to transfer your static files "
"to the server you'd need to transfer the static files to the storage "
"provider or CDN."
msgstr ""

msgid ""
"There's any number of ways you might do this, but if the provider has an "
"API, you can use a :doc:`custom file storage backend </howto/custom-file-"
"storage>` to integrate the CDN with your Django project. If you've written "
"or are using a 3rd party custom storage backend, you can tell :djadmin:"
"`collectstatic` to use it by setting :setting:`STATICFILES_STORAGE` to the "
"storage engine."
msgstr ""

msgid ""
"For example, if you've written an S3 storage backend in ``myproject.storage."
"S3Storage`` you could use it with::"
msgstr ""

msgid ""
"Once that's done, all you have to do is run :djadmin:`collectstatic` and "
"your static files would be pushed through your storage package up to S3. If "
"you later needed to switch to a different storage provider, you may only "
"have to change your :setting:`STATICFILES_STORAGE` setting."
msgstr ""

msgid ""
"For details on how you'd write one of these backends, see :doc:`/howto/"
"custom-file-storage`. There are 3rd party apps available that provide "
"storage backends for many common file storage APIs. A good starting point is "
"the `overview at djangopackages.org <https://djangopackages.org/grids/g/"
"storage-backends/>`_."
msgstr ""

msgid "Learn more"
msgstr "Per saperne di più"

msgid ""
"For complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

msgid "Managing static files (e.g. images, JavaScript, CSS)"
msgstr ""

msgid ""
"Websites generally need to serve additional files such as images, "
"JavaScript, or CSS. In Django, we refer to these files as \"static files\".  "
"Django provides :mod:`django.contrib.staticfiles` to help you manage them."
msgstr ""

msgid "This page describes how you can serve these static files."
msgstr ""

msgid "Configuring static files"
msgstr ""

msgid ""
"Make sure that ``django.contrib.staticfiles`` is included in your :setting:"
"`INSTALLED_APPS`."
msgstr ""

msgid "In your settings file, define :setting:`STATIC_URL`, for example::"
msgstr ""

msgid ""
"In your templates, use the :ttag:`static` template tag to build the URL for "
"the given relative path using the configured :setting:`STATICFILES_STORAGE`."
msgstr ""

msgid ""
"Store your static files in a folder called ``static`` in your app. For "
"example ``my_app/static/my_app/example.jpg``."
msgstr ""

msgid "Serving the files"
msgstr "Servire i file"

msgid ""
"In addition to these configuration steps, you'll also need to actually serve "
"the static files."
msgstr ""

msgid ""
"During development, if you use :mod:`django.contrib.staticfiles`, this will "
"be done automatically by :djadmin:`runserver` when :setting:`DEBUG` is set "
"to ``True`` (see :func:`django.contrib.staticfiles.views.serve`)."
msgstr ""

msgid ""
"This method is **grossly inefficient** and probably **insecure**, so it is "
"**unsuitable for production**."
msgstr ""

msgid ""
"See :doc:`/howto/static-files/deployment` for proper strategies to serve "
"static files in production environments."
msgstr ""

msgid ""
"Your project will probably also have static assets that aren't tied to a "
"particular app. In addition to using a ``static/`` directory inside your "
"apps, you can define a list of directories (:setting:`STATICFILES_DIRS`) in "
"your settings file where Django will also look for static files. For "
"example::"
msgstr ""

msgid ""
"See the documentation for the :setting:`STATICFILES_FINDERS` setting for "
"details on how ``staticfiles`` finds your files."
msgstr ""

msgid "Static file namespacing"
msgstr "Namespacing dei file statici"

msgid ""
"Now we *might* be able to get away with putting our static files directly in "
"``my_app/static/`` (rather than creating another ``my_app`` subdirectory), "
"but it would actually be a bad idea. Django will use the first static file "
"it finds whose name matches, and if you had a static file with the same name "
"in a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the best way "
"to ensure this is by *namespacing* them. That is, by putting those static "
"files inside *another* directory named for the application itself."
msgstr ""

msgid ""
"You can namespace static assets in :setting:`STATICFILES_DIRS` by "
"specifying :ref:`prefixes <staticfiles-dirs-prefixes>`."
msgstr ""

msgid "Serving static files during development"
msgstr ""

msgid ""
"If you use :mod:`django.contrib.staticfiles` as explained above, :djadmin:"
"`runserver` will do this automatically when :setting:`DEBUG` is set to "
"``True``. If you don't have ``django.contrib.staticfiles`` in :setting:"
"`INSTALLED_APPS`, you can still manually serve static files using the :func:"
"`django.views.static.serve` view."
msgstr ""

msgid ""
"This is not suitable for production use! For some common deployment "
"strategies, see :doc:`/howto/static-files/deployment`."
msgstr ""

msgid ""
"For example, if your :setting:`STATIC_URL` is defined as ``/static/``, you "
"can do this by adding the following snippet to your urls.py::"
msgstr ""

msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/static/``) and not a URL (e.g. ``http://static.example.com/"
"``)."
msgstr ""

msgid ""
"Also this helper function only serves the actual :setting:`STATIC_ROOT` "
"folder; it doesn't perform static files discovery like :mod:`django.contrib."
"staticfiles`."
msgstr ""

msgid "Serving files uploaded by a user during development"
msgstr ""

msgid ""
"During development, you can serve user-uploaded media files from :setting:"
"`MEDIA_ROOT` using the :func:`django.views.static.serve` view."
msgstr ""

msgid ""
"For example, if your :setting:`MEDIA_URL` is defined as ``/media/``, you can "
"do this by adding the following snippet to your :setting:`ROOT_URLCONF`::"
msgstr ""

msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/media/``) and not a URL (e.g. ``http://media.example.com/"
"``)."
msgstr ""

msgid ""
"When running tests that use actual HTTP requests instead of the built-in "
"testing client (i.e. when using the built-in :class:`LiveServerTestCase "
"<django.test.LiveServerTestCase>`) the static assets need to be served along "
"the rest of the content so the test environment reproduces the real one as "
"faithfully as possible, but ``LiveServerTestCase`` has only very basic "
"static file-serving functionality: It doesn't know about the finders feature "
"of the ``staticfiles`` application and assumes the static content has "
"already been collected under :setting:`STATIC_ROOT`."
msgstr ""

msgid ""
"Because of this, ``staticfiles`` ships its own :class:`django.contrib."
"staticfiles.testing.StaticLiveServerTestCase`, a subclass of the built-in "
"one that has the ability to transparently serve all the assets during "
"execution of these tests in a way very similar to what we get at development "
"time with ``DEBUG = True``, i.e. without having to collect them using :"
"djadmin:`collectstatic` first."
msgstr ""

msgid "Deployment"
msgstr "Deployment"

msgid ""
":mod:`django.contrib.staticfiles` provides a convenience management command "
"for gathering static files in a single directory so you can serve them "
"easily."
msgstr ""

msgid ""
"Set the :setting:`STATIC_ROOT` setting to the directory from which you'd "
"like to serve these files, for example::"
msgstr ""

msgid "Run the :djadmin:`collectstatic` management command::"
msgstr "?Avvia il comando  :djadmin:`collectstatic`  ::"

msgid ""
"This will copy all files from your static folders into the :setting:"
"`STATIC_ROOT` directory."
msgstr ""

msgid ""
"Use a web server of your choice to serve the files. :doc:`/howto/static-"
"files/deployment` covers some common deployment strategies for static files."
msgstr ""

msgid ""
"This document has covered the basics and some common usage patterns. For "
"complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

msgid "Upgrading Django to a newer version"
msgstr "Aggiornamenti di Django a una nuova versione"

msgid ""
"While it can be a complex process at times, upgrading to the latest Django "
"version has several benefits:"
msgstr ""

msgid "New features and improvements are added."
msgstr "Nuove features e miglioramenti sono aggiunti"

msgid "Bugs are fixed."
msgstr "Bugs e fix."

msgid ""
"Older version of Django will eventually no longer receive security updates. "
"(see :ref:`supported-versions-policy`)."
msgstr ""

msgid ""
"Upgrading as each new Django release is available makes future upgrades less "
"painful by keeping your code base up to date."
msgstr ""

msgid ""
"Here are some things to consider to help make your upgrade process as smooth "
"as possible."
msgstr ""

msgid "Required Reading"
msgstr "Letture richieste"

msgid ""
"If it's your first time doing an upgrade, it is useful to read the :doc:"
"`guide on the different release processes </internals/release-process>`."
msgstr ""

msgid ""
"Afterwards, you should familiarize yourself with the changes that were made "
"in the new Django version(s):"
msgstr ""

msgid ""
"Read the :doc:`release notes </releases/index>` for each 'final' release "
"from the one after your current Django version, up to and including the "
"version to which you plan to upgrade."
msgstr ""

msgid ""
"Look at the :doc:`deprecation timeline</internals/deprecation>` for the "
"relevant versions."
msgstr ""

msgid ""
"Pay particular attention to backwards incompatible changes to get a clear "
"idea of what will be needed for a successful upgrade."
msgstr ""

msgid ""
"If you're upgrading through more than one feature version (e.g. 2.0 to 2.2), "
"it's usually easier to upgrade through each feature release incrementally "
"(2.0 to 2.1 to 2.2) rather than to make all the changes for each feature "
"release at once. For each feature release, use the latest patch release (e."
"g. for 2.1, use 2.1.15)."
msgstr ""

msgid ""
"The same incremental upgrade approach is recommended when upgrading from one "
"LTS to the next."
msgstr ""

msgid "Dependencies"
msgstr "Dipendenze"

msgid ""
"In most cases it will be necessary to upgrade to the latest version of your "
"Django-related dependencies as well. If the Django version was recently "
"released or if some of your dependencies are not well-maintained, some of "
"your dependencies may not yet support the new Django version. In these cases "
"you may have to wait until new versions of your dependencies are released."
msgstr ""

msgid "Resolving deprecation warnings"
msgstr "Risolvere i warning delle deprecation"

msgid ""
"Before upgrading, it's a good idea to resolve any deprecation warnings "
"raised by your project while using your current version of Django. Fixing "
"these warnings before upgrading ensures that you're informed about areas of "
"the code that need altering."
msgstr ""

msgid ""
"In Python, deprecation warnings are silenced by default. You must turn them "
"on using the ``-Wa`` Python command line option or the :envvar:"
"`PYTHONWARNINGS` environment variable. For example, to show warnings while "
"running tests:"
msgstr ""

msgid ""
"If you're not using the Django test runner, you may need to also ensure that "
"any console output is not captured which would hide deprecation warnings. "
"For example, if you use `pytest <https://pytest.org/>`__:"
msgstr ""

msgid ""
"Resolve any deprecation warnings with your current version of Django before "
"continuing the upgrade process."
msgstr ""

msgid ""
"Third party applications might use deprecated APIs in order to support "
"multiple versions of Django, so deprecation warnings in packages you've "
"installed don't necessarily indicate a problem. If a package doesn't support "
"the latest version of Django, consider raising an issue or sending a pull "
"request for it."
msgstr ""

msgid "Installation"
msgstr "Installazione"

msgid ""
"Once you're ready, it is time to :doc:`install the new Django version </"
"topics/install>`. If you are using a :mod:`virtual environment <venv>` and "
"it is a major upgrade, you might want to set up a new environment with all "
"the dependencies first."
msgstr ""

msgid ""
"If you installed Django with pip_, you can use the ``--upgrade`` or ``-U`` "
"flag:"
msgstr ""

msgid ""
"When the new environment is set up, :doc:`run the full test suite </topics/"
"testing/overview>` for your application. Again, it's useful to turn on "
"deprecation warnings on so they're shown in the test output (you can also "
"use the flag if you test your app manually using ``manage.py runserver``):"
msgstr ""

msgid ""
"After you have run the tests, fix any failures. While you have the release "
"notes fresh in your mind, it may also be a good time to take advantage of "
"new features in Django by refactoring your code to eliminate any deprecation "
"warnings."
msgstr ""

msgid ""
"When you are sufficiently confident your app works with the new version of "
"Django, you're ready to go ahead and :doc:`deploy </howto/deployment/index>` "
"your upgraded Django project."
msgstr ""

msgid ""
"If you are using caching provided by Django, you should consider clearing "
"your cache after upgrading. Otherwise you may run into problems, for "
"example, if you are caching pickled objects as these objects are not "
"guaranteed to be pickle-compatible across Django versions. A past instance "
"of incompatibility was caching pickled :class:`~django.http.HttpResponse` "
"objects, either directly or indirectly via the :func:`~django.views."
"decorators.cache.cache_page` decorator."
msgstr ""

msgid "How to install Django on Windows"
msgstr "Come installare Django su Windows"

msgid ""
"This document will guide you through installing Python 3.8 and Django on "
"Windows. It also provides instructions for setting up a virtual environment, "
"which makes it easier to work on Python projects. This is meant as a "
"beginner's guide for users working on Django projects and does not reflect "
"how Django should be installed when developing patches for Django itself."
msgstr ""

msgid ""
"The steps in this guide have been tested with Windows 10. In other versions, "
"the steps would be similar. You will need to be familiar with using the "
"Windows command prompt."
msgstr ""

msgid "Install Python"
msgstr "Installa Python"

msgid ""
"Django is a Python web framework, thus requiring Python to be installed on "
"your machine. At the time of writing, Python 3.8 is the latest version."
msgstr ""

msgid ""
"To install Python on your machine go to https://python.org/downloads/. The "
"website should offer you a download button for the latest Python version. "
"Download the executable installer and run it. Check the boxes next to "
"\"Install launcher for all users (recommended)\" then click \"Install Now\"."
msgstr ""

msgid ""
"After installation, open the command prompt and check that the Python "
"version matches the version you installed by executing::"
msgstr ""

msgid "For more details, see :doc:`python:using/windows` documentation."
msgstr ""

msgid "About ``pip``"
msgstr "Su ``pip``"

msgid ""
"`pip`_ is a package manager for Python and is included by default with the "
"Python installer. It helps to install and uninstall Python packages (such as "
"Django!). For the rest of the installation, we'll use ``pip`` to install "
"Python packages from the command line."
msgstr ""

msgid "Setting up a virtual environment"
msgstr ""

msgid ""
"It is best practice to provide a dedicated environment for each Django "
"project you create. There are many options to manage environments and "
"packages within the Python ecosystem, some of which are recommended in the "
"`Python documentation <https://packaging.python.org/guides/tool-"
"recommendations/>`_. Python itself comes with :doc:`venv <python:tutorial/"
"venv>` for managing environments which we will use for this guide."
msgstr ""

msgid ""
"To create a virtual environment for your project, open a new command prompt, "
"navigate to the folder where you want to create your project and then enter "
"the following::"
msgstr ""

msgid ""
"This will create a folder called 'project-name' if it does not already exist "
"and setup the virtual environment. To activate the environment, run::"
msgstr ""

msgid ""
"The virtual environment will be activated and you'll see \"(project-name)\" "
"next to the command prompt to designate that. Each time you start a new "
"command prompt, you'll need to activate the environment again."
msgstr ""

msgid "Install Django"
msgstr "Installa Django"

msgid ""
"Django can be installed easily using ``pip`` within your virtual environment."
msgstr ""
"Django puo essere installato utilizzando ``pip`` nel tuo ambiente virtuale."

msgid ""
"In the command prompt, ensure your virtual environment is active, and "
"execute the following command::"
msgstr ""
"Nel promt dei commandi, assicurati che il tuo ambiente virtuale sia attivo, "
"ed esegui i seguenti comandi::"

msgid "This will download and install the latest Django release."
msgstr "Questo scarichera e installera l'ultima versione di Django"

msgid ""
"After the installation has completed, you can verify your Django "
"installation by executing ``django-admin --version`` in the command prompt."
msgstr ""

msgid ""
"See :ref:`database-installation` for information on database installation "
"with Django."
msgstr ""

msgid "Colored terminal output"
msgstr ""

msgid ""
"A quality-of-life feature adds colored (rather than monochrome) output to "
"the terminal. In modern terminals this should work for both CMD and "
"PowerShell. If for some reason this needs to be disabled, set the "
"environmental variable :envvar:`DJANGO_COLORS` to ``nocolor``."
msgstr ""

msgid ""
"On older Windows versions, or legacy terminals, colorama_ must be installed "
"to enable syntax coloring::"
msgstr ""

msgid "See :ref:`syntax-coloring` for more information on color settings."
msgstr ""

msgid "Common pitfalls"
msgstr ""

msgid ""
"If ``django-admin`` only displays the help text no matter what arguments it "
"is given, there is probably a problem with the file association in Windows. "
"Check if there is more than one environment variable set for running Python "
"scripts in ``PATH``. This usually occurs when there is more than one Python "
"version installed."
msgstr ""

msgid ""
"If you are connecting to the internet behind a proxy, there might be "
"problems in running the command ``py -m pip install Django``. Set the "
"environment variables for proxy configuration in the command prompt as "
"follows::"
msgstr ""

msgid "Writing database migrations"
msgstr ""

msgid ""
"This document explains how to structure and write database migrations for "
"different scenarios you might encounter. For introductory material on "
"migrations, see :doc:`the topic guide </topics/migrations>`."
msgstr ""

msgid "Data migrations and multiple databases"
msgstr ""

msgid ""
"When using multiple databases, you may need to figure out whether or not to "
"run a migration against a particular database. For example, you may want to "
"**only** run a migration on a particular database."
msgstr ""

msgid ""
"In order to do that you can check the database connection's alias inside a "
"``RunPython`` operation by looking at the ``schema_editor.connection.alias`` "
"attribute::"
msgstr ""

msgid ""
"You can also provide hints that will be passed to the :meth:"
"`allow_migrate()` method of database routers as ``**hints``:"
msgstr ""

msgid "myapp/dbrouters.py"
msgstr ""

msgid "Then, to leverage this in your migrations, do the following::"
msgstr ""

msgid ""
"If your ``RunPython`` or ``RunSQL`` operation only affects one model, it's "
"good practice to pass ``model_name`` as a hint to make it as transparent as "
"possible to the router. This is especially important for reusable and third-"
"party apps."
msgstr ""

msgid "Migrations that add unique fields"
msgstr ""

msgid ""
"Applying a \"plain\" migration that adds a unique non-nullable field to a "
"table with existing rows will raise an error because the value used to "
"populate existing rows is generated only once, thus breaking the unique "
"constraint."
msgstr ""

msgid ""
"Therefore, the following steps should be taken. In this example, we'll add a "
"non-nullable :class:`~django.db.models.UUIDField` with a default value. "
"Modify the respective field according to your needs."
msgstr ""

msgid ""
"Add the field on your model with ``default=uuid.uuid4`` and ``unique=True`` "
"arguments (choose an appropriate default for the type of the field you're "
"adding)."
msgstr ""

msgid ""
"Run the :djadmin:`makemigrations` command. This should generate a migration "
"with an ``AddField`` operation."
msgstr ""

msgid ""
"Generate two empty migration files for the same app by running "
"``makemigrations myapp --empty`` twice. We've renamed the migration files to "
"give them meaningful names in the examples below."
msgstr ""

msgid ""
"Copy the ``AddField`` operation from the auto-generated migration (the first "
"of the three new files) to the last migration, change ``AddField`` to "
"``AlterField``, and add imports of ``uuid`` and ``models``. For example:"
msgstr ""

msgid "0006_remove_uuid_null.py"
msgstr ""

msgid ""
"Edit the first migration file. The generated migration class should look "
"similar to this:"
msgstr ""

msgid "0004_add_uuid_field.py"
msgstr ""

msgid ""
"Change ``unique=True`` to ``null=True`` -- this will create the intermediary "
"null field and defer creating the unique constraint until we've populated "
"unique values on all the rows."
msgstr ""

msgid ""
"In the first empty migration file, add a :class:`~django.db.migrations."
"operations.RunPython` or :class:`~django.db.migrations.operations.RunSQL` "
"operation to generate a unique value (UUID in the example) for each existing "
"row. Also add an import of ``uuid``. For example:"
msgstr ""

msgid "0005_populate_uuid_values.py"
msgstr ""

msgid ""
"Now you can apply the migrations as usual with the :djadmin:`migrate` "
"command."
msgstr ""

msgid ""
"Note there is a race condition if you allow objects to be created while this "
"migration is running. Objects created after the ``AddField`` and before "
"``RunPython`` will have their original ``uuid``’s overwritten."
msgstr ""

msgid "Non-atomic migrations"
msgstr ""

msgid ""
"On databases that support DDL transactions (SQLite and PostgreSQL), "
"migrations will run inside a transaction by default. For use cases such as "
"performing data migrations on large tables, you may want to prevent a "
"migration from running in a transaction by setting the ``atomic`` attribute "
"to ``False``::"
msgstr ""

msgid ""
"Within such a migration, all operations are run without a transaction. It's "
"possible to execute parts of the migration inside a transaction using :func:"
"`~django.db.transaction.atomic()` or by passing ``atomic=True`` to "
"``RunPython``."
msgstr ""

msgid ""
"Here's an example of a non-atomic data migration that updates a large table "
"in smaller batches::"
msgstr ""

msgid ""
"The ``atomic`` attribute doesn't have an effect on databases that don't "
"support DDL transactions (e.g. MySQL, Oracle). (MySQL's `atomic DDL "
"statement support <https://dev.mysql.com/doc/refman/en/atomic-ddl.html>`_ "
"refers to individual statements rather than multiple statements wrapped in a "
"transaction that can be rolled back.)"
msgstr ""

msgid "Controlling the order of migrations"
msgstr ""

msgid ""
"Django determines the order in which migrations should be applied not by the "
"filename of each migration, but by building a graph using two properties on "
"the ``Migration`` class: ``dependencies`` and ``run_before``."
msgstr ""

msgid ""
"If you've used the :djadmin:`makemigrations` command you've probably already "
"seen ``dependencies`` in action because auto-created migrations have this "
"defined as part of their creation process."
msgstr ""

msgid "The ``dependencies`` property is declared like this::"
msgstr ""

msgid ""
"Usually this will be enough, but from time to time you may need to ensure "
"that your migration runs *before* other migrations. This is useful, for "
"example, to make third-party apps' migrations run *after* your :setting:"
"`AUTH_USER_MODEL` replacement."
msgstr ""

msgid ""
"To achieve this, place all migrations that should depend on yours in the "
"``run_before`` attribute on your ``Migration`` class::"
msgstr ""

msgid ""
"Prefer using ``dependencies`` over ``run_before`` when possible. You should "
"only use ``run_before`` if it is undesirable or impractical to specify "
"``dependencies`` in the migration which you want to run after the one you "
"are writing."
msgstr ""

msgid "Migrating data between third-party apps"
msgstr "Migrazione dei dati tra app"

msgid ""
"You can use a data migration to move data from one third-party application "
"to another."
msgstr ""
"È possibile utilizzare una migrazione dei dati per spostare i dati da "
"un'applicazione ad un'altra."

msgid ""
"If you plan to remove the old app later, you'll need to set the "
"``dependencies`` property based on whether or not the old app is installed. "
"Otherwise, you'll have missing dependencies once you uninstall the old app. "
"Similarly, you'll need to catch :exc:`LookupError` in the ``apps."
"get_model()`` call that retrieves models from the old app. This approach "
"allows you to deploy your project anywhere without first installing and then "
"uninstalling the old app."
msgstr ""

msgid "Here's a sample migration:"
msgstr "Ecco un esempio di migrazione:"

msgid "myapp/migrations/0124_move_old_app_to_new_app.py"
msgstr ""

msgid ""
"Also consider what you want to happen when the migration is unapplied. You "
"could either do nothing (as in the example above) or remove some or all of "
"the data from the new application. Adjust the second argument of the :mod:"
"`~django.db.migrations.operations.RunPython` operation accordingly."
msgstr ""

msgid "Changing a ``ManyToManyField`` to use a ``through`` model"
msgstr ""

msgid ""
"If you change a :class:`~django.db.models.ManyToManyField` to use a "
"``through`` model, the default migration will delete the existing table and "
"create a new one, losing the existing relations. To avoid this, you can use :"
"class:`.SeparateDatabaseAndState` to rename the existing table to the new "
"table name while telling the migration autodetector that the new model has "
"been created. You can check the existing table name through :djadmin:"
"`sqlmigrate` or :djadmin:`dbshell`. You can check the new table name with "
"the through model's ``_meta.db_table`` property. Your new ``through`` model "
"should use the same names for the ``ForeignKey``\\s as Django did. Also if "
"it needs any extra fields, they should be added in operations after :class:`."
"SeparateDatabaseAndState`."
msgstr ""

msgid ""
"For example, if we had a ``Book`` model with a ``ManyToManyField`` linking "
"to ``Author``, we could add a through model ``AuthorBook`` with a new field "
"``is_primary``, like so::"
msgstr ""

msgid "Changing an unmanaged model to managed"
msgstr ""

msgid ""
"If you want to change an unmanaged model (:attr:`managed=False <django.db."
"models.Options.managed>`) to managed, you must remove ``managed=False`` and "
"generate a migration before making other schema-related changes to the "
"model, since schema changes that appear in the migration that contains the "
"operation to change ``Meta.managed`` may not be applied."
msgstr ""
